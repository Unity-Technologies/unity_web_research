diagnostic(off, derivative_uniformity);

alias Arr = array<vec4<f32>, 2u>;

struct UnityPerDraw {
  /* @offset(0) */
  unity_ObjectToWorld : mat4x4<f32>,
  /* @offset(64) */
  unity_WorldToObject : mat4x4<f32>,
  /* @offset(128) */
  unity_LODFade : vec4<f32>,
  /* @offset(144) */
  unity_WorldTransformParams : vec4<f32>,
  /* @offset(160) */
  unity_RenderingLayer : vec4<f32>,
  /* @offset(176) */
  unity_LightData : vec4<f32>,
  /* @offset(192) */
  unity_LightIndices : Arr,
  /* @offset(224) */
  unity_ProbesOcclusion : vec4<f32>,
  /* @offset(240) */
  unity_SpecCube0_HDR : vec4<f32>,
  /* @offset(256) */
  unity_SpecCube1_HDR : vec4<f32>,
  /* @offset(272) */
  unity_SpecCube0_BoxMax : vec4<f32>,
  /* @offset(288) */
  unity_SpecCube0_BoxMin : vec4<f32>,
  /* @offset(304) */
  unity_SpecCube0_ProbePosition : vec4<f32>,
  /* @offset(320) */
  unity_SpecCube1_BoxMax : vec4<f32>,
  /* @offset(336) */
  unity_SpecCube1_BoxMin : vec4<f32>,
  /* @offset(352) */
  unity_SpecCube1_ProbePosition : vec4<f32>,
  /* @offset(368) */
  unity_LightmapST : vec4<f32>,
  /* @offset(384) */
  unity_DynamicLightmapST : vec4<f32>,
  /* @offset(400) */
  unity_SHAr : vec4<f32>,
  /* @offset(416) */
  unity_SHAg : vec4<f32>,
  /* @offset(432) */
  unity_SHAb : vec4<f32>,
  /* @offset(448) */
  unity_SHBr : vec4<f32>,
  /* @offset(464) */
  unity_SHBg : vec4<f32>,
  /* @offset(480) */
  unity_SHBb : vec4<f32>,
  /* @offset(496) */
  unity_SHC : vec4<f32>,
  /* @offset(512) */
  unity_RendererBounds_Min : vec4<f32>,
  /* @offset(528) */
  unity_RendererBounds_Max : vec4<f32>,
  /* @offset(544) */
  unity_MatrixPreviousM : mat4x4<f32>,
  /* @offset(608) */
  unity_MatrixPreviousMI : mat4x4<f32>,
  /* @offset(672) */
  unity_MotionVectorsParams : vec4<f32>,
  /* @offset(688) */
  unity_SpriteColor : vec4<f32>,
  /* @offset(704) */
  unity_SpriteProps : vec4<f32>,
}

struct PGlobals {
  /* @offset(0) */
  x_GlobalMipBias : vec2<f32>,
  /* @offset(8) */
  x_AlphaToMaskAvailable : f32,
  /* @offset(16) */
  x_MainLightPosition : vec4<f32>,
  /* @offset(32) */
  x_MainLightColor : vec4<f32>,
  /* @offset(48) */
  x_AdditionalLightsCount : vec4<f32>,
  /* @offset(64) */
  x_WorldSpaceCameraPos : vec3<f32>,
  /* @offset(80) */
  x_ScreenParams : vec4<f32>,
  /* @offset(96) */
  unity_OrthoParams : vec4<f32>,
  /* @offset(112) */
  unity_MatrixV : mat4x4<f32>,
}

struct UnityPerMaterial {
  /* @offset(0) */
  Texture2D_B222E8F_TexelSize : vec4<f32>,
  /* @offset(16) */
  Color_C30C7CA3 : vec4<f32>,
  /* @offset(32) */
  Texture2D_D9BFD5F1_TexelSize : vec4<f32>,
}

alias Arr_1 = array<mat4x4<f32>, 5u>;

alias Arr_2 = array<vec4<f32>, 32u>;

alias Arr_3 = array<mat4x4<f32>, 32u>;

alias Arr_4 = array<vec4<f32>, 32u>;

struct LightShadows {
  /* @offset(0) */
  x_MainLightWorldToShadow : Arr_1,
  /* @offset(320) */
  x_CascadeShadowSplitSpheres0 : vec4<f32>,
  /* @offset(336) */
  x_CascadeShadowSplitSpheres1 : vec4<f32>,
  /* @offset(352) */
  x_CascadeShadowSplitSpheres2 : vec4<f32>,
  /* @offset(368) */
  x_CascadeShadowSplitSpheres3 : vec4<f32>,
  /* @offset(384) */
  x_CascadeShadowSplitSphereRadii : vec4<f32>,
  /* @offset(400) */
  x_MainLightShadowOffset0 : vec4<f32>,
  /* @offset(416) */
  x_MainLightShadowOffset1 : vec4<f32>,
  /* @offset(432) */
  x_MainLightShadowParams : vec4<f32>,
  /* @offset(448) */
  x_MainLightShadowmapSize : vec4<f32>,
  /* @offset(464) */
  x_AdditionalShadowOffset0 : vec4<f32>,
  /* @offset(480) */
  x_AdditionalShadowOffset1 : vec4<f32>,
  /* @offset(496) */
  x_AdditionalShadowFadeParams : vec4<f32>,
  /* @offset(512) */
  x_AdditionalShadowmapSize : vec4<f32>,
  /* @offset(528) */
  x_AdditionalShadowParams : Arr_4,
  /* @offset(1040) */
  x_AdditionalLightsWorldToShadow : Arr_3,
}

alias Arr_5 = array<vec4<f32>, 32u>;

alias Arr_6 = array<vec4<f32>, 32u>;

alias Arr_7 = array<vec4<f32>, 32u>;

alias Arr_8 = array<vec4<f32>, 32u>;

struct strided_arr {
  @size(16)
  el : f32,
}

alias Arr_9 = array<strided_arr, 32u>;

struct AdditionalLights {
  /* @offset(0) */
  x_AdditionalLightsPosition : Arr_4,
  /* @offset(512) */
  x_AdditionalLightsColor : Arr_4,
  /* @offset(1024) */
  x_AdditionalLightsAttenuation : Arr_4,
  /* @offset(1536) */
  x_AdditionalLightsSpotDir : Arr_4,
  /* @offset(2048) */
  x_AdditionalLightsOcclusionProbes : Arr_4,
  /* @offset(2560) */
  x_AdditionalLightsLayerMasks : Arr_9,
}

var<private> u_xlat0 : vec3<f32>;

var<private> vs_INTERP9 : vec3<f32>;

var<private> u_xlatb25 : vec2<bool>;

var<private> vs_INTERP4 : vec4<f32>;

@group(1) @binding(2) var<uniform> x_83 : UnityPerDraw;

var<private> u_xlat25 : vec3<f32>;

var<private> u_xlat1 : vec3<f32>;

var<private> u_xlat2 : vec4<f32>;

var<private> u_xlat3 : vec4<f32>;

var<private> u_xlatb0 : bool;

@group(1) @binding(0) var<uniform> x_149 : PGlobals;

var<private> u_xlat4 : vec4<f32>;

var<private> vs_INTERP8 : vec3<f32>;

var<private> u_xlat76 : f32;

var<private> u_xlat5 : vec3<f32>;

var<private> u_xlat6 : vec4<f32>;

@group(0) @binding(5) var Texture2D_B222E8F : texture_2d<f32>;

@group(0) @binding(10) var samplerTexture2D_B222E8F : sampler;

var<private> vs_INTERP5 : vec4<f32>;

var<private> u_xlat7 : vec3<f32>;

@group(1) @binding(4) var<uniform> x_289 : UnityPerMaterial;

var<private> u_xlat8 : vec4<f32>;

@group(0) @binding(6) var Texture2D_D9BFD5F1 : texture_2d<f32>;

@group(0) @binding(11) var samplerTexture2D_D9BFD5F1 : sampler;

var<private> u_xlat9 : vec4<f32>;

var<private> u_xlat33 : vec3<f32>;

var<private> vs_INTERP6 : vec4<f32>;

@group(1) @binding(3) var<uniform> x_394 : LightShadows;

var<private> u_xlat10 : vec4<f32>;

var<private> u_xlatb2 : vec4<bool>;

var<private> u_xlatu0 : u32;

var<private> u_xlati0 : i32;

var<private> u_xlatb76 : bool;

@group(0) @binding(3) var x_MainLightShadowmapTexture : texture_depth_2d;

@group(0) @binding(9) var sampler_LinearClampCompare : sampler_comparison;

var<private> u_xlatb77 : bool;

var<private> u_xlat53 : vec2<f32>;

var<private> u_xlat60 : vec2<f32>;

var<private> u_xlat11 : vec4<f32>;

var<private> u_xlat12 : vec4<f32>;

var<private> u_xlat13 : vec4<f32>;

var<private> u_xlat14 : vec4<f32>;

var<private> u_xlat15 : vec4<f32>;

var<private> u_xlat16 : vec4<f32>;

var<private> u_xlat77 : f32;

var<private> u_xlat28 : f32;

var<private> u_xlat34 : vec3<f32>;

var<private> u_xlat17 : vec4<f32>;

var<private> u_xlat18 : vec4<f32>;

var<private> u_xlat35 : vec3<f32>;

var<private> u_xlat66 : vec2<f32>;

var<private> u_xlat61 : vec2<f32>;

var<private> u_xlat19 : vec4<f32>;

var<private> u_xlat20 : vec4<f32>;

var<private> u_xlat21 : vec4<f32>;

var<private> u_xlat79 : f32;

var<private> u_xlatb3 : bool;

var<private> u_xlatb28 : bool;

var<private> u_xlat26 : vec3<f32>;

var<private> u_xlatu4 : vec3<u32>;

var<private> u_xlatu53 : u32;

var<private> u_xlatu78 : u32;

var<private> u_xlati53 : i32;

var<private> u_xlat78 : f32;

var<private> u_xlatb53 : bool;

@group(0) @binding(2) var unity_LightmapInd : texture_2d<f32>;

@group(0) @binding(8) var samplerunity_Lightmap : sampler;

var<private> vs_INTERP0 : vec2<f32>;

@group(0) @binding(1) var unity_Lightmap : texture_2d<f32>;

var<private> u_xlat80 : f32;

var<private> u_xlat81 : f32;

var<private> u_xlatb32 : bool;

var<private> u_xlat32 : vec3<f32>;

var<private> u_xlat58 : vec2<f32>;

var<private> u_xlat57 : f32;

var<private> u_xlat82 : f32;

var<private> u_xlat64 : vec2<f32>;

var<private> u_xlat27 : vec3<f32>;

var<private> u_xlat52 : f32;

@group(0) @binding(0) var unity_SpecCube0 : texture_cube<f32>;

@group(0) @binding(7) var samplerunity_SpecCube0 : sampler;

var<private> u_xlati80 : i32;

var<private> u_xlati78 : i32;

@group(1) @binding(1) var<uniform> x_3857 : AdditionalLights;

var<private> u_xlat83 : f32;

var<private> u_xlat84 : f32;

var<private> u_xlati84 : i32;

var<private> u_xlatb10 : vec3<bool>;

var<private> u_xlatb11 : vec3<bool>;

var<private> u_xlatb84 : bool;

@group(0) @binding(4) var x_AdditionalLightsShadowmapTexture : texture_depth_2d;

var<private> u_xlatb85 : bool;

var<private> u_xlat63 : vec2<f32>;

var<private> u_xlat85 : f32;

var<private> u_xlat36 : f32;

var<private> u_xlat37 : vec3<f32>;

var<private> u_xlat38 : vec2<f32>;

var<private> u_xlat69 : vec2<f32>;

var<private> u_xlat22 : vec4<f32>;

var<private> u_xlat23 : vec4<f32>;

var<private> u_xlat24 : vec4<f32>;

var<private> u_xlatb35 : bool;

var<private> SV_Target0 : vec4<f32>;

var<private> gl_FragCoord : vec4<f32>;

var<private> u_xlatu3 : u32;

var<private> u_xlatb78 : bool;

fn int_bitfieldInsert_i1_i1_i1_i1_(base : ptr<function, i32>, insert : ptr<function, i32>, offset_1 : ptr<function, i32>, bits : ptr<function, i32>) -> i32 {
  var mask : u32;
  let x_19 : i32 = *(bits);
  let x_23 : i32 = *(offset_1);
  mask = (~((4294967295u << bitcast<u32>(x_19))) << bitcast<u32>(x_23));
  let x_26 : i32 = *(base);
  let x_28 : u32 = mask;
  let x_31 : i32 = *(insert);
  let x_33 : i32 = *(offset_1);
  let x_36 : u32 = mask;
  return bitcast<i32>(((bitcast<u32>(x_26) & ~(x_28)) | ((bitcast<u32>(x_31) << bitcast<u32>(x_33)) & x_36)));
}

fn main_1() {
  var x_183 : f32;
  var x_196 : f32;
  var x_208 : f32;
  var txVec0 : vec3<f32>;
  var txVec1 : vec3<f32>;
  var txVec2 : vec3<f32>;
  var txVec3 : vec3<f32>;
  var txVec4 : vec3<f32>;
  var txVec5 : vec3<f32>;
  var txVec6 : vec3<f32>;
  var txVec7 : vec3<f32>;
  var txVec8 : vec3<f32>;
  var txVec9 : vec3<f32>;
  var txVec10 : vec3<f32>;
  var txVec11 : vec3<f32>;
  var txVec12 : vec3<f32>;
  var txVec13 : vec3<f32>;
  var txVec14 : vec3<f32>;
  var txVec15 : vec3<f32>;
  var txVec16 : vec3<f32>;
  var txVec17 : vec3<f32>;
  var txVec18 : vec3<f32>;
  var txVec19 : vec3<f32>;
  var txVec20 : vec3<f32>;
  var txVec21 : vec3<f32>;
  var txVec22 : vec3<f32>;
  var txVec23 : vec3<f32>;
  var txVec24 : vec3<f32>;
  var txVec25 : vec3<f32>;
  var txVec26 : vec3<f32>;
  var txVec27 : vec3<f32>;
  var txVec28 : vec3<f32>;
  var txVec29 : vec3<f32>;
  var x_1896 : f32;
  var param : i32;
  var param_1 : i32;
  var param_2 : i32;
  var param_3 : i32;
  var x_2021 : f32;
  var x_2075 : f32;
  var txVec30 : vec3<f32>;
  var txVec31 : vec3<f32>;
  var txVec32 : vec3<f32>;
  var txVec33 : vec3<f32>;
  var txVec34 : vec3<f32>;
  var txVec35 : vec3<f32>;
  var txVec36 : vec3<f32>;
  var txVec37 : vec3<f32>;
  var txVec38 : vec3<f32>;
  var txVec39 : vec3<f32>;
  var txVec40 : vec3<f32>;
  var txVec41 : vec3<f32>;
  var txVec42 : vec3<f32>;
  var txVec43 : vec3<f32>;
  var txVec44 : vec3<f32>;
  var txVec45 : vec3<f32>;
  var txVec46 : vec3<f32>;
  var txVec47 : vec3<f32>;
  var txVec48 : vec3<f32>;
  var txVec49 : vec3<f32>;
  var txVec50 : vec3<f32>;
  var txVec51 : vec3<f32>;
  var txVec52 : vec3<f32>;
  var txVec53 : vec3<f32>;
  var txVec54 : vec3<f32>;
  var txVec55 : vec3<f32>;
  var txVec56 : vec3<f32>;
  var txVec57 : vec3<f32>;
  var txVec58 : vec3<f32>;
  var txVec59 : vec3<f32>;
  var x_3453 : f32;
  var u_xlatu_loop_1 : u32;
  var indexable : array<vec4<u32>, 4u>;
  var x_3996 : f32;
  var x_4008 : f32;
  var txVec60 : vec3<f32>;
  var txVec61 : vec3<f32>;
  var txVec62 : vec3<f32>;
  var txVec63 : vec3<f32>;
  var txVec64 : vec3<f32>;
  var txVec65 : vec3<f32>;
  var txVec66 : vec3<f32>;
  var txVec67 : vec3<f32>;
  var txVec68 : vec3<f32>;
  var txVec69 : vec3<f32>;
  var txVec70 : vec3<f32>;
  var txVec71 : vec3<f32>;
  var txVec72 : vec3<f32>;
  var txVec73 : vec3<f32>;
  var txVec74 : vec3<f32>;
  var txVec75 : vec3<f32>;
  var txVec76 : vec3<f32>;
  var txVec77 : vec3<f32>;
  var txVec78 : vec3<f32>;
  var txVec79 : vec3<f32>;
  var txVec80 : vec3<f32>;
  var txVec81 : vec3<f32>;
  var txVec82 : vec3<f32>;
  var txVec83 : vec3<f32>;
  var txVec84 : vec3<f32>;
  var txVec85 : vec3<f32>;
  var txVec86 : vec3<f32>;
  var txVec87 : vec3<f32>;
  var txVec88 : vec3<f32>;
  var txVec89 : vec3<f32>;
  var u_xlat_precise_vec4 : vec4<f32>;
  var u_xlat_precise_ivec4 : vec4<i32>;
  var u_xlat_precise_bvec4 : vec4<bool>;
  var u_xlat_precise_uvec4 : vec4<u32>;
  let x_48 : vec3<f32> = vs_INTERP9;
  let x_49 : vec3<f32> = vs_INTERP9;
  u_xlat0.x = dot(x_48, x_49);
  let x_55 : f32 = u_xlat0.x;
  u_xlat0.x = sqrt(x_55);
  let x_60 : f32 = u_xlat0.x;
  u_xlat0.x = (1.0f / x_60);
  let x_74 : f32 = vs_INTERP4.w;
  u_xlatb25.x = (0.0f < x_74);
  let x_87 : f32 = x_83.unity_WorldTransformParams.w;
  u_xlatb25.y = (x_87 >= 0.0f);
  let x_93 : bool = u_xlatb25.x;
  u_xlat25.x = select(-1.0f, 1.0f, x_93);
  let x_98 : bool = u_xlatb25.y;
  u_xlat25.y = select(-1.0f, 1.0f, x_98);
  let x_102 : f32 = u_xlat25.y;
  let x_104 : f32 = u_xlat25.x;
  u_xlat25.x = (x_102 * x_104);
  let x_108 : vec4<f32> = vs_INTERP4;
  let x_110 : vec3<f32> = vs_INTERP9;
  u_xlat1 = (vec3<f32>(x_108.y, x_108.z, x_108.x) * vec3<f32>(x_110.z, x_110.x, x_110.y));
  let x_113 : vec3<f32> = vs_INTERP9;
  let x_115 : vec4<f32> = vs_INTERP4;
  let x_118 : vec3<f32> = u_xlat1;
  u_xlat1 = ((vec3<f32>(x_113.y, x_113.z, x_113.x) * vec3<f32>(x_115.z, x_115.x, x_115.y)) + -(x_118));
  let x_121 : vec3<f32> = u_xlat25;
  let x_123 : vec3<f32> = u_xlat1;
  u_xlat25 = (vec3<f32>(x_121.x, x_121.x, x_121.x) * x_123);
  let x_125 : vec3<f32> = u_xlat0;
  let x_127 : vec3<f32> = vs_INTERP9;
  u_xlat1 = (vec3<f32>(x_125.x, x_125.x, x_125.x) * x_127);
  let x_131 : vec3<f32> = u_xlat0;
  let x_133 : vec4<f32> = vs_INTERP4;
  let x_135 : vec3<f32> = (vec3<f32>(x_131.x, x_131.x, x_131.x) * vec3<f32>(x_133.x, x_133.y, x_133.z));
  let x_136 : vec4<f32> = u_xlat2;
  u_xlat2 = vec4<f32>(x_135.x, x_135.y, x_135.z, x_136.w);
  let x_139 : vec3<f32> = u_xlat25;
  let x_140 : vec3<f32> = u_xlat0;
  let x_142 : vec3<f32> = (x_139 * vec3<f32>(x_140.x, x_140.x, x_140.x));
  let x_143 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_142.x, x_142.y, x_142.z, x_143.w);
  let x_152 : f32 = x_149.unity_OrthoParams.w;
  u_xlatb0 = (x_152 == 0.0f);
  let x_156 : vec3<f32> = vs_INTERP8;
  let x_161 : vec3<f32> = x_149.x_WorldSpaceCameraPos;
  let x_162 : vec3<f32> = (-(x_156) + x_161);
  let x_163 : vec4<f32> = u_xlat4;
  u_xlat4 = vec4<f32>(x_162.x, x_162.y, x_162.z, x_163.w);
  let x_166 : vec4<f32> = u_xlat4;
  let x_168 : vec4<f32> = u_xlat4;
  u_xlat76 = dot(vec3<f32>(x_166.x, x_166.y, x_166.z), vec3<f32>(x_168.x, x_168.y, x_168.z));
  let x_171 : f32 = u_xlat76;
  u_xlat76 = inverseSqrt(x_171);
  let x_173 : f32 = u_xlat76;
  let x_175 : vec4<f32> = u_xlat4;
  let x_177 : vec3<f32> = (vec3<f32>(x_173, x_173, x_173) * vec3<f32>(x_175.x, x_175.y, x_175.z));
  let x_178 : vec4<f32> = u_xlat4;
  u_xlat4 = vec4<f32>(x_177.x, x_177.y, x_177.z, x_178.w);
  let x_181 : bool = u_xlatb0;
  if (x_181) {
    let x_187 : f32 = u_xlat4.x;
    x_183 = x_187;
  } else {
    let x_192 : f32 = x_149.unity_MatrixV[0i].z;
    x_183 = x_192;
  }
  let x_193 : f32 = x_183;
  u_xlat5.x = x_193;
  let x_195 : bool = u_xlatb0;
  if (x_195) {
    let x_200 : f32 = u_xlat4.y;
    x_196 = x_200;
  } else {
    let x_204 : f32 = x_149.unity_MatrixV[1i].z;
    x_196 = x_204;
  }
  let x_205 : f32 = x_196;
  u_xlat5.y = x_205;
  let x_207 : bool = u_xlatb0;
  if (x_207) {
    let x_212 : f32 = u_xlat4.z;
    x_208 = x_212;
  } else {
    let x_216 : f32 = x_149.unity_MatrixV[2i].z;
    x_208 = x_216;
  }
  let x_217 : f32 = x_208;
  u_xlat5.z = x_217;
  let x_219 : vec3<f32> = u_xlat5;
  let x_223 : vec4<f32> = x_83.unity_WorldToObject[1i];
  let x_225 : vec3<f32> = (vec3<f32>(x_219.y, x_219.y, x_219.y) * vec3<f32>(x_223.x, x_223.y, x_223.z));
  let x_226 : vec4<f32> = u_xlat4;
  u_xlat4 = vec4<f32>(x_225.x, x_225.y, x_225.z, x_226.w);
  let x_229 : vec4<f32> = x_83.unity_WorldToObject[0i];
  let x_231 : vec3<f32> = u_xlat5;
  let x_234 : vec4<f32> = u_xlat4;
  let x_236 : vec3<f32> = ((vec3<f32>(x_229.x, x_229.y, x_229.z) * vec3<f32>(x_231.x, x_231.x, x_231.x)) + vec3<f32>(x_234.x, x_234.y, x_234.z));
  let x_237 : vec4<f32> = u_xlat4;
  u_xlat4 = vec4<f32>(x_236.x, x_236.y, x_236.z, x_237.w);
  let x_240 : vec4<f32> = x_83.unity_WorldToObject[2i];
  let x_242 : vec3<f32> = u_xlat5;
  let x_245 : vec4<f32> = u_xlat4;
  let x_247 : vec3<f32> = ((vec3<f32>(x_240.x, x_240.y, x_240.z) * vec3<f32>(x_242.z, x_242.z, x_242.z)) + vec3<f32>(x_245.x, x_245.y, x_245.z));
  let x_248 : vec4<f32> = u_xlat4;
  u_xlat4 = vec4<f32>(x_247.x, x_247.y, x_247.z, x_248.w);
  let x_250 : vec4<f32> = u_xlat4;
  let x_252 : vec4<f32> = u_xlat4;
  u_xlat0.x = dot(vec3<f32>(x_250.x, x_250.y, x_250.z), vec3<f32>(x_252.x, x_252.y, x_252.z));
  let x_257 : f32 = u_xlat0.x;
  u_xlat0.x = inverseSqrt(x_257);
  let x_260 : vec3<f32> = u_xlat0;
  let x_262 : vec4<f32> = u_xlat4;
  let x_264 : vec3<f32> = (vec3<f32>(x_260.x, x_260.x, x_260.x) * vec3<f32>(x_262.x, x_262.y, x_262.z));
  let x_265 : vec4<f32> = u_xlat4;
  u_xlat4 = vec4<f32>(x_264.x, x_264.y, x_264.z, x_265.w);
  let x_279 : vec4<f32> = vs_INTERP5;
  let x_282 : f32 = x_149.x_GlobalMipBias.x;
  let x_283 : vec4<f32> = textureSampleBias(Texture2D_B222E8F, samplerTexture2D_B222E8F, vec2<f32>(x_279.x, x_279.y), x_282);
  u_xlat6 = x_283;
  let x_285 : vec4<f32> = u_xlat6;
  let x_291 : vec4<f32> = x_289.Color_C30C7CA3;
  u_xlat7 = (vec3<f32>(x_285.x, x_285.y, x_285.z) * vec3<f32>(x_291.x, x_291.y, x_291.z));
  let x_300 : vec4<f32> = vs_INTERP5;
  let x_303 : f32 = x_149.x_GlobalMipBias.x;
  let x_304 : vec4<f32> = textureSampleBias(Texture2D_D9BFD5F1, samplerTexture2D_D9BFD5F1, vec2<f32>(x_300.x, x_300.y), x_303);
  u_xlat8 = vec4<f32>(x_304.w, x_304.x, x_304.y, x_304.z);
  let x_307 : vec4<f32> = u_xlat8;
  u_xlat9 = ((vec4<f32>(x_307.y, x_307.z, x_307.w, x_307.x) * vec4<f32>(2.0f, 2.0f, 2.0f, 2.0f)) + vec4<f32>(-1.0f, -1.0f, -1.0f, -1.0f));
  let x_314 : vec4<f32> = u_xlat9;
  let x_315 : vec4<f32> = u_xlat9;
  u_xlat0.x = dot(x_314, x_315);
  let x_319 : f32 = u_xlat0.x;
  u_xlat0.x = inverseSqrt(x_319);
  let x_323 : vec3<f32> = u_xlat0;
  let x_325 : vec4<f32> = u_xlat9;
  u_xlat33 = (vec3<f32>(x_323.x, x_323.x, x_323.x) * vec3<f32>(x_325.x, x_325.y, x_325.z));
  let x_330 : f32 = vs_INTERP6.y;
  u_xlat0.x = (x_330 * 200.0f);
  let x_335 : f32 = u_xlat0.x;
  u_xlat0.x = min(x_335, 1.0f);
  let x_338 : vec3<f32> = u_xlat0;
  let x_340 : vec4<f32> = u_xlat6;
  let x_342 : vec3<f32> = (vec3<f32>(x_338.x, x_338.x, x_338.x) * vec3<f32>(x_340.x, x_340.y, x_340.z));
  let x_343 : vec4<f32> = u_xlat6;
  u_xlat6 = vec4<f32>(x_342.x, x_342.y, x_342.z, x_343.w);
  let x_345 : vec4<f32> = u_xlat3;
  let x_347 : vec3<f32> = u_xlat33;
  let x_349 : vec3<f32> = (vec3<f32>(x_345.x, x_345.y, x_345.z) * vec3<f32>(x_347.y, x_347.y, x_347.y));
  let x_350 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_349.x, x_349.y, x_349.z, x_350.w);
  let x_352 : vec3<f32> = u_xlat33;
  let x_354 : vec4<f32> = u_xlat2;
  let x_357 : vec4<f32> = u_xlat3;
  let x_359 : vec3<f32> = ((vec3<f32>(x_352.x, x_352.x, x_352.x) * vec3<f32>(x_354.x, x_354.y, x_354.z)) + vec3<f32>(x_357.x, x_357.y, x_357.z));
  let x_360 : vec4<f32> = u_xlat2;
  u_xlat2 = vec4<f32>(x_359.x, x_359.y, x_359.z, x_360.w);
  let x_362 : vec3<f32> = u_xlat33;
  let x_364 : vec3<f32> = u_xlat1;
  let x_366 : vec4<f32> = u_xlat2;
  u_xlat1 = ((vec3<f32>(x_362.z, x_362.z, x_362.z) * x_364) + vec3<f32>(x_366.x, x_366.y, x_366.z));
  let x_369 : vec3<f32> = u_xlat1;
  let x_370 : vec3<f32> = u_xlat1;
  u_xlat0.x = dot(x_369, x_370);
  let x_374 : f32 = u_xlat0.x;
  u_xlat0.x = max(x_374, 1.17549435e-38f);
  let x_379 : f32 = u_xlat0.x;
  u_xlat0.x = inverseSqrt(x_379);
  let x_382 : vec3<f32> = u_xlat0;
  let x_384 : vec3<f32> = u_xlat1;
  u_xlat1 = (vec3<f32>(x_382.x, x_382.x, x_382.x) * x_384);
  let x_386 : vec3<f32> = vs_INTERP8;
  let x_396 : vec4<f32> = x_394.x_CascadeShadowSplitSpheres0;
  let x_399 : vec3<f32> = (x_386 + -(vec3<f32>(x_396.x, x_396.y, x_396.z)));
  let x_400 : vec4<f32> = u_xlat2;
  u_xlat2 = vec4<f32>(x_399.x, x_399.y, x_399.z, x_400.w);
  let x_402 : vec3<f32> = vs_INTERP8;
  let x_404 : vec4<f32> = x_394.x_CascadeShadowSplitSpheres1;
  let x_407 : vec3<f32> = (x_402 + -(vec3<f32>(x_404.x, x_404.y, x_404.z)));
  let x_408 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_407.x, x_407.y, x_407.z, x_408.w);
  let x_410 : vec3<f32> = vs_INTERP8;
  let x_412 : vec4<f32> = x_394.x_CascadeShadowSplitSpheres2;
  let x_415 : vec3<f32> = (x_410 + -(vec3<f32>(x_412.x, x_412.y, x_412.z)));
  let x_416 : vec4<f32> = u_xlat9;
  u_xlat9 = vec4<f32>(x_415.x, x_415.y, x_415.z, x_416.w);
  let x_419 : vec3<f32> = vs_INTERP8;
  let x_422 : vec4<f32> = x_394.x_CascadeShadowSplitSpheres3;
  let x_425 : vec3<f32> = (x_419 + -(vec3<f32>(x_422.x, x_422.y, x_422.z)));
  let x_426 : vec4<f32> = u_xlat10;
  u_xlat10 = vec4<f32>(x_425.x, x_425.y, x_425.z, x_426.w);
  let x_428 : vec4<f32> = u_xlat2;
  let x_430 : vec4<f32> = u_xlat2;
  u_xlat2.x = dot(vec3<f32>(x_428.x, x_428.y, x_428.z), vec3<f32>(x_430.x, x_430.y, x_430.z));
  let x_434 : vec4<f32> = u_xlat3;
  let x_436 : vec4<f32> = u_xlat3;
  u_xlat2.y = dot(vec3<f32>(x_434.x, x_434.y, x_434.z), vec3<f32>(x_436.x, x_436.y, x_436.z));
  let x_440 : vec4<f32> = u_xlat9;
  let x_442 : vec4<f32> = u_xlat9;
  u_xlat2.z = dot(vec3<f32>(x_440.x, x_440.y, x_440.z), vec3<f32>(x_442.x, x_442.y, x_442.z));
  let x_446 : vec4<f32> = u_xlat10;
  let x_448 : vec4<f32> = u_xlat10;
  u_xlat2.w = dot(vec3<f32>(x_446.x, x_446.y, x_446.z), vec3<f32>(x_448.x, x_448.y, x_448.z));
  let x_455 : vec4<f32> = u_xlat2;
  let x_457 : vec4<f32> = x_394.x_CascadeShadowSplitSphereRadii;
  u_xlatb2 = (x_455 < x_457);
  let x_460 : bool = u_xlatb2.x;
  u_xlat3.x = select(0.0f, 1.0f, x_460);
  let x_464 : bool = u_xlatb2.y;
  u_xlat3.y = select(0.0f, 1.0f, x_464);
  let x_468 : bool = u_xlatb2.z;
  u_xlat3.z = select(0.0f, 1.0f, x_468);
  let x_472 : bool = u_xlatb2.w;
  u_xlat3.w = select(0.0f, 1.0f, x_472);
  let x_476 : bool = u_xlatb2.x;
  u_xlat2.x = select(-0.0f, -1.0f, x_476);
  let x_481 : bool = u_xlatb2.y;
  u_xlat2.y = select(-0.0f, -1.0f, x_481);
  let x_485 : bool = u_xlatb2.z;
  u_xlat2.z = select(-0.0f, -1.0f, x_485);
  let x_488 : vec4<f32> = u_xlat2;
  let x_490 : vec4<f32> = u_xlat3;
  let x_492 : vec3<f32> = (vec3<f32>(x_488.x, x_488.y, x_488.z) + vec3<f32>(x_490.y, x_490.z, x_490.w));
  let x_493 : vec4<f32> = u_xlat2;
  u_xlat2 = vec4<f32>(x_492.x, x_492.y, x_492.z, x_493.w);
  let x_495 : vec4<f32> = u_xlat2;
  let x_498 : vec3<f32> = max(vec3<f32>(x_495.x, x_495.y, x_495.z), vec3<f32>(0.0f, 0.0f, 0.0f));
  let x_499 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_499.x, x_498.x, x_498.y, x_498.z);
  let x_501 : vec4<f32> = u_xlat3;
  u_xlat0.x = dot(x_501, vec4<f32>(4.0f, 3.0f, 2.0f, 1.0f));
  let x_508 : f32 = u_xlat0.x;
  u_xlat0.x = (-(x_508) + 4.0f);
  let x_515 : f32 = u_xlat0.x;
  u_xlatu0 = u32(x_515);
  let x_519 : u32 = u_xlatu0;
  u_xlati0 = (bitcast<i32>(x_519) << bitcast<u32>(2i));
  let x_522 : vec3<f32> = vs_INTERP8;
  let x_524 : i32 = u_xlati0;
  let x_527 : i32 = u_xlati0;
  let x_531 : vec4<f32> = x_394.x_MainLightWorldToShadow[((x_524 + 1i) / 4i)][((x_527 + 1i) % 4i)];
  let x_533 : vec3<f32> = (vec3<f32>(x_522.y, x_522.y, x_522.y) * vec3<f32>(x_531.x, x_531.y, x_531.z));
  let x_534 : vec4<f32> = u_xlat2;
  u_xlat2 = vec4<f32>(x_533.x, x_533.y, x_533.z, x_534.w);
  let x_536 : i32 = u_xlati0;
  let x_538 : i32 = u_xlati0;
  let x_541 : vec4<f32> = x_394.x_MainLightWorldToShadow[(x_536 / 4i)][(x_538 % 4i)];
  let x_543 : vec3<f32> = vs_INTERP8;
  let x_546 : vec4<f32> = u_xlat2;
  let x_548 : vec3<f32> = ((vec3<f32>(x_541.x, x_541.y, x_541.z) * vec3<f32>(x_543.x, x_543.x, x_543.x)) + vec3<f32>(x_546.x, x_546.y, x_546.z));
  let x_549 : vec4<f32> = u_xlat2;
  u_xlat2 = vec4<f32>(x_548.x, x_548.y, x_548.z, x_549.w);
  let x_551 : i32 = u_xlati0;
  let x_554 : i32 = u_xlati0;
  let x_558 : vec4<f32> = x_394.x_MainLightWorldToShadow[((x_551 + 2i) / 4i)][((x_554 + 2i) % 4i)];
  let x_560 : vec3<f32> = vs_INTERP8;
  let x_563 : vec4<f32> = u_xlat2;
  let x_565 : vec3<f32> = ((vec3<f32>(x_558.x, x_558.y, x_558.z) * vec3<f32>(x_560.z, x_560.z, x_560.z)) + vec3<f32>(x_563.x, x_563.y, x_563.z));
  let x_566 : vec4<f32> = u_xlat2;
  u_xlat2 = vec4<f32>(x_565.x, x_565.y, x_565.z, x_566.w);
  let x_568 : vec4<f32> = u_xlat2;
  let x_570 : i32 = u_xlati0;
  let x_573 : i32 = u_xlati0;
  let x_577 : vec4<f32> = x_394.x_MainLightWorldToShadow[((x_570 + 3i) / 4i)][((x_573 + 3i) % 4i)];
  let x_579 : vec3<f32> = (vec3<f32>(x_568.x, x_568.y, x_568.z) + vec3<f32>(x_577.x, x_577.y, x_577.z));
  let x_580 : vec4<f32> = u_xlat2;
  u_xlat2 = vec4<f32>(x_579.x, x_579.y, x_579.z, x_580.w);
  let x_583 : f32 = x_394.x_MainLightShadowParams.y;
  u_xlatb0 = (0.0f < x_583);
  let x_585 : bool = u_xlatb0;
  if (x_585) {
    let x_590 : f32 = x_394.x_MainLightShadowParams.y;
    u_xlatb76 = (x_590 == 1.0f);
    let x_592 : bool = u_xlatb76;
    if (x_592) {
      let x_595 : vec4<f32> = u_xlat2;
      let x_599 : vec4<f32> = x_394.x_MainLightShadowOffset0;
      u_xlat3 = (vec4<f32>(x_595.x, x_595.y, x_595.x, x_595.y) + x_599);
      let x_603 : vec4<f32> = u_xlat3;
      let x_604 : vec2<f32> = vec2<f32>(x_603.x, x_603.y);
      let x_606 : f32 = u_xlat2.z;
      txVec0 = vec3<f32>(x_604.x, x_604.y, x_606);
      let x_618 : vec3<f32> = txVec0;
      let x_620 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_LinearClampCompare, x_618.xy, x_618.z);
      u_xlat9.x = x_620;
      let x_623 : vec4<f32> = u_xlat3;
      let x_624 : vec2<f32> = vec2<f32>(x_623.z, x_623.w);
      let x_626 : f32 = u_xlat2.z;
      txVec1 = vec3<f32>(x_624.x, x_624.y, x_626);
      let x_633 : vec3<f32> = txVec1;
      let x_635 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_LinearClampCompare, x_633.xy, x_633.z);
      u_xlat9.y = x_635;
      let x_637 : vec4<f32> = u_xlat2;
      let x_640 : vec4<f32> = x_394.x_MainLightShadowOffset1;
      u_xlat3 = (vec4<f32>(x_637.x, x_637.y, x_637.x, x_637.y) + x_640);
      let x_643 : vec4<f32> = u_xlat3;
      let x_644 : vec2<f32> = vec2<f32>(x_643.x, x_643.y);
      let x_646 : f32 = u_xlat2.z;
      txVec2 = vec3<f32>(x_644.x, x_644.y, x_646);
      let x_653 : vec3<f32> = txVec2;
      let x_655 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_LinearClampCompare, x_653.xy, x_653.z);
      u_xlat9.z = x_655;
      let x_658 : vec4<f32> = u_xlat3;
      let x_659 : vec2<f32> = vec2<f32>(x_658.z, x_658.w);
      let x_661 : f32 = u_xlat2.z;
      txVec3 = vec3<f32>(x_659.x, x_659.y, x_661);
      let x_668 : vec3<f32> = txVec3;
      let x_670 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_LinearClampCompare, x_668.xy, x_668.z);
      u_xlat9.w = x_670;
      let x_672 : vec4<f32> = u_xlat9;
      u_xlat76 = dot(x_672, vec4<f32>(0.25f, 0.25f, 0.25f, 0.25f));
    } else {
      let x_679 : f32 = x_394.x_MainLightShadowParams.y;
      u_xlatb77 = (x_679 == 2.0f);
      let x_681 : bool = u_xlatb77;
      if (x_681) {
        let x_684 : vec4<f32> = u_xlat2;
        let x_688 : vec4<f32> = x_394.x_MainLightShadowmapSize;
        let x_693 : vec2<f32> = ((vec2<f32>(x_684.x, x_684.y) * vec2<f32>(x_688.z, x_688.w)) + vec2<f32>(0.5f, 0.5f));
        let x_694 : vec4<f32> = u_xlat3;
        u_xlat3 = vec4<f32>(x_693.x, x_693.y, x_694.z, x_694.w);
        let x_696 : vec4<f32> = u_xlat3;
        let x_698 : vec2<f32> = floor(vec2<f32>(x_696.x, x_696.y));
        let x_699 : vec4<f32> = u_xlat3;
        u_xlat3 = vec4<f32>(x_698.x, x_698.y, x_699.z, x_699.w);
        let x_703 : vec4<f32> = u_xlat2;
        let x_706 : vec4<f32> = x_394.x_MainLightShadowmapSize;
        let x_709 : vec4<f32> = u_xlat3;
        u_xlat53 = ((vec2<f32>(x_703.x, x_703.y) * vec2<f32>(x_706.z, x_706.w)) + -(vec2<f32>(x_709.x, x_709.y)));
        let x_713 : vec2<f32> = u_xlat53;
        u_xlat9 = (vec4<f32>(x_713.x, x_713.x, x_713.y, x_713.y) + vec4<f32>(0.5f, 1.0f, 0.5f, 1.0f));
        let x_717 : vec4<f32> = u_xlat9;
        let x_719 : vec4<f32> = u_xlat9;
        u_xlat10 = (vec4<f32>(x_717.x, x_717.x, x_717.z, x_717.z) * vec4<f32>(x_719.x, x_719.x, x_719.z, x_719.z));
        let x_722 : vec4<f32> = u_xlat10;
        let x_726 : vec2<f32> = (vec2<f32>(x_722.y, x_722.w) * vec2<f32>(0.07999999821186065674f, 0.07999999821186065674f));
        let x_727 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_726.x, x_727.y, x_726.y, x_727.w);
        let x_729 : vec4<f32> = u_xlat10;
        let x_732 : vec2<f32> = u_xlat53;
        let x_734 : vec2<f32> = ((vec2<f32>(x_729.x, x_729.z) * vec2<f32>(0.5f, 0.5f)) + -(x_732));
        let x_735 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_734.x, x_734.y, x_735.z, x_735.w);
        let x_738 : vec2<f32> = u_xlat53;
        u_xlat60 = (-(x_738) + vec2<f32>(1.0f, 1.0f));
        let x_743 : vec2<f32> = u_xlat53;
        let x_745 : vec2<f32> = min(x_743, vec2<f32>(0.0f, 0.0f));
        let x_746 : vec4<f32> = u_xlat11;
        u_xlat11 = vec4<f32>(x_745.x, x_745.y, x_746.z, x_746.w);
        let x_748 : vec4<f32> = u_xlat11;
        let x_751 : vec4<f32> = u_xlat11;
        let x_754 : vec2<f32> = u_xlat60;
        let x_755 : vec2<f32> = ((-(vec2<f32>(x_748.x, x_748.y)) * vec2<f32>(x_751.x, x_751.y)) + x_754);
        let x_756 : vec4<f32> = u_xlat11;
        u_xlat11 = vec4<f32>(x_755.x, x_755.y, x_756.z, x_756.w);
        let x_758 : vec2<f32> = u_xlat53;
        u_xlat53 = max(x_758, vec2<f32>(0.0f, 0.0f));
        let x_760 : vec2<f32> = u_xlat53;
        let x_762 : vec2<f32> = u_xlat53;
        let x_764 : vec4<f32> = u_xlat9;
        u_xlat53 = ((-(x_760) * x_762) + vec2<f32>(x_764.y, x_764.w));
        let x_767 : vec4<f32> = u_xlat11;
        let x_769 : vec2<f32> = (vec2<f32>(x_767.x, x_767.y) + vec2<f32>(1.0f, 1.0f));
        let x_770 : vec4<f32> = u_xlat11;
        u_xlat11 = vec4<f32>(x_769.x, x_769.y, x_770.z, x_770.w);
        let x_772 : vec2<f32> = u_xlat53;
        u_xlat53 = (x_772 + vec2<f32>(1.0f, 1.0f));
        let x_775 : vec4<f32> = u_xlat10;
        let x_779 : vec2<f32> = (vec2<f32>(x_775.x, x_775.y) * vec2<f32>(0.15999999642372131348f, 0.15999999642372131348f));
        let x_780 : vec4<f32> = u_xlat12;
        u_xlat12 = vec4<f32>(x_779.x, x_779.y, x_780.z, x_780.w);
        let x_782 : vec2<f32> = u_xlat60;
        let x_783 : vec2<f32> = (x_782 * vec2<f32>(0.15999999642372131348f, 0.15999999642372131348f));
        let x_784 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_783.x, x_783.y, x_784.z, x_784.w);
        let x_786 : vec4<f32> = u_xlat11;
        let x_788 : vec2<f32> = (vec2<f32>(x_786.x, x_786.y) * vec2<f32>(0.15999999642372131348f, 0.15999999642372131348f));
        let x_789 : vec4<f32> = u_xlat11;
        u_xlat11 = vec4<f32>(x_788.x, x_788.y, x_789.z, x_789.w);
        let x_792 : vec2<f32> = u_xlat53;
        let x_793 : vec2<f32> = (x_792 * vec2<f32>(0.15999999642372131348f, 0.15999999642372131348f));
        let x_794 : vec4<f32> = u_xlat13;
        u_xlat13 = vec4<f32>(x_793.x, x_793.y, x_794.z, x_794.w);
        let x_796 : vec4<f32> = u_xlat9;
        u_xlat53 = (vec2<f32>(x_796.y, x_796.w) * vec2<f32>(0.15999999642372131348f, 0.15999999642372131348f));
        let x_800 : f32 = u_xlat11.x;
        u_xlat12.z = x_800;
        let x_803 : f32 = u_xlat53.x;
        u_xlat12.w = x_803;
        let x_806 : f32 = u_xlat13.x;
        u_xlat10.z = x_806;
        let x_809 : f32 = u_xlat9.x;
        u_xlat10.w = x_809;
        let x_812 : vec4<f32> = u_xlat10;
        let x_814 : vec4<f32> = u_xlat12;
        u_xlat14 = (vec4<f32>(x_812.z, x_812.w, x_812.x, x_812.z) + vec4<f32>(x_814.z, x_814.w, x_814.x, x_814.z));
        let x_818 : f32 = u_xlat12.y;
        u_xlat11.z = x_818;
        let x_821 : f32 = u_xlat53.y;
        u_xlat11.w = x_821;
        let x_824 : f32 = u_xlat10.y;
        u_xlat13.z = x_824;
        let x_827 : f32 = u_xlat9.z;
        u_xlat13.w = x_827;
        let x_829 : vec4<f32> = u_xlat11;
        let x_831 : vec4<f32> = u_xlat13;
        let x_833 : vec3<f32> = (vec3<f32>(x_829.z, x_829.y, x_829.w) + vec3<f32>(x_831.z, x_831.y, x_831.w));
        let x_834 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_833.x, x_833.y, x_833.z, x_834.w);
        let x_836 : vec4<f32> = u_xlat10;
        let x_838 : vec4<f32> = u_xlat14;
        let x_840 : vec3<f32> = (vec3<f32>(x_836.x, x_836.z, x_836.w) / vec3<f32>(x_838.z, x_838.w, x_838.y));
        let x_841 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_840.x, x_840.y, x_840.z, x_841.w);
        let x_843 : vec4<f32> = u_xlat10;
        let x_849 : vec3<f32> = (vec3<f32>(x_843.x, x_843.y, x_843.z) + vec3<f32>(-2.5f, -0.5f, 1.5f));
        let x_850 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_849.x, x_849.y, x_849.z, x_850.w);
        let x_852 : vec4<f32> = u_xlat13;
        let x_854 : vec4<f32> = u_xlat9;
        let x_856 : vec3<f32> = (vec3<f32>(x_852.z, x_852.y, x_852.w) / vec3<f32>(x_854.x, x_854.y, x_854.z));
        let x_857 : vec4<f32> = u_xlat11;
        u_xlat11 = vec4<f32>(x_856.x, x_856.y, x_856.z, x_857.w);
        let x_859 : vec4<f32> = u_xlat11;
        let x_861 : vec3<f32> = (vec3<f32>(x_859.x, x_859.y, x_859.z) + vec3<f32>(-2.5f, -0.5f, 1.5f));
        let x_862 : vec4<f32> = u_xlat11;
        u_xlat11 = vec4<f32>(x_861.x, x_861.y, x_861.z, x_862.w);
        let x_864 : vec4<f32> = u_xlat10;
        let x_867 : vec4<f32> = x_394.x_MainLightShadowmapSize;
        let x_869 : vec3<f32> = (vec3<f32>(x_864.y, x_864.x, x_864.z) * vec3<f32>(x_867.x, x_867.x, x_867.x));
        let x_870 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_869.x, x_869.y, x_869.z, x_870.w);
        let x_872 : vec4<f32> = u_xlat11;
        let x_875 : vec4<f32> = x_394.x_MainLightShadowmapSize;
        let x_877 : vec3<f32> = (vec3<f32>(x_872.x, x_872.y, x_872.z) * vec3<f32>(x_875.y, x_875.y, x_875.y));
        let x_878 : vec4<f32> = u_xlat11;
        u_xlat11 = vec4<f32>(x_877.x, x_877.y, x_877.z, x_878.w);
        let x_881 : f32 = u_xlat11.x;
        u_xlat10.w = x_881;
        let x_883 : vec4<f32> = u_xlat3;
        let x_886 : vec4<f32> = x_394.x_MainLightShadowmapSize;
        let x_889 : vec4<f32> = u_xlat10;
        u_xlat12 = ((vec4<f32>(x_883.x, x_883.y, x_883.x, x_883.y) * vec4<f32>(x_886.x, x_886.y, x_886.x, x_886.y)) + vec4<f32>(x_889.y, x_889.w, x_889.x, x_889.w));
        let x_892 : vec4<f32> = u_xlat3;
        let x_895 : vec4<f32> = x_394.x_MainLightShadowmapSize;
        let x_898 : vec4<f32> = u_xlat10;
        u_xlat53 = ((vec2<f32>(x_892.x, x_892.y) * vec2<f32>(x_895.x, x_895.y)) + vec2<f32>(x_898.z, x_898.w));
        let x_902 : f32 = u_xlat10.y;
        u_xlat11.w = x_902;
        let x_904 : vec4<f32> = u_xlat11;
        let x_905 : vec2<f32> = vec2<f32>(x_904.y, x_904.z);
        let x_906 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_906.x, x_905.x, x_906.z, x_905.y);
        let x_908 : vec4<f32> = u_xlat3;
        let x_911 : vec4<f32> = x_394.x_MainLightShadowmapSize;
        let x_914 : vec4<f32> = u_xlat10;
        u_xlat13 = ((vec4<f32>(x_908.x, x_908.y, x_908.x, x_908.y) * vec4<f32>(x_911.x, x_911.y, x_911.x, x_911.y)) + vec4<f32>(x_914.x, x_914.y, x_914.z, x_914.y));
        let x_917 : vec4<f32> = u_xlat3;
        let x_920 : vec4<f32> = x_394.x_MainLightShadowmapSize;
        let x_923 : vec4<f32> = u_xlat11;
        u_xlat11 = ((vec4<f32>(x_917.x, x_917.y, x_917.x, x_917.y) * vec4<f32>(x_920.x, x_920.y, x_920.x, x_920.y)) + vec4<f32>(x_923.w, x_923.y, x_923.w, x_923.z));
        let x_926 : vec4<f32> = u_xlat3;
        let x_929 : vec4<f32> = x_394.x_MainLightShadowmapSize;
        let x_932 : vec4<f32> = u_xlat10;
        u_xlat10 = ((vec4<f32>(x_926.x, x_926.y, x_926.x, x_926.y) * vec4<f32>(x_929.x, x_929.y, x_929.x, x_929.y)) + vec4<f32>(x_932.x, x_932.w, x_932.z, x_932.w));
        let x_936 : vec4<f32> = u_xlat9;
        let x_938 : vec4<f32> = u_xlat14;
        u_xlat15 = (vec4<f32>(x_936.x, x_936.x, x_936.x, x_936.y) * vec4<f32>(x_938.z, x_938.w, x_938.y, x_938.z));
        let x_942 : vec4<f32> = u_xlat9;
        let x_944 : vec4<f32> = u_xlat14;
        u_xlat16 = (vec4<f32>(x_942.y, x_942.y, x_942.z, x_942.z) * x_944);
        let x_948 : f32 = u_xlat9.z;
        let x_950 : f32 = u_xlat14.y;
        u_xlat77 = (x_948 * x_950);
        let x_953 : vec4<f32> = u_xlat12;
        let x_954 : vec2<f32> = vec2<f32>(x_953.x, x_953.y);
        let x_956 : f32 = u_xlat2.z;
        txVec4 = vec3<f32>(x_954.x, x_954.y, x_956);
        let x_963 : vec3<f32> = txVec4;
        let x_965 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_LinearClampCompare, x_963.xy, x_963.z);
        u_xlat3.x = x_965;
        let x_968 : vec4<f32> = u_xlat12;
        let x_969 : vec2<f32> = vec2<f32>(x_968.z, x_968.w);
        let x_971 : f32 = u_xlat2.z;
        txVec5 = vec3<f32>(x_969.x, x_969.y, x_971);
        let x_979 : vec3<f32> = txVec5;
        let x_981 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_LinearClampCompare, x_979.xy, x_979.z);
        u_xlat28 = x_981;
        let x_982 : f32 = u_xlat28;
        let x_984 : f32 = u_xlat15.y;
        u_xlat28 = (x_982 * x_984);
        let x_987 : f32 = u_xlat15.x;
        let x_989 : f32 = u_xlat3.x;
        let x_991 : f32 = u_xlat28;
        u_xlat3.x = ((x_987 * x_989) + x_991);
        let x_995 : vec2<f32> = u_xlat53;
        let x_997 : f32 = u_xlat2.z;
        txVec6 = vec3<f32>(x_995.x, x_995.y, x_997);
        let x_1004 : vec3<f32> = txVec6;
        let x_1006 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_LinearClampCompare, x_1004.xy, x_1004.z);
        u_xlat28 = x_1006;
        let x_1008 : f32 = u_xlat15.z;
        let x_1009 : f32 = u_xlat28;
        let x_1012 : f32 = u_xlat3.x;
        u_xlat3.x = ((x_1008 * x_1009) + x_1012);
        let x_1016 : vec4<f32> = u_xlat11;
        let x_1017 : vec2<f32> = vec2<f32>(x_1016.x, x_1016.y);
        let x_1019 : f32 = u_xlat2.z;
        txVec7 = vec3<f32>(x_1017.x, x_1017.y, x_1019);
        let x_1026 : vec3<f32> = txVec7;
        let x_1028 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_LinearClampCompare, x_1026.xy, x_1026.z);
        u_xlat28 = x_1028;
        let x_1030 : f32 = u_xlat15.w;
        let x_1031 : f32 = u_xlat28;
        let x_1034 : f32 = u_xlat3.x;
        u_xlat3.x = ((x_1030 * x_1031) + x_1034);
        let x_1038 : vec4<f32> = u_xlat13;
        let x_1039 : vec2<f32> = vec2<f32>(x_1038.x, x_1038.y);
        let x_1041 : f32 = u_xlat2.z;
        txVec8 = vec3<f32>(x_1039.x, x_1039.y, x_1041);
        let x_1048 : vec3<f32> = txVec8;
        let x_1050 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_LinearClampCompare, x_1048.xy, x_1048.z);
        u_xlat28 = x_1050;
        let x_1052 : f32 = u_xlat16.x;
        let x_1053 : f32 = u_xlat28;
        let x_1056 : f32 = u_xlat3.x;
        u_xlat3.x = ((x_1052 * x_1053) + x_1056);
        let x_1060 : vec4<f32> = u_xlat13;
        let x_1061 : vec2<f32> = vec2<f32>(x_1060.z, x_1060.w);
        let x_1063 : f32 = u_xlat2.z;
        txVec9 = vec3<f32>(x_1061.x, x_1061.y, x_1063);
        let x_1070 : vec3<f32> = txVec9;
        let x_1072 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_LinearClampCompare, x_1070.xy, x_1070.z);
        u_xlat28 = x_1072;
        let x_1074 : f32 = u_xlat16.y;
        let x_1075 : f32 = u_xlat28;
        let x_1078 : f32 = u_xlat3.x;
        u_xlat3.x = ((x_1074 * x_1075) + x_1078);
        let x_1082 : vec4<f32> = u_xlat11;
        let x_1083 : vec2<f32> = vec2<f32>(x_1082.z, x_1082.w);
        let x_1085 : f32 = u_xlat2.z;
        txVec10 = vec3<f32>(x_1083.x, x_1083.y, x_1085);
        let x_1092 : vec3<f32> = txVec10;
        let x_1094 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_LinearClampCompare, x_1092.xy, x_1092.z);
        u_xlat28 = x_1094;
        let x_1096 : f32 = u_xlat16.z;
        let x_1097 : f32 = u_xlat28;
        let x_1100 : f32 = u_xlat3.x;
        u_xlat3.x = ((x_1096 * x_1097) + x_1100);
        let x_1104 : vec4<f32> = u_xlat10;
        let x_1105 : vec2<f32> = vec2<f32>(x_1104.x, x_1104.y);
        let x_1107 : f32 = u_xlat2.z;
        txVec11 = vec3<f32>(x_1105.x, x_1105.y, x_1107);
        let x_1114 : vec3<f32> = txVec11;
        let x_1116 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_LinearClampCompare, x_1114.xy, x_1114.z);
        u_xlat28 = x_1116;
        let x_1118 : f32 = u_xlat16.w;
        let x_1119 : f32 = u_xlat28;
        let x_1122 : f32 = u_xlat3.x;
        u_xlat3.x = ((x_1118 * x_1119) + x_1122);
        let x_1126 : vec4<f32> = u_xlat10;
        let x_1127 : vec2<f32> = vec2<f32>(x_1126.z, x_1126.w);
        let x_1129 : f32 = u_xlat2.z;
        txVec12 = vec3<f32>(x_1127.x, x_1127.y, x_1129);
        let x_1136 : vec3<f32> = txVec12;
        let x_1138 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_LinearClampCompare, x_1136.xy, x_1136.z);
        u_xlat28 = x_1138;
        let x_1139 : f32 = u_xlat77;
        let x_1140 : f32 = u_xlat28;
        let x_1143 : f32 = u_xlat3.x;
        u_xlat76 = ((x_1139 * x_1140) + x_1143);
      } else {
        let x_1146 : vec4<f32> = u_xlat2;
        let x_1149 : vec4<f32> = x_394.x_MainLightShadowmapSize;
        let x_1152 : vec2<f32> = ((vec2<f32>(x_1146.x, x_1146.y) * vec2<f32>(x_1149.z, x_1149.w)) + vec2<f32>(0.5f, 0.5f));
        let x_1153 : vec4<f32> = u_xlat3;
        u_xlat3 = vec4<f32>(x_1152.x, x_1152.y, x_1153.z, x_1153.w);
        let x_1155 : vec4<f32> = u_xlat3;
        let x_1157 : vec2<f32> = floor(vec2<f32>(x_1155.x, x_1155.y));
        let x_1158 : vec4<f32> = u_xlat3;
        u_xlat3 = vec4<f32>(x_1157.x, x_1157.y, x_1158.z, x_1158.w);
        let x_1160 : vec4<f32> = u_xlat2;
        let x_1163 : vec4<f32> = x_394.x_MainLightShadowmapSize;
        let x_1166 : vec4<f32> = u_xlat3;
        u_xlat53 = ((vec2<f32>(x_1160.x, x_1160.y) * vec2<f32>(x_1163.z, x_1163.w)) + -(vec2<f32>(x_1166.x, x_1166.y)));
        let x_1170 : vec2<f32> = u_xlat53;
        u_xlat9 = (vec4<f32>(x_1170.x, x_1170.x, x_1170.y, x_1170.y) + vec4<f32>(0.5f, 1.0f, 0.5f, 1.0f));
        let x_1173 : vec4<f32> = u_xlat9;
        let x_1175 : vec4<f32> = u_xlat9;
        u_xlat10 = (vec4<f32>(x_1173.x, x_1173.x, x_1173.z, x_1173.z) * vec4<f32>(x_1175.x, x_1175.x, x_1175.z, x_1175.z));
        let x_1178 : vec4<f32> = u_xlat10;
        let x_1182 : vec2<f32> = (vec2<f32>(x_1178.y, x_1178.w) * vec2<f32>(0.04081600159406661987f, 0.04081600159406661987f));
        let x_1183 : vec4<f32> = u_xlat11;
        u_xlat11 = vec4<f32>(x_1183.x, x_1182.x, x_1183.z, x_1182.y);
        let x_1185 : vec4<f32> = u_xlat10;
        let x_1188 : vec2<f32> = u_xlat53;
        let x_1190 : vec2<f32> = ((vec2<f32>(x_1185.x, x_1185.z) * vec2<f32>(0.5f, 0.5f)) + -(x_1188));
        let x_1191 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_1190.x, x_1191.y, x_1190.y, x_1191.w);
        let x_1193 : vec2<f32> = u_xlat53;
        let x_1195 : vec2<f32> = (-(x_1193) + vec2<f32>(1.0f, 1.0f));
        let x_1196 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_1195.x, x_1195.y, x_1196.z, x_1196.w);
        let x_1198 : vec2<f32> = u_xlat53;
        u_xlat60 = min(x_1198, vec2<f32>(0.0f, 0.0f));
        let x_1200 : vec2<f32> = u_xlat60;
        let x_1202 : vec2<f32> = u_xlat60;
        let x_1204 : vec4<f32> = u_xlat10;
        let x_1206 : vec2<f32> = ((-(x_1200) * x_1202) + vec2<f32>(x_1204.x, x_1204.y));
        let x_1207 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_1206.x, x_1206.y, x_1207.z, x_1207.w);
        let x_1209 : vec2<f32> = u_xlat53;
        u_xlat60 = max(x_1209, vec2<f32>(0.0f, 0.0f));
        let x_1212 : vec2<f32> = u_xlat60;
        let x_1214 : vec2<f32> = u_xlat60;
        let x_1216 : vec4<f32> = u_xlat9;
        let x_1218 : vec2<f32> = ((-(x_1212) * x_1214) + vec2<f32>(x_1216.y, x_1216.w));
        let x_1219 : vec3<f32> = u_xlat34;
        u_xlat34 = vec3<f32>(x_1218.x, x_1219.y, x_1218.y);
        let x_1221 : vec4<f32> = u_xlat10;
        let x_1224 : vec2<f32> = (vec2<f32>(x_1221.x, x_1221.y) + vec2<f32>(2.0f, 2.0f));
        let x_1225 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_1224.x, x_1224.y, x_1225.z, x_1225.w);
        let x_1227 : vec3<f32> = u_xlat34;
        let x_1229 : vec2<f32> = (vec2<f32>(x_1227.x, x_1227.z) + vec2<f32>(2.0f, 2.0f));
        let x_1230 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_1230.x, x_1229.x, x_1230.z, x_1229.y);
        let x_1233 : f32 = u_xlat9.y;
        u_xlat12.z = (x_1233 * 0.08163200318813323975f);
        let x_1237 : vec4<f32> = u_xlat9;
        let x_1240 : vec3<f32> = (vec3<f32>(x_1237.z, x_1237.x, x_1237.w) * vec3<f32>(0.08163200318813323975f, 0.08163200318813323975f, 0.08163200318813323975f));
        let x_1241 : vec4<f32> = u_xlat13;
        u_xlat13 = vec4<f32>(x_1240.x, x_1240.y, x_1240.z, x_1241.w);
        let x_1243 : vec4<f32> = u_xlat10;
        let x_1246 : vec2<f32> = (vec2<f32>(x_1243.x, x_1243.y) * vec2<f32>(0.08163200318813323975f, 0.08163200318813323975f));
        let x_1247 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_1246.x, x_1246.y, x_1247.z, x_1247.w);
        let x_1250 : f32 = u_xlat13.y;
        u_xlat12.x = x_1250;
        let x_1252 : vec2<f32> = u_xlat53;
        let x_1259 : vec2<f32> = ((vec2<f32>(x_1252.x, x_1252.x) * vec2<f32>(-0.08163200318813323975f, 0.08163200318813323975f)) + vec2<f32>(0.16326400637626647949f, 0.08163200318813323975f));
        let x_1260 : vec4<f32> = u_xlat12;
        u_xlat12 = vec4<f32>(x_1260.x, x_1259.x, x_1260.z, x_1259.y);
        let x_1262 : vec2<f32> = u_xlat53;
        let x_1266 : vec2<f32> = ((vec2<f32>(x_1262.x, x_1262.x) * vec2<f32>(-0.08163200318813323975f, 0.08163200318813323975f)) + vec2<f32>(0.08163200318813323975f, 0.16326400637626647949f));
        let x_1267 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_1266.x, x_1267.y, x_1266.y, x_1267.w);
        let x_1270 : f32 = u_xlat9.x;
        u_xlat10.y = x_1270;
        let x_1273 : f32 = u_xlat11.y;
        u_xlat10.w = x_1273;
        let x_1275 : vec4<f32> = u_xlat10;
        let x_1276 : vec4<f32> = u_xlat12;
        u_xlat12 = (x_1275 + x_1276);
        let x_1278 : vec2<f32> = u_xlat53;
        let x_1281 : vec2<f32> = ((vec2<f32>(x_1278.y, x_1278.y) * vec2<f32>(-0.08163200318813323975f, 0.08163200318813323975f)) + vec2<f32>(0.16326400637626647949f, 0.08163200318813323975f));
        let x_1282 : vec4<f32> = u_xlat13;
        u_xlat13 = vec4<f32>(x_1282.x, x_1281.x, x_1282.z, x_1281.y);
        let x_1284 : vec2<f32> = u_xlat53;
        let x_1287 : vec2<f32> = ((vec2<f32>(x_1284.y, x_1284.y) * vec2<f32>(-0.08163200318813323975f, 0.08163200318813323975f)) + vec2<f32>(0.08163200318813323975f, 0.16326400637626647949f));
        let x_1288 : vec4<f32> = u_xlat11;
        u_xlat11 = vec4<f32>(x_1287.x, x_1288.y, x_1287.y, x_1288.w);
        let x_1291 : f32 = u_xlat9.y;
        u_xlat11.y = x_1291;
        let x_1293 : vec4<f32> = u_xlat11;
        let x_1294 : vec4<f32> = u_xlat13;
        u_xlat9 = (x_1293 + x_1294);
        let x_1296 : vec4<f32> = u_xlat10;
        let x_1297 : vec4<f32> = u_xlat12;
        u_xlat10 = (x_1296 / x_1297);
        let x_1299 : vec4<f32> = u_xlat10;
        u_xlat10 = (x_1299 + vec4<f32>(-3.5f, -1.5f, 0.5f, 2.5f));
        let x_1305 : vec4<f32> = u_xlat11;
        let x_1306 : vec4<f32> = u_xlat9;
        u_xlat11 = (x_1305 / x_1306);
        let x_1308 : vec4<f32> = u_xlat11;
        u_xlat11 = (x_1308 + vec4<f32>(-3.5f, -1.5f, 0.5f, 2.5f));
        let x_1310 : vec4<f32> = u_xlat10;
        let x_1313 : vec4<f32> = x_394.x_MainLightShadowmapSize;
        u_xlat10 = (vec4<f32>(x_1310.w, x_1310.x, x_1310.y, x_1310.z) * vec4<f32>(x_1313.x, x_1313.x, x_1313.x, x_1313.x));
        let x_1316 : vec4<f32> = u_xlat11;
        let x_1319 : vec4<f32> = x_394.x_MainLightShadowmapSize;
        u_xlat11 = (vec4<f32>(x_1316.x, x_1316.w, x_1316.y, x_1316.z) * vec4<f32>(x_1319.y, x_1319.y, x_1319.y, x_1319.y));
        let x_1322 : vec4<f32> = u_xlat10;
        let x_1323 : vec3<f32> = vec3<f32>(x_1322.y, x_1322.z, x_1322.w);
        let x_1324 : vec4<f32> = u_xlat13;
        u_xlat13 = vec4<f32>(x_1323.x, x_1324.y, x_1323.y, x_1323.z);
        let x_1327 : f32 = u_xlat11.x;
        u_xlat13.y = x_1327;
        let x_1329 : vec4<f32> = u_xlat3;
        let x_1332 : vec4<f32> = x_394.x_MainLightShadowmapSize;
        let x_1335 : vec4<f32> = u_xlat13;
        u_xlat14 = ((vec4<f32>(x_1329.x, x_1329.y, x_1329.x, x_1329.y) * vec4<f32>(x_1332.x, x_1332.y, x_1332.x, x_1332.y)) + vec4<f32>(x_1335.x, x_1335.y, x_1335.z, x_1335.y));
        let x_1338 : vec4<f32> = u_xlat3;
        let x_1341 : vec4<f32> = x_394.x_MainLightShadowmapSize;
        let x_1344 : vec4<f32> = u_xlat13;
        u_xlat53 = ((vec2<f32>(x_1338.x, x_1338.y) * vec2<f32>(x_1341.x, x_1341.y)) + vec2<f32>(x_1344.w, x_1344.y));
        let x_1348 : f32 = u_xlat13.y;
        u_xlat10.y = x_1348;
        let x_1351 : f32 = u_xlat11.z;
        u_xlat13.y = x_1351;
        let x_1353 : vec4<f32> = u_xlat3;
        let x_1356 : vec4<f32> = x_394.x_MainLightShadowmapSize;
        let x_1359 : vec4<f32> = u_xlat13;
        u_xlat15 = ((vec4<f32>(x_1353.x, x_1353.y, x_1353.x, x_1353.y) * vec4<f32>(x_1356.x, x_1356.y, x_1356.x, x_1356.y)) + vec4<f32>(x_1359.x, x_1359.y, x_1359.z, x_1359.y));
        let x_1362 : vec4<f32> = u_xlat3;
        let x_1365 : vec4<f32> = x_394.x_MainLightShadowmapSize;
        let x_1368 : vec4<f32> = u_xlat13;
        let x_1370 : vec2<f32> = ((vec2<f32>(x_1362.x, x_1362.y) * vec2<f32>(x_1365.x, x_1365.y)) + vec2<f32>(x_1368.w, x_1368.y));
        let x_1371 : vec4<f32> = u_xlat16;
        u_xlat16 = vec4<f32>(x_1370.x, x_1370.y, x_1371.z, x_1371.w);
        let x_1374 : f32 = u_xlat13.y;
        u_xlat10.z = x_1374;
        let x_1377 : vec4<f32> = u_xlat3;
        let x_1380 : vec4<f32> = x_394.x_MainLightShadowmapSize;
        let x_1383 : vec4<f32> = u_xlat10;
        u_xlat17 = ((vec4<f32>(x_1377.x, x_1377.y, x_1377.x, x_1377.y) * vec4<f32>(x_1380.x, x_1380.y, x_1380.x, x_1380.y)) + vec4<f32>(x_1383.x, x_1383.y, x_1383.x, x_1383.z));
        let x_1387 : f32 = u_xlat11.w;
        u_xlat13.y = x_1387;
        let x_1390 : vec4<f32> = u_xlat3;
        let x_1393 : vec4<f32> = x_394.x_MainLightShadowmapSize;
        let x_1396 : vec4<f32> = u_xlat13;
        u_xlat18 = ((vec4<f32>(x_1390.x, x_1390.y, x_1390.x, x_1390.y) * vec4<f32>(x_1393.x, x_1393.y, x_1393.x, x_1393.y)) + vec4<f32>(x_1396.x, x_1396.y, x_1396.z, x_1396.y));
        let x_1400 : vec4<f32> = u_xlat3;
        let x_1403 : vec4<f32> = x_394.x_MainLightShadowmapSize;
        let x_1406 : vec4<f32> = u_xlat13;
        let x_1408 : vec2<f32> = ((vec2<f32>(x_1400.x, x_1400.y) * vec2<f32>(x_1403.x, x_1403.y)) + vec2<f32>(x_1406.w, x_1406.y));
        let x_1409 : vec3<f32> = u_xlat35;
        u_xlat35 = vec3<f32>(x_1408.x, x_1408.y, x_1409.z);
        let x_1412 : f32 = u_xlat13.y;
        u_xlat10.w = x_1412;
        let x_1415 : vec4<f32> = u_xlat3;
        let x_1418 : vec4<f32> = x_394.x_MainLightShadowmapSize;
        let x_1421 : vec4<f32> = u_xlat10;
        u_xlat66 = ((vec2<f32>(x_1415.x, x_1415.y) * vec2<f32>(x_1418.x, x_1418.y)) + vec2<f32>(x_1421.x, x_1421.w));
        let x_1424 : vec4<f32> = u_xlat13;
        let x_1425 : vec3<f32> = vec3<f32>(x_1424.x, x_1424.z, x_1424.w);
        let x_1426 : vec4<f32> = u_xlat11;
        u_xlat11 = vec4<f32>(x_1425.x, x_1426.y, x_1425.y, x_1425.z);
        let x_1428 : vec4<f32> = u_xlat3;
        let x_1431 : vec4<f32> = x_394.x_MainLightShadowmapSize;
        let x_1434 : vec4<f32> = u_xlat11;
        u_xlat13 = ((vec4<f32>(x_1428.x, x_1428.y, x_1428.x, x_1428.y) * vec4<f32>(x_1431.x, x_1431.y, x_1431.x, x_1431.y)) + vec4<f32>(x_1434.x, x_1434.y, x_1434.z, x_1434.y));
        let x_1438 : vec4<f32> = u_xlat3;
        let x_1441 : vec4<f32> = x_394.x_MainLightShadowmapSize;
        let x_1444 : vec4<f32> = u_xlat11;
        u_xlat61 = ((vec2<f32>(x_1438.x, x_1438.y) * vec2<f32>(x_1441.x, x_1441.y)) + vec2<f32>(x_1444.w, x_1444.y));
        let x_1448 : f32 = u_xlat10.x;
        u_xlat11.x = x_1448;
        let x_1450 : vec4<f32> = u_xlat3;
        let x_1453 : vec4<f32> = x_394.x_MainLightShadowmapSize;
        let x_1456 : vec4<f32> = u_xlat11;
        let x_1458 : vec2<f32> = ((vec2<f32>(x_1450.x, x_1450.y) * vec2<f32>(x_1453.x, x_1453.y)) + vec2<f32>(x_1456.x, x_1456.y));
        let x_1459 : vec4<f32> = u_xlat3;
        u_xlat3 = vec4<f32>(x_1458.x, x_1458.y, x_1459.z, x_1459.w);
        let x_1462 : vec4<f32> = u_xlat9;
        let x_1464 : vec4<f32> = u_xlat12;
        u_xlat19 = (vec4<f32>(x_1462.x, x_1462.x, x_1462.x, x_1462.x) * x_1464);
        let x_1467 : vec4<f32> = u_xlat9;
        let x_1469 : vec4<f32> = u_xlat12;
        u_xlat20 = (vec4<f32>(x_1467.y, x_1467.y, x_1467.y, x_1467.y) * x_1469);
        let x_1472 : vec4<f32> = u_xlat9;
        let x_1474 : vec4<f32> = u_xlat12;
        u_xlat21 = (vec4<f32>(x_1472.z, x_1472.z, x_1472.z, x_1472.z) * x_1474);
        let x_1476 : vec4<f32> = u_xlat9;
        let x_1478 : vec4<f32> = u_xlat12;
        u_xlat9 = (vec4<f32>(x_1476.w, x_1476.w, x_1476.w, x_1476.w) * x_1478);
        let x_1481 : vec4<f32> = u_xlat14;
        let x_1482 : vec2<f32> = vec2<f32>(x_1481.x, x_1481.y);
        let x_1484 : f32 = u_xlat2.z;
        txVec13 = vec3<f32>(x_1482.x, x_1482.y, x_1484);
        let x_1491 : vec3<f32> = txVec13;
        let x_1493 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_LinearClampCompare, x_1491.xy, x_1491.z);
        u_xlat77 = x_1493;
        let x_1495 : vec4<f32> = u_xlat14;
        let x_1496 : vec2<f32> = vec2<f32>(x_1495.z, x_1495.w);
        let x_1498 : f32 = u_xlat2.z;
        txVec14 = vec3<f32>(x_1496.x, x_1496.y, x_1498);
        let x_1506 : vec3<f32> = txVec14;
        let x_1508 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_LinearClampCompare, x_1506.xy, x_1506.z);
        u_xlat79 = x_1508;
        let x_1509 : f32 = u_xlat79;
        let x_1511 : f32 = u_xlat19.y;
        u_xlat79 = (x_1509 * x_1511);
        let x_1514 : f32 = u_xlat19.x;
        let x_1515 : f32 = u_xlat77;
        let x_1517 : f32 = u_xlat79;
        u_xlat77 = ((x_1514 * x_1515) + x_1517);
        let x_1520 : vec2<f32> = u_xlat53;
        let x_1522 : f32 = u_xlat2.z;
        txVec15 = vec3<f32>(x_1520.x, x_1520.y, x_1522);
        let x_1529 : vec3<f32> = txVec15;
        let x_1531 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_LinearClampCompare, x_1529.xy, x_1529.z);
        u_xlat53.x = x_1531;
        let x_1534 : f32 = u_xlat19.z;
        let x_1536 : f32 = u_xlat53.x;
        let x_1538 : f32 = u_xlat77;
        u_xlat77 = ((x_1534 * x_1536) + x_1538);
        let x_1541 : vec4<f32> = u_xlat17;
        let x_1542 : vec2<f32> = vec2<f32>(x_1541.x, x_1541.y);
        let x_1544 : f32 = u_xlat2.z;
        txVec16 = vec3<f32>(x_1542.x, x_1542.y, x_1544);
        let x_1551 : vec3<f32> = txVec16;
        let x_1553 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_LinearClampCompare, x_1551.xy, x_1551.z);
        u_xlat53.x = x_1553;
        let x_1556 : f32 = u_xlat19.w;
        let x_1558 : f32 = u_xlat53.x;
        let x_1560 : f32 = u_xlat77;
        u_xlat77 = ((x_1556 * x_1558) + x_1560);
        let x_1563 : vec4<f32> = u_xlat15;
        let x_1564 : vec2<f32> = vec2<f32>(x_1563.x, x_1563.y);
        let x_1566 : f32 = u_xlat2.z;
        txVec17 = vec3<f32>(x_1564.x, x_1564.y, x_1566);
        let x_1573 : vec3<f32> = txVec17;
        let x_1575 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_LinearClampCompare, x_1573.xy, x_1573.z);
        u_xlat53.x = x_1575;
        let x_1578 : f32 = u_xlat20.x;
        let x_1580 : f32 = u_xlat53.x;
        let x_1582 : f32 = u_xlat77;
        u_xlat77 = ((x_1578 * x_1580) + x_1582);
        let x_1585 : vec4<f32> = u_xlat15;
        let x_1586 : vec2<f32> = vec2<f32>(x_1585.z, x_1585.w);
        let x_1588 : f32 = u_xlat2.z;
        txVec18 = vec3<f32>(x_1586.x, x_1586.y, x_1588);
        let x_1595 : vec3<f32> = txVec18;
        let x_1597 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_LinearClampCompare, x_1595.xy, x_1595.z);
        u_xlat53.x = x_1597;
        let x_1600 : f32 = u_xlat20.y;
        let x_1602 : f32 = u_xlat53.x;
        let x_1604 : f32 = u_xlat77;
        u_xlat77 = ((x_1600 * x_1602) + x_1604);
        let x_1607 : vec4<f32> = u_xlat16;
        let x_1608 : vec2<f32> = vec2<f32>(x_1607.x, x_1607.y);
        let x_1610 : f32 = u_xlat2.z;
        txVec19 = vec3<f32>(x_1608.x, x_1608.y, x_1610);
        let x_1617 : vec3<f32> = txVec19;
        let x_1619 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_LinearClampCompare, x_1617.xy, x_1617.z);
        u_xlat53.x = x_1619;
        let x_1622 : f32 = u_xlat20.z;
        let x_1624 : f32 = u_xlat53.x;
        let x_1626 : f32 = u_xlat77;
        u_xlat77 = ((x_1622 * x_1624) + x_1626);
        let x_1629 : vec4<f32> = u_xlat17;
        let x_1630 : vec2<f32> = vec2<f32>(x_1629.z, x_1629.w);
        let x_1632 : f32 = u_xlat2.z;
        txVec20 = vec3<f32>(x_1630.x, x_1630.y, x_1632);
        let x_1639 : vec3<f32> = txVec20;
        let x_1641 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_LinearClampCompare, x_1639.xy, x_1639.z);
        u_xlat53.x = x_1641;
        let x_1644 : f32 = u_xlat20.w;
        let x_1646 : f32 = u_xlat53.x;
        let x_1648 : f32 = u_xlat77;
        u_xlat77 = ((x_1644 * x_1646) + x_1648);
        let x_1651 : vec4<f32> = u_xlat18;
        let x_1652 : vec2<f32> = vec2<f32>(x_1651.x, x_1651.y);
        let x_1654 : f32 = u_xlat2.z;
        txVec21 = vec3<f32>(x_1652.x, x_1652.y, x_1654);
        let x_1661 : vec3<f32> = txVec21;
        let x_1663 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_LinearClampCompare, x_1661.xy, x_1661.z);
        u_xlat53.x = x_1663;
        let x_1666 : f32 = u_xlat21.x;
        let x_1668 : f32 = u_xlat53.x;
        let x_1670 : f32 = u_xlat77;
        u_xlat77 = ((x_1666 * x_1668) + x_1670);
        let x_1673 : vec4<f32> = u_xlat18;
        let x_1674 : vec2<f32> = vec2<f32>(x_1673.z, x_1673.w);
        let x_1676 : f32 = u_xlat2.z;
        txVec22 = vec3<f32>(x_1674.x, x_1674.y, x_1676);
        let x_1683 : vec3<f32> = txVec22;
        let x_1685 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_LinearClampCompare, x_1683.xy, x_1683.z);
        u_xlat53.x = x_1685;
        let x_1688 : f32 = u_xlat21.y;
        let x_1690 : f32 = u_xlat53.x;
        let x_1692 : f32 = u_xlat77;
        u_xlat77 = ((x_1688 * x_1690) + x_1692);
        let x_1695 : vec3<f32> = u_xlat35;
        let x_1696 : vec2<f32> = vec2<f32>(x_1695.x, x_1695.y);
        let x_1698 : f32 = u_xlat2.z;
        txVec23 = vec3<f32>(x_1696.x, x_1696.y, x_1698);
        let x_1705 : vec3<f32> = txVec23;
        let x_1707 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_LinearClampCompare, x_1705.xy, x_1705.z);
        u_xlat53.x = x_1707;
        let x_1710 : f32 = u_xlat21.z;
        let x_1712 : f32 = u_xlat53.x;
        let x_1714 : f32 = u_xlat77;
        u_xlat77 = ((x_1710 * x_1712) + x_1714);
        let x_1717 : vec2<f32> = u_xlat66;
        let x_1719 : f32 = u_xlat2.z;
        txVec24 = vec3<f32>(x_1717.x, x_1717.y, x_1719);
        let x_1726 : vec3<f32> = txVec24;
        let x_1728 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_LinearClampCompare, x_1726.xy, x_1726.z);
        u_xlat53.x = x_1728;
        let x_1731 : f32 = u_xlat21.w;
        let x_1733 : f32 = u_xlat53.x;
        let x_1735 : f32 = u_xlat77;
        u_xlat77 = ((x_1731 * x_1733) + x_1735);
        let x_1738 : vec4<f32> = u_xlat13;
        let x_1739 : vec2<f32> = vec2<f32>(x_1738.x, x_1738.y);
        let x_1741 : f32 = u_xlat2.z;
        txVec25 = vec3<f32>(x_1739.x, x_1739.y, x_1741);
        let x_1748 : vec3<f32> = txVec25;
        let x_1750 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_LinearClampCompare, x_1748.xy, x_1748.z);
        u_xlat53.x = x_1750;
        let x_1753 : f32 = u_xlat9.x;
        let x_1755 : f32 = u_xlat53.x;
        let x_1757 : f32 = u_xlat77;
        u_xlat77 = ((x_1753 * x_1755) + x_1757);
        let x_1760 : vec4<f32> = u_xlat13;
        let x_1761 : vec2<f32> = vec2<f32>(x_1760.z, x_1760.w);
        let x_1763 : f32 = u_xlat2.z;
        txVec26 = vec3<f32>(x_1761.x, x_1761.y, x_1763);
        let x_1770 : vec3<f32> = txVec26;
        let x_1772 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_LinearClampCompare, x_1770.xy, x_1770.z);
        u_xlat53.x = x_1772;
        let x_1775 : f32 = u_xlat9.y;
        let x_1777 : f32 = u_xlat53.x;
        let x_1779 : f32 = u_xlat77;
        u_xlat77 = ((x_1775 * x_1777) + x_1779);
        let x_1782 : vec2<f32> = u_xlat61;
        let x_1784 : f32 = u_xlat2.z;
        txVec27 = vec3<f32>(x_1782.x, x_1782.y, x_1784);
        let x_1791 : vec3<f32> = txVec27;
        let x_1793 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_LinearClampCompare, x_1791.xy, x_1791.z);
        u_xlat53.x = x_1793;
        let x_1796 : f32 = u_xlat9.z;
        let x_1798 : f32 = u_xlat53.x;
        let x_1800 : f32 = u_xlat77;
        u_xlat77 = ((x_1796 * x_1798) + x_1800);
        let x_1803 : vec4<f32> = u_xlat3;
        let x_1804 : vec2<f32> = vec2<f32>(x_1803.x, x_1803.y);
        let x_1806 : f32 = u_xlat2.z;
        txVec28 = vec3<f32>(x_1804.x, x_1804.y, x_1806);
        let x_1813 : vec3<f32> = txVec28;
        let x_1815 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_LinearClampCompare, x_1813.xy, x_1813.z);
        u_xlat3.x = x_1815;
        let x_1818 : f32 = u_xlat9.w;
        let x_1820 : f32 = u_xlat3.x;
        let x_1822 : f32 = u_xlat77;
        u_xlat76 = ((x_1818 * x_1820) + x_1822);
      }
    }
  } else {
    let x_1826 : vec4<f32> = u_xlat2;
    let x_1827 : vec2<f32> = vec2<f32>(x_1826.x, x_1826.y);
    let x_1829 : f32 = u_xlat2.z;
    txVec29 = vec3<f32>(x_1827.x, x_1827.y, x_1829);
    let x_1836 : vec3<f32> = txVec29;
    let x_1838 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_LinearClampCompare, x_1836.xy, x_1836.z);
    u_xlat76 = x_1838;
  }
  let x_1840 : f32 = x_394.x_MainLightShadowParams.x;
  u_xlat77 = (-(x_1840) + 1.0f);
  let x_1843 : f32 = u_xlat76;
  let x_1845 : f32 = x_394.x_MainLightShadowParams.x;
  let x_1847 : f32 = u_xlat77;
  u_xlat76 = ((x_1843 * x_1845) + x_1847);
  let x_1851 : f32 = u_xlat2.z;
  u_xlatb3 = (0.0f >= x_1851);
  let x_1855 : f32 = u_xlat2.z;
  u_xlatb28 = (x_1855 >= 1.0f);
  let x_1857 : bool = u_xlatb28;
  let x_1858 : bool = u_xlatb3;
  u_xlatb3 = (x_1857 | x_1858);
  let x_1860 : bool = u_xlatb3;
  let x_1861 : f32 = u_xlat76;
  u_xlat76 = select(x_1861, 1.0f, x_1860);
  let x_1863 : vec3<f32> = u_xlat1;
  let x_1865 : vec4<f32> = x_149.x_MainLightPosition;
  u_xlat1.x = dot(x_1863, -(vec3<f32>(x_1865.x, x_1865.y, x_1865.z)));
  let x_1871 : f32 = u_xlat1.x;
  u_xlat1.x = clamp(x_1871, 0.0f, 1.0f);
  let x_1875 : f32 = u_xlat76;
  let x_1878 : vec4<f32> = x_149.x_MainLightColor;
  u_xlat26 = (vec3<f32>(x_1875, x_1875, x_1875) * vec3<f32>(x_1878.x, x_1878.y, x_1878.z));
  let x_1881 : vec3<f32> = u_xlat26;
  let x_1882 : vec3<f32> = u_xlat1;
  u_xlat1 = (x_1881 * vec3<f32>(x_1882.x, x_1882.x, x_1882.x));
  let x_1885 : vec3<f32> = u_xlat1;
  let x_1886 : vec4<f32> = u_xlat6;
  u_xlat1 = (x_1885 * vec3<f32>(x_1886.x, x_1886.y, x_1886.z));
  let x_1890 : f32 = x_83.unity_LODFade.x;
  u_xlatb76 = (x_1890 < 0.0f);
  let x_1893 : f32 = x_83.unity_LODFade.x;
  u_xlat28 = (x_1893 + 1.0f);
  let x_1895 : bool = u_xlatb76;
  if (x_1895) {
    let x_1899 : f32 = u_xlat28;
    x_1896 = x_1899;
  } else {
    let x_1902 : f32 = x_83.unity_LODFade.x;
    x_1896 = x_1902;
  }
  let x_1903 : f32 = x_1896;
  u_xlat76 = x_1903;
  let x_1904 : f32 = u_xlat76;
  u_xlatb28 = (0.5f >= x_1904);
  let x_1906 : vec4<f32> = u_xlat4;
  let x_1910 : vec4<f32> = x_149.x_ScreenParams;
  let x_1912 : vec3<f32> = (abs(vec3<f32>(x_1906.x, x_1906.y, x_1906.z)) * vec3<f32>(x_1910.x, x_1910.y, x_1910.x));
  let x_1913 : vec4<f32> = u_xlat4;
  u_xlat4 = vec4<f32>(x_1912.x, x_1912.y, x_1912.z, x_1913.w);
  let x_1918 : vec4<f32> = u_xlat4;
  u_xlatu4 = vec3<u32>(vec3<f32>(x_1918.x, x_1918.y, x_1918.z));
  let x_1923 : u32 = u_xlatu4.z;
  u_xlatu53 = (x_1923 * 1025u);
  let x_1927 : u32 = u_xlatu53;
  u_xlatu78 = (x_1927 >> 6u);
  let x_1931 : u32 = u_xlatu78;
  let x_1932 : u32 = u_xlatu53;
  u_xlati53 = bitcast<i32>((x_1931 ^ x_1932));
  let x_1935 : i32 = u_xlati53;
  u_xlatu53 = (bitcast<u32>(x_1935) * 9u);
  let x_1939 : u32 = u_xlatu53;
  u_xlatu78 = (x_1939 >> 11u);
  let x_1942 : u32 = u_xlatu78;
  let x_1943 : u32 = u_xlatu53;
  u_xlati53 = bitcast<i32>((x_1942 ^ x_1943));
  let x_1946 : i32 = u_xlati53;
  u_xlati53 = (x_1946 * 32769i);
  let x_1949 : i32 = u_xlati53;
  let x_1952 : u32 = u_xlatu4.y;
  u_xlati53 = bitcast<i32>((bitcast<u32>(x_1949) ^ x_1952));
  let x_1955 : i32 = u_xlati53;
  u_xlatu53 = (bitcast<u32>(x_1955) * 1025u);
  let x_1958 : u32 = u_xlatu53;
  u_xlatu78 = (x_1958 >> 6u);
  let x_1960 : u32 = u_xlatu78;
  let x_1961 : u32 = u_xlatu53;
  u_xlati53 = bitcast<i32>((x_1960 ^ x_1961));
  let x_1964 : i32 = u_xlati53;
  u_xlatu53 = (bitcast<u32>(x_1964) * 9u);
  let x_1967 : u32 = u_xlatu53;
  u_xlatu78 = (x_1967 >> 11u);
  let x_1969 : u32 = u_xlatu78;
  let x_1970 : u32 = u_xlatu53;
  u_xlati53 = bitcast<i32>((x_1969 ^ x_1970));
  let x_1973 : i32 = u_xlati53;
  u_xlati53 = (x_1973 * 32769i);
  let x_1975 : i32 = u_xlati53;
  let x_1978 : u32 = u_xlatu4.x;
  u_xlati53 = bitcast<i32>((bitcast<u32>(x_1975) ^ x_1978));
  let x_1981 : i32 = u_xlati53;
  u_xlatu53 = (bitcast<u32>(x_1981) * 1025u);
  let x_1984 : u32 = u_xlatu53;
  u_xlatu78 = (x_1984 >> 6u);
  let x_1986 : u32 = u_xlatu78;
  let x_1987 : u32 = u_xlatu53;
  u_xlati53 = bitcast<i32>((x_1986 ^ x_1987));
  let x_1990 : i32 = u_xlati53;
  u_xlatu53 = (bitcast<u32>(x_1990) * 9u);
  let x_1993 : u32 = u_xlatu53;
  u_xlatu78 = (x_1993 >> 11u);
  let x_1995 : u32 = u_xlatu78;
  let x_1996 : u32 = u_xlatu53;
  u_xlati53 = bitcast<i32>((x_1995 ^ x_1996));
  let x_1999 : i32 = u_xlati53;
  u_xlati53 = (x_1999 * 32769i);
  param = 1065353216i;
  let x_2005 : i32 = u_xlati53;
  param_1 = x_2005;
  param_2 = 0i;
  param_3 = 23i;
  let x_2008 : i32 = int_bitfieldInsert_i1_i1_i1_i1_(&(param), &(param_1), &(param_2), &(param_3));
  u_xlat53.x = bitcast<f32>(x_2008);
  let x_2012 : f32 = u_xlat53.x;
  u_xlat53.x = (x_2012 + -1.0f);
  let x_2017 : f32 = u_xlat53.x;
  u_xlat78 = (-(x_2017) + 1.0f);
  let x_2020 : bool = u_xlatb28;
  if (x_2020) {
    let x_2025 : f32 = u_xlat53.x;
    x_2021 = x_2025;
  } else {
    let x_2027 : f32 = u_xlat78;
    x_2021 = x_2027;
  }
  let x_2028 : f32 = x_2021;
  u_xlat28 = x_2028;
  let x_2029 : f32 = u_xlat76;
  let x_2031 : f32 = u_xlat28;
  u_xlat76 = ((x_2029 * 2.0f) + -(x_2031));
  let x_2034 : f32 = u_xlat76;
  let x_2036 : f32 = u_xlat6.w;
  u_xlat28 = (x_2034 * x_2036);
  let x_2039 : f32 = u_xlat28;
  u_xlatb53 = (x_2039 >= 0.40000000596046447754f);
  let x_2042 : bool = u_xlatb53;
  let x_2043 : f32 = u_xlat28;
  u_xlat53.x = select(0.0f, x_2043, x_2042);
  let x_2047 : f32 = u_xlat6.w;
  let x_2048 : f32 = u_xlat76;
  u_xlat76 = ((x_2047 * x_2048) + -0.40000000596046447754f);
  let x_2052 : f32 = u_xlat28;
  u_xlat78 = dpdxCoarse(x_2052);
  let x_2054 : f32 = u_xlat28;
  u_xlat28 = dpdyCoarse(x_2054);
  let x_2056 : f32 = u_xlat28;
  let x_2058 : f32 = u_xlat78;
  u_xlat28 = (abs(x_2056) + abs(x_2058));
  let x_2061 : f32 = u_xlat28;
  u_xlat28 = max(x_2061, 0.00009999999747378752f);
  let x_2064 : f32 = u_xlat76;
  let x_2065 : f32 = u_xlat28;
  u_xlat76 = (x_2064 / x_2065);
  let x_2067 : f32 = u_xlat76;
  u_xlat76 = (x_2067 + 0.5f);
  let x_2069 : f32 = u_xlat76;
  u_xlat76 = clamp(x_2069, 0.0f, 1.0f);
  let x_2072 : f32 = x_149.x_AlphaToMaskAvailable;
  u_xlatb28 = !((x_2072 == 0.0f));
  let x_2074 : bool = u_xlatb28;
  if (x_2074) {
    let x_2078 : f32 = u_xlat76;
    x_2075 = x_2078;
  } else {
    let x_2081 : f32 = u_xlat53.x;
    x_2075 = x_2081;
  }
  let x_2082 : f32 = x_2075;
  u_xlat76 = x_2082;
  let x_2083 : f32 = u_xlat76;
  u_xlat53.x = (x_2083 + -0.00009999999747378752f);
  let x_2088 : f32 = u_xlat53.x;
  u_xlatb53 = (x_2088 < 0.0f);
  let x_2090 : bool = u_xlatb53;
  if (((select(0i, 1i, x_2090) * -1i) != 0i)) {
    discard;
  }
  let x_2098 : vec3<f32> = u_xlat25;
  let x_2099 : vec3<f32> = u_xlat33;
  u_xlat25 = (x_2098 * vec3<f32>(x_2099.y, x_2099.y, x_2099.y));
  let x_2102 : vec3<f32> = u_xlat33;
  let x_2104 : vec4<f32> = vs_INTERP4;
  let x_2107 : vec3<f32> = u_xlat25;
  u_xlat25 = ((vec3<f32>(x_2102.x, x_2102.x, x_2102.x) * vec3<f32>(x_2104.x, x_2104.y, x_2104.z)) + x_2107);
  let x_2109 : vec3<f32> = u_xlat33;
  let x_2111 : vec3<f32> = vs_INTERP9;
  let x_2113 : vec3<f32> = u_xlat25;
  u_xlat25 = ((vec3<f32>(x_2109.z, x_2109.z, x_2109.z) * x_2111) + x_2113);
  let x_2115 : vec3<f32> = u_xlat25;
  let x_2116 : vec3<f32> = u_xlat25;
  u_xlat53.x = dot(x_2115, x_2116);
  let x_2120 : f32 = u_xlat53.x;
  u_xlat53.x = inverseSqrt(x_2120);
  let x_2123 : vec3<f32> = u_xlat25;
  let x_2124 : vec2<f32> = u_xlat53;
  u_xlat25 = (x_2123 * vec3<f32>(x_2124.x, x_2124.x, x_2124.x));
  let x_2134 : vec2<f32> = vs_INTERP0;
  let x_2136 : f32 = x_149.x_GlobalMipBias.x;
  let x_2137 : vec4<f32> = textureSampleBias(unity_LightmapInd, samplerunity_Lightmap, x_2134, x_2136);
  u_xlat4 = x_2137;
  let x_2142 : vec2<f32> = vs_INTERP0;
  let x_2144 : f32 = x_149.x_GlobalMipBias.x;
  let x_2145 : vec4<f32> = textureSampleBias(unity_Lightmap, samplerunity_Lightmap, x_2142, x_2144);
  let x_2146 : vec3<f32> = vec3<f32>(x_2145.x, x_2145.y, x_2145.z);
  let x_2147 : vec4<f32> = u_xlat6;
  u_xlat6 = vec4<f32>(x_2146.x, x_2146.y, x_2146.z, x_2147.w);
  let x_2149 : vec4<f32> = u_xlat4;
  let x_2152 : vec3<f32> = (vec3<f32>(x_2149.x, x_2149.y, x_2149.z) + vec3<f32>(-0.5f, -0.5f, -0.5f));
  let x_2153 : vec4<f32> = u_xlat4;
  u_xlat4 = vec4<f32>(x_2152.x, x_2152.y, x_2152.z, x_2153.w);
  let x_2155 : vec3<f32> = u_xlat25;
  let x_2156 : vec4<f32> = u_xlat4;
  u_xlat53.x = dot(x_2155, vec3<f32>(x_2156.x, x_2156.y, x_2156.z));
  let x_2161 : f32 = u_xlat53.x;
  u_xlat53.x = (x_2161 + 0.5f);
  let x_2164 : vec2<f32> = u_xlat53;
  let x_2166 : vec4<f32> = u_xlat6;
  let x_2168 : vec3<f32> = (vec3<f32>(x_2164.x, x_2164.x, x_2164.x) * vec3<f32>(x_2166.x, x_2166.y, x_2166.z));
  let x_2169 : vec4<f32> = u_xlat4;
  u_xlat4 = vec4<f32>(x_2168.x, x_2168.y, x_2168.z, x_2169.w);
  let x_2172 : f32 = u_xlat4.w;
  u_xlat53.x = max(x_2172, 0.00009999999747378752f);
  let x_2175 : vec4<f32> = u_xlat4;
  let x_2177 : vec2<f32> = u_xlat53;
  let x_2179 : vec3<f32> = (vec3<f32>(x_2175.x, x_2175.y, x_2175.z) / vec3<f32>(x_2177.x, x_2177.x, x_2177.x));
  let x_2180 : vec4<f32> = u_xlat4;
  u_xlat4 = vec4<f32>(x_2179.x, x_2179.y, x_2179.z, x_2180.w);
  let x_2183 : f32 = u_xlat8.x;
  u_xlat8.x = x_2183;
  let x_2186 : f32 = u_xlat8.x;
  u_xlat8.x = clamp(x_2186, 0.0f, 1.0f);
  let x_2189 : f32 = u_xlat76;
  u_xlat76 = x_2189;
  let x_2190 : f32 = u_xlat76;
  u_xlat76 = clamp(x_2190, 0.0f, 1.0f);
  let x_2192 : vec3<f32> = u_xlat7;
  let x_2195 : vec3<f32> = (x_2192 * vec3<f32>(0.95999997854232788086f, 0.95999997854232788086f, 0.95999997854232788086f));
  let x_2196 : vec4<f32> = u_xlat6;
  u_xlat6 = vec4<f32>(x_2195.x, x_2195.y, x_2195.z, x_2196.w);
  let x_2199 : f32 = u_xlat8.x;
  u_xlat53.x = (-(x_2199) + 1.0f);
  let x_2204 : f32 = u_xlat53.x;
  let x_2206 : f32 = u_xlat53.x;
  u_xlat78 = (x_2204 * x_2206);
  let x_2208 : f32 = u_xlat78;
  u_xlat78 = max(x_2208, 0.0078125f);
  let x_2211 : f32 = u_xlat78;
  let x_2212 : f32 = u_xlat78;
  u_xlat79 = (x_2211 * x_2212);
  let x_2216 : f32 = u_xlat8.x;
  u_xlat80 = (x_2216 + 0.04000002145767211914f);
  let x_2219 : f32 = u_xlat80;
  u_xlat80 = min(x_2219, 1.0f);
  let x_2222 : f32 = u_xlat78;
  u_xlat81 = ((x_2222 * 4.0f) + 2.0f);
  let x_2226 : f32 = vs_INTERP6.w;
  u_xlat7.x = min(x_2226, 1.0f);
  let x_2229 : bool = u_xlatb0;
  if (x_2229) {
    let x_2233 : f32 = x_394.x_MainLightShadowParams.y;
    u_xlatb0 = (x_2233 == 1.0f);
    let x_2235 : bool = u_xlatb0;
    if (x_2235) {
      let x_2238 : vec4<f32> = u_xlat2;
      let x_2241 : vec4<f32> = x_394.x_MainLightShadowOffset0;
      u_xlat8 = (vec4<f32>(x_2238.x, x_2238.y, x_2238.x, x_2238.y) + x_2241);
      let x_2244 : vec4<f32> = u_xlat8;
      let x_2245 : vec2<f32> = vec2<f32>(x_2244.x, x_2244.y);
      let x_2247 : f32 = u_xlat2.z;
      txVec30 = vec3<f32>(x_2245.x, x_2245.y, x_2247);
      let x_2254 : vec3<f32> = txVec30;
      let x_2256 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_LinearClampCompare, x_2254.xy, x_2254.z);
      u_xlat9.x = x_2256;
      let x_2259 : vec4<f32> = u_xlat8;
      let x_2260 : vec2<f32> = vec2<f32>(x_2259.z, x_2259.w);
      let x_2262 : f32 = u_xlat2.z;
      txVec31 = vec3<f32>(x_2260.x, x_2260.y, x_2262);
      let x_2269 : vec3<f32> = txVec31;
      let x_2271 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_LinearClampCompare, x_2269.xy, x_2269.z);
      u_xlat9.y = x_2271;
      let x_2273 : vec4<f32> = u_xlat2;
      let x_2276 : vec4<f32> = x_394.x_MainLightShadowOffset1;
      u_xlat8 = (vec4<f32>(x_2273.x, x_2273.y, x_2273.x, x_2273.y) + x_2276);
      let x_2279 : vec4<f32> = u_xlat8;
      let x_2280 : vec2<f32> = vec2<f32>(x_2279.x, x_2279.y);
      let x_2282 : f32 = u_xlat2.z;
      txVec32 = vec3<f32>(x_2280.x, x_2280.y, x_2282);
      let x_2289 : vec3<f32> = txVec32;
      let x_2291 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_LinearClampCompare, x_2289.xy, x_2289.z);
      u_xlat9.z = x_2291;
      let x_2294 : vec4<f32> = u_xlat8;
      let x_2295 : vec2<f32> = vec2<f32>(x_2294.z, x_2294.w);
      let x_2297 : f32 = u_xlat2.z;
      txVec33 = vec3<f32>(x_2295.x, x_2295.y, x_2297);
      let x_2304 : vec3<f32> = txVec33;
      let x_2306 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_LinearClampCompare, x_2304.xy, x_2304.z);
      u_xlat9.w = x_2306;
      let x_2308 : vec4<f32> = u_xlat9;
      u_xlat0.x = dot(x_2308, vec4<f32>(0.25f, 0.25f, 0.25f, 0.25f));
    } else {
      let x_2314 : f32 = x_394.x_MainLightShadowParams.y;
      u_xlatb32 = (x_2314 == 2.0f);
      let x_2316 : bool = u_xlatb32;
      if (x_2316) {
        let x_2320 : vec4<f32> = u_xlat2;
        let x_2323 : vec4<f32> = x_394.x_MainLightShadowmapSize;
        let x_2326 : vec2<f32> = ((vec2<f32>(x_2320.x, x_2320.y) * vec2<f32>(x_2323.z, x_2323.w)) + vec2<f32>(0.5f, 0.5f));
        let x_2327 : vec3<f32> = u_xlat32;
        u_xlat32 = vec3<f32>(x_2326.x, x_2326.y, x_2327.z);
        let x_2329 : vec3<f32> = u_xlat32;
        let x_2331 : vec2<f32> = floor(vec2<f32>(x_2329.x, x_2329.y));
        let x_2332 : vec3<f32> = u_xlat32;
        u_xlat32 = vec3<f32>(x_2331.x, x_2331.y, x_2332.z);
        let x_2334 : vec4<f32> = u_xlat2;
        let x_2337 : vec4<f32> = x_394.x_MainLightShadowmapSize;
        let x_2340 : vec3<f32> = u_xlat32;
        let x_2343 : vec2<f32> = ((vec2<f32>(x_2334.x, x_2334.y) * vec2<f32>(x_2337.z, x_2337.w)) + -(vec2<f32>(x_2340.x, x_2340.y)));
        let x_2344 : vec4<f32> = u_xlat8;
        u_xlat8 = vec4<f32>(x_2343.x, x_2343.y, x_2344.z, x_2344.w);
        let x_2346 : vec4<f32> = u_xlat8;
        u_xlat9 = (vec4<f32>(x_2346.x, x_2346.x, x_2346.y, x_2346.y) + vec4<f32>(0.5f, 1.0f, 0.5f, 1.0f));
        let x_2349 : vec4<f32> = u_xlat9;
        let x_2351 : vec4<f32> = u_xlat9;
        u_xlat10 = (vec4<f32>(x_2349.x, x_2349.x, x_2349.z, x_2349.z) * vec4<f32>(x_2351.x, x_2351.x, x_2351.z, x_2351.z));
        let x_2355 : vec4<f32> = u_xlat10;
        u_xlat58 = (vec2<f32>(x_2355.y, x_2355.w) * vec2<f32>(0.07999999821186065674f, 0.07999999821186065674f));
        let x_2358 : vec4<f32> = u_xlat10;
        let x_2361 : vec4<f32> = u_xlat8;
        let x_2364 : vec2<f32> = ((vec2<f32>(x_2358.x, x_2358.z) * vec2<f32>(0.5f, 0.5f)) + -(vec2<f32>(x_2361.x, x_2361.y)));
        let x_2365 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_2364.x, x_2365.y, x_2364.y, x_2365.w);
        let x_2367 : vec4<f32> = u_xlat8;
        let x_2370 : vec2<f32> = (-(vec2<f32>(x_2367.x, x_2367.y)) + vec2<f32>(1.0f, 1.0f));
        let x_2371 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_2370.x, x_2370.y, x_2371.z, x_2371.w);
        let x_2373 : vec4<f32> = u_xlat8;
        u_xlat60 = min(vec2<f32>(x_2373.x, x_2373.y), vec2<f32>(0.0f, 0.0f));
        let x_2376 : vec2<f32> = u_xlat60;
        let x_2378 : vec2<f32> = u_xlat60;
        let x_2380 : vec4<f32> = u_xlat10;
        u_xlat60 = ((-(x_2376) * x_2378) + vec2<f32>(x_2380.x, x_2380.y));
        let x_2383 : vec4<f32> = u_xlat8;
        let x_2385 : vec2<f32> = max(vec2<f32>(x_2383.x, x_2383.y), vec2<f32>(0.0f, 0.0f));
        let x_2386 : vec4<f32> = u_xlat8;
        u_xlat8 = vec4<f32>(x_2385.x, x_2385.y, x_2386.z, x_2386.w);
        let x_2388 : vec4<f32> = u_xlat8;
        let x_2391 : vec4<f32> = u_xlat8;
        let x_2394 : vec4<f32> = u_xlat9;
        let x_2396 : vec2<f32> = ((-(vec2<f32>(x_2388.x, x_2388.y)) * vec2<f32>(x_2391.x, x_2391.y)) + vec2<f32>(x_2394.y, x_2394.w));
        let x_2397 : vec4<f32> = u_xlat8;
        u_xlat8 = vec4<f32>(x_2396.x, x_2396.y, x_2397.z, x_2397.w);
        let x_2399 : vec2<f32> = u_xlat60;
        u_xlat60 = (x_2399 + vec2<f32>(1.0f, 1.0f));
        let x_2401 : vec4<f32> = u_xlat8;
        let x_2403 : vec2<f32> = (vec2<f32>(x_2401.x, x_2401.y) + vec2<f32>(1.0f, 1.0f));
        let x_2404 : vec4<f32> = u_xlat8;
        u_xlat8 = vec4<f32>(x_2403.x, x_2403.y, x_2404.z, x_2404.w);
        let x_2406 : vec4<f32> = u_xlat9;
        let x_2408 : vec2<f32> = (vec2<f32>(x_2406.x, x_2406.z) * vec2<f32>(0.15999999642372131348f, 0.15999999642372131348f));
        let x_2409 : vec4<f32> = u_xlat11;
        u_xlat11 = vec4<f32>(x_2408.x, x_2408.y, x_2409.z, x_2409.w);
        let x_2411 : vec4<f32> = u_xlat10;
        let x_2413 : vec2<f32> = (vec2<f32>(x_2411.x, x_2411.y) * vec2<f32>(0.15999999642372131348f, 0.15999999642372131348f));
        let x_2414 : vec4<f32> = u_xlat12;
        u_xlat12 = vec4<f32>(x_2413.x, x_2413.y, x_2414.z, x_2414.w);
        let x_2416 : vec2<f32> = u_xlat60;
        let x_2417 : vec2<f32> = (x_2416 * vec2<f32>(0.15999999642372131348f, 0.15999999642372131348f));
        let x_2418 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_2417.x, x_2417.y, x_2418.z, x_2418.w);
        let x_2420 : vec4<f32> = u_xlat8;
        let x_2422 : vec2<f32> = (vec2<f32>(x_2420.x, x_2420.y) * vec2<f32>(0.15999999642372131348f, 0.15999999642372131348f));
        let x_2423 : vec4<f32> = u_xlat13;
        u_xlat13 = vec4<f32>(x_2422.x, x_2422.y, x_2423.z, x_2423.w);
        let x_2425 : vec4<f32> = u_xlat9;
        let x_2427 : vec2<f32> = (vec2<f32>(x_2425.y, x_2425.w) * vec2<f32>(0.15999999642372131348f, 0.15999999642372131348f));
        let x_2428 : vec4<f32> = u_xlat8;
        u_xlat8 = vec4<f32>(x_2427.x, x_2427.y, x_2428.z, x_2428.w);
        let x_2431 : f32 = u_xlat10.x;
        u_xlat11.z = x_2431;
        let x_2434 : f32 = u_xlat8.x;
        u_xlat11.w = x_2434;
        let x_2437 : f32 = u_xlat13.x;
        u_xlat12.z = x_2437;
        let x_2440 : f32 = u_xlat58.x;
        u_xlat12.w = x_2440;
        let x_2442 : vec4<f32> = u_xlat11;
        let x_2444 : vec4<f32> = u_xlat12;
        u_xlat9 = (vec4<f32>(x_2442.z, x_2442.w, x_2442.x, x_2442.z) + vec4<f32>(x_2444.z, x_2444.w, x_2444.x, x_2444.z));
        let x_2448 : f32 = u_xlat11.y;
        u_xlat10.z = x_2448;
        let x_2451 : f32 = u_xlat8.y;
        u_xlat10.w = x_2451;
        let x_2454 : f32 = u_xlat12.y;
        u_xlat13.z = x_2454;
        let x_2457 : f32 = u_xlat58.y;
        u_xlat13.w = x_2457;
        let x_2459 : vec4<f32> = u_xlat10;
        let x_2461 : vec4<f32> = u_xlat13;
        let x_2463 : vec3<f32> = (vec3<f32>(x_2459.z, x_2459.y, x_2459.w) + vec3<f32>(x_2461.z, x_2461.y, x_2461.w));
        let x_2464 : vec4<f32> = u_xlat8;
        u_xlat8 = vec4<f32>(x_2463.x, x_2463.y, x_2463.z, x_2464.w);
        let x_2466 : vec4<f32> = u_xlat12;
        let x_2468 : vec4<f32> = u_xlat9;
        let x_2470 : vec3<f32> = (vec3<f32>(x_2466.x, x_2466.z, x_2466.w) / vec3<f32>(x_2468.z, x_2468.w, x_2468.y));
        let x_2471 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_2470.x, x_2470.y, x_2470.z, x_2471.w);
        let x_2473 : vec4<f32> = u_xlat10;
        let x_2475 : vec3<f32> = (vec3<f32>(x_2473.x, x_2473.y, x_2473.z) + vec3<f32>(-2.5f, -0.5f, 1.5f));
        let x_2476 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_2475.x, x_2475.y, x_2475.z, x_2476.w);
        let x_2478 : vec4<f32> = u_xlat13;
        let x_2480 : vec4<f32> = u_xlat8;
        let x_2482 : vec3<f32> = (vec3<f32>(x_2478.z, x_2478.y, x_2478.w) / vec3<f32>(x_2480.x, x_2480.y, x_2480.z));
        let x_2483 : vec4<f32> = u_xlat11;
        u_xlat11 = vec4<f32>(x_2482.x, x_2482.y, x_2482.z, x_2483.w);
        let x_2485 : vec4<f32> = u_xlat11;
        let x_2487 : vec3<f32> = (vec3<f32>(x_2485.x, x_2485.y, x_2485.z) + vec3<f32>(-2.5f, -0.5f, 1.5f));
        let x_2488 : vec4<f32> = u_xlat11;
        u_xlat11 = vec4<f32>(x_2487.x, x_2487.y, x_2487.z, x_2488.w);
        let x_2490 : vec4<f32> = u_xlat10;
        let x_2493 : vec4<f32> = x_394.x_MainLightShadowmapSize;
        let x_2495 : vec3<f32> = (vec3<f32>(x_2490.y, x_2490.x, x_2490.z) * vec3<f32>(x_2493.x, x_2493.x, x_2493.x));
        let x_2496 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_2495.x, x_2495.y, x_2495.z, x_2496.w);
        let x_2498 : vec4<f32> = u_xlat11;
        let x_2501 : vec4<f32> = x_394.x_MainLightShadowmapSize;
        let x_2503 : vec3<f32> = (vec3<f32>(x_2498.x, x_2498.y, x_2498.z) * vec3<f32>(x_2501.y, x_2501.y, x_2501.y));
        let x_2504 : vec4<f32> = u_xlat11;
        u_xlat11 = vec4<f32>(x_2503.x, x_2503.y, x_2503.z, x_2504.w);
        let x_2507 : f32 = u_xlat11.x;
        u_xlat10.w = x_2507;
        let x_2509 : vec3<f32> = u_xlat32;
        let x_2512 : vec4<f32> = x_394.x_MainLightShadowmapSize;
        let x_2515 : vec4<f32> = u_xlat10;
        u_xlat12 = ((vec4<f32>(x_2509.x, x_2509.y, x_2509.x, x_2509.y) * vec4<f32>(x_2512.x, x_2512.y, x_2512.x, x_2512.y)) + vec4<f32>(x_2515.y, x_2515.w, x_2515.x, x_2515.w));
        let x_2518 : vec3<f32> = u_xlat32;
        let x_2521 : vec4<f32> = x_394.x_MainLightShadowmapSize;
        let x_2524 : vec4<f32> = u_xlat10;
        let x_2526 : vec2<f32> = ((vec2<f32>(x_2518.x, x_2518.y) * vec2<f32>(x_2521.x, x_2521.y)) + vec2<f32>(x_2524.z, x_2524.w));
        let x_2527 : vec4<f32> = u_xlat13;
        u_xlat13 = vec4<f32>(x_2526.x, x_2526.y, x_2527.z, x_2527.w);
        let x_2530 : f32 = u_xlat10.y;
        u_xlat11.w = x_2530;
        let x_2532 : vec4<f32> = u_xlat11;
        let x_2533 : vec2<f32> = vec2<f32>(x_2532.y, x_2532.z);
        let x_2534 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_2534.x, x_2533.x, x_2534.z, x_2533.y);
        let x_2536 : vec3<f32> = u_xlat32;
        let x_2539 : vec4<f32> = x_394.x_MainLightShadowmapSize;
        let x_2542 : vec4<f32> = u_xlat10;
        u_xlat14 = ((vec4<f32>(x_2536.x, x_2536.y, x_2536.x, x_2536.y) * vec4<f32>(x_2539.x, x_2539.y, x_2539.x, x_2539.y)) + vec4<f32>(x_2542.x, x_2542.y, x_2542.z, x_2542.y));
        let x_2545 : vec3<f32> = u_xlat32;
        let x_2548 : vec4<f32> = x_394.x_MainLightShadowmapSize;
        let x_2551 : vec4<f32> = u_xlat11;
        u_xlat11 = ((vec4<f32>(x_2545.x, x_2545.y, x_2545.x, x_2545.y) * vec4<f32>(x_2548.x, x_2548.y, x_2548.x, x_2548.y)) + vec4<f32>(x_2551.w, x_2551.y, x_2551.w, x_2551.z));
        let x_2554 : vec3<f32> = u_xlat32;
        let x_2557 : vec4<f32> = x_394.x_MainLightShadowmapSize;
        let x_2560 : vec4<f32> = u_xlat10;
        u_xlat10 = ((vec4<f32>(x_2554.x, x_2554.y, x_2554.x, x_2554.y) * vec4<f32>(x_2557.x, x_2557.y, x_2557.x, x_2557.y)) + vec4<f32>(x_2560.x, x_2560.w, x_2560.z, x_2560.w));
        let x_2563 : vec4<f32> = u_xlat8;
        let x_2565 : vec4<f32> = u_xlat9;
        u_xlat15 = (vec4<f32>(x_2563.x, x_2563.x, x_2563.x, x_2563.y) * vec4<f32>(x_2565.z, x_2565.w, x_2565.y, x_2565.z));
        let x_2568 : vec4<f32> = u_xlat8;
        let x_2570 : vec4<f32> = u_xlat9;
        u_xlat16 = (vec4<f32>(x_2568.y, x_2568.y, x_2568.z, x_2568.z) * x_2570);
        let x_2573 : f32 = u_xlat8.z;
        let x_2575 : f32 = u_xlat9.y;
        u_xlat32.x = (x_2573 * x_2575);
        let x_2579 : vec4<f32> = u_xlat12;
        let x_2580 : vec2<f32> = vec2<f32>(x_2579.x, x_2579.y);
        let x_2582 : f32 = u_xlat2.z;
        txVec34 = vec3<f32>(x_2580.x, x_2580.y, x_2582);
        let x_2590 : vec3<f32> = txVec34;
        let x_2592 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_LinearClampCompare, x_2590.xy, x_2590.z);
        u_xlat57 = x_2592;
        let x_2594 : vec4<f32> = u_xlat12;
        let x_2595 : vec2<f32> = vec2<f32>(x_2594.z, x_2594.w);
        let x_2597 : f32 = u_xlat2.z;
        txVec35 = vec3<f32>(x_2595.x, x_2595.y, x_2597);
        let x_2605 : vec3<f32> = txVec35;
        let x_2607 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_LinearClampCompare, x_2605.xy, x_2605.z);
        u_xlat82 = x_2607;
        let x_2608 : f32 = u_xlat82;
        let x_2610 : f32 = u_xlat15.y;
        u_xlat82 = (x_2608 * x_2610);
        let x_2613 : f32 = u_xlat15.x;
        let x_2614 : f32 = u_xlat57;
        let x_2616 : f32 = u_xlat82;
        u_xlat57 = ((x_2613 * x_2614) + x_2616);
        let x_2619 : vec4<f32> = u_xlat13;
        let x_2620 : vec2<f32> = vec2<f32>(x_2619.x, x_2619.y);
        let x_2622 : f32 = u_xlat2.z;
        txVec36 = vec3<f32>(x_2620.x, x_2620.y, x_2622);
        let x_2629 : vec3<f32> = txVec36;
        let x_2631 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_LinearClampCompare, x_2629.xy, x_2629.z);
        u_xlat82 = x_2631;
        let x_2633 : f32 = u_xlat15.z;
        let x_2634 : f32 = u_xlat82;
        let x_2636 : f32 = u_xlat57;
        u_xlat57 = ((x_2633 * x_2634) + x_2636);
        let x_2639 : vec4<f32> = u_xlat11;
        let x_2640 : vec2<f32> = vec2<f32>(x_2639.x, x_2639.y);
        let x_2642 : f32 = u_xlat2.z;
        txVec37 = vec3<f32>(x_2640.x, x_2640.y, x_2642);
        let x_2649 : vec3<f32> = txVec37;
        let x_2651 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_LinearClampCompare, x_2649.xy, x_2649.z);
        u_xlat82 = x_2651;
        let x_2653 : f32 = u_xlat15.w;
        let x_2654 : f32 = u_xlat82;
        let x_2656 : f32 = u_xlat57;
        u_xlat57 = ((x_2653 * x_2654) + x_2656);
        let x_2659 : vec4<f32> = u_xlat14;
        let x_2660 : vec2<f32> = vec2<f32>(x_2659.x, x_2659.y);
        let x_2662 : f32 = u_xlat2.z;
        txVec38 = vec3<f32>(x_2660.x, x_2660.y, x_2662);
        let x_2669 : vec3<f32> = txVec38;
        let x_2671 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_LinearClampCompare, x_2669.xy, x_2669.z);
        u_xlat82 = x_2671;
        let x_2673 : f32 = u_xlat16.x;
        let x_2674 : f32 = u_xlat82;
        let x_2676 : f32 = u_xlat57;
        u_xlat57 = ((x_2673 * x_2674) + x_2676);
        let x_2679 : vec4<f32> = u_xlat14;
        let x_2680 : vec2<f32> = vec2<f32>(x_2679.z, x_2679.w);
        let x_2682 : f32 = u_xlat2.z;
        txVec39 = vec3<f32>(x_2680.x, x_2680.y, x_2682);
        let x_2689 : vec3<f32> = txVec39;
        let x_2691 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_LinearClampCompare, x_2689.xy, x_2689.z);
        u_xlat82 = x_2691;
        let x_2693 : f32 = u_xlat16.y;
        let x_2694 : f32 = u_xlat82;
        let x_2696 : f32 = u_xlat57;
        u_xlat57 = ((x_2693 * x_2694) + x_2696);
        let x_2699 : vec4<f32> = u_xlat11;
        let x_2700 : vec2<f32> = vec2<f32>(x_2699.z, x_2699.w);
        let x_2702 : f32 = u_xlat2.z;
        txVec40 = vec3<f32>(x_2700.x, x_2700.y, x_2702);
        let x_2709 : vec3<f32> = txVec40;
        let x_2711 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_LinearClampCompare, x_2709.xy, x_2709.z);
        u_xlat82 = x_2711;
        let x_2713 : f32 = u_xlat16.z;
        let x_2714 : f32 = u_xlat82;
        let x_2716 : f32 = u_xlat57;
        u_xlat57 = ((x_2713 * x_2714) + x_2716);
        let x_2719 : vec4<f32> = u_xlat10;
        let x_2720 : vec2<f32> = vec2<f32>(x_2719.x, x_2719.y);
        let x_2722 : f32 = u_xlat2.z;
        txVec41 = vec3<f32>(x_2720.x, x_2720.y, x_2722);
        let x_2729 : vec3<f32> = txVec41;
        let x_2731 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_LinearClampCompare, x_2729.xy, x_2729.z);
        u_xlat82 = x_2731;
        let x_2733 : f32 = u_xlat16.w;
        let x_2734 : f32 = u_xlat82;
        let x_2736 : f32 = u_xlat57;
        u_xlat57 = ((x_2733 * x_2734) + x_2736);
        let x_2739 : vec4<f32> = u_xlat10;
        let x_2740 : vec2<f32> = vec2<f32>(x_2739.z, x_2739.w);
        let x_2742 : f32 = u_xlat2.z;
        txVec42 = vec3<f32>(x_2740.x, x_2740.y, x_2742);
        let x_2749 : vec3<f32> = txVec42;
        let x_2751 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_LinearClampCompare, x_2749.xy, x_2749.z);
        u_xlat82 = x_2751;
        let x_2753 : f32 = u_xlat32.x;
        let x_2754 : f32 = u_xlat82;
        let x_2756 : f32 = u_xlat57;
        u_xlat0.x = ((x_2753 * x_2754) + x_2756);
      } else {
        let x_2760 : vec4<f32> = u_xlat2;
        let x_2763 : vec4<f32> = x_394.x_MainLightShadowmapSize;
        let x_2766 : vec2<f32> = ((vec2<f32>(x_2760.x, x_2760.y) * vec2<f32>(x_2763.z, x_2763.w)) + vec2<f32>(0.5f, 0.5f));
        let x_2767 : vec3<f32> = u_xlat32;
        u_xlat32 = vec3<f32>(x_2766.x, x_2766.y, x_2767.z);
        let x_2769 : vec3<f32> = u_xlat32;
        let x_2771 : vec2<f32> = floor(vec2<f32>(x_2769.x, x_2769.y));
        let x_2772 : vec3<f32> = u_xlat32;
        u_xlat32 = vec3<f32>(x_2771.x, x_2771.y, x_2772.z);
        let x_2774 : vec4<f32> = u_xlat2;
        let x_2777 : vec4<f32> = x_394.x_MainLightShadowmapSize;
        let x_2780 : vec3<f32> = u_xlat32;
        let x_2783 : vec2<f32> = ((vec2<f32>(x_2774.x, x_2774.y) * vec2<f32>(x_2777.z, x_2777.w)) + -(vec2<f32>(x_2780.x, x_2780.y)));
        let x_2784 : vec4<f32> = u_xlat8;
        u_xlat8 = vec4<f32>(x_2783.x, x_2783.y, x_2784.z, x_2784.w);
        let x_2786 : vec4<f32> = u_xlat8;
        u_xlat9 = (vec4<f32>(x_2786.x, x_2786.x, x_2786.y, x_2786.y) + vec4<f32>(0.5f, 1.0f, 0.5f, 1.0f));
        let x_2789 : vec4<f32> = u_xlat9;
        let x_2791 : vec4<f32> = u_xlat9;
        u_xlat10 = (vec4<f32>(x_2789.x, x_2789.x, x_2789.z, x_2789.z) * vec4<f32>(x_2791.x, x_2791.x, x_2791.z, x_2791.z));
        let x_2794 : vec4<f32> = u_xlat10;
        let x_2796 : vec2<f32> = (vec2<f32>(x_2794.y, x_2794.w) * vec2<f32>(0.04081600159406661987f, 0.04081600159406661987f));
        let x_2797 : vec4<f32> = u_xlat11;
        u_xlat11 = vec4<f32>(x_2797.x, x_2796.x, x_2797.z, x_2796.y);
        let x_2799 : vec4<f32> = u_xlat10;
        let x_2802 : vec4<f32> = u_xlat8;
        u_xlat58 = ((vec2<f32>(x_2799.x, x_2799.z) * vec2<f32>(0.5f, 0.5f)) + -(vec2<f32>(x_2802.x, x_2802.y)));
        let x_2806 : vec4<f32> = u_xlat8;
        let x_2809 : vec2<f32> = (-(vec2<f32>(x_2806.x, x_2806.y)) + vec2<f32>(1.0f, 1.0f));
        let x_2810 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_2809.x, x_2810.y, x_2809.y, x_2810.w);
        let x_2812 : vec4<f32> = u_xlat8;
        let x_2814 : vec2<f32> = min(vec2<f32>(x_2812.x, x_2812.y), vec2<f32>(0.0f, 0.0f));
        let x_2815 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_2814.x, x_2814.y, x_2815.z, x_2815.w);
        let x_2817 : vec4<f32> = u_xlat10;
        let x_2820 : vec4<f32> = u_xlat10;
        let x_2823 : vec4<f32> = u_xlat9;
        let x_2825 : vec2<f32> = ((-(vec2<f32>(x_2817.x, x_2817.y)) * vec2<f32>(x_2820.x, x_2820.y)) + vec2<f32>(x_2823.x, x_2823.z));
        let x_2826 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_2825.x, x_2826.y, x_2825.y, x_2826.w);
        let x_2828 : vec4<f32> = u_xlat8;
        let x_2830 : vec2<f32> = max(vec2<f32>(x_2828.x, x_2828.y), vec2<f32>(0.0f, 0.0f));
        let x_2831 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_2830.x, x_2830.y, x_2831.z, x_2831.w);
        let x_2833 : vec4<f32> = u_xlat10;
        let x_2836 : vec4<f32> = u_xlat10;
        let x_2839 : vec4<f32> = u_xlat9;
        let x_2841 : vec2<f32> = ((-(vec2<f32>(x_2833.x, x_2833.y)) * vec2<f32>(x_2836.x, x_2836.y)) + vec2<f32>(x_2839.y, x_2839.w));
        let x_2842 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_2842.x, x_2841.x, x_2842.z, x_2841.y);
        let x_2844 : vec4<f32> = u_xlat9;
        u_xlat9 = (x_2844 + vec4<f32>(2.0f, 2.0f, 2.0f, 2.0f));
        let x_2847 : f32 = u_xlat9.y;
        u_xlat10.z = (x_2847 * 0.08163200318813323975f);
        let x_2850 : vec2<f32> = u_xlat58;
        let x_2852 : vec2<f32> = (vec2<f32>(x_2850.y, x_2850.x) * vec2<f32>(0.08163200318813323975f, 0.08163200318813323975f));
        let x_2853 : vec4<f32> = u_xlat12;
        u_xlat12 = vec4<f32>(x_2852.x, x_2852.y, x_2853.z, x_2853.w);
        let x_2855 : vec4<f32> = u_xlat9;
        u_xlat58 = (vec2<f32>(x_2855.x, x_2855.z) * vec2<f32>(0.08163200318813323975f, 0.08163200318813323975f));
        let x_2859 : f32 = u_xlat9.w;
        u_xlat12.z = (x_2859 * 0.08163200318813323975f);
        let x_2863 : f32 = u_xlat12.y;
        u_xlat10.x = x_2863;
        let x_2865 : vec4<f32> = u_xlat8;
        let x_2868 : vec2<f32> = ((vec2<f32>(x_2865.x, x_2865.x) * vec2<f32>(-0.08163200318813323975f, 0.08163200318813323975f)) + vec2<f32>(0.16326400637626647949f, 0.08163200318813323975f));
        let x_2869 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_2869.x, x_2868.x, x_2869.z, x_2868.y);
        let x_2871 : vec4<f32> = u_xlat8;
        let x_2874 : vec2<f32> = ((vec2<f32>(x_2871.x, x_2871.x) * vec2<f32>(-0.08163200318813323975f, 0.08163200318813323975f)) + vec2<f32>(0.08163200318813323975f, 0.16326400637626647949f));
        let x_2875 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_2874.x, x_2875.y, x_2874.y, x_2875.w);
        let x_2878 : f32 = u_xlat58.x;
        u_xlat9.y = x_2878;
        let x_2881 : f32 = u_xlat11.y;
        u_xlat9.w = x_2881;
        let x_2883 : vec4<f32> = u_xlat9;
        let x_2884 : vec4<f32> = u_xlat10;
        u_xlat10 = (x_2883 + x_2884);
        let x_2886 : vec4<f32> = u_xlat8;
        let x_2889 : vec2<f32> = ((vec2<f32>(x_2886.y, x_2886.y) * vec2<f32>(-0.08163200318813323975f, 0.08163200318813323975f)) + vec2<f32>(0.16326400637626647949f, 0.08163200318813323975f));
        let x_2890 : vec4<f32> = u_xlat12;
        u_xlat12 = vec4<f32>(x_2890.x, x_2889.x, x_2890.z, x_2889.y);
        let x_2892 : vec4<f32> = u_xlat8;
        let x_2895 : vec2<f32> = ((vec2<f32>(x_2892.y, x_2892.y) * vec2<f32>(-0.08163200318813323975f, 0.08163200318813323975f)) + vec2<f32>(0.08163200318813323975f, 0.16326400637626647949f));
        let x_2896 : vec4<f32> = u_xlat11;
        u_xlat11 = vec4<f32>(x_2895.x, x_2896.y, x_2895.y, x_2896.w);
        let x_2899 : f32 = u_xlat58.y;
        u_xlat11.y = x_2899;
        let x_2901 : vec4<f32> = u_xlat11;
        let x_2902 : vec4<f32> = u_xlat12;
        u_xlat8 = (x_2901 + x_2902);
        let x_2904 : vec4<f32> = u_xlat9;
        let x_2905 : vec4<f32> = u_xlat10;
        u_xlat9 = (x_2904 / x_2905);
        let x_2907 : vec4<f32> = u_xlat9;
        u_xlat9 = (x_2907 + vec4<f32>(-3.5f, -1.5f, 0.5f, 2.5f));
        let x_2909 : vec4<f32> = u_xlat11;
        let x_2910 : vec4<f32> = u_xlat8;
        u_xlat11 = (x_2909 / x_2910);
        let x_2912 : vec4<f32> = u_xlat11;
        u_xlat11 = (x_2912 + vec4<f32>(-3.5f, -1.5f, 0.5f, 2.5f));
        let x_2914 : vec4<f32> = u_xlat9;
        let x_2917 : vec4<f32> = x_394.x_MainLightShadowmapSize;
        u_xlat9 = (vec4<f32>(x_2914.w, x_2914.x, x_2914.y, x_2914.z) * vec4<f32>(x_2917.x, x_2917.x, x_2917.x, x_2917.x));
        let x_2920 : vec4<f32> = u_xlat11;
        let x_2923 : vec4<f32> = x_394.x_MainLightShadowmapSize;
        u_xlat11 = (vec4<f32>(x_2920.x, x_2920.w, x_2920.y, x_2920.z) * vec4<f32>(x_2923.y, x_2923.y, x_2923.y, x_2923.y));
        let x_2926 : vec4<f32> = u_xlat9;
        let x_2927 : vec3<f32> = vec3<f32>(x_2926.y, x_2926.z, x_2926.w);
        let x_2928 : vec4<f32> = u_xlat12;
        u_xlat12 = vec4<f32>(x_2927.x, x_2928.y, x_2927.y, x_2927.z);
        let x_2931 : f32 = u_xlat11.x;
        u_xlat12.y = x_2931;
        let x_2933 : vec3<f32> = u_xlat32;
        let x_2936 : vec4<f32> = x_394.x_MainLightShadowmapSize;
        let x_2939 : vec4<f32> = u_xlat12;
        u_xlat13 = ((vec4<f32>(x_2933.x, x_2933.y, x_2933.x, x_2933.y) * vec4<f32>(x_2936.x, x_2936.y, x_2936.x, x_2936.y)) + vec4<f32>(x_2939.x, x_2939.y, x_2939.z, x_2939.y));
        let x_2942 : vec3<f32> = u_xlat32;
        let x_2945 : vec4<f32> = x_394.x_MainLightShadowmapSize;
        let x_2948 : vec4<f32> = u_xlat12;
        let x_2950 : vec2<f32> = ((vec2<f32>(x_2942.x, x_2942.y) * vec2<f32>(x_2945.x, x_2945.y)) + vec2<f32>(x_2948.w, x_2948.y));
        let x_2951 : vec4<f32> = u_xlat14;
        u_xlat14 = vec4<f32>(x_2950.x, x_2950.y, x_2951.z, x_2951.w);
        let x_2954 : f32 = u_xlat12.y;
        u_xlat9.y = x_2954;
        let x_2957 : f32 = u_xlat11.z;
        u_xlat12.y = x_2957;
        let x_2959 : vec3<f32> = u_xlat32;
        let x_2962 : vec4<f32> = x_394.x_MainLightShadowmapSize;
        let x_2965 : vec4<f32> = u_xlat12;
        u_xlat15 = ((vec4<f32>(x_2959.x, x_2959.y, x_2959.x, x_2959.y) * vec4<f32>(x_2962.x, x_2962.y, x_2962.x, x_2962.y)) + vec4<f32>(x_2965.x, x_2965.y, x_2965.z, x_2965.y));
        let x_2969 : vec3<f32> = u_xlat32;
        let x_2972 : vec4<f32> = x_394.x_MainLightShadowmapSize;
        let x_2975 : vec4<f32> = u_xlat12;
        u_xlat64 = ((vec2<f32>(x_2969.x, x_2969.y) * vec2<f32>(x_2972.x, x_2972.y)) + vec2<f32>(x_2975.w, x_2975.y));
        let x_2979 : f32 = u_xlat12.y;
        u_xlat9.z = x_2979;
        let x_2981 : vec3<f32> = u_xlat32;
        let x_2984 : vec4<f32> = x_394.x_MainLightShadowmapSize;
        let x_2987 : vec4<f32> = u_xlat9;
        u_xlat16 = ((vec4<f32>(x_2981.x, x_2981.y, x_2981.x, x_2981.y) * vec4<f32>(x_2984.x, x_2984.y, x_2984.x, x_2984.y)) + vec4<f32>(x_2987.x, x_2987.y, x_2987.x, x_2987.z));
        let x_2991 : f32 = u_xlat11.w;
        u_xlat12.y = x_2991;
        let x_2993 : vec3<f32> = u_xlat32;
        let x_2996 : vec4<f32> = x_394.x_MainLightShadowmapSize;
        let x_2999 : vec4<f32> = u_xlat12;
        u_xlat17 = ((vec4<f32>(x_2993.x, x_2993.y, x_2993.x, x_2993.y) * vec4<f32>(x_2996.x, x_2996.y, x_2996.x, x_2996.y)) + vec4<f32>(x_2999.x, x_2999.y, x_2999.z, x_2999.y));
        let x_3002 : vec3<f32> = u_xlat32;
        let x_3005 : vec4<f32> = x_394.x_MainLightShadowmapSize;
        let x_3008 : vec4<f32> = u_xlat12;
        let x_3010 : vec2<f32> = ((vec2<f32>(x_3002.x, x_3002.y) * vec2<f32>(x_3005.x, x_3005.y)) + vec2<f32>(x_3008.w, x_3008.y));
        let x_3011 : vec3<f32> = u_xlat34;
        u_xlat34 = vec3<f32>(x_3010.x, x_3010.y, x_3011.z);
        let x_3014 : f32 = u_xlat12.y;
        u_xlat9.w = x_3014;
        let x_3016 : vec3<f32> = u_xlat32;
        let x_3019 : vec4<f32> = x_394.x_MainLightShadowmapSize;
        let x_3022 : vec4<f32> = u_xlat9;
        let x_3024 : vec2<f32> = ((vec2<f32>(x_3016.x, x_3016.y) * vec2<f32>(x_3019.x, x_3019.y)) + vec2<f32>(x_3022.x, x_3022.w));
        let x_3025 : vec4<f32> = u_xlat18;
        u_xlat18 = vec4<f32>(x_3024.x, x_3024.y, x_3025.z, x_3025.w);
        let x_3027 : vec4<f32> = u_xlat12;
        let x_3028 : vec3<f32> = vec3<f32>(x_3027.x, x_3027.z, x_3027.w);
        let x_3029 : vec4<f32> = u_xlat11;
        u_xlat11 = vec4<f32>(x_3028.x, x_3029.y, x_3028.y, x_3028.z);
        let x_3031 : vec3<f32> = u_xlat32;
        let x_3034 : vec4<f32> = x_394.x_MainLightShadowmapSize;
        let x_3037 : vec4<f32> = u_xlat11;
        u_xlat12 = ((vec4<f32>(x_3031.x, x_3031.y, x_3031.x, x_3031.y) * vec4<f32>(x_3034.x, x_3034.y, x_3034.x, x_3034.y)) + vec4<f32>(x_3037.x, x_3037.y, x_3037.z, x_3037.y));
        let x_3040 : vec3<f32> = u_xlat32;
        let x_3043 : vec4<f32> = x_394.x_MainLightShadowmapSize;
        let x_3046 : vec4<f32> = u_xlat11;
        u_xlat61 = ((vec2<f32>(x_3040.x, x_3040.y) * vec2<f32>(x_3043.x, x_3043.y)) + vec2<f32>(x_3046.w, x_3046.y));
        let x_3050 : f32 = u_xlat9.x;
        u_xlat11.x = x_3050;
        let x_3052 : vec3<f32> = u_xlat32;
        let x_3055 : vec4<f32> = x_394.x_MainLightShadowmapSize;
        let x_3058 : vec4<f32> = u_xlat11;
        let x_3060 : vec2<f32> = ((vec2<f32>(x_3052.x, x_3052.y) * vec2<f32>(x_3055.x, x_3055.y)) + vec2<f32>(x_3058.x, x_3058.y));
        let x_3061 : vec3<f32> = u_xlat32;
        u_xlat32 = vec3<f32>(x_3060.x, x_3060.y, x_3061.z);
        let x_3063 : vec4<f32> = u_xlat8;
        let x_3065 : vec4<f32> = u_xlat10;
        u_xlat19 = (vec4<f32>(x_3063.x, x_3063.x, x_3063.x, x_3063.x) * x_3065);
        let x_3067 : vec4<f32> = u_xlat8;
        let x_3069 : vec4<f32> = u_xlat10;
        u_xlat20 = (vec4<f32>(x_3067.y, x_3067.y, x_3067.y, x_3067.y) * x_3069);
        let x_3071 : vec4<f32> = u_xlat8;
        let x_3073 : vec4<f32> = u_xlat10;
        u_xlat21 = (vec4<f32>(x_3071.z, x_3071.z, x_3071.z, x_3071.z) * x_3073);
        let x_3075 : vec4<f32> = u_xlat8;
        let x_3077 : vec4<f32> = u_xlat10;
        u_xlat8 = (vec4<f32>(x_3075.w, x_3075.w, x_3075.w, x_3075.w) * x_3077);
        let x_3080 : vec4<f32> = u_xlat13;
        let x_3081 : vec2<f32> = vec2<f32>(x_3080.x, x_3080.y);
        let x_3083 : f32 = u_xlat2.z;
        txVec43 = vec3<f32>(x_3081.x, x_3081.y, x_3083);
        let x_3090 : vec3<f32> = txVec43;
        let x_3092 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_LinearClampCompare, x_3090.xy, x_3090.z);
        u_xlat82 = x_3092;
        let x_3094 : vec4<f32> = u_xlat13;
        let x_3095 : vec2<f32> = vec2<f32>(x_3094.z, x_3094.w);
        let x_3097 : f32 = u_xlat2.z;
        txVec44 = vec3<f32>(x_3095.x, x_3095.y, x_3097);
        let x_3104 : vec3<f32> = txVec44;
        let x_3106 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_LinearClampCompare, x_3104.xy, x_3104.z);
        u_xlat9.x = x_3106;
        let x_3109 : f32 = u_xlat9.x;
        let x_3111 : f32 = u_xlat19.y;
        u_xlat9.x = (x_3109 * x_3111);
        let x_3115 : f32 = u_xlat19.x;
        let x_3116 : f32 = u_xlat82;
        let x_3119 : f32 = u_xlat9.x;
        u_xlat82 = ((x_3115 * x_3116) + x_3119);
        let x_3122 : vec4<f32> = u_xlat14;
        let x_3123 : vec2<f32> = vec2<f32>(x_3122.x, x_3122.y);
        let x_3125 : f32 = u_xlat2.z;
        txVec45 = vec3<f32>(x_3123.x, x_3123.y, x_3125);
        let x_3132 : vec3<f32> = txVec45;
        let x_3134 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_LinearClampCompare, x_3132.xy, x_3132.z);
        u_xlat9.x = x_3134;
        let x_3137 : f32 = u_xlat19.z;
        let x_3139 : f32 = u_xlat9.x;
        let x_3141 : f32 = u_xlat82;
        u_xlat82 = ((x_3137 * x_3139) + x_3141);
        let x_3144 : vec4<f32> = u_xlat16;
        let x_3145 : vec2<f32> = vec2<f32>(x_3144.x, x_3144.y);
        let x_3147 : f32 = u_xlat2.z;
        txVec46 = vec3<f32>(x_3145.x, x_3145.y, x_3147);
        let x_3154 : vec3<f32> = txVec46;
        let x_3156 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_LinearClampCompare, x_3154.xy, x_3154.z);
        u_xlat9.x = x_3156;
        let x_3159 : f32 = u_xlat19.w;
        let x_3161 : f32 = u_xlat9.x;
        let x_3163 : f32 = u_xlat82;
        u_xlat82 = ((x_3159 * x_3161) + x_3163);
        let x_3166 : vec4<f32> = u_xlat15;
        let x_3167 : vec2<f32> = vec2<f32>(x_3166.x, x_3166.y);
        let x_3169 : f32 = u_xlat2.z;
        txVec47 = vec3<f32>(x_3167.x, x_3167.y, x_3169);
        let x_3176 : vec3<f32> = txVec47;
        let x_3178 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_LinearClampCompare, x_3176.xy, x_3176.z);
        u_xlat9.x = x_3178;
        let x_3181 : f32 = u_xlat20.x;
        let x_3183 : f32 = u_xlat9.x;
        let x_3185 : f32 = u_xlat82;
        u_xlat82 = ((x_3181 * x_3183) + x_3185);
        let x_3188 : vec4<f32> = u_xlat15;
        let x_3189 : vec2<f32> = vec2<f32>(x_3188.z, x_3188.w);
        let x_3191 : f32 = u_xlat2.z;
        txVec48 = vec3<f32>(x_3189.x, x_3189.y, x_3191);
        let x_3198 : vec3<f32> = txVec48;
        let x_3200 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_LinearClampCompare, x_3198.xy, x_3198.z);
        u_xlat9.x = x_3200;
        let x_3203 : f32 = u_xlat20.y;
        let x_3205 : f32 = u_xlat9.x;
        let x_3207 : f32 = u_xlat82;
        u_xlat82 = ((x_3203 * x_3205) + x_3207);
        let x_3210 : vec2<f32> = u_xlat64;
        let x_3212 : f32 = u_xlat2.z;
        txVec49 = vec3<f32>(x_3210.x, x_3210.y, x_3212);
        let x_3219 : vec3<f32> = txVec49;
        let x_3221 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_LinearClampCompare, x_3219.xy, x_3219.z);
        u_xlat9.x = x_3221;
        let x_3224 : f32 = u_xlat20.z;
        let x_3226 : f32 = u_xlat9.x;
        let x_3228 : f32 = u_xlat82;
        u_xlat82 = ((x_3224 * x_3226) + x_3228);
        let x_3231 : vec4<f32> = u_xlat16;
        let x_3232 : vec2<f32> = vec2<f32>(x_3231.z, x_3231.w);
        let x_3234 : f32 = u_xlat2.z;
        txVec50 = vec3<f32>(x_3232.x, x_3232.y, x_3234);
        let x_3241 : vec3<f32> = txVec50;
        let x_3243 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_LinearClampCompare, x_3241.xy, x_3241.z);
        u_xlat9.x = x_3243;
        let x_3246 : f32 = u_xlat20.w;
        let x_3248 : f32 = u_xlat9.x;
        let x_3250 : f32 = u_xlat82;
        u_xlat82 = ((x_3246 * x_3248) + x_3250);
        let x_3253 : vec4<f32> = u_xlat17;
        let x_3254 : vec2<f32> = vec2<f32>(x_3253.x, x_3253.y);
        let x_3256 : f32 = u_xlat2.z;
        txVec51 = vec3<f32>(x_3254.x, x_3254.y, x_3256);
        let x_3263 : vec3<f32> = txVec51;
        let x_3265 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_LinearClampCompare, x_3263.xy, x_3263.z);
        u_xlat9.x = x_3265;
        let x_3268 : f32 = u_xlat21.x;
        let x_3270 : f32 = u_xlat9.x;
        let x_3272 : f32 = u_xlat82;
        u_xlat82 = ((x_3268 * x_3270) + x_3272);
        let x_3275 : vec4<f32> = u_xlat17;
        let x_3276 : vec2<f32> = vec2<f32>(x_3275.z, x_3275.w);
        let x_3278 : f32 = u_xlat2.z;
        txVec52 = vec3<f32>(x_3276.x, x_3276.y, x_3278);
        let x_3285 : vec3<f32> = txVec52;
        let x_3287 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_LinearClampCompare, x_3285.xy, x_3285.z);
        u_xlat9.x = x_3287;
        let x_3290 : f32 = u_xlat21.y;
        let x_3292 : f32 = u_xlat9.x;
        let x_3294 : f32 = u_xlat82;
        u_xlat82 = ((x_3290 * x_3292) + x_3294);
        let x_3297 : vec3<f32> = u_xlat34;
        let x_3298 : vec2<f32> = vec2<f32>(x_3297.x, x_3297.y);
        let x_3300 : f32 = u_xlat2.z;
        txVec53 = vec3<f32>(x_3298.x, x_3298.y, x_3300);
        let x_3307 : vec3<f32> = txVec53;
        let x_3309 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_LinearClampCompare, x_3307.xy, x_3307.z);
        u_xlat9.x = x_3309;
        let x_3312 : f32 = u_xlat21.z;
        let x_3314 : f32 = u_xlat9.x;
        let x_3316 : f32 = u_xlat82;
        u_xlat82 = ((x_3312 * x_3314) + x_3316);
        let x_3319 : vec4<f32> = u_xlat18;
        let x_3320 : vec2<f32> = vec2<f32>(x_3319.x, x_3319.y);
        let x_3322 : f32 = u_xlat2.z;
        txVec54 = vec3<f32>(x_3320.x, x_3320.y, x_3322);
        let x_3329 : vec3<f32> = txVec54;
        let x_3331 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_LinearClampCompare, x_3329.xy, x_3329.z);
        u_xlat9.x = x_3331;
        let x_3334 : f32 = u_xlat21.w;
        let x_3336 : f32 = u_xlat9.x;
        let x_3338 : f32 = u_xlat82;
        u_xlat82 = ((x_3334 * x_3336) + x_3338);
        let x_3341 : vec4<f32> = u_xlat12;
        let x_3342 : vec2<f32> = vec2<f32>(x_3341.x, x_3341.y);
        let x_3344 : f32 = u_xlat2.z;
        txVec55 = vec3<f32>(x_3342.x, x_3342.y, x_3344);
        let x_3351 : vec3<f32> = txVec55;
        let x_3353 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_LinearClampCompare, x_3351.xy, x_3351.z);
        u_xlat9.x = x_3353;
        let x_3356 : f32 = u_xlat8.x;
        let x_3358 : f32 = u_xlat9.x;
        let x_3360 : f32 = u_xlat82;
        u_xlat82 = ((x_3356 * x_3358) + x_3360);
        let x_3363 : vec4<f32> = u_xlat12;
        let x_3364 : vec2<f32> = vec2<f32>(x_3363.z, x_3363.w);
        let x_3366 : f32 = u_xlat2.z;
        txVec56 = vec3<f32>(x_3364.x, x_3364.y, x_3366);
        let x_3373 : vec3<f32> = txVec56;
        let x_3375 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_LinearClampCompare, x_3373.xy, x_3373.z);
        u_xlat8.x = x_3375;
        let x_3378 : f32 = u_xlat8.y;
        let x_3380 : f32 = u_xlat8.x;
        let x_3382 : f32 = u_xlat82;
        u_xlat82 = ((x_3378 * x_3380) + x_3382);
        let x_3385 : vec2<f32> = u_xlat61;
        let x_3387 : f32 = u_xlat2.z;
        txVec57 = vec3<f32>(x_3385.x, x_3385.y, x_3387);
        let x_3394 : vec3<f32> = txVec57;
        let x_3396 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_LinearClampCompare, x_3394.xy, x_3394.z);
        u_xlat8.x = x_3396;
        let x_3399 : f32 = u_xlat8.z;
        let x_3401 : f32 = u_xlat8.x;
        let x_3403 : f32 = u_xlat82;
        u_xlat82 = ((x_3399 * x_3401) + x_3403);
        let x_3406 : vec3<f32> = u_xlat32;
        let x_3407 : vec2<f32> = vec2<f32>(x_3406.x, x_3406.y);
        let x_3409 : f32 = u_xlat2.z;
        txVec58 = vec3<f32>(x_3407.x, x_3407.y, x_3409);
        let x_3416 : vec3<f32> = txVec58;
        let x_3418 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_LinearClampCompare, x_3416.xy, x_3416.z);
        u_xlat32.x = x_3418;
        let x_3421 : f32 = u_xlat8.w;
        let x_3423 : f32 = u_xlat32.x;
        let x_3425 : f32 = u_xlat82;
        u_xlat0.x = ((x_3421 * x_3423) + x_3425);
      }
    }
  } else {
    let x_3430 : vec4<f32> = u_xlat2;
    let x_3431 : vec2<f32> = vec2<f32>(x_3430.x, x_3430.y);
    let x_3433 : f32 = u_xlat2.z;
    txVec59 = vec3<f32>(x_3431.x, x_3431.y, x_3433);
    let x_3440 : vec3<f32> = txVec59;
    let x_3442 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_LinearClampCompare, x_3440.xy, x_3440.z);
    u_xlat0.x = x_3442;
  }
  let x_3445 : f32 = u_xlat0.x;
  let x_3447 : f32 = x_394.x_MainLightShadowParams.x;
  let x_3449 : f32 = u_xlat77;
  u_xlat0.x = ((x_3445 * x_3447) + x_3449);
  let x_3452 : bool = u_xlatb3;
  if (x_3452) {
    x_3453 = 1.0f;
  } else {
    let x_3458 : f32 = u_xlat0.x;
    x_3453 = x_3458;
  }
  let x_3459 : f32 = x_3453;
  u_xlat0.x = x_3459;
  let x_3461 : vec3<f32> = vs_INTERP8;
  let x_3463 : vec3<f32> = x_149.x_WorldSpaceCameraPos;
  let x_3465 : vec3<f32> = (x_3461 + -(x_3463));
  let x_3466 : vec4<f32> = u_xlat2;
  u_xlat2 = vec4<f32>(x_3465.x, x_3465.y, x_3465.z, x_3466.w);
  let x_3468 : vec4<f32> = u_xlat2;
  let x_3470 : vec4<f32> = u_xlat2;
  u_xlat2.x = dot(vec3<f32>(x_3468.x, x_3468.y, x_3468.z), vec3<f32>(x_3470.x, x_3470.y, x_3470.z));
  let x_3476 : f32 = u_xlat2.x;
  let x_3478 : f32 = x_394.x_MainLightShadowParams.z;
  let x_3481 : f32 = x_394.x_MainLightShadowParams.w;
  u_xlat27.x = ((x_3476 * x_3478) + x_3481);
  let x_3485 : f32 = u_xlat27.x;
  u_xlat27.x = clamp(x_3485, 0.0f, 1.0f);
  let x_3490 : f32 = u_xlat0.x;
  u_xlat52 = (-(x_3490) + 1.0f);
  let x_3494 : f32 = u_xlat27.x;
  let x_3495 : f32 = u_xlat52;
  let x_3498 : f32 = u_xlat0.x;
  u_xlat0.x = ((x_3494 * x_3495) + x_3498);
  let x_3501 : vec3<f32> = u_xlat5;
  let x_3503 : vec3<f32> = u_xlat25;
  u_xlat27.x = dot(-(x_3501), x_3503);
  let x_3507 : f32 = u_xlat27.x;
  let x_3509 : f32 = u_xlat27.x;
  u_xlat27.x = (x_3507 + x_3509);
  let x_3512 : vec3<f32> = u_xlat25;
  let x_3513 : vec3<f32> = u_xlat27;
  let x_3517 : vec3<f32> = u_xlat5;
  u_xlat27 = ((x_3512 * -(vec3<f32>(x_3513.x, x_3513.x, x_3513.x))) + -(x_3517));
  let x_3520 : vec3<f32> = u_xlat25;
  let x_3521 : vec3<f32> = u_xlat5;
  u_xlat3.x = dot(x_3520, x_3521);
  let x_3525 : f32 = u_xlat3.x;
  u_xlat3.x = clamp(x_3525, 0.0f, 1.0f);
  let x_3529 : f32 = u_xlat3.x;
  u_xlat3.x = (-(x_3529) + 1.0f);
  let x_3534 : f32 = u_xlat3.x;
  let x_3536 : f32 = u_xlat3.x;
  u_xlat3.x = (x_3534 * x_3536);
  let x_3540 : f32 = u_xlat3.x;
  let x_3542 : f32 = u_xlat3.x;
  u_xlat3.x = (x_3540 * x_3542);
  let x_3546 : f32 = u_xlat53.x;
  u_xlat32.x = ((-(x_3546) * 0.69999998807907104492f) + 1.70000004768371582031f);
  let x_3554 : f32 = u_xlat53.x;
  let x_3556 : f32 = u_xlat32.x;
  u_xlat53.x = (x_3554 * x_3556);
  let x_3560 : f32 = u_xlat53.x;
  u_xlat53.x = (x_3560 * 6.0f);
  let x_3572 : vec3<f32> = u_xlat27;
  let x_3574 : f32 = u_xlat53.x;
  let x_3575 : vec4<f32> = textureSampleLevel(unity_SpecCube0, samplerunity_SpecCube0, x_3572, x_3574);
  u_xlat8 = x_3575;
  let x_3577 : f32 = u_xlat8.w;
  u_xlat27.x = (x_3577 + -1.0f);
  let x_3581 : f32 = x_83.unity_SpecCube0_HDR.w;
  let x_3583 : f32 = u_xlat27.x;
  u_xlat27.x = ((x_3581 * x_3583) + 1.0f);
  let x_3588 : f32 = u_xlat27.x;
  u_xlat27.x = max(x_3588, 0.0f);
  let x_3592 : f32 = u_xlat27.x;
  u_xlat27.x = log2(x_3592);
  let x_3596 : f32 = u_xlat27.x;
  let x_3598 : f32 = x_83.unity_SpecCube0_HDR.y;
  u_xlat27.x = (x_3596 * x_3598);
  let x_3602 : f32 = u_xlat27.x;
  u_xlat27.x = exp2(x_3602);
  let x_3606 : f32 = u_xlat27.x;
  let x_3608 : f32 = x_83.unity_SpecCube0_HDR.x;
  u_xlat27.x = (x_3606 * x_3608);
  let x_3611 : vec4<f32> = u_xlat8;
  let x_3613 : vec3<f32> = u_xlat27;
  u_xlat27 = (vec3<f32>(x_3611.x, x_3611.y, x_3611.z) * vec3<f32>(x_3613.x, x_3613.x, x_3613.x));
  let x_3616 : f32 = u_xlat78;
  let x_3618 : f32 = u_xlat78;
  u_xlat53 = ((vec2<f32>(x_3616, x_3616) * vec2<f32>(x_3618, x_3618)) + vec2<f32>(-1.0f, 1.0f));
  let x_3624 : f32 = u_xlat53.y;
  u_xlat78 = (1.0f / x_3624);
  let x_3626 : f32 = u_xlat80;
  u_xlat80 = (x_3626 + -0.03999999910593032837f);
  let x_3630 : f32 = u_xlat3.x;
  let x_3631 : f32 = u_xlat80;
  u_xlat3.x = ((x_3630 * x_3631) + 0.03999999910593032837f);
  let x_3637 : f32 = u_xlat3.x;
  let x_3638 : f32 = u_xlat78;
  u_xlat3.x = (x_3637 * x_3638);
  let x_3641 : vec3<f32> = u_xlat27;
  let x_3642 : vec4<f32> = u_xlat3;
  u_xlat27 = (x_3641 * vec3<f32>(x_3642.x, x_3642.x, x_3642.x));
  let x_3645 : vec4<f32> = u_xlat4;
  let x_3647 : vec4<f32> = u_xlat6;
  let x_3650 : vec3<f32> = u_xlat27;
  u_xlat27 = ((vec3<f32>(x_3645.x, x_3645.y, x_3645.z) * vec3<f32>(x_3647.x, x_3647.y, x_3647.z)) + x_3650);
  let x_3653 : f32 = u_xlat0.x;
  let x_3655 : f32 = x_83.unity_LightData.z;
  u_xlat0.x = (x_3653 * x_3655);
  let x_3658 : vec3<f32> = u_xlat25;
  let x_3660 : vec4<f32> = x_149.x_MainLightPosition;
  u_xlat3.x = dot(x_3658, vec3<f32>(x_3660.x, x_3660.y, x_3660.z));
  let x_3665 : f32 = u_xlat3.x;
  u_xlat3.x = clamp(x_3665, 0.0f, 1.0f);
  let x_3669 : f32 = u_xlat0.x;
  let x_3671 : f32 = u_xlat3.x;
  u_xlat0.x = (x_3669 * x_3671);
  let x_3674 : vec3<f32> = u_xlat0;
  let x_3677 : vec4<f32> = x_149.x_MainLightColor;
  let x_3679 : vec3<f32> = (vec3<f32>(x_3674.x, x_3674.x, x_3674.x) * vec3<f32>(x_3677.x, x_3677.y, x_3677.z));
  let x_3680 : vec4<f32> = u_xlat4;
  u_xlat4 = vec4<f32>(x_3679.x, x_3679.y, x_3679.z, x_3680.w);
  let x_3682 : vec3<f32> = u_xlat5;
  let x_3684 : vec4<f32> = x_149.x_MainLightPosition;
  u_xlat32 = (x_3682 + vec3<f32>(x_3684.x, x_3684.y, x_3684.z));
  let x_3687 : vec3<f32> = u_xlat32;
  let x_3688 : vec3<f32> = u_xlat32;
  u_xlat0.x = dot(x_3687, x_3688);
  let x_3692 : f32 = u_xlat0.x;
  u_xlat0.x = max(x_3692, 1.17549435e-38f);
  let x_3696 : f32 = u_xlat0.x;
  u_xlat0.x = inverseSqrt(x_3696);
  let x_3699 : vec3<f32> = u_xlat0;
  let x_3701 : vec3<f32> = u_xlat32;
  u_xlat32 = (vec3<f32>(x_3699.x, x_3699.x, x_3699.x) * x_3701);
  let x_3703 : vec3<f32> = u_xlat25;
  let x_3704 : vec3<f32> = u_xlat32;
  u_xlat0.x = dot(x_3703, x_3704);
  let x_3708 : f32 = u_xlat0.x;
  u_xlat0.x = clamp(x_3708, 0.0f, 1.0f);
  let x_3712 : vec4<f32> = x_149.x_MainLightPosition;
  let x_3714 : vec3<f32> = u_xlat32;
  u_xlat3.x = dot(vec3<f32>(x_3712.x, x_3712.y, x_3712.z), x_3714);
  let x_3718 : f32 = u_xlat3.x;
  u_xlat3.x = clamp(x_3718, 0.0f, 1.0f);
  let x_3722 : f32 = u_xlat0.x;
  let x_3724 : f32 = u_xlat0.x;
  u_xlat0.x = (x_3722 * x_3724);
  let x_3728 : f32 = u_xlat0.x;
  let x_3730 : f32 = u_xlat53.x;
  u_xlat0.x = ((x_3728 * x_3730) + 1.00001001358032226562f);
  let x_3736 : f32 = u_xlat3.x;
  let x_3738 : f32 = u_xlat3.x;
  u_xlat3.x = (x_3736 * x_3738);
  let x_3742 : f32 = u_xlat0.x;
  let x_3744 : f32 = u_xlat0.x;
  u_xlat0.x = (x_3742 * x_3744);
  let x_3748 : f32 = u_xlat3.x;
  u_xlat3.x = max(x_3748, 0.10000000149011611938f);
  let x_3753 : f32 = u_xlat0.x;
  let x_3755 : f32 = u_xlat3.x;
  u_xlat0.x = (x_3753 * x_3755);
  let x_3758 : f32 = u_xlat81;
  let x_3760 : f32 = u_xlat0.x;
  u_xlat0.x = (x_3758 * x_3760);
  let x_3763 : f32 = u_xlat79;
  let x_3765 : f32 = u_xlat0.x;
  u_xlat0.x = (x_3763 / x_3765);
  let x_3768 : vec3<f32> = u_xlat0;
  let x_3772 : vec4<f32> = u_xlat6;
  u_xlat32 = ((vec3<f32>(x_3768.x, x_3768.x, x_3768.x) * vec3<f32>(0.03999999910593032837f, 0.03999999910593032837f, 0.03999999910593032837f)) + vec3<f32>(x_3772.x, x_3772.y, x_3772.z));
  let x_3775 : vec4<f32> = u_xlat4;
  let x_3777 : vec3<f32> = u_xlat32;
  let x_3778 : vec3<f32> = (vec3<f32>(x_3775.x, x_3775.y, x_3775.z) * x_3777);
  let x_3779 : vec4<f32> = u_xlat4;
  u_xlat4 = vec4<f32>(x_3778.x, x_3778.y, x_3778.z, x_3779.w);
  let x_3782 : f32 = x_149.x_AdditionalLightsCount.x;
  let x_3784 : f32 = x_83.unity_LightData.y;
  u_xlat0.x = min(x_3782, x_3784);
  let x_3788 : f32 = u_xlat0.x;
  u_xlatu0 = bitcast<u32>(i32(x_3788));
  let x_3792 : f32 = u_xlat2.x;
  let x_3795 : f32 = x_394.x_AdditionalShadowFadeParams.x;
  let x_3798 : f32 = x_394.x_AdditionalShadowFadeParams.y;
  u_xlat2.x = ((x_3792 * x_3795) + x_3798);
  let x_3802 : f32 = u_xlat2.x;
  u_xlat2.x = clamp(x_3802, 0.0f, 1.0f);
  u_xlat32.x = 0.0f;
  u_xlat32.y = 0.0f;
  u_xlat32.z = 0.0f;
  u_xlatu_loop_1 = 0u;
  loop {
    let x_3814 : u32 = u_xlatu_loop_1;
    let x_3815 : u32 = u_xlatu0;
    if ((x_3814 < x_3815)) {
    } else {
      break;
    }
    let x_3817 : u32 = u_xlatu_loop_1;
    u_xlatu78 = (x_3817 >> 2u);
    let x_3820 : u32 = u_xlatu_loop_1;
    u_xlati80 = bitcast<i32>((x_3820 & 3u));
    let x_3823 : u32 = u_xlatu78;
    let x_3826 : vec4<f32> = x_83.unity_LightIndices[bitcast<i32>(x_3823)];
    let x_3836 : i32 = u_xlati80;
    indexable = array<vec4<u32>, 4u>(vec4<u32>(1065353216u, 0u, 0u, 0u), vec4<u32>(0u, 1065353216u, 0u, 0u), vec4<u32>(0u, 0u, 1065353216u, 0u), vec4<u32>(0u, 0u, 0u, 1065353216u));
    let x_3841 : vec4<u32> = indexable[x_3836];
    u_xlat78 = dot(x_3826, bitcast<vec4<f32>>(x_3841));
    let x_3845 : f32 = u_xlat78;
    u_xlati78 = i32(x_3845);
    let x_3847 : vec3<f32> = vs_INTERP8;
    let x_3858 : i32 = u_xlati78;
    let x_3860 : vec4<f32> = x_3857.x_AdditionalLightsPosition[x_3858];
    let x_3863 : i32 = u_xlati78;
    let x_3865 : vec4<f32> = x_3857.x_AdditionalLightsPosition[x_3863];
    let x_3867 : vec3<f32> = ((-(x_3847) * vec3<f32>(x_3860.w, x_3860.w, x_3860.w)) + vec3<f32>(x_3865.x, x_3865.y, x_3865.z));
    let x_3868 : vec4<f32> = u_xlat8;
    u_xlat8 = vec4<f32>(x_3867.x, x_3867.y, x_3867.z, x_3868.w);
    let x_3870 : vec4<f32> = u_xlat8;
    let x_3872 : vec4<f32> = u_xlat8;
    u_xlat80 = dot(vec3<f32>(x_3870.x, x_3870.y, x_3870.z), vec3<f32>(x_3872.x, x_3872.y, x_3872.z));
    let x_3875 : f32 = u_xlat80;
    u_xlat80 = max(x_3875, 0.00006103515625f);
    let x_3879 : f32 = u_xlat80;
    u_xlat83 = inverseSqrt(x_3879);
    let x_3881 : f32 = u_xlat83;
    let x_3883 : vec4<f32> = u_xlat8;
    let x_3885 : vec3<f32> = (vec3<f32>(x_3881, x_3881, x_3881) * vec3<f32>(x_3883.x, x_3883.y, x_3883.z));
    let x_3886 : vec4<f32> = u_xlat9;
    u_xlat9 = vec4<f32>(x_3885.x, x_3885.y, x_3885.z, x_3886.w);
    let x_3889 : f32 = u_xlat80;
    u_xlat84 = (1.0f / x_3889);
    let x_3891 : f32 = u_xlat80;
    let x_3892 : i32 = u_xlati78;
    let x_3894 : f32 = x_3857.x_AdditionalLightsAttenuation[x_3892].x;
    u_xlat80 = (x_3891 * x_3894);
    let x_3896 : f32 = u_xlat80;
    let x_3898 : f32 = u_xlat80;
    u_xlat80 = ((-(x_3896) * x_3898) + 1.0f);
    let x_3901 : f32 = u_xlat80;
    u_xlat80 = max(x_3901, 0.0f);
    let x_3903 : f32 = u_xlat80;
    let x_3904 : f32 = u_xlat80;
    u_xlat80 = (x_3903 * x_3904);
    let x_3906 : f32 = u_xlat80;
    let x_3907 : f32 = u_xlat84;
    u_xlat80 = (x_3906 * x_3907);
    let x_3909 : i32 = u_xlati78;
    let x_3911 : vec4<f32> = x_3857.x_AdditionalLightsSpotDir[x_3909];
    let x_3913 : vec4<f32> = u_xlat9;
    u_xlat84 = dot(vec3<f32>(x_3911.x, x_3911.y, x_3911.z), vec3<f32>(x_3913.x, x_3913.y, x_3913.z));
    let x_3916 : f32 = u_xlat84;
    let x_3917 : i32 = u_xlati78;
    let x_3919 : f32 = x_3857.x_AdditionalLightsAttenuation[x_3917].z;
    let x_3921 : i32 = u_xlati78;
    let x_3923 : f32 = x_3857.x_AdditionalLightsAttenuation[x_3921].w;
    u_xlat84 = ((x_3916 * x_3919) + x_3923);
    let x_3925 : f32 = u_xlat84;
    u_xlat84 = clamp(x_3925, 0.0f, 1.0f);
    let x_3927 : f32 = u_xlat84;
    let x_3928 : f32 = u_xlat84;
    u_xlat84 = (x_3927 * x_3928);
    let x_3930 : f32 = u_xlat80;
    let x_3931 : f32 = u_xlat84;
    u_xlat80 = (x_3930 * x_3931);
    let x_3935 : i32 = u_xlati78;
    let x_3937 : f32 = x_394.x_AdditionalShadowParams[x_3935].w;
    u_xlati84 = i32(x_3937);
    let x_3942 : i32 = u_xlati84;
    u_xlatb10.x = (x_3942 >= 0i);
    let x_3946 : bool = u_xlatb10.x;
    if (x_3946) {
      let x_3950 : i32 = u_xlati78;
      let x_3952 : f32 = x_394.x_AdditionalShadowParams[x_3950].z;
      u_xlatb10.x = any(!((vec4<f32>(0.0f, 0.0f, 0.0f, 0.0f) == vec4<f32>(x_3952, x_3952, x_3952, x_3952))));
      let x_3958 : bool = u_xlatb10.x;
      if (x_3958) {
        let x_3961 : vec4<f32> = u_xlat9;
        let x_3964 : vec4<f32> = u_xlat9;
        let x_3967 : vec4<bool> = (abs(vec4<f32>(x_3961.z, x_3961.z, x_3961.y, x_3961.z)) >= abs(vec4<f32>(x_3964.x, x_3964.y, x_3964.x, x_3964.x)));
        u_xlatb10 = vec3<bool>(x_3967.x, x_3967.y, x_3967.z);
        let x_3970 : bool = u_xlatb10.y;
        let x_3972 : bool = u_xlatb10.x;
        u_xlatb10.x = (x_3970 & x_3972);
        let x_3976 : vec4<f32> = u_xlat9;
        let x_3979 : vec4<bool> = (-(vec4<f32>(x_3976.z, x_3976.y, x_3976.x, x_3976.z)) < vec4<f32>(0.0f, 0.0f, 0.0f, 0.0f));
        u_xlatb11 = vec3<bool>(x_3979.x, x_3979.y, x_3979.z);
        let x_3982 : bool = u_xlatb11.x;
        u_xlat35.x = select(4.0f, 5.0f, x_3982);
        let x_3987 : bool = u_xlatb11.y;
        u_xlat35.z = select(2.0f, 3.0f, x_3987);
        let x_3991 : bool = u_xlatb11.z;
        u_xlat11.x = select(0.0f, 1.0f, x_3991);
        let x_3995 : bool = u_xlatb10.z;
        if (x_3995) {
          let x_4000 : f32 = u_xlat35.z;
          x_3996 = x_4000;
        } else {
          let x_4003 : f32 = u_xlat11.x;
          x_3996 = x_4003;
        }
        let x_4004 : f32 = x_3996;
        u_xlat60.x = x_4004;
        let x_4007 : bool = u_xlatb10.x;
        if (x_4007) {
          let x_4012 : f32 = u_xlat35.x;
          x_4008 = x_4012;
        } else {
          let x_4015 : f32 = u_xlat60.x;
          x_4008 = x_4015;
        }
        let x_4016 : f32 = x_4008;
        u_xlat10.x = x_4016;
        let x_4018 : i32 = u_xlati78;
        let x_4020 : f32 = x_394.x_AdditionalShadowParams[x_4018].w;
        u_xlat35.x = trunc(x_4020);
        let x_4024 : f32 = u_xlat10.x;
        let x_4026 : f32 = u_xlat35.x;
        u_xlat10.x = (x_4024 + x_4026);
        let x_4030 : f32 = u_xlat10.x;
        u_xlati84 = i32(x_4030);
      }
      let x_4032 : i32 = u_xlati84;
      u_xlati84 = (x_4032 << bitcast<u32>(2i));
      let x_4034 : vec3<f32> = vs_INTERP8;
      let x_4037 : i32 = u_xlati84;
      let x_4040 : i32 = u_xlati84;
      let x_4044 : vec4<f32> = x_394.x_AdditionalLightsWorldToShadow[((x_4037 + 1i) / 4i)][((x_4040 + 1i) % 4i)];
      u_xlat10 = (vec4<f32>(x_4034.y, x_4034.y, x_4034.y, x_4034.y) * x_4044);
      let x_4046 : i32 = u_xlati84;
      let x_4048 : i32 = u_xlati84;
      let x_4051 : vec4<f32> = x_394.x_AdditionalLightsWorldToShadow[(x_4046 / 4i)][(x_4048 % 4i)];
      let x_4052 : vec3<f32> = vs_INTERP8;
      let x_4055 : vec4<f32> = u_xlat10;
      u_xlat10 = ((x_4051 * vec4<f32>(x_4052.x, x_4052.x, x_4052.x, x_4052.x)) + x_4055);
      let x_4057 : i32 = u_xlati84;
      let x_4060 : i32 = u_xlati84;
      let x_4064 : vec4<f32> = x_394.x_AdditionalLightsWorldToShadow[((x_4057 + 2i) / 4i)][((x_4060 + 2i) % 4i)];
      let x_4065 : vec3<f32> = vs_INTERP8;
      let x_4068 : vec4<f32> = u_xlat10;
      u_xlat10 = ((x_4064 * vec4<f32>(x_4065.z, x_4065.z, x_4065.z, x_4065.z)) + x_4068);
      let x_4070 : vec4<f32> = u_xlat10;
      let x_4071 : i32 = u_xlati84;
      let x_4074 : i32 = u_xlati84;
      let x_4078 : vec4<f32> = x_394.x_AdditionalLightsWorldToShadow[((x_4071 + 3i) / 4i)][((x_4074 + 3i) % 4i)];
      u_xlat10 = (x_4070 + x_4078);
      let x_4080 : vec4<f32> = u_xlat10;
      let x_4082 : vec4<f32> = u_xlat10;
      let x_4084 : vec3<f32> = (vec3<f32>(x_4080.x, x_4080.y, x_4080.z) / vec3<f32>(x_4082.w, x_4082.w, x_4082.w));
      let x_4085 : vec4<f32> = u_xlat10;
      u_xlat10 = vec4<f32>(x_4084.x, x_4084.y, x_4084.z, x_4085.w);
      let x_4088 : i32 = u_xlati78;
      let x_4090 : f32 = x_394.x_AdditionalShadowParams[x_4088].y;
      u_xlatb84 = (0.0f < x_4090);
      let x_4092 : bool = u_xlatb84;
      if (x_4092) {
        let x_4095 : i32 = u_xlati78;
        let x_4097 : f32 = x_394.x_AdditionalShadowParams[x_4095].y;
        u_xlatb84 = (1.0f == x_4097);
        let x_4099 : bool = u_xlatb84;
        if (x_4099) {
          let x_4102 : vec4<f32> = u_xlat10;
          let x_4106 : vec4<f32> = x_394.x_AdditionalShadowOffset0;
          u_xlat11 = (vec4<f32>(x_4102.x, x_4102.y, x_4102.x, x_4102.y) + x_4106);
          let x_4109 : vec4<f32> = u_xlat11;
          let x_4110 : vec2<f32> = vec2<f32>(x_4109.x, x_4109.y);
          let x_4112 : f32 = u_xlat10.z;
          txVec60 = vec3<f32>(x_4110.x, x_4110.y, x_4112);
          let x_4120 : vec3<f32> = txVec60;
          let x_4122 : f32 = textureSampleCompareLevel(x_AdditionalLightsShadowmapTexture, sampler_LinearClampCompare, x_4120.xy, x_4120.z);
          u_xlat12.x = x_4122;
          let x_4125 : vec4<f32> = u_xlat11;
          let x_4126 : vec2<f32> = vec2<f32>(x_4125.z, x_4125.w);
          let x_4128 : f32 = u_xlat10.z;
          txVec61 = vec3<f32>(x_4126.x, x_4126.y, x_4128);
          let x_4135 : vec3<f32> = txVec61;
          let x_4137 : f32 = textureSampleCompareLevel(x_AdditionalLightsShadowmapTexture, sampler_LinearClampCompare, x_4135.xy, x_4135.z);
          u_xlat12.y = x_4137;
          let x_4139 : vec4<f32> = u_xlat10;
          let x_4143 : vec4<f32> = x_394.x_AdditionalShadowOffset1;
          u_xlat11 = (vec4<f32>(x_4139.x, x_4139.y, x_4139.x, x_4139.y) + x_4143);
          let x_4146 : vec4<f32> = u_xlat11;
          let x_4147 : vec2<f32> = vec2<f32>(x_4146.x, x_4146.y);
          let x_4149 : f32 = u_xlat10.z;
          txVec62 = vec3<f32>(x_4147.x, x_4147.y, x_4149);
          let x_4156 : vec3<f32> = txVec62;
          let x_4158 : f32 = textureSampleCompareLevel(x_AdditionalLightsShadowmapTexture, sampler_LinearClampCompare, x_4156.xy, x_4156.z);
          u_xlat12.z = x_4158;
          let x_4161 : vec4<f32> = u_xlat11;
          let x_4162 : vec2<f32> = vec2<f32>(x_4161.z, x_4161.w);
          let x_4164 : f32 = u_xlat10.z;
          txVec63 = vec3<f32>(x_4162.x, x_4162.y, x_4164);
          let x_4171 : vec3<f32> = txVec63;
          let x_4173 : f32 = textureSampleCompareLevel(x_AdditionalLightsShadowmapTexture, sampler_LinearClampCompare, x_4171.xy, x_4171.z);
          u_xlat12.w = x_4173;
          let x_4175 : vec4<f32> = u_xlat12;
          u_xlat84 = dot(x_4175, vec4<f32>(0.25f, 0.25f, 0.25f, 0.25f));
        } else {
          let x_4179 : i32 = u_xlati78;
          let x_4181 : f32 = x_394.x_AdditionalShadowParams[x_4179].y;
          u_xlatb85 = (2.0f == x_4181);
          let x_4183 : bool = u_xlatb85;
          if (x_4183) {
            let x_4186 : vec4<f32> = u_xlat10;
            let x_4190 : vec4<f32> = x_394.x_AdditionalShadowmapSize;
            let x_4193 : vec2<f32> = ((vec2<f32>(x_4186.x, x_4186.y) * vec2<f32>(x_4190.z, x_4190.w)) + vec2<f32>(0.5f, 0.5f));
            let x_4194 : vec4<f32> = u_xlat11;
            u_xlat11 = vec4<f32>(x_4193.x, x_4193.y, x_4194.z, x_4194.w);
            let x_4196 : vec4<f32> = u_xlat11;
            let x_4198 : vec2<f32> = floor(vec2<f32>(x_4196.x, x_4196.y));
            let x_4199 : vec4<f32> = u_xlat11;
            u_xlat11 = vec4<f32>(x_4198.x, x_4198.y, x_4199.z, x_4199.w);
            let x_4201 : vec4<f32> = u_xlat10;
            let x_4204 : vec4<f32> = x_394.x_AdditionalShadowmapSize;
            let x_4207 : vec4<f32> = u_xlat11;
            u_xlat61 = ((vec2<f32>(x_4201.x, x_4201.y) * vec2<f32>(x_4204.z, x_4204.w)) + -(vec2<f32>(x_4207.x, x_4207.y)));
            let x_4211 : vec2<f32> = u_xlat61;
            u_xlat12 = (vec4<f32>(x_4211.x, x_4211.x, x_4211.y, x_4211.y) + vec4<f32>(0.5f, 1.0f, 0.5f, 1.0f));
            let x_4214 : vec4<f32> = u_xlat12;
            let x_4216 : vec4<f32> = u_xlat12;
            u_xlat13 = (vec4<f32>(x_4214.x, x_4214.x, x_4214.z, x_4214.z) * vec4<f32>(x_4216.x, x_4216.x, x_4216.z, x_4216.z));
            let x_4219 : vec4<f32> = u_xlat13;
            let x_4221 : vec2<f32> = (vec2<f32>(x_4219.y, x_4219.w) * vec2<f32>(0.07999999821186065674f, 0.07999999821186065674f));
            let x_4222 : vec4<f32> = u_xlat12;
            u_xlat12 = vec4<f32>(x_4221.x, x_4222.y, x_4221.y, x_4222.w);
            let x_4224 : vec4<f32> = u_xlat13;
            let x_4227 : vec2<f32> = u_xlat61;
            let x_4229 : vec2<f32> = ((vec2<f32>(x_4224.x, x_4224.z) * vec2<f32>(0.5f, 0.5f)) + -(x_4227));
            let x_4230 : vec4<f32> = u_xlat13;
            u_xlat13 = vec4<f32>(x_4229.x, x_4229.y, x_4230.z, x_4230.w);
            let x_4233 : vec2<f32> = u_xlat61;
            u_xlat63 = (-(x_4233) + vec2<f32>(1.0f, 1.0f));
            let x_4236 : vec2<f32> = u_xlat61;
            let x_4237 : vec2<f32> = min(x_4236, vec2<f32>(0.0f, 0.0f));
            let x_4238 : vec4<f32> = u_xlat14;
            u_xlat14 = vec4<f32>(x_4237.x, x_4237.y, x_4238.z, x_4238.w);
            let x_4240 : vec4<f32> = u_xlat14;
            let x_4243 : vec4<f32> = u_xlat14;
            let x_4246 : vec2<f32> = u_xlat63;
            let x_4247 : vec2<f32> = ((-(vec2<f32>(x_4240.x, x_4240.y)) * vec2<f32>(x_4243.x, x_4243.y)) + x_4246);
            let x_4248 : vec4<f32> = u_xlat14;
            u_xlat14 = vec4<f32>(x_4247.x, x_4247.y, x_4248.z, x_4248.w);
            let x_4250 : vec2<f32> = u_xlat61;
            u_xlat61 = max(x_4250, vec2<f32>(0.0f, 0.0f));
            let x_4252 : vec2<f32> = u_xlat61;
            let x_4254 : vec2<f32> = u_xlat61;
            let x_4256 : vec4<f32> = u_xlat12;
            u_xlat61 = ((-(x_4252) * x_4254) + vec2<f32>(x_4256.y, x_4256.w));
            let x_4259 : vec4<f32> = u_xlat14;
            let x_4261 : vec2<f32> = (vec2<f32>(x_4259.x, x_4259.y) + vec2<f32>(1.0f, 1.0f));
            let x_4262 : vec4<f32> = u_xlat14;
            u_xlat14 = vec4<f32>(x_4261.x, x_4261.y, x_4262.z, x_4262.w);
            let x_4264 : vec2<f32> = u_xlat61;
            u_xlat61 = (x_4264 + vec2<f32>(1.0f, 1.0f));
            let x_4266 : vec4<f32> = u_xlat13;
            let x_4268 : vec2<f32> = (vec2<f32>(x_4266.x, x_4266.y) * vec2<f32>(0.15999999642372131348f, 0.15999999642372131348f));
            let x_4269 : vec4<f32> = u_xlat15;
            u_xlat15 = vec4<f32>(x_4268.x, x_4268.y, x_4269.z, x_4269.w);
            let x_4271 : vec2<f32> = u_xlat63;
            let x_4272 : vec2<f32> = (x_4271 * vec2<f32>(0.15999999642372131348f, 0.15999999642372131348f));
            let x_4273 : vec4<f32> = u_xlat13;
            u_xlat13 = vec4<f32>(x_4272.x, x_4272.y, x_4273.z, x_4273.w);
            let x_4275 : vec4<f32> = u_xlat14;
            let x_4277 : vec2<f32> = (vec2<f32>(x_4275.x, x_4275.y) * vec2<f32>(0.15999999642372131348f, 0.15999999642372131348f));
            let x_4278 : vec4<f32> = u_xlat14;
            u_xlat14 = vec4<f32>(x_4277.x, x_4277.y, x_4278.z, x_4278.w);
            let x_4280 : vec2<f32> = u_xlat61;
            let x_4281 : vec2<f32> = (x_4280 * vec2<f32>(0.15999999642372131348f, 0.15999999642372131348f));
            let x_4282 : vec4<f32> = u_xlat16;
            u_xlat16 = vec4<f32>(x_4281.x, x_4281.y, x_4282.z, x_4282.w);
            let x_4284 : vec4<f32> = u_xlat12;
            u_xlat61 = (vec2<f32>(x_4284.y, x_4284.w) * vec2<f32>(0.15999999642372131348f, 0.15999999642372131348f));
            let x_4288 : f32 = u_xlat14.x;
            u_xlat15.z = x_4288;
            let x_4291 : f32 = u_xlat61.x;
            u_xlat15.w = x_4291;
            let x_4294 : f32 = u_xlat16.x;
            u_xlat13.z = x_4294;
            let x_4297 : f32 = u_xlat12.x;
            u_xlat13.w = x_4297;
            let x_4299 : vec4<f32> = u_xlat13;
            let x_4301 : vec4<f32> = u_xlat15;
            u_xlat17 = (vec4<f32>(x_4299.z, x_4299.w, x_4299.x, x_4299.z) + vec4<f32>(x_4301.z, x_4301.w, x_4301.x, x_4301.z));
            let x_4305 : f32 = u_xlat15.y;
            u_xlat14.z = x_4305;
            let x_4308 : f32 = u_xlat61.y;
            u_xlat14.w = x_4308;
            let x_4311 : f32 = u_xlat13.y;
            u_xlat16.z = x_4311;
            let x_4314 : f32 = u_xlat12.z;
            u_xlat16.w = x_4314;
            let x_4316 : vec4<f32> = u_xlat14;
            let x_4318 : vec4<f32> = u_xlat16;
            let x_4320 : vec3<f32> = (vec3<f32>(x_4316.z, x_4316.y, x_4316.w) + vec3<f32>(x_4318.z, x_4318.y, x_4318.w));
            let x_4321 : vec4<f32> = u_xlat12;
            u_xlat12 = vec4<f32>(x_4320.x, x_4320.y, x_4320.z, x_4321.w);
            let x_4323 : vec4<f32> = u_xlat13;
            let x_4325 : vec4<f32> = u_xlat17;
            let x_4327 : vec3<f32> = (vec3<f32>(x_4323.x, x_4323.z, x_4323.w) / vec3<f32>(x_4325.z, x_4325.w, x_4325.y));
            let x_4328 : vec4<f32> = u_xlat13;
            u_xlat13 = vec4<f32>(x_4327.x, x_4327.y, x_4327.z, x_4328.w);
            let x_4330 : vec4<f32> = u_xlat13;
            let x_4332 : vec3<f32> = (vec3<f32>(x_4330.x, x_4330.y, x_4330.z) + vec3<f32>(-2.5f, -0.5f, 1.5f));
            let x_4333 : vec4<f32> = u_xlat13;
            u_xlat13 = vec4<f32>(x_4332.x, x_4332.y, x_4332.z, x_4333.w);
            let x_4335 : vec4<f32> = u_xlat16;
            let x_4337 : vec4<f32> = u_xlat12;
            let x_4339 : vec3<f32> = (vec3<f32>(x_4335.z, x_4335.y, x_4335.w) / vec3<f32>(x_4337.x, x_4337.y, x_4337.z));
            let x_4340 : vec4<f32> = u_xlat14;
            u_xlat14 = vec4<f32>(x_4339.x, x_4339.y, x_4339.z, x_4340.w);
            let x_4342 : vec4<f32> = u_xlat14;
            let x_4344 : vec3<f32> = (vec3<f32>(x_4342.x, x_4342.y, x_4342.z) + vec3<f32>(-2.5f, -0.5f, 1.5f));
            let x_4345 : vec4<f32> = u_xlat14;
            u_xlat14 = vec4<f32>(x_4344.x, x_4344.y, x_4344.z, x_4345.w);
            let x_4347 : vec4<f32> = u_xlat13;
            let x_4350 : vec4<f32> = x_394.x_AdditionalShadowmapSize;
            let x_4352 : vec3<f32> = (vec3<f32>(x_4347.y, x_4347.x, x_4347.z) * vec3<f32>(x_4350.x, x_4350.x, x_4350.x));
            let x_4353 : vec4<f32> = u_xlat13;
            u_xlat13 = vec4<f32>(x_4352.x, x_4352.y, x_4352.z, x_4353.w);
            let x_4355 : vec4<f32> = u_xlat14;
            let x_4358 : vec4<f32> = x_394.x_AdditionalShadowmapSize;
            let x_4360 : vec3<f32> = (vec3<f32>(x_4355.x, x_4355.y, x_4355.z) * vec3<f32>(x_4358.y, x_4358.y, x_4358.y));
            let x_4361 : vec4<f32> = u_xlat14;
            u_xlat14 = vec4<f32>(x_4360.x, x_4360.y, x_4360.z, x_4361.w);
            let x_4364 : f32 = u_xlat14.x;
            u_xlat13.w = x_4364;
            let x_4366 : vec4<f32> = u_xlat11;
            let x_4369 : vec4<f32> = x_394.x_AdditionalShadowmapSize;
            let x_4372 : vec4<f32> = u_xlat13;
            u_xlat15 = ((vec4<f32>(x_4366.x, x_4366.y, x_4366.x, x_4366.y) * vec4<f32>(x_4369.x, x_4369.y, x_4369.x, x_4369.y)) + vec4<f32>(x_4372.y, x_4372.w, x_4372.x, x_4372.w));
            let x_4375 : vec4<f32> = u_xlat11;
            let x_4378 : vec4<f32> = x_394.x_AdditionalShadowmapSize;
            let x_4381 : vec4<f32> = u_xlat13;
            u_xlat61 = ((vec2<f32>(x_4375.x, x_4375.y) * vec2<f32>(x_4378.x, x_4378.y)) + vec2<f32>(x_4381.z, x_4381.w));
            let x_4385 : f32 = u_xlat13.y;
            u_xlat14.w = x_4385;
            let x_4387 : vec4<f32> = u_xlat14;
            let x_4388 : vec2<f32> = vec2<f32>(x_4387.y, x_4387.z);
            let x_4389 : vec4<f32> = u_xlat13;
            u_xlat13 = vec4<f32>(x_4389.x, x_4388.x, x_4389.z, x_4388.y);
            let x_4391 : vec4<f32> = u_xlat11;
            let x_4394 : vec4<f32> = x_394.x_AdditionalShadowmapSize;
            let x_4397 : vec4<f32> = u_xlat13;
            u_xlat16 = ((vec4<f32>(x_4391.x, x_4391.y, x_4391.x, x_4391.y) * vec4<f32>(x_4394.x, x_4394.y, x_4394.x, x_4394.y)) + vec4<f32>(x_4397.x, x_4397.y, x_4397.z, x_4397.y));
            let x_4400 : vec4<f32> = u_xlat11;
            let x_4403 : vec4<f32> = x_394.x_AdditionalShadowmapSize;
            let x_4406 : vec4<f32> = u_xlat14;
            u_xlat14 = ((vec4<f32>(x_4400.x, x_4400.y, x_4400.x, x_4400.y) * vec4<f32>(x_4403.x, x_4403.y, x_4403.x, x_4403.y)) + vec4<f32>(x_4406.w, x_4406.y, x_4406.w, x_4406.z));
            let x_4409 : vec4<f32> = u_xlat11;
            let x_4412 : vec4<f32> = x_394.x_AdditionalShadowmapSize;
            let x_4415 : vec4<f32> = u_xlat13;
            u_xlat13 = ((vec4<f32>(x_4409.x, x_4409.y, x_4409.x, x_4409.y) * vec4<f32>(x_4412.x, x_4412.y, x_4412.x, x_4412.y)) + vec4<f32>(x_4415.x, x_4415.w, x_4415.z, x_4415.w));
            let x_4418 : vec4<f32> = u_xlat12;
            let x_4420 : vec4<f32> = u_xlat17;
            u_xlat18 = (vec4<f32>(x_4418.x, x_4418.x, x_4418.x, x_4418.y) * vec4<f32>(x_4420.z, x_4420.w, x_4420.y, x_4420.z));
            let x_4423 : vec4<f32> = u_xlat12;
            let x_4425 : vec4<f32> = u_xlat17;
            u_xlat19 = (vec4<f32>(x_4423.y, x_4423.y, x_4423.z, x_4423.z) * x_4425);
            let x_4429 : f32 = u_xlat12.z;
            let x_4431 : f32 = u_xlat17.y;
            u_xlat85 = (x_4429 * x_4431);
            let x_4434 : vec4<f32> = u_xlat15;
            let x_4435 : vec2<f32> = vec2<f32>(x_4434.x, x_4434.y);
            let x_4437 : f32 = u_xlat10.z;
            txVec64 = vec3<f32>(x_4435.x, x_4435.y, x_4437);
            let x_4444 : vec3<f32> = txVec64;
            let x_4446 : f32 = textureSampleCompareLevel(x_AdditionalLightsShadowmapTexture, sampler_LinearClampCompare, x_4444.xy, x_4444.z);
            u_xlat11.x = x_4446;
            let x_4449 : vec4<f32> = u_xlat15;
            let x_4450 : vec2<f32> = vec2<f32>(x_4449.z, x_4449.w);
            let x_4452 : f32 = u_xlat10.z;
            txVec65 = vec3<f32>(x_4450.x, x_4450.y, x_4452);
            let x_4460 : vec3<f32> = txVec65;
            let x_4462 : f32 = textureSampleCompareLevel(x_AdditionalLightsShadowmapTexture, sampler_LinearClampCompare, x_4460.xy, x_4460.z);
            u_xlat36 = x_4462;
            let x_4463 : f32 = u_xlat36;
            let x_4465 : f32 = u_xlat18.y;
            u_xlat36 = (x_4463 * x_4465);
            let x_4468 : f32 = u_xlat18.x;
            let x_4470 : f32 = u_xlat11.x;
            let x_4472 : f32 = u_xlat36;
            u_xlat11.x = ((x_4468 * x_4470) + x_4472);
            let x_4476 : vec2<f32> = u_xlat61;
            let x_4478 : f32 = u_xlat10.z;
            txVec66 = vec3<f32>(x_4476.x, x_4476.y, x_4478);
            let x_4485 : vec3<f32> = txVec66;
            let x_4487 : f32 = textureSampleCompareLevel(x_AdditionalLightsShadowmapTexture, sampler_LinearClampCompare, x_4485.xy, x_4485.z);
            u_xlat36 = x_4487;
            let x_4489 : f32 = u_xlat18.z;
            let x_4490 : f32 = u_xlat36;
            let x_4493 : f32 = u_xlat11.x;
            u_xlat11.x = ((x_4489 * x_4490) + x_4493);
            let x_4497 : vec4<f32> = u_xlat14;
            let x_4498 : vec2<f32> = vec2<f32>(x_4497.x, x_4497.y);
            let x_4500 : f32 = u_xlat10.z;
            txVec67 = vec3<f32>(x_4498.x, x_4498.y, x_4500);
            let x_4507 : vec3<f32> = txVec67;
            let x_4509 : f32 = textureSampleCompareLevel(x_AdditionalLightsShadowmapTexture, sampler_LinearClampCompare, x_4507.xy, x_4507.z);
            u_xlat36 = x_4509;
            let x_4511 : f32 = u_xlat18.w;
            let x_4512 : f32 = u_xlat36;
            let x_4515 : f32 = u_xlat11.x;
            u_xlat11.x = ((x_4511 * x_4512) + x_4515);
            let x_4519 : vec4<f32> = u_xlat16;
            let x_4520 : vec2<f32> = vec2<f32>(x_4519.x, x_4519.y);
            let x_4522 : f32 = u_xlat10.z;
            txVec68 = vec3<f32>(x_4520.x, x_4520.y, x_4522);
            let x_4529 : vec3<f32> = txVec68;
            let x_4531 : f32 = textureSampleCompareLevel(x_AdditionalLightsShadowmapTexture, sampler_LinearClampCompare, x_4529.xy, x_4529.z);
            u_xlat36 = x_4531;
            let x_4533 : f32 = u_xlat19.x;
            let x_4534 : f32 = u_xlat36;
            let x_4537 : f32 = u_xlat11.x;
            u_xlat11.x = ((x_4533 * x_4534) + x_4537);
            let x_4541 : vec4<f32> = u_xlat16;
            let x_4542 : vec2<f32> = vec2<f32>(x_4541.z, x_4541.w);
            let x_4544 : f32 = u_xlat10.z;
            txVec69 = vec3<f32>(x_4542.x, x_4542.y, x_4544);
            let x_4551 : vec3<f32> = txVec69;
            let x_4553 : f32 = textureSampleCompareLevel(x_AdditionalLightsShadowmapTexture, sampler_LinearClampCompare, x_4551.xy, x_4551.z);
            u_xlat36 = x_4553;
            let x_4555 : f32 = u_xlat19.y;
            let x_4556 : f32 = u_xlat36;
            let x_4559 : f32 = u_xlat11.x;
            u_xlat11.x = ((x_4555 * x_4556) + x_4559);
            let x_4563 : vec4<f32> = u_xlat14;
            let x_4564 : vec2<f32> = vec2<f32>(x_4563.z, x_4563.w);
            let x_4566 : f32 = u_xlat10.z;
            txVec70 = vec3<f32>(x_4564.x, x_4564.y, x_4566);
            let x_4573 : vec3<f32> = txVec70;
            let x_4575 : f32 = textureSampleCompareLevel(x_AdditionalLightsShadowmapTexture, sampler_LinearClampCompare, x_4573.xy, x_4573.z);
            u_xlat36 = x_4575;
            let x_4577 : f32 = u_xlat19.z;
            let x_4578 : f32 = u_xlat36;
            let x_4581 : f32 = u_xlat11.x;
            u_xlat11.x = ((x_4577 * x_4578) + x_4581);
            let x_4585 : vec4<f32> = u_xlat13;
            let x_4586 : vec2<f32> = vec2<f32>(x_4585.x, x_4585.y);
            let x_4588 : f32 = u_xlat10.z;
            txVec71 = vec3<f32>(x_4586.x, x_4586.y, x_4588);
            let x_4595 : vec3<f32> = txVec71;
            let x_4597 : f32 = textureSampleCompareLevel(x_AdditionalLightsShadowmapTexture, sampler_LinearClampCompare, x_4595.xy, x_4595.z);
            u_xlat36 = x_4597;
            let x_4599 : f32 = u_xlat19.w;
            let x_4600 : f32 = u_xlat36;
            let x_4603 : f32 = u_xlat11.x;
            u_xlat11.x = ((x_4599 * x_4600) + x_4603);
            let x_4607 : vec4<f32> = u_xlat13;
            let x_4608 : vec2<f32> = vec2<f32>(x_4607.z, x_4607.w);
            let x_4610 : f32 = u_xlat10.z;
            txVec72 = vec3<f32>(x_4608.x, x_4608.y, x_4610);
            let x_4617 : vec3<f32> = txVec72;
            let x_4619 : f32 = textureSampleCompareLevel(x_AdditionalLightsShadowmapTexture, sampler_LinearClampCompare, x_4617.xy, x_4617.z);
            u_xlat36 = x_4619;
            let x_4620 : f32 = u_xlat85;
            let x_4621 : f32 = u_xlat36;
            let x_4624 : f32 = u_xlat11.x;
            u_xlat84 = ((x_4620 * x_4621) + x_4624);
          } else {
            let x_4627 : vec4<f32> = u_xlat10;
            let x_4630 : vec4<f32> = x_394.x_AdditionalShadowmapSize;
            let x_4633 : vec2<f32> = ((vec2<f32>(x_4627.x, x_4627.y) * vec2<f32>(x_4630.z, x_4630.w)) + vec2<f32>(0.5f, 0.5f));
            let x_4634 : vec4<f32> = u_xlat11;
            u_xlat11 = vec4<f32>(x_4633.x, x_4633.y, x_4634.z, x_4634.w);
            let x_4636 : vec4<f32> = u_xlat11;
            let x_4638 : vec2<f32> = floor(vec2<f32>(x_4636.x, x_4636.y));
            let x_4639 : vec4<f32> = u_xlat11;
            u_xlat11 = vec4<f32>(x_4638.x, x_4638.y, x_4639.z, x_4639.w);
            let x_4641 : vec4<f32> = u_xlat10;
            let x_4644 : vec4<f32> = x_394.x_AdditionalShadowmapSize;
            let x_4647 : vec4<f32> = u_xlat11;
            u_xlat61 = ((vec2<f32>(x_4641.x, x_4641.y) * vec2<f32>(x_4644.z, x_4644.w)) + -(vec2<f32>(x_4647.x, x_4647.y)));
            let x_4651 : vec2<f32> = u_xlat61;
            u_xlat12 = (vec4<f32>(x_4651.x, x_4651.x, x_4651.y, x_4651.y) + vec4<f32>(0.5f, 1.0f, 0.5f, 1.0f));
            let x_4654 : vec4<f32> = u_xlat12;
            let x_4656 : vec4<f32> = u_xlat12;
            u_xlat13 = (vec4<f32>(x_4654.x, x_4654.x, x_4654.z, x_4654.z) * vec4<f32>(x_4656.x, x_4656.x, x_4656.z, x_4656.z));
            let x_4659 : vec4<f32> = u_xlat13;
            let x_4661 : vec2<f32> = (vec2<f32>(x_4659.y, x_4659.w) * vec2<f32>(0.04081600159406661987f, 0.04081600159406661987f));
            let x_4662 : vec4<f32> = u_xlat14;
            u_xlat14 = vec4<f32>(x_4662.x, x_4661.x, x_4662.z, x_4661.y);
            let x_4664 : vec4<f32> = u_xlat13;
            let x_4667 : vec2<f32> = u_xlat61;
            let x_4669 : vec2<f32> = ((vec2<f32>(x_4664.x, x_4664.z) * vec2<f32>(0.5f, 0.5f)) + -(x_4667));
            let x_4670 : vec4<f32> = u_xlat12;
            u_xlat12 = vec4<f32>(x_4669.x, x_4670.y, x_4669.y, x_4670.w);
            let x_4672 : vec2<f32> = u_xlat61;
            let x_4674 : vec2<f32> = (-(x_4672) + vec2<f32>(1.0f, 1.0f));
            let x_4675 : vec4<f32> = u_xlat13;
            u_xlat13 = vec4<f32>(x_4674.x, x_4674.y, x_4675.z, x_4675.w);
            let x_4677 : vec2<f32> = u_xlat61;
            u_xlat63 = min(x_4677, vec2<f32>(0.0f, 0.0f));
            let x_4679 : vec2<f32> = u_xlat63;
            let x_4681 : vec2<f32> = u_xlat63;
            let x_4683 : vec4<f32> = u_xlat13;
            let x_4685 : vec2<f32> = ((-(x_4679) * x_4681) + vec2<f32>(x_4683.x, x_4683.y));
            let x_4686 : vec4<f32> = u_xlat13;
            u_xlat13 = vec4<f32>(x_4685.x, x_4685.y, x_4686.z, x_4686.w);
            let x_4688 : vec2<f32> = u_xlat61;
            u_xlat63 = max(x_4688, vec2<f32>(0.0f, 0.0f));
            let x_4691 : vec2<f32> = u_xlat63;
            let x_4693 : vec2<f32> = u_xlat63;
            let x_4695 : vec4<f32> = u_xlat12;
            let x_4697 : vec2<f32> = ((-(x_4691) * x_4693) + vec2<f32>(x_4695.y, x_4695.w));
            let x_4698 : vec3<f32> = u_xlat37;
            u_xlat37 = vec3<f32>(x_4697.x, x_4698.y, x_4697.y);
            let x_4700 : vec4<f32> = u_xlat13;
            let x_4702 : vec2<f32> = (vec2<f32>(x_4700.x, x_4700.y) + vec2<f32>(2.0f, 2.0f));
            let x_4703 : vec4<f32> = u_xlat13;
            u_xlat13 = vec4<f32>(x_4702.x, x_4702.y, x_4703.z, x_4703.w);
            let x_4705 : vec3<f32> = u_xlat37;
            let x_4707 : vec2<f32> = (vec2<f32>(x_4705.x, x_4705.z) + vec2<f32>(2.0f, 2.0f));
            let x_4708 : vec4<f32> = u_xlat12;
            u_xlat12 = vec4<f32>(x_4708.x, x_4707.x, x_4708.z, x_4707.y);
            let x_4711 : f32 = u_xlat12.y;
            u_xlat15.z = (x_4711 * 0.08163200318813323975f);
            let x_4714 : vec4<f32> = u_xlat12;
            let x_4716 : vec3<f32> = (vec3<f32>(x_4714.z, x_4714.x, x_4714.w) * vec3<f32>(0.08163200318813323975f, 0.08163200318813323975f, 0.08163200318813323975f));
            let x_4717 : vec4<f32> = u_xlat16;
            u_xlat16 = vec4<f32>(x_4716.x, x_4716.y, x_4716.z, x_4717.w);
            let x_4719 : vec4<f32> = u_xlat13;
            let x_4721 : vec2<f32> = (vec2<f32>(x_4719.x, x_4719.y) * vec2<f32>(0.08163200318813323975f, 0.08163200318813323975f));
            let x_4722 : vec4<f32> = u_xlat12;
            u_xlat12 = vec4<f32>(x_4721.x, x_4721.y, x_4722.z, x_4722.w);
            let x_4725 : f32 = u_xlat16.y;
            u_xlat15.x = x_4725;
            let x_4727 : vec2<f32> = u_xlat61;
            let x_4730 : vec2<f32> = ((vec2<f32>(x_4727.x, x_4727.x) * vec2<f32>(-0.08163200318813323975f, 0.08163200318813323975f)) + vec2<f32>(0.16326400637626647949f, 0.08163200318813323975f));
            let x_4731 : vec4<f32> = u_xlat15;
            u_xlat15 = vec4<f32>(x_4731.x, x_4730.x, x_4731.z, x_4730.y);
            let x_4733 : vec2<f32> = u_xlat61;
            let x_4736 : vec2<f32> = ((vec2<f32>(x_4733.x, x_4733.x) * vec2<f32>(-0.08163200318813323975f, 0.08163200318813323975f)) + vec2<f32>(0.08163200318813323975f, 0.16326400637626647949f));
            let x_4737 : vec4<f32> = u_xlat13;
            u_xlat13 = vec4<f32>(x_4736.x, x_4737.y, x_4736.y, x_4737.w);
            let x_4740 : f32 = u_xlat12.x;
            u_xlat13.y = x_4740;
            let x_4743 : f32 = u_xlat14.y;
            u_xlat13.w = x_4743;
            let x_4745 : vec4<f32> = u_xlat13;
            let x_4746 : vec4<f32> = u_xlat15;
            u_xlat15 = (x_4745 + x_4746);
            let x_4748 : vec2<f32> = u_xlat61;
            let x_4751 : vec2<f32> = ((vec2<f32>(x_4748.y, x_4748.y) * vec2<f32>(-0.08163200318813323975f, 0.08163200318813323975f)) + vec2<f32>(0.16326400637626647949f, 0.08163200318813323975f));
            let x_4752 : vec4<f32> = u_xlat16;
            u_xlat16 = vec4<f32>(x_4752.x, x_4751.x, x_4752.z, x_4751.y);
            let x_4754 : vec2<f32> = u_xlat61;
            let x_4757 : vec2<f32> = ((vec2<f32>(x_4754.y, x_4754.y) * vec2<f32>(-0.08163200318813323975f, 0.08163200318813323975f)) + vec2<f32>(0.08163200318813323975f, 0.16326400637626647949f));
            let x_4758 : vec4<f32> = u_xlat14;
            u_xlat14 = vec4<f32>(x_4757.x, x_4758.y, x_4757.y, x_4758.w);
            let x_4761 : f32 = u_xlat12.y;
            u_xlat14.y = x_4761;
            let x_4763 : vec4<f32> = u_xlat14;
            let x_4764 : vec4<f32> = u_xlat16;
            u_xlat12 = (x_4763 + x_4764);
            let x_4766 : vec4<f32> = u_xlat13;
            let x_4767 : vec4<f32> = u_xlat15;
            u_xlat13 = (x_4766 / x_4767);
            let x_4769 : vec4<f32> = u_xlat13;
            u_xlat13 = (x_4769 + vec4<f32>(-3.5f, -1.5f, 0.5f, 2.5f));
            let x_4771 : vec4<f32> = u_xlat14;
            let x_4772 : vec4<f32> = u_xlat12;
            u_xlat14 = (x_4771 / x_4772);
            let x_4774 : vec4<f32> = u_xlat14;
            u_xlat14 = (x_4774 + vec4<f32>(-3.5f, -1.5f, 0.5f, 2.5f));
            let x_4776 : vec4<f32> = u_xlat13;
            let x_4779 : vec4<f32> = x_394.x_AdditionalShadowmapSize;
            u_xlat13 = (vec4<f32>(x_4776.w, x_4776.x, x_4776.y, x_4776.z) * vec4<f32>(x_4779.x, x_4779.x, x_4779.x, x_4779.x));
            let x_4782 : vec4<f32> = u_xlat14;
            let x_4785 : vec4<f32> = x_394.x_AdditionalShadowmapSize;
            u_xlat14 = (vec4<f32>(x_4782.x, x_4782.w, x_4782.y, x_4782.z) * vec4<f32>(x_4785.y, x_4785.y, x_4785.y, x_4785.y));
            let x_4788 : vec4<f32> = u_xlat13;
            let x_4789 : vec3<f32> = vec3<f32>(x_4788.y, x_4788.z, x_4788.w);
            let x_4790 : vec4<f32> = u_xlat16;
            u_xlat16 = vec4<f32>(x_4789.x, x_4790.y, x_4789.y, x_4789.z);
            let x_4793 : f32 = u_xlat14.x;
            u_xlat16.y = x_4793;
            let x_4795 : vec4<f32> = u_xlat11;
            let x_4798 : vec4<f32> = x_394.x_AdditionalShadowmapSize;
            let x_4801 : vec4<f32> = u_xlat16;
            u_xlat17 = ((vec4<f32>(x_4795.x, x_4795.y, x_4795.x, x_4795.y) * vec4<f32>(x_4798.x, x_4798.y, x_4798.x, x_4798.y)) + vec4<f32>(x_4801.x, x_4801.y, x_4801.z, x_4801.y));
            let x_4804 : vec4<f32> = u_xlat11;
            let x_4807 : vec4<f32> = x_394.x_AdditionalShadowmapSize;
            let x_4810 : vec4<f32> = u_xlat16;
            u_xlat61 = ((vec2<f32>(x_4804.x, x_4804.y) * vec2<f32>(x_4807.x, x_4807.y)) + vec2<f32>(x_4810.w, x_4810.y));
            let x_4814 : f32 = u_xlat16.y;
            u_xlat13.y = x_4814;
            let x_4817 : f32 = u_xlat14.z;
            u_xlat16.y = x_4817;
            let x_4819 : vec4<f32> = u_xlat11;
            let x_4822 : vec4<f32> = x_394.x_AdditionalShadowmapSize;
            let x_4825 : vec4<f32> = u_xlat16;
            u_xlat18 = ((vec4<f32>(x_4819.x, x_4819.y, x_4819.x, x_4819.y) * vec4<f32>(x_4822.x, x_4822.y, x_4822.x, x_4822.y)) + vec4<f32>(x_4825.x, x_4825.y, x_4825.z, x_4825.y));
            let x_4828 : vec4<f32> = u_xlat11;
            let x_4831 : vec4<f32> = x_394.x_AdditionalShadowmapSize;
            let x_4834 : vec4<f32> = u_xlat16;
            let x_4836 : vec2<f32> = ((vec2<f32>(x_4828.x, x_4828.y) * vec2<f32>(x_4831.x, x_4831.y)) + vec2<f32>(x_4834.w, x_4834.y));
            let x_4837 : vec4<f32> = u_xlat19;
            u_xlat19 = vec4<f32>(x_4836.x, x_4836.y, x_4837.z, x_4837.w);
            let x_4840 : f32 = u_xlat16.y;
            u_xlat13.z = x_4840;
            let x_4842 : vec4<f32> = u_xlat11;
            let x_4845 : vec4<f32> = x_394.x_AdditionalShadowmapSize;
            let x_4848 : vec4<f32> = u_xlat13;
            u_xlat20 = ((vec4<f32>(x_4842.x, x_4842.y, x_4842.x, x_4842.y) * vec4<f32>(x_4845.x, x_4845.y, x_4845.x, x_4845.y)) + vec4<f32>(x_4848.x, x_4848.y, x_4848.x, x_4848.z));
            let x_4852 : f32 = u_xlat14.w;
            u_xlat16.y = x_4852;
            let x_4854 : vec4<f32> = u_xlat11;
            let x_4857 : vec4<f32> = x_394.x_AdditionalShadowmapSize;
            let x_4860 : vec4<f32> = u_xlat16;
            u_xlat21 = ((vec4<f32>(x_4854.x, x_4854.y, x_4854.x, x_4854.y) * vec4<f32>(x_4857.x, x_4857.y, x_4857.x, x_4857.y)) + vec4<f32>(x_4860.x, x_4860.y, x_4860.z, x_4860.y));
            let x_4864 : vec4<f32> = u_xlat11;
            let x_4867 : vec4<f32> = x_394.x_AdditionalShadowmapSize;
            let x_4870 : vec4<f32> = u_xlat16;
            u_xlat38 = ((vec2<f32>(x_4864.x, x_4864.y) * vec2<f32>(x_4867.x, x_4867.y)) + vec2<f32>(x_4870.w, x_4870.y));
            let x_4874 : f32 = u_xlat16.y;
            u_xlat13.w = x_4874;
            let x_4877 : vec4<f32> = u_xlat11;
            let x_4880 : vec4<f32> = x_394.x_AdditionalShadowmapSize;
            let x_4883 : vec4<f32> = u_xlat13;
            u_xlat69 = ((vec2<f32>(x_4877.x, x_4877.y) * vec2<f32>(x_4880.x, x_4880.y)) + vec2<f32>(x_4883.x, x_4883.w));
            let x_4886 : vec4<f32> = u_xlat16;
            let x_4887 : vec3<f32> = vec3<f32>(x_4886.x, x_4886.z, x_4886.w);
            let x_4888 : vec4<f32> = u_xlat14;
            u_xlat14 = vec4<f32>(x_4887.x, x_4888.y, x_4887.y, x_4887.z);
            let x_4890 : vec4<f32> = u_xlat11;
            let x_4893 : vec4<f32> = x_394.x_AdditionalShadowmapSize;
            let x_4896 : vec4<f32> = u_xlat14;
            u_xlat16 = ((vec4<f32>(x_4890.x, x_4890.y, x_4890.x, x_4890.y) * vec4<f32>(x_4893.x, x_4893.y, x_4893.x, x_4893.y)) + vec4<f32>(x_4896.x, x_4896.y, x_4896.z, x_4896.y));
            let x_4899 : vec4<f32> = u_xlat11;
            let x_4902 : vec4<f32> = x_394.x_AdditionalShadowmapSize;
            let x_4905 : vec4<f32> = u_xlat14;
            u_xlat64 = ((vec2<f32>(x_4899.x, x_4899.y) * vec2<f32>(x_4902.x, x_4902.y)) + vec2<f32>(x_4905.w, x_4905.y));
            let x_4909 : f32 = u_xlat13.x;
            u_xlat14.x = x_4909;
            let x_4911 : vec4<f32> = u_xlat11;
            let x_4914 : vec4<f32> = x_394.x_AdditionalShadowmapSize;
            let x_4917 : vec4<f32> = u_xlat14;
            let x_4919 : vec2<f32> = ((vec2<f32>(x_4911.x, x_4911.y) * vec2<f32>(x_4914.x, x_4914.y)) + vec2<f32>(x_4917.x, x_4917.y));
            let x_4920 : vec4<f32> = u_xlat11;
            u_xlat11 = vec4<f32>(x_4919.x, x_4919.y, x_4920.z, x_4920.w);
            let x_4923 : vec4<f32> = u_xlat12;
            let x_4925 : vec4<f32> = u_xlat15;
            u_xlat22 = (vec4<f32>(x_4923.x, x_4923.x, x_4923.x, x_4923.x) * x_4925);
            let x_4928 : vec4<f32> = u_xlat12;
            let x_4930 : vec4<f32> = u_xlat15;
            u_xlat23 = (vec4<f32>(x_4928.y, x_4928.y, x_4928.y, x_4928.y) * x_4930);
            let x_4933 : vec4<f32> = u_xlat12;
            let x_4935 : vec4<f32> = u_xlat15;
            u_xlat24 = (vec4<f32>(x_4933.z, x_4933.z, x_4933.z, x_4933.z) * x_4935);
            let x_4937 : vec4<f32> = u_xlat12;
            let x_4939 : vec4<f32> = u_xlat15;
            u_xlat12 = (vec4<f32>(x_4937.w, x_4937.w, x_4937.w, x_4937.w) * x_4939);
            let x_4942 : vec4<f32> = u_xlat17;
            let x_4943 : vec2<f32> = vec2<f32>(x_4942.x, x_4942.y);
            let x_4945 : f32 = u_xlat10.z;
            txVec73 = vec3<f32>(x_4943.x, x_4943.y, x_4945);
            let x_4952 : vec3<f32> = txVec73;
            let x_4954 : f32 = textureSampleCompareLevel(x_AdditionalLightsShadowmapTexture, sampler_LinearClampCompare, x_4952.xy, x_4952.z);
            u_xlat85 = x_4954;
            let x_4956 : vec4<f32> = u_xlat17;
            let x_4957 : vec2<f32> = vec2<f32>(x_4956.z, x_4956.w);
            let x_4959 : f32 = u_xlat10.z;
            txVec74 = vec3<f32>(x_4957.x, x_4957.y, x_4959);
            let x_4966 : vec3<f32> = txVec74;
            let x_4968 : f32 = textureSampleCompareLevel(x_AdditionalLightsShadowmapTexture, sampler_LinearClampCompare, x_4966.xy, x_4966.z);
            u_xlat13.x = x_4968;
            let x_4971 : f32 = u_xlat13.x;
            let x_4973 : f32 = u_xlat22.y;
            u_xlat13.x = (x_4971 * x_4973);
            let x_4977 : f32 = u_xlat22.x;
            let x_4978 : f32 = u_xlat85;
            let x_4981 : f32 = u_xlat13.x;
            u_xlat85 = ((x_4977 * x_4978) + x_4981);
            let x_4984 : vec2<f32> = u_xlat61;
            let x_4986 : f32 = u_xlat10.z;
            txVec75 = vec3<f32>(x_4984.x, x_4984.y, x_4986);
            let x_4993 : vec3<f32> = txVec75;
            let x_4995 : f32 = textureSampleCompareLevel(x_AdditionalLightsShadowmapTexture, sampler_LinearClampCompare, x_4993.xy, x_4993.z);
            u_xlat61.x = x_4995;
            let x_4998 : f32 = u_xlat22.z;
            let x_5000 : f32 = u_xlat61.x;
            let x_5002 : f32 = u_xlat85;
            u_xlat85 = ((x_4998 * x_5000) + x_5002);
            let x_5005 : vec4<f32> = u_xlat20;
            let x_5006 : vec2<f32> = vec2<f32>(x_5005.x, x_5005.y);
            let x_5008 : f32 = u_xlat10.z;
            txVec76 = vec3<f32>(x_5006.x, x_5006.y, x_5008);
            let x_5015 : vec3<f32> = txVec76;
            let x_5017 : f32 = textureSampleCompareLevel(x_AdditionalLightsShadowmapTexture, sampler_LinearClampCompare, x_5015.xy, x_5015.z);
            u_xlat61.x = x_5017;
            let x_5020 : f32 = u_xlat22.w;
            let x_5022 : f32 = u_xlat61.x;
            let x_5024 : f32 = u_xlat85;
            u_xlat85 = ((x_5020 * x_5022) + x_5024);
            let x_5027 : vec4<f32> = u_xlat18;
            let x_5028 : vec2<f32> = vec2<f32>(x_5027.x, x_5027.y);
            let x_5030 : f32 = u_xlat10.z;
            txVec77 = vec3<f32>(x_5028.x, x_5028.y, x_5030);
            let x_5037 : vec3<f32> = txVec77;
            let x_5039 : f32 = textureSampleCompareLevel(x_AdditionalLightsShadowmapTexture, sampler_LinearClampCompare, x_5037.xy, x_5037.z);
            u_xlat61.x = x_5039;
            let x_5042 : f32 = u_xlat23.x;
            let x_5044 : f32 = u_xlat61.x;
            let x_5046 : f32 = u_xlat85;
            u_xlat85 = ((x_5042 * x_5044) + x_5046);
            let x_5049 : vec4<f32> = u_xlat18;
            let x_5050 : vec2<f32> = vec2<f32>(x_5049.z, x_5049.w);
            let x_5052 : f32 = u_xlat10.z;
            txVec78 = vec3<f32>(x_5050.x, x_5050.y, x_5052);
            let x_5059 : vec3<f32> = txVec78;
            let x_5061 : f32 = textureSampleCompareLevel(x_AdditionalLightsShadowmapTexture, sampler_LinearClampCompare, x_5059.xy, x_5059.z);
            u_xlat61.x = x_5061;
            let x_5064 : f32 = u_xlat23.y;
            let x_5066 : f32 = u_xlat61.x;
            let x_5068 : f32 = u_xlat85;
            u_xlat85 = ((x_5064 * x_5066) + x_5068);
            let x_5071 : vec4<f32> = u_xlat19;
            let x_5072 : vec2<f32> = vec2<f32>(x_5071.x, x_5071.y);
            let x_5074 : f32 = u_xlat10.z;
            txVec79 = vec3<f32>(x_5072.x, x_5072.y, x_5074);
            let x_5081 : vec3<f32> = txVec79;
            let x_5083 : f32 = textureSampleCompareLevel(x_AdditionalLightsShadowmapTexture, sampler_LinearClampCompare, x_5081.xy, x_5081.z);
            u_xlat61.x = x_5083;
            let x_5086 : f32 = u_xlat23.z;
            let x_5088 : f32 = u_xlat61.x;
            let x_5090 : f32 = u_xlat85;
            u_xlat85 = ((x_5086 * x_5088) + x_5090);
            let x_5093 : vec4<f32> = u_xlat20;
            let x_5094 : vec2<f32> = vec2<f32>(x_5093.z, x_5093.w);
            let x_5096 : f32 = u_xlat10.z;
            txVec80 = vec3<f32>(x_5094.x, x_5094.y, x_5096);
            let x_5103 : vec3<f32> = txVec80;
            let x_5105 : f32 = textureSampleCompareLevel(x_AdditionalLightsShadowmapTexture, sampler_LinearClampCompare, x_5103.xy, x_5103.z);
            u_xlat61.x = x_5105;
            let x_5108 : f32 = u_xlat23.w;
            let x_5110 : f32 = u_xlat61.x;
            let x_5112 : f32 = u_xlat85;
            u_xlat85 = ((x_5108 * x_5110) + x_5112);
            let x_5115 : vec4<f32> = u_xlat21;
            let x_5116 : vec2<f32> = vec2<f32>(x_5115.x, x_5115.y);
            let x_5118 : f32 = u_xlat10.z;
            txVec81 = vec3<f32>(x_5116.x, x_5116.y, x_5118);
            let x_5125 : vec3<f32> = txVec81;
            let x_5127 : f32 = textureSampleCompareLevel(x_AdditionalLightsShadowmapTexture, sampler_LinearClampCompare, x_5125.xy, x_5125.z);
            u_xlat61.x = x_5127;
            let x_5130 : f32 = u_xlat24.x;
            let x_5132 : f32 = u_xlat61.x;
            let x_5134 : f32 = u_xlat85;
            u_xlat85 = ((x_5130 * x_5132) + x_5134);
            let x_5137 : vec4<f32> = u_xlat21;
            let x_5138 : vec2<f32> = vec2<f32>(x_5137.z, x_5137.w);
            let x_5140 : f32 = u_xlat10.z;
            txVec82 = vec3<f32>(x_5138.x, x_5138.y, x_5140);
            let x_5147 : vec3<f32> = txVec82;
            let x_5149 : f32 = textureSampleCompareLevel(x_AdditionalLightsShadowmapTexture, sampler_LinearClampCompare, x_5147.xy, x_5147.z);
            u_xlat61.x = x_5149;
            let x_5152 : f32 = u_xlat24.y;
            let x_5154 : f32 = u_xlat61.x;
            let x_5156 : f32 = u_xlat85;
            u_xlat85 = ((x_5152 * x_5154) + x_5156);
            let x_5159 : vec2<f32> = u_xlat38;
            let x_5161 : f32 = u_xlat10.z;
            txVec83 = vec3<f32>(x_5159.x, x_5159.y, x_5161);
            let x_5168 : vec3<f32> = txVec83;
            let x_5170 : f32 = textureSampleCompareLevel(x_AdditionalLightsShadowmapTexture, sampler_LinearClampCompare, x_5168.xy, x_5168.z);
            u_xlat61.x = x_5170;
            let x_5173 : f32 = u_xlat24.z;
            let x_5175 : f32 = u_xlat61.x;
            let x_5177 : f32 = u_xlat85;
            u_xlat85 = ((x_5173 * x_5175) + x_5177);
            let x_5180 : vec2<f32> = u_xlat69;
            let x_5182 : f32 = u_xlat10.z;
            txVec84 = vec3<f32>(x_5180.x, x_5180.y, x_5182);
            let x_5189 : vec3<f32> = txVec84;
            let x_5191 : f32 = textureSampleCompareLevel(x_AdditionalLightsShadowmapTexture, sampler_LinearClampCompare, x_5189.xy, x_5189.z);
            u_xlat61.x = x_5191;
            let x_5194 : f32 = u_xlat24.w;
            let x_5196 : f32 = u_xlat61.x;
            let x_5198 : f32 = u_xlat85;
            u_xlat85 = ((x_5194 * x_5196) + x_5198);
            let x_5201 : vec4<f32> = u_xlat16;
            let x_5202 : vec2<f32> = vec2<f32>(x_5201.x, x_5201.y);
            let x_5204 : f32 = u_xlat10.z;
            txVec85 = vec3<f32>(x_5202.x, x_5202.y, x_5204);
            let x_5211 : vec3<f32> = txVec85;
            let x_5213 : f32 = textureSampleCompareLevel(x_AdditionalLightsShadowmapTexture, sampler_LinearClampCompare, x_5211.xy, x_5211.z);
            u_xlat61.x = x_5213;
            let x_5216 : f32 = u_xlat12.x;
            let x_5218 : f32 = u_xlat61.x;
            let x_5220 : f32 = u_xlat85;
            u_xlat85 = ((x_5216 * x_5218) + x_5220);
            let x_5223 : vec4<f32> = u_xlat16;
            let x_5224 : vec2<f32> = vec2<f32>(x_5223.z, x_5223.w);
            let x_5226 : f32 = u_xlat10.z;
            txVec86 = vec3<f32>(x_5224.x, x_5224.y, x_5226);
            let x_5233 : vec3<f32> = txVec86;
            let x_5235 : f32 = textureSampleCompareLevel(x_AdditionalLightsShadowmapTexture, sampler_LinearClampCompare, x_5233.xy, x_5233.z);
            u_xlat61.x = x_5235;
            let x_5238 : f32 = u_xlat12.y;
            let x_5240 : f32 = u_xlat61.x;
            let x_5242 : f32 = u_xlat85;
            u_xlat85 = ((x_5238 * x_5240) + x_5242);
            let x_5245 : vec2<f32> = u_xlat64;
            let x_5247 : f32 = u_xlat10.z;
            txVec87 = vec3<f32>(x_5245.x, x_5245.y, x_5247);
            let x_5254 : vec3<f32> = txVec87;
            let x_5256 : f32 = textureSampleCompareLevel(x_AdditionalLightsShadowmapTexture, sampler_LinearClampCompare, x_5254.xy, x_5254.z);
            u_xlat61.x = x_5256;
            let x_5259 : f32 = u_xlat12.z;
            let x_5261 : f32 = u_xlat61.x;
            let x_5263 : f32 = u_xlat85;
            u_xlat85 = ((x_5259 * x_5261) + x_5263);
            let x_5266 : vec4<f32> = u_xlat11;
            let x_5267 : vec2<f32> = vec2<f32>(x_5266.x, x_5266.y);
            let x_5269 : f32 = u_xlat10.z;
            txVec88 = vec3<f32>(x_5267.x, x_5267.y, x_5269);
            let x_5276 : vec3<f32> = txVec88;
            let x_5278 : f32 = textureSampleCompareLevel(x_AdditionalLightsShadowmapTexture, sampler_LinearClampCompare, x_5276.xy, x_5276.z);
            u_xlat11.x = x_5278;
            let x_5281 : f32 = u_xlat12.w;
            let x_5283 : f32 = u_xlat11.x;
            let x_5285 : f32 = u_xlat85;
            u_xlat84 = ((x_5281 * x_5283) + x_5285);
          }
        }
      } else {
        let x_5289 : vec4<f32> = u_xlat10;
        let x_5290 : vec2<f32> = vec2<f32>(x_5289.x, x_5289.y);
        let x_5292 : f32 = u_xlat10.z;
        txVec89 = vec3<f32>(x_5290.x, x_5290.y, x_5292);
        let x_5299 : vec3<f32> = txVec89;
        let x_5301 : f32 = textureSampleCompareLevel(x_AdditionalLightsShadowmapTexture, sampler_LinearClampCompare, x_5299.xy, x_5299.z);
        u_xlat84 = x_5301;
      }
      let x_5302 : i32 = u_xlati78;
      let x_5304 : f32 = x_394.x_AdditionalShadowParams[x_5302].x;
      u_xlat10.x = (1.0f + -(x_5304));
      let x_5308 : f32 = u_xlat84;
      let x_5309 : i32 = u_xlati78;
      let x_5311 : f32 = x_394.x_AdditionalShadowParams[x_5309].x;
      let x_5314 : f32 = u_xlat10.x;
      u_xlat84 = ((x_5308 * x_5311) + x_5314);
      let x_5317 : f32 = u_xlat10.z;
      u_xlatb10.x = (0.0f >= x_5317);
      let x_5322 : f32 = u_xlat10.z;
      u_xlatb35 = (x_5322 >= 1.0f);
      let x_5324 : bool = u_xlatb35;
      let x_5326 : bool = u_xlatb10.x;
      u_xlatb10.x = (x_5324 | x_5326);
      let x_5330 : bool = u_xlatb10.x;
      let x_5331 : f32 = u_xlat84;
      u_xlat84 = select(x_5331, 1.0f, x_5330);
    } else {
      u_xlat84 = 1.0f;
    }
    let x_5334 : f32 = u_xlat84;
    u_xlat10.x = (-(x_5334) + 1.0f);
    let x_5339 : f32 = u_xlat2.x;
    let x_5341 : f32 = u_xlat10.x;
    let x_5343 : f32 = u_xlat84;
    u_xlat84 = ((x_5339 * x_5341) + x_5343);
    let x_5345 : f32 = u_xlat80;
    let x_5346 : f32 = u_xlat84;
    u_xlat80 = (x_5345 * x_5346);
    let x_5348 : vec3<f32> = u_xlat25;
    let x_5349 : vec4<f32> = u_xlat9;
    u_xlat84 = dot(x_5348, vec3<f32>(x_5349.x, x_5349.y, x_5349.z));
    let x_5352 : f32 = u_xlat84;
    u_xlat84 = clamp(x_5352, 0.0f, 1.0f);
    let x_5354 : f32 = u_xlat80;
    let x_5355 : f32 = u_xlat84;
    u_xlat80 = (x_5354 * x_5355);
    let x_5357 : f32 = u_xlat80;
    let x_5359 : i32 = u_xlati78;
    let x_5361 : vec4<f32> = x_3857.x_AdditionalLightsColor[x_5359];
    let x_5363 : vec3<f32> = (vec3<f32>(x_5357, x_5357, x_5357) * vec3<f32>(x_5361.x, x_5361.y, x_5361.z));
    let x_5364 : vec4<f32> = u_xlat10;
    u_xlat10 = vec4<f32>(x_5363.x, x_5363.y, x_5363.z, x_5364.w);
    let x_5366 : vec4<f32> = u_xlat8;
    let x_5368 : f32 = u_xlat83;
    let x_5371 : vec3<f32> = u_xlat5;
    let x_5372 : vec3<f32> = ((vec3<f32>(x_5366.x, x_5366.y, x_5366.z) * vec3<f32>(x_5368, x_5368, x_5368)) + x_5371);
    let x_5373 : vec4<f32> = u_xlat8;
    u_xlat8 = vec4<f32>(x_5372.x, x_5372.y, x_5372.z, x_5373.w);
    let x_5375 : vec4<f32> = u_xlat8;
    let x_5377 : vec4<f32> = u_xlat8;
    u_xlat78 = dot(vec3<f32>(x_5375.x, x_5375.y, x_5375.z), vec3<f32>(x_5377.x, x_5377.y, x_5377.z));
    let x_5380 : f32 = u_xlat78;
    u_xlat78 = max(x_5380, 1.17549435e-38f);
    let x_5382 : f32 = u_xlat78;
    u_xlat78 = inverseSqrt(x_5382);
    let x_5384 : f32 = u_xlat78;
    let x_5386 : vec4<f32> = u_xlat8;
    let x_5388 : vec3<f32> = (vec3<f32>(x_5384, x_5384, x_5384) * vec3<f32>(x_5386.x, x_5386.y, x_5386.z));
    let x_5389 : vec4<f32> = u_xlat8;
    u_xlat8 = vec4<f32>(x_5388.x, x_5388.y, x_5388.z, x_5389.w);
    let x_5391 : vec3<f32> = u_xlat25;
    let x_5392 : vec4<f32> = u_xlat8;
    u_xlat78 = dot(x_5391, vec3<f32>(x_5392.x, x_5392.y, x_5392.z));
    let x_5395 : f32 = u_xlat78;
    u_xlat78 = clamp(x_5395, 0.0f, 1.0f);
    let x_5397 : vec4<f32> = u_xlat9;
    let x_5399 : vec4<f32> = u_xlat8;
    u_xlat80 = dot(vec3<f32>(x_5397.x, x_5397.y, x_5397.z), vec3<f32>(x_5399.x, x_5399.y, x_5399.z));
    let x_5402 : f32 = u_xlat80;
    u_xlat80 = clamp(x_5402, 0.0f, 1.0f);
    let x_5404 : f32 = u_xlat78;
    let x_5405 : f32 = u_xlat78;
    u_xlat78 = (x_5404 * x_5405);
    let x_5407 : f32 = u_xlat78;
    let x_5409 : f32 = u_xlat53.x;
    u_xlat78 = ((x_5407 * x_5409) + 1.00001001358032226562f);
    let x_5412 : f32 = u_xlat80;
    let x_5413 : f32 = u_xlat80;
    u_xlat80 = (x_5412 * x_5413);
    let x_5415 : f32 = u_xlat78;
    let x_5416 : f32 = u_xlat78;
    u_xlat78 = (x_5415 * x_5416);
    let x_5418 : f32 = u_xlat80;
    u_xlat80 = max(x_5418, 0.10000000149011611938f);
    let x_5420 : f32 = u_xlat78;
    let x_5421 : f32 = u_xlat80;
    u_xlat78 = (x_5420 * x_5421);
    let x_5423 : f32 = u_xlat81;
    let x_5424 : f32 = u_xlat78;
    u_xlat78 = (x_5423 * x_5424);
    let x_5426 : f32 = u_xlat79;
    let x_5427 : f32 = u_xlat78;
    u_xlat78 = (x_5426 / x_5427);
    let x_5429 : f32 = u_xlat78;
    let x_5432 : vec4<f32> = u_xlat6;
    let x_5434 : vec3<f32> = ((vec3<f32>(x_5429, x_5429, x_5429) * vec3<f32>(0.03999999910593032837f, 0.03999999910593032837f, 0.03999999910593032837f)) + vec3<f32>(x_5432.x, x_5432.y, x_5432.z));
    let x_5435 : vec4<f32> = u_xlat8;
    u_xlat8 = vec4<f32>(x_5434.x, x_5434.y, x_5434.z, x_5435.w);
    let x_5437 : vec4<f32> = u_xlat8;
    let x_5439 : vec4<f32> = u_xlat10;
    let x_5442 : vec3<f32> = u_xlat32;
    u_xlat32 = ((vec3<f32>(x_5437.x, x_5437.y, x_5437.z) * vec3<f32>(x_5439.x, x_5439.y, x_5439.z)) + x_5442);

    continuing {
      let x_5444 : u32 = u_xlatu_loop_1;
      u_xlatu_loop_1 = (x_5444 + bitcast<u32>(1i));
    }
  }
  let x_5446 : vec3<f32> = u_xlat27;
  let x_5447 : vec3<f32> = u_xlat7;
  let x_5450 : vec4<f32> = u_xlat4;
  u_xlat0 = ((x_5446 * vec3<f32>(x_5447.x, x_5447.x, x_5447.x)) + vec3<f32>(x_5450.x, x_5450.y, x_5450.z));
  let x_5453 : vec3<f32> = u_xlat32;
  let x_5454 : vec3<f32> = u_xlat0;
  u_xlat0 = (x_5453 + x_5454);
  let x_5458 : vec4<f32> = vs_INTERP6;
  let x_5460 : vec3<f32> = u_xlat1;
  let x_5462 : vec3<f32> = u_xlat0;
  let x_5463 : vec3<f32> = ((vec3<f32>(x_5458.w, x_5458.w, x_5458.w) * x_5460) + x_5462);
  let x_5464 : vec4<f32> = SV_Target0;
  SV_Target0 = vec4<f32>(x_5463.x, x_5463.y, x_5463.z, x_5464.w);
  let x_5466 : bool = u_xlatb28;
  let x_5467 : f32 = u_xlat76;
  SV_Target0.w = select(1.0f, x_5467, x_5466);
  return;
}

struct main_out {
  @location(0)
  SV_Target0_1 : vec4<f32>,
}

@fragment
fn main(@location(5) vs_INTERP9_param : vec3<f32>, @location(1) vs_INTERP4_param : vec4<f32>, @location(4) vs_INTERP8_param : vec3<f32>, @location(2) vs_INTERP5_param : vec4<f32>, @location(3) vs_INTERP6_param : vec4<f32>, @location(0) vs_INTERP0_param : vec2<f32>, @builtin(position) gl_FragCoord_param : vec4<f32>) -> main_out {
  vs_INTERP9 = vs_INTERP9_param;
  vs_INTERP4 = vs_INTERP4_param;
  vs_INTERP8 = vs_INTERP8_param;
  vs_INTERP5 = vs_INTERP5_param;
  vs_INTERP6 = vs_INTERP6_param;
  vs_INTERP0 = vs_INTERP0_param;
  gl_FragCoord = gl_FragCoord_param;
  main_1();
  return main_out(SV_Target0);
}


