type Arr = array<vec4<f32>, 2u>;

type Arr_1 = array<mat4x4<f32>, 2u>;

type Arr_2 = array<vec4<f32>, 2u>;

type Arr_3 = array<vec4<f32>, 2u>;

struct PGlobals {
  x_GlobalMipBias : vec2<f32>,
  @size(8)
  padding : u32,
  x_ZBufferParams : vec4<f32>,
  unity_MatrixV : mat4x4<f32>,
  x_SSAOParams : vec4<f32>,
  x_CameraViewTopLeftCorner : Arr_3,
  x_CameraViewProjections : Arr_1,
  x_ProjectionParams2 : vec4<f32>,
  x_CameraViewXExtent : Arr_3,
  x_CameraViewYExtent : Arr_3,
  x_SSAOBlueNoiseParams : vec4<f32>,
}

@group(0) @binding(0) var x_CameraDepthTexture : texture_2d<f32>;

@group(0) @binding(4) var sampler_CameraDepthTexture : sampler;

var<private> vs_TEXCOORD0 : vec2<f32>;

@group(1) @binding(0) var<uniform> x_33 : PGlobals;

var<private> SV_Target0 : vec4<f32>;

@group(0) @binding(1) var x_CameraNormalsTexture : texture_2d<f32>;

@group(0) @binding(5) var sampler_CameraNormalsTexture : sampler;

@group(0) @binding(2) var x_BlueNoiseTexture : texture_2d<f32>;

@group(0) @binding(3) var sampler_PointRepeat : sampler;

var<private> gl_FragCoord : vec4<f32>;

fn main_1() {
  var u_xlat0 : f32;
  var u_xlatb8 : bool;
  var u_xlat8 : vec3<f32>;
  var u_xlat1 : vec4<f32>;
  var u_xlat9 : f32;
  var u_xlat2 : vec4<f32>;
  var u_xlat18 : vec2<f32>;
  var u_xlat25 : f32;
  var u_xlat3 : vec4<f32>;
  var u_xlat4 : vec3<f32>;
  var u_xlat5 : vec3<f32>;
  var u_xlatb25 : bool;
  var u_xlat11 : vec3<f32>;
  var u_xlatb3 : vec2<bool>;
  var u_xlat26 : f32;
  var u_xlat6 : f32;
  var u_xlat7 : f32;
  var u_xlatb26 : bool;
  var u_xlat28 : f32;
  var u_xlatb28 : bool;
  var u_xlatb18 : bool;
  var u_xlat19 : f32;
  var u_xlat10 : vec2<f32>;
  var u_xlatb2 : vec4<bool>;
  var u_xlat_precise_vec4 : vec4<f32>;
  var u_xlat_precise_ivec4 : vec4<i32>;
  var u_xlat_precise_bvec4 : vec4<bool>;
  var u_xlat_precise_uvec4 : vec4<u32>;
  let x_22 : vec2<f32> = vs_TEXCOORD0;
  let x_39 : f32 = x_33.x_GlobalMipBias.x;
  let x_40 : vec4<f32> = textureSampleBias(x_CameraDepthTexture, sampler_CameraDepthTexture, x_22, x_39);
  u_xlat0 = x_40.x;
  let x_45 : f32 = u_xlat0;
  u_xlatb8 = (x_45 < 0.00001f);
  let x_48 : bool = u_xlatb8;
  if (x_48) {
    SV_Target0 = vec4<f32>(0.0f, 0.5f, 0.5f, 0.5f);
    return;
  }
  let x_59 : f32 = x_33.x_ZBufferParams.z;
  let x_60 : f32 = u_xlat0;
  let x_64 : f32 = x_33.x_ZBufferParams.w;
  u_xlat0 = ((x_59 * x_60) + x_64);
  let x_67 : f32 = u_xlat0;
  u_xlat0 = (1.0f / x_67);
  let x_71 : f32 = x_33.x_SSAOParams.w;
  let x_72 : f32 = u_xlat0;
  u_xlatb8 = (x_71 < x_72);
  let x_74 : bool = u_xlatb8;
  if (x_74) {
    SV_Target0 = vec4<f32>(0.0f, 0.5f, 0.5f, 0.5f);
    return;
  }
  let x_86 : vec2<f32> = vs_TEXCOORD0;
  let x_88 : f32 = x_33.x_GlobalMipBias.x;
  let x_89 : vec4<f32> = textureSampleBias(x_CameraNormalsTexture, sampler_CameraNormalsTexture, x_86, x_88);
  u_xlat8 = vec3<f32>(x_89.x, x_89.y, x_89.z);
  let x_96 : f32 = vs_TEXCOORD0.y;
  u_xlat1.x = (-(x_96) + 1.0f);
  let x_101 : f32 = u_xlat0;
  let x_104 : f32 = x_33.x_ProjectionParams2.x;
  u_xlat9 = (x_101 * x_104);
  let x_110 : vec4<f32> = x_33.x_CameraViewXExtent[0i];
  let x_112 : vec2<f32> = vs_TEXCOORD0;
  let x_117 : vec4<f32> = x_33.x_CameraViewTopLeftCorner[0i];
  let x_119 : vec3<f32> = ((vec3<f32>(x_110.x, x_110.y, x_110.z) * vec3<f32>(x_112.x, x_112.x, x_112.x)) + vec3<f32>(x_117.x, x_117.y, x_117.z));
  let x_120 : vec4<f32> = u_xlat2;
  u_xlat2 = vec4<f32>(x_119.x, x_119.y, x_119.z, x_120.w);
  let x_124 : vec4<f32> = x_33.x_CameraViewYExtent[0i];
  let x_126 : vec4<f32> = u_xlat1;
  let x_129 : vec4<f32> = u_xlat2;
  let x_131 : vec3<f32> = ((vec3<f32>(x_124.x, x_124.y, x_124.z) * vec3<f32>(x_126.x, x_126.x, x_126.x)) + vec3<f32>(x_129.x, x_129.y, x_129.z));
  let x_132 : vec4<f32> = u_xlat1;
  u_xlat1 = vec4<f32>(x_131.x, x_132.y, x_131.y, x_131.z);
  let x_134 : f32 = u_xlat9;
  let x_136 : vec4<f32> = u_xlat1;
  let x_138 : vec3<f32> = (vec3<f32>(x_134, x_134, x_134) * vec3<f32>(x_136.x, x_136.z, x_136.w));
  let x_139 : vec4<f32> = u_xlat1;
  u_xlat1 = vec4<f32>(x_138.x, x_138.y, x_138.z, x_139.w);
  let x_141 : vec2<f32> = vs_TEXCOORD0;
  let x_144 : vec4<f32> = x_33.x_SSAOBlueNoiseParams;
  let x_146 : vec2<f32> = (x_141 + vec2<f32>(x_144.z, x_144.w));
  let x_147 : vec4<f32> = u_xlat2;
  u_xlat2 = vec4<f32>(x_146.x, x_146.y, x_147.z, x_147.w);
  let x_151 : vec4<f32> = u_xlat2;
  let x_154 : vec4<f32> = x_33.x_SSAOBlueNoiseParams;
  u_xlat18 = (vec2<f32>(x_151.x, x_151.y) * vec2<f32>(x_154.x, x_154.y));
  let x_163 : vec2<f32> = u_xlat18;
  let x_165 : f32 = x_33.x_GlobalMipBias.x;
  let x_166 : vec4<f32> = textureSampleBias(x_BlueNoiseTexture, sampler_PointRepeat, x_163, x_165);
  u_xlat25 = x_166.w;
  let x_168 : f32 = u_xlat25;
  u_xlat18.x = fract(x_168);
  let x_173 : f32 = u_xlat18.x;
  u_xlat3.z = ((x_173 * 2.0f) + -1.0f);
  let x_179 : f32 = u_xlat25;
  u_xlat25 = (x_179 + 0.9296875f);
  let x_182 : f32 = u_xlat25;
  u_xlat25 = (x_182 * 628.31854248f);
  let x_186 : f32 = u_xlat3.z;
  let x_189 : f32 = u_xlat3.z;
  u_xlat18.x = ((-(x_186) * x_189) + 1.0f);
  let x_194 : f32 = u_xlat18.x;
  u_xlat18.x = sqrt(x_194);
  let x_198 : f32 = u_xlat25;
  u_xlat4.x = sin(x_198);
  let x_202 : f32 = u_xlat25;
  u_xlat5.x = cos(x_202);
  let x_206 : f32 = u_xlat18.x;
  let x_208 : f32 = u_xlat5.x;
  u_xlat3.x = (x_206 * x_208);
  let x_212 : f32 = u_xlat18.x;
  let x_214 : f32 = u_xlat4.x;
  u_xlat3.y = (x_212 * x_214);
  let x_217 : vec3<f32> = u_xlat8;
  let x_218 : vec4<f32> = u_xlat3;
  u_xlat25 = dot(x_217, vec3<f32>(x_218.x, x_218.y, x_218.z));
  let x_222 : f32 = u_xlat25;
  u_xlatb25 = (x_222 >= 0.0f);
  let x_224 : bool = u_xlatb25;
  u_xlat25 = select(-1.0f, 1.0f, x_224);
  let x_226 : f32 = u_xlat25;
  let x_228 : vec4<f32> = u_xlat3;
  let x_230 : vec3<f32> = (vec3<f32>(x_226, x_226, x_226) * vec3<f32>(x_228.x, x_228.y, x_228.z));
  let x_231 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_230.x, x_230.y, x_230.z, x_231.w);
  let x_233 : vec4<f32> = u_xlat3;
  let x_236 : vec4<f32> = x_33.x_SSAOParams;
  let x_238 : vec3<f32> = (vec3<f32>(x_233.x, x_233.y, x_233.z) * vec3<f32>(x_236.y, x_236.y, x_236.y));
  let x_239 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_238.x, x_238.y, x_238.z, x_239.w);
  let x_241 : vec4<f32> = u_xlat3;
  let x_246 : vec4<f32> = u_xlat1;
  let x_248 : vec3<f32> = ((vec3<f32>(x_241.x, x_241.y, x_241.z) * vec3<f32>(0.100000001f, 0.100000001f, 0.100000001f)) + vec3<f32>(x_246.x, x_246.y, x_246.z));
  let x_249 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_248.x, x_248.y, x_248.z, x_249.w);
  let x_251 : vec4<f32> = u_xlat3;
  let x_255 : vec4<f32> = x_33.x_CameraViewProjections[0i][1i];
  u_xlat18 = (vec2<f32>(x_251.y, x_251.y) * vec2<f32>(x_255.x, x_255.y));
  let x_259 : vec4<f32> = x_33.x_CameraViewProjections[0i][0i];
  let x_261 : vec4<f32> = u_xlat3;
  let x_264 : vec2<f32> = u_xlat18;
  u_xlat18 = ((vec2<f32>(x_259.x, x_259.y) * vec2<f32>(x_261.x, x_261.x)) + x_264);
  let x_268 : vec4<f32> = x_33.x_CameraViewProjections[0i][2i];
  let x_270 : vec4<f32> = u_xlat3;
  let x_273 : vec2<f32> = u_xlat18;
  u_xlat18 = ((vec2<f32>(x_268.x, x_268.y) * vec2<f32>(x_270.z, x_270.z)) + x_273);
  let x_276 : f32 = x_33.unity_MatrixV[0i].z;
  u_xlat4.x = x_276;
  let x_279 : f32 = x_33.unity_MatrixV[1i].z;
  u_xlat4.y = x_279;
  let x_282 : f32 = x_33.unity_MatrixV[2i].z;
  u_xlat4.z = x_282;
  let x_284 : vec3<f32> = u_xlat4;
  let x_285 : vec4<f32> = u_xlat3;
  u_xlat25 = dot(x_284, vec3<f32>(x_285.x, x_285.y, x_285.z));
  let x_288 : f32 = u_xlat25;
  u_xlat3.x = (1.0f / -(x_288));
  let x_292 : vec2<f32> = u_xlat18;
  let x_293 : vec4<f32> = u_xlat3;
  u_xlat18 = ((x_292 * vec2<f32>(x_293.x, x_293.x)) + vec2<f32>(1.0f, 1.0f));
  let x_298 : vec2<f32> = u_xlat18;
  u_xlat18 = (x_298 * vec2<f32>(0.5f, 0.5f));
  let x_301 : vec2<f32> = u_xlat18;
  u_xlat18 = clamp(x_301, vec2<f32>(0.0f, 0.0f), vec2<f32>(1.0f, 1.0f));
  let x_308 : vec2<f32> = u_xlat18;
  let x_310 : f32 = x_33.x_GlobalMipBias.x;
  let x_311 : vec4<f32> = textureSampleBias(x_CameraDepthTexture, sampler_CameraDepthTexture, x_308, x_310);
  u_xlat3.x = x_311.x;
  let x_316 : f32 = x_33.x_ZBufferParams.z;
  let x_318 : f32 = u_xlat3.x;
  let x_321 : f32 = x_33.x_ZBufferParams.w;
  u_xlat11.x = ((x_316 * x_318) + x_321);
  let x_325 : f32 = u_xlat11.x;
  u_xlat11.x = (1.0f / x_325);
  let x_328 : f32 = u_xlat25;
  let x_331 : f32 = u_xlat11.x;
  u_xlat25 = (-(x_328) + -(x_331));
  let x_334 : f32 = u_xlat25;
  let x_337 : f32 = x_33.x_SSAOParams.y;
  u_xlatb25 = (abs(x_334) < x_337);
  let x_339 : bool = u_xlatb25;
  u_xlat25 = select(0.0f, 1.0f, x_339);
  let x_345 : f32 = u_xlat3.x;
  u_xlatb3.x = (0.00001f < x_345);
  let x_349 : bool = u_xlatb3.x;
  u_xlat3.x = select(0.0f, 1.0f, x_349);
  let x_352 : f32 = u_xlat25;
  let x_354 : f32 = u_xlat3.x;
  u_xlat25 = (x_352 * x_354);
  let x_358 : f32 = u_xlat18.y;
  u_xlat26 = (-(x_358) + 1.0f);
  let x_362 : f32 = u_xlat11.x;
  let x_364 : f32 = x_33.x_ProjectionParams2.x;
  u_xlat3.x = (x_362 * x_364);
  let x_368 : vec4<f32> = x_33.x_CameraViewXExtent[0i];
  let x_370 : vec2<f32> = u_xlat18;
  let x_374 : vec4<f32> = x_33.x_CameraViewTopLeftCorner[0i];
  u_xlat11 = ((vec3<f32>(x_368.x, x_368.y, x_368.z) * vec3<f32>(x_370.x, x_370.x, x_370.x)) + vec3<f32>(x_374.x, x_374.y, x_374.z));
  let x_378 : vec4<f32> = x_33.x_CameraViewYExtent[0i];
  let x_380 : f32 = u_xlat26;
  let x_383 : vec3<f32> = u_xlat11;
  u_xlat11 = ((vec3<f32>(x_378.x, x_378.y, x_378.z) * vec3<f32>(x_380, x_380, x_380)) + x_383);
  let x_385 : vec3<f32> = u_xlat11;
  let x_386 : vec4<f32> = u_xlat3;
  let x_389 : vec4<f32> = u_xlat1;
  let x_392 : vec3<f32> = ((x_385 * vec3<f32>(x_386.x, x_386.x, x_386.x)) + -(vec3<f32>(x_389.x, x_389.y, x_389.z)));
  let x_393 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_392.x, x_392.y, x_392.z, x_393.w);
  let x_395 : vec4<f32> = u_xlat3;
  let x_397 : vec3<f32> = u_xlat8;
  u_xlat18.x = dot(vec3<f32>(x_395.x, x_395.y, x_395.z), x_397);
  let x_400 : f32 = u_xlat0;
  let x_405 : f32 = u_xlat18.x;
  u_xlat18.x = ((-(x_400) * 0.004f) + x_405);
  let x_409 : f32 = u_xlat18.x;
  u_xlat18.x = max(x_409, 0.0f);
  let x_412 : vec4<f32> = u_xlat3;
  let x_414 : vec4<f32> = u_xlat3;
  u_xlat26 = dot(vec3<f32>(x_412.x, x_412.y, x_412.z), vec3<f32>(x_414.x, x_414.y, x_414.z));
  let x_417 : f32 = u_xlat26;
  u_xlat26 = (x_417 + 0.0001f);
  let x_420 : f32 = u_xlat26;
  u_xlat26 = (1.0f / x_420);
  let x_422 : f32 = u_xlat26;
  let x_424 : f32 = u_xlat18.x;
  u_xlat18.x = (x_422 * x_424);
  let x_427 : vec4<f32> = u_xlat2;
  let x_430 : vec4<f32> = x_33.x_SSAOBlueNoiseParams;
  u_xlat3 = ((vec4<f32>(x_427.x, x_427.y, x_427.x, x_427.y) * vec4<f32>(x_430.x, x_430.y, x_430.x, x_430.y)) + vec4<f32>(0.125f, 0.125f, 0.25f, 0.25f));
  let x_440 : vec4<f32> = u_xlat3;
  let x_443 : f32 = x_33.x_GlobalMipBias.x;
  let x_444 : vec4<f32> = textureSampleBias(x_BlueNoiseTexture, sampler_PointRepeat, vec2<f32>(x_440.x, x_440.y), x_443);
  u_xlat26 = x_444.w;
  let x_446 : f32 = u_xlat26;
  let x_451 : vec2<f32> = (vec2<f32>(x_446, x_446) + vec2<f32>(0.33984375f, 0.76171875f));
  let x_452 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_451.x, x_451.y, x_452.z, x_452.w);
  let x_455 : f32 = u_xlat3.x;
  u_xlat26 = fract(x_455);
  let x_457 : f32 = u_xlat26;
  u_xlat5.z = ((x_457 * 2.0f) + -1.0f);
  let x_462 : f32 = u_xlat3.y;
  u_xlat26 = (x_462 * 628.31854248f);
  let x_465 : f32 = u_xlat5.z;
  let x_468 : f32 = u_xlat5.z;
  u_xlat3.x = ((-(x_465) * x_468) + 1.0f);
  let x_473 : f32 = u_xlat3.x;
  u_xlat3.x = sqrt(x_473);
  let x_477 : f32 = u_xlat26;
  u_xlat6 = sin(x_477);
  let x_480 : f32 = u_xlat26;
  u_xlat7 = cos(x_480);
  let x_483 : f32 = u_xlat3.x;
  let x_484 : f32 = u_xlat7;
  u_xlat5.x = (x_483 * x_484);
  let x_488 : f32 = u_xlat3.x;
  let x_489 : f32 = u_xlat6;
  u_xlat5.y = (x_488 * x_489);
  let x_492 : vec3<f32> = u_xlat8;
  let x_493 : vec3<f32> = u_xlat5;
  u_xlat26 = dot(x_492, x_493);
  let x_496 : f32 = u_xlat26;
  u_xlatb26 = (x_496 >= 0.0f);
  let x_498 : bool = u_xlatb26;
  u_xlat26 = select(-1.0f, 1.0f, x_498);
  let x_500 : f32 = u_xlat26;
  let x_502 : vec3<f32> = u_xlat5;
  u_xlat5 = (vec3<f32>(x_500, x_500, x_500) * x_502);
  let x_504 : vec3<f32> = u_xlat5;
  let x_506 : vec4<f32> = x_33.x_SSAOParams;
  u_xlat5 = (x_504 * vec3<f32>(x_506.y, x_506.y, x_506.y));
  let x_509 : vec3<f32> = u_xlat5;
  let x_513 : vec4<f32> = u_xlat1;
  u_xlat5 = ((x_509 * vec3<f32>(0.114062503f, 0.114062503f, 0.114062503f)) + vec3<f32>(x_513.x, x_513.y, x_513.z));
  let x_516 : vec3<f32> = u_xlat5;
  let x_519 : vec4<f32> = x_33.x_CameraViewProjections[0i][1i];
  let x_521 : vec2<f32> = (vec2<f32>(x_516.y, x_516.y) * vec2<f32>(x_519.x, x_519.y));
  let x_522 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_521.x, x_521.y, x_522.z, x_522.w);
  let x_525 : vec4<f32> = x_33.x_CameraViewProjections[0i][0i];
  let x_527 : vec3<f32> = u_xlat5;
  let x_530 : vec4<f32> = u_xlat3;
  let x_532 : vec2<f32> = ((vec2<f32>(x_525.x, x_525.y) * vec2<f32>(x_527.x, x_527.x)) + vec2<f32>(x_530.x, x_530.y));
  let x_533 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_532.x, x_532.y, x_533.z, x_533.w);
  let x_536 : vec4<f32> = x_33.x_CameraViewProjections[0i][2i];
  let x_538 : vec3<f32> = u_xlat5;
  let x_541 : vec4<f32> = u_xlat3;
  let x_543 : vec2<f32> = ((vec2<f32>(x_536.x, x_536.y) * vec2<f32>(x_538.z, x_538.z)) + vec2<f32>(x_541.x, x_541.y));
  let x_544 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_543.x, x_543.y, x_544.z, x_544.w);
  let x_546 : vec3<f32> = u_xlat4;
  let x_547 : vec3<f32> = u_xlat5;
  u_xlat26 = dot(x_546, x_547);
  let x_550 : f32 = u_xlat26;
  u_xlat28 = (1.0f / -(x_550));
  let x_553 : vec4<f32> = u_xlat3;
  let x_555 : f32 = u_xlat28;
  let x_558 : vec2<f32> = ((vec2<f32>(x_553.x, x_553.y) * vec2<f32>(x_555, x_555)) + vec2<f32>(1.0f, 1.0f));
  let x_559 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_558.x, x_558.y, x_559.z, x_559.w);
  let x_561 : vec4<f32> = u_xlat3;
  let x_563 : vec2<f32> = (vec2<f32>(x_561.x, x_561.y) * vec2<f32>(0.5f, 0.5f));
  let x_564 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_563.x, x_563.y, x_564.z, x_564.w);
  let x_566 : vec4<f32> = u_xlat3;
  let x_570 : vec2<f32> = clamp(vec2<f32>(x_566.x, x_566.y), vec2<f32>(0.0f, 0.0f), vec2<f32>(1.0f, 1.0f));
  let x_571 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_570.x, x_570.y, x_571.z, x_571.w);
  let x_576 : vec4<f32> = u_xlat3;
  let x_579 : f32 = x_33.x_GlobalMipBias.x;
  let x_580 : vec4<f32> = textureSampleBias(x_CameraDepthTexture, sampler_CameraDepthTexture, vec2<f32>(x_576.x, x_576.y), x_579);
  u_xlat28 = x_580.x;
  let x_583 : f32 = x_33.x_ZBufferParams.z;
  let x_584 : f32 = u_xlat28;
  let x_587 : f32 = x_33.x_ZBufferParams.w;
  u_xlat5.x = ((x_583 * x_584) + x_587);
  let x_591 : f32 = u_xlat5.x;
  u_xlat5.x = (1.0f / x_591);
  let x_594 : f32 = u_xlat26;
  let x_597 : f32 = u_xlat5.x;
  u_xlat26 = (-(x_594) + -(x_597));
  let x_600 : f32 = u_xlat26;
  let x_603 : f32 = x_33.x_SSAOParams.y;
  u_xlatb26 = (abs(x_600) < x_603);
  let x_605 : bool = u_xlatb26;
  u_xlat26 = select(0.0f, 1.0f, x_605);
  let x_608 : f32 = u_xlat28;
  u_xlatb28 = (0.00001f < x_608);
  let x_610 : bool = u_xlatb28;
  u_xlat28 = select(0.0f, 1.0f, x_610);
  let x_612 : f32 = u_xlat26;
  let x_613 : f32 = u_xlat28;
  u_xlat26 = (x_612 * x_613);
  let x_616 : f32 = u_xlat3.y;
  u_xlat11.x = (-(x_616) + 1.0f);
  let x_621 : f32 = u_xlat5.x;
  let x_623 : f32 = x_33.x_ProjectionParams2.x;
  u_xlat28 = (x_621 * x_623);
  let x_626 : vec4<f32> = x_33.x_CameraViewXExtent[0i];
  let x_628 : vec4<f32> = u_xlat3;
  let x_632 : vec4<f32> = x_33.x_CameraViewTopLeftCorner[0i];
  u_xlat5 = ((vec3<f32>(x_626.x, x_626.y, x_626.z) * vec3<f32>(x_628.x, x_628.x, x_628.x)) + vec3<f32>(x_632.x, x_632.y, x_632.z));
  let x_636 : vec4<f32> = x_33.x_CameraViewYExtent[0i];
  let x_638 : vec3<f32> = u_xlat11;
  let x_641 : vec3<f32> = u_xlat5;
  u_xlat5 = ((vec3<f32>(x_636.x, x_636.y, x_636.z) * vec3<f32>(x_638.x, x_638.x, x_638.x)) + x_641);
  let x_643 : vec3<f32> = u_xlat5;
  let x_644 : f32 = u_xlat28;
  let x_647 : vec4<f32> = u_xlat1;
  u_xlat5 = ((x_643 * vec3<f32>(x_644, x_644, x_644)) + -(vec3<f32>(x_647.x, x_647.y, x_647.z)));
  let x_651 : vec3<f32> = u_xlat5;
  let x_652 : vec3<f32> = u_xlat8;
  u_xlat3.x = dot(x_651, x_652);
  let x_655 : f32 = u_xlat0;
  let x_659 : f32 = u_xlat3.x;
  u_xlat3.x = ((-(x_655) * 0.004f) + x_659);
  let x_663 : f32 = u_xlat3.x;
  u_xlat3.x = max(x_663, 0.0f);
  let x_666 : vec3<f32> = u_xlat5;
  let x_667 : vec3<f32> = u_xlat5;
  u_xlat11.x = dot(x_666, x_667);
  let x_671 : f32 = u_xlat11.x;
  u_xlat11.x = (x_671 + 0.0001f);
  let x_675 : f32 = u_xlat11.x;
  u_xlat11.x = (1.0f / x_675);
  let x_679 : f32 = u_xlat11.x;
  let x_681 : f32 = u_xlat3.x;
  u_xlat3.x = (x_679 * x_681);
  let x_684 : f32 = u_xlat26;
  let x_686 : f32 = u_xlat3.x;
  u_xlat26 = (x_684 * x_686);
  let x_689 : f32 = u_xlat18.x;
  let x_690 : f32 = u_xlat25;
  let x_692 : f32 = u_xlat26;
  u_xlat25 = ((x_689 * x_690) + x_692);
  let x_697 : vec4<f32> = u_xlat3;
  let x_700 : f32 = x_33.x_GlobalMipBias.x;
  let x_701 : vec4<f32> = textureSampleBias(x_BlueNoiseTexture, sampler_PointRepeat, vec2<f32>(x_697.z, x_697.w), x_700);
  u_xlat18.x = x_701.w;
  let x_704 : vec2<f32> = u_xlat18;
  u_xlat18 = (vec2<f32>(x_704.x, x_704.x) + vec2<f32>(0.75390625f, 0.133333296f));
  let x_711 : f32 = u_xlat18.x;
  u_xlat18.x = fract(x_711);
  let x_715 : f32 = u_xlat18.x;
  u_xlat3.z = ((x_715 * 2.0f) + -1.0f);
  let x_720 : f32 = u_xlat18.y;
  u_xlat18.x = (x_720 * 628.31854248f);
  let x_724 : f32 = u_xlat3.z;
  let x_727 : f32 = u_xlat3.z;
  u_xlat26 = ((-(x_724) * x_727) + 1.0f);
  let x_730 : f32 = u_xlat26;
  u_xlat26 = sqrt(x_730);
  let x_733 : f32 = u_xlat18.x;
  u_xlat5.x = sin(x_733);
  let x_737 : f32 = u_xlat18.x;
  u_xlat6 = cos(x_737);
  let x_739 : f32 = u_xlat26;
  let x_740 : f32 = u_xlat6;
  u_xlat3.x = (x_739 * x_740);
  let x_743 : f32 = u_xlat26;
  let x_745 : f32 = u_xlat5.x;
  u_xlat3.y = (x_743 * x_745);
  let x_748 : vec3<f32> = u_xlat8;
  let x_749 : vec4<f32> = u_xlat3;
  u_xlat18.x = dot(x_748, vec3<f32>(x_749.x, x_749.y, x_749.z));
  let x_755 : f32 = u_xlat18.x;
  u_xlatb18 = (x_755 >= 0.0f);
  let x_757 : bool = u_xlatb18;
  u_xlat18.x = select(-1.0f, 1.0f, x_757);
  let x_760 : vec2<f32> = u_xlat18;
  let x_762 : vec4<f32> = u_xlat3;
  let x_764 : vec3<f32> = (vec3<f32>(x_760.x, x_760.x, x_760.x) * vec3<f32>(x_762.x, x_762.y, x_762.z));
  let x_765 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_764.x, x_764.y, x_764.z, x_765.w);
  let x_767 : vec4<f32> = u_xlat3;
  let x_770 : vec4<f32> = x_33.x_SSAOParams;
  let x_772 : vec3<f32> = (vec3<f32>(x_767.x, x_767.y, x_767.z) * vec3<f32>(x_770.y, x_770.y, x_770.y));
  let x_773 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_772.x, x_772.y, x_772.z, x_773.w);
  let x_775 : vec4<f32> = u_xlat3;
  let x_780 : vec4<f32> = u_xlat1;
  let x_782 : vec3<f32> = ((vec3<f32>(x_775.x, x_775.y, x_775.z) * vec3<f32>(0.15625f, 0.15625f, 0.15625f)) + vec3<f32>(x_780.x, x_780.y, x_780.z));
  let x_783 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_782.x, x_782.y, x_782.z, x_783.w);
  let x_785 : vec4<f32> = u_xlat3;
  let x_788 : vec4<f32> = x_33.x_CameraViewProjections[0i][1i];
  u_xlat18 = (vec2<f32>(x_785.y, x_785.y) * vec2<f32>(x_788.x, x_788.y));
  let x_792 : vec4<f32> = x_33.x_CameraViewProjections[0i][0i];
  let x_794 : vec4<f32> = u_xlat3;
  let x_797 : vec2<f32> = u_xlat18;
  u_xlat18 = ((vec2<f32>(x_792.x, x_792.y) * vec2<f32>(x_794.x, x_794.x)) + x_797);
  let x_800 : vec4<f32> = x_33.x_CameraViewProjections[0i][2i];
  let x_802 : vec4<f32> = u_xlat3;
  let x_805 : vec2<f32> = u_xlat18;
  u_xlat18 = ((vec2<f32>(x_800.x, x_800.y) * vec2<f32>(x_802.z, x_802.z)) + x_805);
  let x_807 : vec3<f32> = u_xlat4;
  let x_808 : vec4<f32> = u_xlat3;
  u_xlat3.x = dot(x_807, vec3<f32>(x_808.x, x_808.y, x_808.z));
  let x_813 : f32 = u_xlat3.x;
  u_xlat11.x = (1.0f / -(x_813));
  let x_817 : vec2<f32> = u_xlat18;
  let x_818 : vec3<f32> = u_xlat11;
  u_xlat18 = ((x_817 * vec2<f32>(x_818.x, x_818.x)) + vec2<f32>(1.0f, 1.0f));
  let x_822 : vec2<f32> = u_xlat18;
  u_xlat18 = (x_822 * vec2<f32>(0.5f, 0.5f));
  let x_824 : vec2<f32> = u_xlat18;
  u_xlat18 = clamp(x_824, vec2<f32>(0.0f, 0.0f), vec2<f32>(1.0f, 1.0f));
  let x_831 : vec2<f32> = u_xlat18;
  let x_833 : f32 = x_33.x_GlobalMipBias.x;
  let x_834 : vec4<f32> = textureSampleBias(x_CameraDepthTexture, sampler_CameraDepthTexture, x_831, x_833);
  u_xlat11.x = x_834.x;
  let x_839 : f32 = x_33.x_ZBufferParams.z;
  let x_841 : f32 = u_xlat11.x;
  let x_844 : f32 = x_33.x_ZBufferParams.w;
  u_xlat19 = ((x_839 * x_841) + x_844);
  let x_846 : f32 = u_xlat19;
  u_xlat19 = (1.0f / x_846);
  let x_848 : f32 = u_xlat19;
  let x_851 : f32 = u_xlat3.x;
  u_xlat3.x = (-(x_848) + -(x_851));
  let x_856 : f32 = u_xlat3.x;
  let x_859 : f32 = x_33.x_SSAOParams.y;
  u_xlatb3.x = (abs(x_856) < x_859);
  let x_863 : f32 = u_xlat11.x;
  u_xlatb3.y = (0.00001f < x_863);
  let x_867 : bool = u_xlatb3.x;
  u_xlat3.x = select(0.0f, 1.0f, x_867);
  let x_871 : bool = u_xlatb3.y;
  u_xlat3.y = select(0.0f, 1.0f, x_871);
  let x_875 : f32 = u_xlat3.y;
  let x_877 : f32 = u_xlat3.x;
  u_xlat3.x = (x_875 * x_877);
  let x_881 : f32 = u_xlat18.y;
  u_xlat26 = (-(x_881) + 1.0f);
  let x_884 : f32 = u_xlat19;
  let x_886 : f32 = x_33.x_ProjectionParams2.x;
  u_xlat11.x = (x_884 * x_886);
  let x_890 : vec4<f32> = x_33.x_CameraViewXExtent[0i];
  let x_892 : vec2<f32> = u_xlat18;
  let x_896 : vec4<f32> = x_33.x_CameraViewTopLeftCorner[0i];
  u_xlat5 = ((vec3<f32>(x_890.x, x_890.y, x_890.z) * vec3<f32>(x_892.x, x_892.x, x_892.x)) + vec3<f32>(x_896.x, x_896.y, x_896.z));
  let x_900 : vec4<f32> = x_33.x_CameraViewYExtent[0i];
  let x_902 : f32 = u_xlat26;
  let x_905 : vec3<f32> = u_xlat5;
  u_xlat5 = ((vec3<f32>(x_900.x, x_900.y, x_900.z) * vec3<f32>(x_902, x_902, x_902)) + x_905);
  let x_907 : vec3<f32> = u_xlat5;
  let x_908 : vec3<f32> = u_xlat11;
  let x_911 : vec4<f32> = u_xlat1;
  u_xlat11 = ((x_907 * vec3<f32>(x_908.x, x_908.x, x_908.x)) + -(vec3<f32>(x_911.x, x_911.y, x_911.z)));
  let x_915 : vec3<f32> = u_xlat11;
  let x_916 : vec3<f32> = u_xlat8;
  u_xlat18.x = dot(x_915, x_916);
  let x_919 : f32 = u_xlat0;
  let x_923 : f32 = u_xlat18.x;
  u_xlat18.x = ((-(x_919) * 0.004f) + x_923);
  let x_927 : f32 = u_xlat18.x;
  u_xlat18.x = max(x_927, 0.0f);
  let x_930 : vec3<f32> = u_xlat11;
  let x_931 : vec3<f32> = u_xlat11;
  u_xlat26 = dot(x_930, x_931);
  let x_933 : f32 = u_xlat26;
  u_xlat26 = (x_933 + 0.0001f);
  let x_935 : f32 = u_xlat26;
  u_xlat26 = (1.0f / x_935);
  let x_937 : f32 = u_xlat26;
  let x_939 : f32 = u_xlat18.x;
  u_xlat18.x = (x_937 * x_939);
  let x_943 : f32 = u_xlat18.x;
  let x_945 : f32 = u_xlat3.x;
  let x_947 : f32 = u_xlat25;
  u_xlat25 = ((x_943 * x_945) + x_947);
  let x_949 : vec4<f32> = u_xlat2;
  let x_952 : vec4<f32> = x_33.x_SSAOBlueNoiseParams;
  u_xlat3 = ((vec4<f32>(x_949.x, x_949.y, x_949.x, x_949.y) * vec4<f32>(x_952.x, x_952.y, x_952.x, x_952.y)) + vec4<f32>(0.375f, 0.375f, 0.5f, 0.5f));
  let x_961 : vec4<f32> = u_xlat3;
  let x_964 : f32 = x_33.x_GlobalMipBias.x;
  let x_965 : vec4<f32> = textureSampleBias(x_BlueNoiseTexture, sampler_PointRepeat, vec2<f32>(x_961.x, x_961.y), x_964);
  u_xlat18.x = x_965.w;
  let x_968 : vec2<f32> = u_xlat18;
  u_xlat18 = (vec2<f32>(x_968.x, x_968.x) + vec2<f32>(0.56640625f, 0.015625f));
  let x_975 : f32 = u_xlat18.x;
  u_xlat18.x = fract(x_975);
  let x_979 : f32 = u_xlat18.x;
  u_xlat5.z = ((x_979 * 2.0f) + -1.0f);
  let x_984 : f32 = u_xlat18.y;
  u_xlat18.x = (x_984 * 628.31854248f);
  let x_988 : f32 = u_xlat5.z;
  let x_991 : f32 = u_xlat5.z;
  u_xlat26 = ((-(x_988) * x_991) + 1.0f);
  let x_994 : f32 = u_xlat26;
  u_xlat26 = sqrt(x_994);
  let x_997 : f32 = u_xlat18.x;
  u_xlat3.x = sin(x_997);
  let x_1001 : f32 = u_xlat18.x;
  u_xlat6 = cos(x_1001);
  let x_1003 : f32 = u_xlat26;
  let x_1004 : f32 = u_xlat6;
  u_xlat5.x = (x_1003 * x_1004);
  let x_1007 : f32 = u_xlat26;
  let x_1009 : f32 = u_xlat3.x;
  u_xlat5.y = (x_1007 * x_1009);
  let x_1012 : vec3<f32> = u_xlat8;
  let x_1013 : vec3<f32> = u_xlat5;
  u_xlat18.x = dot(x_1012, x_1013);
  let x_1017 : f32 = u_xlat18.x;
  u_xlatb18 = (x_1017 >= 0.0f);
  let x_1019 : bool = u_xlatb18;
  u_xlat18.x = select(-1.0f, 1.0f, x_1019);
  let x_1022 : vec2<f32> = u_xlat18;
  let x_1024 : vec3<f32> = u_xlat5;
  u_xlat5 = (vec3<f32>(x_1022.x, x_1022.x, x_1022.x) * x_1024);
  let x_1026 : vec3<f32> = u_xlat5;
  let x_1028 : vec4<f32> = x_33.x_SSAOParams;
  u_xlat5 = (x_1026 * vec3<f32>(x_1028.y, x_1028.y, x_1028.y));
  let x_1031 : vec3<f32> = u_xlat5;
  let x_1035 : vec4<f32> = u_xlat1;
  u_xlat5 = ((x_1031 * vec3<f32>(0.2265625f, 0.2265625f, 0.2265625f)) + vec3<f32>(x_1035.x, x_1035.y, x_1035.z));
  let x_1038 : vec3<f32> = u_xlat5;
  let x_1041 : vec4<f32> = x_33.x_CameraViewProjections[0i][1i];
  u_xlat18 = (vec2<f32>(x_1038.y, x_1038.y) * vec2<f32>(x_1041.x, x_1041.y));
  let x_1045 : vec4<f32> = x_33.x_CameraViewProjections[0i][0i];
  let x_1047 : vec3<f32> = u_xlat5;
  let x_1050 : vec2<f32> = u_xlat18;
  u_xlat18 = ((vec2<f32>(x_1045.x, x_1045.y) * vec2<f32>(x_1047.x, x_1047.x)) + x_1050);
  let x_1053 : vec4<f32> = x_33.x_CameraViewProjections[0i][2i];
  let x_1055 : vec3<f32> = u_xlat5;
  let x_1058 : vec2<f32> = u_xlat18;
  u_xlat18 = ((vec2<f32>(x_1053.x, x_1053.y) * vec2<f32>(x_1055.z, x_1055.z)) + x_1058);
  let x_1060 : vec3<f32> = u_xlat4;
  let x_1061 : vec3<f32> = u_xlat5;
  u_xlat3.x = dot(x_1060, x_1061);
  let x_1065 : f32 = u_xlat3.x;
  u_xlat11.x = (1.0f / -(x_1065));
  let x_1069 : vec2<f32> = u_xlat18;
  let x_1070 : vec3<f32> = u_xlat11;
  u_xlat18 = ((x_1069 * vec2<f32>(x_1070.x, x_1070.x)) + vec2<f32>(1.0f, 1.0f));
  let x_1074 : vec2<f32> = u_xlat18;
  u_xlat18 = (x_1074 * vec2<f32>(0.5f, 0.5f));
  let x_1076 : vec2<f32> = u_xlat18;
  u_xlat18 = clamp(x_1076, vec2<f32>(0.0f, 0.0f), vec2<f32>(1.0f, 1.0f));
  let x_1083 : vec2<f32> = u_xlat18;
  let x_1085 : f32 = x_33.x_GlobalMipBias.x;
  let x_1086 : vec4<f32> = textureSampleBias(x_CameraDepthTexture, sampler_CameraDepthTexture, x_1083, x_1085);
  u_xlat11.x = x_1086.x;
  let x_1090 : f32 = x_33.x_ZBufferParams.z;
  let x_1092 : f32 = u_xlat11.x;
  let x_1095 : f32 = x_33.x_ZBufferParams.w;
  u_xlat28 = ((x_1090 * x_1092) + x_1095);
  let x_1097 : f32 = u_xlat28;
  u_xlat28 = (1.0f / x_1097);
  let x_1100 : f32 = u_xlat3.x;
  let x_1102 : f32 = u_xlat28;
  u_xlat3.x = (-(x_1100) + -(x_1102));
  let x_1107 : f32 = u_xlat3.x;
  let x_1110 : f32 = x_33.x_SSAOParams.y;
  u_xlatb3.x = (abs(x_1107) < x_1110);
  let x_1114 : f32 = u_xlat11.x;
  u_xlatb3.y = (0.00001f < x_1114);
  let x_1118 : bool = u_xlatb3.x;
  u_xlat3.x = select(0.0f, 1.0f, x_1118);
  let x_1122 : bool = u_xlatb3.y;
  u_xlat3.y = select(0.0f, 1.0f, x_1122);
  let x_1126 : f32 = u_xlat3.y;
  let x_1128 : f32 = u_xlat3.x;
  u_xlat3.x = (x_1126 * x_1128);
  let x_1132 : f32 = u_xlat18.y;
  u_xlat26 = (-(x_1132) + 1.0f);
  let x_1135 : f32 = u_xlat28;
  let x_1137 : f32 = x_33.x_ProjectionParams2.x;
  u_xlat11.x = (x_1135 * x_1137);
  let x_1141 : vec4<f32> = x_33.x_CameraViewXExtent[0i];
  let x_1143 : vec2<f32> = u_xlat18;
  let x_1147 : vec4<f32> = x_33.x_CameraViewTopLeftCorner[0i];
  u_xlat5 = ((vec3<f32>(x_1141.x, x_1141.y, x_1141.z) * vec3<f32>(x_1143.x, x_1143.x, x_1143.x)) + vec3<f32>(x_1147.x, x_1147.y, x_1147.z));
  let x_1151 : vec4<f32> = x_33.x_CameraViewYExtent[0i];
  let x_1153 : f32 = u_xlat26;
  let x_1156 : vec3<f32> = u_xlat5;
  u_xlat5 = ((vec3<f32>(x_1151.x, x_1151.y, x_1151.z) * vec3<f32>(x_1153, x_1153, x_1153)) + x_1156);
  let x_1158 : vec3<f32> = u_xlat5;
  let x_1159 : vec3<f32> = u_xlat11;
  let x_1162 : vec4<f32> = u_xlat1;
  u_xlat5 = ((x_1158 * vec3<f32>(x_1159.x, x_1159.x, x_1159.x)) + -(vec3<f32>(x_1162.x, x_1162.y, x_1162.z)));
  let x_1166 : vec3<f32> = u_xlat5;
  let x_1167 : vec3<f32> = u_xlat8;
  u_xlat18.x = dot(x_1166, x_1167);
  let x_1170 : f32 = u_xlat0;
  let x_1174 : f32 = u_xlat18.x;
  u_xlat18.x = ((-(x_1170) * 0.004f) + x_1174);
  let x_1178 : f32 = u_xlat18.x;
  u_xlat18.x = max(x_1178, 0.0f);
  let x_1181 : vec3<f32> = u_xlat5;
  let x_1182 : vec3<f32> = u_xlat5;
  u_xlat26 = dot(x_1181, x_1182);
  let x_1184 : f32 = u_xlat26;
  u_xlat26 = (x_1184 + 0.0001f);
  let x_1186 : f32 = u_xlat26;
  u_xlat26 = (1.0f / x_1186);
  let x_1188 : f32 = u_xlat26;
  let x_1190 : f32 = u_xlat18.x;
  u_xlat18.x = (x_1188 * x_1190);
  let x_1194 : f32 = u_xlat18.x;
  let x_1196 : f32 = u_xlat3.x;
  let x_1198 : f32 = u_xlat25;
  u_xlat25 = ((x_1194 * x_1196) + x_1198);
  let x_1203 : vec4<f32> = u_xlat3;
  let x_1206 : f32 = x_33.x_GlobalMipBias.x;
  let x_1207 : vec4<f32> = textureSampleBias(x_BlueNoiseTexture, sampler_PointRepeat, vec2<f32>(x_1203.z, x_1203.w), x_1206);
  u_xlat18.x = x_1207.w;
  let x_1211 : f32 = u_xlat18.x;
  u_xlat26 = (x_1211 + 0.984375f);
  let x_1214 : f32 = u_xlat26;
  u_xlat26 = fract(x_1214);
  let x_1216 : f32 = u_xlat26;
  u_xlat3.z = ((x_1216 * 2.0f) + -1.0f);
  let x_1221 : f32 = u_xlat18.x;
  u_xlat18.x = (x_1221 * 628.31854248f);
  let x_1225 : f32 = u_xlat3.z;
  let x_1228 : f32 = u_xlat3.z;
  u_xlat26 = ((-(x_1225) * x_1228) + 1.0f);
  let x_1231 : f32 = u_xlat26;
  u_xlat26 = sqrt(x_1231);
  let x_1234 : f32 = u_xlat18.x;
  u_xlat5.x = sin(x_1234);
  let x_1238 : f32 = u_xlat18.x;
  u_xlat6 = cos(x_1238);
  let x_1240 : f32 = u_xlat26;
  let x_1241 : f32 = u_xlat6;
  u_xlat3.x = (x_1240 * x_1241);
  let x_1244 : f32 = u_xlat26;
  let x_1246 : f32 = u_xlat5.x;
  u_xlat3.y = (x_1244 * x_1246);
  let x_1249 : vec3<f32> = u_xlat8;
  let x_1250 : vec4<f32> = u_xlat3;
  u_xlat18.x = dot(x_1249, vec3<f32>(x_1250.x, x_1250.y, x_1250.z));
  let x_1255 : f32 = u_xlat18.x;
  u_xlatb18 = (x_1255 >= 0.0f);
  let x_1257 : bool = u_xlatb18;
  u_xlat18.x = select(-1.0f, 1.0f, x_1257);
  let x_1260 : vec2<f32> = u_xlat18;
  let x_1262 : vec4<f32> = u_xlat3;
  let x_1264 : vec3<f32> = (vec3<f32>(x_1260.x, x_1260.x, x_1260.x) * vec3<f32>(x_1262.x, x_1262.y, x_1262.z));
  let x_1265 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_1264.x, x_1264.y, x_1264.z, x_1265.w);
  let x_1267 : vec4<f32> = u_xlat3;
  let x_1270 : vec4<f32> = x_33.x_SSAOParams;
  let x_1272 : vec3<f32> = (vec3<f32>(x_1267.x, x_1267.y, x_1267.z) * vec3<f32>(x_1270.y, x_1270.y, x_1270.y));
  let x_1273 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_1272.x, x_1272.y, x_1272.z, x_1273.w);
  let x_1275 : vec4<f32> = u_xlat3;
  let x_1280 : vec4<f32> = u_xlat1;
  let x_1282 : vec3<f32> = ((vec3<f32>(x_1275.x, x_1275.y, x_1275.z) * vec3<f32>(0.324999988f, 0.324999988f, 0.324999988f)) + vec3<f32>(x_1280.x, x_1280.y, x_1280.z));
  let x_1283 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_1282.x, x_1282.y, x_1282.z, x_1283.w);
  let x_1285 : vec4<f32> = u_xlat3;
  let x_1288 : vec4<f32> = x_33.x_CameraViewProjections[0i][1i];
  u_xlat18 = (vec2<f32>(x_1285.y, x_1285.y) * vec2<f32>(x_1288.x, x_1288.y));
  let x_1292 : vec4<f32> = x_33.x_CameraViewProjections[0i][0i];
  let x_1294 : vec4<f32> = u_xlat3;
  let x_1297 : vec2<f32> = u_xlat18;
  u_xlat18 = ((vec2<f32>(x_1292.x, x_1292.y) * vec2<f32>(x_1294.x, x_1294.x)) + x_1297);
  let x_1300 : vec4<f32> = x_33.x_CameraViewProjections[0i][2i];
  let x_1302 : vec4<f32> = u_xlat3;
  let x_1305 : vec2<f32> = u_xlat18;
  u_xlat18 = ((vec2<f32>(x_1300.x, x_1300.y) * vec2<f32>(x_1302.z, x_1302.z)) + x_1305);
  let x_1307 : vec3<f32> = u_xlat4;
  let x_1308 : vec4<f32> = u_xlat3;
  u_xlat3.x = dot(x_1307, vec3<f32>(x_1308.x, x_1308.y, x_1308.z));
  let x_1313 : f32 = u_xlat3.x;
  u_xlat11.x = (1.0f / -(x_1313));
  let x_1317 : vec2<f32> = u_xlat18;
  let x_1318 : vec3<f32> = u_xlat11;
  u_xlat18 = ((x_1317 * vec2<f32>(x_1318.x, x_1318.x)) + vec2<f32>(1.0f, 1.0f));
  let x_1322 : vec2<f32> = u_xlat18;
  u_xlat18 = (x_1322 * vec2<f32>(0.5f, 0.5f));
  let x_1324 : vec2<f32> = u_xlat18;
  u_xlat18 = clamp(x_1324, vec2<f32>(0.0f, 0.0f), vec2<f32>(1.0f, 1.0f));
  let x_1331 : vec2<f32> = u_xlat18;
  let x_1333 : f32 = x_33.x_GlobalMipBias.x;
  let x_1334 : vec4<f32> = textureSampleBias(x_CameraDepthTexture, sampler_CameraDepthTexture, x_1331, x_1333);
  u_xlat11.x = x_1334.x;
  let x_1338 : f32 = x_33.x_ZBufferParams.z;
  let x_1340 : f32 = u_xlat11.x;
  let x_1343 : f32 = x_33.x_ZBufferParams.w;
  u_xlat19 = ((x_1338 * x_1340) + x_1343);
  let x_1345 : f32 = u_xlat19;
  u_xlat19 = (1.0f / x_1345);
  let x_1347 : f32 = u_xlat19;
  let x_1350 : f32 = u_xlat3.x;
  u_xlat3.x = (-(x_1347) + -(x_1350));
  let x_1355 : f32 = u_xlat3.x;
  let x_1358 : f32 = x_33.x_SSAOParams.y;
  u_xlatb3.x = (abs(x_1355) < x_1358);
  let x_1362 : f32 = u_xlat11.x;
  u_xlatb3.y = (0.00001f < x_1362);
  let x_1366 : bool = u_xlatb3.x;
  u_xlat3.x = select(0.0f, 1.0f, x_1366);
  let x_1370 : bool = u_xlatb3.y;
  u_xlat3.y = select(0.0f, 1.0f, x_1370);
  let x_1374 : f32 = u_xlat3.y;
  let x_1376 : f32 = u_xlat3.x;
  u_xlat3.x = (x_1374 * x_1376);
  let x_1380 : f32 = u_xlat18.y;
  u_xlat26 = (-(x_1380) + 1.0f);
  let x_1383 : f32 = u_xlat19;
  let x_1385 : f32 = x_33.x_ProjectionParams2.x;
  u_xlat11.x = (x_1383 * x_1385);
  let x_1389 : vec4<f32> = x_33.x_CameraViewXExtent[0i];
  let x_1391 : vec2<f32> = u_xlat18;
  let x_1395 : vec4<f32> = x_33.x_CameraViewTopLeftCorner[0i];
  u_xlat5 = ((vec3<f32>(x_1389.x, x_1389.y, x_1389.z) * vec3<f32>(x_1391.x, x_1391.x, x_1391.x)) + vec3<f32>(x_1395.x, x_1395.y, x_1395.z));
  let x_1399 : vec4<f32> = x_33.x_CameraViewYExtent[0i];
  let x_1401 : f32 = u_xlat26;
  let x_1404 : vec3<f32> = u_xlat5;
  u_xlat5 = ((vec3<f32>(x_1399.x, x_1399.y, x_1399.z) * vec3<f32>(x_1401, x_1401, x_1401)) + x_1404);
  let x_1406 : vec3<f32> = u_xlat5;
  let x_1407 : vec3<f32> = u_xlat11;
  let x_1410 : vec4<f32> = u_xlat1;
  u_xlat11 = ((x_1406 * vec3<f32>(x_1407.x, x_1407.x, x_1407.x)) + -(vec3<f32>(x_1410.x, x_1410.y, x_1410.z)));
  let x_1414 : vec3<f32> = u_xlat11;
  let x_1415 : vec3<f32> = u_xlat8;
  u_xlat18.x = dot(x_1414, x_1415);
  let x_1418 : f32 = u_xlat0;
  let x_1422 : f32 = u_xlat18.x;
  u_xlat18.x = ((-(x_1418) * 0.004f) + x_1422);
  let x_1426 : f32 = u_xlat18.x;
  u_xlat18.x = max(x_1426, 0.0f);
  let x_1429 : vec3<f32> = u_xlat11;
  let x_1430 : vec3<f32> = u_xlat11;
  u_xlat26 = dot(x_1429, x_1430);
  let x_1432 : f32 = u_xlat26;
  u_xlat26 = (x_1432 + 0.0001f);
  let x_1434 : f32 = u_xlat26;
  u_xlat26 = (1.0f / x_1434);
  let x_1436 : f32 = u_xlat26;
  let x_1438 : f32 = u_xlat18.x;
  u_xlat18.x = (x_1436 * x_1438);
  let x_1442 : f32 = u_xlat18.x;
  let x_1444 : f32 = u_xlat3.x;
  let x_1446 : f32 = u_xlat25;
  u_xlat25 = ((x_1442 * x_1444) + x_1446);
  let x_1448 : vec4<f32> = u_xlat2;
  let x_1451 : vec4<f32> = x_33.x_SSAOBlueNoiseParams;
  u_xlat3 = ((vec4<f32>(x_1448.x, x_1448.y, x_1448.x, x_1448.y) * vec4<f32>(x_1451.x, x_1451.y, x_1451.x, x_1451.y)) + vec4<f32>(0.625f, 0.625f, 0.75f, 0.75f));
  let x_1461 : vec4<f32> = u_xlat3;
  let x_1464 : f32 = x_33.x_GlobalMipBias.x;
  let x_1465 : vec4<f32> = textureSampleBias(x_BlueNoiseTexture, sampler_PointRepeat, vec2<f32>(x_1461.x, x_1461.y), x_1464);
  u_xlat18.x = x_1465.w;
  let x_1468 : vec2<f32> = u_xlat18;
  u_xlat18 = (vec2<f32>(x_1468.x, x_1468.x) + vec2<f32>(0.07421875f, 0.10546875f));
  let x_1475 : f32 = u_xlat18.x;
  u_xlat18.x = fract(x_1475);
  let x_1479 : f32 = u_xlat18.x;
  u_xlat5.z = ((x_1479 * 2.0f) + -1.0f);
  let x_1484 : f32 = u_xlat18.y;
  u_xlat18.x = (x_1484 * 628.31854248f);
  let x_1488 : f32 = u_xlat5.z;
  let x_1491 : f32 = u_xlat5.z;
  u_xlat26 = ((-(x_1488) * x_1491) + 1.0f);
  let x_1494 : f32 = u_xlat26;
  u_xlat26 = sqrt(x_1494);
  let x_1497 : f32 = u_xlat18.x;
  u_xlat3.x = sin(x_1497);
  let x_1501 : f32 = u_xlat18.x;
  u_xlat6 = cos(x_1501);
  let x_1503 : f32 = u_xlat26;
  let x_1504 : f32 = u_xlat6;
  u_xlat5.x = (x_1503 * x_1504);
  let x_1507 : f32 = u_xlat26;
  let x_1509 : f32 = u_xlat3.x;
  u_xlat5.y = (x_1507 * x_1509);
  let x_1512 : vec3<f32> = u_xlat8;
  let x_1513 : vec3<f32> = u_xlat5;
  u_xlat18.x = dot(x_1512, x_1513);
  let x_1517 : f32 = u_xlat18.x;
  u_xlatb18 = (x_1517 >= 0.0f);
  let x_1519 : bool = u_xlatb18;
  u_xlat18.x = select(-1.0f, 1.0f, x_1519);
  let x_1522 : vec2<f32> = u_xlat18;
  let x_1524 : vec3<f32> = u_xlat5;
  u_xlat5 = (vec3<f32>(x_1522.x, x_1522.x, x_1522.x) * x_1524);
  let x_1526 : vec3<f32> = u_xlat5;
  let x_1528 : vec4<f32> = x_33.x_SSAOParams;
  u_xlat5 = (x_1526 * vec3<f32>(x_1528.y, x_1528.y, x_1528.y));
  let x_1531 : vec3<f32> = u_xlat5;
  let x_1535 : vec4<f32> = u_xlat1;
  u_xlat5 = ((x_1531 * vec3<f32>(0.451562494f, 0.451562494f, 0.451562494f)) + vec3<f32>(x_1535.x, x_1535.y, x_1535.z));
  let x_1538 : vec3<f32> = u_xlat5;
  let x_1541 : vec4<f32> = x_33.x_CameraViewProjections[0i][1i];
  u_xlat18 = (vec2<f32>(x_1538.y, x_1538.y) * vec2<f32>(x_1541.x, x_1541.y));
  let x_1545 : vec4<f32> = x_33.x_CameraViewProjections[0i][0i];
  let x_1547 : vec3<f32> = u_xlat5;
  let x_1550 : vec2<f32> = u_xlat18;
  u_xlat18 = ((vec2<f32>(x_1545.x, x_1545.y) * vec2<f32>(x_1547.x, x_1547.x)) + x_1550);
  let x_1553 : vec4<f32> = x_33.x_CameraViewProjections[0i][2i];
  let x_1555 : vec3<f32> = u_xlat5;
  let x_1558 : vec2<f32> = u_xlat18;
  u_xlat18 = ((vec2<f32>(x_1553.x, x_1553.y) * vec2<f32>(x_1555.z, x_1555.z)) + x_1558);
  let x_1560 : vec3<f32> = u_xlat4;
  let x_1561 : vec3<f32> = u_xlat5;
  u_xlat3.x = dot(x_1560, x_1561);
  let x_1565 : f32 = u_xlat3.x;
  u_xlat11.x = (1.0f / -(x_1565));
  let x_1569 : vec2<f32> = u_xlat18;
  let x_1570 : vec3<f32> = u_xlat11;
  u_xlat18 = ((x_1569 * vec2<f32>(x_1570.x, x_1570.x)) + vec2<f32>(1.0f, 1.0f));
  let x_1574 : vec2<f32> = u_xlat18;
  u_xlat18 = (x_1574 * vec2<f32>(0.5f, 0.5f));
  let x_1576 : vec2<f32> = u_xlat18;
  u_xlat18 = clamp(x_1576, vec2<f32>(0.0f, 0.0f), vec2<f32>(1.0f, 1.0f));
  let x_1583 : vec2<f32> = u_xlat18;
  let x_1585 : f32 = x_33.x_GlobalMipBias.x;
  let x_1586 : vec4<f32> = textureSampleBias(x_CameraDepthTexture, sampler_CameraDepthTexture, x_1583, x_1585);
  u_xlat11.x = x_1586.x;
  let x_1590 : f32 = x_33.x_ZBufferParams.z;
  let x_1592 : f32 = u_xlat11.x;
  let x_1595 : f32 = x_33.x_ZBufferParams.w;
  u_xlat28 = ((x_1590 * x_1592) + x_1595);
  let x_1597 : f32 = u_xlat28;
  u_xlat28 = (1.0f / x_1597);
  let x_1600 : f32 = u_xlat3.x;
  let x_1602 : f32 = u_xlat28;
  u_xlat3.x = (-(x_1600) + -(x_1602));
  let x_1607 : f32 = u_xlat3.x;
  let x_1610 : f32 = x_33.x_SSAOParams.y;
  u_xlatb3.x = (abs(x_1607) < x_1610);
  let x_1614 : f32 = u_xlat11.x;
  u_xlatb3.y = (0.00001f < x_1614);
  let x_1618 : bool = u_xlatb3.x;
  u_xlat3.x = select(0.0f, 1.0f, x_1618);
  let x_1622 : bool = u_xlatb3.y;
  u_xlat3.y = select(0.0f, 1.0f, x_1622);
  let x_1626 : f32 = u_xlat3.y;
  let x_1628 : f32 = u_xlat3.x;
  u_xlat3.x = (x_1626 * x_1628);
  let x_1632 : f32 = u_xlat18.y;
  u_xlat26 = (-(x_1632) + 1.0f);
  let x_1635 : f32 = u_xlat28;
  let x_1637 : f32 = x_33.x_ProjectionParams2.x;
  u_xlat11.x = (x_1635 * x_1637);
  let x_1641 : vec4<f32> = x_33.x_CameraViewXExtent[0i];
  let x_1643 : vec2<f32> = u_xlat18;
  let x_1647 : vec4<f32> = x_33.x_CameraViewTopLeftCorner[0i];
  u_xlat5 = ((vec3<f32>(x_1641.x, x_1641.y, x_1641.z) * vec3<f32>(x_1643.x, x_1643.x, x_1643.x)) + vec3<f32>(x_1647.x, x_1647.y, x_1647.z));
  let x_1651 : vec4<f32> = x_33.x_CameraViewYExtent[0i];
  let x_1653 : f32 = u_xlat26;
  let x_1656 : vec3<f32> = u_xlat5;
  u_xlat5 = ((vec3<f32>(x_1651.x, x_1651.y, x_1651.z) * vec3<f32>(x_1653, x_1653, x_1653)) + x_1656);
  let x_1658 : vec3<f32> = u_xlat5;
  let x_1659 : vec3<f32> = u_xlat11;
  let x_1662 : vec4<f32> = u_xlat1;
  u_xlat5 = ((x_1658 * vec3<f32>(x_1659.x, x_1659.x, x_1659.x)) + -(vec3<f32>(x_1662.x, x_1662.y, x_1662.z)));
  let x_1666 : vec3<f32> = u_xlat5;
  let x_1667 : vec3<f32> = u_xlat8;
  u_xlat18.x = dot(x_1666, x_1667);
  let x_1670 : f32 = u_xlat0;
  let x_1674 : f32 = u_xlat18.x;
  u_xlat18.x = ((-(x_1670) * 0.004f) + x_1674);
  let x_1678 : f32 = u_xlat18.x;
  u_xlat18.x = max(x_1678, 0.0f);
  let x_1681 : vec3<f32> = u_xlat5;
  let x_1682 : vec3<f32> = u_xlat5;
  u_xlat26 = dot(x_1681, x_1682);
  let x_1684 : f32 = u_xlat26;
  u_xlat26 = (x_1684 + 0.0001f);
  let x_1686 : f32 = u_xlat26;
  u_xlat26 = (1.0f / x_1686);
  let x_1688 : f32 = u_xlat26;
  let x_1690 : f32 = u_xlat18.x;
  u_xlat18.x = (x_1688 * x_1690);
  let x_1694 : f32 = u_xlat18.x;
  let x_1696 : f32 = u_xlat3.x;
  let x_1698 : f32 = u_xlat25;
  u_xlat25 = ((x_1694 * x_1696) + x_1698);
  let x_1703 : vec4<f32> = u_xlat3;
  let x_1706 : f32 = x_33.x_GlobalMipBias.x;
  let x_1707 : vec4<f32> = textureSampleBias(x_BlueNoiseTexture, sampler_PointRepeat, vec2<f32>(x_1703.z, x_1703.w), x_1706);
  u_xlat18.x = x_1707.w;
  let x_1710 : vec2<f32> = u_xlat18;
  u_xlat18 = (vec2<f32>(x_1710.x, x_1710.x) + vec2<f32>(0.23828125f, 0.640625f));
  let x_1717 : f32 = u_xlat18.x;
  u_xlat18.x = fract(x_1717);
  let x_1721 : f32 = u_xlat18.x;
  u_xlat3.z = ((x_1721 * 2.0f) + -1.0f);
  let x_1726 : f32 = u_xlat18.y;
  u_xlat18.x = (x_1726 * 628.31854248f);
  let x_1730 : f32 = u_xlat3.z;
  let x_1733 : f32 = u_xlat3.z;
  u_xlat26 = ((-(x_1730) * x_1733) + 1.0f);
  let x_1736 : f32 = u_xlat26;
  u_xlat26 = sqrt(x_1736);
  let x_1739 : f32 = u_xlat18.x;
  u_xlat5.x = sin(x_1739);
  let x_1743 : f32 = u_xlat18.x;
  u_xlat6 = cos(x_1743);
  let x_1745 : f32 = u_xlat26;
  let x_1746 : f32 = u_xlat6;
  u_xlat3.x = (x_1745 * x_1746);
  let x_1749 : f32 = u_xlat26;
  let x_1751 : f32 = u_xlat5.x;
  u_xlat3.y = (x_1749 * x_1751);
  let x_1754 : vec3<f32> = u_xlat8;
  let x_1755 : vec4<f32> = u_xlat3;
  u_xlat18.x = dot(x_1754, vec3<f32>(x_1755.x, x_1755.y, x_1755.z));
  let x_1760 : f32 = u_xlat18.x;
  u_xlatb18 = (x_1760 >= 0.0f);
  let x_1762 : bool = u_xlatb18;
  u_xlat18.x = select(-1.0f, 1.0f, x_1762);
  let x_1765 : vec2<f32> = u_xlat18;
  let x_1767 : vec4<f32> = u_xlat3;
  let x_1769 : vec3<f32> = (vec3<f32>(x_1765.x, x_1765.x, x_1765.x) * vec3<f32>(x_1767.x, x_1767.y, x_1767.z));
  let x_1770 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_1769.x, x_1769.y, x_1769.z, x_1770.w);
  let x_1772 : vec4<f32> = u_xlat3;
  let x_1775 : vec4<f32> = x_33.x_SSAOParams;
  let x_1777 : vec3<f32> = (vec3<f32>(x_1772.x, x_1772.y, x_1772.z) * vec3<f32>(x_1775.y, x_1775.y, x_1775.y));
  let x_1778 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_1777.x, x_1777.y, x_1777.z, x_1778.w);
  let x_1780 : vec4<f32> = u_xlat3;
  let x_1785 : vec4<f32> = u_xlat1;
  let x_1787 : vec3<f32> = ((vec3<f32>(x_1780.x, x_1780.y, x_1780.z) * vec3<f32>(0.606249988f, 0.606249988f, 0.606249988f)) + vec3<f32>(x_1785.x, x_1785.y, x_1785.z));
  let x_1788 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_1787.x, x_1787.y, x_1787.z, x_1788.w);
  let x_1790 : vec4<f32> = u_xlat3;
  let x_1793 : vec4<f32> = x_33.x_CameraViewProjections[0i][1i];
  u_xlat18 = (vec2<f32>(x_1790.y, x_1790.y) * vec2<f32>(x_1793.x, x_1793.y));
  let x_1797 : vec4<f32> = x_33.x_CameraViewProjections[0i][0i];
  let x_1799 : vec4<f32> = u_xlat3;
  let x_1802 : vec2<f32> = u_xlat18;
  u_xlat18 = ((vec2<f32>(x_1797.x, x_1797.y) * vec2<f32>(x_1799.x, x_1799.x)) + x_1802);
  let x_1805 : vec4<f32> = x_33.x_CameraViewProjections[0i][2i];
  let x_1807 : vec4<f32> = u_xlat3;
  let x_1810 : vec2<f32> = u_xlat18;
  u_xlat18 = ((vec2<f32>(x_1805.x, x_1805.y) * vec2<f32>(x_1807.z, x_1807.z)) + x_1810);
  let x_1812 : vec3<f32> = u_xlat4;
  let x_1813 : vec4<f32> = u_xlat3;
  u_xlat3.x = dot(x_1812, vec3<f32>(x_1813.x, x_1813.y, x_1813.z));
  let x_1818 : f32 = u_xlat3.x;
  u_xlat11.x = (1.0f / -(x_1818));
  let x_1822 : vec2<f32> = u_xlat18;
  let x_1823 : vec3<f32> = u_xlat11;
  u_xlat18 = ((x_1822 * vec2<f32>(x_1823.x, x_1823.x)) + vec2<f32>(1.0f, 1.0f));
  let x_1827 : vec2<f32> = u_xlat18;
  u_xlat18 = (x_1827 * vec2<f32>(0.5f, 0.5f));
  let x_1829 : vec2<f32> = u_xlat18;
  u_xlat18 = clamp(x_1829, vec2<f32>(0.0f, 0.0f), vec2<f32>(1.0f, 1.0f));
  let x_1836 : vec2<f32> = u_xlat18;
  let x_1838 : f32 = x_33.x_GlobalMipBias.x;
  let x_1839 : vec4<f32> = textureSampleBias(x_CameraDepthTexture, sampler_CameraDepthTexture, x_1836, x_1838);
  u_xlat11.x = x_1839.x;
  let x_1843 : f32 = x_33.x_ZBufferParams.z;
  let x_1845 : f32 = u_xlat11.x;
  let x_1848 : f32 = x_33.x_ZBufferParams.w;
  u_xlat19 = ((x_1843 * x_1845) + x_1848);
  let x_1850 : f32 = u_xlat19;
  u_xlat19 = (1.0f / x_1850);
  let x_1852 : f32 = u_xlat19;
  let x_1855 : f32 = u_xlat3.x;
  u_xlat3.x = (-(x_1852) + -(x_1855));
  let x_1860 : f32 = u_xlat3.x;
  let x_1863 : f32 = x_33.x_SSAOParams.y;
  u_xlatb3.x = (abs(x_1860) < x_1863);
  let x_1867 : f32 = u_xlat11.x;
  u_xlatb3.y = (0.00001f < x_1867);
  let x_1871 : bool = u_xlatb3.x;
  u_xlat3.x = select(0.0f, 1.0f, x_1871);
  let x_1875 : bool = u_xlatb3.y;
  u_xlat3.y = select(0.0f, 1.0f, x_1875);
  let x_1879 : f32 = u_xlat3.y;
  let x_1881 : f32 = u_xlat3.x;
  u_xlat3.x = (x_1879 * x_1881);
  let x_1885 : f32 = u_xlat18.y;
  u_xlat26 = (-(x_1885) + 1.0f);
  let x_1888 : f32 = u_xlat19;
  let x_1890 : f32 = x_33.x_ProjectionParams2.x;
  u_xlat11.x = (x_1888 * x_1890);
  let x_1894 : vec4<f32> = x_33.x_CameraViewXExtent[0i];
  let x_1896 : vec2<f32> = u_xlat18;
  let x_1900 : vec4<f32> = x_33.x_CameraViewTopLeftCorner[0i];
  u_xlat5 = ((vec3<f32>(x_1894.x, x_1894.y, x_1894.z) * vec3<f32>(x_1896.x, x_1896.x, x_1896.x)) + vec3<f32>(x_1900.x, x_1900.y, x_1900.z));
  let x_1904 : vec4<f32> = x_33.x_CameraViewYExtent[0i];
  let x_1906 : f32 = u_xlat26;
  let x_1909 : vec3<f32> = u_xlat5;
  u_xlat5 = ((vec3<f32>(x_1904.x, x_1904.y, x_1904.z) * vec3<f32>(x_1906, x_1906, x_1906)) + x_1909);
  let x_1911 : vec3<f32> = u_xlat5;
  let x_1912 : vec3<f32> = u_xlat11;
  let x_1915 : vec4<f32> = u_xlat1;
  u_xlat11 = ((x_1911 * vec3<f32>(x_1912.x, x_1912.x, x_1912.x)) + -(vec3<f32>(x_1915.x, x_1915.y, x_1915.z)));
  let x_1919 : vec3<f32> = u_xlat11;
  let x_1920 : vec3<f32> = u_xlat8;
  u_xlat18.x = dot(x_1919, x_1920);
  let x_1923 : f32 = u_xlat0;
  let x_1927 : f32 = u_xlat18.x;
  u_xlat18.x = ((-(x_1923) * 0.004f) + x_1927);
  let x_1931 : f32 = u_xlat18.x;
  u_xlat18.x = max(x_1931, 0.0f);
  let x_1934 : vec3<f32> = u_xlat11;
  let x_1935 : vec3<f32> = u_xlat11;
  u_xlat26 = dot(x_1934, x_1935);
  let x_1937 : f32 = u_xlat26;
  u_xlat26 = (x_1937 + 0.0001f);
  let x_1939 : f32 = u_xlat26;
  u_xlat26 = (1.0f / x_1939);
  let x_1941 : f32 = u_xlat26;
  let x_1943 : f32 = u_xlat18.x;
  u_xlat18.x = (x_1941 * x_1943);
  let x_1947 : f32 = u_xlat18.x;
  let x_1949 : f32 = u_xlat3.x;
  let x_1951 : f32 = u_xlat25;
  u_xlat25 = ((x_1947 * x_1949) + x_1951);
  let x_1953 : vec4<f32> = u_xlat2;
  let x_1956 : vec4<f32> = x_33.x_SSAOBlueNoiseParams;
  let x_1961 : vec2<f32> = ((vec2<f32>(x_1953.x, x_1953.y) * vec2<f32>(x_1956.x, x_1956.y)) + vec2<f32>(0.875f, 0.875f));
  let x_1962 : vec4<f32> = u_xlat2;
  u_xlat2 = vec4<f32>(x_1961.x, x_1961.y, x_1962.z, x_1962.w);
  let x_1967 : vec4<f32> = u_xlat2;
  let x_1970 : f32 = x_33.x_GlobalMipBias.x;
  let x_1971 : vec4<f32> = textureSampleBias(x_BlueNoiseTexture, sampler_PointRepeat, vec2<f32>(x_1967.x, x_1967.y), x_1970);
  u_xlat2.x = x_1971.w;
  let x_1974 : vec4<f32> = u_xlat2;
  let x_1978 : vec2<f32> = (vec2<f32>(x_1974.x, x_1974.x) + vec2<f32>(0.640625f, 0.74609375f));
  let x_1979 : vec4<f32> = u_xlat2;
  u_xlat2 = vec4<f32>(x_1978.x, x_1978.y, x_1979.z, x_1979.w);
  let x_1982 : f32 = u_xlat2.x;
  u_xlat2.x = fract(x_1982);
  let x_1986 : f32 = u_xlat2.x;
  u_xlat3.z = ((x_1986 * 2.0f) + -1.0f);
  let x_1991 : f32 = u_xlat2.y;
  u_xlat2.x = (x_1991 * 628.31854248f);
  let x_1996 : f32 = u_xlat3.z;
  let x_1999 : f32 = u_xlat3.z;
  u_xlat10.x = ((-(x_1996) * x_1999) + 1.0f);
  let x_2004 : f32 = u_xlat10.x;
  u_xlat10.x = sqrt(x_2004);
  let x_2008 : f32 = u_xlat2.x;
  u_xlat5.x = cos(x_2008);
  let x_2012 : f32 = u_xlat2.x;
  u_xlat2.x = sin(x_2012);
  let x_2016 : f32 = u_xlat10.x;
  let x_2018 : f32 = u_xlat5.x;
  u_xlat3.x = (x_2016 * x_2018);
  let x_2022 : f32 = u_xlat2.x;
  let x_2024 : f32 = u_xlat10.x;
  u_xlat3.y = (x_2022 * x_2024);
  let x_2027 : vec3<f32> = u_xlat8;
  let x_2028 : vec4<f32> = u_xlat3;
  u_xlat2.x = dot(x_2027, vec3<f32>(x_2028.x, x_2028.y, x_2028.z));
  let x_2036 : f32 = u_xlat2.x;
  u_xlatb2.x = (x_2036 >= 0.0f);
  let x_2040 : bool = u_xlatb2.x;
  u_xlat2.x = select(-1.0f, 1.0f, x_2040);
  let x_2043 : vec4<f32> = u_xlat2;
  let x_2045 : vec4<f32> = u_xlat3;
  let x_2047 : vec3<f32> = (vec3<f32>(x_2043.x, x_2043.x, x_2043.x) * vec3<f32>(x_2045.x, x_2045.y, x_2045.z));
  let x_2048 : vec4<f32> = u_xlat2;
  u_xlat2 = vec4<f32>(x_2047.x, x_2047.y, x_2047.z, x_2048.w);
  let x_2050 : vec4<f32> = u_xlat2;
  let x_2053 : vec4<f32> = x_33.x_SSAOParams;
  let x_2055 : vec3<f32> = (vec3<f32>(x_2050.x, x_2050.y, x_2050.z) * vec3<f32>(x_2053.y, x_2053.y, x_2053.y));
  let x_2056 : vec4<f32> = u_xlat2;
  u_xlat2 = vec4<f32>(x_2055.x, x_2055.y, x_2055.z, x_2056.w);
  let x_2058 : vec4<f32> = u_xlat2;
  let x_2063 : vec4<f32> = u_xlat1;
  let x_2065 : vec3<f32> = ((vec3<f32>(x_2058.x, x_2058.y, x_2058.z) * vec3<f32>(0.7890625f, 0.7890625f, 0.7890625f)) + vec3<f32>(x_2063.x, x_2063.y, x_2063.z));
  let x_2066 : vec4<f32> = u_xlat2;
  u_xlat2 = vec4<f32>(x_2065.x, x_2065.y, x_2065.z, x_2066.w);
  let x_2068 : vec4<f32> = u_xlat2;
  let x_2071 : vec4<f32> = x_33.x_CameraViewProjections[0i][1i];
  let x_2073 : vec2<f32> = (vec2<f32>(x_2068.y, x_2068.y) * vec2<f32>(x_2071.x, x_2071.y));
  let x_2074 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_2073.x, x_2073.y, x_2074.z, x_2074.w);
  let x_2077 : vec4<f32> = x_33.x_CameraViewProjections[0i][0i];
  let x_2079 : vec4<f32> = u_xlat2;
  let x_2082 : vec4<f32> = u_xlat3;
  let x_2084 : vec2<f32> = ((vec2<f32>(x_2077.x, x_2077.y) * vec2<f32>(x_2079.x, x_2079.x)) + vec2<f32>(x_2082.x, x_2082.y));
  let x_2085 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_2084.x, x_2084.y, x_2085.z, x_2085.w);
  let x_2088 : vec4<f32> = x_33.x_CameraViewProjections[0i][2i];
  let x_2090 : vec4<f32> = u_xlat2;
  let x_2093 : vec4<f32> = u_xlat3;
  let x_2095 : vec2<f32> = ((vec2<f32>(x_2088.x, x_2088.y) * vec2<f32>(x_2090.z, x_2090.z)) + vec2<f32>(x_2093.x, x_2093.y));
  let x_2096 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_2095.x, x_2095.y, x_2096.z, x_2096.w);
  let x_2098 : vec3<f32> = u_xlat4;
  let x_2099 : vec4<f32> = u_xlat2;
  u_xlat2.x = dot(x_2098, vec3<f32>(x_2099.x, x_2099.y, x_2099.z));
  let x_2104 : f32 = u_xlat2.x;
  u_xlat10.x = (1.0f / -(x_2104));
  let x_2108 : vec4<f32> = u_xlat3;
  let x_2110 : vec2<f32> = u_xlat10;
  u_xlat10 = ((vec2<f32>(x_2108.x, x_2108.y) * vec2<f32>(x_2110.x, x_2110.x)) + vec2<f32>(1.0f, 1.0f));
  let x_2114 : vec2<f32> = u_xlat10;
  u_xlat10 = (x_2114 * vec2<f32>(0.5f, 0.5f));
  let x_2116 : vec2<f32> = u_xlat10;
  u_xlat10 = clamp(x_2116, vec2<f32>(0.0f, 0.0f), vec2<f32>(1.0f, 1.0f));
  let x_2123 : vec2<f32> = u_xlat10;
  let x_2125 : f32 = x_33.x_GlobalMipBias.x;
  let x_2126 : vec4<f32> = textureSampleBias(x_CameraDepthTexture, sampler_CameraDepthTexture, x_2123, x_2125);
  u_xlat26 = x_2126.x;
  let x_2129 : f32 = x_33.x_ZBufferParams.z;
  let x_2130 : f32 = u_xlat26;
  let x_2133 : f32 = x_33.x_ZBufferParams.w;
  u_xlat3.x = ((x_2129 * x_2130) + x_2133);
  let x_2137 : f32 = u_xlat3.x;
  u_xlat3.x = (1.0f / x_2137);
  let x_2141 : f32 = u_xlat2.x;
  let x_2144 : f32 = u_xlat3.x;
  u_xlat2.x = (-(x_2141) + -(x_2144));
  let x_2149 : f32 = u_xlat2.x;
  let x_2152 : f32 = x_33.x_SSAOParams.y;
  u_xlatb2.x = (abs(x_2149) < x_2152);
  let x_2155 : f32 = u_xlat26;
  u_xlatb2.w = (0.00001f < x_2155);
  let x_2159 : bool = u_xlatb2.x;
  u_xlat2.x = select(0.0f, 1.0f, x_2159);
  let x_2163 : bool = u_xlatb2.w;
  u_xlat2.w = select(0.0f, 1.0f, x_2163);
  let x_2167 : f32 = u_xlat2.w;
  let x_2169 : f32 = u_xlat2.x;
  u_xlat2.x = (x_2167 * x_2169);
  let x_2173 : f32 = u_xlat10.y;
  u_xlat18.x = (-(x_2173) + 1.0f);
  let x_2178 : f32 = u_xlat3.x;
  let x_2180 : f32 = x_33.x_ProjectionParams2.x;
  u_xlat26 = (x_2178 * x_2180);
  let x_2183 : vec4<f32> = x_33.x_CameraViewXExtent[0i];
  let x_2185 : vec2<f32> = u_xlat10;
  let x_2189 : vec4<f32> = x_33.x_CameraViewTopLeftCorner[0i];
  let x_2191 : vec3<f32> = ((vec3<f32>(x_2183.x, x_2183.y, x_2183.z) * vec3<f32>(x_2185.x, x_2185.x, x_2185.x)) + vec3<f32>(x_2189.x, x_2189.y, x_2189.z));
  let x_2192 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_2191.x, x_2191.y, x_2191.z, x_2192.w);
  let x_2195 : vec4<f32> = x_33.x_CameraViewYExtent[0i];
  let x_2197 : vec2<f32> = u_xlat18;
  let x_2200 : vec4<f32> = u_xlat3;
  let x_2202 : vec3<f32> = ((vec3<f32>(x_2195.x, x_2195.y, x_2195.z) * vec3<f32>(x_2197.x, x_2197.x, x_2197.x)) + vec3<f32>(x_2200.x, x_2200.y, x_2200.z));
  let x_2203 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_2202.x, x_2202.y, x_2202.z, x_2203.w);
  let x_2205 : vec4<f32> = u_xlat3;
  let x_2207 : f32 = u_xlat26;
  let x_2210 : vec4<f32> = u_xlat1;
  let x_2213 : vec3<f32> = ((vec3<f32>(x_2205.x, x_2205.y, x_2205.z) * vec3<f32>(x_2207, x_2207, x_2207)) + -(vec3<f32>(x_2210.x, x_2210.y, x_2210.z)));
  let x_2214 : vec4<f32> = u_xlat1;
  u_xlat1 = vec4<f32>(x_2213.x, x_2213.y, x_2213.z, x_2214.w);
  let x_2216 : vec4<f32> = u_xlat1;
  let x_2218 : vec3<f32> = u_xlat8;
  u_xlat10.x = dot(vec3<f32>(x_2216.x, x_2216.y, x_2216.z), x_2218);
  let x_2221 : f32 = u_xlat0;
  let x_2225 : f32 = u_xlat10.x;
  u_xlat10.x = ((-(x_2221) * 0.004f) + x_2225);
  let x_2229 : f32 = u_xlat10.x;
  u_xlat10.x = max(x_2229, 0.0f);
  let x_2232 : vec4<f32> = u_xlat1;
  let x_2234 : vec4<f32> = u_xlat1;
  u_xlat1.x = dot(vec3<f32>(x_2232.x, x_2232.y, x_2232.z), vec3<f32>(x_2234.x, x_2234.y, x_2234.z));
  let x_2239 : f32 = u_xlat1.x;
  u_xlat1.x = (x_2239 + 0.0001f);
  let x_2243 : f32 = u_xlat1.x;
  u_xlat1.x = (1.0f / x_2243);
  let x_2247 : f32 = u_xlat1.x;
  let x_2249 : f32 = u_xlat10.x;
  u_xlat1.x = (x_2247 * x_2249);
  let x_2253 : f32 = u_xlat1.x;
  let x_2255 : f32 = u_xlat2.x;
  let x_2257 : f32 = u_xlat25;
  u_xlat1.x = ((x_2253 * x_2255) + x_2257);
  let x_2261 : f32 = u_xlat1.x;
  let x_2263 : f32 = x_33.x_SSAOParams.y;
  u_xlat1.x = (x_2261 * x_2263);
  let x_2267 : f32 = x_33.x_SSAOParams.w;
  u_xlat9 = (1.0f / x_2267);
  let x_2269 : f32 = u_xlat0;
  let x_2271 : f32 = u_xlat9;
  u_xlat0 = ((-(x_2269) * x_2271) + 1.0f);
  let x_2274 : f32 = u_xlat0;
  let x_2275 : f32 = u_xlat0;
  u_xlat0 = (x_2274 * x_2275);
  let x_2278 : f32 = u_xlat1.x;
  let x_2280 : f32 = x_33.x_SSAOParams.x;
  u_xlat1.x = (x_2278 * x_2280);
  let x_2283 : f32 = u_xlat0;
  let x_2285 : f32 = u_xlat1.x;
  u_xlat0 = (x_2283 * x_2285);
  let x_2287 : f32 = u_xlat0;
  u_xlat0 = (x_2287 * 0.125f);
  let x_2289 : f32 = u_xlat0;
  u_xlat0 = clamp(x_2289, 0.0f, 1.0f);
  let x_2291 : f32 = u_xlat0;
  u_xlat0 = log2(x_2291);
  let x_2293 : f32 = u_xlat0;
  u_xlat0 = (x_2293 * 0.600000024f);
  let x_2296 : f32 = u_xlat0;
  SV_Target0.x = exp2(x_2296);
  let x_2300 : vec3<f32> = u_xlat8;
  let x_2303 : vec3<f32> = ((x_2300 * vec3<f32>(0.5f, 0.5f, 0.5f)) + vec3<f32>(0.5f, 0.5f, 0.5f));
  let x_2304 : vec4<f32> = SV_Target0;
  SV_Target0 = vec4<f32>(x_2304.x, x_2303.x, x_2303.y, x_2303.z);
  return;
}

struct main_out {
  @location(0)
  SV_Target0_1 : vec4<f32>,
}

@fragment
fn main(@location(0) vs_TEXCOORD0_param : vec2<f32>, @builtin(position) gl_FragCoord_param : vec4<f32>) -> main_out {
  vs_TEXCOORD0 = vs_TEXCOORD0_param;
  gl_FragCoord = gl_FragCoord_param;
  main_1();
  return main_out(SV_Target0);
}

