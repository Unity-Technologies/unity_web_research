struct PGlobals {
  x_GlobalMipBias : vec2<f32>,
}

type Arr = array<mat4x4<f32>, 5u>;

struct MainLightShadows {
  x_MainLightWorldToShadow : Arr,
  x_CascadeShadowSplitSpheres0 : vec4<f32>,
  x_CascadeShadowSplitSpheres1 : vec4<f32>,
  x_CascadeShadowSplitSpheres2 : vec4<f32>,
  x_CascadeShadowSplitSpheres3 : vec4<f32>,
  x_CascadeShadowSplitSphereRadii : vec4<f32>,
  x_MainLightShadowOffset0 : vec4<f32>,
  x_MainLightShadowOffset1 : vec4<f32>,
  x_MainLightShadowParams : vec4<f32>,
  x_MainLightShadowmapSize : vec4<f32>,
}

@group(0) @binding(0) var unity_Lightmap : texture_2d<f32>;

@group(0) @binding(3) var samplerunity_Lightmap : sampler;

var<private> vs_TEXCOORD1 : vec2<f32>;

@group(1) @binding(0) var<uniform> x_26 : PGlobals;

@group(1) @binding(1) var<uniform> x_46 : MainLightShadows;

var<private> vs_TEXCOORD4 : vec4<f32>;

@group(0) @binding(1) var x_MainLightShadowmapTexture : texture_depth_2d;

@group(0) @binding(4) var sampler_MainLightShadowmapTexture : sampler_comparison;

var<private> vs_TEXCOORD3 : vec4<f32>;

@group(0) @binding(2) var x_MainTex : texture_2d<f32>;

@group(0) @binding(5) var sampler_MainTex : sampler;

var<private> vs_TEXCOORD0 : vec2<f32>;

var<private> vs_TEXCOORD2 : vec4<f32>;

var<private> SV_Target3 : vec4<f32>;

var<private> SV_Target0 : vec4<f32>;

var<private> SV_Target1 : vec4<f32>;

var<private> SV_Target2 : vec4<f32>;

var<private> vs_TEXCOORD5 : vec3<f32>;

var<private> gl_FragCoord : vec4<f32>;

fn main_1() {
  var u_xlat0 : vec3<f32>;
  var u_xlatb45 : bool;
  var u_xlat1 : vec4<f32>;
  var txVec0 : vec3<f32>;
  var u_xlat2 : vec4<f32>;
  var txVec1 : vec3<f32>;
  var txVec2 : vec3<f32>;
  var txVec3 : vec3<f32>;
  var u_xlat45 : f32;
  var u_xlatb1 : bool;
  var u_xlat31 : vec2<f32>;
  var u_xlat3 : vec4<f32>;
  var u_xlat33 : vec2<f32>;
  var u_xlat4 : vec4<f32>;
  var u_xlat5 : vec4<f32>;
  var u_xlat6 : vec4<f32>;
  var u_xlat7 : vec4<f32>;
  var u_xlat8 : vec4<f32>;
  var u_xlat9 : vec4<f32>;
  var txVec4 : vec3<f32>;
  var u_xlat16 : f32;
  var txVec5 : vec3<f32>;
  var txVec6 : vec3<f32>;
  var txVec7 : vec3<f32>;
  var txVec8 : vec3<f32>;
  var txVec9 : vec3<f32>;
  var txVec10 : vec3<f32>;
  var txVec11 : vec3<f32>;
  var txVec12 : vec3<f32>;
  var u_xlat17 : vec3<f32>;
  var u_xlat10 : vec4<f32>;
  var u_xlat11 : vec4<f32>;
  var u_xlat18 : vec2<f32>;
  var u_xlat39 : vec2<f32>;
  var u_xlat34 : vec2<f32>;
  var u_xlat12 : vec4<f32>;
  var u_xlat13 : vec4<f32>;
  var u_xlat14 : vec4<f32>;
  var txVec13 : vec3<f32>;
  var txVec14 : vec3<f32>;
  var u_xlat48 : f32;
  var txVec15 : vec3<f32>;
  var txVec16 : vec3<f32>;
  var u_xlat46 : f32;
  var txVec17 : vec3<f32>;
  var txVec18 : vec3<f32>;
  var txVec19 : vec3<f32>;
  var txVec20 : vec3<f32>;
  var txVec21 : vec3<f32>;
  var txVec22 : vec3<f32>;
  var txVec23 : vec3<f32>;
  var txVec24 : vec3<f32>;
  var txVec25 : vec3<f32>;
  var txVec26 : vec3<f32>;
  var txVec27 : vec3<f32>;
  var txVec28 : vec3<f32>;
  var txVec29 : vec3<f32>;
  var u_xlatb16 : bool;
  var u_xlat_precise_vec4 : vec4<f32>;
  var u_xlat_precise_ivec4 : vec4<i32>;
  var u_xlat_precise_bvec4 : vec4<bool>;
  var u_xlat_precise_uvec4 : vec4<u32>;
  let x_23 : vec2<f32> = vs_TEXCOORD1;
  let x_33 : f32 = x_26.x_GlobalMipBias.x;
  let x_35 : vec4<f32> = textureSampleBias(unity_Lightmap, samplerunity_Lightmap, x_23, x_33);
  u_xlat0 = vec3<f32>(x_35.x, x_35.y, x_35.z);
  let x_50 : f32 = x_46.x_MainLightShadowParams.y;
  u_xlatb45 = (0.0f < x_50);
  let x_52 : bool = u_xlatb45;
  if (x_52) {
    let x_56 : f32 = x_46.x_MainLightShadowParams.y;
    u_xlatb45 = (x_56 == 1.0f);
    let x_59 : bool = u_xlatb45;
    if (x_59) {
      let x_66 : vec4<f32> = vs_TEXCOORD4;
      let x_71 : vec4<f32> = x_46.x_MainLightShadowOffset0;
      u_xlat1 = (vec4<f32>(x_66.x, x_66.y, x_66.x, x_66.y) + x_71);
      let x_74 : vec4<f32> = u_xlat1;
      let x_75 : vec2<f32> = vec2<f32>(x_74.x, x_74.y);
      let x_79 : f32 = vs_TEXCOORD4.z;
      txVec0 = vec3<f32>(x_75.x, x_75.y, x_79);
      let x_92 : vec3<f32> = txVec0;
      let x_94 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_92.xy, x_92.z);
      u_xlat2.x = x_94;
      let x_98 : vec4<f32> = u_xlat1;
      let x_99 : vec2<f32> = vec2<f32>(x_98.z, x_98.w);
      let x_101 : f32 = vs_TEXCOORD4.z;
      txVec1 = vec3<f32>(x_99.x, x_99.y, x_101);
      let x_108 : vec3<f32> = txVec1;
      let x_110 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_108.xy, x_108.z);
      u_xlat2.y = x_110;
      let x_112 : vec4<f32> = vs_TEXCOORD4;
      let x_116 : vec4<f32> = x_46.x_MainLightShadowOffset1;
      u_xlat1 = (vec4<f32>(x_112.x, x_112.y, x_112.x, x_112.y) + x_116);
      let x_119 : vec4<f32> = u_xlat1;
      let x_120 : vec2<f32> = vec2<f32>(x_119.x, x_119.y);
      let x_122 : f32 = vs_TEXCOORD4.z;
      txVec2 = vec3<f32>(x_120.x, x_120.y, x_122);
      let x_129 : vec3<f32> = txVec2;
      let x_131 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_129.xy, x_129.z);
      u_xlat2.z = x_131;
      let x_134 : vec4<f32> = u_xlat1;
      let x_135 : vec2<f32> = vec2<f32>(x_134.z, x_134.w);
      let x_137 : f32 = vs_TEXCOORD4.z;
      txVec3 = vec3<f32>(x_135.x, x_135.y, x_137);
      let x_144 : vec3<f32> = txVec3;
      let x_146 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_144.xy, x_144.z);
      u_xlat2.w = x_146;
      let x_150 : vec4<f32> = u_xlat2;
      u_xlat45 = dot(x_150, vec4<f32>(0.25f, 0.25f, 0.25f, 0.25f));
    } else {
      let x_157 : f32 = x_46.x_MainLightShadowParams.y;
      u_xlatb1 = (x_157 == 2.0f);
      let x_160 : bool = u_xlatb1;
      if (x_160) {
        let x_163 : vec4<f32> = vs_TEXCOORD4;
        let x_167 : vec4<f32> = x_46.x_MainLightShadowmapSize;
        let x_172 : vec2<f32> = ((vec2<f32>(x_163.x, x_163.y) * vec2<f32>(x_167.z, x_167.w)) + vec2<f32>(0.5f, 0.5f));
        let x_173 : vec4<f32> = u_xlat1;
        u_xlat1 = vec4<f32>(x_172.x, x_172.y, x_173.z, x_173.w);
        let x_175 : vec4<f32> = u_xlat1;
        let x_177 : vec2<f32> = floor(vec2<f32>(x_175.x, x_175.y));
        let x_178 : vec4<f32> = u_xlat1;
        u_xlat1 = vec4<f32>(x_177.x, x_177.y, x_178.z, x_178.w);
        let x_182 : vec4<f32> = vs_TEXCOORD4;
        let x_185 : vec4<f32> = x_46.x_MainLightShadowmapSize;
        let x_188 : vec4<f32> = u_xlat1;
        u_xlat31 = ((vec2<f32>(x_182.x, x_182.y) * vec2<f32>(x_185.z, x_185.w)) + -(vec2<f32>(x_188.x, x_188.y)));
        let x_192 : vec2<f32> = u_xlat31;
        u_xlat2 = (vec4<f32>(x_192.x, x_192.x, x_192.y, x_192.y) + vec4<f32>(0.5f, 1.0f, 0.5f, 1.0f));
        let x_197 : vec4<f32> = u_xlat2;
        let x_199 : vec4<f32> = u_xlat2;
        u_xlat3 = (vec4<f32>(x_197.x, x_197.x, x_197.z, x_197.z) * vec4<f32>(x_199.x, x_199.x, x_199.z, x_199.z));
        let x_202 : vec4<f32> = u_xlat3;
        let x_206 : vec2<f32> = (vec2<f32>(x_202.y, x_202.w) * vec2<f32>(0.079999998f, 0.079999998f));
        let x_207 : vec4<f32> = u_xlat2;
        u_xlat2 = vec4<f32>(x_206.x, x_207.y, x_206.y, x_207.w);
        let x_209 : vec4<f32> = u_xlat3;
        let x_212 : vec2<f32> = u_xlat31;
        let x_214 : vec2<f32> = ((vec2<f32>(x_209.x, x_209.z) * vec2<f32>(0.5f, 0.5f)) + -(x_212));
        let x_215 : vec4<f32> = u_xlat3;
        u_xlat3 = vec4<f32>(x_214.x, x_214.y, x_215.z, x_215.w);
        let x_218 : vec2<f32> = u_xlat31;
        u_xlat33 = (-(x_218) + vec2<f32>(1.0f, 1.0f));
        let x_223 : vec2<f32> = u_xlat31;
        let x_225 : vec2<f32> = min(x_223, vec2<f32>(0.0f, 0.0f));
        let x_226 : vec4<f32> = u_xlat4;
        u_xlat4 = vec4<f32>(x_225.x, x_225.y, x_226.z, x_226.w);
        let x_228 : vec4<f32> = u_xlat4;
        let x_231 : vec4<f32> = u_xlat4;
        let x_234 : vec2<f32> = u_xlat33;
        let x_235 : vec2<f32> = ((-(vec2<f32>(x_228.x, x_228.y)) * vec2<f32>(x_231.x, x_231.y)) + x_234);
        let x_236 : vec4<f32> = u_xlat4;
        u_xlat4 = vec4<f32>(x_235.x, x_235.y, x_236.z, x_236.w);
        let x_238 : vec2<f32> = u_xlat31;
        u_xlat31 = max(x_238, vec2<f32>(0.0f, 0.0f));
        let x_240 : vec2<f32> = u_xlat31;
        let x_242 : vec2<f32> = u_xlat31;
        let x_244 : vec4<f32> = u_xlat2;
        u_xlat31 = ((-(x_240) * x_242) + vec2<f32>(x_244.y, x_244.w));
        let x_247 : vec4<f32> = u_xlat4;
        let x_249 : vec2<f32> = (vec2<f32>(x_247.x, x_247.y) + vec2<f32>(1.0f, 1.0f));
        let x_250 : vec4<f32> = u_xlat4;
        u_xlat4 = vec4<f32>(x_249.x, x_249.y, x_250.z, x_250.w);
        let x_252 : vec2<f32> = u_xlat31;
        u_xlat31 = (x_252 + vec2<f32>(1.0f, 1.0f));
        let x_255 : vec4<f32> = u_xlat3;
        let x_259 : vec2<f32> = (vec2<f32>(x_255.x, x_255.y) * vec2<f32>(0.159999996f, 0.159999996f));
        let x_260 : vec4<f32> = u_xlat5;
        u_xlat5 = vec4<f32>(x_259.x, x_259.y, x_260.z, x_260.w);
        let x_262 : vec2<f32> = u_xlat33;
        let x_263 : vec2<f32> = (x_262 * vec2<f32>(0.159999996f, 0.159999996f));
        let x_264 : vec4<f32> = u_xlat3;
        u_xlat3 = vec4<f32>(x_263.x, x_263.y, x_264.z, x_264.w);
        let x_266 : vec4<f32> = u_xlat4;
        let x_268 : vec2<f32> = (vec2<f32>(x_266.x, x_266.y) * vec2<f32>(0.159999996f, 0.159999996f));
        let x_269 : vec4<f32> = u_xlat4;
        u_xlat4 = vec4<f32>(x_268.x, x_268.y, x_269.z, x_269.w);
        let x_272 : vec2<f32> = u_xlat31;
        let x_273 : vec2<f32> = (x_272 * vec2<f32>(0.159999996f, 0.159999996f));
        let x_274 : vec4<f32> = u_xlat6;
        u_xlat6 = vec4<f32>(x_273.x, x_273.y, x_274.z, x_274.w);
        let x_276 : vec4<f32> = u_xlat2;
        u_xlat31 = (vec2<f32>(x_276.y, x_276.w) * vec2<f32>(0.159999996f, 0.159999996f));
        let x_280 : f32 = u_xlat4.x;
        u_xlat5.z = x_280;
        let x_283 : f32 = u_xlat31.x;
        u_xlat5.w = x_283;
        let x_286 : f32 = u_xlat6.x;
        u_xlat3.z = x_286;
        let x_289 : f32 = u_xlat2.x;
        u_xlat3.w = x_289;
        let x_292 : vec4<f32> = u_xlat3;
        let x_294 : vec4<f32> = u_xlat5;
        u_xlat7 = (vec4<f32>(x_292.z, x_292.w, x_292.x, x_292.z) + vec4<f32>(x_294.z, x_294.w, x_294.x, x_294.z));
        let x_298 : f32 = u_xlat5.y;
        u_xlat4.z = x_298;
        let x_301 : f32 = u_xlat31.y;
        u_xlat4.w = x_301;
        let x_304 : f32 = u_xlat3.y;
        u_xlat6.z = x_304;
        let x_307 : f32 = u_xlat2.z;
        u_xlat6.w = x_307;
        let x_309 : vec4<f32> = u_xlat4;
        let x_311 : vec4<f32> = u_xlat6;
        let x_313 : vec3<f32> = (vec3<f32>(x_309.z, x_309.y, x_309.w) + vec3<f32>(x_311.z, x_311.y, x_311.w));
        let x_314 : vec4<f32> = u_xlat2;
        u_xlat2 = vec4<f32>(x_313.x, x_313.y, x_313.z, x_314.w);
        let x_316 : vec4<f32> = u_xlat3;
        let x_318 : vec4<f32> = u_xlat7;
        let x_320 : vec3<f32> = (vec3<f32>(x_316.x, x_316.z, x_316.w) / vec3<f32>(x_318.z, x_318.w, x_318.y));
        let x_321 : vec4<f32> = u_xlat3;
        u_xlat3 = vec4<f32>(x_320.x, x_320.y, x_320.z, x_321.w);
        let x_323 : vec4<f32> = u_xlat3;
        let x_329 : vec3<f32> = (vec3<f32>(x_323.x, x_323.y, x_323.z) + vec3<f32>(-2.5f, -0.5f, 1.5f));
        let x_330 : vec4<f32> = u_xlat3;
        u_xlat3 = vec4<f32>(x_329.x, x_329.y, x_329.z, x_330.w);
        let x_332 : vec4<f32> = u_xlat6;
        let x_334 : vec4<f32> = u_xlat2;
        let x_336 : vec3<f32> = (vec3<f32>(x_332.z, x_332.y, x_332.w) / vec3<f32>(x_334.x, x_334.y, x_334.z));
        let x_337 : vec4<f32> = u_xlat4;
        u_xlat4 = vec4<f32>(x_336.x, x_336.y, x_336.z, x_337.w);
        let x_339 : vec4<f32> = u_xlat4;
        let x_341 : vec3<f32> = (vec3<f32>(x_339.x, x_339.y, x_339.z) + vec3<f32>(-2.5f, -0.5f, 1.5f));
        let x_342 : vec4<f32> = u_xlat4;
        u_xlat4 = vec4<f32>(x_341.x, x_341.y, x_341.z, x_342.w);
        let x_344 : vec4<f32> = u_xlat3;
        let x_347 : vec4<f32> = x_46.x_MainLightShadowmapSize;
        let x_349 : vec3<f32> = (vec3<f32>(x_344.y, x_344.x, x_344.z) * vec3<f32>(x_347.x, x_347.x, x_347.x));
        let x_350 : vec4<f32> = u_xlat3;
        u_xlat3 = vec4<f32>(x_349.x, x_349.y, x_349.z, x_350.w);
        let x_352 : vec4<f32> = u_xlat4;
        let x_355 : vec4<f32> = x_46.x_MainLightShadowmapSize;
        let x_357 : vec3<f32> = (vec3<f32>(x_352.x, x_352.y, x_352.z) * vec3<f32>(x_355.y, x_355.y, x_355.y));
        let x_358 : vec4<f32> = u_xlat4;
        u_xlat4 = vec4<f32>(x_357.x, x_357.y, x_357.z, x_358.w);
        let x_361 : f32 = u_xlat4.x;
        u_xlat3.w = x_361;
        let x_363 : vec4<f32> = u_xlat1;
        let x_366 : vec4<f32> = x_46.x_MainLightShadowmapSize;
        let x_369 : vec4<f32> = u_xlat3;
        u_xlat5 = ((vec4<f32>(x_363.x, x_363.y, x_363.x, x_363.y) * vec4<f32>(x_366.x, x_366.y, x_366.x, x_366.y)) + vec4<f32>(x_369.y, x_369.w, x_369.x, x_369.w));
        let x_372 : vec4<f32> = u_xlat1;
        let x_375 : vec4<f32> = x_46.x_MainLightShadowmapSize;
        let x_378 : vec4<f32> = u_xlat3;
        u_xlat31 = ((vec2<f32>(x_372.x, x_372.y) * vec2<f32>(x_375.x, x_375.y)) + vec2<f32>(x_378.z, x_378.w));
        let x_382 : f32 = u_xlat3.y;
        u_xlat4.w = x_382;
        let x_384 : vec4<f32> = u_xlat4;
        let x_385 : vec2<f32> = vec2<f32>(x_384.y, x_384.z);
        let x_386 : vec4<f32> = u_xlat3;
        u_xlat3 = vec4<f32>(x_386.x, x_385.x, x_386.z, x_385.y);
        let x_388 : vec4<f32> = u_xlat1;
        let x_391 : vec4<f32> = x_46.x_MainLightShadowmapSize;
        let x_394 : vec4<f32> = u_xlat3;
        u_xlat6 = ((vec4<f32>(x_388.x, x_388.y, x_388.x, x_388.y) * vec4<f32>(x_391.x, x_391.y, x_391.x, x_391.y)) + vec4<f32>(x_394.x, x_394.y, x_394.z, x_394.y));
        let x_397 : vec4<f32> = u_xlat1;
        let x_400 : vec4<f32> = x_46.x_MainLightShadowmapSize;
        let x_403 : vec4<f32> = u_xlat4;
        u_xlat4 = ((vec4<f32>(x_397.x, x_397.y, x_397.x, x_397.y) * vec4<f32>(x_400.x, x_400.y, x_400.x, x_400.y)) + vec4<f32>(x_403.w, x_403.y, x_403.w, x_403.z));
        let x_406 : vec4<f32> = u_xlat1;
        let x_409 : vec4<f32> = x_46.x_MainLightShadowmapSize;
        let x_412 : vec4<f32> = u_xlat3;
        u_xlat3 = ((vec4<f32>(x_406.x, x_406.y, x_406.x, x_406.y) * vec4<f32>(x_409.x, x_409.y, x_409.x, x_409.y)) + vec4<f32>(x_412.x, x_412.w, x_412.z, x_412.w));
        let x_416 : vec4<f32> = u_xlat2;
        let x_418 : vec4<f32> = u_xlat7;
        u_xlat8 = (vec4<f32>(x_416.x, x_416.x, x_416.x, x_416.y) * vec4<f32>(x_418.z, x_418.w, x_418.y, x_418.z));
        let x_422 : vec4<f32> = u_xlat2;
        let x_424 : vec4<f32> = u_xlat7;
        u_xlat9 = (vec4<f32>(x_422.y, x_422.y, x_422.z, x_422.z) * x_424);
        let x_427 : f32 = u_xlat2.z;
        let x_429 : f32 = u_xlat7.y;
        u_xlat1.x = (x_427 * x_429);
        let x_433 : vec4<f32> = u_xlat5;
        let x_434 : vec2<f32> = vec2<f32>(x_433.x, x_433.y);
        let x_436 : f32 = vs_TEXCOORD4.z;
        txVec4 = vec3<f32>(x_434.x, x_434.y, x_436);
        let x_444 : vec3<f32> = txVec4;
        let x_446 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_444.xy, x_444.z);
        u_xlat16 = x_446;
        let x_448 : vec4<f32> = u_xlat5;
        let x_449 : vec2<f32> = vec2<f32>(x_448.z, x_448.w);
        let x_451 : f32 = vs_TEXCOORD4.z;
        txVec5 = vec3<f32>(x_449.x, x_449.y, x_451);
        let x_458 : vec3<f32> = txVec5;
        let x_460 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_458.xy, x_458.z);
        u_xlat2.x = x_460;
        let x_463 : f32 = u_xlat2.x;
        let x_465 : f32 = u_xlat8.y;
        u_xlat2.x = (x_463 * x_465);
        let x_469 : f32 = u_xlat8.x;
        let x_470 : f32 = u_xlat16;
        let x_473 : f32 = u_xlat2.x;
        u_xlat16 = ((x_469 * x_470) + x_473);
        let x_476 : vec2<f32> = u_xlat31;
        let x_478 : f32 = vs_TEXCOORD4.z;
        txVec6 = vec3<f32>(x_476.x, x_476.y, x_478);
        let x_485 : vec3<f32> = txVec6;
        let x_487 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_485.xy, x_485.z);
        u_xlat31.x = x_487;
        let x_490 : f32 = u_xlat8.z;
        let x_492 : f32 = u_xlat31.x;
        let x_494 : f32 = u_xlat16;
        u_xlat16 = ((x_490 * x_492) + x_494);
        let x_497 : vec4<f32> = u_xlat4;
        let x_498 : vec2<f32> = vec2<f32>(x_497.x, x_497.y);
        let x_500 : f32 = vs_TEXCOORD4.z;
        txVec7 = vec3<f32>(x_498.x, x_498.y, x_500);
        let x_507 : vec3<f32> = txVec7;
        let x_509 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_507.xy, x_507.z);
        u_xlat31.x = x_509;
        let x_512 : f32 = u_xlat8.w;
        let x_514 : f32 = u_xlat31.x;
        let x_516 : f32 = u_xlat16;
        u_xlat16 = ((x_512 * x_514) + x_516);
        let x_519 : vec4<f32> = u_xlat6;
        let x_520 : vec2<f32> = vec2<f32>(x_519.x, x_519.y);
        let x_522 : f32 = vs_TEXCOORD4.z;
        txVec8 = vec3<f32>(x_520.x, x_520.y, x_522);
        let x_529 : vec3<f32> = txVec8;
        let x_531 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_529.xy, x_529.z);
        u_xlat31.x = x_531;
        let x_534 : f32 = u_xlat9.x;
        let x_536 : f32 = u_xlat31.x;
        let x_538 : f32 = u_xlat16;
        u_xlat16 = ((x_534 * x_536) + x_538);
        let x_541 : vec4<f32> = u_xlat6;
        let x_542 : vec2<f32> = vec2<f32>(x_541.z, x_541.w);
        let x_544 : f32 = vs_TEXCOORD4.z;
        txVec9 = vec3<f32>(x_542.x, x_542.y, x_544);
        let x_551 : vec3<f32> = txVec9;
        let x_553 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_551.xy, x_551.z);
        u_xlat31.x = x_553;
        let x_556 : f32 = u_xlat9.y;
        let x_558 : f32 = u_xlat31.x;
        let x_560 : f32 = u_xlat16;
        u_xlat16 = ((x_556 * x_558) + x_560);
        let x_563 : vec4<f32> = u_xlat4;
        let x_564 : vec2<f32> = vec2<f32>(x_563.z, x_563.w);
        let x_566 : f32 = vs_TEXCOORD4.z;
        txVec10 = vec3<f32>(x_564.x, x_564.y, x_566);
        let x_573 : vec3<f32> = txVec10;
        let x_575 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_573.xy, x_573.z);
        u_xlat31.x = x_575;
        let x_578 : f32 = u_xlat9.z;
        let x_580 : f32 = u_xlat31.x;
        let x_582 : f32 = u_xlat16;
        u_xlat16 = ((x_578 * x_580) + x_582);
        let x_585 : vec4<f32> = u_xlat3;
        let x_586 : vec2<f32> = vec2<f32>(x_585.x, x_585.y);
        let x_588 : f32 = vs_TEXCOORD4.z;
        txVec11 = vec3<f32>(x_586.x, x_586.y, x_588);
        let x_595 : vec3<f32> = txVec11;
        let x_597 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_595.xy, x_595.z);
        u_xlat31.x = x_597;
        let x_600 : f32 = u_xlat9.w;
        let x_602 : f32 = u_xlat31.x;
        let x_604 : f32 = u_xlat16;
        u_xlat16 = ((x_600 * x_602) + x_604);
        let x_607 : vec4<f32> = u_xlat3;
        let x_608 : vec2<f32> = vec2<f32>(x_607.z, x_607.w);
        let x_610 : f32 = vs_TEXCOORD4.z;
        txVec12 = vec3<f32>(x_608.x, x_608.y, x_610);
        let x_617 : vec3<f32> = txVec12;
        let x_619 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_617.xy, x_617.z);
        u_xlat31.x = x_619;
        let x_622 : f32 = u_xlat1.x;
        let x_624 : f32 = u_xlat31.x;
        let x_626 : f32 = u_xlat16;
        u_xlat45 = ((x_622 * x_624) + x_626);
      } else {
        let x_629 : vec4<f32> = vs_TEXCOORD4;
        let x_632 : vec4<f32> = x_46.x_MainLightShadowmapSize;
        let x_635 : vec2<f32> = ((vec2<f32>(x_629.x, x_629.y) * vec2<f32>(x_632.z, x_632.w)) + vec2<f32>(0.5f, 0.5f));
        let x_636 : vec4<f32> = u_xlat1;
        u_xlat1 = vec4<f32>(x_635.x, x_635.y, x_636.z, x_636.w);
        let x_638 : vec4<f32> = u_xlat1;
        let x_640 : vec2<f32> = floor(vec2<f32>(x_638.x, x_638.y));
        let x_641 : vec4<f32> = u_xlat1;
        u_xlat1 = vec4<f32>(x_640.x, x_640.y, x_641.z, x_641.w);
        let x_643 : vec4<f32> = vs_TEXCOORD4;
        let x_646 : vec4<f32> = x_46.x_MainLightShadowmapSize;
        let x_649 : vec4<f32> = u_xlat1;
        u_xlat31 = ((vec2<f32>(x_643.x, x_643.y) * vec2<f32>(x_646.z, x_646.w)) + -(vec2<f32>(x_649.x, x_649.y)));
        let x_653 : vec2<f32> = u_xlat31;
        u_xlat2 = (vec4<f32>(x_653.x, x_653.x, x_653.y, x_653.y) + vec4<f32>(0.5f, 1.0f, 0.5f, 1.0f));
        let x_656 : vec4<f32> = u_xlat2;
        let x_658 : vec4<f32> = u_xlat2;
        u_xlat3 = (vec4<f32>(x_656.x, x_656.x, x_656.z, x_656.z) * vec4<f32>(x_658.x, x_658.x, x_658.z, x_658.z));
        let x_661 : vec4<f32> = u_xlat3;
        let x_665 : vec2<f32> = (vec2<f32>(x_661.y, x_661.w) * vec2<f32>(0.040816002f, 0.040816002f));
        let x_666 : vec4<f32> = u_xlat4;
        u_xlat4 = vec4<f32>(x_666.x, x_665.x, x_666.z, x_665.y);
        let x_668 : vec4<f32> = u_xlat3;
        let x_671 : vec2<f32> = u_xlat31;
        let x_673 : vec2<f32> = ((vec2<f32>(x_668.x, x_668.z) * vec2<f32>(0.5f, 0.5f)) + -(x_671));
        let x_674 : vec4<f32> = u_xlat2;
        u_xlat2 = vec4<f32>(x_673.x, x_674.y, x_673.y, x_674.w);
        let x_676 : vec2<f32> = u_xlat31;
        let x_678 : vec2<f32> = (-(x_676) + vec2<f32>(1.0f, 1.0f));
        let x_679 : vec4<f32> = u_xlat3;
        u_xlat3 = vec4<f32>(x_678.x, x_678.y, x_679.z, x_679.w);
        let x_681 : vec2<f32> = u_xlat31;
        u_xlat33 = min(x_681, vec2<f32>(0.0f, 0.0f));
        let x_683 : vec2<f32> = u_xlat33;
        let x_685 : vec2<f32> = u_xlat33;
        let x_687 : vec4<f32> = u_xlat3;
        let x_689 : vec2<f32> = ((-(x_683) * x_685) + vec2<f32>(x_687.x, x_687.y));
        let x_690 : vec4<f32> = u_xlat3;
        u_xlat3 = vec4<f32>(x_689.x, x_689.y, x_690.z, x_690.w);
        let x_692 : vec2<f32> = u_xlat31;
        u_xlat33 = max(x_692, vec2<f32>(0.0f, 0.0f));
        let x_695 : vec2<f32> = u_xlat33;
        let x_697 : vec2<f32> = u_xlat33;
        let x_699 : vec4<f32> = u_xlat2;
        let x_701 : vec2<f32> = ((-(x_695) * x_697) + vec2<f32>(x_699.y, x_699.w));
        let x_702 : vec3<f32> = u_xlat17;
        u_xlat17 = vec3<f32>(x_701.x, x_702.y, x_701.y);
        let x_704 : vec4<f32> = u_xlat3;
        let x_707 : vec2<f32> = (vec2<f32>(x_704.x, x_704.y) + vec2<f32>(2.0f, 2.0f));
        let x_708 : vec4<f32> = u_xlat3;
        u_xlat3 = vec4<f32>(x_707.x, x_707.y, x_708.z, x_708.w);
        let x_710 : vec3<f32> = u_xlat17;
        let x_712 : vec2<f32> = (vec2<f32>(x_710.x, x_710.z) + vec2<f32>(2.0f, 2.0f));
        let x_713 : vec4<f32> = u_xlat2;
        u_xlat2 = vec4<f32>(x_713.x, x_712.x, x_713.z, x_712.y);
        let x_716 : f32 = u_xlat2.y;
        u_xlat5.z = (x_716 * 0.081632003f);
        let x_720 : vec4<f32> = u_xlat2;
        let x_723 : vec3<f32> = (vec3<f32>(x_720.z, x_720.x, x_720.w) * vec3<f32>(0.081632003f, 0.081632003f, 0.081632003f));
        let x_724 : vec4<f32> = u_xlat6;
        u_xlat6 = vec4<f32>(x_723.x, x_723.y, x_723.z, x_724.w);
        let x_726 : vec4<f32> = u_xlat3;
        let x_729 : vec2<f32> = (vec2<f32>(x_726.x, x_726.y) * vec2<f32>(0.081632003f, 0.081632003f));
        let x_730 : vec4<f32> = u_xlat2;
        u_xlat2 = vec4<f32>(x_729.x, x_729.y, x_730.z, x_730.w);
        let x_733 : f32 = u_xlat6.y;
        u_xlat5.x = x_733;
        let x_735 : vec2<f32> = u_xlat31;
        let x_742 : vec2<f32> = ((vec2<f32>(x_735.x, x_735.x) * vec2<f32>(-0.081632003f, 0.081632003f)) + vec2<f32>(0.163264006f, 0.081632003f));
        let x_743 : vec4<f32> = u_xlat5;
        u_xlat5 = vec4<f32>(x_743.x, x_742.x, x_743.z, x_742.y);
        let x_745 : vec2<f32> = u_xlat31;
        let x_749 : vec2<f32> = ((vec2<f32>(x_745.x, x_745.x) * vec2<f32>(-0.081632003f, 0.081632003f)) + vec2<f32>(0.081632003f, 0.163264006f));
        let x_750 : vec4<f32> = u_xlat3;
        u_xlat3 = vec4<f32>(x_749.x, x_750.y, x_749.y, x_750.w);
        let x_753 : f32 = u_xlat2.x;
        u_xlat3.y = x_753;
        let x_756 : f32 = u_xlat4.y;
        u_xlat3.w = x_756;
        let x_758 : vec4<f32> = u_xlat3;
        let x_759 : vec4<f32> = u_xlat5;
        u_xlat5 = (x_758 + x_759);
        let x_761 : vec2<f32> = u_xlat31;
        let x_764 : vec2<f32> = ((vec2<f32>(x_761.y, x_761.y) * vec2<f32>(-0.081632003f, 0.081632003f)) + vec2<f32>(0.163264006f, 0.081632003f));
        let x_765 : vec4<f32> = u_xlat6;
        u_xlat6 = vec4<f32>(x_765.x, x_764.x, x_765.z, x_764.y);
        let x_767 : vec2<f32> = u_xlat31;
        let x_770 : vec2<f32> = ((vec2<f32>(x_767.y, x_767.y) * vec2<f32>(-0.081632003f, 0.081632003f)) + vec2<f32>(0.081632003f, 0.163264006f));
        let x_771 : vec4<f32> = u_xlat4;
        u_xlat4 = vec4<f32>(x_770.x, x_771.y, x_770.y, x_771.w);
        let x_774 : f32 = u_xlat2.y;
        u_xlat4.y = x_774;
        let x_776 : vec4<f32> = u_xlat4;
        let x_777 : vec4<f32> = u_xlat6;
        u_xlat2 = (x_776 + x_777);
        let x_779 : vec4<f32> = u_xlat3;
        let x_780 : vec4<f32> = u_xlat5;
        u_xlat3 = (x_779 / x_780);
        let x_782 : vec4<f32> = u_xlat3;
        u_xlat3 = (x_782 + vec4<f32>(-3.5f, -1.5f, 0.5f, 2.5f));
        let x_788 : vec4<f32> = u_xlat4;
        let x_789 : vec4<f32> = u_xlat2;
        u_xlat4 = (x_788 / x_789);
        let x_791 : vec4<f32> = u_xlat4;
        u_xlat4 = (x_791 + vec4<f32>(-3.5f, -1.5f, 0.5f, 2.5f));
        let x_793 : vec4<f32> = u_xlat3;
        let x_796 : vec4<f32> = x_46.x_MainLightShadowmapSize;
        u_xlat3 = (vec4<f32>(x_793.w, x_793.x, x_793.y, x_793.z) * vec4<f32>(x_796.x, x_796.x, x_796.x, x_796.x));
        let x_799 : vec4<f32> = u_xlat4;
        let x_802 : vec4<f32> = x_46.x_MainLightShadowmapSize;
        u_xlat4 = (vec4<f32>(x_799.x, x_799.w, x_799.y, x_799.z) * vec4<f32>(x_802.y, x_802.y, x_802.y, x_802.y));
        let x_805 : vec4<f32> = u_xlat3;
        let x_806 : vec3<f32> = vec3<f32>(x_805.y, x_805.z, x_805.w);
        let x_807 : vec4<f32> = u_xlat6;
        u_xlat6 = vec4<f32>(x_806.x, x_807.y, x_806.y, x_806.z);
        let x_810 : f32 = u_xlat4.x;
        u_xlat6.y = x_810;
        let x_812 : vec4<f32> = u_xlat1;
        let x_815 : vec4<f32> = x_46.x_MainLightShadowmapSize;
        let x_818 : vec4<f32> = u_xlat6;
        u_xlat7 = ((vec4<f32>(x_812.x, x_812.y, x_812.x, x_812.y) * vec4<f32>(x_815.x, x_815.y, x_815.x, x_815.y)) + vec4<f32>(x_818.x, x_818.y, x_818.z, x_818.y));
        let x_821 : vec4<f32> = u_xlat1;
        let x_824 : vec4<f32> = x_46.x_MainLightShadowmapSize;
        let x_827 : vec4<f32> = u_xlat6;
        u_xlat31 = ((vec2<f32>(x_821.x, x_821.y) * vec2<f32>(x_824.x, x_824.y)) + vec2<f32>(x_827.w, x_827.y));
        let x_831 : f32 = u_xlat6.y;
        u_xlat3.y = x_831;
        let x_834 : f32 = u_xlat4.z;
        u_xlat6.y = x_834;
        let x_836 : vec4<f32> = u_xlat1;
        let x_839 : vec4<f32> = x_46.x_MainLightShadowmapSize;
        let x_842 : vec4<f32> = u_xlat6;
        u_xlat8 = ((vec4<f32>(x_836.x, x_836.y, x_836.x, x_836.y) * vec4<f32>(x_839.x, x_839.y, x_839.x, x_839.y)) + vec4<f32>(x_842.x, x_842.y, x_842.z, x_842.y));
        let x_845 : vec4<f32> = u_xlat1;
        let x_848 : vec4<f32> = x_46.x_MainLightShadowmapSize;
        let x_851 : vec4<f32> = u_xlat6;
        let x_853 : vec2<f32> = ((vec2<f32>(x_845.x, x_845.y) * vec2<f32>(x_848.x, x_848.y)) + vec2<f32>(x_851.w, x_851.y));
        let x_854 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_853.x, x_853.y, x_854.z, x_854.w);
        let x_857 : f32 = u_xlat6.y;
        u_xlat3.z = x_857;
        let x_860 : vec4<f32> = u_xlat1;
        let x_863 : vec4<f32> = x_46.x_MainLightShadowmapSize;
        let x_866 : vec4<f32> = u_xlat3;
        u_xlat10 = ((vec4<f32>(x_860.x, x_860.y, x_860.x, x_860.y) * vec4<f32>(x_863.x, x_863.y, x_863.x, x_863.y)) + vec4<f32>(x_866.x, x_866.y, x_866.x, x_866.z));
        let x_870 : f32 = u_xlat4.w;
        u_xlat6.y = x_870;
        let x_873 : vec4<f32> = u_xlat1;
        let x_876 : vec4<f32> = x_46.x_MainLightShadowmapSize;
        let x_879 : vec4<f32> = u_xlat6;
        u_xlat11 = ((vec4<f32>(x_873.x, x_873.y, x_873.x, x_873.y) * vec4<f32>(x_876.x, x_876.y, x_876.x, x_876.y)) + vec4<f32>(x_879.x, x_879.y, x_879.z, x_879.y));
        let x_883 : vec4<f32> = u_xlat1;
        let x_886 : vec4<f32> = x_46.x_MainLightShadowmapSize;
        let x_889 : vec4<f32> = u_xlat6;
        u_xlat18 = ((vec2<f32>(x_883.x, x_883.y) * vec2<f32>(x_886.x, x_886.y)) + vec2<f32>(x_889.w, x_889.y));
        let x_893 : f32 = u_xlat6.y;
        u_xlat3.w = x_893;
        let x_896 : vec4<f32> = u_xlat1;
        let x_899 : vec4<f32> = x_46.x_MainLightShadowmapSize;
        let x_902 : vec4<f32> = u_xlat3;
        u_xlat39 = ((vec2<f32>(x_896.x, x_896.y) * vec2<f32>(x_899.x, x_899.y)) + vec2<f32>(x_902.x, x_902.w));
        let x_905 : vec4<f32> = u_xlat6;
        let x_906 : vec3<f32> = vec3<f32>(x_905.x, x_905.z, x_905.w);
        let x_907 : vec4<f32> = u_xlat4;
        u_xlat4 = vec4<f32>(x_906.x, x_907.y, x_906.y, x_906.z);
        let x_909 : vec4<f32> = u_xlat1;
        let x_912 : vec4<f32> = x_46.x_MainLightShadowmapSize;
        let x_915 : vec4<f32> = u_xlat4;
        u_xlat6 = ((vec4<f32>(x_909.x, x_909.y, x_909.x, x_909.y) * vec4<f32>(x_912.x, x_912.y, x_912.x, x_912.y)) + vec4<f32>(x_915.x, x_915.y, x_915.z, x_915.y));
        let x_919 : vec4<f32> = u_xlat1;
        let x_922 : vec4<f32> = x_46.x_MainLightShadowmapSize;
        let x_925 : vec4<f32> = u_xlat4;
        u_xlat34 = ((vec2<f32>(x_919.x, x_919.y) * vec2<f32>(x_922.x, x_922.y)) + vec2<f32>(x_925.w, x_925.y));
        let x_929 : f32 = u_xlat3.x;
        u_xlat4.x = x_929;
        let x_931 : vec4<f32> = u_xlat1;
        let x_934 : vec4<f32> = x_46.x_MainLightShadowmapSize;
        let x_937 : vec4<f32> = u_xlat4;
        let x_939 : vec2<f32> = ((vec2<f32>(x_931.x, x_931.y) * vec2<f32>(x_934.x, x_934.y)) + vec2<f32>(x_937.x, x_937.y));
        let x_940 : vec4<f32> = u_xlat1;
        u_xlat1 = vec4<f32>(x_939.x, x_939.y, x_940.z, x_940.w);
        let x_943 : vec4<f32> = u_xlat2;
        let x_945 : vec4<f32> = u_xlat5;
        u_xlat12 = (vec4<f32>(x_943.x, x_943.x, x_943.x, x_943.x) * x_945);
        let x_948 : vec4<f32> = u_xlat2;
        let x_950 : vec4<f32> = u_xlat5;
        u_xlat13 = (vec4<f32>(x_948.y, x_948.y, x_948.y, x_948.y) * x_950);
        let x_953 : vec4<f32> = u_xlat2;
        let x_955 : vec4<f32> = u_xlat5;
        u_xlat14 = (vec4<f32>(x_953.z, x_953.z, x_953.z, x_953.z) * x_955);
        let x_957 : vec4<f32> = u_xlat2;
        let x_959 : vec4<f32> = u_xlat5;
        u_xlat2 = (vec4<f32>(x_957.w, x_957.w, x_957.w, x_957.w) * x_959);
        let x_962 : vec4<f32> = u_xlat7;
        let x_963 : vec2<f32> = vec2<f32>(x_962.x, x_962.y);
        let x_965 : f32 = vs_TEXCOORD4.z;
        txVec13 = vec3<f32>(x_963.x, x_963.y, x_965);
        let x_972 : vec3<f32> = txVec13;
        let x_974 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_972.xy, x_972.z);
        u_xlat3.x = x_974;
        let x_977 : vec4<f32> = u_xlat7;
        let x_978 : vec2<f32> = vec2<f32>(x_977.z, x_977.w);
        let x_980 : f32 = vs_TEXCOORD4.z;
        txVec14 = vec3<f32>(x_978.x, x_978.y, x_980);
        let x_988 : vec3<f32> = txVec14;
        let x_990 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_988.xy, x_988.z);
        u_xlat48 = x_990;
        let x_991 : f32 = u_xlat48;
        let x_993 : f32 = u_xlat12.y;
        u_xlat48 = (x_991 * x_993);
        let x_996 : f32 = u_xlat12.x;
        let x_998 : f32 = u_xlat3.x;
        let x_1000 : f32 = u_xlat48;
        u_xlat3.x = ((x_996 * x_998) + x_1000);
        let x_1004 : vec2<f32> = u_xlat31;
        let x_1006 : f32 = vs_TEXCOORD4.z;
        txVec15 = vec3<f32>(x_1004.x, x_1004.y, x_1006);
        let x_1013 : vec3<f32> = txVec15;
        let x_1015 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1013.xy, x_1013.z);
        u_xlat31.x = x_1015;
        let x_1018 : f32 = u_xlat12.z;
        let x_1020 : f32 = u_xlat31.x;
        let x_1023 : f32 = u_xlat3.x;
        u_xlat31.x = ((x_1018 * x_1020) + x_1023);
        let x_1027 : vec4<f32> = u_xlat10;
        let x_1028 : vec2<f32> = vec2<f32>(x_1027.x, x_1027.y);
        let x_1030 : f32 = vs_TEXCOORD4.z;
        txVec16 = vec3<f32>(x_1028.x, x_1028.y, x_1030);
        let x_1038 : vec3<f32> = txVec16;
        let x_1040 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1038.xy, x_1038.z);
        u_xlat46 = x_1040;
        let x_1042 : f32 = u_xlat12.w;
        let x_1043 : f32 = u_xlat46;
        let x_1046 : f32 = u_xlat31.x;
        u_xlat31.x = ((x_1042 * x_1043) + x_1046);
        let x_1050 : vec4<f32> = u_xlat8;
        let x_1051 : vec2<f32> = vec2<f32>(x_1050.x, x_1050.y);
        let x_1053 : f32 = vs_TEXCOORD4.z;
        txVec17 = vec3<f32>(x_1051.x, x_1051.y, x_1053);
        let x_1060 : vec3<f32> = txVec17;
        let x_1062 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1060.xy, x_1060.z);
        u_xlat46 = x_1062;
        let x_1064 : f32 = u_xlat13.x;
        let x_1065 : f32 = u_xlat46;
        let x_1068 : f32 = u_xlat31.x;
        u_xlat31.x = ((x_1064 * x_1065) + x_1068);
        let x_1072 : vec4<f32> = u_xlat8;
        let x_1073 : vec2<f32> = vec2<f32>(x_1072.z, x_1072.w);
        let x_1075 : f32 = vs_TEXCOORD4.z;
        txVec18 = vec3<f32>(x_1073.x, x_1073.y, x_1075);
        let x_1082 : vec3<f32> = txVec18;
        let x_1084 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1082.xy, x_1082.z);
        u_xlat46 = x_1084;
        let x_1086 : f32 = u_xlat13.y;
        let x_1087 : f32 = u_xlat46;
        let x_1090 : f32 = u_xlat31.x;
        u_xlat31.x = ((x_1086 * x_1087) + x_1090);
        let x_1094 : vec4<f32> = u_xlat9;
        let x_1095 : vec2<f32> = vec2<f32>(x_1094.x, x_1094.y);
        let x_1097 : f32 = vs_TEXCOORD4.z;
        txVec19 = vec3<f32>(x_1095.x, x_1095.y, x_1097);
        let x_1104 : vec3<f32> = txVec19;
        let x_1106 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1104.xy, x_1104.z);
        u_xlat46 = x_1106;
        let x_1108 : f32 = u_xlat13.z;
        let x_1109 : f32 = u_xlat46;
        let x_1112 : f32 = u_xlat31.x;
        u_xlat31.x = ((x_1108 * x_1109) + x_1112);
        let x_1116 : vec4<f32> = u_xlat10;
        let x_1117 : vec2<f32> = vec2<f32>(x_1116.z, x_1116.w);
        let x_1119 : f32 = vs_TEXCOORD4.z;
        txVec20 = vec3<f32>(x_1117.x, x_1117.y, x_1119);
        let x_1126 : vec3<f32> = txVec20;
        let x_1128 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1126.xy, x_1126.z);
        u_xlat46 = x_1128;
        let x_1130 : f32 = u_xlat13.w;
        let x_1131 : f32 = u_xlat46;
        let x_1134 : f32 = u_xlat31.x;
        u_xlat31.x = ((x_1130 * x_1131) + x_1134);
        let x_1138 : vec4<f32> = u_xlat11;
        let x_1139 : vec2<f32> = vec2<f32>(x_1138.x, x_1138.y);
        let x_1141 : f32 = vs_TEXCOORD4.z;
        txVec21 = vec3<f32>(x_1139.x, x_1139.y, x_1141);
        let x_1148 : vec3<f32> = txVec21;
        let x_1150 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1148.xy, x_1148.z);
        u_xlat46 = x_1150;
        let x_1152 : f32 = u_xlat14.x;
        let x_1153 : f32 = u_xlat46;
        let x_1156 : f32 = u_xlat31.x;
        u_xlat31.x = ((x_1152 * x_1153) + x_1156);
        let x_1160 : vec4<f32> = u_xlat11;
        let x_1161 : vec2<f32> = vec2<f32>(x_1160.z, x_1160.w);
        let x_1163 : f32 = vs_TEXCOORD4.z;
        txVec22 = vec3<f32>(x_1161.x, x_1161.y, x_1163);
        let x_1170 : vec3<f32> = txVec22;
        let x_1172 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1170.xy, x_1170.z);
        u_xlat46 = x_1172;
        let x_1174 : f32 = u_xlat14.y;
        let x_1175 : f32 = u_xlat46;
        let x_1178 : f32 = u_xlat31.x;
        u_xlat31.x = ((x_1174 * x_1175) + x_1178);
        let x_1182 : vec2<f32> = u_xlat18;
        let x_1184 : f32 = vs_TEXCOORD4.z;
        txVec23 = vec3<f32>(x_1182.x, x_1182.y, x_1184);
        let x_1191 : vec3<f32> = txVec23;
        let x_1193 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1191.xy, x_1191.z);
        u_xlat46 = x_1193;
        let x_1195 : f32 = u_xlat14.z;
        let x_1196 : f32 = u_xlat46;
        let x_1199 : f32 = u_xlat31.x;
        u_xlat31.x = ((x_1195 * x_1196) + x_1199);
        let x_1203 : vec2<f32> = u_xlat39;
        let x_1205 : f32 = vs_TEXCOORD4.z;
        txVec24 = vec3<f32>(x_1203.x, x_1203.y, x_1205);
        let x_1212 : vec3<f32> = txVec24;
        let x_1214 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1212.xy, x_1212.z);
        u_xlat46 = x_1214;
        let x_1216 : f32 = u_xlat14.w;
        let x_1217 : f32 = u_xlat46;
        let x_1220 : f32 = u_xlat31.x;
        u_xlat31.x = ((x_1216 * x_1217) + x_1220);
        let x_1224 : vec4<f32> = u_xlat6;
        let x_1225 : vec2<f32> = vec2<f32>(x_1224.x, x_1224.y);
        let x_1227 : f32 = vs_TEXCOORD4.z;
        txVec25 = vec3<f32>(x_1225.x, x_1225.y, x_1227);
        let x_1234 : vec3<f32> = txVec25;
        let x_1236 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1234.xy, x_1234.z);
        u_xlat46 = x_1236;
        let x_1238 : f32 = u_xlat2.x;
        let x_1239 : f32 = u_xlat46;
        let x_1242 : f32 = u_xlat31.x;
        u_xlat31.x = ((x_1238 * x_1239) + x_1242);
        let x_1246 : vec4<f32> = u_xlat6;
        let x_1247 : vec2<f32> = vec2<f32>(x_1246.z, x_1246.w);
        let x_1249 : f32 = vs_TEXCOORD4.z;
        txVec26 = vec3<f32>(x_1247.x, x_1247.y, x_1249);
        let x_1256 : vec3<f32> = txVec26;
        let x_1258 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1256.xy, x_1256.z);
        u_xlat46 = x_1258;
        let x_1260 : f32 = u_xlat2.y;
        let x_1261 : f32 = u_xlat46;
        let x_1264 : f32 = u_xlat31.x;
        u_xlat31.x = ((x_1260 * x_1261) + x_1264);
        let x_1268 : vec2<f32> = u_xlat34;
        let x_1270 : f32 = vs_TEXCOORD4.z;
        txVec27 = vec3<f32>(x_1268.x, x_1268.y, x_1270);
        let x_1277 : vec3<f32> = txVec27;
        let x_1279 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1277.xy, x_1277.z);
        u_xlat46 = x_1279;
        let x_1281 : f32 = u_xlat2.z;
        let x_1282 : f32 = u_xlat46;
        let x_1285 : f32 = u_xlat31.x;
        u_xlat31.x = ((x_1281 * x_1282) + x_1285);
        let x_1289 : vec4<f32> = u_xlat1;
        let x_1290 : vec2<f32> = vec2<f32>(x_1289.x, x_1289.y);
        let x_1292 : f32 = vs_TEXCOORD4.z;
        txVec28 = vec3<f32>(x_1290.x, x_1290.y, x_1292);
        let x_1299 : vec3<f32> = txVec28;
        let x_1301 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1299.xy, x_1299.z);
        u_xlat1.x = x_1301;
        let x_1304 : f32 = u_xlat2.w;
        let x_1306 : f32 = u_xlat1.x;
        let x_1309 : f32 = u_xlat31.x;
        u_xlat45 = ((x_1304 * x_1306) + x_1309);
      }
    }
  } else {
    let x_1313 : vec4<f32> = vs_TEXCOORD4;
    let x_1314 : vec2<f32> = vec2<f32>(x_1313.x, x_1313.y);
    let x_1316 : f32 = vs_TEXCOORD4.z;
    txVec29 = vec3<f32>(x_1314.x, x_1314.y, x_1316);
    let x_1323 : vec3<f32> = txVec29;
    let x_1325 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1323.xy, x_1323.z);
    u_xlat45 = x_1325;
  }
  let x_1327 : f32 = x_46.x_MainLightShadowParams.x;
  u_xlat1.x = (-(x_1327) + 1.0f);
  let x_1331 : f32 = u_xlat45;
  let x_1333 : f32 = x_46.x_MainLightShadowParams.x;
  let x_1336 : f32 = u_xlat1.x;
  u_xlat45 = ((x_1331 * x_1333) + x_1336);
  let x_1339 : f32 = vs_TEXCOORD4.z;
  u_xlatb1 = (0.0f >= x_1339);
  let x_1343 : f32 = vs_TEXCOORD4.z;
  u_xlatb16 = (x_1343 >= 1.0f);
  let x_1345 : bool = u_xlatb16;
  let x_1346 : bool = u_xlatb1;
  u_xlatb1 = (x_1345 | x_1346);
  let x_1348 : bool = u_xlatb1;
  let x_1349 : f32 = u_xlat45;
  u_xlat45 = select(x_1349, 1.0f, x_1348);
  let x_1352 : vec4<f32> = vs_TEXCOORD3;
  let x_1354 : f32 = u_xlat45;
  let x_1357 : vec3<f32> = u_xlat0;
  u_xlat0 = ((vec3<f32>(x_1352.x, x_1352.y, x_1352.z) * vec3<f32>(x_1354, x_1354, x_1354)) + x_1357);
  let x_1365 : vec2<f32> = vs_TEXCOORD0;
  let x_1367 : f32 = x_26.x_GlobalMipBias.x;
  let x_1368 : vec4<f32> = textureSampleBias(x_MainTex, sampler_MainTex, x_1365, x_1367);
  let x_1369 : vec3<f32> = vec3<f32>(x_1368.x, x_1368.y, x_1368.z);
  let x_1370 : vec4<f32> = u_xlat1;
  u_xlat1 = vec4<f32>(x_1369.x, x_1369.y, x_1369.z, x_1370.w);
  let x_1372 : vec4<f32> = u_xlat1;
  let x_1375 : vec4<f32> = vs_TEXCOORD2;
  let x_1377 : vec3<f32> = (vec3<f32>(x_1372.x, x_1372.y, x_1372.z) * vec3<f32>(x_1375.x, x_1375.y, x_1375.z));
  let x_1378 : vec4<f32> = u_xlat1;
  u_xlat1 = vec4<f32>(x_1377.x, x_1377.y, x_1377.z, x_1378.w);
  let x_1382 : vec3<f32> = u_xlat0;
  let x_1383 : vec4<f32> = u_xlat1;
  let x_1385 : vec3<f32> = (x_1382 * vec3<f32>(x_1383.x, x_1383.y, x_1383.z));
  let x_1386 : vec4<f32> = SV_Target3;
  SV_Target3 = vec4<f32>(x_1385.x, x_1385.y, x_1385.z, x_1386.w);
  SV_Target0 = vec4<f32>(0.0f, 0.0f, 0.0f, 0.0f);
  SV_Target1 = vec4<f32>(0.0f, 0.0f, 0.0f, 1.0f);
  let x_1395 : vec3<f32> = vs_TEXCOORD5;
  let x_1396 : vec4<f32> = SV_Target2;
  SV_Target2 = vec4<f32>(x_1395.x, x_1395.y, x_1395.z, x_1396.w);
  SV_Target2.w = 0.0f;
  SV_Target3.w = 1.0f;
  return;
}

struct main_out {
  @location(3)
  SV_Target3_1 : vec4<f32>,
  @location(0)
  SV_Target0_1 : vec4<f32>,
  @location(1)
  SV_Target1_1 : vec4<f32>,
  @location(2)
  SV_Target2_1 : vec4<f32>,
}

@fragment
fn main(@location(1) vs_TEXCOORD1_param : vec2<f32>, @location(4) vs_TEXCOORD4_param : vec4<f32>, @location(3) vs_TEXCOORD3_param : vec4<f32>, @location(0) vs_TEXCOORD0_param : vec2<f32>, @location(2) vs_TEXCOORD2_param : vec4<f32>, @location(5) vs_TEXCOORD5_param : vec3<f32>, @builtin(position) gl_FragCoord_param : vec4<f32>) -> main_out {
  vs_TEXCOORD1 = vs_TEXCOORD1_param;
  vs_TEXCOORD4 = vs_TEXCOORD4_param;
  vs_TEXCOORD3 = vs_TEXCOORD3_param;
  vs_TEXCOORD0 = vs_TEXCOORD0_param;
  vs_TEXCOORD2 = vs_TEXCOORD2_param;
  vs_TEXCOORD5 = vs_TEXCOORD5_param;
  gl_FragCoord = gl_FragCoord_param;
  main_1();
  return main_out(SV_Target3, SV_Target0, SV_Target1, SV_Target2);
}

