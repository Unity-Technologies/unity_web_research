struct PGlobals {
  x_ScaledScreenParams : vec4<f32>,
  x_GlobalMipBias : vec2<f32>,
  x_AlphaToMaskAvailable : f32,
  @size(4)
  padding : u32,
  x_MainLightPosition : vec4<f32>,
  x_MainLightColor : vec4<f32>,
  x_AmbientOcclusionParam : vec4<f32>,
  x_AdditionalLightsCount : vec4<f32>,
  x_RenderingLayerMaxInt : u32,
  x_RenderingLayerRcpMaxInt : f32,
  @size(8)
  padding_1 : u32,
  x_WorldSpaceCameraPos : vec3<f32>,
  @size(4)
  padding_2 : u32,
  x_ProjectionParams : vec4<f32>,
  unity_OrthoParams : vec4<f32>,
  x_ScaleBiasRt : vec4<f32>,
  unity_FogParams : vec4<f32>,
  unity_FogColor : vec4<f32>,
  unity_MatrixV : mat4x4<f32>,
}

struct UnityPerMaterial {
  Texture2D_B222E8F_TexelSize : vec4<f32>,
  Color_C30C7CA3 : vec4<f32>,
  Texture2D_D9BFD5F1_TexelSize : vec4<f32>,
}

type Arr = array<mat4x4<f32>, 5u>;

struct MainLightShadows {
  x_MainLightWorldToShadow : Arr,
  x_CascadeShadowSplitSpheres0 : vec4<f32>,
  x_CascadeShadowSplitSpheres1 : vec4<f32>,
  x_CascadeShadowSplitSpheres2 : vec4<f32>,
  x_CascadeShadowSplitSpheres3 : vec4<f32>,
  x_CascadeShadowSplitSphereRadii : vec4<f32>,
  x_MainLightShadowOffset0 : vec4<f32>,
  x_MainLightShadowOffset1 : vec4<f32>,
  x_MainLightShadowParams : vec4<f32>,
  x_MainLightShadowmapSize : vec4<f32>,
}

type Arr_1 = array<vec4<f32>, 2u>;

struct UnityPerDraw {
  unity_ObjectToWorld : mat4x4<f32>,
  unity_WorldToObject : mat4x4<f32>,
  unity_LODFade : vec4<f32>,
  unity_WorldTransformParams : vec4<f32>,
  unity_RenderingLayer : vec4<f32>,
  unity_LightData : vec4<f32>,
  unity_LightIndices : Arr_1,
  unity_ProbesOcclusion : vec4<f32>,
  unity_SpecCube0_HDR : vec4<f32>,
  unity_SpecCube1_HDR : vec4<f32>,
  unity_SpecCube0_BoxMax : vec4<f32>,
  unity_SpecCube0_BoxMin : vec4<f32>,
  unity_SpecCube0_ProbePosition : vec4<f32>,
  unity_SpecCube1_BoxMax : vec4<f32>,
  unity_SpecCube1_BoxMin : vec4<f32>,
  unity_SpecCube1_ProbePosition : vec4<f32>,
  unity_LightmapST : vec4<f32>,
  unity_DynamicLightmapST : vec4<f32>,
  unity_SHAr : vec4<f32>,
  unity_SHAg : vec4<f32>,
  unity_SHAb : vec4<f32>,
  unity_SHBr : vec4<f32>,
  unity_SHBg : vec4<f32>,
  unity_SHBb : vec4<f32>,
  unity_SHC : vec4<f32>,
  unity_RendererBounds_Min : vec4<f32>,
  unity_RendererBounds_Max : vec4<f32>,
  unity_MatrixPreviousM : mat4x4<f32>,
  unity_MatrixPreviousMI : mat4x4<f32>,
  unity_MotionVectorsParams : vec4<f32>,
  unity_SpriteColor : vec4<f32>,
  unity_SpriteProps : vec4<f32>,
}

type Arr_2 = array<vec4<f32>, 256u>;

type Arr_3 = array<vec4<f32>, 256u>;

type Arr_4 = array<vec4<f32>, 256u>;

type Arr_5 = array<vec4<f32>, 256u>;

type Arr_6 = array<vec4<f32>, 256u>;

struct strided_arr {
  @size(16)
  el : f32,
}

type Arr_7 = array<strided_arr, 256u>;

struct AdditionalLights {
  x_AdditionalLightsPosition : Arr_6,
  x_AdditionalLightsColor : Arr_6,
  x_AdditionalLightsAttenuation : Arr_6,
  x_AdditionalLightsSpotDir : Arr_6,
  x_AdditionalLightsOcclusionProbes : Arr_6,
  x_AdditionalLightsLayerMasks : Arr_7,
}

var<private> gl_FragCoord : vec4<f32>;

var<private> vs_INTERP1 : vec3<f32>;

@group(0) @binding(3) var Texture2D_B222E8F : texture_2d<f32>;

@group(0) @binding(8) var samplerTexture2D_B222E8F : sampler;

var<private> vs_INTERP3 : vec4<f32>;

@group(1) @binding(0) var<uniform> x_66 : PGlobals;

@group(1) @binding(4) var<uniform> x_78 : UnityPerMaterial;

@group(0) @binding(4) var Texture2D_D9BFD5F1 : texture_2d<f32>;

@group(0) @binding(9) var samplerTexture2D_D9BFD5F1 : sampler;

var<private> vs_INTERP4 : vec4<f32>;

var<private> vs_INTERP0 : vec3<f32>;

@group(1) @binding(3) var<uniform> x_139 : MainLightShadows;

@group(0) @binding(2) var x_MainLightShadowmapTexture : texture_depth_2d;

@group(0) @binding(7) var sampler_MainLightShadowmapTexture : sampler_comparison;

var<private> vs_INTERP2 : vec4<f32>;

@group(1) @binding(2) var<uniform> x_1592 : UnityPerDraw;

@group(0) @binding(1) var x_ScreenSpaceOcclusionTexture : texture_2d<f32>;

@group(0) @binding(6) var sampler_ScreenSpaceOcclusionTexture : sampler;

var<private> vs_INTERP9 : vec4<f32>;

@group(0) @binding(0) var unity_SpecCube0 : texture_cube<f32>;

@group(0) @binding(5) var samplerunity_SpecCube0 : sampler;

@group(1) @binding(1) var<uniform> x_3520 : AdditionalLights;

var<private> SV_Target0 : vec4<f32>;

var<private> SV_Target1 : vec4<f32>;

fn main_1() {
  var hlslcc_FragCoord : vec4<f32>;
  var u_xlat0 : vec3<f32>;
  var u_xlat1 : vec4<f32>;
  var u_xlat2 : vec3<f32>;
  var u_xlat3 : vec4<f32>;
  var u_xlat4 : vec4<f32>;
  var u_xlat63 : f32;
  var u_xlat24 : vec3<f32>;
  var u_xlatb63 : bool;
  var u_xlatb65 : bool;
  var u_xlat5 : vec4<f32>;
  var txVec0 : vec3<f32>;
  var u_xlat6 : vec4<f32>;
  var txVec1 : vec3<f32>;
  var txVec2 : vec3<f32>;
  var txVec3 : vec3<f32>;
  var u_xlat65 : f32;
  var u_xlatb67 : bool;
  var u_xlat47 : vec2<f32>;
  var u_xlat7 : vec4<f32>;
  var u_xlat49 : vec2<f32>;
  var u_xlat8 : vec4<f32>;
  var u_xlat9 : vec4<f32>;
  var u_xlat10 : vec4<f32>;
  var u_xlat11 : vec4<f32>;
  var u_xlat12 : vec4<f32>;
  var u_xlat13 : vec4<f32>;
  var u_xlat67 : f32;
  var txVec4 : vec3<f32>;
  var txVec5 : vec3<f32>;
  var u_xlat26 : f32;
  var txVec6 : vec3<f32>;
  var txVec7 : vec3<f32>;
  var txVec8 : vec3<f32>;
  var txVec9 : vec3<f32>;
  var txVec10 : vec3<f32>;
  var txVec11 : vec3<f32>;
  var txVec12 : vec3<f32>;
  var u_xlat27 : vec3<f32>;
  var u_xlat14 : vec4<f32>;
  var u_xlat15 : vec4<f32>;
  var u_xlat28 : vec2<f32>;
  var u_xlat55 : vec2<f32>;
  var u_xlat50 : vec2<f32>;
  var u_xlat16 : vec4<f32>;
  var u_xlat17 : vec4<f32>;
  var u_xlat18 : vec4<f32>;
  var txVec13 : vec3<f32>;
  var txVec14 : vec3<f32>;
  var txVec15 : vec3<f32>;
  var txVec16 : vec3<f32>;
  var txVec17 : vec3<f32>;
  var txVec18 : vec3<f32>;
  var txVec19 : vec3<f32>;
  var txVec20 : vec3<f32>;
  var txVec21 : vec3<f32>;
  var txVec22 : vec3<f32>;
  var txVec23 : vec3<f32>;
  var txVec24 : vec3<f32>;
  var txVec25 : vec3<f32>;
  var txVec26 : vec3<f32>;
  var txVec27 : vec3<f32>;
  var txVec28 : vec3<f32>;
  var txVec29 : vec3<f32>;
  var u_xlatb25 : bool;
  var u_xlatb46 : bool;
  var u_xlat25 : vec3<f32>;
  var u_xlatb1 : bool;
  var x_1505 : f32;
  var u_xlat22 : vec3<f32>;
  var u_xlat43 : f32;
  var u_xlat64 : f32;
  var u_xlatb43 : bool;
  var x_1553 : f32;
  var u_xlatb22 : vec3<bool>;
  var x_1691 : vec3<f32>;
  var u_xlat68 : f32;
  var u_xlat48 : f32;
  var txVec30 : vec3<f32>;
  var txVec31 : vec3<f32>;
  var txVec32 : vec3<f32>;
  var txVec33 : vec3<f32>;
  var u_xlatb69 : bool;
  var u_xlat51 : vec2<f32>;
  var u_xlat69 : f32;
  var txVec34 : vec3<f32>;
  var txVec35 : vec3<f32>;
  var txVec36 : vec3<f32>;
  var txVec37 : vec3<f32>;
  var txVec38 : vec3<f32>;
  var txVec39 : vec3<f32>;
  var txVec40 : vec3<f32>;
  var txVec41 : vec3<f32>;
  var txVec42 : vec3<f32>;
  var u_xlat29 : vec3<f32>;
  var u_xlat30 : vec3<f32>;
  var u_xlat57 : vec2<f32>;
  var u_xlat52 : vec2<f32>;
  var u_xlat19 : vec4<f32>;
  var u_xlat20 : vec4<f32>;
  var txVec43 : vec3<f32>;
  var txVec44 : vec3<f32>;
  var txVec45 : vec3<f32>;
  var txVec46 : vec3<f32>;
  var txVec47 : vec3<f32>;
  var txVec48 : vec3<f32>;
  var txVec49 : vec3<f32>;
  var txVec50 : vec3<f32>;
  var txVec51 : vec3<f32>;
  var txVec52 : vec3<f32>;
  var txVec53 : vec3<f32>;
  var txVec54 : vec3<f32>;
  var txVec55 : vec3<f32>;
  var txVec56 : vec3<f32>;
  var txVec57 : vec3<f32>;
  var txVec58 : vec3<f32>;
  var txVec59 : vec3<f32>;
  var u_xlatb4 : bool;
  var u_xlatu63 : u32;
  var u_xlatu_loop_1 : u32;
  var u_xlatu65 : u32;
  var u_xlati3 : i32;
  var indexable : array<vec4<u32>, 4u>;
  var u_xlati65 : i32;
  var x_3761 : f32;
  var u_xlatu0 : u32;
  var u_xlat_precise_vec4 : vec4<f32>;
  var u_xlat_precise_ivec4 : vec4<i32>;
  var u_xlat_precise_bvec4 : vec4<bool>;
  var u_xlat_precise_uvec4 : vec4<u32>;
  let x_13 : vec4<f32> = gl_FragCoord;
  let x_14 : vec3<f32> = vec3<f32>(x_13.x, x_13.y, x_13.z);
  let x_20 : f32 = gl_FragCoord.w;
  hlslcc_FragCoord = vec4<f32>(x_14.x, x_14.y, x_14.z, (1.0f / x_20));
  let x_30 : vec3<f32> = vs_INTERP1;
  let x_31 : vec3<f32> = vs_INTERP1;
  u_xlat0.x = dot(x_30, x_31);
  let x_37 : f32 = u_xlat0.x;
  u_xlat0.x = sqrt(x_37);
  let x_41 : f32 = u_xlat0.x;
  u_xlat0.x = (1.0f / x_41);
  let x_44 : vec3<f32> = u_xlat0;
  let x_46 : vec3<f32> = vs_INTERP1;
  u_xlat0 = (vec3<f32>(x_44.x, x_44.x, x_44.x) * x_46);
  let x_61 : vec4<f32> = vs_INTERP3;
  let x_71 : f32 = x_66.x_GlobalMipBias.x;
  let x_72 : vec4<f32> = textureSampleBias(Texture2D_B222E8F, samplerTexture2D_B222E8F, vec2<f32>(x_61.x, x_61.y), x_71);
  u_xlat1 = x_72;
  let x_74 : vec4<f32> = u_xlat1;
  let x_81 : vec4<f32> = x_78.Color_C30C7CA3;
  u_xlat2 = (vec3<f32>(x_74.x, x_74.y, x_74.z) * vec3<f32>(x_81.x, x_81.y, x_81.z));
  let x_90 : vec4<f32> = vs_INTERP3;
  let x_93 : f32 = x_66.x_GlobalMipBias.x;
  let x_94 : vec4<f32> = textureSampleBias(Texture2D_D9BFD5F1, samplerTexture2D_D9BFD5F1, vec2<f32>(x_90.x, x_90.y), x_93);
  u_xlat3 = vec4<f32>(x_94.w, x_94.x, x_94.y, x_94.z);
  let x_97 : vec4<f32> = u_xlat3;
  u_xlat4 = ((vec4<f32>(x_97.y, x_97.z, x_97.w, x_97.x) * vec4<f32>(2.0f, 2.0f, 2.0f, 2.0f)) + vec4<f32>(-1.0f, -1.0f, -1.0f, -1.0f));
  let x_106 : vec4<f32> = u_xlat4;
  let x_107 : vec4<f32> = u_xlat4;
  u_xlat63 = dot(x_106, x_107);
  let x_109 : f32 = u_xlat63;
  u_xlat63 = inverseSqrt(x_109);
  let x_112 : f32 = u_xlat63;
  let x_114 : vec4<f32> = u_xlat4;
  u_xlat24 = (vec3<f32>(x_112, x_112, x_112) * vec3<f32>(x_114.x, x_114.y, x_114.z));
  let x_120 : f32 = vs_INTERP4.y;
  u_xlat63 = (x_120 * 200.0f);
  let x_123 : f32 = u_xlat63;
  u_xlat63 = min(x_123, 1.0f);
  let x_125 : f32 = u_xlat63;
  let x_127 : vec4<f32> = u_xlat1;
  let x_129 : vec3<f32> = (vec3<f32>(x_125, x_125, x_125) * vec3<f32>(x_127.x, x_127.y, x_127.z));
  let x_130 : vec4<f32> = u_xlat1;
  u_xlat1 = vec4<f32>(x_129.x, x_129.y, x_129.z, x_130.w);
  let x_133 : vec3<f32> = vs_INTERP0;
  let x_142 : vec4<f32> = x_139.x_MainLightWorldToShadow[0i][1i];
  let x_144 : vec3<f32> = (vec3<f32>(x_133.y, x_133.y, x_133.y) * vec3<f32>(x_142.x, x_142.y, x_142.z));
  let x_145 : vec4<f32> = u_xlat4;
  u_xlat4 = vec4<f32>(x_144.x, x_144.y, x_144.z, x_145.w);
  let x_148 : vec4<f32> = x_139.x_MainLightWorldToShadow[0i][0i];
  let x_150 : vec3<f32> = vs_INTERP0;
  let x_153 : vec4<f32> = u_xlat4;
  let x_155 : vec3<f32> = ((vec3<f32>(x_148.x, x_148.y, x_148.z) * vec3<f32>(x_150.x, x_150.x, x_150.x)) + vec3<f32>(x_153.x, x_153.y, x_153.z));
  let x_156 : vec4<f32> = u_xlat4;
  u_xlat4 = vec4<f32>(x_155.x, x_155.y, x_155.z, x_156.w);
  let x_160 : vec4<f32> = x_139.x_MainLightWorldToShadow[0i][2i];
  let x_162 : vec3<f32> = vs_INTERP0;
  let x_165 : vec4<f32> = u_xlat4;
  let x_167 : vec3<f32> = ((vec3<f32>(x_160.x, x_160.y, x_160.z) * vec3<f32>(x_162.z, x_162.z, x_162.z)) + vec3<f32>(x_165.x, x_165.y, x_165.z));
  let x_168 : vec4<f32> = u_xlat4;
  u_xlat4 = vec4<f32>(x_167.x, x_167.y, x_167.z, x_168.w);
  let x_170 : vec4<f32> = u_xlat4;
  let x_174 : vec4<f32> = x_139.x_MainLightWorldToShadow[0i][3i];
  let x_176 : vec3<f32> = (vec3<f32>(x_170.x, x_170.y, x_170.z) + vec3<f32>(x_174.x, x_174.y, x_174.z));
  let x_177 : vec4<f32> = u_xlat4;
  u_xlat4 = vec4<f32>(x_176.x, x_176.y, x_176.z, x_177.w);
  let x_185 : f32 = x_139.x_MainLightShadowParams.y;
  u_xlatb63 = (0.0f < x_185);
  let x_187 : bool = u_xlatb63;
  if (x_187) {
    let x_192 : f32 = x_139.x_MainLightShadowParams.y;
    u_xlatb65 = (x_192 == 1.0f);
    let x_194 : bool = u_xlatb65;
    if (x_194) {
      let x_198 : vec4<f32> = u_xlat4;
      let x_202 : vec4<f32> = x_139.x_MainLightShadowOffset0;
      u_xlat5 = (vec4<f32>(x_198.x, x_198.y, x_198.x, x_198.y) + x_202);
      let x_205 : vec4<f32> = u_xlat5;
      let x_206 : vec2<f32> = vec2<f32>(x_205.x, x_205.y);
      let x_209 : f32 = u_xlat4.z;
      txVec0 = vec3<f32>(x_206.x, x_206.y, x_209);
      let x_222 : vec3<f32> = txVec0;
      let x_224 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_222.xy, x_222.z);
      u_xlat6.x = x_224;
      let x_227 : vec4<f32> = u_xlat5;
      let x_228 : vec2<f32> = vec2<f32>(x_227.z, x_227.w);
      let x_230 : f32 = u_xlat4.z;
      txVec1 = vec3<f32>(x_228.x, x_228.y, x_230);
      let x_237 : vec3<f32> = txVec1;
      let x_239 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_237.xy, x_237.z);
      u_xlat6.y = x_239;
      let x_241 : vec4<f32> = u_xlat4;
      let x_245 : vec4<f32> = x_139.x_MainLightShadowOffset1;
      u_xlat5 = (vec4<f32>(x_241.x, x_241.y, x_241.x, x_241.y) + x_245);
      let x_248 : vec4<f32> = u_xlat5;
      let x_249 : vec2<f32> = vec2<f32>(x_248.x, x_248.y);
      let x_251 : f32 = u_xlat4.z;
      txVec2 = vec3<f32>(x_249.x, x_249.y, x_251);
      let x_258 : vec3<f32> = txVec2;
      let x_260 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_258.xy, x_258.z);
      u_xlat6.z = x_260;
      let x_263 : vec4<f32> = u_xlat5;
      let x_264 : vec2<f32> = vec2<f32>(x_263.z, x_263.w);
      let x_266 : f32 = u_xlat4.z;
      txVec3 = vec3<f32>(x_264.x, x_264.y, x_266);
      let x_273 : vec3<f32> = txVec3;
      let x_275 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_273.xy, x_273.z);
      u_xlat6.w = x_275;
      let x_278 : vec4<f32> = u_xlat6;
      u_xlat65 = dot(x_278, vec4<f32>(0.25f, 0.25f, 0.25f, 0.25f));
    } else {
      let x_285 : f32 = x_139.x_MainLightShadowParams.y;
      u_xlatb67 = (x_285 == 2.0f);
      let x_287 : bool = u_xlatb67;
      if (x_287) {
        let x_290 : vec4<f32> = u_xlat4;
        let x_294 : vec4<f32> = x_139.x_MainLightShadowmapSize;
        let x_299 : vec2<f32> = ((vec2<f32>(x_290.x, x_290.y) * vec2<f32>(x_294.z, x_294.w)) + vec2<f32>(0.5f, 0.5f));
        let x_300 : vec4<f32> = u_xlat5;
        u_xlat5 = vec4<f32>(x_299.x, x_299.y, x_300.z, x_300.w);
        let x_302 : vec4<f32> = u_xlat5;
        let x_304 : vec2<f32> = floor(vec2<f32>(x_302.x, x_302.y));
        let x_305 : vec4<f32> = u_xlat5;
        u_xlat5 = vec4<f32>(x_304.x, x_304.y, x_305.z, x_305.w);
        let x_309 : vec4<f32> = u_xlat4;
        let x_312 : vec4<f32> = x_139.x_MainLightShadowmapSize;
        let x_315 : vec4<f32> = u_xlat5;
        u_xlat47 = ((vec2<f32>(x_309.x, x_309.y) * vec2<f32>(x_312.z, x_312.w)) + -(vec2<f32>(x_315.x, x_315.y)));
        let x_319 : vec2<f32> = u_xlat47;
        u_xlat6 = (vec4<f32>(x_319.x, x_319.x, x_319.y, x_319.y) + vec4<f32>(0.5f, 1.0f, 0.5f, 1.0f));
        let x_324 : vec4<f32> = u_xlat6;
        let x_326 : vec4<f32> = u_xlat6;
        u_xlat7 = (vec4<f32>(x_324.x, x_324.x, x_324.z, x_324.z) * vec4<f32>(x_326.x, x_326.x, x_326.z, x_326.z));
        let x_329 : vec4<f32> = u_xlat7;
        let x_333 : vec2<f32> = (vec2<f32>(x_329.y, x_329.w) * vec2<f32>(0.079999998f, 0.079999998f));
        let x_334 : vec4<f32> = u_xlat6;
        u_xlat6 = vec4<f32>(x_333.x, x_334.y, x_333.y, x_334.w);
        let x_336 : vec4<f32> = u_xlat7;
        let x_339 : vec2<f32> = u_xlat47;
        let x_341 : vec2<f32> = ((vec2<f32>(x_336.x, x_336.z) * vec2<f32>(0.5f, 0.5f)) + -(x_339));
        let x_342 : vec4<f32> = u_xlat7;
        u_xlat7 = vec4<f32>(x_341.x, x_341.y, x_342.z, x_342.w);
        let x_345 : vec2<f32> = u_xlat47;
        u_xlat49 = (-(x_345) + vec2<f32>(1.0f, 1.0f));
        let x_350 : vec2<f32> = u_xlat47;
        let x_352 : vec2<f32> = min(x_350, vec2<f32>(0.0f, 0.0f));
        let x_353 : vec4<f32> = u_xlat8;
        u_xlat8 = vec4<f32>(x_352.x, x_352.y, x_353.z, x_353.w);
        let x_355 : vec4<f32> = u_xlat8;
        let x_358 : vec4<f32> = u_xlat8;
        let x_361 : vec2<f32> = u_xlat49;
        let x_362 : vec2<f32> = ((-(vec2<f32>(x_355.x, x_355.y)) * vec2<f32>(x_358.x, x_358.y)) + x_361);
        let x_363 : vec4<f32> = u_xlat8;
        u_xlat8 = vec4<f32>(x_362.x, x_362.y, x_363.z, x_363.w);
        let x_365 : vec2<f32> = u_xlat47;
        u_xlat47 = max(x_365, vec2<f32>(0.0f, 0.0f));
        let x_367 : vec2<f32> = u_xlat47;
        let x_369 : vec2<f32> = u_xlat47;
        let x_371 : vec4<f32> = u_xlat6;
        u_xlat47 = ((-(x_367) * x_369) + vec2<f32>(x_371.y, x_371.w));
        let x_374 : vec4<f32> = u_xlat8;
        let x_376 : vec2<f32> = (vec2<f32>(x_374.x, x_374.y) + vec2<f32>(1.0f, 1.0f));
        let x_377 : vec4<f32> = u_xlat8;
        u_xlat8 = vec4<f32>(x_376.x, x_376.y, x_377.z, x_377.w);
        let x_379 : vec2<f32> = u_xlat47;
        u_xlat47 = (x_379 + vec2<f32>(1.0f, 1.0f));
        let x_382 : vec4<f32> = u_xlat7;
        let x_386 : vec2<f32> = (vec2<f32>(x_382.x, x_382.y) * vec2<f32>(0.159999996f, 0.159999996f));
        let x_387 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_386.x, x_386.y, x_387.z, x_387.w);
        let x_389 : vec2<f32> = u_xlat49;
        let x_390 : vec2<f32> = (x_389 * vec2<f32>(0.159999996f, 0.159999996f));
        let x_391 : vec4<f32> = u_xlat7;
        u_xlat7 = vec4<f32>(x_390.x, x_390.y, x_391.z, x_391.w);
        let x_393 : vec4<f32> = u_xlat8;
        let x_395 : vec2<f32> = (vec2<f32>(x_393.x, x_393.y) * vec2<f32>(0.159999996f, 0.159999996f));
        let x_396 : vec4<f32> = u_xlat8;
        u_xlat8 = vec4<f32>(x_395.x, x_395.y, x_396.z, x_396.w);
        let x_399 : vec2<f32> = u_xlat47;
        let x_400 : vec2<f32> = (x_399 * vec2<f32>(0.159999996f, 0.159999996f));
        let x_401 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_400.x, x_400.y, x_401.z, x_401.w);
        let x_403 : vec4<f32> = u_xlat6;
        u_xlat47 = (vec2<f32>(x_403.y, x_403.w) * vec2<f32>(0.159999996f, 0.159999996f));
        let x_407 : f32 = u_xlat8.x;
        u_xlat9.z = x_407;
        let x_410 : f32 = u_xlat47.x;
        u_xlat9.w = x_410;
        let x_413 : f32 = u_xlat10.x;
        u_xlat7.z = x_413;
        let x_416 : f32 = u_xlat6.x;
        u_xlat7.w = x_416;
        let x_419 : vec4<f32> = u_xlat7;
        let x_421 : vec4<f32> = u_xlat9;
        u_xlat11 = (vec4<f32>(x_419.z, x_419.w, x_419.x, x_419.z) + vec4<f32>(x_421.z, x_421.w, x_421.x, x_421.z));
        let x_425 : f32 = u_xlat9.y;
        u_xlat8.z = x_425;
        let x_428 : f32 = u_xlat47.y;
        u_xlat8.w = x_428;
        let x_431 : f32 = u_xlat7.y;
        u_xlat10.z = x_431;
        let x_434 : f32 = u_xlat6.z;
        u_xlat10.w = x_434;
        let x_436 : vec4<f32> = u_xlat8;
        let x_438 : vec4<f32> = u_xlat10;
        let x_440 : vec3<f32> = (vec3<f32>(x_436.z, x_436.y, x_436.w) + vec3<f32>(x_438.z, x_438.y, x_438.w));
        let x_441 : vec4<f32> = u_xlat6;
        u_xlat6 = vec4<f32>(x_440.x, x_440.y, x_440.z, x_441.w);
        let x_443 : vec4<f32> = u_xlat7;
        let x_445 : vec4<f32> = u_xlat11;
        let x_447 : vec3<f32> = (vec3<f32>(x_443.x, x_443.z, x_443.w) / vec3<f32>(x_445.z, x_445.w, x_445.y));
        let x_448 : vec4<f32> = u_xlat7;
        u_xlat7 = vec4<f32>(x_447.x, x_447.y, x_447.z, x_448.w);
        let x_450 : vec4<f32> = u_xlat7;
        let x_456 : vec3<f32> = (vec3<f32>(x_450.x, x_450.y, x_450.z) + vec3<f32>(-2.5f, -0.5f, 1.5f));
        let x_457 : vec4<f32> = u_xlat7;
        u_xlat7 = vec4<f32>(x_456.x, x_456.y, x_456.z, x_457.w);
        let x_459 : vec4<f32> = u_xlat10;
        let x_461 : vec4<f32> = u_xlat6;
        let x_463 : vec3<f32> = (vec3<f32>(x_459.z, x_459.y, x_459.w) / vec3<f32>(x_461.x, x_461.y, x_461.z));
        let x_464 : vec4<f32> = u_xlat8;
        u_xlat8 = vec4<f32>(x_463.x, x_463.y, x_463.z, x_464.w);
        let x_466 : vec4<f32> = u_xlat8;
        let x_468 : vec3<f32> = (vec3<f32>(x_466.x, x_466.y, x_466.z) + vec3<f32>(-2.5f, -0.5f, 1.5f));
        let x_469 : vec4<f32> = u_xlat8;
        u_xlat8 = vec4<f32>(x_468.x, x_468.y, x_468.z, x_469.w);
        let x_471 : vec4<f32> = u_xlat7;
        let x_474 : vec4<f32> = x_139.x_MainLightShadowmapSize;
        let x_476 : vec3<f32> = (vec3<f32>(x_471.y, x_471.x, x_471.z) * vec3<f32>(x_474.x, x_474.x, x_474.x));
        let x_477 : vec4<f32> = u_xlat7;
        u_xlat7 = vec4<f32>(x_476.x, x_476.y, x_476.z, x_477.w);
        let x_479 : vec4<f32> = u_xlat8;
        let x_482 : vec4<f32> = x_139.x_MainLightShadowmapSize;
        let x_484 : vec3<f32> = (vec3<f32>(x_479.x, x_479.y, x_479.z) * vec3<f32>(x_482.y, x_482.y, x_482.y));
        let x_485 : vec4<f32> = u_xlat8;
        u_xlat8 = vec4<f32>(x_484.x, x_484.y, x_484.z, x_485.w);
        let x_488 : f32 = u_xlat8.x;
        u_xlat7.w = x_488;
        let x_490 : vec4<f32> = u_xlat5;
        let x_493 : vec4<f32> = x_139.x_MainLightShadowmapSize;
        let x_496 : vec4<f32> = u_xlat7;
        u_xlat9 = ((vec4<f32>(x_490.x, x_490.y, x_490.x, x_490.y) * vec4<f32>(x_493.x, x_493.y, x_493.x, x_493.y)) + vec4<f32>(x_496.y, x_496.w, x_496.x, x_496.w));
        let x_499 : vec4<f32> = u_xlat5;
        let x_502 : vec4<f32> = x_139.x_MainLightShadowmapSize;
        let x_505 : vec4<f32> = u_xlat7;
        u_xlat47 = ((vec2<f32>(x_499.x, x_499.y) * vec2<f32>(x_502.x, x_502.y)) + vec2<f32>(x_505.z, x_505.w));
        let x_509 : f32 = u_xlat7.y;
        u_xlat8.w = x_509;
        let x_511 : vec4<f32> = u_xlat8;
        let x_512 : vec2<f32> = vec2<f32>(x_511.y, x_511.z);
        let x_513 : vec4<f32> = u_xlat7;
        u_xlat7 = vec4<f32>(x_513.x, x_512.x, x_513.z, x_512.y);
        let x_515 : vec4<f32> = u_xlat5;
        let x_518 : vec4<f32> = x_139.x_MainLightShadowmapSize;
        let x_521 : vec4<f32> = u_xlat7;
        u_xlat10 = ((vec4<f32>(x_515.x, x_515.y, x_515.x, x_515.y) * vec4<f32>(x_518.x, x_518.y, x_518.x, x_518.y)) + vec4<f32>(x_521.x, x_521.y, x_521.z, x_521.y));
        let x_524 : vec4<f32> = u_xlat5;
        let x_527 : vec4<f32> = x_139.x_MainLightShadowmapSize;
        let x_530 : vec4<f32> = u_xlat8;
        u_xlat8 = ((vec4<f32>(x_524.x, x_524.y, x_524.x, x_524.y) * vec4<f32>(x_527.x, x_527.y, x_527.x, x_527.y)) + vec4<f32>(x_530.w, x_530.y, x_530.w, x_530.z));
        let x_533 : vec4<f32> = u_xlat5;
        let x_536 : vec4<f32> = x_139.x_MainLightShadowmapSize;
        let x_539 : vec4<f32> = u_xlat7;
        u_xlat7 = ((vec4<f32>(x_533.x, x_533.y, x_533.x, x_533.y) * vec4<f32>(x_536.x, x_536.y, x_536.x, x_536.y)) + vec4<f32>(x_539.x, x_539.w, x_539.z, x_539.w));
        let x_543 : vec4<f32> = u_xlat6;
        let x_545 : vec4<f32> = u_xlat11;
        u_xlat12 = (vec4<f32>(x_543.x, x_543.x, x_543.x, x_543.y) * vec4<f32>(x_545.z, x_545.w, x_545.y, x_545.z));
        let x_549 : vec4<f32> = u_xlat6;
        let x_551 : vec4<f32> = u_xlat11;
        u_xlat13 = (vec4<f32>(x_549.y, x_549.y, x_549.z, x_549.z) * x_551);
        let x_555 : f32 = u_xlat6.z;
        let x_557 : f32 = u_xlat11.y;
        u_xlat67 = (x_555 * x_557);
        let x_560 : vec4<f32> = u_xlat9;
        let x_561 : vec2<f32> = vec2<f32>(x_560.x, x_560.y);
        let x_563 : f32 = u_xlat4.z;
        txVec4 = vec3<f32>(x_561.x, x_561.y, x_563);
        let x_570 : vec3<f32> = txVec4;
        let x_572 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_570.xy, x_570.z);
        u_xlat5.x = x_572;
        let x_575 : vec4<f32> = u_xlat9;
        let x_576 : vec2<f32> = vec2<f32>(x_575.z, x_575.w);
        let x_578 : f32 = u_xlat4.z;
        txVec5 = vec3<f32>(x_576.x, x_576.y, x_578);
        let x_586 : vec3<f32> = txVec5;
        let x_588 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_586.xy, x_586.z);
        u_xlat26 = x_588;
        let x_589 : f32 = u_xlat26;
        let x_591 : f32 = u_xlat12.y;
        u_xlat26 = (x_589 * x_591);
        let x_594 : f32 = u_xlat12.x;
        let x_596 : f32 = u_xlat5.x;
        let x_598 : f32 = u_xlat26;
        u_xlat5.x = ((x_594 * x_596) + x_598);
        let x_602 : vec2<f32> = u_xlat47;
        let x_604 : f32 = u_xlat4.z;
        txVec6 = vec3<f32>(x_602.x, x_602.y, x_604);
        let x_611 : vec3<f32> = txVec6;
        let x_613 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_611.xy, x_611.z);
        u_xlat26 = x_613;
        let x_615 : f32 = u_xlat12.z;
        let x_616 : f32 = u_xlat26;
        let x_619 : f32 = u_xlat5.x;
        u_xlat5.x = ((x_615 * x_616) + x_619);
        let x_623 : vec4<f32> = u_xlat8;
        let x_624 : vec2<f32> = vec2<f32>(x_623.x, x_623.y);
        let x_626 : f32 = u_xlat4.z;
        txVec7 = vec3<f32>(x_624.x, x_624.y, x_626);
        let x_633 : vec3<f32> = txVec7;
        let x_635 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_633.xy, x_633.z);
        u_xlat26 = x_635;
        let x_637 : f32 = u_xlat12.w;
        let x_638 : f32 = u_xlat26;
        let x_641 : f32 = u_xlat5.x;
        u_xlat5.x = ((x_637 * x_638) + x_641);
        let x_645 : vec4<f32> = u_xlat10;
        let x_646 : vec2<f32> = vec2<f32>(x_645.x, x_645.y);
        let x_648 : f32 = u_xlat4.z;
        txVec8 = vec3<f32>(x_646.x, x_646.y, x_648);
        let x_655 : vec3<f32> = txVec8;
        let x_657 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_655.xy, x_655.z);
        u_xlat26 = x_657;
        let x_659 : f32 = u_xlat13.x;
        let x_660 : f32 = u_xlat26;
        let x_663 : f32 = u_xlat5.x;
        u_xlat5.x = ((x_659 * x_660) + x_663);
        let x_667 : vec4<f32> = u_xlat10;
        let x_668 : vec2<f32> = vec2<f32>(x_667.z, x_667.w);
        let x_670 : f32 = u_xlat4.z;
        txVec9 = vec3<f32>(x_668.x, x_668.y, x_670);
        let x_677 : vec3<f32> = txVec9;
        let x_679 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_677.xy, x_677.z);
        u_xlat26 = x_679;
        let x_681 : f32 = u_xlat13.y;
        let x_682 : f32 = u_xlat26;
        let x_685 : f32 = u_xlat5.x;
        u_xlat5.x = ((x_681 * x_682) + x_685);
        let x_689 : vec4<f32> = u_xlat8;
        let x_690 : vec2<f32> = vec2<f32>(x_689.z, x_689.w);
        let x_692 : f32 = u_xlat4.z;
        txVec10 = vec3<f32>(x_690.x, x_690.y, x_692);
        let x_699 : vec3<f32> = txVec10;
        let x_701 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_699.xy, x_699.z);
        u_xlat26 = x_701;
        let x_703 : f32 = u_xlat13.z;
        let x_704 : f32 = u_xlat26;
        let x_707 : f32 = u_xlat5.x;
        u_xlat5.x = ((x_703 * x_704) + x_707);
        let x_711 : vec4<f32> = u_xlat7;
        let x_712 : vec2<f32> = vec2<f32>(x_711.x, x_711.y);
        let x_714 : f32 = u_xlat4.z;
        txVec11 = vec3<f32>(x_712.x, x_712.y, x_714);
        let x_721 : vec3<f32> = txVec11;
        let x_723 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_721.xy, x_721.z);
        u_xlat26 = x_723;
        let x_725 : f32 = u_xlat13.w;
        let x_726 : f32 = u_xlat26;
        let x_729 : f32 = u_xlat5.x;
        u_xlat5.x = ((x_725 * x_726) + x_729);
        let x_733 : vec4<f32> = u_xlat7;
        let x_734 : vec2<f32> = vec2<f32>(x_733.z, x_733.w);
        let x_736 : f32 = u_xlat4.z;
        txVec12 = vec3<f32>(x_734.x, x_734.y, x_736);
        let x_743 : vec3<f32> = txVec12;
        let x_745 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_743.xy, x_743.z);
        u_xlat26 = x_745;
        let x_746 : f32 = u_xlat67;
        let x_747 : f32 = u_xlat26;
        let x_750 : f32 = u_xlat5.x;
        u_xlat65 = ((x_746 * x_747) + x_750);
      } else {
        let x_753 : vec4<f32> = u_xlat4;
        let x_756 : vec4<f32> = x_139.x_MainLightShadowmapSize;
        let x_759 : vec2<f32> = ((vec2<f32>(x_753.x, x_753.y) * vec2<f32>(x_756.z, x_756.w)) + vec2<f32>(0.5f, 0.5f));
        let x_760 : vec4<f32> = u_xlat5;
        u_xlat5 = vec4<f32>(x_759.x, x_759.y, x_760.z, x_760.w);
        let x_762 : vec4<f32> = u_xlat5;
        let x_764 : vec2<f32> = floor(vec2<f32>(x_762.x, x_762.y));
        let x_765 : vec4<f32> = u_xlat5;
        u_xlat5 = vec4<f32>(x_764.x, x_764.y, x_765.z, x_765.w);
        let x_767 : vec4<f32> = u_xlat4;
        let x_770 : vec4<f32> = x_139.x_MainLightShadowmapSize;
        let x_773 : vec4<f32> = u_xlat5;
        u_xlat47 = ((vec2<f32>(x_767.x, x_767.y) * vec2<f32>(x_770.z, x_770.w)) + -(vec2<f32>(x_773.x, x_773.y)));
        let x_777 : vec2<f32> = u_xlat47;
        u_xlat6 = (vec4<f32>(x_777.x, x_777.x, x_777.y, x_777.y) + vec4<f32>(0.5f, 1.0f, 0.5f, 1.0f));
        let x_780 : vec4<f32> = u_xlat6;
        let x_782 : vec4<f32> = u_xlat6;
        u_xlat7 = (vec4<f32>(x_780.x, x_780.x, x_780.z, x_780.z) * vec4<f32>(x_782.x, x_782.x, x_782.z, x_782.z));
        let x_785 : vec4<f32> = u_xlat7;
        let x_789 : vec2<f32> = (vec2<f32>(x_785.y, x_785.w) * vec2<f32>(0.040816002f, 0.040816002f));
        let x_790 : vec4<f32> = u_xlat8;
        u_xlat8 = vec4<f32>(x_790.x, x_789.x, x_790.z, x_789.y);
        let x_792 : vec4<f32> = u_xlat7;
        let x_795 : vec2<f32> = u_xlat47;
        let x_797 : vec2<f32> = ((vec2<f32>(x_792.x, x_792.z) * vec2<f32>(0.5f, 0.5f)) + -(x_795));
        let x_798 : vec4<f32> = u_xlat6;
        u_xlat6 = vec4<f32>(x_797.x, x_798.y, x_797.y, x_798.w);
        let x_800 : vec2<f32> = u_xlat47;
        let x_802 : vec2<f32> = (-(x_800) + vec2<f32>(1.0f, 1.0f));
        let x_803 : vec4<f32> = u_xlat7;
        u_xlat7 = vec4<f32>(x_802.x, x_802.y, x_803.z, x_803.w);
        let x_805 : vec2<f32> = u_xlat47;
        u_xlat49 = min(x_805, vec2<f32>(0.0f, 0.0f));
        let x_807 : vec2<f32> = u_xlat49;
        let x_809 : vec2<f32> = u_xlat49;
        let x_811 : vec4<f32> = u_xlat7;
        let x_813 : vec2<f32> = ((-(x_807) * x_809) + vec2<f32>(x_811.x, x_811.y));
        let x_814 : vec4<f32> = u_xlat7;
        u_xlat7 = vec4<f32>(x_813.x, x_813.y, x_814.z, x_814.w);
        let x_816 : vec2<f32> = u_xlat47;
        u_xlat49 = max(x_816, vec2<f32>(0.0f, 0.0f));
        let x_819 : vec2<f32> = u_xlat49;
        let x_821 : vec2<f32> = u_xlat49;
        let x_823 : vec4<f32> = u_xlat6;
        let x_825 : vec2<f32> = ((-(x_819) * x_821) + vec2<f32>(x_823.y, x_823.w));
        let x_826 : vec3<f32> = u_xlat27;
        u_xlat27 = vec3<f32>(x_825.x, x_826.y, x_825.y);
        let x_828 : vec4<f32> = u_xlat7;
        let x_831 : vec2<f32> = (vec2<f32>(x_828.x, x_828.y) + vec2<f32>(2.0f, 2.0f));
        let x_832 : vec4<f32> = u_xlat7;
        u_xlat7 = vec4<f32>(x_831.x, x_831.y, x_832.z, x_832.w);
        let x_834 : vec3<f32> = u_xlat27;
        let x_836 : vec2<f32> = (vec2<f32>(x_834.x, x_834.z) + vec2<f32>(2.0f, 2.0f));
        let x_837 : vec4<f32> = u_xlat6;
        u_xlat6 = vec4<f32>(x_837.x, x_836.x, x_837.z, x_836.y);
        let x_840 : f32 = u_xlat6.y;
        u_xlat9.z = (x_840 * 0.081632003f);
        let x_844 : vec4<f32> = u_xlat6;
        let x_847 : vec3<f32> = (vec3<f32>(x_844.z, x_844.x, x_844.w) * vec3<f32>(0.081632003f, 0.081632003f, 0.081632003f));
        let x_848 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_847.x, x_847.y, x_847.z, x_848.w);
        let x_850 : vec4<f32> = u_xlat7;
        let x_853 : vec2<f32> = (vec2<f32>(x_850.x, x_850.y) * vec2<f32>(0.081632003f, 0.081632003f));
        let x_854 : vec4<f32> = u_xlat6;
        u_xlat6 = vec4<f32>(x_853.x, x_853.y, x_854.z, x_854.w);
        let x_857 : f32 = u_xlat10.y;
        u_xlat9.x = x_857;
        let x_859 : vec2<f32> = u_xlat47;
        let x_866 : vec2<f32> = ((vec2<f32>(x_859.x, x_859.x) * vec2<f32>(-0.081632003f, 0.081632003f)) + vec2<f32>(0.163264006f, 0.081632003f));
        let x_867 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_867.x, x_866.x, x_867.z, x_866.y);
        let x_869 : vec2<f32> = u_xlat47;
        let x_873 : vec2<f32> = ((vec2<f32>(x_869.x, x_869.x) * vec2<f32>(-0.081632003f, 0.081632003f)) + vec2<f32>(0.081632003f, 0.163264006f));
        let x_874 : vec4<f32> = u_xlat7;
        u_xlat7 = vec4<f32>(x_873.x, x_874.y, x_873.y, x_874.w);
        let x_877 : f32 = u_xlat6.x;
        u_xlat7.y = x_877;
        let x_880 : f32 = u_xlat8.y;
        u_xlat7.w = x_880;
        let x_882 : vec4<f32> = u_xlat7;
        let x_883 : vec4<f32> = u_xlat9;
        u_xlat9 = (x_882 + x_883);
        let x_885 : vec2<f32> = u_xlat47;
        let x_888 : vec2<f32> = ((vec2<f32>(x_885.y, x_885.y) * vec2<f32>(-0.081632003f, 0.081632003f)) + vec2<f32>(0.163264006f, 0.081632003f));
        let x_889 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_889.x, x_888.x, x_889.z, x_888.y);
        let x_891 : vec2<f32> = u_xlat47;
        let x_894 : vec2<f32> = ((vec2<f32>(x_891.y, x_891.y) * vec2<f32>(-0.081632003f, 0.081632003f)) + vec2<f32>(0.081632003f, 0.163264006f));
        let x_895 : vec4<f32> = u_xlat8;
        u_xlat8 = vec4<f32>(x_894.x, x_895.y, x_894.y, x_895.w);
        let x_898 : f32 = u_xlat6.y;
        u_xlat8.y = x_898;
        let x_900 : vec4<f32> = u_xlat8;
        let x_901 : vec4<f32> = u_xlat10;
        u_xlat6 = (x_900 + x_901);
        let x_903 : vec4<f32> = u_xlat7;
        let x_904 : vec4<f32> = u_xlat9;
        u_xlat7 = (x_903 / x_904);
        let x_906 : vec4<f32> = u_xlat7;
        u_xlat7 = (x_906 + vec4<f32>(-3.5f, -1.5f, 0.5f, 2.5f));
        let x_912 : vec4<f32> = u_xlat8;
        let x_913 : vec4<f32> = u_xlat6;
        u_xlat8 = (x_912 / x_913);
        let x_915 : vec4<f32> = u_xlat8;
        u_xlat8 = (x_915 + vec4<f32>(-3.5f, -1.5f, 0.5f, 2.5f));
        let x_917 : vec4<f32> = u_xlat7;
        let x_920 : vec4<f32> = x_139.x_MainLightShadowmapSize;
        u_xlat7 = (vec4<f32>(x_917.w, x_917.x, x_917.y, x_917.z) * vec4<f32>(x_920.x, x_920.x, x_920.x, x_920.x));
        let x_923 : vec4<f32> = u_xlat8;
        let x_926 : vec4<f32> = x_139.x_MainLightShadowmapSize;
        u_xlat8 = (vec4<f32>(x_923.x, x_923.w, x_923.y, x_923.z) * vec4<f32>(x_926.y, x_926.y, x_926.y, x_926.y));
        let x_929 : vec4<f32> = u_xlat7;
        let x_930 : vec3<f32> = vec3<f32>(x_929.y, x_929.z, x_929.w);
        let x_931 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_930.x, x_931.y, x_930.y, x_930.z);
        let x_934 : f32 = u_xlat8.x;
        u_xlat10.y = x_934;
        let x_936 : vec4<f32> = u_xlat5;
        let x_939 : vec4<f32> = x_139.x_MainLightShadowmapSize;
        let x_942 : vec4<f32> = u_xlat10;
        u_xlat11 = ((vec4<f32>(x_936.x, x_936.y, x_936.x, x_936.y) * vec4<f32>(x_939.x, x_939.y, x_939.x, x_939.y)) + vec4<f32>(x_942.x, x_942.y, x_942.z, x_942.y));
        let x_945 : vec4<f32> = u_xlat5;
        let x_948 : vec4<f32> = x_139.x_MainLightShadowmapSize;
        let x_951 : vec4<f32> = u_xlat10;
        u_xlat47 = ((vec2<f32>(x_945.x, x_945.y) * vec2<f32>(x_948.x, x_948.y)) + vec2<f32>(x_951.w, x_951.y));
        let x_955 : f32 = u_xlat10.y;
        u_xlat7.y = x_955;
        let x_958 : f32 = u_xlat8.z;
        u_xlat10.y = x_958;
        let x_960 : vec4<f32> = u_xlat5;
        let x_963 : vec4<f32> = x_139.x_MainLightShadowmapSize;
        let x_966 : vec4<f32> = u_xlat10;
        u_xlat12 = ((vec4<f32>(x_960.x, x_960.y, x_960.x, x_960.y) * vec4<f32>(x_963.x, x_963.y, x_963.x, x_963.y)) + vec4<f32>(x_966.x, x_966.y, x_966.z, x_966.y));
        let x_969 : vec4<f32> = u_xlat5;
        let x_972 : vec4<f32> = x_139.x_MainLightShadowmapSize;
        let x_975 : vec4<f32> = u_xlat10;
        let x_977 : vec2<f32> = ((vec2<f32>(x_969.x, x_969.y) * vec2<f32>(x_972.x, x_972.y)) + vec2<f32>(x_975.w, x_975.y));
        let x_978 : vec4<f32> = u_xlat13;
        u_xlat13 = vec4<f32>(x_977.x, x_977.y, x_978.z, x_978.w);
        let x_981 : f32 = u_xlat10.y;
        u_xlat7.z = x_981;
        let x_984 : vec4<f32> = u_xlat5;
        let x_987 : vec4<f32> = x_139.x_MainLightShadowmapSize;
        let x_990 : vec4<f32> = u_xlat7;
        u_xlat14 = ((vec4<f32>(x_984.x, x_984.y, x_984.x, x_984.y) * vec4<f32>(x_987.x, x_987.y, x_987.x, x_987.y)) + vec4<f32>(x_990.x, x_990.y, x_990.x, x_990.z));
        let x_994 : f32 = u_xlat8.w;
        u_xlat10.y = x_994;
        let x_997 : vec4<f32> = u_xlat5;
        let x_1000 : vec4<f32> = x_139.x_MainLightShadowmapSize;
        let x_1003 : vec4<f32> = u_xlat10;
        u_xlat15 = ((vec4<f32>(x_997.x, x_997.y, x_997.x, x_997.y) * vec4<f32>(x_1000.x, x_1000.y, x_1000.x, x_1000.y)) + vec4<f32>(x_1003.x, x_1003.y, x_1003.z, x_1003.y));
        let x_1007 : vec4<f32> = u_xlat5;
        let x_1010 : vec4<f32> = x_139.x_MainLightShadowmapSize;
        let x_1013 : vec4<f32> = u_xlat10;
        u_xlat28 = ((vec2<f32>(x_1007.x, x_1007.y) * vec2<f32>(x_1010.x, x_1010.y)) + vec2<f32>(x_1013.w, x_1013.y));
        let x_1017 : f32 = u_xlat10.y;
        u_xlat7.w = x_1017;
        let x_1020 : vec4<f32> = u_xlat5;
        let x_1023 : vec4<f32> = x_139.x_MainLightShadowmapSize;
        let x_1026 : vec4<f32> = u_xlat7;
        u_xlat55 = ((vec2<f32>(x_1020.x, x_1020.y) * vec2<f32>(x_1023.x, x_1023.y)) + vec2<f32>(x_1026.x, x_1026.w));
        let x_1029 : vec4<f32> = u_xlat10;
        let x_1030 : vec3<f32> = vec3<f32>(x_1029.x, x_1029.z, x_1029.w);
        let x_1031 : vec4<f32> = u_xlat8;
        u_xlat8 = vec4<f32>(x_1030.x, x_1031.y, x_1030.y, x_1030.z);
        let x_1033 : vec4<f32> = u_xlat5;
        let x_1036 : vec4<f32> = x_139.x_MainLightShadowmapSize;
        let x_1039 : vec4<f32> = u_xlat8;
        u_xlat10 = ((vec4<f32>(x_1033.x, x_1033.y, x_1033.x, x_1033.y) * vec4<f32>(x_1036.x, x_1036.y, x_1036.x, x_1036.y)) + vec4<f32>(x_1039.x, x_1039.y, x_1039.z, x_1039.y));
        let x_1043 : vec4<f32> = u_xlat5;
        let x_1046 : vec4<f32> = x_139.x_MainLightShadowmapSize;
        let x_1049 : vec4<f32> = u_xlat8;
        u_xlat50 = ((vec2<f32>(x_1043.x, x_1043.y) * vec2<f32>(x_1046.x, x_1046.y)) + vec2<f32>(x_1049.w, x_1049.y));
        let x_1053 : f32 = u_xlat7.x;
        u_xlat8.x = x_1053;
        let x_1055 : vec4<f32> = u_xlat5;
        let x_1058 : vec4<f32> = x_139.x_MainLightShadowmapSize;
        let x_1061 : vec4<f32> = u_xlat8;
        let x_1063 : vec2<f32> = ((vec2<f32>(x_1055.x, x_1055.y) * vec2<f32>(x_1058.x, x_1058.y)) + vec2<f32>(x_1061.x, x_1061.y));
        let x_1064 : vec4<f32> = u_xlat5;
        u_xlat5 = vec4<f32>(x_1063.x, x_1063.y, x_1064.z, x_1064.w);
        let x_1067 : vec4<f32> = u_xlat6;
        let x_1069 : vec4<f32> = u_xlat9;
        u_xlat16 = (vec4<f32>(x_1067.x, x_1067.x, x_1067.x, x_1067.x) * x_1069);
        let x_1072 : vec4<f32> = u_xlat6;
        let x_1074 : vec4<f32> = u_xlat9;
        u_xlat17 = (vec4<f32>(x_1072.y, x_1072.y, x_1072.y, x_1072.y) * x_1074);
        let x_1077 : vec4<f32> = u_xlat6;
        let x_1079 : vec4<f32> = u_xlat9;
        u_xlat18 = (vec4<f32>(x_1077.z, x_1077.z, x_1077.z, x_1077.z) * x_1079);
        let x_1081 : vec4<f32> = u_xlat6;
        let x_1083 : vec4<f32> = u_xlat9;
        u_xlat6 = (vec4<f32>(x_1081.w, x_1081.w, x_1081.w, x_1081.w) * x_1083);
        let x_1086 : vec4<f32> = u_xlat11;
        let x_1087 : vec2<f32> = vec2<f32>(x_1086.x, x_1086.y);
        let x_1089 : f32 = u_xlat4.z;
        txVec13 = vec3<f32>(x_1087.x, x_1087.y, x_1089);
        let x_1096 : vec3<f32> = txVec13;
        let x_1098 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1096.xy, x_1096.z);
        u_xlat67 = x_1098;
        let x_1100 : vec4<f32> = u_xlat11;
        let x_1101 : vec2<f32> = vec2<f32>(x_1100.z, x_1100.w);
        let x_1103 : f32 = u_xlat4.z;
        txVec14 = vec3<f32>(x_1101.x, x_1101.y, x_1103);
        let x_1110 : vec3<f32> = txVec14;
        let x_1112 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1110.xy, x_1110.z);
        u_xlat7.x = x_1112;
        let x_1115 : f32 = u_xlat7.x;
        let x_1117 : f32 = u_xlat16.y;
        u_xlat7.x = (x_1115 * x_1117);
        let x_1121 : f32 = u_xlat16.x;
        let x_1122 : f32 = u_xlat67;
        let x_1125 : f32 = u_xlat7.x;
        u_xlat67 = ((x_1121 * x_1122) + x_1125);
        let x_1128 : vec2<f32> = u_xlat47;
        let x_1130 : f32 = u_xlat4.z;
        txVec15 = vec3<f32>(x_1128.x, x_1128.y, x_1130);
        let x_1137 : vec3<f32> = txVec15;
        let x_1139 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1137.xy, x_1137.z);
        u_xlat47.x = x_1139;
        let x_1142 : f32 = u_xlat16.z;
        let x_1144 : f32 = u_xlat47.x;
        let x_1146 : f32 = u_xlat67;
        u_xlat67 = ((x_1142 * x_1144) + x_1146);
        let x_1149 : vec4<f32> = u_xlat14;
        let x_1150 : vec2<f32> = vec2<f32>(x_1149.x, x_1149.y);
        let x_1152 : f32 = u_xlat4.z;
        txVec16 = vec3<f32>(x_1150.x, x_1150.y, x_1152);
        let x_1159 : vec3<f32> = txVec16;
        let x_1161 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1159.xy, x_1159.z);
        u_xlat47.x = x_1161;
        let x_1164 : f32 = u_xlat16.w;
        let x_1166 : f32 = u_xlat47.x;
        let x_1168 : f32 = u_xlat67;
        u_xlat67 = ((x_1164 * x_1166) + x_1168);
        let x_1171 : vec4<f32> = u_xlat12;
        let x_1172 : vec2<f32> = vec2<f32>(x_1171.x, x_1171.y);
        let x_1174 : f32 = u_xlat4.z;
        txVec17 = vec3<f32>(x_1172.x, x_1172.y, x_1174);
        let x_1181 : vec3<f32> = txVec17;
        let x_1183 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1181.xy, x_1181.z);
        u_xlat47.x = x_1183;
        let x_1186 : f32 = u_xlat17.x;
        let x_1188 : f32 = u_xlat47.x;
        let x_1190 : f32 = u_xlat67;
        u_xlat67 = ((x_1186 * x_1188) + x_1190);
        let x_1193 : vec4<f32> = u_xlat12;
        let x_1194 : vec2<f32> = vec2<f32>(x_1193.z, x_1193.w);
        let x_1196 : f32 = u_xlat4.z;
        txVec18 = vec3<f32>(x_1194.x, x_1194.y, x_1196);
        let x_1203 : vec3<f32> = txVec18;
        let x_1205 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1203.xy, x_1203.z);
        u_xlat47.x = x_1205;
        let x_1208 : f32 = u_xlat17.y;
        let x_1210 : f32 = u_xlat47.x;
        let x_1212 : f32 = u_xlat67;
        u_xlat67 = ((x_1208 * x_1210) + x_1212);
        let x_1215 : vec4<f32> = u_xlat13;
        let x_1216 : vec2<f32> = vec2<f32>(x_1215.x, x_1215.y);
        let x_1218 : f32 = u_xlat4.z;
        txVec19 = vec3<f32>(x_1216.x, x_1216.y, x_1218);
        let x_1225 : vec3<f32> = txVec19;
        let x_1227 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1225.xy, x_1225.z);
        u_xlat47.x = x_1227;
        let x_1230 : f32 = u_xlat17.z;
        let x_1232 : f32 = u_xlat47.x;
        let x_1234 : f32 = u_xlat67;
        u_xlat67 = ((x_1230 * x_1232) + x_1234);
        let x_1237 : vec4<f32> = u_xlat14;
        let x_1238 : vec2<f32> = vec2<f32>(x_1237.z, x_1237.w);
        let x_1240 : f32 = u_xlat4.z;
        txVec20 = vec3<f32>(x_1238.x, x_1238.y, x_1240);
        let x_1247 : vec3<f32> = txVec20;
        let x_1249 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1247.xy, x_1247.z);
        u_xlat47.x = x_1249;
        let x_1252 : f32 = u_xlat17.w;
        let x_1254 : f32 = u_xlat47.x;
        let x_1256 : f32 = u_xlat67;
        u_xlat67 = ((x_1252 * x_1254) + x_1256);
        let x_1259 : vec4<f32> = u_xlat15;
        let x_1260 : vec2<f32> = vec2<f32>(x_1259.x, x_1259.y);
        let x_1262 : f32 = u_xlat4.z;
        txVec21 = vec3<f32>(x_1260.x, x_1260.y, x_1262);
        let x_1269 : vec3<f32> = txVec21;
        let x_1271 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1269.xy, x_1269.z);
        u_xlat47.x = x_1271;
        let x_1274 : f32 = u_xlat18.x;
        let x_1276 : f32 = u_xlat47.x;
        let x_1278 : f32 = u_xlat67;
        u_xlat67 = ((x_1274 * x_1276) + x_1278);
        let x_1281 : vec4<f32> = u_xlat15;
        let x_1282 : vec2<f32> = vec2<f32>(x_1281.z, x_1281.w);
        let x_1284 : f32 = u_xlat4.z;
        txVec22 = vec3<f32>(x_1282.x, x_1282.y, x_1284);
        let x_1291 : vec3<f32> = txVec22;
        let x_1293 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1291.xy, x_1291.z);
        u_xlat47.x = x_1293;
        let x_1296 : f32 = u_xlat18.y;
        let x_1298 : f32 = u_xlat47.x;
        let x_1300 : f32 = u_xlat67;
        u_xlat67 = ((x_1296 * x_1298) + x_1300);
        let x_1303 : vec2<f32> = u_xlat28;
        let x_1305 : f32 = u_xlat4.z;
        txVec23 = vec3<f32>(x_1303.x, x_1303.y, x_1305);
        let x_1312 : vec3<f32> = txVec23;
        let x_1314 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1312.xy, x_1312.z);
        u_xlat47.x = x_1314;
        let x_1317 : f32 = u_xlat18.z;
        let x_1319 : f32 = u_xlat47.x;
        let x_1321 : f32 = u_xlat67;
        u_xlat67 = ((x_1317 * x_1319) + x_1321);
        let x_1324 : vec2<f32> = u_xlat55;
        let x_1326 : f32 = u_xlat4.z;
        txVec24 = vec3<f32>(x_1324.x, x_1324.y, x_1326);
        let x_1333 : vec3<f32> = txVec24;
        let x_1335 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1333.xy, x_1333.z);
        u_xlat47.x = x_1335;
        let x_1338 : f32 = u_xlat18.w;
        let x_1340 : f32 = u_xlat47.x;
        let x_1342 : f32 = u_xlat67;
        u_xlat67 = ((x_1338 * x_1340) + x_1342);
        let x_1345 : vec4<f32> = u_xlat10;
        let x_1346 : vec2<f32> = vec2<f32>(x_1345.x, x_1345.y);
        let x_1348 : f32 = u_xlat4.z;
        txVec25 = vec3<f32>(x_1346.x, x_1346.y, x_1348);
        let x_1355 : vec3<f32> = txVec25;
        let x_1357 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1355.xy, x_1355.z);
        u_xlat47.x = x_1357;
        let x_1360 : f32 = u_xlat6.x;
        let x_1362 : f32 = u_xlat47.x;
        let x_1364 : f32 = u_xlat67;
        u_xlat67 = ((x_1360 * x_1362) + x_1364);
        let x_1367 : vec4<f32> = u_xlat10;
        let x_1368 : vec2<f32> = vec2<f32>(x_1367.z, x_1367.w);
        let x_1370 : f32 = u_xlat4.z;
        txVec26 = vec3<f32>(x_1368.x, x_1368.y, x_1370);
        let x_1377 : vec3<f32> = txVec26;
        let x_1379 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1377.xy, x_1377.z);
        u_xlat47.x = x_1379;
        let x_1382 : f32 = u_xlat6.y;
        let x_1384 : f32 = u_xlat47.x;
        let x_1386 : f32 = u_xlat67;
        u_xlat67 = ((x_1382 * x_1384) + x_1386);
        let x_1389 : vec2<f32> = u_xlat50;
        let x_1391 : f32 = u_xlat4.z;
        txVec27 = vec3<f32>(x_1389.x, x_1389.y, x_1391);
        let x_1398 : vec3<f32> = txVec27;
        let x_1400 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1398.xy, x_1398.z);
        u_xlat47.x = x_1400;
        let x_1403 : f32 = u_xlat6.z;
        let x_1405 : f32 = u_xlat47.x;
        let x_1407 : f32 = u_xlat67;
        u_xlat67 = ((x_1403 * x_1405) + x_1407);
        let x_1410 : vec4<f32> = u_xlat5;
        let x_1411 : vec2<f32> = vec2<f32>(x_1410.x, x_1410.y);
        let x_1413 : f32 = u_xlat4.z;
        txVec28 = vec3<f32>(x_1411.x, x_1411.y, x_1413);
        let x_1420 : vec3<f32> = txVec28;
        let x_1422 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1420.xy, x_1420.z);
        u_xlat5.x = x_1422;
        let x_1425 : f32 = u_xlat6.w;
        let x_1427 : f32 = u_xlat5.x;
        let x_1429 : f32 = u_xlat67;
        u_xlat65 = ((x_1425 * x_1427) + x_1429);
      }
    }
  } else {
    let x_1433 : vec4<f32> = u_xlat4;
    let x_1434 : vec2<f32> = vec2<f32>(x_1433.x, x_1433.y);
    let x_1436 : f32 = u_xlat4.z;
    txVec29 = vec3<f32>(x_1434.x, x_1434.y, x_1436);
    let x_1443 : vec3<f32> = txVec29;
    let x_1445 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1443.xy, x_1443.z);
    u_xlat65 = x_1445;
  }
  let x_1447 : f32 = x_139.x_MainLightShadowParams.x;
  u_xlat4.x = (-(x_1447) + 1.0f);
  let x_1451 : f32 = u_xlat65;
  let x_1453 : f32 = x_139.x_MainLightShadowParams.x;
  let x_1456 : f32 = u_xlat4.x;
  u_xlat65 = ((x_1451 * x_1453) + x_1456);
  let x_1460 : f32 = u_xlat4.z;
  u_xlatb25 = (0.0f >= x_1460);
  let x_1464 : f32 = u_xlat4.z;
  u_xlatb46 = (x_1464 >= 1.0f);
  let x_1466 : bool = u_xlatb46;
  let x_1467 : bool = u_xlatb25;
  u_xlatb25 = (x_1466 | x_1467);
  let x_1469 : bool = u_xlatb25;
  let x_1470 : f32 = u_xlat65;
  u_xlat65 = select(x_1470, 1.0f, x_1469);
  let x_1472 : vec3<f32> = u_xlat0;
  let x_1474 : vec4<f32> = x_66.x_MainLightPosition;
  u_xlat0.x = dot(x_1472, -(vec3<f32>(x_1474.x, x_1474.y, x_1474.z)));
  let x_1480 : f32 = u_xlat0.x;
  u_xlat0.x = clamp(x_1480, 0.0f, 1.0f);
  let x_1484 : f32 = u_xlat65;
  let x_1488 : vec4<f32> = x_66.x_MainLightColor;
  u_xlat25 = (vec3<f32>(x_1484, x_1484, x_1484) * vec3<f32>(x_1488.x, x_1488.y, x_1488.z));
  let x_1491 : vec3<f32> = u_xlat0;
  let x_1493 : vec3<f32> = u_xlat25;
  u_xlat0 = (vec3<f32>(x_1491.x, x_1491.x, x_1491.x) * x_1493);
  let x_1495 : vec3<f32> = u_xlat0;
  let x_1496 : vec4<f32> = u_xlat1;
  u_xlat0 = (x_1495 * vec3<f32>(x_1496.x, x_1496.y, x_1496.z));
  let x_1501 : f32 = u_xlat1.w;
  u_xlatb1 = (x_1501 >= 0.400000006f);
  let x_1504 : bool = u_xlatb1;
  if (x_1504) {
    let x_1509 : f32 = u_xlat1.w;
    x_1505 = x_1509;
  } else {
    x_1505 = 0.0f;
  }
  let x_1511 : f32 = x_1505;
  u_xlat1.x = x_1511;
  let x_1515 : f32 = u_xlat1.w;
  u_xlat22.x = (x_1515 + -0.400000006f);
  let x_1521 : f32 = u_xlat1.w;
  u_xlat43 = dpdxCoarse(x_1521);
  let x_1525 : f32 = u_xlat1.w;
  u_xlat64 = dpdyCoarse(x_1525);
  let x_1527 : f32 = u_xlat64;
  let x_1529 : f32 = u_xlat43;
  u_xlat43 = (abs(x_1527) + abs(x_1529));
  let x_1532 : f32 = u_xlat43;
  u_xlat43 = max(x_1532, 0.0001f);
  let x_1536 : f32 = u_xlat22.x;
  let x_1537 : f32 = u_xlat43;
  u_xlat22.x = (x_1536 / x_1537);
  let x_1541 : f32 = u_xlat22.x;
  u_xlat22.x = (x_1541 + 0.5f);
  let x_1545 : f32 = u_xlat22.x;
  u_xlat22.x = clamp(x_1545, 0.0f, 1.0f);
  let x_1550 : f32 = x_66.x_AlphaToMaskAvailable;
  u_xlatb43 = !((x_1550 == 0.0f));
  let x_1552 : bool = u_xlatb43;
  if (x_1552) {
    let x_1557 : f32 = u_xlat22.x;
    x_1553 = x_1557;
  } else {
    let x_1560 : f32 = u_xlat1.x;
    x_1553 = x_1560;
  }
  let x_1561 : f32 = x_1553;
  u_xlat1.x = x_1561;
  let x_1564 : f32 = u_xlat1.x;
  u_xlat22.x = (x_1564 + -0.0001f);
  let x_1572 : f32 = u_xlat22.x;
  u_xlatb22.x = (x_1572 < 0.0f);
  let x_1576 : bool = u_xlatb22.x;
  if (((select(0i, 1i, x_1576) * -1i) != 0i)) {
    discard;
  }
  let x_1586 : f32 = vs_INTERP2.w;
  u_xlatb22.x = (0.0f < x_1586);
  let x_1594 : f32 = x_1592.unity_WorldTransformParams.w;
  u_xlatb22.z = (x_1594 >= 0.0f);
  let x_1598 : bool = u_xlatb22.x;
  u_xlat22.x = select(-1.0f, 1.0f, x_1598);
  let x_1602 : bool = u_xlatb22.z;
  u_xlat22.z = select(-1.0f, 1.0f, x_1602);
  let x_1606 : f32 = u_xlat22.z;
  let x_1608 : f32 = u_xlat22.x;
  u_xlat22.x = (x_1606 * x_1608);
  let x_1611 : vec3<f32> = vs_INTERP1;
  let x_1613 : vec4<f32> = vs_INTERP2;
  u_xlat25 = (vec3<f32>(x_1611.z, x_1611.x, x_1611.y) * vec3<f32>(x_1613.y, x_1613.z, x_1613.x));
  let x_1616 : vec3<f32> = vs_INTERP1;
  let x_1618 : vec4<f32> = vs_INTERP2;
  let x_1621 : vec3<f32> = u_xlat25;
  u_xlat25 = ((vec3<f32>(x_1616.y, x_1616.z, x_1616.x) * vec3<f32>(x_1618.z, x_1618.x, x_1618.y)) + -(x_1621));
  let x_1624 : vec3<f32> = u_xlat22;
  let x_1626 : vec3<f32> = u_xlat25;
  u_xlat25 = (vec3<f32>(x_1624.x, x_1624.x, x_1624.x) * x_1626);
  let x_1628 : vec3<f32> = u_xlat24;
  let x_1630 : vec3<f32> = u_xlat25;
  u_xlat25 = (vec3<f32>(x_1628.y, x_1628.y, x_1628.y) * x_1630);
  let x_1632 : vec3<f32> = u_xlat24;
  let x_1634 : vec4<f32> = vs_INTERP2;
  let x_1637 : vec3<f32> = u_xlat25;
  u_xlat25 = ((vec3<f32>(x_1632.x, x_1632.x, x_1632.x) * vec3<f32>(x_1634.x, x_1634.y, x_1634.z)) + x_1637);
  let x_1639 : vec3<f32> = u_xlat24;
  let x_1641 : vec3<f32> = vs_INTERP1;
  let x_1643 : vec3<f32> = u_xlat25;
  u_xlat24 = ((vec3<f32>(x_1639.z, x_1639.z, x_1639.z) * x_1641) + x_1643);
  let x_1645 : vec3<f32> = u_xlat24;
  let x_1646 : vec3<f32> = u_xlat24;
  u_xlat22.x = dot(x_1645, x_1646);
  let x_1650 : f32 = u_xlat22.x;
  u_xlat22.x = inverseSqrt(x_1650);
  let x_1653 : vec3<f32> = u_xlat22;
  let x_1655 : vec3<f32> = u_xlat24;
  let x_1656 : vec3<f32> = (vec3<f32>(x_1653.x, x_1653.x, x_1653.x) * x_1655);
  let x_1657 : vec4<f32> = u_xlat5;
  u_xlat5 = vec4<f32>(x_1656.x, x_1656.y, x_1656.z, x_1657.w);
  let x_1661 : f32 = x_66.unity_OrthoParams.w;
  u_xlatb22.x = (x_1661 == 0.0f);
  let x_1664 : vec3<f32> = vs_INTERP0;
  let x_1668 : vec3<f32> = x_66.x_WorldSpaceCameraPos;
  u_xlat24 = (-(x_1664) + x_1668);
  let x_1670 : vec3<f32> = u_xlat24;
  let x_1671 : vec3<f32> = u_xlat24;
  u_xlat64 = dot(x_1670, x_1671);
  let x_1673 : f32 = u_xlat64;
  u_xlat64 = inverseSqrt(x_1673);
  let x_1675 : f32 = u_xlat64;
  let x_1677 : vec3<f32> = u_xlat24;
  u_xlat24 = (vec3<f32>(x_1675, x_1675, x_1675) * x_1677);
  let x_1681 : f32 = x_66.unity_MatrixV[0i].z;
  u_xlat6.x = x_1681;
  let x_1684 : f32 = x_66.unity_MatrixV[1i].z;
  u_xlat6.y = x_1684;
  let x_1687 : f32 = x_66.unity_MatrixV[2i].z;
  u_xlat6.z = x_1687;
  let x_1690 : bool = u_xlatb22.x;
  if (x_1690) {
    let x_1694 : vec3<f32> = u_xlat24;
    x_1691 = x_1694;
  } else {
    let x_1696 : vec4<f32> = u_xlat6;
    x_1691 = vec3<f32>(x_1696.x, x_1696.y, x_1696.z);
  }
  let x_1698 : vec3<f32> = x_1691;
  u_xlat24 = x_1698;
  let x_1700 : f32 = vs_INTERP0.y;
  let x_1702 : f32 = x_66.unity_MatrixV[1i].z;
  u_xlat22.x = (x_1700 * x_1702);
  let x_1706 : f32 = x_66.unity_MatrixV[0i].z;
  let x_1708 : f32 = vs_INTERP0.x;
  let x_1711 : f32 = u_xlat22.x;
  u_xlat22.x = ((x_1706 * x_1708) + x_1711);
  let x_1715 : f32 = x_66.unity_MatrixV[2i].z;
  let x_1717 : f32 = vs_INTERP0.z;
  let x_1720 : f32 = u_xlat22.x;
  u_xlat22.x = ((x_1715 * x_1717) + x_1720);
  let x_1724 : f32 = u_xlat22.x;
  let x_1726 : f32 = x_66.unity_MatrixV[3i].z;
  u_xlat22.x = (x_1724 + x_1726);
  let x_1730 : f32 = u_xlat22.x;
  let x_1734 : f32 = x_66.x_ProjectionParams.y;
  u_xlat22.x = (-(x_1730) + -(x_1734));
  let x_1739 : f32 = u_xlat22.x;
  u_xlat22.x = max(x_1739, 0.0f);
  let x_1743 : f32 = u_xlat22.x;
  let x_1746 : f32 = x_66.unity_FogParams.x;
  u_xlat22.x = (x_1743 * x_1746);
  u_xlat5.w = 1.0f;
  let x_1752 : vec4<f32> = x_1592.unity_SHAr;
  let x_1753 : vec4<f32> = u_xlat5;
  u_xlat6.x = dot(x_1752, x_1753);
  let x_1758 : vec4<f32> = x_1592.unity_SHAg;
  let x_1759 : vec4<f32> = u_xlat5;
  u_xlat6.y = dot(x_1758, x_1759);
  let x_1764 : vec4<f32> = x_1592.unity_SHAb;
  let x_1765 : vec4<f32> = u_xlat5;
  u_xlat6.z = dot(x_1764, x_1765);
  let x_1768 : vec4<f32> = u_xlat5;
  let x_1770 : vec4<f32> = u_xlat5;
  u_xlat7 = (vec4<f32>(x_1768.y, x_1768.z, x_1768.z, x_1768.x) * vec4<f32>(x_1770.x, x_1770.y, x_1770.z, x_1770.z));
  let x_1775 : vec4<f32> = x_1592.unity_SHBr;
  let x_1776 : vec4<f32> = u_xlat7;
  u_xlat8.x = dot(x_1775, x_1776);
  let x_1781 : vec4<f32> = x_1592.unity_SHBg;
  let x_1782 : vec4<f32> = u_xlat7;
  u_xlat8.y = dot(x_1781, x_1782);
  let x_1787 : vec4<f32> = x_1592.unity_SHBb;
  let x_1788 : vec4<f32> = u_xlat7;
  u_xlat8.z = dot(x_1787, x_1788);
  let x_1792 : f32 = u_xlat5.y;
  let x_1794 : f32 = u_xlat5.y;
  u_xlat64 = (x_1792 * x_1794);
  let x_1797 : f32 = u_xlat5.x;
  let x_1799 : f32 = u_xlat5.x;
  let x_1801 : f32 = u_xlat64;
  u_xlat64 = ((x_1797 * x_1799) + -(x_1801));
  let x_1806 : vec4<f32> = x_1592.unity_SHC;
  let x_1808 : f32 = u_xlat64;
  let x_1811 : vec4<f32> = u_xlat8;
  u_xlat25 = ((vec3<f32>(x_1806.x, x_1806.y, x_1806.z) * vec3<f32>(x_1808, x_1808, x_1808)) + vec3<f32>(x_1811.x, x_1811.y, x_1811.z));
  let x_1814 : vec3<f32> = u_xlat25;
  let x_1815 : vec4<f32> = u_xlat6;
  u_xlat25 = (x_1814 + vec3<f32>(x_1815.x, x_1815.y, x_1815.z));
  let x_1818 : vec3<f32> = u_xlat25;
  u_xlat25 = max(x_1818, vec3<f32>(0.0f, 0.0f, 0.0f));
  let x_1822 : vec4<f32> = x_66.x_ScaledScreenParams;
  let x_1823 : vec2<f32> = vec2<f32>(x_1822.x, x_1822.y);
  let x_1827 : vec2<f32> = (vec2<f32>(1.0f, 1.0f) / vec2<f32>(x_1823.x, x_1823.y));
  let x_1828 : vec4<f32> = u_xlat6;
  u_xlat6 = vec4<f32>(x_1827.x, x_1827.y, x_1828.z, x_1828.w);
  let x_1830 : vec4<f32> = u_xlat6;
  let x_1832 : vec4<f32> = hlslcc_FragCoord;
  let x_1834 : vec2<f32> = (vec2<f32>(x_1830.x, x_1830.y) * vec2<f32>(x_1832.x, x_1832.y));
  let x_1835 : vec4<f32> = u_xlat6;
  u_xlat6 = vec4<f32>(x_1834.x, x_1834.y, x_1835.z, x_1835.w);
  let x_1838 : f32 = u_xlat6.y;
  let x_1841 : f32 = x_66.x_ScaleBiasRt.x;
  let x_1844 : f32 = x_66.x_ScaleBiasRt.y;
  u_xlat64 = ((x_1838 * x_1841) + x_1844);
  let x_1846 : f32 = u_xlat64;
  u_xlat6.z = (-(x_1846) + 1.0f);
  let x_1851 : f32 = u_xlat3.x;
  u_xlat3.x = x_1851;
  let x_1854 : f32 = u_xlat3.x;
  u_xlat3.x = clamp(x_1854, 0.0f, 1.0f);
  let x_1858 : f32 = u_xlat1.x;
  u_xlat1.x = min(x_1858, 1.0f);
  let x_1861 : vec3<f32> = u_xlat2;
  u_xlat2 = (x_1861 * vec3<f32>(0.959999979f, 0.959999979f, 0.959999979f));
  let x_1866 : f32 = u_xlat3.x;
  u_xlat64 = (-(x_1866) + 1.0f);
  let x_1869 : f32 = u_xlat64;
  let x_1870 : f32 = u_xlat64;
  u_xlat65 = (x_1869 * x_1870);
  let x_1872 : f32 = u_xlat65;
  u_xlat65 = max(x_1872, 0.0078125f);
  let x_1876 : f32 = u_xlat65;
  let x_1877 : f32 = u_xlat65;
  u_xlat68 = (x_1876 * x_1877);
  let x_1880 : f32 = u_xlat3.x;
  u_xlat3.x = (x_1880 + 0.040000021f);
  let x_1885 : f32 = u_xlat3.x;
  u_xlat3.x = min(x_1885, 1.0f);
  let x_1888 : f32 = u_xlat65;
  u_xlat27.x = ((x_1888 * 4.0f) + 2.0f);
  let x_1898 : vec4<f32> = u_xlat6;
  let x_1901 : f32 = x_66.x_GlobalMipBias.x;
  let x_1902 : vec4<f32> = textureSampleBias(x_ScreenSpaceOcclusionTexture, sampler_ScreenSpaceOcclusionTexture, vec2<f32>(x_1898.x, x_1898.z), x_1901);
  u_xlat6.x = x_1902.x;
  let x_1907 : f32 = u_xlat6.x;
  u_xlat48 = (x_1907 + -1.0f);
  let x_1911 : f32 = x_66.x_AmbientOcclusionParam.w;
  let x_1912 : f32 = u_xlat48;
  u_xlat48 = ((x_1911 * x_1912) + 1.0f);
  let x_1916 : f32 = u_xlat6.x;
  let x_1918 : f32 = vs_INTERP4.w;
  u_xlat6.x = min(x_1916, x_1918);
  let x_1921 : bool = u_xlatb63;
  if (x_1921) {
    let x_1925 : f32 = x_139.x_MainLightShadowParams.y;
    u_xlatb63 = (x_1925 == 1.0f);
    let x_1927 : bool = u_xlatb63;
    if (x_1927) {
      let x_1931 : vec4<f32> = vs_INTERP9;
      let x_1934 : vec4<f32> = x_139.x_MainLightShadowOffset0;
      u_xlat7 = (vec4<f32>(x_1931.x, x_1931.y, x_1931.x, x_1931.y) + x_1934);
      let x_1937 : vec4<f32> = u_xlat7;
      let x_1938 : vec2<f32> = vec2<f32>(x_1937.x, x_1937.y);
      let x_1940 : f32 = vs_INTERP9.z;
      txVec30 = vec3<f32>(x_1938.x, x_1938.y, x_1940);
      let x_1947 : vec3<f32> = txVec30;
      let x_1949 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1947.xy, x_1947.z);
      u_xlat8.x = x_1949;
      let x_1952 : vec4<f32> = u_xlat7;
      let x_1953 : vec2<f32> = vec2<f32>(x_1952.z, x_1952.w);
      let x_1955 : f32 = vs_INTERP9.z;
      txVec31 = vec3<f32>(x_1953.x, x_1953.y, x_1955);
      let x_1962 : vec3<f32> = txVec31;
      let x_1964 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1962.xy, x_1962.z);
      u_xlat8.y = x_1964;
      let x_1966 : vec4<f32> = vs_INTERP9;
      let x_1969 : vec4<f32> = x_139.x_MainLightShadowOffset1;
      u_xlat7 = (vec4<f32>(x_1966.x, x_1966.y, x_1966.x, x_1966.y) + x_1969);
      let x_1972 : vec4<f32> = u_xlat7;
      let x_1973 : vec2<f32> = vec2<f32>(x_1972.x, x_1972.y);
      let x_1975 : f32 = vs_INTERP9.z;
      txVec32 = vec3<f32>(x_1973.x, x_1973.y, x_1975);
      let x_1982 : vec3<f32> = txVec32;
      let x_1984 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1982.xy, x_1982.z);
      u_xlat8.z = x_1984;
      let x_1987 : vec4<f32> = u_xlat7;
      let x_1988 : vec2<f32> = vec2<f32>(x_1987.z, x_1987.w);
      let x_1990 : f32 = vs_INTERP9.z;
      txVec33 = vec3<f32>(x_1988.x, x_1988.y, x_1990);
      let x_1997 : vec3<f32> = txVec33;
      let x_1999 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1997.xy, x_1997.z);
      u_xlat8.w = x_1999;
      let x_2001 : vec4<f32> = u_xlat8;
      u_xlat63 = dot(x_2001, vec4<f32>(0.25f, 0.25f, 0.25f, 0.25f));
    } else {
      let x_2006 : f32 = x_139.x_MainLightShadowParams.y;
      u_xlatb69 = (x_2006 == 2.0f);
      let x_2008 : bool = u_xlatb69;
      if (x_2008) {
        let x_2011 : vec4<f32> = vs_INTERP9;
        let x_2014 : vec4<f32> = x_139.x_MainLightShadowmapSize;
        let x_2017 : vec2<f32> = ((vec2<f32>(x_2011.x, x_2011.y) * vec2<f32>(x_2014.z, x_2014.w)) + vec2<f32>(0.5f, 0.5f));
        let x_2018 : vec4<f32> = u_xlat7;
        u_xlat7 = vec4<f32>(x_2017.x, x_2017.y, x_2018.z, x_2018.w);
        let x_2020 : vec4<f32> = u_xlat7;
        let x_2022 : vec2<f32> = floor(vec2<f32>(x_2020.x, x_2020.y));
        let x_2023 : vec4<f32> = u_xlat7;
        u_xlat7 = vec4<f32>(x_2022.x, x_2022.y, x_2023.z, x_2023.w);
        let x_2025 : vec4<f32> = vs_INTERP9;
        let x_2028 : vec4<f32> = x_139.x_MainLightShadowmapSize;
        let x_2031 : vec4<f32> = u_xlat7;
        u_xlat49 = ((vec2<f32>(x_2025.x, x_2025.y) * vec2<f32>(x_2028.z, x_2028.w)) + -(vec2<f32>(x_2031.x, x_2031.y)));
        let x_2035 : vec2<f32> = u_xlat49;
        u_xlat8 = (vec4<f32>(x_2035.x, x_2035.x, x_2035.y, x_2035.y) + vec4<f32>(0.5f, 1.0f, 0.5f, 1.0f));
        let x_2038 : vec4<f32> = u_xlat8;
        let x_2040 : vec4<f32> = u_xlat8;
        u_xlat9 = (vec4<f32>(x_2038.x, x_2038.x, x_2038.z, x_2038.z) * vec4<f32>(x_2040.x, x_2040.x, x_2040.z, x_2040.z));
        let x_2043 : vec4<f32> = u_xlat9;
        let x_2045 : vec2<f32> = (vec2<f32>(x_2043.y, x_2043.w) * vec2<f32>(0.079999998f, 0.079999998f));
        let x_2046 : vec4<f32> = u_xlat8;
        u_xlat8 = vec4<f32>(x_2045.x, x_2046.y, x_2045.y, x_2046.w);
        let x_2048 : vec4<f32> = u_xlat9;
        let x_2051 : vec2<f32> = u_xlat49;
        let x_2053 : vec2<f32> = ((vec2<f32>(x_2048.x, x_2048.z) * vec2<f32>(0.5f, 0.5f)) + -(x_2051));
        let x_2054 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_2053.x, x_2053.y, x_2054.z, x_2054.w);
        let x_2057 : vec2<f32> = u_xlat49;
        u_xlat51 = (-(x_2057) + vec2<f32>(1.0f, 1.0f));
        let x_2060 : vec2<f32> = u_xlat49;
        let x_2061 : vec2<f32> = min(x_2060, vec2<f32>(0.0f, 0.0f));
        let x_2062 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_2061.x, x_2061.y, x_2062.z, x_2062.w);
        let x_2064 : vec4<f32> = u_xlat10;
        let x_2067 : vec4<f32> = u_xlat10;
        let x_2070 : vec2<f32> = u_xlat51;
        let x_2071 : vec2<f32> = ((-(vec2<f32>(x_2064.x, x_2064.y)) * vec2<f32>(x_2067.x, x_2067.y)) + x_2070);
        let x_2072 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_2071.x, x_2071.y, x_2072.z, x_2072.w);
        let x_2074 : vec2<f32> = u_xlat49;
        u_xlat49 = max(x_2074, vec2<f32>(0.0f, 0.0f));
        let x_2076 : vec2<f32> = u_xlat49;
        let x_2078 : vec2<f32> = u_xlat49;
        let x_2080 : vec4<f32> = u_xlat8;
        u_xlat49 = ((-(x_2076) * x_2078) + vec2<f32>(x_2080.y, x_2080.w));
        let x_2083 : vec4<f32> = u_xlat10;
        let x_2085 : vec2<f32> = (vec2<f32>(x_2083.x, x_2083.y) + vec2<f32>(1.0f, 1.0f));
        let x_2086 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_2085.x, x_2085.y, x_2086.z, x_2086.w);
        let x_2088 : vec2<f32> = u_xlat49;
        u_xlat49 = (x_2088 + vec2<f32>(1.0f, 1.0f));
        let x_2090 : vec4<f32> = u_xlat9;
        let x_2092 : vec2<f32> = (vec2<f32>(x_2090.x, x_2090.y) * vec2<f32>(0.159999996f, 0.159999996f));
        let x_2093 : vec4<f32> = u_xlat11;
        u_xlat11 = vec4<f32>(x_2092.x, x_2092.y, x_2093.z, x_2093.w);
        let x_2095 : vec2<f32> = u_xlat51;
        let x_2096 : vec2<f32> = (x_2095 * vec2<f32>(0.159999996f, 0.159999996f));
        let x_2097 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_2096.x, x_2096.y, x_2097.z, x_2097.w);
        let x_2099 : vec4<f32> = u_xlat10;
        let x_2101 : vec2<f32> = (vec2<f32>(x_2099.x, x_2099.y) * vec2<f32>(0.159999996f, 0.159999996f));
        let x_2102 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_2101.x, x_2101.y, x_2102.z, x_2102.w);
        let x_2104 : vec2<f32> = u_xlat49;
        let x_2105 : vec2<f32> = (x_2104 * vec2<f32>(0.159999996f, 0.159999996f));
        let x_2106 : vec4<f32> = u_xlat12;
        u_xlat12 = vec4<f32>(x_2105.x, x_2105.y, x_2106.z, x_2106.w);
        let x_2108 : vec4<f32> = u_xlat8;
        u_xlat49 = (vec2<f32>(x_2108.y, x_2108.w) * vec2<f32>(0.159999996f, 0.159999996f));
        let x_2112 : f32 = u_xlat10.x;
        u_xlat11.z = x_2112;
        let x_2115 : f32 = u_xlat49.x;
        u_xlat11.w = x_2115;
        let x_2118 : f32 = u_xlat12.x;
        u_xlat9.z = x_2118;
        let x_2121 : f32 = u_xlat8.x;
        u_xlat9.w = x_2121;
        let x_2123 : vec4<f32> = u_xlat9;
        let x_2125 : vec4<f32> = u_xlat11;
        u_xlat13 = (vec4<f32>(x_2123.z, x_2123.w, x_2123.x, x_2123.z) + vec4<f32>(x_2125.z, x_2125.w, x_2125.x, x_2125.z));
        let x_2129 : f32 = u_xlat11.y;
        u_xlat10.z = x_2129;
        let x_2132 : f32 = u_xlat49.y;
        u_xlat10.w = x_2132;
        let x_2135 : f32 = u_xlat9.y;
        u_xlat12.z = x_2135;
        let x_2138 : f32 = u_xlat8.z;
        u_xlat12.w = x_2138;
        let x_2140 : vec4<f32> = u_xlat10;
        let x_2142 : vec4<f32> = u_xlat12;
        let x_2144 : vec3<f32> = (vec3<f32>(x_2140.z, x_2140.y, x_2140.w) + vec3<f32>(x_2142.z, x_2142.y, x_2142.w));
        let x_2145 : vec4<f32> = u_xlat8;
        u_xlat8 = vec4<f32>(x_2144.x, x_2144.y, x_2144.z, x_2145.w);
        let x_2147 : vec4<f32> = u_xlat9;
        let x_2149 : vec4<f32> = u_xlat13;
        let x_2151 : vec3<f32> = (vec3<f32>(x_2147.x, x_2147.z, x_2147.w) / vec3<f32>(x_2149.z, x_2149.w, x_2149.y));
        let x_2152 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_2151.x, x_2151.y, x_2151.z, x_2152.w);
        let x_2154 : vec4<f32> = u_xlat9;
        let x_2156 : vec3<f32> = (vec3<f32>(x_2154.x, x_2154.y, x_2154.z) + vec3<f32>(-2.5f, -0.5f, 1.5f));
        let x_2157 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_2156.x, x_2156.y, x_2156.z, x_2157.w);
        let x_2159 : vec4<f32> = u_xlat12;
        let x_2161 : vec4<f32> = u_xlat8;
        let x_2163 : vec3<f32> = (vec3<f32>(x_2159.z, x_2159.y, x_2159.w) / vec3<f32>(x_2161.x, x_2161.y, x_2161.z));
        let x_2164 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_2163.x, x_2163.y, x_2163.z, x_2164.w);
        let x_2166 : vec4<f32> = u_xlat10;
        let x_2168 : vec3<f32> = (vec3<f32>(x_2166.x, x_2166.y, x_2166.z) + vec3<f32>(-2.5f, -0.5f, 1.5f));
        let x_2169 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_2168.x, x_2168.y, x_2168.z, x_2169.w);
        let x_2171 : vec4<f32> = u_xlat9;
        let x_2174 : vec4<f32> = x_139.x_MainLightShadowmapSize;
        let x_2176 : vec3<f32> = (vec3<f32>(x_2171.y, x_2171.x, x_2171.z) * vec3<f32>(x_2174.x, x_2174.x, x_2174.x));
        let x_2177 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_2176.x, x_2176.y, x_2176.z, x_2177.w);
        let x_2179 : vec4<f32> = u_xlat10;
        let x_2182 : vec4<f32> = x_139.x_MainLightShadowmapSize;
        let x_2184 : vec3<f32> = (vec3<f32>(x_2179.x, x_2179.y, x_2179.z) * vec3<f32>(x_2182.y, x_2182.y, x_2182.y));
        let x_2185 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_2184.x, x_2184.y, x_2184.z, x_2185.w);
        let x_2188 : f32 = u_xlat10.x;
        u_xlat9.w = x_2188;
        let x_2190 : vec4<f32> = u_xlat7;
        let x_2193 : vec4<f32> = x_139.x_MainLightShadowmapSize;
        let x_2196 : vec4<f32> = u_xlat9;
        u_xlat11 = ((vec4<f32>(x_2190.x, x_2190.y, x_2190.x, x_2190.y) * vec4<f32>(x_2193.x, x_2193.y, x_2193.x, x_2193.y)) + vec4<f32>(x_2196.y, x_2196.w, x_2196.x, x_2196.w));
        let x_2199 : vec4<f32> = u_xlat7;
        let x_2202 : vec4<f32> = x_139.x_MainLightShadowmapSize;
        let x_2205 : vec4<f32> = u_xlat9;
        u_xlat49 = ((vec2<f32>(x_2199.x, x_2199.y) * vec2<f32>(x_2202.x, x_2202.y)) + vec2<f32>(x_2205.z, x_2205.w));
        let x_2209 : f32 = u_xlat9.y;
        u_xlat10.w = x_2209;
        let x_2211 : vec4<f32> = u_xlat10;
        let x_2212 : vec2<f32> = vec2<f32>(x_2211.y, x_2211.z);
        let x_2213 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_2213.x, x_2212.x, x_2213.z, x_2212.y);
        let x_2215 : vec4<f32> = u_xlat7;
        let x_2218 : vec4<f32> = x_139.x_MainLightShadowmapSize;
        let x_2221 : vec4<f32> = u_xlat9;
        u_xlat12 = ((vec4<f32>(x_2215.x, x_2215.y, x_2215.x, x_2215.y) * vec4<f32>(x_2218.x, x_2218.y, x_2218.x, x_2218.y)) + vec4<f32>(x_2221.x, x_2221.y, x_2221.z, x_2221.y));
        let x_2224 : vec4<f32> = u_xlat7;
        let x_2227 : vec4<f32> = x_139.x_MainLightShadowmapSize;
        let x_2230 : vec4<f32> = u_xlat10;
        u_xlat10 = ((vec4<f32>(x_2224.x, x_2224.y, x_2224.x, x_2224.y) * vec4<f32>(x_2227.x, x_2227.y, x_2227.x, x_2227.y)) + vec4<f32>(x_2230.w, x_2230.y, x_2230.w, x_2230.z));
        let x_2233 : vec4<f32> = u_xlat7;
        let x_2236 : vec4<f32> = x_139.x_MainLightShadowmapSize;
        let x_2239 : vec4<f32> = u_xlat9;
        u_xlat9 = ((vec4<f32>(x_2233.x, x_2233.y, x_2233.x, x_2233.y) * vec4<f32>(x_2236.x, x_2236.y, x_2236.x, x_2236.y)) + vec4<f32>(x_2239.x, x_2239.w, x_2239.z, x_2239.w));
        let x_2242 : vec4<f32> = u_xlat8;
        let x_2244 : vec4<f32> = u_xlat13;
        u_xlat14 = (vec4<f32>(x_2242.x, x_2242.x, x_2242.x, x_2242.y) * vec4<f32>(x_2244.z, x_2244.w, x_2244.y, x_2244.z));
        let x_2247 : vec4<f32> = u_xlat8;
        let x_2249 : vec4<f32> = u_xlat13;
        u_xlat15 = (vec4<f32>(x_2247.y, x_2247.y, x_2247.z, x_2247.z) * x_2249);
        let x_2253 : f32 = u_xlat8.z;
        let x_2255 : f32 = u_xlat13.y;
        u_xlat69 = (x_2253 * x_2255);
        let x_2258 : vec4<f32> = u_xlat11;
        let x_2259 : vec2<f32> = vec2<f32>(x_2258.x, x_2258.y);
        let x_2261 : f32 = vs_INTERP9.z;
        txVec34 = vec3<f32>(x_2259.x, x_2259.y, x_2261);
        let x_2268 : vec3<f32> = txVec34;
        let x_2270 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2268.xy, x_2268.z);
        u_xlat7.x = x_2270;
        let x_2273 : vec4<f32> = u_xlat11;
        let x_2274 : vec2<f32> = vec2<f32>(x_2273.z, x_2273.w);
        let x_2276 : f32 = vs_INTERP9.z;
        txVec35 = vec3<f32>(x_2274.x, x_2274.y, x_2276);
        let x_2283 : vec3<f32> = txVec35;
        let x_2285 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2283.xy, x_2283.z);
        u_xlat28.x = x_2285;
        let x_2288 : f32 = u_xlat28.x;
        let x_2290 : f32 = u_xlat14.y;
        u_xlat28.x = (x_2288 * x_2290);
        let x_2294 : f32 = u_xlat14.x;
        let x_2296 : f32 = u_xlat7.x;
        let x_2299 : f32 = u_xlat28.x;
        u_xlat7.x = ((x_2294 * x_2296) + x_2299);
        let x_2303 : vec2<f32> = u_xlat49;
        let x_2305 : f32 = vs_INTERP9.z;
        txVec36 = vec3<f32>(x_2303.x, x_2303.y, x_2305);
        let x_2312 : vec3<f32> = txVec36;
        let x_2314 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2312.xy, x_2312.z);
        u_xlat28.x = x_2314;
        let x_2317 : f32 = u_xlat14.z;
        let x_2319 : f32 = u_xlat28.x;
        let x_2322 : f32 = u_xlat7.x;
        u_xlat7.x = ((x_2317 * x_2319) + x_2322);
        let x_2326 : vec4<f32> = u_xlat10;
        let x_2327 : vec2<f32> = vec2<f32>(x_2326.x, x_2326.y);
        let x_2329 : f32 = vs_INTERP9.z;
        txVec37 = vec3<f32>(x_2327.x, x_2327.y, x_2329);
        let x_2336 : vec3<f32> = txVec37;
        let x_2338 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2336.xy, x_2336.z);
        u_xlat28.x = x_2338;
        let x_2341 : f32 = u_xlat14.w;
        let x_2343 : f32 = u_xlat28.x;
        let x_2346 : f32 = u_xlat7.x;
        u_xlat7.x = ((x_2341 * x_2343) + x_2346);
        let x_2350 : vec4<f32> = u_xlat12;
        let x_2351 : vec2<f32> = vec2<f32>(x_2350.x, x_2350.y);
        let x_2353 : f32 = vs_INTERP9.z;
        txVec38 = vec3<f32>(x_2351.x, x_2351.y, x_2353);
        let x_2360 : vec3<f32> = txVec38;
        let x_2362 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2360.xy, x_2360.z);
        u_xlat28.x = x_2362;
        let x_2365 : f32 = u_xlat15.x;
        let x_2367 : f32 = u_xlat28.x;
        let x_2370 : f32 = u_xlat7.x;
        u_xlat7.x = ((x_2365 * x_2367) + x_2370);
        let x_2374 : vec4<f32> = u_xlat12;
        let x_2375 : vec2<f32> = vec2<f32>(x_2374.z, x_2374.w);
        let x_2377 : f32 = vs_INTERP9.z;
        txVec39 = vec3<f32>(x_2375.x, x_2375.y, x_2377);
        let x_2384 : vec3<f32> = txVec39;
        let x_2386 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2384.xy, x_2384.z);
        u_xlat28.x = x_2386;
        let x_2389 : f32 = u_xlat15.y;
        let x_2391 : f32 = u_xlat28.x;
        let x_2394 : f32 = u_xlat7.x;
        u_xlat7.x = ((x_2389 * x_2391) + x_2394);
        let x_2398 : vec4<f32> = u_xlat10;
        let x_2399 : vec2<f32> = vec2<f32>(x_2398.z, x_2398.w);
        let x_2401 : f32 = vs_INTERP9.z;
        txVec40 = vec3<f32>(x_2399.x, x_2399.y, x_2401);
        let x_2408 : vec3<f32> = txVec40;
        let x_2410 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2408.xy, x_2408.z);
        u_xlat28.x = x_2410;
        let x_2413 : f32 = u_xlat15.z;
        let x_2415 : f32 = u_xlat28.x;
        let x_2418 : f32 = u_xlat7.x;
        u_xlat7.x = ((x_2413 * x_2415) + x_2418);
        let x_2422 : vec4<f32> = u_xlat9;
        let x_2423 : vec2<f32> = vec2<f32>(x_2422.x, x_2422.y);
        let x_2425 : f32 = vs_INTERP9.z;
        txVec41 = vec3<f32>(x_2423.x, x_2423.y, x_2425);
        let x_2432 : vec3<f32> = txVec41;
        let x_2434 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2432.xy, x_2432.z);
        u_xlat28.x = x_2434;
        let x_2437 : f32 = u_xlat15.w;
        let x_2439 : f32 = u_xlat28.x;
        let x_2442 : f32 = u_xlat7.x;
        u_xlat7.x = ((x_2437 * x_2439) + x_2442);
        let x_2446 : vec4<f32> = u_xlat9;
        let x_2447 : vec2<f32> = vec2<f32>(x_2446.z, x_2446.w);
        let x_2449 : f32 = vs_INTERP9.z;
        txVec42 = vec3<f32>(x_2447.x, x_2447.y, x_2449);
        let x_2456 : vec3<f32> = txVec42;
        let x_2458 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2456.xy, x_2456.z);
        u_xlat28.x = x_2458;
        let x_2460 : f32 = u_xlat69;
        let x_2462 : f32 = u_xlat28.x;
        let x_2465 : f32 = u_xlat7.x;
        u_xlat63 = ((x_2460 * x_2462) + x_2465);
      } else {
        let x_2468 : vec4<f32> = vs_INTERP9;
        let x_2471 : vec4<f32> = x_139.x_MainLightShadowmapSize;
        let x_2474 : vec2<f32> = ((vec2<f32>(x_2468.x, x_2468.y) * vec2<f32>(x_2471.z, x_2471.w)) + vec2<f32>(0.5f, 0.5f));
        let x_2475 : vec4<f32> = u_xlat7;
        u_xlat7 = vec4<f32>(x_2474.x, x_2474.y, x_2475.z, x_2475.w);
        let x_2477 : vec4<f32> = u_xlat7;
        let x_2479 : vec2<f32> = floor(vec2<f32>(x_2477.x, x_2477.y));
        let x_2480 : vec4<f32> = u_xlat7;
        u_xlat7 = vec4<f32>(x_2479.x, x_2479.y, x_2480.z, x_2480.w);
        let x_2482 : vec4<f32> = vs_INTERP9;
        let x_2485 : vec4<f32> = x_139.x_MainLightShadowmapSize;
        let x_2488 : vec4<f32> = u_xlat7;
        u_xlat49 = ((vec2<f32>(x_2482.x, x_2482.y) * vec2<f32>(x_2485.z, x_2485.w)) + -(vec2<f32>(x_2488.x, x_2488.y)));
        let x_2492 : vec2<f32> = u_xlat49;
        u_xlat8 = (vec4<f32>(x_2492.x, x_2492.x, x_2492.y, x_2492.y) + vec4<f32>(0.5f, 1.0f, 0.5f, 1.0f));
        let x_2495 : vec4<f32> = u_xlat8;
        let x_2497 : vec4<f32> = u_xlat8;
        u_xlat9 = (vec4<f32>(x_2495.x, x_2495.x, x_2495.z, x_2495.z) * vec4<f32>(x_2497.x, x_2497.x, x_2497.z, x_2497.z));
        let x_2500 : vec4<f32> = u_xlat9;
        let x_2502 : vec2<f32> = (vec2<f32>(x_2500.y, x_2500.w) * vec2<f32>(0.040816002f, 0.040816002f));
        let x_2503 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_2503.x, x_2502.x, x_2503.z, x_2502.y);
        let x_2505 : vec4<f32> = u_xlat9;
        let x_2508 : vec2<f32> = u_xlat49;
        let x_2510 : vec2<f32> = ((vec2<f32>(x_2505.x, x_2505.z) * vec2<f32>(0.5f, 0.5f)) + -(x_2508));
        let x_2511 : vec4<f32> = u_xlat8;
        u_xlat8 = vec4<f32>(x_2510.x, x_2511.y, x_2510.y, x_2511.w);
        let x_2513 : vec2<f32> = u_xlat49;
        let x_2515 : vec2<f32> = (-(x_2513) + vec2<f32>(1.0f, 1.0f));
        let x_2516 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_2515.x, x_2515.y, x_2516.z, x_2516.w);
        let x_2518 : vec2<f32> = u_xlat49;
        u_xlat51 = min(x_2518, vec2<f32>(0.0f, 0.0f));
        let x_2520 : vec2<f32> = u_xlat51;
        let x_2522 : vec2<f32> = u_xlat51;
        let x_2524 : vec4<f32> = u_xlat9;
        let x_2526 : vec2<f32> = ((-(x_2520) * x_2522) + vec2<f32>(x_2524.x, x_2524.y));
        let x_2527 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_2526.x, x_2526.y, x_2527.z, x_2527.w);
        let x_2529 : vec2<f32> = u_xlat49;
        u_xlat51 = max(x_2529, vec2<f32>(0.0f, 0.0f));
        let x_2532 : vec2<f32> = u_xlat51;
        let x_2534 : vec2<f32> = u_xlat51;
        let x_2536 : vec4<f32> = u_xlat8;
        let x_2538 : vec2<f32> = ((-(x_2532) * x_2534) + vec2<f32>(x_2536.y, x_2536.w));
        let x_2539 : vec3<f32> = u_xlat29;
        u_xlat29 = vec3<f32>(x_2538.x, x_2539.y, x_2538.y);
        let x_2541 : vec4<f32> = u_xlat9;
        let x_2543 : vec2<f32> = (vec2<f32>(x_2541.x, x_2541.y) + vec2<f32>(2.0f, 2.0f));
        let x_2544 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_2543.x, x_2543.y, x_2544.z, x_2544.w);
        let x_2546 : vec3<f32> = u_xlat29;
        let x_2548 : vec2<f32> = (vec2<f32>(x_2546.x, x_2546.z) + vec2<f32>(2.0f, 2.0f));
        let x_2549 : vec4<f32> = u_xlat8;
        u_xlat8 = vec4<f32>(x_2549.x, x_2548.x, x_2549.z, x_2548.y);
        let x_2552 : f32 = u_xlat8.y;
        u_xlat11.z = (x_2552 * 0.081632003f);
        let x_2555 : vec4<f32> = u_xlat8;
        let x_2557 : vec3<f32> = (vec3<f32>(x_2555.z, x_2555.x, x_2555.w) * vec3<f32>(0.081632003f, 0.081632003f, 0.081632003f));
        let x_2558 : vec4<f32> = u_xlat12;
        u_xlat12 = vec4<f32>(x_2557.x, x_2557.y, x_2557.z, x_2558.w);
        let x_2560 : vec4<f32> = u_xlat9;
        let x_2562 : vec2<f32> = (vec2<f32>(x_2560.x, x_2560.y) * vec2<f32>(0.081632003f, 0.081632003f));
        let x_2563 : vec4<f32> = u_xlat8;
        u_xlat8 = vec4<f32>(x_2562.x, x_2562.y, x_2563.z, x_2563.w);
        let x_2566 : f32 = u_xlat12.y;
        u_xlat11.x = x_2566;
        let x_2568 : vec2<f32> = u_xlat49;
        let x_2571 : vec2<f32> = ((vec2<f32>(x_2568.x, x_2568.x) * vec2<f32>(-0.081632003f, 0.081632003f)) + vec2<f32>(0.163264006f, 0.081632003f));
        let x_2572 : vec4<f32> = u_xlat11;
        u_xlat11 = vec4<f32>(x_2572.x, x_2571.x, x_2572.z, x_2571.y);
        let x_2574 : vec2<f32> = u_xlat49;
        let x_2577 : vec2<f32> = ((vec2<f32>(x_2574.x, x_2574.x) * vec2<f32>(-0.081632003f, 0.081632003f)) + vec2<f32>(0.081632003f, 0.163264006f));
        let x_2578 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_2577.x, x_2578.y, x_2577.y, x_2578.w);
        let x_2581 : f32 = u_xlat8.x;
        u_xlat9.y = x_2581;
        let x_2584 : f32 = u_xlat10.y;
        u_xlat9.w = x_2584;
        let x_2586 : vec4<f32> = u_xlat9;
        let x_2587 : vec4<f32> = u_xlat11;
        u_xlat11 = (x_2586 + x_2587);
        let x_2589 : vec2<f32> = u_xlat49;
        let x_2592 : vec2<f32> = ((vec2<f32>(x_2589.y, x_2589.y) * vec2<f32>(-0.081632003f, 0.081632003f)) + vec2<f32>(0.163264006f, 0.081632003f));
        let x_2593 : vec4<f32> = u_xlat12;
        u_xlat12 = vec4<f32>(x_2593.x, x_2592.x, x_2593.z, x_2592.y);
        let x_2595 : vec2<f32> = u_xlat49;
        let x_2598 : vec2<f32> = ((vec2<f32>(x_2595.y, x_2595.y) * vec2<f32>(-0.081632003f, 0.081632003f)) + vec2<f32>(0.081632003f, 0.163264006f));
        let x_2599 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_2598.x, x_2599.y, x_2598.y, x_2599.w);
        let x_2602 : f32 = u_xlat8.y;
        u_xlat10.y = x_2602;
        let x_2604 : vec4<f32> = u_xlat10;
        let x_2605 : vec4<f32> = u_xlat12;
        u_xlat8 = (x_2604 + x_2605);
        let x_2607 : vec4<f32> = u_xlat9;
        let x_2608 : vec4<f32> = u_xlat11;
        u_xlat9 = (x_2607 / x_2608);
        let x_2610 : vec4<f32> = u_xlat9;
        u_xlat9 = (x_2610 + vec4<f32>(-3.5f, -1.5f, 0.5f, 2.5f));
        let x_2612 : vec4<f32> = u_xlat10;
        let x_2613 : vec4<f32> = u_xlat8;
        u_xlat10 = (x_2612 / x_2613);
        let x_2615 : vec4<f32> = u_xlat10;
        u_xlat10 = (x_2615 + vec4<f32>(-3.5f, -1.5f, 0.5f, 2.5f));
        let x_2617 : vec4<f32> = u_xlat9;
        let x_2620 : vec4<f32> = x_139.x_MainLightShadowmapSize;
        u_xlat9 = (vec4<f32>(x_2617.w, x_2617.x, x_2617.y, x_2617.z) * vec4<f32>(x_2620.x, x_2620.x, x_2620.x, x_2620.x));
        let x_2623 : vec4<f32> = u_xlat10;
        let x_2626 : vec4<f32> = x_139.x_MainLightShadowmapSize;
        u_xlat10 = (vec4<f32>(x_2623.x, x_2623.w, x_2623.y, x_2623.z) * vec4<f32>(x_2626.y, x_2626.y, x_2626.y, x_2626.y));
        let x_2629 : vec4<f32> = u_xlat9;
        let x_2630 : vec3<f32> = vec3<f32>(x_2629.y, x_2629.z, x_2629.w);
        let x_2631 : vec4<f32> = u_xlat12;
        u_xlat12 = vec4<f32>(x_2630.x, x_2631.y, x_2630.y, x_2630.z);
        let x_2634 : f32 = u_xlat10.x;
        u_xlat12.y = x_2634;
        let x_2636 : vec4<f32> = u_xlat7;
        let x_2639 : vec4<f32> = x_139.x_MainLightShadowmapSize;
        let x_2642 : vec4<f32> = u_xlat12;
        u_xlat13 = ((vec4<f32>(x_2636.x, x_2636.y, x_2636.x, x_2636.y) * vec4<f32>(x_2639.x, x_2639.y, x_2639.x, x_2639.y)) + vec4<f32>(x_2642.x, x_2642.y, x_2642.z, x_2642.y));
        let x_2645 : vec4<f32> = u_xlat7;
        let x_2648 : vec4<f32> = x_139.x_MainLightShadowmapSize;
        let x_2651 : vec4<f32> = u_xlat12;
        u_xlat49 = ((vec2<f32>(x_2645.x, x_2645.y) * vec2<f32>(x_2648.x, x_2648.y)) + vec2<f32>(x_2651.w, x_2651.y));
        let x_2655 : f32 = u_xlat12.y;
        u_xlat9.y = x_2655;
        let x_2658 : f32 = u_xlat10.z;
        u_xlat12.y = x_2658;
        let x_2660 : vec4<f32> = u_xlat7;
        let x_2663 : vec4<f32> = x_139.x_MainLightShadowmapSize;
        let x_2666 : vec4<f32> = u_xlat12;
        u_xlat14 = ((vec4<f32>(x_2660.x, x_2660.y, x_2660.x, x_2660.y) * vec4<f32>(x_2663.x, x_2663.y, x_2663.x, x_2663.y)) + vec4<f32>(x_2666.x, x_2666.y, x_2666.z, x_2666.y));
        let x_2669 : vec4<f32> = u_xlat7;
        let x_2672 : vec4<f32> = x_139.x_MainLightShadowmapSize;
        let x_2675 : vec4<f32> = u_xlat12;
        let x_2677 : vec2<f32> = ((vec2<f32>(x_2669.x, x_2669.y) * vec2<f32>(x_2672.x, x_2672.y)) + vec2<f32>(x_2675.w, x_2675.y));
        let x_2678 : vec4<f32> = u_xlat15;
        u_xlat15 = vec4<f32>(x_2677.x, x_2677.y, x_2678.z, x_2678.w);
        let x_2681 : f32 = u_xlat12.y;
        u_xlat9.z = x_2681;
        let x_2683 : vec4<f32> = u_xlat7;
        let x_2686 : vec4<f32> = x_139.x_MainLightShadowmapSize;
        let x_2689 : vec4<f32> = u_xlat9;
        u_xlat16 = ((vec4<f32>(x_2683.x, x_2683.y, x_2683.x, x_2683.y) * vec4<f32>(x_2686.x, x_2686.y, x_2686.x, x_2686.y)) + vec4<f32>(x_2689.x, x_2689.y, x_2689.x, x_2689.z));
        let x_2693 : f32 = u_xlat10.w;
        u_xlat12.y = x_2693;
        let x_2695 : vec4<f32> = u_xlat7;
        let x_2698 : vec4<f32> = x_139.x_MainLightShadowmapSize;
        let x_2701 : vec4<f32> = u_xlat12;
        u_xlat17 = ((vec4<f32>(x_2695.x, x_2695.y, x_2695.x, x_2695.y) * vec4<f32>(x_2698.x, x_2698.y, x_2698.x, x_2698.y)) + vec4<f32>(x_2701.x, x_2701.y, x_2701.z, x_2701.y));
        let x_2705 : vec4<f32> = u_xlat7;
        let x_2708 : vec4<f32> = x_139.x_MainLightShadowmapSize;
        let x_2711 : vec4<f32> = u_xlat12;
        let x_2713 : vec2<f32> = ((vec2<f32>(x_2705.x, x_2705.y) * vec2<f32>(x_2708.x, x_2708.y)) + vec2<f32>(x_2711.w, x_2711.y));
        let x_2714 : vec3<f32> = u_xlat30;
        u_xlat30 = vec3<f32>(x_2713.x, x_2713.y, x_2714.z);
        let x_2717 : f32 = u_xlat12.y;
        u_xlat9.w = x_2717;
        let x_2720 : vec4<f32> = u_xlat7;
        let x_2723 : vec4<f32> = x_139.x_MainLightShadowmapSize;
        let x_2726 : vec4<f32> = u_xlat9;
        u_xlat57 = ((vec2<f32>(x_2720.x, x_2720.y) * vec2<f32>(x_2723.x, x_2723.y)) + vec2<f32>(x_2726.x, x_2726.w));
        let x_2729 : vec4<f32> = u_xlat12;
        let x_2730 : vec3<f32> = vec3<f32>(x_2729.x, x_2729.z, x_2729.w);
        let x_2731 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_2730.x, x_2731.y, x_2730.y, x_2730.z);
        let x_2733 : vec4<f32> = u_xlat7;
        let x_2736 : vec4<f32> = x_139.x_MainLightShadowmapSize;
        let x_2739 : vec4<f32> = u_xlat10;
        u_xlat12 = ((vec4<f32>(x_2733.x, x_2733.y, x_2733.x, x_2733.y) * vec4<f32>(x_2736.x, x_2736.y, x_2736.x, x_2736.y)) + vec4<f32>(x_2739.x, x_2739.y, x_2739.z, x_2739.y));
        let x_2743 : vec4<f32> = u_xlat7;
        let x_2746 : vec4<f32> = x_139.x_MainLightShadowmapSize;
        let x_2749 : vec4<f32> = u_xlat10;
        u_xlat52 = ((vec2<f32>(x_2743.x, x_2743.y) * vec2<f32>(x_2746.x, x_2746.y)) + vec2<f32>(x_2749.w, x_2749.y));
        let x_2753 : f32 = u_xlat9.x;
        u_xlat10.x = x_2753;
        let x_2755 : vec4<f32> = u_xlat7;
        let x_2758 : vec4<f32> = x_139.x_MainLightShadowmapSize;
        let x_2761 : vec4<f32> = u_xlat10;
        let x_2763 : vec2<f32> = ((vec2<f32>(x_2755.x, x_2755.y) * vec2<f32>(x_2758.x, x_2758.y)) + vec2<f32>(x_2761.x, x_2761.y));
        let x_2764 : vec4<f32> = u_xlat7;
        u_xlat7 = vec4<f32>(x_2763.x, x_2763.y, x_2764.z, x_2764.w);
        let x_2766 : vec4<f32> = u_xlat8;
        let x_2768 : vec4<f32> = u_xlat11;
        u_xlat18 = (vec4<f32>(x_2766.x, x_2766.x, x_2766.x, x_2766.x) * x_2768);
        let x_2771 : vec4<f32> = u_xlat8;
        let x_2773 : vec4<f32> = u_xlat11;
        u_xlat19 = (vec4<f32>(x_2771.y, x_2771.y, x_2771.y, x_2771.y) * x_2773);
        let x_2776 : vec4<f32> = u_xlat8;
        let x_2778 : vec4<f32> = u_xlat11;
        u_xlat20 = (vec4<f32>(x_2776.z, x_2776.z, x_2776.z, x_2776.z) * x_2778);
        let x_2780 : vec4<f32> = u_xlat8;
        let x_2782 : vec4<f32> = u_xlat11;
        u_xlat8 = (vec4<f32>(x_2780.w, x_2780.w, x_2780.w, x_2780.w) * x_2782);
        let x_2785 : vec4<f32> = u_xlat13;
        let x_2786 : vec2<f32> = vec2<f32>(x_2785.x, x_2785.y);
        let x_2788 : f32 = vs_INTERP9.z;
        txVec43 = vec3<f32>(x_2786.x, x_2786.y, x_2788);
        let x_2795 : vec3<f32> = txVec43;
        let x_2797 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2795.xy, x_2795.z);
        u_xlat69 = x_2797;
        let x_2799 : vec4<f32> = u_xlat13;
        let x_2800 : vec2<f32> = vec2<f32>(x_2799.z, x_2799.w);
        let x_2802 : f32 = vs_INTERP9.z;
        txVec44 = vec3<f32>(x_2800.x, x_2800.y, x_2802);
        let x_2809 : vec3<f32> = txVec44;
        let x_2811 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2809.xy, x_2809.z);
        u_xlat9.x = x_2811;
        let x_2814 : f32 = u_xlat9.x;
        let x_2816 : f32 = u_xlat18.y;
        u_xlat9.x = (x_2814 * x_2816);
        let x_2820 : f32 = u_xlat18.x;
        let x_2821 : f32 = u_xlat69;
        let x_2824 : f32 = u_xlat9.x;
        u_xlat69 = ((x_2820 * x_2821) + x_2824);
        let x_2827 : vec2<f32> = u_xlat49;
        let x_2829 : f32 = vs_INTERP9.z;
        txVec45 = vec3<f32>(x_2827.x, x_2827.y, x_2829);
        let x_2836 : vec3<f32> = txVec45;
        let x_2838 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2836.xy, x_2836.z);
        u_xlat49.x = x_2838;
        let x_2841 : f32 = u_xlat18.z;
        let x_2843 : f32 = u_xlat49.x;
        let x_2845 : f32 = u_xlat69;
        u_xlat69 = ((x_2841 * x_2843) + x_2845);
        let x_2848 : vec4<f32> = u_xlat16;
        let x_2849 : vec2<f32> = vec2<f32>(x_2848.x, x_2848.y);
        let x_2851 : f32 = vs_INTERP9.z;
        txVec46 = vec3<f32>(x_2849.x, x_2849.y, x_2851);
        let x_2858 : vec3<f32> = txVec46;
        let x_2860 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2858.xy, x_2858.z);
        u_xlat49.x = x_2860;
        let x_2863 : f32 = u_xlat18.w;
        let x_2865 : f32 = u_xlat49.x;
        let x_2867 : f32 = u_xlat69;
        u_xlat69 = ((x_2863 * x_2865) + x_2867);
        let x_2870 : vec4<f32> = u_xlat14;
        let x_2871 : vec2<f32> = vec2<f32>(x_2870.x, x_2870.y);
        let x_2873 : f32 = vs_INTERP9.z;
        txVec47 = vec3<f32>(x_2871.x, x_2871.y, x_2873);
        let x_2880 : vec3<f32> = txVec47;
        let x_2882 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2880.xy, x_2880.z);
        u_xlat49.x = x_2882;
        let x_2885 : f32 = u_xlat19.x;
        let x_2887 : f32 = u_xlat49.x;
        let x_2889 : f32 = u_xlat69;
        u_xlat69 = ((x_2885 * x_2887) + x_2889);
        let x_2892 : vec4<f32> = u_xlat14;
        let x_2893 : vec2<f32> = vec2<f32>(x_2892.z, x_2892.w);
        let x_2895 : f32 = vs_INTERP9.z;
        txVec48 = vec3<f32>(x_2893.x, x_2893.y, x_2895);
        let x_2902 : vec3<f32> = txVec48;
        let x_2904 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2902.xy, x_2902.z);
        u_xlat49.x = x_2904;
        let x_2907 : f32 = u_xlat19.y;
        let x_2909 : f32 = u_xlat49.x;
        let x_2911 : f32 = u_xlat69;
        u_xlat69 = ((x_2907 * x_2909) + x_2911);
        let x_2914 : vec4<f32> = u_xlat15;
        let x_2915 : vec2<f32> = vec2<f32>(x_2914.x, x_2914.y);
        let x_2917 : f32 = vs_INTERP9.z;
        txVec49 = vec3<f32>(x_2915.x, x_2915.y, x_2917);
        let x_2924 : vec3<f32> = txVec49;
        let x_2926 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2924.xy, x_2924.z);
        u_xlat49.x = x_2926;
        let x_2929 : f32 = u_xlat19.z;
        let x_2931 : f32 = u_xlat49.x;
        let x_2933 : f32 = u_xlat69;
        u_xlat69 = ((x_2929 * x_2931) + x_2933);
        let x_2936 : vec4<f32> = u_xlat16;
        let x_2937 : vec2<f32> = vec2<f32>(x_2936.z, x_2936.w);
        let x_2939 : f32 = vs_INTERP9.z;
        txVec50 = vec3<f32>(x_2937.x, x_2937.y, x_2939);
        let x_2946 : vec3<f32> = txVec50;
        let x_2948 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2946.xy, x_2946.z);
        u_xlat49.x = x_2948;
        let x_2951 : f32 = u_xlat19.w;
        let x_2953 : f32 = u_xlat49.x;
        let x_2955 : f32 = u_xlat69;
        u_xlat69 = ((x_2951 * x_2953) + x_2955);
        let x_2958 : vec4<f32> = u_xlat17;
        let x_2959 : vec2<f32> = vec2<f32>(x_2958.x, x_2958.y);
        let x_2961 : f32 = vs_INTERP9.z;
        txVec51 = vec3<f32>(x_2959.x, x_2959.y, x_2961);
        let x_2968 : vec3<f32> = txVec51;
        let x_2970 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2968.xy, x_2968.z);
        u_xlat49.x = x_2970;
        let x_2973 : f32 = u_xlat20.x;
        let x_2975 : f32 = u_xlat49.x;
        let x_2977 : f32 = u_xlat69;
        u_xlat69 = ((x_2973 * x_2975) + x_2977);
        let x_2980 : vec4<f32> = u_xlat17;
        let x_2981 : vec2<f32> = vec2<f32>(x_2980.z, x_2980.w);
        let x_2983 : f32 = vs_INTERP9.z;
        txVec52 = vec3<f32>(x_2981.x, x_2981.y, x_2983);
        let x_2990 : vec3<f32> = txVec52;
        let x_2992 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2990.xy, x_2990.z);
        u_xlat49.x = x_2992;
        let x_2995 : f32 = u_xlat20.y;
        let x_2997 : f32 = u_xlat49.x;
        let x_2999 : f32 = u_xlat69;
        u_xlat69 = ((x_2995 * x_2997) + x_2999);
        let x_3002 : vec3<f32> = u_xlat30;
        let x_3003 : vec2<f32> = vec2<f32>(x_3002.x, x_3002.y);
        let x_3005 : f32 = vs_INTERP9.z;
        txVec53 = vec3<f32>(x_3003.x, x_3003.y, x_3005);
        let x_3012 : vec3<f32> = txVec53;
        let x_3014 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_3012.xy, x_3012.z);
        u_xlat49.x = x_3014;
        let x_3017 : f32 = u_xlat20.z;
        let x_3019 : f32 = u_xlat49.x;
        let x_3021 : f32 = u_xlat69;
        u_xlat69 = ((x_3017 * x_3019) + x_3021);
        let x_3024 : vec2<f32> = u_xlat57;
        let x_3026 : f32 = vs_INTERP9.z;
        txVec54 = vec3<f32>(x_3024.x, x_3024.y, x_3026);
        let x_3033 : vec3<f32> = txVec54;
        let x_3035 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_3033.xy, x_3033.z);
        u_xlat49.x = x_3035;
        let x_3038 : f32 = u_xlat20.w;
        let x_3040 : f32 = u_xlat49.x;
        let x_3042 : f32 = u_xlat69;
        u_xlat69 = ((x_3038 * x_3040) + x_3042);
        let x_3045 : vec4<f32> = u_xlat12;
        let x_3046 : vec2<f32> = vec2<f32>(x_3045.x, x_3045.y);
        let x_3048 : f32 = vs_INTERP9.z;
        txVec55 = vec3<f32>(x_3046.x, x_3046.y, x_3048);
        let x_3055 : vec3<f32> = txVec55;
        let x_3057 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_3055.xy, x_3055.z);
        u_xlat49.x = x_3057;
        let x_3060 : f32 = u_xlat8.x;
        let x_3062 : f32 = u_xlat49.x;
        let x_3064 : f32 = u_xlat69;
        u_xlat69 = ((x_3060 * x_3062) + x_3064);
        let x_3067 : vec4<f32> = u_xlat12;
        let x_3068 : vec2<f32> = vec2<f32>(x_3067.z, x_3067.w);
        let x_3070 : f32 = vs_INTERP9.z;
        txVec56 = vec3<f32>(x_3068.x, x_3068.y, x_3070);
        let x_3077 : vec3<f32> = txVec56;
        let x_3079 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_3077.xy, x_3077.z);
        u_xlat49.x = x_3079;
        let x_3082 : f32 = u_xlat8.y;
        let x_3084 : f32 = u_xlat49.x;
        let x_3086 : f32 = u_xlat69;
        u_xlat69 = ((x_3082 * x_3084) + x_3086);
        let x_3089 : vec2<f32> = u_xlat52;
        let x_3091 : f32 = vs_INTERP9.z;
        txVec57 = vec3<f32>(x_3089.x, x_3089.y, x_3091);
        let x_3098 : vec3<f32> = txVec57;
        let x_3100 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_3098.xy, x_3098.z);
        u_xlat49.x = x_3100;
        let x_3103 : f32 = u_xlat8.z;
        let x_3105 : f32 = u_xlat49.x;
        let x_3107 : f32 = u_xlat69;
        u_xlat69 = ((x_3103 * x_3105) + x_3107);
        let x_3110 : vec4<f32> = u_xlat7;
        let x_3111 : vec2<f32> = vec2<f32>(x_3110.x, x_3110.y);
        let x_3113 : f32 = vs_INTERP9.z;
        txVec58 = vec3<f32>(x_3111.x, x_3111.y, x_3113);
        let x_3120 : vec3<f32> = txVec58;
        let x_3122 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_3120.xy, x_3120.z);
        u_xlat7.x = x_3122;
        let x_3125 : f32 = u_xlat8.w;
        let x_3127 : f32 = u_xlat7.x;
        let x_3129 : f32 = u_xlat69;
        u_xlat63 = ((x_3125 * x_3127) + x_3129);
      }
    }
  } else {
    let x_3133 : vec4<f32> = vs_INTERP9;
    let x_3134 : vec2<f32> = vec2<f32>(x_3133.x, x_3133.y);
    let x_3136 : f32 = vs_INTERP9.z;
    txVec59 = vec3<f32>(x_3134.x, x_3134.y, x_3136);
    let x_3143 : vec3<f32> = txVec59;
    let x_3145 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_3143.xy, x_3143.z);
    u_xlat63 = x_3145;
  }
  let x_3146 : f32 = u_xlat63;
  let x_3148 : f32 = x_139.x_MainLightShadowParams.x;
  let x_3151 : f32 = u_xlat4.x;
  u_xlat63 = ((x_3146 * x_3148) + x_3151);
  let x_3155 : f32 = vs_INTERP9.z;
  u_xlatb4 = (0.0f >= x_3155);
  let x_3158 : f32 = vs_INTERP9.z;
  u_xlatb69 = (x_3158 >= 1.0f);
  let x_3160 : bool = u_xlatb4;
  let x_3161 : bool = u_xlatb69;
  u_xlatb4 = (x_3160 | x_3161);
  let x_3163 : bool = u_xlatb4;
  let x_3164 : f32 = u_xlat63;
  u_xlat63 = select(x_3164, 1.0f, x_3163);
  let x_3166 : vec3<f32> = vs_INTERP0;
  let x_3168 : vec3<f32> = x_66.x_WorldSpaceCameraPos;
  let x_3170 : vec3<f32> = (x_3166 + -(x_3168));
  let x_3171 : vec4<f32> = u_xlat7;
  u_xlat7 = vec4<f32>(x_3170.x, x_3170.y, x_3170.z, x_3171.w);
  let x_3173 : vec4<f32> = u_xlat7;
  let x_3175 : vec4<f32> = u_xlat7;
  u_xlat4.x = dot(vec3<f32>(x_3173.x, x_3173.y, x_3173.z), vec3<f32>(x_3175.x, x_3175.y, x_3175.z));
  let x_3180 : f32 = u_xlat4.x;
  let x_3182 : f32 = x_139.x_MainLightShadowParams.z;
  let x_3185 : f32 = x_139.x_MainLightShadowParams.w;
  u_xlat4.x = ((x_3180 * x_3182) + x_3185);
  let x_3189 : f32 = u_xlat4.x;
  u_xlat4.x = clamp(x_3189, 0.0f, 1.0f);
  let x_3192 : f32 = u_xlat63;
  u_xlat69 = (-(x_3192) + 1.0f);
  let x_3196 : f32 = u_xlat4.x;
  let x_3197 : f32 = u_xlat69;
  let x_3199 : f32 = u_xlat63;
  u_xlat63 = ((x_3196 * x_3197) + x_3199);
  let x_3201 : f32 = u_xlat48;
  let x_3204 : vec4<f32> = x_66.x_MainLightColor;
  let x_3206 : vec3<f32> = (vec3<f32>(x_3201, x_3201, x_3201) * vec3<f32>(x_3204.x, x_3204.y, x_3204.z));
  let x_3207 : vec4<f32> = u_xlat7;
  u_xlat7 = vec4<f32>(x_3206.x, x_3206.y, x_3206.z, x_3207.w);
  let x_3209 : vec3<f32> = u_xlat24;
  let x_3211 : vec4<f32> = u_xlat5;
  u_xlat4.x = dot(-(x_3209), vec3<f32>(x_3211.x, x_3211.y, x_3211.z));
  let x_3216 : f32 = u_xlat4.x;
  let x_3218 : f32 = u_xlat4.x;
  u_xlat4.x = (x_3216 + x_3218);
  let x_3221 : vec4<f32> = u_xlat5;
  let x_3223 : vec4<f32> = u_xlat4;
  let x_3227 : vec3<f32> = u_xlat24;
  let x_3229 : vec3<f32> = ((vec3<f32>(x_3221.x, x_3221.y, x_3221.z) * -(vec3<f32>(x_3223.x, x_3223.x, x_3223.x))) + -(x_3227));
  let x_3230 : vec4<f32> = u_xlat8;
  u_xlat8 = vec4<f32>(x_3229.x, x_3229.y, x_3229.z, x_3230.w);
  let x_3232 : vec4<f32> = u_xlat5;
  let x_3234 : vec3<f32> = u_xlat24;
  u_xlat4.x = dot(vec3<f32>(x_3232.x, x_3232.y, x_3232.z), x_3234);
  let x_3238 : f32 = u_xlat4.x;
  u_xlat4.x = clamp(x_3238, 0.0f, 1.0f);
  let x_3242 : f32 = u_xlat4.x;
  u_xlat4.x = (-(x_3242) + 1.0f);
  let x_3247 : f32 = u_xlat4.x;
  let x_3249 : f32 = u_xlat4.x;
  u_xlat4.x = (x_3247 * x_3249);
  let x_3253 : f32 = u_xlat4.x;
  let x_3255 : f32 = u_xlat4.x;
  u_xlat4.x = (x_3253 * x_3255);
  let x_3258 : f32 = u_xlat64;
  u_xlat69 = ((-(x_3258) * 0.699999988f) + 1.700000048f);
  let x_3264 : f32 = u_xlat64;
  let x_3265 : f32 = u_xlat69;
  u_xlat64 = (x_3264 * x_3265);
  let x_3267 : f32 = u_xlat64;
  u_xlat64 = (x_3267 * 6.0f);
  let x_3278 : vec4<f32> = u_xlat8;
  let x_3280 : f32 = u_xlat64;
  let x_3281 : vec4<f32> = textureSampleLevel(unity_SpecCube0, samplerunity_SpecCube0, vec3<f32>(x_3278.x, x_3278.y, x_3278.z), x_3280);
  u_xlat8 = x_3281;
  let x_3283 : f32 = u_xlat8.w;
  u_xlat64 = (x_3283 + -1.0f);
  let x_3286 : f32 = x_1592.unity_SpecCube0_HDR.w;
  let x_3287 : f32 = u_xlat64;
  u_xlat64 = ((x_3286 * x_3287) + 1.0f);
  let x_3290 : f32 = u_xlat64;
  u_xlat64 = max(x_3290, 0.0f);
  let x_3292 : f32 = u_xlat64;
  u_xlat64 = log2(x_3292);
  let x_3294 : f32 = u_xlat64;
  let x_3296 : f32 = x_1592.unity_SpecCube0_HDR.y;
  u_xlat64 = (x_3294 * x_3296);
  let x_3298 : f32 = u_xlat64;
  u_xlat64 = exp2(x_3298);
  let x_3300 : f32 = u_xlat64;
  let x_3302 : f32 = x_1592.unity_SpecCube0_HDR.x;
  u_xlat64 = (x_3300 * x_3302);
  let x_3304 : vec4<f32> = u_xlat8;
  let x_3306 : f32 = u_xlat64;
  let x_3308 : vec3<f32> = (vec3<f32>(x_3304.x, x_3304.y, x_3304.z) * vec3<f32>(x_3306, x_3306, x_3306));
  let x_3309 : vec4<f32> = u_xlat8;
  u_xlat8 = vec4<f32>(x_3308.x, x_3308.y, x_3308.z, x_3309.w);
  let x_3311 : f32 = u_xlat65;
  let x_3313 : f32 = u_xlat65;
  let x_3317 : vec2<f32> = ((vec2<f32>(x_3311, x_3311) * vec2<f32>(x_3313, x_3313)) + vec2<f32>(-1.0f, 1.0f));
  let x_3318 : vec4<f32> = u_xlat9;
  u_xlat9 = vec4<f32>(x_3317.x, x_3317.y, x_3318.z, x_3318.w);
  let x_3321 : f32 = u_xlat9.y;
  u_xlat64 = (1.0f / x_3321);
  let x_3324 : f32 = u_xlat3.x;
  u_xlat65 = (x_3324 + -0.039999999f);
  let x_3328 : f32 = u_xlat4.x;
  let x_3329 : f32 = u_xlat65;
  u_xlat65 = ((x_3328 * x_3329) + 0.039999999f);
  let x_3333 : f32 = u_xlat64;
  let x_3334 : f32 = u_xlat65;
  u_xlat64 = (x_3333 * x_3334);
  let x_3336 : f32 = u_xlat64;
  let x_3338 : vec4<f32> = u_xlat8;
  let x_3340 : vec3<f32> = (vec3<f32>(x_3336, x_3336, x_3336) * vec3<f32>(x_3338.x, x_3338.y, x_3338.z));
  let x_3341 : vec4<f32> = u_xlat8;
  u_xlat8 = vec4<f32>(x_3340.x, x_3340.y, x_3340.z, x_3341.w);
  let x_3343 : vec3<f32> = u_xlat25;
  let x_3344 : vec3<f32> = u_xlat2;
  let x_3346 : vec4<f32> = u_xlat8;
  let x_3348 : vec3<f32> = ((x_3343 * x_3344) + vec3<f32>(x_3346.x, x_3346.y, x_3346.z));
  let x_3349 : vec4<f32> = u_xlat4;
  u_xlat4 = vec4<f32>(x_3348.x, x_3348.y, x_3348.z, x_3349.w);
  let x_3351 : f32 = u_xlat63;
  let x_3353 : f32 = x_1592.unity_LightData.z;
  u_xlat63 = (x_3351 * x_3353);
  let x_3355 : vec4<f32> = u_xlat5;
  let x_3358 : vec4<f32> = x_66.x_MainLightPosition;
  u_xlat64 = dot(vec3<f32>(x_3355.x, x_3355.y, x_3355.z), vec3<f32>(x_3358.x, x_3358.y, x_3358.z));
  let x_3361 : f32 = u_xlat64;
  u_xlat64 = clamp(x_3361, 0.0f, 1.0f);
  let x_3363 : f32 = u_xlat63;
  let x_3364 : f32 = u_xlat64;
  u_xlat63 = (x_3363 * x_3364);
  let x_3366 : f32 = u_xlat63;
  let x_3368 : vec4<f32> = u_xlat7;
  let x_3370 : vec3<f32> = (vec3<f32>(x_3366, x_3366, x_3366) * vec3<f32>(x_3368.x, x_3368.y, x_3368.z));
  let x_3371 : vec4<f32> = u_xlat7;
  u_xlat7 = vec4<f32>(x_3370.x, x_3370.y, x_3370.z, x_3371.w);
  let x_3373 : vec3<f32> = u_xlat24;
  let x_3375 : vec4<f32> = x_66.x_MainLightPosition;
  let x_3377 : vec3<f32> = (x_3373 + vec3<f32>(x_3375.x, x_3375.y, x_3375.z));
  let x_3378 : vec4<f32> = u_xlat8;
  u_xlat8 = vec4<f32>(x_3377.x, x_3377.y, x_3377.z, x_3378.w);
  let x_3380 : vec4<f32> = u_xlat8;
  let x_3382 : vec4<f32> = u_xlat8;
  u_xlat63 = dot(vec3<f32>(x_3380.x, x_3380.y, x_3380.z), vec3<f32>(x_3382.x, x_3382.y, x_3382.z));
  let x_3385 : f32 = u_xlat63;
  u_xlat63 = max(x_3385, 1.17549435e-37f);
  let x_3388 : f32 = u_xlat63;
  u_xlat63 = inverseSqrt(x_3388);
  let x_3390 : f32 = u_xlat63;
  let x_3392 : vec4<f32> = u_xlat8;
  let x_3394 : vec3<f32> = (vec3<f32>(x_3390, x_3390, x_3390) * vec3<f32>(x_3392.x, x_3392.y, x_3392.z));
  let x_3395 : vec4<f32> = u_xlat8;
  u_xlat8 = vec4<f32>(x_3394.x, x_3394.y, x_3394.z, x_3395.w);
  let x_3397 : vec4<f32> = u_xlat5;
  let x_3399 : vec4<f32> = u_xlat8;
  u_xlat63 = dot(vec3<f32>(x_3397.x, x_3397.y, x_3397.z), vec3<f32>(x_3399.x, x_3399.y, x_3399.z));
  let x_3402 : f32 = u_xlat63;
  u_xlat63 = clamp(x_3402, 0.0f, 1.0f);
  let x_3405 : vec4<f32> = x_66.x_MainLightPosition;
  let x_3407 : vec4<f32> = u_xlat8;
  u_xlat64 = dot(vec3<f32>(x_3405.x, x_3405.y, x_3405.z), vec3<f32>(x_3407.x, x_3407.y, x_3407.z));
  let x_3410 : f32 = u_xlat64;
  u_xlat64 = clamp(x_3410, 0.0f, 1.0f);
  let x_3412 : f32 = u_xlat63;
  let x_3413 : f32 = u_xlat63;
  u_xlat63 = (x_3412 * x_3413);
  let x_3415 : f32 = u_xlat63;
  let x_3417 : f32 = u_xlat9.x;
  u_xlat63 = ((x_3415 * x_3417) + 1.000010014f);
  let x_3421 : f32 = u_xlat64;
  let x_3422 : f32 = u_xlat64;
  u_xlat64 = (x_3421 * x_3422);
  let x_3424 : f32 = u_xlat63;
  let x_3425 : f32 = u_xlat63;
  u_xlat63 = (x_3424 * x_3425);
  let x_3427 : f32 = u_xlat64;
  u_xlat64 = max(x_3427, 0.100000001f);
  let x_3430 : f32 = u_xlat63;
  let x_3431 : f32 = u_xlat64;
  u_xlat63 = (x_3430 * x_3431);
  let x_3434 : f32 = u_xlat27.x;
  let x_3435 : f32 = u_xlat63;
  u_xlat63 = (x_3434 * x_3435);
  let x_3437 : f32 = u_xlat68;
  let x_3438 : f32 = u_xlat63;
  u_xlat63 = (x_3437 / x_3438);
  let x_3440 : f32 = u_xlat63;
  let x_3444 : vec3<f32> = u_xlat2;
  let x_3445 : vec3<f32> = ((vec3<f32>(x_3440, x_3440, x_3440) * vec3<f32>(0.039999999f, 0.039999999f, 0.039999999f)) + x_3444);
  let x_3446 : vec4<f32> = u_xlat8;
  u_xlat8 = vec4<f32>(x_3445.x, x_3445.y, x_3445.z, x_3446.w);
  let x_3448 : vec4<f32> = u_xlat7;
  let x_3450 : vec4<f32> = u_xlat8;
  let x_3452 : vec3<f32> = (vec3<f32>(x_3448.x, x_3448.y, x_3448.z) * vec3<f32>(x_3450.x, x_3450.y, x_3450.z));
  let x_3453 : vec4<f32> = u_xlat7;
  u_xlat7 = vec4<f32>(x_3452.x, x_3452.y, x_3452.z, x_3453.w);
  let x_3456 : f32 = x_66.x_AdditionalLightsCount.x;
  let x_3458 : f32 = x_1592.unity_LightData.y;
  u_xlat63 = min(x_3456, x_3458);
  let x_3462 : f32 = u_xlat63;
  u_xlatu63 = bitcast<u32>(i32(x_3462));
  u_xlat8.x = 0.0f;
  u_xlat8.y = 0.0f;
  u_xlat8.z = 0.0f;
  u_xlatu_loop_1 = 0u;
  loop {
    let x_3474 : u32 = u_xlatu_loop_1;
    let x_3475 : u32 = u_xlatu63;
    if ((x_3474 < x_3475)) {
    } else {
      break;
    }
    let x_3478 : u32 = u_xlatu_loop_1;
    u_xlatu65 = (x_3478 >> 2u);
    let x_3482 : u32 = u_xlatu_loop_1;
    u_xlati3 = bitcast<i32>((x_3482 & 3u));
    let x_3485 : u32 = u_xlatu65;
    let x_3488 : vec4<f32> = x_1592.unity_LightIndices[bitcast<i32>(x_3485)];
    let x_3498 : i32 = u_xlati3;
    indexable = array<vec4<u32>, 4u>(vec4<u32>(1065353216u, 0u, 0u, 0u), vec4<u32>(0u, 1065353216u, 0u, 0u), vec4<u32>(0u, 0u, 1065353216u, 0u), vec4<u32>(0u, 0u, 0u, 1065353216u));
    let x_3503 : vec4<u32> = indexable[x_3498];
    u_xlat65 = dot(x_3488, bitcast<vec4<f32>>(x_3503));
    let x_3507 : f32 = u_xlat65;
    u_xlati65 = i32(x_3507);
    let x_3509 : vec3<f32> = vs_INTERP0;
    let x_3521 : i32 = u_xlati65;
    let x_3523 : vec4<f32> = x_3520.x_AdditionalLightsPosition[x_3521];
    let x_3526 : i32 = u_xlati65;
    let x_3528 : vec4<f32> = x_3520.x_AdditionalLightsPosition[x_3526];
    u_xlat30 = ((-(x_3509) * vec3<f32>(x_3523.w, x_3523.w, x_3523.w)) + vec3<f32>(x_3528.x, x_3528.y, x_3528.z));
    let x_3531 : vec3<f32> = u_xlat30;
    let x_3532 : vec3<f32> = u_xlat30;
    u_xlat3.x = dot(x_3531, x_3532);
    let x_3536 : f32 = u_xlat3.x;
    u_xlat3.x = max(x_3536, 6.10351562e-05f);
    let x_3541 : f32 = u_xlat3.x;
    u_xlat67 = inverseSqrt(x_3541);
    let x_3543 : f32 = u_xlat67;
    let x_3545 : vec3<f32> = u_xlat30;
    let x_3546 : vec3<f32> = (vec3<f32>(x_3543, x_3543, x_3543) * x_3545);
    let x_3547 : vec4<f32> = u_xlat10;
    u_xlat10 = vec4<f32>(x_3546.x, x_3546.y, x_3546.z, x_3547.w);
    let x_3550 : f32 = u_xlat3.x;
    u_xlat69 = (1.0f / x_3550);
    let x_3553 : f32 = u_xlat3.x;
    let x_3554 : i32 = u_xlati65;
    let x_3556 : f32 = x_3520.x_AdditionalLightsAttenuation[x_3554].x;
    u_xlat3.x = (x_3553 * x_3556);
    let x_3560 : f32 = u_xlat3.x;
    let x_3563 : f32 = u_xlat3.x;
    u_xlat3.x = ((-(x_3560) * x_3563) + 1.0f);
    let x_3568 : f32 = u_xlat3.x;
    u_xlat3.x = max(x_3568, 0.0f);
    let x_3572 : f32 = u_xlat3.x;
    let x_3574 : f32 = u_xlat3.x;
    u_xlat3.x = (x_3572 * x_3574);
    let x_3578 : f32 = u_xlat3.x;
    let x_3579 : f32 = u_xlat69;
    u_xlat3.x = (x_3578 * x_3579);
    let x_3582 : i32 = u_xlati65;
    let x_3584 : vec4<f32> = x_3520.x_AdditionalLightsSpotDir[x_3582];
    let x_3586 : vec4<f32> = u_xlat10;
    u_xlat69 = dot(vec3<f32>(x_3584.x, x_3584.y, x_3584.z), vec3<f32>(x_3586.x, x_3586.y, x_3586.z));
    let x_3589 : f32 = u_xlat69;
    let x_3590 : i32 = u_xlati65;
    let x_3592 : f32 = x_3520.x_AdditionalLightsAttenuation[x_3590].z;
    let x_3594 : i32 = u_xlati65;
    let x_3596 : f32 = x_3520.x_AdditionalLightsAttenuation[x_3594].w;
    u_xlat69 = ((x_3589 * x_3592) + x_3596);
    let x_3598 : f32 = u_xlat69;
    u_xlat69 = clamp(x_3598, 0.0f, 1.0f);
    let x_3600 : f32 = u_xlat69;
    let x_3601 : f32 = u_xlat69;
    u_xlat69 = (x_3600 * x_3601);
    let x_3604 : f32 = u_xlat3.x;
    let x_3605 : f32 = u_xlat69;
    u_xlat3.x = (x_3604 * x_3605);
    let x_3608 : f32 = u_xlat48;
    let x_3610 : i32 = u_xlati65;
    let x_3612 : vec4<f32> = x_3520.x_AdditionalLightsColor[x_3610];
    let x_3614 : vec3<f32> = (vec3<f32>(x_3608, x_3608, x_3608) * vec3<f32>(x_3612.x, x_3612.y, x_3612.z));
    let x_3615 : vec4<f32> = u_xlat11;
    u_xlat11 = vec4<f32>(x_3614.x, x_3614.y, x_3614.z, x_3615.w);
    let x_3617 : vec4<f32> = u_xlat5;
    let x_3619 : vec4<f32> = u_xlat10;
    u_xlat65 = dot(vec3<f32>(x_3617.x, x_3617.y, x_3617.z), vec3<f32>(x_3619.x, x_3619.y, x_3619.z));
    let x_3622 : f32 = u_xlat65;
    u_xlat65 = clamp(x_3622, 0.0f, 1.0f);
    let x_3624 : f32 = u_xlat65;
    let x_3626 : f32 = u_xlat3.x;
    u_xlat65 = (x_3624 * x_3626);
    let x_3628 : f32 = u_xlat65;
    let x_3630 : vec4<f32> = u_xlat11;
    let x_3632 : vec3<f32> = (vec3<f32>(x_3628, x_3628, x_3628) * vec3<f32>(x_3630.x, x_3630.y, x_3630.z));
    let x_3633 : vec4<f32> = u_xlat11;
    u_xlat11 = vec4<f32>(x_3632.x, x_3632.y, x_3632.z, x_3633.w);
    let x_3635 : vec3<f32> = u_xlat30;
    let x_3636 : f32 = u_xlat67;
    let x_3639 : vec3<f32> = u_xlat24;
    u_xlat30 = ((x_3635 * vec3<f32>(x_3636, x_3636, x_3636)) + x_3639);
    let x_3641 : vec3<f32> = u_xlat30;
    let x_3642 : vec3<f32> = u_xlat30;
    u_xlat65 = dot(x_3641, x_3642);
    let x_3644 : f32 = u_xlat65;
    u_xlat65 = max(x_3644, 1.17549435e-37f);
    let x_3646 : f32 = u_xlat65;
    u_xlat65 = inverseSqrt(x_3646);
    let x_3648 : f32 = u_xlat65;
    let x_3650 : vec3<f32> = u_xlat30;
    u_xlat30 = (vec3<f32>(x_3648, x_3648, x_3648) * x_3650);
    let x_3652 : vec4<f32> = u_xlat5;
    let x_3654 : vec3<f32> = u_xlat30;
    u_xlat65 = dot(vec3<f32>(x_3652.x, x_3652.y, x_3652.z), x_3654);
    let x_3656 : f32 = u_xlat65;
    u_xlat65 = clamp(x_3656, 0.0f, 1.0f);
    let x_3658 : vec4<f32> = u_xlat10;
    let x_3660 : vec3<f32> = u_xlat30;
    u_xlat3.x = dot(vec3<f32>(x_3658.x, x_3658.y, x_3658.z), x_3660);
    let x_3664 : f32 = u_xlat3.x;
    u_xlat3.x = clamp(x_3664, 0.0f, 1.0f);
    let x_3667 : f32 = u_xlat65;
    let x_3668 : f32 = u_xlat65;
    u_xlat65 = (x_3667 * x_3668);
    let x_3670 : f32 = u_xlat65;
    let x_3672 : f32 = u_xlat9.x;
    u_xlat65 = ((x_3670 * x_3672) + 1.000010014f);
    let x_3676 : f32 = u_xlat3.x;
    let x_3678 : f32 = u_xlat3.x;
    u_xlat3.x = (x_3676 * x_3678);
    let x_3681 : f32 = u_xlat65;
    let x_3682 : f32 = u_xlat65;
    u_xlat65 = (x_3681 * x_3682);
    let x_3685 : f32 = u_xlat3.x;
    u_xlat3.x = max(x_3685, 0.100000001f);
    let x_3688 : f32 = u_xlat65;
    let x_3690 : f32 = u_xlat3.x;
    u_xlat65 = (x_3688 * x_3690);
    let x_3693 : f32 = u_xlat27.x;
    let x_3694 : f32 = u_xlat65;
    u_xlat65 = (x_3693 * x_3694);
    let x_3696 : f32 = u_xlat68;
    let x_3697 : f32 = u_xlat65;
    u_xlat65 = (x_3696 / x_3697);
    let x_3699 : f32 = u_xlat65;
    let x_3702 : vec3<f32> = u_xlat2;
    u_xlat30 = ((vec3<f32>(x_3699, x_3699, x_3699) * vec3<f32>(0.039999999f, 0.039999999f, 0.039999999f)) + x_3702);
    let x_3704 : vec3<f32> = u_xlat30;
    let x_3705 : vec4<f32> = u_xlat11;
    let x_3708 : vec4<f32> = u_xlat8;
    let x_3710 : vec3<f32> = ((x_3704 * vec3<f32>(x_3705.x, x_3705.y, x_3705.z)) + vec3<f32>(x_3708.x, x_3708.y, x_3708.z));
    let x_3711 : vec4<f32> = u_xlat8;
    u_xlat8 = vec4<f32>(x_3710.x, x_3710.y, x_3710.z, x_3711.w);

    continuing {
      let x_3713 : u32 = u_xlatu_loop_1;
      u_xlatu_loop_1 = (x_3713 + bitcast<u32>(1i));
    }
  }
  let x_3715 : vec4<f32> = u_xlat4;
  let x_3717 : vec4<f32> = u_xlat6;
  let x_3720 : vec4<f32> = u_xlat7;
  u_xlat2 = ((vec3<f32>(x_3715.x, x_3715.y, x_3715.z) * vec3<f32>(x_3717.x, x_3717.x, x_3717.x)) + vec3<f32>(x_3720.x, x_3720.y, x_3720.z));
  let x_3723 : vec4<f32> = u_xlat8;
  let x_3725 : vec3<f32> = u_xlat2;
  u_xlat2 = (vec3<f32>(x_3723.x, x_3723.y, x_3723.z) + x_3725);
  let x_3727 : vec4<f32> = vs_INTERP4;
  let x_3729 : vec3<f32> = u_xlat0;
  let x_3731 : vec3<f32> = u_xlat2;
  u_xlat0 = ((vec3<f32>(x_3727.w, x_3727.w, x_3727.w) * x_3729) + x_3731);
  let x_3734 : f32 = u_xlat22.x;
  let x_3736 : f32 = u_xlat22.x;
  u_xlat63 = (x_3734 * -(x_3736));
  let x_3739 : f32 = u_xlat63;
  u_xlat63 = exp2(x_3739);
  let x_3741 : vec3<f32> = u_xlat0;
  let x_3744 : vec4<f32> = x_66.unity_FogColor;
  u_xlat0 = (x_3741 + -(vec3<f32>(x_3744.x, x_3744.y, x_3744.z)));
  let x_3750 : f32 = u_xlat63;
  let x_3752 : vec3<f32> = u_xlat0;
  let x_3755 : vec4<f32> = x_66.unity_FogColor;
  let x_3757 : vec3<f32> = ((vec3<f32>(x_3750, x_3750, x_3750) * x_3752) + vec3<f32>(x_3755.x, x_3755.y, x_3755.z));
  let x_3758 : vec4<f32> = SV_Target0;
  SV_Target0 = vec4<f32>(x_3757.x, x_3757.y, x_3757.z, x_3758.w);
  let x_3760 : bool = u_xlatb43;
  if (x_3760) {
    let x_3765 : f32 = u_xlat1.x;
    x_3761 = x_3765;
  } else {
    x_3761 = 1.0f;
  }
  let x_3767 : f32 = x_3761;
  SV_Target0.w = x_3767;
  let x_3773 : u32 = x_66.x_RenderingLayerMaxInt;
  let x_3775 : f32 = x_1592.unity_RenderingLayer.x;
  u_xlatu0 = (x_3773 & bitcast<u32>(x_3775));
  let x_3778 : u32 = u_xlatu0;
  u_xlat0.x = f32(x_3778);
  let x_3783 : f32 = u_xlat0.x;
  let x_3785 : f32 = x_66.x_RenderingLayerRcpMaxInt;
  SV_Target1.x = (x_3783 * x_3785);
  let x_3789 : f32 = SV_Target1.x;
  SV_Target1.x = clamp(x_3789, 0.0f, 1.0f);
  let x_3792 : vec4<f32> = SV_Target1;
  SV_Target1 = vec4<f32>(x_3792.x, vec3<f32>(0.0f, 0.0f, 0.0f).x, vec3<f32>(0.0f, 0.0f, 0.0f).y, vec3<f32>(0.0f, 0.0f, 0.0f).z);
  return;
}

struct main_out {
  @location(0)
  SV_Target0_1 : vec4<f32>,
  @location(1)
  SV_Target1_1 : vec4<f32>,
}

@fragment
fn main(@builtin(position) gl_FragCoord_param : vec4<f32>, @location(1) vs_INTERP1_param : vec3<f32>, @location(3) vs_INTERP3_param : vec4<f32>, @location(4) vs_INTERP4_param : vec4<f32>, @location(0) vs_INTERP0_param : vec3<f32>, @location(2) vs_INTERP2_param : vec4<f32>, @location(5) vs_INTERP9_param : vec4<f32>) -> main_out {
  gl_FragCoord = gl_FragCoord_param;
  vs_INTERP1 = vs_INTERP1_param;
  vs_INTERP3 = vs_INTERP3_param;
  vs_INTERP4 = vs_INTERP4_param;
  vs_INTERP0 = vs_INTERP0_param;
  vs_INTERP2 = vs_INTERP2_param;
  vs_INTERP9 = vs_INTERP9_param;
  main_1();
  return main_out(SV_Target0, SV_Target1);
}

