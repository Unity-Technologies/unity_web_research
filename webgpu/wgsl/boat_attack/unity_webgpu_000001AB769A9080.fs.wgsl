type Arr = array<vec4<f32>, 2u>;

type Arr_1 = array<mat4x4<f32>, 2u>;

type Arr_2 = array<vec4<f32>, 2u>;

type Arr_3 = array<vec4<f32>, 2u>;

struct PGlobals {
  x_GlobalMipBias : vec2<f32>,
  @size(8)
  padding : u32,
  x_ZBufferParams : vec4<f32>,
  unity_MatrixV : mat4x4<f32>,
  x_SSAOParams : vec4<f32>,
  x_CameraViewTopLeftCorner : Arr_3,
  x_CameraViewProjections : Arr_1,
  x_SourceSize : vec4<f32>,
  x_ProjectionParams2 : vec4<f32>,
  x_CameraViewXExtent : Arr_3,
  x_CameraViewYExtent : Arr_3,
  x_SSAOBlueNoiseParams : vec4<f32>,
}

@group(0) @binding(0) var x_CameraDepthTexture : texture_2d<f32>;

@group(0) @binding(3) var sampler_CameraDepthTexture : sampler;

var<private> vs_TEXCOORD0 : vec2<f32>;

@group(1) @binding(0) var<uniform> x_33 : PGlobals;

var<private> SV_Target0 : vec4<f32>;

@group(0) @binding(1) var x_BlueNoiseTexture : texture_2d<f32>;

@group(0) @binding(2) var sampler_PointRepeat : sampler;

var<private> gl_FragCoord : vec4<f32>;

fn main_1() {
  var u_xlat0 : f32;
  var u_xlatb8 : bool;
  var u_xlat8 : vec3<f32>;
  var u_xlat16 : f32;
  var u_xlat1 : vec4<f32>;
  var u_xlat9 : vec3<f32>;
  var u_xlat2 : vec4<f32>;
  var u_xlat11 : vec3<f32>;
  var u_xlat12 : vec3<f32>;
  var u_xlatb1 : bool;
  var u_xlatb26 : bool;
  var u_xlat5 : vec3<f32>;
  var x_285 : vec3<f32>;
  var u_xlat4 : vec4<f32>;
  var x_294 : vec3<f32>;
  var x_305 : vec3<f32>;
  var x_316 : vec3<f32>;
  var x_327 : vec2<f32>;
  var u_xlat17 : f32;
  var u_xlat3 : vec4<f32>;
  var u_xlat10 : vec2<f32>;
  var u_xlat25 : f32;
  var u_xlat18 : vec2<f32>;
  var u_xlatb25 : bool;
  var u_xlatb3 : vec2<bool>;
  var u_xlat26 : f32;
  var u_xlat6 : f32;
  var u_xlat7 : f32;
  var u_xlat28 : f32;
  var u_xlatb28 : bool;
  var u_xlatb18 : bool;
  var u_xlat19 : f32;
  var u_xlatb2 : vec4<bool>;
  var u_xlat_precise_vec4 : vec4<f32>;
  var u_xlat_precise_ivec4 : vec4<i32>;
  var u_xlat_precise_bvec4 : vec4<bool>;
  var u_xlat_precise_uvec4 : vec4<u32>;
  let x_22 : vec2<f32> = vs_TEXCOORD0;
  let x_39 : f32 = x_33.x_GlobalMipBias.x;
  let x_40 : vec4<f32> = textureSampleBias(x_CameraDepthTexture, sampler_CameraDepthTexture, x_22, x_39);
  u_xlat0 = x_40.x;
  let x_45 : f32 = u_xlat0;
  u_xlatb8 = (x_45 < 0.00001f);
  let x_48 : bool = u_xlatb8;
  if (x_48) {
    SV_Target0 = vec4<f32>(0.0f, 0.5f, 0.5f, 0.5f);
    return;
  }
  let x_59 : f32 = x_33.x_ZBufferParams.z;
  let x_60 : f32 = u_xlat0;
  let x_64 : f32 = x_33.x_ZBufferParams.w;
  u_xlat0 = ((x_59 * x_60) + x_64);
  let x_67 : f32 = u_xlat0;
  u_xlat0 = (1.0f / x_67);
  let x_71 : f32 = x_33.x_SSAOParams.w;
  let x_72 : f32 = u_xlat0;
  u_xlatb8 = (x_71 < x_72);
  let x_74 : bool = u_xlatb8;
  if (x_74) {
    SV_Target0 = vec4<f32>(0.0f, 0.5f, 0.5f, 0.5f);
    return;
  }
  let x_84 : f32 = vs_TEXCOORD0.y;
  u_xlat8.x = (-(x_84) + 1.0f);
  let x_89 : f32 = u_xlat0;
  let x_92 : f32 = x_33.x_ProjectionParams2.x;
  u_xlat16 = (x_89 * x_92);
  let x_99 : vec4<f32> = x_33.x_CameraViewXExtent[0i];
  let x_101 : vec2<f32> = vs_TEXCOORD0;
  let x_106 : vec4<f32> = x_33.x_CameraViewTopLeftCorner[0i];
  let x_108 : vec3<f32> = ((vec3<f32>(x_99.x, x_99.y, x_99.z) * vec3<f32>(x_101.x, x_101.x, x_101.x)) + vec3<f32>(x_106.x, x_106.y, x_106.z));
  let x_109 : vec4<f32> = u_xlat1;
  u_xlat1 = vec4<f32>(x_108.x, x_108.y, x_108.z, x_109.w);
  let x_113 : vec4<f32> = x_33.x_CameraViewYExtent[0i];
  let x_115 : vec3<f32> = u_xlat8;
  let x_118 : vec4<f32> = u_xlat1;
  let x_120 : vec3<f32> = ((vec3<f32>(x_113.x, x_113.y, x_113.z) * vec3<f32>(x_115.x, x_115.x, x_115.x)) + vec3<f32>(x_118.x, x_118.y, x_118.z));
  let x_121 : vec4<f32> = u_xlat1;
  u_xlat1 = vec4<f32>(x_120.x, x_120.y, x_120.z, x_121.w);
  let x_123 : f32 = u_xlat16;
  let x_125 : vec4<f32> = u_xlat1;
  u_xlat8 = (vec3<f32>(x_123, x_123, x_123) * vec3<f32>(x_125.x, x_125.y, x_125.z));
  let x_131 : f32 = x_33.x_SourceSize.z;
  u_xlat9.x = (x_131 * -2.0f);
  u_xlat9.y = 0.0f;
  let x_136 : vec3<f32> = u_xlat9;
  let x_138 : vec2<f32> = vs_TEXCOORD0;
  let x_139 : vec2<f32> = (vec2<f32>(x_136.x, x_136.y) + x_138);
  let x_140 : vec3<f32> = u_xlat9;
  u_xlat9 = vec3<f32>(x_139.x, x_139.y, x_140.z);
  let x_145 : vec3<f32> = u_xlat9;
  let x_148 : f32 = x_33.x_GlobalMipBias.x;
  let x_149 : vec4<f32> = textureSampleBias(x_CameraDepthTexture, sampler_CameraDepthTexture, vec2<f32>(x_145.x, x_145.y), x_148);
  u_xlat1.x = x_149.x;
  let x_153 : f32 = x_33.x_ZBufferParams.z;
  let x_155 : f32 = u_xlat1.x;
  let x_158 : f32 = x_33.x_ZBufferParams.w;
  u_xlat1.x = ((x_153 * x_155) + x_158);
  let x_162 : f32 = u_xlat1.x;
  u_xlat9.z = (1.0f / x_162);
  let x_167 : f32 = x_33.x_SourceSize.z;
  u_xlat2.x = (x_167 * 2.0f);
  u_xlat2.y = 0.0f;
  let x_172 : vec4<f32> = u_xlat2;
  let x_174 : vec2<f32> = vs_TEXCOORD0;
  let x_175 : vec2<f32> = (vec2<f32>(x_172.x, x_172.y) + x_174);
  let x_176 : vec4<f32> = u_xlat2;
  u_xlat2 = vec4<f32>(x_175.x, x_175.y, x_176.z, x_176.w);
  let x_181 : vec4<f32> = u_xlat2;
  let x_184 : f32 = x_33.x_GlobalMipBias.x;
  let x_185 : vec4<f32> = textureSampleBias(x_CameraDepthTexture, sampler_CameraDepthTexture, vec2<f32>(x_181.x, x_181.y), x_184);
  u_xlat1.x = x_185.x;
  let x_189 : f32 = x_33.x_ZBufferParams.z;
  let x_191 : f32 = u_xlat1.x;
  let x_194 : f32 = x_33.x_ZBufferParams.w;
  u_xlat1.x = ((x_189 * x_191) + x_194);
  let x_198 : f32 = u_xlat1.x;
  u_xlat2.z = (1.0f / x_198);
  u_xlat11.x = 0.0f;
  let x_204 : f32 = x_33.x_SourceSize.w;
  u_xlat11.y = (x_204 * 2.0f);
  let x_207 : vec3<f32> = u_xlat11;
  let x_209 : vec2<f32> = vs_TEXCOORD0;
  let x_210 : vec2<f32> = (vec2<f32>(x_207.x, x_207.y) + x_209);
  let x_211 : vec3<f32> = u_xlat11;
  u_xlat11 = vec3<f32>(x_210.x, x_210.y, x_211.z);
  let x_216 : vec3<f32> = u_xlat11;
  let x_219 : f32 = x_33.x_GlobalMipBias.x;
  let x_220 : vec4<f32> = textureSampleBias(x_CameraDepthTexture, sampler_CameraDepthTexture, vec2<f32>(x_216.x, x_216.y), x_219);
  u_xlat1.x = x_220.x;
  let x_224 : f32 = x_33.x_ZBufferParams.z;
  let x_226 : f32 = u_xlat1.x;
  let x_229 : f32 = x_33.x_ZBufferParams.w;
  u_xlat1.x = ((x_224 * x_226) + x_229);
  let x_233 : f32 = u_xlat1.x;
  u_xlat11.z = (1.0f / x_233);
  u_xlat12.x = 0.0f;
  let x_239 : f32 = x_33.x_SourceSize.w;
  u_xlat12.y = (x_239 * -2.0f);
  let x_242 : vec3<f32> = u_xlat12;
  let x_244 : vec2<f32> = vs_TEXCOORD0;
  let x_245 : vec2<f32> = (vec2<f32>(x_242.x, x_242.y) + x_244);
  let x_246 : vec3<f32> = u_xlat12;
  u_xlat12 = vec3<f32>(x_245.x, x_245.y, x_246.z);
  let x_251 : vec3<f32> = u_xlat12;
  let x_254 : f32 = x_33.x_GlobalMipBias.x;
  let x_255 : vec4<f32> = textureSampleBias(x_CameraDepthTexture, sampler_CameraDepthTexture, vec2<f32>(x_251.x, x_251.y), x_254);
  u_xlat1.x = x_255.x;
  let x_259 : f32 = x_33.x_ZBufferParams.z;
  let x_261 : f32 = u_xlat1.x;
  let x_264 : f32 = x_33.x_ZBufferParams.w;
  u_xlat1.x = ((x_259 * x_261) + x_264);
  let x_268 : f32 = u_xlat1.x;
  u_xlat12.z = (1.0f / x_268);
  let x_273 : f32 = u_xlat2.z;
  let x_275 : f32 = u_xlat9.z;
  u_xlatb1 = (x_273 < x_275);
  let x_279 : f32 = u_xlat11.z;
  let x_281 : f32 = u_xlat12.z;
  u_xlatb26 = (x_279 < x_281);
  let x_284 : bool = u_xlatb1;
  if (x_284) {
    let x_288 : vec3<f32> = u_xlat9;
    x_285 = x_288;
  } else {
    let x_290 : vec3<f32> = u_xlat12;
    x_285 = x_290;
  }
  let x_291 : vec3<f32> = x_285;
  u_xlat5 = x_291;
  let x_293 : bool = u_xlatb1;
  if (x_293) {
    let x_297 : vec3<f32> = u_xlat12;
    x_294 = x_297;
  } else {
    let x_299 : vec4<f32> = u_xlat2;
    x_294 = vec3<f32>(x_299.x, x_299.y, x_299.z);
  }
  let x_301 : vec3<f32> = x_294;
  let x_302 : vec4<f32> = u_xlat4;
  u_xlat4 = vec4<f32>(x_302.x, x_301.x, x_301.y, x_301.z);
  let x_304 : bool = u_xlatb1;
  if (x_304) {
    let x_308 : vec3<f32> = u_xlat11;
    x_305 = x_308;
  } else {
    let x_310 : vec4<f32> = u_xlat2;
    x_305 = vec3<f32>(x_310.x, x_310.y, x_310.z);
  }
  let x_312 : vec3<f32> = x_305;
  let x_313 : vec4<f32> = u_xlat2;
  u_xlat2 = vec4<f32>(x_312.x, x_312.y, x_312.z, x_313.w);
  let x_315 : bool = u_xlatb1;
  if (x_315) {
    let x_319 : vec3<f32> = u_xlat9;
    x_316 = x_319;
  } else {
    let x_321 : vec3<f32> = u_xlat11;
    x_316 = x_321;
  }
  let x_322 : vec3<f32> = x_316;
  let x_323 : vec4<f32> = u_xlat1;
  u_xlat1 = vec4<f32>(x_323.x, x_322.x, x_322.y, x_322.z);
  let x_325 : bool = u_xlatb26;
  if (x_325) {
    let x_330 : vec3<f32> = u_xlat5;
    x_327 = vec2<f32>(x_330.x, x_330.y);
  } else {
    let x_333 : vec4<f32> = u_xlat2;
    x_327 = vec2<f32>(x_333.x, x_333.y);
  }
  let x_335 : vec2<f32> = x_327;
  let x_336 : vec4<f32> = u_xlat2;
  u_xlat2 = vec4<f32>(x_335.x, x_335.y, x_336.z, x_336.w);
  let x_339 : f32 = u_xlat5.z;
  u_xlat4.x = x_339;
  let x_342 : f32 = u_xlat2.z;
  u_xlat1.x = x_342;
  let x_344 : bool = u_xlatb26;
  let x_345 : vec4<f32> = u_xlat4;
  let x_346 : vec4<f32> = u_xlat1;
  u_xlat1 = select(x_346, x_345, vec4<bool>(x_344, x_344, x_344, x_344));
  let x_352 : f32 = u_xlat1.z;
  u_xlat17 = (-(x_352) + 1.0f);
  let x_355 : vec4<f32> = u_xlat1;
  let x_358 : vec4<f32> = x_33.x_ProjectionParams2;
  let x_360 : vec2<f32> = (vec2<f32>(x_355.w, x_355.x) * vec2<f32>(x_358.x, x_358.x));
  let x_361 : vec4<f32> = u_xlat1;
  u_xlat1 = vec4<f32>(x_360.x, x_361.y, x_361.z, x_360.y);
  let x_365 : vec4<f32> = x_33.x_CameraViewXExtent[0i];
  let x_367 : vec4<f32> = u_xlat1;
  let x_371 : vec4<f32> = x_33.x_CameraViewTopLeftCorner[0i];
  let x_373 : vec3<f32> = ((vec3<f32>(x_365.z, x_365.x, x_365.y) * vec3<f32>(x_367.y, x_367.y, x_367.y)) + vec3<f32>(x_371.z, x_371.x, x_371.y));
  let x_374 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_373.x, x_373.y, x_373.z, x_374.w);
  let x_377 : vec4<f32> = x_33.x_CameraViewYExtent[0i];
  let x_379 : f32 = u_xlat17;
  let x_382 : vec4<f32> = u_xlat3;
  let x_384 : vec3<f32> = ((vec3<f32>(x_377.z, x_377.x, x_377.y) * vec3<f32>(x_379, x_379, x_379)) + vec3<f32>(x_382.x, x_382.y, x_382.z));
  let x_385 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_384.x, x_384.y, x_384.z, x_385.w);
  let x_387 : vec4<f32> = u_xlat3;
  let x_389 : vec4<f32> = u_xlat1;
  let x_392 : vec3<f32> = u_xlat8;
  let x_395 : vec3<f32> = ((vec3<f32>(x_387.x, x_387.y, x_387.z) * vec3<f32>(x_389.x, x_389.x, x_389.x)) + -(vec3<f32>(x_392.z, x_392.x, x_392.y)));
  let x_396 : vec4<f32> = u_xlat1;
  u_xlat1 = vec4<f32>(x_395.x, x_395.y, x_395.z, x_396.w);
  let x_400 : f32 = u_xlat2.y;
  u_xlat10.x = (-(x_400) + 1.0f);
  let x_405 : vec4<f32> = x_33.x_CameraViewXExtent[0i];
  let x_407 : vec4<f32> = u_xlat2;
  let x_411 : vec4<f32> = x_33.x_CameraViewTopLeftCorner[0i];
  let x_413 : vec3<f32> = ((vec3<f32>(x_405.y, x_405.z, x_405.x) * vec3<f32>(x_407.x, x_407.x, x_407.x)) + vec3<f32>(x_411.y, x_411.z, x_411.x));
  let x_414 : vec4<f32> = u_xlat2;
  u_xlat2 = vec4<f32>(x_413.x, x_414.y, x_413.y, x_413.z);
  let x_417 : vec4<f32> = x_33.x_CameraViewYExtent[0i];
  let x_419 : vec2<f32> = u_xlat10;
  let x_422 : vec4<f32> = u_xlat2;
  let x_424 : vec3<f32> = ((vec3<f32>(x_417.y, x_417.z, x_417.x) * vec3<f32>(x_419.x, x_419.x, x_419.x)) + vec3<f32>(x_422.x, x_422.z, x_422.w));
  let x_425 : vec4<f32> = u_xlat2;
  u_xlat2 = vec4<f32>(x_424.x, x_424.y, x_424.z, x_425.w);
  let x_427 : vec4<f32> = u_xlat2;
  let x_429 : vec4<f32> = u_xlat1;
  let x_432 : vec3<f32> = u_xlat8;
  let x_435 : vec3<f32> = ((vec3<f32>(x_427.x, x_427.y, x_427.z) * vec3<f32>(x_429.w, x_429.w, x_429.w)) + -(vec3<f32>(x_432.y, x_432.z, x_432.x)));
  let x_436 : vec4<f32> = u_xlat2;
  u_xlat2 = vec4<f32>(x_435.x, x_435.y, x_435.z, x_436.w);
  let x_438 : vec4<f32> = u_xlat1;
  let x_440 : vec4<f32> = u_xlat2;
  let x_442 : vec3<f32> = (vec3<f32>(x_438.x, x_438.y, x_438.z) * vec3<f32>(x_440.x, x_440.y, x_440.z));
  let x_443 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_442.x, x_442.y, x_442.z, x_443.w);
  let x_445 : vec4<f32> = u_xlat1;
  let x_447 : vec4<f32> = u_xlat2;
  let x_450 : vec4<f32> = u_xlat3;
  let x_453 : vec3<f32> = ((vec3<f32>(x_445.z, x_445.x, x_445.y) * vec3<f32>(x_447.y, x_447.z, x_447.x)) + -(vec3<f32>(x_450.x, x_450.y, x_450.z)));
  let x_454 : vec4<f32> = u_xlat1;
  u_xlat1 = vec4<f32>(x_453.x, x_453.y, x_453.z, x_454.w);
  let x_457 : vec4<f32> = u_xlat1;
  let x_459 : vec4<f32> = u_xlat1;
  u_xlat25 = dot(vec3<f32>(x_457.x, x_457.y, x_457.z), vec3<f32>(x_459.x, x_459.y, x_459.z));
  let x_462 : f32 = u_xlat25;
  u_xlat25 = inverseSqrt(x_462);
  let x_464 : f32 = u_xlat25;
  let x_466 : vec4<f32> = u_xlat1;
  let x_468 : vec3<f32> = (vec3<f32>(x_464, x_464, x_464) * vec3<f32>(x_466.x, x_466.y, x_466.z));
  let x_469 : vec4<f32> = u_xlat1;
  u_xlat1 = vec4<f32>(x_468.x, x_468.y, x_468.z, x_469.w);
  let x_471 : vec2<f32> = vs_TEXCOORD0;
  let x_474 : vec4<f32> = x_33.x_SSAOBlueNoiseParams;
  let x_476 : vec2<f32> = (x_471 + vec2<f32>(x_474.z, x_474.w));
  let x_477 : vec4<f32> = u_xlat2;
  u_xlat2 = vec4<f32>(x_476.x, x_476.y, x_477.z, x_477.w);
  let x_480 : vec4<f32> = u_xlat2;
  let x_483 : vec4<f32> = x_33.x_SSAOBlueNoiseParams;
  u_xlat18 = (vec2<f32>(x_480.x, x_480.y) * vec2<f32>(x_483.x, x_483.y));
  let x_491 : vec2<f32> = u_xlat18;
  let x_493 : f32 = x_33.x_GlobalMipBias.x;
  let x_494 : vec4<f32> = textureSampleBias(x_BlueNoiseTexture, sampler_PointRepeat, x_491, x_493);
  u_xlat25 = x_494.w;
  let x_496 : f32 = u_xlat25;
  u_xlat18.x = fract(x_496);
  let x_500 : f32 = u_xlat18.x;
  u_xlat3.z = ((x_500 * 2.0f) + -1.0f);
  let x_505 : f32 = u_xlat25;
  u_xlat25 = (x_505 + 0.9296875f);
  let x_508 : f32 = u_xlat25;
  u_xlat25 = (x_508 * 628.31854248f);
  let x_512 : f32 = u_xlat3.z;
  let x_515 : f32 = u_xlat3.z;
  u_xlat18.x = ((-(x_512) * x_515) + 1.0f);
  let x_520 : f32 = u_xlat18.x;
  u_xlat18.x = sqrt(x_520);
  let x_523 : f32 = u_xlat25;
  u_xlat4.x = sin(x_523);
  let x_526 : f32 = u_xlat25;
  u_xlat5.x = cos(x_526);
  let x_530 : f32 = u_xlat18.x;
  let x_532 : f32 = u_xlat5.x;
  u_xlat3.x = (x_530 * x_532);
  let x_536 : f32 = u_xlat18.x;
  let x_538 : f32 = u_xlat4.x;
  u_xlat3.y = (x_536 * x_538);
  let x_541 : vec4<f32> = u_xlat1;
  let x_543 : vec4<f32> = u_xlat3;
  u_xlat25 = dot(vec3<f32>(x_541.x, x_541.y, x_541.z), vec3<f32>(x_543.x, x_543.y, x_543.z));
  let x_547 : f32 = u_xlat25;
  u_xlatb25 = (x_547 >= 0.0f);
  let x_549 : bool = u_xlatb25;
  u_xlat25 = select(-1.0f, 1.0f, x_549);
  let x_551 : f32 = u_xlat25;
  let x_553 : vec4<f32> = u_xlat3;
  let x_555 : vec3<f32> = (vec3<f32>(x_551, x_551, x_551) * vec3<f32>(x_553.x, x_553.y, x_553.z));
  let x_556 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_555.x, x_555.y, x_555.z, x_556.w);
  let x_558 : vec4<f32> = u_xlat3;
  let x_561 : vec4<f32> = x_33.x_SSAOParams;
  let x_563 : vec3<f32> = (vec3<f32>(x_558.x, x_558.y, x_558.z) * vec3<f32>(x_561.y, x_561.y, x_561.y));
  let x_564 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_563.x, x_563.y, x_563.z, x_564.w);
  let x_566 : vec4<f32> = u_xlat3;
  let x_571 : vec3<f32> = u_xlat8;
  let x_572 : vec3<f32> = ((vec3<f32>(x_566.x, x_566.y, x_566.z) * vec3<f32>(0.100000001f, 0.100000001f, 0.100000001f)) + x_571);
  let x_573 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_572.x, x_572.y, x_572.z, x_573.w);
  let x_575 : vec4<f32> = u_xlat3;
  let x_579 : vec4<f32> = x_33.x_CameraViewProjections[0i][1i];
  u_xlat18 = (vec2<f32>(x_575.y, x_575.y) * vec2<f32>(x_579.x, x_579.y));
  let x_583 : vec4<f32> = x_33.x_CameraViewProjections[0i][0i];
  let x_585 : vec4<f32> = u_xlat3;
  let x_588 : vec2<f32> = u_xlat18;
  u_xlat18 = ((vec2<f32>(x_583.x, x_583.y) * vec2<f32>(x_585.x, x_585.x)) + x_588);
  let x_592 : vec4<f32> = x_33.x_CameraViewProjections[0i][2i];
  let x_594 : vec4<f32> = u_xlat3;
  let x_597 : vec2<f32> = u_xlat18;
  u_xlat18 = ((vec2<f32>(x_592.x, x_592.y) * vec2<f32>(x_594.z, x_594.z)) + x_597);
  let x_600 : f32 = x_33.unity_MatrixV[0i].z;
  u_xlat4.x = x_600;
  let x_603 : f32 = x_33.unity_MatrixV[1i].z;
  u_xlat4.y = x_603;
  let x_606 : f32 = x_33.unity_MatrixV[2i].z;
  u_xlat4.z = x_606;
  let x_608 : vec4<f32> = u_xlat4;
  let x_610 : vec4<f32> = u_xlat3;
  u_xlat25 = dot(vec3<f32>(x_608.x, x_608.y, x_608.z), vec3<f32>(x_610.x, x_610.y, x_610.z));
  let x_613 : f32 = u_xlat25;
  u_xlat3.x = (1.0f / -(x_613));
  let x_617 : vec2<f32> = u_xlat18;
  let x_618 : vec4<f32> = u_xlat3;
  u_xlat18 = ((x_617 * vec2<f32>(x_618.x, x_618.x)) + vec2<f32>(1.0f, 1.0f));
  let x_623 : vec2<f32> = u_xlat18;
  u_xlat18 = (x_623 * vec2<f32>(0.5f, 0.5f));
  let x_626 : vec2<f32> = u_xlat18;
  u_xlat18 = clamp(x_626, vec2<f32>(0.0f, 0.0f), vec2<f32>(1.0f, 1.0f));
  let x_633 : vec2<f32> = u_xlat18;
  let x_635 : f32 = x_33.x_GlobalMipBias.x;
  let x_636 : vec4<f32> = textureSampleBias(x_CameraDepthTexture, sampler_CameraDepthTexture, x_633, x_635);
  u_xlat3.x = x_636.x;
  let x_640 : f32 = x_33.x_ZBufferParams.z;
  let x_642 : f32 = u_xlat3.x;
  let x_645 : f32 = x_33.x_ZBufferParams.w;
  u_xlat11.x = ((x_640 * x_642) + x_645);
  let x_649 : f32 = u_xlat11.x;
  u_xlat11.x = (1.0f / x_649);
  let x_652 : f32 = u_xlat25;
  let x_655 : f32 = u_xlat11.x;
  u_xlat25 = (-(x_652) + -(x_655));
  let x_658 : f32 = u_xlat25;
  let x_661 : f32 = x_33.x_SSAOParams.y;
  u_xlatb25 = (abs(x_658) < x_661);
  let x_663 : bool = u_xlatb25;
  u_xlat25 = select(0.0f, 1.0f, x_663);
  let x_669 : f32 = u_xlat3.x;
  u_xlatb3.x = (0.00001f < x_669);
  let x_673 : bool = u_xlatb3.x;
  u_xlat3.x = select(0.0f, 1.0f, x_673);
  let x_676 : f32 = u_xlat25;
  let x_678 : f32 = u_xlat3.x;
  u_xlat25 = (x_676 * x_678);
  let x_682 : f32 = u_xlat18.y;
  u_xlat26 = (-(x_682) + 1.0f);
  let x_686 : f32 = u_xlat11.x;
  let x_688 : f32 = x_33.x_ProjectionParams2.x;
  u_xlat3.x = (x_686 * x_688);
  let x_692 : vec4<f32> = x_33.x_CameraViewXExtent[0i];
  let x_694 : vec2<f32> = u_xlat18;
  let x_698 : vec4<f32> = x_33.x_CameraViewTopLeftCorner[0i];
  u_xlat11 = ((vec3<f32>(x_692.x, x_692.y, x_692.z) * vec3<f32>(x_694.x, x_694.x, x_694.x)) + vec3<f32>(x_698.x, x_698.y, x_698.z));
  let x_702 : vec4<f32> = x_33.x_CameraViewYExtent[0i];
  let x_704 : f32 = u_xlat26;
  let x_707 : vec3<f32> = u_xlat11;
  u_xlat11 = ((vec3<f32>(x_702.x, x_702.y, x_702.z) * vec3<f32>(x_704, x_704, x_704)) + x_707);
  let x_709 : vec3<f32> = u_xlat11;
  let x_710 : vec4<f32> = u_xlat3;
  let x_713 : vec3<f32> = u_xlat8;
  let x_715 : vec3<f32> = ((x_709 * vec3<f32>(x_710.x, x_710.x, x_710.x)) + -(x_713));
  let x_716 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_715.x, x_715.y, x_715.z, x_716.w);
  let x_718 : vec4<f32> = u_xlat3;
  let x_720 : vec4<f32> = u_xlat1;
  u_xlat18.x = dot(vec3<f32>(x_718.x, x_718.y, x_718.z), vec3<f32>(x_720.x, x_720.y, x_720.z));
  let x_724 : f32 = u_xlat0;
  let x_729 : f32 = u_xlat18.x;
  u_xlat18.x = ((-(x_724) * 0.004f) + x_729);
  let x_733 : f32 = u_xlat18.x;
  u_xlat18.x = max(x_733, 0.0f);
  let x_736 : vec4<f32> = u_xlat3;
  let x_738 : vec4<f32> = u_xlat3;
  u_xlat26 = dot(vec3<f32>(x_736.x, x_736.y, x_736.z), vec3<f32>(x_738.x, x_738.y, x_738.z));
  let x_741 : f32 = u_xlat26;
  u_xlat26 = (x_741 + 0.0001f);
  let x_744 : f32 = u_xlat26;
  u_xlat26 = (1.0f / x_744);
  let x_746 : f32 = u_xlat26;
  let x_748 : f32 = u_xlat18.x;
  u_xlat18.x = (x_746 * x_748);
  let x_751 : vec4<f32> = u_xlat2;
  let x_754 : vec4<f32> = x_33.x_SSAOBlueNoiseParams;
  u_xlat3 = ((vec4<f32>(x_751.x, x_751.y, x_751.x, x_751.y) * vec4<f32>(x_754.x, x_754.y, x_754.x, x_754.y)) + vec4<f32>(0.083333336f, 0.083333336f, 0.166666672f, 0.166666672f));
  let x_764 : vec4<f32> = u_xlat3;
  let x_767 : f32 = x_33.x_GlobalMipBias.x;
  let x_768 : vec4<f32> = textureSampleBias(x_BlueNoiseTexture, sampler_PointRepeat, vec2<f32>(x_764.x, x_764.y), x_767);
  u_xlat26 = x_768.w;
  let x_770 : f32 = u_xlat26;
  let x_775 : vec2<f32> = (vec2<f32>(x_770, x_770) + vec2<f32>(0.33984375f, 0.76171875f));
  let x_776 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_775.x, x_775.y, x_776.z, x_776.w);
  let x_779 : f32 = u_xlat3.x;
  u_xlat26 = fract(x_779);
  let x_781 : f32 = u_xlat26;
  u_xlat5.z = ((x_781 * 2.0f) + -1.0f);
  let x_786 : f32 = u_xlat3.y;
  u_xlat26 = (x_786 * 628.31854248f);
  let x_789 : f32 = u_xlat5.z;
  let x_792 : f32 = u_xlat5.z;
  u_xlat3.x = ((-(x_789) * x_792) + 1.0f);
  let x_797 : f32 = u_xlat3.x;
  u_xlat3.x = sqrt(x_797);
  let x_801 : f32 = u_xlat26;
  u_xlat6 = sin(x_801);
  let x_804 : f32 = u_xlat26;
  u_xlat7 = cos(x_804);
  let x_807 : f32 = u_xlat3.x;
  let x_808 : f32 = u_xlat7;
  u_xlat5.x = (x_807 * x_808);
  let x_812 : f32 = u_xlat3.x;
  let x_813 : f32 = u_xlat6;
  u_xlat5.y = (x_812 * x_813);
  let x_816 : vec4<f32> = u_xlat1;
  let x_818 : vec3<f32> = u_xlat5;
  u_xlat26 = dot(vec3<f32>(x_816.x, x_816.y, x_816.z), x_818);
  let x_820 : f32 = u_xlat26;
  u_xlatb26 = (x_820 >= 0.0f);
  let x_822 : bool = u_xlatb26;
  u_xlat26 = select(-1.0f, 1.0f, x_822);
  let x_824 : f32 = u_xlat26;
  let x_826 : vec3<f32> = u_xlat5;
  u_xlat5 = (vec3<f32>(x_824, x_824, x_824) * x_826);
  let x_828 : vec3<f32> = u_xlat5;
  let x_830 : vec4<f32> = x_33.x_SSAOParams;
  u_xlat5 = (x_828 * vec3<f32>(x_830.y, x_830.y, x_830.y));
  let x_833 : vec3<f32> = u_xlat5;
  let x_837 : vec3<f32> = u_xlat8;
  u_xlat5 = ((x_833 * vec3<f32>(0.106250003f, 0.106250003f, 0.106250003f)) + x_837);
  let x_839 : vec3<f32> = u_xlat5;
  let x_842 : vec4<f32> = x_33.x_CameraViewProjections[0i][1i];
  let x_844 : vec2<f32> = (vec2<f32>(x_839.y, x_839.y) * vec2<f32>(x_842.x, x_842.y));
  let x_845 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_844.x, x_844.y, x_845.z, x_845.w);
  let x_848 : vec4<f32> = x_33.x_CameraViewProjections[0i][0i];
  let x_850 : vec3<f32> = u_xlat5;
  let x_853 : vec4<f32> = u_xlat3;
  let x_855 : vec2<f32> = ((vec2<f32>(x_848.x, x_848.y) * vec2<f32>(x_850.x, x_850.x)) + vec2<f32>(x_853.x, x_853.y));
  let x_856 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_855.x, x_855.y, x_856.z, x_856.w);
  let x_859 : vec4<f32> = x_33.x_CameraViewProjections[0i][2i];
  let x_861 : vec3<f32> = u_xlat5;
  let x_864 : vec4<f32> = u_xlat3;
  let x_866 : vec2<f32> = ((vec2<f32>(x_859.x, x_859.y) * vec2<f32>(x_861.z, x_861.z)) + vec2<f32>(x_864.x, x_864.y));
  let x_867 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_866.x, x_866.y, x_867.z, x_867.w);
  let x_869 : vec4<f32> = u_xlat4;
  let x_871 : vec3<f32> = u_xlat5;
  u_xlat26 = dot(vec3<f32>(x_869.x, x_869.y, x_869.z), x_871);
  let x_874 : f32 = u_xlat26;
  u_xlat28 = (1.0f / -(x_874));
  let x_877 : vec4<f32> = u_xlat3;
  let x_879 : f32 = u_xlat28;
  let x_882 : vec2<f32> = ((vec2<f32>(x_877.x, x_877.y) * vec2<f32>(x_879, x_879)) + vec2<f32>(1.0f, 1.0f));
  let x_883 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_882.x, x_882.y, x_883.z, x_883.w);
  let x_885 : vec4<f32> = u_xlat3;
  let x_887 : vec2<f32> = (vec2<f32>(x_885.x, x_885.y) * vec2<f32>(0.5f, 0.5f));
  let x_888 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_887.x, x_887.y, x_888.z, x_888.w);
  let x_890 : vec4<f32> = u_xlat3;
  let x_894 : vec2<f32> = clamp(vec2<f32>(x_890.x, x_890.y), vec2<f32>(0.0f, 0.0f), vec2<f32>(1.0f, 1.0f));
  let x_895 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_894.x, x_894.y, x_895.z, x_895.w);
  let x_900 : vec4<f32> = u_xlat3;
  let x_903 : f32 = x_33.x_GlobalMipBias.x;
  let x_904 : vec4<f32> = textureSampleBias(x_CameraDepthTexture, sampler_CameraDepthTexture, vec2<f32>(x_900.x, x_900.y), x_903);
  u_xlat28 = x_904.x;
  let x_907 : f32 = x_33.x_ZBufferParams.z;
  let x_908 : f32 = u_xlat28;
  let x_911 : f32 = x_33.x_ZBufferParams.w;
  u_xlat5.x = ((x_907 * x_908) + x_911);
  let x_915 : f32 = u_xlat5.x;
  u_xlat5.x = (1.0f / x_915);
  let x_918 : f32 = u_xlat26;
  let x_921 : f32 = u_xlat5.x;
  u_xlat26 = (-(x_918) + -(x_921));
  let x_924 : f32 = u_xlat26;
  let x_927 : f32 = x_33.x_SSAOParams.y;
  u_xlatb26 = (abs(x_924) < x_927);
  let x_929 : bool = u_xlatb26;
  u_xlat26 = select(0.0f, 1.0f, x_929);
  let x_932 : f32 = u_xlat28;
  u_xlatb28 = (0.00001f < x_932);
  let x_934 : bool = u_xlatb28;
  u_xlat28 = select(0.0f, 1.0f, x_934);
  let x_936 : f32 = u_xlat26;
  let x_937 : f32 = u_xlat28;
  u_xlat26 = (x_936 * x_937);
  let x_940 : f32 = u_xlat3.y;
  u_xlat11.x = (-(x_940) + 1.0f);
  let x_945 : f32 = u_xlat5.x;
  let x_947 : f32 = x_33.x_ProjectionParams2.x;
  u_xlat28 = (x_945 * x_947);
  let x_950 : vec4<f32> = x_33.x_CameraViewXExtent[0i];
  let x_952 : vec4<f32> = u_xlat3;
  let x_956 : vec4<f32> = x_33.x_CameraViewTopLeftCorner[0i];
  u_xlat5 = ((vec3<f32>(x_950.x, x_950.y, x_950.z) * vec3<f32>(x_952.x, x_952.x, x_952.x)) + vec3<f32>(x_956.x, x_956.y, x_956.z));
  let x_960 : vec4<f32> = x_33.x_CameraViewYExtent[0i];
  let x_962 : vec3<f32> = u_xlat11;
  let x_965 : vec3<f32> = u_xlat5;
  u_xlat5 = ((vec3<f32>(x_960.x, x_960.y, x_960.z) * vec3<f32>(x_962.x, x_962.x, x_962.x)) + x_965);
  let x_967 : vec3<f32> = u_xlat5;
  let x_968 : f32 = u_xlat28;
  let x_971 : vec3<f32> = u_xlat8;
  u_xlat5 = ((x_967 * vec3<f32>(x_968, x_968, x_968)) + -(x_971));
  let x_974 : vec3<f32> = u_xlat5;
  let x_975 : vec4<f32> = u_xlat1;
  u_xlat3.x = dot(x_974, vec3<f32>(x_975.x, x_975.y, x_975.z));
  let x_979 : f32 = u_xlat0;
  let x_983 : f32 = u_xlat3.x;
  u_xlat3.x = ((-(x_979) * 0.004f) + x_983);
  let x_987 : f32 = u_xlat3.x;
  u_xlat3.x = max(x_987, 0.0f);
  let x_990 : vec3<f32> = u_xlat5;
  let x_991 : vec3<f32> = u_xlat5;
  u_xlat11.x = dot(x_990, x_991);
  let x_995 : f32 = u_xlat11.x;
  u_xlat11.x = (x_995 + 0.0001f);
  let x_999 : f32 = u_xlat11.x;
  u_xlat11.x = (1.0f / x_999);
  let x_1003 : f32 = u_xlat11.x;
  let x_1005 : f32 = u_xlat3.x;
  u_xlat3.x = (x_1003 * x_1005);
  let x_1008 : f32 = u_xlat26;
  let x_1010 : f32 = u_xlat3.x;
  u_xlat26 = (x_1008 * x_1010);
  let x_1013 : f32 = u_xlat18.x;
  let x_1014 : f32 = u_xlat25;
  let x_1016 : f32 = u_xlat26;
  u_xlat25 = ((x_1013 * x_1014) + x_1016);
  let x_1021 : vec4<f32> = u_xlat3;
  let x_1024 : f32 = x_33.x_GlobalMipBias.x;
  let x_1025 : vec4<f32> = textureSampleBias(x_BlueNoiseTexture, sampler_PointRepeat, vec2<f32>(x_1021.z, x_1021.w), x_1024);
  u_xlat18.x = x_1025.w;
  let x_1028 : vec2<f32> = u_xlat18;
  u_xlat18 = (vec2<f32>(x_1028.x, x_1028.x) + vec2<f32>(0.75390625f, 0.133333296f));
  let x_1035 : f32 = u_xlat18.x;
  u_xlat18.x = fract(x_1035);
  let x_1039 : f32 = u_xlat18.x;
  u_xlat3.z = ((x_1039 * 2.0f) + -1.0f);
  let x_1044 : f32 = u_xlat18.y;
  u_xlat18.x = (x_1044 * 628.31854248f);
  let x_1048 : f32 = u_xlat3.z;
  let x_1051 : f32 = u_xlat3.z;
  u_xlat26 = ((-(x_1048) * x_1051) + 1.0f);
  let x_1054 : f32 = u_xlat26;
  u_xlat26 = sqrt(x_1054);
  let x_1057 : f32 = u_xlat18.x;
  u_xlat5.x = sin(x_1057);
  let x_1061 : f32 = u_xlat18.x;
  u_xlat6 = cos(x_1061);
  let x_1063 : f32 = u_xlat26;
  let x_1064 : f32 = u_xlat6;
  u_xlat3.x = (x_1063 * x_1064);
  let x_1067 : f32 = u_xlat26;
  let x_1069 : f32 = u_xlat5.x;
  u_xlat3.y = (x_1067 * x_1069);
  let x_1072 : vec4<f32> = u_xlat1;
  let x_1074 : vec4<f32> = u_xlat3;
  u_xlat18.x = dot(vec3<f32>(x_1072.x, x_1072.y, x_1072.z), vec3<f32>(x_1074.x, x_1074.y, x_1074.z));
  let x_1080 : f32 = u_xlat18.x;
  u_xlatb18 = (x_1080 >= 0.0f);
  let x_1082 : bool = u_xlatb18;
  u_xlat18.x = select(-1.0f, 1.0f, x_1082);
  let x_1085 : vec2<f32> = u_xlat18;
  let x_1087 : vec4<f32> = u_xlat3;
  let x_1089 : vec3<f32> = (vec3<f32>(x_1085.x, x_1085.x, x_1085.x) * vec3<f32>(x_1087.x, x_1087.y, x_1087.z));
  let x_1090 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_1089.x, x_1089.y, x_1089.z, x_1090.w);
  let x_1092 : vec4<f32> = u_xlat3;
  let x_1095 : vec4<f32> = x_33.x_SSAOParams;
  let x_1097 : vec3<f32> = (vec3<f32>(x_1092.x, x_1092.y, x_1092.z) * vec3<f32>(x_1095.y, x_1095.y, x_1095.y));
  let x_1098 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_1097.x, x_1097.y, x_1097.z, x_1098.w);
  let x_1100 : vec4<f32> = u_xlat3;
  let x_1105 : vec3<f32> = u_xlat8;
  let x_1106 : vec3<f32> = ((vec3<f32>(x_1100.x, x_1100.y, x_1100.z) * vec3<f32>(0.125f, 0.125f, 0.125f)) + x_1105);
  let x_1107 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_1106.x, x_1106.y, x_1106.z, x_1107.w);
  let x_1109 : vec4<f32> = u_xlat3;
  let x_1112 : vec4<f32> = x_33.x_CameraViewProjections[0i][1i];
  u_xlat18 = (vec2<f32>(x_1109.y, x_1109.y) * vec2<f32>(x_1112.x, x_1112.y));
  let x_1116 : vec4<f32> = x_33.x_CameraViewProjections[0i][0i];
  let x_1118 : vec4<f32> = u_xlat3;
  let x_1121 : vec2<f32> = u_xlat18;
  u_xlat18 = ((vec2<f32>(x_1116.x, x_1116.y) * vec2<f32>(x_1118.x, x_1118.x)) + x_1121);
  let x_1124 : vec4<f32> = x_33.x_CameraViewProjections[0i][2i];
  let x_1126 : vec4<f32> = u_xlat3;
  let x_1129 : vec2<f32> = u_xlat18;
  u_xlat18 = ((vec2<f32>(x_1124.x, x_1124.y) * vec2<f32>(x_1126.z, x_1126.z)) + x_1129);
  let x_1131 : vec4<f32> = u_xlat4;
  let x_1133 : vec4<f32> = u_xlat3;
  u_xlat3.x = dot(vec3<f32>(x_1131.x, x_1131.y, x_1131.z), vec3<f32>(x_1133.x, x_1133.y, x_1133.z));
  let x_1138 : f32 = u_xlat3.x;
  u_xlat11.x = (1.0f / -(x_1138));
  let x_1142 : vec2<f32> = u_xlat18;
  let x_1143 : vec3<f32> = u_xlat11;
  u_xlat18 = ((x_1142 * vec2<f32>(x_1143.x, x_1143.x)) + vec2<f32>(1.0f, 1.0f));
  let x_1147 : vec2<f32> = u_xlat18;
  u_xlat18 = (x_1147 * vec2<f32>(0.5f, 0.5f));
  let x_1149 : vec2<f32> = u_xlat18;
  u_xlat18 = clamp(x_1149, vec2<f32>(0.0f, 0.0f), vec2<f32>(1.0f, 1.0f));
  let x_1156 : vec2<f32> = u_xlat18;
  let x_1158 : f32 = x_33.x_GlobalMipBias.x;
  let x_1159 : vec4<f32> = textureSampleBias(x_CameraDepthTexture, sampler_CameraDepthTexture, x_1156, x_1158);
  u_xlat11.x = x_1159.x;
  let x_1164 : f32 = x_33.x_ZBufferParams.z;
  let x_1166 : f32 = u_xlat11.x;
  let x_1169 : f32 = x_33.x_ZBufferParams.w;
  u_xlat19 = ((x_1164 * x_1166) + x_1169);
  let x_1171 : f32 = u_xlat19;
  u_xlat19 = (1.0f / x_1171);
  let x_1173 : f32 = u_xlat19;
  let x_1176 : f32 = u_xlat3.x;
  u_xlat3.x = (-(x_1173) + -(x_1176));
  let x_1181 : f32 = u_xlat3.x;
  let x_1184 : f32 = x_33.x_SSAOParams.y;
  u_xlatb3.x = (abs(x_1181) < x_1184);
  let x_1188 : f32 = u_xlat11.x;
  u_xlatb3.y = (0.00001f < x_1188);
  let x_1192 : bool = u_xlatb3.x;
  u_xlat3.x = select(0.0f, 1.0f, x_1192);
  let x_1196 : bool = u_xlatb3.y;
  u_xlat3.y = select(0.0f, 1.0f, x_1196);
  let x_1200 : f32 = u_xlat3.y;
  let x_1202 : f32 = u_xlat3.x;
  u_xlat3.x = (x_1200 * x_1202);
  let x_1206 : f32 = u_xlat18.y;
  u_xlat26 = (-(x_1206) + 1.0f);
  let x_1209 : f32 = u_xlat19;
  let x_1211 : f32 = x_33.x_ProjectionParams2.x;
  u_xlat11.x = (x_1209 * x_1211);
  let x_1215 : vec4<f32> = x_33.x_CameraViewXExtent[0i];
  let x_1217 : vec2<f32> = u_xlat18;
  let x_1221 : vec4<f32> = x_33.x_CameraViewTopLeftCorner[0i];
  u_xlat5 = ((vec3<f32>(x_1215.x, x_1215.y, x_1215.z) * vec3<f32>(x_1217.x, x_1217.x, x_1217.x)) + vec3<f32>(x_1221.x, x_1221.y, x_1221.z));
  let x_1225 : vec4<f32> = x_33.x_CameraViewYExtent[0i];
  let x_1227 : f32 = u_xlat26;
  let x_1230 : vec3<f32> = u_xlat5;
  u_xlat5 = ((vec3<f32>(x_1225.x, x_1225.y, x_1225.z) * vec3<f32>(x_1227, x_1227, x_1227)) + x_1230);
  let x_1232 : vec3<f32> = u_xlat5;
  let x_1233 : vec3<f32> = u_xlat11;
  let x_1236 : vec3<f32> = u_xlat8;
  u_xlat11 = ((x_1232 * vec3<f32>(x_1233.x, x_1233.x, x_1233.x)) + -(x_1236));
  let x_1239 : vec3<f32> = u_xlat11;
  let x_1240 : vec4<f32> = u_xlat1;
  u_xlat18.x = dot(x_1239, vec3<f32>(x_1240.x, x_1240.y, x_1240.z));
  let x_1244 : f32 = u_xlat0;
  let x_1248 : f32 = u_xlat18.x;
  u_xlat18.x = ((-(x_1244) * 0.004f) + x_1248);
  let x_1252 : f32 = u_xlat18.x;
  u_xlat18.x = max(x_1252, 0.0f);
  let x_1255 : vec3<f32> = u_xlat11;
  let x_1256 : vec3<f32> = u_xlat11;
  u_xlat26 = dot(x_1255, x_1256);
  let x_1258 : f32 = u_xlat26;
  u_xlat26 = (x_1258 + 0.0001f);
  let x_1260 : f32 = u_xlat26;
  u_xlat26 = (1.0f / x_1260);
  let x_1262 : f32 = u_xlat26;
  let x_1264 : f32 = u_xlat18.x;
  u_xlat18.x = (x_1262 * x_1264);
  let x_1268 : f32 = u_xlat18.x;
  let x_1270 : f32 = u_xlat3.x;
  let x_1272 : f32 = u_xlat25;
  u_xlat25 = ((x_1268 * x_1270) + x_1272);
  let x_1274 : vec4<f32> = u_xlat2;
  let x_1277 : vec4<f32> = x_33.x_SSAOBlueNoiseParams;
  u_xlat3 = ((vec4<f32>(x_1274.x, x_1274.y, x_1274.x, x_1274.y) * vec4<f32>(x_1277.x, x_1277.y, x_1277.x, x_1277.y)) + vec4<f32>(0.25f, 0.25f, 0.333333343f, 0.333333343f));
  let x_1287 : vec4<f32> = u_xlat3;
  let x_1290 : f32 = x_33.x_GlobalMipBias.x;
  let x_1291 : vec4<f32> = textureSampleBias(x_BlueNoiseTexture, sampler_PointRepeat, vec2<f32>(x_1287.x, x_1287.y), x_1290);
  u_xlat18.x = x_1291.w;
  let x_1294 : vec2<f32> = u_xlat18;
  u_xlat18 = (vec2<f32>(x_1294.x, x_1294.x) + vec2<f32>(0.56640625f, 0.015625f));
  let x_1301 : f32 = u_xlat18.x;
  u_xlat18.x = fract(x_1301);
  let x_1305 : f32 = u_xlat18.x;
  u_xlat5.z = ((x_1305 * 2.0f) + -1.0f);
  let x_1310 : f32 = u_xlat18.y;
  u_xlat18.x = (x_1310 * 628.31854248f);
  let x_1314 : f32 = u_xlat5.z;
  let x_1317 : f32 = u_xlat5.z;
  u_xlat26 = ((-(x_1314) * x_1317) + 1.0f);
  let x_1320 : f32 = u_xlat26;
  u_xlat26 = sqrt(x_1320);
  let x_1323 : f32 = u_xlat18.x;
  u_xlat3.x = sin(x_1323);
  let x_1327 : f32 = u_xlat18.x;
  u_xlat6 = cos(x_1327);
  let x_1329 : f32 = u_xlat26;
  let x_1330 : f32 = u_xlat6;
  u_xlat5.x = (x_1329 * x_1330);
  let x_1333 : f32 = u_xlat26;
  let x_1335 : f32 = u_xlat3.x;
  u_xlat5.y = (x_1333 * x_1335);
  let x_1338 : vec4<f32> = u_xlat1;
  let x_1340 : vec3<f32> = u_xlat5;
  u_xlat18.x = dot(vec3<f32>(x_1338.x, x_1338.y, x_1338.z), x_1340);
  let x_1344 : f32 = u_xlat18.x;
  u_xlatb18 = (x_1344 >= 0.0f);
  let x_1346 : bool = u_xlatb18;
  u_xlat18.x = select(-1.0f, 1.0f, x_1346);
  let x_1349 : vec2<f32> = u_xlat18;
  let x_1351 : vec3<f32> = u_xlat5;
  u_xlat5 = (vec3<f32>(x_1349.x, x_1349.x, x_1349.x) * x_1351);
  let x_1353 : vec3<f32> = u_xlat5;
  let x_1355 : vec4<f32> = x_33.x_SSAOParams;
  u_xlat5 = (x_1353 * vec3<f32>(x_1355.y, x_1355.y, x_1355.y));
  let x_1358 : vec3<f32> = u_xlat5;
  let x_1362 : vec3<f32> = u_xlat8;
  u_xlat5 = ((x_1358 * vec3<f32>(0.15625f, 0.15625f, 0.15625f)) + x_1362);
  let x_1364 : vec3<f32> = u_xlat5;
  let x_1367 : vec4<f32> = x_33.x_CameraViewProjections[0i][1i];
  u_xlat18 = (vec2<f32>(x_1364.y, x_1364.y) * vec2<f32>(x_1367.x, x_1367.y));
  let x_1371 : vec4<f32> = x_33.x_CameraViewProjections[0i][0i];
  let x_1373 : vec3<f32> = u_xlat5;
  let x_1376 : vec2<f32> = u_xlat18;
  u_xlat18 = ((vec2<f32>(x_1371.x, x_1371.y) * vec2<f32>(x_1373.x, x_1373.x)) + x_1376);
  let x_1379 : vec4<f32> = x_33.x_CameraViewProjections[0i][2i];
  let x_1381 : vec3<f32> = u_xlat5;
  let x_1384 : vec2<f32> = u_xlat18;
  u_xlat18 = ((vec2<f32>(x_1379.x, x_1379.y) * vec2<f32>(x_1381.z, x_1381.z)) + x_1384);
  let x_1386 : vec4<f32> = u_xlat4;
  let x_1388 : vec3<f32> = u_xlat5;
  u_xlat3.x = dot(vec3<f32>(x_1386.x, x_1386.y, x_1386.z), x_1388);
  let x_1392 : f32 = u_xlat3.x;
  u_xlat11.x = (1.0f / -(x_1392));
  let x_1396 : vec2<f32> = u_xlat18;
  let x_1397 : vec3<f32> = u_xlat11;
  u_xlat18 = ((x_1396 * vec2<f32>(x_1397.x, x_1397.x)) + vec2<f32>(1.0f, 1.0f));
  let x_1401 : vec2<f32> = u_xlat18;
  u_xlat18 = (x_1401 * vec2<f32>(0.5f, 0.5f));
  let x_1403 : vec2<f32> = u_xlat18;
  u_xlat18 = clamp(x_1403, vec2<f32>(0.0f, 0.0f), vec2<f32>(1.0f, 1.0f));
  let x_1410 : vec2<f32> = u_xlat18;
  let x_1412 : f32 = x_33.x_GlobalMipBias.x;
  let x_1413 : vec4<f32> = textureSampleBias(x_CameraDepthTexture, sampler_CameraDepthTexture, x_1410, x_1412);
  u_xlat11.x = x_1413.x;
  let x_1417 : f32 = x_33.x_ZBufferParams.z;
  let x_1419 : f32 = u_xlat11.x;
  let x_1422 : f32 = x_33.x_ZBufferParams.w;
  u_xlat28 = ((x_1417 * x_1419) + x_1422);
  let x_1424 : f32 = u_xlat28;
  u_xlat28 = (1.0f / x_1424);
  let x_1427 : f32 = u_xlat3.x;
  let x_1429 : f32 = u_xlat28;
  u_xlat3.x = (-(x_1427) + -(x_1429));
  let x_1434 : f32 = u_xlat3.x;
  let x_1437 : f32 = x_33.x_SSAOParams.y;
  u_xlatb3.x = (abs(x_1434) < x_1437);
  let x_1441 : f32 = u_xlat11.x;
  u_xlatb3.y = (0.00001f < x_1441);
  let x_1445 : bool = u_xlatb3.x;
  u_xlat3.x = select(0.0f, 1.0f, x_1445);
  let x_1449 : bool = u_xlatb3.y;
  u_xlat3.y = select(0.0f, 1.0f, x_1449);
  let x_1453 : f32 = u_xlat3.y;
  let x_1455 : f32 = u_xlat3.x;
  u_xlat3.x = (x_1453 * x_1455);
  let x_1459 : f32 = u_xlat18.y;
  u_xlat26 = (-(x_1459) + 1.0f);
  let x_1462 : f32 = u_xlat28;
  let x_1464 : f32 = x_33.x_ProjectionParams2.x;
  u_xlat11.x = (x_1462 * x_1464);
  let x_1468 : vec4<f32> = x_33.x_CameraViewXExtent[0i];
  let x_1470 : vec2<f32> = u_xlat18;
  let x_1474 : vec4<f32> = x_33.x_CameraViewTopLeftCorner[0i];
  u_xlat5 = ((vec3<f32>(x_1468.x, x_1468.y, x_1468.z) * vec3<f32>(x_1470.x, x_1470.x, x_1470.x)) + vec3<f32>(x_1474.x, x_1474.y, x_1474.z));
  let x_1478 : vec4<f32> = x_33.x_CameraViewYExtent[0i];
  let x_1480 : f32 = u_xlat26;
  let x_1483 : vec3<f32> = u_xlat5;
  u_xlat5 = ((vec3<f32>(x_1478.x, x_1478.y, x_1478.z) * vec3<f32>(x_1480, x_1480, x_1480)) + x_1483);
  let x_1485 : vec3<f32> = u_xlat5;
  let x_1486 : vec3<f32> = u_xlat11;
  let x_1489 : vec3<f32> = u_xlat8;
  u_xlat5 = ((x_1485 * vec3<f32>(x_1486.x, x_1486.x, x_1486.x)) + -(x_1489));
  let x_1492 : vec3<f32> = u_xlat5;
  let x_1493 : vec4<f32> = u_xlat1;
  u_xlat18.x = dot(x_1492, vec3<f32>(x_1493.x, x_1493.y, x_1493.z));
  let x_1497 : f32 = u_xlat0;
  let x_1501 : f32 = u_xlat18.x;
  u_xlat18.x = ((-(x_1497) * 0.004f) + x_1501);
  let x_1505 : f32 = u_xlat18.x;
  u_xlat18.x = max(x_1505, 0.0f);
  let x_1508 : vec3<f32> = u_xlat5;
  let x_1509 : vec3<f32> = u_xlat5;
  u_xlat26 = dot(x_1508, x_1509);
  let x_1511 : f32 = u_xlat26;
  u_xlat26 = (x_1511 + 0.0001f);
  let x_1513 : f32 = u_xlat26;
  u_xlat26 = (1.0f / x_1513);
  let x_1515 : f32 = u_xlat26;
  let x_1517 : f32 = u_xlat18.x;
  u_xlat18.x = (x_1515 * x_1517);
  let x_1521 : f32 = u_xlat18.x;
  let x_1523 : f32 = u_xlat3.x;
  let x_1525 : f32 = u_xlat25;
  u_xlat25 = ((x_1521 * x_1523) + x_1525);
  let x_1530 : vec4<f32> = u_xlat3;
  let x_1533 : f32 = x_33.x_GlobalMipBias.x;
  let x_1534 : vec4<f32> = textureSampleBias(x_BlueNoiseTexture, sampler_PointRepeat, vec2<f32>(x_1530.z, x_1530.w), x_1533);
  u_xlat18.x = x_1534.w;
  let x_1538 : f32 = u_xlat18.x;
  u_xlat26 = (x_1538 + 0.984375f);
  let x_1541 : f32 = u_xlat26;
  u_xlat26 = fract(x_1541);
  let x_1543 : f32 = u_xlat26;
  u_xlat3.z = ((x_1543 * 2.0f) + -1.0f);
  let x_1548 : f32 = u_xlat18.x;
  u_xlat18.x = (x_1548 * 628.31854248f);
  let x_1552 : f32 = u_xlat3.z;
  let x_1555 : f32 = u_xlat3.z;
  u_xlat26 = ((-(x_1552) * x_1555) + 1.0f);
  let x_1558 : f32 = u_xlat26;
  u_xlat26 = sqrt(x_1558);
  let x_1561 : f32 = u_xlat18.x;
  u_xlat5.x = sin(x_1561);
  let x_1565 : f32 = u_xlat18.x;
  u_xlat6 = cos(x_1565);
  let x_1567 : f32 = u_xlat26;
  let x_1568 : f32 = u_xlat6;
  u_xlat3.x = (x_1567 * x_1568);
  let x_1571 : f32 = u_xlat26;
  let x_1573 : f32 = u_xlat5.x;
  u_xlat3.y = (x_1571 * x_1573);
  let x_1576 : vec4<f32> = u_xlat1;
  let x_1578 : vec4<f32> = u_xlat3;
  u_xlat18.x = dot(vec3<f32>(x_1576.x, x_1576.y, x_1576.z), vec3<f32>(x_1578.x, x_1578.y, x_1578.z));
  let x_1583 : f32 = u_xlat18.x;
  u_xlatb18 = (x_1583 >= 0.0f);
  let x_1585 : bool = u_xlatb18;
  u_xlat18.x = select(-1.0f, 1.0f, x_1585);
  let x_1588 : vec2<f32> = u_xlat18;
  let x_1590 : vec4<f32> = u_xlat3;
  let x_1592 : vec3<f32> = (vec3<f32>(x_1588.x, x_1588.x, x_1588.x) * vec3<f32>(x_1590.x, x_1590.y, x_1590.z));
  let x_1593 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_1592.x, x_1592.y, x_1592.z, x_1593.w);
  let x_1595 : vec4<f32> = u_xlat3;
  let x_1598 : vec4<f32> = x_33.x_SSAOParams;
  let x_1600 : vec3<f32> = (vec3<f32>(x_1595.x, x_1595.y, x_1595.z) * vec3<f32>(x_1598.y, x_1598.y, x_1598.y));
  let x_1601 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_1600.x, x_1600.y, x_1600.z, x_1601.w);
  let x_1603 : vec4<f32> = u_xlat3;
  let x_1608 : vec3<f32> = u_xlat8;
  let x_1609 : vec3<f32> = ((vec3<f32>(x_1603.x, x_1603.y, x_1603.z) * vec3<f32>(0.200000003f, 0.200000003f, 0.200000003f)) + x_1608);
  let x_1610 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_1609.x, x_1609.y, x_1609.z, x_1610.w);
  let x_1612 : vec4<f32> = u_xlat3;
  let x_1615 : vec4<f32> = x_33.x_CameraViewProjections[0i][1i];
  u_xlat18 = (vec2<f32>(x_1612.y, x_1612.y) * vec2<f32>(x_1615.x, x_1615.y));
  let x_1619 : vec4<f32> = x_33.x_CameraViewProjections[0i][0i];
  let x_1621 : vec4<f32> = u_xlat3;
  let x_1624 : vec2<f32> = u_xlat18;
  u_xlat18 = ((vec2<f32>(x_1619.x, x_1619.y) * vec2<f32>(x_1621.x, x_1621.x)) + x_1624);
  let x_1627 : vec4<f32> = x_33.x_CameraViewProjections[0i][2i];
  let x_1629 : vec4<f32> = u_xlat3;
  let x_1632 : vec2<f32> = u_xlat18;
  u_xlat18 = ((vec2<f32>(x_1627.x, x_1627.y) * vec2<f32>(x_1629.z, x_1629.z)) + x_1632);
  let x_1634 : vec4<f32> = u_xlat4;
  let x_1636 : vec4<f32> = u_xlat3;
  u_xlat3.x = dot(vec3<f32>(x_1634.x, x_1634.y, x_1634.z), vec3<f32>(x_1636.x, x_1636.y, x_1636.z));
  let x_1641 : f32 = u_xlat3.x;
  u_xlat11.x = (1.0f / -(x_1641));
  let x_1645 : vec2<f32> = u_xlat18;
  let x_1646 : vec3<f32> = u_xlat11;
  u_xlat18 = ((x_1645 * vec2<f32>(x_1646.x, x_1646.x)) + vec2<f32>(1.0f, 1.0f));
  let x_1650 : vec2<f32> = u_xlat18;
  u_xlat18 = (x_1650 * vec2<f32>(0.5f, 0.5f));
  let x_1652 : vec2<f32> = u_xlat18;
  u_xlat18 = clamp(x_1652, vec2<f32>(0.0f, 0.0f), vec2<f32>(1.0f, 1.0f));
  let x_1659 : vec2<f32> = u_xlat18;
  let x_1661 : f32 = x_33.x_GlobalMipBias.x;
  let x_1662 : vec4<f32> = textureSampleBias(x_CameraDepthTexture, sampler_CameraDepthTexture, x_1659, x_1661);
  u_xlat11.x = x_1662.x;
  let x_1666 : f32 = x_33.x_ZBufferParams.z;
  let x_1668 : f32 = u_xlat11.x;
  let x_1671 : f32 = x_33.x_ZBufferParams.w;
  u_xlat19 = ((x_1666 * x_1668) + x_1671);
  let x_1673 : f32 = u_xlat19;
  u_xlat19 = (1.0f / x_1673);
  let x_1675 : f32 = u_xlat19;
  let x_1678 : f32 = u_xlat3.x;
  u_xlat3.x = (-(x_1675) + -(x_1678));
  let x_1683 : f32 = u_xlat3.x;
  let x_1686 : f32 = x_33.x_SSAOParams.y;
  u_xlatb3.x = (abs(x_1683) < x_1686);
  let x_1690 : f32 = u_xlat11.x;
  u_xlatb3.y = (0.00001f < x_1690);
  let x_1694 : bool = u_xlatb3.x;
  u_xlat3.x = select(0.0f, 1.0f, x_1694);
  let x_1698 : bool = u_xlatb3.y;
  u_xlat3.y = select(0.0f, 1.0f, x_1698);
  let x_1702 : f32 = u_xlat3.y;
  let x_1704 : f32 = u_xlat3.x;
  u_xlat3.x = (x_1702 * x_1704);
  let x_1708 : f32 = u_xlat18.y;
  u_xlat26 = (-(x_1708) + 1.0f);
  let x_1711 : f32 = u_xlat19;
  let x_1713 : f32 = x_33.x_ProjectionParams2.x;
  u_xlat11.x = (x_1711 * x_1713);
  let x_1717 : vec4<f32> = x_33.x_CameraViewXExtent[0i];
  let x_1719 : vec2<f32> = u_xlat18;
  let x_1723 : vec4<f32> = x_33.x_CameraViewTopLeftCorner[0i];
  u_xlat5 = ((vec3<f32>(x_1717.x, x_1717.y, x_1717.z) * vec3<f32>(x_1719.x, x_1719.x, x_1719.x)) + vec3<f32>(x_1723.x, x_1723.y, x_1723.z));
  let x_1727 : vec4<f32> = x_33.x_CameraViewYExtent[0i];
  let x_1729 : f32 = u_xlat26;
  let x_1732 : vec3<f32> = u_xlat5;
  u_xlat5 = ((vec3<f32>(x_1727.x, x_1727.y, x_1727.z) * vec3<f32>(x_1729, x_1729, x_1729)) + x_1732);
  let x_1734 : vec3<f32> = u_xlat5;
  let x_1735 : vec3<f32> = u_xlat11;
  let x_1738 : vec3<f32> = u_xlat8;
  u_xlat11 = ((x_1734 * vec3<f32>(x_1735.x, x_1735.x, x_1735.x)) + -(x_1738));
  let x_1741 : vec3<f32> = u_xlat11;
  let x_1742 : vec4<f32> = u_xlat1;
  u_xlat18.x = dot(x_1741, vec3<f32>(x_1742.x, x_1742.y, x_1742.z));
  let x_1746 : f32 = u_xlat0;
  let x_1750 : f32 = u_xlat18.x;
  u_xlat18.x = ((-(x_1746) * 0.004f) + x_1750);
  let x_1754 : f32 = u_xlat18.x;
  u_xlat18.x = max(x_1754, 0.0f);
  let x_1757 : vec3<f32> = u_xlat11;
  let x_1758 : vec3<f32> = u_xlat11;
  u_xlat26 = dot(x_1757, x_1758);
  let x_1760 : f32 = u_xlat26;
  u_xlat26 = (x_1760 + 0.0001f);
  let x_1762 : f32 = u_xlat26;
  u_xlat26 = (1.0f / x_1762);
  let x_1764 : f32 = u_xlat26;
  let x_1766 : f32 = u_xlat18.x;
  u_xlat18.x = (x_1764 * x_1766);
  let x_1770 : f32 = u_xlat18.x;
  let x_1772 : f32 = u_xlat3.x;
  let x_1774 : f32 = u_xlat25;
  u_xlat25 = ((x_1770 * x_1772) + x_1774);
  let x_1776 : vec4<f32> = u_xlat2;
  let x_1779 : vec4<f32> = x_33.x_SSAOBlueNoiseParams;
  u_xlat3 = ((vec4<f32>(x_1776.x, x_1776.y, x_1776.x, x_1776.y) * vec4<f32>(x_1779.x, x_1779.y, x_1779.x, x_1779.y)) + vec4<f32>(0.416666687f, 0.416666687f, 0.5f, 0.5f));
  let x_1788 : vec4<f32> = u_xlat3;
  let x_1791 : f32 = x_33.x_GlobalMipBias.x;
  let x_1792 : vec4<f32> = textureSampleBias(x_BlueNoiseTexture, sampler_PointRepeat, vec2<f32>(x_1788.x, x_1788.y), x_1791);
  u_xlat18.x = x_1792.w;
  let x_1795 : vec2<f32> = u_xlat18;
  u_xlat18 = (vec2<f32>(x_1795.x, x_1795.x) + vec2<f32>(0.07421875f, 0.10546875f));
  let x_1802 : f32 = u_xlat18.x;
  u_xlat18.x = fract(x_1802);
  let x_1806 : f32 = u_xlat18.x;
  u_xlat5.z = ((x_1806 * 2.0f) + -1.0f);
  let x_1811 : f32 = u_xlat18.y;
  u_xlat18.x = (x_1811 * 628.31854248f);
  let x_1815 : f32 = u_xlat5.z;
  let x_1818 : f32 = u_xlat5.z;
  u_xlat26 = ((-(x_1815) * x_1818) + 1.0f);
  let x_1821 : f32 = u_xlat26;
  u_xlat26 = sqrt(x_1821);
  let x_1824 : f32 = u_xlat18.x;
  u_xlat3.x = sin(x_1824);
  let x_1828 : f32 = u_xlat18.x;
  u_xlat6 = cos(x_1828);
  let x_1830 : f32 = u_xlat26;
  let x_1831 : f32 = u_xlat6;
  u_xlat5.x = (x_1830 * x_1831);
  let x_1834 : f32 = u_xlat26;
  let x_1836 : f32 = u_xlat3.x;
  u_xlat5.y = (x_1834 * x_1836);
  let x_1839 : vec4<f32> = u_xlat1;
  let x_1841 : vec3<f32> = u_xlat5;
  u_xlat18.x = dot(vec3<f32>(x_1839.x, x_1839.y, x_1839.z), x_1841);
  let x_1845 : f32 = u_xlat18.x;
  u_xlatb18 = (x_1845 >= 0.0f);
  let x_1847 : bool = u_xlatb18;
  u_xlat18.x = select(-1.0f, 1.0f, x_1847);
  let x_1850 : vec2<f32> = u_xlat18;
  let x_1852 : vec3<f32> = u_xlat5;
  u_xlat5 = (vec3<f32>(x_1850.x, x_1850.x, x_1850.x) * x_1852);
  let x_1854 : vec3<f32> = u_xlat5;
  let x_1856 : vec4<f32> = x_33.x_SSAOParams;
  u_xlat5 = (x_1854 * vec3<f32>(x_1856.y, x_1856.y, x_1856.y));
  let x_1859 : vec3<f32> = u_xlat5;
  let x_1863 : vec3<f32> = u_xlat8;
  u_xlat5 = ((x_1859 * vec3<f32>(0.256250024f, 0.256250024f, 0.256250024f)) + x_1863);
  let x_1865 : vec3<f32> = u_xlat5;
  let x_1868 : vec4<f32> = x_33.x_CameraViewProjections[0i][1i];
  u_xlat18 = (vec2<f32>(x_1865.y, x_1865.y) * vec2<f32>(x_1868.x, x_1868.y));
  let x_1872 : vec4<f32> = x_33.x_CameraViewProjections[0i][0i];
  let x_1874 : vec3<f32> = u_xlat5;
  let x_1877 : vec2<f32> = u_xlat18;
  u_xlat18 = ((vec2<f32>(x_1872.x, x_1872.y) * vec2<f32>(x_1874.x, x_1874.x)) + x_1877);
  let x_1880 : vec4<f32> = x_33.x_CameraViewProjections[0i][2i];
  let x_1882 : vec3<f32> = u_xlat5;
  let x_1885 : vec2<f32> = u_xlat18;
  u_xlat18 = ((vec2<f32>(x_1880.x, x_1880.y) * vec2<f32>(x_1882.z, x_1882.z)) + x_1885);
  let x_1887 : vec4<f32> = u_xlat4;
  let x_1889 : vec3<f32> = u_xlat5;
  u_xlat3.x = dot(vec3<f32>(x_1887.x, x_1887.y, x_1887.z), x_1889);
  let x_1893 : f32 = u_xlat3.x;
  u_xlat11.x = (1.0f / -(x_1893));
  let x_1897 : vec2<f32> = u_xlat18;
  let x_1898 : vec3<f32> = u_xlat11;
  u_xlat18 = ((x_1897 * vec2<f32>(x_1898.x, x_1898.x)) + vec2<f32>(1.0f, 1.0f));
  let x_1902 : vec2<f32> = u_xlat18;
  u_xlat18 = (x_1902 * vec2<f32>(0.5f, 0.5f));
  let x_1904 : vec2<f32> = u_xlat18;
  u_xlat18 = clamp(x_1904, vec2<f32>(0.0f, 0.0f), vec2<f32>(1.0f, 1.0f));
  let x_1911 : vec2<f32> = u_xlat18;
  let x_1913 : f32 = x_33.x_GlobalMipBias.x;
  let x_1914 : vec4<f32> = textureSampleBias(x_CameraDepthTexture, sampler_CameraDepthTexture, x_1911, x_1913);
  u_xlat11.x = x_1914.x;
  let x_1918 : f32 = x_33.x_ZBufferParams.z;
  let x_1920 : f32 = u_xlat11.x;
  let x_1923 : f32 = x_33.x_ZBufferParams.w;
  u_xlat28 = ((x_1918 * x_1920) + x_1923);
  let x_1925 : f32 = u_xlat28;
  u_xlat28 = (1.0f / x_1925);
  let x_1928 : f32 = u_xlat3.x;
  let x_1930 : f32 = u_xlat28;
  u_xlat3.x = (-(x_1928) + -(x_1930));
  let x_1935 : f32 = u_xlat3.x;
  let x_1938 : f32 = x_33.x_SSAOParams.y;
  u_xlatb3.x = (abs(x_1935) < x_1938);
  let x_1942 : f32 = u_xlat11.x;
  u_xlatb3.y = (0.00001f < x_1942);
  let x_1946 : bool = u_xlatb3.x;
  u_xlat3.x = select(0.0f, 1.0f, x_1946);
  let x_1950 : bool = u_xlatb3.y;
  u_xlat3.y = select(0.0f, 1.0f, x_1950);
  let x_1954 : f32 = u_xlat3.y;
  let x_1956 : f32 = u_xlat3.x;
  u_xlat3.x = (x_1954 * x_1956);
  let x_1960 : f32 = u_xlat18.y;
  u_xlat26 = (-(x_1960) + 1.0f);
  let x_1963 : f32 = u_xlat28;
  let x_1965 : f32 = x_33.x_ProjectionParams2.x;
  u_xlat11.x = (x_1963 * x_1965);
  let x_1969 : vec4<f32> = x_33.x_CameraViewXExtent[0i];
  let x_1971 : vec2<f32> = u_xlat18;
  let x_1975 : vec4<f32> = x_33.x_CameraViewTopLeftCorner[0i];
  u_xlat5 = ((vec3<f32>(x_1969.x, x_1969.y, x_1969.z) * vec3<f32>(x_1971.x, x_1971.x, x_1971.x)) + vec3<f32>(x_1975.x, x_1975.y, x_1975.z));
  let x_1979 : vec4<f32> = x_33.x_CameraViewYExtent[0i];
  let x_1981 : f32 = u_xlat26;
  let x_1984 : vec3<f32> = u_xlat5;
  u_xlat5 = ((vec3<f32>(x_1979.x, x_1979.y, x_1979.z) * vec3<f32>(x_1981, x_1981, x_1981)) + x_1984);
  let x_1986 : vec3<f32> = u_xlat5;
  let x_1987 : vec3<f32> = u_xlat11;
  let x_1990 : vec3<f32> = u_xlat8;
  u_xlat5 = ((x_1986 * vec3<f32>(x_1987.x, x_1987.x, x_1987.x)) + -(x_1990));
  let x_1993 : vec3<f32> = u_xlat5;
  let x_1994 : vec4<f32> = u_xlat1;
  u_xlat18.x = dot(x_1993, vec3<f32>(x_1994.x, x_1994.y, x_1994.z));
  let x_1998 : f32 = u_xlat0;
  let x_2002 : f32 = u_xlat18.x;
  u_xlat18.x = ((-(x_1998) * 0.004f) + x_2002);
  let x_2006 : f32 = u_xlat18.x;
  u_xlat18.x = max(x_2006, 0.0f);
  let x_2009 : vec3<f32> = u_xlat5;
  let x_2010 : vec3<f32> = u_xlat5;
  u_xlat26 = dot(x_2009, x_2010);
  let x_2012 : f32 = u_xlat26;
  u_xlat26 = (x_2012 + 0.0001f);
  let x_2014 : f32 = u_xlat26;
  u_xlat26 = (1.0f / x_2014);
  let x_2016 : f32 = u_xlat26;
  let x_2018 : f32 = u_xlat18.x;
  u_xlat18.x = (x_2016 * x_2018);
  let x_2022 : f32 = u_xlat18.x;
  let x_2024 : f32 = u_xlat3.x;
  let x_2026 : f32 = u_xlat25;
  u_xlat25 = ((x_2022 * x_2024) + x_2026);
  let x_2031 : vec4<f32> = u_xlat3;
  let x_2034 : f32 = x_33.x_GlobalMipBias.x;
  let x_2035 : vec4<f32> = textureSampleBias(x_BlueNoiseTexture, sampler_PointRepeat, vec2<f32>(x_2031.z, x_2031.w), x_2034);
  u_xlat18.x = x_2035.w;
  let x_2038 : vec2<f32> = u_xlat18;
  u_xlat18 = (vec2<f32>(x_2038.x, x_2038.x) + vec2<f32>(0.23828125f, 0.640625f));
  let x_2045 : f32 = u_xlat18.x;
  u_xlat18.x = fract(x_2045);
  let x_2049 : f32 = u_xlat18.x;
  u_xlat3.z = ((x_2049 * 2.0f) + -1.0f);
  let x_2054 : f32 = u_xlat18.y;
  u_xlat18.x = (x_2054 * 628.31854248f);
  let x_2058 : f32 = u_xlat3.z;
  let x_2061 : f32 = u_xlat3.z;
  u_xlat26 = ((-(x_2058) * x_2061) + 1.0f);
  let x_2064 : f32 = u_xlat26;
  u_xlat26 = sqrt(x_2064);
  let x_2067 : f32 = u_xlat18.x;
  u_xlat5.x = sin(x_2067);
  let x_2071 : f32 = u_xlat18.x;
  u_xlat6 = cos(x_2071);
  let x_2073 : f32 = u_xlat26;
  let x_2074 : f32 = u_xlat6;
  u_xlat3.x = (x_2073 * x_2074);
  let x_2077 : f32 = u_xlat26;
  let x_2079 : f32 = u_xlat5.x;
  u_xlat3.y = (x_2077 * x_2079);
  let x_2082 : vec4<f32> = u_xlat1;
  let x_2084 : vec4<f32> = u_xlat3;
  u_xlat18.x = dot(vec3<f32>(x_2082.x, x_2082.y, x_2082.z), vec3<f32>(x_2084.x, x_2084.y, x_2084.z));
  let x_2089 : f32 = u_xlat18.x;
  u_xlatb18 = (x_2089 >= 0.0f);
  let x_2091 : bool = u_xlatb18;
  u_xlat18.x = select(-1.0f, 1.0f, x_2091);
  let x_2094 : vec2<f32> = u_xlat18;
  let x_2096 : vec4<f32> = u_xlat3;
  let x_2098 : vec3<f32> = (vec3<f32>(x_2094.x, x_2094.x, x_2094.x) * vec3<f32>(x_2096.x, x_2096.y, x_2096.z));
  let x_2099 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_2098.x, x_2098.y, x_2098.z, x_2099.w);
  let x_2101 : vec4<f32> = u_xlat3;
  let x_2104 : vec4<f32> = x_33.x_SSAOParams;
  let x_2106 : vec3<f32> = (vec3<f32>(x_2101.x, x_2101.y, x_2101.z) * vec3<f32>(x_2104.y, x_2104.y, x_2104.y));
  let x_2107 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_2106.x, x_2106.y, x_2106.z, x_2107.w);
  let x_2109 : vec4<f32> = u_xlat3;
  let x_2114 : vec3<f32> = u_xlat8;
  let x_2115 : vec3<f32> = ((vec3<f32>(x_2109.x, x_2109.y, x_2109.z) * vec3<f32>(0.324999988f, 0.324999988f, 0.324999988f)) + x_2114);
  let x_2116 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_2115.x, x_2115.y, x_2115.z, x_2116.w);
  let x_2118 : vec4<f32> = u_xlat3;
  let x_2121 : vec4<f32> = x_33.x_CameraViewProjections[0i][1i];
  u_xlat18 = (vec2<f32>(x_2118.y, x_2118.y) * vec2<f32>(x_2121.x, x_2121.y));
  let x_2125 : vec4<f32> = x_33.x_CameraViewProjections[0i][0i];
  let x_2127 : vec4<f32> = u_xlat3;
  let x_2130 : vec2<f32> = u_xlat18;
  u_xlat18 = ((vec2<f32>(x_2125.x, x_2125.y) * vec2<f32>(x_2127.x, x_2127.x)) + x_2130);
  let x_2133 : vec4<f32> = x_33.x_CameraViewProjections[0i][2i];
  let x_2135 : vec4<f32> = u_xlat3;
  let x_2138 : vec2<f32> = u_xlat18;
  u_xlat18 = ((vec2<f32>(x_2133.x, x_2133.y) * vec2<f32>(x_2135.z, x_2135.z)) + x_2138);
  let x_2140 : vec4<f32> = u_xlat4;
  let x_2142 : vec4<f32> = u_xlat3;
  u_xlat3.x = dot(vec3<f32>(x_2140.x, x_2140.y, x_2140.z), vec3<f32>(x_2142.x, x_2142.y, x_2142.z));
  let x_2147 : f32 = u_xlat3.x;
  u_xlat11.x = (1.0f / -(x_2147));
  let x_2151 : vec2<f32> = u_xlat18;
  let x_2152 : vec3<f32> = u_xlat11;
  u_xlat18 = ((x_2151 * vec2<f32>(x_2152.x, x_2152.x)) + vec2<f32>(1.0f, 1.0f));
  let x_2156 : vec2<f32> = u_xlat18;
  u_xlat18 = (x_2156 * vec2<f32>(0.5f, 0.5f));
  let x_2158 : vec2<f32> = u_xlat18;
  u_xlat18 = clamp(x_2158, vec2<f32>(0.0f, 0.0f), vec2<f32>(1.0f, 1.0f));
  let x_2165 : vec2<f32> = u_xlat18;
  let x_2167 : f32 = x_33.x_GlobalMipBias.x;
  let x_2168 : vec4<f32> = textureSampleBias(x_CameraDepthTexture, sampler_CameraDepthTexture, x_2165, x_2167);
  u_xlat11.x = x_2168.x;
  let x_2172 : f32 = x_33.x_ZBufferParams.z;
  let x_2174 : f32 = u_xlat11.x;
  let x_2177 : f32 = x_33.x_ZBufferParams.w;
  u_xlat19 = ((x_2172 * x_2174) + x_2177);
  let x_2179 : f32 = u_xlat19;
  u_xlat19 = (1.0f / x_2179);
  let x_2181 : f32 = u_xlat19;
  let x_2184 : f32 = u_xlat3.x;
  u_xlat3.x = (-(x_2181) + -(x_2184));
  let x_2189 : f32 = u_xlat3.x;
  let x_2192 : f32 = x_33.x_SSAOParams.y;
  u_xlatb3.x = (abs(x_2189) < x_2192);
  let x_2196 : f32 = u_xlat11.x;
  u_xlatb3.y = (0.00001f < x_2196);
  let x_2200 : bool = u_xlatb3.x;
  u_xlat3.x = select(0.0f, 1.0f, x_2200);
  let x_2204 : bool = u_xlatb3.y;
  u_xlat3.y = select(0.0f, 1.0f, x_2204);
  let x_2208 : f32 = u_xlat3.y;
  let x_2210 : f32 = u_xlat3.x;
  u_xlat3.x = (x_2208 * x_2210);
  let x_2214 : f32 = u_xlat18.y;
  u_xlat26 = (-(x_2214) + 1.0f);
  let x_2217 : f32 = u_xlat19;
  let x_2219 : f32 = x_33.x_ProjectionParams2.x;
  u_xlat11.x = (x_2217 * x_2219);
  let x_2223 : vec4<f32> = x_33.x_CameraViewXExtent[0i];
  let x_2225 : vec2<f32> = u_xlat18;
  let x_2229 : vec4<f32> = x_33.x_CameraViewTopLeftCorner[0i];
  u_xlat5 = ((vec3<f32>(x_2223.x, x_2223.y, x_2223.z) * vec3<f32>(x_2225.x, x_2225.x, x_2225.x)) + vec3<f32>(x_2229.x, x_2229.y, x_2229.z));
  let x_2233 : vec4<f32> = x_33.x_CameraViewYExtent[0i];
  let x_2235 : f32 = u_xlat26;
  let x_2238 : vec3<f32> = u_xlat5;
  u_xlat5 = ((vec3<f32>(x_2233.x, x_2233.y, x_2233.z) * vec3<f32>(x_2235, x_2235, x_2235)) + x_2238);
  let x_2240 : vec3<f32> = u_xlat5;
  let x_2241 : vec3<f32> = u_xlat11;
  let x_2244 : vec3<f32> = u_xlat8;
  u_xlat11 = ((x_2240 * vec3<f32>(x_2241.x, x_2241.x, x_2241.x)) + -(x_2244));
  let x_2247 : vec3<f32> = u_xlat11;
  let x_2248 : vec4<f32> = u_xlat1;
  u_xlat18.x = dot(x_2247, vec3<f32>(x_2248.x, x_2248.y, x_2248.z));
  let x_2252 : f32 = u_xlat0;
  let x_2256 : f32 = u_xlat18.x;
  u_xlat18.x = ((-(x_2252) * 0.004f) + x_2256);
  let x_2260 : f32 = u_xlat18.x;
  u_xlat18.x = max(x_2260, 0.0f);
  let x_2263 : vec3<f32> = u_xlat11;
  let x_2264 : vec3<f32> = u_xlat11;
  u_xlat26 = dot(x_2263, x_2264);
  let x_2266 : f32 = u_xlat26;
  u_xlat26 = (x_2266 + 0.0001f);
  let x_2268 : f32 = u_xlat26;
  u_xlat26 = (1.0f / x_2268);
  let x_2270 : f32 = u_xlat26;
  let x_2272 : f32 = u_xlat18.x;
  u_xlat18.x = (x_2270 * x_2272);
  let x_2276 : f32 = u_xlat18.x;
  let x_2278 : f32 = u_xlat3.x;
  let x_2280 : f32 = u_xlat25;
  u_xlat25 = ((x_2276 * x_2278) + x_2280);
  let x_2282 : vec4<f32> = u_xlat2;
  let x_2285 : vec4<f32> = x_33.x_SSAOBlueNoiseParams;
  u_xlat3 = ((vec4<f32>(x_2282.x, x_2282.y, x_2282.x, x_2282.y) * vec4<f32>(x_2285.x, x_2285.y, x_2285.x, x_2285.y)) + vec4<f32>(0.583333373f, 0.583333373f, 0.666666687f, 0.666666687f));
  let x_2295 : vec4<f32> = u_xlat3;
  let x_2298 : f32 = x_33.x_GlobalMipBias.x;
  let x_2299 : vec4<f32> = textureSampleBias(x_BlueNoiseTexture, sampler_PointRepeat, vec2<f32>(x_2295.x, x_2295.y), x_2298);
  u_xlat18.x = x_2299.w;
  let x_2302 : vec2<f32> = u_xlat18;
  u_xlat18 = (vec2<f32>(x_2302.x, x_2302.x) + vec2<f32>(0.640625f, 0.74609375f));
  let x_2308 : f32 = u_xlat18.x;
  u_xlat18.x = fract(x_2308);
  let x_2312 : f32 = u_xlat18.x;
  u_xlat5.z = ((x_2312 * 2.0f) + -1.0f);
  let x_2317 : f32 = u_xlat18.y;
  u_xlat18.x = (x_2317 * 628.31854248f);
  let x_2321 : f32 = u_xlat5.z;
  let x_2324 : f32 = u_xlat5.z;
  u_xlat26 = ((-(x_2321) * x_2324) + 1.0f);
  let x_2327 : f32 = u_xlat26;
  u_xlat26 = sqrt(x_2327);
  let x_2330 : f32 = u_xlat18.x;
  u_xlat3.x = sin(x_2330);
  let x_2334 : f32 = u_xlat18.x;
  u_xlat6 = cos(x_2334);
  let x_2336 : f32 = u_xlat26;
  let x_2337 : f32 = u_xlat6;
  u_xlat5.x = (x_2336 * x_2337);
  let x_2340 : f32 = u_xlat26;
  let x_2342 : f32 = u_xlat3.x;
  u_xlat5.y = (x_2340 * x_2342);
  let x_2345 : vec4<f32> = u_xlat1;
  let x_2347 : vec3<f32> = u_xlat5;
  u_xlat18.x = dot(vec3<f32>(x_2345.x, x_2345.y, x_2345.z), x_2347);
  let x_2351 : f32 = u_xlat18.x;
  u_xlatb18 = (x_2351 >= 0.0f);
  let x_2353 : bool = u_xlatb18;
  u_xlat18.x = select(-1.0f, 1.0f, x_2353);
  let x_2356 : vec2<f32> = u_xlat18;
  let x_2358 : vec3<f32> = u_xlat5;
  u_xlat5 = (vec3<f32>(x_2356.x, x_2356.x, x_2356.x) * x_2358);
  let x_2360 : vec3<f32> = u_xlat5;
  let x_2362 : vec4<f32> = x_33.x_SSAOParams;
  u_xlat5 = (x_2360 * vec3<f32>(x_2362.y, x_2362.y, x_2362.y));
  let x_2365 : vec3<f32> = u_xlat5;
  let x_2369 : vec3<f32> = u_xlat8;
  u_xlat5 = ((x_2365 * vec3<f32>(0.40625003f, 0.40625003f, 0.40625003f)) + x_2369);
  let x_2371 : vec3<f32> = u_xlat5;
  let x_2374 : vec4<f32> = x_33.x_CameraViewProjections[0i][1i];
  u_xlat18 = (vec2<f32>(x_2371.y, x_2371.y) * vec2<f32>(x_2374.x, x_2374.y));
  let x_2378 : vec4<f32> = x_33.x_CameraViewProjections[0i][0i];
  let x_2380 : vec3<f32> = u_xlat5;
  let x_2383 : vec2<f32> = u_xlat18;
  u_xlat18 = ((vec2<f32>(x_2378.x, x_2378.y) * vec2<f32>(x_2380.x, x_2380.x)) + x_2383);
  let x_2386 : vec4<f32> = x_33.x_CameraViewProjections[0i][2i];
  let x_2388 : vec3<f32> = u_xlat5;
  let x_2391 : vec2<f32> = u_xlat18;
  u_xlat18 = ((vec2<f32>(x_2386.x, x_2386.y) * vec2<f32>(x_2388.z, x_2388.z)) + x_2391);
  let x_2393 : vec4<f32> = u_xlat4;
  let x_2395 : vec3<f32> = u_xlat5;
  u_xlat3.x = dot(vec3<f32>(x_2393.x, x_2393.y, x_2393.z), x_2395);
  let x_2399 : f32 = u_xlat3.x;
  u_xlat11.x = (1.0f / -(x_2399));
  let x_2403 : vec2<f32> = u_xlat18;
  let x_2404 : vec3<f32> = u_xlat11;
  u_xlat18 = ((x_2403 * vec2<f32>(x_2404.x, x_2404.x)) + vec2<f32>(1.0f, 1.0f));
  let x_2408 : vec2<f32> = u_xlat18;
  u_xlat18 = (x_2408 * vec2<f32>(0.5f, 0.5f));
  let x_2410 : vec2<f32> = u_xlat18;
  u_xlat18 = clamp(x_2410, vec2<f32>(0.0f, 0.0f), vec2<f32>(1.0f, 1.0f));
  let x_2417 : vec2<f32> = u_xlat18;
  let x_2419 : f32 = x_33.x_GlobalMipBias.x;
  let x_2420 : vec4<f32> = textureSampleBias(x_CameraDepthTexture, sampler_CameraDepthTexture, x_2417, x_2419);
  u_xlat11.x = x_2420.x;
  let x_2424 : f32 = x_33.x_ZBufferParams.z;
  let x_2426 : f32 = u_xlat11.x;
  let x_2429 : f32 = x_33.x_ZBufferParams.w;
  u_xlat28 = ((x_2424 * x_2426) + x_2429);
  let x_2431 : f32 = u_xlat28;
  u_xlat28 = (1.0f / x_2431);
  let x_2434 : f32 = u_xlat3.x;
  let x_2436 : f32 = u_xlat28;
  u_xlat3.x = (-(x_2434) + -(x_2436));
  let x_2441 : f32 = u_xlat3.x;
  let x_2444 : f32 = x_33.x_SSAOParams.y;
  u_xlatb3.x = (abs(x_2441) < x_2444);
  let x_2448 : f32 = u_xlat11.x;
  u_xlatb3.y = (0.00001f < x_2448);
  let x_2452 : bool = u_xlatb3.x;
  u_xlat3.x = select(0.0f, 1.0f, x_2452);
  let x_2456 : bool = u_xlatb3.y;
  u_xlat3.y = select(0.0f, 1.0f, x_2456);
  let x_2460 : f32 = u_xlat3.y;
  let x_2462 : f32 = u_xlat3.x;
  u_xlat3.x = (x_2460 * x_2462);
  let x_2466 : f32 = u_xlat18.y;
  u_xlat26 = (-(x_2466) + 1.0f);
  let x_2469 : f32 = u_xlat28;
  let x_2471 : f32 = x_33.x_ProjectionParams2.x;
  u_xlat11.x = (x_2469 * x_2471);
  let x_2475 : vec4<f32> = x_33.x_CameraViewXExtent[0i];
  let x_2477 : vec2<f32> = u_xlat18;
  let x_2481 : vec4<f32> = x_33.x_CameraViewTopLeftCorner[0i];
  u_xlat5 = ((vec3<f32>(x_2475.x, x_2475.y, x_2475.z) * vec3<f32>(x_2477.x, x_2477.x, x_2477.x)) + vec3<f32>(x_2481.x, x_2481.y, x_2481.z));
  let x_2485 : vec4<f32> = x_33.x_CameraViewYExtent[0i];
  let x_2487 : f32 = u_xlat26;
  let x_2490 : vec3<f32> = u_xlat5;
  u_xlat5 = ((vec3<f32>(x_2485.x, x_2485.y, x_2485.z) * vec3<f32>(x_2487, x_2487, x_2487)) + x_2490);
  let x_2492 : vec3<f32> = u_xlat5;
  let x_2493 : vec3<f32> = u_xlat11;
  let x_2496 : vec3<f32> = u_xlat8;
  u_xlat5 = ((x_2492 * vec3<f32>(x_2493.x, x_2493.x, x_2493.x)) + -(x_2496));
  let x_2499 : vec3<f32> = u_xlat5;
  let x_2500 : vec4<f32> = u_xlat1;
  u_xlat18.x = dot(x_2499, vec3<f32>(x_2500.x, x_2500.y, x_2500.z));
  let x_2504 : f32 = u_xlat0;
  let x_2508 : f32 = u_xlat18.x;
  u_xlat18.x = ((-(x_2504) * 0.004f) + x_2508);
  let x_2512 : f32 = u_xlat18.x;
  u_xlat18.x = max(x_2512, 0.0f);
  let x_2515 : vec3<f32> = u_xlat5;
  let x_2516 : vec3<f32> = u_xlat5;
  u_xlat26 = dot(x_2515, x_2516);
  let x_2518 : f32 = u_xlat26;
  u_xlat26 = (x_2518 + 0.0001f);
  let x_2520 : f32 = u_xlat26;
  u_xlat26 = (1.0f / x_2520);
  let x_2522 : f32 = u_xlat26;
  let x_2524 : f32 = u_xlat18.x;
  u_xlat18.x = (x_2522 * x_2524);
  let x_2528 : f32 = u_xlat18.x;
  let x_2530 : f32 = u_xlat3.x;
  let x_2532 : f32 = u_xlat25;
  u_xlat25 = ((x_2528 * x_2530) + x_2532);
  let x_2537 : vec4<f32> = u_xlat3;
  let x_2540 : f32 = x_33.x_GlobalMipBias.x;
  let x_2541 : vec4<f32> = textureSampleBias(x_BlueNoiseTexture, sampler_PointRepeat, vec2<f32>(x_2537.z, x_2537.w), x_2540);
  u_xlat18.x = x_2541.w;
  let x_2544 : vec2<f32> = u_xlat18;
  u_xlat18 = (vec2<f32>(x_2544.x, x_2544.x) + vec2<f32>(0.359375f, 0.6796875f));
  let x_2551 : f32 = u_xlat18.x;
  u_xlat18.x = fract(x_2551);
  let x_2555 : f32 = u_xlat18.x;
  u_xlat3.z = ((x_2555 * 2.0f) + -1.0f);
  let x_2560 : f32 = u_xlat18.y;
  u_xlat18.x = (x_2560 * 628.31854248f);
  let x_2564 : f32 = u_xlat3.z;
  let x_2567 : f32 = u_xlat3.z;
  u_xlat26 = ((-(x_2564) * x_2567) + 1.0f);
  let x_2570 : f32 = u_xlat26;
  u_xlat26 = sqrt(x_2570);
  let x_2573 : f32 = u_xlat18.x;
  u_xlat5.x = sin(x_2573);
  let x_2577 : f32 = u_xlat18.x;
  u_xlat6 = cos(x_2577);
  let x_2579 : f32 = u_xlat26;
  let x_2580 : f32 = u_xlat6;
  u_xlat3.x = (x_2579 * x_2580);
  let x_2583 : f32 = u_xlat26;
  let x_2585 : f32 = u_xlat5.x;
  u_xlat3.y = (x_2583 * x_2585);
  let x_2588 : vec4<f32> = u_xlat1;
  let x_2590 : vec4<f32> = u_xlat3;
  u_xlat18.x = dot(vec3<f32>(x_2588.x, x_2588.y, x_2588.z), vec3<f32>(x_2590.x, x_2590.y, x_2590.z));
  let x_2595 : f32 = u_xlat18.x;
  u_xlatb18 = (x_2595 >= 0.0f);
  let x_2597 : bool = u_xlatb18;
  u_xlat18.x = select(-1.0f, 1.0f, x_2597);
  let x_2600 : vec2<f32> = u_xlat18;
  let x_2602 : vec4<f32> = u_xlat3;
  let x_2604 : vec3<f32> = (vec3<f32>(x_2600.x, x_2600.x, x_2600.x) * vec3<f32>(x_2602.x, x_2602.y, x_2602.z));
  let x_2605 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_2604.x, x_2604.y, x_2604.z, x_2605.w);
  let x_2607 : vec4<f32> = u_xlat3;
  let x_2610 : vec4<f32> = x_33.x_SSAOParams;
  let x_2612 : vec3<f32> = (vec3<f32>(x_2607.x, x_2607.y, x_2607.z) * vec3<f32>(x_2610.y, x_2610.y, x_2610.y));
  let x_2613 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_2612.x, x_2612.y, x_2612.z, x_2613.w);
  let x_2615 : vec4<f32> = u_xlat3;
  let x_2619 : vec3<f32> = u_xlat8;
  let x_2620 : vec3<f32> = ((vec3<f32>(x_2615.x, x_2615.y, x_2615.z) * vec3<f32>(0.5f, 0.5f, 0.5f)) + x_2619);
  let x_2621 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_2620.x, x_2620.y, x_2620.z, x_2621.w);
  let x_2623 : vec4<f32> = u_xlat3;
  let x_2626 : vec4<f32> = x_33.x_CameraViewProjections[0i][1i];
  u_xlat18 = (vec2<f32>(x_2623.y, x_2623.y) * vec2<f32>(x_2626.x, x_2626.y));
  let x_2630 : vec4<f32> = x_33.x_CameraViewProjections[0i][0i];
  let x_2632 : vec4<f32> = u_xlat3;
  let x_2635 : vec2<f32> = u_xlat18;
  u_xlat18 = ((vec2<f32>(x_2630.x, x_2630.y) * vec2<f32>(x_2632.x, x_2632.x)) + x_2635);
  let x_2638 : vec4<f32> = x_33.x_CameraViewProjections[0i][2i];
  let x_2640 : vec4<f32> = u_xlat3;
  let x_2643 : vec2<f32> = u_xlat18;
  u_xlat18 = ((vec2<f32>(x_2638.x, x_2638.y) * vec2<f32>(x_2640.z, x_2640.z)) + x_2643);
  let x_2645 : vec4<f32> = u_xlat4;
  let x_2647 : vec4<f32> = u_xlat3;
  u_xlat3.x = dot(vec3<f32>(x_2645.x, x_2645.y, x_2645.z), vec3<f32>(x_2647.x, x_2647.y, x_2647.z));
  let x_2652 : f32 = u_xlat3.x;
  u_xlat11.x = (1.0f / -(x_2652));
  let x_2656 : vec2<f32> = u_xlat18;
  let x_2657 : vec3<f32> = u_xlat11;
  u_xlat18 = ((x_2656 * vec2<f32>(x_2657.x, x_2657.x)) + vec2<f32>(1.0f, 1.0f));
  let x_2661 : vec2<f32> = u_xlat18;
  u_xlat18 = (x_2661 * vec2<f32>(0.5f, 0.5f));
  let x_2663 : vec2<f32> = u_xlat18;
  u_xlat18 = clamp(x_2663, vec2<f32>(0.0f, 0.0f), vec2<f32>(1.0f, 1.0f));
  let x_2670 : vec2<f32> = u_xlat18;
  let x_2672 : f32 = x_33.x_GlobalMipBias.x;
  let x_2673 : vec4<f32> = textureSampleBias(x_CameraDepthTexture, sampler_CameraDepthTexture, x_2670, x_2672);
  u_xlat11.x = x_2673.x;
  let x_2677 : f32 = x_33.x_ZBufferParams.z;
  let x_2679 : f32 = u_xlat11.x;
  let x_2682 : f32 = x_33.x_ZBufferParams.w;
  u_xlat19 = ((x_2677 * x_2679) + x_2682);
  let x_2684 : f32 = u_xlat19;
  u_xlat19 = (1.0f / x_2684);
  let x_2686 : f32 = u_xlat19;
  let x_2689 : f32 = u_xlat3.x;
  u_xlat3.x = (-(x_2686) + -(x_2689));
  let x_2694 : f32 = u_xlat3.x;
  let x_2697 : f32 = x_33.x_SSAOParams.y;
  u_xlatb3.x = (abs(x_2694) < x_2697);
  let x_2701 : f32 = u_xlat11.x;
  u_xlatb3.y = (0.00001f < x_2701);
  let x_2705 : bool = u_xlatb3.x;
  u_xlat3.x = select(0.0f, 1.0f, x_2705);
  let x_2709 : bool = u_xlatb3.y;
  u_xlat3.y = select(0.0f, 1.0f, x_2709);
  let x_2713 : f32 = u_xlat3.y;
  let x_2715 : f32 = u_xlat3.x;
  u_xlat3.x = (x_2713 * x_2715);
  let x_2719 : f32 = u_xlat18.y;
  u_xlat26 = (-(x_2719) + 1.0f);
  let x_2722 : f32 = u_xlat19;
  let x_2724 : f32 = x_33.x_ProjectionParams2.x;
  u_xlat11.x = (x_2722 * x_2724);
  let x_2728 : vec4<f32> = x_33.x_CameraViewXExtent[0i];
  let x_2730 : vec2<f32> = u_xlat18;
  let x_2734 : vec4<f32> = x_33.x_CameraViewTopLeftCorner[0i];
  u_xlat5 = ((vec3<f32>(x_2728.x, x_2728.y, x_2728.z) * vec3<f32>(x_2730.x, x_2730.x, x_2730.x)) + vec3<f32>(x_2734.x, x_2734.y, x_2734.z));
  let x_2738 : vec4<f32> = x_33.x_CameraViewYExtent[0i];
  let x_2740 : f32 = u_xlat26;
  let x_2743 : vec3<f32> = u_xlat5;
  u_xlat5 = ((vec3<f32>(x_2738.x, x_2738.y, x_2738.z) * vec3<f32>(x_2740, x_2740, x_2740)) + x_2743);
  let x_2745 : vec3<f32> = u_xlat5;
  let x_2746 : vec3<f32> = u_xlat11;
  let x_2749 : vec3<f32> = u_xlat8;
  u_xlat11 = ((x_2745 * vec3<f32>(x_2746.x, x_2746.x, x_2746.x)) + -(x_2749));
  let x_2752 : vec3<f32> = u_xlat11;
  let x_2753 : vec4<f32> = u_xlat1;
  u_xlat18.x = dot(x_2752, vec3<f32>(x_2753.x, x_2753.y, x_2753.z));
  let x_2757 : f32 = u_xlat0;
  let x_2761 : f32 = u_xlat18.x;
  u_xlat18.x = ((-(x_2757) * 0.004f) + x_2761);
  let x_2765 : f32 = u_xlat18.x;
  u_xlat18.x = max(x_2765, 0.0f);
  let x_2768 : vec3<f32> = u_xlat11;
  let x_2769 : vec3<f32> = u_xlat11;
  u_xlat26 = dot(x_2768, x_2769);
  let x_2771 : f32 = u_xlat26;
  u_xlat26 = (x_2771 + 0.0001f);
  let x_2773 : f32 = u_xlat26;
  u_xlat26 = (1.0f / x_2773);
  let x_2775 : f32 = u_xlat26;
  let x_2777 : f32 = u_xlat18.x;
  u_xlat18.x = (x_2775 * x_2777);
  let x_2781 : f32 = u_xlat18.x;
  let x_2783 : f32 = u_xlat3.x;
  let x_2785 : f32 = u_xlat25;
  u_xlat25 = ((x_2781 * x_2783) + x_2785);
  let x_2787 : vec4<f32> = u_xlat2;
  let x_2790 : vec4<f32> = x_33.x_SSAOBlueNoiseParams;
  u_xlat3 = ((vec4<f32>(x_2787.x, x_2787.y, x_2787.x, x_2787.y) * vec4<f32>(x_2790.x, x_2790.y, x_2790.x, x_2790.y)) + vec4<f32>(0.75f, 0.75f, 0.833333373f, 0.833333373f));
  let x_2800 : vec4<f32> = u_xlat3;
  let x_2803 : f32 = x_33.x_GlobalMipBias.x;
  let x_2804 : vec4<f32> = textureSampleBias(x_BlueNoiseTexture, sampler_PointRepeat, vec2<f32>(x_2800.x, x_2800.y), x_2803);
  u_xlat18.x = x_2804.w;
  let x_2807 : vec2<f32> = u_xlat18;
  u_xlat18 = (vec2<f32>(x_2807.x, x_2807.x) + vec2<f32>(0.5078125f, 0.3515625f));
  let x_2814 : f32 = u_xlat18.x;
  u_xlat18.x = fract(x_2814);
  let x_2818 : f32 = u_xlat18.x;
  u_xlat5.z = ((x_2818 * 2.0f) + -1.0f);
  let x_2823 : f32 = u_xlat18.y;
  u_xlat18.x = (x_2823 * 628.31854248f);
  let x_2827 : f32 = u_xlat5.z;
  let x_2830 : f32 = u_xlat5.z;
  u_xlat26 = ((-(x_2827) * x_2830) + 1.0f);
  let x_2833 : f32 = u_xlat26;
  u_xlat26 = sqrt(x_2833);
  let x_2836 : f32 = u_xlat18.x;
  u_xlat3.x = sin(x_2836);
  let x_2840 : f32 = u_xlat18.x;
  u_xlat6 = cos(x_2840);
  let x_2842 : f32 = u_xlat26;
  let x_2843 : f32 = u_xlat6;
  u_xlat5.x = (x_2842 * x_2843);
  let x_2846 : f32 = u_xlat26;
  let x_2848 : f32 = u_xlat3.x;
  u_xlat5.y = (x_2846 * x_2848);
  let x_2851 : vec4<f32> = u_xlat1;
  let x_2853 : vec3<f32> = u_xlat5;
  u_xlat18.x = dot(vec3<f32>(x_2851.x, x_2851.y, x_2851.z), x_2853);
  let x_2857 : f32 = u_xlat18.x;
  u_xlatb18 = (x_2857 >= 0.0f);
  let x_2859 : bool = u_xlatb18;
  u_xlat18.x = select(-1.0f, 1.0f, x_2859);
  let x_2862 : vec2<f32> = u_xlat18;
  let x_2864 : vec3<f32> = u_xlat5;
  u_xlat5 = (vec3<f32>(x_2862.x, x_2862.x, x_2862.x) * x_2864);
  let x_2866 : vec3<f32> = u_xlat5;
  let x_2868 : vec4<f32> = x_33.x_SSAOParams;
  u_xlat5 = (x_2866 * vec3<f32>(x_2868.y, x_2868.y, x_2868.y));
  let x_2871 : vec3<f32> = u_xlat5;
  let x_2875 : vec3<f32> = u_xlat8;
  u_xlat5 = ((x_2871 * vec3<f32>(0.606249988f, 0.606249988f, 0.606249988f)) + x_2875);
  let x_2877 : vec3<f32> = u_xlat5;
  let x_2880 : vec4<f32> = x_33.x_CameraViewProjections[0i][1i];
  u_xlat18 = (vec2<f32>(x_2877.y, x_2877.y) * vec2<f32>(x_2880.x, x_2880.y));
  let x_2884 : vec4<f32> = x_33.x_CameraViewProjections[0i][0i];
  let x_2886 : vec3<f32> = u_xlat5;
  let x_2889 : vec2<f32> = u_xlat18;
  u_xlat18 = ((vec2<f32>(x_2884.x, x_2884.y) * vec2<f32>(x_2886.x, x_2886.x)) + x_2889);
  let x_2892 : vec4<f32> = x_33.x_CameraViewProjections[0i][2i];
  let x_2894 : vec3<f32> = u_xlat5;
  let x_2897 : vec2<f32> = u_xlat18;
  u_xlat18 = ((vec2<f32>(x_2892.x, x_2892.y) * vec2<f32>(x_2894.z, x_2894.z)) + x_2897);
  let x_2899 : vec4<f32> = u_xlat4;
  let x_2901 : vec3<f32> = u_xlat5;
  u_xlat3.x = dot(vec3<f32>(x_2899.x, x_2899.y, x_2899.z), x_2901);
  let x_2905 : f32 = u_xlat3.x;
  u_xlat11.x = (1.0f / -(x_2905));
  let x_2909 : vec2<f32> = u_xlat18;
  let x_2910 : vec3<f32> = u_xlat11;
  u_xlat18 = ((x_2909 * vec2<f32>(x_2910.x, x_2910.x)) + vec2<f32>(1.0f, 1.0f));
  let x_2914 : vec2<f32> = u_xlat18;
  u_xlat18 = (x_2914 * vec2<f32>(0.5f, 0.5f));
  let x_2916 : vec2<f32> = u_xlat18;
  u_xlat18 = clamp(x_2916, vec2<f32>(0.0f, 0.0f), vec2<f32>(1.0f, 1.0f));
  let x_2923 : vec2<f32> = u_xlat18;
  let x_2925 : f32 = x_33.x_GlobalMipBias.x;
  let x_2926 : vec4<f32> = textureSampleBias(x_CameraDepthTexture, sampler_CameraDepthTexture, x_2923, x_2925);
  u_xlat11.x = x_2926.x;
  let x_2930 : f32 = x_33.x_ZBufferParams.z;
  let x_2932 : f32 = u_xlat11.x;
  let x_2935 : f32 = x_33.x_ZBufferParams.w;
  u_xlat28 = ((x_2930 * x_2932) + x_2935);
  let x_2937 : f32 = u_xlat28;
  u_xlat28 = (1.0f / x_2937);
  let x_2940 : f32 = u_xlat3.x;
  let x_2942 : f32 = u_xlat28;
  u_xlat3.x = (-(x_2940) + -(x_2942));
  let x_2947 : f32 = u_xlat3.x;
  let x_2950 : f32 = x_33.x_SSAOParams.y;
  u_xlatb3.x = (abs(x_2947) < x_2950);
  let x_2954 : f32 = u_xlat11.x;
  u_xlatb3.y = (0.00001f < x_2954);
  let x_2958 : bool = u_xlatb3.x;
  u_xlat3.x = select(0.0f, 1.0f, x_2958);
  let x_2962 : bool = u_xlatb3.y;
  u_xlat3.y = select(0.0f, 1.0f, x_2962);
  let x_2966 : f32 = u_xlat3.y;
  let x_2968 : f32 = u_xlat3.x;
  u_xlat3.x = (x_2966 * x_2968);
  let x_2972 : f32 = u_xlat18.y;
  u_xlat26 = (-(x_2972) + 1.0f);
  let x_2975 : f32 = u_xlat28;
  let x_2977 : f32 = x_33.x_ProjectionParams2.x;
  u_xlat11.x = (x_2975 * x_2977);
  let x_2981 : vec4<f32> = x_33.x_CameraViewXExtent[0i];
  let x_2983 : vec2<f32> = u_xlat18;
  let x_2987 : vec4<f32> = x_33.x_CameraViewTopLeftCorner[0i];
  u_xlat5 = ((vec3<f32>(x_2981.x, x_2981.y, x_2981.z) * vec3<f32>(x_2983.x, x_2983.x, x_2983.x)) + vec3<f32>(x_2987.x, x_2987.y, x_2987.z));
  let x_2991 : vec4<f32> = x_33.x_CameraViewYExtent[0i];
  let x_2993 : f32 = u_xlat26;
  let x_2996 : vec3<f32> = u_xlat5;
  u_xlat5 = ((vec3<f32>(x_2991.x, x_2991.y, x_2991.z) * vec3<f32>(x_2993, x_2993, x_2993)) + x_2996);
  let x_2998 : vec3<f32> = u_xlat5;
  let x_2999 : vec3<f32> = u_xlat11;
  let x_3002 : vec3<f32> = u_xlat8;
  u_xlat5 = ((x_2998 * vec3<f32>(x_2999.x, x_2999.x, x_2999.x)) + -(x_3002));
  let x_3005 : vec3<f32> = u_xlat5;
  let x_3006 : vec4<f32> = u_xlat1;
  u_xlat18.x = dot(x_3005, vec3<f32>(x_3006.x, x_3006.y, x_3006.z));
  let x_3010 : f32 = u_xlat0;
  let x_3014 : f32 = u_xlat18.x;
  u_xlat18.x = ((-(x_3010) * 0.004f) + x_3014);
  let x_3018 : f32 = u_xlat18.x;
  u_xlat18.x = max(x_3018, 0.0f);
  let x_3021 : vec3<f32> = u_xlat5;
  let x_3022 : vec3<f32> = u_xlat5;
  u_xlat26 = dot(x_3021, x_3022);
  let x_3024 : f32 = u_xlat26;
  u_xlat26 = (x_3024 + 0.0001f);
  let x_3026 : f32 = u_xlat26;
  u_xlat26 = (1.0f / x_3026);
  let x_3028 : f32 = u_xlat26;
  let x_3030 : f32 = u_xlat18.x;
  u_xlat18.x = (x_3028 * x_3030);
  let x_3034 : f32 = u_xlat18.x;
  let x_3036 : f32 = u_xlat3.x;
  let x_3038 : f32 = u_xlat25;
  u_xlat25 = ((x_3034 * x_3036) + x_3038);
  let x_3043 : vec4<f32> = u_xlat3;
  let x_3046 : f32 = x_33.x_GlobalMipBias.x;
  let x_3047 : vec4<f32> = textureSampleBias(x_BlueNoiseTexture, sampler_PointRepeat, vec2<f32>(x_3043.z, x_3043.w), x_3046);
  u_xlat18.x = x_3047.w;
  let x_3050 : vec2<f32> = u_xlat18;
  u_xlat18 = (vec2<f32>(x_3050.x, x_3050.x) + vec2<f32>(0.3828125f, 0.4921875f));
  let x_3057 : f32 = u_xlat18.x;
  u_xlat18.x = fract(x_3057);
  let x_3061 : f32 = u_xlat18.x;
  u_xlat3.z = ((x_3061 * 2.0f) + -1.0f);
  let x_3066 : f32 = u_xlat18.y;
  u_xlat18.x = (x_3066 * 628.31854248f);
  let x_3070 : f32 = u_xlat3.z;
  let x_3073 : f32 = u_xlat3.z;
  u_xlat26 = ((-(x_3070) * x_3073) + 1.0f);
  let x_3076 : f32 = u_xlat26;
  u_xlat26 = sqrt(x_3076);
  let x_3079 : f32 = u_xlat18.x;
  u_xlat5.x = sin(x_3079);
  let x_3083 : f32 = u_xlat18.x;
  u_xlat6 = cos(x_3083);
  let x_3085 : f32 = u_xlat26;
  let x_3086 : f32 = u_xlat6;
  u_xlat3.x = (x_3085 * x_3086);
  let x_3089 : f32 = u_xlat26;
  let x_3091 : f32 = u_xlat5.x;
  u_xlat3.y = (x_3089 * x_3091);
  let x_3094 : vec4<f32> = u_xlat1;
  let x_3096 : vec4<f32> = u_xlat3;
  u_xlat18.x = dot(vec3<f32>(x_3094.x, x_3094.y, x_3094.z), vec3<f32>(x_3096.x, x_3096.y, x_3096.z));
  let x_3101 : f32 = u_xlat18.x;
  u_xlatb18 = (x_3101 >= 0.0f);
  let x_3103 : bool = u_xlatb18;
  u_xlat18.x = select(-1.0f, 1.0f, x_3103);
  let x_3106 : vec2<f32> = u_xlat18;
  let x_3108 : vec4<f32> = u_xlat3;
  let x_3110 : vec3<f32> = (vec3<f32>(x_3106.x, x_3106.x, x_3106.x) * vec3<f32>(x_3108.x, x_3108.y, x_3108.z));
  let x_3111 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_3110.x, x_3110.y, x_3110.z, x_3111.w);
  let x_3113 : vec4<f32> = u_xlat3;
  let x_3116 : vec4<f32> = x_33.x_SSAOParams;
  let x_3118 : vec3<f32> = (vec3<f32>(x_3113.x, x_3113.y, x_3113.z) * vec3<f32>(x_3116.y, x_3116.y, x_3116.y));
  let x_3119 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_3118.x, x_3118.y, x_3118.z, x_3119.w);
  let x_3121 : vec4<f32> = u_xlat3;
  let x_3126 : vec3<f32> = u_xlat8;
  let x_3127 : vec3<f32> = ((vec3<f32>(x_3121.x, x_3121.y, x_3121.z) * vec3<f32>(0.725000083f, 0.725000083f, 0.725000083f)) + x_3126);
  let x_3128 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_3127.x, x_3127.y, x_3127.z, x_3128.w);
  let x_3130 : vec4<f32> = u_xlat3;
  let x_3133 : vec4<f32> = x_33.x_CameraViewProjections[0i][1i];
  u_xlat18 = (vec2<f32>(x_3130.y, x_3130.y) * vec2<f32>(x_3133.x, x_3133.y));
  let x_3137 : vec4<f32> = x_33.x_CameraViewProjections[0i][0i];
  let x_3139 : vec4<f32> = u_xlat3;
  let x_3142 : vec2<f32> = u_xlat18;
  u_xlat18 = ((vec2<f32>(x_3137.x, x_3137.y) * vec2<f32>(x_3139.x, x_3139.x)) + x_3142);
  let x_3145 : vec4<f32> = x_33.x_CameraViewProjections[0i][2i];
  let x_3147 : vec4<f32> = u_xlat3;
  let x_3150 : vec2<f32> = u_xlat18;
  u_xlat18 = ((vec2<f32>(x_3145.x, x_3145.y) * vec2<f32>(x_3147.z, x_3147.z)) + x_3150);
  let x_3152 : vec4<f32> = u_xlat4;
  let x_3154 : vec4<f32> = u_xlat3;
  u_xlat3.x = dot(vec3<f32>(x_3152.x, x_3152.y, x_3152.z), vec3<f32>(x_3154.x, x_3154.y, x_3154.z));
  let x_3159 : f32 = u_xlat3.x;
  u_xlat11.x = (1.0f / -(x_3159));
  let x_3163 : vec2<f32> = u_xlat18;
  let x_3164 : vec3<f32> = u_xlat11;
  u_xlat18 = ((x_3163 * vec2<f32>(x_3164.x, x_3164.x)) + vec2<f32>(1.0f, 1.0f));
  let x_3168 : vec2<f32> = u_xlat18;
  u_xlat18 = (x_3168 * vec2<f32>(0.5f, 0.5f));
  let x_3170 : vec2<f32> = u_xlat18;
  u_xlat18 = clamp(x_3170, vec2<f32>(0.0f, 0.0f), vec2<f32>(1.0f, 1.0f));
  let x_3177 : vec2<f32> = u_xlat18;
  let x_3179 : f32 = x_33.x_GlobalMipBias.x;
  let x_3180 : vec4<f32> = textureSampleBias(x_CameraDepthTexture, sampler_CameraDepthTexture, x_3177, x_3179);
  u_xlat11.x = x_3180.x;
  let x_3184 : f32 = x_33.x_ZBufferParams.z;
  let x_3186 : f32 = u_xlat11.x;
  let x_3189 : f32 = x_33.x_ZBufferParams.w;
  u_xlat19 = ((x_3184 * x_3186) + x_3189);
  let x_3191 : f32 = u_xlat19;
  u_xlat19 = (1.0f / x_3191);
  let x_3193 : f32 = u_xlat19;
  let x_3196 : f32 = u_xlat3.x;
  u_xlat3.x = (-(x_3193) + -(x_3196));
  let x_3201 : f32 = u_xlat3.x;
  let x_3204 : f32 = x_33.x_SSAOParams.y;
  u_xlatb3.x = (abs(x_3201) < x_3204);
  let x_3208 : f32 = u_xlat11.x;
  u_xlatb3.y = (0.00001f < x_3208);
  let x_3212 : bool = u_xlatb3.x;
  u_xlat3.x = select(0.0f, 1.0f, x_3212);
  let x_3216 : bool = u_xlatb3.y;
  u_xlat3.y = select(0.0f, 1.0f, x_3216);
  let x_3220 : f32 = u_xlat3.y;
  let x_3222 : f32 = u_xlat3.x;
  u_xlat3.x = (x_3220 * x_3222);
  let x_3226 : f32 = u_xlat18.y;
  u_xlat26 = (-(x_3226) + 1.0f);
  let x_3229 : f32 = u_xlat19;
  let x_3231 : f32 = x_33.x_ProjectionParams2.x;
  u_xlat11.x = (x_3229 * x_3231);
  let x_3235 : vec4<f32> = x_33.x_CameraViewXExtent[0i];
  let x_3237 : vec2<f32> = u_xlat18;
  let x_3241 : vec4<f32> = x_33.x_CameraViewTopLeftCorner[0i];
  u_xlat5 = ((vec3<f32>(x_3235.x, x_3235.y, x_3235.z) * vec3<f32>(x_3237.x, x_3237.x, x_3237.x)) + vec3<f32>(x_3241.x, x_3241.y, x_3241.z));
  let x_3245 : vec4<f32> = x_33.x_CameraViewYExtent[0i];
  let x_3247 : f32 = u_xlat26;
  let x_3250 : vec3<f32> = u_xlat5;
  u_xlat5 = ((vec3<f32>(x_3245.x, x_3245.y, x_3245.z) * vec3<f32>(x_3247, x_3247, x_3247)) + x_3250);
  let x_3252 : vec3<f32> = u_xlat5;
  let x_3253 : vec3<f32> = u_xlat11;
  let x_3256 : vec3<f32> = u_xlat8;
  u_xlat11 = ((x_3252 * vec3<f32>(x_3253.x, x_3253.x, x_3253.x)) + -(x_3256));
  let x_3259 : vec3<f32> = u_xlat11;
  let x_3260 : vec4<f32> = u_xlat1;
  u_xlat18.x = dot(x_3259, vec3<f32>(x_3260.x, x_3260.y, x_3260.z));
  let x_3264 : f32 = u_xlat0;
  let x_3268 : f32 = u_xlat18.x;
  u_xlat18.x = ((-(x_3264) * 0.004f) + x_3268);
  let x_3272 : f32 = u_xlat18.x;
  u_xlat18.x = max(x_3272, 0.0f);
  let x_3275 : vec3<f32> = u_xlat11;
  let x_3276 : vec3<f32> = u_xlat11;
  u_xlat26 = dot(x_3275, x_3276);
  let x_3278 : f32 = u_xlat26;
  u_xlat26 = (x_3278 + 0.0001f);
  let x_3280 : f32 = u_xlat26;
  u_xlat26 = (1.0f / x_3280);
  let x_3282 : f32 = u_xlat26;
  let x_3284 : f32 = u_xlat18.x;
  u_xlat18.x = (x_3282 * x_3284);
  let x_3288 : f32 = u_xlat18.x;
  let x_3290 : f32 = u_xlat3.x;
  let x_3292 : f32 = u_xlat25;
  u_xlat25 = ((x_3288 * x_3290) + x_3292);
  let x_3294 : vec4<f32> = u_xlat2;
  let x_3297 : vec4<f32> = x_33.x_SSAOBlueNoiseParams;
  let x_3302 : vec2<f32> = ((vec2<f32>(x_3294.x, x_3294.y) * vec2<f32>(x_3297.x, x_3297.y)) + vec2<f32>(0.916666687f, 0.916666687f));
  let x_3303 : vec4<f32> = u_xlat2;
  u_xlat2 = vec4<f32>(x_3302.x, x_3302.y, x_3303.z, x_3303.w);
  let x_3308 : vec4<f32> = u_xlat2;
  let x_3311 : f32 = x_33.x_GlobalMipBias.x;
  let x_3312 : vec4<f32> = textureSampleBias(x_BlueNoiseTexture, sampler_PointRepeat, vec2<f32>(x_3308.x, x_3308.y), x_3311);
  u_xlat2.x = x_3312.w;
  let x_3315 : vec4<f32> = u_xlat2;
  let x_3318 : vec2<f32> = (vec2<f32>(x_3315.x, x_3315.x) + vec2<f32>(0.984375f, 0.125f));
  let x_3319 : vec4<f32> = u_xlat2;
  u_xlat2 = vec4<f32>(x_3318.x, x_3318.y, x_3319.z, x_3319.w);
  let x_3322 : f32 = u_xlat2.x;
  u_xlat2.x = fract(x_3322);
  let x_3326 : f32 = u_xlat2.x;
  u_xlat3.z = ((x_3326 * 2.0f) + -1.0f);
  let x_3331 : f32 = u_xlat2.y;
  u_xlat2.x = (x_3331 * 628.31854248f);
  let x_3335 : f32 = u_xlat3.z;
  let x_3338 : f32 = u_xlat3.z;
  u_xlat10.x = ((-(x_3335) * x_3338) + 1.0f);
  let x_3343 : f32 = u_xlat10.x;
  u_xlat10.x = sqrt(x_3343);
  let x_3347 : f32 = u_xlat2.x;
  u_xlat5.x = cos(x_3347);
  let x_3351 : f32 = u_xlat2.x;
  u_xlat2.x = sin(x_3351);
  let x_3355 : f32 = u_xlat10.x;
  let x_3357 : f32 = u_xlat5.x;
  u_xlat3.x = (x_3355 * x_3357);
  let x_3361 : f32 = u_xlat2.x;
  let x_3363 : f32 = u_xlat10.x;
  u_xlat3.y = (x_3361 * x_3363);
  let x_3366 : vec4<f32> = u_xlat1;
  let x_3368 : vec4<f32> = u_xlat3;
  u_xlat2.x = dot(vec3<f32>(x_3366.x, x_3366.y, x_3366.z), vec3<f32>(x_3368.x, x_3368.y, x_3368.z));
  let x_3375 : f32 = u_xlat2.x;
  u_xlatb2.x = (x_3375 >= 0.0f);
  let x_3379 : bool = u_xlatb2.x;
  u_xlat2.x = select(-1.0f, 1.0f, x_3379);
  let x_3382 : vec4<f32> = u_xlat2;
  let x_3384 : vec4<f32> = u_xlat3;
  let x_3386 : vec3<f32> = (vec3<f32>(x_3382.x, x_3382.x, x_3382.x) * vec3<f32>(x_3384.x, x_3384.y, x_3384.z));
  let x_3387 : vec4<f32> = u_xlat2;
  u_xlat2 = vec4<f32>(x_3386.x, x_3386.y, x_3386.z, x_3387.w);
  let x_3389 : vec4<f32> = u_xlat2;
  let x_3392 : vec4<f32> = x_33.x_SSAOParams;
  let x_3394 : vec3<f32> = (vec3<f32>(x_3389.x, x_3389.y, x_3389.z) * vec3<f32>(x_3392.y, x_3392.y, x_3392.y));
  let x_3395 : vec4<f32> = u_xlat2;
  u_xlat2 = vec4<f32>(x_3394.x, x_3394.y, x_3394.z, x_3395.w);
  let x_3397 : vec4<f32> = u_xlat2;
  let x_3402 : vec3<f32> = u_xlat8;
  let x_3403 : vec3<f32> = ((vec3<f32>(x_3397.x, x_3397.y, x_3397.z) * vec3<f32>(0.856249988f, 0.856249988f, 0.856249988f)) + x_3402);
  let x_3404 : vec4<f32> = u_xlat2;
  u_xlat2 = vec4<f32>(x_3403.x, x_3403.y, x_3403.z, x_3404.w);
  let x_3406 : vec4<f32> = u_xlat2;
  let x_3409 : vec4<f32> = x_33.x_CameraViewProjections[0i][1i];
  let x_3411 : vec2<f32> = (vec2<f32>(x_3406.y, x_3406.y) * vec2<f32>(x_3409.x, x_3409.y));
  let x_3412 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_3411.x, x_3411.y, x_3412.z, x_3412.w);
  let x_3415 : vec4<f32> = x_33.x_CameraViewProjections[0i][0i];
  let x_3417 : vec4<f32> = u_xlat2;
  let x_3420 : vec4<f32> = u_xlat3;
  let x_3422 : vec2<f32> = ((vec2<f32>(x_3415.x, x_3415.y) * vec2<f32>(x_3417.x, x_3417.x)) + vec2<f32>(x_3420.x, x_3420.y));
  let x_3423 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_3422.x, x_3422.y, x_3423.z, x_3423.w);
  let x_3426 : vec4<f32> = x_33.x_CameraViewProjections[0i][2i];
  let x_3428 : vec4<f32> = u_xlat2;
  let x_3431 : vec4<f32> = u_xlat3;
  let x_3433 : vec2<f32> = ((vec2<f32>(x_3426.x, x_3426.y) * vec2<f32>(x_3428.z, x_3428.z)) + vec2<f32>(x_3431.x, x_3431.y));
  let x_3434 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_3433.x, x_3433.y, x_3434.z, x_3434.w);
  let x_3436 : vec4<f32> = u_xlat4;
  let x_3438 : vec4<f32> = u_xlat2;
  u_xlat2.x = dot(vec3<f32>(x_3436.x, x_3436.y, x_3436.z), vec3<f32>(x_3438.x, x_3438.y, x_3438.z));
  let x_3443 : f32 = u_xlat2.x;
  u_xlat10.x = (1.0f / -(x_3443));
  let x_3447 : vec4<f32> = u_xlat3;
  let x_3449 : vec2<f32> = u_xlat10;
  u_xlat10 = ((vec2<f32>(x_3447.x, x_3447.y) * vec2<f32>(x_3449.x, x_3449.x)) + vec2<f32>(1.0f, 1.0f));
  let x_3453 : vec2<f32> = u_xlat10;
  u_xlat10 = (x_3453 * vec2<f32>(0.5f, 0.5f));
  let x_3455 : vec2<f32> = u_xlat10;
  u_xlat10 = clamp(x_3455, vec2<f32>(0.0f, 0.0f), vec2<f32>(1.0f, 1.0f));
  let x_3462 : vec2<f32> = u_xlat10;
  let x_3464 : f32 = x_33.x_GlobalMipBias.x;
  let x_3465 : vec4<f32> = textureSampleBias(x_CameraDepthTexture, sampler_CameraDepthTexture, x_3462, x_3464);
  u_xlat26 = x_3465.x;
  let x_3468 : f32 = x_33.x_ZBufferParams.z;
  let x_3469 : f32 = u_xlat26;
  let x_3472 : f32 = x_33.x_ZBufferParams.w;
  u_xlat3.x = ((x_3468 * x_3469) + x_3472);
  let x_3476 : f32 = u_xlat3.x;
  u_xlat3.x = (1.0f / x_3476);
  let x_3480 : f32 = u_xlat2.x;
  let x_3483 : f32 = u_xlat3.x;
  u_xlat2.x = (-(x_3480) + -(x_3483));
  let x_3488 : f32 = u_xlat2.x;
  let x_3491 : f32 = x_33.x_SSAOParams.y;
  u_xlatb2.x = (abs(x_3488) < x_3491);
  let x_3494 : f32 = u_xlat26;
  u_xlatb2.w = (0.00001f < x_3494);
  let x_3498 : bool = u_xlatb2.x;
  u_xlat2.x = select(0.0f, 1.0f, x_3498);
  let x_3502 : bool = u_xlatb2.w;
  u_xlat2.w = select(0.0f, 1.0f, x_3502);
  let x_3506 : f32 = u_xlat2.w;
  let x_3508 : f32 = u_xlat2.x;
  u_xlat2.x = (x_3506 * x_3508);
  let x_3512 : f32 = u_xlat10.y;
  u_xlat18.x = (-(x_3512) + 1.0f);
  let x_3517 : f32 = u_xlat3.x;
  let x_3519 : f32 = x_33.x_ProjectionParams2.x;
  u_xlat26 = (x_3517 * x_3519);
  let x_3522 : vec4<f32> = x_33.x_CameraViewXExtent[0i];
  let x_3524 : vec2<f32> = u_xlat10;
  let x_3528 : vec4<f32> = x_33.x_CameraViewTopLeftCorner[0i];
  let x_3530 : vec3<f32> = ((vec3<f32>(x_3522.x, x_3522.y, x_3522.z) * vec3<f32>(x_3524.x, x_3524.x, x_3524.x)) + vec3<f32>(x_3528.x, x_3528.y, x_3528.z));
  let x_3531 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_3530.x, x_3530.y, x_3530.z, x_3531.w);
  let x_3534 : vec4<f32> = x_33.x_CameraViewYExtent[0i];
  let x_3536 : vec2<f32> = u_xlat18;
  let x_3539 : vec4<f32> = u_xlat3;
  let x_3541 : vec3<f32> = ((vec3<f32>(x_3534.x, x_3534.y, x_3534.z) * vec3<f32>(x_3536.x, x_3536.x, x_3536.x)) + vec3<f32>(x_3539.x, x_3539.y, x_3539.z));
  let x_3542 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_3541.x, x_3541.y, x_3541.z, x_3542.w);
  let x_3544 : vec4<f32> = u_xlat3;
  let x_3546 : f32 = u_xlat26;
  let x_3549 : vec3<f32> = u_xlat8;
  u_xlat8 = ((vec3<f32>(x_3544.x, x_3544.y, x_3544.z) * vec3<f32>(x_3546, x_3546, x_3546)) + -(x_3549));
  let x_3552 : vec3<f32> = u_xlat8;
  let x_3553 : vec4<f32> = u_xlat1;
  u_xlat10.x = dot(x_3552, vec3<f32>(x_3553.x, x_3553.y, x_3553.z));
  let x_3557 : f32 = u_xlat0;
  let x_3561 : f32 = u_xlat10.x;
  u_xlat10.x = ((-(x_3557) * 0.004f) + x_3561);
  let x_3565 : f32 = u_xlat10.x;
  u_xlat10.x = max(x_3565, 0.0f);
  let x_3568 : vec3<f32> = u_xlat8;
  let x_3569 : vec3<f32> = u_xlat8;
  u_xlat8.x = dot(x_3568, x_3569);
  let x_3573 : f32 = u_xlat8.x;
  u_xlat8.x = (x_3573 + 0.0001f);
  let x_3577 : f32 = u_xlat8.x;
  u_xlat8.x = (1.0f / x_3577);
  let x_3581 : f32 = u_xlat8.x;
  let x_3583 : f32 = u_xlat10.x;
  u_xlat8.x = (x_3581 * x_3583);
  let x_3587 : f32 = u_xlat8.x;
  let x_3589 : f32 = u_xlat2.x;
  let x_3591 : f32 = u_xlat25;
  u_xlat8.x = ((x_3587 * x_3589) + x_3591);
  let x_3595 : f32 = u_xlat8.x;
  let x_3597 : f32 = x_33.x_SSAOParams.y;
  u_xlat8.x = (x_3595 * x_3597);
  let x_3601 : f32 = x_33.x_SSAOParams.w;
  u_xlat16 = (1.0f / x_3601);
  let x_3603 : f32 = u_xlat0;
  let x_3605 : f32 = u_xlat16;
  u_xlat0 = ((-(x_3603) * x_3605) + 1.0f);
  let x_3608 : f32 = u_xlat0;
  let x_3609 : f32 = u_xlat0;
  u_xlat0 = (x_3608 * x_3609);
  let x_3612 : f32 = u_xlat8.x;
  let x_3614 : f32 = x_33.x_SSAOParams.x;
  u_xlat8.x = (x_3612 * x_3614);
  let x_3617 : f32 = u_xlat0;
  let x_3619 : f32 = u_xlat8.x;
  u_xlat0 = (x_3617 * x_3619);
  let x_3621 : f32 = u_xlat0;
  u_xlat0 = (x_3621 * 0.083333336f);
  let x_3623 : f32 = u_xlat0;
  u_xlat0 = clamp(x_3623, 0.0f, 1.0f);
  let x_3625 : f32 = u_xlat0;
  u_xlat0 = log2(x_3625);
  let x_3627 : f32 = u_xlat0;
  u_xlat0 = (x_3627 * 0.600000024f);
  let x_3630 : f32 = u_xlat0;
  SV_Target0.x = exp2(x_3630);
  let x_3634 : vec4<f32> = u_xlat1;
  let x_3637 : vec3<f32> = ((vec3<f32>(x_3634.x, x_3634.y, x_3634.z) * vec3<f32>(0.5f, 0.5f, 0.5f)) + vec3<f32>(0.5f, 0.5f, 0.5f));
  let x_3638 : vec4<f32> = SV_Target0;
  SV_Target0 = vec4<f32>(x_3638.x, x_3637.x, x_3637.y, x_3637.z);
  return;
}

struct main_out {
  @location(0)
  SV_Target0_1 : vec4<f32>,
}

@fragment
fn main(@location(0) vs_TEXCOORD0_param : vec2<f32>, @builtin(position) gl_FragCoord_param : vec4<f32>) -> main_out {
  vs_TEXCOORD0 = vs_TEXCOORD0_param;
  gl_FragCoord = gl_FragCoord_param;
  main_1();
  return main_out(SV_Target0);
}

