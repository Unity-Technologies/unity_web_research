struct PGlobals {
  x_ScaledScreenParams : vec4<f32>,
  x_GlobalMipBias : vec2<f32>,
  x_AlphaToMaskAvailable : f32,
  @size(4)
  padding : u32,
  x_MainLightPosition : vec4<f32>,
  x_MainLightColor : vec4<f32>,
  x_AmbientOcclusionParam : vec4<f32>,
  x_AdditionalLightsCount : vec4<f32>,
  x_RenderingLayerMaxInt : u32,
  x_RenderingLayerRcpMaxInt : f32,
  @size(8)
  padding_1 : u32,
  x_WorldSpaceCameraPos : vec3<f32>,
  @size(4)
  padding_2 : u32,
  x_ScreenParams : vec4<f32>,
  unity_OrthoParams : vec4<f32>,
  x_ScaleBiasRt : vec4<f32>,
  unity_MatrixV : mat4x4<f32>,
}

type Arr = array<vec4<f32>, 2u>;

struct UnityPerDraw {
  unity_ObjectToWorld : mat4x4<f32>,
  unity_WorldToObject : mat4x4<f32>,
  unity_LODFade : vec4<f32>,
  unity_WorldTransformParams : vec4<f32>,
  unity_RenderingLayer : vec4<f32>,
  unity_LightData : vec4<f32>,
  unity_LightIndices : Arr,
  unity_ProbesOcclusion : vec4<f32>,
  unity_SpecCube0_HDR : vec4<f32>,
  unity_SpecCube1_HDR : vec4<f32>,
  unity_SpecCube0_BoxMax : vec4<f32>,
  unity_SpecCube0_BoxMin : vec4<f32>,
  unity_SpecCube0_ProbePosition : vec4<f32>,
  unity_SpecCube1_BoxMax : vec4<f32>,
  unity_SpecCube1_BoxMin : vec4<f32>,
  unity_SpecCube1_ProbePosition : vec4<f32>,
  unity_LightmapST : vec4<f32>,
  unity_DynamicLightmapST : vec4<f32>,
  unity_SHAr : vec4<f32>,
  unity_SHAg : vec4<f32>,
  unity_SHAb : vec4<f32>,
  unity_SHBr : vec4<f32>,
  unity_SHBg : vec4<f32>,
  unity_SHBb : vec4<f32>,
  unity_SHC : vec4<f32>,
  unity_RendererBounds_Min : vec4<f32>,
  unity_RendererBounds_Max : vec4<f32>,
  unity_MatrixPreviousM : mat4x4<f32>,
  unity_MatrixPreviousMI : mat4x4<f32>,
  unity_MotionVectorsParams : vec4<f32>,
  unity_SpriteColor : vec4<f32>,
  unity_SpriteProps : vec4<f32>,
}

struct UnityPerMaterial {
  Texture2D_B222E8F_TexelSize : vec4<f32>,
  Color_C30C7CA3 : vec4<f32>,
  Texture2D_D9BFD5F1_TexelSize : vec4<f32>,
}

type Arr_1 = array<mat4x4<f32>, 5u>;

struct MainLightShadows {
  x_MainLightWorldToShadow : Arr_1,
  x_CascadeShadowSplitSpheres0 : vec4<f32>,
  x_CascadeShadowSplitSpheres1 : vec4<f32>,
  x_CascadeShadowSplitSpheres2 : vec4<f32>,
  x_CascadeShadowSplitSpheres3 : vec4<f32>,
  x_CascadeShadowSplitSphereRadii : vec4<f32>,
  x_MainLightShadowOffset0 : vec4<f32>,
  x_MainLightShadowOffset1 : vec4<f32>,
  x_MainLightShadowParams : vec4<f32>,
  x_MainLightShadowmapSize : vec4<f32>,
}

type Arr_2 = array<vec4<f32>, 256u>;

type Arr_3 = array<vec4<f32>, 256u>;

type Arr_4 = array<vec4<f32>, 256u>;

type Arr_5 = array<vec4<f32>, 256u>;

type Arr_6 = array<vec4<f32>, 256u>;

struct strided_arr {
  @size(16)
  el : f32,
}

type Arr_7 = array<strided_arr, 256u>;

struct AdditionalLights {
  x_AdditionalLightsPosition : Arr_6,
  x_AdditionalLightsColor : Arr_6,
  x_AdditionalLightsAttenuation : Arr_6,
  x_AdditionalLightsSpotDir : Arr_6,
  x_AdditionalLightsOcclusionProbes : Arr_6,
  x_AdditionalLightsLayerMasks : Arr_7,
}

var<private> gl_FragCoord : vec4<f32>;

var<private> vs_INTERP1 : vec3<f32>;

@group(1) @binding(0) var<uniform> x_90 : PGlobals;

var<private> vs_INTERP0 : vec3<f32>;

@group(1) @binding(2) var<uniform> x_161 : UnityPerDraw;

@group(0) @binding(4) var Texture2D_B222E8F : texture_2d<f32>;

@group(0) @binding(10) var samplerTexture2D_B222E8F : sampler;

var<private> vs_INTERP3 : vec4<f32>;

@group(1) @binding(4) var<uniform> x_215 : UnityPerMaterial;

@group(0) @binding(5) var Texture2D_D9BFD5F1 : texture_2d<f32>;

@group(0) @binding(11) var samplerTexture2D_D9BFD5F1 : sampler;

var<private> vs_INTERP4 : vec4<f32>;

@group(1) @binding(3) var<uniform> x_272 : MainLightShadows;

@group(0) @binding(3) var x_MainLightShadowmapTexture : texture_depth_2d;

@group(0) @binding(9) var sampler_MainLightShadowmapTexture : sampler_comparison;

var<private> vs_INTERP2 : vec4<f32>;

@group(0) @binding(1) var unity_Lightmap : texture_2d<f32>;

@group(0) @binding(7) var samplerunity_Lightmap : sampler;

var<private> vs_INTERP5 : vec2<f32>;

@group(0) @binding(2) var x_ScreenSpaceOcclusionTexture : texture_2d<f32>;

@group(0) @binding(8) var sampler_ScreenSpaceOcclusionTexture : sampler;

var<private> vs_INTERP9 : vec4<f32>;

@group(0) @binding(0) var unity_SpecCube0 : texture_cube<f32>;

@group(0) @binding(6) var samplerunity_SpecCube0 : sampler;

@group(1) @binding(1) var<uniform> x_3603 : AdditionalLights;

var<private> SV_Target0 : vec4<f32>;

var<private> SV_Target1 : vec4<f32>;

fn int_bitfieldInsert_i1_i1_i1_i1_(base : ptr<function, i32>, insert : ptr<function, i32>, offset_1 : ptr<function, i32>, bits : ptr<function, i32>) -> i32 {
  var mask : u32;
  let x_19 : i32 = *(bits);
  let x_23 : i32 = *(offset_1);
  mask = (~((4294967295u << bitcast<u32>(x_19))) << bitcast<u32>(x_23));
  let x_26 : i32 = *(base);
  let x_28 : u32 = mask;
  let x_31 : i32 = *(insert);
  let x_33 : i32 = *(offset_1);
  let x_36 : u32 = mask;
  return bitcast<i32>(((bitcast<u32>(x_26) & ~(x_28)) | ((bitcast<u32>(x_31) << bitcast<u32>(x_33)) & x_36)));
}

fn main_1() {
  var hlslcc_FragCoord : vec4<f32>;
  var u_xlat0 : vec3<f32>;
  var u_xlatb63 : bool;
  var u_xlat1 : vec3<f32>;
  var u_xlat64 : f32;
  var u_xlat2 : vec3<f32>;
  var x_118 : f32;
  var x_132 : f32;
  var x_145 : f32;
  var u_xlat63 : f32;
  var u_xlat3 : vec4<f32>;
  var u_xlat4 : vec3<f32>;
  var u_xlat5 : vec4<f32>;
  var u_xlat6 : vec4<f32>;
  var u_xlat26 : vec3<f32>;
  var u_xlatb64 : bool;
  var u_xlat7 : vec4<f32>;
  var txVec0 : vec3<f32>;
  var u_xlat8 : vec4<f32>;
  var txVec1 : vec3<f32>;
  var txVec2 : vec3<f32>;
  var txVec3 : vec3<f32>;
  var u_xlatb65 : bool;
  var u_xlat49 : vec2<f32>;
  var u_xlat9 : vec4<f32>;
  var u_xlat51 : vec2<f32>;
  var u_xlat10 : vec4<f32>;
  var u_xlat11 : vec4<f32>;
  var u_xlat12 : vec4<f32>;
  var u_xlat13 : vec4<f32>;
  var u_xlat14 : vec4<f32>;
  var u_xlat15 : vec4<f32>;
  var u_xlat65 : f32;
  var txVec4 : vec3<f32>;
  var u_xlat67 : f32;
  var txVec5 : vec3<f32>;
  var u_xlat69 : f32;
  var txVec6 : vec3<f32>;
  var txVec7 : vec3<f32>;
  var txVec8 : vec3<f32>;
  var txVec9 : vec3<f32>;
  var txVec10 : vec3<f32>;
  var txVec11 : vec3<f32>;
  var txVec12 : vec3<f32>;
  var u_xlat29 : vec3<f32>;
  var u_xlat16 : vec4<f32>;
  var u_xlat17 : vec4<f32>;
  var u_xlat30 : vec2<f32>;
  var u_xlat57 : vec2<f32>;
  var u_xlat52 : vec2<f32>;
  var u_xlat18 : vec4<f32>;
  var u_xlat19 : vec4<f32>;
  var u_xlat20 : vec4<f32>;
  var txVec13 : vec3<f32>;
  var txVec14 : vec3<f32>;
  var txVec15 : vec3<f32>;
  var txVec16 : vec3<f32>;
  var txVec17 : vec3<f32>;
  var txVec18 : vec3<f32>;
  var txVec19 : vec3<f32>;
  var txVec20 : vec3<f32>;
  var txVec21 : vec3<f32>;
  var txVec22 : vec3<f32>;
  var txVec23 : vec3<f32>;
  var txVec24 : vec3<f32>;
  var txVec25 : vec3<f32>;
  var txVec26 : vec3<f32>;
  var txVec27 : vec3<f32>;
  var txVec28 : vec3<f32>;
  var txVec29 : vec3<f32>;
  var u_xlatb67 : bool;
  var u_xlatb6 : bool;
  var x_1584 : f32;
  var u_xlatb3 : bool;
  var u_xlatu1 : vec3<u32>;
  var u_xlatu43 : u32;
  var u_xlatu24 : u32;
  var u_xlati43 : i32;
  var u_xlati22 : i32;
  var u_xlatu22 : u32;
  var u_xlati1 : i32;
  var param : i32;
  var param_1 : i32;
  var param_2 : i32;
  var param_3 : i32;
  var u_xlat22 : f32;
  var x_1717 : f32;
  var u_xlatb43 : vec2<bool>;
  var u_xlat43 : vec2<f32>;
  var u_xlatb22 : bool;
  var x_1789 : f32;
  var u_xlat66 : f32;
  var u_xlat27 : f32;
  var txVec30 : vec3<f32>;
  var txVec31 : vec3<f32>;
  var txVec32 : vec3<f32>;
  var txVec33 : vec3<f32>;
  var u_xlatb48 : bool;
  var u_xlat48 : vec2<f32>;
  var txVec34 : vec3<f32>;
  var txVec35 : vec3<f32>;
  var txVec36 : vec3<f32>;
  var txVec37 : vec3<f32>;
  var txVec38 : vec3<f32>;
  var txVec39 : vec3<f32>;
  var txVec40 : vec3<f32>;
  var txVec41 : vec3<f32>;
  var txVec42 : vec3<f32>;
  var u_xlat55 : vec2<f32>;
  var txVec43 : vec3<f32>;
  var txVec44 : vec3<f32>;
  var u_xlat71 : f32;
  var txVec45 : vec3<f32>;
  var txVec46 : vec3<f32>;
  var txVec47 : vec3<f32>;
  var txVec48 : vec3<f32>;
  var txVec49 : vec3<f32>;
  var txVec50 : vec3<f32>;
  var txVec51 : vec3<f32>;
  var txVec52 : vec3<f32>;
  var txVec53 : vec3<f32>;
  var txVec54 : vec3<f32>;
  var txVec55 : vec3<f32>;
  var txVec56 : vec3<f32>;
  var txVec57 : vec3<f32>;
  var u_xlat28 : f32;
  var txVec58 : vec3<f32>;
  var txVec59 : vec3<f32>;
  var u_xlatu63 : u32;
  var u_xlatu_loop_1 : u32;
  var u_xlatu65 : u32;
  var u_xlati67 : i32;
  var indexable : array<vec4<u32>, 4u>;
  var u_xlati65 : i32;
  var x_3810 : f32;
  var u_xlatu0 : u32;
  var u_xlat_precise_vec4 : vec4<f32>;
  var u_xlat_precise_ivec4 : vec4<i32>;
  var u_xlat_precise_bvec4 : vec4<bool>;
  var u_xlat_precise_uvec4 : vec4<u32>;
  let x_49 : vec4<f32> = gl_FragCoord;
  let x_50 : vec3<f32> = vec3<f32>(x_49.x, x_49.y, x_49.z);
  let x_55 : f32 = gl_FragCoord.w;
  hlslcc_FragCoord = vec4<f32>(x_50.x, x_50.y, x_50.z, (1.0f / x_55));
  let x_65 : vec3<f32> = vs_INTERP1;
  let x_66 : vec3<f32> = vs_INTERP1;
  u_xlat0.x = dot(x_65, x_66);
  let x_72 : f32 = u_xlat0.x;
  u_xlat0.x = sqrt(x_72);
  let x_76 : f32 = u_xlat0.x;
  u_xlat0.x = (1.0f / x_76);
  let x_79 : vec3<f32> = u_xlat0;
  let x_81 : vec3<f32> = vs_INTERP1;
  u_xlat0 = (vec3<f32>(x_79.x, x_79.x, x_79.x) * x_81);
  let x_94 : f32 = x_90.unity_OrthoParams.w;
  u_xlatb63 = (x_94 == 0.0f);
  let x_99 : vec3<f32> = vs_INTERP0;
  let x_104 : vec3<f32> = x_90.x_WorldSpaceCameraPos;
  u_xlat1 = (-(x_99) + x_104);
  let x_107 : vec3<f32> = u_xlat1;
  let x_108 : vec3<f32> = u_xlat1;
  u_xlat64 = dot(x_107, x_108);
  let x_110 : f32 = u_xlat64;
  u_xlat64 = inverseSqrt(x_110);
  let x_112 : f32 = u_xlat64;
  let x_114 : vec3<f32> = u_xlat1;
  u_xlat1 = (vec3<f32>(x_112, x_112, x_112) * x_114);
  let x_117 : bool = u_xlatb63;
  if (x_117) {
    let x_122 : f32 = u_xlat1.x;
    x_118 = x_122;
  } else {
    let x_128 : f32 = x_90.unity_MatrixV[0i].z;
    x_118 = x_128;
  }
  let x_129 : f32 = x_118;
  u_xlat2.x = x_129;
  let x_131 : bool = u_xlatb63;
  if (x_131) {
    let x_137 : f32 = u_xlat1.y;
    x_132 = x_137;
  } else {
    let x_141 : f32 = x_90.unity_MatrixV[1i].z;
    x_132 = x_141;
  }
  let x_142 : f32 = x_132;
  u_xlat2.y = x_142;
  let x_144 : bool = u_xlatb63;
  if (x_144) {
    let x_149 : f32 = u_xlat1.z;
    x_145 = x_149;
  } else {
    let x_153 : f32 = x_90.unity_MatrixV[2i].z;
    x_145 = x_153;
  }
  let x_154 : f32 = x_145;
  u_xlat2.z = x_154;
  let x_156 : vec3<f32> = u_xlat2;
  let x_164 : vec4<f32> = x_161.unity_WorldToObject[1i];
  u_xlat1 = (vec3<f32>(x_156.y, x_156.y, x_156.y) * vec3<f32>(x_164.x, x_164.y, x_164.z));
  let x_168 : vec4<f32> = x_161.unity_WorldToObject[0i];
  let x_170 : vec3<f32> = u_xlat2;
  let x_173 : vec3<f32> = u_xlat1;
  u_xlat1 = ((vec3<f32>(x_168.x, x_168.y, x_168.z) * vec3<f32>(x_170.x, x_170.x, x_170.x)) + x_173);
  let x_176 : vec4<f32> = x_161.unity_WorldToObject[2i];
  let x_178 : vec3<f32> = u_xlat2;
  let x_181 : vec3<f32> = u_xlat1;
  u_xlat1 = ((vec3<f32>(x_176.x, x_176.y, x_176.z) * vec3<f32>(x_178.z, x_178.z, x_178.z)) + x_181);
  let x_184 : vec3<f32> = u_xlat1;
  let x_185 : vec3<f32> = u_xlat1;
  u_xlat63 = dot(x_184, x_185);
  let x_187 : f32 = u_xlat63;
  u_xlat63 = inverseSqrt(x_187);
  let x_189 : f32 = u_xlat63;
  let x_191 : vec3<f32> = u_xlat1;
  u_xlat1 = (vec3<f32>(x_189, x_189, x_189) * x_191);
  let x_205 : vec4<f32> = vs_INTERP3;
  let x_208 : f32 = x_90.x_GlobalMipBias.x;
  let x_209 : vec4<f32> = textureSampleBias(Texture2D_B222E8F, samplerTexture2D_B222E8F, vec2<f32>(x_205.x, x_205.y), x_208);
  u_xlat3 = x_209;
  let x_211 : vec4<f32> = u_xlat3;
  let x_217 : vec4<f32> = x_215.Color_C30C7CA3;
  u_xlat4 = (vec3<f32>(x_211.x, x_211.y, x_211.z) * vec3<f32>(x_217.x, x_217.y, x_217.z));
  let x_226 : vec4<f32> = vs_INTERP3;
  let x_229 : f32 = x_90.x_GlobalMipBias.x;
  let x_230 : vec4<f32> = textureSampleBias(Texture2D_D9BFD5F1, samplerTexture2D_D9BFD5F1, vec2<f32>(x_226.x, x_226.y), x_229);
  u_xlat5 = vec4<f32>(x_230.w, x_230.x, x_230.y, x_230.z);
  let x_233 : vec4<f32> = u_xlat5;
  u_xlat6 = ((vec4<f32>(x_233.y, x_233.z, x_233.w, x_233.x) * vec4<f32>(2.0f, 2.0f, 2.0f, 2.0f)) + vec4<f32>(-1.0f, -1.0f, -1.0f, -1.0f));
  let x_241 : vec4<f32> = u_xlat6;
  let x_242 : vec4<f32> = u_xlat6;
  u_xlat63 = dot(x_241, x_242);
  let x_244 : f32 = u_xlat63;
  u_xlat63 = inverseSqrt(x_244);
  let x_247 : f32 = u_xlat63;
  let x_249 : vec4<f32> = u_xlat6;
  u_xlat26 = (vec3<f32>(x_247, x_247, x_247) * vec3<f32>(x_249.x, x_249.y, x_249.z));
  let x_254 : f32 = vs_INTERP4.y;
  u_xlat63 = (x_254 * 200.0f);
  let x_257 : f32 = u_xlat63;
  u_xlat63 = min(x_257, 1.0f);
  let x_259 : f32 = u_xlat63;
  let x_261 : vec4<f32> = u_xlat3;
  let x_263 : vec3<f32> = (vec3<f32>(x_259, x_259, x_259) * vec3<f32>(x_261.x, x_261.y, x_261.z));
  let x_264 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_263.x, x_263.y, x_263.z, x_264.w);
  let x_266 : vec3<f32> = vs_INTERP0;
  let x_274 : vec4<f32> = x_272.x_MainLightWorldToShadow[0i][1i];
  let x_276 : vec3<f32> = (vec3<f32>(x_266.y, x_266.y, x_266.y) * vec3<f32>(x_274.x, x_274.y, x_274.z));
  let x_277 : vec4<f32> = u_xlat6;
  u_xlat6 = vec4<f32>(x_276.x, x_276.y, x_276.z, x_277.w);
  let x_280 : vec4<f32> = x_272.x_MainLightWorldToShadow[0i][0i];
  let x_282 : vec3<f32> = vs_INTERP0;
  let x_285 : vec4<f32> = u_xlat6;
  let x_287 : vec3<f32> = ((vec3<f32>(x_280.x, x_280.y, x_280.z) * vec3<f32>(x_282.x, x_282.x, x_282.x)) + vec3<f32>(x_285.x, x_285.y, x_285.z));
  let x_288 : vec4<f32> = u_xlat6;
  u_xlat6 = vec4<f32>(x_287.x, x_287.y, x_287.z, x_288.w);
  let x_291 : vec4<f32> = x_272.x_MainLightWorldToShadow[0i][2i];
  let x_293 : vec3<f32> = vs_INTERP0;
  let x_296 : vec4<f32> = u_xlat6;
  let x_298 : vec3<f32> = ((vec3<f32>(x_291.x, x_291.y, x_291.z) * vec3<f32>(x_293.z, x_293.z, x_293.z)) + vec3<f32>(x_296.x, x_296.y, x_296.z));
  let x_299 : vec4<f32> = u_xlat6;
  u_xlat6 = vec4<f32>(x_298.x, x_298.y, x_298.z, x_299.w);
  let x_301 : vec4<f32> = u_xlat6;
  let x_305 : vec4<f32> = x_272.x_MainLightWorldToShadow[0i][3i];
  let x_307 : vec3<f32> = (vec3<f32>(x_301.x, x_301.y, x_301.z) + vec3<f32>(x_305.x, x_305.y, x_305.z));
  let x_308 : vec4<f32> = u_xlat6;
  u_xlat6 = vec4<f32>(x_307.x, x_307.y, x_307.z, x_308.w);
  let x_312 : f32 = x_272.x_MainLightShadowParams.y;
  u_xlatb63 = (0.0f < x_312);
  let x_314 : bool = u_xlatb63;
  if (x_314) {
    let x_319 : f32 = x_272.x_MainLightShadowParams.y;
    u_xlatb64 = (x_319 == 1.0f);
    let x_321 : bool = u_xlatb64;
    if (x_321) {
      let x_325 : vec4<f32> = u_xlat6;
      let x_329 : vec4<f32> = x_272.x_MainLightShadowOffset0;
      u_xlat7 = (vec4<f32>(x_325.x, x_325.y, x_325.x, x_325.y) + x_329);
      let x_332 : vec4<f32> = u_xlat7;
      let x_333 : vec2<f32> = vec2<f32>(x_332.x, x_332.y);
      let x_335 : f32 = u_xlat6.z;
      txVec0 = vec3<f32>(x_333.x, x_333.y, x_335);
      let x_348 : vec3<f32> = txVec0;
      let x_350 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_348.xy, x_348.z);
      u_xlat8.x = x_350;
      let x_353 : vec4<f32> = u_xlat7;
      let x_354 : vec2<f32> = vec2<f32>(x_353.z, x_353.w);
      let x_356 : f32 = u_xlat6.z;
      txVec1 = vec3<f32>(x_354.x, x_354.y, x_356);
      let x_363 : vec3<f32> = txVec1;
      let x_365 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_363.xy, x_363.z);
      u_xlat8.y = x_365;
      let x_367 : vec4<f32> = u_xlat6;
      let x_371 : vec4<f32> = x_272.x_MainLightShadowOffset1;
      u_xlat7 = (vec4<f32>(x_367.x, x_367.y, x_367.x, x_367.y) + x_371);
      let x_374 : vec4<f32> = u_xlat7;
      let x_375 : vec2<f32> = vec2<f32>(x_374.x, x_374.y);
      let x_377 : f32 = u_xlat6.z;
      txVec2 = vec3<f32>(x_375.x, x_375.y, x_377);
      let x_384 : vec3<f32> = txVec2;
      let x_386 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_384.xy, x_384.z);
      u_xlat8.z = x_386;
      let x_389 : vec4<f32> = u_xlat7;
      let x_390 : vec2<f32> = vec2<f32>(x_389.z, x_389.w);
      let x_392 : f32 = u_xlat6.z;
      txVec3 = vec3<f32>(x_390.x, x_390.y, x_392);
      let x_399 : vec3<f32> = txVec3;
      let x_401 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_399.xy, x_399.z);
      u_xlat8.w = x_401;
      let x_403 : vec4<f32> = u_xlat8;
      u_xlat64 = dot(x_403, vec4<f32>(0.25f, 0.25f, 0.25f, 0.25f));
    } else {
      let x_410 : f32 = x_272.x_MainLightShadowParams.y;
      u_xlatb65 = (x_410 == 2.0f);
      let x_412 : bool = u_xlatb65;
      if (x_412) {
        let x_415 : vec4<f32> = u_xlat6;
        let x_418 : vec4<f32> = x_272.x_MainLightShadowmapSize;
        let x_423 : vec2<f32> = ((vec2<f32>(x_415.x, x_415.y) * vec2<f32>(x_418.z, x_418.w)) + vec2<f32>(0.5f, 0.5f));
        let x_424 : vec4<f32> = u_xlat7;
        u_xlat7 = vec4<f32>(x_423.x, x_423.y, x_424.z, x_424.w);
        let x_426 : vec4<f32> = u_xlat7;
        let x_428 : vec2<f32> = floor(vec2<f32>(x_426.x, x_426.y));
        let x_429 : vec4<f32> = u_xlat7;
        u_xlat7 = vec4<f32>(x_428.x, x_428.y, x_429.z, x_429.w);
        let x_433 : vec4<f32> = u_xlat6;
        let x_436 : vec4<f32> = x_272.x_MainLightShadowmapSize;
        let x_439 : vec4<f32> = u_xlat7;
        u_xlat49 = ((vec2<f32>(x_433.x, x_433.y) * vec2<f32>(x_436.z, x_436.w)) + -(vec2<f32>(x_439.x, x_439.y)));
        let x_443 : vec2<f32> = u_xlat49;
        u_xlat8 = (vec4<f32>(x_443.x, x_443.x, x_443.y, x_443.y) + vec4<f32>(0.5f, 1.0f, 0.5f, 1.0f));
        let x_448 : vec4<f32> = u_xlat8;
        let x_450 : vec4<f32> = u_xlat8;
        u_xlat9 = (vec4<f32>(x_448.x, x_448.x, x_448.z, x_448.z) * vec4<f32>(x_450.x, x_450.x, x_450.z, x_450.z));
        let x_453 : vec4<f32> = u_xlat9;
        let x_457 : vec2<f32> = (vec2<f32>(x_453.y, x_453.w) * vec2<f32>(0.079999998f, 0.079999998f));
        let x_458 : vec4<f32> = u_xlat8;
        u_xlat8 = vec4<f32>(x_457.x, x_458.y, x_457.y, x_458.w);
        let x_460 : vec4<f32> = u_xlat9;
        let x_463 : vec2<f32> = u_xlat49;
        let x_465 : vec2<f32> = ((vec2<f32>(x_460.x, x_460.z) * vec2<f32>(0.5f, 0.5f)) + -(x_463));
        let x_466 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_465.x, x_465.y, x_466.z, x_466.w);
        let x_469 : vec2<f32> = u_xlat49;
        u_xlat51 = (-(x_469) + vec2<f32>(1.0f, 1.0f));
        let x_474 : vec2<f32> = u_xlat49;
        let x_476 : vec2<f32> = min(x_474, vec2<f32>(0.0f, 0.0f));
        let x_477 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_476.x, x_476.y, x_477.z, x_477.w);
        let x_479 : vec4<f32> = u_xlat10;
        let x_482 : vec4<f32> = u_xlat10;
        let x_485 : vec2<f32> = u_xlat51;
        let x_486 : vec2<f32> = ((-(vec2<f32>(x_479.x, x_479.y)) * vec2<f32>(x_482.x, x_482.y)) + x_485);
        let x_487 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_486.x, x_486.y, x_487.z, x_487.w);
        let x_489 : vec2<f32> = u_xlat49;
        u_xlat49 = max(x_489, vec2<f32>(0.0f, 0.0f));
        let x_491 : vec2<f32> = u_xlat49;
        let x_493 : vec2<f32> = u_xlat49;
        let x_495 : vec4<f32> = u_xlat8;
        u_xlat49 = ((-(x_491) * x_493) + vec2<f32>(x_495.y, x_495.w));
        let x_498 : vec4<f32> = u_xlat10;
        let x_500 : vec2<f32> = (vec2<f32>(x_498.x, x_498.y) + vec2<f32>(1.0f, 1.0f));
        let x_501 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_500.x, x_500.y, x_501.z, x_501.w);
        let x_503 : vec2<f32> = u_xlat49;
        u_xlat49 = (x_503 + vec2<f32>(1.0f, 1.0f));
        let x_506 : vec4<f32> = u_xlat9;
        let x_510 : vec2<f32> = (vec2<f32>(x_506.x, x_506.y) * vec2<f32>(0.159999996f, 0.159999996f));
        let x_511 : vec4<f32> = u_xlat11;
        u_xlat11 = vec4<f32>(x_510.x, x_510.y, x_511.z, x_511.w);
        let x_513 : vec2<f32> = u_xlat51;
        let x_514 : vec2<f32> = (x_513 * vec2<f32>(0.159999996f, 0.159999996f));
        let x_515 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_514.x, x_514.y, x_515.z, x_515.w);
        let x_517 : vec4<f32> = u_xlat10;
        let x_519 : vec2<f32> = (vec2<f32>(x_517.x, x_517.y) * vec2<f32>(0.159999996f, 0.159999996f));
        let x_520 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_519.x, x_519.y, x_520.z, x_520.w);
        let x_523 : vec2<f32> = u_xlat49;
        let x_524 : vec2<f32> = (x_523 * vec2<f32>(0.159999996f, 0.159999996f));
        let x_525 : vec4<f32> = u_xlat12;
        u_xlat12 = vec4<f32>(x_524.x, x_524.y, x_525.z, x_525.w);
        let x_527 : vec4<f32> = u_xlat8;
        u_xlat49 = (vec2<f32>(x_527.y, x_527.w) * vec2<f32>(0.159999996f, 0.159999996f));
        let x_531 : f32 = u_xlat10.x;
        u_xlat11.z = x_531;
        let x_534 : f32 = u_xlat49.x;
        u_xlat11.w = x_534;
        let x_537 : f32 = u_xlat12.x;
        u_xlat9.z = x_537;
        let x_540 : f32 = u_xlat8.x;
        u_xlat9.w = x_540;
        let x_543 : vec4<f32> = u_xlat9;
        let x_545 : vec4<f32> = u_xlat11;
        u_xlat13 = (vec4<f32>(x_543.z, x_543.w, x_543.x, x_543.z) + vec4<f32>(x_545.z, x_545.w, x_545.x, x_545.z));
        let x_549 : f32 = u_xlat11.y;
        u_xlat10.z = x_549;
        let x_552 : f32 = u_xlat49.y;
        u_xlat10.w = x_552;
        let x_555 : f32 = u_xlat9.y;
        u_xlat12.z = x_555;
        let x_558 : f32 = u_xlat8.z;
        u_xlat12.w = x_558;
        let x_560 : vec4<f32> = u_xlat10;
        let x_562 : vec4<f32> = u_xlat12;
        let x_564 : vec3<f32> = (vec3<f32>(x_560.z, x_560.y, x_560.w) + vec3<f32>(x_562.z, x_562.y, x_562.w));
        let x_565 : vec4<f32> = u_xlat8;
        u_xlat8 = vec4<f32>(x_564.x, x_564.y, x_564.z, x_565.w);
        let x_567 : vec4<f32> = u_xlat9;
        let x_569 : vec4<f32> = u_xlat13;
        let x_571 : vec3<f32> = (vec3<f32>(x_567.x, x_567.z, x_567.w) / vec3<f32>(x_569.z, x_569.w, x_569.y));
        let x_572 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_571.x, x_571.y, x_571.z, x_572.w);
        let x_574 : vec4<f32> = u_xlat9;
        let x_580 : vec3<f32> = (vec3<f32>(x_574.x, x_574.y, x_574.z) + vec3<f32>(-2.5f, -0.5f, 1.5f));
        let x_581 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_580.x, x_580.y, x_580.z, x_581.w);
        let x_583 : vec4<f32> = u_xlat12;
        let x_585 : vec4<f32> = u_xlat8;
        let x_587 : vec3<f32> = (vec3<f32>(x_583.z, x_583.y, x_583.w) / vec3<f32>(x_585.x, x_585.y, x_585.z));
        let x_588 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_587.x, x_587.y, x_587.z, x_588.w);
        let x_590 : vec4<f32> = u_xlat10;
        let x_592 : vec3<f32> = (vec3<f32>(x_590.x, x_590.y, x_590.z) + vec3<f32>(-2.5f, -0.5f, 1.5f));
        let x_593 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_592.x, x_592.y, x_592.z, x_593.w);
        let x_595 : vec4<f32> = u_xlat9;
        let x_598 : vec4<f32> = x_272.x_MainLightShadowmapSize;
        let x_600 : vec3<f32> = (vec3<f32>(x_595.y, x_595.x, x_595.z) * vec3<f32>(x_598.x, x_598.x, x_598.x));
        let x_601 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_600.x, x_600.y, x_600.z, x_601.w);
        let x_603 : vec4<f32> = u_xlat10;
        let x_606 : vec4<f32> = x_272.x_MainLightShadowmapSize;
        let x_608 : vec3<f32> = (vec3<f32>(x_603.x, x_603.y, x_603.z) * vec3<f32>(x_606.y, x_606.y, x_606.y));
        let x_609 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_608.x, x_608.y, x_608.z, x_609.w);
        let x_612 : f32 = u_xlat10.x;
        u_xlat9.w = x_612;
        let x_614 : vec4<f32> = u_xlat7;
        let x_617 : vec4<f32> = x_272.x_MainLightShadowmapSize;
        let x_620 : vec4<f32> = u_xlat9;
        u_xlat11 = ((vec4<f32>(x_614.x, x_614.y, x_614.x, x_614.y) * vec4<f32>(x_617.x, x_617.y, x_617.x, x_617.y)) + vec4<f32>(x_620.y, x_620.w, x_620.x, x_620.w));
        let x_623 : vec4<f32> = u_xlat7;
        let x_626 : vec4<f32> = x_272.x_MainLightShadowmapSize;
        let x_629 : vec4<f32> = u_xlat9;
        u_xlat49 = ((vec2<f32>(x_623.x, x_623.y) * vec2<f32>(x_626.x, x_626.y)) + vec2<f32>(x_629.z, x_629.w));
        let x_633 : f32 = u_xlat9.y;
        u_xlat10.w = x_633;
        let x_635 : vec4<f32> = u_xlat10;
        let x_636 : vec2<f32> = vec2<f32>(x_635.y, x_635.z);
        let x_637 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_637.x, x_636.x, x_637.z, x_636.y);
        let x_639 : vec4<f32> = u_xlat7;
        let x_642 : vec4<f32> = x_272.x_MainLightShadowmapSize;
        let x_645 : vec4<f32> = u_xlat9;
        u_xlat12 = ((vec4<f32>(x_639.x, x_639.y, x_639.x, x_639.y) * vec4<f32>(x_642.x, x_642.y, x_642.x, x_642.y)) + vec4<f32>(x_645.x, x_645.y, x_645.z, x_645.y));
        let x_648 : vec4<f32> = u_xlat7;
        let x_651 : vec4<f32> = x_272.x_MainLightShadowmapSize;
        let x_654 : vec4<f32> = u_xlat10;
        u_xlat10 = ((vec4<f32>(x_648.x, x_648.y, x_648.x, x_648.y) * vec4<f32>(x_651.x, x_651.y, x_651.x, x_651.y)) + vec4<f32>(x_654.w, x_654.y, x_654.w, x_654.z));
        let x_657 : vec4<f32> = u_xlat7;
        let x_660 : vec4<f32> = x_272.x_MainLightShadowmapSize;
        let x_663 : vec4<f32> = u_xlat9;
        u_xlat9 = ((vec4<f32>(x_657.x, x_657.y, x_657.x, x_657.y) * vec4<f32>(x_660.x, x_660.y, x_660.x, x_660.y)) + vec4<f32>(x_663.x, x_663.w, x_663.z, x_663.w));
        let x_667 : vec4<f32> = u_xlat8;
        let x_669 : vec4<f32> = u_xlat13;
        u_xlat14 = (vec4<f32>(x_667.x, x_667.x, x_667.x, x_667.y) * vec4<f32>(x_669.z, x_669.w, x_669.y, x_669.z));
        let x_673 : vec4<f32> = u_xlat8;
        let x_675 : vec4<f32> = u_xlat13;
        u_xlat15 = (vec4<f32>(x_673.y, x_673.y, x_673.z, x_673.z) * x_675);
        let x_679 : f32 = u_xlat8.z;
        let x_681 : f32 = u_xlat13.y;
        u_xlat65 = (x_679 * x_681);
        let x_684 : vec4<f32> = u_xlat11;
        let x_685 : vec2<f32> = vec2<f32>(x_684.x, x_684.y);
        let x_687 : f32 = u_xlat6.z;
        txVec4 = vec3<f32>(x_685.x, x_685.y, x_687);
        let x_695 : vec3<f32> = txVec4;
        let x_697 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_695.xy, x_695.z);
        u_xlat67 = x_697;
        let x_699 : vec4<f32> = u_xlat11;
        let x_700 : vec2<f32> = vec2<f32>(x_699.z, x_699.w);
        let x_702 : f32 = u_xlat6.z;
        txVec5 = vec3<f32>(x_700.x, x_700.y, x_702);
        let x_710 : vec3<f32> = txVec5;
        let x_712 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_710.xy, x_710.z);
        u_xlat69 = x_712;
        let x_713 : f32 = u_xlat69;
        let x_715 : f32 = u_xlat14.y;
        u_xlat69 = (x_713 * x_715);
        let x_718 : f32 = u_xlat14.x;
        let x_719 : f32 = u_xlat67;
        let x_721 : f32 = u_xlat69;
        u_xlat67 = ((x_718 * x_719) + x_721);
        let x_724 : vec2<f32> = u_xlat49;
        let x_726 : f32 = u_xlat6.z;
        txVec6 = vec3<f32>(x_724.x, x_724.y, x_726);
        let x_733 : vec3<f32> = txVec6;
        let x_735 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_733.xy, x_733.z);
        u_xlat69 = x_735;
        let x_737 : f32 = u_xlat14.z;
        let x_738 : f32 = u_xlat69;
        let x_740 : f32 = u_xlat67;
        u_xlat67 = ((x_737 * x_738) + x_740);
        let x_743 : vec4<f32> = u_xlat10;
        let x_744 : vec2<f32> = vec2<f32>(x_743.x, x_743.y);
        let x_746 : f32 = u_xlat6.z;
        txVec7 = vec3<f32>(x_744.x, x_744.y, x_746);
        let x_753 : vec3<f32> = txVec7;
        let x_755 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_753.xy, x_753.z);
        u_xlat69 = x_755;
        let x_757 : f32 = u_xlat14.w;
        let x_758 : f32 = u_xlat69;
        let x_760 : f32 = u_xlat67;
        u_xlat67 = ((x_757 * x_758) + x_760);
        let x_763 : vec4<f32> = u_xlat12;
        let x_764 : vec2<f32> = vec2<f32>(x_763.x, x_763.y);
        let x_766 : f32 = u_xlat6.z;
        txVec8 = vec3<f32>(x_764.x, x_764.y, x_766);
        let x_773 : vec3<f32> = txVec8;
        let x_775 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_773.xy, x_773.z);
        u_xlat69 = x_775;
        let x_777 : f32 = u_xlat15.x;
        let x_778 : f32 = u_xlat69;
        let x_780 : f32 = u_xlat67;
        u_xlat67 = ((x_777 * x_778) + x_780);
        let x_783 : vec4<f32> = u_xlat12;
        let x_784 : vec2<f32> = vec2<f32>(x_783.z, x_783.w);
        let x_786 : f32 = u_xlat6.z;
        txVec9 = vec3<f32>(x_784.x, x_784.y, x_786);
        let x_793 : vec3<f32> = txVec9;
        let x_795 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_793.xy, x_793.z);
        u_xlat69 = x_795;
        let x_797 : f32 = u_xlat15.y;
        let x_798 : f32 = u_xlat69;
        let x_800 : f32 = u_xlat67;
        u_xlat67 = ((x_797 * x_798) + x_800);
        let x_803 : vec4<f32> = u_xlat10;
        let x_804 : vec2<f32> = vec2<f32>(x_803.z, x_803.w);
        let x_806 : f32 = u_xlat6.z;
        txVec10 = vec3<f32>(x_804.x, x_804.y, x_806);
        let x_813 : vec3<f32> = txVec10;
        let x_815 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_813.xy, x_813.z);
        u_xlat69 = x_815;
        let x_817 : f32 = u_xlat15.z;
        let x_818 : f32 = u_xlat69;
        let x_820 : f32 = u_xlat67;
        u_xlat67 = ((x_817 * x_818) + x_820);
        let x_823 : vec4<f32> = u_xlat9;
        let x_824 : vec2<f32> = vec2<f32>(x_823.x, x_823.y);
        let x_826 : f32 = u_xlat6.z;
        txVec11 = vec3<f32>(x_824.x, x_824.y, x_826);
        let x_833 : vec3<f32> = txVec11;
        let x_835 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_833.xy, x_833.z);
        u_xlat69 = x_835;
        let x_837 : f32 = u_xlat15.w;
        let x_838 : f32 = u_xlat69;
        let x_840 : f32 = u_xlat67;
        u_xlat67 = ((x_837 * x_838) + x_840);
        let x_843 : vec4<f32> = u_xlat9;
        let x_844 : vec2<f32> = vec2<f32>(x_843.z, x_843.w);
        let x_846 : f32 = u_xlat6.z;
        txVec12 = vec3<f32>(x_844.x, x_844.y, x_846);
        let x_853 : vec3<f32> = txVec12;
        let x_855 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_853.xy, x_853.z);
        u_xlat69 = x_855;
        let x_856 : f32 = u_xlat65;
        let x_857 : f32 = u_xlat69;
        let x_859 : f32 = u_xlat67;
        u_xlat64 = ((x_856 * x_857) + x_859);
      } else {
        let x_862 : vec4<f32> = u_xlat6;
        let x_865 : vec4<f32> = x_272.x_MainLightShadowmapSize;
        let x_868 : vec2<f32> = ((vec2<f32>(x_862.x, x_862.y) * vec2<f32>(x_865.z, x_865.w)) + vec2<f32>(0.5f, 0.5f));
        let x_869 : vec4<f32> = u_xlat7;
        u_xlat7 = vec4<f32>(x_868.x, x_868.y, x_869.z, x_869.w);
        let x_871 : vec4<f32> = u_xlat7;
        let x_873 : vec2<f32> = floor(vec2<f32>(x_871.x, x_871.y));
        let x_874 : vec4<f32> = u_xlat7;
        u_xlat7 = vec4<f32>(x_873.x, x_873.y, x_874.z, x_874.w);
        let x_876 : vec4<f32> = u_xlat6;
        let x_879 : vec4<f32> = x_272.x_MainLightShadowmapSize;
        let x_882 : vec4<f32> = u_xlat7;
        u_xlat49 = ((vec2<f32>(x_876.x, x_876.y) * vec2<f32>(x_879.z, x_879.w)) + -(vec2<f32>(x_882.x, x_882.y)));
        let x_886 : vec2<f32> = u_xlat49;
        u_xlat8 = (vec4<f32>(x_886.x, x_886.x, x_886.y, x_886.y) + vec4<f32>(0.5f, 1.0f, 0.5f, 1.0f));
        let x_889 : vec4<f32> = u_xlat8;
        let x_891 : vec4<f32> = u_xlat8;
        u_xlat9 = (vec4<f32>(x_889.x, x_889.x, x_889.z, x_889.z) * vec4<f32>(x_891.x, x_891.x, x_891.z, x_891.z));
        let x_894 : vec4<f32> = u_xlat9;
        let x_898 : vec2<f32> = (vec2<f32>(x_894.y, x_894.w) * vec2<f32>(0.040816002f, 0.040816002f));
        let x_899 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_899.x, x_898.x, x_899.z, x_898.y);
        let x_901 : vec4<f32> = u_xlat9;
        let x_904 : vec2<f32> = u_xlat49;
        let x_906 : vec2<f32> = ((vec2<f32>(x_901.x, x_901.z) * vec2<f32>(0.5f, 0.5f)) + -(x_904));
        let x_907 : vec4<f32> = u_xlat8;
        u_xlat8 = vec4<f32>(x_906.x, x_907.y, x_906.y, x_907.w);
        let x_909 : vec2<f32> = u_xlat49;
        let x_911 : vec2<f32> = (-(x_909) + vec2<f32>(1.0f, 1.0f));
        let x_912 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_911.x, x_911.y, x_912.z, x_912.w);
        let x_914 : vec2<f32> = u_xlat49;
        u_xlat51 = min(x_914, vec2<f32>(0.0f, 0.0f));
        let x_916 : vec2<f32> = u_xlat51;
        let x_918 : vec2<f32> = u_xlat51;
        let x_920 : vec4<f32> = u_xlat9;
        let x_922 : vec2<f32> = ((-(x_916) * x_918) + vec2<f32>(x_920.x, x_920.y));
        let x_923 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_922.x, x_922.y, x_923.z, x_923.w);
        let x_925 : vec2<f32> = u_xlat49;
        u_xlat51 = max(x_925, vec2<f32>(0.0f, 0.0f));
        let x_928 : vec2<f32> = u_xlat51;
        let x_930 : vec2<f32> = u_xlat51;
        let x_932 : vec4<f32> = u_xlat8;
        let x_934 : vec2<f32> = ((-(x_928) * x_930) + vec2<f32>(x_932.y, x_932.w));
        let x_935 : vec3<f32> = u_xlat29;
        u_xlat29 = vec3<f32>(x_934.x, x_935.y, x_934.y);
        let x_937 : vec4<f32> = u_xlat9;
        let x_940 : vec2<f32> = (vec2<f32>(x_937.x, x_937.y) + vec2<f32>(2.0f, 2.0f));
        let x_941 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_940.x, x_940.y, x_941.z, x_941.w);
        let x_943 : vec3<f32> = u_xlat29;
        let x_945 : vec2<f32> = (vec2<f32>(x_943.x, x_943.z) + vec2<f32>(2.0f, 2.0f));
        let x_946 : vec4<f32> = u_xlat8;
        u_xlat8 = vec4<f32>(x_946.x, x_945.x, x_946.z, x_945.y);
        let x_949 : f32 = u_xlat8.y;
        u_xlat11.z = (x_949 * 0.081632003f);
        let x_953 : vec4<f32> = u_xlat8;
        let x_956 : vec3<f32> = (vec3<f32>(x_953.z, x_953.x, x_953.w) * vec3<f32>(0.081632003f, 0.081632003f, 0.081632003f));
        let x_957 : vec4<f32> = u_xlat12;
        u_xlat12 = vec4<f32>(x_956.x, x_956.y, x_956.z, x_957.w);
        let x_959 : vec4<f32> = u_xlat9;
        let x_962 : vec2<f32> = (vec2<f32>(x_959.x, x_959.y) * vec2<f32>(0.081632003f, 0.081632003f));
        let x_963 : vec4<f32> = u_xlat8;
        u_xlat8 = vec4<f32>(x_962.x, x_962.y, x_963.z, x_963.w);
        let x_966 : f32 = u_xlat12.y;
        u_xlat11.x = x_966;
        let x_968 : vec2<f32> = u_xlat49;
        let x_975 : vec2<f32> = ((vec2<f32>(x_968.x, x_968.x) * vec2<f32>(-0.081632003f, 0.081632003f)) + vec2<f32>(0.163264006f, 0.081632003f));
        let x_976 : vec4<f32> = u_xlat11;
        u_xlat11 = vec4<f32>(x_976.x, x_975.x, x_976.z, x_975.y);
        let x_978 : vec2<f32> = u_xlat49;
        let x_982 : vec2<f32> = ((vec2<f32>(x_978.x, x_978.x) * vec2<f32>(-0.081632003f, 0.081632003f)) + vec2<f32>(0.081632003f, 0.163264006f));
        let x_983 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_982.x, x_983.y, x_982.y, x_983.w);
        let x_986 : f32 = u_xlat8.x;
        u_xlat9.y = x_986;
        let x_989 : f32 = u_xlat10.y;
        u_xlat9.w = x_989;
        let x_991 : vec4<f32> = u_xlat9;
        let x_992 : vec4<f32> = u_xlat11;
        u_xlat11 = (x_991 + x_992);
        let x_994 : vec2<f32> = u_xlat49;
        let x_997 : vec2<f32> = ((vec2<f32>(x_994.y, x_994.y) * vec2<f32>(-0.081632003f, 0.081632003f)) + vec2<f32>(0.163264006f, 0.081632003f));
        let x_998 : vec4<f32> = u_xlat12;
        u_xlat12 = vec4<f32>(x_998.x, x_997.x, x_998.z, x_997.y);
        let x_1000 : vec2<f32> = u_xlat49;
        let x_1003 : vec2<f32> = ((vec2<f32>(x_1000.y, x_1000.y) * vec2<f32>(-0.081632003f, 0.081632003f)) + vec2<f32>(0.081632003f, 0.163264006f));
        let x_1004 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_1003.x, x_1004.y, x_1003.y, x_1004.w);
        let x_1007 : f32 = u_xlat8.y;
        u_xlat10.y = x_1007;
        let x_1009 : vec4<f32> = u_xlat10;
        let x_1010 : vec4<f32> = u_xlat12;
        u_xlat8 = (x_1009 + x_1010);
        let x_1012 : vec4<f32> = u_xlat9;
        let x_1013 : vec4<f32> = u_xlat11;
        u_xlat9 = (x_1012 / x_1013);
        let x_1015 : vec4<f32> = u_xlat9;
        u_xlat9 = (x_1015 + vec4<f32>(-3.5f, -1.5f, 0.5f, 2.5f));
        let x_1021 : vec4<f32> = u_xlat10;
        let x_1022 : vec4<f32> = u_xlat8;
        u_xlat10 = (x_1021 / x_1022);
        let x_1024 : vec4<f32> = u_xlat10;
        u_xlat10 = (x_1024 + vec4<f32>(-3.5f, -1.5f, 0.5f, 2.5f));
        let x_1026 : vec4<f32> = u_xlat9;
        let x_1029 : vec4<f32> = x_272.x_MainLightShadowmapSize;
        u_xlat9 = (vec4<f32>(x_1026.w, x_1026.x, x_1026.y, x_1026.z) * vec4<f32>(x_1029.x, x_1029.x, x_1029.x, x_1029.x));
        let x_1032 : vec4<f32> = u_xlat10;
        let x_1035 : vec4<f32> = x_272.x_MainLightShadowmapSize;
        u_xlat10 = (vec4<f32>(x_1032.x, x_1032.w, x_1032.y, x_1032.z) * vec4<f32>(x_1035.y, x_1035.y, x_1035.y, x_1035.y));
        let x_1038 : vec4<f32> = u_xlat9;
        let x_1039 : vec3<f32> = vec3<f32>(x_1038.y, x_1038.z, x_1038.w);
        let x_1040 : vec4<f32> = u_xlat12;
        u_xlat12 = vec4<f32>(x_1039.x, x_1040.y, x_1039.y, x_1039.z);
        let x_1043 : f32 = u_xlat10.x;
        u_xlat12.y = x_1043;
        let x_1045 : vec4<f32> = u_xlat7;
        let x_1048 : vec4<f32> = x_272.x_MainLightShadowmapSize;
        let x_1051 : vec4<f32> = u_xlat12;
        u_xlat13 = ((vec4<f32>(x_1045.x, x_1045.y, x_1045.x, x_1045.y) * vec4<f32>(x_1048.x, x_1048.y, x_1048.x, x_1048.y)) + vec4<f32>(x_1051.x, x_1051.y, x_1051.z, x_1051.y));
        let x_1054 : vec4<f32> = u_xlat7;
        let x_1057 : vec4<f32> = x_272.x_MainLightShadowmapSize;
        let x_1060 : vec4<f32> = u_xlat12;
        u_xlat49 = ((vec2<f32>(x_1054.x, x_1054.y) * vec2<f32>(x_1057.x, x_1057.y)) + vec2<f32>(x_1060.w, x_1060.y));
        let x_1064 : f32 = u_xlat12.y;
        u_xlat9.y = x_1064;
        let x_1067 : f32 = u_xlat10.z;
        u_xlat12.y = x_1067;
        let x_1069 : vec4<f32> = u_xlat7;
        let x_1072 : vec4<f32> = x_272.x_MainLightShadowmapSize;
        let x_1075 : vec4<f32> = u_xlat12;
        u_xlat14 = ((vec4<f32>(x_1069.x, x_1069.y, x_1069.x, x_1069.y) * vec4<f32>(x_1072.x, x_1072.y, x_1072.x, x_1072.y)) + vec4<f32>(x_1075.x, x_1075.y, x_1075.z, x_1075.y));
        let x_1078 : vec4<f32> = u_xlat7;
        let x_1081 : vec4<f32> = x_272.x_MainLightShadowmapSize;
        let x_1084 : vec4<f32> = u_xlat12;
        let x_1086 : vec2<f32> = ((vec2<f32>(x_1078.x, x_1078.y) * vec2<f32>(x_1081.x, x_1081.y)) + vec2<f32>(x_1084.w, x_1084.y));
        let x_1087 : vec4<f32> = u_xlat15;
        u_xlat15 = vec4<f32>(x_1086.x, x_1086.y, x_1087.z, x_1087.w);
        let x_1090 : f32 = u_xlat12.y;
        u_xlat9.z = x_1090;
        let x_1093 : vec4<f32> = u_xlat7;
        let x_1096 : vec4<f32> = x_272.x_MainLightShadowmapSize;
        let x_1099 : vec4<f32> = u_xlat9;
        u_xlat16 = ((vec4<f32>(x_1093.x, x_1093.y, x_1093.x, x_1093.y) * vec4<f32>(x_1096.x, x_1096.y, x_1096.x, x_1096.y)) + vec4<f32>(x_1099.x, x_1099.y, x_1099.x, x_1099.z));
        let x_1103 : f32 = u_xlat10.w;
        u_xlat12.y = x_1103;
        let x_1106 : vec4<f32> = u_xlat7;
        let x_1109 : vec4<f32> = x_272.x_MainLightShadowmapSize;
        let x_1112 : vec4<f32> = u_xlat12;
        u_xlat17 = ((vec4<f32>(x_1106.x, x_1106.y, x_1106.x, x_1106.y) * vec4<f32>(x_1109.x, x_1109.y, x_1109.x, x_1109.y)) + vec4<f32>(x_1112.x, x_1112.y, x_1112.z, x_1112.y));
        let x_1116 : vec4<f32> = u_xlat7;
        let x_1119 : vec4<f32> = x_272.x_MainLightShadowmapSize;
        let x_1122 : vec4<f32> = u_xlat12;
        u_xlat30 = ((vec2<f32>(x_1116.x, x_1116.y) * vec2<f32>(x_1119.x, x_1119.y)) + vec2<f32>(x_1122.w, x_1122.y));
        let x_1126 : f32 = u_xlat12.y;
        u_xlat9.w = x_1126;
        let x_1129 : vec4<f32> = u_xlat7;
        let x_1132 : vec4<f32> = x_272.x_MainLightShadowmapSize;
        let x_1135 : vec4<f32> = u_xlat9;
        u_xlat57 = ((vec2<f32>(x_1129.x, x_1129.y) * vec2<f32>(x_1132.x, x_1132.y)) + vec2<f32>(x_1135.x, x_1135.w));
        let x_1138 : vec4<f32> = u_xlat12;
        let x_1139 : vec3<f32> = vec3<f32>(x_1138.x, x_1138.z, x_1138.w);
        let x_1140 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_1139.x, x_1140.y, x_1139.y, x_1139.z);
        let x_1142 : vec4<f32> = u_xlat7;
        let x_1145 : vec4<f32> = x_272.x_MainLightShadowmapSize;
        let x_1148 : vec4<f32> = u_xlat10;
        u_xlat12 = ((vec4<f32>(x_1142.x, x_1142.y, x_1142.x, x_1142.y) * vec4<f32>(x_1145.x, x_1145.y, x_1145.x, x_1145.y)) + vec4<f32>(x_1148.x, x_1148.y, x_1148.z, x_1148.y));
        let x_1152 : vec4<f32> = u_xlat7;
        let x_1155 : vec4<f32> = x_272.x_MainLightShadowmapSize;
        let x_1158 : vec4<f32> = u_xlat10;
        u_xlat52 = ((vec2<f32>(x_1152.x, x_1152.y) * vec2<f32>(x_1155.x, x_1155.y)) + vec2<f32>(x_1158.w, x_1158.y));
        let x_1162 : f32 = u_xlat9.x;
        u_xlat10.x = x_1162;
        let x_1164 : vec4<f32> = u_xlat7;
        let x_1167 : vec4<f32> = x_272.x_MainLightShadowmapSize;
        let x_1170 : vec4<f32> = u_xlat10;
        let x_1172 : vec2<f32> = ((vec2<f32>(x_1164.x, x_1164.y) * vec2<f32>(x_1167.x, x_1167.y)) + vec2<f32>(x_1170.x, x_1170.y));
        let x_1173 : vec4<f32> = u_xlat7;
        u_xlat7 = vec4<f32>(x_1172.x, x_1172.y, x_1173.z, x_1173.w);
        let x_1176 : vec4<f32> = u_xlat8;
        let x_1178 : vec4<f32> = u_xlat11;
        u_xlat18 = (vec4<f32>(x_1176.x, x_1176.x, x_1176.x, x_1176.x) * x_1178);
        let x_1181 : vec4<f32> = u_xlat8;
        let x_1183 : vec4<f32> = u_xlat11;
        u_xlat19 = (vec4<f32>(x_1181.y, x_1181.y, x_1181.y, x_1181.y) * x_1183);
        let x_1186 : vec4<f32> = u_xlat8;
        let x_1188 : vec4<f32> = u_xlat11;
        u_xlat20 = (vec4<f32>(x_1186.z, x_1186.z, x_1186.z, x_1186.z) * x_1188);
        let x_1190 : vec4<f32> = u_xlat8;
        let x_1192 : vec4<f32> = u_xlat11;
        u_xlat8 = (vec4<f32>(x_1190.w, x_1190.w, x_1190.w, x_1190.w) * x_1192);
        let x_1195 : vec4<f32> = u_xlat13;
        let x_1196 : vec2<f32> = vec2<f32>(x_1195.x, x_1195.y);
        let x_1198 : f32 = u_xlat6.z;
        txVec13 = vec3<f32>(x_1196.x, x_1196.y, x_1198);
        let x_1205 : vec3<f32> = txVec13;
        let x_1207 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1205.xy, x_1205.z);
        u_xlat65 = x_1207;
        let x_1209 : vec4<f32> = u_xlat13;
        let x_1210 : vec2<f32> = vec2<f32>(x_1209.z, x_1209.w);
        let x_1212 : f32 = u_xlat6.z;
        txVec14 = vec3<f32>(x_1210.x, x_1210.y, x_1212);
        let x_1219 : vec3<f32> = txVec14;
        let x_1221 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1219.xy, x_1219.z);
        u_xlat67 = x_1221;
        let x_1222 : f32 = u_xlat67;
        let x_1224 : f32 = u_xlat18.y;
        u_xlat67 = (x_1222 * x_1224);
        let x_1227 : f32 = u_xlat18.x;
        let x_1228 : f32 = u_xlat65;
        let x_1230 : f32 = u_xlat67;
        u_xlat65 = ((x_1227 * x_1228) + x_1230);
        let x_1233 : vec2<f32> = u_xlat49;
        let x_1235 : f32 = u_xlat6.z;
        txVec15 = vec3<f32>(x_1233.x, x_1233.y, x_1235);
        let x_1242 : vec3<f32> = txVec15;
        let x_1244 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1242.xy, x_1242.z);
        u_xlat67 = x_1244;
        let x_1246 : f32 = u_xlat18.z;
        let x_1247 : f32 = u_xlat67;
        let x_1249 : f32 = u_xlat65;
        u_xlat65 = ((x_1246 * x_1247) + x_1249);
        let x_1252 : vec4<f32> = u_xlat16;
        let x_1253 : vec2<f32> = vec2<f32>(x_1252.x, x_1252.y);
        let x_1255 : f32 = u_xlat6.z;
        txVec16 = vec3<f32>(x_1253.x, x_1253.y, x_1255);
        let x_1262 : vec3<f32> = txVec16;
        let x_1264 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1262.xy, x_1262.z);
        u_xlat67 = x_1264;
        let x_1266 : f32 = u_xlat18.w;
        let x_1267 : f32 = u_xlat67;
        let x_1269 : f32 = u_xlat65;
        u_xlat65 = ((x_1266 * x_1267) + x_1269);
        let x_1272 : vec4<f32> = u_xlat14;
        let x_1273 : vec2<f32> = vec2<f32>(x_1272.x, x_1272.y);
        let x_1275 : f32 = u_xlat6.z;
        txVec17 = vec3<f32>(x_1273.x, x_1273.y, x_1275);
        let x_1282 : vec3<f32> = txVec17;
        let x_1284 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1282.xy, x_1282.z);
        u_xlat67 = x_1284;
        let x_1286 : f32 = u_xlat19.x;
        let x_1287 : f32 = u_xlat67;
        let x_1289 : f32 = u_xlat65;
        u_xlat65 = ((x_1286 * x_1287) + x_1289);
        let x_1292 : vec4<f32> = u_xlat14;
        let x_1293 : vec2<f32> = vec2<f32>(x_1292.z, x_1292.w);
        let x_1295 : f32 = u_xlat6.z;
        txVec18 = vec3<f32>(x_1293.x, x_1293.y, x_1295);
        let x_1302 : vec3<f32> = txVec18;
        let x_1304 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1302.xy, x_1302.z);
        u_xlat67 = x_1304;
        let x_1306 : f32 = u_xlat19.y;
        let x_1307 : f32 = u_xlat67;
        let x_1309 : f32 = u_xlat65;
        u_xlat65 = ((x_1306 * x_1307) + x_1309);
        let x_1312 : vec4<f32> = u_xlat15;
        let x_1313 : vec2<f32> = vec2<f32>(x_1312.x, x_1312.y);
        let x_1315 : f32 = u_xlat6.z;
        txVec19 = vec3<f32>(x_1313.x, x_1313.y, x_1315);
        let x_1322 : vec3<f32> = txVec19;
        let x_1324 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1322.xy, x_1322.z);
        u_xlat67 = x_1324;
        let x_1326 : f32 = u_xlat19.z;
        let x_1327 : f32 = u_xlat67;
        let x_1329 : f32 = u_xlat65;
        u_xlat65 = ((x_1326 * x_1327) + x_1329);
        let x_1332 : vec4<f32> = u_xlat16;
        let x_1333 : vec2<f32> = vec2<f32>(x_1332.z, x_1332.w);
        let x_1335 : f32 = u_xlat6.z;
        txVec20 = vec3<f32>(x_1333.x, x_1333.y, x_1335);
        let x_1342 : vec3<f32> = txVec20;
        let x_1344 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1342.xy, x_1342.z);
        u_xlat67 = x_1344;
        let x_1346 : f32 = u_xlat19.w;
        let x_1347 : f32 = u_xlat67;
        let x_1349 : f32 = u_xlat65;
        u_xlat65 = ((x_1346 * x_1347) + x_1349);
        let x_1352 : vec4<f32> = u_xlat17;
        let x_1353 : vec2<f32> = vec2<f32>(x_1352.x, x_1352.y);
        let x_1355 : f32 = u_xlat6.z;
        txVec21 = vec3<f32>(x_1353.x, x_1353.y, x_1355);
        let x_1362 : vec3<f32> = txVec21;
        let x_1364 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1362.xy, x_1362.z);
        u_xlat67 = x_1364;
        let x_1366 : f32 = u_xlat20.x;
        let x_1367 : f32 = u_xlat67;
        let x_1369 : f32 = u_xlat65;
        u_xlat65 = ((x_1366 * x_1367) + x_1369);
        let x_1372 : vec4<f32> = u_xlat17;
        let x_1373 : vec2<f32> = vec2<f32>(x_1372.z, x_1372.w);
        let x_1375 : f32 = u_xlat6.z;
        txVec22 = vec3<f32>(x_1373.x, x_1373.y, x_1375);
        let x_1382 : vec3<f32> = txVec22;
        let x_1384 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1382.xy, x_1382.z);
        u_xlat67 = x_1384;
        let x_1386 : f32 = u_xlat20.y;
        let x_1387 : f32 = u_xlat67;
        let x_1389 : f32 = u_xlat65;
        u_xlat65 = ((x_1386 * x_1387) + x_1389);
        let x_1392 : vec2<f32> = u_xlat30;
        let x_1394 : f32 = u_xlat6.z;
        txVec23 = vec3<f32>(x_1392.x, x_1392.y, x_1394);
        let x_1401 : vec3<f32> = txVec23;
        let x_1403 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1401.xy, x_1401.z);
        u_xlat67 = x_1403;
        let x_1405 : f32 = u_xlat20.z;
        let x_1406 : f32 = u_xlat67;
        let x_1408 : f32 = u_xlat65;
        u_xlat65 = ((x_1405 * x_1406) + x_1408);
        let x_1411 : vec2<f32> = u_xlat57;
        let x_1413 : f32 = u_xlat6.z;
        txVec24 = vec3<f32>(x_1411.x, x_1411.y, x_1413);
        let x_1420 : vec3<f32> = txVec24;
        let x_1422 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1420.xy, x_1420.z);
        u_xlat67 = x_1422;
        let x_1424 : f32 = u_xlat20.w;
        let x_1425 : f32 = u_xlat67;
        let x_1427 : f32 = u_xlat65;
        u_xlat65 = ((x_1424 * x_1425) + x_1427);
        let x_1430 : vec4<f32> = u_xlat12;
        let x_1431 : vec2<f32> = vec2<f32>(x_1430.x, x_1430.y);
        let x_1433 : f32 = u_xlat6.z;
        txVec25 = vec3<f32>(x_1431.x, x_1431.y, x_1433);
        let x_1440 : vec3<f32> = txVec25;
        let x_1442 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1440.xy, x_1440.z);
        u_xlat67 = x_1442;
        let x_1444 : f32 = u_xlat8.x;
        let x_1445 : f32 = u_xlat67;
        let x_1447 : f32 = u_xlat65;
        u_xlat65 = ((x_1444 * x_1445) + x_1447);
        let x_1450 : vec4<f32> = u_xlat12;
        let x_1451 : vec2<f32> = vec2<f32>(x_1450.z, x_1450.w);
        let x_1453 : f32 = u_xlat6.z;
        txVec26 = vec3<f32>(x_1451.x, x_1451.y, x_1453);
        let x_1460 : vec3<f32> = txVec26;
        let x_1462 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1460.xy, x_1460.z);
        u_xlat67 = x_1462;
        let x_1464 : f32 = u_xlat8.y;
        let x_1465 : f32 = u_xlat67;
        let x_1467 : f32 = u_xlat65;
        u_xlat65 = ((x_1464 * x_1465) + x_1467);
        let x_1470 : vec2<f32> = u_xlat52;
        let x_1472 : f32 = u_xlat6.z;
        txVec27 = vec3<f32>(x_1470.x, x_1470.y, x_1472);
        let x_1479 : vec3<f32> = txVec27;
        let x_1481 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1479.xy, x_1479.z);
        u_xlat67 = x_1481;
        let x_1483 : f32 = u_xlat8.z;
        let x_1484 : f32 = u_xlat67;
        let x_1486 : f32 = u_xlat65;
        u_xlat65 = ((x_1483 * x_1484) + x_1486);
        let x_1489 : vec4<f32> = u_xlat7;
        let x_1490 : vec2<f32> = vec2<f32>(x_1489.x, x_1489.y);
        let x_1492 : f32 = u_xlat6.z;
        txVec28 = vec3<f32>(x_1490.x, x_1490.y, x_1492);
        let x_1499 : vec3<f32> = txVec28;
        let x_1501 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1499.xy, x_1499.z);
        u_xlat67 = x_1501;
        let x_1503 : f32 = u_xlat8.w;
        let x_1504 : f32 = u_xlat67;
        let x_1506 : f32 = u_xlat65;
        u_xlat64 = ((x_1503 * x_1504) + x_1506);
      }
    }
  } else {
    let x_1510 : vec4<f32> = u_xlat6;
    let x_1511 : vec2<f32> = vec2<f32>(x_1510.x, x_1510.y);
    let x_1513 : f32 = u_xlat6.z;
    txVec29 = vec3<f32>(x_1511.x, x_1511.y, x_1513);
    let x_1520 : vec3<f32> = txVec29;
    let x_1522 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1520.xy, x_1520.z);
    u_xlat64 = x_1522;
  }
  let x_1524 : f32 = x_272.x_MainLightShadowParams.x;
  u_xlat65 = (-(x_1524) + 1.0f);
  let x_1527 : f32 = u_xlat64;
  let x_1529 : f32 = x_272.x_MainLightShadowParams.x;
  let x_1531 : f32 = u_xlat65;
  u_xlat64 = ((x_1527 * x_1529) + x_1531);
  let x_1535 : f32 = u_xlat6.z;
  u_xlatb67 = (0.0f >= x_1535);
  let x_1539 : f32 = u_xlat6.z;
  u_xlatb6 = (x_1539 >= 1.0f);
  let x_1541 : bool = u_xlatb67;
  let x_1542 : bool = u_xlatb6;
  u_xlatb67 = (x_1541 | x_1542);
  let x_1544 : bool = u_xlatb67;
  let x_1545 : f32 = u_xlat64;
  u_xlat64 = select(x_1545, 1.0f, x_1544);
  let x_1547 : vec3<f32> = u_xlat0;
  let x_1549 : vec4<f32> = x_90.x_MainLightPosition;
  u_xlat0.x = dot(x_1547, -(vec3<f32>(x_1549.x, x_1549.y, x_1549.z)));
  let x_1555 : f32 = u_xlat0.x;
  u_xlat0.x = clamp(x_1555, 0.0f, 1.0f);
  let x_1558 : f32 = u_xlat64;
  let x_1562 : vec4<f32> = x_90.x_MainLightColor;
  let x_1564 : vec3<f32> = (vec3<f32>(x_1558, x_1558, x_1558) * vec3<f32>(x_1562.x, x_1562.y, x_1562.z));
  let x_1565 : vec4<f32> = u_xlat6;
  u_xlat6 = vec4<f32>(x_1564.x, x_1564.y, x_1564.z, x_1565.w);
  let x_1567 : vec3<f32> = u_xlat0;
  let x_1569 : vec4<f32> = u_xlat6;
  u_xlat0 = (vec3<f32>(x_1567.x, x_1567.x, x_1567.x) * vec3<f32>(x_1569.x, x_1569.y, x_1569.z));
  let x_1572 : vec3<f32> = u_xlat0;
  let x_1573 : vec4<f32> = u_xlat3;
  u_xlat0 = (x_1572 * vec3<f32>(x_1573.x, x_1573.y, x_1573.z));
  let x_1577 : f32 = x_161.unity_LODFade.x;
  u_xlatb64 = (x_1577 < 0.0f);
  let x_1580 : f32 = x_161.unity_LODFade.x;
  u_xlat3.x = (x_1580 + 1.0f);
  let x_1583 : bool = u_xlatb64;
  if (x_1583) {
    let x_1588 : f32 = u_xlat3.x;
    x_1584 = x_1588;
  } else {
    let x_1591 : f32 = x_161.unity_LODFade.x;
    x_1584 = x_1591;
  }
  let x_1592 : f32 = x_1584;
  u_xlat64 = x_1592;
  let x_1594 : f32 = u_xlat64;
  u_xlatb3 = (0.5f >= x_1594);
  let x_1596 : vec3<f32> = u_xlat1;
  let x_1600 : vec4<f32> = x_90.x_ScreenParams;
  u_xlat1 = (abs(x_1596) * vec3<f32>(x_1600.x, x_1600.y, x_1600.x));
  let x_1606 : vec3<f32> = u_xlat1;
  u_xlatu1 = vec3<u32>(x_1606);
  let x_1610 : u32 = u_xlatu1.z;
  u_xlatu43 = (x_1610 * 1025u);
  let x_1614 : u32 = u_xlatu43;
  u_xlatu24 = (x_1614 >> 6u);
  let x_1618 : u32 = u_xlatu43;
  let x_1619 : u32 = u_xlatu24;
  u_xlati43 = bitcast<i32>((x_1618 ^ x_1619));
  let x_1622 : i32 = u_xlati43;
  u_xlatu43 = (bitcast<u32>(x_1622) * 9u);
  let x_1626 : u32 = u_xlatu43;
  u_xlatu24 = (x_1626 >> 11u);
  let x_1629 : u32 = u_xlatu43;
  let x_1630 : u32 = u_xlatu24;
  u_xlati43 = bitcast<i32>((x_1629 ^ x_1630));
  let x_1633 : i32 = u_xlati43;
  u_xlati43 = (x_1633 * 32769i);
  let x_1637 : i32 = u_xlati43;
  let x_1640 : u32 = u_xlatu1.y;
  u_xlati22 = bitcast<i32>((bitcast<u32>(x_1637) ^ x_1640));
  let x_1644 : i32 = u_xlati22;
  u_xlatu22 = (bitcast<u32>(x_1644) * 1025u);
  let x_1647 : u32 = u_xlatu22;
  u_xlatu43 = (x_1647 >> 6u);
  let x_1649 : u32 = u_xlatu43;
  let x_1650 : u32 = u_xlatu22;
  u_xlati22 = bitcast<i32>((x_1649 ^ x_1650));
  let x_1653 : i32 = u_xlati22;
  u_xlatu22 = (bitcast<u32>(x_1653) * 9u);
  let x_1656 : u32 = u_xlatu22;
  u_xlatu43 = (x_1656 >> 11u);
  let x_1658 : u32 = u_xlatu43;
  let x_1659 : u32 = u_xlatu22;
  u_xlati22 = bitcast<i32>((x_1658 ^ x_1659));
  let x_1662 : i32 = u_xlati22;
  u_xlati22 = (x_1662 * 32769i);
  let x_1665 : i32 = u_xlati22;
  let x_1668 : u32 = u_xlatu1.x;
  u_xlati1 = bitcast<i32>((bitcast<u32>(x_1665) ^ x_1668));
  let x_1671 : i32 = u_xlati1;
  u_xlatu1.x = (bitcast<u32>(x_1671) * 1025u);
  let x_1676 : u32 = u_xlatu1.x;
  u_xlatu22 = (x_1676 >> 6u);
  let x_1678 : u32 = u_xlatu22;
  let x_1680 : u32 = u_xlatu1.x;
  u_xlati1 = bitcast<i32>((x_1678 ^ x_1680));
  let x_1683 : i32 = u_xlati1;
  u_xlatu1.x = (bitcast<u32>(x_1683) * 9u);
  let x_1688 : u32 = u_xlatu1.x;
  u_xlatu22 = (x_1688 >> 11u);
  let x_1690 : u32 = u_xlatu22;
  let x_1692 : u32 = u_xlatu1.x;
  u_xlati1 = bitcast<i32>((x_1690 ^ x_1692));
  let x_1695 : i32 = u_xlati1;
  u_xlati1 = (x_1695 * 32769i);
  param = 1065353216i;
  let x_1701 : i32 = u_xlati1;
  param_1 = x_1701;
  param_2 = 0i;
  param_3 = 23i;
  let x_1704 : i32 = int_bitfieldInsert_i1_i1_i1_i1_(&(param), &(param_1), &(param_2), &(param_3));
  u_xlat1.x = bitcast<f32>(x_1704);
  let x_1708 : f32 = u_xlat1.x;
  u_xlat1.x = (x_1708 + -1.0f);
  let x_1713 : f32 = u_xlat1.x;
  u_xlat22 = (-(x_1713) + 1.0f);
  let x_1716 : bool = u_xlatb3;
  if (x_1716) {
    let x_1721 : f32 = u_xlat1.x;
    x_1717 = x_1721;
  } else {
    let x_1723 : f32 = u_xlat22;
    x_1717 = x_1723;
  }
  let x_1724 : f32 = x_1717;
  u_xlat1.x = x_1724;
  let x_1726 : f32 = u_xlat64;
  let x_1729 : f32 = u_xlat1.x;
  u_xlat1.x = ((x_1726 * 2.0f) + -(x_1729));
  let x_1734 : f32 = u_xlat1.x;
  let x_1736 : f32 = u_xlat3.w;
  u_xlat22 = (x_1734 * x_1736);
  let x_1741 : f32 = u_xlat22;
  u_xlatb43.x = (x_1741 >= 0.400000006f);
  let x_1747 : bool = u_xlatb43.x;
  let x_1748 : f32 = u_xlat22;
  u_xlat43.x = select(0.0f, x_1748, x_1747);
  let x_1752 : f32 = u_xlat3.w;
  let x_1754 : f32 = u_xlat1.x;
  u_xlat1.x = ((x_1752 * x_1754) + -0.400000006f);
  let x_1759 : f32 = u_xlat22;
  u_xlat64 = dpdxCoarse(x_1759);
  let x_1761 : f32 = u_xlat22;
  u_xlat22 = dpdyCoarse(x_1761);
  let x_1763 : f32 = u_xlat22;
  let x_1765 : f32 = u_xlat64;
  u_xlat22 = (abs(x_1763) + abs(x_1765));
  let x_1768 : f32 = u_xlat22;
  u_xlat22 = max(x_1768, 0.0001f);
  let x_1772 : f32 = u_xlat1.x;
  let x_1773 : f32 = u_xlat22;
  u_xlat1.x = (x_1772 / x_1773);
  let x_1777 : f32 = u_xlat1.x;
  u_xlat1.x = (x_1777 + 0.5f);
  let x_1781 : f32 = u_xlat1.x;
  u_xlat1.x = clamp(x_1781, 0.0f, 1.0f);
  let x_1786 : f32 = x_90.x_AlphaToMaskAvailable;
  u_xlatb22 = !((x_1786 == 0.0f));
  let x_1788 : bool = u_xlatb22;
  if (x_1788) {
    let x_1793 : f32 = u_xlat1.x;
    x_1789 = x_1793;
  } else {
    let x_1796 : f32 = u_xlat43.x;
    x_1789 = x_1796;
  }
  let x_1797 : f32 = x_1789;
  u_xlat1.x = x_1797;
  let x_1800 : f32 = u_xlat1.x;
  u_xlat43.x = (x_1800 + -0.0001f);
  let x_1805 : f32 = u_xlat43.x;
  u_xlatb43.x = (x_1805 < 0.0f);
  let x_1809 : bool = u_xlatb43.x;
  if (((select(0i, 1i, x_1809) * -1i) != 0i)) {
    discard;
  }
  let x_1819 : f32 = vs_INTERP2.w;
  u_xlatb43.x = (0.0f < x_1819);
  let x_1823 : f32 = x_161.unity_WorldTransformParams.w;
  u_xlatb43.y = (x_1823 >= 0.0f);
  let x_1827 : bool = u_xlatb43.x;
  u_xlat43.x = select(-1.0f, 1.0f, x_1827);
  let x_1831 : bool = u_xlatb43.y;
  u_xlat43.y = select(-1.0f, 1.0f, x_1831);
  let x_1835 : f32 = u_xlat43.y;
  let x_1837 : f32 = u_xlat43.x;
  u_xlat43.x = (x_1835 * x_1837);
  let x_1840 : vec3<f32> = vs_INTERP1;
  let x_1842 : vec4<f32> = vs_INTERP2;
  let x_1844 : vec3<f32> = (vec3<f32>(x_1840.z, x_1840.x, x_1840.y) * vec3<f32>(x_1842.y, x_1842.z, x_1842.x));
  let x_1845 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_1844.x, x_1844.y, x_1844.z, x_1845.w);
  let x_1847 : vec3<f32> = vs_INTERP1;
  let x_1849 : vec4<f32> = vs_INTERP2;
  let x_1852 : vec4<f32> = u_xlat3;
  let x_1855 : vec3<f32> = ((vec3<f32>(x_1847.y, x_1847.z, x_1847.x) * vec3<f32>(x_1849.z, x_1849.x, x_1849.y)) + -(vec3<f32>(x_1852.x, x_1852.y, x_1852.z)));
  let x_1856 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_1855.x, x_1855.y, x_1855.z, x_1856.w);
  let x_1858 : vec2<f32> = u_xlat43;
  let x_1860 : vec4<f32> = u_xlat3;
  let x_1862 : vec3<f32> = (vec3<f32>(x_1858.x, x_1858.x, x_1858.x) * vec3<f32>(x_1860.x, x_1860.y, x_1860.z));
  let x_1863 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_1862.x, x_1862.y, x_1862.z, x_1863.w);
  let x_1865 : vec4<f32> = u_xlat3;
  let x_1867 : vec3<f32> = u_xlat26;
  let x_1869 : vec3<f32> = (vec3<f32>(x_1865.x, x_1865.y, x_1865.z) * vec3<f32>(x_1867.y, x_1867.y, x_1867.y));
  let x_1870 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_1869.x, x_1869.y, x_1869.z, x_1870.w);
  let x_1872 : vec3<f32> = u_xlat26;
  let x_1874 : vec4<f32> = vs_INTERP2;
  let x_1877 : vec4<f32> = u_xlat3;
  let x_1879 : vec3<f32> = ((vec3<f32>(x_1872.x, x_1872.x, x_1872.x) * vec3<f32>(x_1874.x, x_1874.y, x_1874.z)) + vec3<f32>(x_1877.x, x_1877.y, x_1877.z));
  let x_1880 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_1879.x, x_1879.y, x_1879.z, x_1880.w);
  let x_1882 : vec3<f32> = u_xlat26;
  let x_1884 : vec3<f32> = vs_INTERP1;
  let x_1886 : vec4<f32> = u_xlat3;
  let x_1888 : vec3<f32> = ((vec3<f32>(x_1882.z, x_1882.z, x_1882.z) * x_1884) + vec3<f32>(x_1886.x, x_1886.y, x_1886.z));
  let x_1889 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_1888.x, x_1888.y, x_1888.z, x_1889.w);
  let x_1891 : vec4<f32> = u_xlat3;
  let x_1893 : vec4<f32> = u_xlat3;
  u_xlat43.x = dot(vec3<f32>(x_1891.x, x_1891.y, x_1891.z), vec3<f32>(x_1893.x, x_1893.y, x_1893.z));
  let x_1898 : f32 = u_xlat43.x;
  u_xlat43.x = inverseSqrt(x_1898);
  let x_1901 : vec2<f32> = u_xlat43;
  let x_1903 : vec4<f32> = u_xlat3;
  let x_1905 : vec3<f32> = (vec3<f32>(x_1901.x, x_1901.x, x_1901.x) * vec3<f32>(x_1903.x, x_1903.y, x_1903.z));
  let x_1906 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_1905.x, x_1905.y, x_1905.z, x_1906.w);
  let x_1915 : vec2<f32> = vs_INTERP5;
  let x_1917 : f32 = x_90.x_GlobalMipBias.x;
  let x_1918 : vec4<f32> = textureSampleBias(unity_Lightmap, samplerunity_Lightmap, x_1915, x_1917);
  u_xlat26 = vec3<f32>(x_1918.x, x_1918.y, x_1918.z);
  let x_1921 : vec4<f32> = x_90.x_ScaledScreenParams;
  let x_1922 : vec2<f32> = vec2<f32>(x_1921.x, x_1921.y);
  u_xlat43 = (vec2<f32>(1.0f, 1.0f) / vec2<f32>(x_1922.x, x_1922.y));
  let x_1927 : vec2<f32> = u_xlat43;
  let x_1928 : vec4<f32> = hlslcc_FragCoord;
  let x_1930 : vec2<f32> = (x_1927 * vec2<f32>(x_1928.x, x_1928.y));
  let x_1931 : vec4<f32> = u_xlat6;
  u_xlat6 = vec4<f32>(x_1930.x, x_1930.y, x_1931.z, x_1931.w);
  let x_1934 : f32 = u_xlat6.y;
  let x_1937 : f32 = x_90.x_ScaleBiasRt.x;
  let x_1940 : f32 = x_90.x_ScaleBiasRt.y;
  u_xlat43.x = ((x_1934 * x_1937) + x_1940);
  let x_1944 : f32 = u_xlat43.x;
  u_xlat6.z = (-(x_1944) + 1.0f);
  let x_1949 : f32 = u_xlat5.x;
  u_xlat5.x = x_1949;
  let x_1952 : f32 = u_xlat5.x;
  u_xlat5.x = clamp(x_1952, 0.0f, 1.0f);
  let x_1956 : f32 = u_xlat1.x;
  u_xlat1.x = x_1956;
  let x_1959 : f32 = u_xlat1.x;
  u_xlat1.x = clamp(x_1959, 0.0f, 1.0f);
  let x_1962 : vec3<f32> = u_xlat4;
  u_xlat4 = (x_1962 * vec3<f32>(0.959999979f, 0.959999979f, 0.959999979f));
  let x_1967 : f32 = u_xlat5.x;
  u_xlat43.x = (-(x_1967) + 1.0f);
  let x_1972 : f32 = u_xlat43.x;
  let x_1974 : f32 = u_xlat43.x;
  u_xlat64 = (x_1972 * x_1974);
  let x_1976 : f32 = u_xlat64;
  u_xlat64 = max(x_1976, 0.0078125f);
  let x_1980 : f32 = u_xlat64;
  let x_1981 : f32 = u_xlat64;
  u_xlat66 = (x_1980 * x_1981);
  let x_1984 : f32 = u_xlat5.x;
  u_xlat67 = (x_1984 + 0.040000021f);
  let x_1987 : f32 = u_xlat67;
  u_xlat67 = min(x_1987, 1.0f);
  let x_1989 : f32 = u_xlat64;
  u_xlat5.x = ((x_1989 * 4.0f) + 2.0f);
  let x_1999 : vec4<f32> = u_xlat6;
  let x_2002 : f32 = x_90.x_GlobalMipBias.x;
  let x_2003 : vec4<f32> = textureSampleBias(x_ScreenSpaceOcclusionTexture, sampler_ScreenSpaceOcclusionTexture, vec2<f32>(x_1999.x, x_1999.z), x_2002);
  u_xlat6.x = x_2003.x;
  let x_2008 : f32 = u_xlat6.x;
  u_xlat27 = (x_2008 + -1.0f);
  let x_2012 : f32 = x_90.x_AmbientOcclusionParam.w;
  let x_2013 : f32 = u_xlat27;
  u_xlat27 = ((x_2012 * x_2013) + 1.0f);
  let x_2017 : f32 = u_xlat6.x;
  let x_2019 : f32 = vs_INTERP4.w;
  u_xlat6.x = min(x_2017, x_2019);
  let x_2022 : bool = u_xlatb63;
  if (x_2022) {
    let x_2026 : f32 = x_272.x_MainLightShadowParams.y;
    u_xlatb63 = (x_2026 == 1.0f);
    let x_2028 : bool = u_xlatb63;
    if (x_2028) {
      let x_2032 : vec4<f32> = vs_INTERP9;
      let x_2035 : vec4<f32> = x_272.x_MainLightShadowOffset0;
      u_xlat7 = (vec4<f32>(x_2032.x, x_2032.y, x_2032.x, x_2032.y) + x_2035);
      let x_2038 : vec4<f32> = u_xlat7;
      let x_2039 : vec2<f32> = vec2<f32>(x_2038.x, x_2038.y);
      let x_2041 : f32 = vs_INTERP9.z;
      txVec30 = vec3<f32>(x_2039.x, x_2039.y, x_2041);
      let x_2048 : vec3<f32> = txVec30;
      let x_2050 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2048.xy, x_2048.z);
      u_xlat8.x = x_2050;
      let x_2053 : vec4<f32> = u_xlat7;
      let x_2054 : vec2<f32> = vec2<f32>(x_2053.z, x_2053.w);
      let x_2056 : f32 = vs_INTERP9.z;
      txVec31 = vec3<f32>(x_2054.x, x_2054.y, x_2056);
      let x_2063 : vec3<f32> = txVec31;
      let x_2065 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2063.xy, x_2063.z);
      u_xlat8.y = x_2065;
      let x_2067 : vec4<f32> = vs_INTERP9;
      let x_2070 : vec4<f32> = x_272.x_MainLightShadowOffset1;
      u_xlat7 = (vec4<f32>(x_2067.x, x_2067.y, x_2067.x, x_2067.y) + x_2070);
      let x_2073 : vec4<f32> = u_xlat7;
      let x_2074 : vec2<f32> = vec2<f32>(x_2073.x, x_2073.y);
      let x_2076 : f32 = vs_INTERP9.z;
      txVec32 = vec3<f32>(x_2074.x, x_2074.y, x_2076);
      let x_2083 : vec3<f32> = txVec32;
      let x_2085 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2083.xy, x_2083.z);
      u_xlat8.z = x_2085;
      let x_2088 : vec4<f32> = u_xlat7;
      let x_2089 : vec2<f32> = vec2<f32>(x_2088.z, x_2088.w);
      let x_2091 : f32 = vs_INTERP9.z;
      txVec33 = vec3<f32>(x_2089.x, x_2089.y, x_2091);
      let x_2098 : vec3<f32> = txVec33;
      let x_2100 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2098.xy, x_2098.z);
      u_xlat8.w = x_2100;
      let x_2102 : vec4<f32> = u_xlat8;
      u_xlat63 = dot(x_2102, vec4<f32>(0.25f, 0.25f, 0.25f, 0.25f));
    } else {
      let x_2107 : f32 = x_272.x_MainLightShadowParams.y;
      u_xlatb48 = (x_2107 == 2.0f);
      let x_2109 : bool = u_xlatb48;
      if (x_2109) {
        let x_2113 : vec4<f32> = vs_INTERP9;
        let x_2116 : vec4<f32> = x_272.x_MainLightShadowmapSize;
        u_xlat48 = ((vec2<f32>(x_2113.x, x_2113.y) * vec2<f32>(x_2116.z, x_2116.w)) + vec2<f32>(0.5f, 0.5f));
        let x_2120 : vec2<f32> = u_xlat48;
        u_xlat48 = floor(x_2120);
        let x_2122 : vec4<f32> = vs_INTERP9;
        let x_2125 : vec4<f32> = x_272.x_MainLightShadowmapSize;
        let x_2128 : vec2<f32> = u_xlat48;
        let x_2130 : vec2<f32> = ((vec2<f32>(x_2122.x, x_2122.y) * vec2<f32>(x_2125.z, x_2125.w)) + -(x_2128));
        let x_2131 : vec4<f32> = u_xlat7;
        u_xlat7 = vec4<f32>(x_2130.x, x_2130.y, x_2131.z, x_2131.w);
        let x_2133 : vec4<f32> = u_xlat7;
        u_xlat8 = (vec4<f32>(x_2133.x, x_2133.x, x_2133.y, x_2133.y) + vec4<f32>(0.5f, 1.0f, 0.5f, 1.0f));
        let x_2136 : vec4<f32> = u_xlat8;
        let x_2138 : vec4<f32> = u_xlat8;
        u_xlat9 = (vec4<f32>(x_2136.x, x_2136.x, x_2136.z, x_2136.z) * vec4<f32>(x_2138.x, x_2138.x, x_2138.z, x_2138.z));
        let x_2141 : vec4<f32> = u_xlat9;
        u_xlat49 = (vec2<f32>(x_2141.y, x_2141.w) * vec2<f32>(0.079999998f, 0.079999998f));
        let x_2144 : vec4<f32> = u_xlat9;
        let x_2147 : vec4<f32> = u_xlat7;
        let x_2150 : vec2<f32> = ((vec2<f32>(x_2144.x, x_2144.z) * vec2<f32>(0.5f, 0.5f)) + -(vec2<f32>(x_2147.x, x_2147.y)));
        let x_2151 : vec4<f32> = u_xlat8;
        u_xlat8 = vec4<f32>(x_2150.x, x_2151.y, x_2150.y, x_2151.w);
        let x_2153 : vec4<f32> = u_xlat7;
        let x_2156 : vec2<f32> = (-(vec2<f32>(x_2153.x, x_2153.y)) + vec2<f32>(1.0f, 1.0f));
        let x_2157 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_2156.x, x_2156.y, x_2157.z, x_2157.w);
        let x_2159 : vec4<f32> = u_xlat7;
        u_xlat51 = min(vec2<f32>(x_2159.x, x_2159.y), vec2<f32>(0.0f, 0.0f));
        let x_2162 : vec2<f32> = u_xlat51;
        let x_2164 : vec2<f32> = u_xlat51;
        let x_2166 : vec4<f32> = u_xlat9;
        u_xlat51 = ((-(x_2162) * x_2164) + vec2<f32>(x_2166.x, x_2166.y));
        let x_2169 : vec4<f32> = u_xlat7;
        let x_2171 : vec2<f32> = max(vec2<f32>(x_2169.x, x_2169.y), vec2<f32>(0.0f, 0.0f));
        let x_2172 : vec4<f32> = u_xlat7;
        u_xlat7 = vec4<f32>(x_2171.x, x_2171.y, x_2172.z, x_2172.w);
        let x_2174 : vec4<f32> = u_xlat7;
        let x_2177 : vec4<f32> = u_xlat7;
        let x_2180 : vec4<f32> = u_xlat8;
        let x_2182 : vec2<f32> = ((-(vec2<f32>(x_2174.x, x_2174.y)) * vec2<f32>(x_2177.x, x_2177.y)) + vec2<f32>(x_2180.y, x_2180.w));
        let x_2183 : vec4<f32> = u_xlat7;
        u_xlat7 = vec4<f32>(x_2182.x, x_2182.y, x_2183.z, x_2183.w);
        let x_2185 : vec2<f32> = u_xlat51;
        u_xlat51 = (x_2185 + vec2<f32>(1.0f, 1.0f));
        let x_2187 : vec4<f32> = u_xlat7;
        let x_2189 : vec2<f32> = (vec2<f32>(x_2187.x, x_2187.y) + vec2<f32>(1.0f, 1.0f));
        let x_2190 : vec4<f32> = u_xlat7;
        u_xlat7 = vec4<f32>(x_2189.x, x_2189.y, x_2190.z, x_2190.w);
        let x_2192 : vec4<f32> = u_xlat8;
        let x_2194 : vec2<f32> = (vec2<f32>(x_2192.x, x_2192.z) * vec2<f32>(0.159999996f, 0.159999996f));
        let x_2195 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_2194.x, x_2194.y, x_2195.z, x_2195.w);
        let x_2197 : vec4<f32> = u_xlat9;
        let x_2199 : vec2<f32> = (vec2<f32>(x_2197.x, x_2197.y) * vec2<f32>(0.159999996f, 0.159999996f));
        let x_2200 : vec4<f32> = u_xlat11;
        u_xlat11 = vec4<f32>(x_2199.x, x_2199.y, x_2200.z, x_2200.w);
        let x_2202 : vec2<f32> = u_xlat51;
        let x_2203 : vec2<f32> = (x_2202 * vec2<f32>(0.159999996f, 0.159999996f));
        let x_2204 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_2203.x, x_2203.y, x_2204.z, x_2204.w);
        let x_2206 : vec4<f32> = u_xlat7;
        let x_2208 : vec2<f32> = (vec2<f32>(x_2206.x, x_2206.y) * vec2<f32>(0.159999996f, 0.159999996f));
        let x_2209 : vec4<f32> = u_xlat12;
        u_xlat12 = vec4<f32>(x_2208.x, x_2208.y, x_2209.z, x_2209.w);
        let x_2211 : vec4<f32> = u_xlat8;
        let x_2213 : vec2<f32> = (vec2<f32>(x_2211.y, x_2211.w) * vec2<f32>(0.159999996f, 0.159999996f));
        let x_2214 : vec4<f32> = u_xlat7;
        u_xlat7 = vec4<f32>(x_2213.x, x_2213.y, x_2214.z, x_2214.w);
        let x_2217 : f32 = u_xlat9.x;
        u_xlat10.z = x_2217;
        let x_2220 : f32 = u_xlat7.x;
        u_xlat10.w = x_2220;
        let x_2223 : f32 = u_xlat12.x;
        u_xlat11.z = x_2223;
        let x_2226 : f32 = u_xlat49.x;
        u_xlat11.w = x_2226;
        let x_2228 : vec4<f32> = u_xlat10;
        let x_2230 : vec4<f32> = u_xlat11;
        u_xlat8 = (vec4<f32>(x_2228.z, x_2228.w, x_2228.x, x_2228.z) + vec4<f32>(x_2230.z, x_2230.w, x_2230.x, x_2230.z));
        let x_2234 : f32 = u_xlat10.y;
        u_xlat9.z = x_2234;
        let x_2237 : f32 = u_xlat7.y;
        u_xlat9.w = x_2237;
        let x_2240 : f32 = u_xlat11.y;
        u_xlat12.z = x_2240;
        let x_2243 : f32 = u_xlat49.y;
        u_xlat12.w = x_2243;
        let x_2245 : vec4<f32> = u_xlat9;
        let x_2247 : vec4<f32> = u_xlat12;
        let x_2249 : vec3<f32> = (vec3<f32>(x_2245.z, x_2245.y, x_2245.w) + vec3<f32>(x_2247.z, x_2247.y, x_2247.w));
        let x_2250 : vec4<f32> = u_xlat7;
        u_xlat7 = vec4<f32>(x_2249.x, x_2249.y, x_2249.z, x_2250.w);
        let x_2252 : vec4<f32> = u_xlat11;
        let x_2254 : vec4<f32> = u_xlat8;
        let x_2256 : vec3<f32> = (vec3<f32>(x_2252.x, x_2252.z, x_2252.w) / vec3<f32>(x_2254.z, x_2254.w, x_2254.y));
        let x_2257 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_2256.x, x_2256.y, x_2256.z, x_2257.w);
        let x_2259 : vec4<f32> = u_xlat9;
        let x_2261 : vec3<f32> = (vec3<f32>(x_2259.x, x_2259.y, x_2259.z) + vec3<f32>(-2.5f, -0.5f, 1.5f));
        let x_2262 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_2261.x, x_2261.y, x_2261.z, x_2262.w);
        let x_2264 : vec4<f32> = u_xlat12;
        let x_2266 : vec4<f32> = u_xlat7;
        let x_2268 : vec3<f32> = (vec3<f32>(x_2264.z, x_2264.y, x_2264.w) / vec3<f32>(x_2266.x, x_2266.y, x_2266.z));
        let x_2269 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_2268.x, x_2268.y, x_2268.z, x_2269.w);
        let x_2271 : vec4<f32> = u_xlat10;
        let x_2273 : vec3<f32> = (vec3<f32>(x_2271.x, x_2271.y, x_2271.z) + vec3<f32>(-2.5f, -0.5f, 1.5f));
        let x_2274 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_2273.x, x_2273.y, x_2273.z, x_2274.w);
        let x_2276 : vec4<f32> = u_xlat9;
        let x_2279 : vec4<f32> = x_272.x_MainLightShadowmapSize;
        let x_2281 : vec3<f32> = (vec3<f32>(x_2276.y, x_2276.x, x_2276.z) * vec3<f32>(x_2279.x, x_2279.x, x_2279.x));
        let x_2282 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_2281.x, x_2281.y, x_2281.z, x_2282.w);
        let x_2284 : vec4<f32> = u_xlat10;
        let x_2287 : vec4<f32> = x_272.x_MainLightShadowmapSize;
        let x_2289 : vec3<f32> = (vec3<f32>(x_2284.x, x_2284.y, x_2284.z) * vec3<f32>(x_2287.y, x_2287.y, x_2287.y));
        let x_2290 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_2289.x, x_2289.y, x_2289.z, x_2290.w);
        let x_2293 : f32 = u_xlat10.x;
        u_xlat9.w = x_2293;
        let x_2295 : vec2<f32> = u_xlat48;
        let x_2298 : vec4<f32> = x_272.x_MainLightShadowmapSize;
        let x_2301 : vec4<f32> = u_xlat9;
        u_xlat11 = ((vec4<f32>(x_2295.x, x_2295.y, x_2295.x, x_2295.y) * vec4<f32>(x_2298.x, x_2298.y, x_2298.x, x_2298.y)) + vec4<f32>(x_2301.y, x_2301.w, x_2301.x, x_2301.w));
        let x_2304 : vec2<f32> = u_xlat48;
        let x_2306 : vec4<f32> = x_272.x_MainLightShadowmapSize;
        let x_2309 : vec4<f32> = u_xlat9;
        let x_2311 : vec2<f32> = ((x_2304 * vec2<f32>(x_2306.x, x_2306.y)) + vec2<f32>(x_2309.z, x_2309.w));
        let x_2312 : vec4<f32> = u_xlat12;
        u_xlat12 = vec4<f32>(x_2311.x, x_2311.y, x_2312.z, x_2312.w);
        let x_2315 : f32 = u_xlat9.y;
        u_xlat10.w = x_2315;
        let x_2317 : vec4<f32> = u_xlat10;
        let x_2318 : vec2<f32> = vec2<f32>(x_2317.y, x_2317.z);
        let x_2319 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_2319.x, x_2318.x, x_2319.z, x_2318.y);
        let x_2321 : vec2<f32> = u_xlat48;
        let x_2324 : vec4<f32> = x_272.x_MainLightShadowmapSize;
        let x_2327 : vec4<f32> = u_xlat9;
        u_xlat13 = ((vec4<f32>(x_2321.x, x_2321.y, x_2321.x, x_2321.y) * vec4<f32>(x_2324.x, x_2324.y, x_2324.x, x_2324.y)) + vec4<f32>(x_2327.x, x_2327.y, x_2327.z, x_2327.y));
        let x_2330 : vec2<f32> = u_xlat48;
        let x_2333 : vec4<f32> = x_272.x_MainLightShadowmapSize;
        let x_2336 : vec4<f32> = u_xlat10;
        u_xlat10 = ((vec4<f32>(x_2330.x, x_2330.y, x_2330.x, x_2330.y) * vec4<f32>(x_2333.x, x_2333.y, x_2333.x, x_2333.y)) + vec4<f32>(x_2336.w, x_2336.y, x_2336.w, x_2336.z));
        let x_2339 : vec2<f32> = u_xlat48;
        let x_2342 : vec4<f32> = x_272.x_MainLightShadowmapSize;
        let x_2345 : vec4<f32> = u_xlat9;
        u_xlat9 = ((vec4<f32>(x_2339.x, x_2339.y, x_2339.x, x_2339.y) * vec4<f32>(x_2342.x, x_2342.y, x_2342.x, x_2342.y)) + vec4<f32>(x_2345.x, x_2345.w, x_2345.z, x_2345.w));
        let x_2348 : vec4<f32> = u_xlat7;
        let x_2350 : vec4<f32> = u_xlat8;
        u_xlat14 = (vec4<f32>(x_2348.x, x_2348.x, x_2348.x, x_2348.y) * vec4<f32>(x_2350.z, x_2350.w, x_2350.y, x_2350.z));
        let x_2353 : vec4<f32> = u_xlat7;
        let x_2355 : vec4<f32> = u_xlat8;
        u_xlat15 = (vec4<f32>(x_2353.y, x_2353.y, x_2353.z, x_2353.z) * x_2355);
        let x_2358 : f32 = u_xlat7.z;
        let x_2360 : f32 = u_xlat8.y;
        u_xlat48.x = (x_2358 * x_2360);
        let x_2364 : vec4<f32> = u_xlat11;
        let x_2365 : vec2<f32> = vec2<f32>(x_2364.x, x_2364.y);
        let x_2367 : f32 = vs_INTERP9.z;
        txVec34 = vec3<f32>(x_2365.x, x_2365.y, x_2367);
        let x_2374 : vec3<f32> = txVec34;
        let x_2376 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2374.xy, x_2374.z);
        u_xlat69 = x_2376;
        let x_2378 : vec4<f32> = u_xlat11;
        let x_2379 : vec2<f32> = vec2<f32>(x_2378.z, x_2378.w);
        let x_2381 : f32 = vs_INTERP9.z;
        txVec35 = vec3<f32>(x_2379.x, x_2379.y, x_2381);
        let x_2388 : vec3<f32> = txVec35;
        let x_2390 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2388.xy, x_2388.z);
        u_xlat7.x = x_2390;
        let x_2393 : f32 = u_xlat7.x;
        let x_2395 : f32 = u_xlat14.y;
        u_xlat7.x = (x_2393 * x_2395);
        let x_2399 : f32 = u_xlat14.x;
        let x_2400 : f32 = u_xlat69;
        let x_2403 : f32 = u_xlat7.x;
        u_xlat69 = ((x_2399 * x_2400) + x_2403);
        let x_2406 : vec4<f32> = u_xlat12;
        let x_2407 : vec2<f32> = vec2<f32>(x_2406.x, x_2406.y);
        let x_2409 : f32 = vs_INTERP9.z;
        txVec36 = vec3<f32>(x_2407.x, x_2407.y, x_2409);
        let x_2416 : vec3<f32> = txVec36;
        let x_2418 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2416.xy, x_2416.z);
        u_xlat7.x = x_2418;
        let x_2421 : f32 = u_xlat14.z;
        let x_2423 : f32 = u_xlat7.x;
        let x_2425 : f32 = u_xlat69;
        u_xlat69 = ((x_2421 * x_2423) + x_2425);
        let x_2428 : vec4<f32> = u_xlat10;
        let x_2429 : vec2<f32> = vec2<f32>(x_2428.x, x_2428.y);
        let x_2431 : f32 = vs_INTERP9.z;
        txVec37 = vec3<f32>(x_2429.x, x_2429.y, x_2431);
        let x_2438 : vec3<f32> = txVec37;
        let x_2440 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2438.xy, x_2438.z);
        u_xlat7.x = x_2440;
        let x_2443 : f32 = u_xlat14.w;
        let x_2445 : f32 = u_xlat7.x;
        let x_2447 : f32 = u_xlat69;
        u_xlat69 = ((x_2443 * x_2445) + x_2447);
        let x_2450 : vec4<f32> = u_xlat13;
        let x_2451 : vec2<f32> = vec2<f32>(x_2450.x, x_2450.y);
        let x_2453 : f32 = vs_INTERP9.z;
        txVec38 = vec3<f32>(x_2451.x, x_2451.y, x_2453);
        let x_2460 : vec3<f32> = txVec38;
        let x_2462 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2460.xy, x_2460.z);
        u_xlat7.x = x_2462;
        let x_2465 : f32 = u_xlat15.x;
        let x_2467 : f32 = u_xlat7.x;
        let x_2469 : f32 = u_xlat69;
        u_xlat69 = ((x_2465 * x_2467) + x_2469);
        let x_2472 : vec4<f32> = u_xlat13;
        let x_2473 : vec2<f32> = vec2<f32>(x_2472.z, x_2472.w);
        let x_2475 : f32 = vs_INTERP9.z;
        txVec39 = vec3<f32>(x_2473.x, x_2473.y, x_2475);
        let x_2482 : vec3<f32> = txVec39;
        let x_2484 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2482.xy, x_2482.z);
        u_xlat7.x = x_2484;
        let x_2487 : f32 = u_xlat15.y;
        let x_2489 : f32 = u_xlat7.x;
        let x_2491 : f32 = u_xlat69;
        u_xlat69 = ((x_2487 * x_2489) + x_2491);
        let x_2494 : vec4<f32> = u_xlat10;
        let x_2495 : vec2<f32> = vec2<f32>(x_2494.z, x_2494.w);
        let x_2497 : f32 = vs_INTERP9.z;
        txVec40 = vec3<f32>(x_2495.x, x_2495.y, x_2497);
        let x_2504 : vec3<f32> = txVec40;
        let x_2506 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2504.xy, x_2504.z);
        u_xlat7.x = x_2506;
        let x_2509 : f32 = u_xlat15.z;
        let x_2511 : f32 = u_xlat7.x;
        let x_2513 : f32 = u_xlat69;
        u_xlat69 = ((x_2509 * x_2511) + x_2513);
        let x_2516 : vec4<f32> = u_xlat9;
        let x_2517 : vec2<f32> = vec2<f32>(x_2516.x, x_2516.y);
        let x_2519 : f32 = vs_INTERP9.z;
        txVec41 = vec3<f32>(x_2517.x, x_2517.y, x_2519);
        let x_2526 : vec3<f32> = txVec41;
        let x_2528 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2526.xy, x_2526.z);
        u_xlat7.x = x_2528;
        let x_2531 : f32 = u_xlat15.w;
        let x_2533 : f32 = u_xlat7.x;
        let x_2535 : f32 = u_xlat69;
        u_xlat69 = ((x_2531 * x_2533) + x_2535);
        let x_2538 : vec4<f32> = u_xlat9;
        let x_2539 : vec2<f32> = vec2<f32>(x_2538.z, x_2538.w);
        let x_2541 : f32 = vs_INTERP9.z;
        txVec42 = vec3<f32>(x_2539.x, x_2539.y, x_2541);
        let x_2548 : vec3<f32> = txVec42;
        let x_2550 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2548.xy, x_2548.z);
        u_xlat7.x = x_2550;
        let x_2553 : f32 = u_xlat48.x;
        let x_2555 : f32 = u_xlat7.x;
        let x_2557 : f32 = u_xlat69;
        u_xlat63 = ((x_2553 * x_2555) + x_2557);
      } else {
        let x_2560 : vec4<f32> = vs_INTERP9;
        let x_2563 : vec4<f32> = x_272.x_MainLightShadowmapSize;
        u_xlat48 = ((vec2<f32>(x_2560.x, x_2560.y) * vec2<f32>(x_2563.z, x_2563.w)) + vec2<f32>(0.5f, 0.5f));
        let x_2567 : vec2<f32> = u_xlat48;
        u_xlat48 = floor(x_2567);
        let x_2569 : vec4<f32> = vs_INTERP9;
        let x_2572 : vec4<f32> = x_272.x_MainLightShadowmapSize;
        let x_2575 : vec2<f32> = u_xlat48;
        let x_2577 : vec2<f32> = ((vec2<f32>(x_2569.x, x_2569.y) * vec2<f32>(x_2572.z, x_2572.w)) + -(x_2575));
        let x_2578 : vec4<f32> = u_xlat7;
        u_xlat7 = vec4<f32>(x_2577.x, x_2577.y, x_2578.z, x_2578.w);
        let x_2580 : vec4<f32> = u_xlat7;
        u_xlat8 = (vec4<f32>(x_2580.x, x_2580.x, x_2580.y, x_2580.y) + vec4<f32>(0.5f, 1.0f, 0.5f, 1.0f));
        let x_2583 : vec4<f32> = u_xlat8;
        let x_2585 : vec4<f32> = u_xlat8;
        u_xlat9 = (vec4<f32>(x_2583.x, x_2583.x, x_2583.z, x_2583.z) * vec4<f32>(x_2585.x, x_2585.x, x_2585.z, x_2585.z));
        let x_2588 : vec4<f32> = u_xlat9;
        let x_2590 : vec2<f32> = (vec2<f32>(x_2588.y, x_2588.w) * vec2<f32>(0.040816002f, 0.040816002f));
        let x_2591 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_2591.x, x_2590.x, x_2591.z, x_2590.y);
        let x_2593 : vec4<f32> = u_xlat9;
        let x_2596 : vec4<f32> = u_xlat7;
        u_xlat49 = ((vec2<f32>(x_2593.x, x_2593.z) * vec2<f32>(0.5f, 0.5f)) + -(vec2<f32>(x_2596.x, x_2596.y)));
        let x_2600 : vec4<f32> = u_xlat7;
        let x_2603 : vec2<f32> = (-(vec2<f32>(x_2600.x, x_2600.y)) + vec2<f32>(1.0f, 1.0f));
        let x_2604 : vec4<f32> = u_xlat8;
        u_xlat8 = vec4<f32>(x_2603.x, x_2604.y, x_2603.y, x_2604.w);
        let x_2606 : vec4<f32> = u_xlat7;
        let x_2608 : vec2<f32> = min(vec2<f32>(x_2606.x, x_2606.y), vec2<f32>(0.0f, 0.0f));
        let x_2609 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_2608.x, x_2608.y, x_2609.z, x_2609.w);
        let x_2611 : vec4<f32> = u_xlat9;
        let x_2614 : vec4<f32> = u_xlat9;
        let x_2617 : vec4<f32> = u_xlat8;
        let x_2619 : vec2<f32> = ((-(vec2<f32>(x_2611.x, x_2611.y)) * vec2<f32>(x_2614.x, x_2614.y)) + vec2<f32>(x_2617.x, x_2617.z));
        let x_2620 : vec4<f32> = u_xlat8;
        u_xlat8 = vec4<f32>(x_2619.x, x_2620.y, x_2619.y, x_2620.w);
        let x_2622 : vec4<f32> = u_xlat7;
        let x_2624 : vec2<f32> = max(vec2<f32>(x_2622.x, x_2622.y), vec2<f32>(0.0f, 0.0f));
        let x_2625 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_2624.x, x_2624.y, x_2625.z, x_2625.w);
        let x_2627 : vec4<f32> = u_xlat9;
        let x_2630 : vec4<f32> = u_xlat9;
        let x_2633 : vec4<f32> = u_xlat8;
        let x_2635 : vec2<f32> = ((-(vec2<f32>(x_2627.x, x_2627.y)) * vec2<f32>(x_2630.x, x_2630.y)) + vec2<f32>(x_2633.y, x_2633.w));
        let x_2636 : vec4<f32> = u_xlat8;
        u_xlat8 = vec4<f32>(x_2636.x, x_2635.x, x_2636.z, x_2635.y);
        let x_2638 : vec4<f32> = u_xlat8;
        u_xlat8 = (x_2638 + vec4<f32>(2.0f, 2.0f, 2.0f, 2.0f));
        let x_2641 : f32 = u_xlat8.y;
        u_xlat9.z = (x_2641 * 0.081632003f);
        let x_2644 : vec2<f32> = u_xlat49;
        let x_2646 : vec2<f32> = (vec2<f32>(x_2644.y, x_2644.x) * vec2<f32>(0.081632003f, 0.081632003f));
        let x_2647 : vec4<f32> = u_xlat11;
        u_xlat11 = vec4<f32>(x_2646.x, x_2646.y, x_2647.z, x_2647.w);
        let x_2649 : vec4<f32> = u_xlat8;
        u_xlat49 = (vec2<f32>(x_2649.x, x_2649.z) * vec2<f32>(0.081632003f, 0.081632003f));
        let x_2653 : f32 = u_xlat8.w;
        u_xlat11.z = (x_2653 * 0.081632003f);
        let x_2657 : f32 = u_xlat11.y;
        u_xlat9.x = x_2657;
        let x_2659 : vec4<f32> = u_xlat7;
        let x_2662 : vec2<f32> = ((vec2<f32>(x_2659.x, x_2659.x) * vec2<f32>(-0.081632003f, 0.081632003f)) + vec2<f32>(0.163264006f, 0.081632003f));
        let x_2663 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_2663.x, x_2662.x, x_2663.z, x_2662.y);
        let x_2665 : vec4<f32> = u_xlat7;
        let x_2668 : vec2<f32> = ((vec2<f32>(x_2665.x, x_2665.x) * vec2<f32>(-0.081632003f, 0.081632003f)) + vec2<f32>(0.081632003f, 0.163264006f));
        let x_2669 : vec4<f32> = u_xlat8;
        u_xlat8 = vec4<f32>(x_2668.x, x_2669.y, x_2668.y, x_2669.w);
        let x_2672 : f32 = u_xlat49.x;
        u_xlat8.y = x_2672;
        let x_2675 : f32 = u_xlat10.y;
        u_xlat8.w = x_2675;
        let x_2677 : vec4<f32> = u_xlat8;
        let x_2678 : vec4<f32> = u_xlat9;
        u_xlat9 = (x_2677 + x_2678);
        let x_2680 : vec4<f32> = u_xlat7;
        let x_2683 : vec2<f32> = ((vec2<f32>(x_2680.y, x_2680.y) * vec2<f32>(-0.081632003f, 0.081632003f)) + vec2<f32>(0.163264006f, 0.081632003f));
        let x_2684 : vec4<f32> = u_xlat11;
        u_xlat11 = vec4<f32>(x_2684.x, x_2683.x, x_2684.z, x_2683.y);
        let x_2686 : vec4<f32> = u_xlat7;
        let x_2689 : vec2<f32> = ((vec2<f32>(x_2686.y, x_2686.y) * vec2<f32>(-0.081632003f, 0.081632003f)) + vec2<f32>(0.081632003f, 0.163264006f));
        let x_2690 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_2689.x, x_2690.y, x_2689.y, x_2690.w);
        let x_2693 : f32 = u_xlat49.y;
        u_xlat10.y = x_2693;
        let x_2695 : vec4<f32> = u_xlat10;
        let x_2696 : vec4<f32> = u_xlat11;
        u_xlat7 = (x_2695 + x_2696);
        let x_2698 : vec4<f32> = u_xlat8;
        let x_2699 : vec4<f32> = u_xlat9;
        u_xlat8 = (x_2698 / x_2699);
        let x_2701 : vec4<f32> = u_xlat8;
        u_xlat8 = (x_2701 + vec4<f32>(-3.5f, -1.5f, 0.5f, 2.5f));
        let x_2703 : vec4<f32> = u_xlat10;
        let x_2704 : vec4<f32> = u_xlat7;
        u_xlat10 = (x_2703 / x_2704);
        let x_2706 : vec4<f32> = u_xlat10;
        u_xlat10 = (x_2706 + vec4<f32>(-3.5f, -1.5f, 0.5f, 2.5f));
        let x_2708 : vec4<f32> = u_xlat8;
        let x_2711 : vec4<f32> = x_272.x_MainLightShadowmapSize;
        u_xlat8 = (vec4<f32>(x_2708.w, x_2708.x, x_2708.y, x_2708.z) * vec4<f32>(x_2711.x, x_2711.x, x_2711.x, x_2711.x));
        let x_2714 : vec4<f32> = u_xlat10;
        let x_2717 : vec4<f32> = x_272.x_MainLightShadowmapSize;
        u_xlat10 = (vec4<f32>(x_2714.x, x_2714.w, x_2714.y, x_2714.z) * vec4<f32>(x_2717.y, x_2717.y, x_2717.y, x_2717.y));
        let x_2720 : vec4<f32> = u_xlat8;
        let x_2721 : vec3<f32> = vec3<f32>(x_2720.y, x_2720.z, x_2720.w);
        let x_2722 : vec4<f32> = u_xlat11;
        u_xlat11 = vec4<f32>(x_2721.x, x_2722.y, x_2721.y, x_2721.z);
        let x_2725 : f32 = u_xlat10.x;
        u_xlat11.y = x_2725;
        let x_2727 : vec2<f32> = u_xlat48;
        let x_2730 : vec4<f32> = x_272.x_MainLightShadowmapSize;
        let x_2733 : vec4<f32> = u_xlat11;
        u_xlat12 = ((vec4<f32>(x_2727.x, x_2727.y, x_2727.x, x_2727.y) * vec4<f32>(x_2730.x, x_2730.y, x_2730.x, x_2730.y)) + vec4<f32>(x_2733.x, x_2733.y, x_2733.z, x_2733.y));
        let x_2736 : vec2<f32> = u_xlat48;
        let x_2738 : vec4<f32> = x_272.x_MainLightShadowmapSize;
        let x_2741 : vec4<f32> = u_xlat11;
        let x_2743 : vec2<f32> = ((x_2736 * vec2<f32>(x_2738.x, x_2738.y)) + vec2<f32>(x_2741.w, x_2741.y));
        let x_2744 : vec4<f32> = u_xlat13;
        u_xlat13 = vec4<f32>(x_2743.x, x_2743.y, x_2744.z, x_2744.w);
        let x_2747 : f32 = u_xlat11.y;
        u_xlat8.y = x_2747;
        let x_2750 : f32 = u_xlat10.z;
        u_xlat11.y = x_2750;
        let x_2752 : vec2<f32> = u_xlat48;
        let x_2755 : vec4<f32> = x_272.x_MainLightShadowmapSize;
        let x_2758 : vec4<f32> = u_xlat11;
        u_xlat14 = ((vec4<f32>(x_2752.x, x_2752.y, x_2752.x, x_2752.y) * vec4<f32>(x_2755.x, x_2755.y, x_2755.x, x_2755.y)) + vec4<f32>(x_2758.x, x_2758.y, x_2758.z, x_2758.y));
        let x_2762 : vec2<f32> = u_xlat48;
        let x_2764 : vec4<f32> = x_272.x_MainLightShadowmapSize;
        let x_2767 : vec4<f32> = u_xlat11;
        u_xlat55 = ((x_2762 * vec2<f32>(x_2764.x, x_2764.y)) + vec2<f32>(x_2767.w, x_2767.y));
        let x_2771 : f32 = u_xlat11.y;
        u_xlat8.z = x_2771;
        let x_2773 : vec2<f32> = u_xlat48;
        let x_2776 : vec4<f32> = x_272.x_MainLightShadowmapSize;
        let x_2779 : vec4<f32> = u_xlat8;
        u_xlat15 = ((vec4<f32>(x_2773.x, x_2773.y, x_2773.x, x_2773.y) * vec4<f32>(x_2776.x, x_2776.y, x_2776.x, x_2776.y)) + vec4<f32>(x_2779.x, x_2779.y, x_2779.x, x_2779.z));
        let x_2783 : f32 = u_xlat10.w;
        u_xlat11.y = x_2783;
        let x_2785 : vec2<f32> = u_xlat48;
        let x_2788 : vec4<f32> = x_272.x_MainLightShadowmapSize;
        let x_2791 : vec4<f32> = u_xlat11;
        u_xlat16 = ((vec4<f32>(x_2785.x, x_2785.y, x_2785.x, x_2785.y) * vec4<f32>(x_2788.x, x_2788.y, x_2788.x, x_2788.y)) + vec4<f32>(x_2791.x, x_2791.y, x_2791.z, x_2791.y));
        let x_2794 : vec2<f32> = u_xlat48;
        let x_2796 : vec4<f32> = x_272.x_MainLightShadowmapSize;
        let x_2799 : vec4<f32> = u_xlat11;
        let x_2801 : vec2<f32> = ((x_2794 * vec2<f32>(x_2796.x, x_2796.y)) + vec2<f32>(x_2799.w, x_2799.y));
        let x_2802 : vec3<f32> = u_xlat29;
        u_xlat29 = vec3<f32>(x_2801.x, x_2801.y, x_2802.z);
        let x_2805 : f32 = u_xlat11.y;
        u_xlat8.w = x_2805;
        let x_2807 : vec2<f32> = u_xlat48;
        let x_2809 : vec4<f32> = x_272.x_MainLightShadowmapSize;
        let x_2812 : vec4<f32> = u_xlat8;
        let x_2814 : vec2<f32> = ((x_2807 * vec2<f32>(x_2809.x, x_2809.y)) + vec2<f32>(x_2812.x, x_2812.w));
        let x_2815 : vec4<f32> = u_xlat17;
        u_xlat17 = vec4<f32>(x_2814.x, x_2814.y, x_2815.z, x_2815.w);
        let x_2817 : vec4<f32> = u_xlat11;
        let x_2818 : vec3<f32> = vec3<f32>(x_2817.x, x_2817.z, x_2817.w);
        let x_2819 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_2818.x, x_2819.y, x_2818.y, x_2818.z);
        let x_2821 : vec2<f32> = u_xlat48;
        let x_2824 : vec4<f32> = x_272.x_MainLightShadowmapSize;
        let x_2827 : vec4<f32> = u_xlat10;
        u_xlat11 = ((vec4<f32>(x_2821.x, x_2821.y, x_2821.x, x_2821.y) * vec4<f32>(x_2824.x, x_2824.y, x_2824.x, x_2824.y)) + vec4<f32>(x_2827.x, x_2827.y, x_2827.z, x_2827.y));
        let x_2830 : vec2<f32> = u_xlat48;
        let x_2832 : vec4<f32> = x_272.x_MainLightShadowmapSize;
        let x_2835 : vec4<f32> = u_xlat10;
        u_xlat52 = ((x_2830 * vec2<f32>(x_2832.x, x_2832.y)) + vec2<f32>(x_2835.w, x_2835.y));
        let x_2839 : f32 = u_xlat8.x;
        u_xlat10.x = x_2839;
        let x_2841 : vec2<f32> = u_xlat48;
        let x_2843 : vec4<f32> = x_272.x_MainLightShadowmapSize;
        let x_2846 : vec4<f32> = u_xlat10;
        u_xlat48 = ((x_2841 * vec2<f32>(x_2843.x, x_2843.y)) + vec2<f32>(x_2846.x, x_2846.y));
        let x_2849 : vec4<f32> = u_xlat7;
        let x_2851 : vec4<f32> = u_xlat9;
        u_xlat18 = (vec4<f32>(x_2849.x, x_2849.x, x_2849.x, x_2849.x) * x_2851);
        let x_2853 : vec4<f32> = u_xlat7;
        let x_2855 : vec4<f32> = u_xlat9;
        u_xlat19 = (vec4<f32>(x_2853.y, x_2853.y, x_2853.y, x_2853.y) * x_2855);
        let x_2857 : vec4<f32> = u_xlat7;
        let x_2859 : vec4<f32> = u_xlat9;
        u_xlat20 = (vec4<f32>(x_2857.z, x_2857.z, x_2857.z, x_2857.z) * x_2859);
        let x_2861 : vec4<f32> = u_xlat7;
        let x_2863 : vec4<f32> = u_xlat9;
        u_xlat7 = (vec4<f32>(x_2861.w, x_2861.w, x_2861.w, x_2861.w) * x_2863);
        let x_2866 : vec4<f32> = u_xlat12;
        let x_2867 : vec2<f32> = vec2<f32>(x_2866.x, x_2866.y);
        let x_2869 : f32 = vs_INTERP9.z;
        txVec43 = vec3<f32>(x_2867.x, x_2867.y, x_2869);
        let x_2876 : vec3<f32> = txVec43;
        let x_2878 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2876.xy, x_2876.z);
        u_xlat8.x = x_2878;
        let x_2881 : vec4<f32> = u_xlat12;
        let x_2882 : vec2<f32> = vec2<f32>(x_2881.z, x_2881.w);
        let x_2884 : f32 = vs_INTERP9.z;
        txVec44 = vec3<f32>(x_2882.x, x_2882.y, x_2884);
        let x_2892 : vec3<f32> = txVec44;
        let x_2894 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2892.xy, x_2892.z);
        u_xlat71 = x_2894;
        let x_2895 : f32 = u_xlat71;
        let x_2897 : f32 = u_xlat18.y;
        u_xlat71 = (x_2895 * x_2897);
        let x_2900 : f32 = u_xlat18.x;
        let x_2902 : f32 = u_xlat8.x;
        let x_2904 : f32 = u_xlat71;
        u_xlat8.x = ((x_2900 * x_2902) + x_2904);
        let x_2908 : vec4<f32> = u_xlat13;
        let x_2909 : vec2<f32> = vec2<f32>(x_2908.x, x_2908.y);
        let x_2911 : f32 = vs_INTERP9.z;
        txVec45 = vec3<f32>(x_2909.x, x_2909.y, x_2911);
        let x_2918 : vec3<f32> = txVec45;
        let x_2920 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2918.xy, x_2918.z);
        u_xlat71 = x_2920;
        let x_2922 : f32 = u_xlat18.z;
        let x_2923 : f32 = u_xlat71;
        let x_2926 : f32 = u_xlat8.x;
        u_xlat8.x = ((x_2922 * x_2923) + x_2926);
        let x_2930 : vec4<f32> = u_xlat15;
        let x_2931 : vec2<f32> = vec2<f32>(x_2930.x, x_2930.y);
        let x_2933 : f32 = vs_INTERP9.z;
        txVec46 = vec3<f32>(x_2931.x, x_2931.y, x_2933);
        let x_2940 : vec3<f32> = txVec46;
        let x_2942 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2940.xy, x_2940.z);
        u_xlat71 = x_2942;
        let x_2944 : f32 = u_xlat18.w;
        let x_2945 : f32 = u_xlat71;
        let x_2948 : f32 = u_xlat8.x;
        u_xlat8.x = ((x_2944 * x_2945) + x_2948);
        let x_2952 : vec4<f32> = u_xlat14;
        let x_2953 : vec2<f32> = vec2<f32>(x_2952.x, x_2952.y);
        let x_2955 : f32 = vs_INTERP9.z;
        txVec47 = vec3<f32>(x_2953.x, x_2953.y, x_2955);
        let x_2962 : vec3<f32> = txVec47;
        let x_2964 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2962.xy, x_2962.z);
        u_xlat71 = x_2964;
        let x_2966 : f32 = u_xlat19.x;
        let x_2967 : f32 = u_xlat71;
        let x_2970 : f32 = u_xlat8.x;
        u_xlat8.x = ((x_2966 * x_2967) + x_2970);
        let x_2974 : vec4<f32> = u_xlat14;
        let x_2975 : vec2<f32> = vec2<f32>(x_2974.z, x_2974.w);
        let x_2977 : f32 = vs_INTERP9.z;
        txVec48 = vec3<f32>(x_2975.x, x_2975.y, x_2977);
        let x_2984 : vec3<f32> = txVec48;
        let x_2986 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2984.xy, x_2984.z);
        u_xlat71 = x_2986;
        let x_2988 : f32 = u_xlat19.y;
        let x_2989 : f32 = u_xlat71;
        let x_2992 : f32 = u_xlat8.x;
        u_xlat8.x = ((x_2988 * x_2989) + x_2992);
        let x_2996 : vec2<f32> = u_xlat55;
        let x_2998 : f32 = vs_INTERP9.z;
        txVec49 = vec3<f32>(x_2996.x, x_2996.y, x_2998);
        let x_3005 : vec3<f32> = txVec49;
        let x_3007 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_3005.xy, x_3005.z);
        u_xlat71 = x_3007;
        let x_3009 : f32 = u_xlat19.z;
        let x_3010 : f32 = u_xlat71;
        let x_3013 : f32 = u_xlat8.x;
        u_xlat8.x = ((x_3009 * x_3010) + x_3013);
        let x_3017 : vec4<f32> = u_xlat15;
        let x_3018 : vec2<f32> = vec2<f32>(x_3017.z, x_3017.w);
        let x_3020 : f32 = vs_INTERP9.z;
        txVec50 = vec3<f32>(x_3018.x, x_3018.y, x_3020);
        let x_3027 : vec3<f32> = txVec50;
        let x_3029 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_3027.xy, x_3027.z);
        u_xlat71 = x_3029;
        let x_3031 : f32 = u_xlat19.w;
        let x_3032 : f32 = u_xlat71;
        let x_3035 : f32 = u_xlat8.x;
        u_xlat8.x = ((x_3031 * x_3032) + x_3035);
        let x_3039 : vec4<f32> = u_xlat16;
        let x_3040 : vec2<f32> = vec2<f32>(x_3039.x, x_3039.y);
        let x_3042 : f32 = vs_INTERP9.z;
        txVec51 = vec3<f32>(x_3040.x, x_3040.y, x_3042);
        let x_3049 : vec3<f32> = txVec51;
        let x_3051 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_3049.xy, x_3049.z);
        u_xlat71 = x_3051;
        let x_3053 : f32 = u_xlat20.x;
        let x_3054 : f32 = u_xlat71;
        let x_3057 : f32 = u_xlat8.x;
        u_xlat8.x = ((x_3053 * x_3054) + x_3057);
        let x_3061 : vec4<f32> = u_xlat16;
        let x_3062 : vec2<f32> = vec2<f32>(x_3061.z, x_3061.w);
        let x_3064 : f32 = vs_INTERP9.z;
        txVec52 = vec3<f32>(x_3062.x, x_3062.y, x_3064);
        let x_3071 : vec3<f32> = txVec52;
        let x_3073 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_3071.xy, x_3071.z);
        u_xlat71 = x_3073;
        let x_3075 : f32 = u_xlat20.y;
        let x_3076 : f32 = u_xlat71;
        let x_3079 : f32 = u_xlat8.x;
        u_xlat8.x = ((x_3075 * x_3076) + x_3079);
        let x_3083 : vec3<f32> = u_xlat29;
        let x_3084 : vec2<f32> = vec2<f32>(x_3083.x, x_3083.y);
        let x_3086 : f32 = vs_INTERP9.z;
        txVec53 = vec3<f32>(x_3084.x, x_3084.y, x_3086);
        let x_3093 : vec3<f32> = txVec53;
        let x_3095 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_3093.xy, x_3093.z);
        u_xlat29.x = x_3095;
        let x_3098 : f32 = u_xlat20.z;
        let x_3100 : f32 = u_xlat29.x;
        let x_3103 : f32 = u_xlat8.x;
        u_xlat8.x = ((x_3098 * x_3100) + x_3103);
        let x_3107 : vec4<f32> = u_xlat17;
        let x_3108 : vec2<f32> = vec2<f32>(x_3107.x, x_3107.y);
        let x_3110 : f32 = vs_INTERP9.z;
        txVec54 = vec3<f32>(x_3108.x, x_3108.y, x_3110);
        let x_3117 : vec3<f32> = txVec54;
        let x_3119 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_3117.xy, x_3117.z);
        u_xlat29.x = x_3119;
        let x_3122 : f32 = u_xlat20.w;
        let x_3124 : f32 = u_xlat29.x;
        let x_3127 : f32 = u_xlat8.x;
        u_xlat8.x = ((x_3122 * x_3124) + x_3127);
        let x_3131 : vec4<f32> = u_xlat11;
        let x_3132 : vec2<f32> = vec2<f32>(x_3131.x, x_3131.y);
        let x_3134 : f32 = vs_INTERP9.z;
        txVec55 = vec3<f32>(x_3132.x, x_3132.y, x_3134);
        let x_3141 : vec3<f32> = txVec55;
        let x_3143 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_3141.xy, x_3141.z);
        u_xlat29.x = x_3143;
        let x_3146 : f32 = u_xlat7.x;
        let x_3148 : f32 = u_xlat29.x;
        let x_3151 : f32 = u_xlat8.x;
        u_xlat7.x = ((x_3146 * x_3148) + x_3151);
        let x_3155 : vec4<f32> = u_xlat11;
        let x_3156 : vec2<f32> = vec2<f32>(x_3155.z, x_3155.w);
        let x_3158 : f32 = vs_INTERP9.z;
        txVec56 = vec3<f32>(x_3156.x, x_3156.y, x_3158);
        let x_3165 : vec3<f32> = txVec56;
        let x_3167 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_3165.xy, x_3165.z);
        u_xlat8.x = x_3167;
        let x_3170 : f32 = u_xlat7.y;
        let x_3172 : f32 = u_xlat8.x;
        let x_3175 : f32 = u_xlat7.x;
        u_xlat7.x = ((x_3170 * x_3172) + x_3175);
        let x_3179 : vec2<f32> = u_xlat52;
        let x_3181 : f32 = vs_INTERP9.z;
        txVec57 = vec3<f32>(x_3179.x, x_3179.y, x_3181);
        let x_3189 : vec3<f32> = txVec57;
        let x_3191 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_3189.xy, x_3189.z);
        u_xlat28 = x_3191;
        let x_3193 : f32 = u_xlat7.z;
        let x_3194 : f32 = u_xlat28;
        let x_3197 : f32 = u_xlat7.x;
        u_xlat7.x = ((x_3193 * x_3194) + x_3197);
        let x_3201 : vec2<f32> = u_xlat48;
        let x_3203 : f32 = vs_INTERP9.z;
        txVec58 = vec3<f32>(x_3201.x, x_3201.y, x_3203);
        let x_3210 : vec3<f32> = txVec58;
        let x_3212 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_3210.xy, x_3210.z);
        u_xlat48.x = x_3212;
        let x_3215 : f32 = u_xlat7.w;
        let x_3217 : f32 = u_xlat48.x;
        let x_3220 : f32 = u_xlat7.x;
        u_xlat63 = ((x_3215 * x_3217) + x_3220);
      }
    }
  } else {
    let x_3224 : vec4<f32> = vs_INTERP9;
    let x_3225 : vec2<f32> = vec2<f32>(x_3224.x, x_3224.y);
    let x_3227 : f32 = vs_INTERP9.z;
    txVec59 = vec3<f32>(x_3225.x, x_3225.y, x_3227);
    let x_3234 : vec3<f32> = txVec59;
    let x_3236 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_3234.xy, x_3234.z);
    u_xlat63 = x_3236;
  }
  let x_3237 : f32 = u_xlat63;
  let x_3239 : f32 = x_272.x_MainLightShadowParams.x;
  let x_3241 : f32 = u_xlat65;
  u_xlat63 = ((x_3237 * x_3239) + x_3241);
  let x_3244 : f32 = vs_INTERP9.z;
  u_xlatb65 = (0.0f >= x_3244);
  let x_3247 : f32 = vs_INTERP9.z;
  u_xlatb48 = (x_3247 >= 1.0f);
  let x_3249 : bool = u_xlatb65;
  let x_3250 : bool = u_xlatb48;
  u_xlatb65 = (x_3249 | x_3250);
  let x_3252 : bool = u_xlatb65;
  let x_3253 : f32 = u_xlat63;
  u_xlat63 = select(x_3253, 1.0f, x_3252);
  let x_3255 : vec3<f32> = vs_INTERP0;
  let x_3257 : vec3<f32> = x_90.x_WorldSpaceCameraPos;
  let x_3259 : vec3<f32> = (x_3255 + -(x_3257));
  let x_3260 : vec4<f32> = u_xlat7;
  u_xlat7 = vec4<f32>(x_3259.x, x_3259.y, x_3259.z, x_3260.w);
  let x_3262 : vec4<f32> = u_xlat7;
  let x_3264 : vec4<f32> = u_xlat7;
  u_xlat65 = dot(vec3<f32>(x_3262.x, x_3262.y, x_3262.z), vec3<f32>(x_3264.x, x_3264.y, x_3264.z));
  let x_3267 : f32 = u_xlat65;
  let x_3269 : f32 = x_272.x_MainLightShadowParams.z;
  let x_3272 : f32 = x_272.x_MainLightShadowParams.w;
  u_xlat65 = ((x_3267 * x_3269) + x_3272);
  let x_3274 : f32 = u_xlat65;
  u_xlat65 = clamp(x_3274, 0.0f, 1.0f);
  let x_3276 : f32 = u_xlat63;
  u_xlat48.x = (-(x_3276) + 1.0f);
  let x_3280 : f32 = u_xlat65;
  let x_3282 : f32 = u_xlat48.x;
  let x_3284 : f32 = u_xlat63;
  u_xlat63 = ((x_3280 * x_3282) + x_3284);
  let x_3286 : f32 = u_xlat27;
  let x_3289 : vec4<f32> = x_90.x_MainLightColor;
  let x_3291 : vec3<f32> = (vec3<f32>(x_3286, x_3286, x_3286) * vec3<f32>(x_3289.x, x_3289.y, x_3289.z));
  let x_3292 : vec4<f32> = u_xlat7;
  u_xlat7 = vec4<f32>(x_3291.x, x_3291.y, x_3291.z, x_3292.w);
  let x_3294 : vec3<f32> = u_xlat2;
  let x_3296 : vec4<f32> = u_xlat3;
  u_xlat65 = dot(-(x_3294), vec3<f32>(x_3296.x, x_3296.y, x_3296.z));
  let x_3299 : f32 = u_xlat65;
  let x_3300 : f32 = u_xlat65;
  u_xlat65 = (x_3299 + x_3300);
  let x_3302 : vec4<f32> = u_xlat3;
  let x_3304 : f32 = u_xlat65;
  let x_3308 : vec3<f32> = u_xlat2;
  let x_3310 : vec3<f32> = ((vec3<f32>(x_3302.x, x_3302.y, x_3302.z) * -(vec3<f32>(x_3304, x_3304, x_3304))) + -(x_3308));
  let x_3311 : vec4<f32> = u_xlat8;
  u_xlat8 = vec4<f32>(x_3310.x, x_3310.y, x_3310.z, x_3311.w);
  let x_3313 : vec4<f32> = u_xlat3;
  let x_3315 : vec3<f32> = u_xlat2;
  u_xlat65 = dot(vec3<f32>(x_3313.x, x_3313.y, x_3313.z), x_3315);
  let x_3317 : f32 = u_xlat65;
  u_xlat65 = clamp(x_3317, 0.0f, 1.0f);
  let x_3319 : f32 = u_xlat65;
  u_xlat65 = (-(x_3319) + 1.0f);
  let x_3322 : f32 = u_xlat65;
  let x_3323 : f32 = u_xlat65;
  u_xlat65 = (x_3322 * x_3323);
  let x_3325 : f32 = u_xlat65;
  let x_3326 : f32 = u_xlat65;
  u_xlat65 = (x_3325 * x_3326);
  let x_3329 : f32 = u_xlat43.x;
  u_xlat48.x = ((-(x_3329) * 0.699999988f) + 1.700000048f);
  let x_3337 : f32 = u_xlat43.x;
  let x_3339 : f32 = u_xlat48.x;
  u_xlat43.x = (x_3337 * x_3339);
  let x_3343 : f32 = u_xlat43.x;
  u_xlat43.x = (x_3343 * 6.0f);
  let x_3355 : vec4<f32> = u_xlat8;
  let x_3358 : f32 = u_xlat43.x;
  let x_3359 : vec4<f32> = textureSampleLevel(unity_SpecCube0, samplerunity_SpecCube0, vec3<f32>(x_3355.x, x_3355.y, x_3355.z), x_3358);
  u_xlat8 = x_3359;
  let x_3361 : f32 = u_xlat8.w;
  u_xlat43.x = (x_3361 + -1.0f);
  let x_3365 : f32 = x_161.unity_SpecCube0_HDR.w;
  let x_3367 : f32 = u_xlat43.x;
  u_xlat43.x = ((x_3365 * x_3367) + 1.0f);
  let x_3372 : f32 = u_xlat43.x;
  u_xlat43.x = max(x_3372, 0.0f);
  let x_3376 : f32 = u_xlat43.x;
  u_xlat43.x = log2(x_3376);
  let x_3380 : f32 = u_xlat43.x;
  let x_3382 : f32 = x_161.unity_SpecCube0_HDR.y;
  u_xlat43.x = (x_3380 * x_3382);
  let x_3386 : f32 = u_xlat43.x;
  u_xlat43.x = exp2(x_3386);
  let x_3390 : f32 = u_xlat43.x;
  let x_3392 : f32 = x_161.unity_SpecCube0_HDR.x;
  u_xlat43.x = (x_3390 * x_3392);
  let x_3395 : vec4<f32> = u_xlat8;
  let x_3397 : vec2<f32> = u_xlat43;
  let x_3399 : vec3<f32> = (vec3<f32>(x_3395.x, x_3395.y, x_3395.z) * vec3<f32>(x_3397.x, x_3397.x, x_3397.x));
  let x_3400 : vec4<f32> = u_xlat8;
  u_xlat8 = vec4<f32>(x_3399.x, x_3399.y, x_3399.z, x_3400.w);
  let x_3402 : f32 = u_xlat64;
  let x_3404 : f32 = u_xlat64;
  u_xlat43 = ((vec2<f32>(x_3402, x_3402) * vec2<f32>(x_3404, x_3404)) + vec2<f32>(-1.0f, 1.0f));
  let x_3410 : f32 = u_xlat43.y;
  u_xlat64 = (1.0f / x_3410);
  let x_3412 : f32 = u_xlat67;
  u_xlat67 = (x_3412 + -0.039999999f);
  let x_3415 : f32 = u_xlat65;
  let x_3416 : f32 = u_xlat67;
  u_xlat65 = ((x_3415 * x_3416) + 0.039999999f);
  let x_3420 : f32 = u_xlat64;
  let x_3421 : f32 = u_xlat65;
  u_xlat64 = (x_3420 * x_3421);
  let x_3423 : f32 = u_xlat64;
  let x_3425 : vec4<f32> = u_xlat8;
  let x_3427 : vec3<f32> = (vec3<f32>(x_3423, x_3423, x_3423) * vec3<f32>(x_3425.x, x_3425.y, x_3425.z));
  let x_3428 : vec4<f32> = u_xlat8;
  u_xlat8 = vec4<f32>(x_3427.x, x_3427.y, x_3427.z, x_3428.w);
  let x_3430 : vec3<f32> = u_xlat26;
  let x_3431 : vec3<f32> = u_xlat4;
  let x_3433 : vec4<f32> = u_xlat8;
  u_xlat26 = ((x_3430 * x_3431) + vec3<f32>(x_3433.x, x_3433.y, x_3433.z));
  let x_3436 : f32 = u_xlat63;
  let x_3438 : f32 = x_161.unity_LightData.z;
  u_xlat63 = (x_3436 * x_3438);
  let x_3440 : vec4<f32> = u_xlat3;
  let x_3443 : vec4<f32> = x_90.x_MainLightPosition;
  u_xlat64 = dot(vec3<f32>(x_3440.x, x_3440.y, x_3440.z), vec3<f32>(x_3443.x, x_3443.y, x_3443.z));
  let x_3446 : f32 = u_xlat64;
  u_xlat64 = clamp(x_3446, 0.0f, 1.0f);
  let x_3448 : f32 = u_xlat63;
  let x_3449 : f32 = u_xlat64;
  u_xlat63 = (x_3448 * x_3449);
  let x_3451 : f32 = u_xlat63;
  let x_3453 : vec4<f32> = u_xlat7;
  let x_3455 : vec3<f32> = (vec3<f32>(x_3451, x_3451, x_3451) * vec3<f32>(x_3453.x, x_3453.y, x_3453.z));
  let x_3456 : vec4<f32> = u_xlat7;
  u_xlat7 = vec4<f32>(x_3455.x, x_3455.y, x_3455.z, x_3456.w);
  let x_3458 : vec3<f32> = u_xlat2;
  let x_3460 : vec4<f32> = x_90.x_MainLightPosition;
  let x_3462 : vec3<f32> = (x_3458 + vec3<f32>(x_3460.x, x_3460.y, x_3460.z));
  let x_3463 : vec4<f32> = u_xlat8;
  u_xlat8 = vec4<f32>(x_3462.x, x_3462.y, x_3462.z, x_3463.w);
  let x_3465 : vec4<f32> = u_xlat8;
  let x_3467 : vec4<f32> = u_xlat8;
  u_xlat63 = dot(vec3<f32>(x_3465.x, x_3465.y, x_3465.z), vec3<f32>(x_3467.x, x_3467.y, x_3467.z));
  let x_3470 : f32 = u_xlat63;
  u_xlat63 = max(x_3470, 1.17549435e-37f);
  let x_3473 : f32 = u_xlat63;
  u_xlat63 = inverseSqrt(x_3473);
  let x_3475 : f32 = u_xlat63;
  let x_3477 : vec4<f32> = u_xlat8;
  let x_3479 : vec3<f32> = (vec3<f32>(x_3475, x_3475, x_3475) * vec3<f32>(x_3477.x, x_3477.y, x_3477.z));
  let x_3480 : vec4<f32> = u_xlat8;
  u_xlat8 = vec4<f32>(x_3479.x, x_3479.y, x_3479.z, x_3480.w);
  let x_3482 : vec4<f32> = u_xlat3;
  let x_3484 : vec4<f32> = u_xlat8;
  u_xlat63 = dot(vec3<f32>(x_3482.x, x_3482.y, x_3482.z), vec3<f32>(x_3484.x, x_3484.y, x_3484.z));
  let x_3487 : f32 = u_xlat63;
  u_xlat63 = clamp(x_3487, 0.0f, 1.0f);
  let x_3490 : vec4<f32> = x_90.x_MainLightPosition;
  let x_3492 : vec4<f32> = u_xlat8;
  u_xlat64 = dot(vec3<f32>(x_3490.x, x_3490.y, x_3490.z), vec3<f32>(x_3492.x, x_3492.y, x_3492.z));
  let x_3495 : f32 = u_xlat64;
  u_xlat64 = clamp(x_3495, 0.0f, 1.0f);
  let x_3497 : f32 = u_xlat63;
  let x_3498 : f32 = u_xlat63;
  u_xlat63 = (x_3497 * x_3498);
  let x_3500 : f32 = u_xlat63;
  let x_3502 : f32 = u_xlat43.x;
  u_xlat63 = ((x_3500 * x_3502) + 1.000010014f);
  let x_3506 : f32 = u_xlat64;
  let x_3507 : f32 = u_xlat64;
  u_xlat64 = (x_3506 * x_3507);
  let x_3509 : f32 = u_xlat63;
  let x_3510 : f32 = u_xlat63;
  u_xlat63 = (x_3509 * x_3510);
  let x_3512 : f32 = u_xlat64;
  u_xlat64 = max(x_3512, 0.100000001f);
  let x_3515 : f32 = u_xlat63;
  let x_3516 : f32 = u_xlat64;
  u_xlat63 = (x_3515 * x_3516);
  let x_3519 : f32 = u_xlat5.x;
  let x_3520 : f32 = u_xlat63;
  u_xlat63 = (x_3519 * x_3520);
  let x_3522 : f32 = u_xlat66;
  let x_3523 : f32 = u_xlat63;
  u_xlat63 = (x_3522 / x_3523);
  let x_3525 : f32 = u_xlat63;
  let x_3529 : vec3<f32> = u_xlat4;
  let x_3530 : vec3<f32> = ((vec3<f32>(x_3525, x_3525, x_3525) * vec3<f32>(0.039999999f, 0.039999999f, 0.039999999f)) + x_3529);
  let x_3531 : vec4<f32> = u_xlat8;
  u_xlat8 = vec4<f32>(x_3530.x, x_3530.y, x_3530.z, x_3531.w);
  let x_3533 : vec4<f32> = u_xlat7;
  let x_3535 : vec4<f32> = u_xlat8;
  let x_3537 : vec3<f32> = (vec3<f32>(x_3533.x, x_3533.y, x_3533.z) * vec3<f32>(x_3535.x, x_3535.y, x_3535.z));
  let x_3538 : vec4<f32> = u_xlat7;
  u_xlat7 = vec4<f32>(x_3537.x, x_3537.y, x_3537.z, x_3538.w);
  let x_3541 : f32 = x_90.x_AdditionalLightsCount.x;
  let x_3543 : f32 = x_161.unity_LightData.y;
  u_xlat63 = min(x_3541, x_3543);
  let x_3546 : f32 = u_xlat63;
  u_xlatu63 = bitcast<u32>(i32(x_3546));
  u_xlat8.x = 0.0f;
  u_xlat8.y = 0.0f;
  u_xlat8.z = 0.0f;
  u_xlatu_loop_1 = 0u;
  loop {
    let x_3558 : u32 = u_xlatu_loop_1;
    let x_3559 : u32 = u_xlatu63;
    if ((x_3558 < x_3559)) {
    } else {
      break;
    }
    let x_3562 : u32 = u_xlatu_loop_1;
    u_xlatu65 = (x_3562 >> 2u);
    let x_3565 : u32 = u_xlatu_loop_1;
    u_xlati67 = bitcast<i32>((x_3565 & 3u));
    let x_3568 : u32 = u_xlatu65;
    let x_3571 : vec4<f32> = x_161.unity_LightIndices[bitcast<i32>(x_3568)];
    let x_3581 : i32 = u_xlati67;
    indexable = array<vec4<u32>, 4u>(vec4<u32>(1065353216u, 0u, 0u, 0u), vec4<u32>(0u, 1065353216u, 0u, 0u), vec4<u32>(0u, 0u, 1065353216u, 0u), vec4<u32>(0u, 0u, 0u, 1065353216u));
    let x_3586 : vec4<u32> = indexable[x_3581];
    u_xlat65 = dot(x_3571, bitcast<vec4<f32>>(x_3586));
    let x_3590 : f32 = u_xlat65;
    u_xlati65 = i32(x_3590);
    let x_3592 : vec3<f32> = vs_INTERP0;
    let x_3604 : i32 = u_xlati65;
    let x_3606 : vec4<f32> = x_3603.x_AdditionalLightsPosition[x_3604];
    let x_3609 : i32 = u_xlati65;
    let x_3611 : vec4<f32> = x_3603.x_AdditionalLightsPosition[x_3609];
    let x_3613 : vec3<f32> = ((-(x_3592) * vec3<f32>(x_3606.w, x_3606.w, x_3606.w)) + vec3<f32>(x_3611.x, x_3611.y, x_3611.z));
    let x_3614 : vec4<f32> = u_xlat9;
    u_xlat9 = vec4<f32>(x_3613.x, x_3613.y, x_3613.z, x_3614.w);
    let x_3616 : vec4<f32> = u_xlat9;
    let x_3618 : vec4<f32> = u_xlat9;
    u_xlat67 = dot(vec3<f32>(x_3616.x, x_3616.y, x_3616.z), vec3<f32>(x_3618.x, x_3618.y, x_3618.z));
    let x_3621 : f32 = u_xlat67;
    u_xlat67 = max(x_3621, 6.10351562e-05f);
    let x_3624 : f32 = u_xlat67;
    u_xlat48.x = inverseSqrt(x_3624);
    let x_3627 : vec2<f32> = u_xlat48;
    let x_3629 : vec4<f32> = u_xlat9;
    let x_3631 : vec3<f32> = (vec3<f32>(x_3627.x, x_3627.x, x_3627.x) * vec3<f32>(x_3629.x, x_3629.y, x_3629.z));
    let x_3632 : vec4<f32> = u_xlat10;
    u_xlat10 = vec4<f32>(x_3631.x, x_3631.y, x_3631.z, x_3632.w);
    let x_3634 : f32 = u_xlat67;
    u_xlat69 = (1.0f / x_3634);
    let x_3636 : f32 = u_xlat67;
    let x_3637 : i32 = u_xlati65;
    let x_3639 : f32 = x_3603.x_AdditionalLightsAttenuation[x_3637].x;
    u_xlat67 = (x_3636 * x_3639);
    let x_3641 : f32 = u_xlat67;
    let x_3643 : f32 = u_xlat67;
    u_xlat67 = ((-(x_3641) * x_3643) + 1.0f);
    let x_3646 : f32 = u_xlat67;
    u_xlat67 = max(x_3646, 0.0f);
    let x_3648 : f32 = u_xlat67;
    let x_3649 : f32 = u_xlat67;
    u_xlat67 = (x_3648 * x_3649);
    let x_3651 : f32 = u_xlat67;
    let x_3652 : f32 = u_xlat69;
    u_xlat67 = (x_3651 * x_3652);
    let x_3654 : i32 = u_xlati65;
    let x_3656 : vec4<f32> = x_3603.x_AdditionalLightsSpotDir[x_3654];
    let x_3658 : vec4<f32> = u_xlat10;
    u_xlat69 = dot(vec3<f32>(x_3656.x, x_3656.y, x_3656.z), vec3<f32>(x_3658.x, x_3658.y, x_3658.z));
    let x_3661 : f32 = u_xlat69;
    let x_3662 : i32 = u_xlati65;
    let x_3664 : f32 = x_3603.x_AdditionalLightsAttenuation[x_3662].z;
    let x_3666 : i32 = u_xlati65;
    let x_3668 : f32 = x_3603.x_AdditionalLightsAttenuation[x_3666].w;
    u_xlat69 = ((x_3661 * x_3664) + x_3668);
    let x_3670 : f32 = u_xlat69;
    u_xlat69 = clamp(x_3670, 0.0f, 1.0f);
    let x_3672 : f32 = u_xlat69;
    let x_3673 : f32 = u_xlat69;
    u_xlat69 = (x_3672 * x_3673);
    let x_3675 : f32 = u_xlat67;
    let x_3676 : f32 = u_xlat69;
    u_xlat67 = (x_3675 * x_3676);
    let x_3678 : f32 = u_xlat27;
    let x_3680 : i32 = u_xlati65;
    let x_3682 : vec4<f32> = x_3603.x_AdditionalLightsColor[x_3680];
    let x_3684 : vec3<f32> = (vec3<f32>(x_3678, x_3678, x_3678) * vec3<f32>(x_3682.x, x_3682.y, x_3682.z));
    let x_3685 : vec4<f32> = u_xlat11;
    u_xlat11 = vec4<f32>(x_3684.x, x_3684.y, x_3684.z, x_3685.w);
    let x_3687 : vec4<f32> = u_xlat3;
    let x_3689 : vec4<f32> = u_xlat10;
    u_xlat65 = dot(vec3<f32>(x_3687.x, x_3687.y, x_3687.z), vec3<f32>(x_3689.x, x_3689.y, x_3689.z));
    let x_3692 : f32 = u_xlat65;
    u_xlat65 = clamp(x_3692, 0.0f, 1.0f);
    let x_3694 : f32 = u_xlat65;
    let x_3695 : f32 = u_xlat67;
    u_xlat65 = (x_3694 * x_3695);
    let x_3697 : f32 = u_xlat65;
    let x_3699 : vec4<f32> = u_xlat11;
    let x_3701 : vec3<f32> = (vec3<f32>(x_3697, x_3697, x_3697) * vec3<f32>(x_3699.x, x_3699.y, x_3699.z));
    let x_3702 : vec4<f32> = u_xlat11;
    u_xlat11 = vec4<f32>(x_3701.x, x_3701.y, x_3701.z, x_3702.w);
    let x_3704 : vec4<f32> = u_xlat9;
    let x_3706 : vec2<f32> = u_xlat48;
    let x_3709 : vec3<f32> = u_xlat2;
    let x_3710 : vec3<f32> = ((vec3<f32>(x_3704.x, x_3704.y, x_3704.z) * vec3<f32>(x_3706.x, x_3706.x, x_3706.x)) + x_3709);
    let x_3711 : vec4<f32> = u_xlat9;
    u_xlat9 = vec4<f32>(x_3710.x, x_3710.y, x_3710.z, x_3711.w);
    let x_3713 : vec4<f32> = u_xlat9;
    let x_3715 : vec4<f32> = u_xlat9;
    u_xlat65 = dot(vec3<f32>(x_3713.x, x_3713.y, x_3713.z), vec3<f32>(x_3715.x, x_3715.y, x_3715.z));
    let x_3718 : f32 = u_xlat65;
    u_xlat65 = max(x_3718, 1.17549435e-37f);
    let x_3720 : f32 = u_xlat65;
    u_xlat65 = inverseSqrt(x_3720);
    let x_3722 : f32 = u_xlat65;
    let x_3724 : vec4<f32> = u_xlat9;
    let x_3726 : vec3<f32> = (vec3<f32>(x_3722, x_3722, x_3722) * vec3<f32>(x_3724.x, x_3724.y, x_3724.z));
    let x_3727 : vec4<f32> = u_xlat9;
    u_xlat9 = vec4<f32>(x_3726.x, x_3726.y, x_3726.z, x_3727.w);
    let x_3729 : vec4<f32> = u_xlat3;
    let x_3731 : vec4<f32> = u_xlat9;
    u_xlat65 = dot(vec3<f32>(x_3729.x, x_3729.y, x_3729.z), vec3<f32>(x_3731.x, x_3731.y, x_3731.z));
    let x_3734 : f32 = u_xlat65;
    u_xlat65 = clamp(x_3734, 0.0f, 1.0f);
    let x_3736 : vec4<f32> = u_xlat10;
    let x_3738 : vec4<f32> = u_xlat9;
    u_xlat67 = dot(vec3<f32>(x_3736.x, x_3736.y, x_3736.z), vec3<f32>(x_3738.x, x_3738.y, x_3738.z));
    let x_3741 : f32 = u_xlat67;
    u_xlat67 = clamp(x_3741, 0.0f, 1.0f);
    let x_3743 : f32 = u_xlat65;
    let x_3744 : f32 = u_xlat65;
    u_xlat65 = (x_3743 * x_3744);
    let x_3746 : f32 = u_xlat65;
    let x_3748 : f32 = u_xlat43.x;
    u_xlat65 = ((x_3746 * x_3748) + 1.000010014f);
    let x_3751 : f32 = u_xlat67;
    let x_3752 : f32 = u_xlat67;
    u_xlat67 = (x_3751 * x_3752);
    let x_3754 : f32 = u_xlat65;
    let x_3755 : f32 = u_xlat65;
    u_xlat65 = (x_3754 * x_3755);
    let x_3757 : f32 = u_xlat67;
    u_xlat67 = max(x_3757, 0.100000001f);
    let x_3759 : f32 = u_xlat65;
    let x_3760 : f32 = u_xlat67;
    u_xlat65 = (x_3759 * x_3760);
    let x_3763 : f32 = u_xlat5.x;
    let x_3764 : f32 = u_xlat65;
    u_xlat65 = (x_3763 * x_3764);
    let x_3766 : f32 = u_xlat66;
    let x_3767 : f32 = u_xlat65;
    u_xlat65 = (x_3766 / x_3767);
    let x_3769 : f32 = u_xlat65;
    let x_3772 : vec3<f32> = u_xlat4;
    let x_3773 : vec3<f32> = ((vec3<f32>(x_3769, x_3769, x_3769) * vec3<f32>(0.039999999f, 0.039999999f, 0.039999999f)) + x_3772);
    let x_3774 : vec4<f32> = u_xlat9;
    u_xlat9 = vec4<f32>(x_3773.x, x_3773.y, x_3773.z, x_3774.w);
    let x_3776 : vec4<f32> = u_xlat9;
    let x_3778 : vec4<f32> = u_xlat11;
    let x_3781 : vec4<f32> = u_xlat8;
    let x_3783 : vec3<f32> = ((vec3<f32>(x_3776.x, x_3776.y, x_3776.z) * vec3<f32>(x_3778.x, x_3778.y, x_3778.z)) + vec3<f32>(x_3781.x, x_3781.y, x_3781.z));
    let x_3784 : vec4<f32> = u_xlat8;
    u_xlat8 = vec4<f32>(x_3783.x, x_3783.y, x_3783.z, x_3784.w);

    continuing {
      let x_3786 : u32 = u_xlatu_loop_1;
      u_xlatu_loop_1 = (x_3786 + bitcast<u32>(1i));
    }
  }
  let x_3788 : vec3<f32> = u_xlat26;
  let x_3789 : vec4<f32> = u_xlat6;
  let x_3792 : vec4<f32> = u_xlat7;
  u_xlat2 = ((x_3788 * vec3<f32>(x_3789.x, x_3789.x, x_3789.x)) + vec3<f32>(x_3792.x, x_3792.y, x_3792.z));
  let x_3795 : vec4<f32> = u_xlat8;
  let x_3797 : vec3<f32> = u_xlat2;
  u_xlat2 = (vec3<f32>(x_3795.x, x_3795.y, x_3795.z) + x_3797);
  let x_3801 : vec4<f32> = vs_INTERP4;
  let x_3803 : vec3<f32> = u_xlat0;
  let x_3805 : vec3<f32> = u_xlat2;
  let x_3806 : vec3<f32> = ((vec3<f32>(x_3801.w, x_3801.w, x_3801.w) * x_3803) + x_3805);
  let x_3807 : vec4<f32> = SV_Target0;
  SV_Target0 = vec4<f32>(x_3806.x, x_3806.y, x_3806.z, x_3807.w);
  let x_3809 : bool = u_xlatb22;
  if (x_3809) {
    let x_3814 : f32 = u_xlat1.x;
    x_3810 = x_3814;
  } else {
    x_3810 = 1.0f;
  }
  let x_3816 : f32 = x_3810;
  SV_Target0.w = x_3816;
  let x_3822 : u32 = x_90.x_RenderingLayerMaxInt;
  let x_3824 : f32 = x_161.unity_RenderingLayer.x;
  u_xlatu0 = (x_3822 & bitcast<u32>(x_3824));
  let x_3827 : u32 = u_xlatu0;
  u_xlat0.x = f32(x_3827);
  let x_3832 : f32 = u_xlat0.x;
  let x_3834 : f32 = x_90.x_RenderingLayerRcpMaxInt;
  SV_Target1.x = (x_3832 * x_3834);
  let x_3838 : f32 = SV_Target1.x;
  SV_Target1.x = clamp(x_3838, 0.0f, 1.0f);
  let x_3842 : vec4<f32> = SV_Target1;
  SV_Target1 = vec4<f32>(x_3842.x, vec3<f32>(0.0f, 0.0f, 0.0f).x, vec3<f32>(0.0f, 0.0f, 0.0f).y, vec3<f32>(0.0f, 0.0f, 0.0f).z);
  return;
}

struct main_out {
  @location(0)
  SV_Target0_1 : vec4<f32>,
  @location(1)
  SV_Target1_1 : vec4<f32>,
}

@fragment
fn main(@builtin(position) gl_FragCoord_param : vec4<f32>, @location(1) vs_INTERP1_param : vec3<f32>, @location(0) vs_INTERP0_param : vec3<f32>, @location(3) vs_INTERP3_param : vec4<f32>, @location(4) vs_INTERP4_param : vec4<f32>, @location(2) vs_INTERP2_param : vec4<f32>, @location(5) vs_INTERP5_param : vec2<f32>, @location(6) vs_INTERP9_param : vec4<f32>) -> main_out {
  gl_FragCoord = gl_FragCoord_param;
  vs_INTERP1 = vs_INTERP1_param;
  vs_INTERP0 = vs_INTERP0_param;
  vs_INTERP3 = vs_INTERP3_param;
  vs_INTERP4 = vs_INTERP4_param;
  vs_INTERP2 = vs_INTERP2_param;
  vs_INTERP5 = vs_INTERP5_param;
  vs_INTERP9 = vs_INTERP9_param;
  main_1();
  return main_out(SV_Target0, SV_Target1);
}

