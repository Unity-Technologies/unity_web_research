struct PGlobals {
  x_GlobalMipBias : vec2<f32>,
  @size(8)
  padding : u32,
  x_MainLightPosition : vec4<f32>,
  x_MainLightColor : vec4<f32>,
  x_AdditionalLightsCount : vec4<f32>,
  x_ScreenParams : vec4<f32>,
  x_ZBufferParams : vec4<f32>,
  unity_FogColor : vec4<f32>,
  unity_MatrixVP : mat4x4<f32>,
  x_MaxDepth : f32,
  @size(12)
  padding_1 : u32,
  x_VeraslWater_DepthCamParams : vec4<f32>,
}

struct UnityPerMaterial {
  x_BumpScale : f32,
  @size(12)
  padding_2 : u32,
  x_DitherPattern_TexelSize : vec4<f32>,
}

type Arr = array<mat4x4<f32>, 5u>;

struct MainLightShadows {
  x_MainLightWorldToShadow : Arr,
  x_CascadeShadowSplitSpheres0 : vec4<f32>,
  x_CascadeShadowSplitSpheres1 : vec4<f32>,
  x_CascadeShadowSplitSpheres2 : vec4<f32>,
  x_CascadeShadowSplitSpheres3 : vec4<f32>,
  x_CascadeShadowSplitSphereRadii : vec4<f32>,
  x_MainLightShadowOffset0 : vec4<f32>,
  x_MainLightShadowOffset1 : vec4<f32>,
  x_MainLightShadowParams : vec4<f32>,
  x_MainLightShadowmapSize : vec4<f32>,
}

type Arr_1 = array<vec4<f32>, 2u>;

struct UnityPerDraw {
  unity_ObjectToWorld : mat4x4<f32>,
  unity_WorldToObject : mat4x4<f32>,
  unity_LODFade : vec4<f32>,
  unity_WorldTransformParams : vec4<f32>,
  unity_RenderingLayer : vec4<f32>,
  unity_LightData : vec4<f32>,
  unity_LightIndices : Arr_1,
  unity_ProbesOcclusion : vec4<f32>,
  unity_SpecCube0_HDR : vec4<f32>,
  unity_SpecCube1_HDR : vec4<f32>,
  unity_SpecCube0_BoxMax : vec4<f32>,
  unity_SpecCube0_BoxMin : vec4<f32>,
  unity_SpecCube0_ProbePosition : vec4<f32>,
  unity_SpecCube1_BoxMax : vec4<f32>,
  unity_SpecCube1_BoxMin : vec4<f32>,
  unity_SpecCube1_ProbePosition : vec4<f32>,
  unity_LightmapST : vec4<f32>,
  unity_DynamicLightmapST : vec4<f32>,
  unity_SHAr : vec4<f32>,
  unity_SHAg : vec4<f32>,
  unity_SHAb : vec4<f32>,
  unity_SHBr : vec4<f32>,
  unity_SHBg : vec4<f32>,
  unity_SHBb : vec4<f32>,
  unity_SHC : vec4<f32>,
  unity_RendererBounds_Min : vec4<f32>,
  unity_RendererBounds_Max : vec4<f32>,
  unity_MatrixPreviousM : mat4x4<f32>,
  unity_MatrixPreviousMI : mat4x4<f32>,
  unity_MotionVectorsParams : vec4<f32>,
  unity_SpriteColor : vec4<f32>,
  unity_SpriteProps : vec4<f32>,
}

type Arr_2 = array<vec4<f32>, 256u>;

type Arr_3 = array<vec4<f32>, 256u>;

type Arr_4 = array<vec4<f32>, 256u>;

type Arr_5 = array<vec4<f32>, 256u>;

type Arr_6 = array<vec4<f32>, 256u>;

struct strided_arr {
  @size(16)
  el : f32,
}

type Arr_7 = array<strided_arr, 256u>;

struct AdditionalLights {
  x_AdditionalLightsPosition : Arr_6,
  x_AdditionalLightsColor : Arr_6,
  x_AdditionalLightsAttenuation : Arr_6,
  x_AdditionalLightsSpotDir : Arr_6,
  x_AdditionalLightsOcclusionProbes : Arr_6,
  x_AdditionalLightsLayerMasks : Arr_7,
}

var<private> vs_TEXCOORD6 : vec4<f32>;

@group(0) @binding(1) var x_WaterFXMap : texture_2d<f32>;

@group(0) @binding(10) var sampler_ScreenTextures_linear_clamp : sampler;

var<private> vs_TEXCOORD3 : vec3<f32>;

@group(1) @binding(0) var<uniform> x_39 : PGlobals;

@group(0) @binding(2) var x_CameraDepthTexture : texture_2d<f32>;

var<private> vs_TEXCOORD5 : vec4<f32>;

var<private> vs_TEXCOORD1 : vec3<f32>;

@group(0) @binding(4) var x_WaterDepthMap : texture_2d<f32>;

@group(0) @binding(12) var sampler_WaterDepthMap_linear_clamp : sampler;

@group(0) @binding(6) var x_SurfaceMap : texture_2d<f32>;

@group(0) @binding(14) var sampler_SurfaceMap : sampler;

var<private> vs_TEXCOORD0 : vec4<f32>;

@group(1) @binding(3) var<uniform> x_203 : UnityPerMaterial;

var<private> vs_NORMAL0 : vec3<f32>;

var<private> vs_TEXCOORD2 : vec3<f32>;

@group(1) @binding(4) var<uniform> x_364 : MainLightShadows;

@group(0) @binding(9) var x_MainLightShadowmapTexture : texture_depth_2d;

@group(0) @binding(17) var sampler_MainLightShadowmapTexture : sampler_comparison;

@group(0) @binding(8) var x_DitherPattern : texture_2d<f32>;

@group(0) @binding(16) var sampler_DitherPattern : sampler;

@group(1) @binding(2) var<uniform> x_2316 : UnityPerDraw;

@group(0) @binding(7) var x_FoamMap : texture_2d<f32>;

@group(0) @binding(15) var sampler_FoamMap : sampler;

@group(0) @binding(5) var x_AbsorptionScatteringRamp : texture_2d<f32>;

@group(0) @binding(13) var sampler_AbsorptionScatteringRamp : sampler;

@group(1) @binding(1) var<uniform> x_2726 : AdditionalLights;

@group(0) @binding(0) var x_PlanarReflectionTexture : texture_2d<f32>;

@group(0) @binding(3) var x_CameraOpaqueTexture : texture_2d<f32>;

@group(0) @binding(11) var sampler_CameraOpaqueTexture_linear_clamp : sampler;

var<private> vs_TEXCOORD4 : vec2<f32>;

var<private> SV_Target0 : vec4<f32>;

var<private> gl_FragCoord : vec4<f32>;

fn main_1() {
  var u_xlat0 : vec3<f32>;
  var u_xlat1 : vec3<f32>;
  var u_xlat38 : f32;
  var u_xlat2 : vec4<f32>;
  var u_xlat57 : f32;
  var u_xlat58 : f32;
  var u_xlat40 : vec2<f32>;
  var u_xlat3 : f32;
  var u_xlat4 : vec4<f32>;
  var u_xlat20 : vec2<f32>;
  var u_xlatb22 : bool;
  var x_322 : vec2<f32>;
  var u_xlat22 : vec3<f32>;
  var u_xlat5 : vec4<f32>;
  var u_xlat6 : vec4<f32>;
  var u_xlat7 : vec4<f32>;
  var u_xlatb4 : vec4<bool>;
  var u_xlatu22 : u32;
  var u_xlati22 : i32;
  var txVec0 : vec3<f32>;
  var txVec1 : vec3<f32>;
  var txVec2 : vec3<f32>;
  var txVec3 : vec3<f32>;
  var u_xlatb23 : bool;
  var u_xlat23 : vec2<f32>;
  var u_xlat43 : vec2<f32>;
  var u_xlat45 : vec2<f32>;
  var u_xlat8 : vec4<f32>;
  var u_xlat9 : vec4<f32>;
  var u_xlat10 : vec4<f32>;
  var u_xlat11 : vec4<f32>;
  var u_xlat12 : vec4<f32>;
  var u_xlat13 : vec4<f32>;
  var txVec4 : vec3<f32>;
  var u_xlat42 : f32;
  var txVec5 : vec3<f32>;
  var u_xlat61 : f32;
  var txVec6 : vec3<f32>;
  var txVec7 : vec3<f32>;
  var txVec8 : vec3<f32>;
  var txVec9 : vec3<f32>;
  var txVec10 : vec3<f32>;
  var txVec11 : vec3<f32>;
  var txVec12 : vec3<f32>;
  var u_xlat49 : vec2<f32>;
  var u_xlat14 : vec4<f32>;
  var u_xlat25 : vec2<f32>;
  var u_xlat15 : vec2<f32>;
  var u_xlat46 : vec2<f32>;
  var u_xlat16 : vec4<f32>;
  var u_xlat17 : vec4<f32>;
  var u_xlat18 : vec4<f32>;
  var txVec13 : vec3<f32>;
  var txVec14 : vec3<f32>;
  var txVec15 : vec3<f32>;
  var txVec16 : vec3<f32>;
  var txVec17 : vec3<f32>;
  var txVec18 : vec3<f32>;
  var txVec19 : vec3<f32>;
  var txVec20 : vec3<f32>;
  var txVec21 : vec3<f32>;
  var txVec22 : vec3<f32>;
  var txVec23 : vec3<f32>;
  var txVec24 : vec3<f32>;
  var txVec25 : vec3<f32>;
  var txVec26 : vec3<f32>;
  var txVec27 : vec3<f32>;
  var txVec28 : vec3<f32>;
  var txVec29 : vec3<f32>;
  var u_xlatb41 : bool;
  var u_xlatb60 : bool;
  var x_1811 : f32;
  var u_xlat41 : vec2<f32>;
  var u_xlatu_loop_1 : u32;
  var u_xlat62 : f32;
  var u_xlatb7 : vec4<bool>;
  var u_xlatu62 : u32;
  var u_xlati62 : i32;
  var txVec30 : vec3<f32>;
  var u_xlatb6 : vec4<bool>;
  var u_xlatu41 : u32;
  var u_xlati41 : i32;
  var u_xlat60 : f32;
  var u_xlat59 : f32;
  var u_xlatu1 : u32;
  var u_xlatu_loop_2 : u32;
  var u_xlati63 : i32;
  var indexable : array<vec4<u32>, 4u>;
  var u_xlat63 : f32;
  var u_xlat64 : f32;
  var u_xlat65 : f32;
  var u_xlat_precise_vec4 : vec4<f32>;
  var u_xlat_precise_ivec4 : vec4<i32>;
  var u_xlat_precise_bvec4 : vec4<bool>;
  var u_xlat_precise_uvec4 : vec4<u32>;
  let x_14 : vec4<f32> = vs_TEXCOORD6;
  let x_16 : vec4<f32> = vs_TEXCOORD6;
  let x_18 : vec2<f32> = (vec2<f32>(x_14.x, x_14.y) / vec2<f32>(x_16.w, x_16.w));
  let x_19 : vec3<f32> = u_xlat0;
  u_xlat0 = vec3<f32>(x_18.x, x_18.y, x_19.z);
  let x_34 : vec3<f32> = vs_TEXCOORD3;
  let x_46 : f32 = x_39.x_GlobalMipBias.x;
  let x_47 : vec4<f32> = textureSampleBias(x_WaterFXMap, sampler_ScreenTextures_linear_clamp, vec2<f32>(x_34.x, x_34.y), x_46);
  u_xlat1 = vec3<f32>(x_47.x, x_47.y, x_47.z);
  let x_55 : vec3<f32> = u_xlat0;
  let x_58 : f32 = x_39.x_GlobalMipBias.x;
  let x_59 : vec4<f32> = textureSampleBias(x_CameraDepthTexture, sampler_ScreenTextures_linear_clamp, vec2<f32>(x_55.x, x_55.y), x_58);
  u_xlat38 = x_59.x;
  let x_64 : f32 = x_39.x_ZBufferParams.z;
  let x_65 : f32 = u_xlat38;
  let x_69 : f32 = x_39.x_ZBufferParams.w;
  u_xlat38 = ((x_64 * x_65) + x_69);
  let x_72 : f32 = u_xlat38;
  u_xlat38 = (1.0f / x_72);
  let x_74 : f32 = u_xlat38;
  let x_78 : f32 = vs_TEXCOORD5.x;
  let x_82 : f32 = vs_TEXCOORD5.y;
  u_xlat38 = ((x_74 * x_78) + -(x_82));
  let x_88 : vec3<f32> = vs_TEXCOORD1;
  let x_95 : vec2<f32> = ((vec2<f32>(x_88.x, x_88.z) * vec2<f32>(0.002f, 0.002f)) + vec2<f32>(0.5f, 0.5f));
  let x_96 : vec4<f32> = u_xlat2;
  u_xlat2 = vec4<f32>(x_95.x, x_95.y, x_96.z, x_96.w);
  let x_104 : vec4<f32> = u_xlat2;
  let x_106 : vec4<f32> = textureSampleLevel(x_WaterDepthMap, sampler_WaterDepthMap_linear_clamp, vec2<f32>(x_104.x, x_104.y), 1.0f);
  u_xlat57 = x_106.x;
  let x_108 : f32 = u_xlat57;
  u_xlat57 = (-(x_108) + 1.0f);
  let x_114 : f32 = x_39.x_MaxDepth;
  let x_117 : f32 = x_39.x_VeraslWater_DepthCamParams.x;
  u_xlat58 = (x_114 + x_117);
  let x_119 : f32 = u_xlat57;
  let x_120 : f32 = u_xlat58;
  let x_123 : f32 = x_39.x_VeraslWater_DepthCamParams.x;
  u_xlat57 = ((x_119 * x_120) + -(x_123));
  let x_126 : f32 = u_xlat57;
  let x_128 : f32 = vs_TEXCOORD1.y;
  u_xlat57 = (x_126 + x_128);
  let x_131 : f32 = x_39.x_MaxDepth;
  u_xlat58 = (1.0f / x_131);
  let x_139 : vec4<f32> = vs_TEXCOORD0;
  let x_142 : f32 = x_39.x_GlobalMipBias.x;
  let x_143 : vec4<f32> = textureSampleBias(x_SurfaceMap, sampler_SurfaceMap, vec2<f32>(x_139.z, x_139.w), x_142);
  let x_144 : vec2<f32> = vec2<f32>(x_143.x, x_143.y);
  let x_145 : vec4<f32> = u_xlat2;
  u_xlat2 = vec4<f32>(x_144.x, x_144.y, x_145.z, x_145.w);
  let x_147 : vec4<f32> = u_xlat2;
  let x_154 : vec2<f32> = ((vec2<f32>(x_147.x, x_147.y) * vec2<f32>(2.0f, 2.0f)) + vec2<f32>(-1.0f, -1.0f));
  let x_155 : vec4<f32> = u_xlat2;
  u_xlat2 = vec4<f32>(x_154.x, x_154.y, x_155.z, x_155.w);
  let x_162 : vec4<f32> = vs_TEXCOORD0;
  let x_165 : f32 = x_39.x_GlobalMipBias.x;
  let x_166 : vec4<f32> = textureSampleBias(x_SurfaceMap, sampler_SurfaceMap, vec2<f32>(x_162.x, x_162.y), x_165);
  u_xlat40 = vec2<f32>(x_166.x, x_166.y);
  let x_168 : vec2<f32> = u_xlat40;
  u_xlat40 = ((x_168 * vec2<f32>(2.0f, 2.0f)) + vec2<f32>(-1.0f, -1.0f));
  let x_171 : vec2<f32> = u_xlat40;
  let x_173 : vec4<f32> = u_xlat2;
  let x_175 : vec2<f32> = ((x_171 * vec2<f32>(0.5f, 0.5f)) + vec2<f32>(x_173.x, x_173.y));
  let x_176 : vec4<f32> = u_xlat2;
  u_xlat2 = vec4<f32>(x_175.x, x_175.y, x_176.z, x_176.w);
  let x_179 : f32 = u_xlat38;
  u_xlat3 = (x_179 * 0.005f);
  let x_182 : f32 = u_xlat38;
  u_xlat40.x = ((x_182 * 0.25f) + 0.25f);
  let x_188 : f32 = u_xlat40.x;
  u_xlat40.x = clamp(x_188, 0.0f, 1.0f);
  let x_192 : vec2<f32> = u_xlat40;
  let x_194 : vec4<f32> = u_xlat2;
  let x_196 : vec2<f32> = (vec2<f32>(x_192.x, x_192.x) * vec2<f32>(x_194.x, x_194.y));
  let x_197 : vec4<f32> = u_xlat2;
  u_xlat2 = vec4<f32>(x_196.x, x_196.y, x_197.z, x_197.w);
  let x_199 : vec4<f32> = u_xlat2;
  let x_205 : f32 = x_203.x_BumpScale;
  let x_207 : vec2<f32> = (vec2<f32>(x_199.x, x_199.y) * vec2<f32>(x_205, x_205));
  let x_208 : vec4<f32> = u_xlat2;
  u_xlat2 = vec4<f32>(x_207.x, x_208.y, x_207.y, x_208.w);
  u_xlat2.y = 0.0f;
  u_xlat2.w = 1.0f;
  let x_212 : vec4<f32> = u_xlat2;
  let x_215 : vec3<f32> = vs_NORMAL0;
  let x_216 : vec3<f32> = (vec3<f32>(x_212.x, x_212.y, x_212.z) + x_215);
  let x_217 : vec4<f32> = u_xlat2;
  u_xlat2 = vec4<f32>(x_216.x, x_216.y, x_216.z, x_217.w);
  let x_220 : vec3<f32> = u_xlat1;
  let x_223 : vec2<f32> = (-(vec2<f32>(x_220.y, x_220.z)) + vec2<f32>(0.5f, 0.5f));
  let x_224 : vec4<f32> = u_xlat4;
  u_xlat4 = vec4<f32>(x_223.x, x_224.y, x_223.y, x_224.w);
  u_xlat4.y = 0.0f;
  let x_227 : vec4<f32> = u_xlat2;
  let x_229 : vec4<f32> = u_xlat4;
  let x_231 : vec3<f32> = (vec3<f32>(x_227.x, x_227.y, x_227.z) + vec3<f32>(x_229.x, x_229.y, x_229.z));
  let x_232 : vec4<f32> = u_xlat2;
  u_xlat2 = vec4<f32>(x_231.x, x_231.y, x_231.z, x_232.w);
  let x_235 : vec4<f32> = u_xlat2;
  let x_237 : vec4<f32> = u_xlat2;
  u_xlat20.x = dot(vec3<f32>(x_235.x, x_235.y, x_235.z), vec3<f32>(x_237.x, x_237.y, x_237.z));
  let x_242 : f32 = u_xlat20.x;
  u_xlat20.x = inverseSqrt(x_242);
  let x_245 : vec2<f32> = u_xlat20;
  let x_247 : vec4<f32> = u_xlat2;
  let x_249 : vec3<f32> = (vec3<f32>(x_245.x, x_245.x, x_245.x) * vec3<f32>(x_247.x, x_247.y, x_247.z));
  let x_250 : vec4<f32> = u_xlat2;
  u_xlat2 = vec4<f32>(x_249.x, x_249.y, x_249.z, x_250.w);
  let x_252 : vec4<f32> = u_xlat2;
  let x_259 : vec4<f32> = x_39.unity_MatrixVP[1i];
  u_xlat20 = (-(vec2<f32>(x_252.y, x_252.y)) * vec2<f32>(x_259.x, x_259.z));
  let x_263 : vec4<f32> = x_39.unity_MatrixVP[0i];
  let x_265 : vec4<f32> = u_xlat2;
  let x_269 : vec2<f32> = u_xlat20;
  u_xlat20 = ((vec2<f32>(x_263.x, x_263.z) * -(vec2<f32>(x_265.x, x_265.x))) + x_269);
  let x_273 : vec4<f32> = x_39.unity_MatrixVP[2i];
  let x_275 : vec4<f32> = u_xlat2;
  let x_279 : vec2<f32> = u_xlat20;
  u_xlat20 = ((vec2<f32>(x_273.x, x_273.z) * -(vec2<f32>(x_275.z, x_275.z))) + x_279);
  let x_281 : f32 = u_xlat3;
  u_xlat3 = x_281;
  let x_282 : f32 = u_xlat3;
  u_xlat3 = clamp(x_282, 0.0f, 1.0f);
  let x_284 : vec2<f32> = u_xlat20;
  let x_285 : f32 = u_xlat3;
  let x_288 : vec3<f32> = u_xlat0;
  u_xlat20 = ((x_284 * vec2<f32>(x_285, x_285)) + vec2<f32>(x_288.x, x_288.y));
  let x_294 : vec2<f32> = u_xlat20;
  let x_296 : f32 = x_39.x_GlobalMipBias.x;
  let x_297 : vec4<f32> = textureSampleBias(x_CameraDepthTexture, sampler_ScreenTextures_linear_clamp, x_294, x_296);
  u_xlat3 = x_297.x;
  let x_300 : f32 = x_39.x_ZBufferParams.z;
  let x_301 : f32 = u_xlat3;
  let x_304 : f32 = x_39.x_ZBufferParams.w;
  u_xlat3 = ((x_300 * x_301) + x_304);
  let x_306 : f32 = u_xlat3;
  u_xlat3 = (1.0f / x_306);
  let x_308 : f32 = u_xlat3;
  let x_310 : f32 = vs_TEXCOORD5.x;
  let x_313 : f32 = vs_TEXCOORD5.y;
  u_xlat3 = ((x_308 * x_310) + -(x_313));
  let x_319 : f32 = u_xlat3;
  u_xlatb22 = (x_319 < 0.0f);
  let x_321 : bool = u_xlatb22;
  if (x_321) {
    let x_325 : vec3<f32> = u_xlat0;
    x_322 = vec2<f32>(x_325.x, x_325.y);
  } else {
    let x_328 : vec2<f32> = u_xlat20;
    x_322 = x_328;
  }
  let x_329 : vec2<f32> = x_322;
  u_xlat20 = x_329;
  let x_330 : bool = u_xlatb22;
  let x_331 : f32 = u_xlat38;
  let x_332 : f32 = u_xlat3;
  u_xlat38 = select(x_332, x_331, x_330);
  let x_334 : vec4<f32> = u_xlat2;
  let x_337 : vec3<f32> = vs_TEXCOORD2;
  u_xlat3 = dot(vec3<f32>(x_334.x, x_334.y, x_334.z), x_337);
  let x_339 : f32 = u_xlat3;
  u_xlat3 = (-(x_339) + 1.0f);
  let x_343 : f32 = u_xlat3;
  let x_344 : f32 = u_xlat3;
  u_xlat22.x = (x_343 * x_344);
  let x_348 : f32 = u_xlat22.x;
  let x_350 : f32 = u_xlat22.x;
  u_xlat22.x = (x_348 * x_350);
  let x_354 : f32 = u_xlat22.x;
  let x_355 : f32 = u_xlat3;
  u_xlat3 = (x_354 * x_355);
  let x_357 : f32 = u_xlat3;
  u_xlat3 = clamp(x_357, 0.0f, 1.0f);
  let x_359 : vec3<f32> = vs_TEXCOORD1;
  let x_366 : vec4<f32> = x_364.x_CascadeShadowSplitSpheres0;
  u_xlat22 = (x_359 + -(vec3<f32>(x_366.x, x_366.y, x_366.z)));
  let x_370 : vec3<f32> = vs_TEXCOORD1;
  let x_372 : vec4<f32> = x_364.x_CascadeShadowSplitSpheres1;
  let x_375 : vec3<f32> = (x_370 + -(vec3<f32>(x_372.x, x_372.y, x_372.z)));
  let x_376 : vec4<f32> = u_xlat4;
  u_xlat4 = vec4<f32>(x_375.x, x_375.y, x_375.z, x_376.w);
  let x_379 : vec3<f32> = vs_TEXCOORD1;
  let x_382 : vec4<f32> = x_364.x_CascadeShadowSplitSpheres2;
  let x_385 : vec3<f32> = (x_379 + -(vec3<f32>(x_382.x, x_382.y, x_382.z)));
  let x_386 : vec4<f32> = u_xlat5;
  u_xlat5 = vec4<f32>(x_385.x, x_385.y, x_385.z, x_386.w);
  let x_389 : vec3<f32> = vs_TEXCOORD1;
  let x_392 : vec4<f32> = x_364.x_CascadeShadowSplitSpheres3;
  let x_395 : vec3<f32> = (x_389 + -(vec3<f32>(x_392.x, x_392.y, x_392.z)));
  let x_396 : vec4<f32> = u_xlat6;
  u_xlat6 = vec4<f32>(x_395.x, x_395.y, x_395.z, x_396.w);
  let x_399 : vec3<f32> = u_xlat22;
  let x_400 : vec3<f32> = u_xlat22;
  u_xlat7.x = dot(x_399, x_400);
  let x_403 : vec4<f32> = u_xlat4;
  let x_405 : vec4<f32> = u_xlat4;
  u_xlat7.y = dot(vec3<f32>(x_403.x, x_403.y, x_403.z), vec3<f32>(x_405.x, x_405.y, x_405.z));
  let x_409 : vec4<f32> = u_xlat5;
  let x_411 : vec4<f32> = u_xlat5;
  u_xlat7.z = dot(vec3<f32>(x_409.x, x_409.y, x_409.z), vec3<f32>(x_411.x, x_411.y, x_411.z));
  let x_415 : vec4<f32> = u_xlat6;
  let x_417 : vec4<f32> = u_xlat6;
  u_xlat7.w = dot(vec3<f32>(x_415.x, x_415.y, x_415.z), vec3<f32>(x_417.x, x_417.y, x_417.z));
  let x_424 : vec4<f32> = u_xlat7;
  let x_426 : vec4<f32> = x_364.x_CascadeShadowSplitSphereRadii;
  u_xlatb4 = (x_424 < x_426);
  let x_429 : bool = u_xlatb4.x;
  u_xlat5.x = select(0.0f, 1.0f, x_429);
  let x_433 : bool = u_xlatb4.y;
  u_xlat5.y = select(0.0f, 1.0f, x_433);
  let x_437 : bool = u_xlatb4.z;
  u_xlat5.z = select(0.0f, 1.0f, x_437);
  let x_441 : bool = u_xlatb4.w;
  u_xlat5.w = select(0.0f, 1.0f, x_441);
  let x_445 : bool = u_xlatb4.x;
  u_xlat22.x = select(-0.0f, -1.0f, x_445);
  let x_450 : bool = u_xlatb4.y;
  u_xlat22.y = select(-0.0f, -1.0f, x_450);
  let x_454 : bool = u_xlatb4.z;
  u_xlat22.z = select(-0.0f, -1.0f, x_454);
  let x_457 : vec3<f32> = u_xlat22;
  let x_458 : vec4<f32> = u_xlat5;
  u_xlat22 = (x_457 + vec3<f32>(x_458.y, x_458.z, x_458.w));
  let x_461 : vec3<f32> = u_xlat22;
  let x_463 : vec3<f32> = max(x_461, vec3<f32>(0.0f, 0.0f, 0.0f));
  let x_464 : vec4<f32> = u_xlat5;
  u_xlat5 = vec4<f32>(x_464.x, x_463.x, x_463.y, x_463.z);
  let x_466 : vec4<f32> = u_xlat5;
  u_xlat22.x = dot(x_466, vec4<f32>(4.0f, 3.0f, 2.0f, 1.0f));
  let x_473 : f32 = u_xlat22.x;
  u_xlat22.x = (-(x_473) + 4.0f);
  let x_480 : f32 = u_xlat22.x;
  u_xlatu22 = u32(x_480);
  let x_484 : u32 = u_xlatu22;
  u_xlati22 = (bitcast<i32>(x_484) << bitcast<u32>(2i));
  let x_487 : vec3<f32> = vs_TEXCOORD1;
  let x_489 : i32 = u_xlati22;
  let x_492 : i32 = u_xlati22;
  let x_496 : vec4<f32> = x_364.x_MainLightWorldToShadow[((x_489 + 1i) / 4i)][((x_492 + 1i) % 4i)];
  let x_498 : vec3<f32> = (vec3<f32>(x_487.y, x_487.y, x_487.y) * vec3<f32>(x_496.x, x_496.y, x_496.z));
  let x_499 : vec4<f32> = u_xlat4;
  u_xlat4 = vec4<f32>(x_498.x, x_498.y, x_498.z, x_499.w);
  let x_501 : i32 = u_xlati22;
  let x_503 : i32 = u_xlati22;
  let x_506 : vec4<f32> = x_364.x_MainLightWorldToShadow[(x_501 / 4i)][(x_503 % 4i)];
  let x_508 : vec3<f32> = vs_TEXCOORD1;
  let x_511 : vec4<f32> = u_xlat4;
  let x_513 : vec3<f32> = ((vec3<f32>(x_506.x, x_506.y, x_506.z) * vec3<f32>(x_508.x, x_508.x, x_508.x)) + vec3<f32>(x_511.x, x_511.y, x_511.z));
  let x_514 : vec4<f32> = u_xlat4;
  u_xlat4 = vec4<f32>(x_513.x, x_513.y, x_513.z, x_514.w);
  let x_516 : i32 = u_xlati22;
  let x_519 : i32 = u_xlati22;
  let x_523 : vec4<f32> = x_364.x_MainLightWorldToShadow[((x_516 + 2i) / 4i)][((x_519 + 2i) % 4i)];
  let x_525 : vec3<f32> = vs_TEXCOORD1;
  let x_528 : vec4<f32> = u_xlat4;
  let x_530 : vec3<f32> = ((vec3<f32>(x_523.x, x_523.y, x_523.z) * vec3<f32>(x_525.z, x_525.z, x_525.z)) + vec3<f32>(x_528.x, x_528.y, x_528.z));
  let x_531 : vec4<f32> = u_xlat4;
  u_xlat4 = vec4<f32>(x_530.x, x_530.y, x_530.z, x_531.w);
  let x_533 : vec4<f32> = u_xlat4;
  let x_535 : i32 = u_xlati22;
  let x_538 : i32 = u_xlati22;
  let x_542 : vec4<f32> = x_364.x_MainLightWorldToShadow[((x_535 + 3i) / 4i)][((x_538 + 3i) % 4i)];
  u_xlat22 = (vec3<f32>(x_533.x, x_533.y, x_533.z) + vec3<f32>(x_542.x, x_542.y, x_542.z));
  let x_546 : f32 = x_364.x_MainLightShadowParams.y;
  u_xlatb4.x = (0.0f < x_546);
  let x_550 : bool = u_xlatb4.x;
  if (x_550) {
    let x_554 : f32 = x_364.x_MainLightShadowParams.y;
    u_xlatb4.x = (x_554 == 1.0f);
    let x_558 : bool = u_xlatb4.x;
    if (x_558) {
      let x_561 : vec3<f32> = u_xlat22;
      let x_565 : vec4<f32> = x_364.x_MainLightShadowOffset0;
      u_xlat4 = (vec4<f32>(x_561.x, x_561.y, x_561.x, x_561.y) + x_565);
      let x_568 : vec4<f32> = u_xlat4;
      let x_569 : vec2<f32> = vec2<f32>(x_568.x, x_568.y);
      let x_571 : f32 = u_xlat22.z;
      txVec0 = vec3<f32>(x_569.x, x_569.y, x_571);
      let x_583 : vec3<f32> = txVec0;
      let x_585 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_583.xy, x_583.z);
      u_xlat5.x = x_585;
      let x_588 : vec4<f32> = u_xlat4;
      let x_589 : vec2<f32> = vec2<f32>(x_588.z, x_588.w);
      let x_591 : f32 = u_xlat22.z;
      txVec1 = vec3<f32>(x_589.x, x_589.y, x_591);
      let x_598 : vec3<f32> = txVec1;
      let x_600 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_598.xy, x_598.z);
      u_xlat5.y = x_600;
      let x_602 : vec3<f32> = u_xlat22;
      let x_605 : vec4<f32> = x_364.x_MainLightShadowOffset1;
      u_xlat4 = (vec4<f32>(x_602.x, x_602.y, x_602.x, x_602.y) + x_605);
      let x_608 : vec4<f32> = u_xlat4;
      let x_609 : vec2<f32> = vec2<f32>(x_608.x, x_608.y);
      let x_611 : f32 = u_xlat22.z;
      txVec2 = vec3<f32>(x_609.x, x_609.y, x_611);
      let x_618 : vec3<f32> = txVec2;
      let x_620 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_618.xy, x_618.z);
      u_xlat5.z = x_620;
      let x_623 : vec4<f32> = u_xlat4;
      let x_624 : vec2<f32> = vec2<f32>(x_623.z, x_623.w);
      let x_626 : f32 = u_xlat22.z;
      txVec3 = vec3<f32>(x_624.x, x_624.y, x_626);
      let x_633 : vec3<f32> = txVec3;
      let x_635 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_633.xy, x_633.z);
      u_xlat5.w = x_635;
      let x_637 : vec4<f32> = u_xlat5;
      u_xlat4.x = dot(x_637, vec4<f32>(0.25f, 0.25f, 0.25f, 0.25f));
    } else {
      let x_644 : f32 = x_364.x_MainLightShadowParams.y;
      u_xlatb23 = (x_644 == 2.0f);
      let x_646 : bool = u_xlatb23;
      if (x_646) {
        let x_650 : vec3<f32> = u_xlat22;
        let x_653 : vec4<f32> = x_364.x_MainLightShadowmapSize;
        u_xlat23 = ((vec2<f32>(x_650.x, x_650.y) * vec2<f32>(x_653.z, x_653.w)) + vec2<f32>(0.5f, 0.5f));
        let x_657 : vec2<f32> = u_xlat23;
        u_xlat23 = floor(x_657);
        let x_659 : vec3<f32> = u_xlat22;
        let x_662 : vec4<f32> = x_364.x_MainLightShadowmapSize;
        let x_665 : vec2<f32> = u_xlat23;
        let x_667 : vec2<f32> = ((vec2<f32>(x_659.x, x_659.y) * vec2<f32>(x_662.z, x_662.w)) + -(x_665));
        let x_668 : vec4<f32> = u_xlat5;
        u_xlat5 = vec4<f32>(x_667.x, x_667.y, x_668.z, x_668.w);
        let x_670 : vec4<f32> = u_xlat5;
        u_xlat6 = (vec4<f32>(x_670.x, x_670.x, x_670.y, x_670.y) + vec4<f32>(0.5f, 1.0f, 0.5f, 1.0f));
        let x_674 : vec4<f32> = u_xlat6;
        let x_676 : vec4<f32> = u_xlat6;
        u_xlat7 = (vec4<f32>(x_674.x, x_674.x, x_674.z, x_674.z) * vec4<f32>(x_676.x, x_676.x, x_676.z, x_676.z));
        let x_680 : vec4<f32> = u_xlat7;
        u_xlat43 = (vec2<f32>(x_680.y, x_680.w) * vec2<f32>(0.079999998f, 0.079999998f));
        let x_685 : vec4<f32> = u_xlat7;
        let x_688 : vec4<f32> = u_xlat5;
        let x_691 : vec2<f32> = ((vec2<f32>(x_685.x, x_685.z) * vec2<f32>(0.5f, 0.5f)) + -(vec2<f32>(x_688.x, x_688.y)));
        let x_692 : vec4<f32> = u_xlat6;
        u_xlat6 = vec4<f32>(x_691.x, x_692.y, x_691.y, x_692.w);
        let x_694 : vec4<f32> = u_xlat5;
        let x_698 : vec2<f32> = (-(vec2<f32>(x_694.x, x_694.y)) + vec2<f32>(1.0f, 1.0f));
        let x_699 : vec4<f32> = u_xlat7;
        u_xlat7 = vec4<f32>(x_698.x, x_698.y, x_699.z, x_699.w);
        let x_702 : vec4<f32> = u_xlat5;
        u_xlat45 = min(vec2<f32>(x_702.x, x_702.y), vec2<f32>(0.0f, 0.0f));
        let x_706 : vec2<f32> = u_xlat45;
        let x_708 : vec2<f32> = u_xlat45;
        let x_710 : vec4<f32> = u_xlat7;
        u_xlat45 = ((-(x_706) * x_708) + vec2<f32>(x_710.x, x_710.y));
        let x_713 : vec4<f32> = u_xlat5;
        let x_715 : vec2<f32> = max(vec2<f32>(x_713.x, x_713.y), vec2<f32>(0.0f, 0.0f));
        let x_716 : vec4<f32> = u_xlat5;
        u_xlat5 = vec4<f32>(x_715.x, x_715.y, x_716.z, x_716.w);
        let x_718 : vec4<f32> = u_xlat5;
        let x_721 : vec4<f32> = u_xlat5;
        let x_724 : vec4<f32> = u_xlat6;
        let x_726 : vec2<f32> = ((-(vec2<f32>(x_718.x, x_718.y)) * vec2<f32>(x_721.x, x_721.y)) + vec2<f32>(x_724.y, x_724.w));
        let x_727 : vec4<f32> = u_xlat5;
        u_xlat5 = vec4<f32>(x_726.x, x_726.y, x_727.z, x_727.w);
        let x_729 : vec2<f32> = u_xlat45;
        u_xlat45 = (x_729 + vec2<f32>(1.0f, 1.0f));
        let x_731 : vec4<f32> = u_xlat5;
        let x_733 : vec2<f32> = (vec2<f32>(x_731.x, x_731.y) + vec2<f32>(1.0f, 1.0f));
        let x_734 : vec4<f32> = u_xlat5;
        u_xlat5 = vec4<f32>(x_733.x, x_733.y, x_734.z, x_734.w);
        let x_737 : vec4<f32> = u_xlat6;
        let x_741 : vec2<f32> = (vec2<f32>(x_737.x, x_737.z) * vec2<f32>(0.159999996f, 0.159999996f));
        let x_742 : vec4<f32> = u_xlat8;
        u_xlat8 = vec4<f32>(x_741.x, x_741.y, x_742.z, x_742.w);
        let x_745 : vec4<f32> = u_xlat7;
        let x_747 : vec2<f32> = (vec2<f32>(x_745.x, x_745.y) * vec2<f32>(0.159999996f, 0.159999996f));
        let x_748 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_747.x, x_747.y, x_748.z, x_748.w);
        let x_750 : vec2<f32> = u_xlat45;
        let x_751 : vec2<f32> = (x_750 * vec2<f32>(0.159999996f, 0.159999996f));
        let x_752 : vec4<f32> = u_xlat7;
        u_xlat7 = vec4<f32>(x_751.x, x_751.y, x_752.z, x_752.w);
        let x_755 : vec4<f32> = u_xlat5;
        let x_757 : vec2<f32> = (vec2<f32>(x_755.x, x_755.y) * vec2<f32>(0.159999996f, 0.159999996f));
        let x_758 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_757.x, x_757.y, x_758.z, x_758.w);
        let x_760 : vec4<f32> = u_xlat6;
        let x_762 : vec2<f32> = (vec2<f32>(x_760.y, x_760.w) * vec2<f32>(0.159999996f, 0.159999996f));
        let x_763 : vec4<f32> = u_xlat5;
        u_xlat5 = vec4<f32>(x_762.x, x_762.y, x_763.z, x_763.w);
        let x_766 : f32 = u_xlat7.x;
        u_xlat8.z = x_766;
        let x_769 : f32 = u_xlat5.x;
        u_xlat8.w = x_769;
        let x_772 : f32 = u_xlat10.x;
        u_xlat9.z = x_772;
        let x_775 : f32 = u_xlat43.x;
        u_xlat9.w = x_775;
        let x_777 : vec4<f32> = u_xlat8;
        let x_779 : vec4<f32> = u_xlat9;
        u_xlat6 = (vec4<f32>(x_777.z, x_777.w, x_777.x, x_777.z) + vec4<f32>(x_779.z, x_779.w, x_779.x, x_779.z));
        let x_783 : f32 = u_xlat8.y;
        u_xlat7.z = x_783;
        let x_786 : f32 = u_xlat5.y;
        u_xlat7.w = x_786;
        let x_789 : f32 = u_xlat9.y;
        u_xlat10.z = x_789;
        let x_792 : f32 = u_xlat43.y;
        u_xlat10.w = x_792;
        let x_794 : vec4<f32> = u_xlat7;
        let x_796 : vec4<f32> = u_xlat10;
        let x_798 : vec3<f32> = (vec3<f32>(x_794.z, x_794.y, x_794.w) + vec3<f32>(x_796.z, x_796.y, x_796.w));
        let x_799 : vec4<f32> = u_xlat5;
        u_xlat5 = vec4<f32>(x_798.x, x_798.y, x_798.z, x_799.w);
        let x_801 : vec4<f32> = u_xlat9;
        let x_803 : vec4<f32> = u_xlat6;
        let x_805 : vec3<f32> = (vec3<f32>(x_801.x, x_801.z, x_801.w) / vec3<f32>(x_803.z, x_803.w, x_803.y));
        let x_806 : vec4<f32> = u_xlat7;
        u_xlat7 = vec4<f32>(x_805.x, x_805.y, x_805.z, x_806.w);
        let x_808 : vec4<f32> = u_xlat7;
        let x_814 : vec3<f32> = (vec3<f32>(x_808.x, x_808.y, x_808.z) + vec3<f32>(-2.5f, -0.5f, 1.5f));
        let x_815 : vec4<f32> = u_xlat7;
        u_xlat7 = vec4<f32>(x_814.x, x_814.y, x_814.z, x_815.w);
        let x_817 : vec4<f32> = u_xlat10;
        let x_819 : vec4<f32> = u_xlat5;
        let x_821 : vec3<f32> = (vec3<f32>(x_817.z, x_817.y, x_817.w) / vec3<f32>(x_819.x, x_819.y, x_819.z));
        let x_822 : vec4<f32> = u_xlat8;
        u_xlat8 = vec4<f32>(x_821.x, x_821.y, x_821.z, x_822.w);
        let x_824 : vec4<f32> = u_xlat8;
        let x_826 : vec3<f32> = (vec3<f32>(x_824.x, x_824.y, x_824.z) + vec3<f32>(-2.5f, -0.5f, 1.5f));
        let x_827 : vec4<f32> = u_xlat8;
        u_xlat8 = vec4<f32>(x_826.x, x_826.y, x_826.z, x_827.w);
        let x_829 : vec4<f32> = u_xlat7;
        let x_832 : vec4<f32> = x_364.x_MainLightShadowmapSize;
        let x_834 : vec3<f32> = (vec3<f32>(x_829.y, x_829.x, x_829.z) * vec3<f32>(x_832.x, x_832.x, x_832.x));
        let x_835 : vec4<f32> = u_xlat7;
        u_xlat7 = vec4<f32>(x_834.x, x_834.y, x_834.z, x_835.w);
        let x_837 : vec4<f32> = u_xlat8;
        let x_840 : vec4<f32> = x_364.x_MainLightShadowmapSize;
        let x_842 : vec3<f32> = (vec3<f32>(x_837.x, x_837.y, x_837.z) * vec3<f32>(x_840.y, x_840.y, x_840.y));
        let x_843 : vec4<f32> = u_xlat8;
        u_xlat8 = vec4<f32>(x_842.x, x_842.y, x_842.z, x_843.w);
        let x_846 : f32 = u_xlat8.x;
        u_xlat7.w = x_846;
        let x_848 : vec2<f32> = u_xlat23;
        let x_851 : vec4<f32> = x_364.x_MainLightShadowmapSize;
        let x_854 : vec4<f32> = u_xlat7;
        u_xlat9 = ((vec4<f32>(x_848.x, x_848.y, x_848.x, x_848.y) * vec4<f32>(x_851.x, x_851.y, x_851.x, x_851.y)) + vec4<f32>(x_854.y, x_854.w, x_854.x, x_854.w));
        let x_857 : vec2<f32> = u_xlat23;
        let x_859 : vec4<f32> = x_364.x_MainLightShadowmapSize;
        let x_862 : vec4<f32> = u_xlat7;
        let x_864 : vec2<f32> = ((x_857 * vec2<f32>(x_859.x, x_859.y)) + vec2<f32>(x_862.z, x_862.w));
        let x_865 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_864.x, x_864.y, x_865.z, x_865.w);
        let x_868 : f32 = u_xlat7.y;
        u_xlat8.w = x_868;
        let x_870 : vec4<f32> = u_xlat8;
        let x_871 : vec2<f32> = vec2<f32>(x_870.y, x_870.z);
        let x_872 : vec4<f32> = u_xlat7;
        u_xlat7 = vec4<f32>(x_872.x, x_871.x, x_872.z, x_871.y);
        let x_875 : vec2<f32> = u_xlat23;
        let x_878 : vec4<f32> = x_364.x_MainLightShadowmapSize;
        let x_881 : vec4<f32> = u_xlat7;
        u_xlat11 = ((vec4<f32>(x_875.x, x_875.y, x_875.x, x_875.y) * vec4<f32>(x_878.x, x_878.y, x_878.x, x_878.y)) + vec4<f32>(x_881.x, x_881.y, x_881.z, x_881.y));
        let x_884 : vec2<f32> = u_xlat23;
        let x_887 : vec4<f32> = x_364.x_MainLightShadowmapSize;
        let x_890 : vec4<f32> = u_xlat8;
        u_xlat8 = ((vec4<f32>(x_884.x, x_884.y, x_884.x, x_884.y) * vec4<f32>(x_887.x, x_887.y, x_887.x, x_887.y)) + vec4<f32>(x_890.w, x_890.y, x_890.w, x_890.z));
        let x_893 : vec2<f32> = u_xlat23;
        let x_896 : vec4<f32> = x_364.x_MainLightShadowmapSize;
        let x_899 : vec4<f32> = u_xlat7;
        u_xlat7 = ((vec4<f32>(x_893.x, x_893.y, x_893.x, x_893.y) * vec4<f32>(x_896.x, x_896.y, x_896.x, x_896.y)) + vec4<f32>(x_899.x, x_899.w, x_899.z, x_899.w));
        let x_903 : vec4<f32> = u_xlat5;
        let x_905 : vec4<f32> = u_xlat6;
        u_xlat12 = (vec4<f32>(x_903.x, x_903.x, x_903.x, x_903.y) * vec4<f32>(x_905.z, x_905.w, x_905.y, x_905.z));
        let x_909 : vec4<f32> = u_xlat5;
        let x_911 : vec4<f32> = u_xlat6;
        u_xlat13 = (vec4<f32>(x_909.y, x_909.y, x_909.z, x_909.z) * x_911);
        let x_914 : f32 = u_xlat5.z;
        let x_916 : f32 = u_xlat6.y;
        u_xlat23.x = (x_914 * x_916);
        let x_920 : vec4<f32> = u_xlat9;
        let x_921 : vec2<f32> = vec2<f32>(x_920.x, x_920.y);
        let x_923 : f32 = u_xlat22.z;
        txVec4 = vec3<f32>(x_921.x, x_921.y, x_923);
        let x_931 : vec3<f32> = txVec4;
        let x_933 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_931.xy, x_931.z);
        u_xlat42 = x_933;
        let x_935 : vec4<f32> = u_xlat9;
        let x_936 : vec2<f32> = vec2<f32>(x_935.z, x_935.w);
        let x_938 : f32 = u_xlat22.z;
        txVec5 = vec3<f32>(x_936.x, x_936.y, x_938);
        let x_946 : vec3<f32> = txVec5;
        let x_948 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_946.xy, x_946.z);
        u_xlat61 = x_948;
        let x_949 : f32 = u_xlat61;
        let x_951 : f32 = u_xlat12.y;
        u_xlat61 = (x_949 * x_951);
        let x_954 : f32 = u_xlat12.x;
        let x_955 : f32 = u_xlat42;
        let x_957 : f32 = u_xlat61;
        u_xlat42 = ((x_954 * x_955) + x_957);
        let x_960 : vec4<f32> = u_xlat10;
        let x_961 : vec2<f32> = vec2<f32>(x_960.x, x_960.y);
        let x_963 : f32 = u_xlat22.z;
        txVec6 = vec3<f32>(x_961.x, x_961.y, x_963);
        let x_970 : vec3<f32> = txVec6;
        let x_972 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_970.xy, x_970.z);
        u_xlat61 = x_972;
        let x_974 : f32 = u_xlat12.z;
        let x_975 : f32 = u_xlat61;
        let x_977 : f32 = u_xlat42;
        u_xlat42 = ((x_974 * x_975) + x_977);
        let x_980 : vec4<f32> = u_xlat8;
        let x_981 : vec2<f32> = vec2<f32>(x_980.x, x_980.y);
        let x_983 : f32 = u_xlat22.z;
        txVec7 = vec3<f32>(x_981.x, x_981.y, x_983);
        let x_990 : vec3<f32> = txVec7;
        let x_992 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_990.xy, x_990.z);
        u_xlat61 = x_992;
        let x_994 : f32 = u_xlat12.w;
        let x_995 : f32 = u_xlat61;
        let x_997 : f32 = u_xlat42;
        u_xlat42 = ((x_994 * x_995) + x_997);
        let x_1000 : vec4<f32> = u_xlat11;
        let x_1001 : vec2<f32> = vec2<f32>(x_1000.x, x_1000.y);
        let x_1003 : f32 = u_xlat22.z;
        txVec8 = vec3<f32>(x_1001.x, x_1001.y, x_1003);
        let x_1010 : vec3<f32> = txVec8;
        let x_1012 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1010.xy, x_1010.z);
        u_xlat61 = x_1012;
        let x_1014 : f32 = u_xlat13.x;
        let x_1015 : f32 = u_xlat61;
        let x_1017 : f32 = u_xlat42;
        u_xlat42 = ((x_1014 * x_1015) + x_1017);
        let x_1020 : vec4<f32> = u_xlat11;
        let x_1021 : vec2<f32> = vec2<f32>(x_1020.z, x_1020.w);
        let x_1023 : f32 = u_xlat22.z;
        txVec9 = vec3<f32>(x_1021.x, x_1021.y, x_1023);
        let x_1030 : vec3<f32> = txVec9;
        let x_1032 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1030.xy, x_1030.z);
        u_xlat61 = x_1032;
        let x_1034 : f32 = u_xlat13.y;
        let x_1035 : f32 = u_xlat61;
        let x_1037 : f32 = u_xlat42;
        u_xlat42 = ((x_1034 * x_1035) + x_1037);
        let x_1040 : vec4<f32> = u_xlat8;
        let x_1041 : vec2<f32> = vec2<f32>(x_1040.z, x_1040.w);
        let x_1043 : f32 = u_xlat22.z;
        txVec10 = vec3<f32>(x_1041.x, x_1041.y, x_1043);
        let x_1050 : vec3<f32> = txVec10;
        let x_1052 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1050.xy, x_1050.z);
        u_xlat61 = x_1052;
        let x_1054 : f32 = u_xlat13.z;
        let x_1055 : f32 = u_xlat61;
        let x_1057 : f32 = u_xlat42;
        u_xlat42 = ((x_1054 * x_1055) + x_1057);
        let x_1060 : vec4<f32> = u_xlat7;
        let x_1061 : vec2<f32> = vec2<f32>(x_1060.x, x_1060.y);
        let x_1063 : f32 = u_xlat22.z;
        txVec11 = vec3<f32>(x_1061.x, x_1061.y, x_1063);
        let x_1070 : vec3<f32> = txVec11;
        let x_1072 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1070.xy, x_1070.z);
        u_xlat61 = x_1072;
        let x_1074 : f32 = u_xlat13.w;
        let x_1075 : f32 = u_xlat61;
        let x_1077 : f32 = u_xlat42;
        u_xlat42 = ((x_1074 * x_1075) + x_1077);
        let x_1080 : vec4<f32> = u_xlat7;
        let x_1081 : vec2<f32> = vec2<f32>(x_1080.z, x_1080.w);
        let x_1083 : f32 = u_xlat22.z;
        txVec12 = vec3<f32>(x_1081.x, x_1081.y, x_1083);
        let x_1090 : vec3<f32> = txVec12;
        let x_1092 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1090.xy, x_1090.z);
        u_xlat61 = x_1092;
        let x_1094 : f32 = u_xlat23.x;
        let x_1095 : f32 = u_xlat61;
        let x_1097 : f32 = u_xlat42;
        u_xlat4.x = ((x_1094 * x_1095) + x_1097);
      } else {
        let x_1101 : vec3<f32> = u_xlat22;
        let x_1104 : vec4<f32> = x_364.x_MainLightShadowmapSize;
        u_xlat23 = ((vec2<f32>(x_1101.x, x_1101.y) * vec2<f32>(x_1104.z, x_1104.w)) + vec2<f32>(0.5f, 0.5f));
        let x_1108 : vec2<f32> = u_xlat23;
        u_xlat23 = floor(x_1108);
        let x_1110 : vec3<f32> = u_xlat22;
        let x_1113 : vec4<f32> = x_364.x_MainLightShadowmapSize;
        let x_1116 : vec2<f32> = u_xlat23;
        let x_1118 : vec2<f32> = ((vec2<f32>(x_1110.x, x_1110.y) * vec2<f32>(x_1113.z, x_1113.w)) + -(x_1116));
        let x_1119 : vec4<f32> = u_xlat5;
        u_xlat5 = vec4<f32>(x_1118.x, x_1118.y, x_1119.z, x_1119.w);
        let x_1121 : vec4<f32> = u_xlat5;
        u_xlat6 = (vec4<f32>(x_1121.x, x_1121.x, x_1121.y, x_1121.y) + vec4<f32>(0.5f, 1.0f, 0.5f, 1.0f));
        let x_1124 : vec4<f32> = u_xlat6;
        let x_1126 : vec4<f32> = u_xlat6;
        u_xlat7 = (vec4<f32>(x_1124.x, x_1124.x, x_1124.z, x_1124.z) * vec4<f32>(x_1126.x, x_1126.x, x_1126.z, x_1126.z));
        let x_1129 : vec4<f32> = u_xlat7;
        let x_1133 : vec2<f32> = (vec2<f32>(x_1129.y, x_1129.w) * vec2<f32>(0.040816002f, 0.040816002f));
        let x_1134 : vec4<f32> = u_xlat8;
        u_xlat8 = vec4<f32>(x_1134.x, x_1133.x, x_1134.z, x_1133.y);
        let x_1136 : vec4<f32> = u_xlat7;
        let x_1139 : vec4<f32> = u_xlat5;
        u_xlat43 = ((vec2<f32>(x_1136.x, x_1136.z) * vec2<f32>(0.5f, 0.5f)) + -(vec2<f32>(x_1139.x, x_1139.y)));
        let x_1143 : vec4<f32> = u_xlat5;
        let x_1146 : vec2<f32> = (-(vec2<f32>(x_1143.x, x_1143.y)) + vec2<f32>(1.0f, 1.0f));
        let x_1147 : vec4<f32> = u_xlat6;
        u_xlat6 = vec4<f32>(x_1146.x, x_1147.y, x_1146.y, x_1147.w);
        let x_1149 : vec4<f32> = u_xlat5;
        let x_1151 : vec2<f32> = min(vec2<f32>(x_1149.x, x_1149.y), vec2<f32>(0.0f, 0.0f));
        let x_1152 : vec4<f32> = u_xlat7;
        u_xlat7 = vec4<f32>(x_1151.x, x_1151.y, x_1152.z, x_1152.w);
        let x_1154 : vec4<f32> = u_xlat7;
        let x_1157 : vec4<f32> = u_xlat7;
        let x_1160 : vec4<f32> = u_xlat6;
        let x_1162 : vec2<f32> = ((-(vec2<f32>(x_1154.x, x_1154.y)) * vec2<f32>(x_1157.x, x_1157.y)) + vec2<f32>(x_1160.x, x_1160.z));
        let x_1163 : vec4<f32> = u_xlat6;
        u_xlat6 = vec4<f32>(x_1162.x, x_1163.y, x_1162.y, x_1163.w);
        let x_1165 : vec4<f32> = u_xlat5;
        let x_1167 : vec2<f32> = max(vec2<f32>(x_1165.x, x_1165.y), vec2<f32>(0.0f, 0.0f));
        let x_1168 : vec4<f32> = u_xlat7;
        u_xlat7 = vec4<f32>(x_1167.x, x_1167.y, x_1168.z, x_1168.w);
        let x_1170 : vec4<f32> = u_xlat7;
        let x_1173 : vec4<f32> = u_xlat7;
        let x_1176 : vec4<f32> = u_xlat6;
        let x_1178 : vec2<f32> = ((-(vec2<f32>(x_1170.x, x_1170.y)) * vec2<f32>(x_1173.x, x_1173.y)) + vec2<f32>(x_1176.y, x_1176.w));
        let x_1179 : vec4<f32> = u_xlat6;
        u_xlat6 = vec4<f32>(x_1179.x, x_1178.x, x_1179.z, x_1178.y);
        let x_1181 : vec4<f32> = u_xlat6;
        u_xlat6 = (x_1181 + vec4<f32>(2.0f, 2.0f, 2.0f, 2.0f));
        let x_1185 : f32 = u_xlat6.y;
        u_xlat7.z = (x_1185 * 0.081632003f);
        let x_1189 : vec2<f32> = u_xlat43;
        let x_1192 : vec2<f32> = (vec2<f32>(x_1189.y, x_1189.x) * vec2<f32>(0.081632003f, 0.081632003f));
        let x_1193 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_1192.x, x_1192.y, x_1193.z, x_1193.w);
        let x_1195 : vec4<f32> = u_xlat6;
        u_xlat43 = (vec2<f32>(x_1195.x, x_1195.z) * vec2<f32>(0.081632003f, 0.081632003f));
        let x_1199 : f32 = u_xlat6.w;
        u_xlat9.z = (x_1199 * 0.081632003f);
        let x_1203 : f32 = u_xlat9.y;
        u_xlat7.x = x_1203;
        let x_1205 : vec4<f32> = u_xlat5;
        let x_1212 : vec2<f32> = ((vec2<f32>(x_1205.x, x_1205.x) * vec2<f32>(-0.081632003f, 0.081632003f)) + vec2<f32>(0.163264006f, 0.081632003f));
        let x_1213 : vec4<f32> = u_xlat7;
        u_xlat7 = vec4<f32>(x_1213.x, x_1212.x, x_1213.z, x_1212.y);
        let x_1215 : vec4<f32> = u_xlat5;
        let x_1219 : vec2<f32> = ((vec2<f32>(x_1215.x, x_1215.x) * vec2<f32>(-0.081632003f, 0.081632003f)) + vec2<f32>(0.081632003f, 0.163264006f));
        let x_1220 : vec4<f32> = u_xlat6;
        u_xlat6 = vec4<f32>(x_1219.x, x_1220.y, x_1219.y, x_1220.w);
        let x_1223 : f32 = u_xlat43.x;
        u_xlat6.y = x_1223;
        let x_1226 : f32 = u_xlat8.y;
        u_xlat6.w = x_1226;
        let x_1228 : vec4<f32> = u_xlat6;
        let x_1229 : vec4<f32> = u_xlat7;
        u_xlat7 = (x_1228 + x_1229);
        let x_1231 : vec4<f32> = u_xlat5;
        let x_1234 : vec2<f32> = ((vec2<f32>(x_1231.y, x_1231.y) * vec2<f32>(-0.081632003f, 0.081632003f)) + vec2<f32>(0.163264006f, 0.081632003f));
        let x_1235 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_1235.x, x_1234.x, x_1235.z, x_1234.y);
        let x_1237 : vec4<f32> = u_xlat5;
        let x_1240 : vec2<f32> = ((vec2<f32>(x_1237.y, x_1237.y) * vec2<f32>(-0.081632003f, 0.081632003f)) + vec2<f32>(0.081632003f, 0.163264006f));
        let x_1241 : vec4<f32> = u_xlat8;
        u_xlat8 = vec4<f32>(x_1240.x, x_1241.y, x_1240.y, x_1241.w);
        let x_1244 : f32 = u_xlat43.y;
        u_xlat8.y = x_1244;
        let x_1246 : vec4<f32> = u_xlat8;
        let x_1247 : vec4<f32> = u_xlat9;
        u_xlat5 = (x_1246 + x_1247);
        let x_1249 : vec4<f32> = u_xlat6;
        let x_1250 : vec4<f32> = u_xlat7;
        u_xlat6 = (x_1249 / x_1250);
        let x_1252 : vec4<f32> = u_xlat6;
        u_xlat6 = (x_1252 + vec4<f32>(-3.5f, -1.5f, 0.5f, 2.5f));
        let x_1258 : vec4<f32> = u_xlat8;
        let x_1259 : vec4<f32> = u_xlat5;
        u_xlat8 = (x_1258 / x_1259);
        let x_1261 : vec4<f32> = u_xlat8;
        u_xlat8 = (x_1261 + vec4<f32>(-3.5f, -1.5f, 0.5f, 2.5f));
        let x_1263 : vec4<f32> = u_xlat6;
        let x_1266 : vec4<f32> = x_364.x_MainLightShadowmapSize;
        u_xlat6 = (vec4<f32>(x_1263.w, x_1263.x, x_1263.y, x_1263.z) * vec4<f32>(x_1266.x, x_1266.x, x_1266.x, x_1266.x));
        let x_1269 : vec4<f32> = u_xlat8;
        let x_1272 : vec4<f32> = x_364.x_MainLightShadowmapSize;
        u_xlat8 = (vec4<f32>(x_1269.x, x_1269.w, x_1269.y, x_1269.z) * vec4<f32>(x_1272.y, x_1272.y, x_1272.y, x_1272.y));
        let x_1275 : vec4<f32> = u_xlat6;
        let x_1276 : vec3<f32> = vec3<f32>(x_1275.y, x_1275.z, x_1275.w);
        let x_1277 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_1276.x, x_1277.y, x_1276.y, x_1276.z);
        let x_1280 : f32 = u_xlat8.x;
        u_xlat9.y = x_1280;
        let x_1282 : vec2<f32> = u_xlat23;
        let x_1285 : vec4<f32> = x_364.x_MainLightShadowmapSize;
        let x_1288 : vec4<f32> = u_xlat9;
        u_xlat10 = ((vec4<f32>(x_1282.x, x_1282.y, x_1282.x, x_1282.y) * vec4<f32>(x_1285.x, x_1285.y, x_1285.x, x_1285.y)) + vec4<f32>(x_1288.x, x_1288.y, x_1288.z, x_1288.y));
        let x_1291 : vec2<f32> = u_xlat23;
        let x_1293 : vec4<f32> = x_364.x_MainLightShadowmapSize;
        let x_1296 : vec4<f32> = u_xlat9;
        let x_1298 : vec2<f32> = ((x_1291 * vec2<f32>(x_1293.x, x_1293.y)) + vec2<f32>(x_1296.w, x_1296.y));
        let x_1299 : vec4<f32> = u_xlat11;
        u_xlat11 = vec4<f32>(x_1298.x, x_1298.y, x_1299.z, x_1299.w);
        let x_1302 : f32 = u_xlat9.y;
        u_xlat6.y = x_1302;
        let x_1305 : f32 = u_xlat8.z;
        u_xlat9.y = x_1305;
        let x_1307 : vec2<f32> = u_xlat23;
        let x_1310 : vec4<f32> = x_364.x_MainLightShadowmapSize;
        let x_1313 : vec4<f32> = u_xlat9;
        u_xlat12 = ((vec4<f32>(x_1307.x, x_1307.y, x_1307.x, x_1307.y) * vec4<f32>(x_1310.x, x_1310.y, x_1310.x, x_1310.y)) + vec4<f32>(x_1313.x, x_1313.y, x_1313.z, x_1313.y));
        let x_1317 : vec2<f32> = u_xlat23;
        let x_1319 : vec4<f32> = x_364.x_MainLightShadowmapSize;
        let x_1322 : vec4<f32> = u_xlat9;
        u_xlat49 = ((x_1317 * vec2<f32>(x_1319.x, x_1319.y)) + vec2<f32>(x_1322.w, x_1322.y));
        let x_1326 : f32 = u_xlat9.y;
        u_xlat6.z = x_1326;
        let x_1328 : vec2<f32> = u_xlat23;
        let x_1331 : vec4<f32> = x_364.x_MainLightShadowmapSize;
        let x_1334 : vec4<f32> = u_xlat6;
        u_xlat13 = ((vec4<f32>(x_1328.x, x_1328.y, x_1328.x, x_1328.y) * vec4<f32>(x_1331.x, x_1331.y, x_1331.x, x_1331.y)) + vec4<f32>(x_1334.x, x_1334.y, x_1334.x, x_1334.z));
        let x_1338 : f32 = u_xlat8.w;
        u_xlat9.y = x_1338;
        let x_1341 : vec2<f32> = u_xlat23;
        let x_1344 : vec4<f32> = x_364.x_MainLightShadowmapSize;
        let x_1347 : vec4<f32> = u_xlat9;
        u_xlat14 = ((vec4<f32>(x_1341.x, x_1341.y, x_1341.x, x_1341.y) * vec4<f32>(x_1344.x, x_1344.y, x_1344.x, x_1344.y)) + vec4<f32>(x_1347.x, x_1347.y, x_1347.z, x_1347.y));
        let x_1351 : vec2<f32> = u_xlat23;
        let x_1353 : vec4<f32> = x_364.x_MainLightShadowmapSize;
        let x_1356 : vec4<f32> = u_xlat9;
        u_xlat25 = ((x_1351 * vec2<f32>(x_1353.x, x_1353.y)) + vec2<f32>(x_1356.w, x_1356.y));
        let x_1360 : f32 = u_xlat9.y;
        u_xlat6.w = x_1360;
        let x_1363 : vec2<f32> = u_xlat23;
        let x_1365 : vec4<f32> = x_364.x_MainLightShadowmapSize;
        let x_1368 : vec4<f32> = u_xlat6;
        u_xlat15 = ((x_1363 * vec2<f32>(x_1365.x, x_1365.y)) + vec2<f32>(x_1368.x, x_1368.w));
        let x_1371 : vec4<f32> = u_xlat9;
        let x_1372 : vec3<f32> = vec3<f32>(x_1371.x, x_1371.z, x_1371.w);
        let x_1373 : vec4<f32> = u_xlat8;
        u_xlat8 = vec4<f32>(x_1372.x, x_1373.y, x_1372.y, x_1372.z);
        let x_1375 : vec2<f32> = u_xlat23;
        let x_1378 : vec4<f32> = x_364.x_MainLightShadowmapSize;
        let x_1381 : vec4<f32> = u_xlat8;
        u_xlat9 = ((vec4<f32>(x_1375.x, x_1375.y, x_1375.x, x_1375.y) * vec4<f32>(x_1378.x, x_1378.y, x_1378.x, x_1378.y)) + vec4<f32>(x_1381.x, x_1381.y, x_1381.z, x_1381.y));
        let x_1385 : vec2<f32> = u_xlat23;
        let x_1387 : vec4<f32> = x_364.x_MainLightShadowmapSize;
        let x_1390 : vec4<f32> = u_xlat8;
        u_xlat46 = ((x_1385 * vec2<f32>(x_1387.x, x_1387.y)) + vec2<f32>(x_1390.w, x_1390.y));
        let x_1394 : f32 = u_xlat6.x;
        u_xlat8.x = x_1394;
        let x_1396 : vec2<f32> = u_xlat23;
        let x_1398 : vec4<f32> = x_364.x_MainLightShadowmapSize;
        let x_1401 : vec4<f32> = u_xlat8;
        u_xlat23 = ((x_1396 * vec2<f32>(x_1398.x, x_1398.y)) + vec2<f32>(x_1401.x, x_1401.y));
        let x_1405 : vec4<f32> = u_xlat5;
        let x_1407 : vec4<f32> = u_xlat7;
        u_xlat16 = (vec4<f32>(x_1405.x, x_1405.x, x_1405.x, x_1405.x) * x_1407);
        let x_1410 : vec4<f32> = u_xlat5;
        let x_1412 : vec4<f32> = u_xlat7;
        u_xlat17 = (vec4<f32>(x_1410.y, x_1410.y, x_1410.y, x_1410.y) * x_1412);
        let x_1415 : vec4<f32> = u_xlat5;
        let x_1417 : vec4<f32> = u_xlat7;
        u_xlat18 = (vec4<f32>(x_1415.z, x_1415.z, x_1415.z, x_1415.z) * x_1417);
        let x_1419 : vec4<f32> = u_xlat5;
        let x_1421 : vec4<f32> = u_xlat7;
        u_xlat5 = (vec4<f32>(x_1419.w, x_1419.w, x_1419.w, x_1419.w) * x_1421);
        let x_1424 : vec4<f32> = u_xlat10;
        let x_1425 : vec2<f32> = vec2<f32>(x_1424.x, x_1424.y);
        let x_1427 : f32 = u_xlat22.z;
        txVec13 = vec3<f32>(x_1425.x, x_1425.y, x_1427);
        let x_1434 : vec3<f32> = txVec13;
        let x_1436 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1434.xy, x_1434.z);
        u_xlat61 = x_1436;
        let x_1438 : vec4<f32> = u_xlat10;
        let x_1439 : vec2<f32> = vec2<f32>(x_1438.z, x_1438.w);
        let x_1441 : f32 = u_xlat22.z;
        txVec14 = vec3<f32>(x_1439.x, x_1439.y, x_1441);
        let x_1448 : vec3<f32> = txVec14;
        let x_1450 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1448.xy, x_1448.z);
        u_xlat6.x = x_1450;
        let x_1453 : f32 = u_xlat6.x;
        let x_1455 : f32 = u_xlat16.y;
        u_xlat6.x = (x_1453 * x_1455);
        let x_1459 : f32 = u_xlat16.x;
        let x_1460 : f32 = u_xlat61;
        let x_1463 : f32 = u_xlat6.x;
        u_xlat61 = ((x_1459 * x_1460) + x_1463);
        let x_1466 : vec4<f32> = u_xlat11;
        let x_1467 : vec2<f32> = vec2<f32>(x_1466.x, x_1466.y);
        let x_1469 : f32 = u_xlat22.z;
        txVec15 = vec3<f32>(x_1467.x, x_1467.y, x_1469);
        let x_1476 : vec3<f32> = txVec15;
        let x_1478 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1476.xy, x_1476.z);
        u_xlat6.x = x_1478;
        let x_1481 : f32 = u_xlat16.z;
        let x_1483 : f32 = u_xlat6.x;
        let x_1485 : f32 = u_xlat61;
        u_xlat61 = ((x_1481 * x_1483) + x_1485);
        let x_1488 : vec4<f32> = u_xlat13;
        let x_1489 : vec2<f32> = vec2<f32>(x_1488.x, x_1488.y);
        let x_1491 : f32 = u_xlat22.z;
        txVec16 = vec3<f32>(x_1489.x, x_1489.y, x_1491);
        let x_1498 : vec3<f32> = txVec16;
        let x_1500 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1498.xy, x_1498.z);
        u_xlat6.x = x_1500;
        let x_1503 : f32 = u_xlat16.w;
        let x_1505 : f32 = u_xlat6.x;
        let x_1507 : f32 = u_xlat61;
        u_xlat61 = ((x_1503 * x_1505) + x_1507);
        let x_1510 : vec4<f32> = u_xlat12;
        let x_1511 : vec2<f32> = vec2<f32>(x_1510.x, x_1510.y);
        let x_1513 : f32 = u_xlat22.z;
        txVec17 = vec3<f32>(x_1511.x, x_1511.y, x_1513);
        let x_1520 : vec3<f32> = txVec17;
        let x_1522 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1520.xy, x_1520.z);
        u_xlat6.x = x_1522;
        let x_1525 : f32 = u_xlat17.x;
        let x_1527 : f32 = u_xlat6.x;
        let x_1529 : f32 = u_xlat61;
        u_xlat61 = ((x_1525 * x_1527) + x_1529);
        let x_1532 : vec4<f32> = u_xlat12;
        let x_1533 : vec2<f32> = vec2<f32>(x_1532.z, x_1532.w);
        let x_1535 : f32 = u_xlat22.z;
        txVec18 = vec3<f32>(x_1533.x, x_1533.y, x_1535);
        let x_1542 : vec3<f32> = txVec18;
        let x_1544 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1542.xy, x_1542.z);
        u_xlat6.x = x_1544;
        let x_1547 : f32 = u_xlat17.y;
        let x_1549 : f32 = u_xlat6.x;
        let x_1551 : f32 = u_xlat61;
        u_xlat61 = ((x_1547 * x_1549) + x_1551);
        let x_1554 : vec2<f32> = u_xlat49;
        let x_1556 : f32 = u_xlat22.z;
        txVec19 = vec3<f32>(x_1554.x, x_1554.y, x_1556);
        let x_1563 : vec3<f32> = txVec19;
        let x_1565 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1563.xy, x_1563.z);
        u_xlat6.x = x_1565;
        let x_1568 : f32 = u_xlat17.z;
        let x_1570 : f32 = u_xlat6.x;
        let x_1572 : f32 = u_xlat61;
        u_xlat61 = ((x_1568 * x_1570) + x_1572);
        let x_1575 : vec4<f32> = u_xlat13;
        let x_1576 : vec2<f32> = vec2<f32>(x_1575.z, x_1575.w);
        let x_1578 : f32 = u_xlat22.z;
        txVec20 = vec3<f32>(x_1576.x, x_1576.y, x_1578);
        let x_1585 : vec3<f32> = txVec20;
        let x_1587 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1585.xy, x_1585.z);
        u_xlat6.x = x_1587;
        let x_1590 : f32 = u_xlat17.w;
        let x_1592 : f32 = u_xlat6.x;
        let x_1594 : f32 = u_xlat61;
        u_xlat61 = ((x_1590 * x_1592) + x_1594);
        let x_1597 : vec4<f32> = u_xlat14;
        let x_1598 : vec2<f32> = vec2<f32>(x_1597.x, x_1597.y);
        let x_1600 : f32 = u_xlat22.z;
        txVec21 = vec3<f32>(x_1598.x, x_1598.y, x_1600);
        let x_1607 : vec3<f32> = txVec21;
        let x_1609 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1607.xy, x_1607.z);
        u_xlat6.x = x_1609;
        let x_1612 : f32 = u_xlat18.x;
        let x_1614 : f32 = u_xlat6.x;
        let x_1616 : f32 = u_xlat61;
        u_xlat61 = ((x_1612 * x_1614) + x_1616);
        let x_1619 : vec4<f32> = u_xlat14;
        let x_1620 : vec2<f32> = vec2<f32>(x_1619.z, x_1619.w);
        let x_1622 : f32 = u_xlat22.z;
        txVec22 = vec3<f32>(x_1620.x, x_1620.y, x_1622);
        let x_1629 : vec3<f32> = txVec22;
        let x_1631 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1629.xy, x_1629.z);
        u_xlat6.x = x_1631;
        let x_1634 : f32 = u_xlat18.y;
        let x_1636 : f32 = u_xlat6.x;
        let x_1638 : f32 = u_xlat61;
        u_xlat61 = ((x_1634 * x_1636) + x_1638);
        let x_1641 : vec2<f32> = u_xlat25;
        let x_1643 : f32 = u_xlat22.z;
        txVec23 = vec3<f32>(x_1641.x, x_1641.y, x_1643);
        let x_1650 : vec3<f32> = txVec23;
        let x_1652 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1650.xy, x_1650.z);
        u_xlat6.x = x_1652;
        let x_1655 : f32 = u_xlat18.z;
        let x_1657 : f32 = u_xlat6.x;
        let x_1659 : f32 = u_xlat61;
        u_xlat61 = ((x_1655 * x_1657) + x_1659);
        let x_1662 : vec2<f32> = u_xlat15;
        let x_1664 : f32 = u_xlat22.z;
        txVec24 = vec3<f32>(x_1662.x, x_1662.y, x_1664);
        let x_1671 : vec3<f32> = txVec24;
        let x_1673 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1671.xy, x_1671.z);
        u_xlat6.x = x_1673;
        let x_1676 : f32 = u_xlat18.w;
        let x_1678 : f32 = u_xlat6.x;
        let x_1680 : f32 = u_xlat61;
        u_xlat61 = ((x_1676 * x_1678) + x_1680);
        let x_1683 : vec4<f32> = u_xlat9;
        let x_1684 : vec2<f32> = vec2<f32>(x_1683.x, x_1683.y);
        let x_1686 : f32 = u_xlat22.z;
        txVec25 = vec3<f32>(x_1684.x, x_1684.y, x_1686);
        let x_1693 : vec3<f32> = txVec25;
        let x_1695 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1693.xy, x_1693.z);
        u_xlat6.x = x_1695;
        let x_1698 : f32 = u_xlat5.x;
        let x_1700 : f32 = u_xlat6.x;
        let x_1702 : f32 = u_xlat61;
        u_xlat61 = ((x_1698 * x_1700) + x_1702);
        let x_1705 : vec4<f32> = u_xlat9;
        let x_1706 : vec2<f32> = vec2<f32>(x_1705.z, x_1705.w);
        let x_1708 : f32 = u_xlat22.z;
        txVec26 = vec3<f32>(x_1706.x, x_1706.y, x_1708);
        let x_1715 : vec3<f32> = txVec26;
        let x_1717 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1715.xy, x_1715.z);
        u_xlat5.x = x_1717;
        let x_1720 : f32 = u_xlat5.y;
        let x_1722 : f32 = u_xlat5.x;
        let x_1724 : f32 = u_xlat61;
        u_xlat61 = ((x_1720 * x_1722) + x_1724);
        let x_1727 : vec2<f32> = u_xlat46;
        let x_1729 : f32 = u_xlat22.z;
        txVec27 = vec3<f32>(x_1727.x, x_1727.y, x_1729);
        let x_1736 : vec3<f32> = txVec27;
        let x_1738 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1736.xy, x_1736.z);
        u_xlat5.x = x_1738;
        let x_1741 : f32 = u_xlat5.z;
        let x_1743 : f32 = u_xlat5.x;
        let x_1745 : f32 = u_xlat61;
        u_xlat61 = ((x_1741 * x_1743) + x_1745);
        let x_1748 : vec2<f32> = u_xlat23;
        let x_1750 : f32 = u_xlat22.z;
        txVec28 = vec3<f32>(x_1748.x, x_1748.y, x_1750);
        let x_1757 : vec3<f32> = txVec28;
        let x_1759 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1757.xy, x_1757.z);
        u_xlat23.x = x_1759;
        let x_1762 : f32 = u_xlat5.w;
        let x_1764 : f32 = u_xlat23.x;
        let x_1766 : f32 = u_xlat61;
        u_xlat4.x = ((x_1762 * x_1764) + x_1766);
      }
    }
  } else {
    let x_1771 : vec3<f32> = u_xlat22;
    let x_1772 : vec2<f32> = vec2<f32>(x_1771.x, x_1771.y);
    let x_1774 : f32 = u_xlat22.z;
    txVec29 = vec3<f32>(x_1772.x, x_1772.y, x_1774);
    let x_1781 : vec3<f32> = txVec29;
    let x_1783 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1781.xy, x_1781.z);
    u_xlat4.x = x_1783;
  }
  let x_1786 : f32 = x_364.x_MainLightShadowParams.x;
  u_xlat22.x = (-(x_1786) + 1.0f);
  let x_1791 : f32 = u_xlat4.x;
  let x_1793 : f32 = x_364.x_MainLightShadowParams.x;
  let x_1796 : f32 = u_xlat22.x;
  u_xlat22.x = ((x_1791 * x_1793) + x_1796);
  let x_1801 : f32 = u_xlat22.z;
  u_xlatb41 = (0.0f >= x_1801);
  let x_1805 : f32 = u_xlat22.z;
  u_xlatb60 = (x_1805 >= 1.0f);
  let x_1807 : bool = u_xlatb60;
  let x_1808 : bool = u_xlatb41;
  u_xlatb41 = (x_1807 | x_1808);
  let x_1810 : bool = u_xlatb41;
  if (x_1810) {
    x_1811 = 1.0f;
  } else {
    let x_1816 : f32 = u_xlat22.x;
    x_1811 = x_1816;
  }
  let x_1817 : f32 = x_1811;
  u_xlat22.x = x_1817;
  let x_1820 : vec3<f32> = u_xlat0;
  let x_1823 : vec4<f32> = x_39.x_ScreenParams;
  u_xlat41 = (vec2<f32>(x_1820.x, x_1820.y) * vec2<f32>(x_1823.x, x_1823.y));
  let x_1826 : f32 = u_xlat38;
  let x_1830 : vec2<f32> = (vec2<f32>(x_1826, x_1826) * vec2<f32>(20.0f, 0.25f));
  let x_1831 : vec4<f32> = u_xlat4;
  u_xlat4 = vec4<f32>(x_1830.x, x_1830.y, x_1831.z, x_1831.w);
  let x_1833 : vec4<f32> = u_xlat4;
  let x_1835 : vec3<f32> = vs_TEXCOORD2;
  let x_1837 : vec3<f32> = (vec3<f32>(x_1833.y, x_1833.y, x_1833.y) * -(x_1835));
  let x_1838 : vec4<f32> = u_xlat5;
  u_xlat5 = vec4<f32>(x_1837.x, x_1837.y, x_1837.z, x_1838.w);
  u_xlat42 = 0.0f;
  u_xlatu_loop_1 = 0u;
  loop {
    let x_1846 : u32 = u_xlatu_loop_1;
    if ((x_1846 < 4u)) {
    } else {
      break;
    }
    let x_1850 : u32 = u_xlatu_loop_1;
    u_xlat62 = f32(x_1850);
    let x_1852 : f32 = u_xlat62;
    let x_1855 : vec4<f32> = x_39.x_ScreenParams;
    let x_1857 : vec2<f32> = (vec2<f32>(x_1852, x_1852) * vec2<f32>(x_1855.x, x_1855.y));
    let x_1858 : vec4<f32> = u_xlat6;
    u_xlat6 = vec4<f32>(x_1857.x, x_1857.y, x_1858.z, x_1858.w);
    let x_1860 : vec2<f32> = u_xlat41;
    let x_1862 : vec4<f32> = x_203.x_DitherPattern_TexelSize;
    let x_1865 : vec4<f32> = u_xlat6;
    let x_1867 : vec2<f32> = ((x_1860 * vec2<f32>(x_1862.x, x_1862.y)) + vec2<f32>(x_1865.x, x_1865.y));
    let x_1868 : vec4<f32> = u_xlat6;
    u_xlat6 = vec4<f32>(x_1867.x, x_1867.y, x_1868.z, x_1868.w);
    let x_1875 : vec4<f32> = u_xlat6;
    let x_1878 : f32 = x_39.x_GlobalMipBias.x;
    let x_1879 : vec4<f32> = textureSampleBias(x_DitherPattern, sampler_DitherPattern, vec2<f32>(x_1875.x, x_1875.y), x_1878);
    let x_1880 : vec3<f32> = vec3<f32>(x_1879.x, x_1879.y, x_1879.z);
    let x_1881 : vec4<f32> = u_xlat6;
    u_xlat6 = vec4<f32>(x_1880.x, x_1880.y, x_1880.z, x_1881.w);
    let x_1883 : vec4<f32> = u_xlat6;
    let x_1888 : vec3<f32> = ((vec3<f32>(x_1883.x, x_1883.z, x_1883.y) * vec3<f32>(2.0f, 2.0f, 2.0f)) + vec3<f32>(-1.0f, -1.0f, -1.0f));
    let x_1889 : vec4<f32> = u_xlat6;
    u_xlat6 = vec4<f32>(x_1888.x, x_1888.y, x_1888.z, x_1889.w);
    let x_1891 : vec4<f32> = u_xlat4;
    let x_1893 : vec4<f32> = u_xlat6;
    let x_1895 : vec3<f32> = (vec3<f32>(x_1891.y, x_1891.y, x_1891.y) * vec3<f32>(x_1893.x, x_1893.y, x_1893.z));
    let x_1896 : vec4<f32> = u_xlat6;
    u_xlat6 = vec4<f32>(x_1895.x, x_1895.y, x_1896.z, x_1895.z);
    let x_1898 : f32 = u_xlat62;
    let x_1900 : vec4<f32> = u_xlat6;
    let x_1902 : vec3<f32> = (vec3<f32>(x_1898, x_1898, x_1898) * vec3<f32>(x_1900.x, x_1900.y, x_1900.w));
    let x_1903 : vec4<f32> = u_xlat6;
    u_xlat6 = vec4<f32>(x_1902.x, x_1902.y, x_1903.z, x_1902.z);
    let x_1905 : vec4<f32> = u_xlat6;
    let x_1910 : vec3<f32> = vs_TEXCOORD1;
    let x_1911 : vec3<f32> = ((vec3<f32>(x_1905.x, x_1905.y, x_1905.w) * vec3<f32>(0.100000001f, 0.100000001f, 0.100000001f)) + x_1910);
    let x_1912 : vec4<f32> = u_xlat6;
    u_xlat6 = vec4<f32>(x_1911.x, x_1911.y, x_1912.z, x_1911.z);
    let x_1914 : f32 = u_xlat62;
    let x_1916 : f32 = u_xlat6.z;
    u_xlat62 = (x_1914 + x_1916);
    let x_1918 : vec4<f32> = u_xlat5;
    let x_1920 : f32 = u_xlat62;
    let x_1923 : vec4<f32> = u_xlat6;
    let x_1925 : vec3<f32> = ((vec3<f32>(x_1918.x, x_1918.y, x_1918.z) * vec3<f32>(x_1920, x_1920, x_1920)) + vec3<f32>(x_1923.x, x_1923.y, x_1923.w));
    let x_1926 : vec4<f32> = u_xlat6;
    u_xlat6 = vec4<f32>(x_1925.x, x_1925.y, x_1925.z, x_1926.w);
    let x_1928 : vec4<f32> = u_xlat6;
    let x_1931 : vec4<f32> = x_364.x_CascadeShadowSplitSpheres0;
    let x_1934 : vec3<f32> = (vec3<f32>(x_1928.x, x_1928.y, x_1928.z) + -(vec3<f32>(x_1931.x, x_1931.y, x_1931.z)));
    let x_1935 : vec4<f32> = u_xlat7;
    u_xlat7 = vec4<f32>(x_1934.x, x_1934.y, x_1934.z, x_1935.w);
    let x_1937 : vec4<f32> = u_xlat6;
    let x_1940 : vec4<f32> = x_364.x_CascadeShadowSplitSpheres1;
    let x_1943 : vec3<f32> = (vec3<f32>(x_1937.x, x_1937.y, x_1937.z) + -(vec3<f32>(x_1940.x, x_1940.y, x_1940.z)));
    let x_1944 : vec4<f32> = u_xlat8;
    u_xlat8 = vec4<f32>(x_1943.x, x_1943.y, x_1943.z, x_1944.w);
    let x_1946 : vec4<f32> = u_xlat6;
    let x_1949 : vec4<f32> = x_364.x_CascadeShadowSplitSpheres2;
    let x_1952 : vec3<f32> = (vec3<f32>(x_1946.x, x_1946.y, x_1946.z) + -(vec3<f32>(x_1949.x, x_1949.y, x_1949.z)));
    let x_1953 : vec4<f32> = u_xlat9;
    u_xlat9 = vec4<f32>(x_1952.x, x_1952.y, x_1952.z, x_1953.w);
    let x_1955 : vec4<f32> = u_xlat6;
    let x_1958 : vec4<f32> = x_364.x_CascadeShadowSplitSpheres3;
    let x_1961 : vec3<f32> = (vec3<f32>(x_1955.x, x_1955.y, x_1955.z) + -(vec3<f32>(x_1958.x, x_1958.y, x_1958.z)));
    let x_1962 : vec4<f32> = u_xlat10;
    u_xlat10 = vec4<f32>(x_1961.x, x_1961.y, x_1961.z, x_1962.w);
    let x_1964 : vec4<f32> = u_xlat7;
    let x_1966 : vec4<f32> = u_xlat7;
    u_xlat7.x = dot(vec3<f32>(x_1964.x, x_1964.y, x_1964.z), vec3<f32>(x_1966.x, x_1966.y, x_1966.z));
    let x_1970 : vec4<f32> = u_xlat8;
    let x_1972 : vec4<f32> = u_xlat8;
    u_xlat7.y = dot(vec3<f32>(x_1970.x, x_1970.y, x_1970.z), vec3<f32>(x_1972.x, x_1972.y, x_1972.z));
    let x_1976 : vec4<f32> = u_xlat9;
    let x_1978 : vec4<f32> = u_xlat9;
    u_xlat7.z = dot(vec3<f32>(x_1976.x, x_1976.y, x_1976.z), vec3<f32>(x_1978.x, x_1978.y, x_1978.z));
    let x_1982 : vec4<f32> = u_xlat10;
    let x_1984 : vec4<f32> = u_xlat10;
    u_xlat7.w = dot(vec3<f32>(x_1982.x, x_1982.y, x_1982.z), vec3<f32>(x_1984.x, x_1984.y, x_1984.z));
    let x_1989 : vec4<f32> = u_xlat7;
    let x_1991 : vec4<f32> = x_364.x_CascadeShadowSplitSphereRadii;
    u_xlatb7 = (x_1989 < x_1991);
    let x_1994 : bool = u_xlatb7.x;
    u_xlat8.x = select(0.0f, 1.0f, x_1994);
    let x_1998 : bool = u_xlatb7.y;
    u_xlat8.y = select(0.0f, 1.0f, x_1998);
    let x_2002 : bool = u_xlatb7.z;
    u_xlat8.z = select(0.0f, 1.0f, x_2002);
    let x_2006 : bool = u_xlatb7.w;
    u_xlat8.w = select(0.0f, 1.0f, x_2006);
    let x_2010 : bool = u_xlatb7.x;
    u_xlat7.x = select(-0.0f, -1.0f, x_2010);
    let x_2014 : bool = u_xlatb7.y;
    u_xlat7.y = select(-0.0f, -1.0f, x_2014);
    let x_2018 : bool = u_xlatb7.z;
    u_xlat7.z = select(-0.0f, -1.0f, x_2018);
    let x_2021 : vec4<f32> = u_xlat7;
    let x_2023 : vec4<f32> = u_xlat8;
    let x_2025 : vec3<f32> = (vec3<f32>(x_2021.x, x_2021.y, x_2021.z) + vec3<f32>(x_2023.y, x_2023.z, x_2023.w));
    let x_2026 : vec4<f32> = u_xlat7;
    u_xlat7 = vec4<f32>(x_2025.x, x_2025.y, x_2025.z, x_2026.w);
    let x_2028 : vec4<f32> = u_xlat7;
    let x_2030 : vec3<f32> = max(vec3<f32>(x_2028.x, x_2028.y, x_2028.z), vec3<f32>(0.0f, 0.0f, 0.0f));
    let x_2031 : vec4<f32> = u_xlat8;
    u_xlat8 = vec4<f32>(x_2031.x, x_2030.x, x_2030.y, x_2030.z);
    let x_2033 : vec4<f32> = u_xlat8;
    u_xlat62 = dot(x_2033, vec4<f32>(4.0f, 3.0f, 2.0f, 1.0f));
    let x_2035 : f32 = u_xlat62;
    u_xlat62 = (-(x_2035) + 4.0f);
    let x_2039 : f32 = u_xlat62;
    u_xlatu62 = u32(x_2039);
    let x_2042 : u32 = u_xlatu62;
    u_xlati62 = (bitcast<i32>(x_2042) << bitcast<u32>(2i));
    let x_2045 : vec4<f32> = u_xlat6;
    let x_2047 : i32 = u_xlati62;
    let x_2050 : i32 = u_xlati62;
    let x_2054 : vec4<f32> = x_364.x_MainLightWorldToShadow[((x_2047 + 1i) / 4i)][((x_2050 + 1i) % 4i)];
    let x_2056 : vec3<f32> = (vec3<f32>(x_2045.y, x_2045.y, x_2045.y) * vec3<f32>(x_2054.x, x_2054.y, x_2054.z));
    let x_2057 : vec4<f32> = u_xlat7;
    u_xlat7 = vec4<f32>(x_2056.x, x_2056.y, x_2056.z, x_2057.w);
    let x_2059 : i32 = u_xlati62;
    let x_2061 : i32 = u_xlati62;
    let x_2064 : vec4<f32> = x_364.x_MainLightWorldToShadow[(x_2059 / 4i)][(x_2061 % 4i)];
    let x_2066 : vec4<f32> = u_xlat6;
    let x_2069 : vec4<f32> = u_xlat7;
    let x_2071 : vec3<f32> = ((vec3<f32>(x_2064.x, x_2064.y, x_2064.z) * vec3<f32>(x_2066.x, x_2066.x, x_2066.x)) + vec3<f32>(x_2069.x, x_2069.y, x_2069.z));
    let x_2072 : vec4<f32> = u_xlat6;
    u_xlat6 = vec4<f32>(x_2071.x, x_2071.y, x_2072.z, x_2071.z);
    let x_2074 : i32 = u_xlati62;
    let x_2077 : i32 = u_xlati62;
    let x_2081 : vec4<f32> = x_364.x_MainLightWorldToShadow[((x_2074 + 2i) / 4i)][((x_2077 + 2i) % 4i)];
    let x_2083 : vec4<f32> = u_xlat6;
    let x_2086 : vec4<f32> = u_xlat6;
    let x_2088 : vec3<f32> = ((vec3<f32>(x_2081.x, x_2081.y, x_2081.z) * vec3<f32>(x_2083.z, x_2083.z, x_2083.z)) + vec3<f32>(x_2086.x, x_2086.y, x_2086.w));
    let x_2089 : vec4<f32> = u_xlat6;
    u_xlat6 = vec4<f32>(x_2088.x, x_2088.y, x_2088.z, x_2089.w);
    let x_2091 : vec4<f32> = u_xlat6;
    let x_2093 : i32 = u_xlati62;
    let x_2096 : i32 = u_xlati62;
    let x_2100 : vec4<f32> = x_364.x_MainLightWorldToShadow[((x_2093 + 3i) / 4i)][((x_2096 + 3i) % 4i)];
    let x_2102 : vec3<f32> = (vec3<f32>(x_2091.x, x_2091.y, x_2091.z) + vec3<f32>(x_2100.x, x_2100.y, x_2100.z));
    let x_2103 : vec4<f32> = u_xlat6;
    u_xlat6 = vec4<f32>(x_2102.x, x_2102.y, x_2102.z, x_2103.w);
    let x_2106 : vec4<f32> = u_xlat6;
    let x_2107 : vec2<f32> = vec2<f32>(x_2106.x, x_2106.y);
    let x_2109 : f32 = u_xlat6.z;
    txVec30 = vec3<f32>(x_2107.x, x_2107.y, x_2109);
    let x_2116 : vec3<f32> = txVec30;
    let x_2118 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2116.xy, x_2116.z);
    u_xlat62 = x_2118;
    let x_2119 : f32 = u_xlat42;
    let x_2120 : f32 = u_xlat62;
    u_xlat42 = (x_2119 + x_2120);

    continuing {
      let x_2122 : u32 = u_xlatu_loop_1;
      u_xlatu_loop_1 = (x_2122 + bitcast<u32>(1i));
    }
  }
  let x_2124 : vec3<f32> = vs_TEXCOORD1;
  let x_2127 : vec3<f32> = (x_2124 * vec3<f32>(1.100000024f, 1.100000024f, 1.100000024f));
  let x_2128 : vec4<f32> = u_xlat5;
  u_xlat5 = vec4<f32>(x_2127.x, x_2127.y, x_2127.z, x_2128.w);
  let x_2130 : vec3<f32> = vs_TEXCOORD1;
  let x_2133 : vec4<f32> = x_364.x_CascadeShadowSplitSpheres0;
  let x_2136 : vec3<f32> = ((x_2130 * vec3<f32>(1.100000024f, 1.100000024f, 1.100000024f)) + -(vec3<f32>(x_2133.x, x_2133.y, x_2133.z)));
  let x_2137 : vec4<f32> = u_xlat6;
  u_xlat6 = vec4<f32>(x_2136.x, x_2136.y, x_2136.z, x_2137.w);
  let x_2139 : vec3<f32> = vs_TEXCOORD1;
  let x_2142 : vec4<f32> = x_364.x_CascadeShadowSplitSpheres1;
  let x_2145 : vec3<f32> = ((x_2139 * vec3<f32>(1.100000024f, 1.100000024f, 1.100000024f)) + -(vec3<f32>(x_2142.x, x_2142.y, x_2142.z)));
  let x_2146 : vec4<f32> = u_xlat7;
  u_xlat7 = vec4<f32>(x_2145.x, x_2145.y, x_2145.z, x_2146.w);
  let x_2148 : vec3<f32> = vs_TEXCOORD1;
  let x_2151 : vec4<f32> = x_364.x_CascadeShadowSplitSpheres2;
  let x_2154 : vec3<f32> = ((x_2148 * vec3<f32>(1.100000024f, 1.100000024f, 1.100000024f)) + -(vec3<f32>(x_2151.x, x_2151.y, x_2151.z)));
  let x_2155 : vec4<f32> = u_xlat8;
  u_xlat8 = vec4<f32>(x_2154.x, x_2154.y, x_2154.z, x_2155.w);
  let x_2157 : vec3<f32> = vs_TEXCOORD1;
  let x_2160 : vec4<f32> = x_364.x_CascadeShadowSplitSpheres3;
  let x_2163 : vec3<f32> = ((x_2157 * vec3<f32>(1.100000024f, 1.100000024f, 1.100000024f)) + -(vec3<f32>(x_2160.x, x_2160.y, x_2160.z)));
  let x_2164 : vec4<f32> = u_xlat9;
  u_xlat9 = vec4<f32>(x_2163.x, x_2163.y, x_2163.z, x_2164.w);
  let x_2166 : vec4<f32> = u_xlat6;
  let x_2168 : vec4<f32> = u_xlat6;
  u_xlat6.x = dot(vec3<f32>(x_2166.x, x_2166.y, x_2166.z), vec3<f32>(x_2168.x, x_2168.y, x_2168.z));
  let x_2172 : vec4<f32> = u_xlat7;
  let x_2174 : vec4<f32> = u_xlat7;
  u_xlat6.y = dot(vec3<f32>(x_2172.x, x_2172.y, x_2172.z), vec3<f32>(x_2174.x, x_2174.y, x_2174.z));
  let x_2178 : vec4<f32> = u_xlat8;
  let x_2180 : vec4<f32> = u_xlat8;
  u_xlat6.z = dot(vec3<f32>(x_2178.x, x_2178.y, x_2178.z), vec3<f32>(x_2180.x, x_2180.y, x_2180.z));
  let x_2184 : vec4<f32> = u_xlat9;
  let x_2186 : vec4<f32> = u_xlat9;
  u_xlat6.w = dot(vec3<f32>(x_2184.x, x_2184.y, x_2184.z), vec3<f32>(x_2186.x, x_2186.y, x_2186.z));
  let x_2191 : vec4<f32> = u_xlat6;
  let x_2193 : vec4<f32> = x_364.x_CascadeShadowSplitSphereRadii;
  u_xlatb6 = (x_2191 < x_2193);
  let x_2196 : bool = u_xlatb6.x;
  u_xlat7.x = select(0.0f, 1.0f, x_2196);
  let x_2200 : bool = u_xlatb6.y;
  u_xlat7.y = select(0.0f, 1.0f, x_2200);
  let x_2204 : bool = u_xlatb6.z;
  u_xlat7.z = select(0.0f, 1.0f, x_2204);
  let x_2208 : bool = u_xlatb6.w;
  u_xlat7.w = select(0.0f, 1.0f, x_2208);
  let x_2212 : bool = u_xlatb6.x;
  u_xlat6.x = select(-0.0f, -1.0f, x_2212);
  let x_2216 : bool = u_xlatb6.y;
  u_xlat6.y = select(-0.0f, -1.0f, x_2216);
  let x_2220 : bool = u_xlatb6.z;
  u_xlat6.z = select(-0.0f, -1.0f, x_2220);
  let x_2223 : vec4<f32> = u_xlat6;
  let x_2225 : vec4<f32> = u_xlat7;
  let x_2227 : vec3<f32> = (vec3<f32>(x_2223.x, x_2223.y, x_2223.z) + vec3<f32>(x_2225.y, x_2225.z, x_2225.w));
  let x_2228 : vec4<f32> = u_xlat6;
  u_xlat6 = vec4<f32>(x_2227.x, x_2227.y, x_2227.z, x_2228.w);
  let x_2230 : vec4<f32> = u_xlat6;
  let x_2232 : vec3<f32> = max(vec3<f32>(x_2230.x, x_2230.y, x_2230.z), vec3<f32>(0.0f, 0.0f, 0.0f));
  let x_2233 : vec4<f32> = u_xlat7;
  u_xlat7 = vec4<f32>(x_2233.x, x_2232.x, x_2232.y, x_2232.z);
  let x_2235 : vec4<f32> = u_xlat7;
  u_xlat41.x = dot(x_2235, vec4<f32>(4.0f, 3.0f, 2.0f, 1.0f));
  let x_2239 : f32 = u_xlat41.x;
  u_xlat41.x = (-(x_2239) + 4.0f);
  let x_2245 : f32 = u_xlat41.x;
  u_xlatu41 = u32(x_2245);
  let x_2248 : u32 = u_xlatu41;
  u_xlati41 = (bitcast<i32>(x_2248) << bitcast<u32>(2i));
  let x_2253 : f32 = u_xlat5.y;
  let x_2254 : i32 = u_xlati41;
  let x_2257 : i32 = u_xlati41;
  let x_2261 : f32 = x_364.x_MainLightWorldToShadow[((x_2254 + 1i) / 4i)][((x_2257 + 1i) % 4i)].z;
  u_xlat60 = (x_2253 * x_2261);
  let x_2263 : i32 = u_xlati41;
  let x_2265 : i32 = u_xlati41;
  let x_2268 : f32 = x_364.x_MainLightWorldToShadow[(x_2263 / 4i)][(x_2265 % 4i)].z;
  let x_2270 : f32 = u_xlat5.x;
  let x_2272 : f32 = u_xlat60;
  u_xlat60 = ((x_2268 * x_2270) + x_2272);
  let x_2274 : i32 = u_xlati41;
  let x_2277 : i32 = u_xlati41;
  let x_2281 : f32 = x_364.x_MainLightWorldToShadow[((x_2274 + 2i) / 4i)][((x_2277 + 2i) % 4i)].z;
  let x_2283 : f32 = u_xlat5.z;
  let x_2285 : f32 = u_xlat60;
  u_xlat60 = ((x_2281 * x_2283) + x_2285);
  let x_2287 : f32 = u_xlat60;
  let x_2288 : i32 = u_xlati41;
  let x_2291 : i32 = u_xlati41;
  let x_2295 : f32 = x_364.x_MainLightWorldToShadow[((x_2288 + 3i) / 4i)][((x_2291 + 3i) % 4i)].z;
  u_xlat41.x = (x_2287 + x_2295);
  let x_2299 : f32 = u_xlat41.x;
  u_xlatb60 = (0.0f >= x_2299);
  let x_2302 : f32 = u_xlat41.x;
  u_xlatb41 = (x_2302 >= 1.0f);
  let x_2304 : bool = u_xlatb41;
  let x_2305 : bool = u_xlatb60;
  u_xlatb41 = (x_2304 | x_2305);
  let x_2307 : f32 = u_xlat42;
  u_xlat60 = (x_2307 * 0.25f);
  let x_2309 : bool = u_xlatb41;
  let x_2310 : f32 = u_xlat60;
  u_xlat41.x = select(x_2310, 1.0f, x_2309);
  let x_2319 : vec4<f32> = x_2316.unity_SHAr;
  let x_2320 : vec4<f32> = u_xlat2;
  u_xlat5.x = dot(x_2319, x_2320);
  let x_2325 : vec4<f32> = x_2316.unity_SHAg;
  let x_2326 : vec4<f32> = u_xlat2;
  u_xlat5.y = dot(x_2325, x_2326);
  let x_2331 : vec4<f32> = x_2316.unity_SHAb;
  let x_2332 : vec4<f32> = u_xlat2;
  u_xlat5.z = dot(x_2331, x_2332);
  let x_2335 : vec4<f32> = u_xlat2;
  let x_2337 : vec4<f32> = u_xlat2;
  u_xlat6 = (vec4<f32>(x_2335.y, x_2335.z, x_2335.z, x_2335.x) * vec4<f32>(x_2337.x, x_2337.y, x_2337.z, x_2337.z));
  let x_2342 : vec4<f32> = x_2316.unity_SHBr;
  let x_2343 : vec4<f32> = u_xlat6;
  u_xlat7.x = dot(x_2342, x_2343);
  let x_2348 : vec4<f32> = x_2316.unity_SHBg;
  let x_2349 : vec4<f32> = u_xlat6;
  u_xlat7.y = dot(x_2348, x_2349);
  let x_2354 : vec4<f32> = x_2316.unity_SHBb;
  let x_2355 : vec4<f32> = u_xlat6;
  u_xlat7.z = dot(x_2354, x_2355);
  let x_2360 : f32 = u_xlat2.y;
  let x_2362 : f32 = u_xlat2.y;
  u_xlat59 = (x_2360 * x_2362);
  let x_2365 : f32 = u_xlat2.x;
  let x_2367 : f32 = u_xlat2.x;
  let x_2369 : f32 = u_xlat59;
  u_xlat59 = ((x_2365 * x_2367) + -(x_2369));
  let x_2374 : vec4<f32> = x_2316.unity_SHC;
  let x_2376 : f32 = u_xlat59;
  let x_2379 : vec4<f32> = u_xlat7;
  let x_2381 : vec3<f32> = ((vec3<f32>(x_2374.x, x_2374.y, x_2374.z) * vec3<f32>(x_2376, x_2376, x_2376)) + vec3<f32>(x_2379.x, x_2379.y, x_2379.z));
  let x_2382 : vec4<f32> = u_xlat6;
  u_xlat6 = vec4<f32>(x_2381.x, x_2381.y, x_2381.z, x_2382.w);
  let x_2384 : vec4<f32> = u_xlat5;
  let x_2386 : vec4<f32> = u_xlat6;
  let x_2388 : vec3<f32> = (vec3<f32>(x_2384.x, x_2384.y, x_2384.z) + vec3<f32>(x_2386.x, x_2386.y, x_2386.z));
  let x_2389 : vec4<f32> = u_xlat5;
  u_xlat5 = vec4<f32>(x_2388.x, x_2388.y, x_2388.z, x_2389.w);
  let x_2391 : vec4<f32> = u_xlat5;
  let x_2393 : vec3<f32> = max(vec3<f32>(x_2391.x, x_2391.y, x_2391.z), vec3<f32>(0.0f, 0.0f, 0.0f));
  let x_2394 : vec4<f32> = u_xlat5;
  u_xlat5 = vec4<f32>(x_2393.x, x_2393.y, x_2393.z, x_2394.w);
  let x_2396 : vec3<f32> = vs_TEXCOORD2;
  let x_2398 : vec4<f32> = x_39.x_MainLightPosition;
  u_xlat59 = dot(x_2396, -(vec3<f32>(x_2398.x, x_2398.y, x_2398.z)));
  let x_2402 : f32 = u_xlat59;
  let x_2404 : f32 = vs_TEXCOORD5.z;
  u_xlat59 = (x_2402 * x_2404);
  let x_2406 : f32 = u_xlat59;
  let x_2407 : f32 = u_xlat59;
  u_xlat60 = (x_2406 * x_2407);
  let x_2409 : f32 = u_xlat59;
  let x_2410 : f32 = u_xlat60;
  u_xlat59 = (x_2409 * x_2410);
  let x_2412 : f32 = u_xlat59;
  u_xlat59 = clamp(x_2412, 0.0f, 1.0f);
  let x_2414 : f32 = u_xlat59;
  u_xlat59 = (x_2414 * 5.0f);
  let x_2417 : f32 = u_xlat59;
  let x_2420 : vec4<f32> = x_39.x_MainLightColor;
  let x_2422 : vec3<f32> = (vec3<f32>(x_2417, x_2417, x_2417) * vec3<f32>(x_2420.x, x_2420.y, x_2420.z));
  let x_2423 : vec4<f32> = u_xlat6;
  u_xlat6 = vec4<f32>(x_2422.x, x_2422.y, x_2422.z, x_2423.w);
  let x_2426 : vec4<f32> = x_39.x_MainLightPosition;
  let x_2429 : vec4<f32> = x_39.x_MainLightColor;
  let x_2432 : vec4<f32> = u_xlat6;
  let x_2434 : vec3<f32> = ((vec3<f32>(x_2426.y, x_2426.y, x_2426.y) * vec3<f32>(x_2429.x, x_2429.y, x_2429.z)) + vec3<f32>(x_2432.x, x_2432.y, x_2432.z));
  let x_2435 : vec4<f32> = u_xlat6;
  u_xlat6 = vec4<f32>(x_2434.x, x_2434.y, x_2434.z, x_2435.w);
  let x_2437 : vec4<f32> = u_xlat6;
  let x_2439 : vec2<f32> = u_xlat41;
  let x_2442 : vec4<f32> = u_xlat5;
  let x_2444 : vec3<f32> = ((vec3<f32>(x_2437.x, x_2437.y, x_2437.z) * vec3<f32>(x_2439.x, x_2439.x, x_2439.x)) + vec3<f32>(x_2442.x, x_2442.y, x_2442.z));
  let x_2445 : vec4<f32> = u_xlat6;
  u_xlat6 = vec4<f32>(x_2444.x, x_2444.y, x_2444.z, x_2445.w);
  let x_2452 : vec4<f32> = vs_TEXCOORD0;
  let x_2455 : f32 = x_39.x_GlobalMipBias.x;
  let x_2456 : vec4<f32> = textureSampleBias(x_FoamMap, sampler_FoamMap, vec2<f32>(x_2452.z, x_2452.w), x_2455);
  let x_2457 : vec3<f32> = vec3<f32>(x_2456.x, x_2456.y, x_2456.z);
  let x_2458 : vec4<f32> = u_xlat7;
  u_xlat7 = vec4<f32>(x_2457.x, x_2457.y, x_2457.z, x_2458.w);
  let x_2461 : f32 = u_xlat4.x;
  u_xlat4.x = x_2461;
  let x_2464 : f32 = u_xlat4.x;
  u_xlat4.x = clamp(x_2464, 0.0f, 1.0f);
  let x_2468 : f32 = vs_TEXCOORD5.z;
  u_xlat59 = (x_2468 + -0.375f);
  let x_2471 : f32 = u_xlat59;
  u_xlat59 = clamp(x_2471, 0.0f, 1.0f);
  let x_2473 : f32 = u_xlat38;
  u_xlat60 = ((-(x_2473) * 4.0f) + 1.0f);
  let x_2477 : f32 = u_xlat60;
  u_xlat60 = clamp(x_2477, 0.0f, 1.0f);
  let x_2479 : f32 = u_xlat57;
  let x_2480 : f32 = u_xlat38;
  u_xlat57 = min(x_2479, x_2480);
  let x_2482 : f32 = u_xlat57;
  u_xlat57 = ((-(x_2482) * 0.5f) + 0.75f);
  let x_2487 : f32 = u_xlat60;
  let x_2489 : f32 = u_xlat57;
  u_xlat57 = ((x_2487 * 0.5f) + x_2489);
  let x_2491 : f32 = u_xlat57;
  u_xlat57 = clamp(x_2491, 0.0f, 1.0f);
  let x_2494 : f32 = u_xlat4.x;
  let x_2495 : f32 = u_xlat57;
  u_xlat57 = (x_2494 * x_2495);
  let x_2497 : f32 = u_xlat57;
  let x_2498 : f32 = u_xlat59;
  u_xlat57 = max(x_2497, x_2498);
  let x_2501 : f32 = u_xlat1.x;
  let x_2503 : f32 = u_xlat1.x;
  u_xlat1.x = (x_2501 + x_2503);
  let x_2506 : f32 = u_xlat57;
  let x_2508 : f32 = u_xlat1.x;
  u_xlat8.x = max(x_2506, x_2508);
  u_xlat8.y = 0.660000026f;
  let x_2518 : vec4<f32> = u_xlat8;
  let x_2521 : f32 = x_39.x_GlobalMipBias.x;
  let x_2522 : vec4<f32> = textureSampleBias(x_AbsorptionScatteringRamp, sampler_AbsorptionScatteringRamp, vec2<f32>(x_2518.x, x_2518.y), x_2521);
  let x_2523 : vec3<f32> = vec3<f32>(x_2522.x, x_2522.y, x_2522.z);
  let x_2524 : vec4<f32> = u_xlat4;
  u_xlat4 = vec4<f32>(x_2523.x, x_2524.y, x_2523.y, x_2523.z);
  let x_2526 : vec4<f32> = u_xlat4;
  let x_2528 : vec4<f32> = u_xlat7;
  let x_2530 : vec3<f32> = (vec3<f32>(x_2526.x, x_2526.z, x_2526.w) * vec3<f32>(x_2528.x, x_2528.y, x_2528.z));
  let x_2531 : vec4<f32> = u_xlat4;
  u_xlat4 = vec4<f32>(x_2530.x, x_2531.y, x_2530.y, x_2530.z);
  let x_2533 : vec4<f32> = u_xlat4;
  let x_2535 : vec4<f32> = u_xlat4;
  u_xlat57 = dot(vec3<f32>(x_2533.x, x_2533.z, x_2533.w), vec3<f32>(x_2535.x, x_2535.z, x_2535.w));
  let x_2538 : f32 = u_xlat57;
  u_xlat57 = sqrt(x_2538);
  let x_2540 : f32 = u_xlat57;
  u_xlat57 = ((x_2540 * 1.5f) + -0.100000001f);
  let x_2544 : f32 = u_xlat57;
  u_xlat57 = clamp(x_2544, 0.0f, 1.0f);
  let x_2546 : vec3<f32> = u_xlat22;
  let x_2549 : vec4<f32> = x_39.x_MainLightColor;
  let x_2552 : vec4<f32> = u_xlat5;
  let x_2554 : vec3<f32> = ((vec3<f32>(x_2546.x, x_2546.x, x_2546.x) * vec3<f32>(x_2549.x, x_2549.y, x_2549.z)) + vec3<f32>(x_2552.x, x_2552.y, x_2552.z));
  let x_2555 : vec4<f32> = u_xlat4;
  u_xlat4 = vec4<f32>(x_2554.x, x_2555.y, x_2554.y, x_2554.z);
  let x_2557 : vec3<f32> = vs_TEXCOORD2;
  let x_2559 : vec4<f32> = x_39.x_MainLightPosition;
  let x_2561 : vec3<f32> = (x_2557 + vec3<f32>(x_2559.x, x_2559.y, x_2559.z));
  let x_2562 : vec4<f32> = u_xlat5;
  u_xlat5 = vec4<f32>(x_2561.x, x_2561.y, x_2561.z, x_2562.w);
  let x_2564 : vec4<f32> = u_xlat5;
  let x_2566 : vec4<f32> = u_xlat5;
  u_xlat1.x = dot(vec3<f32>(x_2564.x, x_2564.y, x_2564.z), vec3<f32>(x_2566.x, x_2566.y, x_2566.z));
  let x_2571 : f32 = u_xlat1.x;
  u_xlat1.x = max(x_2571, 1.17549435e-37f);
  let x_2576 : f32 = u_xlat1.x;
  u_xlat1.x = inverseSqrt(x_2576);
  let x_2579 : vec3<f32> = u_xlat1;
  let x_2581 : vec4<f32> = u_xlat5;
  let x_2583 : vec3<f32> = (vec3<f32>(x_2579.x, x_2579.x, x_2579.x) * vec3<f32>(x_2581.x, x_2581.y, x_2581.z));
  let x_2584 : vec4<f32> = u_xlat5;
  u_xlat5 = vec4<f32>(x_2583.x, x_2583.y, x_2583.z, x_2584.w);
  let x_2586 : vec4<f32> = u_xlat2;
  let x_2588 : vec4<f32> = u_xlat5;
  u_xlat1.x = dot(vec3<f32>(x_2586.x, x_2586.y, x_2586.z), vec3<f32>(x_2588.x, x_2588.y, x_2588.z));
  let x_2593 : f32 = u_xlat1.x;
  u_xlat1.x = clamp(x_2593, 0.0f, 1.0f);
  let x_2597 : vec4<f32> = x_39.x_MainLightPosition;
  let x_2599 : vec4<f32> = u_xlat5;
  u_xlat59 = dot(vec3<f32>(x_2597.x, x_2597.y, x_2597.z), vec3<f32>(x_2599.x, x_2599.y, x_2599.z));
  let x_2602 : f32 = u_xlat59;
  u_xlat59 = clamp(x_2602, 0.0f, 1.0f);
  let x_2605 : f32 = u_xlat1.x;
  let x_2607 : f32 = u_xlat1.x;
  u_xlat1.x = (x_2605 * x_2607);
  let x_2611 : f32 = u_xlat1.x;
  u_xlat1.x = ((x_2611 * -0.999938965f) + 1.000010014f);
  let x_2617 : f32 = u_xlat59;
  let x_2618 : f32 = u_xlat59;
  u_xlat59 = (x_2617 * x_2618);
  let x_2621 : f32 = u_xlat1.x;
  let x_2623 : f32 = u_xlat1.x;
  u_xlat1.x = (x_2621 * x_2623);
  let x_2626 : f32 = u_xlat59;
  u_xlat59 = max(x_2626, 0.100000001f);
  let x_2629 : f32 = u_xlat1.x;
  let x_2630 : f32 = u_xlat59;
  u_xlat1.x = (x_2629 * x_2630);
  let x_2634 : f32 = u_xlat1.x;
  u_xlat1.x = (x_2634 * 2.03125f);
  let x_2640 : f32 = u_xlat1.x;
  u_xlat1.x = (6.10351562e-05f / x_2640);
  let x_2644 : f32 = u_xlat41.x;
  let x_2646 : f32 = u_xlat1.x;
  u_xlat1.x = (x_2644 * x_2646);
  let x_2650 : f32 = u_xlat1.x;
  u_xlat1.x = (x_2650 * 0.039999999f);
  let x_2654 : vec3<f32> = u_xlat1;
  let x_2657 : vec4<f32> = x_39.x_MainLightColor;
  u_xlat22 = (vec3<f32>(x_2654.x, x_2654.x, x_2654.x) * vec3<f32>(x_2657.x, x_2657.y, x_2657.z));
  let x_2661 : f32 = x_39.x_AdditionalLightsCount.x;
  let x_2663 : f32 = x_2316.unity_LightData.y;
  u_xlat1.x = min(x_2661, x_2663);
  let x_2668 : f32 = u_xlat1.x;
  u_xlatu1 = bitcast<u32>(i32(x_2668));
  let x_2671 : vec4<f32> = u_xlat6;
  let x_2672 : vec3<f32> = vec3<f32>(x_2671.x, x_2671.y, x_2671.z);
  let x_2673 : vec4<f32> = u_xlat5;
  u_xlat5 = vec4<f32>(x_2672.x, x_2672.y, x_2672.z, x_2673.w);
  let x_2675 : vec3<f32> = u_xlat22;
  let x_2676 : vec4<f32> = u_xlat7;
  u_xlat7 = vec4<f32>(x_2675.x, x_2675.y, x_2675.z, x_2676.w);
  u_xlatu_loop_2 = 0u;
  loop {
    let x_2684 : u32 = u_xlatu_loop_2;
    let x_2685 : u32 = u_xlatu1;
    if ((x_2684 < x_2685)) {
    } else {
      break;
    }
    let x_2687 : u32 = u_xlatu_loop_2;
    u_xlatu62 = (x_2687 >> 2u);
    let x_2690 : u32 = u_xlatu_loop_2;
    u_xlati63 = bitcast<i32>((x_2690 & 3u));
    let x_2693 : u32 = u_xlatu62;
    let x_2696 : vec4<f32> = x_2316.unity_LightIndices[bitcast<i32>(x_2693)];
    let x_2705 : i32 = u_xlati63;
    indexable = array<vec4<u32>, 4u>(vec4<u32>(1065353216u, 0u, 0u, 0u), vec4<u32>(0u, 1065353216u, 0u, 0u), vec4<u32>(0u, 0u, 1065353216u, 0u), vec4<u32>(0u, 0u, 0u, 1065353216u));
    let x_2710 : vec4<u32> = indexable[x_2705];
    u_xlat62 = dot(x_2696, bitcast<vec4<f32>>(x_2710));
    let x_2713 : f32 = u_xlat62;
    u_xlati62 = i32(x_2713);
    let x_2715 : vec3<f32> = vs_TEXCOORD1;
    let x_2727 : i32 = u_xlati62;
    let x_2729 : vec4<f32> = x_2726.x_AdditionalLightsPosition[x_2727];
    let x_2732 : i32 = u_xlati62;
    let x_2734 : vec4<f32> = x_2726.x_AdditionalLightsPosition[x_2732];
    let x_2736 : vec3<f32> = ((-(x_2715) * vec3<f32>(x_2729.w, x_2729.w, x_2729.w)) + vec3<f32>(x_2734.x, x_2734.y, x_2734.z));
    let x_2737 : vec4<f32> = u_xlat8;
    u_xlat8 = vec4<f32>(x_2736.x, x_2736.y, x_2736.z, x_2737.w);
    let x_2740 : vec4<f32> = u_xlat8;
    let x_2742 : vec4<f32> = u_xlat8;
    u_xlat63 = dot(vec3<f32>(x_2740.x, x_2740.y, x_2740.z), vec3<f32>(x_2742.x, x_2742.y, x_2742.z));
    let x_2745 : f32 = u_xlat63;
    u_xlat63 = max(x_2745, 6.10351562e-05f);
    let x_2748 : f32 = u_xlat63;
    u_xlat64 = inverseSqrt(x_2748);
    let x_2750 : f32 = u_xlat64;
    let x_2752 : vec4<f32> = u_xlat8;
    let x_2754 : vec3<f32> = (vec3<f32>(x_2750, x_2750, x_2750) * vec3<f32>(x_2752.x, x_2752.y, x_2752.z));
    let x_2755 : vec4<f32> = u_xlat9;
    u_xlat9 = vec4<f32>(x_2754.x, x_2754.y, x_2754.z, x_2755.w);
    let x_2758 : f32 = u_xlat63;
    u_xlat65 = (1.0f / x_2758);
    let x_2760 : f32 = u_xlat63;
    let x_2761 : i32 = u_xlati62;
    let x_2763 : f32 = x_2726.x_AdditionalLightsAttenuation[x_2761].x;
    u_xlat63 = (x_2760 * x_2763);
    let x_2765 : f32 = u_xlat63;
    let x_2767 : f32 = u_xlat63;
    u_xlat63 = ((-(x_2765) * x_2767) + 1.0f);
    let x_2770 : f32 = u_xlat63;
    u_xlat63 = max(x_2770, 0.0f);
    let x_2772 : f32 = u_xlat63;
    let x_2773 : f32 = u_xlat63;
    u_xlat63 = (x_2772 * x_2773);
    let x_2775 : f32 = u_xlat63;
    let x_2776 : f32 = u_xlat65;
    u_xlat63 = (x_2775 * x_2776);
    let x_2778 : i32 = u_xlati62;
    let x_2780 : vec4<f32> = x_2726.x_AdditionalLightsSpotDir[x_2778];
    let x_2782 : vec4<f32> = u_xlat9;
    u_xlat65 = dot(vec3<f32>(x_2780.x, x_2780.y, x_2780.z), vec3<f32>(x_2782.x, x_2782.y, x_2782.z));
    let x_2785 : f32 = u_xlat65;
    let x_2786 : i32 = u_xlati62;
    let x_2788 : f32 = x_2726.x_AdditionalLightsAttenuation[x_2786].z;
    let x_2790 : i32 = u_xlati62;
    let x_2792 : f32 = x_2726.x_AdditionalLightsAttenuation[x_2790].w;
    u_xlat65 = ((x_2785 * x_2788) + x_2792);
    let x_2794 : f32 = u_xlat65;
    u_xlat65 = clamp(x_2794, 0.0f, 1.0f);
    let x_2796 : f32 = u_xlat65;
    let x_2797 : f32 = u_xlat65;
    u_xlat65 = (x_2796 * x_2797);
    let x_2799 : f32 = u_xlat63;
    let x_2800 : f32 = u_xlat65;
    u_xlat63 = (x_2799 * x_2800);
    let x_2802 : vec4<f32> = u_xlat2;
    let x_2804 : vec4<f32> = u_xlat9;
    u_xlat65 = dot(vec3<f32>(x_2802.x, x_2802.y, x_2802.z), vec3<f32>(x_2804.x, x_2804.y, x_2804.z));
    let x_2807 : f32 = u_xlat65;
    u_xlat65 = clamp(x_2807, 0.0f, 1.0f);
    let x_2809 : f32 = u_xlat63;
    let x_2810 : f32 = u_xlat65;
    u_xlat65 = (x_2809 * x_2810);
    let x_2812 : f32 = u_xlat65;
    let x_2814 : i32 = u_xlati62;
    let x_2816 : vec4<f32> = x_2726.x_AdditionalLightsColor[x_2814];
    let x_2818 : vec3<f32> = (vec3<f32>(x_2812, x_2812, x_2812) * vec3<f32>(x_2816.x, x_2816.y, x_2816.z));
    let x_2819 : vec4<f32> = u_xlat10;
    u_xlat10 = vec4<f32>(x_2818.x, x_2818.y, x_2818.z, x_2819.w);
    let x_2821 : vec4<f32> = u_xlat8;
    let x_2823 : f32 = u_xlat64;
    let x_2826 : vec3<f32> = vs_TEXCOORD2;
    let x_2827 : vec3<f32> = ((vec3<f32>(x_2821.x, x_2821.y, x_2821.z) * vec3<f32>(x_2823, x_2823, x_2823)) + x_2826);
    let x_2828 : vec4<f32> = u_xlat8;
    u_xlat8 = vec4<f32>(x_2827.x, x_2827.y, x_2827.z, x_2828.w);
    let x_2830 : vec4<f32> = u_xlat8;
    let x_2832 : vec4<f32> = u_xlat8;
    u_xlat64 = dot(vec3<f32>(x_2830.x, x_2830.y, x_2830.z), vec3<f32>(x_2832.x, x_2832.y, x_2832.z));
    let x_2835 : f32 = u_xlat64;
    u_xlat64 = max(x_2835, 1.17549435e-37f);
    let x_2837 : f32 = u_xlat64;
    u_xlat64 = inverseSqrt(x_2837);
    let x_2839 : f32 = u_xlat64;
    let x_2841 : vec4<f32> = u_xlat8;
    let x_2843 : vec3<f32> = (vec3<f32>(x_2839, x_2839, x_2839) * vec3<f32>(x_2841.x, x_2841.y, x_2841.z));
    let x_2844 : vec4<f32> = u_xlat8;
    u_xlat8 = vec4<f32>(x_2843.x, x_2843.y, x_2843.z, x_2844.w);
    let x_2846 : vec4<f32> = u_xlat2;
    let x_2848 : vec4<f32> = u_xlat8;
    u_xlat64 = dot(vec3<f32>(x_2846.x, x_2846.y, x_2846.z), vec3<f32>(x_2848.x, x_2848.y, x_2848.z));
    let x_2851 : f32 = u_xlat64;
    u_xlat64 = clamp(x_2851, 0.0f, 1.0f);
    let x_2853 : vec4<f32> = u_xlat9;
    let x_2855 : vec4<f32> = u_xlat8;
    u_xlat8.x = dot(vec3<f32>(x_2853.x, x_2853.y, x_2853.z), vec3<f32>(x_2855.x, x_2855.y, x_2855.z));
    let x_2860 : f32 = u_xlat8.x;
    u_xlat8.x = clamp(x_2860, 0.0f, 1.0f);
    let x_2863 : f32 = u_xlat64;
    let x_2864 : f32 = u_xlat64;
    u_xlat64 = (x_2863 * x_2864);
    let x_2866 : f32 = u_xlat64;
    u_xlat64 = ((x_2866 * -0.999938965f) + 1.000010014f);
    let x_2870 : f32 = u_xlat8.x;
    let x_2872 : f32 = u_xlat8.x;
    u_xlat8.x = (x_2870 * x_2872);
    let x_2875 : f32 = u_xlat64;
    let x_2876 : f32 = u_xlat64;
    u_xlat64 = (x_2875 * x_2876);
    let x_2879 : f32 = u_xlat8.x;
    u_xlat8.x = max(x_2879, 0.100000001f);
    let x_2882 : f32 = u_xlat64;
    let x_2884 : f32 = u_xlat8.x;
    u_xlat64 = (x_2882 * x_2884);
    let x_2886 : f32 = u_xlat64;
    u_xlat64 = (x_2886 * 2.03125f);
    let x_2888 : f32 = u_xlat64;
    u_xlat64 = (6.10351562e-05f / x_2888);
    let x_2890 : f32 = u_xlat64;
    u_xlat64 = (x_2890 * 0.039999999f);
    let x_2892 : f32 = u_xlat64;
    let x_2894 : vec4<f32> = u_xlat10;
    let x_2897 : vec4<f32> = u_xlat7;
    let x_2899 : vec3<f32> = ((vec3<f32>(x_2892, x_2892, x_2892) * vec3<f32>(x_2894.x, x_2894.y, x_2894.z)) + vec3<f32>(x_2897.x, x_2897.y, x_2897.z));
    let x_2900 : vec4<f32> = u_xlat7;
    u_xlat7 = vec4<f32>(x_2899.x, x_2899.y, x_2899.z, x_2900.w);
    let x_2902 : f32 = u_xlat63;
    let x_2904 : i32 = u_xlati62;
    let x_2906 : vec4<f32> = x_2726.x_AdditionalLightsColor[x_2904];
    let x_2909 : vec4<f32> = u_xlat5;
    let x_2911 : vec3<f32> = ((vec3<f32>(x_2902, x_2902, x_2902) * vec3<f32>(x_2906.x, x_2906.y, x_2906.z)) + vec3<f32>(x_2909.x, x_2909.y, x_2909.z));
    let x_2912 : vec4<f32> = u_xlat5;
    u_xlat5 = vec4<f32>(x_2911.x, x_2911.y, x_2911.z, x_2912.w);

    continuing {
      let x_2914 : u32 = u_xlatu_loop_2;
      u_xlatu_loop_2 = (x_2914 + bitcast<u32>(1i));
    }
  }
  let x_2916 : f32 = u_xlat58;
  let x_2917 : f32 = u_xlat38;
  u_xlat6.x = (x_2916 * x_2917);
  u_xlat6.y = 0.375f;
  u_xlat6.z = 0.0f;
  let x_2926 : vec4<f32> = u_xlat6;
  let x_2929 : f32 = x_39.x_GlobalMipBias.x;
  let x_2930 : vec4<f32> = textureSampleBias(x_AbsorptionScatteringRamp, sampler_AbsorptionScatteringRamp, vec2<f32>(x_2926.x, x_2926.y), x_2929);
  u_xlat22 = vec3<f32>(x_2930.x, x_2930.y, x_2930.z);
  let x_2932 : vec4<f32> = u_xlat2;
  let x_2938 : vec3<f32> = u_xlat0;
  let x_2940 : vec2<f32> = ((vec2<f32>(x_2932.z, x_2932.x) * vec2<f32>(0.02f, 0.150000006f)) + vec2<f32>(x_2938.x, x_2938.y));
  let x_2941 : vec3<f32> = u_xlat0;
  u_xlat0 = vec3<f32>(x_2940.x, x_2940.y, x_2941.z);
  let x_2947 : vec3<f32> = u_xlat0;
  let x_2949 : vec4<f32> = textureSampleLevel(x_PlanarReflectionTexture, sampler_ScreenTextures_linear_clamp, vec2<f32>(x_2947.x, x_2947.y), 0.0f);
  u_xlat0 = vec3<f32>(x_2949.x, x_2949.y, x_2949.z);
  let x_2956 : vec2<f32> = u_xlat20;
  let x_2958 : f32 = u_xlat4.y;
  let x_2959 : vec4<f32> = textureSampleLevel(x_CameraOpaqueTexture, sampler_CameraOpaqueTexture_linear_clamp, x_2956, x_2958);
  u_xlat1 = vec3<f32>(x_2959.x, x_2959.y, x_2959.z);
  let x_2964 : vec4<f32> = u_xlat6;
  let x_2967 : f32 = x_39.x_GlobalMipBias.x;
  let x_2968 : vec4<f32> = textureSampleBias(x_AbsorptionScatteringRamp, sampler_AbsorptionScatteringRamp, vec2<f32>(x_2964.x, x_2964.z), x_2967);
  let x_2969 : vec3<f32> = vec3<f32>(x_2968.x, x_2968.y, x_2968.z);
  let x_2970 : vec4<f32> = u_xlat2;
  u_xlat2 = vec4<f32>(x_2969.x, x_2969.y, x_2969.z, x_2970.w);
  let x_2972 : vec3<f32> = u_xlat1;
  let x_2973 : vec4<f32> = u_xlat2;
  let x_2975 : vec3<f32> = (x_2972 * vec3<f32>(x_2973.x, x_2973.y, x_2973.z));
  let x_2976 : vec4<f32> = u_xlat6;
  u_xlat6 = vec4<f32>(x_2975.x, x_2975.y, x_2975.z, x_2976.w);
  let x_2978 : vec3<f32> = u_xlat1;
  let x_2980 : vec4<f32> = u_xlat2;
  let x_2983 : vec3<f32> = u_xlat0;
  u_xlat0 = ((-(x_2978) * vec3<f32>(x_2980.x, x_2980.y, x_2980.z)) + x_2983);
  let x_2985 : f32 = u_xlat3;
  let x_2987 : vec3<f32> = u_xlat0;
  let x_2989 : vec4<f32> = u_xlat6;
  u_xlat0 = ((vec3<f32>(x_2985, x_2985, x_2985) * x_2987) + vec3<f32>(x_2989.x, x_2989.y, x_2989.z));
  let x_2992 : vec4<f32> = u_xlat5;
  let x_2994 : vec3<f32> = u_xlat22;
  let x_2996 : vec3<f32> = u_xlat0;
  u_xlat0 = ((vec3<f32>(x_2992.x, x_2992.y, x_2992.z) * x_2994) + x_2996);
  let x_2998 : vec4<f32> = u_xlat7;
  let x_3000 : vec3<f32> = u_xlat0;
  u_xlat0 = (vec3<f32>(x_2998.x, x_2998.y, x_2998.z) + x_3000);
  let x_3002 : f32 = u_xlat57;
  let x_3004 : vec4<f32> = u_xlat4;
  let x_3007 : vec3<f32> = u_xlat0;
  u_xlat1 = ((vec3<f32>(x_3002, x_3002, x_3002) * vec3<f32>(x_3004.x, x_3004.z, x_3004.w)) + -(x_3007));
  let x_3010 : f32 = u_xlat57;
  let x_3012 : vec3<f32> = u_xlat1;
  let x_3014 : vec3<f32> = u_xlat0;
  u_xlat0 = ((vec3<f32>(x_3010, x_3010, x_3010) * x_3012) + x_3014);
  let x_3019 : f32 = vs_TEXCOORD4.x;
  let x_3021 : f32 = vs_TEXCOORD4.x;
  u_xlat57 = (x_3019 * -(x_3021));
  let x_3024 : f32 = u_xlat57;
  u_xlat57 = exp2(x_3024);
  let x_3026 : vec3<f32> = u_xlat0;
  let x_3028 : vec4<f32> = x_39.unity_FogColor;
  u_xlat0 = (x_3026 + -(vec3<f32>(x_3028.x, x_3028.y, x_3028.z)));
  let x_3034 : f32 = u_xlat57;
  let x_3036 : vec3<f32> = u_xlat0;
  let x_3039 : vec4<f32> = x_39.unity_FogColor;
  let x_3041 : vec3<f32> = ((vec3<f32>(x_3034, x_3034, x_3034) * x_3036) + vec3<f32>(x_3039.x, x_3039.y, x_3039.z));
  let x_3042 : vec4<f32> = SV_Target0;
  SV_Target0 = vec4<f32>(x_3041.x, x_3041.y, x_3041.z, x_3042.w);
  SV_Target0.w = 1.0f;
  return;
}

struct main_out {
  @location(0)
  SV_Target0_1 : vec4<f32>,
}

@fragment
fn main(@location(7) vs_TEXCOORD6_param : vec4<f32>, @location(4) vs_TEXCOORD3_param : vec3<f32>, @location(6) vs_TEXCOORD5_param : vec4<f32>, @location(1) vs_TEXCOORD1_param : vec3<f32>, @location(0) vs_TEXCOORD0_param : vec4<f32>, @location(2) vs_NORMAL0_param : vec3<f32>, @location(3) vs_TEXCOORD2_param : vec3<f32>, @location(5) vs_TEXCOORD4_param : vec2<f32>, @builtin(position) gl_FragCoord_param : vec4<f32>) -> main_out {
  vs_TEXCOORD6 = vs_TEXCOORD6_param;
  vs_TEXCOORD3 = vs_TEXCOORD3_param;
  vs_TEXCOORD5 = vs_TEXCOORD5_param;
  vs_TEXCOORD1 = vs_TEXCOORD1_param;
  vs_TEXCOORD0 = vs_TEXCOORD0_param;
  vs_NORMAL0 = vs_NORMAL0_param;
  vs_TEXCOORD2 = vs_TEXCOORD2_param;
  vs_TEXCOORD4 = vs_TEXCOORD4_param;
  gl_FragCoord = gl_FragCoord_param;
  main_1();
  return main_out(SV_Target0);
}

