struct PGlobals {
  x_ScaledScreenParams : vec4<f32>,
  x_GlobalMipBias : vec2<f32>,
  x_AlphaToMaskAvailable : f32,
  @size(4)
  padding : u32,
  x_MainLightPosition : vec4<f32>,
  x_MainLightColor : vec4<f32>,
  x_AmbientOcclusionParam : vec4<f32>,
  x_AdditionalLightsCount : vec4<f32>,
  x_RenderingLayerMaxInt : u32,
  x_RenderingLayerRcpMaxInt : f32,
  @size(8)
  padding_1 : u32,
  x_WorldSpaceCameraPos : vec3<f32>,
  @size(4)
  padding_2 : u32,
  x_ScreenParams : vec4<f32>,
  unity_OrthoParams : vec4<f32>,
  x_ScaleBiasRt : vec4<f32>,
  unity_MatrixV : mat4x4<f32>,
}

type Arr = array<vec4<f32>, 2u>;

struct UnityPerDraw {
  unity_ObjectToWorld : mat4x4<f32>,
  unity_WorldToObject : mat4x4<f32>,
  unity_LODFade : vec4<f32>,
  unity_WorldTransformParams : vec4<f32>,
  unity_RenderingLayer : vec4<f32>,
  unity_LightData : vec4<f32>,
  unity_LightIndices : Arr,
  unity_ProbesOcclusion : vec4<f32>,
  unity_SpecCube0_HDR : vec4<f32>,
  unity_SpecCube1_HDR : vec4<f32>,
  unity_SpecCube0_BoxMax : vec4<f32>,
  unity_SpecCube0_BoxMin : vec4<f32>,
  unity_SpecCube0_ProbePosition : vec4<f32>,
  unity_SpecCube1_BoxMax : vec4<f32>,
  unity_SpecCube1_BoxMin : vec4<f32>,
  unity_SpecCube1_ProbePosition : vec4<f32>,
  unity_LightmapST : vec4<f32>,
  unity_DynamicLightmapST : vec4<f32>,
  unity_SHAr : vec4<f32>,
  unity_SHAg : vec4<f32>,
  unity_SHAb : vec4<f32>,
  unity_SHBr : vec4<f32>,
  unity_SHBg : vec4<f32>,
  unity_SHBb : vec4<f32>,
  unity_SHC : vec4<f32>,
  unity_RendererBounds_Min : vec4<f32>,
  unity_RendererBounds_Max : vec4<f32>,
  unity_MatrixPreviousM : mat4x4<f32>,
  unity_MatrixPreviousMI : mat4x4<f32>,
  unity_MotionVectorsParams : vec4<f32>,
  unity_SpriteColor : vec4<f32>,
  unity_SpriteProps : vec4<f32>,
}

struct UnityPerMaterial {
  Texture2D_B222E8F_TexelSize : vec4<f32>,
  Color_C30C7CA3 : vec4<f32>,
  Texture2D_D9BFD5F1_TexelSize : vec4<f32>,
}

type Arr_1 = array<mat4x4<f32>, 5u>;

struct MainLightShadows {
  x_MainLightWorldToShadow : Arr_1,
  x_CascadeShadowSplitSpheres0 : vec4<f32>,
  x_CascadeShadowSplitSpheres1 : vec4<f32>,
  x_CascadeShadowSplitSpheres2 : vec4<f32>,
  x_CascadeShadowSplitSpheres3 : vec4<f32>,
  x_CascadeShadowSplitSphereRadii : vec4<f32>,
  x_MainLightShadowOffset0 : vec4<f32>,
  x_MainLightShadowOffset1 : vec4<f32>,
  x_MainLightShadowParams : vec4<f32>,
  x_MainLightShadowmapSize : vec4<f32>,
}

type Arr_2 = array<vec4<f32>, 256u>;

type Arr_3 = array<vec4<f32>, 256u>;

type Arr_4 = array<vec4<f32>, 256u>;

type Arr_5 = array<vec4<f32>, 256u>;

type Arr_6 = array<vec4<f32>, 256u>;

struct strided_arr {
  @size(16)
  el : f32,
}

type Arr_7 = array<strided_arr, 256u>;

struct AdditionalLights {
  x_AdditionalLightsPosition : Arr_6,
  x_AdditionalLightsColor : Arr_6,
  x_AdditionalLightsAttenuation : Arr_6,
  x_AdditionalLightsSpotDir : Arr_6,
  x_AdditionalLightsOcclusionProbes : Arr_6,
  x_AdditionalLightsLayerMasks : Arr_7,
}

var<private> gl_FragCoord : vec4<f32>;

var<private> vs_INTERP1 : vec3<f32>;

@group(1) @binding(0) var<uniform> x_90 : PGlobals;

var<private> vs_INTERP0 : vec3<f32>;

@group(1) @binding(2) var<uniform> x_161 : UnityPerDraw;

@group(0) @binding(3) var Texture2D_B222E8F : texture_2d<f32>;

@group(0) @binding(8) var samplerTexture2D_B222E8F : sampler;

var<private> vs_INTERP3 : vec4<f32>;

@group(1) @binding(4) var<uniform> x_215 : UnityPerMaterial;

@group(0) @binding(4) var Texture2D_D9BFD5F1 : texture_2d<f32>;

@group(0) @binding(9) var samplerTexture2D_D9BFD5F1 : sampler;

var<private> vs_INTERP4 : vec4<f32>;

@group(1) @binding(3) var<uniform> x_272 : MainLightShadows;

@group(0) @binding(2) var x_MainLightShadowmapTexture : texture_depth_2d;

@group(0) @binding(7) var sampler_MainLightShadowmapTexture : sampler_comparison;

var<private> vs_INTERP2 : vec4<f32>;

@group(0) @binding(1) var x_ScreenSpaceOcclusionTexture : texture_2d<f32>;

@group(0) @binding(6) var sampler_ScreenSpaceOcclusionTexture : sampler;

var<private> vs_INTERP9 : vec4<f32>;

@group(0) @binding(0) var unity_SpecCube0 : texture_cube<f32>;

@group(0) @binding(5) var samplerunity_SpecCube0 : sampler;

@group(1) @binding(1) var<uniform> x_3665 : AdditionalLights;

var<private> SV_Target0 : vec4<f32>;

var<private> SV_Target1 : vec4<f32>;

fn int_bitfieldInsert_i1_i1_i1_i1_(base : ptr<function, i32>, insert : ptr<function, i32>, offset_1 : ptr<function, i32>, bits : ptr<function, i32>) -> i32 {
  var mask : u32;
  let x_19 : i32 = *(bits);
  let x_23 : i32 = *(offset_1);
  mask = (~((4294967295u << bitcast<u32>(x_19))) << bitcast<u32>(x_23));
  let x_26 : i32 = *(base);
  let x_28 : u32 = mask;
  let x_31 : i32 = *(insert);
  let x_33 : i32 = *(offset_1);
  let x_36 : u32 = mask;
  return bitcast<i32>(((bitcast<u32>(x_26) & ~(x_28)) | ((bitcast<u32>(x_31) << bitcast<u32>(x_33)) & x_36)));
}

fn main_1() {
  var hlslcc_FragCoord : vec4<f32>;
  var u_xlat0 : vec3<f32>;
  var u_xlatb63 : bool;
  var u_xlat1 : vec3<f32>;
  var u_xlat64 : f32;
  var u_xlat2 : vec3<f32>;
  var x_118 : f32;
  var x_132 : f32;
  var x_145 : f32;
  var u_xlat63 : f32;
  var u_xlat3 : vec4<f32>;
  var u_xlat4 : vec3<f32>;
  var u_xlat5 : vec4<f32>;
  var u_xlat6 : vec4<f32>;
  var u_xlat26 : vec3<f32>;
  var u_xlatb64 : bool;
  var u_xlat7 : vec4<f32>;
  var txVec0 : vec3<f32>;
  var u_xlat8 : vec4<f32>;
  var txVec1 : vec3<f32>;
  var txVec2 : vec3<f32>;
  var txVec3 : vec3<f32>;
  var u_xlatb65 : bool;
  var u_xlat49 : vec2<f32>;
  var u_xlat9 : vec4<f32>;
  var u_xlat51 : vec2<f32>;
  var u_xlat10 : vec4<f32>;
  var u_xlat11 : vec4<f32>;
  var u_xlat12 : vec4<f32>;
  var u_xlat13 : vec4<f32>;
  var u_xlat14 : vec4<f32>;
  var u_xlat15 : vec4<f32>;
  var u_xlat65 : f32;
  var txVec4 : vec3<f32>;
  var u_xlat67 : f32;
  var txVec5 : vec3<f32>;
  var u_xlat69 : f32;
  var txVec6 : vec3<f32>;
  var txVec7 : vec3<f32>;
  var txVec8 : vec3<f32>;
  var txVec9 : vec3<f32>;
  var txVec10 : vec3<f32>;
  var txVec11 : vec3<f32>;
  var txVec12 : vec3<f32>;
  var u_xlat29 : vec3<f32>;
  var u_xlat16 : vec4<f32>;
  var u_xlat17 : vec4<f32>;
  var u_xlat30 : vec2<f32>;
  var u_xlat57 : vec2<f32>;
  var u_xlat52 : vec2<f32>;
  var u_xlat18 : vec4<f32>;
  var u_xlat19 : vec4<f32>;
  var u_xlat20 : vec4<f32>;
  var txVec13 : vec3<f32>;
  var txVec14 : vec3<f32>;
  var txVec15 : vec3<f32>;
  var txVec16 : vec3<f32>;
  var txVec17 : vec3<f32>;
  var txVec18 : vec3<f32>;
  var txVec19 : vec3<f32>;
  var txVec20 : vec3<f32>;
  var txVec21 : vec3<f32>;
  var txVec22 : vec3<f32>;
  var txVec23 : vec3<f32>;
  var txVec24 : vec3<f32>;
  var txVec25 : vec3<f32>;
  var txVec26 : vec3<f32>;
  var txVec27 : vec3<f32>;
  var txVec28 : vec3<f32>;
  var txVec29 : vec3<f32>;
  var u_xlatb67 : bool;
  var u_xlatb6 : bool;
  var x_1584 : f32;
  var u_xlatb3 : bool;
  var u_xlatu1 : vec3<u32>;
  var u_xlatu43 : u32;
  var u_xlatu24 : u32;
  var u_xlati43 : i32;
  var u_xlati22 : i32;
  var u_xlatu22 : u32;
  var u_xlati1 : i32;
  var param : i32;
  var param_1 : i32;
  var param_2 : i32;
  var param_3 : i32;
  var u_xlat22 : f32;
  var x_1717 : f32;
  var u_xlatb43 : vec2<bool>;
  var u_xlat43 : vec2<f32>;
  var u_xlatb22 : bool;
  var x_1789 : f32;
  var u_xlat66 : f32;
  var u_xlat27 : f32;
  var txVec30 : vec3<f32>;
  var txVec31 : vec3<f32>;
  var txVec32 : vec3<f32>;
  var txVec33 : vec3<f32>;
  var u_xlatb48 : bool;
  var u_xlat48 : vec2<f32>;
  var txVec34 : vec3<f32>;
  var txVec35 : vec3<f32>;
  var txVec36 : vec3<f32>;
  var txVec37 : vec3<f32>;
  var txVec38 : vec3<f32>;
  var txVec39 : vec3<f32>;
  var txVec40 : vec3<f32>;
  var txVec41 : vec3<f32>;
  var txVec42 : vec3<f32>;
  var u_xlat55 : vec2<f32>;
  var txVec43 : vec3<f32>;
  var txVec44 : vec3<f32>;
  var u_xlat71 : f32;
  var txVec45 : vec3<f32>;
  var txVec46 : vec3<f32>;
  var txVec47 : vec3<f32>;
  var txVec48 : vec3<f32>;
  var txVec49 : vec3<f32>;
  var txVec50 : vec3<f32>;
  var txVec51 : vec3<f32>;
  var txVec52 : vec3<f32>;
  var txVec53 : vec3<f32>;
  var txVec54 : vec3<f32>;
  var txVec55 : vec3<f32>;
  var txVec56 : vec3<f32>;
  var txVec57 : vec3<f32>;
  var u_xlat28 : f32;
  var txVec58 : vec3<f32>;
  var txVec59 : vec3<f32>;
  var u_xlatu63 : u32;
  var u_xlatu_loop_1 : u32;
  var u_xlatu65 : u32;
  var u_xlati67 : i32;
  var indexable : array<vec4<u32>, 4u>;
  var u_xlati65 : i32;
  var x_3872 : f32;
  var u_xlatu0 : u32;
  var u_xlat_precise_vec4 : vec4<f32>;
  var u_xlat_precise_ivec4 : vec4<i32>;
  var u_xlat_precise_bvec4 : vec4<bool>;
  var u_xlat_precise_uvec4 : vec4<u32>;
  let x_49 : vec4<f32> = gl_FragCoord;
  let x_50 : vec3<f32> = vec3<f32>(x_49.x, x_49.y, x_49.z);
  let x_55 : f32 = gl_FragCoord.w;
  hlslcc_FragCoord = vec4<f32>(x_50.x, x_50.y, x_50.z, (1.0f / x_55));
  let x_65 : vec3<f32> = vs_INTERP1;
  let x_66 : vec3<f32> = vs_INTERP1;
  u_xlat0.x = dot(x_65, x_66);
  let x_72 : f32 = u_xlat0.x;
  u_xlat0.x = sqrt(x_72);
  let x_76 : f32 = u_xlat0.x;
  u_xlat0.x = (1.0f / x_76);
  let x_79 : vec3<f32> = u_xlat0;
  let x_81 : vec3<f32> = vs_INTERP1;
  u_xlat0 = (vec3<f32>(x_79.x, x_79.x, x_79.x) * x_81);
  let x_94 : f32 = x_90.unity_OrthoParams.w;
  u_xlatb63 = (x_94 == 0.0f);
  let x_99 : vec3<f32> = vs_INTERP0;
  let x_104 : vec3<f32> = x_90.x_WorldSpaceCameraPos;
  u_xlat1 = (-(x_99) + x_104);
  let x_107 : vec3<f32> = u_xlat1;
  let x_108 : vec3<f32> = u_xlat1;
  u_xlat64 = dot(x_107, x_108);
  let x_110 : f32 = u_xlat64;
  u_xlat64 = inverseSqrt(x_110);
  let x_112 : f32 = u_xlat64;
  let x_114 : vec3<f32> = u_xlat1;
  u_xlat1 = (vec3<f32>(x_112, x_112, x_112) * x_114);
  let x_117 : bool = u_xlatb63;
  if (x_117) {
    let x_122 : f32 = u_xlat1.x;
    x_118 = x_122;
  } else {
    let x_128 : f32 = x_90.unity_MatrixV[0i].z;
    x_118 = x_128;
  }
  let x_129 : f32 = x_118;
  u_xlat2.x = x_129;
  let x_131 : bool = u_xlatb63;
  if (x_131) {
    let x_137 : f32 = u_xlat1.y;
    x_132 = x_137;
  } else {
    let x_141 : f32 = x_90.unity_MatrixV[1i].z;
    x_132 = x_141;
  }
  let x_142 : f32 = x_132;
  u_xlat2.y = x_142;
  let x_144 : bool = u_xlatb63;
  if (x_144) {
    let x_149 : f32 = u_xlat1.z;
    x_145 = x_149;
  } else {
    let x_153 : f32 = x_90.unity_MatrixV[2i].z;
    x_145 = x_153;
  }
  let x_154 : f32 = x_145;
  u_xlat2.z = x_154;
  let x_156 : vec3<f32> = u_xlat2;
  let x_164 : vec4<f32> = x_161.unity_WorldToObject[1i];
  u_xlat1 = (vec3<f32>(x_156.y, x_156.y, x_156.y) * vec3<f32>(x_164.x, x_164.y, x_164.z));
  let x_168 : vec4<f32> = x_161.unity_WorldToObject[0i];
  let x_170 : vec3<f32> = u_xlat2;
  let x_173 : vec3<f32> = u_xlat1;
  u_xlat1 = ((vec3<f32>(x_168.x, x_168.y, x_168.z) * vec3<f32>(x_170.x, x_170.x, x_170.x)) + x_173);
  let x_176 : vec4<f32> = x_161.unity_WorldToObject[2i];
  let x_178 : vec3<f32> = u_xlat2;
  let x_181 : vec3<f32> = u_xlat1;
  u_xlat1 = ((vec3<f32>(x_176.x, x_176.y, x_176.z) * vec3<f32>(x_178.z, x_178.z, x_178.z)) + x_181);
  let x_184 : vec3<f32> = u_xlat1;
  let x_185 : vec3<f32> = u_xlat1;
  u_xlat63 = dot(x_184, x_185);
  let x_187 : f32 = u_xlat63;
  u_xlat63 = inverseSqrt(x_187);
  let x_189 : f32 = u_xlat63;
  let x_191 : vec3<f32> = u_xlat1;
  u_xlat1 = (vec3<f32>(x_189, x_189, x_189) * x_191);
  let x_205 : vec4<f32> = vs_INTERP3;
  let x_208 : f32 = x_90.x_GlobalMipBias.x;
  let x_209 : vec4<f32> = textureSampleBias(Texture2D_B222E8F, samplerTexture2D_B222E8F, vec2<f32>(x_205.x, x_205.y), x_208);
  u_xlat3 = x_209;
  let x_211 : vec4<f32> = u_xlat3;
  let x_217 : vec4<f32> = x_215.Color_C30C7CA3;
  u_xlat4 = (vec3<f32>(x_211.x, x_211.y, x_211.z) * vec3<f32>(x_217.x, x_217.y, x_217.z));
  let x_226 : vec4<f32> = vs_INTERP3;
  let x_229 : f32 = x_90.x_GlobalMipBias.x;
  let x_230 : vec4<f32> = textureSampleBias(Texture2D_D9BFD5F1, samplerTexture2D_D9BFD5F1, vec2<f32>(x_226.x, x_226.y), x_229);
  u_xlat5 = vec4<f32>(x_230.w, x_230.x, x_230.y, x_230.z);
  let x_233 : vec4<f32> = u_xlat5;
  u_xlat6 = ((vec4<f32>(x_233.y, x_233.z, x_233.w, x_233.x) * vec4<f32>(2.0f, 2.0f, 2.0f, 2.0f)) + vec4<f32>(-1.0f, -1.0f, -1.0f, -1.0f));
  let x_241 : vec4<f32> = u_xlat6;
  let x_242 : vec4<f32> = u_xlat6;
  u_xlat63 = dot(x_241, x_242);
  let x_244 : f32 = u_xlat63;
  u_xlat63 = inverseSqrt(x_244);
  let x_247 : f32 = u_xlat63;
  let x_249 : vec4<f32> = u_xlat6;
  u_xlat26 = (vec3<f32>(x_247, x_247, x_247) * vec3<f32>(x_249.x, x_249.y, x_249.z));
  let x_254 : f32 = vs_INTERP4.y;
  u_xlat63 = (x_254 * 200.0f);
  let x_257 : f32 = u_xlat63;
  u_xlat63 = min(x_257, 1.0f);
  let x_259 : f32 = u_xlat63;
  let x_261 : vec4<f32> = u_xlat3;
  let x_263 : vec3<f32> = (vec3<f32>(x_259, x_259, x_259) * vec3<f32>(x_261.x, x_261.y, x_261.z));
  let x_264 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_263.x, x_263.y, x_263.z, x_264.w);
  let x_266 : vec3<f32> = vs_INTERP0;
  let x_274 : vec4<f32> = x_272.x_MainLightWorldToShadow[0i][1i];
  let x_276 : vec3<f32> = (vec3<f32>(x_266.y, x_266.y, x_266.y) * vec3<f32>(x_274.x, x_274.y, x_274.z));
  let x_277 : vec4<f32> = u_xlat6;
  u_xlat6 = vec4<f32>(x_276.x, x_276.y, x_276.z, x_277.w);
  let x_280 : vec4<f32> = x_272.x_MainLightWorldToShadow[0i][0i];
  let x_282 : vec3<f32> = vs_INTERP0;
  let x_285 : vec4<f32> = u_xlat6;
  let x_287 : vec3<f32> = ((vec3<f32>(x_280.x, x_280.y, x_280.z) * vec3<f32>(x_282.x, x_282.x, x_282.x)) + vec3<f32>(x_285.x, x_285.y, x_285.z));
  let x_288 : vec4<f32> = u_xlat6;
  u_xlat6 = vec4<f32>(x_287.x, x_287.y, x_287.z, x_288.w);
  let x_291 : vec4<f32> = x_272.x_MainLightWorldToShadow[0i][2i];
  let x_293 : vec3<f32> = vs_INTERP0;
  let x_296 : vec4<f32> = u_xlat6;
  let x_298 : vec3<f32> = ((vec3<f32>(x_291.x, x_291.y, x_291.z) * vec3<f32>(x_293.z, x_293.z, x_293.z)) + vec3<f32>(x_296.x, x_296.y, x_296.z));
  let x_299 : vec4<f32> = u_xlat6;
  u_xlat6 = vec4<f32>(x_298.x, x_298.y, x_298.z, x_299.w);
  let x_301 : vec4<f32> = u_xlat6;
  let x_305 : vec4<f32> = x_272.x_MainLightWorldToShadow[0i][3i];
  let x_307 : vec3<f32> = (vec3<f32>(x_301.x, x_301.y, x_301.z) + vec3<f32>(x_305.x, x_305.y, x_305.z));
  let x_308 : vec4<f32> = u_xlat6;
  u_xlat6 = vec4<f32>(x_307.x, x_307.y, x_307.z, x_308.w);
  let x_312 : f32 = x_272.x_MainLightShadowParams.y;
  u_xlatb63 = (0.0f < x_312);
  let x_314 : bool = u_xlatb63;
  if (x_314) {
    let x_319 : f32 = x_272.x_MainLightShadowParams.y;
    u_xlatb64 = (x_319 == 1.0f);
    let x_321 : bool = u_xlatb64;
    if (x_321) {
      let x_325 : vec4<f32> = u_xlat6;
      let x_329 : vec4<f32> = x_272.x_MainLightShadowOffset0;
      u_xlat7 = (vec4<f32>(x_325.x, x_325.y, x_325.x, x_325.y) + x_329);
      let x_332 : vec4<f32> = u_xlat7;
      let x_333 : vec2<f32> = vec2<f32>(x_332.x, x_332.y);
      let x_335 : f32 = u_xlat6.z;
      txVec0 = vec3<f32>(x_333.x, x_333.y, x_335);
      let x_348 : vec3<f32> = txVec0;
      let x_350 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_348.xy, x_348.z);
      u_xlat8.x = x_350;
      let x_353 : vec4<f32> = u_xlat7;
      let x_354 : vec2<f32> = vec2<f32>(x_353.z, x_353.w);
      let x_356 : f32 = u_xlat6.z;
      txVec1 = vec3<f32>(x_354.x, x_354.y, x_356);
      let x_363 : vec3<f32> = txVec1;
      let x_365 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_363.xy, x_363.z);
      u_xlat8.y = x_365;
      let x_367 : vec4<f32> = u_xlat6;
      let x_371 : vec4<f32> = x_272.x_MainLightShadowOffset1;
      u_xlat7 = (vec4<f32>(x_367.x, x_367.y, x_367.x, x_367.y) + x_371);
      let x_374 : vec4<f32> = u_xlat7;
      let x_375 : vec2<f32> = vec2<f32>(x_374.x, x_374.y);
      let x_377 : f32 = u_xlat6.z;
      txVec2 = vec3<f32>(x_375.x, x_375.y, x_377);
      let x_384 : vec3<f32> = txVec2;
      let x_386 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_384.xy, x_384.z);
      u_xlat8.z = x_386;
      let x_389 : vec4<f32> = u_xlat7;
      let x_390 : vec2<f32> = vec2<f32>(x_389.z, x_389.w);
      let x_392 : f32 = u_xlat6.z;
      txVec3 = vec3<f32>(x_390.x, x_390.y, x_392);
      let x_399 : vec3<f32> = txVec3;
      let x_401 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_399.xy, x_399.z);
      u_xlat8.w = x_401;
      let x_403 : vec4<f32> = u_xlat8;
      u_xlat64 = dot(x_403, vec4<f32>(0.25f, 0.25f, 0.25f, 0.25f));
    } else {
      let x_410 : f32 = x_272.x_MainLightShadowParams.y;
      u_xlatb65 = (x_410 == 2.0f);
      let x_412 : bool = u_xlatb65;
      if (x_412) {
        let x_415 : vec4<f32> = u_xlat6;
        let x_418 : vec4<f32> = x_272.x_MainLightShadowmapSize;
        let x_423 : vec2<f32> = ((vec2<f32>(x_415.x, x_415.y) * vec2<f32>(x_418.z, x_418.w)) + vec2<f32>(0.5f, 0.5f));
        let x_424 : vec4<f32> = u_xlat7;
        u_xlat7 = vec4<f32>(x_423.x, x_423.y, x_424.z, x_424.w);
        let x_426 : vec4<f32> = u_xlat7;
        let x_428 : vec2<f32> = floor(vec2<f32>(x_426.x, x_426.y));
        let x_429 : vec4<f32> = u_xlat7;
        u_xlat7 = vec4<f32>(x_428.x, x_428.y, x_429.z, x_429.w);
        let x_433 : vec4<f32> = u_xlat6;
        let x_436 : vec4<f32> = x_272.x_MainLightShadowmapSize;
        let x_439 : vec4<f32> = u_xlat7;
        u_xlat49 = ((vec2<f32>(x_433.x, x_433.y) * vec2<f32>(x_436.z, x_436.w)) + -(vec2<f32>(x_439.x, x_439.y)));
        let x_443 : vec2<f32> = u_xlat49;
        u_xlat8 = (vec4<f32>(x_443.x, x_443.x, x_443.y, x_443.y) + vec4<f32>(0.5f, 1.0f, 0.5f, 1.0f));
        let x_448 : vec4<f32> = u_xlat8;
        let x_450 : vec4<f32> = u_xlat8;
        u_xlat9 = (vec4<f32>(x_448.x, x_448.x, x_448.z, x_448.z) * vec4<f32>(x_450.x, x_450.x, x_450.z, x_450.z));
        let x_453 : vec4<f32> = u_xlat9;
        let x_457 : vec2<f32> = (vec2<f32>(x_453.y, x_453.w) * vec2<f32>(0.079999998f, 0.079999998f));
        let x_458 : vec4<f32> = u_xlat8;
        u_xlat8 = vec4<f32>(x_457.x, x_458.y, x_457.y, x_458.w);
        let x_460 : vec4<f32> = u_xlat9;
        let x_463 : vec2<f32> = u_xlat49;
        let x_465 : vec2<f32> = ((vec2<f32>(x_460.x, x_460.z) * vec2<f32>(0.5f, 0.5f)) + -(x_463));
        let x_466 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_465.x, x_465.y, x_466.z, x_466.w);
        let x_469 : vec2<f32> = u_xlat49;
        u_xlat51 = (-(x_469) + vec2<f32>(1.0f, 1.0f));
        let x_474 : vec2<f32> = u_xlat49;
        let x_476 : vec2<f32> = min(x_474, vec2<f32>(0.0f, 0.0f));
        let x_477 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_476.x, x_476.y, x_477.z, x_477.w);
        let x_479 : vec4<f32> = u_xlat10;
        let x_482 : vec4<f32> = u_xlat10;
        let x_485 : vec2<f32> = u_xlat51;
        let x_486 : vec2<f32> = ((-(vec2<f32>(x_479.x, x_479.y)) * vec2<f32>(x_482.x, x_482.y)) + x_485);
        let x_487 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_486.x, x_486.y, x_487.z, x_487.w);
        let x_489 : vec2<f32> = u_xlat49;
        u_xlat49 = max(x_489, vec2<f32>(0.0f, 0.0f));
        let x_491 : vec2<f32> = u_xlat49;
        let x_493 : vec2<f32> = u_xlat49;
        let x_495 : vec4<f32> = u_xlat8;
        u_xlat49 = ((-(x_491) * x_493) + vec2<f32>(x_495.y, x_495.w));
        let x_498 : vec4<f32> = u_xlat10;
        let x_500 : vec2<f32> = (vec2<f32>(x_498.x, x_498.y) + vec2<f32>(1.0f, 1.0f));
        let x_501 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_500.x, x_500.y, x_501.z, x_501.w);
        let x_503 : vec2<f32> = u_xlat49;
        u_xlat49 = (x_503 + vec2<f32>(1.0f, 1.0f));
        let x_506 : vec4<f32> = u_xlat9;
        let x_510 : vec2<f32> = (vec2<f32>(x_506.x, x_506.y) * vec2<f32>(0.159999996f, 0.159999996f));
        let x_511 : vec4<f32> = u_xlat11;
        u_xlat11 = vec4<f32>(x_510.x, x_510.y, x_511.z, x_511.w);
        let x_513 : vec2<f32> = u_xlat51;
        let x_514 : vec2<f32> = (x_513 * vec2<f32>(0.159999996f, 0.159999996f));
        let x_515 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_514.x, x_514.y, x_515.z, x_515.w);
        let x_517 : vec4<f32> = u_xlat10;
        let x_519 : vec2<f32> = (vec2<f32>(x_517.x, x_517.y) * vec2<f32>(0.159999996f, 0.159999996f));
        let x_520 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_519.x, x_519.y, x_520.z, x_520.w);
        let x_523 : vec2<f32> = u_xlat49;
        let x_524 : vec2<f32> = (x_523 * vec2<f32>(0.159999996f, 0.159999996f));
        let x_525 : vec4<f32> = u_xlat12;
        u_xlat12 = vec4<f32>(x_524.x, x_524.y, x_525.z, x_525.w);
        let x_527 : vec4<f32> = u_xlat8;
        u_xlat49 = (vec2<f32>(x_527.y, x_527.w) * vec2<f32>(0.159999996f, 0.159999996f));
        let x_531 : f32 = u_xlat10.x;
        u_xlat11.z = x_531;
        let x_534 : f32 = u_xlat49.x;
        u_xlat11.w = x_534;
        let x_537 : f32 = u_xlat12.x;
        u_xlat9.z = x_537;
        let x_540 : f32 = u_xlat8.x;
        u_xlat9.w = x_540;
        let x_543 : vec4<f32> = u_xlat9;
        let x_545 : vec4<f32> = u_xlat11;
        u_xlat13 = (vec4<f32>(x_543.z, x_543.w, x_543.x, x_543.z) + vec4<f32>(x_545.z, x_545.w, x_545.x, x_545.z));
        let x_549 : f32 = u_xlat11.y;
        u_xlat10.z = x_549;
        let x_552 : f32 = u_xlat49.y;
        u_xlat10.w = x_552;
        let x_555 : f32 = u_xlat9.y;
        u_xlat12.z = x_555;
        let x_558 : f32 = u_xlat8.z;
        u_xlat12.w = x_558;
        let x_560 : vec4<f32> = u_xlat10;
        let x_562 : vec4<f32> = u_xlat12;
        let x_564 : vec3<f32> = (vec3<f32>(x_560.z, x_560.y, x_560.w) + vec3<f32>(x_562.z, x_562.y, x_562.w));
        let x_565 : vec4<f32> = u_xlat8;
        u_xlat8 = vec4<f32>(x_564.x, x_564.y, x_564.z, x_565.w);
        let x_567 : vec4<f32> = u_xlat9;
        let x_569 : vec4<f32> = u_xlat13;
        let x_571 : vec3<f32> = (vec3<f32>(x_567.x, x_567.z, x_567.w) / vec3<f32>(x_569.z, x_569.w, x_569.y));
        let x_572 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_571.x, x_571.y, x_571.z, x_572.w);
        let x_574 : vec4<f32> = u_xlat9;
        let x_580 : vec3<f32> = (vec3<f32>(x_574.x, x_574.y, x_574.z) + vec3<f32>(-2.5f, -0.5f, 1.5f));
        let x_581 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_580.x, x_580.y, x_580.z, x_581.w);
        let x_583 : vec4<f32> = u_xlat12;
        let x_585 : vec4<f32> = u_xlat8;
        let x_587 : vec3<f32> = (vec3<f32>(x_583.z, x_583.y, x_583.w) / vec3<f32>(x_585.x, x_585.y, x_585.z));
        let x_588 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_587.x, x_587.y, x_587.z, x_588.w);
        let x_590 : vec4<f32> = u_xlat10;
        let x_592 : vec3<f32> = (vec3<f32>(x_590.x, x_590.y, x_590.z) + vec3<f32>(-2.5f, -0.5f, 1.5f));
        let x_593 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_592.x, x_592.y, x_592.z, x_593.w);
        let x_595 : vec4<f32> = u_xlat9;
        let x_598 : vec4<f32> = x_272.x_MainLightShadowmapSize;
        let x_600 : vec3<f32> = (vec3<f32>(x_595.y, x_595.x, x_595.z) * vec3<f32>(x_598.x, x_598.x, x_598.x));
        let x_601 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_600.x, x_600.y, x_600.z, x_601.w);
        let x_603 : vec4<f32> = u_xlat10;
        let x_606 : vec4<f32> = x_272.x_MainLightShadowmapSize;
        let x_608 : vec3<f32> = (vec3<f32>(x_603.x, x_603.y, x_603.z) * vec3<f32>(x_606.y, x_606.y, x_606.y));
        let x_609 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_608.x, x_608.y, x_608.z, x_609.w);
        let x_612 : f32 = u_xlat10.x;
        u_xlat9.w = x_612;
        let x_614 : vec4<f32> = u_xlat7;
        let x_617 : vec4<f32> = x_272.x_MainLightShadowmapSize;
        let x_620 : vec4<f32> = u_xlat9;
        u_xlat11 = ((vec4<f32>(x_614.x, x_614.y, x_614.x, x_614.y) * vec4<f32>(x_617.x, x_617.y, x_617.x, x_617.y)) + vec4<f32>(x_620.y, x_620.w, x_620.x, x_620.w));
        let x_623 : vec4<f32> = u_xlat7;
        let x_626 : vec4<f32> = x_272.x_MainLightShadowmapSize;
        let x_629 : vec4<f32> = u_xlat9;
        u_xlat49 = ((vec2<f32>(x_623.x, x_623.y) * vec2<f32>(x_626.x, x_626.y)) + vec2<f32>(x_629.z, x_629.w));
        let x_633 : f32 = u_xlat9.y;
        u_xlat10.w = x_633;
        let x_635 : vec4<f32> = u_xlat10;
        let x_636 : vec2<f32> = vec2<f32>(x_635.y, x_635.z);
        let x_637 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_637.x, x_636.x, x_637.z, x_636.y);
        let x_639 : vec4<f32> = u_xlat7;
        let x_642 : vec4<f32> = x_272.x_MainLightShadowmapSize;
        let x_645 : vec4<f32> = u_xlat9;
        u_xlat12 = ((vec4<f32>(x_639.x, x_639.y, x_639.x, x_639.y) * vec4<f32>(x_642.x, x_642.y, x_642.x, x_642.y)) + vec4<f32>(x_645.x, x_645.y, x_645.z, x_645.y));
        let x_648 : vec4<f32> = u_xlat7;
        let x_651 : vec4<f32> = x_272.x_MainLightShadowmapSize;
        let x_654 : vec4<f32> = u_xlat10;
        u_xlat10 = ((vec4<f32>(x_648.x, x_648.y, x_648.x, x_648.y) * vec4<f32>(x_651.x, x_651.y, x_651.x, x_651.y)) + vec4<f32>(x_654.w, x_654.y, x_654.w, x_654.z));
        let x_657 : vec4<f32> = u_xlat7;
        let x_660 : vec4<f32> = x_272.x_MainLightShadowmapSize;
        let x_663 : vec4<f32> = u_xlat9;
        u_xlat9 = ((vec4<f32>(x_657.x, x_657.y, x_657.x, x_657.y) * vec4<f32>(x_660.x, x_660.y, x_660.x, x_660.y)) + vec4<f32>(x_663.x, x_663.w, x_663.z, x_663.w));
        let x_667 : vec4<f32> = u_xlat8;
        let x_669 : vec4<f32> = u_xlat13;
        u_xlat14 = (vec4<f32>(x_667.x, x_667.x, x_667.x, x_667.y) * vec4<f32>(x_669.z, x_669.w, x_669.y, x_669.z));
        let x_673 : vec4<f32> = u_xlat8;
        let x_675 : vec4<f32> = u_xlat13;
        u_xlat15 = (vec4<f32>(x_673.y, x_673.y, x_673.z, x_673.z) * x_675);
        let x_679 : f32 = u_xlat8.z;
        let x_681 : f32 = u_xlat13.y;
        u_xlat65 = (x_679 * x_681);
        let x_684 : vec4<f32> = u_xlat11;
        let x_685 : vec2<f32> = vec2<f32>(x_684.x, x_684.y);
        let x_687 : f32 = u_xlat6.z;
        txVec4 = vec3<f32>(x_685.x, x_685.y, x_687);
        let x_695 : vec3<f32> = txVec4;
        let x_697 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_695.xy, x_695.z);
        u_xlat67 = x_697;
        let x_699 : vec4<f32> = u_xlat11;
        let x_700 : vec2<f32> = vec2<f32>(x_699.z, x_699.w);
        let x_702 : f32 = u_xlat6.z;
        txVec5 = vec3<f32>(x_700.x, x_700.y, x_702);
        let x_710 : vec3<f32> = txVec5;
        let x_712 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_710.xy, x_710.z);
        u_xlat69 = x_712;
        let x_713 : f32 = u_xlat69;
        let x_715 : f32 = u_xlat14.y;
        u_xlat69 = (x_713 * x_715);
        let x_718 : f32 = u_xlat14.x;
        let x_719 : f32 = u_xlat67;
        let x_721 : f32 = u_xlat69;
        u_xlat67 = ((x_718 * x_719) + x_721);
        let x_724 : vec2<f32> = u_xlat49;
        let x_726 : f32 = u_xlat6.z;
        txVec6 = vec3<f32>(x_724.x, x_724.y, x_726);
        let x_733 : vec3<f32> = txVec6;
        let x_735 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_733.xy, x_733.z);
        u_xlat69 = x_735;
        let x_737 : f32 = u_xlat14.z;
        let x_738 : f32 = u_xlat69;
        let x_740 : f32 = u_xlat67;
        u_xlat67 = ((x_737 * x_738) + x_740);
        let x_743 : vec4<f32> = u_xlat10;
        let x_744 : vec2<f32> = vec2<f32>(x_743.x, x_743.y);
        let x_746 : f32 = u_xlat6.z;
        txVec7 = vec3<f32>(x_744.x, x_744.y, x_746);
        let x_753 : vec3<f32> = txVec7;
        let x_755 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_753.xy, x_753.z);
        u_xlat69 = x_755;
        let x_757 : f32 = u_xlat14.w;
        let x_758 : f32 = u_xlat69;
        let x_760 : f32 = u_xlat67;
        u_xlat67 = ((x_757 * x_758) + x_760);
        let x_763 : vec4<f32> = u_xlat12;
        let x_764 : vec2<f32> = vec2<f32>(x_763.x, x_763.y);
        let x_766 : f32 = u_xlat6.z;
        txVec8 = vec3<f32>(x_764.x, x_764.y, x_766);
        let x_773 : vec3<f32> = txVec8;
        let x_775 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_773.xy, x_773.z);
        u_xlat69 = x_775;
        let x_777 : f32 = u_xlat15.x;
        let x_778 : f32 = u_xlat69;
        let x_780 : f32 = u_xlat67;
        u_xlat67 = ((x_777 * x_778) + x_780);
        let x_783 : vec4<f32> = u_xlat12;
        let x_784 : vec2<f32> = vec2<f32>(x_783.z, x_783.w);
        let x_786 : f32 = u_xlat6.z;
        txVec9 = vec3<f32>(x_784.x, x_784.y, x_786);
        let x_793 : vec3<f32> = txVec9;
        let x_795 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_793.xy, x_793.z);
        u_xlat69 = x_795;
        let x_797 : f32 = u_xlat15.y;
        let x_798 : f32 = u_xlat69;
        let x_800 : f32 = u_xlat67;
        u_xlat67 = ((x_797 * x_798) + x_800);
        let x_803 : vec4<f32> = u_xlat10;
        let x_804 : vec2<f32> = vec2<f32>(x_803.z, x_803.w);
        let x_806 : f32 = u_xlat6.z;
        txVec10 = vec3<f32>(x_804.x, x_804.y, x_806);
        let x_813 : vec3<f32> = txVec10;
        let x_815 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_813.xy, x_813.z);
        u_xlat69 = x_815;
        let x_817 : f32 = u_xlat15.z;
        let x_818 : f32 = u_xlat69;
        let x_820 : f32 = u_xlat67;
        u_xlat67 = ((x_817 * x_818) + x_820);
        let x_823 : vec4<f32> = u_xlat9;
        let x_824 : vec2<f32> = vec2<f32>(x_823.x, x_823.y);
        let x_826 : f32 = u_xlat6.z;
        txVec11 = vec3<f32>(x_824.x, x_824.y, x_826);
        let x_833 : vec3<f32> = txVec11;
        let x_835 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_833.xy, x_833.z);
        u_xlat69 = x_835;
        let x_837 : f32 = u_xlat15.w;
        let x_838 : f32 = u_xlat69;
        let x_840 : f32 = u_xlat67;
        u_xlat67 = ((x_837 * x_838) + x_840);
        let x_843 : vec4<f32> = u_xlat9;
        let x_844 : vec2<f32> = vec2<f32>(x_843.z, x_843.w);
        let x_846 : f32 = u_xlat6.z;
        txVec12 = vec3<f32>(x_844.x, x_844.y, x_846);
        let x_853 : vec3<f32> = txVec12;
        let x_855 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_853.xy, x_853.z);
        u_xlat69 = x_855;
        let x_856 : f32 = u_xlat65;
        let x_857 : f32 = u_xlat69;
        let x_859 : f32 = u_xlat67;
        u_xlat64 = ((x_856 * x_857) + x_859);
      } else {
        let x_862 : vec4<f32> = u_xlat6;
        let x_865 : vec4<f32> = x_272.x_MainLightShadowmapSize;
        let x_868 : vec2<f32> = ((vec2<f32>(x_862.x, x_862.y) * vec2<f32>(x_865.z, x_865.w)) + vec2<f32>(0.5f, 0.5f));
        let x_869 : vec4<f32> = u_xlat7;
        u_xlat7 = vec4<f32>(x_868.x, x_868.y, x_869.z, x_869.w);
        let x_871 : vec4<f32> = u_xlat7;
        let x_873 : vec2<f32> = floor(vec2<f32>(x_871.x, x_871.y));
        let x_874 : vec4<f32> = u_xlat7;
        u_xlat7 = vec4<f32>(x_873.x, x_873.y, x_874.z, x_874.w);
        let x_876 : vec4<f32> = u_xlat6;
        let x_879 : vec4<f32> = x_272.x_MainLightShadowmapSize;
        let x_882 : vec4<f32> = u_xlat7;
        u_xlat49 = ((vec2<f32>(x_876.x, x_876.y) * vec2<f32>(x_879.z, x_879.w)) + -(vec2<f32>(x_882.x, x_882.y)));
        let x_886 : vec2<f32> = u_xlat49;
        u_xlat8 = (vec4<f32>(x_886.x, x_886.x, x_886.y, x_886.y) + vec4<f32>(0.5f, 1.0f, 0.5f, 1.0f));
        let x_889 : vec4<f32> = u_xlat8;
        let x_891 : vec4<f32> = u_xlat8;
        u_xlat9 = (vec4<f32>(x_889.x, x_889.x, x_889.z, x_889.z) * vec4<f32>(x_891.x, x_891.x, x_891.z, x_891.z));
        let x_894 : vec4<f32> = u_xlat9;
        let x_898 : vec2<f32> = (vec2<f32>(x_894.y, x_894.w) * vec2<f32>(0.040816002f, 0.040816002f));
        let x_899 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_899.x, x_898.x, x_899.z, x_898.y);
        let x_901 : vec4<f32> = u_xlat9;
        let x_904 : vec2<f32> = u_xlat49;
        let x_906 : vec2<f32> = ((vec2<f32>(x_901.x, x_901.z) * vec2<f32>(0.5f, 0.5f)) + -(x_904));
        let x_907 : vec4<f32> = u_xlat8;
        u_xlat8 = vec4<f32>(x_906.x, x_907.y, x_906.y, x_907.w);
        let x_909 : vec2<f32> = u_xlat49;
        let x_911 : vec2<f32> = (-(x_909) + vec2<f32>(1.0f, 1.0f));
        let x_912 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_911.x, x_911.y, x_912.z, x_912.w);
        let x_914 : vec2<f32> = u_xlat49;
        u_xlat51 = min(x_914, vec2<f32>(0.0f, 0.0f));
        let x_916 : vec2<f32> = u_xlat51;
        let x_918 : vec2<f32> = u_xlat51;
        let x_920 : vec4<f32> = u_xlat9;
        let x_922 : vec2<f32> = ((-(x_916) * x_918) + vec2<f32>(x_920.x, x_920.y));
        let x_923 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_922.x, x_922.y, x_923.z, x_923.w);
        let x_925 : vec2<f32> = u_xlat49;
        u_xlat51 = max(x_925, vec2<f32>(0.0f, 0.0f));
        let x_928 : vec2<f32> = u_xlat51;
        let x_930 : vec2<f32> = u_xlat51;
        let x_932 : vec4<f32> = u_xlat8;
        let x_934 : vec2<f32> = ((-(x_928) * x_930) + vec2<f32>(x_932.y, x_932.w));
        let x_935 : vec3<f32> = u_xlat29;
        u_xlat29 = vec3<f32>(x_934.x, x_935.y, x_934.y);
        let x_937 : vec4<f32> = u_xlat9;
        let x_940 : vec2<f32> = (vec2<f32>(x_937.x, x_937.y) + vec2<f32>(2.0f, 2.0f));
        let x_941 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_940.x, x_940.y, x_941.z, x_941.w);
        let x_943 : vec3<f32> = u_xlat29;
        let x_945 : vec2<f32> = (vec2<f32>(x_943.x, x_943.z) + vec2<f32>(2.0f, 2.0f));
        let x_946 : vec4<f32> = u_xlat8;
        u_xlat8 = vec4<f32>(x_946.x, x_945.x, x_946.z, x_945.y);
        let x_949 : f32 = u_xlat8.y;
        u_xlat11.z = (x_949 * 0.081632003f);
        let x_953 : vec4<f32> = u_xlat8;
        let x_956 : vec3<f32> = (vec3<f32>(x_953.z, x_953.x, x_953.w) * vec3<f32>(0.081632003f, 0.081632003f, 0.081632003f));
        let x_957 : vec4<f32> = u_xlat12;
        u_xlat12 = vec4<f32>(x_956.x, x_956.y, x_956.z, x_957.w);
        let x_959 : vec4<f32> = u_xlat9;
        let x_962 : vec2<f32> = (vec2<f32>(x_959.x, x_959.y) * vec2<f32>(0.081632003f, 0.081632003f));
        let x_963 : vec4<f32> = u_xlat8;
        u_xlat8 = vec4<f32>(x_962.x, x_962.y, x_963.z, x_963.w);
        let x_966 : f32 = u_xlat12.y;
        u_xlat11.x = x_966;
        let x_968 : vec2<f32> = u_xlat49;
        let x_975 : vec2<f32> = ((vec2<f32>(x_968.x, x_968.x) * vec2<f32>(-0.081632003f, 0.081632003f)) + vec2<f32>(0.163264006f, 0.081632003f));
        let x_976 : vec4<f32> = u_xlat11;
        u_xlat11 = vec4<f32>(x_976.x, x_975.x, x_976.z, x_975.y);
        let x_978 : vec2<f32> = u_xlat49;
        let x_982 : vec2<f32> = ((vec2<f32>(x_978.x, x_978.x) * vec2<f32>(-0.081632003f, 0.081632003f)) + vec2<f32>(0.081632003f, 0.163264006f));
        let x_983 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_982.x, x_983.y, x_982.y, x_983.w);
        let x_986 : f32 = u_xlat8.x;
        u_xlat9.y = x_986;
        let x_989 : f32 = u_xlat10.y;
        u_xlat9.w = x_989;
        let x_991 : vec4<f32> = u_xlat9;
        let x_992 : vec4<f32> = u_xlat11;
        u_xlat11 = (x_991 + x_992);
        let x_994 : vec2<f32> = u_xlat49;
        let x_997 : vec2<f32> = ((vec2<f32>(x_994.y, x_994.y) * vec2<f32>(-0.081632003f, 0.081632003f)) + vec2<f32>(0.163264006f, 0.081632003f));
        let x_998 : vec4<f32> = u_xlat12;
        u_xlat12 = vec4<f32>(x_998.x, x_997.x, x_998.z, x_997.y);
        let x_1000 : vec2<f32> = u_xlat49;
        let x_1003 : vec2<f32> = ((vec2<f32>(x_1000.y, x_1000.y) * vec2<f32>(-0.081632003f, 0.081632003f)) + vec2<f32>(0.081632003f, 0.163264006f));
        let x_1004 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_1003.x, x_1004.y, x_1003.y, x_1004.w);
        let x_1007 : f32 = u_xlat8.y;
        u_xlat10.y = x_1007;
        let x_1009 : vec4<f32> = u_xlat10;
        let x_1010 : vec4<f32> = u_xlat12;
        u_xlat8 = (x_1009 + x_1010);
        let x_1012 : vec4<f32> = u_xlat9;
        let x_1013 : vec4<f32> = u_xlat11;
        u_xlat9 = (x_1012 / x_1013);
        let x_1015 : vec4<f32> = u_xlat9;
        u_xlat9 = (x_1015 + vec4<f32>(-3.5f, -1.5f, 0.5f, 2.5f));
        let x_1021 : vec4<f32> = u_xlat10;
        let x_1022 : vec4<f32> = u_xlat8;
        u_xlat10 = (x_1021 / x_1022);
        let x_1024 : vec4<f32> = u_xlat10;
        u_xlat10 = (x_1024 + vec4<f32>(-3.5f, -1.5f, 0.5f, 2.5f));
        let x_1026 : vec4<f32> = u_xlat9;
        let x_1029 : vec4<f32> = x_272.x_MainLightShadowmapSize;
        u_xlat9 = (vec4<f32>(x_1026.w, x_1026.x, x_1026.y, x_1026.z) * vec4<f32>(x_1029.x, x_1029.x, x_1029.x, x_1029.x));
        let x_1032 : vec4<f32> = u_xlat10;
        let x_1035 : vec4<f32> = x_272.x_MainLightShadowmapSize;
        u_xlat10 = (vec4<f32>(x_1032.x, x_1032.w, x_1032.y, x_1032.z) * vec4<f32>(x_1035.y, x_1035.y, x_1035.y, x_1035.y));
        let x_1038 : vec4<f32> = u_xlat9;
        let x_1039 : vec3<f32> = vec3<f32>(x_1038.y, x_1038.z, x_1038.w);
        let x_1040 : vec4<f32> = u_xlat12;
        u_xlat12 = vec4<f32>(x_1039.x, x_1040.y, x_1039.y, x_1039.z);
        let x_1043 : f32 = u_xlat10.x;
        u_xlat12.y = x_1043;
        let x_1045 : vec4<f32> = u_xlat7;
        let x_1048 : vec4<f32> = x_272.x_MainLightShadowmapSize;
        let x_1051 : vec4<f32> = u_xlat12;
        u_xlat13 = ((vec4<f32>(x_1045.x, x_1045.y, x_1045.x, x_1045.y) * vec4<f32>(x_1048.x, x_1048.y, x_1048.x, x_1048.y)) + vec4<f32>(x_1051.x, x_1051.y, x_1051.z, x_1051.y));
        let x_1054 : vec4<f32> = u_xlat7;
        let x_1057 : vec4<f32> = x_272.x_MainLightShadowmapSize;
        let x_1060 : vec4<f32> = u_xlat12;
        u_xlat49 = ((vec2<f32>(x_1054.x, x_1054.y) * vec2<f32>(x_1057.x, x_1057.y)) + vec2<f32>(x_1060.w, x_1060.y));
        let x_1064 : f32 = u_xlat12.y;
        u_xlat9.y = x_1064;
        let x_1067 : f32 = u_xlat10.z;
        u_xlat12.y = x_1067;
        let x_1069 : vec4<f32> = u_xlat7;
        let x_1072 : vec4<f32> = x_272.x_MainLightShadowmapSize;
        let x_1075 : vec4<f32> = u_xlat12;
        u_xlat14 = ((vec4<f32>(x_1069.x, x_1069.y, x_1069.x, x_1069.y) * vec4<f32>(x_1072.x, x_1072.y, x_1072.x, x_1072.y)) + vec4<f32>(x_1075.x, x_1075.y, x_1075.z, x_1075.y));
        let x_1078 : vec4<f32> = u_xlat7;
        let x_1081 : vec4<f32> = x_272.x_MainLightShadowmapSize;
        let x_1084 : vec4<f32> = u_xlat12;
        let x_1086 : vec2<f32> = ((vec2<f32>(x_1078.x, x_1078.y) * vec2<f32>(x_1081.x, x_1081.y)) + vec2<f32>(x_1084.w, x_1084.y));
        let x_1087 : vec4<f32> = u_xlat15;
        u_xlat15 = vec4<f32>(x_1086.x, x_1086.y, x_1087.z, x_1087.w);
        let x_1090 : f32 = u_xlat12.y;
        u_xlat9.z = x_1090;
        let x_1093 : vec4<f32> = u_xlat7;
        let x_1096 : vec4<f32> = x_272.x_MainLightShadowmapSize;
        let x_1099 : vec4<f32> = u_xlat9;
        u_xlat16 = ((vec4<f32>(x_1093.x, x_1093.y, x_1093.x, x_1093.y) * vec4<f32>(x_1096.x, x_1096.y, x_1096.x, x_1096.y)) + vec4<f32>(x_1099.x, x_1099.y, x_1099.x, x_1099.z));
        let x_1103 : f32 = u_xlat10.w;
        u_xlat12.y = x_1103;
        let x_1106 : vec4<f32> = u_xlat7;
        let x_1109 : vec4<f32> = x_272.x_MainLightShadowmapSize;
        let x_1112 : vec4<f32> = u_xlat12;
        u_xlat17 = ((vec4<f32>(x_1106.x, x_1106.y, x_1106.x, x_1106.y) * vec4<f32>(x_1109.x, x_1109.y, x_1109.x, x_1109.y)) + vec4<f32>(x_1112.x, x_1112.y, x_1112.z, x_1112.y));
        let x_1116 : vec4<f32> = u_xlat7;
        let x_1119 : vec4<f32> = x_272.x_MainLightShadowmapSize;
        let x_1122 : vec4<f32> = u_xlat12;
        u_xlat30 = ((vec2<f32>(x_1116.x, x_1116.y) * vec2<f32>(x_1119.x, x_1119.y)) + vec2<f32>(x_1122.w, x_1122.y));
        let x_1126 : f32 = u_xlat12.y;
        u_xlat9.w = x_1126;
        let x_1129 : vec4<f32> = u_xlat7;
        let x_1132 : vec4<f32> = x_272.x_MainLightShadowmapSize;
        let x_1135 : vec4<f32> = u_xlat9;
        u_xlat57 = ((vec2<f32>(x_1129.x, x_1129.y) * vec2<f32>(x_1132.x, x_1132.y)) + vec2<f32>(x_1135.x, x_1135.w));
        let x_1138 : vec4<f32> = u_xlat12;
        let x_1139 : vec3<f32> = vec3<f32>(x_1138.x, x_1138.z, x_1138.w);
        let x_1140 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_1139.x, x_1140.y, x_1139.y, x_1139.z);
        let x_1142 : vec4<f32> = u_xlat7;
        let x_1145 : vec4<f32> = x_272.x_MainLightShadowmapSize;
        let x_1148 : vec4<f32> = u_xlat10;
        u_xlat12 = ((vec4<f32>(x_1142.x, x_1142.y, x_1142.x, x_1142.y) * vec4<f32>(x_1145.x, x_1145.y, x_1145.x, x_1145.y)) + vec4<f32>(x_1148.x, x_1148.y, x_1148.z, x_1148.y));
        let x_1152 : vec4<f32> = u_xlat7;
        let x_1155 : vec4<f32> = x_272.x_MainLightShadowmapSize;
        let x_1158 : vec4<f32> = u_xlat10;
        u_xlat52 = ((vec2<f32>(x_1152.x, x_1152.y) * vec2<f32>(x_1155.x, x_1155.y)) + vec2<f32>(x_1158.w, x_1158.y));
        let x_1162 : f32 = u_xlat9.x;
        u_xlat10.x = x_1162;
        let x_1164 : vec4<f32> = u_xlat7;
        let x_1167 : vec4<f32> = x_272.x_MainLightShadowmapSize;
        let x_1170 : vec4<f32> = u_xlat10;
        let x_1172 : vec2<f32> = ((vec2<f32>(x_1164.x, x_1164.y) * vec2<f32>(x_1167.x, x_1167.y)) + vec2<f32>(x_1170.x, x_1170.y));
        let x_1173 : vec4<f32> = u_xlat7;
        u_xlat7 = vec4<f32>(x_1172.x, x_1172.y, x_1173.z, x_1173.w);
        let x_1176 : vec4<f32> = u_xlat8;
        let x_1178 : vec4<f32> = u_xlat11;
        u_xlat18 = (vec4<f32>(x_1176.x, x_1176.x, x_1176.x, x_1176.x) * x_1178);
        let x_1181 : vec4<f32> = u_xlat8;
        let x_1183 : vec4<f32> = u_xlat11;
        u_xlat19 = (vec4<f32>(x_1181.y, x_1181.y, x_1181.y, x_1181.y) * x_1183);
        let x_1186 : vec4<f32> = u_xlat8;
        let x_1188 : vec4<f32> = u_xlat11;
        u_xlat20 = (vec4<f32>(x_1186.z, x_1186.z, x_1186.z, x_1186.z) * x_1188);
        let x_1190 : vec4<f32> = u_xlat8;
        let x_1192 : vec4<f32> = u_xlat11;
        u_xlat8 = (vec4<f32>(x_1190.w, x_1190.w, x_1190.w, x_1190.w) * x_1192);
        let x_1195 : vec4<f32> = u_xlat13;
        let x_1196 : vec2<f32> = vec2<f32>(x_1195.x, x_1195.y);
        let x_1198 : f32 = u_xlat6.z;
        txVec13 = vec3<f32>(x_1196.x, x_1196.y, x_1198);
        let x_1205 : vec3<f32> = txVec13;
        let x_1207 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1205.xy, x_1205.z);
        u_xlat65 = x_1207;
        let x_1209 : vec4<f32> = u_xlat13;
        let x_1210 : vec2<f32> = vec2<f32>(x_1209.z, x_1209.w);
        let x_1212 : f32 = u_xlat6.z;
        txVec14 = vec3<f32>(x_1210.x, x_1210.y, x_1212);
        let x_1219 : vec3<f32> = txVec14;
        let x_1221 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1219.xy, x_1219.z);
        u_xlat67 = x_1221;
        let x_1222 : f32 = u_xlat67;
        let x_1224 : f32 = u_xlat18.y;
        u_xlat67 = (x_1222 * x_1224);
        let x_1227 : f32 = u_xlat18.x;
        let x_1228 : f32 = u_xlat65;
        let x_1230 : f32 = u_xlat67;
        u_xlat65 = ((x_1227 * x_1228) + x_1230);
        let x_1233 : vec2<f32> = u_xlat49;
        let x_1235 : f32 = u_xlat6.z;
        txVec15 = vec3<f32>(x_1233.x, x_1233.y, x_1235);
        let x_1242 : vec3<f32> = txVec15;
        let x_1244 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1242.xy, x_1242.z);
        u_xlat67 = x_1244;
        let x_1246 : f32 = u_xlat18.z;
        let x_1247 : f32 = u_xlat67;
        let x_1249 : f32 = u_xlat65;
        u_xlat65 = ((x_1246 * x_1247) + x_1249);
        let x_1252 : vec4<f32> = u_xlat16;
        let x_1253 : vec2<f32> = vec2<f32>(x_1252.x, x_1252.y);
        let x_1255 : f32 = u_xlat6.z;
        txVec16 = vec3<f32>(x_1253.x, x_1253.y, x_1255);
        let x_1262 : vec3<f32> = txVec16;
        let x_1264 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1262.xy, x_1262.z);
        u_xlat67 = x_1264;
        let x_1266 : f32 = u_xlat18.w;
        let x_1267 : f32 = u_xlat67;
        let x_1269 : f32 = u_xlat65;
        u_xlat65 = ((x_1266 * x_1267) + x_1269);
        let x_1272 : vec4<f32> = u_xlat14;
        let x_1273 : vec2<f32> = vec2<f32>(x_1272.x, x_1272.y);
        let x_1275 : f32 = u_xlat6.z;
        txVec17 = vec3<f32>(x_1273.x, x_1273.y, x_1275);
        let x_1282 : vec3<f32> = txVec17;
        let x_1284 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1282.xy, x_1282.z);
        u_xlat67 = x_1284;
        let x_1286 : f32 = u_xlat19.x;
        let x_1287 : f32 = u_xlat67;
        let x_1289 : f32 = u_xlat65;
        u_xlat65 = ((x_1286 * x_1287) + x_1289);
        let x_1292 : vec4<f32> = u_xlat14;
        let x_1293 : vec2<f32> = vec2<f32>(x_1292.z, x_1292.w);
        let x_1295 : f32 = u_xlat6.z;
        txVec18 = vec3<f32>(x_1293.x, x_1293.y, x_1295);
        let x_1302 : vec3<f32> = txVec18;
        let x_1304 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1302.xy, x_1302.z);
        u_xlat67 = x_1304;
        let x_1306 : f32 = u_xlat19.y;
        let x_1307 : f32 = u_xlat67;
        let x_1309 : f32 = u_xlat65;
        u_xlat65 = ((x_1306 * x_1307) + x_1309);
        let x_1312 : vec4<f32> = u_xlat15;
        let x_1313 : vec2<f32> = vec2<f32>(x_1312.x, x_1312.y);
        let x_1315 : f32 = u_xlat6.z;
        txVec19 = vec3<f32>(x_1313.x, x_1313.y, x_1315);
        let x_1322 : vec3<f32> = txVec19;
        let x_1324 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1322.xy, x_1322.z);
        u_xlat67 = x_1324;
        let x_1326 : f32 = u_xlat19.z;
        let x_1327 : f32 = u_xlat67;
        let x_1329 : f32 = u_xlat65;
        u_xlat65 = ((x_1326 * x_1327) + x_1329);
        let x_1332 : vec4<f32> = u_xlat16;
        let x_1333 : vec2<f32> = vec2<f32>(x_1332.z, x_1332.w);
        let x_1335 : f32 = u_xlat6.z;
        txVec20 = vec3<f32>(x_1333.x, x_1333.y, x_1335);
        let x_1342 : vec3<f32> = txVec20;
        let x_1344 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1342.xy, x_1342.z);
        u_xlat67 = x_1344;
        let x_1346 : f32 = u_xlat19.w;
        let x_1347 : f32 = u_xlat67;
        let x_1349 : f32 = u_xlat65;
        u_xlat65 = ((x_1346 * x_1347) + x_1349);
        let x_1352 : vec4<f32> = u_xlat17;
        let x_1353 : vec2<f32> = vec2<f32>(x_1352.x, x_1352.y);
        let x_1355 : f32 = u_xlat6.z;
        txVec21 = vec3<f32>(x_1353.x, x_1353.y, x_1355);
        let x_1362 : vec3<f32> = txVec21;
        let x_1364 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1362.xy, x_1362.z);
        u_xlat67 = x_1364;
        let x_1366 : f32 = u_xlat20.x;
        let x_1367 : f32 = u_xlat67;
        let x_1369 : f32 = u_xlat65;
        u_xlat65 = ((x_1366 * x_1367) + x_1369);
        let x_1372 : vec4<f32> = u_xlat17;
        let x_1373 : vec2<f32> = vec2<f32>(x_1372.z, x_1372.w);
        let x_1375 : f32 = u_xlat6.z;
        txVec22 = vec3<f32>(x_1373.x, x_1373.y, x_1375);
        let x_1382 : vec3<f32> = txVec22;
        let x_1384 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1382.xy, x_1382.z);
        u_xlat67 = x_1384;
        let x_1386 : f32 = u_xlat20.y;
        let x_1387 : f32 = u_xlat67;
        let x_1389 : f32 = u_xlat65;
        u_xlat65 = ((x_1386 * x_1387) + x_1389);
        let x_1392 : vec2<f32> = u_xlat30;
        let x_1394 : f32 = u_xlat6.z;
        txVec23 = vec3<f32>(x_1392.x, x_1392.y, x_1394);
        let x_1401 : vec3<f32> = txVec23;
        let x_1403 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1401.xy, x_1401.z);
        u_xlat67 = x_1403;
        let x_1405 : f32 = u_xlat20.z;
        let x_1406 : f32 = u_xlat67;
        let x_1408 : f32 = u_xlat65;
        u_xlat65 = ((x_1405 * x_1406) + x_1408);
        let x_1411 : vec2<f32> = u_xlat57;
        let x_1413 : f32 = u_xlat6.z;
        txVec24 = vec3<f32>(x_1411.x, x_1411.y, x_1413);
        let x_1420 : vec3<f32> = txVec24;
        let x_1422 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1420.xy, x_1420.z);
        u_xlat67 = x_1422;
        let x_1424 : f32 = u_xlat20.w;
        let x_1425 : f32 = u_xlat67;
        let x_1427 : f32 = u_xlat65;
        u_xlat65 = ((x_1424 * x_1425) + x_1427);
        let x_1430 : vec4<f32> = u_xlat12;
        let x_1431 : vec2<f32> = vec2<f32>(x_1430.x, x_1430.y);
        let x_1433 : f32 = u_xlat6.z;
        txVec25 = vec3<f32>(x_1431.x, x_1431.y, x_1433);
        let x_1440 : vec3<f32> = txVec25;
        let x_1442 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1440.xy, x_1440.z);
        u_xlat67 = x_1442;
        let x_1444 : f32 = u_xlat8.x;
        let x_1445 : f32 = u_xlat67;
        let x_1447 : f32 = u_xlat65;
        u_xlat65 = ((x_1444 * x_1445) + x_1447);
        let x_1450 : vec4<f32> = u_xlat12;
        let x_1451 : vec2<f32> = vec2<f32>(x_1450.z, x_1450.w);
        let x_1453 : f32 = u_xlat6.z;
        txVec26 = vec3<f32>(x_1451.x, x_1451.y, x_1453);
        let x_1460 : vec3<f32> = txVec26;
        let x_1462 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1460.xy, x_1460.z);
        u_xlat67 = x_1462;
        let x_1464 : f32 = u_xlat8.y;
        let x_1465 : f32 = u_xlat67;
        let x_1467 : f32 = u_xlat65;
        u_xlat65 = ((x_1464 * x_1465) + x_1467);
        let x_1470 : vec2<f32> = u_xlat52;
        let x_1472 : f32 = u_xlat6.z;
        txVec27 = vec3<f32>(x_1470.x, x_1470.y, x_1472);
        let x_1479 : vec3<f32> = txVec27;
        let x_1481 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1479.xy, x_1479.z);
        u_xlat67 = x_1481;
        let x_1483 : f32 = u_xlat8.z;
        let x_1484 : f32 = u_xlat67;
        let x_1486 : f32 = u_xlat65;
        u_xlat65 = ((x_1483 * x_1484) + x_1486);
        let x_1489 : vec4<f32> = u_xlat7;
        let x_1490 : vec2<f32> = vec2<f32>(x_1489.x, x_1489.y);
        let x_1492 : f32 = u_xlat6.z;
        txVec28 = vec3<f32>(x_1490.x, x_1490.y, x_1492);
        let x_1499 : vec3<f32> = txVec28;
        let x_1501 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1499.xy, x_1499.z);
        u_xlat67 = x_1501;
        let x_1503 : f32 = u_xlat8.w;
        let x_1504 : f32 = u_xlat67;
        let x_1506 : f32 = u_xlat65;
        u_xlat64 = ((x_1503 * x_1504) + x_1506);
      }
    }
  } else {
    let x_1510 : vec4<f32> = u_xlat6;
    let x_1511 : vec2<f32> = vec2<f32>(x_1510.x, x_1510.y);
    let x_1513 : f32 = u_xlat6.z;
    txVec29 = vec3<f32>(x_1511.x, x_1511.y, x_1513);
    let x_1520 : vec3<f32> = txVec29;
    let x_1522 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1520.xy, x_1520.z);
    u_xlat64 = x_1522;
  }
  let x_1524 : f32 = x_272.x_MainLightShadowParams.x;
  u_xlat65 = (-(x_1524) + 1.0f);
  let x_1527 : f32 = u_xlat64;
  let x_1529 : f32 = x_272.x_MainLightShadowParams.x;
  let x_1531 : f32 = u_xlat65;
  u_xlat64 = ((x_1527 * x_1529) + x_1531);
  let x_1535 : f32 = u_xlat6.z;
  u_xlatb67 = (0.0f >= x_1535);
  let x_1539 : f32 = u_xlat6.z;
  u_xlatb6 = (x_1539 >= 1.0f);
  let x_1541 : bool = u_xlatb67;
  let x_1542 : bool = u_xlatb6;
  u_xlatb67 = (x_1541 | x_1542);
  let x_1544 : bool = u_xlatb67;
  let x_1545 : f32 = u_xlat64;
  u_xlat64 = select(x_1545, 1.0f, x_1544);
  let x_1547 : vec3<f32> = u_xlat0;
  let x_1549 : vec4<f32> = x_90.x_MainLightPosition;
  u_xlat0.x = dot(x_1547, -(vec3<f32>(x_1549.x, x_1549.y, x_1549.z)));
  let x_1555 : f32 = u_xlat0.x;
  u_xlat0.x = clamp(x_1555, 0.0f, 1.0f);
  let x_1558 : f32 = u_xlat64;
  let x_1562 : vec4<f32> = x_90.x_MainLightColor;
  let x_1564 : vec3<f32> = (vec3<f32>(x_1558, x_1558, x_1558) * vec3<f32>(x_1562.x, x_1562.y, x_1562.z));
  let x_1565 : vec4<f32> = u_xlat6;
  u_xlat6 = vec4<f32>(x_1564.x, x_1564.y, x_1564.z, x_1565.w);
  let x_1567 : vec3<f32> = u_xlat0;
  let x_1569 : vec4<f32> = u_xlat6;
  u_xlat0 = (vec3<f32>(x_1567.x, x_1567.x, x_1567.x) * vec3<f32>(x_1569.x, x_1569.y, x_1569.z));
  let x_1572 : vec3<f32> = u_xlat0;
  let x_1573 : vec4<f32> = u_xlat3;
  u_xlat0 = (x_1572 * vec3<f32>(x_1573.x, x_1573.y, x_1573.z));
  let x_1577 : f32 = x_161.unity_LODFade.x;
  u_xlatb64 = (x_1577 < 0.0f);
  let x_1580 : f32 = x_161.unity_LODFade.x;
  u_xlat3.x = (x_1580 + 1.0f);
  let x_1583 : bool = u_xlatb64;
  if (x_1583) {
    let x_1588 : f32 = u_xlat3.x;
    x_1584 = x_1588;
  } else {
    let x_1591 : f32 = x_161.unity_LODFade.x;
    x_1584 = x_1591;
  }
  let x_1592 : f32 = x_1584;
  u_xlat64 = x_1592;
  let x_1594 : f32 = u_xlat64;
  u_xlatb3 = (0.5f >= x_1594);
  let x_1596 : vec3<f32> = u_xlat1;
  let x_1600 : vec4<f32> = x_90.x_ScreenParams;
  u_xlat1 = (abs(x_1596) * vec3<f32>(x_1600.x, x_1600.y, x_1600.x));
  let x_1606 : vec3<f32> = u_xlat1;
  u_xlatu1 = vec3<u32>(x_1606);
  let x_1610 : u32 = u_xlatu1.z;
  u_xlatu43 = (x_1610 * 1025u);
  let x_1614 : u32 = u_xlatu43;
  u_xlatu24 = (x_1614 >> 6u);
  let x_1618 : u32 = u_xlatu43;
  let x_1619 : u32 = u_xlatu24;
  u_xlati43 = bitcast<i32>((x_1618 ^ x_1619));
  let x_1622 : i32 = u_xlati43;
  u_xlatu43 = (bitcast<u32>(x_1622) * 9u);
  let x_1626 : u32 = u_xlatu43;
  u_xlatu24 = (x_1626 >> 11u);
  let x_1629 : u32 = u_xlatu43;
  let x_1630 : u32 = u_xlatu24;
  u_xlati43 = bitcast<i32>((x_1629 ^ x_1630));
  let x_1633 : i32 = u_xlati43;
  u_xlati43 = (x_1633 * 32769i);
  let x_1637 : i32 = u_xlati43;
  let x_1640 : u32 = u_xlatu1.y;
  u_xlati22 = bitcast<i32>((bitcast<u32>(x_1637) ^ x_1640));
  let x_1644 : i32 = u_xlati22;
  u_xlatu22 = (bitcast<u32>(x_1644) * 1025u);
  let x_1647 : u32 = u_xlatu22;
  u_xlatu43 = (x_1647 >> 6u);
  let x_1649 : u32 = u_xlatu43;
  let x_1650 : u32 = u_xlatu22;
  u_xlati22 = bitcast<i32>((x_1649 ^ x_1650));
  let x_1653 : i32 = u_xlati22;
  u_xlatu22 = (bitcast<u32>(x_1653) * 9u);
  let x_1656 : u32 = u_xlatu22;
  u_xlatu43 = (x_1656 >> 11u);
  let x_1658 : u32 = u_xlatu43;
  let x_1659 : u32 = u_xlatu22;
  u_xlati22 = bitcast<i32>((x_1658 ^ x_1659));
  let x_1662 : i32 = u_xlati22;
  u_xlati22 = (x_1662 * 32769i);
  let x_1665 : i32 = u_xlati22;
  let x_1668 : u32 = u_xlatu1.x;
  u_xlati1 = bitcast<i32>((bitcast<u32>(x_1665) ^ x_1668));
  let x_1671 : i32 = u_xlati1;
  u_xlatu1.x = (bitcast<u32>(x_1671) * 1025u);
  let x_1676 : u32 = u_xlatu1.x;
  u_xlatu22 = (x_1676 >> 6u);
  let x_1678 : u32 = u_xlatu22;
  let x_1680 : u32 = u_xlatu1.x;
  u_xlati1 = bitcast<i32>((x_1678 ^ x_1680));
  let x_1683 : i32 = u_xlati1;
  u_xlatu1.x = (bitcast<u32>(x_1683) * 9u);
  let x_1688 : u32 = u_xlatu1.x;
  u_xlatu22 = (x_1688 >> 11u);
  let x_1690 : u32 = u_xlatu22;
  let x_1692 : u32 = u_xlatu1.x;
  u_xlati1 = bitcast<i32>((x_1690 ^ x_1692));
  let x_1695 : i32 = u_xlati1;
  u_xlati1 = (x_1695 * 32769i);
  param = 1065353216i;
  let x_1701 : i32 = u_xlati1;
  param_1 = x_1701;
  param_2 = 0i;
  param_3 = 23i;
  let x_1704 : i32 = int_bitfieldInsert_i1_i1_i1_i1_(&(param), &(param_1), &(param_2), &(param_3));
  u_xlat1.x = bitcast<f32>(x_1704);
  let x_1708 : f32 = u_xlat1.x;
  u_xlat1.x = (x_1708 + -1.0f);
  let x_1713 : f32 = u_xlat1.x;
  u_xlat22 = (-(x_1713) + 1.0f);
  let x_1716 : bool = u_xlatb3;
  if (x_1716) {
    let x_1721 : f32 = u_xlat1.x;
    x_1717 = x_1721;
  } else {
    let x_1723 : f32 = u_xlat22;
    x_1717 = x_1723;
  }
  let x_1724 : f32 = x_1717;
  u_xlat1.x = x_1724;
  let x_1726 : f32 = u_xlat64;
  let x_1729 : f32 = u_xlat1.x;
  u_xlat1.x = ((x_1726 * 2.0f) + -(x_1729));
  let x_1734 : f32 = u_xlat1.x;
  let x_1736 : f32 = u_xlat3.w;
  u_xlat22 = (x_1734 * x_1736);
  let x_1741 : f32 = u_xlat22;
  u_xlatb43.x = (x_1741 >= 0.400000006f);
  let x_1747 : bool = u_xlatb43.x;
  let x_1748 : f32 = u_xlat22;
  u_xlat43.x = select(0.0f, x_1748, x_1747);
  let x_1752 : f32 = u_xlat3.w;
  let x_1754 : f32 = u_xlat1.x;
  u_xlat1.x = ((x_1752 * x_1754) + -0.400000006f);
  let x_1759 : f32 = u_xlat22;
  u_xlat64 = dpdxCoarse(x_1759);
  let x_1761 : f32 = u_xlat22;
  u_xlat22 = dpdyCoarse(x_1761);
  let x_1763 : f32 = u_xlat22;
  let x_1765 : f32 = u_xlat64;
  u_xlat22 = (abs(x_1763) + abs(x_1765));
  let x_1768 : f32 = u_xlat22;
  u_xlat22 = max(x_1768, 0.0001f);
  let x_1772 : f32 = u_xlat1.x;
  let x_1773 : f32 = u_xlat22;
  u_xlat1.x = (x_1772 / x_1773);
  let x_1777 : f32 = u_xlat1.x;
  u_xlat1.x = (x_1777 + 0.5f);
  let x_1781 : f32 = u_xlat1.x;
  u_xlat1.x = clamp(x_1781, 0.0f, 1.0f);
  let x_1786 : f32 = x_90.x_AlphaToMaskAvailable;
  u_xlatb22 = !((x_1786 == 0.0f));
  let x_1788 : bool = u_xlatb22;
  if (x_1788) {
    let x_1793 : f32 = u_xlat1.x;
    x_1789 = x_1793;
  } else {
    let x_1796 : f32 = u_xlat43.x;
    x_1789 = x_1796;
  }
  let x_1797 : f32 = x_1789;
  u_xlat1.x = x_1797;
  let x_1800 : f32 = u_xlat1.x;
  u_xlat43.x = (x_1800 + -0.0001f);
  let x_1805 : f32 = u_xlat43.x;
  u_xlatb43.x = (x_1805 < 0.0f);
  let x_1809 : bool = u_xlatb43.x;
  if (((select(0i, 1i, x_1809) * -1i) != 0i)) {
    discard;
  }
  let x_1819 : f32 = vs_INTERP2.w;
  u_xlatb43.x = (0.0f < x_1819);
  let x_1823 : f32 = x_161.unity_WorldTransformParams.w;
  u_xlatb43.y = (x_1823 >= 0.0f);
  let x_1827 : bool = u_xlatb43.x;
  u_xlat43.x = select(-1.0f, 1.0f, x_1827);
  let x_1831 : bool = u_xlatb43.y;
  u_xlat43.y = select(-1.0f, 1.0f, x_1831);
  let x_1835 : f32 = u_xlat43.y;
  let x_1837 : f32 = u_xlat43.x;
  u_xlat43.x = (x_1835 * x_1837);
  let x_1840 : vec3<f32> = vs_INTERP1;
  let x_1842 : vec4<f32> = vs_INTERP2;
  let x_1844 : vec3<f32> = (vec3<f32>(x_1840.z, x_1840.x, x_1840.y) * vec3<f32>(x_1842.y, x_1842.z, x_1842.x));
  let x_1845 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_1844.x, x_1844.y, x_1844.z, x_1845.w);
  let x_1847 : vec3<f32> = vs_INTERP1;
  let x_1849 : vec4<f32> = vs_INTERP2;
  let x_1852 : vec4<f32> = u_xlat3;
  let x_1855 : vec3<f32> = ((vec3<f32>(x_1847.y, x_1847.z, x_1847.x) * vec3<f32>(x_1849.z, x_1849.x, x_1849.y)) + -(vec3<f32>(x_1852.x, x_1852.y, x_1852.z)));
  let x_1856 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_1855.x, x_1855.y, x_1855.z, x_1856.w);
  let x_1858 : vec2<f32> = u_xlat43;
  let x_1860 : vec4<f32> = u_xlat3;
  let x_1862 : vec3<f32> = (vec3<f32>(x_1858.x, x_1858.x, x_1858.x) * vec3<f32>(x_1860.x, x_1860.y, x_1860.z));
  let x_1863 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_1862.x, x_1862.y, x_1862.z, x_1863.w);
  let x_1865 : vec4<f32> = u_xlat3;
  let x_1867 : vec3<f32> = u_xlat26;
  let x_1869 : vec3<f32> = (vec3<f32>(x_1865.x, x_1865.y, x_1865.z) * vec3<f32>(x_1867.y, x_1867.y, x_1867.y));
  let x_1870 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_1869.x, x_1869.y, x_1869.z, x_1870.w);
  let x_1872 : vec3<f32> = u_xlat26;
  let x_1874 : vec4<f32> = vs_INTERP2;
  let x_1877 : vec4<f32> = u_xlat3;
  let x_1879 : vec3<f32> = ((vec3<f32>(x_1872.x, x_1872.x, x_1872.x) * vec3<f32>(x_1874.x, x_1874.y, x_1874.z)) + vec3<f32>(x_1877.x, x_1877.y, x_1877.z));
  let x_1880 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_1879.x, x_1879.y, x_1879.z, x_1880.w);
  let x_1882 : vec3<f32> = u_xlat26;
  let x_1884 : vec3<f32> = vs_INTERP1;
  let x_1886 : vec4<f32> = u_xlat3;
  let x_1888 : vec3<f32> = ((vec3<f32>(x_1882.z, x_1882.z, x_1882.z) * x_1884) + vec3<f32>(x_1886.x, x_1886.y, x_1886.z));
  let x_1889 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_1888.x, x_1888.y, x_1888.z, x_1889.w);
  let x_1891 : vec4<f32> = u_xlat3;
  let x_1893 : vec4<f32> = u_xlat3;
  u_xlat43.x = dot(vec3<f32>(x_1891.x, x_1891.y, x_1891.z), vec3<f32>(x_1893.x, x_1893.y, x_1893.z));
  let x_1898 : f32 = u_xlat43.x;
  u_xlat43.x = inverseSqrt(x_1898);
  let x_1901 : vec2<f32> = u_xlat43;
  let x_1903 : vec4<f32> = u_xlat3;
  let x_1905 : vec3<f32> = (vec3<f32>(x_1901.x, x_1901.x, x_1901.x) * vec3<f32>(x_1903.x, x_1903.y, x_1903.z));
  let x_1906 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_1905.x, x_1905.y, x_1905.z, x_1906.w);
  u_xlat3.w = 1.0f;
  let x_1911 : vec4<f32> = x_161.unity_SHAr;
  let x_1912 : vec4<f32> = u_xlat3;
  u_xlat6.x = dot(x_1911, x_1912);
  let x_1917 : vec4<f32> = x_161.unity_SHAg;
  let x_1918 : vec4<f32> = u_xlat3;
  u_xlat6.y = dot(x_1917, x_1918);
  let x_1923 : vec4<f32> = x_161.unity_SHAb;
  let x_1924 : vec4<f32> = u_xlat3;
  u_xlat6.z = dot(x_1923, x_1924);
  let x_1927 : vec4<f32> = u_xlat3;
  let x_1929 : vec4<f32> = u_xlat3;
  u_xlat7 = (vec4<f32>(x_1927.y, x_1927.z, x_1927.z, x_1927.x) * vec4<f32>(x_1929.x, x_1929.y, x_1929.z, x_1929.z));
  let x_1934 : vec4<f32> = x_161.unity_SHBr;
  let x_1935 : vec4<f32> = u_xlat7;
  u_xlat8.x = dot(x_1934, x_1935);
  let x_1940 : vec4<f32> = x_161.unity_SHBg;
  let x_1941 : vec4<f32> = u_xlat7;
  u_xlat8.y = dot(x_1940, x_1941);
  let x_1945 : vec4<f32> = x_161.unity_SHBb;
  let x_1946 : vec4<f32> = u_xlat7;
  u_xlat8.z = dot(x_1945, x_1946);
  let x_1950 : f32 = u_xlat3.y;
  let x_1952 : f32 = u_xlat3.y;
  u_xlat43.x = (x_1950 * x_1952);
  let x_1956 : f32 = u_xlat3.x;
  let x_1958 : f32 = u_xlat3.x;
  let x_1961 : f32 = u_xlat43.x;
  u_xlat43.x = ((x_1956 * x_1958) + -(x_1961));
  let x_1967 : vec4<f32> = x_161.unity_SHC;
  let x_1969 : vec2<f32> = u_xlat43;
  let x_1972 : vec4<f32> = u_xlat8;
  u_xlat26 = ((vec3<f32>(x_1967.x, x_1967.y, x_1967.z) * vec3<f32>(x_1969.x, x_1969.x, x_1969.x)) + vec3<f32>(x_1972.x, x_1972.y, x_1972.z));
  let x_1975 : vec3<f32> = u_xlat26;
  let x_1976 : vec4<f32> = u_xlat6;
  u_xlat26 = (x_1975 + vec3<f32>(x_1976.x, x_1976.y, x_1976.z));
  let x_1979 : vec3<f32> = u_xlat26;
  u_xlat26 = max(x_1979, vec3<f32>(0.0f, 0.0f, 0.0f));
  let x_1983 : vec4<f32> = x_90.x_ScaledScreenParams;
  let x_1984 : vec2<f32> = vec2<f32>(x_1983.x, x_1983.y);
  u_xlat43 = (vec2<f32>(1.0f, 1.0f) / vec2<f32>(x_1984.x, x_1984.y));
  let x_1989 : vec2<f32> = u_xlat43;
  let x_1990 : vec4<f32> = hlslcc_FragCoord;
  let x_1992 : vec2<f32> = (x_1989 * vec2<f32>(x_1990.x, x_1990.y));
  let x_1993 : vec4<f32> = u_xlat6;
  u_xlat6 = vec4<f32>(x_1992.x, x_1992.y, x_1993.z, x_1993.w);
  let x_1996 : f32 = u_xlat6.y;
  let x_1999 : f32 = x_90.x_ScaleBiasRt.x;
  let x_2002 : f32 = x_90.x_ScaleBiasRt.y;
  u_xlat43.x = ((x_1996 * x_1999) + x_2002);
  let x_2006 : f32 = u_xlat43.x;
  u_xlat6.z = (-(x_2006) + 1.0f);
  let x_2011 : f32 = u_xlat5.x;
  u_xlat5.x = x_2011;
  let x_2014 : f32 = u_xlat5.x;
  u_xlat5.x = clamp(x_2014, 0.0f, 1.0f);
  let x_2018 : f32 = u_xlat1.x;
  u_xlat1.x = x_2018;
  let x_2021 : f32 = u_xlat1.x;
  u_xlat1.x = clamp(x_2021, 0.0f, 1.0f);
  let x_2024 : vec3<f32> = u_xlat4;
  u_xlat4 = (x_2024 * vec3<f32>(0.959999979f, 0.959999979f, 0.959999979f));
  let x_2029 : f32 = u_xlat5.x;
  u_xlat43.x = (-(x_2029) + 1.0f);
  let x_2034 : f32 = u_xlat43.x;
  let x_2036 : f32 = u_xlat43.x;
  u_xlat64 = (x_2034 * x_2036);
  let x_2038 : f32 = u_xlat64;
  u_xlat64 = max(x_2038, 0.0078125f);
  let x_2042 : f32 = u_xlat64;
  let x_2043 : f32 = u_xlat64;
  u_xlat66 = (x_2042 * x_2043);
  let x_2046 : f32 = u_xlat5.x;
  u_xlat67 = (x_2046 + 0.040000021f);
  let x_2049 : f32 = u_xlat67;
  u_xlat67 = min(x_2049, 1.0f);
  let x_2051 : f32 = u_xlat64;
  u_xlat5.x = ((x_2051 * 4.0f) + 2.0f);
  let x_2061 : vec4<f32> = u_xlat6;
  let x_2064 : f32 = x_90.x_GlobalMipBias.x;
  let x_2065 : vec4<f32> = textureSampleBias(x_ScreenSpaceOcclusionTexture, sampler_ScreenSpaceOcclusionTexture, vec2<f32>(x_2061.x, x_2061.z), x_2064);
  u_xlat6.x = x_2065.x;
  let x_2070 : f32 = u_xlat6.x;
  u_xlat27 = (x_2070 + -1.0f);
  let x_2074 : f32 = x_90.x_AmbientOcclusionParam.w;
  let x_2075 : f32 = u_xlat27;
  u_xlat27 = ((x_2074 * x_2075) + 1.0f);
  let x_2079 : f32 = u_xlat6.x;
  let x_2081 : f32 = vs_INTERP4.w;
  u_xlat6.x = min(x_2079, x_2081);
  let x_2084 : bool = u_xlatb63;
  if (x_2084) {
    let x_2088 : f32 = x_272.x_MainLightShadowParams.y;
    u_xlatb63 = (x_2088 == 1.0f);
    let x_2090 : bool = u_xlatb63;
    if (x_2090) {
      let x_2094 : vec4<f32> = vs_INTERP9;
      let x_2097 : vec4<f32> = x_272.x_MainLightShadowOffset0;
      u_xlat7 = (vec4<f32>(x_2094.x, x_2094.y, x_2094.x, x_2094.y) + x_2097);
      let x_2100 : vec4<f32> = u_xlat7;
      let x_2101 : vec2<f32> = vec2<f32>(x_2100.x, x_2100.y);
      let x_2103 : f32 = vs_INTERP9.z;
      txVec30 = vec3<f32>(x_2101.x, x_2101.y, x_2103);
      let x_2110 : vec3<f32> = txVec30;
      let x_2112 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2110.xy, x_2110.z);
      u_xlat8.x = x_2112;
      let x_2115 : vec4<f32> = u_xlat7;
      let x_2116 : vec2<f32> = vec2<f32>(x_2115.z, x_2115.w);
      let x_2118 : f32 = vs_INTERP9.z;
      txVec31 = vec3<f32>(x_2116.x, x_2116.y, x_2118);
      let x_2125 : vec3<f32> = txVec31;
      let x_2127 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2125.xy, x_2125.z);
      u_xlat8.y = x_2127;
      let x_2129 : vec4<f32> = vs_INTERP9;
      let x_2132 : vec4<f32> = x_272.x_MainLightShadowOffset1;
      u_xlat7 = (vec4<f32>(x_2129.x, x_2129.y, x_2129.x, x_2129.y) + x_2132);
      let x_2135 : vec4<f32> = u_xlat7;
      let x_2136 : vec2<f32> = vec2<f32>(x_2135.x, x_2135.y);
      let x_2138 : f32 = vs_INTERP9.z;
      txVec32 = vec3<f32>(x_2136.x, x_2136.y, x_2138);
      let x_2145 : vec3<f32> = txVec32;
      let x_2147 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2145.xy, x_2145.z);
      u_xlat8.z = x_2147;
      let x_2150 : vec4<f32> = u_xlat7;
      let x_2151 : vec2<f32> = vec2<f32>(x_2150.z, x_2150.w);
      let x_2153 : f32 = vs_INTERP9.z;
      txVec33 = vec3<f32>(x_2151.x, x_2151.y, x_2153);
      let x_2160 : vec3<f32> = txVec33;
      let x_2162 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2160.xy, x_2160.z);
      u_xlat8.w = x_2162;
      let x_2164 : vec4<f32> = u_xlat8;
      u_xlat63 = dot(x_2164, vec4<f32>(0.25f, 0.25f, 0.25f, 0.25f));
    } else {
      let x_2169 : f32 = x_272.x_MainLightShadowParams.y;
      u_xlatb48 = (x_2169 == 2.0f);
      let x_2171 : bool = u_xlatb48;
      if (x_2171) {
        let x_2175 : vec4<f32> = vs_INTERP9;
        let x_2178 : vec4<f32> = x_272.x_MainLightShadowmapSize;
        u_xlat48 = ((vec2<f32>(x_2175.x, x_2175.y) * vec2<f32>(x_2178.z, x_2178.w)) + vec2<f32>(0.5f, 0.5f));
        let x_2182 : vec2<f32> = u_xlat48;
        u_xlat48 = floor(x_2182);
        let x_2184 : vec4<f32> = vs_INTERP9;
        let x_2187 : vec4<f32> = x_272.x_MainLightShadowmapSize;
        let x_2190 : vec2<f32> = u_xlat48;
        let x_2192 : vec2<f32> = ((vec2<f32>(x_2184.x, x_2184.y) * vec2<f32>(x_2187.z, x_2187.w)) + -(x_2190));
        let x_2193 : vec4<f32> = u_xlat7;
        u_xlat7 = vec4<f32>(x_2192.x, x_2192.y, x_2193.z, x_2193.w);
        let x_2195 : vec4<f32> = u_xlat7;
        u_xlat8 = (vec4<f32>(x_2195.x, x_2195.x, x_2195.y, x_2195.y) + vec4<f32>(0.5f, 1.0f, 0.5f, 1.0f));
        let x_2198 : vec4<f32> = u_xlat8;
        let x_2200 : vec4<f32> = u_xlat8;
        u_xlat9 = (vec4<f32>(x_2198.x, x_2198.x, x_2198.z, x_2198.z) * vec4<f32>(x_2200.x, x_2200.x, x_2200.z, x_2200.z));
        let x_2203 : vec4<f32> = u_xlat9;
        u_xlat49 = (vec2<f32>(x_2203.y, x_2203.w) * vec2<f32>(0.079999998f, 0.079999998f));
        let x_2206 : vec4<f32> = u_xlat9;
        let x_2209 : vec4<f32> = u_xlat7;
        let x_2212 : vec2<f32> = ((vec2<f32>(x_2206.x, x_2206.z) * vec2<f32>(0.5f, 0.5f)) + -(vec2<f32>(x_2209.x, x_2209.y)));
        let x_2213 : vec4<f32> = u_xlat8;
        u_xlat8 = vec4<f32>(x_2212.x, x_2213.y, x_2212.y, x_2213.w);
        let x_2215 : vec4<f32> = u_xlat7;
        let x_2218 : vec2<f32> = (-(vec2<f32>(x_2215.x, x_2215.y)) + vec2<f32>(1.0f, 1.0f));
        let x_2219 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_2218.x, x_2218.y, x_2219.z, x_2219.w);
        let x_2221 : vec4<f32> = u_xlat7;
        u_xlat51 = min(vec2<f32>(x_2221.x, x_2221.y), vec2<f32>(0.0f, 0.0f));
        let x_2224 : vec2<f32> = u_xlat51;
        let x_2226 : vec2<f32> = u_xlat51;
        let x_2228 : vec4<f32> = u_xlat9;
        u_xlat51 = ((-(x_2224) * x_2226) + vec2<f32>(x_2228.x, x_2228.y));
        let x_2231 : vec4<f32> = u_xlat7;
        let x_2233 : vec2<f32> = max(vec2<f32>(x_2231.x, x_2231.y), vec2<f32>(0.0f, 0.0f));
        let x_2234 : vec4<f32> = u_xlat7;
        u_xlat7 = vec4<f32>(x_2233.x, x_2233.y, x_2234.z, x_2234.w);
        let x_2236 : vec4<f32> = u_xlat7;
        let x_2239 : vec4<f32> = u_xlat7;
        let x_2242 : vec4<f32> = u_xlat8;
        let x_2244 : vec2<f32> = ((-(vec2<f32>(x_2236.x, x_2236.y)) * vec2<f32>(x_2239.x, x_2239.y)) + vec2<f32>(x_2242.y, x_2242.w));
        let x_2245 : vec4<f32> = u_xlat7;
        u_xlat7 = vec4<f32>(x_2244.x, x_2244.y, x_2245.z, x_2245.w);
        let x_2247 : vec2<f32> = u_xlat51;
        u_xlat51 = (x_2247 + vec2<f32>(1.0f, 1.0f));
        let x_2249 : vec4<f32> = u_xlat7;
        let x_2251 : vec2<f32> = (vec2<f32>(x_2249.x, x_2249.y) + vec2<f32>(1.0f, 1.0f));
        let x_2252 : vec4<f32> = u_xlat7;
        u_xlat7 = vec4<f32>(x_2251.x, x_2251.y, x_2252.z, x_2252.w);
        let x_2254 : vec4<f32> = u_xlat8;
        let x_2256 : vec2<f32> = (vec2<f32>(x_2254.x, x_2254.z) * vec2<f32>(0.159999996f, 0.159999996f));
        let x_2257 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_2256.x, x_2256.y, x_2257.z, x_2257.w);
        let x_2259 : vec4<f32> = u_xlat9;
        let x_2261 : vec2<f32> = (vec2<f32>(x_2259.x, x_2259.y) * vec2<f32>(0.159999996f, 0.159999996f));
        let x_2262 : vec4<f32> = u_xlat11;
        u_xlat11 = vec4<f32>(x_2261.x, x_2261.y, x_2262.z, x_2262.w);
        let x_2264 : vec2<f32> = u_xlat51;
        let x_2265 : vec2<f32> = (x_2264 * vec2<f32>(0.159999996f, 0.159999996f));
        let x_2266 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_2265.x, x_2265.y, x_2266.z, x_2266.w);
        let x_2268 : vec4<f32> = u_xlat7;
        let x_2270 : vec2<f32> = (vec2<f32>(x_2268.x, x_2268.y) * vec2<f32>(0.159999996f, 0.159999996f));
        let x_2271 : vec4<f32> = u_xlat12;
        u_xlat12 = vec4<f32>(x_2270.x, x_2270.y, x_2271.z, x_2271.w);
        let x_2273 : vec4<f32> = u_xlat8;
        let x_2275 : vec2<f32> = (vec2<f32>(x_2273.y, x_2273.w) * vec2<f32>(0.159999996f, 0.159999996f));
        let x_2276 : vec4<f32> = u_xlat7;
        u_xlat7 = vec4<f32>(x_2275.x, x_2275.y, x_2276.z, x_2276.w);
        let x_2279 : f32 = u_xlat9.x;
        u_xlat10.z = x_2279;
        let x_2282 : f32 = u_xlat7.x;
        u_xlat10.w = x_2282;
        let x_2285 : f32 = u_xlat12.x;
        u_xlat11.z = x_2285;
        let x_2288 : f32 = u_xlat49.x;
        u_xlat11.w = x_2288;
        let x_2290 : vec4<f32> = u_xlat10;
        let x_2292 : vec4<f32> = u_xlat11;
        u_xlat8 = (vec4<f32>(x_2290.z, x_2290.w, x_2290.x, x_2290.z) + vec4<f32>(x_2292.z, x_2292.w, x_2292.x, x_2292.z));
        let x_2296 : f32 = u_xlat10.y;
        u_xlat9.z = x_2296;
        let x_2299 : f32 = u_xlat7.y;
        u_xlat9.w = x_2299;
        let x_2302 : f32 = u_xlat11.y;
        u_xlat12.z = x_2302;
        let x_2305 : f32 = u_xlat49.y;
        u_xlat12.w = x_2305;
        let x_2307 : vec4<f32> = u_xlat9;
        let x_2309 : vec4<f32> = u_xlat12;
        let x_2311 : vec3<f32> = (vec3<f32>(x_2307.z, x_2307.y, x_2307.w) + vec3<f32>(x_2309.z, x_2309.y, x_2309.w));
        let x_2312 : vec4<f32> = u_xlat7;
        u_xlat7 = vec4<f32>(x_2311.x, x_2311.y, x_2311.z, x_2312.w);
        let x_2314 : vec4<f32> = u_xlat11;
        let x_2316 : vec4<f32> = u_xlat8;
        let x_2318 : vec3<f32> = (vec3<f32>(x_2314.x, x_2314.z, x_2314.w) / vec3<f32>(x_2316.z, x_2316.w, x_2316.y));
        let x_2319 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_2318.x, x_2318.y, x_2318.z, x_2319.w);
        let x_2321 : vec4<f32> = u_xlat9;
        let x_2323 : vec3<f32> = (vec3<f32>(x_2321.x, x_2321.y, x_2321.z) + vec3<f32>(-2.5f, -0.5f, 1.5f));
        let x_2324 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_2323.x, x_2323.y, x_2323.z, x_2324.w);
        let x_2326 : vec4<f32> = u_xlat12;
        let x_2328 : vec4<f32> = u_xlat7;
        let x_2330 : vec3<f32> = (vec3<f32>(x_2326.z, x_2326.y, x_2326.w) / vec3<f32>(x_2328.x, x_2328.y, x_2328.z));
        let x_2331 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_2330.x, x_2330.y, x_2330.z, x_2331.w);
        let x_2333 : vec4<f32> = u_xlat10;
        let x_2335 : vec3<f32> = (vec3<f32>(x_2333.x, x_2333.y, x_2333.z) + vec3<f32>(-2.5f, -0.5f, 1.5f));
        let x_2336 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_2335.x, x_2335.y, x_2335.z, x_2336.w);
        let x_2338 : vec4<f32> = u_xlat9;
        let x_2341 : vec4<f32> = x_272.x_MainLightShadowmapSize;
        let x_2343 : vec3<f32> = (vec3<f32>(x_2338.y, x_2338.x, x_2338.z) * vec3<f32>(x_2341.x, x_2341.x, x_2341.x));
        let x_2344 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_2343.x, x_2343.y, x_2343.z, x_2344.w);
        let x_2346 : vec4<f32> = u_xlat10;
        let x_2349 : vec4<f32> = x_272.x_MainLightShadowmapSize;
        let x_2351 : vec3<f32> = (vec3<f32>(x_2346.x, x_2346.y, x_2346.z) * vec3<f32>(x_2349.y, x_2349.y, x_2349.y));
        let x_2352 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_2351.x, x_2351.y, x_2351.z, x_2352.w);
        let x_2355 : f32 = u_xlat10.x;
        u_xlat9.w = x_2355;
        let x_2357 : vec2<f32> = u_xlat48;
        let x_2360 : vec4<f32> = x_272.x_MainLightShadowmapSize;
        let x_2363 : vec4<f32> = u_xlat9;
        u_xlat11 = ((vec4<f32>(x_2357.x, x_2357.y, x_2357.x, x_2357.y) * vec4<f32>(x_2360.x, x_2360.y, x_2360.x, x_2360.y)) + vec4<f32>(x_2363.y, x_2363.w, x_2363.x, x_2363.w));
        let x_2366 : vec2<f32> = u_xlat48;
        let x_2368 : vec4<f32> = x_272.x_MainLightShadowmapSize;
        let x_2371 : vec4<f32> = u_xlat9;
        let x_2373 : vec2<f32> = ((x_2366 * vec2<f32>(x_2368.x, x_2368.y)) + vec2<f32>(x_2371.z, x_2371.w));
        let x_2374 : vec4<f32> = u_xlat12;
        u_xlat12 = vec4<f32>(x_2373.x, x_2373.y, x_2374.z, x_2374.w);
        let x_2377 : f32 = u_xlat9.y;
        u_xlat10.w = x_2377;
        let x_2379 : vec4<f32> = u_xlat10;
        let x_2380 : vec2<f32> = vec2<f32>(x_2379.y, x_2379.z);
        let x_2381 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_2381.x, x_2380.x, x_2381.z, x_2380.y);
        let x_2383 : vec2<f32> = u_xlat48;
        let x_2386 : vec4<f32> = x_272.x_MainLightShadowmapSize;
        let x_2389 : vec4<f32> = u_xlat9;
        u_xlat13 = ((vec4<f32>(x_2383.x, x_2383.y, x_2383.x, x_2383.y) * vec4<f32>(x_2386.x, x_2386.y, x_2386.x, x_2386.y)) + vec4<f32>(x_2389.x, x_2389.y, x_2389.z, x_2389.y));
        let x_2392 : vec2<f32> = u_xlat48;
        let x_2395 : vec4<f32> = x_272.x_MainLightShadowmapSize;
        let x_2398 : vec4<f32> = u_xlat10;
        u_xlat10 = ((vec4<f32>(x_2392.x, x_2392.y, x_2392.x, x_2392.y) * vec4<f32>(x_2395.x, x_2395.y, x_2395.x, x_2395.y)) + vec4<f32>(x_2398.w, x_2398.y, x_2398.w, x_2398.z));
        let x_2401 : vec2<f32> = u_xlat48;
        let x_2404 : vec4<f32> = x_272.x_MainLightShadowmapSize;
        let x_2407 : vec4<f32> = u_xlat9;
        u_xlat9 = ((vec4<f32>(x_2401.x, x_2401.y, x_2401.x, x_2401.y) * vec4<f32>(x_2404.x, x_2404.y, x_2404.x, x_2404.y)) + vec4<f32>(x_2407.x, x_2407.w, x_2407.z, x_2407.w));
        let x_2410 : vec4<f32> = u_xlat7;
        let x_2412 : vec4<f32> = u_xlat8;
        u_xlat14 = (vec4<f32>(x_2410.x, x_2410.x, x_2410.x, x_2410.y) * vec4<f32>(x_2412.z, x_2412.w, x_2412.y, x_2412.z));
        let x_2415 : vec4<f32> = u_xlat7;
        let x_2417 : vec4<f32> = u_xlat8;
        u_xlat15 = (vec4<f32>(x_2415.y, x_2415.y, x_2415.z, x_2415.z) * x_2417);
        let x_2420 : f32 = u_xlat7.z;
        let x_2422 : f32 = u_xlat8.y;
        u_xlat48.x = (x_2420 * x_2422);
        let x_2426 : vec4<f32> = u_xlat11;
        let x_2427 : vec2<f32> = vec2<f32>(x_2426.x, x_2426.y);
        let x_2429 : f32 = vs_INTERP9.z;
        txVec34 = vec3<f32>(x_2427.x, x_2427.y, x_2429);
        let x_2436 : vec3<f32> = txVec34;
        let x_2438 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2436.xy, x_2436.z);
        u_xlat69 = x_2438;
        let x_2440 : vec4<f32> = u_xlat11;
        let x_2441 : vec2<f32> = vec2<f32>(x_2440.z, x_2440.w);
        let x_2443 : f32 = vs_INTERP9.z;
        txVec35 = vec3<f32>(x_2441.x, x_2441.y, x_2443);
        let x_2450 : vec3<f32> = txVec35;
        let x_2452 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2450.xy, x_2450.z);
        u_xlat7.x = x_2452;
        let x_2455 : f32 = u_xlat7.x;
        let x_2457 : f32 = u_xlat14.y;
        u_xlat7.x = (x_2455 * x_2457);
        let x_2461 : f32 = u_xlat14.x;
        let x_2462 : f32 = u_xlat69;
        let x_2465 : f32 = u_xlat7.x;
        u_xlat69 = ((x_2461 * x_2462) + x_2465);
        let x_2468 : vec4<f32> = u_xlat12;
        let x_2469 : vec2<f32> = vec2<f32>(x_2468.x, x_2468.y);
        let x_2471 : f32 = vs_INTERP9.z;
        txVec36 = vec3<f32>(x_2469.x, x_2469.y, x_2471);
        let x_2478 : vec3<f32> = txVec36;
        let x_2480 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2478.xy, x_2478.z);
        u_xlat7.x = x_2480;
        let x_2483 : f32 = u_xlat14.z;
        let x_2485 : f32 = u_xlat7.x;
        let x_2487 : f32 = u_xlat69;
        u_xlat69 = ((x_2483 * x_2485) + x_2487);
        let x_2490 : vec4<f32> = u_xlat10;
        let x_2491 : vec2<f32> = vec2<f32>(x_2490.x, x_2490.y);
        let x_2493 : f32 = vs_INTERP9.z;
        txVec37 = vec3<f32>(x_2491.x, x_2491.y, x_2493);
        let x_2500 : vec3<f32> = txVec37;
        let x_2502 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2500.xy, x_2500.z);
        u_xlat7.x = x_2502;
        let x_2505 : f32 = u_xlat14.w;
        let x_2507 : f32 = u_xlat7.x;
        let x_2509 : f32 = u_xlat69;
        u_xlat69 = ((x_2505 * x_2507) + x_2509);
        let x_2512 : vec4<f32> = u_xlat13;
        let x_2513 : vec2<f32> = vec2<f32>(x_2512.x, x_2512.y);
        let x_2515 : f32 = vs_INTERP9.z;
        txVec38 = vec3<f32>(x_2513.x, x_2513.y, x_2515);
        let x_2522 : vec3<f32> = txVec38;
        let x_2524 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2522.xy, x_2522.z);
        u_xlat7.x = x_2524;
        let x_2527 : f32 = u_xlat15.x;
        let x_2529 : f32 = u_xlat7.x;
        let x_2531 : f32 = u_xlat69;
        u_xlat69 = ((x_2527 * x_2529) + x_2531);
        let x_2534 : vec4<f32> = u_xlat13;
        let x_2535 : vec2<f32> = vec2<f32>(x_2534.z, x_2534.w);
        let x_2537 : f32 = vs_INTERP9.z;
        txVec39 = vec3<f32>(x_2535.x, x_2535.y, x_2537);
        let x_2544 : vec3<f32> = txVec39;
        let x_2546 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2544.xy, x_2544.z);
        u_xlat7.x = x_2546;
        let x_2549 : f32 = u_xlat15.y;
        let x_2551 : f32 = u_xlat7.x;
        let x_2553 : f32 = u_xlat69;
        u_xlat69 = ((x_2549 * x_2551) + x_2553);
        let x_2556 : vec4<f32> = u_xlat10;
        let x_2557 : vec2<f32> = vec2<f32>(x_2556.z, x_2556.w);
        let x_2559 : f32 = vs_INTERP9.z;
        txVec40 = vec3<f32>(x_2557.x, x_2557.y, x_2559);
        let x_2566 : vec3<f32> = txVec40;
        let x_2568 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2566.xy, x_2566.z);
        u_xlat7.x = x_2568;
        let x_2571 : f32 = u_xlat15.z;
        let x_2573 : f32 = u_xlat7.x;
        let x_2575 : f32 = u_xlat69;
        u_xlat69 = ((x_2571 * x_2573) + x_2575);
        let x_2578 : vec4<f32> = u_xlat9;
        let x_2579 : vec2<f32> = vec2<f32>(x_2578.x, x_2578.y);
        let x_2581 : f32 = vs_INTERP9.z;
        txVec41 = vec3<f32>(x_2579.x, x_2579.y, x_2581);
        let x_2588 : vec3<f32> = txVec41;
        let x_2590 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2588.xy, x_2588.z);
        u_xlat7.x = x_2590;
        let x_2593 : f32 = u_xlat15.w;
        let x_2595 : f32 = u_xlat7.x;
        let x_2597 : f32 = u_xlat69;
        u_xlat69 = ((x_2593 * x_2595) + x_2597);
        let x_2600 : vec4<f32> = u_xlat9;
        let x_2601 : vec2<f32> = vec2<f32>(x_2600.z, x_2600.w);
        let x_2603 : f32 = vs_INTERP9.z;
        txVec42 = vec3<f32>(x_2601.x, x_2601.y, x_2603);
        let x_2610 : vec3<f32> = txVec42;
        let x_2612 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2610.xy, x_2610.z);
        u_xlat7.x = x_2612;
        let x_2615 : f32 = u_xlat48.x;
        let x_2617 : f32 = u_xlat7.x;
        let x_2619 : f32 = u_xlat69;
        u_xlat63 = ((x_2615 * x_2617) + x_2619);
      } else {
        let x_2622 : vec4<f32> = vs_INTERP9;
        let x_2625 : vec4<f32> = x_272.x_MainLightShadowmapSize;
        u_xlat48 = ((vec2<f32>(x_2622.x, x_2622.y) * vec2<f32>(x_2625.z, x_2625.w)) + vec2<f32>(0.5f, 0.5f));
        let x_2629 : vec2<f32> = u_xlat48;
        u_xlat48 = floor(x_2629);
        let x_2631 : vec4<f32> = vs_INTERP9;
        let x_2634 : vec4<f32> = x_272.x_MainLightShadowmapSize;
        let x_2637 : vec2<f32> = u_xlat48;
        let x_2639 : vec2<f32> = ((vec2<f32>(x_2631.x, x_2631.y) * vec2<f32>(x_2634.z, x_2634.w)) + -(x_2637));
        let x_2640 : vec4<f32> = u_xlat7;
        u_xlat7 = vec4<f32>(x_2639.x, x_2639.y, x_2640.z, x_2640.w);
        let x_2642 : vec4<f32> = u_xlat7;
        u_xlat8 = (vec4<f32>(x_2642.x, x_2642.x, x_2642.y, x_2642.y) + vec4<f32>(0.5f, 1.0f, 0.5f, 1.0f));
        let x_2645 : vec4<f32> = u_xlat8;
        let x_2647 : vec4<f32> = u_xlat8;
        u_xlat9 = (vec4<f32>(x_2645.x, x_2645.x, x_2645.z, x_2645.z) * vec4<f32>(x_2647.x, x_2647.x, x_2647.z, x_2647.z));
        let x_2650 : vec4<f32> = u_xlat9;
        let x_2652 : vec2<f32> = (vec2<f32>(x_2650.y, x_2650.w) * vec2<f32>(0.040816002f, 0.040816002f));
        let x_2653 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_2653.x, x_2652.x, x_2653.z, x_2652.y);
        let x_2655 : vec4<f32> = u_xlat9;
        let x_2658 : vec4<f32> = u_xlat7;
        u_xlat49 = ((vec2<f32>(x_2655.x, x_2655.z) * vec2<f32>(0.5f, 0.5f)) + -(vec2<f32>(x_2658.x, x_2658.y)));
        let x_2662 : vec4<f32> = u_xlat7;
        let x_2665 : vec2<f32> = (-(vec2<f32>(x_2662.x, x_2662.y)) + vec2<f32>(1.0f, 1.0f));
        let x_2666 : vec4<f32> = u_xlat8;
        u_xlat8 = vec4<f32>(x_2665.x, x_2666.y, x_2665.y, x_2666.w);
        let x_2668 : vec4<f32> = u_xlat7;
        let x_2670 : vec2<f32> = min(vec2<f32>(x_2668.x, x_2668.y), vec2<f32>(0.0f, 0.0f));
        let x_2671 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_2670.x, x_2670.y, x_2671.z, x_2671.w);
        let x_2673 : vec4<f32> = u_xlat9;
        let x_2676 : vec4<f32> = u_xlat9;
        let x_2679 : vec4<f32> = u_xlat8;
        let x_2681 : vec2<f32> = ((-(vec2<f32>(x_2673.x, x_2673.y)) * vec2<f32>(x_2676.x, x_2676.y)) + vec2<f32>(x_2679.x, x_2679.z));
        let x_2682 : vec4<f32> = u_xlat8;
        u_xlat8 = vec4<f32>(x_2681.x, x_2682.y, x_2681.y, x_2682.w);
        let x_2684 : vec4<f32> = u_xlat7;
        let x_2686 : vec2<f32> = max(vec2<f32>(x_2684.x, x_2684.y), vec2<f32>(0.0f, 0.0f));
        let x_2687 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_2686.x, x_2686.y, x_2687.z, x_2687.w);
        let x_2689 : vec4<f32> = u_xlat9;
        let x_2692 : vec4<f32> = u_xlat9;
        let x_2695 : vec4<f32> = u_xlat8;
        let x_2697 : vec2<f32> = ((-(vec2<f32>(x_2689.x, x_2689.y)) * vec2<f32>(x_2692.x, x_2692.y)) + vec2<f32>(x_2695.y, x_2695.w));
        let x_2698 : vec4<f32> = u_xlat8;
        u_xlat8 = vec4<f32>(x_2698.x, x_2697.x, x_2698.z, x_2697.y);
        let x_2700 : vec4<f32> = u_xlat8;
        u_xlat8 = (x_2700 + vec4<f32>(2.0f, 2.0f, 2.0f, 2.0f));
        let x_2703 : f32 = u_xlat8.y;
        u_xlat9.z = (x_2703 * 0.081632003f);
        let x_2706 : vec2<f32> = u_xlat49;
        let x_2708 : vec2<f32> = (vec2<f32>(x_2706.y, x_2706.x) * vec2<f32>(0.081632003f, 0.081632003f));
        let x_2709 : vec4<f32> = u_xlat11;
        u_xlat11 = vec4<f32>(x_2708.x, x_2708.y, x_2709.z, x_2709.w);
        let x_2711 : vec4<f32> = u_xlat8;
        u_xlat49 = (vec2<f32>(x_2711.x, x_2711.z) * vec2<f32>(0.081632003f, 0.081632003f));
        let x_2715 : f32 = u_xlat8.w;
        u_xlat11.z = (x_2715 * 0.081632003f);
        let x_2719 : f32 = u_xlat11.y;
        u_xlat9.x = x_2719;
        let x_2721 : vec4<f32> = u_xlat7;
        let x_2724 : vec2<f32> = ((vec2<f32>(x_2721.x, x_2721.x) * vec2<f32>(-0.081632003f, 0.081632003f)) + vec2<f32>(0.163264006f, 0.081632003f));
        let x_2725 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_2725.x, x_2724.x, x_2725.z, x_2724.y);
        let x_2727 : vec4<f32> = u_xlat7;
        let x_2730 : vec2<f32> = ((vec2<f32>(x_2727.x, x_2727.x) * vec2<f32>(-0.081632003f, 0.081632003f)) + vec2<f32>(0.081632003f, 0.163264006f));
        let x_2731 : vec4<f32> = u_xlat8;
        u_xlat8 = vec4<f32>(x_2730.x, x_2731.y, x_2730.y, x_2731.w);
        let x_2734 : f32 = u_xlat49.x;
        u_xlat8.y = x_2734;
        let x_2737 : f32 = u_xlat10.y;
        u_xlat8.w = x_2737;
        let x_2739 : vec4<f32> = u_xlat8;
        let x_2740 : vec4<f32> = u_xlat9;
        u_xlat9 = (x_2739 + x_2740);
        let x_2742 : vec4<f32> = u_xlat7;
        let x_2745 : vec2<f32> = ((vec2<f32>(x_2742.y, x_2742.y) * vec2<f32>(-0.081632003f, 0.081632003f)) + vec2<f32>(0.163264006f, 0.081632003f));
        let x_2746 : vec4<f32> = u_xlat11;
        u_xlat11 = vec4<f32>(x_2746.x, x_2745.x, x_2746.z, x_2745.y);
        let x_2748 : vec4<f32> = u_xlat7;
        let x_2751 : vec2<f32> = ((vec2<f32>(x_2748.y, x_2748.y) * vec2<f32>(-0.081632003f, 0.081632003f)) + vec2<f32>(0.081632003f, 0.163264006f));
        let x_2752 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_2751.x, x_2752.y, x_2751.y, x_2752.w);
        let x_2755 : f32 = u_xlat49.y;
        u_xlat10.y = x_2755;
        let x_2757 : vec4<f32> = u_xlat10;
        let x_2758 : vec4<f32> = u_xlat11;
        u_xlat7 = (x_2757 + x_2758);
        let x_2760 : vec4<f32> = u_xlat8;
        let x_2761 : vec4<f32> = u_xlat9;
        u_xlat8 = (x_2760 / x_2761);
        let x_2763 : vec4<f32> = u_xlat8;
        u_xlat8 = (x_2763 + vec4<f32>(-3.5f, -1.5f, 0.5f, 2.5f));
        let x_2765 : vec4<f32> = u_xlat10;
        let x_2766 : vec4<f32> = u_xlat7;
        u_xlat10 = (x_2765 / x_2766);
        let x_2768 : vec4<f32> = u_xlat10;
        u_xlat10 = (x_2768 + vec4<f32>(-3.5f, -1.5f, 0.5f, 2.5f));
        let x_2770 : vec4<f32> = u_xlat8;
        let x_2773 : vec4<f32> = x_272.x_MainLightShadowmapSize;
        u_xlat8 = (vec4<f32>(x_2770.w, x_2770.x, x_2770.y, x_2770.z) * vec4<f32>(x_2773.x, x_2773.x, x_2773.x, x_2773.x));
        let x_2776 : vec4<f32> = u_xlat10;
        let x_2779 : vec4<f32> = x_272.x_MainLightShadowmapSize;
        u_xlat10 = (vec4<f32>(x_2776.x, x_2776.w, x_2776.y, x_2776.z) * vec4<f32>(x_2779.y, x_2779.y, x_2779.y, x_2779.y));
        let x_2782 : vec4<f32> = u_xlat8;
        let x_2783 : vec3<f32> = vec3<f32>(x_2782.y, x_2782.z, x_2782.w);
        let x_2784 : vec4<f32> = u_xlat11;
        u_xlat11 = vec4<f32>(x_2783.x, x_2784.y, x_2783.y, x_2783.z);
        let x_2787 : f32 = u_xlat10.x;
        u_xlat11.y = x_2787;
        let x_2789 : vec2<f32> = u_xlat48;
        let x_2792 : vec4<f32> = x_272.x_MainLightShadowmapSize;
        let x_2795 : vec4<f32> = u_xlat11;
        u_xlat12 = ((vec4<f32>(x_2789.x, x_2789.y, x_2789.x, x_2789.y) * vec4<f32>(x_2792.x, x_2792.y, x_2792.x, x_2792.y)) + vec4<f32>(x_2795.x, x_2795.y, x_2795.z, x_2795.y));
        let x_2798 : vec2<f32> = u_xlat48;
        let x_2800 : vec4<f32> = x_272.x_MainLightShadowmapSize;
        let x_2803 : vec4<f32> = u_xlat11;
        let x_2805 : vec2<f32> = ((x_2798 * vec2<f32>(x_2800.x, x_2800.y)) + vec2<f32>(x_2803.w, x_2803.y));
        let x_2806 : vec4<f32> = u_xlat13;
        u_xlat13 = vec4<f32>(x_2805.x, x_2805.y, x_2806.z, x_2806.w);
        let x_2809 : f32 = u_xlat11.y;
        u_xlat8.y = x_2809;
        let x_2812 : f32 = u_xlat10.z;
        u_xlat11.y = x_2812;
        let x_2814 : vec2<f32> = u_xlat48;
        let x_2817 : vec4<f32> = x_272.x_MainLightShadowmapSize;
        let x_2820 : vec4<f32> = u_xlat11;
        u_xlat14 = ((vec4<f32>(x_2814.x, x_2814.y, x_2814.x, x_2814.y) * vec4<f32>(x_2817.x, x_2817.y, x_2817.x, x_2817.y)) + vec4<f32>(x_2820.x, x_2820.y, x_2820.z, x_2820.y));
        let x_2824 : vec2<f32> = u_xlat48;
        let x_2826 : vec4<f32> = x_272.x_MainLightShadowmapSize;
        let x_2829 : vec4<f32> = u_xlat11;
        u_xlat55 = ((x_2824 * vec2<f32>(x_2826.x, x_2826.y)) + vec2<f32>(x_2829.w, x_2829.y));
        let x_2833 : f32 = u_xlat11.y;
        u_xlat8.z = x_2833;
        let x_2835 : vec2<f32> = u_xlat48;
        let x_2838 : vec4<f32> = x_272.x_MainLightShadowmapSize;
        let x_2841 : vec4<f32> = u_xlat8;
        u_xlat15 = ((vec4<f32>(x_2835.x, x_2835.y, x_2835.x, x_2835.y) * vec4<f32>(x_2838.x, x_2838.y, x_2838.x, x_2838.y)) + vec4<f32>(x_2841.x, x_2841.y, x_2841.x, x_2841.z));
        let x_2845 : f32 = u_xlat10.w;
        u_xlat11.y = x_2845;
        let x_2847 : vec2<f32> = u_xlat48;
        let x_2850 : vec4<f32> = x_272.x_MainLightShadowmapSize;
        let x_2853 : vec4<f32> = u_xlat11;
        u_xlat16 = ((vec4<f32>(x_2847.x, x_2847.y, x_2847.x, x_2847.y) * vec4<f32>(x_2850.x, x_2850.y, x_2850.x, x_2850.y)) + vec4<f32>(x_2853.x, x_2853.y, x_2853.z, x_2853.y));
        let x_2856 : vec2<f32> = u_xlat48;
        let x_2858 : vec4<f32> = x_272.x_MainLightShadowmapSize;
        let x_2861 : vec4<f32> = u_xlat11;
        let x_2863 : vec2<f32> = ((x_2856 * vec2<f32>(x_2858.x, x_2858.y)) + vec2<f32>(x_2861.w, x_2861.y));
        let x_2864 : vec3<f32> = u_xlat29;
        u_xlat29 = vec3<f32>(x_2863.x, x_2863.y, x_2864.z);
        let x_2867 : f32 = u_xlat11.y;
        u_xlat8.w = x_2867;
        let x_2869 : vec2<f32> = u_xlat48;
        let x_2871 : vec4<f32> = x_272.x_MainLightShadowmapSize;
        let x_2874 : vec4<f32> = u_xlat8;
        let x_2876 : vec2<f32> = ((x_2869 * vec2<f32>(x_2871.x, x_2871.y)) + vec2<f32>(x_2874.x, x_2874.w));
        let x_2877 : vec4<f32> = u_xlat17;
        u_xlat17 = vec4<f32>(x_2876.x, x_2876.y, x_2877.z, x_2877.w);
        let x_2879 : vec4<f32> = u_xlat11;
        let x_2880 : vec3<f32> = vec3<f32>(x_2879.x, x_2879.z, x_2879.w);
        let x_2881 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_2880.x, x_2881.y, x_2880.y, x_2880.z);
        let x_2883 : vec2<f32> = u_xlat48;
        let x_2886 : vec4<f32> = x_272.x_MainLightShadowmapSize;
        let x_2889 : vec4<f32> = u_xlat10;
        u_xlat11 = ((vec4<f32>(x_2883.x, x_2883.y, x_2883.x, x_2883.y) * vec4<f32>(x_2886.x, x_2886.y, x_2886.x, x_2886.y)) + vec4<f32>(x_2889.x, x_2889.y, x_2889.z, x_2889.y));
        let x_2892 : vec2<f32> = u_xlat48;
        let x_2894 : vec4<f32> = x_272.x_MainLightShadowmapSize;
        let x_2897 : vec4<f32> = u_xlat10;
        u_xlat52 = ((x_2892 * vec2<f32>(x_2894.x, x_2894.y)) + vec2<f32>(x_2897.w, x_2897.y));
        let x_2901 : f32 = u_xlat8.x;
        u_xlat10.x = x_2901;
        let x_2903 : vec2<f32> = u_xlat48;
        let x_2905 : vec4<f32> = x_272.x_MainLightShadowmapSize;
        let x_2908 : vec4<f32> = u_xlat10;
        u_xlat48 = ((x_2903 * vec2<f32>(x_2905.x, x_2905.y)) + vec2<f32>(x_2908.x, x_2908.y));
        let x_2911 : vec4<f32> = u_xlat7;
        let x_2913 : vec4<f32> = u_xlat9;
        u_xlat18 = (vec4<f32>(x_2911.x, x_2911.x, x_2911.x, x_2911.x) * x_2913);
        let x_2915 : vec4<f32> = u_xlat7;
        let x_2917 : vec4<f32> = u_xlat9;
        u_xlat19 = (vec4<f32>(x_2915.y, x_2915.y, x_2915.y, x_2915.y) * x_2917);
        let x_2919 : vec4<f32> = u_xlat7;
        let x_2921 : vec4<f32> = u_xlat9;
        u_xlat20 = (vec4<f32>(x_2919.z, x_2919.z, x_2919.z, x_2919.z) * x_2921);
        let x_2923 : vec4<f32> = u_xlat7;
        let x_2925 : vec4<f32> = u_xlat9;
        u_xlat7 = (vec4<f32>(x_2923.w, x_2923.w, x_2923.w, x_2923.w) * x_2925);
        let x_2928 : vec4<f32> = u_xlat12;
        let x_2929 : vec2<f32> = vec2<f32>(x_2928.x, x_2928.y);
        let x_2931 : f32 = vs_INTERP9.z;
        txVec43 = vec3<f32>(x_2929.x, x_2929.y, x_2931);
        let x_2938 : vec3<f32> = txVec43;
        let x_2940 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2938.xy, x_2938.z);
        u_xlat8.x = x_2940;
        let x_2943 : vec4<f32> = u_xlat12;
        let x_2944 : vec2<f32> = vec2<f32>(x_2943.z, x_2943.w);
        let x_2946 : f32 = vs_INTERP9.z;
        txVec44 = vec3<f32>(x_2944.x, x_2944.y, x_2946);
        let x_2954 : vec3<f32> = txVec44;
        let x_2956 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2954.xy, x_2954.z);
        u_xlat71 = x_2956;
        let x_2957 : f32 = u_xlat71;
        let x_2959 : f32 = u_xlat18.y;
        u_xlat71 = (x_2957 * x_2959);
        let x_2962 : f32 = u_xlat18.x;
        let x_2964 : f32 = u_xlat8.x;
        let x_2966 : f32 = u_xlat71;
        u_xlat8.x = ((x_2962 * x_2964) + x_2966);
        let x_2970 : vec4<f32> = u_xlat13;
        let x_2971 : vec2<f32> = vec2<f32>(x_2970.x, x_2970.y);
        let x_2973 : f32 = vs_INTERP9.z;
        txVec45 = vec3<f32>(x_2971.x, x_2971.y, x_2973);
        let x_2980 : vec3<f32> = txVec45;
        let x_2982 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2980.xy, x_2980.z);
        u_xlat71 = x_2982;
        let x_2984 : f32 = u_xlat18.z;
        let x_2985 : f32 = u_xlat71;
        let x_2988 : f32 = u_xlat8.x;
        u_xlat8.x = ((x_2984 * x_2985) + x_2988);
        let x_2992 : vec4<f32> = u_xlat15;
        let x_2993 : vec2<f32> = vec2<f32>(x_2992.x, x_2992.y);
        let x_2995 : f32 = vs_INTERP9.z;
        txVec46 = vec3<f32>(x_2993.x, x_2993.y, x_2995);
        let x_3002 : vec3<f32> = txVec46;
        let x_3004 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_3002.xy, x_3002.z);
        u_xlat71 = x_3004;
        let x_3006 : f32 = u_xlat18.w;
        let x_3007 : f32 = u_xlat71;
        let x_3010 : f32 = u_xlat8.x;
        u_xlat8.x = ((x_3006 * x_3007) + x_3010);
        let x_3014 : vec4<f32> = u_xlat14;
        let x_3015 : vec2<f32> = vec2<f32>(x_3014.x, x_3014.y);
        let x_3017 : f32 = vs_INTERP9.z;
        txVec47 = vec3<f32>(x_3015.x, x_3015.y, x_3017);
        let x_3024 : vec3<f32> = txVec47;
        let x_3026 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_3024.xy, x_3024.z);
        u_xlat71 = x_3026;
        let x_3028 : f32 = u_xlat19.x;
        let x_3029 : f32 = u_xlat71;
        let x_3032 : f32 = u_xlat8.x;
        u_xlat8.x = ((x_3028 * x_3029) + x_3032);
        let x_3036 : vec4<f32> = u_xlat14;
        let x_3037 : vec2<f32> = vec2<f32>(x_3036.z, x_3036.w);
        let x_3039 : f32 = vs_INTERP9.z;
        txVec48 = vec3<f32>(x_3037.x, x_3037.y, x_3039);
        let x_3046 : vec3<f32> = txVec48;
        let x_3048 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_3046.xy, x_3046.z);
        u_xlat71 = x_3048;
        let x_3050 : f32 = u_xlat19.y;
        let x_3051 : f32 = u_xlat71;
        let x_3054 : f32 = u_xlat8.x;
        u_xlat8.x = ((x_3050 * x_3051) + x_3054);
        let x_3058 : vec2<f32> = u_xlat55;
        let x_3060 : f32 = vs_INTERP9.z;
        txVec49 = vec3<f32>(x_3058.x, x_3058.y, x_3060);
        let x_3067 : vec3<f32> = txVec49;
        let x_3069 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_3067.xy, x_3067.z);
        u_xlat71 = x_3069;
        let x_3071 : f32 = u_xlat19.z;
        let x_3072 : f32 = u_xlat71;
        let x_3075 : f32 = u_xlat8.x;
        u_xlat8.x = ((x_3071 * x_3072) + x_3075);
        let x_3079 : vec4<f32> = u_xlat15;
        let x_3080 : vec2<f32> = vec2<f32>(x_3079.z, x_3079.w);
        let x_3082 : f32 = vs_INTERP9.z;
        txVec50 = vec3<f32>(x_3080.x, x_3080.y, x_3082);
        let x_3089 : vec3<f32> = txVec50;
        let x_3091 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_3089.xy, x_3089.z);
        u_xlat71 = x_3091;
        let x_3093 : f32 = u_xlat19.w;
        let x_3094 : f32 = u_xlat71;
        let x_3097 : f32 = u_xlat8.x;
        u_xlat8.x = ((x_3093 * x_3094) + x_3097);
        let x_3101 : vec4<f32> = u_xlat16;
        let x_3102 : vec2<f32> = vec2<f32>(x_3101.x, x_3101.y);
        let x_3104 : f32 = vs_INTERP9.z;
        txVec51 = vec3<f32>(x_3102.x, x_3102.y, x_3104);
        let x_3111 : vec3<f32> = txVec51;
        let x_3113 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_3111.xy, x_3111.z);
        u_xlat71 = x_3113;
        let x_3115 : f32 = u_xlat20.x;
        let x_3116 : f32 = u_xlat71;
        let x_3119 : f32 = u_xlat8.x;
        u_xlat8.x = ((x_3115 * x_3116) + x_3119);
        let x_3123 : vec4<f32> = u_xlat16;
        let x_3124 : vec2<f32> = vec2<f32>(x_3123.z, x_3123.w);
        let x_3126 : f32 = vs_INTERP9.z;
        txVec52 = vec3<f32>(x_3124.x, x_3124.y, x_3126);
        let x_3133 : vec3<f32> = txVec52;
        let x_3135 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_3133.xy, x_3133.z);
        u_xlat71 = x_3135;
        let x_3137 : f32 = u_xlat20.y;
        let x_3138 : f32 = u_xlat71;
        let x_3141 : f32 = u_xlat8.x;
        u_xlat8.x = ((x_3137 * x_3138) + x_3141);
        let x_3145 : vec3<f32> = u_xlat29;
        let x_3146 : vec2<f32> = vec2<f32>(x_3145.x, x_3145.y);
        let x_3148 : f32 = vs_INTERP9.z;
        txVec53 = vec3<f32>(x_3146.x, x_3146.y, x_3148);
        let x_3155 : vec3<f32> = txVec53;
        let x_3157 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_3155.xy, x_3155.z);
        u_xlat29.x = x_3157;
        let x_3160 : f32 = u_xlat20.z;
        let x_3162 : f32 = u_xlat29.x;
        let x_3165 : f32 = u_xlat8.x;
        u_xlat8.x = ((x_3160 * x_3162) + x_3165);
        let x_3169 : vec4<f32> = u_xlat17;
        let x_3170 : vec2<f32> = vec2<f32>(x_3169.x, x_3169.y);
        let x_3172 : f32 = vs_INTERP9.z;
        txVec54 = vec3<f32>(x_3170.x, x_3170.y, x_3172);
        let x_3179 : vec3<f32> = txVec54;
        let x_3181 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_3179.xy, x_3179.z);
        u_xlat29.x = x_3181;
        let x_3184 : f32 = u_xlat20.w;
        let x_3186 : f32 = u_xlat29.x;
        let x_3189 : f32 = u_xlat8.x;
        u_xlat8.x = ((x_3184 * x_3186) + x_3189);
        let x_3193 : vec4<f32> = u_xlat11;
        let x_3194 : vec2<f32> = vec2<f32>(x_3193.x, x_3193.y);
        let x_3196 : f32 = vs_INTERP9.z;
        txVec55 = vec3<f32>(x_3194.x, x_3194.y, x_3196);
        let x_3203 : vec3<f32> = txVec55;
        let x_3205 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_3203.xy, x_3203.z);
        u_xlat29.x = x_3205;
        let x_3208 : f32 = u_xlat7.x;
        let x_3210 : f32 = u_xlat29.x;
        let x_3213 : f32 = u_xlat8.x;
        u_xlat7.x = ((x_3208 * x_3210) + x_3213);
        let x_3217 : vec4<f32> = u_xlat11;
        let x_3218 : vec2<f32> = vec2<f32>(x_3217.z, x_3217.w);
        let x_3220 : f32 = vs_INTERP9.z;
        txVec56 = vec3<f32>(x_3218.x, x_3218.y, x_3220);
        let x_3227 : vec3<f32> = txVec56;
        let x_3229 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_3227.xy, x_3227.z);
        u_xlat8.x = x_3229;
        let x_3232 : f32 = u_xlat7.y;
        let x_3234 : f32 = u_xlat8.x;
        let x_3237 : f32 = u_xlat7.x;
        u_xlat7.x = ((x_3232 * x_3234) + x_3237);
        let x_3241 : vec2<f32> = u_xlat52;
        let x_3243 : f32 = vs_INTERP9.z;
        txVec57 = vec3<f32>(x_3241.x, x_3241.y, x_3243);
        let x_3251 : vec3<f32> = txVec57;
        let x_3253 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_3251.xy, x_3251.z);
        u_xlat28 = x_3253;
        let x_3255 : f32 = u_xlat7.z;
        let x_3256 : f32 = u_xlat28;
        let x_3259 : f32 = u_xlat7.x;
        u_xlat7.x = ((x_3255 * x_3256) + x_3259);
        let x_3263 : vec2<f32> = u_xlat48;
        let x_3265 : f32 = vs_INTERP9.z;
        txVec58 = vec3<f32>(x_3263.x, x_3263.y, x_3265);
        let x_3272 : vec3<f32> = txVec58;
        let x_3274 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_3272.xy, x_3272.z);
        u_xlat48.x = x_3274;
        let x_3277 : f32 = u_xlat7.w;
        let x_3279 : f32 = u_xlat48.x;
        let x_3282 : f32 = u_xlat7.x;
        u_xlat63 = ((x_3277 * x_3279) + x_3282);
      }
    }
  } else {
    let x_3286 : vec4<f32> = vs_INTERP9;
    let x_3287 : vec2<f32> = vec2<f32>(x_3286.x, x_3286.y);
    let x_3289 : f32 = vs_INTERP9.z;
    txVec59 = vec3<f32>(x_3287.x, x_3287.y, x_3289);
    let x_3296 : vec3<f32> = txVec59;
    let x_3298 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_3296.xy, x_3296.z);
    u_xlat63 = x_3298;
  }
  let x_3299 : f32 = u_xlat63;
  let x_3301 : f32 = x_272.x_MainLightShadowParams.x;
  let x_3303 : f32 = u_xlat65;
  u_xlat63 = ((x_3299 * x_3301) + x_3303);
  let x_3306 : f32 = vs_INTERP9.z;
  u_xlatb65 = (0.0f >= x_3306);
  let x_3309 : f32 = vs_INTERP9.z;
  u_xlatb48 = (x_3309 >= 1.0f);
  let x_3311 : bool = u_xlatb65;
  let x_3312 : bool = u_xlatb48;
  u_xlatb65 = (x_3311 | x_3312);
  let x_3314 : bool = u_xlatb65;
  let x_3315 : f32 = u_xlat63;
  u_xlat63 = select(x_3315, 1.0f, x_3314);
  let x_3317 : vec3<f32> = vs_INTERP0;
  let x_3319 : vec3<f32> = x_90.x_WorldSpaceCameraPos;
  let x_3321 : vec3<f32> = (x_3317 + -(x_3319));
  let x_3322 : vec4<f32> = u_xlat7;
  u_xlat7 = vec4<f32>(x_3321.x, x_3321.y, x_3321.z, x_3322.w);
  let x_3324 : vec4<f32> = u_xlat7;
  let x_3326 : vec4<f32> = u_xlat7;
  u_xlat65 = dot(vec3<f32>(x_3324.x, x_3324.y, x_3324.z), vec3<f32>(x_3326.x, x_3326.y, x_3326.z));
  let x_3329 : f32 = u_xlat65;
  let x_3331 : f32 = x_272.x_MainLightShadowParams.z;
  let x_3334 : f32 = x_272.x_MainLightShadowParams.w;
  u_xlat65 = ((x_3329 * x_3331) + x_3334);
  let x_3336 : f32 = u_xlat65;
  u_xlat65 = clamp(x_3336, 0.0f, 1.0f);
  let x_3338 : f32 = u_xlat63;
  u_xlat48.x = (-(x_3338) + 1.0f);
  let x_3342 : f32 = u_xlat65;
  let x_3344 : f32 = u_xlat48.x;
  let x_3346 : f32 = u_xlat63;
  u_xlat63 = ((x_3342 * x_3344) + x_3346);
  let x_3348 : f32 = u_xlat27;
  let x_3351 : vec4<f32> = x_90.x_MainLightColor;
  let x_3353 : vec3<f32> = (vec3<f32>(x_3348, x_3348, x_3348) * vec3<f32>(x_3351.x, x_3351.y, x_3351.z));
  let x_3354 : vec4<f32> = u_xlat7;
  u_xlat7 = vec4<f32>(x_3353.x, x_3353.y, x_3353.z, x_3354.w);
  let x_3356 : vec3<f32> = u_xlat2;
  let x_3358 : vec4<f32> = u_xlat3;
  u_xlat65 = dot(-(x_3356), vec3<f32>(x_3358.x, x_3358.y, x_3358.z));
  let x_3361 : f32 = u_xlat65;
  let x_3362 : f32 = u_xlat65;
  u_xlat65 = (x_3361 + x_3362);
  let x_3364 : vec4<f32> = u_xlat3;
  let x_3366 : f32 = u_xlat65;
  let x_3370 : vec3<f32> = u_xlat2;
  let x_3372 : vec3<f32> = ((vec3<f32>(x_3364.x, x_3364.y, x_3364.z) * -(vec3<f32>(x_3366, x_3366, x_3366))) + -(x_3370));
  let x_3373 : vec4<f32> = u_xlat8;
  u_xlat8 = vec4<f32>(x_3372.x, x_3372.y, x_3372.z, x_3373.w);
  let x_3375 : vec4<f32> = u_xlat3;
  let x_3377 : vec3<f32> = u_xlat2;
  u_xlat65 = dot(vec3<f32>(x_3375.x, x_3375.y, x_3375.z), x_3377);
  let x_3379 : f32 = u_xlat65;
  u_xlat65 = clamp(x_3379, 0.0f, 1.0f);
  let x_3381 : f32 = u_xlat65;
  u_xlat65 = (-(x_3381) + 1.0f);
  let x_3384 : f32 = u_xlat65;
  let x_3385 : f32 = u_xlat65;
  u_xlat65 = (x_3384 * x_3385);
  let x_3387 : f32 = u_xlat65;
  let x_3388 : f32 = u_xlat65;
  u_xlat65 = (x_3387 * x_3388);
  let x_3391 : f32 = u_xlat43.x;
  u_xlat48.x = ((-(x_3391) * 0.699999988f) + 1.700000048f);
  let x_3399 : f32 = u_xlat43.x;
  let x_3401 : f32 = u_xlat48.x;
  u_xlat43.x = (x_3399 * x_3401);
  let x_3405 : f32 = u_xlat43.x;
  u_xlat43.x = (x_3405 * 6.0f);
  let x_3417 : vec4<f32> = u_xlat8;
  let x_3420 : f32 = u_xlat43.x;
  let x_3421 : vec4<f32> = textureSampleLevel(unity_SpecCube0, samplerunity_SpecCube0, vec3<f32>(x_3417.x, x_3417.y, x_3417.z), x_3420);
  u_xlat8 = x_3421;
  let x_3423 : f32 = u_xlat8.w;
  u_xlat43.x = (x_3423 + -1.0f);
  let x_3427 : f32 = x_161.unity_SpecCube0_HDR.w;
  let x_3429 : f32 = u_xlat43.x;
  u_xlat43.x = ((x_3427 * x_3429) + 1.0f);
  let x_3434 : f32 = u_xlat43.x;
  u_xlat43.x = max(x_3434, 0.0f);
  let x_3438 : f32 = u_xlat43.x;
  u_xlat43.x = log2(x_3438);
  let x_3442 : f32 = u_xlat43.x;
  let x_3444 : f32 = x_161.unity_SpecCube0_HDR.y;
  u_xlat43.x = (x_3442 * x_3444);
  let x_3448 : f32 = u_xlat43.x;
  u_xlat43.x = exp2(x_3448);
  let x_3452 : f32 = u_xlat43.x;
  let x_3454 : f32 = x_161.unity_SpecCube0_HDR.x;
  u_xlat43.x = (x_3452 * x_3454);
  let x_3457 : vec4<f32> = u_xlat8;
  let x_3459 : vec2<f32> = u_xlat43;
  let x_3461 : vec3<f32> = (vec3<f32>(x_3457.x, x_3457.y, x_3457.z) * vec3<f32>(x_3459.x, x_3459.x, x_3459.x));
  let x_3462 : vec4<f32> = u_xlat8;
  u_xlat8 = vec4<f32>(x_3461.x, x_3461.y, x_3461.z, x_3462.w);
  let x_3464 : f32 = u_xlat64;
  let x_3466 : f32 = u_xlat64;
  u_xlat43 = ((vec2<f32>(x_3464, x_3464) * vec2<f32>(x_3466, x_3466)) + vec2<f32>(-1.0f, 1.0f));
  let x_3472 : f32 = u_xlat43.y;
  u_xlat64 = (1.0f / x_3472);
  let x_3474 : f32 = u_xlat67;
  u_xlat67 = (x_3474 + -0.039999999f);
  let x_3477 : f32 = u_xlat65;
  let x_3478 : f32 = u_xlat67;
  u_xlat65 = ((x_3477 * x_3478) + 0.039999999f);
  let x_3482 : f32 = u_xlat64;
  let x_3483 : f32 = u_xlat65;
  u_xlat64 = (x_3482 * x_3483);
  let x_3485 : f32 = u_xlat64;
  let x_3487 : vec4<f32> = u_xlat8;
  let x_3489 : vec3<f32> = (vec3<f32>(x_3485, x_3485, x_3485) * vec3<f32>(x_3487.x, x_3487.y, x_3487.z));
  let x_3490 : vec4<f32> = u_xlat8;
  u_xlat8 = vec4<f32>(x_3489.x, x_3489.y, x_3489.z, x_3490.w);
  let x_3492 : vec3<f32> = u_xlat26;
  let x_3493 : vec3<f32> = u_xlat4;
  let x_3495 : vec4<f32> = u_xlat8;
  u_xlat26 = ((x_3492 * x_3493) + vec3<f32>(x_3495.x, x_3495.y, x_3495.z));
  let x_3498 : f32 = u_xlat63;
  let x_3500 : f32 = x_161.unity_LightData.z;
  u_xlat63 = (x_3498 * x_3500);
  let x_3502 : vec4<f32> = u_xlat3;
  let x_3505 : vec4<f32> = x_90.x_MainLightPosition;
  u_xlat64 = dot(vec3<f32>(x_3502.x, x_3502.y, x_3502.z), vec3<f32>(x_3505.x, x_3505.y, x_3505.z));
  let x_3508 : f32 = u_xlat64;
  u_xlat64 = clamp(x_3508, 0.0f, 1.0f);
  let x_3510 : f32 = u_xlat63;
  let x_3511 : f32 = u_xlat64;
  u_xlat63 = (x_3510 * x_3511);
  let x_3513 : f32 = u_xlat63;
  let x_3515 : vec4<f32> = u_xlat7;
  let x_3517 : vec3<f32> = (vec3<f32>(x_3513, x_3513, x_3513) * vec3<f32>(x_3515.x, x_3515.y, x_3515.z));
  let x_3518 : vec4<f32> = u_xlat7;
  u_xlat7 = vec4<f32>(x_3517.x, x_3517.y, x_3517.z, x_3518.w);
  let x_3520 : vec3<f32> = u_xlat2;
  let x_3522 : vec4<f32> = x_90.x_MainLightPosition;
  let x_3524 : vec3<f32> = (x_3520 + vec3<f32>(x_3522.x, x_3522.y, x_3522.z));
  let x_3525 : vec4<f32> = u_xlat8;
  u_xlat8 = vec4<f32>(x_3524.x, x_3524.y, x_3524.z, x_3525.w);
  let x_3527 : vec4<f32> = u_xlat8;
  let x_3529 : vec4<f32> = u_xlat8;
  u_xlat63 = dot(vec3<f32>(x_3527.x, x_3527.y, x_3527.z), vec3<f32>(x_3529.x, x_3529.y, x_3529.z));
  let x_3532 : f32 = u_xlat63;
  u_xlat63 = max(x_3532, 1.17549435e-37f);
  let x_3535 : f32 = u_xlat63;
  u_xlat63 = inverseSqrt(x_3535);
  let x_3537 : f32 = u_xlat63;
  let x_3539 : vec4<f32> = u_xlat8;
  let x_3541 : vec3<f32> = (vec3<f32>(x_3537, x_3537, x_3537) * vec3<f32>(x_3539.x, x_3539.y, x_3539.z));
  let x_3542 : vec4<f32> = u_xlat8;
  u_xlat8 = vec4<f32>(x_3541.x, x_3541.y, x_3541.z, x_3542.w);
  let x_3544 : vec4<f32> = u_xlat3;
  let x_3546 : vec4<f32> = u_xlat8;
  u_xlat63 = dot(vec3<f32>(x_3544.x, x_3544.y, x_3544.z), vec3<f32>(x_3546.x, x_3546.y, x_3546.z));
  let x_3549 : f32 = u_xlat63;
  u_xlat63 = clamp(x_3549, 0.0f, 1.0f);
  let x_3552 : vec4<f32> = x_90.x_MainLightPosition;
  let x_3554 : vec4<f32> = u_xlat8;
  u_xlat64 = dot(vec3<f32>(x_3552.x, x_3552.y, x_3552.z), vec3<f32>(x_3554.x, x_3554.y, x_3554.z));
  let x_3557 : f32 = u_xlat64;
  u_xlat64 = clamp(x_3557, 0.0f, 1.0f);
  let x_3559 : f32 = u_xlat63;
  let x_3560 : f32 = u_xlat63;
  u_xlat63 = (x_3559 * x_3560);
  let x_3562 : f32 = u_xlat63;
  let x_3564 : f32 = u_xlat43.x;
  u_xlat63 = ((x_3562 * x_3564) + 1.000010014f);
  let x_3568 : f32 = u_xlat64;
  let x_3569 : f32 = u_xlat64;
  u_xlat64 = (x_3568 * x_3569);
  let x_3571 : f32 = u_xlat63;
  let x_3572 : f32 = u_xlat63;
  u_xlat63 = (x_3571 * x_3572);
  let x_3574 : f32 = u_xlat64;
  u_xlat64 = max(x_3574, 0.100000001f);
  let x_3577 : f32 = u_xlat63;
  let x_3578 : f32 = u_xlat64;
  u_xlat63 = (x_3577 * x_3578);
  let x_3581 : f32 = u_xlat5.x;
  let x_3582 : f32 = u_xlat63;
  u_xlat63 = (x_3581 * x_3582);
  let x_3584 : f32 = u_xlat66;
  let x_3585 : f32 = u_xlat63;
  u_xlat63 = (x_3584 / x_3585);
  let x_3587 : f32 = u_xlat63;
  let x_3591 : vec3<f32> = u_xlat4;
  let x_3592 : vec3<f32> = ((vec3<f32>(x_3587, x_3587, x_3587) * vec3<f32>(0.039999999f, 0.039999999f, 0.039999999f)) + x_3591);
  let x_3593 : vec4<f32> = u_xlat8;
  u_xlat8 = vec4<f32>(x_3592.x, x_3592.y, x_3592.z, x_3593.w);
  let x_3595 : vec4<f32> = u_xlat7;
  let x_3597 : vec4<f32> = u_xlat8;
  let x_3599 : vec3<f32> = (vec3<f32>(x_3595.x, x_3595.y, x_3595.z) * vec3<f32>(x_3597.x, x_3597.y, x_3597.z));
  let x_3600 : vec4<f32> = u_xlat7;
  u_xlat7 = vec4<f32>(x_3599.x, x_3599.y, x_3599.z, x_3600.w);
  let x_3603 : f32 = x_90.x_AdditionalLightsCount.x;
  let x_3605 : f32 = x_161.unity_LightData.y;
  u_xlat63 = min(x_3603, x_3605);
  let x_3608 : f32 = u_xlat63;
  u_xlatu63 = bitcast<u32>(i32(x_3608));
  u_xlat8.x = 0.0f;
  u_xlat8.y = 0.0f;
  u_xlat8.z = 0.0f;
  u_xlatu_loop_1 = 0u;
  loop {
    let x_3620 : u32 = u_xlatu_loop_1;
    let x_3621 : u32 = u_xlatu63;
    if ((x_3620 < x_3621)) {
    } else {
      break;
    }
    let x_3624 : u32 = u_xlatu_loop_1;
    u_xlatu65 = (x_3624 >> 2u);
    let x_3627 : u32 = u_xlatu_loop_1;
    u_xlati67 = bitcast<i32>((x_3627 & 3u));
    let x_3630 : u32 = u_xlatu65;
    let x_3633 : vec4<f32> = x_161.unity_LightIndices[bitcast<i32>(x_3630)];
    let x_3643 : i32 = u_xlati67;
    indexable = array<vec4<u32>, 4u>(vec4<u32>(1065353216u, 0u, 0u, 0u), vec4<u32>(0u, 1065353216u, 0u, 0u), vec4<u32>(0u, 0u, 1065353216u, 0u), vec4<u32>(0u, 0u, 0u, 1065353216u));
    let x_3648 : vec4<u32> = indexable[x_3643];
    u_xlat65 = dot(x_3633, bitcast<vec4<f32>>(x_3648));
    let x_3652 : f32 = u_xlat65;
    u_xlati65 = i32(x_3652);
    let x_3654 : vec3<f32> = vs_INTERP0;
    let x_3666 : i32 = u_xlati65;
    let x_3668 : vec4<f32> = x_3665.x_AdditionalLightsPosition[x_3666];
    let x_3671 : i32 = u_xlati65;
    let x_3673 : vec4<f32> = x_3665.x_AdditionalLightsPosition[x_3671];
    let x_3675 : vec3<f32> = ((-(x_3654) * vec3<f32>(x_3668.w, x_3668.w, x_3668.w)) + vec3<f32>(x_3673.x, x_3673.y, x_3673.z));
    let x_3676 : vec4<f32> = u_xlat9;
    u_xlat9 = vec4<f32>(x_3675.x, x_3675.y, x_3675.z, x_3676.w);
    let x_3678 : vec4<f32> = u_xlat9;
    let x_3680 : vec4<f32> = u_xlat9;
    u_xlat67 = dot(vec3<f32>(x_3678.x, x_3678.y, x_3678.z), vec3<f32>(x_3680.x, x_3680.y, x_3680.z));
    let x_3683 : f32 = u_xlat67;
    u_xlat67 = max(x_3683, 6.10351562e-05f);
    let x_3686 : f32 = u_xlat67;
    u_xlat48.x = inverseSqrt(x_3686);
    let x_3689 : vec2<f32> = u_xlat48;
    let x_3691 : vec4<f32> = u_xlat9;
    let x_3693 : vec3<f32> = (vec3<f32>(x_3689.x, x_3689.x, x_3689.x) * vec3<f32>(x_3691.x, x_3691.y, x_3691.z));
    let x_3694 : vec4<f32> = u_xlat10;
    u_xlat10 = vec4<f32>(x_3693.x, x_3693.y, x_3693.z, x_3694.w);
    let x_3696 : f32 = u_xlat67;
    u_xlat69 = (1.0f / x_3696);
    let x_3698 : f32 = u_xlat67;
    let x_3699 : i32 = u_xlati65;
    let x_3701 : f32 = x_3665.x_AdditionalLightsAttenuation[x_3699].x;
    u_xlat67 = (x_3698 * x_3701);
    let x_3703 : f32 = u_xlat67;
    let x_3705 : f32 = u_xlat67;
    u_xlat67 = ((-(x_3703) * x_3705) + 1.0f);
    let x_3708 : f32 = u_xlat67;
    u_xlat67 = max(x_3708, 0.0f);
    let x_3710 : f32 = u_xlat67;
    let x_3711 : f32 = u_xlat67;
    u_xlat67 = (x_3710 * x_3711);
    let x_3713 : f32 = u_xlat67;
    let x_3714 : f32 = u_xlat69;
    u_xlat67 = (x_3713 * x_3714);
    let x_3716 : i32 = u_xlati65;
    let x_3718 : vec4<f32> = x_3665.x_AdditionalLightsSpotDir[x_3716];
    let x_3720 : vec4<f32> = u_xlat10;
    u_xlat69 = dot(vec3<f32>(x_3718.x, x_3718.y, x_3718.z), vec3<f32>(x_3720.x, x_3720.y, x_3720.z));
    let x_3723 : f32 = u_xlat69;
    let x_3724 : i32 = u_xlati65;
    let x_3726 : f32 = x_3665.x_AdditionalLightsAttenuation[x_3724].z;
    let x_3728 : i32 = u_xlati65;
    let x_3730 : f32 = x_3665.x_AdditionalLightsAttenuation[x_3728].w;
    u_xlat69 = ((x_3723 * x_3726) + x_3730);
    let x_3732 : f32 = u_xlat69;
    u_xlat69 = clamp(x_3732, 0.0f, 1.0f);
    let x_3734 : f32 = u_xlat69;
    let x_3735 : f32 = u_xlat69;
    u_xlat69 = (x_3734 * x_3735);
    let x_3737 : f32 = u_xlat67;
    let x_3738 : f32 = u_xlat69;
    u_xlat67 = (x_3737 * x_3738);
    let x_3740 : f32 = u_xlat27;
    let x_3742 : i32 = u_xlati65;
    let x_3744 : vec4<f32> = x_3665.x_AdditionalLightsColor[x_3742];
    let x_3746 : vec3<f32> = (vec3<f32>(x_3740, x_3740, x_3740) * vec3<f32>(x_3744.x, x_3744.y, x_3744.z));
    let x_3747 : vec4<f32> = u_xlat11;
    u_xlat11 = vec4<f32>(x_3746.x, x_3746.y, x_3746.z, x_3747.w);
    let x_3749 : vec4<f32> = u_xlat3;
    let x_3751 : vec4<f32> = u_xlat10;
    u_xlat65 = dot(vec3<f32>(x_3749.x, x_3749.y, x_3749.z), vec3<f32>(x_3751.x, x_3751.y, x_3751.z));
    let x_3754 : f32 = u_xlat65;
    u_xlat65 = clamp(x_3754, 0.0f, 1.0f);
    let x_3756 : f32 = u_xlat65;
    let x_3757 : f32 = u_xlat67;
    u_xlat65 = (x_3756 * x_3757);
    let x_3759 : f32 = u_xlat65;
    let x_3761 : vec4<f32> = u_xlat11;
    let x_3763 : vec3<f32> = (vec3<f32>(x_3759, x_3759, x_3759) * vec3<f32>(x_3761.x, x_3761.y, x_3761.z));
    let x_3764 : vec4<f32> = u_xlat11;
    u_xlat11 = vec4<f32>(x_3763.x, x_3763.y, x_3763.z, x_3764.w);
    let x_3766 : vec4<f32> = u_xlat9;
    let x_3768 : vec2<f32> = u_xlat48;
    let x_3771 : vec3<f32> = u_xlat2;
    let x_3772 : vec3<f32> = ((vec3<f32>(x_3766.x, x_3766.y, x_3766.z) * vec3<f32>(x_3768.x, x_3768.x, x_3768.x)) + x_3771);
    let x_3773 : vec4<f32> = u_xlat9;
    u_xlat9 = vec4<f32>(x_3772.x, x_3772.y, x_3772.z, x_3773.w);
    let x_3775 : vec4<f32> = u_xlat9;
    let x_3777 : vec4<f32> = u_xlat9;
    u_xlat65 = dot(vec3<f32>(x_3775.x, x_3775.y, x_3775.z), vec3<f32>(x_3777.x, x_3777.y, x_3777.z));
    let x_3780 : f32 = u_xlat65;
    u_xlat65 = max(x_3780, 1.17549435e-37f);
    let x_3782 : f32 = u_xlat65;
    u_xlat65 = inverseSqrt(x_3782);
    let x_3784 : f32 = u_xlat65;
    let x_3786 : vec4<f32> = u_xlat9;
    let x_3788 : vec3<f32> = (vec3<f32>(x_3784, x_3784, x_3784) * vec3<f32>(x_3786.x, x_3786.y, x_3786.z));
    let x_3789 : vec4<f32> = u_xlat9;
    u_xlat9 = vec4<f32>(x_3788.x, x_3788.y, x_3788.z, x_3789.w);
    let x_3791 : vec4<f32> = u_xlat3;
    let x_3793 : vec4<f32> = u_xlat9;
    u_xlat65 = dot(vec3<f32>(x_3791.x, x_3791.y, x_3791.z), vec3<f32>(x_3793.x, x_3793.y, x_3793.z));
    let x_3796 : f32 = u_xlat65;
    u_xlat65 = clamp(x_3796, 0.0f, 1.0f);
    let x_3798 : vec4<f32> = u_xlat10;
    let x_3800 : vec4<f32> = u_xlat9;
    u_xlat67 = dot(vec3<f32>(x_3798.x, x_3798.y, x_3798.z), vec3<f32>(x_3800.x, x_3800.y, x_3800.z));
    let x_3803 : f32 = u_xlat67;
    u_xlat67 = clamp(x_3803, 0.0f, 1.0f);
    let x_3805 : f32 = u_xlat65;
    let x_3806 : f32 = u_xlat65;
    u_xlat65 = (x_3805 * x_3806);
    let x_3808 : f32 = u_xlat65;
    let x_3810 : f32 = u_xlat43.x;
    u_xlat65 = ((x_3808 * x_3810) + 1.000010014f);
    let x_3813 : f32 = u_xlat67;
    let x_3814 : f32 = u_xlat67;
    u_xlat67 = (x_3813 * x_3814);
    let x_3816 : f32 = u_xlat65;
    let x_3817 : f32 = u_xlat65;
    u_xlat65 = (x_3816 * x_3817);
    let x_3819 : f32 = u_xlat67;
    u_xlat67 = max(x_3819, 0.100000001f);
    let x_3821 : f32 = u_xlat65;
    let x_3822 : f32 = u_xlat67;
    u_xlat65 = (x_3821 * x_3822);
    let x_3825 : f32 = u_xlat5.x;
    let x_3826 : f32 = u_xlat65;
    u_xlat65 = (x_3825 * x_3826);
    let x_3828 : f32 = u_xlat66;
    let x_3829 : f32 = u_xlat65;
    u_xlat65 = (x_3828 / x_3829);
    let x_3831 : f32 = u_xlat65;
    let x_3834 : vec3<f32> = u_xlat4;
    let x_3835 : vec3<f32> = ((vec3<f32>(x_3831, x_3831, x_3831) * vec3<f32>(0.039999999f, 0.039999999f, 0.039999999f)) + x_3834);
    let x_3836 : vec4<f32> = u_xlat9;
    u_xlat9 = vec4<f32>(x_3835.x, x_3835.y, x_3835.z, x_3836.w);
    let x_3838 : vec4<f32> = u_xlat9;
    let x_3840 : vec4<f32> = u_xlat11;
    let x_3843 : vec4<f32> = u_xlat8;
    let x_3845 : vec3<f32> = ((vec3<f32>(x_3838.x, x_3838.y, x_3838.z) * vec3<f32>(x_3840.x, x_3840.y, x_3840.z)) + vec3<f32>(x_3843.x, x_3843.y, x_3843.z));
    let x_3846 : vec4<f32> = u_xlat8;
    u_xlat8 = vec4<f32>(x_3845.x, x_3845.y, x_3845.z, x_3846.w);

    continuing {
      let x_3848 : u32 = u_xlatu_loop_1;
      u_xlatu_loop_1 = (x_3848 + bitcast<u32>(1i));
    }
  }
  let x_3850 : vec3<f32> = u_xlat26;
  let x_3851 : vec4<f32> = u_xlat6;
  let x_3854 : vec4<f32> = u_xlat7;
  u_xlat2 = ((x_3850 * vec3<f32>(x_3851.x, x_3851.x, x_3851.x)) + vec3<f32>(x_3854.x, x_3854.y, x_3854.z));
  let x_3857 : vec4<f32> = u_xlat8;
  let x_3859 : vec3<f32> = u_xlat2;
  u_xlat2 = (vec3<f32>(x_3857.x, x_3857.y, x_3857.z) + x_3859);
  let x_3863 : vec4<f32> = vs_INTERP4;
  let x_3865 : vec3<f32> = u_xlat0;
  let x_3867 : vec3<f32> = u_xlat2;
  let x_3868 : vec3<f32> = ((vec3<f32>(x_3863.w, x_3863.w, x_3863.w) * x_3865) + x_3867);
  let x_3869 : vec4<f32> = SV_Target0;
  SV_Target0 = vec4<f32>(x_3868.x, x_3868.y, x_3868.z, x_3869.w);
  let x_3871 : bool = u_xlatb22;
  if (x_3871) {
    let x_3876 : f32 = u_xlat1.x;
    x_3872 = x_3876;
  } else {
    x_3872 = 1.0f;
  }
  let x_3878 : f32 = x_3872;
  SV_Target0.w = x_3878;
  let x_3884 : u32 = x_90.x_RenderingLayerMaxInt;
  let x_3886 : f32 = x_161.unity_RenderingLayer.x;
  u_xlatu0 = (x_3884 & bitcast<u32>(x_3886));
  let x_3889 : u32 = u_xlatu0;
  u_xlat0.x = f32(x_3889);
  let x_3894 : f32 = u_xlat0.x;
  let x_3896 : f32 = x_90.x_RenderingLayerRcpMaxInt;
  SV_Target1.x = (x_3894 * x_3896);
  let x_3900 : f32 = SV_Target1.x;
  SV_Target1.x = clamp(x_3900, 0.0f, 1.0f);
  let x_3903 : vec4<f32> = SV_Target1;
  SV_Target1 = vec4<f32>(x_3903.x, vec3<f32>(0.0f, 0.0f, 0.0f).x, vec3<f32>(0.0f, 0.0f, 0.0f).y, vec3<f32>(0.0f, 0.0f, 0.0f).z);
  return;
}

struct main_out {
  @location(0)
  SV_Target0_1 : vec4<f32>,
  @location(1)
  SV_Target1_1 : vec4<f32>,
}

@fragment
fn main(@builtin(position) gl_FragCoord_param : vec4<f32>, @location(1) vs_INTERP1_param : vec3<f32>, @location(0) vs_INTERP0_param : vec3<f32>, @location(3) vs_INTERP3_param : vec4<f32>, @location(4) vs_INTERP4_param : vec4<f32>, @location(2) vs_INTERP2_param : vec4<f32>, @location(5) vs_INTERP9_param : vec4<f32>) -> main_out {
  gl_FragCoord = gl_FragCoord_param;
  vs_INTERP1 = vs_INTERP1_param;
  vs_INTERP0 = vs_INTERP0_param;
  vs_INTERP3 = vs_INTERP3_param;
  vs_INTERP4 = vs_INTERP4_param;
  vs_INTERP2 = vs_INTERP2_param;
  vs_INTERP9 = vs_INTERP9_param;
  main_1();
  return main_out(SV_Target0, SV_Target1);
}

