#version 440
#extension GL_ARB_explicit_attrib_location : require
#extension GL_ARB_shading_language_420pack : require

layout(origin_upper_left) in vec4 gl_FragCoord;
#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
precise vec4 u_xlat_precise_vec4;
precise ivec4 u_xlat_precise_ivec4;
precise bvec4 u_xlat_precise_bvec4;
precise uvec4 u_xlat_precise_uvec4;
const uvec4 ImmCB_0[] = uvec4[4] (
	uvec4(0x3F800000, 0x0, 0x0, 0x0),
	uvec4(0x0, 0x3F800000, 0x0, 0x0),
	uvec4(0x0, 0x0, 0x3F800000, 0x0),
	uvec4(0x0, 0x0, 0x0, 0x3F800000));
layout(set = 1, binding = 0, std140) uniform PGlobals {
	vec2 _GlobalMipBias;
	vec4 _MainLightPosition;
	vec4 _MainLightColor;
	vec4 _AdditionalLightsCount;
	vec3 _WorldSpaceCameraPos;
	vec4 _ProjectionParams;
	vec4 unity_FogParams;
	vec4 unity_FogColor;
	mat4x4 unity_MatrixV;
};
layout(set = 1, binding = 1, std140) uniform AdditionalLights {
	vec4 _AdditionalLightsPosition[32];
	vec4 _AdditionalLightsColor[32];
	vec4 _AdditionalLightsAttenuation[32];
	vec4 _AdditionalLightsSpotDir[32];
	vec4 _AdditionalLightsOcclusionProbes[32];
	float _AdditionalLightsLayerMasks[32];
};
layout(set = 1, binding = 2, std140) uniform UnityPerDraw {
	mat4x4 unity_ObjectToWorld;
	mat4x4 unity_WorldToObject;
	vec4 unity_LODFade;
	vec4 unity_WorldTransformParams;
	vec4 unity_RenderingLayer;
	vec4 unity_LightData;
	vec4 unity_LightIndices[2];
	vec4 unity_ProbesOcclusion;
	vec4 unity_SpecCube0_HDR;
	vec4 unity_SpecCube1_HDR;
	vec4 unity_SpecCube0_BoxMax;
	vec4 unity_SpecCube0_BoxMin;
	vec4 unity_SpecCube0_ProbePosition;
	vec4 unity_SpecCube1_BoxMax;
	vec4 unity_SpecCube1_BoxMin;
	vec4 unity_SpecCube1_ProbePosition;
	vec4 unity_LightmapST;
	vec4 unity_DynamicLightmapST;
	vec4 unity_SHAr;
	vec4 unity_SHAg;
	vec4 unity_SHAb;
	vec4 unity_SHBr;
	vec4 unity_SHBg;
	vec4 unity_SHBb;
	vec4 unity_SHC;
	vec4 unity_RendererBounds_Min;
	vec4 unity_RendererBounds_Max;
	mat4x4 unity_MatrixPreviousM;
	mat4x4 unity_MatrixPreviousMI;
	vec4 unity_MotionVectorsParams;
	vec4 unity_SpriteColor;
	vec4 unity_SpriteProps;
};
layout(set = 1, binding = 3, std140) uniform LightShadows {
	mat4x4 _MainLightWorldToShadow[5];
	vec4 _CascadeShadowSplitSpheres0;
	vec4 _CascadeShadowSplitSpheres1;
	vec4 _CascadeShadowSplitSpheres2;
	vec4 _CascadeShadowSplitSpheres3;
	vec4 _CascadeShadowSplitSphereRadii;
	vec4 _MainLightShadowOffset0;
	vec4 _MainLightShadowOffset1;
	vec4 _MainLightShadowParams;
	vec4 _MainLightShadowmapSize;
	vec4 _AdditionalShadowOffset0;
	vec4 _AdditionalShadowOffset1;
	vec4 _AdditionalShadowFadeParams;
	vec4 _AdditionalShadowmapSize;
	vec4 _AdditionalShadowParams[32];
	mat4x4 _AdditionalLightsWorldToShadow[32];
};
layout(set = 1, binding = 4, std140) uniform LightCookies {
	mat4x4 _MainLightWorldToLight;
	float _AdditionalLightsCookieEnableBits;
	float _MainLightCookieTextureFormat;
	float _AdditionalLightsCookieAtlasTextureFormat;
	mat4x4 _AdditionalLightsWorldToLights[32];
	vec4 _AdditionalLightsCookieAtlasUVRects[32];
	float _AdditionalLightsLightTypes[32];
};
layout(set = 0, binding = 0) uniform mediump textureCube unity_SpecCube0;
layout(set = 0, binding = 1) uniform mediump texture2D _MainTex;
layout(set = 0, binding = 2) uniform mediump texture2D _MetallicTex;
layout(set = 0, binding = 3) uniform mediump texture2D _TerrainHolesTexture;
layout(set = 0, binding = 4) uniform mediump texture2D _MainLightShadowmapTexture;
layout(set = 0, binding = 5) uniform mediump texture2D _AdditionalLightsShadowmapTexture;
layout(set = 0, binding = 6) uniform mediump texture2D _MainLightCookieTexture;
layout(set = 0, binding = 7) uniform mediump texture2D _AdditionalLightsCookieAtlasTexture;
layout(location = 0) in highp  vec4 vs_TEXCOORD0;
layout(location = 1) in highp  vec4 vs_TEXCOORD3;
layout(location = 2) in highp  vec4 vs_TEXCOORD4;
layout(location = 3) in highp  vec4 vs_TEXCOORD5;
layout(location = 4) in highp  vec3 vs_TEXCOORD7;
layout(location = 5) in highp  vec4 vs_TEXCOORD8;
layout(location = 0) out highp vec4 SV_Target0;
vec4 u_xlat0;
bool u_xlatb0;
vec3 u_xlat1;
vec4 u_xlat2;
vec3 u_xlat3;
vec4 u_xlat4;
vec4 u_xlat5;
bool u_xlatb5;
vec4 u_xlat6;
bvec2 u_xlatb6;
vec4 u_xlat7;
vec4 u_xlat8;
bvec2 u_xlatb8;
vec4 u_xlat9;
vec4 u_xlat10;
vec4 u_xlat11;
vec4 u_xlat12;
bvec4 u_xlatb12;
vec4 u_xlat13;
vec4 u_xlat14;
vec4 u_xlat15;
vec4 u_xlat16;
vec4 u_xlat17;
vec4 u_xlat18;
vec4 u_xlat19;
vec4 u_xlat20;
vec4 u_xlat21;
vec4 u_xlat22;
vec2 u_xlat23;
vec4 u_xlat24;
vec4 u_xlat25;
vec4 u_xlat26;
float u_xlat28;
float u_xlat32;
vec3 u_xlat33;
vec2 u_xlat34;
vec2 u_xlat41;
float u_xlat55;
vec2 u_xlat59;
vec2 u_xlat61;
vec2 u_xlat62;
int u_xlati62;
bool u_xlatb62;
vec2 u_xlat66;
bvec2 u_xlatb66;
vec2 u_xlat67;
vec2 u_xlat69;
vec2 u_xlat70;
vec2 u_xlat73;
float u_xlat81;
uint u_xlatu81;
float u_xlat82;
float u_xlat83;
float u_xlat84;
uint u_xlatu84;
bool u_xlatb84;
float u_xlat85;
int u_xlati85;
uint u_xlatu85;
bool u_xlatb85;
float u_xlat86;
int u_xlati86;
float u_xlat87;
float u_xlat88;
int u_xlati88;
bool u_xlatb88;
float u_xlat89;
int u_xlati89;
bool u_xlatb89;
float u_xlat90;
int u_xlati90;
float u_xlat91;
layout(set = 0, binding = 8) uniform mediump  sampler samplerunity_SpecCube0;
layout(set = 0, binding = 9) uniform mediump  sampler sampler_MainTex;
layout(set = 0, binding = 10) uniform mediump  sampler sampler_MetallicTex;
layout(set = 0, binding = 11) uniform mediump  sampler sampler_TerrainHolesTexture;
layout(set = 0, binding = 12) uniform mediump  sampler sampler_LinearClamp;
layout(set = 0, binding = 13) uniform mediump  samplerShadow sampler_LinearClampCompare;
layout(set = 0, binding = 14) uniform mediump  sampler sampler_MainLightCookieTexture;
void main()
{
    u_xlat0.x = texture(sampler2D(_TerrainHolesTexture, sampler_TerrainHolesTexture), vs_TEXCOORD0.xy, _GlobalMipBias.x).x;
    u_xlatb0 = u_xlat0.x==0.0;
    if(((int(u_xlatb0) * int(0xffffffffu)))!=0){discard;}
    u_xlat0 = texture(sampler2D(_MainTex, sampler_MainTex), vs_TEXCOORD0.xy, _GlobalMipBias.x);
    u_xlat1.x = texture(sampler2D(_MetallicTex, sampler_MetallicTex), vs_TEXCOORD0.xy, _GlobalMipBias.x).x;
    u_xlat28 = dot(vs_TEXCOORD3.xyz, vs_TEXCOORD3.xyz);
    u_xlat28 = inversesqrt(u_xlat28);
    u_xlat2.xyz = vec3(u_xlat28) * vs_TEXCOORD3.xyz;
    u_xlat28 = vs_TEXCOORD7.y * unity_MatrixV[1].z;
    u_xlat28 = unity_MatrixV[0].z * vs_TEXCOORD7.x + u_xlat28;
    u_xlat28 = unity_MatrixV[2].z * vs_TEXCOORD7.z + u_xlat28;
    u_xlat28 = u_xlat28 + unity_MatrixV[3].z;
    u_xlat28 = (-u_xlat28) + (-_ProjectionParams.y);
    u_xlat28 = max(u_xlat28, 0.0);
    u_xlat28 = u_xlat28 * unity_FogParams.x;
    u_xlat2.w = 1.0;
    u_xlat3.x = dot(unity_SHAr, u_xlat2);
    u_xlat3.y = dot(unity_SHAg, u_xlat2);
    u_xlat3.z = dot(unity_SHAb, u_xlat2);
    u_xlat4 = u_xlat2.yzzx * u_xlat2.xyzz;
    u_xlat5.x = dot(unity_SHBr, u_xlat4);
    u_xlat5.y = dot(unity_SHBg, u_xlat4);
    u_xlat5.z = dot(unity_SHBb, u_xlat4);
    u_xlat55 = u_xlat2.y * u_xlat2.y;
    u_xlat55 = u_xlat2.x * u_xlat2.x + (-u_xlat55);
    u_xlat4.xyz = unity_SHC.xyz * vec3(u_xlat55) + u_xlat5.xyz;
    u_xlat3.xyz = u_xlat3.xyz + u_xlat4.xyz;
    u_xlat3.xyz = max(u_xlat3.xyz, vec3(0.0, 0.0, 0.0));
    u_xlat55 = (-u_xlat1.x) * 0.959999979 + 0.959999979;
    u_xlat82 = (-u_xlat55) + 1.0;
    u_xlat4.xyz = u_xlat0.xyz * vec3(u_xlat55);
    u_xlat0.xyz = u_xlat0.xyz + vec3(-0.0399999991, -0.0399999991, -0.0399999991);
    u_xlat0.xyz = u_xlat1.xxx * u_xlat0.xyz + vec3(0.0399999991, 0.0399999991, 0.0399999991);
    u_xlat1.x = (-u_xlat0.w) + 1.0;
    u_xlat55 = u_xlat1.x * u_xlat1.x;
    u_xlat55 = max(u_xlat55, 0.0078125);
    u_xlat83 = u_xlat55 * u_xlat55;
    u_xlat81 = u_xlat0.w + u_xlat82;
    u_xlat81 = clamp(u_xlat81, 0.0, 1.0);
    u_xlat82 = u_xlat55 * 4.0 + 2.0;
    u_xlatb84 = 0.0<_MainLightShadowParams.y;
    if(u_xlatb84){
        u_xlatb84 = _MainLightShadowParams.y==1.0;
        if(u_xlatb84){
            u_xlat5 = vs_TEXCOORD8.xyxy + _MainLightShadowOffset0;
            vec3 txVec0 = vec3(u_xlat5.xy,vs_TEXCOORD8.z);
            u_xlat6.x = textureLod(sampler2DShadow(_MainLightShadowmapTexture, sampler_LinearClampCompare), txVec0, 0.0);
            vec3 txVec1 = vec3(u_xlat5.zw,vs_TEXCOORD8.z);
            u_xlat6.y = textureLod(sampler2DShadow(_MainLightShadowmapTexture, sampler_LinearClampCompare), txVec1, 0.0);
            u_xlat5 = vs_TEXCOORD8.xyxy + _MainLightShadowOffset1;
            vec3 txVec2 = vec3(u_xlat5.xy,vs_TEXCOORD8.z);
            u_xlat6.z = textureLod(sampler2DShadow(_MainLightShadowmapTexture, sampler_LinearClampCompare), txVec2, 0.0);
            vec3 txVec3 = vec3(u_xlat5.zw,vs_TEXCOORD8.z);
            u_xlat6.w = textureLod(sampler2DShadow(_MainLightShadowmapTexture, sampler_LinearClampCompare), txVec3, 0.0);
            u_xlat84 = dot(u_xlat6, vec4(0.25, 0.25, 0.25, 0.25));
        } else {
            u_xlatb85 = _MainLightShadowParams.y==2.0;
            if(u_xlatb85){
                u_xlat5.xy = vs_TEXCOORD8.xy * _MainLightShadowmapSize.zw + vec2(0.5, 0.5);
                u_xlat5.xy = floor(u_xlat5.xy);
                u_xlat59.xy = vs_TEXCOORD8.xy * _MainLightShadowmapSize.zw + (-u_xlat5.xy);
                u_xlat6 = u_xlat59.xxyy + vec4(0.5, 1.0, 0.5, 1.0);
                u_xlat7 = u_xlat6.xxzz * u_xlat6.xxzz;
                u_xlat6.xz = u_xlat7.yw * vec2(0.0799999982, 0.0799999982);
                u_xlat7.xy = u_xlat7.xz * vec2(0.5, 0.5) + (-u_xlat59.xy);
                u_xlat61.xy = (-u_xlat59.xy) + vec2(1.0, 1.0);
                u_xlat8.xy = min(u_xlat59.xy, vec2(0.0, 0.0));
                u_xlat8.xy = (-u_xlat8.xy) * u_xlat8.xy + u_xlat61.xy;
                u_xlat59.xy = max(u_xlat59.xy, vec2(0.0, 0.0));
                u_xlat59.xy = (-u_xlat59.xy) * u_xlat59.xy + u_xlat6.yw;
                u_xlat8.xy = u_xlat8.xy + vec2(1.0, 1.0);
                u_xlat59.xy = u_xlat59.xy + vec2(1.0, 1.0);
                u_xlat9.xy = u_xlat7.xy * vec2(0.159999996, 0.159999996);
                u_xlat7.xy = u_xlat61.xy * vec2(0.159999996, 0.159999996);
                u_xlat8.xy = u_xlat8.xy * vec2(0.159999996, 0.159999996);
                u_xlat10.xy = u_xlat59.xy * vec2(0.159999996, 0.159999996);
                u_xlat59.xy = u_xlat6.yw * vec2(0.159999996, 0.159999996);
                u_xlat9.z = u_xlat8.x;
                u_xlat9.w = u_xlat59.x;
                u_xlat7.z = u_xlat10.x;
                u_xlat7.w = u_xlat6.x;
                u_xlat11 = u_xlat7.zwxz + u_xlat9.zwxz;
                u_xlat8.z = u_xlat9.y;
                u_xlat8.w = u_xlat59.y;
                u_xlat10.z = u_xlat7.y;
                u_xlat10.w = u_xlat6.z;
                u_xlat6.xyz = u_xlat8.zyw + u_xlat10.zyw;
                u_xlat7.xyz = u_xlat7.xzw / u_xlat11.zwy;
                u_xlat7.xyz = u_xlat7.xyz + vec3(-2.5, -0.5, 1.5);
                u_xlat8.xyz = u_xlat10.zyw / u_xlat6.xyz;
                u_xlat8.xyz = u_xlat8.xyz + vec3(-2.5, -0.5, 1.5);
                u_xlat7.xyz = u_xlat7.yxz * _MainLightShadowmapSize.xxx;
                u_xlat8.xyz = u_xlat8.xyz * _MainLightShadowmapSize.yyy;
                u_xlat7.w = u_xlat8.x;
                u_xlat9 = u_xlat5.xyxy * _MainLightShadowmapSize.xyxy + u_xlat7.ywxw;
                u_xlat59.xy = u_xlat5.xy * _MainLightShadowmapSize.xy + u_xlat7.zw;
                u_xlat8.w = u_xlat7.y;
                u_xlat7.yw = u_xlat8.yz;
                u_xlat10 = u_xlat5.xyxy * _MainLightShadowmapSize.xyxy + u_xlat7.xyzy;
                u_xlat8 = u_xlat5.xyxy * _MainLightShadowmapSize.xyxy + u_xlat8.wywz;
                u_xlat7 = u_xlat5.xyxy * _MainLightShadowmapSize.xyxy + u_xlat7.xwzw;
                u_xlat12 = u_xlat6.xxxy * u_xlat11.zwyz;
                u_xlat13 = u_xlat6.yyzz * u_xlat11;
                u_xlat85 = u_xlat6.z * u_xlat11.y;
                vec3 txVec4 = vec3(u_xlat9.xy,vs_TEXCOORD8.z);
                u_xlat5.x = textureLod(sampler2DShadow(_MainLightShadowmapTexture, sampler_LinearClampCompare), txVec4, 0.0);
                vec3 txVec5 = vec3(u_xlat9.zw,vs_TEXCOORD8.z);
                u_xlat32 = textureLod(sampler2DShadow(_MainLightShadowmapTexture, sampler_LinearClampCompare), txVec5, 0.0);
                u_xlat32 = u_xlat32 * u_xlat12.y;
                u_xlat5.x = u_xlat12.x * u_xlat5.x + u_xlat32;
                vec3 txVec6 = vec3(u_xlat59.xy,vs_TEXCOORD8.z);
                u_xlat32 = textureLod(sampler2DShadow(_MainLightShadowmapTexture, sampler_LinearClampCompare), txVec6, 0.0);
                u_xlat5.x = u_xlat12.z * u_xlat32 + u_xlat5.x;
                vec3 txVec7 = vec3(u_xlat8.xy,vs_TEXCOORD8.z);
                u_xlat32 = textureLod(sampler2DShadow(_MainLightShadowmapTexture, sampler_LinearClampCompare), txVec7, 0.0);
                u_xlat5.x = u_xlat12.w * u_xlat32 + u_xlat5.x;
                vec3 txVec8 = vec3(u_xlat10.xy,vs_TEXCOORD8.z);
                u_xlat32 = textureLod(sampler2DShadow(_MainLightShadowmapTexture, sampler_LinearClampCompare), txVec8, 0.0);
                u_xlat5.x = u_xlat13.x * u_xlat32 + u_xlat5.x;
                vec3 txVec9 = vec3(u_xlat10.zw,vs_TEXCOORD8.z);
                u_xlat32 = textureLod(sampler2DShadow(_MainLightShadowmapTexture, sampler_LinearClampCompare), txVec9, 0.0);
                u_xlat5.x = u_xlat13.y * u_xlat32 + u_xlat5.x;
                vec3 txVec10 = vec3(u_xlat8.zw,vs_TEXCOORD8.z);
                u_xlat32 = textureLod(sampler2DShadow(_MainLightShadowmapTexture, sampler_LinearClampCompare), txVec10, 0.0);
                u_xlat5.x = u_xlat13.z * u_xlat32 + u_xlat5.x;
                vec3 txVec11 = vec3(u_xlat7.xy,vs_TEXCOORD8.z);
                u_xlat32 = textureLod(sampler2DShadow(_MainLightShadowmapTexture, sampler_LinearClampCompare), txVec11, 0.0);
                u_xlat5.x = u_xlat13.w * u_xlat32 + u_xlat5.x;
                vec3 txVec12 = vec3(u_xlat7.zw,vs_TEXCOORD8.z);
                u_xlat32 = textureLod(sampler2DShadow(_MainLightShadowmapTexture, sampler_LinearClampCompare), txVec12, 0.0);
                u_xlat84 = u_xlat85 * u_xlat32 + u_xlat5.x;
            } else {
                u_xlat5.xy = vs_TEXCOORD8.xy * _MainLightShadowmapSize.zw + vec2(0.5, 0.5);
                u_xlat5.xy = floor(u_xlat5.xy);
                u_xlat59.xy = vs_TEXCOORD8.xy * _MainLightShadowmapSize.zw + (-u_xlat5.xy);
                u_xlat6 = u_xlat59.xxyy + vec4(0.5, 1.0, 0.5, 1.0);
                u_xlat7 = u_xlat6.xxzz * u_xlat6.xxzz;
                u_xlat8.yw = u_xlat7.yw * vec2(0.0408160016, 0.0408160016);
                u_xlat6.xz = u_xlat7.xz * vec2(0.5, 0.5) + (-u_xlat59.xy);
                u_xlat7.xy = (-u_xlat59.xy) + vec2(1.0, 1.0);
                u_xlat61.xy = min(u_xlat59.xy, vec2(0.0, 0.0));
                u_xlat7.xy = (-u_xlat61.xy) * u_xlat61.xy + u_xlat7.xy;
                u_xlat61.xy = max(u_xlat59.xy, vec2(0.0, 0.0));
                u_xlat33.xz = (-u_xlat61.xy) * u_xlat61.xy + u_xlat6.yw;
                u_xlat7.xy = u_xlat7.xy + vec2(2.0, 2.0);
                u_xlat6.yw = u_xlat33.xz + vec2(2.0, 2.0);
                u_xlat9.z = u_xlat6.y * 0.0816320032;
                u_xlat10.xyz = u_xlat6.zxw * vec3(0.0816320032, 0.0816320032, 0.0816320032);
                u_xlat6.xy = u_xlat7.xy * vec2(0.0816320032, 0.0816320032);
                u_xlat9.x = u_xlat10.y;
                u_xlat9.yw = u_xlat59.xx * vec2(-0.0816320032, 0.0816320032) + vec2(0.163264006, 0.0816320032);
                u_xlat7.xz = u_xlat59.xx * vec2(-0.0816320032, 0.0816320032) + vec2(0.0816320032, 0.163264006);
                u_xlat7.y = u_xlat6.x;
                u_xlat7.w = u_xlat8.y;
                u_xlat9 = u_xlat7 + u_xlat9;
                u_xlat10.yw = u_xlat59.yy * vec2(-0.0816320032, 0.0816320032) + vec2(0.163264006, 0.0816320032);
                u_xlat8.xz = u_xlat59.yy * vec2(-0.0816320032, 0.0816320032) + vec2(0.0816320032, 0.163264006);
                u_xlat8.y = u_xlat6.y;
                u_xlat6 = u_xlat8 + u_xlat10;
                u_xlat7 = u_xlat7 / u_xlat9;
                u_xlat7 = u_xlat7 + vec4(-3.5, -1.5, 0.5, 2.5);
                u_xlat8 = u_xlat8 / u_xlat6;
                u_xlat8 = u_xlat8 + vec4(-3.5, -1.5, 0.5, 2.5);
                u_xlat7 = u_xlat7.wxyz * _MainLightShadowmapSize.xxxx;
                u_xlat8 = u_xlat8.xwyz * _MainLightShadowmapSize.yyyy;
                u_xlat10.xzw = u_xlat7.yzw;
                u_xlat10.y = u_xlat8.x;
                u_xlat11 = u_xlat5.xyxy * _MainLightShadowmapSize.xyxy + u_xlat10.xyzy;
                u_xlat59.xy = u_xlat5.xy * _MainLightShadowmapSize.xy + u_xlat10.wy;
                u_xlat7.y = u_xlat10.y;
                u_xlat10.y = u_xlat8.z;
                u_xlat12 = u_xlat5.xyxy * _MainLightShadowmapSize.xyxy + u_xlat10.xyzy;
                u_xlat13.xy = u_xlat5.xy * _MainLightShadowmapSize.xy + u_xlat10.wy;
                u_xlat7.z = u_xlat10.y;
                u_xlat14 = u_xlat5.xyxy * _MainLightShadowmapSize.xyxy + u_xlat7.xyxz;
                u_xlat10.y = u_xlat8.w;
                u_xlat15 = u_xlat5.xyxy * _MainLightShadowmapSize.xyxy + u_xlat10.xyzy;
                u_xlat34.xy = u_xlat5.xy * _MainLightShadowmapSize.xy + u_xlat10.wy;
                u_xlat7.w = u_xlat10.y;
                u_xlat67.xy = u_xlat5.xy * _MainLightShadowmapSize.xy + u_xlat7.xw;
                u_xlat8.xzw = u_xlat10.xzw;
                u_xlat10 = u_xlat5.xyxy * _MainLightShadowmapSize.xyxy + u_xlat8.xyzy;
                u_xlat62.xy = u_xlat5.xy * _MainLightShadowmapSize.xy + u_xlat8.wy;
                u_xlat8.x = u_xlat7.x;
                u_xlat5.xy = u_xlat5.xy * _MainLightShadowmapSize.xy + u_xlat8.xy;
                u_xlat16 = u_xlat6.xxxx * u_xlat9;
                u_xlat17 = u_xlat6.yyyy * u_xlat9;
                u_xlat18 = u_xlat6.zzzz * u_xlat9;
                u_xlat6 = u_xlat6.wwww * u_xlat9;
                vec3 txVec13 = vec3(u_xlat11.xy,vs_TEXCOORD8.z);
                u_xlat85 = textureLod(sampler2DShadow(_MainLightShadowmapTexture, sampler_LinearClampCompare), txVec13, 0.0);
                vec3 txVec14 = vec3(u_xlat11.zw,vs_TEXCOORD8.z);
                u_xlat7.x = textureLod(sampler2DShadow(_MainLightShadowmapTexture, sampler_LinearClampCompare), txVec14, 0.0);
                u_xlat7.x = u_xlat7.x * u_xlat16.y;
                u_xlat85 = u_xlat16.x * u_xlat85 + u_xlat7.x;
                vec3 txVec15 = vec3(u_xlat59.xy,vs_TEXCOORD8.z);
                u_xlat59.x = textureLod(sampler2DShadow(_MainLightShadowmapTexture, sampler_LinearClampCompare), txVec15, 0.0);
                u_xlat85 = u_xlat16.z * u_xlat59.x + u_xlat85;
                vec3 txVec16 = vec3(u_xlat14.xy,vs_TEXCOORD8.z);
                u_xlat59.x = textureLod(sampler2DShadow(_MainLightShadowmapTexture, sampler_LinearClampCompare), txVec16, 0.0);
                u_xlat85 = u_xlat16.w * u_xlat59.x + u_xlat85;
                vec3 txVec17 = vec3(u_xlat12.xy,vs_TEXCOORD8.z);
                u_xlat59.x = textureLod(sampler2DShadow(_MainLightShadowmapTexture, sampler_LinearClampCompare), txVec17, 0.0);
                u_xlat85 = u_xlat17.x * u_xlat59.x + u_xlat85;
                vec3 txVec18 = vec3(u_xlat12.zw,vs_TEXCOORD8.z);
                u_xlat59.x = textureLod(sampler2DShadow(_MainLightShadowmapTexture, sampler_LinearClampCompare), txVec18, 0.0);
                u_xlat85 = u_xlat17.y * u_xlat59.x + u_xlat85;
                vec3 txVec19 = vec3(u_xlat13.xy,vs_TEXCOORD8.z);
                u_xlat59.x = textureLod(sampler2DShadow(_MainLightShadowmapTexture, sampler_LinearClampCompare), txVec19, 0.0);
                u_xlat85 = u_xlat17.z * u_xlat59.x + u_xlat85;
                vec3 txVec20 = vec3(u_xlat14.zw,vs_TEXCOORD8.z);
                u_xlat59.x = textureLod(sampler2DShadow(_MainLightShadowmapTexture, sampler_LinearClampCompare), txVec20, 0.0);
                u_xlat85 = u_xlat17.w * u_xlat59.x + u_xlat85;
                vec3 txVec21 = vec3(u_xlat15.xy,vs_TEXCOORD8.z);
                u_xlat59.x = textureLod(sampler2DShadow(_MainLightShadowmapTexture, sampler_LinearClampCompare), txVec21, 0.0);
                u_xlat85 = u_xlat18.x * u_xlat59.x + u_xlat85;
                vec3 txVec22 = vec3(u_xlat15.zw,vs_TEXCOORD8.z);
                u_xlat59.x = textureLod(sampler2DShadow(_MainLightShadowmapTexture, sampler_LinearClampCompare), txVec22, 0.0);
                u_xlat85 = u_xlat18.y * u_xlat59.x + u_xlat85;
                vec3 txVec23 = vec3(u_xlat34.xy,vs_TEXCOORD8.z);
                u_xlat59.x = textureLod(sampler2DShadow(_MainLightShadowmapTexture, sampler_LinearClampCompare), txVec23, 0.0);
                u_xlat85 = u_xlat18.z * u_xlat59.x + u_xlat85;
                vec3 txVec24 = vec3(u_xlat67.xy,vs_TEXCOORD8.z);
                u_xlat59.x = textureLod(sampler2DShadow(_MainLightShadowmapTexture, sampler_LinearClampCompare), txVec24, 0.0);
                u_xlat85 = u_xlat18.w * u_xlat59.x + u_xlat85;
                vec3 txVec25 = vec3(u_xlat10.xy,vs_TEXCOORD8.z);
                u_xlat59.x = textureLod(sampler2DShadow(_MainLightShadowmapTexture, sampler_LinearClampCompare), txVec25, 0.0);
                u_xlat85 = u_xlat6.x * u_xlat59.x + u_xlat85;
                vec3 txVec26 = vec3(u_xlat10.zw,vs_TEXCOORD8.z);
                u_xlat59.x = textureLod(sampler2DShadow(_MainLightShadowmapTexture, sampler_LinearClampCompare), txVec26, 0.0);
                u_xlat85 = u_xlat6.y * u_xlat59.x + u_xlat85;
                vec3 txVec27 = vec3(u_xlat62.xy,vs_TEXCOORD8.z);
                u_xlat59.x = textureLod(sampler2DShadow(_MainLightShadowmapTexture, sampler_LinearClampCompare), txVec27, 0.0);
                u_xlat85 = u_xlat6.z * u_xlat59.x + u_xlat85;
                vec3 txVec28 = vec3(u_xlat5.xy,vs_TEXCOORD8.z);
                u_xlat5.x = textureLod(sampler2DShadow(_MainLightShadowmapTexture, sampler_LinearClampCompare), txVec28, 0.0);
                u_xlat84 = u_xlat6.w * u_xlat5.x + u_xlat85;
            }
        }
    } else {
        vec3 txVec29 = vec3(vs_TEXCOORD8.xy,vs_TEXCOORD8.z);
        u_xlat84 = textureLod(sampler2DShadow(_MainLightShadowmapTexture, sampler_LinearClampCompare), txVec29, 0.0);
    }
    u_xlat85 = (-_MainLightShadowParams.x) + 1.0;
    u_xlat84 = u_xlat84 * _MainLightShadowParams.x + u_xlat85;
    u_xlatb85 = 0.0>=vs_TEXCOORD8.z;
    u_xlatb5 = vs_TEXCOORD8.z>=1.0;
    u_xlatb85 = u_xlatb85 || u_xlatb5;
    u_xlat84 = (u_xlatb85) ? 1.0 : u_xlat84;
    u_xlat5.xyz = vs_TEXCOORD7.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat85 = dot(u_xlat5.xyz, u_xlat5.xyz);
    u_xlat5.x = u_xlat85 * _MainLightShadowParams.z + _MainLightShadowParams.w;
    u_xlat5.x = clamp(u_xlat5.x, 0.0, 1.0);
    u_xlat32 = (-u_xlat84) + 1.0;
    u_xlat84 = u_xlat5.x * u_xlat32 + u_xlat84;
    u_xlatb5 = _MainLightCookieTextureFormat!=-1.0;
    if(u_xlatb5){
        u_xlat5.xy = vs_TEXCOORD7.yy * _MainLightWorldToLight[1].xy;
        u_xlat5.xy = _MainLightWorldToLight[0].xy * vs_TEXCOORD7.xx + u_xlat5.xy;
        u_xlat5.xy = _MainLightWorldToLight[2].xy * vs_TEXCOORD7.zz + u_xlat5.xy;
        u_xlat5.xy = u_xlat5.xy + _MainLightWorldToLight[3].xy;
        u_xlat5.xy = u_xlat5.xy * vec2(0.5, 0.5) + vec2(0.5, 0.5);
        u_xlat5 = texture(sampler2D(_MainLightCookieTexture, sampler_MainLightCookieTexture), u_xlat5.xy, _GlobalMipBias.x);
        u_xlatb6.xy = equal(vec4(vec4(_MainLightCookieTextureFormat, _MainLightCookieTextureFormat, _MainLightCookieTextureFormat, _MainLightCookieTextureFormat)), vec4(0.0, 1.0, 0.0, 0.0)).xy;
        u_xlat86 = (u_xlatb6.y) ? u_xlat5.w : u_xlat5.x;
        u_xlat5.xyz = (u_xlatb6.x) ? u_xlat5.xyz : vec3(u_xlat86);
    } else {
        u_xlat5.x = float(1.0);
        u_xlat5.y = float(1.0);
        u_xlat5.z = float(1.0);
    }
    u_xlat5.xyz = u_xlat5.xyz * _MainLightColor.xyz;
    u_xlat6.x = vs_TEXCOORD3.w;
    u_xlat6.y = vs_TEXCOORD4.w;
    u_xlat6.z = vs_TEXCOORD5.w;
    u_xlat86 = dot((-u_xlat6.xyz), u_xlat2.xyz);
    u_xlat86 = u_xlat86 + u_xlat86;
    u_xlat7.xyz = u_xlat2.xyz * (-vec3(u_xlat86)) + (-u_xlat6.xyz);
    u_xlat86 = dot(u_xlat2.xyz, u_xlat6.xyz);
    u_xlat86 = clamp(u_xlat86, 0.0, 1.0);
    u_xlat86 = (-u_xlat86) + 1.0;
    u_xlat86 = u_xlat86 * u_xlat86;
    u_xlat86 = u_xlat86 * u_xlat86;
    u_xlat87 = (-u_xlat1.x) * 0.699999988 + 1.70000005;
    u_xlat1.x = u_xlat1.x * u_xlat87;
    u_xlat1.x = u_xlat1.x * 6.0;
    u_xlat7 = textureLod(samplerCube(unity_SpecCube0, samplerunity_SpecCube0), u_xlat7.xyz, u_xlat1.x);
    u_xlat1.x = u_xlat7.w + -1.0;
    u_xlat1.x = unity_SpecCube0_HDR.w * u_xlat1.x + 1.0;
    u_xlat1.x = max(u_xlat1.x, 0.0);
    u_xlat1.x = log2(u_xlat1.x);
    u_xlat1.x = u_xlat1.x * unity_SpecCube0_HDR.y;
    u_xlat1.x = exp2(u_xlat1.x);
    u_xlat1.x = u_xlat1.x * unity_SpecCube0_HDR.x;
    u_xlat7.xyz = u_xlat7.xyz * u_xlat1.xxx;
    u_xlat1.xz = vec2(u_xlat55) * vec2(u_xlat55) + vec2(-1.0, 1.0);
    u_xlat55 = float(1.0) / u_xlat1.z;
    u_xlat8.xyz = (-u_xlat0.xyz) + vec3(u_xlat81);
    u_xlat8.xyz = vec3(u_xlat86) * u_xlat8.xyz + u_xlat0.xyz;
    u_xlat8.xyz = vec3(u_xlat55) * u_xlat8.xyz;
    u_xlat7.xyz = u_xlat7.xyz * u_xlat8.xyz;
    u_xlat3.xyz = u_xlat3.xyz * u_xlat4.xyz + u_xlat7.xyz;
    u_xlat81 = u_xlat84 * unity_LightData.z;
    u_xlat55 = dot(u_xlat2.xyz, _MainLightPosition.xyz);
    u_xlat55 = clamp(u_xlat55, 0.0, 1.0);
    u_xlat81 = u_xlat81 * u_xlat55;
    u_xlat5.xyz = vec3(u_xlat81) * u_xlat5.xyz;
    u_xlat7.xyz = u_xlat6.xyz + _MainLightPosition.xyz;
    u_xlat81 = dot(u_xlat7.xyz, u_xlat7.xyz);
    u_xlat81 = max(u_xlat81, 1.17549435e-38);
    u_xlat81 = inversesqrt(u_xlat81);
    u_xlat7.xyz = vec3(u_xlat81) * u_xlat7.xyz;
    u_xlat81 = dot(u_xlat2.xyz, u_xlat7.xyz);
    u_xlat81 = clamp(u_xlat81, 0.0, 1.0);
    u_xlat55 = dot(_MainLightPosition.xyz, u_xlat7.xyz);
    u_xlat55 = clamp(u_xlat55, 0.0, 1.0);
    u_xlat81 = u_xlat81 * u_xlat81;
    u_xlat81 = u_xlat81 * u_xlat1.x + 1.00001001;
    u_xlat55 = u_xlat55 * u_xlat55;
    u_xlat81 = u_xlat81 * u_xlat81;
    u_xlat55 = max(u_xlat55, 0.100000001);
    u_xlat81 = u_xlat81 * u_xlat55;
    u_xlat81 = u_xlat82 * u_xlat81;
    u_xlat81 = u_xlat83 / u_xlat81;
    u_xlat7.xyz = u_xlat0.xyz * vec3(u_xlat81) + u_xlat4.xyz;
    u_xlat81 = min(_AdditionalLightsCount.x, unity_LightData.y);
    u_xlatu81 =  uint(int(u_xlat81));
    u_xlat55 = u_xlat85 * _AdditionalShadowFadeParams.x + _AdditionalShadowFadeParams.y;
    u_xlat55 = clamp(u_xlat55, 0.0, 1.0);
    u_xlatb8.xy = equal(vec4(vec4(_AdditionalLightsCookieAtlasTextureFormat, _AdditionalLightsCookieAtlasTextureFormat, _AdditionalLightsCookieAtlasTextureFormat, _AdditionalLightsCookieAtlasTextureFormat)), vec4(0.0, 1.0, 0.0, 0.0)).xy;
    u_xlat9.x = float(0.0);
    u_xlat9.y = float(0.0);
    u_xlat9.z = float(0.0);
    for(uint u_xlatu_loop_1 = 0u ; u_xlatu_loop_1<u_xlatu81 ; u_xlatu_loop_1++)
    {
        u_xlatu85 = u_xlatu_loop_1 >> (2u & uint(0x1F));
        u_xlati86 = int(u_xlatu_loop_1 & 3u);
        u_xlat85 = dot(unity_LightIndices[int(u_xlatu85)], uintBitsToFloat(ImmCB_0[u_xlati86]));
        u_xlati85 = int(u_xlat85);
        u_xlat10.xyz = (-vs_TEXCOORD7.xyz) * _AdditionalLightsPosition[u_xlati85].www + _AdditionalLightsPosition[u_xlati85].xyz;
        u_xlat86 = dot(u_xlat10.xyz, u_xlat10.xyz);
        u_xlat86 = max(u_xlat86, 6.10351562e-05);
        u_xlat87 = inversesqrt(u_xlat86);
        u_xlat11.xyz = vec3(u_xlat87) * u_xlat10.xyz;
        u_xlat88 = float(1.0) / float(u_xlat86);
        u_xlat86 = u_xlat86 * _AdditionalLightsAttenuation[u_xlati85].x;
        u_xlat86 = (-u_xlat86) * u_xlat86 + 1.0;
        u_xlat86 = max(u_xlat86, 0.0);
        u_xlat86 = u_xlat86 * u_xlat86;
        u_xlat86 = u_xlat86 * u_xlat88;
        u_xlat88 = dot(_AdditionalLightsSpotDir[u_xlati85].xyz, u_xlat11.xyz);
        u_xlat88 = u_xlat88 * _AdditionalLightsAttenuation[u_xlati85].z + _AdditionalLightsAttenuation[u_xlati85].w;
        u_xlat88 = clamp(u_xlat88, 0.0, 1.0);
        u_xlat88 = u_xlat88 * u_xlat88;
        u_xlat86 = u_xlat86 * u_xlat88;
        u_xlati88 = int(_AdditionalShadowParams[u_xlati85].w);
        u_xlatb62 = u_xlati88>=0;
        if(u_xlatb62){
            u_xlatb62 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_AdditionalShadowParams[u_xlati85].z);
            if(u_xlatb62){
                u_xlatb12.xyz = greaterThanEqual(abs(u_xlat11.zzyz), abs(u_xlat11.xyxx)).xyz;
                u_xlatb62 = u_xlatb12.y && u_xlatb12.x;
                u_xlatb12.xyw = lessThan((-u_xlat11.zyzx), vec4(0.0, 0.0, 0.0, 0.0)).xyw;
                u_xlat12.x = (u_xlatb12.x) ? float(5.0) : float(4.0);
                u_xlat12.y = (u_xlatb12.y) ? float(3.0) : float(2.0);
                u_xlat89 = u_xlatb12.w ? 1.0 : float(0.0);
                u_xlat89 = (u_xlatb12.z) ? u_xlat12.y : u_xlat89;
                u_xlat62.x = (u_xlatb62) ? u_xlat12.x : u_xlat89;
                u_xlat89 = trunc(_AdditionalShadowParams[u_xlati85].w);
                u_xlat62.x = u_xlat62.x + u_xlat89;
                u_xlati88 = int(u_xlat62.x);
            }
            u_xlati88 = u_xlati88 << (2 & int(0x1F));
            u_xlat12 = vs_TEXCOORD7.yyyy * _AdditionalLightsWorldToShadow[(u_xlati88 + 1) / 4][(u_xlati88 + 1) % 4];
            u_xlat12 = _AdditionalLightsWorldToShadow[u_xlati88 / 4][u_xlati88 % 4] * vs_TEXCOORD7.xxxx + u_xlat12;
            u_xlat12 = _AdditionalLightsWorldToShadow[(u_xlati88 + 2) / 4][(u_xlati88 + 2) % 4] * vs_TEXCOORD7.zzzz + u_xlat12;
            u_xlat12 = u_xlat12 + _AdditionalLightsWorldToShadow[(u_xlati88 + 3) / 4][(u_xlati88 + 3) % 4];
            u_xlat12.xyz = u_xlat12.xyz / u_xlat12.www;
            u_xlatb88 = 0.0<_AdditionalShadowParams[u_xlati85].y;
            if(u_xlatb88){
                u_xlatb88 = 1.0==_AdditionalShadowParams[u_xlati85].y;
                if(u_xlatb88){
                    u_xlat13 = u_xlat12.xyxy + _AdditionalShadowOffset0;
                    vec3 txVec30 = vec3(u_xlat13.xy,u_xlat12.z);
                    u_xlat14.x = textureLod(sampler2DShadow(_AdditionalLightsShadowmapTexture, sampler_LinearClampCompare), txVec30, 0.0);
                    vec3 txVec31 = vec3(u_xlat13.zw,u_xlat12.z);
                    u_xlat14.y = textureLod(sampler2DShadow(_AdditionalLightsShadowmapTexture, sampler_LinearClampCompare), txVec31, 0.0);
                    u_xlat13 = u_xlat12.xyxy + _AdditionalShadowOffset1;
                    vec3 txVec32 = vec3(u_xlat13.xy,u_xlat12.z);
                    u_xlat14.z = textureLod(sampler2DShadow(_AdditionalLightsShadowmapTexture, sampler_LinearClampCompare), txVec32, 0.0);
                    vec3 txVec33 = vec3(u_xlat13.zw,u_xlat12.z);
                    u_xlat14.w = textureLod(sampler2DShadow(_AdditionalLightsShadowmapTexture, sampler_LinearClampCompare), txVec33, 0.0);
                    u_xlat88 = dot(u_xlat14, vec4(0.25, 0.25, 0.25, 0.25));
                } else {
                    u_xlatb62 = 2.0==_AdditionalShadowParams[u_xlati85].y;
                    if(u_xlatb62){
                        u_xlat62.xy = u_xlat12.xy * _AdditionalShadowmapSize.zw + vec2(0.5, 0.5);
                        u_xlat62.xy = floor(u_xlat62.xy);
                        u_xlat13.xy = u_xlat12.xy * _AdditionalShadowmapSize.zw + (-u_xlat62.xy);
                        u_xlat14 = u_xlat13.xxyy + vec4(0.5, 1.0, 0.5, 1.0);
                        u_xlat15 = u_xlat14.xxzz * u_xlat14.xxzz;
                        u_xlat67.xy = u_xlat15.yw * vec2(0.0799999982, 0.0799999982);
                        u_xlat14.xz = u_xlat15.xz * vec2(0.5, 0.5) + (-u_xlat13.xy);
                        u_xlat15.xy = (-u_xlat13.xy) + vec2(1.0, 1.0);
                        u_xlat69.xy = min(u_xlat13.xy, vec2(0.0, 0.0));
                        u_xlat69.xy = (-u_xlat69.xy) * u_xlat69.xy + u_xlat15.xy;
                        u_xlat13.xy = max(u_xlat13.xy, vec2(0.0, 0.0));
                        u_xlat13.xy = (-u_xlat13.xy) * u_xlat13.xy + u_xlat14.yw;
                        u_xlat69.xy = u_xlat69.xy + vec2(1.0, 1.0);
                        u_xlat13.xy = u_xlat13.xy + vec2(1.0, 1.0);
                        u_xlat16.xy = u_xlat14.xz * vec2(0.159999996, 0.159999996);
                        u_xlat17.xy = u_xlat15.xy * vec2(0.159999996, 0.159999996);
                        u_xlat15.xy = u_xlat69.xy * vec2(0.159999996, 0.159999996);
                        u_xlat18.xy = u_xlat13.xy * vec2(0.159999996, 0.159999996);
                        u_xlat13.xy = u_xlat14.yw * vec2(0.159999996, 0.159999996);
                        u_xlat16.z = u_xlat15.x;
                        u_xlat16.w = u_xlat13.x;
                        u_xlat17.z = u_xlat18.x;
                        u_xlat17.w = u_xlat67.x;
                        u_xlat14 = u_xlat16.zwxz + u_xlat17.zwxz;
                        u_xlat15.z = u_xlat16.y;
                        u_xlat15.w = u_xlat13.y;
                        u_xlat18.z = u_xlat17.y;
                        u_xlat18.w = u_xlat67.y;
                        u_xlat13.xyz = u_xlat15.zyw + u_xlat18.zyw;
                        u_xlat15.xyz = u_xlat17.xzw / u_xlat14.zwy;
                        u_xlat15.xyz = u_xlat15.xyz + vec3(-2.5, -0.5, 1.5);
                        u_xlat16.xyz = u_xlat18.zyw / u_xlat13.xyz;
                        u_xlat16.xyz = u_xlat16.xyz + vec3(-2.5, -0.5, 1.5);
                        u_xlat15.xyz = u_xlat15.yxz * _AdditionalShadowmapSize.xxx;
                        u_xlat16.xyz = u_xlat16.xyz * _AdditionalShadowmapSize.yyy;
                        u_xlat15.w = u_xlat16.x;
                        u_xlat17 = u_xlat62.xyxy * _AdditionalShadowmapSize.xyxy + u_xlat15.ywxw;
                        u_xlat18.xy = u_xlat62.xy * _AdditionalShadowmapSize.xy + u_xlat15.zw;
                        u_xlat16.w = u_xlat15.y;
                        u_xlat15.yw = u_xlat16.yz;
                        u_xlat19 = u_xlat62.xyxy * _AdditionalShadowmapSize.xyxy + u_xlat15.xyzy;
                        u_xlat16 = u_xlat62.xyxy * _AdditionalShadowmapSize.xyxy + u_xlat16.wywz;
                        u_xlat15 = u_xlat62.xyxy * _AdditionalShadowmapSize.xyxy + u_xlat15.xwzw;
                        u_xlat20 = u_xlat13.xxxy * u_xlat14.zwyz;
                        u_xlat21 = u_xlat13.yyzz * u_xlat14;
                        u_xlat62.x = u_xlat13.z * u_xlat14.y;
                        vec3 txVec34 = vec3(u_xlat17.xy,u_xlat12.z);
                        u_xlat89 = textureLod(sampler2DShadow(_AdditionalLightsShadowmapTexture, sampler_LinearClampCompare), txVec34, 0.0);
                        vec3 txVec35 = vec3(u_xlat17.zw,u_xlat12.z);
                        u_xlat90 = textureLod(sampler2DShadow(_AdditionalLightsShadowmapTexture, sampler_LinearClampCompare), txVec35, 0.0);
                        u_xlat90 = u_xlat90 * u_xlat20.y;
                        u_xlat89 = u_xlat20.x * u_xlat89 + u_xlat90;
                        vec3 txVec36 = vec3(u_xlat18.xy,u_xlat12.z);
                        u_xlat90 = textureLod(sampler2DShadow(_AdditionalLightsShadowmapTexture, sampler_LinearClampCompare), txVec36, 0.0);
                        u_xlat89 = u_xlat20.z * u_xlat90 + u_xlat89;
                        vec3 txVec37 = vec3(u_xlat16.xy,u_xlat12.z);
                        u_xlat90 = textureLod(sampler2DShadow(_AdditionalLightsShadowmapTexture, sampler_LinearClampCompare), txVec37, 0.0);
                        u_xlat89 = u_xlat20.w * u_xlat90 + u_xlat89;
                        vec3 txVec38 = vec3(u_xlat19.xy,u_xlat12.z);
                        u_xlat90 = textureLod(sampler2DShadow(_AdditionalLightsShadowmapTexture, sampler_LinearClampCompare), txVec38, 0.0);
                        u_xlat89 = u_xlat21.x * u_xlat90 + u_xlat89;
                        vec3 txVec39 = vec3(u_xlat19.zw,u_xlat12.z);
                        u_xlat90 = textureLod(sampler2DShadow(_AdditionalLightsShadowmapTexture, sampler_LinearClampCompare), txVec39, 0.0);
                        u_xlat89 = u_xlat21.y * u_xlat90 + u_xlat89;
                        vec3 txVec40 = vec3(u_xlat16.zw,u_xlat12.z);
                        u_xlat90 = textureLod(sampler2DShadow(_AdditionalLightsShadowmapTexture, sampler_LinearClampCompare), txVec40, 0.0);
                        u_xlat89 = u_xlat21.z * u_xlat90 + u_xlat89;
                        vec3 txVec41 = vec3(u_xlat15.xy,u_xlat12.z);
                        u_xlat90 = textureLod(sampler2DShadow(_AdditionalLightsShadowmapTexture, sampler_LinearClampCompare), txVec41, 0.0);
                        u_xlat89 = u_xlat21.w * u_xlat90 + u_xlat89;
                        vec3 txVec42 = vec3(u_xlat15.zw,u_xlat12.z);
                        u_xlat90 = textureLod(sampler2DShadow(_AdditionalLightsShadowmapTexture, sampler_LinearClampCompare), txVec42, 0.0);
                        u_xlat88 = u_xlat62.x * u_xlat90 + u_xlat89;
                    } else {
                        u_xlat62.xy = u_xlat12.xy * _AdditionalShadowmapSize.zw + vec2(0.5, 0.5);
                        u_xlat62.xy = floor(u_xlat62.xy);
                        u_xlat13.xy = u_xlat12.xy * _AdditionalShadowmapSize.zw + (-u_xlat62.xy);
                        u_xlat14 = u_xlat13.xxyy + vec4(0.5, 1.0, 0.5, 1.0);
                        u_xlat15 = u_xlat14.xxzz * u_xlat14.xxzz;
                        u_xlat16.yw = u_xlat15.yw * vec2(0.0408160016, 0.0408160016);
                        u_xlat67.xy = u_xlat15.xz * vec2(0.5, 0.5) + (-u_xlat13.xy);
                        u_xlat14.xz = (-u_xlat13.xy) + vec2(1.0, 1.0);
                        u_xlat15.xy = min(u_xlat13.xy, vec2(0.0, 0.0));
                        u_xlat14.xz = (-u_xlat15.xy) * u_xlat15.xy + u_xlat14.xz;
                        u_xlat15.xy = max(u_xlat13.xy, vec2(0.0, 0.0));
                        u_xlat14.yw = (-u_xlat15.xy) * u_xlat15.xy + u_xlat14.yw;
                        u_xlat14 = u_xlat14 + vec4(2.0, 2.0, 2.0, 2.0);
                        u_xlat15.z = u_xlat14.y * 0.0816320032;
                        u_xlat17.xy = u_xlat67.yx * vec2(0.0816320032, 0.0816320032);
                        u_xlat67.xy = u_xlat14.xz * vec2(0.0816320032, 0.0816320032);
                        u_xlat17.z = u_xlat14.w * 0.0816320032;
                        u_xlat15.x = u_xlat17.y;
                        u_xlat15.yw = u_xlat13.xx * vec2(-0.0816320032, 0.0816320032) + vec2(0.163264006, 0.0816320032);
                        u_xlat14.xz = u_xlat13.xx * vec2(-0.0816320032, 0.0816320032) + vec2(0.0816320032, 0.163264006);
                        u_xlat14.y = u_xlat67.x;
                        u_xlat14.w = u_xlat16.y;
                        u_xlat15 = u_xlat14 + u_xlat15;
                        u_xlat17.yw = u_xlat13.yy * vec2(-0.0816320032, 0.0816320032) + vec2(0.163264006, 0.0816320032);
                        u_xlat16.xz = u_xlat13.yy * vec2(-0.0816320032, 0.0816320032) + vec2(0.0816320032, 0.163264006);
                        u_xlat16.y = u_xlat67.y;
                        u_xlat13 = u_xlat16 + u_xlat17;
                        u_xlat14 = u_xlat14 / u_xlat15;
                        u_xlat14 = u_xlat14 + vec4(-3.5, -1.5, 0.5, 2.5);
                        u_xlat16 = u_xlat16 / u_xlat13;
                        u_xlat16 = u_xlat16 + vec4(-3.5, -1.5, 0.5, 2.5);
                        u_xlat14 = u_xlat14.wxyz * _AdditionalShadowmapSize.xxxx;
                        u_xlat16 = u_xlat16.xwyz * _AdditionalShadowmapSize.yyyy;
                        u_xlat17.xzw = u_xlat14.yzw;
                        u_xlat17.y = u_xlat16.x;
                        u_xlat18 = u_xlat62.xyxy * _AdditionalShadowmapSize.xyxy + u_xlat17.xyzy;
                        u_xlat19.xy = u_xlat62.xy * _AdditionalShadowmapSize.xy + u_xlat17.wy;
                        u_xlat14.y = u_xlat17.y;
                        u_xlat17.y = u_xlat16.z;
                        u_xlat20 = u_xlat62.xyxy * _AdditionalShadowmapSize.xyxy + u_xlat17.xyzy;
                        u_xlat73.xy = u_xlat62.xy * _AdditionalShadowmapSize.xy + u_xlat17.wy;
                        u_xlat14.z = u_xlat17.y;
                        u_xlat21 = u_xlat62.xyxy * _AdditionalShadowmapSize.xyxy + u_xlat14.xyxz;
                        u_xlat17.y = u_xlat16.w;
                        u_xlat22 = u_xlat62.xyxy * _AdditionalShadowmapSize.xyxy + u_xlat17.xyzy;
                        u_xlat41.xy = u_xlat62.xy * _AdditionalShadowmapSize.xy + u_xlat17.wy;
                        u_xlat14.w = u_xlat17.y;
                        u_xlat23.xy = u_xlat62.xy * _AdditionalShadowmapSize.xy + u_xlat14.xw;
                        u_xlat16.xzw = u_xlat17.xzw;
                        u_xlat17 = u_xlat62.xyxy * _AdditionalShadowmapSize.xyxy + u_xlat16.xyzy;
                        u_xlat70.xy = u_xlat62.xy * _AdditionalShadowmapSize.xy + u_xlat16.wy;
                        u_xlat16.x = u_xlat14.x;
                        u_xlat62.xy = u_xlat62.xy * _AdditionalShadowmapSize.xy + u_xlat16.xy;
                        u_xlat24 = u_xlat13.xxxx * u_xlat15;
                        u_xlat25 = u_xlat13.yyyy * u_xlat15;
                        u_xlat26 = u_xlat13.zzzz * u_xlat15;
                        u_xlat13 = u_xlat13.wwww * u_xlat15;
                        vec3 txVec43 = vec3(u_xlat18.xy,u_xlat12.z);
                        u_xlat90 = textureLod(sampler2DShadow(_AdditionalLightsShadowmapTexture, sampler_LinearClampCompare), txVec43, 0.0);
                        vec3 txVec44 = vec3(u_xlat18.zw,u_xlat12.z);
                        u_xlat91 = textureLod(sampler2DShadow(_AdditionalLightsShadowmapTexture, sampler_LinearClampCompare), txVec44, 0.0);
                        u_xlat91 = u_xlat91 * u_xlat24.y;
                        u_xlat90 = u_xlat24.x * u_xlat90 + u_xlat91;
                        vec3 txVec45 = vec3(u_xlat19.xy,u_xlat12.z);
                        u_xlat91 = textureLod(sampler2DShadow(_AdditionalLightsShadowmapTexture, sampler_LinearClampCompare), txVec45, 0.0);
                        u_xlat90 = u_xlat24.z * u_xlat91 + u_xlat90;
                        vec3 txVec46 = vec3(u_xlat21.xy,u_xlat12.z);
                        u_xlat91 = textureLod(sampler2DShadow(_AdditionalLightsShadowmapTexture, sampler_LinearClampCompare), txVec46, 0.0);
                        u_xlat90 = u_xlat24.w * u_xlat91 + u_xlat90;
                        vec3 txVec47 = vec3(u_xlat20.xy,u_xlat12.z);
                        u_xlat91 = textureLod(sampler2DShadow(_AdditionalLightsShadowmapTexture, sampler_LinearClampCompare), txVec47, 0.0);
                        u_xlat90 = u_xlat25.x * u_xlat91 + u_xlat90;
                        vec3 txVec48 = vec3(u_xlat20.zw,u_xlat12.z);
                        u_xlat91 = textureLod(sampler2DShadow(_AdditionalLightsShadowmapTexture, sampler_LinearClampCompare), txVec48, 0.0);
                        u_xlat90 = u_xlat25.y * u_xlat91 + u_xlat90;
                        vec3 txVec49 = vec3(u_xlat73.xy,u_xlat12.z);
                        u_xlat91 = textureLod(sampler2DShadow(_AdditionalLightsShadowmapTexture, sampler_LinearClampCompare), txVec49, 0.0);
                        u_xlat90 = u_xlat25.z * u_xlat91 + u_xlat90;
                        vec3 txVec50 = vec3(u_xlat21.zw,u_xlat12.z);
                        u_xlat91 = textureLod(sampler2DShadow(_AdditionalLightsShadowmapTexture, sampler_LinearClampCompare), txVec50, 0.0);
                        u_xlat90 = u_xlat25.w * u_xlat91 + u_xlat90;
                        vec3 txVec51 = vec3(u_xlat22.xy,u_xlat12.z);
                        u_xlat91 = textureLod(sampler2DShadow(_AdditionalLightsShadowmapTexture, sampler_LinearClampCompare), txVec51, 0.0);
                        u_xlat90 = u_xlat26.x * u_xlat91 + u_xlat90;
                        vec3 txVec52 = vec3(u_xlat22.zw,u_xlat12.z);
                        u_xlat91 = textureLod(sampler2DShadow(_AdditionalLightsShadowmapTexture, sampler_LinearClampCompare), txVec52, 0.0);
                        u_xlat90 = u_xlat26.y * u_xlat91 + u_xlat90;
                        vec3 txVec53 = vec3(u_xlat41.xy,u_xlat12.z);
                        u_xlat91 = textureLod(sampler2DShadow(_AdditionalLightsShadowmapTexture, sampler_LinearClampCompare), txVec53, 0.0);
                        u_xlat90 = u_xlat26.z * u_xlat91 + u_xlat90;
                        vec3 txVec54 = vec3(u_xlat23.xy,u_xlat12.z);
                        u_xlat91 = textureLod(sampler2DShadow(_AdditionalLightsShadowmapTexture, sampler_LinearClampCompare), txVec54, 0.0);
                        u_xlat90 = u_xlat26.w * u_xlat91 + u_xlat90;
                        vec3 txVec55 = vec3(u_xlat17.xy,u_xlat12.z);
                        u_xlat91 = textureLod(sampler2DShadow(_AdditionalLightsShadowmapTexture, sampler_LinearClampCompare), txVec55, 0.0);
                        u_xlat90 = u_xlat13.x * u_xlat91 + u_xlat90;
                        vec3 txVec56 = vec3(u_xlat17.zw,u_xlat12.z);
                        u_xlat91 = textureLod(sampler2DShadow(_AdditionalLightsShadowmapTexture, sampler_LinearClampCompare), txVec56, 0.0);
                        u_xlat90 = u_xlat13.y * u_xlat91 + u_xlat90;
                        vec3 txVec57 = vec3(u_xlat70.xy,u_xlat12.z);
                        u_xlat91 = textureLod(sampler2DShadow(_AdditionalLightsShadowmapTexture, sampler_LinearClampCompare), txVec57, 0.0);
                        u_xlat90 = u_xlat13.z * u_xlat91 + u_xlat90;
                        vec3 txVec58 = vec3(u_xlat62.xy,u_xlat12.z);
                        u_xlat62.x = textureLod(sampler2DShadow(_AdditionalLightsShadowmapTexture, sampler_LinearClampCompare), txVec58, 0.0);
                        u_xlat88 = u_xlat13.w * u_xlat62.x + u_xlat90;
                    }
                }
            } else {
                vec3 txVec59 = vec3(u_xlat12.xy,u_xlat12.z);
                u_xlat88 = textureLod(sampler2DShadow(_AdditionalLightsShadowmapTexture, sampler_LinearClampCompare), txVec59, 0.0);
            }
            u_xlat62.x = 1.0 + (-_AdditionalShadowParams[u_xlati85].x);
            u_xlat88 = u_xlat88 * _AdditionalShadowParams[u_xlati85].x + u_xlat62.x;
            u_xlatb62 = 0.0>=u_xlat12.z;
            u_xlatb89 = u_xlat12.z>=1.0;
            u_xlatb62 = u_xlatb89 || u_xlatb62;
            u_xlat88 = (u_xlatb62) ? 1.0 : u_xlat88;
        } else {
            u_xlat88 = 1.0;
        }
        u_xlat62.x = (-u_xlat88) + 1.0;
        u_xlat88 = u_xlat55 * u_xlat62.x + u_xlat88;
        u_xlati62 = 1 << (u_xlati85 & int(0x1F));
        u_xlati62 = int(uint(u_xlati62) & floatBitsToUint(_AdditionalLightsCookieEnableBits));
        if(u_xlati62 != 0) {
            u_xlati62 = int(_AdditionalLightsLightTypes[u_xlati85]);
            u_xlati89 = (u_xlati62 != 0) ? 0 : 1;
            u_xlati90 = u_xlati85 << (2 & int(0x1F));
            if(u_xlati89 != 0) {
                u_xlat12.xyz = vs_TEXCOORD7.yyy * _AdditionalLightsWorldToLights[(u_xlati90 + 1) / 4][(u_xlati90 + 1) % 4].xyw;
                u_xlat12.xyz = _AdditionalLightsWorldToLights[u_xlati90 / 4][u_xlati90 % 4].xyw * vs_TEXCOORD7.xxx + u_xlat12.xyz;
                u_xlat12.xyz = _AdditionalLightsWorldToLights[(u_xlati90 + 2) / 4][(u_xlati90 + 2) % 4].xyw * vs_TEXCOORD7.zzz + u_xlat12.xyz;
                u_xlat12.xyz = u_xlat12.xyz + _AdditionalLightsWorldToLights[(u_xlati90 + 3) / 4][(u_xlati90 + 3) % 4].xyw;
                u_xlat12.xy = u_xlat12.xy / u_xlat12.zz;
                u_xlat12.xy = u_xlat12.xy * vec2(0.5, 0.5) + vec2(0.5, 0.5);
                u_xlat12.xy = clamp(u_xlat12.xy, 0.0, 1.0);
                u_xlat12.xy = _AdditionalLightsCookieAtlasUVRects[u_xlati85].xy * u_xlat12.xy + _AdditionalLightsCookieAtlasUVRects[u_xlati85].zw;
            } else {
                u_xlatb62 = u_xlati62==1;
                u_xlati62 = u_xlatb62 ? 1 : int(0);
                if(u_xlati62 != 0) {
                    u_xlat62.xy = vs_TEXCOORD7.yy * _AdditionalLightsWorldToLights[(u_xlati90 + 1) / 4][(u_xlati90 + 1) % 4].xy;
                    u_xlat62.xy = _AdditionalLightsWorldToLights[u_xlati90 / 4][u_xlati90 % 4].xy * vs_TEXCOORD7.xx + u_xlat62.xy;
                    u_xlat62.xy = _AdditionalLightsWorldToLights[(u_xlati90 + 2) / 4][(u_xlati90 + 2) % 4].xy * vs_TEXCOORD7.zz + u_xlat62.xy;
                    u_xlat62.xy = u_xlat62.xy + _AdditionalLightsWorldToLights[(u_xlati90 + 3) / 4][(u_xlati90 + 3) % 4].xy;
                    u_xlat62.xy = u_xlat62.xy * vec2(0.5, 0.5) + vec2(0.5, 0.5);
                    u_xlat62.xy = fract(u_xlat62.xy);
                    u_xlat12.xy = _AdditionalLightsCookieAtlasUVRects[u_xlati85].xy * u_xlat62.xy + _AdditionalLightsCookieAtlasUVRects[u_xlati85].zw;
                } else {
                    u_xlat13 = vs_TEXCOORD7.yyyy * _AdditionalLightsWorldToLights[(u_xlati90 + 1) / 4][(u_xlati90 + 1) % 4];
                    u_xlat13 = _AdditionalLightsWorldToLights[u_xlati90 / 4][u_xlati90 % 4] * vs_TEXCOORD7.xxxx + u_xlat13;
                    u_xlat13 = _AdditionalLightsWorldToLights[(u_xlati90 + 2) / 4][(u_xlati90 + 2) % 4] * vs_TEXCOORD7.zzzz + u_xlat13;
                    u_xlat13 = u_xlat13 + _AdditionalLightsWorldToLights[(u_xlati90 + 3) / 4][(u_xlati90 + 3) % 4];
                    u_xlat13.xyz = u_xlat13.xyz / u_xlat13.www;
                    u_xlat62.x = dot(u_xlat13.xyz, u_xlat13.xyz);
                    u_xlat62.x = inversesqrt(u_xlat62.x);
                    u_xlat13.xyz = u_xlat62.xxx * u_xlat13.xyz;
                    u_xlat62.x = dot(abs(u_xlat13.xyz), vec3(1.0, 1.0, 1.0));
                    u_xlat62.x = max(u_xlat62.x, 9.99999997e-07);
                    u_xlat62.x = float(1.0) / float(u_xlat62.x);
                    u_xlat14.xyz = u_xlat62.xxx * u_xlat13.zxy;
                    u_xlat14.x = (-u_xlat14.x);
                    u_xlat14.x = clamp(u_xlat14.x, 0.0, 1.0);
                    u_xlatb66.xy = greaterThanEqual(u_xlat14.yzyz, vec4(0.0, 0.0, 0.0, 0.0)).xy;
                    u_xlat66.x = (u_xlatb66.x) ? u_xlat14.x : (-u_xlat14.x);
                    u_xlat66.y = (u_xlatb66.y) ? u_xlat14.x : (-u_xlat14.x);
                    u_xlat62.xy = u_xlat13.xy * u_xlat62.xx + u_xlat66.xy;
                    u_xlat62.xy = u_xlat62.xy * vec2(0.5, 0.5) + vec2(0.5, 0.5);
                    u_xlat62.xy = clamp(u_xlat62.xy, 0.0, 1.0);
                    u_xlat12.xy = _AdditionalLightsCookieAtlasUVRects[u_xlati85].xy * u_xlat62.xy + _AdditionalLightsCookieAtlasUVRects[u_xlati85].zw;
                }
            }
            u_xlat12 = textureLod(sampler2D(_AdditionalLightsCookieAtlasTexture, sampler_LinearClamp), u_xlat12.xy, 0.0);
            u_xlat62.x = (u_xlatb8.y) ? u_xlat12.w : u_xlat12.x;
            u_xlat12.xyz = (u_xlatb8.x) ? u_xlat12.xyz : u_xlat62.xxx;
        } else {
            u_xlat12.x = float(1.0);
            u_xlat12.y = float(1.0);
            u_xlat12.z = float(1.0);
        }
        u_xlat12.xyz = u_xlat12.xyz * _AdditionalLightsColor[u_xlati85].xyz;
        u_xlat85 = u_xlat86 * u_xlat88;
        u_xlat86 = dot(u_xlat2.xyz, u_xlat11.xyz);
        u_xlat86 = clamp(u_xlat86, 0.0, 1.0);
        u_xlat85 = u_xlat85 * u_xlat86;
        u_xlat12.xyz = vec3(u_xlat85) * u_xlat12.xyz;
        u_xlat10.xyz = u_xlat10.xyz * vec3(u_xlat87) + u_xlat6.xyz;
        u_xlat85 = dot(u_xlat10.xyz, u_xlat10.xyz);
        u_xlat85 = max(u_xlat85, 1.17549435e-38);
        u_xlat85 = inversesqrt(u_xlat85);
        u_xlat10.xyz = vec3(u_xlat85) * u_xlat10.xyz;
        u_xlat85 = dot(u_xlat2.xyz, u_xlat10.xyz);
        u_xlat85 = clamp(u_xlat85, 0.0, 1.0);
        u_xlat86 = dot(u_xlat11.xyz, u_xlat10.xyz);
        u_xlat86 = clamp(u_xlat86, 0.0, 1.0);
        u_xlat85 = u_xlat85 * u_xlat85;
        u_xlat85 = u_xlat85 * u_xlat1.x + 1.00001001;
        u_xlat86 = u_xlat86 * u_xlat86;
        u_xlat85 = u_xlat85 * u_xlat85;
        u_xlat86 = max(u_xlat86, 0.100000001);
        u_xlat85 = u_xlat85 * u_xlat86;
        u_xlat85 = u_xlat82 * u_xlat85;
        u_xlat85 = u_xlat83 / u_xlat85;
        u_xlat10.xyz = u_xlat0.xyz * vec3(u_xlat85) + u_xlat4.xyz;
        u_xlat9.xyz = u_xlat10.xyz * u_xlat12.xyz + u_xlat9.xyz;
    }
    u_xlat0.xyz = u_xlat7.xyz * u_xlat5.xyz + u_xlat3.xyz;
    u_xlat0.xyz = u_xlat9.xyz + u_xlat0.xyz;
    u_xlat81 = u_xlat28 * (-u_xlat28);
    u_xlat81 = exp2(u_xlat81);
    u_xlat0.xyz = u_xlat0.xyz + (-unity_FogColor.xyz);
    SV_Target0.xyz = vec3(u_xlat81) * u_xlat0.xyz + unity_FogColor.xyz;
    SV_Target0.w = 1.0;
    return;
}

