type Arr = array<vec4<f32>, 2u>;

type Arr_1 = array<mat4x4<f32>, 2u>;

type Arr_2 = array<vec4<f32>, 2u>;

type Arr_3 = array<vec4<f32>, 2u>;

type Arr_4 = array<vec4<f32>, 2u>;

struct PGlobals {
  x_ScaledScreenParams : vec4<f32>,
  x_GlobalMipBias : vec2<f32>,
  @size(8)
  padding : u32,
  x_ProjectionParams : vec4<f32>,
  x_SSAOParams : vec4<f32>,
  x_CameraViewTopLeftCorner : Arr_4,
  x_CameraViewProjections : Arr_1,
  x_SourceSize : vec4<f32>,
  x_CameraViewXExtent : Arr_4,
  x_CameraViewYExtent : Arr_4,
  x_CameraViewZExtent : Arr_4,
}

@group(0) @binding(0) var x_CameraDepthTexture : texture_2d<f32>;

@group(0) @binding(1) var sampler_CameraDepthTexture : sampler;

var<private> vs_TEXCOORD0 : vec2<f32>;

@group(1) @binding(0) var<uniform> x_34 : PGlobals;

var<private> SV_Target0 : vec4<f32>;

var<private> gl_FragCoord : vec4<f32>;

fn main_1() {
  var u_xlat0 : f32;
  var u_xlatb7 : bool;
  var u_xlat7 : vec3<f32>;
  var u_xlatb14 : bool;
  var u_xlat14 : vec2<f32>;
  var u_xlat21 : f32;
  var u_xlat1 : vec3<f32>;
  var u_xlat9 : vec3<f32>;
  var u_xlat3 : vec4<f32>;
  var u_xlat17 : vec2<f32>;
  var u_xlat4 : vec3<f32>;
  var u_xlat12 : vec3<f32>;
  var u_xlat13 : vec3<f32>;
  var u_xlat22 : f32;
  var u_xlat2 : vec4<f32>;
  var u_xlatb21 : bool;
  var x_425 : vec3<f32>;
  var u_xlat6 : vec4<f32>;
  var x_436 : vec3<f32>;
  var x_446 : vec3<f32>;
  var x_454 : vec3<f32>;
  var x_464 : vec2<f32>;
  var u_xlat23 : f32;
  var u_xlat5 : vec3<f32>;
  var u_xlatb22 : bool;
  var x_697 : vec3<f32>;
  var u_xlat10 : vec3<f32>;
  var u_xlatb17 : bool;
  var u_xlatb3 : bool;
  var x_987 : vec3<f32>;
  var u_xlat11 : vec3<f32>;
  var u_xlat18 : f32;
  var u_xlatb4 : vec3<bool>;
  var u_xlatb23 : bool;
  var x_1263 : vec3<f32>;
  var u_xlat24 : f32;
  var u_xlatb24 : bool;
  var x_1538 : vec3<f32>;
  var u_xlatb11 : bool;
  var x_1788 : vec3<f32>;
  var x_2061 : vec3<f32>;
  var x_2317 : vec3<f32>;
  var x_2589 : vec3<f32>;
  var u_xlat_precise_vec4 : vec4<f32>;
  var u_xlat_precise_ivec4 : vec4<i32>;
  var u_xlat_precise_bvec4 : vec4<bool>;
  var u_xlat_precise_uvec4 : vec4<u32>;
  let x_22 : vec2<f32> = vs_TEXCOORD0;
  let x_40 : f32 = x_34.x_GlobalMipBias.x;
  let x_41 : vec4<f32> = textureSampleBias(x_CameraDepthTexture, sampler_CameraDepthTexture, x_22, x_40);
  u_xlat0 = x_41.x;
  let x_46 : f32 = u_xlat0;
  u_xlatb7 = (x_46 < 0.00001f);
  let x_49 : bool = u_xlatb7;
  if (x_49) {
    SV_Target0 = vec4<f32>(0.0f, 0.5f, 0.5f, 0.5f);
    return;
  }
  let x_64 : f32 = x_34.x_ProjectionParams.y;
  let x_67 : f32 = x_34.x_ProjectionParams.z;
  u_xlat7.x = (-(x_64) + x_67);
  let x_71 : f32 = u_xlat7.x;
  let x_73 : f32 = u_xlat0;
  let x_76 : f32 = x_34.x_ProjectionParams.z;
  u_xlat0 = ((-(x_71) * x_73) + x_76);
  let x_82 : f32 = x_34.x_SSAOParams.w;
  let x_83 : f32 = u_xlat0;
  u_xlatb14 = (x_82 < x_83);
  let x_85 : bool = u_xlatb14;
  if (x_85) {
    SV_Target0 = vec4<f32>(0.0f, 0.5f, 0.5f, 0.5f);
    return;
  }
  let x_93 : f32 = vs_TEXCOORD0.y;
  u_xlat14.x = (-(x_93) + 1.0f);
  let x_99 : f32 = u_xlat0;
  let x_101 : f32 = x_34.x_ProjectionParams.w;
  u_xlat21 = (x_99 * x_101);
  let x_108 : vec4<f32> = x_34.x_CameraViewXExtent[0i];
  let x_110 : vec2<f32> = vs_TEXCOORD0;
  let x_115 : vec4<f32> = x_34.x_CameraViewTopLeftCorner[0i];
  u_xlat1 = ((vec3<f32>(x_108.x, x_108.y, x_108.z) * vec3<f32>(x_110.x, x_110.x, x_110.x)) + vec3<f32>(x_115.x, x_115.y, x_115.z));
  let x_120 : vec4<f32> = x_34.x_CameraViewYExtent[0i];
  let x_122 : vec2<f32> = u_xlat14;
  let x_125 : vec3<f32> = u_xlat1;
  u_xlat1 = ((vec3<f32>(x_120.x, x_120.y, x_120.z) * vec3<f32>(x_122.x, x_122.x, x_122.x)) + x_125);
  let x_129 : vec4<f32> = x_34.x_CameraViewZExtent[0i];
  let x_131 : f32 = u_xlat21;
  let x_134 : vec3<f32> = u_xlat1;
  u_xlat1 = ((vec3<f32>(x_129.x, x_129.y, x_129.z) * vec3<f32>(x_131, x_131, x_131)) + x_134);
  let x_139 : f32 = x_34.x_SourceSize.z;
  u_xlat9.x = (x_139 * -2.0f);
  u_xlat9.y = 0.0f;
  let x_144 : vec3<f32> = u_xlat9;
  let x_146 : vec2<f32> = vs_TEXCOORD0;
  let x_147 : vec2<f32> = (vec2<f32>(x_144.x, x_144.y) + x_146);
  let x_148 : vec3<f32> = u_xlat9;
  u_xlat9 = vec3<f32>(x_147.x, x_147.y, x_148.z);
  let x_153 : vec3<f32> = u_xlat9;
  let x_156 : f32 = x_34.x_GlobalMipBias.x;
  let x_157 : vec4<f32> = textureSampleBias(x_CameraDepthTexture, sampler_CameraDepthTexture, vec2<f32>(x_153.x, x_153.y), x_156);
  u_xlat14.x = x_157.x;
  let x_161 : f32 = u_xlat7.x;
  let x_164 : f32 = u_xlat14.x;
  let x_167 : f32 = x_34.x_ProjectionParams.z;
  u_xlat9.z = ((-(x_161) * x_164) + x_167);
  let x_173 : f32 = x_34.x_SourceSize.z;
  u_xlat3.x = (x_173 * 2.0f);
  u_xlat3.y = 0.0f;
  u_xlat17.y = 0.0f;
  let x_181 : vec4<f32> = u_xlat3;
  let x_183 : vec2<f32> = vs_TEXCOORD0;
  let x_184 : vec2<f32> = (vec2<f32>(x_181.x, x_181.y) + x_183);
  let x_185 : vec3<f32> = u_xlat4;
  u_xlat4 = vec3<f32>(x_184.x, x_184.y, x_185.z);
  let x_190 : vec3<f32> = u_xlat4;
  let x_193 : f32 = x_34.x_GlobalMipBias.x;
  let x_194 : vec4<f32> = textureSampleBias(x_CameraDepthTexture, sampler_CameraDepthTexture, vec2<f32>(x_190.x, x_190.y), x_193);
  u_xlat14.x = x_194.x;
  let x_198 : f32 = u_xlat7.x;
  let x_201 : f32 = u_xlat14.x;
  let x_204 : f32 = x_34.x_ProjectionParams.z;
  u_xlat4.z = ((-(x_198) * x_201) + x_204);
  u_xlat12.x = 0.0f;
  let x_210 : f32 = x_34.x_SourceSize.w;
  u_xlat12.y = (x_210 * 2.0f);
  let x_213 : vec3<f32> = u_xlat12;
  let x_215 : vec2<f32> = vs_TEXCOORD0;
  let x_216 : vec2<f32> = (vec2<f32>(x_213.x, x_213.y) + x_215);
  let x_217 : vec3<f32> = u_xlat12;
  u_xlat12 = vec3<f32>(x_216.x, x_216.y, x_217.z);
  let x_222 : vec3<f32> = u_xlat12;
  let x_225 : f32 = x_34.x_GlobalMipBias.x;
  let x_226 : vec4<f32> = textureSampleBias(x_CameraDepthTexture, sampler_CameraDepthTexture, vec2<f32>(x_222.x, x_222.y), x_225);
  u_xlat14.x = x_226.x;
  let x_230 : f32 = u_xlat7.x;
  let x_233 : f32 = u_xlat14.x;
  let x_236 : f32 = x_34.x_ProjectionParams.z;
  u_xlat12.z = ((-(x_230) * x_233) + x_236);
  u_xlat13.x = 0.0f;
  let x_242 : f32 = x_34.x_SourceSize.w;
  u_xlat13.y = (x_242 * -2.0f);
  let x_245 : vec3<f32> = u_xlat13;
  let x_247 : vec2<f32> = vs_TEXCOORD0;
  let x_248 : vec2<f32> = (vec2<f32>(x_245.x, x_245.y) + x_247);
  let x_249 : vec3<f32> = u_xlat13;
  u_xlat13 = vec3<f32>(x_248.x, x_248.y, x_249.z);
  let x_254 : vec3<f32> = u_xlat13;
  let x_257 : f32 = x_34.x_GlobalMipBias.x;
  let x_258 : vec4<f32> = textureSampleBias(x_CameraDepthTexture, sampler_CameraDepthTexture, vec2<f32>(x_254.x, x_254.y), x_257);
  u_xlat14.x = x_258.x;
  let x_262 : f32 = u_xlat7.x;
  let x_265 : f32 = u_xlat14.x;
  let x_268 : f32 = x_34.x_ProjectionParams.z;
  u_xlat13.z = ((-(x_262) * x_265) + x_268);
  let x_272 : f32 = x_34.x_SourceSize.z;
  u_xlat17.x = x_272;
  let x_274 : vec2<f32> = u_xlat17;
  let x_280 : vec2<f32> = vs_TEXCOORD0;
  u_xlat3 = ((vec4<f32>(x_274.x, x_274.y, x_274.x, x_274.y) * vec4<f32>(-4.0f, 2.0f, 4.0f, 2.0f)) + vec4<f32>(x_280.x, x_280.y, x_280.x, x_280.y));
  let x_286 : vec4<f32> = u_xlat3;
  let x_289 : f32 = x_34.x_GlobalMipBias.x;
  let x_290 : vec4<f32> = textureSampleBias(x_CameraDepthTexture, sampler_CameraDepthTexture, vec2<f32>(x_286.x, x_286.y), x_289);
  u_xlat14.x = x_290.x;
  let x_294 : f32 = u_xlat7.x;
  let x_297 : f32 = u_xlat14.x;
  let x_300 : f32 = x_34.x_ProjectionParams.z;
  u_xlat14.x = ((-(x_294) * x_297) + x_300);
  let x_306 : vec4<f32> = u_xlat3;
  let x_309 : f32 = x_34.x_GlobalMipBias.x;
  let x_310 : vec4<f32> = textureSampleBias(x_CameraDepthTexture, sampler_CameraDepthTexture, vec2<f32>(x_306.z, x_306.w), x_309);
  u_xlat21 = x_310.x;
  let x_313 : f32 = u_xlat7.x;
  let x_315 : f32 = u_xlat21;
  let x_318 : f32 = x_34.x_ProjectionParams.z;
  u_xlat21 = ((-(x_313) * x_315) + x_318);
  u_xlat3.x = 2.0f;
  let x_322 : f32 = x_34.x_SourceSize.w;
  u_xlat3.y = x_322;
  let x_325 : vec4<f32> = u_xlat3;
  let x_328 : vec2<f32> = vs_TEXCOORD0;
  u_xlat3 = ((vec4<f32>(0.0f, 4.0f, 0.0f, -4.0f) * vec4<f32>(x_325.x, x_325.y, x_325.x, x_325.y)) + vec4<f32>(x_328.x, x_328.y, x_328.x, x_328.y));
  let x_335 : vec4<f32> = u_xlat3;
  let x_338 : f32 = x_34.x_GlobalMipBias.x;
  let x_339 : vec4<f32> = textureSampleBias(x_CameraDepthTexture, sampler_CameraDepthTexture, vec2<f32>(x_335.x, x_335.y), x_338);
  u_xlat22 = x_339.x;
  let x_342 : f32 = u_xlat7.x;
  let x_344 : f32 = u_xlat22;
  let x_347 : f32 = x_34.x_ProjectionParams.z;
  u_xlat22 = ((-(x_342) * x_344) + x_347);
  let x_353 : vec4<f32> = u_xlat3;
  let x_356 : f32 = x_34.x_GlobalMipBias.x;
  let x_357 : vec4<f32> = textureSampleBias(x_CameraDepthTexture, sampler_CameraDepthTexture, vec2<f32>(x_353.z, x_353.w), x_356);
  u_xlat2.x = x_357.x;
  let x_361 : f32 = u_xlat7.x;
  let x_364 : f32 = u_xlat2.x;
  let x_367 : f32 = x_34.x_ProjectionParams.z;
  u_xlat2.x = ((-(x_361) * x_364) + x_367);
  let x_371 : f32 = u_xlat9.z;
  let x_374 : f32 = u_xlat14.x;
  u_xlat14.x = ((x_371 * 2.0f) + -(x_374));
  let x_379 : f32 = u_xlat4.z;
  let x_381 : f32 = u_xlat21;
  u_xlat14.y = ((x_379 * 2.0f) + -(x_381));
  let x_385 : f32 = u_xlat0;
  let x_388 : vec2<f32> = u_xlat14;
  u_xlat14 = (-(vec2<f32>(x_385, x_385)) + x_388);
  let x_391 : f32 = u_xlat14.x;
  let x_394 : f32 = u_xlat14.y;
  u_xlatb14 = (abs(x_391) < abs(x_394));
  let x_398 : f32 = u_xlat13.z;
  let x_401 : f32 = u_xlat2.x;
  u_xlat21 = ((x_398 * 2.0f) + -(x_401));
  let x_404 : f32 = u_xlat0;
  let x_406 : f32 = u_xlat21;
  u_xlat21 = (-(x_404) + x_406);
  let x_409 : f32 = u_xlat12.z;
  let x_411 : f32 = u_xlat22;
  u_xlat22 = ((x_409 * 2.0f) + -(x_411));
  let x_414 : f32 = u_xlat0;
  let x_416 : f32 = u_xlat22;
  u_xlat22 = (-(x_414) + x_416);
  let x_419 : f32 = u_xlat21;
  let x_421 : f32 = u_xlat22;
  u_xlatb21 = (abs(x_419) < abs(x_421));
  let x_424 : bool = u_xlatb14;
  if (x_424) {
    let x_428 : vec3<f32> = u_xlat9;
    x_425 = x_428;
  } else {
    let x_430 : vec3<f32> = u_xlat13;
    x_425 = x_430;
  }
  let x_431 : vec3<f32> = x_425;
  let x_432 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_431.x, x_431.y, x_431.z, x_432.w);
  let x_435 : bool = u_xlatb14;
  if (x_435) {
    let x_439 : vec3<f32> = u_xlat13;
    x_436 = x_439;
  } else {
    let x_441 : vec3<f32> = u_xlat4;
    x_436 = x_441;
  }
  let x_442 : vec3<f32> = x_436;
  let x_443 : vec4<f32> = u_xlat6;
  u_xlat6 = vec4<f32>(x_443.x, x_442.x, x_442.y, x_442.z);
  let x_445 : bool = u_xlatb14;
  if (x_445) {
    let x_449 : vec3<f32> = u_xlat12;
    x_446 = x_449;
  } else {
    let x_451 : vec3<f32> = u_xlat4;
    x_446 = x_451;
  }
  let x_452 : vec3<f32> = x_446;
  u_xlat4 = x_452;
  let x_453 : bool = u_xlatb14;
  if (x_453) {
    let x_457 : vec3<f32> = u_xlat9;
    x_454 = x_457;
  } else {
    let x_459 : vec3<f32> = u_xlat12;
    x_454 = x_459;
  }
  let x_460 : vec3<f32> = x_454;
  let x_461 : vec4<f32> = u_xlat2;
  u_xlat2 = vec4<f32>(x_461.x, x_460.x, x_460.y, x_460.z);
  let x_463 : bool = u_xlatb21;
  if (x_463) {
    let x_467 : vec4<f32> = u_xlat3;
    x_464 = vec2<f32>(x_467.x, x_467.y);
  } else {
    let x_470 : vec3<f32> = u_xlat4;
    x_464 = vec2<f32>(x_470.x, x_470.y);
  }
  let x_472 : vec2<f32> = x_464;
  let x_473 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_472.x, x_472.y, x_473.z, x_473.w);
  let x_476 : f32 = u_xlat3.z;
  u_xlat6.x = x_476;
  let x_479 : f32 = u_xlat4.z;
  u_xlat2.x = x_479;
  let x_481 : bool = u_xlatb21;
  let x_482 : vec4<f32> = u_xlat6;
  let x_483 : vec4<f32> = u_xlat2;
  u_xlat2 = select(x_483, x_482, vec4<bool>(x_481, x_481, x_481, x_481));
  let x_488 : f32 = u_xlat2.z;
  u_xlat14.x = (-(x_488) + 1.0f);
  let x_492 : vec4<f32> = u_xlat2;
  let x_495 : vec4<f32> = x_34.x_ProjectionParams;
  let x_497 : vec2<f32> = (vec2<f32>(x_492.w, x_492.x) * vec2<f32>(x_495.w, x_495.w));
  let x_498 : vec4<f32> = u_xlat2;
  u_xlat2 = vec4<f32>(x_497.x, x_498.y, x_497.y, x_498.w);
  let x_501 : vec4<f32> = x_34.x_CameraViewXExtent[0i];
  let x_503 : vec4<f32> = u_xlat2;
  let x_507 : vec4<f32> = x_34.x_CameraViewTopLeftCorner[0i];
  u_xlat4 = ((vec3<f32>(x_501.z, x_501.x, x_501.y) * vec3<f32>(x_503.y, x_503.y, x_503.y)) + vec3<f32>(x_507.z, x_507.x, x_507.y));
  let x_511 : vec4<f32> = x_34.x_CameraViewYExtent[0i];
  let x_513 : vec2<f32> = u_xlat14;
  let x_516 : vec3<f32> = u_xlat4;
  u_xlat4 = ((vec3<f32>(x_511.z, x_511.x, x_511.y) * vec3<f32>(x_513.x, x_513.x, x_513.x)) + x_516);
  let x_519 : vec4<f32> = x_34.x_CameraViewZExtent[0i];
  let x_521 : vec4<f32> = u_xlat2;
  let x_524 : vec3<f32> = u_xlat4;
  let x_525 : vec3<f32> = ((vec3<f32>(x_519.z, x_519.x, x_519.y) * vec3<f32>(x_521.x, x_521.x, x_521.x)) + x_524);
  let x_526 : vec4<f32> = u_xlat2;
  u_xlat2 = vec4<f32>(x_525.x, x_525.y, x_526.z, x_525.z);
  let x_528 : vec3<f32> = u_xlat1;
  let x_531 : vec4<f32> = u_xlat2;
  let x_533 : vec3<f32> = (-(vec3<f32>(x_528.z, x_528.x, x_528.y)) + vec3<f32>(x_531.x, x_531.y, x_531.w));
  let x_534 : vec4<f32> = u_xlat2;
  u_xlat2 = vec4<f32>(x_533.x, x_533.y, x_534.z, x_533.z);
  let x_537 : f32 = u_xlat3.y;
  u_xlat14.x = (-(x_537) + 1.0f);
  let x_542 : vec4<f32> = x_34.x_CameraViewXExtent[0i];
  let x_544 : vec4<f32> = u_xlat3;
  let x_548 : vec4<f32> = x_34.x_CameraViewTopLeftCorner[0i];
  let x_550 : vec3<f32> = ((vec3<f32>(x_542.y, x_542.z, x_542.x) * vec3<f32>(x_544.x, x_544.x, x_544.x)) + vec3<f32>(x_548.y, x_548.z, x_548.x));
  let x_551 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_550.x, x_550.y, x_550.z, x_551.w);
  let x_554 : vec4<f32> = x_34.x_CameraViewYExtent[0i];
  let x_556 : vec2<f32> = u_xlat14;
  let x_559 : vec4<f32> = u_xlat3;
  let x_561 : vec3<f32> = ((vec3<f32>(x_554.y, x_554.z, x_554.x) * vec3<f32>(x_556.x, x_556.x, x_556.x)) + vec3<f32>(x_559.x, x_559.y, x_559.z));
  let x_562 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_561.x, x_561.y, x_561.z, x_562.w);
  let x_565 : vec4<f32> = x_34.x_CameraViewZExtent[0i];
  let x_567 : vec4<f32> = u_xlat2;
  let x_570 : vec4<f32> = u_xlat3;
  let x_572 : vec3<f32> = ((vec3<f32>(x_565.y, x_565.z, x_565.x) * vec3<f32>(x_567.z, x_567.z, x_567.z)) + vec3<f32>(x_570.x, x_570.y, x_570.z));
  let x_573 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_572.x, x_572.y, x_572.z, x_573.w);
  let x_575 : vec3<f32> = u_xlat1;
  let x_578 : vec4<f32> = u_xlat3;
  let x_580 : vec3<f32> = (-(vec3<f32>(x_575.y, x_575.z, x_575.x)) + vec3<f32>(x_578.x, x_578.y, x_578.z));
  let x_581 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_580.x, x_580.y, x_580.z, x_581.w);
  let x_583 : vec4<f32> = u_xlat2;
  let x_585 : vec4<f32> = u_xlat3;
  u_xlat4 = (vec3<f32>(x_583.x, x_583.y, x_583.w) * vec3<f32>(x_585.x, x_585.y, x_585.z));
  let x_588 : vec4<f32> = u_xlat2;
  let x_590 : vec4<f32> = u_xlat3;
  let x_593 : vec3<f32> = u_xlat4;
  let x_595 : vec3<f32> = ((vec3<f32>(x_588.w, x_588.x, x_588.y) * vec3<f32>(x_590.y, x_590.z, x_590.x)) + -(x_593));
  let x_596 : vec4<f32> = u_xlat2;
  u_xlat2 = vec4<f32>(x_595.x, x_595.y, x_595.z, x_596.w);
  let x_598 : vec4<f32> = u_xlat2;
  let x_600 : vec4<f32> = u_xlat2;
  u_xlat14.x = dot(vec3<f32>(x_598.x, x_598.y, x_598.z), vec3<f32>(x_600.x, x_600.y, x_600.z));
  let x_605 : f32 = u_xlat14.x;
  u_xlat14.x = inverseSqrt(x_605);
  let x_608 : vec2<f32> = u_xlat14;
  let x_610 : vec4<f32> = u_xlat2;
  let x_612 : vec3<f32> = (vec3<f32>(x_608.x, x_608.x, x_608.x) * vec3<f32>(x_610.x, x_610.y, x_610.z));
  let x_613 : vec4<f32> = u_xlat2;
  u_xlat2 = vec4<f32>(x_612.x, x_612.y, x_612.z, x_613.w);
  let x_615 : vec2<f32> = vs_TEXCOORD0;
  let x_617 : vec4<f32> = x_34.x_ScaledScreenParams;
  u_xlat14 = (x_615 * vec2<f32>(x_617.x, x_617.y));
  let x_620 : vec2<f32> = u_xlat14;
  let x_622 : vec4<f32> = x_34.x_SSAOParams;
  let x_624 : vec2<f32> = (x_620 * vec2<f32>(x_622.z, x_622.z));
  let x_625 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_624.x, x_624.y, x_625.z, x_625.w);
  let x_627 : vec4<f32> = u_xlat3;
  u_xlat22 = dot(vec2<f32>(x_627.x, x_627.y), vec2<f32>(0.067110561f, 0.00583715f));
  let x_633 : f32 = u_xlat22;
  u_xlat22 = fract(x_633);
  let x_635 : f32 = u_xlat22;
  u_xlat22 = (x_635 * 52.982917786f);
  let x_638 : f32 = u_xlat22;
  u_xlat22 = fract(x_638);
  let x_641 : f32 = u_xlat22;
  u_xlat23 = fract(x_641);
  let x_643 : f32 = u_xlat23;
  u_xlat3.z = ((x_643 * 2.0f) + -1.0f);
  let x_648 : f32 = u_xlat22;
  u_xlat22 = (x_648 + 0.9296875f);
  let x_651 : f32 = u_xlat22;
  u_xlat22 = (x_651 * 6.283185482f);
  let x_655 : f32 = u_xlat3.z;
  let x_658 : f32 = u_xlat3.z;
  u_xlat23 = ((-(x_655) * x_658) + 1.0f);
  let x_661 : f32 = u_xlat23;
  u_xlat23 = sqrt(x_661);
  let x_663 : f32 = u_xlat22;
  u_xlat4.x = sin(x_663);
  let x_667 : f32 = u_xlat22;
  u_xlat5.x = cos(x_667);
  let x_670 : f32 = u_xlat23;
  let x_672 : f32 = u_xlat5.x;
  u_xlat3.x = (x_670 * x_672);
  let x_675 : f32 = u_xlat23;
  let x_677 : f32 = u_xlat4.x;
  u_xlat3.y = (x_675 * x_677);
  let x_680 : vec4<f32> = u_xlat3;
  let x_684 : vec3<f32> = (vec3<f32>(x_680.x, x_680.y, x_680.z) * vec3<f32>(0.353553385f, 0.353553385f, 0.353553385f));
  let x_685 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_684.x, x_684.y, x_684.z, x_685.w);
  let x_687 : vec4<f32> = u_xlat2;
  let x_690 : vec4<f32> = u_xlat3;
  u_xlat22 = dot(-(vec3<f32>(x_687.x, x_687.y, x_687.z)), vec3<f32>(x_690.x, x_690.y, x_690.z));
  let x_694 : f32 = u_xlat22;
  u_xlatb22 = (x_694 >= 0.0f);
  let x_696 : bool = u_xlatb22;
  if (x_696) {
    let x_700 : vec4<f32> = u_xlat3;
    x_697 = -(vec3<f32>(x_700.x, x_700.y, x_700.z));
  } else {
    let x_704 : vec4<f32> = u_xlat3;
    x_697 = vec3<f32>(x_704.x, x_704.y, x_704.z);
  }
  let x_706 : vec3<f32> = x_697;
  let x_707 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_706.x, x_706.y, x_706.z, x_707.w);
  let x_709 : vec4<f32> = u_xlat3;
  let x_712 : vec4<f32> = x_34.x_SSAOParams;
  let x_715 : vec3<f32> = u_xlat1;
  let x_716 : vec3<f32> = ((vec3<f32>(x_709.x, x_709.y, x_709.z) * vec3<f32>(x_712.y, x_712.y, x_712.y)) + x_715);
  let x_717 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_716.x, x_716.y, x_716.z, x_717.w);
  let x_720 : vec4<f32> = u_xlat3;
  let x_724 : vec4<f32> = x_34.x_CameraViewProjections[0i][1i];
  let x_726 : vec2<f32> = (vec2<f32>(x_720.y, x_720.y) * vec2<f32>(x_724.x, x_724.y));
  let x_727 : vec3<f32> = u_xlat10;
  u_xlat10 = vec3<f32>(x_726.x, x_727.y, x_726.y);
  let x_730 : vec4<f32> = x_34.x_CameraViewProjections[0i][0i];
  let x_732 : vec4<f32> = u_xlat3;
  let x_735 : vec3<f32> = u_xlat10;
  let x_737 : vec2<f32> = ((vec2<f32>(x_730.x, x_730.y) * vec2<f32>(x_732.x, x_732.x)) + vec2<f32>(x_735.x, x_735.z));
  let x_738 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_737.x, x_737.y, x_738.z, x_738.w);
  let x_741 : vec4<f32> = x_34.x_CameraViewProjections[0i][2i];
  let x_743 : vec4<f32> = u_xlat3;
  let x_746 : vec4<f32> = u_xlat3;
  let x_748 : vec2<f32> = ((vec2<f32>(x_741.x, x_741.y) * vec2<f32>(x_743.z, x_743.z)) + vec2<f32>(x_746.x, x_746.y));
  let x_749 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_748.x, x_748.y, x_749.z, x_749.w);
  let x_751 : vec4<f32> = u_xlat3;
  let x_754 : vec2<f32> = (vec2<f32>(x_751.x, x_751.y) + vec2<f32>(1.0f, 1.0f));
  let x_755 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_754.x, x_754.y, x_755.z, x_755.w);
  let x_757 : vec4<f32> = u_xlat3;
  let x_760 : vec2<f32> = (vec2<f32>(x_757.x, x_757.y) * vec2<f32>(0.5f, 0.5f));
  let x_761 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_760.x, x_760.y, x_761.z, x_761.w);
  let x_763 : vec4<f32> = u_xlat3;
  let x_767 : vec2<f32> = clamp(vec2<f32>(x_763.x, x_763.y), vec2<f32>(0.0f, 0.0f), vec2<f32>(1.0f, 1.0f));
  let x_768 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_767.x, x_767.y, x_768.z, x_768.w);
  let x_773 : vec4<f32> = u_xlat3;
  let x_776 : f32 = x_34.x_GlobalMipBias.x;
  let x_777 : vec4<f32> = textureSampleBias(x_CameraDepthTexture, sampler_CameraDepthTexture, vec2<f32>(x_773.x, x_773.y), x_776);
  u_xlat22 = x_777.x;
  let x_780 : f32 = u_xlat7.x;
  let x_782 : f32 = u_xlat22;
  let x_785 : f32 = x_34.x_ProjectionParams.z;
  u_xlat23 = ((-(x_780) * x_782) + x_785);
  let x_787 : f32 = u_xlat0;
  let x_788 : f32 = u_xlat23;
  u_xlat17.x = (x_787 + -(x_788));
  let x_794 : f32 = u_xlat17.x;
  let x_797 : f32 = x_34.x_SSAOParams.y;
  u_xlatb17 = (abs(x_794) < x_797);
  let x_799 : bool = u_xlatb17;
  u_xlat17.x = select(0.0f, 1.0f, x_799);
  let x_802 : f32 = u_xlat22;
  u_xlatb22 = (0.00001f < x_802);
  let x_804 : bool = u_xlatb22;
  u_xlat22 = select(0.0f, 1.0f, x_804);
  let x_806 : f32 = u_xlat22;
  let x_808 : f32 = u_xlat17.x;
  u_xlat22 = (x_806 * x_808);
  let x_811 : f32 = u_xlat3.y;
  u_xlat10.x = (-(x_811) + 1.0f);
  let x_815 : f32 = u_xlat23;
  let x_817 : f32 = x_34.x_ProjectionParams.w;
  u_xlat23 = (x_815 * x_817);
  let x_820 : vec4<f32> = x_34.x_CameraViewXExtent[0i];
  let x_822 : vec4<f32> = u_xlat3;
  let x_826 : vec4<f32> = x_34.x_CameraViewTopLeftCorner[0i];
  let x_828 : vec3<f32> = ((vec3<f32>(x_820.x, x_820.y, x_820.z) * vec3<f32>(x_822.x, x_822.x, x_822.x)) + vec3<f32>(x_826.x, x_826.y, x_826.z));
  let x_829 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_828.x, x_829.y, x_828.y, x_828.z);
  let x_832 : vec4<f32> = x_34.x_CameraViewYExtent[0i];
  let x_834 : vec3<f32> = u_xlat10;
  let x_837 : vec4<f32> = u_xlat3;
  let x_839 : vec3<f32> = ((vec3<f32>(x_832.x, x_832.y, x_832.z) * vec3<f32>(x_834.x, x_834.x, x_834.x)) + vec3<f32>(x_837.x, x_837.z, x_837.w));
  let x_840 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_839.x, x_839.y, x_839.z, x_840.w);
  let x_843 : vec4<f32> = x_34.x_CameraViewZExtent[0i];
  let x_845 : f32 = u_xlat23;
  let x_848 : vec4<f32> = u_xlat3;
  let x_850 : vec3<f32> = ((vec3<f32>(x_843.x, x_843.y, x_843.z) * vec3<f32>(x_845, x_845, x_845)) + vec3<f32>(x_848.x, x_848.y, x_848.z));
  let x_851 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_850.x, x_850.y, x_850.z, x_851.w);
  let x_853 : vec3<f32> = u_xlat1;
  let x_855 : vec4<f32> = u_xlat3;
  let x_857 : vec3<f32> = (-(x_853) + vec3<f32>(x_855.x, x_855.y, x_855.z));
  let x_858 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_857.x, x_857.y, x_857.z, x_858.w);
  let x_860 : vec4<f32> = u_xlat3;
  let x_862 : vec4<f32> = u_xlat2;
  u_xlat23 = dot(vec3<f32>(x_860.x, x_860.y, x_860.z), vec3<f32>(x_862.x, x_862.y, x_862.z));
  let x_865 : f32 = u_xlat0;
  let x_869 : f32 = u_xlat23;
  u_xlat23 = ((-(x_865) * 0.004f) + x_869);
  let x_871 : f32 = u_xlat23;
  u_xlat23 = max(x_871, 0.0f);
  let x_873 : vec4<f32> = u_xlat3;
  let x_875 : vec4<f32> = u_xlat3;
  u_xlat3.x = dot(vec3<f32>(x_873.x, x_873.y, x_873.z), vec3<f32>(x_875.x, x_875.y, x_875.z));
  let x_880 : f32 = u_xlat3.x;
  u_xlat3.x = (x_880 + 0.0001f);
  let x_885 : f32 = u_xlat3.x;
  u_xlat3.x = (1.0f / x_885);
  let x_888 : f32 = u_xlat23;
  let x_890 : f32 = u_xlat3.x;
  u_xlat23 = (x_888 * x_890);
  let x_892 : vec2<f32> = u_xlat14;
  let x_895 : vec4<f32> = x_34.x_SSAOParams;
  u_xlat3 = ((vec4<f32>(x_892.x, x_892.y, x_892.x, x_892.y) * vec4<f32>(x_895.z, x_895.z, x_895.z, x_895.z)) + vec4<f32>(2.082999945f, 4.867000103f, 4.165999889f, 9.734000206f));
  let x_904 : vec4<f32> = u_xlat3;
  u_xlat3.x = dot(vec2<f32>(x_904.x, x_904.y), vec2<f32>(0.067110561f, 0.00583715f));
  let x_909 : f32 = u_xlat3.x;
  u_xlat3.x = fract(x_909);
  let x_913 : f32 = u_xlat3.x;
  u_xlat3.x = (x_913 * 52.982917786f);
  let x_917 : f32 = u_xlat3.x;
  u_xlat3.x = fract(x_917);
  let x_920 : vec4<f32> = u_xlat3;
  let x_925 : vec2<f32> = (vec2<f32>(x_920.x, x_920.x) + vec2<f32>(0.33984375f, 0.76171875f));
  let x_926 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_925.x, x_925.y, x_926.z, x_926.w);
  let x_929 : f32 = u_xlat3.x;
  u_xlat3.x = fract(x_929);
  let x_933 : f32 = u_xlat3.x;
  u_xlat4.z = ((x_933 * 2.0f) + -1.0f);
  let x_938 : f32 = u_xlat3.y;
  u_xlat3.x = (x_938 * 6.283185482f);
  let x_942 : f32 = u_xlat4.z;
  let x_945 : f32 = u_xlat4.z;
  u_xlat10.x = ((-(x_942) * x_945) + 1.0f);
  let x_950 : f32 = u_xlat10.x;
  u_xlat10.x = sqrt(x_950);
  let x_954 : f32 = u_xlat3.x;
  u_xlat5.x = cos(x_954);
  let x_958 : f32 = u_xlat3.x;
  u_xlat3.x = sin(x_958);
  let x_962 : f32 = u_xlat10.x;
  let x_964 : f32 = u_xlat5.x;
  u_xlat4.x = (x_962 * x_964);
  let x_968 : f32 = u_xlat3.x;
  let x_970 : f32 = u_xlat10.x;
  u_xlat4.y = (x_968 * x_970);
  let x_973 : vec3<f32> = u_xlat4;
  u_xlat4 = (x_973 * vec3<f32>(0.5f, 0.5f, 0.5f));
  let x_976 : vec4<f32> = u_xlat2;
  let x_979 : vec3<f32> = u_xlat4;
  u_xlat3.x = dot(-(vec3<f32>(x_976.x, x_976.y, x_976.z)), x_979);
  let x_984 : f32 = u_xlat3.x;
  u_xlatb3 = (x_984 >= 0.0f);
  let x_986 : bool = u_xlatb3;
  if (x_986) {
    let x_990 : vec3<f32> = u_xlat4;
    x_987 = -(x_990);
  } else {
    let x_993 : vec3<f32> = u_xlat4;
    x_987 = x_993;
  }
  let x_994 : vec3<f32> = x_987;
  u_xlat4 = x_994;
  let x_995 : vec3<f32> = u_xlat4;
  let x_997 : vec4<f32> = x_34.x_SSAOParams;
  let x_1000 : vec3<f32> = u_xlat1;
  u_xlat4 = ((x_995 * vec3<f32>(x_997.y, x_997.y, x_997.y)) + x_1000);
  let x_1002 : vec3<f32> = u_xlat4;
  let x_1005 : vec4<f32> = x_34.x_CameraViewProjections[0i][1i];
  let x_1007 : vec2<f32> = (vec2<f32>(x_1002.y, x_1002.y) * vec2<f32>(x_1005.x, x_1005.y));
  let x_1008 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_1007.x, x_1007.y, x_1008.z, x_1008.w);
  let x_1011 : vec4<f32> = x_34.x_CameraViewProjections[0i][0i];
  let x_1013 : vec3<f32> = u_xlat4;
  let x_1016 : vec4<f32> = u_xlat3;
  let x_1018 : vec2<f32> = ((vec2<f32>(x_1011.x, x_1011.y) * vec2<f32>(x_1013.x, x_1013.x)) + vec2<f32>(x_1016.x, x_1016.y));
  let x_1019 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_1018.x, x_1018.y, x_1019.z, x_1019.w);
  let x_1022 : vec4<f32> = x_34.x_CameraViewProjections[0i][2i];
  let x_1024 : vec3<f32> = u_xlat4;
  let x_1027 : vec4<f32> = u_xlat3;
  let x_1029 : vec2<f32> = ((vec2<f32>(x_1022.x, x_1022.y) * vec2<f32>(x_1024.z, x_1024.z)) + vec2<f32>(x_1027.x, x_1027.y));
  let x_1030 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_1029.x, x_1029.y, x_1030.z, x_1030.w);
  let x_1032 : vec4<f32> = u_xlat3;
  let x_1034 : vec2<f32> = (vec2<f32>(x_1032.x, x_1032.y) + vec2<f32>(1.0f, 1.0f));
  let x_1035 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_1034.x, x_1034.y, x_1035.z, x_1035.w);
  let x_1037 : vec4<f32> = u_xlat3;
  let x_1039 : vec2<f32> = (vec2<f32>(x_1037.x, x_1037.y) * vec2<f32>(0.5f, 0.5f));
  let x_1040 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_1039.x, x_1039.y, x_1040.z, x_1040.w);
  let x_1042 : vec4<f32> = u_xlat3;
  let x_1046 : vec2<f32> = clamp(vec2<f32>(x_1042.x, x_1042.y), vec2<f32>(0.0f, 0.0f), vec2<f32>(1.0f, 1.0f));
  let x_1047 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_1046.x, x_1046.y, x_1047.z, x_1047.w);
  let x_1052 : vec4<f32> = u_xlat3;
  let x_1055 : f32 = x_34.x_GlobalMipBias.x;
  let x_1056 : vec4<f32> = textureSampleBias(x_CameraDepthTexture, sampler_CameraDepthTexture, vec2<f32>(x_1052.x, x_1052.y), x_1055);
  u_xlat4.x = x_1056.x;
  let x_1061 : f32 = u_xlat7.x;
  let x_1064 : f32 = u_xlat4.x;
  let x_1067 : f32 = x_34.x_ProjectionParams.z;
  u_xlat11.x = ((-(x_1061) * x_1064) + x_1067);
  let x_1071 : f32 = u_xlat0;
  let x_1073 : f32 = u_xlat11.x;
  u_xlat18 = (x_1071 + -(x_1073));
  let x_1079 : f32 = u_xlat18;
  let x_1082 : f32 = x_34.x_SSAOParams.y;
  u_xlatb4.z = (abs(x_1079) < x_1082);
  let x_1086 : f32 = u_xlat4.x;
  u_xlatb4.x = (0.00001f < x_1086);
  let x_1090 : bool = u_xlatb4.x;
  u_xlat4.x = select(0.0f, 1.0f, x_1090);
  let x_1094 : bool = u_xlatb4.z;
  u_xlat4.z = select(0.0f, 1.0f, x_1094);
  let x_1098 : f32 = u_xlat4.x;
  let x_1100 : f32 = u_xlat4.z;
  u_xlat4.x = (x_1098 * x_1100);
  let x_1104 : f32 = u_xlat3.y;
  u_xlat10.x = (-(x_1104) + 1.0f);
  let x_1109 : f32 = u_xlat11.x;
  let x_1111 : f32 = x_34.x_ProjectionParams.w;
  u_xlat11.x = (x_1109 * x_1111);
  let x_1115 : vec4<f32> = x_34.x_CameraViewXExtent[0i];
  let x_1117 : vec4<f32> = u_xlat3;
  let x_1121 : vec4<f32> = x_34.x_CameraViewTopLeftCorner[0i];
  u_xlat5 = ((vec3<f32>(x_1115.x, x_1115.y, x_1115.z) * vec3<f32>(x_1117.x, x_1117.x, x_1117.x)) + vec3<f32>(x_1121.x, x_1121.y, x_1121.z));
  let x_1125 : vec4<f32> = x_34.x_CameraViewYExtent[0i];
  let x_1127 : vec3<f32> = u_xlat10;
  let x_1130 : vec3<f32> = u_xlat5;
  u_xlat5 = ((vec3<f32>(x_1125.x, x_1125.y, x_1125.z) * vec3<f32>(x_1127.x, x_1127.x, x_1127.x)) + x_1130);
  let x_1133 : vec4<f32> = x_34.x_CameraViewZExtent[0i];
  let x_1135 : vec3<f32> = u_xlat11;
  let x_1138 : vec3<f32> = u_xlat5;
  u_xlat11 = ((vec3<f32>(x_1133.x, x_1133.y, x_1133.z) * vec3<f32>(x_1135.x, x_1135.x, x_1135.x)) + x_1138);
  let x_1140 : vec3<f32> = u_xlat1;
  let x_1142 : vec3<f32> = u_xlat11;
  u_xlat11 = (-(x_1140) + x_1142);
  let x_1144 : vec3<f32> = u_xlat11;
  let x_1145 : vec4<f32> = u_xlat2;
  u_xlat3.x = dot(x_1144, vec3<f32>(x_1145.x, x_1145.y, x_1145.z));
  let x_1149 : f32 = u_xlat0;
  let x_1153 : f32 = u_xlat3.x;
  u_xlat3.x = ((-(x_1149) * 0.004f) + x_1153);
  let x_1157 : f32 = u_xlat3.x;
  u_xlat3.x = max(x_1157, 0.0f);
  let x_1160 : vec3<f32> = u_xlat11;
  let x_1161 : vec3<f32> = u_xlat11;
  u_xlat10.x = dot(x_1160, x_1161);
  let x_1165 : f32 = u_xlat10.x;
  u_xlat10.x = (x_1165 + 0.0001f);
  let x_1169 : f32 = u_xlat10.x;
  u_xlat10.x = (1.0f / x_1169);
  let x_1173 : f32 = u_xlat10.x;
  let x_1175 : f32 = u_xlat3.x;
  u_xlat3.x = (x_1173 * x_1175);
  let x_1179 : f32 = u_xlat4.x;
  let x_1181 : f32 = u_xlat3.x;
  u_xlat3.x = (x_1179 * x_1181);
  let x_1184 : f32 = u_xlat23;
  let x_1185 : f32 = u_xlat22;
  let x_1188 : f32 = u_xlat3.x;
  u_xlat22 = ((x_1184 * x_1185) + x_1188);
  let x_1190 : vec4<f32> = u_xlat3;
  u_xlat23 = dot(vec2<f32>(x_1190.z, x_1190.w), vec2<f32>(0.067110561f, 0.00583715f));
  let x_1193 : f32 = u_xlat23;
  u_xlat23 = fract(x_1193);
  let x_1195 : f32 = u_xlat23;
  u_xlat23 = (x_1195 * 52.982917786f);
  let x_1197 : f32 = u_xlat23;
  u_xlat23 = fract(x_1197);
  let x_1199 : f32 = u_xlat23;
  let x_1204 : vec2<f32> = (vec2<f32>(x_1199, x_1199) + vec2<f32>(0.75390625f, 0.133333296f));
  let x_1205 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_1204.x, x_1204.y, x_1205.z, x_1205.w);
  let x_1208 : f32 = u_xlat3.x;
  u_xlat23 = fract(x_1208);
  let x_1210 : f32 = u_xlat23;
  u_xlat4.z = ((x_1210 * 2.0f) + -1.0f);
  let x_1215 : f32 = u_xlat3.y;
  u_xlat23 = (x_1215 * 6.283185482f);
  let x_1218 : f32 = u_xlat4.z;
  let x_1221 : f32 = u_xlat4.z;
  u_xlat3.x = ((-(x_1218) * x_1221) + 1.0f);
  let x_1226 : f32 = u_xlat3.x;
  u_xlat3.x = sqrt(x_1226);
  let x_1229 : f32 = u_xlat23;
  u_xlat5.x = sin(x_1229);
  let x_1232 : f32 = u_xlat23;
  u_xlat6.x = cos(x_1232);
  let x_1236 : f32 = u_xlat3.x;
  let x_1238 : f32 = u_xlat6.x;
  u_xlat4.x = (x_1236 * x_1238);
  let x_1242 : f32 = u_xlat3.x;
  let x_1244 : f32 = u_xlat5.x;
  u_xlat4.y = (x_1242 * x_1244);
  let x_1247 : vec3<f32> = u_xlat4;
  let x_1250 : vec3<f32> = (x_1247 * vec3<f32>(0.612372458f, 0.612372458f, 0.612372458f));
  let x_1251 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_1250.x, x_1250.y, x_1250.z, x_1251.w);
  let x_1253 : vec4<f32> = u_xlat2;
  let x_1256 : vec4<f32> = u_xlat3;
  u_xlat23 = dot(-(vec3<f32>(x_1253.x, x_1253.y, x_1253.z)), vec3<f32>(x_1256.x, x_1256.y, x_1256.z));
  let x_1260 : f32 = u_xlat23;
  u_xlatb23 = (x_1260 >= 0.0f);
  let x_1262 : bool = u_xlatb23;
  if (x_1262) {
    let x_1266 : vec4<f32> = u_xlat3;
    x_1263 = -(vec3<f32>(x_1266.x, x_1266.y, x_1266.z));
  } else {
    let x_1270 : vec4<f32> = u_xlat3;
    x_1263 = vec3<f32>(x_1270.x, x_1270.y, x_1270.z);
  }
  let x_1272 : vec3<f32> = x_1263;
  let x_1273 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_1272.x, x_1272.y, x_1272.z, x_1273.w);
  let x_1275 : vec4<f32> = u_xlat3;
  let x_1278 : vec4<f32> = x_34.x_SSAOParams;
  let x_1281 : vec3<f32> = u_xlat1;
  let x_1282 : vec3<f32> = ((vec3<f32>(x_1275.x, x_1275.y, x_1275.z) * vec3<f32>(x_1278.y, x_1278.y, x_1278.y)) + x_1281);
  let x_1283 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_1282.x, x_1282.y, x_1282.z, x_1283.w);
  let x_1285 : vec4<f32> = u_xlat3;
  let x_1288 : vec4<f32> = x_34.x_CameraViewProjections[0i][1i];
  let x_1290 : vec2<f32> = (vec2<f32>(x_1285.y, x_1285.y) * vec2<f32>(x_1288.x, x_1288.y));
  let x_1291 : vec3<f32> = u_xlat10;
  u_xlat10 = vec3<f32>(x_1290.x, x_1291.y, x_1290.y);
  let x_1294 : vec4<f32> = x_34.x_CameraViewProjections[0i][0i];
  let x_1296 : vec4<f32> = u_xlat3;
  let x_1299 : vec3<f32> = u_xlat10;
  let x_1301 : vec2<f32> = ((vec2<f32>(x_1294.x, x_1294.y) * vec2<f32>(x_1296.x, x_1296.x)) + vec2<f32>(x_1299.x, x_1299.z));
  let x_1302 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_1301.x, x_1301.y, x_1302.z, x_1302.w);
  let x_1305 : vec4<f32> = x_34.x_CameraViewProjections[0i][2i];
  let x_1307 : vec4<f32> = u_xlat3;
  let x_1310 : vec4<f32> = u_xlat3;
  let x_1312 : vec2<f32> = ((vec2<f32>(x_1305.x, x_1305.y) * vec2<f32>(x_1307.z, x_1307.z)) + vec2<f32>(x_1310.x, x_1310.y));
  let x_1313 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_1312.x, x_1312.y, x_1313.z, x_1313.w);
  let x_1315 : vec4<f32> = u_xlat3;
  let x_1317 : vec2<f32> = (vec2<f32>(x_1315.x, x_1315.y) + vec2<f32>(1.0f, 1.0f));
  let x_1318 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_1317.x, x_1317.y, x_1318.z, x_1318.w);
  let x_1320 : vec4<f32> = u_xlat3;
  let x_1322 : vec2<f32> = (vec2<f32>(x_1320.x, x_1320.y) * vec2<f32>(0.5f, 0.5f));
  let x_1323 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_1322.x, x_1322.y, x_1323.z, x_1323.w);
  let x_1325 : vec4<f32> = u_xlat3;
  let x_1329 : vec2<f32> = clamp(vec2<f32>(x_1325.x, x_1325.y), vec2<f32>(0.0f, 0.0f), vec2<f32>(1.0f, 1.0f));
  let x_1330 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_1329.x, x_1329.y, x_1330.z, x_1330.w);
  let x_1335 : vec4<f32> = u_xlat3;
  let x_1338 : f32 = x_34.x_GlobalMipBias.x;
  let x_1339 : vec4<f32> = textureSampleBias(x_CameraDepthTexture, sampler_CameraDepthTexture, vec2<f32>(x_1335.x, x_1335.y), x_1338);
  u_xlat23 = x_1339.x;
  let x_1342 : f32 = u_xlat7.x;
  let x_1344 : f32 = u_xlat23;
  let x_1347 : f32 = x_34.x_ProjectionParams.z;
  u_xlat17.x = ((-(x_1342) * x_1344) + x_1347);
  let x_1351 : f32 = u_xlat0;
  let x_1353 : f32 = u_xlat17.x;
  u_xlat24 = (x_1351 + -(x_1353));
  let x_1357 : f32 = u_xlat24;
  let x_1360 : f32 = x_34.x_SSAOParams.y;
  u_xlatb24 = (abs(x_1357) < x_1360);
  let x_1362 : bool = u_xlatb24;
  u_xlat24 = select(0.0f, 1.0f, x_1362);
  let x_1364 : f32 = u_xlat23;
  u_xlatb23 = (0.00001f < x_1364);
  let x_1366 : bool = u_xlatb23;
  u_xlat23 = select(0.0f, 1.0f, x_1366);
  let x_1368 : f32 = u_xlat23;
  let x_1369 : f32 = u_xlat24;
  u_xlat23 = (x_1368 * x_1369);
  let x_1372 : f32 = u_xlat3.y;
  u_xlat10.x = (-(x_1372) + 1.0f);
  let x_1377 : f32 = u_xlat17.x;
  let x_1379 : f32 = x_34.x_ProjectionParams.w;
  u_xlat17.x = (x_1377 * x_1379);
  let x_1383 : vec4<f32> = x_34.x_CameraViewXExtent[0i];
  let x_1385 : vec4<f32> = u_xlat3;
  let x_1389 : vec4<f32> = x_34.x_CameraViewTopLeftCorner[0i];
  u_xlat4 = ((vec3<f32>(x_1383.x, x_1383.y, x_1383.z) * vec3<f32>(x_1385.x, x_1385.x, x_1385.x)) + vec3<f32>(x_1389.x, x_1389.y, x_1389.z));
  let x_1393 : vec4<f32> = x_34.x_CameraViewYExtent[0i];
  let x_1395 : vec3<f32> = u_xlat10;
  let x_1398 : vec3<f32> = u_xlat4;
  let x_1399 : vec3<f32> = ((vec3<f32>(x_1393.x, x_1393.y, x_1393.z) * vec3<f32>(x_1395.x, x_1395.x, x_1395.x)) + x_1398);
  let x_1400 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_1399.x, x_1399.y, x_1400.z, x_1399.z);
  let x_1403 : vec4<f32> = x_34.x_CameraViewZExtent[0i];
  let x_1405 : vec2<f32> = u_xlat17;
  let x_1408 : vec4<f32> = u_xlat3;
  let x_1410 : vec3<f32> = ((vec3<f32>(x_1403.x, x_1403.y, x_1403.z) * vec3<f32>(x_1405.x, x_1405.x, x_1405.x)) + vec3<f32>(x_1408.x, x_1408.y, x_1408.w));
  let x_1411 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_1410.x, x_1410.y, x_1410.z, x_1411.w);
  let x_1413 : vec3<f32> = u_xlat1;
  let x_1415 : vec4<f32> = u_xlat3;
  let x_1417 : vec3<f32> = (-(x_1413) + vec3<f32>(x_1415.x, x_1415.y, x_1415.z));
  let x_1418 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_1417.x, x_1417.y, x_1417.z, x_1418.w);
  let x_1420 : vec4<f32> = u_xlat3;
  let x_1422 : vec4<f32> = u_xlat2;
  u_xlat24 = dot(vec3<f32>(x_1420.x, x_1420.y, x_1420.z), vec3<f32>(x_1422.x, x_1422.y, x_1422.z));
  let x_1425 : f32 = u_xlat0;
  let x_1428 : f32 = u_xlat24;
  u_xlat24 = ((-(x_1425) * 0.004f) + x_1428);
  let x_1430 : f32 = u_xlat24;
  u_xlat24 = max(x_1430, 0.0f);
  let x_1432 : vec4<f32> = u_xlat3;
  let x_1434 : vec4<f32> = u_xlat3;
  u_xlat3.x = dot(vec3<f32>(x_1432.x, x_1432.y, x_1432.z), vec3<f32>(x_1434.x, x_1434.y, x_1434.z));
  let x_1439 : f32 = u_xlat3.x;
  u_xlat3.x = (x_1439 + 0.0001f);
  let x_1443 : f32 = u_xlat3.x;
  u_xlat3.x = (1.0f / x_1443);
  let x_1447 : f32 = u_xlat3.x;
  let x_1448 : f32 = u_xlat24;
  u_xlat3.x = (x_1447 * x_1448);
  let x_1452 : f32 = u_xlat3.x;
  let x_1453 : f32 = u_xlat23;
  let x_1455 : f32 = u_xlat22;
  u_xlat22 = ((x_1452 * x_1453) + x_1455);
  let x_1457 : vec2<f32> = u_xlat14;
  let x_1460 : vec4<f32> = x_34.x_SSAOParams;
  u_xlat3 = ((vec4<f32>(x_1457.x, x_1457.y, x_1457.x, x_1457.y) * vec4<f32>(x_1460.z, x_1460.z, x_1460.z, x_1460.z)) + vec4<f32>(6.248999596f, 14.600999832f, 8.331999779f, 19.468000412f));
  let x_1469 : vec4<f32> = u_xlat3;
  u_xlat23 = dot(vec2<f32>(x_1469.x, x_1469.y), vec2<f32>(0.067110561f, 0.00583715f));
  let x_1472 : f32 = u_xlat23;
  u_xlat23 = fract(x_1472);
  let x_1474 : f32 = u_xlat23;
  u_xlat23 = (x_1474 * 52.982917786f);
  let x_1476 : f32 = u_xlat23;
  u_xlat23 = fract(x_1476);
  let x_1478 : f32 = u_xlat23;
  let x_1483 : vec2<f32> = (vec2<f32>(x_1478, x_1478) + vec2<f32>(0.56640625f, 0.015625f));
  let x_1484 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_1483.x, x_1483.y, x_1484.z, x_1484.w);
  let x_1487 : f32 = u_xlat3.x;
  u_xlat23 = fract(x_1487);
  let x_1489 : f32 = u_xlat23;
  u_xlat4.z = ((x_1489 * 2.0f) + -1.0f);
  let x_1494 : f32 = u_xlat3.y;
  u_xlat23 = (x_1494 * 6.283185482f);
  let x_1497 : f32 = u_xlat4.z;
  let x_1500 : f32 = u_xlat4.z;
  u_xlat3.x = ((-(x_1497) * x_1500) + 1.0f);
  let x_1505 : f32 = u_xlat3.x;
  u_xlat3.x = sqrt(x_1505);
  let x_1508 : f32 = u_xlat23;
  u_xlat5.x = sin(x_1508);
  let x_1511 : f32 = u_xlat23;
  u_xlat6.x = cos(x_1511);
  let x_1515 : f32 = u_xlat3.x;
  let x_1517 : f32 = u_xlat6.x;
  u_xlat4.x = (x_1515 * x_1517);
  let x_1521 : f32 = u_xlat3.x;
  let x_1523 : f32 = u_xlat5.x;
  u_xlat4.y = (x_1521 * x_1523);
  let x_1526 : vec3<f32> = u_xlat4;
  u_xlat4 = (x_1526 * vec3<f32>(0.707106769f, 0.707106769f, 0.707106769f));
  let x_1530 : vec4<f32> = u_xlat2;
  let x_1533 : vec3<f32> = u_xlat4;
  u_xlat23 = dot(-(vec3<f32>(x_1530.x, x_1530.y, x_1530.z)), x_1533);
  let x_1535 : f32 = u_xlat23;
  u_xlatb23 = (x_1535 >= 0.0f);
  let x_1537 : bool = u_xlatb23;
  if (x_1537) {
    let x_1541 : vec3<f32> = u_xlat4;
    x_1538 = -(x_1541);
  } else {
    let x_1544 : vec3<f32> = u_xlat4;
    x_1538 = x_1544;
  }
  let x_1545 : vec3<f32> = x_1538;
  u_xlat4 = x_1545;
  let x_1546 : vec3<f32> = u_xlat4;
  let x_1548 : vec4<f32> = x_34.x_SSAOParams;
  let x_1551 : vec3<f32> = u_xlat1;
  u_xlat4 = ((x_1546 * vec3<f32>(x_1548.y, x_1548.y, x_1548.y)) + x_1551);
  let x_1553 : vec3<f32> = u_xlat4;
  let x_1556 : vec4<f32> = x_34.x_CameraViewProjections[0i][1i];
  let x_1558 : vec2<f32> = (vec2<f32>(x_1553.y, x_1553.y) * vec2<f32>(x_1556.x, x_1556.y));
  let x_1559 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_1558.x, x_1558.y, x_1559.z, x_1559.w);
  let x_1562 : vec4<f32> = x_34.x_CameraViewProjections[0i][0i];
  let x_1564 : vec3<f32> = u_xlat4;
  let x_1567 : vec4<f32> = u_xlat3;
  let x_1569 : vec2<f32> = ((vec2<f32>(x_1562.x, x_1562.y) * vec2<f32>(x_1564.x, x_1564.x)) + vec2<f32>(x_1567.x, x_1567.y));
  let x_1570 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_1569.x, x_1569.y, x_1570.z, x_1570.w);
  let x_1573 : vec4<f32> = x_34.x_CameraViewProjections[0i][2i];
  let x_1575 : vec3<f32> = u_xlat4;
  let x_1578 : vec4<f32> = u_xlat3;
  let x_1580 : vec2<f32> = ((vec2<f32>(x_1573.x, x_1573.y) * vec2<f32>(x_1575.z, x_1575.z)) + vec2<f32>(x_1578.x, x_1578.y));
  let x_1581 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_1580.x, x_1580.y, x_1581.z, x_1581.w);
  let x_1583 : vec4<f32> = u_xlat3;
  let x_1585 : vec2<f32> = (vec2<f32>(x_1583.x, x_1583.y) + vec2<f32>(1.0f, 1.0f));
  let x_1586 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_1585.x, x_1585.y, x_1586.z, x_1586.w);
  let x_1588 : vec4<f32> = u_xlat3;
  let x_1590 : vec2<f32> = (vec2<f32>(x_1588.x, x_1588.y) * vec2<f32>(0.5f, 0.5f));
  let x_1591 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_1590.x, x_1590.y, x_1591.z, x_1591.w);
  let x_1593 : vec4<f32> = u_xlat3;
  let x_1597 : vec2<f32> = clamp(vec2<f32>(x_1593.x, x_1593.y), vec2<f32>(0.0f, 0.0f), vec2<f32>(1.0f, 1.0f));
  let x_1598 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_1597.x, x_1597.y, x_1598.z, x_1598.w);
  let x_1603 : vec4<f32> = u_xlat3;
  let x_1606 : f32 = x_34.x_GlobalMipBias.x;
  let x_1607 : vec4<f32> = textureSampleBias(x_CameraDepthTexture, sampler_CameraDepthTexture, vec2<f32>(x_1603.x, x_1603.y), x_1606);
  u_xlat23 = x_1607.x;
  let x_1610 : f32 = u_xlat7.x;
  let x_1612 : f32 = u_xlat23;
  let x_1615 : f32 = x_34.x_ProjectionParams.z;
  u_xlat4.x = ((-(x_1610) * x_1612) + x_1615);
  let x_1618 : f32 = u_xlat0;
  let x_1620 : f32 = u_xlat4.x;
  u_xlat11.x = (x_1618 + -(x_1620));
  let x_1626 : f32 = u_xlat11.x;
  let x_1629 : f32 = x_34.x_SSAOParams.y;
  u_xlatb11 = (abs(x_1626) < x_1629);
  let x_1631 : bool = u_xlatb11;
  u_xlat11.x = select(0.0f, 1.0f, x_1631);
  let x_1634 : f32 = u_xlat23;
  u_xlatb23 = (0.00001f < x_1634);
  let x_1636 : bool = u_xlatb23;
  u_xlat23 = select(0.0f, 1.0f, x_1636);
  let x_1638 : f32 = u_xlat23;
  let x_1640 : f32 = u_xlat11.x;
  u_xlat23 = (x_1638 * x_1640);
  let x_1643 : f32 = u_xlat3.y;
  u_xlat10.x = (-(x_1643) + 1.0f);
  let x_1648 : f32 = u_xlat4.x;
  let x_1650 : f32 = x_34.x_ProjectionParams.w;
  u_xlat4.x = (x_1648 * x_1650);
  let x_1654 : vec4<f32> = x_34.x_CameraViewXExtent[0i];
  let x_1656 : vec4<f32> = u_xlat3;
  let x_1660 : vec4<f32> = x_34.x_CameraViewTopLeftCorner[0i];
  u_xlat11 = ((vec3<f32>(x_1654.x, x_1654.y, x_1654.z) * vec3<f32>(x_1656.x, x_1656.x, x_1656.x)) + vec3<f32>(x_1660.x, x_1660.y, x_1660.z));
  let x_1664 : vec4<f32> = x_34.x_CameraViewYExtent[0i];
  let x_1666 : vec3<f32> = u_xlat10;
  let x_1669 : vec3<f32> = u_xlat11;
  u_xlat11 = ((vec3<f32>(x_1664.x, x_1664.y, x_1664.z) * vec3<f32>(x_1666.x, x_1666.x, x_1666.x)) + x_1669);
  let x_1672 : vec4<f32> = x_34.x_CameraViewZExtent[0i];
  let x_1674 : vec3<f32> = u_xlat4;
  let x_1677 : vec3<f32> = u_xlat11;
  u_xlat4 = ((vec3<f32>(x_1672.x, x_1672.y, x_1672.z) * vec3<f32>(x_1674.x, x_1674.x, x_1674.x)) + x_1677);
  let x_1679 : vec3<f32> = u_xlat1;
  let x_1681 : vec3<f32> = u_xlat4;
  u_xlat4 = (-(x_1679) + x_1681);
  let x_1683 : vec3<f32> = u_xlat4;
  let x_1684 : vec4<f32> = u_xlat2;
  u_xlat3.x = dot(x_1683, vec3<f32>(x_1684.x, x_1684.y, x_1684.z));
  let x_1688 : f32 = u_xlat0;
  let x_1692 : f32 = u_xlat3.x;
  u_xlat3.x = ((-(x_1688) * 0.004f) + x_1692);
  let x_1696 : f32 = u_xlat3.x;
  u_xlat3.x = max(x_1696, 0.0f);
  let x_1699 : vec3<f32> = u_xlat4;
  let x_1700 : vec3<f32> = u_xlat4;
  u_xlat10.x = dot(x_1699, x_1700);
  let x_1704 : f32 = u_xlat10.x;
  u_xlat10.x = (x_1704 + 0.0001f);
  let x_1708 : f32 = u_xlat10.x;
  u_xlat10.x = (1.0f / x_1708);
  let x_1712 : f32 = u_xlat10.x;
  let x_1714 : f32 = u_xlat3.x;
  u_xlat3.x = (x_1712 * x_1714);
  let x_1718 : f32 = u_xlat3.x;
  let x_1719 : f32 = u_xlat23;
  let x_1721 : f32 = u_xlat22;
  u_xlat22 = ((x_1718 * x_1719) + x_1721);
  let x_1723 : vec4<f32> = u_xlat3;
  u_xlat23 = dot(vec2<f32>(x_1723.z, x_1723.w), vec2<f32>(0.067110561f, 0.00583715f));
  let x_1726 : f32 = u_xlat23;
  u_xlat23 = fract(x_1726);
  let x_1728 : f32 = u_xlat23;
  u_xlat23 = (x_1728 * 52.982917786f);
  let x_1730 : f32 = u_xlat23;
  u_xlat23 = fract(x_1730);
  let x_1732 : f32 = u_xlat23;
  u_xlat3.x = (x_1732 + 0.984375f);
  let x_1737 : f32 = u_xlat3.x;
  u_xlat3.x = fract(x_1737);
  let x_1741 : f32 = u_xlat3.x;
  u_xlat3.z = ((x_1741 * 2.0f) + -1.0f);
  let x_1745 : f32 = u_xlat23;
  u_xlat23 = (x_1745 * 6.283185482f);
  let x_1748 : f32 = u_xlat3.z;
  let x_1751 : f32 = u_xlat3.z;
  u_xlat24 = ((-(x_1748) * x_1751) + 1.0f);
  let x_1754 : f32 = u_xlat24;
  u_xlat24 = sqrt(x_1754);
  let x_1756 : f32 = u_xlat23;
  u_xlat4.x = sin(x_1756);
  let x_1759 : f32 = u_xlat23;
  u_xlat5.x = cos(x_1759);
  let x_1762 : f32 = u_xlat24;
  let x_1764 : f32 = u_xlat5.x;
  u_xlat3.x = (x_1762 * x_1764);
  let x_1767 : f32 = u_xlat24;
  let x_1769 : f32 = u_xlat4.x;
  u_xlat3.y = (x_1767 * x_1769);
  let x_1772 : vec4<f32> = u_xlat3;
  let x_1776 : vec3<f32> = (vec3<f32>(x_1772.x, x_1772.y, x_1772.z) * vec3<f32>(0.790569425f, 0.790569425f, 0.790569425f));
  let x_1777 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_1776.x, x_1776.y, x_1776.z, x_1777.w);
  let x_1779 : vec4<f32> = u_xlat2;
  let x_1782 : vec4<f32> = u_xlat3;
  u_xlat23 = dot(-(vec3<f32>(x_1779.x, x_1779.y, x_1779.z)), vec3<f32>(x_1782.x, x_1782.y, x_1782.z));
  let x_1785 : f32 = u_xlat23;
  u_xlatb23 = (x_1785 >= 0.0f);
  let x_1787 : bool = u_xlatb23;
  if (x_1787) {
    let x_1791 : vec4<f32> = u_xlat3;
    x_1788 = -(vec3<f32>(x_1791.x, x_1791.y, x_1791.z));
  } else {
    let x_1795 : vec4<f32> = u_xlat3;
    x_1788 = vec3<f32>(x_1795.x, x_1795.y, x_1795.z);
  }
  let x_1797 : vec3<f32> = x_1788;
  let x_1798 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_1797.x, x_1797.y, x_1797.z, x_1798.w);
  let x_1800 : vec4<f32> = u_xlat3;
  let x_1803 : vec4<f32> = x_34.x_SSAOParams;
  let x_1806 : vec3<f32> = u_xlat1;
  let x_1807 : vec3<f32> = ((vec3<f32>(x_1800.x, x_1800.y, x_1800.z) * vec3<f32>(x_1803.y, x_1803.y, x_1803.y)) + x_1806);
  let x_1808 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_1807.x, x_1807.y, x_1807.z, x_1808.w);
  let x_1810 : vec4<f32> = u_xlat3;
  let x_1813 : vec4<f32> = x_34.x_CameraViewProjections[0i][1i];
  let x_1815 : vec2<f32> = (vec2<f32>(x_1810.y, x_1810.y) * vec2<f32>(x_1813.x, x_1813.y));
  let x_1816 : vec3<f32> = u_xlat10;
  u_xlat10 = vec3<f32>(x_1815.x, x_1816.y, x_1815.y);
  let x_1819 : vec4<f32> = x_34.x_CameraViewProjections[0i][0i];
  let x_1821 : vec4<f32> = u_xlat3;
  let x_1824 : vec3<f32> = u_xlat10;
  let x_1826 : vec2<f32> = ((vec2<f32>(x_1819.x, x_1819.y) * vec2<f32>(x_1821.x, x_1821.x)) + vec2<f32>(x_1824.x, x_1824.z));
  let x_1827 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_1826.x, x_1826.y, x_1827.z, x_1827.w);
  let x_1830 : vec4<f32> = x_34.x_CameraViewProjections[0i][2i];
  let x_1832 : vec4<f32> = u_xlat3;
  let x_1835 : vec4<f32> = u_xlat3;
  let x_1837 : vec2<f32> = ((vec2<f32>(x_1830.x, x_1830.y) * vec2<f32>(x_1832.z, x_1832.z)) + vec2<f32>(x_1835.x, x_1835.y));
  let x_1838 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_1837.x, x_1837.y, x_1838.z, x_1838.w);
  let x_1840 : vec4<f32> = u_xlat3;
  let x_1842 : vec2<f32> = (vec2<f32>(x_1840.x, x_1840.y) + vec2<f32>(1.0f, 1.0f));
  let x_1843 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_1842.x, x_1842.y, x_1843.z, x_1843.w);
  let x_1845 : vec4<f32> = u_xlat3;
  let x_1847 : vec2<f32> = (vec2<f32>(x_1845.x, x_1845.y) * vec2<f32>(0.5f, 0.5f));
  let x_1848 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_1847.x, x_1847.y, x_1848.z, x_1848.w);
  let x_1850 : vec4<f32> = u_xlat3;
  let x_1854 : vec2<f32> = clamp(vec2<f32>(x_1850.x, x_1850.y), vec2<f32>(0.0f, 0.0f), vec2<f32>(1.0f, 1.0f));
  let x_1855 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_1854.x, x_1854.y, x_1855.z, x_1855.w);
  let x_1860 : vec4<f32> = u_xlat3;
  let x_1863 : f32 = x_34.x_GlobalMipBias.x;
  let x_1864 : vec4<f32> = textureSampleBias(x_CameraDepthTexture, sampler_CameraDepthTexture, vec2<f32>(x_1860.x, x_1860.y), x_1863);
  u_xlat23 = x_1864.x;
  let x_1867 : f32 = u_xlat7.x;
  let x_1869 : f32 = u_xlat23;
  let x_1872 : f32 = x_34.x_ProjectionParams.z;
  u_xlat17.x = ((-(x_1867) * x_1869) + x_1872);
  let x_1875 : f32 = u_xlat0;
  let x_1877 : f32 = u_xlat17.x;
  u_xlat24 = (x_1875 + -(x_1877));
  let x_1880 : f32 = u_xlat24;
  let x_1883 : f32 = x_34.x_SSAOParams.y;
  u_xlatb24 = (abs(x_1880) < x_1883);
  let x_1885 : bool = u_xlatb24;
  u_xlat24 = select(0.0f, 1.0f, x_1885);
  let x_1887 : f32 = u_xlat23;
  u_xlatb23 = (0.00001f < x_1887);
  let x_1889 : bool = u_xlatb23;
  u_xlat23 = select(0.0f, 1.0f, x_1889);
  let x_1891 : f32 = u_xlat23;
  let x_1892 : f32 = u_xlat24;
  u_xlat23 = (x_1891 * x_1892);
  let x_1895 : f32 = u_xlat3.y;
  u_xlat10.x = (-(x_1895) + 1.0f);
  let x_1900 : f32 = u_xlat17.x;
  let x_1902 : f32 = x_34.x_ProjectionParams.w;
  u_xlat17.x = (x_1900 * x_1902);
  let x_1906 : vec4<f32> = x_34.x_CameraViewXExtent[0i];
  let x_1908 : vec4<f32> = u_xlat3;
  let x_1912 : vec4<f32> = x_34.x_CameraViewTopLeftCorner[0i];
  u_xlat4 = ((vec3<f32>(x_1906.x, x_1906.y, x_1906.z) * vec3<f32>(x_1908.x, x_1908.x, x_1908.x)) + vec3<f32>(x_1912.x, x_1912.y, x_1912.z));
  let x_1916 : vec4<f32> = x_34.x_CameraViewYExtent[0i];
  let x_1918 : vec3<f32> = u_xlat10;
  let x_1921 : vec3<f32> = u_xlat4;
  let x_1922 : vec3<f32> = ((vec3<f32>(x_1916.x, x_1916.y, x_1916.z) * vec3<f32>(x_1918.x, x_1918.x, x_1918.x)) + x_1921);
  let x_1923 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_1922.x, x_1922.y, x_1923.z, x_1922.z);
  let x_1926 : vec4<f32> = x_34.x_CameraViewZExtent[0i];
  let x_1928 : vec2<f32> = u_xlat17;
  let x_1931 : vec4<f32> = u_xlat3;
  let x_1933 : vec3<f32> = ((vec3<f32>(x_1926.x, x_1926.y, x_1926.z) * vec3<f32>(x_1928.x, x_1928.x, x_1928.x)) + vec3<f32>(x_1931.x, x_1931.y, x_1931.w));
  let x_1934 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_1933.x, x_1933.y, x_1933.z, x_1934.w);
  let x_1936 : vec3<f32> = u_xlat1;
  let x_1938 : vec4<f32> = u_xlat3;
  let x_1940 : vec3<f32> = (-(x_1936) + vec3<f32>(x_1938.x, x_1938.y, x_1938.z));
  let x_1941 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_1940.x, x_1940.y, x_1940.z, x_1941.w);
  let x_1943 : vec4<f32> = u_xlat3;
  let x_1945 : vec4<f32> = u_xlat2;
  u_xlat24 = dot(vec3<f32>(x_1943.x, x_1943.y, x_1943.z), vec3<f32>(x_1945.x, x_1945.y, x_1945.z));
  let x_1948 : f32 = u_xlat0;
  let x_1951 : f32 = u_xlat24;
  u_xlat24 = ((-(x_1948) * 0.004f) + x_1951);
  let x_1953 : f32 = u_xlat24;
  u_xlat24 = max(x_1953, 0.0f);
  let x_1955 : vec4<f32> = u_xlat3;
  let x_1957 : vec4<f32> = u_xlat3;
  u_xlat3.x = dot(vec3<f32>(x_1955.x, x_1955.y, x_1955.z), vec3<f32>(x_1957.x, x_1957.y, x_1957.z));
  let x_1962 : f32 = u_xlat3.x;
  u_xlat3.x = (x_1962 + 0.0001f);
  let x_1966 : f32 = u_xlat3.x;
  u_xlat3.x = (1.0f / x_1966);
  let x_1970 : f32 = u_xlat3.x;
  let x_1971 : f32 = u_xlat24;
  u_xlat3.x = (x_1970 * x_1971);
  let x_1975 : f32 = u_xlat3.x;
  let x_1976 : f32 = u_xlat23;
  let x_1978 : f32 = u_xlat22;
  u_xlat22 = ((x_1975 * x_1976) + x_1978);
  let x_1980 : vec2<f32> = u_xlat14;
  let x_1983 : vec4<f32> = x_34.x_SSAOParams;
  u_xlat3 = ((vec4<f32>(x_1980.x, x_1980.y, x_1980.x, x_1980.y) * vec4<f32>(x_1983.z, x_1983.z, x_1983.z, x_1983.z)) + vec4<f32>(10.414999962f, 24.335000992f, 12.497999191f, 29.201999664f));
  let x_1992 : vec4<f32> = u_xlat3;
  u_xlat23 = dot(vec2<f32>(x_1992.x, x_1992.y), vec2<f32>(0.067110561f, 0.00583715f));
  let x_1995 : f32 = u_xlat23;
  u_xlat23 = fract(x_1995);
  let x_1997 : f32 = u_xlat23;
  u_xlat23 = (x_1997 * 52.982917786f);
  let x_1999 : f32 = u_xlat23;
  u_xlat23 = fract(x_1999);
  let x_2001 : f32 = u_xlat23;
  let x_2006 : vec2<f32> = (vec2<f32>(x_2001, x_2001) + vec2<f32>(0.07421875f, 0.10546875f));
  let x_2007 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_2006.x, x_2006.y, x_2007.z, x_2007.w);
  let x_2010 : f32 = u_xlat3.x;
  u_xlat23 = fract(x_2010);
  let x_2012 : f32 = u_xlat23;
  u_xlat4.z = ((x_2012 * 2.0f) + -1.0f);
  let x_2017 : f32 = u_xlat3.y;
  u_xlat23 = (x_2017 * 6.283185482f);
  let x_2020 : f32 = u_xlat4.z;
  let x_2023 : f32 = u_xlat4.z;
  u_xlat3.x = ((-(x_2020) * x_2023) + 1.0f);
  let x_2028 : f32 = u_xlat3.x;
  u_xlat3.x = sqrt(x_2028);
  let x_2031 : f32 = u_xlat23;
  u_xlat5.x = sin(x_2031);
  let x_2034 : f32 = u_xlat23;
  u_xlat6.x = cos(x_2034);
  let x_2038 : f32 = u_xlat3.x;
  let x_2040 : f32 = u_xlat6.x;
  u_xlat4.x = (x_2038 * x_2040);
  let x_2044 : f32 = u_xlat3.x;
  let x_2046 : f32 = u_xlat5.x;
  u_xlat4.y = (x_2044 * x_2046);
  let x_2049 : vec3<f32> = u_xlat4;
  u_xlat4 = (x_2049 * vec3<f32>(0.866025388f, 0.866025388f, 0.866025388f));
  let x_2053 : vec4<f32> = u_xlat2;
  let x_2056 : vec3<f32> = u_xlat4;
  u_xlat23 = dot(-(vec3<f32>(x_2053.x, x_2053.y, x_2053.z)), x_2056);
  let x_2058 : f32 = u_xlat23;
  u_xlatb23 = (x_2058 >= 0.0f);
  let x_2060 : bool = u_xlatb23;
  if (x_2060) {
    let x_2064 : vec3<f32> = u_xlat4;
    x_2061 = -(x_2064);
  } else {
    let x_2067 : vec3<f32> = u_xlat4;
    x_2061 = x_2067;
  }
  let x_2068 : vec3<f32> = x_2061;
  u_xlat4 = x_2068;
  let x_2069 : vec3<f32> = u_xlat4;
  let x_2071 : vec4<f32> = x_34.x_SSAOParams;
  let x_2074 : vec3<f32> = u_xlat1;
  u_xlat4 = ((x_2069 * vec3<f32>(x_2071.y, x_2071.y, x_2071.y)) + x_2074);
  let x_2076 : vec3<f32> = u_xlat4;
  let x_2079 : vec4<f32> = x_34.x_CameraViewProjections[0i][1i];
  let x_2081 : vec2<f32> = (vec2<f32>(x_2076.y, x_2076.y) * vec2<f32>(x_2079.x, x_2079.y));
  let x_2082 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_2081.x, x_2081.y, x_2082.z, x_2082.w);
  let x_2085 : vec4<f32> = x_34.x_CameraViewProjections[0i][0i];
  let x_2087 : vec3<f32> = u_xlat4;
  let x_2090 : vec4<f32> = u_xlat3;
  let x_2092 : vec2<f32> = ((vec2<f32>(x_2085.x, x_2085.y) * vec2<f32>(x_2087.x, x_2087.x)) + vec2<f32>(x_2090.x, x_2090.y));
  let x_2093 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_2092.x, x_2092.y, x_2093.z, x_2093.w);
  let x_2096 : vec4<f32> = x_34.x_CameraViewProjections[0i][2i];
  let x_2098 : vec3<f32> = u_xlat4;
  let x_2101 : vec4<f32> = u_xlat3;
  let x_2103 : vec2<f32> = ((vec2<f32>(x_2096.x, x_2096.y) * vec2<f32>(x_2098.z, x_2098.z)) + vec2<f32>(x_2101.x, x_2101.y));
  let x_2104 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_2103.x, x_2103.y, x_2104.z, x_2104.w);
  let x_2106 : vec4<f32> = u_xlat3;
  let x_2108 : vec2<f32> = (vec2<f32>(x_2106.x, x_2106.y) + vec2<f32>(1.0f, 1.0f));
  let x_2109 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_2108.x, x_2108.y, x_2109.z, x_2109.w);
  let x_2111 : vec4<f32> = u_xlat3;
  let x_2113 : vec2<f32> = (vec2<f32>(x_2111.x, x_2111.y) * vec2<f32>(0.5f, 0.5f));
  let x_2114 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_2113.x, x_2113.y, x_2114.z, x_2114.w);
  let x_2116 : vec4<f32> = u_xlat3;
  let x_2120 : vec2<f32> = clamp(vec2<f32>(x_2116.x, x_2116.y), vec2<f32>(0.0f, 0.0f), vec2<f32>(1.0f, 1.0f));
  let x_2121 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_2120.x, x_2120.y, x_2121.z, x_2121.w);
  let x_2126 : vec4<f32> = u_xlat3;
  let x_2129 : f32 = x_34.x_GlobalMipBias.x;
  let x_2130 : vec4<f32> = textureSampleBias(x_CameraDepthTexture, sampler_CameraDepthTexture, vec2<f32>(x_2126.x, x_2126.y), x_2129);
  u_xlat23 = x_2130.x;
  let x_2133 : f32 = u_xlat7.x;
  let x_2135 : f32 = u_xlat23;
  let x_2138 : f32 = x_34.x_ProjectionParams.z;
  u_xlat4.x = ((-(x_2133) * x_2135) + x_2138);
  let x_2141 : f32 = u_xlat0;
  let x_2143 : f32 = u_xlat4.x;
  u_xlat11.x = (x_2141 + -(x_2143));
  let x_2148 : f32 = u_xlat11.x;
  let x_2151 : f32 = x_34.x_SSAOParams.y;
  u_xlatb11 = (abs(x_2148) < x_2151);
  let x_2153 : bool = u_xlatb11;
  u_xlat11.x = select(0.0f, 1.0f, x_2153);
  let x_2156 : f32 = u_xlat23;
  u_xlatb23 = (0.00001f < x_2156);
  let x_2158 : bool = u_xlatb23;
  u_xlat23 = select(0.0f, 1.0f, x_2158);
  let x_2160 : f32 = u_xlat23;
  let x_2162 : f32 = u_xlat11.x;
  u_xlat23 = (x_2160 * x_2162);
  let x_2165 : f32 = u_xlat3.y;
  u_xlat10.x = (-(x_2165) + 1.0f);
  let x_2170 : f32 = u_xlat4.x;
  let x_2172 : f32 = x_34.x_ProjectionParams.w;
  u_xlat4.x = (x_2170 * x_2172);
  let x_2176 : vec4<f32> = x_34.x_CameraViewXExtent[0i];
  let x_2178 : vec4<f32> = u_xlat3;
  let x_2182 : vec4<f32> = x_34.x_CameraViewTopLeftCorner[0i];
  u_xlat11 = ((vec3<f32>(x_2176.x, x_2176.y, x_2176.z) * vec3<f32>(x_2178.x, x_2178.x, x_2178.x)) + vec3<f32>(x_2182.x, x_2182.y, x_2182.z));
  let x_2186 : vec4<f32> = x_34.x_CameraViewYExtent[0i];
  let x_2188 : vec3<f32> = u_xlat10;
  let x_2191 : vec3<f32> = u_xlat11;
  u_xlat11 = ((vec3<f32>(x_2186.x, x_2186.y, x_2186.z) * vec3<f32>(x_2188.x, x_2188.x, x_2188.x)) + x_2191);
  let x_2194 : vec4<f32> = x_34.x_CameraViewZExtent[0i];
  let x_2196 : vec3<f32> = u_xlat4;
  let x_2199 : vec3<f32> = u_xlat11;
  u_xlat4 = ((vec3<f32>(x_2194.x, x_2194.y, x_2194.z) * vec3<f32>(x_2196.x, x_2196.x, x_2196.x)) + x_2199);
  let x_2201 : vec3<f32> = u_xlat1;
  let x_2203 : vec3<f32> = u_xlat4;
  u_xlat4 = (-(x_2201) + x_2203);
  let x_2205 : vec3<f32> = u_xlat4;
  let x_2206 : vec4<f32> = u_xlat2;
  u_xlat3.x = dot(x_2205, vec3<f32>(x_2206.x, x_2206.y, x_2206.z));
  let x_2210 : f32 = u_xlat0;
  let x_2214 : f32 = u_xlat3.x;
  u_xlat3.x = ((-(x_2210) * 0.004f) + x_2214);
  let x_2218 : f32 = u_xlat3.x;
  u_xlat3.x = max(x_2218, 0.0f);
  let x_2221 : vec3<f32> = u_xlat4;
  let x_2222 : vec3<f32> = u_xlat4;
  u_xlat10.x = dot(x_2221, x_2222);
  let x_2226 : f32 = u_xlat10.x;
  u_xlat10.x = (x_2226 + 0.0001f);
  let x_2230 : f32 = u_xlat10.x;
  u_xlat10.x = (1.0f / x_2230);
  let x_2234 : f32 = u_xlat10.x;
  let x_2236 : f32 = u_xlat3.x;
  u_xlat3.x = (x_2234 * x_2236);
  let x_2240 : f32 = u_xlat3.x;
  let x_2241 : f32 = u_xlat23;
  let x_2243 : f32 = u_xlat22;
  u_xlat22 = ((x_2240 * x_2241) + x_2243);
  let x_2245 : vec4<f32> = u_xlat3;
  u_xlat23 = dot(vec2<f32>(x_2245.z, x_2245.w), vec2<f32>(0.067110561f, 0.00583715f));
  let x_2248 : f32 = u_xlat23;
  u_xlat23 = fract(x_2248);
  let x_2250 : f32 = u_xlat23;
  u_xlat23 = (x_2250 * 52.982917786f);
  let x_2252 : f32 = u_xlat23;
  u_xlat23 = fract(x_2252);
  let x_2254 : f32 = u_xlat23;
  let x_2259 : vec2<f32> = (vec2<f32>(x_2254, x_2254) + vec2<f32>(0.23828125f, 0.640625f));
  let x_2260 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_2259.x, x_2259.y, x_2260.z, x_2260.w);
  let x_2263 : f32 = u_xlat3.x;
  u_xlat23 = fract(x_2263);
  let x_2265 : f32 = u_xlat23;
  u_xlat4.z = ((x_2265 * 2.0f) + -1.0f);
  let x_2270 : f32 = u_xlat3.y;
  u_xlat23 = (x_2270 * 6.283185482f);
  let x_2273 : f32 = u_xlat4.z;
  let x_2276 : f32 = u_xlat4.z;
  u_xlat3.x = ((-(x_2273) * x_2276) + 1.0f);
  let x_2281 : f32 = u_xlat3.x;
  u_xlat3.x = sqrt(x_2281);
  let x_2284 : f32 = u_xlat23;
  u_xlat5.x = sin(x_2284);
  let x_2287 : f32 = u_xlat23;
  u_xlat6.x = cos(x_2287);
  let x_2291 : f32 = u_xlat3.x;
  let x_2293 : f32 = u_xlat6.x;
  u_xlat4.x = (x_2291 * x_2293);
  let x_2297 : f32 = u_xlat3.x;
  let x_2299 : f32 = u_xlat5.x;
  u_xlat4.y = (x_2297 * x_2299);
  let x_2302 : vec3<f32> = u_xlat4;
  let x_2305 : vec3<f32> = (x_2302 * vec3<f32>(0.935414374f, 0.935414374f, 0.935414374f));
  let x_2306 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_2305.x, x_2305.y, x_2305.z, x_2306.w);
  let x_2308 : vec4<f32> = u_xlat2;
  let x_2311 : vec4<f32> = u_xlat3;
  u_xlat23 = dot(-(vec3<f32>(x_2308.x, x_2308.y, x_2308.z)), vec3<f32>(x_2311.x, x_2311.y, x_2311.z));
  let x_2314 : f32 = u_xlat23;
  u_xlatb23 = (x_2314 >= 0.0f);
  let x_2316 : bool = u_xlatb23;
  if (x_2316) {
    let x_2320 : vec4<f32> = u_xlat3;
    x_2317 = -(vec3<f32>(x_2320.x, x_2320.y, x_2320.z));
  } else {
    let x_2324 : vec4<f32> = u_xlat3;
    x_2317 = vec3<f32>(x_2324.x, x_2324.y, x_2324.z);
  }
  let x_2326 : vec3<f32> = x_2317;
  let x_2327 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_2326.x, x_2326.y, x_2326.z, x_2327.w);
  let x_2329 : vec4<f32> = u_xlat3;
  let x_2332 : vec4<f32> = x_34.x_SSAOParams;
  let x_2335 : vec3<f32> = u_xlat1;
  let x_2336 : vec3<f32> = ((vec3<f32>(x_2329.x, x_2329.y, x_2329.z) * vec3<f32>(x_2332.y, x_2332.y, x_2332.y)) + x_2335);
  let x_2337 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_2336.x, x_2336.y, x_2336.z, x_2337.w);
  let x_2339 : vec4<f32> = u_xlat3;
  let x_2342 : vec4<f32> = x_34.x_CameraViewProjections[0i][1i];
  let x_2344 : vec2<f32> = (vec2<f32>(x_2339.y, x_2339.y) * vec2<f32>(x_2342.x, x_2342.y));
  let x_2345 : vec3<f32> = u_xlat10;
  u_xlat10 = vec3<f32>(x_2344.x, x_2345.y, x_2344.y);
  let x_2348 : vec4<f32> = x_34.x_CameraViewProjections[0i][0i];
  let x_2350 : vec4<f32> = u_xlat3;
  let x_2353 : vec3<f32> = u_xlat10;
  let x_2355 : vec2<f32> = ((vec2<f32>(x_2348.x, x_2348.y) * vec2<f32>(x_2350.x, x_2350.x)) + vec2<f32>(x_2353.x, x_2353.z));
  let x_2356 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_2355.x, x_2355.y, x_2356.z, x_2356.w);
  let x_2359 : vec4<f32> = x_34.x_CameraViewProjections[0i][2i];
  let x_2361 : vec4<f32> = u_xlat3;
  let x_2364 : vec4<f32> = u_xlat3;
  let x_2366 : vec2<f32> = ((vec2<f32>(x_2359.x, x_2359.y) * vec2<f32>(x_2361.z, x_2361.z)) + vec2<f32>(x_2364.x, x_2364.y));
  let x_2367 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_2366.x, x_2366.y, x_2367.z, x_2367.w);
  let x_2369 : vec4<f32> = u_xlat3;
  let x_2371 : vec2<f32> = (vec2<f32>(x_2369.x, x_2369.y) + vec2<f32>(1.0f, 1.0f));
  let x_2372 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_2371.x, x_2371.y, x_2372.z, x_2372.w);
  let x_2374 : vec4<f32> = u_xlat3;
  let x_2376 : vec2<f32> = (vec2<f32>(x_2374.x, x_2374.y) * vec2<f32>(0.5f, 0.5f));
  let x_2377 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_2376.x, x_2376.y, x_2377.z, x_2377.w);
  let x_2379 : vec4<f32> = u_xlat3;
  let x_2383 : vec2<f32> = clamp(vec2<f32>(x_2379.x, x_2379.y), vec2<f32>(0.0f, 0.0f), vec2<f32>(1.0f, 1.0f));
  let x_2384 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_2383.x, x_2383.y, x_2384.z, x_2384.w);
  let x_2389 : vec4<f32> = u_xlat3;
  let x_2392 : f32 = x_34.x_GlobalMipBias.x;
  let x_2393 : vec4<f32> = textureSampleBias(x_CameraDepthTexture, sampler_CameraDepthTexture, vec2<f32>(x_2389.x, x_2389.y), x_2392);
  u_xlat23 = x_2393.x;
  let x_2396 : f32 = u_xlat7.x;
  let x_2398 : f32 = u_xlat23;
  let x_2401 : f32 = x_34.x_ProjectionParams.z;
  u_xlat17.x = ((-(x_2396) * x_2398) + x_2401);
  let x_2404 : f32 = u_xlat0;
  let x_2406 : f32 = u_xlat17.x;
  u_xlat24 = (x_2404 + -(x_2406));
  let x_2409 : f32 = u_xlat24;
  let x_2412 : f32 = x_34.x_SSAOParams.y;
  u_xlatb24 = (abs(x_2409) < x_2412);
  let x_2414 : bool = u_xlatb24;
  u_xlat24 = select(0.0f, 1.0f, x_2414);
  let x_2416 : f32 = u_xlat23;
  u_xlatb23 = (0.00001f < x_2416);
  let x_2418 : bool = u_xlatb23;
  u_xlat23 = select(0.0f, 1.0f, x_2418);
  let x_2420 : f32 = u_xlat23;
  let x_2421 : f32 = u_xlat24;
  u_xlat23 = (x_2420 * x_2421);
  let x_2424 : f32 = u_xlat3.y;
  u_xlat10.x = (-(x_2424) + 1.0f);
  let x_2429 : f32 = u_xlat17.x;
  let x_2431 : f32 = x_34.x_ProjectionParams.w;
  u_xlat17.x = (x_2429 * x_2431);
  let x_2435 : vec4<f32> = x_34.x_CameraViewXExtent[0i];
  let x_2437 : vec4<f32> = u_xlat3;
  let x_2441 : vec4<f32> = x_34.x_CameraViewTopLeftCorner[0i];
  u_xlat4 = ((vec3<f32>(x_2435.x, x_2435.y, x_2435.z) * vec3<f32>(x_2437.x, x_2437.x, x_2437.x)) + vec3<f32>(x_2441.x, x_2441.y, x_2441.z));
  let x_2445 : vec4<f32> = x_34.x_CameraViewYExtent[0i];
  let x_2447 : vec3<f32> = u_xlat10;
  let x_2450 : vec3<f32> = u_xlat4;
  let x_2451 : vec3<f32> = ((vec3<f32>(x_2445.x, x_2445.y, x_2445.z) * vec3<f32>(x_2447.x, x_2447.x, x_2447.x)) + x_2450);
  let x_2452 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_2451.x, x_2451.y, x_2452.z, x_2451.z);
  let x_2455 : vec4<f32> = x_34.x_CameraViewZExtent[0i];
  let x_2457 : vec2<f32> = u_xlat17;
  let x_2460 : vec4<f32> = u_xlat3;
  let x_2462 : vec3<f32> = ((vec3<f32>(x_2455.x, x_2455.y, x_2455.z) * vec3<f32>(x_2457.x, x_2457.x, x_2457.x)) + vec3<f32>(x_2460.x, x_2460.y, x_2460.w));
  let x_2463 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_2462.x, x_2462.y, x_2462.z, x_2463.w);
  let x_2465 : vec3<f32> = u_xlat1;
  let x_2467 : vec4<f32> = u_xlat3;
  let x_2469 : vec3<f32> = (-(x_2465) + vec3<f32>(x_2467.x, x_2467.y, x_2467.z));
  let x_2470 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_2469.x, x_2469.y, x_2469.z, x_2470.w);
  let x_2472 : vec4<f32> = u_xlat3;
  let x_2474 : vec4<f32> = u_xlat2;
  u_xlat24 = dot(vec3<f32>(x_2472.x, x_2472.y, x_2472.z), vec3<f32>(x_2474.x, x_2474.y, x_2474.z));
  let x_2477 : f32 = u_xlat0;
  let x_2480 : f32 = u_xlat24;
  u_xlat24 = ((-(x_2477) * 0.004f) + x_2480);
  let x_2482 : f32 = u_xlat24;
  u_xlat24 = max(x_2482, 0.0f);
  let x_2484 : vec4<f32> = u_xlat3;
  let x_2486 : vec4<f32> = u_xlat3;
  u_xlat3.x = dot(vec3<f32>(x_2484.x, x_2484.y, x_2484.z), vec3<f32>(x_2486.x, x_2486.y, x_2486.z));
  let x_2491 : f32 = u_xlat3.x;
  u_xlat3.x = (x_2491 + 0.0001f);
  let x_2495 : f32 = u_xlat3.x;
  u_xlat3.x = (1.0f / x_2495);
  let x_2499 : f32 = u_xlat3.x;
  let x_2500 : f32 = u_xlat24;
  u_xlat3.x = (x_2499 * x_2500);
  let x_2504 : f32 = u_xlat3.x;
  let x_2505 : f32 = u_xlat23;
  let x_2507 : f32 = u_xlat22;
  u_xlat22 = ((x_2504 * x_2505) + x_2507);
  let x_2509 : vec2<f32> = u_xlat14;
  let x_2511 : vec4<f32> = x_34.x_SSAOParams;
  u_xlat14 = ((x_2509 * vec2<f32>(x_2511.z, x_2511.z)) + vec2<f32>(14.580999374f, 34.069000244f));
  let x_2518 : vec2<f32> = u_xlat14;
  u_xlat14.x = dot(x_2518, vec2<f32>(0.067110561f, 0.00583715f));
  let x_2522 : f32 = u_xlat14.x;
  u_xlat14.x = fract(x_2522);
  let x_2526 : f32 = u_xlat14.x;
  u_xlat14.x = (x_2526 * 52.982917786f);
  let x_2530 : f32 = u_xlat14.x;
  u_xlat14.x = fract(x_2530);
  let x_2533 : vec2<f32> = u_xlat14;
  u_xlat14 = (vec2<f32>(x_2533.x, x_2533.x) + vec2<f32>(0.640625f, 0.74609375f));
  let x_2539 : f32 = u_xlat14.x;
  u_xlat14.x = fract(x_2539);
  let x_2543 : f32 = u_xlat14.x;
  u_xlat3.z = ((x_2543 * 2.0f) + -1.0f);
  let x_2548 : f32 = u_xlat14.y;
  u_xlat14.x = (x_2548 * 6.283185482f);
  let x_2552 : f32 = u_xlat3.z;
  let x_2555 : f32 = u_xlat3.z;
  u_xlat21 = ((-(x_2552) * x_2555) + 1.0f);
  let x_2558 : f32 = u_xlat21;
  u_xlat21 = sqrt(x_2558);
  let x_2561 : f32 = u_xlat14.x;
  u_xlat4.x = sin(x_2561);
  let x_2565 : f32 = u_xlat14.x;
  u_xlat5.x = cos(x_2565);
  let x_2568 : f32 = u_xlat21;
  let x_2570 : f32 = u_xlat5.x;
  u_xlat3.x = (x_2568 * x_2570);
  let x_2573 : f32 = u_xlat21;
  let x_2575 : f32 = u_xlat4.x;
  u_xlat3.y = (x_2573 * x_2575);
  let x_2578 : vec4<f32> = u_xlat2;
  let x_2581 : vec4<f32> = u_xlat3;
  u_xlat14.x = dot(-(vec3<f32>(x_2578.x, x_2578.y, x_2578.z)), vec3<f32>(x_2581.x, x_2581.y, x_2581.z));
  let x_2586 : f32 = u_xlat14.x;
  u_xlatb14 = (x_2586 >= 0.0f);
  let x_2588 : bool = u_xlatb14;
  if (x_2588) {
    let x_2592 : vec4<f32> = u_xlat3;
    x_2589 = -(vec3<f32>(x_2592.x, x_2592.y, x_2592.z));
  } else {
    let x_2596 : vec4<f32> = u_xlat3;
    x_2589 = vec3<f32>(x_2596.x, x_2596.y, x_2596.z);
  }
  let x_2598 : vec3<f32> = x_2589;
  let x_2599 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_2598.x, x_2598.y, x_2598.z, x_2599.w);
  let x_2601 : vec4<f32> = u_xlat3;
  let x_2604 : vec4<f32> = x_34.x_SSAOParams;
  let x_2607 : vec3<f32> = u_xlat1;
  let x_2608 : vec3<f32> = ((vec3<f32>(x_2601.x, x_2601.y, x_2601.z) * vec3<f32>(x_2604.y, x_2604.y, x_2604.y)) + x_2607);
  let x_2609 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_2608.x, x_2608.y, x_2608.z, x_2609.w);
  let x_2611 : vec4<f32> = u_xlat3;
  let x_2614 : vec4<f32> = x_34.x_CameraViewProjections[0i][1i];
  u_xlat14 = (vec2<f32>(x_2611.y, x_2611.y) * vec2<f32>(x_2614.x, x_2614.y));
  let x_2618 : vec4<f32> = x_34.x_CameraViewProjections[0i][0i];
  let x_2620 : vec4<f32> = u_xlat3;
  let x_2623 : vec2<f32> = u_xlat14;
  u_xlat14 = ((vec2<f32>(x_2618.x, x_2618.y) * vec2<f32>(x_2620.x, x_2620.x)) + x_2623);
  let x_2626 : vec4<f32> = x_34.x_CameraViewProjections[0i][2i];
  let x_2628 : vec4<f32> = u_xlat3;
  let x_2631 : vec2<f32> = u_xlat14;
  u_xlat14 = ((vec2<f32>(x_2626.x, x_2626.y) * vec2<f32>(x_2628.z, x_2628.z)) + x_2631);
  let x_2633 : vec2<f32> = u_xlat14;
  u_xlat14 = (x_2633 + vec2<f32>(1.0f, 1.0f));
  let x_2635 : vec2<f32> = u_xlat14;
  u_xlat14 = (x_2635 * vec2<f32>(0.5f, 0.5f));
  let x_2637 : vec2<f32> = u_xlat14;
  u_xlat14 = clamp(x_2637, vec2<f32>(0.0f, 0.0f), vec2<f32>(1.0f, 1.0f));
  let x_2644 : vec2<f32> = u_xlat14;
  let x_2646 : f32 = x_34.x_GlobalMipBias.x;
  let x_2647 : vec4<f32> = textureSampleBias(x_CameraDepthTexture, sampler_CameraDepthTexture, x_2644, x_2646);
  u_xlat23 = x_2647.x;
  let x_2650 : f32 = u_xlat7.x;
  let x_2652 : f32 = u_xlat23;
  let x_2655 : f32 = x_34.x_ProjectionParams.z;
  u_xlat7.x = ((-(x_2650) * x_2652) + x_2655);
  let x_2659 : f32 = u_xlat7.x;
  let x_2661 : f32 = u_xlat0;
  u_xlat3.x = (-(x_2659) + x_2661);
  let x_2665 : f32 = u_xlat3.x;
  let x_2668 : f32 = x_34.x_SSAOParams.y;
  u_xlatb3 = (abs(x_2665) < x_2668);
  let x_2670 : bool = u_xlatb3;
  u_xlat3.x = select(0.0f, 1.0f, x_2670);
  let x_2673 : f32 = u_xlat23;
  u_xlatb23 = (0.00001f < x_2673);
  let x_2675 : bool = u_xlatb23;
  u_xlat23 = select(0.0f, 1.0f, x_2675);
  let x_2677 : f32 = u_xlat23;
  let x_2679 : f32 = u_xlat3.x;
  u_xlat23 = (x_2677 * x_2679);
  let x_2682 : f32 = u_xlat14.y;
  u_xlat21 = (-(x_2682) + 1.0f);
  let x_2686 : f32 = u_xlat7.x;
  let x_2688 : f32 = x_34.x_ProjectionParams.w;
  u_xlat7.x = (x_2686 * x_2688);
  let x_2692 : vec4<f32> = x_34.x_CameraViewXExtent[0i];
  let x_2694 : vec2<f32> = u_xlat14;
  let x_2698 : vec4<f32> = x_34.x_CameraViewTopLeftCorner[0i];
  let x_2700 : vec3<f32> = ((vec3<f32>(x_2692.x, x_2692.y, x_2692.z) * vec3<f32>(x_2694.x, x_2694.x, x_2694.x)) + vec3<f32>(x_2698.x, x_2698.y, x_2698.z));
  let x_2701 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_2700.x, x_2700.y, x_2700.z, x_2701.w);
  let x_2704 : vec4<f32> = x_34.x_CameraViewYExtent[0i];
  let x_2706 : f32 = u_xlat21;
  let x_2709 : vec4<f32> = u_xlat3;
  let x_2711 : vec3<f32> = ((vec3<f32>(x_2704.x, x_2704.y, x_2704.z) * vec3<f32>(x_2706, x_2706, x_2706)) + vec3<f32>(x_2709.x, x_2709.y, x_2709.z));
  let x_2712 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_2711.x, x_2711.y, x_2711.z, x_2712.w);
  let x_2715 : vec4<f32> = x_34.x_CameraViewZExtent[0i];
  let x_2717 : vec3<f32> = u_xlat7;
  let x_2720 : vec4<f32> = u_xlat3;
  u_xlat7 = ((vec3<f32>(x_2715.x, x_2715.y, x_2715.z) * vec3<f32>(x_2717.x, x_2717.x, x_2717.x)) + vec3<f32>(x_2720.x, x_2720.y, x_2720.z));
  let x_2723 : vec3<f32> = u_xlat1;
  let x_2725 : vec3<f32> = u_xlat7;
  u_xlat7 = (-(x_2723) + x_2725);
  let x_2727 : vec3<f32> = u_xlat7;
  let x_2728 : vec4<f32> = u_xlat2;
  u_xlat1.x = dot(x_2727, vec3<f32>(x_2728.x, x_2728.y, x_2728.z));
  let x_2732 : f32 = u_xlat0;
  let x_2736 : f32 = u_xlat1.x;
  u_xlat1.x = ((-(x_2732) * 0.004f) + x_2736);
  let x_2740 : f32 = u_xlat1.x;
  u_xlat1.x = max(x_2740, 0.0f);
  let x_2743 : vec3<f32> = u_xlat7;
  let x_2744 : vec3<f32> = u_xlat7;
  u_xlat7.x = dot(x_2743, x_2744);
  let x_2748 : f32 = u_xlat7.x;
  u_xlat7.x = (x_2748 + 0.0001f);
  let x_2752 : f32 = u_xlat7.x;
  u_xlat7.x = (1.0f / x_2752);
  let x_2756 : f32 = u_xlat7.x;
  let x_2758 : f32 = u_xlat1.x;
  u_xlat7.x = (x_2756 * x_2758);
  let x_2762 : f32 = u_xlat7.x;
  let x_2763 : f32 = u_xlat23;
  let x_2765 : f32 = u_xlat22;
  u_xlat7.x = ((x_2762 * x_2763) + x_2765);
  let x_2769 : f32 = u_xlat7.x;
  let x_2771 : f32 = x_34.x_SSAOParams.y;
  u_xlat7.x = (x_2769 * x_2771);
  let x_2775 : f32 = x_34.x_SSAOParams.w;
  u_xlat14.x = (1.0f / x_2775);
  let x_2778 : f32 = u_xlat0;
  let x_2781 : f32 = u_xlat14.x;
  u_xlat0 = ((-(x_2778) * x_2781) + 1.0f);
  let x_2784 : f32 = u_xlat0;
  let x_2785 : f32 = u_xlat0;
  u_xlat0 = (x_2784 * x_2785);
  let x_2788 : f32 = u_xlat7.x;
  let x_2790 : f32 = x_34.x_SSAOParams.x;
  u_xlat7.x = (x_2788 * x_2790);
  let x_2793 : f32 = u_xlat0;
  let x_2795 : f32 = u_xlat7.x;
  u_xlat0 = (x_2793 * x_2795);
  let x_2797 : f32 = u_xlat0;
  u_xlat0 = (x_2797 * 0.125f);
  let x_2800 : f32 = u_xlat0;
  u_xlat0 = clamp(x_2800, 0.0f, 1.0f);
  let x_2802 : f32 = u_xlat0;
  u_xlat0 = log2(x_2802);
  let x_2804 : f32 = u_xlat0;
  u_xlat0 = (x_2804 * 0.600000024f);
  let x_2807 : f32 = u_xlat0;
  SV_Target0.x = exp2(x_2807);
  let x_2811 : vec4<f32> = u_xlat2;
  let x_2814 : vec3<f32> = ((vec3<f32>(x_2811.x, x_2811.y, x_2811.z) * vec3<f32>(0.5f, 0.5f, 0.5f)) + vec3<f32>(0.5f, 0.5f, 0.5f));
  let x_2815 : vec4<f32> = SV_Target0;
  SV_Target0 = vec4<f32>(x_2815.x, x_2814.x, x_2814.y, x_2814.z);
  return;
}

struct main_out {
  @location(0)
  SV_Target0_1 : vec4<f32>,
}

@fragment
fn main(@location(0) vs_TEXCOORD0_param : vec2<f32>, @builtin(position) gl_FragCoord_param : vec4<f32>) -> main_out {
  vs_TEXCOORD0 = vs_TEXCOORD0_param;
  gl_FragCoord = gl_FragCoord_param;
  main_1();
  return main_out(SV_Target0);
}

