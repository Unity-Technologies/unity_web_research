diagnostic(off, derivative_uniformity);

alias Arr = array<vec4<f32>, 2u>;

struct UnityPerDraw {
  /* @offset(0) */
  unity_ObjectToWorld : mat4x4<f32>,
  /* @offset(64) */
  unity_WorldToObject : mat4x4<f32>,
  /* @offset(128) */
  unity_LODFade : vec4<f32>,
  /* @offset(144) */
  unity_WorldTransformParams : vec4<f32>,
  /* @offset(160) */
  unity_RenderingLayer : vec4<f32>,
  /* @offset(176) */
  unity_LightData : vec4<f32>,
  /* @offset(192) */
  unity_LightIndices : Arr,
  /* @offset(224) */
  unity_ProbesOcclusion : vec4<f32>,
  /* @offset(240) */
  unity_SpecCube0_HDR : vec4<f32>,
  /* @offset(256) */
  unity_SpecCube1_HDR : vec4<f32>,
  /* @offset(272) */
  unity_SpecCube0_BoxMax : vec4<f32>,
  /* @offset(288) */
  unity_SpecCube0_BoxMin : vec4<f32>,
  /* @offset(304) */
  unity_SpecCube0_ProbePosition : vec4<f32>,
  /* @offset(320) */
  unity_SpecCube1_BoxMax : vec4<f32>,
  /* @offset(336) */
  unity_SpecCube1_BoxMin : vec4<f32>,
  /* @offset(352) */
  unity_SpecCube1_ProbePosition : vec4<f32>,
  /* @offset(368) */
  unity_LightmapST : vec4<f32>,
  /* @offset(384) */
  unity_DynamicLightmapST : vec4<f32>,
  /* @offset(400) */
  unity_SHAr : vec4<f32>,
  /* @offset(416) */
  unity_SHAg : vec4<f32>,
  /* @offset(432) */
  unity_SHAb : vec4<f32>,
  /* @offset(448) */
  unity_SHBr : vec4<f32>,
  /* @offset(464) */
  unity_SHBg : vec4<f32>,
  /* @offset(480) */
  unity_SHBb : vec4<f32>,
  /* @offset(496) */
  unity_SHC : vec4<f32>,
  /* @offset(512) */
  unity_RendererBounds_Min : vec4<f32>,
  /* @offset(528) */
  unity_RendererBounds_Max : vec4<f32>,
  /* @offset(544) */
  unity_MatrixPreviousM : mat4x4<f32>,
  /* @offset(608) */
  unity_MatrixPreviousMI : mat4x4<f32>,
  /* @offset(672) */
  unity_MotionVectorsParams : vec4<f32>,
  /* @offset(688) */
  unity_SpriteColor : vec4<f32>,
  /* @offset(704) */
  unity_SpriteProps : vec4<f32>,
}

struct PGlobals {
  /* @offset(0) */
  x_GlobalMipBias : vec2<f32>,
  /* @offset(8) */
  x_AlphaToMaskAvailable : f32,
  /* @offset(16) */
  x_MainLightPosition : vec4<f32>,
  /* @offset(32) */
  x_MainLightColor : vec4<f32>,
  /* @offset(48) */
  x_AdditionalLightsCount : vec4<f32>,
  /* @offset(64) */
  x_WorldSpaceCameraPos : vec3<f32>,
  /* @offset(80) */
  x_ProjectionParams : vec4<f32>,
  /* @offset(96) */
  x_ScreenParams : vec4<f32>,
  /* @offset(112) */
  unity_OrthoParams : vec4<f32>,
  /* @offset(128) */
  unity_FogParams : vec4<f32>,
  /* @offset(144) */
  unity_FogColor : vec4<f32>,
  /* @offset(160) */
  unity_MatrixV : mat4x4<f32>,
}

struct UnityPerMaterial {
  /* @offset(0) */
  Texture2D_B222E8F_TexelSize : vec4<f32>,
  /* @offset(16) */
  Color_C30C7CA3 : vec4<f32>,
  /* @offset(32) */
  Texture2D_D9BFD5F1_TexelSize : vec4<f32>,
}

alias Arr_1 = array<mat4x4<f32>, 5u>;

alias Arr_2 = array<vec4<f32>, 32u>;

alias Arr_3 = array<mat4x4<f32>, 32u>;

alias Arr_4 = array<vec4<f32>, 32u>;

struct LightShadows {
  /* @offset(0) */
  x_MainLightWorldToShadow : Arr_1,
  /* @offset(320) */
  x_CascadeShadowSplitSpheres0 : vec4<f32>,
  /* @offset(336) */
  x_CascadeShadowSplitSpheres1 : vec4<f32>,
  /* @offset(352) */
  x_CascadeShadowSplitSpheres2 : vec4<f32>,
  /* @offset(368) */
  x_CascadeShadowSplitSpheres3 : vec4<f32>,
  /* @offset(384) */
  x_CascadeShadowSplitSphereRadii : vec4<f32>,
  /* @offset(400) */
  x_MainLightShadowOffset0 : vec4<f32>,
  /* @offset(416) */
  x_MainLightShadowOffset1 : vec4<f32>,
  /* @offset(432) */
  x_MainLightShadowParams : vec4<f32>,
  /* @offset(448) */
  x_MainLightShadowmapSize : vec4<f32>,
  /* @offset(464) */
  x_AdditionalShadowOffset0 : vec4<f32>,
  /* @offset(480) */
  x_AdditionalShadowOffset1 : vec4<f32>,
  /* @offset(496) */
  x_AdditionalShadowFadeParams : vec4<f32>,
  /* @offset(512) */
  x_AdditionalShadowmapSize : vec4<f32>,
  /* @offset(528) */
  x_AdditionalShadowParams : Arr_4,
  /* @offset(1040) */
  x_AdditionalLightsWorldToShadow : Arr_3,
}

alias Arr_5 = array<vec4<f32>, 32u>;

alias Arr_6 = array<vec4<f32>, 32u>;

alias Arr_7 = array<vec4<f32>, 32u>;

alias Arr_8 = array<vec4<f32>, 32u>;

struct strided_arr {
  @size(16)
  el : f32,
}

alias Arr_9 = array<strided_arr, 32u>;

struct AdditionalLights {
  /* @offset(0) */
  x_AdditionalLightsPosition : Arr_4,
  /* @offset(512) */
  x_AdditionalLightsColor : Arr_4,
  /* @offset(1024) */
  x_AdditionalLightsAttenuation : Arr_4,
  /* @offset(1536) */
  x_AdditionalLightsSpotDir : Arr_4,
  /* @offset(2048) */
  x_AdditionalLightsOcclusionProbes : Arr_4,
  /* @offset(2560) */
  x_AdditionalLightsLayerMasks : Arr_9,
}

var<private> u_xlat0 : vec4<f32>;

var<private> vs_INTERP9 : vec3<f32>;

var<private> u_xlatb26 : vec2<bool>;

var<private> vs_INTERP4 : vec4<f32>;

@group(1) @binding(2) var<uniform> x_83 : UnityPerDraw;

var<private> u_xlat26 : vec3<f32>;

var<private> u_xlat1 : vec3<f32>;

var<private> u_xlat2 : vec4<f32>;

var<private> u_xlat3 : vec4<f32>;

var<private> u_xlatb0 : bool;

@group(1) @binding(0) var<uniform> x_149 : PGlobals;

var<private> u_xlat4 : vec3<f32>;

var<private> vs_INTERP8 : vec3<f32>;

var<private> u_xlat79 : f32;

var<private> u_xlat5 : vec4<f32>;

var<private> u_xlat6 : vec4<f32>;

@group(0) @binding(3) var Texture2D_B222E8F : texture_2d<f32>;

@group(0) @binding(7) var samplerTexture2D_B222E8F : sampler;

var<private> vs_INTERP5 : vec4<f32>;

var<private> u_xlat7 : vec3<f32>;

@group(1) @binding(4) var<uniform> x_267 : UnityPerMaterial;

var<private> u_xlat8 : vec4<f32>;

@group(0) @binding(4) var Texture2D_D9BFD5F1 : texture_2d<f32>;

@group(0) @binding(8) var samplerTexture2D_D9BFD5F1 : sampler;

var<private> u_xlat9 : vec4<f32>;

var<private> u_xlat34 : vec3<f32>;

var<private> vs_INTERP6 : vec4<f32>;

@group(1) @binding(3) var<uniform> x_372 : LightShadows;

var<private> u_xlat10 : vec4<f32>;

var<private> u_xlatb2 : vec4<bool>;

var<private> u_xlatu0 : u32;

var<private> u_xlati0 : i32;

var<private> u_xlatb79 : bool;

@group(0) @binding(1) var x_MainLightShadowmapTexture : texture_depth_2d;

@group(0) @binding(6) var sampler_LinearClampCompare : sampler_comparison;

var<private> u_xlatb80 : bool;

var<private> u_xlat55 : vec2<f32>;

var<private> u_xlat62 : vec2<f32>;

var<private> u_xlat11 : vec4<f32>;

var<private> u_xlat12 : vec4<f32>;

var<private> u_xlat13 : vec4<f32>;

var<private> u_xlat14 : vec4<f32>;

var<private> u_xlat15 : vec4<f32>;

var<private> u_xlat16 : vec4<f32>;

var<private> u_xlat80 : f32;

var<private> u_xlat29 : f32;

var<private> u_xlat35 : vec3<f32>;

var<private> u_xlat17 : vec4<f32>;

var<private> u_xlat18 : vec4<f32>;

var<private> u_xlat36 : vec2<f32>;

var<private> u_xlat68 : vec2<f32>;

var<private> u_xlat63 : vec2<f32>;

var<private> u_xlat19 : vec4<f32>;

var<private> u_xlat20 : vec4<f32>;

var<private> u_xlat21 : vec4<f32>;

var<private> u_xlat82 : f32;

var<private> u_xlatb3 : bool;

var<private> u_xlatb29 : bool;

var<private> u_xlat27 : vec3<f32>;

var<private> u_xlatu5 : vec3<u32>;

var<private> u_xlatu55 : u32;

var<private> u_xlatu81 : u32;

var<private> u_xlati55 : i32;

var<private> u_xlat81 : f32;

var<private> u_xlatb55 : bool;

var<private> u_xlat52 : vec2<f32>;

var<private> u_xlat78 : f32;

var<private> u_xlat83 : f32;

var<private> u_xlatb84 : bool;

var<private> u_xlat60 : vec2<f32>;

var<private> u_xlat84 : f32;

var<private> u_xlat85 : f32;

var<private> u_xlat28 : vec3<f32>;

var<private> u_xlat54 : f32;

@group(0) @binding(0) var unity_SpecCube0 : texture_cube<f32>;

@group(0) @binding(5) var samplerunity_SpecCube0 : sampler;

var<private> u_xlatu3 : u32;

var<private> u_xlati81 : i32;

var<private> u_xlati3 : i32;

@group(1) @binding(1) var<uniform> x_3864 : AdditionalLights;

var<private> u_xlati85 : i32;

var<private> u_xlatb86 : bool;

var<private> u_xlatb11 : vec4<bool>;

var<private> u_xlat87 : f32;

var<private> u_xlat86 : f32;

var<private> u_xlatb85 : bool;

@group(0) @binding(2) var x_AdditionalLightsShadowmapTexture : texture_depth_2d;

var<private> u_xlat64 : vec2<f32>;

var<private> u_xlat66 : vec2<f32>;

var<private> u_xlat88 : f32;

var<private> u_xlat39 : vec3<f32>;

var<private> u_xlat22 : vec4<f32>;

var<private> u_xlat40 : vec2<f32>;

var<private> u_xlat72 : vec2<f32>;

var<private> u_xlat67 : vec2<f32>;

var<private> u_xlat23 : vec4<f32>;

var<private> u_xlat24 : vec4<f32>;

var<private> u_xlat25 : vec4<f32>;

var<private> u_xlatb87 : bool;

var<private> SV_Target0 : vec4<f32>;

var<private> gl_FragCoord : vec4<f32>;

var<private> u_xlatu2 : u32;

fn int_bitfieldInsert_i1_i1_i1_i1_(base : ptr<function, i32>, insert : ptr<function, i32>, offset_1 : ptr<function, i32>, bits : ptr<function, i32>) -> i32 {
  var mask : u32;
  let x_19 : i32 = *(bits);
  let x_23 : i32 = *(offset_1);
  mask = (~((4294967295u << bitcast<u32>(x_19))) << bitcast<u32>(x_23));
  let x_26 : i32 = *(base);
  let x_28 : u32 = mask;
  let x_31 : i32 = *(insert);
  let x_33 : i32 = *(offset_1);
  let x_36 : u32 = mask;
  return bitcast<i32>(((bitcast<u32>(x_26) & ~(x_28)) | ((bitcast<u32>(x_31) << bitcast<u32>(x_33)) & x_36)));
}

fn main_1() {
  var x_189 : vec3<f32>;
  var txVec0 : vec3<f32>;
  var txVec1 : vec3<f32>;
  var txVec2 : vec3<f32>;
  var txVec3 : vec3<f32>;
  var txVec4 : vec3<f32>;
  var txVec5 : vec3<f32>;
  var txVec6 : vec3<f32>;
  var txVec7 : vec3<f32>;
  var txVec8 : vec3<f32>;
  var txVec9 : vec3<f32>;
  var txVec10 : vec3<f32>;
  var txVec11 : vec3<f32>;
  var txVec12 : vec3<f32>;
  var txVec13 : vec3<f32>;
  var txVec14 : vec3<f32>;
  var txVec15 : vec3<f32>;
  var txVec16 : vec3<f32>;
  var txVec17 : vec3<f32>;
  var txVec18 : vec3<f32>;
  var txVec19 : vec3<f32>;
  var txVec20 : vec3<f32>;
  var txVec21 : vec3<f32>;
  var txVec22 : vec3<f32>;
  var txVec23 : vec3<f32>;
  var txVec24 : vec3<f32>;
  var txVec25 : vec3<f32>;
  var txVec26 : vec3<f32>;
  var txVec27 : vec3<f32>;
  var txVec28 : vec3<f32>;
  var txVec29 : vec3<f32>;
  var x_1872 : f32;
  var param : i32;
  var param_1 : i32;
  var param_2 : i32;
  var param_3 : i32;
  var x_1997 : f32;
  var x_2051 : f32;
  var txVec30 : vec3<f32>;
  var txVec31 : vec3<f32>;
  var txVec32 : vec3<f32>;
  var txVec33 : vec3<f32>;
  var txVec34 : vec3<f32>;
  var txVec35 : vec3<f32>;
  var txVec36 : vec3<f32>;
  var txVec37 : vec3<f32>;
  var txVec38 : vec3<f32>;
  var txVec39 : vec3<f32>;
  var txVec40 : vec3<f32>;
  var txVec41 : vec3<f32>;
  var txVec42 : vec3<f32>;
  var txVec43 : vec3<f32>;
  var txVec44 : vec3<f32>;
  var txVec45 : vec3<f32>;
  var txVec46 : vec3<f32>;
  var txVec47 : vec3<f32>;
  var txVec48 : vec3<f32>;
  var txVec49 : vec3<f32>;
  var txVec50 : vec3<f32>;
  var txVec51 : vec3<f32>;
  var txVec52 : vec3<f32>;
  var txVec53 : vec3<f32>;
  var txVec54 : vec3<f32>;
  var txVec55 : vec3<f32>;
  var txVec56 : vec3<f32>;
  var txVec57 : vec3<f32>;
  var txVec58 : vec3<f32>;
  var txVec59 : vec3<f32>;
  var x_3458 : f32;
  var u_xlatu_loop_1 : u32;
  var indexable : array<vec4<u32>, 4u>;
  var x_3999 : f32;
  var x_4009 : f32;
  var txVec60 : vec3<f32>;
  var txVec61 : vec3<f32>;
  var txVec62 : vec3<f32>;
  var txVec63 : vec3<f32>;
  var txVec64 : vec3<f32>;
  var txVec65 : vec3<f32>;
  var txVec66 : vec3<f32>;
  var txVec67 : vec3<f32>;
  var txVec68 : vec3<f32>;
  var txVec69 : vec3<f32>;
  var txVec70 : vec3<f32>;
  var txVec71 : vec3<f32>;
  var txVec72 : vec3<f32>;
  var txVec73 : vec3<f32>;
  var txVec74 : vec3<f32>;
  var txVec75 : vec3<f32>;
  var txVec76 : vec3<f32>;
  var txVec77 : vec3<f32>;
  var txVec78 : vec3<f32>;
  var txVec79 : vec3<f32>;
  var txVec80 : vec3<f32>;
  var txVec81 : vec3<f32>;
  var txVec82 : vec3<f32>;
  var txVec83 : vec3<f32>;
  var txVec84 : vec3<f32>;
  var txVec85 : vec3<f32>;
  var txVec86 : vec3<f32>;
  var txVec87 : vec3<f32>;
  var txVec88 : vec3<f32>;
  var txVec89 : vec3<f32>;
  var u_xlat_precise_vec4 : vec4<f32>;
  var u_xlat_precise_ivec4 : vec4<i32>;
  var u_xlat_precise_bvec4 : vec4<bool>;
  var u_xlat_precise_uvec4 : vec4<u32>;
  let x_49 : vec3<f32> = vs_INTERP9;
  let x_50 : vec3<f32> = vs_INTERP9;
  u_xlat0.x = dot(x_49, x_50);
  let x_56 : f32 = u_xlat0.x;
  u_xlat0.x = sqrt(x_56);
  let x_61 : f32 = u_xlat0.x;
  u_xlat0.x = (1.0f / x_61);
  let x_74 : f32 = vs_INTERP4.w;
  u_xlatb26.x = (0.0f < x_74);
  let x_87 : f32 = x_83.unity_WorldTransformParams.w;
  u_xlatb26.y = (x_87 >= 0.0f);
  let x_94 : bool = u_xlatb26.x;
  u_xlat26.x = select(-1.0f, 1.0f, x_94);
  let x_99 : bool = u_xlatb26.y;
  u_xlat26.y = select(-1.0f, 1.0f, x_99);
  let x_103 : f32 = u_xlat26.y;
  let x_105 : f32 = u_xlat26.x;
  u_xlat26.x = (x_103 * x_105);
  let x_109 : vec4<f32> = vs_INTERP4;
  let x_111 : vec3<f32> = vs_INTERP9;
  u_xlat1 = (vec3<f32>(x_109.y, x_109.z, x_109.x) * vec3<f32>(x_111.z, x_111.x, x_111.y));
  let x_114 : vec3<f32> = vs_INTERP9;
  let x_116 : vec4<f32> = vs_INTERP4;
  let x_119 : vec3<f32> = u_xlat1;
  u_xlat1 = ((vec3<f32>(x_114.y, x_114.z, x_114.x) * vec3<f32>(x_116.z, x_116.x, x_116.y)) + -(x_119));
  let x_122 : vec3<f32> = u_xlat26;
  let x_124 : vec3<f32> = u_xlat1;
  u_xlat26 = (vec3<f32>(x_122.x, x_122.x, x_122.x) * x_124);
  let x_126 : vec4<f32> = u_xlat0;
  let x_128 : vec3<f32> = vs_INTERP9;
  u_xlat1 = (vec3<f32>(x_126.x, x_126.x, x_126.x) * x_128);
  let x_131 : vec4<f32> = u_xlat0;
  let x_133 : vec4<f32> = vs_INTERP4;
  let x_135 : vec3<f32> = (vec3<f32>(x_131.x, x_131.x, x_131.x) * vec3<f32>(x_133.x, x_133.y, x_133.z));
  let x_136 : vec4<f32> = u_xlat2;
  u_xlat2 = vec4<f32>(x_135.x, x_135.y, x_135.z, x_136.w);
  let x_139 : vec3<f32> = u_xlat26;
  let x_140 : vec4<f32> = u_xlat0;
  let x_142 : vec3<f32> = (x_139 * vec3<f32>(x_140.x, x_140.x, x_140.x));
  let x_143 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_142.x, x_142.y, x_142.z, x_143.w);
  let x_152 : f32 = x_149.unity_OrthoParams.w;
  u_xlatb0 = (x_152 == 0.0f);
  let x_156 : vec3<f32> = vs_INTERP8;
  let x_161 : vec3<f32> = x_149.x_WorldSpaceCameraPos;
  u_xlat4 = (-(x_156) + x_161);
  let x_164 : vec3<f32> = u_xlat4;
  let x_165 : vec3<f32> = u_xlat4;
  u_xlat79 = dot(x_164, x_165);
  let x_167 : f32 = u_xlat79;
  u_xlat79 = inverseSqrt(x_167);
  let x_169 : f32 = u_xlat79;
  let x_171 : vec3<f32> = u_xlat4;
  u_xlat4 = (vec3<f32>(x_169, x_169, x_169) * x_171);
  let x_177 : f32 = x_149.unity_MatrixV[0i].z;
  u_xlat5.x = x_177;
  let x_181 : f32 = x_149.unity_MatrixV[1i].z;
  u_xlat5.y = x_181;
  let x_185 : f32 = x_149.unity_MatrixV[2i].z;
  u_xlat5.z = x_185;
  let x_187 : bool = u_xlatb0;
  if (x_187) {
    let x_192 : vec3<f32> = u_xlat4;
    x_189 = x_192;
  } else {
    let x_194 : vec4<f32> = u_xlat5;
    x_189 = vec3<f32>(x_194.x, x_194.y, x_194.z);
  }
  let x_196 : vec3<f32> = x_189;
  u_xlat4 = x_196;
  let x_197 : vec3<f32> = u_xlat4;
  let x_201 : vec4<f32> = x_83.unity_WorldToObject[1i];
  let x_203 : vec3<f32> = (vec3<f32>(x_197.y, x_197.y, x_197.y) * vec3<f32>(x_201.x, x_201.y, x_201.z));
  let x_204 : vec4<f32> = u_xlat5;
  u_xlat5 = vec4<f32>(x_203.x, x_203.y, x_203.z, x_204.w);
  let x_207 : vec4<f32> = x_83.unity_WorldToObject[0i];
  let x_209 : vec3<f32> = u_xlat4;
  let x_212 : vec4<f32> = u_xlat5;
  let x_214 : vec3<f32> = ((vec3<f32>(x_207.x, x_207.y, x_207.z) * vec3<f32>(x_209.x, x_209.x, x_209.x)) + vec3<f32>(x_212.x, x_212.y, x_212.z));
  let x_215 : vec4<f32> = u_xlat5;
  u_xlat5 = vec4<f32>(x_214.x, x_214.y, x_214.z, x_215.w);
  let x_218 : vec4<f32> = x_83.unity_WorldToObject[2i];
  let x_220 : vec3<f32> = u_xlat4;
  let x_223 : vec4<f32> = u_xlat5;
  let x_225 : vec3<f32> = ((vec3<f32>(x_218.x, x_218.y, x_218.z) * vec3<f32>(x_220.z, x_220.z, x_220.z)) + vec3<f32>(x_223.x, x_223.y, x_223.z));
  let x_226 : vec4<f32> = u_xlat5;
  u_xlat5 = vec4<f32>(x_225.x, x_225.y, x_225.z, x_226.w);
  let x_228 : vec4<f32> = u_xlat5;
  let x_230 : vec4<f32> = u_xlat5;
  u_xlat0.x = dot(vec3<f32>(x_228.x, x_228.y, x_228.z), vec3<f32>(x_230.x, x_230.y, x_230.z));
  let x_235 : f32 = u_xlat0.x;
  u_xlat0.x = inverseSqrt(x_235);
  let x_238 : vec4<f32> = u_xlat0;
  let x_240 : vec4<f32> = u_xlat5;
  let x_242 : vec3<f32> = (vec3<f32>(x_238.x, x_238.x, x_238.x) * vec3<f32>(x_240.x, x_240.y, x_240.z));
  let x_243 : vec4<f32> = u_xlat5;
  u_xlat5 = vec4<f32>(x_242.x, x_242.y, x_242.z, x_243.w);
  let x_257 : vec4<f32> = vs_INTERP5;
  let x_260 : f32 = x_149.x_GlobalMipBias.x;
  let x_261 : vec4<f32> = textureSampleBias(Texture2D_B222E8F, samplerTexture2D_B222E8F, vec2<f32>(x_257.x, x_257.y), x_260);
  u_xlat6 = x_261;
  let x_263 : vec4<f32> = u_xlat6;
  let x_269 : vec4<f32> = x_267.Color_C30C7CA3;
  u_xlat7 = (vec3<f32>(x_263.x, x_263.y, x_263.z) * vec3<f32>(x_269.x, x_269.y, x_269.z));
  let x_278 : vec4<f32> = vs_INTERP5;
  let x_281 : f32 = x_149.x_GlobalMipBias.x;
  let x_282 : vec4<f32> = textureSampleBias(Texture2D_D9BFD5F1, samplerTexture2D_D9BFD5F1, vec2<f32>(x_278.x, x_278.y), x_281);
  u_xlat8 = vec4<f32>(x_282.w, x_282.x, x_282.y, x_282.z);
  let x_285 : vec4<f32> = u_xlat8;
  u_xlat9 = ((vec4<f32>(x_285.y, x_285.z, x_285.w, x_285.x) * vec4<f32>(2.0f, 2.0f, 2.0f, 2.0f)) + vec4<f32>(-1.0f, -1.0f, -1.0f, -1.0f));
  let x_292 : vec4<f32> = u_xlat9;
  let x_293 : vec4<f32> = u_xlat9;
  u_xlat0.x = dot(x_292, x_293);
  let x_297 : f32 = u_xlat0.x;
  u_xlat0.x = inverseSqrt(x_297);
  let x_301 : vec4<f32> = u_xlat0;
  let x_303 : vec4<f32> = u_xlat9;
  u_xlat34 = (vec3<f32>(x_301.x, x_301.x, x_301.x) * vec3<f32>(x_303.x, x_303.y, x_303.z));
  let x_308 : f32 = vs_INTERP6.y;
  u_xlat0.x = (x_308 * 200.0f);
  let x_313 : f32 = u_xlat0.x;
  u_xlat0.x = min(x_313, 1.0f);
  let x_316 : vec4<f32> = u_xlat0;
  let x_318 : vec4<f32> = u_xlat6;
  let x_320 : vec3<f32> = (vec3<f32>(x_316.x, x_316.x, x_316.x) * vec3<f32>(x_318.x, x_318.y, x_318.z));
  let x_321 : vec4<f32> = u_xlat6;
  u_xlat6 = vec4<f32>(x_320.x, x_320.y, x_320.z, x_321.w);
  let x_323 : vec4<f32> = u_xlat3;
  let x_325 : vec3<f32> = u_xlat34;
  let x_327 : vec3<f32> = (vec3<f32>(x_323.x, x_323.y, x_323.z) * vec3<f32>(x_325.y, x_325.y, x_325.y));
  let x_328 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_327.x, x_327.y, x_327.z, x_328.w);
  let x_330 : vec3<f32> = u_xlat34;
  let x_332 : vec4<f32> = u_xlat2;
  let x_335 : vec4<f32> = u_xlat3;
  let x_337 : vec3<f32> = ((vec3<f32>(x_330.x, x_330.x, x_330.x) * vec3<f32>(x_332.x, x_332.y, x_332.z)) + vec3<f32>(x_335.x, x_335.y, x_335.z));
  let x_338 : vec4<f32> = u_xlat2;
  u_xlat2 = vec4<f32>(x_337.x, x_337.y, x_337.z, x_338.w);
  let x_340 : vec3<f32> = u_xlat34;
  let x_342 : vec3<f32> = u_xlat1;
  let x_344 : vec4<f32> = u_xlat2;
  u_xlat1 = ((vec3<f32>(x_340.z, x_340.z, x_340.z) * x_342) + vec3<f32>(x_344.x, x_344.y, x_344.z));
  let x_347 : vec3<f32> = u_xlat1;
  let x_348 : vec3<f32> = u_xlat1;
  u_xlat0.x = dot(x_347, x_348);
  let x_352 : f32 = u_xlat0.x;
  u_xlat0.x = max(x_352, 1.17549435e-38f);
  let x_357 : f32 = u_xlat0.x;
  u_xlat0.x = inverseSqrt(x_357);
  let x_360 : vec4<f32> = u_xlat0;
  let x_362 : vec3<f32> = u_xlat1;
  u_xlat1 = (vec3<f32>(x_360.x, x_360.x, x_360.x) * x_362);
  let x_364 : vec3<f32> = vs_INTERP8;
  let x_374 : vec4<f32> = x_372.x_CascadeShadowSplitSpheres0;
  let x_377 : vec3<f32> = (x_364 + -(vec3<f32>(x_374.x, x_374.y, x_374.z)));
  let x_378 : vec4<f32> = u_xlat2;
  u_xlat2 = vec4<f32>(x_377.x, x_377.y, x_377.z, x_378.w);
  let x_380 : vec3<f32> = vs_INTERP8;
  let x_382 : vec4<f32> = x_372.x_CascadeShadowSplitSpheres1;
  let x_385 : vec3<f32> = (x_380 + -(vec3<f32>(x_382.x, x_382.y, x_382.z)));
  let x_386 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_385.x, x_385.y, x_385.z, x_386.w);
  let x_388 : vec3<f32> = vs_INTERP8;
  let x_390 : vec4<f32> = x_372.x_CascadeShadowSplitSpheres2;
  let x_393 : vec3<f32> = (x_388 + -(vec3<f32>(x_390.x, x_390.y, x_390.z)));
  let x_394 : vec4<f32> = u_xlat9;
  u_xlat9 = vec4<f32>(x_393.x, x_393.y, x_393.z, x_394.w);
  let x_397 : vec3<f32> = vs_INTERP8;
  let x_400 : vec4<f32> = x_372.x_CascadeShadowSplitSpheres3;
  let x_403 : vec3<f32> = (x_397 + -(vec3<f32>(x_400.x, x_400.y, x_400.z)));
  let x_404 : vec4<f32> = u_xlat10;
  u_xlat10 = vec4<f32>(x_403.x, x_403.y, x_403.z, x_404.w);
  let x_406 : vec4<f32> = u_xlat2;
  let x_408 : vec4<f32> = u_xlat2;
  u_xlat2.x = dot(vec3<f32>(x_406.x, x_406.y, x_406.z), vec3<f32>(x_408.x, x_408.y, x_408.z));
  let x_412 : vec4<f32> = u_xlat3;
  let x_414 : vec4<f32> = u_xlat3;
  u_xlat2.y = dot(vec3<f32>(x_412.x, x_412.y, x_412.z), vec3<f32>(x_414.x, x_414.y, x_414.z));
  let x_418 : vec4<f32> = u_xlat9;
  let x_420 : vec4<f32> = u_xlat9;
  u_xlat2.z = dot(vec3<f32>(x_418.x, x_418.y, x_418.z), vec3<f32>(x_420.x, x_420.y, x_420.z));
  let x_424 : vec4<f32> = u_xlat10;
  let x_426 : vec4<f32> = u_xlat10;
  u_xlat2.w = dot(vec3<f32>(x_424.x, x_424.y, x_424.z), vec3<f32>(x_426.x, x_426.y, x_426.z));
  let x_433 : vec4<f32> = u_xlat2;
  let x_435 : vec4<f32> = x_372.x_CascadeShadowSplitSphereRadii;
  u_xlatb2 = (x_433 < x_435);
  let x_438 : bool = u_xlatb2.x;
  u_xlat3.x = select(0.0f, 1.0f, x_438);
  let x_442 : bool = u_xlatb2.y;
  u_xlat3.y = select(0.0f, 1.0f, x_442);
  let x_446 : bool = u_xlatb2.z;
  u_xlat3.z = select(0.0f, 1.0f, x_446);
  let x_450 : bool = u_xlatb2.w;
  u_xlat3.w = select(0.0f, 1.0f, x_450);
  let x_454 : bool = u_xlatb2.x;
  u_xlat2.x = select(-0.0f, -1.0f, x_454);
  let x_459 : bool = u_xlatb2.y;
  u_xlat2.y = select(-0.0f, -1.0f, x_459);
  let x_463 : bool = u_xlatb2.z;
  u_xlat2.z = select(-0.0f, -1.0f, x_463);
  let x_466 : vec4<f32> = u_xlat2;
  let x_468 : vec4<f32> = u_xlat3;
  let x_470 : vec3<f32> = (vec3<f32>(x_466.x, x_466.y, x_466.z) + vec3<f32>(x_468.y, x_468.z, x_468.w));
  let x_471 : vec4<f32> = u_xlat2;
  u_xlat2 = vec4<f32>(x_470.x, x_470.y, x_470.z, x_471.w);
  let x_473 : vec4<f32> = u_xlat2;
  let x_476 : vec3<f32> = max(vec3<f32>(x_473.x, x_473.y, x_473.z), vec3<f32>(0.0f, 0.0f, 0.0f));
  let x_477 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_477.x, x_476.x, x_476.y, x_476.z);
  let x_479 : vec4<f32> = u_xlat3;
  u_xlat0.x = dot(x_479, vec4<f32>(4.0f, 3.0f, 2.0f, 1.0f));
  let x_486 : f32 = u_xlat0.x;
  u_xlat0.x = (-(x_486) + 4.0f);
  let x_493 : f32 = u_xlat0.x;
  u_xlatu0 = u32(x_493);
  let x_497 : u32 = u_xlatu0;
  u_xlati0 = (bitcast<i32>(x_497) << bitcast<u32>(2i));
  let x_500 : vec3<f32> = vs_INTERP8;
  let x_502 : i32 = u_xlati0;
  let x_505 : i32 = u_xlati0;
  let x_509 : vec4<f32> = x_372.x_MainLightWorldToShadow[((x_502 + 1i) / 4i)][((x_505 + 1i) % 4i)];
  let x_511 : vec3<f32> = (vec3<f32>(x_500.y, x_500.y, x_500.y) * vec3<f32>(x_509.x, x_509.y, x_509.z));
  let x_512 : vec4<f32> = u_xlat2;
  u_xlat2 = vec4<f32>(x_511.x, x_511.y, x_511.z, x_512.w);
  let x_514 : i32 = u_xlati0;
  let x_516 : i32 = u_xlati0;
  let x_519 : vec4<f32> = x_372.x_MainLightWorldToShadow[(x_514 / 4i)][(x_516 % 4i)];
  let x_521 : vec3<f32> = vs_INTERP8;
  let x_524 : vec4<f32> = u_xlat2;
  let x_526 : vec3<f32> = ((vec3<f32>(x_519.x, x_519.y, x_519.z) * vec3<f32>(x_521.x, x_521.x, x_521.x)) + vec3<f32>(x_524.x, x_524.y, x_524.z));
  let x_527 : vec4<f32> = u_xlat2;
  u_xlat2 = vec4<f32>(x_526.x, x_526.y, x_526.z, x_527.w);
  let x_529 : i32 = u_xlati0;
  let x_532 : i32 = u_xlati0;
  let x_536 : vec4<f32> = x_372.x_MainLightWorldToShadow[((x_529 + 2i) / 4i)][((x_532 + 2i) % 4i)];
  let x_538 : vec3<f32> = vs_INTERP8;
  let x_541 : vec4<f32> = u_xlat2;
  let x_543 : vec3<f32> = ((vec3<f32>(x_536.x, x_536.y, x_536.z) * vec3<f32>(x_538.z, x_538.z, x_538.z)) + vec3<f32>(x_541.x, x_541.y, x_541.z));
  let x_544 : vec4<f32> = u_xlat2;
  u_xlat2 = vec4<f32>(x_543.x, x_543.y, x_543.z, x_544.w);
  let x_546 : vec4<f32> = u_xlat2;
  let x_548 : i32 = u_xlati0;
  let x_551 : i32 = u_xlati0;
  let x_555 : vec4<f32> = x_372.x_MainLightWorldToShadow[((x_548 + 3i) / 4i)][((x_551 + 3i) % 4i)];
  let x_557 : vec3<f32> = (vec3<f32>(x_546.x, x_546.y, x_546.z) + vec3<f32>(x_555.x, x_555.y, x_555.z));
  let x_558 : vec4<f32> = u_xlat2;
  u_xlat2 = vec4<f32>(x_557.x, x_557.y, x_557.z, x_558.w);
  let x_561 : f32 = x_372.x_MainLightShadowParams.y;
  u_xlatb0 = (0.0f < x_561);
  let x_563 : bool = u_xlatb0;
  if (x_563) {
    let x_568 : f32 = x_372.x_MainLightShadowParams.y;
    u_xlatb79 = (x_568 == 1.0f);
    let x_570 : bool = u_xlatb79;
    if (x_570) {
      let x_573 : vec4<f32> = u_xlat2;
      let x_577 : vec4<f32> = x_372.x_MainLightShadowOffset0;
      u_xlat3 = (vec4<f32>(x_573.x, x_573.y, x_573.x, x_573.y) + x_577);
      let x_580 : vec4<f32> = u_xlat3;
      let x_581 : vec2<f32> = vec2<f32>(x_580.x, x_580.y);
      let x_583 : f32 = u_xlat2.z;
      txVec0 = vec3<f32>(x_581.x, x_581.y, x_583);
      let x_595 : vec3<f32> = txVec0;
      let x_597 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_LinearClampCompare, x_595.xy, x_595.z);
      u_xlat9.x = x_597;
      let x_600 : vec4<f32> = u_xlat3;
      let x_601 : vec2<f32> = vec2<f32>(x_600.z, x_600.w);
      let x_603 : f32 = u_xlat2.z;
      txVec1 = vec3<f32>(x_601.x, x_601.y, x_603);
      let x_610 : vec3<f32> = txVec1;
      let x_612 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_LinearClampCompare, x_610.xy, x_610.z);
      u_xlat9.y = x_612;
      let x_614 : vec4<f32> = u_xlat2;
      let x_618 : vec4<f32> = x_372.x_MainLightShadowOffset1;
      u_xlat3 = (vec4<f32>(x_614.x, x_614.y, x_614.x, x_614.y) + x_618);
      let x_621 : vec4<f32> = u_xlat3;
      let x_622 : vec2<f32> = vec2<f32>(x_621.x, x_621.y);
      let x_624 : f32 = u_xlat2.z;
      txVec2 = vec3<f32>(x_622.x, x_622.y, x_624);
      let x_631 : vec3<f32> = txVec2;
      let x_633 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_LinearClampCompare, x_631.xy, x_631.z);
      u_xlat9.z = x_633;
      let x_636 : vec4<f32> = u_xlat3;
      let x_637 : vec2<f32> = vec2<f32>(x_636.z, x_636.w);
      let x_639 : f32 = u_xlat2.z;
      txVec3 = vec3<f32>(x_637.x, x_637.y, x_639);
      let x_646 : vec3<f32> = txVec3;
      let x_648 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_LinearClampCompare, x_646.xy, x_646.z);
      u_xlat9.w = x_648;
      let x_650 : vec4<f32> = u_xlat9;
      u_xlat79 = dot(x_650, vec4<f32>(0.25f, 0.25f, 0.25f, 0.25f));
    } else {
      let x_657 : f32 = x_372.x_MainLightShadowParams.y;
      u_xlatb80 = (x_657 == 2.0f);
      let x_659 : bool = u_xlatb80;
      if (x_659) {
        let x_662 : vec4<f32> = u_xlat2;
        let x_666 : vec4<f32> = x_372.x_MainLightShadowmapSize;
        let x_671 : vec2<f32> = ((vec2<f32>(x_662.x, x_662.y) * vec2<f32>(x_666.z, x_666.w)) + vec2<f32>(0.5f, 0.5f));
        let x_672 : vec4<f32> = u_xlat3;
        u_xlat3 = vec4<f32>(x_671.x, x_671.y, x_672.z, x_672.w);
        let x_674 : vec4<f32> = u_xlat3;
        let x_676 : vec2<f32> = floor(vec2<f32>(x_674.x, x_674.y));
        let x_677 : vec4<f32> = u_xlat3;
        u_xlat3 = vec4<f32>(x_676.x, x_676.y, x_677.z, x_677.w);
        let x_681 : vec4<f32> = u_xlat2;
        let x_684 : vec4<f32> = x_372.x_MainLightShadowmapSize;
        let x_687 : vec4<f32> = u_xlat3;
        u_xlat55 = ((vec2<f32>(x_681.x, x_681.y) * vec2<f32>(x_684.z, x_684.w)) + -(vec2<f32>(x_687.x, x_687.y)));
        let x_691 : vec2<f32> = u_xlat55;
        u_xlat9 = (vec4<f32>(x_691.x, x_691.x, x_691.y, x_691.y) + vec4<f32>(0.5f, 1.0f, 0.5f, 1.0f));
        let x_695 : vec4<f32> = u_xlat9;
        let x_697 : vec4<f32> = u_xlat9;
        u_xlat10 = (vec4<f32>(x_695.x, x_695.x, x_695.z, x_695.z) * vec4<f32>(x_697.x, x_697.x, x_697.z, x_697.z));
        let x_700 : vec4<f32> = u_xlat10;
        let x_704 : vec2<f32> = (vec2<f32>(x_700.y, x_700.w) * vec2<f32>(0.07999999821186065674f, 0.07999999821186065674f));
        let x_705 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_704.x, x_705.y, x_704.y, x_705.w);
        let x_707 : vec4<f32> = u_xlat10;
        let x_710 : vec2<f32> = u_xlat55;
        let x_712 : vec2<f32> = ((vec2<f32>(x_707.x, x_707.z) * vec2<f32>(0.5f, 0.5f)) + -(x_710));
        let x_713 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_712.x, x_712.y, x_713.z, x_713.w);
        let x_716 : vec2<f32> = u_xlat55;
        u_xlat62 = (-(x_716) + vec2<f32>(1.0f, 1.0f));
        let x_721 : vec2<f32> = u_xlat55;
        let x_723 : vec2<f32> = min(x_721, vec2<f32>(0.0f, 0.0f));
        let x_724 : vec4<f32> = u_xlat11;
        u_xlat11 = vec4<f32>(x_723.x, x_723.y, x_724.z, x_724.w);
        let x_726 : vec4<f32> = u_xlat11;
        let x_729 : vec4<f32> = u_xlat11;
        let x_732 : vec2<f32> = u_xlat62;
        let x_733 : vec2<f32> = ((-(vec2<f32>(x_726.x, x_726.y)) * vec2<f32>(x_729.x, x_729.y)) + x_732);
        let x_734 : vec4<f32> = u_xlat11;
        u_xlat11 = vec4<f32>(x_733.x, x_733.y, x_734.z, x_734.w);
        let x_736 : vec2<f32> = u_xlat55;
        u_xlat55 = max(x_736, vec2<f32>(0.0f, 0.0f));
        let x_738 : vec2<f32> = u_xlat55;
        let x_740 : vec2<f32> = u_xlat55;
        let x_742 : vec4<f32> = u_xlat9;
        u_xlat55 = ((-(x_738) * x_740) + vec2<f32>(x_742.y, x_742.w));
        let x_745 : vec4<f32> = u_xlat11;
        let x_747 : vec2<f32> = (vec2<f32>(x_745.x, x_745.y) + vec2<f32>(1.0f, 1.0f));
        let x_748 : vec4<f32> = u_xlat11;
        u_xlat11 = vec4<f32>(x_747.x, x_747.y, x_748.z, x_748.w);
        let x_750 : vec2<f32> = u_xlat55;
        u_xlat55 = (x_750 + vec2<f32>(1.0f, 1.0f));
        let x_753 : vec4<f32> = u_xlat10;
        let x_757 : vec2<f32> = (vec2<f32>(x_753.x, x_753.y) * vec2<f32>(0.15999999642372131348f, 0.15999999642372131348f));
        let x_758 : vec4<f32> = u_xlat12;
        u_xlat12 = vec4<f32>(x_757.x, x_757.y, x_758.z, x_758.w);
        let x_760 : vec2<f32> = u_xlat62;
        let x_761 : vec2<f32> = (x_760 * vec2<f32>(0.15999999642372131348f, 0.15999999642372131348f));
        let x_762 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_761.x, x_761.y, x_762.z, x_762.w);
        let x_764 : vec4<f32> = u_xlat11;
        let x_766 : vec2<f32> = (vec2<f32>(x_764.x, x_764.y) * vec2<f32>(0.15999999642372131348f, 0.15999999642372131348f));
        let x_767 : vec4<f32> = u_xlat11;
        u_xlat11 = vec4<f32>(x_766.x, x_766.y, x_767.z, x_767.w);
        let x_770 : vec2<f32> = u_xlat55;
        let x_771 : vec2<f32> = (x_770 * vec2<f32>(0.15999999642372131348f, 0.15999999642372131348f));
        let x_772 : vec4<f32> = u_xlat13;
        u_xlat13 = vec4<f32>(x_771.x, x_771.y, x_772.z, x_772.w);
        let x_774 : vec4<f32> = u_xlat9;
        u_xlat55 = (vec2<f32>(x_774.y, x_774.w) * vec2<f32>(0.15999999642372131348f, 0.15999999642372131348f));
        let x_778 : f32 = u_xlat11.x;
        u_xlat12.z = x_778;
        let x_781 : f32 = u_xlat55.x;
        u_xlat12.w = x_781;
        let x_784 : f32 = u_xlat13.x;
        u_xlat10.z = x_784;
        let x_787 : f32 = u_xlat9.x;
        u_xlat10.w = x_787;
        let x_790 : vec4<f32> = u_xlat10;
        let x_792 : vec4<f32> = u_xlat12;
        u_xlat14 = (vec4<f32>(x_790.z, x_790.w, x_790.x, x_790.z) + vec4<f32>(x_792.z, x_792.w, x_792.x, x_792.z));
        let x_796 : f32 = u_xlat12.y;
        u_xlat11.z = x_796;
        let x_799 : f32 = u_xlat55.y;
        u_xlat11.w = x_799;
        let x_802 : f32 = u_xlat10.y;
        u_xlat13.z = x_802;
        let x_805 : f32 = u_xlat9.z;
        u_xlat13.w = x_805;
        let x_807 : vec4<f32> = u_xlat11;
        let x_809 : vec4<f32> = u_xlat13;
        let x_811 : vec3<f32> = (vec3<f32>(x_807.z, x_807.y, x_807.w) + vec3<f32>(x_809.z, x_809.y, x_809.w));
        let x_812 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_811.x, x_811.y, x_811.z, x_812.w);
        let x_814 : vec4<f32> = u_xlat10;
        let x_816 : vec4<f32> = u_xlat14;
        let x_818 : vec3<f32> = (vec3<f32>(x_814.x, x_814.z, x_814.w) / vec3<f32>(x_816.z, x_816.w, x_816.y));
        let x_819 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_818.x, x_818.y, x_818.z, x_819.w);
        let x_821 : vec4<f32> = u_xlat10;
        let x_827 : vec3<f32> = (vec3<f32>(x_821.x, x_821.y, x_821.z) + vec3<f32>(-2.5f, -0.5f, 1.5f));
        let x_828 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_827.x, x_827.y, x_827.z, x_828.w);
        let x_830 : vec4<f32> = u_xlat13;
        let x_832 : vec4<f32> = u_xlat9;
        let x_834 : vec3<f32> = (vec3<f32>(x_830.z, x_830.y, x_830.w) / vec3<f32>(x_832.x, x_832.y, x_832.z));
        let x_835 : vec4<f32> = u_xlat11;
        u_xlat11 = vec4<f32>(x_834.x, x_834.y, x_834.z, x_835.w);
        let x_837 : vec4<f32> = u_xlat11;
        let x_839 : vec3<f32> = (vec3<f32>(x_837.x, x_837.y, x_837.z) + vec3<f32>(-2.5f, -0.5f, 1.5f));
        let x_840 : vec4<f32> = u_xlat11;
        u_xlat11 = vec4<f32>(x_839.x, x_839.y, x_839.z, x_840.w);
        let x_842 : vec4<f32> = u_xlat10;
        let x_845 : vec4<f32> = x_372.x_MainLightShadowmapSize;
        let x_847 : vec3<f32> = (vec3<f32>(x_842.y, x_842.x, x_842.z) * vec3<f32>(x_845.x, x_845.x, x_845.x));
        let x_848 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_847.x, x_847.y, x_847.z, x_848.w);
        let x_850 : vec4<f32> = u_xlat11;
        let x_853 : vec4<f32> = x_372.x_MainLightShadowmapSize;
        let x_855 : vec3<f32> = (vec3<f32>(x_850.x, x_850.y, x_850.z) * vec3<f32>(x_853.y, x_853.y, x_853.y));
        let x_856 : vec4<f32> = u_xlat11;
        u_xlat11 = vec4<f32>(x_855.x, x_855.y, x_855.z, x_856.w);
        let x_859 : f32 = u_xlat11.x;
        u_xlat10.w = x_859;
        let x_861 : vec4<f32> = u_xlat3;
        let x_864 : vec4<f32> = x_372.x_MainLightShadowmapSize;
        let x_867 : vec4<f32> = u_xlat10;
        u_xlat12 = ((vec4<f32>(x_861.x, x_861.y, x_861.x, x_861.y) * vec4<f32>(x_864.x, x_864.y, x_864.x, x_864.y)) + vec4<f32>(x_867.y, x_867.w, x_867.x, x_867.w));
        let x_870 : vec4<f32> = u_xlat3;
        let x_873 : vec4<f32> = x_372.x_MainLightShadowmapSize;
        let x_876 : vec4<f32> = u_xlat10;
        u_xlat55 = ((vec2<f32>(x_870.x, x_870.y) * vec2<f32>(x_873.x, x_873.y)) + vec2<f32>(x_876.z, x_876.w));
        let x_880 : f32 = u_xlat10.y;
        u_xlat11.w = x_880;
        let x_882 : vec4<f32> = u_xlat11;
        let x_883 : vec2<f32> = vec2<f32>(x_882.y, x_882.z);
        let x_884 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_884.x, x_883.x, x_884.z, x_883.y);
        let x_886 : vec4<f32> = u_xlat3;
        let x_889 : vec4<f32> = x_372.x_MainLightShadowmapSize;
        let x_892 : vec4<f32> = u_xlat10;
        u_xlat13 = ((vec4<f32>(x_886.x, x_886.y, x_886.x, x_886.y) * vec4<f32>(x_889.x, x_889.y, x_889.x, x_889.y)) + vec4<f32>(x_892.x, x_892.y, x_892.z, x_892.y));
        let x_895 : vec4<f32> = u_xlat3;
        let x_898 : vec4<f32> = x_372.x_MainLightShadowmapSize;
        let x_901 : vec4<f32> = u_xlat11;
        u_xlat11 = ((vec4<f32>(x_895.x, x_895.y, x_895.x, x_895.y) * vec4<f32>(x_898.x, x_898.y, x_898.x, x_898.y)) + vec4<f32>(x_901.w, x_901.y, x_901.w, x_901.z));
        let x_904 : vec4<f32> = u_xlat3;
        let x_907 : vec4<f32> = x_372.x_MainLightShadowmapSize;
        let x_910 : vec4<f32> = u_xlat10;
        u_xlat10 = ((vec4<f32>(x_904.x, x_904.y, x_904.x, x_904.y) * vec4<f32>(x_907.x, x_907.y, x_907.x, x_907.y)) + vec4<f32>(x_910.x, x_910.w, x_910.z, x_910.w));
        let x_914 : vec4<f32> = u_xlat9;
        let x_916 : vec4<f32> = u_xlat14;
        u_xlat15 = (vec4<f32>(x_914.x, x_914.x, x_914.x, x_914.y) * vec4<f32>(x_916.z, x_916.w, x_916.y, x_916.z));
        let x_920 : vec4<f32> = u_xlat9;
        let x_922 : vec4<f32> = u_xlat14;
        u_xlat16 = (vec4<f32>(x_920.y, x_920.y, x_920.z, x_920.z) * x_922);
        let x_926 : f32 = u_xlat9.z;
        let x_928 : f32 = u_xlat14.y;
        u_xlat80 = (x_926 * x_928);
        let x_931 : vec4<f32> = u_xlat12;
        let x_932 : vec2<f32> = vec2<f32>(x_931.x, x_931.y);
        let x_934 : f32 = u_xlat2.z;
        txVec4 = vec3<f32>(x_932.x, x_932.y, x_934);
        let x_941 : vec3<f32> = txVec4;
        let x_943 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_LinearClampCompare, x_941.xy, x_941.z);
        u_xlat3.x = x_943;
        let x_946 : vec4<f32> = u_xlat12;
        let x_947 : vec2<f32> = vec2<f32>(x_946.z, x_946.w);
        let x_949 : f32 = u_xlat2.z;
        txVec5 = vec3<f32>(x_947.x, x_947.y, x_949);
        let x_957 : vec3<f32> = txVec5;
        let x_959 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_LinearClampCompare, x_957.xy, x_957.z);
        u_xlat29 = x_959;
        let x_960 : f32 = u_xlat29;
        let x_962 : f32 = u_xlat15.y;
        u_xlat29 = (x_960 * x_962);
        let x_965 : f32 = u_xlat15.x;
        let x_967 : f32 = u_xlat3.x;
        let x_969 : f32 = u_xlat29;
        u_xlat3.x = ((x_965 * x_967) + x_969);
        let x_973 : vec2<f32> = u_xlat55;
        let x_975 : f32 = u_xlat2.z;
        txVec6 = vec3<f32>(x_973.x, x_973.y, x_975);
        let x_982 : vec3<f32> = txVec6;
        let x_984 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_LinearClampCompare, x_982.xy, x_982.z);
        u_xlat29 = x_984;
        let x_986 : f32 = u_xlat15.z;
        let x_987 : f32 = u_xlat29;
        let x_990 : f32 = u_xlat3.x;
        u_xlat3.x = ((x_986 * x_987) + x_990);
        let x_994 : vec4<f32> = u_xlat11;
        let x_995 : vec2<f32> = vec2<f32>(x_994.x, x_994.y);
        let x_997 : f32 = u_xlat2.z;
        txVec7 = vec3<f32>(x_995.x, x_995.y, x_997);
        let x_1004 : vec3<f32> = txVec7;
        let x_1006 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_LinearClampCompare, x_1004.xy, x_1004.z);
        u_xlat29 = x_1006;
        let x_1008 : f32 = u_xlat15.w;
        let x_1009 : f32 = u_xlat29;
        let x_1012 : f32 = u_xlat3.x;
        u_xlat3.x = ((x_1008 * x_1009) + x_1012);
        let x_1016 : vec4<f32> = u_xlat13;
        let x_1017 : vec2<f32> = vec2<f32>(x_1016.x, x_1016.y);
        let x_1019 : f32 = u_xlat2.z;
        txVec8 = vec3<f32>(x_1017.x, x_1017.y, x_1019);
        let x_1026 : vec3<f32> = txVec8;
        let x_1028 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_LinearClampCompare, x_1026.xy, x_1026.z);
        u_xlat29 = x_1028;
        let x_1030 : f32 = u_xlat16.x;
        let x_1031 : f32 = u_xlat29;
        let x_1034 : f32 = u_xlat3.x;
        u_xlat3.x = ((x_1030 * x_1031) + x_1034);
        let x_1038 : vec4<f32> = u_xlat13;
        let x_1039 : vec2<f32> = vec2<f32>(x_1038.z, x_1038.w);
        let x_1041 : f32 = u_xlat2.z;
        txVec9 = vec3<f32>(x_1039.x, x_1039.y, x_1041);
        let x_1048 : vec3<f32> = txVec9;
        let x_1050 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_LinearClampCompare, x_1048.xy, x_1048.z);
        u_xlat29 = x_1050;
        let x_1052 : f32 = u_xlat16.y;
        let x_1053 : f32 = u_xlat29;
        let x_1056 : f32 = u_xlat3.x;
        u_xlat3.x = ((x_1052 * x_1053) + x_1056);
        let x_1060 : vec4<f32> = u_xlat11;
        let x_1061 : vec2<f32> = vec2<f32>(x_1060.z, x_1060.w);
        let x_1063 : f32 = u_xlat2.z;
        txVec10 = vec3<f32>(x_1061.x, x_1061.y, x_1063);
        let x_1070 : vec3<f32> = txVec10;
        let x_1072 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_LinearClampCompare, x_1070.xy, x_1070.z);
        u_xlat29 = x_1072;
        let x_1074 : f32 = u_xlat16.z;
        let x_1075 : f32 = u_xlat29;
        let x_1078 : f32 = u_xlat3.x;
        u_xlat3.x = ((x_1074 * x_1075) + x_1078);
        let x_1082 : vec4<f32> = u_xlat10;
        let x_1083 : vec2<f32> = vec2<f32>(x_1082.x, x_1082.y);
        let x_1085 : f32 = u_xlat2.z;
        txVec11 = vec3<f32>(x_1083.x, x_1083.y, x_1085);
        let x_1092 : vec3<f32> = txVec11;
        let x_1094 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_LinearClampCompare, x_1092.xy, x_1092.z);
        u_xlat29 = x_1094;
        let x_1096 : f32 = u_xlat16.w;
        let x_1097 : f32 = u_xlat29;
        let x_1100 : f32 = u_xlat3.x;
        u_xlat3.x = ((x_1096 * x_1097) + x_1100);
        let x_1104 : vec4<f32> = u_xlat10;
        let x_1105 : vec2<f32> = vec2<f32>(x_1104.z, x_1104.w);
        let x_1107 : f32 = u_xlat2.z;
        txVec12 = vec3<f32>(x_1105.x, x_1105.y, x_1107);
        let x_1114 : vec3<f32> = txVec12;
        let x_1116 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_LinearClampCompare, x_1114.xy, x_1114.z);
        u_xlat29 = x_1116;
        let x_1117 : f32 = u_xlat80;
        let x_1118 : f32 = u_xlat29;
        let x_1121 : f32 = u_xlat3.x;
        u_xlat79 = ((x_1117 * x_1118) + x_1121);
      } else {
        let x_1124 : vec4<f32> = u_xlat2;
        let x_1127 : vec4<f32> = x_372.x_MainLightShadowmapSize;
        let x_1130 : vec2<f32> = ((vec2<f32>(x_1124.x, x_1124.y) * vec2<f32>(x_1127.z, x_1127.w)) + vec2<f32>(0.5f, 0.5f));
        let x_1131 : vec4<f32> = u_xlat3;
        u_xlat3 = vec4<f32>(x_1130.x, x_1130.y, x_1131.z, x_1131.w);
        let x_1133 : vec4<f32> = u_xlat3;
        let x_1135 : vec2<f32> = floor(vec2<f32>(x_1133.x, x_1133.y));
        let x_1136 : vec4<f32> = u_xlat3;
        u_xlat3 = vec4<f32>(x_1135.x, x_1135.y, x_1136.z, x_1136.w);
        let x_1138 : vec4<f32> = u_xlat2;
        let x_1141 : vec4<f32> = x_372.x_MainLightShadowmapSize;
        let x_1144 : vec4<f32> = u_xlat3;
        u_xlat55 = ((vec2<f32>(x_1138.x, x_1138.y) * vec2<f32>(x_1141.z, x_1141.w)) + -(vec2<f32>(x_1144.x, x_1144.y)));
        let x_1148 : vec2<f32> = u_xlat55;
        u_xlat9 = (vec4<f32>(x_1148.x, x_1148.x, x_1148.y, x_1148.y) + vec4<f32>(0.5f, 1.0f, 0.5f, 1.0f));
        let x_1151 : vec4<f32> = u_xlat9;
        let x_1153 : vec4<f32> = u_xlat9;
        u_xlat10 = (vec4<f32>(x_1151.x, x_1151.x, x_1151.z, x_1151.z) * vec4<f32>(x_1153.x, x_1153.x, x_1153.z, x_1153.z));
        let x_1156 : vec4<f32> = u_xlat10;
        let x_1160 : vec2<f32> = (vec2<f32>(x_1156.y, x_1156.w) * vec2<f32>(0.04081600159406661987f, 0.04081600159406661987f));
        let x_1161 : vec4<f32> = u_xlat11;
        u_xlat11 = vec4<f32>(x_1161.x, x_1160.x, x_1161.z, x_1160.y);
        let x_1163 : vec4<f32> = u_xlat10;
        let x_1166 : vec2<f32> = u_xlat55;
        let x_1168 : vec2<f32> = ((vec2<f32>(x_1163.x, x_1163.z) * vec2<f32>(0.5f, 0.5f)) + -(x_1166));
        let x_1169 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_1168.x, x_1169.y, x_1168.y, x_1169.w);
        let x_1171 : vec2<f32> = u_xlat55;
        let x_1173 : vec2<f32> = (-(x_1171) + vec2<f32>(1.0f, 1.0f));
        let x_1174 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_1173.x, x_1173.y, x_1174.z, x_1174.w);
        let x_1176 : vec2<f32> = u_xlat55;
        u_xlat62 = min(x_1176, vec2<f32>(0.0f, 0.0f));
        let x_1178 : vec2<f32> = u_xlat62;
        let x_1180 : vec2<f32> = u_xlat62;
        let x_1182 : vec4<f32> = u_xlat10;
        let x_1184 : vec2<f32> = ((-(x_1178) * x_1180) + vec2<f32>(x_1182.x, x_1182.y));
        let x_1185 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_1184.x, x_1184.y, x_1185.z, x_1185.w);
        let x_1187 : vec2<f32> = u_xlat55;
        u_xlat62 = max(x_1187, vec2<f32>(0.0f, 0.0f));
        let x_1190 : vec2<f32> = u_xlat62;
        let x_1192 : vec2<f32> = u_xlat62;
        let x_1194 : vec4<f32> = u_xlat9;
        let x_1196 : vec2<f32> = ((-(x_1190) * x_1192) + vec2<f32>(x_1194.y, x_1194.w));
        let x_1197 : vec3<f32> = u_xlat35;
        u_xlat35 = vec3<f32>(x_1196.x, x_1197.y, x_1196.y);
        let x_1199 : vec4<f32> = u_xlat10;
        let x_1202 : vec2<f32> = (vec2<f32>(x_1199.x, x_1199.y) + vec2<f32>(2.0f, 2.0f));
        let x_1203 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_1202.x, x_1202.y, x_1203.z, x_1203.w);
        let x_1205 : vec3<f32> = u_xlat35;
        let x_1207 : vec2<f32> = (vec2<f32>(x_1205.x, x_1205.z) + vec2<f32>(2.0f, 2.0f));
        let x_1208 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_1208.x, x_1207.x, x_1208.z, x_1207.y);
        let x_1211 : f32 = u_xlat9.y;
        u_xlat12.z = (x_1211 * 0.08163200318813323975f);
        let x_1215 : vec4<f32> = u_xlat9;
        let x_1218 : vec3<f32> = (vec3<f32>(x_1215.z, x_1215.x, x_1215.w) * vec3<f32>(0.08163200318813323975f, 0.08163200318813323975f, 0.08163200318813323975f));
        let x_1219 : vec4<f32> = u_xlat13;
        u_xlat13 = vec4<f32>(x_1218.x, x_1218.y, x_1218.z, x_1219.w);
        let x_1221 : vec4<f32> = u_xlat10;
        let x_1224 : vec2<f32> = (vec2<f32>(x_1221.x, x_1221.y) * vec2<f32>(0.08163200318813323975f, 0.08163200318813323975f));
        let x_1225 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_1224.x, x_1224.y, x_1225.z, x_1225.w);
        let x_1228 : f32 = u_xlat13.y;
        u_xlat12.x = x_1228;
        let x_1230 : vec2<f32> = u_xlat55;
        let x_1237 : vec2<f32> = ((vec2<f32>(x_1230.x, x_1230.x) * vec2<f32>(-0.08163200318813323975f, 0.08163200318813323975f)) + vec2<f32>(0.16326400637626647949f, 0.08163200318813323975f));
        let x_1238 : vec4<f32> = u_xlat12;
        u_xlat12 = vec4<f32>(x_1238.x, x_1237.x, x_1238.z, x_1237.y);
        let x_1240 : vec2<f32> = u_xlat55;
        let x_1244 : vec2<f32> = ((vec2<f32>(x_1240.x, x_1240.x) * vec2<f32>(-0.08163200318813323975f, 0.08163200318813323975f)) + vec2<f32>(0.08163200318813323975f, 0.16326400637626647949f));
        let x_1245 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_1244.x, x_1245.y, x_1244.y, x_1245.w);
        let x_1248 : f32 = u_xlat9.x;
        u_xlat10.y = x_1248;
        let x_1251 : f32 = u_xlat11.y;
        u_xlat10.w = x_1251;
        let x_1253 : vec4<f32> = u_xlat10;
        let x_1254 : vec4<f32> = u_xlat12;
        u_xlat12 = (x_1253 + x_1254);
        let x_1256 : vec2<f32> = u_xlat55;
        let x_1259 : vec2<f32> = ((vec2<f32>(x_1256.y, x_1256.y) * vec2<f32>(-0.08163200318813323975f, 0.08163200318813323975f)) + vec2<f32>(0.16326400637626647949f, 0.08163200318813323975f));
        let x_1260 : vec4<f32> = u_xlat13;
        u_xlat13 = vec4<f32>(x_1260.x, x_1259.x, x_1260.z, x_1259.y);
        let x_1262 : vec2<f32> = u_xlat55;
        let x_1265 : vec2<f32> = ((vec2<f32>(x_1262.y, x_1262.y) * vec2<f32>(-0.08163200318813323975f, 0.08163200318813323975f)) + vec2<f32>(0.08163200318813323975f, 0.16326400637626647949f));
        let x_1266 : vec4<f32> = u_xlat11;
        u_xlat11 = vec4<f32>(x_1265.x, x_1266.y, x_1265.y, x_1266.w);
        let x_1269 : f32 = u_xlat9.y;
        u_xlat11.y = x_1269;
        let x_1271 : vec4<f32> = u_xlat11;
        let x_1272 : vec4<f32> = u_xlat13;
        u_xlat9 = (x_1271 + x_1272);
        let x_1274 : vec4<f32> = u_xlat10;
        let x_1275 : vec4<f32> = u_xlat12;
        u_xlat10 = (x_1274 / x_1275);
        let x_1277 : vec4<f32> = u_xlat10;
        u_xlat10 = (x_1277 + vec4<f32>(-3.5f, -1.5f, 0.5f, 2.5f));
        let x_1283 : vec4<f32> = u_xlat11;
        let x_1284 : vec4<f32> = u_xlat9;
        u_xlat11 = (x_1283 / x_1284);
        let x_1286 : vec4<f32> = u_xlat11;
        u_xlat11 = (x_1286 + vec4<f32>(-3.5f, -1.5f, 0.5f, 2.5f));
        let x_1288 : vec4<f32> = u_xlat10;
        let x_1291 : vec4<f32> = x_372.x_MainLightShadowmapSize;
        u_xlat10 = (vec4<f32>(x_1288.w, x_1288.x, x_1288.y, x_1288.z) * vec4<f32>(x_1291.x, x_1291.x, x_1291.x, x_1291.x));
        let x_1294 : vec4<f32> = u_xlat11;
        let x_1297 : vec4<f32> = x_372.x_MainLightShadowmapSize;
        u_xlat11 = (vec4<f32>(x_1294.x, x_1294.w, x_1294.y, x_1294.z) * vec4<f32>(x_1297.y, x_1297.y, x_1297.y, x_1297.y));
        let x_1300 : vec4<f32> = u_xlat10;
        let x_1301 : vec3<f32> = vec3<f32>(x_1300.y, x_1300.z, x_1300.w);
        let x_1302 : vec4<f32> = u_xlat13;
        u_xlat13 = vec4<f32>(x_1301.x, x_1302.y, x_1301.y, x_1301.z);
        let x_1305 : f32 = u_xlat11.x;
        u_xlat13.y = x_1305;
        let x_1307 : vec4<f32> = u_xlat3;
        let x_1310 : vec4<f32> = x_372.x_MainLightShadowmapSize;
        let x_1313 : vec4<f32> = u_xlat13;
        u_xlat14 = ((vec4<f32>(x_1307.x, x_1307.y, x_1307.x, x_1307.y) * vec4<f32>(x_1310.x, x_1310.y, x_1310.x, x_1310.y)) + vec4<f32>(x_1313.x, x_1313.y, x_1313.z, x_1313.y));
        let x_1316 : vec4<f32> = u_xlat3;
        let x_1319 : vec4<f32> = x_372.x_MainLightShadowmapSize;
        let x_1322 : vec4<f32> = u_xlat13;
        u_xlat55 = ((vec2<f32>(x_1316.x, x_1316.y) * vec2<f32>(x_1319.x, x_1319.y)) + vec2<f32>(x_1322.w, x_1322.y));
        let x_1326 : f32 = u_xlat13.y;
        u_xlat10.y = x_1326;
        let x_1329 : f32 = u_xlat11.z;
        u_xlat13.y = x_1329;
        let x_1331 : vec4<f32> = u_xlat3;
        let x_1334 : vec4<f32> = x_372.x_MainLightShadowmapSize;
        let x_1337 : vec4<f32> = u_xlat13;
        u_xlat15 = ((vec4<f32>(x_1331.x, x_1331.y, x_1331.x, x_1331.y) * vec4<f32>(x_1334.x, x_1334.y, x_1334.x, x_1334.y)) + vec4<f32>(x_1337.x, x_1337.y, x_1337.z, x_1337.y));
        let x_1340 : vec4<f32> = u_xlat3;
        let x_1343 : vec4<f32> = x_372.x_MainLightShadowmapSize;
        let x_1346 : vec4<f32> = u_xlat13;
        let x_1348 : vec2<f32> = ((vec2<f32>(x_1340.x, x_1340.y) * vec2<f32>(x_1343.x, x_1343.y)) + vec2<f32>(x_1346.w, x_1346.y));
        let x_1349 : vec4<f32> = u_xlat16;
        u_xlat16 = vec4<f32>(x_1348.x, x_1348.y, x_1349.z, x_1349.w);
        let x_1352 : f32 = u_xlat13.y;
        u_xlat10.z = x_1352;
        let x_1355 : vec4<f32> = u_xlat3;
        let x_1358 : vec4<f32> = x_372.x_MainLightShadowmapSize;
        let x_1361 : vec4<f32> = u_xlat10;
        u_xlat17 = ((vec4<f32>(x_1355.x, x_1355.y, x_1355.x, x_1355.y) * vec4<f32>(x_1358.x, x_1358.y, x_1358.x, x_1358.y)) + vec4<f32>(x_1361.x, x_1361.y, x_1361.x, x_1361.z));
        let x_1365 : f32 = u_xlat11.w;
        u_xlat13.y = x_1365;
        let x_1368 : vec4<f32> = u_xlat3;
        let x_1371 : vec4<f32> = x_372.x_MainLightShadowmapSize;
        let x_1374 : vec4<f32> = u_xlat13;
        u_xlat18 = ((vec4<f32>(x_1368.x, x_1368.y, x_1368.x, x_1368.y) * vec4<f32>(x_1371.x, x_1371.y, x_1371.x, x_1371.y)) + vec4<f32>(x_1374.x, x_1374.y, x_1374.z, x_1374.y));
        let x_1378 : vec4<f32> = u_xlat3;
        let x_1381 : vec4<f32> = x_372.x_MainLightShadowmapSize;
        let x_1384 : vec4<f32> = u_xlat13;
        u_xlat36 = ((vec2<f32>(x_1378.x, x_1378.y) * vec2<f32>(x_1381.x, x_1381.y)) + vec2<f32>(x_1384.w, x_1384.y));
        let x_1388 : f32 = u_xlat13.y;
        u_xlat10.w = x_1388;
        let x_1391 : vec4<f32> = u_xlat3;
        let x_1394 : vec4<f32> = x_372.x_MainLightShadowmapSize;
        let x_1397 : vec4<f32> = u_xlat10;
        u_xlat68 = ((vec2<f32>(x_1391.x, x_1391.y) * vec2<f32>(x_1394.x, x_1394.y)) + vec2<f32>(x_1397.x, x_1397.w));
        let x_1400 : vec4<f32> = u_xlat13;
        let x_1401 : vec3<f32> = vec3<f32>(x_1400.x, x_1400.z, x_1400.w);
        let x_1402 : vec4<f32> = u_xlat11;
        u_xlat11 = vec4<f32>(x_1401.x, x_1402.y, x_1401.y, x_1401.z);
        let x_1404 : vec4<f32> = u_xlat3;
        let x_1407 : vec4<f32> = x_372.x_MainLightShadowmapSize;
        let x_1410 : vec4<f32> = u_xlat11;
        u_xlat13 = ((vec4<f32>(x_1404.x, x_1404.y, x_1404.x, x_1404.y) * vec4<f32>(x_1407.x, x_1407.y, x_1407.x, x_1407.y)) + vec4<f32>(x_1410.x, x_1410.y, x_1410.z, x_1410.y));
        let x_1414 : vec4<f32> = u_xlat3;
        let x_1417 : vec4<f32> = x_372.x_MainLightShadowmapSize;
        let x_1420 : vec4<f32> = u_xlat11;
        u_xlat63 = ((vec2<f32>(x_1414.x, x_1414.y) * vec2<f32>(x_1417.x, x_1417.y)) + vec2<f32>(x_1420.w, x_1420.y));
        let x_1424 : f32 = u_xlat10.x;
        u_xlat11.x = x_1424;
        let x_1426 : vec4<f32> = u_xlat3;
        let x_1429 : vec4<f32> = x_372.x_MainLightShadowmapSize;
        let x_1432 : vec4<f32> = u_xlat11;
        let x_1434 : vec2<f32> = ((vec2<f32>(x_1426.x, x_1426.y) * vec2<f32>(x_1429.x, x_1429.y)) + vec2<f32>(x_1432.x, x_1432.y));
        let x_1435 : vec4<f32> = u_xlat3;
        u_xlat3 = vec4<f32>(x_1434.x, x_1434.y, x_1435.z, x_1435.w);
        let x_1438 : vec4<f32> = u_xlat9;
        let x_1440 : vec4<f32> = u_xlat12;
        u_xlat19 = (vec4<f32>(x_1438.x, x_1438.x, x_1438.x, x_1438.x) * x_1440);
        let x_1443 : vec4<f32> = u_xlat9;
        let x_1445 : vec4<f32> = u_xlat12;
        u_xlat20 = (vec4<f32>(x_1443.y, x_1443.y, x_1443.y, x_1443.y) * x_1445);
        let x_1448 : vec4<f32> = u_xlat9;
        let x_1450 : vec4<f32> = u_xlat12;
        u_xlat21 = (vec4<f32>(x_1448.z, x_1448.z, x_1448.z, x_1448.z) * x_1450);
        let x_1452 : vec4<f32> = u_xlat9;
        let x_1454 : vec4<f32> = u_xlat12;
        u_xlat9 = (vec4<f32>(x_1452.w, x_1452.w, x_1452.w, x_1452.w) * x_1454);
        let x_1457 : vec4<f32> = u_xlat14;
        let x_1458 : vec2<f32> = vec2<f32>(x_1457.x, x_1457.y);
        let x_1460 : f32 = u_xlat2.z;
        txVec13 = vec3<f32>(x_1458.x, x_1458.y, x_1460);
        let x_1467 : vec3<f32> = txVec13;
        let x_1469 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_LinearClampCompare, x_1467.xy, x_1467.z);
        u_xlat80 = x_1469;
        let x_1471 : vec4<f32> = u_xlat14;
        let x_1472 : vec2<f32> = vec2<f32>(x_1471.z, x_1471.w);
        let x_1474 : f32 = u_xlat2.z;
        txVec14 = vec3<f32>(x_1472.x, x_1472.y, x_1474);
        let x_1482 : vec3<f32> = txVec14;
        let x_1484 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_LinearClampCompare, x_1482.xy, x_1482.z);
        u_xlat82 = x_1484;
        let x_1485 : f32 = u_xlat82;
        let x_1487 : f32 = u_xlat19.y;
        u_xlat82 = (x_1485 * x_1487);
        let x_1490 : f32 = u_xlat19.x;
        let x_1491 : f32 = u_xlat80;
        let x_1493 : f32 = u_xlat82;
        u_xlat80 = ((x_1490 * x_1491) + x_1493);
        let x_1496 : vec2<f32> = u_xlat55;
        let x_1498 : f32 = u_xlat2.z;
        txVec15 = vec3<f32>(x_1496.x, x_1496.y, x_1498);
        let x_1505 : vec3<f32> = txVec15;
        let x_1507 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_LinearClampCompare, x_1505.xy, x_1505.z);
        u_xlat55.x = x_1507;
        let x_1510 : f32 = u_xlat19.z;
        let x_1512 : f32 = u_xlat55.x;
        let x_1514 : f32 = u_xlat80;
        u_xlat80 = ((x_1510 * x_1512) + x_1514);
        let x_1517 : vec4<f32> = u_xlat17;
        let x_1518 : vec2<f32> = vec2<f32>(x_1517.x, x_1517.y);
        let x_1520 : f32 = u_xlat2.z;
        txVec16 = vec3<f32>(x_1518.x, x_1518.y, x_1520);
        let x_1527 : vec3<f32> = txVec16;
        let x_1529 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_LinearClampCompare, x_1527.xy, x_1527.z);
        u_xlat55.x = x_1529;
        let x_1532 : f32 = u_xlat19.w;
        let x_1534 : f32 = u_xlat55.x;
        let x_1536 : f32 = u_xlat80;
        u_xlat80 = ((x_1532 * x_1534) + x_1536);
        let x_1539 : vec4<f32> = u_xlat15;
        let x_1540 : vec2<f32> = vec2<f32>(x_1539.x, x_1539.y);
        let x_1542 : f32 = u_xlat2.z;
        txVec17 = vec3<f32>(x_1540.x, x_1540.y, x_1542);
        let x_1549 : vec3<f32> = txVec17;
        let x_1551 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_LinearClampCompare, x_1549.xy, x_1549.z);
        u_xlat55.x = x_1551;
        let x_1554 : f32 = u_xlat20.x;
        let x_1556 : f32 = u_xlat55.x;
        let x_1558 : f32 = u_xlat80;
        u_xlat80 = ((x_1554 * x_1556) + x_1558);
        let x_1561 : vec4<f32> = u_xlat15;
        let x_1562 : vec2<f32> = vec2<f32>(x_1561.z, x_1561.w);
        let x_1564 : f32 = u_xlat2.z;
        txVec18 = vec3<f32>(x_1562.x, x_1562.y, x_1564);
        let x_1571 : vec3<f32> = txVec18;
        let x_1573 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_LinearClampCompare, x_1571.xy, x_1571.z);
        u_xlat55.x = x_1573;
        let x_1576 : f32 = u_xlat20.y;
        let x_1578 : f32 = u_xlat55.x;
        let x_1580 : f32 = u_xlat80;
        u_xlat80 = ((x_1576 * x_1578) + x_1580);
        let x_1583 : vec4<f32> = u_xlat16;
        let x_1584 : vec2<f32> = vec2<f32>(x_1583.x, x_1583.y);
        let x_1586 : f32 = u_xlat2.z;
        txVec19 = vec3<f32>(x_1584.x, x_1584.y, x_1586);
        let x_1593 : vec3<f32> = txVec19;
        let x_1595 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_LinearClampCompare, x_1593.xy, x_1593.z);
        u_xlat55.x = x_1595;
        let x_1598 : f32 = u_xlat20.z;
        let x_1600 : f32 = u_xlat55.x;
        let x_1602 : f32 = u_xlat80;
        u_xlat80 = ((x_1598 * x_1600) + x_1602);
        let x_1605 : vec4<f32> = u_xlat17;
        let x_1606 : vec2<f32> = vec2<f32>(x_1605.z, x_1605.w);
        let x_1608 : f32 = u_xlat2.z;
        txVec20 = vec3<f32>(x_1606.x, x_1606.y, x_1608);
        let x_1615 : vec3<f32> = txVec20;
        let x_1617 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_LinearClampCompare, x_1615.xy, x_1615.z);
        u_xlat55.x = x_1617;
        let x_1620 : f32 = u_xlat20.w;
        let x_1622 : f32 = u_xlat55.x;
        let x_1624 : f32 = u_xlat80;
        u_xlat80 = ((x_1620 * x_1622) + x_1624);
        let x_1627 : vec4<f32> = u_xlat18;
        let x_1628 : vec2<f32> = vec2<f32>(x_1627.x, x_1627.y);
        let x_1630 : f32 = u_xlat2.z;
        txVec21 = vec3<f32>(x_1628.x, x_1628.y, x_1630);
        let x_1637 : vec3<f32> = txVec21;
        let x_1639 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_LinearClampCompare, x_1637.xy, x_1637.z);
        u_xlat55.x = x_1639;
        let x_1642 : f32 = u_xlat21.x;
        let x_1644 : f32 = u_xlat55.x;
        let x_1646 : f32 = u_xlat80;
        u_xlat80 = ((x_1642 * x_1644) + x_1646);
        let x_1649 : vec4<f32> = u_xlat18;
        let x_1650 : vec2<f32> = vec2<f32>(x_1649.z, x_1649.w);
        let x_1652 : f32 = u_xlat2.z;
        txVec22 = vec3<f32>(x_1650.x, x_1650.y, x_1652);
        let x_1659 : vec3<f32> = txVec22;
        let x_1661 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_LinearClampCompare, x_1659.xy, x_1659.z);
        u_xlat55.x = x_1661;
        let x_1664 : f32 = u_xlat21.y;
        let x_1666 : f32 = u_xlat55.x;
        let x_1668 : f32 = u_xlat80;
        u_xlat80 = ((x_1664 * x_1666) + x_1668);
        let x_1671 : vec2<f32> = u_xlat36;
        let x_1673 : f32 = u_xlat2.z;
        txVec23 = vec3<f32>(x_1671.x, x_1671.y, x_1673);
        let x_1680 : vec3<f32> = txVec23;
        let x_1682 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_LinearClampCompare, x_1680.xy, x_1680.z);
        u_xlat55.x = x_1682;
        let x_1685 : f32 = u_xlat21.z;
        let x_1687 : f32 = u_xlat55.x;
        let x_1689 : f32 = u_xlat80;
        u_xlat80 = ((x_1685 * x_1687) + x_1689);
        let x_1692 : vec2<f32> = u_xlat68;
        let x_1694 : f32 = u_xlat2.z;
        txVec24 = vec3<f32>(x_1692.x, x_1692.y, x_1694);
        let x_1701 : vec3<f32> = txVec24;
        let x_1703 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_LinearClampCompare, x_1701.xy, x_1701.z);
        u_xlat55.x = x_1703;
        let x_1706 : f32 = u_xlat21.w;
        let x_1708 : f32 = u_xlat55.x;
        let x_1710 : f32 = u_xlat80;
        u_xlat80 = ((x_1706 * x_1708) + x_1710);
        let x_1713 : vec4<f32> = u_xlat13;
        let x_1714 : vec2<f32> = vec2<f32>(x_1713.x, x_1713.y);
        let x_1716 : f32 = u_xlat2.z;
        txVec25 = vec3<f32>(x_1714.x, x_1714.y, x_1716);
        let x_1723 : vec3<f32> = txVec25;
        let x_1725 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_LinearClampCompare, x_1723.xy, x_1723.z);
        u_xlat55.x = x_1725;
        let x_1728 : f32 = u_xlat9.x;
        let x_1730 : f32 = u_xlat55.x;
        let x_1732 : f32 = u_xlat80;
        u_xlat80 = ((x_1728 * x_1730) + x_1732);
        let x_1735 : vec4<f32> = u_xlat13;
        let x_1736 : vec2<f32> = vec2<f32>(x_1735.z, x_1735.w);
        let x_1738 : f32 = u_xlat2.z;
        txVec26 = vec3<f32>(x_1736.x, x_1736.y, x_1738);
        let x_1745 : vec3<f32> = txVec26;
        let x_1747 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_LinearClampCompare, x_1745.xy, x_1745.z);
        u_xlat55.x = x_1747;
        let x_1750 : f32 = u_xlat9.y;
        let x_1752 : f32 = u_xlat55.x;
        let x_1754 : f32 = u_xlat80;
        u_xlat80 = ((x_1750 * x_1752) + x_1754);
        let x_1757 : vec2<f32> = u_xlat63;
        let x_1759 : f32 = u_xlat2.z;
        txVec27 = vec3<f32>(x_1757.x, x_1757.y, x_1759);
        let x_1766 : vec3<f32> = txVec27;
        let x_1768 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_LinearClampCompare, x_1766.xy, x_1766.z);
        u_xlat55.x = x_1768;
        let x_1771 : f32 = u_xlat9.z;
        let x_1773 : f32 = u_xlat55.x;
        let x_1775 : f32 = u_xlat80;
        u_xlat80 = ((x_1771 * x_1773) + x_1775);
        let x_1778 : vec4<f32> = u_xlat3;
        let x_1779 : vec2<f32> = vec2<f32>(x_1778.x, x_1778.y);
        let x_1781 : f32 = u_xlat2.z;
        txVec28 = vec3<f32>(x_1779.x, x_1779.y, x_1781);
        let x_1788 : vec3<f32> = txVec28;
        let x_1790 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_LinearClampCompare, x_1788.xy, x_1788.z);
        u_xlat3.x = x_1790;
        let x_1793 : f32 = u_xlat9.w;
        let x_1795 : f32 = u_xlat3.x;
        let x_1797 : f32 = u_xlat80;
        u_xlat79 = ((x_1793 * x_1795) + x_1797);
      }
    }
  } else {
    let x_1801 : vec4<f32> = u_xlat2;
    let x_1802 : vec2<f32> = vec2<f32>(x_1801.x, x_1801.y);
    let x_1804 : f32 = u_xlat2.z;
    txVec29 = vec3<f32>(x_1802.x, x_1802.y, x_1804);
    let x_1811 : vec3<f32> = txVec29;
    let x_1813 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_LinearClampCompare, x_1811.xy, x_1811.z);
    u_xlat79 = x_1813;
  }
  let x_1815 : f32 = x_372.x_MainLightShadowParams.x;
  u_xlat80 = (-(x_1815) + 1.0f);
  let x_1818 : f32 = u_xlat79;
  let x_1820 : f32 = x_372.x_MainLightShadowParams.x;
  let x_1822 : f32 = u_xlat80;
  u_xlat79 = ((x_1818 * x_1820) + x_1822);
  let x_1826 : f32 = u_xlat2.z;
  u_xlatb3 = (0.0f >= x_1826);
  let x_1830 : f32 = u_xlat2.z;
  u_xlatb29 = (x_1830 >= 1.0f);
  let x_1832 : bool = u_xlatb29;
  let x_1833 : bool = u_xlatb3;
  u_xlatb3 = (x_1832 | x_1833);
  let x_1835 : bool = u_xlatb3;
  let x_1836 : f32 = u_xlat79;
  u_xlat79 = select(x_1836, 1.0f, x_1835);
  let x_1838 : vec3<f32> = u_xlat1;
  let x_1840 : vec4<f32> = x_149.x_MainLightPosition;
  u_xlat1.x = dot(x_1838, -(vec3<f32>(x_1840.x, x_1840.y, x_1840.z)));
  let x_1846 : f32 = u_xlat1.x;
  u_xlat1.x = clamp(x_1846, 0.0f, 1.0f);
  let x_1850 : f32 = u_xlat79;
  let x_1853 : vec4<f32> = x_149.x_MainLightColor;
  u_xlat27 = (vec3<f32>(x_1850, x_1850, x_1850) * vec3<f32>(x_1853.x, x_1853.y, x_1853.z));
  let x_1856 : vec3<f32> = u_xlat27;
  let x_1857 : vec3<f32> = u_xlat1;
  u_xlat1 = (x_1856 * vec3<f32>(x_1857.x, x_1857.x, x_1857.x));
  let x_1860 : vec3<f32> = u_xlat1;
  let x_1861 : vec4<f32> = u_xlat6;
  u_xlat1 = (x_1860 * vec3<f32>(x_1861.x, x_1861.y, x_1861.z));
  let x_1865 : f32 = x_83.unity_LODFade.x;
  u_xlatb79 = (x_1865 < 0.0f);
  let x_1868 : f32 = x_83.unity_LODFade.x;
  u_xlat29 = (x_1868 + 1.0f);
  let x_1870 : bool = u_xlatb79;
  if (x_1870) {
    let x_1875 : f32 = u_xlat29;
    x_1872 = x_1875;
  } else {
    let x_1878 : f32 = x_83.unity_LODFade.x;
    x_1872 = x_1878;
  }
  let x_1879 : f32 = x_1872;
  u_xlat79 = x_1879;
  let x_1880 : f32 = u_xlat79;
  u_xlatb29 = (0.5f >= x_1880);
  let x_1882 : vec4<f32> = u_xlat5;
  let x_1886 : vec4<f32> = x_149.x_ScreenParams;
  let x_1888 : vec3<f32> = (abs(vec3<f32>(x_1882.x, x_1882.y, x_1882.z)) * vec3<f32>(x_1886.x, x_1886.y, x_1886.x));
  let x_1889 : vec4<f32> = u_xlat5;
  u_xlat5 = vec4<f32>(x_1888.x, x_1888.y, x_1888.z, x_1889.w);
  let x_1894 : vec4<f32> = u_xlat5;
  u_xlatu5 = vec3<u32>(vec3<f32>(x_1894.x, x_1894.y, x_1894.z));
  let x_1899 : u32 = u_xlatu5.z;
  u_xlatu55 = (x_1899 * 1025u);
  let x_1903 : u32 = u_xlatu55;
  u_xlatu81 = (x_1903 >> 6u);
  let x_1907 : u32 = u_xlatu81;
  let x_1908 : u32 = u_xlatu55;
  u_xlati55 = bitcast<i32>((x_1907 ^ x_1908));
  let x_1911 : i32 = u_xlati55;
  u_xlatu55 = (bitcast<u32>(x_1911) * 9u);
  let x_1915 : u32 = u_xlatu55;
  u_xlatu81 = (x_1915 >> 11u);
  let x_1918 : u32 = u_xlatu81;
  let x_1919 : u32 = u_xlatu55;
  u_xlati55 = bitcast<i32>((x_1918 ^ x_1919));
  let x_1922 : i32 = u_xlati55;
  u_xlati55 = (x_1922 * 32769i);
  let x_1925 : i32 = u_xlati55;
  let x_1928 : u32 = u_xlatu5.y;
  u_xlati55 = bitcast<i32>((bitcast<u32>(x_1925) ^ x_1928));
  let x_1931 : i32 = u_xlati55;
  u_xlatu55 = (bitcast<u32>(x_1931) * 1025u);
  let x_1934 : u32 = u_xlatu55;
  u_xlatu81 = (x_1934 >> 6u);
  let x_1936 : u32 = u_xlatu81;
  let x_1937 : u32 = u_xlatu55;
  u_xlati55 = bitcast<i32>((x_1936 ^ x_1937));
  let x_1940 : i32 = u_xlati55;
  u_xlatu55 = (bitcast<u32>(x_1940) * 9u);
  let x_1943 : u32 = u_xlatu55;
  u_xlatu81 = (x_1943 >> 11u);
  let x_1945 : u32 = u_xlatu81;
  let x_1946 : u32 = u_xlatu55;
  u_xlati55 = bitcast<i32>((x_1945 ^ x_1946));
  let x_1949 : i32 = u_xlati55;
  u_xlati55 = (x_1949 * 32769i);
  let x_1951 : i32 = u_xlati55;
  let x_1954 : u32 = u_xlatu5.x;
  u_xlati55 = bitcast<i32>((bitcast<u32>(x_1951) ^ x_1954));
  let x_1957 : i32 = u_xlati55;
  u_xlatu55 = (bitcast<u32>(x_1957) * 1025u);
  let x_1960 : u32 = u_xlatu55;
  u_xlatu81 = (x_1960 >> 6u);
  let x_1962 : u32 = u_xlatu81;
  let x_1963 : u32 = u_xlatu55;
  u_xlati55 = bitcast<i32>((x_1962 ^ x_1963));
  let x_1966 : i32 = u_xlati55;
  u_xlatu55 = (bitcast<u32>(x_1966) * 9u);
  let x_1969 : u32 = u_xlatu55;
  u_xlatu81 = (x_1969 >> 11u);
  let x_1971 : u32 = u_xlatu81;
  let x_1972 : u32 = u_xlatu55;
  u_xlati55 = bitcast<i32>((x_1971 ^ x_1972));
  let x_1975 : i32 = u_xlati55;
  u_xlati55 = (x_1975 * 32769i);
  param = 1065353216i;
  let x_1981 : i32 = u_xlati55;
  param_1 = x_1981;
  param_2 = 0i;
  param_3 = 23i;
  let x_1984 : i32 = int_bitfieldInsert_i1_i1_i1_i1_(&(param), &(param_1), &(param_2), &(param_3));
  u_xlat55.x = bitcast<f32>(x_1984);
  let x_1988 : f32 = u_xlat55.x;
  u_xlat55.x = (x_1988 + -1.0f);
  let x_1993 : f32 = u_xlat55.x;
  u_xlat81 = (-(x_1993) + 1.0f);
  let x_1996 : bool = u_xlatb29;
  if (x_1996) {
    let x_2001 : f32 = u_xlat55.x;
    x_1997 = x_2001;
  } else {
    let x_2003 : f32 = u_xlat81;
    x_1997 = x_2003;
  }
  let x_2004 : f32 = x_1997;
  u_xlat29 = x_2004;
  let x_2005 : f32 = u_xlat79;
  let x_2007 : f32 = u_xlat29;
  u_xlat79 = ((x_2005 * 2.0f) + -(x_2007));
  let x_2010 : f32 = u_xlat79;
  let x_2012 : f32 = u_xlat6.w;
  u_xlat29 = (x_2010 * x_2012);
  let x_2015 : f32 = u_xlat29;
  u_xlatb55 = (x_2015 >= 0.40000000596046447754f);
  let x_2018 : bool = u_xlatb55;
  let x_2019 : f32 = u_xlat29;
  u_xlat55.x = select(0.0f, x_2019, x_2018);
  let x_2023 : f32 = u_xlat6.w;
  let x_2024 : f32 = u_xlat79;
  u_xlat79 = ((x_2023 * x_2024) + -0.40000000596046447754f);
  let x_2028 : f32 = u_xlat29;
  u_xlat81 = dpdxCoarse(x_2028);
  let x_2030 : f32 = u_xlat29;
  u_xlat29 = dpdyCoarse(x_2030);
  let x_2032 : f32 = u_xlat29;
  let x_2034 : f32 = u_xlat81;
  u_xlat29 = (abs(x_2032) + abs(x_2034));
  let x_2037 : f32 = u_xlat29;
  u_xlat29 = max(x_2037, 0.00009999999747378752f);
  let x_2040 : f32 = u_xlat79;
  let x_2041 : f32 = u_xlat29;
  u_xlat79 = (x_2040 / x_2041);
  let x_2043 : f32 = u_xlat79;
  u_xlat79 = (x_2043 + 0.5f);
  let x_2045 : f32 = u_xlat79;
  u_xlat79 = clamp(x_2045, 0.0f, 1.0f);
  let x_2048 : f32 = x_149.x_AlphaToMaskAvailable;
  u_xlatb29 = !((x_2048 == 0.0f));
  let x_2050 : bool = u_xlatb29;
  if (x_2050) {
    let x_2054 : f32 = u_xlat79;
    x_2051 = x_2054;
  } else {
    let x_2057 : f32 = u_xlat55.x;
    x_2051 = x_2057;
  }
  let x_2058 : f32 = x_2051;
  u_xlat79 = x_2058;
  let x_2059 : f32 = u_xlat79;
  u_xlat55.x = (x_2059 + -0.00009999999747378752f);
  let x_2064 : f32 = u_xlat55.x;
  u_xlatb55 = (x_2064 < 0.0f);
  let x_2066 : bool = u_xlatb55;
  if (((select(0i, 1i, x_2066) * -1i) != 0i)) {
    discard;
  }
  let x_2074 : vec3<f32> = u_xlat26;
  let x_2075 : vec3<f32> = u_xlat34;
  u_xlat26 = (x_2074 * vec3<f32>(x_2075.y, x_2075.y, x_2075.y));
  let x_2078 : vec3<f32> = u_xlat34;
  let x_2080 : vec4<f32> = vs_INTERP4;
  let x_2083 : vec3<f32> = u_xlat26;
  u_xlat26 = ((vec3<f32>(x_2078.x, x_2078.x, x_2078.x) * vec3<f32>(x_2080.x, x_2080.y, x_2080.z)) + x_2083);
  let x_2085 : vec3<f32> = u_xlat34;
  let x_2087 : vec3<f32> = vs_INTERP9;
  let x_2089 : vec3<f32> = u_xlat26;
  u_xlat26 = ((vec3<f32>(x_2085.z, x_2085.z, x_2085.z) * x_2087) + x_2089);
  let x_2091 : vec3<f32> = u_xlat26;
  let x_2092 : vec3<f32> = u_xlat26;
  u_xlat55.x = dot(x_2091, x_2092);
  let x_2096 : f32 = u_xlat55.x;
  u_xlat55.x = inverseSqrt(x_2096);
  let x_2099 : vec3<f32> = u_xlat26;
  let x_2100 : vec2<f32> = u_xlat55;
  let x_2102 : vec3<f32> = (x_2099 * vec3<f32>(x_2100.x, x_2100.x, x_2100.x));
  let x_2103 : vec4<f32> = u_xlat5;
  u_xlat5 = vec4<f32>(x_2102.x, x_2102.y, x_2102.z, x_2103.w);
  let x_2106 : f32 = vs_INTERP8.y;
  let x_2108 : f32 = x_149.unity_MatrixV[1i].z;
  u_xlat26.x = (x_2106 * x_2108);
  let x_2112 : f32 = x_149.unity_MatrixV[0i].z;
  let x_2114 : f32 = vs_INTERP8.x;
  let x_2117 : f32 = u_xlat26.x;
  u_xlat26.x = ((x_2112 * x_2114) + x_2117);
  let x_2121 : f32 = x_149.unity_MatrixV[2i].z;
  let x_2123 : f32 = vs_INTERP8.z;
  let x_2126 : f32 = u_xlat26.x;
  u_xlat26.x = ((x_2121 * x_2123) + x_2126);
  let x_2130 : f32 = u_xlat26.x;
  let x_2132 : f32 = x_149.unity_MatrixV[3i].z;
  u_xlat26.x = (x_2130 + x_2132);
  let x_2136 : f32 = u_xlat26.x;
  let x_2139 : f32 = x_149.x_ProjectionParams.y;
  u_xlat26.x = (-(x_2136) + -(x_2139));
  let x_2144 : f32 = u_xlat26.x;
  u_xlat26.x = max(x_2144, 0.0f);
  let x_2148 : f32 = u_xlat26.x;
  let x_2150 : f32 = x_149.unity_FogParams.x;
  u_xlat26.x = (x_2148 * x_2150);
  u_xlat5.w = 1.0f;
  let x_2156 : vec4<f32> = x_83.unity_SHAr;
  let x_2157 : vec4<f32> = u_xlat5;
  u_xlat6.x = dot(x_2156, x_2157);
  let x_2162 : vec4<f32> = x_83.unity_SHAg;
  let x_2163 : vec4<f32> = u_xlat5;
  u_xlat6.y = dot(x_2162, x_2163);
  let x_2168 : vec4<f32> = x_83.unity_SHAb;
  let x_2169 : vec4<f32> = u_xlat5;
  u_xlat6.z = dot(x_2168, x_2169);
  let x_2172 : vec4<f32> = u_xlat5;
  let x_2174 : vec4<f32> = u_xlat5;
  u_xlat9 = (vec4<f32>(x_2172.y, x_2172.z, x_2172.z, x_2172.x) * vec4<f32>(x_2174.x, x_2174.y, x_2174.z, x_2174.z));
  let x_2179 : vec4<f32> = x_83.unity_SHBr;
  let x_2180 : vec4<f32> = u_xlat9;
  u_xlat10.x = dot(x_2179, x_2180);
  let x_2185 : vec4<f32> = x_83.unity_SHBg;
  let x_2186 : vec4<f32> = u_xlat9;
  u_xlat10.y = dot(x_2185, x_2186);
  let x_2190 : vec4<f32> = x_83.unity_SHBb;
  let x_2191 : vec4<f32> = u_xlat9;
  u_xlat10.z = dot(x_2190, x_2191);
  let x_2196 : f32 = u_xlat5.y;
  let x_2198 : f32 = u_xlat5.y;
  u_xlat52.x = (x_2196 * x_2198);
  let x_2202 : f32 = u_xlat5.x;
  let x_2204 : f32 = u_xlat5.x;
  let x_2207 : f32 = u_xlat52.x;
  u_xlat52.x = ((x_2202 * x_2204) + -(x_2207));
  let x_2213 : vec4<f32> = x_83.unity_SHC;
  let x_2215 : vec2<f32> = u_xlat52;
  let x_2218 : vec4<f32> = u_xlat10;
  u_xlat34 = ((vec3<f32>(x_2213.x, x_2213.y, x_2213.z) * vec3<f32>(x_2215.x, x_2215.x, x_2215.x)) + vec3<f32>(x_2218.x, x_2218.y, x_2218.z));
  let x_2221 : vec4<f32> = u_xlat6;
  let x_2223 : vec3<f32> = u_xlat34;
  let x_2224 : vec3<f32> = (vec3<f32>(x_2221.x, x_2221.y, x_2221.z) + x_2223);
  let x_2225 : vec4<f32> = u_xlat6;
  u_xlat6 = vec4<f32>(x_2224.x, x_2224.y, x_2224.z, x_2225.w);
  let x_2227 : vec4<f32> = u_xlat6;
  let x_2229 : vec3<f32> = max(vec3<f32>(x_2227.x, x_2227.y, x_2227.z), vec3<f32>(0.0f, 0.0f, 0.0f));
  let x_2230 : vec4<f32> = u_xlat6;
  u_xlat6 = vec4<f32>(x_2229.x, x_2229.y, x_2229.z, x_2230.w);
  let x_2233 : f32 = u_xlat8.x;
  u_xlat8.x = x_2233;
  let x_2236 : f32 = u_xlat8.x;
  u_xlat8.x = clamp(x_2236, 0.0f, 1.0f);
  let x_2239 : f32 = u_xlat79;
  u_xlat79 = x_2239;
  let x_2240 : f32 = u_xlat79;
  u_xlat79 = clamp(x_2240, 0.0f, 1.0f);
  let x_2242 : vec3<f32> = u_xlat7;
  u_xlat7 = (x_2242 * vec3<f32>(0.95999997854232788086f, 0.95999997854232788086f, 0.95999997854232788086f));
  let x_2247 : f32 = u_xlat8.x;
  u_xlat52.x = (-(x_2247) + 1.0f);
  let x_2253 : f32 = u_xlat52.x;
  let x_2255 : f32 = u_xlat52.x;
  u_xlat78 = (x_2253 * x_2255);
  let x_2257 : f32 = u_xlat78;
  u_xlat78 = max(x_2257, 0.0078125f);
  let x_2260 : f32 = u_xlat78;
  let x_2261 : f32 = u_xlat78;
  u_xlat55.x = (x_2260 * x_2261);
  let x_2265 : f32 = u_xlat8.x;
  u_xlat81 = (x_2265 + 0.04000002145767211914f);
  let x_2268 : f32 = u_xlat81;
  u_xlat81 = min(x_2268, 1.0f);
  let x_2270 : f32 = u_xlat78;
  u_xlat82 = ((x_2270 * 4.0f) + 2.0f);
  let x_2275 : f32 = vs_INTERP6.w;
  u_xlat83 = min(x_2275, 1.0f);
  let x_2277 : bool = u_xlatb0;
  if (x_2277) {
    let x_2281 : f32 = x_372.x_MainLightShadowParams.y;
    u_xlatb0 = (x_2281 == 1.0f);
    let x_2283 : bool = u_xlatb0;
    if (x_2283) {
      let x_2286 : vec4<f32> = u_xlat2;
      let x_2289 : vec4<f32> = x_372.x_MainLightShadowOffset0;
      u_xlat8 = (vec4<f32>(x_2286.x, x_2286.y, x_2286.x, x_2286.y) + x_2289);
      let x_2292 : vec4<f32> = u_xlat8;
      let x_2293 : vec2<f32> = vec2<f32>(x_2292.x, x_2292.y);
      let x_2295 : f32 = u_xlat2.z;
      txVec30 = vec3<f32>(x_2293.x, x_2293.y, x_2295);
      let x_2302 : vec3<f32> = txVec30;
      let x_2304 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_LinearClampCompare, x_2302.xy, x_2302.z);
      u_xlat9.x = x_2304;
      let x_2307 : vec4<f32> = u_xlat8;
      let x_2308 : vec2<f32> = vec2<f32>(x_2307.z, x_2307.w);
      let x_2310 : f32 = u_xlat2.z;
      txVec31 = vec3<f32>(x_2308.x, x_2308.y, x_2310);
      let x_2317 : vec3<f32> = txVec31;
      let x_2319 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_LinearClampCompare, x_2317.xy, x_2317.z);
      u_xlat9.y = x_2319;
      let x_2321 : vec4<f32> = u_xlat2;
      let x_2324 : vec4<f32> = x_372.x_MainLightShadowOffset1;
      u_xlat8 = (vec4<f32>(x_2321.x, x_2321.y, x_2321.x, x_2321.y) + x_2324);
      let x_2327 : vec4<f32> = u_xlat8;
      let x_2328 : vec2<f32> = vec2<f32>(x_2327.x, x_2327.y);
      let x_2330 : f32 = u_xlat2.z;
      txVec32 = vec3<f32>(x_2328.x, x_2328.y, x_2330);
      let x_2337 : vec3<f32> = txVec32;
      let x_2339 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_LinearClampCompare, x_2337.xy, x_2337.z);
      u_xlat9.z = x_2339;
      let x_2342 : vec4<f32> = u_xlat8;
      let x_2343 : vec2<f32> = vec2<f32>(x_2342.z, x_2342.w);
      let x_2345 : f32 = u_xlat2.z;
      txVec33 = vec3<f32>(x_2343.x, x_2343.y, x_2345);
      let x_2352 : vec3<f32> = txVec33;
      let x_2354 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_LinearClampCompare, x_2352.xy, x_2352.z);
      u_xlat9.w = x_2354;
      let x_2356 : vec4<f32> = u_xlat9;
      u_xlat0.x = dot(x_2356, vec4<f32>(0.25f, 0.25f, 0.25f, 0.25f));
    } else {
      let x_2362 : f32 = x_372.x_MainLightShadowParams.y;
      u_xlatb84 = (x_2362 == 2.0f);
      let x_2364 : bool = u_xlatb84;
      if (x_2364) {
        let x_2367 : vec4<f32> = u_xlat2;
        let x_2370 : vec4<f32> = x_372.x_MainLightShadowmapSize;
        let x_2373 : vec2<f32> = ((vec2<f32>(x_2367.x, x_2367.y) * vec2<f32>(x_2370.z, x_2370.w)) + vec2<f32>(0.5f, 0.5f));
        let x_2374 : vec4<f32> = u_xlat8;
        u_xlat8 = vec4<f32>(x_2373.x, x_2373.y, x_2374.z, x_2374.w);
        let x_2376 : vec4<f32> = u_xlat8;
        let x_2378 : vec2<f32> = floor(vec2<f32>(x_2376.x, x_2376.y));
        let x_2379 : vec4<f32> = u_xlat8;
        u_xlat8 = vec4<f32>(x_2378.x, x_2378.y, x_2379.z, x_2379.w);
        let x_2382 : vec4<f32> = u_xlat2;
        let x_2385 : vec4<f32> = x_372.x_MainLightShadowmapSize;
        let x_2388 : vec4<f32> = u_xlat8;
        u_xlat60 = ((vec2<f32>(x_2382.x, x_2382.y) * vec2<f32>(x_2385.z, x_2385.w)) + -(vec2<f32>(x_2388.x, x_2388.y)));
        let x_2392 : vec2<f32> = u_xlat60;
        u_xlat9 = (vec4<f32>(x_2392.x, x_2392.x, x_2392.y, x_2392.y) + vec4<f32>(0.5f, 1.0f, 0.5f, 1.0f));
        let x_2395 : vec4<f32> = u_xlat9;
        let x_2397 : vec4<f32> = u_xlat9;
        u_xlat10 = (vec4<f32>(x_2395.x, x_2395.x, x_2395.z, x_2395.z) * vec4<f32>(x_2397.x, x_2397.x, x_2397.z, x_2397.z));
        let x_2400 : vec4<f32> = u_xlat10;
        let x_2402 : vec2<f32> = (vec2<f32>(x_2400.y, x_2400.w) * vec2<f32>(0.07999999821186065674f, 0.07999999821186065674f));
        let x_2403 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_2402.x, x_2403.y, x_2402.y, x_2403.w);
        let x_2405 : vec4<f32> = u_xlat10;
        let x_2408 : vec2<f32> = u_xlat60;
        let x_2410 : vec2<f32> = ((vec2<f32>(x_2405.x, x_2405.z) * vec2<f32>(0.5f, 0.5f)) + -(x_2408));
        let x_2411 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_2410.x, x_2410.y, x_2411.z, x_2411.w);
        let x_2413 : vec2<f32> = u_xlat60;
        u_xlat62 = (-(x_2413) + vec2<f32>(1.0f, 1.0f));
        let x_2416 : vec2<f32> = u_xlat60;
        let x_2417 : vec2<f32> = min(x_2416, vec2<f32>(0.0f, 0.0f));
        let x_2418 : vec4<f32> = u_xlat11;
        u_xlat11 = vec4<f32>(x_2417.x, x_2417.y, x_2418.z, x_2418.w);
        let x_2420 : vec4<f32> = u_xlat11;
        let x_2423 : vec4<f32> = u_xlat11;
        let x_2426 : vec2<f32> = u_xlat62;
        let x_2427 : vec2<f32> = ((-(vec2<f32>(x_2420.x, x_2420.y)) * vec2<f32>(x_2423.x, x_2423.y)) + x_2426);
        let x_2428 : vec4<f32> = u_xlat11;
        u_xlat11 = vec4<f32>(x_2427.x, x_2427.y, x_2428.z, x_2428.w);
        let x_2430 : vec2<f32> = u_xlat60;
        u_xlat60 = max(x_2430, vec2<f32>(0.0f, 0.0f));
        let x_2432 : vec2<f32> = u_xlat60;
        let x_2434 : vec2<f32> = u_xlat60;
        let x_2436 : vec4<f32> = u_xlat9;
        u_xlat60 = ((-(x_2432) * x_2434) + vec2<f32>(x_2436.y, x_2436.w));
        let x_2439 : vec4<f32> = u_xlat11;
        let x_2441 : vec2<f32> = (vec2<f32>(x_2439.x, x_2439.y) + vec2<f32>(1.0f, 1.0f));
        let x_2442 : vec4<f32> = u_xlat11;
        u_xlat11 = vec4<f32>(x_2441.x, x_2441.y, x_2442.z, x_2442.w);
        let x_2444 : vec2<f32> = u_xlat60;
        u_xlat60 = (x_2444 + vec2<f32>(1.0f, 1.0f));
        let x_2446 : vec4<f32> = u_xlat10;
        let x_2448 : vec2<f32> = (vec2<f32>(x_2446.x, x_2446.y) * vec2<f32>(0.15999999642372131348f, 0.15999999642372131348f));
        let x_2449 : vec4<f32> = u_xlat12;
        u_xlat12 = vec4<f32>(x_2448.x, x_2448.y, x_2449.z, x_2449.w);
        let x_2451 : vec2<f32> = u_xlat62;
        let x_2452 : vec2<f32> = (x_2451 * vec2<f32>(0.15999999642372131348f, 0.15999999642372131348f));
        let x_2453 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_2452.x, x_2452.y, x_2453.z, x_2453.w);
        let x_2455 : vec4<f32> = u_xlat11;
        let x_2457 : vec2<f32> = (vec2<f32>(x_2455.x, x_2455.y) * vec2<f32>(0.15999999642372131348f, 0.15999999642372131348f));
        let x_2458 : vec4<f32> = u_xlat11;
        u_xlat11 = vec4<f32>(x_2457.x, x_2457.y, x_2458.z, x_2458.w);
        let x_2460 : vec2<f32> = u_xlat60;
        let x_2461 : vec2<f32> = (x_2460 * vec2<f32>(0.15999999642372131348f, 0.15999999642372131348f));
        let x_2462 : vec4<f32> = u_xlat13;
        u_xlat13 = vec4<f32>(x_2461.x, x_2461.y, x_2462.z, x_2462.w);
        let x_2464 : vec4<f32> = u_xlat9;
        u_xlat60 = (vec2<f32>(x_2464.y, x_2464.w) * vec2<f32>(0.15999999642372131348f, 0.15999999642372131348f));
        let x_2468 : f32 = u_xlat11.x;
        u_xlat12.z = x_2468;
        let x_2471 : f32 = u_xlat60.x;
        u_xlat12.w = x_2471;
        let x_2474 : f32 = u_xlat13.x;
        u_xlat10.z = x_2474;
        let x_2477 : f32 = u_xlat9.x;
        u_xlat10.w = x_2477;
        let x_2479 : vec4<f32> = u_xlat10;
        let x_2481 : vec4<f32> = u_xlat12;
        u_xlat14 = (vec4<f32>(x_2479.z, x_2479.w, x_2479.x, x_2479.z) + vec4<f32>(x_2481.z, x_2481.w, x_2481.x, x_2481.z));
        let x_2485 : f32 = u_xlat12.y;
        u_xlat11.z = x_2485;
        let x_2488 : f32 = u_xlat60.y;
        u_xlat11.w = x_2488;
        let x_2491 : f32 = u_xlat10.y;
        u_xlat13.z = x_2491;
        let x_2494 : f32 = u_xlat9.z;
        u_xlat13.w = x_2494;
        let x_2496 : vec4<f32> = u_xlat11;
        let x_2498 : vec4<f32> = u_xlat13;
        let x_2500 : vec3<f32> = (vec3<f32>(x_2496.z, x_2496.y, x_2496.w) + vec3<f32>(x_2498.z, x_2498.y, x_2498.w));
        let x_2501 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_2500.x, x_2500.y, x_2500.z, x_2501.w);
        let x_2503 : vec4<f32> = u_xlat10;
        let x_2505 : vec4<f32> = u_xlat14;
        let x_2507 : vec3<f32> = (vec3<f32>(x_2503.x, x_2503.z, x_2503.w) / vec3<f32>(x_2505.z, x_2505.w, x_2505.y));
        let x_2508 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_2507.x, x_2507.y, x_2507.z, x_2508.w);
        let x_2510 : vec4<f32> = u_xlat10;
        let x_2512 : vec3<f32> = (vec3<f32>(x_2510.x, x_2510.y, x_2510.z) + vec3<f32>(-2.5f, -0.5f, 1.5f));
        let x_2513 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_2512.x, x_2512.y, x_2512.z, x_2513.w);
        let x_2515 : vec4<f32> = u_xlat13;
        let x_2517 : vec4<f32> = u_xlat9;
        let x_2519 : vec3<f32> = (vec3<f32>(x_2515.z, x_2515.y, x_2515.w) / vec3<f32>(x_2517.x, x_2517.y, x_2517.z));
        let x_2520 : vec4<f32> = u_xlat11;
        u_xlat11 = vec4<f32>(x_2519.x, x_2519.y, x_2519.z, x_2520.w);
        let x_2522 : vec4<f32> = u_xlat11;
        let x_2524 : vec3<f32> = (vec3<f32>(x_2522.x, x_2522.y, x_2522.z) + vec3<f32>(-2.5f, -0.5f, 1.5f));
        let x_2525 : vec4<f32> = u_xlat11;
        u_xlat11 = vec4<f32>(x_2524.x, x_2524.y, x_2524.z, x_2525.w);
        let x_2527 : vec4<f32> = u_xlat10;
        let x_2530 : vec4<f32> = x_372.x_MainLightShadowmapSize;
        let x_2532 : vec3<f32> = (vec3<f32>(x_2527.y, x_2527.x, x_2527.z) * vec3<f32>(x_2530.x, x_2530.x, x_2530.x));
        let x_2533 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_2532.x, x_2532.y, x_2532.z, x_2533.w);
        let x_2535 : vec4<f32> = u_xlat11;
        let x_2538 : vec4<f32> = x_372.x_MainLightShadowmapSize;
        let x_2540 : vec3<f32> = (vec3<f32>(x_2535.x, x_2535.y, x_2535.z) * vec3<f32>(x_2538.y, x_2538.y, x_2538.y));
        let x_2541 : vec4<f32> = u_xlat11;
        u_xlat11 = vec4<f32>(x_2540.x, x_2540.y, x_2540.z, x_2541.w);
        let x_2544 : f32 = u_xlat11.x;
        u_xlat10.w = x_2544;
        let x_2546 : vec4<f32> = u_xlat8;
        let x_2549 : vec4<f32> = x_372.x_MainLightShadowmapSize;
        let x_2552 : vec4<f32> = u_xlat10;
        u_xlat12 = ((vec4<f32>(x_2546.x, x_2546.y, x_2546.x, x_2546.y) * vec4<f32>(x_2549.x, x_2549.y, x_2549.x, x_2549.y)) + vec4<f32>(x_2552.y, x_2552.w, x_2552.x, x_2552.w));
        let x_2555 : vec4<f32> = u_xlat8;
        let x_2558 : vec4<f32> = x_372.x_MainLightShadowmapSize;
        let x_2561 : vec4<f32> = u_xlat10;
        u_xlat60 = ((vec2<f32>(x_2555.x, x_2555.y) * vec2<f32>(x_2558.x, x_2558.y)) + vec2<f32>(x_2561.z, x_2561.w));
        let x_2565 : f32 = u_xlat10.y;
        u_xlat11.w = x_2565;
        let x_2567 : vec4<f32> = u_xlat11;
        let x_2568 : vec2<f32> = vec2<f32>(x_2567.y, x_2567.z);
        let x_2569 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_2569.x, x_2568.x, x_2569.z, x_2568.y);
        let x_2571 : vec4<f32> = u_xlat8;
        let x_2574 : vec4<f32> = x_372.x_MainLightShadowmapSize;
        let x_2577 : vec4<f32> = u_xlat10;
        u_xlat13 = ((vec4<f32>(x_2571.x, x_2571.y, x_2571.x, x_2571.y) * vec4<f32>(x_2574.x, x_2574.y, x_2574.x, x_2574.y)) + vec4<f32>(x_2577.x, x_2577.y, x_2577.z, x_2577.y));
        let x_2580 : vec4<f32> = u_xlat8;
        let x_2583 : vec4<f32> = x_372.x_MainLightShadowmapSize;
        let x_2586 : vec4<f32> = u_xlat11;
        u_xlat11 = ((vec4<f32>(x_2580.x, x_2580.y, x_2580.x, x_2580.y) * vec4<f32>(x_2583.x, x_2583.y, x_2583.x, x_2583.y)) + vec4<f32>(x_2586.w, x_2586.y, x_2586.w, x_2586.z));
        let x_2589 : vec4<f32> = u_xlat8;
        let x_2592 : vec4<f32> = x_372.x_MainLightShadowmapSize;
        let x_2595 : vec4<f32> = u_xlat10;
        u_xlat10 = ((vec4<f32>(x_2589.x, x_2589.y, x_2589.x, x_2589.y) * vec4<f32>(x_2592.x, x_2592.y, x_2592.x, x_2592.y)) + vec4<f32>(x_2595.x, x_2595.w, x_2595.z, x_2595.w));
        let x_2598 : vec4<f32> = u_xlat9;
        let x_2600 : vec4<f32> = u_xlat14;
        u_xlat15 = (vec4<f32>(x_2598.x, x_2598.x, x_2598.x, x_2598.y) * vec4<f32>(x_2600.z, x_2600.w, x_2600.y, x_2600.z));
        let x_2603 : vec4<f32> = u_xlat9;
        let x_2605 : vec4<f32> = u_xlat14;
        u_xlat16 = (vec4<f32>(x_2603.y, x_2603.y, x_2603.z, x_2603.z) * x_2605);
        let x_2609 : f32 = u_xlat9.z;
        let x_2611 : f32 = u_xlat14.y;
        u_xlat84 = (x_2609 * x_2611);
        let x_2614 : vec4<f32> = u_xlat12;
        let x_2615 : vec2<f32> = vec2<f32>(x_2614.x, x_2614.y);
        let x_2617 : f32 = u_xlat2.z;
        txVec34 = vec3<f32>(x_2615.x, x_2615.y, x_2617);
        let x_2625 : vec3<f32> = txVec34;
        let x_2627 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_LinearClampCompare, x_2625.xy, x_2625.z);
        u_xlat85 = x_2627;
        let x_2629 : vec4<f32> = u_xlat12;
        let x_2630 : vec2<f32> = vec2<f32>(x_2629.z, x_2629.w);
        let x_2632 : f32 = u_xlat2.z;
        txVec35 = vec3<f32>(x_2630.x, x_2630.y, x_2632);
        let x_2639 : vec3<f32> = txVec35;
        let x_2641 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_LinearClampCompare, x_2639.xy, x_2639.z);
        u_xlat8.x = x_2641;
        let x_2644 : f32 = u_xlat8.x;
        let x_2646 : f32 = u_xlat15.y;
        u_xlat8.x = (x_2644 * x_2646);
        let x_2650 : f32 = u_xlat15.x;
        let x_2651 : f32 = u_xlat85;
        let x_2654 : f32 = u_xlat8.x;
        u_xlat85 = ((x_2650 * x_2651) + x_2654);
        let x_2657 : vec2<f32> = u_xlat60;
        let x_2659 : f32 = u_xlat2.z;
        txVec36 = vec3<f32>(x_2657.x, x_2657.y, x_2659);
        let x_2666 : vec3<f32> = txVec36;
        let x_2668 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_LinearClampCompare, x_2666.xy, x_2666.z);
        u_xlat8.x = x_2668;
        let x_2671 : f32 = u_xlat15.z;
        let x_2673 : f32 = u_xlat8.x;
        let x_2675 : f32 = u_xlat85;
        u_xlat85 = ((x_2671 * x_2673) + x_2675);
        let x_2678 : vec4<f32> = u_xlat11;
        let x_2679 : vec2<f32> = vec2<f32>(x_2678.x, x_2678.y);
        let x_2681 : f32 = u_xlat2.z;
        txVec37 = vec3<f32>(x_2679.x, x_2679.y, x_2681);
        let x_2688 : vec3<f32> = txVec37;
        let x_2690 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_LinearClampCompare, x_2688.xy, x_2688.z);
        u_xlat8.x = x_2690;
        let x_2693 : f32 = u_xlat15.w;
        let x_2695 : f32 = u_xlat8.x;
        let x_2697 : f32 = u_xlat85;
        u_xlat85 = ((x_2693 * x_2695) + x_2697);
        let x_2700 : vec4<f32> = u_xlat13;
        let x_2701 : vec2<f32> = vec2<f32>(x_2700.x, x_2700.y);
        let x_2703 : f32 = u_xlat2.z;
        txVec38 = vec3<f32>(x_2701.x, x_2701.y, x_2703);
        let x_2710 : vec3<f32> = txVec38;
        let x_2712 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_LinearClampCompare, x_2710.xy, x_2710.z);
        u_xlat8.x = x_2712;
        let x_2715 : f32 = u_xlat16.x;
        let x_2717 : f32 = u_xlat8.x;
        let x_2719 : f32 = u_xlat85;
        u_xlat85 = ((x_2715 * x_2717) + x_2719);
        let x_2722 : vec4<f32> = u_xlat13;
        let x_2723 : vec2<f32> = vec2<f32>(x_2722.z, x_2722.w);
        let x_2725 : f32 = u_xlat2.z;
        txVec39 = vec3<f32>(x_2723.x, x_2723.y, x_2725);
        let x_2732 : vec3<f32> = txVec39;
        let x_2734 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_LinearClampCompare, x_2732.xy, x_2732.z);
        u_xlat8.x = x_2734;
        let x_2737 : f32 = u_xlat16.y;
        let x_2739 : f32 = u_xlat8.x;
        let x_2741 : f32 = u_xlat85;
        u_xlat85 = ((x_2737 * x_2739) + x_2741);
        let x_2744 : vec4<f32> = u_xlat11;
        let x_2745 : vec2<f32> = vec2<f32>(x_2744.z, x_2744.w);
        let x_2747 : f32 = u_xlat2.z;
        txVec40 = vec3<f32>(x_2745.x, x_2745.y, x_2747);
        let x_2754 : vec3<f32> = txVec40;
        let x_2756 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_LinearClampCompare, x_2754.xy, x_2754.z);
        u_xlat8.x = x_2756;
        let x_2759 : f32 = u_xlat16.z;
        let x_2761 : f32 = u_xlat8.x;
        let x_2763 : f32 = u_xlat85;
        u_xlat85 = ((x_2759 * x_2761) + x_2763);
        let x_2766 : vec4<f32> = u_xlat10;
        let x_2767 : vec2<f32> = vec2<f32>(x_2766.x, x_2766.y);
        let x_2769 : f32 = u_xlat2.z;
        txVec41 = vec3<f32>(x_2767.x, x_2767.y, x_2769);
        let x_2776 : vec3<f32> = txVec41;
        let x_2778 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_LinearClampCompare, x_2776.xy, x_2776.z);
        u_xlat8.x = x_2778;
        let x_2781 : f32 = u_xlat16.w;
        let x_2783 : f32 = u_xlat8.x;
        let x_2785 : f32 = u_xlat85;
        u_xlat85 = ((x_2781 * x_2783) + x_2785);
        let x_2788 : vec4<f32> = u_xlat10;
        let x_2789 : vec2<f32> = vec2<f32>(x_2788.z, x_2788.w);
        let x_2791 : f32 = u_xlat2.z;
        txVec42 = vec3<f32>(x_2789.x, x_2789.y, x_2791);
        let x_2798 : vec3<f32> = txVec42;
        let x_2800 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_LinearClampCompare, x_2798.xy, x_2798.z);
        u_xlat8.x = x_2800;
        let x_2802 : f32 = u_xlat84;
        let x_2804 : f32 = u_xlat8.x;
        let x_2806 : f32 = u_xlat85;
        u_xlat0.x = ((x_2802 * x_2804) + x_2806);
      } else {
        let x_2810 : vec4<f32> = u_xlat2;
        let x_2813 : vec4<f32> = x_372.x_MainLightShadowmapSize;
        let x_2816 : vec2<f32> = ((vec2<f32>(x_2810.x, x_2810.y) * vec2<f32>(x_2813.z, x_2813.w)) + vec2<f32>(0.5f, 0.5f));
        let x_2817 : vec4<f32> = u_xlat8;
        u_xlat8 = vec4<f32>(x_2816.x, x_2816.y, x_2817.z, x_2817.w);
        let x_2819 : vec4<f32> = u_xlat8;
        let x_2821 : vec2<f32> = floor(vec2<f32>(x_2819.x, x_2819.y));
        let x_2822 : vec4<f32> = u_xlat8;
        u_xlat8 = vec4<f32>(x_2821.x, x_2821.y, x_2822.z, x_2822.w);
        let x_2824 : vec4<f32> = u_xlat2;
        let x_2827 : vec4<f32> = x_372.x_MainLightShadowmapSize;
        let x_2830 : vec4<f32> = u_xlat8;
        u_xlat60 = ((vec2<f32>(x_2824.x, x_2824.y) * vec2<f32>(x_2827.z, x_2827.w)) + -(vec2<f32>(x_2830.x, x_2830.y)));
        let x_2834 : vec2<f32> = u_xlat60;
        u_xlat9 = (vec4<f32>(x_2834.x, x_2834.x, x_2834.y, x_2834.y) + vec4<f32>(0.5f, 1.0f, 0.5f, 1.0f));
        let x_2837 : vec4<f32> = u_xlat9;
        let x_2839 : vec4<f32> = u_xlat9;
        u_xlat10 = (vec4<f32>(x_2837.x, x_2837.x, x_2837.z, x_2837.z) * vec4<f32>(x_2839.x, x_2839.x, x_2839.z, x_2839.z));
        let x_2842 : vec4<f32> = u_xlat10;
        let x_2844 : vec2<f32> = (vec2<f32>(x_2842.y, x_2842.w) * vec2<f32>(0.04081600159406661987f, 0.04081600159406661987f));
        let x_2845 : vec4<f32> = u_xlat11;
        u_xlat11 = vec4<f32>(x_2845.x, x_2844.x, x_2845.z, x_2844.y);
        let x_2847 : vec4<f32> = u_xlat10;
        let x_2850 : vec2<f32> = u_xlat60;
        let x_2852 : vec2<f32> = ((vec2<f32>(x_2847.x, x_2847.z) * vec2<f32>(0.5f, 0.5f)) + -(x_2850));
        let x_2853 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_2852.x, x_2853.y, x_2852.y, x_2853.w);
        let x_2855 : vec2<f32> = u_xlat60;
        let x_2857 : vec2<f32> = (-(x_2855) + vec2<f32>(1.0f, 1.0f));
        let x_2858 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_2857.x, x_2857.y, x_2858.z, x_2858.w);
        let x_2860 : vec2<f32> = u_xlat60;
        u_xlat62 = min(x_2860, vec2<f32>(0.0f, 0.0f));
        let x_2862 : vec2<f32> = u_xlat62;
        let x_2864 : vec2<f32> = u_xlat62;
        let x_2866 : vec4<f32> = u_xlat10;
        let x_2868 : vec2<f32> = ((-(x_2862) * x_2864) + vec2<f32>(x_2866.x, x_2866.y));
        let x_2869 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_2868.x, x_2868.y, x_2869.z, x_2869.w);
        let x_2871 : vec2<f32> = u_xlat60;
        u_xlat62 = max(x_2871, vec2<f32>(0.0f, 0.0f));
        let x_2873 : vec2<f32> = u_xlat62;
        let x_2875 : vec2<f32> = u_xlat62;
        let x_2877 : vec4<f32> = u_xlat9;
        let x_2879 : vec2<f32> = ((-(x_2873) * x_2875) + vec2<f32>(x_2877.y, x_2877.w));
        let x_2880 : vec3<f32> = u_xlat35;
        u_xlat35 = vec3<f32>(x_2879.x, x_2880.y, x_2879.y);
        let x_2882 : vec4<f32> = u_xlat10;
        let x_2884 : vec2<f32> = (vec2<f32>(x_2882.x, x_2882.y) + vec2<f32>(2.0f, 2.0f));
        let x_2885 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_2884.x, x_2884.y, x_2885.z, x_2885.w);
        let x_2887 : vec3<f32> = u_xlat35;
        let x_2889 : vec2<f32> = (vec2<f32>(x_2887.x, x_2887.z) + vec2<f32>(2.0f, 2.0f));
        let x_2890 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_2890.x, x_2889.x, x_2890.z, x_2889.y);
        let x_2893 : f32 = u_xlat9.y;
        u_xlat12.z = (x_2893 * 0.08163200318813323975f);
        let x_2896 : vec4<f32> = u_xlat9;
        let x_2898 : vec3<f32> = (vec3<f32>(x_2896.z, x_2896.x, x_2896.w) * vec3<f32>(0.08163200318813323975f, 0.08163200318813323975f, 0.08163200318813323975f));
        let x_2899 : vec4<f32> = u_xlat13;
        u_xlat13 = vec4<f32>(x_2898.x, x_2898.y, x_2898.z, x_2899.w);
        let x_2901 : vec4<f32> = u_xlat10;
        let x_2903 : vec2<f32> = (vec2<f32>(x_2901.x, x_2901.y) * vec2<f32>(0.08163200318813323975f, 0.08163200318813323975f));
        let x_2904 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_2903.x, x_2903.y, x_2904.z, x_2904.w);
        let x_2907 : f32 = u_xlat13.y;
        u_xlat12.x = x_2907;
        let x_2909 : vec2<f32> = u_xlat60;
        let x_2912 : vec2<f32> = ((vec2<f32>(x_2909.x, x_2909.x) * vec2<f32>(-0.08163200318813323975f, 0.08163200318813323975f)) + vec2<f32>(0.16326400637626647949f, 0.08163200318813323975f));
        let x_2913 : vec4<f32> = u_xlat12;
        u_xlat12 = vec4<f32>(x_2913.x, x_2912.x, x_2913.z, x_2912.y);
        let x_2915 : vec2<f32> = u_xlat60;
        let x_2918 : vec2<f32> = ((vec2<f32>(x_2915.x, x_2915.x) * vec2<f32>(-0.08163200318813323975f, 0.08163200318813323975f)) + vec2<f32>(0.08163200318813323975f, 0.16326400637626647949f));
        let x_2919 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_2918.x, x_2919.y, x_2918.y, x_2919.w);
        let x_2922 : f32 = u_xlat9.x;
        u_xlat10.y = x_2922;
        let x_2925 : f32 = u_xlat11.y;
        u_xlat10.w = x_2925;
        let x_2927 : vec4<f32> = u_xlat10;
        let x_2928 : vec4<f32> = u_xlat12;
        u_xlat12 = (x_2927 + x_2928);
        let x_2930 : vec2<f32> = u_xlat60;
        let x_2933 : vec2<f32> = ((vec2<f32>(x_2930.y, x_2930.y) * vec2<f32>(-0.08163200318813323975f, 0.08163200318813323975f)) + vec2<f32>(0.16326400637626647949f, 0.08163200318813323975f));
        let x_2934 : vec4<f32> = u_xlat13;
        u_xlat13 = vec4<f32>(x_2934.x, x_2933.x, x_2934.z, x_2933.y);
        let x_2936 : vec2<f32> = u_xlat60;
        let x_2939 : vec2<f32> = ((vec2<f32>(x_2936.y, x_2936.y) * vec2<f32>(-0.08163200318813323975f, 0.08163200318813323975f)) + vec2<f32>(0.08163200318813323975f, 0.16326400637626647949f));
        let x_2940 : vec4<f32> = u_xlat11;
        u_xlat11 = vec4<f32>(x_2939.x, x_2940.y, x_2939.y, x_2940.w);
        let x_2943 : f32 = u_xlat9.y;
        u_xlat11.y = x_2943;
        let x_2945 : vec4<f32> = u_xlat11;
        let x_2946 : vec4<f32> = u_xlat13;
        u_xlat9 = (x_2945 + x_2946);
        let x_2948 : vec4<f32> = u_xlat10;
        let x_2949 : vec4<f32> = u_xlat12;
        u_xlat10 = (x_2948 / x_2949);
        let x_2951 : vec4<f32> = u_xlat10;
        u_xlat10 = (x_2951 + vec4<f32>(-3.5f, -1.5f, 0.5f, 2.5f));
        let x_2953 : vec4<f32> = u_xlat11;
        let x_2954 : vec4<f32> = u_xlat9;
        u_xlat11 = (x_2953 / x_2954);
        let x_2956 : vec4<f32> = u_xlat11;
        u_xlat11 = (x_2956 + vec4<f32>(-3.5f, -1.5f, 0.5f, 2.5f));
        let x_2958 : vec4<f32> = u_xlat10;
        let x_2961 : vec4<f32> = x_372.x_MainLightShadowmapSize;
        u_xlat10 = (vec4<f32>(x_2958.w, x_2958.x, x_2958.y, x_2958.z) * vec4<f32>(x_2961.x, x_2961.x, x_2961.x, x_2961.x));
        let x_2964 : vec4<f32> = u_xlat11;
        let x_2967 : vec4<f32> = x_372.x_MainLightShadowmapSize;
        u_xlat11 = (vec4<f32>(x_2964.x, x_2964.w, x_2964.y, x_2964.z) * vec4<f32>(x_2967.y, x_2967.y, x_2967.y, x_2967.y));
        let x_2970 : vec4<f32> = u_xlat10;
        let x_2971 : vec3<f32> = vec3<f32>(x_2970.y, x_2970.z, x_2970.w);
        let x_2972 : vec4<f32> = u_xlat13;
        u_xlat13 = vec4<f32>(x_2971.x, x_2972.y, x_2971.y, x_2971.z);
        let x_2975 : f32 = u_xlat11.x;
        u_xlat13.y = x_2975;
        let x_2977 : vec4<f32> = u_xlat8;
        let x_2980 : vec4<f32> = x_372.x_MainLightShadowmapSize;
        let x_2983 : vec4<f32> = u_xlat13;
        u_xlat14 = ((vec4<f32>(x_2977.x, x_2977.y, x_2977.x, x_2977.y) * vec4<f32>(x_2980.x, x_2980.y, x_2980.x, x_2980.y)) + vec4<f32>(x_2983.x, x_2983.y, x_2983.z, x_2983.y));
        let x_2986 : vec4<f32> = u_xlat8;
        let x_2989 : vec4<f32> = x_372.x_MainLightShadowmapSize;
        let x_2992 : vec4<f32> = u_xlat13;
        u_xlat60 = ((vec2<f32>(x_2986.x, x_2986.y) * vec2<f32>(x_2989.x, x_2989.y)) + vec2<f32>(x_2992.w, x_2992.y));
        let x_2996 : f32 = u_xlat13.y;
        u_xlat10.y = x_2996;
        let x_2999 : f32 = u_xlat11.z;
        u_xlat13.y = x_2999;
        let x_3001 : vec4<f32> = u_xlat8;
        let x_3004 : vec4<f32> = x_372.x_MainLightShadowmapSize;
        let x_3007 : vec4<f32> = u_xlat13;
        u_xlat15 = ((vec4<f32>(x_3001.x, x_3001.y, x_3001.x, x_3001.y) * vec4<f32>(x_3004.x, x_3004.y, x_3004.x, x_3004.y)) + vec4<f32>(x_3007.x, x_3007.y, x_3007.z, x_3007.y));
        let x_3010 : vec4<f32> = u_xlat8;
        let x_3013 : vec4<f32> = x_372.x_MainLightShadowmapSize;
        let x_3016 : vec4<f32> = u_xlat13;
        let x_3018 : vec2<f32> = ((vec2<f32>(x_3010.x, x_3010.y) * vec2<f32>(x_3013.x, x_3013.y)) + vec2<f32>(x_3016.w, x_3016.y));
        let x_3019 : vec4<f32> = u_xlat16;
        u_xlat16 = vec4<f32>(x_3018.x, x_3018.y, x_3019.z, x_3019.w);
        let x_3022 : f32 = u_xlat13.y;
        u_xlat10.z = x_3022;
        let x_3024 : vec4<f32> = u_xlat8;
        let x_3027 : vec4<f32> = x_372.x_MainLightShadowmapSize;
        let x_3030 : vec4<f32> = u_xlat10;
        u_xlat17 = ((vec4<f32>(x_3024.x, x_3024.y, x_3024.x, x_3024.y) * vec4<f32>(x_3027.x, x_3027.y, x_3027.x, x_3027.y)) + vec4<f32>(x_3030.x, x_3030.y, x_3030.x, x_3030.z));
        let x_3034 : f32 = u_xlat11.w;
        u_xlat13.y = x_3034;
        let x_3036 : vec4<f32> = u_xlat8;
        let x_3039 : vec4<f32> = x_372.x_MainLightShadowmapSize;
        let x_3042 : vec4<f32> = u_xlat13;
        u_xlat18 = ((vec4<f32>(x_3036.x, x_3036.y, x_3036.x, x_3036.y) * vec4<f32>(x_3039.x, x_3039.y, x_3039.x, x_3039.y)) + vec4<f32>(x_3042.x, x_3042.y, x_3042.z, x_3042.y));
        let x_3045 : vec4<f32> = u_xlat8;
        let x_3048 : vec4<f32> = x_372.x_MainLightShadowmapSize;
        let x_3051 : vec4<f32> = u_xlat13;
        u_xlat36 = ((vec2<f32>(x_3045.x, x_3045.y) * vec2<f32>(x_3048.x, x_3048.y)) + vec2<f32>(x_3051.w, x_3051.y));
        let x_3055 : f32 = u_xlat13.y;
        u_xlat10.w = x_3055;
        let x_3057 : vec4<f32> = u_xlat8;
        let x_3060 : vec4<f32> = x_372.x_MainLightShadowmapSize;
        let x_3063 : vec4<f32> = u_xlat10;
        u_xlat68 = ((vec2<f32>(x_3057.x, x_3057.y) * vec2<f32>(x_3060.x, x_3060.y)) + vec2<f32>(x_3063.x, x_3063.w));
        let x_3066 : vec4<f32> = u_xlat13;
        let x_3067 : vec3<f32> = vec3<f32>(x_3066.x, x_3066.z, x_3066.w);
        let x_3068 : vec4<f32> = u_xlat11;
        u_xlat11 = vec4<f32>(x_3067.x, x_3068.y, x_3067.y, x_3067.z);
        let x_3070 : vec4<f32> = u_xlat8;
        let x_3073 : vec4<f32> = x_372.x_MainLightShadowmapSize;
        let x_3076 : vec4<f32> = u_xlat11;
        u_xlat13 = ((vec4<f32>(x_3070.x, x_3070.y, x_3070.x, x_3070.y) * vec4<f32>(x_3073.x, x_3073.y, x_3073.x, x_3073.y)) + vec4<f32>(x_3076.x, x_3076.y, x_3076.z, x_3076.y));
        let x_3079 : vec4<f32> = u_xlat8;
        let x_3082 : vec4<f32> = x_372.x_MainLightShadowmapSize;
        let x_3085 : vec4<f32> = u_xlat11;
        u_xlat63 = ((vec2<f32>(x_3079.x, x_3079.y) * vec2<f32>(x_3082.x, x_3082.y)) + vec2<f32>(x_3085.w, x_3085.y));
        let x_3089 : f32 = u_xlat10.x;
        u_xlat11.x = x_3089;
        let x_3091 : vec4<f32> = u_xlat8;
        let x_3094 : vec4<f32> = x_372.x_MainLightShadowmapSize;
        let x_3097 : vec4<f32> = u_xlat11;
        let x_3099 : vec2<f32> = ((vec2<f32>(x_3091.x, x_3091.y) * vec2<f32>(x_3094.x, x_3094.y)) + vec2<f32>(x_3097.x, x_3097.y));
        let x_3100 : vec4<f32> = u_xlat8;
        u_xlat8 = vec4<f32>(x_3099.x, x_3099.y, x_3100.z, x_3100.w);
        let x_3102 : vec4<f32> = u_xlat9;
        let x_3104 : vec4<f32> = u_xlat12;
        u_xlat19 = (vec4<f32>(x_3102.x, x_3102.x, x_3102.x, x_3102.x) * x_3104);
        let x_3106 : vec4<f32> = u_xlat9;
        let x_3108 : vec4<f32> = u_xlat12;
        u_xlat20 = (vec4<f32>(x_3106.y, x_3106.y, x_3106.y, x_3106.y) * x_3108);
        let x_3110 : vec4<f32> = u_xlat9;
        let x_3112 : vec4<f32> = u_xlat12;
        u_xlat21 = (vec4<f32>(x_3110.z, x_3110.z, x_3110.z, x_3110.z) * x_3112);
        let x_3114 : vec4<f32> = u_xlat9;
        let x_3116 : vec4<f32> = u_xlat12;
        u_xlat9 = (vec4<f32>(x_3114.w, x_3114.w, x_3114.w, x_3114.w) * x_3116);
        let x_3119 : vec4<f32> = u_xlat14;
        let x_3120 : vec2<f32> = vec2<f32>(x_3119.x, x_3119.y);
        let x_3122 : f32 = u_xlat2.z;
        txVec43 = vec3<f32>(x_3120.x, x_3120.y, x_3122);
        let x_3129 : vec3<f32> = txVec43;
        let x_3131 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_LinearClampCompare, x_3129.xy, x_3129.z);
        u_xlat84 = x_3131;
        let x_3133 : vec4<f32> = u_xlat14;
        let x_3134 : vec2<f32> = vec2<f32>(x_3133.z, x_3133.w);
        let x_3136 : f32 = u_xlat2.z;
        txVec44 = vec3<f32>(x_3134.x, x_3134.y, x_3136);
        let x_3143 : vec3<f32> = txVec44;
        let x_3145 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_LinearClampCompare, x_3143.xy, x_3143.z);
        u_xlat85 = x_3145;
        let x_3146 : f32 = u_xlat85;
        let x_3148 : f32 = u_xlat19.y;
        u_xlat85 = (x_3146 * x_3148);
        let x_3151 : f32 = u_xlat19.x;
        let x_3152 : f32 = u_xlat84;
        let x_3154 : f32 = u_xlat85;
        u_xlat84 = ((x_3151 * x_3152) + x_3154);
        let x_3157 : vec2<f32> = u_xlat60;
        let x_3159 : f32 = u_xlat2.z;
        txVec45 = vec3<f32>(x_3157.x, x_3157.y, x_3159);
        let x_3166 : vec3<f32> = txVec45;
        let x_3168 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_LinearClampCompare, x_3166.xy, x_3166.z);
        u_xlat85 = x_3168;
        let x_3170 : f32 = u_xlat19.z;
        let x_3171 : f32 = u_xlat85;
        let x_3173 : f32 = u_xlat84;
        u_xlat84 = ((x_3170 * x_3171) + x_3173);
        let x_3176 : vec4<f32> = u_xlat17;
        let x_3177 : vec2<f32> = vec2<f32>(x_3176.x, x_3176.y);
        let x_3179 : f32 = u_xlat2.z;
        txVec46 = vec3<f32>(x_3177.x, x_3177.y, x_3179);
        let x_3186 : vec3<f32> = txVec46;
        let x_3188 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_LinearClampCompare, x_3186.xy, x_3186.z);
        u_xlat85 = x_3188;
        let x_3190 : f32 = u_xlat19.w;
        let x_3191 : f32 = u_xlat85;
        let x_3193 : f32 = u_xlat84;
        u_xlat84 = ((x_3190 * x_3191) + x_3193);
        let x_3196 : vec4<f32> = u_xlat15;
        let x_3197 : vec2<f32> = vec2<f32>(x_3196.x, x_3196.y);
        let x_3199 : f32 = u_xlat2.z;
        txVec47 = vec3<f32>(x_3197.x, x_3197.y, x_3199);
        let x_3206 : vec3<f32> = txVec47;
        let x_3208 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_LinearClampCompare, x_3206.xy, x_3206.z);
        u_xlat85 = x_3208;
        let x_3210 : f32 = u_xlat20.x;
        let x_3211 : f32 = u_xlat85;
        let x_3213 : f32 = u_xlat84;
        u_xlat84 = ((x_3210 * x_3211) + x_3213);
        let x_3216 : vec4<f32> = u_xlat15;
        let x_3217 : vec2<f32> = vec2<f32>(x_3216.z, x_3216.w);
        let x_3219 : f32 = u_xlat2.z;
        txVec48 = vec3<f32>(x_3217.x, x_3217.y, x_3219);
        let x_3226 : vec3<f32> = txVec48;
        let x_3228 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_LinearClampCompare, x_3226.xy, x_3226.z);
        u_xlat85 = x_3228;
        let x_3230 : f32 = u_xlat20.y;
        let x_3231 : f32 = u_xlat85;
        let x_3233 : f32 = u_xlat84;
        u_xlat84 = ((x_3230 * x_3231) + x_3233);
        let x_3236 : vec4<f32> = u_xlat16;
        let x_3237 : vec2<f32> = vec2<f32>(x_3236.x, x_3236.y);
        let x_3239 : f32 = u_xlat2.z;
        txVec49 = vec3<f32>(x_3237.x, x_3237.y, x_3239);
        let x_3246 : vec3<f32> = txVec49;
        let x_3248 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_LinearClampCompare, x_3246.xy, x_3246.z);
        u_xlat85 = x_3248;
        let x_3250 : f32 = u_xlat20.z;
        let x_3251 : f32 = u_xlat85;
        let x_3253 : f32 = u_xlat84;
        u_xlat84 = ((x_3250 * x_3251) + x_3253);
        let x_3256 : vec4<f32> = u_xlat17;
        let x_3257 : vec2<f32> = vec2<f32>(x_3256.z, x_3256.w);
        let x_3259 : f32 = u_xlat2.z;
        txVec50 = vec3<f32>(x_3257.x, x_3257.y, x_3259);
        let x_3266 : vec3<f32> = txVec50;
        let x_3268 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_LinearClampCompare, x_3266.xy, x_3266.z);
        u_xlat85 = x_3268;
        let x_3270 : f32 = u_xlat20.w;
        let x_3271 : f32 = u_xlat85;
        let x_3273 : f32 = u_xlat84;
        u_xlat84 = ((x_3270 * x_3271) + x_3273);
        let x_3276 : vec4<f32> = u_xlat18;
        let x_3277 : vec2<f32> = vec2<f32>(x_3276.x, x_3276.y);
        let x_3279 : f32 = u_xlat2.z;
        txVec51 = vec3<f32>(x_3277.x, x_3277.y, x_3279);
        let x_3286 : vec3<f32> = txVec51;
        let x_3288 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_LinearClampCompare, x_3286.xy, x_3286.z);
        u_xlat85 = x_3288;
        let x_3290 : f32 = u_xlat21.x;
        let x_3291 : f32 = u_xlat85;
        let x_3293 : f32 = u_xlat84;
        u_xlat84 = ((x_3290 * x_3291) + x_3293);
        let x_3296 : vec4<f32> = u_xlat18;
        let x_3297 : vec2<f32> = vec2<f32>(x_3296.z, x_3296.w);
        let x_3299 : f32 = u_xlat2.z;
        txVec52 = vec3<f32>(x_3297.x, x_3297.y, x_3299);
        let x_3306 : vec3<f32> = txVec52;
        let x_3308 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_LinearClampCompare, x_3306.xy, x_3306.z);
        u_xlat85 = x_3308;
        let x_3310 : f32 = u_xlat21.y;
        let x_3311 : f32 = u_xlat85;
        let x_3313 : f32 = u_xlat84;
        u_xlat84 = ((x_3310 * x_3311) + x_3313);
        let x_3316 : vec2<f32> = u_xlat36;
        let x_3318 : f32 = u_xlat2.z;
        txVec53 = vec3<f32>(x_3316.x, x_3316.y, x_3318);
        let x_3325 : vec3<f32> = txVec53;
        let x_3327 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_LinearClampCompare, x_3325.xy, x_3325.z);
        u_xlat85 = x_3327;
        let x_3329 : f32 = u_xlat21.z;
        let x_3330 : f32 = u_xlat85;
        let x_3332 : f32 = u_xlat84;
        u_xlat84 = ((x_3329 * x_3330) + x_3332);
        let x_3335 : vec2<f32> = u_xlat68;
        let x_3337 : f32 = u_xlat2.z;
        txVec54 = vec3<f32>(x_3335.x, x_3335.y, x_3337);
        let x_3344 : vec3<f32> = txVec54;
        let x_3346 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_LinearClampCompare, x_3344.xy, x_3344.z);
        u_xlat85 = x_3346;
        let x_3348 : f32 = u_xlat21.w;
        let x_3349 : f32 = u_xlat85;
        let x_3351 : f32 = u_xlat84;
        u_xlat84 = ((x_3348 * x_3349) + x_3351);
        let x_3354 : vec4<f32> = u_xlat13;
        let x_3355 : vec2<f32> = vec2<f32>(x_3354.x, x_3354.y);
        let x_3357 : f32 = u_xlat2.z;
        txVec55 = vec3<f32>(x_3355.x, x_3355.y, x_3357);
        let x_3364 : vec3<f32> = txVec55;
        let x_3366 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_LinearClampCompare, x_3364.xy, x_3364.z);
        u_xlat85 = x_3366;
        let x_3368 : f32 = u_xlat9.x;
        let x_3369 : f32 = u_xlat85;
        let x_3371 : f32 = u_xlat84;
        u_xlat84 = ((x_3368 * x_3369) + x_3371);
        let x_3374 : vec4<f32> = u_xlat13;
        let x_3375 : vec2<f32> = vec2<f32>(x_3374.z, x_3374.w);
        let x_3377 : f32 = u_xlat2.z;
        txVec56 = vec3<f32>(x_3375.x, x_3375.y, x_3377);
        let x_3384 : vec3<f32> = txVec56;
        let x_3386 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_LinearClampCompare, x_3384.xy, x_3384.z);
        u_xlat85 = x_3386;
        let x_3388 : f32 = u_xlat9.y;
        let x_3389 : f32 = u_xlat85;
        let x_3391 : f32 = u_xlat84;
        u_xlat84 = ((x_3388 * x_3389) + x_3391);
        let x_3394 : vec2<f32> = u_xlat63;
        let x_3396 : f32 = u_xlat2.z;
        txVec57 = vec3<f32>(x_3394.x, x_3394.y, x_3396);
        let x_3403 : vec3<f32> = txVec57;
        let x_3405 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_LinearClampCompare, x_3403.xy, x_3403.z);
        u_xlat85 = x_3405;
        let x_3407 : f32 = u_xlat9.z;
        let x_3408 : f32 = u_xlat85;
        let x_3410 : f32 = u_xlat84;
        u_xlat84 = ((x_3407 * x_3408) + x_3410);
        let x_3413 : vec4<f32> = u_xlat8;
        let x_3414 : vec2<f32> = vec2<f32>(x_3413.x, x_3413.y);
        let x_3416 : f32 = u_xlat2.z;
        txVec58 = vec3<f32>(x_3414.x, x_3414.y, x_3416);
        let x_3423 : vec3<f32> = txVec58;
        let x_3425 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_LinearClampCompare, x_3423.xy, x_3423.z);
        u_xlat85 = x_3425;
        let x_3427 : f32 = u_xlat9.w;
        let x_3428 : f32 = u_xlat85;
        let x_3430 : f32 = u_xlat84;
        u_xlat0.x = ((x_3427 * x_3428) + x_3430);
      }
    }
  } else {
    let x_3435 : vec4<f32> = u_xlat2;
    let x_3436 : vec2<f32> = vec2<f32>(x_3435.x, x_3435.y);
    let x_3438 : f32 = u_xlat2.z;
    txVec59 = vec3<f32>(x_3436.x, x_3436.y, x_3438);
    let x_3445 : vec3<f32> = txVec59;
    let x_3447 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_LinearClampCompare, x_3445.xy, x_3445.z);
    u_xlat0.x = x_3447;
  }
  let x_3450 : f32 = u_xlat0.x;
  let x_3452 : f32 = x_372.x_MainLightShadowParams.x;
  let x_3454 : f32 = u_xlat80;
  u_xlat0.x = ((x_3450 * x_3452) + x_3454);
  let x_3457 : bool = u_xlatb3;
  if (x_3457) {
    x_3458 = 1.0f;
  } else {
    let x_3463 : f32 = u_xlat0.x;
    x_3458 = x_3463;
  }
  let x_3464 : f32 = x_3458;
  u_xlat0.x = x_3464;
  let x_3466 : vec3<f32> = vs_INTERP8;
  let x_3468 : vec3<f32> = x_149.x_WorldSpaceCameraPos;
  let x_3470 : vec3<f32> = (x_3466 + -(x_3468));
  let x_3471 : vec4<f32> = u_xlat2;
  u_xlat2 = vec4<f32>(x_3470.x, x_3470.y, x_3470.z, x_3471.w);
  let x_3473 : vec4<f32> = u_xlat2;
  let x_3475 : vec4<f32> = u_xlat2;
  u_xlat2.x = dot(vec3<f32>(x_3473.x, x_3473.y, x_3473.z), vec3<f32>(x_3475.x, x_3475.y, x_3475.z));
  let x_3481 : f32 = u_xlat2.x;
  let x_3483 : f32 = x_372.x_MainLightShadowParams.z;
  let x_3486 : f32 = x_372.x_MainLightShadowParams.w;
  u_xlat28.x = ((x_3481 * x_3483) + x_3486);
  let x_3490 : f32 = u_xlat28.x;
  u_xlat28.x = clamp(x_3490, 0.0f, 1.0f);
  let x_3495 : f32 = u_xlat0.x;
  u_xlat54 = (-(x_3495) + 1.0f);
  let x_3499 : f32 = u_xlat28.x;
  let x_3500 : f32 = u_xlat54;
  let x_3503 : f32 = u_xlat0.x;
  u_xlat0.x = ((x_3499 * x_3500) + x_3503);
  let x_3506 : vec3<f32> = u_xlat4;
  let x_3508 : vec4<f32> = u_xlat5;
  u_xlat28.x = dot(-(x_3506), vec3<f32>(x_3508.x, x_3508.y, x_3508.z));
  let x_3513 : f32 = u_xlat28.x;
  let x_3515 : f32 = u_xlat28.x;
  u_xlat28.x = (x_3513 + x_3515);
  let x_3518 : vec4<f32> = u_xlat5;
  let x_3520 : vec3<f32> = u_xlat28;
  let x_3524 : vec3<f32> = u_xlat4;
  u_xlat28 = ((vec3<f32>(x_3518.x, x_3518.y, x_3518.z) * -(vec3<f32>(x_3520.x, x_3520.x, x_3520.x))) + -(x_3524));
  let x_3527 : vec4<f32> = u_xlat5;
  let x_3529 : vec3<f32> = u_xlat4;
  u_xlat3.x = dot(vec3<f32>(x_3527.x, x_3527.y, x_3527.z), x_3529);
  let x_3533 : f32 = u_xlat3.x;
  u_xlat3.x = clamp(x_3533, 0.0f, 1.0f);
  let x_3537 : f32 = u_xlat3.x;
  u_xlat3.x = (-(x_3537) + 1.0f);
  let x_3542 : f32 = u_xlat3.x;
  let x_3544 : f32 = u_xlat3.x;
  u_xlat3.x = (x_3542 * x_3544);
  let x_3548 : f32 = u_xlat3.x;
  let x_3550 : f32 = u_xlat3.x;
  u_xlat3.x = (x_3548 * x_3550);
  let x_3554 : f32 = u_xlat52.x;
  u_xlat84 = ((-(x_3554) * 0.69999998807907104492f) + 1.70000004768371582031f);
  let x_3561 : f32 = u_xlat52.x;
  let x_3562 : f32 = u_xlat84;
  u_xlat52.x = (x_3561 * x_3562);
  let x_3566 : f32 = u_xlat52.x;
  u_xlat52.x = (x_3566 * 6.0f);
  let x_3578 : vec3<f32> = u_xlat28;
  let x_3580 : f32 = u_xlat52.x;
  let x_3581 : vec4<f32> = textureSampleLevel(unity_SpecCube0, samplerunity_SpecCube0, x_3578, x_3580);
  u_xlat8 = x_3581;
  let x_3583 : f32 = u_xlat8.w;
  u_xlat52.x = (x_3583 + -1.0f);
  let x_3587 : f32 = x_83.unity_SpecCube0_HDR.w;
  let x_3589 : f32 = u_xlat52.x;
  u_xlat52.x = ((x_3587 * x_3589) + 1.0f);
  let x_3594 : f32 = u_xlat52.x;
  u_xlat52.x = max(x_3594, 0.0f);
  let x_3598 : f32 = u_xlat52.x;
  u_xlat52.x = log2(x_3598);
  let x_3602 : f32 = u_xlat52.x;
  let x_3604 : f32 = x_83.unity_SpecCube0_HDR.y;
  u_xlat52.x = (x_3602 * x_3604);
  let x_3608 : f32 = u_xlat52.x;
  u_xlat52.x = exp2(x_3608);
  let x_3612 : f32 = u_xlat52.x;
  let x_3614 : f32 = x_83.unity_SpecCube0_HDR.x;
  u_xlat52.x = (x_3612 * x_3614);
  let x_3617 : vec4<f32> = u_xlat8;
  let x_3619 : vec2<f32> = u_xlat52;
  u_xlat28 = (vec3<f32>(x_3617.x, x_3617.y, x_3617.z) * vec3<f32>(x_3619.x, x_3619.x, x_3619.x));
  let x_3622 : f32 = u_xlat78;
  let x_3624 : f32 = u_xlat78;
  u_xlat52 = ((vec2<f32>(x_3622, x_3622) * vec2<f32>(x_3624, x_3624)) + vec2<f32>(-1.0f, 1.0f));
  let x_3630 : f32 = u_xlat52.y;
  u_xlat78 = (1.0f / x_3630);
  let x_3632 : f32 = u_xlat81;
  u_xlat81 = (x_3632 + -0.03999999910593032837f);
  let x_3636 : f32 = u_xlat3.x;
  let x_3637 : f32 = u_xlat81;
  u_xlat3.x = ((x_3636 * x_3637) + 0.03999999910593032837f);
  let x_3642 : f32 = u_xlat78;
  let x_3644 : f32 = u_xlat3.x;
  u_xlat78 = (x_3642 * x_3644);
  let x_3646 : f32 = u_xlat78;
  let x_3648 : vec3<f32> = u_xlat28;
  u_xlat28 = (vec3<f32>(x_3646, x_3646, x_3646) * x_3648);
  let x_3650 : vec4<f32> = u_xlat6;
  let x_3652 : vec3<f32> = u_xlat7;
  let x_3654 : vec3<f32> = u_xlat28;
  u_xlat28 = ((vec3<f32>(x_3650.x, x_3650.y, x_3650.z) * x_3652) + x_3654);
  let x_3657 : f32 = u_xlat0.x;
  let x_3659 : f32 = x_83.unity_LightData.z;
  u_xlat0.x = (x_3657 * x_3659);
  let x_3662 : vec4<f32> = u_xlat5;
  let x_3665 : vec4<f32> = x_149.x_MainLightPosition;
  u_xlat78 = dot(vec3<f32>(x_3662.x, x_3662.y, x_3662.z), vec3<f32>(x_3665.x, x_3665.y, x_3665.z));
  let x_3668 : f32 = u_xlat78;
  u_xlat78 = clamp(x_3668, 0.0f, 1.0f);
  let x_3670 : f32 = u_xlat78;
  let x_3672 : f32 = u_xlat0.x;
  u_xlat0.x = (x_3670 * x_3672);
  let x_3675 : vec4<f32> = u_xlat0;
  let x_3678 : vec4<f32> = x_149.x_MainLightColor;
  let x_3680 : vec3<f32> = (vec3<f32>(x_3675.x, x_3675.x, x_3675.x) * vec3<f32>(x_3678.x, x_3678.y, x_3678.z));
  let x_3681 : vec4<f32> = u_xlat6;
  u_xlat6 = vec4<f32>(x_3680.x, x_3680.y, x_3680.z, x_3681.w);
  let x_3683 : vec3<f32> = u_xlat4;
  let x_3685 : vec4<f32> = x_149.x_MainLightPosition;
  let x_3687 : vec3<f32> = (x_3683 + vec3<f32>(x_3685.x, x_3685.y, x_3685.z));
  let x_3688 : vec4<f32> = u_xlat8;
  u_xlat8 = vec4<f32>(x_3687.x, x_3687.y, x_3687.z, x_3688.w);
  let x_3690 : vec4<f32> = u_xlat8;
  let x_3692 : vec4<f32> = u_xlat8;
  u_xlat0.x = dot(vec3<f32>(x_3690.x, x_3690.y, x_3690.z), vec3<f32>(x_3692.x, x_3692.y, x_3692.z));
  let x_3697 : f32 = u_xlat0.x;
  u_xlat0.x = max(x_3697, 1.17549435e-38f);
  let x_3701 : f32 = u_xlat0.x;
  u_xlat0.x = inverseSqrt(x_3701);
  let x_3704 : vec4<f32> = u_xlat0;
  let x_3706 : vec4<f32> = u_xlat8;
  let x_3708 : vec3<f32> = (vec3<f32>(x_3704.x, x_3704.x, x_3704.x) * vec3<f32>(x_3706.x, x_3706.y, x_3706.z));
  let x_3709 : vec4<f32> = u_xlat8;
  u_xlat8 = vec4<f32>(x_3708.x, x_3708.y, x_3708.z, x_3709.w);
  let x_3711 : vec4<f32> = u_xlat5;
  let x_3713 : vec4<f32> = u_xlat8;
  u_xlat0.x = dot(vec3<f32>(x_3711.x, x_3711.y, x_3711.z), vec3<f32>(x_3713.x, x_3713.y, x_3713.z));
  let x_3718 : f32 = u_xlat0.x;
  u_xlat0.x = clamp(x_3718, 0.0f, 1.0f);
  let x_3722 : vec4<f32> = x_149.x_MainLightPosition;
  let x_3724 : vec4<f32> = u_xlat8;
  u_xlat0.w = dot(vec3<f32>(x_3722.x, x_3722.y, x_3722.z), vec3<f32>(x_3724.x, x_3724.y, x_3724.z));
  let x_3729 : f32 = u_xlat0.w;
  u_xlat0.w = clamp(x_3729, 0.0f, 1.0f);
  let x_3732 : vec4<f32> = u_xlat0;
  let x_3734 : vec4<f32> = u_xlat0;
  let x_3736 : vec2<f32> = (vec2<f32>(x_3732.x, x_3732.w) * vec2<f32>(x_3734.x, x_3734.w));
  let x_3737 : vec4<f32> = u_xlat0;
  u_xlat0 = vec4<f32>(x_3736.x, x_3737.y, x_3737.z, x_3736.y);
  let x_3740 : f32 = u_xlat0.x;
  let x_3742 : f32 = u_xlat52.x;
  u_xlat0.x = ((x_3740 * x_3742) + 1.00001001358032226562f);
  let x_3748 : f32 = u_xlat0.x;
  let x_3750 : f32 = u_xlat0.x;
  u_xlat0.x = (x_3748 * x_3750);
  let x_3754 : f32 = u_xlat0.w;
  u_xlat78 = max(x_3754, 0.10000000149011611938f);
  let x_3757 : f32 = u_xlat78;
  let x_3759 : f32 = u_xlat0.x;
  u_xlat0.x = (x_3757 * x_3759);
  let x_3762 : f32 = u_xlat82;
  let x_3764 : f32 = u_xlat0.x;
  u_xlat0.x = (x_3762 * x_3764);
  let x_3768 : f32 = u_xlat55.x;
  let x_3770 : f32 = u_xlat0.x;
  u_xlat0.x = (x_3768 / x_3770);
  let x_3773 : vec4<f32> = u_xlat0;
  let x_3777 : vec3<f32> = u_xlat7;
  let x_3778 : vec3<f32> = ((vec3<f32>(x_3773.x, x_3773.x, x_3773.x) * vec3<f32>(0.03999999910593032837f, 0.03999999910593032837f, 0.03999999910593032837f)) + x_3777);
  let x_3779 : vec4<f32> = u_xlat8;
  u_xlat8 = vec4<f32>(x_3778.x, x_3778.y, x_3778.z, x_3779.w);
  let x_3781 : vec4<f32> = u_xlat6;
  let x_3783 : vec4<f32> = u_xlat8;
  let x_3785 : vec3<f32> = (vec3<f32>(x_3781.x, x_3781.y, x_3781.z) * vec3<f32>(x_3783.x, x_3783.y, x_3783.z));
  let x_3786 : vec4<f32> = u_xlat6;
  u_xlat6 = vec4<f32>(x_3785.x, x_3785.y, x_3785.z, x_3786.w);
  let x_3789 : f32 = x_149.x_AdditionalLightsCount.x;
  let x_3791 : f32 = x_83.unity_LightData.y;
  u_xlat0.x = min(x_3789, x_3791);
  let x_3795 : f32 = u_xlat0.x;
  u_xlatu0 = bitcast<u32>(i32(x_3795));
  let x_3799 : f32 = u_xlat2.x;
  let x_3802 : f32 = x_372.x_AdditionalShadowFadeParams.x;
  let x_3805 : f32 = x_372.x_AdditionalShadowFadeParams.y;
  u_xlat78 = ((x_3799 * x_3802) + x_3805);
  let x_3807 : f32 = u_xlat78;
  u_xlat78 = clamp(x_3807, 0.0f, 1.0f);
  u_xlat8.x = 0.0f;
  u_xlat8.y = 0.0f;
  u_xlat8.z = 0.0f;
  u_xlatu_loop_1 = 0u;
  loop {
    let x_3818 : u32 = u_xlatu_loop_1;
    let x_3819 : u32 = u_xlatu0;
    if ((x_3818 < x_3819)) {
    } else {
      break;
    }
    let x_3822 : u32 = u_xlatu_loop_1;
    u_xlatu3 = (x_3822 >> 2u);
    let x_3825 : u32 = u_xlatu_loop_1;
    u_xlati81 = bitcast<i32>((x_3825 & 3u));
    let x_3828 : u32 = u_xlatu3;
    let x_3831 : vec4<f32> = x_83.unity_LightIndices[bitcast<i32>(x_3828)];
    let x_3841 : i32 = u_xlati81;
    indexable = array<vec4<u32>, 4u>(vec4<u32>(1065353216u, 0u, 0u, 0u), vec4<u32>(0u, 1065353216u, 0u, 0u), vec4<u32>(0u, 0u, 1065353216u, 0u), vec4<u32>(0u, 0u, 0u, 1065353216u));
    let x_3846 : vec4<u32> = indexable[x_3841];
    u_xlat3.x = dot(x_3831, bitcast<vec4<f32>>(x_3846));
    let x_3852 : f32 = u_xlat3.x;
    u_xlati3 = i32(x_3852);
    let x_3854 : vec3<f32> = vs_INTERP8;
    let x_3865 : i32 = u_xlati3;
    let x_3867 : vec4<f32> = x_3864.x_AdditionalLightsPosition[x_3865];
    let x_3870 : i32 = u_xlati3;
    let x_3872 : vec4<f32> = x_3864.x_AdditionalLightsPosition[x_3870];
    let x_3874 : vec3<f32> = ((-(x_3854) * vec3<f32>(x_3867.w, x_3867.w, x_3867.w)) + vec3<f32>(x_3872.x, x_3872.y, x_3872.z));
    let x_3875 : vec4<f32> = u_xlat9;
    u_xlat9 = vec4<f32>(x_3874.x, x_3874.y, x_3874.z, x_3875.w);
    let x_3877 : vec4<f32> = u_xlat9;
    let x_3879 : vec4<f32> = u_xlat9;
    u_xlat81 = dot(vec3<f32>(x_3877.x, x_3877.y, x_3877.z), vec3<f32>(x_3879.x, x_3879.y, x_3879.z));
    let x_3882 : f32 = u_xlat81;
    u_xlat81 = max(x_3882, 0.00006103515625f);
    let x_3885 : f32 = u_xlat81;
    u_xlat84 = inverseSqrt(x_3885);
    let x_3887 : f32 = u_xlat84;
    let x_3889 : vec4<f32> = u_xlat9;
    let x_3891 : vec3<f32> = (vec3<f32>(x_3887, x_3887, x_3887) * vec3<f32>(x_3889.x, x_3889.y, x_3889.z));
    let x_3892 : vec4<f32> = u_xlat10;
    u_xlat10 = vec4<f32>(x_3891.x, x_3891.y, x_3891.z, x_3892.w);
    let x_3894 : f32 = u_xlat81;
    u_xlat85 = (1.0f / x_3894);
    let x_3896 : f32 = u_xlat81;
    let x_3897 : i32 = u_xlati3;
    let x_3899 : f32 = x_3864.x_AdditionalLightsAttenuation[x_3897].x;
    u_xlat81 = (x_3896 * x_3899);
    let x_3901 : f32 = u_xlat81;
    let x_3903 : f32 = u_xlat81;
    u_xlat81 = ((-(x_3901) * x_3903) + 1.0f);
    let x_3906 : f32 = u_xlat81;
    u_xlat81 = max(x_3906, 0.0f);
    let x_3908 : f32 = u_xlat81;
    let x_3909 : f32 = u_xlat81;
    u_xlat81 = (x_3908 * x_3909);
    let x_3911 : f32 = u_xlat81;
    let x_3912 : f32 = u_xlat85;
    u_xlat81 = (x_3911 * x_3912);
    let x_3914 : i32 = u_xlati3;
    let x_3916 : vec4<f32> = x_3864.x_AdditionalLightsSpotDir[x_3914];
    let x_3918 : vec4<f32> = u_xlat10;
    u_xlat85 = dot(vec3<f32>(x_3916.x, x_3916.y, x_3916.z), vec3<f32>(x_3918.x, x_3918.y, x_3918.z));
    let x_3921 : f32 = u_xlat85;
    let x_3922 : i32 = u_xlati3;
    let x_3924 : f32 = x_3864.x_AdditionalLightsAttenuation[x_3922].z;
    let x_3926 : i32 = u_xlati3;
    let x_3928 : f32 = x_3864.x_AdditionalLightsAttenuation[x_3926].w;
    u_xlat85 = ((x_3921 * x_3924) + x_3928);
    let x_3930 : f32 = u_xlat85;
    u_xlat85 = clamp(x_3930, 0.0f, 1.0f);
    let x_3932 : f32 = u_xlat85;
    let x_3933 : f32 = u_xlat85;
    u_xlat85 = (x_3932 * x_3933);
    let x_3935 : f32 = u_xlat81;
    let x_3936 : f32 = u_xlat85;
    u_xlat81 = (x_3935 * x_3936);
    let x_3940 : i32 = u_xlati3;
    let x_3942 : f32 = x_372.x_AdditionalShadowParams[x_3940].w;
    u_xlati85 = i32(x_3942);
    let x_3945 : i32 = u_xlati85;
    u_xlatb86 = (x_3945 >= 0i);
    let x_3947 : bool = u_xlatb86;
    if (x_3947) {
      let x_3951 : i32 = u_xlati3;
      let x_3953 : f32 = x_372.x_AdditionalShadowParams[x_3951].z;
      u_xlatb86 = any(!((vec4<f32>(0.0f, 0.0f, 0.0f, 0.0f) == vec4<f32>(x_3953, x_3953, x_3953, x_3953))));
      let x_3957 : bool = u_xlatb86;
      if (x_3957) {
        let x_3961 : vec4<f32> = u_xlat10;
        let x_3964 : vec4<f32> = u_xlat10;
        let x_3967 : vec4<bool> = (abs(vec4<f32>(x_3961.z, x_3961.z, x_3961.y, x_3961.z)) >= abs(vec4<f32>(x_3964.x, x_3964.y, x_3964.x, x_3964.x)));
        let x_3969 : vec3<bool> = vec3<bool>(x_3967.x, x_3967.y, x_3967.z);
        let x_3970 : vec4<bool> = u_xlatb11;
        u_xlatb11 = vec4<bool>(x_3969.x, x_3969.y, x_3969.z, x_3970.w);
        let x_3973 : bool = u_xlatb11.y;
        let x_3975 : bool = u_xlatb11.x;
        u_xlatb86 = (x_3973 & x_3975);
        let x_3977 : vec4<f32> = u_xlat10;
        let x_3980 : vec4<bool> = (-(vec4<f32>(x_3977.z, x_3977.y, x_3977.z, x_3977.x)) < vec4<f32>(0.0f, 0.0f, 0.0f, 0.0f));
        let x_3981 : vec3<bool> = vec3<bool>(x_3980.x, x_3980.y, x_3980.w);
        let x_3982 : vec4<bool> = u_xlatb11;
        u_xlatb11 = vec4<bool>(x_3981.x, x_3981.y, x_3982.z, x_3981.z);
        let x_3985 : bool = u_xlatb11.x;
        u_xlat11.x = select(4.0f, 5.0f, x_3985);
        let x_3990 : bool = u_xlatb11.y;
        u_xlat11.y = select(2.0f, 3.0f, x_3990);
        let x_3995 : bool = u_xlatb11.w;
        u_xlat87 = select(0.0f, 1.0f, x_3995);
        let x_3998 : bool = u_xlatb11.z;
        if (x_3998) {
          let x_4003 : f32 = u_xlat11.y;
          x_3999 = x_4003;
        } else {
          let x_4005 : f32 = u_xlat87;
          x_3999 = x_4005;
        }
        let x_4006 : f32 = x_3999;
        u_xlat87 = x_4006;
        let x_4008 : bool = u_xlatb86;
        if (x_4008) {
          let x_4013 : f32 = u_xlat11.x;
          x_4009 = x_4013;
        } else {
          let x_4015 : f32 = u_xlat87;
          x_4009 = x_4015;
        }
        let x_4016 : f32 = x_4009;
        u_xlat86 = x_4016;
        let x_4017 : i32 = u_xlati3;
        let x_4019 : f32 = x_372.x_AdditionalShadowParams[x_4017].w;
        u_xlat87 = trunc(x_4019);
        let x_4021 : f32 = u_xlat86;
        let x_4022 : f32 = u_xlat87;
        u_xlat86 = (x_4021 + x_4022);
        let x_4024 : f32 = u_xlat86;
        u_xlati85 = i32(x_4024);
      }
      let x_4026 : i32 = u_xlati85;
      u_xlati85 = (x_4026 << bitcast<u32>(2i));
      let x_4028 : vec3<f32> = vs_INTERP8;
      let x_4031 : i32 = u_xlati85;
      let x_4034 : i32 = u_xlati85;
      let x_4038 : vec4<f32> = x_372.x_AdditionalLightsWorldToShadow[((x_4031 + 1i) / 4i)][((x_4034 + 1i) % 4i)];
      u_xlat11 = (vec4<f32>(x_4028.y, x_4028.y, x_4028.y, x_4028.y) * x_4038);
      let x_4040 : i32 = u_xlati85;
      let x_4042 : i32 = u_xlati85;
      let x_4045 : vec4<f32> = x_372.x_AdditionalLightsWorldToShadow[(x_4040 / 4i)][(x_4042 % 4i)];
      let x_4046 : vec3<f32> = vs_INTERP8;
      let x_4049 : vec4<f32> = u_xlat11;
      u_xlat11 = ((x_4045 * vec4<f32>(x_4046.x, x_4046.x, x_4046.x, x_4046.x)) + x_4049);
      let x_4051 : i32 = u_xlati85;
      let x_4054 : i32 = u_xlati85;
      let x_4058 : vec4<f32> = x_372.x_AdditionalLightsWorldToShadow[((x_4051 + 2i) / 4i)][((x_4054 + 2i) % 4i)];
      let x_4059 : vec3<f32> = vs_INTERP8;
      let x_4062 : vec4<f32> = u_xlat11;
      u_xlat11 = ((x_4058 * vec4<f32>(x_4059.z, x_4059.z, x_4059.z, x_4059.z)) + x_4062);
      let x_4064 : vec4<f32> = u_xlat11;
      let x_4065 : i32 = u_xlati85;
      let x_4068 : i32 = u_xlati85;
      let x_4072 : vec4<f32> = x_372.x_AdditionalLightsWorldToShadow[((x_4065 + 3i) / 4i)][((x_4068 + 3i) % 4i)];
      u_xlat11 = (x_4064 + x_4072);
      let x_4074 : vec4<f32> = u_xlat11;
      let x_4076 : vec4<f32> = u_xlat11;
      let x_4078 : vec3<f32> = (vec3<f32>(x_4074.x, x_4074.y, x_4074.z) / vec3<f32>(x_4076.w, x_4076.w, x_4076.w));
      let x_4079 : vec4<f32> = u_xlat11;
      u_xlat11 = vec4<f32>(x_4078.x, x_4078.y, x_4078.z, x_4079.w);
      let x_4082 : i32 = u_xlati3;
      let x_4084 : f32 = x_372.x_AdditionalShadowParams[x_4082].y;
      u_xlatb85 = (0.0f < x_4084);
      let x_4086 : bool = u_xlatb85;
      if (x_4086) {
        let x_4089 : i32 = u_xlati3;
        let x_4091 : f32 = x_372.x_AdditionalShadowParams[x_4089].y;
        u_xlatb85 = (1.0f == x_4091);
        let x_4093 : bool = u_xlatb85;
        if (x_4093) {
          let x_4096 : vec4<f32> = u_xlat11;
          let x_4100 : vec4<f32> = x_372.x_AdditionalShadowOffset0;
          u_xlat12 = (vec4<f32>(x_4096.x, x_4096.y, x_4096.x, x_4096.y) + x_4100);
          let x_4103 : vec4<f32> = u_xlat12;
          let x_4104 : vec2<f32> = vec2<f32>(x_4103.x, x_4103.y);
          let x_4106 : f32 = u_xlat11.z;
          txVec60 = vec3<f32>(x_4104.x, x_4104.y, x_4106);
          let x_4114 : vec3<f32> = txVec60;
          let x_4116 : f32 = textureSampleCompareLevel(x_AdditionalLightsShadowmapTexture, sampler_LinearClampCompare, x_4114.xy, x_4114.z);
          u_xlat13.x = x_4116;
          let x_4119 : vec4<f32> = u_xlat12;
          let x_4120 : vec2<f32> = vec2<f32>(x_4119.z, x_4119.w);
          let x_4122 : f32 = u_xlat11.z;
          txVec61 = vec3<f32>(x_4120.x, x_4120.y, x_4122);
          let x_4129 : vec3<f32> = txVec61;
          let x_4131 : f32 = textureSampleCompareLevel(x_AdditionalLightsShadowmapTexture, sampler_LinearClampCompare, x_4129.xy, x_4129.z);
          u_xlat13.y = x_4131;
          let x_4133 : vec4<f32> = u_xlat11;
          let x_4136 : vec4<f32> = x_372.x_AdditionalShadowOffset1;
          u_xlat12 = (vec4<f32>(x_4133.x, x_4133.y, x_4133.x, x_4133.y) + x_4136);
          let x_4139 : vec4<f32> = u_xlat12;
          let x_4140 : vec2<f32> = vec2<f32>(x_4139.x, x_4139.y);
          let x_4142 : f32 = u_xlat11.z;
          txVec62 = vec3<f32>(x_4140.x, x_4140.y, x_4142);
          let x_4149 : vec3<f32> = txVec62;
          let x_4151 : f32 = textureSampleCompareLevel(x_AdditionalLightsShadowmapTexture, sampler_LinearClampCompare, x_4149.xy, x_4149.z);
          u_xlat13.z = x_4151;
          let x_4154 : vec4<f32> = u_xlat12;
          let x_4155 : vec2<f32> = vec2<f32>(x_4154.z, x_4154.w);
          let x_4157 : f32 = u_xlat11.z;
          txVec63 = vec3<f32>(x_4155.x, x_4155.y, x_4157);
          let x_4164 : vec3<f32> = txVec63;
          let x_4166 : f32 = textureSampleCompareLevel(x_AdditionalLightsShadowmapTexture, sampler_LinearClampCompare, x_4164.xy, x_4164.z);
          u_xlat13.w = x_4166;
          let x_4168 : vec4<f32> = u_xlat13;
          u_xlat85 = dot(x_4168, vec4<f32>(0.25f, 0.25f, 0.25f, 0.25f));
        } else {
          let x_4171 : i32 = u_xlati3;
          let x_4173 : f32 = x_372.x_AdditionalShadowParams[x_4171].y;
          u_xlatb86 = (2.0f == x_4173);
          let x_4175 : bool = u_xlatb86;
          if (x_4175) {
            let x_4178 : vec4<f32> = u_xlat11;
            let x_4182 : vec4<f32> = x_372.x_AdditionalShadowmapSize;
            let x_4185 : vec2<f32> = ((vec2<f32>(x_4178.x, x_4178.y) * vec2<f32>(x_4182.z, x_4182.w)) + vec2<f32>(0.5f, 0.5f));
            let x_4186 : vec4<f32> = u_xlat12;
            u_xlat12 = vec4<f32>(x_4185.x, x_4185.y, x_4186.z, x_4186.w);
            let x_4188 : vec4<f32> = u_xlat12;
            let x_4190 : vec2<f32> = floor(vec2<f32>(x_4188.x, x_4188.y));
            let x_4191 : vec4<f32> = u_xlat12;
            u_xlat12 = vec4<f32>(x_4190.x, x_4190.y, x_4191.z, x_4191.w);
            let x_4194 : vec4<f32> = u_xlat11;
            let x_4197 : vec4<f32> = x_372.x_AdditionalShadowmapSize;
            let x_4200 : vec4<f32> = u_xlat12;
            u_xlat64 = ((vec2<f32>(x_4194.x, x_4194.y) * vec2<f32>(x_4197.z, x_4197.w)) + -(vec2<f32>(x_4200.x, x_4200.y)));
            let x_4204 : vec2<f32> = u_xlat64;
            u_xlat13 = (vec4<f32>(x_4204.x, x_4204.x, x_4204.y, x_4204.y) + vec4<f32>(0.5f, 1.0f, 0.5f, 1.0f));
            let x_4207 : vec4<f32> = u_xlat13;
            let x_4209 : vec4<f32> = u_xlat13;
            u_xlat14 = (vec4<f32>(x_4207.x, x_4207.x, x_4207.z, x_4207.z) * vec4<f32>(x_4209.x, x_4209.x, x_4209.z, x_4209.z));
            let x_4212 : vec4<f32> = u_xlat14;
            let x_4214 : vec2<f32> = (vec2<f32>(x_4212.y, x_4212.w) * vec2<f32>(0.07999999821186065674f, 0.07999999821186065674f));
            let x_4215 : vec4<f32> = u_xlat13;
            u_xlat13 = vec4<f32>(x_4214.x, x_4215.y, x_4214.y, x_4215.w);
            let x_4217 : vec4<f32> = u_xlat14;
            let x_4220 : vec2<f32> = u_xlat64;
            let x_4222 : vec2<f32> = ((vec2<f32>(x_4217.x, x_4217.z) * vec2<f32>(0.5f, 0.5f)) + -(x_4220));
            let x_4223 : vec4<f32> = u_xlat14;
            u_xlat14 = vec4<f32>(x_4222.x, x_4222.y, x_4223.z, x_4223.w);
            let x_4226 : vec2<f32> = u_xlat64;
            u_xlat66 = (-(x_4226) + vec2<f32>(1.0f, 1.0f));
            let x_4229 : vec2<f32> = u_xlat64;
            let x_4230 : vec2<f32> = min(x_4229, vec2<f32>(0.0f, 0.0f));
            let x_4231 : vec4<f32> = u_xlat15;
            u_xlat15 = vec4<f32>(x_4230.x, x_4230.y, x_4231.z, x_4231.w);
            let x_4233 : vec4<f32> = u_xlat15;
            let x_4236 : vec4<f32> = u_xlat15;
            let x_4239 : vec2<f32> = u_xlat66;
            let x_4240 : vec2<f32> = ((-(vec2<f32>(x_4233.x, x_4233.y)) * vec2<f32>(x_4236.x, x_4236.y)) + x_4239);
            let x_4241 : vec4<f32> = u_xlat15;
            u_xlat15 = vec4<f32>(x_4240.x, x_4240.y, x_4241.z, x_4241.w);
            let x_4243 : vec2<f32> = u_xlat64;
            u_xlat64 = max(x_4243, vec2<f32>(0.0f, 0.0f));
            let x_4245 : vec2<f32> = u_xlat64;
            let x_4247 : vec2<f32> = u_xlat64;
            let x_4249 : vec4<f32> = u_xlat13;
            u_xlat64 = ((-(x_4245) * x_4247) + vec2<f32>(x_4249.y, x_4249.w));
            let x_4252 : vec4<f32> = u_xlat15;
            let x_4254 : vec2<f32> = (vec2<f32>(x_4252.x, x_4252.y) + vec2<f32>(1.0f, 1.0f));
            let x_4255 : vec4<f32> = u_xlat15;
            u_xlat15 = vec4<f32>(x_4254.x, x_4254.y, x_4255.z, x_4255.w);
            let x_4257 : vec2<f32> = u_xlat64;
            u_xlat64 = (x_4257 + vec2<f32>(1.0f, 1.0f));
            let x_4259 : vec4<f32> = u_xlat14;
            let x_4261 : vec2<f32> = (vec2<f32>(x_4259.x, x_4259.y) * vec2<f32>(0.15999999642372131348f, 0.15999999642372131348f));
            let x_4262 : vec4<f32> = u_xlat16;
            u_xlat16 = vec4<f32>(x_4261.x, x_4261.y, x_4262.z, x_4262.w);
            let x_4264 : vec2<f32> = u_xlat66;
            let x_4265 : vec2<f32> = (x_4264 * vec2<f32>(0.15999999642372131348f, 0.15999999642372131348f));
            let x_4266 : vec4<f32> = u_xlat14;
            u_xlat14 = vec4<f32>(x_4265.x, x_4265.y, x_4266.z, x_4266.w);
            let x_4268 : vec4<f32> = u_xlat15;
            let x_4270 : vec2<f32> = (vec2<f32>(x_4268.x, x_4268.y) * vec2<f32>(0.15999999642372131348f, 0.15999999642372131348f));
            let x_4271 : vec4<f32> = u_xlat15;
            u_xlat15 = vec4<f32>(x_4270.x, x_4270.y, x_4271.z, x_4271.w);
            let x_4273 : vec2<f32> = u_xlat64;
            let x_4274 : vec2<f32> = (x_4273 * vec2<f32>(0.15999999642372131348f, 0.15999999642372131348f));
            let x_4275 : vec4<f32> = u_xlat17;
            u_xlat17 = vec4<f32>(x_4274.x, x_4274.y, x_4275.z, x_4275.w);
            let x_4277 : vec4<f32> = u_xlat13;
            u_xlat64 = (vec2<f32>(x_4277.y, x_4277.w) * vec2<f32>(0.15999999642372131348f, 0.15999999642372131348f));
            let x_4281 : f32 = u_xlat15.x;
            u_xlat16.z = x_4281;
            let x_4284 : f32 = u_xlat64.x;
            u_xlat16.w = x_4284;
            let x_4287 : f32 = u_xlat17.x;
            u_xlat14.z = x_4287;
            let x_4290 : f32 = u_xlat13.x;
            u_xlat14.w = x_4290;
            let x_4292 : vec4<f32> = u_xlat14;
            let x_4294 : vec4<f32> = u_xlat16;
            u_xlat18 = (vec4<f32>(x_4292.z, x_4292.w, x_4292.x, x_4292.z) + vec4<f32>(x_4294.z, x_4294.w, x_4294.x, x_4294.z));
            let x_4298 : f32 = u_xlat16.y;
            u_xlat15.z = x_4298;
            let x_4301 : f32 = u_xlat64.y;
            u_xlat15.w = x_4301;
            let x_4304 : f32 = u_xlat14.y;
            u_xlat17.z = x_4304;
            let x_4307 : f32 = u_xlat13.z;
            u_xlat17.w = x_4307;
            let x_4309 : vec4<f32> = u_xlat15;
            let x_4311 : vec4<f32> = u_xlat17;
            let x_4313 : vec3<f32> = (vec3<f32>(x_4309.z, x_4309.y, x_4309.w) + vec3<f32>(x_4311.z, x_4311.y, x_4311.w));
            let x_4314 : vec4<f32> = u_xlat13;
            u_xlat13 = vec4<f32>(x_4313.x, x_4313.y, x_4313.z, x_4314.w);
            let x_4316 : vec4<f32> = u_xlat14;
            let x_4318 : vec4<f32> = u_xlat18;
            let x_4320 : vec3<f32> = (vec3<f32>(x_4316.x, x_4316.z, x_4316.w) / vec3<f32>(x_4318.z, x_4318.w, x_4318.y));
            let x_4321 : vec4<f32> = u_xlat14;
            u_xlat14 = vec4<f32>(x_4320.x, x_4320.y, x_4320.z, x_4321.w);
            let x_4323 : vec4<f32> = u_xlat14;
            let x_4325 : vec3<f32> = (vec3<f32>(x_4323.x, x_4323.y, x_4323.z) + vec3<f32>(-2.5f, -0.5f, 1.5f));
            let x_4326 : vec4<f32> = u_xlat14;
            u_xlat14 = vec4<f32>(x_4325.x, x_4325.y, x_4325.z, x_4326.w);
            let x_4328 : vec4<f32> = u_xlat17;
            let x_4330 : vec4<f32> = u_xlat13;
            let x_4332 : vec3<f32> = (vec3<f32>(x_4328.z, x_4328.y, x_4328.w) / vec3<f32>(x_4330.x, x_4330.y, x_4330.z));
            let x_4333 : vec4<f32> = u_xlat15;
            u_xlat15 = vec4<f32>(x_4332.x, x_4332.y, x_4332.z, x_4333.w);
            let x_4335 : vec4<f32> = u_xlat15;
            let x_4337 : vec3<f32> = (vec3<f32>(x_4335.x, x_4335.y, x_4335.z) + vec3<f32>(-2.5f, -0.5f, 1.5f));
            let x_4338 : vec4<f32> = u_xlat15;
            u_xlat15 = vec4<f32>(x_4337.x, x_4337.y, x_4337.z, x_4338.w);
            let x_4340 : vec4<f32> = u_xlat14;
            let x_4343 : vec4<f32> = x_372.x_AdditionalShadowmapSize;
            let x_4345 : vec3<f32> = (vec3<f32>(x_4340.y, x_4340.x, x_4340.z) * vec3<f32>(x_4343.x, x_4343.x, x_4343.x));
            let x_4346 : vec4<f32> = u_xlat14;
            u_xlat14 = vec4<f32>(x_4345.x, x_4345.y, x_4345.z, x_4346.w);
            let x_4348 : vec4<f32> = u_xlat15;
            let x_4351 : vec4<f32> = x_372.x_AdditionalShadowmapSize;
            let x_4353 : vec3<f32> = (vec3<f32>(x_4348.x, x_4348.y, x_4348.z) * vec3<f32>(x_4351.y, x_4351.y, x_4351.y));
            let x_4354 : vec4<f32> = u_xlat15;
            u_xlat15 = vec4<f32>(x_4353.x, x_4353.y, x_4353.z, x_4354.w);
            let x_4357 : f32 = u_xlat15.x;
            u_xlat14.w = x_4357;
            let x_4359 : vec4<f32> = u_xlat12;
            let x_4362 : vec4<f32> = x_372.x_AdditionalShadowmapSize;
            let x_4365 : vec4<f32> = u_xlat14;
            u_xlat16 = ((vec4<f32>(x_4359.x, x_4359.y, x_4359.x, x_4359.y) * vec4<f32>(x_4362.x, x_4362.y, x_4362.x, x_4362.y)) + vec4<f32>(x_4365.y, x_4365.w, x_4365.x, x_4365.w));
            let x_4368 : vec4<f32> = u_xlat12;
            let x_4371 : vec4<f32> = x_372.x_AdditionalShadowmapSize;
            let x_4374 : vec4<f32> = u_xlat14;
            u_xlat64 = ((vec2<f32>(x_4368.x, x_4368.y) * vec2<f32>(x_4371.x, x_4371.y)) + vec2<f32>(x_4374.z, x_4374.w));
            let x_4378 : f32 = u_xlat14.y;
            u_xlat15.w = x_4378;
            let x_4380 : vec4<f32> = u_xlat15;
            let x_4381 : vec2<f32> = vec2<f32>(x_4380.y, x_4380.z);
            let x_4382 : vec4<f32> = u_xlat14;
            u_xlat14 = vec4<f32>(x_4382.x, x_4381.x, x_4382.z, x_4381.y);
            let x_4384 : vec4<f32> = u_xlat12;
            let x_4387 : vec4<f32> = x_372.x_AdditionalShadowmapSize;
            let x_4390 : vec4<f32> = u_xlat14;
            u_xlat17 = ((vec4<f32>(x_4384.x, x_4384.y, x_4384.x, x_4384.y) * vec4<f32>(x_4387.x, x_4387.y, x_4387.x, x_4387.y)) + vec4<f32>(x_4390.x, x_4390.y, x_4390.z, x_4390.y));
            let x_4393 : vec4<f32> = u_xlat12;
            let x_4396 : vec4<f32> = x_372.x_AdditionalShadowmapSize;
            let x_4399 : vec4<f32> = u_xlat15;
            u_xlat15 = ((vec4<f32>(x_4393.x, x_4393.y, x_4393.x, x_4393.y) * vec4<f32>(x_4396.x, x_4396.y, x_4396.x, x_4396.y)) + vec4<f32>(x_4399.w, x_4399.y, x_4399.w, x_4399.z));
            let x_4402 : vec4<f32> = u_xlat12;
            let x_4405 : vec4<f32> = x_372.x_AdditionalShadowmapSize;
            let x_4408 : vec4<f32> = u_xlat14;
            u_xlat14 = ((vec4<f32>(x_4402.x, x_4402.y, x_4402.x, x_4402.y) * vec4<f32>(x_4405.x, x_4405.y, x_4405.x, x_4405.y)) + vec4<f32>(x_4408.x, x_4408.w, x_4408.z, x_4408.w));
            let x_4411 : vec4<f32> = u_xlat13;
            let x_4413 : vec4<f32> = u_xlat18;
            u_xlat19 = (vec4<f32>(x_4411.x, x_4411.x, x_4411.x, x_4411.y) * vec4<f32>(x_4413.z, x_4413.w, x_4413.y, x_4413.z));
            let x_4416 : vec4<f32> = u_xlat13;
            let x_4418 : vec4<f32> = u_xlat18;
            u_xlat20 = (vec4<f32>(x_4416.y, x_4416.y, x_4416.z, x_4416.z) * x_4418);
            let x_4421 : f32 = u_xlat13.z;
            let x_4423 : f32 = u_xlat18.y;
            u_xlat86 = (x_4421 * x_4423);
            let x_4426 : vec4<f32> = u_xlat16;
            let x_4427 : vec2<f32> = vec2<f32>(x_4426.x, x_4426.y);
            let x_4429 : f32 = u_xlat11.z;
            txVec64 = vec3<f32>(x_4427.x, x_4427.y, x_4429);
            let x_4436 : vec3<f32> = txVec64;
            let x_4438 : f32 = textureSampleCompareLevel(x_AdditionalLightsShadowmapTexture, sampler_LinearClampCompare, x_4436.xy, x_4436.z);
            u_xlat87 = x_4438;
            let x_4440 : vec4<f32> = u_xlat16;
            let x_4441 : vec2<f32> = vec2<f32>(x_4440.z, x_4440.w);
            let x_4443 : f32 = u_xlat11.z;
            txVec65 = vec3<f32>(x_4441.x, x_4441.y, x_4443);
            let x_4451 : vec3<f32> = txVec65;
            let x_4453 : f32 = textureSampleCompareLevel(x_AdditionalLightsShadowmapTexture, sampler_LinearClampCompare, x_4451.xy, x_4451.z);
            u_xlat88 = x_4453;
            let x_4454 : f32 = u_xlat88;
            let x_4456 : f32 = u_xlat19.y;
            u_xlat88 = (x_4454 * x_4456);
            let x_4459 : f32 = u_xlat19.x;
            let x_4460 : f32 = u_xlat87;
            let x_4462 : f32 = u_xlat88;
            u_xlat87 = ((x_4459 * x_4460) + x_4462);
            let x_4465 : vec2<f32> = u_xlat64;
            let x_4467 : f32 = u_xlat11.z;
            txVec66 = vec3<f32>(x_4465.x, x_4465.y, x_4467);
            let x_4474 : vec3<f32> = txVec66;
            let x_4476 : f32 = textureSampleCompareLevel(x_AdditionalLightsShadowmapTexture, sampler_LinearClampCompare, x_4474.xy, x_4474.z);
            u_xlat88 = x_4476;
            let x_4478 : f32 = u_xlat19.z;
            let x_4479 : f32 = u_xlat88;
            let x_4481 : f32 = u_xlat87;
            u_xlat87 = ((x_4478 * x_4479) + x_4481);
            let x_4484 : vec4<f32> = u_xlat15;
            let x_4485 : vec2<f32> = vec2<f32>(x_4484.x, x_4484.y);
            let x_4487 : f32 = u_xlat11.z;
            txVec67 = vec3<f32>(x_4485.x, x_4485.y, x_4487);
            let x_4494 : vec3<f32> = txVec67;
            let x_4496 : f32 = textureSampleCompareLevel(x_AdditionalLightsShadowmapTexture, sampler_LinearClampCompare, x_4494.xy, x_4494.z);
            u_xlat88 = x_4496;
            let x_4498 : f32 = u_xlat19.w;
            let x_4499 : f32 = u_xlat88;
            let x_4501 : f32 = u_xlat87;
            u_xlat87 = ((x_4498 * x_4499) + x_4501);
            let x_4504 : vec4<f32> = u_xlat17;
            let x_4505 : vec2<f32> = vec2<f32>(x_4504.x, x_4504.y);
            let x_4507 : f32 = u_xlat11.z;
            txVec68 = vec3<f32>(x_4505.x, x_4505.y, x_4507);
            let x_4514 : vec3<f32> = txVec68;
            let x_4516 : f32 = textureSampleCompareLevel(x_AdditionalLightsShadowmapTexture, sampler_LinearClampCompare, x_4514.xy, x_4514.z);
            u_xlat88 = x_4516;
            let x_4518 : f32 = u_xlat20.x;
            let x_4519 : f32 = u_xlat88;
            let x_4521 : f32 = u_xlat87;
            u_xlat87 = ((x_4518 * x_4519) + x_4521);
            let x_4524 : vec4<f32> = u_xlat17;
            let x_4525 : vec2<f32> = vec2<f32>(x_4524.z, x_4524.w);
            let x_4527 : f32 = u_xlat11.z;
            txVec69 = vec3<f32>(x_4525.x, x_4525.y, x_4527);
            let x_4534 : vec3<f32> = txVec69;
            let x_4536 : f32 = textureSampleCompareLevel(x_AdditionalLightsShadowmapTexture, sampler_LinearClampCompare, x_4534.xy, x_4534.z);
            u_xlat88 = x_4536;
            let x_4538 : f32 = u_xlat20.y;
            let x_4539 : f32 = u_xlat88;
            let x_4541 : f32 = u_xlat87;
            u_xlat87 = ((x_4538 * x_4539) + x_4541);
            let x_4544 : vec4<f32> = u_xlat15;
            let x_4545 : vec2<f32> = vec2<f32>(x_4544.z, x_4544.w);
            let x_4547 : f32 = u_xlat11.z;
            txVec70 = vec3<f32>(x_4545.x, x_4545.y, x_4547);
            let x_4554 : vec3<f32> = txVec70;
            let x_4556 : f32 = textureSampleCompareLevel(x_AdditionalLightsShadowmapTexture, sampler_LinearClampCompare, x_4554.xy, x_4554.z);
            u_xlat88 = x_4556;
            let x_4558 : f32 = u_xlat20.z;
            let x_4559 : f32 = u_xlat88;
            let x_4561 : f32 = u_xlat87;
            u_xlat87 = ((x_4558 * x_4559) + x_4561);
            let x_4564 : vec4<f32> = u_xlat14;
            let x_4565 : vec2<f32> = vec2<f32>(x_4564.x, x_4564.y);
            let x_4567 : f32 = u_xlat11.z;
            txVec71 = vec3<f32>(x_4565.x, x_4565.y, x_4567);
            let x_4574 : vec3<f32> = txVec71;
            let x_4576 : f32 = textureSampleCompareLevel(x_AdditionalLightsShadowmapTexture, sampler_LinearClampCompare, x_4574.xy, x_4574.z);
            u_xlat88 = x_4576;
            let x_4578 : f32 = u_xlat20.w;
            let x_4579 : f32 = u_xlat88;
            let x_4581 : f32 = u_xlat87;
            u_xlat87 = ((x_4578 * x_4579) + x_4581);
            let x_4584 : vec4<f32> = u_xlat14;
            let x_4585 : vec2<f32> = vec2<f32>(x_4584.z, x_4584.w);
            let x_4587 : f32 = u_xlat11.z;
            txVec72 = vec3<f32>(x_4585.x, x_4585.y, x_4587);
            let x_4594 : vec3<f32> = txVec72;
            let x_4596 : f32 = textureSampleCompareLevel(x_AdditionalLightsShadowmapTexture, sampler_LinearClampCompare, x_4594.xy, x_4594.z);
            u_xlat88 = x_4596;
            let x_4597 : f32 = u_xlat86;
            let x_4598 : f32 = u_xlat88;
            let x_4600 : f32 = u_xlat87;
            u_xlat85 = ((x_4597 * x_4598) + x_4600);
          } else {
            let x_4603 : vec4<f32> = u_xlat11;
            let x_4606 : vec4<f32> = x_372.x_AdditionalShadowmapSize;
            let x_4609 : vec2<f32> = ((vec2<f32>(x_4603.x, x_4603.y) * vec2<f32>(x_4606.z, x_4606.w)) + vec2<f32>(0.5f, 0.5f));
            let x_4610 : vec4<f32> = u_xlat12;
            u_xlat12 = vec4<f32>(x_4609.x, x_4609.y, x_4610.z, x_4610.w);
            let x_4612 : vec4<f32> = u_xlat12;
            let x_4614 : vec2<f32> = floor(vec2<f32>(x_4612.x, x_4612.y));
            let x_4615 : vec4<f32> = u_xlat12;
            u_xlat12 = vec4<f32>(x_4614.x, x_4614.y, x_4615.z, x_4615.w);
            let x_4617 : vec4<f32> = u_xlat11;
            let x_4620 : vec4<f32> = x_372.x_AdditionalShadowmapSize;
            let x_4623 : vec4<f32> = u_xlat12;
            u_xlat64 = ((vec2<f32>(x_4617.x, x_4617.y) * vec2<f32>(x_4620.z, x_4620.w)) + -(vec2<f32>(x_4623.x, x_4623.y)));
            let x_4627 : vec2<f32> = u_xlat64;
            u_xlat13 = (vec4<f32>(x_4627.x, x_4627.x, x_4627.y, x_4627.y) + vec4<f32>(0.5f, 1.0f, 0.5f, 1.0f));
            let x_4630 : vec4<f32> = u_xlat13;
            let x_4632 : vec4<f32> = u_xlat13;
            u_xlat14 = (vec4<f32>(x_4630.x, x_4630.x, x_4630.z, x_4630.z) * vec4<f32>(x_4632.x, x_4632.x, x_4632.z, x_4632.z));
            let x_4635 : vec4<f32> = u_xlat14;
            let x_4637 : vec2<f32> = (vec2<f32>(x_4635.y, x_4635.w) * vec2<f32>(0.04081600159406661987f, 0.04081600159406661987f));
            let x_4638 : vec4<f32> = u_xlat15;
            u_xlat15 = vec4<f32>(x_4638.x, x_4637.x, x_4638.z, x_4637.y);
            let x_4640 : vec4<f32> = u_xlat14;
            let x_4643 : vec2<f32> = u_xlat64;
            let x_4645 : vec2<f32> = ((vec2<f32>(x_4640.x, x_4640.z) * vec2<f32>(0.5f, 0.5f)) + -(x_4643));
            let x_4646 : vec4<f32> = u_xlat13;
            u_xlat13 = vec4<f32>(x_4645.x, x_4646.y, x_4645.y, x_4646.w);
            let x_4648 : vec2<f32> = u_xlat64;
            let x_4650 : vec2<f32> = (-(x_4648) + vec2<f32>(1.0f, 1.0f));
            let x_4651 : vec4<f32> = u_xlat14;
            u_xlat14 = vec4<f32>(x_4650.x, x_4650.y, x_4651.z, x_4651.w);
            let x_4653 : vec2<f32> = u_xlat64;
            u_xlat66 = min(x_4653, vec2<f32>(0.0f, 0.0f));
            let x_4655 : vec2<f32> = u_xlat66;
            let x_4657 : vec2<f32> = u_xlat66;
            let x_4659 : vec4<f32> = u_xlat14;
            let x_4661 : vec2<f32> = ((-(x_4655) * x_4657) + vec2<f32>(x_4659.x, x_4659.y));
            let x_4662 : vec4<f32> = u_xlat14;
            u_xlat14 = vec4<f32>(x_4661.x, x_4661.y, x_4662.z, x_4662.w);
            let x_4664 : vec2<f32> = u_xlat64;
            u_xlat66 = max(x_4664, vec2<f32>(0.0f, 0.0f));
            let x_4667 : vec2<f32> = u_xlat66;
            let x_4669 : vec2<f32> = u_xlat66;
            let x_4671 : vec4<f32> = u_xlat13;
            let x_4673 : vec2<f32> = ((-(x_4667) * x_4669) + vec2<f32>(x_4671.y, x_4671.w));
            let x_4674 : vec3<f32> = u_xlat39;
            u_xlat39 = vec3<f32>(x_4673.x, x_4674.y, x_4673.y);
            let x_4676 : vec4<f32> = u_xlat14;
            let x_4678 : vec2<f32> = (vec2<f32>(x_4676.x, x_4676.y) + vec2<f32>(2.0f, 2.0f));
            let x_4679 : vec4<f32> = u_xlat14;
            u_xlat14 = vec4<f32>(x_4678.x, x_4678.y, x_4679.z, x_4679.w);
            let x_4681 : vec3<f32> = u_xlat39;
            let x_4683 : vec2<f32> = (vec2<f32>(x_4681.x, x_4681.z) + vec2<f32>(2.0f, 2.0f));
            let x_4684 : vec4<f32> = u_xlat13;
            u_xlat13 = vec4<f32>(x_4684.x, x_4683.x, x_4684.z, x_4683.y);
            let x_4687 : f32 = u_xlat13.y;
            u_xlat16.z = (x_4687 * 0.08163200318813323975f);
            let x_4690 : vec4<f32> = u_xlat13;
            let x_4692 : vec3<f32> = (vec3<f32>(x_4690.z, x_4690.x, x_4690.w) * vec3<f32>(0.08163200318813323975f, 0.08163200318813323975f, 0.08163200318813323975f));
            let x_4693 : vec4<f32> = u_xlat17;
            u_xlat17 = vec4<f32>(x_4692.x, x_4692.y, x_4692.z, x_4693.w);
            let x_4695 : vec4<f32> = u_xlat14;
            let x_4697 : vec2<f32> = (vec2<f32>(x_4695.x, x_4695.y) * vec2<f32>(0.08163200318813323975f, 0.08163200318813323975f));
            let x_4698 : vec4<f32> = u_xlat13;
            u_xlat13 = vec4<f32>(x_4697.x, x_4697.y, x_4698.z, x_4698.w);
            let x_4701 : f32 = u_xlat17.y;
            u_xlat16.x = x_4701;
            let x_4703 : vec2<f32> = u_xlat64;
            let x_4706 : vec2<f32> = ((vec2<f32>(x_4703.x, x_4703.x) * vec2<f32>(-0.08163200318813323975f, 0.08163200318813323975f)) + vec2<f32>(0.16326400637626647949f, 0.08163200318813323975f));
            let x_4707 : vec4<f32> = u_xlat16;
            u_xlat16 = vec4<f32>(x_4707.x, x_4706.x, x_4707.z, x_4706.y);
            let x_4709 : vec2<f32> = u_xlat64;
            let x_4712 : vec2<f32> = ((vec2<f32>(x_4709.x, x_4709.x) * vec2<f32>(-0.08163200318813323975f, 0.08163200318813323975f)) + vec2<f32>(0.08163200318813323975f, 0.16326400637626647949f));
            let x_4713 : vec4<f32> = u_xlat14;
            u_xlat14 = vec4<f32>(x_4712.x, x_4713.y, x_4712.y, x_4713.w);
            let x_4716 : f32 = u_xlat13.x;
            u_xlat14.y = x_4716;
            let x_4719 : f32 = u_xlat15.y;
            u_xlat14.w = x_4719;
            let x_4721 : vec4<f32> = u_xlat14;
            let x_4722 : vec4<f32> = u_xlat16;
            u_xlat16 = (x_4721 + x_4722);
            let x_4724 : vec2<f32> = u_xlat64;
            let x_4727 : vec2<f32> = ((vec2<f32>(x_4724.y, x_4724.y) * vec2<f32>(-0.08163200318813323975f, 0.08163200318813323975f)) + vec2<f32>(0.16326400637626647949f, 0.08163200318813323975f));
            let x_4728 : vec4<f32> = u_xlat17;
            u_xlat17 = vec4<f32>(x_4728.x, x_4727.x, x_4728.z, x_4727.y);
            let x_4730 : vec2<f32> = u_xlat64;
            let x_4733 : vec2<f32> = ((vec2<f32>(x_4730.y, x_4730.y) * vec2<f32>(-0.08163200318813323975f, 0.08163200318813323975f)) + vec2<f32>(0.08163200318813323975f, 0.16326400637626647949f));
            let x_4734 : vec4<f32> = u_xlat15;
            u_xlat15 = vec4<f32>(x_4733.x, x_4734.y, x_4733.y, x_4734.w);
            let x_4737 : f32 = u_xlat13.y;
            u_xlat15.y = x_4737;
            let x_4739 : vec4<f32> = u_xlat15;
            let x_4740 : vec4<f32> = u_xlat17;
            u_xlat13 = (x_4739 + x_4740);
            let x_4742 : vec4<f32> = u_xlat14;
            let x_4743 : vec4<f32> = u_xlat16;
            u_xlat14 = (x_4742 / x_4743);
            let x_4745 : vec4<f32> = u_xlat14;
            u_xlat14 = (x_4745 + vec4<f32>(-3.5f, -1.5f, 0.5f, 2.5f));
            let x_4747 : vec4<f32> = u_xlat15;
            let x_4748 : vec4<f32> = u_xlat13;
            u_xlat15 = (x_4747 / x_4748);
            let x_4750 : vec4<f32> = u_xlat15;
            u_xlat15 = (x_4750 + vec4<f32>(-3.5f, -1.5f, 0.5f, 2.5f));
            let x_4752 : vec4<f32> = u_xlat14;
            let x_4755 : vec4<f32> = x_372.x_AdditionalShadowmapSize;
            u_xlat14 = (vec4<f32>(x_4752.w, x_4752.x, x_4752.y, x_4752.z) * vec4<f32>(x_4755.x, x_4755.x, x_4755.x, x_4755.x));
            let x_4758 : vec4<f32> = u_xlat15;
            let x_4761 : vec4<f32> = x_372.x_AdditionalShadowmapSize;
            u_xlat15 = (vec4<f32>(x_4758.x, x_4758.w, x_4758.y, x_4758.z) * vec4<f32>(x_4761.y, x_4761.y, x_4761.y, x_4761.y));
            let x_4764 : vec4<f32> = u_xlat14;
            let x_4765 : vec3<f32> = vec3<f32>(x_4764.y, x_4764.z, x_4764.w);
            let x_4766 : vec4<f32> = u_xlat17;
            u_xlat17 = vec4<f32>(x_4765.x, x_4766.y, x_4765.y, x_4765.z);
            let x_4769 : f32 = u_xlat15.x;
            u_xlat17.y = x_4769;
            let x_4771 : vec4<f32> = u_xlat12;
            let x_4774 : vec4<f32> = x_372.x_AdditionalShadowmapSize;
            let x_4777 : vec4<f32> = u_xlat17;
            u_xlat18 = ((vec4<f32>(x_4771.x, x_4771.y, x_4771.x, x_4771.y) * vec4<f32>(x_4774.x, x_4774.y, x_4774.x, x_4774.y)) + vec4<f32>(x_4777.x, x_4777.y, x_4777.z, x_4777.y));
            let x_4780 : vec4<f32> = u_xlat12;
            let x_4783 : vec4<f32> = x_372.x_AdditionalShadowmapSize;
            let x_4786 : vec4<f32> = u_xlat17;
            u_xlat64 = ((vec2<f32>(x_4780.x, x_4780.y) * vec2<f32>(x_4783.x, x_4783.y)) + vec2<f32>(x_4786.w, x_4786.y));
            let x_4790 : f32 = u_xlat17.y;
            u_xlat14.y = x_4790;
            let x_4793 : f32 = u_xlat15.z;
            u_xlat17.y = x_4793;
            let x_4795 : vec4<f32> = u_xlat12;
            let x_4798 : vec4<f32> = x_372.x_AdditionalShadowmapSize;
            let x_4801 : vec4<f32> = u_xlat17;
            u_xlat19 = ((vec4<f32>(x_4795.x, x_4795.y, x_4795.x, x_4795.y) * vec4<f32>(x_4798.x, x_4798.y, x_4798.x, x_4798.y)) + vec4<f32>(x_4801.x, x_4801.y, x_4801.z, x_4801.y));
            let x_4804 : vec4<f32> = u_xlat12;
            let x_4807 : vec4<f32> = x_372.x_AdditionalShadowmapSize;
            let x_4810 : vec4<f32> = u_xlat17;
            let x_4812 : vec2<f32> = ((vec2<f32>(x_4804.x, x_4804.y) * vec2<f32>(x_4807.x, x_4807.y)) + vec2<f32>(x_4810.w, x_4810.y));
            let x_4813 : vec4<f32> = u_xlat20;
            u_xlat20 = vec4<f32>(x_4812.x, x_4812.y, x_4813.z, x_4813.w);
            let x_4816 : f32 = u_xlat17.y;
            u_xlat14.z = x_4816;
            let x_4818 : vec4<f32> = u_xlat12;
            let x_4821 : vec4<f32> = x_372.x_AdditionalShadowmapSize;
            let x_4824 : vec4<f32> = u_xlat14;
            u_xlat21 = ((vec4<f32>(x_4818.x, x_4818.y, x_4818.x, x_4818.y) * vec4<f32>(x_4821.x, x_4821.y, x_4821.x, x_4821.y)) + vec4<f32>(x_4824.x, x_4824.y, x_4824.x, x_4824.z));
            let x_4828 : f32 = u_xlat15.w;
            u_xlat17.y = x_4828;
            let x_4831 : vec4<f32> = u_xlat12;
            let x_4834 : vec4<f32> = x_372.x_AdditionalShadowmapSize;
            let x_4837 : vec4<f32> = u_xlat17;
            u_xlat22 = ((vec4<f32>(x_4831.x, x_4831.y, x_4831.x, x_4831.y) * vec4<f32>(x_4834.x, x_4834.y, x_4834.x, x_4834.y)) + vec4<f32>(x_4837.x, x_4837.y, x_4837.z, x_4837.y));
            let x_4841 : vec4<f32> = u_xlat12;
            let x_4844 : vec4<f32> = x_372.x_AdditionalShadowmapSize;
            let x_4847 : vec4<f32> = u_xlat17;
            u_xlat40 = ((vec2<f32>(x_4841.x, x_4841.y) * vec2<f32>(x_4844.x, x_4844.y)) + vec2<f32>(x_4847.w, x_4847.y));
            let x_4851 : f32 = u_xlat17.y;
            u_xlat14.w = x_4851;
            let x_4854 : vec4<f32> = u_xlat12;
            let x_4857 : vec4<f32> = x_372.x_AdditionalShadowmapSize;
            let x_4860 : vec4<f32> = u_xlat14;
            u_xlat72 = ((vec2<f32>(x_4854.x, x_4854.y) * vec2<f32>(x_4857.x, x_4857.y)) + vec2<f32>(x_4860.x, x_4860.w));
            let x_4863 : vec4<f32> = u_xlat17;
            let x_4864 : vec3<f32> = vec3<f32>(x_4863.x, x_4863.z, x_4863.w);
            let x_4865 : vec4<f32> = u_xlat15;
            u_xlat15 = vec4<f32>(x_4864.x, x_4865.y, x_4864.y, x_4864.z);
            let x_4867 : vec4<f32> = u_xlat12;
            let x_4870 : vec4<f32> = x_372.x_AdditionalShadowmapSize;
            let x_4873 : vec4<f32> = u_xlat15;
            u_xlat17 = ((vec4<f32>(x_4867.x, x_4867.y, x_4867.x, x_4867.y) * vec4<f32>(x_4870.x, x_4870.y, x_4870.x, x_4870.y)) + vec4<f32>(x_4873.x, x_4873.y, x_4873.z, x_4873.y));
            let x_4877 : vec4<f32> = u_xlat12;
            let x_4880 : vec4<f32> = x_372.x_AdditionalShadowmapSize;
            let x_4883 : vec4<f32> = u_xlat15;
            u_xlat67 = ((vec2<f32>(x_4877.x, x_4877.y) * vec2<f32>(x_4880.x, x_4880.y)) + vec2<f32>(x_4883.w, x_4883.y));
            let x_4887 : f32 = u_xlat14.x;
            u_xlat15.x = x_4887;
            let x_4889 : vec4<f32> = u_xlat12;
            let x_4892 : vec4<f32> = x_372.x_AdditionalShadowmapSize;
            let x_4895 : vec4<f32> = u_xlat15;
            let x_4897 : vec2<f32> = ((vec2<f32>(x_4889.x, x_4889.y) * vec2<f32>(x_4892.x, x_4892.y)) + vec2<f32>(x_4895.x, x_4895.y));
            let x_4898 : vec4<f32> = u_xlat12;
            u_xlat12 = vec4<f32>(x_4897.x, x_4897.y, x_4898.z, x_4898.w);
            let x_4901 : vec4<f32> = u_xlat13;
            let x_4903 : vec4<f32> = u_xlat16;
            u_xlat23 = (vec4<f32>(x_4901.x, x_4901.x, x_4901.x, x_4901.x) * x_4903);
            let x_4906 : vec4<f32> = u_xlat13;
            let x_4908 : vec4<f32> = u_xlat16;
            u_xlat24 = (vec4<f32>(x_4906.y, x_4906.y, x_4906.y, x_4906.y) * x_4908);
            let x_4911 : vec4<f32> = u_xlat13;
            let x_4913 : vec4<f32> = u_xlat16;
            u_xlat25 = (vec4<f32>(x_4911.z, x_4911.z, x_4911.z, x_4911.z) * x_4913);
            let x_4915 : vec4<f32> = u_xlat13;
            let x_4917 : vec4<f32> = u_xlat16;
            u_xlat13 = (vec4<f32>(x_4915.w, x_4915.w, x_4915.w, x_4915.w) * x_4917);
            let x_4920 : vec4<f32> = u_xlat18;
            let x_4921 : vec2<f32> = vec2<f32>(x_4920.x, x_4920.y);
            let x_4923 : f32 = u_xlat11.z;
            txVec73 = vec3<f32>(x_4921.x, x_4921.y, x_4923);
            let x_4930 : vec3<f32> = txVec73;
            let x_4932 : f32 = textureSampleCompareLevel(x_AdditionalLightsShadowmapTexture, sampler_LinearClampCompare, x_4930.xy, x_4930.z);
            u_xlat86 = x_4932;
            let x_4934 : vec4<f32> = u_xlat18;
            let x_4935 : vec2<f32> = vec2<f32>(x_4934.z, x_4934.w);
            let x_4937 : f32 = u_xlat11.z;
            txVec74 = vec3<f32>(x_4935.x, x_4935.y, x_4937);
            let x_4944 : vec3<f32> = txVec74;
            let x_4946 : f32 = textureSampleCompareLevel(x_AdditionalLightsShadowmapTexture, sampler_LinearClampCompare, x_4944.xy, x_4944.z);
            u_xlat87 = x_4946;
            let x_4947 : f32 = u_xlat87;
            let x_4949 : f32 = u_xlat23.y;
            u_xlat87 = (x_4947 * x_4949);
            let x_4952 : f32 = u_xlat23.x;
            let x_4953 : f32 = u_xlat86;
            let x_4955 : f32 = u_xlat87;
            u_xlat86 = ((x_4952 * x_4953) + x_4955);
            let x_4958 : vec2<f32> = u_xlat64;
            let x_4960 : f32 = u_xlat11.z;
            txVec75 = vec3<f32>(x_4958.x, x_4958.y, x_4960);
            let x_4967 : vec3<f32> = txVec75;
            let x_4969 : f32 = textureSampleCompareLevel(x_AdditionalLightsShadowmapTexture, sampler_LinearClampCompare, x_4967.xy, x_4967.z);
            u_xlat87 = x_4969;
            let x_4971 : f32 = u_xlat23.z;
            let x_4972 : f32 = u_xlat87;
            let x_4974 : f32 = u_xlat86;
            u_xlat86 = ((x_4971 * x_4972) + x_4974);
            let x_4977 : vec4<f32> = u_xlat21;
            let x_4978 : vec2<f32> = vec2<f32>(x_4977.x, x_4977.y);
            let x_4980 : f32 = u_xlat11.z;
            txVec76 = vec3<f32>(x_4978.x, x_4978.y, x_4980);
            let x_4987 : vec3<f32> = txVec76;
            let x_4989 : f32 = textureSampleCompareLevel(x_AdditionalLightsShadowmapTexture, sampler_LinearClampCompare, x_4987.xy, x_4987.z);
            u_xlat87 = x_4989;
            let x_4991 : f32 = u_xlat23.w;
            let x_4992 : f32 = u_xlat87;
            let x_4994 : f32 = u_xlat86;
            u_xlat86 = ((x_4991 * x_4992) + x_4994);
            let x_4997 : vec4<f32> = u_xlat19;
            let x_4998 : vec2<f32> = vec2<f32>(x_4997.x, x_4997.y);
            let x_5000 : f32 = u_xlat11.z;
            txVec77 = vec3<f32>(x_4998.x, x_4998.y, x_5000);
            let x_5007 : vec3<f32> = txVec77;
            let x_5009 : f32 = textureSampleCompareLevel(x_AdditionalLightsShadowmapTexture, sampler_LinearClampCompare, x_5007.xy, x_5007.z);
            u_xlat87 = x_5009;
            let x_5011 : f32 = u_xlat24.x;
            let x_5012 : f32 = u_xlat87;
            let x_5014 : f32 = u_xlat86;
            u_xlat86 = ((x_5011 * x_5012) + x_5014);
            let x_5017 : vec4<f32> = u_xlat19;
            let x_5018 : vec2<f32> = vec2<f32>(x_5017.z, x_5017.w);
            let x_5020 : f32 = u_xlat11.z;
            txVec78 = vec3<f32>(x_5018.x, x_5018.y, x_5020);
            let x_5027 : vec3<f32> = txVec78;
            let x_5029 : f32 = textureSampleCompareLevel(x_AdditionalLightsShadowmapTexture, sampler_LinearClampCompare, x_5027.xy, x_5027.z);
            u_xlat87 = x_5029;
            let x_5031 : f32 = u_xlat24.y;
            let x_5032 : f32 = u_xlat87;
            let x_5034 : f32 = u_xlat86;
            u_xlat86 = ((x_5031 * x_5032) + x_5034);
            let x_5037 : vec4<f32> = u_xlat20;
            let x_5038 : vec2<f32> = vec2<f32>(x_5037.x, x_5037.y);
            let x_5040 : f32 = u_xlat11.z;
            txVec79 = vec3<f32>(x_5038.x, x_5038.y, x_5040);
            let x_5047 : vec3<f32> = txVec79;
            let x_5049 : f32 = textureSampleCompareLevel(x_AdditionalLightsShadowmapTexture, sampler_LinearClampCompare, x_5047.xy, x_5047.z);
            u_xlat87 = x_5049;
            let x_5051 : f32 = u_xlat24.z;
            let x_5052 : f32 = u_xlat87;
            let x_5054 : f32 = u_xlat86;
            u_xlat86 = ((x_5051 * x_5052) + x_5054);
            let x_5057 : vec4<f32> = u_xlat21;
            let x_5058 : vec2<f32> = vec2<f32>(x_5057.z, x_5057.w);
            let x_5060 : f32 = u_xlat11.z;
            txVec80 = vec3<f32>(x_5058.x, x_5058.y, x_5060);
            let x_5067 : vec3<f32> = txVec80;
            let x_5069 : f32 = textureSampleCompareLevel(x_AdditionalLightsShadowmapTexture, sampler_LinearClampCompare, x_5067.xy, x_5067.z);
            u_xlat87 = x_5069;
            let x_5071 : f32 = u_xlat24.w;
            let x_5072 : f32 = u_xlat87;
            let x_5074 : f32 = u_xlat86;
            u_xlat86 = ((x_5071 * x_5072) + x_5074);
            let x_5077 : vec4<f32> = u_xlat22;
            let x_5078 : vec2<f32> = vec2<f32>(x_5077.x, x_5077.y);
            let x_5080 : f32 = u_xlat11.z;
            txVec81 = vec3<f32>(x_5078.x, x_5078.y, x_5080);
            let x_5087 : vec3<f32> = txVec81;
            let x_5089 : f32 = textureSampleCompareLevel(x_AdditionalLightsShadowmapTexture, sampler_LinearClampCompare, x_5087.xy, x_5087.z);
            u_xlat87 = x_5089;
            let x_5091 : f32 = u_xlat25.x;
            let x_5092 : f32 = u_xlat87;
            let x_5094 : f32 = u_xlat86;
            u_xlat86 = ((x_5091 * x_5092) + x_5094);
            let x_5097 : vec4<f32> = u_xlat22;
            let x_5098 : vec2<f32> = vec2<f32>(x_5097.z, x_5097.w);
            let x_5100 : f32 = u_xlat11.z;
            txVec82 = vec3<f32>(x_5098.x, x_5098.y, x_5100);
            let x_5107 : vec3<f32> = txVec82;
            let x_5109 : f32 = textureSampleCompareLevel(x_AdditionalLightsShadowmapTexture, sampler_LinearClampCompare, x_5107.xy, x_5107.z);
            u_xlat87 = x_5109;
            let x_5111 : f32 = u_xlat25.y;
            let x_5112 : f32 = u_xlat87;
            let x_5114 : f32 = u_xlat86;
            u_xlat86 = ((x_5111 * x_5112) + x_5114);
            let x_5117 : vec2<f32> = u_xlat40;
            let x_5119 : f32 = u_xlat11.z;
            txVec83 = vec3<f32>(x_5117.x, x_5117.y, x_5119);
            let x_5126 : vec3<f32> = txVec83;
            let x_5128 : f32 = textureSampleCompareLevel(x_AdditionalLightsShadowmapTexture, sampler_LinearClampCompare, x_5126.xy, x_5126.z);
            u_xlat87 = x_5128;
            let x_5130 : f32 = u_xlat25.z;
            let x_5131 : f32 = u_xlat87;
            let x_5133 : f32 = u_xlat86;
            u_xlat86 = ((x_5130 * x_5131) + x_5133);
            let x_5136 : vec2<f32> = u_xlat72;
            let x_5138 : f32 = u_xlat11.z;
            txVec84 = vec3<f32>(x_5136.x, x_5136.y, x_5138);
            let x_5145 : vec3<f32> = txVec84;
            let x_5147 : f32 = textureSampleCompareLevel(x_AdditionalLightsShadowmapTexture, sampler_LinearClampCompare, x_5145.xy, x_5145.z);
            u_xlat87 = x_5147;
            let x_5149 : f32 = u_xlat25.w;
            let x_5150 : f32 = u_xlat87;
            let x_5152 : f32 = u_xlat86;
            u_xlat86 = ((x_5149 * x_5150) + x_5152);
            let x_5155 : vec4<f32> = u_xlat17;
            let x_5156 : vec2<f32> = vec2<f32>(x_5155.x, x_5155.y);
            let x_5158 : f32 = u_xlat11.z;
            txVec85 = vec3<f32>(x_5156.x, x_5156.y, x_5158);
            let x_5165 : vec3<f32> = txVec85;
            let x_5167 : f32 = textureSampleCompareLevel(x_AdditionalLightsShadowmapTexture, sampler_LinearClampCompare, x_5165.xy, x_5165.z);
            u_xlat87 = x_5167;
            let x_5169 : f32 = u_xlat13.x;
            let x_5170 : f32 = u_xlat87;
            let x_5172 : f32 = u_xlat86;
            u_xlat86 = ((x_5169 * x_5170) + x_5172);
            let x_5175 : vec4<f32> = u_xlat17;
            let x_5176 : vec2<f32> = vec2<f32>(x_5175.z, x_5175.w);
            let x_5178 : f32 = u_xlat11.z;
            txVec86 = vec3<f32>(x_5176.x, x_5176.y, x_5178);
            let x_5185 : vec3<f32> = txVec86;
            let x_5187 : f32 = textureSampleCompareLevel(x_AdditionalLightsShadowmapTexture, sampler_LinearClampCompare, x_5185.xy, x_5185.z);
            u_xlat87 = x_5187;
            let x_5189 : f32 = u_xlat13.y;
            let x_5190 : f32 = u_xlat87;
            let x_5192 : f32 = u_xlat86;
            u_xlat86 = ((x_5189 * x_5190) + x_5192);
            let x_5195 : vec2<f32> = u_xlat67;
            let x_5197 : f32 = u_xlat11.z;
            txVec87 = vec3<f32>(x_5195.x, x_5195.y, x_5197);
            let x_5204 : vec3<f32> = txVec87;
            let x_5206 : f32 = textureSampleCompareLevel(x_AdditionalLightsShadowmapTexture, sampler_LinearClampCompare, x_5204.xy, x_5204.z);
            u_xlat87 = x_5206;
            let x_5208 : f32 = u_xlat13.z;
            let x_5209 : f32 = u_xlat87;
            let x_5211 : f32 = u_xlat86;
            u_xlat86 = ((x_5208 * x_5209) + x_5211);
            let x_5214 : vec4<f32> = u_xlat12;
            let x_5215 : vec2<f32> = vec2<f32>(x_5214.x, x_5214.y);
            let x_5217 : f32 = u_xlat11.z;
            txVec88 = vec3<f32>(x_5215.x, x_5215.y, x_5217);
            let x_5224 : vec3<f32> = txVec88;
            let x_5226 : f32 = textureSampleCompareLevel(x_AdditionalLightsShadowmapTexture, sampler_LinearClampCompare, x_5224.xy, x_5224.z);
            u_xlat87 = x_5226;
            let x_5228 : f32 = u_xlat13.w;
            let x_5229 : f32 = u_xlat87;
            let x_5231 : f32 = u_xlat86;
            u_xlat85 = ((x_5228 * x_5229) + x_5231);
          }
        }
      } else {
        let x_5235 : vec4<f32> = u_xlat11;
        let x_5236 : vec2<f32> = vec2<f32>(x_5235.x, x_5235.y);
        let x_5238 : f32 = u_xlat11.z;
        txVec89 = vec3<f32>(x_5236.x, x_5236.y, x_5238);
        let x_5245 : vec3<f32> = txVec89;
        let x_5247 : f32 = textureSampleCompareLevel(x_AdditionalLightsShadowmapTexture, sampler_LinearClampCompare, x_5245.xy, x_5245.z);
        u_xlat85 = x_5247;
      }
      let x_5248 : i32 = u_xlati3;
      let x_5250 : f32 = x_372.x_AdditionalShadowParams[x_5248].x;
      u_xlat86 = (1.0f + -(x_5250));
      let x_5253 : f32 = u_xlat85;
      let x_5254 : i32 = u_xlati3;
      let x_5256 : f32 = x_372.x_AdditionalShadowParams[x_5254].x;
      let x_5258 : f32 = u_xlat86;
      u_xlat85 = ((x_5253 * x_5256) + x_5258);
      let x_5261 : f32 = u_xlat11.z;
      u_xlatb86 = (0.0f >= x_5261);
      let x_5265 : f32 = u_xlat11.z;
      u_xlatb87 = (x_5265 >= 1.0f);
      let x_5267 : bool = u_xlatb86;
      let x_5268 : bool = u_xlatb87;
      u_xlatb86 = (x_5267 | x_5268);
      let x_5270 : bool = u_xlatb86;
      let x_5271 : f32 = u_xlat85;
      u_xlat85 = select(x_5271, 1.0f, x_5270);
    } else {
      u_xlat85 = 1.0f;
    }
    let x_5274 : f32 = u_xlat85;
    u_xlat86 = (-(x_5274) + 1.0f);
    let x_5277 : f32 = u_xlat78;
    let x_5278 : f32 = u_xlat86;
    let x_5280 : f32 = u_xlat85;
    u_xlat85 = ((x_5277 * x_5278) + x_5280);
    let x_5282 : f32 = u_xlat81;
    let x_5283 : f32 = u_xlat85;
    u_xlat81 = (x_5282 * x_5283);
    let x_5285 : vec4<f32> = u_xlat5;
    let x_5287 : vec4<f32> = u_xlat10;
    u_xlat85 = dot(vec3<f32>(x_5285.x, x_5285.y, x_5285.z), vec3<f32>(x_5287.x, x_5287.y, x_5287.z));
    let x_5290 : f32 = u_xlat85;
    u_xlat85 = clamp(x_5290, 0.0f, 1.0f);
    let x_5292 : f32 = u_xlat81;
    let x_5293 : f32 = u_xlat85;
    u_xlat81 = (x_5292 * x_5293);
    let x_5295 : f32 = u_xlat81;
    let x_5297 : i32 = u_xlati3;
    let x_5299 : vec4<f32> = x_3864.x_AdditionalLightsColor[x_5297];
    let x_5301 : vec3<f32> = (vec3<f32>(x_5295, x_5295, x_5295) * vec3<f32>(x_5299.x, x_5299.y, x_5299.z));
    let x_5302 : vec4<f32> = u_xlat11;
    u_xlat11 = vec4<f32>(x_5301.x, x_5301.y, x_5301.z, x_5302.w);
    let x_5304 : vec4<f32> = u_xlat9;
    let x_5306 : f32 = u_xlat84;
    let x_5309 : vec3<f32> = u_xlat4;
    let x_5310 : vec3<f32> = ((vec3<f32>(x_5304.x, x_5304.y, x_5304.z) * vec3<f32>(x_5306, x_5306, x_5306)) + x_5309);
    let x_5311 : vec4<f32> = u_xlat9;
    u_xlat9 = vec4<f32>(x_5310.x, x_5310.y, x_5310.z, x_5311.w);
    let x_5313 : vec4<f32> = u_xlat9;
    let x_5315 : vec4<f32> = u_xlat9;
    u_xlat3.x = dot(vec3<f32>(x_5313.x, x_5313.y, x_5313.z), vec3<f32>(x_5315.x, x_5315.y, x_5315.z));
    let x_5320 : f32 = u_xlat3.x;
    u_xlat3.x = max(x_5320, 1.17549435e-38f);
    let x_5324 : f32 = u_xlat3.x;
    u_xlat3.x = inverseSqrt(x_5324);
    let x_5327 : vec4<f32> = u_xlat3;
    let x_5329 : vec4<f32> = u_xlat9;
    let x_5331 : vec3<f32> = (vec3<f32>(x_5327.x, x_5327.x, x_5327.x) * vec3<f32>(x_5329.x, x_5329.y, x_5329.z));
    let x_5332 : vec4<f32> = u_xlat9;
    u_xlat9 = vec4<f32>(x_5331.x, x_5331.y, x_5331.z, x_5332.w);
    let x_5334 : vec4<f32> = u_xlat5;
    let x_5336 : vec4<f32> = u_xlat9;
    u_xlat3.x = dot(vec3<f32>(x_5334.x, x_5334.y, x_5334.z), vec3<f32>(x_5336.x, x_5336.y, x_5336.z));
    let x_5341 : f32 = u_xlat3.x;
    u_xlat3.x = clamp(x_5341, 0.0f, 1.0f);
    let x_5344 : vec4<f32> = u_xlat10;
    let x_5346 : vec4<f32> = u_xlat9;
    u_xlat3.w = dot(vec3<f32>(x_5344.x, x_5344.y, x_5344.z), vec3<f32>(x_5346.x, x_5346.y, x_5346.z));
    let x_5351 : f32 = u_xlat3.w;
    u_xlat3.w = clamp(x_5351, 0.0f, 1.0f);
    let x_5354 : vec4<f32> = u_xlat3;
    let x_5356 : vec4<f32> = u_xlat3;
    let x_5358 : vec2<f32> = (vec2<f32>(x_5354.x, x_5354.w) * vec2<f32>(x_5356.x, x_5356.w));
    let x_5359 : vec4<f32> = u_xlat3;
    u_xlat3 = vec4<f32>(x_5358.x, x_5359.y, x_5359.z, x_5358.y);
    let x_5362 : f32 = u_xlat3.x;
    let x_5364 : f32 = u_xlat52.x;
    u_xlat3.x = ((x_5362 * x_5364) + 1.00001001358032226562f);
    let x_5369 : f32 = u_xlat3.x;
    let x_5371 : f32 = u_xlat3.x;
    u_xlat3.x = (x_5369 * x_5371);
    let x_5375 : f32 = u_xlat3.w;
    u_xlat81 = max(x_5375, 0.10000000149011611938f);
    let x_5377 : f32 = u_xlat81;
    let x_5379 : f32 = u_xlat3.x;
    u_xlat3.x = (x_5377 * x_5379);
    let x_5382 : f32 = u_xlat82;
    let x_5384 : f32 = u_xlat3.x;
    u_xlat3.x = (x_5382 * x_5384);
    let x_5388 : f32 = u_xlat55.x;
    let x_5390 : f32 = u_xlat3.x;
    u_xlat3.x = (x_5388 / x_5390);
    let x_5393 : vec4<f32> = u_xlat3;
    let x_5396 : vec3<f32> = u_xlat7;
    let x_5397 : vec3<f32> = ((vec3<f32>(x_5393.x, x_5393.x, x_5393.x) * vec3<f32>(0.03999999910593032837f, 0.03999999910593032837f, 0.03999999910593032837f)) + x_5396);
    let x_5398 : vec4<f32> = u_xlat9;
    u_xlat9 = vec4<f32>(x_5397.x, x_5397.y, x_5397.z, x_5398.w);
    let x_5400 : vec4<f32> = u_xlat9;
    let x_5402 : vec4<f32> = u_xlat11;
    let x_5405 : vec4<f32> = u_xlat8;
    let x_5407 : vec3<f32> = ((vec3<f32>(x_5400.x, x_5400.y, x_5400.z) * vec3<f32>(x_5402.x, x_5402.y, x_5402.z)) + vec3<f32>(x_5405.x, x_5405.y, x_5405.z));
    let x_5408 : vec4<f32> = u_xlat8;
    u_xlat8 = vec4<f32>(x_5407.x, x_5407.y, x_5407.z, x_5408.w);

    continuing {
      let x_5410 : u32 = u_xlatu_loop_1;
      u_xlatu_loop_1 = (x_5410 + bitcast<u32>(1i));
    }
  }
  let x_5412 : vec3<f32> = u_xlat28;
  let x_5413 : f32 = u_xlat83;
  let x_5416 : vec4<f32> = u_xlat6;
  let x_5418 : vec3<f32> = ((x_5412 * vec3<f32>(x_5413, x_5413, x_5413)) + vec3<f32>(x_5416.x, x_5416.y, x_5416.z));
  let x_5419 : vec4<f32> = u_xlat0;
  u_xlat0 = vec4<f32>(x_5418.x, x_5419.y, x_5418.y, x_5418.z);
  let x_5421 : vec4<f32> = u_xlat8;
  let x_5423 : vec4<f32> = u_xlat0;
  let x_5425 : vec3<f32> = (vec3<f32>(x_5421.x, x_5421.y, x_5421.z) + vec3<f32>(x_5423.x, x_5423.z, x_5423.w));
  let x_5426 : vec4<f32> = u_xlat0;
  u_xlat0 = vec4<f32>(x_5425.x, x_5426.y, x_5425.y, x_5425.z);
  let x_5428 : vec4<f32> = vs_INTERP6;
  let x_5430 : vec3<f32> = u_xlat1;
  let x_5432 : vec4<f32> = u_xlat0;
  let x_5434 : vec3<f32> = ((vec3<f32>(x_5428.w, x_5428.w, x_5428.w) * x_5430) + vec3<f32>(x_5432.x, x_5432.z, x_5432.w));
  let x_5435 : vec4<f32> = u_xlat0;
  u_xlat0 = vec4<f32>(x_5434.x, x_5435.y, x_5434.y, x_5434.z);
  let x_5438 : f32 = u_xlat26.x;
  let x_5440 : f32 = u_xlat26.x;
  u_xlat26.x = (x_5438 * -(x_5440));
  let x_5445 : f32 = u_xlat26.x;
  u_xlat26.x = exp2(x_5445);
  let x_5448 : vec4<f32> = u_xlat0;
  let x_5451 : vec4<f32> = x_149.unity_FogColor;
  let x_5454 : vec3<f32> = (vec3<f32>(x_5448.x, x_5448.z, x_5448.w) + -(vec3<f32>(x_5451.x, x_5451.y, x_5451.z)));
  let x_5455 : vec4<f32> = u_xlat0;
  u_xlat0 = vec4<f32>(x_5454.x, x_5455.y, x_5454.y, x_5454.z);
  let x_5459 : vec3<f32> = u_xlat26;
  let x_5461 : vec4<f32> = u_xlat0;
  let x_5465 : vec4<f32> = x_149.unity_FogColor;
  let x_5467 : vec3<f32> = ((vec3<f32>(x_5459.x, x_5459.x, x_5459.x) * vec3<f32>(x_5461.x, x_5461.z, x_5461.w)) + vec3<f32>(x_5465.x, x_5465.y, x_5465.z));
  let x_5468 : vec4<f32> = SV_Target0;
  SV_Target0 = vec4<f32>(x_5467.x, x_5467.y, x_5467.z, x_5468.w);
  let x_5470 : bool = u_xlatb29;
  let x_5471 : f32 = u_xlat79;
  SV_Target0.w = select(1.0f, x_5471, x_5470);
  return;
}

struct main_out {
  @location(0)
  SV_Target0_1 : vec4<f32>,
}

@fragment
fn main(@location(4) vs_INTERP9_param : vec3<f32>, @location(0) vs_INTERP4_param : vec4<f32>, @location(3) vs_INTERP8_param : vec3<f32>, @location(1) vs_INTERP5_param : vec4<f32>, @location(2) vs_INTERP6_param : vec4<f32>, @builtin(position) gl_FragCoord_param : vec4<f32>) -> main_out {
  vs_INTERP9 = vs_INTERP9_param;
  vs_INTERP4 = vs_INTERP4_param;
  vs_INTERP8 = vs_INTERP8_param;
  vs_INTERP5 = vs_INTERP5_param;
  vs_INTERP6 = vs_INTERP6_param;
  gl_FragCoord = gl_FragCoord_param;
  main_1();
  return main_out(SV_Target0);
}


