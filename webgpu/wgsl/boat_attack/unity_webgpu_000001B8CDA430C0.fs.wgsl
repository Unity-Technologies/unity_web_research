struct PGlobals {
  x_ScreenParams : vec4<f32>,
  x_FsrEasuConstants0 : vec4<f32>,
  x_FsrEasuConstants1 : vec4<f32>,
  x_FsrEasuConstants2 : vec4<f32>,
  x_FsrEasuConstants3 : vec4<f32>,
}

var<private> vs_TEXCOORD0 : vec2<f32>;

@group(1) @binding(0) var<uniform> x_17 : PGlobals;

@group(0) @binding(0) var x_BlitTexture : texture_2d<f32>;

@group(0) @binding(1) var sampler_LinearClamp : sampler;

var<private> SV_Target0 : vec4<f32>;

var<private> gl_FragCoord : vec4<f32>;

fn main_1() {
  var u_xlat0 : vec3<f32>;
  var u_xlatu0 : vec2<u32>;
  var u_xlat38 : vec2<f32>;
  var u_xlat1 : vec4<f32>;
  var u_xlat2 : vec3<f32>;
  var u_xlat3 : vec4<f32>;
  var u_xlat4 : vec4<f32>;
  var u_xlat5 : vec4<f32>;
  var u_xlat6 : vec4<f32>;
  var u_xlat7 : vec4<f32>;
  var u_xlat8 : vec4<f32>;
  var u_xlat20 : vec2<f32>;
  var u_xlat9 : vec4<f32>;
  var u_xlat10 : vec4<f32>;
  var u_xlat11 : vec4<f32>;
  var u_xlat12 : vec4<f32>;
  var u_xlat13 : vec3<f32>;
  var u_xlat14 : vec4<f32>;
  var u_xlat59 : f32;
  var u_xlat15 : vec4<f32>;
  var u_xlat60 : f32;
  var u_xlat27 : vec2<f32>;
  var u_xlat31 : vec3<f32>;
  var u_xlat16 : vec4<f32>;
  var u_xlat17 : vec4<f32>;
  var u_xlat18 : vec3<f32>;
  var u_xlat57 : f32;
  var u_xlatu1 : u32;
  var u_xlatb57 : bool;
  var x_737 : f32;
  var x_746 : f32;
  var u_xlat39 : vec2<f32>;
  var u_xlat58 : f32;
  var u_xlat19 : vec3<f32>;
  var u_xlat_precise_vec4 : vec4<f32>;
  var u_xlat_precise_ivec4 : vec4<i32>;
  var u_xlat_precise_bvec4 : vec4<bool>;
  var u_xlat_precise_uvec4 : vec4<u32>;
  let x_13 : vec2<f32> = vs_TEXCOORD0;
  let x_22 : vec4<f32> = x_17.x_ScreenParams;
  let x_24 : vec2<f32> = (x_13 * vec2<f32>(x_22.x, x_22.y));
  let x_25 : vec3<f32> = u_xlat0;
  u_xlat0 = vec3<f32>(x_24.x, x_24.y, x_25.z);
  let x_31 : vec3<f32> = u_xlat0;
  u_xlatu0 = vec2<u32>(vec2<f32>(x_31.x, x_31.y));
  let x_34 : vec2<u32> = u_xlatu0;
  let x_35 : vec2<f32> = vec2<f32>(x_34);
  let x_36 : vec3<f32> = u_xlat0;
  u_xlat0 = vec3<f32>(x_35.x, x_35.y, x_36.z);
  let x_38 : vec3<f32> = u_xlat0;
  let x_42 : vec4<f32> = x_17.x_FsrEasuConstants0;
  let x_46 : vec4<f32> = x_17.x_FsrEasuConstants0;
  let x_48 : vec2<f32> = ((vec2<f32>(x_38.x, x_38.y) * vec2<f32>(x_42.x, x_42.y)) + vec2<f32>(x_46.z, x_46.w));
  let x_49 : vec3<f32> = u_xlat0;
  u_xlat0 = vec3<f32>(x_48.x, x_48.y, x_49.z);
  let x_53 : vec3<f32> = u_xlat0;
  u_xlat38 = floor(vec2<f32>(x_53.x, x_53.y));
  let x_56 : vec2<f32> = u_xlat38;
  let x_58 : vec3<f32> = u_xlat0;
  let x_60 : vec2<f32> = (-(x_56) + vec2<f32>(x_58.x, x_58.y));
  let x_61 : vec3<f32> = u_xlat0;
  u_xlat0 = vec3<f32>(x_60.x, x_60.y, x_61.z);
  let x_63 : vec2<f32> = u_xlat38;
  let x_66 : vec4<f32> = x_17.x_FsrEasuConstants1;
  let x_70 : vec4<f32> = x_17.x_FsrEasuConstants1;
  u_xlat38 = ((x_63 * vec2<f32>(x_66.x, x_66.y)) + vec2<f32>(x_70.z, x_70.w));
  let x_85 : vec2<f32> = u_xlat38;
  let x_86 : vec4<f32> = textureGather(0i, x_BlitTexture, sampler_LinearClamp, x_85);
  let x_87 : vec2<f32> = vec2<f32>(x_86.x, x_86.y);
  let x_88 : vec4<f32> = u_xlat1;
  u_xlat1 = vec4<f32>(x_87.x, x_87.y, x_88.z, x_88.w);
  let x_94 : f32 = u_xlat1.y;
  u_xlat2.x = x_94;
  let x_101 : vec2<f32> = u_xlat38;
  let x_102 : vec4<f32> = textureGather(1i, x_BlitTexture, sampler_LinearClamp, x_101);
  let x_103 : vec2<f32> = vec2<f32>(x_102.y, x_102.x);
  let x_104 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_103.x, x_103.y, x_104.z, x_104.w);
  let x_107 : f32 = u_xlat3.x;
  u_xlat2.y = x_107;
  let x_112 : vec2<f32> = u_xlat38;
  let x_113 : vec4<f32> = textureGather(2i, x_BlitTexture, sampler_LinearClamp, x_112);
  let x_114 : vec2<f32> = vec2<f32>(x_113.x, x_113.y);
  let x_115 : vec4<f32> = u_xlat1;
  u_xlat1 = vec4<f32>(x_115.x, x_115.y, x_114.x, x_114.y);
  let x_119 : f32 = u_xlat1.w;
  u_xlat2.z = x_119;
  let x_123 : vec4<f32> = u_xlat1;
  let x_128 : vec4<f32> = u_xlat3;
  let x_130 : vec2<f32> = ((vec2<f32>(x_123.x, x_123.y) * vec2<f32>(0.5f, 0.5f)) + vec2<f32>(x_128.y, x_128.x));
  let x_131 : vec4<f32> = u_xlat4;
  u_xlat4 = vec4<f32>(x_130.x, x_130.y, x_131.z, x_131.w);
  let x_133 : vec4<f32> = u_xlat1;
  let x_134 : vec2<f32> = vec2<f32>(x_133.x, x_133.z);
  let x_135 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_134.x, x_135.y, x_134.y, x_135.w);
  let x_137 : vec4<f32> = u_xlat1;
  let x_140 : vec4<f32> = u_xlat4;
  let x_142 : vec2<f32> = ((vec2<f32>(x_137.z, x_137.w) * vec2<f32>(0.5f, 0.5f)) + vec2<f32>(x_140.x, x_140.y));
  let x_143 : vec4<f32> = u_xlat1;
  u_xlat1 = vec4<f32>(x_142.x, x_142.y, x_143.z, x_143.w);
  let x_145 : vec2<f32> = u_xlat38;
  let x_149 : vec4<f32> = x_17.x_FsrEasuConstants2;
  u_xlat4 = (vec4<f32>(x_145.x, x_145.y, x_145.x, x_145.y) + x_149);
  let x_151 : vec2<f32> = u_xlat38;
  let x_154 : vec4<f32> = x_17.x_FsrEasuConstants3;
  u_xlat38 = (x_151 + vec2<f32>(x_154.x, x_154.y));
  let x_161 : vec4<f32> = u_xlat4;
  let x_163 : vec4<f32> = textureGather(2i, x_BlitTexture, sampler_LinearClamp, vec2<f32>(x_161.z, x_161.w));
  u_xlat5 = vec4<f32>(x_163.x, x_163.y, x_163.w, x_163.z);
  let x_169 : vec4<f32> = u_xlat4;
  let x_171 : vec4<f32> = textureGather(0i, x_BlitTexture, sampler_LinearClamp, vec2<f32>(x_169.z, x_169.w));
  u_xlat6 = x_171;
  let x_176 : vec4<f32> = u_xlat4;
  let x_178 : vec4<f32> = textureGather(1i, x_BlitTexture, sampler_LinearClamp, vec2<f32>(x_176.z, x_176.w));
  u_xlat7 = vec4<f32>(x_178.x, x_178.z, x_178.y, x_178.w);
  let x_181 : vec4<f32> = u_xlat6;
  let x_184 : vec4<f32> = u_xlat7;
  u_xlat8 = ((x_181 * vec4<f32>(0.5f, 0.5f, 0.5f, 0.5f)) + vec4<f32>(x_184.x, x_184.z, x_184.y, x_184.w));
  let x_187 : vec4<f32> = u_xlat5;
  let x_190 : vec4<f32> = u_xlat8;
  u_xlat8 = ((vec4<f32>(x_187.x, x_187.y, x_187.w, x_187.z) * vec4<f32>(0.5f, 0.5f, 0.5f, 0.5f)) + x_190);
  let x_193 : vec4<f32> = u_xlat1;
  let x_196 : vec4<f32> = u_xlat8;
  u_xlat20 = (-(vec2<f32>(x_193.y, x_193.y)) + vec2<f32>(x_196.w, x_196.x));
  let x_200 : vec4<f32> = u_xlat8;
  let x_203 : vec4<f32> = u_xlat8;
  let x_205 : vec3<f32> = (-(vec3<f32>(x_200.w, x_200.w, x_200.x)) + vec3<f32>(x_203.z, x_203.x, x_203.y));
  let x_206 : vec4<f32> = u_xlat9;
  u_xlat9 = vec4<f32>(x_205.x, x_205.y, x_205.z, x_206.w);
  let x_209 : f32 = u_xlat20.x;
  let x_212 : f32 = u_xlat9.y;
  u_xlat20.x = max(abs(x_209), abs(x_212));
  let x_217 : f32 = u_xlat20.x;
  u_xlat20.x = bitcast<f32>((-(bitcast<i32>(x_217)) + 2129690299i));
  let x_225 : f32 = u_xlat20.x;
  let x_227 : f32 = u_xlat20.y;
  u_xlat1.y = (x_225 * abs(x_227));
  let x_232 : f32 = u_xlat1.y;
  u_xlat1.y = clamp(x_232, 0.0f, 1.0f);
  let x_241 : vec4<f32> = u_xlat4;
  let x_243 : vec4<f32> = textureGather(2i, x_BlitTexture, sampler_LinearClamp, vec2<f32>(x_241.x, x_241.y));
  u_xlat10 = vec4<f32>(x_243.x, x_243.y, x_243.w, x_243.z);
  let x_249 : vec4<f32> = u_xlat4;
  let x_251 : vec4<f32> = textureGather(0i, x_BlitTexture, sampler_LinearClamp, vec2<f32>(x_249.x, x_249.y));
  u_xlat11 = x_251;
  let x_255 : vec4<f32> = u_xlat4;
  let x_257 : vec4<f32> = textureGather(1i, x_BlitTexture, sampler_LinearClamp, vec2<f32>(x_255.x, x_255.y));
  u_xlat4 = vec4<f32>(x_257.x, x_257.z, x_257.y, x_257.w);
  let x_260 : vec4<f32> = u_xlat11;
  let x_263 : vec4<f32> = u_xlat4;
  u_xlat12 = ((vec4<f32>(x_260.z, x_260.w, x_260.y, x_260.x) * vec4<f32>(0.5f, 0.5f, 0.5f, 0.5f)) + vec4<f32>(x_263.y, x_263.w, x_263.z, x_263.x));
  let x_266 : vec4<f32> = u_xlat10;
  let x_269 : vec4<f32> = u_xlat12;
  u_xlat12 = ((vec4<f32>(x_266.w, x_266.z, x_266.y, x_266.x) * vec4<f32>(0.5f, 0.5f, 0.5f, 0.5f)) + x_269);
  let x_271 : vec4<f32> = u_xlat1;
  let x_274 : vec4<f32> = u_xlat12;
  let x_276 : vec2<f32> = (-(vec2<f32>(x_271.x, x_271.x)) + vec2<f32>(x_274.x, x_274.z));
  let x_277 : vec4<f32> = u_xlat1;
  u_xlat1 = vec4<f32>(x_276.x, x_277.y, x_277.z, x_276.y);
  let x_280 : vec4<f32> = u_xlat12;
  let x_283 : vec4<f32> = u_xlat12;
  u_xlat13 = (-(vec3<f32>(x_280.y, x_280.x, x_280.w)) + vec3<f32>(x_283.x, x_283.z, x_283.z));
  let x_287 : f32 = u_xlat1.x;
  let x_290 : f32 = u_xlat13.y;
  u_xlat1.x = max(abs(x_287), abs(x_290));
  let x_295 : f32 = u_xlat1.x;
  u_xlat1.x = bitcast<f32>((-(bitcast<i32>(x_295)) + 2129690299i));
  let x_302 : f32 = u_xlat1.x;
  let x_304 : f32 = u_xlat1.w;
  u_xlat1.x = (x_302 * abs(x_304));
  let x_309 : f32 = u_xlat1.x;
  u_xlat1.x = clamp(x_309, 0.0f, 1.0f);
  let x_312 : vec4<f32> = u_xlat1;
  let x_314 : vec4<f32> = u_xlat1;
  let x_316 : vec2<f32> = (vec2<f32>(x_312.x, x_312.y) * vec2<f32>(x_314.x, x_314.y));
  let x_317 : vec4<f32> = u_xlat1;
  u_xlat1 = vec4<f32>(x_316.x, x_316.y, x_317.z, x_317.w);
  let x_320 : vec3<f32> = u_xlat0;
  u_xlat14 = (-(vec4<f32>(x_320.x, x_320.y, x_320.x, x_320.y)) + vec4<f32>(1.0f, 1.0f, 0.0f, -1.0f));
  let x_328 : f32 = u_xlat14.y;
  let x_330 : f32 = u_xlat14.x;
  u_xlat59 = (x_328 * x_330);
  let x_333 : f32 = u_xlat1.x;
  let x_334 : f32 = u_xlat59;
  u_xlat1.x = (x_333 * x_334);
  let x_338 : vec4<f32> = u_xlat8;
  let x_340 : vec4<f32> = u_xlat12;
  u_xlat15 = (vec4<f32>(x_338.w, x_338.w, x_338.z, x_338.x) + -(vec4<f32>(x_340.x, x_340.y, x_340.x, x_340.z)));
  let x_344 : vec3<f32> = u_xlat13;
  let x_347 : vec4<f32> = u_xlat15;
  let x_350 : vec2<f32> = max(abs(vec2<f32>(x_344.x, x_344.z)), abs(vec2<f32>(x_347.x, x_347.w)));
  let x_351 : vec3<f32> = u_xlat13;
  u_xlat13 = vec3<f32>(x_350.x, x_351.y, x_350.y);
  let x_353 : vec3<f32> = u_xlat13;
  let x_360 : vec2<f32> = bitcast<vec2<f32>>((-(bitcast<vec2<i32>>(vec2<f32>(x_353.x, x_353.z))) + vec2<i32>(2129690299i, 2129690299i)));
  let x_361 : vec3<f32> = u_xlat13;
  u_xlat13 = vec3<f32>(x_360.x, x_361.y, x_360.y);
  let x_365 : f32 = u_xlat13.x;
  let x_367 : f32 = u_xlat15.y;
  u_xlat60 = (x_365 * abs(x_367));
  let x_370 : f32 = u_xlat60;
  u_xlat60 = clamp(x_370, 0.0f, 1.0f);
  let x_372 : f32 = u_xlat60;
  let x_373 : f32 = u_xlat60;
  u_xlat60 = (x_372 * x_373);
  let x_375 : f32 = u_xlat60;
  let x_376 : f32 = u_xlat59;
  let x_379 : f32 = u_xlat1.x;
  u_xlat1.x = ((x_375 * x_376) + x_379);
  let x_382 : vec4<f32> = u_xlat9;
  let x_385 : vec4<f32> = u_xlat15;
  let x_388 : vec2<f32> = max(abs(vec2<f32>(x_382.x, x_382.z)), abs(vec2<f32>(x_385.x, x_385.w)));
  let x_389 : vec4<f32> = u_xlat9;
  u_xlat9 = vec4<f32>(x_388.x, x_389.y, x_388.y, x_389.w);
  let x_391 : vec4<f32> = u_xlat9;
  let x_396 : vec2<f32> = bitcast<vec2<f32>>((-(bitcast<vec2<i32>>(vec2<f32>(x_391.x, x_391.z))) + vec2<i32>(2129690299i, 2129690299i)));
  let x_397 : vec4<f32> = u_xlat9;
  u_xlat9 = vec4<f32>(x_396.x, x_397.y, x_396.y, x_397.w);
  let x_400 : f32 = u_xlat9.x;
  let x_402 : f32 = u_xlat15.z;
  u_xlat60 = (x_400 * abs(x_402));
  let x_405 : f32 = u_xlat60;
  u_xlat60 = clamp(x_405, 0.0f, 1.0f);
  let x_407 : f32 = u_xlat60;
  let x_408 : f32 = u_xlat60;
  u_xlat60 = (x_407 * x_408);
  let x_410 : vec3<f32> = u_xlat0;
  let x_412 : vec4<f32> = u_xlat14;
  let x_414 : vec2<f32> = (vec2<f32>(x_410.x, x_410.y) * vec2<f32>(x_412.y, x_412.x));
  let x_415 : vec4<f32> = u_xlat9;
  u_xlat9 = vec4<f32>(x_414.x, x_415.y, x_415.z, x_414.y);
  let x_417 : f32 = u_xlat60;
  let x_419 : f32 = u_xlat9.x;
  let x_422 : f32 = u_xlat1.x;
  u_xlat1.x = ((x_417 * x_419) + x_422);
  let x_426 : f32 = u_xlat1.y;
  let x_428 : f32 = u_xlat9.x;
  let x_431 : f32 = u_xlat1.x;
  u_xlat1.x = ((x_426 * x_428) + x_431);
  let x_435 : vec4<f32> = u_xlat8;
  let x_437 : vec4<f32> = u_xlat12;
  u_xlat27 = (vec2<f32>(x_435.x, x_435.y) + -(vec2<f32>(x_437.w, x_437.z)));
  let x_442 : f32 = u_xlat13.z;
  let x_444 : f32 = u_xlat27.x;
  u_xlat20.x = (x_442 * abs(x_444));
  let x_449 : f32 = u_xlat20.x;
  u_xlat20.x = clamp(x_449, 0.0f, 1.0f);
  let x_453 : f32 = u_xlat20.x;
  let x_455 : f32 = u_xlat20.x;
  u_xlat20.x = (x_453 * x_455);
  let x_459 : f32 = u_xlat20.x;
  let x_461 : f32 = u_xlat9.w;
  let x_464 : f32 = u_xlat1.x;
  u_xlat1.x = ((x_459 * x_461) + x_464);
  let x_471 : vec2<f32> = u_xlat38;
  let x_472 : vec4<f32> = textureGather(0i, x_BlitTexture, sampler_LinearClamp, x_471);
  let x_473 : vec2<f32> = vec2<f32>(x_472.z, x_472.w);
  let x_474 : vec3<f32> = u_xlat31;
  u_xlat31 = vec3<f32>(x_473.x, x_474.y, x_473.y);
  let x_480 : vec2<f32> = u_xlat38;
  let x_481 : vec4<f32> = textureGather(1i, x_BlitTexture, sampler_LinearClamp, x_480);
  let x_482 : vec2<f32> = vec2<f32>(x_481.z, x_481.w);
  let x_483 : vec4<f32> = u_xlat16;
  u_xlat16 = vec4<f32>(x_483.x, x_482.x, x_483.z, x_482.y);
  let x_489 : vec2<f32> = u_xlat38;
  let x_490 : vec4<f32> = textureGather(2i, x_BlitTexture, sampler_LinearClamp, x_489);
  let x_491 : vec2<f32> = vec2<f32>(x_490.w, x_490.z);
  let x_492 : vec4<f32> = u_xlat17;
  u_xlat17 = vec4<f32>(x_492.x, x_492.y, x_491.x, x_491.y);
  let x_494 : vec3<f32> = u_xlat31;
  let x_497 : vec4<f32> = u_xlat16;
  u_xlat38 = ((vec2<f32>(x_494.x, x_494.z) * vec2<f32>(0.5f, 0.5f)) + vec2<f32>(x_497.y, x_497.w));
  let x_500 : vec4<f32> = u_xlat17;
  let x_503 : vec2<f32> = u_xlat38;
  u_xlat38 = ((vec2<f32>(x_500.w, x_500.z) * vec2<f32>(0.5f, 0.5f)) + x_503);
  let x_505 : vec4<f32> = u_xlat12;
  let x_508 : vec2<f32> = u_xlat38;
  let x_510 : vec2<f32> = (-(vec2<f32>(x_505.z, x_505.x)) + vec2<f32>(x_508.y, x_508.y));
  let x_511 : vec4<f32> = u_xlat12;
  u_xlat12 = vec4<f32>(x_510.x, x_511.y, x_510.y, x_511.w);
  let x_513 : vec4<f32> = u_xlat8;
  let x_516 : vec2<f32> = u_xlat38;
  u_xlat38 = (-(vec2<f32>(x_513.x, x_513.w)) + vec2<f32>(x_516.x, x_516.x));
  let x_520 : f32 = u_xlat13.y;
  let x_523 : f32 = u_xlat12.x;
  u_xlat20.x = max(abs(x_520), abs(x_523));
  let x_528 : f32 = u_xlat20.x;
  u_xlat20.x = bitcast<f32>((-(bitcast<i32>(x_528)) + 2129690299i));
  let x_535 : f32 = u_xlat20.x;
  let x_537 : f32 = u_xlat12.z;
  u_xlat20.x = (x_535 * abs(x_537));
  let x_542 : f32 = u_xlat20.x;
  u_xlat20.x = clamp(x_542, 0.0f, 1.0f);
  let x_546 : f32 = u_xlat20.x;
  let x_548 : f32 = u_xlat20.x;
  u_xlat20.x = (x_546 * x_548);
  let x_552 : f32 = u_xlat20.x;
  let x_554 : f32 = u_xlat9.w;
  let x_557 : f32 = u_xlat1.x;
  u_xlat1.x = ((x_552 * x_554) + x_557);
  let x_561 : f32 = u_xlat0.y;
  let x_563 : f32 = u_xlat0.x;
  u_xlat20.x = (x_561 * x_563);
  let x_567 : f32 = u_xlat9.z;
  let x_569 : f32 = u_xlat27.y;
  u_xlat60 = (x_567 * abs(x_569));
  let x_572 : f32 = u_xlat60;
  u_xlat60 = clamp(x_572, 0.0f, 1.0f);
  let x_574 : f32 = u_xlat60;
  let x_575 : f32 = u_xlat60;
  u_xlat60 = (x_574 * x_575);
  let x_577 : f32 = u_xlat60;
  let x_579 : f32 = u_xlat20.x;
  let x_582 : f32 = u_xlat1.x;
  u_xlat1.x = ((x_577 * x_579) + x_582);
  let x_586 : f32 = u_xlat9.y;
  let x_589 : f32 = u_xlat38.x;
  u_xlat38.x = max(abs(x_586), abs(x_589));
  let x_594 : f32 = u_xlat38.x;
  u_xlat38.x = bitcast<f32>((-(bitcast<i32>(x_594)) + 2129690299i));
  let x_601 : f32 = u_xlat38.x;
  let x_603 : f32 = u_xlat38.y;
  u_xlat38.x = (x_601 * abs(x_603));
  let x_608 : f32 = u_xlat38.x;
  u_xlat38.x = clamp(x_608, 0.0f, 1.0f);
  let x_612 : f32 = u_xlat38.x;
  let x_614 : f32 = u_xlat38.x;
  u_xlat38.x = (x_612 * x_614);
  let x_618 : f32 = u_xlat38.x;
  let x_620 : f32 = u_xlat20.x;
  let x_623 : f32 = u_xlat1.x;
  u_xlat38.x = ((x_618 * x_620) + x_623);
  let x_627 : f32 = u_xlat38.x;
  u_xlat38.x = (x_627 * 0.5f);
  let x_631 : f32 = u_xlat38.x;
  let x_633 : f32 = u_xlat38.x;
  u_xlat38.x = (x_631 * x_633);
  let x_636 : vec2<f32> = u_xlat38;
  let x_643 : vec2<f32> = ((vec2<f32>(x_636.x, x_636.x) * vec2<f32>(-0.5f, -0.289999992f)) + vec2<f32>(1.0f, 0.5f));
  let x_644 : vec3<f32> = u_xlat13;
  u_xlat13 = vec3<f32>(x_644.x, x_643.x, x_643.y);
  let x_647 : f32 = u_xlat20.y;
  let x_649 : f32 = u_xlat9.x;
  u_xlat1.x = (x_647 * x_649);
  let x_653 : f32 = u_xlat1.w;
  let x_654 : f32 = u_xlat59;
  let x_657 : f32 = u_xlat1.x;
  u_xlat1.x = ((x_653 * x_654) + x_657);
  let x_661 : f32 = u_xlat12.z;
  let x_663 : f32 = u_xlat9.w;
  let x_666 : f32 = u_xlat1.x;
  u_xlat1.x = ((x_661 * x_663) + x_666);
  let x_671 : f32 = u_xlat38.y;
  let x_673 : f32 = u_xlat20.x;
  let x_676 : f32 = u_xlat1.x;
  u_xlat18.z = ((x_671 * x_673) + x_676);
  let x_681 : f32 = u_xlat9.x;
  let x_683 : f32 = u_xlat15.z;
  u_xlat57 = (x_681 * x_683);
  let x_686 : f32 = u_xlat15.y;
  let x_687 : f32 = u_xlat59;
  let x_689 : f32 = u_xlat57;
  u_xlat57 = ((x_686 * x_687) + x_689);
  let x_692 : f32 = u_xlat27.x;
  let x_694 : f32 = u_xlat9.w;
  let x_696 : f32 = u_xlat57;
  u_xlat57 = ((x_692 * x_694) + x_696);
  let x_699 : f32 = u_xlat27.y;
  let x_701 : f32 = u_xlat20.x;
  let x_703 : f32 = u_xlat57;
  u_xlat18.y = ((x_699 * x_701) + x_703);
  let x_706 : vec3<f32> = u_xlat18;
  let x_708 : vec3<f32> = u_xlat18;
  let x_710 : vec2<f32> = (vec2<f32>(x_706.y, x_706.z) * vec2<f32>(x_708.y, x_708.z));
  let x_711 : vec4<f32> = u_xlat1;
  u_xlat1 = vec4<f32>(x_710.x, x_710.y, x_711.z, x_711.w);
  let x_714 : f32 = u_xlat1.y;
  let x_716 : f32 = u_xlat1.x;
  u_xlat57 = (x_714 + x_716);
  let x_720 : f32 = u_xlat57;
  u_xlatu1 = (bitcast<u32>(x_720) >> 1u);
  let x_726 : f32 = u_xlat57;
  u_xlatb57 = (x_726 < 3.05175781e-05f);
  let x_729 : u32 = u_xlatu1;
  u_xlat1.x = bitcast<f32>((-(bitcast<i32>(x_729)) + 1597275508i));
  let x_736 : bool = u_xlatb57;
  if (x_736) {
    x_737 = 1.0f;
  } else {
    let x_742 : f32 = u_xlat1.x;
    x_737 = x_742;
  }
  let x_743 : f32 = x_737;
  u_xlat1.x = x_743;
  let x_745 : bool = u_xlatb57;
  if (x_745) {
    x_746 = 1.0f;
  } else {
    let x_751 : f32 = u_xlat18.y;
    x_746 = x_751;
  }
  let x_752 : f32 = x_746;
  u_xlat18.x = x_752;
  let x_754 : vec4<f32> = u_xlat1;
  let x_756 : vec3<f32> = u_xlat18;
  let x_758 : vec2<f32> = (vec2<f32>(x_754.x, x_754.x) * vec2<f32>(x_756.x, x_756.z));
  let x_759 : vec4<f32> = u_xlat1;
  u_xlat1 = vec4<f32>(x_758.x, x_758.y, x_759.z, x_759.w);
  let x_762 : f32 = u_xlat1.y;
  let x_765 : f32 = u_xlat1.x;
  u_xlat57 = max(abs(x_762), abs(x_765));
  let x_768 : f32 = u_xlat57;
  u_xlat57 = bitcast<f32>((-(bitcast<i32>(x_768)) + 2129690299i));
  let x_774 : vec4<f32> = u_xlat1;
  let x_776 : vec4<f32> = u_xlat1;
  u_xlat39.x = dot(vec2<f32>(x_774.x, x_774.y), vec2<f32>(x_776.x, x_776.y));
  let x_781 : f32 = u_xlat39.x;
  let x_782 : f32 = u_xlat57;
  u_xlat57 = ((x_781 * x_782) + -1.0f);
  let x_785 : f32 = u_xlat57;
  let x_787 : f32 = u_xlat38.x;
  u_xlat13.x = ((x_785 * x_787) + 1.0f);
  let x_791 : vec3<f32> = u_xlat0;
  u_xlat8 = (-(vec4<f32>(x_791.x, x_791.y, x_791.x, x_791.y)) + vec4<f32>(1.0f, -1.0f, -1.0f, 1.0f));
  let x_796 : vec4<f32> = u_xlat1;
  let x_798 : vec4<f32> = u_xlat8;
  u_xlat38 = (vec2<f32>(x_796.x, x_796.x) * vec2<f32>(x_798.y, x_798.w));
  let x_801 : vec4<f32> = u_xlat8;
  let x_803 : vec4<f32> = u_xlat1;
  let x_807 : vec2<f32> = u_xlat38;
  let x_808 : vec2<f32> = ((vec2<f32>(x_801.x, x_801.z) * -(vec2<f32>(x_803.y, x_803.y))) + x_807);
  let x_809 : vec4<f32> = u_xlat9;
  u_xlat9 = vec4<f32>(x_809.x, x_809.y, x_808.x, x_808.y);
  let x_811 : vec4<f32> = u_xlat8;
  let x_813 : vec4<f32> = u_xlat1;
  u_xlat9.y = dot(vec2<f32>(x_811.x, x_811.y), vec2<f32>(x_813.x, x_813.y));
  let x_817 : vec4<f32> = u_xlat8;
  let x_819 : vec4<f32> = u_xlat1;
  u_xlat9.x = dot(vec2<f32>(x_817.z, x_817.w), vec2<f32>(x_819.x, x_819.y));
  let x_823 : vec3<f32> = u_xlat13;
  let x_825 : vec4<f32> = u_xlat9;
  u_xlat38 = (vec2<f32>(x_823.x, x_823.y) * vec2<f32>(x_825.x, x_825.w));
  let x_828 : vec3<f32> = u_xlat13;
  let x_830 : vec4<f32> = u_xlat9;
  u_xlat39 = (vec2<f32>(x_828.x, x_828.y) * vec2<f32>(x_830.y, x_830.z));
  let x_833 : vec2<f32> = u_xlat39;
  let x_834 : vec2<f32> = u_xlat39;
  u_xlat39.x = dot(x_833, x_834);
  let x_837 : vec2<f32> = u_xlat38;
  let x_838 : vec2<f32> = u_xlat38;
  u_xlat38.x = dot(x_837, x_838);
  let x_842 : f32 = u_xlat13.z;
  u_xlat57 = bitcast<f32>((-(bitcast<i32>(x_842)) + 2129690299i));
  let x_847 : f32 = u_xlat57;
  let x_849 : f32 = u_xlat39.x;
  u_xlat39.x = min(x_847, x_849);
  let x_853 : f32 = u_xlat13.z;
  let x_855 : f32 = u_xlat39.x;
  u_xlat39.y = ((x_853 * x_855) + -1.0f);
  let x_860 : f32 = u_xlat39.x;
  u_xlat39.x = ((x_860 * 0.400000006f) + -1.0f);
  let x_865 : vec2<f32> = u_xlat39;
  let x_866 : vec2<f32> = u_xlat39;
  u_xlat39 = (x_865 * x_866);
  let x_869 : f32 = u_xlat39.x;
  u_xlat39.x = ((x_869 * 1.5625f) + -0.5625f);
  let x_876 : f32 = u_xlat39.y;
  let x_878 : f32 = u_xlat39.x;
  u_xlat39.x = (x_876 * x_878);
  let x_881 : vec2<f32> = u_xlat39;
  let x_883 : vec3<f32> = u_xlat2;
  u_xlat2 = (vec3<f32>(x_881.x, x_881.x, x_881.x) * x_883);
  let x_887 : f32 = u_xlat1.x;
  let x_889 : f32 = u_xlat14.w;
  u_xlat58 = (x_887 * x_889);
  let x_892 : f32 = u_xlat14.z;
  let x_894 : f32 = u_xlat1.y;
  let x_897 : f32 = u_xlat58;
  u_xlat8.y = ((x_892 * -(x_894)) + x_897);
  let x_900 : vec4<f32> = u_xlat14;
  let x_902 : vec4<f32> = u_xlat1;
  u_xlat8.x = dot(vec2<f32>(x_900.z, x_900.w), vec2<f32>(x_902.x, x_902.y));
  let x_906 : vec3<f32> = u_xlat13;
  let x_908 : vec4<f32> = u_xlat8;
  let x_910 : vec2<f32> = (vec2<f32>(x_906.x, x_906.y) * vec2<f32>(x_908.x, x_908.y));
  let x_911 : vec4<f32> = u_xlat8;
  u_xlat8 = vec4<f32>(x_910.x, x_910.y, x_911.z, x_911.w);
  let x_913 : vec4<f32> = u_xlat8;
  let x_915 : vec4<f32> = u_xlat8;
  u_xlat58 = dot(vec2<f32>(x_913.x, x_913.y), vec2<f32>(x_915.x, x_915.y));
  let x_918 : f32 = u_xlat57;
  let x_919 : f32 = u_xlat58;
  u_xlat58 = min(x_918, x_919);
  let x_922 : f32 = u_xlat13.z;
  let x_923 : f32 = u_xlat58;
  u_xlat59 = ((x_922 * x_923) + -1.0f);
  let x_926 : f32 = u_xlat58;
  u_xlat58 = ((x_926 * 0.400000006f) + -1.0f);
  let x_929 : f32 = u_xlat58;
  let x_930 : f32 = u_xlat58;
  u_xlat58 = (x_929 * x_930);
  let x_932 : f32 = u_xlat58;
  u_xlat58 = ((x_932 * 1.5625f) + -0.5625f);
  let x_935 : f32 = u_xlat59;
  let x_936 : f32 = u_xlat59;
  u_xlat59 = (x_935 * x_936);
  let x_938 : f32 = u_xlat58;
  let x_939 : f32 = u_xlat59;
  u_xlat60 = (x_938 * x_939);
  let x_941 : f32 = u_xlat58;
  let x_942 : f32 = u_xlat59;
  let x_945 : f32 = u_xlat39.x;
  u_xlat39.x = ((x_941 * x_942) + x_945);
  let x_948 : vec4<f32> = u_xlat3;
  let x_950 : f32 = u_xlat60;
  let x_953 : vec3<f32> = u_xlat2;
  u_xlat2 = ((vec3<f32>(x_948.x, x_948.y, x_948.z) * vec3<f32>(x_950, x_950, x_950)) + x_953);
  let x_955 : f32 = u_xlat57;
  let x_957 : f32 = u_xlat38.x;
  u_xlat38.x = min(x_955, x_957);
  let x_961 : f32 = u_xlat13.z;
  let x_963 : f32 = u_xlat38.x;
  u_xlat58 = ((x_961 * x_963) + -1.0f);
  let x_967 : f32 = u_xlat38.x;
  u_xlat38.x = ((x_967 * 0.400000006f) + -1.0f);
  let x_972 : f32 = u_xlat38.x;
  let x_974 : f32 = u_xlat38.x;
  u_xlat38.x = (x_972 * x_974);
  let x_978 : f32 = u_xlat38.x;
  u_xlat38.x = ((x_978 * 1.5625f) + -0.5625f);
  let x_982 : f32 = u_xlat58;
  let x_983 : f32 = u_xlat58;
  u_xlat58 = (x_982 * x_983);
  let x_986 : f32 = u_xlat38.x;
  let x_987 : f32 = u_xlat58;
  u_xlat59 = (x_986 * x_987);
  let x_990 : f32 = u_xlat38.x;
  let x_991 : f32 = u_xlat58;
  let x_994 : f32 = u_xlat39.x;
  u_xlat38.x = ((x_990 * x_991) + x_994);
  let x_998 : f32 = u_xlat11.x;
  u_xlat3.x = x_998;
  let x_1001 : f32 = u_xlat4.x;
  u_xlat3.y = x_1001;
  let x_1004 : f32 = u_xlat10.x;
  u_xlat3.z = x_1004;
  let x_1006 : vec4<f32> = u_xlat3;
  let x_1008 : f32 = u_xlat59;
  let x_1011 : vec3<f32> = u_xlat2;
  u_xlat2 = ((vec3<f32>(x_1006.x, x_1006.y, x_1006.z) * vec3<f32>(x_1008, x_1008, x_1008)) + x_1011);
  let x_1013 : vec3<f32> = u_xlat0;
  u_xlat3 = (-(vec4<f32>(x_1013.x, x_1013.y, x_1013.x, x_1013.y)) + vec4<f32>(0.0f, 1.0f, -1.0f, 0.0f));
  let x_1018 : vec4<f32> = u_xlat1;
  let x_1020 : vec4<f32> = u_xlat3;
  u_xlat39 = (vec2<f32>(x_1018.x, x_1018.x) * vec2<f32>(x_1020.y, x_1020.w));
  let x_1023 : vec4<f32> = u_xlat3;
  let x_1025 : vec4<f32> = u_xlat1;
  let x_1029 : vec2<f32> = u_xlat39;
  let x_1030 : vec2<f32> = ((vec2<f32>(x_1023.x, x_1023.z) * -(vec2<f32>(x_1025.y, x_1025.y))) + x_1029);
  let x_1031 : vec4<f32> = u_xlat8;
  u_xlat8 = vec4<f32>(x_1031.x, x_1031.y, x_1030.x, x_1030.y);
  let x_1033 : vec4<f32> = u_xlat3;
  let x_1035 : vec4<f32> = u_xlat1;
  u_xlat8.y = dot(vec2<f32>(x_1033.x, x_1033.y), vec2<f32>(x_1035.x, x_1035.y));
  let x_1039 : vec4<f32> = u_xlat3;
  let x_1041 : vec4<f32> = u_xlat1;
  u_xlat8.x = dot(vec2<f32>(x_1039.z, x_1039.w), vec2<f32>(x_1041.x, x_1041.y));
  let x_1045 : vec3<f32> = u_xlat13;
  let x_1047 : vec4<f32> = u_xlat8;
  u_xlat39 = (vec2<f32>(x_1045.x, x_1045.y) * vec2<f32>(x_1047.x, x_1047.w));
  let x_1050 : vec3<f32> = u_xlat13;
  let x_1052 : vec4<f32> = u_xlat8;
  let x_1054 : vec2<f32> = (vec2<f32>(x_1050.x, x_1050.y) * vec2<f32>(x_1052.y, x_1052.z));
  let x_1055 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_1054.x, x_1054.y, x_1055.z, x_1055.w);
  let x_1057 : vec4<f32> = u_xlat3;
  let x_1059 : vec4<f32> = u_xlat3;
  u_xlat59 = dot(vec2<f32>(x_1057.x, x_1057.y), vec2<f32>(x_1059.x, x_1059.y));
  let x_1062 : f32 = u_xlat57;
  let x_1063 : f32 = u_xlat59;
  u_xlat59 = min(x_1062, x_1063);
  let x_1065 : vec2<f32> = u_xlat39;
  let x_1066 : vec2<f32> = u_xlat39;
  u_xlat39.x = dot(x_1065, x_1066);
  let x_1070 : f32 = u_xlat13.z;
  let x_1071 : f32 = u_xlat59;
  u_xlat58 = ((x_1070 * x_1071) + -1.0f);
  let x_1074 : f32 = u_xlat59;
  u_xlat59 = ((x_1074 * 0.400000006f) + -1.0f);
  let x_1077 : f32 = u_xlat59;
  let x_1078 : f32 = u_xlat59;
  u_xlat59 = (x_1077 * x_1078);
  let x_1080 : f32 = u_xlat59;
  u_xlat59 = ((x_1080 * 1.5625f) + -0.5625f);
  let x_1083 : f32 = u_xlat58;
  let x_1084 : f32 = u_xlat58;
  u_xlat58 = (x_1083 * x_1084);
  let x_1086 : f32 = u_xlat58;
  let x_1087 : f32 = u_xlat59;
  u_xlat3.x = (x_1086 * x_1087);
  let x_1090 : f32 = u_xlat59;
  let x_1091 : f32 = u_xlat58;
  let x_1094 : f32 = u_xlat38.x;
  u_xlat38.x = ((x_1090 * x_1091) + x_1094);
  let x_1098 : f32 = u_xlat11.y;
  u_xlat8.x = x_1098;
  let x_1101 : f32 = u_xlat4.z;
  u_xlat8.y = x_1101;
  let x_1104 : f32 = u_xlat10.y;
  u_xlat8.z = x_1104;
  let x_1106 : vec4<f32> = u_xlat8;
  let x_1108 : vec4<f32> = u_xlat3;
  let x_1111 : vec3<f32> = u_xlat2;
  u_xlat2 = ((vec3<f32>(x_1106.x, x_1106.y, x_1106.z) * vec3<f32>(x_1108.x, x_1108.x, x_1108.x)) + x_1111);
  let x_1114 : f32 = u_xlat0.y;
  let x_1117 : f32 = u_xlat1.x;
  u_xlat58 = (-(x_1114) * x_1117);
  let x_1120 : f32 = u_xlat0.x;
  let x_1122 : f32 = u_xlat1.y;
  let x_1124 : f32 = u_xlat58;
  u_xlat3.y = ((x_1120 * x_1122) + x_1124);
  let x_1127 : vec3<f32> = u_xlat0;
  let x_1130 : vec4<f32> = u_xlat1;
  u_xlat3.x = dot(-(vec2<f32>(x_1127.x, x_1127.y)), vec2<f32>(x_1130.x, x_1130.y));
  let x_1134 : vec3<f32> = u_xlat13;
  let x_1136 : vec4<f32> = u_xlat3;
  let x_1138 : vec2<f32> = (vec2<f32>(x_1134.x, x_1134.y) * vec2<f32>(x_1136.x, x_1136.y));
  let x_1139 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_1138.x, x_1138.y, x_1139.z, x_1139.w);
  let x_1141 : vec4<f32> = u_xlat3;
  let x_1143 : vec4<f32> = u_xlat3;
  u_xlat39.y = dot(vec2<f32>(x_1141.x, x_1141.y), vec2<f32>(x_1143.x, x_1143.y));
  let x_1147 : f32 = u_xlat57;
  let x_1149 : vec2<f32> = u_xlat39;
  u_xlat39 = min(vec2<f32>(x_1147, x_1147), x_1149);
  let x_1152 : f32 = u_xlat13.z;
  let x_1154 : f32 = u_xlat39.y;
  u_xlat59 = ((x_1152 * x_1154) + -1.0f);
  let x_1158 : f32 = u_xlat39.y;
  u_xlat58 = ((x_1158 * 0.400000006f) + -1.0f);
  let x_1161 : f32 = u_xlat58;
  let x_1162 : f32 = u_xlat58;
  u_xlat58 = (x_1161 * x_1162);
  let x_1164 : f32 = u_xlat58;
  u_xlat58 = ((x_1164 * 1.5625f) + -0.5625f);
  let x_1167 : f32 = u_xlat59;
  let x_1168 : f32 = u_xlat59;
  u_xlat59 = (x_1167 * x_1168);
  let x_1170 : f32 = u_xlat58;
  let x_1171 : f32 = u_xlat59;
  u_xlat3.x = (x_1170 * x_1171);
  let x_1174 : f32 = u_xlat58;
  let x_1175 : f32 = u_xlat59;
  let x_1178 : f32 = u_xlat38.x;
  u_xlat38.x = ((x_1174 * x_1175) + x_1178);
  let x_1182 : f32 = u_xlat11.z;
  u_xlat4.x = x_1182;
  let x_1185 : f32 = u_xlat11.w;
  u_xlat10.x = x_1185;
  let x_1188 : f32 = u_xlat4.w;
  u_xlat10.y = x_1188;
  let x_1191 : f32 = u_xlat10.w;
  u_xlat4.z = x_1191;
  let x_1193 : vec4<f32> = u_xlat4;
  let x_1195 : vec4<f32> = u_xlat3;
  let x_1198 : vec3<f32> = u_xlat2;
  u_xlat2 = ((vec3<f32>(x_1193.x, x_1193.y, x_1193.z) * vec3<f32>(x_1195.x, x_1195.x, x_1195.x)) + x_1198);
  let x_1201 : f32 = u_xlat13.z;
  let x_1203 : f32 = u_xlat39.x;
  u_xlat39.y = ((x_1201 * x_1203) + -1.0f);
  let x_1208 : f32 = u_xlat39.x;
  u_xlat39.x = ((x_1208 * 0.400000006f) + -1.0f);
  let x_1212 : vec2<f32> = u_xlat39;
  let x_1213 : vec2<f32> = u_xlat39;
  u_xlat39 = (x_1212 * x_1213);
  let x_1216 : f32 = u_xlat39.x;
  u_xlat39.x = ((x_1216 * 1.5625f) + -0.5625f);
  let x_1221 : f32 = u_xlat39.y;
  let x_1223 : f32 = u_xlat39.x;
  u_xlat59 = (x_1221 * x_1223);
  let x_1226 : f32 = u_xlat39.x;
  let x_1228 : f32 = u_xlat39.y;
  let x_1231 : f32 = u_xlat38.x;
  u_xlat38.x = ((x_1226 * x_1228) + x_1231);
  let x_1234 : vec4<f32> = u_xlat10;
  let x_1236 : f32 = u_xlat59;
  let x_1239 : vec3<f32> = u_xlat2;
  u_xlat2 = ((vec3<f32>(x_1234.x, x_1234.y, x_1234.z) * vec3<f32>(x_1236, x_1236, x_1236)) + x_1239);
  let x_1241 : vec3<f32> = u_xlat0;
  u_xlat3 = (-(vec4<f32>(x_1241.x, x_1241.y, x_1241.x, x_1241.y)) + vec4<f32>(1.0f, 1.0f, 2.0f, 1.0f));
  let x_1247 : vec4<f32> = u_xlat1;
  let x_1249 : vec4<f32> = u_xlat3;
  u_xlat39 = (vec2<f32>(x_1247.x, x_1247.x) * vec2<f32>(x_1249.y, x_1249.w));
  let x_1252 : vec4<f32> = u_xlat3;
  let x_1254 : vec4<f32> = u_xlat1;
  let x_1258 : vec2<f32> = u_xlat39;
  let x_1259 : vec2<f32> = ((vec2<f32>(x_1252.x, x_1252.z) * -(vec2<f32>(x_1254.y, x_1254.y))) + x_1258);
  let x_1260 : vec4<f32> = u_xlat9;
  u_xlat9 = vec4<f32>(x_1260.x, x_1260.y, x_1259.x, x_1259.y);
  let x_1262 : vec4<f32> = u_xlat3;
  let x_1264 : vec4<f32> = u_xlat1;
  u_xlat9.y = dot(vec2<f32>(x_1262.x, x_1262.y), vec2<f32>(x_1264.x, x_1264.y));
  let x_1268 : vec4<f32> = u_xlat3;
  let x_1270 : vec4<f32> = u_xlat1;
  u_xlat9.x = dot(vec2<f32>(x_1268.z, x_1268.w), vec2<f32>(x_1270.x, x_1270.y));
  let x_1274 : vec3<f32> = u_xlat13;
  let x_1276 : vec4<f32> = u_xlat9;
  u_xlat39 = (vec2<f32>(x_1274.x, x_1274.y) * vec2<f32>(x_1276.x, x_1276.w));
  let x_1279 : vec3<f32> = u_xlat13;
  let x_1281 : vec4<f32> = u_xlat9;
  let x_1283 : vec2<f32> = (vec2<f32>(x_1279.x, x_1279.y) * vec2<f32>(x_1281.y, x_1281.z));
  let x_1284 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_1283.x, x_1283.y, x_1284.z, x_1284.w);
  let x_1286 : vec4<f32> = u_xlat3;
  let x_1288 : vec4<f32> = u_xlat3;
  u_xlat59 = dot(vec2<f32>(x_1286.x, x_1286.y), vec2<f32>(x_1288.x, x_1288.y));
  let x_1291 : f32 = u_xlat57;
  let x_1292 : f32 = u_xlat59;
  u_xlat59 = min(x_1291, x_1292);
  let x_1294 : vec2<f32> = u_xlat39;
  let x_1295 : vec2<f32> = u_xlat39;
  u_xlat39.x = dot(x_1294, x_1295);
  let x_1298 : f32 = u_xlat57;
  let x_1300 : f32 = u_xlat39.x;
  u_xlat39.x = min(x_1298, x_1300);
  let x_1304 : f32 = u_xlat13.z;
  let x_1305 : f32 = u_xlat59;
  u_xlat58 = ((x_1304 * x_1305) + -1.0f);
  let x_1308 : f32 = u_xlat59;
  u_xlat59 = ((x_1308 * 0.400000006f) + -1.0f);
  let x_1311 : f32 = u_xlat59;
  let x_1312 : f32 = u_xlat59;
  u_xlat59 = (x_1311 * x_1312);
  let x_1314 : f32 = u_xlat59;
  u_xlat59 = ((x_1314 * 1.5625f) + -0.5625f);
  let x_1317 : f32 = u_xlat58;
  let x_1318 : f32 = u_xlat58;
  u_xlat58 = (x_1317 * x_1318);
  let x_1320 : f32 = u_xlat58;
  let x_1321 : f32 = u_xlat59;
  u_xlat3.x = (x_1320 * x_1321);
  let x_1324 : f32 = u_xlat59;
  let x_1325 : f32 = u_xlat58;
  let x_1328 : f32 = u_xlat38.x;
  u_xlat38.x = ((x_1324 * x_1325) + x_1328);
  let x_1332 : f32 = u_xlat6.x;
  u_xlat9.x = x_1332;
  let x_1335 : f32 = u_xlat7.x;
  u_xlat9.y = x_1335;
  let x_1338 : f32 = u_xlat5.x;
  u_xlat9.z = x_1338;
  let x_1340 : vec4<f32> = u_xlat9;
  let x_1342 : vec4<f32> = u_xlat3;
  let x_1345 : vec3<f32> = u_xlat2;
  u_xlat2 = ((vec3<f32>(x_1340.x, x_1340.y, x_1340.z) * vec3<f32>(x_1342.x, x_1342.x, x_1342.x)) + x_1345);
  let x_1348 : f32 = u_xlat13.z;
  let x_1350 : f32 = u_xlat39.x;
  u_xlat39.y = ((x_1348 * x_1350) + -1.0f);
  let x_1355 : f32 = u_xlat39.x;
  u_xlat39.x = ((x_1355 * 0.400000006f) + -1.0f);
  let x_1359 : vec2<f32> = u_xlat39;
  let x_1360 : vec2<f32> = u_xlat39;
  u_xlat39 = (x_1359 * x_1360);
  let x_1363 : f32 = u_xlat39.x;
  u_xlat39.x = ((x_1363 * 1.5625f) + -0.5625f);
  let x_1368 : f32 = u_xlat39.y;
  let x_1370 : f32 = u_xlat39.x;
  u_xlat59 = (x_1368 * x_1370);
  let x_1373 : f32 = u_xlat39.x;
  let x_1375 : f32 = u_xlat39.y;
  let x_1378 : f32 = u_xlat38.x;
  u_xlat38.x = ((x_1373 * x_1375) + x_1378);
  let x_1382 : f32 = u_xlat6.y;
  u_xlat3.x = x_1382;
  let x_1385 : f32 = u_xlat7.z;
  u_xlat3.y = x_1385;
  let x_1388 : f32 = u_xlat5.y;
  u_xlat3.z = x_1388;
  let x_1390 : vec4<f32> = u_xlat3;
  let x_1392 : f32 = u_xlat59;
  let x_1395 : vec3<f32> = u_xlat2;
  u_xlat2 = ((vec3<f32>(x_1390.x, x_1390.y, x_1390.z) * vec3<f32>(x_1392, x_1392, x_1392)) + x_1395);
  let x_1397 : vec3<f32> = u_xlat0;
  u_xlat3 = (-(vec4<f32>(x_1397.x, x_1397.y, x_1397.x, x_1397.y)) + vec4<f32>(2.0f, 0.0f, 1.0f, 0.0f));
  let x_1402 : vec3<f32> = u_xlat0;
  u_xlat10 = (-(vec4<f32>(x_1402.x, x_1402.y, x_1402.x, x_1402.y)) + vec4<f32>(1.0f, 2.0f, 0.0f, 2.0f));
  let x_1407 : vec4<f32> = u_xlat1;
  let x_1409 : vec4<f32> = u_xlat3;
  let x_1411 : vec2<f32> = (vec2<f32>(x_1407.x, x_1407.x) * vec2<f32>(x_1409.y, x_1409.w));
  let x_1412 : vec3<f32> = u_xlat0;
  u_xlat0 = vec3<f32>(x_1411.x, x_1411.y, x_1412.z);
  let x_1414 : vec4<f32> = u_xlat3;
  let x_1416 : vec4<f32> = u_xlat1;
  let x_1420 : vec3<f32> = u_xlat0;
  let x_1422 : vec2<f32> = ((vec2<f32>(x_1414.x, x_1414.z) * -(vec2<f32>(x_1416.y, x_1416.y))) + vec2<f32>(x_1420.x, x_1420.y));
  let x_1423 : vec4<f32> = u_xlat11;
  u_xlat11 = vec4<f32>(x_1423.x, x_1423.y, x_1422.x, x_1422.y);
  let x_1425 : vec4<f32> = u_xlat3;
  let x_1427 : vec4<f32> = u_xlat1;
  u_xlat11.y = dot(vec2<f32>(x_1425.x, x_1425.y), vec2<f32>(x_1427.x, x_1427.y));
  let x_1431 : vec4<f32> = u_xlat3;
  let x_1433 : vec4<f32> = u_xlat1;
  u_xlat11.x = dot(vec2<f32>(x_1431.z, x_1431.w), vec2<f32>(x_1433.x, x_1433.y));
  let x_1437 : vec3<f32> = u_xlat13;
  let x_1439 : vec4<f32> = u_xlat11;
  let x_1441 : vec2<f32> = (vec2<f32>(x_1437.x, x_1437.y) * vec2<f32>(x_1439.x, x_1439.w));
  let x_1442 : vec3<f32> = u_xlat0;
  u_xlat0 = vec3<f32>(x_1441.x, x_1441.y, x_1442.z);
  let x_1444 : vec3<f32> = u_xlat13;
  let x_1446 : vec4<f32> = u_xlat11;
  u_xlat39 = (vec2<f32>(x_1444.x, x_1444.y) * vec2<f32>(x_1446.y, x_1446.z));
  let x_1449 : vec2<f32> = u_xlat39;
  let x_1450 : vec2<f32> = u_xlat39;
  u_xlat39.x = dot(x_1449, x_1450);
  let x_1453 : f32 = u_xlat57;
  let x_1455 : f32 = u_xlat39.x;
  u_xlat39.x = min(x_1453, x_1455);
  let x_1458 : vec3<f32> = u_xlat0;
  let x_1460 : vec3<f32> = u_xlat0;
  u_xlat0.x = dot(vec2<f32>(x_1458.x, x_1458.y), vec2<f32>(x_1460.x, x_1460.y));
  let x_1464 : f32 = u_xlat57;
  let x_1466 : f32 = u_xlat0.x;
  u_xlat0.x = min(x_1464, x_1466);
  let x_1471 : f32 = u_xlat13.z;
  let x_1473 : f32 = u_xlat39.x;
  u_xlat19.x = ((x_1471 * x_1473) + -1.0f);
  let x_1478 : f32 = u_xlat39.x;
  u_xlat39.x = ((x_1478 * 0.400000006f) + -1.0f);
  let x_1483 : f32 = u_xlat39.x;
  let x_1485 : f32 = u_xlat39.x;
  u_xlat39.x = (x_1483 * x_1485);
  let x_1489 : f32 = u_xlat39.x;
  u_xlat39.x = ((x_1489 * 1.5625f) + -0.5625f);
  let x_1494 : f32 = u_xlat19.x;
  let x_1496 : f32 = u_xlat19.x;
  u_xlat19.x = (x_1494 * x_1496);
  let x_1500 : f32 = u_xlat19.x;
  let x_1502 : f32 = u_xlat39.x;
  u_xlat58 = (x_1500 * x_1502);
  let x_1505 : f32 = u_xlat39.x;
  let x_1507 : f32 = u_xlat19.x;
  let x_1510 : f32 = u_xlat38.x;
  u_xlat19.x = ((x_1505 * x_1507) + x_1510);
  let x_1514 : f32 = u_xlat6.z;
  u_xlat7.x = x_1514;
  let x_1517 : f32 = u_xlat6.w;
  u_xlat5.x = x_1517;
  let x_1520 : f32 = u_xlat7.w;
  u_xlat5.y = x_1520;
  let x_1523 : f32 = u_xlat5.w;
  u_xlat7.z = x_1523;
  let x_1525 : vec4<f32> = u_xlat7;
  let x_1527 : f32 = u_xlat58;
  let x_1530 : vec3<f32> = u_xlat2;
  u_xlat2 = ((vec3<f32>(x_1525.x, x_1525.y, x_1525.z) * vec3<f32>(x_1527, x_1527, x_1527)) + x_1530);
  let x_1533 : f32 = u_xlat13.z;
  let x_1535 : f32 = u_xlat0.x;
  u_xlat0.z = ((x_1533 * x_1535) + -1.0f);
  let x_1540 : f32 = u_xlat0.x;
  u_xlat0.x = ((x_1540 * 0.400000006f) + -1.0f);
  let x_1544 : vec3<f32> = u_xlat0;
  let x_1546 : vec3<f32> = u_xlat0;
  let x_1548 : vec2<f32> = (vec2<f32>(x_1544.x, x_1544.z) * vec2<f32>(x_1546.x, x_1546.z));
  let x_1549 : vec3<f32> = u_xlat0;
  u_xlat0 = vec3<f32>(x_1548.x, x_1549.y, x_1548.y);
  let x_1552 : f32 = u_xlat0.x;
  u_xlat0.x = ((x_1552 * 1.5625f) + -0.5625f);
  let x_1557 : f32 = u_xlat0.z;
  let x_1559 : f32 = u_xlat0.x;
  u_xlat39.x = (x_1557 * x_1559);
  let x_1563 : f32 = u_xlat0.x;
  let x_1565 : f32 = u_xlat0.z;
  let x_1568 : f32 = u_xlat19.x;
  u_xlat0.x = ((x_1563 * x_1565) + x_1568);
  let x_1571 : vec4<f32> = u_xlat5;
  let x_1573 : vec2<f32> = u_xlat39;
  let x_1576 : vec3<f32> = u_xlat2;
  u_xlat2 = ((vec3<f32>(x_1571.x, x_1571.y, x_1571.z) * vec3<f32>(x_1573.x, x_1573.x, x_1573.x)) + x_1576);
  let x_1578 : vec4<f32> = u_xlat1;
  let x_1580 : vec4<f32> = u_xlat10;
  let x_1582 : vec2<f32> = (vec2<f32>(x_1578.x, x_1578.x) * vec2<f32>(x_1580.y, x_1580.w));
  let x_1583 : vec3<f32> = u_xlat19;
  u_xlat19 = vec3<f32>(x_1582.x, x_1582.y, x_1583.z);
  let x_1585 : vec4<f32> = u_xlat10;
  let x_1587 : vec4<f32> = u_xlat1;
  let x_1591 : vec3<f32> = u_xlat19;
  let x_1593 : vec2<f32> = ((vec2<f32>(x_1585.x, x_1585.z) * -(vec2<f32>(x_1587.y, x_1587.y))) + vec2<f32>(x_1591.x, x_1591.y));
  let x_1594 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_1594.x, x_1594.y, x_1593.x, x_1593.y);
  let x_1596 : vec4<f32> = u_xlat10;
  let x_1598 : vec4<f32> = u_xlat1;
  u_xlat3.y = dot(vec2<f32>(x_1596.x, x_1596.y), vec2<f32>(x_1598.x, x_1598.y));
  let x_1602 : vec4<f32> = u_xlat10;
  let x_1604 : vec4<f32> = u_xlat1;
  u_xlat3.x = dot(vec2<f32>(x_1602.z, x_1602.w), vec2<f32>(x_1604.x, x_1604.y));
  let x_1608 : vec3<f32> = u_xlat13;
  let x_1610 : vec4<f32> = u_xlat3;
  let x_1612 : vec2<f32> = (vec2<f32>(x_1608.x, x_1608.y) * vec2<f32>(x_1610.x, x_1610.w));
  let x_1613 : vec3<f32> = u_xlat19;
  u_xlat19 = vec3<f32>(x_1612.x, x_1612.y, x_1613.z);
  let x_1615 : vec3<f32> = u_xlat13;
  let x_1617 : vec4<f32> = u_xlat3;
  let x_1619 : vec2<f32> = (vec2<f32>(x_1615.x, x_1615.y) * vec2<f32>(x_1617.y, x_1617.z));
  let x_1620 : vec4<f32> = u_xlat1;
  u_xlat1 = vec4<f32>(x_1619.x, x_1619.y, x_1620.z, x_1620.w);
  let x_1622 : vec4<f32> = u_xlat1;
  let x_1624 : vec4<f32> = u_xlat1;
  u_xlat1.x = dot(vec2<f32>(x_1622.x, x_1622.y), vec2<f32>(x_1624.x, x_1624.y));
  let x_1628 : f32 = u_xlat57;
  let x_1630 : f32 = u_xlat1.x;
  u_xlat1.x = min(x_1628, x_1630);
  let x_1633 : vec3<f32> = u_xlat19;
  let x_1635 : vec3<f32> = u_xlat19;
  u_xlat19.x = dot(vec2<f32>(x_1633.x, x_1633.y), vec2<f32>(x_1635.x, x_1635.y));
  let x_1639 : f32 = u_xlat57;
  let x_1641 : f32 = u_xlat19.x;
  u_xlat19.x = min(x_1639, x_1641);
  let x_1645 : f32 = u_xlat13.z;
  let x_1647 : f32 = u_xlat1.x;
  u_xlat38.x = ((x_1645 * x_1647) + -1.0f);
  let x_1652 : f32 = u_xlat1.x;
  u_xlat38.y = ((x_1652 * 0.400000006f) + -1.0f);
  let x_1656 : vec2<f32> = u_xlat38;
  let x_1657 : vec2<f32> = u_xlat38;
  u_xlat38 = (x_1656 * x_1657);
  let x_1660 : f32 = u_xlat38.y;
  u_xlat57 = ((x_1660 * 1.5625f) + -0.5625f);
  let x_1664 : f32 = u_xlat13.z;
  let x_1666 : f32 = u_xlat19.x;
  u_xlat1.x = ((x_1664 * x_1666) + -1.0f);
  let x_1671 : f32 = u_xlat19.x;
  u_xlat19.x = ((x_1671 * 0.400000006f) + -1.0f);
  let x_1676 : f32 = u_xlat19.x;
  let x_1678 : f32 = u_xlat19.x;
  u_xlat19.x = (x_1676 * x_1678);
  let x_1682 : f32 = u_xlat19.x;
  u_xlat19.x = ((x_1682 * 1.5625f) + -0.5625f);
  let x_1687 : f32 = u_xlat1.x;
  let x_1689 : f32 = u_xlat1.x;
  u_xlat1.x = (x_1687 * x_1689);
  let x_1693 : f32 = u_xlat38.x;
  let x_1694 : f32 = u_xlat57;
  u_xlat20.x = (x_1693 * x_1694);
  let x_1697 : f32 = u_xlat57;
  let x_1699 : f32 = u_xlat38.x;
  let x_1702 : f32 = u_xlat0.x;
  u_xlat0.x = ((x_1697 * x_1699) + x_1702);
  let x_1706 : f32 = u_xlat19.x;
  let x_1708 : f32 = u_xlat1.x;
  let x_1711 : f32 = u_xlat0.x;
  u_xlat0.x = ((x_1706 * x_1708) + x_1711);
  let x_1715 : f32 = u_xlat19.x;
  let x_1717 : f32 = u_xlat1.x;
  u_xlat19.x = (x_1715 * x_1717);
  let x_1721 : f32 = u_xlat0.x;
  u_xlat0.x = (1.0f / x_1721);
  let x_1725 : f32 = u_xlat31.x;
  u_xlat16.x = x_1725;
  let x_1728 : f32 = u_xlat31.z;
  u_xlat17.x = x_1728;
  let x_1731 : f32 = u_xlat16.w;
  u_xlat17.y = x_1731;
  let x_1734 : f32 = u_xlat17.w;
  u_xlat16.z = x_1734;
  let x_1736 : vec4<f32> = u_xlat16;
  let x_1738 : vec2<f32> = u_xlat20;
  let x_1741 : vec3<f32> = u_xlat2;
  let x_1742 : vec3<f32> = ((vec3<f32>(x_1736.x, x_1736.y, x_1736.z) * vec3<f32>(x_1738.x, x_1738.x, x_1738.x)) + x_1741);
  let x_1743 : vec4<f32> = u_xlat1;
  u_xlat1 = vec4<f32>(x_1742.x, x_1742.y, x_1742.z, x_1743.w);
  let x_1745 : vec4<f32> = u_xlat17;
  let x_1747 : vec3<f32> = u_xlat19;
  let x_1750 : vec4<f32> = u_xlat1;
  u_xlat19 = ((vec3<f32>(x_1745.x, x_1745.y, x_1745.z) * vec3<f32>(x_1747.x, x_1747.x, x_1747.x)) + vec3<f32>(x_1750.x, x_1750.y, x_1750.z));
  let x_1753 : vec3<f32> = u_xlat0;
  let x_1755 : vec3<f32> = u_xlat19;
  u_xlat0 = (vec3<f32>(x_1753.x, x_1753.x, x_1753.x) * x_1755);
  let x_1757 : vec4<f32> = u_xlat8;
  let x_1759 : vec4<f32> = u_xlat5;
  let x_1761 : vec3<f32> = min(vec3<f32>(x_1757.x, x_1757.y, x_1757.z), vec3<f32>(x_1759.x, x_1759.y, x_1759.z));
  let x_1762 : vec4<f32> = u_xlat1;
  u_xlat1 = vec4<f32>(x_1761.x, x_1761.y, x_1761.z, x_1762.w);
  let x_1764 : vec4<f32> = u_xlat8;
  let x_1766 : vec4<f32> = u_xlat5;
  u_xlat2 = max(vec3<f32>(x_1764.x, x_1764.y, x_1764.z), vec3<f32>(x_1766.x, x_1766.y, x_1766.z));
  let x_1769 : vec3<f32> = u_xlat2;
  let x_1770 : vec4<f32> = u_xlat4;
  u_xlat2 = max(x_1769, vec3<f32>(x_1770.x, x_1770.y, x_1770.z));
  let x_1773 : vec4<f32> = u_xlat1;
  let x_1775 : vec4<f32> = u_xlat4;
  let x_1777 : vec3<f32> = min(vec3<f32>(x_1773.x, x_1773.y, x_1773.z), vec3<f32>(x_1775.x, x_1775.y, x_1775.z));
  let x_1778 : vec4<f32> = u_xlat1;
  u_xlat1 = vec4<f32>(x_1777.x, x_1777.y, x_1777.z, x_1778.w);
  let x_1780 : vec4<f32> = u_xlat9;
  let x_1782 : vec4<f32> = u_xlat1;
  let x_1784 : vec3<f32> = min(vec3<f32>(x_1780.x, x_1780.y, x_1780.z), vec3<f32>(x_1782.x, x_1782.y, x_1782.z));
  let x_1785 : vec4<f32> = u_xlat1;
  u_xlat1 = vec4<f32>(x_1784.x, x_1784.y, x_1784.z, x_1785.w);
  let x_1787 : vec4<f32> = u_xlat9;
  let x_1789 : vec3<f32> = u_xlat2;
  u_xlat2 = max(vec3<f32>(x_1787.x, x_1787.y, x_1787.z), x_1789);
  let x_1791 : vec3<f32> = u_xlat0;
  let x_1792 : vec4<f32> = u_xlat1;
  u_xlat0 = max(x_1791, vec3<f32>(x_1792.x, x_1792.y, x_1792.z));
  let x_1795 : vec3<f32> = u_xlat0;
  let x_1796 : vec3<f32> = u_xlat2;
  u_xlat0 = min(x_1795, x_1796);
  let x_1800 : vec3<f32> = u_xlat0;
  let x_1801 : vec3<f32> = u_xlat0;
  let x_1802 : vec3<f32> = (x_1800 * x_1801);
  let x_1803 : vec4<f32> = SV_Target0;
  SV_Target0 = vec4<f32>(x_1802.x, x_1802.y, x_1802.z, x_1803.w);
  SV_Target0.w = 1.0f;
  return;
}

struct main_out {
  @location(0)
  SV_Target0_1 : vec4<f32>,
}

@fragment
fn main(@location(0) vs_TEXCOORD0_param : vec2<f32>, @builtin(position) gl_FragCoord_param : vec4<f32>) -> main_out {
  vs_TEXCOORD0 = vs_TEXCOORD0_param;
  gl_FragCoord = gl_FragCoord_param;
  main_1();
  return main_out(SV_Target0);
}

