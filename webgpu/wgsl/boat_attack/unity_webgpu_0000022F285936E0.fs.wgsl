type Arr = array<vec4<f32>, 2u>;

type Arr_1 = array<mat4x4<f32>, 2u>;

type Arr_2 = array<vec4<f32>, 2u>;

type Arr_3 = array<vec4<f32>, 2u>;

type Arr_4 = array<vec4<f32>, 2u>;

struct PGlobals {
  x_GlobalMipBias : vec2<f32>,
  @size(8)
  padding : u32,
  x_ProjectionParams : vec4<f32>,
  x_SSAOParams : vec4<f32>,
  x_CameraViewTopLeftCorner : Arr_4,
  x_CameraViewProjections : Arr_1,
  x_CameraViewXExtent : Arr_4,
  x_CameraViewYExtent : Arr_4,
  x_CameraViewZExtent : Arr_4,
  x_SSAOBlueNoiseParams : vec4<f32>,
}

@group(0) @binding(0) var x_CameraDepthTexture : texture_2d<f32>;

@group(0) @binding(3) var sampler_CameraDepthTexture : sampler;

var<private> vs_TEXCOORD0 : vec2<f32>;

@group(1) @binding(0) var<uniform> x_34 : PGlobals;

var<private> SV_Target0 : vec4<f32>;

@group(0) @binding(1) var x_BlueNoiseTexture : texture_2d<f32>;

@group(0) @binding(2) var sampler_PointRepeat : sampler;

var<private> gl_FragCoord : vec4<f32>;

fn main_1() {
  var u_xlat0 : f32;
  var u_xlatb7 : bool;
  var u_xlat7 : vec3<f32>;
  var u_xlatb14 : bool;
  var u_xlat14 : vec2<f32>;
  var u_xlat21 : f32;
  var u_xlat1 : vec3<f32>;
  var u_xlat2 : vec3<f32>;
  var u_xlat3 : vec4<f32>;
  var u_xlat4 : vec3<f32>;
  var u_xlat22 : f32;
  var u_xlat23 : f32;
  var u_xlat5 : vec3<f32>;
  var u_xlatb22 : bool;
  var u_xlat10 : vec3<f32>;
  var u_xlat17 : f32;
  var u_xlatb17 : bool;
  var u_xlatb3 : bool;
  var u_xlat11 : vec3<f32>;
  var u_xlat18 : f32;
  var u_xlatb4 : vec3<bool>;
  var u_xlat6 : f32;
  var u_xlatb23 : bool;
  var u_xlat24 : f32;
  var u_xlatb24 : bool;
  var u_xlatb11 : bool;
  var u_xlat_precise_vec4 : vec4<f32>;
  var u_xlat_precise_ivec4 : vec4<i32>;
  var u_xlat_precise_bvec4 : vec4<bool>;
  var u_xlat_precise_uvec4 : vec4<u32>;
  let x_22 : vec2<f32> = vs_TEXCOORD0;
  let x_40 : f32 = x_34.x_GlobalMipBias.x;
  let x_41 : vec4<f32> = textureSampleBias(x_CameraDepthTexture, sampler_CameraDepthTexture, x_22, x_40);
  u_xlat0 = x_41.x;
  let x_46 : f32 = u_xlat0;
  u_xlatb7 = (x_46 < 0.00001f);
  let x_49 : bool = u_xlatb7;
  if (x_49) {
    SV_Target0 = vec4<f32>(0.0f, 0.5f, 0.5f, 0.5f);
    return;
  }
  let x_64 : f32 = x_34.x_ProjectionParams.y;
  let x_67 : f32 = x_34.x_ProjectionParams.z;
  u_xlat7.x = (-(x_64) + x_67);
  let x_71 : f32 = u_xlat7.x;
  let x_73 : f32 = u_xlat0;
  let x_76 : f32 = x_34.x_ProjectionParams.z;
  u_xlat0 = ((-(x_71) * x_73) + x_76);
  let x_82 : f32 = x_34.x_SSAOParams.w;
  let x_83 : f32 = u_xlat0;
  u_xlatb14 = (x_82 < x_83);
  let x_85 : bool = u_xlatb14;
  if (x_85) {
    SV_Target0 = vec4<f32>(0.0f, 0.5f, 0.5f, 0.5f);
    return;
  }
  let x_93 : f32 = vs_TEXCOORD0.y;
  u_xlat14.x = (-(x_93) + 1.0f);
  let x_99 : f32 = u_xlat0;
  let x_101 : f32 = x_34.x_ProjectionParams.w;
  u_xlat21 = (x_99 * x_101);
  let x_107 : vec4<f32> = x_34.x_CameraViewXExtent[0i];
  let x_109 : vec2<f32> = vs_TEXCOORD0;
  let x_114 : vec4<f32> = x_34.x_CameraViewTopLeftCorner[0i];
  u_xlat1 = ((vec3<f32>(x_107.x, x_107.y, x_107.z) * vec3<f32>(x_109.x, x_109.x, x_109.x)) + vec3<f32>(x_114.x, x_114.y, x_114.z));
  let x_119 : vec4<f32> = x_34.x_CameraViewYExtent[0i];
  let x_121 : vec2<f32> = u_xlat14;
  let x_124 : vec3<f32> = u_xlat1;
  u_xlat1 = ((vec3<f32>(x_119.x, x_119.y, x_119.z) * vec3<f32>(x_121.x, x_121.x, x_121.x)) + x_124);
  let x_128 : vec4<f32> = x_34.x_CameraViewZExtent[0i];
  let x_130 : f32 = u_xlat21;
  let x_133 : vec3<f32> = u_xlat1;
  u_xlat1 = ((vec3<f32>(x_128.x, x_128.y, x_128.z) * vec3<f32>(x_130, x_130, x_130)) + x_133);
  let x_136 : vec3<f32> = u_xlat1;
  u_xlat2 = dpdyCoarse(vec3<f32>(x_136.z, x_136.x, x_136.y));
  let x_141 : vec3<f32> = u_xlat1;
  let x_143 : vec3<f32> = dpdxCoarse(vec3<f32>(x_141.y, x_141.z, x_141.x));
  let x_144 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_143.x, x_143.y, x_143.z, x_144.w);
  let x_147 : vec3<f32> = u_xlat2;
  let x_148 : vec4<f32> = u_xlat3;
  u_xlat4 = (x_147 * vec3<f32>(x_148.x, x_148.y, x_148.z));
  let x_151 : vec3<f32> = u_xlat2;
  let x_153 : vec4<f32> = u_xlat3;
  let x_156 : vec3<f32> = u_xlat4;
  u_xlat2 = ((vec3<f32>(x_151.z, x_151.x, x_151.y) * vec3<f32>(x_153.y, x_153.z, x_153.x)) + -(x_156));
  let x_159 : vec3<f32> = u_xlat2;
  let x_160 : vec3<f32> = u_xlat2;
  u_xlat14.x = dot(x_159, x_160);
  let x_164 : f32 = u_xlat14.x;
  u_xlat14.x = inverseSqrt(x_164);
  let x_167 : vec2<f32> = u_xlat14;
  let x_169 : vec3<f32> = u_xlat2;
  u_xlat2 = (vec3<f32>(x_167.x, x_167.x, x_167.x) * x_169);
  let x_171 : vec2<f32> = vs_TEXCOORD0;
  let x_174 : vec4<f32> = x_34.x_SSAOBlueNoiseParams;
  u_xlat14 = (x_171 + vec2<f32>(x_174.z, x_174.w));
  let x_177 : vec2<f32> = u_xlat14;
  let x_179 : vec4<f32> = x_34.x_SSAOBlueNoiseParams;
  let x_181 : vec2<f32> = (x_177 * vec2<f32>(x_179.x, x_179.y));
  let x_182 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_181.x, x_181.y, x_182.z, x_182.w);
  let x_190 : vec4<f32> = u_xlat3;
  let x_193 : f32 = x_34.x_GlobalMipBias.x;
  let x_194 : vec4<f32> = textureSampleBias(x_BlueNoiseTexture, sampler_PointRepeat, vec2<f32>(x_190.x, x_190.y), x_193);
  u_xlat22 = x_194.w;
  let x_197 : f32 = u_xlat22;
  u_xlat23 = fract(x_197);
  let x_199 : f32 = u_xlat23;
  u_xlat3.z = ((x_199 * 2.0f) + -1.0f);
  let x_205 : f32 = u_xlat22;
  u_xlat22 = (x_205 + 0.9296875f);
  let x_208 : f32 = u_xlat22;
  u_xlat22 = (x_208 * 628.31854248f);
  let x_212 : f32 = u_xlat3.z;
  let x_215 : f32 = u_xlat3.z;
  u_xlat23 = ((-(x_212) * x_215) + 1.0f);
  let x_218 : f32 = u_xlat23;
  u_xlat23 = sqrt(x_218);
  let x_220 : f32 = u_xlat22;
  u_xlat4.x = sin(x_220);
  let x_224 : f32 = u_xlat22;
  u_xlat5.x = cos(x_224);
  let x_227 : f32 = u_xlat23;
  let x_229 : f32 = u_xlat5.x;
  u_xlat3.x = (x_227 * x_229);
  let x_232 : f32 = u_xlat23;
  let x_234 : f32 = u_xlat4.x;
  u_xlat3.y = (x_232 * x_234);
  let x_237 : vec3<f32> = u_xlat2;
  let x_238 : vec4<f32> = u_xlat3;
  u_xlat22 = dot(x_237, vec3<f32>(x_238.x, x_238.y, x_238.z));
  let x_242 : f32 = u_xlat22;
  u_xlatb22 = (x_242 >= 0.0f);
  let x_244 : bool = u_xlatb22;
  u_xlat22 = select(-1.0f, 1.0f, x_244);
  let x_246 : f32 = u_xlat22;
  let x_248 : vec4<f32> = u_xlat3;
  let x_250 : vec3<f32> = (vec3<f32>(x_246, x_246, x_246) * vec3<f32>(x_248.x, x_248.y, x_248.z));
  let x_251 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_250.x, x_250.y, x_250.z, x_251.w);
  let x_253 : vec4<f32> = u_xlat3;
  let x_256 : vec4<f32> = x_34.x_SSAOParams;
  let x_258 : vec3<f32> = (vec3<f32>(x_253.x, x_253.y, x_253.z) * vec3<f32>(x_256.y, x_256.y, x_256.y));
  let x_259 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_258.x, x_258.y, x_258.z, x_259.w);
  let x_261 : vec4<f32> = u_xlat3;
  let x_266 : vec3<f32> = u_xlat1;
  let x_267 : vec3<f32> = ((vec3<f32>(x_261.x, x_261.y, x_261.z) * vec3<f32>(0.100000001f, 0.100000001f, 0.100000001f)) + x_266);
  let x_268 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_267.x, x_267.y, x_267.z, x_268.w);
  let x_271 : vec4<f32> = u_xlat3;
  let x_275 : vec4<f32> = x_34.x_CameraViewProjections[0i][1i];
  let x_277 : vec2<f32> = (vec2<f32>(x_271.y, x_271.y) * vec2<f32>(x_275.x, x_275.y));
  let x_278 : vec3<f32> = u_xlat10;
  u_xlat10 = vec3<f32>(x_277.x, x_278.y, x_277.y);
  let x_281 : vec4<f32> = x_34.x_CameraViewProjections[0i][0i];
  let x_283 : vec4<f32> = u_xlat3;
  let x_286 : vec3<f32> = u_xlat10;
  let x_288 : vec2<f32> = ((vec2<f32>(x_281.x, x_281.y) * vec2<f32>(x_283.x, x_283.x)) + vec2<f32>(x_286.x, x_286.z));
  let x_289 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_288.x, x_288.y, x_289.z, x_289.w);
  let x_292 : vec4<f32> = x_34.x_CameraViewProjections[0i][2i];
  let x_294 : vec4<f32> = u_xlat3;
  let x_297 : vec4<f32> = u_xlat3;
  let x_299 : vec2<f32> = ((vec2<f32>(x_292.x, x_292.y) * vec2<f32>(x_294.z, x_294.z)) + vec2<f32>(x_297.x, x_297.y));
  let x_300 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_299.x, x_299.y, x_300.z, x_300.w);
  let x_302 : vec4<f32> = u_xlat3;
  let x_305 : vec2<f32> = (vec2<f32>(x_302.x, x_302.y) + vec2<f32>(1.0f, 1.0f));
  let x_306 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_305.x, x_305.y, x_306.z, x_306.w);
  let x_308 : vec4<f32> = u_xlat3;
  let x_311 : vec2<f32> = (vec2<f32>(x_308.x, x_308.y) * vec2<f32>(0.5f, 0.5f));
  let x_312 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_311.x, x_311.y, x_312.z, x_312.w);
  let x_314 : vec4<f32> = u_xlat3;
  let x_318 : vec2<f32> = clamp(vec2<f32>(x_314.x, x_314.y), vec2<f32>(0.0f, 0.0f), vec2<f32>(1.0f, 1.0f));
  let x_319 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_318.x, x_318.y, x_319.z, x_319.w);
  let x_324 : vec4<f32> = u_xlat3;
  let x_327 : f32 = x_34.x_GlobalMipBias.x;
  let x_328 : vec4<f32> = textureSampleBias(x_CameraDepthTexture, sampler_CameraDepthTexture, vec2<f32>(x_324.x, x_324.y), x_327);
  u_xlat22 = x_328.x;
  let x_331 : f32 = u_xlat7.x;
  let x_333 : f32 = u_xlat22;
  let x_336 : f32 = x_34.x_ProjectionParams.z;
  u_xlat23 = ((-(x_331) * x_333) + x_336);
  let x_339 : f32 = u_xlat0;
  let x_340 : f32 = u_xlat23;
  u_xlat17 = (x_339 + -(x_340));
  let x_344 : f32 = u_xlat17;
  let x_347 : f32 = x_34.x_SSAOParams.y;
  u_xlatb17 = (abs(x_344) < x_347);
  let x_349 : bool = u_xlatb17;
  u_xlat17 = select(0.0f, 1.0f, x_349);
  let x_351 : f32 = u_xlat22;
  u_xlatb22 = (0.00001f < x_351);
  let x_353 : bool = u_xlatb22;
  u_xlat22 = select(0.0f, 1.0f, x_353);
  let x_355 : f32 = u_xlat22;
  let x_356 : f32 = u_xlat17;
  u_xlat22 = (x_355 * x_356);
  let x_359 : f32 = u_xlat3.y;
  u_xlat10.x = (-(x_359) + 1.0f);
  let x_363 : f32 = u_xlat23;
  let x_365 : f32 = x_34.x_ProjectionParams.w;
  u_xlat23 = (x_363 * x_365);
  let x_368 : vec4<f32> = x_34.x_CameraViewXExtent[0i];
  let x_370 : vec4<f32> = u_xlat3;
  let x_374 : vec4<f32> = x_34.x_CameraViewTopLeftCorner[0i];
  let x_376 : vec3<f32> = ((vec3<f32>(x_368.x, x_368.y, x_368.z) * vec3<f32>(x_370.x, x_370.x, x_370.x)) + vec3<f32>(x_374.x, x_374.y, x_374.z));
  let x_377 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_376.x, x_377.y, x_376.y, x_376.z);
  let x_380 : vec4<f32> = x_34.x_CameraViewYExtent[0i];
  let x_382 : vec3<f32> = u_xlat10;
  let x_385 : vec4<f32> = u_xlat3;
  let x_387 : vec3<f32> = ((vec3<f32>(x_380.x, x_380.y, x_380.z) * vec3<f32>(x_382.x, x_382.x, x_382.x)) + vec3<f32>(x_385.x, x_385.z, x_385.w));
  let x_388 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_387.x, x_387.y, x_387.z, x_388.w);
  let x_391 : vec4<f32> = x_34.x_CameraViewZExtent[0i];
  let x_393 : f32 = u_xlat23;
  let x_396 : vec4<f32> = u_xlat3;
  let x_398 : vec3<f32> = ((vec3<f32>(x_391.x, x_391.y, x_391.z) * vec3<f32>(x_393, x_393, x_393)) + vec3<f32>(x_396.x, x_396.y, x_396.z));
  let x_399 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_398.x, x_398.y, x_398.z, x_399.w);
  let x_401 : vec3<f32> = u_xlat1;
  let x_403 : vec4<f32> = u_xlat3;
  let x_405 : vec3<f32> = (-(x_401) + vec3<f32>(x_403.x, x_403.y, x_403.z));
  let x_406 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_405.x, x_405.y, x_405.z, x_406.w);
  let x_408 : vec4<f32> = u_xlat3;
  let x_410 : vec3<f32> = u_xlat2;
  u_xlat23 = dot(vec3<f32>(x_408.x, x_408.y, x_408.z), x_410);
  let x_412 : f32 = u_xlat0;
  let x_416 : f32 = u_xlat23;
  u_xlat23 = ((-(x_412) * 0.004f) + x_416);
  let x_418 : f32 = u_xlat23;
  u_xlat23 = max(x_418, 0.0f);
  let x_420 : vec4<f32> = u_xlat3;
  let x_422 : vec4<f32> = u_xlat3;
  u_xlat3.x = dot(vec3<f32>(x_420.x, x_420.y, x_420.z), vec3<f32>(x_422.x, x_422.y, x_422.z));
  let x_427 : f32 = u_xlat3.x;
  u_xlat3.x = (x_427 + 0.0001f);
  let x_432 : f32 = u_xlat3.x;
  u_xlat3.x = (1.0f / x_432);
  let x_435 : f32 = u_xlat23;
  let x_437 : f32 = u_xlat3.x;
  u_xlat23 = (x_435 * x_437);
  let x_439 : vec2<f32> = u_xlat14;
  let x_442 : vec4<f32> = x_34.x_SSAOBlueNoiseParams;
  u_xlat3 = ((vec4<f32>(x_439.x, x_439.y, x_439.x, x_439.y) * vec4<f32>(x_442.x, x_442.y, x_442.x, x_442.y)) + vec4<f32>(0.125f, 0.125f, 0.25f, 0.25f));
  let x_452 : vec4<f32> = u_xlat3;
  let x_455 : f32 = x_34.x_GlobalMipBias.x;
  let x_456 : vec4<f32> = textureSampleBias(x_BlueNoiseTexture, sampler_PointRepeat, vec2<f32>(x_452.x, x_452.y), x_455);
  u_xlat3.x = x_456.w;
  let x_459 : vec4<f32> = u_xlat3;
  let x_464 : vec2<f32> = (vec2<f32>(x_459.x, x_459.x) + vec2<f32>(0.33984375f, 0.76171875f));
  let x_465 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_464.x, x_464.y, x_465.z, x_465.w);
  let x_468 : f32 = u_xlat3.x;
  u_xlat3.x = fract(x_468);
  let x_472 : f32 = u_xlat3.x;
  u_xlat4.z = ((x_472 * 2.0f) + -1.0f);
  let x_477 : f32 = u_xlat3.y;
  u_xlat3.x = (x_477 * 628.31854248f);
  let x_481 : f32 = u_xlat4.z;
  let x_484 : f32 = u_xlat4.z;
  u_xlat10.x = ((-(x_481) * x_484) + 1.0f);
  let x_489 : f32 = u_xlat10.x;
  u_xlat10.x = sqrt(x_489);
  let x_493 : f32 = u_xlat3.x;
  u_xlat5.x = cos(x_493);
  let x_497 : f32 = u_xlat3.x;
  u_xlat3.x = sin(x_497);
  let x_501 : f32 = u_xlat10.x;
  let x_503 : f32 = u_xlat5.x;
  u_xlat4.x = (x_501 * x_503);
  let x_507 : f32 = u_xlat3.x;
  let x_509 : f32 = u_xlat10.x;
  u_xlat4.y = (x_507 * x_509);
  let x_512 : vec3<f32> = u_xlat2;
  let x_513 : vec3<f32> = u_xlat4;
  u_xlat3.x = dot(x_512, x_513);
  let x_518 : f32 = u_xlat3.x;
  u_xlatb3 = (x_518 >= 0.0f);
  let x_520 : bool = u_xlatb3;
  u_xlat3.x = select(-1.0f, 1.0f, x_520);
  let x_523 : vec4<f32> = u_xlat3;
  let x_525 : vec3<f32> = u_xlat4;
  u_xlat4 = (vec3<f32>(x_523.x, x_523.x, x_523.x) * x_525);
  let x_527 : vec3<f32> = u_xlat4;
  let x_529 : vec4<f32> = x_34.x_SSAOParams;
  u_xlat4 = (x_527 * vec3<f32>(x_529.y, x_529.y, x_529.y));
  let x_532 : vec3<f32> = u_xlat4;
  let x_536 : vec3<f32> = u_xlat1;
  u_xlat4 = ((x_532 * vec3<f32>(0.114062503f, 0.114062503f, 0.114062503f)) + x_536);
  let x_538 : vec3<f32> = u_xlat4;
  let x_541 : vec4<f32> = x_34.x_CameraViewProjections[0i][1i];
  let x_543 : vec2<f32> = (vec2<f32>(x_538.y, x_538.y) * vec2<f32>(x_541.x, x_541.y));
  let x_544 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_543.x, x_543.y, x_544.z, x_544.w);
  let x_547 : vec4<f32> = x_34.x_CameraViewProjections[0i][0i];
  let x_549 : vec3<f32> = u_xlat4;
  let x_552 : vec4<f32> = u_xlat3;
  let x_554 : vec2<f32> = ((vec2<f32>(x_547.x, x_547.y) * vec2<f32>(x_549.x, x_549.x)) + vec2<f32>(x_552.x, x_552.y));
  let x_555 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_554.x, x_554.y, x_555.z, x_555.w);
  let x_558 : vec4<f32> = x_34.x_CameraViewProjections[0i][2i];
  let x_560 : vec3<f32> = u_xlat4;
  let x_563 : vec4<f32> = u_xlat3;
  let x_565 : vec2<f32> = ((vec2<f32>(x_558.x, x_558.y) * vec2<f32>(x_560.z, x_560.z)) + vec2<f32>(x_563.x, x_563.y));
  let x_566 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_565.x, x_565.y, x_566.z, x_566.w);
  let x_568 : vec4<f32> = u_xlat3;
  let x_570 : vec2<f32> = (vec2<f32>(x_568.x, x_568.y) + vec2<f32>(1.0f, 1.0f));
  let x_571 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_570.x, x_570.y, x_571.z, x_571.w);
  let x_573 : vec4<f32> = u_xlat3;
  let x_575 : vec2<f32> = (vec2<f32>(x_573.x, x_573.y) * vec2<f32>(0.5f, 0.5f));
  let x_576 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_575.x, x_575.y, x_576.z, x_576.w);
  let x_578 : vec4<f32> = u_xlat3;
  let x_582 : vec2<f32> = clamp(vec2<f32>(x_578.x, x_578.y), vec2<f32>(0.0f, 0.0f), vec2<f32>(1.0f, 1.0f));
  let x_583 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_582.x, x_582.y, x_583.z, x_583.w);
  let x_588 : vec4<f32> = u_xlat3;
  let x_591 : f32 = x_34.x_GlobalMipBias.x;
  let x_592 : vec4<f32> = textureSampleBias(x_CameraDepthTexture, sampler_CameraDepthTexture, vec2<f32>(x_588.x, x_588.y), x_591);
  u_xlat4.x = x_592.x;
  let x_597 : f32 = u_xlat7.x;
  let x_600 : f32 = u_xlat4.x;
  let x_603 : f32 = x_34.x_ProjectionParams.z;
  u_xlat11.x = ((-(x_597) * x_600) + x_603);
  let x_607 : f32 = u_xlat0;
  let x_609 : f32 = u_xlat11.x;
  u_xlat18 = (x_607 + -(x_609));
  let x_615 : f32 = u_xlat18;
  let x_618 : f32 = x_34.x_SSAOParams.y;
  u_xlatb4.z = (abs(x_615) < x_618);
  let x_622 : f32 = u_xlat4.x;
  u_xlatb4.x = (0.00001f < x_622);
  let x_626 : bool = u_xlatb4.x;
  u_xlat4.x = select(0.0f, 1.0f, x_626);
  let x_630 : bool = u_xlatb4.z;
  u_xlat4.z = select(0.0f, 1.0f, x_630);
  let x_634 : f32 = u_xlat4.x;
  let x_636 : f32 = u_xlat4.z;
  u_xlat4.x = (x_634 * x_636);
  let x_640 : f32 = u_xlat3.y;
  u_xlat10.x = (-(x_640) + 1.0f);
  let x_645 : f32 = u_xlat11.x;
  let x_647 : f32 = x_34.x_ProjectionParams.w;
  u_xlat11.x = (x_645 * x_647);
  let x_651 : vec4<f32> = x_34.x_CameraViewXExtent[0i];
  let x_653 : vec4<f32> = u_xlat3;
  let x_657 : vec4<f32> = x_34.x_CameraViewTopLeftCorner[0i];
  u_xlat5 = ((vec3<f32>(x_651.x, x_651.y, x_651.z) * vec3<f32>(x_653.x, x_653.x, x_653.x)) + vec3<f32>(x_657.x, x_657.y, x_657.z));
  let x_661 : vec4<f32> = x_34.x_CameraViewYExtent[0i];
  let x_663 : vec3<f32> = u_xlat10;
  let x_666 : vec3<f32> = u_xlat5;
  u_xlat5 = ((vec3<f32>(x_661.x, x_661.y, x_661.z) * vec3<f32>(x_663.x, x_663.x, x_663.x)) + x_666);
  let x_669 : vec4<f32> = x_34.x_CameraViewZExtent[0i];
  let x_671 : vec3<f32> = u_xlat11;
  let x_674 : vec3<f32> = u_xlat5;
  u_xlat11 = ((vec3<f32>(x_669.x, x_669.y, x_669.z) * vec3<f32>(x_671.x, x_671.x, x_671.x)) + x_674);
  let x_676 : vec3<f32> = u_xlat1;
  let x_678 : vec3<f32> = u_xlat11;
  u_xlat11 = (-(x_676) + x_678);
  let x_680 : vec3<f32> = u_xlat11;
  let x_681 : vec3<f32> = u_xlat2;
  u_xlat3.x = dot(x_680, x_681);
  let x_684 : f32 = u_xlat0;
  let x_688 : f32 = u_xlat3.x;
  u_xlat3.x = ((-(x_684) * 0.004f) + x_688);
  let x_692 : f32 = u_xlat3.x;
  u_xlat3.x = max(x_692, 0.0f);
  let x_695 : vec3<f32> = u_xlat11;
  let x_696 : vec3<f32> = u_xlat11;
  u_xlat10.x = dot(x_695, x_696);
  let x_700 : f32 = u_xlat10.x;
  u_xlat10.x = (x_700 + 0.0001f);
  let x_704 : f32 = u_xlat10.x;
  u_xlat10.x = (1.0f / x_704);
  let x_708 : f32 = u_xlat10.x;
  let x_710 : f32 = u_xlat3.x;
  u_xlat3.x = (x_708 * x_710);
  let x_714 : f32 = u_xlat4.x;
  let x_716 : f32 = u_xlat3.x;
  u_xlat3.x = (x_714 * x_716);
  let x_719 : f32 = u_xlat23;
  let x_720 : f32 = u_xlat22;
  let x_723 : f32 = u_xlat3.x;
  u_xlat22 = ((x_719 * x_720) + x_723);
  let x_728 : vec4<f32> = u_xlat3;
  let x_731 : f32 = x_34.x_GlobalMipBias.x;
  let x_732 : vec4<f32> = textureSampleBias(x_BlueNoiseTexture, sampler_PointRepeat, vec2<f32>(x_728.z, x_728.w), x_731);
  u_xlat23 = x_732.w;
  let x_734 : f32 = u_xlat23;
  let x_739 : vec2<f32> = (vec2<f32>(x_734, x_734) + vec2<f32>(0.75390625f, 0.133333296f));
  let x_740 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_739.x, x_739.y, x_740.z, x_740.w);
  let x_743 : f32 = u_xlat3.x;
  u_xlat23 = fract(x_743);
  let x_745 : f32 = u_xlat23;
  u_xlat4.z = ((x_745 * 2.0f) + -1.0f);
  let x_750 : f32 = u_xlat3.y;
  u_xlat23 = (x_750 * 628.31854248f);
  let x_753 : f32 = u_xlat4.z;
  let x_756 : f32 = u_xlat4.z;
  u_xlat3.x = ((-(x_753) * x_756) + 1.0f);
  let x_761 : f32 = u_xlat3.x;
  u_xlat3.x = sqrt(x_761);
  let x_764 : f32 = u_xlat23;
  u_xlat5.x = sin(x_764);
  let x_768 : f32 = u_xlat23;
  u_xlat6 = cos(x_768);
  let x_771 : f32 = u_xlat3.x;
  let x_772 : f32 = u_xlat6;
  u_xlat4.x = (x_771 * x_772);
  let x_776 : f32 = u_xlat3.x;
  let x_778 : f32 = u_xlat5.x;
  u_xlat4.y = (x_776 * x_778);
  let x_781 : vec3<f32> = u_xlat2;
  let x_782 : vec3<f32> = u_xlat4;
  u_xlat23 = dot(x_781, x_782);
  let x_785 : f32 = u_xlat23;
  u_xlatb23 = (x_785 >= 0.0f);
  let x_787 : bool = u_xlatb23;
  u_xlat23 = select(-1.0f, 1.0f, x_787);
  let x_789 : f32 = u_xlat23;
  let x_791 : vec3<f32> = u_xlat4;
  let x_792 : vec3<f32> = (vec3<f32>(x_789, x_789, x_789) * x_791);
  let x_793 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_792.x, x_792.y, x_792.z, x_793.w);
  let x_795 : vec4<f32> = u_xlat3;
  let x_798 : vec4<f32> = x_34.x_SSAOParams;
  let x_800 : vec3<f32> = (vec3<f32>(x_795.x, x_795.y, x_795.z) * vec3<f32>(x_798.y, x_798.y, x_798.y));
  let x_801 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_800.x, x_800.y, x_800.z, x_801.w);
  let x_803 : vec4<f32> = u_xlat3;
  let x_808 : vec3<f32> = u_xlat1;
  let x_809 : vec3<f32> = ((vec3<f32>(x_803.x, x_803.y, x_803.z) * vec3<f32>(0.15625f, 0.15625f, 0.15625f)) + x_808);
  let x_810 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_809.x, x_809.y, x_809.z, x_810.w);
  let x_812 : vec4<f32> = u_xlat3;
  let x_815 : vec4<f32> = x_34.x_CameraViewProjections[0i][1i];
  let x_817 : vec2<f32> = (vec2<f32>(x_812.y, x_812.y) * vec2<f32>(x_815.x, x_815.y));
  let x_818 : vec3<f32> = u_xlat10;
  u_xlat10 = vec3<f32>(x_817.x, x_818.y, x_817.y);
  let x_821 : vec4<f32> = x_34.x_CameraViewProjections[0i][0i];
  let x_823 : vec4<f32> = u_xlat3;
  let x_826 : vec3<f32> = u_xlat10;
  let x_828 : vec2<f32> = ((vec2<f32>(x_821.x, x_821.y) * vec2<f32>(x_823.x, x_823.x)) + vec2<f32>(x_826.x, x_826.z));
  let x_829 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_828.x, x_828.y, x_829.z, x_829.w);
  let x_832 : vec4<f32> = x_34.x_CameraViewProjections[0i][2i];
  let x_834 : vec4<f32> = u_xlat3;
  let x_837 : vec4<f32> = u_xlat3;
  let x_839 : vec2<f32> = ((vec2<f32>(x_832.x, x_832.y) * vec2<f32>(x_834.z, x_834.z)) + vec2<f32>(x_837.x, x_837.y));
  let x_840 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_839.x, x_839.y, x_840.z, x_840.w);
  let x_842 : vec4<f32> = u_xlat3;
  let x_844 : vec2<f32> = (vec2<f32>(x_842.x, x_842.y) + vec2<f32>(1.0f, 1.0f));
  let x_845 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_844.x, x_844.y, x_845.z, x_845.w);
  let x_847 : vec4<f32> = u_xlat3;
  let x_849 : vec2<f32> = (vec2<f32>(x_847.x, x_847.y) * vec2<f32>(0.5f, 0.5f));
  let x_850 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_849.x, x_849.y, x_850.z, x_850.w);
  let x_852 : vec4<f32> = u_xlat3;
  let x_856 : vec2<f32> = clamp(vec2<f32>(x_852.x, x_852.y), vec2<f32>(0.0f, 0.0f), vec2<f32>(1.0f, 1.0f));
  let x_857 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_856.x, x_856.y, x_857.z, x_857.w);
  let x_862 : vec4<f32> = u_xlat3;
  let x_865 : f32 = x_34.x_GlobalMipBias.x;
  let x_866 : vec4<f32> = textureSampleBias(x_CameraDepthTexture, sampler_CameraDepthTexture, vec2<f32>(x_862.x, x_862.y), x_865);
  u_xlat23 = x_866.x;
  let x_869 : f32 = u_xlat7.x;
  let x_871 : f32 = u_xlat23;
  let x_874 : f32 = x_34.x_ProjectionParams.z;
  u_xlat17 = ((-(x_869) * x_871) + x_874);
  let x_877 : f32 = u_xlat0;
  let x_878 : f32 = u_xlat17;
  u_xlat24 = (x_877 + -(x_878));
  let x_882 : f32 = u_xlat24;
  let x_885 : f32 = x_34.x_SSAOParams.y;
  u_xlatb24 = (abs(x_882) < x_885);
  let x_887 : bool = u_xlatb24;
  u_xlat24 = select(0.0f, 1.0f, x_887);
  let x_889 : f32 = u_xlat23;
  u_xlatb23 = (0.00001f < x_889);
  let x_891 : bool = u_xlatb23;
  u_xlat23 = select(0.0f, 1.0f, x_891);
  let x_893 : f32 = u_xlat23;
  let x_894 : f32 = u_xlat24;
  u_xlat23 = (x_893 * x_894);
  let x_897 : f32 = u_xlat3.y;
  u_xlat10.x = (-(x_897) + 1.0f);
  let x_901 : f32 = u_xlat17;
  let x_903 : f32 = x_34.x_ProjectionParams.w;
  u_xlat17 = (x_901 * x_903);
  let x_906 : vec4<f32> = x_34.x_CameraViewXExtent[0i];
  let x_908 : vec4<f32> = u_xlat3;
  let x_912 : vec4<f32> = x_34.x_CameraViewTopLeftCorner[0i];
  u_xlat4 = ((vec3<f32>(x_906.x, x_906.y, x_906.z) * vec3<f32>(x_908.x, x_908.x, x_908.x)) + vec3<f32>(x_912.x, x_912.y, x_912.z));
  let x_916 : vec4<f32> = x_34.x_CameraViewYExtent[0i];
  let x_918 : vec3<f32> = u_xlat10;
  let x_921 : vec3<f32> = u_xlat4;
  let x_922 : vec3<f32> = ((vec3<f32>(x_916.x, x_916.y, x_916.z) * vec3<f32>(x_918.x, x_918.x, x_918.x)) + x_921);
  let x_923 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_922.x, x_922.y, x_923.z, x_922.z);
  let x_926 : vec4<f32> = x_34.x_CameraViewZExtent[0i];
  let x_928 : f32 = u_xlat17;
  let x_931 : vec4<f32> = u_xlat3;
  let x_933 : vec3<f32> = ((vec3<f32>(x_926.x, x_926.y, x_926.z) * vec3<f32>(x_928, x_928, x_928)) + vec3<f32>(x_931.x, x_931.y, x_931.w));
  let x_934 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_933.x, x_933.y, x_933.z, x_934.w);
  let x_936 : vec3<f32> = u_xlat1;
  let x_938 : vec4<f32> = u_xlat3;
  let x_940 : vec3<f32> = (-(x_936) + vec3<f32>(x_938.x, x_938.y, x_938.z));
  let x_941 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_940.x, x_940.y, x_940.z, x_941.w);
  let x_943 : vec4<f32> = u_xlat3;
  let x_945 : vec3<f32> = u_xlat2;
  u_xlat24 = dot(vec3<f32>(x_943.x, x_943.y, x_943.z), x_945);
  let x_947 : f32 = u_xlat0;
  let x_950 : f32 = u_xlat24;
  u_xlat24 = ((-(x_947) * 0.004f) + x_950);
  let x_952 : f32 = u_xlat24;
  u_xlat24 = max(x_952, 0.0f);
  let x_954 : vec4<f32> = u_xlat3;
  let x_956 : vec4<f32> = u_xlat3;
  u_xlat3.x = dot(vec3<f32>(x_954.x, x_954.y, x_954.z), vec3<f32>(x_956.x, x_956.y, x_956.z));
  let x_961 : f32 = u_xlat3.x;
  u_xlat3.x = (x_961 + 0.0001f);
  let x_965 : f32 = u_xlat3.x;
  u_xlat3.x = (1.0f / x_965);
  let x_969 : f32 = u_xlat3.x;
  let x_970 : f32 = u_xlat24;
  u_xlat3.x = (x_969 * x_970);
  let x_974 : f32 = u_xlat3.x;
  let x_975 : f32 = u_xlat23;
  let x_977 : f32 = u_xlat22;
  u_xlat22 = ((x_974 * x_975) + x_977);
  let x_979 : vec2<f32> = u_xlat14;
  let x_982 : vec4<f32> = x_34.x_SSAOBlueNoiseParams;
  u_xlat3 = ((vec4<f32>(x_979.x, x_979.y, x_979.x, x_979.y) * vec4<f32>(x_982.x, x_982.y, x_982.x, x_982.y)) + vec4<f32>(0.375f, 0.375f, 0.5f, 0.5f));
  let x_991 : vec4<f32> = u_xlat3;
  let x_994 : f32 = x_34.x_GlobalMipBias.x;
  let x_995 : vec4<f32> = textureSampleBias(x_BlueNoiseTexture, sampler_PointRepeat, vec2<f32>(x_991.x, x_991.y), x_994);
  u_xlat23 = x_995.w;
  let x_997 : f32 = u_xlat23;
  let x_1002 : vec2<f32> = (vec2<f32>(x_997, x_997) + vec2<f32>(0.56640625f, 0.015625f));
  let x_1003 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_1002.x, x_1002.y, x_1003.z, x_1003.w);
  let x_1006 : f32 = u_xlat3.x;
  u_xlat23 = fract(x_1006);
  let x_1008 : f32 = u_xlat23;
  u_xlat4.z = ((x_1008 * 2.0f) + -1.0f);
  let x_1013 : f32 = u_xlat3.y;
  u_xlat23 = (x_1013 * 628.31854248f);
  let x_1016 : f32 = u_xlat4.z;
  let x_1019 : f32 = u_xlat4.z;
  u_xlat3.x = ((-(x_1016) * x_1019) + 1.0f);
  let x_1024 : f32 = u_xlat3.x;
  u_xlat3.x = sqrt(x_1024);
  let x_1027 : f32 = u_xlat23;
  u_xlat5.x = sin(x_1027);
  let x_1030 : f32 = u_xlat23;
  u_xlat6 = cos(x_1030);
  let x_1033 : f32 = u_xlat3.x;
  let x_1034 : f32 = u_xlat6;
  u_xlat4.x = (x_1033 * x_1034);
  let x_1038 : f32 = u_xlat3.x;
  let x_1040 : f32 = u_xlat5.x;
  u_xlat4.y = (x_1038 * x_1040);
  let x_1043 : vec3<f32> = u_xlat2;
  let x_1044 : vec3<f32> = u_xlat4;
  u_xlat23 = dot(x_1043, x_1044);
  let x_1046 : f32 = u_xlat23;
  u_xlatb23 = (x_1046 >= 0.0f);
  let x_1048 : bool = u_xlatb23;
  u_xlat23 = select(-1.0f, 1.0f, x_1048);
  let x_1050 : f32 = u_xlat23;
  let x_1052 : vec3<f32> = u_xlat4;
  u_xlat4 = (vec3<f32>(x_1050, x_1050, x_1050) * x_1052);
  let x_1054 : vec3<f32> = u_xlat4;
  let x_1056 : vec4<f32> = x_34.x_SSAOParams;
  u_xlat4 = (x_1054 * vec3<f32>(x_1056.y, x_1056.y, x_1056.y));
  let x_1059 : vec3<f32> = u_xlat4;
  let x_1063 : vec3<f32> = u_xlat1;
  u_xlat4 = ((x_1059 * vec3<f32>(0.2265625f, 0.2265625f, 0.2265625f)) + x_1063);
  let x_1065 : vec3<f32> = u_xlat4;
  let x_1068 : vec4<f32> = x_34.x_CameraViewProjections[0i][1i];
  let x_1070 : vec2<f32> = (vec2<f32>(x_1065.y, x_1065.y) * vec2<f32>(x_1068.x, x_1068.y));
  let x_1071 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_1070.x, x_1070.y, x_1071.z, x_1071.w);
  let x_1074 : vec4<f32> = x_34.x_CameraViewProjections[0i][0i];
  let x_1076 : vec3<f32> = u_xlat4;
  let x_1079 : vec4<f32> = u_xlat3;
  let x_1081 : vec2<f32> = ((vec2<f32>(x_1074.x, x_1074.y) * vec2<f32>(x_1076.x, x_1076.x)) + vec2<f32>(x_1079.x, x_1079.y));
  let x_1082 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_1081.x, x_1081.y, x_1082.z, x_1082.w);
  let x_1085 : vec4<f32> = x_34.x_CameraViewProjections[0i][2i];
  let x_1087 : vec3<f32> = u_xlat4;
  let x_1090 : vec4<f32> = u_xlat3;
  let x_1092 : vec2<f32> = ((vec2<f32>(x_1085.x, x_1085.y) * vec2<f32>(x_1087.z, x_1087.z)) + vec2<f32>(x_1090.x, x_1090.y));
  let x_1093 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_1092.x, x_1092.y, x_1093.z, x_1093.w);
  let x_1095 : vec4<f32> = u_xlat3;
  let x_1097 : vec2<f32> = (vec2<f32>(x_1095.x, x_1095.y) + vec2<f32>(1.0f, 1.0f));
  let x_1098 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_1097.x, x_1097.y, x_1098.z, x_1098.w);
  let x_1100 : vec4<f32> = u_xlat3;
  let x_1102 : vec2<f32> = (vec2<f32>(x_1100.x, x_1100.y) * vec2<f32>(0.5f, 0.5f));
  let x_1103 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_1102.x, x_1102.y, x_1103.z, x_1103.w);
  let x_1105 : vec4<f32> = u_xlat3;
  let x_1109 : vec2<f32> = clamp(vec2<f32>(x_1105.x, x_1105.y), vec2<f32>(0.0f, 0.0f), vec2<f32>(1.0f, 1.0f));
  let x_1110 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_1109.x, x_1109.y, x_1110.z, x_1110.w);
  let x_1115 : vec4<f32> = u_xlat3;
  let x_1118 : f32 = x_34.x_GlobalMipBias.x;
  let x_1119 : vec4<f32> = textureSampleBias(x_CameraDepthTexture, sampler_CameraDepthTexture, vec2<f32>(x_1115.x, x_1115.y), x_1118);
  u_xlat23 = x_1119.x;
  let x_1122 : f32 = u_xlat7.x;
  let x_1124 : f32 = u_xlat23;
  let x_1127 : f32 = x_34.x_ProjectionParams.z;
  u_xlat4.x = ((-(x_1122) * x_1124) + x_1127);
  let x_1130 : f32 = u_xlat0;
  let x_1132 : f32 = u_xlat4.x;
  u_xlat11.x = (x_1130 + -(x_1132));
  let x_1138 : f32 = u_xlat11.x;
  let x_1141 : f32 = x_34.x_SSAOParams.y;
  u_xlatb11 = (abs(x_1138) < x_1141);
  let x_1143 : bool = u_xlatb11;
  u_xlat11.x = select(0.0f, 1.0f, x_1143);
  let x_1146 : f32 = u_xlat23;
  u_xlatb23 = (0.00001f < x_1146);
  let x_1148 : bool = u_xlatb23;
  u_xlat23 = select(0.0f, 1.0f, x_1148);
  let x_1150 : f32 = u_xlat23;
  let x_1152 : f32 = u_xlat11.x;
  u_xlat23 = (x_1150 * x_1152);
  let x_1155 : f32 = u_xlat3.y;
  u_xlat10.x = (-(x_1155) + 1.0f);
  let x_1160 : f32 = u_xlat4.x;
  let x_1162 : f32 = x_34.x_ProjectionParams.w;
  u_xlat4.x = (x_1160 * x_1162);
  let x_1166 : vec4<f32> = x_34.x_CameraViewXExtent[0i];
  let x_1168 : vec4<f32> = u_xlat3;
  let x_1172 : vec4<f32> = x_34.x_CameraViewTopLeftCorner[0i];
  u_xlat11 = ((vec3<f32>(x_1166.x, x_1166.y, x_1166.z) * vec3<f32>(x_1168.x, x_1168.x, x_1168.x)) + vec3<f32>(x_1172.x, x_1172.y, x_1172.z));
  let x_1176 : vec4<f32> = x_34.x_CameraViewYExtent[0i];
  let x_1178 : vec3<f32> = u_xlat10;
  let x_1181 : vec3<f32> = u_xlat11;
  u_xlat11 = ((vec3<f32>(x_1176.x, x_1176.y, x_1176.z) * vec3<f32>(x_1178.x, x_1178.x, x_1178.x)) + x_1181);
  let x_1184 : vec4<f32> = x_34.x_CameraViewZExtent[0i];
  let x_1186 : vec3<f32> = u_xlat4;
  let x_1189 : vec3<f32> = u_xlat11;
  u_xlat4 = ((vec3<f32>(x_1184.x, x_1184.y, x_1184.z) * vec3<f32>(x_1186.x, x_1186.x, x_1186.x)) + x_1189);
  let x_1191 : vec3<f32> = u_xlat1;
  let x_1193 : vec3<f32> = u_xlat4;
  u_xlat4 = (-(x_1191) + x_1193);
  let x_1195 : vec3<f32> = u_xlat4;
  let x_1196 : vec3<f32> = u_xlat2;
  u_xlat3.x = dot(x_1195, x_1196);
  let x_1199 : f32 = u_xlat0;
  let x_1203 : f32 = u_xlat3.x;
  u_xlat3.x = ((-(x_1199) * 0.004f) + x_1203);
  let x_1207 : f32 = u_xlat3.x;
  u_xlat3.x = max(x_1207, 0.0f);
  let x_1210 : vec3<f32> = u_xlat4;
  let x_1211 : vec3<f32> = u_xlat4;
  u_xlat10.x = dot(x_1210, x_1211);
  let x_1215 : f32 = u_xlat10.x;
  u_xlat10.x = (x_1215 + 0.0001f);
  let x_1219 : f32 = u_xlat10.x;
  u_xlat10.x = (1.0f / x_1219);
  let x_1223 : f32 = u_xlat10.x;
  let x_1225 : f32 = u_xlat3.x;
  u_xlat3.x = (x_1223 * x_1225);
  let x_1229 : f32 = u_xlat3.x;
  let x_1230 : f32 = u_xlat23;
  let x_1232 : f32 = u_xlat22;
  u_xlat22 = ((x_1229 * x_1230) + x_1232);
  let x_1237 : vec4<f32> = u_xlat3;
  let x_1240 : f32 = x_34.x_GlobalMipBias.x;
  let x_1241 : vec4<f32> = textureSampleBias(x_BlueNoiseTexture, sampler_PointRepeat, vec2<f32>(x_1237.z, x_1237.w), x_1240);
  u_xlat23 = x_1241.w;
  let x_1243 : f32 = u_xlat23;
  u_xlat3.x = (x_1243 + 0.984375f);
  let x_1248 : f32 = u_xlat3.x;
  u_xlat3.x = fract(x_1248);
  let x_1252 : f32 = u_xlat3.x;
  u_xlat3.z = ((x_1252 * 2.0f) + -1.0f);
  let x_1256 : f32 = u_xlat23;
  u_xlat23 = (x_1256 * 628.31854248f);
  let x_1259 : f32 = u_xlat3.z;
  let x_1262 : f32 = u_xlat3.z;
  u_xlat24 = ((-(x_1259) * x_1262) + 1.0f);
  let x_1265 : f32 = u_xlat24;
  u_xlat24 = sqrt(x_1265);
  let x_1267 : f32 = u_xlat23;
  u_xlat4.x = sin(x_1267);
  let x_1270 : f32 = u_xlat23;
  u_xlat5.x = cos(x_1270);
  let x_1273 : f32 = u_xlat24;
  let x_1275 : f32 = u_xlat5.x;
  u_xlat3.x = (x_1273 * x_1275);
  let x_1278 : f32 = u_xlat24;
  let x_1280 : f32 = u_xlat4.x;
  u_xlat3.y = (x_1278 * x_1280);
  let x_1283 : vec3<f32> = u_xlat2;
  let x_1284 : vec4<f32> = u_xlat3;
  u_xlat23 = dot(x_1283, vec3<f32>(x_1284.x, x_1284.y, x_1284.z));
  let x_1287 : f32 = u_xlat23;
  u_xlatb23 = (x_1287 >= 0.0f);
  let x_1289 : bool = u_xlatb23;
  u_xlat23 = select(-1.0f, 1.0f, x_1289);
  let x_1291 : f32 = u_xlat23;
  let x_1293 : vec4<f32> = u_xlat3;
  let x_1295 : vec3<f32> = (vec3<f32>(x_1291, x_1291, x_1291) * vec3<f32>(x_1293.x, x_1293.y, x_1293.z));
  let x_1296 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_1295.x, x_1295.y, x_1295.z, x_1296.w);
  let x_1298 : vec4<f32> = u_xlat3;
  let x_1301 : vec4<f32> = x_34.x_SSAOParams;
  let x_1303 : vec3<f32> = (vec3<f32>(x_1298.x, x_1298.y, x_1298.z) * vec3<f32>(x_1301.y, x_1301.y, x_1301.y));
  let x_1304 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_1303.x, x_1303.y, x_1303.z, x_1304.w);
  let x_1306 : vec4<f32> = u_xlat3;
  let x_1311 : vec3<f32> = u_xlat1;
  let x_1312 : vec3<f32> = ((vec3<f32>(x_1306.x, x_1306.y, x_1306.z) * vec3<f32>(0.324999988f, 0.324999988f, 0.324999988f)) + x_1311);
  let x_1313 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_1312.x, x_1312.y, x_1312.z, x_1313.w);
  let x_1315 : vec4<f32> = u_xlat3;
  let x_1318 : vec4<f32> = x_34.x_CameraViewProjections[0i][1i];
  let x_1320 : vec2<f32> = (vec2<f32>(x_1315.y, x_1315.y) * vec2<f32>(x_1318.x, x_1318.y));
  let x_1321 : vec3<f32> = u_xlat10;
  u_xlat10 = vec3<f32>(x_1320.x, x_1321.y, x_1320.y);
  let x_1324 : vec4<f32> = x_34.x_CameraViewProjections[0i][0i];
  let x_1326 : vec4<f32> = u_xlat3;
  let x_1329 : vec3<f32> = u_xlat10;
  let x_1331 : vec2<f32> = ((vec2<f32>(x_1324.x, x_1324.y) * vec2<f32>(x_1326.x, x_1326.x)) + vec2<f32>(x_1329.x, x_1329.z));
  let x_1332 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_1331.x, x_1331.y, x_1332.z, x_1332.w);
  let x_1335 : vec4<f32> = x_34.x_CameraViewProjections[0i][2i];
  let x_1337 : vec4<f32> = u_xlat3;
  let x_1340 : vec4<f32> = u_xlat3;
  let x_1342 : vec2<f32> = ((vec2<f32>(x_1335.x, x_1335.y) * vec2<f32>(x_1337.z, x_1337.z)) + vec2<f32>(x_1340.x, x_1340.y));
  let x_1343 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_1342.x, x_1342.y, x_1343.z, x_1343.w);
  let x_1345 : vec4<f32> = u_xlat3;
  let x_1347 : vec2<f32> = (vec2<f32>(x_1345.x, x_1345.y) + vec2<f32>(1.0f, 1.0f));
  let x_1348 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_1347.x, x_1347.y, x_1348.z, x_1348.w);
  let x_1350 : vec4<f32> = u_xlat3;
  let x_1352 : vec2<f32> = (vec2<f32>(x_1350.x, x_1350.y) * vec2<f32>(0.5f, 0.5f));
  let x_1353 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_1352.x, x_1352.y, x_1353.z, x_1353.w);
  let x_1355 : vec4<f32> = u_xlat3;
  let x_1359 : vec2<f32> = clamp(vec2<f32>(x_1355.x, x_1355.y), vec2<f32>(0.0f, 0.0f), vec2<f32>(1.0f, 1.0f));
  let x_1360 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_1359.x, x_1359.y, x_1360.z, x_1360.w);
  let x_1365 : vec4<f32> = u_xlat3;
  let x_1368 : f32 = x_34.x_GlobalMipBias.x;
  let x_1369 : vec4<f32> = textureSampleBias(x_CameraDepthTexture, sampler_CameraDepthTexture, vec2<f32>(x_1365.x, x_1365.y), x_1368);
  u_xlat23 = x_1369.x;
  let x_1372 : f32 = u_xlat7.x;
  let x_1374 : f32 = u_xlat23;
  let x_1377 : f32 = x_34.x_ProjectionParams.z;
  u_xlat17 = ((-(x_1372) * x_1374) + x_1377);
  let x_1379 : f32 = u_xlat0;
  let x_1380 : f32 = u_xlat17;
  u_xlat24 = (x_1379 + -(x_1380));
  let x_1383 : f32 = u_xlat24;
  let x_1386 : f32 = x_34.x_SSAOParams.y;
  u_xlatb24 = (abs(x_1383) < x_1386);
  let x_1388 : bool = u_xlatb24;
  u_xlat24 = select(0.0f, 1.0f, x_1388);
  let x_1390 : f32 = u_xlat23;
  u_xlatb23 = (0.00001f < x_1390);
  let x_1392 : bool = u_xlatb23;
  u_xlat23 = select(0.0f, 1.0f, x_1392);
  let x_1394 : f32 = u_xlat23;
  let x_1395 : f32 = u_xlat24;
  u_xlat23 = (x_1394 * x_1395);
  let x_1398 : f32 = u_xlat3.y;
  u_xlat10.x = (-(x_1398) + 1.0f);
  let x_1402 : f32 = u_xlat17;
  let x_1404 : f32 = x_34.x_ProjectionParams.w;
  u_xlat17 = (x_1402 * x_1404);
  let x_1407 : vec4<f32> = x_34.x_CameraViewXExtent[0i];
  let x_1409 : vec4<f32> = u_xlat3;
  let x_1413 : vec4<f32> = x_34.x_CameraViewTopLeftCorner[0i];
  u_xlat4 = ((vec3<f32>(x_1407.x, x_1407.y, x_1407.z) * vec3<f32>(x_1409.x, x_1409.x, x_1409.x)) + vec3<f32>(x_1413.x, x_1413.y, x_1413.z));
  let x_1417 : vec4<f32> = x_34.x_CameraViewYExtent[0i];
  let x_1419 : vec3<f32> = u_xlat10;
  let x_1422 : vec3<f32> = u_xlat4;
  let x_1423 : vec3<f32> = ((vec3<f32>(x_1417.x, x_1417.y, x_1417.z) * vec3<f32>(x_1419.x, x_1419.x, x_1419.x)) + x_1422);
  let x_1424 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_1423.x, x_1423.y, x_1424.z, x_1423.z);
  let x_1427 : vec4<f32> = x_34.x_CameraViewZExtent[0i];
  let x_1429 : f32 = u_xlat17;
  let x_1432 : vec4<f32> = u_xlat3;
  let x_1434 : vec3<f32> = ((vec3<f32>(x_1427.x, x_1427.y, x_1427.z) * vec3<f32>(x_1429, x_1429, x_1429)) + vec3<f32>(x_1432.x, x_1432.y, x_1432.w));
  let x_1435 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_1434.x, x_1434.y, x_1434.z, x_1435.w);
  let x_1437 : vec3<f32> = u_xlat1;
  let x_1439 : vec4<f32> = u_xlat3;
  let x_1441 : vec3<f32> = (-(x_1437) + vec3<f32>(x_1439.x, x_1439.y, x_1439.z));
  let x_1442 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_1441.x, x_1441.y, x_1441.z, x_1442.w);
  let x_1444 : vec4<f32> = u_xlat3;
  let x_1446 : vec3<f32> = u_xlat2;
  u_xlat24 = dot(vec3<f32>(x_1444.x, x_1444.y, x_1444.z), x_1446);
  let x_1448 : f32 = u_xlat0;
  let x_1451 : f32 = u_xlat24;
  u_xlat24 = ((-(x_1448) * 0.004f) + x_1451);
  let x_1453 : f32 = u_xlat24;
  u_xlat24 = max(x_1453, 0.0f);
  let x_1455 : vec4<f32> = u_xlat3;
  let x_1457 : vec4<f32> = u_xlat3;
  u_xlat3.x = dot(vec3<f32>(x_1455.x, x_1455.y, x_1455.z), vec3<f32>(x_1457.x, x_1457.y, x_1457.z));
  let x_1462 : f32 = u_xlat3.x;
  u_xlat3.x = (x_1462 + 0.0001f);
  let x_1466 : f32 = u_xlat3.x;
  u_xlat3.x = (1.0f / x_1466);
  let x_1470 : f32 = u_xlat3.x;
  let x_1471 : f32 = u_xlat24;
  u_xlat3.x = (x_1470 * x_1471);
  let x_1475 : f32 = u_xlat3.x;
  let x_1476 : f32 = u_xlat23;
  let x_1478 : f32 = u_xlat22;
  u_xlat22 = ((x_1475 * x_1476) + x_1478);
  let x_1480 : vec2<f32> = u_xlat14;
  let x_1483 : vec4<f32> = x_34.x_SSAOBlueNoiseParams;
  u_xlat3 = ((vec4<f32>(x_1480.x, x_1480.y, x_1480.x, x_1480.y) * vec4<f32>(x_1483.x, x_1483.y, x_1483.x, x_1483.y)) + vec4<f32>(0.625f, 0.625f, 0.75f, 0.75f));
  let x_1493 : vec4<f32> = u_xlat3;
  let x_1496 : f32 = x_34.x_GlobalMipBias.x;
  let x_1497 : vec4<f32> = textureSampleBias(x_BlueNoiseTexture, sampler_PointRepeat, vec2<f32>(x_1493.x, x_1493.y), x_1496);
  u_xlat23 = x_1497.w;
  let x_1499 : f32 = u_xlat23;
  let x_1504 : vec2<f32> = (vec2<f32>(x_1499, x_1499) + vec2<f32>(0.07421875f, 0.10546875f));
  let x_1505 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_1504.x, x_1504.y, x_1505.z, x_1505.w);
  let x_1508 : f32 = u_xlat3.x;
  u_xlat23 = fract(x_1508);
  let x_1510 : f32 = u_xlat23;
  u_xlat4.z = ((x_1510 * 2.0f) + -1.0f);
  let x_1515 : f32 = u_xlat3.y;
  u_xlat23 = (x_1515 * 628.31854248f);
  let x_1518 : f32 = u_xlat4.z;
  let x_1521 : f32 = u_xlat4.z;
  u_xlat3.x = ((-(x_1518) * x_1521) + 1.0f);
  let x_1526 : f32 = u_xlat3.x;
  u_xlat3.x = sqrt(x_1526);
  let x_1529 : f32 = u_xlat23;
  u_xlat5.x = sin(x_1529);
  let x_1532 : f32 = u_xlat23;
  u_xlat6 = cos(x_1532);
  let x_1535 : f32 = u_xlat3.x;
  let x_1536 : f32 = u_xlat6;
  u_xlat4.x = (x_1535 * x_1536);
  let x_1540 : f32 = u_xlat3.x;
  let x_1542 : f32 = u_xlat5.x;
  u_xlat4.y = (x_1540 * x_1542);
  let x_1545 : vec3<f32> = u_xlat2;
  let x_1546 : vec3<f32> = u_xlat4;
  u_xlat23 = dot(x_1545, x_1546);
  let x_1548 : f32 = u_xlat23;
  u_xlatb23 = (x_1548 >= 0.0f);
  let x_1550 : bool = u_xlatb23;
  u_xlat23 = select(-1.0f, 1.0f, x_1550);
  let x_1552 : f32 = u_xlat23;
  let x_1554 : vec3<f32> = u_xlat4;
  u_xlat4 = (vec3<f32>(x_1552, x_1552, x_1552) * x_1554);
  let x_1556 : vec3<f32> = u_xlat4;
  let x_1558 : vec4<f32> = x_34.x_SSAOParams;
  u_xlat4 = (x_1556 * vec3<f32>(x_1558.y, x_1558.y, x_1558.y));
  let x_1561 : vec3<f32> = u_xlat4;
  let x_1565 : vec3<f32> = u_xlat1;
  u_xlat4 = ((x_1561 * vec3<f32>(0.451562494f, 0.451562494f, 0.451562494f)) + x_1565);
  let x_1567 : vec3<f32> = u_xlat4;
  let x_1570 : vec4<f32> = x_34.x_CameraViewProjections[0i][1i];
  let x_1572 : vec2<f32> = (vec2<f32>(x_1567.y, x_1567.y) * vec2<f32>(x_1570.x, x_1570.y));
  let x_1573 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_1572.x, x_1572.y, x_1573.z, x_1573.w);
  let x_1576 : vec4<f32> = x_34.x_CameraViewProjections[0i][0i];
  let x_1578 : vec3<f32> = u_xlat4;
  let x_1581 : vec4<f32> = u_xlat3;
  let x_1583 : vec2<f32> = ((vec2<f32>(x_1576.x, x_1576.y) * vec2<f32>(x_1578.x, x_1578.x)) + vec2<f32>(x_1581.x, x_1581.y));
  let x_1584 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_1583.x, x_1583.y, x_1584.z, x_1584.w);
  let x_1587 : vec4<f32> = x_34.x_CameraViewProjections[0i][2i];
  let x_1589 : vec3<f32> = u_xlat4;
  let x_1592 : vec4<f32> = u_xlat3;
  let x_1594 : vec2<f32> = ((vec2<f32>(x_1587.x, x_1587.y) * vec2<f32>(x_1589.z, x_1589.z)) + vec2<f32>(x_1592.x, x_1592.y));
  let x_1595 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_1594.x, x_1594.y, x_1595.z, x_1595.w);
  let x_1597 : vec4<f32> = u_xlat3;
  let x_1599 : vec2<f32> = (vec2<f32>(x_1597.x, x_1597.y) + vec2<f32>(1.0f, 1.0f));
  let x_1600 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_1599.x, x_1599.y, x_1600.z, x_1600.w);
  let x_1602 : vec4<f32> = u_xlat3;
  let x_1604 : vec2<f32> = (vec2<f32>(x_1602.x, x_1602.y) * vec2<f32>(0.5f, 0.5f));
  let x_1605 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_1604.x, x_1604.y, x_1605.z, x_1605.w);
  let x_1607 : vec4<f32> = u_xlat3;
  let x_1611 : vec2<f32> = clamp(vec2<f32>(x_1607.x, x_1607.y), vec2<f32>(0.0f, 0.0f), vec2<f32>(1.0f, 1.0f));
  let x_1612 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_1611.x, x_1611.y, x_1612.z, x_1612.w);
  let x_1617 : vec4<f32> = u_xlat3;
  let x_1620 : f32 = x_34.x_GlobalMipBias.x;
  let x_1621 : vec4<f32> = textureSampleBias(x_CameraDepthTexture, sampler_CameraDepthTexture, vec2<f32>(x_1617.x, x_1617.y), x_1620);
  u_xlat23 = x_1621.x;
  let x_1624 : f32 = u_xlat7.x;
  let x_1626 : f32 = u_xlat23;
  let x_1629 : f32 = x_34.x_ProjectionParams.z;
  u_xlat4.x = ((-(x_1624) * x_1626) + x_1629);
  let x_1632 : f32 = u_xlat0;
  let x_1634 : f32 = u_xlat4.x;
  u_xlat11.x = (x_1632 + -(x_1634));
  let x_1639 : f32 = u_xlat11.x;
  let x_1642 : f32 = x_34.x_SSAOParams.y;
  u_xlatb11 = (abs(x_1639) < x_1642);
  let x_1644 : bool = u_xlatb11;
  u_xlat11.x = select(0.0f, 1.0f, x_1644);
  let x_1647 : f32 = u_xlat23;
  u_xlatb23 = (0.00001f < x_1647);
  let x_1649 : bool = u_xlatb23;
  u_xlat23 = select(0.0f, 1.0f, x_1649);
  let x_1651 : f32 = u_xlat23;
  let x_1653 : f32 = u_xlat11.x;
  u_xlat23 = (x_1651 * x_1653);
  let x_1656 : f32 = u_xlat3.y;
  u_xlat10.x = (-(x_1656) + 1.0f);
  let x_1661 : f32 = u_xlat4.x;
  let x_1663 : f32 = x_34.x_ProjectionParams.w;
  u_xlat4.x = (x_1661 * x_1663);
  let x_1667 : vec4<f32> = x_34.x_CameraViewXExtent[0i];
  let x_1669 : vec4<f32> = u_xlat3;
  let x_1673 : vec4<f32> = x_34.x_CameraViewTopLeftCorner[0i];
  u_xlat11 = ((vec3<f32>(x_1667.x, x_1667.y, x_1667.z) * vec3<f32>(x_1669.x, x_1669.x, x_1669.x)) + vec3<f32>(x_1673.x, x_1673.y, x_1673.z));
  let x_1677 : vec4<f32> = x_34.x_CameraViewYExtent[0i];
  let x_1679 : vec3<f32> = u_xlat10;
  let x_1682 : vec3<f32> = u_xlat11;
  u_xlat11 = ((vec3<f32>(x_1677.x, x_1677.y, x_1677.z) * vec3<f32>(x_1679.x, x_1679.x, x_1679.x)) + x_1682);
  let x_1685 : vec4<f32> = x_34.x_CameraViewZExtent[0i];
  let x_1687 : vec3<f32> = u_xlat4;
  let x_1690 : vec3<f32> = u_xlat11;
  u_xlat4 = ((vec3<f32>(x_1685.x, x_1685.y, x_1685.z) * vec3<f32>(x_1687.x, x_1687.x, x_1687.x)) + x_1690);
  let x_1692 : vec3<f32> = u_xlat1;
  let x_1694 : vec3<f32> = u_xlat4;
  u_xlat4 = (-(x_1692) + x_1694);
  let x_1696 : vec3<f32> = u_xlat4;
  let x_1697 : vec3<f32> = u_xlat2;
  u_xlat3.x = dot(x_1696, x_1697);
  let x_1700 : f32 = u_xlat0;
  let x_1704 : f32 = u_xlat3.x;
  u_xlat3.x = ((-(x_1700) * 0.004f) + x_1704);
  let x_1708 : f32 = u_xlat3.x;
  u_xlat3.x = max(x_1708, 0.0f);
  let x_1711 : vec3<f32> = u_xlat4;
  let x_1712 : vec3<f32> = u_xlat4;
  u_xlat10.x = dot(x_1711, x_1712);
  let x_1716 : f32 = u_xlat10.x;
  u_xlat10.x = (x_1716 + 0.0001f);
  let x_1720 : f32 = u_xlat10.x;
  u_xlat10.x = (1.0f / x_1720);
  let x_1724 : f32 = u_xlat10.x;
  let x_1726 : f32 = u_xlat3.x;
  u_xlat3.x = (x_1724 * x_1726);
  let x_1730 : f32 = u_xlat3.x;
  let x_1731 : f32 = u_xlat23;
  let x_1733 : f32 = u_xlat22;
  u_xlat22 = ((x_1730 * x_1731) + x_1733);
  let x_1738 : vec4<f32> = u_xlat3;
  let x_1741 : f32 = x_34.x_GlobalMipBias.x;
  let x_1742 : vec4<f32> = textureSampleBias(x_BlueNoiseTexture, sampler_PointRepeat, vec2<f32>(x_1738.z, x_1738.w), x_1741);
  u_xlat23 = x_1742.w;
  let x_1744 : f32 = u_xlat23;
  let x_1749 : vec2<f32> = (vec2<f32>(x_1744, x_1744) + vec2<f32>(0.23828125f, 0.640625f));
  let x_1750 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_1749.x, x_1749.y, x_1750.z, x_1750.w);
  let x_1753 : f32 = u_xlat3.x;
  u_xlat23 = fract(x_1753);
  let x_1755 : f32 = u_xlat23;
  u_xlat4.z = ((x_1755 * 2.0f) + -1.0f);
  let x_1760 : f32 = u_xlat3.y;
  u_xlat23 = (x_1760 * 628.31854248f);
  let x_1763 : f32 = u_xlat4.z;
  let x_1766 : f32 = u_xlat4.z;
  u_xlat3.x = ((-(x_1763) * x_1766) + 1.0f);
  let x_1771 : f32 = u_xlat3.x;
  u_xlat3.x = sqrt(x_1771);
  let x_1774 : f32 = u_xlat23;
  u_xlat5.x = sin(x_1774);
  let x_1777 : f32 = u_xlat23;
  u_xlat6 = cos(x_1777);
  let x_1780 : f32 = u_xlat3.x;
  let x_1781 : f32 = u_xlat6;
  u_xlat4.x = (x_1780 * x_1781);
  let x_1785 : f32 = u_xlat3.x;
  let x_1787 : f32 = u_xlat5.x;
  u_xlat4.y = (x_1785 * x_1787);
  let x_1790 : vec3<f32> = u_xlat2;
  let x_1791 : vec3<f32> = u_xlat4;
  u_xlat23 = dot(x_1790, x_1791);
  let x_1793 : f32 = u_xlat23;
  u_xlatb23 = (x_1793 >= 0.0f);
  let x_1795 : bool = u_xlatb23;
  u_xlat23 = select(-1.0f, 1.0f, x_1795);
  let x_1797 : f32 = u_xlat23;
  let x_1799 : vec3<f32> = u_xlat4;
  let x_1800 : vec3<f32> = (vec3<f32>(x_1797, x_1797, x_1797) * x_1799);
  let x_1801 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_1800.x, x_1800.y, x_1800.z, x_1801.w);
  let x_1803 : vec4<f32> = u_xlat3;
  let x_1806 : vec4<f32> = x_34.x_SSAOParams;
  let x_1808 : vec3<f32> = (vec3<f32>(x_1803.x, x_1803.y, x_1803.z) * vec3<f32>(x_1806.y, x_1806.y, x_1806.y));
  let x_1809 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_1808.x, x_1808.y, x_1808.z, x_1809.w);
  let x_1811 : vec4<f32> = u_xlat3;
  let x_1816 : vec3<f32> = u_xlat1;
  let x_1817 : vec3<f32> = ((vec3<f32>(x_1811.x, x_1811.y, x_1811.z) * vec3<f32>(0.606249988f, 0.606249988f, 0.606249988f)) + x_1816);
  let x_1818 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_1817.x, x_1817.y, x_1817.z, x_1818.w);
  let x_1820 : vec4<f32> = u_xlat3;
  let x_1823 : vec4<f32> = x_34.x_CameraViewProjections[0i][1i];
  let x_1825 : vec2<f32> = (vec2<f32>(x_1820.y, x_1820.y) * vec2<f32>(x_1823.x, x_1823.y));
  let x_1826 : vec3<f32> = u_xlat10;
  u_xlat10 = vec3<f32>(x_1825.x, x_1826.y, x_1825.y);
  let x_1829 : vec4<f32> = x_34.x_CameraViewProjections[0i][0i];
  let x_1831 : vec4<f32> = u_xlat3;
  let x_1834 : vec3<f32> = u_xlat10;
  let x_1836 : vec2<f32> = ((vec2<f32>(x_1829.x, x_1829.y) * vec2<f32>(x_1831.x, x_1831.x)) + vec2<f32>(x_1834.x, x_1834.z));
  let x_1837 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_1836.x, x_1836.y, x_1837.z, x_1837.w);
  let x_1840 : vec4<f32> = x_34.x_CameraViewProjections[0i][2i];
  let x_1842 : vec4<f32> = u_xlat3;
  let x_1845 : vec4<f32> = u_xlat3;
  let x_1847 : vec2<f32> = ((vec2<f32>(x_1840.x, x_1840.y) * vec2<f32>(x_1842.z, x_1842.z)) + vec2<f32>(x_1845.x, x_1845.y));
  let x_1848 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_1847.x, x_1847.y, x_1848.z, x_1848.w);
  let x_1850 : vec4<f32> = u_xlat3;
  let x_1852 : vec2<f32> = (vec2<f32>(x_1850.x, x_1850.y) + vec2<f32>(1.0f, 1.0f));
  let x_1853 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_1852.x, x_1852.y, x_1853.z, x_1853.w);
  let x_1855 : vec4<f32> = u_xlat3;
  let x_1857 : vec2<f32> = (vec2<f32>(x_1855.x, x_1855.y) * vec2<f32>(0.5f, 0.5f));
  let x_1858 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_1857.x, x_1857.y, x_1858.z, x_1858.w);
  let x_1860 : vec4<f32> = u_xlat3;
  let x_1864 : vec2<f32> = clamp(vec2<f32>(x_1860.x, x_1860.y), vec2<f32>(0.0f, 0.0f), vec2<f32>(1.0f, 1.0f));
  let x_1865 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_1864.x, x_1864.y, x_1865.z, x_1865.w);
  let x_1870 : vec4<f32> = u_xlat3;
  let x_1873 : f32 = x_34.x_GlobalMipBias.x;
  let x_1874 : vec4<f32> = textureSampleBias(x_CameraDepthTexture, sampler_CameraDepthTexture, vec2<f32>(x_1870.x, x_1870.y), x_1873);
  u_xlat23 = x_1874.x;
  let x_1877 : f32 = u_xlat7.x;
  let x_1879 : f32 = u_xlat23;
  let x_1882 : f32 = x_34.x_ProjectionParams.z;
  u_xlat17 = ((-(x_1877) * x_1879) + x_1882);
  let x_1884 : f32 = u_xlat0;
  let x_1885 : f32 = u_xlat17;
  u_xlat24 = (x_1884 + -(x_1885));
  let x_1888 : f32 = u_xlat24;
  let x_1891 : f32 = x_34.x_SSAOParams.y;
  u_xlatb24 = (abs(x_1888) < x_1891);
  let x_1893 : bool = u_xlatb24;
  u_xlat24 = select(0.0f, 1.0f, x_1893);
  let x_1895 : f32 = u_xlat23;
  u_xlatb23 = (0.00001f < x_1895);
  let x_1897 : bool = u_xlatb23;
  u_xlat23 = select(0.0f, 1.0f, x_1897);
  let x_1899 : f32 = u_xlat23;
  let x_1900 : f32 = u_xlat24;
  u_xlat23 = (x_1899 * x_1900);
  let x_1903 : f32 = u_xlat3.y;
  u_xlat10.x = (-(x_1903) + 1.0f);
  let x_1907 : f32 = u_xlat17;
  let x_1909 : f32 = x_34.x_ProjectionParams.w;
  u_xlat17 = (x_1907 * x_1909);
  let x_1912 : vec4<f32> = x_34.x_CameraViewXExtent[0i];
  let x_1914 : vec4<f32> = u_xlat3;
  let x_1918 : vec4<f32> = x_34.x_CameraViewTopLeftCorner[0i];
  u_xlat4 = ((vec3<f32>(x_1912.x, x_1912.y, x_1912.z) * vec3<f32>(x_1914.x, x_1914.x, x_1914.x)) + vec3<f32>(x_1918.x, x_1918.y, x_1918.z));
  let x_1922 : vec4<f32> = x_34.x_CameraViewYExtent[0i];
  let x_1924 : vec3<f32> = u_xlat10;
  let x_1927 : vec3<f32> = u_xlat4;
  let x_1928 : vec3<f32> = ((vec3<f32>(x_1922.x, x_1922.y, x_1922.z) * vec3<f32>(x_1924.x, x_1924.x, x_1924.x)) + x_1927);
  let x_1929 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_1928.x, x_1928.y, x_1929.z, x_1928.z);
  let x_1932 : vec4<f32> = x_34.x_CameraViewZExtent[0i];
  let x_1934 : f32 = u_xlat17;
  let x_1937 : vec4<f32> = u_xlat3;
  let x_1939 : vec3<f32> = ((vec3<f32>(x_1932.x, x_1932.y, x_1932.z) * vec3<f32>(x_1934, x_1934, x_1934)) + vec3<f32>(x_1937.x, x_1937.y, x_1937.w));
  let x_1940 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_1939.x, x_1939.y, x_1939.z, x_1940.w);
  let x_1942 : vec3<f32> = u_xlat1;
  let x_1944 : vec4<f32> = u_xlat3;
  let x_1946 : vec3<f32> = (-(x_1942) + vec3<f32>(x_1944.x, x_1944.y, x_1944.z));
  let x_1947 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_1946.x, x_1946.y, x_1946.z, x_1947.w);
  let x_1949 : vec4<f32> = u_xlat3;
  let x_1951 : vec3<f32> = u_xlat2;
  u_xlat24 = dot(vec3<f32>(x_1949.x, x_1949.y, x_1949.z), x_1951);
  let x_1953 : f32 = u_xlat0;
  let x_1956 : f32 = u_xlat24;
  u_xlat24 = ((-(x_1953) * 0.004f) + x_1956);
  let x_1958 : f32 = u_xlat24;
  u_xlat24 = max(x_1958, 0.0f);
  let x_1960 : vec4<f32> = u_xlat3;
  let x_1962 : vec4<f32> = u_xlat3;
  u_xlat3.x = dot(vec3<f32>(x_1960.x, x_1960.y, x_1960.z), vec3<f32>(x_1962.x, x_1962.y, x_1962.z));
  let x_1967 : f32 = u_xlat3.x;
  u_xlat3.x = (x_1967 + 0.0001f);
  let x_1971 : f32 = u_xlat3.x;
  u_xlat3.x = (1.0f / x_1971);
  let x_1975 : f32 = u_xlat3.x;
  let x_1976 : f32 = u_xlat24;
  u_xlat3.x = (x_1975 * x_1976);
  let x_1980 : f32 = u_xlat3.x;
  let x_1981 : f32 = u_xlat23;
  let x_1983 : f32 = u_xlat22;
  u_xlat22 = ((x_1980 * x_1981) + x_1983);
  let x_1985 : vec2<f32> = u_xlat14;
  let x_1987 : vec4<f32> = x_34.x_SSAOBlueNoiseParams;
  u_xlat14 = ((x_1985 * vec2<f32>(x_1987.x, x_1987.y)) + vec2<f32>(0.875f, 0.875f));
  let x_1996 : vec2<f32> = u_xlat14;
  let x_1998 : f32 = x_34.x_GlobalMipBias.x;
  let x_1999 : vec4<f32> = textureSampleBias(x_BlueNoiseTexture, sampler_PointRepeat, x_1996, x_1998);
  u_xlat14.x = x_1999.w;
  let x_2002 : vec2<f32> = u_xlat14;
  u_xlat14 = (vec2<f32>(x_2002.x, x_2002.x) + vec2<f32>(0.640625f, 0.74609375f));
  let x_2008 : f32 = u_xlat14.x;
  u_xlat14.x = fract(x_2008);
  let x_2012 : f32 = u_xlat14.x;
  u_xlat3.z = ((x_2012 * 2.0f) + -1.0f);
  let x_2017 : f32 = u_xlat14.y;
  u_xlat14.x = (x_2017 * 628.31854248f);
  let x_2021 : f32 = u_xlat3.z;
  let x_2024 : f32 = u_xlat3.z;
  u_xlat21 = ((-(x_2021) * x_2024) + 1.0f);
  let x_2027 : f32 = u_xlat21;
  u_xlat21 = sqrt(x_2027);
  let x_2030 : f32 = u_xlat14.x;
  u_xlat4.x = sin(x_2030);
  let x_2034 : f32 = u_xlat14.x;
  u_xlat5.x = cos(x_2034);
  let x_2037 : f32 = u_xlat21;
  let x_2039 : f32 = u_xlat5.x;
  u_xlat3.x = (x_2037 * x_2039);
  let x_2042 : f32 = u_xlat21;
  let x_2044 : f32 = u_xlat4.x;
  u_xlat3.y = (x_2042 * x_2044);
  let x_2047 : vec3<f32> = u_xlat2;
  let x_2048 : vec4<f32> = u_xlat3;
  u_xlat14.x = dot(x_2047, vec3<f32>(x_2048.x, x_2048.y, x_2048.z));
  let x_2053 : f32 = u_xlat14.x;
  u_xlatb14 = (x_2053 >= 0.0f);
  let x_2055 : bool = u_xlatb14;
  u_xlat14.x = select(-1.0f, 1.0f, x_2055);
  let x_2058 : vec2<f32> = u_xlat14;
  let x_2060 : vec4<f32> = u_xlat3;
  let x_2062 : vec3<f32> = (vec3<f32>(x_2058.x, x_2058.x, x_2058.x) * vec3<f32>(x_2060.x, x_2060.y, x_2060.z));
  let x_2063 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_2062.x, x_2062.y, x_2062.z, x_2063.w);
  let x_2065 : vec4<f32> = u_xlat3;
  let x_2068 : vec4<f32> = x_34.x_SSAOParams;
  let x_2070 : vec3<f32> = (vec3<f32>(x_2065.x, x_2065.y, x_2065.z) * vec3<f32>(x_2068.y, x_2068.y, x_2068.y));
  let x_2071 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_2070.x, x_2070.y, x_2070.z, x_2071.w);
  let x_2073 : vec4<f32> = u_xlat3;
  let x_2078 : vec3<f32> = u_xlat1;
  let x_2079 : vec3<f32> = ((vec3<f32>(x_2073.x, x_2073.y, x_2073.z) * vec3<f32>(0.7890625f, 0.7890625f, 0.7890625f)) + x_2078);
  let x_2080 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_2079.x, x_2079.y, x_2079.z, x_2080.w);
  let x_2082 : vec4<f32> = u_xlat3;
  let x_2085 : vec4<f32> = x_34.x_CameraViewProjections[0i][1i];
  u_xlat14 = (vec2<f32>(x_2082.y, x_2082.y) * vec2<f32>(x_2085.x, x_2085.y));
  let x_2089 : vec4<f32> = x_34.x_CameraViewProjections[0i][0i];
  let x_2091 : vec4<f32> = u_xlat3;
  let x_2094 : vec2<f32> = u_xlat14;
  u_xlat14 = ((vec2<f32>(x_2089.x, x_2089.y) * vec2<f32>(x_2091.x, x_2091.x)) + x_2094);
  let x_2097 : vec4<f32> = x_34.x_CameraViewProjections[0i][2i];
  let x_2099 : vec4<f32> = u_xlat3;
  let x_2102 : vec2<f32> = u_xlat14;
  u_xlat14 = ((vec2<f32>(x_2097.x, x_2097.y) * vec2<f32>(x_2099.z, x_2099.z)) + x_2102);
  let x_2104 : vec2<f32> = u_xlat14;
  u_xlat14 = (x_2104 + vec2<f32>(1.0f, 1.0f));
  let x_2106 : vec2<f32> = u_xlat14;
  u_xlat14 = (x_2106 * vec2<f32>(0.5f, 0.5f));
  let x_2108 : vec2<f32> = u_xlat14;
  u_xlat14 = clamp(x_2108, vec2<f32>(0.0f, 0.0f), vec2<f32>(1.0f, 1.0f));
  let x_2115 : vec2<f32> = u_xlat14;
  let x_2117 : f32 = x_34.x_GlobalMipBias.x;
  let x_2118 : vec4<f32> = textureSampleBias(x_CameraDepthTexture, sampler_CameraDepthTexture, x_2115, x_2117);
  u_xlat23 = x_2118.x;
  let x_2121 : f32 = u_xlat7.x;
  let x_2123 : f32 = u_xlat23;
  let x_2126 : f32 = x_34.x_ProjectionParams.z;
  u_xlat7.x = ((-(x_2121) * x_2123) + x_2126);
  let x_2130 : f32 = u_xlat7.x;
  let x_2132 : f32 = u_xlat0;
  u_xlat3.x = (-(x_2130) + x_2132);
  let x_2136 : f32 = u_xlat3.x;
  let x_2139 : f32 = x_34.x_SSAOParams.y;
  u_xlatb3 = (abs(x_2136) < x_2139);
  let x_2141 : bool = u_xlatb3;
  u_xlat3.x = select(0.0f, 1.0f, x_2141);
  let x_2144 : f32 = u_xlat23;
  u_xlatb23 = (0.00001f < x_2144);
  let x_2146 : bool = u_xlatb23;
  u_xlat23 = select(0.0f, 1.0f, x_2146);
  let x_2148 : f32 = u_xlat23;
  let x_2150 : f32 = u_xlat3.x;
  u_xlat23 = (x_2148 * x_2150);
  let x_2153 : f32 = u_xlat14.y;
  u_xlat21 = (-(x_2153) + 1.0f);
  let x_2157 : f32 = u_xlat7.x;
  let x_2159 : f32 = x_34.x_ProjectionParams.w;
  u_xlat7.x = (x_2157 * x_2159);
  let x_2163 : vec4<f32> = x_34.x_CameraViewXExtent[0i];
  let x_2165 : vec2<f32> = u_xlat14;
  let x_2169 : vec4<f32> = x_34.x_CameraViewTopLeftCorner[0i];
  let x_2171 : vec3<f32> = ((vec3<f32>(x_2163.x, x_2163.y, x_2163.z) * vec3<f32>(x_2165.x, x_2165.x, x_2165.x)) + vec3<f32>(x_2169.x, x_2169.y, x_2169.z));
  let x_2172 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_2171.x, x_2171.y, x_2171.z, x_2172.w);
  let x_2175 : vec4<f32> = x_34.x_CameraViewYExtent[0i];
  let x_2177 : f32 = u_xlat21;
  let x_2180 : vec4<f32> = u_xlat3;
  let x_2182 : vec3<f32> = ((vec3<f32>(x_2175.x, x_2175.y, x_2175.z) * vec3<f32>(x_2177, x_2177, x_2177)) + vec3<f32>(x_2180.x, x_2180.y, x_2180.z));
  let x_2183 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_2182.x, x_2182.y, x_2182.z, x_2183.w);
  let x_2186 : vec4<f32> = x_34.x_CameraViewZExtent[0i];
  let x_2188 : vec3<f32> = u_xlat7;
  let x_2191 : vec4<f32> = u_xlat3;
  u_xlat7 = ((vec3<f32>(x_2186.x, x_2186.y, x_2186.z) * vec3<f32>(x_2188.x, x_2188.x, x_2188.x)) + vec3<f32>(x_2191.x, x_2191.y, x_2191.z));
  let x_2194 : vec3<f32> = u_xlat1;
  let x_2196 : vec3<f32> = u_xlat7;
  u_xlat7 = (-(x_2194) + x_2196);
  let x_2198 : vec3<f32> = u_xlat7;
  let x_2199 : vec3<f32> = u_xlat2;
  u_xlat1.x = dot(x_2198, x_2199);
  let x_2202 : f32 = u_xlat0;
  let x_2206 : f32 = u_xlat1.x;
  u_xlat1.x = ((-(x_2202) * 0.004f) + x_2206);
  let x_2210 : f32 = u_xlat1.x;
  u_xlat1.x = max(x_2210, 0.0f);
  let x_2213 : vec3<f32> = u_xlat7;
  let x_2214 : vec3<f32> = u_xlat7;
  u_xlat7.x = dot(x_2213, x_2214);
  let x_2218 : f32 = u_xlat7.x;
  u_xlat7.x = (x_2218 + 0.0001f);
  let x_2222 : f32 = u_xlat7.x;
  u_xlat7.x = (1.0f / x_2222);
  let x_2226 : f32 = u_xlat7.x;
  let x_2228 : f32 = u_xlat1.x;
  u_xlat7.x = (x_2226 * x_2228);
  let x_2232 : f32 = u_xlat7.x;
  let x_2233 : f32 = u_xlat23;
  let x_2235 : f32 = u_xlat22;
  u_xlat7.x = ((x_2232 * x_2233) + x_2235);
  let x_2239 : f32 = u_xlat7.x;
  let x_2241 : f32 = x_34.x_SSAOParams.y;
  u_xlat7.x = (x_2239 * x_2241);
  let x_2245 : f32 = x_34.x_SSAOParams.w;
  u_xlat14.x = (1.0f / x_2245);
  let x_2248 : f32 = u_xlat0;
  let x_2251 : f32 = u_xlat14.x;
  u_xlat0 = ((-(x_2248) * x_2251) + 1.0f);
  let x_2254 : f32 = u_xlat0;
  let x_2255 : f32 = u_xlat0;
  u_xlat0 = (x_2254 * x_2255);
  let x_2258 : f32 = u_xlat7.x;
  let x_2260 : f32 = x_34.x_SSAOParams.x;
  u_xlat7.x = (x_2258 * x_2260);
  let x_2263 : f32 = u_xlat0;
  let x_2265 : f32 = u_xlat7.x;
  u_xlat0 = (x_2263 * x_2265);
  let x_2267 : f32 = u_xlat0;
  u_xlat0 = (x_2267 * 0.125f);
  let x_2269 : f32 = u_xlat0;
  u_xlat0 = clamp(x_2269, 0.0f, 1.0f);
  let x_2271 : f32 = u_xlat0;
  u_xlat0 = log2(x_2271);
  let x_2273 : f32 = u_xlat0;
  u_xlat0 = (x_2273 * 0.600000024f);
  let x_2276 : f32 = u_xlat0;
  SV_Target0.x = exp2(x_2276);
  let x_2280 : vec3<f32> = u_xlat2;
  let x_2283 : vec3<f32> = ((x_2280 * vec3<f32>(0.5f, 0.5f, 0.5f)) + vec3<f32>(0.5f, 0.5f, 0.5f));
  let x_2284 : vec4<f32> = SV_Target0;
  SV_Target0 = vec4<f32>(x_2284.x, x_2283.x, x_2283.y, x_2283.z);
  return;
}

struct main_out {
  @location(0)
  SV_Target0_1 : vec4<f32>,
}

@fragment
fn main(@location(0) vs_TEXCOORD0_param : vec2<f32>, @builtin(position) gl_FragCoord_param : vec4<f32>) -> main_out {
  vs_TEXCOORD0 = vs_TEXCOORD0_param;
  gl_FragCoord = gl_FragCoord_param;
  main_1();
  return main_out(SV_Target0);
}

