struct PGlobals {
  x_ScaledScreenParams : vec4<f32>,
  x_GlobalMipBias : vec2<f32>,
  x_AlphaToMaskAvailable : f32,
  @size(4)
  padding : u32,
  x_MainLightPosition : vec4<f32>,
  x_MainLightColor : vec4<f32>,
  x_AmbientOcclusionParam : vec4<f32>,
  x_AdditionalLightsCount : vec4<f32>,
  x_RenderingLayerMaxInt : u32,
  x_RenderingLayerRcpMaxInt : f32,
  @size(8)
  padding_1 : u32,
  x_WorldSpaceCameraPos : vec3<f32>,
  @size(4)
  padding_2 : u32,
  x_ProjectionParams : vec4<f32>,
  unity_OrthoParams : vec4<f32>,
  x_ScaleBiasRt : vec4<f32>,
  unity_FogParams : vec4<f32>,
  unity_FogColor : vec4<f32>,
  unity_MatrixV : mat4x4<f32>,
}

struct UnityPerMaterial {
  Texture2D_B222E8F_TexelSize : vec4<f32>,
  Color_C30C7CA3 : vec4<f32>,
  Texture2D_D9BFD5F1_TexelSize : vec4<f32>,
}

type Arr = array<mat4x4<f32>, 5u>;

struct MainLightShadows {
  x_MainLightWorldToShadow : Arr,
  x_CascadeShadowSplitSpheres0 : vec4<f32>,
  x_CascadeShadowSplitSpheres1 : vec4<f32>,
  x_CascadeShadowSplitSpheres2 : vec4<f32>,
  x_CascadeShadowSplitSpheres3 : vec4<f32>,
  x_CascadeShadowSplitSphereRadii : vec4<f32>,
  x_MainLightShadowOffset0 : vec4<f32>,
  x_MainLightShadowOffset1 : vec4<f32>,
  x_MainLightShadowParams : vec4<f32>,
  x_MainLightShadowmapSize : vec4<f32>,
}

type Arr_1 = array<vec4<f32>, 2u>;

struct UnityPerDraw {
  unity_ObjectToWorld : mat4x4<f32>,
  unity_WorldToObject : mat4x4<f32>,
  unity_LODFade : vec4<f32>,
  unity_WorldTransformParams : vec4<f32>,
  unity_RenderingLayer : vec4<f32>,
  unity_LightData : vec4<f32>,
  unity_LightIndices : Arr_1,
  unity_ProbesOcclusion : vec4<f32>,
  unity_SpecCube0_HDR : vec4<f32>,
  unity_SpecCube1_HDR : vec4<f32>,
  unity_SpecCube0_BoxMax : vec4<f32>,
  unity_SpecCube0_BoxMin : vec4<f32>,
  unity_SpecCube0_ProbePosition : vec4<f32>,
  unity_SpecCube1_BoxMax : vec4<f32>,
  unity_SpecCube1_BoxMin : vec4<f32>,
  unity_SpecCube1_ProbePosition : vec4<f32>,
  unity_LightmapST : vec4<f32>,
  unity_DynamicLightmapST : vec4<f32>,
  unity_SHAr : vec4<f32>,
  unity_SHAg : vec4<f32>,
  unity_SHAb : vec4<f32>,
  unity_SHBr : vec4<f32>,
  unity_SHBg : vec4<f32>,
  unity_SHBb : vec4<f32>,
  unity_SHC : vec4<f32>,
  unity_RendererBounds_Min : vec4<f32>,
  unity_RendererBounds_Max : vec4<f32>,
  unity_MatrixPreviousM : mat4x4<f32>,
  unity_MatrixPreviousMI : mat4x4<f32>,
  unity_MotionVectorsParams : vec4<f32>,
  unity_SpriteColor : vec4<f32>,
  unity_SpriteProps : vec4<f32>,
}

struct strided_arr {
  @size(16)
  el : f32,
}

type Arr_2 = array<strided_arr, 8u>;

struct LightCookies {
  x_MainLightWorldToLight : mat4x4<f32>,
  x_AdditionalLightsCookieEnableBits : Arr_2,
  x_MainLightCookieTextureFormat : f32,
  x_AdditionalLightsCookieAtlasTextureFormat : f32,
}

type Arr_3 = array<vec4<f32>, 256u>;

type Arr_4 = array<vec4<f32>, 256u>;

type Arr_5 = array<vec4<f32>, 256u>;

type Arr_6 = array<vec4<f32>, 256u>;

type Arr_7 = array<vec4<f32>, 256u>;

struct strided_arr_1 {
  @size(16)
  el : f32,
}

type Arr_8 = array<strided_arr_1, 256u>;

type Arr_9 = array<vec4<f32>, 256u>;

type Arr_10 = array<strided_arr_1, 256u>;

struct AdditionalLights {
  x_AdditionalLightsPosition : Arr_9,
  x_AdditionalLightsColor : Arr_9,
  x_AdditionalLightsAttenuation : Arr_9,
  x_AdditionalLightsSpotDir : Arr_9,
  x_AdditionalLightsOcclusionProbes : Arr_9,
  x_AdditionalLightsLayerMasks : Arr_10,
}

type Arr_11 = array<mat4x4<f32>, 256u>;

struct AdditionalLightsCookies {
  x_AdditionalLightsWorldToLights : Arr_11,
  x_AdditionalLightsCookieAtlasUVRects : Arr_9,
  x_AdditionalLightsLightTypes : Arr_10,
}

var<private> gl_FragCoord : vec4<f32>;

var<private> vs_INTERP1 : vec3<f32>;

@group(0) @binding(7) var Texture2D_B222E8F : texture_2d<f32>;

@group(0) @binding(15) var samplerTexture2D_B222E8F : sampler;

var<private> vs_INTERP3 : vec4<f32>;

@group(1) @binding(0) var<uniform> x_66 : PGlobals;

@group(1) @binding(6) var<uniform> x_78 : UnityPerMaterial;

@group(0) @binding(8) var Texture2D_D9BFD5F1 : texture_2d<f32>;

@group(0) @binding(16) var samplerTexture2D_D9BFD5F1 : sampler;

var<private> vs_INTERP4 : vec4<f32>;

var<private> vs_INTERP0 : vec3<f32>;

@group(1) @binding(3) var<uniform> x_138 : MainLightShadows;

@group(0) @binding(4) var x_MainLightShadowmapTexture : texture_depth_2d;

@group(0) @binding(12) var sampler_MainLightShadowmapTexture : sampler_comparison;

var<private> vs_INTERP2 : vec4<f32>;

@group(1) @binding(2) var<uniform> x_1752 : UnityPerDraw;

@group(0) @binding(2) var unity_LightmapInd : texture_2d<f32>;

@group(0) @binding(10) var samplerunity_Lightmap : sampler;

var<private> vs_INTERP5 : vec2<f32>;

@group(0) @binding(1) var unity_Lightmap : texture_2d<f32>;

@group(0) @binding(3) var x_ScreenSpaceOcclusionTexture : texture_2d<f32>;

@group(0) @binding(11) var sampler_ScreenSpaceOcclusionTexture : sampler;

@group(1) @binding(4) var<uniform> x_3312 : LightCookies;

@group(0) @binding(5) var x_MainLightCookieTexture : texture_2d<f32>;

@group(0) @binding(13) var sampler_MainLightCookieTexture : sampler;

@group(0) @binding(0) var unity_SpecCube0 : texture_cube<f32>;

@group(0) @binding(9) var samplerunity_SpecCube0 : sampler;

@group(1) @binding(1) var<uniform> x_3744 : AdditionalLights;

@group(1) @binding(5) var<uniform> x_3882 : AdditionalLightsCookies;

@group(0) @binding(6) var x_AdditionalLightsCookieAtlasTexture : texture_2d<f32>;

@group(0) @binding(14) var sampler_AdditionalLightsCookieAtlasTexture : sampler;

var<private> SV_Target0 : vec4<f32>;

var<private> SV_Target1 : vec4<f32>;

fn main_1() {
  var hlslcc_FragCoord : vec4<f32>;
  var u_xlat0 : vec3<f32>;
  var u_xlat1 : vec4<f32>;
  var u_xlat2 : vec3<f32>;
  var u_xlat3 : vec4<f32>;
  var u_xlat4 : vec4<f32>;
  var u_xlat66 : f32;
  var u_xlat25 : vec3<f32>;
  var u_xlat5 : vec4<f32>;
  var u_xlat6 : vec4<f32>;
  var u_xlat7 : vec4<f32>;
  var u_xlatb4 : vec4<bool>;
  var u_xlatu66 : u32;
  var u_xlati66 : i32;
  var u_xlatb66 : bool;
  var u_xlatb68 : bool;
  var txVec0 : vec3<f32>;
  var txVec1 : vec3<f32>;
  var txVec2 : vec3<f32>;
  var txVec3 : vec3<f32>;
  var u_xlat68 : f32;
  var u_xlatb70 : bool;
  var u_xlat49 : vec2<f32>;
  var u_xlat51 : vec2<f32>;
  var u_xlat8 : vec4<f32>;
  var u_xlat9 : vec4<f32>;
  var u_xlat10 : vec4<f32>;
  var u_xlat11 : vec4<f32>;
  var u_xlat12 : vec4<f32>;
  var u_xlat13 : vec4<f32>;
  var u_xlat70 : f32;
  var txVec4 : vec3<f32>;
  var txVec5 : vec3<f32>;
  var u_xlat27 : vec3<f32>;
  var txVec6 : vec3<f32>;
  var txVec7 : vec3<f32>;
  var txVec8 : vec3<f32>;
  var txVec9 : vec3<f32>;
  var txVec10 : vec3<f32>;
  var txVec11 : vec3<f32>;
  var txVec12 : vec3<f32>;
  var u_xlat28 : vec3<f32>;
  var u_xlat14 : vec4<f32>;
  var u_xlat15 : vec4<f32>;
  var u_xlat29 : vec2<f32>;
  var u_xlat57 : vec2<f32>;
  var u_xlat52 : vec2<f32>;
  var u_xlat16 : vec4<f32>;
  var u_xlat17 : vec4<f32>;
  var u_xlat18 : vec4<f32>;
  var txVec13 : vec3<f32>;
  var txVec14 : vec3<f32>;
  var txVec15 : vec3<f32>;
  var txVec16 : vec3<f32>;
  var txVec17 : vec3<f32>;
  var txVec18 : vec3<f32>;
  var txVec19 : vec3<f32>;
  var txVec20 : vec3<f32>;
  var txVec21 : vec3<f32>;
  var txVec22 : vec3<f32>;
  var txVec23 : vec3<f32>;
  var txVec24 : vec3<f32>;
  var txVec25 : vec3<f32>;
  var txVec26 : vec3<f32>;
  var txVec27 : vec3<f32>;
  var txVec28 : vec3<f32>;
  var txVec29 : vec3<f32>;
  var u_xlatb5 : bool;
  var u_xlatb27 : bool;
  var u_xlatb1 : bool;
  var x_1665 : f32;
  var u_xlat23 : vec3<f32>;
  var u_xlat45 : f32;
  var u_xlat67 : f32;
  var u_xlatb45 : bool;
  var x_1713 : f32;
  var u_xlatb23 : vec3<bool>;
  var x_1849 : vec3<f32>;
  var u_xlat72 : f32;
  var txVec30 : vec3<f32>;
  var txVec31 : vec3<f32>;
  var txVec32 : vec3<f32>;
  var txVec33 : vec3<f32>;
  var u_xlatb73 : bool;
  var u_xlat54 : vec2<f32>;
  var u_xlat73 : f32;
  var txVec34 : vec3<f32>;
  var txVec35 : vec3<f32>;
  var u_xlat30 : f32;
  var txVec36 : vec3<f32>;
  var txVec37 : vec3<f32>;
  var txVec38 : vec3<f32>;
  var txVec39 : vec3<f32>;
  var txVec40 : vec3<f32>;
  var txVec41 : vec3<f32>;
  var txVec42 : vec3<f32>;
  var u_xlat31 : vec3<f32>;
  var u_xlat32 : vec2<f32>;
  var u_xlat60 : vec2<f32>;
  var u_xlat55 : vec2<f32>;
  var u_xlat19 : vec4<f32>;
  var u_xlat20 : vec4<f32>;
  var u_xlat21 : vec4<f32>;
  var txVec43 : vec3<f32>;
  var txVec44 : vec3<f32>;
  var txVec45 : vec3<f32>;
  var txVec46 : vec3<f32>;
  var txVec47 : vec3<f32>;
  var txVec48 : vec3<f32>;
  var txVec49 : vec3<f32>;
  var txVec50 : vec3<f32>;
  var txVec51 : vec3<f32>;
  var txVec52 : vec3<f32>;
  var txVec53 : vec3<f32>;
  var txVec54 : vec3<f32>;
  var txVec55 : vec3<f32>;
  var txVec56 : vec3<f32>;
  var txVec57 : vec3<f32>;
  var txVec58 : vec3<f32>;
  var txVec59 : vec3<f32>;
  var u_xlat26 : f32;
  var u_xlatb8 : vec2<bool>;
  var x_3397 : f32;
  var x_3408 : vec3<f32>;
  var u_xlatu_loop_1 : u32;
  var u_xlatu68 : u32;
  var u_xlati3 : i32;
  var indexable : array<vec4<u32>, 4u>;
  var u_xlatu5 : u32;
  var u_xlati73 : i32;
  var u_xlati5 : i32;
  var u_xlati52 : i32;
  var u_xlat56 : vec2<f32>;
  var u_xlatb52 : vec2<bool>;
  var x_4182 : f32;
  var x_4195 : f32;
  var x_4247 : f32;
  var x_4259 : vec3<f32>;
  var x_4442 : f32;
  var u_xlatu0 : u32;
  var u_xlat_precise_vec4 : vec4<f32>;
  var u_xlat_precise_ivec4 : vec4<i32>;
  var u_xlat_precise_bvec4 : vec4<bool>;
  var u_xlat_precise_uvec4 : vec4<u32>;
  let x_13 : vec4<f32> = gl_FragCoord;
  let x_14 : vec3<f32> = vec3<f32>(x_13.x, x_13.y, x_13.z);
  let x_20 : f32 = gl_FragCoord.w;
  hlslcc_FragCoord = vec4<f32>(x_14.x, x_14.y, x_14.z, (1.0f / x_20));
  let x_30 : vec3<f32> = vs_INTERP1;
  let x_31 : vec3<f32> = vs_INTERP1;
  u_xlat0.x = dot(x_30, x_31);
  let x_37 : f32 = u_xlat0.x;
  u_xlat0.x = sqrt(x_37);
  let x_41 : f32 = u_xlat0.x;
  u_xlat0.x = (1.0f / x_41);
  let x_44 : vec3<f32> = u_xlat0;
  let x_46 : vec3<f32> = vs_INTERP1;
  u_xlat0 = (vec3<f32>(x_44.x, x_44.x, x_44.x) * x_46);
  let x_61 : vec4<f32> = vs_INTERP3;
  let x_71 : f32 = x_66.x_GlobalMipBias.x;
  let x_72 : vec4<f32> = textureSampleBias(Texture2D_B222E8F, samplerTexture2D_B222E8F, vec2<f32>(x_61.x, x_61.y), x_71);
  u_xlat1 = x_72;
  let x_74 : vec4<f32> = u_xlat1;
  let x_81 : vec4<f32> = x_78.Color_C30C7CA3;
  u_xlat2 = (vec3<f32>(x_74.x, x_74.y, x_74.z) * vec3<f32>(x_81.x, x_81.y, x_81.z));
  let x_90 : vec4<f32> = vs_INTERP3;
  let x_93 : f32 = x_66.x_GlobalMipBias.x;
  let x_94 : vec4<f32> = textureSampleBias(Texture2D_D9BFD5F1, samplerTexture2D_D9BFD5F1, vec2<f32>(x_90.x, x_90.y), x_93);
  u_xlat3 = vec4<f32>(x_94.w, x_94.x, x_94.y, x_94.z);
  let x_97 : vec4<f32> = u_xlat3;
  u_xlat4 = ((vec4<f32>(x_97.y, x_97.z, x_97.w, x_97.x) * vec4<f32>(2.0f, 2.0f, 2.0f, 2.0f)) + vec4<f32>(-1.0f, -1.0f, -1.0f, -1.0f));
  let x_106 : vec4<f32> = u_xlat4;
  let x_107 : vec4<f32> = u_xlat4;
  u_xlat66 = dot(x_106, x_107);
  let x_109 : f32 = u_xlat66;
  u_xlat66 = inverseSqrt(x_109);
  let x_112 : f32 = u_xlat66;
  let x_114 : vec4<f32> = u_xlat4;
  u_xlat25 = (vec3<f32>(x_112, x_112, x_112) * vec3<f32>(x_114.x, x_114.y, x_114.z));
  let x_120 : f32 = vs_INTERP4.y;
  u_xlat66 = (x_120 * 200.0f);
  let x_123 : f32 = u_xlat66;
  u_xlat66 = min(x_123, 1.0f);
  let x_125 : f32 = u_xlat66;
  let x_127 : vec4<f32> = u_xlat1;
  let x_129 : vec3<f32> = (vec3<f32>(x_125, x_125, x_125) * vec3<f32>(x_127.x, x_127.y, x_127.z));
  let x_130 : vec4<f32> = u_xlat1;
  u_xlat1 = vec4<f32>(x_129.x, x_129.y, x_129.z, x_130.w);
  let x_133 : vec3<f32> = vs_INTERP0;
  let x_140 : vec4<f32> = x_138.x_CascadeShadowSplitSpheres0;
  let x_143 : vec3<f32> = (x_133 + -(vec3<f32>(x_140.x, x_140.y, x_140.z)));
  let x_144 : vec4<f32> = u_xlat4;
  u_xlat4 = vec4<f32>(x_143.x, x_143.y, x_143.z, x_144.w);
  let x_147 : vec3<f32> = vs_INTERP0;
  let x_150 : vec4<f32> = x_138.x_CascadeShadowSplitSpheres1;
  let x_153 : vec3<f32> = (x_147 + -(vec3<f32>(x_150.x, x_150.y, x_150.z)));
  let x_154 : vec4<f32> = u_xlat5;
  u_xlat5 = vec4<f32>(x_153.x, x_153.y, x_153.z, x_154.w);
  let x_157 : vec3<f32> = vs_INTERP0;
  let x_160 : vec4<f32> = x_138.x_CascadeShadowSplitSpheres2;
  let x_163 : vec3<f32> = (x_157 + -(vec3<f32>(x_160.x, x_160.y, x_160.z)));
  let x_164 : vec4<f32> = u_xlat6;
  u_xlat6 = vec4<f32>(x_163.x, x_163.y, x_163.z, x_164.w);
  let x_167 : vec3<f32> = vs_INTERP0;
  let x_170 : vec4<f32> = x_138.x_CascadeShadowSplitSpheres3;
  let x_173 : vec3<f32> = (x_167 + -(vec3<f32>(x_170.x, x_170.y, x_170.z)));
  let x_174 : vec4<f32> = u_xlat7;
  u_xlat7 = vec4<f32>(x_173.x, x_173.y, x_173.z, x_174.w);
  let x_176 : vec4<f32> = u_xlat4;
  let x_178 : vec4<f32> = u_xlat4;
  u_xlat4.x = dot(vec3<f32>(x_176.x, x_176.y, x_176.z), vec3<f32>(x_178.x, x_178.y, x_178.z));
  let x_182 : vec4<f32> = u_xlat5;
  let x_184 : vec4<f32> = u_xlat5;
  u_xlat4.y = dot(vec3<f32>(x_182.x, x_182.y, x_182.z), vec3<f32>(x_184.x, x_184.y, x_184.z));
  let x_188 : vec4<f32> = u_xlat6;
  let x_190 : vec4<f32> = u_xlat6;
  u_xlat4.z = dot(vec3<f32>(x_188.x, x_188.y, x_188.z), vec3<f32>(x_190.x, x_190.y, x_190.z));
  let x_195 : vec4<f32> = u_xlat7;
  let x_197 : vec4<f32> = u_xlat7;
  u_xlat4.w = dot(vec3<f32>(x_195.x, x_195.y, x_195.z), vec3<f32>(x_197.x, x_197.y, x_197.z));
  let x_205 : vec4<f32> = u_xlat4;
  let x_208 : vec4<f32> = x_138.x_CascadeShadowSplitSphereRadii;
  u_xlatb4 = (x_205 < x_208);
  let x_212 : bool = u_xlatb4.x;
  u_xlat5.x = select(0.0f, 1.0f, x_212);
  let x_217 : bool = u_xlatb4.y;
  u_xlat5.y = select(0.0f, 1.0f, x_217);
  let x_221 : bool = u_xlatb4.z;
  u_xlat5.z = select(0.0f, 1.0f, x_221);
  let x_225 : bool = u_xlatb4.w;
  u_xlat5.w = select(0.0f, 1.0f, x_225);
  let x_229 : bool = u_xlatb4.x;
  u_xlat4.x = select(-0.0f, -1.0f, x_229);
  let x_234 : bool = u_xlatb4.y;
  u_xlat4.y = select(-0.0f, -1.0f, x_234);
  let x_238 : bool = u_xlatb4.z;
  u_xlat4.z = select(-0.0f, -1.0f, x_238);
  let x_241 : vec4<f32> = u_xlat4;
  let x_243 : vec4<f32> = u_xlat5;
  let x_245 : vec3<f32> = (vec3<f32>(x_241.x, x_241.y, x_241.z) + vec3<f32>(x_243.y, x_243.z, x_243.w));
  let x_246 : vec4<f32> = u_xlat4;
  u_xlat4 = vec4<f32>(x_245.x, x_245.y, x_245.z, x_246.w);
  let x_248 : vec4<f32> = u_xlat4;
  let x_251 : vec3<f32> = max(vec3<f32>(x_248.x, x_248.y, x_248.z), vec3<f32>(0.0f, 0.0f, 0.0f));
  let x_252 : vec4<f32> = u_xlat5;
  u_xlat5 = vec4<f32>(x_252.x, x_251.x, x_251.y, x_251.z);
  let x_254 : vec4<f32> = u_xlat5;
  u_xlat66 = dot(x_254, vec4<f32>(4.0f, 3.0f, 2.0f, 1.0f));
  let x_259 : f32 = u_xlat66;
  u_xlat66 = (-(x_259) + 4.0f);
  let x_264 : f32 = u_xlat66;
  u_xlatu66 = u32(x_264);
  let x_268 : u32 = u_xlatu66;
  u_xlati66 = (bitcast<i32>(x_268) << bitcast<u32>(2i));
  let x_271 : vec3<f32> = vs_INTERP0;
  let x_274 : i32 = u_xlati66;
  let x_277 : i32 = u_xlati66;
  let x_281 : vec4<f32> = x_138.x_MainLightWorldToShadow[((x_274 + 1i) / 4i)][((x_277 + 1i) % 4i)];
  let x_283 : vec3<f32> = (vec3<f32>(x_271.y, x_271.y, x_271.y) * vec3<f32>(x_281.x, x_281.y, x_281.z));
  let x_284 : vec4<f32> = u_xlat4;
  u_xlat4 = vec4<f32>(x_283.x, x_283.y, x_283.z, x_284.w);
  let x_286 : i32 = u_xlati66;
  let x_288 : i32 = u_xlati66;
  let x_291 : vec4<f32> = x_138.x_MainLightWorldToShadow[(x_286 / 4i)][(x_288 % 4i)];
  let x_293 : vec3<f32> = vs_INTERP0;
  let x_296 : vec4<f32> = u_xlat4;
  let x_298 : vec3<f32> = ((vec3<f32>(x_291.x, x_291.y, x_291.z) * vec3<f32>(x_293.x, x_293.x, x_293.x)) + vec3<f32>(x_296.x, x_296.y, x_296.z));
  let x_299 : vec4<f32> = u_xlat4;
  u_xlat4 = vec4<f32>(x_298.x, x_298.y, x_298.z, x_299.w);
  let x_301 : i32 = u_xlati66;
  let x_304 : i32 = u_xlati66;
  let x_308 : vec4<f32> = x_138.x_MainLightWorldToShadow[((x_301 + 2i) / 4i)][((x_304 + 2i) % 4i)];
  let x_310 : vec3<f32> = vs_INTERP0;
  let x_313 : vec4<f32> = u_xlat4;
  let x_315 : vec3<f32> = ((vec3<f32>(x_308.x, x_308.y, x_308.z) * vec3<f32>(x_310.z, x_310.z, x_310.z)) + vec3<f32>(x_313.x, x_313.y, x_313.z));
  let x_316 : vec4<f32> = u_xlat4;
  u_xlat4 = vec4<f32>(x_315.x, x_315.y, x_315.z, x_316.w);
  let x_318 : vec4<f32> = u_xlat4;
  let x_320 : i32 = u_xlati66;
  let x_323 : i32 = u_xlati66;
  let x_327 : vec4<f32> = x_138.x_MainLightWorldToShadow[((x_320 + 3i) / 4i)][((x_323 + 3i) % 4i)];
  let x_329 : vec3<f32> = (vec3<f32>(x_318.x, x_318.y, x_318.z) + vec3<f32>(x_327.x, x_327.y, x_327.z));
  let x_330 : vec4<f32> = u_xlat4;
  u_xlat4 = vec4<f32>(x_329.x, x_329.y, x_329.z, x_330.w);
  let x_335 : f32 = x_138.x_MainLightShadowParams.y;
  u_xlatb66 = (0.0f < x_335);
  let x_337 : bool = u_xlatb66;
  if (x_337) {
    let x_342 : f32 = x_138.x_MainLightShadowParams.y;
    u_xlatb68 = (x_342 == 1.0f);
    let x_344 : bool = u_xlatb68;
    if (x_344) {
      let x_347 : vec4<f32> = u_xlat4;
      let x_351 : vec4<f32> = x_138.x_MainLightShadowOffset0;
      u_xlat5 = (vec4<f32>(x_347.x, x_347.y, x_347.x, x_347.y) + x_351);
      let x_354 : vec4<f32> = u_xlat5;
      let x_355 : vec2<f32> = vec2<f32>(x_354.x, x_354.y);
      let x_357 : f32 = u_xlat4.z;
      txVec0 = vec3<f32>(x_355.x, x_355.y, x_357);
      let x_369 : vec3<f32> = txVec0;
      let x_371 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_369.xy, x_369.z);
      u_xlat6.x = x_371;
      let x_374 : vec4<f32> = u_xlat5;
      let x_375 : vec2<f32> = vec2<f32>(x_374.z, x_374.w);
      let x_377 : f32 = u_xlat4.z;
      txVec1 = vec3<f32>(x_375.x, x_375.y, x_377);
      let x_384 : vec3<f32> = txVec1;
      let x_386 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_384.xy, x_384.z);
      u_xlat6.y = x_386;
      let x_388 : vec4<f32> = u_xlat4;
      let x_392 : vec4<f32> = x_138.x_MainLightShadowOffset1;
      u_xlat5 = (vec4<f32>(x_388.x, x_388.y, x_388.x, x_388.y) + x_392);
      let x_395 : vec4<f32> = u_xlat5;
      let x_396 : vec2<f32> = vec2<f32>(x_395.x, x_395.y);
      let x_398 : f32 = u_xlat4.z;
      txVec2 = vec3<f32>(x_396.x, x_396.y, x_398);
      let x_405 : vec3<f32> = txVec2;
      let x_407 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_405.xy, x_405.z);
      u_xlat6.z = x_407;
      let x_410 : vec4<f32> = u_xlat5;
      let x_411 : vec2<f32> = vec2<f32>(x_410.z, x_410.w);
      let x_413 : f32 = u_xlat4.z;
      txVec3 = vec3<f32>(x_411.x, x_411.y, x_413);
      let x_420 : vec3<f32> = txVec3;
      let x_422 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_420.xy, x_420.z);
      u_xlat6.w = x_422;
      let x_425 : vec4<f32> = u_xlat6;
      u_xlat68 = dot(x_425, vec4<f32>(0.25f, 0.25f, 0.25f, 0.25f));
    } else {
      let x_432 : f32 = x_138.x_MainLightShadowParams.y;
      u_xlatb70 = (x_432 == 2.0f);
      let x_434 : bool = u_xlatb70;
      if (x_434) {
        let x_437 : vec4<f32> = u_xlat4;
        let x_441 : vec4<f32> = x_138.x_MainLightShadowmapSize;
        let x_446 : vec2<f32> = ((vec2<f32>(x_437.x, x_437.y) * vec2<f32>(x_441.z, x_441.w)) + vec2<f32>(0.5f, 0.5f));
        let x_447 : vec4<f32> = u_xlat5;
        u_xlat5 = vec4<f32>(x_446.x, x_446.y, x_447.z, x_447.w);
        let x_449 : vec4<f32> = u_xlat5;
        let x_451 : vec2<f32> = floor(vec2<f32>(x_449.x, x_449.y));
        let x_452 : vec4<f32> = u_xlat5;
        u_xlat5 = vec4<f32>(x_451.x, x_451.y, x_452.z, x_452.w);
        let x_456 : vec4<f32> = u_xlat4;
        let x_459 : vec4<f32> = x_138.x_MainLightShadowmapSize;
        let x_462 : vec4<f32> = u_xlat5;
        u_xlat49 = ((vec2<f32>(x_456.x, x_456.y) * vec2<f32>(x_459.z, x_459.w)) + -(vec2<f32>(x_462.x, x_462.y)));
        let x_466 : vec2<f32> = u_xlat49;
        u_xlat6 = (vec4<f32>(x_466.x, x_466.x, x_466.y, x_466.y) + vec4<f32>(0.5f, 1.0f, 0.5f, 1.0f));
        let x_470 : vec4<f32> = u_xlat6;
        let x_472 : vec4<f32> = u_xlat6;
        u_xlat7 = (vec4<f32>(x_470.x, x_470.x, x_470.z, x_470.z) * vec4<f32>(x_472.x, x_472.x, x_472.z, x_472.z));
        let x_475 : vec4<f32> = u_xlat7;
        let x_479 : vec2<f32> = (vec2<f32>(x_475.y, x_475.w) * vec2<f32>(0.079999998f, 0.079999998f));
        let x_480 : vec4<f32> = u_xlat6;
        u_xlat6 = vec4<f32>(x_479.x, x_480.y, x_479.y, x_480.w);
        let x_482 : vec4<f32> = u_xlat7;
        let x_485 : vec2<f32> = u_xlat49;
        let x_487 : vec2<f32> = ((vec2<f32>(x_482.x, x_482.z) * vec2<f32>(0.5f, 0.5f)) + -(x_485));
        let x_488 : vec4<f32> = u_xlat7;
        u_xlat7 = vec4<f32>(x_487.x, x_487.y, x_488.z, x_488.w);
        let x_491 : vec2<f32> = u_xlat49;
        u_xlat51 = (-(x_491) + vec2<f32>(1.0f, 1.0f));
        let x_496 : vec2<f32> = u_xlat49;
        let x_498 : vec2<f32> = min(x_496, vec2<f32>(0.0f, 0.0f));
        let x_499 : vec4<f32> = u_xlat8;
        u_xlat8 = vec4<f32>(x_498.x, x_498.y, x_499.z, x_499.w);
        let x_501 : vec4<f32> = u_xlat8;
        let x_504 : vec4<f32> = u_xlat8;
        let x_507 : vec2<f32> = u_xlat51;
        let x_508 : vec2<f32> = ((-(vec2<f32>(x_501.x, x_501.y)) * vec2<f32>(x_504.x, x_504.y)) + x_507);
        let x_509 : vec4<f32> = u_xlat8;
        u_xlat8 = vec4<f32>(x_508.x, x_508.y, x_509.z, x_509.w);
        let x_511 : vec2<f32> = u_xlat49;
        u_xlat49 = max(x_511, vec2<f32>(0.0f, 0.0f));
        let x_513 : vec2<f32> = u_xlat49;
        let x_515 : vec2<f32> = u_xlat49;
        let x_517 : vec4<f32> = u_xlat6;
        u_xlat49 = ((-(x_513) * x_515) + vec2<f32>(x_517.y, x_517.w));
        let x_520 : vec4<f32> = u_xlat8;
        let x_522 : vec2<f32> = (vec2<f32>(x_520.x, x_520.y) + vec2<f32>(1.0f, 1.0f));
        let x_523 : vec4<f32> = u_xlat8;
        u_xlat8 = vec4<f32>(x_522.x, x_522.y, x_523.z, x_523.w);
        let x_525 : vec2<f32> = u_xlat49;
        u_xlat49 = (x_525 + vec2<f32>(1.0f, 1.0f));
        let x_528 : vec4<f32> = u_xlat7;
        let x_532 : vec2<f32> = (vec2<f32>(x_528.x, x_528.y) * vec2<f32>(0.159999996f, 0.159999996f));
        let x_533 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_532.x, x_532.y, x_533.z, x_533.w);
        let x_535 : vec2<f32> = u_xlat51;
        let x_536 : vec2<f32> = (x_535 * vec2<f32>(0.159999996f, 0.159999996f));
        let x_537 : vec4<f32> = u_xlat7;
        u_xlat7 = vec4<f32>(x_536.x, x_536.y, x_537.z, x_537.w);
        let x_539 : vec4<f32> = u_xlat8;
        let x_541 : vec2<f32> = (vec2<f32>(x_539.x, x_539.y) * vec2<f32>(0.159999996f, 0.159999996f));
        let x_542 : vec4<f32> = u_xlat8;
        u_xlat8 = vec4<f32>(x_541.x, x_541.y, x_542.z, x_542.w);
        let x_545 : vec2<f32> = u_xlat49;
        let x_546 : vec2<f32> = (x_545 * vec2<f32>(0.159999996f, 0.159999996f));
        let x_547 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_546.x, x_546.y, x_547.z, x_547.w);
        let x_549 : vec4<f32> = u_xlat6;
        u_xlat49 = (vec2<f32>(x_549.y, x_549.w) * vec2<f32>(0.159999996f, 0.159999996f));
        let x_553 : f32 = u_xlat8.x;
        u_xlat9.z = x_553;
        let x_556 : f32 = u_xlat49.x;
        u_xlat9.w = x_556;
        let x_559 : f32 = u_xlat10.x;
        u_xlat7.z = x_559;
        let x_562 : f32 = u_xlat6.x;
        u_xlat7.w = x_562;
        let x_565 : vec4<f32> = u_xlat7;
        let x_567 : vec4<f32> = u_xlat9;
        u_xlat11 = (vec4<f32>(x_565.z, x_565.w, x_565.x, x_565.z) + vec4<f32>(x_567.z, x_567.w, x_567.x, x_567.z));
        let x_571 : f32 = u_xlat9.y;
        u_xlat8.z = x_571;
        let x_574 : f32 = u_xlat49.y;
        u_xlat8.w = x_574;
        let x_577 : f32 = u_xlat7.y;
        u_xlat10.z = x_577;
        let x_580 : f32 = u_xlat6.z;
        u_xlat10.w = x_580;
        let x_582 : vec4<f32> = u_xlat8;
        let x_584 : vec4<f32> = u_xlat10;
        let x_586 : vec3<f32> = (vec3<f32>(x_582.z, x_582.y, x_582.w) + vec3<f32>(x_584.z, x_584.y, x_584.w));
        let x_587 : vec4<f32> = u_xlat6;
        u_xlat6 = vec4<f32>(x_586.x, x_586.y, x_586.z, x_587.w);
        let x_589 : vec4<f32> = u_xlat7;
        let x_591 : vec4<f32> = u_xlat11;
        let x_593 : vec3<f32> = (vec3<f32>(x_589.x, x_589.z, x_589.w) / vec3<f32>(x_591.z, x_591.w, x_591.y));
        let x_594 : vec4<f32> = u_xlat7;
        u_xlat7 = vec4<f32>(x_593.x, x_593.y, x_593.z, x_594.w);
        let x_596 : vec4<f32> = u_xlat7;
        let x_602 : vec3<f32> = (vec3<f32>(x_596.x, x_596.y, x_596.z) + vec3<f32>(-2.5f, -0.5f, 1.5f));
        let x_603 : vec4<f32> = u_xlat7;
        u_xlat7 = vec4<f32>(x_602.x, x_602.y, x_602.z, x_603.w);
        let x_605 : vec4<f32> = u_xlat10;
        let x_607 : vec4<f32> = u_xlat6;
        let x_609 : vec3<f32> = (vec3<f32>(x_605.z, x_605.y, x_605.w) / vec3<f32>(x_607.x, x_607.y, x_607.z));
        let x_610 : vec4<f32> = u_xlat8;
        u_xlat8 = vec4<f32>(x_609.x, x_609.y, x_609.z, x_610.w);
        let x_612 : vec4<f32> = u_xlat8;
        let x_614 : vec3<f32> = (vec3<f32>(x_612.x, x_612.y, x_612.z) + vec3<f32>(-2.5f, -0.5f, 1.5f));
        let x_615 : vec4<f32> = u_xlat8;
        u_xlat8 = vec4<f32>(x_614.x, x_614.y, x_614.z, x_615.w);
        let x_617 : vec4<f32> = u_xlat7;
        let x_620 : vec4<f32> = x_138.x_MainLightShadowmapSize;
        let x_622 : vec3<f32> = (vec3<f32>(x_617.y, x_617.x, x_617.z) * vec3<f32>(x_620.x, x_620.x, x_620.x));
        let x_623 : vec4<f32> = u_xlat7;
        u_xlat7 = vec4<f32>(x_622.x, x_622.y, x_622.z, x_623.w);
        let x_625 : vec4<f32> = u_xlat8;
        let x_628 : vec4<f32> = x_138.x_MainLightShadowmapSize;
        let x_630 : vec3<f32> = (vec3<f32>(x_625.x, x_625.y, x_625.z) * vec3<f32>(x_628.y, x_628.y, x_628.y));
        let x_631 : vec4<f32> = u_xlat8;
        u_xlat8 = vec4<f32>(x_630.x, x_630.y, x_630.z, x_631.w);
        let x_634 : f32 = u_xlat8.x;
        u_xlat7.w = x_634;
        let x_636 : vec4<f32> = u_xlat5;
        let x_639 : vec4<f32> = x_138.x_MainLightShadowmapSize;
        let x_642 : vec4<f32> = u_xlat7;
        u_xlat9 = ((vec4<f32>(x_636.x, x_636.y, x_636.x, x_636.y) * vec4<f32>(x_639.x, x_639.y, x_639.x, x_639.y)) + vec4<f32>(x_642.y, x_642.w, x_642.x, x_642.w));
        let x_645 : vec4<f32> = u_xlat5;
        let x_648 : vec4<f32> = x_138.x_MainLightShadowmapSize;
        let x_651 : vec4<f32> = u_xlat7;
        u_xlat49 = ((vec2<f32>(x_645.x, x_645.y) * vec2<f32>(x_648.x, x_648.y)) + vec2<f32>(x_651.z, x_651.w));
        let x_655 : f32 = u_xlat7.y;
        u_xlat8.w = x_655;
        let x_657 : vec4<f32> = u_xlat8;
        let x_658 : vec2<f32> = vec2<f32>(x_657.y, x_657.z);
        let x_659 : vec4<f32> = u_xlat7;
        u_xlat7 = vec4<f32>(x_659.x, x_658.x, x_659.z, x_658.y);
        let x_661 : vec4<f32> = u_xlat5;
        let x_664 : vec4<f32> = x_138.x_MainLightShadowmapSize;
        let x_667 : vec4<f32> = u_xlat7;
        u_xlat10 = ((vec4<f32>(x_661.x, x_661.y, x_661.x, x_661.y) * vec4<f32>(x_664.x, x_664.y, x_664.x, x_664.y)) + vec4<f32>(x_667.x, x_667.y, x_667.z, x_667.y));
        let x_670 : vec4<f32> = u_xlat5;
        let x_673 : vec4<f32> = x_138.x_MainLightShadowmapSize;
        let x_676 : vec4<f32> = u_xlat8;
        u_xlat8 = ((vec4<f32>(x_670.x, x_670.y, x_670.x, x_670.y) * vec4<f32>(x_673.x, x_673.y, x_673.x, x_673.y)) + vec4<f32>(x_676.w, x_676.y, x_676.w, x_676.z));
        let x_679 : vec4<f32> = u_xlat5;
        let x_682 : vec4<f32> = x_138.x_MainLightShadowmapSize;
        let x_685 : vec4<f32> = u_xlat7;
        u_xlat7 = ((vec4<f32>(x_679.x, x_679.y, x_679.x, x_679.y) * vec4<f32>(x_682.x, x_682.y, x_682.x, x_682.y)) + vec4<f32>(x_685.x, x_685.w, x_685.z, x_685.w));
        let x_689 : vec4<f32> = u_xlat6;
        let x_691 : vec4<f32> = u_xlat11;
        u_xlat12 = (vec4<f32>(x_689.x, x_689.x, x_689.x, x_689.y) * vec4<f32>(x_691.z, x_691.w, x_691.y, x_691.z));
        let x_695 : vec4<f32> = u_xlat6;
        let x_697 : vec4<f32> = u_xlat11;
        u_xlat13 = (vec4<f32>(x_695.y, x_695.y, x_695.z, x_695.z) * x_697);
        let x_701 : f32 = u_xlat6.z;
        let x_703 : f32 = u_xlat11.y;
        u_xlat70 = (x_701 * x_703);
        let x_706 : vec4<f32> = u_xlat9;
        let x_707 : vec2<f32> = vec2<f32>(x_706.x, x_706.y);
        let x_709 : f32 = u_xlat4.z;
        txVec4 = vec3<f32>(x_707.x, x_707.y, x_709);
        let x_716 : vec3<f32> = txVec4;
        let x_718 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_716.xy, x_716.z);
        u_xlat5.x = x_718;
        let x_721 : vec4<f32> = u_xlat9;
        let x_722 : vec2<f32> = vec2<f32>(x_721.z, x_721.w);
        let x_724 : f32 = u_xlat4.z;
        txVec5 = vec3<f32>(x_722.x, x_722.y, x_724);
        let x_732 : vec3<f32> = txVec5;
        let x_734 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_732.xy, x_732.z);
        u_xlat27.x = x_734;
        let x_737 : f32 = u_xlat27.x;
        let x_739 : f32 = u_xlat12.y;
        u_xlat27.x = (x_737 * x_739);
        let x_743 : f32 = u_xlat12.x;
        let x_745 : f32 = u_xlat5.x;
        let x_748 : f32 = u_xlat27.x;
        u_xlat5.x = ((x_743 * x_745) + x_748);
        let x_752 : vec2<f32> = u_xlat49;
        let x_754 : f32 = u_xlat4.z;
        txVec6 = vec3<f32>(x_752.x, x_752.y, x_754);
        let x_761 : vec3<f32> = txVec6;
        let x_763 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_761.xy, x_761.z);
        u_xlat27.x = x_763;
        let x_766 : f32 = u_xlat12.z;
        let x_768 : f32 = u_xlat27.x;
        let x_771 : f32 = u_xlat5.x;
        u_xlat5.x = ((x_766 * x_768) + x_771);
        let x_775 : vec4<f32> = u_xlat8;
        let x_776 : vec2<f32> = vec2<f32>(x_775.x, x_775.y);
        let x_778 : f32 = u_xlat4.z;
        txVec7 = vec3<f32>(x_776.x, x_776.y, x_778);
        let x_785 : vec3<f32> = txVec7;
        let x_787 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_785.xy, x_785.z);
        u_xlat27.x = x_787;
        let x_790 : f32 = u_xlat12.w;
        let x_792 : f32 = u_xlat27.x;
        let x_795 : f32 = u_xlat5.x;
        u_xlat5.x = ((x_790 * x_792) + x_795);
        let x_799 : vec4<f32> = u_xlat10;
        let x_800 : vec2<f32> = vec2<f32>(x_799.x, x_799.y);
        let x_802 : f32 = u_xlat4.z;
        txVec8 = vec3<f32>(x_800.x, x_800.y, x_802);
        let x_809 : vec3<f32> = txVec8;
        let x_811 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_809.xy, x_809.z);
        u_xlat27.x = x_811;
        let x_814 : f32 = u_xlat13.x;
        let x_816 : f32 = u_xlat27.x;
        let x_819 : f32 = u_xlat5.x;
        u_xlat5.x = ((x_814 * x_816) + x_819);
        let x_823 : vec4<f32> = u_xlat10;
        let x_824 : vec2<f32> = vec2<f32>(x_823.z, x_823.w);
        let x_826 : f32 = u_xlat4.z;
        txVec9 = vec3<f32>(x_824.x, x_824.y, x_826);
        let x_833 : vec3<f32> = txVec9;
        let x_835 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_833.xy, x_833.z);
        u_xlat27.x = x_835;
        let x_838 : f32 = u_xlat13.y;
        let x_840 : f32 = u_xlat27.x;
        let x_843 : f32 = u_xlat5.x;
        u_xlat5.x = ((x_838 * x_840) + x_843);
        let x_847 : vec4<f32> = u_xlat8;
        let x_848 : vec2<f32> = vec2<f32>(x_847.z, x_847.w);
        let x_850 : f32 = u_xlat4.z;
        txVec10 = vec3<f32>(x_848.x, x_848.y, x_850);
        let x_857 : vec3<f32> = txVec10;
        let x_859 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_857.xy, x_857.z);
        u_xlat27.x = x_859;
        let x_862 : f32 = u_xlat13.z;
        let x_864 : f32 = u_xlat27.x;
        let x_867 : f32 = u_xlat5.x;
        u_xlat5.x = ((x_862 * x_864) + x_867);
        let x_871 : vec4<f32> = u_xlat7;
        let x_872 : vec2<f32> = vec2<f32>(x_871.x, x_871.y);
        let x_874 : f32 = u_xlat4.z;
        txVec11 = vec3<f32>(x_872.x, x_872.y, x_874);
        let x_881 : vec3<f32> = txVec11;
        let x_883 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_881.xy, x_881.z);
        u_xlat27.x = x_883;
        let x_886 : f32 = u_xlat13.w;
        let x_888 : f32 = u_xlat27.x;
        let x_891 : f32 = u_xlat5.x;
        u_xlat5.x = ((x_886 * x_888) + x_891);
        let x_895 : vec4<f32> = u_xlat7;
        let x_896 : vec2<f32> = vec2<f32>(x_895.z, x_895.w);
        let x_898 : f32 = u_xlat4.z;
        txVec12 = vec3<f32>(x_896.x, x_896.y, x_898);
        let x_905 : vec3<f32> = txVec12;
        let x_907 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_905.xy, x_905.z);
        u_xlat27.x = x_907;
        let x_909 : f32 = u_xlat70;
        let x_911 : f32 = u_xlat27.x;
        let x_914 : f32 = u_xlat5.x;
        u_xlat68 = ((x_909 * x_911) + x_914);
      } else {
        let x_917 : vec4<f32> = u_xlat4;
        let x_920 : vec4<f32> = x_138.x_MainLightShadowmapSize;
        let x_923 : vec2<f32> = ((vec2<f32>(x_917.x, x_917.y) * vec2<f32>(x_920.z, x_920.w)) + vec2<f32>(0.5f, 0.5f));
        let x_924 : vec4<f32> = u_xlat5;
        u_xlat5 = vec4<f32>(x_923.x, x_923.y, x_924.z, x_924.w);
        let x_926 : vec4<f32> = u_xlat5;
        let x_928 : vec2<f32> = floor(vec2<f32>(x_926.x, x_926.y));
        let x_929 : vec4<f32> = u_xlat5;
        u_xlat5 = vec4<f32>(x_928.x, x_928.y, x_929.z, x_929.w);
        let x_931 : vec4<f32> = u_xlat4;
        let x_934 : vec4<f32> = x_138.x_MainLightShadowmapSize;
        let x_937 : vec4<f32> = u_xlat5;
        u_xlat49 = ((vec2<f32>(x_931.x, x_931.y) * vec2<f32>(x_934.z, x_934.w)) + -(vec2<f32>(x_937.x, x_937.y)));
        let x_941 : vec2<f32> = u_xlat49;
        u_xlat6 = (vec4<f32>(x_941.x, x_941.x, x_941.y, x_941.y) + vec4<f32>(0.5f, 1.0f, 0.5f, 1.0f));
        let x_944 : vec4<f32> = u_xlat6;
        let x_946 : vec4<f32> = u_xlat6;
        u_xlat7 = (vec4<f32>(x_944.x, x_944.x, x_944.z, x_944.z) * vec4<f32>(x_946.x, x_946.x, x_946.z, x_946.z));
        let x_949 : vec4<f32> = u_xlat7;
        let x_953 : vec2<f32> = (vec2<f32>(x_949.y, x_949.w) * vec2<f32>(0.040816002f, 0.040816002f));
        let x_954 : vec4<f32> = u_xlat8;
        u_xlat8 = vec4<f32>(x_954.x, x_953.x, x_954.z, x_953.y);
        let x_956 : vec4<f32> = u_xlat7;
        let x_959 : vec2<f32> = u_xlat49;
        let x_961 : vec2<f32> = ((vec2<f32>(x_956.x, x_956.z) * vec2<f32>(0.5f, 0.5f)) + -(x_959));
        let x_962 : vec4<f32> = u_xlat6;
        u_xlat6 = vec4<f32>(x_961.x, x_962.y, x_961.y, x_962.w);
        let x_964 : vec2<f32> = u_xlat49;
        let x_966 : vec2<f32> = (-(x_964) + vec2<f32>(1.0f, 1.0f));
        let x_967 : vec4<f32> = u_xlat7;
        u_xlat7 = vec4<f32>(x_966.x, x_966.y, x_967.z, x_967.w);
        let x_969 : vec2<f32> = u_xlat49;
        u_xlat51 = min(x_969, vec2<f32>(0.0f, 0.0f));
        let x_971 : vec2<f32> = u_xlat51;
        let x_973 : vec2<f32> = u_xlat51;
        let x_975 : vec4<f32> = u_xlat7;
        let x_977 : vec2<f32> = ((-(x_971) * x_973) + vec2<f32>(x_975.x, x_975.y));
        let x_978 : vec4<f32> = u_xlat7;
        u_xlat7 = vec4<f32>(x_977.x, x_977.y, x_978.z, x_978.w);
        let x_980 : vec2<f32> = u_xlat49;
        u_xlat51 = max(x_980, vec2<f32>(0.0f, 0.0f));
        let x_983 : vec2<f32> = u_xlat51;
        let x_985 : vec2<f32> = u_xlat51;
        let x_987 : vec4<f32> = u_xlat6;
        let x_989 : vec2<f32> = ((-(x_983) * x_985) + vec2<f32>(x_987.y, x_987.w));
        let x_990 : vec3<f32> = u_xlat28;
        u_xlat28 = vec3<f32>(x_989.x, x_990.y, x_989.y);
        let x_992 : vec4<f32> = u_xlat7;
        let x_995 : vec2<f32> = (vec2<f32>(x_992.x, x_992.y) + vec2<f32>(2.0f, 2.0f));
        let x_996 : vec4<f32> = u_xlat7;
        u_xlat7 = vec4<f32>(x_995.x, x_995.y, x_996.z, x_996.w);
        let x_998 : vec3<f32> = u_xlat28;
        let x_1000 : vec2<f32> = (vec2<f32>(x_998.x, x_998.z) + vec2<f32>(2.0f, 2.0f));
        let x_1001 : vec4<f32> = u_xlat6;
        u_xlat6 = vec4<f32>(x_1001.x, x_1000.x, x_1001.z, x_1000.y);
        let x_1004 : f32 = u_xlat6.y;
        u_xlat9.z = (x_1004 * 0.081632003f);
        let x_1008 : vec4<f32> = u_xlat6;
        let x_1011 : vec3<f32> = (vec3<f32>(x_1008.z, x_1008.x, x_1008.w) * vec3<f32>(0.081632003f, 0.081632003f, 0.081632003f));
        let x_1012 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_1011.x, x_1011.y, x_1011.z, x_1012.w);
        let x_1014 : vec4<f32> = u_xlat7;
        let x_1017 : vec2<f32> = (vec2<f32>(x_1014.x, x_1014.y) * vec2<f32>(0.081632003f, 0.081632003f));
        let x_1018 : vec4<f32> = u_xlat6;
        u_xlat6 = vec4<f32>(x_1017.x, x_1017.y, x_1018.z, x_1018.w);
        let x_1021 : f32 = u_xlat10.y;
        u_xlat9.x = x_1021;
        let x_1023 : vec2<f32> = u_xlat49;
        let x_1030 : vec2<f32> = ((vec2<f32>(x_1023.x, x_1023.x) * vec2<f32>(-0.081632003f, 0.081632003f)) + vec2<f32>(0.163264006f, 0.081632003f));
        let x_1031 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_1031.x, x_1030.x, x_1031.z, x_1030.y);
        let x_1033 : vec2<f32> = u_xlat49;
        let x_1037 : vec2<f32> = ((vec2<f32>(x_1033.x, x_1033.x) * vec2<f32>(-0.081632003f, 0.081632003f)) + vec2<f32>(0.081632003f, 0.163264006f));
        let x_1038 : vec4<f32> = u_xlat7;
        u_xlat7 = vec4<f32>(x_1037.x, x_1038.y, x_1037.y, x_1038.w);
        let x_1041 : f32 = u_xlat6.x;
        u_xlat7.y = x_1041;
        let x_1044 : f32 = u_xlat8.y;
        u_xlat7.w = x_1044;
        let x_1046 : vec4<f32> = u_xlat7;
        let x_1047 : vec4<f32> = u_xlat9;
        u_xlat9 = (x_1046 + x_1047);
        let x_1049 : vec2<f32> = u_xlat49;
        let x_1052 : vec2<f32> = ((vec2<f32>(x_1049.y, x_1049.y) * vec2<f32>(-0.081632003f, 0.081632003f)) + vec2<f32>(0.163264006f, 0.081632003f));
        let x_1053 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_1053.x, x_1052.x, x_1053.z, x_1052.y);
        let x_1055 : vec2<f32> = u_xlat49;
        let x_1058 : vec2<f32> = ((vec2<f32>(x_1055.y, x_1055.y) * vec2<f32>(-0.081632003f, 0.081632003f)) + vec2<f32>(0.081632003f, 0.163264006f));
        let x_1059 : vec4<f32> = u_xlat8;
        u_xlat8 = vec4<f32>(x_1058.x, x_1059.y, x_1058.y, x_1059.w);
        let x_1062 : f32 = u_xlat6.y;
        u_xlat8.y = x_1062;
        let x_1064 : vec4<f32> = u_xlat8;
        let x_1065 : vec4<f32> = u_xlat10;
        u_xlat6 = (x_1064 + x_1065);
        let x_1067 : vec4<f32> = u_xlat7;
        let x_1068 : vec4<f32> = u_xlat9;
        u_xlat7 = (x_1067 / x_1068);
        let x_1070 : vec4<f32> = u_xlat7;
        u_xlat7 = (x_1070 + vec4<f32>(-3.5f, -1.5f, 0.5f, 2.5f));
        let x_1076 : vec4<f32> = u_xlat8;
        let x_1077 : vec4<f32> = u_xlat6;
        u_xlat8 = (x_1076 / x_1077);
        let x_1079 : vec4<f32> = u_xlat8;
        u_xlat8 = (x_1079 + vec4<f32>(-3.5f, -1.5f, 0.5f, 2.5f));
        let x_1081 : vec4<f32> = u_xlat7;
        let x_1084 : vec4<f32> = x_138.x_MainLightShadowmapSize;
        u_xlat7 = (vec4<f32>(x_1081.w, x_1081.x, x_1081.y, x_1081.z) * vec4<f32>(x_1084.x, x_1084.x, x_1084.x, x_1084.x));
        let x_1087 : vec4<f32> = u_xlat8;
        let x_1090 : vec4<f32> = x_138.x_MainLightShadowmapSize;
        u_xlat8 = (vec4<f32>(x_1087.x, x_1087.w, x_1087.y, x_1087.z) * vec4<f32>(x_1090.y, x_1090.y, x_1090.y, x_1090.y));
        let x_1093 : vec4<f32> = u_xlat7;
        let x_1094 : vec3<f32> = vec3<f32>(x_1093.y, x_1093.z, x_1093.w);
        let x_1095 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_1094.x, x_1095.y, x_1094.y, x_1094.z);
        let x_1098 : f32 = u_xlat8.x;
        u_xlat10.y = x_1098;
        let x_1100 : vec4<f32> = u_xlat5;
        let x_1103 : vec4<f32> = x_138.x_MainLightShadowmapSize;
        let x_1106 : vec4<f32> = u_xlat10;
        u_xlat11 = ((vec4<f32>(x_1100.x, x_1100.y, x_1100.x, x_1100.y) * vec4<f32>(x_1103.x, x_1103.y, x_1103.x, x_1103.y)) + vec4<f32>(x_1106.x, x_1106.y, x_1106.z, x_1106.y));
        let x_1109 : vec4<f32> = u_xlat5;
        let x_1112 : vec4<f32> = x_138.x_MainLightShadowmapSize;
        let x_1115 : vec4<f32> = u_xlat10;
        u_xlat49 = ((vec2<f32>(x_1109.x, x_1109.y) * vec2<f32>(x_1112.x, x_1112.y)) + vec2<f32>(x_1115.w, x_1115.y));
        let x_1119 : f32 = u_xlat10.y;
        u_xlat7.y = x_1119;
        let x_1122 : f32 = u_xlat8.z;
        u_xlat10.y = x_1122;
        let x_1124 : vec4<f32> = u_xlat5;
        let x_1127 : vec4<f32> = x_138.x_MainLightShadowmapSize;
        let x_1130 : vec4<f32> = u_xlat10;
        u_xlat12 = ((vec4<f32>(x_1124.x, x_1124.y, x_1124.x, x_1124.y) * vec4<f32>(x_1127.x, x_1127.y, x_1127.x, x_1127.y)) + vec4<f32>(x_1130.x, x_1130.y, x_1130.z, x_1130.y));
        let x_1133 : vec4<f32> = u_xlat5;
        let x_1136 : vec4<f32> = x_138.x_MainLightShadowmapSize;
        let x_1139 : vec4<f32> = u_xlat10;
        let x_1141 : vec2<f32> = ((vec2<f32>(x_1133.x, x_1133.y) * vec2<f32>(x_1136.x, x_1136.y)) + vec2<f32>(x_1139.w, x_1139.y));
        let x_1142 : vec4<f32> = u_xlat13;
        u_xlat13 = vec4<f32>(x_1141.x, x_1141.y, x_1142.z, x_1142.w);
        let x_1145 : f32 = u_xlat10.y;
        u_xlat7.z = x_1145;
        let x_1148 : vec4<f32> = u_xlat5;
        let x_1151 : vec4<f32> = x_138.x_MainLightShadowmapSize;
        let x_1154 : vec4<f32> = u_xlat7;
        u_xlat14 = ((vec4<f32>(x_1148.x, x_1148.y, x_1148.x, x_1148.y) * vec4<f32>(x_1151.x, x_1151.y, x_1151.x, x_1151.y)) + vec4<f32>(x_1154.x, x_1154.y, x_1154.x, x_1154.z));
        let x_1158 : f32 = u_xlat8.w;
        u_xlat10.y = x_1158;
        let x_1161 : vec4<f32> = u_xlat5;
        let x_1164 : vec4<f32> = x_138.x_MainLightShadowmapSize;
        let x_1167 : vec4<f32> = u_xlat10;
        u_xlat15 = ((vec4<f32>(x_1161.x, x_1161.y, x_1161.x, x_1161.y) * vec4<f32>(x_1164.x, x_1164.y, x_1164.x, x_1164.y)) + vec4<f32>(x_1167.x, x_1167.y, x_1167.z, x_1167.y));
        let x_1171 : vec4<f32> = u_xlat5;
        let x_1174 : vec4<f32> = x_138.x_MainLightShadowmapSize;
        let x_1177 : vec4<f32> = u_xlat10;
        u_xlat29 = ((vec2<f32>(x_1171.x, x_1171.y) * vec2<f32>(x_1174.x, x_1174.y)) + vec2<f32>(x_1177.w, x_1177.y));
        let x_1181 : f32 = u_xlat10.y;
        u_xlat7.w = x_1181;
        let x_1184 : vec4<f32> = u_xlat5;
        let x_1187 : vec4<f32> = x_138.x_MainLightShadowmapSize;
        let x_1190 : vec4<f32> = u_xlat7;
        u_xlat57 = ((vec2<f32>(x_1184.x, x_1184.y) * vec2<f32>(x_1187.x, x_1187.y)) + vec2<f32>(x_1190.x, x_1190.w));
        let x_1193 : vec4<f32> = u_xlat10;
        let x_1194 : vec3<f32> = vec3<f32>(x_1193.x, x_1193.z, x_1193.w);
        let x_1195 : vec4<f32> = u_xlat8;
        u_xlat8 = vec4<f32>(x_1194.x, x_1195.y, x_1194.y, x_1194.z);
        let x_1197 : vec4<f32> = u_xlat5;
        let x_1200 : vec4<f32> = x_138.x_MainLightShadowmapSize;
        let x_1203 : vec4<f32> = u_xlat8;
        u_xlat10 = ((vec4<f32>(x_1197.x, x_1197.y, x_1197.x, x_1197.y) * vec4<f32>(x_1200.x, x_1200.y, x_1200.x, x_1200.y)) + vec4<f32>(x_1203.x, x_1203.y, x_1203.z, x_1203.y));
        let x_1207 : vec4<f32> = u_xlat5;
        let x_1210 : vec4<f32> = x_138.x_MainLightShadowmapSize;
        let x_1213 : vec4<f32> = u_xlat8;
        u_xlat52 = ((vec2<f32>(x_1207.x, x_1207.y) * vec2<f32>(x_1210.x, x_1210.y)) + vec2<f32>(x_1213.w, x_1213.y));
        let x_1217 : f32 = u_xlat7.x;
        u_xlat8.x = x_1217;
        let x_1219 : vec4<f32> = u_xlat5;
        let x_1222 : vec4<f32> = x_138.x_MainLightShadowmapSize;
        let x_1225 : vec4<f32> = u_xlat8;
        let x_1227 : vec2<f32> = ((vec2<f32>(x_1219.x, x_1219.y) * vec2<f32>(x_1222.x, x_1222.y)) + vec2<f32>(x_1225.x, x_1225.y));
        let x_1228 : vec4<f32> = u_xlat5;
        u_xlat5 = vec4<f32>(x_1227.x, x_1227.y, x_1228.z, x_1228.w);
        let x_1231 : vec4<f32> = u_xlat6;
        let x_1233 : vec4<f32> = u_xlat9;
        u_xlat16 = (vec4<f32>(x_1231.x, x_1231.x, x_1231.x, x_1231.x) * x_1233);
        let x_1236 : vec4<f32> = u_xlat6;
        let x_1238 : vec4<f32> = u_xlat9;
        u_xlat17 = (vec4<f32>(x_1236.y, x_1236.y, x_1236.y, x_1236.y) * x_1238);
        let x_1241 : vec4<f32> = u_xlat6;
        let x_1243 : vec4<f32> = u_xlat9;
        u_xlat18 = (vec4<f32>(x_1241.z, x_1241.z, x_1241.z, x_1241.z) * x_1243);
        let x_1245 : vec4<f32> = u_xlat6;
        let x_1247 : vec4<f32> = u_xlat9;
        u_xlat6 = (vec4<f32>(x_1245.w, x_1245.w, x_1245.w, x_1245.w) * x_1247);
        let x_1250 : vec4<f32> = u_xlat11;
        let x_1251 : vec2<f32> = vec2<f32>(x_1250.x, x_1250.y);
        let x_1253 : f32 = u_xlat4.z;
        txVec13 = vec3<f32>(x_1251.x, x_1251.y, x_1253);
        let x_1260 : vec3<f32> = txVec13;
        let x_1262 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1260.xy, x_1260.z);
        u_xlat70 = x_1262;
        let x_1264 : vec4<f32> = u_xlat11;
        let x_1265 : vec2<f32> = vec2<f32>(x_1264.z, x_1264.w);
        let x_1267 : f32 = u_xlat4.z;
        txVec14 = vec3<f32>(x_1265.x, x_1265.y, x_1267);
        let x_1274 : vec3<f32> = txVec14;
        let x_1276 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1274.xy, x_1274.z);
        u_xlat7.x = x_1276;
        let x_1279 : f32 = u_xlat7.x;
        let x_1281 : f32 = u_xlat16.y;
        u_xlat7.x = (x_1279 * x_1281);
        let x_1285 : f32 = u_xlat16.x;
        let x_1286 : f32 = u_xlat70;
        let x_1289 : f32 = u_xlat7.x;
        u_xlat70 = ((x_1285 * x_1286) + x_1289);
        let x_1292 : vec2<f32> = u_xlat49;
        let x_1294 : f32 = u_xlat4.z;
        txVec15 = vec3<f32>(x_1292.x, x_1292.y, x_1294);
        let x_1301 : vec3<f32> = txVec15;
        let x_1303 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1301.xy, x_1301.z);
        u_xlat49.x = x_1303;
        let x_1306 : f32 = u_xlat16.z;
        let x_1308 : f32 = u_xlat49.x;
        let x_1310 : f32 = u_xlat70;
        u_xlat70 = ((x_1306 * x_1308) + x_1310);
        let x_1313 : vec4<f32> = u_xlat14;
        let x_1314 : vec2<f32> = vec2<f32>(x_1313.x, x_1313.y);
        let x_1316 : f32 = u_xlat4.z;
        txVec16 = vec3<f32>(x_1314.x, x_1314.y, x_1316);
        let x_1323 : vec3<f32> = txVec16;
        let x_1325 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1323.xy, x_1323.z);
        u_xlat49.x = x_1325;
        let x_1328 : f32 = u_xlat16.w;
        let x_1330 : f32 = u_xlat49.x;
        let x_1332 : f32 = u_xlat70;
        u_xlat70 = ((x_1328 * x_1330) + x_1332);
        let x_1335 : vec4<f32> = u_xlat12;
        let x_1336 : vec2<f32> = vec2<f32>(x_1335.x, x_1335.y);
        let x_1338 : f32 = u_xlat4.z;
        txVec17 = vec3<f32>(x_1336.x, x_1336.y, x_1338);
        let x_1345 : vec3<f32> = txVec17;
        let x_1347 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1345.xy, x_1345.z);
        u_xlat49.x = x_1347;
        let x_1350 : f32 = u_xlat17.x;
        let x_1352 : f32 = u_xlat49.x;
        let x_1354 : f32 = u_xlat70;
        u_xlat70 = ((x_1350 * x_1352) + x_1354);
        let x_1357 : vec4<f32> = u_xlat12;
        let x_1358 : vec2<f32> = vec2<f32>(x_1357.z, x_1357.w);
        let x_1360 : f32 = u_xlat4.z;
        txVec18 = vec3<f32>(x_1358.x, x_1358.y, x_1360);
        let x_1367 : vec3<f32> = txVec18;
        let x_1369 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1367.xy, x_1367.z);
        u_xlat49.x = x_1369;
        let x_1372 : f32 = u_xlat17.y;
        let x_1374 : f32 = u_xlat49.x;
        let x_1376 : f32 = u_xlat70;
        u_xlat70 = ((x_1372 * x_1374) + x_1376);
        let x_1379 : vec4<f32> = u_xlat13;
        let x_1380 : vec2<f32> = vec2<f32>(x_1379.x, x_1379.y);
        let x_1382 : f32 = u_xlat4.z;
        txVec19 = vec3<f32>(x_1380.x, x_1380.y, x_1382);
        let x_1389 : vec3<f32> = txVec19;
        let x_1391 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1389.xy, x_1389.z);
        u_xlat49.x = x_1391;
        let x_1394 : f32 = u_xlat17.z;
        let x_1396 : f32 = u_xlat49.x;
        let x_1398 : f32 = u_xlat70;
        u_xlat70 = ((x_1394 * x_1396) + x_1398);
        let x_1401 : vec4<f32> = u_xlat14;
        let x_1402 : vec2<f32> = vec2<f32>(x_1401.z, x_1401.w);
        let x_1404 : f32 = u_xlat4.z;
        txVec20 = vec3<f32>(x_1402.x, x_1402.y, x_1404);
        let x_1411 : vec3<f32> = txVec20;
        let x_1413 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1411.xy, x_1411.z);
        u_xlat49.x = x_1413;
        let x_1416 : f32 = u_xlat17.w;
        let x_1418 : f32 = u_xlat49.x;
        let x_1420 : f32 = u_xlat70;
        u_xlat70 = ((x_1416 * x_1418) + x_1420);
        let x_1423 : vec4<f32> = u_xlat15;
        let x_1424 : vec2<f32> = vec2<f32>(x_1423.x, x_1423.y);
        let x_1426 : f32 = u_xlat4.z;
        txVec21 = vec3<f32>(x_1424.x, x_1424.y, x_1426);
        let x_1433 : vec3<f32> = txVec21;
        let x_1435 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1433.xy, x_1433.z);
        u_xlat49.x = x_1435;
        let x_1438 : f32 = u_xlat18.x;
        let x_1440 : f32 = u_xlat49.x;
        let x_1442 : f32 = u_xlat70;
        u_xlat70 = ((x_1438 * x_1440) + x_1442);
        let x_1445 : vec4<f32> = u_xlat15;
        let x_1446 : vec2<f32> = vec2<f32>(x_1445.z, x_1445.w);
        let x_1448 : f32 = u_xlat4.z;
        txVec22 = vec3<f32>(x_1446.x, x_1446.y, x_1448);
        let x_1455 : vec3<f32> = txVec22;
        let x_1457 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1455.xy, x_1455.z);
        u_xlat49.x = x_1457;
        let x_1460 : f32 = u_xlat18.y;
        let x_1462 : f32 = u_xlat49.x;
        let x_1464 : f32 = u_xlat70;
        u_xlat70 = ((x_1460 * x_1462) + x_1464);
        let x_1467 : vec2<f32> = u_xlat29;
        let x_1469 : f32 = u_xlat4.z;
        txVec23 = vec3<f32>(x_1467.x, x_1467.y, x_1469);
        let x_1476 : vec3<f32> = txVec23;
        let x_1478 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1476.xy, x_1476.z);
        u_xlat49.x = x_1478;
        let x_1481 : f32 = u_xlat18.z;
        let x_1483 : f32 = u_xlat49.x;
        let x_1485 : f32 = u_xlat70;
        u_xlat70 = ((x_1481 * x_1483) + x_1485);
        let x_1488 : vec2<f32> = u_xlat57;
        let x_1490 : f32 = u_xlat4.z;
        txVec24 = vec3<f32>(x_1488.x, x_1488.y, x_1490);
        let x_1497 : vec3<f32> = txVec24;
        let x_1499 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1497.xy, x_1497.z);
        u_xlat49.x = x_1499;
        let x_1502 : f32 = u_xlat18.w;
        let x_1504 : f32 = u_xlat49.x;
        let x_1506 : f32 = u_xlat70;
        u_xlat70 = ((x_1502 * x_1504) + x_1506);
        let x_1509 : vec4<f32> = u_xlat10;
        let x_1510 : vec2<f32> = vec2<f32>(x_1509.x, x_1509.y);
        let x_1512 : f32 = u_xlat4.z;
        txVec25 = vec3<f32>(x_1510.x, x_1510.y, x_1512);
        let x_1519 : vec3<f32> = txVec25;
        let x_1521 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1519.xy, x_1519.z);
        u_xlat49.x = x_1521;
        let x_1524 : f32 = u_xlat6.x;
        let x_1526 : f32 = u_xlat49.x;
        let x_1528 : f32 = u_xlat70;
        u_xlat70 = ((x_1524 * x_1526) + x_1528);
        let x_1531 : vec4<f32> = u_xlat10;
        let x_1532 : vec2<f32> = vec2<f32>(x_1531.z, x_1531.w);
        let x_1534 : f32 = u_xlat4.z;
        txVec26 = vec3<f32>(x_1532.x, x_1532.y, x_1534);
        let x_1541 : vec3<f32> = txVec26;
        let x_1543 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1541.xy, x_1541.z);
        u_xlat49.x = x_1543;
        let x_1546 : f32 = u_xlat6.y;
        let x_1548 : f32 = u_xlat49.x;
        let x_1550 : f32 = u_xlat70;
        u_xlat70 = ((x_1546 * x_1548) + x_1550);
        let x_1553 : vec2<f32> = u_xlat52;
        let x_1555 : f32 = u_xlat4.z;
        txVec27 = vec3<f32>(x_1553.x, x_1553.y, x_1555);
        let x_1562 : vec3<f32> = txVec27;
        let x_1564 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1562.xy, x_1562.z);
        u_xlat49.x = x_1564;
        let x_1567 : f32 = u_xlat6.z;
        let x_1569 : f32 = u_xlat49.x;
        let x_1571 : f32 = u_xlat70;
        u_xlat70 = ((x_1567 * x_1569) + x_1571);
        let x_1574 : vec4<f32> = u_xlat5;
        let x_1575 : vec2<f32> = vec2<f32>(x_1574.x, x_1574.y);
        let x_1577 : f32 = u_xlat4.z;
        txVec28 = vec3<f32>(x_1575.x, x_1575.y, x_1577);
        let x_1584 : vec3<f32> = txVec28;
        let x_1586 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1584.xy, x_1584.z);
        u_xlat5.x = x_1586;
        let x_1589 : f32 = u_xlat6.w;
        let x_1591 : f32 = u_xlat5.x;
        let x_1593 : f32 = u_xlat70;
        u_xlat68 = ((x_1589 * x_1591) + x_1593);
      }
    }
  } else {
    let x_1597 : vec4<f32> = u_xlat4;
    let x_1598 : vec2<f32> = vec2<f32>(x_1597.x, x_1597.y);
    let x_1600 : f32 = u_xlat4.z;
    txVec29 = vec3<f32>(x_1598.x, x_1598.y, x_1600);
    let x_1607 : vec3<f32> = txVec29;
    let x_1609 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1607.xy, x_1607.z);
    u_xlat68 = x_1609;
  }
  let x_1611 : f32 = x_138.x_MainLightShadowParams.x;
  u_xlat70 = (-(x_1611) + 1.0f);
  let x_1614 : f32 = u_xlat68;
  let x_1616 : f32 = x_138.x_MainLightShadowParams.x;
  let x_1618 : f32 = u_xlat70;
  u_xlat68 = ((x_1614 * x_1616) + x_1618);
  let x_1622 : f32 = u_xlat4.z;
  u_xlatb5 = (0.0f >= x_1622);
  let x_1626 : f32 = u_xlat4.z;
  u_xlatb27 = (x_1626 >= 1.0f);
  let x_1628 : bool = u_xlatb27;
  let x_1629 : bool = u_xlatb5;
  u_xlatb5 = (x_1628 | x_1629);
  let x_1631 : bool = u_xlatb5;
  let x_1632 : f32 = u_xlat68;
  u_xlat68 = select(x_1632, 1.0f, x_1631);
  let x_1634 : vec3<f32> = u_xlat0;
  let x_1636 : vec4<f32> = x_66.x_MainLightPosition;
  u_xlat0.x = dot(x_1634, -(vec3<f32>(x_1636.x, x_1636.y, x_1636.z)));
  let x_1642 : f32 = u_xlat0.x;
  u_xlat0.x = clamp(x_1642, 0.0f, 1.0f);
  let x_1645 : f32 = u_xlat68;
  let x_1648 : vec4<f32> = x_66.x_MainLightColor;
  u_xlat27 = (vec3<f32>(x_1645, x_1645, x_1645) * vec3<f32>(x_1648.x, x_1648.y, x_1648.z));
  let x_1651 : vec3<f32> = u_xlat0;
  let x_1653 : vec3<f32> = u_xlat27;
  u_xlat0 = (vec3<f32>(x_1651.x, x_1651.x, x_1651.x) * x_1653);
  let x_1655 : vec3<f32> = u_xlat0;
  let x_1656 : vec4<f32> = u_xlat1;
  u_xlat0 = (x_1655 * vec3<f32>(x_1656.x, x_1656.y, x_1656.z));
  let x_1661 : f32 = u_xlat1.w;
  u_xlatb1 = (x_1661 >= 0.400000006f);
  let x_1664 : bool = u_xlatb1;
  if (x_1664) {
    let x_1669 : f32 = u_xlat1.w;
    x_1665 = x_1669;
  } else {
    x_1665 = 0.0f;
  }
  let x_1671 : f32 = x_1665;
  u_xlat1.x = x_1671;
  let x_1675 : f32 = u_xlat1.w;
  u_xlat23.x = (x_1675 + -0.400000006f);
  let x_1681 : f32 = u_xlat1.w;
  u_xlat45 = dpdxCoarse(x_1681);
  let x_1685 : f32 = u_xlat1.w;
  u_xlat67 = dpdyCoarse(x_1685);
  let x_1687 : f32 = u_xlat67;
  let x_1689 : f32 = u_xlat45;
  u_xlat45 = (abs(x_1687) + abs(x_1689));
  let x_1692 : f32 = u_xlat45;
  u_xlat45 = max(x_1692, 0.0001f);
  let x_1696 : f32 = u_xlat23.x;
  let x_1697 : f32 = u_xlat45;
  u_xlat23.x = (x_1696 / x_1697);
  let x_1701 : f32 = u_xlat23.x;
  u_xlat23.x = (x_1701 + 0.5f);
  let x_1705 : f32 = u_xlat23.x;
  u_xlat23.x = clamp(x_1705, 0.0f, 1.0f);
  let x_1710 : f32 = x_66.x_AlphaToMaskAvailable;
  u_xlatb45 = !((x_1710 == 0.0f));
  let x_1712 : bool = u_xlatb45;
  if (x_1712) {
    let x_1717 : f32 = u_xlat23.x;
    x_1713 = x_1717;
  } else {
    let x_1720 : f32 = u_xlat1.x;
    x_1713 = x_1720;
  }
  let x_1721 : f32 = x_1713;
  u_xlat1.x = x_1721;
  let x_1724 : f32 = u_xlat1.x;
  u_xlat23.x = (x_1724 + -0.0001f);
  let x_1732 : f32 = u_xlat23.x;
  u_xlatb23.x = (x_1732 < 0.0f);
  let x_1736 : bool = u_xlatb23.x;
  if (((select(0i, 1i, x_1736) * -1i) != 0i)) {
    discard;
  }
  let x_1746 : f32 = vs_INTERP2.w;
  u_xlatb23.x = (0.0f < x_1746);
  let x_1754 : f32 = x_1752.unity_WorldTransformParams.w;
  u_xlatb23.z = (x_1754 >= 0.0f);
  let x_1758 : bool = u_xlatb23.x;
  u_xlat23.x = select(-1.0f, 1.0f, x_1758);
  let x_1762 : bool = u_xlatb23.z;
  u_xlat23.z = select(-1.0f, 1.0f, x_1762);
  let x_1766 : f32 = u_xlat23.z;
  let x_1768 : f32 = u_xlat23.x;
  u_xlat23.x = (x_1766 * x_1768);
  let x_1771 : vec3<f32> = vs_INTERP1;
  let x_1773 : vec4<f32> = vs_INTERP2;
  u_xlat27 = (vec3<f32>(x_1771.z, x_1771.x, x_1771.y) * vec3<f32>(x_1773.y, x_1773.z, x_1773.x));
  let x_1776 : vec3<f32> = vs_INTERP1;
  let x_1778 : vec4<f32> = vs_INTERP2;
  let x_1781 : vec3<f32> = u_xlat27;
  u_xlat27 = ((vec3<f32>(x_1776.y, x_1776.z, x_1776.x) * vec3<f32>(x_1778.z, x_1778.x, x_1778.y)) + -(x_1781));
  let x_1784 : vec3<f32> = u_xlat23;
  let x_1786 : vec3<f32> = u_xlat27;
  u_xlat27 = (vec3<f32>(x_1784.x, x_1784.x, x_1784.x) * x_1786);
  let x_1788 : vec3<f32> = u_xlat25;
  let x_1790 : vec3<f32> = u_xlat27;
  u_xlat27 = (vec3<f32>(x_1788.y, x_1788.y, x_1788.y) * x_1790);
  let x_1792 : vec3<f32> = u_xlat25;
  let x_1794 : vec4<f32> = vs_INTERP2;
  let x_1797 : vec3<f32> = u_xlat27;
  u_xlat27 = ((vec3<f32>(x_1792.x, x_1792.x, x_1792.x) * vec3<f32>(x_1794.x, x_1794.y, x_1794.z)) + x_1797);
  let x_1799 : vec3<f32> = u_xlat25;
  let x_1801 : vec3<f32> = vs_INTERP1;
  let x_1803 : vec3<f32> = u_xlat27;
  u_xlat25 = ((vec3<f32>(x_1799.z, x_1799.z, x_1799.z) * x_1801) + x_1803);
  let x_1805 : vec3<f32> = u_xlat25;
  let x_1806 : vec3<f32> = u_xlat25;
  u_xlat23.x = dot(x_1805, x_1806);
  let x_1810 : f32 = u_xlat23.x;
  u_xlat23.x = inverseSqrt(x_1810);
  let x_1813 : vec3<f32> = u_xlat23;
  let x_1815 : vec3<f32> = u_xlat25;
  u_xlat25 = (vec3<f32>(x_1813.x, x_1813.x, x_1813.x) * x_1815);
  let x_1819 : f32 = x_66.unity_OrthoParams.w;
  u_xlatb23.x = (x_1819 == 0.0f);
  let x_1822 : vec3<f32> = vs_INTERP0;
  let x_1826 : vec3<f32> = x_66.x_WorldSpaceCameraPos;
  u_xlat27 = (-(x_1822) + x_1826);
  let x_1828 : vec3<f32> = u_xlat27;
  let x_1829 : vec3<f32> = u_xlat27;
  u_xlat67 = dot(x_1828, x_1829);
  let x_1831 : f32 = u_xlat67;
  u_xlat67 = inverseSqrt(x_1831);
  let x_1833 : f32 = u_xlat67;
  let x_1835 : vec3<f32> = u_xlat27;
  u_xlat27 = (vec3<f32>(x_1833, x_1833, x_1833) * x_1835);
  let x_1839 : f32 = x_66.unity_MatrixV[0i].z;
  u_xlat6.x = x_1839;
  let x_1842 : f32 = x_66.unity_MatrixV[1i].z;
  u_xlat6.y = x_1842;
  let x_1845 : f32 = x_66.unity_MatrixV[2i].z;
  u_xlat6.z = x_1845;
  let x_1848 : bool = u_xlatb23.x;
  if (x_1848) {
    let x_1852 : vec3<f32> = u_xlat27;
    x_1849 = x_1852;
  } else {
    let x_1854 : vec4<f32> = u_xlat6;
    x_1849 = vec3<f32>(x_1854.x, x_1854.y, x_1854.z);
  }
  let x_1856 : vec3<f32> = x_1849;
  u_xlat27 = x_1856;
  let x_1858 : f32 = vs_INTERP0.y;
  let x_1860 : f32 = x_66.unity_MatrixV[1i].z;
  u_xlat23.x = (x_1858 * x_1860);
  let x_1864 : f32 = x_66.unity_MatrixV[0i].z;
  let x_1866 : f32 = vs_INTERP0.x;
  let x_1869 : f32 = u_xlat23.x;
  u_xlat23.x = ((x_1864 * x_1866) + x_1869);
  let x_1873 : f32 = x_66.unity_MatrixV[2i].z;
  let x_1875 : f32 = vs_INTERP0.z;
  let x_1878 : f32 = u_xlat23.x;
  u_xlat23.x = ((x_1873 * x_1875) + x_1878);
  let x_1882 : f32 = u_xlat23.x;
  let x_1884 : f32 = x_66.unity_MatrixV[3i].z;
  u_xlat23.x = (x_1882 + x_1884);
  let x_1888 : f32 = u_xlat23.x;
  let x_1892 : f32 = x_66.x_ProjectionParams.y;
  u_xlat23.x = (-(x_1888) + -(x_1892));
  let x_1897 : f32 = u_xlat23.x;
  u_xlat23.x = max(x_1897, 0.0f);
  let x_1901 : f32 = u_xlat23.x;
  let x_1904 : f32 = x_66.unity_FogParams.x;
  u_xlat23.x = (x_1901 * x_1904);
  let x_1914 : vec2<f32> = vs_INTERP5;
  let x_1916 : f32 = x_66.x_GlobalMipBias.x;
  let x_1917 : vec4<f32> = textureSampleBias(unity_LightmapInd, samplerunity_Lightmap, x_1914, x_1916);
  u_xlat6 = x_1917;
  let x_1922 : vec2<f32> = vs_INTERP5;
  let x_1924 : f32 = x_66.x_GlobalMipBias.x;
  let x_1925 : vec4<f32> = textureSampleBias(unity_Lightmap, samplerunity_Lightmap, x_1922, x_1924);
  let x_1926 : vec3<f32> = vec3<f32>(x_1925.x, x_1925.y, x_1925.z);
  let x_1927 : vec4<f32> = u_xlat7;
  u_xlat7 = vec4<f32>(x_1926.x, x_1926.y, x_1926.z, x_1927.w);
  let x_1929 : vec4<f32> = u_xlat6;
  let x_1932 : vec3<f32> = (vec3<f32>(x_1929.x, x_1929.y, x_1929.z) + vec3<f32>(-0.5f, -0.5f, -0.5f));
  let x_1933 : vec4<f32> = u_xlat6;
  u_xlat6 = vec4<f32>(x_1932.x, x_1932.y, x_1932.z, x_1933.w);
  let x_1935 : vec3<f32> = u_xlat25;
  let x_1936 : vec4<f32> = u_xlat6;
  u_xlat67 = dot(x_1935, vec3<f32>(x_1936.x, x_1936.y, x_1936.z));
  let x_1939 : f32 = u_xlat67;
  u_xlat67 = (x_1939 + 0.5f);
  let x_1941 : f32 = u_xlat67;
  let x_1943 : vec4<f32> = u_xlat7;
  let x_1945 : vec3<f32> = (vec3<f32>(x_1941, x_1941, x_1941) * vec3<f32>(x_1943.x, x_1943.y, x_1943.z));
  let x_1946 : vec4<f32> = u_xlat6;
  u_xlat6 = vec4<f32>(x_1945.x, x_1945.y, x_1945.z, x_1946.w);
  let x_1949 : f32 = u_xlat6.w;
  u_xlat67 = max(x_1949, 0.0001f);
  let x_1951 : vec4<f32> = u_xlat6;
  let x_1953 : f32 = u_xlat67;
  let x_1955 : vec3<f32> = (vec3<f32>(x_1951.x, x_1951.y, x_1951.z) / vec3<f32>(x_1953, x_1953, x_1953));
  let x_1956 : vec4<f32> = u_xlat6;
  u_xlat6 = vec4<f32>(x_1955.x, x_1955.y, x_1955.z, x_1956.w);
  let x_1959 : vec4<f32> = x_66.x_ScaledScreenParams;
  let x_1960 : vec2<f32> = vec2<f32>(x_1959.x, x_1959.y);
  let x_1964 : vec2<f32> = (vec2<f32>(1.0f, 1.0f) / vec2<f32>(x_1960.x, x_1960.y));
  let x_1965 : vec4<f32> = u_xlat7;
  u_xlat7 = vec4<f32>(x_1964.x, x_1964.y, x_1965.z, x_1965.w);
  let x_1967 : vec4<f32> = u_xlat7;
  let x_1969 : vec4<f32> = hlslcc_FragCoord;
  let x_1971 : vec2<f32> = (vec2<f32>(x_1967.x, x_1967.y) * vec2<f32>(x_1969.x, x_1969.y));
  let x_1972 : vec4<f32> = u_xlat7;
  u_xlat7 = vec4<f32>(x_1971.x, x_1971.y, x_1972.z, x_1972.w);
  let x_1975 : f32 = u_xlat7.y;
  let x_1978 : f32 = x_66.x_ScaleBiasRt.x;
  let x_1981 : f32 = x_66.x_ScaleBiasRt.y;
  u_xlat67 = ((x_1975 * x_1978) + x_1981);
  let x_1983 : f32 = u_xlat67;
  u_xlat7.z = (-(x_1983) + 1.0f);
  let x_1988 : f32 = u_xlat3.x;
  u_xlat3.x = x_1988;
  let x_1991 : f32 = u_xlat3.x;
  u_xlat3.x = clamp(x_1991, 0.0f, 1.0f);
  let x_1995 : f32 = u_xlat1.x;
  u_xlat1.x = min(x_1995, 1.0f);
  let x_1998 : vec3<f32> = u_xlat2;
  u_xlat2 = (x_1998 * vec3<f32>(0.959999979f, 0.959999979f, 0.959999979f));
  let x_2003 : f32 = u_xlat3.x;
  u_xlat67 = (-(x_2003) + 1.0f);
  let x_2006 : f32 = u_xlat67;
  let x_2007 : f32 = u_xlat67;
  u_xlat68 = (x_2006 * x_2007);
  let x_2009 : f32 = u_xlat68;
  u_xlat68 = max(x_2009, 0.0078125f);
  let x_2013 : f32 = u_xlat68;
  let x_2014 : f32 = u_xlat68;
  u_xlat72 = (x_2013 * x_2014);
  let x_2017 : f32 = u_xlat3.x;
  u_xlat3.x = (x_2017 + 0.040000021f);
  let x_2022 : f32 = u_xlat3.x;
  u_xlat3.x = min(x_2022, 1.0f);
  let x_2025 : f32 = u_xlat68;
  u_xlat29.x = ((x_2025 * 4.0f) + 2.0f);
  let x_2034 : vec4<f32> = u_xlat7;
  let x_2037 : f32 = x_66.x_GlobalMipBias.x;
  let x_2038 : vec4<f32> = textureSampleBias(x_ScreenSpaceOcclusionTexture, sampler_ScreenSpaceOcclusionTexture, vec2<f32>(x_2034.x, x_2034.z), x_2037);
  u_xlat7.x = x_2038.x;
  let x_2042 : f32 = u_xlat7.x;
  u_xlat51.x = (x_2042 + -1.0f);
  let x_2046 : f32 = x_66.x_AmbientOcclusionParam.w;
  let x_2048 : f32 = u_xlat51.x;
  u_xlat51.x = ((x_2046 * x_2048) + 1.0f);
  let x_2053 : f32 = u_xlat7.x;
  let x_2055 : f32 = vs_INTERP4.w;
  u_xlat7.x = min(x_2053, x_2055);
  let x_2058 : bool = u_xlatb66;
  if (x_2058) {
    let x_2062 : f32 = x_138.x_MainLightShadowParams.y;
    u_xlatb66 = (x_2062 == 1.0f);
    let x_2064 : bool = u_xlatb66;
    if (x_2064) {
      let x_2067 : vec4<f32> = u_xlat4;
      let x_2070 : vec4<f32> = x_138.x_MainLightShadowOffset0;
      u_xlat8 = (vec4<f32>(x_2067.x, x_2067.y, x_2067.x, x_2067.y) + x_2070);
      let x_2073 : vec4<f32> = u_xlat8;
      let x_2074 : vec2<f32> = vec2<f32>(x_2073.x, x_2073.y);
      let x_2076 : f32 = u_xlat4.z;
      txVec30 = vec3<f32>(x_2074.x, x_2074.y, x_2076);
      let x_2083 : vec3<f32> = txVec30;
      let x_2085 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2083.xy, x_2083.z);
      u_xlat9.x = x_2085;
      let x_2088 : vec4<f32> = u_xlat8;
      let x_2089 : vec2<f32> = vec2<f32>(x_2088.z, x_2088.w);
      let x_2091 : f32 = u_xlat4.z;
      txVec31 = vec3<f32>(x_2089.x, x_2089.y, x_2091);
      let x_2098 : vec3<f32> = txVec31;
      let x_2100 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2098.xy, x_2098.z);
      u_xlat9.y = x_2100;
      let x_2102 : vec4<f32> = u_xlat4;
      let x_2105 : vec4<f32> = x_138.x_MainLightShadowOffset1;
      u_xlat8 = (vec4<f32>(x_2102.x, x_2102.y, x_2102.x, x_2102.y) + x_2105);
      let x_2108 : vec4<f32> = u_xlat8;
      let x_2109 : vec2<f32> = vec2<f32>(x_2108.x, x_2108.y);
      let x_2111 : f32 = u_xlat4.z;
      txVec32 = vec3<f32>(x_2109.x, x_2109.y, x_2111);
      let x_2118 : vec3<f32> = txVec32;
      let x_2120 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2118.xy, x_2118.z);
      u_xlat9.z = x_2120;
      let x_2123 : vec4<f32> = u_xlat8;
      let x_2124 : vec2<f32> = vec2<f32>(x_2123.z, x_2123.w);
      let x_2126 : f32 = u_xlat4.z;
      txVec33 = vec3<f32>(x_2124.x, x_2124.y, x_2126);
      let x_2133 : vec3<f32> = txVec33;
      let x_2135 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2133.xy, x_2133.z);
      u_xlat9.w = x_2135;
      let x_2137 : vec4<f32> = u_xlat9;
      u_xlat66 = dot(x_2137, vec4<f32>(0.25f, 0.25f, 0.25f, 0.25f));
    } else {
      let x_2142 : f32 = x_138.x_MainLightShadowParams.y;
      u_xlatb73 = (x_2142 == 2.0f);
      let x_2144 : bool = u_xlatb73;
      if (x_2144) {
        let x_2147 : vec4<f32> = u_xlat4;
        let x_2150 : vec4<f32> = x_138.x_MainLightShadowmapSize;
        let x_2153 : vec2<f32> = ((vec2<f32>(x_2147.x, x_2147.y) * vec2<f32>(x_2150.z, x_2150.w)) + vec2<f32>(0.5f, 0.5f));
        let x_2154 : vec4<f32> = u_xlat8;
        u_xlat8 = vec4<f32>(x_2153.x, x_2153.y, x_2154.z, x_2154.w);
        let x_2156 : vec4<f32> = u_xlat8;
        let x_2158 : vec2<f32> = floor(vec2<f32>(x_2156.x, x_2156.y));
        let x_2159 : vec4<f32> = u_xlat8;
        u_xlat8 = vec4<f32>(x_2158.x, x_2158.y, x_2159.z, x_2159.w);
        let x_2161 : vec4<f32> = u_xlat4;
        let x_2164 : vec4<f32> = x_138.x_MainLightShadowmapSize;
        let x_2167 : vec4<f32> = u_xlat8;
        u_xlat52 = ((vec2<f32>(x_2161.x, x_2161.y) * vec2<f32>(x_2164.z, x_2164.w)) + -(vec2<f32>(x_2167.x, x_2167.y)));
        let x_2171 : vec2<f32> = u_xlat52;
        u_xlat9 = (vec4<f32>(x_2171.x, x_2171.x, x_2171.y, x_2171.y) + vec4<f32>(0.5f, 1.0f, 0.5f, 1.0f));
        let x_2174 : vec4<f32> = u_xlat9;
        let x_2176 : vec4<f32> = u_xlat9;
        u_xlat10 = (vec4<f32>(x_2174.x, x_2174.x, x_2174.z, x_2174.z) * vec4<f32>(x_2176.x, x_2176.x, x_2176.z, x_2176.z));
        let x_2179 : vec4<f32> = u_xlat10;
        let x_2181 : vec2<f32> = (vec2<f32>(x_2179.y, x_2179.w) * vec2<f32>(0.079999998f, 0.079999998f));
        let x_2182 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_2181.x, x_2182.y, x_2181.y, x_2182.w);
        let x_2184 : vec4<f32> = u_xlat10;
        let x_2187 : vec2<f32> = u_xlat52;
        let x_2189 : vec2<f32> = ((vec2<f32>(x_2184.x, x_2184.z) * vec2<f32>(0.5f, 0.5f)) + -(x_2187));
        let x_2190 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_2189.x, x_2189.y, x_2190.z, x_2190.w);
        let x_2193 : vec2<f32> = u_xlat52;
        u_xlat54 = (-(x_2193) + vec2<f32>(1.0f, 1.0f));
        let x_2196 : vec2<f32> = u_xlat52;
        let x_2197 : vec2<f32> = min(x_2196, vec2<f32>(0.0f, 0.0f));
        let x_2198 : vec4<f32> = u_xlat11;
        u_xlat11 = vec4<f32>(x_2197.x, x_2197.y, x_2198.z, x_2198.w);
        let x_2200 : vec4<f32> = u_xlat11;
        let x_2203 : vec4<f32> = u_xlat11;
        let x_2206 : vec2<f32> = u_xlat54;
        let x_2207 : vec2<f32> = ((-(vec2<f32>(x_2200.x, x_2200.y)) * vec2<f32>(x_2203.x, x_2203.y)) + x_2206);
        let x_2208 : vec4<f32> = u_xlat11;
        u_xlat11 = vec4<f32>(x_2207.x, x_2207.y, x_2208.z, x_2208.w);
        let x_2210 : vec2<f32> = u_xlat52;
        u_xlat52 = max(x_2210, vec2<f32>(0.0f, 0.0f));
        let x_2212 : vec2<f32> = u_xlat52;
        let x_2214 : vec2<f32> = u_xlat52;
        let x_2216 : vec4<f32> = u_xlat9;
        u_xlat52 = ((-(x_2212) * x_2214) + vec2<f32>(x_2216.y, x_2216.w));
        let x_2219 : vec4<f32> = u_xlat11;
        let x_2221 : vec2<f32> = (vec2<f32>(x_2219.x, x_2219.y) + vec2<f32>(1.0f, 1.0f));
        let x_2222 : vec4<f32> = u_xlat11;
        u_xlat11 = vec4<f32>(x_2221.x, x_2221.y, x_2222.z, x_2222.w);
        let x_2224 : vec2<f32> = u_xlat52;
        u_xlat52 = (x_2224 + vec2<f32>(1.0f, 1.0f));
        let x_2226 : vec4<f32> = u_xlat10;
        let x_2228 : vec2<f32> = (vec2<f32>(x_2226.x, x_2226.y) * vec2<f32>(0.159999996f, 0.159999996f));
        let x_2229 : vec4<f32> = u_xlat12;
        u_xlat12 = vec4<f32>(x_2228.x, x_2228.y, x_2229.z, x_2229.w);
        let x_2231 : vec2<f32> = u_xlat54;
        let x_2232 : vec2<f32> = (x_2231 * vec2<f32>(0.159999996f, 0.159999996f));
        let x_2233 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_2232.x, x_2232.y, x_2233.z, x_2233.w);
        let x_2235 : vec4<f32> = u_xlat11;
        let x_2237 : vec2<f32> = (vec2<f32>(x_2235.x, x_2235.y) * vec2<f32>(0.159999996f, 0.159999996f));
        let x_2238 : vec4<f32> = u_xlat11;
        u_xlat11 = vec4<f32>(x_2237.x, x_2237.y, x_2238.z, x_2238.w);
        let x_2240 : vec2<f32> = u_xlat52;
        let x_2241 : vec2<f32> = (x_2240 * vec2<f32>(0.159999996f, 0.159999996f));
        let x_2242 : vec4<f32> = u_xlat13;
        u_xlat13 = vec4<f32>(x_2241.x, x_2241.y, x_2242.z, x_2242.w);
        let x_2244 : vec4<f32> = u_xlat9;
        u_xlat52 = (vec2<f32>(x_2244.y, x_2244.w) * vec2<f32>(0.159999996f, 0.159999996f));
        let x_2248 : f32 = u_xlat11.x;
        u_xlat12.z = x_2248;
        let x_2251 : f32 = u_xlat52.x;
        u_xlat12.w = x_2251;
        let x_2254 : f32 = u_xlat13.x;
        u_xlat10.z = x_2254;
        let x_2257 : f32 = u_xlat9.x;
        u_xlat10.w = x_2257;
        let x_2259 : vec4<f32> = u_xlat10;
        let x_2261 : vec4<f32> = u_xlat12;
        u_xlat14 = (vec4<f32>(x_2259.z, x_2259.w, x_2259.x, x_2259.z) + vec4<f32>(x_2261.z, x_2261.w, x_2261.x, x_2261.z));
        let x_2265 : f32 = u_xlat12.y;
        u_xlat11.z = x_2265;
        let x_2268 : f32 = u_xlat52.y;
        u_xlat11.w = x_2268;
        let x_2271 : f32 = u_xlat10.y;
        u_xlat13.z = x_2271;
        let x_2274 : f32 = u_xlat9.z;
        u_xlat13.w = x_2274;
        let x_2276 : vec4<f32> = u_xlat11;
        let x_2278 : vec4<f32> = u_xlat13;
        let x_2280 : vec3<f32> = (vec3<f32>(x_2276.z, x_2276.y, x_2276.w) + vec3<f32>(x_2278.z, x_2278.y, x_2278.w));
        let x_2281 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_2280.x, x_2280.y, x_2280.z, x_2281.w);
        let x_2283 : vec4<f32> = u_xlat10;
        let x_2285 : vec4<f32> = u_xlat14;
        let x_2287 : vec3<f32> = (vec3<f32>(x_2283.x, x_2283.z, x_2283.w) / vec3<f32>(x_2285.z, x_2285.w, x_2285.y));
        let x_2288 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_2287.x, x_2287.y, x_2287.z, x_2288.w);
        let x_2290 : vec4<f32> = u_xlat10;
        let x_2292 : vec3<f32> = (vec3<f32>(x_2290.x, x_2290.y, x_2290.z) + vec3<f32>(-2.5f, -0.5f, 1.5f));
        let x_2293 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_2292.x, x_2292.y, x_2292.z, x_2293.w);
        let x_2295 : vec4<f32> = u_xlat13;
        let x_2297 : vec4<f32> = u_xlat9;
        let x_2299 : vec3<f32> = (vec3<f32>(x_2295.z, x_2295.y, x_2295.w) / vec3<f32>(x_2297.x, x_2297.y, x_2297.z));
        let x_2300 : vec4<f32> = u_xlat11;
        u_xlat11 = vec4<f32>(x_2299.x, x_2299.y, x_2299.z, x_2300.w);
        let x_2302 : vec4<f32> = u_xlat11;
        let x_2304 : vec3<f32> = (vec3<f32>(x_2302.x, x_2302.y, x_2302.z) + vec3<f32>(-2.5f, -0.5f, 1.5f));
        let x_2305 : vec4<f32> = u_xlat11;
        u_xlat11 = vec4<f32>(x_2304.x, x_2304.y, x_2304.z, x_2305.w);
        let x_2307 : vec4<f32> = u_xlat10;
        let x_2310 : vec4<f32> = x_138.x_MainLightShadowmapSize;
        let x_2312 : vec3<f32> = (vec3<f32>(x_2307.y, x_2307.x, x_2307.z) * vec3<f32>(x_2310.x, x_2310.x, x_2310.x));
        let x_2313 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_2312.x, x_2312.y, x_2312.z, x_2313.w);
        let x_2315 : vec4<f32> = u_xlat11;
        let x_2318 : vec4<f32> = x_138.x_MainLightShadowmapSize;
        let x_2320 : vec3<f32> = (vec3<f32>(x_2315.x, x_2315.y, x_2315.z) * vec3<f32>(x_2318.y, x_2318.y, x_2318.y));
        let x_2321 : vec4<f32> = u_xlat11;
        u_xlat11 = vec4<f32>(x_2320.x, x_2320.y, x_2320.z, x_2321.w);
        let x_2324 : f32 = u_xlat11.x;
        u_xlat10.w = x_2324;
        let x_2326 : vec4<f32> = u_xlat8;
        let x_2329 : vec4<f32> = x_138.x_MainLightShadowmapSize;
        let x_2332 : vec4<f32> = u_xlat10;
        u_xlat12 = ((vec4<f32>(x_2326.x, x_2326.y, x_2326.x, x_2326.y) * vec4<f32>(x_2329.x, x_2329.y, x_2329.x, x_2329.y)) + vec4<f32>(x_2332.y, x_2332.w, x_2332.x, x_2332.w));
        let x_2335 : vec4<f32> = u_xlat8;
        let x_2338 : vec4<f32> = x_138.x_MainLightShadowmapSize;
        let x_2341 : vec4<f32> = u_xlat10;
        u_xlat52 = ((vec2<f32>(x_2335.x, x_2335.y) * vec2<f32>(x_2338.x, x_2338.y)) + vec2<f32>(x_2341.z, x_2341.w));
        let x_2345 : f32 = u_xlat10.y;
        u_xlat11.w = x_2345;
        let x_2347 : vec4<f32> = u_xlat11;
        let x_2348 : vec2<f32> = vec2<f32>(x_2347.y, x_2347.z);
        let x_2349 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_2349.x, x_2348.x, x_2349.z, x_2348.y);
        let x_2351 : vec4<f32> = u_xlat8;
        let x_2354 : vec4<f32> = x_138.x_MainLightShadowmapSize;
        let x_2357 : vec4<f32> = u_xlat10;
        u_xlat13 = ((vec4<f32>(x_2351.x, x_2351.y, x_2351.x, x_2351.y) * vec4<f32>(x_2354.x, x_2354.y, x_2354.x, x_2354.y)) + vec4<f32>(x_2357.x, x_2357.y, x_2357.z, x_2357.y));
        let x_2360 : vec4<f32> = u_xlat8;
        let x_2363 : vec4<f32> = x_138.x_MainLightShadowmapSize;
        let x_2366 : vec4<f32> = u_xlat11;
        u_xlat11 = ((vec4<f32>(x_2360.x, x_2360.y, x_2360.x, x_2360.y) * vec4<f32>(x_2363.x, x_2363.y, x_2363.x, x_2363.y)) + vec4<f32>(x_2366.w, x_2366.y, x_2366.w, x_2366.z));
        let x_2369 : vec4<f32> = u_xlat8;
        let x_2372 : vec4<f32> = x_138.x_MainLightShadowmapSize;
        let x_2375 : vec4<f32> = u_xlat10;
        u_xlat10 = ((vec4<f32>(x_2369.x, x_2369.y, x_2369.x, x_2369.y) * vec4<f32>(x_2372.x, x_2372.y, x_2372.x, x_2372.y)) + vec4<f32>(x_2375.x, x_2375.w, x_2375.z, x_2375.w));
        let x_2378 : vec4<f32> = u_xlat9;
        let x_2380 : vec4<f32> = u_xlat14;
        u_xlat15 = (vec4<f32>(x_2378.x, x_2378.x, x_2378.x, x_2378.y) * vec4<f32>(x_2380.z, x_2380.w, x_2380.y, x_2380.z));
        let x_2383 : vec4<f32> = u_xlat9;
        let x_2385 : vec4<f32> = u_xlat14;
        u_xlat16 = (vec4<f32>(x_2383.y, x_2383.y, x_2383.z, x_2383.z) * x_2385);
        let x_2389 : f32 = u_xlat9.z;
        let x_2391 : f32 = u_xlat14.y;
        u_xlat73 = (x_2389 * x_2391);
        let x_2394 : vec4<f32> = u_xlat12;
        let x_2395 : vec2<f32> = vec2<f32>(x_2394.x, x_2394.y);
        let x_2397 : f32 = u_xlat4.z;
        txVec34 = vec3<f32>(x_2395.x, x_2395.y, x_2397);
        let x_2404 : vec3<f32> = txVec34;
        let x_2406 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2404.xy, x_2404.z);
        u_xlat8.x = x_2406;
        let x_2409 : vec4<f32> = u_xlat12;
        let x_2410 : vec2<f32> = vec2<f32>(x_2409.z, x_2409.w);
        let x_2412 : f32 = u_xlat4.z;
        txVec35 = vec3<f32>(x_2410.x, x_2410.y, x_2412);
        let x_2420 : vec3<f32> = txVec35;
        let x_2422 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2420.xy, x_2420.z);
        u_xlat30 = x_2422;
        let x_2423 : f32 = u_xlat30;
        let x_2425 : f32 = u_xlat15.y;
        u_xlat30 = (x_2423 * x_2425);
        let x_2428 : f32 = u_xlat15.x;
        let x_2430 : f32 = u_xlat8.x;
        let x_2432 : f32 = u_xlat30;
        u_xlat8.x = ((x_2428 * x_2430) + x_2432);
        let x_2436 : vec2<f32> = u_xlat52;
        let x_2438 : f32 = u_xlat4.z;
        txVec36 = vec3<f32>(x_2436.x, x_2436.y, x_2438);
        let x_2445 : vec3<f32> = txVec36;
        let x_2447 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2445.xy, x_2445.z);
        u_xlat30 = x_2447;
        let x_2449 : f32 = u_xlat15.z;
        let x_2450 : f32 = u_xlat30;
        let x_2453 : f32 = u_xlat8.x;
        u_xlat8.x = ((x_2449 * x_2450) + x_2453);
        let x_2457 : vec4<f32> = u_xlat11;
        let x_2458 : vec2<f32> = vec2<f32>(x_2457.x, x_2457.y);
        let x_2460 : f32 = u_xlat4.z;
        txVec37 = vec3<f32>(x_2458.x, x_2458.y, x_2460);
        let x_2467 : vec3<f32> = txVec37;
        let x_2469 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2467.xy, x_2467.z);
        u_xlat30 = x_2469;
        let x_2471 : f32 = u_xlat15.w;
        let x_2472 : f32 = u_xlat30;
        let x_2475 : f32 = u_xlat8.x;
        u_xlat8.x = ((x_2471 * x_2472) + x_2475);
        let x_2479 : vec4<f32> = u_xlat13;
        let x_2480 : vec2<f32> = vec2<f32>(x_2479.x, x_2479.y);
        let x_2482 : f32 = u_xlat4.z;
        txVec38 = vec3<f32>(x_2480.x, x_2480.y, x_2482);
        let x_2489 : vec3<f32> = txVec38;
        let x_2491 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2489.xy, x_2489.z);
        u_xlat30 = x_2491;
        let x_2493 : f32 = u_xlat16.x;
        let x_2494 : f32 = u_xlat30;
        let x_2497 : f32 = u_xlat8.x;
        u_xlat8.x = ((x_2493 * x_2494) + x_2497);
        let x_2501 : vec4<f32> = u_xlat13;
        let x_2502 : vec2<f32> = vec2<f32>(x_2501.z, x_2501.w);
        let x_2504 : f32 = u_xlat4.z;
        txVec39 = vec3<f32>(x_2502.x, x_2502.y, x_2504);
        let x_2511 : vec3<f32> = txVec39;
        let x_2513 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2511.xy, x_2511.z);
        u_xlat30 = x_2513;
        let x_2515 : f32 = u_xlat16.y;
        let x_2516 : f32 = u_xlat30;
        let x_2519 : f32 = u_xlat8.x;
        u_xlat8.x = ((x_2515 * x_2516) + x_2519);
        let x_2523 : vec4<f32> = u_xlat11;
        let x_2524 : vec2<f32> = vec2<f32>(x_2523.z, x_2523.w);
        let x_2526 : f32 = u_xlat4.z;
        txVec40 = vec3<f32>(x_2524.x, x_2524.y, x_2526);
        let x_2533 : vec3<f32> = txVec40;
        let x_2535 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2533.xy, x_2533.z);
        u_xlat30 = x_2535;
        let x_2537 : f32 = u_xlat16.z;
        let x_2538 : f32 = u_xlat30;
        let x_2541 : f32 = u_xlat8.x;
        u_xlat8.x = ((x_2537 * x_2538) + x_2541);
        let x_2545 : vec4<f32> = u_xlat10;
        let x_2546 : vec2<f32> = vec2<f32>(x_2545.x, x_2545.y);
        let x_2548 : f32 = u_xlat4.z;
        txVec41 = vec3<f32>(x_2546.x, x_2546.y, x_2548);
        let x_2555 : vec3<f32> = txVec41;
        let x_2557 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2555.xy, x_2555.z);
        u_xlat30 = x_2557;
        let x_2559 : f32 = u_xlat16.w;
        let x_2560 : f32 = u_xlat30;
        let x_2563 : f32 = u_xlat8.x;
        u_xlat8.x = ((x_2559 * x_2560) + x_2563);
        let x_2567 : vec4<f32> = u_xlat10;
        let x_2568 : vec2<f32> = vec2<f32>(x_2567.z, x_2567.w);
        let x_2570 : f32 = u_xlat4.z;
        txVec42 = vec3<f32>(x_2568.x, x_2568.y, x_2570);
        let x_2577 : vec3<f32> = txVec42;
        let x_2579 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2577.xy, x_2577.z);
        u_xlat30 = x_2579;
        let x_2580 : f32 = u_xlat73;
        let x_2581 : f32 = u_xlat30;
        let x_2584 : f32 = u_xlat8.x;
        u_xlat66 = ((x_2580 * x_2581) + x_2584);
      } else {
        let x_2587 : vec4<f32> = u_xlat4;
        let x_2590 : vec4<f32> = x_138.x_MainLightShadowmapSize;
        let x_2593 : vec2<f32> = ((vec2<f32>(x_2587.x, x_2587.y) * vec2<f32>(x_2590.z, x_2590.w)) + vec2<f32>(0.5f, 0.5f));
        let x_2594 : vec4<f32> = u_xlat8;
        u_xlat8 = vec4<f32>(x_2593.x, x_2593.y, x_2594.z, x_2594.w);
        let x_2596 : vec4<f32> = u_xlat8;
        let x_2598 : vec2<f32> = floor(vec2<f32>(x_2596.x, x_2596.y));
        let x_2599 : vec4<f32> = u_xlat8;
        u_xlat8 = vec4<f32>(x_2598.x, x_2598.y, x_2599.z, x_2599.w);
        let x_2601 : vec4<f32> = u_xlat4;
        let x_2604 : vec4<f32> = x_138.x_MainLightShadowmapSize;
        let x_2607 : vec4<f32> = u_xlat8;
        u_xlat52 = ((vec2<f32>(x_2601.x, x_2601.y) * vec2<f32>(x_2604.z, x_2604.w)) + -(vec2<f32>(x_2607.x, x_2607.y)));
        let x_2611 : vec2<f32> = u_xlat52;
        u_xlat9 = (vec4<f32>(x_2611.x, x_2611.x, x_2611.y, x_2611.y) + vec4<f32>(0.5f, 1.0f, 0.5f, 1.0f));
        let x_2614 : vec4<f32> = u_xlat9;
        let x_2616 : vec4<f32> = u_xlat9;
        u_xlat10 = (vec4<f32>(x_2614.x, x_2614.x, x_2614.z, x_2614.z) * vec4<f32>(x_2616.x, x_2616.x, x_2616.z, x_2616.z));
        let x_2619 : vec4<f32> = u_xlat10;
        let x_2621 : vec2<f32> = (vec2<f32>(x_2619.y, x_2619.w) * vec2<f32>(0.040816002f, 0.040816002f));
        let x_2622 : vec4<f32> = u_xlat11;
        u_xlat11 = vec4<f32>(x_2622.x, x_2621.x, x_2622.z, x_2621.y);
        let x_2624 : vec4<f32> = u_xlat10;
        let x_2627 : vec2<f32> = u_xlat52;
        let x_2629 : vec2<f32> = ((vec2<f32>(x_2624.x, x_2624.z) * vec2<f32>(0.5f, 0.5f)) + -(x_2627));
        let x_2630 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_2629.x, x_2630.y, x_2629.y, x_2630.w);
        let x_2632 : vec2<f32> = u_xlat52;
        let x_2634 : vec2<f32> = (-(x_2632) + vec2<f32>(1.0f, 1.0f));
        let x_2635 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_2634.x, x_2634.y, x_2635.z, x_2635.w);
        let x_2637 : vec2<f32> = u_xlat52;
        u_xlat54 = min(x_2637, vec2<f32>(0.0f, 0.0f));
        let x_2639 : vec2<f32> = u_xlat54;
        let x_2641 : vec2<f32> = u_xlat54;
        let x_2643 : vec4<f32> = u_xlat10;
        let x_2645 : vec2<f32> = ((-(x_2639) * x_2641) + vec2<f32>(x_2643.x, x_2643.y));
        let x_2646 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_2645.x, x_2645.y, x_2646.z, x_2646.w);
        let x_2648 : vec2<f32> = u_xlat52;
        u_xlat54 = max(x_2648, vec2<f32>(0.0f, 0.0f));
        let x_2651 : vec2<f32> = u_xlat54;
        let x_2653 : vec2<f32> = u_xlat54;
        let x_2655 : vec4<f32> = u_xlat9;
        let x_2657 : vec2<f32> = ((-(x_2651) * x_2653) + vec2<f32>(x_2655.y, x_2655.w));
        let x_2658 : vec3<f32> = u_xlat31;
        u_xlat31 = vec3<f32>(x_2657.x, x_2658.y, x_2657.y);
        let x_2660 : vec4<f32> = u_xlat10;
        let x_2662 : vec2<f32> = (vec2<f32>(x_2660.x, x_2660.y) + vec2<f32>(2.0f, 2.0f));
        let x_2663 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_2662.x, x_2662.y, x_2663.z, x_2663.w);
        let x_2665 : vec3<f32> = u_xlat31;
        let x_2667 : vec2<f32> = (vec2<f32>(x_2665.x, x_2665.z) + vec2<f32>(2.0f, 2.0f));
        let x_2668 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_2668.x, x_2667.x, x_2668.z, x_2667.y);
        let x_2671 : f32 = u_xlat9.y;
        u_xlat12.z = (x_2671 * 0.081632003f);
        let x_2674 : vec4<f32> = u_xlat9;
        let x_2676 : vec3<f32> = (vec3<f32>(x_2674.z, x_2674.x, x_2674.w) * vec3<f32>(0.081632003f, 0.081632003f, 0.081632003f));
        let x_2677 : vec4<f32> = u_xlat13;
        u_xlat13 = vec4<f32>(x_2676.x, x_2676.y, x_2676.z, x_2677.w);
        let x_2679 : vec4<f32> = u_xlat10;
        let x_2681 : vec2<f32> = (vec2<f32>(x_2679.x, x_2679.y) * vec2<f32>(0.081632003f, 0.081632003f));
        let x_2682 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_2681.x, x_2681.y, x_2682.z, x_2682.w);
        let x_2685 : f32 = u_xlat13.y;
        u_xlat12.x = x_2685;
        let x_2687 : vec2<f32> = u_xlat52;
        let x_2690 : vec2<f32> = ((vec2<f32>(x_2687.x, x_2687.x) * vec2<f32>(-0.081632003f, 0.081632003f)) + vec2<f32>(0.163264006f, 0.081632003f));
        let x_2691 : vec4<f32> = u_xlat12;
        u_xlat12 = vec4<f32>(x_2691.x, x_2690.x, x_2691.z, x_2690.y);
        let x_2693 : vec2<f32> = u_xlat52;
        let x_2696 : vec2<f32> = ((vec2<f32>(x_2693.x, x_2693.x) * vec2<f32>(-0.081632003f, 0.081632003f)) + vec2<f32>(0.081632003f, 0.163264006f));
        let x_2697 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_2696.x, x_2697.y, x_2696.y, x_2697.w);
        let x_2700 : f32 = u_xlat9.x;
        u_xlat10.y = x_2700;
        let x_2703 : f32 = u_xlat11.y;
        u_xlat10.w = x_2703;
        let x_2705 : vec4<f32> = u_xlat10;
        let x_2706 : vec4<f32> = u_xlat12;
        u_xlat12 = (x_2705 + x_2706);
        let x_2708 : vec2<f32> = u_xlat52;
        let x_2711 : vec2<f32> = ((vec2<f32>(x_2708.y, x_2708.y) * vec2<f32>(-0.081632003f, 0.081632003f)) + vec2<f32>(0.163264006f, 0.081632003f));
        let x_2712 : vec4<f32> = u_xlat13;
        u_xlat13 = vec4<f32>(x_2712.x, x_2711.x, x_2712.z, x_2711.y);
        let x_2714 : vec2<f32> = u_xlat52;
        let x_2717 : vec2<f32> = ((vec2<f32>(x_2714.y, x_2714.y) * vec2<f32>(-0.081632003f, 0.081632003f)) + vec2<f32>(0.081632003f, 0.163264006f));
        let x_2718 : vec4<f32> = u_xlat11;
        u_xlat11 = vec4<f32>(x_2717.x, x_2718.y, x_2717.y, x_2718.w);
        let x_2721 : f32 = u_xlat9.y;
        u_xlat11.y = x_2721;
        let x_2723 : vec4<f32> = u_xlat11;
        let x_2724 : vec4<f32> = u_xlat13;
        u_xlat9 = (x_2723 + x_2724);
        let x_2726 : vec4<f32> = u_xlat10;
        let x_2727 : vec4<f32> = u_xlat12;
        u_xlat10 = (x_2726 / x_2727);
        let x_2729 : vec4<f32> = u_xlat10;
        u_xlat10 = (x_2729 + vec4<f32>(-3.5f, -1.5f, 0.5f, 2.5f));
        let x_2731 : vec4<f32> = u_xlat11;
        let x_2732 : vec4<f32> = u_xlat9;
        u_xlat11 = (x_2731 / x_2732);
        let x_2734 : vec4<f32> = u_xlat11;
        u_xlat11 = (x_2734 + vec4<f32>(-3.5f, -1.5f, 0.5f, 2.5f));
        let x_2736 : vec4<f32> = u_xlat10;
        let x_2739 : vec4<f32> = x_138.x_MainLightShadowmapSize;
        u_xlat10 = (vec4<f32>(x_2736.w, x_2736.x, x_2736.y, x_2736.z) * vec4<f32>(x_2739.x, x_2739.x, x_2739.x, x_2739.x));
        let x_2742 : vec4<f32> = u_xlat11;
        let x_2745 : vec4<f32> = x_138.x_MainLightShadowmapSize;
        u_xlat11 = (vec4<f32>(x_2742.x, x_2742.w, x_2742.y, x_2742.z) * vec4<f32>(x_2745.y, x_2745.y, x_2745.y, x_2745.y));
        let x_2748 : vec4<f32> = u_xlat10;
        let x_2749 : vec3<f32> = vec3<f32>(x_2748.y, x_2748.z, x_2748.w);
        let x_2750 : vec4<f32> = u_xlat13;
        u_xlat13 = vec4<f32>(x_2749.x, x_2750.y, x_2749.y, x_2749.z);
        let x_2753 : f32 = u_xlat11.x;
        u_xlat13.y = x_2753;
        let x_2755 : vec4<f32> = u_xlat8;
        let x_2758 : vec4<f32> = x_138.x_MainLightShadowmapSize;
        let x_2761 : vec4<f32> = u_xlat13;
        u_xlat14 = ((vec4<f32>(x_2755.x, x_2755.y, x_2755.x, x_2755.y) * vec4<f32>(x_2758.x, x_2758.y, x_2758.x, x_2758.y)) + vec4<f32>(x_2761.x, x_2761.y, x_2761.z, x_2761.y));
        let x_2764 : vec4<f32> = u_xlat8;
        let x_2767 : vec4<f32> = x_138.x_MainLightShadowmapSize;
        let x_2770 : vec4<f32> = u_xlat13;
        u_xlat52 = ((vec2<f32>(x_2764.x, x_2764.y) * vec2<f32>(x_2767.x, x_2767.y)) + vec2<f32>(x_2770.w, x_2770.y));
        let x_2774 : f32 = u_xlat13.y;
        u_xlat10.y = x_2774;
        let x_2777 : f32 = u_xlat11.z;
        u_xlat13.y = x_2777;
        let x_2779 : vec4<f32> = u_xlat8;
        let x_2782 : vec4<f32> = x_138.x_MainLightShadowmapSize;
        let x_2785 : vec4<f32> = u_xlat13;
        u_xlat15 = ((vec4<f32>(x_2779.x, x_2779.y, x_2779.x, x_2779.y) * vec4<f32>(x_2782.x, x_2782.y, x_2782.x, x_2782.y)) + vec4<f32>(x_2785.x, x_2785.y, x_2785.z, x_2785.y));
        let x_2788 : vec4<f32> = u_xlat8;
        let x_2791 : vec4<f32> = x_138.x_MainLightShadowmapSize;
        let x_2794 : vec4<f32> = u_xlat13;
        let x_2796 : vec2<f32> = ((vec2<f32>(x_2788.x, x_2788.y) * vec2<f32>(x_2791.x, x_2791.y)) + vec2<f32>(x_2794.w, x_2794.y));
        let x_2797 : vec4<f32> = u_xlat16;
        u_xlat16 = vec4<f32>(x_2796.x, x_2796.y, x_2797.z, x_2797.w);
        let x_2800 : f32 = u_xlat13.y;
        u_xlat10.z = x_2800;
        let x_2802 : vec4<f32> = u_xlat8;
        let x_2805 : vec4<f32> = x_138.x_MainLightShadowmapSize;
        let x_2808 : vec4<f32> = u_xlat10;
        u_xlat17 = ((vec4<f32>(x_2802.x, x_2802.y, x_2802.x, x_2802.y) * vec4<f32>(x_2805.x, x_2805.y, x_2805.x, x_2805.y)) + vec4<f32>(x_2808.x, x_2808.y, x_2808.x, x_2808.z));
        let x_2812 : f32 = u_xlat11.w;
        u_xlat13.y = x_2812;
        let x_2814 : vec4<f32> = u_xlat8;
        let x_2817 : vec4<f32> = x_138.x_MainLightShadowmapSize;
        let x_2820 : vec4<f32> = u_xlat13;
        u_xlat18 = ((vec4<f32>(x_2814.x, x_2814.y, x_2814.x, x_2814.y) * vec4<f32>(x_2817.x, x_2817.y, x_2817.x, x_2817.y)) + vec4<f32>(x_2820.x, x_2820.y, x_2820.z, x_2820.y));
        let x_2824 : vec4<f32> = u_xlat8;
        let x_2827 : vec4<f32> = x_138.x_MainLightShadowmapSize;
        let x_2830 : vec4<f32> = u_xlat13;
        u_xlat32 = ((vec2<f32>(x_2824.x, x_2824.y) * vec2<f32>(x_2827.x, x_2827.y)) + vec2<f32>(x_2830.w, x_2830.y));
        let x_2834 : f32 = u_xlat13.y;
        u_xlat10.w = x_2834;
        let x_2837 : vec4<f32> = u_xlat8;
        let x_2840 : vec4<f32> = x_138.x_MainLightShadowmapSize;
        let x_2843 : vec4<f32> = u_xlat10;
        u_xlat60 = ((vec2<f32>(x_2837.x, x_2837.y) * vec2<f32>(x_2840.x, x_2840.y)) + vec2<f32>(x_2843.x, x_2843.w));
        let x_2846 : vec4<f32> = u_xlat13;
        let x_2847 : vec3<f32> = vec3<f32>(x_2846.x, x_2846.z, x_2846.w);
        let x_2848 : vec4<f32> = u_xlat11;
        u_xlat11 = vec4<f32>(x_2847.x, x_2848.y, x_2847.y, x_2847.z);
        let x_2850 : vec4<f32> = u_xlat8;
        let x_2853 : vec4<f32> = x_138.x_MainLightShadowmapSize;
        let x_2856 : vec4<f32> = u_xlat11;
        u_xlat13 = ((vec4<f32>(x_2850.x, x_2850.y, x_2850.x, x_2850.y) * vec4<f32>(x_2853.x, x_2853.y, x_2853.x, x_2853.y)) + vec4<f32>(x_2856.x, x_2856.y, x_2856.z, x_2856.y));
        let x_2860 : vec4<f32> = u_xlat8;
        let x_2863 : vec4<f32> = x_138.x_MainLightShadowmapSize;
        let x_2866 : vec4<f32> = u_xlat11;
        u_xlat55 = ((vec2<f32>(x_2860.x, x_2860.y) * vec2<f32>(x_2863.x, x_2863.y)) + vec2<f32>(x_2866.w, x_2866.y));
        let x_2870 : f32 = u_xlat10.x;
        u_xlat11.x = x_2870;
        let x_2872 : vec4<f32> = u_xlat8;
        let x_2875 : vec4<f32> = x_138.x_MainLightShadowmapSize;
        let x_2878 : vec4<f32> = u_xlat11;
        let x_2880 : vec2<f32> = ((vec2<f32>(x_2872.x, x_2872.y) * vec2<f32>(x_2875.x, x_2875.y)) + vec2<f32>(x_2878.x, x_2878.y));
        let x_2881 : vec4<f32> = u_xlat8;
        u_xlat8 = vec4<f32>(x_2880.x, x_2880.y, x_2881.z, x_2881.w);
        let x_2884 : vec4<f32> = u_xlat9;
        let x_2886 : vec4<f32> = u_xlat12;
        u_xlat19 = (vec4<f32>(x_2884.x, x_2884.x, x_2884.x, x_2884.x) * x_2886);
        let x_2889 : vec4<f32> = u_xlat9;
        let x_2891 : vec4<f32> = u_xlat12;
        u_xlat20 = (vec4<f32>(x_2889.y, x_2889.y, x_2889.y, x_2889.y) * x_2891);
        let x_2894 : vec4<f32> = u_xlat9;
        let x_2896 : vec4<f32> = u_xlat12;
        u_xlat21 = (vec4<f32>(x_2894.z, x_2894.z, x_2894.z, x_2894.z) * x_2896);
        let x_2898 : vec4<f32> = u_xlat9;
        let x_2900 : vec4<f32> = u_xlat12;
        u_xlat9 = (vec4<f32>(x_2898.w, x_2898.w, x_2898.w, x_2898.w) * x_2900);
        let x_2903 : vec4<f32> = u_xlat14;
        let x_2904 : vec2<f32> = vec2<f32>(x_2903.x, x_2903.y);
        let x_2906 : f32 = u_xlat4.z;
        txVec43 = vec3<f32>(x_2904.x, x_2904.y, x_2906);
        let x_2913 : vec3<f32> = txVec43;
        let x_2915 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2913.xy, x_2913.z);
        u_xlat73 = x_2915;
        let x_2917 : vec4<f32> = u_xlat14;
        let x_2918 : vec2<f32> = vec2<f32>(x_2917.z, x_2917.w);
        let x_2920 : f32 = u_xlat4.z;
        txVec44 = vec3<f32>(x_2918.x, x_2918.y, x_2920);
        let x_2927 : vec3<f32> = txVec44;
        let x_2929 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2927.xy, x_2927.z);
        u_xlat10.x = x_2929;
        let x_2932 : f32 = u_xlat10.x;
        let x_2934 : f32 = u_xlat19.y;
        u_xlat10.x = (x_2932 * x_2934);
        let x_2938 : f32 = u_xlat19.x;
        let x_2939 : f32 = u_xlat73;
        let x_2942 : f32 = u_xlat10.x;
        u_xlat73 = ((x_2938 * x_2939) + x_2942);
        let x_2945 : vec2<f32> = u_xlat52;
        let x_2947 : f32 = u_xlat4.z;
        txVec45 = vec3<f32>(x_2945.x, x_2945.y, x_2947);
        let x_2954 : vec3<f32> = txVec45;
        let x_2956 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2954.xy, x_2954.z);
        u_xlat52.x = x_2956;
        let x_2959 : f32 = u_xlat19.z;
        let x_2961 : f32 = u_xlat52.x;
        let x_2963 : f32 = u_xlat73;
        u_xlat73 = ((x_2959 * x_2961) + x_2963);
        let x_2966 : vec4<f32> = u_xlat17;
        let x_2967 : vec2<f32> = vec2<f32>(x_2966.x, x_2966.y);
        let x_2969 : f32 = u_xlat4.z;
        txVec46 = vec3<f32>(x_2967.x, x_2967.y, x_2969);
        let x_2976 : vec3<f32> = txVec46;
        let x_2978 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2976.xy, x_2976.z);
        u_xlat52.x = x_2978;
        let x_2981 : f32 = u_xlat19.w;
        let x_2983 : f32 = u_xlat52.x;
        let x_2985 : f32 = u_xlat73;
        u_xlat73 = ((x_2981 * x_2983) + x_2985);
        let x_2988 : vec4<f32> = u_xlat15;
        let x_2989 : vec2<f32> = vec2<f32>(x_2988.x, x_2988.y);
        let x_2991 : f32 = u_xlat4.z;
        txVec47 = vec3<f32>(x_2989.x, x_2989.y, x_2991);
        let x_2998 : vec3<f32> = txVec47;
        let x_3000 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2998.xy, x_2998.z);
        u_xlat52.x = x_3000;
        let x_3003 : f32 = u_xlat20.x;
        let x_3005 : f32 = u_xlat52.x;
        let x_3007 : f32 = u_xlat73;
        u_xlat73 = ((x_3003 * x_3005) + x_3007);
        let x_3010 : vec4<f32> = u_xlat15;
        let x_3011 : vec2<f32> = vec2<f32>(x_3010.z, x_3010.w);
        let x_3013 : f32 = u_xlat4.z;
        txVec48 = vec3<f32>(x_3011.x, x_3011.y, x_3013);
        let x_3020 : vec3<f32> = txVec48;
        let x_3022 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_3020.xy, x_3020.z);
        u_xlat52.x = x_3022;
        let x_3025 : f32 = u_xlat20.y;
        let x_3027 : f32 = u_xlat52.x;
        let x_3029 : f32 = u_xlat73;
        u_xlat73 = ((x_3025 * x_3027) + x_3029);
        let x_3032 : vec4<f32> = u_xlat16;
        let x_3033 : vec2<f32> = vec2<f32>(x_3032.x, x_3032.y);
        let x_3035 : f32 = u_xlat4.z;
        txVec49 = vec3<f32>(x_3033.x, x_3033.y, x_3035);
        let x_3042 : vec3<f32> = txVec49;
        let x_3044 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_3042.xy, x_3042.z);
        u_xlat52.x = x_3044;
        let x_3047 : f32 = u_xlat20.z;
        let x_3049 : f32 = u_xlat52.x;
        let x_3051 : f32 = u_xlat73;
        u_xlat73 = ((x_3047 * x_3049) + x_3051);
        let x_3054 : vec4<f32> = u_xlat17;
        let x_3055 : vec2<f32> = vec2<f32>(x_3054.z, x_3054.w);
        let x_3057 : f32 = u_xlat4.z;
        txVec50 = vec3<f32>(x_3055.x, x_3055.y, x_3057);
        let x_3064 : vec3<f32> = txVec50;
        let x_3066 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_3064.xy, x_3064.z);
        u_xlat52.x = x_3066;
        let x_3069 : f32 = u_xlat20.w;
        let x_3071 : f32 = u_xlat52.x;
        let x_3073 : f32 = u_xlat73;
        u_xlat73 = ((x_3069 * x_3071) + x_3073);
        let x_3076 : vec4<f32> = u_xlat18;
        let x_3077 : vec2<f32> = vec2<f32>(x_3076.x, x_3076.y);
        let x_3079 : f32 = u_xlat4.z;
        txVec51 = vec3<f32>(x_3077.x, x_3077.y, x_3079);
        let x_3086 : vec3<f32> = txVec51;
        let x_3088 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_3086.xy, x_3086.z);
        u_xlat52.x = x_3088;
        let x_3091 : f32 = u_xlat21.x;
        let x_3093 : f32 = u_xlat52.x;
        let x_3095 : f32 = u_xlat73;
        u_xlat73 = ((x_3091 * x_3093) + x_3095);
        let x_3098 : vec4<f32> = u_xlat18;
        let x_3099 : vec2<f32> = vec2<f32>(x_3098.z, x_3098.w);
        let x_3101 : f32 = u_xlat4.z;
        txVec52 = vec3<f32>(x_3099.x, x_3099.y, x_3101);
        let x_3108 : vec3<f32> = txVec52;
        let x_3110 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_3108.xy, x_3108.z);
        u_xlat52.x = x_3110;
        let x_3113 : f32 = u_xlat21.y;
        let x_3115 : f32 = u_xlat52.x;
        let x_3117 : f32 = u_xlat73;
        u_xlat73 = ((x_3113 * x_3115) + x_3117);
        let x_3120 : vec2<f32> = u_xlat32;
        let x_3122 : f32 = u_xlat4.z;
        txVec53 = vec3<f32>(x_3120.x, x_3120.y, x_3122);
        let x_3129 : vec3<f32> = txVec53;
        let x_3131 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_3129.xy, x_3129.z);
        u_xlat52.x = x_3131;
        let x_3134 : f32 = u_xlat21.z;
        let x_3136 : f32 = u_xlat52.x;
        let x_3138 : f32 = u_xlat73;
        u_xlat73 = ((x_3134 * x_3136) + x_3138);
        let x_3141 : vec2<f32> = u_xlat60;
        let x_3143 : f32 = u_xlat4.z;
        txVec54 = vec3<f32>(x_3141.x, x_3141.y, x_3143);
        let x_3150 : vec3<f32> = txVec54;
        let x_3152 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_3150.xy, x_3150.z);
        u_xlat52.x = x_3152;
        let x_3155 : f32 = u_xlat21.w;
        let x_3157 : f32 = u_xlat52.x;
        let x_3159 : f32 = u_xlat73;
        u_xlat73 = ((x_3155 * x_3157) + x_3159);
        let x_3162 : vec4<f32> = u_xlat13;
        let x_3163 : vec2<f32> = vec2<f32>(x_3162.x, x_3162.y);
        let x_3165 : f32 = u_xlat4.z;
        txVec55 = vec3<f32>(x_3163.x, x_3163.y, x_3165);
        let x_3172 : vec3<f32> = txVec55;
        let x_3174 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_3172.xy, x_3172.z);
        u_xlat52.x = x_3174;
        let x_3177 : f32 = u_xlat9.x;
        let x_3179 : f32 = u_xlat52.x;
        let x_3181 : f32 = u_xlat73;
        u_xlat73 = ((x_3177 * x_3179) + x_3181);
        let x_3184 : vec4<f32> = u_xlat13;
        let x_3185 : vec2<f32> = vec2<f32>(x_3184.z, x_3184.w);
        let x_3187 : f32 = u_xlat4.z;
        txVec56 = vec3<f32>(x_3185.x, x_3185.y, x_3187);
        let x_3194 : vec3<f32> = txVec56;
        let x_3196 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_3194.xy, x_3194.z);
        u_xlat52.x = x_3196;
        let x_3199 : f32 = u_xlat9.y;
        let x_3201 : f32 = u_xlat52.x;
        let x_3203 : f32 = u_xlat73;
        u_xlat73 = ((x_3199 * x_3201) + x_3203);
        let x_3206 : vec2<f32> = u_xlat55;
        let x_3208 : f32 = u_xlat4.z;
        txVec57 = vec3<f32>(x_3206.x, x_3206.y, x_3208);
        let x_3215 : vec3<f32> = txVec57;
        let x_3217 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_3215.xy, x_3215.z);
        u_xlat52.x = x_3217;
        let x_3220 : f32 = u_xlat9.z;
        let x_3222 : f32 = u_xlat52.x;
        let x_3224 : f32 = u_xlat73;
        u_xlat73 = ((x_3220 * x_3222) + x_3224);
        let x_3227 : vec4<f32> = u_xlat8;
        let x_3228 : vec2<f32> = vec2<f32>(x_3227.x, x_3227.y);
        let x_3230 : f32 = u_xlat4.z;
        txVec58 = vec3<f32>(x_3228.x, x_3228.y, x_3230);
        let x_3237 : vec3<f32> = txVec58;
        let x_3239 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_3237.xy, x_3237.z);
        u_xlat8.x = x_3239;
        let x_3242 : f32 = u_xlat9.w;
        let x_3244 : f32 = u_xlat8.x;
        let x_3246 : f32 = u_xlat73;
        u_xlat66 = ((x_3242 * x_3244) + x_3246);
      }
    }
  } else {
    let x_3250 : vec4<f32> = u_xlat4;
    let x_3251 : vec2<f32> = vec2<f32>(x_3250.x, x_3250.y);
    let x_3253 : f32 = u_xlat4.z;
    txVec59 = vec3<f32>(x_3251.x, x_3251.y, x_3253);
    let x_3260 : vec3<f32> = txVec59;
    let x_3262 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_3260.xy, x_3260.z);
    u_xlat66 = x_3262;
  }
  let x_3263 : f32 = u_xlat66;
  let x_3265 : f32 = x_138.x_MainLightShadowParams.x;
  let x_3267 : f32 = u_xlat70;
  u_xlat66 = ((x_3263 * x_3265) + x_3267);
  let x_3269 : bool = u_xlatb5;
  let x_3270 : f32 = u_xlat66;
  u_xlat66 = select(x_3270, 1.0f, x_3269);
  let x_3272 : vec3<f32> = vs_INTERP0;
  let x_3274 : vec3<f32> = x_66.x_WorldSpaceCameraPos;
  let x_3276 : vec3<f32> = (x_3272 + -(x_3274));
  let x_3277 : vec4<f32> = u_xlat4;
  u_xlat4 = vec4<f32>(x_3276.x, x_3276.y, x_3276.z, x_3277.w);
  let x_3279 : vec4<f32> = u_xlat4;
  let x_3281 : vec4<f32> = u_xlat4;
  u_xlat4.x = dot(vec3<f32>(x_3279.x, x_3279.y, x_3279.z), vec3<f32>(x_3281.x, x_3281.y, x_3281.z));
  let x_3286 : f32 = u_xlat4.x;
  let x_3288 : f32 = x_138.x_MainLightShadowParams.z;
  let x_3291 : f32 = x_138.x_MainLightShadowParams.w;
  u_xlat4.x = ((x_3286 * x_3288) + x_3291);
  let x_3295 : f32 = u_xlat4.x;
  u_xlat4.x = clamp(x_3295, 0.0f, 1.0f);
  let x_3299 : f32 = u_xlat66;
  u_xlat26 = (-(x_3299) + 1.0f);
  let x_3303 : f32 = u_xlat4.x;
  let x_3304 : f32 = u_xlat26;
  let x_3306 : f32 = u_xlat66;
  u_xlat66 = ((x_3303 * x_3304) + x_3306);
  let x_3314 : f32 = x_3312.x_MainLightCookieTextureFormat;
  u_xlatb4.x = !((x_3314 == -1.0f));
  let x_3318 : bool = u_xlatb4.x;
  if (x_3318) {
    let x_3321 : vec3<f32> = vs_INTERP0;
    let x_3324 : vec4<f32> = x_3312.x_MainLightWorldToLight[1i];
    let x_3326 : vec2<f32> = (vec2<f32>(x_3321.y, x_3321.y) * vec2<f32>(x_3324.x, x_3324.y));
    let x_3327 : vec4<f32> = u_xlat4;
    u_xlat4 = vec4<f32>(x_3326.x, x_3326.y, x_3327.z, x_3327.w);
    let x_3330 : vec4<f32> = x_3312.x_MainLightWorldToLight[0i];
    let x_3332 : vec3<f32> = vs_INTERP0;
    let x_3335 : vec4<f32> = u_xlat4;
    let x_3337 : vec2<f32> = ((vec2<f32>(x_3330.x, x_3330.y) * vec2<f32>(x_3332.x, x_3332.x)) + vec2<f32>(x_3335.x, x_3335.y));
    let x_3338 : vec4<f32> = u_xlat4;
    u_xlat4 = vec4<f32>(x_3337.x, x_3337.y, x_3338.z, x_3338.w);
    let x_3341 : vec4<f32> = x_3312.x_MainLightWorldToLight[2i];
    let x_3343 : vec3<f32> = vs_INTERP0;
    let x_3346 : vec4<f32> = u_xlat4;
    let x_3348 : vec2<f32> = ((vec2<f32>(x_3341.x, x_3341.y) * vec2<f32>(x_3343.z, x_3343.z)) + vec2<f32>(x_3346.x, x_3346.y));
    let x_3349 : vec4<f32> = u_xlat4;
    u_xlat4 = vec4<f32>(x_3348.x, x_3348.y, x_3349.z, x_3349.w);
    let x_3351 : vec4<f32> = u_xlat4;
    let x_3354 : vec4<f32> = x_3312.x_MainLightWorldToLight[3i];
    let x_3356 : vec2<f32> = (vec2<f32>(x_3351.x, x_3351.y) + vec2<f32>(x_3354.x, x_3354.y));
    let x_3357 : vec4<f32> = u_xlat4;
    u_xlat4 = vec4<f32>(x_3356.x, x_3356.y, x_3357.z, x_3357.w);
    let x_3359 : vec4<f32> = u_xlat4;
    let x_3362 : vec2<f32> = ((vec2<f32>(x_3359.x, x_3359.y) * vec2<f32>(0.5f, 0.5f)) + vec2<f32>(0.5f, 0.5f));
    let x_3363 : vec4<f32> = u_xlat4;
    u_xlat4 = vec4<f32>(x_3362.x, x_3362.y, x_3363.z, x_3363.w);
    let x_3370 : vec4<f32> = u_xlat4;
    let x_3373 : f32 = x_66.x_GlobalMipBias.x;
    let x_3374 : vec4<f32> = textureSampleBias(x_MainLightCookieTexture, sampler_MainLightCookieTexture, vec2<f32>(x_3370.x, x_3370.y), x_3373);
    u_xlat4 = x_3374;
    let x_3379 : f32 = x_3312.x_MainLightCookieTextureFormat;
    let x_3381 : f32 = x_3312.x_MainLightCookieTextureFormat;
    let x_3383 : f32 = x_3312.x_MainLightCookieTextureFormat;
    let x_3385 : f32 = x_3312.x_MainLightCookieTextureFormat;
    let x_3386 : vec4<f32> = vec4<f32>(x_3379, x_3381, x_3383, x_3385);
    let x_3393 : vec4<bool> = (vec4<f32>(x_3386.x, x_3386.y, x_3386.z, x_3386.w) == vec4<f32>(0.0f, 1.0f, 0.0f, 0.0f));
    u_xlatb8 = vec2<bool>(x_3393.x, x_3393.y);
    let x_3396 : bool = u_xlatb8.y;
    if (x_3396) {
      let x_3401 : f32 = u_xlat4.w;
      x_3397 = x_3401;
    } else {
      let x_3404 : f32 = u_xlat4.x;
      x_3397 = x_3404;
    }
    let x_3405 : f32 = x_3397;
    u_xlat70 = x_3405;
    let x_3407 : bool = u_xlatb8.x;
    if (x_3407) {
      let x_3411 : vec4<f32> = u_xlat4;
      x_3408 = vec3<f32>(x_3411.x, x_3411.y, x_3411.z);
    } else {
      let x_3414 : f32 = u_xlat70;
      x_3408 = vec3<f32>(x_3414, x_3414, x_3414);
    }
    let x_3416 : vec3<f32> = x_3408;
    let x_3417 : vec4<f32> = u_xlat4;
    u_xlat4 = vec4<f32>(x_3416.x, x_3416.y, x_3416.z, x_3417.w);
  } else {
    u_xlat4.x = 1.0f;
    u_xlat4.y = 1.0f;
    u_xlat4.z = 1.0f;
  }
  let x_3423 : vec4<f32> = u_xlat4;
  let x_3426 : vec4<f32> = x_66.x_MainLightColor;
  let x_3428 : vec3<f32> = (vec3<f32>(x_3423.x, x_3423.y, x_3423.z) * vec3<f32>(x_3426.x, x_3426.y, x_3426.z));
  let x_3429 : vec4<f32> = u_xlat4;
  u_xlat4 = vec4<f32>(x_3428.x, x_3428.y, x_3428.z, x_3429.w);
  let x_3431 : vec2<f32> = u_xlat51;
  let x_3433 : vec4<f32> = u_xlat4;
  let x_3435 : vec3<f32> = (vec3<f32>(x_3431.x, x_3431.x, x_3431.x) * vec3<f32>(x_3433.x, x_3433.y, x_3433.z));
  let x_3436 : vec4<f32> = u_xlat4;
  u_xlat4 = vec4<f32>(x_3435.x, x_3435.y, x_3435.z, x_3436.w);
  let x_3438 : vec3<f32> = u_xlat27;
  let x_3440 : vec3<f32> = u_xlat25;
  u_xlat70 = dot(-(x_3438), x_3440);
  let x_3442 : f32 = u_xlat70;
  let x_3443 : f32 = u_xlat70;
  u_xlat70 = (x_3442 + x_3443);
  let x_3445 : vec3<f32> = u_xlat25;
  let x_3446 : f32 = u_xlat70;
  let x_3450 : vec3<f32> = u_xlat27;
  let x_3452 : vec3<f32> = ((x_3445 * -(vec3<f32>(x_3446, x_3446, x_3446))) + -(x_3450));
  let x_3453 : vec4<f32> = u_xlat8;
  u_xlat8 = vec4<f32>(x_3452.x, x_3452.y, x_3452.z, x_3453.w);
  let x_3455 : vec3<f32> = u_xlat25;
  let x_3456 : vec3<f32> = u_xlat27;
  u_xlat70 = dot(x_3455, x_3456);
  let x_3458 : f32 = u_xlat70;
  u_xlat70 = clamp(x_3458, 0.0f, 1.0f);
  let x_3460 : f32 = u_xlat70;
  u_xlat70 = (-(x_3460) + 1.0f);
  let x_3463 : f32 = u_xlat70;
  let x_3464 : f32 = u_xlat70;
  u_xlat70 = (x_3463 * x_3464);
  let x_3466 : f32 = u_xlat70;
  let x_3467 : f32 = u_xlat70;
  u_xlat70 = (x_3466 * x_3467);
  let x_3469 : f32 = u_xlat67;
  u_xlat5.x = ((-(x_3469) * 0.699999988f) + 1.700000048f);
  let x_3476 : f32 = u_xlat67;
  let x_3478 : f32 = u_xlat5.x;
  u_xlat67 = (x_3476 * x_3478);
  let x_3480 : f32 = u_xlat67;
  u_xlat67 = (x_3480 * 6.0f);
  let x_3491 : vec4<f32> = u_xlat8;
  let x_3493 : f32 = u_xlat67;
  let x_3494 : vec4<f32> = textureSampleLevel(unity_SpecCube0, samplerunity_SpecCube0, vec3<f32>(x_3491.x, x_3491.y, x_3491.z), x_3493);
  u_xlat8 = x_3494;
  let x_3496 : f32 = u_xlat8.w;
  u_xlat67 = (x_3496 + -1.0f);
  let x_3499 : f32 = x_1752.unity_SpecCube0_HDR.w;
  let x_3500 : f32 = u_xlat67;
  u_xlat67 = ((x_3499 * x_3500) + 1.0f);
  let x_3503 : f32 = u_xlat67;
  u_xlat67 = max(x_3503, 0.0f);
  let x_3505 : f32 = u_xlat67;
  u_xlat67 = log2(x_3505);
  let x_3507 : f32 = u_xlat67;
  let x_3509 : f32 = x_1752.unity_SpecCube0_HDR.y;
  u_xlat67 = (x_3507 * x_3509);
  let x_3511 : f32 = u_xlat67;
  u_xlat67 = exp2(x_3511);
  let x_3513 : f32 = u_xlat67;
  let x_3515 : f32 = x_1752.unity_SpecCube0_HDR.x;
  u_xlat67 = (x_3513 * x_3515);
  let x_3517 : vec4<f32> = u_xlat8;
  let x_3519 : f32 = u_xlat67;
  let x_3521 : vec3<f32> = (vec3<f32>(x_3517.x, x_3517.y, x_3517.z) * vec3<f32>(x_3519, x_3519, x_3519));
  let x_3522 : vec4<f32> = u_xlat8;
  u_xlat8 = vec4<f32>(x_3521.x, x_3521.y, x_3521.z, x_3522.w);
  let x_3524 : f32 = u_xlat68;
  let x_3526 : f32 = u_xlat68;
  let x_3530 : vec2<f32> = ((vec2<f32>(x_3524, x_3524) * vec2<f32>(x_3526, x_3526)) + vec2<f32>(-1.0f, 1.0f));
  let x_3531 : vec4<f32> = u_xlat9;
  u_xlat9 = vec4<f32>(x_3530.x, x_3530.y, x_3531.z, x_3531.w);
  let x_3534 : f32 = u_xlat9.y;
  u_xlat67 = (1.0f / x_3534);
  let x_3537 : f32 = u_xlat3.x;
  u_xlat68 = (x_3537 + -0.039999999f);
  let x_3540 : f32 = u_xlat70;
  let x_3541 : f32 = u_xlat68;
  u_xlat68 = ((x_3540 * x_3541) + 0.039999999f);
  let x_3545 : f32 = u_xlat67;
  let x_3546 : f32 = u_xlat68;
  u_xlat67 = (x_3545 * x_3546);
  let x_3548 : f32 = u_xlat67;
  let x_3550 : vec4<f32> = u_xlat8;
  let x_3552 : vec3<f32> = (vec3<f32>(x_3548, x_3548, x_3548) * vec3<f32>(x_3550.x, x_3550.y, x_3550.z));
  let x_3553 : vec4<f32> = u_xlat8;
  u_xlat8 = vec4<f32>(x_3552.x, x_3552.y, x_3552.z, x_3553.w);
  let x_3555 : vec4<f32> = u_xlat6;
  let x_3557 : vec3<f32> = u_xlat2;
  let x_3559 : vec4<f32> = u_xlat8;
  let x_3561 : vec3<f32> = ((vec3<f32>(x_3555.x, x_3555.y, x_3555.z) * x_3557) + vec3<f32>(x_3559.x, x_3559.y, x_3559.z));
  let x_3562 : vec4<f32> = u_xlat6;
  u_xlat6 = vec4<f32>(x_3561.x, x_3561.y, x_3561.z, x_3562.w);
  let x_3564 : f32 = u_xlat66;
  let x_3566 : f32 = x_1752.unity_LightData.z;
  u_xlat66 = (x_3564 * x_3566);
  let x_3568 : vec3<f32> = u_xlat25;
  let x_3570 : vec4<f32> = x_66.x_MainLightPosition;
  u_xlat67 = dot(x_3568, vec3<f32>(x_3570.x, x_3570.y, x_3570.z));
  let x_3573 : f32 = u_xlat67;
  u_xlat67 = clamp(x_3573, 0.0f, 1.0f);
  let x_3575 : f32 = u_xlat66;
  let x_3576 : f32 = u_xlat67;
  u_xlat66 = (x_3575 * x_3576);
  let x_3578 : f32 = u_xlat66;
  let x_3580 : vec4<f32> = u_xlat4;
  let x_3582 : vec3<f32> = (vec3<f32>(x_3578, x_3578, x_3578) * vec3<f32>(x_3580.x, x_3580.y, x_3580.z));
  let x_3583 : vec4<f32> = u_xlat4;
  u_xlat4 = vec4<f32>(x_3582.x, x_3582.y, x_3582.z, x_3583.w);
  let x_3585 : vec3<f32> = u_xlat27;
  let x_3587 : vec4<f32> = x_66.x_MainLightPosition;
  let x_3589 : vec3<f32> = (x_3585 + vec3<f32>(x_3587.x, x_3587.y, x_3587.z));
  let x_3590 : vec4<f32> = u_xlat8;
  u_xlat8 = vec4<f32>(x_3589.x, x_3589.y, x_3589.z, x_3590.w);
  let x_3592 : vec4<f32> = u_xlat8;
  let x_3594 : vec4<f32> = u_xlat8;
  u_xlat66 = dot(vec3<f32>(x_3592.x, x_3592.y, x_3592.z), vec3<f32>(x_3594.x, x_3594.y, x_3594.z));
  let x_3597 : f32 = u_xlat66;
  u_xlat66 = max(x_3597, 1.17549435e-37f);
  let x_3600 : f32 = u_xlat66;
  u_xlat66 = inverseSqrt(x_3600);
  let x_3602 : f32 = u_xlat66;
  let x_3604 : vec4<f32> = u_xlat8;
  let x_3606 : vec3<f32> = (vec3<f32>(x_3602, x_3602, x_3602) * vec3<f32>(x_3604.x, x_3604.y, x_3604.z));
  let x_3607 : vec4<f32> = u_xlat8;
  u_xlat8 = vec4<f32>(x_3606.x, x_3606.y, x_3606.z, x_3607.w);
  let x_3609 : vec3<f32> = u_xlat25;
  let x_3610 : vec4<f32> = u_xlat8;
  u_xlat66 = dot(x_3609, vec3<f32>(x_3610.x, x_3610.y, x_3610.z));
  let x_3613 : f32 = u_xlat66;
  u_xlat66 = clamp(x_3613, 0.0f, 1.0f);
  let x_3616 : vec4<f32> = x_66.x_MainLightPosition;
  let x_3618 : vec4<f32> = u_xlat8;
  u_xlat67 = dot(vec3<f32>(x_3616.x, x_3616.y, x_3616.z), vec3<f32>(x_3618.x, x_3618.y, x_3618.z));
  let x_3621 : f32 = u_xlat67;
  u_xlat67 = clamp(x_3621, 0.0f, 1.0f);
  let x_3623 : f32 = u_xlat66;
  let x_3624 : f32 = u_xlat66;
  u_xlat66 = (x_3623 * x_3624);
  let x_3626 : f32 = u_xlat66;
  let x_3628 : f32 = u_xlat9.x;
  u_xlat66 = ((x_3626 * x_3628) + 1.000010014f);
  let x_3632 : f32 = u_xlat67;
  let x_3633 : f32 = u_xlat67;
  u_xlat67 = (x_3632 * x_3633);
  let x_3635 : f32 = u_xlat66;
  let x_3636 : f32 = u_xlat66;
  u_xlat66 = (x_3635 * x_3636);
  let x_3638 : f32 = u_xlat67;
  u_xlat67 = max(x_3638, 0.100000001f);
  let x_3641 : f32 = u_xlat66;
  let x_3642 : f32 = u_xlat67;
  u_xlat66 = (x_3641 * x_3642);
  let x_3645 : f32 = u_xlat29.x;
  let x_3646 : f32 = u_xlat66;
  u_xlat66 = (x_3645 * x_3646);
  let x_3648 : f32 = u_xlat72;
  let x_3649 : f32 = u_xlat66;
  u_xlat66 = (x_3648 / x_3649);
  let x_3651 : f32 = u_xlat66;
  let x_3655 : vec3<f32> = u_xlat2;
  let x_3656 : vec3<f32> = ((vec3<f32>(x_3651, x_3651, x_3651) * vec3<f32>(0.039999999f, 0.039999999f, 0.039999999f)) + x_3655);
  let x_3657 : vec4<f32> = u_xlat8;
  u_xlat8 = vec4<f32>(x_3656.x, x_3656.y, x_3656.z, x_3657.w);
  let x_3659 : vec4<f32> = u_xlat4;
  let x_3661 : vec4<f32> = u_xlat8;
  let x_3663 : vec3<f32> = (vec3<f32>(x_3659.x, x_3659.y, x_3659.z) * vec3<f32>(x_3661.x, x_3661.y, x_3661.z));
  let x_3664 : vec4<f32> = u_xlat4;
  u_xlat4 = vec4<f32>(x_3663.x, x_3663.y, x_3663.z, x_3664.w);
  let x_3667 : f32 = x_66.x_AdditionalLightsCount.x;
  let x_3669 : f32 = x_1752.unity_LightData.y;
  u_xlat66 = min(x_3667, x_3669);
  let x_3671 : f32 = u_xlat66;
  u_xlatu66 = bitcast<u32>(i32(x_3671));
  let x_3675 : f32 = x_3312.x_AdditionalLightsCookieAtlasTextureFormat;
  let x_3677 : f32 = x_3312.x_AdditionalLightsCookieAtlasTextureFormat;
  let x_3679 : f32 = x_3312.x_AdditionalLightsCookieAtlasTextureFormat;
  let x_3681 : f32 = x_3312.x_AdditionalLightsCookieAtlasTextureFormat;
  let x_3682 : vec4<f32> = vec4<f32>(x_3675, x_3677, x_3679, x_3681);
  let x_3688 : vec4<bool> = (vec4<f32>(x_3682.x, x_3682.y, x_3682.z, x_3682.w) == vec4<f32>(0.0f, 1.0f, 0.0f, 0.0f));
  u_xlatb8 = vec2<bool>(x_3688.x, x_3688.y);
  u_xlat31.x = 0.0f;
  u_xlat31.y = 0.0f;
  u_xlat31.z = 0.0f;
  u_xlatu_loop_1 = 0u;
  loop {
    let x_3699 : u32 = u_xlatu_loop_1;
    let x_3700 : u32 = u_xlatu66;
    if ((x_3699 < x_3700)) {
    } else {
      break;
    }
    let x_3703 : u32 = u_xlatu_loop_1;
    u_xlatu68 = (x_3703 >> 2u);
    let x_3706 : u32 = u_xlatu_loop_1;
    u_xlati3 = bitcast<i32>((x_3706 & 3u));
    let x_3709 : u32 = u_xlatu68;
    let x_3712 : vec4<f32> = x_1752.unity_LightIndices[bitcast<i32>(x_3709)];
    let x_3722 : i32 = u_xlati3;
    indexable = array<vec4<u32>, 4u>(vec4<u32>(1065353216u, 0u, 0u, 0u), vec4<u32>(0u, 1065353216u, 0u, 0u), vec4<u32>(0u, 0u, 1065353216u, 0u), vec4<u32>(0u, 0u, 0u, 1065353216u));
    let x_3727 : vec4<u32> = indexable[x_3722];
    u_xlat68 = dot(x_3712, bitcast<vec4<f32>>(x_3727));
    let x_3730 : f32 = u_xlat68;
    u_xlatu68 = bitcast<u32>(i32(x_3730));
    let x_3733 : vec3<f32> = vs_INTERP0;
    let x_3745 : u32 = u_xlatu68;
    let x_3748 : vec4<f32> = x_3744.x_AdditionalLightsPosition[bitcast<i32>(x_3745)];
    let x_3751 : u32 = u_xlatu68;
    let x_3754 : vec4<f32> = x_3744.x_AdditionalLightsPosition[bitcast<i32>(x_3751)];
    let x_3756 : vec3<f32> = ((-(x_3733) * vec3<f32>(x_3748.w, x_3748.w, x_3748.w)) + vec3<f32>(x_3754.x, x_3754.y, x_3754.z));
    let x_3757 : vec4<f32> = u_xlat10;
    u_xlat10 = vec4<f32>(x_3756.x, x_3756.y, x_3756.z, x_3757.w);
    let x_3759 : vec4<f32> = u_xlat10;
    let x_3761 : vec4<f32> = u_xlat10;
    u_xlat3.x = dot(vec3<f32>(x_3759.x, x_3759.y, x_3759.z), vec3<f32>(x_3761.x, x_3761.y, x_3761.z));
    let x_3766 : f32 = u_xlat3.x;
    u_xlat3.x = max(x_3766, 6.10351562e-05f);
    let x_3771 : f32 = u_xlat3.x;
    u_xlat70 = inverseSqrt(x_3771);
    let x_3773 : f32 = u_xlat70;
    let x_3775 : vec4<f32> = u_xlat10;
    let x_3777 : vec3<f32> = (vec3<f32>(x_3773, x_3773, x_3773) * vec3<f32>(x_3775.x, x_3775.y, x_3775.z));
    let x_3778 : vec4<f32> = u_xlat11;
    u_xlat11 = vec4<f32>(x_3777.x, x_3777.y, x_3777.z, x_3778.w);
    let x_3781 : f32 = u_xlat3.x;
    u_xlat5.x = (1.0f / x_3781);
    let x_3785 : f32 = u_xlat3.x;
    let x_3786 : u32 = u_xlatu68;
    let x_3789 : f32 = x_3744.x_AdditionalLightsAttenuation[bitcast<i32>(x_3786)].x;
    u_xlat3.x = (x_3785 * x_3789);
    let x_3793 : f32 = u_xlat3.x;
    let x_3796 : f32 = u_xlat3.x;
    u_xlat3.x = ((-(x_3793) * x_3796) + 1.0f);
    let x_3801 : f32 = u_xlat3.x;
    u_xlat3.x = max(x_3801, 0.0f);
    let x_3805 : f32 = u_xlat3.x;
    let x_3807 : f32 = u_xlat3.x;
    u_xlat3.x = (x_3805 * x_3807);
    let x_3811 : f32 = u_xlat3.x;
    let x_3813 : f32 = u_xlat5.x;
    u_xlat3.x = (x_3811 * x_3813);
    let x_3816 : u32 = u_xlatu68;
    let x_3819 : vec4<f32> = x_3744.x_AdditionalLightsSpotDir[bitcast<i32>(x_3816)];
    let x_3821 : vec4<f32> = u_xlat11;
    u_xlat5.x = dot(vec3<f32>(x_3819.x, x_3819.y, x_3819.z), vec3<f32>(x_3821.x, x_3821.y, x_3821.z));
    let x_3826 : f32 = u_xlat5.x;
    let x_3827 : u32 = u_xlatu68;
    let x_3830 : f32 = x_3744.x_AdditionalLightsAttenuation[bitcast<i32>(x_3827)].z;
    let x_3832 : u32 = u_xlatu68;
    let x_3835 : f32 = x_3744.x_AdditionalLightsAttenuation[bitcast<i32>(x_3832)].w;
    u_xlat5.x = ((x_3826 * x_3830) + x_3835);
    let x_3839 : f32 = u_xlat5.x;
    u_xlat5.x = clamp(x_3839, 0.0f, 1.0f);
    let x_3843 : f32 = u_xlat5.x;
    let x_3845 : f32 = u_xlat5.x;
    u_xlat5.x = (x_3843 * x_3845);
    let x_3849 : f32 = u_xlat3.x;
    let x_3851 : f32 = u_xlat5.x;
    u_xlat3.x = (x_3849 * x_3851);
    let x_3855 : u32 = u_xlatu68;
    u_xlatu5 = (x_3855 >> 5u);
    let x_3858 : u32 = u_xlatu68;
    u_xlati73 = (1i << bitcast<u32>((bitcast<i32>(x_3858) & 31i)));
    let x_3864 : i32 = u_xlati73;
    let x_3866 : u32 = u_xlatu5;
    let x_3869 : f32 = x_3312.x_AdditionalLightsCookieEnableBits[bitcast<i32>(x_3866)].el;
    u_xlati5 = bitcast<i32>((bitcast<u32>(x_3864) & bitcast<u32>(x_3869)));
    let x_3873 : i32 = u_xlati5;
    if ((x_3873 != 0i)) {
      let x_3883 : u32 = u_xlatu68;
      let x_3886 : f32 = x_3882.x_AdditionalLightsLightTypes[bitcast<i32>(x_3883)].el;
      u_xlati5 = i32(x_3886);
      let x_3888 : i32 = u_xlati5;
      u_xlati73 = select(1i, 0i, (x_3888 != 0i));
      let x_3892 : u32 = u_xlatu68;
      u_xlati52 = (bitcast<i32>(x_3892) << bitcast<u32>(2i));
      let x_3895 : i32 = u_xlati73;
      if ((x_3895 != 0i)) {
        let x_3899 : vec3<f32> = vs_INTERP0;
        let x_3901 : i32 = u_xlati52;
        let x_3904 : i32 = u_xlati52;
        let x_3908 : vec4<f32> = x_3882.x_AdditionalLightsWorldToLights[((x_3901 + 1i) / 4i)][((x_3904 + 1i) % 4i)];
        let x_3910 : vec3<f32> = (vec3<f32>(x_3899.y, x_3899.y, x_3899.y) * vec3<f32>(x_3908.x, x_3908.y, x_3908.w));
        let x_3911 : vec4<f32> = u_xlat12;
        u_xlat12 = vec4<f32>(x_3910.x, x_3910.y, x_3910.z, x_3911.w);
        let x_3913 : i32 = u_xlati52;
        let x_3915 : i32 = u_xlati52;
        let x_3918 : vec4<f32> = x_3882.x_AdditionalLightsWorldToLights[(x_3913 / 4i)][(x_3915 % 4i)];
        let x_3920 : vec3<f32> = vs_INTERP0;
        let x_3923 : vec4<f32> = u_xlat12;
        let x_3925 : vec3<f32> = ((vec3<f32>(x_3918.x, x_3918.y, x_3918.w) * vec3<f32>(x_3920.x, x_3920.x, x_3920.x)) + vec3<f32>(x_3923.x, x_3923.y, x_3923.z));
        let x_3926 : vec4<f32> = u_xlat12;
        u_xlat12 = vec4<f32>(x_3925.x, x_3925.y, x_3925.z, x_3926.w);
        let x_3928 : i32 = u_xlati52;
        let x_3931 : i32 = u_xlati52;
        let x_3935 : vec4<f32> = x_3882.x_AdditionalLightsWorldToLights[((x_3928 + 2i) / 4i)][((x_3931 + 2i) % 4i)];
        let x_3937 : vec3<f32> = vs_INTERP0;
        let x_3940 : vec4<f32> = u_xlat12;
        let x_3942 : vec3<f32> = ((vec3<f32>(x_3935.x, x_3935.y, x_3935.w) * vec3<f32>(x_3937.z, x_3937.z, x_3937.z)) + vec3<f32>(x_3940.x, x_3940.y, x_3940.z));
        let x_3943 : vec4<f32> = u_xlat12;
        u_xlat12 = vec4<f32>(x_3942.x, x_3942.y, x_3942.z, x_3943.w);
        let x_3945 : vec4<f32> = u_xlat12;
        let x_3947 : i32 = u_xlati52;
        let x_3950 : i32 = u_xlati52;
        let x_3954 : vec4<f32> = x_3882.x_AdditionalLightsWorldToLights[((x_3947 + 3i) / 4i)][((x_3950 + 3i) % 4i)];
        let x_3956 : vec3<f32> = (vec3<f32>(x_3945.x, x_3945.y, x_3945.z) + vec3<f32>(x_3954.x, x_3954.y, x_3954.w));
        let x_3957 : vec4<f32> = u_xlat12;
        u_xlat12 = vec4<f32>(x_3956.x, x_3956.y, x_3956.z, x_3957.w);
        let x_3959 : vec4<f32> = u_xlat12;
        let x_3961 : vec4<f32> = u_xlat12;
        let x_3963 : vec2<f32> = (vec2<f32>(x_3959.x, x_3959.y) / vec2<f32>(x_3961.z, x_3961.z));
        let x_3964 : vec4<f32> = u_xlat12;
        u_xlat12 = vec4<f32>(x_3963.x, x_3963.y, x_3964.z, x_3964.w);
        let x_3966 : vec4<f32> = u_xlat12;
        let x_3969 : vec2<f32> = ((vec2<f32>(x_3966.x, x_3966.y) * vec2<f32>(0.5f, 0.5f)) + vec2<f32>(0.5f, 0.5f));
        let x_3970 : vec4<f32> = u_xlat12;
        u_xlat12 = vec4<f32>(x_3969.x, x_3969.y, x_3970.z, x_3970.w);
        let x_3972 : vec4<f32> = u_xlat12;
        let x_3976 : vec2<f32> = clamp(vec2<f32>(x_3972.x, x_3972.y), vec2<f32>(0.0f, 0.0f), vec2<f32>(1.0f, 1.0f));
        let x_3977 : vec4<f32> = u_xlat12;
        u_xlat12 = vec4<f32>(x_3976.x, x_3976.y, x_3977.z, x_3977.w);
        let x_3979 : u32 = u_xlatu68;
        let x_3982 : vec4<f32> = x_3882.x_AdditionalLightsCookieAtlasUVRects[bitcast<i32>(x_3979)];
        let x_3984 : vec4<f32> = u_xlat12;
        let x_3987 : u32 = u_xlatu68;
        let x_3990 : vec4<f32> = x_3882.x_AdditionalLightsCookieAtlasUVRects[bitcast<i32>(x_3987)];
        let x_3992 : vec2<f32> = ((vec2<f32>(x_3982.x, x_3982.y) * vec2<f32>(x_3984.x, x_3984.y)) + vec2<f32>(x_3990.z, x_3990.w));
        let x_3993 : vec4<f32> = u_xlat12;
        u_xlat12 = vec4<f32>(x_3992.x, x_3992.y, x_3993.z, x_3993.w);
      } else {
        let x_3996 : i32 = u_xlati5;
        u_xlatb5 = (x_3996 == 1i);
        let x_3998 : bool = u_xlatb5;
        u_xlati5 = select(0i, 1i, x_3998);
        let x_4000 : i32 = u_xlati5;
        if ((x_4000 != 0i)) {
          let x_4005 : vec3<f32> = vs_INTERP0;
          let x_4007 : i32 = u_xlati52;
          let x_4010 : i32 = u_xlati52;
          let x_4014 : vec4<f32> = x_3882.x_AdditionalLightsWorldToLights[((x_4007 + 1i) / 4i)][((x_4010 + 1i) % 4i)];
          u_xlat56 = (vec2<f32>(x_4005.y, x_4005.y) * vec2<f32>(x_4014.x, x_4014.y));
          let x_4017 : i32 = u_xlati52;
          let x_4019 : i32 = u_xlati52;
          let x_4022 : vec4<f32> = x_3882.x_AdditionalLightsWorldToLights[(x_4017 / 4i)][(x_4019 % 4i)];
          let x_4024 : vec3<f32> = vs_INTERP0;
          let x_4027 : vec2<f32> = u_xlat56;
          u_xlat56 = ((vec2<f32>(x_4022.x, x_4022.y) * vec2<f32>(x_4024.x, x_4024.x)) + x_4027);
          let x_4029 : i32 = u_xlati52;
          let x_4032 : i32 = u_xlati52;
          let x_4036 : vec4<f32> = x_3882.x_AdditionalLightsWorldToLights[((x_4029 + 2i) / 4i)][((x_4032 + 2i) % 4i)];
          let x_4038 : vec3<f32> = vs_INTERP0;
          let x_4041 : vec2<f32> = u_xlat56;
          u_xlat56 = ((vec2<f32>(x_4036.x, x_4036.y) * vec2<f32>(x_4038.z, x_4038.z)) + x_4041);
          let x_4043 : vec2<f32> = u_xlat56;
          let x_4044 : i32 = u_xlati52;
          let x_4047 : i32 = u_xlati52;
          let x_4051 : vec4<f32> = x_3882.x_AdditionalLightsWorldToLights[((x_4044 + 3i) / 4i)][((x_4047 + 3i) % 4i)];
          u_xlat56 = (x_4043 + vec2<f32>(x_4051.x, x_4051.y));
          let x_4054 : vec2<f32> = u_xlat56;
          u_xlat56 = ((x_4054 * vec2<f32>(0.5f, 0.5f)) + vec2<f32>(0.5f, 0.5f));
          let x_4057 : vec2<f32> = u_xlat56;
          u_xlat56 = fract(x_4057);
          let x_4059 : u32 = u_xlatu68;
          let x_4062 : vec4<f32> = x_3882.x_AdditionalLightsCookieAtlasUVRects[bitcast<i32>(x_4059)];
          let x_4064 : vec2<f32> = u_xlat56;
          let x_4066 : u32 = u_xlatu68;
          let x_4069 : vec4<f32> = x_3882.x_AdditionalLightsCookieAtlasUVRects[bitcast<i32>(x_4066)];
          let x_4071 : vec2<f32> = ((vec2<f32>(x_4062.x, x_4062.y) * x_4064) + vec2<f32>(x_4069.z, x_4069.w));
          let x_4072 : vec4<f32> = u_xlat12;
          u_xlat12 = vec4<f32>(x_4071.x, x_4071.y, x_4072.z, x_4072.w);
        } else {
          let x_4075 : vec3<f32> = vs_INTERP0;
          let x_4077 : i32 = u_xlati52;
          let x_4080 : i32 = u_xlati52;
          let x_4084 : vec4<f32> = x_3882.x_AdditionalLightsWorldToLights[((x_4077 + 1i) / 4i)][((x_4080 + 1i) % 4i)];
          u_xlat13 = (vec4<f32>(x_4075.y, x_4075.y, x_4075.y, x_4075.y) * x_4084);
          let x_4086 : i32 = u_xlati52;
          let x_4088 : i32 = u_xlati52;
          let x_4091 : vec4<f32> = x_3882.x_AdditionalLightsWorldToLights[(x_4086 / 4i)][(x_4088 % 4i)];
          let x_4092 : vec3<f32> = vs_INTERP0;
          let x_4095 : vec4<f32> = u_xlat13;
          u_xlat13 = ((x_4091 * vec4<f32>(x_4092.x, x_4092.x, x_4092.x, x_4092.x)) + x_4095);
          let x_4097 : i32 = u_xlati52;
          let x_4100 : i32 = u_xlati52;
          let x_4104 : vec4<f32> = x_3882.x_AdditionalLightsWorldToLights[((x_4097 + 2i) / 4i)][((x_4100 + 2i) % 4i)];
          let x_4105 : vec3<f32> = vs_INTERP0;
          let x_4108 : vec4<f32> = u_xlat13;
          u_xlat13 = ((x_4104 * vec4<f32>(x_4105.z, x_4105.z, x_4105.z, x_4105.z)) + x_4108);
          let x_4110 : vec4<f32> = u_xlat13;
          let x_4111 : i32 = u_xlati52;
          let x_4114 : i32 = u_xlati52;
          let x_4118 : vec4<f32> = x_3882.x_AdditionalLightsWorldToLights[((x_4111 + 3i) / 4i)][((x_4114 + 3i) % 4i)];
          u_xlat13 = (x_4110 + x_4118);
          let x_4120 : vec4<f32> = u_xlat13;
          let x_4122 : vec4<f32> = u_xlat13;
          let x_4124 : vec3<f32> = (vec3<f32>(x_4120.x, x_4120.y, x_4120.z) / vec3<f32>(x_4122.w, x_4122.w, x_4122.w));
          let x_4125 : vec4<f32> = u_xlat13;
          u_xlat13 = vec4<f32>(x_4124.x, x_4124.y, x_4124.z, x_4125.w);
          let x_4127 : vec4<f32> = u_xlat13;
          let x_4129 : vec4<f32> = u_xlat13;
          u_xlat5.x = dot(vec3<f32>(x_4127.x, x_4127.y, x_4127.z), vec3<f32>(x_4129.x, x_4129.y, x_4129.z));
          let x_4134 : f32 = u_xlat5.x;
          u_xlat5.x = inverseSqrt(x_4134);
          let x_4137 : vec4<f32> = u_xlat5;
          let x_4139 : vec4<f32> = u_xlat13;
          let x_4141 : vec3<f32> = (vec3<f32>(x_4137.x, x_4137.x, x_4137.x) * vec3<f32>(x_4139.x, x_4139.y, x_4139.z));
          let x_4142 : vec4<f32> = u_xlat13;
          u_xlat13 = vec4<f32>(x_4141.x, x_4141.y, x_4141.z, x_4142.w);
          let x_4144 : vec4<f32> = u_xlat13;
          u_xlat5.x = dot(abs(vec3<f32>(x_4144.x, x_4144.y, x_4144.z)), vec3<f32>(1.0f, 1.0f, 1.0f));
          let x_4151 : f32 = u_xlat5.x;
          u_xlat5.x = max(x_4151, 0.000001f);
          let x_4156 : f32 = u_xlat5.x;
          u_xlat5.x = (1.0f / x_4156);
          let x_4159 : vec4<f32> = u_xlat5;
          let x_4161 : vec4<f32> = u_xlat13;
          let x_4163 : vec3<f32> = (vec3<f32>(x_4159.x, x_4159.x, x_4159.x) * vec3<f32>(x_4161.z, x_4161.x, x_4161.y));
          let x_4164 : vec4<f32> = u_xlat14;
          u_xlat14 = vec4<f32>(x_4163.x, x_4163.y, x_4163.z, x_4164.w);
          let x_4167 : f32 = u_xlat14.x;
          u_xlat14.x = -(x_4167);
          let x_4171 : f32 = u_xlat14.x;
          u_xlat14.x = clamp(x_4171, 0.0f, 1.0f);
          let x_4175 : vec4<f32> = u_xlat14;
          let x_4178 : vec4<bool> = (vec4<f32>(x_4175.y, x_4175.z, x_4175.y, x_4175.z) >= vec4<f32>(0.0f, 0.0f, 0.0f, 0.0f));
          u_xlatb52 = vec2<bool>(x_4178.x, x_4178.y);
          let x_4181 : bool = u_xlatb52.x;
          if (x_4181) {
            let x_4186 : f32 = u_xlat14.x;
            x_4182 = x_4186;
          } else {
            let x_4189 : f32 = u_xlat14.x;
            x_4182 = -(x_4189);
          }
          let x_4191 : f32 = x_4182;
          u_xlat52.x = x_4191;
          let x_4194 : bool = u_xlatb52.y;
          if (x_4194) {
            let x_4199 : f32 = u_xlat14.x;
            x_4195 = x_4199;
          } else {
            let x_4202 : f32 = u_xlat14.x;
            x_4195 = -(x_4202);
          }
          let x_4204 : f32 = x_4195;
          u_xlat52.y = x_4204;
          let x_4206 : vec4<f32> = u_xlat13;
          let x_4208 : vec4<f32> = u_xlat5;
          let x_4211 : vec2<f32> = u_xlat52;
          u_xlat52 = ((vec2<f32>(x_4206.x, x_4206.y) * vec2<f32>(x_4208.x, x_4208.x)) + x_4211);
          let x_4213 : vec2<f32> = u_xlat52;
          u_xlat52 = ((x_4213 * vec2<f32>(0.5f, 0.5f)) + vec2<f32>(0.5f, 0.5f));
          let x_4216 : vec2<f32> = u_xlat52;
          u_xlat52 = clamp(x_4216, vec2<f32>(0.0f, 0.0f), vec2<f32>(1.0f, 1.0f));
          let x_4220 : u32 = u_xlatu68;
          let x_4223 : vec4<f32> = x_3882.x_AdditionalLightsCookieAtlasUVRects[bitcast<i32>(x_4220)];
          let x_4225 : vec2<f32> = u_xlat52;
          let x_4227 : u32 = u_xlatu68;
          let x_4230 : vec4<f32> = x_3882.x_AdditionalLightsCookieAtlasUVRects[bitcast<i32>(x_4227)];
          let x_4232 : vec2<f32> = ((vec2<f32>(x_4223.x, x_4223.y) * x_4225) + vec2<f32>(x_4230.z, x_4230.w));
          let x_4233 : vec4<f32> = u_xlat12;
          u_xlat12 = vec4<f32>(x_4232.x, x_4232.y, x_4233.z, x_4233.w);
        }
      }
      let x_4240 : vec4<f32> = u_xlat12;
      let x_4243 : f32 = x_66.x_GlobalMipBias.x;
      let x_4244 : vec4<f32> = textureSampleBias(x_AdditionalLightsCookieAtlasTexture, sampler_AdditionalLightsCookieAtlasTexture, vec2<f32>(x_4240.x, x_4240.y), x_4243);
      u_xlat12 = x_4244;
      let x_4246 : bool = u_xlatb8.y;
      if (x_4246) {
        let x_4251 : f32 = u_xlat12.w;
        x_4247 = x_4251;
      } else {
        let x_4254 : f32 = u_xlat12.x;
        x_4247 = x_4254;
      }
      let x_4255 : f32 = x_4247;
      u_xlat5.x = x_4255;
      let x_4258 : bool = u_xlatb8.x;
      if (x_4258) {
        let x_4262 : vec4<f32> = u_xlat12;
        x_4259 = vec3<f32>(x_4262.x, x_4262.y, x_4262.z);
      } else {
        let x_4265 : vec4<f32> = u_xlat5;
        x_4259 = vec3<f32>(x_4265.x, x_4265.x, x_4265.x);
      }
      let x_4267 : vec3<f32> = x_4259;
      let x_4268 : vec4<f32> = u_xlat12;
      u_xlat12 = vec4<f32>(x_4267.x, x_4267.y, x_4267.z, x_4268.w);
    } else {
      u_xlat12.x = 1.0f;
      u_xlat12.y = 1.0f;
      u_xlat12.z = 1.0f;
    }
    let x_4274 : vec4<f32> = u_xlat12;
    let x_4276 : u32 = u_xlatu68;
    let x_4279 : vec4<f32> = x_3744.x_AdditionalLightsColor[bitcast<i32>(x_4276)];
    let x_4281 : vec3<f32> = (vec3<f32>(x_4274.x, x_4274.y, x_4274.z) * vec3<f32>(x_4279.x, x_4279.y, x_4279.z));
    let x_4282 : vec4<f32> = u_xlat12;
    u_xlat12 = vec4<f32>(x_4281.x, x_4281.y, x_4281.z, x_4282.w);
    let x_4284 : vec2<f32> = u_xlat51;
    let x_4286 : vec4<f32> = u_xlat12;
    let x_4288 : vec3<f32> = (vec3<f32>(x_4284.x, x_4284.x, x_4284.x) * vec3<f32>(x_4286.x, x_4286.y, x_4286.z));
    let x_4289 : vec4<f32> = u_xlat12;
    u_xlat12 = vec4<f32>(x_4288.x, x_4288.y, x_4288.z, x_4289.w);
    let x_4291 : vec3<f32> = u_xlat25;
    let x_4292 : vec4<f32> = u_xlat11;
    u_xlat68 = dot(x_4291, vec3<f32>(x_4292.x, x_4292.y, x_4292.z));
    let x_4295 : f32 = u_xlat68;
    u_xlat68 = clamp(x_4295, 0.0f, 1.0f);
    let x_4297 : f32 = u_xlat68;
    let x_4299 : f32 = u_xlat3.x;
    u_xlat68 = (x_4297 * x_4299);
    let x_4301 : f32 = u_xlat68;
    let x_4303 : vec4<f32> = u_xlat12;
    let x_4305 : vec3<f32> = (vec3<f32>(x_4301, x_4301, x_4301) * vec3<f32>(x_4303.x, x_4303.y, x_4303.z));
    let x_4306 : vec4<f32> = u_xlat12;
    u_xlat12 = vec4<f32>(x_4305.x, x_4305.y, x_4305.z, x_4306.w);
    let x_4308 : vec4<f32> = u_xlat10;
    let x_4310 : f32 = u_xlat70;
    let x_4313 : vec3<f32> = u_xlat27;
    let x_4314 : vec3<f32> = ((vec3<f32>(x_4308.x, x_4308.y, x_4308.z) * vec3<f32>(x_4310, x_4310, x_4310)) + x_4313);
    let x_4315 : vec4<f32> = u_xlat10;
    u_xlat10 = vec4<f32>(x_4314.x, x_4314.y, x_4314.z, x_4315.w);
    let x_4317 : vec4<f32> = u_xlat10;
    let x_4319 : vec4<f32> = u_xlat10;
    u_xlat68 = dot(vec3<f32>(x_4317.x, x_4317.y, x_4317.z), vec3<f32>(x_4319.x, x_4319.y, x_4319.z));
    let x_4322 : f32 = u_xlat68;
    u_xlat68 = max(x_4322, 1.17549435e-37f);
    let x_4324 : f32 = u_xlat68;
    u_xlat68 = inverseSqrt(x_4324);
    let x_4326 : f32 = u_xlat68;
    let x_4328 : vec4<f32> = u_xlat10;
    let x_4330 : vec3<f32> = (vec3<f32>(x_4326, x_4326, x_4326) * vec3<f32>(x_4328.x, x_4328.y, x_4328.z));
    let x_4331 : vec4<f32> = u_xlat10;
    u_xlat10 = vec4<f32>(x_4330.x, x_4330.y, x_4330.z, x_4331.w);
    let x_4333 : vec3<f32> = u_xlat25;
    let x_4334 : vec4<f32> = u_xlat10;
    u_xlat68 = dot(x_4333, vec3<f32>(x_4334.x, x_4334.y, x_4334.z));
    let x_4337 : f32 = u_xlat68;
    u_xlat68 = clamp(x_4337, 0.0f, 1.0f);
    let x_4339 : vec4<f32> = u_xlat11;
    let x_4341 : vec4<f32> = u_xlat10;
    u_xlat3.x = dot(vec3<f32>(x_4339.x, x_4339.y, x_4339.z), vec3<f32>(x_4341.x, x_4341.y, x_4341.z));
    let x_4346 : f32 = u_xlat3.x;
    u_xlat3.x = clamp(x_4346, 0.0f, 1.0f);
    let x_4349 : f32 = u_xlat68;
    let x_4350 : f32 = u_xlat68;
    u_xlat68 = (x_4349 * x_4350);
    let x_4352 : f32 = u_xlat68;
    let x_4354 : f32 = u_xlat9.x;
    u_xlat68 = ((x_4352 * x_4354) + 1.000010014f);
    let x_4358 : f32 = u_xlat3.x;
    let x_4360 : f32 = u_xlat3.x;
    u_xlat3.x = (x_4358 * x_4360);
    let x_4363 : f32 = u_xlat68;
    let x_4364 : f32 = u_xlat68;
    u_xlat68 = (x_4363 * x_4364);
    let x_4367 : f32 = u_xlat3.x;
    u_xlat3.x = max(x_4367, 0.100000001f);
    let x_4370 : f32 = u_xlat68;
    let x_4372 : f32 = u_xlat3.x;
    u_xlat68 = (x_4370 * x_4372);
    let x_4375 : f32 = u_xlat29.x;
    let x_4376 : f32 = u_xlat68;
    u_xlat68 = (x_4375 * x_4376);
    let x_4378 : f32 = u_xlat72;
    let x_4379 : f32 = u_xlat68;
    u_xlat68 = (x_4378 / x_4379);
    let x_4381 : f32 = u_xlat68;
    let x_4384 : vec3<f32> = u_xlat2;
    let x_4385 : vec3<f32> = ((vec3<f32>(x_4381, x_4381, x_4381) * vec3<f32>(0.039999999f, 0.039999999f, 0.039999999f)) + x_4384);
    let x_4386 : vec4<f32> = u_xlat10;
    u_xlat10 = vec4<f32>(x_4385.x, x_4385.y, x_4385.z, x_4386.w);
    let x_4388 : vec4<f32> = u_xlat10;
    let x_4390 : vec4<f32> = u_xlat12;
    let x_4393 : vec3<f32> = u_xlat31;
    u_xlat31 = ((vec3<f32>(x_4388.x, x_4388.y, x_4388.z) * vec3<f32>(x_4390.x, x_4390.y, x_4390.z)) + x_4393);

    continuing {
      let x_4395 : u32 = u_xlatu_loop_1;
      u_xlatu_loop_1 = (x_4395 + bitcast<u32>(1i));
    }
  }
  let x_4397 : vec4<f32> = u_xlat6;
  let x_4399 : vec4<f32> = u_xlat7;
  let x_4402 : vec4<f32> = u_xlat4;
  u_xlat2 = ((vec3<f32>(x_4397.x, x_4397.y, x_4397.z) * vec3<f32>(x_4399.x, x_4399.x, x_4399.x)) + vec3<f32>(x_4402.x, x_4402.y, x_4402.z));
  let x_4405 : vec3<f32> = u_xlat31;
  let x_4406 : vec3<f32> = u_xlat2;
  u_xlat2 = (x_4405 + x_4406);
  let x_4408 : vec4<f32> = vs_INTERP4;
  let x_4410 : vec3<f32> = u_xlat0;
  let x_4412 : vec3<f32> = u_xlat2;
  u_xlat0 = ((vec3<f32>(x_4408.w, x_4408.w, x_4408.w) * x_4410) + x_4412);
  let x_4415 : f32 = u_xlat23.x;
  let x_4417 : f32 = u_xlat23.x;
  u_xlat66 = (x_4415 * -(x_4417));
  let x_4420 : f32 = u_xlat66;
  u_xlat66 = exp2(x_4420);
  let x_4422 : vec3<f32> = u_xlat0;
  let x_4425 : vec4<f32> = x_66.unity_FogColor;
  u_xlat0 = (x_4422 + -(vec3<f32>(x_4425.x, x_4425.y, x_4425.z)));
  let x_4431 : f32 = u_xlat66;
  let x_4433 : vec3<f32> = u_xlat0;
  let x_4436 : vec4<f32> = x_66.unity_FogColor;
  let x_4438 : vec3<f32> = ((vec3<f32>(x_4431, x_4431, x_4431) * x_4433) + vec3<f32>(x_4436.x, x_4436.y, x_4436.z));
  let x_4439 : vec4<f32> = SV_Target0;
  SV_Target0 = vec4<f32>(x_4438.x, x_4438.y, x_4438.z, x_4439.w);
  let x_4441 : bool = u_xlatb45;
  if (x_4441) {
    let x_4446 : f32 = u_xlat1.x;
    x_4442 = x_4446;
  } else {
    x_4442 = 1.0f;
  }
  let x_4448 : f32 = x_4442;
  SV_Target0.w = x_4448;
  let x_4454 : u32 = x_66.x_RenderingLayerMaxInt;
  let x_4456 : f32 = x_1752.unity_RenderingLayer.x;
  u_xlatu0 = (x_4454 & bitcast<u32>(x_4456));
  let x_4459 : u32 = u_xlatu0;
  u_xlat0.x = f32(x_4459);
  let x_4464 : f32 = u_xlat0.x;
  let x_4466 : f32 = x_66.x_RenderingLayerRcpMaxInt;
  SV_Target1.x = (x_4464 * x_4466);
  let x_4470 : f32 = SV_Target1.x;
  SV_Target1.x = clamp(x_4470, 0.0f, 1.0f);
  let x_4473 : vec4<f32> = SV_Target1;
  SV_Target1 = vec4<f32>(x_4473.x, vec3<f32>(0.0f, 0.0f, 0.0f).x, vec3<f32>(0.0f, 0.0f, 0.0f).y, vec3<f32>(0.0f, 0.0f, 0.0f).z);
  return;
}

struct main_out {
  @location(0)
  SV_Target0_1 : vec4<f32>,
  @location(1)
  SV_Target1_1 : vec4<f32>,
}

@fragment
fn main(@builtin(position) gl_FragCoord_param : vec4<f32>, @location(1) vs_INTERP1_param : vec3<f32>, @location(3) vs_INTERP3_param : vec4<f32>, @location(4) vs_INTERP4_param : vec4<f32>, @location(0) vs_INTERP0_param : vec3<f32>, @location(2) vs_INTERP2_param : vec4<f32>, @location(5) vs_INTERP5_param : vec2<f32>) -> main_out {
  gl_FragCoord = gl_FragCoord_param;
  vs_INTERP1 = vs_INTERP1_param;
  vs_INTERP3 = vs_INTERP3_param;
  vs_INTERP4 = vs_INTERP4_param;
  vs_INTERP0 = vs_INTERP0_param;
  vs_INTERP2 = vs_INTERP2_param;
  vs_INTERP5 = vs_INTERP5_param;
  main_1();
  return main_out(SV_Target0, SV_Target1);
}

