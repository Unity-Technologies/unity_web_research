struct x_Terrain {
  x_NormalScale0 : f32,
  x_NormalScale1 : f32,
  x_NormalScale2 : f32,
  x_NormalScale3 : f32,
  x_Metallic0 : f32,
  x_Metallic1 : f32,
  x_Metallic2 : f32,
  x_Metallic3 : f32,
  x_Smoothness0 : f32,
  x_Smoothness1 : f32,
  x_Smoothness2 : f32,
  x_Smoothness3 : f32,
  x_DiffuseRemapScale0 : vec4<f32>,
  x_DiffuseRemapScale1 : vec4<f32>,
  x_DiffuseRemapScale2 : vec4<f32>,
  x_DiffuseRemapScale3 : vec4<f32>,
  x_MaskMapRemapOffset0 : vec4<f32>,
  x_MaskMapRemapOffset1 : vec4<f32>,
  x_MaskMapRemapOffset2 : vec4<f32>,
  x_MaskMapRemapOffset3 : vec4<f32>,
  x_MaskMapRemapScale0 : vec4<f32>,
  x_MaskMapRemapScale1 : vec4<f32>,
  x_MaskMapRemapScale2 : vec4<f32>,
  x_MaskMapRemapScale3 : vec4<f32>,
  x_Control_ST : vec4<f32>,
  x_Control_TexelSize : vec4<f32>,
  x_DiffuseHasAlpha0 : f32,
  x_DiffuseHasAlpha1 : f32,
  x_DiffuseHasAlpha2 : f32,
  x_DiffuseHasAlpha3 : f32,
  x_LayerHasMask0 : f32,
  x_LayerHasMask1 : f32,
  x_LayerHasMask2 : f32,
  x_LayerHasMask3 : f32,
  x_Splat0_ST : vec4<f32>,
  x_Splat1_ST : vec4<f32>,
  x_Splat2_ST : vec4<f32>,
  x_Splat3_ST : vec4<f32>,
  x_HeightTransition : f32,
  x_NumLayersCount : f32,
  @size(8)
  padding : u32,
  x_TerrainHeightmapRecipSize : vec4<f32>,
  x_TerrainHeightmapScale : vec4<f32>,
}

struct PGlobals {
  x_ScaledScreenParams : vec4<f32>,
  x_GlobalMipBias : vec2<f32>,
  @size(8)
  padding_1 : u32,
  x_MainLightPosition : vec4<f32>,
  x_MainLightColor : vec4<f32>,
  x_AmbientOcclusionParam : vec4<f32>,
  x_AdditionalLightsCount : vec4<f32>,
  x_WorldSpaceCameraPos : vec3<f32>,
  @size(4)
  padding_2 : u32,
  x_ScaleBiasRt : vec4<f32>,
}

type Arr = array<mat4x4<f32>, 5u>;

struct MainLightShadows {
  x_MainLightWorldToShadow : Arr,
  x_CascadeShadowSplitSpheres0 : vec4<f32>,
  x_CascadeShadowSplitSpheres1 : vec4<f32>,
  x_CascadeShadowSplitSpheres2 : vec4<f32>,
  x_CascadeShadowSplitSpheres3 : vec4<f32>,
  x_CascadeShadowSplitSphereRadii : vec4<f32>,
  x_MainLightShadowOffset0 : vec4<f32>,
  x_MainLightShadowOffset1 : vec4<f32>,
  x_MainLightShadowParams : vec4<f32>,
  x_MainLightShadowmapSize : vec4<f32>,
}

type Arr_1 = array<vec4<f32>, 2u>;

struct UnityPerDraw {
  unity_ObjectToWorld : mat4x4<f32>,
  unity_WorldToObject : mat4x4<f32>,
  unity_LODFade : vec4<f32>,
  unity_WorldTransformParams : vec4<f32>,
  unity_RenderingLayer : vec4<f32>,
  unity_LightData : vec4<f32>,
  unity_LightIndices : Arr_1,
  unity_ProbesOcclusion : vec4<f32>,
  unity_SpecCube0_HDR : vec4<f32>,
  unity_SpecCube1_HDR : vec4<f32>,
  unity_SpecCube0_BoxMax : vec4<f32>,
  unity_SpecCube0_BoxMin : vec4<f32>,
  unity_SpecCube0_ProbePosition : vec4<f32>,
  unity_SpecCube1_BoxMax : vec4<f32>,
  unity_SpecCube1_BoxMin : vec4<f32>,
  unity_SpecCube1_ProbePosition : vec4<f32>,
  unity_LightmapST : vec4<f32>,
  unity_DynamicLightmapST : vec4<f32>,
  unity_SHAr : vec4<f32>,
  unity_SHAg : vec4<f32>,
  unity_SHAb : vec4<f32>,
  unity_SHBr : vec4<f32>,
  unity_SHBg : vec4<f32>,
  unity_SHBb : vec4<f32>,
  unity_SHC : vec4<f32>,
  unity_RendererBounds_Min : vec4<f32>,
  unity_RendererBounds_Max : vec4<f32>,
  unity_MatrixPreviousM : mat4x4<f32>,
  unity_MatrixPreviousMI : mat4x4<f32>,
  unity_MotionVectorsParams : vec4<f32>,
  unity_SpriteColor : vec4<f32>,
  unity_SpriteProps : vec4<f32>,
}

type Arr_2 = array<vec4<f32>, 256u>;

type Arr_3 = array<vec4<f32>, 256u>;

type Arr_4 = array<vec4<f32>, 256u>;

type Arr_5 = array<vec4<f32>, 256u>;

type Arr_6 = array<vec4<f32>, 256u>;

struct strided_arr {
  @size(16)
  el : f32,
}

type Arr_7 = array<strided_arr, 256u>;

struct AdditionalLights {
  x_AdditionalLightsPosition : Arr_6,
  x_AdditionalLightsColor : Arr_6,
  x_AdditionalLightsAttenuation : Arr_6,
  x_AdditionalLightsSpotDir : Arr_6,
  x_AdditionalLightsOcclusionProbes : Arr_6,
  x_AdditionalLightsLayerMasks : Arr_7,
}

var<private> gl_FragCoord : vec4<f32>;

@group(1) @binding(3) var<uniform> x_30 : x_Terrain;

var<private> vs_TEXCOORD0 : vec4<f32>;

@group(0) @binding(3) var x_Control : texture_2d<f32>;

@group(0) @binding(16) var sampler_Control : sampler;

@group(1) @binding(0) var<uniform> x_127 : PGlobals;

@group(0) @binding(4) var x_Splat0 : texture_2d<f32>;

@group(0) @binding(17) var sampler_Splat0 : sampler;

var<private> vs_TEXCOORD1 : vec4<f32>;

@group(0) @binding(5) var x_Splat1 : texture_2d<f32>;

@group(0) @binding(6) var x_Splat2 : texture_2d<f32>;

var<private> vs_TEXCOORD2 : vec4<f32>;

@group(0) @binding(7) var x_Splat3 : texture_2d<f32>;

@group(0) @binding(8) var x_Normal0 : texture_2d<f32>;

@group(0) @binding(18) var sampler_Normal0 : sampler;

@group(0) @binding(9) var x_Normal1 : texture_2d<f32>;

@group(0) @binding(10) var x_Normal2 : texture_2d<f32>;

@group(0) @binding(11) var x_Normal3 : texture_2d<f32>;

var<private> vs_TEXCOORD5 : vec4<f32>;

var<private> vs_TEXCOORD4 : vec4<f32>;

var<private> vs_TEXCOORD3 : vec4<f32>;

var<private> vs_TEXCOORD7 : vec3<f32>;

@group(1) @binding(4) var<uniform> x_854 : MainLightShadows;

@group(0) @binding(2) var unity_LightmapInd : texture_2d<f32>;

@group(0) @binding(15) var samplerunity_Lightmap : sampler;

@group(0) @binding(1) var unity_Lightmap : texture_2d<f32>;

@group(0) @binding(12) var x_ScreenSpaceOcclusionTexture : texture_2d<f32>;

@group(0) @binding(19) var sampler_ScreenSpaceOcclusionTexture : sampler;

@group(0) @binding(13) var x_MainLightShadowmapTexture : texture_depth_2d;

@group(0) @binding(20) var sampler_MainLightShadowmapTexture : sampler_comparison;

@group(0) @binding(0) var unity_SpecCube0 : texture_cube<f32>;

@group(0) @binding(14) var samplerunity_SpecCube0 : sampler;

@group(1) @binding(2) var<uniform> x_2584 : UnityPerDraw;

@group(1) @binding(1) var<uniform> x_2849 : AdditionalLights;

var<private> SV_Target0 : vec4<f32>;

fn main_1() {
  var hlslcc_FragCoord : vec4<f32>;
  var u_xlat0 : vec3<f32>;
  var u_xlat1 : vec4<f32>;
  var u_xlat2 : vec4<f32>;
  var u_xlat3 : vec4<f32>;
  var u_xlat4 : vec4<f32>;
  var u_xlat63 : f32;
  var u_xlat5 : vec4<f32>;
  var u_xlat6 : vec4<f32>;
  var u_xlat7 : vec4<f32>;
  var u_xlat8 : vec4<f32>;
  var u_xlat9 : vec4<f32>;
  var u_xlat10 : vec4<f32>;
  var u_xlatb64 : bool;
  var u_xlat11 : vec4<f32>;
  var u_xlat12 : vec4<f32>;
  var u_xlat13 : vec4<f32>;
  var u_xlat64 : f32;
  var u_xlatb65 : bool;
  var u_xlat42 : f32;
  var u_xlat21 : f32;
  var u_xlatb2 : vec4<bool>;
  var u_xlatu64 : u32;
  var u_xlati64 : i32;
  var u_xlat65 : f32;
  var u_xlat66 : f32;
  var u_xlat25 : f32;
  var u_xlatb4 : bool;
  var txVec0 : vec3<f32>;
  var txVec1 : vec3<f32>;
  var txVec2 : vec3<f32>;
  var txVec3 : vec3<f32>;
  var u_xlatb46 : bool;
  var u_xlat46 : vec2<f32>;
  var u_xlat49 : vec2<f32>;
  var u_xlat51 : vec2<f32>;
  var u_xlat14 : vec4<f32>;
  var u_xlat15 : vec4<f32>;
  var txVec4 : vec3<f32>;
  var u_xlat67 : f32;
  var txVec5 : vec3<f32>;
  var u_xlat68 : f32;
  var txVec6 : vec3<f32>;
  var txVec7 : vec3<f32>;
  var txVec8 : vec3<f32>;
  var txVec9 : vec3<f32>;
  var txVec10 : vec3<f32>;
  var txVec11 : vec3<f32>;
  var txVec12 : vec3<f32>;
  var u_xlat55 : vec2<f32>;
  var u_xlat16 : vec4<f32>;
  var u_xlat29 : vec2<f32>;
  var u_xlat17 : vec2<f32>;
  var u_xlat52 : vec2<f32>;
  var u_xlat18 : vec4<f32>;
  var u_xlat19 : vec4<f32>;
  var u_xlat20 : vec4<f32>;
  var txVec13 : vec3<f32>;
  var txVec14 : vec3<f32>;
  var u_xlat69 : f32;
  var txVec15 : vec3<f32>;
  var txVec16 : vec3<f32>;
  var txVec17 : vec3<f32>;
  var txVec18 : vec3<f32>;
  var txVec19 : vec3<f32>;
  var txVec20 : vec3<f32>;
  var txVec21 : vec3<f32>;
  var txVec22 : vec3<f32>;
  var txVec23 : vec3<f32>;
  var txVec24 : vec3<f32>;
  var txVec25 : vec3<f32>;
  var txVec26 : vec3<f32>;
  var txVec27 : vec3<f32>;
  var txVec28 : vec3<f32>;
  var txVec29 : vec3<f32>;
  var u_xlatb23 : bool;
  var u_xlatb44 : bool;
  var x_2429 : f32;
  var u_xlat23 : vec3<f32>;
  var u_xlat44 : f32;
  var u_xlatu42 : u32;
  var u_xlatu_loop_1 : u32;
  var u_xlatu68 : u32;
  var u_xlati69 : i32;
  var indexable : array<vec4<u32>, 4u>;
  var u_xlati68 : i32;
  var u_xlat70 : f32;
  var u_xlat71 : f32;
  var u_xlat_precise_vec4 : vec4<f32>;
  var u_xlat_precise_ivec4 : vec4<i32>;
  var u_xlat_precise_bvec4 : vec4<bool>;
  var u_xlat_precise_uvec4 : vec4<u32>;
  let x_13 : vec4<f32> = gl_FragCoord;
  let x_14 : vec3<f32> = vec3<f32>(x_13.x, x_13.y, x_13.z);
  let x_20 : f32 = gl_FragCoord.w;
  hlslcc_FragCoord = vec4<f32>(x_14.x, x_14.y, x_14.z, (1.0f / x_20));
  let x_35 : vec4<f32> = x_30.x_MaskMapRemapScale0;
  let x_42 : vec4<f32> = x_30.x_MaskMapRemapOffset0;
  u_xlat0 = ((vec3<f32>(x_35.x, x_35.y, x_35.w) * vec3<f32>(0.5f, 0.5f, 0.5f)) + vec3<f32>(x_42.x, x_42.y, x_42.w));
  let x_48 : vec4<f32> = x_30.x_MaskMapRemapScale1;
  let x_53 : vec4<f32> = x_30.x_MaskMapRemapOffset1;
  let x_55 : vec3<f32> = ((vec3<f32>(x_48.x, x_48.y, x_48.w) * vec3<f32>(0.5f, 0.5f, 0.5f)) + vec3<f32>(x_53.x, x_53.y, x_53.w));
  let x_56 : vec4<f32> = u_xlat1;
  u_xlat1 = vec4<f32>(x_55.x, x_55.y, x_55.z, x_56.w);
  let x_61 : vec4<f32> = x_30.x_MaskMapRemapScale2;
  let x_66 : vec4<f32> = x_30.x_MaskMapRemapOffset2;
  let x_68 : vec3<f32> = ((vec3<f32>(x_61.x, x_61.y, x_61.w) * vec3<f32>(0.5f, 0.5f, 0.5f)) + vec3<f32>(x_66.x, x_66.y, x_66.w));
  let x_69 : vec4<f32> = u_xlat2;
  u_xlat2 = vec4<f32>(x_68.x, x_68.y, x_68.z, x_69.w);
  let x_74 : vec4<f32> = x_30.x_MaskMapRemapScale3;
  let x_79 : vec4<f32> = x_30.x_MaskMapRemapOffset3;
  let x_81 : vec3<f32> = ((vec3<f32>(x_74.x, x_74.w, x_74.y) * vec3<f32>(0.5f, 0.5f, 0.5f)) + vec3<f32>(x_79.x, x_79.w, x_79.y));
  let x_82 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_81.x, x_81.y, x_82.z, x_81.z);
  let x_88 : vec4<f32> = x_30.x_Control_TexelSize;
  let x_92 : vec2<f32> = (vec2<f32>(x_88.z, x_88.w) + vec2<f32>(-1.0f, -1.0f));
  let x_93 : vec4<f32> = u_xlat4;
  u_xlat4 = vec4<f32>(x_92.x, x_92.y, x_93.z, x_93.w);
  let x_96 : vec4<f32> = vs_TEXCOORD0;
  let x_98 : vec4<f32> = u_xlat4;
  let x_102 : vec2<f32> = ((vec2<f32>(x_96.x, x_96.y) * vec2<f32>(x_98.x, x_98.y)) + vec2<f32>(0.5f, 0.5f));
  let x_103 : vec4<f32> = u_xlat4;
  u_xlat4 = vec4<f32>(x_102.x, x_102.y, x_103.z, x_103.w);
  let x_105 : vec4<f32> = u_xlat4;
  let x_108 : vec4<f32> = x_30.x_Control_TexelSize;
  let x_110 : vec2<f32> = (vec2<f32>(x_105.x, x_105.y) * vec2<f32>(x_108.x, x_108.y));
  let x_111 : vec4<f32> = u_xlat4;
  u_xlat4 = vec4<f32>(x_110.x, x_110.y, x_111.z, x_111.w);
  let x_123 : vec4<f32> = u_xlat4;
  let x_132 : f32 = x_127.x_GlobalMipBias.x;
  let x_133 : vec4<f32> = textureSampleBias(x_Control, sampler_Control, vec2<f32>(x_123.x, x_123.y), x_132);
  u_xlat4 = x_133;
  let x_136 : vec4<f32> = u_xlat4;
  u_xlat63 = dot(x_136, vec4<f32>(1.0f, 1.0f, 1.0f, 1.0f));
  let x_146 : vec4<f32> = vs_TEXCOORD1;
  let x_149 : f32 = x_127.x_GlobalMipBias.x;
  let x_150 : vec4<f32> = textureSampleBias(x_Splat0, sampler_Splat0, vec2<f32>(x_146.x, x_146.y), x_149);
  u_xlat5 = x_150;
  let x_156 : vec4<f32> = vs_TEXCOORD1;
  let x_159 : f32 = x_127.x_GlobalMipBias.x;
  let x_160 : vec4<f32> = textureSampleBias(x_Splat1, sampler_Splat0, vec2<f32>(x_156.z, x_156.w), x_159);
  u_xlat6 = x_160;
  let x_167 : vec4<f32> = vs_TEXCOORD2;
  let x_170 : f32 = x_127.x_GlobalMipBias.x;
  let x_171 : vec4<f32> = textureSampleBias(x_Splat2, sampler_Splat0, vec2<f32>(x_167.x, x_167.y), x_170);
  u_xlat7 = x_171;
  let x_177 : vec4<f32> = vs_TEXCOORD2;
  let x_180 : f32 = x_127.x_GlobalMipBias.x;
  let x_181 : vec4<f32> = textureSampleBias(x_Splat3, sampler_Splat0, vec2<f32>(x_177.z, x_177.w), x_180);
  u_xlat8 = x_181;
  let x_184 : f32 = u_xlat5.w;
  u_xlat9.x = x_184;
  let x_187 : f32 = u_xlat6.w;
  u_xlat9.y = x_187;
  let x_191 : f32 = u_xlat7.w;
  u_xlat9.z = x_191;
  let x_195 : f32 = u_xlat8.w;
  u_xlat9.w = x_195;
  let x_198 : vec4<f32> = u_xlat9;
  let x_201 : f32 = x_30.x_Smoothness0;
  let x_204 : f32 = x_30.x_Smoothness1;
  let x_207 : f32 = x_30.x_Smoothness2;
  let x_210 : f32 = x_30.x_Smoothness3;
  u_xlat10 = (x_198 * vec4<f32>(x_201, x_204, x_207, x_210));
  let x_219 : f32 = x_30.x_NumLayersCount;
  u_xlatb64 = (4.0f >= x_219);
  let x_222 : vec4<f32> = u_xlat4;
  u_xlat11 = (-(x_222) + vec4<f32>(1.0f, 1.0f, 1.0f, 1.0f));
  let x_225 : vec4<f32> = u_xlat9;
  let x_226 : vec4<f32> = u_xlat11;
  u_xlat11 = (x_225 + -(x_226));
  let x_229 : vec4<f32> = u_xlat11;
  u_xlat11 = (x_229 * vec4<f32>(20.0f, 20.0f, 20.0f, 20.0f));
  let x_233 : vec4<f32> = u_xlat11;
  u_xlat11 = clamp(x_233, vec4<f32>(0.0f, 0.0f, 0.0f, 0.0f), vec4<f32>(1.0f, 1.0f, 1.0f, 1.0f));
  let x_238 : vec4<f32> = u_xlat4;
  let x_242 : vec4<f32> = u_xlat11;
  u_xlat11 = ((x_238 * vec4<f32>(0.001f, 0.001f, 0.001f, 0.001f)) + x_242);
  let x_245 : vec4<f32> = u_xlat4;
  let x_246 : vec4<f32> = u_xlat11;
  u_xlat12 = (x_245 + -(x_246));
  let x_251 : f32 = u_xlat12.x;
  let x_254 : f32 = x_30.x_DiffuseRemapScale0.w;
  u_xlat13.x = (x_251 * x_254);
  let x_258 : f32 = u_xlat12.y;
  let x_261 : f32 = x_30.x_DiffuseRemapScale1.w;
  u_xlat13.y = (x_258 * x_261);
  let x_265 : f32 = u_xlat12.z;
  let x_268 : f32 = x_30.x_DiffuseRemapScale2.w;
  u_xlat13.z = (x_265 * x_268);
  let x_272 : f32 = u_xlat12.w;
  let x_275 : f32 = x_30.x_DiffuseRemapScale3.w;
  u_xlat13.w = (x_272 * x_275);
  let x_278 : vec4<f32> = u_xlat11;
  let x_279 : vec4<f32> = u_xlat13;
  u_xlat11 = (x_278 + x_279);
  let x_281 : bool = u_xlatb64;
  let x_282 : vec4<f32> = u_xlat11;
  let x_283 : vec4<f32> = u_xlat4;
  u_xlat4 = select(x_283, x_282, vec4<bool>(x_281, x_281, x_281, x_281));
  let x_288 : vec4<f32> = u_xlat4;
  u_xlat64 = dot(x_288, vec4<f32>(1.0f, 1.0f, 1.0f, 1.0f));
  let x_292 : f32 = u_xlat64;
  u_xlatb65 = (0.005f >= x_292);
  let x_294 : bool = u_xlatb65;
  if (((select(0i, 1i, x_294) * -1i) != 0i)) {
    discard;
  }
  let x_303 : f32 = u_xlat64;
  u_xlat64 = (x_303 + 6.10351562e-05f);
  let x_306 : vec4<f32> = u_xlat4;
  let x_307 : f32 = u_xlat64;
  u_xlat4 = (x_306 / vec4<f32>(x_307, x_307, x_307, x_307));
  let x_310 : vec4<f32> = u_xlat4;
  let x_313 : vec4<f32> = x_30.x_DiffuseRemapScale0;
  let x_315 : vec3<f32> = (vec3<f32>(x_310.x, x_310.x, x_310.x) * vec3<f32>(x_313.x, x_313.y, x_313.z));
  let x_316 : vec4<f32> = u_xlat11;
  u_xlat11 = vec4<f32>(x_315.x, x_315.y, x_315.z, x_316.w);
  let x_318 : vec4<f32> = u_xlat4;
  let x_321 : vec4<f32> = x_30.x_DiffuseRemapScale1;
  let x_323 : vec3<f32> = (vec3<f32>(x_318.y, x_318.y, x_318.y) * vec3<f32>(x_321.x, x_321.y, x_321.z));
  let x_324 : vec4<f32> = u_xlat12;
  u_xlat12 = vec4<f32>(x_323.x, x_323.y, x_323.z, x_324.w);
  let x_326 : vec4<f32> = u_xlat6;
  let x_328 : vec4<f32> = u_xlat12;
  let x_330 : vec3<f32> = (vec3<f32>(x_326.x, x_326.y, x_326.z) * vec3<f32>(x_328.x, x_328.y, x_328.z));
  let x_331 : vec4<f32> = u_xlat6;
  u_xlat6 = vec4<f32>(x_330.x, x_330.y, x_330.z, x_331.w);
  let x_333 : vec4<f32> = u_xlat5;
  let x_335 : vec4<f32> = u_xlat11;
  let x_338 : vec4<f32> = u_xlat6;
  let x_340 : vec3<f32> = ((vec3<f32>(x_333.x, x_333.y, x_333.z) * vec3<f32>(x_335.x, x_335.y, x_335.z)) + vec3<f32>(x_338.x, x_338.y, x_338.z));
  let x_341 : vec4<f32> = u_xlat5;
  u_xlat5 = vec4<f32>(x_340.x, x_340.y, x_340.z, x_341.w);
  let x_343 : vec4<f32> = u_xlat4;
  let x_346 : vec4<f32> = x_30.x_DiffuseRemapScale2;
  let x_348 : vec3<f32> = (vec3<f32>(x_343.z, x_343.z, x_343.z) * vec3<f32>(x_346.x, x_346.y, x_346.z));
  let x_349 : vec4<f32> = u_xlat6;
  u_xlat6 = vec4<f32>(x_348.x, x_348.y, x_348.z, x_349.w);
  let x_351 : vec4<f32> = u_xlat7;
  let x_353 : vec4<f32> = u_xlat6;
  let x_356 : vec4<f32> = u_xlat5;
  let x_358 : vec3<f32> = ((vec3<f32>(x_351.x, x_351.y, x_351.z) * vec3<f32>(x_353.x, x_353.y, x_353.z)) + vec3<f32>(x_356.x, x_356.y, x_356.z));
  let x_359 : vec4<f32> = u_xlat5;
  u_xlat5 = vec4<f32>(x_358.x, x_358.y, x_358.z, x_359.w);
  let x_361 : vec4<f32> = u_xlat4;
  let x_364 : vec4<f32> = x_30.x_DiffuseRemapScale3;
  let x_366 : vec3<f32> = (vec3<f32>(x_361.w, x_361.w, x_361.w) * vec3<f32>(x_364.x, x_364.y, x_364.z));
  let x_367 : vec4<f32> = u_xlat6;
  u_xlat6 = vec4<f32>(x_366.x, x_366.y, x_366.z, x_367.w);
  let x_369 : vec4<f32> = u_xlat8;
  let x_371 : vec4<f32> = u_xlat6;
  let x_374 : vec4<f32> = u_xlat5;
  let x_376 : vec3<f32> = ((vec3<f32>(x_369.x, x_369.y, x_369.z) * vec3<f32>(x_371.x, x_371.y, x_371.z)) + vec3<f32>(x_374.x, x_374.y, x_374.z));
  let x_377 : vec4<f32> = u_xlat5;
  u_xlat5 = vec4<f32>(x_376.x, x_376.y, x_376.z, x_377.w);
  let x_384 : vec4<f32> = vs_TEXCOORD1;
  let x_387 : f32 = x_127.x_GlobalMipBias.x;
  let x_388 : vec4<f32> = textureSampleBias(x_Normal0, sampler_Normal0, vec2<f32>(x_384.x, x_384.y), x_387);
  let x_389 : vec3<f32> = vec3<f32>(x_388.x, x_388.y, x_388.w);
  let x_390 : vec4<f32> = u_xlat6;
  u_xlat6 = vec4<f32>(x_389.x, x_389.y, x_389.z, x_390.w);
  let x_393 : f32 = u_xlat6.x;
  let x_395 : f32 = u_xlat6.z;
  u_xlat6.x = (x_393 * x_395);
  let x_398 : vec4<f32> = u_xlat6;
  let x_403 : vec2<f32> = ((vec2<f32>(x_398.x, x_398.y) * vec2<f32>(2.0f, 2.0f)) + vec2<f32>(-1.0f, -1.0f));
  let x_404 : vec4<f32> = u_xlat6;
  u_xlat6 = vec4<f32>(x_403.x, x_403.y, x_404.z, x_404.w);
  let x_406 : vec4<f32> = u_xlat6;
  let x_408 : vec4<f32> = u_xlat6;
  u_xlat64 = dot(vec2<f32>(x_406.x, x_406.y), vec2<f32>(x_408.x, x_408.y));
  let x_411 : f32 = u_xlat64;
  u_xlat64 = min(x_411, 1.0f);
  let x_413 : f32 = u_xlat64;
  u_xlat64 = (-(x_413) + 1.0f);
  let x_416 : f32 = u_xlat64;
  u_xlat64 = sqrt(x_416);
  let x_418 : f32 = u_xlat64;
  u_xlat7.z = max(x_418, 1.00000002e-16f);
  let x_422 : vec4<f32> = u_xlat6;
  let x_425 : f32 = x_30.x_NormalScale0;
  let x_427 : vec2<f32> = (vec2<f32>(x_422.x, x_422.y) * vec2<f32>(x_425, x_425));
  let x_428 : vec4<f32> = u_xlat7;
  u_xlat7 = vec4<f32>(x_427.x, x_427.y, x_428.z, x_428.w);
  let x_434 : vec4<f32> = vs_TEXCOORD1;
  let x_437 : f32 = x_127.x_GlobalMipBias.x;
  let x_438 : vec4<f32> = textureSampleBias(x_Normal1, sampler_Normal0, vec2<f32>(x_434.z, x_434.w), x_437);
  let x_439 : vec3<f32> = vec3<f32>(x_438.x, x_438.y, x_438.w);
  let x_440 : vec4<f32> = u_xlat6;
  u_xlat6 = vec4<f32>(x_439.x, x_439.y, x_439.z, x_440.w);
  let x_443 : f32 = u_xlat6.x;
  let x_445 : f32 = u_xlat6.z;
  u_xlat6.x = (x_443 * x_445);
  let x_448 : vec4<f32> = u_xlat6;
  let x_451 : vec2<f32> = ((vec2<f32>(x_448.x, x_448.y) * vec2<f32>(2.0f, 2.0f)) + vec2<f32>(-1.0f, -1.0f));
  let x_452 : vec4<f32> = u_xlat6;
  u_xlat6 = vec4<f32>(x_451.x, x_451.y, x_452.z, x_452.w);
  let x_454 : vec4<f32> = u_xlat6;
  let x_456 : vec4<f32> = u_xlat6;
  u_xlat64 = dot(vec2<f32>(x_454.x, x_454.y), vec2<f32>(x_456.x, x_456.y));
  let x_459 : f32 = u_xlat64;
  u_xlat64 = min(x_459, 1.0f);
  let x_461 : f32 = u_xlat64;
  u_xlat64 = (-(x_461) + 1.0f);
  let x_464 : f32 = u_xlat64;
  u_xlat64 = sqrt(x_464);
  let x_466 : f32 = u_xlat64;
  u_xlat8.z = max(x_466, 1.00000002e-16f);
  let x_469 : vec4<f32> = u_xlat6;
  let x_472 : f32 = x_30.x_NormalScale1;
  let x_474 : f32 = x_30.x_NormalScale1;
  let x_475 : vec2<f32> = vec2<f32>(x_472, x_474);
  let x_479 : vec2<f32> = (vec2<f32>(x_469.x, x_469.y) * vec2<f32>(x_475.x, x_475.y));
  let x_480 : vec4<f32> = u_xlat8;
  u_xlat8 = vec4<f32>(x_479.x, x_479.y, x_480.z, x_480.w);
  let x_482 : vec4<f32> = u_xlat4;
  let x_484 : vec4<f32> = u_xlat8;
  let x_486 : vec3<f32> = (vec3<f32>(x_482.y, x_482.y, x_482.y) * vec3<f32>(x_484.x, x_484.y, x_484.z));
  let x_487 : vec4<f32> = u_xlat6;
  u_xlat6 = vec4<f32>(x_486.x, x_486.y, x_486.z, x_487.w);
  let x_489 : vec4<f32> = u_xlat4;
  let x_491 : vec4<f32> = u_xlat7;
  let x_494 : vec4<f32> = u_xlat6;
  let x_496 : vec3<f32> = ((vec3<f32>(x_489.x, x_489.x, x_489.x) * vec3<f32>(x_491.x, x_491.y, x_491.z)) + vec3<f32>(x_494.x, x_494.y, x_494.z));
  let x_497 : vec4<f32> = u_xlat6;
  u_xlat6 = vec4<f32>(x_496.x, x_496.y, x_496.z, x_497.w);
  let x_503 : vec4<f32> = vs_TEXCOORD2;
  let x_506 : f32 = x_127.x_GlobalMipBias.x;
  let x_507 : vec4<f32> = textureSampleBias(x_Normal2, sampler_Normal0, vec2<f32>(x_503.x, x_503.y), x_506);
  let x_508 : vec3<f32> = vec3<f32>(x_507.x, x_507.y, x_507.w);
  let x_509 : vec4<f32> = u_xlat7;
  u_xlat7 = vec4<f32>(x_508.x, x_508.y, x_508.z, x_509.w);
  let x_512 : f32 = u_xlat7.x;
  let x_514 : f32 = u_xlat7.z;
  u_xlat7.x = (x_512 * x_514);
  let x_517 : vec4<f32> = u_xlat7;
  let x_520 : vec2<f32> = ((vec2<f32>(x_517.x, x_517.y) * vec2<f32>(2.0f, 2.0f)) + vec2<f32>(-1.0f, -1.0f));
  let x_521 : vec4<f32> = u_xlat7;
  u_xlat7 = vec4<f32>(x_520.x, x_520.y, x_521.z, x_521.w);
  let x_523 : vec4<f32> = u_xlat7;
  let x_525 : vec4<f32> = u_xlat7;
  u_xlat64 = dot(vec2<f32>(x_523.x, x_523.y), vec2<f32>(x_525.x, x_525.y));
  let x_528 : f32 = u_xlat64;
  u_xlat64 = min(x_528, 1.0f);
  let x_530 : f32 = u_xlat64;
  u_xlat64 = (-(x_530) + 1.0f);
  let x_533 : f32 = u_xlat64;
  u_xlat64 = sqrt(x_533);
  let x_535 : f32 = u_xlat64;
  u_xlat8.z = max(x_535, 1.00000002e-16f);
  let x_538 : vec4<f32> = u_xlat7;
  let x_542 : f32 = x_30.x_NormalScale2;
  let x_544 : f32 = x_30.x_NormalScale2;
  let x_545 : vec2<f32> = vec2<f32>(x_542, x_544);
  let x_549 : vec2<f32> = (vec2<f32>(x_538.x, x_538.y) * vec2<f32>(x_545.x, x_545.y));
  let x_550 : vec4<f32> = u_xlat8;
  u_xlat8 = vec4<f32>(x_549.x, x_549.y, x_550.z, x_550.w);
  let x_552 : vec4<f32> = u_xlat4;
  let x_554 : vec4<f32> = u_xlat8;
  let x_557 : vec4<f32> = u_xlat6;
  let x_559 : vec3<f32> = ((vec3<f32>(x_552.z, x_552.z, x_552.z) * vec3<f32>(x_554.x, x_554.y, x_554.z)) + vec3<f32>(x_557.x, x_557.y, x_557.z));
  let x_560 : vec4<f32> = u_xlat6;
  u_xlat6 = vec4<f32>(x_559.x, x_559.y, x_559.z, x_560.w);
  let x_566 : vec4<f32> = vs_TEXCOORD2;
  let x_569 : f32 = x_127.x_GlobalMipBias.x;
  let x_570 : vec4<f32> = textureSampleBias(x_Normal3, sampler_Normal0, vec2<f32>(x_566.z, x_566.w), x_569);
  let x_571 : vec3<f32> = vec3<f32>(x_570.x, x_570.y, x_570.w);
  let x_572 : vec4<f32> = u_xlat7;
  u_xlat7 = vec4<f32>(x_571.x, x_571.y, x_571.z, x_572.w);
  let x_575 : f32 = u_xlat7.x;
  let x_577 : f32 = u_xlat7.z;
  u_xlat7.x = (x_575 * x_577);
  let x_580 : vec4<f32> = u_xlat7;
  let x_583 : vec2<f32> = ((vec2<f32>(x_580.x, x_580.y) * vec2<f32>(2.0f, 2.0f)) + vec2<f32>(-1.0f, -1.0f));
  let x_584 : vec4<f32> = u_xlat7;
  u_xlat7 = vec4<f32>(x_583.x, x_583.y, x_584.z, x_584.w);
  let x_586 : vec4<f32> = u_xlat7;
  let x_588 : vec4<f32> = u_xlat7;
  u_xlat64 = dot(vec2<f32>(x_586.x, x_586.y), vec2<f32>(x_588.x, x_588.y));
  let x_591 : f32 = u_xlat64;
  u_xlat64 = min(x_591, 1.0f);
  let x_593 : f32 = u_xlat64;
  u_xlat64 = (-(x_593) + 1.0f);
  let x_596 : f32 = u_xlat64;
  u_xlat64 = sqrt(x_596);
  let x_598 : f32 = u_xlat64;
  u_xlat8.z = max(x_598, 1.00000002e-16f);
  let x_601 : vec4<f32> = u_xlat7;
  let x_605 : f32 = x_30.x_NormalScale3;
  let x_607 : f32 = x_30.x_NormalScale3;
  let x_608 : vec2<f32> = vec2<f32>(x_605, x_607);
  let x_612 : vec2<f32> = (vec2<f32>(x_601.x, x_601.y) * vec2<f32>(x_608.x, x_608.y));
  let x_613 : vec4<f32> = u_xlat8;
  u_xlat8 = vec4<f32>(x_612.x, x_612.y, x_613.z, x_613.w);
  let x_615 : vec4<f32> = u_xlat4;
  let x_617 : vec4<f32> = u_xlat8;
  let x_620 : vec4<f32> = u_xlat6;
  let x_622 : vec3<f32> = ((vec3<f32>(x_615.w, x_615.w, x_615.w) * vec3<f32>(x_617.x, x_617.y, x_617.z)) + vec3<f32>(x_620.x, x_620.y, x_620.z));
  let x_623 : vec4<f32> = u_xlat6;
  u_xlat6 = vec4<f32>(x_622.x, x_622.y, x_622.z, x_623.w);
  let x_626 : f32 = u_xlat6.z;
  u_xlat6.w = (x_626 + 0.00001f);
  let x_630 : vec4<f32> = u_xlat6;
  let x_632 : vec4<f32> = u_xlat6;
  u_xlat64 = dot(vec3<f32>(x_630.x, x_630.y, x_630.w), vec3<f32>(x_632.x, x_632.y, x_632.w));
  let x_635 : f32 = u_xlat64;
  u_xlat64 = inverseSqrt(x_635);
  let x_637 : f32 = u_xlat64;
  let x_639 : vec4<f32> = u_xlat6;
  let x_641 : vec3<f32> = (vec3<f32>(x_637, x_637, x_637) * vec3<f32>(x_639.x, x_639.y, x_639.w));
  let x_642 : vec4<f32> = u_xlat6;
  u_xlat6 = vec4<f32>(x_641.x, x_641.y, x_641.z, x_642.w);
  let x_645 : f32 = x_30.x_MaskMapRemapScale0.y;
  u_xlat7.x = x_645;
  let x_648 : f32 = x_30.x_MaskMapRemapScale1.y;
  u_xlat7.y = x_648;
  let x_651 : f32 = x_30.x_MaskMapRemapScale2.y;
  u_xlat7.z = x_651;
  let x_654 : f32 = x_30.x_MaskMapRemapScale3.y;
  u_xlat7.w = x_654;
  let x_657 : f32 = x_30.x_MaskMapRemapOffset0.y;
  u_xlat8.x = x_657;
  let x_660 : f32 = x_30.x_MaskMapRemapOffset1.y;
  u_xlat8.y = x_660;
  let x_663 : f32 = x_30.x_MaskMapRemapOffset2.y;
  u_xlat8.z = x_663;
  let x_666 : f32 = x_30.x_MaskMapRemapOffset3.y;
  u_xlat8.w = x_666;
  let x_668 : vec4<f32> = u_xlat7;
  let x_669 : vec4<f32> = u_xlat8;
  u_xlat7 = (x_668 + x_669);
  let x_672 : f32 = u_xlat0.z;
  u_xlat8.x = x_672;
  let x_675 : f32 = u_xlat1.z;
  u_xlat8.y = x_675;
  let x_678 : f32 = u_xlat2.z;
  u_xlat8.z = x_678;
  let x_681 : f32 = u_xlat3.y;
  u_xlat8.w = x_681;
  let x_683 : vec4<f32> = u_xlat9;
  let x_686 : f32 = x_30.x_Smoothness0;
  let x_688 : f32 = x_30.x_Smoothness1;
  let x_690 : f32 = x_30.x_Smoothness2;
  let x_692 : f32 = x_30.x_Smoothness3;
  let x_695 : vec4<f32> = u_xlat8;
  u_xlat8 = ((-(x_683) * vec4<f32>(x_686, x_688, x_690, x_692)) + x_695);
  let x_699 : f32 = x_30.x_LayerHasMask0;
  let x_702 : f32 = x_30.x_LayerHasMask1;
  let x_705 : f32 = x_30.x_LayerHasMask2;
  let x_708 : f32 = x_30.x_LayerHasMask3;
  let x_710 : vec4<f32> = u_xlat8;
  let x_712 : vec4<f32> = u_xlat10;
  u_xlat8 = ((vec4<f32>(x_699, x_702, x_705, x_708) * x_710) + x_712);
  let x_715 : vec4<f32> = u_xlat4;
  let x_716 : vec4<f32> = u_xlat8;
  u_xlat42 = dot(x_715, x_716);
  let x_719 : f32 = u_xlat0.x;
  u_xlat8.x = x_719;
  let x_722 : f32 = u_xlat1.x;
  u_xlat8.y = x_722;
  let x_725 : f32 = u_xlat2.x;
  u_xlat8.z = x_725;
  let x_728 : f32 = u_xlat3.x;
  u_xlat8.w = x_728;
  let x_730 : vec4<f32> = u_xlat8;
  let x_733 : f32 = x_30.x_Metallic0;
  let x_736 : f32 = x_30.x_Metallic1;
  let x_739 : f32 = x_30.x_Metallic2;
  let x_742 : f32 = x_30.x_Metallic3;
  u_xlat8 = (x_730 + -(vec4<f32>(x_733, x_736, x_739, x_742)));
  let x_747 : f32 = x_30.x_LayerHasMask0;
  let x_749 : f32 = x_30.x_LayerHasMask1;
  let x_751 : f32 = x_30.x_LayerHasMask2;
  let x_753 : f32 = x_30.x_LayerHasMask3;
  let x_755 : vec4<f32> = u_xlat8;
  let x_758 : f32 = x_30.x_Metallic0;
  let x_760 : f32 = x_30.x_Metallic1;
  let x_762 : f32 = x_30.x_Metallic2;
  let x_764 : f32 = x_30.x_Metallic3;
  u_xlat8 = ((vec4<f32>(x_747, x_749, x_751, x_753) * x_755) + vec4<f32>(x_758, x_760, x_762, x_764));
  let x_767 : vec4<f32> = u_xlat4;
  let x_768 : vec4<f32> = u_xlat8;
  u_xlat0.x = dot(x_767, x_768);
  let x_772 : f32 = u_xlat0.y;
  u_xlat3.x = x_772;
  let x_775 : f32 = u_xlat1.y;
  u_xlat3.y = x_775;
  let x_778 : f32 = u_xlat2.y;
  u_xlat3.z = x_778;
  let x_780 : vec4<f32> = u_xlat7;
  let x_782 : vec4<f32> = u_xlat3;
  u_xlat1 = (-(x_780) + x_782);
  let x_785 : f32 = x_30.x_LayerHasMask0;
  let x_787 : f32 = x_30.x_LayerHasMask1;
  let x_789 : f32 = x_30.x_LayerHasMask2;
  let x_791 : f32 = x_30.x_LayerHasMask3;
  let x_793 : vec4<f32> = u_xlat1;
  let x_795 : vec4<f32> = u_xlat7;
  u_xlat1 = ((vec4<f32>(x_785, x_787, x_789, x_791) * x_793) + x_795);
  let x_798 : vec4<f32> = u_xlat4;
  let x_799 : vec4<f32> = u_xlat1;
  u_xlat21 = dot(x_798, x_799);
  let x_801 : vec4<f32> = u_xlat6;
  let x_804 : vec4<f32> = vs_TEXCOORD5;
  let x_806 : vec3<f32> = (vec3<f32>(x_801.y, x_801.y, x_801.y) * vec3<f32>(x_804.x, x_804.y, x_804.z));
  let x_807 : vec4<f32> = u_xlat1;
  u_xlat1 = vec4<f32>(x_806.x, x_806.y, x_806.z, x_807.w);
  let x_809 : vec4<f32> = u_xlat6;
  let x_812 : vec4<f32> = vs_TEXCOORD4;
  let x_816 : vec4<f32> = u_xlat1;
  let x_818 : vec3<f32> = ((vec3<f32>(x_809.x, x_809.x, x_809.x) * -(vec3<f32>(x_812.x, x_812.y, x_812.z))) + vec3<f32>(x_816.x, x_816.y, x_816.z));
  let x_819 : vec4<f32> = u_xlat1;
  u_xlat1 = vec4<f32>(x_818.x, x_818.y, x_818.z, x_819.w);
  let x_821 : vec4<f32> = u_xlat6;
  let x_824 : vec4<f32> = vs_TEXCOORD3;
  let x_827 : vec4<f32> = u_xlat1;
  let x_829 : vec3<f32> = ((vec3<f32>(x_821.z, x_821.z, x_821.z) * vec3<f32>(x_824.x, x_824.y, x_824.z)) + vec3<f32>(x_827.x, x_827.y, x_827.z));
  let x_830 : vec4<f32> = u_xlat1;
  u_xlat1 = vec4<f32>(x_829.x, x_829.y, x_829.z, x_830.w);
  let x_832 : vec4<f32> = u_xlat1;
  let x_834 : vec4<f32> = u_xlat1;
  u_xlat64 = dot(vec3<f32>(x_832.x, x_832.y, x_832.z), vec3<f32>(x_834.x, x_834.y, x_834.z));
  let x_837 : f32 = u_xlat64;
  u_xlat64 = inverseSqrt(x_837);
  let x_839 : f32 = u_xlat64;
  let x_841 : vec4<f32> = u_xlat1;
  let x_843 : vec3<f32> = (vec3<f32>(x_839, x_839, x_839) * vec3<f32>(x_841.x, x_841.y, x_841.z));
  let x_844 : vec4<f32> = u_xlat1;
  u_xlat1 = vec4<f32>(x_843.x, x_843.y, x_843.z, x_844.w);
  let x_848 : vec3<f32> = vs_TEXCOORD7;
  let x_856 : vec4<f32> = x_854.x_CascadeShadowSplitSpheres0;
  let x_859 : vec3<f32> = (x_848 + -(vec3<f32>(x_856.x, x_856.y, x_856.z)));
  let x_860 : vec4<f32> = u_xlat2;
  u_xlat2 = vec4<f32>(x_859.x, x_859.y, x_859.z, x_860.w);
  let x_862 : vec3<f32> = vs_TEXCOORD7;
  let x_864 : vec4<f32> = x_854.x_CascadeShadowSplitSpheres1;
  let x_867 : vec3<f32> = (x_862 + -(vec3<f32>(x_864.x, x_864.y, x_864.z)));
  let x_868 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_867.x, x_867.y, x_867.z, x_868.w);
  let x_870 : vec3<f32> = vs_TEXCOORD7;
  let x_872 : vec4<f32> = x_854.x_CascadeShadowSplitSpheres2;
  let x_875 : vec3<f32> = (x_870 + -(vec3<f32>(x_872.x, x_872.y, x_872.z)));
  let x_876 : vec4<f32> = u_xlat4;
  u_xlat4 = vec4<f32>(x_875.x, x_875.y, x_875.z, x_876.w);
  let x_878 : vec3<f32> = vs_TEXCOORD7;
  let x_880 : vec4<f32> = x_854.x_CascadeShadowSplitSpheres3;
  let x_883 : vec3<f32> = (x_878 + -(vec3<f32>(x_880.x, x_880.y, x_880.z)));
  let x_884 : vec4<f32> = u_xlat6;
  u_xlat6 = vec4<f32>(x_883.x, x_883.y, x_883.z, x_884.w);
  let x_886 : vec4<f32> = u_xlat2;
  let x_888 : vec4<f32> = u_xlat2;
  u_xlat2.x = dot(vec3<f32>(x_886.x, x_886.y, x_886.z), vec3<f32>(x_888.x, x_888.y, x_888.z));
  let x_892 : vec4<f32> = u_xlat3;
  let x_894 : vec4<f32> = u_xlat3;
  u_xlat2.y = dot(vec3<f32>(x_892.x, x_892.y, x_892.z), vec3<f32>(x_894.x, x_894.y, x_894.z));
  let x_898 : vec4<f32> = u_xlat4;
  let x_900 : vec4<f32> = u_xlat4;
  u_xlat2.z = dot(vec3<f32>(x_898.x, x_898.y, x_898.z), vec3<f32>(x_900.x, x_900.y, x_900.z));
  let x_904 : vec4<f32> = u_xlat6;
  let x_906 : vec4<f32> = u_xlat6;
  u_xlat2.w = dot(vec3<f32>(x_904.x, x_904.y, x_904.z), vec3<f32>(x_906.x, x_906.y, x_906.z));
  let x_912 : vec4<f32> = u_xlat2;
  let x_914 : vec4<f32> = x_854.x_CascadeShadowSplitSphereRadii;
  u_xlatb2 = (x_912 < x_914);
  let x_917 : bool = u_xlatb2.x;
  u_xlat3.x = select(0.0f, 1.0f, x_917);
  let x_921 : bool = u_xlatb2.y;
  u_xlat3.y = select(0.0f, 1.0f, x_921);
  let x_925 : bool = u_xlatb2.z;
  u_xlat3.z = select(0.0f, 1.0f, x_925);
  let x_929 : bool = u_xlatb2.w;
  u_xlat3.w = select(0.0f, 1.0f, x_929);
  let x_933 : bool = u_xlatb2.x;
  u_xlat2.x = select(-0.0f, -1.0f, x_933);
  let x_938 : bool = u_xlatb2.y;
  u_xlat2.y = select(-0.0f, -1.0f, x_938);
  let x_942 : bool = u_xlatb2.z;
  u_xlat2.z = select(-0.0f, -1.0f, x_942);
  let x_945 : vec4<f32> = u_xlat2;
  let x_947 : vec4<f32> = u_xlat3;
  let x_949 : vec3<f32> = (vec3<f32>(x_945.x, x_945.y, x_945.z) + vec3<f32>(x_947.y, x_947.z, x_947.w));
  let x_950 : vec4<f32> = u_xlat2;
  u_xlat2 = vec4<f32>(x_949.x, x_949.y, x_949.z, x_950.w);
  let x_952 : vec4<f32> = u_xlat2;
  let x_955 : vec3<f32> = max(vec3<f32>(x_952.x, x_952.y, x_952.z), vec3<f32>(0.0f, 0.0f, 0.0f));
  let x_956 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_956.x, x_955.x, x_955.y, x_955.z);
  let x_958 : vec4<f32> = u_xlat3;
  u_xlat64 = dot(x_958, vec4<f32>(4.0f, 3.0f, 2.0f, 1.0f));
  let x_962 : f32 = u_xlat64;
  u_xlat64 = (-(x_962) + 4.0f);
  let x_967 : f32 = u_xlat64;
  u_xlatu64 = u32(x_967);
  let x_971 : u32 = u_xlatu64;
  u_xlati64 = (bitcast<i32>(x_971) << bitcast<u32>(2i));
  let x_974 : vec3<f32> = vs_TEXCOORD7;
  let x_976 : i32 = u_xlati64;
  let x_979 : i32 = u_xlati64;
  let x_983 : vec4<f32> = x_854.x_MainLightWorldToShadow[((x_976 + 1i) / 4i)][((x_979 + 1i) % 4i)];
  let x_985 : vec3<f32> = (vec3<f32>(x_974.y, x_974.y, x_974.y) * vec3<f32>(x_983.x, x_983.y, x_983.z));
  let x_986 : vec4<f32> = u_xlat2;
  u_xlat2 = vec4<f32>(x_985.x, x_985.y, x_985.z, x_986.w);
  let x_988 : i32 = u_xlati64;
  let x_990 : i32 = u_xlati64;
  let x_993 : vec4<f32> = x_854.x_MainLightWorldToShadow[(x_988 / 4i)][(x_990 % 4i)];
  let x_995 : vec3<f32> = vs_TEXCOORD7;
  let x_998 : vec4<f32> = u_xlat2;
  let x_1000 : vec3<f32> = ((vec3<f32>(x_993.x, x_993.y, x_993.z) * vec3<f32>(x_995.x, x_995.x, x_995.x)) + vec3<f32>(x_998.x, x_998.y, x_998.z));
  let x_1001 : vec4<f32> = u_xlat2;
  u_xlat2 = vec4<f32>(x_1000.x, x_1000.y, x_1000.z, x_1001.w);
  let x_1003 : i32 = u_xlati64;
  let x_1006 : i32 = u_xlati64;
  let x_1010 : vec4<f32> = x_854.x_MainLightWorldToShadow[((x_1003 + 2i) / 4i)][((x_1006 + 2i) % 4i)];
  let x_1012 : vec3<f32> = vs_TEXCOORD7;
  let x_1015 : vec4<f32> = u_xlat2;
  let x_1017 : vec3<f32> = ((vec3<f32>(x_1010.x, x_1010.y, x_1010.z) * vec3<f32>(x_1012.z, x_1012.z, x_1012.z)) + vec3<f32>(x_1015.x, x_1015.y, x_1015.z));
  let x_1018 : vec4<f32> = u_xlat2;
  u_xlat2 = vec4<f32>(x_1017.x, x_1017.y, x_1017.z, x_1018.w);
  let x_1020 : vec4<f32> = u_xlat2;
  let x_1022 : i32 = u_xlati64;
  let x_1025 : i32 = u_xlati64;
  let x_1029 : vec4<f32> = x_854.x_MainLightWorldToShadow[((x_1022 + 3i) / 4i)][((x_1025 + 3i) % 4i)];
  let x_1031 : vec3<f32> = (vec3<f32>(x_1020.x, x_1020.y, x_1020.z) + vec3<f32>(x_1029.x, x_1029.y, x_1029.z));
  let x_1032 : vec4<f32> = u_xlat2;
  u_xlat2 = vec4<f32>(x_1031.x, x_1031.y, x_1031.z, x_1032.w);
  let x_1039 : vec4<f32> = vs_TEXCOORD0;
  let x_1042 : f32 = x_127.x_GlobalMipBias.x;
  let x_1043 : vec4<f32> = textureSampleBias(unity_LightmapInd, samplerunity_Lightmap, vec2<f32>(x_1039.z, x_1039.w), x_1042);
  u_xlat3 = x_1043;
  let x_1048 : vec4<f32> = vs_TEXCOORD0;
  let x_1051 : f32 = x_127.x_GlobalMipBias.x;
  let x_1052 : vec4<f32> = textureSampleBias(unity_Lightmap, samplerunity_Lightmap, vec2<f32>(x_1048.z, x_1048.w), x_1051);
  let x_1053 : vec3<f32> = vec3<f32>(x_1052.x, x_1052.y, x_1052.z);
  let x_1054 : vec4<f32> = u_xlat4;
  u_xlat4 = vec4<f32>(x_1053.x, x_1053.y, x_1053.z, x_1054.w);
  let x_1056 : vec4<f32> = u_xlat3;
  let x_1060 : vec3<f32> = (vec3<f32>(x_1056.x, x_1056.y, x_1056.z) + vec3<f32>(-0.5f, -0.5f, -0.5f));
  let x_1061 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_1060.x, x_1060.y, x_1060.z, x_1061.w);
  let x_1063 : vec4<f32> = u_xlat1;
  let x_1065 : vec4<f32> = u_xlat3;
  u_xlat64 = dot(vec3<f32>(x_1063.x, x_1063.y, x_1063.z), vec3<f32>(x_1065.x, x_1065.y, x_1065.z));
  let x_1068 : f32 = u_xlat64;
  u_xlat64 = (x_1068 + 0.5f);
  let x_1070 : f32 = u_xlat64;
  let x_1072 : vec4<f32> = u_xlat4;
  let x_1074 : vec3<f32> = (vec3<f32>(x_1070, x_1070, x_1070) * vec3<f32>(x_1072.x, x_1072.y, x_1072.z));
  let x_1075 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_1074.x, x_1074.y, x_1074.z, x_1075.w);
  let x_1078 : f32 = u_xlat3.w;
  u_xlat64 = max(x_1078, 0.0001f);
  let x_1081 : vec4<f32> = u_xlat3;
  let x_1083 : f32 = u_xlat64;
  let x_1085 : vec3<f32> = (vec3<f32>(x_1081.x, x_1081.y, x_1081.z) / vec3<f32>(x_1083, x_1083, x_1083));
  let x_1086 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_1085.x, x_1085.y, x_1085.z, x_1086.w);
  let x_1090 : vec4<f32> = x_127.x_ScaledScreenParams;
  let x_1091 : vec2<f32> = vec2<f32>(x_1090.x, x_1090.y);
  let x_1095 : vec2<f32> = (vec2<f32>(1.0f, 1.0f) / vec2<f32>(x_1091.x, x_1091.y));
  let x_1096 : vec4<f32> = u_xlat4;
  u_xlat4 = vec4<f32>(x_1095.x, x_1095.y, x_1096.z, x_1096.w);
  let x_1098 : vec4<f32> = u_xlat4;
  let x_1100 : vec4<f32> = hlslcc_FragCoord;
  let x_1102 : vec2<f32> = (vec2<f32>(x_1098.x, x_1098.y) * vec2<f32>(x_1100.x, x_1100.y));
  let x_1103 : vec4<f32> = u_xlat4;
  u_xlat4 = vec4<f32>(x_1102.x, x_1102.y, x_1103.z, x_1103.w);
  let x_1106 : f32 = u_xlat4.y;
  let x_1108 : f32 = x_127.x_ScaleBiasRt.x;
  let x_1111 : f32 = x_127.x_ScaleBiasRt.y;
  u_xlat64 = ((x_1106 * x_1108) + x_1111);
  let x_1113 : f32 = u_xlat64;
  u_xlat4.z = (-(x_1113) + 1.0f);
  let x_1118 : f32 = u_xlat0.x;
  u_xlat64 = ((-(x_1118) * 0.959999979f) + 0.959999979f);
  let x_1124 : f32 = u_xlat42;
  let x_1125 : f32 = u_xlat64;
  u_xlat65 = (x_1124 + -(x_1125));
  let x_1128 : f32 = u_xlat64;
  let x_1130 : vec4<f32> = u_xlat5;
  let x_1132 : vec3<f32> = (vec3<f32>(x_1128, x_1128, x_1128) * vec3<f32>(x_1130.x, x_1130.y, x_1130.z));
  let x_1133 : vec4<f32> = u_xlat6;
  u_xlat6 = vec4<f32>(x_1132.x, x_1132.y, x_1132.z, x_1133.w);
  let x_1135 : vec4<f32> = u_xlat5;
  let x_1139 : vec3<f32> = (vec3<f32>(x_1135.x, x_1135.y, x_1135.z) + vec3<f32>(-0.039999999f, -0.039999999f, -0.039999999f));
  let x_1140 : vec4<f32> = u_xlat5;
  u_xlat5 = vec4<f32>(x_1139.x, x_1139.y, x_1139.z, x_1140.w);
  let x_1142 : vec3<f32> = u_xlat0;
  let x_1144 : vec4<f32> = u_xlat5;
  let x_1149 : vec3<f32> = ((vec3<f32>(x_1142.x, x_1142.x, x_1142.x) * vec3<f32>(x_1144.x, x_1144.y, x_1144.z)) + vec3<f32>(0.039999999f, 0.039999999f, 0.039999999f));
  let x_1150 : vec4<f32> = u_xlat5;
  u_xlat5 = vec4<f32>(x_1149.x, x_1149.y, x_1149.z, x_1150.w);
  let x_1152 : f32 = u_xlat42;
  u_xlat0.x = (-(x_1152) + 1.0f);
  let x_1157 : f32 = u_xlat0.x;
  let x_1159 : f32 = u_xlat0.x;
  u_xlat42 = (x_1157 * x_1159);
  let x_1161 : f32 = u_xlat42;
  u_xlat42 = max(x_1161, 0.0078125f);
  let x_1164 : f32 = u_xlat42;
  let x_1165 : f32 = u_xlat42;
  u_xlat64 = (x_1164 * x_1165);
  let x_1167 : f32 = u_xlat65;
  u_xlat65 = (x_1167 + 1.0f);
  let x_1169 : f32 = u_xlat65;
  u_xlat65 = clamp(x_1169, 0.0f, 1.0f);
  let x_1172 : f32 = u_xlat42;
  u_xlat66 = ((x_1172 * 4.0f) + 2.0f);
  let x_1180 : vec4<f32> = u_xlat4;
  let x_1183 : f32 = x_127.x_GlobalMipBias.x;
  let x_1184 : vec4<f32> = textureSampleBias(x_ScreenSpaceOcclusionTexture, sampler_ScreenSpaceOcclusionTexture, vec2<f32>(x_1180.x, x_1180.z), x_1183);
  u_xlat4.x = x_1184.x;
  let x_1189 : f32 = u_xlat4.x;
  u_xlat25 = (x_1189 + -1.0f);
  let x_1192 : f32 = x_127.x_AmbientOcclusionParam.w;
  let x_1193 : f32 = u_xlat25;
  u_xlat25 = ((x_1192 * x_1193) + 1.0f);
  let x_1196 : f32 = u_xlat21;
  let x_1198 : f32 = u_xlat4.x;
  u_xlat21 = min(x_1196, x_1198);
  let x_1202 : f32 = x_854.x_MainLightShadowParams.y;
  u_xlatb4 = (0.0f < x_1202);
  let x_1204 : bool = u_xlatb4;
  if (x_1204) {
    let x_1208 : f32 = x_854.x_MainLightShadowParams.y;
    u_xlatb4 = (x_1208 == 1.0f);
    let x_1210 : bool = u_xlatb4;
    if (x_1210) {
      let x_1213 : vec4<f32> = u_xlat2;
      let x_1216 : vec4<f32> = x_854.x_MainLightShadowOffset0;
      u_xlat7 = (vec4<f32>(x_1213.x, x_1213.y, x_1213.x, x_1213.y) + x_1216);
      let x_1219 : vec4<f32> = u_xlat7;
      let x_1220 : vec2<f32> = vec2<f32>(x_1219.x, x_1219.y);
      let x_1222 : f32 = u_xlat2.z;
      txVec0 = vec3<f32>(x_1220.x, x_1220.y, x_1222);
      let x_1234 : vec3<f32> = txVec0;
      let x_1236 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1234.xy, x_1234.z);
      u_xlat8.x = x_1236;
      let x_1239 : vec4<f32> = u_xlat7;
      let x_1240 : vec2<f32> = vec2<f32>(x_1239.z, x_1239.w);
      let x_1242 : f32 = u_xlat2.z;
      txVec1 = vec3<f32>(x_1240.x, x_1240.y, x_1242);
      let x_1249 : vec3<f32> = txVec1;
      let x_1251 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1249.xy, x_1249.z);
      u_xlat8.y = x_1251;
      let x_1253 : vec4<f32> = u_xlat2;
      let x_1256 : vec4<f32> = x_854.x_MainLightShadowOffset1;
      u_xlat7 = (vec4<f32>(x_1253.x, x_1253.y, x_1253.x, x_1253.y) + x_1256);
      let x_1259 : vec4<f32> = u_xlat7;
      let x_1260 : vec2<f32> = vec2<f32>(x_1259.x, x_1259.y);
      let x_1262 : f32 = u_xlat2.z;
      txVec2 = vec3<f32>(x_1260.x, x_1260.y, x_1262);
      let x_1269 : vec3<f32> = txVec2;
      let x_1271 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1269.xy, x_1269.z);
      u_xlat8.z = x_1271;
      let x_1274 : vec4<f32> = u_xlat7;
      let x_1275 : vec2<f32> = vec2<f32>(x_1274.z, x_1274.w);
      let x_1277 : f32 = u_xlat2.z;
      txVec3 = vec3<f32>(x_1275.x, x_1275.y, x_1277);
      let x_1284 : vec3<f32> = txVec3;
      let x_1286 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1284.xy, x_1284.z);
      u_xlat8.w = x_1286;
      let x_1288 : vec4<f32> = u_xlat8;
      u_xlat4.x = dot(x_1288, vec4<f32>(0.25f, 0.25f, 0.25f, 0.25f));
    } else {
      let x_1296 : f32 = x_854.x_MainLightShadowParams.y;
      u_xlatb46 = (x_1296 == 2.0f);
      let x_1298 : bool = u_xlatb46;
      if (x_1298) {
        let x_1303 : vec4<f32> = u_xlat2;
        let x_1306 : vec4<f32> = x_854.x_MainLightShadowmapSize;
        u_xlat46 = ((vec2<f32>(x_1303.x, x_1303.y) * vec2<f32>(x_1306.z, x_1306.w)) + vec2<f32>(0.5f, 0.5f));
        let x_1310 : vec2<f32> = u_xlat46;
        u_xlat46 = floor(x_1310);
        let x_1312 : vec4<f32> = u_xlat2;
        let x_1315 : vec4<f32> = x_854.x_MainLightShadowmapSize;
        let x_1318 : vec2<f32> = u_xlat46;
        let x_1320 : vec2<f32> = ((vec2<f32>(x_1312.x, x_1312.y) * vec2<f32>(x_1315.z, x_1315.w)) + -(x_1318));
        let x_1321 : vec4<f32> = u_xlat7;
        u_xlat7 = vec4<f32>(x_1320.x, x_1320.y, x_1321.z, x_1321.w);
        let x_1323 : vec4<f32> = u_xlat7;
        u_xlat8 = (vec4<f32>(x_1323.x, x_1323.x, x_1323.y, x_1323.y) + vec4<f32>(0.5f, 1.0f, 0.5f, 1.0f));
        let x_1327 : vec4<f32> = u_xlat8;
        let x_1329 : vec4<f32> = u_xlat8;
        u_xlat9 = (vec4<f32>(x_1327.x, x_1327.x, x_1327.z, x_1327.z) * vec4<f32>(x_1329.x, x_1329.x, x_1329.z, x_1329.z));
        let x_1333 : vec4<f32> = u_xlat9;
        u_xlat49 = (vec2<f32>(x_1333.y, x_1333.w) * vec2<f32>(0.079999998f, 0.079999998f));
        let x_1338 : vec4<f32> = u_xlat9;
        let x_1341 : vec4<f32> = u_xlat7;
        let x_1344 : vec2<f32> = ((vec2<f32>(x_1338.x, x_1338.z) * vec2<f32>(0.5f, 0.5f)) + -(vec2<f32>(x_1341.x, x_1341.y)));
        let x_1345 : vec4<f32> = u_xlat8;
        u_xlat8 = vec4<f32>(x_1344.x, x_1345.y, x_1344.y, x_1345.w);
        let x_1347 : vec4<f32> = u_xlat7;
        let x_1350 : vec2<f32> = (-(vec2<f32>(x_1347.x, x_1347.y)) + vec2<f32>(1.0f, 1.0f));
        let x_1351 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_1350.x, x_1350.y, x_1351.z, x_1351.w);
        let x_1354 : vec4<f32> = u_xlat7;
        u_xlat51 = min(vec2<f32>(x_1354.x, x_1354.y), vec2<f32>(0.0f, 0.0f));
        let x_1358 : vec2<f32> = u_xlat51;
        let x_1360 : vec2<f32> = u_xlat51;
        let x_1362 : vec4<f32> = u_xlat9;
        u_xlat51 = ((-(x_1358) * x_1360) + vec2<f32>(x_1362.x, x_1362.y));
        let x_1365 : vec4<f32> = u_xlat7;
        let x_1367 : vec2<f32> = max(vec2<f32>(x_1365.x, x_1365.y), vec2<f32>(0.0f, 0.0f));
        let x_1368 : vec4<f32> = u_xlat7;
        u_xlat7 = vec4<f32>(x_1367.x, x_1367.y, x_1368.z, x_1368.w);
        let x_1370 : vec4<f32> = u_xlat7;
        let x_1373 : vec4<f32> = u_xlat7;
        let x_1376 : vec4<f32> = u_xlat8;
        let x_1378 : vec2<f32> = ((-(vec2<f32>(x_1370.x, x_1370.y)) * vec2<f32>(x_1373.x, x_1373.y)) + vec2<f32>(x_1376.y, x_1376.w));
        let x_1379 : vec4<f32> = u_xlat7;
        u_xlat7 = vec4<f32>(x_1378.x, x_1378.y, x_1379.z, x_1379.w);
        let x_1381 : vec2<f32> = u_xlat51;
        u_xlat51 = (x_1381 + vec2<f32>(1.0f, 1.0f));
        let x_1383 : vec4<f32> = u_xlat7;
        let x_1385 : vec2<f32> = (vec2<f32>(x_1383.x, x_1383.y) + vec2<f32>(1.0f, 1.0f));
        let x_1386 : vec4<f32> = u_xlat7;
        u_xlat7 = vec4<f32>(x_1385.x, x_1385.y, x_1386.z, x_1386.w);
        let x_1388 : vec4<f32> = u_xlat8;
        let x_1392 : vec2<f32> = (vec2<f32>(x_1388.x, x_1388.z) * vec2<f32>(0.159999996f, 0.159999996f));
        let x_1393 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_1392.x, x_1392.y, x_1393.z, x_1393.w);
        let x_1395 : vec4<f32> = u_xlat9;
        let x_1397 : vec2<f32> = (vec2<f32>(x_1395.x, x_1395.y) * vec2<f32>(0.159999996f, 0.159999996f));
        let x_1398 : vec4<f32> = u_xlat11;
        u_xlat11 = vec4<f32>(x_1397.x, x_1397.y, x_1398.z, x_1398.w);
        let x_1400 : vec2<f32> = u_xlat51;
        let x_1401 : vec2<f32> = (x_1400 * vec2<f32>(0.159999996f, 0.159999996f));
        let x_1402 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_1401.x, x_1401.y, x_1402.z, x_1402.w);
        let x_1404 : vec4<f32> = u_xlat7;
        let x_1406 : vec2<f32> = (vec2<f32>(x_1404.x, x_1404.y) * vec2<f32>(0.159999996f, 0.159999996f));
        let x_1407 : vec4<f32> = u_xlat12;
        u_xlat12 = vec4<f32>(x_1406.x, x_1406.y, x_1407.z, x_1407.w);
        let x_1409 : vec4<f32> = u_xlat8;
        let x_1411 : vec2<f32> = (vec2<f32>(x_1409.y, x_1409.w) * vec2<f32>(0.159999996f, 0.159999996f));
        let x_1412 : vec4<f32> = u_xlat7;
        u_xlat7 = vec4<f32>(x_1411.x, x_1411.y, x_1412.z, x_1412.w);
        let x_1415 : f32 = u_xlat9.x;
        u_xlat10.z = x_1415;
        let x_1418 : f32 = u_xlat7.x;
        u_xlat10.w = x_1418;
        let x_1421 : f32 = u_xlat12.x;
        u_xlat11.z = x_1421;
        let x_1424 : f32 = u_xlat49.x;
        u_xlat11.w = x_1424;
        let x_1426 : vec4<f32> = u_xlat10;
        let x_1428 : vec4<f32> = u_xlat11;
        u_xlat8 = (vec4<f32>(x_1426.z, x_1426.w, x_1426.x, x_1426.z) + vec4<f32>(x_1428.z, x_1428.w, x_1428.x, x_1428.z));
        let x_1432 : f32 = u_xlat10.y;
        u_xlat9.z = x_1432;
        let x_1435 : f32 = u_xlat7.y;
        u_xlat9.w = x_1435;
        let x_1438 : f32 = u_xlat11.y;
        u_xlat12.z = x_1438;
        let x_1441 : f32 = u_xlat49.y;
        u_xlat12.w = x_1441;
        let x_1443 : vec4<f32> = u_xlat9;
        let x_1445 : vec4<f32> = u_xlat12;
        let x_1447 : vec3<f32> = (vec3<f32>(x_1443.z, x_1443.y, x_1443.w) + vec3<f32>(x_1445.z, x_1445.y, x_1445.w));
        let x_1448 : vec4<f32> = u_xlat7;
        u_xlat7 = vec4<f32>(x_1447.x, x_1447.y, x_1447.z, x_1448.w);
        let x_1450 : vec4<f32> = u_xlat11;
        let x_1452 : vec4<f32> = u_xlat8;
        let x_1454 : vec3<f32> = (vec3<f32>(x_1450.x, x_1450.z, x_1450.w) / vec3<f32>(x_1452.z, x_1452.w, x_1452.y));
        let x_1455 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_1454.x, x_1454.y, x_1454.z, x_1455.w);
        let x_1457 : vec4<f32> = u_xlat9;
        let x_1462 : vec3<f32> = (vec3<f32>(x_1457.x, x_1457.y, x_1457.z) + vec3<f32>(-2.5f, -0.5f, 1.5f));
        let x_1463 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_1462.x, x_1462.y, x_1462.z, x_1463.w);
        let x_1465 : vec4<f32> = u_xlat12;
        let x_1467 : vec4<f32> = u_xlat7;
        let x_1469 : vec3<f32> = (vec3<f32>(x_1465.z, x_1465.y, x_1465.w) / vec3<f32>(x_1467.x, x_1467.y, x_1467.z));
        let x_1470 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_1469.x, x_1469.y, x_1469.z, x_1470.w);
        let x_1472 : vec4<f32> = u_xlat10;
        let x_1474 : vec3<f32> = (vec3<f32>(x_1472.x, x_1472.y, x_1472.z) + vec3<f32>(-2.5f, -0.5f, 1.5f));
        let x_1475 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_1474.x, x_1474.y, x_1474.z, x_1475.w);
        let x_1477 : vec4<f32> = u_xlat9;
        let x_1480 : vec4<f32> = x_854.x_MainLightShadowmapSize;
        let x_1482 : vec3<f32> = (vec3<f32>(x_1477.y, x_1477.x, x_1477.z) * vec3<f32>(x_1480.x, x_1480.x, x_1480.x));
        let x_1483 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_1482.x, x_1482.y, x_1482.z, x_1483.w);
        let x_1485 : vec4<f32> = u_xlat10;
        let x_1488 : vec4<f32> = x_854.x_MainLightShadowmapSize;
        let x_1490 : vec3<f32> = (vec3<f32>(x_1485.x, x_1485.y, x_1485.z) * vec3<f32>(x_1488.y, x_1488.y, x_1488.y));
        let x_1491 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_1490.x, x_1490.y, x_1490.z, x_1491.w);
        let x_1494 : f32 = u_xlat10.x;
        u_xlat9.w = x_1494;
        let x_1496 : vec2<f32> = u_xlat46;
        let x_1499 : vec4<f32> = x_854.x_MainLightShadowmapSize;
        let x_1502 : vec4<f32> = u_xlat9;
        u_xlat11 = ((vec4<f32>(x_1496.x, x_1496.y, x_1496.x, x_1496.y) * vec4<f32>(x_1499.x, x_1499.y, x_1499.x, x_1499.y)) + vec4<f32>(x_1502.y, x_1502.w, x_1502.x, x_1502.w));
        let x_1505 : vec2<f32> = u_xlat46;
        let x_1507 : vec4<f32> = x_854.x_MainLightShadowmapSize;
        let x_1510 : vec4<f32> = u_xlat9;
        let x_1512 : vec2<f32> = ((x_1505 * vec2<f32>(x_1507.x, x_1507.y)) + vec2<f32>(x_1510.z, x_1510.w));
        let x_1513 : vec4<f32> = u_xlat12;
        u_xlat12 = vec4<f32>(x_1512.x, x_1512.y, x_1513.z, x_1513.w);
        let x_1516 : f32 = u_xlat9.y;
        u_xlat10.w = x_1516;
        let x_1518 : vec4<f32> = u_xlat10;
        let x_1519 : vec2<f32> = vec2<f32>(x_1518.y, x_1518.z);
        let x_1520 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_1520.x, x_1519.x, x_1520.z, x_1519.y);
        let x_1522 : vec2<f32> = u_xlat46;
        let x_1525 : vec4<f32> = x_854.x_MainLightShadowmapSize;
        let x_1528 : vec4<f32> = u_xlat9;
        u_xlat13 = ((vec4<f32>(x_1522.x, x_1522.y, x_1522.x, x_1522.y) * vec4<f32>(x_1525.x, x_1525.y, x_1525.x, x_1525.y)) + vec4<f32>(x_1528.x, x_1528.y, x_1528.z, x_1528.y));
        let x_1531 : vec2<f32> = u_xlat46;
        let x_1534 : vec4<f32> = x_854.x_MainLightShadowmapSize;
        let x_1537 : vec4<f32> = u_xlat10;
        u_xlat10 = ((vec4<f32>(x_1531.x, x_1531.y, x_1531.x, x_1531.y) * vec4<f32>(x_1534.x, x_1534.y, x_1534.x, x_1534.y)) + vec4<f32>(x_1537.w, x_1537.y, x_1537.w, x_1537.z));
        let x_1540 : vec2<f32> = u_xlat46;
        let x_1543 : vec4<f32> = x_854.x_MainLightShadowmapSize;
        let x_1546 : vec4<f32> = u_xlat9;
        u_xlat9 = ((vec4<f32>(x_1540.x, x_1540.y, x_1540.x, x_1540.y) * vec4<f32>(x_1543.x, x_1543.y, x_1543.x, x_1543.y)) + vec4<f32>(x_1546.x, x_1546.w, x_1546.z, x_1546.w));
        let x_1550 : vec4<f32> = u_xlat7;
        let x_1552 : vec4<f32> = u_xlat8;
        u_xlat14 = (vec4<f32>(x_1550.x, x_1550.x, x_1550.x, x_1550.y) * vec4<f32>(x_1552.z, x_1552.w, x_1552.y, x_1552.z));
        let x_1556 : vec4<f32> = u_xlat7;
        let x_1558 : vec4<f32> = u_xlat8;
        u_xlat15 = (vec4<f32>(x_1556.y, x_1556.y, x_1556.z, x_1556.z) * x_1558);
        let x_1561 : f32 = u_xlat7.z;
        let x_1563 : f32 = u_xlat8.y;
        u_xlat46.x = (x_1561 * x_1563);
        let x_1567 : vec4<f32> = u_xlat11;
        let x_1568 : vec2<f32> = vec2<f32>(x_1567.x, x_1567.y);
        let x_1570 : f32 = u_xlat2.z;
        txVec4 = vec3<f32>(x_1568.x, x_1568.y, x_1570);
        let x_1578 : vec3<f32> = txVec4;
        let x_1580 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1578.xy, x_1578.z);
        u_xlat67 = x_1580;
        let x_1582 : vec4<f32> = u_xlat11;
        let x_1583 : vec2<f32> = vec2<f32>(x_1582.z, x_1582.w);
        let x_1585 : f32 = u_xlat2.z;
        txVec5 = vec3<f32>(x_1583.x, x_1583.y, x_1585);
        let x_1593 : vec3<f32> = txVec5;
        let x_1595 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1593.xy, x_1593.z);
        u_xlat68 = x_1595;
        let x_1596 : f32 = u_xlat68;
        let x_1598 : f32 = u_xlat14.y;
        u_xlat68 = (x_1596 * x_1598);
        let x_1601 : f32 = u_xlat14.x;
        let x_1602 : f32 = u_xlat67;
        let x_1604 : f32 = u_xlat68;
        u_xlat67 = ((x_1601 * x_1602) + x_1604);
        let x_1607 : vec4<f32> = u_xlat12;
        let x_1608 : vec2<f32> = vec2<f32>(x_1607.x, x_1607.y);
        let x_1610 : f32 = u_xlat2.z;
        txVec6 = vec3<f32>(x_1608.x, x_1608.y, x_1610);
        let x_1617 : vec3<f32> = txVec6;
        let x_1619 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1617.xy, x_1617.z);
        u_xlat68 = x_1619;
        let x_1621 : f32 = u_xlat14.z;
        let x_1622 : f32 = u_xlat68;
        let x_1624 : f32 = u_xlat67;
        u_xlat67 = ((x_1621 * x_1622) + x_1624);
        let x_1627 : vec4<f32> = u_xlat10;
        let x_1628 : vec2<f32> = vec2<f32>(x_1627.x, x_1627.y);
        let x_1630 : f32 = u_xlat2.z;
        txVec7 = vec3<f32>(x_1628.x, x_1628.y, x_1630);
        let x_1637 : vec3<f32> = txVec7;
        let x_1639 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1637.xy, x_1637.z);
        u_xlat68 = x_1639;
        let x_1641 : f32 = u_xlat14.w;
        let x_1642 : f32 = u_xlat68;
        let x_1644 : f32 = u_xlat67;
        u_xlat67 = ((x_1641 * x_1642) + x_1644);
        let x_1647 : vec4<f32> = u_xlat13;
        let x_1648 : vec2<f32> = vec2<f32>(x_1647.x, x_1647.y);
        let x_1650 : f32 = u_xlat2.z;
        txVec8 = vec3<f32>(x_1648.x, x_1648.y, x_1650);
        let x_1657 : vec3<f32> = txVec8;
        let x_1659 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1657.xy, x_1657.z);
        u_xlat68 = x_1659;
        let x_1661 : f32 = u_xlat15.x;
        let x_1662 : f32 = u_xlat68;
        let x_1664 : f32 = u_xlat67;
        u_xlat67 = ((x_1661 * x_1662) + x_1664);
        let x_1667 : vec4<f32> = u_xlat13;
        let x_1668 : vec2<f32> = vec2<f32>(x_1667.z, x_1667.w);
        let x_1670 : f32 = u_xlat2.z;
        txVec9 = vec3<f32>(x_1668.x, x_1668.y, x_1670);
        let x_1677 : vec3<f32> = txVec9;
        let x_1679 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1677.xy, x_1677.z);
        u_xlat68 = x_1679;
        let x_1681 : f32 = u_xlat15.y;
        let x_1682 : f32 = u_xlat68;
        let x_1684 : f32 = u_xlat67;
        u_xlat67 = ((x_1681 * x_1682) + x_1684);
        let x_1687 : vec4<f32> = u_xlat10;
        let x_1688 : vec2<f32> = vec2<f32>(x_1687.z, x_1687.w);
        let x_1690 : f32 = u_xlat2.z;
        txVec10 = vec3<f32>(x_1688.x, x_1688.y, x_1690);
        let x_1697 : vec3<f32> = txVec10;
        let x_1699 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1697.xy, x_1697.z);
        u_xlat68 = x_1699;
        let x_1701 : f32 = u_xlat15.z;
        let x_1702 : f32 = u_xlat68;
        let x_1704 : f32 = u_xlat67;
        u_xlat67 = ((x_1701 * x_1702) + x_1704);
        let x_1707 : vec4<f32> = u_xlat9;
        let x_1708 : vec2<f32> = vec2<f32>(x_1707.x, x_1707.y);
        let x_1710 : f32 = u_xlat2.z;
        txVec11 = vec3<f32>(x_1708.x, x_1708.y, x_1710);
        let x_1717 : vec3<f32> = txVec11;
        let x_1719 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1717.xy, x_1717.z);
        u_xlat68 = x_1719;
        let x_1721 : f32 = u_xlat15.w;
        let x_1722 : f32 = u_xlat68;
        let x_1724 : f32 = u_xlat67;
        u_xlat67 = ((x_1721 * x_1722) + x_1724);
        let x_1727 : vec4<f32> = u_xlat9;
        let x_1728 : vec2<f32> = vec2<f32>(x_1727.z, x_1727.w);
        let x_1730 : f32 = u_xlat2.z;
        txVec12 = vec3<f32>(x_1728.x, x_1728.y, x_1730);
        let x_1737 : vec3<f32> = txVec12;
        let x_1739 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1737.xy, x_1737.z);
        u_xlat68 = x_1739;
        let x_1741 : f32 = u_xlat46.x;
        let x_1742 : f32 = u_xlat68;
        let x_1744 : f32 = u_xlat67;
        u_xlat4.x = ((x_1741 * x_1742) + x_1744);
      } else {
        let x_1748 : vec4<f32> = u_xlat2;
        let x_1751 : vec4<f32> = x_854.x_MainLightShadowmapSize;
        u_xlat46 = ((vec2<f32>(x_1748.x, x_1748.y) * vec2<f32>(x_1751.z, x_1751.w)) + vec2<f32>(0.5f, 0.5f));
        let x_1755 : vec2<f32> = u_xlat46;
        u_xlat46 = floor(x_1755);
        let x_1757 : vec4<f32> = u_xlat2;
        let x_1760 : vec4<f32> = x_854.x_MainLightShadowmapSize;
        let x_1763 : vec2<f32> = u_xlat46;
        let x_1765 : vec2<f32> = ((vec2<f32>(x_1757.x, x_1757.y) * vec2<f32>(x_1760.z, x_1760.w)) + -(x_1763));
        let x_1766 : vec4<f32> = u_xlat7;
        u_xlat7 = vec4<f32>(x_1765.x, x_1765.y, x_1766.z, x_1766.w);
        let x_1768 : vec4<f32> = u_xlat7;
        u_xlat8 = (vec4<f32>(x_1768.x, x_1768.x, x_1768.y, x_1768.y) + vec4<f32>(0.5f, 1.0f, 0.5f, 1.0f));
        let x_1771 : vec4<f32> = u_xlat8;
        let x_1773 : vec4<f32> = u_xlat8;
        u_xlat9 = (vec4<f32>(x_1771.x, x_1771.x, x_1771.z, x_1771.z) * vec4<f32>(x_1773.x, x_1773.x, x_1773.z, x_1773.z));
        let x_1776 : vec4<f32> = u_xlat9;
        let x_1780 : vec2<f32> = (vec2<f32>(x_1776.y, x_1776.w) * vec2<f32>(0.040816002f, 0.040816002f));
        let x_1781 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_1781.x, x_1780.x, x_1781.z, x_1780.y);
        let x_1783 : vec4<f32> = u_xlat9;
        let x_1786 : vec4<f32> = u_xlat7;
        u_xlat49 = ((vec2<f32>(x_1783.x, x_1783.z) * vec2<f32>(0.5f, 0.5f)) + -(vec2<f32>(x_1786.x, x_1786.y)));
        let x_1790 : vec4<f32> = u_xlat7;
        let x_1793 : vec2<f32> = (-(vec2<f32>(x_1790.x, x_1790.y)) + vec2<f32>(1.0f, 1.0f));
        let x_1794 : vec4<f32> = u_xlat8;
        u_xlat8 = vec4<f32>(x_1793.x, x_1794.y, x_1793.y, x_1794.w);
        let x_1796 : vec4<f32> = u_xlat7;
        let x_1798 : vec2<f32> = min(vec2<f32>(x_1796.x, x_1796.y), vec2<f32>(0.0f, 0.0f));
        let x_1799 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_1798.x, x_1798.y, x_1799.z, x_1799.w);
        let x_1801 : vec4<f32> = u_xlat9;
        let x_1804 : vec4<f32> = u_xlat9;
        let x_1807 : vec4<f32> = u_xlat8;
        let x_1809 : vec2<f32> = ((-(vec2<f32>(x_1801.x, x_1801.y)) * vec2<f32>(x_1804.x, x_1804.y)) + vec2<f32>(x_1807.x, x_1807.z));
        let x_1810 : vec4<f32> = u_xlat8;
        u_xlat8 = vec4<f32>(x_1809.x, x_1810.y, x_1809.y, x_1810.w);
        let x_1812 : vec4<f32> = u_xlat7;
        let x_1814 : vec2<f32> = max(vec2<f32>(x_1812.x, x_1812.y), vec2<f32>(0.0f, 0.0f));
        let x_1815 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_1814.x, x_1814.y, x_1815.z, x_1815.w);
        let x_1817 : vec4<f32> = u_xlat9;
        let x_1820 : vec4<f32> = u_xlat9;
        let x_1823 : vec4<f32> = u_xlat8;
        let x_1825 : vec2<f32> = ((-(vec2<f32>(x_1817.x, x_1817.y)) * vec2<f32>(x_1820.x, x_1820.y)) + vec2<f32>(x_1823.y, x_1823.w));
        let x_1826 : vec4<f32> = u_xlat8;
        u_xlat8 = vec4<f32>(x_1826.x, x_1825.x, x_1826.z, x_1825.y);
        let x_1828 : vec4<f32> = u_xlat8;
        u_xlat8 = (x_1828 + vec4<f32>(2.0f, 2.0f, 2.0f, 2.0f));
        let x_1832 : f32 = u_xlat8.y;
        u_xlat9.z = (x_1832 * 0.081632003f);
        let x_1836 : vec2<f32> = u_xlat49;
        let x_1839 : vec2<f32> = (vec2<f32>(x_1836.y, x_1836.x) * vec2<f32>(0.081632003f, 0.081632003f));
        let x_1840 : vec4<f32> = u_xlat11;
        u_xlat11 = vec4<f32>(x_1839.x, x_1839.y, x_1840.z, x_1840.w);
        let x_1842 : vec4<f32> = u_xlat8;
        u_xlat49 = (vec2<f32>(x_1842.x, x_1842.z) * vec2<f32>(0.081632003f, 0.081632003f));
        let x_1846 : f32 = u_xlat8.w;
        u_xlat11.z = (x_1846 * 0.081632003f);
        let x_1850 : f32 = u_xlat11.y;
        u_xlat9.x = x_1850;
        let x_1852 : vec4<f32> = u_xlat7;
        let x_1859 : vec2<f32> = ((vec2<f32>(x_1852.x, x_1852.x) * vec2<f32>(-0.081632003f, 0.081632003f)) + vec2<f32>(0.163264006f, 0.081632003f));
        let x_1860 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_1860.x, x_1859.x, x_1860.z, x_1859.y);
        let x_1862 : vec4<f32> = u_xlat7;
        let x_1866 : vec2<f32> = ((vec2<f32>(x_1862.x, x_1862.x) * vec2<f32>(-0.081632003f, 0.081632003f)) + vec2<f32>(0.081632003f, 0.163264006f));
        let x_1867 : vec4<f32> = u_xlat8;
        u_xlat8 = vec4<f32>(x_1866.x, x_1867.y, x_1866.y, x_1867.w);
        let x_1870 : f32 = u_xlat49.x;
        u_xlat8.y = x_1870;
        let x_1873 : f32 = u_xlat10.y;
        u_xlat8.w = x_1873;
        let x_1875 : vec4<f32> = u_xlat8;
        let x_1876 : vec4<f32> = u_xlat9;
        u_xlat9 = (x_1875 + x_1876);
        let x_1878 : vec4<f32> = u_xlat7;
        let x_1881 : vec2<f32> = ((vec2<f32>(x_1878.y, x_1878.y) * vec2<f32>(-0.081632003f, 0.081632003f)) + vec2<f32>(0.163264006f, 0.081632003f));
        let x_1882 : vec4<f32> = u_xlat11;
        u_xlat11 = vec4<f32>(x_1882.x, x_1881.x, x_1882.z, x_1881.y);
        let x_1884 : vec4<f32> = u_xlat7;
        let x_1887 : vec2<f32> = ((vec2<f32>(x_1884.y, x_1884.y) * vec2<f32>(-0.081632003f, 0.081632003f)) + vec2<f32>(0.081632003f, 0.163264006f));
        let x_1888 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_1887.x, x_1888.y, x_1887.y, x_1888.w);
        let x_1891 : f32 = u_xlat49.y;
        u_xlat10.y = x_1891;
        let x_1893 : vec4<f32> = u_xlat10;
        let x_1894 : vec4<f32> = u_xlat11;
        u_xlat7 = (x_1893 + x_1894);
        let x_1896 : vec4<f32> = u_xlat8;
        let x_1897 : vec4<f32> = u_xlat9;
        u_xlat8 = (x_1896 / x_1897);
        let x_1899 : vec4<f32> = u_xlat8;
        u_xlat8 = (x_1899 + vec4<f32>(-3.5f, -1.5f, 0.5f, 2.5f));
        let x_1905 : vec4<f32> = u_xlat10;
        let x_1906 : vec4<f32> = u_xlat7;
        u_xlat10 = (x_1905 / x_1906);
        let x_1908 : vec4<f32> = u_xlat10;
        u_xlat10 = (x_1908 + vec4<f32>(-3.5f, -1.5f, 0.5f, 2.5f));
        let x_1910 : vec4<f32> = u_xlat8;
        let x_1913 : vec4<f32> = x_854.x_MainLightShadowmapSize;
        u_xlat8 = (vec4<f32>(x_1910.w, x_1910.x, x_1910.y, x_1910.z) * vec4<f32>(x_1913.x, x_1913.x, x_1913.x, x_1913.x));
        let x_1916 : vec4<f32> = u_xlat10;
        let x_1919 : vec4<f32> = x_854.x_MainLightShadowmapSize;
        u_xlat10 = (vec4<f32>(x_1916.x, x_1916.w, x_1916.y, x_1916.z) * vec4<f32>(x_1919.y, x_1919.y, x_1919.y, x_1919.y));
        let x_1922 : vec4<f32> = u_xlat8;
        let x_1923 : vec3<f32> = vec3<f32>(x_1922.y, x_1922.z, x_1922.w);
        let x_1924 : vec4<f32> = u_xlat11;
        u_xlat11 = vec4<f32>(x_1923.x, x_1924.y, x_1923.y, x_1923.z);
        let x_1927 : f32 = u_xlat10.x;
        u_xlat11.y = x_1927;
        let x_1929 : vec2<f32> = u_xlat46;
        let x_1932 : vec4<f32> = x_854.x_MainLightShadowmapSize;
        let x_1935 : vec4<f32> = u_xlat11;
        u_xlat12 = ((vec4<f32>(x_1929.x, x_1929.y, x_1929.x, x_1929.y) * vec4<f32>(x_1932.x, x_1932.y, x_1932.x, x_1932.y)) + vec4<f32>(x_1935.x, x_1935.y, x_1935.z, x_1935.y));
        let x_1938 : vec2<f32> = u_xlat46;
        let x_1940 : vec4<f32> = x_854.x_MainLightShadowmapSize;
        let x_1943 : vec4<f32> = u_xlat11;
        let x_1945 : vec2<f32> = ((x_1938 * vec2<f32>(x_1940.x, x_1940.y)) + vec2<f32>(x_1943.w, x_1943.y));
        let x_1946 : vec4<f32> = u_xlat13;
        u_xlat13 = vec4<f32>(x_1945.x, x_1945.y, x_1946.z, x_1946.w);
        let x_1949 : f32 = u_xlat11.y;
        u_xlat8.y = x_1949;
        let x_1952 : f32 = u_xlat10.z;
        u_xlat11.y = x_1952;
        let x_1954 : vec2<f32> = u_xlat46;
        let x_1957 : vec4<f32> = x_854.x_MainLightShadowmapSize;
        let x_1960 : vec4<f32> = u_xlat11;
        u_xlat14 = ((vec4<f32>(x_1954.x, x_1954.y, x_1954.x, x_1954.y) * vec4<f32>(x_1957.x, x_1957.y, x_1957.x, x_1957.y)) + vec4<f32>(x_1960.x, x_1960.y, x_1960.z, x_1960.y));
        let x_1964 : vec2<f32> = u_xlat46;
        let x_1966 : vec4<f32> = x_854.x_MainLightShadowmapSize;
        let x_1969 : vec4<f32> = u_xlat11;
        u_xlat55 = ((x_1964 * vec2<f32>(x_1966.x, x_1966.y)) + vec2<f32>(x_1969.w, x_1969.y));
        let x_1973 : f32 = u_xlat11.y;
        u_xlat8.z = x_1973;
        let x_1975 : vec2<f32> = u_xlat46;
        let x_1978 : vec4<f32> = x_854.x_MainLightShadowmapSize;
        let x_1981 : vec4<f32> = u_xlat8;
        u_xlat15 = ((vec4<f32>(x_1975.x, x_1975.y, x_1975.x, x_1975.y) * vec4<f32>(x_1978.x, x_1978.y, x_1978.x, x_1978.y)) + vec4<f32>(x_1981.x, x_1981.y, x_1981.x, x_1981.z));
        let x_1985 : f32 = u_xlat10.w;
        u_xlat11.y = x_1985;
        let x_1988 : vec2<f32> = u_xlat46;
        let x_1991 : vec4<f32> = x_854.x_MainLightShadowmapSize;
        let x_1994 : vec4<f32> = u_xlat11;
        u_xlat16 = ((vec4<f32>(x_1988.x, x_1988.y, x_1988.x, x_1988.y) * vec4<f32>(x_1991.x, x_1991.y, x_1991.x, x_1991.y)) + vec4<f32>(x_1994.x, x_1994.y, x_1994.z, x_1994.y));
        let x_1998 : vec2<f32> = u_xlat46;
        let x_2000 : vec4<f32> = x_854.x_MainLightShadowmapSize;
        let x_2003 : vec4<f32> = u_xlat11;
        u_xlat29 = ((x_1998 * vec2<f32>(x_2000.x, x_2000.y)) + vec2<f32>(x_2003.w, x_2003.y));
        let x_2007 : f32 = u_xlat11.y;
        u_xlat8.w = x_2007;
        let x_2010 : vec2<f32> = u_xlat46;
        let x_2012 : vec4<f32> = x_854.x_MainLightShadowmapSize;
        let x_2015 : vec4<f32> = u_xlat8;
        u_xlat17 = ((x_2010 * vec2<f32>(x_2012.x, x_2012.y)) + vec2<f32>(x_2015.x, x_2015.w));
        let x_2018 : vec4<f32> = u_xlat11;
        let x_2019 : vec3<f32> = vec3<f32>(x_2018.x, x_2018.z, x_2018.w);
        let x_2020 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_2019.x, x_2020.y, x_2019.y, x_2019.z);
        let x_2022 : vec2<f32> = u_xlat46;
        let x_2025 : vec4<f32> = x_854.x_MainLightShadowmapSize;
        let x_2028 : vec4<f32> = u_xlat10;
        u_xlat11 = ((vec4<f32>(x_2022.x, x_2022.y, x_2022.x, x_2022.y) * vec4<f32>(x_2025.x, x_2025.y, x_2025.x, x_2025.y)) + vec4<f32>(x_2028.x, x_2028.y, x_2028.z, x_2028.y));
        let x_2032 : vec2<f32> = u_xlat46;
        let x_2034 : vec4<f32> = x_854.x_MainLightShadowmapSize;
        let x_2037 : vec4<f32> = u_xlat10;
        u_xlat52 = ((x_2032 * vec2<f32>(x_2034.x, x_2034.y)) + vec2<f32>(x_2037.w, x_2037.y));
        let x_2041 : f32 = u_xlat8.x;
        u_xlat10.x = x_2041;
        let x_2043 : vec2<f32> = u_xlat46;
        let x_2045 : vec4<f32> = x_854.x_MainLightShadowmapSize;
        let x_2048 : vec4<f32> = u_xlat10;
        u_xlat46 = ((x_2043 * vec2<f32>(x_2045.x, x_2045.y)) + vec2<f32>(x_2048.x, x_2048.y));
        let x_2052 : vec4<f32> = u_xlat7;
        let x_2054 : vec4<f32> = u_xlat9;
        u_xlat18 = (vec4<f32>(x_2052.x, x_2052.x, x_2052.x, x_2052.x) * x_2054);
        let x_2057 : vec4<f32> = u_xlat7;
        let x_2059 : vec4<f32> = u_xlat9;
        u_xlat19 = (vec4<f32>(x_2057.y, x_2057.y, x_2057.y, x_2057.y) * x_2059);
        let x_2062 : vec4<f32> = u_xlat7;
        let x_2064 : vec4<f32> = u_xlat9;
        u_xlat20 = (vec4<f32>(x_2062.z, x_2062.z, x_2062.z, x_2062.z) * x_2064);
        let x_2066 : vec4<f32> = u_xlat7;
        let x_2068 : vec4<f32> = u_xlat9;
        u_xlat7 = (vec4<f32>(x_2066.w, x_2066.w, x_2066.w, x_2066.w) * x_2068);
        let x_2071 : vec4<f32> = u_xlat12;
        let x_2072 : vec2<f32> = vec2<f32>(x_2071.x, x_2071.y);
        let x_2074 : f32 = u_xlat2.z;
        txVec13 = vec3<f32>(x_2072.x, x_2072.y, x_2074);
        let x_2081 : vec3<f32> = txVec13;
        let x_2083 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2081.xy, x_2081.z);
        u_xlat68 = x_2083;
        let x_2085 : vec4<f32> = u_xlat12;
        let x_2086 : vec2<f32> = vec2<f32>(x_2085.z, x_2085.w);
        let x_2088 : f32 = u_xlat2.z;
        txVec14 = vec3<f32>(x_2086.x, x_2086.y, x_2088);
        let x_2096 : vec3<f32> = txVec14;
        let x_2098 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2096.xy, x_2096.z);
        u_xlat69 = x_2098;
        let x_2099 : f32 = u_xlat69;
        let x_2101 : f32 = u_xlat18.y;
        u_xlat69 = (x_2099 * x_2101);
        let x_2104 : f32 = u_xlat18.x;
        let x_2105 : f32 = u_xlat68;
        let x_2107 : f32 = u_xlat69;
        u_xlat68 = ((x_2104 * x_2105) + x_2107);
        let x_2110 : vec4<f32> = u_xlat13;
        let x_2111 : vec2<f32> = vec2<f32>(x_2110.x, x_2110.y);
        let x_2113 : f32 = u_xlat2.z;
        txVec15 = vec3<f32>(x_2111.x, x_2111.y, x_2113);
        let x_2120 : vec3<f32> = txVec15;
        let x_2122 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2120.xy, x_2120.z);
        u_xlat69 = x_2122;
        let x_2124 : f32 = u_xlat18.z;
        let x_2125 : f32 = u_xlat69;
        let x_2127 : f32 = u_xlat68;
        u_xlat68 = ((x_2124 * x_2125) + x_2127);
        let x_2130 : vec4<f32> = u_xlat15;
        let x_2131 : vec2<f32> = vec2<f32>(x_2130.x, x_2130.y);
        let x_2133 : f32 = u_xlat2.z;
        txVec16 = vec3<f32>(x_2131.x, x_2131.y, x_2133);
        let x_2140 : vec3<f32> = txVec16;
        let x_2142 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2140.xy, x_2140.z);
        u_xlat69 = x_2142;
        let x_2144 : f32 = u_xlat18.w;
        let x_2145 : f32 = u_xlat69;
        let x_2147 : f32 = u_xlat68;
        u_xlat68 = ((x_2144 * x_2145) + x_2147);
        let x_2150 : vec4<f32> = u_xlat14;
        let x_2151 : vec2<f32> = vec2<f32>(x_2150.x, x_2150.y);
        let x_2153 : f32 = u_xlat2.z;
        txVec17 = vec3<f32>(x_2151.x, x_2151.y, x_2153);
        let x_2160 : vec3<f32> = txVec17;
        let x_2162 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2160.xy, x_2160.z);
        u_xlat69 = x_2162;
        let x_2164 : f32 = u_xlat19.x;
        let x_2165 : f32 = u_xlat69;
        let x_2167 : f32 = u_xlat68;
        u_xlat68 = ((x_2164 * x_2165) + x_2167);
        let x_2170 : vec4<f32> = u_xlat14;
        let x_2171 : vec2<f32> = vec2<f32>(x_2170.z, x_2170.w);
        let x_2173 : f32 = u_xlat2.z;
        txVec18 = vec3<f32>(x_2171.x, x_2171.y, x_2173);
        let x_2180 : vec3<f32> = txVec18;
        let x_2182 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2180.xy, x_2180.z);
        u_xlat69 = x_2182;
        let x_2184 : f32 = u_xlat19.y;
        let x_2185 : f32 = u_xlat69;
        let x_2187 : f32 = u_xlat68;
        u_xlat68 = ((x_2184 * x_2185) + x_2187);
        let x_2190 : vec2<f32> = u_xlat55;
        let x_2192 : f32 = u_xlat2.z;
        txVec19 = vec3<f32>(x_2190.x, x_2190.y, x_2192);
        let x_2199 : vec3<f32> = txVec19;
        let x_2201 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2199.xy, x_2199.z);
        u_xlat69 = x_2201;
        let x_2203 : f32 = u_xlat19.z;
        let x_2204 : f32 = u_xlat69;
        let x_2206 : f32 = u_xlat68;
        u_xlat68 = ((x_2203 * x_2204) + x_2206);
        let x_2209 : vec4<f32> = u_xlat15;
        let x_2210 : vec2<f32> = vec2<f32>(x_2209.z, x_2209.w);
        let x_2212 : f32 = u_xlat2.z;
        txVec20 = vec3<f32>(x_2210.x, x_2210.y, x_2212);
        let x_2219 : vec3<f32> = txVec20;
        let x_2221 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2219.xy, x_2219.z);
        u_xlat69 = x_2221;
        let x_2223 : f32 = u_xlat19.w;
        let x_2224 : f32 = u_xlat69;
        let x_2226 : f32 = u_xlat68;
        u_xlat68 = ((x_2223 * x_2224) + x_2226);
        let x_2229 : vec4<f32> = u_xlat16;
        let x_2230 : vec2<f32> = vec2<f32>(x_2229.x, x_2229.y);
        let x_2232 : f32 = u_xlat2.z;
        txVec21 = vec3<f32>(x_2230.x, x_2230.y, x_2232);
        let x_2239 : vec3<f32> = txVec21;
        let x_2241 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2239.xy, x_2239.z);
        u_xlat69 = x_2241;
        let x_2243 : f32 = u_xlat20.x;
        let x_2244 : f32 = u_xlat69;
        let x_2246 : f32 = u_xlat68;
        u_xlat68 = ((x_2243 * x_2244) + x_2246);
        let x_2249 : vec4<f32> = u_xlat16;
        let x_2250 : vec2<f32> = vec2<f32>(x_2249.z, x_2249.w);
        let x_2252 : f32 = u_xlat2.z;
        txVec22 = vec3<f32>(x_2250.x, x_2250.y, x_2252);
        let x_2259 : vec3<f32> = txVec22;
        let x_2261 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2259.xy, x_2259.z);
        u_xlat69 = x_2261;
        let x_2263 : f32 = u_xlat20.y;
        let x_2264 : f32 = u_xlat69;
        let x_2266 : f32 = u_xlat68;
        u_xlat68 = ((x_2263 * x_2264) + x_2266);
        let x_2269 : vec2<f32> = u_xlat29;
        let x_2271 : f32 = u_xlat2.z;
        txVec23 = vec3<f32>(x_2269.x, x_2269.y, x_2271);
        let x_2278 : vec3<f32> = txVec23;
        let x_2280 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2278.xy, x_2278.z);
        u_xlat69 = x_2280;
        let x_2282 : f32 = u_xlat20.z;
        let x_2283 : f32 = u_xlat69;
        let x_2285 : f32 = u_xlat68;
        u_xlat68 = ((x_2282 * x_2283) + x_2285);
        let x_2288 : vec2<f32> = u_xlat17;
        let x_2290 : f32 = u_xlat2.z;
        txVec24 = vec3<f32>(x_2288.x, x_2288.y, x_2290);
        let x_2297 : vec3<f32> = txVec24;
        let x_2299 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2297.xy, x_2297.z);
        u_xlat69 = x_2299;
        let x_2301 : f32 = u_xlat20.w;
        let x_2302 : f32 = u_xlat69;
        let x_2304 : f32 = u_xlat68;
        u_xlat68 = ((x_2301 * x_2302) + x_2304);
        let x_2307 : vec4<f32> = u_xlat11;
        let x_2308 : vec2<f32> = vec2<f32>(x_2307.x, x_2307.y);
        let x_2310 : f32 = u_xlat2.z;
        txVec25 = vec3<f32>(x_2308.x, x_2308.y, x_2310);
        let x_2317 : vec3<f32> = txVec25;
        let x_2319 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2317.xy, x_2317.z);
        u_xlat69 = x_2319;
        let x_2321 : f32 = u_xlat7.x;
        let x_2322 : f32 = u_xlat69;
        let x_2324 : f32 = u_xlat68;
        u_xlat68 = ((x_2321 * x_2322) + x_2324);
        let x_2327 : vec4<f32> = u_xlat11;
        let x_2328 : vec2<f32> = vec2<f32>(x_2327.z, x_2327.w);
        let x_2330 : f32 = u_xlat2.z;
        txVec26 = vec3<f32>(x_2328.x, x_2328.y, x_2330);
        let x_2337 : vec3<f32> = txVec26;
        let x_2339 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2337.xy, x_2337.z);
        u_xlat69 = x_2339;
        let x_2341 : f32 = u_xlat7.y;
        let x_2342 : f32 = u_xlat69;
        let x_2344 : f32 = u_xlat68;
        u_xlat68 = ((x_2341 * x_2342) + x_2344);
        let x_2347 : vec2<f32> = u_xlat52;
        let x_2349 : f32 = u_xlat2.z;
        txVec27 = vec3<f32>(x_2347.x, x_2347.y, x_2349);
        let x_2356 : vec3<f32> = txVec27;
        let x_2358 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2356.xy, x_2356.z);
        u_xlat69 = x_2358;
        let x_2360 : f32 = u_xlat7.z;
        let x_2361 : f32 = u_xlat69;
        let x_2363 : f32 = u_xlat68;
        u_xlat68 = ((x_2360 * x_2361) + x_2363);
        let x_2366 : vec2<f32> = u_xlat46;
        let x_2368 : f32 = u_xlat2.z;
        txVec28 = vec3<f32>(x_2366.x, x_2366.y, x_2368);
        let x_2375 : vec3<f32> = txVec28;
        let x_2377 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2375.xy, x_2375.z);
        u_xlat46.x = x_2377;
        let x_2380 : f32 = u_xlat7.w;
        let x_2382 : f32 = u_xlat46.x;
        let x_2384 : f32 = u_xlat68;
        u_xlat4.x = ((x_2380 * x_2382) + x_2384);
      }
    }
  } else {
    let x_2389 : vec4<f32> = u_xlat2;
    let x_2390 : vec2<f32> = vec2<f32>(x_2389.x, x_2389.y);
    let x_2392 : f32 = u_xlat2.z;
    txVec29 = vec3<f32>(x_2390.x, x_2390.y, x_2392);
    let x_2399 : vec3<f32> = txVec29;
    let x_2401 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2399.xy, x_2399.z);
    u_xlat4.x = x_2401;
  }
  let x_2404 : f32 = x_854.x_MainLightShadowParams.x;
  u_xlat2.x = (-(x_2404) + 1.0f);
  let x_2409 : f32 = u_xlat4.x;
  let x_2411 : f32 = x_854.x_MainLightShadowParams.x;
  let x_2414 : f32 = u_xlat2.x;
  u_xlat2.x = ((x_2409 * x_2411) + x_2414);
  let x_2419 : f32 = u_xlat2.z;
  u_xlatb23 = (0.0f >= x_2419);
  let x_2423 : f32 = u_xlat2.z;
  u_xlatb44 = (x_2423 >= 1.0f);
  let x_2425 : bool = u_xlatb44;
  let x_2426 : bool = u_xlatb23;
  u_xlatb23 = (x_2425 | x_2426);
  let x_2428 : bool = u_xlatb23;
  if (x_2428) {
    x_2429 = 1.0f;
  } else {
    let x_2434 : f32 = u_xlat2.x;
    x_2429 = x_2434;
  }
  let x_2435 : f32 = x_2429;
  u_xlat2.x = x_2435;
  let x_2437 : vec3<f32> = vs_TEXCOORD7;
  let x_2440 : vec3<f32> = x_127.x_WorldSpaceCameraPos;
  let x_2442 : vec3<f32> = (x_2437 + -(x_2440));
  let x_2443 : vec4<f32> = u_xlat4;
  u_xlat4 = vec4<f32>(x_2442.x, x_2443.y, x_2442.y, x_2442.z);
  let x_2446 : vec4<f32> = u_xlat4;
  let x_2448 : vec4<f32> = u_xlat4;
  u_xlat23.x = dot(vec3<f32>(x_2446.x, x_2446.z, x_2446.w), vec3<f32>(x_2448.x, x_2448.z, x_2448.w));
  let x_2453 : f32 = u_xlat23.x;
  let x_2455 : f32 = x_854.x_MainLightShadowParams.z;
  let x_2458 : f32 = x_854.x_MainLightShadowParams.w;
  u_xlat23.x = ((x_2453 * x_2455) + x_2458);
  let x_2462 : f32 = u_xlat23.x;
  u_xlat23.x = clamp(x_2462, 0.0f, 1.0f);
  let x_2467 : f32 = u_xlat2.x;
  u_xlat44 = (-(x_2467) + 1.0f);
  let x_2471 : f32 = u_xlat23.x;
  let x_2472 : f32 = u_xlat44;
  let x_2475 : f32 = u_xlat2.x;
  u_xlat2.x = ((x_2471 * x_2472) + x_2475);
  let x_2478 : f32 = u_xlat25;
  let x_2481 : vec4<f32> = x_127.x_MainLightColor;
  let x_2483 : vec3<f32> = (vec3<f32>(x_2478, x_2478, x_2478) * vec3<f32>(x_2481.x, x_2481.y, x_2481.z));
  let x_2484 : vec4<f32> = u_xlat4;
  u_xlat4 = vec4<f32>(x_2483.x, x_2484.y, x_2483.y, x_2483.z);
  let x_2487 : f32 = vs_TEXCOORD3.w;
  u_xlat7.x = x_2487;
  let x_2490 : f32 = vs_TEXCOORD4.w;
  u_xlat7.y = x_2490;
  let x_2493 : f32 = vs_TEXCOORD5.w;
  u_xlat7.z = x_2493;
  let x_2495 : vec4<f32> = u_xlat7;
  let x_2498 : vec4<f32> = u_xlat1;
  u_xlat23.x = dot(-(vec3<f32>(x_2495.x, x_2495.y, x_2495.z)), vec3<f32>(x_2498.x, x_2498.y, x_2498.z));
  let x_2503 : f32 = u_xlat23.x;
  let x_2505 : f32 = u_xlat23.x;
  u_xlat23.x = (x_2503 + x_2505);
  let x_2508 : vec4<f32> = u_xlat1;
  let x_2510 : vec3<f32> = u_xlat23;
  let x_2514 : vec4<f32> = u_xlat7;
  let x_2517 : vec3<f32> = ((vec3<f32>(x_2508.x, x_2508.y, x_2508.z) * -(vec3<f32>(x_2510.x, x_2510.x, x_2510.x))) + -(vec3<f32>(x_2514.x, x_2514.y, x_2514.z)));
  let x_2518 : vec4<f32> = u_xlat8;
  u_xlat8 = vec4<f32>(x_2517.x, x_2517.y, x_2517.z, x_2518.w);
  let x_2520 : vec4<f32> = u_xlat1;
  let x_2522 : vec4<f32> = u_xlat7;
  u_xlat23.x = dot(vec3<f32>(x_2520.x, x_2520.y, x_2520.z), vec3<f32>(x_2522.x, x_2522.y, x_2522.z));
  let x_2527 : f32 = u_xlat23.x;
  u_xlat23.x = clamp(x_2527, 0.0f, 1.0f);
  let x_2531 : f32 = u_xlat23.x;
  u_xlat23.x = (-(x_2531) + 1.0f);
  let x_2536 : f32 = u_xlat23.x;
  let x_2538 : f32 = u_xlat23.x;
  u_xlat23.x = (x_2536 * x_2538);
  let x_2542 : f32 = u_xlat23.x;
  let x_2544 : f32 = u_xlat23.x;
  u_xlat23.x = (x_2542 * x_2544);
  let x_2548 : f32 = u_xlat0.x;
  u_xlat44 = ((-(x_2548) * 0.699999988f) + 1.700000048f);
  let x_2555 : f32 = u_xlat0.x;
  let x_2556 : f32 = u_xlat44;
  u_xlat0.x = (x_2555 * x_2556);
  let x_2560 : f32 = u_xlat0.x;
  u_xlat0.x = (x_2560 * 6.0f);
  let x_2572 : vec4<f32> = u_xlat8;
  let x_2575 : f32 = u_xlat0.x;
  let x_2576 : vec4<f32> = textureSampleLevel(unity_SpecCube0, samplerunity_SpecCube0, vec3<f32>(x_2572.x, x_2572.y, x_2572.z), x_2575);
  u_xlat8 = x_2576;
  let x_2578 : f32 = u_xlat8.w;
  u_xlat0.x = (x_2578 + -1.0f);
  let x_2586 : f32 = x_2584.unity_SpecCube0_HDR.w;
  let x_2588 : f32 = u_xlat0.x;
  u_xlat0.x = ((x_2586 * x_2588) + 1.0f);
  let x_2593 : f32 = u_xlat0.x;
  u_xlat0.x = max(x_2593, 0.0f);
  let x_2597 : f32 = u_xlat0.x;
  u_xlat0.x = log2(x_2597);
  let x_2601 : f32 = u_xlat0.x;
  let x_2603 : f32 = x_2584.unity_SpecCube0_HDR.y;
  u_xlat0.x = (x_2601 * x_2603);
  let x_2607 : f32 = u_xlat0.x;
  u_xlat0.x = exp2(x_2607);
  let x_2611 : f32 = u_xlat0.x;
  let x_2613 : f32 = x_2584.unity_SpecCube0_HDR.x;
  u_xlat0.x = (x_2611 * x_2613);
  let x_2616 : vec4<f32> = u_xlat8;
  let x_2618 : vec3<f32> = u_xlat0;
  let x_2620 : vec3<f32> = (vec3<f32>(x_2616.x, x_2616.y, x_2616.z) * vec3<f32>(x_2618.x, x_2618.x, x_2618.x));
  let x_2621 : vec4<f32> = u_xlat8;
  u_xlat8 = vec4<f32>(x_2620.x, x_2620.y, x_2620.z, x_2621.w);
  let x_2623 : f32 = u_xlat42;
  let x_2625 : f32 = u_xlat42;
  let x_2629 : vec2<f32> = ((vec2<f32>(x_2623, x_2623) * vec2<f32>(x_2625, x_2625)) + vec2<f32>(-1.0f, 1.0f));
  let x_2630 : vec3<f32> = u_xlat0;
  u_xlat0 = vec3<f32>(x_2629.x, x_2630.y, x_2629.y);
  let x_2633 : f32 = u_xlat0.z;
  u_xlat42 = (1.0f / x_2633);
  let x_2635 : vec4<f32> = u_xlat5;
  let x_2638 : f32 = u_xlat65;
  let x_2640 : vec3<f32> = (-(vec3<f32>(x_2635.x, x_2635.y, x_2635.z)) + vec3<f32>(x_2638, x_2638, x_2638));
  let x_2641 : vec4<f32> = u_xlat9;
  u_xlat9 = vec4<f32>(x_2640.x, x_2640.y, x_2640.z, x_2641.w);
  let x_2643 : vec3<f32> = u_xlat23;
  let x_2645 : vec4<f32> = u_xlat9;
  let x_2648 : vec4<f32> = u_xlat5;
  u_xlat23 = ((vec3<f32>(x_2643.x, x_2643.x, x_2643.x) * vec3<f32>(x_2645.x, x_2645.y, x_2645.z)) + vec3<f32>(x_2648.x, x_2648.y, x_2648.z));
  let x_2651 : f32 = u_xlat42;
  let x_2653 : vec3<f32> = u_xlat23;
  u_xlat23 = (vec3<f32>(x_2651, x_2651, x_2651) * x_2653);
  let x_2655 : vec3<f32> = u_xlat23;
  let x_2656 : vec4<f32> = u_xlat8;
  u_xlat23 = (x_2655 * vec3<f32>(x_2656.x, x_2656.y, x_2656.z));
  let x_2659 : vec4<f32> = u_xlat3;
  let x_2661 : vec4<f32> = u_xlat6;
  let x_2664 : vec3<f32> = u_xlat23;
  u_xlat23 = ((vec3<f32>(x_2659.x, x_2659.y, x_2659.z) * vec3<f32>(x_2661.x, x_2661.y, x_2661.z)) + x_2664);
  let x_2667 : f32 = u_xlat2.x;
  let x_2669 : f32 = x_2584.unity_LightData.z;
  u_xlat42 = (x_2667 * x_2669);
  let x_2671 : vec4<f32> = u_xlat1;
  let x_2674 : vec4<f32> = x_127.x_MainLightPosition;
  u_xlat2.x = dot(vec3<f32>(x_2671.x, x_2671.y, x_2671.z), vec3<f32>(x_2674.x, x_2674.y, x_2674.z));
  let x_2679 : f32 = u_xlat2.x;
  u_xlat2.x = clamp(x_2679, 0.0f, 1.0f);
  let x_2682 : f32 = u_xlat42;
  let x_2684 : f32 = u_xlat2.x;
  u_xlat42 = (x_2682 * x_2684);
  let x_2686 : f32 = u_xlat42;
  let x_2688 : vec4<f32> = u_xlat4;
  let x_2690 : vec3<f32> = (vec3<f32>(x_2686, x_2686, x_2686) * vec3<f32>(x_2688.x, x_2688.z, x_2688.w));
  let x_2691 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_2690.x, x_2690.y, x_2690.z, x_2691.w);
  let x_2693 : vec4<f32> = u_xlat7;
  let x_2696 : vec4<f32> = x_127.x_MainLightPosition;
  let x_2698 : vec3<f32> = (vec3<f32>(x_2693.x, x_2693.y, x_2693.z) + vec3<f32>(x_2696.x, x_2696.y, x_2696.z));
  let x_2699 : vec4<f32> = u_xlat4;
  u_xlat4 = vec4<f32>(x_2698.x, x_2699.y, x_2698.y, x_2698.z);
  let x_2701 : vec4<f32> = u_xlat4;
  let x_2703 : vec4<f32> = u_xlat4;
  u_xlat42 = dot(vec3<f32>(x_2701.x, x_2701.z, x_2701.w), vec3<f32>(x_2703.x, x_2703.z, x_2703.w));
  let x_2706 : f32 = u_xlat42;
  u_xlat42 = max(x_2706, 1.17549435e-37f);
  let x_2709 : f32 = u_xlat42;
  u_xlat42 = inverseSqrt(x_2709);
  let x_2711 : f32 = u_xlat42;
  let x_2713 : vec4<f32> = u_xlat4;
  let x_2715 : vec3<f32> = (vec3<f32>(x_2711, x_2711, x_2711) * vec3<f32>(x_2713.x, x_2713.z, x_2713.w));
  let x_2716 : vec4<f32> = u_xlat4;
  u_xlat4 = vec4<f32>(x_2715.x, x_2716.y, x_2715.y, x_2715.z);
  let x_2718 : vec4<f32> = u_xlat1;
  let x_2720 : vec4<f32> = u_xlat4;
  u_xlat42 = dot(vec3<f32>(x_2718.x, x_2718.y, x_2718.z), vec3<f32>(x_2720.x, x_2720.z, x_2720.w));
  let x_2723 : f32 = u_xlat42;
  u_xlat42 = clamp(x_2723, 0.0f, 1.0f);
  let x_2726 : vec4<f32> = x_127.x_MainLightPosition;
  let x_2728 : vec4<f32> = u_xlat4;
  u_xlat2.x = dot(vec3<f32>(x_2726.x, x_2726.y, x_2726.z), vec3<f32>(x_2728.x, x_2728.z, x_2728.w));
  let x_2733 : f32 = u_xlat2.x;
  u_xlat2.x = clamp(x_2733, 0.0f, 1.0f);
  let x_2736 : f32 = u_xlat42;
  let x_2737 : f32 = u_xlat42;
  u_xlat42 = (x_2736 * x_2737);
  let x_2739 : f32 = u_xlat42;
  let x_2741 : f32 = u_xlat0.x;
  u_xlat42 = ((x_2739 * x_2741) + 1.000010014f);
  let x_2746 : f32 = u_xlat2.x;
  let x_2748 : f32 = u_xlat2.x;
  u_xlat2.x = (x_2746 * x_2748);
  let x_2751 : f32 = u_xlat42;
  let x_2752 : f32 = u_xlat42;
  u_xlat42 = (x_2751 * x_2752);
  let x_2755 : f32 = u_xlat2.x;
  u_xlat2.x = max(x_2755, 0.100000001f);
  let x_2759 : f32 = u_xlat42;
  let x_2761 : f32 = u_xlat2.x;
  u_xlat42 = (x_2759 * x_2761);
  let x_2763 : f32 = u_xlat66;
  let x_2764 : f32 = u_xlat42;
  u_xlat42 = (x_2763 * x_2764);
  let x_2766 : f32 = u_xlat64;
  let x_2767 : f32 = u_xlat42;
  u_xlat42 = (x_2766 / x_2767);
  let x_2769 : vec4<f32> = u_xlat5;
  let x_2771 : f32 = u_xlat42;
  let x_2774 : vec4<f32> = u_xlat6;
  let x_2776 : vec3<f32> = ((vec3<f32>(x_2769.x, x_2769.y, x_2769.z) * vec3<f32>(x_2771, x_2771, x_2771)) + vec3<f32>(x_2774.x, x_2774.y, x_2774.z));
  let x_2777 : vec4<f32> = u_xlat4;
  u_xlat4 = vec4<f32>(x_2776.x, x_2777.y, x_2776.y, x_2776.z);
  let x_2779 : vec4<f32> = u_xlat3;
  let x_2781 : vec4<f32> = u_xlat4;
  let x_2783 : vec3<f32> = (vec3<f32>(x_2779.x, x_2779.y, x_2779.z) * vec3<f32>(x_2781.x, x_2781.z, x_2781.w));
  let x_2784 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_2783.x, x_2783.y, x_2783.z, x_2784.w);
  let x_2787 : f32 = x_127.x_AdditionalLightsCount.x;
  let x_2789 : f32 = x_2584.unity_LightData.y;
  u_xlat42 = min(x_2787, x_2789);
  let x_2792 : f32 = u_xlat42;
  u_xlatu42 = bitcast<u32>(i32(x_2792));
  u_xlat4.x = 0.0f;
  u_xlat4.z = 0.0f;
  u_xlat4.w = 0.0f;
  u_xlatu_loop_1 = 0u;
  loop {
    let x_2804 : u32 = u_xlatu_loop_1;
    let x_2805 : u32 = u_xlatu42;
    if ((x_2804 < x_2805)) {
    } else {
      break;
    }
    let x_2808 : u32 = u_xlatu_loop_1;
    u_xlatu68 = (x_2808 >> 2u);
    let x_2811 : u32 = u_xlatu_loop_1;
    u_xlati69 = bitcast<i32>((x_2811 & 3u));
    let x_2814 : u32 = u_xlatu68;
    let x_2817 : vec4<f32> = x_2584.unity_LightIndices[bitcast<i32>(x_2814)];
    let x_2827 : i32 = u_xlati69;
    indexable = array<vec4<u32>, 4u>(vec4<u32>(1065353216u, 0u, 0u, 0u), vec4<u32>(0u, 1065353216u, 0u, 0u), vec4<u32>(0u, 0u, 1065353216u, 0u), vec4<u32>(0u, 0u, 0u, 1065353216u));
    let x_2832 : vec4<u32> = indexable[x_2827];
    u_xlat68 = dot(x_2817, bitcast<vec4<f32>>(x_2832));
    let x_2836 : f32 = u_xlat68;
    u_xlati68 = i32(x_2836);
    let x_2838 : vec3<f32> = vs_TEXCOORD7;
    let x_2850 : i32 = u_xlati68;
    let x_2852 : vec4<f32> = x_2849.x_AdditionalLightsPosition[x_2850];
    let x_2855 : i32 = u_xlati68;
    let x_2857 : vec4<f32> = x_2849.x_AdditionalLightsPosition[x_2855];
    let x_2859 : vec3<f32> = ((-(x_2838) * vec3<f32>(x_2852.w, x_2852.w, x_2852.w)) + vec3<f32>(x_2857.x, x_2857.y, x_2857.z));
    let x_2860 : vec4<f32> = u_xlat8;
    u_xlat8 = vec4<f32>(x_2859.x, x_2859.y, x_2859.z, x_2860.w);
    let x_2862 : vec4<f32> = u_xlat8;
    let x_2864 : vec4<f32> = u_xlat8;
    u_xlat69 = dot(vec3<f32>(x_2862.x, x_2862.y, x_2862.z), vec3<f32>(x_2864.x, x_2864.y, x_2864.z));
    let x_2867 : f32 = u_xlat69;
    u_xlat69 = max(x_2867, 6.10351562e-05f);
    let x_2870 : f32 = u_xlat69;
    u_xlat70 = inverseSqrt(x_2870);
    let x_2872 : f32 = u_xlat70;
    let x_2874 : vec4<f32> = u_xlat8;
    let x_2876 : vec3<f32> = (vec3<f32>(x_2872, x_2872, x_2872) * vec3<f32>(x_2874.x, x_2874.y, x_2874.z));
    let x_2877 : vec4<f32> = u_xlat9;
    u_xlat9 = vec4<f32>(x_2876.x, x_2876.y, x_2876.z, x_2877.w);
    let x_2880 : f32 = u_xlat69;
    u_xlat71 = (1.0f / x_2880);
    let x_2882 : f32 = u_xlat69;
    let x_2883 : i32 = u_xlati68;
    let x_2885 : f32 = x_2849.x_AdditionalLightsAttenuation[x_2883].x;
    u_xlat69 = (x_2882 * x_2885);
    let x_2887 : f32 = u_xlat69;
    let x_2889 : f32 = u_xlat69;
    u_xlat69 = ((-(x_2887) * x_2889) + 1.0f);
    let x_2892 : f32 = u_xlat69;
    u_xlat69 = max(x_2892, 0.0f);
    let x_2894 : f32 = u_xlat69;
    let x_2895 : f32 = u_xlat69;
    u_xlat69 = (x_2894 * x_2895);
    let x_2897 : f32 = u_xlat69;
    let x_2898 : f32 = u_xlat71;
    u_xlat69 = (x_2897 * x_2898);
    let x_2900 : i32 = u_xlati68;
    let x_2902 : vec4<f32> = x_2849.x_AdditionalLightsSpotDir[x_2900];
    let x_2904 : vec4<f32> = u_xlat9;
    u_xlat71 = dot(vec3<f32>(x_2902.x, x_2902.y, x_2902.z), vec3<f32>(x_2904.x, x_2904.y, x_2904.z));
    let x_2907 : f32 = u_xlat71;
    let x_2908 : i32 = u_xlati68;
    let x_2910 : f32 = x_2849.x_AdditionalLightsAttenuation[x_2908].z;
    let x_2912 : i32 = u_xlati68;
    let x_2914 : f32 = x_2849.x_AdditionalLightsAttenuation[x_2912].w;
    u_xlat71 = ((x_2907 * x_2910) + x_2914);
    let x_2916 : f32 = u_xlat71;
    u_xlat71 = clamp(x_2916, 0.0f, 1.0f);
    let x_2918 : f32 = u_xlat71;
    let x_2919 : f32 = u_xlat71;
    u_xlat71 = (x_2918 * x_2919);
    let x_2921 : f32 = u_xlat69;
    let x_2922 : f32 = u_xlat71;
    u_xlat69 = (x_2921 * x_2922);
    let x_2924 : f32 = u_xlat25;
    let x_2926 : i32 = u_xlati68;
    let x_2928 : vec4<f32> = x_2849.x_AdditionalLightsColor[x_2926];
    let x_2930 : vec3<f32> = (vec3<f32>(x_2924, x_2924, x_2924) * vec3<f32>(x_2928.x, x_2928.y, x_2928.z));
    let x_2931 : vec4<f32> = u_xlat10;
    u_xlat10 = vec4<f32>(x_2930.x, x_2930.y, x_2930.z, x_2931.w);
    let x_2933 : vec4<f32> = u_xlat1;
    let x_2935 : vec4<f32> = u_xlat9;
    u_xlat68 = dot(vec3<f32>(x_2933.x, x_2933.y, x_2933.z), vec3<f32>(x_2935.x, x_2935.y, x_2935.z));
    let x_2938 : f32 = u_xlat68;
    u_xlat68 = clamp(x_2938, 0.0f, 1.0f);
    let x_2940 : f32 = u_xlat68;
    let x_2941 : f32 = u_xlat69;
    u_xlat68 = (x_2940 * x_2941);
    let x_2943 : f32 = u_xlat68;
    let x_2945 : vec4<f32> = u_xlat10;
    let x_2947 : vec3<f32> = (vec3<f32>(x_2943, x_2943, x_2943) * vec3<f32>(x_2945.x, x_2945.y, x_2945.z));
    let x_2948 : vec4<f32> = u_xlat10;
    u_xlat10 = vec4<f32>(x_2947.x, x_2947.y, x_2947.z, x_2948.w);
    let x_2950 : vec4<f32> = u_xlat8;
    let x_2952 : f32 = u_xlat70;
    let x_2955 : vec4<f32> = u_xlat7;
    let x_2957 : vec3<f32> = ((vec3<f32>(x_2950.x, x_2950.y, x_2950.z) * vec3<f32>(x_2952, x_2952, x_2952)) + vec3<f32>(x_2955.x, x_2955.y, x_2955.z));
    let x_2958 : vec4<f32> = u_xlat8;
    u_xlat8 = vec4<f32>(x_2957.x, x_2957.y, x_2957.z, x_2958.w);
    let x_2960 : vec4<f32> = u_xlat8;
    let x_2962 : vec4<f32> = u_xlat8;
    u_xlat68 = dot(vec3<f32>(x_2960.x, x_2960.y, x_2960.z), vec3<f32>(x_2962.x, x_2962.y, x_2962.z));
    let x_2965 : f32 = u_xlat68;
    u_xlat68 = max(x_2965, 1.17549435e-37f);
    let x_2967 : f32 = u_xlat68;
    u_xlat68 = inverseSqrt(x_2967);
    let x_2969 : f32 = u_xlat68;
    let x_2971 : vec4<f32> = u_xlat8;
    let x_2973 : vec3<f32> = (vec3<f32>(x_2969, x_2969, x_2969) * vec3<f32>(x_2971.x, x_2971.y, x_2971.z));
    let x_2974 : vec4<f32> = u_xlat8;
    u_xlat8 = vec4<f32>(x_2973.x, x_2973.y, x_2973.z, x_2974.w);
    let x_2976 : vec4<f32> = u_xlat1;
    let x_2978 : vec4<f32> = u_xlat8;
    u_xlat68 = dot(vec3<f32>(x_2976.x, x_2976.y, x_2976.z), vec3<f32>(x_2978.x, x_2978.y, x_2978.z));
    let x_2981 : f32 = u_xlat68;
    u_xlat68 = clamp(x_2981, 0.0f, 1.0f);
    let x_2983 : vec4<f32> = u_xlat9;
    let x_2985 : vec4<f32> = u_xlat8;
    u_xlat69 = dot(vec3<f32>(x_2983.x, x_2983.y, x_2983.z), vec3<f32>(x_2985.x, x_2985.y, x_2985.z));
    let x_2988 : f32 = u_xlat69;
    u_xlat69 = clamp(x_2988, 0.0f, 1.0f);
    let x_2990 : f32 = u_xlat68;
    let x_2991 : f32 = u_xlat68;
    u_xlat68 = (x_2990 * x_2991);
    let x_2993 : f32 = u_xlat68;
    let x_2995 : f32 = u_xlat0.x;
    u_xlat68 = ((x_2993 * x_2995) + 1.000010014f);
    let x_2998 : f32 = u_xlat69;
    let x_2999 : f32 = u_xlat69;
    u_xlat69 = (x_2998 * x_2999);
    let x_3001 : f32 = u_xlat68;
    let x_3002 : f32 = u_xlat68;
    u_xlat68 = (x_3001 * x_3002);
    let x_3004 : f32 = u_xlat69;
    u_xlat69 = max(x_3004, 0.100000001f);
    let x_3006 : f32 = u_xlat68;
    let x_3007 : f32 = u_xlat69;
    u_xlat68 = (x_3006 * x_3007);
    let x_3009 : f32 = u_xlat66;
    let x_3010 : f32 = u_xlat68;
    u_xlat68 = (x_3009 * x_3010);
    let x_3012 : f32 = u_xlat64;
    let x_3013 : f32 = u_xlat68;
    u_xlat68 = (x_3012 / x_3013);
    let x_3015 : vec4<f32> = u_xlat5;
    let x_3017 : f32 = u_xlat68;
    let x_3020 : vec4<f32> = u_xlat6;
    let x_3022 : vec3<f32> = ((vec3<f32>(x_3015.x, x_3015.y, x_3015.z) * vec3<f32>(x_3017, x_3017, x_3017)) + vec3<f32>(x_3020.x, x_3020.y, x_3020.z));
    let x_3023 : vec4<f32> = u_xlat8;
    u_xlat8 = vec4<f32>(x_3022.x, x_3022.y, x_3022.z, x_3023.w);
    let x_3025 : vec4<f32> = u_xlat8;
    let x_3027 : vec4<f32> = u_xlat10;
    let x_3030 : vec4<f32> = u_xlat4;
    let x_3032 : vec3<f32> = ((vec3<f32>(x_3025.x, x_3025.y, x_3025.z) * vec3<f32>(x_3027.x, x_3027.y, x_3027.z)) + vec3<f32>(x_3030.x, x_3030.z, x_3030.w));
    let x_3033 : vec4<f32> = u_xlat4;
    u_xlat4 = vec4<f32>(x_3032.x, x_3033.y, x_3032.y, x_3032.z);

    continuing {
      let x_3035 : u32 = u_xlatu_loop_1;
      u_xlatu_loop_1 = (x_3035 + bitcast<u32>(1i));
    }
  }
  let x_3037 : vec3<f32> = u_xlat23;
  let x_3038 : f32 = u_xlat21;
  let x_3041 : vec4<f32> = u_xlat3;
  u_xlat0 = ((x_3037 * vec3<f32>(x_3038, x_3038, x_3038)) + vec3<f32>(x_3041.x, x_3041.y, x_3041.z));
  let x_3044 : vec4<f32> = u_xlat4;
  let x_3046 : vec3<f32> = u_xlat0;
  u_xlat0 = (vec3<f32>(x_3044.x, x_3044.z, x_3044.w) + x_3046);
  let x_3050 : f32 = u_xlat63;
  let x_3052 : vec3<f32> = u_xlat0;
  let x_3053 : vec3<f32> = (vec3<f32>(x_3050, x_3050, x_3050) * x_3052);
  let x_3054 : vec4<f32> = SV_Target0;
  SV_Target0 = vec4<f32>(x_3053.x, x_3053.y, x_3053.z, x_3054.w);
  SV_Target0.w = 1.0f;
  return;
}

struct main_out {
  @location(0)
  SV_Target0_1 : vec4<f32>,
}

@fragment
fn main(@builtin(position) gl_FragCoord_param : vec4<f32>, @location(0) vs_TEXCOORD0_param : vec4<f32>, @location(1) vs_TEXCOORD1_param : vec4<f32>, @location(2) vs_TEXCOORD2_param : vec4<f32>, @location(5) vs_TEXCOORD5_param : vec4<f32>, @location(4) vs_TEXCOORD4_param : vec4<f32>, @location(3) vs_TEXCOORD3_param : vec4<f32>, @location(6) vs_TEXCOORD7_param : vec3<f32>) -> main_out {
  gl_FragCoord = gl_FragCoord_param;
  vs_TEXCOORD0 = vs_TEXCOORD0_param;
  vs_TEXCOORD1 = vs_TEXCOORD1_param;
  vs_TEXCOORD2 = vs_TEXCOORD2_param;
  vs_TEXCOORD5 = vs_TEXCOORD5_param;
  vs_TEXCOORD4 = vs_TEXCOORD4_param;
  vs_TEXCOORD3 = vs_TEXCOORD3_param;
  vs_TEXCOORD7 = vs_TEXCOORD7_param;
  main_1();
  return main_out(SV_Target0);
}

