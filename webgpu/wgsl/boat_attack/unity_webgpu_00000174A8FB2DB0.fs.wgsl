type Arr = array<vec4<f32>, 2u>;

type Arr_1 = array<mat4x4<f32>, 2u>;

type Arr_2 = array<vec4<f32>, 2u>;

type Arr_3 = array<vec4<f32>, 2u>;

type Arr_4 = array<vec4<f32>, 2u>;

struct PGlobals {
  x_GlobalMipBias : vec2<f32>,
  @size(8)
  padding : u32,
  x_ProjectionParams : vec4<f32>,
  x_SSAOParams : vec4<f32>,
  x_CameraViewTopLeftCorner : Arr_4,
  x_CameraViewProjections : Arr_1,
  x_CameraViewXExtent : Arr_4,
  x_CameraViewYExtent : Arr_4,
  x_CameraViewZExtent : Arr_4,
  x_SSAOBlueNoiseParams : vec4<f32>,
}

@group(0) @binding(0) var x_CameraDepthTexture : texture_2d<f32>;

@group(0) @binding(4) var sampler_CameraDepthTexture : sampler;

var<private> vs_TEXCOORD0 : vec2<f32>;

@group(1) @binding(0) var<uniform> x_34 : PGlobals;

var<private> SV_Target0 : vec4<f32>;

@group(0) @binding(1) var x_CameraNormalsTexture : texture_2d<f32>;

@group(0) @binding(5) var sampler_CameraNormalsTexture : sampler;

@group(0) @binding(2) var x_BlueNoiseTexture : texture_2d<f32>;

@group(0) @binding(3) var sampler_PointRepeat : sampler;

var<private> gl_FragCoord : vec4<f32>;

fn main_1() {
  var u_xlat0 : f32;
  var u_xlatb7 : bool;
  var u_xlat7 : vec3<f32>;
  var u_xlatb14 : bool;
  var u_xlat1 : vec3<f32>;
  var u_xlat14 : vec2<f32>;
  var u_xlat21 : f32;
  var u_xlat2 : vec3<f32>;
  var u_xlat3 : vec4<f32>;
  var u_xlat22 : f32;
  var u_xlat23 : f32;
  var u_xlat4 : vec3<f32>;
  var u_xlat5 : vec3<f32>;
  var u_xlatb22 : bool;
  var u_xlat10 : vec3<f32>;
  var u_xlat17 : f32;
  var u_xlatb17 : bool;
  var u_xlatb3 : bool;
  var u_xlat11 : vec3<f32>;
  var u_xlat18 : f32;
  var u_xlatb4 : vec3<bool>;
  var u_xlat6 : f32;
  var u_xlatb23 : bool;
  var u_xlat24 : f32;
  var u_xlatb24 : bool;
  var u_xlatb11 : bool;
  var u_xlat_precise_vec4 : vec4<f32>;
  var u_xlat_precise_ivec4 : vec4<i32>;
  var u_xlat_precise_bvec4 : vec4<bool>;
  var u_xlat_precise_uvec4 : vec4<u32>;
  let x_22 : vec2<f32> = vs_TEXCOORD0;
  let x_40 : f32 = x_34.x_GlobalMipBias.x;
  let x_41 : vec4<f32> = textureSampleBias(x_CameraDepthTexture, sampler_CameraDepthTexture, x_22, x_40);
  u_xlat0 = x_41.x;
  let x_46 : f32 = u_xlat0;
  u_xlatb7 = (x_46 < 0.00001f);
  let x_49 : bool = u_xlatb7;
  if (x_49) {
    SV_Target0 = vec4<f32>(0.0f, 0.5f, 0.5f, 0.5f);
    return;
  }
  let x_64 : f32 = x_34.x_ProjectionParams.y;
  let x_67 : f32 = x_34.x_ProjectionParams.z;
  u_xlat7.x = (-(x_64) + x_67);
  let x_71 : f32 = u_xlat7.x;
  let x_73 : f32 = u_xlat0;
  let x_76 : f32 = x_34.x_ProjectionParams.z;
  u_xlat0 = ((-(x_71) * x_73) + x_76);
  let x_82 : f32 = x_34.x_SSAOParams.w;
  let x_83 : f32 = u_xlat0;
  u_xlatb14 = (x_82 < x_83);
  let x_85 : bool = u_xlatb14;
  if (x_85) {
    SV_Target0 = vec4<f32>(0.0f, 0.5f, 0.5f, 0.5f);
    return;
  }
  let x_95 : vec2<f32> = vs_TEXCOORD0;
  let x_97 : f32 = x_34.x_GlobalMipBias.x;
  let x_98 : vec4<f32> = textureSampleBias(x_CameraNormalsTexture, sampler_CameraNormalsTexture, x_95, x_97);
  u_xlat1 = vec3<f32>(x_98.x, x_98.y, x_98.z);
  let x_104 : f32 = vs_TEXCOORD0.y;
  u_xlat14.x = (-(x_104) + 1.0f);
  let x_110 : f32 = u_xlat0;
  let x_112 : f32 = x_34.x_ProjectionParams.w;
  u_xlat21 = (x_110 * x_112);
  let x_118 : vec4<f32> = x_34.x_CameraViewXExtent[0i];
  let x_120 : vec2<f32> = vs_TEXCOORD0;
  let x_125 : vec4<f32> = x_34.x_CameraViewTopLeftCorner[0i];
  u_xlat2 = ((vec3<f32>(x_118.x, x_118.y, x_118.z) * vec3<f32>(x_120.x, x_120.x, x_120.x)) + vec3<f32>(x_125.x, x_125.y, x_125.z));
  let x_130 : vec4<f32> = x_34.x_CameraViewYExtent[0i];
  let x_132 : vec2<f32> = u_xlat14;
  let x_135 : vec3<f32> = u_xlat2;
  u_xlat2 = ((vec3<f32>(x_130.x, x_130.y, x_130.z) * vec3<f32>(x_132.x, x_132.x, x_132.x)) + x_135);
  let x_139 : vec4<f32> = x_34.x_CameraViewZExtent[0i];
  let x_141 : f32 = u_xlat21;
  let x_144 : vec3<f32> = u_xlat2;
  u_xlat2 = ((vec3<f32>(x_139.x, x_139.y, x_139.z) * vec3<f32>(x_141, x_141, x_141)) + x_144);
  let x_146 : vec2<f32> = vs_TEXCOORD0;
  let x_149 : vec4<f32> = x_34.x_SSAOBlueNoiseParams;
  u_xlat14 = (x_146 + vec2<f32>(x_149.z, x_149.w));
  let x_154 : vec2<f32> = u_xlat14;
  let x_156 : vec4<f32> = x_34.x_SSAOBlueNoiseParams;
  let x_158 : vec2<f32> = (x_154 * vec2<f32>(x_156.x, x_156.y));
  let x_159 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_158.x, x_158.y, x_159.z, x_159.w);
  let x_167 : vec4<f32> = u_xlat3;
  let x_170 : f32 = x_34.x_GlobalMipBias.x;
  let x_171 : vec4<f32> = textureSampleBias(x_BlueNoiseTexture, sampler_PointRepeat, vec2<f32>(x_167.x, x_167.y), x_170);
  u_xlat22 = x_171.w;
  let x_174 : f32 = u_xlat22;
  u_xlat23 = fract(x_174);
  let x_176 : f32 = u_xlat23;
  u_xlat3.z = ((x_176 * 2.0f) + -1.0f);
  let x_182 : f32 = u_xlat22;
  u_xlat22 = (x_182 + 0.9296875f);
  let x_185 : f32 = u_xlat22;
  u_xlat22 = (x_185 * 628.31854248f);
  let x_189 : f32 = u_xlat3.z;
  let x_192 : f32 = u_xlat3.z;
  u_xlat23 = ((-(x_189) * x_192) + 1.0f);
  let x_195 : f32 = u_xlat23;
  u_xlat23 = sqrt(x_195);
  let x_198 : f32 = u_xlat22;
  u_xlat4.x = sin(x_198);
  let x_202 : f32 = u_xlat22;
  u_xlat5.x = cos(x_202);
  let x_205 : f32 = u_xlat23;
  let x_207 : f32 = u_xlat5.x;
  u_xlat3.x = (x_205 * x_207);
  let x_210 : f32 = u_xlat23;
  let x_212 : f32 = u_xlat4.x;
  u_xlat3.y = (x_210 * x_212);
  let x_215 : vec3<f32> = u_xlat1;
  let x_216 : vec4<f32> = u_xlat3;
  u_xlat22 = dot(x_215, vec3<f32>(x_216.x, x_216.y, x_216.z));
  let x_220 : f32 = u_xlat22;
  u_xlatb22 = (x_220 >= 0.0f);
  let x_222 : bool = u_xlatb22;
  u_xlat22 = select(-1.0f, 1.0f, x_222);
  let x_224 : f32 = u_xlat22;
  let x_226 : vec4<f32> = u_xlat3;
  let x_228 : vec3<f32> = (vec3<f32>(x_224, x_224, x_224) * vec3<f32>(x_226.x, x_226.y, x_226.z));
  let x_229 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_228.x, x_228.y, x_228.z, x_229.w);
  let x_231 : vec4<f32> = u_xlat3;
  let x_234 : vec4<f32> = x_34.x_SSAOParams;
  let x_236 : vec3<f32> = (vec3<f32>(x_231.x, x_231.y, x_231.z) * vec3<f32>(x_234.y, x_234.y, x_234.y));
  let x_237 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_236.x, x_236.y, x_236.z, x_237.w);
  let x_239 : vec4<f32> = u_xlat3;
  let x_244 : vec3<f32> = u_xlat2;
  let x_245 : vec3<f32> = ((vec3<f32>(x_239.x, x_239.y, x_239.z) * vec3<f32>(0.100000001f, 0.100000001f, 0.100000001f)) + x_244);
  let x_246 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_245.x, x_245.y, x_245.z, x_246.w);
  let x_249 : vec4<f32> = u_xlat3;
  let x_253 : vec4<f32> = x_34.x_CameraViewProjections[0i][1i];
  let x_255 : vec2<f32> = (vec2<f32>(x_249.y, x_249.y) * vec2<f32>(x_253.x, x_253.y));
  let x_256 : vec3<f32> = u_xlat10;
  u_xlat10 = vec3<f32>(x_255.x, x_256.y, x_255.y);
  let x_259 : vec4<f32> = x_34.x_CameraViewProjections[0i][0i];
  let x_261 : vec4<f32> = u_xlat3;
  let x_264 : vec3<f32> = u_xlat10;
  let x_266 : vec2<f32> = ((vec2<f32>(x_259.x, x_259.y) * vec2<f32>(x_261.x, x_261.x)) + vec2<f32>(x_264.x, x_264.z));
  let x_267 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_266.x, x_266.y, x_267.z, x_267.w);
  let x_270 : vec4<f32> = x_34.x_CameraViewProjections[0i][2i];
  let x_272 : vec4<f32> = u_xlat3;
  let x_275 : vec4<f32> = u_xlat3;
  let x_277 : vec2<f32> = ((vec2<f32>(x_270.x, x_270.y) * vec2<f32>(x_272.z, x_272.z)) + vec2<f32>(x_275.x, x_275.y));
  let x_278 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_277.x, x_277.y, x_278.z, x_278.w);
  let x_280 : vec4<f32> = u_xlat3;
  let x_283 : vec2<f32> = (vec2<f32>(x_280.x, x_280.y) + vec2<f32>(1.0f, 1.0f));
  let x_284 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_283.x, x_283.y, x_284.z, x_284.w);
  let x_286 : vec4<f32> = u_xlat3;
  let x_289 : vec2<f32> = (vec2<f32>(x_286.x, x_286.y) * vec2<f32>(0.5f, 0.5f));
  let x_290 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_289.x, x_289.y, x_290.z, x_290.w);
  let x_292 : vec4<f32> = u_xlat3;
  let x_296 : vec2<f32> = clamp(vec2<f32>(x_292.x, x_292.y), vec2<f32>(0.0f, 0.0f), vec2<f32>(1.0f, 1.0f));
  let x_297 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_296.x, x_296.y, x_297.z, x_297.w);
  let x_302 : vec4<f32> = u_xlat3;
  let x_305 : f32 = x_34.x_GlobalMipBias.x;
  let x_306 : vec4<f32> = textureSampleBias(x_CameraDepthTexture, sampler_CameraDepthTexture, vec2<f32>(x_302.x, x_302.y), x_305);
  u_xlat22 = x_306.x;
  let x_309 : f32 = u_xlat7.x;
  let x_311 : f32 = u_xlat22;
  let x_314 : f32 = x_34.x_ProjectionParams.z;
  u_xlat23 = ((-(x_309) * x_311) + x_314);
  let x_317 : f32 = u_xlat0;
  let x_318 : f32 = u_xlat23;
  u_xlat17 = (x_317 + -(x_318));
  let x_322 : f32 = u_xlat17;
  let x_325 : f32 = x_34.x_SSAOParams.y;
  u_xlatb17 = (abs(x_322) < x_325);
  let x_327 : bool = u_xlatb17;
  u_xlat17 = select(0.0f, 1.0f, x_327);
  let x_329 : f32 = u_xlat22;
  u_xlatb22 = (0.00001f < x_329);
  let x_331 : bool = u_xlatb22;
  u_xlat22 = select(0.0f, 1.0f, x_331);
  let x_333 : f32 = u_xlat22;
  let x_334 : f32 = u_xlat17;
  u_xlat22 = (x_333 * x_334);
  let x_337 : f32 = u_xlat3.y;
  u_xlat10.x = (-(x_337) + 1.0f);
  let x_341 : f32 = u_xlat23;
  let x_343 : f32 = x_34.x_ProjectionParams.w;
  u_xlat23 = (x_341 * x_343);
  let x_346 : vec4<f32> = x_34.x_CameraViewXExtent[0i];
  let x_348 : vec4<f32> = u_xlat3;
  let x_352 : vec4<f32> = x_34.x_CameraViewTopLeftCorner[0i];
  let x_354 : vec3<f32> = ((vec3<f32>(x_346.x, x_346.y, x_346.z) * vec3<f32>(x_348.x, x_348.x, x_348.x)) + vec3<f32>(x_352.x, x_352.y, x_352.z));
  let x_355 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_354.x, x_355.y, x_354.y, x_354.z);
  let x_358 : vec4<f32> = x_34.x_CameraViewYExtent[0i];
  let x_360 : vec3<f32> = u_xlat10;
  let x_363 : vec4<f32> = u_xlat3;
  let x_365 : vec3<f32> = ((vec3<f32>(x_358.x, x_358.y, x_358.z) * vec3<f32>(x_360.x, x_360.x, x_360.x)) + vec3<f32>(x_363.x, x_363.z, x_363.w));
  let x_366 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_365.x, x_365.y, x_365.z, x_366.w);
  let x_369 : vec4<f32> = x_34.x_CameraViewZExtent[0i];
  let x_371 : f32 = u_xlat23;
  let x_374 : vec4<f32> = u_xlat3;
  let x_376 : vec3<f32> = ((vec3<f32>(x_369.x, x_369.y, x_369.z) * vec3<f32>(x_371, x_371, x_371)) + vec3<f32>(x_374.x, x_374.y, x_374.z));
  let x_377 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_376.x, x_376.y, x_376.z, x_377.w);
  let x_379 : vec3<f32> = u_xlat2;
  let x_381 : vec4<f32> = u_xlat3;
  let x_383 : vec3<f32> = (-(x_379) + vec3<f32>(x_381.x, x_381.y, x_381.z));
  let x_384 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_383.x, x_383.y, x_383.z, x_384.w);
  let x_386 : vec4<f32> = u_xlat3;
  let x_388 : vec3<f32> = u_xlat1;
  u_xlat23 = dot(vec3<f32>(x_386.x, x_386.y, x_386.z), x_388);
  let x_390 : f32 = u_xlat0;
  let x_394 : f32 = u_xlat23;
  u_xlat23 = ((-(x_390) * 0.004f) + x_394);
  let x_396 : f32 = u_xlat23;
  u_xlat23 = max(x_396, 0.0f);
  let x_398 : vec4<f32> = u_xlat3;
  let x_400 : vec4<f32> = u_xlat3;
  u_xlat3.x = dot(vec3<f32>(x_398.x, x_398.y, x_398.z), vec3<f32>(x_400.x, x_400.y, x_400.z));
  let x_405 : f32 = u_xlat3.x;
  u_xlat3.x = (x_405 + 0.0001f);
  let x_410 : f32 = u_xlat3.x;
  u_xlat3.x = (1.0f / x_410);
  let x_413 : f32 = u_xlat23;
  let x_415 : f32 = u_xlat3.x;
  u_xlat23 = (x_413 * x_415);
  let x_417 : vec2<f32> = u_xlat14;
  let x_420 : vec4<f32> = x_34.x_SSAOBlueNoiseParams;
  u_xlat3 = ((vec4<f32>(x_417.x, x_417.y, x_417.x, x_417.y) * vec4<f32>(x_420.x, x_420.y, x_420.x, x_420.y)) + vec4<f32>(0.083333336f, 0.083333336f, 0.166666672f, 0.166666672f));
  let x_430 : vec4<f32> = u_xlat3;
  let x_433 : f32 = x_34.x_GlobalMipBias.x;
  let x_434 : vec4<f32> = textureSampleBias(x_BlueNoiseTexture, sampler_PointRepeat, vec2<f32>(x_430.x, x_430.y), x_433);
  u_xlat3.x = x_434.w;
  let x_437 : vec4<f32> = u_xlat3;
  let x_442 : vec2<f32> = (vec2<f32>(x_437.x, x_437.x) + vec2<f32>(0.33984375f, 0.76171875f));
  let x_443 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_442.x, x_442.y, x_443.z, x_443.w);
  let x_446 : f32 = u_xlat3.x;
  u_xlat3.x = fract(x_446);
  let x_450 : f32 = u_xlat3.x;
  u_xlat4.z = ((x_450 * 2.0f) + -1.0f);
  let x_455 : f32 = u_xlat3.y;
  u_xlat3.x = (x_455 * 628.31854248f);
  let x_459 : f32 = u_xlat4.z;
  let x_462 : f32 = u_xlat4.z;
  u_xlat10.x = ((-(x_459) * x_462) + 1.0f);
  let x_467 : f32 = u_xlat10.x;
  u_xlat10.x = sqrt(x_467);
  let x_471 : f32 = u_xlat3.x;
  u_xlat5.x = cos(x_471);
  let x_475 : f32 = u_xlat3.x;
  u_xlat3.x = sin(x_475);
  let x_479 : f32 = u_xlat10.x;
  let x_481 : f32 = u_xlat5.x;
  u_xlat4.x = (x_479 * x_481);
  let x_485 : f32 = u_xlat3.x;
  let x_487 : f32 = u_xlat10.x;
  u_xlat4.y = (x_485 * x_487);
  let x_490 : vec3<f32> = u_xlat1;
  let x_491 : vec3<f32> = u_xlat4;
  u_xlat3.x = dot(x_490, x_491);
  let x_496 : f32 = u_xlat3.x;
  u_xlatb3 = (x_496 >= 0.0f);
  let x_498 : bool = u_xlatb3;
  u_xlat3.x = select(-1.0f, 1.0f, x_498);
  let x_501 : vec4<f32> = u_xlat3;
  let x_503 : vec3<f32> = u_xlat4;
  u_xlat4 = (vec3<f32>(x_501.x, x_501.x, x_501.x) * x_503);
  let x_505 : vec3<f32> = u_xlat4;
  let x_507 : vec4<f32> = x_34.x_SSAOParams;
  u_xlat4 = (x_505 * vec3<f32>(x_507.y, x_507.y, x_507.y));
  let x_510 : vec3<f32> = u_xlat4;
  let x_514 : vec3<f32> = u_xlat2;
  u_xlat4 = ((x_510 * vec3<f32>(0.106250003f, 0.106250003f, 0.106250003f)) + x_514);
  let x_516 : vec3<f32> = u_xlat4;
  let x_519 : vec4<f32> = x_34.x_CameraViewProjections[0i][1i];
  let x_521 : vec2<f32> = (vec2<f32>(x_516.y, x_516.y) * vec2<f32>(x_519.x, x_519.y));
  let x_522 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_521.x, x_521.y, x_522.z, x_522.w);
  let x_525 : vec4<f32> = x_34.x_CameraViewProjections[0i][0i];
  let x_527 : vec3<f32> = u_xlat4;
  let x_530 : vec4<f32> = u_xlat3;
  let x_532 : vec2<f32> = ((vec2<f32>(x_525.x, x_525.y) * vec2<f32>(x_527.x, x_527.x)) + vec2<f32>(x_530.x, x_530.y));
  let x_533 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_532.x, x_532.y, x_533.z, x_533.w);
  let x_536 : vec4<f32> = x_34.x_CameraViewProjections[0i][2i];
  let x_538 : vec3<f32> = u_xlat4;
  let x_541 : vec4<f32> = u_xlat3;
  let x_543 : vec2<f32> = ((vec2<f32>(x_536.x, x_536.y) * vec2<f32>(x_538.z, x_538.z)) + vec2<f32>(x_541.x, x_541.y));
  let x_544 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_543.x, x_543.y, x_544.z, x_544.w);
  let x_546 : vec4<f32> = u_xlat3;
  let x_548 : vec2<f32> = (vec2<f32>(x_546.x, x_546.y) + vec2<f32>(1.0f, 1.0f));
  let x_549 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_548.x, x_548.y, x_549.z, x_549.w);
  let x_551 : vec4<f32> = u_xlat3;
  let x_553 : vec2<f32> = (vec2<f32>(x_551.x, x_551.y) * vec2<f32>(0.5f, 0.5f));
  let x_554 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_553.x, x_553.y, x_554.z, x_554.w);
  let x_556 : vec4<f32> = u_xlat3;
  let x_560 : vec2<f32> = clamp(vec2<f32>(x_556.x, x_556.y), vec2<f32>(0.0f, 0.0f), vec2<f32>(1.0f, 1.0f));
  let x_561 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_560.x, x_560.y, x_561.z, x_561.w);
  let x_566 : vec4<f32> = u_xlat3;
  let x_569 : f32 = x_34.x_GlobalMipBias.x;
  let x_570 : vec4<f32> = textureSampleBias(x_CameraDepthTexture, sampler_CameraDepthTexture, vec2<f32>(x_566.x, x_566.y), x_569);
  u_xlat4.x = x_570.x;
  let x_575 : f32 = u_xlat7.x;
  let x_578 : f32 = u_xlat4.x;
  let x_581 : f32 = x_34.x_ProjectionParams.z;
  u_xlat11.x = ((-(x_575) * x_578) + x_581);
  let x_585 : f32 = u_xlat0;
  let x_587 : f32 = u_xlat11.x;
  u_xlat18 = (x_585 + -(x_587));
  let x_593 : f32 = u_xlat18;
  let x_596 : f32 = x_34.x_SSAOParams.y;
  u_xlatb4.z = (abs(x_593) < x_596);
  let x_600 : f32 = u_xlat4.x;
  u_xlatb4.x = (0.00001f < x_600);
  let x_604 : bool = u_xlatb4.x;
  u_xlat4.x = select(0.0f, 1.0f, x_604);
  let x_608 : bool = u_xlatb4.z;
  u_xlat4.z = select(0.0f, 1.0f, x_608);
  let x_612 : f32 = u_xlat4.x;
  let x_614 : f32 = u_xlat4.z;
  u_xlat4.x = (x_612 * x_614);
  let x_618 : f32 = u_xlat3.y;
  u_xlat10.x = (-(x_618) + 1.0f);
  let x_623 : f32 = u_xlat11.x;
  let x_625 : f32 = x_34.x_ProjectionParams.w;
  u_xlat11.x = (x_623 * x_625);
  let x_629 : vec4<f32> = x_34.x_CameraViewXExtent[0i];
  let x_631 : vec4<f32> = u_xlat3;
  let x_635 : vec4<f32> = x_34.x_CameraViewTopLeftCorner[0i];
  u_xlat5 = ((vec3<f32>(x_629.x, x_629.y, x_629.z) * vec3<f32>(x_631.x, x_631.x, x_631.x)) + vec3<f32>(x_635.x, x_635.y, x_635.z));
  let x_639 : vec4<f32> = x_34.x_CameraViewYExtent[0i];
  let x_641 : vec3<f32> = u_xlat10;
  let x_644 : vec3<f32> = u_xlat5;
  u_xlat5 = ((vec3<f32>(x_639.x, x_639.y, x_639.z) * vec3<f32>(x_641.x, x_641.x, x_641.x)) + x_644);
  let x_647 : vec4<f32> = x_34.x_CameraViewZExtent[0i];
  let x_649 : vec3<f32> = u_xlat11;
  let x_652 : vec3<f32> = u_xlat5;
  u_xlat11 = ((vec3<f32>(x_647.x, x_647.y, x_647.z) * vec3<f32>(x_649.x, x_649.x, x_649.x)) + x_652);
  let x_654 : vec3<f32> = u_xlat2;
  let x_656 : vec3<f32> = u_xlat11;
  u_xlat11 = (-(x_654) + x_656);
  let x_658 : vec3<f32> = u_xlat11;
  let x_659 : vec3<f32> = u_xlat1;
  u_xlat3.x = dot(x_658, x_659);
  let x_662 : f32 = u_xlat0;
  let x_666 : f32 = u_xlat3.x;
  u_xlat3.x = ((-(x_662) * 0.004f) + x_666);
  let x_670 : f32 = u_xlat3.x;
  u_xlat3.x = max(x_670, 0.0f);
  let x_673 : vec3<f32> = u_xlat11;
  let x_674 : vec3<f32> = u_xlat11;
  u_xlat10.x = dot(x_673, x_674);
  let x_678 : f32 = u_xlat10.x;
  u_xlat10.x = (x_678 + 0.0001f);
  let x_682 : f32 = u_xlat10.x;
  u_xlat10.x = (1.0f / x_682);
  let x_686 : f32 = u_xlat10.x;
  let x_688 : f32 = u_xlat3.x;
  u_xlat3.x = (x_686 * x_688);
  let x_692 : f32 = u_xlat4.x;
  let x_694 : f32 = u_xlat3.x;
  u_xlat3.x = (x_692 * x_694);
  let x_697 : f32 = u_xlat23;
  let x_698 : f32 = u_xlat22;
  let x_701 : f32 = u_xlat3.x;
  u_xlat22 = ((x_697 * x_698) + x_701);
  let x_706 : vec4<f32> = u_xlat3;
  let x_709 : f32 = x_34.x_GlobalMipBias.x;
  let x_710 : vec4<f32> = textureSampleBias(x_BlueNoiseTexture, sampler_PointRepeat, vec2<f32>(x_706.z, x_706.w), x_709);
  u_xlat23 = x_710.w;
  let x_712 : f32 = u_xlat23;
  let x_717 : vec2<f32> = (vec2<f32>(x_712, x_712) + vec2<f32>(0.75390625f, 0.133333296f));
  let x_718 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_717.x, x_717.y, x_718.z, x_718.w);
  let x_721 : f32 = u_xlat3.x;
  u_xlat23 = fract(x_721);
  let x_723 : f32 = u_xlat23;
  u_xlat4.z = ((x_723 * 2.0f) + -1.0f);
  let x_728 : f32 = u_xlat3.y;
  u_xlat23 = (x_728 * 628.31854248f);
  let x_731 : f32 = u_xlat4.z;
  let x_734 : f32 = u_xlat4.z;
  u_xlat3.x = ((-(x_731) * x_734) + 1.0f);
  let x_739 : f32 = u_xlat3.x;
  u_xlat3.x = sqrt(x_739);
  let x_742 : f32 = u_xlat23;
  u_xlat5.x = sin(x_742);
  let x_746 : f32 = u_xlat23;
  u_xlat6 = cos(x_746);
  let x_749 : f32 = u_xlat3.x;
  let x_750 : f32 = u_xlat6;
  u_xlat4.x = (x_749 * x_750);
  let x_754 : f32 = u_xlat3.x;
  let x_756 : f32 = u_xlat5.x;
  u_xlat4.y = (x_754 * x_756);
  let x_759 : vec3<f32> = u_xlat1;
  let x_760 : vec3<f32> = u_xlat4;
  u_xlat23 = dot(x_759, x_760);
  let x_763 : f32 = u_xlat23;
  u_xlatb23 = (x_763 >= 0.0f);
  let x_765 : bool = u_xlatb23;
  u_xlat23 = select(-1.0f, 1.0f, x_765);
  let x_767 : f32 = u_xlat23;
  let x_769 : vec3<f32> = u_xlat4;
  let x_770 : vec3<f32> = (vec3<f32>(x_767, x_767, x_767) * x_769);
  let x_771 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_770.x, x_770.y, x_770.z, x_771.w);
  let x_773 : vec4<f32> = u_xlat3;
  let x_776 : vec4<f32> = x_34.x_SSAOParams;
  let x_778 : vec3<f32> = (vec3<f32>(x_773.x, x_773.y, x_773.z) * vec3<f32>(x_776.y, x_776.y, x_776.y));
  let x_779 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_778.x, x_778.y, x_778.z, x_779.w);
  let x_781 : vec4<f32> = u_xlat3;
  let x_786 : vec3<f32> = u_xlat2;
  let x_787 : vec3<f32> = ((vec3<f32>(x_781.x, x_781.y, x_781.z) * vec3<f32>(0.125f, 0.125f, 0.125f)) + x_786);
  let x_788 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_787.x, x_787.y, x_787.z, x_788.w);
  let x_790 : vec4<f32> = u_xlat3;
  let x_793 : vec4<f32> = x_34.x_CameraViewProjections[0i][1i];
  let x_795 : vec2<f32> = (vec2<f32>(x_790.y, x_790.y) * vec2<f32>(x_793.x, x_793.y));
  let x_796 : vec3<f32> = u_xlat10;
  u_xlat10 = vec3<f32>(x_795.x, x_796.y, x_795.y);
  let x_799 : vec4<f32> = x_34.x_CameraViewProjections[0i][0i];
  let x_801 : vec4<f32> = u_xlat3;
  let x_804 : vec3<f32> = u_xlat10;
  let x_806 : vec2<f32> = ((vec2<f32>(x_799.x, x_799.y) * vec2<f32>(x_801.x, x_801.x)) + vec2<f32>(x_804.x, x_804.z));
  let x_807 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_806.x, x_806.y, x_807.z, x_807.w);
  let x_810 : vec4<f32> = x_34.x_CameraViewProjections[0i][2i];
  let x_812 : vec4<f32> = u_xlat3;
  let x_815 : vec4<f32> = u_xlat3;
  let x_817 : vec2<f32> = ((vec2<f32>(x_810.x, x_810.y) * vec2<f32>(x_812.z, x_812.z)) + vec2<f32>(x_815.x, x_815.y));
  let x_818 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_817.x, x_817.y, x_818.z, x_818.w);
  let x_820 : vec4<f32> = u_xlat3;
  let x_822 : vec2<f32> = (vec2<f32>(x_820.x, x_820.y) + vec2<f32>(1.0f, 1.0f));
  let x_823 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_822.x, x_822.y, x_823.z, x_823.w);
  let x_825 : vec4<f32> = u_xlat3;
  let x_827 : vec2<f32> = (vec2<f32>(x_825.x, x_825.y) * vec2<f32>(0.5f, 0.5f));
  let x_828 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_827.x, x_827.y, x_828.z, x_828.w);
  let x_830 : vec4<f32> = u_xlat3;
  let x_834 : vec2<f32> = clamp(vec2<f32>(x_830.x, x_830.y), vec2<f32>(0.0f, 0.0f), vec2<f32>(1.0f, 1.0f));
  let x_835 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_834.x, x_834.y, x_835.z, x_835.w);
  let x_840 : vec4<f32> = u_xlat3;
  let x_843 : f32 = x_34.x_GlobalMipBias.x;
  let x_844 : vec4<f32> = textureSampleBias(x_CameraDepthTexture, sampler_CameraDepthTexture, vec2<f32>(x_840.x, x_840.y), x_843);
  u_xlat23 = x_844.x;
  let x_847 : f32 = u_xlat7.x;
  let x_849 : f32 = u_xlat23;
  let x_852 : f32 = x_34.x_ProjectionParams.z;
  u_xlat17 = ((-(x_847) * x_849) + x_852);
  let x_855 : f32 = u_xlat0;
  let x_856 : f32 = u_xlat17;
  u_xlat24 = (x_855 + -(x_856));
  let x_860 : f32 = u_xlat24;
  let x_863 : f32 = x_34.x_SSAOParams.y;
  u_xlatb24 = (abs(x_860) < x_863);
  let x_865 : bool = u_xlatb24;
  u_xlat24 = select(0.0f, 1.0f, x_865);
  let x_867 : f32 = u_xlat23;
  u_xlatb23 = (0.00001f < x_867);
  let x_869 : bool = u_xlatb23;
  u_xlat23 = select(0.0f, 1.0f, x_869);
  let x_871 : f32 = u_xlat23;
  let x_872 : f32 = u_xlat24;
  u_xlat23 = (x_871 * x_872);
  let x_875 : f32 = u_xlat3.y;
  u_xlat10.x = (-(x_875) + 1.0f);
  let x_879 : f32 = u_xlat17;
  let x_881 : f32 = x_34.x_ProjectionParams.w;
  u_xlat17 = (x_879 * x_881);
  let x_884 : vec4<f32> = x_34.x_CameraViewXExtent[0i];
  let x_886 : vec4<f32> = u_xlat3;
  let x_890 : vec4<f32> = x_34.x_CameraViewTopLeftCorner[0i];
  u_xlat4 = ((vec3<f32>(x_884.x, x_884.y, x_884.z) * vec3<f32>(x_886.x, x_886.x, x_886.x)) + vec3<f32>(x_890.x, x_890.y, x_890.z));
  let x_894 : vec4<f32> = x_34.x_CameraViewYExtent[0i];
  let x_896 : vec3<f32> = u_xlat10;
  let x_899 : vec3<f32> = u_xlat4;
  let x_900 : vec3<f32> = ((vec3<f32>(x_894.x, x_894.y, x_894.z) * vec3<f32>(x_896.x, x_896.x, x_896.x)) + x_899);
  let x_901 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_900.x, x_900.y, x_901.z, x_900.z);
  let x_904 : vec4<f32> = x_34.x_CameraViewZExtent[0i];
  let x_906 : f32 = u_xlat17;
  let x_909 : vec4<f32> = u_xlat3;
  let x_911 : vec3<f32> = ((vec3<f32>(x_904.x, x_904.y, x_904.z) * vec3<f32>(x_906, x_906, x_906)) + vec3<f32>(x_909.x, x_909.y, x_909.w));
  let x_912 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_911.x, x_911.y, x_911.z, x_912.w);
  let x_914 : vec3<f32> = u_xlat2;
  let x_916 : vec4<f32> = u_xlat3;
  let x_918 : vec3<f32> = (-(x_914) + vec3<f32>(x_916.x, x_916.y, x_916.z));
  let x_919 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_918.x, x_918.y, x_918.z, x_919.w);
  let x_921 : vec4<f32> = u_xlat3;
  let x_923 : vec3<f32> = u_xlat1;
  u_xlat24 = dot(vec3<f32>(x_921.x, x_921.y, x_921.z), x_923);
  let x_925 : f32 = u_xlat0;
  let x_928 : f32 = u_xlat24;
  u_xlat24 = ((-(x_925) * 0.004f) + x_928);
  let x_930 : f32 = u_xlat24;
  u_xlat24 = max(x_930, 0.0f);
  let x_932 : vec4<f32> = u_xlat3;
  let x_934 : vec4<f32> = u_xlat3;
  u_xlat3.x = dot(vec3<f32>(x_932.x, x_932.y, x_932.z), vec3<f32>(x_934.x, x_934.y, x_934.z));
  let x_939 : f32 = u_xlat3.x;
  u_xlat3.x = (x_939 + 0.0001f);
  let x_943 : f32 = u_xlat3.x;
  u_xlat3.x = (1.0f / x_943);
  let x_947 : f32 = u_xlat3.x;
  let x_948 : f32 = u_xlat24;
  u_xlat3.x = (x_947 * x_948);
  let x_952 : f32 = u_xlat3.x;
  let x_953 : f32 = u_xlat23;
  let x_955 : f32 = u_xlat22;
  u_xlat22 = ((x_952 * x_953) + x_955);
  let x_957 : vec2<f32> = u_xlat14;
  let x_960 : vec4<f32> = x_34.x_SSAOBlueNoiseParams;
  u_xlat3 = ((vec4<f32>(x_957.x, x_957.y, x_957.x, x_957.y) * vec4<f32>(x_960.x, x_960.y, x_960.x, x_960.y)) + vec4<f32>(0.25f, 0.25f, 0.333333343f, 0.333333343f));
  let x_970 : vec4<f32> = u_xlat3;
  let x_973 : f32 = x_34.x_GlobalMipBias.x;
  let x_974 : vec4<f32> = textureSampleBias(x_BlueNoiseTexture, sampler_PointRepeat, vec2<f32>(x_970.x, x_970.y), x_973);
  u_xlat23 = x_974.w;
  let x_976 : f32 = u_xlat23;
  let x_981 : vec2<f32> = (vec2<f32>(x_976, x_976) + vec2<f32>(0.56640625f, 0.015625f));
  let x_982 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_981.x, x_981.y, x_982.z, x_982.w);
  let x_985 : f32 = u_xlat3.x;
  u_xlat23 = fract(x_985);
  let x_987 : f32 = u_xlat23;
  u_xlat4.z = ((x_987 * 2.0f) + -1.0f);
  let x_992 : f32 = u_xlat3.y;
  u_xlat23 = (x_992 * 628.31854248f);
  let x_995 : f32 = u_xlat4.z;
  let x_998 : f32 = u_xlat4.z;
  u_xlat3.x = ((-(x_995) * x_998) + 1.0f);
  let x_1003 : f32 = u_xlat3.x;
  u_xlat3.x = sqrt(x_1003);
  let x_1006 : f32 = u_xlat23;
  u_xlat5.x = sin(x_1006);
  let x_1009 : f32 = u_xlat23;
  u_xlat6 = cos(x_1009);
  let x_1012 : f32 = u_xlat3.x;
  let x_1013 : f32 = u_xlat6;
  u_xlat4.x = (x_1012 * x_1013);
  let x_1017 : f32 = u_xlat3.x;
  let x_1019 : f32 = u_xlat5.x;
  u_xlat4.y = (x_1017 * x_1019);
  let x_1022 : vec3<f32> = u_xlat1;
  let x_1023 : vec3<f32> = u_xlat4;
  u_xlat23 = dot(x_1022, x_1023);
  let x_1025 : f32 = u_xlat23;
  u_xlatb23 = (x_1025 >= 0.0f);
  let x_1027 : bool = u_xlatb23;
  u_xlat23 = select(-1.0f, 1.0f, x_1027);
  let x_1029 : f32 = u_xlat23;
  let x_1031 : vec3<f32> = u_xlat4;
  u_xlat4 = (vec3<f32>(x_1029, x_1029, x_1029) * x_1031);
  let x_1033 : vec3<f32> = u_xlat4;
  let x_1035 : vec4<f32> = x_34.x_SSAOParams;
  u_xlat4 = (x_1033 * vec3<f32>(x_1035.y, x_1035.y, x_1035.y));
  let x_1038 : vec3<f32> = u_xlat4;
  let x_1042 : vec3<f32> = u_xlat2;
  u_xlat4 = ((x_1038 * vec3<f32>(0.15625f, 0.15625f, 0.15625f)) + x_1042);
  let x_1044 : vec3<f32> = u_xlat4;
  let x_1047 : vec4<f32> = x_34.x_CameraViewProjections[0i][1i];
  let x_1049 : vec2<f32> = (vec2<f32>(x_1044.y, x_1044.y) * vec2<f32>(x_1047.x, x_1047.y));
  let x_1050 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_1049.x, x_1049.y, x_1050.z, x_1050.w);
  let x_1053 : vec4<f32> = x_34.x_CameraViewProjections[0i][0i];
  let x_1055 : vec3<f32> = u_xlat4;
  let x_1058 : vec4<f32> = u_xlat3;
  let x_1060 : vec2<f32> = ((vec2<f32>(x_1053.x, x_1053.y) * vec2<f32>(x_1055.x, x_1055.x)) + vec2<f32>(x_1058.x, x_1058.y));
  let x_1061 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_1060.x, x_1060.y, x_1061.z, x_1061.w);
  let x_1064 : vec4<f32> = x_34.x_CameraViewProjections[0i][2i];
  let x_1066 : vec3<f32> = u_xlat4;
  let x_1069 : vec4<f32> = u_xlat3;
  let x_1071 : vec2<f32> = ((vec2<f32>(x_1064.x, x_1064.y) * vec2<f32>(x_1066.z, x_1066.z)) + vec2<f32>(x_1069.x, x_1069.y));
  let x_1072 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_1071.x, x_1071.y, x_1072.z, x_1072.w);
  let x_1074 : vec4<f32> = u_xlat3;
  let x_1076 : vec2<f32> = (vec2<f32>(x_1074.x, x_1074.y) + vec2<f32>(1.0f, 1.0f));
  let x_1077 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_1076.x, x_1076.y, x_1077.z, x_1077.w);
  let x_1079 : vec4<f32> = u_xlat3;
  let x_1081 : vec2<f32> = (vec2<f32>(x_1079.x, x_1079.y) * vec2<f32>(0.5f, 0.5f));
  let x_1082 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_1081.x, x_1081.y, x_1082.z, x_1082.w);
  let x_1084 : vec4<f32> = u_xlat3;
  let x_1088 : vec2<f32> = clamp(vec2<f32>(x_1084.x, x_1084.y), vec2<f32>(0.0f, 0.0f), vec2<f32>(1.0f, 1.0f));
  let x_1089 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_1088.x, x_1088.y, x_1089.z, x_1089.w);
  let x_1094 : vec4<f32> = u_xlat3;
  let x_1097 : f32 = x_34.x_GlobalMipBias.x;
  let x_1098 : vec4<f32> = textureSampleBias(x_CameraDepthTexture, sampler_CameraDepthTexture, vec2<f32>(x_1094.x, x_1094.y), x_1097);
  u_xlat23 = x_1098.x;
  let x_1101 : f32 = u_xlat7.x;
  let x_1103 : f32 = u_xlat23;
  let x_1106 : f32 = x_34.x_ProjectionParams.z;
  u_xlat4.x = ((-(x_1101) * x_1103) + x_1106);
  let x_1109 : f32 = u_xlat0;
  let x_1111 : f32 = u_xlat4.x;
  u_xlat11.x = (x_1109 + -(x_1111));
  let x_1117 : f32 = u_xlat11.x;
  let x_1120 : f32 = x_34.x_SSAOParams.y;
  u_xlatb11 = (abs(x_1117) < x_1120);
  let x_1122 : bool = u_xlatb11;
  u_xlat11.x = select(0.0f, 1.0f, x_1122);
  let x_1125 : f32 = u_xlat23;
  u_xlatb23 = (0.00001f < x_1125);
  let x_1127 : bool = u_xlatb23;
  u_xlat23 = select(0.0f, 1.0f, x_1127);
  let x_1129 : f32 = u_xlat23;
  let x_1131 : f32 = u_xlat11.x;
  u_xlat23 = (x_1129 * x_1131);
  let x_1134 : f32 = u_xlat3.y;
  u_xlat10.x = (-(x_1134) + 1.0f);
  let x_1139 : f32 = u_xlat4.x;
  let x_1141 : f32 = x_34.x_ProjectionParams.w;
  u_xlat4.x = (x_1139 * x_1141);
  let x_1145 : vec4<f32> = x_34.x_CameraViewXExtent[0i];
  let x_1147 : vec4<f32> = u_xlat3;
  let x_1151 : vec4<f32> = x_34.x_CameraViewTopLeftCorner[0i];
  u_xlat11 = ((vec3<f32>(x_1145.x, x_1145.y, x_1145.z) * vec3<f32>(x_1147.x, x_1147.x, x_1147.x)) + vec3<f32>(x_1151.x, x_1151.y, x_1151.z));
  let x_1155 : vec4<f32> = x_34.x_CameraViewYExtent[0i];
  let x_1157 : vec3<f32> = u_xlat10;
  let x_1160 : vec3<f32> = u_xlat11;
  u_xlat11 = ((vec3<f32>(x_1155.x, x_1155.y, x_1155.z) * vec3<f32>(x_1157.x, x_1157.x, x_1157.x)) + x_1160);
  let x_1163 : vec4<f32> = x_34.x_CameraViewZExtent[0i];
  let x_1165 : vec3<f32> = u_xlat4;
  let x_1168 : vec3<f32> = u_xlat11;
  u_xlat4 = ((vec3<f32>(x_1163.x, x_1163.y, x_1163.z) * vec3<f32>(x_1165.x, x_1165.x, x_1165.x)) + x_1168);
  let x_1170 : vec3<f32> = u_xlat2;
  let x_1172 : vec3<f32> = u_xlat4;
  u_xlat4 = (-(x_1170) + x_1172);
  let x_1174 : vec3<f32> = u_xlat4;
  let x_1175 : vec3<f32> = u_xlat1;
  u_xlat3.x = dot(x_1174, x_1175);
  let x_1178 : f32 = u_xlat0;
  let x_1182 : f32 = u_xlat3.x;
  u_xlat3.x = ((-(x_1178) * 0.004f) + x_1182);
  let x_1186 : f32 = u_xlat3.x;
  u_xlat3.x = max(x_1186, 0.0f);
  let x_1189 : vec3<f32> = u_xlat4;
  let x_1190 : vec3<f32> = u_xlat4;
  u_xlat10.x = dot(x_1189, x_1190);
  let x_1194 : f32 = u_xlat10.x;
  u_xlat10.x = (x_1194 + 0.0001f);
  let x_1198 : f32 = u_xlat10.x;
  u_xlat10.x = (1.0f / x_1198);
  let x_1202 : f32 = u_xlat10.x;
  let x_1204 : f32 = u_xlat3.x;
  u_xlat3.x = (x_1202 * x_1204);
  let x_1208 : f32 = u_xlat3.x;
  let x_1209 : f32 = u_xlat23;
  let x_1211 : f32 = u_xlat22;
  u_xlat22 = ((x_1208 * x_1209) + x_1211);
  let x_1216 : vec4<f32> = u_xlat3;
  let x_1219 : f32 = x_34.x_GlobalMipBias.x;
  let x_1220 : vec4<f32> = textureSampleBias(x_BlueNoiseTexture, sampler_PointRepeat, vec2<f32>(x_1216.z, x_1216.w), x_1219);
  u_xlat23 = x_1220.w;
  let x_1222 : f32 = u_xlat23;
  u_xlat3.x = (x_1222 + 0.984375f);
  let x_1227 : f32 = u_xlat3.x;
  u_xlat3.x = fract(x_1227);
  let x_1231 : f32 = u_xlat3.x;
  u_xlat3.z = ((x_1231 * 2.0f) + -1.0f);
  let x_1235 : f32 = u_xlat23;
  u_xlat23 = (x_1235 * 628.31854248f);
  let x_1238 : f32 = u_xlat3.z;
  let x_1241 : f32 = u_xlat3.z;
  u_xlat24 = ((-(x_1238) * x_1241) + 1.0f);
  let x_1244 : f32 = u_xlat24;
  u_xlat24 = sqrt(x_1244);
  let x_1246 : f32 = u_xlat23;
  u_xlat4.x = sin(x_1246);
  let x_1249 : f32 = u_xlat23;
  u_xlat5.x = cos(x_1249);
  let x_1252 : f32 = u_xlat24;
  let x_1254 : f32 = u_xlat5.x;
  u_xlat3.x = (x_1252 * x_1254);
  let x_1257 : f32 = u_xlat24;
  let x_1259 : f32 = u_xlat4.x;
  u_xlat3.y = (x_1257 * x_1259);
  let x_1262 : vec3<f32> = u_xlat1;
  let x_1263 : vec4<f32> = u_xlat3;
  u_xlat23 = dot(x_1262, vec3<f32>(x_1263.x, x_1263.y, x_1263.z));
  let x_1266 : f32 = u_xlat23;
  u_xlatb23 = (x_1266 >= 0.0f);
  let x_1268 : bool = u_xlatb23;
  u_xlat23 = select(-1.0f, 1.0f, x_1268);
  let x_1270 : f32 = u_xlat23;
  let x_1272 : vec4<f32> = u_xlat3;
  let x_1274 : vec3<f32> = (vec3<f32>(x_1270, x_1270, x_1270) * vec3<f32>(x_1272.x, x_1272.y, x_1272.z));
  let x_1275 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_1274.x, x_1274.y, x_1274.z, x_1275.w);
  let x_1277 : vec4<f32> = u_xlat3;
  let x_1280 : vec4<f32> = x_34.x_SSAOParams;
  let x_1282 : vec3<f32> = (vec3<f32>(x_1277.x, x_1277.y, x_1277.z) * vec3<f32>(x_1280.y, x_1280.y, x_1280.y));
  let x_1283 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_1282.x, x_1282.y, x_1282.z, x_1283.w);
  let x_1285 : vec4<f32> = u_xlat3;
  let x_1290 : vec3<f32> = u_xlat2;
  let x_1291 : vec3<f32> = ((vec3<f32>(x_1285.x, x_1285.y, x_1285.z) * vec3<f32>(0.200000003f, 0.200000003f, 0.200000003f)) + x_1290);
  let x_1292 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_1291.x, x_1291.y, x_1291.z, x_1292.w);
  let x_1294 : vec4<f32> = u_xlat3;
  let x_1297 : vec4<f32> = x_34.x_CameraViewProjections[0i][1i];
  let x_1299 : vec2<f32> = (vec2<f32>(x_1294.y, x_1294.y) * vec2<f32>(x_1297.x, x_1297.y));
  let x_1300 : vec3<f32> = u_xlat10;
  u_xlat10 = vec3<f32>(x_1299.x, x_1300.y, x_1299.y);
  let x_1303 : vec4<f32> = x_34.x_CameraViewProjections[0i][0i];
  let x_1305 : vec4<f32> = u_xlat3;
  let x_1308 : vec3<f32> = u_xlat10;
  let x_1310 : vec2<f32> = ((vec2<f32>(x_1303.x, x_1303.y) * vec2<f32>(x_1305.x, x_1305.x)) + vec2<f32>(x_1308.x, x_1308.z));
  let x_1311 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_1310.x, x_1310.y, x_1311.z, x_1311.w);
  let x_1314 : vec4<f32> = x_34.x_CameraViewProjections[0i][2i];
  let x_1316 : vec4<f32> = u_xlat3;
  let x_1319 : vec4<f32> = u_xlat3;
  let x_1321 : vec2<f32> = ((vec2<f32>(x_1314.x, x_1314.y) * vec2<f32>(x_1316.z, x_1316.z)) + vec2<f32>(x_1319.x, x_1319.y));
  let x_1322 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_1321.x, x_1321.y, x_1322.z, x_1322.w);
  let x_1324 : vec4<f32> = u_xlat3;
  let x_1326 : vec2<f32> = (vec2<f32>(x_1324.x, x_1324.y) + vec2<f32>(1.0f, 1.0f));
  let x_1327 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_1326.x, x_1326.y, x_1327.z, x_1327.w);
  let x_1329 : vec4<f32> = u_xlat3;
  let x_1331 : vec2<f32> = (vec2<f32>(x_1329.x, x_1329.y) * vec2<f32>(0.5f, 0.5f));
  let x_1332 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_1331.x, x_1331.y, x_1332.z, x_1332.w);
  let x_1334 : vec4<f32> = u_xlat3;
  let x_1338 : vec2<f32> = clamp(vec2<f32>(x_1334.x, x_1334.y), vec2<f32>(0.0f, 0.0f), vec2<f32>(1.0f, 1.0f));
  let x_1339 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_1338.x, x_1338.y, x_1339.z, x_1339.w);
  let x_1344 : vec4<f32> = u_xlat3;
  let x_1347 : f32 = x_34.x_GlobalMipBias.x;
  let x_1348 : vec4<f32> = textureSampleBias(x_CameraDepthTexture, sampler_CameraDepthTexture, vec2<f32>(x_1344.x, x_1344.y), x_1347);
  u_xlat23 = x_1348.x;
  let x_1351 : f32 = u_xlat7.x;
  let x_1353 : f32 = u_xlat23;
  let x_1356 : f32 = x_34.x_ProjectionParams.z;
  u_xlat17 = ((-(x_1351) * x_1353) + x_1356);
  let x_1358 : f32 = u_xlat0;
  let x_1359 : f32 = u_xlat17;
  u_xlat24 = (x_1358 + -(x_1359));
  let x_1362 : f32 = u_xlat24;
  let x_1365 : f32 = x_34.x_SSAOParams.y;
  u_xlatb24 = (abs(x_1362) < x_1365);
  let x_1367 : bool = u_xlatb24;
  u_xlat24 = select(0.0f, 1.0f, x_1367);
  let x_1369 : f32 = u_xlat23;
  u_xlatb23 = (0.00001f < x_1369);
  let x_1371 : bool = u_xlatb23;
  u_xlat23 = select(0.0f, 1.0f, x_1371);
  let x_1373 : f32 = u_xlat23;
  let x_1374 : f32 = u_xlat24;
  u_xlat23 = (x_1373 * x_1374);
  let x_1377 : f32 = u_xlat3.y;
  u_xlat10.x = (-(x_1377) + 1.0f);
  let x_1381 : f32 = u_xlat17;
  let x_1383 : f32 = x_34.x_ProjectionParams.w;
  u_xlat17 = (x_1381 * x_1383);
  let x_1386 : vec4<f32> = x_34.x_CameraViewXExtent[0i];
  let x_1388 : vec4<f32> = u_xlat3;
  let x_1392 : vec4<f32> = x_34.x_CameraViewTopLeftCorner[0i];
  u_xlat4 = ((vec3<f32>(x_1386.x, x_1386.y, x_1386.z) * vec3<f32>(x_1388.x, x_1388.x, x_1388.x)) + vec3<f32>(x_1392.x, x_1392.y, x_1392.z));
  let x_1396 : vec4<f32> = x_34.x_CameraViewYExtent[0i];
  let x_1398 : vec3<f32> = u_xlat10;
  let x_1401 : vec3<f32> = u_xlat4;
  let x_1402 : vec3<f32> = ((vec3<f32>(x_1396.x, x_1396.y, x_1396.z) * vec3<f32>(x_1398.x, x_1398.x, x_1398.x)) + x_1401);
  let x_1403 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_1402.x, x_1402.y, x_1403.z, x_1402.z);
  let x_1406 : vec4<f32> = x_34.x_CameraViewZExtent[0i];
  let x_1408 : f32 = u_xlat17;
  let x_1411 : vec4<f32> = u_xlat3;
  let x_1413 : vec3<f32> = ((vec3<f32>(x_1406.x, x_1406.y, x_1406.z) * vec3<f32>(x_1408, x_1408, x_1408)) + vec3<f32>(x_1411.x, x_1411.y, x_1411.w));
  let x_1414 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_1413.x, x_1413.y, x_1413.z, x_1414.w);
  let x_1416 : vec3<f32> = u_xlat2;
  let x_1418 : vec4<f32> = u_xlat3;
  let x_1420 : vec3<f32> = (-(x_1416) + vec3<f32>(x_1418.x, x_1418.y, x_1418.z));
  let x_1421 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_1420.x, x_1420.y, x_1420.z, x_1421.w);
  let x_1423 : vec4<f32> = u_xlat3;
  let x_1425 : vec3<f32> = u_xlat1;
  u_xlat24 = dot(vec3<f32>(x_1423.x, x_1423.y, x_1423.z), x_1425);
  let x_1427 : f32 = u_xlat0;
  let x_1430 : f32 = u_xlat24;
  u_xlat24 = ((-(x_1427) * 0.004f) + x_1430);
  let x_1432 : f32 = u_xlat24;
  u_xlat24 = max(x_1432, 0.0f);
  let x_1434 : vec4<f32> = u_xlat3;
  let x_1436 : vec4<f32> = u_xlat3;
  u_xlat3.x = dot(vec3<f32>(x_1434.x, x_1434.y, x_1434.z), vec3<f32>(x_1436.x, x_1436.y, x_1436.z));
  let x_1441 : f32 = u_xlat3.x;
  u_xlat3.x = (x_1441 + 0.0001f);
  let x_1445 : f32 = u_xlat3.x;
  u_xlat3.x = (1.0f / x_1445);
  let x_1449 : f32 = u_xlat3.x;
  let x_1450 : f32 = u_xlat24;
  u_xlat3.x = (x_1449 * x_1450);
  let x_1454 : f32 = u_xlat3.x;
  let x_1455 : f32 = u_xlat23;
  let x_1457 : f32 = u_xlat22;
  u_xlat22 = ((x_1454 * x_1455) + x_1457);
  let x_1459 : vec2<f32> = u_xlat14;
  let x_1462 : vec4<f32> = x_34.x_SSAOBlueNoiseParams;
  u_xlat3 = ((vec4<f32>(x_1459.x, x_1459.y, x_1459.x, x_1459.y) * vec4<f32>(x_1462.x, x_1462.y, x_1462.x, x_1462.y)) + vec4<f32>(0.416666687f, 0.416666687f, 0.5f, 0.5f));
  let x_1471 : vec4<f32> = u_xlat3;
  let x_1474 : f32 = x_34.x_GlobalMipBias.x;
  let x_1475 : vec4<f32> = textureSampleBias(x_BlueNoiseTexture, sampler_PointRepeat, vec2<f32>(x_1471.x, x_1471.y), x_1474);
  u_xlat23 = x_1475.w;
  let x_1477 : f32 = u_xlat23;
  let x_1482 : vec2<f32> = (vec2<f32>(x_1477, x_1477) + vec2<f32>(0.07421875f, 0.10546875f));
  let x_1483 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_1482.x, x_1482.y, x_1483.z, x_1483.w);
  let x_1486 : f32 = u_xlat3.x;
  u_xlat23 = fract(x_1486);
  let x_1488 : f32 = u_xlat23;
  u_xlat4.z = ((x_1488 * 2.0f) + -1.0f);
  let x_1493 : f32 = u_xlat3.y;
  u_xlat23 = (x_1493 * 628.31854248f);
  let x_1496 : f32 = u_xlat4.z;
  let x_1499 : f32 = u_xlat4.z;
  u_xlat3.x = ((-(x_1496) * x_1499) + 1.0f);
  let x_1504 : f32 = u_xlat3.x;
  u_xlat3.x = sqrt(x_1504);
  let x_1507 : f32 = u_xlat23;
  u_xlat5.x = sin(x_1507);
  let x_1510 : f32 = u_xlat23;
  u_xlat6 = cos(x_1510);
  let x_1513 : f32 = u_xlat3.x;
  let x_1514 : f32 = u_xlat6;
  u_xlat4.x = (x_1513 * x_1514);
  let x_1518 : f32 = u_xlat3.x;
  let x_1520 : f32 = u_xlat5.x;
  u_xlat4.y = (x_1518 * x_1520);
  let x_1523 : vec3<f32> = u_xlat1;
  let x_1524 : vec3<f32> = u_xlat4;
  u_xlat23 = dot(x_1523, x_1524);
  let x_1526 : f32 = u_xlat23;
  u_xlatb23 = (x_1526 >= 0.0f);
  let x_1528 : bool = u_xlatb23;
  u_xlat23 = select(-1.0f, 1.0f, x_1528);
  let x_1530 : f32 = u_xlat23;
  let x_1532 : vec3<f32> = u_xlat4;
  u_xlat4 = (vec3<f32>(x_1530, x_1530, x_1530) * x_1532);
  let x_1534 : vec3<f32> = u_xlat4;
  let x_1536 : vec4<f32> = x_34.x_SSAOParams;
  u_xlat4 = (x_1534 * vec3<f32>(x_1536.y, x_1536.y, x_1536.y));
  let x_1539 : vec3<f32> = u_xlat4;
  let x_1543 : vec3<f32> = u_xlat2;
  u_xlat4 = ((x_1539 * vec3<f32>(0.256250024f, 0.256250024f, 0.256250024f)) + x_1543);
  let x_1545 : vec3<f32> = u_xlat4;
  let x_1548 : vec4<f32> = x_34.x_CameraViewProjections[0i][1i];
  let x_1550 : vec2<f32> = (vec2<f32>(x_1545.y, x_1545.y) * vec2<f32>(x_1548.x, x_1548.y));
  let x_1551 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_1550.x, x_1550.y, x_1551.z, x_1551.w);
  let x_1554 : vec4<f32> = x_34.x_CameraViewProjections[0i][0i];
  let x_1556 : vec3<f32> = u_xlat4;
  let x_1559 : vec4<f32> = u_xlat3;
  let x_1561 : vec2<f32> = ((vec2<f32>(x_1554.x, x_1554.y) * vec2<f32>(x_1556.x, x_1556.x)) + vec2<f32>(x_1559.x, x_1559.y));
  let x_1562 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_1561.x, x_1561.y, x_1562.z, x_1562.w);
  let x_1565 : vec4<f32> = x_34.x_CameraViewProjections[0i][2i];
  let x_1567 : vec3<f32> = u_xlat4;
  let x_1570 : vec4<f32> = u_xlat3;
  let x_1572 : vec2<f32> = ((vec2<f32>(x_1565.x, x_1565.y) * vec2<f32>(x_1567.z, x_1567.z)) + vec2<f32>(x_1570.x, x_1570.y));
  let x_1573 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_1572.x, x_1572.y, x_1573.z, x_1573.w);
  let x_1575 : vec4<f32> = u_xlat3;
  let x_1577 : vec2<f32> = (vec2<f32>(x_1575.x, x_1575.y) + vec2<f32>(1.0f, 1.0f));
  let x_1578 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_1577.x, x_1577.y, x_1578.z, x_1578.w);
  let x_1580 : vec4<f32> = u_xlat3;
  let x_1582 : vec2<f32> = (vec2<f32>(x_1580.x, x_1580.y) * vec2<f32>(0.5f, 0.5f));
  let x_1583 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_1582.x, x_1582.y, x_1583.z, x_1583.w);
  let x_1585 : vec4<f32> = u_xlat3;
  let x_1589 : vec2<f32> = clamp(vec2<f32>(x_1585.x, x_1585.y), vec2<f32>(0.0f, 0.0f), vec2<f32>(1.0f, 1.0f));
  let x_1590 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_1589.x, x_1589.y, x_1590.z, x_1590.w);
  let x_1595 : vec4<f32> = u_xlat3;
  let x_1598 : f32 = x_34.x_GlobalMipBias.x;
  let x_1599 : vec4<f32> = textureSampleBias(x_CameraDepthTexture, sampler_CameraDepthTexture, vec2<f32>(x_1595.x, x_1595.y), x_1598);
  u_xlat23 = x_1599.x;
  let x_1602 : f32 = u_xlat7.x;
  let x_1604 : f32 = u_xlat23;
  let x_1607 : f32 = x_34.x_ProjectionParams.z;
  u_xlat4.x = ((-(x_1602) * x_1604) + x_1607);
  let x_1610 : f32 = u_xlat0;
  let x_1612 : f32 = u_xlat4.x;
  u_xlat11.x = (x_1610 + -(x_1612));
  let x_1617 : f32 = u_xlat11.x;
  let x_1620 : f32 = x_34.x_SSAOParams.y;
  u_xlatb11 = (abs(x_1617) < x_1620);
  let x_1622 : bool = u_xlatb11;
  u_xlat11.x = select(0.0f, 1.0f, x_1622);
  let x_1625 : f32 = u_xlat23;
  u_xlatb23 = (0.00001f < x_1625);
  let x_1627 : bool = u_xlatb23;
  u_xlat23 = select(0.0f, 1.0f, x_1627);
  let x_1629 : f32 = u_xlat23;
  let x_1631 : f32 = u_xlat11.x;
  u_xlat23 = (x_1629 * x_1631);
  let x_1634 : f32 = u_xlat3.y;
  u_xlat10.x = (-(x_1634) + 1.0f);
  let x_1639 : f32 = u_xlat4.x;
  let x_1641 : f32 = x_34.x_ProjectionParams.w;
  u_xlat4.x = (x_1639 * x_1641);
  let x_1645 : vec4<f32> = x_34.x_CameraViewXExtent[0i];
  let x_1647 : vec4<f32> = u_xlat3;
  let x_1651 : vec4<f32> = x_34.x_CameraViewTopLeftCorner[0i];
  u_xlat11 = ((vec3<f32>(x_1645.x, x_1645.y, x_1645.z) * vec3<f32>(x_1647.x, x_1647.x, x_1647.x)) + vec3<f32>(x_1651.x, x_1651.y, x_1651.z));
  let x_1655 : vec4<f32> = x_34.x_CameraViewYExtent[0i];
  let x_1657 : vec3<f32> = u_xlat10;
  let x_1660 : vec3<f32> = u_xlat11;
  u_xlat11 = ((vec3<f32>(x_1655.x, x_1655.y, x_1655.z) * vec3<f32>(x_1657.x, x_1657.x, x_1657.x)) + x_1660);
  let x_1663 : vec4<f32> = x_34.x_CameraViewZExtent[0i];
  let x_1665 : vec3<f32> = u_xlat4;
  let x_1668 : vec3<f32> = u_xlat11;
  u_xlat4 = ((vec3<f32>(x_1663.x, x_1663.y, x_1663.z) * vec3<f32>(x_1665.x, x_1665.x, x_1665.x)) + x_1668);
  let x_1670 : vec3<f32> = u_xlat2;
  let x_1672 : vec3<f32> = u_xlat4;
  u_xlat4 = (-(x_1670) + x_1672);
  let x_1674 : vec3<f32> = u_xlat4;
  let x_1675 : vec3<f32> = u_xlat1;
  u_xlat3.x = dot(x_1674, x_1675);
  let x_1678 : f32 = u_xlat0;
  let x_1682 : f32 = u_xlat3.x;
  u_xlat3.x = ((-(x_1678) * 0.004f) + x_1682);
  let x_1686 : f32 = u_xlat3.x;
  u_xlat3.x = max(x_1686, 0.0f);
  let x_1689 : vec3<f32> = u_xlat4;
  let x_1690 : vec3<f32> = u_xlat4;
  u_xlat10.x = dot(x_1689, x_1690);
  let x_1694 : f32 = u_xlat10.x;
  u_xlat10.x = (x_1694 + 0.0001f);
  let x_1698 : f32 = u_xlat10.x;
  u_xlat10.x = (1.0f / x_1698);
  let x_1702 : f32 = u_xlat10.x;
  let x_1704 : f32 = u_xlat3.x;
  u_xlat3.x = (x_1702 * x_1704);
  let x_1708 : f32 = u_xlat3.x;
  let x_1709 : f32 = u_xlat23;
  let x_1711 : f32 = u_xlat22;
  u_xlat22 = ((x_1708 * x_1709) + x_1711);
  let x_1716 : vec4<f32> = u_xlat3;
  let x_1719 : f32 = x_34.x_GlobalMipBias.x;
  let x_1720 : vec4<f32> = textureSampleBias(x_BlueNoiseTexture, sampler_PointRepeat, vec2<f32>(x_1716.z, x_1716.w), x_1719);
  u_xlat23 = x_1720.w;
  let x_1722 : f32 = u_xlat23;
  let x_1727 : vec2<f32> = (vec2<f32>(x_1722, x_1722) + vec2<f32>(0.23828125f, 0.640625f));
  let x_1728 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_1727.x, x_1727.y, x_1728.z, x_1728.w);
  let x_1731 : f32 = u_xlat3.x;
  u_xlat23 = fract(x_1731);
  let x_1733 : f32 = u_xlat23;
  u_xlat4.z = ((x_1733 * 2.0f) + -1.0f);
  let x_1738 : f32 = u_xlat3.y;
  u_xlat23 = (x_1738 * 628.31854248f);
  let x_1741 : f32 = u_xlat4.z;
  let x_1744 : f32 = u_xlat4.z;
  u_xlat3.x = ((-(x_1741) * x_1744) + 1.0f);
  let x_1749 : f32 = u_xlat3.x;
  u_xlat3.x = sqrt(x_1749);
  let x_1752 : f32 = u_xlat23;
  u_xlat5.x = sin(x_1752);
  let x_1755 : f32 = u_xlat23;
  u_xlat6 = cos(x_1755);
  let x_1758 : f32 = u_xlat3.x;
  let x_1759 : f32 = u_xlat6;
  u_xlat4.x = (x_1758 * x_1759);
  let x_1763 : f32 = u_xlat3.x;
  let x_1765 : f32 = u_xlat5.x;
  u_xlat4.y = (x_1763 * x_1765);
  let x_1768 : vec3<f32> = u_xlat1;
  let x_1769 : vec3<f32> = u_xlat4;
  u_xlat23 = dot(x_1768, x_1769);
  let x_1771 : f32 = u_xlat23;
  u_xlatb23 = (x_1771 >= 0.0f);
  let x_1773 : bool = u_xlatb23;
  u_xlat23 = select(-1.0f, 1.0f, x_1773);
  let x_1775 : f32 = u_xlat23;
  let x_1777 : vec3<f32> = u_xlat4;
  let x_1778 : vec3<f32> = (vec3<f32>(x_1775, x_1775, x_1775) * x_1777);
  let x_1779 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_1778.x, x_1778.y, x_1778.z, x_1779.w);
  let x_1781 : vec4<f32> = u_xlat3;
  let x_1784 : vec4<f32> = x_34.x_SSAOParams;
  let x_1786 : vec3<f32> = (vec3<f32>(x_1781.x, x_1781.y, x_1781.z) * vec3<f32>(x_1784.y, x_1784.y, x_1784.y));
  let x_1787 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_1786.x, x_1786.y, x_1786.z, x_1787.w);
  let x_1789 : vec4<f32> = u_xlat3;
  let x_1794 : vec3<f32> = u_xlat2;
  let x_1795 : vec3<f32> = ((vec3<f32>(x_1789.x, x_1789.y, x_1789.z) * vec3<f32>(0.324999988f, 0.324999988f, 0.324999988f)) + x_1794);
  let x_1796 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_1795.x, x_1795.y, x_1795.z, x_1796.w);
  let x_1798 : vec4<f32> = u_xlat3;
  let x_1801 : vec4<f32> = x_34.x_CameraViewProjections[0i][1i];
  let x_1803 : vec2<f32> = (vec2<f32>(x_1798.y, x_1798.y) * vec2<f32>(x_1801.x, x_1801.y));
  let x_1804 : vec3<f32> = u_xlat10;
  u_xlat10 = vec3<f32>(x_1803.x, x_1804.y, x_1803.y);
  let x_1807 : vec4<f32> = x_34.x_CameraViewProjections[0i][0i];
  let x_1809 : vec4<f32> = u_xlat3;
  let x_1812 : vec3<f32> = u_xlat10;
  let x_1814 : vec2<f32> = ((vec2<f32>(x_1807.x, x_1807.y) * vec2<f32>(x_1809.x, x_1809.x)) + vec2<f32>(x_1812.x, x_1812.z));
  let x_1815 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_1814.x, x_1814.y, x_1815.z, x_1815.w);
  let x_1818 : vec4<f32> = x_34.x_CameraViewProjections[0i][2i];
  let x_1820 : vec4<f32> = u_xlat3;
  let x_1823 : vec4<f32> = u_xlat3;
  let x_1825 : vec2<f32> = ((vec2<f32>(x_1818.x, x_1818.y) * vec2<f32>(x_1820.z, x_1820.z)) + vec2<f32>(x_1823.x, x_1823.y));
  let x_1826 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_1825.x, x_1825.y, x_1826.z, x_1826.w);
  let x_1828 : vec4<f32> = u_xlat3;
  let x_1830 : vec2<f32> = (vec2<f32>(x_1828.x, x_1828.y) + vec2<f32>(1.0f, 1.0f));
  let x_1831 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_1830.x, x_1830.y, x_1831.z, x_1831.w);
  let x_1833 : vec4<f32> = u_xlat3;
  let x_1835 : vec2<f32> = (vec2<f32>(x_1833.x, x_1833.y) * vec2<f32>(0.5f, 0.5f));
  let x_1836 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_1835.x, x_1835.y, x_1836.z, x_1836.w);
  let x_1838 : vec4<f32> = u_xlat3;
  let x_1842 : vec2<f32> = clamp(vec2<f32>(x_1838.x, x_1838.y), vec2<f32>(0.0f, 0.0f), vec2<f32>(1.0f, 1.0f));
  let x_1843 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_1842.x, x_1842.y, x_1843.z, x_1843.w);
  let x_1848 : vec4<f32> = u_xlat3;
  let x_1851 : f32 = x_34.x_GlobalMipBias.x;
  let x_1852 : vec4<f32> = textureSampleBias(x_CameraDepthTexture, sampler_CameraDepthTexture, vec2<f32>(x_1848.x, x_1848.y), x_1851);
  u_xlat23 = x_1852.x;
  let x_1855 : f32 = u_xlat7.x;
  let x_1857 : f32 = u_xlat23;
  let x_1860 : f32 = x_34.x_ProjectionParams.z;
  u_xlat17 = ((-(x_1855) * x_1857) + x_1860);
  let x_1862 : f32 = u_xlat0;
  let x_1863 : f32 = u_xlat17;
  u_xlat24 = (x_1862 + -(x_1863));
  let x_1866 : f32 = u_xlat24;
  let x_1869 : f32 = x_34.x_SSAOParams.y;
  u_xlatb24 = (abs(x_1866) < x_1869);
  let x_1871 : bool = u_xlatb24;
  u_xlat24 = select(0.0f, 1.0f, x_1871);
  let x_1873 : f32 = u_xlat23;
  u_xlatb23 = (0.00001f < x_1873);
  let x_1875 : bool = u_xlatb23;
  u_xlat23 = select(0.0f, 1.0f, x_1875);
  let x_1877 : f32 = u_xlat23;
  let x_1878 : f32 = u_xlat24;
  u_xlat23 = (x_1877 * x_1878);
  let x_1881 : f32 = u_xlat3.y;
  u_xlat10.x = (-(x_1881) + 1.0f);
  let x_1885 : f32 = u_xlat17;
  let x_1887 : f32 = x_34.x_ProjectionParams.w;
  u_xlat17 = (x_1885 * x_1887);
  let x_1890 : vec4<f32> = x_34.x_CameraViewXExtent[0i];
  let x_1892 : vec4<f32> = u_xlat3;
  let x_1896 : vec4<f32> = x_34.x_CameraViewTopLeftCorner[0i];
  u_xlat4 = ((vec3<f32>(x_1890.x, x_1890.y, x_1890.z) * vec3<f32>(x_1892.x, x_1892.x, x_1892.x)) + vec3<f32>(x_1896.x, x_1896.y, x_1896.z));
  let x_1900 : vec4<f32> = x_34.x_CameraViewYExtent[0i];
  let x_1902 : vec3<f32> = u_xlat10;
  let x_1905 : vec3<f32> = u_xlat4;
  let x_1906 : vec3<f32> = ((vec3<f32>(x_1900.x, x_1900.y, x_1900.z) * vec3<f32>(x_1902.x, x_1902.x, x_1902.x)) + x_1905);
  let x_1907 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_1906.x, x_1906.y, x_1907.z, x_1906.z);
  let x_1910 : vec4<f32> = x_34.x_CameraViewZExtent[0i];
  let x_1912 : f32 = u_xlat17;
  let x_1915 : vec4<f32> = u_xlat3;
  let x_1917 : vec3<f32> = ((vec3<f32>(x_1910.x, x_1910.y, x_1910.z) * vec3<f32>(x_1912, x_1912, x_1912)) + vec3<f32>(x_1915.x, x_1915.y, x_1915.w));
  let x_1918 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_1917.x, x_1917.y, x_1917.z, x_1918.w);
  let x_1920 : vec3<f32> = u_xlat2;
  let x_1922 : vec4<f32> = u_xlat3;
  let x_1924 : vec3<f32> = (-(x_1920) + vec3<f32>(x_1922.x, x_1922.y, x_1922.z));
  let x_1925 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_1924.x, x_1924.y, x_1924.z, x_1925.w);
  let x_1927 : vec4<f32> = u_xlat3;
  let x_1929 : vec3<f32> = u_xlat1;
  u_xlat24 = dot(vec3<f32>(x_1927.x, x_1927.y, x_1927.z), x_1929);
  let x_1931 : f32 = u_xlat0;
  let x_1934 : f32 = u_xlat24;
  u_xlat24 = ((-(x_1931) * 0.004f) + x_1934);
  let x_1936 : f32 = u_xlat24;
  u_xlat24 = max(x_1936, 0.0f);
  let x_1938 : vec4<f32> = u_xlat3;
  let x_1940 : vec4<f32> = u_xlat3;
  u_xlat3.x = dot(vec3<f32>(x_1938.x, x_1938.y, x_1938.z), vec3<f32>(x_1940.x, x_1940.y, x_1940.z));
  let x_1945 : f32 = u_xlat3.x;
  u_xlat3.x = (x_1945 + 0.0001f);
  let x_1949 : f32 = u_xlat3.x;
  u_xlat3.x = (1.0f / x_1949);
  let x_1953 : f32 = u_xlat3.x;
  let x_1954 : f32 = u_xlat24;
  u_xlat3.x = (x_1953 * x_1954);
  let x_1958 : f32 = u_xlat3.x;
  let x_1959 : f32 = u_xlat23;
  let x_1961 : f32 = u_xlat22;
  u_xlat22 = ((x_1958 * x_1959) + x_1961);
  let x_1963 : vec2<f32> = u_xlat14;
  let x_1966 : vec4<f32> = x_34.x_SSAOBlueNoiseParams;
  u_xlat3 = ((vec4<f32>(x_1963.x, x_1963.y, x_1963.x, x_1963.y) * vec4<f32>(x_1966.x, x_1966.y, x_1966.x, x_1966.y)) + vec4<f32>(0.583333373f, 0.583333373f, 0.666666687f, 0.666666687f));
  let x_1976 : vec4<f32> = u_xlat3;
  let x_1979 : f32 = x_34.x_GlobalMipBias.x;
  let x_1980 : vec4<f32> = textureSampleBias(x_BlueNoiseTexture, sampler_PointRepeat, vec2<f32>(x_1976.x, x_1976.y), x_1979);
  u_xlat23 = x_1980.w;
  let x_1982 : f32 = u_xlat23;
  let x_1986 : vec2<f32> = (vec2<f32>(x_1982, x_1982) + vec2<f32>(0.640625f, 0.74609375f));
  let x_1987 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_1986.x, x_1986.y, x_1987.z, x_1987.w);
  let x_1990 : f32 = u_xlat3.x;
  u_xlat23 = fract(x_1990);
  let x_1992 : f32 = u_xlat23;
  u_xlat4.z = ((x_1992 * 2.0f) + -1.0f);
  let x_1997 : f32 = u_xlat3.y;
  u_xlat23 = (x_1997 * 628.31854248f);
  let x_2000 : f32 = u_xlat4.z;
  let x_2003 : f32 = u_xlat4.z;
  u_xlat3.x = ((-(x_2000) * x_2003) + 1.0f);
  let x_2008 : f32 = u_xlat3.x;
  u_xlat3.x = sqrt(x_2008);
  let x_2011 : f32 = u_xlat23;
  u_xlat5.x = sin(x_2011);
  let x_2014 : f32 = u_xlat23;
  u_xlat6 = cos(x_2014);
  let x_2017 : f32 = u_xlat3.x;
  let x_2018 : f32 = u_xlat6;
  u_xlat4.x = (x_2017 * x_2018);
  let x_2022 : f32 = u_xlat3.x;
  let x_2024 : f32 = u_xlat5.x;
  u_xlat4.y = (x_2022 * x_2024);
  let x_2027 : vec3<f32> = u_xlat1;
  let x_2028 : vec3<f32> = u_xlat4;
  u_xlat23 = dot(x_2027, x_2028);
  let x_2030 : f32 = u_xlat23;
  u_xlatb23 = (x_2030 >= 0.0f);
  let x_2032 : bool = u_xlatb23;
  u_xlat23 = select(-1.0f, 1.0f, x_2032);
  let x_2034 : f32 = u_xlat23;
  let x_2036 : vec3<f32> = u_xlat4;
  u_xlat4 = (vec3<f32>(x_2034, x_2034, x_2034) * x_2036);
  let x_2038 : vec3<f32> = u_xlat4;
  let x_2040 : vec4<f32> = x_34.x_SSAOParams;
  u_xlat4 = (x_2038 * vec3<f32>(x_2040.y, x_2040.y, x_2040.y));
  let x_2043 : vec3<f32> = u_xlat4;
  let x_2047 : vec3<f32> = u_xlat2;
  u_xlat4 = ((x_2043 * vec3<f32>(0.40625003f, 0.40625003f, 0.40625003f)) + x_2047);
  let x_2049 : vec3<f32> = u_xlat4;
  let x_2052 : vec4<f32> = x_34.x_CameraViewProjections[0i][1i];
  let x_2054 : vec2<f32> = (vec2<f32>(x_2049.y, x_2049.y) * vec2<f32>(x_2052.x, x_2052.y));
  let x_2055 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_2054.x, x_2054.y, x_2055.z, x_2055.w);
  let x_2058 : vec4<f32> = x_34.x_CameraViewProjections[0i][0i];
  let x_2060 : vec3<f32> = u_xlat4;
  let x_2063 : vec4<f32> = u_xlat3;
  let x_2065 : vec2<f32> = ((vec2<f32>(x_2058.x, x_2058.y) * vec2<f32>(x_2060.x, x_2060.x)) + vec2<f32>(x_2063.x, x_2063.y));
  let x_2066 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_2065.x, x_2065.y, x_2066.z, x_2066.w);
  let x_2069 : vec4<f32> = x_34.x_CameraViewProjections[0i][2i];
  let x_2071 : vec3<f32> = u_xlat4;
  let x_2074 : vec4<f32> = u_xlat3;
  let x_2076 : vec2<f32> = ((vec2<f32>(x_2069.x, x_2069.y) * vec2<f32>(x_2071.z, x_2071.z)) + vec2<f32>(x_2074.x, x_2074.y));
  let x_2077 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_2076.x, x_2076.y, x_2077.z, x_2077.w);
  let x_2079 : vec4<f32> = u_xlat3;
  let x_2081 : vec2<f32> = (vec2<f32>(x_2079.x, x_2079.y) + vec2<f32>(1.0f, 1.0f));
  let x_2082 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_2081.x, x_2081.y, x_2082.z, x_2082.w);
  let x_2084 : vec4<f32> = u_xlat3;
  let x_2086 : vec2<f32> = (vec2<f32>(x_2084.x, x_2084.y) * vec2<f32>(0.5f, 0.5f));
  let x_2087 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_2086.x, x_2086.y, x_2087.z, x_2087.w);
  let x_2089 : vec4<f32> = u_xlat3;
  let x_2093 : vec2<f32> = clamp(vec2<f32>(x_2089.x, x_2089.y), vec2<f32>(0.0f, 0.0f), vec2<f32>(1.0f, 1.0f));
  let x_2094 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_2093.x, x_2093.y, x_2094.z, x_2094.w);
  let x_2099 : vec4<f32> = u_xlat3;
  let x_2102 : f32 = x_34.x_GlobalMipBias.x;
  let x_2103 : vec4<f32> = textureSampleBias(x_CameraDepthTexture, sampler_CameraDepthTexture, vec2<f32>(x_2099.x, x_2099.y), x_2102);
  u_xlat23 = x_2103.x;
  let x_2106 : f32 = u_xlat7.x;
  let x_2108 : f32 = u_xlat23;
  let x_2111 : f32 = x_34.x_ProjectionParams.z;
  u_xlat4.x = ((-(x_2106) * x_2108) + x_2111);
  let x_2114 : f32 = u_xlat0;
  let x_2116 : f32 = u_xlat4.x;
  u_xlat11.x = (x_2114 + -(x_2116));
  let x_2121 : f32 = u_xlat11.x;
  let x_2124 : f32 = x_34.x_SSAOParams.y;
  u_xlatb11 = (abs(x_2121) < x_2124);
  let x_2126 : bool = u_xlatb11;
  u_xlat11.x = select(0.0f, 1.0f, x_2126);
  let x_2129 : f32 = u_xlat23;
  u_xlatb23 = (0.00001f < x_2129);
  let x_2131 : bool = u_xlatb23;
  u_xlat23 = select(0.0f, 1.0f, x_2131);
  let x_2133 : f32 = u_xlat23;
  let x_2135 : f32 = u_xlat11.x;
  u_xlat23 = (x_2133 * x_2135);
  let x_2138 : f32 = u_xlat3.y;
  u_xlat10.x = (-(x_2138) + 1.0f);
  let x_2143 : f32 = u_xlat4.x;
  let x_2145 : f32 = x_34.x_ProjectionParams.w;
  u_xlat4.x = (x_2143 * x_2145);
  let x_2149 : vec4<f32> = x_34.x_CameraViewXExtent[0i];
  let x_2151 : vec4<f32> = u_xlat3;
  let x_2155 : vec4<f32> = x_34.x_CameraViewTopLeftCorner[0i];
  u_xlat11 = ((vec3<f32>(x_2149.x, x_2149.y, x_2149.z) * vec3<f32>(x_2151.x, x_2151.x, x_2151.x)) + vec3<f32>(x_2155.x, x_2155.y, x_2155.z));
  let x_2159 : vec4<f32> = x_34.x_CameraViewYExtent[0i];
  let x_2161 : vec3<f32> = u_xlat10;
  let x_2164 : vec3<f32> = u_xlat11;
  u_xlat11 = ((vec3<f32>(x_2159.x, x_2159.y, x_2159.z) * vec3<f32>(x_2161.x, x_2161.x, x_2161.x)) + x_2164);
  let x_2167 : vec4<f32> = x_34.x_CameraViewZExtent[0i];
  let x_2169 : vec3<f32> = u_xlat4;
  let x_2172 : vec3<f32> = u_xlat11;
  u_xlat4 = ((vec3<f32>(x_2167.x, x_2167.y, x_2167.z) * vec3<f32>(x_2169.x, x_2169.x, x_2169.x)) + x_2172);
  let x_2174 : vec3<f32> = u_xlat2;
  let x_2176 : vec3<f32> = u_xlat4;
  u_xlat4 = (-(x_2174) + x_2176);
  let x_2178 : vec3<f32> = u_xlat4;
  let x_2179 : vec3<f32> = u_xlat1;
  u_xlat3.x = dot(x_2178, x_2179);
  let x_2182 : f32 = u_xlat0;
  let x_2186 : f32 = u_xlat3.x;
  u_xlat3.x = ((-(x_2182) * 0.004f) + x_2186);
  let x_2190 : f32 = u_xlat3.x;
  u_xlat3.x = max(x_2190, 0.0f);
  let x_2193 : vec3<f32> = u_xlat4;
  let x_2194 : vec3<f32> = u_xlat4;
  u_xlat10.x = dot(x_2193, x_2194);
  let x_2198 : f32 = u_xlat10.x;
  u_xlat10.x = (x_2198 + 0.0001f);
  let x_2202 : f32 = u_xlat10.x;
  u_xlat10.x = (1.0f / x_2202);
  let x_2206 : f32 = u_xlat10.x;
  let x_2208 : f32 = u_xlat3.x;
  u_xlat3.x = (x_2206 * x_2208);
  let x_2212 : f32 = u_xlat3.x;
  let x_2213 : f32 = u_xlat23;
  let x_2215 : f32 = u_xlat22;
  u_xlat22 = ((x_2212 * x_2213) + x_2215);
  let x_2220 : vec4<f32> = u_xlat3;
  let x_2223 : f32 = x_34.x_GlobalMipBias.x;
  let x_2224 : vec4<f32> = textureSampleBias(x_BlueNoiseTexture, sampler_PointRepeat, vec2<f32>(x_2220.z, x_2220.w), x_2223);
  u_xlat23 = x_2224.w;
  let x_2226 : f32 = u_xlat23;
  let x_2231 : vec2<f32> = (vec2<f32>(x_2226, x_2226) + vec2<f32>(0.359375f, 0.6796875f));
  let x_2232 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_2231.x, x_2231.y, x_2232.z, x_2232.w);
  let x_2235 : f32 = u_xlat3.x;
  u_xlat23 = fract(x_2235);
  let x_2237 : f32 = u_xlat23;
  u_xlat4.z = ((x_2237 * 2.0f) + -1.0f);
  let x_2242 : f32 = u_xlat3.y;
  u_xlat23 = (x_2242 * 628.31854248f);
  let x_2245 : f32 = u_xlat4.z;
  let x_2248 : f32 = u_xlat4.z;
  u_xlat3.x = ((-(x_2245) * x_2248) + 1.0f);
  let x_2253 : f32 = u_xlat3.x;
  u_xlat3.x = sqrt(x_2253);
  let x_2256 : f32 = u_xlat23;
  u_xlat5.x = sin(x_2256);
  let x_2259 : f32 = u_xlat23;
  u_xlat6 = cos(x_2259);
  let x_2262 : f32 = u_xlat3.x;
  let x_2263 : f32 = u_xlat6;
  u_xlat4.x = (x_2262 * x_2263);
  let x_2267 : f32 = u_xlat3.x;
  let x_2269 : f32 = u_xlat5.x;
  u_xlat4.y = (x_2267 * x_2269);
  let x_2272 : vec3<f32> = u_xlat1;
  let x_2273 : vec3<f32> = u_xlat4;
  u_xlat23 = dot(x_2272, x_2273);
  let x_2275 : f32 = u_xlat23;
  u_xlatb23 = (x_2275 >= 0.0f);
  let x_2277 : bool = u_xlatb23;
  u_xlat23 = select(-1.0f, 1.0f, x_2277);
  let x_2279 : f32 = u_xlat23;
  let x_2281 : vec3<f32> = u_xlat4;
  let x_2282 : vec3<f32> = (vec3<f32>(x_2279, x_2279, x_2279) * x_2281);
  let x_2283 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_2282.x, x_2282.y, x_2282.z, x_2283.w);
  let x_2285 : vec4<f32> = u_xlat3;
  let x_2288 : vec4<f32> = x_34.x_SSAOParams;
  let x_2290 : vec3<f32> = (vec3<f32>(x_2285.x, x_2285.y, x_2285.z) * vec3<f32>(x_2288.y, x_2288.y, x_2288.y));
  let x_2291 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_2290.x, x_2290.y, x_2290.z, x_2291.w);
  let x_2293 : vec4<f32> = u_xlat3;
  let x_2297 : vec3<f32> = u_xlat2;
  let x_2298 : vec3<f32> = ((vec3<f32>(x_2293.x, x_2293.y, x_2293.z) * vec3<f32>(0.5f, 0.5f, 0.5f)) + x_2297);
  let x_2299 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_2298.x, x_2298.y, x_2298.z, x_2299.w);
  let x_2301 : vec4<f32> = u_xlat3;
  let x_2304 : vec4<f32> = x_34.x_CameraViewProjections[0i][1i];
  let x_2306 : vec2<f32> = (vec2<f32>(x_2301.y, x_2301.y) * vec2<f32>(x_2304.x, x_2304.y));
  let x_2307 : vec3<f32> = u_xlat10;
  u_xlat10 = vec3<f32>(x_2306.x, x_2307.y, x_2306.y);
  let x_2310 : vec4<f32> = x_34.x_CameraViewProjections[0i][0i];
  let x_2312 : vec4<f32> = u_xlat3;
  let x_2315 : vec3<f32> = u_xlat10;
  let x_2317 : vec2<f32> = ((vec2<f32>(x_2310.x, x_2310.y) * vec2<f32>(x_2312.x, x_2312.x)) + vec2<f32>(x_2315.x, x_2315.z));
  let x_2318 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_2317.x, x_2317.y, x_2318.z, x_2318.w);
  let x_2321 : vec4<f32> = x_34.x_CameraViewProjections[0i][2i];
  let x_2323 : vec4<f32> = u_xlat3;
  let x_2326 : vec4<f32> = u_xlat3;
  let x_2328 : vec2<f32> = ((vec2<f32>(x_2321.x, x_2321.y) * vec2<f32>(x_2323.z, x_2323.z)) + vec2<f32>(x_2326.x, x_2326.y));
  let x_2329 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_2328.x, x_2328.y, x_2329.z, x_2329.w);
  let x_2331 : vec4<f32> = u_xlat3;
  let x_2333 : vec2<f32> = (vec2<f32>(x_2331.x, x_2331.y) + vec2<f32>(1.0f, 1.0f));
  let x_2334 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_2333.x, x_2333.y, x_2334.z, x_2334.w);
  let x_2336 : vec4<f32> = u_xlat3;
  let x_2338 : vec2<f32> = (vec2<f32>(x_2336.x, x_2336.y) * vec2<f32>(0.5f, 0.5f));
  let x_2339 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_2338.x, x_2338.y, x_2339.z, x_2339.w);
  let x_2341 : vec4<f32> = u_xlat3;
  let x_2345 : vec2<f32> = clamp(vec2<f32>(x_2341.x, x_2341.y), vec2<f32>(0.0f, 0.0f), vec2<f32>(1.0f, 1.0f));
  let x_2346 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_2345.x, x_2345.y, x_2346.z, x_2346.w);
  let x_2351 : vec4<f32> = u_xlat3;
  let x_2354 : f32 = x_34.x_GlobalMipBias.x;
  let x_2355 : vec4<f32> = textureSampleBias(x_CameraDepthTexture, sampler_CameraDepthTexture, vec2<f32>(x_2351.x, x_2351.y), x_2354);
  u_xlat23 = x_2355.x;
  let x_2358 : f32 = u_xlat7.x;
  let x_2360 : f32 = u_xlat23;
  let x_2363 : f32 = x_34.x_ProjectionParams.z;
  u_xlat17 = ((-(x_2358) * x_2360) + x_2363);
  let x_2365 : f32 = u_xlat0;
  let x_2366 : f32 = u_xlat17;
  u_xlat24 = (x_2365 + -(x_2366));
  let x_2369 : f32 = u_xlat24;
  let x_2372 : f32 = x_34.x_SSAOParams.y;
  u_xlatb24 = (abs(x_2369) < x_2372);
  let x_2374 : bool = u_xlatb24;
  u_xlat24 = select(0.0f, 1.0f, x_2374);
  let x_2376 : f32 = u_xlat23;
  u_xlatb23 = (0.00001f < x_2376);
  let x_2378 : bool = u_xlatb23;
  u_xlat23 = select(0.0f, 1.0f, x_2378);
  let x_2380 : f32 = u_xlat23;
  let x_2381 : f32 = u_xlat24;
  u_xlat23 = (x_2380 * x_2381);
  let x_2384 : f32 = u_xlat3.y;
  u_xlat10.x = (-(x_2384) + 1.0f);
  let x_2388 : f32 = u_xlat17;
  let x_2390 : f32 = x_34.x_ProjectionParams.w;
  u_xlat17 = (x_2388 * x_2390);
  let x_2393 : vec4<f32> = x_34.x_CameraViewXExtent[0i];
  let x_2395 : vec4<f32> = u_xlat3;
  let x_2399 : vec4<f32> = x_34.x_CameraViewTopLeftCorner[0i];
  u_xlat4 = ((vec3<f32>(x_2393.x, x_2393.y, x_2393.z) * vec3<f32>(x_2395.x, x_2395.x, x_2395.x)) + vec3<f32>(x_2399.x, x_2399.y, x_2399.z));
  let x_2403 : vec4<f32> = x_34.x_CameraViewYExtent[0i];
  let x_2405 : vec3<f32> = u_xlat10;
  let x_2408 : vec3<f32> = u_xlat4;
  let x_2409 : vec3<f32> = ((vec3<f32>(x_2403.x, x_2403.y, x_2403.z) * vec3<f32>(x_2405.x, x_2405.x, x_2405.x)) + x_2408);
  let x_2410 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_2409.x, x_2409.y, x_2410.z, x_2409.z);
  let x_2413 : vec4<f32> = x_34.x_CameraViewZExtent[0i];
  let x_2415 : f32 = u_xlat17;
  let x_2418 : vec4<f32> = u_xlat3;
  let x_2420 : vec3<f32> = ((vec3<f32>(x_2413.x, x_2413.y, x_2413.z) * vec3<f32>(x_2415, x_2415, x_2415)) + vec3<f32>(x_2418.x, x_2418.y, x_2418.w));
  let x_2421 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_2420.x, x_2420.y, x_2420.z, x_2421.w);
  let x_2423 : vec3<f32> = u_xlat2;
  let x_2425 : vec4<f32> = u_xlat3;
  let x_2427 : vec3<f32> = (-(x_2423) + vec3<f32>(x_2425.x, x_2425.y, x_2425.z));
  let x_2428 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_2427.x, x_2427.y, x_2427.z, x_2428.w);
  let x_2430 : vec4<f32> = u_xlat3;
  let x_2432 : vec3<f32> = u_xlat1;
  u_xlat24 = dot(vec3<f32>(x_2430.x, x_2430.y, x_2430.z), x_2432);
  let x_2434 : f32 = u_xlat0;
  let x_2437 : f32 = u_xlat24;
  u_xlat24 = ((-(x_2434) * 0.004f) + x_2437);
  let x_2439 : f32 = u_xlat24;
  u_xlat24 = max(x_2439, 0.0f);
  let x_2441 : vec4<f32> = u_xlat3;
  let x_2443 : vec4<f32> = u_xlat3;
  u_xlat3.x = dot(vec3<f32>(x_2441.x, x_2441.y, x_2441.z), vec3<f32>(x_2443.x, x_2443.y, x_2443.z));
  let x_2448 : f32 = u_xlat3.x;
  u_xlat3.x = (x_2448 + 0.0001f);
  let x_2452 : f32 = u_xlat3.x;
  u_xlat3.x = (1.0f / x_2452);
  let x_2456 : f32 = u_xlat3.x;
  let x_2457 : f32 = u_xlat24;
  u_xlat3.x = (x_2456 * x_2457);
  let x_2461 : f32 = u_xlat3.x;
  let x_2462 : f32 = u_xlat23;
  let x_2464 : f32 = u_xlat22;
  u_xlat22 = ((x_2461 * x_2462) + x_2464);
  let x_2466 : vec2<f32> = u_xlat14;
  let x_2469 : vec4<f32> = x_34.x_SSAOBlueNoiseParams;
  u_xlat3 = ((vec4<f32>(x_2466.x, x_2466.y, x_2466.x, x_2466.y) * vec4<f32>(x_2469.x, x_2469.y, x_2469.x, x_2469.y)) + vec4<f32>(0.75f, 0.75f, 0.833333373f, 0.833333373f));
  let x_2479 : vec4<f32> = u_xlat3;
  let x_2482 : f32 = x_34.x_GlobalMipBias.x;
  let x_2483 : vec4<f32> = textureSampleBias(x_BlueNoiseTexture, sampler_PointRepeat, vec2<f32>(x_2479.x, x_2479.y), x_2482);
  u_xlat23 = x_2483.w;
  let x_2485 : f32 = u_xlat23;
  let x_2490 : vec2<f32> = (vec2<f32>(x_2485, x_2485) + vec2<f32>(0.5078125f, 0.3515625f));
  let x_2491 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_2490.x, x_2490.y, x_2491.z, x_2491.w);
  let x_2494 : f32 = u_xlat3.x;
  u_xlat23 = fract(x_2494);
  let x_2496 : f32 = u_xlat23;
  u_xlat4.z = ((x_2496 * 2.0f) + -1.0f);
  let x_2501 : f32 = u_xlat3.y;
  u_xlat23 = (x_2501 * 628.31854248f);
  let x_2504 : f32 = u_xlat4.z;
  let x_2507 : f32 = u_xlat4.z;
  u_xlat3.x = ((-(x_2504) * x_2507) + 1.0f);
  let x_2512 : f32 = u_xlat3.x;
  u_xlat3.x = sqrt(x_2512);
  let x_2515 : f32 = u_xlat23;
  u_xlat5.x = sin(x_2515);
  let x_2518 : f32 = u_xlat23;
  u_xlat6 = cos(x_2518);
  let x_2521 : f32 = u_xlat3.x;
  let x_2522 : f32 = u_xlat6;
  u_xlat4.x = (x_2521 * x_2522);
  let x_2526 : f32 = u_xlat3.x;
  let x_2528 : f32 = u_xlat5.x;
  u_xlat4.y = (x_2526 * x_2528);
  let x_2531 : vec3<f32> = u_xlat1;
  let x_2532 : vec3<f32> = u_xlat4;
  u_xlat23 = dot(x_2531, x_2532);
  let x_2534 : f32 = u_xlat23;
  u_xlatb23 = (x_2534 >= 0.0f);
  let x_2536 : bool = u_xlatb23;
  u_xlat23 = select(-1.0f, 1.0f, x_2536);
  let x_2538 : f32 = u_xlat23;
  let x_2540 : vec3<f32> = u_xlat4;
  u_xlat4 = (vec3<f32>(x_2538, x_2538, x_2538) * x_2540);
  let x_2542 : vec3<f32> = u_xlat4;
  let x_2544 : vec4<f32> = x_34.x_SSAOParams;
  u_xlat4 = (x_2542 * vec3<f32>(x_2544.y, x_2544.y, x_2544.y));
  let x_2547 : vec3<f32> = u_xlat4;
  let x_2551 : vec3<f32> = u_xlat2;
  u_xlat4 = ((x_2547 * vec3<f32>(0.606249988f, 0.606249988f, 0.606249988f)) + x_2551);
  let x_2553 : vec3<f32> = u_xlat4;
  let x_2556 : vec4<f32> = x_34.x_CameraViewProjections[0i][1i];
  let x_2558 : vec2<f32> = (vec2<f32>(x_2553.y, x_2553.y) * vec2<f32>(x_2556.x, x_2556.y));
  let x_2559 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_2558.x, x_2558.y, x_2559.z, x_2559.w);
  let x_2562 : vec4<f32> = x_34.x_CameraViewProjections[0i][0i];
  let x_2564 : vec3<f32> = u_xlat4;
  let x_2567 : vec4<f32> = u_xlat3;
  let x_2569 : vec2<f32> = ((vec2<f32>(x_2562.x, x_2562.y) * vec2<f32>(x_2564.x, x_2564.x)) + vec2<f32>(x_2567.x, x_2567.y));
  let x_2570 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_2569.x, x_2569.y, x_2570.z, x_2570.w);
  let x_2573 : vec4<f32> = x_34.x_CameraViewProjections[0i][2i];
  let x_2575 : vec3<f32> = u_xlat4;
  let x_2578 : vec4<f32> = u_xlat3;
  let x_2580 : vec2<f32> = ((vec2<f32>(x_2573.x, x_2573.y) * vec2<f32>(x_2575.z, x_2575.z)) + vec2<f32>(x_2578.x, x_2578.y));
  let x_2581 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_2580.x, x_2580.y, x_2581.z, x_2581.w);
  let x_2583 : vec4<f32> = u_xlat3;
  let x_2585 : vec2<f32> = (vec2<f32>(x_2583.x, x_2583.y) + vec2<f32>(1.0f, 1.0f));
  let x_2586 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_2585.x, x_2585.y, x_2586.z, x_2586.w);
  let x_2588 : vec4<f32> = u_xlat3;
  let x_2590 : vec2<f32> = (vec2<f32>(x_2588.x, x_2588.y) * vec2<f32>(0.5f, 0.5f));
  let x_2591 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_2590.x, x_2590.y, x_2591.z, x_2591.w);
  let x_2593 : vec4<f32> = u_xlat3;
  let x_2597 : vec2<f32> = clamp(vec2<f32>(x_2593.x, x_2593.y), vec2<f32>(0.0f, 0.0f), vec2<f32>(1.0f, 1.0f));
  let x_2598 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_2597.x, x_2597.y, x_2598.z, x_2598.w);
  let x_2603 : vec4<f32> = u_xlat3;
  let x_2606 : f32 = x_34.x_GlobalMipBias.x;
  let x_2607 : vec4<f32> = textureSampleBias(x_CameraDepthTexture, sampler_CameraDepthTexture, vec2<f32>(x_2603.x, x_2603.y), x_2606);
  u_xlat23 = x_2607.x;
  let x_2610 : f32 = u_xlat7.x;
  let x_2612 : f32 = u_xlat23;
  let x_2615 : f32 = x_34.x_ProjectionParams.z;
  u_xlat4.x = ((-(x_2610) * x_2612) + x_2615);
  let x_2618 : f32 = u_xlat0;
  let x_2620 : f32 = u_xlat4.x;
  u_xlat11.x = (x_2618 + -(x_2620));
  let x_2625 : f32 = u_xlat11.x;
  let x_2628 : f32 = x_34.x_SSAOParams.y;
  u_xlatb11 = (abs(x_2625) < x_2628);
  let x_2630 : bool = u_xlatb11;
  u_xlat11.x = select(0.0f, 1.0f, x_2630);
  let x_2633 : f32 = u_xlat23;
  u_xlatb23 = (0.00001f < x_2633);
  let x_2635 : bool = u_xlatb23;
  u_xlat23 = select(0.0f, 1.0f, x_2635);
  let x_2637 : f32 = u_xlat23;
  let x_2639 : f32 = u_xlat11.x;
  u_xlat23 = (x_2637 * x_2639);
  let x_2642 : f32 = u_xlat3.y;
  u_xlat10.x = (-(x_2642) + 1.0f);
  let x_2647 : f32 = u_xlat4.x;
  let x_2649 : f32 = x_34.x_ProjectionParams.w;
  u_xlat4.x = (x_2647 * x_2649);
  let x_2653 : vec4<f32> = x_34.x_CameraViewXExtent[0i];
  let x_2655 : vec4<f32> = u_xlat3;
  let x_2659 : vec4<f32> = x_34.x_CameraViewTopLeftCorner[0i];
  u_xlat11 = ((vec3<f32>(x_2653.x, x_2653.y, x_2653.z) * vec3<f32>(x_2655.x, x_2655.x, x_2655.x)) + vec3<f32>(x_2659.x, x_2659.y, x_2659.z));
  let x_2663 : vec4<f32> = x_34.x_CameraViewYExtent[0i];
  let x_2665 : vec3<f32> = u_xlat10;
  let x_2668 : vec3<f32> = u_xlat11;
  u_xlat11 = ((vec3<f32>(x_2663.x, x_2663.y, x_2663.z) * vec3<f32>(x_2665.x, x_2665.x, x_2665.x)) + x_2668);
  let x_2671 : vec4<f32> = x_34.x_CameraViewZExtent[0i];
  let x_2673 : vec3<f32> = u_xlat4;
  let x_2676 : vec3<f32> = u_xlat11;
  u_xlat4 = ((vec3<f32>(x_2671.x, x_2671.y, x_2671.z) * vec3<f32>(x_2673.x, x_2673.x, x_2673.x)) + x_2676);
  let x_2678 : vec3<f32> = u_xlat2;
  let x_2680 : vec3<f32> = u_xlat4;
  u_xlat4 = (-(x_2678) + x_2680);
  let x_2682 : vec3<f32> = u_xlat4;
  let x_2683 : vec3<f32> = u_xlat1;
  u_xlat3.x = dot(x_2682, x_2683);
  let x_2686 : f32 = u_xlat0;
  let x_2690 : f32 = u_xlat3.x;
  u_xlat3.x = ((-(x_2686) * 0.004f) + x_2690);
  let x_2694 : f32 = u_xlat3.x;
  u_xlat3.x = max(x_2694, 0.0f);
  let x_2697 : vec3<f32> = u_xlat4;
  let x_2698 : vec3<f32> = u_xlat4;
  u_xlat10.x = dot(x_2697, x_2698);
  let x_2702 : f32 = u_xlat10.x;
  u_xlat10.x = (x_2702 + 0.0001f);
  let x_2706 : f32 = u_xlat10.x;
  u_xlat10.x = (1.0f / x_2706);
  let x_2710 : f32 = u_xlat10.x;
  let x_2712 : f32 = u_xlat3.x;
  u_xlat3.x = (x_2710 * x_2712);
  let x_2716 : f32 = u_xlat3.x;
  let x_2717 : f32 = u_xlat23;
  let x_2719 : f32 = u_xlat22;
  u_xlat22 = ((x_2716 * x_2717) + x_2719);
  let x_2724 : vec4<f32> = u_xlat3;
  let x_2727 : f32 = x_34.x_GlobalMipBias.x;
  let x_2728 : vec4<f32> = textureSampleBias(x_BlueNoiseTexture, sampler_PointRepeat, vec2<f32>(x_2724.z, x_2724.w), x_2727);
  u_xlat23 = x_2728.w;
  let x_2730 : f32 = u_xlat23;
  let x_2735 : vec2<f32> = (vec2<f32>(x_2730, x_2730) + vec2<f32>(0.3828125f, 0.4921875f));
  let x_2736 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_2735.x, x_2735.y, x_2736.z, x_2736.w);
  let x_2739 : f32 = u_xlat3.x;
  u_xlat23 = fract(x_2739);
  let x_2741 : f32 = u_xlat23;
  u_xlat4.z = ((x_2741 * 2.0f) + -1.0f);
  let x_2746 : f32 = u_xlat3.y;
  u_xlat23 = (x_2746 * 628.31854248f);
  let x_2749 : f32 = u_xlat4.z;
  let x_2752 : f32 = u_xlat4.z;
  u_xlat3.x = ((-(x_2749) * x_2752) + 1.0f);
  let x_2757 : f32 = u_xlat3.x;
  u_xlat3.x = sqrt(x_2757);
  let x_2760 : f32 = u_xlat23;
  u_xlat5.x = sin(x_2760);
  let x_2763 : f32 = u_xlat23;
  u_xlat6 = cos(x_2763);
  let x_2766 : f32 = u_xlat3.x;
  let x_2767 : f32 = u_xlat6;
  u_xlat4.x = (x_2766 * x_2767);
  let x_2771 : f32 = u_xlat3.x;
  let x_2773 : f32 = u_xlat5.x;
  u_xlat4.y = (x_2771 * x_2773);
  let x_2776 : vec3<f32> = u_xlat1;
  let x_2777 : vec3<f32> = u_xlat4;
  u_xlat23 = dot(x_2776, x_2777);
  let x_2779 : f32 = u_xlat23;
  u_xlatb23 = (x_2779 >= 0.0f);
  let x_2781 : bool = u_xlatb23;
  u_xlat23 = select(-1.0f, 1.0f, x_2781);
  let x_2783 : f32 = u_xlat23;
  let x_2785 : vec3<f32> = u_xlat4;
  let x_2786 : vec3<f32> = (vec3<f32>(x_2783, x_2783, x_2783) * x_2785);
  let x_2787 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_2786.x, x_2786.y, x_2786.z, x_2787.w);
  let x_2789 : vec4<f32> = u_xlat3;
  let x_2792 : vec4<f32> = x_34.x_SSAOParams;
  let x_2794 : vec3<f32> = (vec3<f32>(x_2789.x, x_2789.y, x_2789.z) * vec3<f32>(x_2792.y, x_2792.y, x_2792.y));
  let x_2795 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_2794.x, x_2794.y, x_2794.z, x_2795.w);
  let x_2797 : vec4<f32> = u_xlat3;
  let x_2802 : vec3<f32> = u_xlat2;
  let x_2803 : vec3<f32> = ((vec3<f32>(x_2797.x, x_2797.y, x_2797.z) * vec3<f32>(0.725000083f, 0.725000083f, 0.725000083f)) + x_2802);
  let x_2804 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_2803.x, x_2803.y, x_2803.z, x_2804.w);
  let x_2806 : vec4<f32> = u_xlat3;
  let x_2809 : vec4<f32> = x_34.x_CameraViewProjections[0i][1i];
  let x_2811 : vec2<f32> = (vec2<f32>(x_2806.y, x_2806.y) * vec2<f32>(x_2809.x, x_2809.y));
  let x_2812 : vec3<f32> = u_xlat10;
  u_xlat10 = vec3<f32>(x_2811.x, x_2812.y, x_2811.y);
  let x_2815 : vec4<f32> = x_34.x_CameraViewProjections[0i][0i];
  let x_2817 : vec4<f32> = u_xlat3;
  let x_2820 : vec3<f32> = u_xlat10;
  let x_2822 : vec2<f32> = ((vec2<f32>(x_2815.x, x_2815.y) * vec2<f32>(x_2817.x, x_2817.x)) + vec2<f32>(x_2820.x, x_2820.z));
  let x_2823 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_2822.x, x_2822.y, x_2823.z, x_2823.w);
  let x_2826 : vec4<f32> = x_34.x_CameraViewProjections[0i][2i];
  let x_2828 : vec4<f32> = u_xlat3;
  let x_2831 : vec4<f32> = u_xlat3;
  let x_2833 : vec2<f32> = ((vec2<f32>(x_2826.x, x_2826.y) * vec2<f32>(x_2828.z, x_2828.z)) + vec2<f32>(x_2831.x, x_2831.y));
  let x_2834 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_2833.x, x_2833.y, x_2834.z, x_2834.w);
  let x_2836 : vec4<f32> = u_xlat3;
  let x_2838 : vec2<f32> = (vec2<f32>(x_2836.x, x_2836.y) + vec2<f32>(1.0f, 1.0f));
  let x_2839 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_2838.x, x_2838.y, x_2839.z, x_2839.w);
  let x_2841 : vec4<f32> = u_xlat3;
  let x_2843 : vec2<f32> = (vec2<f32>(x_2841.x, x_2841.y) * vec2<f32>(0.5f, 0.5f));
  let x_2844 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_2843.x, x_2843.y, x_2844.z, x_2844.w);
  let x_2846 : vec4<f32> = u_xlat3;
  let x_2850 : vec2<f32> = clamp(vec2<f32>(x_2846.x, x_2846.y), vec2<f32>(0.0f, 0.0f), vec2<f32>(1.0f, 1.0f));
  let x_2851 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_2850.x, x_2850.y, x_2851.z, x_2851.w);
  let x_2856 : vec4<f32> = u_xlat3;
  let x_2859 : f32 = x_34.x_GlobalMipBias.x;
  let x_2860 : vec4<f32> = textureSampleBias(x_CameraDepthTexture, sampler_CameraDepthTexture, vec2<f32>(x_2856.x, x_2856.y), x_2859);
  u_xlat23 = x_2860.x;
  let x_2863 : f32 = u_xlat7.x;
  let x_2865 : f32 = u_xlat23;
  let x_2868 : f32 = x_34.x_ProjectionParams.z;
  u_xlat17 = ((-(x_2863) * x_2865) + x_2868);
  let x_2870 : f32 = u_xlat0;
  let x_2871 : f32 = u_xlat17;
  u_xlat24 = (x_2870 + -(x_2871));
  let x_2874 : f32 = u_xlat24;
  let x_2877 : f32 = x_34.x_SSAOParams.y;
  u_xlatb24 = (abs(x_2874) < x_2877);
  let x_2879 : bool = u_xlatb24;
  u_xlat24 = select(0.0f, 1.0f, x_2879);
  let x_2881 : f32 = u_xlat23;
  u_xlatb23 = (0.00001f < x_2881);
  let x_2883 : bool = u_xlatb23;
  u_xlat23 = select(0.0f, 1.0f, x_2883);
  let x_2885 : f32 = u_xlat23;
  let x_2886 : f32 = u_xlat24;
  u_xlat23 = (x_2885 * x_2886);
  let x_2889 : f32 = u_xlat3.y;
  u_xlat10.x = (-(x_2889) + 1.0f);
  let x_2893 : f32 = u_xlat17;
  let x_2895 : f32 = x_34.x_ProjectionParams.w;
  u_xlat17 = (x_2893 * x_2895);
  let x_2898 : vec4<f32> = x_34.x_CameraViewXExtent[0i];
  let x_2900 : vec4<f32> = u_xlat3;
  let x_2904 : vec4<f32> = x_34.x_CameraViewTopLeftCorner[0i];
  u_xlat4 = ((vec3<f32>(x_2898.x, x_2898.y, x_2898.z) * vec3<f32>(x_2900.x, x_2900.x, x_2900.x)) + vec3<f32>(x_2904.x, x_2904.y, x_2904.z));
  let x_2908 : vec4<f32> = x_34.x_CameraViewYExtent[0i];
  let x_2910 : vec3<f32> = u_xlat10;
  let x_2913 : vec3<f32> = u_xlat4;
  let x_2914 : vec3<f32> = ((vec3<f32>(x_2908.x, x_2908.y, x_2908.z) * vec3<f32>(x_2910.x, x_2910.x, x_2910.x)) + x_2913);
  let x_2915 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_2914.x, x_2914.y, x_2915.z, x_2914.z);
  let x_2918 : vec4<f32> = x_34.x_CameraViewZExtent[0i];
  let x_2920 : f32 = u_xlat17;
  let x_2923 : vec4<f32> = u_xlat3;
  let x_2925 : vec3<f32> = ((vec3<f32>(x_2918.x, x_2918.y, x_2918.z) * vec3<f32>(x_2920, x_2920, x_2920)) + vec3<f32>(x_2923.x, x_2923.y, x_2923.w));
  let x_2926 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_2925.x, x_2925.y, x_2925.z, x_2926.w);
  let x_2928 : vec3<f32> = u_xlat2;
  let x_2930 : vec4<f32> = u_xlat3;
  let x_2932 : vec3<f32> = (-(x_2928) + vec3<f32>(x_2930.x, x_2930.y, x_2930.z));
  let x_2933 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_2932.x, x_2932.y, x_2932.z, x_2933.w);
  let x_2935 : vec4<f32> = u_xlat3;
  let x_2937 : vec3<f32> = u_xlat1;
  u_xlat24 = dot(vec3<f32>(x_2935.x, x_2935.y, x_2935.z), x_2937);
  let x_2939 : f32 = u_xlat0;
  let x_2942 : f32 = u_xlat24;
  u_xlat24 = ((-(x_2939) * 0.004f) + x_2942);
  let x_2944 : f32 = u_xlat24;
  u_xlat24 = max(x_2944, 0.0f);
  let x_2946 : vec4<f32> = u_xlat3;
  let x_2948 : vec4<f32> = u_xlat3;
  u_xlat3.x = dot(vec3<f32>(x_2946.x, x_2946.y, x_2946.z), vec3<f32>(x_2948.x, x_2948.y, x_2948.z));
  let x_2953 : f32 = u_xlat3.x;
  u_xlat3.x = (x_2953 + 0.0001f);
  let x_2957 : f32 = u_xlat3.x;
  u_xlat3.x = (1.0f / x_2957);
  let x_2961 : f32 = u_xlat3.x;
  let x_2962 : f32 = u_xlat24;
  u_xlat3.x = (x_2961 * x_2962);
  let x_2966 : f32 = u_xlat3.x;
  let x_2967 : f32 = u_xlat23;
  let x_2969 : f32 = u_xlat22;
  u_xlat22 = ((x_2966 * x_2967) + x_2969);
  let x_2971 : vec2<f32> = u_xlat14;
  let x_2973 : vec4<f32> = x_34.x_SSAOBlueNoiseParams;
  u_xlat14 = ((x_2971 * vec2<f32>(x_2973.x, x_2973.y)) + vec2<f32>(0.916666687f, 0.916666687f));
  let x_2982 : vec2<f32> = u_xlat14;
  let x_2984 : f32 = x_34.x_GlobalMipBias.x;
  let x_2985 : vec4<f32> = textureSampleBias(x_BlueNoiseTexture, sampler_PointRepeat, x_2982, x_2984);
  u_xlat14.x = x_2985.w;
  let x_2988 : vec2<f32> = u_xlat14;
  u_xlat14 = (vec2<f32>(x_2988.x, x_2988.x) + vec2<f32>(0.984375f, 0.125f));
  let x_2993 : f32 = u_xlat14.x;
  u_xlat14.x = fract(x_2993);
  let x_2997 : f32 = u_xlat14.x;
  u_xlat3.z = ((x_2997 * 2.0f) + -1.0f);
  let x_3002 : f32 = u_xlat14.y;
  u_xlat14.x = (x_3002 * 628.31854248f);
  let x_3006 : f32 = u_xlat3.z;
  let x_3009 : f32 = u_xlat3.z;
  u_xlat21 = ((-(x_3006) * x_3009) + 1.0f);
  let x_3012 : f32 = u_xlat21;
  u_xlat21 = sqrt(x_3012);
  let x_3015 : f32 = u_xlat14.x;
  u_xlat4.x = sin(x_3015);
  let x_3019 : f32 = u_xlat14.x;
  u_xlat5.x = cos(x_3019);
  let x_3022 : f32 = u_xlat21;
  let x_3024 : f32 = u_xlat5.x;
  u_xlat3.x = (x_3022 * x_3024);
  let x_3027 : f32 = u_xlat21;
  let x_3029 : f32 = u_xlat4.x;
  u_xlat3.y = (x_3027 * x_3029);
  let x_3032 : vec3<f32> = u_xlat1;
  let x_3033 : vec4<f32> = u_xlat3;
  u_xlat14.x = dot(x_3032, vec3<f32>(x_3033.x, x_3033.y, x_3033.z));
  let x_3038 : f32 = u_xlat14.x;
  u_xlatb14 = (x_3038 >= 0.0f);
  let x_3040 : bool = u_xlatb14;
  u_xlat14.x = select(-1.0f, 1.0f, x_3040);
  let x_3043 : vec2<f32> = u_xlat14;
  let x_3045 : vec4<f32> = u_xlat3;
  let x_3047 : vec3<f32> = (vec3<f32>(x_3043.x, x_3043.x, x_3043.x) * vec3<f32>(x_3045.x, x_3045.y, x_3045.z));
  let x_3048 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_3047.x, x_3047.y, x_3047.z, x_3048.w);
  let x_3050 : vec4<f32> = u_xlat3;
  let x_3053 : vec4<f32> = x_34.x_SSAOParams;
  let x_3055 : vec3<f32> = (vec3<f32>(x_3050.x, x_3050.y, x_3050.z) * vec3<f32>(x_3053.y, x_3053.y, x_3053.y));
  let x_3056 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_3055.x, x_3055.y, x_3055.z, x_3056.w);
  let x_3058 : vec4<f32> = u_xlat3;
  let x_3063 : vec3<f32> = u_xlat2;
  let x_3064 : vec3<f32> = ((vec3<f32>(x_3058.x, x_3058.y, x_3058.z) * vec3<f32>(0.856249988f, 0.856249988f, 0.856249988f)) + x_3063);
  let x_3065 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_3064.x, x_3064.y, x_3064.z, x_3065.w);
  let x_3067 : vec4<f32> = u_xlat3;
  let x_3070 : vec4<f32> = x_34.x_CameraViewProjections[0i][1i];
  u_xlat14 = (vec2<f32>(x_3067.y, x_3067.y) * vec2<f32>(x_3070.x, x_3070.y));
  let x_3074 : vec4<f32> = x_34.x_CameraViewProjections[0i][0i];
  let x_3076 : vec4<f32> = u_xlat3;
  let x_3079 : vec2<f32> = u_xlat14;
  u_xlat14 = ((vec2<f32>(x_3074.x, x_3074.y) * vec2<f32>(x_3076.x, x_3076.x)) + x_3079);
  let x_3082 : vec4<f32> = x_34.x_CameraViewProjections[0i][2i];
  let x_3084 : vec4<f32> = u_xlat3;
  let x_3087 : vec2<f32> = u_xlat14;
  u_xlat14 = ((vec2<f32>(x_3082.x, x_3082.y) * vec2<f32>(x_3084.z, x_3084.z)) + x_3087);
  let x_3089 : vec2<f32> = u_xlat14;
  u_xlat14 = (x_3089 + vec2<f32>(1.0f, 1.0f));
  let x_3091 : vec2<f32> = u_xlat14;
  u_xlat14 = (x_3091 * vec2<f32>(0.5f, 0.5f));
  let x_3093 : vec2<f32> = u_xlat14;
  u_xlat14 = clamp(x_3093, vec2<f32>(0.0f, 0.0f), vec2<f32>(1.0f, 1.0f));
  let x_3100 : vec2<f32> = u_xlat14;
  let x_3102 : f32 = x_34.x_GlobalMipBias.x;
  let x_3103 : vec4<f32> = textureSampleBias(x_CameraDepthTexture, sampler_CameraDepthTexture, x_3100, x_3102);
  u_xlat23 = x_3103.x;
  let x_3106 : f32 = u_xlat7.x;
  let x_3108 : f32 = u_xlat23;
  let x_3111 : f32 = x_34.x_ProjectionParams.z;
  u_xlat7.x = ((-(x_3106) * x_3108) + x_3111);
  let x_3115 : f32 = u_xlat7.x;
  let x_3117 : f32 = u_xlat0;
  u_xlat3.x = (-(x_3115) + x_3117);
  let x_3121 : f32 = u_xlat3.x;
  let x_3124 : f32 = x_34.x_SSAOParams.y;
  u_xlatb3 = (abs(x_3121) < x_3124);
  let x_3126 : bool = u_xlatb3;
  u_xlat3.x = select(0.0f, 1.0f, x_3126);
  let x_3129 : f32 = u_xlat23;
  u_xlatb23 = (0.00001f < x_3129);
  let x_3131 : bool = u_xlatb23;
  u_xlat23 = select(0.0f, 1.0f, x_3131);
  let x_3133 : f32 = u_xlat23;
  let x_3135 : f32 = u_xlat3.x;
  u_xlat23 = (x_3133 * x_3135);
  let x_3138 : f32 = u_xlat14.y;
  u_xlat21 = (-(x_3138) + 1.0f);
  let x_3142 : f32 = u_xlat7.x;
  let x_3144 : f32 = x_34.x_ProjectionParams.w;
  u_xlat7.x = (x_3142 * x_3144);
  let x_3148 : vec4<f32> = x_34.x_CameraViewXExtent[0i];
  let x_3150 : vec2<f32> = u_xlat14;
  let x_3154 : vec4<f32> = x_34.x_CameraViewTopLeftCorner[0i];
  let x_3156 : vec3<f32> = ((vec3<f32>(x_3148.x, x_3148.y, x_3148.z) * vec3<f32>(x_3150.x, x_3150.x, x_3150.x)) + vec3<f32>(x_3154.x, x_3154.y, x_3154.z));
  let x_3157 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_3156.x, x_3156.y, x_3156.z, x_3157.w);
  let x_3160 : vec4<f32> = x_34.x_CameraViewYExtent[0i];
  let x_3162 : f32 = u_xlat21;
  let x_3165 : vec4<f32> = u_xlat3;
  let x_3167 : vec3<f32> = ((vec3<f32>(x_3160.x, x_3160.y, x_3160.z) * vec3<f32>(x_3162, x_3162, x_3162)) + vec3<f32>(x_3165.x, x_3165.y, x_3165.z));
  let x_3168 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_3167.x, x_3167.y, x_3167.z, x_3168.w);
  let x_3171 : vec4<f32> = x_34.x_CameraViewZExtent[0i];
  let x_3173 : vec3<f32> = u_xlat7;
  let x_3176 : vec4<f32> = u_xlat3;
  u_xlat7 = ((vec3<f32>(x_3171.x, x_3171.y, x_3171.z) * vec3<f32>(x_3173.x, x_3173.x, x_3173.x)) + vec3<f32>(x_3176.x, x_3176.y, x_3176.z));
  let x_3179 : vec3<f32> = u_xlat2;
  let x_3181 : vec3<f32> = u_xlat7;
  u_xlat7 = (-(x_3179) + x_3181);
  let x_3183 : vec3<f32> = u_xlat7;
  let x_3184 : vec3<f32> = u_xlat1;
  u_xlat2.x = dot(x_3183, x_3184);
  let x_3187 : f32 = u_xlat0;
  let x_3191 : f32 = u_xlat2.x;
  u_xlat2.x = ((-(x_3187) * 0.004f) + x_3191);
  let x_3195 : f32 = u_xlat2.x;
  u_xlat2.x = max(x_3195, 0.0f);
  let x_3198 : vec3<f32> = u_xlat7;
  let x_3199 : vec3<f32> = u_xlat7;
  u_xlat7.x = dot(x_3198, x_3199);
  let x_3203 : f32 = u_xlat7.x;
  u_xlat7.x = (x_3203 + 0.0001f);
  let x_3207 : f32 = u_xlat7.x;
  u_xlat7.x = (1.0f / x_3207);
  let x_3211 : f32 = u_xlat7.x;
  let x_3213 : f32 = u_xlat2.x;
  u_xlat7.x = (x_3211 * x_3213);
  let x_3217 : f32 = u_xlat7.x;
  let x_3218 : f32 = u_xlat23;
  let x_3220 : f32 = u_xlat22;
  u_xlat7.x = ((x_3217 * x_3218) + x_3220);
  let x_3224 : f32 = u_xlat7.x;
  let x_3226 : f32 = x_34.x_SSAOParams.y;
  u_xlat7.x = (x_3224 * x_3226);
  let x_3230 : f32 = x_34.x_SSAOParams.w;
  u_xlat14.x = (1.0f / x_3230);
  let x_3233 : f32 = u_xlat0;
  let x_3236 : f32 = u_xlat14.x;
  u_xlat0 = ((-(x_3233) * x_3236) + 1.0f);
  let x_3239 : f32 = u_xlat0;
  let x_3240 : f32 = u_xlat0;
  u_xlat0 = (x_3239 * x_3240);
  let x_3243 : f32 = u_xlat7.x;
  let x_3245 : f32 = x_34.x_SSAOParams.x;
  u_xlat7.x = (x_3243 * x_3245);
  let x_3248 : f32 = u_xlat0;
  let x_3250 : f32 = u_xlat7.x;
  u_xlat0 = (x_3248 * x_3250);
  let x_3252 : f32 = u_xlat0;
  u_xlat0 = (x_3252 * 0.083333336f);
  let x_3254 : f32 = u_xlat0;
  u_xlat0 = clamp(x_3254, 0.0f, 1.0f);
  let x_3256 : f32 = u_xlat0;
  u_xlat0 = log2(x_3256);
  let x_3258 : f32 = u_xlat0;
  u_xlat0 = (x_3258 * 0.600000024f);
  let x_3261 : f32 = u_xlat0;
  SV_Target0.x = exp2(x_3261);
  let x_3265 : vec3<f32> = u_xlat1;
  let x_3267 : vec3<f32> = ((x_3265 * vec3<f32>(0.5f, 0.5f, 0.5f)) + vec3<f32>(0.5f, 0.5f, 0.5f));
  let x_3268 : vec4<f32> = SV_Target0;
  SV_Target0 = vec4<f32>(x_3268.x, x_3267.x, x_3267.y, x_3267.z);
  return;
}

struct main_out {
  @location(0)
  SV_Target0_1 : vec4<f32>,
}

@fragment
fn main(@location(0) vs_TEXCOORD0_param : vec2<f32>, @builtin(position) gl_FragCoord_param : vec4<f32>) -> main_out {
  vs_TEXCOORD0 = vs_TEXCOORD0_param;
  gl_FragCoord = gl_FragCoord_param;
  main_1();
  return main_out(SV_Target0);
}

