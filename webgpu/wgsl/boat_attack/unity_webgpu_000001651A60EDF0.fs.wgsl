type Arr = array<vec4<f32>, 2u>;

type Arr_1 = array<mat4x4<f32>, 2u>;

type Arr_2 = array<vec4<f32>, 2u>;

type Arr_3 = array<vec4<f32>, 2u>;

struct PGlobals {
  x_ScaledScreenParams : vec4<f32>,
  x_GlobalMipBias : vec2<f32>,
  @size(8)
  padding : u32,
  x_ZBufferParams : vec4<f32>,
  unity_MatrixV : mat4x4<f32>,
  x_SSAOParams : vec4<f32>,
  x_CameraViewTopLeftCorner : Arr_3,
  x_CameraViewProjections : Arr_1,
  x_ProjectionParams2 : vec4<f32>,
  x_CameraViewXExtent : Arr_3,
  x_CameraViewYExtent : Arr_3,
}

@group(0) @binding(0) var x_CameraDepthTexture : texture_2d<f32>;

@group(0) @binding(1) var sampler_CameraDepthTexture : sampler;

var<private> vs_TEXCOORD0 : vec2<f32>;

@group(1) @binding(0) var<uniform> x_33 : PGlobals;

var<private> SV_Target0 : vec4<f32>;

var<private> gl_FragCoord : vec4<f32>;

fn main_1() {
  var u_xlat0 : f32;
  var u_xlatb8 : bool;
  var u_xlat8 : vec3<f32>;
  var u_xlat16 : f32;
  var u_xlat1 : vec3<f32>;
  var u_xlat2 : vec4<f32>;
  var u_xlat3 : vec4<f32>;
  var u_xlat25 : f32;
  var u_xlat18 : vec2<f32>;
  var u_xlat4 : vec3<f32>;
  var u_xlat5 : vec3<f32>;
  var u_xlatb25 : bool;
  var x_248 : vec3<f32>;
  var u_xlat11 : vec3<f32>;
  var u_xlatb3 : vec2<bool>;
  var u_xlat26 : f32;
  var u_xlat6 : f32;
  var u_xlat7 : f32;
  var u_xlatb26 : bool;
  var x_524 : vec3<f32>;
  var u_xlat28 : f32;
  var u_xlatb28 : bool;
  var u_xlatb18 : bool;
  var x_794 : vec3<f32>;
  var u_xlat19 : f32;
  var u_xlat10 : vec2<f32>;
  var u_xlatb2 : vec4<bool>;
  var x_1076 : vec3<f32>;
  var u_xlat_precise_vec4 : vec4<f32>;
  var u_xlat_precise_ivec4 : vec4<i32>;
  var u_xlat_precise_bvec4 : vec4<bool>;
  var u_xlat_precise_uvec4 : vec4<u32>;
  let x_22 : vec2<f32> = vs_TEXCOORD0;
  let x_39 : f32 = x_33.x_GlobalMipBias.x;
  let x_40 : vec4<f32> = textureSampleBias(x_CameraDepthTexture, sampler_CameraDepthTexture, x_22, x_39);
  u_xlat0 = x_40.x;
  let x_45 : f32 = u_xlat0;
  u_xlatb8 = (x_45 < 0.00001f);
  let x_48 : bool = u_xlatb8;
  if (x_48) {
    SV_Target0 = vec4<f32>(0.0f, 0.5f, 0.5f, 0.5f);
    return;
  }
  let x_59 : f32 = x_33.x_ZBufferParams.z;
  let x_60 : f32 = u_xlat0;
  let x_64 : f32 = x_33.x_ZBufferParams.w;
  u_xlat0 = ((x_59 * x_60) + x_64);
  let x_67 : f32 = u_xlat0;
  u_xlat0 = (1.0f / x_67);
  let x_71 : f32 = x_33.x_SSAOParams.w;
  let x_72 : f32 = u_xlat0;
  u_xlatb8 = (x_71 < x_72);
  let x_74 : bool = u_xlatb8;
  if (x_74) {
    SV_Target0 = vec4<f32>(0.0f, 0.5f, 0.5f, 0.5f);
    return;
  }
  let x_84 : f32 = vs_TEXCOORD0.y;
  u_xlat8.x = (-(x_84) + 1.0f);
  let x_89 : f32 = u_xlat0;
  let x_92 : f32 = x_33.x_ProjectionParams2.x;
  u_xlat16 = (x_89 * x_92);
  let x_99 : vec4<f32> = x_33.x_CameraViewXExtent[0i];
  let x_101 : vec2<f32> = vs_TEXCOORD0;
  let x_106 : vec4<f32> = x_33.x_CameraViewTopLeftCorner[0i];
  u_xlat1 = ((vec3<f32>(x_99.x, x_99.y, x_99.z) * vec3<f32>(x_101.x, x_101.x, x_101.x)) + vec3<f32>(x_106.x, x_106.y, x_106.z));
  let x_111 : vec4<f32> = x_33.x_CameraViewYExtent[0i];
  let x_113 : vec3<f32> = u_xlat8;
  let x_116 : vec3<f32> = u_xlat1;
  u_xlat1 = ((vec3<f32>(x_111.x, x_111.y, x_111.z) * vec3<f32>(x_113.x, x_113.x, x_113.x)) + x_116);
  let x_118 : f32 = u_xlat16;
  let x_120 : vec3<f32> = u_xlat1;
  u_xlat8 = (vec3<f32>(x_118, x_118, x_118) * x_120);
  let x_122 : vec3<f32> = u_xlat8;
  u_xlat1 = dpdyCoarse(vec3<f32>(x_122.z, x_122.x, x_122.y));
  let x_127 : vec3<f32> = u_xlat8;
  let x_129 : vec3<f32> = dpdxCoarse(vec3<f32>(x_127.y, x_127.z, x_127.x));
  let x_130 : vec4<f32> = u_xlat2;
  u_xlat2 = vec4<f32>(x_129.x, x_129.y, x_129.z, x_130.w);
  let x_133 : vec3<f32> = u_xlat1;
  let x_134 : vec4<f32> = u_xlat2;
  let x_136 : vec3<f32> = (x_133 * vec3<f32>(x_134.x, x_134.y, x_134.z));
  let x_137 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_136.x, x_136.y, x_136.z, x_137.w);
  let x_139 : vec3<f32> = u_xlat1;
  let x_141 : vec4<f32> = u_xlat2;
  let x_144 : vec4<f32> = u_xlat3;
  u_xlat1 = ((vec3<f32>(x_139.z, x_139.x, x_139.y) * vec3<f32>(x_141.y, x_141.z, x_141.x)) + -(vec3<f32>(x_144.x, x_144.y, x_144.z)));
  let x_149 : vec3<f32> = u_xlat1;
  let x_150 : vec3<f32> = u_xlat1;
  u_xlat25 = dot(x_149, x_150);
  let x_152 : f32 = u_xlat25;
  u_xlat25 = inverseSqrt(x_152);
  let x_154 : f32 = u_xlat25;
  let x_156 : vec3<f32> = u_xlat1;
  u_xlat1 = (vec3<f32>(x_154, x_154, x_154) * x_156);
  let x_158 : vec2<f32> = vs_TEXCOORD0;
  let x_160 : vec4<f32> = x_33.x_ScaledScreenParams;
  let x_162 : vec2<f32> = (x_158 * vec2<f32>(x_160.x, x_160.y));
  let x_163 : vec4<f32> = u_xlat2;
  u_xlat2 = vec4<f32>(x_162.x, x_162.y, x_163.z, x_163.w);
  let x_167 : vec4<f32> = u_xlat2;
  let x_170 : vec4<f32> = x_33.x_SSAOParams;
  u_xlat18 = (vec2<f32>(x_167.x, x_167.y) * vec2<f32>(x_170.z, x_170.z));
  let x_173 : vec2<f32> = u_xlat18;
  u_xlat25 = dot(x_173, vec2<f32>(0.067110561f, 0.00583715f));
  let x_178 : f32 = u_xlat25;
  u_xlat25 = fract(x_178);
  let x_180 : f32 = u_xlat25;
  u_xlat25 = (x_180 * 52.982917786f);
  let x_183 : f32 = u_xlat25;
  u_xlat25 = fract(x_183);
  let x_185 : f32 = u_xlat25;
  u_xlat18.x = fract(x_185);
  let x_189 : f32 = u_xlat18.x;
  u_xlat3.z = ((x_189 * 2.0f) + -1.0f);
  let x_195 : f32 = u_xlat25;
  u_xlat25 = (x_195 + 0.9296875f);
  let x_198 : f32 = u_xlat25;
  u_xlat25 = (x_198 * 6.283185482f);
  let x_202 : f32 = u_xlat3.z;
  let x_205 : f32 = u_xlat3.z;
  u_xlat18.x = ((-(x_202) * x_205) + 1.0f);
  let x_210 : f32 = u_xlat18.x;
  u_xlat18.x = sqrt(x_210);
  let x_214 : f32 = u_xlat25;
  u_xlat4.x = sin(x_214);
  let x_218 : f32 = u_xlat25;
  u_xlat5.x = cos(x_218);
  let x_222 : f32 = u_xlat18.x;
  let x_224 : f32 = u_xlat5.x;
  u_xlat3.x = (x_222 * x_224);
  let x_228 : f32 = u_xlat18.x;
  let x_230 : f32 = u_xlat4.x;
  u_xlat3.y = (x_228 * x_230);
  let x_233 : vec4<f32> = u_xlat3;
  let x_236 : vec3<f32> = (vec3<f32>(x_233.x, x_233.y, x_233.z) * vec3<f32>(0.5f, 0.5f, 0.5f));
  let x_237 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_236.x, x_236.y, x_236.z, x_237.w);
  let x_239 : vec3<f32> = u_xlat1;
  let x_241 : vec4<f32> = u_xlat3;
  u_xlat25 = dot(-(x_239), vec3<f32>(x_241.x, x_241.y, x_241.z));
  let x_245 : f32 = u_xlat25;
  u_xlatb25 = (x_245 >= 0.0f);
  let x_247 : bool = u_xlatb25;
  if (x_247) {
    let x_251 : vec4<f32> = u_xlat3;
    x_248 = -(vec3<f32>(x_251.x, x_251.y, x_251.z));
  } else {
    let x_255 : vec4<f32> = u_xlat3;
    x_248 = vec3<f32>(x_255.x, x_255.y, x_255.z);
  }
  let x_257 : vec3<f32> = x_248;
  let x_258 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_257.x, x_257.y, x_257.z, x_258.w);
  let x_260 : vec4<f32> = u_xlat3;
  let x_263 : vec4<f32> = x_33.x_SSAOParams;
  let x_266 : vec3<f32> = u_xlat8;
  let x_267 : vec3<f32> = ((vec3<f32>(x_260.x, x_260.y, x_260.z) * vec3<f32>(x_263.y, x_263.y, x_263.y)) + x_266);
  let x_268 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_267.x, x_267.y, x_267.z, x_268.w);
  let x_270 : vec4<f32> = u_xlat3;
  let x_274 : vec4<f32> = x_33.x_CameraViewProjections[0i][1i];
  u_xlat18 = (vec2<f32>(x_270.y, x_270.y) * vec2<f32>(x_274.x, x_274.y));
  let x_278 : vec4<f32> = x_33.x_CameraViewProjections[0i][0i];
  let x_280 : vec4<f32> = u_xlat3;
  let x_283 : vec2<f32> = u_xlat18;
  u_xlat18 = ((vec2<f32>(x_278.x, x_278.y) * vec2<f32>(x_280.x, x_280.x)) + x_283);
  let x_286 : vec4<f32> = x_33.x_CameraViewProjections[0i][2i];
  let x_288 : vec4<f32> = u_xlat3;
  let x_291 : vec2<f32> = u_xlat18;
  u_xlat18 = ((vec2<f32>(x_286.x, x_286.y) * vec2<f32>(x_288.z, x_288.z)) + x_291);
  let x_295 : f32 = x_33.unity_MatrixV[0i].z;
  u_xlat4.x = x_295;
  let x_298 : f32 = x_33.unity_MatrixV[1i].z;
  u_xlat4.y = x_298;
  let x_301 : f32 = x_33.unity_MatrixV[2i].z;
  u_xlat4.z = x_301;
  let x_303 : vec3<f32> = u_xlat4;
  let x_304 : vec4<f32> = u_xlat3;
  u_xlat25 = dot(x_303, vec3<f32>(x_304.x, x_304.y, x_304.z));
  let x_307 : f32 = u_xlat25;
  u_xlat3.x = (1.0f / -(x_307));
  let x_311 : vec2<f32> = u_xlat18;
  let x_312 : vec4<f32> = u_xlat3;
  u_xlat18 = ((x_311 * vec2<f32>(x_312.x, x_312.x)) + vec2<f32>(1.0f, 1.0f));
  let x_317 : vec2<f32> = u_xlat18;
  u_xlat18 = (x_317 * vec2<f32>(0.5f, 0.5f));
  let x_320 : vec2<f32> = u_xlat18;
  u_xlat18 = clamp(x_320, vec2<f32>(0.0f, 0.0f), vec2<f32>(1.0f, 1.0f));
  let x_327 : vec2<f32> = u_xlat18;
  let x_329 : f32 = x_33.x_GlobalMipBias.x;
  let x_330 : vec4<f32> = textureSampleBias(x_CameraDepthTexture, sampler_CameraDepthTexture, x_327, x_329);
  u_xlat3.x = x_330.x;
  let x_335 : f32 = x_33.x_ZBufferParams.z;
  let x_337 : f32 = u_xlat3.x;
  let x_340 : f32 = x_33.x_ZBufferParams.w;
  u_xlat11.x = ((x_335 * x_337) + x_340);
  let x_344 : f32 = u_xlat11.x;
  u_xlat11.x = (1.0f / x_344);
  let x_347 : f32 = u_xlat25;
  let x_350 : f32 = u_xlat11.x;
  u_xlat25 = (-(x_347) + -(x_350));
  let x_353 : f32 = u_xlat25;
  let x_356 : f32 = x_33.x_SSAOParams.y;
  u_xlatb25 = (abs(x_353) < x_356);
  let x_358 : bool = u_xlatb25;
  u_xlat25 = select(0.0f, 1.0f, x_358);
  let x_364 : f32 = u_xlat3.x;
  u_xlatb3.x = (0.00001f < x_364);
  let x_368 : bool = u_xlatb3.x;
  u_xlat3.x = select(0.0f, 1.0f, x_368);
  let x_371 : f32 = u_xlat25;
  let x_373 : f32 = u_xlat3.x;
  u_xlat25 = (x_371 * x_373);
  let x_377 : f32 = u_xlat18.y;
  u_xlat26 = (-(x_377) + 1.0f);
  let x_381 : f32 = u_xlat11.x;
  let x_383 : f32 = x_33.x_ProjectionParams2.x;
  u_xlat3.x = (x_381 * x_383);
  let x_387 : vec4<f32> = x_33.x_CameraViewXExtent[0i];
  let x_389 : vec2<f32> = u_xlat18;
  let x_393 : vec4<f32> = x_33.x_CameraViewTopLeftCorner[0i];
  u_xlat11 = ((vec3<f32>(x_387.x, x_387.y, x_387.z) * vec3<f32>(x_389.x, x_389.x, x_389.x)) + vec3<f32>(x_393.x, x_393.y, x_393.z));
  let x_397 : vec4<f32> = x_33.x_CameraViewYExtent[0i];
  let x_399 : f32 = u_xlat26;
  let x_402 : vec3<f32> = u_xlat11;
  u_xlat11 = ((vec3<f32>(x_397.x, x_397.y, x_397.z) * vec3<f32>(x_399, x_399, x_399)) + x_402);
  let x_404 : vec3<f32> = u_xlat11;
  let x_405 : vec4<f32> = u_xlat3;
  let x_408 : vec3<f32> = u_xlat8;
  let x_410 : vec3<f32> = ((x_404 * vec3<f32>(x_405.x, x_405.x, x_405.x)) + -(x_408));
  let x_411 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_410.x, x_410.y, x_410.z, x_411.w);
  let x_413 : vec4<f32> = u_xlat3;
  let x_415 : vec3<f32> = u_xlat1;
  u_xlat18.x = dot(vec3<f32>(x_413.x, x_413.y, x_413.z), x_415);
  let x_418 : f32 = u_xlat0;
  let x_423 : f32 = u_xlat18.x;
  u_xlat18.x = ((-(x_418) * 0.004f) + x_423);
  let x_427 : f32 = u_xlat18.x;
  u_xlat18.x = max(x_427, 0.0f);
  let x_430 : vec4<f32> = u_xlat3;
  let x_432 : vec4<f32> = u_xlat3;
  u_xlat26 = dot(vec3<f32>(x_430.x, x_430.y, x_430.z), vec3<f32>(x_432.x, x_432.y, x_432.z));
  let x_435 : f32 = u_xlat26;
  u_xlat26 = (x_435 + 0.0001f);
  let x_438 : f32 = u_xlat26;
  u_xlat26 = (1.0f / x_438);
  let x_440 : f32 = u_xlat26;
  let x_442 : f32 = u_xlat18.x;
  u_xlat18.x = (x_440 * x_442);
  let x_445 : vec4<f32> = u_xlat2;
  let x_448 : vec4<f32> = x_33.x_SSAOParams;
  u_xlat3 = ((vec4<f32>(x_445.x, x_445.y, x_445.x, x_445.y) * vec4<f32>(x_448.z, x_448.z, x_448.z, x_448.z)) + vec4<f32>(2.082999945f, 4.867000103f, 4.165999889f, 9.734000206f));
  let x_457 : vec4<f32> = u_xlat3;
  u_xlat26 = dot(vec2<f32>(x_457.x, x_457.y), vec2<f32>(0.067110561f, 0.00583715f));
  let x_460 : f32 = u_xlat26;
  u_xlat26 = fract(x_460);
  let x_462 : f32 = u_xlat26;
  u_xlat26 = (x_462 * 52.982917786f);
  let x_464 : f32 = u_xlat26;
  u_xlat26 = fract(x_464);
  let x_466 : f32 = u_xlat26;
  let x_471 : vec2<f32> = (vec2<f32>(x_466, x_466) + vec2<f32>(0.33984375f, 0.76171875f));
  let x_472 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_471.x, x_471.y, x_472.z, x_472.w);
  let x_475 : f32 = u_xlat3.x;
  u_xlat26 = fract(x_475);
  let x_477 : f32 = u_xlat26;
  u_xlat5.z = ((x_477 * 2.0f) + -1.0f);
  let x_482 : f32 = u_xlat3.y;
  u_xlat26 = (x_482 * 6.283185482f);
  let x_485 : f32 = u_xlat5.z;
  let x_488 : f32 = u_xlat5.z;
  u_xlat3.x = ((-(x_485) * x_488) + 1.0f);
  let x_493 : f32 = u_xlat3.x;
  u_xlat3.x = sqrt(x_493);
  let x_497 : f32 = u_xlat26;
  u_xlat6 = sin(x_497);
  let x_500 : f32 = u_xlat26;
  u_xlat7 = cos(x_500);
  let x_503 : f32 = u_xlat3.x;
  let x_504 : f32 = u_xlat7;
  u_xlat5.x = (x_503 * x_504);
  let x_508 : f32 = u_xlat3.x;
  let x_509 : f32 = u_xlat6;
  u_xlat5.y = (x_508 * x_509);
  let x_512 : vec3<f32> = u_xlat5;
  u_xlat5 = (x_512 * vec3<f32>(0.707106769f, 0.707106769f, 0.707106769f));
  let x_516 : vec3<f32> = u_xlat1;
  let x_518 : vec3<f32> = u_xlat5;
  u_xlat26 = dot(-(x_516), x_518);
  let x_521 : f32 = u_xlat26;
  u_xlatb26 = (x_521 >= 0.0f);
  let x_523 : bool = u_xlatb26;
  if (x_523) {
    let x_527 : vec3<f32> = u_xlat5;
    x_524 = -(x_527);
  } else {
    let x_530 : vec3<f32> = u_xlat5;
    x_524 = x_530;
  }
  let x_531 : vec3<f32> = x_524;
  u_xlat5 = x_531;
  let x_532 : vec3<f32> = u_xlat5;
  let x_534 : vec4<f32> = x_33.x_SSAOParams;
  let x_537 : vec3<f32> = u_xlat8;
  u_xlat5 = ((x_532 * vec3<f32>(x_534.y, x_534.y, x_534.y)) + x_537);
  let x_539 : vec3<f32> = u_xlat5;
  let x_542 : vec4<f32> = x_33.x_CameraViewProjections[0i][1i];
  let x_544 : vec2<f32> = (vec2<f32>(x_539.y, x_539.y) * vec2<f32>(x_542.x, x_542.y));
  let x_545 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_544.x, x_544.y, x_545.z, x_545.w);
  let x_548 : vec4<f32> = x_33.x_CameraViewProjections[0i][0i];
  let x_550 : vec3<f32> = u_xlat5;
  let x_553 : vec4<f32> = u_xlat3;
  let x_555 : vec2<f32> = ((vec2<f32>(x_548.x, x_548.y) * vec2<f32>(x_550.x, x_550.x)) + vec2<f32>(x_553.x, x_553.y));
  let x_556 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_555.x, x_555.y, x_556.z, x_556.w);
  let x_559 : vec4<f32> = x_33.x_CameraViewProjections[0i][2i];
  let x_561 : vec3<f32> = u_xlat5;
  let x_564 : vec4<f32> = u_xlat3;
  let x_566 : vec2<f32> = ((vec2<f32>(x_559.x, x_559.y) * vec2<f32>(x_561.z, x_561.z)) + vec2<f32>(x_564.x, x_564.y));
  let x_567 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_566.x, x_566.y, x_567.z, x_567.w);
  let x_569 : vec3<f32> = u_xlat4;
  let x_570 : vec3<f32> = u_xlat5;
  u_xlat26 = dot(x_569, x_570);
  let x_573 : f32 = u_xlat26;
  u_xlat28 = (1.0f / -(x_573));
  let x_576 : vec4<f32> = u_xlat3;
  let x_578 : f32 = u_xlat28;
  let x_581 : vec2<f32> = ((vec2<f32>(x_576.x, x_576.y) * vec2<f32>(x_578, x_578)) + vec2<f32>(1.0f, 1.0f));
  let x_582 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_581.x, x_581.y, x_582.z, x_582.w);
  let x_584 : vec4<f32> = u_xlat3;
  let x_586 : vec2<f32> = (vec2<f32>(x_584.x, x_584.y) * vec2<f32>(0.5f, 0.5f));
  let x_587 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_586.x, x_586.y, x_587.z, x_587.w);
  let x_589 : vec4<f32> = u_xlat3;
  let x_593 : vec2<f32> = clamp(vec2<f32>(x_589.x, x_589.y), vec2<f32>(0.0f, 0.0f), vec2<f32>(1.0f, 1.0f));
  let x_594 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_593.x, x_593.y, x_594.z, x_594.w);
  let x_599 : vec4<f32> = u_xlat3;
  let x_602 : f32 = x_33.x_GlobalMipBias.x;
  let x_603 : vec4<f32> = textureSampleBias(x_CameraDepthTexture, sampler_CameraDepthTexture, vec2<f32>(x_599.x, x_599.y), x_602);
  u_xlat28 = x_603.x;
  let x_606 : f32 = x_33.x_ZBufferParams.z;
  let x_607 : f32 = u_xlat28;
  let x_610 : f32 = x_33.x_ZBufferParams.w;
  u_xlat5.x = ((x_606 * x_607) + x_610);
  let x_614 : f32 = u_xlat5.x;
  u_xlat5.x = (1.0f / x_614);
  let x_617 : f32 = u_xlat26;
  let x_620 : f32 = u_xlat5.x;
  u_xlat26 = (-(x_617) + -(x_620));
  let x_623 : f32 = u_xlat26;
  let x_626 : f32 = x_33.x_SSAOParams.y;
  u_xlatb26 = (abs(x_623) < x_626);
  let x_628 : bool = u_xlatb26;
  u_xlat26 = select(0.0f, 1.0f, x_628);
  let x_631 : f32 = u_xlat28;
  u_xlatb28 = (0.00001f < x_631);
  let x_633 : bool = u_xlatb28;
  u_xlat28 = select(0.0f, 1.0f, x_633);
  let x_635 : f32 = u_xlat26;
  let x_636 : f32 = u_xlat28;
  u_xlat26 = (x_635 * x_636);
  let x_639 : f32 = u_xlat3.y;
  u_xlat11.x = (-(x_639) + 1.0f);
  let x_644 : f32 = u_xlat5.x;
  let x_646 : f32 = x_33.x_ProjectionParams2.x;
  u_xlat28 = (x_644 * x_646);
  let x_649 : vec4<f32> = x_33.x_CameraViewXExtent[0i];
  let x_651 : vec4<f32> = u_xlat3;
  let x_655 : vec4<f32> = x_33.x_CameraViewTopLeftCorner[0i];
  u_xlat5 = ((vec3<f32>(x_649.x, x_649.y, x_649.z) * vec3<f32>(x_651.x, x_651.x, x_651.x)) + vec3<f32>(x_655.x, x_655.y, x_655.z));
  let x_659 : vec4<f32> = x_33.x_CameraViewYExtent[0i];
  let x_661 : vec3<f32> = u_xlat11;
  let x_664 : vec3<f32> = u_xlat5;
  u_xlat5 = ((vec3<f32>(x_659.x, x_659.y, x_659.z) * vec3<f32>(x_661.x, x_661.x, x_661.x)) + x_664);
  let x_666 : vec3<f32> = u_xlat5;
  let x_667 : f32 = u_xlat28;
  let x_670 : vec3<f32> = u_xlat8;
  u_xlat5 = ((x_666 * vec3<f32>(x_667, x_667, x_667)) + -(x_670));
  let x_673 : vec3<f32> = u_xlat5;
  let x_674 : vec3<f32> = u_xlat1;
  u_xlat3.x = dot(x_673, x_674);
  let x_677 : f32 = u_xlat0;
  let x_681 : f32 = u_xlat3.x;
  u_xlat3.x = ((-(x_677) * 0.004f) + x_681);
  let x_685 : f32 = u_xlat3.x;
  u_xlat3.x = max(x_685, 0.0f);
  let x_688 : vec3<f32> = u_xlat5;
  let x_689 : vec3<f32> = u_xlat5;
  u_xlat11.x = dot(x_688, x_689);
  let x_693 : f32 = u_xlat11.x;
  u_xlat11.x = (x_693 + 0.0001f);
  let x_697 : f32 = u_xlat11.x;
  u_xlat11.x = (1.0f / x_697);
  let x_701 : f32 = u_xlat11.x;
  let x_703 : f32 = u_xlat3.x;
  u_xlat3.x = (x_701 * x_703);
  let x_706 : f32 = u_xlat26;
  let x_708 : f32 = u_xlat3.x;
  u_xlat26 = (x_706 * x_708);
  let x_711 : f32 = u_xlat18.x;
  let x_712 : f32 = u_xlat25;
  let x_714 : f32 = u_xlat26;
  u_xlat25 = ((x_711 * x_712) + x_714);
  let x_716 : vec4<f32> = u_xlat3;
  u_xlat18.x = dot(vec2<f32>(x_716.z, x_716.w), vec2<f32>(0.067110561f, 0.00583715f));
  let x_721 : f32 = u_xlat18.x;
  u_xlat18.x = fract(x_721);
  let x_725 : f32 = u_xlat18.x;
  u_xlat18.x = (x_725 * 52.982917786f);
  let x_729 : f32 = u_xlat18.x;
  u_xlat18.x = fract(x_729);
  let x_732 : vec2<f32> = u_xlat18;
  u_xlat18 = (vec2<f32>(x_732.x, x_732.x) + vec2<f32>(0.75390625f, 0.133333296f));
  let x_739 : f32 = u_xlat18.x;
  u_xlat18.x = fract(x_739);
  let x_743 : f32 = u_xlat18.x;
  u_xlat3.z = ((x_743 * 2.0f) + -1.0f);
  let x_748 : f32 = u_xlat18.y;
  u_xlat18.x = (x_748 * 6.283185482f);
  let x_752 : f32 = u_xlat3.z;
  let x_755 : f32 = u_xlat3.z;
  u_xlat26 = ((-(x_752) * x_755) + 1.0f);
  let x_758 : f32 = u_xlat26;
  u_xlat26 = sqrt(x_758);
  let x_761 : f32 = u_xlat18.x;
  u_xlat5.x = sin(x_761);
  let x_765 : f32 = u_xlat18.x;
  u_xlat6 = cos(x_765);
  let x_767 : f32 = u_xlat26;
  let x_768 : f32 = u_xlat6;
  u_xlat3.x = (x_767 * x_768);
  let x_771 : f32 = u_xlat26;
  let x_773 : f32 = u_xlat5.x;
  u_xlat3.y = (x_771 * x_773);
  let x_776 : vec4<f32> = u_xlat3;
  let x_780 : vec3<f32> = (vec3<f32>(x_776.x, x_776.y, x_776.z) * vec3<f32>(0.866025388f, 0.866025388f, 0.866025388f));
  let x_781 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_780.x, x_780.y, x_780.z, x_781.w);
  let x_783 : vec3<f32> = u_xlat1;
  let x_785 : vec4<f32> = u_xlat3;
  u_xlat18.x = dot(-(x_783), vec3<f32>(x_785.x, x_785.y, x_785.z));
  let x_791 : f32 = u_xlat18.x;
  u_xlatb18 = (x_791 >= 0.0f);
  let x_793 : bool = u_xlatb18;
  if (x_793) {
    let x_797 : vec4<f32> = u_xlat3;
    x_794 = -(vec3<f32>(x_797.x, x_797.y, x_797.z));
  } else {
    let x_801 : vec4<f32> = u_xlat3;
    x_794 = vec3<f32>(x_801.x, x_801.y, x_801.z);
  }
  let x_803 : vec3<f32> = x_794;
  let x_804 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_803.x, x_803.y, x_803.z, x_804.w);
  let x_806 : vec4<f32> = u_xlat3;
  let x_809 : vec4<f32> = x_33.x_SSAOParams;
  let x_812 : vec3<f32> = u_xlat8;
  let x_813 : vec3<f32> = ((vec3<f32>(x_806.x, x_806.y, x_806.z) * vec3<f32>(x_809.y, x_809.y, x_809.y)) + x_812);
  let x_814 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_813.x, x_813.y, x_813.z, x_814.w);
  let x_816 : vec4<f32> = u_xlat3;
  let x_819 : vec4<f32> = x_33.x_CameraViewProjections[0i][1i];
  u_xlat18 = (vec2<f32>(x_816.y, x_816.y) * vec2<f32>(x_819.x, x_819.y));
  let x_823 : vec4<f32> = x_33.x_CameraViewProjections[0i][0i];
  let x_825 : vec4<f32> = u_xlat3;
  let x_828 : vec2<f32> = u_xlat18;
  u_xlat18 = ((vec2<f32>(x_823.x, x_823.y) * vec2<f32>(x_825.x, x_825.x)) + x_828);
  let x_831 : vec4<f32> = x_33.x_CameraViewProjections[0i][2i];
  let x_833 : vec4<f32> = u_xlat3;
  let x_836 : vec2<f32> = u_xlat18;
  u_xlat18 = ((vec2<f32>(x_831.x, x_831.y) * vec2<f32>(x_833.z, x_833.z)) + x_836);
  let x_838 : vec3<f32> = u_xlat4;
  let x_839 : vec4<f32> = u_xlat3;
  u_xlat3.x = dot(x_838, vec3<f32>(x_839.x, x_839.y, x_839.z));
  let x_844 : f32 = u_xlat3.x;
  u_xlat11.x = (1.0f / -(x_844));
  let x_848 : vec2<f32> = u_xlat18;
  let x_849 : vec3<f32> = u_xlat11;
  u_xlat18 = ((x_848 * vec2<f32>(x_849.x, x_849.x)) + vec2<f32>(1.0f, 1.0f));
  let x_853 : vec2<f32> = u_xlat18;
  u_xlat18 = (x_853 * vec2<f32>(0.5f, 0.5f));
  let x_855 : vec2<f32> = u_xlat18;
  u_xlat18 = clamp(x_855, vec2<f32>(0.0f, 0.0f), vec2<f32>(1.0f, 1.0f));
  let x_862 : vec2<f32> = u_xlat18;
  let x_864 : f32 = x_33.x_GlobalMipBias.x;
  let x_865 : vec4<f32> = textureSampleBias(x_CameraDepthTexture, sampler_CameraDepthTexture, x_862, x_864);
  u_xlat11.x = x_865.x;
  let x_870 : f32 = x_33.x_ZBufferParams.z;
  let x_872 : f32 = u_xlat11.x;
  let x_875 : f32 = x_33.x_ZBufferParams.w;
  u_xlat19 = ((x_870 * x_872) + x_875);
  let x_877 : f32 = u_xlat19;
  u_xlat19 = (1.0f / x_877);
  let x_879 : f32 = u_xlat19;
  let x_882 : f32 = u_xlat3.x;
  u_xlat3.x = (-(x_879) + -(x_882));
  let x_887 : f32 = u_xlat3.x;
  let x_890 : f32 = x_33.x_SSAOParams.y;
  u_xlatb3.x = (abs(x_887) < x_890);
  let x_894 : f32 = u_xlat11.x;
  u_xlatb3.y = (0.00001f < x_894);
  let x_898 : bool = u_xlatb3.x;
  u_xlat3.x = select(0.0f, 1.0f, x_898);
  let x_902 : bool = u_xlatb3.y;
  u_xlat3.y = select(0.0f, 1.0f, x_902);
  let x_906 : f32 = u_xlat3.y;
  let x_908 : f32 = u_xlat3.x;
  u_xlat3.x = (x_906 * x_908);
  let x_912 : f32 = u_xlat18.y;
  u_xlat26 = (-(x_912) + 1.0f);
  let x_915 : f32 = u_xlat19;
  let x_917 : f32 = x_33.x_ProjectionParams2.x;
  u_xlat11.x = (x_915 * x_917);
  let x_921 : vec4<f32> = x_33.x_CameraViewXExtent[0i];
  let x_923 : vec2<f32> = u_xlat18;
  let x_927 : vec4<f32> = x_33.x_CameraViewTopLeftCorner[0i];
  u_xlat5 = ((vec3<f32>(x_921.x, x_921.y, x_921.z) * vec3<f32>(x_923.x, x_923.x, x_923.x)) + vec3<f32>(x_927.x, x_927.y, x_927.z));
  let x_931 : vec4<f32> = x_33.x_CameraViewYExtent[0i];
  let x_933 : f32 = u_xlat26;
  let x_936 : vec3<f32> = u_xlat5;
  u_xlat5 = ((vec3<f32>(x_931.x, x_931.y, x_931.z) * vec3<f32>(x_933, x_933, x_933)) + x_936);
  let x_938 : vec3<f32> = u_xlat5;
  let x_939 : vec3<f32> = u_xlat11;
  let x_942 : vec3<f32> = u_xlat8;
  u_xlat11 = ((x_938 * vec3<f32>(x_939.x, x_939.x, x_939.x)) + -(x_942));
  let x_945 : vec3<f32> = u_xlat11;
  let x_946 : vec3<f32> = u_xlat1;
  u_xlat18.x = dot(x_945, x_946);
  let x_949 : f32 = u_xlat0;
  let x_953 : f32 = u_xlat18.x;
  u_xlat18.x = ((-(x_949) * 0.004f) + x_953);
  let x_957 : f32 = u_xlat18.x;
  u_xlat18.x = max(x_957, 0.0f);
  let x_960 : vec3<f32> = u_xlat11;
  let x_961 : vec3<f32> = u_xlat11;
  u_xlat26 = dot(x_960, x_961);
  let x_963 : f32 = u_xlat26;
  u_xlat26 = (x_963 + 0.0001f);
  let x_965 : f32 = u_xlat26;
  u_xlat26 = (1.0f / x_965);
  let x_967 : f32 = u_xlat26;
  let x_969 : f32 = u_xlat18.x;
  u_xlat18.x = (x_967 * x_969);
  let x_973 : f32 = u_xlat18.x;
  let x_975 : f32 = u_xlat3.x;
  let x_977 : f32 = u_xlat25;
  u_xlat25 = ((x_973 * x_975) + x_977);
  let x_979 : vec4<f32> = u_xlat2;
  let x_982 : vec4<f32> = x_33.x_SSAOParams;
  let x_988 : vec2<f32> = ((vec2<f32>(x_979.x, x_979.y) * vec2<f32>(x_982.z, x_982.z)) + vec2<f32>(6.248999596f, 14.600999832f));
  let x_989 : vec4<f32> = u_xlat2;
  u_xlat2 = vec4<f32>(x_988.x, x_988.y, x_989.z, x_989.w);
  let x_991 : vec4<f32> = u_xlat2;
  u_xlat2.x = dot(vec2<f32>(x_991.x, x_991.y), vec2<f32>(0.067110561f, 0.00583715f));
  let x_996 : f32 = u_xlat2.x;
  u_xlat2.x = fract(x_996);
  let x_1000 : f32 = u_xlat2.x;
  u_xlat2.x = (x_1000 * 52.982917786f);
  let x_1004 : f32 = u_xlat2.x;
  u_xlat2.x = fract(x_1004);
  let x_1007 : vec4<f32> = u_xlat2;
  let x_1012 : vec2<f32> = (vec2<f32>(x_1007.x, x_1007.x) + vec2<f32>(0.56640625f, 0.015625f));
  let x_1013 : vec4<f32> = u_xlat2;
  u_xlat2 = vec4<f32>(x_1012.x, x_1012.y, x_1013.z, x_1013.w);
  let x_1016 : f32 = u_xlat2.x;
  u_xlat2.x = fract(x_1016);
  let x_1020 : f32 = u_xlat2.x;
  u_xlat3.z = ((x_1020 * 2.0f) + -1.0f);
  let x_1025 : f32 = u_xlat2.y;
  u_xlat2.x = (x_1025 * 6.283185482f);
  let x_1030 : f32 = u_xlat3.z;
  let x_1033 : f32 = u_xlat3.z;
  u_xlat10.x = ((-(x_1030) * x_1033) + 1.0f);
  let x_1038 : f32 = u_xlat10.x;
  u_xlat10.x = sqrt(x_1038);
  let x_1042 : f32 = u_xlat2.x;
  u_xlat5.x = cos(x_1042);
  let x_1046 : f32 = u_xlat2.x;
  u_xlat2.x = sin(x_1046);
  let x_1050 : f32 = u_xlat10.x;
  let x_1052 : f32 = u_xlat5.x;
  u_xlat3.x = (x_1050 * x_1052);
  let x_1056 : f32 = u_xlat2.x;
  let x_1058 : f32 = u_xlat10.x;
  u_xlat3.y = (x_1056 * x_1058);
  let x_1061 : vec3<f32> = u_xlat1;
  let x_1063 : vec4<f32> = u_xlat3;
  u_xlat2.x = dot(-(x_1061), vec3<f32>(x_1063.x, x_1063.y, x_1063.z));
  let x_1071 : f32 = u_xlat2.x;
  u_xlatb2.x = (x_1071 >= 0.0f);
  let x_1075 : bool = u_xlatb2.x;
  if (x_1075) {
    let x_1079 : vec4<f32> = u_xlat3;
    x_1076 = -(vec3<f32>(x_1079.x, x_1079.y, x_1079.z));
  } else {
    let x_1083 : vec4<f32> = u_xlat3;
    x_1076 = vec3<f32>(x_1083.x, x_1083.y, x_1083.z);
  }
  let x_1085 : vec3<f32> = x_1076;
  let x_1086 : vec4<f32> = u_xlat2;
  u_xlat2 = vec4<f32>(x_1085.x, x_1085.y, x_1085.z, x_1086.w);
  let x_1088 : vec4<f32> = u_xlat2;
  let x_1091 : vec4<f32> = x_33.x_SSAOParams;
  let x_1094 : vec3<f32> = u_xlat8;
  let x_1095 : vec3<f32> = ((vec3<f32>(x_1088.x, x_1088.y, x_1088.z) * vec3<f32>(x_1091.y, x_1091.y, x_1091.y)) + x_1094);
  let x_1096 : vec4<f32> = u_xlat2;
  u_xlat2 = vec4<f32>(x_1095.x, x_1095.y, x_1095.z, x_1096.w);
  let x_1098 : vec4<f32> = u_xlat2;
  let x_1101 : vec4<f32> = x_33.x_CameraViewProjections[0i][1i];
  let x_1103 : vec2<f32> = (vec2<f32>(x_1098.y, x_1098.y) * vec2<f32>(x_1101.x, x_1101.y));
  let x_1104 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_1103.x, x_1103.y, x_1104.z, x_1104.w);
  let x_1107 : vec4<f32> = x_33.x_CameraViewProjections[0i][0i];
  let x_1109 : vec4<f32> = u_xlat2;
  let x_1112 : vec4<f32> = u_xlat3;
  let x_1114 : vec2<f32> = ((vec2<f32>(x_1107.x, x_1107.y) * vec2<f32>(x_1109.x, x_1109.x)) + vec2<f32>(x_1112.x, x_1112.y));
  let x_1115 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_1114.x, x_1114.y, x_1115.z, x_1115.w);
  let x_1118 : vec4<f32> = x_33.x_CameraViewProjections[0i][2i];
  let x_1120 : vec4<f32> = u_xlat2;
  let x_1123 : vec4<f32> = u_xlat3;
  let x_1125 : vec2<f32> = ((vec2<f32>(x_1118.x, x_1118.y) * vec2<f32>(x_1120.z, x_1120.z)) + vec2<f32>(x_1123.x, x_1123.y));
  let x_1126 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_1125.x, x_1125.y, x_1126.z, x_1126.w);
  let x_1128 : vec3<f32> = u_xlat4;
  let x_1129 : vec4<f32> = u_xlat2;
  u_xlat2.x = dot(x_1128, vec3<f32>(x_1129.x, x_1129.y, x_1129.z));
  let x_1134 : f32 = u_xlat2.x;
  u_xlat10.x = (1.0f / -(x_1134));
  let x_1138 : vec4<f32> = u_xlat3;
  let x_1140 : vec2<f32> = u_xlat10;
  u_xlat10 = ((vec2<f32>(x_1138.x, x_1138.y) * vec2<f32>(x_1140.x, x_1140.x)) + vec2<f32>(1.0f, 1.0f));
  let x_1144 : vec2<f32> = u_xlat10;
  u_xlat10 = (x_1144 * vec2<f32>(0.5f, 0.5f));
  let x_1146 : vec2<f32> = u_xlat10;
  u_xlat10 = clamp(x_1146, vec2<f32>(0.0f, 0.0f), vec2<f32>(1.0f, 1.0f));
  let x_1153 : vec2<f32> = u_xlat10;
  let x_1155 : f32 = x_33.x_GlobalMipBias.x;
  let x_1156 : vec4<f32> = textureSampleBias(x_CameraDepthTexture, sampler_CameraDepthTexture, x_1153, x_1155);
  u_xlat26 = x_1156.x;
  let x_1159 : f32 = x_33.x_ZBufferParams.z;
  let x_1160 : f32 = u_xlat26;
  let x_1163 : f32 = x_33.x_ZBufferParams.w;
  u_xlat3.x = ((x_1159 * x_1160) + x_1163);
  let x_1167 : f32 = u_xlat3.x;
  u_xlat3.x = (1.0f / x_1167);
  let x_1171 : f32 = u_xlat2.x;
  let x_1174 : f32 = u_xlat3.x;
  u_xlat2.x = (-(x_1171) + -(x_1174));
  let x_1179 : f32 = u_xlat2.x;
  let x_1182 : f32 = x_33.x_SSAOParams.y;
  u_xlatb2.x = (abs(x_1179) < x_1182);
  let x_1185 : f32 = u_xlat26;
  u_xlatb2.w = (0.00001f < x_1185);
  let x_1189 : bool = u_xlatb2.x;
  u_xlat2.x = select(0.0f, 1.0f, x_1189);
  let x_1193 : bool = u_xlatb2.w;
  u_xlat2.w = select(0.0f, 1.0f, x_1193);
  let x_1197 : f32 = u_xlat2.w;
  let x_1199 : f32 = u_xlat2.x;
  u_xlat2.x = (x_1197 * x_1199);
  let x_1203 : f32 = u_xlat10.y;
  u_xlat18.x = (-(x_1203) + 1.0f);
  let x_1208 : f32 = u_xlat3.x;
  let x_1210 : f32 = x_33.x_ProjectionParams2.x;
  u_xlat26 = (x_1208 * x_1210);
  let x_1213 : vec4<f32> = x_33.x_CameraViewXExtent[0i];
  let x_1215 : vec2<f32> = u_xlat10;
  let x_1219 : vec4<f32> = x_33.x_CameraViewTopLeftCorner[0i];
  let x_1221 : vec3<f32> = ((vec3<f32>(x_1213.x, x_1213.y, x_1213.z) * vec3<f32>(x_1215.x, x_1215.x, x_1215.x)) + vec3<f32>(x_1219.x, x_1219.y, x_1219.z));
  let x_1222 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_1221.x, x_1221.y, x_1221.z, x_1222.w);
  let x_1225 : vec4<f32> = x_33.x_CameraViewYExtent[0i];
  let x_1227 : vec2<f32> = u_xlat18;
  let x_1230 : vec4<f32> = u_xlat3;
  let x_1232 : vec3<f32> = ((vec3<f32>(x_1225.x, x_1225.y, x_1225.z) * vec3<f32>(x_1227.x, x_1227.x, x_1227.x)) + vec3<f32>(x_1230.x, x_1230.y, x_1230.z));
  let x_1233 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_1232.x, x_1232.y, x_1232.z, x_1233.w);
  let x_1235 : vec4<f32> = u_xlat3;
  let x_1237 : f32 = u_xlat26;
  let x_1240 : vec3<f32> = u_xlat8;
  u_xlat8 = ((vec3<f32>(x_1235.x, x_1235.y, x_1235.z) * vec3<f32>(x_1237, x_1237, x_1237)) + -(x_1240));
  let x_1243 : vec3<f32> = u_xlat8;
  let x_1244 : vec3<f32> = u_xlat1;
  u_xlat10.x = dot(x_1243, x_1244);
  let x_1247 : f32 = u_xlat0;
  let x_1251 : f32 = u_xlat10.x;
  u_xlat10.x = ((-(x_1247) * 0.004f) + x_1251);
  let x_1255 : f32 = u_xlat10.x;
  u_xlat10.x = max(x_1255, 0.0f);
  let x_1258 : vec3<f32> = u_xlat8;
  let x_1259 : vec3<f32> = u_xlat8;
  u_xlat8.x = dot(x_1258, x_1259);
  let x_1263 : f32 = u_xlat8.x;
  u_xlat8.x = (x_1263 + 0.0001f);
  let x_1267 : f32 = u_xlat8.x;
  u_xlat8.x = (1.0f / x_1267);
  let x_1271 : f32 = u_xlat8.x;
  let x_1273 : f32 = u_xlat10.x;
  u_xlat8.x = (x_1271 * x_1273);
  let x_1277 : f32 = u_xlat8.x;
  let x_1279 : f32 = u_xlat2.x;
  let x_1281 : f32 = u_xlat25;
  u_xlat8.x = ((x_1277 * x_1279) + x_1281);
  let x_1285 : f32 = u_xlat8.x;
  let x_1287 : f32 = x_33.x_SSAOParams.y;
  u_xlat8.x = (x_1285 * x_1287);
  let x_1291 : f32 = x_33.x_SSAOParams.w;
  u_xlat16 = (1.0f / x_1291);
  let x_1293 : f32 = u_xlat0;
  let x_1295 : f32 = u_xlat16;
  u_xlat0 = ((-(x_1293) * x_1295) + 1.0f);
  let x_1298 : f32 = u_xlat0;
  let x_1299 : f32 = u_xlat0;
  u_xlat0 = (x_1298 * x_1299);
  let x_1302 : f32 = u_xlat8.x;
  let x_1304 : f32 = x_33.x_SSAOParams.x;
  u_xlat8.x = (x_1302 * x_1304);
  let x_1307 : f32 = u_xlat0;
  let x_1309 : f32 = u_xlat8.x;
  u_xlat0 = (x_1307 * x_1309);
  let x_1311 : f32 = u_xlat0;
  u_xlat0 = (x_1311 * 0.25f);
  let x_1314 : f32 = u_xlat0;
  u_xlat0 = clamp(x_1314, 0.0f, 1.0f);
  let x_1316 : f32 = u_xlat0;
  u_xlat0 = log2(x_1316);
  let x_1318 : f32 = u_xlat0;
  u_xlat0 = (x_1318 * 0.600000024f);
  let x_1321 : f32 = u_xlat0;
  SV_Target0.x = exp2(x_1321);
  let x_1325 : vec3<f32> = u_xlat1;
  let x_1327 : vec3<f32> = ((x_1325 * vec3<f32>(0.5f, 0.5f, 0.5f)) + vec3<f32>(0.5f, 0.5f, 0.5f));
  let x_1328 : vec4<f32> = SV_Target0;
  SV_Target0 = vec4<f32>(x_1328.x, x_1327.x, x_1327.y, x_1327.z);
  return;
}

struct main_out {
  @location(0)
  SV_Target0_1 : vec4<f32>,
}

@fragment
fn main(@location(0) vs_TEXCOORD0_param : vec2<f32>, @builtin(position) gl_FragCoord_param : vec4<f32>) -> main_out {
  vs_TEXCOORD0 = vs_TEXCOORD0_param;
  gl_FragCoord = gl_FragCoord_param;
  main_1();
  return main_out(SV_Target0);
}

