struct PGlobals {
  x_GlobalMipBias : vec2<f32>,
  @size(8)
  padding : u32,
  x_MainLightPosition : vec4<f32>,
  x_MainLightColor : vec4<f32>,
  x_AdditionalLightsCount : vec4<f32>,
  x_Time : vec4<f32>,
  x_ScreenParams : vec4<f32>,
  x_ZBufferParams : vec4<f32>,
  unity_FogColor : vec4<f32>,
  unity_MatrixVP : mat4x4<f32>,
  x_MaxDepth : f32,
  @size(12)
  padding_1 : u32,
  x_VeraslWater_DepthCamParams : vec4<f32>,
}

struct UnityPerMaterial {
  x_BumpScale : f32,
  @size(12)
  padding_2 : u32,
  x_DitherPattern_TexelSize : vec4<f32>,
}

type Arr = array<mat4x4<f32>, 5u>;

struct MainLightShadows {
  x_MainLightWorldToShadow : Arr,
  x_CascadeShadowSplitSpheres0 : vec4<f32>,
  x_CascadeShadowSplitSpheres1 : vec4<f32>,
  x_CascadeShadowSplitSpheres2 : vec4<f32>,
  x_CascadeShadowSplitSpheres3 : vec4<f32>,
  x_CascadeShadowSplitSphereRadii : vec4<f32>,
  x_MainLightShadowOffset0 : vec4<f32>,
  x_MainLightShadowOffset1 : vec4<f32>,
  x_MainLightShadowParams : vec4<f32>,
  x_MainLightShadowmapSize : vec4<f32>,
}

type Arr_1 = array<vec4<f32>, 2u>;

struct UnityPerDraw {
  unity_ObjectToWorld : mat4x4<f32>,
  unity_WorldToObject : mat4x4<f32>,
  unity_LODFade : vec4<f32>,
  unity_WorldTransformParams : vec4<f32>,
  unity_RenderingLayer : vec4<f32>,
  unity_LightData : vec4<f32>,
  unity_LightIndices : Arr_1,
  unity_ProbesOcclusion : vec4<f32>,
  unity_SpecCube0_HDR : vec4<f32>,
  unity_SpecCube1_HDR : vec4<f32>,
  unity_SpecCube0_BoxMax : vec4<f32>,
  unity_SpecCube0_BoxMin : vec4<f32>,
  unity_SpecCube0_ProbePosition : vec4<f32>,
  unity_SpecCube1_BoxMax : vec4<f32>,
  unity_SpecCube1_BoxMin : vec4<f32>,
  unity_SpecCube1_ProbePosition : vec4<f32>,
  unity_LightmapST : vec4<f32>,
  unity_DynamicLightmapST : vec4<f32>,
  unity_SHAr : vec4<f32>,
  unity_SHAg : vec4<f32>,
  unity_SHAb : vec4<f32>,
  unity_SHBr : vec4<f32>,
  unity_SHBg : vec4<f32>,
  unity_SHBb : vec4<f32>,
  unity_SHC : vec4<f32>,
  unity_RendererBounds_Min : vec4<f32>,
  unity_RendererBounds_Max : vec4<f32>,
  unity_MatrixPreviousM : mat4x4<f32>,
  unity_MatrixPreviousMI : mat4x4<f32>,
  unity_MotionVectorsParams : vec4<f32>,
  unity_SpriteColor : vec4<f32>,
  unity_SpriteProps : vec4<f32>,
}

type Arr_2 = array<vec4<f32>, 256u>;

type Arr_3 = array<vec4<f32>, 256u>;

type Arr_4 = array<vec4<f32>, 256u>;

type Arr_5 = array<vec4<f32>, 256u>;

type Arr_6 = array<vec4<f32>, 256u>;

struct strided_arr {
  @size(16)
  el : f32,
}

type Arr_7 = array<strided_arr, 256u>;

struct AdditionalLights {
  x_AdditionalLightsPosition : Arr_6,
  x_AdditionalLightsColor : Arr_6,
  x_AdditionalLightsAttenuation : Arr_6,
  x_AdditionalLightsSpotDir : Arr_6,
  x_AdditionalLightsOcclusionProbes : Arr_6,
  x_AdditionalLightsLayerMasks : Arr_7,
}

var<private> vs_TEXCOORD6 : vec4<f32>;

@group(0) @binding(1) var x_WaterFXMap : texture_2d<f32>;

@group(0) @binding(10) var sampler_ScreenTextures_linear_clamp : sampler;

var<private> vs_TEXCOORD3 : vec3<f32>;

@group(1) @binding(0) var<uniform> x_40 : PGlobals;

@group(0) @binding(2) var x_CameraDepthTexture : texture_2d<f32>;

var<private> vs_TEXCOORD5 : vec4<f32>;

var<private> vs_TEXCOORD1 : vec3<f32>;

@group(0) @binding(4) var x_WaterDepthMap : texture_2d<f32>;

@group(0) @binding(13) var sampler_WaterDepthMap_linear_clamp : sampler;

@group(0) @binding(6) var x_SurfaceMap : texture_2d<f32>;

@group(0) @binding(15) var sampler_SurfaceMap : sampler;

var<private> vs_TEXCOORD0 : vec4<f32>;

@group(1) @binding(3) var<uniform> x_203 : UnityPerMaterial;

var<private> vs_NORMAL0 : vec3<f32>;

var<private> vs_TEXCOORD2 : vec3<f32>;

@group(1) @binding(4) var<uniform> x_362 : MainLightShadows;

@group(0) @binding(9) var x_MainLightShadowmapTexture : texture_depth_2d;

@group(0) @binding(18) var sampler_MainLightShadowmapTexture : sampler_comparison;

@group(0) @binding(8) var x_DitherPattern : texture_2d<f32>;

@group(0) @binding(17) var sampler_DitherPattern : sampler;

@group(1) @binding(2) var<uniform> x_2326 : UnityPerDraw;

@group(0) @binding(7) var x_FoamMap : texture_2d<f32>;

@group(0) @binding(16) var sampler_FoamMap : sampler;

@group(0) @binding(5) var x_AbsorptionScatteringRamp : texture_2d<f32>;

@group(0) @binding(14) var sampler_AbsorptionScatteringRamp : sampler;

@group(1) @binding(1) var<uniform> x_2726 : AdditionalLights;

@group(0) @binding(0) var x_CubemapTexture : texture_cube<f32>;

@group(0) @binding(11) var sampler_CubemapTexture : sampler;

@group(0) @binding(3) var x_CameraOpaqueTexture : texture_2d<f32>;

@group(0) @binding(12) var sampler_CameraOpaqueTexture_linear_clamp : sampler;

var<private> vs_TEXCOORD4 : vec2<f32>;

var<private> SV_Target0 : vec4<f32>;

var<private> gl_FragCoord : vec4<f32>;

fn main_1() {
  var u_xlat0 : vec4<f32>;
  var u_xlat1 : vec3<f32>;
  var u_xlat38 : f32;
  var u_xlat2 : vec4<f32>;
  var u_xlat57 : f32;
  var u_xlat58 : f32;
  var u_xlat40 : vec2<f32>;
  var u_xlat3 : f32;
  var u_xlat4 : vec4<f32>;
  var u_xlat20 : vec2<f32>;
  var u_xlatb22 : bool;
  var x_320 : vec2<f32>;
  var u_xlat22 : vec3<f32>;
  var u_xlat5 : vec4<f32>;
  var u_xlat6 : vec4<f32>;
  var u_xlat7 : vec4<f32>;
  var u_xlatb4 : vec4<bool>;
  var u_xlatu22 : u32;
  var u_xlati22 : i32;
  var txVec0 : vec3<f32>;
  var txVec1 : vec3<f32>;
  var txVec2 : vec3<f32>;
  var txVec3 : vec3<f32>;
  var u_xlatb23 : bool;
  var u_xlat23 : vec2<f32>;
  var u_xlat43 : vec2<f32>;
  var u_xlat45 : vec2<f32>;
  var u_xlat8 : vec4<f32>;
  var u_xlat9 : vec4<f32>;
  var u_xlat10 : vec4<f32>;
  var u_xlat11 : vec4<f32>;
  var u_xlat12 : vec4<f32>;
  var u_xlat13 : vec4<f32>;
  var txVec4 : vec3<f32>;
  var u_xlat42 : f32;
  var txVec5 : vec3<f32>;
  var u_xlat61 : f32;
  var txVec6 : vec3<f32>;
  var txVec7 : vec3<f32>;
  var txVec8 : vec3<f32>;
  var txVec9 : vec3<f32>;
  var txVec10 : vec3<f32>;
  var txVec11 : vec3<f32>;
  var txVec12 : vec3<f32>;
  var u_xlat49 : vec2<f32>;
  var u_xlat14 : vec4<f32>;
  var u_xlat25 : vec3<f32>;
  var u_xlat15 : vec2<f32>;
  var u_xlat46 : vec2<f32>;
  var u_xlat16 : vec4<f32>;
  var u_xlat17 : vec4<f32>;
  var u_xlat18 : vec4<f32>;
  var txVec13 : vec3<f32>;
  var txVec14 : vec3<f32>;
  var txVec15 : vec3<f32>;
  var txVec16 : vec3<f32>;
  var txVec17 : vec3<f32>;
  var txVec18 : vec3<f32>;
  var txVec19 : vec3<f32>;
  var txVec20 : vec3<f32>;
  var txVec21 : vec3<f32>;
  var txVec22 : vec3<f32>;
  var txVec23 : vec3<f32>;
  var txVec24 : vec3<f32>;
  var txVec25 : vec3<f32>;
  var txVec26 : vec3<f32>;
  var txVec27 : vec3<f32>;
  var txVec28 : vec3<f32>;
  var txVec29 : vec3<f32>;
  var u_xlatb41 : bool;
  var u_xlatb60 : bool;
  var x_1813 : f32;
  var u_xlat41 : vec2<f32>;
  var u_xlatu_loop_1 : u32;
  var u_xlat44 : vec2<f32>;
  var u_xlatb7 : vec4<bool>;
  var u_xlatu7 : u32;
  var u_xlati7 : i32;
  var u_xlat26 : vec3<f32>;
  var txVec30 : vec3<f32>;
  var u_xlatb5 : vec4<bool>;
  var u_xlatu0 : u32;
  var u_xlati0 : i32;
  var u_xlat19 : f32;
  var u_xlatb19 : bool;
  var u_xlatb0 : bool;
  var u_xlat59 : f32;
  var u_xlatu_loop_2 : u32;
  var u_xlatu1 : u32;
  var u_xlati59 : i32;
  var indexable : array<vec4<u32>, 4u>;
  var u_xlati1 : i32;
  var u_xlat_precise_vec4 : vec4<f32>;
  var u_xlat_precise_ivec4 : vec4<i32>;
  var u_xlat_precise_bvec4 : vec4<bool>;
  var u_xlat_precise_uvec4 : vec4<u32>;
  let x_13 : vec4<f32> = vs_TEXCOORD6;
  let x_15 : vec4<f32> = vs_TEXCOORD6;
  let x_17 : vec2<f32> = (vec2<f32>(x_13.x, x_13.y) / vec2<f32>(x_15.w, x_15.w));
  let x_18 : vec4<f32> = u_xlat0;
  u_xlat0 = vec4<f32>(x_17.x, x_17.y, x_18.z, x_18.w);
  let x_35 : vec3<f32> = vs_TEXCOORD3;
  let x_47 : f32 = x_40.x_GlobalMipBias.x;
  let x_48 : vec4<f32> = textureSampleBias(x_WaterFXMap, sampler_ScreenTextures_linear_clamp, vec2<f32>(x_35.x, x_35.y), x_47);
  u_xlat1 = vec3<f32>(x_48.x, x_48.y, x_48.z);
  let x_56 : vec4<f32> = u_xlat0;
  let x_59 : f32 = x_40.x_GlobalMipBias.x;
  let x_60 : vec4<f32> = textureSampleBias(x_CameraDepthTexture, sampler_ScreenTextures_linear_clamp, vec2<f32>(x_56.x, x_56.y), x_59);
  u_xlat38 = x_60.x;
  let x_65 : f32 = x_40.x_ZBufferParams.z;
  let x_66 : f32 = u_xlat38;
  let x_70 : f32 = x_40.x_ZBufferParams.w;
  u_xlat38 = ((x_65 * x_66) + x_70);
  let x_73 : f32 = u_xlat38;
  u_xlat38 = (1.0f / x_73);
  let x_75 : f32 = u_xlat38;
  let x_79 : f32 = vs_TEXCOORD5.x;
  let x_83 : f32 = vs_TEXCOORD5.y;
  u_xlat38 = ((x_75 * x_79) + -(x_83));
  let x_88 : vec3<f32> = vs_TEXCOORD1;
  let x_95 : vec2<f32> = ((vec2<f32>(x_88.x, x_88.z) * vec2<f32>(0.002f, 0.002f)) + vec2<f32>(0.5f, 0.5f));
  let x_96 : vec4<f32> = u_xlat2;
  u_xlat2 = vec4<f32>(x_95.x, x_95.y, x_96.z, x_96.w);
  let x_104 : vec4<f32> = u_xlat2;
  let x_106 : vec4<f32> = textureSampleLevel(x_WaterDepthMap, sampler_WaterDepthMap_linear_clamp, vec2<f32>(x_104.x, x_104.y), 1.0f);
  u_xlat57 = x_106.x;
  let x_108 : f32 = u_xlat57;
  u_xlat57 = (-(x_108) + 1.0f);
  let x_114 : f32 = x_40.x_MaxDepth;
  let x_117 : f32 = x_40.x_VeraslWater_DepthCamParams.x;
  u_xlat58 = (x_114 + x_117);
  let x_119 : f32 = u_xlat57;
  let x_120 : f32 = u_xlat58;
  let x_123 : f32 = x_40.x_VeraslWater_DepthCamParams.x;
  u_xlat57 = ((x_119 * x_120) + -(x_123));
  let x_126 : f32 = u_xlat57;
  let x_128 : f32 = vs_TEXCOORD1.y;
  u_xlat57 = (x_126 + x_128);
  let x_131 : f32 = x_40.x_MaxDepth;
  u_xlat58 = (1.0f / x_131);
  let x_139 : vec4<f32> = vs_TEXCOORD0;
  let x_142 : f32 = x_40.x_GlobalMipBias.x;
  let x_143 : vec4<f32> = textureSampleBias(x_SurfaceMap, sampler_SurfaceMap, vec2<f32>(x_139.z, x_139.w), x_142);
  let x_144 : vec2<f32> = vec2<f32>(x_143.x, x_143.y);
  let x_145 : vec4<f32> = u_xlat2;
  u_xlat2 = vec4<f32>(x_144.x, x_144.y, x_145.z, x_145.w);
  let x_147 : vec4<f32> = u_xlat2;
  let x_154 : vec2<f32> = ((vec2<f32>(x_147.x, x_147.y) * vec2<f32>(2.0f, 2.0f)) + vec2<f32>(-1.0f, -1.0f));
  let x_155 : vec4<f32> = u_xlat2;
  u_xlat2 = vec4<f32>(x_154.x, x_154.y, x_155.z, x_155.w);
  let x_162 : vec4<f32> = vs_TEXCOORD0;
  let x_165 : f32 = x_40.x_GlobalMipBias.x;
  let x_166 : vec4<f32> = textureSampleBias(x_SurfaceMap, sampler_SurfaceMap, vec2<f32>(x_162.x, x_162.y), x_165);
  u_xlat40 = vec2<f32>(x_166.x, x_166.y);
  let x_168 : vec2<f32> = u_xlat40;
  u_xlat40 = ((x_168 * vec2<f32>(2.0f, 2.0f)) + vec2<f32>(-1.0f, -1.0f));
  let x_171 : vec2<f32> = u_xlat40;
  let x_173 : vec4<f32> = u_xlat2;
  let x_175 : vec2<f32> = ((x_171 * vec2<f32>(0.5f, 0.5f)) + vec2<f32>(x_173.x, x_173.y));
  let x_176 : vec4<f32> = u_xlat2;
  u_xlat2 = vec4<f32>(x_175.x, x_175.y, x_176.z, x_176.w);
  let x_179 : f32 = u_xlat38;
  u_xlat3 = (x_179 * 0.005f);
  let x_182 : f32 = u_xlat38;
  u_xlat40.x = ((x_182 * 0.25f) + 0.25f);
  let x_188 : f32 = u_xlat40.x;
  u_xlat40.x = clamp(x_188, 0.0f, 1.0f);
  let x_192 : vec2<f32> = u_xlat40;
  let x_194 : vec4<f32> = u_xlat2;
  let x_196 : vec2<f32> = (vec2<f32>(x_192.x, x_192.x) * vec2<f32>(x_194.x, x_194.y));
  let x_197 : vec4<f32> = u_xlat2;
  u_xlat2 = vec4<f32>(x_196.x, x_196.y, x_197.z, x_197.w);
  let x_199 : vec4<f32> = u_xlat2;
  let x_205 : f32 = x_203.x_BumpScale;
  let x_209 : vec3<f32> = vs_NORMAL0;
  let x_211 : vec2<f32> = ((vec2<f32>(x_199.x, x_199.y) * vec2<f32>(x_205, x_205)) + vec2<f32>(x_209.x, x_209.z));
  let x_212 : vec4<f32> = u_xlat2;
  u_xlat2 = vec4<f32>(x_211.x, x_212.y, x_211.y, x_212.w);
  let x_215 : vec3<f32> = u_xlat1;
  let x_218 : vec2<f32> = (-(vec2<f32>(x_215.y, x_215.z)) + vec2<f32>(0.5f, 0.5f));
  let x_219 : vec4<f32> = u_xlat4;
  u_xlat4 = vec4<f32>(x_218.x, x_219.y, x_218.y, x_219.w);
  u_xlat2.w = 0.0f;
  let x_223 : f32 = vs_NORMAL0.y;
  u_xlat4.y = x_223;
  let x_225 : vec4<f32> = u_xlat2;
  let x_227 : vec4<f32> = u_xlat4;
  let x_229 : vec3<f32> = (vec3<f32>(x_225.x, x_225.w, x_225.z) + vec3<f32>(x_227.x, x_227.y, x_227.z));
  let x_230 : vec4<f32> = u_xlat2;
  u_xlat2 = vec4<f32>(x_229.x, x_229.y, x_229.z, x_230.w);
  let x_233 : vec4<f32> = u_xlat2;
  let x_235 : vec4<f32> = u_xlat2;
  u_xlat20.x = dot(vec3<f32>(x_233.x, x_233.y, x_233.z), vec3<f32>(x_235.x, x_235.y, x_235.z));
  let x_240 : f32 = u_xlat20.x;
  u_xlat20.x = inverseSqrt(x_240);
  let x_243 : vec2<f32> = u_xlat20;
  let x_245 : vec4<f32> = u_xlat2;
  let x_247 : vec3<f32> = (vec3<f32>(x_243.x, x_243.x, x_243.x) * vec3<f32>(x_245.x, x_245.y, x_245.z));
  let x_248 : vec4<f32> = u_xlat2;
  u_xlat2 = vec4<f32>(x_247.x, x_247.y, x_247.z, x_248.w);
  let x_250 : vec4<f32> = u_xlat2;
  let x_257 : vec4<f32> = x_40.unity_MatrixVP[1i];
  u_xlat20 = (-(vec2<f32>(x_250.y, x_250.y)) * vec2<f32>(x_257.x, x_257.z));
  let x_261 : vec4<f32> = x_40.unity_MatrixVP[0i];
  let x_263 : vec4<f32> = u_xlat2;
  let x_267 : vec2<f32> = u_xlat20;
  u_xlat20 = ((vec2<f32>(x_261.x, x_261.z) * -(vec2<f32>(x_263.x, x_263.x))) + x_267);
  let x_271 : vec4<f32> = x_40.unity_MatrixVP[2i];
  let x_273 : vec4<f32> = u_xlat2;
  let x_277 : vec2<f32> = u_xlat20;
  u_xlat20 = ((vec2<f32>(x_271.x, x_271.z) * -(vec2<f32>(x_273.z, x_273.z))) + x_277);
  let x_279 : f32 = u_xlat3;
  u_xlat3 = x_279;
  let x_280 : f32 = u_xlat3;
  u_xlat3 = clamp(x_280, 0.0f, 1.0f);
  let x_282 : vec2<f32> = u_xlat20;
  let x_283 : f32 = u_xlat3;
  let x_286 : vec4<f32> = u_xlat0;
  u_xlat20 = ((x_282 * vec2<f32>(x_283, x_283)) + vec2<f32>(x_286.x, x_286.y));
  let x_292 : vec2<f32> = u_xlat20;
  let x_294 : f32 = x_40.x_GlobalMipBias.x;
  let x_295 : vec4<f32> = textureSampleBias(x_CameraDepthTexture, sampler_ScreenTextures_linear_clamp, x_292, x_294);
  u_xlat3 = x_295.x;
  let x_298 : f32 = x_40.x_ZBufferParams.z;
  let x_299 : f32 = u_xlat3;
  let x_302 : f32 = x_40.x_ZBufferParams.w;
  u_xlat3 = ((x_298 * x_299) + x_302);
  let x_304 : f32 = u_xlat3;
  u_xlat3 = (1.0f / x_304);
  let x_306 : f32 = u_xlat3;
  let x_308 : f32 = vs_TEXCOORD5.x;
  let x_311 : f32 = vs_TEXCOORD5.y;
  u_xlat3 = ((x_306 * x_308) + -(x_311));
  let x_317 : f32 = u_xlat3;
  u_xlatb22 = (x_317 < 0.0f);
  let x_319 : bool = u_xlatb22;
  if (x_319) {
    let x_323 : vec4<f32> = u_xlat0;
    x_320 = vec2<f32>(x_323.x, x_323.y);
  } else {
    let x_326 : vec2<f32> = u_xlat20;
    x_320 = x_326;
  }
  let x_327 : vec2<f32> = x_320;
  u_xlat20 = x_327;
  let x_328 : bool = u_xlatb22;
  let x_329 : f32 = u_xlat38;
  let x_330 : f32 = u_xlat3;
  u_xlat38 = select(x_330, x_329, x_328);
  let x_332 : vec4<f32> = u_xlat2;
  let x_335 : vec3<f32> = vs_TEXCOORD2;
  u_xlat3 = dot(vec3<f32>(x_332.x, x_332.y, x_332.z), x_335);
  let x_337 : f32 = u_xlat3;
  u_xlat3 = (-(x_337) + 1.0f);
  let x_341 : f32 = u_xlat3;
  let x_342 : f32 = u_xlat3;
  u_xlat22.x = (x_341 * x_342);
  let x_346 : f32 = u_xlat22.x;
  let x_348 : f32 = u_xlat22.x;
  u_xlat22.x = (x_346 * x_348);
  let x_352 : f32 = u_xlat22.x;
  let x_353 : f32 = u_xlat3;
  u_xlat3 = (x_352 * x_353);
  let x_355 : f32 = u_xlat3;
  u_xlat3 = clamp(x_355, 0.0f, 1.0f);
  let x_357 : vec3<f32> = vs_TEXCOORD1;
  let x_364 : vec4<f32> = x_362.x_CascadeShadowSplitSpheres0;
  u_xlat22 = (x_357 + -(vec3<f32>(x_364.x, x_364.y, x_364.z)));
  let x_368 : vec3<f32> = vs_TEXCOORD1;
  let x_370 : vec4<f32> = x_362.x_CascadeShadowSplitSpheres1;
  let x_373 : vec3<f32> = (x_368 + -(vec3<f32>(x_370.x, x_370.y, x_370.z)));
  let x_374 : vec4<f32> = u_xlat4;
  u_xlat4 = vec4<f32>(x_373.x, x_373.y, x_373.z, x_374.w);
  let x_377 : vec3<f32> = vs_TEXCOORD1;
  let x_380 : vec4<f32> = x_362.x_CascadeShadowSplitSpheres2;
  let x_383 : vec3<f32> = (x_377 + -(vec3<f32>(x_380.x, x_380.y, x_380.z)));
  let x_384 : vec4<f32> = u_xlat5;
  u_xlat5 = vec4<f32>(x_383.x, x_383.y, x_383.z, x_384.w);
  let x_387 : vec3<f32> = vs_TEXCOORD1;
  let x_390 : vec4<f32> = x_362.x_CascadeShadowSplitSpheres3;
  let x_393 : vec3<f32> = (x_387 + -(vec3<f32>(x_390.x, x_390.y, x_390.z)));
  let x_394 : vec4<f32> = u_xlat6;
  u_xlat6 = vec4<f32>(x_393.x, x_393.y, x_393.z, x_394.w);
  let x_397 : vec3<f32> = u_xlat22;
  let x_398 : vec3<f32> = u_xlat22;
  u_xlat7.x = dot(x_397, x_398);
  let x_401 : vec4<f32> = u_xlat4;
  let x_403 : vec4<f32> = u_xlat4;
  u_xlat7.y = dot(vec3<f32>(x_401.x, x_401.y, x_401.z), vec3<f32>(x_403.x, x_403.y, x_403.z));
  let x_407 : vec4<f32> = u_xlat5;
  let x_409 : vec4<f32> = u_xlat5;
  u_xlat7.z = dot(vec3<f32>(x_407.x, x_407.y, x_407.z), vec3<f32>(x_409.x, x_409.y, x_409.z));
  let x_413 : vec4<f32> = u_xlat6;
  let x_415 : vec4<f32> = u_xlat6;
  u_xlat7.w = dot(vec3<f32>(x_413.x, x_413.y, x_413.z), vec3<f32>(x_415.x, x_415.y, x_415.z));
  let x_422 : vec4<f32> = u_xlat7;
  let x_425 : vec4<f32> = x_362.x_CascadeShadowSplitSphereRadii;
  u_xlatb4 = (x_422 < x_425);
  let x_428 : bool = u_xlatb4.x;
  u_xlat5.x = select(0.0f, 1.0f, x_428);
  let x_432 : bool = u_xlatb4.y;
  u_xlat5.y = select(0.0f, 1.0f, x_432);
  let x_436 : bool = u_xlatb4.z;
  u_xlat5.z = select(0.0f, 1.0f, x_436);
  let x_440 : bool = u_xlatb4.w;
  u_xlat5.w = select(0.0f, 1.0f, x_440);
  let x_444 : bool = u_xlatb4.x;
  u_xlat22.x = select(-0.0f, -1.0f, x_444);
  let x_449 : bool = u_xlatb4.y;
  u_xlat22.y = select(-0.0f, -1.0f, x_449);
  let x_453 : bool = u_xlatb4.z;
  u_xlat22.z = select(-0.0f, -1.0f, x_453);
  let x_456 : vec3<f32> = u_xlat22;
  let x_457 : vec4<f32> = u_xlat5;
  u_xlat22 = (x_456 + vec3<f32>(x_457.y, x_457.z, x_457.w));
  let x_460 : vec3<f32> = u_xlat22;
  let x_462 : vec3<f32> = max(x_460, vec3<f32>(0.0f, 0.0f, 0.0f));
  let x_463 : vec4<f32> = u_xlat5;
  u_xlat5 = vec4<f32>(x_463.x, x_462.x, x_462.y, x_462.z);
  let x_465 : vec4<f32> = u_xlat5;
  u_xlat22.x = dot(x_465, vec4<f32>(4.0f, 3.0f, 2.0f, 1.0f));
  let x_472 : f32 = u_xlat22.x;
  u_xlat22.x = (-(x_472) + 4.0f);
  let x_479 : f32 = u_xlat22.x;
  u_xlatu22 = u32(x_479);
  let x_483 : u32 = u_xlatu22;
  u_xlati22 = (bitcast<i32>(x_483) << bitcast<u32>(2i));
  let x_486 : vec3<f32> = vs_TEXCOORD1;
  let x_488 : i32 = u_xlati22;
  let x_491 : i32 = u_xlati22;
  let x_495 : vec4<f32> = x_362.x_MainLightWorldToShadow[((x_488 + 1i) / 4i)][((x_491 + 1i) % 4i)];
  let x_497 : vec3<f32> = (vec3<f32>(x_486.y, x_486.y, x_486.y) * vec3<f32>(x_495.x, x_495.y, x_495.z));
  let x_498 : vec4<f32> = u_xlat4;
  u_xlat4 = vec4<f32>(x_497.x, x_497.y, x_497.z, x_498.w);
  let x_500 : i32 = u_xlati22;
  let x_502 : i32 = u_xlati22;
  let x_505 : vec4<f32> = x_362.x_MainLightWorldToShadow[(x_500 / 4i)][(x_502 % 4i)];
  let x_507 : vec3<f32> = vs_TEXCOORD1;
  let x_510 : vec4<f32> = u_xlat4;
  let x_512 : vec3<f32> = ((vec3<f32>(x_505.x, x_505.y, x_505.z) * vec3<f32>(x_507.x, x_507.x, x_507.x)) + vec3<f32>(x_510.x, x_510.y, x_510.z));
  let x_513 : vec4<f32> = u_xlat4;
  u_xlat4 = vec4<f32>(x_512.x, x_512.y, x_512.z, x_513.w);
  let x_515 : i32 = u_xlati22;
  let x_518 : i32 = u_xlati22;
  let x_522 : vec4<f32> = x_362.x_MainLightWorldToShadow[((x_515 + 2i) / 4i)][((x_518 + 2i) % 4i)];
  let x_524 : vec3<f32> = vs_TEXCOORD1;
  let x_527 : vec4<f32> = u_xlat4;
  let x_529 : vec3<f32> = ((vec3<f32>(x_522.x, x_522.y, x_522.z) * vec3<f32>(x_524.z, x_524.z, x_524.z)) + vec3<f32>(x_527.x, x_527.y, x_527.z));
  let x_530 : vec4<f32> = u_xlat4;
  u_xlat4 = vec4<f32>(x_529.x, x_529.y, x_529.z, x_530.w);
  let x_532 : vec4<f32> = u_xlat4;
  let x_534 : i32 = u_xlati22;
  let x_537 : i32 = u_xlati22;
  let x_541 : vec4<f32> = x_362.x_MainLightWorldToShadow[((x_534 + 3i) / 4i)][((x_537 + 3i) % 4i)];
  u_xlat22 = (vec3<f32>(x_532.x, x_532.y, x_532.z) + vec3<f32>(x_541.x, x_541.y, x_541.z));
  let x_545 : f32 = x_362.x_MainLightShadowParams.y;
  u_xlatb4.x = (0.0f < x_545);
  let x_549 : bool = u_xlatb4.x;
  if (x_549) {
    let x_553 : f32 = x_362.x_MainLightShadowParams.y;
    u_xlatb4.x = (x_553 == 1.0f);
    let x_557 : bool = u_xlatb4.x;
    if (x_557) {
      let x_560 : vec3<f32> = u_xlat22;
      let x_563 : vec4<f32> = x_362.x_MainLightShadowOffset0;
      u_xlat4 = (vec4<f32>(x_560.x, x_560.y, x_560.x, x_560.y) + x_563);
      let x_566 : vec4<f32> = u_xlat4;
      let x_567 : vec2<f32> = vec2<f32>(x_566.x, x_566.y);
      let x_569 : f32 = u_xlat22.z;
      txVec0 = vec3<f32>(x_567.x, x_567.y, x_569);
      let x_581 : vec3<f32> = txVec0;
      let x_583 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_581.xy, x_581.z);
      u_xlat5.x = x_583;
      let x_586 : vec4<f32> = u_xlat4;
      let x_587 : vec2<f32> = vec2<f32>(x_586.z, x_586.w);
      let x_589 : f32 = u_xlat22.z;
      txVec1 = vec3<f32>(x_587.x, x_587.y, x_589);
      let x_596 : vec3<f32> = txVec1;
      let x_598 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_596.xy, x_596.z);
      u_xlat5.y = x_598;
      let x_600 : vec3<f32> = u_xlat22;
      let x_604 : vec4<f32> = x_362.x_MainLightShadowOffset1;
      u_xlat4 = (vec4<f32>(x_600.x, x_600.y, x_600.x, x_600.y) + x_604);
      let x_607 : vec4<f32> = u_xlat4;
      let x_608 : vec2<f32> = vec2<f32>(x_607.x, x_607.y);
      let x_610 : f32 = u_xlat22.z;
      txVec2 = vec3<f32>(x_608.x, x_608.y, x_610);
      let x_617 : vec3<f32> = txVec2;
      let x_619 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_617.xy, x_617.z);
      u_xlat5.z = x_619;
      let x_622 : vec4<f32> = u_xlat4;
      let x_623 : vec2<f32> = vec2<f32>(x_622.z, x_622.w);
      let x_625 : f32 = u_xlat22.z;
      txVec3 = vec3<f32>(x_623.x, x_623.y, x_625);
      let x_632 : vec3<f32> = txVec3;
      let x_634 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_632.xy, x_632.z);
      u_xlat5.w = x_634;
      let x_636 : vec4<f32> = u_xlat5;
      u_xlat4.x = dot(x_636, vec4<f32>(0.25f, 0.25f, 0.25f, 0.25f));
    } else {
      let x_643 : f32 = x_362.x_MainLightShadowParams.y;
      u_xlatb23 = (x_643 == 2.0f);
      let x_645 : bool = u_xlatb23;
      if (x_645) {
        let x_649 : vec3<f32> = u_xlat22;
        let x_652 : vec4<f32> = x_362.x_MainLightShadowmapSize;
        u_xlat23 = ((vec2<f32>(x_649.x, x_649.y) * vec2<f32>(x_652.z, x_652.w)) + vec2<f32>(0.5f, 0.5f));
        let x_656 : vec2<f32> = u_xlat23;
        u_xlat23 = floor(x_656);
        let x_658 : vec3<f32> = u_xlat22;
        let x_661 : vec4<f32> = x_362.x_MainLightShadowmapSize;
        let x_664 : vec2<f32> = u_xlat23;
        let x_666 : vec2<f32> = ((vec2<f32>(x_658.x, x_658.y) * vec2<f32>(x_661.z, x_661.w)) + -(x_664));
        let x_667 : vec4<f32> = u_xlat5;
        u_xlat5 = vec4<f32>(x_666.x, x_666.y, x_667.z, x_667.w);
        let x_669 : vec4<f32> = u_xlat5;
        u_xlat6 = (vec4<f32>(x_669.x, x_669.x, x_669.y, x_669.y) + vec4<f32>(0.5f, 1.0f, 0.5f, 1.0f));
        let x_673 : vec4<f32> = u_xlat6;
        let x_675 : vec4<f32> = u_xlat6;
        u_xlat7 = (vec4<f32>(x_673.x, x_673.x, x_673.z, x_673.z) * vec4<f32>(x_675.x, x_675.x, x_675.z, x_675.z));
        let x_679 : vec4<f32> = u_xlat7;
        u_xlat43 = (vec2<f32>(x_679.y, x_679.w) * vec2<f32>(0.079999998f, 0.079999998f));
        let x_684 : vec4<f32> = u_xlat7;
        let x_687 : vec4<f32> = u_xlat5;
        let x_690 : vec2<f32> = ((vec2<f32>(x_684.x, x_684.z) * vec2<f32>(0.5f, 0.5f)) + -(vec2<f32>(x_687.x, x_687.y)));
        let x_691 : vec4<f32> = u_xlat6;
        u_xlat6 = vec4<f32>(x_690.x, x_691.y, x_690.y, x_691.w);
        let x_693 : vec4<f32> = u_xlat5;
        let x_697 : vec2<f32> = (-(vec2<f32>(x_693.x, x_693.y)) + vec2<f32>(1.0f, 1.0f));
        let x_698 : vec4<f32> = u_xlat7;
        u_xlat7 = vec4<f32>(x_697.x, x_697.y, x_698.z, x_698.w);
        let x_701 : vec4<f32> = u_xlat5;
        u_xlat45 = min(vec2<f32>(x_701.x, x_701.y), vec2<f32>(0.0f, 0.0f));
        let x_705 : vec2<f32> = u_xlat45;
        let x_707 : vec2<f32> = u_xlat45;
        let x_709 : vec4<f32> = u_xlat7;
        u_xlat45 = ((-(x_705) * x_707) + vec2<f32>(x_709.x, x_709.y));
        let x_712 : vec4<f32> = u_xlat5;
        let x_714 : vec2<f32> = max(vec2<f32>(x_712.x, x_712.y), vec2<f32>(0.0f, 0.0f));
        let x_715 : vec4<f32> = u_xlat5;
        u_xlat5 = vec4<f32>(x_714.x, x_714.y, x_715.z, x_715.w);
        let x_717 : vec4<f32> = u_xlat5;
        let x_720 : vec4<f32> = u_xlat5;
        let x_723 : vec4<f32> = u_xlat6;
        let x_725 : vec2<f32> = ((-(vec2<f32>(x_717.x, x_717.y)) * vec2<f32>(x_720.x, x_720.y)) + vec2<f32>(x_723.y, x_723.w));
        let x_726 : vec4<f32> = u_xlat5;
        u_xlat5 = vec4<f32>(x_725.x, x_725.y, x_726.z, x_726.w);
        let x_728 : vec2<f32> = u_xlat45;
        u_xlat45 = (x_728 + vec2<f32>(1.0f, 1.0f));
        let x_730 : vec4<f32> = u_xlat5;
        let x_732 : vec2<f32> = (vec2<f32>(x_730.x, x_730.y) + vec2<f32>(1.0f, 1.0f));
        let x_733 : vec4<f32> = u_xlat5;
        u_xlat5 = vec4<f32>(x_732.x, x_732.y, x_733.z, x_733.w);
        let x_736 : vec4<f32> = u_xlat6;
        let x_740 : vec2<f32> = (vec2<f32>(x_736.x, x_736.z) * vec2<f32>(0.159999996f, 0.159999996f));
        let x_741 : vec4<f32> = u_xlat8;
        u_xlat8 = vec4<f32>(x_740.x, x_740.y, x_741.z, x_741.w);
        let x_744 : vec4<f32> = u_xlat7;
        let x_746 : vec2<f32> = (vec2<f32>(x_744.x, x_744.y) * vec2<f32>(0.159999996f, 0.159999996f));
        let x_747 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_746.x, x_746.y, x_747.z, x_747.w);
        let x_749 : vec2<f32> = u_xlat45;
        let x_750 : vec2<f32> = (x_749 * vec2<f32>(0.159999996f, 0.159999996f));
        let x_751 : vec4<f32> = u_xlat7;
        u_xlat7 = vec4<f32>(x_750.x, x_750.y, x_751.z, x_751.w);
        let x_754 : vec4<f32> = u_xlat5;
        let x_756 : vec2<f32> = (vec2<f32>(x_754.x, x_754.y) * vec2<f32>(0.159999996f, 0.159999996f));
        let x_757 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_756.x, x_756.y, x_757.z, x_757.w);
        let x_759 : vec4<f32> = u_xlat6;
        let x_761 : vec2<f32> = (vec2<f32>(x_759.y, x_759.w) * vec2<f32>(0.159999996f, 0.159999996f));
        let x_762 : vec4<f32> = u_xlat5;
        u_xlat5 = vec4<f32>(x_761.x, x_761.y, x_762.z, x_762.w);
        let x_765 : f32 = u_xlat7.x;
        u_xlat8.z = x_765;
        let x_768 : f32 = u_xlat5.x;
        u_xlat8.w = x_768;
        let x_771 : f32 = u_xlat10.x;
        u_xlat9.z = x_771;
        let x_774 : f32 = u_xlat43.x;
        u_xlat9.w = x_774;
        let x_776 : vec4<f32> = u_xlat8;
        let x_778 : vec4<f32> = u_xlat9;
        u_xlat6 = (vec4<f32>(x_776.z, x_776.w, x_776.x, x_776.z) + vec4<f32>(x_778.z, x_778.w, x_778.x, x_778.z));
        let x_782 : f32 = u_xlat8.y;
        u_xlat7.z = x_782;
        let x_785 : f32 = u_xlat5.y;
        u_xlat7.w = x_785;
        let x_788 : f32 = u_xlat9.y;
        u_xlat10.z = x_788;
        let x_791 : f32 = u_xlat43.y;
        u_xlat10.w = x_791;
        let x_793 : vec4<f32> = u_xlat7;
        let x_795 : vec4<f32> = u_xlat10;
        let x_797 : vec3<f32> = (vec3<f32>(x_793.z, x_793.y, x_793.w) + vec3<f32>(x_795.z, x_795.y, x_795.w));
        let x_798 : vec4<f32> = u_xlat5;
        u_xlat5 = vec4<f32>(x_797.x, x_797.y, x_797.z, x_798.w);
        let x_800 : vec4<f32> = u_xlat9;
        let x_802 : vec4<f32> = u_xlat6;
        let x_804 : vec3<f32> = (vec3<f32>(x_800.x, x_800.z, x_800.w) / vec3<f32>(x_802.z, x_802.w, x_802.y));
        let x_805 : vec4<f32> = u_xlat7;
        u_xlat7 = vec4<f32>(x_804.x, x_804.y, x_804.z, x_805.w);
        let x_807 : vec4<f32> = u_xlat7;
        let x_813 : vec3<f32> = (vec3<f32>(x_807.x, x_807.y, x_807.z) + vec3<f32>(-2.5f, -0.5f, 1.5f));
        let x_814 : vec4<f32> = u_xlat7;
        u_xlat7 = vec4<f32>(x_813.x, x_813.y, x_813.z, x_814.w);
        let x_816 : vec4<f32> = u_xlat10;
        let x_818 : vec4<f32> = u_xlat5;
        let x_820 : vec3<f32> = (vec3<f32>(x_816.z, x_816.y, x_816.w) / vec3<f32>(x_818.x, x_818.y, x_818.z));
        let x_821 : vec4<f32> = u_xlat8;
        u_xlat8 = vec4<f32>(x_820.x, x_820.y, x_820.z, x_821.w);
        let x_823 : vec4<f32> = u_xlat8;
        let x_825 : vec3<f32> = (vec3<f32>(x_823.x, x_823.y, x_823.z) + vec3<f32>(-2.5f, -0.5f, 1.5f));
        let x_826 : vec4<f32> = u_xlat8;
        u_xlat8 = vec4<f32>(x_825.x, x_825.y, x_825.z, x_826.w);
        let x_828 : vec4<f32> = u_xlat7;
        let x_831 : vec4<f32> = x_362.x_MainLightShadowmapSize;
        let x_833 : vec3<f32> = (vec3<f32>(x_828.y, x_828.x, x_828.z) * vec3<f32>(x_831.x, x_831.x, x_831.x));
        let x_834 : vec4<f32> = u_xlat7;
        u_xlat7 = vec4<f32>(x_833.x, x_833.y, x_833.z, x_834.w);
        let x_836 : vec4<f32> = u_xlat8;
        let x_839 : vec4<f32> = x_362.x_MainLightShadowmapSize;
        let x_841 : vec3<f32> = (vec3<f32>(x_836.x, x_836.y, x_836.z) * vec3<f32>(x_839.y, x_839.y, x_839.y));
        let x_842 : vec4<f32> = u_xlat8;
        u_xlat8 = vec4<f32>(x_841.x, x_841.y, x_841.z, x_842.w);
        let x_845 : f32 = u_xlat8.x;
        u_xlat7.w = x_845;
        let x_847 : vec2<f32> = u_xlat23;
        let x_850 : vec4<f32> = x_362.x_MainLightShadowmapSize;
        let x_853 : vec4<f32> = u_xlat7;
        u_xlat9 = ((vec4<f32>(x_847.x, x_847.y, x_847.x, x_847.y) * vec4<f32>(x_850.x, x_850.y, x_850.x, x_850.y)) + vec4<f32>(x_853.y, x_853.w, x_853.x, x_853.w));
        let x_856 : vec2<f32> = u_xlat23;
        let x_858 : vec4<f32> = x_362.x_MainLightShadowmapSize;
        let x_861 : vec4<f32> = u_xlat7;
        let x_863 : vec2<f32> = ((x_856 * vec2<f32>(x_858.x, x_858.y)) + vec2<f32>(x_861.z, x_861.w));
        let x_864 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_863.x, x_863.y, x_864.z, x_864.w);
        let x_867 : f32 = u_xlat7.y;
        u_xlat8.w = x_867;
        let x_869 : vec4<f32> = u_xlat8;
        let x_870 : vec2<f32> = vec2<f32>(x_869.y, x_869.z);
        let x_871 : vec4<f32> = u_xlat7;
        u_xlat7 = vec4<f32>(x_871.x, x_870.x, x_871.z, x_870.y);
        let x_874 : vec2<f32> = u_xlat23;
        let x_877 : vec4<f32> = x_362.x_MainLightShadowmapSize;
        let x_880 : vec4<f32> = u_xlat7;
        u_xlat11 = ((vec4<f32>(x_874.x, x_874.y, x_874.x, x_874.y) * vec4<f32>(x_877.x, x_877.y, x_877.x, x_877.y)) + vec4<f32>(x_880.x, x_880.y, x_880.z, x_880.y));
        let x_883 : vec2<f32> = u_xlat23;
        let x_886 : vec4<f32> = x_362.x_MainLightShadowmapSize;
        let x_889 : vec4<f32> = u_xlat8;
        u_xlat8 = ((vec4<f32>(x_883.x, x_883.y, x_883.x, x_883.y) * vec4<f32>(x_886.x, x_886.y, x_886.x, x_886.y)) + vec4<f32>(x_889.w, x_889.y, x_889.w, x_889.z));
        let x_892 : vec2<f32> = u_xlat23;
        let x_895 : vec4<f32> = x_362.x_MainLightShadowmapSize;
        let x_898 : vec4<f32> = u_xlat7;
        u_xlat7 = ((vec4<f32>(x_892.x, x_892.y, x_892.x, x_892.y) * vec4<f32>(x_895.x, x_895.y, x_895.x, x_895.y)) + vec4<f32>(x_898.x, x_898.w, x_898.z, x_898.w));
        let x_902 : vec4<f32> = u_xlat5;
        let x_904 : vec4<f32> = u_xlat6;
        u_xlat12 = (vec4<f32>(x_902.x, x_902.x, x_902.x, x_902.y) * vec4<f32>(x_904.z, x_904.w, x_904.y, x_904.z));
        let x_908 : vec4<f32> = u_xlat5;
        let x_910 : vec4<f32> = u_xlat6;
        u_xlat13 = (vec4<f32>(x_908.y, x_908.y, x_908.z, x_908.z) * x_910);
        let x_913 : f32 = u_xlat5.z;
        let x_915 : f32 = u_xlat6.y;
        u_xlat23.x = (x_913 * x_915);
        let x_919 : vec4<f32> = u_xlat9;
        let x_920 : vec2<f32> = vec2<f32>(x_919.x, x_919.y);
        let x_922 : f32 = u_xlat22.z;
        txVec4 = vec3<f32>(x_920.x, x_920.y, x_922);
        let x_930 : vec3<f32> = txVec4;
        let x_932 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_930.xy, x_930.z);
        u_xlat42 = x_932;
        let x_934 : vec4<f32> = u_xlat9;
        let x_935 : vec2<f32> = vec2<f32>(x_934.z, x_934.w);
        let x_937 : f32 = u_xlat22.z;
        txVec5 = vec3<f32>(x_935.x, x_935.y, x_937);
        let x_945 : vec3<f32> = txVec5;
        let x_947 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_945.xy, x_945.z);
        u_xlat61 = x_947;
        let x_948 : f32 = u_xlat61;
        let x_950 : f32 = u_xlat12.y;
        u_xlat61 = (x_948 * x_950);
        let x_953 : f32 = u_xlat12.x;
        let x_954 : f32 = u_xlat42;
        let x_956 : f32 = u_xlat61;
        u_xlat42 = ((x_953 * x_954) + x_956);
        let x_959 : vec4<f32> = u_xlat10;
        let x_960 : vec2<f32> = vec2<f32>(x_959.x, x_959.y);
        let x_962 : f32 = u_xlat22.z;
        txVec6 = vec3<f32>(x_960.x, x_960.y, x_962);
        let x_969 : vec3<f32> = txVec6;
        let x_971 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_969.xy, x_969.z);
        u_xlat61 = x_971;
        let x_973 : f32 = u_xlat12.z;
        let x_974 : f32 = u_xlat61;
        let x_976 : f32 = u_xlat42;
        u_xlat42 = ((x_973 * x_974) + x_976);
        let x_979 : vec4<f32> = u_xlat8;
        let x_980 : vec2<f32> = vec2<f32>(x_979.x, x_979.y);
        let x_982 : f32 = u_xlat22.z;
        txVec7 = vec3<f32>(x_980.x, x_980.y, x_982);
        let x_989 : vec3<f32> = txVec7;
        let x_991 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_989.xy, x_989.z);
        u_xlat61 = x_991;
        let x_993 : f32 = u_xlat12.w;
        let x_994 : f32 = u_xlat61;
        let x_996 : f32 = u_xlat42;
        u_xlat42 = ((x_993 * x_994) + x_996);
        let x_999 : vec4<f32> = u_xlat11;
        let x_1000 : vec2<f32> = vec2<f32>(x_999.x, x_999.y);
        let x_1002 : f32 = u_xlat22.z;
        txVec8 = vec3<f32>(x_1000.x, x_1000.y, x_1002);
        let x_1009 : vec3<f32> = txVec8;
        let x_1011 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1009.xy, x_1009.z);
        u_xlat61 = x_1011;
        let x_1013 : f32 = u_xlat13.x;
        let x_1014 : f32 = u_xlat61;
        let x_1016 : f32 = u_xlat42;
        u_xlat42 = ((x_1013 * x_1014) + x_1016);
        let x_1019 : vec4<f32> = u_xlat11;
        let x_1020 : vec2<f32> = vec2<f32>(x_1019.z, x_1019.w);
        let x_1022 : f32 = u_xlat22.z;
        txVec9 = vec3<f32>(x_1020.x, x_1020.y, x_1022);
        let x_1029 : vec3<f32> = txVec9;
        let x_1031 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1029.xy, x_1029.z);
        u_xlat61 = x_1031;
        let x_1033 : f32 = u_xlat13.y;
        let x_1034 : f32 = u_xlat61;
        let x_1036 : f32 = u_xlat42;
        u_xlat42 = ((x_1033 * x_1034) + x_1036);
        let x_1039 : vec4<f32> = u_xlat8;
        let x_1040 : vec2<f32> = vec2<f32>(x_1039.z, x_1039.w);
        let x_1042 : f32 = u_xlat22.z;
        txVec10 = vec3<f32>(x_1040.x, x_1040.y, x_1042);
        let x_1049 : vec3<f32> = txVec10;
        let x_1051 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1049.xy, x_1049.z);
        u_xlat61 = x_1051;
        let x_1053 : f32 = u_xlat13.z;
        let x_1054 : f32 = u_xlat61;
        let x_1056 : f32 = u_xlat42;
        u_xlat42 = ((x_1053 * x_1054) + x_1056);
        let x_1059 : vec4<f32> = u_xlat7;
        let x_1060 : vec2<f32> = vec2<f32>(x_1059.x, x_1059.y);
        let x_1062 : f32 = u_xlat22.z;
        txVec11 = vec3<f32>(x_1060.x, x_1060.y, x_1062);
        let x_1069 : vec3<f32> = txVec11;
        let x_1071 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1069.xy, x_1069.z);
        u_xlat61 = x_1071;
        let x_1073 : f32 = u_xlat13.w;
        let x_1074 : f32 = u_xlat61;
        let x_1076 : f32 = u_xlat42;
        u_xlat42 = ((x_1073 * x_1074) + x_1076);
        let x_1079 : vec4<f32> = u_xlat7;
        let x_1080 : vec2<f32> = vec2<f32>(x_1079.z, x_1079.w);
        let x_1082 : f32 = u_xlat22.z;
        txVec12 = vec3<f32>(x_1080.x, x_1080.y, x_1082);
        let x_1089 : vec3<f32> = txVec12;
        let x_1091 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1089.xy, x_1089.z);
        u_xlat61 = x_1091;
        let x_1093 : f32 = u_xlat23.x;
        let x_1094 : f32 = u_xlat61;
        let x_1096 : f32 = u_xlat42;
        u_xlat4.x = ((x_1093 * x_1094) + x_1096);
      } else {
        let x_1100 : vec3<f32> = u_xlat22;
        let x_1103 : vec4<f32> = x_362.x_MainLightShadowmapSize;
        u_xlat23 = ((vec2<f32>(x_1100.x, x_1100.y) * vec2<f32>(x_1103.z, x_1103.w)) + vec2<f32>(0.5f, 0.5f));
        let x_1107 : vec2<f32> = u_xlat23;
        u_xlat23 = floor(x_1107);
        let x_1109 : vec3<f32> = u_xlat22;
        let x_1112 : vec4<f32> = x_362.x_MainLightShadowmapSize;
        let x_1115 : vec2<f32> = u_xlat23;
        let x_1117 : vec2<f32> = ((vec2<f32>(x_1109.x, x_1109.y) * vec2<f32>(x_1112.z, x_1112.w)) + -(x_1115));
        let x_1118 : vec4<f32> = u_xlat5;
        u_xlat5 = vec4<f32>(x_1117.x, x_1117.y, x_1118.z, x_1118.w);
        let x_1120 : vec4<f32> = u_xlat5;
        u_xlat6 = (vec4<f32>(x_1120.x, x_1120.x, x_1120.y, x_1120.y) + vec4<f32>(0.5f, 1.0f, 0.5f, 1.0f));
        let x_1123 : vec4<f32> = u_xlat6;
        let x_1125 : vec4<f32> = u_xlat6;
        u_xlat7 = (vec4<f32>(x_1123.x, x_1123.x, x_1123.z, x_1123.z) * vec4<f32>(x_1125.x, x_1125.x, x_1125.z, x_1125.z));
        let x_1128 : vec4<f32> = u_xlat7;
        let x_1132 : vec2<f32> = (vec2<f32>(x_1128.y, x_1128.w) * vec2<f32>(0.040816002f, 0.040816002f));
        let x_1133 : vec4<f32> = u_xlat8;
        u_xlat8 = vec4<f32>(x_1133.x, x_1132.x, x_1133.z, x_1132.y);
        let x_1135 : vec4<f32> = u_xlat7;
        let x_1138 : vec4<f32> = u_xlat5;
        u_xlat43 = ((vec2<f32>(x_1135.x, x_1135.z) * vec2<f32>(0.5f, 0.5f)) + -(vec2<f32>(x_1138.x, x_1138.y)));
        let x_1142 : vec4<f32> = u_xlat5;
        let x_1145 : vec2<f32> = (-(vec2<f32>(x_1142.x, x_1142.y)) + vec2<f32>(1.0f, 1.0f));
        let x_1146 : vec4<f32> = u_xlat6;
        u_xlat6 = vec4<f32>(x_1145.x, x_1146.y, x_1145.y, x_1146.w);
        let x_1148 : vec4<f32> = u_xlat5;
        let x_1150 : vec2<f32> = min(vec2<f32>(x_1148.x, x_1148.y), vec2<f32>(0.0f, 0.0f));
        let x_1151 : vec4<f32> = u_xlat7;
        u_xlat7 = vec4<f32>(x_1150.x, x_1150.y, x_1151.z, x_1151.w);
        let x_1153 : vec4<f32> = u_xlat7;
        let x_1156 : vec4<f32> = u_xlat7;
        let x_1159 : vec4<f32> = u_xlat6;
        let x_1161 : vec2<f32> = ((-(vec2<f32>(x_1153.x, x_1153.y)) * vec2<f32>(x_1156.x, x_1156.y)) + vec2<f32>(x_1159.x, x_1159.z));
        let x_1162 : vec4<f32> = u_xlat6;
        u_xlat6 = vec4<f32>(x_1161.x, x_1162.y, x_1161.y, x_1162.w);
        let x_1164 : vec4<f32> = u_xlat5;
        let x_1166 : vec2<f32> = max(vec2<f32>(x_1164.x, x_1164.y), vec2<f32>(0.0f, 0.0f));
        let x_1167 : vec4<f32> = u_xlat7;
        u_xlat7 = vec4<f32>(x_1166.x, x_1166.y, x_1167.z, x_1167.w);
        let x_1169 : vec4<f32> = u_xlat7;
        let x_1172 : vec4<f32> = u_xlat7;
        let x_1175 : vec4<f32> = u_xlat6;
        let x_1177 : vec2<f32> = ((-(vec2<f32>(x_1169.x, x_1169.y)) * vec2<f32>(x_1172.x, x_1172.y)) + vec2<f32>(x_1175.y, x_1175.w));
        let x_1178 : vec4<f32> = u_xlat6;
        u_xlat6 = vec4<f32>(x_1178.x, x_1177.x, x_1178.z, x_1177.y);
        let x_1180 : vec4<f32> = u_xlat6;
        u_xlat6 = (x_1180 + vec4<f32>(2.0f, 2.0f, 2.0f, 2.0f));
        let x_1184 : f32 = u_xlat6.y;
        u_xlat7.z = (x_1184 * 0.081632003f);
        let x_1188 : vec2<f32> = u_xlat43;
        let x_1191 : vec2<f32> = (vec2<f32>(x_1188.y, x_1188.x) * vec2<f32>(0.081632003f, 0.081632003f));
        let x_1192 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_1191.x, x_1191.y, x_1192.z, x_1192.w);
        let x_1194 : vec4<f32> = u_xlat6;
        u_xlat43 = (vec2<f32>(x_1194.x, x_1194.z) * vec2<f32>(0.081632003f, 0.081632003f));
        let x_1198 : f32 = u_xlat6.w;
        u_xlat9.z = (x_1198 * 0.081632003f);
        let x_1202 : f32 = u_xlat9.y;
        u_xlat7.x = x_1202;
        let x_1204 : vec4<f32> = u_xlat5;
        let x_1211 : vec2<f32> = ((vec2<f32>(x_1204.x, x_1204.x) * vec2<f32>(-0.081632003f, 0.081632003f)) + vec2<f32>(0.163264006f, 0.081632003f));
        let x_1212 : vec4<f32> = u_xlat7;
        u_xlat7 = vec4<f32>(x_1212.x, x_1211.x, x_1212.z, x_1211.y);
        let x_1214 : vec4<f32> = u_xlat5;
        let x_1218 : vec2<f32> = ((vec2<f32>(x_1214.x, x_1214.x) * vec2<f32>(-0.081632003f, 0.081632003f)) + vec2<f32>(0.081632003f, 0.163264006f));
        let x_1219 : vec4<f32> = u_xlat6;
        u_xlat6 = vec4<f32>(x_1218.x, x_1219.y, x_1218.y, x_1219.w);
        let x_1222 : f32 = u_xlat43.x;
        u_xlat6.y = x_1222;
        let x_1225 : f32 = u_xlat8.y;
        u_xlat6.w = x_1225;
        let x_1227 : vec4<f32> = u_xlat6;
        let x_1228 : vec4<f32> = u_xlat7;
        u_xlat7 = (x_1227 + x_1228);
        let x_1230 : vec4<f32> = u_xlat5;
        let x_1233 : vec2<f32> = ((vec2<f32>(x_1230.y, x_1230.y) * vec2<f32>(-0.081632003f, 0.081632003f)) + vec2<f32>(0.163264006f, 0.081632003f));
        let x_1234 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_1234.x, x_1233.x, x_1234.z, x_1233.y);
        let x_1236 : vec4<f32> = u_xlat5;
        let x_1239 : vec2<f32> = ((vec2<f32>(x_1236.y, x_1236.y) * vec2<f32>(-0.081632003f, 0.081632003f)) + vec2<f32>(0.081632003f, 0.163264006f));
        let x_1240 : vec4<f32> = u_xlat8;
        u_xlat8 = vec4<f32>(x_1239.x, x_1240.y, x_1239.y, x_1240.w);
        let x_1243 : f32 = u_xlat43.y;
        u_xlat8.y = x_1243;
        let x_1245 : vec4<f32> = u_xlat8;
        let x_1246 : vec4<f32> = u_xlat9;
        u_xlat5 = (x_1245 + x_1246);
        let x_1248 : vec4<f32> = u_xlat6;
        let x_1249 : vec4<f32> = u_xlat7;
        u_xlat6 = (x_1248 / x_1249);
        let x_1251 : vec4<f32> = u_xlat6;
        u_xlat6 = (x_1251 + vec4<f32>(-3.5f, -1.5f, 0.5f, 2.5f));
        let x_1257 : vec4<f32> = u_xlat8;
        let x_1258 : vec4<f32> = u_xlat5;
        u_xlat8 = (x_1257 / x_1258);
        let x_1260 : vec4<f32> = u_xlat8;
        u_xlat8 = (x_1260 + vec4<f32>(-3.5f, -1.5f, 0.5f, 2.5f));
        let x_1262 : vec4<f32> = u_xlat6;
        let x_1265 : vec4<f32> = x_362.x_MainLightShadowmapSize;
        u_xlat6 = (vec4<f32>(x_1262.w, x_1262.x, x_1262.y, x_1262.z) * vec4<f32>(x_1265.x, x_1265.x, x_1265.x, x_1265.x));
        let x_1268 : vec4<f32> = u_xlat8;
        let x_1271 : vec4<f32> = x_362.x_MainLightShadowmapSize;
        u_xlat8 = (vec4<f32>(x_1268.x, x_1268.w, x_1268.y, x_1268.z) * vec4<f32>(x_1271.y, x_1271.y, x_1271.y, x_1271.y));
        let x_1274 : vec4<f32> = u_xlat6;
        let x_1275 : vec3<f32> = vec3<f32>(x_1274.y, x_1274.z, x_1274.w);
        let x_1276 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_1275.x, x_1276.y, x_1275.y, x_1275.z);
        let x_1279 : f32 = u_xlat8.x;
        u_xlat9.y = x_1279;
        let x_1281 : vec2<f32> = u_xlat23;
        let x_1284 : vec4<f32> = x_362.x_MainLightShadowmapSize;
        let x_1287 : vec4<f32> = u_xlat9;
        u_xlat10 = ((vec4<f32>(x_1281.x, x_1281.y, x_1281.x, x_1281.y) * vec4<f32>(x_1284.x, x_1284.y, x_1284.x, x_1284.y)) + vec4<f32>(x_1287.x, x_1287.y, x_1287.z, x_1287.y));
        let x_1290 : vec2<f32> = u_xlat23;
        let x_1292 : vec4<f32> = x_362.x_MainLightShadowmapSize;
        let x_1295 : vec4<f32> = u_xlat9;
        let x_1297 : vec2<f32> = ((x_1290 * vec2<f32>(x_1292.x, x_1292.y)) + vec2<f32>(x_1295.w, x_1295.y));
        let x_1298 : vec4<f32> = u_xlat11;
        u_xlat11 = vec4<f32>(x_1297.x, x_1297.y, x_1298.z, x_1298.w);
        let x_1301 : f32 = u_xlat9.y;
        u_xlat6.y = x_1301;
        let x_1304 : f32 = u_xlat8.z;
        u_xlat9.y = x_1304;
        let x_1306 : vec2<f32> = u_xlat23;
        let x_1309 : vec4<f32> = x_362.x_MainLightShadowmapSize;
        let x_1312 : vec4<f32> = u_xlat9;
        u_xlat12 = ((vec4<f32>(x_1306.x, x_1306.y, x_1306.x, x_1306.y) * vec4<f32>(x_1309.x, x_1309.y, x_1309.x, x_1309.y)) + vec4<f32>(x_1312.x, x_1312.y, x_1312.z, x_1312.y));
        let x_1316 : vec2<f32> = u_xlat23;
        let x_1318 : vec4<f32> = x_362.x_MainLightShadowmapSize;
        let x_1321 : vec4<f32> = u_xlat9;
        u_xlat49 = ((x_1316 * vec2<f32>(x_1318.x, x_1318.y)) + vec2<f32>(x_1321.w, x_1321.y));
        let x_1325 : f32 = u_xlat9.y;
        u_xlat6.z = x_1325;
        let x_1327 : vec2<f32> = u_xlat23;
        let x_1330 : vec4<f32> = x_362.x_MainLightShadowmapSize;
        let x_1333 : vec4<f32> = u_xlat6;
        u_xlat13 = ((vec4<f32>(x_1327.x, x_1327.y, x_1327.x, x_1327.y) * vec4<f32>(x_1330.x, x_1330.y, x_1330.x, x_1330.y)) + vec4<f32>(x_1333.x, x_1333.y, x_1333.x, x_1333.z));
        let x_1337 : f32 = u_xlat8.w;
        u_xlat9.y = x_1337;
        let x_1340 : vec2<f32> = u_xlat23;
        let x_1343 : vec4<f32> = x_362.x_MainLightShadowmapSize;
        let x_1346 : vec4<f32> = u_xlat9;
        u_xlat14 = ((vec4<f32>(x_1340.x, x_1340.y, x_1340.x, x_1340.y) * vec4<f32>(x_1343.x, x_1343.y, x_1343.x, x_1343.y)) + vec4<f32>(x_1346.x, x_1346.y, x_1346.z, x_1346.y));
        let x_1350 : vec2<f32> = u_xlat23;
        let x_1352 : vec4<f32> = x_362.x_MainLightShadowmapSize;
        let x_1355 : vec4<f32> = u_xlat9;
        let x_1357 : vec2<f32> = ((x_1350 * vec2<f32>(x_1352.x, x_1352.y)) + vec2<f32>(x_1355.w, x_1355.y));
        let x_1358 : vec3<f32> = u_xlat25;
        u_xlat25 = vec3<f32>(x_1357.x, x_1357.y, x_1358.z);
        let x_1361 : f32 = u_xlat9.y;
        u_xlat6.w = x_1361;
        let x_1364 : vec2<f32> = u_xlat23;
        let x_1366 : vec4<f32> = x_362.x_MainLightShadowmapSize;
        let x_1369 : vec4<f32> = u_xlat6;
        u_xlat15 = ((x_1364 * vec2<f32>(x_1366.x, x_1366.y)) + vec2<f32>(x_1369.x, x_1369.w));
        let x_1372 : vec4<f32> = u_xlat9;
        let x_1373 : vec3<f32> = vec3<f32>(x_1372.x, x_1372.z, x_1372.w);
        let x_1374 : vec4<f32> = u_xlat8;
        u_xlat8 = vec4<f32>(x_1373.x, x_1374.y, x_1373.y, x_1373.z);
        let x_1376 : vec2<f32> = u_xlat23;
        let x_1379 : vec4<f32> = x_362.x_MainLightShadowmapSize;
        let x_1382 : vec4<f32> = u_xlat8;
        u_xlat9 = ((vec4<f32>(x_1376.x, x_1376.y, x_1376.x, x_1376.y) * vec4<f32>(x_1379.x, x_1379.y, x_1379.x, x_1379.y)) + vec4<f32>(x_1382.x, x_1382.y, x_1382.z, x_1382.y));
        let x_1386 : vec2<f32> = u_xlat23;
        let x_1388 : vec4<f32> = x_362.x_MainLightShadowmapSize;
        let x_1391 : vec4<f32> = u_xlat8;
        u_xlat46 = ((x_1386 * vec2<f32>(x_1388.x, x_1388.y)) + vec2<f32>(x_1391.w, x_1391.y));
        let x_1395 : f32 = u_xlat6.x;
        u_xlat8.x = x_1395;
        let x_1397 : vec2<f32> = u_xlat23;
        let x_1399 : vec4<f32> = x_362.x_MainLightShadowmapSize;
        let x_1402 : vec4<f32> = u_xlat8;
        u_xlat23 = ((x_1397 * vec2<f32>(x_1399.x, x_1399.y)) + vec2<f32>(x_1402.x, x_1402.y));
        let x_1406 : vec4<f32> = u_xlat5;
        let x_1408 : vec4<f32> = u_xlat7;
        u_xlat16 = (vec4<f32>(x_1406.x, x_1406.x, x_1406.x, x_1406.x) * x_1408);
        let x_1411 : vec4<f32> = u_xlat5;
        let x_1413 : vec4<f32> = u_xlat7;
        u_xlat17 = (vec4<f32>(x_1411.y, x_1411.y, x_1411.y, x_1411.y) * x_1413);
        let x_1416 : vec4<f32> = u_xlat5;
        let x_1418 : vec4<f32> = u_xlat7;
        u_xlat18 = (vec4<f32>(x_1416.z, x_1416.z, x_1416.z, x_1416.z) * x_1418);
        let x_1420 : vec4<f32> = u_xlat5;
        let x_1422 : vec4<f32> = u_xlat7;
        u_xlat5 = (vec4<f32>(x_1420.w, x_1420.w, x_1420.w, x_1420.w) * x_1422);
        let x_1425 : vec4<f32> = u_xlat10;
        let x_1426 : vec2<f32> = vec2<f32>(x_1425.x, x_1425.y);
        let x_1428 : f32 = u_xlat22.z;
        txVec13 = vec3<f32>(x_1426.x, x_1426.y, x_1428);
        let x_1435 : vec3<f32> = txVec13;
        let x_1437 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1435.xy, x_1435.z);
        u_xlat61 = x_1437;
        let x_1439 : vec4<f32> = u_xlat10;
        let x_1440 : vec2<f32> = vec2<f32>(x_1439.z, x_1439.w);
        let x_1442 : f32 = u_xlat22.z;
        txVec14 = vec3<f32>(x_1440.x, x_1440.y, x_1442);
        let x_1449 : vec3<f32> = txVec14;
        let x_1451 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1449.xy, x_1449.z);
        u_xlat6.x = x_1451;
        let x_1454 : f32 = u_xlat6.x;
        let x_1456 : f32 = u_xlat16.y;
        u_xlat6.x = (x_1454 * x_1456);
        let x_1460 : f32 = u_xlat16.x;
        let x_1461 : f32 = u_xlat61;
        let x_1464 : f32 = u_xlat6.x;
        u_xlat61 = ((x_1460 * x_1461) + x_1464);
        let x_1467 : vec4<f32> = u_xlat11;
        let x_1468 : vec2<f32> = vec2<f32>(x_1467.x, x_1467.y);
        let x_1470 : f32 = u_xlat22.z;
        txVec15 = vec3<f32>(x_1468.x, x_1468.y, x_1470);
        let x_1477 : vec3<f32> = txVec15;
        let x_1479 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1477.xy, x_1477.z);
        u_xlat6.x = x_1479;
        let x_1482 : f32 = u_xlat16.z;
        let x_1484 : f32 = u_xlat6.x;
        let x_1486 : f32 = u_xlat61;
        u_xlat61 = ((x_1482 * x_1484) + x_1486);
        let x_1489 : vec4<f32> = u_xlat13;
        let x_1490 : vec2<f32> = vec2<f32>(x_1489.x, x_1489.y);
        let x_1492 : f32 = u_xlat22.z;
        txVec16 = vec3<f32>(x_1490.x, x_1490.y, x_1492);
        let x_1499 : vec3<f32> = txVec16;
        let x_1501 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1499.xy, x_1499.z);
        u_xlat6.x = x_1501;
        let x_1504 : f32 = u_xlat16.w;
        let x_1506 : f32 = u_xlat6.x;
        let x_1508 : f32 = u_xlat61;
        u_xlat61 = ((x_1504 * x_1506) + x_1508);
        let x_1511 : vec4<f32> = u_xlat12;
        let x_1512 : vec2<f32> = vec2<f32>(x_1511.x, x_1511.y);
        let x_1514 : f32 = u_xlat22.z;
        txVec17 = vec3<f32>(x_1512.x, x_1512.y, x_1514);
        let x_1521 : vec3<f32> = txVec17;
        let x_1523 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1521.xy, x_1521.z);
        u_xlat6.x = x_1523;
        let x_1526 : f32 = u_xlat17.x;
        let x_1528 : f32 = u_xlat6.x;
        let x_1530 : f32 = u_xlat61;
        u_xlat61 = ((x_1526 * x_1528) + x_1530);
        let x_1533 : vec4<f32> = u_xlat12;
        let x_1534 : vec2<f32> = vec2<f32>(x_1533.z, x_1533.w);
        let x_1536 : f32 = u_xlat22.z;
        txVec18 = vec3<f32>(x_1534.x, x_1534.y, x_1536);
        let x_1543 : vec3<f32> = txVec18;
        let x_1545 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1543.xy, x_1543.z);
        u_xlat6.x = x_1545;
        let x_1548 : f32 = u_xlat17.y;
        let x_1550 : f32 = u_xlat6.x;
        let x_1552 : f32 = u_xlat61;
        u_xlat61 = ((x_1548 * x_1550) + x_1552);
        let x_1555 : vec2<f32> = u_xlat49;
        let x_1557 : f32 = u_xlat22.z;
        txVec19 = vec3<f32>(x_1555.x, x_1555.y, x_1557);
        let x_1564 : vec3<f32> = txVec19;
        let x_1566 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1564.xy, x_1564.z);
        u_xlat6.x = x_1566;
        let x_1569 : f32 = u_xlat17.z;
        let x_1571 : f32 = u_xlat6.x;
        let x_1573 : f32 = u_xlat61;
        u_xlat61 = ((x_1569 * x_1571) + x_1573);
        let x_1576 : vec4<f32> = u_xlat13;
        let x_1577 : vec2<f32> = vec2<f32>(x_1576.z, x_1576.w);
        let x_1579 : f32 = u_xlat22.z;
        txVec20 = vec3<f32>(x_1577.x, x_1577.y, x_1579);
        let x_1586 : vec3<f32> = txVec20;
        let x_1588 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1586.xy, x_1586.z);
        u_xlat6.x = x_1588;
        let x_1591 : f32 = u_xlat17.w;
        let x_1593 : f32 = u_xlat6.x;
        let x_1595 : f32 = u_xlat61;
        u_xlat61 = ((x_1591 * x_1593) + x_1595);
        let x_1598 : vec4<f32> = u_xlat14;
        let x_1599 : vec2<f32> = vec2<f32>(x_1598.x, x_1598.y);
        let x_1601 : f32 = u_xlat22.z;
        txVec21 = vec3<f32>(x_1599.x, x_1599.y, x_1601);
        let x_1608 : vec3<f32> = txVec21;
        let x_1610 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1608.xy, x_1608.z);
        u_xlat6.x = x_1610;
        let x_1613 : f32 = u_xlat18.x;
        let x_1615 : f32 = u_xlat6.x;
        let x_1617 : f32 = u_xlat61;
        u_xlat61 = ((x_1613 * x_1615) + x_1617);
        let x_1620 : vec4<f32> = u_xlat14;
        let x_1621 : vec2<f32> = vec2<f32>(x_1620.z, x_1620.w);
        let x_1623 : f32 = u_xlat22.z;
        txVec22 = vec3<f32>(x_1621.x, x_1621.y, x_1623);
        let x_1630 : vec3<f32> = txVec22;
        let x_1632 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1630.xy, x_1630.z);
        u_xlat6.x = x_1632;
        let x_1635 : f32 = u_xlat18.y;
        let x_1637 : f32 = u_xlat6.x;
        let x_1639 : f32 = u_xlat61;
        u_xlat61 = ((x_1635 * x_1637) + x_1639);
        let x_1642 : vec3<f32> = u_xlat25;
        let x_1643 : vec2<f32> = vec2<f32>(x_1642.x, x_1642.y);
        let x_1645 : f32 = u_xlat22.z;
        txVec23 = vec3<f32>(x_1643.x, x_1643.y, x_1645);
        let x_1652 : vec3<f32> = txVec23;
        let x_1654 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1652.xy, x_1652.z);
        u_xlat6.x = x_1654;
        let x_1657 : f32 = u_xlat18.z;
        let x_1659 : f32 = u_xlat6.x;
        let x_1661 : f32 = u_xlat61;
        u_xlat61 = ((x_1657 * x_1659) + x_1661);
        let x_1664 : vec2<f32> = u_xlat15;
        let x_1666 : f32 = u_xlat22.z;
        txVec24 = vec3<f32>(x_1664.x, x_1664.y, x_1666);
        let x_1673 : vec3<f32> = txVec24;
        let x_1675 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1673.xy, x_1673.z);
        u_xlat6.x = x_1675;
        let x_1678 : f32 = u_xlat18.w;
        let x_1680 : f32 = u_xlat6.x;
        let x_1682 : f32 = u_xlat61;
        u_xlat61 = ((x_1678 * x_1680) + x_1682);
        let x_1685 : vec4<f32> = u_xlat9;
        let x_1686 : vec2<f32> = vec2<f32>(x_1685.x, x_1685.y);
        let x_1688 : f32 = u_xlat22.z;
        txVec25 = vec3<f32>(x_1686.x, x_1686.y, x_1688);
        let x_1695 : vec3<f32> = txVec25;
        let x_1697 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1695.xy, x_1695.z);
        u_xlat6.x = x_1697;
        let x_1700 : f32 = u_xlat5.x;
        let x_1702 : f32 = u_xlat6.x;
        let x_1704 : f32 = u_xlat61;
        u_xlat61 = ((x_1700 * x_1702) + x_1704);
        let x_1707 : vec4<f32> = u_xlat9;
        let x_1708 : vec2<f32> = vec2<f32>(x_1707.z, x_1707.w);
        let x_1710 : f32 = u_xlat22.z;
        txVec26 = vec3<f32>(x_1708.x, x_1708.y, x_1710);
        let x_1717 : vec3<f32> = txVec26;
        let x_1719 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1717.xy, x_1717.z);
        u_xlat5.x = x_1719;
        let x_1722 : f32 = u_xlat5.y;
        let x_1724 : f32 = u_xlat5.x;
        let x_1726 : f32 = u_xlat61;
        u_xlat61 = ((x_1722 * x_1724) + x_1726);
        let x_1729 : vec2<f32> = u_xlat46;
        let x_1731 : f32 = u_xlat22.z;
        txVec27 = vec3<f32>(x_1729.x, x_1729.y, x_1731);
        let x_1738 : vec3<f32> = txVec27;
        let x_1740 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1738.xy, x_1738.z);
        u_xlat5.x = x_1740;
        let x_1743 : f32 = u_xlat5.z;
        let x_1745 : f32 = u_xlat5.x;
        let x_1747 : f32 = u_xlat61;
        u_xlat61 = ((x_1743 * x_1745) + x_1747);
        let x_1750 : vec2<f32> = u_xlat23;
        let x_1752 : f32 = u_xlat22.z;
        txVec28 = vec3<f32>(x_1750.x, x_1750.y, x_1752);
        let x_1759 : vec3<f32> = txVec28;
        let x_1761 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1759.xy, x_1759.z);
        u_xlat23.x = x_1761;
        let x_1764 : f32 = u_xlat5.w;
        let x_1766 : f32 = u_xlat23.x;
        let x_1768 : f32 = u_xlat61;
        u_xlat4.x = ((x_1764 * x_1766) + x_1768);
      }
    }
  } else {
    let x_1773 : vec3<f32> = u_xlat22;
    let x_1774 : vec2<f32> = vec2<f32>(x_1773.x, x_1773.y);
    let x_1776 : f32 = u_xlat22.z;
    txVec29 = vec3<f32>(x_1774.x, x_1774.y, x_1776);
    let x_1783 : vec3<f32> = txVec29;
    let x_1785 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1783.xy, x_1783.z);
    u_xlat4.x = x_1785;
  }
  let x_1788 : f32 = x_362.x_MainLightShadowParams.x;
  u_xlat22.x = (-(x_1788) + 1.0f);
  let x_1793 : f32 = u_xlat4.x;
  let x_1795 : f32 = x_362.x_MainLightShadowParams.x;
  let x_1798 : f32 = u_xlat22.x;
  u_xlat22.x = ((x_1793 * x_1795) + x_1798);
  let x_1803 : f32 = u_xlat22.z;
  u_xlatb41 = (0.0f >= x_1803);
  let x_1807 : f32 = u_xlat22.z;
  u_xlatb60 = (x_1807 >= 1.0f);
  let x_1809 : bool = u_xlatb60;
  let x_1810 : bool = u_xlatb41;
  u_xlatb41 = (x_1809 | x_1810);
  let x_1812 : bool = u_xlatb41;
  if (x_1812) {
    x_1813 = 1.0f;
  } else {
    let x_1818 : f32 = u_xlat22.x;
    x_1813 = x_1818;
  }
  let x_1819 : f32 = x_1813;
  u_xlat22.x = x_1819;
  let x_1821 : vec4<f32> = u_xlat0;
  let x_1824 : vec4<f32> = x_40.x_ScreenParams;
  let x_1826 : vec2<f32> = (vec2<f32>(x_1821.x, x_1821.y) * vec2<f32>(x_1824.x, x_1824.y));
  let x_1827 : vec4<f32> = u_xlat0;
  u_xlat0 = vec4<f32>(x_1826.x, x_1826.y, x_1827.z, x_1827.w);
  let x_1829 : vec4<f32> = u_xlat0;
  let x_1832 : vec4<f32> = x_203.x_DitherPattern_TexelSize;
  let x_1834 : vec2<f32> = (vec2<f32>(x_1829.x, x_1829.y) * vec2<f32>(x_1832.x, x_1832.y));
  let x_1835 : vec4<f32> = u_xlat0;
  u_xlat0 = vec4<f32>(x_1834.x, x_1834.y, x_1835.z, x_1835.w);
  let x_1838 : f32 = u_xlat38;
  u_xlat41 = (vec2<f32>(x_1838, x_1838) * vec2<f32>(20.0f, 0.25f));
  let x_1843 : vec2<f32> = u_xlat41;
  let x_1845 : vec3<f32> = vs_TEXCOORD2;
  let x_1847 : vec3<f32> = (vec3<f32>(x_1843.y, x_1843.y, x_1843.y) * -(x_1845));
  let x_1848 : vec4<f32> = u_xlat4;
  u_xlat4 = vec4<f32>(x_1847.x, x_1847.y, x_1847.z, x_1848.w);
  let x_1851 : f32 = x_40.x_Time.x;
  u_xlat5.x = fract(x_1851);
  let x_1855 : f32 = x_40.x_Time.z;
  u_xlat5.y = fract(-(x_1855));
  let x_1859 : vec4<f32> = u_xlat0;
  u_xlat43 = vec2<f32>(x_1859.x, x_1859.y);
  u_xlat61 = 0.0f;
  u_xlatu_loop_1 = 0u;
  loop {
    let x_1867 : u32 = u_xlatu_loop_1;
    if ((x_1867 < 4u)) {
    } else {
      break;
    }
    let x_1870 : vec4<f32> = u_xlat5;
    let x_1872 : vec2<f32> = u_xlat43;
    u_xlat43 = (vec2<f32>(x_1870.x, x_1870.y) + x_1872);
    let x_1874 : u32 = u_xlatu_loop_1;
    u_xlat25.x = f32(x_1874);
    let x_1878 : vec3<f32> = u_xlat25;
    let x_1881 : vec4<f32> = x_40.x_ScreenParams;
    let x_1884 : vec2<f32> = u_xlat43;
    u_xlat44 = ((vec2<f32>(x_1878.x, x_1878.x) * vec2<f32>(x_1881.x, x_1881.y)) + x_1884);
    let x_1891 : vec2<f32> = u_xlat44;
    let x_1893 : f32 = x_40.x_GlobalMipBias.x;
    let x_1894 : vec4<f32> = textureSampleBias(x_DitherPattern, sampler_DitherPattern, x_1891, x_1893);
    let x_1895 : vec3<f32> = vec3<f32>(x_1894.x, x_1894.y, x_1894.z);
    let x_1896 : vec4<f32> = u_xlat7;
    u_xlat7 = vec4<f32>(x_1895.x, x_1895.y, x_1895.z, x_1896.w);
    let x_1898 : vec4<f32> = u_xlat7;
    let x_1903 : vec3<f32> = ((vec3<f32>(x_1898.x, x_1898.z, x_1898.y) * vec3<f32>(2.0f, 2.0f, 2.0f)) + vec3<f32>(-1.0f, -1.0f, -1.0f));
    let x_1904 : vec4<f32> = u_xlat7;
    u_xlat7 = vec4<f32>(x_1903.x, x_1903.y, x_1903.z, x_1904.w);
    let x_1906 : vec2<f32> = u_xlat41;
    let x_1908 : vec4<f32> = u_xlat7;
    let x_1910 : vec3<f32> = (vec3<f32>(x_1906.y, x_1906.y, x_1906.y) * vec3<f32>(x_1908.x, x_1908.y, x_1908.z));
    let x_1911 : vec4<f32> = u_xlat7;
    u_xlat7 = vec4<f32>(x_1910.x, x_1910.y, x_1911.z, x_1910.z);
    let x_1913 : vec3<f32> = u_xlat25;
    let x_1915 : vec4<f32> = u_xlat7;
    let x_1917 : vec3<f32> = (vec3<f32>(x_1913.x, x_1913.x, x_1913.x) * vec3<f32>(x_1915.x, x_1915.y, x_1915.w));
    let x_1918 : vec4<f32> = u_xlat7;
    u_xlat7 = vec4<f32>(x_1917.x, x_1917.y, x_1918.z, x_1917.z);
    let x_1920 : vec4<f32> = u_xlat7;
    let x_1925 : vec3<f32> = vs_TEXCOORD1;
    let x_1926 : vec3<f32> = ((vec3<f32>(x_1920.x, x_1920.y, x_1920.w) * vec3<f32>(0.100000001f, 0.100000001f, 0.100000001f)) + x_1925);
    let x_1927 : vec4<f32> = u_xlat7;
    u_xlat7 = vec4<f32>(x_1926.x, x_1926.y, x_1927.z, x_1926.z);
    let x_1930 : f32 = u_xlat25.x;
    let x_1932 : f32 = u_xlat7.z;
    u_xlat25.x = (x_1930 + x_1932);
    let x_1935 : vec4<f32> = u_xlat4;
    let x_1937 : vec3<f32> = u_xlat25;
    let x_1940 : vec4<f32> = u_xlat7;
    u_xlat25 = ((vec3<f32>(x_1935.x, x_1935.y, x_1935.z) * vec3<f32>(x_1937.x, x_1937.x, x_1937.x)) + vec3<f32>(x_1940.x, x_1940.y, x_1940.w));
    let x_1943 : vec3<f32> = u_xlat25;
    let x_1945 : vec4<f32> = x_362.x_CascadeShadowSplitSpheres0;
    let x_1948 : vec3<f32> = (x_1943 + -(vec3<f32>(x_1945.x, x_1945.y, x_1945.z)));
    let x_1949 : vec4<f32> = u_xlat7;
    u_xlat7 = vec4<f32>(x_1948.x, x_1948.y, x_1948.z, x_1949.w);
    let x_1951 : vec3<f32> = u_xlat25;
    let x_1953 : vec4<f32> = x_362.x_CascadeShadowSplitSpheres1;
    let x_1956 : vec3<f32> = (x_1951 + -(vec3<f32>(x_1953.x, x_1953.y, x_1953.z)));
    let x_1957 : vec4<f32> = u_xlat8;
    u_xlat8 = vec4<f32>(x_1956.x, x_1956.y, x_1956.z, x_1957.w);
    let x_1959 : vec3<f32> = u_xlat25;
    let x_1961 : vec4<f32> = x_362.x_CascadeShadowSplitSpheres2;
    let x_1964 : vec3<f32> = (x_1959 + -(vec3<f32>(x_1961.x, x_1961.y, x_1961.z)));
    let x_1965 : vec4<f32> = u_xlat9;
    u_xlat9 = vec4<f32>(x_1964.x, x_1964.y, x_1964.z, x_1965.w);
    let x_1967 : vec3<f32> = u_xlat25;
    let x_1969 : vec4<f32> = x_362.x_CascadeShadowSplitSpheres3;
    let x_1972 : vec3<f32> = (x_1967 + -(vec3<f32>(x_1969.x, x_1969.y, x_1969.z)));
    let x_1973 : vec4<f32> = u_xlat10;
    u_xlat10 = vec4<f32>(x_1972.x, x_1972.y, x_1972.z, x_1973.w);
    let x_1975 : vec4<f32> = u_xlat7;
    let x_1977 : vec4<f32> = u_xlat7;
    u_xlat7.x = dot(vec3<f32>(x_1975.x, x_1975.y, x_1975.z), vec3<f32>(x_1977.x, x_1977.y, x_1977.z));
    let x_1981 : vec4<f32> = u_xlat8;
    let x_1983 : vec4<f32> = u_xlat8;
    u_xlat7.y = dot(vec3<f32>(x_1981.x, x_1981.y, x_1981.z), vec3<f32>(x_1983.x, x_1983.y, x_1983.z));
    let x_1987 : vec4<f32> = u_xlat9;
    let x_1989 : vec4<f32> = u_xlat9;
    u_xlat7.z = dot(vec3<f32>(x_1987.x, x_1987.y, x_1987.z), vec3<f32>(x_1989.x, x_1989.y, x_1989.z));
    let x_1993 : vec4<f32> = u_xlat10;
    let x_1995 : vec4<f32> = u_xlat10;
    u_xlat7.w = dot(vec3<f32>(x_1993.x, x_1993.y, x_1993.z), vec3<f32>(x_1995.x, x_1995.y, x_1995.z));
    let x_2000 : vec4<f32> = u_xlat7;
    let x_2002 : vec4<f32> = x_362.x_CascadeShadowSplitSphereRadii;
    u_xlatb7 = (x_2000 < x_2002);
    let x_2005 : bool = u_xlatb7.x;
    u_xlat8.x = select(0.0f, 1.0f, x_2005);
    let x_2009 : bool = u_xlatb7.y;
    u_xlat8.y = select(0.0f, 1.0f, x_2009);
    let x_2013 : bool = u_xlatb7.z;
    u_xlat8.z = select(0.0f, 1.0f, x_2013);
    let x_2017 : bool = u_xlatb7.w;
    u_xlat8.w = select(0.0f, 1.0f, x_2017);
    let x_2021 : bool = u_xlatb7.x;
    u_xlat7.x = select(-0.0f, -1.0f, x_2021);
    let x_2025 : bool = u_xlatb7.y;
    u_xlat7.y = select(-0.0f, -1.0f, x_2025);
    let x_2029 : bool = u_xlatb7.z;
    u_xlat7.z = select(-0.0f, -1.0f, x_2029);
    let x_2032 : vec4<f32> = u_xlat7;
    let x_2034 : vec4<f32> = u_xlat8;
    let x_2036 : vec3<f32> = (vec3<f32>(x_2032.x, x_2032.y, x_2032.z) + vec3<f32>(x_2034.y, x_2034.z, x_2034.w));
    let x_2037 : vec4<f32> = u_xlat7;
    u_xlat7 = vec4<f32>(x_2036.x, x_2036.y, x_2036.z, x_2037.w);
    let x_2039 : vec4<f32> = u_xlat7;
    let x_2041 : vec3<f32> = max(vec3<f32>(x_2039.x, x_2039.y, x_2039.z), vec3<f32>(0.0f, 0.0f, 0.0f));
    let x_2042 : vec4<f32> = u_xlat8;
    u_xlat8 = vec4<f32>(x_2042.x, x_2041.x, x_2041.y, x_2041.z);
    let x_2044 : vec4<f32> = u_xlat8;
    u_xlat7.x = dot(x_2044, vec4<f32>(4.0f, 3.0f, 2.0f, 1.0f));
    let x_2048 : f32 = u_xlat7.x;
    u_xlat7.x = (-(x_2048) + 4.0f);
    let x_2054 : f32 = u_xlat7.x;
    u_xlatu7 = u32(x_2054);
    let x_2057 : u32 = u_xlatu7;
    u_xlati7 = (bitcast<i32>(x_2057) << bitcast<u32>(2i));
    let x_2061 : vec3<f32> = u_xlat25;
    let x_2063 : i32 = u_xlati7;
    let x_2066 : i32 = u_xlati7;
    let x_2070 : vec4<f32> = x_362.x_MainLightWorldToShadow[((x_2063 + 1i) / 4i)][((x_2066 + 1i) % 4i)];
    u_xlat26 = (vec3<f32>(x_2061.y, x_2061.y, x_2061.y) * vec3<f32>(x_2070.x, x_2070.y, x_2070.z));
    let x_2073 : i32 = u_xlati7;
    let x_2075 : i32 = u_xlati7;
    let x_2078 : vec4<f32> = x_362.x_MainLightWorldToShadow[(x_2073 / 4i)][(x_2075 % 4i)];
    let x_2080 : vec3<f32> = u_xlat25;
    let x_2083 : vec3<f32> = u_xlat26;
    u_xlat26 = ((vec3<f32>(x_2078.x, x_2078.y, x_2078.z) * vec3<f32>(x_2080.x, x_2080.x, x_2080.x)) + x_2083);
    let x_2085 : i32 = u_xlati7;
    let x_2088 : i32 = u_xlati7;
    let x_2092 : vec4<f32> = x_362.x_MainLightWorldToShadow[((x_2085 + 2i) / 4i)][((x_2088 + 2i) % 4i)];
    let x_2094 : vec3<f32> = u_xlat25;
    let x_2097 : vec3<f32> = u_xlat26;
    u_xlat25 = ((vec3<f32>(x_2092.x, x_2092.y, x_2092.z) * vec3<f32>(x_2094.z, x_2094.z, x_2094.z)) + x_2097);
    let x_2099 : vec3<f32> = u_xlat25;
    let x_2100 : i32 = u_xlati7;
    let x_2103 : i32 = u_xlati7;
    let x_2107 : vec4<f32> = x_362.x_MainLightWorldToShadow[((x_2100 + 3i) / 4i)][((x_2103 + 3i) % 4i)];
    u_xlat25 = (x_2099 + vec3<f32>(x_2107.x, x_2107.y, x_2107.z));
    let x_2111 : vec3<f32> = u_xlat25;
    let x_2112 : vec2<f32> = vec2<f32>(x_2111.x, x_2111.y);
    let x_2114 : f32 = u_xlat25.z;
    txVec30 = vec3<f32>(x_2112.x, x_2112.y, x_2114);
    let x_2121 : vec3<f32> = txVec30;
    let x_2123 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2121.xy, x_2121.z);
    u_xlat25.x = x_2123;
    let x_2125 : f32 = u_xlat61;
    let x_2127 : f32 = u_xlat25.x;
    u_xlat61 = (x_2125 + x_2127);

    continuing {
      let x_2129 : u32 = u_xlatu_loop_1;
      u_xlatu_loop_1 = (x_2129 + bitcast<u32>(1i));
    }
  }
  let x_2131 : vec3<f32> = vs_TEXCOORD1;
  let x_2134 : vec3<f32> = (x_2131 * vec3<f32>(1.100000024f, 1.100000024f, 1.100000024f));
  let x_2135 : vec4<f32> = u_xlat4;
  u_xlat4 = vec4<f32>(x_2134.x, x_2134.y, x_2134.z, x_2135.w);
  let x_2137 : vec3<f32> = vs_TEXCOORD1;
  let x_2140 : vec4<f32> = x_362.x_CascadeShadowSplitSpheres0;
  let x_2143 : vec3<f32> = ((x_2137 * vec3<f32>(1.100000024f, 1.100000024f, 1.100000024f)) + -(vec3<f32>(x_2140.x, x_2140.y, x_2140.z)));
  let x_2144 : vec4<f32> = u_xlat5;
  u_xlat5 = vec4<f32>(x_2143.x, x_2143.y, x_2143.z, x_2144.w);
  let x_2146 : vec3<f32> = vs_TEXCOORD1;
  let x_2149 : vec4<f32> = x_362.x_CascadeShadowSplitSpheres1;
  let x_2152 : vec3<f32> = ((x_2146 * vec3<f32>(1.100000024f, 1.100000024f, 1.100000024f)) + -(vec3<f32>(x_2149.x, x_2149.y, x_2149.z)));
  let x_2153 : vec4<f32> = u_xlat6;
  u_xlat6 = vec4<f32>(x_2152.x, x_2152.y, x_2152.z, x_2153.w);
  let x_2155 : vec3<f32> = vs_TEXCOORD1;
  let x_2158 : vec4<f32> = x_362.x_CascadeShadowSplitSpheres2;
  let x_2161 : vec3<f32> = ((x_2155 * vec3<f32>(1.100000024f, 1.100000024f, 1.100000024f)) + -(vec3<f32>(x_2158.x, x_2158.y, x_2158.z)));
  let x_2162 : vec4<f32> = u_xlat7;
  u_xlat7 = vec4<f32>(x_2161.x, x_2161.y, x_2161.z, x_2162.w);
  let x_2164 : vec3<f32> = vs_TEXCOORD1;
  let x_2167 : vec4<f32> = x_362.x_CascadeShadowSplitSpheres3;
  let x_2170 : vec3<f32> = ((x_2164 * vec3<f32>(1.100000024f, 1.100000024f, 1.100000024f)) + -(vec3<f32>(x_2167.x, x_2167.y, x_2167.z)));
  let x_2171 : vec4<f32> = u_xlat8;
  u_xlat8 = vec4<f32>(x_2170.x, x_2170.y, x_2170.z, x_2171.w);
  let x_2173 : vec4<f32> = u_xlat5;
  let x_2175 : vec4<f32> = u_xlat5;
  u_xlat5.x = dot(vec3<f32>(x_2173.x, x_2173.y, x_2173.z), vec3<f32>(x_2175.x, x_2175.y, x_2175.z));
  let x_2179 : vec4<f32> = u_xlat6;
  let x_2181 : vec4<f32> = u_xlat6;
  u_xlat5.y = dot(vec3<f32>(x_2179.x, x_2179.y, x_2179.z), vec3<f32>(x_2181.x, x_2181.y, x_2181.z));
  let x_2185 : vec4<f32> = u_xlat7;
  let x_2187 : vec4<f32> = u_xlat7;
  u_xlat5.z = dot(vec3<f32>(x_2185.x, x_2185.y, x_2185.z), vec3<f32>(x_2187.x, x_2187.y, x_2187.z));
  let x_2191 : vec4<f32> = u_xlat8;
  let x_2193 : vec4<f32> = u_xlat8;
  u_xlat5.w = dot(vec3<f32>(x_2191.x, x_2191.y, x_2191.z), vec3<f32>(x_2193.x, x_2193.y, x_2193.z));
  let x_2198 : vec4<f32> = u_xlat5;
  let x_2200 : vec4<f32> = x_362.x_CascadeShadowSplitSphereRadii;
  u_xlatb5 = (x_2198 < x_2200);
  let x_2203 : bool = u_xlatb5.x;
  u_xlat6.x = select(0.0f, 1.0f, x_2203);
  let x_2207 : bool = u_xlatb5.y;
  u_xlat6.y = select(0.0f, 1.0f, x_2207);
  let x_2211 : bool = u_xlatb5.z;
  u_xlat6.z = select(0.0f, 1.0f, x_2211);
  let x_2215 : bool = u_xlatb5.w;
  u_xlat6.w = select(0.0f, 1.0f, x_2215);
  let x_2219 : bool = u_xlatb5.x;
  u_xlat5.x = select(-0.0f, -1.0f, x_2219);
  let x_2223 : bool = u_xlatb5.y;
  u_xlat5.y = select(-0.0f, -1.0f, x_2223);
  let x_2227 : bool = u_xlatb5.z;
  u_xlat5.z = select(-0.0f, -1.0f, x_2227);
  let x_2230 : vec4<f32> = u_xlat5;
  let x_2232 : vec4<f32> = u_xlat6;
  let x_2234 : vec3<f32> = (vec3<f32>(x_2230.x, x_2230.y, x_2230.z) + vec3<f32>(x_2232.y, x_2232.z, x_2232.w));
  let x_2235 : vec4<f32> = u_xlat5;
  u_xlat5 = vec4<f32>(x_2234.x, x_2234.y, x_2234.z, x_2235.w);
  let x_2237 : vec4<f32> = u_xlat5;
  let x_2239 : vec3<f32> = max(vec3<f32>(x_2237.x, x_2237.y, x_2237.z), vec3<f32>(0.0f, 0.0f, 0.0f));
  let x_2240 : vec4<f32> = u_xlat6;
  u_xlat6 = vec4<f32>(x_2240.x, x_2239.x, x_2239.y, x_2239.z);
  let x_2242 : vec4<f32> = u_xlat6;
  u_xlat0.x = dot(x_2242, vec4<f32>(4.0f, 3.0f, 2.0f, 1.0f));
  let x_2246 : f32 = u_xlat0.x;
  u_xlat0.x = (-(x_2246) + 4.0f);
  let x_2252 : f32 = u_xlat0.x;
  u_xlatu0 = u32(x_2252);
  let x_2255 : u32 = u_xlatu0;
  u_xlati0 = (bitcast<i32>(x_2255) << bitcast<u32>(2i));
  let x_2260 : f32 = u_xlat4.y;
  let x_2261 : i32 = u_xlati0;
  let x_2264 : i32 = u_xlati0;
  let x_2268 : f32 = x_362.x_MainLightWorldToShadow[((x_2261 + 1i) / 4i)][((x_2264 + 1i) % 4i)].z;
  u_xlat19 = (x_2260 * x_2268);
  let x_2270 : i32 = u_xlati0;
  let x_2272 : i32 = u_xlati0;
  let x_2275 : f32 = x_362.x_MainLightWorldToShadow[(x_2270 / 4i)][(x_2272 % 4i)].z;
  let x_2277 : f32 = u_xlat4.x;
  let x_2279 : f32 = u_xlat19;
  u_xlat19 = ((x_2275 * x_2277) + x_2279);
  let x_2281 : i32 = u_xlati0;
  let x_2284 : i32 = u_xlati0;
  let x_2288 : f32 = x_362.x_MainLightWorldToShadow[((x_2281 + 2i) / 4i)][((x_2284 + 2i) % 4i)].z;
  let x_2290 : f32 = u_xlat4.z;
  let x_2292 : f32 = u_xlat19;
  u_xlat19 = ((x_2288 * x_2290) + x_2292);
  let x_2294 : f32 = u_xlat19;
  let x_2295 : i32 = u_xlati0;
  let x_2298 : i32 = u_xlati0;
  let x_2302 : f32 = x_362.x_MainLightWorldToShadow[((x_2295 + 3i) / 4i)][((x_2298 + 3i) % 4i)].z;
  u_xlat0.x = (x_2294 + x_2302);
  let x_2307 : f32 = u_xlat0.x;
  u_xlatb19 = (0.0f >= x_2307);
  let x_2311 : f32 = u_xlat0.x;
  u_xlatb0 = (x_2311 >= 1.0f);
  let x_2313 : bool = u_xlatb0;
  let x_2314 : bool = u_xlatb19;
  u_xlatb0 = (x_2313 | x_2314);
  let x_2316 : f32 = u_xlat61;
  u_xlat19 = (x_2316 * 0.25f);
  let x_2318 : bool = u_xlatb0;
  let x_2319 : f32 = u_xlat19;
  u_xlat0.x = select(x_2319, 1.0f, x_2318);
  u_xlat2.w = 1.0f;
  let x_2329 : vec4<f32> = x_2326.unity_SHAr;
  let x_2330 : vec4<f32> = u_xlat2;
  u_xlat4.x = dot(x_2329, x_2330);
  let x_2335 : vec4<f32> = x_2326.unity_SHAg;
  let x_2336 : vec4<f32> = u_xlat2;
  u_xlat4.y = dot(x_2335, x_2336);
  let x_2341 : vec4<f32> = x_2326.unity_SHAb;
  let x_2342 : vec4<f32> = u_xlat2;
  u_xlat4.z = dot(x_2341, x_2342);
  let x_2345 : vec4<f32> = u_xlat2;
  let x_2347 : vec4<f32> = u_xlat2;
  u_xlat5 = (vec4<f32>(x_2345.y, x_2345.z, x_2345.z, x_2345.x) * vec4<f32>(x_2347.x, x_2347.y, x_2347.z, x_2347.z));
  let x_2352 : vec4<f32> = x_2326.unity_SHBr;
  let x_2353 : vec4<f32> = u_xlat5;
  u_xlat6.x = dot(x_2352, x_2353);
  let x_2358 : vec4<f32> = x_2326.unity_SHBg;
  let x_2359 : vec4<f32> = u_xlat5;
  u_xlat6.y = dot(x_2358, x_2359);
  let x_2364 : vec4<f32> = x_2326.unity_SHBb;
  let x_2365 : vec4<f32> = u_xlat5;
  u_xlat6.z = dot(x_2364, x_2365);
  let x_2369 : f32 = u_xlat2.y;
  let x_2371 : f32 = u_xlat2.y;
  u_xlat19 = (x_2369 * x_2371);
  let x_2374 : f32 = u_xlat2.x;
  let x_2376 : f32 = u_xlat2.x;
  let x_2378 : f32 = u_xlat19;
  u_xlat19 = ((x_2374 * x_2376) + -(x_2378));
  let x_2383 : vec4<f32> = x_2326.unity_SHC;
  let x_2385 : f32 = u_xlat19;
  let x_2388 : vec4<f32> = u_xlat6;
  let x_2390 : vec3<f32> = ((vec3<f32>(x_2383.x, x_2383.y, x_2383.z) * vec3<f32>(x_2385, x_2385, x_2385)) + vec3<f32>(x_2388.x, x_2388.y, x_2388.z));
  let x_2391 : vec4<f32> = u_xlat5;
  u_xlat5 = vec4<f32>(x_2390.x, x_2390.y, x_2390.z, x_2391.w);
  let x_2393 : vec4<f32> = u_xlat4;
  let x_2395 : vec4<f32> = u_xlat5;
  let x_2397 : vec3<f32> = (vec3<f32>(x_2393.x, x_2393.y, x_2393.z) + vec3<f32>(x_2395.x, x_2395.y, x_2395.z));
  let x_2398 : vec4<f32> = u_xlat4;
  u_xlat4 = vec4<f32>(x_2397.x, x_2397.y, x_2397.z, x_2398.w);
  let x_2400 : vec4<f32> = u_xlat4;
  let x_2402 : vec3<f32> = max(vec3<f32>(x_2400.x, x_2400.y, x_2400.z), vec3<f32>(0.0f, 0.0f, 0.0f));
  let x_2403 : vec4<f32> = u_xlat4;
  u_xlat4 = vec4<f32>(x_2402.x, x_2402.y, x_2402.z, x_2403.w);
  let x_2405 : vec3<f32> = vs_TEXCOORD2;
  let x_2407 : vec4<f32> = x_40.x_MainLightPosition;
  u_xlat19 = dot(x_2405, -(vec3<f32>(x_2407.x, x_2407.y, x_2407.z)));
  let x_2411 : f32 = u_xlat19;
  let x_2413 : f32 = vs_TEXCOORD5.z;
  u_xlat19 = (x_2411 * x_2413);
  let x_2416 : f32 = u_xlat19;
  let x_2417 : f32 = u_xlat19;
  u_xlat59 = (x_2416 * x_2417);
  let x_2419 : f32 = u_xlat19;
  let x_2420 : f32 = u_xlat59;
  u_xlat19 = (x_2419 * x_2420);
  let x_2422 : f32 = u_xlat19;
  u_xlat19 = clamp(x_2422, 0.0f, 1.0f);
  let x_2424 : f32 = u_xlat19;
  u_xlat19 = (x_2424 * 5.0f);
  let x_2427 : f32 = u_xlat19;
  let x_2430 : vec4<f32> = x_40.x_MainLightColor;
  let x_2432 : vec3<f32> = (vec3<f32>(x_2427, x_2427, x_2427) * vec3<f32>(x_2430.x, x_2430.y, x_2430.z));
  let x_2433 : vec4<f32> = u_xlat5;
  u_xlat5 = vec4<f32>(x_2432.x, x_2432.y, x_2432.z, x_2433.w);
  let x_2436 : vec4<f32> = x_40.x_MainLightPosition;
  let x_2439 : vec4<f32> = x_40.x_MainLightColor;
  let x_2442 : vec4<f32> = u_xlat5;
  let x_2444 : vec3<f32> = ((vec3<f32>(x_2436.y, x_2436.y, x_2436.y) * vec3<f32>(x_2439.x, x_2439.y, x_2439.z)) + vec3<f32>(x_2442.x, x_2442.y, x_2442.z));
  let x_2445 : vec4<f32> = u_xlat5;
  u_xlat5 = vec4<f32>(x_2444.x, x_2444.y, x_2444.z, x_2445.w);
  let x_2447 : vec4<f32> = u_xlat5;
  let x_2449 : vec4<f32> = u_xlat0;
  let x_2452 : vec4<f32> = u_xlat4;
  let x_2454 : vec3<f32> = ((vec3<f32>(x_2447.x, x_2447.y, x_2447.z) * vec3<f32>(x_2449.x, x_2449.x, x_2449.x)) + vec3<f32>(x_2452.x, x_2452.y, x_2452.z));
  let x_2455 : vec4<f32> = u_xlat5;
  u_xlat5 = vec4<f32>(x_2454.x, x_2454.y, x_2454.z, x_2455.w);
  let x_2462 : vec4<f32> = vs_TEXCOORD0;
  let x_2465 : f32 = x_40.x_GlobalMipBias.x;
  let x_2466 : vec4<f32> = textureSampleBias(x_FoamMap, sampler_FoamMap, vec2<f32>(x_2462.z, x_2462.w), x_2465);
  let x_2467 : vec3<f32> = vec3<f32>(x_2466.x, x_2466.y, x_2466.z);
  let x_2468 : vec4<f32> = u_xlat6;
  u_xlat6 = vec4<f32>(x_2467.x, x_2467.y, x_2467.z, x_2468.w);
  let x_2471 : f32 = u_xlat41.x;
  u_xlat41.x = x_2471;
  let x_2474 : f32 = u_xlat41.x;
  u_xlat41.x = clamp(x_2474, 0.0f, 1.0f);
  let x_2478 : f32 = vs_TEXCOORD5.z;
  u_xlat19 = (x_2478 + -0.375f);
  let x_2481 : f32 = u_xlat19;
  u_xlat19 = clamp(x_2481, 0.0f, 1.0f);
  let x_2483 : f32 = u_xlat38;
  u_xlat59 = ((-(x_2483) * 4.0f) + 1.0f);
  let x_2487 : f32 = u_xlat59;
  u_xlat59 = clamp(x_2487, 0.0f, 1.0f);
  let x_2489 : f32 = u_xlat57;
  let x_2490 : f32 = u_xlat38;
  u_xlat57 = min(x_2489, x_2490);
  let x_2492 : f32 = u_xlat57;
  u_xlat57 = ((-(x_2492) * 0.5f) + 0.75f);
  let x_2497 : f32 = u_xlat59;
  let x_2499 : f32 = u_xlat57;
  u_xlat57 = ((x_2497 * 0.5f) + x_2499);
  let x_2501 : f32 = u_xlat57;
  u_xlat57 = clamp(x_2501, 0.0f, 1.0f);
  let x_2504 : f32 = u_xlat41.x;
  let x_2505 : f32 = u_xlat57;
  u_xlat57 = (x_2504 * x_2505);
  let x_2507 : f32 = u_xlat57;
  let x_2508 : f32 = u_xlat19;
  u_xlat19 = max(x_2507, x_2508);
  let x_2511 : f32 = u_xlat1.x;
  let x_2513 : f32 = u_xlat1.x;
  u_xlat57 = (x_2511 + x_2513);
  let x_2515 : f32 = u_xlat57;
  let x_2516 : f32 = u_xlat19;
  u_xlat7.x = max(x_2515, x_2516);
  u_xlat7.y = 0.660000026f;
  let x_2526 : vec4<f32> = u_xlat7;
  let x_2529 : f32 = x_40.x_GlobalMipBias.x;
  let x_2530 : vec4<f32> = textureSampleBias(x_AbsorptionScatteringRamp, sampler_AbsorptionScatteringRamp, vec2<f32>(x_2526.x, x_2526.y), x_2529);
  let x_2531 : vec3<f32> = vec3<f32>(x_2530.x, x_2530.y, x_2530.z);
  let x_2532 : vec4<f32> = u_xlat7;
  u_xlat7 = vec4<f32>(x_2531.x, x_2531.y, x_2531.z, x_2532.w);
  let x_2534 : vec4<f32> = u_xlat6;
  let x_2536 : vec4<f32> = u_xlat7;
  let x_2538 : vec3<f32> = (vec3<f32>(x_2534.x, x_2534.y, x_2534.z) * vec3<f32>(x_2536.x, x_2536.y, x_2536.z));
  let x_2539 : vec4<f32> = u_xlat6;
  u_xlat6 = vec4<f32>(x_2538.x, x_2538.y, x_2538.z, x_2539.w);
  let x_2541 : vec4<f32> = u_xlat6;
  let x_2543 : vec4<f32> = u_xlat6;
  u_xlat19 = dot(vec3<f32>(x_2541.x, x_2541.y, x_2541.z), vec3<f32>(x_2543.x, x_2543.y, x_2543.z));
  let x_2546 : f32 = u_xlat19;
  u_xlat19 = sqrt(x_2546);
  let x_2548 : f32 = u_xlat19;
  u_xlat19 = ((x_2548 * 1.5f) + -0.100000001f);
  let x_2552 : f32 = u_xlat19;
  u_xlat19 = clamp(x_2552, 0.0f, 1.0f);
  let x_2554 : vec3<f32> = u_xlat22;
  let x_2557 : vec4<f32> = x_40.x_MainLightColor;
  let x_2560 : vec4<f32> = u_xlat4;
  let x_2562 : vec3<f32> = ((vec3<f32>(x_2554.x, x_2554.x, x_2554.x) * vec3<f32>(x_2557.x, x_2557.y, x_2557.z)) + vec3<f32>(x_2560.x, x_2560.y, x_2560.z));
  let x_2563 : vec4<f32> = u_xlat4;
  u_xlat4 = vec4<f32>(x_2562.x, x_2562.y, x_2562.z, x_2563.w);
  let x_2565 : vec3<f32> = vs_TEXCOORD2;
  let x_2567 : vec4<f32> = x_40.x_MainLightPosition;
  let x_2569 : vec3<f32> = (x_2565 + vec3<f32>(x_2567.x, x_2567.y, x_2567.z));
  let x_2570 : vec4<f32> = u_xlat6;
  u_xlat6 = vec4<f32>(x_2569.x, x_2569.y, x_2569.z, x_2570.w);
  let x_2572 : vec4<f32> = u_xlat6;
  let x_2574 : vec4<f32> = u_xlat6;
  u_xlat57 = dot(vec3<f32>(x_2572.x, x_2572.y, x_2572.z), vec3<f32>(x_2574.x, x_2574.y, x_2574.z));
  let x_2577 : f32 = u_xlat57;
  u_xlat57 = max(x_2577, 1.17549435e-37f);
  let x_2580 : f32 = u_xlat57;
  u_xlat57 = inverseSqrt(x_2580);
  let x_2582 : f32 = u_xlat57;
  let x_2584 : vec4<f32> = u_xlat6;
  let x_2586 : vec3<f32> = (vec3<f32>(x_2582, x_2582, x_2582) * vec3<f32>(x_2584.x, x_2584.y, x_2584.z));
  let x_2587 : vec4<f32> = u_xlat6;
  u_xlat6 = vec4<f32>(x_2586.x, x_2586.y, x_2586.z, x_2587.w);
  let x_2589 : vec4<f32> = u_xlat2;
  let x_2591 : vec4<f32> = u_xlat6;
  u_xlat57 = dot(vec3<f32>(x_2589.x, x_2589.y, x_2589.z), vec3<f32>(x_2591.x, x_2591.y, x_2591.z));
  let x_2594 : f32 = u_xlat57;
  u_xlat57 = clamp(x_2594, 0.0f, 1.0f);
  let x_2597 : vec4<f32> = x_40.x_MainLightPosition;
  let x_2599 : vec4<f32> = u_xlat6;
  u_xlat1.x = dot(vec3<f32>(x_2597.x, x_2597.y, x_2597.z), vec3<f32>(x_2599.x, x_2599.y, x_2599.z));
  let x_2604 : f32 = u_xlat1.x;
  u_xlat1.x = clamp(x_2604, 0.0f, 1.0f);
  let x_2607 : f32 = u_xlat57;
  let x_2608 : f32 = u_xlat57;
  u_xlat57 = (x_2607 * x_2608);
  let x_2610 : f32 = u_xlat57;
  u_xlat57 = ((x_2610 * -0.999938965f) + 1.000010014f);
  let x_2616 : f32 = u_xlat1.x;
  let x_2618 : f32 = u_xlat1.x;
  u_xlat1.x = (x_2616 * x_2618);
  let x_2621 : f32 = u_xlat57;
  let x_2622 : f32 = u_xlat57;
  u_xlat57 = (x_2621 * x_2622);
  let x_2625 : f32 = u_xlat1.x;
  u_xlat1.x = max(x_2625, 0.100000001f);
  let x_2628 : f32 = u_xlat57;
  let x_2630 : f32 = u_xlat1.x;
  u_xlat57 = (x_2628 * x_2630);
  let x_2632 : f32 = u_xlat57;
  u_xlat57 = (x_2632 * 2.03125f);
  let x_2636 : f32 = u_xlat57;
  u_xlat57 = (6.10351562e-05f / x_2636);
  let x_2639 : f32 = u_xlat0.x;
  let x_2640 : f32 = u_xlat57;
  u_xlat0.x = (x_2639 * x_2640);
  let x_2644 : f32 = u_xlat0.x;
  u_xlat0.x = (x_2644 * 0.039999999f);
  let x_2648 : vec4<f32> = u_xlat0;
  let x_2651 : vec4<f32> = x_40.x_MainLightColor;
  let x_2653 : vec3<f32> = (vec3<f32>(x_2648.x, x_2648.x, x_2648.x) * vec3<f32>(x_2651.x, x_2651.y, x_2651.z));
  let x_2654 : vec4<f32> = u_xlat6;
  u_xlat6 = vec4<f32>(x_2653.x, x_2653.y, x_2653.z, x_2654.w);
  let x_2657 : f32 = x_40.x_AdditionalLightsCount.x;
  let x_2659 : f32 = x_2326.unity_LightData.y;
  u_xlat0.x = min(x_2657, x_2659);
  let x_2663 : f32 = u_xlat0.x;
  u_xlatu0 = bitcast<u32>(i32(x_2663));
  let x_2666 : vec4<f32> = u_xlat5;
  let x_2667 : vec3<f32> = vec3<f32>(x_2666.x, x_2666.y, x_2666.z);
  let x_2668 : vec4<f32> = u_xlat7;
  u_xlat7 = vec4<f32>(x_2667.x, x_2667.y, x_2667.z, x_2668.w);
  let x_2670 : vec4<f32> = u_xlat6;
  let x_2671 : vec3<f32> = vec3<f32>(x_2670.x, x_2670.y, x_2670.z);
  let x_2672 : vec4<f32> = u_xlat8;
  u_xlat8 = vec4<f32>(x_2671.x, x_2671.y, x_2671.z, x_2672.w);
  u_xlatu_loop_2 = 0u;
  loop {
    let x_2680 : u32 = u_xlatu_loop_2;
    let x_2681 : u32 = u_xlatu0;
    if ((x_2680 < x_2681)) {
    } else {
      break;
    }
    let x_2684 : u32 = u_xlatu_loop_2;
    u_xlatu1 = (x_2684 >> 2u);
    let x_2687 : u32 = u_xlatu_loop_2;
    u_xlati59 = bitcast<i32>((x_2687 & 3u));
    let x_2690 : u32 = u_xlatu1;
    let x_2693 : vec4<f32> = x_2326.unity_LightIndices[bitcast<i32>(x_2690)];
    let x_2702 : i32 = u_xlati59;
    indexable = array<vec4<u32>, 4u>(vec4<u32>(1065353216u, 0u, 0u, 0u), vec4<u32>(0u, 1065353216u, 0u, 0u), vec4<u32>(0u, 0u, 1065353216u, 0u), vec4<u32>(0u, 0u, 0u, 1065353216u));
    let x_2707 : vec4<u32> = indexable[x_2702];
    u_xlat1.x = dot(x_2693, bitcast<vec4<f32>>(x_2707));
    let x_2713 : f32 = u_xlat1.x;
    u_xlati1 = i32(x_2713);
    let x_2715 : vec3<f32> = vs_TEXCOORD1;
    let x_2727 : i32 = u_xlati1;
    let x_2729 : vec4<f32> = x_2726.x_AdditionalLightsPosition[x_2727];
    let x_2732 : i32 = u_xlati1;
    let x_2734 : vec4<f32> = x_2726.x_AdditionalLightsPosition[x_2732];
    let x_2736 : vec3<f32> = ((-(x_2715) * vec3<f32>(x_2729.w, x_2729.w, x_2729.w)) + vec3<f32>(x_2734.x, x_2734.y, x_2734.z));
    let x_2737 : vec4<f32> = u_xlat9;
    u_xlat9 = vec4<f32>(x_2736.x, x_2736.y, x_2736.z, x_2737.w);
    let x_2739 : vec4<f32> = u_xlat9;
    let x_2741 : vec4<f32> = u_xlat9;
    u_xlat59 = dot(vec3<f32>(x_2739.x, x_2739.y, x_2739.z), vec3<f32>(x_2741.x, x_2741.y, x_2741.z));
    let x_2744 : f32 = u_xlat59;
    u_xlat59 = max(x_2744, 6.10351562e-05f);
    let x_2746 : f32 = u_xlat59;
    u_xlat22.x = inverseSqrt(x_2746);
    let x_2749 : vec3<f32> = u_xlat22;
    let x_2751 : vec4<f32> = u_xlat9;
    let x_2753 : vec3<f32> = (vec3<f32>(x_2749.x, x_2749.x, x_2749.x) * vec3<f32>(x_2751.x, x_2751.y, x_2751.z));
    let x_2754 : vec4<f32> = u_xlat10;
    u_xlat10 = vec4<f32>(x_2753.x, x_2753.y, x_2753.z, x_2754.w);
    let x_2756 : f32 = u_xlat59;
    u_xlat41.x = (1.0f / x_2756);
    let x_2759 : f32 = u_xlat59;
    let x_2760 : i32 = u_xlati1;
    let x_2762 : f32 = x_2726.x_AdditionalLightsAttenuation[x_2760].x;
    u_xlat59 = (x_2759 * x_2762);
    let x_2764 : f32 = u_xlat59;
    let x_2766 : f32 = u_xlat59;
    u_xlat59 = ((-(x_2764) * x_2766) + 1.0f);
    let x_2769 : f32 = u_xlat59;
    u_xlat59 = max(x_2769, 0.0f);
    let x_2771 : f32 = u_xlat59;
    let x_2772 : f32 = u_xlat59;
    u_xlat59 = (x_2771 * x_2772);
    let x_2774 : f32 = u_xlat59;
    let x_2776 : f32 = u_xlat41.x;
    u_xlat59 = (x_2774 * x_2776);
    let x_2778 : i32 = u_xlati1;
    let x_2780 : vec4<f32> = x_2726.x_AdditionalLightsSpotDir[x_2778];
    let x_2782 : vec4<f32> = u_xlat10;
    u_xlat41.x = dot(vec3<f32>(x_2780.x, x_2780.y, x_2780.z), vec3<f32>(x_2782.x, x_2782.y, x_2782.z));
    let x_2787 : f32 = u_xlat41.x;
    let x_2788 : i32 = u_xlati1;
    let x_2790 : f32 = x_2726.x_AdditionalLightsAttenuation[x_2788].z;
    let x_2792 : i32 = u_xlati1;
    let x_2794 : f32 = x_2726.x_AdditionalLightsAttenuation[x_2792].w;
    u_xlat41.x = ((x_2787 * x_2790) + x_2794);
    let x_2798 : f32 = u_xlat41.x;
    u_xlat41.x = clamp(x_2798, 0.0f, 1.0f);
    let x_2802 : f32 = u_xlat41.x;
    let x_2804 : f32 = u_xlat41.x;
    u_xlat41.x = (x_2802 * x_2804);
    let x_2807 : f32 = u_xlat59;
    let x_2809 : f32 = u_xlat41.x;
    u_xlat59 = (x_2807 * x_2809);
    let x_2811 : vec4<f32> = u_xlat2;
    let x_2813 : vec4<f32> = u_xlat10;
    u_xlat41.x = dot(vec3<f32>(x_2811.x, x_2811.y, x_2811.z), vec3<f32>(x_2813.x, x_2813.y, x_2813.z));
    let x_2818 : f32 = u_xlat41.x;
    u_xlat41.x = clamp(x_2818, 0.0f, 1.0f);
    let x_2821 : f32 = u_xlat59;
    let x_2823 : f32 = u_xlat41.x;
    u_xlat41.x = (x_2821 * x_2823);
    let x_2826 : vec2<f32> = u_xlat41;
    let x_2828 : i32 = u_xlati1;
    let x_2830 : vec4<f32> = x_2726.x_AdditionalLightsColor[x_2828];
    let x_2832 : vec3<f32> = (vec3<f32>(x_2826.x, x_2826.x, x_2826.x) * vec3<f32>(x_2830.x, x_2830.y, x_2830.z));
    let x_2833 : vec4<f32> = u_xlat11;
    u_xlat11 = vec4<f32>(x_2832.x, x_2832.y, x_2832.z, x_2833.w);
    let x_2835 : vec4<f32> = u_xlat9;
    let x_2837 : vec3<f32> = u_xlat22;
    let x_2840 : vec3<f32> = vs_TEXCOORD2;
    let x_2841 : vec3<f32> = ((vec3<f32>(x_2835.x, x_2835.y, x_2835.z) * vec3<f32>(x_2837.x, x_2837.x, x_2837.x)) + x_2840);
    let x_2842 : vec4<f32> = u_xlat9;
    u_xlat9 = vec4<f32>(x_2841.x, x_2841.y, x_2841.z, x_2842.w);
    let x_2844 : vec4<f32> = u_xlat9;
    let x_2846 : vec4<f32> = u_xlat9;
    u_xlat22.x = dot(vec3<f32>(x_2844.x, x_2844.y, x_2844.z), vec3<f32>(x_2846.x, x_2846.y, x_2846.z));
    let x_2851 : f32 = u_xlat22.x;
    u_xlat22.x = max(x_2851, 1.17549435e-37f);
    let x_2855 : f32 = u_xlat22.x;
    u_xlat22.x = inverseSqrt(x_2855);
    let x_2858 : vec3<f32> = u_xlat22;
    let x_2860 : vec4<f32> = u_xlat9;
    let x_2862 : vec3<f32> = (vec3<f32>(x_2858.x, x_2858.x, x_2858.x) * vec3<f32>(x_2860.x, x_2860.y, x_2860.z));
    let x_2863 : vec4<f32> = u_xlat9;
    u_xlat9 = vec4<f32>(x_2862.x, x_2862.y, x_2862.z, x_2863.w);
    let x_2865 : vec4<f32> = u_xlat2;
    let x_2867 : vec4<f32> = u_xlat9;
    u_xlat22.x = dot(vec3<f32>(x_2865.x, x_2865.y, x_2865.z), vec3<f32>(x_2867.x, x_2867.y, x_2867.z));
    let x_2872 : f32 = u_xlat22.x;
    u_xlat22.x = clamp(x_2872, 0.0f, 1.0f);
    let x_2875 : vec4<f32> = u_xlat10;
    let x_2877 : vec4<f32> = u_xlat9;
    u_xlat22.y = dot(vec3<f32>(x_2875.x, x_2875.y, x_2875.z), vec3<f32>(x_2877.x, x_2877.y, x_2877.z));
    let x_2882 : f32 = u_xlat22.y;
    u_xlat22.y = clamp(x_2882, 0.0f, 1.0f);
    let x_2885 : vec3<f32> = u_xlat22;
    let x_2887 : vec3<f32> = u_xlat22;
    let x_2889 : vec2<f32> = (vec2<f32>(x_2885.x, x_2885.y) * vec2<f32>(x_2887.x, x_2887.y));
    let x_2890 : vec3<f32> = u_xlat22;
    u_xlat22 = vec3<f32>(x_2889.x, x_2889.y, x_2890.z);
    let x_2893 : f32 = u_xlat22.x;
    u_xlat22.x = ((x_2893 * -0.999938965f) + 1.000010014f);
    let x_2898 : f32 = u_xlat22.x;
    let x_2900 : f32 = u_xlat22.x;
    u_xlat22.x = (x_2898 * x_2900);
    let x_2904 : f32 = u_xlat22.y;
    u_xlat41.x = max(x_2904, 0.100000001f);
    let x_2908 : f32 = u_xlat41.x;
    let x_2910 : f32 = u_xlat22.x;
    u_xlat22.x = (x_2908 * x_2910);
    let x_2914 : f32 = u_xlat22.x;
    u_xlat22.x = (x_2914 * 2.03125f);
    let x_2918 : f32 = u_xlat22.x;
    u_xlat22.x = (6.10351562e-05f / x_2918);
    let x_2922 : f32 = u_xlat22.x;
    u_xlat22.x = (x_2922 * 0.039999999f);
    let x_2925 : vec3<f32> = u_xlat22;
    let x_2927 : vec4<f32> = u_xlat11;
    let x_2930 : vec4<f32> = u_xlat8;
    let x_2932 : vec3<f32> = ((vec3<f32>(x_2925.x, x_2925.x, x_2925.x) * vec3<f32>(x_2927.x, x_2927.y, x_2927.z)) + vec3<f32>(x_2930.x, x_2930.y, x_2930.z));
    let x_2933 : vec4<f32> = u_xlat8;
    u_xlat8 = vec4<f32>(x_2932.x, x_2932.y, x_2932.z, x_2933.w);
    let x_2935 : f32 = u_xlat59;
    let x_2937 : i32 = u_xlati1;
    let x_2939 : vec4<f32> = x_2726.x_AdditionalLightsColor[x_2937];
    let x_2942 : vec4<f32> = u_xlat7;
    let x_2944 : vec3<f32> = ((vec3<f32>(x_2935, x_2935, x_2935) * vec3<f32>(x_2939.x, x_2939.y, x_2939.z)) + vec3<f32>(x_2942.x, x_2942.y, x_2942.z));
    let x_2945 : vec4<f32> = u_xlat7;
    u_xlat7 = vec4<f32>(x_2944.x, x_2944.y, x_2944.z, x_2945.w);

    continuing {
      let x_2947 : u32 = u_xlatu_loop_2;
      u_xlatu_loop_2 = (x_2947 + bitcast<u32>(1i));
    }
  }
  let x_2949 : f32 = u_xlat58;
  let x_2950 : f32 = u_xlat38;
  u_xlat5.x = (x_2949 * x_2950);
  u_xlat5.y = 0.375f;
  u_xlat5.z = 0.0f;
  let x_2959 : vec4<f32> = u_xlat5;
  let x_2962 : f32 = x_40.x_GlobalMipBias.x;
  let x_2963 : vec4<f32> = textureSampleBias(x_AbsorptionScatteringRamp, sampler_AbsorptionScatteringRamp, vec2<f32>(x_2959.x, x_2959.y), x_2962);
  let x_2964 : vec3<f32> = vec3<f32>(x_2963.x, x_2963.y, x_2963.z);
  let x_2965 : vec4<f32> = u_xlat0;
  u_xlat0 = vec4<f32>(x_2964.x, x_2965.y, x_2964.y, x_2964.z);
  let x_2967 : vec3<f32> = vs_TEXCOORD2;
  let x_2969 : vec4<f32> = u_xlat2;
  u_xlat1.x = dot(-(x_2967), vec3<f32>(x_2969.x, x_2969.y, x_2969.z));
  let x_2974 : f32 = u_xlat1.x;
  let x_2976 : f32 = u_xlat1.x;
  u_xlat1.x = (x_2974 + x_2976);
  let x_2979 : vec4<f32> = u_xlat2;
  let x_2981 : vec3<f32> = u_xlat1;
  let x_2985 : vec3<f32> = vs_TEXCOORD2;
  let x_2987 : vec3<f32> = ((vec3<f32>(x_2979.x, x_2979.y, x_2979.z) * -(vec3<f32>(x_2981.x, x_2981.x, x_2981.x))) + -(x_2985));
  let x_2988 : vec4<f32> = u_xlat2;
  u_xlat2 = vec4<f32>(x_2987.x, x_2987.y, x_2987.z, x_2988.w);
  let x_2998 : vec4<f32> = u_xlat2;
  let x_3001 : f32 = x_40.x_GlobalMipBias.x;
  let x_3002 : vec4<f32> = textureSampleBias(x_CubemapTexture, sampler_CubemapTexture, vec3<f32>(x_2998.x, x_2998.y, x_2998.z), x_3001);
  let x_3003 : vec3<f32> = vec3<f32>(x_3002.x, x_3002.y, x_3002.z);
  let x_3004 : vec4<f32> = u_xlat2;
  u_xlat2 = vec4<f32>(x_3003.x, x_3003.y, x_3003.z, x_3004.w);
  let x_3011 : vec2<f32> = u_xlat20;
  let x_3013 : f32 = u_xlat41.y;
  let x_3014 : vec4<f32> = textureSampleLevel(x_CameraOpaqueTexture, sampler_CameraOpaqueTexture_linear_clamp, x_3011, x_3013);
  u_xlat1 = vec3<f32>(x_3014.x, x_3014.y, x_3014.z);
  let x_3019 : vec4<f32> = u_xlat5;
  let x_3022 : f32 = x_40.x_GlobalMipBias.x;
  let x_3023 : vec4<f32> = textureSampleBias(x_AbsorptionScatteringRamp, sampler_AbsorptionScatteringRamp, vec2<f32>(x_3019.x, x_3019.z), x_3022);
  u_xlat22 = vec3<f32>(x_3023.x, x_3023.y, x_3023.z);
  let x_3025 : vec3<f32> = u_xlat1;
  let x_3026 : vec3<f32> = u_xlat22;
  let x_3027 : vec3<f32> = (x_3025 * x_3026);
  let x_3028 : vec4<f32> = u_xlat5;
  u_xlat5 = vec4<f32>(x_3027.x, x_3027.y, x_3027.z, x_3028.w);
  let x_3030 : vec3<f32> = u_xlat1;
  let x_3032 : vec3<f32> = u_xlat22;
  let x_3034 : vec4<f32> = u_xlat2;
  u_xlat1 = ((-(x_3030) * x_3032) + vec3<f32>(x_3034.x, x_3034.y, x_3034.z));
  let x_3037 : f32 = u_xlat3;
  let x_3039 : vec3<f32> = u_xlat1;
  let x_3041 : vec4<f32> = u_xlat5;
  u_xlat1 = ((vec3<f32>(x_3037, x_3037, x_3037) * x_3039) + vec3<f32>(x_3041.x, x_3041.y, x_3041.z));
  let x_3044 : vec4<f32> = u_xlat7;
  let x_3046 : vec4<f32> = u_xlat0;
  let x_3049 : vec3<f32> = u_xlat1;
  let x_3050 : vec3<f32> = ((vec3<f32>(x_3044.x, x_3044.y, x_3044.z) * vec3<f32>(x_3046.x, x_3046.z, x_3046.w)) + x_3049);
  let x_3051 : vec4<f32> = u_xlat0;
  u_xlat0 = vec4<f32>(x_3050.x, x_3051.y, x_3050.y, x_3050.z);
  let x_3053 : vec4<f32> = u_xlat8;
  let x_3055 : vec4<f32> = u_xlat0;
  let x_3057 : vec3<f32> = (vec3<f32>(x_3053.x, x_3053.y, x_3053.z) + vec3<f32>(x_3055.x, x_3055.z, x_3055.w));
  let x_3058 : vec4<f32> = u_xlat0;
  u_xlat0 = vec4<f32>(x_3057.x, x_3058.y, x_3057.y, x_3057.z);
  let x_3060 : f32 = u_xlat19;
  let x_3062 : vec4<f32> = u_xlat4;
  let x_3065 : vec4<f32> = u_xlat0;
  u_xlat1 = ((vec3<f32>(x_3060, x_3060, x_3060) * vec3<f32>(x_3062.x, x_3062.y, x_3062.z)) + -(vec3<f32>(x_3065.x, x_3065.z, x_3065.w)));
  let x_3069 : f32 = u_xlat19;
  let x_3071 : vec3<f32> = u_xlat1;
  let x_3073 : vec4<f32> = u_xlat0;
  let x_3075 : vec3<f32> = ((vec3<f32>(x_3069, x_3069, x_3069) * x_3071) + vec3<f32>(x_3073.x, x_3073.z, x_3073.w));
  let x_3076 : vec4<f32> = u_xlat0;
  u_xlat0 = vec4<f32>(x_3075.x, x_3075.y, x_3075.z, x_3076.w);
  let x_3081 : f32 = vs_TEXCOORD4.x;
  let x_3083 : f32 = vs_TEXCOORD4.x;
  u_xlat57 = (x_3081 * -(x_3083));
  let x_3086 : f32 = u_xlat57;
  u_xlat57 = exp2(x_3086);
  let x_3088 : vec4<f32> = u_xlat0;
  let x_3091 : vec4<f32> = x_40.unity_FogColor;
  let x_3094 : vec3<f32> = (vec3<f32>(x_3088.x, x_3088.y, x_3088.z) + -(vec3<f32>(x_3091.x, x_3091.y, x_3091.z)));
  let x_3095 : vec4<f32> = u_xlat0;
  u_xlat0 = vec4<f32>(x_3094.x, x_3094.y, x_3094.z, x_3095.w);
  let x_3099 : f32 = u_xlat57;
  let x_3101 : vec4<f32> = u_xlat0;
  let x_3105 : vec4<f32> = x_40.unity_FogColor;
  let x_3107 : vec3<f32> = ((vec3<f32>(x_3099, x_3099, x_3099) * vec3<f32>(x_3101.x, x_3101.y, x_3101.z)) + vec3<f32>(x_3105.x, x_3105.y, x_3105.z));
  let x_3108 : vec4<f32> = SV_Target0;
  SV_Target0 = vec4<f32>(x_3107.x, x_3107.y, x_3107.z, x_3108.w);
  SV_Target0.w = 1.0f;
  return;
}

struct main_out {
  @location(0)
  SV_Target0_1 : vec4<f32>,
}

@fragment
fn main(@location(7) vs_TEXCOORD6_param : vec4<f32>, @location(4) vs_TEXCOORD3_param : vec3<f32>, @location(6) vs_TEXCOORD5_param : vec4<f32>, @location(1) vs_TEXCOORD1_param : vec3<f32>, @location(0) vs_TEXCOORD0_param : vec4<f32>, @location(2) vs_NORMAL0_param : vec3<f32>, @location(3) vs_TEXCOORD2_param : vec3<f32>, @location(5) vs_TEXCOORD4_param : vec2<f32>, @builtin(position) gl_FragCoord_param : vec4<f32>) -> main_out {
  vs_TEXCOORD6 = vs_TEXCOORD6_param;
  vs_TEXCOORD3 = vs_TEXCOORD3_param;
  vs_TEXCOORD5 = vs_TEXCOORD5_param;
  vs_TEXCOORD1 = vs_TEXCOORD1_param;
  vs_TEXCOORD0 = vs_TEXCOORD0_param;
  vs_NORMAL0 = vs_NORMAL0_param;
  vs_TEXCOORD2 = vs_TEXCOORD2_param;
  vs_TEXCOORD4 = vs_TEXCOORD4_param;
  gl_FragCoord = gl_FragCoord_param;
  main_1();
  return main_out(SV_Target0);
}

