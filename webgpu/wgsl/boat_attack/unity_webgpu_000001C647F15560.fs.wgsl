type Arr = array<vec4<f32>, 2u>;

struct UnityPerDraw {
  unity_ObjectToWorld : mat4x4<f32>,
  unity_WorldToObject : mat4x4<f32>,
  unity_LODFade : vec4<f32>,
  unity_WorldTransformParams : vec4<f32>,
  unity_RenderingLayer : vec4<f32>,
  unity_LightData : vec4<f32>,
  unity_LightIndices : Arr,
  unity_ProbesOcclusion : vec4<f32>,
  unity_SpecCube0_HDR : vec4<f32>,
  unity_SpecCube1_HDR : vec4<f32>,
  unity_SpecCube0_BoxMax : vec4<f32>,
  unity_SpecCube0_BoxMin : vec4<f32>,
  unity_SpecCube0_ProbePosition : vec4<f32>,
  unity_SpecCube1_BoxMax : vec4<f32>,
  unity_SpecCube1_BoxMin : vec4<f32>,
  unity_SpecCube1_ProbePosition : vec4<f32>,
  unity_LightmapST : vec4<f32>,
  unity_DynamicLightmapST : vec4<f32>,
  unity_SHAr : vec4<f32>,
  unity_SHAg : vec4<f32>,
  unity_SHAb : vec4<f32>,
  unity_SHBr : vec4<f32>,
  unity_SHBg : vec4<f32>,
  unity_SHBb : vec4<f32>,
  unity_SHC : vec4<f32>,
  unity_RendererBounds_Min : vec4<f32>,
  unity_RendererBounds_Max : vec4<f32>,
  unity_MatrixPreviousM : mat4x4<f32>,
  unity_MatrixPreviousMI : mat4x4<f32>,
  unity_MotionVectorsParams : vec4<f32>,
  unity_SpriteColor : vec4<f32>,
  unity_SpriteProps : vec4<f32>,
}

struct PGlobals {
  x_ScaledScreenParams : vec4<f32>,
  x_GlobalMipBias : vec2<f32>,
  x_AlphaToMaskAvailable : f32,
  @size(4)
  padding : u32,
  x_MainLightPosition : vec4<f32>,
  x_MainLightColor : vec4<f32>,
  x_AmbientOcclusionParam : vec4<f32>,
  x_AdditionalLightsCount : vec4<f32>,
  x_RenderingLayerMaxInt : u32,
  x_RenderingLayerRcpMaxInt : f32,
  @size(8)
  padding_1 : u32,
  x_WorldSpaceCameraPos : vec3<f32>,
  @size(4)
  padding_2 : u32,
  x_ScreenParams : vec4<f32>,
  unity_OrthoParams : vec4<f32>,
  x_ScaleBiasRt : vec4<f32>,
  unity_MatrixV : mat4x4<f32>,
}

struct UnityPerMaterial {
  Texture2D_B222E8F_TexelSize : vec4<f32>,
  Color_C30C7CA3 : vec4<f32>,
  Texture2D_D9BFD5F1_TexelSize : vec4<f32>,
}

type Arr_1 = array<mat4x4<f32>, 5u>;

struct MainLightShadows {
  x_MainLightWorldToShadow : Arr_1,
  x_CascadeShadowSplitSpheres0 : vec4<f32>,
  x_CascadeShadowSplitSpheres1 : vec4<f32>,
  x_CascadeShadowSplitSpheres2 : vec4<f32>,
  x_CascadeShadowSplitSpheres3 : vec4<f32>,
  x_CascadeShadowSplitSphereRadii : vec4<f32>,
  x_MainLightShadowOffset0 : vec4<f32>,
  x_MainLightShadowOffset1 : vec4<f32>,
  x_MainLightShadowParams : vec4<f32>,
  x_MainLightShadowmapSize : vec4<f32>,
}

struct strided_arr {
  @size(16)
  el : f32,
}

type Arr_2 = array<strided_arr, 8u>;

struct LightCookies {
  x_MainLightWorldToLight : mat4x4<f32>,
  x_AdditionalLightsCookieEnableBits : Arr_2,
  x_MainLightCookieTextureFormat : f32,
  x_AdditionalLightsCookieAtlasTextureFormat : f32,
}

type Arr_3 = array<vec4<f32>, 256u>;

type Arr_4 = array<vec4<f32>, 256u>;

type Arr_5 = array<vec4<f32>, 256u>;

type Arr_6 = array<vec4<f32>, 256u>;

type Arr_7 = array<vec4<f32>, 256u>;

struct strided_arr_1 {
  @size(16)
  el : f32,
}

type Arr_8 = array<strided_arr_1, 256u>;

type Arr_9 = array<vec4<f32>, 256u>;

type Arr_10 = array<strided_arr_1, 256u>;

struct AdditionalLights {
  x_AdditionalLightsPosition : Arr_9,
  x_AdditionalLightsColor : Arr_9,
  x_AdditionalLightsAttenuation : Arr_9,
  x_AdditionalLightsSpotDir : Arr_9,
  x_AdditionalLightsOcclusionProbes : Arr_9,
  x_AdditionalLightsLayerMasks : Arr_10,
}

type Arr_11 = array<mat4x4<f32>, 256u>;

struct AdditionalLightsCookies {
  x_AdditionalLightsWorldToLights : Arr_11,
  x_AdditionalLightsCookieAtlasUVRects : Arr_9,
  x_AdditionalLightsLightTypes : Arr_10,
}

var<private> gl_FragCoord : vec4<f32>;

var<private> vs_INTERP1 : vec3<f32>;

var<private> vs_INTERP2 : vec4<f32>;

@group(1) @binding(2) var<uniform> x_95 : UnityPerDraw;

@group(1) @binding(0) var<uniform> x_160 : PGlobals;

var<private> vs_INTERP0 : vec3<f32>;

@group(0) @binding(6) var Texture2D_B222E8F : texture_2d<f32>;

@group(0) @binding(14) var samplerTexture2D_B222E8F : sampler;

var<private> vs_INTERP3 : vec4<f32>;

@group(1) @binding(6) var<uniform> x_279 : UnityPerMaterial;

@group(0) @binding(7) var Texture2D_D9BFD5F1 : texture_2d<f32>;

@group(0) @binding(15) var samplerTexture2D_D9BFD5F1 : sampler;

var<private> vs_INTERP4 : vec4<f32>;

@group(1) @binding(3) var<uniform> x_381 : MainLightShadows;

@group(0) @binding(3) var x_MainLightShadowmapTexture : texture_depth_2d;

@group(0) @binding(11) var sampler_MainLightShadowmapTexture : sampler_comparison;

@group(0) @binding(1) var unity_Lightmap : texture_2d<f32>;

@group(0) @binding(9) var samplerunity_Lightmap : sampler;

var<private> vs_INTERP5 : vec2<f32>;

@group(0) @binding(2) var x_ScreenSpaceOcclusionTexture : texture_2d<f32>;

@group(0) @binding(10) var sampler_ScreenSpaceOcclusionTexture : sampler;

@group(1) @binding(4) var<uniform> x_3451 : LightCookies;

@group(0) @binding(4) var x_MainLightCookieTexture : texture_2d<f32>;

@group(0) @binding(12) var sampler_MainLightCookieTexture : sampler;

@group(0) @binding(0) var unity_SpecCube0 : texture_cube<f32>;

@group(0) @binding(8) var samplerunity_SpecCube0 : sampler;

@group(1) @binding(1) var<uniform> x_3925 : AdditionalLights;

@group(1) @binding(5) var<uniform> x_4034 : AdditionalLightsCookies;

@group(0) @binding(5) var x_AdditionalLightsCookieAtlasTexture : texture_2d<f32>;

@group(0) @binding(13) var sampler_AdditionalLightsCookieAtlasTexture : sampler;

var<private> SV_Target0 : vec4<f32>;

var<private> SV_Target1 : vec4<f32>;

fn int_bitfieldInsert_i1_i1_i1_i1_(base : ptr<function, i32>, insert : ptr<function, i32>, offset_1 : ptr<function, i32>, bits : ptr<function, i32>) -> i32 {
  var mask : u32;
  let x_19 : i32 = *(bits);
  let x_23 : i32 = *(offset_1);
  mask = (~((4294967295u << bitcast<u32>(x_19))) << bitcast<u32>(x_23));
  let x_26 : i32 = *(base);
  let x_28 : u32 = mask;
  let x_31 : i32 = *(insert);
  let x_33 : i32 = *(offset_1);
  let x_36 : u32 = mask;
  return bitcast<i32>(((bitcast<u32>(x_26) & ~(x_28)) | ((bitcast<u32>(x_31) << bitcast<u32>(x_33)) & x_36)));
}

fn main_1() {
  var hlslcc_FragCoord : vec4<f32>;
  var u_xlat0 : vec3<f32>;
  var u_xlatb22 : vec2<bool>;
  var u_xlat22 : vec3<f32>;
  var u_xlat1 : vec3<f32>;
  var u_xlat2 : vec4<f32>;
  var u_xlat3 : vec4<f32>;
  var u_xlatb0 : bool;
  var u_xlat4 : vec3<f32>;
  var u_xlat67 : f32;
  var u_xlat5 : vec3<f32>;
  var x_186 : f32;
  var x_199 : f32;
  var x_211 : f32;
  var u_xlat6 : vec4<f32>;
  var u_xlat7 : vec3<f32>;
  var u_xlat8 : vec4<f32>;
  var u_xlat9 : vec4<f32>;
  var u_xlat30 : vec3<f32>;
  var u_xlat10 : vec4<f32>;
  var u_xlatb2 : vec4<bool>;
  var u_xlatu0 : u32;
  var u_xlati0 : i32;
  var u_xlatb67 : bool;
  var txVec0 : vec3<f32>;
  var txVec1 : vec3<f32>;
  var txVec2 : vec3<f32>;
  var txVec3 : vec3<f32>;
  var u_xlatb68 : bool;
  var u_xlat47 : vec2<f32>;
  var u_xlat54 : vec2<f32>;
  var u_xlat11 : vec4<f32>;
  var u_xlat12 : vec4<f32>;
  var u_xlat13 : vec4<f32>;
  var u_xlat14 : vec4<f32>;
  var u_xlat15 : vec4<f32>;
  var u_xlat16 : vec4<f32>;
  var u_xlat68 : f32;
  var txVec4 : vec3<f32>;
  var txVec5 : vec3<f32>;
  var u_xlat25 : f32;
  var txVec6 : vec3<f32>;
  var txVec7 : vec3<f32>;
  var txVec8 : vec3<f32>;
  var txVec9 : vec3<f32>;
  var txVec10 : vec3<f32>;
  var txVec11 : vec3<f32>;
  var txVec12 : vec3<f32>;
  var u_xlat31 : vec3<f32>;
  var u_xlat17 : vec4<f32>;
  var u_xlat18 : vec4<f32>;
  var u_xlat32 : vec2<f32>;
  var u_xlat60 : vec2<f32>;
  var u_xlat55 : vec2<f32>;
  var u_xlat19 : vec4<f32>;
  var u_xlat20 : vec4<f32>;
  var u_xlat21 : vec4<f32>;
  var txVec13 : vec3<f32>;
  var txVec14 : vec3<f32>;
  var u_xlat70 : f32;
  var txVec15 : vec3<f32>;
  var txVec16 : vec3<f32>;
  var txVec17 : vec3<f32>;
  var txVec18 : vec3<f32>;
  var txVec19 : vec3<f32>;
  var txVec20 : vec3<f32>;
  var txVec21 : vec3<f32>;
  var txVec22 : vec3<f32>;
  var txVec23 : vec3<f32>;
  var txVec24 : vec3<f32>;
  var txVec25 : vec3<f32>;
  var txVec26 : vec3<f32>;
  var txVec27 : vec3<f32>;
  var txVec28 : vec3<f32>;
  var txVec29 : vec3<f32>;
  var u_xlatb3 : bool;
  var u_xlatb25 : bool;
  var u_xlat23 : vec3<f32>;
  var x_1879 : f32;
  var u_xlatu4 : vec3<u32>;
  var u_xlatu47 : u32;
  var u_xlatu69 : u32;
  var u_xlati47 : i32;
  var param : i32;
  var param_1 : i32;
  var param_2 : i32;
  var param_3 : i32;
  var u_xlat69 : f32;
  var x_2001 : f32;
  var u_xlatb47 : vec2<bool>;
  var x_2057 : f32;
  var u_xlat71 : f32;
  var u_xlat28 : f32;
  var u_xlat50 : f32;
  var txVec30 : vec3<f32>;
  var txVec31 : vec3<f32>;
  var txVec32 : vec3<f32>;
  var txVec33 : vec3<f32>;
  var u_xlatb72 : bool;
  var u_xlat52 : vec2<f32>;
  var u_xlat72 : f32;
  var txVec34 : vec3<f32>;
  var u_xlat73 : f32;
  var txVec35 : vec3<f32>;
  var txVec36 : vec3<f32>;
  var txVec37 : vec3<f32>;
  var txVec38 : vec3<f32>;
  var txVec39 : vec3<f32>;
  var txVec40 : vec3<f32>;
  var txVec41 : vec3<f32>;
  var txVec42 : vec3<f32>;
  var txVec43 : vec3<f32>;
  var txVec44 : vec3<f32>;
  var txVec45 : vec3<f32>;
  var txVec46 : vec3<f32>;
  var txVec47 : vec3<f32>;
  var txVec48 : vec3<f32>;
  var txVec49 : vec3<f32>;
  var txVec50 : vec3<f32>;
  var txVec51 : vec3<f32>;
  var txVec52 : vec3<f32>;
  var txVec53 : vec3<f32>;
  var txVec54 : vec3<f32>;
  var txVec55 : vec3<f32>;
  var txVec56 : vec3<f32>;
  var txVec57 : vec3<f32>;
  var txVec58 : vec3<f32>;
  var txVec59 : vec3<f32>;
  var x_3400 : f32;
  var u_xlat24 : f32;
  var u_xlatb8 : vec2<bool>;
  var x_3534 : f32;
  var x_3545 : vec3<f32>;
  var u_xlatu_loop_1 : u32;
  var u_xlatu71 : u32;
  var u_xlati72 : i32;
  var indexable : array<vec4<u32>, 4u>;
  var u_xlat74 : f32;
  var u_xlatu74 : u32;
  var u_xlati75 : i32;
  var u_xlati74 : i32;
  var u_xlati76 : i32;
  var u_xlatb74 : bool;
  var u_xlatb55 : vec2<bool>;
  var x_4326 : f32;
  var x_4339 : f32;
  var x_4391 : f32;
  var x_4402 : vec3<f32>;
  var u_xlat_precise_vec4 : vec4<f32>;
  var u_xlat_precise_ivec4 : vec4<i32>;
  var u_xlat_precise_bvec4 : vec4<bool>;
  var u_xlat_precise_uvec4 : vec4<u32>;
  let x_49 : vec4<f32> = gl_FragCoord;
  let x_50 : vec3<f32> = vec3<f32>(x_49.x, x_49.y, x_49.z);
  let x_55 : f32 = gl_FragCoord.w;
  hlslcc_FragCoord = vec4<f32>(x_50.x, x_50.y, x_50.z, (1.0f / x_55));
  let x_65 : vec3<f32> = vs_INTERP1;
  let x_66 : vec3<f32> = vs_INTERP1;
  u_xlat0.x = dot(x_65, x_66);
  let x_72 : f32 = u_xlat0.x;
  u_xlat0.x = sqrt(x_72);
  let x_76 : f32 = u_xlat0.x;
  u_xlat0.x = (1.0f / x_76);
  let x_86 : f32 = vs_INTERP2.w;
  u_xlatb22.x = (0.0f < x_86);
  let x_99 : f32 = x_95.unity_WorldTransformParams.w;
  u_xlatb22.y = (x_99 >= 0.0f);
  let x_105 : bool = u_xlatb22.x;
  u_xlat22.x = select(-1.0f, 1.0f, x_105);
  let x_110 : bool = u_xlatb22.y;
  u_xlat22.y = select(-1.0f, 1.0f, x_110);
  let x_114 : f32 = u_xlat22.y;
  let x_116 : f32 = u_xlat22.x;
  u_xlat22.x = (x_114 * x_116);
  let x_120 : vec3<f32> = vs_INTERP1;
  let x_122 : vec4<f32> = vs_INTERP2;
  u_xlat1 = (vec3<f32>(x_120.z, x_120.x, x_120.y) * vec3<f32>(x_122.y, x_122.z, x_122.x));
  let x_125 : vec3<f32> = vs_INTERP1;
  let x_127 : vec4<f32> = vs_INTERP2;
  let x_130 : vec3<f32> = u_xlat1;
  u_xlat1 = ((vec3<f32>(x_125.y, x_125.z, x_125.x) * vec3<f32>(x_127.z, x_127.x, x_127.y)) + -(x_130));
  let x_133 : vec3<f32> = u_xlat22;
  let x_135 : vec3<f32> = u_xlat1;
  u_xlat22 = (vec3<f32>(x_133.x, x_133.x, x_133.x) * x_135);
  let x_137 : vec3<f32> = u_xlat0;
  let x_139 : vec3<f32> = vs_INTERP1;
  u_xlat1 = (vec3<f32>(x_137.x, x_137.x, x_137.x) * x_139);
  let x_142 : vec3<f32> = u_xlat0;
  let x_144 : vec4<f32> = vs_INTERP2;
  let x_146 : vec3<f32> = (vec3<f32>(x_142.x, x_142.x, x_142.x) * vec3<f32>(x_144.x, x_144.y, x_144.z));
  let x_147 : vec4<f32> = u_xlat2;
  u_xlat2 = vec4<f32>(x_146.x, x_146.y, x_146.z, x_147.w);
  let x_150 : vec3<f32> = u_xlat22;
  let x_151 : vec3<f32> = u_xlat0;
  let x_153 : vec3<f32> = (x_150 * vec3<f32>(x_151.x, x_151.x, x_151.x));
  let x_154 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_153.x, x_153.y, x_153.z, x_154.w);
  let x_163 : f32 = x_160.unity_OrthoParams.w;
  u_xlatb0 = (x_163 == 0.0f);
  let x_167 : vec3<f32> = vs_INTERP0;
  let x_172 : vec3<f32> = x_160.x_WorldSpaceCameraPos;
  u_xlat4 = (-(x_167) + x_172);
  let x_175 : vec3<f32> = u_xlat4;
  let x_176 : vec3<f32> = u_xlat4;
  u_xlat67 = dot(x_175, x_176);
  let x_178 : f32 = u_xlat67;
  u_xlat67 = inverseSqrt(x_178);
  let x_180 : f32 = u_xlat67;
  let x_182 : vec3<f32> = u_xlat4;
  u_xlat4 = (vec3<f32>(x_180, x_180, x_180) * x_182);
  let x_185 : bool = u_xlatb0;
  if (x_185) {
    let x_190 : f32 = u_xlat4.x;
    x_186 = x_190;
  } else {
    let x_195 : f32 = x_160.unity_MatrixV[0i].z;
    x_186 = x_195;
  }
  let x_196 : f32 = x_186;
  u_xlat5.x = x_196;
  let x_198 : bool = u_xlatb0;
  if (x_198) {
    let x_203 : f32 = u_xlat4.y;
    x_199 = x_203;
  } else {
    let x_207 : f32 = x_160.unity_MatrixV[1i].z;
    x_199 = x_207;
  }
  let x_208 : f32 = x_199;
  u_xlat5.y = x_208;
  let x_210 : bool = u_xlatb0;
  if (x_210) {
    let x_215 : f32 = u_xlat4.z;
    x_211 = x_215;
  } else {
    let x_219 : f32 = x_160.unity_MatrixV[2i].z;
    x_211 = x_219;
  }
  let x_220 : f32 = x_211;
  u_xlat5.z = x_220;
  let x_222 : vec3<f32> = u_xlat5;
  let x_226 : vec4<f32> = x_95.unity_WorldToObject[1i];
  u_xlat4 = (vec3<f32>(x_222.y, x_222.y, x_222.y) * vec3<f32>(x_226.x, x_226.y, x_226.z));
  let x_230 : vec4<f32> = x_95.unity_WorldToObject[0i];
  let x_232 : vec3<f32> = u_xlat5;
  let x_235 : vec3<f32> = u_xlat4;
  u_xlat4 = ((vec3<f32>(x_230.x, x_230.y, x_230.z) * vec3<f32>(x_232.x, x_232.x, x_232.x)) + x_235);
  let x_238 : vec4<f32> = x_95.unity_WorldToObject[2i];
  let x_240 : vec3<f32> = u_xlat5;
  let x_243 : vec3<f32> = u_xlat4;
  u_xlat4 = ((vec3<f32>(x_238.x, x_238.y, x_238.z) * vec3<f32>(x_240.z, x_240.z, x_240.z)) + x_243);
  let x_245 : vec3<f32> = u_xlat4;
  let x_246 : vec3<f32> = u_xlat4;
  u_xlat0.x = dot(x_245, x_246);
  let x_250 : f32 = u_xlat0.x;
  u_xlat0.x = inverseSqrt(x_250);
  let x_253 : vec3<f32> = u_xlat0;
  let x_255 : vec3<f32> = u_xlat4;
  u_xlat4 = (vec3<f32>(x_253.x, x_253.x, x_253.x) * x_255);
  let x_269 : vec4<f32> = vs_INTERP3;
  let x_272 : f32 = x_160.x_GlobalMipBias.x;
  let x_273 : vec4<f32> = textureSampleBias(Texture2D_B222E8F, samplerTexture2D_B222E8F, vec2<f32>(x_269.x, x_269.y), x_272);
  u_xlat6 = x_273;
  let x_275 : vec4<f32> = u_xlat6;
  let x_281 : vec4<f32> = x_279.Color_C30C7CA3;
  u_xlat7 = (vec3<f32>(x_275.x, x_275.y, x_275.z) * vec3<f32>(x_281.x, x_281.y, x_281.z));
  let x_290 : vec4<f32> = vs_INTERP3;
  let x_293 : f32 = x_160.x_GlobalMipBias.x;
  let x_294 : vec4<f32> = textureSampleBias(Texture2D_D9BFD5F1, samplerTexture2D_D9BFD5F1, vec2<f32>(x_290.x, x_290.y), x_293);
  u_xlat8 = vec4<f32>(x_294.w, x_294.x, x_294.y, x_294.z);
  let x_297 : vec4<f32> = u_xlat8;
  u_xlat9 = ((vec4<f32>(x_297.y, x_297.z, x_297.w, x_297.x) * vec4<f32>(2.0f, 2.0f, 2.0f, 2.0f)) + vec4<f32>(-1.0f, -1.0f, -1.0f, -1.0f));
  let x_304 : vec4<f32> = u_xlat9;
  let x_305 : vec4<f32> = u_xlat9;
  u_xlat0.x = dot(x_304, x_305);
  let x_309 : f32 = u_xlat0.x;
  u_xlat0.x = inverseSqrt(x_309);
  let x_313 : vec3<f32> = u_xlat0;
  let x_315 : vec4<f32> = u_xlat9;
  u_xlat30 = (vec3<f32>(x_313.x, x_313.x, x_313.x) * vec3<f32>(x_315.x, x_315.y, x_315.z));
  let x_320 : f32 = vs_INTERP4.y;
  u_xlat0.x = (x_320 * 200.0f);
  let x_325 : f32 = u_xlat0.x;
  u_xlat0.x = min(x_325, 1.0f);
  let x_328 : vec3<f32> = u_xlat0;
  let x_330 : vec4<f32> = u_xlat6;
  let x_332 : vec3<f32> = (vec3<f32>(x_328.x, x_328.x, x_328.x) * vec3<f32>(x_330.x, x_330.y, x_330.z));
  let x_333 : vec4<f32> = u_xlat6;
  u_xlat6 = vec4<f32>(x_332.x, x_332.y, x_332.z, x_333.w);
  let x_335 : vec4<f32> = u_xlat3;
  let x_337 : vec3<f32> = u_xlat30;
  let x_339 : vec3<f32> = (vec3<f32>(x_335.x, x_335.y, x_335.z) * vec3<f32>(x_337.y, x_337.y, x_337.y));
  let x_340 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_339.x, x_339.y, x_339.z, x_340.w);
  let x_342 : vec3<f32> = u_xlat30;
  let x_344 : vec4<f32> = u_xlat2;
  let x_347 : vec4<f32> = u_xlat3;
  let x_349 : vec3<f32> = ((vec3<f32>(x_342.x, x_342.x, x_342.x) * vec3<f32>(x_344.x, x_344.y, x_344.z)) + vec3<f32>(x_347.x, x_347.y, x_347.z));
  let x_350 : vec4<f32> = u_xlat2;
  u_xlat2 = vec4<f32>(x_349.x, x_349.y, x_349.z, x_350.w);
  let x_352 : vec3<f32> = u_xlat30;
  let x_354 : vec3<f32> = u_xlat1;
  let x_356 : vec4<f32> = u_xlat2;
  u_xlat1 = ((vec3<f32>(x_352.z, x_352.z, x_352.z) * x_354) + vec3<f32>(x_356.x, x_356.y, x_356.z));
  let x_359 : vec3<f32> = u_xlat1;
  let x_360 : vec3<f32> = u_xlat1;
  u_xlat0.x = dot(x_359, x_360);
  let x_364 : f32 = u_xlat0.x;
  u_xlat0.x = max(x_364, 1.17549435e-37f);
  let x_369 : f32 = u_xlat0.x;
  u_xlat0.x = inverseSqrt(x_369);
  let x_372 : vec3<f32> = u_xlat0;
  let x_374 : vec3<f32> = u_xlat1;
  u_xlat1 = (vec3<f32>(x_372.x, x_372.x, x_372.x) * x_374);
  let x_376 : vec3<f32> = vs_INTERP0;
  let x_383 : vec4<f32> = x_381.x_CascadeShadowSplitSpheres0;
  let x_386 : vec3<f32> = (x_376 + -(vec3<f32>(x_383.x, x_383.y, x_383.z)));
  let x_387 : vec4<f32> = u_xlat2;
  u_xlat2 = vec4<f32>(x_386.x, x_386.y, x_386.z, x_387.w);
  let x_389 : vec3<f32> = vs_INTERP0;
  let x_391 : vec4<f32> = x_381.x_CascadeShadowSplitSpheres1;
  let x_394 : vec3<f32> = (x_389 + -(vec3<f32>(x_391.x, x_391.y, x_391.z)));
  let x_395 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_394.x, x_394.y, x_394.z, x_395.w);
  let x_397 : vec3<f32> = vs_INTERP0;
  let x_399 : vec4<f32> = x_381.x_CascadeShadowSplitSpheres2;
  let x_402 : vec3<f32> = (x_397 + -(vec3<f32>(x_399.x, x_399.y, x_399.z)));
  let x_403 : vec4<f32> = u_xlat9;
  u_xlat9 = vec4<f32>(x_402.x, x_402.y, x_402.z, x_403.w);
  let x_406 : vec3<f32> = vs_INTERP0;
  let x_409 : vec4<f32> = x_381.x_CascadeShadowSplitSpheres3;
  let x_412 : vec3<f32> = (x_406 + -(vec3<f32>(x_409.x, x_409.y, x_409.z)));
  let x_413 : vec4<f32> = u_xlat10;
  u_xlat10 = vec4<f32>(x_412.x, x_412.y, x_412.z, x_413.w);
  let x_415 : vec4<f32> = u_xlat2;
  let x_417 : vec4<f32> = u_xlat2;
  u_xlat2.x = dot(vec3<f32>(x_415.x, x_415.y, x_415.z), vec3<f32>(x_417.x, x_417.y, x_417.z));
  let x_421 : vec4<f32> = u_xlat3;
  let x_423 : vec4<f32> = u_xlat3;
  u_xlat2.y = dot(vec3<f32>(x_421.x, x_421.y, x_421.z), vec3<f32>(x_423.x, x_423.y, x_423.z));
  let x_427 : vec4<f32> = u_xlat9;
  let x_429 : vec4<f32> = u_xlat9;
  u_xlat2.z = dot(vec3<f32>(x_427.x, x_427.y, x_427.z), vec3<f32>(x_429.x, x_429.y, x_429.z));
  let x_433 : vec4<f32> = u_xlat10;
  let x_435 : vec4<f32> = u_xlat10;
  u_xlat2.w = dot(vec3<f32>(x_433.x, x_433.y, x_433.z), vec3<f32>(x_435.x, x_435.y, x_435.z));
  let x_442 : vec4<f32> = u_xlat2;
  let x_445 : vec4<f32> = x_381.x_CascadeShadowSplitSphereRadii;
  u_xlatb2 = (x_442 < x_445);
  let x_448 : bool = u_xlatb2.x;
  u_xlat3.x = select(0.0f, 1.0f, x_448);
  let x_452 : bool = u_xlatb2.y;
  u_xlat3.y = select(0.0f, 1.0f, x_452);
  let x_456 : bool = u_xlatb2.z;
  u_xlat3.z = select(0.0f, 1.0f, x_456);
  let x_460 : bool = u_xlatb2.w;
  u_xlat3.w = select(0.0f, 1.0f, x_460);
  let x_464 : bool = u_xlatb2.x;
  u_xlat2.x = select(-0.0f, -1.0f, x_464);
  let x_469 : bool = u_xlatb2.y;
  u_xlat2.y = select(-0.0f, -1.0f, x_469);
  let x_473 : bool = u_xlatb2.z;
  u_xlat2.z = select(-0.0f, -1.0f, x_473);
  let x_476 : vec4<f32> = u_xlat2;
  let x_478 : vec4<f32> = u_xlat3;
  let x_480 : vec3<f32> = (vec3<f32>(x_476.x, x_476.y, x_476.z) + vec3<f32>(x_478.y, x_478.z, x_478.w));
  let x_481 : vec4<f32> = u_xlat2;
  u_xlat2 = vec4<f32>(x_480.x, x_480.y, x_480.z, x_481.w);
  let x_483 : vec4<f32> = u_xlat2;
  let x_486 : vec3<f32> = max(vec3<f32>(x_483.x, x_483.y, x_483.z), vec3<f32>(0.0f, 0.0f, 0.0f));
  let x_487 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_487.x, x_486.x, x_486.y, x_486.z);
  let x_489 : vec4<f32> = u_xlat3;
  u_xlat0.x = dot(x_489, vec4<f32>(4.0f, 3.0f, 2.0f, 1.0f));
  let x_496 : f32 = u_xlat0.x;
  u_xlat0.x = (-(x_496) + 4.0f);
  let x_502 : f32 = u_xlat0.x;
  u_xlatu0 = u32(x_502);
  let x_505 : u32 = u_xlatu0;
  u_xlati0 = (bitcast<i32>(x_505) << bitcast<u32>(2i));
  let x_508 : vec3<f32> = vs_INTERP0;
  let x_510 : i32 = u_xlati0;
  let x_513 : i32 = u_xlati0;
  let x_517 : vec4<f32> = x_381.x_MainLightWorldToShadow[((x_510 + 1i) / 4i)][((x_513 + 1i) % 4i)];
  let x_519 : vec3<f32> = (vec3<f32>(x_508.y, x_508.y, x_508.y) * vec3<f32>(x_517.x, x_517.y, x_517.z));
  let x_520 : vec4<f32> = u_xlat2;
  u_xlat2 = vec4<f32>(x_519.x, x_519.y, x_519.z, x_520.w);
  let x_522 : i32 = u_xlati0;
  let x_524 : i32 = u_xlati0;
  let x_527 : vec4<f32> = x_381.x_MainLightWorldToShadow[(x_522 / 4i)][(x_524 % 4i)];
  let x_529 : vec3<f32> = vs_INTERP0;
  let x_532 : vec4<f32> = u_xlat2;
  let x_534 : vec3<f32> = ((vec3<f32>(x_527.x, x_527.y, x_527.z) * vec3<f32>(x_529.x, x_529.x, x_529.x)) + vec3<f32>(x_532.x, x_532.y, x_532.z));
  let x_535 : vec4<f32> = u_xlat2;
  u_xlat2 = vec4<f32>(x_534.x, x_534.y, x_534.z, x_535.w);
  let x_537 : i32 = u_xlati0;
  let x_540 : i32 = u_xlati0;
  let x_544 : vec4<f32> = x_381.x_MainLightWorldToShadow[((x_537 + 2i) / 4i)][((x_540 + 2i) % 4i)];
  let x_546 : vec3<f32> = vs_INTERP0;
  let x_549 : vec4<f32> = u_xlat2;
  let x_551 : vec3<f32> = ((vec3<f32>(x_544.x, x_544.y, x_544.z) * vec3<f32>(x_546.z, x_546.z, x_546.z)) + vec3<f32>(x_549.x, x_549.y, x_549.z));
  let x_552 : vec4<f32> = u_xlat2;
  u_xlat2 = vec4<f32>(x_551.x, x_551.y, x_551.z, x_552.w);
  let x_554 : vec4<f32> = u_xlat2;
  let x_556 : i32 = u_xlati0;
  let x_559 : i32 = u_xlati0;
  let x_563 : vec4<f32> = x_381.x_MainLightWorldToShadow[((x_556 + 3i) / 4i)][((x_559 + 3i) % 4i)];
  let x_565 : vec3<f32> = (vec3<f32>(x_554.x, x_554.y, x_554.z) + vec3<f32>(x_563.x, x_563.y, x_563.z));
  let x_566 : vec4<f32> = u_xlat2;
  u_xlat2 = vec4<f32>(x_565.x, x_565.y, x_565.z, x_566.w);
  let x_570 : f32 = x_381.x_MainLightShadowParams.y;
  u_xlatb0 = (0.0f < x_570);
  let x_572 : bool = u_xlatb0;
  if (x_572) {
    let x_577 : f32 = x_381.x_MainLightShadowParams.y;
    u_xlatb67 = (x_577 == 1.0f);
    let x_579 : bool = u_xlatb67;
    if (x_579) {
      let x_582 : vec4<f32> = u_xlat2;
      let x_586 : vec4<f32> = x_381.x_MainLightShadowOffset0;
      u_xlat3 = (vec4<f32>(x_582.x, x_582.y, x_582.x, x_582.y) + x_586);
      let x_589 : vec4<f32> = u_xlat3;
      let x_590 : vec2<f32> = vec2<f32>(x_589.x, x_589.y);
      let x_592 : f32 = u_xlat2.z;
      txVec0 = vec3<f32>(x_590.x, x_590.y, x_592);
      let x_604 : vec3<f32> = txVec0;
      let x_606 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_604.xy, x_604.z);
      u_xlat9.x = x_606;
      let x_609 : vec4<f32> = u_xlat3;
      let x_610 : vec2<f32> = vec2<f32>(x_609.z, x_609.w);
      let x_612 : f32 = u_xlat2.z;
      txVec1 = vec3<f32>(x_610.x, x_610.y, x_612);
      let x_619 : vec3<f32> = txVec1;
      let x_621 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_619.xy, x_619.z);
      u_xlat9.y = x_621;
      let x_623 : vec4<f32> = u_xlat2;
      let x_627 : vec4<f32> = x_381.x_MainLightShadowOffset1;
      u_xlat3 = (vec4<f32>(x_623.x, x_623.y, x_623.x, x_623.y) + x_627);
      let x_630 : vec4<f32> = u_xlat3;
      let x_631 : vec2<f32> = vec2<f32>(x_630.x, x_630.y);
      let x_633 : f32 = u_xlat2.z;
      txVec2 = vec3<f32>(x_631.x, x_631.y, x_633);
      let x_640 : vec3<f32> = txVec2;
      let x_642 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_640.xy, x_640.z);
      u_xlat9.z = x_642;
      let x_645 : vec4<f32> = u_xlat3;
      let x_646 : vec2<f32> = vec2<f32>(x_645.z, x_645.w);
      let x_648 : f32 = u_xlat2.z;
      txVec3 = vec3<f32>(x_646.x, x_646.y, x_648);
      let x_655 : vec3<f32> = txVec3;
      let x_657 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_655.xy, x_655.z);
      u_xlat9.w = x_657;
      let x_659 : vec4<f32> = u_xlat9;
      u_xlat67 = dot(x_659, vec4<f32>(0.25f, 0.25f, 0.25f, 0.25f));
    } else {
      let x_666 : f32 = x_381.x_MainLightShadowParams.y;
      u_xlatb68 = (x_666 == 2.0f);
      let x_668 : bool = u_xlatb68;
      if (x_668) {
        let x_671 : vec4<f32> = u_xlat2;
        let x_674 : vec4<f32> = x_381.x_MainLightShadowmapSize;
        let x_679 : vec2<f32> = ((vec2<f32>(x_671.x, x_671.y) * vec2<f32>(x_674.z, x_674.w)) + vec2<f32>(0.5f, 0.5f));
        let x_680 : vec4<f32> = u_xlat3;
        u_xlat3 = vec4<f32>(x_679.x, x_679.y, x_680.z, x_680.w);
        let x_682 : vec4<f32> = u_xlat3;
        let x_684 : vec2<f32> = floor(vec2<f32>(x_682.x, x_682.y));
        let x_685 : vec4<f32> = u_xlat3;
        u_xlat3 = vec4<f32>(x_684.x, x_684.y, x_685.z, x_685.w);
        let x_689 : vec4<f32> = u_xlat2;
        let x_692 : vec4<f32> = x_381.x_MainLightShadowmapSize;
        let x_695 : vec4<f32> = u_xlat3;
        u_xlat47 = ((vec2<f32>(x_689.x, x_689.y) * vec2<f32>(x_692.z, x_692.w)) + -(vec2<f32>(x_695.x, x_695.y)));
        let x_699 : vec2<f32> = u_xlat47;
        u_xlat9 = (vec4<f32>(x_699.x, x_699.x, x_699.y, x_699.y) + vec4<f32>(0.5f, 1.0f, 0.5f, 1.0f));
        let x_703 : vec4<f32> = u_xlat9;
        let x_705 : vec4<f32> = u_xlat9;
        u_xlat10 = (vec4<f32>(x_703.x, x_703.x, x_703.z, x_703.z) * vec4<f32>(x_705.x, x_705.x, x_705.z, x_705.z));
        let x_708 : vec4<f32> = u_xlat10;
        let x_712 : vec2<f32> = (vec2<f32>(x_708.y, x_708.w) * vec2<f32>(0.079999998f, 0.079999998f));
        let x_713 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_712.x, x_713.y, x_712.y, x_713.w);
        let x_715 : vec4<f32> = u_xlat10;
        let x_718 : vec2<f32> = u_xlat47;
        let x_720 : vec2<f32> = ((vec2<f32>(x_715.x, x_715.z) * vec2<f32>(0.5f, 0.5f)) + -(x_718));
        let x_721 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_720.x, x_720.y, x_721.z, x_721.w);
        let x_724 : vec2<f32> = u_xlat47;
        u_xlat54 = (-(x_724) + vec2<f32>(1.0f, 1.0f));
        let x_729 : vec2<f32> = u_xlat47;
        let x_731 : vec2<f32> = min(x_729, vec2<f32>(0.0f, 0.0f));
        let x_732 : vec4<f32> = u_xlat11;
        u_xlat11 = vec4<f32>(x_731.x, x_731.y, x_732.z, x_732.w);
        let x_734 : vec4<f32> = u_xlat11;
        let x_737 : vec4<f32> = u_xlat11;
        let x_740 : vec2<f32> = u_xlat54;
        let x_741 : vec2<f32> = ((-(vec2<f32>(x_734.x, x_734.y)) * vec2<f32>(x_737.x, x_737.y)) + x_740);
        let x_742 : vec4<f32> = u_xlat11;
        u_xlat11 = vec4<f32>(x_741.x, x_741.y, x_742.z, x_742.w);
        let x_744 : vec2<f32> = u_xlat47;
        u_xlat47 = max(x_744, vec2<f32>(0.0f, 0.0f));
        let x_746 : vec2<f32> = u_xlat47;
        let x_748 : vec2<f32> = u_xlat47;
        let x_750 : vec4<f32> = u_xlat9;
        u_xlat47 = ((-(x_746) * x_748) + vec2<f32>(x_750.y, x_750.w));
        let x_753 : vec4<f32> = u_xlat11;
        let x_755 : vec2<f32> = (vec2<f32>(x_753.x, x_753.y) + vec2<f32>(1.0f, 1.0f));
        let x_756 : vec4<f32> = u_xlat11;
        u_xlat11 = vec4<f32>(x_755.x, x_755.y, x_756.z, x_756.w);
        let x_758 : vec2<f32> = u_xlat47;
        u_xlat47 = (x_758 + vec2<f32>(1.0f, 1.0f));
        let x_761 : vec4<f32> = u_xlat10;
        let x_765 : vec2<f32> = (vec2<f32>(x_761.x, x_761.y) * vec2<f32>(0.159999996f, 0.159999996f));
        let x_766 : vec4<f32> = u_xlat12;
        u_xlat12 = vec4<f32>(x_765.x, x_765.y, x_766.z, x_766.w);
        let x_768 : vec2<f32> = u_xlat54;
        let x_769 : vec2<f32> = (x_768 * vec2<f32>(0.159999996f, 0.159999996f));
        let x_770 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_769.x, x_769.y, x_770.z, x_770.w);
        let x_772 : vec4<f32> = u_xlat11;
        let x_774 : vec2<f32> = (vec2<f32>(x_772.x, x_772.y) * vec2<f32>(0.159999996f, 0.159999996f));
        let x_775 : vec4<f32> = u_xlat11;
        u_xlat11 = vec4<f32>(x_774.x, x_774.y, x_775.z, x_775.w);
        let x_778 : vec2<f32> = u_xlat47;
        let x_779 : vec2<f32> = (x_778 * vec2<f32>(0.159999996f, 0.159999996f));
        let x_780 : vec4<f32> = u_xlat13;
        u_xlat13 = vec4<f32>(x_779.x, x_779.y, x_780.z, x_780.w);
        let x_782 : vec4<f32> = u_xlat9;
        u_xlat47 = (vec2<f32>(x_782.y, x_782.w) * vec2<f32>(0.159999996f, 0.159999996f));
        let x_786 : f32 = u_xlat11.x;
        u_xlat12.z = x_786;
        let x_789 : f32 = u_xlat47.x;
        u_xlat12.w = x_789;
        let x_792 : f32 = u_xlat13.x;
        u_xlat10.z = x_792;
        let x_795 : f32 = u_xlat9.x;
        u_xlat10.w = x_795;
        let x_798 : vec4<f32> = u_xlat10;
        let x_800 : vec4<f32> = u_xlat12;
        u_xlat14 = (vec4<f32>(x_798.z, x_798.w, x_798.x, x_798.z) + vec4<f32>(x_800.z, x_800.w, x_800.x, x_800.z));
        let x_804 : f32 = u_xlat12.y;
        u_xlat11.z = x_804;
        let x_807 : f32 = u_xlat47.y;
        u_xlat11.w = x_807;
        let x_810 : f32 = u_xlat10.y;
        u_xlat13.z = x_810;
        let x_813 : f32 = u_xlat9.z;
        u_xlat13.w = x_813;
        let x_815 : vec4<f32> = u_xlat11;
        let x_817 : vec4<f32> = u_xlat13;
        let x_819 : vec3<f32> = (vec3<f32>(x_815.z, x_815.y, x_815.w) + vec3<f32>(x_817.z, x_817.y, x_817.w));
        let x_820 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_819.x, x_819.y, x_819.z, x_820.w);
        let x_822 : vec4<f32> = u_xlat10;
        let x_824 : vec4<f32> = u_xlat14;
        let x_826 : vec3<f32> = (vec3<f32>(x_822.x, x_822.z, x_822.w) / vec3<f32>(x_824.z, x_824.w, x_824.y));
        let x_827 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_826.x, x_826.y, x_826.z, x_827.w);
        let x_829 : vec4<f32> = u_xlat10;
        let x_835 : vec3<f32> = (vec3<f32>(x_829.x, x_829.y, x_829.z) + vec3<f32>(-2.5f, -0.5f, 1.5f));
        let x_836 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_835.x, x_835.y, x_835.z, x_836.w);
        let x_838 : vec4<f32> = u_xlat13;
        let x_840 : vec4<f32> = u_xlat9;
        let x_842 : vec3<f32> = (vec3<f32>(x_838.z, x_838.y, x_838.w) / vec3<f32>(x_840.x, x_840.y, x_840.z));
        let x_843 : vec4<f32> = u_xlat11;
        u_xlat11 = vec4<f32>(x_842.x, x_842.y, x_842.z, x_843.w);
        let x_845 : vec4<f32> = u_xlat11;
        let x_847 : vec3<f32> = (vec3<f32>(x_845.x, x_845.y, x_845.z) + vec3<f32>(-2.5f, -0.5f, 1.5f));
        let x_848 : vec4<f32> = u_xlat11;
        u_xlat11 = vec4<f32>(x_847.x, x_847.y, x_847.z, x_848.w);
        let x_850 : vec4<f32> = u_xlat10;
        let x_853 : vec4<f32> = x_381.x_MainLightShadowmapSize;
        let x_855 : vec3<f32> = (vec3<f32>(x_850.y, x_850.x, x_850.z) * vec3<f32>(x_853.x, x_853.x, x_853.x));
        let x_856 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_855.x, x_855.y, x_855.z, x_856.w);
        let x_858 : vec4<f32> = u_xlat11;
        let x_861 : vec4<f32> = x_381.x_MainLightShadowmapSize;
        let x_863 : vec3<f32> = (vec3<f32>(x_858.x, x_858.y, x_858.z) * vec3<f32>(x_861.y, x_861.y, x_861.y));
        let x_864 : vec4<f32> = u_xlat11;
        u_xlat11 = vec4<f32>(x_863.x, x_863.y, x_863.z, x_864.w);
        let x_867 : f32 = u_xlat11.x;
        u_xlat10.w = x_867;
        let x_869 : vec4<f32> = u_xlat3;
        let x_872 : vec4<f32> = x_381.x_MainLightShadowmapSize;
        let x_875 : vec4<f32> = u_xlat10;
        u_xlat12 = ((vec4<f32>(x_869.x, x_869.y, x_869.x, x_869.y) * vec4<f32>(x_872.x, x_872.y, x_872.x, x_872.y)) + vec4<f32>(x_875.y, x_875.w, x_875.x, x_875.w));
        let x_878 : vec4<f32> = u_xlat3;
        let x_881 : vec4<f32> = x_381.x_MainLightShadowmapSize;
        let x_884 : vec4<f32> = u_xlat10;
        u_xlat47 = ((vec2<f32>(x_878.x, x_878.y) * vec2<f32>(x_881.x, x_881.y)) + vec2<f32>(x_884.z, x_884.w));
        let x_888 : f32 = u_xlat10.y;
        u_xlat11.w = x_888;
        let x_890 : vec4<f32> = u_xlat11;
        let x_891 : vec2<f32> = vec2<f32>(x_890.y, x_890.z);
        let x_892 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_892.x, x_891.x, x_892.z, x_891.y);
        let x_894 : vec4<f32> = u_xlat3;
        let x_897 : vec4<f32> = x_381.x_MainLightShadowmapSize;
        let x_900 : vec4<f32> = u_xlat10;
        u_xlat13 = ((vec4<f32>(x_894.x, x_894.y, x_894.x, x_894.y) * vec4<f32>(x_897.x, x_897.y, x_897.x, x_897.y)) + vec4<f32>(x_900.x, x_900.y, x_900.z, x_900.y));
        let x_903 : vec4<f32> = u_xlat3;
        let x_906 : vec4<f32> = x_381.x_MainLightShadowmapSize;
        let x_909 : vec4<f32> = u_xlat11;
        u_xlat11 = ((vec4<f32>(x_903.x, x_903.y, x_903.x, x_903.y) * vec4<f32>(x_906.x, x_906.y, x_906.x, x_906.y)) + vec4<f32>(x_909.w, x_909.y, x_909.w, x_909.z));
        let x_912 : vec4<f32> = u_xlat3;
        let x_915 : vec4<f32> = x_381.x_MainLightShadowmapSize;
        let x_918 : vec4<f32> = u_xlat10;
        u_xlat10 = ((vec4<f32>(x_912.x, x_912.y, x_912.x, x_912.y) * vec4<f32>(x_915.x, x_915.y, x_915.x, x_915.y)) + vec4<f32>(x_918.x, x_918.w, x_918.z, x_918.w));
        let x_922 : vec4<f32> = u_xlat9;
        let x_924 : vec4<f32> = u_xlat14;
        u_xlat15 = (vec4<f32>(x_922.x, x_922.x, x_922.x, x_922.y) * vec4<f32>(x_924.z, x_924.w, x_924.y, x_924.z));
        let x_928 : vec4<f32> = u_xlat9;
        let x_930 : vec4<f32> = u_xlat14;
        u_xlat16 = (vec4<f32>(x_928.y, x_928.y, x_928.z, x_928.z) * x_930);
        let x_934 : f32 = u_xlat9.z;
        let x_936 : f32 = u_xlat14.y;
        u_xlat68 = (x_934 * x_936);
        let x_939 : vec4<f32> = u_xlat12;
        let x_940 : vec2<f32> = vec2<f32>(x_939.x, x_939.y);
        let x_942 : f32 = u_xlat2.z;
        txVec4 = vec3<f32>(x_940.x, x_940.y, x_942);
        let x_949 : vec3<f32> = txVec4;
        let x_951 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_949.xy, x_949.z);
        u_xlat3.x = x_951;
        let x_954 : vec4<f32> = u_xlat12;
        let x_955 : vec2<f32> = vec2<f32>(x_954.z, x_954.w);
        let x_957 : f32 = u_xlat2.z;
        txVec5 = vec3<f32>(x_955.x, x_955.y, x_957);
        let x_965 : vec3<f32> = txVec5;
        let x_967 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_965.xy, x_965.z);
        u_xlat25 = x_967;
        let x_968 : f32 = u_xlat25;
        let x_970 : f32 = u_xlat15.y;
        u_xlat25 = (x_968 * x_970);
        let x_973 : f32 = u_xlat15.x;
        let x_975 : f32 = u_xlat3.x;
        let x_977 : f32 = u_xlat25;
        u_xlat3.x = ((x_973 * x_975) + x_977);
        let x_981 : vec2<f32> = u_xlat47;
        let x_983 : f32 = u_xlat2.z;
        txVec6 = vec3<f32>(x_981.x, x_981.y, x_983);
        let x_990 : vec3<f32> = txVec6;
        let x_992 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_990.xy, x_990.z);
        u_xlat25 = x_992;
        let x_994 : f32 = u_xlat15.z;
        let x_995 : f32 = u_xlat25;
        let x_998 : f32 = u_xlat3.x;
        u_xlat3.x = ((x_994 * x_995) + x_998);
        let x_1002 : vec4<f32> = u_xlat11;
        let x_1003 : vec2<f32> = vec2<f32>(x_1002.x, x_1002.y);
        let x_1005 : f32 = u_xlat2.z;
        txVec7 = vec3<f32>(x_1003.x, x_1003.y, x_1005);
        let x_1012 : vec3<f32> = txVec7;
        let x_1014 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1012.xy, x_1012.z);
        u_xlat25 = x_1014;
        let x_1016 : f32 = u_xlat15.w;
        let x_1017 : f32 = u_xlat25;
        let x_1020 : f32 = u_xlat3.x;
        u_xlat3.x = ((x_1016 * x_1017) + x_1020);
        let x_1024 : vec4<f32> = u_xlat13;
        let x_1025 : vec2<f32> = vec2<f32>(x_1024.x, x_1024.y);
        let x_1027 : f32 = u_xlat2.z;
        txVec8 = vec3<f32>(x_1025.x, x_1025.y, x_1027);
        let x_1034 : vec3<f32> = txVec8;
        let x_1036 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1034.xy, x_1034.z);
        u_xlat25 = x_1036;
        let x_1038 : f32 = u_xlat16.x;
        let x_1039 : f32 = u_xlat25;
        let x_1042 : f32 = u_xlat3.x;
        u_xlat3.x = ((x_1038 * x_1039) + x_1042);
        let x_1046 : vec4<f32> = u_xlat13;
        let x_1047 : vec2<f32> = vec2<f32>(x_1046.z, x_1046.w);
        let x_1049 : f32 = u_xlat2.z;
        txVec9 = vec3<f32>(x_1047.x, x_1047.y, x_1049);
        let x_1056 : vec3<f32> = txVec9;
        let x_1058 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1056.xy, x_1056.z);
        u_xlat25 = x_1058;
        let x_1060 : f32 = u_xlat16.y;
        let x_1061 : f32 = u_xlat25;
        let x_1064 : f32 = u_xlat3.x;
        u_xlat3.x = ((x_1060 * x_1061) + x_1064);
        let x_1068 : vec4<f32> = u_xlat11;
        let x_1069 : vec2<f32> = vec2<f32>(x_1068.z, x_1068.w);
        let x_1071 : f32 = u_xlat2.z;
        txVec10 = vec3<f32>(x_1069.x, x_1069.y, x_1071);
        let x_1078 : vec3<f32> = txVec10;
        let x_1080 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1078.xy, x_1078.z);
        u_xlat25 = x_1080;
        let x_1082 : f32 = u_xlat16.z;
        let x_1083 : f32 = u_xlat25;
        let x_1086 : f32 = u_xlat3.x;
        u_xlat3.x = ((x_1082 * x_1083) + x_1086);
        let x_1090 : vec4<f32> = u_xlat10;
        let x_1091 : vec2<f32> = vec2<f32>(x_1090.x, x_1090.y);
        let x_1093 : f32 = u_xlat2.z;
        txVec11 = vec3<f32>(x_1091.x, x_1091.y, x_1093);
        let x_1100 : vec3<f32> = txVec11;
        let x_1102 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1100.xy, x_1100.z);
        u_xlat25 = x_1102;
        let x_1104 : f32 = u_xlat16.w;
        let x_1105 : f32 = u_xlat25;
        let x_1108 : f32 = u_xlat3.x;
        u_xlat3.x = ((x_1104 * x_1105) + x_1108);
        let x_1112 : vec4<f32> = u_xlat10;
        let x_1113 : vec2<f32> = vec2<f32>(x_1112.z, x_1112.w);
        let x_1115 : f32 = u_xlat2.z;
        txVec12 = vec3<f32>(x_1113.x, x_1113.y, x_1115);
        let x_1122 : vec3<f32> = txVec12;
        let x_1124 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1122.xy, x_1122.z);
        u_xlat25 = x_1124;
        let x_1125 : f32 = u_xlat68;
        let x_1126 : f32 = u_xlat25;
        let x_1129 : f32 = u_xlat3.x;
        u_xlat67 = ((x_1125 * x_1126) + x_1129);
      } else {
        let x_1132 : vec4<f32> = u_xlat2;
        let x_1135 : vec4<f32> = x_381.x_MainLightShadowmapSize;
        let x_1138 : vec2<f32> = ((vec2<f32>(x_1132.x, x_1132.y) * vec2<f32>(x_1135.z, x_1135.w)) + vec2<f32>(0.5f, 0.5f));
        let x_1139 : vec4<f32> = u_xlat3;
        u_xlat3 = vec4<f32>(x_1138.x, x_1138.y, x_1139.z, x_1139.w);
        let x_1141 : vec4<f32> = u_xlat3;
        let x_1143 : vec2<f32> = floor(vec2<f32>(x_1141.x, x_1141.y));
        let x_1144 : vec4<f32> = u_xlat3;
        u_xlat3 = vec4<f32>(x_1143.x, x_1143.y, x_1144.z, x_1144.w);
        let x_1146 : vec4<f32> = u_xlat2;
        let x_1149 : vec4<f32> = x_381.x_MainLightShadowmapSize;
        let x_1152 : vec4<f32> = u_xlat3;
        u_xlat47 = ((vec2<f32>(x_1146.x, x_1146.y) * vec2<f32>(x_1149.z, x_1149.w)) + -(vec2<f32>(x_1152.x, x_1152.y)));
        let x_1156 : vec2<f32> = u_xlat47;
        u_xlat9 = (vec4<f32>(x_1156.x, x_1156.x, x_1156.y, x_1156.y) + vec4<f32>(0.5f, 1.0f, 0.5f, 1.0f));
        let x_1159 : vec4<f32> = u_xlat9;
        let x_1161 : vec4<f32> = u_xlat9;
        u_xlat10 = (vec4<f32>(x_1159.x, x_1159.x, x_1159.z, x_1159.z) * vec4<f32>(x_1161.x, x_1161.x, x_1161.z, x_1161.z));
        let x_1164 : vec4<f32> = u_xlat10;
        let x_1168 : vec2<f32> = (vec2<f32>(x_1164.y, x_1164.w) * vec2<f32>(0.040816002f, 0.040816002f));
        let x_1169 : vec4<f32> = u_xlat11;
        u_xlat11 = vec4<f32>(x_1169.x, x_1168.x, x_1169.z, x_1168.y);
        let x_1171 : vec4<f32> = u_xlat10;
        let x_1174 : vec2<f32> = u_xlat47;
        let x_1176 : vec2<f32> = ((vec2<f32>(x_1171.x, x_1171.z) * vec2<f32>(0.5f, 0.5f)) + -(x_1174));
        let x_1177 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_1176.x, x_1177.y, x_1176.y, x_1177.w);
        let x_1179 : vec2<f32> = u_xlat47;
        let x_1181 : vec2<f32> = (-(x_1179) + vec2<f32>(1.0f, 1.0f));
        let x_1182 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_1181.x, x_1181.y, x_1182.z, x_1182.w);
        let x_1184 : vec2<f32> = u_xlat47;
        u_xlat54 = min(x_1184, vec2<f32>(0.0f, 0.0f));
        let x_1186 : vec2<f32> = u_xlat54;
        let x_1188 : vec2<f32> = u_xlat54;
        let x_1190 : vec4<f32> = u_xlat10;
        let x_1192 : vec2<f32> = ((-(x_1186) * x_1188) + vec2<f32>(x_1190.x, x_1190.y));
        let x_1193 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_1192.x, x_1192.y, x_1193.z, x_1193.w);
        let x_1195 : vec2<f32> = u_xlat47;
        u_xlat54 = max(x_1195, vec2<f32>(0.0f, 0.0f));
        let x_1198 : vec2<f32> = u_xlat54;
        let x_1200 : vec2<f32> = u_xlat54;
        let x_1202 : vec4<f32> = u_xlat9;
        let x_1204 : vec2<f32> = ((-(x_1198) * x_1200) + vec2<f32>(x_1202.y, x_1202.w));
        let x_1205 : vec3<f32> = u_xlat31;
        u_xlat31 = vec3<f32>(x_1204.x, x_1205.y, x_1204.y);
        let x_1207 : vec4<f32> = u_xlat10;
        let x_1210 : vec2<f32> = (vec2<f32>(x_1207.x, x_1207.y) + vec2<f32>(2.0f, 2.0f));
        let x_1211 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_1210.x, x_1210.y, x_1211.z, x_1211.w);
        let x_1213 : vec3<f32> = u_xlat31;
        let x_1215 : vec2<f32> = (vec2<f32>(x_1213.x, x_1213.z) + vec2<f32>(2.0f, 2.0f));
        let x_1216 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_1216.x, x_1215.x, x_1216.z, x_1215.y);
        let x_1219 : f32 = u_xlat9.y;
        u_xlat12.z = (x_1219 * 0.081632003f);
        let x_1223 : vec4<f32> = u_xlat9;
        let x_1226 : vec3<f32> = (vec3<f32>(x_1223.z, x_1223.x, x_1223.w) * vec3<f32>(0.081632003f, 0.081632003f, 0.081632003f));
        let x_1227 : vec4<f32> = u_xlat13;
        u_xlat13 = vec4<f32>(x_1226.x, x_1226.y, x_1226.z, x_1227.w);
        let x_1229 : vec4<f32> = u_xlat10;
        let x_1232 : vec2<f32> = (vec2<f32>(x_1229.x, x_1229.y) * vec2<f32>(0.081632003f, 0.081632003f));
        let x_1233 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_1232.x, x_1232.y, x_1233.z, x_1233.w);
        let x_1236 : f32 = u_xlat13.y;
        u_xlat12.x = x_1236;
        let x_1238 : vec2<f32> = u_xlat47;
        let x_1245 : vec2<f32> = ((vec2<f32>(x_1238.x, x_1238.x) * vec2<f32>(-0.081632003f, 0.081632003f)) + vec2<f32>(0.163264006f, 0.081632003f));
        let x_1246 : vec4<f32> = u_xlat12;
        u_xlat12 = vec4<f32>(x_1246.x, x_1245.x, x_1246.z, x_1245.y);
        let x_1248 : vec2<f32> = u_xlat47;
        let x_1252 : vec2<f32> = ((vec2<f32>(x_1248.x, x_1248.x) * vec2<f32>(-0.081632003f, 0.081632003f)) + vec2<f32>(0.081632003f, 0.163264006f));
        let x_1253 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_1252.x, x_1253.y, x_1252.y, x_1253.w);
        let x_1256 : f32 = u_xlat9.x;
        u_xlat10.y = x_1256;
        let x_1259 : f32 = u_xlat11.y;
        u_xlat10.w = x_1259;
        let x_1261 : vec4<f32> = u_xlat10;
        let x_1262 : vec4<f32> = u_xlat12;
        u_xlat12 = (x_1261 + x_1262);
        let x_1264 : vec2<f32> = u_xlat47;
        let x_1267 : vec2<f32> = ((vec2<f32>(x_1264.y, x_1264.y) * vec2<f32>(-0.081632003f, 0.081632003f)) + vec2<f32>(0.163264006f, 0.081632003f));
        let x_1268 : vec4<f32> = u_xlat13;
        u_xlat13 = vec4<f32>(x_1268.x, x_1267.x, x_1268.z, x_1267.y);
        let x_1270 : vec2<f32> = u_xlat47;
        let x_1273 : vec2<f32> = ((vec2<f32>(x_1270.y, x_1270.y) * vec2<f32>(-0.081632003f, 0.081632003f)) + vec2<f32>(0.081632003f, 0.163264006f));
        let x_1274 : vec4<f32> = u_xlat11;
        u_xlat11 = vec4<f32>(x_1273.x, x_1274.y, x_1273.y, x_1274.w);
        let x_1277 : f32 = u_xlat9.y;
        u_xlat11.y = x_1277;
        let x_1279 : vec4<f32> = u_xlat11;
        let x_1280 : vec4<f32> = u_xlat13;
        u_xlat9 = (x_1279 + x_1280);
        let x_1282 : vec4<f32> = u_xlat10;
        let x_1283 : vec4<f32> = u_xlat12;
        u_xlat10 = (x_1282 / x_1283);
        let x_1285 : vec4<f32> = u_xlat10;
        u_xlat10 = (x_1285 + vec4<f32>(-3.5f, -1.5f, 0.5f, 2.5f));
        let x_1291 : vec4<f32> = u_xlat11;
        let x_1292 : vec4<f32> = u_xlat9;
        u_xlat11 = (x_1291 / x_1292);
        let x_1294 : vec4<f32> = u_xlat11;
        u_xlat11 = (x_1294 + vec4<f32>(-3.5f, -1.5f, 0.5f, 2.5f));
        let x_1296 : vec4<f32> = u_xlat10;
        let x_1299 : vec4<f32> = x_381.x_MainLightShadowmapSize;
        u_xlat10 = (vec4<f32>(x_1296.w, x_1296.x, x_1296.y, x_1296.z) * vec4<f32>(x_1299.x, x_1299.x, x_1299.x, x_1299.x));
        let x_1302 : vec4<f32> = u_xlat11;
        let x_1305 : vec4<f32> = x_381.x_MainLightShadowmapSize;
        u_xlat11 = (vec4<f32>(x_1302.x, x_1302.w, x_1302.y, x_1302.z) * vec4<f32>(x_1305.y, x_1305.y, x_1305.y, x_1305.y));
        let x_1308 : vec4<f32> = u_xlat10;
        let x_1309 : vec3<f32> = vec3<f32>(x_1308.y, x_1308.z, x_1308.w);
        let x_1310 : vec4<f32> = u_xlat13;
        u_xlat13 = vec4<f32>(x_1309.x, x_1310.y, x_1309.y, x_1309.z);
        let x_1313 : f32 = u_xlat11.x;
        u_xlat13.y = x_1313;
        let x_1315 : vec4<f32> = u_xlat3;
        let x_1318 : vec4<f32> = x_381.x_MainLightShadowmapSize;
        let x_1321 : vec4<f32> = u_xlat13;
        u_xlat14 = ((vec4<f32>(x_1315.x, x_1315.y, x_1315.x, x_1315.y) * vec4<f32>(x_1318.x, x_1318.y, x_1318.x, x_1318.y)) + vec4<f32>(x_1321.x, x_1321.y, x_1321.z, x_1321.y));
        let x_1324 : vec4<f32> = u_xlat3;
        let x_1327 : vec4<f32> = x_381.x_MainLightShadowmapSize;
        let x_1330 : vec4<f32> = u_xlat13;
        u_xlat47 = ((vec2<f32>(x_1324.x, x_1324.y) * vec2<f32>(x_1327.x, x_1327.y)) + vec2<f32>(x_1330.w, x_1330.y));
        let x_1334 : f32 = u_xlat13.y;
        u_xlat10.y = x_1334;
        let x_1337 : f32 = u_xlat11.z;
        u_xlat13.y = x_1337;
        let x_1339 : vec4<f32> = u_xlat3;
        let x_1342 : vec4<f32> = x_381.x_MainLightShadowmapSize;
        let x_1345 : vec4<f32> = u_xlat13;
        u_xlat15 = ((vec4<f32>(x_1339.x, x_1339.y, x_1339.x, x_1339.y) * vec4<f32>(x_1342.x, x_1342.y, x_1342.x, x_1342.y)) + vec4<f32>(x_1345.x, x_1345.y, x_1345.z, x_1345.y));
        let x_1348 : vec4<f32> = u_xlat3;
        let x_1351 : vec4<f32> = x_381.x_MainLightShadowmapSize;
        let x_1354 : vec4<f32> = u_xlat13;
        let x_1356 : vec2<f32> = ((vec2<f32>(x_1348.x, x_1348.y) * vec2<f32>(x_1351.x, x_1351.y)) + vec2<f32>(x_1354.w, x_1354.y));
        let x_1357 : vec4<f32> = u_xlat16;
        u_xlat16 = vec4<f32>(x_1356.x, x_1356.y, x_1357.z, x_1357.w);
        let x_1360 : f32 = u_xlat13.y;
        u_xlat10.z = x_1360;
        let x_1363 : vec4<f32> = u_xlat3;
        let x_1366 : vec4<f32> = x_381.x_MainLightShadowmapSize;
        let x_1369 : vec4<f32> = u_xlat10;
        u_xlat17 = ((vec4<f32>(x_1363.x, x_1363.y, x_1363.x, x_1363.y) * vec4<f32>(x_1366.x, x_1366.y, x_1366.x, x_1366.y)) + vec4<f32>(x_1369.x, x_1369.y, x_1369.x, x_1369.z));
        let x_1373 : f32 = u_xlat11.w;
        u_xlat13.y = x_1373;
        let x_1376 : vec4<f32> = u_xlat3;
        let x_1379 : vec4<f32> = x_381.x_MainLightShadowmapSize;
        let x_1382 : vec4<f32> = u_xlat13;
        u_xlat18 = ((vec4<f32>(x_1376.x, x_1376.y, x_1376.x, x_1376.y) * vec4<f32>(x_1379.x, x_1379.y, x_1379.x, x_1379.y)) + vec4<f32>(x_1382.x, x_1382.y, x_1382.z, x_1382.y));
        let x_1386 : vec4<f32> = u_xlat3;
        let x_1389 : vec4<f32> = x_381.x_MainLightShadowmapSize;
        let x_1392 : vec4<f32> = u_xlat13;
        u_xlat32 = ((vec2<f32>(x_1386.x, x_1386.y) * vec2<f32>(x_1389.x, x_1389.y)) + vec2<f32>(x_1392.w, x_1392.y));
        let x_1396 : f32 = u_xlat13.y;
        u_xlat10.w = x_1396;
        let x_1399 : vec4<f32> = u_xlat3;
        let x_1402 : vec4<f32> = x_381.x_MainLightShadowmapSize;
        let x_1405 : vec4<f32> = u_xlat10;
        u_xlat60 = ((vec2<f32>(x_1399.x, x_1399.y) * vec2<f32>(x_1402.x, x_1402.y)) + vec2<f32>(x_1405.x, x_1405.w));
        let x_1408 : vec4<f32> = u_xlat13;
        let x_1409 : vec3<f32> = vec3<f32>(x_1408.x, x_1408.z, x_1408.w);
        let x_1410 : vec4<f32> = u_xlat11;
        u_xlat11 = vec4<f32>(x_1409.x, x_1410.y, x_1409.y, x_1409.z);
        let x_1412 : vec4<f32> = u_xlat3;
        let x_1415 : vec4<f32> = x_381.x_MainLightShadowmapSize;
        let x_1418 : vec4<f32> = u_xlat11;
        u_xlat13 = ((vec4<f32>(x_1412.x, x_1412.y, x_1412.x, x_1412.y) * vec4<f32>(x_1415.x, x_1415.y, x_1415.x, x_1415.y)) + vec4<f32>(x_1418.x, x_1418.y, x_1418.z, x_1418.y));
        let x_1422 : vec4<f32> = u_xlat3;
        let x_1425 : vec4<f32> = x_381.x_MainLightShadowmapSize;
        let x_1428 : vec4<f32> = u_xlat11;
        u_xlat55 = ((vec2<f32>(x_1422.x, x_1422.y) * vec2<f32>(x_1425.x, x_1425.y)) + vec2<f32>(x_1428.w, x_1428.y));
        let x_1432 : f32 = u_xlat10.x;
        u_xlat11.x = x_1432;
        let x_1434 : vec4<f32> = u_xlat3;
        let x_1437 : vec4<f32> = x_381.x_MainLightShadowmapSize;
        let x_1440 : vec4<f32> = u_xlat11;
        let x_1442 : vec2<f32> = ((vec2<f32>(x_1434.x, x_1434.y) * vec2<f32>(x_1437.x, x_1437.y)) + vec2<f32>(x_1440.x, x_1440.y));
        let x_1443 : vec4<f32> = u_xlat3;
        u_xlat3 = vec4<f32>(x_1442.x, x_1442.y, x_1443.z, x_1443.w);
        let x_1446 : vec4<f32> = u_xlat9;
        let x_1448 : vec4<f32> = u_xlat12;
        u_xlat19 = (vec4<f32>(x_1446.x, x_1446.x, x_1446.x, x_1446.x) * x_1448);
        let x_1451 : vec4<f32> = u_xlat9;
        let x_1453 : vec4<f32> = u_xlat12;
        u_xlat20 = (vec4<f32>(x_1451.y, x_1451.y, x_1451.y, x_1451.y) * x_1453);
        let x_1456 : vec4<f32> = u_xlat9;
        let x_1458 : vec4<f32> = u_xlat12;
        u_xlat21 = (vec4<f32>(x_1456.z, x_1456.z, x_1456.z, x_1456.z) * x_1458);
        let x_1460 : vec4<f32> = u_xlat9;
        let x_1462 : vec4<f32> = u_xlat12;
        u_xlat9 = (vec4<f32>(x_1460.w, x_1460.w, x_1460.w, x_1460.w) * x_1462);
        let x_1465 : vec4<f32> = u_xlat14;
        let x_1466 : vec2<f32> = vec2<f32>(x_1465.x, x_1465.y);
        let x_1468 : f32 = u_xlat2.z;
        txVec13 = vec3<f32>(x_1466.x, x_1466.y, x_1468);
        let x_1475 : vec3<f32> = txVec13;
        let x_1477 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1475.xy, x_1475.z);
        u_xlat68 = x_1477;
        let x_1479 : vec4<f32> = u_xlat14;
        let x_1480 : vec2<f32> = vec2<f32>(x_1479.z, x_1479.w);
        let x_1482 : f32 = u_xlat2.z;
        txVec14 = vec3<f32>(x_1480.x, x_1480.y, x_1482);
        let x_1490 : vec3<f32> = txVec14;
        let x_1492 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1490.xy, x_1490.z);
        u_xlat70 = x_1492;
        let x_1493 : f32 = u_xlat70;
        let x_1495 : f32 = u_xlat19.y;
        u_xlat70 = (x_1493 * x_1495);
        let x_1498 : f32 = u_xlat19.x;
        let x_1499 : f32 = u_xlat68;
        let x_1501 : f32 = u_xlat70;
        u_xlat68 = ((x_1498 * x_1499) + x_1501);
        let x_1504 : vec2<f32> = u_xlat47;
        let x_1506 : f32 = u_xlat2.z;
        txVec15 = vec3<f32>(x_1504.x, x_1504.y, x_1506);
        let x_1513 : vec3<f32> = txVec15;
        let x_1515 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1513.xy, x_1513.z);
        u_xlat47.x = x_1515;
        let x_1518 : f32 = u_xlat19.z;
        let x_1520 : f32 = u_xlat47.x;
        let x_1522 : f32 = u_xlat68;
        u_xlat68 = ((x_1518 * x_1520) + x_1522);
        let x_1525 : vec4<f32> = u_xlat17;
        let x_1526 : vec2<f32> = vec2<f32>(x_1525.x, x_1525.y);
        let x_1528 : f32 = u_xlat2.z;
        txVec16 = vec3<f32>(x_1526.x, x_1526.y, x_1528);
        let x_1535 : vec3<f32> = txVec16;
        let x_1537 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1535.xy, x_1535.z);
        u_xlat47.x = x_1537;
        let x_1540 : f32 = u_xlat19.w;
        let x_1542 : f32 = u_xlat47.x;
        let x_1544 : f32 = u_xlat68;
        u_xlat68 = ((x_1540 * x_1542) + x_1544);
        let x_1547 : vec4<f32> = u_xlat15;
        let x_1548 : vec2<f32> = vec2<f32>(x_1547.x, x_1547.y);
        let x_1550 : f32 = u_xlat2.z;
        txVec17 = vec3<f32>(x_1548.x, x_1548.y, x_1550);
        let x_1557 : vec3<f32> = txVec17;
        let x_1559 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1557.xy, x_1557.z);
        u_xlat47.x = x_1559;
        let x_1562 : f32 = u_xlat20.x;
        let x_1564 : f32 = u_xlat47.x;
        let x_1566 : f32 = u_xlat68;
        u_xlat68 = ((x_1562 * x_1564) + x_1566);
        let x_1569 : vec4<f32> = u_xlat15;
        let x_1570 : vec2<f32> = vec2<f32>(x_1569.z, x_1569.w);
        let x_1572 : f32 = u_xlat2.z;
        txVec18 = vec3<f32>(x_1570.x, x_1570.y, x_1572);
        let x_1579 : vec3<f32> = txVec18;
        let x_1581 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1579.xy, x_1579.z);
        u_xlat47.x = x_1581;
        let x_1584 : f32 = u_xlat20.y;
        let x_1586 : f32 = u_xlat47.x;
        let x_1588 : f32 = u_xlat68;
        u_xlat68 = ((x_1584 * x_1586) + x_1588);
        let x_1591 : vec4<f32> = u_xlat16;
        let x_1592 : vec2<f32> = vec2<f32>(x_1591.x, x_1591.y);
        let x_1594 : f32 = u_xlat2.z;
        txVec19 = vec3<f32>(x_1592.x, x_1592.y, x_1594);
        let x_1601 : vec3<f32> = txVec19;
        let x_1603 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1601.xy, x_1601.z);
        u_xlat47.x = x_1603;
        let x_1606 : f32 = u_xlat20.z;
        let x_1608 : f32 = u_xlat47.x;
        let x_1610 : f32 = u_xlat68;
        u_xlat68 = ((x_1606 * x_1608) + x_1610);
        let x_1613 : vec4<f32> = u_xlat17;
        let x_1614 : vec2<f32> = vec2<f32>(x_1613.z, x_1613.w);
        let x_1616 : f32 = u_xlat2.z;
        txVec20 = vec3<f32>(x_1614.x, x_1614.y, x_1616);
        let x_1623 : vec3<f32> = txVec20;
        let x_1625 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1623.xy, x_1623.z);
        u_xlat47.x = x_1625;
        let x_1628 : f32 = u_xlat20.w;
        let x_1630 : f32 = u_xlat47.x;
        let x_1632 : f32 = u_xlat68;
        u_xlat68 = ((x_1628 * x_1630) + x_1632);
        let x_1635 : vec4<f32> = u_xlat18;
        let x_1636 : vec2<f32> = vec2<f32>(x_1635.x, x_1635.y);
        let x_1638 : f32 = u_xlat2.z;
        txVec21 = vec3<f32>(x_1636.x, x_1636.y, x_1638);
        let x_1645 : vec3<f32> = txVec21;
        let x_1647 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1645.xy, x_1645.z);
        u_xlat47.x = x_1647;
        let x_1650 : f32 = u_xlat21.x;
        let x_1652 : f32 = u_xlat47.x;
        let x_1654 : f32 = u_xlat68;
        u_xlat68 = ((x_1650 * x_1652) + x_1654);
        let x_1657 : vec4<f32> = u_xlat18;
        let x_1658 : vec2<f32> = vec2<f32>(x_1657.z, x_1657.w);
        let x_1660 : f32 = u_xlat2.z;
        txVec22 = vec3<f32>(x_1658.x, x_1658.y, x_1660);
        let x_1667 : vec3<f32> = txVec22;
        let x_1669 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1667.xy, x_1667.z);
        u_xlat47.x = x_1669;
        let x_1672 : f32 = u_xlat21.y;
        let x_1674 : f32 = u_xlat47.x;
        let x_1676 : f32 = u_xlat68;
        u_xlat68 = ((x_1672 * x_1674) + x_1676);
        let x_1679 : vec2<f32> = u_xlat32;
        let x_1681 : f32 = u_xlat2.z;
        txVec23 = vec3<f32>(x_1679.x, x_1679.y, x_1681);
        let x_1688 : vec3<f32> = txVec23;
        let x_1690 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1688.xy, x_1688.z);
        u_xlat47.x = x_1690;
        let x_1693 : f32 = u_xlat21.z;
        let x_1695 : f32 = u_xlat47.x;
        let x_1697 : f32 = u_xlat68;
        u_xlat68 = ((x_1693 * x_1695) + x_1697);
        let x_1700 : vec2<f32> = u_xlat60;
        let x_1702 : f32 = u_xlat2.z;
        txVec24 = vec3<f32>(x_1700.x, x_1700.y, x_1702);
        let x_1709 : vec3<f32> = txVec24;
        let x_1711 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1709.xy, x_1709.z);
        u_xlat47.x = x_1711;
        let x_1714 : f32 = u_xlat21.w;
        let x_1716 : f32 = u_xlat47.x;
        let x_1718 : f32 = u_xlat68;
        u_xlat68 = ((x_1714 * x_1716) + x_1718);
        let x_1721 : vec4<f32> = u_xlat13;
        let x_1722 : vec2<f32> = vec2<f32>(x_1721.x, x_1721.y);
        let x_1724 : f32 = u_xlat2.z;
        txVec25 = vec3<f32>(x_1722.x, x_1722.y, x_1724);
        let x_1731 : vec3<f32> = txVec25;
        let x_1733 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1731.xy, x_1731.z);
        u_xlat47.x = x_1733;
        let x_1736 : f32 = u_xlat9.x;
        let x_1738 : f32 = u_xlat47.x;
        let x_1740 : f32 = u_xlat68;
        u_xlat68 = ((x_1736 * x_1738) + x_1740);
        let x_1743 : vec4<f32> = u_xlat13;
        let x_1744 : vec2<f32> = vec2<f32>(x_1743.z, x_1743.w);
        let x_1746 : f32 = u_xlat2.z;
        txVec26 = vec3<f32>(x_1744.x, x_1744.y, x_1746);
        let x_1753 : vec3<f32> = txVec26;
        let x_1755 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1753.xy, x_1753.z);
        u_xlat47.x = x_1755;
        let x_1758 : f32 = u_xlat9.y;
        let x_1760 : f32 = u_xlat47.x;
        let x_1762 : f32 = u_xlat68;
        u_xlat68 = ((x_1758 * x_1760) + x_1762);
        let x_1765 : vec2<f32> = u_xlat55;
        let x_1767 : f32 = u_xlat2.z;
        txVec27 = vec3<f32>(x_1765.x, x_1765.y, x_1767);
        let x_1774 : vec3<f32> = txVec27;
        let x_1776 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1774.xy, x_1774.z);
        u_xlat47.x = x_1776;
        let x_1779 : f32 = u_xlat9.z;
        let x_1781 : f32 = u_xlat47.x;
        let x_1783 : f32 = u_xlat68;
        u_xlat68 = ((x_1779 * x_1781) + x_1783);
        let x_1786 : vec4<f32> = u_xlat3;
        let x_1787 : vec2<f32> = vec2<f32>(x_1786.x, x_1786.y);
        let x_1789 : f32 = u_xlat2.z;
        txVec28 = vec3<f32>(x_1787.x, x_1787.y, x_1789);
        let x_1796 : vec3<f32> = txVec28;
        let x_1798 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1796.xy, x_1796.z);
        u_xlat3.x = x_1798;
        let x_1801 : f32 = u_xlat9.w;
        let x_1803 : f32 = u_xlat3.x;
        let x_1805 : f32 = u_xlat68;
        u_xlat67 = ((x_1801 * x_1803) + x_1805);
      }
    }
  } else {
    let x_1809 : vec4<f32> = u_xlat2;
    let x_1810 : vec2<f32> = vec2<f32>(x_1809.x, x_1809.y);
    let x_1812 : f32 = u_xlat2.z;
    txVec29 = vec3<f32>(x_1810.x, x_1810.y, x_1812);
    let x_1819 : vec3<f32> = txVec29;
    let x_1821 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1819.xy, x_1819.z);
    u_xlat67 = x_1821;
  }
  let x_1823 : f32 = x_381.x_MainLightShadowParams.x;
  u_xlat68 = (-(x_1823) + 1.0f);
  let x_1826 : f32 = u_xlat67;
  let x_1828 : f32 = x_381.x_MainLightShadowParams.x;
  let x_1830 : f32 = u_xlat68;
  u_xlat67 = ((x_1826 * x_1828) + x_1830);
  let x_1834 : f32 = u_xlat2.z;
  u_xlatb3 = (0.0f >= x_1834);
  let x_1838 : f32 = u_xlat2.z;
  u_xlatb25 = (x_1838 >= 1.0f);
  let x_1840 : bool = u_xlatb25;
  let x_1841 : bool = u_xlatb3;
  u_xlatb3 = (x_1840 | x_1841);
  let x_1843 : bool = u_xlatb3;
  let x_1844 : f32 = u_xlat67;
  u_xlat67 = select(x_1844, 1.0f, x_1843);
  let x_1846 : vec3<f32> = u_xlat1;
  let x_1848 : vec4<f32> = x_160.x_MainLightPosition;
  u_xlat1.x = dot(x_1846, -(vec3<f32>(x_1848.x, x_1848.y, x_1848.z)));
  let x_1854 : f32 = u_xlat1.x;
  u_xlat1.x = clamp(x_1854, 0.0f, 1.0f);
  let x_1858 : f32 = u_xlat67;
  let x_1861 : vec4<f32> = x_160.x_MainLightColor;
  u_xlat23 = (vec3<f32>(x_1858, x_1858, x_1858) * vec3<f32>(x_1861.x, x_1861.y, x_1861.z));
  let x_1864 : vec3<f32> = u_xlat23;
  let x_1865 : vec3<f32> = u_xlat1;
  u_xlat1 = (x_1864 * vec3<f32>(x_1865.x, x_1865.x, x_1865.x));
  let x_1868 : vec3<f32> = u_xlat1;
  let x_1869 : vec4<f32> = u_xlat6;
  u_xlat1 = (x_1868 * vec3<f32>(x_1869.x, x_1869.y, x_1869.z));
  let x_1873 : f32 = x_95.unity_LODFade.x;
  u_xlatb67 = (x_1873 < 0.0f);
  let x_1876 : f32 = x_95.unity_LODFade.x;
  u_xlat25 = (x_1876 + 1.0f);
  let x_1878 : bool = u_xlatb67;
  if (x_1878) {
    let x_1882 : f32 = u_xlat25;
    x_1879 = x_1882;
  } else {
    let x_1885 : f32 = x_95.unity_LODFade.x;
    x_1879 = x_1885;
  }
  let x_1886 : f32 = x_1879;
  u_xlat67 = x_1886;
  let x_1887 : f32 = u_xlat67;
  u_xlatb25 = (0.5f >= x_1887);
  let x_1889 : vec3<f32> = u_xlat4;
  let x_1893 : vec4<f32> = x_160.x_ScreenParams;
  u_xlat4 = (abs(x_1889) * vec3<f32>(x_1893.x, x_1893.y, x_1893.x));
  let x_1899 : vec3<f32> = u_xlat4;
  u_xlatu4 = vec3<u32>(x_1899);
  let x_1903 : u32 = u_xlatu4.z;
  u_xlatu47 = (x_1903 * 1025u);
  let x_1907 : u32 = u_xlatu47;
  u_xlatu69 = (x_1907 >> 6u);
  let x_1911 : u32 = u_xlatu69;
  let x_1912 : u32 = u_xlatu47;
  u_xlati47 = bitcast<i32>((x_1911 ^ x_1912));
  let x_1915 : i32 = u_xlati47;
  u_xlatu47 = (bitcast<u32>(x_1915) * 9u);
  let x_1919 : u32 = u_xlatu47;
  u_xlatu69 = (x_1919 >> 11u);
  let x_1922 : u32 = u_xlatu69;
  let x_1923 : u32 = u_xlatu47;
  u_xlati47 = bitcast<i32>((x_1922 ^ x_1923));
  let x_1926 : i32 = u_xlati47;
  u_xlati47 = (x_1926 * 32769i);
  let x_1929 : i32 = u_xlati47;
  let x_1932 : u32 = u_xlatu4.y;
  u_xlati47 = bitcast<i32>((bitcast<u32>(x_1929) ^ x_1932));
  let x_1935 : i32 = u_xlati47;
  u_xlatu47 = (bitcast<u32>(x_1935) * 1025u);
  let x_1938 : u32 = u_xlatu47;
  u_xlatu69 = (x_1938 >> 6u);
  let x_1940 : u32 = u_xlatu69;
  let x_1941 : u32 = u_xlatu47;
  u_xlati47 = bitcast<i32>((x_1940 ^ x_1941));
  let x_1944 : i32 = u_xlati47;
  u_xlatu47 = (bitcast<u32>(x_1944) * 9u);
  let x_1947 : u32 = u_xlatu47;
  u_xlatu69 = (x_1947 >> 11u);
  let x_1949 : u32 = u_xlatu69;
  let x_1950 : u32 = u_xlatu47;
  u_xlati47 = bitcast<i32>((x_1949 ^ x_1950));
  let x_1953 : i32 = u_xlati47;
  u_xlati47 = (x_1953 * 32769i);
  let x_1955 : i32 = u_xlati47;
  let x_1958 : u32 = u_xlatu4.x;
  u_xlati47 = bitcast<i32>((bitcast<u32>(x_1955) ^ x_1958));
  let x_1961 : i32 = u_xlati47;
  u_xlatu47 = (bitcast<u32>(x_1961) * 1025u);
  let x_1964 : u32 = u_xlatu47;
  u_xlatu69 = (x_1964 >> 6u);
  let x_1966 : u32 = u_xlatu69;
  let x_1967 : u32 = u_xlatu47;
  u_xlati47 = bitcast<i32>((x_1966 ^ x_1967));
  let x_1970 : i32 = u_xlati47;
  u_xlatu47 = (bitcast<u32>(x_1970) * 9u);
  let x_1973 : u32 = u_xlatu47;
  u_xlatu69 = (x_1973 >> 11u);
  let x_1975 : u32 = u_xlatu69;
  let x_1976 : u32 = u_xlatu47;
  u_xlati47 = bitcast<i32>((x_1975 ^ x_1976));
  let x_1979 : i32 = u_xlati47;
  u_xlati47 = (x_1979 * 32769i);
  param = 1065353216i;
  let x_1985 : i32 = u_xlati47;
  param_1 = x_1985;
  param_2 = 0i;
  param_3 = 23i;
  let x_1988 : i32 = int_bitfieldInsert_i1_i1_i1_i1_(&(param), &(param_1), &(param_2), &(param_3));
  u_xlat47.x = bitcast<f32>(x_1988);
  let x_1992 : f32 = u_xlat47.x;
  u_xlat47.x = (x_1992 + -1.0f);
  let x_1997 : f32 = u_xlat47.x;
  u_xlat69 = (-(x_1997) + 1.0f);
  let x_2000 : bool = u_xlatb25;
  if (x_2000) {
    let x_2005 : f32 = u_xlat47.x;
    x_2001 = x_2005;
  } else {
    let x_2007 : f32 = u_xlat69;
    x_2001 = x_2007;
  }
  let x_2008 : f32 = x_2001;
  u_xlat25 = x_2008;
  let x_2009 : f32 = u_xlat67;
  let x_2011 : f32 = u_xlat25;
  u_xlat67 = ((x_2009 * 2.0f) + -(x_2011));
  let x_2014 : f32 = u_xlat67;
  let x_2016 : f32 = u_xlat6.w;
  u_xlat25 = (x_2014 * x_2016);
  let x_2019 : f32 = u_xlat25;
  u_xlatb47.x = (x_2019 >= 0.400000006f);
  let x_2024 : bool = u_xlatb47.x;
  let x_2025 : f32 = u_xlat25;
  u_xlat47.x = select(0.0f, x_2025, x_2024);
  let x_2029 : f32 = u_xlat6.w;
  let x_2030 : f32 = u_xlat67;
  u_xlat67 = ((x_2029 * x_2030) + -0.400000006f);
  let x_2034 : f32 = u_xlat25;
  u_xlat69 = dpdxCoarse(x_2034);
  let x_2036 : f32 = u_xlat25;
  u_xlat25 = dpdyCoarse(x_2036);
  let x_2038 : f32 = u_xlat25;
  let x_2040 : f32 = u_xlat69;
  u_xlat25 = (abs(x_2038) + abs(x_2040));
  let x_2043 : f32 = u_xlat25;
  u_xlat25 = max(x_2043, 0.0001f);
  let x_2046 : f32 = u_xlat67;
  let x_2047 : f32 = u_xlat25;
  u_xlat67 = (x_2046 / x_2047);
  let x_2049 : f32 = u_xlat67;
  u_xlat67 = (x_2049 + 0.5f);
  let x_2051 : f32 = u_xlat67;
  u_xlat67 = clamp(x_2051, 0.0f, 1.0f);
  let x_2054 : f32 = x_160.x_AlphaToMaskAvailable;
  u_xlatb25 = !((x_2054 == 0.0f));
  let x_2056 : bool = u_xlatb25;
  if (x_2056) {
    let x_2060 : f32 = u_xlat67;
    x_2057 = x_2060;
  } else {
    let x_2063 : f32 = u_xlat47.x;
    x_2057 = x_2063;
  }
  let x_2064 : f32 = x_2057;
  u_xlat67 = x_2064;
  let x_2065 : f32 = u_xlat67;
  u_xlat47.x = (x_2065 + -0.0001f);
  let x_2070 : f32 = u_xlat47.x;
  u_xlatb47.x = (x_2070 < 0.0f);
  let x_2074 : bool = u_xlatb47.x;
  if (((select(0i, 1i, x_2074) * -1i) != 0i)) {
    discard;
  }
  let x_2082 : vec3<f32> = u_xlat22;
  let x_2083 : vec3<f32> = u_xlat30;
  u_xlat22 = (x_2082 * vec3<f32>(x_2083.y, x_2083.y, x_2083.y));
  let x_2086 : vec3<f32> = u_xlat30;
  let x_2088 : vec4<f32> = vs_INTERP2;
  let x_2091 : vec3<f32> = u_xlat22;
  u_xlat22 = ((vec3<f32>(x_2086.x, x_2086.x, x_2086.x) * vec3<f32>(x_2088.x, x_2088.y, x_2088.z)) + x_2091);
  let x_2093 : vec3<f32> = u_xlat30;
  let x_2095 : vec3<f32> = vs_INTERP1;
  let x_2097 : vec3<f32> = u_xlat22;
  u_xlat22 = ((vec3<f32>(x_2093.z, x_2093.z, x_2093.z) * x_2095) + x_2097);
  let x_2099 : vec3<f32> = u_xlat22;
  let x_2100 : vec3<f32> = u_xlat22;
  u_xlat47.x = dot(x_2099, x_2100);
  let x_2104 : f32 = u_xlat47.x;
  u_xlat47.x = inverseSqrt(x_2104);
  let x_2107 : vec3<f32> = u_xlat22;
  let x_2108 : vec2<f32> = u_xlat47;
  u_xlat22 = (x_2107 * vec3<f32>(x_2108.x, x_2108.x, x_2108.x));
  let x_2118 : vec2<f32> = vs_INTERP5;
  let x_2120 : f32 = x_160.x_GlobalMipBias.x;
  let x_2121 : vec4<f32> = textureSampleBias(unity_Lightmap, samplerunity_Lightmap, x_2118, x_2120);
  u_xlat4 = vec3<f32>(x_2121.x, x_2121.y, x_2121.z);
  let x_2124 : vec4<f32> = x_160.x_ScaledScreenParams;
  let x_2125 : vec2<f32> = vec2<f32>(x_2124.x, x_2124.y);
  u_xlat47 = (vec2<f32>(1.0f, 1.0f) / vec2<f32>(x_2125.x, x_2125.y));
  let x_2130 : vec2<f32> = u_xlat47;
  let x_2131 : vec4<f32> = hlslcc_FragCoord;
  let x_2133 : vec2<f32> = (x_2130 * vec2<f32>(x_2131.x, x_2131.y));
  let x_2134 : vec4<f32> = u_xlat6;
  u_xlat6 = vec4<f32>(x_2133.x, x_2133.y, x_2134.z, x_2134.w);
  let x_2137 : f32 = u_xlat6.y;
  let x_2140 : f32 = x_160.x_ScaleBiasRt.x;
  let x_2143 : f32 = x_160.x_ScaleBiasRt.y;
  u_xlat47.x = ((x_2137 * x_2140) + x_2143);
  let x_2147 : f32 = u_xlat47.x;
  u_xlat6.z = (-(x_2147) + 1.0f);
  let x_2152 : f32 = u_xlat8.x;
  u_xlat8.x = x_2152;
  let x_2155 : f32 = u_xlat8.x;
  u_xlat8.x = clamp(x_2155, 0.0f, 1.0f);
  let x_2158 : f32 = u_xlat67;
  u_xlat67 = x_2158;
  let x_2159 : f32 = u_xlat67;
  u_xlat67 = clamp(x_2159, 0.0f, 1.0f);
  let x_2161 : vec3<f32> = u_xlat7;
  u_xlat7 = (x_2161 * vec3<f32>(0.959999979f, 0.959999979f, 0.959999979f));
  let x_2166 : f32 = u_xlat8.x;
  u_xlat47.x = (-(x_2166) + 1.0f);
  let x_2171 : f32 = u_xlat47.x;
  let x_2173 : f32 = u_xlat47.x;
  u_xlat69 = (x_2171 * x_2173);
  let x_2175 : f32 = u_xlat69;
  u_xlat69 = max(x_2175, 0.0078125f);
  let x_2178 : f32 = u_xlat69;
  let x_2179 : f32 = u_xlat69;
  u_xlat70 = (x_2178 * x_2179);
  let x_2183 : f32 = u_xlat8.x;
  u_xlat71 = (x_2183 + 0.040000021f);
  let x_2186 : f32 = u_xlat71;
  u_xlat71 = min(x_2186, 1.0f);
  let x_2189 : f32 = u_xlat69;
  u_xlat28 = ((x_2189 * 4.0f) + 2.0f);
  let x_2197 : vec4<f32> = u_xlat6;
  let x_2200 : f32 = x_160.x_GlobalMipBias.x;
  let x_2201 : vec4<f32> = textureSampleBias(x_ScreenSpaceOcclusionTexture, sampler_ScreenSpaceOcclusionTexture, vec2<f32>(x_2197.x, x_2197.z), x_2200);
  u_xlat6.x = x_2201.x;
  let x_2206 : f32 = u_xlat6.x;
  u_xlat50 = (x_2206 + -1.0f);
  let x_2209 : f32 = x_160.x_AmbientOcclusionParam.w;
  let x_2210 : f32 = u_xlat50;
  u_xlat50 = ((x_2209 * x_2210) + 1.0f);
  let x_2214 : f32 = u_xlat6.x;
  let x_2216 : f32 = vs_INTERP4.w;
  u_xlat6.x = min(x_2214, x_2216);
  let x_2219 : bool = u_xlatb0;
  if (x_2219) {
    let x_2223 : f32 = x_381.x_MainLightShadowParams.y;
    u_xlatb0 = (x_2223 == 1.0f);
    let x_2225 : bool = u_xlatb0;
    if (x_2225) {
      let x_2228 : vec4<f32> = u_xlat2;
      let x_2231 : vec4<f32> = x_381.x_MainLightShadowOffset0;
      u_xlat8 = (vec4<f32>(x_2228.x, x_2228.y, x_2228.x, x_2228.y) + x_2231);
      let x_2234 : vec4<f32> = u_xlat8;
      let x_2235 : vec2<f32> = vec2<f32>(x_2234.x, x_2234.y);
      let x_2237 : f32 = u_xlat2.z;
      txVec30 = vec3<f32>(x_2235.x, x_2235.y, x_2237);
      let x_2244 : vec3<f32> = txVec30;
      let x_2246 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2244.xy, x_2244.z);
      u_xlat9.x = x_2246;
      let x_2249 : vec4<f32> = u_xlat8;
      let x_2250 : vec2<f32> = vec2<f32>(x_2249.z, x_2249.w);
      let x_2252 : f32 = u_xlat2.z;
      txVec31 = vec3<f32>(x_2250.x, x_2250.y, x_2252);
      let x_2259 : vec3<f32> = txVec31;
      let x_2261 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2259.xy, x_2259.z);
      u_xlat9.y = x_2261;
      let x_2263 : vec4<f32> = u_xlat2;
      let x_2266 : vec4<f32> = x_381.x_MainLightShadowOffset1;
      u_xlat8 = (vec4<f32>(x_2263.x, x_2263.y, x_2263.x, x_2263.y) + x_2266);
      let x_2269 : vec4<f32> = u_xlat8;
      let x_2270 : vec2<f32> = vec2<f32>(x_2269.x, x_2269.y);
      let x_2272 : f32 = u_xlat2.z;
      txVec32 = vec3<f32>(x_2270.x, x_2270.y, x_2272);
      let x_2279 : vec3<f32> = txVec32;
      let x_2281 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2279.xy, x_2279.z);
      u_xlat9.z = x_2281;
      let x_2284 : vec4<f32> = u_xlat8;
      let x_2285 : vec2<f32> = vec2<f32>(x_2284.z, x_2284.w);
      let x_2287 : f32 = u_xlat2.z;
      txVec33 = vec3<f32>(x_2285.x, x_2285.y, x_2287);
      let x_2294 : vec3<f32> = txVec33;
      let x_2296 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2294.xy, x_2294.z);
      u_xlat9.w = x_2296;
      let x_2298 : vec4<f32> = u_xlat9;
      u_xlat0.x = dot(x_2298, vec4<f32>(0.25f, 0.25f, 0.25f, 0.25f));
    } else {
      let x_2304 : f32 = x_381.x_MainLightShadowParams.y;
      u_xlatb72 = (x_2304 == 2.0f);
      let x_2306 : bool = u_xlatb72;
      if (x_2306) {
        let x_2309 : vec4<f32> = u_xlat2;
        let x_2312 : vec4<f32> = x_381.x_MainLightShadowmapSize;
        let x_2315 : vec2<f32> = ((vec2<f32>(x_2309.x, x_2309.y) * vec2<f32>(x_2312.z, x_2312.w)) + vec2<f32>(0.5f, 0.5f));
        let x_2316 : vec4<f32> = u_xlat8;
        u_xlat8 = vec4<f32>(x_2315.x, x_2315.y, x_2316.z, x_2316.w);
        let x_2318 : vec4<f32> = u_xlat8;
        let x_2320 : vec2<f32> = floor(vec2<f32>(x_2318.x, x_2318.y));
        let x_2321 : vec4<f32> = u_xlat8;
        u_xlat8 = vec4<f32>(x_2320.x, x_2320.y, x_2321.z, x_2321.w);
        let x_2324 : vec4<f32> = u_xlat2;
        let x_2327 : vec4<f32> = x_381.x_MainLightShadowmapSize;
        let x_2330 : vec4<f32> = u_xlat8;
        u_xlat52 = ((vec2<f32>(x_2324.x, x_2324.y) * vec2<f32>(x_2327.z, x_2327.w)) + -(vec2<f32>(x_2330.x, x_2330.y)));
        let x_2334 : vec2<f32> = u_xlat52;
        u_xlat9 = (vec4<f32>(x_2334.x, x_2334.x, x_2334.y, x_2334.y) + vec4<f32>(0.5f, 1.0f, 0.5f, 1.0f));
        let x_2337 : vec4<f32> = u_xlat9;
        let x_2339 : vec4<f32> = u_xlat9;
        u_xlat10 = (vec4<f32>(x_2337.x, x_2337.x, x_2337.z, x_2337.z) * vec4<f32>(x_2339.x, x_2339.x, x_2339.z, x_2339.z));
        let x_2342 : vec4<f32> = u_xlat10;
        let x_2344 : vec2<f32> = (vec2<f32>(x_2342.y, x_2342.w) * vec2<f32>(0.079999998f, 0.079999998f));
        let x_2345 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_2344.x, x_2345.y, x_2344.y, x_2345.w);
        let x_2347 : vec4<f32> = u_xlat10;
        let x_2350 : vec2<f32> = u_xlat52;
        let x_2352 : vec2<f32> = ((vec2<f32>(x_2347.x, x_2347.z) * vec2<f32>(0.5f, 0.5f)) + -(x_2350));
        let x_2353 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_2352.x, x_2352.y, x_2353.z, x_2353.w);
        let x_2355 : vec2<f32> = u_xlat52;
        u_xlat54 = (-(x_2355) + vec2<f32>(1.0f, 1.0f));
        let x_2358 : vec2<f32> = u_xlat52;
        let x_2359 : vec2<f32> = min(x_2358, vec2<f32>(0.0f, 0.0f));
        let x_2360 : vec4<f32> = u_xlat11;
        u_xlat11 = vec4<f32>(x_2359.x, x_2359.y, x_2360.z, x_2360.w);
        let x_2362 : vec4<f32> = u_xlat11;
        let x_2365 : vec4<f32> = u_xlat11;
        let x_2368 : vec2<f32> = u_xlat54;
        let x_2369 : vec2<f32> = ((-(vec2<f32>(x_2362.x, x_2362.y)) * vec2<f32>(x_2365.x, x_2365.y)) + x_2368);
        let x_2370 : vec4<f32> = u_xlat11;
        u_xlat11 = vec4<f32>(x_2369.x, x_2369.y, x_2370.z, x_2370.w);
        let x_2372 : vec2<f32> = u_xlat52;
        u_xlat52 = max(x_2372, vec2<f32>(0.0f, 0.0f));
        let x_2374 : vec2<f32> = u_xlat52;
        let x_2376 : vec2<f32> = u_xlat52;
        let x_2378 : vec4<f32> = u_xlat9;
        u_xlat52 = ((-(x_2374) * x_2376) + vec2<f32>(x_2378.y, x_2378.w));
        let x_2381 : vec4<f32> = u_xlat11;
        let x_2383 : vec2<f32> = (vec2<f32>(x_2381.x, x_2381.y) + vec2<f32>(1.0f, 1.0f));
        let x_2384 : vec4<f32> = u_xlat11;
        u_xlat11 = vec4<f32>(x_2383.x, x_2383.y, x_2384.z, x_2384.w);
        let x_2386 : vec2<f32> = u_xlat52;
        u_xlat52 = (x_2386 + vec2<f32>(1.0f, 1.0f));
        let x_2388 : vec4<f32> = u_xlat10;
        let x_2390 : vec2<f32> = (vec2<f32>(x_2388.x, x_2388.y) * vec2<f32>(0.159999996f, 0.159999996f));
        let x_2391 : vec4<f32> = u_xlat12;
        u_xlat12 = vec4<f32>(x_2390.x, x_2390.y, x_2391.z, x_2391.w);
        let x_2393 : vec2<f32> = u_xlat54;
        let x_2394 : vec2<f32> = (x_2393 * vec2<f32>(0.159999996f, 0.159999996f));
        let x_2395 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_2394.x, x_2394.y, x_2395.z, x_2395.w);
        let x_2397 : vec4<f32> = u_xlat11;
        let x_2399 : vec2<f32> = (vec2<f32>(x_2397.x, x_2397.y) * vec2<f32>(0.159999996f, 0.159999996f));
        let x_2400 : vec4<f32> = u_xlat11;
        u_xlat11 = vec4<f32>(x_2399.x, x_2399.y, x_2400.z, x_2400.w);
        let x_2402 : vec2<f32> = u_xlat52;
        let x_2403 : vec2<f32> = (x_2402 * vec2<f32>(0.159999996f, 0.159999996f));
        let x_2404 : vec4<f32> = u_xlat13;
        u_xlat13 = vec4<f32>(x_2403.x, x_2403.y, x_2404.z, x_2404.w);
        let x_2406 : vec4<f32> = u_xlat9;
        u_xlat52 = (vec2<f32>(x_2406.y, x_2406.w) * vec2<f32>(0.159999996f, 0.159999996f));
        let x_2410 : f32 = u_xlat11.x;
        u_xlat12.z = x_2410;
        let x_2413 : f32 = u_xlat52.x;
        u_xlat12.w = x_2413;
        let x_2416 : f32 = u_xlat13.x;
        u_xlat10.z = x_2416;
        let x_2419 : f32 = u_xlat9.x;
        u_xlat10.w = x_2419;
        let x_2421 : vec4<f32> = u_xlat10;
        let x_2423 : vec4<f32> = u_xlat12;
        u_xlat14 = (vec4<f32>(x_2421.z, x_2421.w, x_2421.x, x_2421.z) + vec4<f32>(x_2423.z, x_2423.w, x_2423.x, x_2423.z));
        let x_2427 : f32 = u_xlat12.y;
        u_xlat11.z = x_2427;
        let x_2430 : f32 = u_xlat52.y;
        u_xlat11.w = x_2430;
        let x_2433 : f32 = u_xlat10.y;
        u_xlat13.z = x_2433;
        let x_2436 : f32 = u_xlat9.z;
        u_xlat13.w = x_2436;
        let x_2438 : vec4<f32> = u_xlat11;
        let x_2440 : vec4<f32> = u_xlat13;
        let x_2442 : vec3<f32> = (vec3<f32>(x_2438.z, x_2438.y, x_2438.w) + vec3<f32>(x_2440.z, x_2440.y, x_2440.w));
        let x_2443 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_2442.x, x_2442.y, x_2442.z, x_2443.w);
        let x_2445 : vec4<f32> = u_xlat10;
        let x_2447 : vec4<f32> = u_xlat14;
        let x_2449 : vec3<f32> = (vec3<f32>(x_2445.x, x_2445.z, x_2445.w) / vec3<f32>(x_2447.z, x_2447.w, x_2447.y));
        let x_2450 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_2449.x, x_2449.y, x_2449.z, x_2450.w);
        let x_2452 : vec4<f32> = u_xlat10;
        let x_2454 : vec3<f32> = (vec3<f32>(x_2452.x, x_2452.y, x_2452.z) + vec3<f32>(-2.5f, -0.5f, 1.5f));
        let x_2455 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_2454.x, x_2454.y, x_2454.z, x_2455.w);
        let x_2457 : vec4<f32> = u_xlat13;
        let x_2459 : vec4<f32> = u_xlat9;
        let x_2461 : vec3<f32> = (vec3<f32>(x_2457.z, x_2457.y, x_2457.w) / vec3<f32>(x_2459.x, x_2459.y, x_2459.z));
        let x_2462 : vec4<f32> = u_xlat11;
        u_xlat11 = vec4<f32>(x_2461.x, x_2461.y, x_2461.z, x_2462.w);
        let x_2464 : vec4<f32> = u_xlat11;
        let x_2466 : vec3<f32> = (vec3<f32>(x_2464.x, x_2464.y, x_2464.z) + vec3<f32>(-2.5f, -0.5f, 1.5f));
        let x_2467 : vec4<f32> = u_xlat11;
        u_xlat11 = vec4<f32>(x_2466.x, x_2466.y, x_2466.z, x_2467.w);
        let x_2469 : vec4<f32> = u_xlat10;
        let x_2472 : vec4<f32> = x_381.x_MainLightShadowmapSize;
        let x_2474 : vec3<f32> = (vec3<f32>(x_2469.y, x_2469.x, x_2469.z) * vec3<f32>(x_2472.x, x_2472.x, x_2472.x));
        let x_2475 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_2474.x, x_2474.y, x_2474.z, x_2475.w);
        let x_2477 : vec4<f32> = u_xlat11;
        let x_2480 : vec4<f32> = x_381.x_MainLightShadowmapSize;
        let x_2482 : vec3<f32> = (vec3<f32>(x_2477.x, x_2477.y, x_2477.z) * vec3<f32>(x_2480.y, x_2480.y, x_2480.y));
        let x_2483 : vec4<f32> = u_xlat11;
        u_xlat11 = vec4<f32>(x_2482.x, x_2482.y, x_2482.z, x_2483.w);
        let x_2486 : f32 = u_xlat11.x;
        u_xlat10.w = x_2486;
        let x_2488 : vec4<f32> = u_xlat8;
        let x_2491 : vec4<f32> = x_381.x_MainLightShadowmapSize;
        let x_2494 : vec4<f32> = u_xlat10;
        u_xlat12 = ((vec4<f32>(x_2488.x, x_2488.y, x_2488.x, x_2488.y) * vec4<f32>(x_2491.x, x_2491.y, x_2491.x, x_2491.y)) + vec4<f32>(x_2494.y, x_2494.w, x_2494.x, x_2494.w));
        let x_2497 : vec4<f32> = u_xlat8;
        let x_2500 : vec4<f32> = x_381.x_MainLightShadowmapSize;
        let x_2503 : vec4<f32> = u_xlat10;
        u_xlat52 = ((vec2<f32>(x_2497.x, x_2497.y) * vec2<f32>(x_2500.x, x_2500.y)) + vec2<f32>(x_2503.z, x_2503.w));
        let x_2507 : f32 = u_xlat10.y;
        u_xlat11.w = x_2507;
        let x_2509 : vec4<f32> = u_xlat11;
        let x_2510 : vec2<f32> = vec2<f32>(x_2509.y, x_2509.z);
        let x_2511 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_2511.x, x_2510.x, x_2511.z, x_2510.y);
        let x_2513 : vec4<f32> = u_xlat8;
        let x_2516 : vec4<f32> = x_381.x_MainLightShadowmapSize;
        let x_2519 : vec4<f32> = u_xlat10;
        u_xlat13 = ((vec4<f32>(x_2513.x, x_2513.y, x_2513.x, x_2513.y) * vec4<f32>(x_2516.x, x_2516.y, x_2516.x, x_2516.y)) + vec4<f32>(x_2519.x, x_2519.y, x_2519.z, x_2519.y));
        let x_2522 : vec4<f32> = u_xlat8;
        let x_2525 : vec4<f32> = x_381.x_MainLightShadowmapSize;
        let x_2528 : vec4<f32> = u_xlat11;
        u_xlat11 = ((vec4<f32>(x_2522.x, x_2522.y, x_2522.x, x_2522.y) * vec4<f32>(x_2525.x, x_2525.y, x_2525.x, x_2525.y)) + vec4<f32>(x_2528.w, x_2528.y, x_2528.w, x_2528.z));
        let x_2531 : vec4<f32> = u_xlat8;
        let x_2534 : vec4<f32> = x_381.x_MainLightShadowmapSize;
        let x_2537 : vec4<f32> = u_xlat10;
        u_xlat10 = ((vec4<f32>(x_2531.x, x_2531.y, x_2531.x, x_2531.y) * vec4<f32>(x_2534.x, x_2534.y, x_2534.x, x_2534.y)) + vec4<f32>(x_2537.x, x_2537.w, x_2537.z, x_2537.w));
        let x_2540 : vec4<f32> = u_xlat9;
        let x_2542 : vec4<f32> = u_xlat14;
        u_xlat15 = (vec4<f32>(x_2540.x, x_2540.x, x_2540.x, x_2540.y) * vec4<f32>(x_2542.z, x_2542.w, x_2542.y, x_2542.z));
        let x_2545 : vec4<f32> = u_xlat9;
        let x_2547 : vec4<f32> = u_xlat14;
        u_xlat16 = (vec4<f32>(x_2545.y, x_2545.y, x_2545.z, x_2545.z) * x_2547);
        let x_2551 : f32 = u_xlat9.z;
        let x_2553 : f32 = u_xlat14.y;
        u_xlat72 = (x_2551 * x_2553);
        let x_2556 : vec4<f32> = u_xlat12;
        let x_2557 : vec2<f32> = vec2<f32>(x_2556.x, x_2556.y);
        let x_2559 : f32 = u_xlat2.z;
        txVec34 = vec3<f32>(x_2557.x, x_2557.y, x_2559);
        let x_2567 : vec3<f32> = txVec34;
        let x_2569 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2567.xy, x_2567.z);
        u_xlat73 = x_2569;
        let x_2571 : vec4<f32> = u_xlat12;
        let x_2572 : vec2<f32> = vec2<f32>(x_2571.z, x_2571.w);
        let x_2574 : f32 = u_xlat2.z;
        txVec35 = vec3<f32>(x_2572.x, x_2572.y, x_2574);
        let x_2581 : vec3<f32> = txVec35;
        let x_2583 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2581.xy, x_2581.z);
        u_xlat8.x = x_2583;
        let x_2586 : f32 = u_xlat8.x;
        let x_2588 : f32 = u_xlat15.y;
        u_xlat8.x = (x_2586 * x_2588);
        let x_2592 : f32 = u_xlat15.x;
        let x_2593 : f32 = u_xlat73;
        let x_2596 : f32 = u_xlat8.x;
        u_xlat73 = ((x_2592 * x_2593) + x_2596);
        let x_2599 : vec2<f32> = u_xlat52;
        let x_2601 : f32 = u_xlat2.z;
        txVec36 = vec3<f32>(x_2599.x, x_2599.y, x_2601);
        let x_2608 : vec3<f32> = txVec36;
        let x_2610 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2608.xy, x_2608.z);
        u_xlat8.x = x_2610;
        let x_2613 : f32 = u_xlat15.z;
        let x_2615 : f32 = u_xlat8.x;
        let x_2617 : f32 = u_xlat73;
        u_xlat73 = ((x_2613 * x_2615) + x_2617);
        let x_2620 : vec4<f32> = u_xlat11;
        let x_2621 : vec2<f32> = vec2<f32>(x_2620.x, x_2620.y);
        let x_2623 : f32 = u_xlat2.z;
        txVec37 = vec3<f32>(x_2621.x, x_2621.y, x_2623);
        let x_2630 : vec3<f32> = txVec37;
        let x_2632 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2630.xy, x_2630.z);
        u_xlat8.x = x_2632;
        let x_2635 : f32 = u_xlat15.w;
        let x_2637 : f32 = u_xlat8.x;
        let x_2639 : f32 = u_xlat73;
        u_xlat73 = ((x_2635 * x_2637) + x_2639);
        let x_2642 : vec4<f32> = u_xlat13;
        let x_2643 : vec2<f32> = vec2<f32>(x_2642.x, x_2642.y);
        let x_2645 : f32 = u_xlat2.z;
        txVec38 = vec3<f32>(x_2643.x, x_2643.y, x_2645);
        let x_2652 : vec3<f32> = txVec38;
        let x_2654 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2652.xy, x_2652.z);
        u_xlat8.x = x_2654;
        let x_2657 : f32 = u_xlat16.x;
        let x_2659 : f32 = u_xlat8.x;
        let x_2661 : f32 = u_xlat73;
        u_xlat73 = ((x_2657 * x_2659) + x_2661);
        let x_2664 : vec4<f32> = u_xlat13;
        let x_2665 : vec2<f32> = vec2<f32>(x_2664.z, x_2664.w);
        let x_2667 : f32 = u_xlat2.z;
        txVec39 = vec3<f32>(x_2665.x, x_2665.y, x_2667);
        let x_2674 : vec3<f32> = txVec39;
        let x_2676 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2674.xy, x_2674.z);
        u_xlat8.x = x_2676;
        let x_2679 : f32 = u_xlat16.y;
        let x_2681 : f32 = u_xlat8.x;
        let x_2683 : f32 = u_xlat73;
        u_xlat73 = ((x_2679 * x_2681) + x_2683);
        let x_2686 : vec4<f32> = u_xlat11;
        let x_2687 : vec2<f32> = vec2<f32>(x_2686.z, x_2686.w);
        let x_2689 : f32 = u_xlat2.z;
        txVec40 = vec3<f32>(x_2687.x, x_2687.y, x_2689);
        let x_2696 : vec3<f32> = txVec40;
        let x_2698 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2696.xy, x_2696.z);
        u_xlat8.x = x_2698;
        let x_2701 : f32 = u_xlat16.z;
        let x_2703 : f32 = u_xlat8.x;
        let x_2705 : f32 = u_xlat73;
        u_xlat73 = ((x_2701 * x_2703) + x_2705);
        let x_2708 : vec4<f32> = u_xlat10;
        let x_2709 : vec2<f32> = vec2<f32>(x_2708.x, x_2708.y);
        let x_2711 : f32 = u_xlat2.z;
        txVec41 = vec3<f32>(x_2709.x, x_2709.y, x_2711);
        let x_2718 : vec3<f32> = txVec41;
        let x_2720 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2718.xy, x_2718.z);
        u_xlat8.x = x_2720;
        let x_2723 : f32 = u_xlat16.w;
        let x_2725 : f32 = u_xlat8.x;
        let x_2727 : f32 = u_xlat73;
        u_xlat73 = ((x_2723 * x_2725) + x_2727);
        let x_2730 : vec4<f32> = u_xlat10;
        let x_2731 : vec2<f32> = vec2<f32>(x_2730.z, x_2730.w);
        let x_2733 : f32 = u_xlat2.z;
        txVec42 = vec3<f32>(x_2731.x, x_2731.y, x_2733);
        let x_2740 : vec3<f32> = txVec42;
        let x_2742 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2740.xy, x_2740.z);
        u_xlat8.x = x_2742;
        let x_2744 : f32 = u_xlat72;
        let x_2746 : f32 = u_xlat8.x;
        let x_2748 : f32 = u_xlat73;
        u_xlat0.x = ((x_2744 * x_2746) + x_2748);
      } else {
        let x_2752 : vec4<f32> = u_xlat2;
        let x_2755 : vec4<f32> = x_381.x_MainLightShadowmapSize;
        let x_2758 : vec2<f32> = ((vec2<f32>(x_2752.x, x_2752.y) * vec2<f32>(x_2755.z, x_2755.w)) + vec2<f32>(0.5f, 0.5f));
        let x_2759 : vec4<f32> = u_xlat8;
        u_xlat8 = vec4<f32>(x_2758.x, x_2758.y, x_2759.z, x_2759.w);
        let x_2761 : vec4<f32> = u_xlat8;
        let x_2763 : vec2<f32> = floor(vec2<f32>(x_2761.x, x_2761.y));
        let x_2764 : vec4<f32> = u_xlat8;
        u_xlat8 = vec4<f32>(x_2763.x, x_2763.y, x_2764.z, x_2764.w);
        let x_2766 : vec4<f32> = u_xlat2;
        let x_2769 : vec4<f32> = x_381.x_MainLightShadowmapSize;
        let x_2772 : vec4<f32> = u_xlat8;
        u_xlat52 = ((vec2<f32>(x_2766.x, x_2766.y) * vec2<f32>(x_2769.z, x_2769.w)) + -(vec2<f32>(x_2772.x, x_2772.y)));
        let x_2776 : vec2<f32> = u_xlat52;
        u_xlat9 = (vec4<f32>(x_2776.x, x_2776.x, x_2776.y, x_2776.y) + vec4<f32>(0.5f, 1.0f, 0.5f, 1.0f));
        let x_2779 : vec4<f32> = u_xlat9;
        let x_2781 : vec4<f32> = u_xlat9;
        u_xlat10 = (vec4<f32>(x_2779.x, x_2779.x, x_2779.z, x_2779.z) * vec4<f32>(x_2781.x, x_2781.x, x_2781.z, x_2781.z));
        let x_2784 : vec4<f32> = u_xlat10;
        let x_2786 : vec2<f32> = (vec2<f32>(x_2784.y, x_2784.w) * vec2<f32>(0.040816002f, 0.040816002f));
        let x_2787 : vec4<f32> = u_xlat11;
        u_xlat11 = vec4<f32>(x_2787.x, x_2786.x, x_2787.z, x_2786.y);
        let x_2789 : vec4<f32> = u_xlat10;
        let x_2792 : vec2<f32> = u_xlat52;
        let x_2794 : vec2<f32> = ((vec2<f32>(x_2789.x, x_2789.z) * vec2<f32>(0.5f, 0.5f)) + -(x_2792));
        let x_2795 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_2794.x, x_2795.y, x_2794.y, x_2795.w);
        let x_2797 : vec2<f32> = u_xlat52;
        let x_2799 : vec2<f32> = (-(x_2797) + vec2<f32>(1.0f, 1.0f));
        let x_2800 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_2799.x, x_2799.y, x_2800.z, x_2800.w);
        let x_2802 : vec2<f32> = u_xlat52;
        u_xlat54 = min(x_2802, vec2<f32>(0.0f, 0.0f));
        let x_2804 : vec2<f32> = u_xlat54;
        let x_2806 : vec2<f32> = u_xlat54;
        let x_2808 : vec4<f32> = u_xlat10;
        let x_2810 : vec2<f32> = ((-(x_2804) * x_2806) + vec2<f32>(x_2808.x, x_2808.y));
        let x_2811 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_2810.x, x_2810.y, x_2811.z, x_2811.w);
        let x_2813 : vec2<f32> = u_xlat52;
        u_xlat54 = max(x_2813, vec2<f32>(0.0f, 0.0f));
        let x_2815 : vec2<f32> = u_xlat54;
        let x_2817 : vec2<f32> = u_xlat54;
        let x_2819 : vec4<f32> = u_xlat9;
        let x_2821 : vec2<f32> = ((-(x_2815) * x_2817) + vec2<f32>(x_2819.y, x_2819.w));
        let x_2822 : vec3<f32> = u_xlat31;
        u_xlat31 = vec3<f32>(x_2821.x, x_2822.y, x_2821.y);
        let x_2824 : vec4<f32> = u_xlat10;
        let x_2826 : vec2<f32> = (vec2<f32>(x_2824.x, x_2824.y) + vec2<f32>(2.0f, 2.0f));
        let x_2827 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_2826.x, x_2826.y, x_2827.z, x_2827.w);
        let x_2829 : vec3<f32> = u_xlat31;
        let x_2831 : vec2<f32> = (vec2<f32>(x_2829.x, x_2829.z) + vec2<f32>(2.0f, 2.0f));
        let x_2832 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_2832.x, x_2831.x, x_2832.z, x_2831.y);
        let x_2835 : f32 = u_xlat9.y;
        u_xlat12.z = (x_2835 * 0.081632003f);
        let x_2838 : vec4<f32> = u_xlat9;
        let x_2840 : vec3<f32> = (vec3<f32>(x_2838.z, x_2838.x, x_2838.w) * vec3<f32>(0.081632003f, 0.081632003f, 0.081632003f));
        let x_2841 : vec4<f32> = u_xlat13;
        u_xlat13 = vec4<f32>(x_2840.x, x_2840.y, x_2840.z, x_2841.w);
        let x_2843 : vec4<f32> = u_xlat10;
        let x_2845 : vec2<f32> = (vec2<f32>(x_2843.x, x_2843.y) * vec2<f32>(0.081632003f, 0.081632003f));
        let x_2846 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_2845.x, x_2845.y, x_2846.z, x_2846.w);
        let x_2849 : f32 = u_xlat13.y;
        u_xlat12.x = x_2849;
        let x_2851 : vec2<f32> = u_xlat52;
        let x_2854 : vec2<f32> = ((vec2<f32>(x_2851.x, x_2851.x) * vec2<f32>(-0.081632003f, 0.081632003f)) + vec2<f32>(0.163264006f, 0.081632003f));
        let x_2855 : vec4<f32> = u_xlat12;
        u_xlat12 = vec4<f32>(x_2855.x, x_2854.x, x_2855.z, x_2854.y);
        let x_2857 : vec2<f32> = u_xlat52;
        let x_2860 : vec2<f32> = ((vec2<f32>(x_2857.x, x_2857.x) * vec2<f32>(-0.081632003f, 0.081632003f)) + vec2<f32>(0.081632003f, 0.163264006f));
        let x_2861 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_2860.x, x_2861.y, x_2860.y, x_2861.w);
        let x_2864 : f32 = u_xlat9.x;
        u_xlat10.y = x_2864;
        let x_2867 : f32 = u_xlat11.y;
        u_xlat10.w = x_2867;
        let x_2869 : vec4<f32> = u_xlat10;
        let x_2870 : vec4<f32> = u_xlat12;
        u_xlat12 = (x_2869 + x_2870);
        let x_2872 : vec2<f32> = u_xlat52;
        let x_2875 : vec2<f32> = ((vec2<f32>(x_2872.y, x_2872.y) * vec2<f32>(-0.081632003f, 0.081632003f)) + vec2<f32>(0.163264006f, 0.081632003f));
        let x_2876 : vec4<f32> = u_xlat13;
        u_xlat13 = vec4<f32>(x_2876.x, x_2875.x, x_2876.z, x_2875.y);
        let x_2878 : vec2<f32> = u_xlat52;
        let x_2881 : vec2<f32> = ((vec2<f32>(x_2878.y, x_2878.y) * vec2<f32>(-0.081632003f, 0.081632003f)) + vec2<f32>(0.081632003f, 0.163264006f));
        let x_2882 : vec4<f32> = u_xlat11;
        u_xlat11 = vec4<f32>(x_2881.x, x_2882.y, x_2881.y, x_2882.w);
        let x_2885 : f32 = u_xlat9.y;
        u_xlat11.y = x_2885;
        let x_2887 : vec4<f32> = u_xlat11;
        let x_2888 : vec4<f32> = u_xlat13;
        u_xlat9 = (x_2887 + x_2888);
        let x_2890 : vec4<f32> = u_xlat10;
        let x_2891 : vec4<f32> = u_xlat12;
        u_xlat10 = (x_2890 / x_2891);
        let x_2893 : vec4<f32> = u_xlat10;
        u_xlat10 = (x_2893 + vec4<f32>(-3.5f, -1.5f, 0.5f, 2.5f));
        let x_2895 : vec4<f32> = u_xlat11;
        let x_2896 : vec4<f32> = u_xlat9;
        u_xlat11 = (x_2895 / x_2896);
        let x_2898 : vec4<f32> = u_xlat11;
        u_xlat11 = (x_2898 + vec4<f32>(-3.5f, -1.5f, 0.5f, 2.5f));
        let x_2900 : vec4<f32> = u_xlat10;
        let x_2903 : vec4<f32> = x_381.x_MainLightShadowmapSize;
        u_xlat10 = (vec4<f32>(x_2900.w, x_2900.x, x_2900.y, x_2900.z) * vec4<f32>(x_2903.x, x_2903.x, x_2903.x, x_2903.x));
        let x_2906 : vec4<f32> = u_xlat11;
        let x_2909 : vec4<f32> = x_381.x_MainLightShadowmapSize;
        u_xlat11 = (vec4<f32>(x_2906.x, x_2906.w, x_2906.y, x_2906.z) * vec4<f32>(x_2909.y, x_2909.y, x_2909.y, x_2909.y));
        let x_2912 : vec4<f32> = u_xlat10;
        let x_2913 : vec3<f32> = vec3<f32>(x_2912.y, x_2912.z, x_2912.w);
        let x_2914 : vec4<f32> = u_xlat13;
        u_xlat13 = vec4<f32>(x_2913.x, x_2914.y, x_2913.y, x_2913.z);
        let x_2917 : f32 = u_xlat11.x;
        u_xlat13.y = x_2917;
        let x_2919 : vec4<f32> = u_xlat8;
        let x_2922 : vec4<f32> = x_381.x_MainLightShadowmapSize;
        let x_2925 : vec4<f32> = u_xlat13;
        u_xlat14 = ((vec4<f32>(x_2919.x, x_2919.y, x_2919.x, x_2919.y) * vec4<f32>(x_2922.x, x_2922.y, x_2922.x, x_2922.y)) + vec4<f32>(x_2925.x, x_2925.y, x_2925.z, x_2925.y));
        let x_2928 : vec4<f32> = u_xlat8;
        let x_2931 : vec4<f32> = x_381.x_MainLightShadowmapSize;
        let x_2934 : vec4<f32> = u_xlat13;
        u_xlat52 = ((vec2<f32>(x_2928.x, x_2928.y) * vec2<f32>(x_2931.x, x_2931.y)) + vec2<f32>(x_2934.w, x_2934.y));
        let x_2938 : f32 = u_xlat13.y;
        u_xlat10.y = x_2938;
        let x_2941 : f32 = u_xlat11.z;
        u_xlat13.y = x_2941;
        let x_2943 : vec4<f32> = u_xlat8;
        let x_2946 : vec4<f32> = x_381.x_MainLightShadowmapSize;
        let x_2949 : vec4<f32> = u_xlat13;
        u_xlat15 = ((vec4<f32>(x_2943.x, x_2943.y, x_2943.x, x_2943.y) * vec4<f32>(x_2946.x, x_2946.y, x_2946.x, x_2946.y)) + vec4<f32>(x_2949.x, x_2949.y, x_2949.z, x_2949.y));
        let x_2952 : vec4<f32> = u_xlat8;
        let x_2955 : vec4<f32> = x_381.x_MainLightShadowmapSize;
        let x_2958 : vec4<f32> = u_xlat13;
        let x_2960 : vec2<f32> = ((vec2<f32>(x_2952.x, x_2952.y) * vec2<f32>(x_2955.x, x_2955.y)) + vec2<f32>(x_2958.w, x_2958.y));
        let x_2961 : vec4<f32> = u_xlat16;
        u_xlat16 = vec4<f32>(x_2960.x, x_2960.y, x_2961.z, x_2961.w);
        let x_2964 : f32 = u_xlat13.y;
        u_xlat10.z = x_2964;
        let x_2966 : vec4<f32> = u_xlat8;
        let x_2969 : vec4<f32> = x_381.x_MainLightShadowmapSize;
        let x_2972 : vec4<f32> = u_xlat10;
        u_xlat17 = ((vec4<f32>(x_2966.x, x_2966.y, x_2966.x, x_2966.y) * vec4<f32>(x_2969.x, x_2969.y, x_2969.x, x_2969.y)) + vec4<f32>(x_2972.x, x_2972.y, x_2972.x, x_2972.z));
        let x_2976 : f32 = u_xlat11.w;
        u_xlat13.y = x_2976;
        let x_2978 : vec4<f32> = u_xlat8;
        let x_2981 : vec4<f32> = x_381.x_MainLightShadowmapSize;
        let x_2984 : vec4<f32> = u_xlat13;
        u_xlat18 = ((vec4<f32>(x_2978.x, x_2978.y, x_2978.x, x_2978.y) * vec4<f32>(x_2981.x, x_2981.y, x_2981.x, x_2981.y)) + vec4<f32>(x_2984.x, x_2984.y, x_2984.z, x_2984.y));
        let x_2987 : vec4<f32> = u_xlat8;
        let x_2990 : vec4<f32> = x_381.x_MainLightShadowmapSize;
        let x_2993 : vec4<f32> = u_xlat13;
        u_xlat32 = ((vec2<f32>(x_2987.x, x_2987.y) * vec2<f32>(x_2990.x, x_2990.y)) + vec2<f32>(x_2993.w, x_2993.y));
        let x_2997 : f32 = u_xlat13.y;
        u_xlat10.w = x_2997;
        let x_2999 : vec4<f32> = u_xlat8;
        let x_3002 : vec4<f32> = x_381.x_MainLightShadowmapSize;
        let x_3005 : vec4<f32> = u_xlat10;
        u_xlat60 = ((vec2<f32>(x_2999.x, x_2999.y) * vec2<f32>(x_3002.x, x_3002.y)) + vec2<f32>(x_3005.x, x_3005.w));
        let x_3008 : vec4<f32> = u_xlat13;
        let x_3009 : vec3<f32> = vec3<f32>(x_3008.x, x_3008.z, x_3008.w);
        let x_3010 : vec4<f32> = u_xlat11;
        u_xlat11 = vec4<f32>(x_3009.x, x_3010.y, x_3009.y, x_3009.z);
        let x_3012 : vec4<f32> = u_xlat8;
        let x_3015 : vec4<f32> = x_381.x_MainLightShadowmapSize;
        let x_3018 : vec4<f32> = u_xlat11;
        u_xlat13 = ((vec4<f32>(x_3012.x, x_3012.y, x_3012.x, x_3012.y) * vec4<f32>(x_3015.x, x_3015.y, x_3015.x, x_3015.y)) + vec4<f32>(x_3018.x, x_3018.y, x_3018.z, x_3018.y));
        let x_3021 : vec4<f32> = u_xlat8;
        let x_3024 : vec4<f32> = x_381.x_MainLightShadowmapSize;
        let x_3027 : vec4<f32> = u_xlat11;
        u_xlat55 = ((vec2<f32>(x_3021.x, x_3021.y) * vec2<f32>(x_3024.x, x_3024.y)) + vec2<f32>(x_3027.w, x_3027.y));
        let x_3031 : f32 = u_xlat10.x;
        u_xlat11.x = x_3031;
        let x_3033 : vec4<f32> = u_xlat8;
        let x_3036 : vec4<f32> = x_381.x_MainLightShadowmapSize;
        let x_3039 : vec4<f32> = u_xlat11;
        let x_3041 : vec2<f32> = ((vec2<f32>(x_3033.x, x_3033.y) * vec2<f32>(x_3036.x, x_3036.y)) + vec2<f32>(x_3039.x, x_3039.y));
        let x_3042 : vec4<f32> = u_xlat8;
        u_xlat8 = vec4<f32>(x_3041.x, x_3041.y, x_3042.z, x_3042.w);
        let x_3044 : vec4<f32> = u_xlat9;
        let x_3046 : vec4<f32> = u_xlat12;
        u_xlat19 = (vec4<f32>(x_3044.x, x_3044.x, x_3044.x, x_3044.x) * x_3046);
        let x_3048 : vec4<f32> = u_xlat9;
        let x_3050 : vec4<f32> = u_xlat12;
        u_xlat20 = (vec4<f32>(x_3048.y, x_3048.y, x_3048.y, x_3048.y) * x_3050);
        let x_3052 : vec4<f32> = u_xlat9;
        let x_3054 : vec4<f32> = u_xlat12;
        u_xlat21 = (vec4<f32>(x_3052.z, x_3052.z, x_3052.z, x_3052.z) * x_3054);
        let x_3056 : vec4<f32> = u_xlat9;
        let x_3058 : vec4<f32> = u_xlat12;
        u_xlat9 = (vec4<f32>(x_3056.w, x_3056.w, x_3056.w, x_3056.w) * x_3058);
        let x_3061 : vec4<f32> = u_xlat14;
        let x_3062 : vec2<f32> = vec2<f32>(x_3061.x, x_3061.y);
        let x_3064 : f32 = u_xlat2.z;
        txVec43 = vec3<f32>(x_3062.x, x_3062.y, x_3064);
        let x_3071 : vec3<f32> = txVec43;
        let x_3073 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_3071.xy, x_3071.z);
        u_xlat72 = x_3073;
        let x_3075 : vec4<f32> = u_xlat14;
        let x_3076 : vec2<f32> = vec2<f32>(x_3075.z, x_3075.w);
        let x_3078 : f32 = u_xlat2.z;
        txVec44 = vec3<f32>(x_3076.x, x_3076.y, x_3078);
        let x_3085 : vec3<f32> = txVec44;
        let x_3087 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_3085.xy, x_3085.z);
        u_xlat73 = x_3087;
        let x_3088 : f32 = u_xlat73;
        let x_3090 : f32 = u_xlat19.y;
        u_xlat73 = (x_3088 * x_3090);
        let x_3093 : f32 = u_xlat19.x;
        let x_3094 : f32 = u_xlat72;
        let x_3096 : f32 = u_xlat73;
        u_xlat72 = ((x_3093 * x_3094) + x_3096);
        let x_3099 : vec2<f32> = u_xlat52;
        let x_3101 : f32 = u_xlat2.z;
        txVec45 = vec3<f32>(x_3099.x, x_3099.y, x_3101);
        let x_3108 : vec3<f32> = txVec45;
        let x_3110 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_3108.xy, x_3108.z);
        u_xlat73 = x_3110;
        let x_3112 : f32 = u_xlat19.z;
        let x_3113 : f32 = u_xlat73;
        let x_3115 : f32 = u_xlat72;
        u_xlat72 = ((x_3112 * x_3113) + x_3115);
        let x_3118 : vec4<f32> = u_xlat17;
        let x_3119 : vec2<f32> = vec2<f32>(x_3118.x, x_3118.y);
        let x_3121 : f32 = u_xlat2.z;
        txVec46 = vec3<f32>(x_3119.x, x_3119.y, x_3121);
        let x_3128 : vec3<f32> = txVec46;
        let x_3130 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_3128.xy, x_3128.z);
        u_xlat73 = x_3130;
        let x_3132 : f32 = u_xlat19.w;
        let x_3133 : f32 = u_xlat73;
        let x_3135 : f32 = u_xlat72;
        u_xlat72 = ((x_3132 * x_3133) + x_3135);
        let x_3138 : vec4<f32> = u_xlat15;
        let x_3139 : vec2<f32> = vec2<f32>(x_3138.x, x_3138.y);
        let x_3141 : f32 = u_xlat2.z;
        txVec47 = vec3<f32>(x_3139.x, x_3139.y, x_3141);
        let x_3148 : vec3<f32> = txVec47;
        let x_3150 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_3148.xy, x_3148.z);
        u_xlat73 = x_3150;
        let x_3152 : f32 = u_xlat20.x;
        let x_3153 : f32 = u_xlat73;
        let x_3155 : f32 = u_xlat72;
        u_xlat72 = ((x_3152 * x_3153) + x_3155);
        let x_3158 : vec4<f32> = u_xlat15;
        let x_3159 : vec2<f32> = vec2<f32>(x_3158.z, x_3158.w);
        let x_3161 : f32 = u_xlat2.z;
        txVec48 = vec3<f32>(x_3159.x, x_3159.y, x_3161);
        let x_3168 : vec3<f32> = txVec48;
        let x_3170 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_3168.xy, x_3168.z);
        u_xlat73 = x_3170;
        let x_3172 : f32 = u_xlat20.y;
        let x_3173 : f32 = u_xlat73;
        let x_3175 : f32 = u_xlat72;
        u_xlat72 = ((x_3172 * x_3173) + x_3175);
        let x_3178 : vec4<f32> = u_xlat16;
        let x_3179 : vec2<f32> = vec2<f32>(x_3178.x, x_3178.y);
        let x_3181 : f32 = u_xlat2.z;
        txVec49 = vec3<f32>(x_3179.x, x_3179.y, x_3181);
        let x_3188 : vec3<f32> = txVec49;
        let x_3190 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_3188.xy, x_3188.z);
        u_xlat73 = x_3190;
        let x_3192 : f32 = u_xlat20.z;
        let x_3193 : f32 = u_xlat73;
        let x_3195 : f32 = u_xlat72;
        u_xlat72 = ((x_3192 * x_3193) + x_3195);
        let x_3198 : vec4<f32> = u_xlat17;
        let x_3199 : vec2<f32> = vec2<f32>(x_3198.z, x_3198.w);
        let x_3201 : f32 = u_xlat2.z;
        txVec50 = vec3<f32>(x_3199.x, x_3199.y, x_3201);
        let x_3208 : vec3<f32> = txVec50;
        let x_3210 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_3208.xy, x_3208.z);
        u_xlat73 = x_3210;
        let x_3212 : f32 = u_xlat20.w;
        let x_3213 : f32 = u_xlat73;
        let x_3215 : f32 = u_xlat72;
        u_xlat72 = ((x_3212 * x_3213) + x_3215);
        let x_3218 : vec4<f32> = u_xlat18;
        let x_3219 : vec2<f32> = vec2<f32>(x_3218.x, x_3218.y);
        let x_3221 : f32 = u_xlat2.z;
        txVec51 = vec3<f32>(x_3219.x, x_3219.y, x_3221);
        let x_3228 : vec3<f32> = txVec51;
        let x_3230 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_3228.xy, x_3228.z);
        u_xlat73 = x_3230;
        let x_3232 : f32 = u_xlat21.x;
        let x_3233 : f32 = u_xlat73;
        let x_3235 : f32 = u_xlat72;
        u_xlat72 = ((x_3232 * x_3233) + x_3235);
        let x_3238 : vec4<f32> = u_xlat18;
        let x_3239 : vec2<f32> = vec2<f32>(x_3238.z, x_3238.w);
        let x_3241 : f32 = u_xlat2.z;
        txVec52 = vec3<f32>(x_3239.x, x_3239.y, x_3241);
        let x_3248 : vec3<f32> = txVec52;
        let x_3250 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_3248.xy, x_3248.z);
        u_xlat73 = x_3250;
        let x_3252 : f32 = u_xlat21.y;
        let x_3253 : f32 = u_xlat73;
        let x_3255 : f32 = u_xlat72;
        u_xlat72 = ((x_3252 * x_3253) + x_3255);
        let x_3258 : vec2<f32> = u_xlat32;
        let x_3260 : f32 = u_xlat2.z;
        txVec53 = vec3<f32>(x_3258.x, x_3258.y, x_3260);
        let x_3267 : vec3<f32> = txVec53;
        let x_3269 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_3267.xy, x_3267.z);
        u_xlat73 = x_3269;
        let x_3271 : f32 = u_xlat21.z;
        let x_3272 : f32 = u_xlat73;
        let x_3274 : f32 = u_xlat72;
        u_xlat72 = ((x_3271 * x_3272) + x_3274);
        let x_3277 : vec2<f32> = u_xlat60;
        let x_3279 : f32 = u_xlat2.z;
        txVec54 = vec3<f32>(x_3277.x, x_3277.y, x_3279);
        let x_3286 : vec3<f32> = txVec54;
        let x_3288 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_3286.xy, x_3286.z);
        u_xlat73 = x_3288;
        let x_3290 : f32 = u_xlat21.w;
        let x_3291 : f32 = u_xlat73;
        let x_3293 : f32 = u_xlat72;
        u_xlat72 = ((x_3290 * x_3291) + x_3293);
        let x_3296 : vec4<f32> = u_xlat13;
        let x_3297 : vec2<f32> = vec2<f32>(x_3296.x, x_3296.y);
        let x_3299 : f32 = u_xlat2.z;
        txVec55 = vec3<f32>(x_3297.x, x_3297.y, x_3299);
        let x_3306 : vec3<f32> = txVec55;
        let x_3308 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_3306.xy, x_3306.z);
        u_xlat73 = x_3308;
        let x_3310 : f32 = u_xlat9.x;
        let x_3311 : f32 = u_xlat73;
        let x_3313 : f32 = u_xlat72;
        u_xlat72 = ((x_3310 * x_3311) + x_3313);
        let x_3316 : vec4<f32> = u_xlat13;
        let x_3317 : vec2<f32> = vec2<f32>(x_3316.z, x_3316.w);
        let x_3319 : f32 = u_xlat2.z;
        txVec56 = vec3<f32>(x_3317.x, x_3317.y, x_3319);
        let x_3326 : vec3<f32> = txVec56;
        let x_3328 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_3326.xy, x_3326.z);
        u_xlat73 = x_3328;
        let x_3330 : f32 = u_xlat9.y;
        let x_3331 : f32 = u_xlat73;
        let x_3333 : f32 = u_xlat72;
        u_xlat72 = ((x_3330 * x_3331) + x_3333);
        let x_3336 : vec2<f32> = u_xlat55;
        let x_3338 : f32 = u_xlat2.z;
        txVec57 = vec3<f32>(x_3336.x, x_3336.y, x_3338);
        let x_3345 : vec3<f32> = txVec57;
        let x_3347 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_3345.xy, x_3345.z);
        u_xlat73 = x_3347;
        let x_3349 : f32 = u_xlat9.z;
        let x_3350 : f32 = u_xlat73;
        let x_3352 : f32 = u_xlat72;
        u_xlat72 = ((x_3349 * x_3350) + x_3352);
        let x_3355 : vec4<f32> = u_xlat8;
        let x_3356 : vec2<f32> = vec2<f32>(x_3355.x, x_3355.y);
        let x_3358 : f32 = u_xlat2.z;
        txVec58 = vec3<f32>(x_3356.x, x_3356.y, x_3358);
        let x_3365 : vec3<f32> = txVec58;
        let x_3367 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_3365.xy, x_3365.z);
        u_xlat73 = x_3367;
        let x_3369 : f32 = u_xlat9.w;
        let x_3370 : f32 = u_xlat73;
        let x_3372 : f32 = u_xlat72;
        u_xlat0.x = ((x_3369 * x_3370) + x_3372);
      }
    }
  } else {
    let x_3377 : vec4<f32> = u_xlat2;
    let x_3378 : vec2<f32> = vec2<f32>(x_3377.x, x_3377.y);
    let x_3380 : f32 = u_xlat2.z;
    txVec59 = vec3<f32>(x_3378.x, x_3378.y, x_3380);
    let x_3387 : vec3<f32> = txVec59;
    let x_3389 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_3387.xy, x_3387.z);
    u_xlat0.x = x_3389;
  }
  let x_3392 : f32 = u_xlat0.x;
  let x_3394 : f32 = x_381.x_MainLightShadowParams.x;
  let x_3396 : f32 = u_xlat68;
  u_xlat0.x = ((x_3392 * x_3394) + x_3396);
  let x_3399 : bool = u_xlatb3;
  if (x_3399) {
    x_3400 = 1.0f;
  } else {
    let x_3405 : f32 = u_xlat0.x;
    x_3400 = x_3405;
  }
  let x_3406 : f32 = x_3400;
  u_xlat0.x = x_3406;
  let x_3408 : vec3<f32> = vs_INTERP0;
  let x_3410 : vec3<f32> = x_160.x_WorldSpaceCameraPos;
  let x_3412 : vec3<f32> = (x_3408 + -(x_3410));
  let x_3413 : vec4<f32> = u_xlat2;
  u_xlat2 = vec4<f32>(x_3412.x, x_3412.y, x_3412.z, x_3413.w);
  let x_3415 : vec4<f32> = u_xlat2;
  let x_3417 : vec4<f32> = u_xlat2;
  u_xlat2.x = dot(vec3<f32>(x_3415.x, x_3415.y, x_3415.z), vec3<f32>(x_3417.x, x_3417.y, x_3417.z));
  let x_3422 : f32 = u_xlat2.x;
  let x_3424 : f32 = x_381.x_MainLightShadowParams.z;
  let x_3427 : f32 = x_381.x_MainLightShadowParams.w;
  u_xlat2.x = ((x_3422 * x_3424) + x_3427);
  let x_3431 : f32 = u_xlat2.x;
  u_xlat2.x = clamp(x_3431, 0.0f, 1.0f);
  let x_3436 : f32 = u_xlat0.x;
  u_xlat24 = (-(x_3436) + 1.0f);
  let x_3440 : f32 = u_xlat2.x;
  let x_3441 : f32 = u_xlat24;
  let x_3444 : f32 = u_xlat0.x;
  u_xlat0.x = ((x_3440 * x_3441) + x_3444);
  let x_3453 : f32 = x_3451.x_MainLightCookieTextureFormat;
  u_xlatb2.x = !((x_3453 == -1.0f));
  let x_3457 : bool = u_xlatb2.x;
  if (x_3457) {
    let x_3460 : vec3<f32> = vs_INTERP0;
    let x_3463 : vec4<f32> = x_3451.x_MainLightWorldToLight[1i];
    let x_3465 : vec2<f32> = (vec2<f32>(x_3460.y, x_3460.y) * vec2<f32>(x_3463.x, x_3463.y));
    let x_3466 : vec4<f32> = u_xlat2;
    u_xlat2 = vec4<f32>(x_3465.x, x_3465.y, x_3466.z, x_3466.w);
    let x_3469 : vec4<f32> = x_3451.x_MainLightWorldToLight[0i];
    let x_3471 : vec3<f32> = vs_INTERP0;
    let x_3474 : vec4<f32> = u_xlat2;
    let x_3476 : vec2<f32> = ((vec2<f32>(x_3469.x, x_3469.y) * vec2<f32>(x_3471.x, x_3471.x)) + vec2<f32>(x_3474.x, x_3474.y));
    let x_3477 : vec4<f32> = u_xlat2;
    u_xlat2 = vec4<f32>(x_3476.x, x_3476.y, x_3477.z, x_3477.w);
    let x_3480 : vec4<f32> = x_3451.x_MainLightWorldToLight[2i];
    let x_3482 : vec3<f32> = vs_INTERP0;
    let x_3485 : vec4<f32> = u_xlat2;
    let x_3487 : vec2<f32> = ((vec2<f32>(x_3480.x, x_3480.y) * vec2<f32>(x_3482.z, x_3482.z)) + vec2<f32>(x_3485.x, x_3485.y));
    let x_3488 : vec4<f32> = u_xlat2;
    u_xlat2 = vec4<f32>(x_3487.x, x_3487.y, x_3488.z, x_3488.w);
    let x_3490 : vec4<f32> = u_xlat2;
    let x_3493 : vec4<f32> = x_3451.x_MainLightWorldToLight[3i];
    let x_3495 : vec2<f32> = (vec2<f32>(x_3490.x, x_3490.y) + vec2<f32>(x_3493.x, x_3493.y));
    let x_3496 : vec4<f32> = u_xlat2;
    u_xlat2 = vec4<f32>(x_3495.x, x_3495.y, x_3496.z, x_3496.w);
    let x_3498 : vec4<f32> = u_xlat2;
    let x_3501 : vec2<f32> = ((vec2<f32>(x_3498.x, x_3498.y) * vec2<f32>(0.5f, 0.5f)) + vec2<f32>(0.5f, 0.5f));
    let x_3502 : vec4<f32> = u_xlat2;
    u_xlat2 = vec4<f32>(x_3501.x, x_3501.y, x_3502.z, x_3502.w);
    let x_3509 : vec4<f32> = u_xlat2;
    let x_3512 : f32 = x_160.x_GlobalMipBias.x;
    let x_3513 : vec4<f32> = textureSampleBias(x_MainLightCookieTexture, sampler_MainLightCookieTexture, vec2<f32>(x_3509.x, x_3509.y), x_3512);
    u_xlat2 = x_3513;
    let x_3516 : f32 = x_3451.x_MainLightCookieTextureFormat;
    let x_3518 : f32 = x_3451.x_MainLightCookieTextureFormat;
    let x_3520 : f32 = x_3451.x_MainLightCookieTextureFormat;
    let x_3522 : f32 = x_3451.x_MainLightCookieTextureFormat;
    let x_3523 : vec4<f32> = vec4<f32>(x_3516, x_3518, x_3520, x_3522);
    let x_3530 : vec4<bool> = (vec4<f32>(x_3523.x, x_3523.y, x_3523.z, x_3523.w) == vec4<f32>(0.0f, 1.0f, 0.0f, 0.0f));
    u_xlatb8 = vec2<bool>(x_3530.x, x_3530.y);
    let x_3533 : bool = u_xlatb8.y;
    if (x_3533) {
      let x_3538 : f32 = u_xlat2.w;
      x_3534 = x_3538;
    } else {
      let x_3541 : f32 = u_xlat2.x;
      x_3534 = x_3541;
    }
    let x_3542 : f32 = x_3534;
    u_xlat68 = x_3542;
    let x_3544 : bool = u_xlatb8.x;
    if (x_3544) {
      let x_3548 : vec4<f32> = u_xlat2;
      x_3545 = vec3<f32>(x_3548.x, x_3548.y, x_3548.z);
    } else {
      let x_3551 : f32 = u_xlat68;
      x_3545 = vec3<f32>(x_3551, x_3551, x_3551);
    }
    let x_3553 : vec3<f32> = x_3545;
    let x_3554 : vec4<f32> = u_xlat2;
    u_xlat2 = vec4<f32>(x_3553.x, x_3553.y, x_3553.z, x_3554.w);
  } else {
    u_xlat2.x = 1.0f;
    u_xlat2.y = 1.0f;
    u_xlat2.z = 1.0f;
  }
  let x_3560 : vec4<f32> = u_xlat2;
  let x_3563 : vec4<f32> = x_160.x_MainLightColor;
  let x_3565 : vec3<f32> = (vec3<f32>(x_3560.x, x_3560.y, x_3560.z) * vec3<f32>(x_3563.x, x_3563.y, x_3563.z));
  let x_3566 : vec4<f32> = u_xlat2;
  u_xlat2 = vec4<f32>(x_3565.x, x_3565.y, x_3565.z, x_3566.w);
  let x_3568 : f32 = u_xlat50;
  let x_3570 : vec4<f32> = u_xlat2;
  let x_3572 : vec3<f32> = (vec3<f32>(x_3568, x_3568, x_3568) * vec3<f32>(x_3570.x, x_3570.y, x_3570.z));
  let x_3573 : vec4<f32> = u_xlat2;
  u_xlat2 = vec4<f32>(x_3572.x, x_3572.y, x_3572.z, x_3573.w);
  let x_3575 : vec3<f32> = u_xlat5;
  let x_3577 : vec3<f32> = u_xlat22;
  u_xlat68 = dot(-(x_3575), x_3577);
  let x_3579 : f32 = u_xlat68;
  let x_3580 : f32 = u_xlat68;
  u_xlat68 = (x_3579 + x_3580);
  let x_3582 : vec3<f32> = u_xlat22;
  let x_3583 : f32 = u_xlat68;
  let x_3587 : vec3<f32> = u_xlat5;
  let x_3589 : vec3<f32> = ((x_3582 * -(vec3<f32>(x_3583, x_3583, x_3583))) + -(x_3587));
  let x_3590 : vec4<f32> = u_xlat8;
  u_xlat8 = vec4<f32>(x_3589.x, x_3589.y, x_3589.z, x_3590.w);
  let x_3592 : vec3<f32> = u_xlat22;
  let x_3593 : vec3<f32> = u_xlat5;
  u_xlat68 = dot(x_3592, x_3593);
  let x_3595 : f32 = u_xlat68;
  u_xlat68 = clamp(x_3595, 0.0f, 1.0f);
  let x_3597 : f32 = u_xlat68;
  u_xlat68 = (-(x_3597) + 1.0f);
  let x_3600 : f32 = u_xlat68;
  let x_3601 : f32 = u_xlat68;
  u_xlat68 = (x_3600 * x_3601);
  let x_3603 : f32 = u_xlat68;
  let x_3604 : f32 = u_xlat68;
  u_xlat68 = (x_3603 * x_3604);
  let x_3607 : f32 = u_xlat47.x;
  u_xlat3.x = ((-(x_3607) * 0.699999988f) + 1.700000048f);
  let x_3615 : f32 = u_xlat3.x;
  let x_3617 : f32 = u_xlat47.x;
  u_xlat3.x = (x_3615 * x_3617);
  let x_3621 : f32 = u_xlat3.x;
  u_xlat3.x = (x_3621 * 6.0f);
  let x_3633 : vec4<f32> = u_xlat8;
  let x_3636 : f32 = u_xlat3.x;
  let x_3637 : vec4<f32> = textureSampleLevel(unity_SpecCube0, samplerunity_SpecCube0, vec3<f32>(x_3633.x, x_3633.y, x_3633.z), x_3636);
  u_xlat8 = x_3637;
  let x_3639 : f32 = u_xlat8.w;
  u_xlat3.x = (x_3639 + -1.0f);
  let x_3643 : f32 = x_95.unity_SpecCube0_HDR.w;
  let x_3645 : f32 = u_xlat3.x;
  u_xlat3.x = ((x_3643 * x_3645) + 1.0f);
  let x_3650 : f32 = u_xlat3.x;
  u_xlat3.x = max(x_3650, 0.0f);
  let x_3654 : f32 = u_xlat3.x;
  u_xlat3.x = log2(x_3654);
  let x_3658 : f32 = u_xlat3.x;
  let x_3660 : f32 = x_95.unity_SpecCube0_HDR.y;
  u_xlat3.x = (x_3658 * x_3660);
  let x_3664 : f32 = u_xlat3.x;
  u_xlat3.x = exp2(x_3664);
  let x_3668 : f32 = u_xlat3.x;
  let x_3670 : f32 = x_95.unity_SpecCube0_HDR.x;
  u_xlat3.x = (x_3668 * x_3670);
  let x_3673 : vec4<f32> = u_xlat8;
  let x_3675 : vec4<f32> = u_xlat3;
  let x_3677 : vec3<f32> = (vec3<f32>(x_3673.x, x_3673.y, x_3673.z) * vec3<f32>(x_3675.x, x_3675.x, x_3675.x));
  let x_3678 : vec4<f32> = u_xlat8;
  u_xlat8 = vec4<f32>(x_3677.x, x_3677.y, x_3677.z, x_3678.w);
  let x_3680 : f32 = u_xlat69;
  let x_3682 : f32 = u_xlat69;
  let x_3686 : vec2<f32> = ((vec2<f32>(x_3680, x_3680) * vec2<f32>(x_3682, x_3682)) + vec2<f32>(-1.0f, 1.0f));
  let x_3687 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_3686.x, x_3687.y, x_3686.y, x_3687.w);
  let x_3690 : f32 = u_xlat3.z;
  u_xlat47.x = (1.0f / x_3690);
  let x_3693 : f32 = u_xlat71;
  u_xlat69 = (x_3693 + -0.039999999f);
  let x_3696 : f32 = u_xlat68;
  let x_3697 : f32 = u_xlat69;
  u_xlat68 = ((x_3696 * x_3697) + 0.039999999f);
  let x_3701 : f32 = u_xlat68;
  let x_3703 : f32 = u_xlat47.x;
  u_xlat68 = (x_3701 * x_3703);
  let x_3705 : f32 = u_xlat68;
  let x_3707 : vec4<f32> = u_xlat8;
  let x_3709 : vec3<f32> = (vec3<f32>(x_3705, x_3705, x_3705) * vec3<f32>(x_3707.x, x_3707.y, x_3707.z));
  let x_3710 : vec4<f32> = u_xlat8;
  u_xlat8 = vec4<f32>(x_3709.x, x_3709.y, x_3709.z, x_3710.w);
  let x_3712 : vec3<f32> = u_xlat4;
  let x_3713 : vec3<f32> = u_xlat7;
  let x_3715 : vec4<f32> = u_xlat8;
  u_xlat4 = ((x_3712 * x_3713) + vec3<f32>(x_3715.x, x_3715.y, x_3715.z));
  let x_3719 : f32 = u_xlat0.x;
  let x_3721 : f32 = x_95.unity_LightData.z;
  u_xlat0.x = (x_3719 * x_3721);
  let x_3724 : vec3<f32> = u_xlat22;
  let x_3726 : vec4<f32> = x_160.x_MainLightPosition;
  u_xlat68 = dot(x_3724, vec3<f32>(x_3726.x, x_3726.y, x_3726.z));
  let x_3729 : f32 = u_xlat68;
  u_xlat68 = clamp(x_3729, 0.0f, 1.0f);
  let x_3732 : f32 = u_xlat0.x;
  let x_3733 : f32 = u_xlat68;
  u_xlat0.x = (x_3732 * x_3733);
  let x_3736 : vec3<f32> = u_xlat0;
  let x_3738 : vec4<f32> = u_xlat2;
  let x_3740 : vec3<f32> = (vec3<f32>(x_3736.x, x_3736.x, x_3736.x) * vec3<f32>(x_3738.x, x_3738.y, x_3738.z));
  let x_3741 : vec4<f32> = u_xlat2;
  u_xlat2 = vec4<f32>(x_3740.x, x_3740.y, x_3740.z, x_3741.w);
  let x_3743 : vec3<f32> = u_xlat5;
  let x_3745 : vec4<f32> = x_160.x_MainLightPosition;
  let x_3747 : vec3<f32> = (x_3743 + vec3<f32>(x_3745.x, x_3745.y, x_3745.z));
  let x_3748 : vec4<f32> = u_xlat8;
  u_xlat8 = vec4<f32>(x_3747.x, x_3747.y, x_3747.z, x_3748.w);
  let x_3750 : vec4<f32> = u_xlat8;
  let x_3752 : vec4<f32> = u_xlat8;
  u_xlat0.x = dot(vec3<f32>(x_3750.x, x_3750.y, x_3750.z), vec3<f32>(x_3752.x, x_3752.y, x_3752.z));
  let x_3757 : f32 = u_xlat0.x;
  u_xlat0.x = max(x_3757, 1.17549435e-37f);
  let x_3761 : f32 = u_xlat0.x;
  u_xlat0.x = inverseSqrt(x_3761);
  let x_3764 : vec3<f32> = u_xlat0;
  let x_3766 : vec4<f32> = u_xlat8;
  let x_3768 : vec3<f32> = (vec3<f32>(x_3764.x, x_3764.x, x_3764.x) * vec3<f32>(x_3766.x, x_3766.y, x_3766.z));
  let x_3769 : vec4<f32> = u_xlat8;
  u_xlat8 = vec4<f32>(x_3768.x, x_3768.y, x_3768.z, x_3769.w);
  let x_3771 : vec3<f32> = u_xlat22;
  let x_3772 : vec4<f32> = u_xlat8;
  u_xlat0.x = dot(x_3771, vec3<f32>(x_3772.x, x_3772.y, x_3772.z));
  let x_3777 : f32 = u_xlat0.x;
  u_xlat0.x = clamp(x_3777, 0.0f, 1.0f);
  let x_3781 : vec4<f32> = x_160.x_MainLightPosition;
  let x_3783 : vec4<f32> = u_xlat8;
  u_xlat68 = dot(vec3<f32>(x_3781.x, x_3781.y, x_3781.z), vec3<f32>(x_3783.x, x_3783.y, x_3783.z));
  let x_3786 : f32 = u_xlat68;
  u_xlat68 = clamp(x_3786, 0.0f, 1.0f);
  let x_3789 : f32 = u_xlat0.x;
  let x_3791 : f32 = u_xlat0.x;
  u_xlat0.x = (x_3789 * x_3791);
  let x_3795 : f32 = u_xlat0.x;
  let x_3797 : f32 = u_xlat3.x;
  u_xlat0.x = ((x_3795 * x_3797) + 1.000010014f);
  let x_3802 : f32 = u_xlat68;
  let x_3803 : f32 = u_xlat68;
  u_xlat68 = (x_3802 * x_3803);
  let x_3806 : f32 = u_xlat0.x;
  let x_3808 : f32 = u_xlat0.x;
  u_xlat0.x = (x_3806 * x_3808);
  let x_3811 : f32 = u_xlat68;
  u_xlat68 = max(x_3811, 0.100000001f);
  let x_3815 : f32 = u_xlat0.x;
  let x_3816 : f32 = u_xlat68;
  u_xlat0.x = (x_3815 * x_3816);
  let x_3819 : f32 = u_xlat28;
  let x_3821 : f32 = u_xlat0.x;
  u_xlat0.x = (x_3819 * x_3821);
  let x_3824 : f32 = u_xlat70;
  let x_3826 : f32 = u_xlat0.x;
  u_xlat0.x = (x_3824 / x_3826);
  let x_3829 : vec3<f32> = u_xlat0;
  let x_3833 : vec3<f32> = u_xlat7;
  let x_3834 : vec3<f32> = ((vec3<f32>(x_3829.x, x_3829.x, x_3829.x) * vec3<f32>(0.039999999f, 0.039999999f, 0.039999999f)) + x_3833);
  let x_3835 : vec4<f32> = u_xlat8;
  u_xlat8 = vec4<f32>(x_3834.x, x_3834.y, x_3834.z, x_3835.w);
  let x_3837 : vec4<f32> = u_xlat2;
  let x_3839 : vec4<f32> = u_xlat8;
  let x_3841 : vec3<f32> = (vec3<f32>(x_3837.x, x_3837.y, x_3837.z) * vec3<f32>(x_3839.x, x_3839.y, x_3839.z));
  let x_3842 : vec4<f32> = u_xlat2;
  u_xlat2 = vec4<f32>(x_3841.x, x_3841.y, x_3841.z, x_3842.w);
  let x_3845 : f32 = x_160.x_AdditionalLightsCount.x;
  let x_3847 : f32 = x_95.unity_LightData.y;
  u_xlat0.x = min(x_3845, x_3847);
  let x_3851 : f32 = u_xlat0.x;
  u_xlatu0 = bitcast<u32>(i32(x_3851));
  let x_3855 : f32 = x_3451.x_AdditionalLightsCookieAtlasTextureFormat;
  let x_3857 : f32 = x_3451.x_AdditionalLightsCookieAtlasTextureFormat;
  let x_3859 : f32 = x_3451.x_AdditionalLightsCookieAtlasTextureFormat;
  let x_3861 : f32 = x_3451.x_AdditionalLightsCookieAtlasTextureFormat;
  let x_3862 : vec4<f32> = vec4<f32>(x_3855, x_3857, x_3859, x_3861);
  let x_3869 : vec4<bool> = (vec4<f32>(x_3862.x, x_3862.y, x_3862.z, x_3862.w) == vec4<f32>(0.0f, 1.0f, 0.0f, 1.0f));
  u_xlatb47 = vec2<bool>(x_3869.x, x_3869.y);
  u_xlat8.x = 0.0f;
  u_xlat8.y = 0.0f;
  u_xlat8.z = 0.0f;
  u_xlatu_loop_1 = 0u;
  loop {
    let x_3880 : u32 = u_xlatu_loop_1;
    let x_3881 : u32 = u_xlatu0;
    if ((x_3880 < x_3881)) {
    } else {
      break;
    }
    let x_3884 : u32 = u_xlatu_loop_1;
    u_xlatu71 = (x_3884 >> 2u);
    let x_3887 : u32 = u_xlatu_loop_1;
    u_xlati72 = bitcast<i32>((x_3887 & 3u));
    let x_3890 : u32 = u_xlatu71;
    let x_3893 : vec4<f32> = x_95.unity_LightIndices[bitcast<i32>(x_3890)];
    let x_3903 : i32 = u_xlati72;
    indexable = array<vec4<u32>, 4u>(vec4<u32>(1065353216u, 0u, 0u, 0u), vec4<u32>(0u, 1065353216u, 0u, 0u), vec4<u32>(0u, 0u, 1065353216u, 0u), vec4<u32>(0u, 0u, 0u, 1065353216u));
    let x_3908 : vec4<u32> = indexable[x_3903];
    u_xlat71 = dot(x_3893, bitcast<vec4<f32>>(x_3908));
    let x_3911 : f32 = u_xlat71;
    u_xlatu71 = bitcast<u32>(i32(x_3911));
    let x_3914 : vec3<f32> = vs_INTERP0;
    let x_3926 : u32 = u_xlatu71;
    let x_3929 : vec4<f32> = x_3925.x_AdditionalLightsPosition[bitcast<i32>(x_3926)];
    let x_3932 : u32 = u_xlatu71;
    let x_3935 : vec4<f32> = x_3925.x_AdditionalLightsPosition[bitcast<i32>(x_3932)];
    let x_3937 : vec3<f32> = ((-(x_3914) * vec3<f32>(x_3929.w, x_3929.w, x_3929.w)) + vec3<f32>(x_3935.x, x_3935.y, x_3935.z));
    let x_3938 : vec4<f32> = u_xlat9;
    u_xlat9 = vec4<f32>(x_3937.x, x_3937.y, x_3937.z, x_3938.w);
    let x_3940 : vec4<f32> = u_xlat9;
    let x_3942 : vec4<f32> = u_xlat9;
    u_xlat72 = dot(vec3<f32>(x_3940.x, x_3940.y, x_3940.z), vec3<f32>(x_3942.x, x_3942.y, x_3942.z));
    let x_3945 : f32 = u_xlat72;
    u_xlat72 = max(x_3945, 6.10351562e-05f);
    let x_3948 : f32 = u_xlat72;
    u_xlat73 = inverseSqrt(x_3948);
    let x_3950 : f32 = u_xlat73;
    let x_3952 : vec4<f32> = u_xlat9;
    let x_3954 : vec3<f32> = (vec3<f32>(x_3950, x_3950, x_3950) * vec3<f32>(x_3952.x, x_3952.y, x_3952.z));
    let x_3955 : vec4<f32> = u_xlat10;
    u_xlat10 = vec4<f32>(x_3954.x, x_3954.y, x_3954.z, x_3955.w);
    let x_3958 : f32 = u_xlat72;
    u_xlat74 = (1.0f / x_3958);
    let x_3960 : f32 = u_xlat72;
    let x_3961 : u32 = u_xlatu71;
    let x_3964 : f32 = x_3925.x_AdditionalLightsAttenuation[bitcast<i32>(x_3961)].x;
    u_xlat72 = (x_3960 * x_3964);
    let x_3966 : f32 = u_xlat72;
    let x_3968 : f32 = u_xlat72;
    u_xlat72 = ((-(x_3966) * x_3968) + 1.0f);
    let x_3971 : f32 = u_xlat72;
    u_xlat72 = max(x_3971, 0.0f);
    let x_3973 : f32 = u_xlat72;
    let x_3974 : f32 = u_xlat72;
    u_xlat72 = (x_3973 * x_3974);
    let x_3976 : f32 = u_xlat72;
    let x_3977 : f32 = u_xlat74;
    u_xlat72 = (x_3976 * x_3977);
    let x_3979 : u32 = u_xlatu71;
    let x_3982 : vec4<f32> = x_3925.x_AdditionalLightsSpotDir[bitcast<i32>(x_3979)];
    let x_3984 : vec4<f32> = u_xlat10;
    u_xlat74 = dot(vec3<f32>(x_3982.x, x_3982.y, x_3982.z), vec3<f32>(x_3984.x, x_3984.y, x_3984.z));
    let x_3987 : f32 = u_xlat74;
    let x_3988 : u32 = u_xlatu71;
    let x_3991 : f32 = x_3925.x_AdditionalLightsAttenuation[bitcast<i32>(x_3988)].z;
    let x_3993 : u32 = u_xlatu71;
    let x_3996 : f32 = x_3925.x_AdditionalLightsAttenuation[bitcast<i32>(x_3993)].w;
    u_xlat74 = ((x_3987 * x_3991) + x_3996);
    let x_3998 : f32 = u_xlat74;
    u_xlat74 = clamp(x_3998, 0.0f, 1.0f);
    let x_4000 : f32 = u_xlat74;
    let x_4001 : f32 = u_xlat74;
    u_xlat74 = (x_4000 * x_4001);
    let x_4003 : f32 = u_xlat72;
    let x_4004 : f32 = u_xlat74;
    u_xlat72 = (x_4003 * x_4004);
    let x_4007 : u32 = u_xlatu71;
    u_xlatu74 = (x_4007 >> 5u);
    let x_4010 : u32 = u_xlatu71;
    u_xlati75 = (1i << bitcast<u32>((bitcast<i32>(x_4010) & 31i)));
    let x_4016 : i32 = u_xlati75;
    let x_4018 : u32 = u_xlatu74;
    let x_4021 : f32 = x_3451.x_AdditionalLightsCookieEnableBits[bitcast<i32>(x_4018)].el;
    u_xlati74 = bitcast<i32>((bitcast<u32>(x_4016) & bitcast<u32>(x_4021)));
    let x_4025 : i32 = u_xlati74;
    if ((x_4025 != 0i)) {
      let x_4035 : u32 = u_xlatu71;
      let x_4038 : f32 = x_4034.x_AdditionalLightsLightTypes[bitcast<i32>(x_4035)].el;
      u_xlati74 = i32(x_4038);
      let x_4040 : i32 = u_xlati74;
      u_xlati75 = select(1i, 0i, (x_4040 != 0i));
      let x_4044 : u32 = u_xlatu71;
      u_xlati76 = (bitcast<i32>(x_4044) << bitcast<u32>(2i));
      let x_4047 : i32 = u_xlati75;
      if ((x_4047 != 0i)) {
        let x_4051 : vec3<f32> = vs_INTERP0;
        let x_4053 : i32 = u_xlati76;
        let x_4056 : i32 = u_xlati76;
        let x_4060 : vec4<f32> = x_4034.x_AdditionalLightsWorldToLights[((x_4053 + 1i) / 4i)][((x_4056 + 1i) % 4i)];
        let x_4062 : vec3<f32> = (vec3<f32>(x_4051.y, x_4051.y, x_4051.y) * vec3<f32>(x_4060.x, x_4060.y, x_4060.w));
        let x_4063 : vec4<f32> = u_xlat11;
        u_xlat11 = vec4<f32>(x_4062.x, x_4062.y, x_4062.z, x_4063.w);
        let x_4065 : i32 = u_xlati76;
        let x_4067 : i32 = u_xlati76;
        let x_4070 : vec4<f32> = x_4034.x_AdditionalLightsWorldToLights[(x_4065 / 4i)][(x_4067 % 4i)];
        let x_4072 : vec3<f32> = vs_INTERP0;
        let x_4075 : vec4<f32> = u_xlat11;
        let x_4077 : vec3<f32> = ((vec3<f32>(x_4070.x, x_4070.y, x_4070.w) * vec3<f32>(x_4072.x, x_4072.x, x_4072.x)) + vec3<f32>(x_4075.x, x_4075.y, x_4075.z));
        let x_4078 : vec4<f32> = u_xlat11;
        u_xlat11 = vec4<f32>(x_4077.x, x_4077.y, x_4077.z, x_4078.w);
        let x_4080 : i32 = u_xlati76;
        let x_4083 : i32 = u_xlati76;
        let x_4087 : vec4<f32> = x_4034.x_AdditionalLightsWorldToLights[((x_4080 + 2i) / 4i)][((x_4083 + 2i) % 4i)];
        let x_4089 : vec3<f32> = vs_INTERP0;
        let x_4092 : vec4<f32> = u_xlat11;
        let x_4094 : vec3<f32> = ((vec3<f32>(x_4087.x, x_4087.y, x_4087.w) * vec3<f32>(x_4089.z, x_4089.z, x_4089.z)) + vec3<f32>(x_4092.x, x_4092.y, x_4092.z));
        let x_4095 : vec4<f32> = u_xlat11;
        u_xlat11 = vec4<f32>(x_4094.x, x_4094.y, x_4094.z, x_4095.w);
        let x_4097 : vec4<f32> = u_xlat11;
        let x_4099 : i32 = u_xlati76;
        let x_4102 : i32 = u_xlati76;
        let x_4106 : vec4<f32> = x_4034.x_AdditionalLightsWorldToLights[((x_4099 + 3i) / 4i)][((x_4102 + 3i) % 4i)];
        let x_4108 : vec3<f32> = (vec3<f32>(x_4097.x, x_4097.y, x_4097.z) + vec3<f32>(x_4106.x, x_4106.y, x_4106.w));
        let x_4109 : vec4<f32> = u_xlat11;
        u_xlat11 = vec4<f32>(x_4108.x, x_4108.y, x_4108.z, x_4109.w);
        let x_4111 : vec4<f32> = u_xlat11;
        let x_4113 : vec4<f32> = u_xlat11;
        let x_4115 : vec2<f32> = (vec2<f32>(x_4111.x, x_4111.y) / vec2<f32>(x_4113.z, x_4113.z));
        let x_4116 : vec4<f32> = u_xlat11;
        u_xlat11 = vec4<f32>(x_4115.x, x_4115.y, x_4116.z, x_4116.w);
        let x_4118 : vec4<f32> = u_xlat11;
        let x_4121 : vec2<f32> = ((vec2<f32>(x_4118.x, x_4118.y) * vec2<f32>(0.5f, 0.5f)) + vec2<f32>(0.5f, 0.5f));
        let x_4122 : vec4<f32> = u_xlat11;
        u_xlat11 = vec4<f32>(x_4121.x, x_4121.y, x_4122.z, x_4122.w);
        let x_4124 : vec4<f32> = u_xlat11;
        let x_4128 : vec2<f32> = clamp(vec2<f32>(x_4124.x, x_4124.y), vec2<f32>(0.0f, 0.0f), vec2<f32>(1.0f, 1.0f));
        let x_4129 : vec4<f32> = u_xlat11;
        u_xlat11 = vec4<f32>(x_4128.x, x_4128.y, x_4129.z, x_4129.w);
        let x_4131 : u32 = u_xlatu71;
        let x_4134 : vec4<f32> = x_4034.x_AdditionalLightsCookieAtlasUVRects[bitcast<i32>(x_4131)];
        let x_4136 : vec4<f32> = u_xlat11;
        let x_4139 : u32 = u_xlatu71;
        let x_4142 : vec4<f32> = x_4034.x_AdditionalLightsCookieAtlasUVRects[bitcast<i32>(x_4139)];
        let x_4144 : vec2<f32> = ((vec2<f32>(x_4134.x, x_4134.y) * vec2<f32>(x_4136.x, x_4136.y)) + vec2<f32>(x_4142.z, x_4142.w));
        let x_4145 : vec4<f32> = u_xlat11;
        u_xlat11 = vec4<f32>(x_4144.x, x_4144.y, x_4145.z, x_4145.w);
      } else {
        let x_4149 : i32 = u_xlati74;
        u_xlatb74 = (x_4149 == 1i);
        let x_4151 : bool = u_xlatb74;
        u_xlati74 = select(0i, 1i, x_4151);
        let x_4153 : i32 = u_xlati74;
        if ((x_4153 != 0i)) {
          let x_4157 : vec3<f32> = vs_INTERP0;
          let x_4159 : i32 = u_xlati76;
          let x_4162 : i32 = u_xlati76;
          let x_4166 : vec4<f32> = x_4034.x_AdditionalLightsWorldToLights[((x_4159 + 1i) / 4i)][((x_4162 + 1i) % 4i)];
          u_xlat55 = (vec2<f32>(x_4157.y, x_4157.y) * vec2<f32>(x_4166.x, x_4166.y));
          let x_4169 : i32 = u_xlati76;
          let x_4171 : i32 = u_xlati76;
          let x_4174 : vec4<f32> = x_4034.x_AdditionalLightsWorldToLights[(x_4169 / 4i)][(x_4171 % 4i)];
          let x_4176 : vec3<f32> = vs_INTERP0;
          let x_4179 : vec2<f32> = u_xlat55;
          u_xlat55 = ((vec2<f32>(x_4174.x, x_4174.y) * vec2<f32>(x_4176.x, x_4176.x)) + x_4179);
          let x_4181 : i32 = u_xlati76;
          let x_4184 : i32 = u_xlati76;
          let x_4188 : vec4<f32> = x_4034.x_AdditionalLightsWorldToLights[((x_4181 + 2i) / 4i)][((x_4184 + 2i) % 4i)];
          let x_4190 : vec3<f32> = vs_INTERP0;
          let x_4193 : vec2<f32> = u_xlat55;
          u_xlat55 = ((vec2<f32>(x_4188.x, x_4188.y) * vec2<f32>(x_4190.z, x_4190.z)) + x_4193);
          let x_4195 : vec2<f32> = u_xlat55;
          let x_4196 : i32 = u_xlati76;
          let x_4199 : i32 = u_xlati76;
          let x_4203 : vec4<f32> = x_4034.x_AdditionalLightsWorldToLights[((x_4196 + 3i) / 4i)][((x_4199 + 3i) % 4i)];
          u_xlat55 = (x_4195 + vec2<f32>(x_4203.x, x_4203.y));
          let x_4206 : vec2<f32> = u_xlat55;
          u_xlat55 = ((x_4206 * vec2<f32>(0.5f, 0.5f)) + vec2<f32>(0.5f, 0.5f));
          let x_4209 : vec2<f32> = u_xlat55;
          u_xlat55 = fract(x_4209);
          let x_4211 : u32 = u_xlatu71;
          let x_4214 : vec4<f32> = x_4034.x_AdditionalLightsCookieAtlasUVRects[bitcast<i32>(x_4211)];
          let x_4216 : vec2<f32> = u_xlat55;
          let x_4218 : u32 = u_xlatu71;
          let x_4221 : vec4<f32> = x_4034.x_AdditionalLightsCookieAtlasUVRects[bitcast<i32>(x_4218)];
          let x_4223 : vec2<f32> = ((vec2<f32>(x_4214.x, x_4214.y) * x_4216) + vec2<f32>(x_4221.z, x_4221.w));
          let x_4224 : vec4<f32> = u_xlat11;
          u_xlat11 = vec4<f32>(x_4223.x, x_4223.y, x_4224.z, x_4224.w);
        } else {
          let x_4227 : vec3<f32> = vs_INTERP0;
          let x_4229 : i32 = u_xlati76;
          let x_4232 : i32 = u_xlati76;
          let x_4236 : vec4<f32> = x_4034.x_AdditionalLightsWorldToLights[((x_4229 + 1i) / 4i)][((x_4232 + 1i) % 4i)];
          u_xlat12 = (vec4<f32>(x_4227.y, x_4227.y, x_4227.y, x_4227.y) * x_4236);
          let x_4238 : i32 = u_xlati76;
          let x_4240 : i32 = u_xlati76;
          let x_4243 : vec4<f32> = x_4034.x_AdditionalLightsWorldToLights[(x_4238 / 4i)][(x_4240 % 4i)];
          let x_4244 : vec3<f32> = vs_INTERP0;
          let x_4247 : vec4<f32> = u_xlat12;
          u_xlat12 = ((x_4243 * vec4<f32>(x_4244.x, x_4244.x, x_4244.x, x_4244.x)) + x_4247);
          let x_4249 : i32 = u_xlati76;
          let x_4252 : i32 = u_xlati76;
          let x_4256 : vec4<f32> = x_4034.x_AdditionalLightsWorldToLights[((x_4249 + 2i) / 4i)][((x_4252 + 2i) % 4i)];
          let x_4257 : vec3<f32> = vs_INTERP0;
          let x_4260 : vec4<f32> = u_xlat12;
          u_xlat12 = ((x_4256 * vec4<f32>(x_4257.z, x_4257.z, x_4257.z, x_4257.z)) + x_4260);
          let x_4262 : vec4<f32> = u_xlat12;
          let x_4263 : i32 = u_xlati76;
          let x_4266 : i32 = u_xlati76;
          let x_4270 : vec4<f32> = x_4034.x_AdditionalLightsWorldToLights[((x_4263 + 3i) / 4i)][((x_4266 + 3i) % 4i)];
          u_xlat12 = (x_4262 + x_4270);
          let x_4272 : vec4<f32> = u_xlat12;
          let x_4274 : vec4<f32> = u_xlat12;
          let x_4276 : vec3<f32> = (vec3<f32>(x_4272.x, x_4272.y, x_4272.z) / vec3<f32>(x_4274.w, x_4274.w, x_4274.w));
          let x_4277 : vec4<f32> = u_xlat12;
          u_xlat12 = vec4<f32>(x_4276.x, x_4276.y, x_4276.z, x_4277.w);
          let x_4279 : vec4<f32> = u_xlat12;
          let x_4281 : vec4<f32> = u_xlat12;
          u_xlat74 = dot(vec3<f32>(x_4279.x, x_4279.y, x_4279.z), vec3<f32>(x_4281.x, x_4281.y, x_4281.z));
          let x_4284 : f32 = u_xlat74;
          u_xlat74 = inverseSqrt(x_4284);
          let x_4286 : f32 = u_xlat74;
          let x_4288 : vec4<f32> = u_xlat12;
          let x_4290 : vec3<f32> = (vec3<f32>(x_4286, x_4286, x_4286) * vec3<f32>(x_4288.x, x_4288.y, x_4288.z));
          let x_4291 : vec4<f32> = u_xlat12;
          u_xlat12 = vec4<f32>(x_4290.x, x_4290.y, x_4290.z, x_4291.w);
          let x_4293 : vec4<f32> = u_xlat12;
          u_xlat74 = dot(abs(vec3<f32>(x_4293.x, x_4293.y, x_4293.z)), vec3<f32>(1.0f, 1.0f, 1.0f));
          let x_4298 : f32 = u_xlat74;
          u_xlat74 = max(x_4298, 0.000001f);
          let x_4301 : f32 = u_xlat74;
          u_xlat74 = (1.0f / x_4301);
          let x_4303 : f32 = u_xlat74;
          let x_4305 : vec4<f32> = u_xlat12;
          let x_4307 : vec3<f32> = (vec3<f32>(x_4303, x_4303, x_4303) * vec3<f32>(x_4305.z, x_4305.x, x_4305.y));
          let x_4308 : vec4<f32> = u_xlat13;
          u_xlat13 = vec4<f32>(x_4307.x, x_4307.y, x_4307.z, x_4308.w);
          let x_4311 : f32 = u_xlat13.x;
          u_xlat13.x = -(x_4311);
          let x_4315 : f32 = u_xlat13.x;
          u_xlat13.x = clamp(x_4315, 0.0f, 1.0f);
          let x_4319 : vec4<f32> = u_xlat13;
          let x_4322 : vec4<bool> = (vec4<f32>(x_4319.y, x_4319.z, x_4319.y, x_4319.z) >= vec4<f32>(0.0f, 0.0f, 0.0f, 0.0f));
          u_xlatb55 = vec2<bool>(x_4322.x, x_4322.y);
          let x_4325 : bool = u_xlatb55.x;
          if (x_4325) {
            let x_4330 : f32 = u_xlat13.x;
            x_4326 = x_4330;
          } else {
            let x_4333 : f32 = u_xlat13.x;
            x_4326 = -(x_4333);
          }
          let x_4335 : f32 = x_4326;
          u_xlat55.x = x_4335;
          let x_4338 : bool = u_xlatb55.y;
          if (x_4338) {
            let x_4343 : f32 = u_xlat13.x;
            x_4339 = x_4343;
          } else {
            let x_4346 : f32 = u_xlat13.x;
            x_4339 = -(x_4346);
          }
          let x_4348 : f32 = x_4339;
          u_xlat55.y = x_4348;
          let x_4350 : vec4<f32> = u_xlat12;
          let x_4352 : f32 = u_xlat74;
          let x_4355 : vec2<f32> = u_xlat55;
          u_xlat55 = ((vec2<f32>(x_4350.x, x_4350.y) * vec2<f32>(x_4352, x_4352)) + x_4355);
          let x_4357 : vec2<f32> = u_xlat55;
          u_xlat55 = ((x_4357 * vec2<f32>(0.5f, 0.5f)) + vec2<f32>(0.5f, 0.5f));
          let x_4360 : vec2<f32> = u_xlat55;
          u_xlat55 = clamp(x_4360, vec2<f32>(0.0f, 0.0f), vec2<f32>(1.0f, 1.0f));
          let x_4364 : u32 = u_xlatu71;
          let x_4367 : vec4<f32> = x_4034.x_AdditionalLightsCookieAtlasUVRects[bitcast<i32>(x_4364)];
          let x_4369 : vec2<f32> = u_xlat55;
          let x_4371 : u32 = u_xlatu71;
          let x_4374 : vec4<f32> = x_4034.x_AdditionalLightsCookieAtlasUVRects[bitcast<i32>(x_4371)];
          let x_4376 : vec2<f32> = ((vec2<f32>(x_4367.x, x_4367.y) * x_4369) + vec2<f32>(x_4374.z, x_4374.w));
          let x_4377 : vec4<f32> = u_xlat11;
          u_xlat11 = vec4<f32>(x_4376.x, x_4376.y, x_4377.z, x_4377.w);
        }
      }
      let x_4384 : vec4<f32> = u_xlat11;
      let x_4387 : f32 = x_160.x_GlobalMipBias.x;
      let x_4388 : vec4<f32> = textureSampleBias(x_AdditionalLightsCookieAtlasTexture, sampler_AdditionalLightsCookieAtlasTexture, vec2<f32>(x_4384.x, x_4384.y), x_4387);
      u_xlat11 = x_4388;
      let x_4390 : bool = u_xlatb47.y;
      if (x_4390) {
        let x_4395 : f32 = u_xlat11.w;
        x_4391 = x_4395;
      } else {
        let x_4398 : f32 = u_xlat11.x;
        x_4391 = x_4398;
      }
      let x_4399 : f32 = x_4391;
      u_xlat74 = x_4399;
      let x_4401 : bool = u_xlatb47.x;
      if (x_4401) {
        let x_4405 : vec4<f32> = u_xlat11;
        x_4402 = vec3<f32>(x_4405.x, x_4405.y, x_4405.z);
      } else {
        let x_4408 : f32 = u_xlat74;
        x_4402 = vec3<f32>(x_4408, x_4408, x_4408);
      }
      let x_4410 : vec3<f32> = x_4402;
      let x_4411 : vec4<f32> = u_xlat11;
      u_xlat11 = vec4<f32>(x_4410.x, x_4410.y, x_4410.z, x_4411.w);
    } else {
      u_xlat11.x = 1.0f;
      u_xlat11.y = 1.0f;
      u_xlat11.z = 1.0f;
    }
    let x_4417 : vec4<f32> = u_xlat11;
    let x_4419 : u32 = u_xlatu71;
    let x_4422 : vec4<f32> = x_3925.x_AdditionalLightsColor[bitcast<i32>(x_4419)];
    let x_4424 : vec3<f32> = (vec3<f32>(x_4417.x, x_4417.y, x_4417.z) * vec3<f32>(x_4422.x, x_4422.y, x_4422.z));
    let x_4425 : vec4<f32> = u_xlat11;
    u_xlat11 = vec4<f32>(x_4424.x, x_4424.y, x_4424.z, x_4425.w);
    let x_4427 : f32 = u_xlat50;
    let x_4429 : vec4<f32> = u_xlat11;
    let x_4431 : vec3<f32> = (vec3<f32>(x_4427, x_4427, x_4427) * vec3<f32>(x_4429.x, x_4429.y, x_4429.z));
    let x_4432 : vec4<f32> = u_xlat11;
    u_xlat11 = vec4<f32>(x_4431.x, x_4431.y, x_4431.z, x_4432.w);
    let x_4434 : vec3<f32> = u_xlat22;
    let x_4435 : vec4<f32> = u_xlat10;
    u_xlat71 = dot(x_4434, vec3<f32>(x_4435.x, x_4435.y, x_4435.z));
    let x_4438 : f32 = u_xlat71;
    u_xlat71 = clamp(x_4438, 0.0f, 1.0f);
    let x_4440 : f32 = u_xlat71;
    let x_4441 : f32 = u_xlat72;
    u_xlat71 = (x_4440 * x_4441);
    let x_4443 : f32 = u_xlat71;
    let x_4445 : vec4<f32> = u_xlat11;
    let x_4447 : vec3<f32> = (vec3<f32>(x_4443, x_4443, x_4443) * vec3<f32>(x_4445.x, x_4445.y, x_4445.z));
    let x_4448 : vec4<f32> = u_xlat11;
    u_xlat11 = vec4<f32>(x_4447.x, x_4447.y, x_4447.z, x_4448.w);
    let x_4450 : vec4<f32> = u_xlat9;
    let x_4452 : f32 = u_xlat73;
    let x_4455 : vec3<f32> = u_xlat5;
    let x_4456 : vec3<f32> = ((vec3<f32>(x_4450.x, x_4450.y, x_4450.z) * vec3<f32>(x_4452, x_4452, x_4452)) + x_4455);
    let x_4457 : vec4<f32> = u_xlat9;
    u_xlat9 = vec4<f32>(x_4456.x, x_4456.y, x_4456.z, x_4457.w);
    let x_4459 : vec4<f32> = u_xlat9;
    let x_4461 : vec4<f32> = u_xlat9;
    u_xlat71 = dot(vec3<f32>(x_4459.x, x_4459.y, x_4459.z), vec3<f32>(x_4461.x, x_4461.y, x_4461.z));
    let x_4464 : f32 = u_xlat71;
    u_xlat71 = max(x_4464, 1.17549435e-37f);
    let x_4466 : f32 = u_xlat71;
    u_xlat71 = inverseSqrt(x_4466);
    let x_4468 : f32 = u_xlat71;
    let x_4470 : vec4<f32> = u_xlat9;
    let x_4472 : vec3<f32> = (vec3<f32>(x_4468, x_4468, x_4468) * vec3<f32>(x_4470.x, x_4470.y, x_4470.z));
    let x_4473 : vec4<f32> = u_xlat9;
    u_xlat9 = vec4<f32>(x_4472.x, x_4472.y, x_4472.z, x_4473.w);
    let x_4475 : vec3<f32> = u_xlat22;
    let x_4476 : vec4<f32> = u_xlat9;
    u_xlat71 = dot(x_4475, vec3<f32>(x_4476.x, x_4476.y, x_4476.z));
    let x_4479 : f32 = u_xlat71;
    u_xlat71 = clamp(x_4479, 0.0f, 1.0f);
    let x_4481 : vec4<f32> = u_xlat10;
    let x_4483 : vec4<f32> = u_xlat9;
    u_xlat72 = dot(vec3<f32>(x_4481.x, x_4481.y, x_4481.z), vec3<f32>(x_4483.x, x_4483.y, x_4483.z));
    let x_4486 : f32 = u_xlat72;
    u_xlat72 = clamp(x_4486, 0.0f, 1.0f);
    let x_4488 : f32 = u_xlat71;
    let x_4489 : f32 = u_xlat71;
    u_xlat71 = (x_4488 * x_4489);
    let x_4491 : f32 = u_xlat71;
    let x_4493 : f32 = u_xlat3.x;
    u_xlat71 = ((x_4491 * x_4493) + 1.000010014f);
    let x_4496 : f32 = u_xlat72;
    let x_4497 : f32 = u_xlat72;
    u_xlat72 = (x_4496 * x_4497);
    let x_4499 : f32 = u_xlat71;
    let x_4500 : f32 = u_xlat71;
    u_xlat71 = (x_4499 * x_4500);
    let x_4502 : f32 = u_xlat72;
    u_xlat72 = max(x_4502, 0.100000001f);
    let x_4504 : f32 = u_xlat71;
    let x_4505 : f32 = u_xlat72;
    u_xlat71 = (x_4504 * x_4505);
    let x_4507 : f32 = u_xlat28;
    let x_4508 : f32 = u_xlat71;
    u_xlat71 = (x_4507 * x_4508);
    let x_4510 : f32 = u_xlat70;
    let x_4511 : f32 = u_xlat71;
    u_xlat71 = (x_4510 / x_4511);
    let x_4513 : f32 = u_xlat71;
    let x_4516 : vec3<f32> = u_xlat7;
    let x_4517 : vec3<f32> = ((vec3<f32>(x_4513, x_4513, x_4513) * vec3<f32>(0.039999999f, 0.039999999f, 0.039999999f)) + x_4516);
    let x_4518 : vec4<f32> = u_xlat9;
    u_xlat9 = vec4<f32>(x_4517.x, x_4517.y, x_4517.z, x_4518.w);
    let x_4520 : vec4<f32> = u_xlat9;
    let x_4522 : vec4<f32> = u_xlat11;
    let x_4525 : vec4<f32> = u_xlat8;
    let x_4527 : vec3<f32> = ((vec3<f32>(x_4520.x, x_4520.y, x_4520.z) * vec3<f32>(x_4522.x, x_4522.y, x_4522.z)) + vec3<f32>(x_4525.x, x_4525.y, x_4525.z));
    let x_4528 : vec4<f32> = u_xlat8;
    u_xlat8 = vec4<f32>(x_4527.x, x_4527.y, x_4527.z, x_4528.w);

    continuing {
      let x_4530 : u32 = u_xlatu_loop_1;
      u_xlatu_loop_1 = (x_4530 + bitcast<u32>(1i));
    }
  }
  let x_4532 : vec3<f32> = u_xlat4;
  let x_4533 : vec4<f32> = u_xlat6;
  let x_4536 : vec4<f32> = u_xlat2;
  u_xlat0 = ((x_4532 * vec3<f32>(x_4533.x, x_4533.x, x_4533.x)) + vec3<f32>(x_4536.x, x_4536.y, x_4536.z));
  let x_4539 : vec4<f32> = u_xlat8;
  let x_4541 : vec3<f32> = u_xlat0;
  u_xlat0 = (vec3<f32>(x_4539.x, x_4539.y, x_4539.z) + x_4541);
  let x_4545 : vec4<f32> = vs_INTERP4;
  let x_4547 : vec3<f32> = u_xlat1;
  let x_4549 : vec3<f32> = u_xlat0;
  let x_4550 : vec3<f32> = ((vec3<f32>(x_4545.w, x_4545.w, x_4545.w) * x_4547) + x_4549);
  let x_4551 : vec4<f32> = SV_Target0;
  SV_Target0 = vec4<f32>(x_4550.x, x_4550.y, x_4550.z, x_4551.w);
  let x_4553 : bool = u_xlatb25;
  let x_4554 : f32 = u_xlat67;
  SV_Target0.w = select(1.0f, x_4554, x_4553);
  let x_4560 : u32 = x_160.x_RenderingLayerMaxInt;
  let x_4562 : f32 = x_95.unity_RenderingLayer.x;
  u_xlatu0 = (x_4560 & bitcast<u32>(x_4562));
  let x_4565 : u32 = u_xlatu0;
  u_xlat0.x = f32(x_4565);
  let x_4570 : f32 = u_xlat0.x;
  let x_4572 : f32 = x_160.x_RenderingLayerRcpMaxInt;
  SV_Target1.x = (x_4570 * x_4572);
  let x_4576 : f32 = SV_Target1.x;
  SV_Target1.x = clamp(x_4576, 0.0f, 1.0f);
  let x_4579 : vec4<f32> = SV_Target1;
  SV_Target1 = vec4<f32>(x_4579.x, vec3<f32>(0.0f, 0.0f, 0.0f).x, vec3<f32>(0.0f, 0.0f, 0.0f).y, vec3<f32>(0.0f, 0.0f, 0.0f).z);
  return;
}

struct main_out {
  @location(0)
  SV_Target0_1 : vec4<f32>,
  @location(1)
  SV_Target1_1 : vec4<f32>,
}

@fragment
fn main(@builtin(position) gl_FragCoord_param : vec4<f32>, @location(1) vs_INTERP1_param : vec3<f32>, @location(2) vs_INTERP2_param : vec4<f32>, @location(0) vs_INTERP0_param : vec3<f32>, @location(3) vs_INTERP3_param : vec4<f32>, @location(4) vs_INTERP4_param : vec4<f32>, @location(5) vs_INTERP5_param : vec2<f32>) -> main_out {
  gl_FragCoord = gl_FragCoord_param;
  vs_INTERP1 = vs_INTERP1_param;
  vs_INTERP2 = vs_INTERP2_param;
  vs_INTERP0 = vs_INTERP0_param;
  vs_INTERP3 = vs_INTERP3_param;
  vs_INTERP4 = vs_INTERP4_param;
  vs_INTERP5 = vs_INTERP5_param;
  main_1();
  return main_out(SV_Target0, SV_Target1);
}

