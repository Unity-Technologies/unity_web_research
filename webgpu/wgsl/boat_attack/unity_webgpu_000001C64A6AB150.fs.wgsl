struct PGlobals {
  x_ScaledScreenParams : vec4<f32>,
  x_GlobalMipBias : vec2<f32>,
  x_AlphaToMaskAvailable : f32,
  @size(4)
  padding : u32,
  x_MainLightPosition : vec4<f32>,
  x_MainLightColor : vec4<f32>,
  x_AmbientOcclusionParam : vec4<f32>,
  x_AdditionalLightsCount : vec4<f32>,
  x_RenderingLayerMaxInt : u32,
  x_RenderingLayerRcpMaxInt : f32,
  @size(8)
  padding_1 : u32,
  x_WorldSpaceCameraPos : vec3<f32>,
  @size(4)
  padding_2 : u32,
  x_ProjectionParams : vec4<f32>,
  unity_OrthoParams : vec4<f32>,
  x_ScaleBiasRt : vec4<f32>,
  unity_FogParams : vec4<f32>,
  unity_FogColor : vec4<f32>,
  unity_MatrixV : mat4x4<f32>,
}

struct UnityPerMaterial {
  Texture2D_B222E8F_TexelSize : vec4<f32>,
  Color_C30C7CA3 : vec4<f32>,
  Texture2D_D9BFD5F1_TexelSize : vec4<f32>,
}

type Arr = array<mat4x4<f32>, 5u>;

struct MainLightShadows {
  x_MainLightWorldToShadow : Arr,
  x_CascadeShadowSplitSpheres0 : vec4<f32>,
  x_CascadeShadowSplitSpheres1 : vec4<f32>,
  x_CascadeShadowSplitSpheres2 : vec4<f32>,
  x_CascadeShadowSplitSpheres3 : vec4<f32>,
  x_CascadeShadowSplitSphereRadii : vec4<f32>,
  x_MainLightShadowOffset0 : vec4<f32>,
  x_MainLightShadowOffset1 : vec4<f32>,
  x_MainLightShadowParams : vec4<f32>,
  x_MainLightShadowmapSize : vec4<f32>,
}

type Arr_1 = array<vec4<f32>, 2u>;

struct UnityPerDraw {
  unity_ObjectToWorld : mat4x4<f32>,
  unity_WorldToObject : mat4x4<f32>,
  unity_LODFade : vec4<f32>,
  unity_WorldTransformParams : vec4<f32>,
  unity_RenderingLayer : vec4<f32>,
  unity_LightData : vec4<f32>,
  unity_LightIndices : Arr_1,
  unity_ProbesOcclusion : vec4<f32>,
  unity_SpecCube0_HDR : vec4<f32>,
  unity_SpecCube1_HDR : vec4<f32>,
  unity_SpecCube0_BoxMax : vec4<f32>,
  unity_SpecCube0_BoxMin : vec4<f32>,
  unity_SpecCube0_ProbePosition : vec4<f32>,
  unity_SpecCube1_BoxMax : vec4<f32>,
  unity_SpecCube1_BoxMin : vec4<f32>,
  unity_SpecCube1_ProbePosition : vec4<f32>,
  unity_LightmapST : vec4<f32>,
  unity_DynamicLightmapST : vec4<f32>,
  unity_SHAr : vec4<f32>,
  unity_SHAg : vec4<f32>,
  unity_SHAb : vec4<f32>,
  unity_SHBr : vec4<f32>,
  unity_SHBg : vec4<f32>,
  unity_SHBb : vec4<f32>,
  unity_SHC : vec4<f32>,
  unity_RendererBounds_Min : vec4<f32>,
  unity_RendererBounds_Max : vec4<f32>,
  unity_MatrixPreviousM : mat4x4<f32>,
  unity_MatrixPreviousMI : mat4x4<f32>,
  unity_MotionVectorsParams : vec4<f32>,
  unity_SpriteColor : vec4<f32>,
  unity_SpriteProps : vec4<f32>,
}

struct strided_arr {
  @size(16)
  el : f32,
}

type Arr_2 = array<strided_arr, 8u>;

struct LightCookies {
  x_MainLightWorldToLight : mat4x4<f32>,
  x_AdditionalLightsCookieEnableBits : Arr_2,
  x_MainLightCookieTextureFormat : f32,
  x_AdditionalLightsCookieAtlasTextureFormat : f32,
}

type Arr_3 = array<vec4<f32>, 256u>;

type Arr_4 = array<vec4<f32>, 256u>;

type Arr_5 = array<vec4<f32>, 256u>;

type Arr_6 = array<vec4<f32>, 256u>;

type Arr_7 = array<vec4<f32>, 256u>;

struct strided_arr_1 {
  @size(16)
  el : f32,
}

type Arr_8 = array<strided_arr_1, 256u>;

type Arr_9 = array<vec4<f32>, 256u>;

type Arr_10 = array<strided_arr_1, 256u>;

struct AdditionalLights {
  x_AdditionalLightsPosition : Arr_9,
  x_AdditionalLightsColor : Arr_9,
  x_AdditionalLightsAttenuation : Arr_9,
  x_AdditionalLightsSpotDir : Arr_9,
  x_AdditionalLightsOcclusionProbes : Arr_9,
  x_AdditionalLightsLayerMasks : Arr_10,
}

type Arr_11 = array<mat4x4<f32>, 256u>;

struct AdditionalLightsCookies {
  x_AdditionalLightsWorldToLights : Arr_11,
  x_AdditionalLightsCookieAtlasUVRects : Arr_9,
  x_AdditionalLightsLightTypes : Arr_10,
}

var<private> gl_FragCoord : vec4<f32>;

var<private> vs_INTERP1 : vec3<f32>;

@group(0) @binding(6) var Texture2D_B222E8F : texture_2d<f32>;

@group(0) @binding(14) var samplerTexture2D_B222E8F : sampler;

var<private> vs_INTERP3 : vec4<f32>;

@group(1) @binding(0) var<uniform> x_66 : PGlobals;

@group(1) @binding(6) var<uniform> x_78 : UnityPerMaterial;

@group(0) @binding(7) var Texture2D_D9BFD5F1 : texture_2d<f32>;

@group(0) @binding(15) var samplerTexture2D_D9BFD5F1 : sampler;

var<private> vs_INTERP4 : vec4<f32>;

var<private> vs_INTERP0 : vec3<f32>;

@group(1) @binding(3) var<uniform> x_138 : MainLightShadows;

@group(0) @binding(3) var x_MainLightShadowmapTexture : texture_depth_2d;

@group(0) @binding(11) var sampler_MainLightShadowmapTexture : sampler_comparison;

var<private> vs_INTERP2 : vec4<f32>;

@group(1) @binding(2) var<uniform> x_1752 : UnityPerDraw;

@group(0) @binding(1) var unity_Lightmap : texture_2d<f32>;

@group(0) @binding(9) var samplerunity_Lightmap : sampler;

var<private> vs_INTERP5 : vec2<f32>;

@group(0) @binding(2) var x_ScreenSpaceOcclusionTexture : texture_2d<f32>;

@group(0) @binding(10) var sampler_ScreenSpaceOcclusionTexture : sampler;

@group(1) @binding(4) var<uniform> x_3275 : LightCookies;

@group(0) @binding(4) var x_MainLightCookieTexture : texture_2d<f32>;

@group(0) @binding(12) var sampler_MainLightCookieTexture : sampler;

@group(0) @binding(0) var unity_SpecCube0 : texture_cube<f32>;

@group(0) @binding(8) var samplerunity_SpecCube0 : sampler;

@group(1) @binding(1) var<uniform> x_3707 : AdditionalLights;

@group(1) @binding(5) var<uniform> x_3845 : AdditionalLightsCookies;

@group(0) @binding(5) var x_AdditionalLightsCookieAtlasTexture : texture_2d<f32>;

@group(0) @binding(13) var sampler_AdditionalLightsCookieAtlasTexture : sampler;

var<private> SV_Target0 : vec4<f32>;

var<private> SV_Target1 : vec4<f32>;

fn main_1() {
  var hlslcc_FragCoord : vec4<f32>;
  var u_xlat0 : vec3<f32>;
  var u_xlat1 : vec4<f32>;
  var u_xlat2 : vec3<f32>;
  var u_xlat3 : vec4<f32>;
  var u_xlat4 : vec4<f32>;
  var u_xlat66 : f32;
  var u_xlat25 : vec3<f32>;
  var u_xlat5 : vec4<f32>;
  var u_xlat6 : vec4<f32>;
  var u_xlat7 : vec4<f32>;
  var u_xlatb4 : vec4<bool>;
  var u_xlatu66 : u32;
  var u_xlati66 : i32;
  var u_xlatb66 : bool;
  var u_xlatb68 : bool;
  var txVec0 : vec3<f32>;
  var txVec1 : vec3<f32>;
  var txVec2 : vec3<f32>;
  var txVec3 : vec3<f32>;
  var u_xlat68 : f32;
  var u_xlatb70 : bool;
  var u_xlat49 : vec2<f32>;
  var u_xlat51 : vec2<f32>;
  var u_xlat8 : vec4<f32>;
  var u_xlat9 : vec4<f32>;
  var u_xlat10 : vec4<f32>;
  var u_xlat11 : vec4<f32>;
  var u_xlat12 : vec4<f32>;
  var u_xlat13 : vec4<f32>;
  var u_xlat70 : f32;
  var txVec4 : vec3<f32>;
  var txVec5 : vec3<f32>;
  var u_xlat27 : vec3<f32>;
  var txVec6 : vec3<f32>;
  var txVec7 : vec3<f32>;
  var txVec8 : vec3<f32>;
  var txVec9 : vec3<f32>;
  var txVec10 : vec3<f32>;
  var txVec11 : vec3<f32>;
  var txVec12 : vec3<f32>;
  var u_xlat28 : vec3<f32>;
  var u_xlat14 : vec4<f32>;
  var u_xlat15 : vec4<f32>;
  var u_xlat29 : vec2<f32>;
  var u_xlat57 : vec2<f32>;
  var u_xlat52 : vec2<f32>;
  var u_xlat16 : vec4<f32>;
  var u_xlat17 : vec4<f32>;
  var u_xlat18 : vec4<f32>;
  var txVec13 : vec3<f32>;
  var txVec14 : vec3<f32>;
  var txVec15 : vec3<f32>;
  var txVec16 : vec3<f32>;
  var txVec17 : vec3<f32>;
  var txVec18 : vec3<f32>;
  var txVec19 : vec3<f32>;
  var txVec20 : vec3<f32>;
  var txVec21 : vec3<f32>;
  var txVec22 : vec3<f32>;
  var txVec23 : vec3<f32>;
  var txVec24 : vec3<f32>;
  var txVec25 : vec3<f32>;
  var txVec26 : vec3<f32>;
  var txVec27 : vec3<f32>;
  var txVec28 : vec3<f32>;
  var txVec29 : vec3<f32>;
  var u_xlatb5 : bool;
  var u_xlatb27 : bool;
  var u_xlatb1 : bool;
  var x_1665 : f32;
  var u_xlat23 : vec3<f32>;
  var u_xlat45 : f32;
  var u_xlat67 : f32;
  var u_xlatb45 : bool;
  var x_1713 : f32;
  var u_xlatb23 : vec3<bool>;
  var x_1849 : vec3<f32>;
  var u_xlat72 : f32;
  var txVec30 : vec3<f32>;
  var txVec31 : vec3<f32>;
  var txVec32 : vec3<f32>;
  var txVec33 : vec3<f32>;
  var u_xlatb73 : bool;
  var u_xlat54 : vec2<f32>;
  var u_xlat73 : f32;
  var txVec34 : vec3<f32>;
  var txVec35 : vec3<f32>;
  var u_xlat30 : f32;
  var txVec36 : vec3<f32>;
  var txVec37 : vec3<f32>;
  var txVec38 : vec3<f32>;
  var txVec39 : vec3<f32>;
  var txVec40 : vec3<f32>;
  var txVec41 : vec3<f32>;
  var txVec42 : vec3<f32>;
  var u_xlat31 : vec3<f32>;
  var u_xlat32 : vec2<f32>;
  var u_xlat60 : vec2<f32>;
  var u_xlat55 : vec2<f32>;
  var u_xlat19 : vec4<f32>;
  var u_xlat20 : vec4<f32>;
  var u_xlat21 : vec4<f32>;
  var txVec43 : vec3<f32>;
  var txVec44 : vec3<f32>;
  var txVec45 : vec3<f32>;
  var txVec46 : vec3<f32>;
  var txVec47 : vec3<f32>;
  var txVec48 : vec3<f32>;
  var txVec49 : vec3<f32>;
  var txVec50 : vec3<f32>;
  var txVec51 : vec3<f32>;
  var txVec52 : vec3<f32>;
  var txVec53 : vec3<f32>;
  var txVec54 : vec3<f32>;
  var txVec55 : vec3<f32>;
  var txVec56 : vec3<f32>;
  var txVec57 : vec3<f32>;
  var txVec58 : vec3<f32>;
  var txVec59 : vec3<f32>;
  var u_xlat26 : f32;
  var u_xlatb8 : vec2<bool>;
  var x_3360 : f32;
  var x_3371 : vec3<f32>;
  var u_xlatu_loop_1 : u32;
  var u_xlatu68 : u32;
  var u_xlati3 : i32;
  var indexable : array<vec4<u32>, 4u>;
  var u_xlatu5 : u32;
  var u_xlati73 : i32;
  var u_xlati5 : i32;
  var u_xlati52 : i32;
  var u_xlat56 : vec2<f32>;
  var u_xlatb52 : vec2<bool>;
  var x_4145 : f32;
  var x_4158 : f32;
  var x_4210 : f32;
  var x_4222 : vec3<f32>;
  var x_4405 : f32;
  var u_xlatu0 : u32;
  var u_xlat_precise_vec4 : vec4<f32>;
  var u_xlat_precise_ivec4 : vec4<i32>;
  var u_xlat_precise_bvec4 : vec4<bool>;
  var u_xlat_precise_uvec4 : vec4<u32>;
  let x_13 : vec4<f32> = gl_FragCoord;
  let x_14 : vec3<f32> = vec3<f32>(x_13.x, x_13.y, x_13.z);
  let x_20 : f32 = gl_FragCoord.w;
  hlslcc_FragCoord = vec4<f32>(x_14.x, x_14.y, x_14.z, (1.0f / x_20));
  let x_30 : vec3<f32> = vs_INTERP1;
  let x_31 : vec3<f32> = vs_INTERP1;
  u_xlat0.x = dot(x_30, x_31);
  let x_37 : f32 = u_xlat0.x;
  u_xlat0.x = sqrt(x_37);
  let x_41 : f32 = u_xlat0.x;
  u_xlat0.x = (1.0f / x_41);
  let x_44 : vec3<f32> = u_xlat0;
  let x_46 : vec3<f32> = vs_INTERP1;
  u_xlat0 = (vec3<f32>(x_44.x, x_44.x, x_44.x) * x_46);
  let x_61 : vec4<f32> = vs_INTERP3;
  let x_71 : f32 = x_66.x_GlobalMipBias.x;
  let x_72 : vec4<f32> = textureSampleBias(Texture2D_B222E8F, samplerTexture2D_B222E8F, vec2<f32>(x_61.x, x_61.y), x_71);
  u_xlat1 = x_72;
  let x_74 : vec4<f32> = u_xlat1;
  let x_81 : vec4<f32> = x_78.Color_C30C7CA3;
  u_xlat2 = (vec3<f32>(x_74.x, x_74.y, x_74.z) * vec3<f32>(x_81.x, x_81.y, x_81.z));
  let x_90 : vec4<f32> = vs_INTERP3;
  let x_93 : f32 = x_66.x_GlobalMipBias.x;
  let x_94 : vec4<f32> = textureSampleBias(Texture2D_D9BFD5F1, samplerTexture2D_D9BFD5F1, vec2<f32>(x_90.x, x_90.y), x_93);
  u_xlat3 = vec4<f32>(x_94.w, x_94.x, x_94.y, x_94.z);
  let x_97 : vec4<f32> = u_xlat3;
  u_xlat4 = ((vec4<f32>(x_97.y, x_97.z, x_97.w, x_97.x) * vec4<f32>(2.0f, 2.0f, 2.0f, 2.0f)) + vec4<f32>(-1.0f, -1.0f, -1.0f, -1.0f));
  let x_106 : vec4<f32> = u_xlat4;
  let x_107 : vec4<f32> = u_xlat4;
  u_xlat66 = dot(x_106, x_107);
  let x_109 : f32 = u_xlat66;
  u_xlat66 = inverseSqrt(x_109);
  let x_112 : f32 = u_xlat66;
  let x_114 : vec4<f32> = u_xlat4;
  u_xlat25 = (vec3<f32>(x_112, x_112, x_112) * vec3<f32>(x_114.x, x_114.y, x_114.z));
  let x_120 : f32 = vs_INTERP4.y;
  u_xlat66 = (x_120 * 200.0f);
  let x_123 : f32 = u_xlat66;
  u_xlat66 = min(x_123, 1.0f);
  let x_125 : f32 = u_xlat66;
  let x_127 : vec4<f32> = u_xlat1;
  let x_129 : vec3<f32> = (vec3<f32>(x_125, x_125, x_125) * vec3<f32>(x_127.x, x_127.y, x_127.z));
  let x_130 : vec4<f32> = u_xlat1;
  u_xlat1 = vec4<f32>(x_129.x, x_129.y, x_129.z, x_130.w);
  let x_133 : vec3<f32> = vs_INTERP0;
  let x_140 : vec4<f32> = x_138.x_CascadeShadowSplitSpheres0;
  let x_143 : vec3<f32> = (x_133 + -(vec3<f32>(x_140.x, x_140.y, x_140.z)));
  let x_144 : vec4<f32> = u_xlat4;
  u_xlat4 = vec4<f32>(x_143.x, x_143.y, x_143.z, x_144.w);
  let x_147 : vec3<f32> = vs_INTERP0;
  let x_150 : vec4<f32> = x_138.x_CascadeShadowSplitSpheres1;
  let x_153 : vec3<f32> = (x_147 + -(vec3<f32>(x_150.x, x_150.y, x_150.z)));
  let x_154 : vec4<f32> = u_xlat5;
  u_xlat5 = vec4<f32>(x_153.x, x_153.y, x_153.z, x_154.w);
  let x_157 : vec3<f32> = vs_INTERP0;
  let x_160 : vec4<f32> = x_138.x_CascadeShadowSplitSpheres2;
  let x_163 : vec3<f32> = (x_157 + -(vec3<f32>(x_160.x, x_160.y, x_160.z)));
  let x_164 : vec4<f32> = u_xlat6;
  u_xlat6 = vec4<f32>(x_163.x, x_163.y, x_163.z, x_164.w);
  let x_167 : vec3<f32> = vs_INTERP0;
  let x_170 : vec4<f32> = x_138.x_CascadeShadowSplitSpheres3;
  let x_173 : vec3<f32> = (x_167 + -(vec3<f32>(x_170.x, x_170.y, x_170.z)));
  let x_174 : vec4<f32> = u_xlat7;
  u_xlat7 = vec4<f32>(x_173.x, x_173.y, x_173.z, x_174.w);
  let x_176 : vec4<f32> = u_xlat4;
  let x_178 : vec4<f32> = u_xlat4;
  u_xlat4.x = dot(vec3<f32>(x_176.x, x_176.y, x_176.z), vec3<f32>(x_178.x, x_178.y, x_178.z));
  let x_182 : vec4<f32> = u_xlat5;
  let x_184 : vec4<f32> = u_xlat5;
  u_xlat4.y = dot(vec3<f32>(x_182.x, x_182.y, x_182.z), vec3<f32>(x_184.x, x_184.y, x_184.z));
  let x_188 : vec4<f32> = u_xlat6;
  let x_190 : vec4<f32> = u_xlat6;
  u_xlat4.z = dot(vec3<f32>(x_188.x, x_188.y, x_188.z), vec3<f32>(x_190.x, x_190.y, x_190.z));
  let x_195 : vec4<f32> = u_xlat7;
  let x_197 : vec4<f32> = u_xlat7;
  u_xlat4.w = dot(vec3<f32>(x_195.x, x_195.y, x_195.z), vec3<f32>(x_197.x, x_197.y, x_197.z));
  let x_205 : vec4<f32> = u_xlat4;
  let x_208 : vec4<f32> = x_138.x_CascadeShadowSplitSphereRadii;
  u_xlatb4 = (x_205 < x_208);
  let x_212 : bool = u_xlatb4.x;
  u_xlat5.x = select(0.0f, 1.0f, x_212);
  let x_217 : bool = u_xlatb4.y;
  u_xlat5.y = select(0.0f, 1.0f, x_217);
  let x_221 : bool = u_xlatb4.z;
  u_xlat5.z = select(0.0f, 1.0f, x_221);
  let x_225 : bool = u_xlatb4.w;
  u_xlat5.w = select(0.0f, 1.0f, x_225);
  let x_229 : bool = u_xlatb4.x;
  u_xlat4.x = select(-0.0f, -1.0f, x_229);
  let x_234 : bool = u_xlatb4.y;
  u_xlat4.y = select(-0.0f, -1.0f, x_234);
  let x_238 : bool = u_xlatb4.z;
  u_xlat4.z = select(-0.0f, -1.0f, x_238);
  let x_241 : vec4<f32> = u_xlat4;
  let x_243 : vec4<f32> = u_xlat5;
  let x_245 : vec3<f32> = (vec3<f32>(x_241.x, x_241.y, x_241.z) + vec3<f32>(x_243.y, x_243.z, x_243.w));
  let x_246 : vec4<f32> = u_xlat4;
  u_xlat4 = vec4<f32>(x_245.x, x_245.y, x_245.z, x_246.w);
  let x_248 : vec4<f32> = u_xlat4;
  let x_251 : vec3<f32> = max(vec3<f32>(x_248.x, x_248.y, x_248.z), vec3<f32>(0.0f, 0.0f, 0.0f));
  let x_252 : vec4<f32> = u_xlat5;
  u_xlat5 = vec4<f32>(x_252.x, x_251.x, x_251.y, x_251.z);
  let x_254 : vec4<f32> = u_xlat5;
  u_xlat66 = dot(x_254, vec4<f32>(4.0f, 3.0f, 2.0f, 1.0f));
  let x_259 : f32 = u_xlat66;
  u_xlat66 = (-(x_259) + 4.0f);
  let x_264 : f32 = u_xlat66;
  u_xlatu66 = u32(x_264);
  let x_268 : u32 = u_xlatu66;
  u_xlati66 = (bitcast<i32>(x_268) << bitcast<u32>(2i));
  let x_271 : vec3<f32> = vs_INTERP0;
  let x_274 : i32 = u_xlati66;
  let x_277 : i32 = u_xlati66;
  let x_281 : vec4<f32> = x_138.x_MainLightWorldToShadow[((x_274 + 1i) / 4i)][((x_277 + 1i) % 4i)];
  let x_283 : vec3<f32> = (vec3<f32>(x_271.y, x_271.y, x_271.y) * vec3<f32>(x_281.x, x_281.y, x_281.z));
  let x_284 : vec4<f32> = u_xlat4;
  u_xlat4 = vec4<f32>(x_283.x, x_283.y, x_283.z, x_284.w);
  let x_286 : i32 = u_xlati66;
  let x_288 : i32 = u_xlati66;
  let x_291 : vec4<f32> = x_138.x_MainLightWorldToShadow[(x_286 / 4i)][(x_288 % 4i)];
  let x_293 : vec3<f32> = vs_INTERP0;
  let x_296 : vec4<f32> = u_xlat4;
  let x_298 : vec3<f32> = ((vec3<f32>(x_291.x, x_291.y, x_291.z) * vec3<f32>(x_293.x, x_293.x, x_293.x)) + vec3<f32>(x_296.x, x_296.y, x_296.z));
  let x_299 : vec4<f32> = u_xlat4;
  u_xlat4 = vec4<f32>(x_298.x, x_298.y, x_298.z, x_299.w);
  let x_301 : i32 = u_xlati66;
  let x_304 : i32 = u_xlati66;
  let x_308 : vec4<f32> = x_138.x_MainLightWorldToShadow[((x_301 + 2i) / 4i)][((x_304 + 2i) % 4i)];
  let x_310 : vec3<f32> = vs_INTERP0;
  let x_313 : vec4<f32> = u_xlat4;
  let x_315 : vec3<f32> = ((vec3<f32>(x_308.x, x_308.y, x_308.z) * vec3<f32>(x_310.z, x_310.z, x_310.z)) + vec3<f32>(x_313.x, x_313.y, x_313.z));
  let x_316 : vec4<f32> = u_xlat4;
  u_xlat4 = vec4<f32>(x_315.x, x_315.y, x_315.z, x_316.w);
  let x_318 : vec4<f32> = u_xlat4;
  let x_320 : i32 = u_xlati66;
  let x_323 : i32 = u_xlati66;
  let x_327 : vec4<f32> = x_138.x_MainLightWorldToShadow[((x_320 + 3i) / 4i)][((x_323 + 3i) % 4i)];
  let x_329 : vec3<f32> = (vec3<f32>(x_318.x, x_318.y, x_318.z) + vec3<f32>(x_327.x, x_327.y, x_327.z));
  let x_330 : vec4<f32> = u_xlat4;
  u_xlat4 = vec4<f32>(x_329.x, x_329.y, x_329.z, x_330.w);
  let x_335 : f32 = x_138.x_MainLightShadowParams.y;
  u_xlatb66 = (0.0f < x_335);
  let x_337 : bool = u_xlatb66;
  if (x_337) {
    let x_342 : f32 = x_138.x_MainLightShadowParams.y;
    u_xlatb68 = (x_342 == 1.0f);
    let x_344 : bool = u_xlatb68;
    if (x_344) {
      let x_347 : vec4<f32> = u_xlat4;
      let x_351 : vec4<f32> = x_138.x_MainLightShadowOffset0;
      u_xlat5 = (vec4<f32>(x_347.x, x_347.y, x_347.x, x_347.y) + x_351);
      let x_354 : vec4<f32> = u_xlat5;
      let x_355 : vec2<f32> = vec2<f32>(x_354.x, x_354.y);
      let x_357 : f32 = u_xlat4.z;
      txVec0 = vec3<f32>(x_355.x, x_355.y, x_357);
      let x_369 : vec3<f32> = txVec0;
      let x_371 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_369.xy, x_369.z);
      u_xlat6.x = x_371;
      let x_374 : vec4<f32> = u_xlat5;
      let x_375 : vec2<f32> = vec2<f32>(x_374.z, x_374.w);
      let x_377 : f32 = u_xlat4.z;
      txVec1 = vec3<f32>(x_375.x, x_375.y, x_377);
      let x_384 : vec3<f32> = txVec1;
      let x_386 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_384.xy, x_384.z);
      u_xlat6.y = x_386;
      let x_388 : vec4<f32> = u_xlat4;
      let x_392 : vec4<f32> = x_138.x_MainLightShadowOffset1;
      u_xlat5 = (vec4<f32>(x_388.x, x_388.y, x_388.x, x_388.y) + x_392);
      let x_395 : vec4<f32> = u_xlat5;
      let x_396 : vec2<f32> = vec2<f32>(x_395.x, x_395.y);
      let x_398 : f32 = u_xlat4.z;
      txVec2 = vec3<f32>(x_396.x, x_396.y, x_398);
      let x_405 : vec3<f32> = txVec2;
      let x_407 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_405.xy, x_405.z);
      u_xlat6.z = x_407;
      let x_410 : vec4<f32> = u_xlat5;
      let x_411 : vec2<f32> = vec2<f32>(x_410.z, x_410.w);
      let x_413 : f32 = u_xlat4.z;
      txVec3 = vec3<f32>(x_411.x, x_411.y, x_413);
      let x_420 : vec3<f32> = txVec3;
      let x_422 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_420.xy, x_420.z);
      u_xlat6.w = x_422;
      let x_425 : vec4<f32> = u_xlat6;
      u_xlat68 = dot(x_425, vec4<f32>(0.25f, 0.25f, 0.25f, 0.25f));
    } else {
      let x_432 : f32 = x_138.x_MainLightShadowParams.y;
      u_xlatb70 = (x_432 == 2.0f);
      let x_434 : bool = u_xlatb70;
      if (x_434) {
        let x_437 : vec4<f32> = u_xlat4;
        let x_441 : vec4<f32> = x_138.x_MainLightShadowmapSize;
        let x_446 : vec2<f32> = ((vec2<f32>(x_437.x, x_437.y) * vec2<f32>(x_441.z, x_441.w)) + vec2<f32>(0.5f, 0.5f));
        let x_447 : vec4<f32> = u_xlat5;
        u_xlat5 = vec4<f32>(x_446.x, x_446.y, x_447.z, x_447.w);
        let x_449 : vec4<f32> = u_xlat5;
        let x_451 : vec2<f32> = floor(vec2<f32>(x_449.x, x_449.y));
        let x_452 : vec4<f32> = u_xlat5;
        u_xlat5 = vec4<f32>(x_451.x, x_451.y, x_452.z, x_452.w);
        let x_456 : vec4<f32> = u_xlat4;
        let x_459 : vec4<f32> = x_138.x_MainLightShadowmapSize;
        let x_462 : vec4<f32> = u_xlat5;
        u_xlat49 = ((vec2<f32>(x_456.x, x_456.y) * vec2<f32>(x_459.z, x_459.w)) + -(vec2<f32>(x_462.x, x_462.y)));
        let x_466 : vec2<f32> = u_xlat49;
        u_xlat6 = (vec4<f32>(x_466.x, x_466.x, x_466.y, x_466.y) + vec4<f32>(0.5f, 1.0f, 0.5f, 1.0f));
        let x_470 : vec4<f32> = u_xlat6;
        let x_472 : vec4<f32> = u_xlat6;
        u_xlat7 = (vec4<f32>(x_470.x, x_470.x, x_470.z, x_470.z) * vec4<f32>(x_472.x, x_472.x, x_472.z, x_472.z));
        let x_475 : vec4<f32> = u_xlat7;
        let x_479 : vec2<f32> = (vec2<f32>(x_475.y, x_475.w) * vec2<f32>(0.079999998f, 0.079999998f));
        let x_480 : vec4<f32> = u_xlat6;
        u_xlat6 = vec4<f32>(x_479.x, x_480.y, x_479.y, x_480.w);
        let x_482 : vec4<f32> = u_xlat7;
        let x_485 : vec2<f32> = u_xlat49;
        let x_487 : vec2<f32> = ((vec2<f32>(x_482.x, x_482.z) * vec2<f32>(0.5f, 0.5f)) + -(x_485));
        let x_488 : vec4<f32> = u_xlat7;
        u_xlat7 = vec4<f32>(x_487.x, x_487.y, x_488.z, x_488.w);
        let x_491 : vec2<f32> = u_xlat49;
        u_xlat51 = (-(x_491) + vec2<f32>(1.0f, 1.0f));
        let x_496 : vec2<f32> = u_xlat49;
        let x_498 : vec2<f32> = min(x_496, vec2<f32>(0.0f, 0.0f));
        let x_499 : vec4<f32> = u_xlat8;
        u_xlat8 = vec4<f32>(x_498.x, x_498.y, x_499.z, x_499.w);
        let x_501 : vec4<f32> = u_xlat8;
        let x_504 : vec4<f32> = u_xlat8;
        let x_507 : vec2<f32> = u_xlat51;
        let x_508 : vec2<f32> = ((-(vec2<f32>(x_501.x, x_501.y)) * vec2<f32>(x_504.x, x_504.y)) + x_507);
        let x_509 : vec4<f32> = u_xlat8;
        u_xlat8 = vec4<f32>(x_508.x, x_508.y, x_509.z, x_509.w);
        let x_511 : vec2<f32> = u_xlat49;
        u_xlat49 = max(x_511, vec2<f32>(0.0f, 0.0f));
        let x_513 : vec2<f32> = u_xlat49;
        let x_515 : vec2<f32> = u_xlat49;
        let x_517 : vec4<f32> = u_xlat6;
        u_xlat49 = ((-(x_513) * x_515) + vec2<f32>(x_517.y, x_517.w));
        let x_520 : vec4<f32> = u_xlat8;
        let x_522 : vec2<f32> = (vec2<f32>(x_520.x, x_520.y) + vec2<f32>(1.0f, 1.0f));
        let x_523 : vec4<f32> = u_xlat8;
        u_xlat8 = vec4<f32>(x_522.x, x_522.y, x_523.z, x_523.w);
        let x_525 : vec2<f32> = u_xlat49;
        u_xlat49 = (x_525 + vec2<f32>(1.0f, 1.0f));
        let x_528 : vec4<f32> = u_xlat7;
        let x_532 : vec2<f32> = (vec2<f32>(x_528.x, x_528.y) * vec2<f32>(0.159999996f, 0.159999996f));
        let x_533 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_532.x, x_532.y, x_533.z, x_533.w);
        let x_535 : vec2<f32> = u_xlat51;
        let x_536 : vec2<f32> = (x_535 * vec2<f32>(0.159999996f, 0.159999996f));
        let x_537 : vec4<f32> = u_xlat7;
        u_xlat7 = vec4<f32>(x_536.x, x_536.y, x_537.z, x_537.w);
        let x_539 : vec4<f32> = u_xlat8;
        let x_541 : vec2<f32> = (vec2<f32>(x_539.x, x_539.y) * vec2<f32>(0.159999996f, 0.159999996f));
        let x_542 : vec4<f32> = u_xlat8;
        u_xlat8 = vec4<f32>(x_541.x, x_541.y, x_542.z, x_542.w);
        let x_545 : vec2<f32> = u_xlat49;
        let x_546 : vec2<f32> = (x_545 * vec2<f32>(0.159999996f, 0.159999996f));
        let x_547 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_546.x, x_546.y, x_547.z, x_547.w);
        let x_549 : vec4<f32> = u_xlat6;
        u_xlat49 = (vec2<f32>(x_549.y, x_549.w) * vec2<f32>(0.159999996f, 0.159999996f));
        let x_553 : f32 = u_xlat8.x;
        u_xlat9.z = x_553;
        let x_556 : f32 = u_xlat49.x;
        u_xlat9.w = x_556;
        let x_559 : f32 = u_xlat10.x;
        u_xlat7.z = x_559;
        let x_562 : f32 = u_xlat6.x;
        u_xlat7.w = x_562;
        let x_565 : vec4<f32> = u_xlat7;
        let x_567 : vec4<f32> = u_xlat9;
        u_xlat11 = (vec4<f32>(x_565.z, x_565.w, x_565.x, x_565.z) + vec4<f32>(x_567.z, x_567.w, x_567.x, x_567.z));
        let x_571 : f32 = u_xlat9.y;
        u_xlat8.z = x_571;
        let x_574 : f32 = u_xlat49.y;
        u_xlat8.w = x_574;
        let x_577 : f32 = u_xlat7.y;
        u_xlat10.z = x_577;
        let x_580 : f32 = u_xlat6.z;
        u_xlat10.w = x_580;
        let x_582 : vec4<f32> = u_xlat8;
        let x_584 : vec4<f32> = u_xlat10;
        let x_586 : vec3<f32> = (vec3<f32>(x_582.z, x_582.y, x_582.w) + vec3<f32>(x_584.z, x_584.y, x_584.w));
        let x_587 : vec4<f32> = u_xlat6;
        u_xlat6 = vec4<f32>(x_586.x, x_586.y, x_586.z, x_587.w);
        let x_589 : vec4<f32> = u_xlat7;
        let x_591 : vec4<f32> = u_xlat11;
        let x_593 : vec3<f32> = (vec3<f32>(x_589.x, x_589.z, x_589.w) / vec3<f32>(x_591.z, x_591.w, x_591.y));
        let x_594 : vec4<f32> = u_xlat7;
        u_xlat7 = vec4<f32>(x_593.x, x_593.y, x_593.z, x_594.w);
        let x_596 : vec4<f32> = u_xlat7;
        let x_602 : vec3<f32> = (vec3<f32>(x_596.x, x_596.y, x_596.z) + vec3<f32>(-2.5f, -0.5f, 1.5f));
        let x_603 : vec4<f32> = u_xlat7;
        u_xlat7 = vec4<f32>(x_602.x, x_602.y, x_602.z, x_603.w);
        let x_605 : vec4<f32> = u_xlat10;
        let x_607 : vec4<f32> = u_xlat6;
        let x_609 : vec3<f32> = (vec3<f32>(x_605.z, x_605.y, x_605.w) / vec3<f32>(x_607.x, x_607.y, x_607.z));
        let x_610 : vec4<f32> = u_xlat8;
        u_xlat8 = vec4<f32>(x_609.x, x_609.y, x_609.z, x_610.w);
        let x_612 : vec4<f32> = u_xlat8;
        let x_614 : vec3<f32> = (vec3<f32>(x_612.x, x_612.y, x_612.z) + vec3<f32>(-2.5f, -0.5f, 1.5f));
        let x_615 : vec4<f32> = u_xlat8;
        u_xlat8 = vec4<f32>(x_614.x, x_614.y, x_614.z, x_615.w);
        let x_617 : vec4<f32> = u_xlat7;
        let x_620 : vec4<f32> = x_138.x_MainLightShadowmapSize;
        let x_622 : vec3<f32> = (vec3<f32>(x_617.y, x_617.x, x_617.z) * vec3<f32>(x_620.x, x_620.x, x_620.x));
        let x_623 : vec4<f32> = u_xlat7;
        u_xlat7 = vec4<f32>(x_622.x, x_622.y, x_622.z, x_623.w);
        let x_625 : vec4<f32> = u_xlat8;
        let x_628 : vec4<f32> = x_138.x_MainLightShadowmapSize;
        let x_630 : vec3<f32> = (vec3<f32>(x_625.x, x_625.y, x_625.z) * vec3<f32>(x_628.y, x_628.y, x_628.y));
        let x_631 : vec4<f32> = u_xlat8;
        u_xlat8 = vec4<f32>(x_630.x, x_630.y, x_630.z, x_631.w);
        let x_634 : f32 = u_xlat8.x;
        u_xlat7.w = x_634;
        let x_636 : vec4<f32> = u_xlat5;
        let x_639 : vec4<f32> = x_138.x_MainLightShadowmapSize;
        let x_642 : vec4<f32> = u_xlat7;
        u_xlat9 = ((vec4<f32>(x_636.x, x_636.y, x_636.x, x_636.y) * vec4<f32>(x_639.x, x_639.y, x_639.x, x_639.y)) + vec4<f32>(x_642.y, x_642.w, x_642.x, x_642.w));
        let x_645 : vec4<f32> = u_xlat5;
        let x_648 : vec4<f32> = x_138.x_MainLightShadowmapSize;
        let x_651 : vec4<f32> = u_xlat7;
        u_xlat49 = ((vec2<f32>(x_645.x, x_645.y) * vec2<f32>(x_648.x, x_648.y)) + vec2<f32>(x_651.z, x_651.w));
        let x_655 : f32 = u_xlat7.y;
        u_xlat8.w = x_655;
        let x_657 : vec4<f32> = u_xlat8;
        let x_658 : vec2<f32> = vec2<f32>(x_657.y, x_657.z);
        let x_659 : vec4<f32> = u_xlat7;
        u_xlat7 = vec4<f32>(x_659.x, x_658.x, x_659.z, x_658.y);
        let x_661 : vec4<f32> = u_xlat5;
        let x_664 : vec4<f32> = x_138.x_MainLightShadowmapSize;
        let x_667 : vec4<f32> = u_xlat7;
        u_xlat10 = ((vec4<f32>(x_661.x, x_661.y, x_661.x, x_661.y) * vec4<f32>(x_664.x, x_664.y, x_664.x, x_664.y)) + vec4<f32>(x_667.x, x_667.y, x_667.z, x_667.y));
        let x_670 : vec4<f32> = u_xlat5;
        let x_673 : vec4<f32> = x_138.x_MainLightShadowmapSize;
        let x_676 : vec4<f32> = u_xlat8;
        u_xlat8 = ((vec4<f32>(x_670.x, x_670.y, x_670.x, x_670.y) * vec4<f32>(x_673.x, x_673.y, x_673.x, x_673.y)) + vec4<f32>(x_676.w, x_676.y, x_676.w, x_676.z));
        let x_679 : vec4<f32> = u_xlat5;
        let x_682 : vec4<f32> = x_138.x_MainLightShadowmapSize;
        let x_685 : vec4<f32> = u_xlat7;
        u_xlat7 = ((vec4<f32>(x_679.x, x_679.y, x_679.x, x_679.y) * vec4<f32>(x_682.x, x_682.y, x_682.x, x_682.y)) + vec4<f32>(x_685.x, x_685.w, x_685.z, x_685.w));
        let x_689 : vec4<f32> = u_xlat6;
        let x_691 : vec4<f32> = u_xlat11;
        u_xlat12 = (vec4<f32>(x_689.x, x_689.x, x_689.x, x_689.y) * vec4<f32>(x_691.z, x_691.w, x_691.y, x_691.z));
        let x_695 : vec4<f32> = u_xlat6;
        let x_697 : vec4<f32> = u_xlat11;
        u_xlat13 = (vec4<f32>(x_695.y, x_695.y, x_695.z, x_695.z) * x_697);
        let x_701 : f32 = u_xlat6.z;
        let x_703 : f32 = u_xlat11.y;
        u_xlat70 = (x_701 * x_703);
        let x_706 : vec4<f32> = u_xlat9;
        let x_707 : vec2<f32> = vec2<f32>(x_706.x, x_706.y);
        let x_709 : f32 = u_xlat4.z;
        txVec4 = vec3<f32>(x_707.x, x_707.y, x_709);
        let x_716 : vec3<f32> = txVec4;
        let x_718 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_716.xy, x_716.z);
        u_xlat5.x = x_718;
        let x_721 : vec4<f32> = u_xlat9;
        let x_722 : vec2<f32> = vec2<f32>(x_721.z, x_721.w);
        let x_724 : f32 = u_xlat4.z;
        txVec5 = vec3<f32>(x_722.x, x_722.y, x_724);
        let x_732 : vec3<f32> = txVec5;
        let x_734 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_732.xy, x_732.z);
        u_xlat27.x = x_734;
        let x_737 : f32 = u_xlat27.x;
        let x_739 : f32 = u_xlat12.y;
        u_xlat27.x = (x_737 * x_739);
        let x_743 : f32 = u_xlat12.x;
        let x_745 : f32 = u_xlat5.x;
        let x_748 : f32 = u_xlat27.x;
        u_xlat5.x = ((x_743 * x_745) + x_748);
        let x_752 : vec2<f32> = u_xlat49;
        let x_754 : f32 = u_xlat4.z;
        txVec6 = vec3<f32>(x_752.x, x_752.y, x_754);
        let x_761 : vec3<f32> = txVec6;
        let x_763 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_761.xy, x_761.z);
        u_xlat27.x = x_763;
        let x_766 : f32 = u_xlat12.z;
        let x_768 : f32 = u_xlat27.x;
        let x_771 : f32 = u_xlat5.x;
        u_xlat5.x = ((x_766 * x_768) + x_771);
        let x_775 : vec4<f32> = u_xlat8;
        let x_776 : vec2<f32> = vec2<f32>(x_775.x, x_775.y);
        let x_778 : f32 = u_xlat4.z;
        txVec7 = vec3<f32>(x_776.x, x_776.y, x_778);
        let x_785 : vec3<f32> = txVec7;
        let x_787 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_785.xy, x_785.z);
        u_xlat27.x = x_787;
        let x_790 : f32 = u_xlat12.w;
        let x_792 : f32 = u_xlat27.x;
        let x_795 : f32 = u_xlat5.x;
        u_xlat5.x = ((x_790 * x_792) + x_795);
        let x_799 : vec4<f32> = u_xlat10;
        let x_800 : vec2<f32> = vec2<f32>(x_799.x, x_799.y);
        let x_802 : f32 = u_xlat4.z;
        txVec8 = vec3<f32>(x_800.x, x_800.y, x_802);
        let x_809 : vec3<f32> = txVec8;
        let x_811 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_809.xy, x_809.z);
        u_xlat27.x = x_811;
        let x_814 : f32 = u_xlat13.x;
        let x_816 : f32 = u_xlat27.x;
        let x_819 : f32 = u_xlat5.x;
        u_xlat5.x = ((x_814 * x_816) + x_819);
        let x_823 : vec4<f32> = u_xlat10;
        let x_824 : vec2<f32> = vec2<f32>(x_823.z, x_823.w);
        let x_826 : f32 = u_xlat4.z;
        txVec9 = vec3<f32>(x_824.x, x_824.y, x_826);
        let x_833 : vec3<f32> = txVec9;
        let x_835 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_833.xy, x_833.z);
        u_xlat27.x = x_835;
        let x_838 : f32 = u_xlat13.y;
        let x_840 : f32 = u_xlat27.x;
        let x_843 : f32 = u_xlat5.x;
        u_xlat5.x = ((x_838 * x_840) + x_843);
        let x_847 : vec4<f32> = u_xlat8;
        let x_848 : vec2<f32> = vec2<f32>(x_847.z, x_847.w);
        let x_850 : f32 = u_xlat4.z;
        txVec10 = vec3<f32>(x_848.x, x_848.y, x_850);
        let x_857 : vec3<f32> = txVec10;
        let x_859 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_857.xy, x_857.z);
        u_xlat27.x = x_859;
        let x_862 : f32 = u_xlat13.z;
        let x_864 : f32 = u_xlat27.x;
        let x_867 : f32 = u_xlat5.x;
        u_xlat5.x = ((x_862 * x_864) + x_867);
        let x_871 : vec4<f32> = u_xlat7;
        let x_872 : vec2<f32> = vec2<f32>(x_871.x, x_871.y);
        let x_874 : f32 = u_xlat4.z;
        txVec11 = vec3<f32>(x_872.x, x_872.y, x_874);
        let x_881 : vec3<f32> = txVec11;
        let x_883 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_881.xy, x_881.z);
        u_xlat27.x = x_883;
        let x_886 : f32 = u_xlat13.w;
        let x_888 : f32 = u_xlat27.x;
        let x_891 : f32 = u_xlat5.x;
        u_xlat5.x = ((x_886 * x_888) + x_891);
        let x_895 : vec4<f32> = u_xlat7;
        let x_896 : vec2<f32> = vec2<f32>(x_895.z, x_895.w);
        let x_898 : f32 = u_xlat4.z;
        txVec12 = vec3<f32>(x_896.x, x_896.y, x_898);
        let x_905 : vec3<f32> = txVec12;
        let x_907 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_905.xy, x_905.z);
        u_xlat27.x = x_907;
        let x_909 : f32 = u_xlat70;
        let x_911 : f32 = u_xlat27.x;
        let x_914 : f32 = u_xlat5.x;
        u_xlat68 = ((x_909 * x_911) + x_914);
      } else {
        let x_917 : vec4<f32> = u_xlat4;
        let x_920 : vec4<f32> = x_138.x_MainLightShadowmapSize;
        let x_923 : vec2<f32> = ((vec2<f32>(x_917.x, x_917.y) * vec2<f32>(x_920.z, x_920.w)) + vec2<f32>(0.5f, 0.5f));
        let x_924 : vec4<f32> = u_xlat5;
        u_xlat5 = vec4<f32>(x_923.x, x_923.y, x_924.z, x_924.w);
        let x_926 : vec4<f32> = u_xlat5;
        let x_928 : vec2<f32> = floor(vec2<f32>(x_926.x, x_926.y));
        let x_929 : vec4<f32> = u_xlat5;
        u_xlat5 = vec4<f32>(x_928.x, x_928.y, x_929.z, x_929.w);
        let x_931 : vec4<f32> = u_xlat4;
        let x_934 : vec4<f32> = x_138.x_MainLightShadowmapSize;
        let x_937 : vec4<f32> = u_xlat5;
        u_xlat49 = ((vec2<f32>(x_931.x, x_931.y) * vec2<f32>(x_934.z, x_934.w)) + -(vec2<f32>(x_937.x, x_937.y)));
        let x_941 : vec2<f32> = u_xlat49;
        u_xlat6 = (vec4<f32>(x_941.x, x_941.x, x_941.y, x_941.y) + vec4<f32>(0.5f, 1.0f, 0.5f, 1.0f));
        let x_944 : vec4<f32> = u_xlat6;
        let x_946 : vec4<f32> = u_xlat6;
        u_xlat7 = (vec4<f32>(x_944.x, x_944.x, x_944.z, x_944.z) * vec4<f32>(x_946.x, x_946.x, x_946.z, x_946.z));
        let x_949 : vec4<f32> = u_xlat7;
        let x_953 : vec2<f32> = (vec2<f32>(x_949.y, x_949.w) * vec2<f32>(0.040816002f, 0.040816002f));
        let x_954 : vec4<f32> = u_xlat8;
        u_xlat8 = vec4<f32>(x_954.x, x_953.x, x_954.z, x_953.y);
        let x_956 : vec4<f32> = u_xlat7;
        let x_959 : vec2<f32> = u_xlat49;
        let x_961 : vec2<f32> = ((vec2<f32>(x_956.x, x_956.z) * vec2<f32>(0.5f, 0.5f)) + -(x_959));
        let x_962 : vec4<f32> = u_xlat6;
        u_xlat6 = vec4<f32>(x_961.x, x_962.y, x_961.y, x_962.w);
        let x_964 : vec2<f32> = u_xlat49;
        let x_966 : vec2<f32> = (-(x_964) + vec2<f32>(1.0f, 1.0f));
        let x_967 : vec4<f32> = u_xlat7;
        u_xlat7 = vec4<f32>(x_966.x, x_966.y, x_967.z, x_967.w);
        let x_969 : vec2<f32> = u_xlat49;
        u_xlat51 = min(x_969, vec2<f32>(0.0f, 0.0f));
        let x_971 : vec2<f32> = u_xlat51;
        let x_973 : vec2<f32> = u_xlat51;
        let x_975 : vec4<f32> = u_xlat7;
        let x_977 : vec2<f32> = ((-(x_971) * x_973) + vec2<f32>(x_975.x, x_975.y));
        let x_978 : vec4<f32> = u_xlat7;
        u_xlat7 = vec4<f32>(x_977.x, x_977.y, x_978.z, x_978.w);
        let x_980 : vec2<f32> = u_xlat49;
        u_xlat51 = max(x_980, vec2<f32>(0.0f, 0.0f));
        let x_983 : vec2<f32> = u_xlat51;
        let x_985 : vec2<f32> = u_xlat51;
        let x_987 : vec4<f32> = u_xlat6;
        let x_989 : vec2<f32> = ((-(x_983) * x_985) + vec2<f32>(x_987.y, x_987.w));
        let x_990 : vec3<f32> = u_xlat28;
        u_xlat28 = vec3<f32>(x_989.x, x_990.y, x_989.y);
        let x_992 : vec4<f32> = u_xlat7;
        let x_995 : vec2<f32> = (vec2<f32>(x_992.x, x_992.y) + vec2<f32>(2.0f, 2.0f));
        let x_996 : vec4<f32> = u_xlat7;
        u_xlat7 = vec4<f32>(x_995.x, x_995.y, x_996.z, x_996.w);
        let x_998 : vec3<f32> = u_xlat28;
        let x_1000 : vec2<f32> = (vec2<f32>(x_998.x, x_998.z) + vec2<f32>(2.0f, 2.0f));
        let x_1001 : vec4<f32> = u_xlat6;
        u_xlat6 = vec4<f32>(x_1001.x, x_1000.x, x_1001.z, x_1000.y);
        let x_1004 : f32 = u_xlat6.y;
        u_xlat9.z = (x_1004 * 0.081632003f);
        let x_1008 : vec4<f32> = u_xlat6;
        let x_1011 : vec3<f32> = (vec3<f32>(x_1008.z, x_1008.x, x_1008.w) * vec3<f32>(0.081632003f, 0.081632003f, 0.081632003f));
        let x_1012 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_1011.x, x_1011.y, x_1011.z, x_1012.w);
        let x_1014 : vec4<f32> = u_xlat7;
        let x_1017 : vec2<f32> = (vec2<f32>(x_1014.x, x_1014.y) * vec2<f32>(0.081632003f, 0.081632003f));
        let x_1018 : vec4<f32> = u_xlat6;
        u_xlat6 = vec4<f32>(x_1017.x, x_1017.y, x_1018.z, x_1018.w);
        let x_1021 : f32 = u_xlat10.y;
        u_xlat9.x = x_1021;
        let x_1023 : vec2<f32> = u_xlat49;
        let x_1030 : vec2<f32> = ((vec2<f32>(x_1023.x, x_1023.x) * vec2<f32>(-0.081632003f, 0.081632003f)) + vec2<f32>(0.163264006f, 0.081632003f));
        let x_1031 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_1031.x, x_1030.x, x_1031.z, x_1030.y);
        let x_1033 : vec2<f32> = u_xlat49;
        let x_1037 : vec2<f32> = ((vec2<f32>(x_1033.x, x_1033.x) * vec2<f32>(-0.081632003f, 0.081632003f)) + vec2<f32>(0.081632003f, 0.163264006f));
        let x_1038 : vec4<f32> = u_xlat7;
        u_xlat7 = vec4<f32>(x_1037.x, x_1038.y, x_1037.y, x_1038.w);
        let x_1041 : f32 = u_xlat6.x;
        u_xlat7.y = x_1041;
        let x_1044 : f32 = u_xlat8.y;
        u_xlat7.w = x_1044;
        let x_1046 : vec4<f32> = u_xlat7;
        let x_1047 : vec4<f32> = u_xlat9;
        u_xlat9 = (x_1046 + x_1047);
        let x_1049 : vec2<f32> = u_xlat49;
        let x_1052 : vec2<f32> = ((vec2<f32>(x_1049.y, x_1049.y) * vec2<f32>(-0.081632003f, 0.081632003f)) + vec2<f32>(0.163264006f, 0.081632003f));
        let x_1053 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_1053.x, x_1052.x, x_1053.z, x_1052.y);
        let x_1055 : vec2<f32> = u_xlat49;
        let x_1058 : vec2<f32> = ((vec2<f32>(x_1055.y, x_1055.y) * vec2<f32>(-0.081632003f, 0.081632003f)) + vec2<f32>(0.081632003f, 0.163264006f));
        let x_1059 : vec4<f32> = u_xlat8;
        u_xlat8 = vec4<f32>(x_1058.x, x_1059.y, x_1058.y, x_1059.w);
        let x_1062 : f32 = u_xlat6.y;
        u_xlat8.y = x_1062;
        let x_1064 : vec4<f32> = u_xlat8;
        let x_1065 : vec4<f32> = u_xlat10;
        u_xlat6 = (x_1064 + x_1065);
        let x_1067 : vec4<f32> = u_xlat7;
        let x_1068 : vec4<f32> = u_xlat9;
        u_xlat7 = (x_1067 / x_1068);
        let x_1070 : vec4<f32> = u_xlat7;
        u_xlat7 = (x_1070 + vec4<f32>(-3.5f, -1.5f, 0.5f, 2.5f));
        let x_1076 : vec4<f32> = u_xlat8;
        let x_1077 : vec4<f32> = u_xlat6;
        u_xlat8 = (x_1076 / x_1077);
        let x_1079 : vec4<f32> = u_xlat8;
        u_xlat8 = (x_1079 + vec4<f32>(-3.5f, -1.5f, 0.5f, 2.5f));
        let x_1081 : vec4<f32> = u_xlat7;
        let x_1084 : vec4<f32> = x_138.x_MainLightShadowmapSize;
        u_xlat7 = (vec4<f32>(x_1081.w, x_1081.x, x_1081.y, x_1081.z) * vec4<f32>(x_1084.x, x_1084.x, x_1084.x, x_1084.x));
        let x_1087 : vec4<f32> = u_xlat8;
        let x_1090 : vec4<f32> = x_138.x_MainLightShadowmapSize;
        u_xlat8 = (vec4<f32>(x_1087.x, x_1087.w, x_1087.y, x_1087.z) * vec4<f32>(x_1090.y, x_1090.y, x_1090.y, x_1090.y));
        let x_1093 : vec4<f32> = u_xlat7;
        let x_1094 : vec3<f32> = vec3<f32>(x_1093.y, x_1093.z, x_1093.w);
        let x_1095 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_1094.x, x_1095.y, x_1094.y, x_1094.z);
        let x_1098 : f32 = u_xlat8.x;
        u_xlat10.y = x_1098;
        let x_1100 : vec4<f32> = u_xlat5;
        let x_1103 : vec4<f32> = x_138.x_MainLightShadowmapSize;
        let x_1106 : vec4<f32> = u_xlat10;
        u_xlat11 = ((vec4<f32>(x_1100.x, x_1100.y, x_1100.x, x_1100.y) * vec4<f32>(x_1103.x, x_1103.y, x_1103.x, x_1103.y)) + vec4<f32>(x_1106.x, x_1106.y, x_1106.z, x_1106.y));
        let x_1109 : vec4<f32> = u_xlat5;
        let x_1112 : vec4<f32> = x_138.x_MainLightShadowmapSize;
        let x_1115 : vec4<f32> = u_xlat10;
        u_xlat49 = ((vec2<f32>(x_1109.x, x_1109.y) * vec2<f32>(x_1112.x, x_1112.y)) + vec2<f32>(x_1115.w, x_1115.y));
        let x_1119 : f32 = u_xlat10.y;
        u_xlat7.y = x_1119;
        let x_1122 : f32 = u_xlat8.z;
        u_xlat10.y = x_1122;
        let x_1124 : vec4<f32> = u_xlat5;
        let x_1127 : vec4<f32> = x_138.x_MainLightShadowmapSize;
        let x_1130 : vec4<f32> = u_xlat10;
        u_xlat12 = ((vec4<f32>(x_1124.x, x_1124.y, x_1124.x, x_1124.y) * vec4<f32>(x_1127.x, x_1127.y, x_1127.x, x_1127.y)) + vec4<f32>(x_1130.x, x_1130.y, x_1130.z, x_1130.y));
        let x_1133 : vec4<f32> = u_xlat5;
        let x_1136 : vec4<f32> = x_138.x_MainLightShadowmapSize;
        let x_1139 : vec4<f32> = u_xlat10;
        let x_1141 : vec2<f32> = ((vec2<f32>(x_1133.x, x_1133.y) * vec2<f32>(x_1136.x, x_1136.y)) + vec2<f32>(x_1139.w, x_1139.y));
        let x_1142 : vec4<f32> = u_xlat13;
        u_xlat13 = vec4<f32>(x_1141.x, x_1141.y, x_1142.z, x_1142.w);
        let x_1145 : f32 = u_xlat10.y;
        u_xlat7.z = x_1145;
        let x_1148 : vec4<f32> = u_xlat5;
        let x_1151 : vec4<f32> = x_138.x_MainLightShadowmapSize;
        let x_1154 : vec4<f32> = u_xlat7;
        u_xlat14 = ((vec4<f32>(x_1148.x, x_1148.y, x_1148.x, x_1148.y) * vec4<f32>(x_1151.x, x_1151.y, x_1151.x, x_1151.y)) + vec4<f32>(x_1154.x, x_1154.y, x_1154.x, x_1154.z));
        let x_1158 : f32 = u_xlat8.w;
        u_xlat10.y = x_1158;
        let x_1161 : vec4<f32> = u_xlat5;
        let x_1164 : vec4<f32> = x_138.x_MainLightShadowmapSize;
        let x_1167 : vec4<f32> = u_xlat10;
        u_xlat15 = ((vec4<f32>(x_1161.x, x_1161.y, x_1161.x, x_1161.y) * vec4<f32>(x_1164.x, x_1164.y, x_1164.x, x_1164.y)) + vec4<f32>(x_1167.x, x_1167.y, x_1167.z, x_1167.y));
        let x_1171 : vec4<f32> = u_xlat5;
        let x_1174 : vec4<f32> = x_138.x_MainLightShadowmapSize;
        let x_1177 : vec4<f32> = u_xlat10;
        u_xlat29 = ((vec2<f32>(x_1171.x, x_1171.y) * vec2<f32>(x_1174.x, x_1174.y)) + vec2<f32>(x_1177.w, x_1177.y));
        let x_1181 : f32 = u_xlat10.y;
        u_xlat7.w = x_1181;
        let x_1184 : vec4<f32> = u_xlat5;
        let x_1187 : vec4<f32> = x_138.x_MainLightShadowmapSize;
        let x_1190 : vec4<f32> = u_xlat7;
        u_xlat57 = ((vec2<f32>(x_1184.x, x_1184.y) * vec2<f32>(x_1187.x, x_1187.y)) + vec2<f32>(x_1190.x, x_1190.w));
        let x_1193 : vec4<f32> = u_xlat10;
        let x_1194 : vec3<f32> = vec3<f32>(x_1193.x, x_1193.z, x_1193.w);
        let x_1195 : vec4<f32> = u_xlat8;
        u_xlat8 = vec4<f32>(x_1194.x, x_1195.y, x_1194.y, x_1194.z);
        let x_1197 : vec4<f32> = u_xlat5;
        let x_1200 : vec4<f32> = x_138.x_MainLightShadowmapSize;
        let x_1203 : vec4<f32> = u_xlat8;
        u_xlat10 = ((vec4<f32>(x_1197.x, x_1197.y, x_1197.x, x_1197.y) * vec4<f32>(x_1200.x, x_1200.y, x_1200.x, x_1200.y)) + vec4<f32>(x_1203.x, x_1203.y, x_1203.z, x_1203.y));
        let x_1207 : vec4<f32> = u_xlat5;
        let x_1210 : vec4<f32> = x_138.x_MainLightShadowmapSize;
        let x_1213 : vec4<f32> = u_xlat8;
        u_xlat52 = ((vec2<f32>(x_1207.x, x_1207.y) * vec2<f32>(x_1210.x, x_1210.y)) + vec2<f32>(x_1213.w, x_1213.y));
        let x_1217 : f32 = u_xlat7.x;
        u_xlat8.x = x_1217;
        let x_1219 : vec4<f32> = u_xlat5;
        let x_1222 : vec4<f32> = x_138.x_MainLightShadowmapSize;
        let x_1225 : vec4<f32> = u_xlat8;
        let x_1227 : vec2<f32> = ((vec2<f32>(x_1219.x, x_1219.y) * vec2<f32>(x_1222.x, x_1222.y)) + vec2<f32>(x_1225.x, x_1225.y));
        let x_1228 : vec4<f32> = u_xlat5;
        u_xlat5 = vec4<f32>(x_1227.x, x_1227.y, x_1228.z, x_1228.w);
        let x_1231 : vec4<f32> = u_xlat6;
        let x_1233 : vec4<f32> = u_xlat9;
        u_xlat16 = (vec4<f32>(x_1231.x, x_1231.x, x_1231.x, x_1231.x) * x_1233);
        let x_1236 : vec4<f32> = u_xlat6;
        let x_1238 : vec4<f32> = u_xlat9;
        u_xlat17 = (vec4<f32>(x_1236.y, x_1236.y, x_1236.y, x_1236.y) * x_1238);
        let x_1241 : vec4<f32> = u_xlat6;
        let x_1243 : vec4<f32> = u_xlat9;
        u_xlat18 = (vec4<f32>(x_1241.z, x_1241.z, x_1241.z, x_1241.z) * x_1243);
        let x_1245 : vec4<f32> = u_xlat6;
        let x_1247 : vec4<f32> = u_xlat9;
        u_xlat6 = (vec4<f32>(x_1245.w, x_1245.w, x_1245.w, x_1245.w) * x_1247);
        let x_1250 : vec4<f32> = u_xlat11;
        let x_1251 : vec2<f32> = vec2<f32>(x_1250.x, x_1250.y);
        let x_1253 : f32 = u_xlat4.z;
        txVec13 = vec3<f32>(x_1251.x, x_1251.y, x_1253);
        let x_1260 : vec3<f32> = txVec13;
        let x_1262 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1260.xy, x_1260.z);
        u_xlat70 = x_1262;
        let x_1264 : vec4<f32> = u_xlat11;
        let x_1265 : vec2<f32> = vec2<f32>(x_1264.z, x_1264.w);
        let x_1267 : f32 = u_xlat4.z;
        txVec14 = vec3<f32>(x_1265.x, x_1265.y, x_1267);
        let x_1274 : vec3<f32> = txVec14;
        let x_1276 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1274.xy, x_1274.z);
        u_xlat7.x = x_1276;
        let x_1279 : f32 = u_xlat7.x;
        let x_1281 : f32 = u_xlat16.y;
        u_xlat7.x = (x_1279 * x_1281);
        let x_1285 : f32 = u_xlat16.x;
        let x_1286 : f32 = u_xlat70;
        let x_1289 : f32 = u_xlat7.x;
        u_xlat70 = ((x_1285 * x_1286) + x_1289);
        let x_1292 : vec2<f32> = u_xlat49;
        let x_1294 : f32 = u_xlat4.z;
        txVec15 = vec3<f32>(x_1292.x, x_1292.y, x_1294);
        let x_1301 : vec3<f32> = txVec15;
        let x_1303 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1301.xy, x_1301.z);
        u_xlat49.x = x_1303;
        let x_1306 : f32 = u_xlat16.z;
        let x_1308 : f32 = u_xlat49.x;
        let x_1310 : f32 = u_xlat70;
        u_xlat70 = ((x_1306 * x_1308) + x_1310);
        let x_1313 : vec4<f32> = u_xlat14;
        let x_1314 : vec2<f32> = vec2<f32>(x_1313.x, x_1313.y);
        let x_1316 : f32 = u_xlat4.z;
        txVec16 = vec3<f32>(x_1314.x, x_1314.y, x_1316);
        let x_1323 : vec3<f32> = txVec16;
        let x_1325 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1323.xy, x_1323.z);
        u_xlat49.x = x_1325;
        let x_1328 : f32 = u_xlat16.w;
        let x_1330 : f32 = u_xlat49.x;
        let x_1332 : f32 = u_xlat70;
        u_xlat70 = ((x_1328 * x_1330) + x_1332);
        let x_1335 : vec4<f32> = u_xlat12;
        let x_1336 : vec2<f32> = vec2<f32>(x_1335.x, x_1335.y);
        let x_1338 : f32 = u_xlat4.z;
        txVec17 = vec3<f32>(x_1336.x, x_1336.y, x_1338);
        let x_1345 : vec3<f32> = txVec17;
        let x_1347 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1345.xy, x_1345.z);
        u_xlat49.x = x_1347;
        let x_1350 : f32 = u_xlat17.x;
        let x_1352 : f32 = u_xlat49.x;
        let x_1354 : f32 = u_xlat70;
        u_xlat70 = ((x_1350 * x_1352) + x_1354);
        let x_1357 : vec4<f32> = u_xlat12;
        let x_1358 : vec2<f32> = vec2<f32>(x_1357.z, x_1357.w);
        let x_1360 : f32 = u_xlat4.z;
        txVec18 = vec3<f32>(x_1358.x, x_1358.y, x_1360);
        let x_1367 : vec3<f32> = txVec18;
        let x_1369 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1367.xy, x_1367.z);
        u_xlat49.x = x_1369;
        let x_1372 : f32 = u_xlat17.y;
        let x_1374 : f32 = u_xlat49.x;
        let x_1376 : f32 = u_xlat70;
        u_xlat70 = ((x_1372 * x_1374) + x_1376);
        let x_1379 : vec4<f32> = u_xlat13;
        let x_1380 : vec2<f32> = vec2<f32>(x_1379.x, x_1379.y);
        let x_1382 : f32 = u_xlat4.z;
        txVec19 = vec3<f32>(x_1380.x, x_1380.y, x_1382);
        let x_1389 : vec3<f32> = txVec19;
        let x_1391 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1389.xy, x_1389.z);
        u_xlat49.x = x_1391;
        let x_1394 : f32 = u_xlat17.z;
        let x_1396 : f32 = u_xlat49.x;
        let x_1398 : f32 = u_xlat70;
        u_xlat70 = ((x_1394 * x_1396) + x_1398);
        let x_1401 : vec4<f32> = u_xlat14;
        let x_1402 : vec2<f32> = vec2<f32>(x_1401.z, x_1401.w);
        let x_1404 : f32 = u_xlat4.z;
        txVec20 = vec3<f32>(x_1402.x, x_1402.y, x_1404);
        let x_1411 : vec3<f32> = txVec20;
        let x_1413 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1411.xy, x_1411.z);
        u_xlat49.x = x_1413;
        let x_1416 : f32 = u_xlat17.w;
        let x_1418 : f32 = u_xlat49.x;
        let x_1420 : f32 = u_xlat70;
        u_xlat70 = ((x_1416 * x_1418) + x_1420);
        let x_1423 : vec4<f32> = u_xlat15;
        let x_1424 : vec2<f32> = vec2<f32>(x_1423.x, x_1423.y);
        let x_1426 : f32 = u_xlat4.z;
        txVec21 = vec3<f32>(x_1424.x, x_1424.y, x_1426);
        let x_1433 : vec3<f32> = txVec21;
        let x_1435 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1433.xy, x_1433.z);
        u_xlat49.x = x_1435;
        let x_1438 : f32 = u_xlat18.x;
        let x_1440 : f32 = u_xlat49.x;
        let x_1442 : f32 = u_xlat70;
        u_xlat70 = ((x_1438 * x_1440) + x_1442);
        let x_1445 : vec4<f32> = u_xlat15;
        let x_1446 : vec2<f32> = vec2<f32>(x_1445.z, x_1445.w);
        let x_1448 : f32 = u_xlat4.z;
        txVec22 = vec3<f32>(x_1446.x, x_1446.y, x_1448);
        let x_1455 : vec3<f32> = txVec22;
        let x_1457 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1455.xy, x_1455.z);
        u_xlat49.x = x_1457;
        let x_1460 : f32 = u_xlat18.y;
        let x_1462 : f32 = u_xlat49.x;
        let x_1464 : f32 = u_xlat70;
        u_xlat70 = ((x_1460 * x_1462) + x_1464);
        let x_1467 : vec2<f32> = u_xlat29;
        let x_1469 : f32 = u_xlat4.z;
        txVec23 = vec3<f32>(x_1467.x, x_1467.y, x_1469);
        let x_1476 : vec3<f32> = txVec23;
        let x_1478 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1476.xy, x_1476.z);
        u_xlat49.x = x_1478;
        let x_1481 : f32 = u_xlat18.z;
        let x_1483 : f32 = u_xlat49.x;
        let x_1485 : f32 = u_xlat70;
        u_xlat70 = ((x_1481 * x_1483) + x_1485);
        let x_1488 : vec2<f32> = u_xlat57;
        let x_1490 : f32 = u_xlat4.z;
        txVec24 = vec3<f32>(x_1488.x, x_1488.y, x_1490);
        let x_1497 : vec3<f32> = txVec24;
        let x_1499 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1497.xy, x_1497.z);
        u_xlat49.x = x_1499;
        let x_1502 : f32 = u_xlat18.w;
        let x_1504 : f32 = u_xlat49.x;
        let x_1506 : f32 = u_xlat70;
        u_xlat70 = ((x_1502 * x_1504) + x_1506);
        let x_1509 : vec4<f32> = u_xlat10;
        let x_1510 : vec2<f32> = vec2<f32>(x_1509.x, x_1509.y);
        let x_1512 : f32 = u_xlat4.z;
        txVec25 = vec3<f32>(x_1510.x, x_1510.y, x_1512);
        let x_1519 : vec3<f32> = txVec25;
        let x_1521 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1519.xy, x_1519.z);
        u_xlat49.x = x_1521;
        let x_1524 : f32 = u_xlat6.x;
        let x_1526 : f32 = u_xlat49.x;
        let x_1528 : f32 = u_xlat70;
        u_xlat70 = ((x_1524 * x_1526) + x_1528);
        let x_1531 : vec4<f32> = u_xlat10;
        let x_1532 : vec2<f32> = vec2<f32>(x_1531.z, x_1531.w);
        let x_1534 : f32 = u_xlat4.z;
        txVec26 = vec3<f32>(x_1532.x, x_1532.y, x_1534);
        let x_1541 : vec3<f32> = txVec26;
        let x_1543 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1541.xy, x_1541.z);
        u_xlat49.x = x_1543;
        let x_1546 : f32 = u_xlat6.y;
        let x_1548 : f32 = u_xlat49.x;
        let x_1550 : f32 = u_xlat70;
        u_xlat70 = ((x_1546 * x_1548) + x_1550);
        let x_1553 : vec2<f32> = u_xlat52;
        let x_1555 : f32 = u_xlat4.z;
        txVec27 = vec3<f32>(x_1553.x, x_1553.y, x_1555);
        let x_1562 : vec3<f32> = txVec27;
        let x_1564 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1562.xy, x_1562.z);
        u_xlat49.x = x_1564;
        let x_1567 : f32 = u_xlat6.z;
        let x_1569 : f32 = u_xlat49.x;
        let x_1571 : f32 = u_xlat70;
        u_xlat70 = ((x_1567 * x_1569) + x_1571);
        let x_1574 : vec4<f32> = u_xlat5;
        let x_1575 : vec2<f32> = vec2<f32>(x_1574.x, x_1574.y);
        let x_1577 : f32 = u_xlat4.z;
        txVec28 = vec3<f32>(x_1575.x, x_1575.y, x_1577);
        let x_1584 : vec3<f32> = txVec28;
        let x_1586 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1584.xy, x_1584.z);
        u_xlat5.x = x_1586;
        let x_1589 : f32 = u_xlat6.w;
        let x_1591 : f32 = u_xlat5.x;
        let x_1593 : f32 = u_xlat70;
        u_xlat68 = ((x_1589 * x_1591) + x_1593);
      }
    }
  } else {
    let x_1597 : vec4<f32> = u_xlat4;
    let x_1598 : vec2<f32> = vec2<f32>(x_1597.x, x_1597.y);
    let x_1600 : f32 = u_xlat4.z;
    txVec29 = vec3<f32>(x_1598.x, x_1598.y, x_1600);
    let x_1607 : vec3<f32> = txVec29;
    let x_1609 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1607.xy, x_1607.z);
    u_xlat68 = x_1609;
  }
  let x_1611 : f32 = x_138.x_MainLightShadowParams.x;
  u_xlat70 = (-(x_1611) + 1.0f);
  let x_1614 : f32 = u_xlat68;
  let x_1616 : f32 = x_138.x_MainLightShadowParams.x;
  let x_1618 : f32 = u_xlat70;
  u_xlat68 = ((x_1614 * x_1616) + x_1618);
  let x_1622 : f32 = u_xlat4.z;
  u_xlatb5 = (0.0f >= x_1622);
  let x_1626 : f32 = u_xlat4.z;
  u_xlatb27 = (x_1626 >= 1.0f);
  let x_1628 : bool = u_xlatb27;
  let x_1629 : bool = u_xlatb5;
  u_xlatb5 = (x_1628 | x_1629);
  let x_1631 : bool = u_xlatb5;
  let x_1632 : f32 = u_xlat68;
  u_xlat68 = select(x_1632, 1.0f, x_1631);
  let x_1634 : vec3<f32> = u_xlat0;
  let x_1636 : vec4<f32> = x_66.x_MainLightPosition;
  u_xlat0.x = dot(x_1634, -(vec3<f32>(x_1636.x, x_1636.y, x_1636.z)));
  let x_1642 : f32 = u_xlat0.x;
  u_xlat0.x = clamp(x_1642, 0.0f, 1.0f);
  let x_1645 : f32 = u_xlat68;
  let x_1648 : vec4<f32> = x_66.x_MainLightColor;
  u_xlat27 = (vec3<f32>(x_1645, x_1645, x_1645) * vec3<f32>(x_1648.x, x_1648.y, x_1648.z));
  let x_1651 : vec3<f32> = u_xlat0;
  let x_1653 : vec3<f32> = u_xlat27;
  u_xlat0 = (vec3<f32>(x_1651.x, x_1651.x, x_1651.x) * x_1653);
  let x_1655 : vec3<f32> = u_xlat0;
  let x_1656 : vec4<f32> = u_xlat1;
  u_xlat0 = (x_1655 * vec3<f32>(x_1656.x, x_1656.y, x_1656.z));
  let x_1661 : f32 = u_xlat1.w;
  u_xlatb1 = (x_1661 >= 0.400000006f);
  let x_1664 : bool = u_xlatb1;
  if (x_1664) {
    let x_1669 : f32 = u_xlat1.w;
    x_1665 = x_1669;
  } else {
    x_1665 = 0.0f;
  }
  let x_1671 : f32 = x_1665;
  u_xlat1.x = x_1671;
  let x_1675 : f32 = u_xlat1.w;
  u_xlat23.x = (x_1675 + -0.400000006f);
  let x_1681 : f32 = u_xlat1.w;
  u_xlat45 = dpdxCoarse(x_1681);
  let x_1685 : f32 = u_xlat1.w;
  u_xlat67 = dpdyCoarse(x_1685);
  let x_1687 : f32 = u_xlat67;
  let x_1689 : f32 = u_xlat45;
  u_xlat45 = (abs(x_1687) + abs(x_1689));
  let x_1692 : f32 = u_xlat45;
  u_xlat45 = max(x_1692, 0.0001f);
  let x_1696 : f32 = u_xlat23.x;
  let x_1697 : f32 = u_xlat45;
  u_xlat23.x = (x_1696 / x_1697);
  let x_1701 : f32 = u_xlat23.x;
  u_xlat23.x = (x_1701 + 0.5f);
  let x_1705 : f32 = u_xlat23.x;
  u_xlat23.x = clamp(x_1705, 0.0f, 1.0f);
  let x_1710 : f32 = x_66.x_AlphaToMaskAvailable;
  u_xlatb45 = !((x_1710 == 0.0f));
  let x_1712 : bool = u_xlatb45;
  if (x_1712) {
    let x_1717 : f32 = u_xlat23.x;
    x_1713 = x_1717;
  } else {
    let x_1720 : f32 = u_xlat1.x;
    x_1713 = x_1720;
  }
  let x_1721 : f32 = x_1713;
  u_xlat1.x = x_1721;
  let x_1724 : f32 = u_xlat1.x;
  u_xlat23.x = (x_1724 + -0.0001f);
  let x_1732 : f32 = u_xlat23.x;
  u_xlatb23.x = (x_1732 < 0.0f);
  let x_1736 : bool = u_xlatb23.x;
  if (((select(0i, 1i, x_1736) * -1i) != 0i)) {
    discard;
  }
  let x_1746 : f32 = vs_INTERP2.w;
  u_xlatb23.x = (0.0f < x_1746);
  let x_1754 : f32 = x_1752.unity_WorldTransformParams.w;
  u_xlatb23.z = (x_1754 >= 0.0f);
  let x_1758 : bool = u_xlatb23.x;
  u_xlat23.x = select(-1.0f, 1.0f, x_1758);
  let x_1762 : bool = u_xlatb23.z;
  u_xlat23.z = select(-1.0f, 1.0f, x_1762);
  let x_1766 : f32 = u_xlat23.z;
  let x_1768 : f32 = u_xlat23.x;
  u_xlat23.x = (x_1766 * x_1768);
  let x_1771 : vec3<f32> = vs_INTERP1;
  let x_1773 : vec4<f32> = vs_INTERP2;
  u_xlat27 = (vec3<f32>(x_1771.z, x_1771.x, x_1771.y) * vec3<f32>(x_1773.y, x_1773.z, x_1773.x));
  let x_1776 : vec3<f32> = vs_INTERP1;
  let x_1778 : vec4<f32> = vs_INTERP2;
  let x_1781 : vec3<f32> = u_xlat27;
  u_xlat27 = ((vec3<f32>(x_1776.y, x_1776.z, x_1776.x) * vec3<f32>(x_1778.z, x_1778.x, x_1778.y)) + -(x_1781));
  let x_1784 : vec3<f32> = u_xlat23;
  let x_1786 : vec3<f32> = u_xlat27;
  u_xlat27 = (vec3<f32>(x_1784.x, x_1784.x, x_1784.x) * x_1786);
  let x_1788 : vec3<f32> = u_xlat25;
  let x_1790 : vec3<f32> = u_xlat27;
  u_xlat27 = (vec3<f32>(x_1788.y, x_1788.y, x_1788.y) * x_1790);
  let x_1792 : vec3<f32> = u_xlat25;
  let x_1794 : vec4<f32> = vs_INTERP2;
  let x_1797 : vec3<f32> = u_xlat27;
  u_xlat27 = ((vec3<f32>(x_1792.x, x_1792.x, x_1792.x) * vec3<f32>(x_1794.x, x_1794.y, x_1794.z)) + x_1797);
  let x_1799 : vec3<f32> = u_xlat25;
  let x_1801 : vec3<f32> = vs_INTERP1;
  let x_1803 : vec3<f32> = u_xlat27;
  u_xlat25 = ((vec3<f32>(x_1799.z, x_1799.z, x_1799.z) * x_1801) + x_1803);
  let x_1805 : vec3<f32> = u_xlat25;
  let x_1806 : vec3<f32> = u_xlat25;
  u_xlat23.x = dot(x_1805, x_1806);
  let x_1810 : f32 = u_xlat23.x;
  u_xlat23.x = inverseSqrt(x_1810);
  let x_1813 : vec3<f32> = u_xlat23;
  let x_1815 : vec3<f32> = u_xlat25;
  u_xlat25 = (vec3<f32>(x_1813.x, x_1813.x, x_1813.x) * x_1815);
  let x_1819 : f32 = x_66.unity_OrthoParams.w;
  u_xlatb23.x = (x_1819 == 0.0f);
  let x_1822 : vec3<f32> = vs_INTERP0;
  let x_1826 : vec3<f32> = x_66.x_WorldSpaceCameraPos;
  u_xlat27 = (-(x_1822) + x_1826);
  let x_1828 : vec3<f32> = u_xlat27;
  let x_1829 : vec3<f32> = u_xlat27;
  u_xlat67 = dot(x_1828, x_1829);
  let x_1831 : f32 = u_xlat67;
  u_xlat67 = inverseSqrt(x_1831);
  let x_1833 : f32 = u_xlat67;
  let x_1835 : vec3<f32> = u_xlat27;
  u_xlat27 = (vec3<f32>(x_1833, x_1833, x_1833) * x_1835);
  let x_1839 : f32 = x_66.unity_MatrixV[0i].z;
  u_xlat6.x = x_1839;
  let x_1842 : f32 = x_66.unity_MatrixV[1i].z;
  u_xlat6.y = x_1842;
  let x_1845 : f32 = x_66.unity_MatrixV[2i].z;
  u_xlat6.z = x_1845;
  let x_1848 : bool = u_xlatb23.x;
  if (x_1848) {
    let x_1852 : vec3<f32> = u_xlat27;
    x_1849 = x_1852;
  } else {
    let x_1854 : vec4<f32> = u_xlat6;
    x_1849 = vec3<f32>(x_1854.x, x_1854.y, x_1854.z);
  }
  let x_1856 : vec3<f32> = x_1849;
  u_xlat27 = x_1856;
  let x_1858 : f32 = vs_INTERP0.y;
  let x_1860 : f32 = x_66.unity_MatrixV[1i].z;
  u_xlat23.x = (x_1858 * x_1860);
  let x_1864 : f32 = x_66.unity_MatrixV[0i].z;
  let x_1866 : f32 = vs_INTERP0.x;
  let x_1869 : f32 = u_xlat23.x;
  u_xlat23.x = ((x_1864 * x_1866) + x_1869);
  let x_1873 : f32 = x_66.unity_MatrixV[2i].z;
  let x_1875 : f32 = vs_INTERP0.z;
  let x_1878 : f32 = u_xlat23.x;
  u_xlat23.x = ((x_1873 * x_1875) + x_1878);
  let x_1882 : f32 = u_xlat23.x;
  let x_1884 : f32 = x_66.unity_MatrixV[3i].z;
  u_xlat23.x = (x_1882 + x_1884);
  let x_1888 : f32 = u_xlat23.x;
  let x_1892 : f32 = x_66.x_ProjectionParams.y;
  u_xlat23.x = (-(x_1888) + -(x_1892));
  let x_1897 : f32 = u_xlat23.x;
  u_xlat23.x = max(x_1897, 0.0f);
  let x_1901 : f32 = u_xlat23.x;
  let x_1904 : f32 = x_66.unity_FogParams.x;
  u_xlat23.x = (x_1901 * x_1904);
  let x_1914 : vec2<f32> = vs_INTERP5;
  let x_1916 : f32 = x_66.x_GlobalMipBias.x;
  let x_1917 : vec4<f32> = textureSampleBias(unity_Lightmap, samplerunity_Lightmap, x_1914, x_1916);
  let x_1918 : vec3<f32> = vec3<f32>(x_1917.x, x_1917.y, x_1917.z);
  let x_1919 : vec4<f32> = u_xlat6;
  u_xlat6 = vec4<f32>(x_1918.x, x_1918.y, x_1918.z, x_1919.w);
  let x_1922 : vec4<f32> = x_66.x_ScaledScreenParams;
  let x_1923 : vec2<f32> = vec2<f32>(x_1922.x, x_1922.y);
  let x_1927 : vec2<f32> = (vec2<f32>(1.0f, 1.0f) / vec2<f32>(x_1923.x, x_1923.y));
  let x_1928 : vec4<f32> = u_xlat7;
  u_xlat7 = vec4<f32>(x_1927.x, x_1927.y, x_1928.z, x_1928.w);
  let x_1930 : vec4<f32> = u_xlat7;
  let x_1932 : vec4<f32> = hlslcc_FragCoord;
  let x_1934 : vec2<f32> = (vec2<f32>(x_1930.x, x_1930.y) * vec2<f32>(x_1932.x, x_1932.y));
  let x_1935 : vec4<f32> = u_xlat7;
  u_xlat7 = vec4<f32>(x_1934.x, x_1934.y, x_1935.z, x_1935.w);
  let x_1938 : f32 = u_xlat7.y;
  let x_1941 : f32 = x_66.x_ScaleBiasRt.x;
  let x_1944 : f32 = x_66.x_ScaleBiasRt.y;
  u_xlat67 = ((x_1938 * x_1941) + x_1944);
  let x_1946 : f32 = u_xlat67;
  u_xlat7.z = (-(x_1946) + 1.0f);
  let x_1951 : f32 = u_xlat3.x;
  u_xlat3.x = x_1951;
  let x_1954 : f32 = u_xlat3.x;
  u_xlat3.x = clamp(x_1954, 0.0f, 1.0f);
  let x_1958 : f32 = u_xlat1.x;
  u_xlat1.x = min(x_1958, 1.0f);
  let x_1961 : vec3<f32> = u_xlat2;
  u_xlat2 = (x_1961 * vec3<f32>(0.959999979f, 0.959999979f, 0.959999979f));
  let x_1966 : f32 = u_xlat3.x;
  u_xlat67 = (-(x_1966) + 1.0f);
  let x_1969 : f32 = u_xlat67;
  let x_1970 : f32 = u_xlat67;
  u_xlat68 = (x_1969 * x_1970);
  let x_1972 : f32 = u_xlat68;
  u_xlat68 = max(x_1972, 0.0078125f);
  let x_1976 : f32 = u_xlat68;
  let x_1977 : f32 = u_xlat68;
  u_xlat72 = (x_1976 * x_1977);
  let x_1980 : f32 = u_xlat3.x;
  u_xlat3.x = (x_1980 + 0.040000021f);
  let x_1985 : f32 = u_xlat3.x;
  u_xlat3.x = min(x_1985, 1.0f);
  let x_1988 : f32 = u_xlat68;
  u_xlat29.x = ((x_1988 * 4.0f) + 2.0f);
  let x_1997 : vec4<f32> = u_xlat7;
  let x_2000 : f32 = x_66.x_GlobalMipBias.x;
  let x_2001 : vec4<f32> = textureSampleBias(x_ScreenSpaceOcclusionTexture, sampler_ScreenSpaceOcclusionTexture, vec2<f32>(x_1997.x, x_1997.z), x_2000);
  u_xlat7.x = x_2001.x;
  let x_2005 : f32 = u_xlat7.x;
  u_xlat51.x = (x_2005 + -1.0f);
  let x_2009 : f32 = x_66.x_AmbientOcclusionParam.w;
  let x_2011 : f32 = u_xlat51.x;
  u_xlat51.x = ((x_2009 * x_2011) + 1.0f);
  let x_2016 : f32 = u_xlat7.x;
  let x_2018 : f32 = vs_INTERP4.w;
  u_xlat7.x = min(x_2016, x_2018);
  let x_2021 : bool = u_xlatb66;
  if (x_2021) {
    let x_2025 : f32 = x_138.x_MainLightShadowParams.y;
    u_xlatb66 = (x_2025 == 1.0f);
    let x_2027 : bool = u_xlatb66;
    if (x_2027) {
      let x_2030 : vec4<f32> = u_xlat4;
      let x_2033 : vec4<f32> = x_138.x_MainLightShadowOffset0;
      u_xlat8 = (vec4<f32>(x_2030.x, x_2030.y, x_2030.x, x_2030.y) + x_2033);
      let x_2036 : vec4<f32> = u_xlat8;
      let x_2037 : vec2<f32> = vec2<f32>(x_2036.x, x_2036.y);
      let x_2039 : f32 = u_xlat4.z;
      txVec30 = vec3<f32>(x_2037.x, x_2037.y, x_2039);
      let x_2046 : vec3<f32> = txVec30;
      let x_2048 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2046.xy, x_2046.z);
      u_xlat9.x = x_2048;
      let x_2051 : vec4<f32> = u_xlat8;
      let x_2052 : vec2<f32> = vec2<f32>(x_2051.z, x_2051.w);
      let x_2054 : f32 = u_xlat4.z;
      txVec31 = vec3<f32>(x_2052.x, x_2052.y, x_2054);
      let x_2061 : vec3<f32> = txVec31;
      let x_2063 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2061.xy, x_2061.z);
      u_xlat9.y = x_2063;
      let x_2065 : vec4<f32> = u_xlat4;
      let x_2068 : vec4<f32> = x_138.x_MainLightShadowOffset1;
      u_xlat8 = (vec4<f32>(x_2065.x, x_2065.y, x_2065.x, x_2065.y) + x_2068);
      let x_2071 : vec4<f32> = u_xlat8;
      let x_2072 : vec2<f32> = vec2<f32>(x_2071.x, x_2071.y);
      let x_2074 : f32 = u_xlat4.z;
      txVec32 = vec3<f32>(x_2072.x, x_2072.y, x_2074);
      let x_2081 : vec3<f32> = txVec32;
      let x_2083 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2081.xy, x_2081.z);
      u_xlat9.z = x_2083;
      let x_2086 : vec4<f32> = u_xlat8;
      let x_2087 : vec2<f32> = vec2<f32>(x_2086.z, x_2086.w);
      let x_2089 : f32 = u_xlat4.z;
      txVec33 = vec3<f32>(x_2087.x, x_2087.y, x_2089);
      let x_2096 : vec3<f32> = txVec33;
      let x_2098 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2096.xy, x_2096.z);
      u_xlat9.w = x_2098;
      let x_2100 : vec4<f32> = u_xlat9;
      u_xlat66 = dot(x_2100, vec4<f32>(0.25f, 0.25f, 0.25f, 0.25f));
    } else {
      let x_2105 : f32 = x_138.x_MainLightShadowParams.y;
      u_xlatb73 = (x_2105 == 2.0f);
      let x_2107 : bool = u_xlatb73;
      if (x_2107) {
        let x_2110 : vec4<f32> = u_xlat4;
        let x_2113 : vec4<f32> = x_138.x_MainLightShadowmapSize;
        let x_2116 : vec2<f32> = ((vec2<f32>(x_2110.x, x_2110.y) * vec2<f32>(x_2113.z, x_2113.w)) + vec2<f32>(0.5f, 0.5f));
        let x_2117 : vec4<f32> = u_xlat8;
        u_xlat8 = vec4<f32>(x_2116.x, x_2116.y, x_2117.z, x_2117.w);
        let x_2119 : vec4<f32> = u_xlat8;
        let x_2121 : vec2<f32> = floor(vec2<f32>(x_2119.x, x_2119.y));
        let x_2122 : vec4<f32> = u_xlat8;
        u_xlat8 = vec4<f32>(x_2121.x, x_2121.y, x_2122.z, x_2122.w);
        let x_2124 : vec4<f32> = u_xlat4;
        let x_2127 : vec4<f32> = x_138.x_MainLightShadowmapSize;
        let x_2130 : vec4<f32> = u_xlat8;
        u_xlat52 = ((vec2<f32>(x_2124.x, x_2124.y) * vec2<f32>(x_2127.z, x_2127.w)) + -(vec2<f32>(x_2130.x, x_2130.y)));
        let x_2134 : vec2<f32> = u_xlat52;
        u_xlat9 = (vec4<f32>(x_2134.x, x_2134.x, x_2134.y, x_2134.y) + vec4<f32>(0.5f, 1.0f, 0.5f, 1.0f));
        let x_2137 : vec4<f32> = u_xlat9;
        let x_2139 : vec4<f32> = u_xlat9;
        u_xlat10 = (vec4<f32>(x_2137.x, x_2137.x, x_2137.z, x_2137.z) * vec4<f32>(x_2139.x, x_2139.x, x_2139.z, x_2139.z));
        let x_2142 : vec4<f32> = u_xlat10;
        let x_2144 : vec2<f32> = (vec2<f32>(x_2142.y, x_2142.w) * vec2<f32>(0.079999998f, 0.079999998f));
        let x_2145 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_2144.x, x_2145.y, x_2144.y, x_2145.w);
        let x_2147 : vec4<f32> = u_xlat10;
        let x_2150 : vec2<f32> = u_xlat52;
        let x_2152 : vec2<f32> = ((vec2<f32>(x_2147.x, x_2147.z) * vec2<f32>(0.5f, 0.5f)) + -(x_2150));
        let x_2153 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_2152.x, x_2152.y, x_2153.z, x_2153.w);
        let x_2156 : vec2<f32> = u_xlat52;
        u_xlat54 = (-(x_2156) + vec2<f32>(1.0f, 1.0f));
        let x_2159 : vec2<f32> = u_xlat52;
        let x_2160 : vec2<f32> = min(x_2159, vec2<f32>(0.0f, 0.0f));
        let x_2161 : vec4<f32> = u_xlat11;
        u_xlat11 = vec4<f32>(x_2160.x, x_2160.y, x_2161.z, x_2161.w);
        let x_2163 : vec4<f32> = u_xlat11;
        let x_2166 : vec4<f32> = u_xlat11;
        let x_2169 : vec2<f32> = u_xlat54;
        let x_2170 : vec2<f32> = ((-(vec2<f32>(x_2163.x, x_2163.y)) * vec2<f32>(x_2166.x, x_2166.y)) + x_2169);
        let x_2171 : vec4<f32> = u_xlat11;
        u_xlat11 = vec4<f32>(x_2170.x, x_2170.y, x_2171.z, x_2171.w);
        let x_2173 : vec2<f32> = u_xlat52;
        u_xlat52 = max(x_2173, vec2<f32>(0.0f, 0.0f));
        let x_2175 : vec2<f32> = u_xlat52;
        let x_2177 : vec2<f32> = u_xlat52;
        let x_2179 : vec4<f32> = u_xlat9;
        u_xlat52 = ((-(x_2175) * x_2177) + vec2<f32>(x_2179.y, x_2179.w));
        let x_2182 : vec4<f32> = u_xlat11;
        let x_2184 : vec2<f32> = (vec2<f32>(x_2182.x, x_2182.y) + vec2<f32>(1.0f, 1.0f));
        let x_2185 : vec4<f32> = u_xlat11;
        u_xlat11 = vec4<f32>(x_2184.x, x_2184.y, x_2185.z, x_2185.w);
        let x_2187 : vec2<f32> = u_xlat52;
        u_xlat52 = (x_2187 + vec2<f32>(1.0f, 1.0f));
        let x_2189 : vec4<f32> = u_xlat10;
        let x_2191 : vec2<f32> = (vec2<f32>(x_2189.x, x_2189.y) * vec2<f32>(0.159999996f, 0.159999996f));
        let x_2192 : vec4<f32> = u_xlat12;
        u_xlat12 = vec4<f32>(x_2191.x, x_2191.y, x_2192.z, x_2192.w);
        let x_2194 : vec2<f32> = u_xlat54;
        let x_2195 : vec2<f32> = (x_2194 * vec2<f32>(0.159999996f, 0.159999996f));
        let x_2196 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_2195.x, x_2195.y, x_2196.z, x_2196.w);
        let x_2198 : vec4<f32> = u_xlat11;
        let x_2200 : vec2<f32> = (vec2<f32>(x_2198.x, x_2198.y) * vec2<f32>(0.159999996f, 0.159999996f));
        let x_2201 : vec4<f32> = u_xlat11;
        u_xlat11 = vec4<f32>(x_2200.x, x_2200.y, x_2201.z, x_2201.w);
        let x_2203 : vec2<f32> = u_xlat52;
        let x_2204 : vec2<f32> = (x_2203 * vec2<f32>(0.159999996f, 0.159999996f));
        let x_2205 : vec4<f32> = u_xlat13;
        u_xlat13 = vec4<f32>(x_2204.x, x_2204.y, x_2205.z, x_2205.w);
        let x_2207 : vec4<f32> = u_xlat9;
        u_xlat52 = (vec2<f32>(x_2207.y, x_2207.w) * vec2<f32>(0.159999996f, 0.159999996f));
        let x_2211 : f32 = u_xlat11.x;
        u_xlat12.z = x_2211;
        let x_2214 : f32 = u_xlat52.x;
        u_xlat12.w = x_2214;
        let x_2217 : f32 = u_xlat13.x;
        u_xlat10.z = x_2217;
        let x_2220 : f32 = u_xlat9.x;
        u_xlat10.w = x_2220;
        let x_2222 : vec4<f32> = u_xlat10;
        let x_2224 : vec4<f32> = u_xlat12;
        u_xlat14 = (vec4<f32>(x_2222.z, x_2222.w, x_2222.x, x_2222.z) + vec4<f32>(x_2224.z, x_2224.w, x_2224.x, x_2224.z));
        let x_2228 : f32 = u_xlat12.y;
        u_xlat11.z = x_2228;
        let x_2231 : f32 = u_xlat52.y;
        u_xlat11.w = x_2231;
        let x_2234 : f32 = u_xlat10.y;
        u_xlat13.z = x_2234;
        let x_2237 : f32 = u_xlat9.z;
        u_xlat13.w = x_2237;
        let x_2239 : vec4<f32> = u_xlat11;
        let x_2241 : vec4<f32> = u_xlat13;
        let x_2243 : vec3<f32> = (vec3<f32>(x_2239.z, x_2239.y, x_2239.w) + vec3<f32>(x_2241.z, x_2241.y, x_2241.w));
        let x_2244 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_2243.x, x_2243.y, x_2243.z, x_2244.w);
        let x_2246 : vec4<f32> = u_xlat10;
        let x_2248 : vec4<f32> = u_xlat14;
        let x_2250 : vec3<f32> = (vec3<f32>(x_2246.x, x_2246.z, x_2246.w) / vec3<f32>(x_2248.z, x_2248.w, x_2248.y));
        let x_2251 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_2250.x, x_2250.y, x_2250.z, x_2251.w);
        let x_2253 : vec4<f32> = u_xlat10;
        let x_2255 : vec3<f32> = (vec3<f32>(x_2253.x, x_2253.y, x_2253.z) + vec3<f32>(-2.5f, -0.5f, 1.5f));
        let x_2256 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_2255.x, x_2255.y, x_2255.z, x_2256.w);
        let x_2258 : vec4<f32> = u_xlat13;
        let x_2260 : vec4<f32> = u_xlat9;
        let x_2262 : vec3<f32> = (vec3<f32>(x_2258.z, x_2258.y, x_2258.w) / vec3<f32>(x_2260.x, x_2260.y, x_2260.z));
        let x_2263 : vec4<f32> = u_xlat11;
        u_xlat11 = vec4<f32>(x_2262.x, x_2262.y, x_2262.z, x_2263.w);
        let x_2265 : vec4<f32> = u_xlat11;
        let x_2267 : vec3<f32> = (vec3<f32>(x_2265.x, x_2265.y, x_2265.z) + vec3<f32>(-2.5f, -0.5f, 1.5f));
        let x_2268 : vec4<f32> = u_xlat11;
        u_xlat11 = vec4<f32>(x_2267.x, x_2267.y, x_2267.z, x_2268.w);
        let x_2270 : vec4<f32> = u_xlat10;
        let x_2273 : vec4<f32> = x_138.x_MainLightShadowmapSize;
        let x_2275 : vec3<f32> = (vec3<f32>(x_2270.y, x_2270.x, x_2270.z) * vec3<f32>(x_2273.x, x_2273.x, x_2273.x));
        let x_2276 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_2275.x, x_2275.y, x_2275.z, x_2276.w);
        let x_2278 : vec4<f32> = u_xlat11;
        let x_2281 : vec4<f32> = x_138.x_MainLightShadowmapSize;
        let x_2283 : vec3<f32> = (vec3<f32>(x_2278.x, x_2278.y, x_2278.z) * vec3<f32>(x_2281.y, x_2281.y, x_2281.y));
        let x_2284 : vec4<f32> = u_xlat11;
        u_xlat11 = vec4<f32>(x_2283.x, x_2283.y, x_2283.z, x_2284.w);
        let x_2287 : f32 = u_xlat11.x;
        u_xlat10.w = x_2287;
        let x_2289 : vec4<f32> = u_xlat8;
        let x_2292 : vec4<f32> = x_138.x_MainLightShadowmapSize;
        let x_2295 : vec4<f32> = u_xlat10;
        u_xlat12 = ((vec4<f32>(x_2289.x, x_2289.y, x_2289.x, x_2289.y) * vec4<f32>(x_2292.x, x_2292.y, x_2292.x, x_2292.y)) + vec4<f32>(x_2295.y, x_2295.w, x_2295.x, x_2295.w));
        let x_2298 : vec4<f32> = u_xlat8;
        let x_2301 : vec4<f32> = x_138.x_MainLightShadowmapSize;
        let x_2304 : vec4<f32> = u_xlat10;
        u_xlat52 = ((vec2<f32>(x_2298.x, x_2298.y) * vec2<f32>(x_2301.x, x_2301.y)) + vec2<f32>(x_2304.z, x_2304.w));
        let x_2308 : f32 = u_xlat10.y;
        u_xlat11.w = x_2308;
        let x_2310 : vec4<f32> = u_xlat11;
        let x_2311 : vec2<f32> = vec2<f32>(x_2310.y, x_2310.z);
        let x_2312 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_2312.x, x_2311.x, x_2312.z, x_2311.y);
        let x_2314 : vec4<f32> = u_xlat8;
        let x_2317 : vec4<f32> = x_138.x_MainLightShadowmapSize;
        let x_2320 : vec4<f32> = u_xlat10;
        u_xlat13 = ((vec4<f32>(x_2314.x, x_2314.y, x_2314.x, x_2314.y) * vec4<f32>(x_2317.x, x_2317.y, x_2317.x, x_2317.y)) + vec4<f32>(x_2320.x, x_2320.y, x_2320.z, x_2320.y));
        let x_2323 : vec4<f32> = u_xlat8;
        let x_2326 : vec4<f32> = x_138.x_MainLightShadowmapSize;
        let x_2329 : vec4<f32> = u_xlat11;
        u_xlat11 = ((vec4<f32>(x_2323.x, x_2323.y, x_2323.x, x_2323.y) * vec4<f32>(x_2326.x, x_2326.y, x_2326.x, x_2326.y)) + vec4<f32>(x_2329.w, x_2329.y, x_2329.w, x_2329.z));
        let x_2332 : vec4<f32> = u_xlat8;
        let x_2335 : vec4<f32> = x_138.x_MainLightShadowmapSize;
        let x_2338 : vec4<f32> = u_xlat10;
        u_xlat10 = ((vec4<f32>(x_2332.x, x_2332.y, x_2332.x, x_2332.y) * vec4<f32>(x_2335.x, x_2335.y, x_2335.x, x_2335.y)) + vec4<f32>(x_2338.x, x_2338.w, x_2338.z, x_2338.w));
        let x_2341 : vec4<f32> = u_xlat9;
        let x_2343 : vec4<f32> = u_xlat14;
        u_xlat15 = (vec4<f32>(x_2341.x, x_2341.x, x_2341.x, x_2341.y) * vec4<f32>(x_2343.z, x_2343.w, x_2343.y, x_2343.z));
        let x_2346 : vec4<f32> = u_xlat9;
        let x_2348 : vec4<f32> = u_xlat14;
        u_xlat16 = (vec4<f32>(x_2346.y, x_2346.y, x_2346.z, x_2346.z) * x_2348);
        let x_2352 : f32 = u_xlat9.z;
        let x_2354 : f32 = u_xlat14.y;
        u_xlat73 = (x_2352 * x_2354);
        let x_2357 : vec4<f32> = u_xlat12;
        let x_2358 : vec2<f32> = vec2<f32>(x_2357.x, x_2357.y);
        let x_2360 : f32 = u_xlat4.z;
        txVec34 = vec3<f32>(x_2358.x, x_2358.y, x_2360);
        let x_2367 : vec3<f32> = txVec34;
        let x_2369 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2367.xy, x_2367.z);
        u_xlat8.x = x_2369;
        let x_2372 : vec4<f32> = u_xlat12;
        let x_2373 : vec2<f32> = vec2<f32>(x_2372.z, x_2372.w);
        let x_2375 : f32 = u_xlat4.z;
        txVec35 = vec3<f32>(x_2373.x, x_2373.y, x_2375);
        let x_2383 : vec3<f32> = txVec35;
        let x_2385 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2383.xy, x_2383.z);
        u_xlat30 = x_2385;
        let x_2386 : f32 = u_xlat30;
        let x_2388 : f32 = u_xlat15.y;
        u_xlat30 = (x_2386 * x_2388);
        let x_2391 : f32 = u_xlat15.x;
        let x_2393 : f32 = u_xlat8.x;
        let x_2395 : f32 = u_xlat30;
        u_xlat8.x = ((x_2391 * x_2393) + x_2395);
        let x_2399 : vec2<f32> = u_xlat52;
        let x_2401 : f32 = u_xlat4.z;
        txVec36 = vec3<f32>(x_2399.x, x_2399.y, x_2401);
        let x_2408 : vec3<f32> = txVec36;
        let x_2410 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2408.xy, x_2408.z);
        u_xlat30 = x_2410;
        let x_2412 : f32 = u_xlat15.z;
        let x_2413 : f32 = u_xlat30;
        let x_2416 : f32 = u_xlat8.x;
        u_xlat8.x = ((x_2412 * x_2413) + x_2416);
        let x_2420 : vec4<f32> = u_xlat11;
        let x_2421 : vec2<f32> = vec2<f32>(x_2420.x, x_2420.y);
        let x_2423 : f32 = u_xlat4.z;
        txVec37 = vec3<f32>(x_2421.x, x_2421.y, x_2423);
        let x_2430 : vec3<f32> = txVec37;
        let x_2432 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2430.xy, x_2430.z);
        u_xlat30 = x_2432;
        let x_2434 : f32 = u_xlat15.w;
        let x_2435 : f32 = u_xlat30;
        let x_2438 : f32 = u_xlat8.x;
        u_xlat8.x = ((x_2434 * x_2435) + x_2438);
        let x_2442 : vec4<f32> = u_xlat13;
        let x_2443 : vec2<f32> = vec2<f32>(x_2442.x, x_2442.y);
        let x_2445 : f32 = u_xlat4.z;
        txVec38 = vec3<f32>(x_2443.x, x_2443.y, x_2445);
        let x_2452 : vec3<f32> = txVec38;
        let x_2454 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2452.xy, x_2452.z);
        u_xlat30 = x_2454;
        let x_2456 : f32 = u_xlat16.x;
        let x_2457 : f32 = u_xlat30;
        let x_2460 : f32 = u_xlat8.x;
        u_xlat8.x = ((x_2456 * x_2457) + x_2460);
        let x_2464 : vec4<f32> = u_xlat13;
        let x_2465 : vec2<f32> = vec2<f32>(x_2464.z, x_2464.w);
        let x_2467 : f32 = u_xlat4.z;
        txVec39 = vec3<f32>(x_2465.x, x_2465.y, x_2467);
        let x_2474 : vec3<f32> = txVec39;
        let x_2476 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2474.xy, x_2474.z);
        u_xlat30 = x_2476;
        let x_2478 : f32 = u_xlat16.y;
        let x_2479 : f32 = u_xlat30;
        let x_2482 : f32 = u_xlat8.x;
        u_xlat8.x = ((x_2478 * x_2479) + x_2482);
        let x_2486 : vec4<f32> = u_xlat11;
        let x_2487 : vec2<f32> = vec2<f32>(x_2486.z, x_2486.w);
        let x_2489 : f32 = u_xlat4.z;
        txVec40 = vec3<f32>(x_2487.x, x_2487.y, x_2489);
        let x_2496 : vec3<f32> = txVec40;
        let x_2498 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2496.xy, x_2496.z);
        u_xlat30 = x_2498;
        let x_2500 : f32 = u_xlat16.z;
        let x_2501 : f32 = u_xlat30;
        let x_2504 : f32 = u_xlat8.x;
        u_xlat8.x = ((x_2500 * x_2501) + x_2504);
        let x_2508 : vec4<f32> = u_xlat10;
        let x_2509 : vec2<f32> = vec2<f32>(x_2508.x, x_2508.y);
        let x_2511 : f32 = u_xlat4.z;
        txVec41 = vec3<f32>(x_2509.x, x_2509.y, x_2511);
        let x_2518 : vec3<f32> = txVec41;
        let x_2520 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2518.xy, x_2518.z);
        u_xlat30 = x_2520;
        let x_2522 : f32 = u_xlat16.w;
        let x_2523 : f32 = u_xlat30;
        let x_2526 : f32 = u_xlat8.x;
        u_xlat8.x = ((x_2522 * x_2523) + x_2526);
        let x_2530 : vec4<f32> = u_xlat10;
        let x_2531 : vec2<f32> = vec2<f32>(x_2530.z, x_2530.w);
        let x_2533 : f32 = u_xlat4.z;
        txVec42 = vec3<f32>(x_2531.x, x_2531.y, x_2533);
        let x_2540 : vec3<f32> = txVec42;
        let x_2542 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2540.xy, x_2540.z);
        u_xlat30 = x_2542;
        let x_2543 : f32 = u_xlat73;
        let x_2544 : f32 = u_xlat30;
        let x_2547 : f32 = u_xlat8.x;
        u_xlat66 = ((x_2543 * x_2544) + x_2547);
      } else {
        let x_2550 : vec4<f32> = u_xlat4;
        let x_2553 : vec4<f32> = x_138.x_MainLightShadowmapSize;
        let x_2556 : vec2<f32> = ((vec2<f32>(x_2550.x, x_2550.y) * vec2<f32>(x_2553.z, x_2553.w)) + vec2<f32>(0.5f, 0.5f));
        let x_2557 : vec4<f32> = u_xlat8;
        u_xlat8 = vec4<f32>(x_2556.x, x_2556.y, x_2557.z, x_2557.w);
        let x_2559 : vec4<f32> = u_xlat8;
        let x_2561 : vec2<f32> = floor(vec2<f32>(x_2559.x, x_2559.y));
        let x_2562 : vec4<f32> = u_xlat8;
        u_xlat8 = vec4<f32>(x_2561.x, x_2561.y, x_2562.z, x_2562.w);
        let x_2564 : vec4<f32> = u_xlat4;
        let x_2567 : vec4<f32> = x_138.x_MainLightShadowmapSize;
        let x_2570 : vec4<f32> = u_xlat8;
        u_xlat52 = ((vec2<f32>(x_2564.x, x_2564.y) * vec2<f32>(x_2567.z, x_2567.w)) + -(vec2<f32>(x_2570.x, x_2570.y)));
        let x_2574 : vec2<f32> = u_xlat52;
        u_xlat9 = (vec4<f32>(x_2574.x, x_2574.x, x_2574.y, x_2574.y) + vec4<f32>(0.5f, 1.0f, 0.5f, 1.0f));
        let x_2577 : vec4<f32> = u_xlat9;
        let x_2579 : vec4<f32> = u_xlat9;
        u_xlat10 = (vec4<f32>(x_2577.x, x_2577.x, x_2577.z, x_2577.z) * vec4<f32>(x_2579.x, x_2579.x, x_2579.z, x_2579.z));
        let x_2582 : vec4<f32> = u_xlat10;
        let x_2584 : vec2<f32> = (vec2<f32>(x_2582.y, x_2582.w) * vec2<f32>(0.040816002f, 0.040816002f));
        let x_2585 : vec4<f32> = u_xlat11;
        u_xlat11 = vec4<f32>(x_2585.x, x_2584.x, x_2585.z, x_2584.y);
        let x_2587 : vec4<f32> = u_xlat10;
        let x_2590 : vec2<f32> = u_xlat52;
        let x_2592 : vec2<f32> = ((vec2<f32>(x_2587.x, x_2587.z) * vec2<f32>(0.5f, 0.5f)) + -(x_2590));
        let x_2593 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_2592.x, x_2593.y, x_2592.y, x_2593.w);
        let x_2595 : vec2<f32> = u_xlat52;
        let x_2597 : vec2<f32> = (-(x_2595) + vec2<f32>(1.0f, 1.0f));
        let x_2598 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_2597.x, x_2597.y, x_2598.z, x_2598.w);
        let x_2600 : vec2<f32> = u_xlat52;
        u_xlat54 = min(x_2600, vec2<f32>(0.0f, 0.0f));
        let x_2602 : vec2<f32> = u_xlat54;
        let x_2604 : vec2<f32> = u_xlat54;
        let x_2606 : vec4<f32> = u_xlat10;
        let x_2608 : vec2<f32> = ((-(x_2602) * x_2604) + vec2<f32>(x_2606.x, x_2606.y));
        let x_2609 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_2608.x, x_2608.y, x_2609.z, x_2609.w);
        let x_2611 : vec2<f32> = u_xlat52;
        u_xlat54 = max(x_2611, vec2<f32>(0.0f, 0.0f));
        let x_2614 : vec2<f32> = u_xlat54;
        let x_2616 : vec2<f32> = u_xlat54;
        let x_2618 : vec4<f32> = u_xlat9;
        let x_2620 : vec2<f32> = ((-(x_2614) * x_2616) + vec2<f32>(x_2618.y, x_2618.w));
        let x_2621 : vec3<f32> = u_xlat31;
        u_xlat31 = vec3<f32>(x_2620.x, x_2621.y, x_2620.y);
        let x_2623 : vec4<f32> = u_xlat10;
        let x_2625 : vec2<f32> = (vec2<f32>(x_2623.x, x_2623.y) + vec2<f32>(2.0f, 2.0f));
        let x_2626 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_2625.x, x_2625.y, x_2626.z, x_2626.w);
        let x_2628 : vec3<f32> = u_xlat31;
        let x_2630 : vec2<f32> = (vec2<f32>(x_2628.x, x_2628.z) + vec2<f32>(2.0f, 2.0f));
        let x_2631 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_2631.x, x_2630.x, x_2631.z, x_2630.y);
        let x_2634 : f32 = u_xlat9.y;
        u_xlat12.z = (x_2634 * 0.081632003f);
        let x_2637 : vec4<f32> = u_xlat9;
        let x_2639 : vec3<f32> = (vec3<f32>(x_2637.z, x_2637.x, x_2637.w) * vec3<f32>(0.081632003f, 0.081632003f, 0.081632003f));
        let x_2640 : vec4<f32> = u_xlat13;
        u_xlat13 = vec4<f32>(x_2639.x, x_2639.y, x_2639.z, x_2640.w);
        let x_2642 : vec4<f32> = u_xlat10;
        let x_2644 : vec2<f32> = (vec2<f32>(x_2642.x, x_2642.y) * vec2<f32>(0.081632003f, 0.081632003f));
        let x_2645 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_2644.x, x_2644.y, x_2645.z, x_2645.w);
        let x_2648 : f32 = u_xlat13.y;
        u_xlat12.x = x_2648;
        let x_2650 : vec2<f32> = u_xlat52;
        let x_2653 : vec2<f32> = ((vec2<f32>(x_2650.x, x_2650.x) * vec2<f32>(-0.081632003f, 0.081632003f)) + vec2<f32>(0.163264006f, 0.081632003f));
        let x_2654 : vec4<f32> = u_xlat12;
        u_xlat12 = vec4<f32>(x_2654.x, x_2653.x, x_2654.z, x_2653.y);
        let x_2656 : vec2<f32> = u_xlat52;
        let x_2659 : vec2<f32> = ((vec2<f32>(x_2656.x, x_2656.x) * vec2<f32>(-0.081632003f, 0.081632003f)) + vec2<f32>(0.081632003f, 0.163264006f));
        let x_2660 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_2659.x, x_2660.y, x_2659.y, x_2660.w);
        let x_2663 : f32 = u_xlat9.x;
        u_xlat10.y = x_2663;
        let x_2666 : f32 = u_xlat11.y;
        u_xlat10.w = x_2666;
        let x_2668 : vec4<f32> = u_xlat10;
        let x_2669 : vec4<f32> = u_xlat12;
        u_xlat12 = (x_2668 + x_2669);
        let x_2671 : vec2<f32> = u_xlat52;
        let x_2674 : vec2<f32> = ((vec2<f32>(x_2671.y, x_2671.y) * vec2<f32>(-0.081632003f, 0.081632003f)) + vec2<f32>(0.163264006f, 0.081632003f));
        let x_2675 : vec4<f32> = u_xlat13;
        u_xlat13 = vec4<f32>(x_2675.x, x_2674.x, x_2675.z, x_2674.y);
        let x_2677 : vec2<f32> = u_xlat52;
        let x_2680 : vec2<f32> = ((vec2<f32>(x_2677.y, x_2677.y) * vec2<f32>(-0.081632003f, 0.081632003f)) + vec2<f32>(0.081632003f, 0.163264006f));
        let x_2681 : vec4<f32> = u_xlat11;
        u_xlat11 = vec4<f32>(x_2680.x, x_2681.y, x_2680.y, x_2681.w);
        let x_2684 : f32 = u_xlat9.y;
        u_xlat11.y = x_2684;
        let x_2686 : vec4<f32> = u_xlat11;
        let x_2687 : vec4<f32> = u_xlat13;
        u_xlat9 = (x_2686 + x_2687);
        let x_2689 : vec4<f32> = u_xlat10;
        let x_2690 : vec4<f32> = u_xlat12;
        u_xlat10 = (x_2689 / x_2690);
        let x_2692 : vec4<f32> = u_xlat10;
        u_xlat10 = (x_2692 + vec4<f32>(-3.5f, -1.5f, 0.5f, 2.5f));
        let x_2694 : vec4<f32> = u_xlat11;
        let x_2695 : vec4<f32> = u_xlat9;
        u_xlat11 = (x_2694 / x_2695);
        let x_2697 : vec4<f32> = u_xlat11;
        u_xlat11 = (x_2697 + vec4<f32>(-3.5f, -1.5f, 0.5f, 2.5f));
        let x_2699 : vec4<f32> = u_xlat10;
        let x_2702 : vec4<f32> = x_138.x_MainLightShadowmapSize;
        u_xlat10 = (vec4<f32>(x_2699.w, x_2699.x, x_2699.y, x_2699.z) * vec4<f32>(x_2702.x, x_2702.x, x_2702.x, x_2702.x));
        let x_2705 : vec4<f32> = u_xlat11;
        let x_2708 : vec4<f32> = x_138.x_MainLightShadowmapSize;
        u_xlat11 = (vec4<f32>(x_2705.x, x_2705.w, x_2705.y, x_2705.z) * vec4<f32>(x_2708.y, x_2708.y, x_2708.y, x_2708.y));
        let x_2711 : vec4<f32> = u_xlat10;
        let x_2712 : vec3<f32> = vec3<f32>(x_2711.y, x_2711.z, x_2711.w);
        let x_2713 : vec4<f32> = u_xlat13;
        u_xlat13 = vec4<f32>(x_2712.x, x_2713.y, x_2712.y, x_2712.z);
        let x_2716 : f32 = u_xlat11.x;
        u_xlat13.y = x_2716;
        let x_2718 : vec4<f32> = u_xlat8;
        let x_2721 : vec4<f32> = x_138.x_MainLightShadowmapSize;
        let x_2724 : vec4<f32> = u_xlat13;
        u_xlat14 = ((vec4<f32>(x_2718.x, x_2718.y, x_2718.x, x_2718.y) * vec4<f32>(x_2721.x, x_2721.y, x_2721.x, x_2721.y)) + vec4<f32>(x_2724.x, x_2724.y, x_2724.z, x_2724.y));
        let x_2727 : vec4<f32> = u_xlat8;
        let x_2730 : vec4<f32> = x_138.x_MainLightShadowmapSize;
        let x_2733 : vec4<f32> = u_xlat13;
        u_xlat52 = ((vec2<f32>(x_2727.x, x_2727.y) * vec2<f32>(x_2730.x, x_2730.y)) + vec2<f32>(x_2733.w, x_2733.y));
        let x_2737 : f32 = u_xlat13.y;
        u_xlat10.y = x_2737;
        let x_2740 : f32 = u_xlat11.z;
        u_xlat13.y = x_2740;
        let x_2742 : vec4<f32> = u_xlat8;
        let x_2745 : vec4<f32> = x_138.x_MainLightShadowmapSize;
        let x_2748 : vec4<f32> = u_xlat13;
        u_xlat15 = ((vec4<f32>(x_2742.x, x_2742.y, x_2742.x, x_2742.y) * vec4<f32>(x_2745.x, x_2745.y, x_2745.x, x_2745.y)) + vec4<f32>(x_2748.x, x_2748.y, x_2748.z, x_2748.y));
        let x_2751 : vec4<f32> = u_xlat8;
        let x_2754 : vec4<f32> = x_138.x_MainLightShadowmapSize;
        let x_2757 : vec4<f32> = u_xlat13;
        let x_2759 : vec2<f32> = ((vec2<f32>(x_2751.x, x_2751.y) * vec2<f32>(x_2754.x, x_2754.y)) + vec2<f32>(x_2757.w, x_2757.y));
        let x_2760 : vec4<f32> = u_xlat16;
        u_xlat16 = vec4<f32>(x_2759.x, x_2759.y, x_2760.z, x_2760.w);
        let x_2763 : f32 = u_xlat13.y;
        u_xlat10.z = x_2763;
        let x_2765 : vec4<f32> = u_xlat8;
        let x_2768 : vec4<f32> = x_138.x_MainLightShadowmapSize;
        let x_2771 : vec4<f32> = u_xlat10;
        u_xlat17 = ((vec4<f32>(x_2765.x, x_2765.y, x_2765.x, x_2765.y) * vec4<f32>(x_2768.x, x_2768.y, x_2768.x, x_2768.y)) + vec4<f32>(x_2771.x, x_2771.y, x_2771.x, x_2771.z));
        let x_2775 : f32 = u_xlat11.w;
        u_xlat13.y = x_2775;
        let x_2777 : vec4<f32> = u_xlat8;
        let x_2780 : vec4<f32> = x_138.x_MainLightShadowmapSize;
        let x_2783 : vec4<f32> = u_xlat13;
        u_xlat18 = ((vec4<f32>(x_2777.x, x_2777.y, x_2777.x, x_2777.y) * vec4<f32>(x_2780.x, x_2780.y, x_2780.x, x_2780.y)) + vec4<f32>(x_2783.x, x_2783.y, x_2783.z, x_2783.y));
        let x_2787 : vec4<f32> = u_xlat8;
        let x_2790 : vec4<f32> = x_138.x_MainLightShadowmapSize;
        let x_2793 : vec4<f32> = u_xlat13;
        u_xlat32 = ((vec2<f32>(x_2787.x, x_2787.y) * vec2<f32>(x_2790.x, x_2790.y)) + vec2<f32>(x_2793.w, x_2793.y));
        let x_2797 : f32 = u_xlat13.y;
        u_xlat10.w = x_2797;
        let x_2800 : vec4<f32> = u_xlat8;
        let x_2803 : vec4<f32> = x_138.x_MainLightShadowmapSize;
        let x_2806 : vec4<f32> = u_xlat10;
        u_xlat60 = ((vec2<f32>(x_2800.x, x_2800.y) * vec2<f32>(x_2803.x, x_2803.y)) + vec2<f32>(x_2806.x, x_2806.w));
        let x_2809 : vec4<f32> = u_xlat13;
        let x_2810 : vec3<f32> = vec3<f32>(x_2809.x, x_2809.z, x_2809.w);
        let x_2811 : vec4<f32> = u_xlat11;
        u_xlat11 = vec4<f32>(x_2810.x, x_2811.y, x_2810.y, x_2810.z);
        let x_2813 : vec4<f32> = u_xlat8;
        let x_2816 : vec4<f32> = x_138.x_MainLightShadowmapSize;
        let x_2819 : vec4<f32> = u_xlat11;
        u_xlat13 = ((vec4<f32>(x_2813.x, x_2813.y, x_2813.x, x_2813.y) * vec4<f32>(x_2816.x, x_2816.y, x_2816.x, x_2816.y)) + vec4<f32>(x_2819.x, x_2819.y, x_2819.z, x_2819.y));
        let x_2823 : vec4<f32> = u_xlat8;
        let x_2826 : vec4<f32> = x_138.x_MainLightShadowmapSize;
        let x_2829 : vec4<f32> = u_xlat11;
        u_xlat55 = ((vec2<f32>(x_2823.x, x_2823.y) * vec2<f32>(x_2826.x, x_2826.y)) + vec2<f32>(x_2829.w, x_2829.y));
        let x_2833 : f32 = u_xlat10.x;
        u_xlat11.x = x_2833;
        let x_2835 : vec4<f32> = u_xlat8;
        let x_2838 : vec4<f32> = x_138.x_MainLightShadowmapSize;
        let x_2841 : vec4<f32> = u_xlat11;
        let x_2843 : vec2<f32> = ((vec2<f32>(x_2835.x, x_2835.y) * vec2<f32>(x_2838.x, x_2838.y)) + vec2<f32>(x_2841.x, x_2841.y));
        let x_2844 : vec4<f32> = u_xlat8;
        u_xlat8 = vec4<f32>(x_2843.x, x_2843.y, x_2844.z, x_2844.w);
        let x_2847 : vec4<f32> = u_xlat9;
        let x_2849 : vec4<f32> = u_xlat12;
        u_xlat19 = (vec4<f32>(x_2847.x, x_2847.x, x_2847.x, x_2847.x) * x_2849);
        let x_2852 : vec4<f32> = u_xlat9;
        let x_2854 : vec4<f32> = u_xlat12;
        u_xlat20 = (vec4<f32>(x_2852.y, x_2852.y, x_2852.y, x_2852.y) * x_2854);
        let x_2857 : vec4<f32> = u_xlat9;
        let x_2859 : vec4<f32> = u_xlat12;
        u_xlat21 = (vec4<f32>(x_2857.z, x_2857.z, x_2857.z, x_2857.z) * x_2859);
        let x_2861 : vec4<f32> = u_xlat9;
        let x_2863 : vec4<f32> = u_xlat12;
        u_xlat9 = (vec4<f32>(x_2861.w, x_2861.w, x_2861.w, x_2861.w) * x_2863);
        let x_2866 : vec4<f32> = u_xlat14;
        let x_2867 : vec2<f32> = vec2<f32>(x_2866.x, x_2866.y);
        let x_2869 : f32 = u_xlat4.z;
        txVec43 = vec3<f32>(x_2867.x, x_2867.y, x_2869);
        let x_2876 : vec3<f32> = txVec43;
        let x_2878 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2876.xy, x_2876.z);
        u_xlat73 = x_2878;
        let x_2880 : vec4<f32> = u_xlat14;
        let x_2881 : vec2<f32> = vec2<f32>(x_2880.z, x_2880.w);
        let x_2883 : f32 = u_xlat4.z;
        txVec44 = vec3<f32>(x_2881.x, x_2881.y, x_2883);
        let x_2890 : vec3<f32> = txVec44;
        let x_2892 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2890.xy, x_2890.z);
        u_xlat10.x = x_2892;
        let x_2895 : f32 = u_xlat10.x;
        let x_2897 : f32 = u_xlat19.y;
        u_xlat10.x = (x_2895 * x_2897);
        let x_2901 : f32 = u_xlat19.x;
        let x_2902 : f32 = u_xlat73;
        let x_2905 : f32 = u_xlat10.x;
        u_xlat73 = ((x_2901 * x_2902) + x_2905);
        let x_2908 : vec2<f32> = u_xlat52;
        let x_2910 : f32 = u_xlat4.z;
        txVec45 = vec3<f32>(x_2908.x, x_2908.y, x_2910);
        let x_2917 : vec3<f32> = txVec45;
        let x_2919 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2917.xy, x_2917.z);
        u_xlat52.x = x_2919;
        let x_2922 : f32 = u_xlat19.z;
        let x_2924 : f32 = u_xlat52.x;
        let x_2926 : f32 = u_xlat73;
        u_xlat73 = ((x_2922 * x_2924) + x_2926);
        let x_2929 : vec4<f32> = u_xlat17;
        let x_2930 : vec2<f32> = vec2<f32>(x_2929.x, x_2929.y);
        let x_2932 : f32 = u_xlat4.z;
        txVec46 = vec3<f32>(x_2930.x, x_2930.y, x_2932);
        let x_2939 : vec3<f32> = txVec46;
        let x_2941 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2939.xy, x_2939.z);
        u_xlat52.x = x_2941;
        let x_2944 : f32 = u_xlat19.w;
        let x_2946 : f32 = u_xlat52.x;
        let x_2948 : f32 = u_xlat73;
        u_xlat73 = ((x_2944 * x_2946) + x_2948);
        let x_2951 : vec4<f32> = u_xlat15;
        let x_2952 : vec2<f32> = vec2<f32>(x_2951.x, x_2951.y);
        let x_2954 : f32 = u_xlat4.z;
        txVec47 = vec3<f32>(x_2952.x, x_2952.y, x_2954);
        let x_2961 : vec3<f32> = txVec47;
        let x_2963 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2961.xy, x_2961.z);
        u_xlat52.x = x_2963;
        let x_2966 : f32 = u_xlat20.x;
        let x_2968 : f32 = u_xlat52.x;
        let x_2970 : f32 = u_xlat73;
        u_xlat73 = ((x_2966 * x_2968) + x_2970);
        let x_2973 : vec4<f32> = u_xlat15;
        let x_2974 : vec2<f32> = vec2<f32>(x_2973.z, x_2973.w);
        let x_2976 : f32 = u_xlat4.z;
        txVec48 = vec3<f32>(x_2974.x, x_2974.y, x_2976);
        let x_2983 : vec3<f32> = txVec48;
        let x_2985 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2983.xy, x_2983.z);
        u_xlat52.x = x_2985;
        let x_2988 : f32 = u_xlat20.y;
        let x_2990 : f32 = u_xlat52.x;
        let x_2992 : f32 = u_xlat73;
        u_xlat73 = ((x_2988 * x_2990) + x_2992);
        let x_2995 : vec4<f32> = u_xlat16;
        let x_2996 : vec2<f32> = vec2<f32>(x_2995.x, x_2995.y);
        let x_2998 : f32 = u_xlat4.z;
        txVec49 = vec3<f32>(x_2996.x, x_2996.y, x_2998);
        let x_3005 : vec3<f32> = txVec49;
        let x_3007 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_3005.xy, x_3005.z);
        u_xlat52.x = x_3007;
        let x_3010 : f32 = u_xlat20.z;
        let x_3012 : f32 = u_xlat52.x;
        let x_3014 : f32 = u_xlat73;
        u_xlat73 = ((x_3010 * x_3012) + x_3014);
        let x_3017 : vec4<f32> = u_xlat17;
        let x_3018 : vec2<f32> = vec2<f32>(x_3017.z, x_3017.w);
        let x_3020 : f32 = u_xlat4.z;
        txVec50 = vec3<f32>(x_3018.x, x_3018.y, x_3020);
        let x_3027 : vec3<f32> = txVec50;
        let x_3029 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_3027.xy, x_3027.z);
        u_xlat52.x = x_3029;
        let x_3032 : f32 = u_xlat20.w;
        let x_3034 : f32 = u_xlat52.x;
        let x_3036 : f32 = u_xlat73;
        u_xlat73 = ((x_3032 * x_3034) + x_3036);
        let x_3039 : vec4<f32> = u_xlat18;
        let x_3040 : vec2<f32> = vec2<f32>(x_3039.x, x_3039.y);
        let x_3042 : f32 = u_xlat4.z;
        txVec51 = vec3<f32>(x_3040.x, x_3040.y, x_3042);
        let x_3049 : vec3<f32> = txVec51;
        let x_3051 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_3049.xy, x_3049.z);
        u_xlat52.x = x_3051;
        let x_3054 : f32 = u_xlat21.x;
        let x_3056 : f32 = u_xlat52.x;
        let x_3058 : f32 = u_xlat73;
        u_xlat73 = ((x_3054 * x_3056) + x_3058);
        let x_3061 : vec4<f32> = u_xlat18;
        let x_3062 : vec2<f32> = vec2<f32>(x_3061.z, x_3061.w);
        let x_3064 : f32 = u_xlat4.z;
        txVec52 = vec3<f32>(x_3062.x, x_3062.y, x_3064);
        let x_3071 : vec3<f32> = txVec52;
        let x_3073 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_3071.xy, x_3071.z);
        u_xlat52.x = x_3073;
        let x_3076 : f32 = u_xlat21.y;
        let x_3078 : f32 = u_xlat52.x;
        let x_3080 : f32 = u_xlat73;
        u_xlat73 = ((x_3076 * x_3078) + x_3080);
        let x_3083 : vec2<f32> = u_xlat32;
        let x_3085 : f32 = u_xlat4.z;
        txVec53 = vec3<f32>(x_3083.x, x_3083.y, x_3085);
        let x_3092 : vec3<f32> = txVec53;
        let x_3094 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_3092.xy, x_3092.z);
        u_xlat52.x = x_3094;
        let x_3097 : f32 = u_xlat21.z;
        let x_3099 : f32 = u_xlat52.x;
        let x_3101 : f32 = u_xlat73;
        u_xlat73 = ((x_3097 * x_3099) + x_3101);
        let x_3104 : vec2<f32> = u_xlat60;
        let x_3106 : f32 = u_xlat4.z;
        txVec54 = vec3<f32>(x_3104.x, x_3104.y, x_3106);
        let x_3113 : vec3<f32> = txVec54;
        let x_3115 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_3113.xy, x_3113.z);
        u_xlat52.x = x_3115;
        let x_3118 : f32 = u_xlat21.w;
        let x_3120 : f32 = u_xlat52.x;
        let x_3122 : f32 = u_xlat73;
        u_xlat73 = ((x_3118 * x_3120) + x_3122);
        let x_3125 : vec4<f32> = u_xlat13;
        let x_3126 : vec2<f32> = vec2<f32>(x_3125.x, x_3125.y);
        let x_3128 : f32 = u_xlat4.z;
        txVec55 = vec3<f32>(x_3126.x, x_3126.y, x_3128);
        let x_3135 : vec3<f32> = txVec55;
        let x_3137 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_3135.xy, x_3135.z);
        u_xlat52.x = x_3137;
        let x_3140 : f32 = u_xlat9.x;
        let x_3142 : f32 = u_xlat52.x;
        let x_3144 : f32 = u_xlat73;
        u_xlat73 = ((x_3140 * x_3142) + x_3144);
        let x_3147 : vec4<f32> = u_xlat13;
        let x_3148 : vec2<f32> = vec2<f32>(x_3147.z, x_3147.w);
        let x_3150 : f32 = u_xlat4.z;
        txVec56 = vec3<f32>(x_3148.x, x_3148.y, x_3150);
        let x_3157 : vec3<f32> = txVec56;
        let x_3159 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_3157.xy, x_3157.z);
        u_xlat52.x = x_3159;
        let x_3162 : f32 = u_xlat9.y;
        let x_3164 : f32 = u_xlat52.x;
        let x_3166 : f32 = u_xlat73;
        u_xlat73 = ((x_3162 * x_3164) + x_3166);
        let x_3169 : vec2<f32> = u_xlat55;
        let x_3171 : f32 = u_xlat4.z;
        txVec57 = vec3<f32>(x_3169.x, x_3169.y, x_3171);
        let x_3178 : vec3<f32> = txVec57;
        let x_3180 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_3178.xy, x_3178.z);
        u_xlat52.x = x_3180;
        let x_3183 : f32 = u_xlat9.z;
        let x_3185 : f32 = u_xlat52.x;
        let x_3187 : f32 = u_xlat73;
        u_xlat73 = ((x_3183 * x_3185) + x_3187);
        let x_3190 : vec4<f32> = u_xlat8;
        let x_3191 : vec2<f32> = vec2<f32>(x_3190.x, x_3190.y);
        let x_3193 : f32 = u_xlat4.z;
        txVec58 = vec3<f32>(x_3191.x, x_3191.y, x_3193);
        let x_3200 : vec3<f32> = txVec58;
        let x_3202 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_3200.xy, x_3200.z);
        u_xlat8.x = x_3202;
        let x_3205 : f32 = u_xlat9.w;
        let x_3207 : f32 = u_xlat8.x;
        let x_3209 : f32 = u_xlat73;
        u_xlat66 = ((x_3205 * x_3207) + x_3209);
      }
    }
  } else {
    let x_3213 : vec4<f32> = u_xlat4;
    let x_3214 : vec2<f32> = vec2<f32>(x_3213.x, x_3213.y);
    let x_3216 : f32 = u_xlat4.z;
    txVec59 = vec3<f32>(x_3214.x, x_3214.y, x_3216);
    let x_3223 : vec3<f32> = txVec59;
    let x_3225 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_3223.xy, x_3223.z);
    u_xlat66 = x_3225;
  }
  let x_3226 : f32 = u_xlat66;
  let x_3228 : f32 = x_138.x_MainLightShadowParams.x;
  let x_3230 : f32 = u_xlat70;
  u_xlat66 = ((x_3226 * x_3228) + x_3230);
  let x_3232 : bool = u_xlatb5;
  let x_3233 : f32 = u_xlat66;
  u_xlat66 = select(x_3233, 1.0f, x_3232);
  let x_3235 : vec3<f32> = vs_INTERP0;
  let x_3237 : vec3<f32> = x_66.x_WorldSpaceCameraPos;
  let x_3239 : vec3<f32> = (x_3235 + -(x_3237));
  let x_3240 : vec4<f32> = u_xlat4;
  u_xlat4 = vec4<f32>(x_3239.x, x_3239.y, x_3239.z, x_3240.w);
  let x_3242 : vec4<f32> = u_xlat4;
  let x_3244 : vec4<f32> = u_xlat4;
  u_xlat4.x = dot(vec3<f32>(x_3242.x, x_3242.y, x_3242.z), vec3<f32>(x_3244.x, x_3244.y, x_3244.z));
  let x_3249 : f32 = u_xlat4.x;
  let x_3251 : f32 = x_138.x_MainLightShadowParams.z;
  let x_3254 : f32 = x_138.x_MainLightShadowParams.w;
  u_xlat4.x = ((x_3249 * x_3251) + x_3254);
  let x_3258 : f32 = u_xlat4.x;
  u_xlat4.x = clamp(x_3258, 0.0f, 1.0f);
  let x_3262 : f32 = u_xlat66;
  u_xlat26 = (-(x_3262) + 1.0f);
  let x_3266 : f32 = u_xlat4.x;
  let x_3267 : f32 = u_xlat26;
  let x_3269 : f32 = u_xlat66;
  u_xlat66 = ((x_3266 * x_3267) + x_3269);
  let x_3277 : f32 = x_3275.x_MainLightCookieTextureFormat;
  u_xlatb4.x = !((x_3277 == -1.0f));
  let x_3281 : bool = u_xlatb4.x;
  if (x_3281) {
    let x_3284 : vec3<f32> = vs_INTERP0;
    let x_3287 : vec4<f32> = x_3275.x_MainLightWorldToLight[1i];
    let x_3289 : vec2<f32> = (vec2<f32>(x_3284.y, x_3284.y) * vec2<f32>(x_3287.x, x_3287.y));
    let x_3290 : vec4<f32> = u_xlat4;
    u_xlat4 = vec4<f32>(x_3289.x, x_3289.y, x_3290.z, x_3290.w);
    let x_3293 : vec4<f32> = x_3275.x_MainLightWorldToLight[0i];
    let x_3295 : vec3<f32> = vs_INTERP0;
    let x_3298 : vec4<f32> = u_xlat4;
    let x_3300 : vec2<f32> = ((vec2<f32>(x_3293.x, x_3293.y) * vec2<f32>(x_3295.x, x_3295.x)) + vec2<f32>(x_3298.x, x_3298.y));
    let x_3301 : vec4<f32> = u_xlat4;
    u_xlat4 = vec4<f32>(x_3300.x, x_3300.y, x_3301.z, x_3301.w);
    let x_3304 : vec4<f32> = x_3275.x_MainLightWorldToLight[2i];
    let x_3306 : vec3<f32> = vs_INTERP0;
    let x_3309 : vec4<f32> = u_xlat4;
    let x_3311 : vec2<f32> = ((vec2<f32>(x_3304.x, x_3304.y) * vec2<f32>(x_3306.z, x_3306.z)) + vec2<f32>(x_3309.x, x_3309.y));
    let x_3312 : vec4<f32> = u_xlat4;
    u_xlat4 = vec4<f32>(x_3311.x, x_3311.y, x_3312.z, x_3312.w);
    let x_3314 : vec4<f32> = u_xlat4;
    let x_3317 : vec4<f32> = x_3275.x_MainLightWorldToLight[3i];
    let x_3319 : vec2<f32> = (vec2<f32>(x_3314.x, x_3314.y) + vec2<f32>(x_3317.x, x_3317.y));
    let x_3320 : vec4<f32> = u_xlat4;
    u_xlat4 = vec4<f32>(x_3319.x, x_3319.y, x_3320.z, x_3320.w);
    let x_3322 : vec4<f32> = u_xlat4;
    let x_3325 : vec2<f32> = ((vec2<f32>(x_3322.x, x_3322.y) * vec2<f32>(0.5f, 0.5f)) + vec2<f32>(0.5f, 0.5f));
    let x_3326 : vec4<f32> = u_xlat4;
    u_xlat4 = vec4<f32>(x_3325.x, x_3325.y, x_3326.z, x_3326.w);
    let x_3333 : vec4<f32> = u_xlat4;
    let x_3336 : f32 = x_66.x_GlobalMipBias.x;
    let x_3337 : vec4<f32> = textureSampleBias(x_MainLightCookieTexture, sampler_MainLightCookieTexture, vec2<f32>(x_3333.x, x_3333.y), x_3336);
    u_xlat4 = x_3337;
    let x_3342 : f32 = x_3275.x_MainLightCookieTextureFormat;
    let x_3344 : f32 = x_3275.x_MainLightCookieTextureFormat;
    let x_3346 : f32 = x_3275.x_MainLightCookieTextureFormat;
    let x_3348 : f32 = x_3275.x_MainLightCookieTextureFormat;
    let x_3349 : vec4<f32> = vec4<f32>(x_3342, x_3344, x_3346, x_3348);
    let x_3356 : vec4<bool> = (vec4<f32>(x_3349.x, x_3349.y, x_3349.z, x_3349.w) == vec4<f32>(0.0f, 1.0f, 0.0f, 0.0f));
    u_xlatb8 = vec2<bool>(x_3356.x, x_3356.y);
    let x_3359 : bool = u_xlatb8.y;
    if (x_3359) {
      let x_3364 : f32 = u_xlat4.w;
      x_3360 = x_3364;
    } else {
      let x_3367 : f32 = u_xlat4.x;
      x_3360 = x_3367;
    }
    let x_3368 : f32 = x_3360;
    u_xlat70 = x_3368;
    let x_3370 : bool = u_xlatb8.x;
    if (x_3370) {
      let x_3374 : vec4<f32> = u_xlat4;
      x_3371 = vec3<f32>(x_3374.x, x_3374.y, x_3374.z);
    } else {
      let x_3377 : f32 = u_xlat70;
      x_3371 = vec3<f32>(x_3377, x_3377, x_3377);
    }
    let x_3379 : vec3<f32> = x_3371;
    let x_3380 : vec4<f32> = u_xlat4;
    u_xlat4 = vec4<f32>(x_3379.x, x_3379.y, x_3379.z, x_3380.w);
  } else {
    u_xlat4.x = 1.0f;
    u_xlat4.y = 1.0f;
    u_xlat4.z = 1.0f;
  }
  let x_3386 : vec4<f32> = u_xlat4;
  let x_3389 : vec4<f32> = x_66.x_MainLightColor;
  let x_3391 : vec3<f32> = (vec3<f32>(x_3386.x, x_3386.y, x_3386.z) * vec3<f32>(x_3389.x, x_3389.y, x_3389.z));
  let x_3392 : vec4<f32> = u_xlat4;
  u_xlat4 = vec4<f32>(x_3391.x, x_3391.y, x_3391.z, x_3392.w);
  let x_3394 : vec2<f32> = u_xlat51;
  let x_3396 : vec4<f32> = u_xlat4;
  let x_3398 : vec3<f32> = (vec3<f32>(x_3394.x, x_3394.x, x_3394.x) * vec3<f32>(x_3396.x, x_3396.y, x_3396.z));
  let x_3399 : vec4<f32> = u_xlat4;
  u_xlat4 = vec4<f32>(x_3398.x, x_3398.y, x_3398.z, x_3399.w);
  let x_3401 : vec3<f32> = u_xlat27;
  let x_3403 : vec3<f32> = u_xlat25;
  u_xlat70 = dot(-(x_3401), x_3403);
  let x_3405 : f32 = u_xlat70;
  let x_3406 : f32 = u_xlat70;
  u_xlat70 = (x_3405 + x_3406);
  let x_3408 : vec3<f32> = u_xlat25;
  let x_3409 : f32 = u_xlat70;
  let x_3413 : vec3<f32> = u_xlat27;
  let x_3415 : vec3<f32> = ((x_3408 * -(vec3<f32>(x_3409, x_3409, x_3409))) + -(x_3413));
  let x_3416 : vec4<f32> = u_xlat8;
  u_xlat8 = vec4<f32>(x_3415.x, x_3415.y, x_3415.z, x_3416.w);
  let x_3418 : vec3<f32> = u_xlat25;
  let x_3419 : vec3<f32> = u_xlat27;
  u_xlat70 = dot(x_3418, x_3419);
  let x_3421 : f32 = u_xlat70;
  u_xlat70 = clamp(x_3421, 0.0f, 1.0f);
  let x_3423 : f32 = u_xlat70;
  u_xlat70 = (-(x_3423) + 1.0f);
  let x_3426 : f32 = u_xlat70;
  let x_3427 : f32 = u_xlat70;
  u_xlat70 = (x_3426 * x_3427);
  let x_3429 : f32 = u_xlat70;
  let x_3430 : f32 = u_xlat70;
  u_xlat70 = (x_3429 * x_3430);
  let x_3432 : f32 = u_xlat67;
  u_xlat5.x = ((-(x_3432) * 0.699999988f) + 1.700000048f);
  let x_3439 : f32 = u_xlat67;
  let x_3441 : f32 = u_xlat5.x;
  u_xlat67 = (x_3439 * x_3441);
  let x_3443 : f32 = u_xlat67;
  u_xlat67 = (x_3443 * 6.0f);
  let x_3454 : vec4<f32> = u_xlat8;
  let x_3456 : f32 = u_xlat67;
  let x_3457 : vec4<f32> = textureSampleLevel(unity_SpecCube0, samplerunity_SpecCube0, vec3<f32>(x_3454.x, x_3454.y, x_3454.z), x_3456);
  u_xlat8 = x_3457;
  let x_3459 : f32 = u_xlat8.w;
  u_xlat67 = (x_3459 + -1.0f);
  let x_3462 : f32 = x_1752.unity_SpecCube0_HDR.w;
  let x_3463 : f32 = u_xlat67;
  u_xlat67 = ((x_3462 * x_3463) + 1.0f);
  let x_3466 : f32 = u_xlat67;
  u_xlat67 = max(x_3466, 0.0f);
  let x_3468 : f32 = u_xlat67;
  u_xlat67 = log2(x_3468);
  let x_3470 : f32 = u_xlat67;
  let x_3472 : f32 = x_1752.unity_SpecCube0_HDR.y;
  u_xlat67 = (x_3470 * x_3472);
  let x_3474 : f32 = u_xlat67;
  u_xlat67 = exp2(x_3474);
  let x_3476 : f32 = u_xlat67;
  let x_3478 : f32 = x_1752.unity_SpecCube0_HDR.x;
  u_xlat67 = (x_3476 * x_3478);
  let x_3480 : vec4<f32> = u_xlat8;
  let x_3482 : f32 = u_xlat67;
  let x_3484 : vec3<f32> = (vec3<f32>(x_3480.x, x_3480.y, x_3480.z) * vec3<f32>(x_3482, x_3482, x_3482));
  let x_3485 : vec4<f32> = u_xlat8;
  u_xlat8 = vec4<f32>(x_3484.x, x_3484.y, x_3484.z, x_3485.w);
  let x_3487 : f32 = u_xlat68;
  let x_3489 : f32 = u_xlat68;
  let x_3493 : vec2<f32> = ((vec2<f32>(x_3487, x_3487) * vec2<f32>(x_3489, x_3489)) + vec2<f32>(-1.0f, 1.0f));
  let x_3494 : vec4<f32> = u_xlat9;
  u_xlat9 = vec4<f32>(x_3493.x, x_3493.y, x_3494.z, x_3494.w);
  let x_3497 : f32 = u_xlat9.y;
  u_xlat67 = (1.0f / x_3497);
  let x_3500 : f32 = u_xlat3.x;
  u_xlat68 = (x_3500 + -0.039999999f);
  let x_3503 : f32 = u_xlat70;
  let x_3504 : f32 = u_xlat68;
  u_xlat68 = ((x_3503 * x_3504) + 0.039999999f);
  let x_3508 : f32 = u_xlat67;
  let x_3509 : f32 = u_xlat68;
  u_xlat67 = (x_3508 * x_3509);
  let x_3511 : f32 = u_xlat67;
  let x_3513 : vec4<f32> = u_xlat8;
  let x_3515 : vec3<f32> = (vec3<f32>(x_3511, x_3511, x_3511) * vec3<f32>(x_3513.x, x_3513.y, x_3513.z));
  let x_3516 : vec4<f32> = u_xlat8;
  u_xlat8 = vec4<f32>(x_3515.x, x_3515.y, x_3515.z, x_3516.w);
  let x_3518 : vec4<f32> = u_xlat6;
  let x_3520 : vec3<f32> = u_xlat2;
  let x_3522 : vec4<f32> = u_xlat8;
  let x_3524 : vec3<f32> = ((vec3<f32>(x_3518.x, x_3518.y, x_3518.z) * x_3520) + vec3<f32>(x_3522.x, x_3522.y, x_3522.z));
  let x_3525 : vec4<f32> = u_xlat6;
  u_xlat6 = vec4<f32>(x_3524.x, x_3524.y, x_3524.z, x_3525.w);
  let x_3527 : f32 = u_xlat66;
  let x_3529 : f32 = x_1752.unity_LightData.z;
  u_xlat66 = (x_3527 * x_3529);
  let x_3531 : vec3<f32> = u_xlat25;
  let x_3533 : vec4<f32> = x_66.x_MainLightPosition;
  u_xlat67 = dot(x_3531, vec3<f32>(x_3533.x, x_3533.y, x_3533.z));
  let x_3536 : f32 = u_xlat67;
  u_xlat67 = clamp(x_3536, 0.0f, 1.0f);
  let x_3538 : f32 = u_xlat66;
  let x_3539 : f32 = u_xlat67;
  u_xlat66 = (x_3538 * x_3539);
  let x_3541 : f32 = u_xlat66;
  let x_3543 : vec4<f32> = u_xlat4;
  let x_3545 : vec3<f32> = (vec3<f32>(x_3541, x_3541, x_3541) * vec3<f32>(x_3543.x, x_3543.y, x_3543.z));
  let x_3546 : vec4<f32> = u_xlat4;
  u_xlat4 = vec4<f32>(x_3545.x, x_3545.y, x_3545.z, x_3546.w);
  let x_3548 : vec3<f32> = u_xlat27;
  let x_3550 : vec4<f32> = x_66.x_MainLightPosition;
  let x_3552 : vec3<f32> = (x_3548 + vec3<f32>(x_3550.x, x_3550.y, x_3550.z));
  let x_3553 : vec4<f32> = u_xlat8;
  u_xlat8 = vec4<f32>(x_3552.x, x_3552.y, x_3552.z, x_3553.w);
  let x_3555 : vec4<f32> = u_xlat8;
  let x_3557 : vec4<f32> = u_xlat8;
  u_xlat66 = dot(vec3<f32>(x_3555.x, x_3555.y, x_3555.z), vec3<f32>(x_3557.x, x_3557.y, x_3557.z));
  let x_3560 : f32 = u_xlat66;
  u_xlat66 = max(x_3560, 1.17549435e-37f);
  let x_3563 : f32 = u_xlat66;
  u_xlat66 = inverseSqrt(x_3563);
  let x_3565 : f32 = u_xlat66;
  let x_3567 : vec4<f32> = u_xlat8;
  let x_3569 : vec3<f32> = (vec3<f32>(x_3565, x_3565, x_3565) * vec3<f32>(x_3567.x, x_3567.y, x_3567.z));
  let x_3570 : vec4<f32> = u_xlat8;
  u_xlat8 = vec4<f32>(x_3569.x, x_3569.y, x_3569.z, x_3570.w);
  let x_3572 : vec3<f32> = u_xlat25;
  let x_3573 : vec4<f32> = u_xlat8;
  u_xlat66 = dot(x_3572, vec3<f32>(x_3573.x, x_3573.y, x_3573.z));
  let x_3576 : f32 = u_xlat66;
  u_xlat66 = clamp(x_3576, 0.0f, 1.0f);
  let x_3579 : vec4<f32> = x_66.x_MainLightPosition;
  let x_3581 : vec4<f32> = u_xlat8;
  u_xlat67 = dot(vec3<f32>(x_3579.x, x_3579.y, x_3579.z), vec3<f32>(x_3581.x, x_3581.y, x_3581.z));
  let x_3584 : f32 = u_xlat67;
  u_xlat67 = clamp(x_3584, 0.0f, 1.0f);
  let x_3586 : f32 = u_xlat66;
  let x_3587 : f32 = u_xlat66;
  u_xlat66 = (x_3586 * x_3587);
  let x_3589 : f32 = u_xlat66;
  let x_3591 : f32 = u_xlat9.x;
  u_xlat66 = ((x_3589 * x_3591) + 1.000010014f);
  let x_3595 : f32 = u_xlat67;
  let x_3596 : f32 = u_xlat67;
  u_xlat67 = (x_3595 * x_3596);
  let x_3598 : f32 = u_xlat66;
  let x_3599 : f32 = u_xlat66;
  u_xlat66 = (x_3598 * x_3599);
  let x_3601 : f32 = u_xlat67;
  u_xlat67 = max(x_3601, 0.100000001f);
  let x_3604 : f32 = u_xlat66;
  let x_3605 : f32 = u_xlat67;
  u_xlat66 = (x_3604 * x_3605);
  let x_3608 : f32 = u_xlat29.x;
  let x_3609 : f32 = u_xlat66;
  u_xlat66 = (x_3608 * x_3609);
  let x_3611 : f32 = u_xlat72;
  let x_3612 : f32 = u_xlat66;
  u_xlat66 = (x_3611 / x_3612);
  let x_3614 : f32 = u_xlat66;
  let x_3618 : vec3<f32> = u_xlat2;
  let x_3619 : vec3<f32> = ((vec3<f32>(x_3614, x_3614, x_3614) * vec3<f32>(0.039999999f, 0.039999999f, 0.039999999f)) + x_3618);
  let x_3620 : vec4<f32> = u_xlat8;
  u_xlat8 = vec4<f32>(x_3619.x, x_3619.y, x_3619.z, x_3620.w);
  let x_3622 : vec4<f32> = u_xlat4;
  let x_3624 : vec4<f32> = u_xlat8;
  let x_3626 : vec3<f32> = (vec3<f32>(x_3622.x, x_3622.y, x_3622.z) * vec3<f32>(x_3624.x, x_3624.y, x_3624.z));
  let x_3627 : vec4<f32> = u_xlat4;
  u_xlat4 = vec4<f32>(x_3626.x, x_3626.y, x_3626.z, x_3627.w);
  let x_3630 : f32 = x_66.x_AdditionalLightsCount.x;
  let x_3632 : f32 = x_1752.unity_LightData.y;
  u_xlat66 = min(x_3630, x_3632);
  let x_3634 : f32 = u_xlat66;
  u_xlatu66 = bitcast<u32>(i32(x_3634));
  let x_3638 : f32 = x_3275.x_AdditionalLightsCookieAtlasTextureFormat;
  let x_3640 : f32 = x_3275.x_AdditionalLightsCookieAtlasTextureFormat;
  let x_3642 : f32 = x_3275.x_AdditionalLightsCookieAtlasTextureFormat;
  let x_3644 : f32 = x_3275.x_AdditionalLightsCookieAtlasTextureFormat;
  let x_3645 : vec4<f32> = vec4<f32>(x_3638, x_3640, x_3642, x_3644);
  let x_3651 : vec4<bool> = (vec4<f32>(x_3645.x, x_3645.y, x_3645.z, x_3645.w) == vec4<f32>(0.0f, 1.0f, 0.0f, 0.0f));
  u_xlatb8 = vec2<bool>(x_3651.x, x_3651.y);
  u_xlat31.x = 0.0f;
  u_xlat31.y = 0.0f;
  u_xlat31.z = 0.0f;
  u_xlatu_loop_1 = 0u;
  loop {
    let x_3662 : u32 = u_xlatu_loop_1;
    let x_3663 : u32 = u_xlatu66;
    if ((x_3662 < x_3663)) {
    } else {
      break;
    }
    let x_3666 : u32 = u_xlatu_loop_1;
    u_xlatu68 = (x_3666 >> 2u);
    let x_3669 : u32 = u_xlatu_loop_1;
    u_xlati3 = bitcast<i32>((x_3669 & 3u));
    let x_3672 : u32 = u_xlatu68;
    let x_3675 : vec4<f32> = x_1752.unity_LightIndices[bitcast<i32>(x_3672)];
    let x_3685 : i32 = u_xlati3;
    indexable = array<vec4<u32>, 4u>(vec4<u32>(1065353216u, 0u, 0u, 0u), vec4<u32>(0u, 1065353216u, 0u, 0u), vec4<u32>(0u, 0u, 1065353216u, 0u), vec4<u32>(0u, 0u, 0u, 1065353216u));
    let x_3690 : vec4<u32> = indexable[x_3685];
    u_xlat68 = dot(x_3675, bitcast<vec4<f32>>(x_3690));
    let x_3693 : f32 = u_xlat68;
    u_xlatu68 = bitcast<u32>(i32(x_3693));
    let x_3696 : vec3<f32> = vs_INTERP0;
    let x_3708 : u32 = u_xlatu68;
    let x_3711 : vec4<f32> = x_3707.x_AdditionalLightsPosition[bitcast<i32>(x_3708)];
    let x_3714 : u32 = u_xlatu68;
    let x_3717 : vec4<f32> = x_3707.x_AdditionalLightsPosition[bitcast<i32>(x_3714)];
    let x_3719 : vec3<f32> = ((-(x_3696) * vec3<f32>(x_3711.w, x_3711.w, x_3711.w)) + vec3<f32>(x_3717.x, x_3717.y, x_3717.z));
    let x_3720 : vec4<f32> = u_xlat10;
    u_xlat10 = vec4<f32>(x_3719.x, x_3719.y, x_3719.z, x_3720.w);
    let x_3722 : vec4<f32> = u_xlat10;
    let x_3724 : vec4<f32> = u_xlat10;
    u_xlat3.x = dot(vec3<f32>(x_3722.x, x_3722.y, x_3722.z), vec3<f32>(x_3724.x, x_3724.y, x_3724.z));
    let x_3729 : f32 = u_xlat3.x;
    u_xlat3.x = max(x_3729, 6.10351562e-05f);
    let x_3734 : f32 = u_xlat3.x;
    u_xlat70 = inverseSqrt(x_3734);
    let x_3736 : f32 = u_xlat70;
    let x_3738 : vec4<f32> = u_xlat10;
    let x_3740 : vec3<f32> = (vec3<f32>(x_3736, x_3736, x_3736) * vec3<f32>(x_3738.x, x_3738.y, x_3738.z));
    let x_3741 : vec4<f32> = u_xlat11;
    u_xlat11 = vec4<f32>(x_3740.x, x_3740.y, x_3740.z, x_3741.w);
    let x_3744 : f32 = u_xlat3.x;
    u_xlat5.x = (1.0f / x_3744);
    let x_3748 : f32 = u_xlat3.x;
    let x_3749 : u32 = u_xlatu68;
    let x_3752 : f32 = x_3707.x_AdditionalLightsAttenuation[bitcast<i32>(x_3749)].x;
    u_xlat3.x = (x_3748 * x_3752);
    let x_3756 : f32 = u_xlat3.x;
    let x_3759 : f32 = u_xlat3.x;
    u_xlat3.x = ((-(x_3756) * x_3759) + 1.0f);
    let x_3764 : f32 = u_xlat3.x;
    u_xlat3.x = max(x_3764, 0.0f);
    let x_3768 : f32 = u_xlat3.x;
    let x_3770 : f32 = u_xlat3.x;
    u_xlat3.x = (x_3768 * x_3770);
    let x_3774 : f32 = u_xlat3.x;
    let x_3776 : f32 = u_xlat5.x;
    u_xlat3.x = (x_3774 * x_3776);
    let x_3779 : u32 = u_xlatu68;
    let x_3782 : vec4<f32> = x_3707.x_AdditionalLightsSpotDir[bitcast<i32>(x_3779)];
    let x_3784 : vec4<f32> = u_xlat11;
    u_xlat5.x = dot(vec3<f32>(x_3782.x, x_3782.y, x_3782.z), vec3<f32>(x_3784.x, x_3784.y, x_3784.z));
    let x_3789 : f32 = u_xlat5.x;
    let x_3790 : u32 = u_xlatu68;
    let x_3793 : f32 = x_3707.x_AdditionalLightsAttenuation[bitcast<i32>(x_3790)].z;
    let x_3795 : u32 = u_xlatu68;
    let x_3798 : f32 = x_3707.x_AdditionalLightsAttenuation[bitcast<i32>(x_3795)].w;
    u_xlat5.x = ((x_3789 * x_3793) + x_3798);
    let x_3802 : f32 = u_xlat5.x;
    u_xlat5.x = clamp(x_3802, 0.0f, 1.0f);
    let x_3806 : f32 = u_xlat5.x;
    let x_3808 : f32 = u_xlat5.x;
    u_xlat5.x = (x_3806 * x_3808);
    let x_3812 : f32 = u_xlat3.x;
    let x_3814 : f32 = u_xlat5.x;
    u_xlat3.x = (x_3812 * x_3814);
    let x_3818 : u32 = u_xlatu68;
    u_xlatu5 = (x_3818 >> 5u);
    let x_3821 : u32 = u_xlatu68;
    u_xlati73 = (1i << bitcast<u32>((bitcast<i32>(x_3821) & 31i)));
    let x_3827 : i32 = u_xlati73;
    let x_3829 : u32 = u_xlatu5;
    let x_3832 : f32 = x_3275.x_AdditionalLightsCookieEnableBits[bitcast<i32>(x_3829)].el;
    u_xlati5 = bitcast<i32>((bitcast<u32>(x_3827) & bitcast<u32>(x_3832)));
    let x_3836 : i32 = u_xlati5;
    if ((x_3836 != 0i)) {
      let x_3846 : u32 = u_xlatu68;
      let x_3849 : f32 = x_3845.x_AdditionalLightsLightTypes[bitcast<i32>(x_3846)].el;
      u_xlati5 = i32(x_3849);
      let x_3851 : i32 = u_xlati5;
      u_xlati73 = select(1i, 0i, (x_3851 != 0i));
      let x_3855 : u32 = u_xlatu68;
      u_xlati52 = (bitcast<i32>(x_3855) << bitcast<u32>(2i));
      let x_3858 : i32 = u_xlati73;
      if ((x_3858 != 0i)) {
        let x_3862 : vec3<f32> = vs_INTERP0;
        let x_3864 : i32 = u_xlati52;
        let x_3867 : i32 = u_xlati52;
        let x_3871 : vec4<f32> = x_3845.x_AdditionalLightsWorldToLights[((x_3864 + 1i) / 4i)][((x_3867 + 1i) % 4i)];
        let x_3873 : vec3<f32> = (vec3<f32>(x_3862.y, x_3862.y, x_3862.y) * vec3<f32>(x_3871.x, x_3871.y, x_3871.w));
        let x_3874 : vec4<f32> = u_xlat12;
        u_xlat12 = vec4<f32>(x_3873.x, x_3873.y, x_3873.z, x_3874.w);
        let x_3876 : i32 = u_xlati52;
        let x_3878 : i32 = u_xlati52;
        let x_3881 : vec4<f32> = x_3845.x_AdditionalLightsWorldToLights[(x_3876 / 4i)][(x_3878 % 4i)];
        let x_3883 : vec3<f32> = vs_INTERP0;
        let x_3886 : vec4<f32> = u_xlat12;
        let x_3888 : vec3<f32> = ((vec3<f32>(x_3881.x, x_3881.y, x_3881.w) * vec3<f32>(x_3883.x, x_3883.x, x_3883.x)) + vec3<f32>(x_3886.x, x_3886.y, x_3886.z));
        let x_3889 : vec4<f32> = u_xlat12;
        u_xlat12 = vec4<f32>(x_3888.x, x_3888.y, x_3888.z, x_3889.w);
        let x_3891 : i32 = u_xlati52;
        let x_3894 : i32 = u_xlati52;
        let x_3898 : vec4<f32> = x_3845.x_AdditionalLightsWorldToLights[((x_3891 + 2i) / 4i)][((x_3894 + 2i) % 4i)];
        let x_3900 : vec3<f32> = vs_INTERP0;
        let x_3903 : vec4<f32> = u_xlat12;
        let x_3905 : vec3<f32> = ((vec3<f32>(x_3898.x, x_3898.y, x_3898.w) * vec3<f32>(x_3900.z, x_3900.z, x_3900.z)) + vec3<f32>(x_3903.x, x_3903.y, x_3903.z));
        let x_3906 : vec4<f32> = u_xlat12;
        u_xlat12 = vec4<f32>(x_3905.x, x_3905.y, x_3905.z, x_3906.w);
        let x_3908 : vec4<f32> = u_xlat12;
        let x_3910 : i32 = u_xlati52;
        let x_3913 : i32 = u_xlati52;
        let x_3917 : vec4<f32> = x_3845.x_AdditionalLightsWorldToLights[((x_3910 + 3i) / 4i)][((x_3913 + 3i) % 4i)];
        let x_3919 : vec3<f32> = (vec3<f32>(x_3908.x, x_3908.y, x_3908.z) + vec3<f32>(x_3917.x, x_3917.y, x_3917.w));
        let x_3920 : vec4<f32> = u_xlat12;
        u_xlat12 = vec4<f32>(x_3919.x, x_3919.y, x_3919.z, x_3920.w);
        let x_3922 : vec4<f32> = u_xlat12;
        let x_3924 : vec4<f32> = u_xlat12;
        let x_3926 : vec2<f32> = (vec2<f32>(x_3922.x, x_3922.y) / vec2<f32>(x_3924.z, x_3924.z));
        let x_3927 : vec4<f32> = u_xlat12;
        u_xlat12 = vec4<f32>(x_3926.x, x_3926.y, x_3927.z, x_3927.w);
        let x_3929 : vec4<f32> = u_xlat12;
        let x_3932 : vec2<f32> = ((vec2<f32>(x_3929.x, x_3929.y) * vec2<f32>(0.5f, 0.5f)) + vec2<f32>(0.5f, 0.5f));
        let x_3933 : vec4<f32> = u_xlat12;
        u_xlat12 = vec4<f32>(x_3932.x, x_3932.y, x_3933.z, x_3933.w);
        let x_3935 : vec4<f32> = u_xlat12;
        let x_3939 : vec2<f32> = clamp(vec2<f32>(x_3935.x, x_3935.y), vec2<f32>(0.0f, 0.0f), vec2<f32>(1.0f, 1.0f));
        let x_3940 : vec4<f32> = u_xlat12;
        u_xlat12 = vec4<f32>(x_3939.x, x_3939.y, x_3940.z, x_3940.w);
        let x_3942 : u32 = u_xlatu68;
        let x_3945 : vec4<f32> = x_3845.x_AdditionalLightsCookieAtlasUVRects[bitcast<i32>(x_3942)];
        let x_3947 : vec4<f32> = u_xlat12;
        let x_3950 : u32 = u_xlatu68;
        let x_3953 : vec4<f32> = x_3845.x_AdditionalLightsCookieAtlasUVRects[bitcast<i32>(x_3950)];
        let x_3955 : vec2<f32> = ((vec2<f32>(x_3945.x, x_3945.y) * vec2<f32>(x_3947.x, x_3947.y)) + vec2<f32>(x_3953.z, x_3953.w));
        let x_3956 : vec4<f32> = u_xlat12;
        u_xlat12 = vec4<f32>(x_3955.x, x_3955.y, x_3956.z, x_3956.w);
      } else {
        let x_3959 : i32 = u_xlati5;
        u_xlatb5 = (x_3959 == 1i);
        let x_3961 : bool = u_xlatb5;
        u_xlati5 = select(0i, 1i, x_3961);
        let x_3963 : i32 = u_xlati5;
        if ((x_3963 != 0i)) {
          let x_3968 : vec3<f32> = vs_INTERP0;
          let x_3970 : i32 = u_xlati52;
          let x_3973 : i32 = u_xlati52;
          let x_3977 : vec4<f32> = x_3845.x_AdditionalLightsWorldToLights[((x_3970 + 1i) / 4i)][((x_3973 + 1i) % 4i)];
          u_xlat56 = (vec2<f32>(x_3968.y, x_3968.y) * vec2<f32>(x_3977.x, x_3977.y));
          let x_3980 : i32 = u_xlati52;
          let x_3982 : i32 = u_xlati52;
          let x_3985 : vec4<f32> = x_3845.x_AdditionalLightsWorldToLights[(x_3980 / 4i)][(x_3982 % 4i)];
          let x_3987 : vec3<f32> = vs_INTERP0;
          let x_3990 : vec2<f32> = u_xlat56;
          u_xlat56 = ((vec2<f32>(x_3985.x, x_3985.y) * vec2<f32>(x_3987.x, x_3987.x)) + x_3990);
          let x_3992 : i32 = u_xlati52;
          let x_3995 : i32 = u_xlati52;
          let x_3999 : vec4<f32> = x_3845.x_AdditionalLightsWorldToLights[((x_3992 + 2i) / 4i)][((x_3995 + 2i) % 4i)];
          let x_4001 : vec3<f32> = vs_INTERP0;
          let x_4004 : vec2<f32> = u_xlat56;
          u_xlat56 = ((vec2<f32>(x_3999.x, x_3999.y) * vec2<f32>(x_4001.z, x_4001.z)) + x_4004);
          let x_4006 : vec2<f32> = u_xlat56;
          let x_4007 : i32 = u_xlati52;
          let x_4010 : i32 = u_xlati52;
          let x_4014 : vec4<f32> = x_3845.x_AdditionalLightsWorldToLights[((x_4007 + 3i) / 4i)][((x_4010 + 3i) % 4i)];
          u_xlat56 = (x_4006 + vec2<f32>(x_4014.x, x_4014.y));
          let x_4017 : vec2<f32> = u_xlat56;
          u_xlat56 = ((x_4017 * vec2<f32>(0.5f, 0.5f)) + vec2<f32>(0.5f, 0.5f));
          let x_4020 : vec2<f32> = u_xlat56;
          u_xlat56 = fract(x_4020);
          let x_4022 : u32 = u_xlatu68;
          let x_4025 : vec4<f32> = x_3845.x_AdditionalLightsCookieAtlasUVRects[bitcast<i32>(x_4022)];
          let x_4027 : vec2<f32> = u_xlat56;
          let x_4029 : u32 = u_xlatu68;
          let x_4032 : vec4<f32> = x_3845.x_AdditionalLightsCookieAtlasUVRects[bitcast<i32>(x_4029)];
          let x_4034 : vec2<f32> = ((vec2<f32>(x_4025.x, x_4025.y) * x_4027) + vec2<f32>(x_4032.z, x_4032.w));
          let x_4035 : vec4<f32> = u_xlat12;
          u_xlat12 = vec4<f32>(x_4034.x, x_4034.y, x_4035.z, x_4035.w);
        } else {
          let x_4038 : vec3<f32> = vs_INTERP0;
          let x_4040 : i32 = u_xlati52;
          let x_4043 : i32 = u_xlati52;
          let x_4047 : vec4<f32> = x_3845.x_AdditionalLightsWorldToLights[((x_4040 + 1i) / 4i)][((x_4043 + 1i) % 4i)];
          u_xlat13 = (vec4<f32>(x_4038.y, x_4038.y, x_4038.y, x_4038.y) * x_4047);
          let x_4049 : i32 = u_xlati52;
          let x_4051 : i32 = u_xlati52;
          let x_4054 : vec4<f32> = x_3845.x_AdditionalLightsWorldToLights[(x_4049 / 4i)][(x_4051 % 4i)];
          let x_4055 : vec3<f32> = vs_INTERP0;
          let x_4058 : vec4<f32> = u_xlat13;
          u_xlat13 = ((x_4054 * vec4<f32>(x_4055.x, x_4055.x, x_4055.x, x_4055.x)) + x_4058);
          let x_4060 : i32 = u_xlati52;
          let x_4063 : i32 = u_xlati52;
          let x_4067 : vec4<f32> = x_3845.x_AdditionalLightsWorldToLights[((x_4060 + 2i) / 4i)][((x_4063 + 2i) % 4i)];
          let x_4068 : vec3<f32> = vs_INTERP0;
          let x_4071 : vec4<f32> = u_xlat13;
          u_xlat13 = ((x_4067 * vec4<f32>(x_4068.z, x_4068.z, x_4068.z, x_4068.z)) + x_4071);
          let x_4073 : vec4<f32> = u_xlat13;
          let x_4074 : i32 = u_xlati52;
          let x_4077 : i32 = u_xlati52;
          let x_4081 : vec4<f32> = x_3845.x_AdditionalLightsWorldToLights[((x_4074 + 3i) / 4i)][((x_4077 + 3i) % 4i)];
          u_xlat13 = (x_4073 + x_4081);
          let x_4083 : vec4<f32> = u_xlat13;
          let x_4085 : vec4<f32> = u_xlat13;
          let x_4087 : vec3<f32> = (vec3<f32>(x_4083.x, x_4083.y, x_4083.z) / vec3<f32>(x_4085.w, x_4085.w, x_4085.w));
          let x_4088 : vec4<f32> = u_xlat13;
          u_xlat13 = vec4<f32>(x_4087.x, x_4087.y, x_4087.z, x_4088.w);
          let x_4090 : vec4<f32> = u_xlat13;
          let x_4092 : vec4<f32> = u_xlat13;
          u_xlat5.x = dot(vec3<f32>(x_4090.x, x_4090.y, x_4090.z), vec3<f32>(x_4092.x, x_4092.y, x_4092.z));
          let x_4097 : f32 = u_xlat5.x;
          u_xlat5.x = inverseSqrt(x_4097);
          let x_4100 : vec4<f32> = u_xlat5;
          let x_4102 : vec4<f32> = u_xlat13;
          let x_4104 : vec3<f32> = (vec3<f32>(x_4100.x, x_4100.x, x_4100.x) * vec3<f32>(x_4102.x, x_4102.y, x_4102.z));
          let x_4105 : vec4<f32> = u_xlat13;
          u_xlat13 = vec4<f32>(x_4104.x, x_4104.y, x_4104.z, x_4105.w);
          let x_4107 : vec4<f32> = u_xlat13;
          u_xlat5.x = dot(abs(vec3<f32>(x_4107.x, x_4107.y, x_4107.z)), vec3<f32>(1.0f, 1.0f, 1.0f));
          let x_4114 : f32 = u_xlat5.x;
          u_xlat5.x = max(x_4114, 0.000001f);
          let x_4119 : f32 = u_xlat5.x;
          u_xlat5.x = (1.0f / x_4119);
          let x_4122 : vec4<f32> = u_xlat5;
          let x_4124 : vec4<f32> = u_xlat13;
          let x_4126 : vec3<f32> = (vec3<f32>(x_4122.x, x_4122.x, x_4122.x) * vec3<f32>(x_4124.z, x_4124.x, x_4124.y));
          let x_4127 : vec4<f32> = u_xlat14;
          u_xlat14 = vec4<f32>(x_4126.x, x_4126.y, x_4126.z, x_4127.w);
          let x_4130 : f32 = u_xlat14.x;
          u_xlat14.x = -(x_4130);
          let x_4134 : f32 = u_xlat14.x;
          u_xlat14.x = clamp(x_4134, 0.0f, 1.0f);
          let x_4138 : vec4<f32> = u_xlat14;
          let x_4141 : vec4<bool> = (vec4<f32>(x_4138.y, x_4138.z, x_4138.y, x_4138.z) >= vec4<f32>(0.0f, 0.0f, 0.0f, 0.0f));
          u_xlatb52 = vec2<bool>(x_4141.x, x_4141.y);
          let x_4144 : bool = u_xlatb52.x;
          if (x_4144) {
            let x_4149 : f32 = u_xlat14.x;
            x_4145 = x_4149;
          } else {
            let x_4152 : f32 = u_xlat14.x;
            x_4145 = -(x_4152);
          }
          let x_4154 : f32 = x_4145;
          u_xlat52.x = x_4154;
          let x_4157 : bool = u_xlatb52.y;
          if (x_4157) {
            let x_4162 : f32 = u_xlat14.x;
            x_4158 = x_4162;
          } else {
            let x_4165 : f32 = u_xlat14.x;
            x_4158 = -(x_4165);
          }
          let x_4167 : f32 = x_4158;
          u_xlat52.y = x_4167;
          let x_4169 : vec4<f32> = u_xlat13;
          let x_4171 : vec4<f32> = u_xlat5;
          let x_4174 : vec2<f32> = u_xlat52;
          u_xlat52 = ((vec2<f32>(x_4169.x, x_4169.y) * vec2<f32>(x_4171.x, x_4171.x)) + x_4174);
          let x_4176 : vec2<f32> = u_xlat52;
          u_xlat52 = ((x_4176 * vec2<f32>(0.5f, 0.5f)) + vec2<f32>(0.5f, 0.5f));
          let x_4179 : vec2<f32> = u_xlat52;
          u_xlat52 = clamp(x_4179, vec2<f32>(0.0f, 0.0f), vec2<f32>(1.0f, 1.0f));
          let x_4183 : u32 = u_xlatu68;
          let x_4186 : vec4<f32> = x_3845.x_AdditionalLightsCookieAtlasUVRects[bitcast<i32>(x_4183)];
          let x_4188 : vec2<f32> = u_xlat52;
          let x_4190 : u32 = u_xlatu68;
          let x_4193 : vec4<f32> = x_3845.x_AdditionalLightsCookieAtlasUVRects[bitcast<i32>(x_4190)];
          let x_4195 : vec2<f32> = ((vec2<f32>(x_4186.x, x_4186.y) * x_4188) + vec2<f32>(x_4193.z, x_4193.w));
          let x_4196 : vec4<f32> = u_xlat12;
          u_xlat12 = vec4<f32>(x_4195.x, x_4195.y, x_4196.z, x_4196.w);
        }
      }
      let x_4203 : vec4<f32> = u_xlat12;
      let x_4206 : f32 = x_66.x_GlobalMipBias.x;
      let x_4207 : vec4<f32> = textureSampleBias(x_AdditionalLightsCookieAtlasTexture, sampler_AdditionalLightsCookieAtlasTexture, vec2<f32>(x_4203.x, x_4203.y), x_4206);
      u_xlat12 = x_4207;
      let x_4209 : bool = u_xlatb8.y;
      if (x_4209) {
        let x_4214 : f32 = u_xlat12.w;
        x_4210 = x_4214;
      } else {
        let x_4217 : f32 = u_xlat12.x;
        x_4210 = x_4217;
      }
      let x_4218 : f32 = x_4210;
      u_xlat5.x = x_4218;
      let x_4221 : bool = u_xlatb8.x;
      if (x_4221) {
        let x_4225 : vec4<f32> = u_xlat12;
        x_4222 = vec3<f32>(x_4225.x, x_4225.y, x_4225.z);
      } else {
        let x_4228 : vec4<f32> = u_xlat5;
        x_4222 = vec3<f32>(x_4228.x, x_4228.x, x_4228.x);
      }
      let x_4230 : vec3<f32> = x_4222;
      let x_4231 : vec4<f32> = u_xlat12;
      u_xlat12 = vec4<f32>(x_4230.x, x_4230.y, x_4230.z, x_4231.w);
    } else {
      u_xlat12.x = 1.0f;
      u_xlat12.y = 1.0f;
      u_xlat12.z = 1.0f;
    }
    let x_4237 : vec4<f32> = u_xlat12;
    let x_4239 : u32 = u_xlatu68;
    let x_4242 : vec4<f32> = x_3707.x_AdditionalLightsColor[bitcast<i32>(x_4239)];
    let x_4244 : vec3<f32> = (vec3<f32>(x_4237.x, x_4237.y, x_4237.z) * vec3<f32>(x_4242.x, x_4242.y, x_4242.z));
    let x_4245 : vec4<f32> = u_xlat12;
    u_xlat12 = vec4<f32>(x_4244.x, x_4244.y, x_4244.z, x_4245.w);
    let x_4247 : vec2<f32> = u_xlat51;
    let x_4249 : vec4<f32> = u_xlat12;
    let x_4251 : vec3<f32> = (vec3<f32>(x_4247.x, x_4247.x, x_4247.x) * vec3<f32>(x_4249.x, x_4249.y, x_4249.z));
    let x_4252 : vec4<f32> = u_xlat12;
    u_xlat12 = vec4<f32>(x_4251.x, x_4251.y, x_4251.z, x_4252.w);
    let x_4254 : vec3<f32> = u_xlat25;
    let x_4255 : vec4<f32> = u_xlat11;
    u_xlat68 = dot(x_4254, vec3<f32>(x_4255.x, x_4255.y, x_4255.z));
    let x_4258 : f32 = u_xlat68;
    u_xlat68 = clamp(x_4258, 0.0f, 1.0f);
    let x_4260 : f32 = u_xlat68;
    let x_4262 : f32 = u_xlat3.x;
    u_xlat68 = (x_4260 * x_4262);
    let x_4264 : f32 = u_xlat68;
    let x_4266 : vec4<f32> = u_xlat12;
    let x_4268 : vec3<f32> = (vec3<f32>(x_4264, x_4264, x_4264) * vec3<f32>(x_4266.x, x_4266.y, x_4266.z));
    let x_4269 : vec4<f32> = u_xlat12;
    u_xlat12 = vec4<f32>(x_4268.x, x_4268.y, x_4268.z, x_4269.w);
    let x_4271 : vec4<f32> = u_xlat10;
    let x_4273 : f32 = u_xlat70;
    let x_4276 : vec3<f32> = u_xlat27;
    let x_4277 : vec3<f32> = ((vec3<f32>(x_4271.x, x_4271.y, x_4271.z) * vec3<f32>(x_4273, x_4273, x_4273)) + x_4276);
    let x_4278 : vec4<f32> = u_xlat10;
    u_xlat10 = vec4<f32>(x_4277.x, x_4277.y, x_4277.z, x_4278.w);
    let x_4280 : vec4<f32> = u_xlat10;
    let x_4282 : vec4<f32> = u_xlat10;
    u_xlat68 = dot(vec3<f32>(x_4280.x, x_4280.y, x_4280.z), vec3<f32>(x_4282.x, x_4282.y, x_4282.z));
    let x_4285 : f32 = u_xlat68;
    u_xlat68 = max(x_4285, 1.17549435e-37f);
    let x_4287 : f32 = u_xlat68;
    u_xlat68 = inverseSqrt(x_4287);
    let x_4289 : f32 = u_xlat68;
    let x_4291 : vec4<f32> = u_xlat10;
    let x_4293 : vec3<f32> = (vec3<f32>(x_4289, x_4289, x_4289) * vec3<f32>(x_4291.x, x_4291.y, x_4291.z));
    let x_4294 : vec4<f32> = u_xlat10;
    u_xlat10 = vec4<f32>(x_4293.x, x_4293.y, x_4293.z, x_4294.w);
    let x_4296 : vec3<f32> = u_xlat25;
    let x_4297 : vec4<f32> = u_xlat10;
    u_xlat68 = dot(x_4296, vec3<f32>(x_4297.x, x_4297.y, x_4297.z));
    let x_4300 : f32 = u_xlat68;
    u_xlat68 = clamp(x_4300, 0.0f, 1.0f);
    let x_4302 : vec4<f32> = u_xlat11;
    let x_4304 : vec4<f32> = u_xlat10;
    u_xlat3.x = dot(vec3<f32>(x_4302.x, x_4302.y, x_4302.z), vec3<f32>(x_4304.x, x_4304.y, x_4304.z));
    let x_4309 : f32 = u_xlat3.x;
    u_xlat3.x = clamp(x_4309, 0.0f, 1.0f);
    let x_4312 : f32 = u_xlat68;
    let x_4313 : f32 = u_xlat68;
    u_xlat68 = (x_4312 * x_4313);
    let x_4315 : f32 = u_xlat68;
    let x_4317 : f32 = u_xlat9.x;
    u_xlat68 = ((x_4315 * x_4317) + 1.000010014f);
    let x_4321 : f32 = u_xlat3.x;
    let x_4323 : f32 = u_xlat3.x;
    u_xlat3.x = (x_4321 * x_4323);
    let x_4326 : f32 = u_xlat68;
    let x_4327 : f32 = u_xlat68;
    u_xlat68 = (x_4326 * x_4327);
    let x_4330 : f32 = u_xlat3.x;
    u_xlat3.x = max(x_4330, 0.100000001f);
    let x_4333 : f32 = u_xlat68;
    let x_4335 : f32 = u_xlat3.x;
    u_xlat68 = (x_4333 * x_4335);
    let x_4338 : f32 = u_xlat29.x;
    let x_4339 : f32 = u_xlat68;
    u_xlat68 = (x_4338 * x_4339);
    let x_4341 : f32 = u_xlat72;
    let x_4342 : f32 = u_xlat68;
    u_xlat68 = (x_4341 / x_4342);
    let x_4344 : f32 = u_xlat68;
    let x_4347 : vec3<f32> = u_xlat2;
    let x_4348 : vec3<f32> = ((vec3<f32>(x_4344, x_4344, x_4344) * vec3<f32>(0.039999999f, 0.039999999f, 0.039999999f)) + x_4347);
    let x_4349 : vec4<f32> = u_xlat10;
    u_xlat10 = vec4<f32>(x_4348.x, x_4348.y, x_4348.z, x_4349.w);
    let x_4351 : vec4<f32> = u_xlat10;
    let x_4353 : vec4<f32> = u_xlat12;
    let x_4356 : vec3<f32> = u_xlat31;
    u_xlat31 = ((vec3<f32>(x_4351.x, x_4351.y, x_4351.z) * vec3<f32>(x_4353.x, x_4353.y, x_4353.z)) + x_4356);

    continuing {
      let x_4358 : u32 = u_xlatu_loop_1;
      u_xlatu_loop_1 = (x_4358 + bitcast<u32>(1i));
    }
  }
  let x_4360 : vec4<f32> = u_xlat6;
  let x_4362 : vec4<f32> = u_xlat7;
  let x_4365 : vec4<f32> = u_xlat4;
  u_xlat2 = ((vec3<f32>(x_4360.x, x_4360.y, x_4360.z) * vec3<f32>(x_4362.x, x_4362.x, x_4362.x)) + vec3<f32>(x_4365.x, x_4365.y, x_4365.z));
  let x_4368 : vec3<f32> = u_xlat31;
  let x_4369 : vec3<f32> = u_xlat2;
  u_xlat2 = (x_4368 + x_4369);
  let x_4371 : vec4<f32> = vs_INTERP4;
  let x_4373 : vec3<f32> = u_xlat0;
  let x_4375 : vec3<f32> = u_xlat2;
  u_xlat0 = ((vec3<f32>(x_4371.w, x_4371.w, x_4371.w) * x_4373) + x_4375);
  let x_4378 : f32 = u_xlat23.x;
  let x_4380 : f32 = u_xlat23.x;
  u_xlat66 = (x_4378 * -(x_4380));
  let x_4383 : f32 = u_xlat66;
  u_xlat66 = exp2(x_4383);
  let x_4385 : vec3<f32> = u_xlat0;
  let x_4388 : vec4<f32> = x_66.unity_FogColor;
  u_xlat0 = (x_4385 + -(vec3<f32>(x_4388.x, x_4388.y, x_4388.z)));
  let x_4394 : f32 = u_xlat66;
  let x_4396 : vec3<f32> = u_xlat0;
  let x_4399 : vec4<f32> = x_66.unity_FogColor;
  let x_4401 : vec3<f32> = ((vec3<f32>(x_4394, x_4394, x_4394) * x_4396) + vec3<f32>(x_4399.x, x_4399.y, x_4399.z));
  let x_4402 : vec4<f32> = SV_Target0;
  SV_Target0 = vec4<f32>(x_4401.x, x_4401.y, x_4401.z, x_4402.w);
  let x_4404 : bool = u_xlatb45;
  if (x_4404) {
    let x_4409 : f32 = u_xlat1.x;
    x_4405 = x_4409;
  } else {
    x_4405 = 1.0f;
  }
  let x_4411 : f32 = x_4405;
  SV_Target0.w = x_4411;
  let x_4417 : u32 = x_66.x_RenderingLayerMaxInt;
  let x_4419 : f32 = x_1752.unity_RenderingLayer.x;
  u_xlatu0 = (x_4417 & bitcast<u32>(x_4419));
  let x_4422 : u32 = u_xlatu0;
  u_xlat0.x = f32(x_4422);
  let x_4427 : f32 = u_xlat0.x;
  let x_4429 : f32 = x_66.x_RenderingLayerRcpMaxInt;
  SV_Target1.x = (x_4427 * x_4429);
  let x_4433 : f32 = SV_Target1.x;
  SV_Target1.x = clamp(x_4433, 0.0f, 1.0f);
  let x_4436 : vec4<f32> = SV_Target1;
  SV_Target1 = vec4<f32>(x_4436.x, vec3<f32>(0.0f, 0.0f, 0.0f).x, vec3<f32>(0.0f, 0.0f, 0.0f).y, vec3<f32>(0.0f, 0.0f, 0.0f).z);
  return;
}

struct main_out {
  @location(0)
  SV_Target0_1 : vec4<f32>,
  @location(1)
  SV_Target1_1 : vec4<f32>,
}

@fragment
fn main(@builtin(position) gl_FragCoord_param : vec4<f32>, @location(1) vs_INTERP1_param : vec3<f32>, @location(3) vs_INTERP3_param : vec4<f32>, @location(4) vs_INTERP4_param : vec4<f32>, @location(0) vs_INTERP0_param : vec3<f32>, @location(2) vs_INTERP2_param : vec4<f32>, @location(5) vs_INTERP5_param : vec2<f32>) -> main_out {
  gl_FragCoord = gl_FragCoord_param;
  vs_INTERP1 = vs_INTERP1_param;
  vs_INTERP3 = vs_INTERP3_param;
  vs_INTERP4 = vs_INTERP4_param;
  vs_INTERP0 = vs_INTERP0_param;
  vs_INTERP2 = vs_INTERP2_param;
  vs_INTERP5 = vs_INTERP5_param;
  main_1();
  return main_out(SV_Target0, SV_Target1);
}

