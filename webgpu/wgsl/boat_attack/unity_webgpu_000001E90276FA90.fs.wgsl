struct PGlobals {
  x_ScaledScreenParams : vec4<f32>,
  x_GlobalMipBias : vec2<f32>,
  x_AlphaToMaskAvailable : f32,
  @size(4)
  padding : u32,
  x_MainLightPosition : vec4<f32>,
  x_MainLightColor : vec4<f32>,
  x_AmbientOcclusionParam : vec4<f32>,
  x_AdditionalLightsCount : vec4<f32>,
  x_WorldSpaceCameraPos : vec3<f32>,
  @size(4)
  padding_1 : u32,
  x_ScreenParams : vec4<f32>,
  unity_OrthoParams : vec4<f32>,
  x_ScaleBiasRt : vec4<f32>,
  unity_MatrixV : mat4x4<f32>,
}

type Arr = array<vec4<f32>, 2u>;

struct UnityPerDraw {
  unity_ObjectToWorld : mat4x4<f32>,
  unity_WorldToObject : mat4x4<f32>,
  unity_LODFade : vec4<f32>,
  unity_WorldTransformParams : vec4<f32>,
  unity_RenderingLayer : vec4<f32>,
  unity_LightData : vec4<f32>,
  unity_LightIndices : Arr,
  unity_ProbesOcclusion : vec4<f32>,
  unity_SpecCube0_HDR : vec4<f32>,
  unity_SpecCube1_HDR : vec4<f32>,
  unity_SpecCube0_BoxMax : vec4<f32>,
  unity_SpecCube0_BoxMin : vec4<f32>,
  unity_SpecCube0_ProbePosition : vec4<f32>,
  unity_SpecCube1_BoxMax : vec4<f32>,
  unity_SpecCube1_BoxMin : vec4<f32>,
  unity_SpecCube1_ProbePosition : vec4<f32>,
  unity_LightmapST : vec4<f32>,
  unity_DynamicLightmapST : vec4<f32>,
  unity_SHAr : vec4<f32>,
  unity_SHAg : vec4<f32>,
  unity_SHAb : vec4<f32>,
  unity_SHBr : vec4<f32>,
  unity_SHBg : vec4<f32>,
  unity_SHBb : vec4<f32>,
  unity_SHC : vec4<f32>,
  unity_RendererBounds_Min : vec4<f32>,
  unity_RendererBounds_Max : vec4<f32>,
  unity_MatrixPreviousM : mat4x4<f32>,
  unity_MatrixPreviousMI : mat4x4<f32>,
  unity_MotionVectorsParams : vec4<f32>,
  unity_SpriteColor : vec4<f32>,
  unity_SpriteProps : vec4<f32>,
}

struct UnityPerMaterial {
  Texture2D_B222E8F_TexelSize : vec4<f32>,
  Color_C30C7CA3 : vec4<f32>,
  Texture2D_D9BFD5F1_TexelSize : vec4<f32>,
}

type Arr_1 = array<mat4x4<f32>, 5u>;

struct MainLightShadows {
  x_MainLightWorldToShadow : Arr_1,
  x_CascadeShadowSplitSpheres0 : vec4<f32>,
  x_CascadeShadowSplitSpheres1 : vec4<f32>,
  x_CascadeShadowSplitSpheres2 : vec4<f32>,
  x_CascadeShadowSplitSpheres3 : vec4<f32>,
  x_CascadeShadowSplitSphereRadii : vec4<f32>,
  x_MainLightShadowOffset0 : vec4<f32>,
  x_MainLightShadowOffset1 : vec4<f32>,
  x_MainLightShadowParams : vec4<f32>,
  x_MainLightShadowmapSize : vec4<f32>,
}

struct strided_arr {
  @size(16)
  el : f32,
}

type Arr_2 = array<strided_arr, 8u>;

struct LightCookies {
  x_MainLightWorldToLight : mat4x4<f32>,
  x_AdditionalLightsCookieEnableBits : Arr_2,
  x_MainLightCookieTextureFormat : f32,
  x_AdditionalLightsCookieAtlasTextureFormat : f32,
}

type Arr_3 = array<vec4<f32>, 256u>;

type Arr_4 = array<vec4<f32>, 256u>;

type Arr_5 = array<vec4<f32>, 256u>;

type Arr_6 = array<vec4<f32>, 256u>;

type Arr_7 = array<vec4<f32>, 256u>;

struct strided_arr_1 {
  @size(16)
  el : f32,
}

type Arr_8 = array<strided_arr_1, 256u>;

type Arr_9 = array<vec4<f32>, 256u>;

type Arr_10 = array<strided_arr_1, 256u>;

struct AdditionalLights {
  x_AdditionalLightsPosition : Arr_9,
  x_AdditionalLightsColor : Arr_9,
  x_AdditionalLightsAttenuation : Arr_9,
  x_AdditionalLightsSpotDir : Arr_9,
  x_AdditionalLightsOcclusionProbes : Arr_9,
  x_AdditionalLightsLayerMasks : Arr_10,
}

type Arr_11 = array<mat4x4<f32>, 256u>;

struct AdditionalLightsCookies {
  x_AdditionalLightsWorldToLights : Arr_11,
  x_AdditionalLightsCookieAtlasUVRects : Arr_9,
  x_AdditionalLightsLightTypes : Arr_10,
}

var<private> gl_FragCoord : vec4<f32>;

var<private> vs_INTERP1 : vec3<f32>;

@group(1) @binding(0) var<uniform> x_90 : PGlobals;

var<private> vs_INTERP0 : vec3<f32>;

@group(1) @binding(2) var<uniform> x_161 : UnityPerDraw;

@group(0) @binding(5) var Texture2D_B222E8F : texture_2d<f32>;

@group(0) @binding(12) var samplerTexture2D_B222E8F : sampler;

var<private> vs_INTERP3 : vec4<f32>;

@group(1) @binding(6) var<uniform> x_215 : UnityPerMaterial;

@group(0) @binding(6) var Texture2D_D9BFD5F1 : texture_2d<f32>;

@group(0) @binding(13) var samplerTexture2D_D9BFD5F1 : sampler;

var<private> vs_INTERP4 : vec4<f32>;

@group(1) @binding(3) var<uniform> x_271 : MainLightShadows;

@group(0) @binding(2) var x_MainLightShadowmapTexture : texture_depth_2d;

@group(0) @binding(9) var sampler_MainLightShadowmapTexture : sampler_comparison;

var<private> vs_INTERP2 : vec4<f32>;

@group(0) @binding(1) var x_ScreenSpaceOcclusionTexture : texture_2d<f32>;

@group(0) @binding(8) var sampler_ScreenSpaceOcclusionTexture : sampler;

@group(1) @binding(4) var<uniform> x_3483 : LightCookies;

@group(0) @binding(3) var x_MainLightCookieTexture : texture_2d<f32>;

@group(0) @binding(10) var sampler_MainLightCookieTexture : sampler;

@group(0) @binding(0) var unity_SpecCube0 : texture_cube<f32>;

@group(0) @binding(7) var samplerunity_SpecCube0 : sampler;

@group(1) @binding(1) var<uniform> x_3931 : AdditionalLights;

@group(1) @binding(5) var<uniform> x_4041 : AdditionalLightsCookies;

@group(0) @binding(4) var x_AdditionalLightsCookieAtlasTexture : texture_2d<f32>;

@group(0) @binding(11) var sampler_AdditionalLightsCookieAtlasTexture : sampler;

var<private> SV_Target0 : vec4<f32>;

fn int_bitfieldInsert_i1_i1_i1_i1_(base : ptr<function, i32>, insert : ptr<function, i32>, offset_1 : ptr<function, i32>, bits : ptr<function, i32>) -> i32 {
  var mask : u32;
  let x_19 : i32 = *(bits);
  let x_23 : i32 = *(offset_1);
  mask = (~((4294967295u << bitcast<u32>(x_19))) << bitcast<u32>(x_23));
  let x_26 : i32 = *(base);
  let x_28 : u32 = mask;
  let x_31 : i32 = *(insert);
  let x_33 : i32 = *(offset_1);
  let x_36 : u32 = mask;
  return bitcast<i32>(((bitcast<u32>(x_26) & ~(x_28)) | ((bitcast<u32>(x_31) << bitcast<u32>(x_33)) & x_36)));
}

fn main_1() {
  var hlslcc_FragCoord : vec4<f32>;
  var u_xlat0 : vec3<f32>;
  var u_xlatb66 : bool;
  var u_xlat1 : vec3<f32>;
  var u_xlat67 : f32;
  var u_xlat2 : vec3<f32>;
  var x_118 : f32;
  var x_132 : f32;
  var x_145 : f32;
  var u_xlat66 : f32;
  var u_xlat3 : vec4<f32>;
  var u_xlat4 : vec3<f32>;
  var u_xlat5 : vec4<f32>;
  var u_xlat6 : vec4<f32>;
  var u_xlat27 : vec3<f32>;
  var u_xlat7 : vec4<f32>;
  var u_xlat8 : vec4<f32>;
  var u_xlat9 : vec4<f32>;
  var u_xlatb6 : vec4<bool>;
  var u_xlatu66 : u32;
  var u_xlati66 : i32;
  var u_xlatb67 : bool;
  var txVec0 : vec3<f32>;
  var txVec1 : vec3<f32>;
  var txVec2 : vec3<f32>;
  var txVec3 : vec3<f32>;
  var u_xlatb68 : bool;
  var u_xlat51 : vec2<f32>;
  var u_xlat53 : vec2<f32>;
  var u_xlat10 : vec4<f32>;
  var u_xlat11 : vec4<f32>;
  var u_xlat12 : vec4<f32>;
  var u_xlat13 : vec4<f32>;
  var u_xlat14 : vec4<f32>;
  var u_xlat15 : vec4<f32>;
  var u_xlat68 : f32;
  var txVec4 : vec3<f32>;
  var u_xlat70 : f32;
  var txVec5 : vec3<f32>;
  var u_xlat72 : f32;
  var txVec6 : vec3<f32>;
  var txVec7 : vec3<f32>;
  var txVec8 : vec3<f32>;
  var txVec9 : vec3<f32>;
  var txVec10 : vec3<f32>;
  var txVec11 : vec3<f32>;
  var txVec12 : vec3<f32>;
  var u_xlat30 : vec3<f32>;
  var u_xlat16 : vec4<f32>;
  var u_xlat17 : vec4<f32>;
  var u_xlat31 : vec2<f32>;
  var u_xlat59 : vec2<f32>;
  var u_xlat54 : vec2<f32>;
  var u_xlat18 : vec4<f32>;
  var u_xlat19 : vec4<f32>;
  var u_xlat20 : vec4<f32>;
  var txVec13 : vec3<f32>;
  var txVec14 : vec3<f32>;
  var txVec15 : vec3<f32>;
  var txVec16 : vec3<f32>;
  var txVec17 : vec3<f32>;
  var txVec18 : vec3<f32>;
  var txVec19 : vec3<f32>;
  var txVec20 : vec3<f32>;
  var txVec21 : vec3<f32>;
  var txVec22 : vec3<f32>;
  var txVec23 : vec3<f32>;
  var txVec24 : vec3<f32>;
  var txVec25 : vec3<f32>;
  var txVec26 : vec3<f32>;
  var txVec27 : vec3<f32>;
  var txVec28 : vec3<f32>;
  var txVec29 : vec3<f32>;
  var u_xlatb70 : bool;
  var u_xlatb72 : bool;
  var x_1726 : f32;
  var u_xlatb3 : bool;
  var u_xlatu1 : vec3<u32>;
  var u_xlatu45 : u32;
  var u_xlatu25 : u32;
  var u_xlati45 : i32;
  var u_xlati23 : i32;
  var u_xlatu23 : u32;
  var u_xlati1 : i32;
  var param : i32;
  var param_1 : i32;
  var param_2 : i32;
  var param_3 : i32;
  var u_xlat23 : f32;
  var x_1858 : f32;
  var u_xlatb45 : vec2<bool>;
  var u_xlat45 : vec2<f32>;
  var u_xlatb23 : bool;
  var x_1930 : f32;
  var u_xlat69 : f32;
  var u_xlat29 : f32;
  var txVec30 : vec3<f32>;
  var txVec31 : vec3<f32>;
  var txVec32 : vec3<f32>;
  var txVec33 : vec3<f32>;
  var u_xlatb51 : vec2<bool>;
  var u_xlat52 : vec2<f32>;
  var txVec34 : vec3<f32>;
  var u_xlat73 : f32;
  var txVec35 : vec3<f32>;
  var txVec36 : vec3<f32>;
  var txVec37 : vec3<f32>;
  var txVec38 : vec3<f32>;
  var txVec39 : vec3<f32>;
  var txVec40 : vec3<f32>;
  var txVec41 : vec3<f32>;
  var txVec42 : vec3<f32>;
  var u_xlat58 : vec2<f32>;
  var u_xlat55 : vec2<f32>;
  var u_xlat21 : vec4<f32>;
  var txVec43 : vec3<f32>;
  var txVec44 : vec3<f32>;
  var u_xlat75 : f32;
  var txVec45 : vec3<f32>;
  var txVec46 : vec3<f32>;
  var txVec47 : vec3<f32>;
  var txVec48 : vec3<f32>;
  var txVec49 : vec3<f32>;
  var txVec50 : vec3<f32>;
  var txVec51 : vec3<f32>;
  var txVec52 : vec3<f32>;
  var txVec53 : vec3<f32>;
  var txVec54 : vec3<f32>;
  var txVec55 : vec3<f32>;
  var txVec56 : vec3<f32>;
  var txVec57 : vec3<f32>;
  var txVec58 : vec3<f32>;
  var txVec59 : vec3<f32>;
  var x_3565 : f32;
  var x_3576 : vec3<f32>;
  var u_xlatu_loop_1 : u32;
  var u_xlatu68 : u32;
  var u_xlati70 : i32;
  var indexable : array<vec4<u32>, 4u>;
  var u_xlat71 : f32;
  var u_xlat74 : f32;
  var u_xlatu74 : u32;
  var u_xlati75 : i32;
  var u_xlati74 : i32;
  var u_xlati76 : i32;
  var u_xlatb74 : bool;
  var u_xlatb55 : vec2<bool>;
  var x_4333 : f32;
  var x_4346 : f32;
  var x_4398 : f32;
  var x_4409 : vec3<f32>;
  var x_4564 : f32;
  var u_xlat_precise_vec4 : vec4<f32>;
  var u_xlat_precise_ivec4 : vec4<i32>;
  var u_xlat_precise_bvec4 : vec4<bool>;
  var u_xlat_precise_uvec4 : vec4<u32>;
  let x_49 : vec4<f32> = gl_FragCoord;
  let x_50 : vec3<f32> = vec3<f32>(x_49.x, x_49.y, x_49.z);
  let x_55 : f32 = gl_FragCoord.w;
  hlslcc_FragCoord = vec4<f32>(x_50.x, x_50.y, x_50.z, (1.0f / x_55));
  let x_65 : vec3<f32> = vs_INTERP1;
  let x_66 : vec3<f32> = vs_INTERP1;
  u_xlat0.x = dot(x_65, x_66);
  let x_72 : f32 = u_xlat0.x;
  u_xlat0.x = sqrt(x_72);
  let x_76 : f32 = u_xlat0.x;
  u_xlat0.x = (1.0f / x_76);
  let x_79 : vec3<f32> = u_xlat0;
  let x_81 : vec3<f32> = vs_INTERP1;
  u_xlat0 = (vec3<f32>(x_79.x, x_79.x, x_79.x) * x_81);
  let x_94 : f32 = x_90.unity_OrthoParams.w;
  u_xlatb66 = (x_94 == 0.0f);
  let x_99 : vec3<f32> = vs_INTERP0;
  let x_104 : vec3<f32> = x_90.x_WorldSpaceCameraPos;
  u_xlat1 = (-(x_99) + x_104);
  let x_107 : vec3<f32> = u_xlat1;
  let x_108 : vec3<f32> = u_xlat1;
  u_xlat67 = dot(x_107, x_108);
  let x_110 : f32 = u_xlat67;
  u_xlat67 = inverseSqrt(x_110);
  let x_112 : f32 = u_xlat67;
  let x_114 : vec3<f32> = u_xlat1;
  u_xlat1 = (vec3<f32>(x_112, x_112, x_112) * x_114);
  let x_117 : bool = u_xlatb66;
  if (x_117) {
    let x_122 : f32 = u_xlat1.x;
    x_118 = x_122;
  } else {
    let x_128 : f32 = x_90.unity_MatrixV[0i].z;
    x_118 = x_128;
  }
  let x_129 : f32 = x_118;
  u_xlat2.x = x_129;
  let x_131 : bool = u_xlatb66;
  if (x_131) {
    let x_137 : f32 = u_xlat1.y;
    x_132 = x_137;
  } else {
    let x_141 : f32 = x_90.unity_MatrixV[1i].z;
    x_132 = x_141;
  }
  let x_142 : f32 = x_132;
  u_xlat2.y = x_142;
  let x_144 : bool = u_xlatb66;
  if (x_144) {
    let x_149 : f32 = u_xlat1.z;
    x_145 = x_149;
  } else {
    let x_153 : f32 = x_90.unity_MatrixV[2i].z;
    x_145 = x_153;
  }
  let x_154 : f32 = x_145;
  u_xlat2.z = x_154;
  let x_156 : vec3<f32> = u_xlat2;
  let x_164 : vec4<f32> = x_161.unity_WorldToObject[1i];
  u_xlat1 = (vec3<f32>(x_156.y, x_156.y, x_156.y) * vec3<f32>(x_164.x, x_164.y, x_164.z));
  let x_168 : vec4<f32> = x_161.unity_WorldToObject[0i];
  let x_170 : vec3<f32> = u_xlat2;
  let x_173 : vec3<f32> = u_xlat1;
  u_xlat1 = ((vec3<f32>(x_168.x, x_168.y, x_168.z) * vec3<f32>(x_170.x, x_170.x, x_170.x)) + x_173);
  let x_176 : vec4<f32> = x_161.unity_WorldToObject[2i];
  let x_178 : vec3<f32> = u_xlat2;
  let x_181 : vec3<f32> = u_xlat1;
  u_xlat1 = ((vec3<f32>(x_176.x, x_176.y, x_176.z) * vec3<f32>(x_178.z, x_178.z, x_178.z)) + x_181);
  let x_184 : vec3<f32> = u_xlat1;
  let x_185 : vec3<f32> = u_xlat1;
  u_xlat66 = dot(x_184, x_185);
  let x_187 : f32 = u_xlat66;
  u_xlat66 = inverseSqrt(x_187);
  let x_189 : f32 = u_xlat66;
  let x_191 : vec3<f32> = u_xlat1;
  u_xlat1 = (vec3<f32>(x_189, x_189, x_189) * x_191);
  let x_205 : vec4<f32> = vs_INTERP3;
  let x_208 : f32 = x_90.x_GlobalMipBias.x;
  let x_209 : vec4<f32> = textureSampleBias(Texture2D_B222E8F, samplerTexture2D_B222E8F, vec2<f32>(x_205.x, x_205.y), x_208);
  u_xlat3 = x_209;
  let x_211 : vec4<f32> = u_xlat3;
  let x_217 : vec4<f32> = x_215.Color_C30C7CA3;
  u_xlat4 = (vec3<f32>(x_211.x, x_211.y, x_211.z) * vec3<f32>(x_217.x, x_217.y, x_217.z));
  let x_226 : vec4<f32> = vs_INTERP3;
  let x_229 : f32 = x_90.x_GlobalMipBias.x;
  let x_230 : vec4<f32> = textureSampleBias(Texture2D_D9BFD5F1, samplerTexture2D_D9BFD5F1, vec2<f32>(x_226.x, x_226.y), x_229);
  u_xlat5 = vec4<f32>(x_230.w, x_230.x, x_230.y, x_230.z);
  let x_233 : vec4<f32> = u_xlat5;
  u_xlat6 = ((vec4<f32>(x_233.y, x_233.z, x_233.w, x_233.x) * vec4<f32>(2.0f, 2.0f, 2.0f, 2.0f)) + vec4<f32>(-1.0f, -1.0f, -1.0f, -1.0f));
  let x_241 : vec4<f32> = u_xlat6;
  let x_242 : vec4<f32> = u_xlat6;
  u_xlat66 = dot(x_241, x_242);
  let x_244 : f32 = u_xlat66;
  u_xlat66 = inverseSqrt(x_244);
  let x_247 : f32 = u_xlat66;
  let x_249 : vec4<f32> = u_xlat6;
  u_xlat27 = (vec3<f32>(x_247, x_247, x_247) * vec3<f32>(x_249.x, x_249.y, x_249.z));
  let x_254 : f32 = vs_INTERP4.y;
  u_xlat66 = (x_254 * 200.0f);
  let x_257 : f32 = u_xlat66;
  u_xlat66 = min(x_257, 1.0f);
  let x_259 : f32 = u_xlat66;
  let x_261 : vec4<f32> = u_xlat3;
  let x_263 : vec3<f32> = (vec3<f32>(x_259, x_259, x_259) * vec3<f32>(x_261.x, x_261.y, x_261.z));
  let x_264 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_263.x, x_263.y, x_263.z, x_264.w);
  let x_266 : vec3<f32> = vs_INTERP0;
  let x_273 : vec4<f32> = x_271.x_CascadeShadowSplitSpheres0;
  let x_276 : vec3<f32> = (x_266 + -(vec3<f32>(x_273.x, x_273.y, x_273.z)));
  let x_277 : vec4<f32> = u_xlat6;
  u_xlat6 = vec4<f32>(x_276.x, x_276.y, x_276.z, x_277.w);
  let x_280 : vec3<f32> = vs_INTERP0;
  let x_282 : vec4<f32> = x_271.x_CascadeShadowSplitSpheres1;
  let x_285 : vec3<f32> = (x_280 + -(vec3<f32>(x_282.x, x_282.y, x_282.z)));
  let x_286 : vec4<f32> = u_xlat7;
  u_xlat7 = vec4<f32>(x_285.x, x_285.y, x_285.z, x_286.w);
  let x_289 : vec3<f32> = vs_INTERP0;
  let x_292 : vec4<f32> = x_271.x_CascadeShadowSplitSpheres2;
  let x_295 : vec3<f32> = (x_289 + -(vec3<f32>(x_292.x, x_292.y, x_292.z)));
  let x_296 : vec4<f32> = u_xlat8;
  u_xlat8 = vec4<f32>(x_295.x, x_295.y, x_295.z, x_296.w);
  let x_299 : vec3<f32> = vs_INTERP0;
  let x_302 : vec4<f32> = x_271.x_CascadeShadowSplitSpheres3;
  let x_305 : vec3<f32> = (x_299 + -(vec3<f32>(x_302.x, x_302.y, x_302.z)));
  let x_306 : vec4<f32> = u_xlat9;
  u_xlat9 = vec4<f32>(x_305.x, x_305.y, x_305.z, x_306.w);
  let x_308 : vec4<f32> = u_xlat6;
  let x_310 : vec4<f32> = u_xlat6;
  u_xlat6.x = dot(vec3<f32>(x_308.x, x_308.y, x_308.z), vec3<f32>(x_310.x, x_310.y, x_310.z));
  let x_314 : vec4<f32> = u_xlat7;
  let x_316 : vec4<f32> = u_xlat7;
  u_xlat6.y = dot(vec3<f32>(x_314.x, x_314.y, x_314.z), vec3<f32>(x_316.x, x_316.y, x_316.z));
  let x_320 : vec4<f32> = u_xlat8;
  let x_322 : vec4<f32> = u_xlat8;
  u_xlat6.z = dot(vec3<f32>(x_320.x, x_320.y, x_320.z), vec3<f32>(x_322.x, x_322.y, x_322.z));
  let x_326 : vec4<f32> = u_xlat9;
  let x_328 : vec4<f32> = u_xlat9;
  u_xlat6.w = dot(vec3<f32>(x_326.x, x_326.y, x_326.z), vec3<f32>(x_328.x, x_328.y, x_328.z));
  let x_335 : vec4<f32> = u_xlat6;
  let x_338 : vec4<f32> = x_271.x_CascadeShadowSplitSphereRadii;
  u_xlatb6 = (x_335 < x_338);
  let x_341 : bool = u_xlatb6.x;
  u_xlat7.x = select(0.0f, 1.0f, x_341);
  let x_345 : bool = u_xlatb6.y;
  u_xlat7.y = select(0.0f, 1.0f, x_345);
  let x_349 : bool = u_xlatb6.z;
  u_xlat7.z = select(0.0f, 1.0f, x_349);
  let x_353 : bool = u_xlatb6.w;
  u_xlat7.w = select(0.0f, 1.0f, x_353);
  let x_357 : bool = u_xlatb6.x;
  u_xlat6.x = select(-0.0f, -1.0f, x_357);
  let x_362 : bool = u_xlatb6.y;
  u_xlat6.y = select(-0.0f, -1.0f, x_362);
  let x_366 : bool = u_xlatb6.z;
  u_xlat6.z = select(-0.0f, -1.0f, x_366);
  let x_369 : vec4<f32> = u_xlat6;
  let x_371 : vec4<f32> = u_xlat7;
  let x_373 : vec3<f32> = (vec3<f32>(x_369.x, x_369.y, x_369.z) + vec3<f32>(x_371.y, x_371.z, x_371.w));
  let x_374 : vec4<f32> = u_xlat6;
  u_xlat6 = vec4<f32>(x_373.x, x_373.y, x_373.z, x_374.w);
  let x_376 : vec4<f32> = u_xlat6;
  let x_379 : vec3<f32> = max(vec3<f32>(x_376.x, x_376.y, x_376.z), vec3<f32>(0.0f, 0.0f, 0.0f));
  let x_380 : vec4<f32> = u_xlat7;
  u_xlat7 = vec4<f32>(x_380.x, x_379.x, x_379.y, x_379.z);
  let x_382 : vec4<f32> = u_xlat7;
  u_xlat66 = dot(x_382, vec4<f32>(4.0f, 3.0f, 2.0f, 1.0f));
  let x_387 : f32 = u_xlat66;
  u_xlat66 = (-(x_387) + 4.0f);
  let x_391 : f32 = u_xlat66;
  u_xlatu66 = u32(x_391);
  let x_394 : u32 = u_xlatu66;
  u_xlati66 = (bitcast<i32>(x_394) << bitcast<u32>(2i));
  let x_397 : vec3<f32> = vs_INTERP0;
  let x_399 : i32 = u_xlati66;
  let x_402 : i32 = u_xlati66;
  let x_406 : vec4<f32> = x_271.x_MainLightWorldToShadow[((x_399 + 1i) / 4i)][((x_402 + 1i) % 4i)];
  let x_408 : vec3<f32> = (vec3<f32>(x_397.y, x_397.y, x_397.y) * vec3<f32>(x_406.x, x_406.y, x_406.z));
  let x_409 : vec4<f32> = u_xlat6;
  u_xlat6 = vec4<f32>(x_408.x, x_408.y, x_408.z, x_409.w);
  let x_411 : i32 = u_xlati66;
  let x_413 : i32 = u_xlati66;
  let x_416 : vec4<f32> = x_271.x_MainLightWorldToShadow[(x_411 / 4i)][(x_413 % 4i)];
  let x_418 : vec3<f32> = vs_INTERP0;
  let x_421 : vec4<f32> = u_xlat6;
  let x_423 : vec3<f32> = ((vec3<f32>(x_416.x, x_416.y, x_416.z) * vec3<f32>(x_418.x, x_418.x, x_418.x)) + vec3<f32>(x_421.x, x_421.y, x_421.z));
  let x_424 : vec4<f32> = u_xlat6;
  u_xlat6 = vec4<f32>(x_423.x, x_423.y, x_423.z, x_424.w);
  let x_426 : i32 = u_xlati66;
  let x_429 : i32 = u_xlati66;
  let x_433 : vec4<f32> = x_271.x_MainLightWorldToShadow[((x_426 + 2i) / 4i)][((x_429 + 2i) % 4i)];
  let x_435 : vec3<f32> = vs_INTERP0;
  let x_438 : vec4<f32> = u_xlat6;
  let x_440 : vec3<f32> = ((vec3<f32>(x_433.x, x_433.y, x_433.z) * vec3<f32>(x_435.z, x_435.z, x_435.z)) + vec3<f32>(x_438.x, x_438.y, x_438.z));
  let x_441 : vec4<f32> = u_xlat6;
  u_xlat6 = vec4<f32>(x_440.x, x_440.y, x_440.z, x_441.w);
  let x_443 : vec4<f32> = u_xlat6;
  let x_445 : i32 = u_xlati66;
  let x_448 : i32 = u_xlati66;
  let x_452 : vec4<f32> = x_271.x_MainLightWorldToShadow[((x_445 + 3i) / 4i)][((x_448 + 3i) % 4i)];
  let x_454 : vec3<f32> = (vec3<f32>(x_443.x, x_443.y, x_443.z) + vec3<f32>(x_452.x, x_452.y, x_452.z));
  let x_455 : vec4<f32> = u_xlat6;
  u_xlat6 = vec4<f32>(x_454.x, x_454.y, x_454.z, x_455.w);
  let x_459 : f32 = x_271.x_MainLightShadowParams.y;
  u_xlatb66 = (0.0f < x_459);
  let x_461 : bool = u_xlatb66;
  if (x_461) {
    let x_466 : f32 = x_271.x_MainLightShadowParams.y;
    u_xlatb67 = (x_466 == 1.0f);
    let x_468 : bool = u_xlatb67;
    if (x_468) {
      let x_471 : vec4<f32> = u_xlat6;
      let x_475 : vec4<f32> = x_271.x_MainLightShadowOffset0;
      u_xlat7 = (vec4<f32>(x_471.x, x_471.y, x_471.x, x_471.y) + x_475);
      let x_478 : vec4<f32> = u_xlat7;
      let x_479 : vec2<f32> = vec2<f32>(x_478.x, x_478.y);
      let x_481 : f32 = u_xlat6.z;
      txVec0 = vec3<f32>(x_479.x, x_479.y, x_481);
      let x_493 : vec3<f32> = txVec0;
      let x_495 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_493.xy, x_493.z);
      u_xlat8.x = x_495;
      let x_498 : vec4<f32> = u_xlat7;
      let x_499 : vec2<f32> = vec2<f32>(x_498.z, x_498.w);
      let x_501 : f32 = u_xlat6.z;
      txVec1 = vec3<f32>(x_499.x, x_499.y, x_501);
      let x_508 : vec3<f32> = txVec1;
      let x_510 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_508.xy, x_508.z);
      u_xlat8.y = x_510;
      let x_512 : vec4<f32> = u_xlat6;
      let x_515 : vec4<f32> = x_271.x_MainLightShadowOffset1;
      u_xlat7 = (vec4<f32>(x_512.x, x_512.y, x_512.x, x_512.y) + x_515);
      let x_518 : vec4<f32> = u_xlat7;
      let x_519 : vec2<f32> = vec2<f32>(x_518.x, x_518.y);
      let x_521 : f32 = u_xlat6.z;
      txVec2 = vec3<f32>(x_519.x, x_519.y, x_521);
      let x_528 : vec3<f32> = txVec2;
      let x_530 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_528.xy, x_528.z);
      u_xlat8.z = x_530;
      let x_533 : vec4<f32> = u_xlat7;
      let x_534 : vec2<f32> = vec2<f32>(x_533.z, x_533.w);
      let x_536 : f32 = u_xlat6.z;
      txVec3 = vec3<f32>(x_534.x, x_534.y, x_536);
      let x_543 : vec3<f32> = txVec3;
      let x_545 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_543.xy, x_543.z);
      u_xlat8.w = x_545;
      let x_547 : vec4<f32> = u_xlat8;
      u_xlat67 = dot(x_547, vec4<f32>(0.25f, 0.25f, 0.25f, 0.25f));
    } else {
      let x_554 : f32 = x_271.x_MainLightShadowParams.y;
      u_xlatb68 = (x_554 == 2.0f);
      let x_556 : bool = u_xlatb68;
      if (x_556) {
        let x_559 : vec4<f32> = u_xlat6;
        let x_562 : vec4<f32> = x_271.x_MainLightShadowmapSize;
        let x_567 : vec2<f32> = ((vec2<f32>(x_559.x, x_559.y) * vec2<f32>(x_562.z, x_562.w)) + vec2<f32>(0.5f, 0.5f));
        let x_568 : vec4<f32> = u_xlat7;
        u_xlat7 = vec4<f32>(x_567.x, x_567.y, x_568.z, x_568.w);
        let x_570 : vec4<f32> = u_xlat7;
        let x_572 : vec2<f32> = floor(vec2<f32>(x_570.x, x_570.y));
        let x_573 : vec4<f32> = u_xlat7;
        u_xlat7 = vec4<f32>(x_572.x, x_572.y, x_573.z, x_573.w);
        let x_577 : vec4<f32> = u_xlat6;
        let x_580 : vec4<f32> = x_271.x_MainLightShadowmapSize;
        let x_583 : vec4<f32> = u_xlat7;
        u_xlat51 = ((vec2<f32>(x_577.x, x_577.y) * vec2<f32>(x_580.z, x_580.w)) + -(vec2<f32>(x_583.x, x_583.y)));
        let x_587 : vec2<f32> = u_xlat51;
        u_xlat8 = (vec4<f32>(x_587.x, x_587.x, x_587.y, x_587.y) + vec4<f32>(0.5f, 1.0f, 0.5f, 1.0f));
        let x_591 : vec4<f32> = u_xlat8;
        let x_593 : vec4<f32> = u_xlat8;
        u_xlat9 = (vec4<f32>(x_591.x, x_591.x, x_591.z, x_591.z) * vec4<f32>(x_593.x, x_593.x, x_593.z, x_593.z));
        let x_596 : vec4<f32> = u_xlat9;
        let x_600 : vec2<f32> = (vec2<f32>(x_596.y, x_596.w) * vec2<f32>(0.079999998f, 0.079999998f));
        let x_601 : vec4<f32> = u_xlat8;
        u_xlat8 = vec4<f32>(x_600.x, x_601.y, x_600.y, x_601.w);
        let x_603 : vec4<f32> = u_xlat9;
        let x_606 : vec2<f32> = u_xlat51;
        let x_608 : vec2<f32> = ((vec2<f32>(x_603.x, x_603.z) * vec2<f32>(0.5f, 0.5f)) + -(x_606));
        let x_609 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_608.x, x_608.y, x_609.z, x_609.w);
        let x_612 : vec2<f32> = u_xlat51;
        u_xlat53 = (-(x_612) + vec2<f32>(1.0f, 1.0f));
        let x_617 : vec2<f32> = u_xlat51;
        let x_619 : vec2<f32> = min(x_617, vec2<f32>(0.0f, 0.0f));
        let x_620 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_619.x, x_619.y, x_620.z, x_620.w);
        let x_622 : vec4<f32> = u_xlat10;
        let x_625 : vec4<f32> = u_xlat10;
        let x_628 : vec2<f32> = u_xlat53;
        let x_629 : vec2<f32> = ((-(vec2<f32>(x_622.x, x_622.y)) * vec2<f32>(x_625.x, x_625.y)) + x_628);
        let x_630 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_629.x, x_629.y, x_630.z, x_630.w);
        let x_632 : vec2<f32> = u_xlat51;
        u_xlat51 = max(x_632, vec2<f32>(0.0f, 0.0f));
        let x_634 : vec2<f32> = u_xlat51;
        let x_636 : vec2<f32> = u_xlat51;
        let x_638 : vec4<f32> = u_xlat8;
        u_xlat51 = ((-(x_634) * x_636) + vec2<f32>(x_638.y, x_638.w));
        let x_641 : vec4<f32> = u_xlat10;
        let x_643 : vec2<f32> = (vec2<f32>(x_641.x, x_641.y) + vec2<f32>(1.0f, 1.0f));
        let x_644 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_643.x, x_643.y, x_644.z, x_644.w);
        let x_646 : vec2<f32> = u_xlat51;
        u_xlat51 = (x_646 + vec2<f32>(1.0f, 1.0f));
        let x_649 : vec4<f32> = u_xlat9;
        let x_653 : vec2<f32> = (vec2<f32>(x_649.x, x_649.y) * vec2<f32>(0.159999996f, 0.159999996f));
        let x_654 : vec4<f32> = u_xlat11;
        u_xlat11 = vec4<f32>(x_653.x, x_653.y, x_654.z, x_654.w);
        let x_656 : vec2<f32> = u_xlat53;
        let x_657 : vec2<f32> = (x_656 * vec2<f32>(0.159999996f, 0.159999996f));
        let x_658 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_657.x, x_657.y, x_658.z, x_658.w);
        let x_660 : vec4<f32> = u_xlat10;
        let x_662 : vec2<f32> = (vec2<f32>(x_660.x, x_660.y) * vec2<f32>(0.159999996f, 0.159999996f));
        let x_663 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_662.x, x_662.y, x_663.z, x_663.w);
        let x_666 : vec2<f32> = u_xlat51;
        let x_667 : vec2<f32> = (x_666 * vec2<f32>(0.159999996f, 0.159999996f));
        let x_668 : vec4<f32> = u_xlat12;
        u_xlat12 = vec4<f32>(x_667.x, x_667.y, x_668.z, x_668.w);
        let x_670 : vec4<f32> = u_xlat8;
        u_xlat51 = (vec2<f32>(x_670.y, x_670.w) * vec2<f32>(0.159999996f, 0.159999996f));
        let x_674 : f32 = u_xlat10.x;
        u_xlat11.z = x_674;
        let x_677 : f32 = u_xlat51.x;
        u_xlat11.w = x_677;
        let x_680 : f32 = u_xlat12.x;
        u_xlat9.z = x_680;
        let x_683 : f32 = u_xlat8.x;
        u_xlat9.w = x_683;
        let x_686 : vec4<f32> = u_xlat9;
        let x_688 : vec4<f32> = u_xlat11;
        u_xlat13 = (vec4<f32>(x_686.z, x_686.w, x_686.x, x_686.z) + vec4<f32>(x_688.z, x_688.w, x_688.x, x_688.z));
        let x_692 : f32 = u_xlat11.y;
        u_xlat10.z = x_692;
        let x_695 : f32 = u_xlat51.y;
        u_xlat10.w = x_695;
        let x_698 : f32 = u_xlat9.y;
        u_xlat12.z = x_698;
        let x_701 : f32 = u_xlat8.z;
        u_xlat12.w = x_701;
        let x_703 : vec4<f32> = u_xlat10;
        let x_705 : vec4<f32> = u_xlat12;
        let x_707 : vec3<f32> = (vec3<f32>(x_703.z, x_703.y, x_703.w) + vec3<f32>(x_705.z, x_705.y, x_705.w));
        let x_708 : vec4<f32> = u_xlat8;
        u_xlat8 = vec4<f32>(x_707.x, x_707.y, x_707.z, x_708.w);
        let x_710 : vec4<f32> = u_xlat9;
        let x_712 : vec4<f32> = u_xlat13;
        let x_714 : vec3<f32> = (vec3<f32>(x_710.x, x_710.z, x_710.w) / vec3<f32>(x_712.z, x_712.w, x_712.y));
        let x_715 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_714.x, x_714.y, x_714.z, x_715.w);
        let x_717 : vec4<f32> = u_xlat9;
        let x_723 : vec3<f32> = (vec3<f32>(x_717.x, x_717.y, x_717.z) + vec3<f32>(-2.5f, -0.5f, 1.5f));
        let x_724 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_723.x, x_723.y, x_723.z, x_724.w);
        let x_726 : vec4<f32> = u_xlat12;
        let x_728 : vec4<f32> = u_xlat8;
        let x_730 : vec3<f32> = (vec3<f32>(x_726.z, x_726.y, x_726.w) / vec3<f32>(x_728.x, x_728.y, x_728.z));
        let x_731 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_730.x, x_730.y, x_730.z, x_731.w);
        let x_733 : vec4<f32> = u_xlat10;
        let x_735 : vec3<f32> = (vec3<f32>(x_733.x, x_733.y, x_733.z) + vec3<f32>(-2.5f, -0.5f, 1.5f));
        let x_736 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_735.x, x_735.y, x_735.z, x_736.w);
        let x_738 : vec4<f32> = u_xlat9;
        let x_741 : vec4<f32> = x_271.x_MainLightShadowmapSize;
        let x_743 : vec3<f32> = (vec3<f32>(x_738.y, x_738.x, x_738.z) * vec3<f32>(x_741.x, x_741.x, x_741.x));
        let x_744 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_743.x, x_743.y, x_743.z, x_744.w);
        let x_746 : vec4<f32> = u_xlat10;
        let x_749 : vec4<f32> = x_271.x_MainLightShadowmapSize;
        let x_751 : vec3<f32> = (vec3<f32>(x_746.x, x_746.y, x_746.z) * vec3<f32>(x_749.y, x_749.y, x_749.y));
        let x_752 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_751.x, x_751.y, x_751.z, x_752.w);
        let x_755 : f32 = u_xlat10.x;
        u_xlat9.w = x_755;
        let x_757 : vec4<f32> = u_xlat7;
        let x_760 : vec4<f32> = x_271.x_MainLightShadowmapSize;
        let x_763 : vec4<f32> = u_xlat9;
        u_xlat11 = ((vec4<f32>(x_757.x, x_757.y, x_757.x, x_757.y) * vec4<f32>(x_760.x, x_760.y, x_760.x, x_760.y)) + vec4<f32>(x_763.y, x_763.w, x_763.x, x_763.w));
        let x_766 : vec4<f32> = u_xlat7;
        let x_769 : vec4<f32> = x_271.x_MainLightShadowmapSize;
        let x_772 : vec4<f32> = u_xlat9;
        u_xlat51 = ((vec2<f32>(x_766.x, x_766.y) * vec2<f32>(x_769.x, x_769.y)) + vec2<f32>(x_772.z, x_772.w));
        let x_776 : f32 = u_xlat9.y;
        u_xlat10.w = x_776;
        let x_778 : vec4<f32> = u_xlat10;
        let x_779 : vec2<f32> = vec2<f32>(x_778.y, x_778.z);
        let x_780 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_780.x, x_779.x, x_780.z, x_779.y);
        let x_782 : vec4<f32> = u_xlat7;
        let x_785 : vec4<f32> = x_271.x_MainLightShadowmapSize;
        let x_788 : vec4<f32> = u_xlat9;
        u_xlat12 = ((vec4<f32>(x_782.x, x_782.y, x_782.x, x_782.y) * vec4<f32>(x_785.x, x_785.y, x_785.x, x_785.y)) + vec4<f32>(x_788.x, x_788.y, x_788.z, x_788.y));
        let x_791 : vec4<f32> = u_xlat7;
        let x_794 : vec4<f32> = x_271.x_MainLightShadowmapSize;
        let x_797 : vec4<f32> = u_xlat10;
        u_xlat10 = ((vec4<f32>(x_791.x, x_791.y, x_791.x, x_791.y) * vec4<f32>(x_794.x, x_794.y, x_794.x, x_794.y)) + vec4<f32>(x_797.w, x_797.y, x_797.w, x_797.z));
        let x_800 : vec4<f32> = u_xlat7;
        let x_803 : vec4<f32> = x_271.x_MainLightShadowmapSize;
        let x_806 : vec4<f32> = u_xlat9;
        u_xlat9 = ((vec4<f32>(x_800.x, x_800.y, x_800.x, x_800.y) * vec4<f32>(x_803.x, x_803.y, x_803.x, x_803.y)) + vec4<f32>(x_806.x, x_806.w, x_806.z, x_806.w));
        let x_810 : vec4<f32> = u_xlat8;
        let x_812 : vec4<f32> = u_xlat13;
        u_xlat14 = (vec4<f32>(x_810.x, x_810.x, x_810.x, x_810.y) * vec4<f32>(x_812.z, x_812.w, x_812.y, x_812.z));
        let x_816 : vec4<f32> = u_xlat8;
        let x_818 : vec4<f32> = u_xlat13;
        u_xlat15 = (vec4<f32>(x_816.y, x_816.y, x_816.z, x_816.z) * x_818);
        let x_822 : f32 = u_xlat8.z;
        let x_824 : f32 = u_xlat13.y;
        u_xlat68 = (x_822 * x_824);
        let x_827 : vec4<f32> = u_xlat11;
        let x_828 : vec2<f32> = vec2<f32>(x_827.x, x_827.y);
        let x_830 : f32 = u_xlat6.z;
        txVec4 = vec3<f32>(x_828.x, x_828.y, x_830);
        let x_838 : vec3<f32> = txVec4;
        let x_840 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_838.xy, x_838.z);
        u_xlat70 = x_840;
        let x_842 : vec4<f32> = u_xlat11;
        let x_843 : vec2<f32> = vec2<f32>(x_842.z, x_842.w);
        let x_845 : f32 = u_xlat6.z;
        txVec5 = vec3<f32>(x_843.x, x_843.y, x_845);
        let x_853 : vec3<f32> = txVec5;
        let x_855 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_853.xy, x_853.z);
        u_xlat72 = x_855;
        let x_856 : f32 = u_xlat72;
        let x_858 : f32 = u_xlat14.y;
        u_xlat72 = (x_856 * x_858);
        let x_861 : f32 = u_xlat14.x;
        let x_862 : f32 = u_xlat70;
        let x_864 : f32 = u_xlat72;
        u_xlat70 = ((x_861 * x_862) + x_864);
        let x_867 : vec2<f32> = u_xlat51;
        let x_869 : f32 = u_xlat6.z;
        txVec6 = vec3<f32>(x_867.x, x_867.y, x_869);
        let x_876 : vec3<f32> = txVec6;
        let x_878 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_876.xy, x_876.z);
        u_xlat72 = x_878;
        let x_880 : f32 = u_xlat14.z;
        let x_881 : f32 = u_xlat72;
        let x_883 : f32 = u_xlat70;
        u_xlat70 = ((x_880 * x_881) + x_883);
        let x_886 : vec4<f32> = u_xlat10;
        let x_887 : vec2<f32> = vec2<f32>(x_886.x, x_886.y);
        let x_889 : f32 = u_xlat6.z;
        txVec7 = vec3<f32>(x_887.x, x_887.y, x_889);
        let x_896 : vec3<f32> = txVec7;
        let x_898 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_896.xy, x_896.z);
        u_xlat72 = x_898;
        let x_900 : f32 = u_xlat14.w;
        let x_901 : f32 = u_xlat72;
        let x_903 : f32 = u_xlat70;
        u_xlat70 = ((x_900 * x_901) + x_903);
        let x_906 : vec4<f32> = u_xlat12;
        let x_907 : vec2<f32> = vec2<f32>(x_906.x, x_906.y);
        let x_909 : f32 = u_xlat6.z;
        txVec8 = vec3<f32>(x_907.x, x_907.y, x_909);
        let x_916 : vec3<f32> = txVec8;
        let x_918 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_916.xy, x_916.z);
        u_xlat72 = x_918;
        let x_920 : f32 = u_xlat15.x;
        let x_921 : f32 = u_xlat72;
        let x_923 : f32 = u_xlat70;
        u_xlat70 = ((x_920 * x_921) + x_923);
        let x_926 : vec4<f32> = u_xlat12;
        let x_927 : vec2<f32> = vec2<f32>(x_926.z, x_926.w);
        let x_929 : f32 = u_xlat6.z;
        txVec9 = vec3<f32>(x_927.x, x_927.y, x_929);
        let x_936 : vec3<f32> = txVec9;
        let x_938 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_936.xy, x_936.z);
        u_xlat72 = x_938;
        let x_940 : f32 = u_xlat15.y;
        let x_941 : f32 = u_xlat72;
        let x_943 : f32 = u_xlat70;
        u_xlat70 = ((x_940 * x_941) + x_943);
        let x_946 : vec4<f32> = u_xlat10;
        let x_947 : vec2<f32> = vec2<f32>(x_946.z, x_946.w);
        let x_949 : f32 = u_xlat6.z;
        txVec10 = vec3<f32>(x_947.x, x_947.y, x_949);
        let x_956 : vec3<f32> = txVec10;
        let x_958 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_956.xy, x_956.z);
        u_xlat72 = x_958;
        let x_960 : f32 = u_xlat15.z;
        let x_961 : f32 = u_xlat72;
        let x_963 : f32 = u_xlat70;
        u_xlat70 = ((x_960 * x_961) + x_963);
        let x_966 : vec4<f32> = u_xlat9;
        let x_967 : vec2<f32> = vec2<f32>(x_966.x, x_966.y);
        let x_969 : f32 = u_xlat6.z;
        txVec11 = vec3<f32>(x_967.x, x_967.y, x_969);
        let x_976 : vec3<f32> = txVec11;
        let x_978 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_976.xy, x_976.z);
        u_xlat72 = x_978;
        let x_980 : f32 = u_xlat15.w;
        let x_981 : f32 = u_xlat72;
        let x_983 : f32 = u_xlat70;
        u_xlat70 = ((x_980 * x_981) + x_983);
        let x_986 : vec4<f32> = u_xlat9;
        let x_987 : vec2<f32> = vec2<f32>(x_986.z, x_986.w);
        let x_989 : f32 = u_xlat6.z;
        txVec12 = vec3<f32>(x_987.x, x_987.y, x_989);
        let x_996 : vec3<f32> = txVec12;
        let x_998 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_996.xy, x_996.z);
        u_xlat72 = x_998;
        let x_999 : f32 = u_xlat68;
        let x_1000 : f32 = u_xlat72;
        let x_1002 : f32 = u_xlat70;
        u_xlat67 = ((x_999 * x_1000) + x_1002);
      } else {
        let x_1005 : vec4<f32> = u_xlat6;
        let x_1008 : vec4<f32> = x_271.x_MainLightShadowmapSize;
        let x_1011 : vec2<f32> = ((vec2<f32>(x_1005.x, x_1005.y) * vec2<f32>(x_1008.z, x_1008.w)) + vec2<f32>(0.5f, 0.5f));
        let x_1012 : vec4<f32> = u_xlat7;
        u_xlat7 = vec4<f32>(x_1011.x, x_1011.y, x_1012.z, x_1012.w);
        let x_1014 : vec4<f32> = u_xlat7;
        let x_1016 : vec2<f32> = floor(vec2<f32>(x_1014.x, x_1014.y));
        let x_1017 : vec4<f32> = u_xlat7;
        u_xlat7 = vec4<f32>(x_1016.x, x_1016.y, x_1017.z, x_1017.w);
        let x_1019 : vec4<f32> = u_xlat6;
        let x_1022 : vec4<f32> = x_271.x_MainLightShadowmapSize;
        let x_1025 : vec4<f32> = u_xlat7;
        u_xlat51 = ((vec2<f32>(x_1019.x, x_1019.y) * vec2<f32>(x_1022.z, x_1022.w)) + -(vec2<f32>(x_1025.x, x_1025.y)));
        let x_1029 : vec2<f32> = u_xlat51;
        u_xlat8 = (vec4<f32>(x_1029.x, x_1029.x, x_1029.y, x_1029.y) + vec4<f32>(0.5f, 1.0f, 0.5f, 1.0f));
        let x_1032 : vec4<f32> = u_xlat8;
        let x_1034 : vec4<f32> = u_xlat8;
        u_xlat9 = (vec4<f32>(x_1032.x, x_1032.x, x_1032.z, x_1032.z) * vec4<f32>(x_1034.x, x_1034.x, x_1034.z, x_1034.z));
        let x_1037 : vec4<f32> = u_xlat9;
        let x_1041 : vec2<f32> = (vec2<f32>(x_1037.y, x_1037.w) * vec2<f32>(0.040816002f, 0.040816002f));
        let x_1042 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_1042.x, x_1041.x, x_1042.z, x_1041.y);
        let x_1044 : vec4<f32> = u_xlat9;
        let x_1047 : vec2<f32> = u_xlat51;
        let x_1049 : vec2<f32> = ((vec2<f32>(x_1044.x, x_1044.z) * vec2<f32>(0.5f, 0.5f)) + -(x_1047));
        let x_1050 : vec4<f32> = u_xlat8;
        u_xlat8 = vec4<f32>(x_1049.x, x_1050.y, x_1049.y, x_1050.w);
        let x_1052 : vec2<f32> = u_xlat51;
        let x_1054 : vec2<f32> = (-(x_1052) + vec2<f32>(1.0f, 1.0f));
        let x_1055 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_1054.x, x_1054.y, x_1055.z, x_1055.w);
        let x_1057 : vec2<f32> = u_xlat51;
        u_xlat53 = min(x_1057, vec2<f32>(0.0f, 0.0f));
        let x_1059 : vec2<f32> = u_xlat53;
        let x_1061 : vec2<f32> = u_xlat53;
        let x_1063 : vec4<f32> = u_xlat9;
        let x_1065 : vec2<f32> = ((-(x_1059) * x_1061) + vec2<f32>(x_1063.x, x_1063.y));
        let x_1066 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_1065.x, x_1065.y, x_1066.z, x_1066.w);
        let x_1068 : vec2<f32> = u_xlat51;
        u_xlat53 = max(x_1068, vec2<f32>(0.0f, 0.0f));
        let x_1071 : vec2<f32> = u_xlat53;
        let x_1073 : vec2<f32> = u_xlat53;
        let x_1075 : vec4<f32> = u_xlat8;
        let x_1077 : vec2<f32> = ((-(x_1071) * x_1073) + vec2<f32>(x_1075.y, x_1075.w));
        let x_1078 : vec3<f32> = u_xlat30;
        u_xlat30 = vec3<f32>(x_1077.x, x_1078.y, x_1077.y);
        let x_1080 : vec4<f32> = u_xlat9;
        let x_1083 : vec2<f32> = (vec2<f32>(x_1080.x, x_1080.y) + vec2<f32>(2.0f, 2.0f));
        let x_1084 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_1083.x, x_1083.y, x_1084.z, x_1084.w);
        let x_1086 : vec3<f32> = u_xlat30;
        let x_1088 : vec2<f32> = (vec2<f32>(x_1086.x, x_1086.z) + vec2<f32>(2.0f, 2.0f));
        let x_1089 : vec4<f32> = u_xlat8;
        u_xlat8 = vec4<f32>(x_1089.x, x_1088.x, x_1089.z, x_1088.y);
        let x_1092 : f32 = u_xlat8.y;
        u_xlat11.z = (x_1092 * 0.081632003f);
        let x_1096 : vec4<f32> = u_xlat8;
        let x_1099 : vec3<f32> = (vec3<f32>(x_1096.z, x_1096.x, x_1096.w) * vec3<f32>(0.081632003f, 0.081632003f, 0.081632003f));
        let x_1100 : vec4<f32> = u_xlat12;
        u_xlat12 = vec4<f32>(x_1099.x, x_1099.y, x_1099.z, x_1100.w);
        let x_1102 : vec4<f32> = u_xlat9;
        let x_1105 : vec2<f32> = (vec2<f32>(x_1102.x, x_1102.y) * vec2<f32>(0.081632003f, 0.081632003f));
        let x_1106 : vec4<f32> = u_xlat8;
        u_xlat8 = vec4<f32>(x_1105.x, x_1105.y, x_1106.z, x_1106.w);
        let x_1109 : f32 = u_xlat12.y;
        u_xlat11.x = x_1109;
        let x_1111 : vec2<f32> = u_xlat51;
        let x_1118 : vec2<f32> = ((vec2<f32>(x_1111.x, x_1111.x) * vec2<f32>(-0.081632003f, 0.081632003f)) + vec2<f32>(0.163264006f, 0.081632003f));
        let x_1119 : vec4<f32> = u_xlat11;
        u_xlat11 = vec4<f32>(x_1119.x, x_1118.x, x_1119.z, x_1118.y);
        let x_1121 : vec2<f32> = u_xlat51;
        let x_1125 : vec2<f32> = ((vec2<f32>(x_1121.x, x_1121.x) * vec2<f32>(-0.081632003f, 0.081632003f)) + vec2<f32>(0.081632003f, 0.163264006f));
        let x_1126 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_1125.x, x_1126.y, x_1125.y, x_1126.w);
        let x_1129 : f32 = u_xlat8.x;
        u_xlat9.y = x_1129;
        let x_1132 : f32 = u_xlat10.y;
        u_xlat9.w = x_1132;
        let x_1134 : vec4<f32> = u_xlat9;
        let x_1135 : vec4<f32> = u_xlat11;
        u_xlat11 = (x_1134 + x_1135);
        let x_1137 : vec2<f32> = u_xlat51;
        let x_1140 : vec2<f32> = ((vec2<f32>(x_1137.y, x_1137.y) * vec2<f32>(-0.081632003f, 0.081632003f)) + vec2<f32>(0.163264006f, 0.081632003f));
        let x_1141 : vec4<f32> = u_xlat12;
        u_xlat12 = vec4<f32>(x_1141.x, x_1140.x, x_1141.z, x_1140.y);
        let x_1143 : vec2<f32> = u_xlat51;
        let x_1146 : vec2<f32> = ((vec2<f32>(x_1143.y, x_1143.y) * vec2<f32>(-0.081632003f, 0.081632003f)) + vec2<f32>(0.081632003f, 0.163264006f));
        let x_1147 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_1146.x, x_1147.y, x_1146.y, x_1147.w);
        let x_1150 : f32 = u_xlat8.y;
        u_xlat10.y = x_1150;
        let x_1152 : vec4<f32> = u_xlat10;
        let x_1153 : vec4<f32> = u_xlat12;
        u_xlat8 = (x_1152 + x_1153);
        let x_1155 : vec4<f32> = u_xlat9;
        let x_1156 : vec4<f32> = u_xlat11;
        u_xlat9 = (x_1155 / x_1156);
        let x_1158 : vec4<f32> = u_xlat9;
        u_xlat9 = (x_1158 + vec4<f32>(-3.5f, -1.5f, 0.5f, 2.5f));
        let x_1164 : vec4<f32> = u_xlat10;
        let x_1165 : vec4<f32> = u_xlat8;
        u_xlat10 = (x_1164 / x_1165);
        let x_1167 : vec4<f32> = u_xlat10;
        u_xlat10 = (x_1167 + vec4<f32>(-3.5f, -1.5f, 0.5f, 2.5f));
        let x_1169 : vec4<f32> = u_xlat9;
        let x_1172 : vec4<f32> = x_271.x_MainLightShadowmapSize;
        u_xlat9 = (vec4<f32>(x_1169.w, x_1169.x, x_1169.y, x_1169.z) * vec4<f32>(x_1172.x, x_1172.x, x_1172.x, x_1172.x));
        let x_1175 : vec4<f32> = u_xlat10;
        let x_1178 : vec4<f32> = x_271.x_MainLightShadowmapSize;
        u_xlat10 = (vec4<f32>(x_1175.x, x_1175.w, x_1175.y, x_1175.z) * vec4<f32>(x_1178.y, x_1178.y, x_1178.y, x_1178.y));
        let x_1181 : vec4<f32> = u_xlat9;
        let x_1182 : vec3<f32> = vec3<f32>(x_1181.y, x_1181.z, x_1181.w);
        let x_1183 : vec4<f32> = u_xlat12;
        u_xlat12 = vec4<f32>(x_1182.x, x_1183.y, x_1182.y, x_1182.z);
        let x_1186 : f32 = u_xlat10.x;
        u_xlat12.y = x_1186;
        let x_1188 : vec4<f32> = u_xlat7;
        let x_1191 : vec4<f32> = x_271.x_MainLightShadowmapSize;
        let x_1194 : vec4<f32> = u_xlat12;
        u_xlat13 = ((vec4<f32>(x_1188.x, x_1188.y, x_1188.x, x_1188.y) * vec4<f32>(x_1191.x, x_1191.y, x_1191.x, x_1191.y)) + vec4<f32>(x_1194.x, x_1194.y, x_1194.z, x_1194.y));
        let x_1197 : vec4<f32> = u_xlat7;
        let x_1200 : vec4<f32> = x_271.x_MainLightShadowmapSize;
        let x_1203 : vec4<f32> = u_xlat12;
        u_xlat51 = ((vec2<f32>(x_1197.x, x_1197.y) * vec2<f32>(x_1200.x, x_1200.y)) + vec2<f32>(x_1203.w, x_1203.y));
        let x_1207 : f32 = u_xlat12.y;
        u_xlat9.y = x_1207;
        let x_1210 : f32 = u_xlat10.z;
        u_xlat12.y = x_1210;
        let x_1212 : vec4<f32> = u_xlat7;
        let x_1215 : vec4<f32> = x_271.x_MainLightShadowmapSize;
        let x_1218 : vec4<f32> = u_xlat12;
        u_xlat14 = ((vec4<f32>(x_1212.x, x_1212.y, x_1212.x, x_1212.y) * vec4<f32>(x_1215.x, x_1215.y, x_1215.x, x_1215.y)) + vec4<f32>(x_1218.x, x_1218.y, x_1218.z, x_1218.y));
        let x_1221 : vec4<f32> = u_xlat7;
        let x_1224 : vec4<f32> = x_271.x_MainLightShadowmapSize;
        let x_1227 : vec4<f32> = u_xlat12;
        let x_1229 : vec2<f32> = ((vec2<f32>(x_1221.x, x_1221.y) * vec2<f32>(x_1224.x, x_1224.y)) + vec2<f32>(x_1227.w, x_1227.y));
        let x_1230 : vec4<f32> = u_xlat15;
        u_xlat15 = vec4<f32>(x_1229.x, x_1229.y, x_1230.z, x_1230.w);
        let x_1233 : f32 = u_xlat12.y;
        u_xlat9.z = x_1233;
        let x_1236 : vec4<f32> = u_xlat7;
        let x_1239 : vec4<f32> = x_271.x_MainLightShadowmapSize;
        let x_1242 : vec4<f32> = u_xlat9;
        u_xlat16 = ((vec4<f32>(x_1236.x, x_1236.y, x_1236.x, x_1236.y) * vec4<f32>(x_1239.x, x_1239.y, x_1239.x, x_1239.y)) + vec4<f32>(x_1242.x, x_1242.y, x_1242.x, x_1242.z));
        let x_1246 : f32 = u_xlat10.w;
        u_xlat12.y = x_1246;
        let x_1249 : vec4<f32> = u_xlat7;
        let x_1252 : vec4<f32> = x_271.x_MainLightShadowmapSize;
        let x_1255 : vec4<f32> = u_xlat12;
        u_xlat17 = ((vec4<f32>(x_1249.x, x_1249.y, x_1249.x, x_1249.y) * vec4<f32>(x_1252.x, x_1252.y, x_1252.x, x_1252.y)) + vec4<f32>(x_1255.x, x_1255.y, x_1255.z, x_1255.y));
        let x_1259 : vec4<f32> = u_xlat7;
        let x_1262 : vec4<f32> = x_271.x_MainLightShadowmapSize;
        let x_1265 : vec4<f32> = u_xlat12;
        u_xlat31 = ((vec2<f32>(x_1259.x, x_1259.y) * vec2<f32>(x_1262.x, x_1262.y)) + vec2<f32>(x_1265.w, x_1265.y));
        let x_1269 : f32 = u_xlat12.y;
        u_xlat9.w = x_1269;
        let x_1272 : vec4<f32> = u_xlat7;
        let x_1275 : vec4<f32> = x_271.x_MainLightShadowmapSize;
        let x_1278 : vec4<f32> = u_xlat9;
        u_xlat59 = ((vec2<f32>(x_1272.x, x_1272.y) * vec2<f32>(x_1275.x, x_1275.y)) + vec2<f32>(x_1278.x, x_1278.w));
        let x_1281 : vec4<f32> = u_xlat12;
        let x_1282 : vec3<f32> = vec3<f32>(x_1281.x, x_1281.z, x_1281.w);
        let x_1283 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_1282.x, x_1283.y, x_1282.y, x_1282.z);
        let x_1285 : vec4<f32> = u_xlat7;
        let x_1288 : vec4<f32> = x_271.x_MainLightShadowmapSize;
        let x_1291 : vec4<f32> = u_xlat10;
        u_xlat12 = ((vec4<f32>(x_1285.x, x_1285.y, x_1285.x, x_1285.y) * vec4<f32>(x_1288.x, x_1288.y, x_1288.x, x_1288.y)) + vec4<f32>(x_1291.x, x_1291.y, x_1291.z, x_1291.y));
        let x_1295 : vec4<f32> = u_xlat7;
        let x_1298 : vec4<f32> = x_271.x_MainLightShadowmapSize;
        let x_1301 : vec4<f32> = u_xlat10;
        u_xlat54 = ((vec2<f32>(x_1295.x, x_1295.y) * vec2<f32>(x_1298.x, x_1298.y)) + vec2<f32>(x_1301.w, x_1301.y));
        let x_1305 : f32 = u_xlat9.x;
        u_xlat10.x = x_1305;
        let x_1307 : vec4<f32> = u_xlat7;
        let x_1310 : vec4<f32> = x_271.x_MainLightShadowmapSize;
        let x_1313 : vec4<f32> = u_xlat10;
        let x_1315 : vec2<f32> = ((vec2<f32>(x_1307.x, x_1307.y) * vec2<f32>(x_1310.x, x_1310.y)) + vec2<f32>(x_1313.x, x_1313.y));
        let x_1316 : vec4<f32> = u_xlat7;
        u_xlat7 = vec4<f32>(x_1315.x, x_1315.y, x_1316.z, x_1316.w);
        let x_1319 : vec4<f32> = u_xlat8;
        let x_1321 : vec4<f32> = u_xlat11;
        u_xlat18 = (vec4<f32>(x_1319.x, x_1319.x, x_1319.x, x_1319.x) * x_1321);
        let x_1324 : vec4<f32> = u_xlat8;
        let x_1326 : vec4<f32> = u_xlat11;
        u_xlat19 = (vec4<f32>(x_1324.y, x_1324.y, x_1324.y, x_1324.y) * x_1326);
        let x_1329 : vec4<f32> = u_xlat8;
        let x_1331 : vec4<f32> = u_xlat11;
        u_xlat20 = (vec4<f32>(x_1329.z, x_1329.z, x_1329.z, x_1329.z) * x_1331);
        let x_1333 : vec4<f32> = u_xlat8;
        let x_1335 : vec4<f32> = u_xlat11;
        u_xlat8 = (vec4<f32>(x_1333.w, x_1333.w, x_1333.w, x_1333.w) * x_1335);
        let x_1338 : vec4<f32> = u_xlat13;
        let x_1339 : vec2<f32> = vec2<f32>(x_1338.x, x_1338.y);
        let x_1341 : f32 = u_xlat6.z;
        txVec13 = vec3<f32>(x_1339.x, x_1339.y, x_1341);
        let x_1348 : vec3<f32> = txVec13;
        let x_1350 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1348.xy, x_1348.z);
        u_xlat68 = x_1350;
        let x_1352 : vec4<f32> = u_xlat13;
        let x_1353 : vec2<f32> = vec2<f32>(x_1352.z, x_1352.w);
        let x_1355 : f32 = u_xlat6.z;
        txVec14 = vec3<f32>(x_1353.x, x_1353.y, x_1355);
        let x_1362 : vec3<f32> = txVec14;
        let x_1364 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1362.xy, x_1362.z);
        u_xlat70 = x_1364;
        let x_1365 : f32 = u_xlat70;
        let x_1367 : f32 = u_xlat18.y;
        u_xlat70 = (x_1365 * x_1367);
        let x_1370 : f32 = u_xlat18.x;
        let x_1371 : f32 = u_xlat68;
        let x_1373 : f32 = u_xlat70;
        u_xlat68 = ((x_1370 * x_1371) + x_1373);
        let x_1376 : vec2<f32> = u_xlat51;
        let x_1378 : f32 = u_xlat6.z;
        txVec15 = vec3<f32>(x_1376.x, x_1376.y, x_1378);
        let x_1385 : vec3<f32> = txVec15;
        let x_1387 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1385.xy, x_1385.z);
        u_xlat70 = x_1387;
        let x_1389 : f32 = u_xlat18.z;
        let x_1390 : f32 = u_xlat70;
        let x_1392 : f32 = u_xlat68;
        u_xlat68 = ((x_1389 * x_1390) + x_1392);
        let x_1395 : vec4<f32> = u_xlat16;
        let x_1396 : vec2<f32> = vec2<f32>(x_1395.x, x_1395.y);
        let x_1398 : f32 = u_xlat6.z;
        txVec16 = vec3<f32>(x_1396.x, x_1396.y, x_1398);
        let x_1405 : vec3<f32> = txVec16;
        let x_1407 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1405.xy, x_1405.z);
        u_xlat70 = x_1407;
        let x_1409 : f32 = u_xlat18.w;
        let x_1410 : f32 = u_xlat70;
        let x_1412 : f32 = u_xlat68;
        u_xlat68 = ((x_1409 * x_1410) + x_1412);
        let x_1415 : vec4<f32> = u_xlat14;
        let x_1416 : vec2<f32> = vec2<f32>(x_1415.x, x_1415.y);
        let x_1418 : f32 = u_xlat6.z;
        txVec17 = vec3<f32>(x_1416.x, x_1416.y, x_1418);
        let x_1425 : vec3<f32> = txVec17;
        let x_1427 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1425.xy, x_1425.z);
        u_xlat70 = x_1427;
        let x_1429 : f32 = u_xlat19.x;
        let x_1430 : f32 = u_xlat70;
        let x_1432 : f32 = u_xlat68;
        u_xlat68 = ((x_1429 * x_1430) + x_1432);
        let x_1435 : vec4<f32> = u_xlat14;
        let x_1436 : vec2<f32> = vec2<f32>(x_1435.z, x_1435.w);
        let x_1438 : f32 = u_xlat6.z;
        txVec18 = vec3<f32>(x_1436.x, x_1436.y, x_1438);
        let x_1445 : vec3<f32> = txVec18;
        let x_1447 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1445.xy, x_1445.z);
        u_xlat70 = x_1447;
        let x_1449 : f32 = u_xlat19.y;
        let x_1450 : f32 = u_xlat70;
        let x_1452 : f32 = u_xlat68;
        u_xlat68 = ((x_1449 * x_1450) + x_1452);
        let x_1455 : vec4<f32> = u_xlat15;
        let x_1456 : vec2<f32> = vec2<f32>(x_1455.x, x_1455.y);
        let x_1458 : f32 = u_xlat6.z;
        txVec19 = vec3<f32>(x_1456.x, x_1456.y, x_1458);
        let x_1465 : vec3<f32> = txVec19;
        let x_1467 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1465.xy, x_1465.z);
        u_xlat70 = x_1467;
        let x_1469 : f32 = u_xlat19.z;
        let x_1470 : f32 = u_xlat70;
        let x_1472 : f32 = u_xlat68;
        u_xlat68 = ((x_1469 * x_1470) + x_1472);
        let x_1475 : vec4<f32> = u_xlat16;
        let x_1476 : vec2<f32> = vec2<f32>(x_1475.z, x_1475.w);
        let x_1478 : f32 = u_xlat6.z;
        txVec20 = vec3<f32>(x_1476.x, x_1476.y, x_1478);
        let x_1485 : vec3<f32> = txVec20;
        let x_1487 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1485.xy, x_1485.z);
        u_xlat70 = x_1487;
        let x_1489 : f32 = u_xlat19.w;
        let x_1490 : f32 = u_xlat70;
        let x_1492 : f32 = u_xlat68;
        u_xlat68 = ((x_1489 * x_1490) + x_1492);
        let x_1495 : vec4<f32> = u_xlat17;
        let x_1496 : vec2<f32> = vec2<f32>(x_1495.x, x_1495.y);
        let x_1498 : f32 = u_xlat6.z;
        txVec21 = vec3<f32>(x_1496.x, x_1496.y, x_1498);
        let x_1505 : vec3<f32> = txVec21;
        let x_1507 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1505.xy, x_1505.z);
        u_xlat70 = x_1507;
        let x_1509 : f32 = u_xlat20.x;
        let x_1510 : f32 = u_xlat70;
        let x_1512 : f32 = u_xlat68;
        u_xlat68 = ((x_1509 * x_1510) + x_1512);
        let x_1515 : vec4<f32> = u_xlat17;
        let x_1516 : vec2<f32> = vec2<f32>(x_1515.z, x_1515.w);
        let x_1518 : f32 = u_xlat6.z;
        txVec22 = vec3<f32>(x_1516.x, x_1516.y, x_1518);
        let x_1525 : vec3<f32> = txVec22;
        let x_1527 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1525.xy, x_1525.z);
        u_xlat70 = x_1527;
        let x_1529 : f32 = u_xlat20.y;
        let x_1530 : f32 = u_xlat70;
        let x_1532 : f32 = u_xlat68;
        u_xlat68 = ((x_1529 * x_1530) + x_1532);
        let x_1535 : vec2<f32> = u_xlat31;
        let x_1537 : f32 = u_xlat6.z;
        txVec23 = vec3<f32>(x_1535.x, x_1535.y, x_1537);
        let x_1544 : vec3<f32> = txVec23;
        let x_1546 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1544.xy, x_1544.z);
        u_xlat70 = x_1546;
        let x_1548 : f32 = u_xlat20.z;
        let x_1549 : f32 = u_xlat70;
        let x_1551 : f32 = u_xlat68;
        u_xlat68 = ((x_1548 * x_1549) + x_1551);
        let x_1554 : vec2<f32> = u_xlat59;
        let x_1556 : f32 = u_xlat6.z;
        txVec24 = vec3<f32>(x_1554.x, x_1554.y, x_1556);
        let x_1563 : vec3<f32> = txVec24;
        let x_1565 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1563.xy, x_1563.z);
        u_xlat70 = x_1565;
        let x_1567 : f32 = u_xlat20.w;
        let x_1568 : f32 = u_xlat70;
        let x_1570 : f32 = u_xlat68;
        u_xlat68 = ((x_1567 * x_1568) + x_1570);
        let x_1573 : vec4<f32> = u_xlat12;
        let x_1574 : vec2<f32> = vec2<f32>(x_1573.x, x_1573.y);
        let x_1576 : f32 = u_xlat6.z;
        txVec25 = vec3<f32>(x_1574.x, x_1574.y, x_1576);
        let x_1583 : vec3<f32> = txVec25;
        let x_1585 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1583.xy, x_1583.z);
        u_xlat70 = x_1585;
        let x_1587 : f32 = u_xlat8.x;
        let x_1588 : f32 = u_xlat70;
        let x_1590 : f32 = u_xlat68;
        u_xlat68 = ((x_1587 * x_1588) + x_1590);
        let x_1593 : vec4<f32> = u_xlat12;
        let x_1594 : vec2<f32> = vec2<f32>(x_1593.z, x_1593.w);
        let x_1596 : f32 = u_xlat6.z;
        txVec26 = vec3<f32>(x_1594.x, x_1594.y, x_1596);
        let x_1603 : vec3<f32> = txVec26;
        let x_1605 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1603.xy, x_1603.z);
        u_xlat70 = x_1605;
        let x_1607 : f32 = u_xlat8.y;
        let x_1608 : f32 = u_xlat70;
        let x_1610 : f32 = u_xlat68;
        u_xlat68 = ((x_1607 * x_1608) + x_1610);
        let x_1613 : vec2<f32> = u_xlat54;
        let x_1615 : f32 = u_xlat6.z;
        txVec27 = vec3<f32>(x_1613.x, x_1613.y, x_1615);
        let x_1622 : vec3<f32> = txVec27;
        let x_1624 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1622.xy, x_1622.z);
        u_xlat70 = x_1624;
        let x_1626 : f32 = u_xlat8.z;
        let x_1627 : f32 = u_xlat70;
        let x_1629 : f32 = u_xlat68;
        u_xlat68 = ((x_1626 * x_1627) + x_1629);
        let x_1632 : vec4<f32> = u_xlat7;
        let x_1633 : vec2<f32> = vec2<f32>(x_1632.x, x_1632.y);
        let x_1635 : f32 = u_xlat6.z;
        txVec28 = vec3<f32>(x_1633.x, x_1633.y, x_1635);
        let x_1642 : vec3<f32> = txVec28;
        let x_1644 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1642.xy, x_1642.z);
        u_xlat70 = x_1644;
        let x_1646 : f32 = u_xlat8.w;
        let x_1647 : f32 = u_xlat70;
        let x_1649 : f32 = u_xlat68;
        u_xlat67 = ((x_1646 * x_1647) + x_1649);
      }
    }
  } else {
    let x_1653 : vec4<f32> = u_xlat6;
    let x_1654 : vec2<f32> = vec2<f32>(x_1653.x, x_1653.y);
    let x_1656 : f32 = u_xlat6.z;
    txVec29 = vec3<f32>(x_1654.x, x_1654.y, x_1656);
    let x_1663 : vec3<f32> = txVec29;
    let x_1665 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1663.xy, x_1663.z);
    u_xlat67 = x_1665;
  }
  let x_1667 : f32 = x_271.x_MainLightShadowParams.x;
  u_xlat68 = (-(x_1667) + 1.0f);
  let x_1670 : f32 = u_xlat67;
  let x_1672 : f32 = x_271.x_MainLightShadowParams.x;
  let x_1674 : f32 = u_xlat68;
  u_xlat67 = ((x_1670 * x_1672) + x_1674);
  let x_1678 : f32 = u_xlat6.z;
  u_xlatb70 = (0.0f >= x_1678);
  let x_1682 : f32 = u_xlat6.z;
  u_xlatb72 = (x_1682 >= 1.0f);
  let x_1684 : bool = u_xlatb70;
  let x_1685 : bool = u_xlatb72;
  u_xlatb70 = (x_1684 | x_1685);
  let x_1687 : bool = u_xlatb70;
  let x_1688 : f32 = u_xlat67;
  u_xlat67 = select(x_1688, 1.0f, x_1687);
  let x_1690 : vec3<f32> = u_xlat0;
  let x_1692 : vec4<f32> = x_90.x_MainLightPosition;
  u_xlat0.x = dot(x_1690, -(vec3<f32>(x_1692.x, x_1692.y, x_1692.z)));
  let x_1698 : f32 = u_xlat0.x;
  u_xlat0.x = clamp(x_1698, 0.0f, 1.0f);
  let x_1701 : f32 = u_xlat67;
  let x_1704 : vec4<f32> = x_90.x_MainLightColor;
  let x_1706 : vec3<f32> = (vec3<f32>(x_1701, x_1701, x_1701) * vec3<f32>(x_1704.x, x_1704.y, x_1704.z));
  let x_1707 : vec4<f32> = u_xlat7;
  u_xlat7 = vec4<f32>(x_1706.x, x_1706.y, x_1706.z, x_1707.w);
  let x_1709 : vec3<f32> = u_xlat0;
  let x_1711 : vec4<f32> = u_xlat7;
  u_xlat0 = (vec3<f32>(x_1709.x, x_1709.x, x_1709.x) * vec3<f32>(x_1711.x, x_1711.y, x_1711.z));
  let x_1714 : vec3<f32> = u_xlat0;
  let x_1715 : vec4<f32> = u_xlat3;
  u_xlat0 = (x_1714 * vec3<f32>(x_1715.x, x_1715.y, x_1715.z));
  let x_1719 : f32 = x_161.unity_LODFade.x;
  u_xlatb67 = (x_1719 < 0.0f);
  let x_1722 : f32 = x_161.unity_LODFade.x;
  u_xlat3.x = (x_1722 + 1.0f);
  let x_1725 : bool = u_xlatb67;
  if (x_1725) {
    let x_1730 : f32 = u_xlat3.x;
    x_1726 = x_1730;
  } else {
    let x_1733 : f32 = x_161.unity_LODFade.x;
    x_1726 = x_1733;
  }
  let x_1734 : f32 = x_1726;
  u_xlat67 = x_1734;
  let x_1736 : f32 = u_xlat67;
  u_xlatb3 = (0.5f >= x_1736);
  let x_1738 : vec3<f32> = u_xlat1;
  let x_1741 : vec4<f32> = x_90.x_ScreenParams;
  u_xlat1 = (abs(x_1738) * vec3<f32>(x_1741.x, x_1741.y, x_1741.x));
  let x_1747 : vec3<f32> = u_xlat1;
  u_xlatu1 = vec3<u32>(x_1747);
  let x_1751 : u32 = u_xlatu1.z;
  u_xlatu45 = (x_1751 * 1025u);
  let x_1755 : u32 = u_xlatu45;
  u_xlatu25 = (x_1755 >> 6u);
  let x_1759 : u32 = u_xlatu45;
  let x_1760 : u32 = u_xlatu25;
  u_xlati45 = bitcast<i32>((x_1759 ^ x_1760));
  let x_1763 : i32 = u_xlati45;
  u_xlatu45 = (bitcast<u32>(x_1763) * 9u);
  let x_1767 : u32 = u_xlatu45;
  u_xlatu25 = (x_1767 >> 11u);
  let x_1770 : u32 = u_xlatu45;
  let x_1771 : u32 = u_xlatu25;
  u_xlati45 = bitcast<i32>((x_1770 ^ x_1771));
  let x_1774 : i32 = u_xlati45;
  u_xlati45 = (x_1774 * 32769i);
  let x_1778 : i32 = u_xlati45;
  let x_1781 : u32 = u_xlatu1.y;
  u_xlati23 = bitcast<i32>((bitcast<u32>(x_1778) ^ x_1781));
  let x_1785 : i32 = u_xlati23;
  u_xlatu23 = (bitcast<u32>(x_1785) * 1025u);
  let x_1788 : u32 = u_xlatu23;
  u_xlatu45 = (x_1788 >> 6u);
  let x_1790 : u32 = u_xlatu45;
  let x_1791 : u32 = u_xlatu23;
  u_xlati23 = bitcast<i32>((x_1790 ^ x_1791));
  let x_1794 : i32 = u_xlati23;
  u_xlatu23 = (bitcast<u32>(x_1794) * 9u);
  let x_1797 : u32 = u_xlatu23;
  u_xlatu45 = (x_1797 >> 11u);
  let x_1799 : u32 = u_xlatu45;
  let x_1800 : u32 = u_xlatu23;
  u_xlati23 = bitcast<i32>((x_1799 ^ x_1800));
  let x_1803 : i32 = u_xlati23;
  u_xlati23 = (x_1803 * 32769i);
  let x_1806 : i32 = u_xlati23;
  let x_1809 : u32 = u_xlatu1.x;
  u_xlati1 = bitcast<i32>((bitcast<u32>(x_1806) ^ x_1809));
  let x_1812 : i32 = u_xlati1;
  u_xlatu1.x = (bitcast<u32>(x_1812) * 1025u);
  let x_1817 : u32 = u_xlatu1.x;
  u_xlatu23 = (x_1817 >> 6u);
  let x_1819 : u32 = u_xlatu23;
  let x_1821 : u32 = u_xlatu1.x;
  u_xlati1 = bitcast<i32>((x_1819 ^ x_1821));
  let x_1824 : i32 = u_xlati1;
  u_xlatu1.x = (bitcast<u32>(x_1824) * 9u);
  let x_1829 : u32 = u_xlatu1.x;
  u_xlatu23 = (x_1829 >> 11u);
  let x_1831 : u32 = u_xlatu23;
  let x_1833 : u32 = u_xlatu1.x;
  u_xlati1 = bitcast<i32>((x_1831 ^ x_1833));
  let x_1836 : i32 = u_xlati1;
  u_xlati1 = (x_1836 * 32769i);
  param = 1065353216i;
  let x_1842 : i32 = u_xlati1;
  param_1 = x_1842;
  param_2 = 0i;
  param_3 = 23i;
  let x_1845 : i32 = int_bitfieldInsert_i1_i1_i1_i1_(&(param), &(param_1), &(param_2), &(param_3));
  u_xlat1.x = bitcast<f32>(x_1845);
  let x_1849 : f32 = u_xlat1.x;
  u_xlat1.x = (x_1849 + -1.0f);
  let x_1854 : f32 = u_xlat1.x;
  u_xlat23 = (-(x_1854) + 1.0f);
  let x_1857 : bool = u_xlatb3;
  if (x_1857) {
    let x_1862 : f32 = u_xlat1.x;
    x_1858 = x_1862;
  } else {
    let x_1864 : f32 = u_xlat23;
    x_1858 = x_1864;
  }
  let x_1865 : f32 = x_1858;
  u_xlat1.x = x_1865;
  let x_1867 : f32 = u_xlat67;
  let x_1870 : f32 = u_xlat1.x;
  u_xlat1.x = ((x_1867 * 2.0f) + -(x_1870));
  let x_1875 : f32 = u_xlat1.x;
  let x_1877 : f32 = u_xlat3.w;
  u_xlat23 = (x_1875 * x_1877);
  let x_1882 : f32 = u_xlat23;
  u_xlatb45.x = (x_1882 >= 0.400000006f);
  let x_1888 : bool = u_xlatb45.x;
  let x_1889 : f32 = u_xlat23;
  u_xlat45.x = select(0.0f, x_1889, x_1888);
  let x_1893 : f32 = u_xlat3.w;
  let x_1895 : f32 = u_xlat1.x;
  u_xlat1.x = ((x_1893 * x_1895) + -0.400000006f);
  let x_1900 : f32 = u_xlat23;
  u_xlat67 = dpdxCoarse(x_1900);
  let x_1902 : f32 = u_xlat23;
  u_xlat23 = dpdyCoarse(x_1902);
  let x_1904 : f32 = u_xlat23;
  let x_1906 : f32 = u_xlat67;
  u_xlat23 = (abs(x_1904) + abs(x_1906));
  let x_1909 : f32 = u_xlat23;
  u_xlat23 = max(x_1909, 0.0001f);
  let x_1913 : f32 = u_xlat1.x;
  let x_1914 : f32 = u_xlat23;
  u_xlat1.x = (x_1913 / x_1914);
  let x_1918 : f32 = u_xlat1.x;
  u_xlat1.x = (x_1918 + 0.5f);
  let x_1922 : f32 = u_xlat1.x;
  u_xlat1.x = clamp(x_1922, 0.0f, 1.0f);
  let x_1927 : f32 = x_90.x_AlphaToMaskAvailable;
  u_xlatb23 = !((x_1927 == 0.0f));
  let x_1929 : bool = u_xlatb23;
  if (x_1929) {
    let x_1934 : f32 = u_xlat1.x;
    x_1930 = x_1934;
  } else {
    let x_1937 : f32 = u_xlat45.x;
    x_1930 = x_1937;
  }
  let x_1938 : f32 = x_1930;
  u_xlat1.x = x_1938;
  let x_1941 : f32 = u_xlat1.x;
  u_xlat45.x = (x_1941 + -0.0001f);
  let x_1946 : f32 = u_xlat45.x;
  u_xlatb45.x = (x_1946 < 0.0f);
  let x_1950 : bool = u_xlatb45.x;
  if (((select(0i, 1i, x_1950) * -1i) != 0i)) {
    discard;
  }
  let x_1960 : f32 = vs_INTERP2.w;
  u_xlatb45.x = (0.0f < x_1960);
  let x_1964 : f32 = x_161.unity_WorldTransformParams.w;
  u_xlatb45.y = (x_1964 >= 0.0f);
  let x_1968 : bool = u_xlatb45.x;
  u_xlat45.x = select(-1.0f, 1.0f, x_1968);
  let x_1972 : bool = u_xlatb45.y;
  u_xlat45.y = select(-1.0f, 1.0f, x_1972);
  let x_1976 : f32 = u_xlat45.y;
  let x_1978 : f32 = u_xlat45.x;
  u_xlat45.x = (x_1976 * x_1978);
  let x_1981 : vec3<f32> = vs_INTERP1;
  let x_1983 : vec4<f32> = vs_INTERP2;
  let x_1985 : vec3<f32> = (vec3<f32>(x_1981.z, x_1981.x, x_1981.y) * vec3<f32>(x_1983.y, x_1983.z, x_1983.x));
  let x_1986 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_1985.x, x_1985.y, x_1985.z, x_1986.w);
  let x_1988 : vec3<f32> = vs_INTERP1;
  let x_1990 : vec4<f32> = vs_INTERP2;
  let x_1993 : vec4<f32> = u_xlat3;
  let x_1996 : vec3<f32> = ((vec3<f32>(x_1988.y, x_1988.z, x_1988.x) * vec3<f32>(x_1990.z, x_1990.x, x_1990.y)) + -(vec3<f32>(x_1993.x, x_1993.y, x_1993.z)));
  let x_1997 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_1996.x, x_1996.y, x_1996.z, x_1997.w);
  let x_1999 : vec2<f32> = u_xlat45;
  let x_2001 : vec4<f32> = u_xlat3;
  let x_2003 : vec3<f32> = (vec3<f32>(x_1999.x, x_1999.x, x_1999.x) * vec3<f32>(x_2001.x, x_2001.y, x_2001.z));
  let x_2004 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_2003.x, x_2003.y, x_2003.z, x_2004.w);
  let x_2006 : vec4<f32> = u_xlat3;
  let x_2008 : vec3<f32> = u_xlat27;
  let x_2010 : vec3<f32> = (vec3<f32>(x_2006.x, x_2006.y, x_2006.z) * vec3<f32>(x_2008.y, x_2008.y, x_2008.y));
  let x_2011 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_2010.x, x_2010.y, x_2010.z, x_2011.w);
  let x_2013 : vec3<f32> = u_xlat27;
  let x_2015 : vec4<f32> = vs_INTERP2;
  let x_2018 : vec4<f32> = u_xlat3;
  let x_2020 : vec3<f32> = ((vec3<f32>(x_2013.x, x_2013.x, x_2013.x) * vec3<f32>(x_2015.x, x_2015.y, x_2015.z)) + vec3<f32>(x_2018.x, x_2018.y, x_2018.z));
  let x_2021 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_2020.x, x_2020.y, x_2020.z, x_2021.w);
  let x_2023 : vec3<f32> = u_xlat27;
  let x_2025 : vec3<f32> = vs_INTERP1;
  let x_2027 : vec4<f32> = u_xlat3;
  let x_2029 : vec3<f32> = ((vec3<f32>(x_2023.z, x_2023.z, x_2023.z) * x_2025) + vec3<f32>(x_2027.x, x_2027.y, x_2027.z));
  let x_2030 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_2029.x, x_2029.y, x_2029.z, x_2030.w);
  let x_2032 : vec4<f32> = u_xlat3;
  let x_2034 : vec4<f32> = u_xlat3;
  u_xlat45.x = dot(vec3<f32>(x_2032.x, x_2032.y, x_2032.z), vec3<f32>(x_2034.x, x_2034.y, x_2034.z));
  let x_2039 : f32 = u_xlat45.x;
  u_xlat45.x = inverseSqrt(x_2039);
  let x_2042 : vec2<f32> = u_xlat45;
  let x_2044 : vec4<f32> = u_xlat3;
  let x_2046 : vec3<f32> = (vec3<f32>(x_2042.x, x_2042.x, x_2042.x) * vec3<f32>(x_2044.x, x_2044.y, x_2044.z));
  let x_2047 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_2046.x, x_2046.y, x_2046.z, x_2047.w);
  u_xlat3.w = 1.0f;
  let x_2052 : vec4<f32> = x_161.unity_SHAr;
  let x_2053 : vec4<f32> = u_xlat3;
  u_xlat7.x = dot(x_2052, x_2053);
  let x_2058 : vec4<f32> = x_161.unity_SHAg;
  let x_2059 : vec4<f32> = u_xlat3;
  u_xlat7.y = dot(x_2058, x_2059);
  let x_2064 : vec4<f32> = x_161.unity_SHAb;
  let x_2065 : vec4<f32> = u_xlat3;
  u_xlat7.z = dot(x_2064, x_2065);
  let x_2068 : vec4<f32> = u_xlat3;
  let x_2070 : vec4<f32> = u_xlat3;
  u_xlat8 = (vec4<f32>(x_2068.y, x_2068.z, x_2068.z, x_2068.x) * vec4<f32>(x_2070.x, x_2070.y, x_2070.z, x_2070.z));
  let x_2075 : vec4<f32> = x_161.unity_SHBr;
  let x_2076 : vec4<f32> = u_xlat8;
  u_xlat9.x = dot(x_2075, x_2076);
  let x_2081 : vec4<f32> = x_161.unity_SHBg;
  let x_2082 : vec4<f32> = u_xlat8;
  u_xlat9.y = dot(x_2081, x_2082);
  let x_2086 : vec4<f32> = x_161.unity_SHBb;
  let x_2087 : vec4<f32> = u_xlat8;
  u_xlat9.z = dot(x_2086, x_2087);
  let x_2091 : f32 = u_xlat3.y;
  let x_2093 : f32 = u_xlat3.y;
  u_xlat45.x = (x_2091 * x_2093);
  let x_2097 : f32 = u_xlat3.x;
  let x_2099 : f32 = u_xlat3.x;
  let x_2102 : f32 = u_xlat45.x;
  u_xlat45.x = ((x_2097 * x_2099) + -(x_2102));
  let x_2108 : vec4<f32> = x_161.unity_SHC;
  let x_2110 : vec2<f32> = u_xlat45;
  let x_2113 : vec4<f32> = u_xlat9;
  u_xlat27 = ((vec3<f32>(x_2108.x, x_2108.y, x_2108.z) * vec3<f32>(x_2110.x, x_2110.x, x_2110.x)) + vec3<f32>(x_2113.x, x_2113.y, x_2113.z));
  let x_2116 : vec3<f32> = u_xlat27;
  let x_2117 : vec4<f32> = u_xlat7;
  u_xlat27 = (x_2116 + vec3<f32>(x_2117.x, x_2117.y, x_2117.z));
  let x_2120 : vec3<f32> = u_xlat27;
  u_xlat27 = max(x_2120, vec3<f32>(0.0f, 0.0f, 0.0f));
  let x_2123 : vec4<f32> = x_90.x_ScaledScreenParams;
  let x_2124 : vec2<f32> = vec2<f32>(x_2123.x, x_2123.y);
  u_xlat45 = (vec2<f32>(1.0f, 1.0f) / vec2<f32>(x_2124.x, x_2124.y));
  let x_2129 : vec2<f32> = u_xlat45;
  let x_2130 : vec4<f32> = hlslcc_FragCoord;
  let x_2132 : vec2<f32> = (x_2129 * vec2<f32>(x_2130.x, x_2130.y));
  let x_2133 : vec4<f32> = u_xlat7;
  u_xlat7 = vec4<f32>(x_2132.x, x_2132.y, x_2133.z, x_2133.w);
  let x_2136 : f32 = u_xlat7.y;
  let x_2139 : f32 = x_90.x_ScaleBiasRt.x;
  let x_2142 : f32 = x_90.x_ScaleBiasRt.y;
  u_xlat45.x = ((x_2136 * x_2139) + x_2142);
  let x_2146 : f32 = u_xlat45.x;
  u_xlat7.z = (-(x_2146) + 1.0f);
  let x_2151 : f32 = u_xlat5.x;
  u_xlat5.x = x_2151;
  let x_2154 : f32 = u_xlat5.x;
  u_xlat5.x = clamp(x_2154, 0.0f, 1.0f);
  let x_2158 : f32 = u_xlat1.x;
  u_xlat1.x = x_2158;
  let x_2161 : f32 = u_xlat1.x;
  u_xlat1.x = clamp(x_2161, 0.0f, 1.0f);
  let x_2164 : vec3<f32> = u_xlat4;
  u_xlat4 = (x_2164 * vec3<f32>(0.959999979f, 0.959999979f, 0.959999979f));
  let x_2169 : f32 = u_xlat5.x;
  u_xlat45.x = (-(x_2169) + 1.0f);
  let x_2174 : f32 = u_xlat45.x;
  let x_2176 : f32 = u_xlat45.x;
  u_xlat67 = (x_2174 * x_2176);
  let x_2178 : f32 = u_xlat67;
  u_xlat67 = max(x_2178, 0.0078125f);
  let x_2182 : f32 = u_xlat67;
  let x_2183 : f32 = u_xlat67;
  u_xlat69 = (x_2182 * x_2183);
  let x_2186 : f32 = u_xlat5.x;
  u_xlat5.x = (x_2186 + 0.040000021f);
  let x_2191 : f32 = u_xlat5.x;
  u_xlat5.x = min(x_2191, 1.0f);
  let x_2194 : f32 = u_xlat67;
  u_xlat72 = ((x_2194 * 4.0f) + 2.0f);
  let x_2202 : vec4<f32> = u_xlat7;
  let x_2205 : f32 = x_90.x_GlobalMipBias.x;
  let x_2206 : vec4<f32> = textureSampleBias(x_ScreenSpaceOcclusionTexture, sampler_ScreenSpaceOcclusionTexture, vec2<f32>(x_2202.x, x_2202.z), x_2205);
  u_xlat7.x = x_2206.x;
  let x_2211 : f32 = u_xlat7.x;
  u_xlat29 = (x_2211 + -1.0f);
  let x_2214 : f32 = x_90.x_AmbientOcclusionParam.w;
  let x_2215 : f32 = u_xlat29;
  u_xlat29 = ((x_2214 * x_2215) + 1.0f);
  let x_2219 : f32 = u_xlat7.x;
  let x_2221 : f32 = vs_INTERP4.w;
  u_xlat7.x = min(x_2219, x_2221);
  let x_2224 : bool = u_xlatb66;
  if (x_2224) {
    let x_2228 : f32 = x_271.x_MainLightShadowParams.y;
    u_xlatb66 = (x_2228 == 1.0f);
    let x_2230 : bool = u_xlatb66;
    if (x_2230) {
      let x_2233 : vec4<f32> = u_xlat6;
      let x_2236 : vec4<f32> = x_271.x_MainLightShadowOffset0;
      u_xlat8 = (vec4<f32>(x_2233.x, x_2233.y, x_2233.x, x_2233.y) + x_2236);
      let x_2239 : vec4<f32> = u_xlat8;
      let x_2240 : vec2<f32> = vec2<f32>(x_2239.x, x_2239.y);
      let x_2242 : f32 = u_xlat6.z;
      txVec30 = vec3<f32>(x_2240.x, x_2240.y, x_2242);
      let x_2249 : vec3<f32> = txVec30;
      let x_2251 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2249.xy, x_2249.z);
      u_xlat9.x = x_2251;
      let x_2254 : vec4<f32> = u_xlat8;
      let x_2255 : vec2<f32> = vec2<f32>(x_2254.z, x_2254.w);
      let x_2257 : f32 = u_xlat6.z;
      txVec31 = vec3<f32>(x_2255.x, x_2255.y, x_2257);
      let x_2264 : vec3<f32> = txVec31;
      let x_2266 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2264.xy, x_2264.z);
      u_xlat9.y = x_2266;
      let x_2268 : vec4<f32> = u_xlat6;
      let x_2271 : vec4<f32> = x_271.x_MainLightShadowOffset1;
      u_xlat8 = (vec4<f32>(x_2268.x, x_2268.y, x_2268.x, x_2268.y) + x_2271);
      let x_2274 : vec4<f32> = u_xlat8;
      let x_2275 : vec2<f32> = vec2<f32>(x_2274.x, x_2274.y);
      let x_2277 : f32 = u_xlat6.z;
      txVec32 = vec3<f32>(x_2275.x, x_2275.y, x_2277);
      let x_2284 : vec3<f32> = txVec32;
      let x_2286 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2284.xy, x_2284.z);
      u_xlat9.z = x_2286;
      let x_2289 : vec4<f32> = u_xlat8;
      let x_2290 : vec2<f32> = vec2<f32>(x_2289.z, x_2289.w);
      let x_2292 : f32 = u_xlat6.z;
      txVec33 = vec3<f32>(x_2290.x, x_2290.y, x_2292);
      let x_2299 : vec3<f32> = txVec33;
      let x_2301 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2299.xy, x_2299.z);
      u_xlat9.w = x_2301;
      let x_2303 : vec4<f32> = u_xlat9;
      u_xlat66 = dot(x_2303, vec4<f32>(0.25f, 0.25f, 0.25f, 0.25f));
    } else {
      let x_2308 : f32 = x_271.x_MainLightShadowParams.y;
      u_xlatb51.x = (x_2308 == 2.0f);
      let x_2312 : bool = u_xlatb51.x;
      if (x_2312) {
        let x_2315 : vec4<f32> = u_xlat6;
        let x_2318 : vec4<f32> = x_271.x_MainLightShadowmapSize;
        u_xlat51 = ((vec2<f32>(x_2315.x, x_2315.y) * vec2<f32>(x_2318.z, x_2318.w)) + vec2<f32>(0.5f, 0.5f));
        let x_2322 : vec2<f32> = u_xlat51;
        u_xlat51 = floor(x_2322);
        let x_2324 : vec4<f32> = u_xlat6;
        let x_2327 : vec4<f32> = x_271.x_MainLightShadowmapSize;
        let x_2330 : vec2<f32> = u_xlat51;
        let x_2332 : vec2<f32> = ((vec2<f32>(x_2324.x, x_2324.y) * vec2<f32>(x_2327.z, x_2327.w)) + -(x_2330));
        let x_2333 : vec4<f32> = u_xlat8;
        u_xlat8 = vec4<f32>(x_2332.x, x_2332.y, x_2333.z, x_2333.w);
        let x_2335 : vec4<f32> = u_xlat8;
        u_xlat9 = (vec4<f32>(x_2335.x, x_2335.x, x_2335.y, x_2335.y) + vec4<f32>(0.5f, 1.0f, 0.5f, 1.0f));
        let x_2338 : vec4<f32> = u_xlat9;
        let x_2340 : vec4<f32> = u_xlat9;
        u_xlat10 = (vec4<f32>(x_2338.x, x_2338.x, x_2338.z, x_2338.z) * vec4<f32>(x_2340.x, x_2340.x, x_2340.z, x_2340.z));
        let x_2344 : vec4<f32> = u_xlat10;
        u_xlat52 = (vec2<f32>(x_2344.y, x_2344.w) * vec2<f32>(0.079999998f, 0.079999998f));
        let x_2347 : vec4<f32> = u_xlat10;
        let x_2350 : vec4<f32> = u_xlat8;
        let x_2353 : vec2<f32> = ((vec2<f32>(x_2347.x, x_2347.z) * vec2<f32>(0.5f, 0.5f)) + -(vec2<f32>(x_2350.x, x_2350.y)));
        let x_2354 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_2353.x, x_2354.y, x_2353.y, x_2354.w);
        let x_2356 : vec4<f32> = u_xlat8;
        let x_2359 : vec2<f32> = (-(vec2<f32>(x_2356.x, x_2356.y)) + vec2<f32>(1.0f, 1.0f));
        let x_2360 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_2359.x, x_2359.y, x_2360.z, x_2360.w);
        let x_2362 : vec4<f32> = u_xlat8;
        u_xlat54 = min(vec2<f32>(x_2362.x, x_2362.y), vec2<f32>(0.0f, 0.0f));
        let x_2365 : vec2<f32> = u_xlat54;
        let x_2367 : vec2<f32> = u_xlat54;
        let x_2369 : vec4<f32> = u_xlat10;
        u_xlat54 = ((-(x_2365) * x_2367) + vec2<f32>(x_2369.x, x_2369.y));
        let x_2372 : vec4<f32> = u_xlat8;
        let x_2374 : vec2<f32> = max(vec2<f32>(x_2372.x, x_2372.y), vec2<f32>(0.0f, 0.0f));
        let x_2375 : vec4<f32> = u_xlat8;
        u_xlat8 = vec4<f32>(x_2374.x, x_2374.y, x_2375.z, x_2375.w);
        let x_2377 : vec4<f32> = u_xlat8;
        let x_2380 : vec4<f32> = u_xlat8;
        let x_2383 : vec4<f32> = u_xlat9;
        let x_2385 : vec2<f32> = ((-(vec2<f32>(x_2377.x, x_2377.y)) * vec2<f32>(x_2380.x, x_2380.y)) + vec2<f32>(x_2383.y, x_2383.w));
        let x_2386 : vec4<f32> = u_xlat8;
        u_xlat8 = vec4<f32>(x_2385.x, x_2385.y, x_2386.z, x_2386.w);
        let x_2388 : vec2<f32> = u_xlat54;
        u_xlat54 = (x_2388 + vec2<f32>(1.0f, 1.0f));
        let x_2390 : vec4<f32> = u_xlat8;
        let x_2392 : vec2<f32> = (vec2<f32>(x_2390.x, x_2390.y) + vec2<f32>(1.0f, 1.0f));
        let x_2393 : vec4<f32> = u_xlat8;
        u_xlat8 = vec4<f32>(x_2392.x, x_2392.y, x_2393.z, x_2393.w);
        let x_2395 : vec4<f32> = u_xlat9;
        let x_2397 : vec2<f32> = (vec2<f32>(x_2395.x, x_2395.z) * vec2<f32>(0.159999996f, 0.159999996f));
        let x_2398 : vec4<f32> = u_xlat11;
        u_xlat11 = vec4<f32>(x_2397.x, x_2397.y, x_2398.z, x_2398.w);
        let x_2400 : vec4<f32> = u_xlat10;
        let x_2402 : vec2<f32> = (vec2<f32>(x_2400.x, x_2400.y) * vec2<f32>(0.159999996f, 0.159999996f));
        let x_2403 : vec4<f32> = u_xlat12;
        u_xlat12 = vec4<f32>(x_2402.x, x_2402.y, x_2403.z, x_2403.w);
        let x_2405 : vec2<f32> = u_xlat54;
        let x_2406 : vec2<f32> = (x_2405 * vec2<f32>(0.159999996f, 0.159999996f));
        let x_2407 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_2406.x, x_2406.y, x_2407.z, x_2407.w);
        let x_2409 : vec4<f32> = u_xlat8;
        let x_2411 : vec2<f32> = (vec2<f32>(x_2409.x, x_2409.y) * vec2<f32>(0.159999996f, 0.159999996f));
        let x_2412 : vec4<f32> = u_xlat13;
        u_xlat13 = vec4<f32>(x_2411.x, x_2411.y, x_2412.z, x_2412.w);
        let x_2414 : vec4<f32> = u_xlat9;
        let x_2416 : vec2<f32> = (vec2<f32>(x_2414.y, x_2414.w) * vec2<f32>(0.159999996f, 0.159999996f));
        let x_2417 : vec4<f32> = u_xlat8;
        u_xlat8 = vec4<f32>(x_2416.x, x_2416.y, x_2417.z, x_2417.w);
        let x_2420 : f32 = u_xlat10.x;
        u_xlat11.z = x_2420;
        let x_2423 : f32 = u_xlat8.x;
        u_xlat11.w = x_2423;
        let x_2426 : f32 = u_xlat13.x;
        u_xlat12.z = x_2426;
        let x_2429 : f32 = u_xlat52.x;
        u_xlat12.w = x_2429;
        let x_2431 : vec4<f32> = u_xlat11;
        let x_2433 : vec4<f32> = u_xlat12;
        u_xlat9 = (vec4<f32>(x_2431.z, x_2431.w, x_2431.x, x_2431.z) + vec4<f32>(x_2433.z, x_2433.w, x_2433.x, x_2433.z));
        let x_2437 : f32 = u_xlat11.y;
        u_xlat10.z = x_2437;
        let x_2440 : f32 = u_xlat8.y;
        u_xlat10.w = x_2440;
        let x_2443 : f32 = u_xlat12.y;
        u_xlat13.z = x_2443;
        let x_2446 : f32 = u_xlat52.y;
        u_xlat13.w = x_2446;
        let x_2448 : vec4<f32> = u_xlat10;
        let x_2450 : vec4<f32> = u_xlat13;
        let x_2452 : vec3<f32> = (vec3<f32>(x_2448.z, x_2448.y, x_2448.w) + vec3<f32>(x_2450.z, x_2450.y, x_2450.w));
        let x_2453 : vec4<f32> = u_xlat8;
        u_xlat8 = vec4<f32>(x_2452.x, x_2452.y, x_2452.z, x_2453.w);
        let x_2455 : vec4<f32> = u_xlat12;
        let x_2457 : vec4<f32> = u_xlat9;
        let x_2459 : vec3<f32> = (vec3<f32>(x_2455.x, x_2455.z, x_2455.w) / vec3<f32>(x_2457.z, x_2457.w, x_2457.y));
        let x_2460 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_2459.x, x_2459.y, x_2459.z, x_2460.w);
        let x_2462 : vec4<f32> = u_xlat10;
        let x_2464 : vec3<f32> = (vec3<f32>(x_2462.x, x_2462.y, x_2462.z) + vec3<f32>(-2.5f, -0.5f, 1.5f));
        let x_2465 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_2464.x, x_2464.y, x_2464.z, x_2465.w);
        let x_2467 : vec4<f32> = u_xlat13;
        let x_2469 : vec4<f32> = u_xlat8;
        let x_2471 : vec3<f32> = (vec3<f32>(x_2467.z, x_2467.y, x_2467.w) / vec3<f32>(x_2469.x, x_2469.y, x_2469.z));
        let x_2472 : vec4<f32> = u_xlat11;
        u_xlat11 = vec4<f32>(x_2471.x, x_2471.y, x_2471.z, x_2472.w);
        let x_2474 : vec4<f32> = u_xlat11;
        let x_2476 : vec3<f32> = (vec3<f32>(x_2474.x, x_2474.y, x_2474.z) + vec3<f32>(-2.5f, -0.5f, 1.5f));
        let x_2477 : vec4<f32> = u_xlat11;
        u_xlat11 = vec4<f32>(x_2476.x, x_2476.y, x_2476.z, x_2477.w);
        let x_2479 : vec4<f32> = u_xlat10;
        let x_2482 : vec4<f32> = x_271.x_MainLightShadowmapSize;
        let x_2484 : vec3<f32> = (vec3<f32>(x_2479.y, x_2479.x, x_2479.z) * vec3<f32>(x_2482.x, x_2482.x, x_2482.x));
        let x_2485 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_2484.x, x_2484.y, x_2484.z, x_2485.w);
        let x_2487 : vec4<f32> = u_xlat11;
        let x_2490 : vec4<f32> = x_271.x_MainLightShadowmapSize;
        let x_2492 : vec3<f32> = (vec3<f32>(x_2487.x, x_2487.y, x_2487.z) * vec3<f32>(x_2490.y, x_2490.y, x_2490.y));
        let x_2493 : vec4<f32> = u_xlat11;
        u_xlat11 = vec4<f32>(x_2492.x, x_2492.y, x_2492.z, x_2493.w);
        let x_2496 : f32 = u_xlat11.x;
        u_xlat10.w = x_2496;
        let x_2498 : vec2<f32> = u_xlat51;
        let x_2501 : vec4<f32> = x_271.x_MainLightShadowmapSize;
        let x_2504 : vec4<f32> = u_xlat10;
        u_xlat12 = ((vec4<f32>(x_2498.x, x_2498.y, x_2498.x, x_2498.y) * vec4<f32>(x_2501.x, x_2501.y, x_2501.x, x_2501.y)) + vec4<f32>(x_2504.y, x_2504.w, x_2504.x, x_2504.w));
        let x_2507 : vec2<f32> = u_xlat51;
        let x_2509 : vec4<f32> = x_271.x_MainLightShadowmapSize;
        let x_2512 : vec4<f32> = u_xlat10;
        let x_2514 : vec2<f32> = ((x_2507 * vec2<f32>(x_2509.x, x_2509.y)) + vec2<f32>(x_2512.z, x_2512.w));
        let x_2515 : vec4<f32> = u_xlat13;
        u_xlat13 = vec4<f32>(x_2514.x, x_2514.y, x_2515.z, x_2515.w);
        let x_2518 : f32 = u_xlat10.y;
        u_xlat11.w = x_2518;
        let x_2520 : vec4<f32> = u_xlat11;
        let x_2521 : vec2<f32> = vec2<f32>(x_2520.y, x_2520.z);
        let x_2522 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_2522.x, x_2521.x, x_2522.z, x_2521.y);
        let x_2524 : vec2<f32> = u_xlat51;
        let x_2527 : vec4<f32> = x_271.x_MainLightShadowmapSize;
        let x_2530 : vec4<f32> = u_xlat10;
        u_xlat14 = ((vec4<f32>(x_2524.x, x_2524.y, x_2524.x, x_2524.y) * vec4<f32>(x_2527.x, x_2527.y, x_2527.x, x_2527.y)) + vec4<f32>(x_2530.x, x_2530.y, x_2530.z, x_2530.y));
        let x_2533 : vec2<f32> = u_xlat51;
        let x_2536 : vec4<f32> = x_271.x_MainLightShadowmapSize;
        let x_2539 : vec4<f32> = u_xlat11;
        u_xlat11 = ((vec4<f32>(x_2533.x, x_2533.y, x_2533.x, x_2533.y) * vec4<f32>(x_2536.x, x_2536.y, x_2536.x, x_2536.y)) + vec4<f32>(x_2539.w, x_2539.y, x_2539.w, x_2539.z));
        let x_2542 : vec2<f32> = u_xlat51;
        let x_2545 : vec4<f32> = x_271.x_MainLightShadowmapSize;
        let x_2548 : vec4<f32> = u_xlat10;
        u_xlat10 = ((vec4<f32>(x_2542.x, x_2542.y, x_2542.x, x_2542.y) * vec4<f32>(x_2545.x, x_2545.y, x_2545.x, x_2545.y)) + vec4<f32>(x_2548.x, x_2548.w, x_2548.z, x_2548.w));
        let x_2551 : vec4<f32> = u_xlat8;
        let x_2553 : vec4<f32> = u_xlat9;
        u_xlat15 = (vec4<f32>(x_2551.x, x_2551.x, x_2551.x, x_2551.y) * vec4<f32>(x_2553.z, x_2553.w, x_2553.y, x_2553.z));
        let x_2556 : vec4<f32> = u_xlat8;
        let x_2558 : vec4<f32> = u_xlat9;
        u_xlat16 = (vec4<f32>(x_2556.y, x_2556.y, x_2556.z, x_2556.z) * x_2558);
        let x_2561 : f32 = u_xlat8.z;
        let x_2563 : f32 = u_xlat9.y;
        u_xlat51.x = (x_2561 * x_2563);
        let x_2567 : vec4<f32> = u_xlat12;
        let x_2568 : vec2<f32> = vec2<f32>(x_2567.x, x_2567.y);
        let x_2570 : f32 = u_xlat6.z;
        txVec34 = vec3<f32>(x_2568.x, x_2568.y, x_2570);
        let x_2578 : vec3<f32> = txVec34;
        let x_2580 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2578.xy, x_2578.z);
        u_xlat73 = x_2580;
        let x_2582 : vec4<f32> = u_xlat12;
        let x_2583 : vec2<f32> = vec2<f32>(x_2582.z, x_2582.w);
        let x_2585 : f32 = u_xlat6.z;
        txVec35 = vec3<f32>(x_2583.x, x_2583.y, x_2585);
        let x_2592 : vec3<f32> = txVec35;
        let x_2594 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2592.xy, x_2592.z);
        u_xlat8.x = x_2594;
        let x_2597 : f32 = u_xlat8.x;
        let x_2599 : f32 = u_xlat15.y;
        u_xlat8.x = (x_2597 * x_2599);
        let x_2603 : f32 = u_xlat15.x;
        let x_2604 : f32 = u_xlat73;
        let x_2607 : f32 = u_xlat8.x;
        u_xlat73 = ((x_2603 * x_2604) + x_2607);
        let x_2610 : vec4<f32> = u_xlat13;
        let x_2611 : vec2<f32> = vec2<f32>(x_2610.x, x_2610.y);
        let x_2613 : f32 = u_xlat6.z;
        txVec36 = vec3<f32>(x_2611.x, x_2611.y, x_2613);
        let x_2620 : vec3<f32> = txVec36;
        let x_2622 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2620.xy, x_2620.z);
        u_xlat8.x = x_2622;
        let x_2625 : f32 = u_xlat15.z;
        let x_2627 : f32 = u_xlat8.x;
        let x_2629 : f32 = u_xlat73;
        u_xlat73 = ((x_2625 * x_2627) + x_2629);
        let x_2632 : vec4<f32> = u_xlat11;
        let x_2633 : vec2<f32> = vec2<f32>(x_2632.x, x_2632.y);
        let x_2635 : f32 = u_xlat6.z;
        txVec37 = vec3<f32>(x_2633.x, x_2633.y, x_2635);
        let x_2642 : vec3<f32> = txVec37;
        let x_2644 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2642.xy, x_2642.z);
        u_xlat8.x = x_2644;
        let x_2647 : f32 = u_xlat15.w;
        let x_2649 : f32 = u_xlat8.x;
        let x_2651 : f32 = u_xlat73;
        u_xlat73 = ((x_2647 * x_2649) + x_2651);
        let x_2654 : vec4<f32> = u_xlat14;
        let x_2655 : vec2<f32> = vec2<f32>(x_2654.x, x_2654.y);
        let x_2657 : f32 = u_xlat6.z;
        txVec38 = vec3<f32>(x_2655.x, x_2655.y, x_2657);
        let x_2664 : vec3<f32> = txVec38;
        let x_2666 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2664.xy, x_2664.z);
        u_xlat8.x = x_2666;
        let x_2669 : f32 = u_xlat16.x;
        let x_2671 : f32 = u_xlat8.x;
        let x_2673 : f32 = u_xlat73;
        u_xlat73 = ((x_2669 * x_2671) + x_2673);
        let x_2676 : vec4<f32> = u_xlat14;
        let x_2677 : vec2<f32> = vec2<f32>(x_2676.z, x_2676.w);
        let x_2679 : f32 = u_xlat6.z;
        txVec39 = vec3<f32>(x_2677.x, x_2677.y, x_2679);
        let x_2686 : vec3<f32> = txVec39;
        let x_2688 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2686.xy, x_2686.z);
        u_xlat8.x = x_2688;
        let x_2691 : f32 = u_xlat16.y;
        let x_2693 : f32 = u_xlat8.x;
        let x_2695 : f32 = u_xlat73;
        u_xlat73 = ((x_2691 * x_2693) + x_2695);
        let x_2698 : vec4<f32> = u_xlat11;
        let x_2699 : vec2<f32> = vec2<f32>(x_2698.z, x_2698.w);
        let x_2701 : f32 = u_xlat6.z;
        txVec40 = vec3<f32>(x_2699.x, x_2699.y, x_2701);
        let x_2708 : vec3<f32> = txVec40;
        let x_2710 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2708.xy, x_2708.z);
        u_xlat8.x = x_2710;
        let x_2713 : f32 = u_xlat16.z;
        let x_2715 : f32 = u_xlat8.x;
        let x_2717 : f32 = u_xlat73;
        u_xlat73 = ((x_2713 * x_2715) + x_2717);
        let x_2720 : vec4<f32> = u_xlat10;
        let x_2721 : vec2<f32> = vec2<f32>(x_2720.x, x_2720.y);
        let x_2723 : f32 = u_xlat6.z;
        txVec41 = vec3<f32>(x_2721.x, x_2721.y, x_2723);
        let x_2730 : vec3<f32> = txVec41;
        let x_2732 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2730.xy, x_2730.z);
        u_xlat8.x = x_2732;
        let x_2735 : f32 = u_xlat16.w;
        let x_2737 : f32 = u_xlat8.x;
        let x_2739 : f32 = u_xlat73;
        u_xlat73 = ((x_2735 * x_2737) + x_2739);
        let x_2742 : vec4<f32> = u_xlat10;
        let x_2743 : vec2<f32> = vec2<f32>(x_2742.z, x_2742.w);
        let x_2745 : f32 = u_xlat6.z;
        txVec42 = vec3<f32>(x_2743.x, x_2743.y, x_2745);
        let x_2752 : vec3<f32> = txVec42;
        let x_2754 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2752.xy, x_2752.z);
        u_xlat8.x = x_2754;
        let x_2757 : f32 = u_xlat51.x;
        let x_2759 : f32 = u_xlat8.x;
        let x_2761 : f32 = u_xlat73;
        u_xlat66 = ((x_2757 * x_2759) + x_2761);
      } else {
        let x_2764 : vec4<f32> = u_xlat6;
        let x_2767 : vec4<f32> = x_271.x_MainLightShadowmapSize;
        u_xlat51 = ((vec2<f32>(x_2764.x, x_2764.y) * vec2<f32>(x_2767.z, x_2767.w)) + vec2<f32>(0.5f, 0.5f));
        let x_2771 : vec2<f32> = u_xlat51;
        u_xlat51 = floor(x_2771);
        let x_2773 : vec4<f32> = u_xlat6;
        let x_2776 : vec4<f32> = x_271.x_MainLightShadowmapSize;
        let x_2779 : vec2<f32> = u_xlat51;
        let x_2781 : vec2<f32> = ((vec2<f32>(x_2773.x, x_2773.y) * vec2<f32>(x_2776.z, x_2776.w)) + -(x_2779));
        let x_2782 : vec4<f32> = u_xlat8;
        u_xlat8 = vec4<f32>(x_2781.x, x_2781.y, x_2782.z, x_2782.w);
        let x_2784 : vec4<f32> = u_xlat8;
        u_xlat9 = (vec4<f32>(x_2784.x, x_2784.x, x_2784.y, x_2784.y) + vec4<f32>(0.5f, 1.0f, 0.5f, 1.0f));
        let x_2787 : vec4<f32> = u_xlat9;
        let x_2789 : vec4<f32> = u_xlat9;
        u_xlat10 = (vec4<f32>(x_2787.x, x_2787.x, x_2787.z, x_2787.z) * vec4<f32>(x_2789.x, x_2789.x, x_2789.z, x_2789.z));
        let x_2792 : vec4<f32> = u_xlat10;
        let x_2794 : vec2<f32> = (vec2<f32>(x_2792.y, x_2792.w) * vec2<f32>(0.040816002f, 0.040816002f));
        let x_2795 : vec4<f32> = u_xlat11;
        u_xlat11 = vec4<f32>(x_2795.x, x_2794.x, x_2795.z, x_2794.y);
        let x_2797 : vec4<f32> = u_xlat10;
        let x_2800 : vec4<f32> = u_xlat8;
        u_xlat52 = ((vec2<f32>(x_2797.x, x_2797.z) * vec2<f32>(0.5f, 0.5f)) + -(vec2<f32>(x_2800.x, x_2800.y)));
        let x_2804 : vec4<f32> = u_xlat8;
        let x_2807 : vec2<f32> = (-(vec2<f32>(x_2804.x, x_2804.y)) + vec2<f32>(1.0f, 1.0f));
        let x_2808 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_2807.x, x_2808.y, x_2807.y, x_2808.w);
        let x_2810 : vec4<f32> = u_xlat8;
        let x_2812 : vec2<f32> = min(vec2<f32>(x_2810.x, x_2810.y), vec2<f32>(0.0f, 0.0f));
        let x_2813 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_2812.x, x_2812.y, x_2813.z, x_2813.w);
        let x_2815 : vec4<f32> = u_xlat10;
        let x_2818 : vec4<f32> = u_xlat10;
        let x_2821 : vec4<f32> = u_xlat9;
        let x_2823 : vec2<f32> = ((-(vec2<f32>(x_2815.x, x_2815.y)) * vec2<f32>(x_2818.x, x_2818.y)) + vec2<f32>(x_2821.x, x_2821.z));
        let x_2824 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_2823.x, x_2824.y, x_2823.y, x_2824.w);
        let x_2826 : vec4<f32> = u_xlat8;
        let x_2828 : vec2<f32> = max(vec2<f32>(x_2826.x, x_2826.y), vec2<f32>(0.0f, 0.0f));
        let x_2829 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_2828.x, x_2828.y, x_2829.z, x_2829.w);
        let x_2831 : vec4<f32> = u_xlat10;
        let x_2834 : vec4<f32> = u_xlat10;
        let x_2837 : vec4<f32> = u_xlat9;
        let x_2839 : vec2<f32> = ((-(vec2<f32>(x_2831.x, x_2831.y)) * vec2<f32>(x_2834.x, x_2834.y)) + vec2<f32>(x_2837.y, x_2837.w));
        let x_2840 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_2840.x, x_2839.x, x_2840.z, x_2839.y);
        let x_2842 : vec4<f32> = u_xlat9;
        u_xlat9 = (x_2842 + vec4<f32>(2.0f, 2.0f, 2.0f, 2.0f));
        let x_2845 : f32 = u_xlat9.y;
        u_xlat10.z = (x_2845 * 0.081632003f);
        let x_2848 : vec2<f32> = u_xlat52;
        let x_2850 : vec2<f32> = (vec2<f32>(x_2848.y, x_2848.x) * vec2<f32>(0.081632003f, 0.081632003f));
        let x_2851 : vec4<f32> = u_xlat12;
        u_xlat12 = vec4<f32>(x_2850.x, x_2850.y, x_2851.z, x_2851.w);
        let x_2853 : vec4<f32> = u_xlat9;
        u_xlat52 = (vec2<f32>(x_2853.x, x_2853.z) * vec2<f32>(0.081632003f, 0.081632003f));
        let x_2857 : f32 = u_xlat9.w;
        u_xlat12.z = (x_2857 * 0.081632003f);
        let x_2861 : f32 = u_xlat12.y;
        u_xlat10.x = x_2861;
        let x_2863 : vec4<f32> = u_xlat8;
        let x_2866 : vec2<f32> = ((vec2<f32>(x_2863.x, x_2863.x) * vec2<f32>(-0.081632003f, 0.081632003f)) + vec2<f32>(0.163264006f, 0.081632003f));
        let x_2867 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_2867.x, x_2866.x, x_2867.z, x_2866.y);
        let x_2869 : vec4<f32> = u_xlat8;
        let x_2872 : vec2<f32> = ((vec2<f32>(x_2869.x, x_2869.x) * vec2<f32>(-0.081632003f, 0.081632003f)) + vec2<f32>(0.081632003f, 0.163264006f));
        let x_2873 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_2872.x, x_2873.y, x_2872.y, x_2873.w);
        let x_2876 : f32 = u_xlat52.x;
        u_xlat9.y = x_2876;
        let x_2879 : f32 = u_xlat11.y;
        u_xlat9.w = x_2879;
        let x_2881 : vec4<f32> = u_xlat9;
        let x_2882 : vec4<f32> = u_xlat10;
        u_xlat10 = (x_2881 + x_2882);
        let x_2884 : vec4<f32> = u_xlat8;
        let x_2887 : vec2<f32> = ((vec2<f32>(x_2884.y, x_2884.y) * vec2<f32>(-0.081632003f, 0.081632003f)) + vec2<f32>(0.163264006f, 0.081632003f));
        let x_2888 : vec4<f32> = u_xlat12;
        u_xlat12 = vec4<f32>(x_2888.x, x_2887.x, x_2888.z, x_2887.y);
        let x_2890 : vec4<f32> = u_xlat8;
        let x_2893 : vec2<f32> = ((vec2<f32>(x_2890.y, x_2890.y) * vec2<f32>(-0.081632003f, 0.081632003f)) + vec2<f32>(0.081632003f, 0.163264006f));
        let x_2894 : vec4<f32> = u_xlat11;
        u_xlat11 = vec4<f32>(x_2893.x, x_2894.y, x_2893.y, x_2894.w);
        let x_2897 : f32 = u_xlat52.y;
        u_xlat11.y = x_2897;
        let x_2899 : vec4<f32> = u_xlat11;
        let x_2900 : vec4<f32> = u_xlat12;
        u_xlat8 = (x_2899 + x_2900);
        let x_2902 : vec4<f32> = u_xlat9;
        let x_2903 : vec4<f32> = u_xlat10;
        u_xlat9 = (x_2902 / x_2903);
        let x_2905 : vec4<f32> = u_xlat9;
        u_xlat9 = (x_2905 + vec4<f32>(-3.5f, -1.5f, 0.5f, 2.5f));
        let x_2907 : vec4<f32> = u_xlat11;
        let x_2908 : vec4<f32> = u_xlat8;
        u_xlat11 = (x_2907 / x_2908);
        let x_2910 : vec4<f32> = u_xlat11;
        u_xlat11 = (x_2910 + vec4<f32>(-3.5f, -1.5f, 0.5f, 2.5f));
        let x_2912 : vec4<f32> = u_xlat9;
        let x_2915 : vec4<f32> = x_271.x_MainLightShadowmapSize;
        u_xlat9 = (vec4<f32>(x_2912.w, x_2912.x, x_2912.y, x_2912.z) * vec4<f32>(x_2915.x, x_2915.x, x_2915.x, x_2915.x));
        let x_2918 : vec4<f32> = u_xlat11;
        let x_2921 : vec4<f32> = x_271.x_MainLightShadowmapSize;
        u_xlat11 = (vec4<f32>(x_2918.x, x_2918.w, x_2918.y, x_2918.z) * vec4<f32>(x_2921.y, x_2921.y, x_2921.y, x_2921.y));
        let x_2924 : vec4<f32> = u_xlat9;
        let x_2925 : vec3<f32> = vec3<f32>(x_2924.y, x_2924.z, x_2924.w);
        let x_2926 : vec4<f32> = u_xlat12;
        u_xlat12 = vec4<f32>(x_2925.x, x_2926.y, x_2925.y, x_2925.z);
        let x_2929 : f32 = u_xlat11.x;
        u_xlat12.y = x_2929;
        let x_2931 : vec2<f32> = u_xlat51;
        let x_2934 : vec4<f32> = x_271.x_MainLightShadowmapSize;
        let x_2937 : vec4<f32> = u_xlat12;
        u_xlat13 = ((vec4<f32>(x_2931.x, x_2931.y, x_2931.x, x_2931.y) * vec4<f32>(x_2934.x, x_2934.y, x_2934.x, x_2934.y)) + vec4<f32>(x_2937.x, x_2937.y, x_2937.z, x_2937.y));
        let x_2940 : vec2<f32> = u_xlat51;
        let x_2942 : vec4<f32> = x_271.x_MainLightShadowmapSize;
        let x_2945 : vec4<f32> = u_xlat12;
        let x_2947 : vec2<f32> = ((x_2940 * vec2<f32>(x_2942.x, x_2942.y)) + vec2<f32>(x_2945.w, x_2945.y));
        let x_2948 : vec4<f32> = u_xlat14;
        u_xlat14 = vec4<f32>(x_2947.x, x_2947.y, x_2948.z, x_2948.w);
        let x_2951 : f32 = u_xlat12.y;
        u_xlat9.y = x_2951;
        let x_2954 : f32 = u_xlat11.z;
        u_xlat12.y = x_2954;
        let x_2956 : vec2<f32> = u_xlat51;
        let x_2959 : vec4<f32> = x_271.x_MainLightShadowmapSize;
        let x_2962 : vec4<f32> = u_xlat12;
        u_xlat15 = ((vec4<f32>(x_2956.x, x_2956.y, x_2956.x, x_2956.y) * vec4<f32>(x_2959.x, x_2959.y, x_2959.x, x_2959.y)) + vec4<f32>(x_2962.x, x_2962.y, x_2962.z, x_2962.y));
        let x_2966 : vec2<f32> = u_xlat51;
        let x_2968 : vec4<f32> = x_271.x_MainLightShadowmapSize;
        let x_2971 : vec4<f32> = u_xlat12;
        u_xlat58 = ((x_2966 * vec2<f32>(x_2968.x, x_2968.y)) + vec2<f32>(x_2971.w, x_2971.y));
        let x_2975 : f32 = u_xlat12.y;
        u_xlat9.z = x_2975;
        let x_2977 : vec2<f32> = u_xlat51;
        let x_2980 : vec4<f32> = x_271.x_MainLightShadowmapSize;
        let x_2983 : vec4<f32> = u_xlat9;
        u_xlat16 = ((vec4<f32>(x_2977.x, x_2977.y, x_2977.x, x_2977.y) * vec4<f32>(x_2980.x, x_2980.y, x_2980.x, x_2980.y)) + vec4<f32>(x_2983.x, x_2983.y, x_2983.x, x_2983.z));
        let x_2987 : f32 = u_xlat11.w;
        u_xlat12.y = x_2987;
        let x_2989 : vec2<f32> = u_xlat51;
        let x_2992 : vec4<f32> = x_271.x_MainLightShadowmapSize;
        let x_2995 : vec4<f32> = u_xlat12;
        u_xlat17 = ((vec4<f32>(x_2989.x, x_2989.y, x_2989.x, x_2989.y) * vec4<f32>(x_2992.x, x_2992.y, x_2992.x, x_2992.y)) + vec4<f32>(x_2995.x, x_2995.y, x_2995.z, x_2995.y));
        let x_2998 : vec2<f32> = u_xlat51;
        let x_3000 : vec4<f32> = x_271.x_MainLightShadowmapSize;
        let x_3003 : vec4<f32> = u_xlat12;
        u_xlat31 = ((x_2998 * vec2<f32>(x_3000.x, x_3000.y)) + vec2<f32>(x_3003.w, x_3003.y));
        let x_3007 : f32 = u_xlat12.y;
        u_xlat9.w = x_3007;
        let x_3009 : vec2<f32> = u_xlat51;
        let x_3011 : vec4<f32> = x_271.x_MainLightShadowmapSize;
        let x_3014 : vec4<f32> = u_xlat9;
        let x_3016 : vec2<f32> = ((x_3009 * vec2<f32>(x_3011.x, x_3011.y)) + vec2<f32>(x_3014.x, x_3014.w));
        let x_3017 : vec4<f32> = u_xlat18;
        u_xlat18 = vec4<f32>(x_3016.x, x_3016.y, x_3017.z, x_3017.w);
        let x_3019 : vec4<f32> = u_xlat12;
        let x_3020 : vec3<f32> = vec3<f32>(x_3019.x, x_3019.z, x_3019.w);
        let x_3021 : vec4<f32> = u_xlat11;
        u_xlat11 = vec4<f32>(x_3020.x, x_3021.y, x_3020.y, x_3020.z);
        let x_3023 : vec2<f32> = u_xlat51;
        let x_3026 : vec4<f32> = x_271.x_MainLightShadowmapSize;
        let x_3029 : vec4<f32> = u_xlat11;
        u_xlat12 = ((vec4<f32>(x_3023.x, x_3023.y, x_3023.x, x_3023.y) * vec4<f32>(x_3026.x, x_3026.y, x_3026.x, x_3026.y)) + vec4<f32>(x_3029.x, x_3029.y, x_3029.z, x_3029.y));
        let x_3033 : vec2<f32> = u_xlat51;
        let x_3035 : vec4<f32> = x_271.x_MainLightShadowmapSize;
        let x_3038 : vec4<f32> = u_xlat11;
        u_xlat55 = ((x_3033 * vec2<f32>(x_3035.x, x_3035.y)) + vec2<f32>(x_3038.w, x_3038.y));
        let x_3042 : f32 = u_xlat9.x;
        u_xlat11.x = x_3042;
        let x_3044 : vec2<f32> = u_xlat51;
        let x_3046 : vec4<f32> = x_271.x_MainLightShadowmapSize;
        let x_3049 : vec4<f32> = u_xlat11;
        u_xlat51 = ((x_3044 * vec2<f32>(x_3046.x, x_3046.y)) + vec2<f32>(x_3049.x, x_3049.y));
        let x_3052 : vec4<f32> = u_xlat8;
        let x_3054 : vec4<f32> = u_xlat10;
        u_xlat19 = (vec4<f32>(x_3052.x, x_3052.x, x_3052.x, x_3052.x) * x_3054);
        let x_3056 : vec4<f32> = u_xlat8;
        let x_3058 : vec4<f32> = u_xlat10;
        u_xlat20 = (vec4<f32>(x_3056.y, x_3056.y, x_3056.y, x_3056.y) * x_3058);
        let x_3061 : vec4<f32> = u_xlat8;
        let x_3063 : vec4<f32> = u_xlat10;
        u_xlat21 = (vec4<f32>(x_3061.z, x_3061.z, x_3061.z, x_3061.z) * x_3063);
        let x_3065 : vec4<f32> = u_xlat8;
        let x_3067 : vec4<f32> = u_xlat10;
        u_xlat8 = (vec4<f32>(x_3065.w, x_3065.w, x_3065.w, x_3065.w) * x_3067);
        let x_3070 : vec4<f32> = u_xlat13;
        let x_3071 : vec2<f32> = vec2<f32>(x_3070.x, x_3070.y);
        let x_3073 : f32 = u_xlat6.z;
        txVec43 = vec3<f32>(x_3071.x, x_3071.y, x_3073);
        let x_3080 : vec3<f32> = txVec43;
        let x_3082 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_3080.xy, x_3080.z);
        u_xlat9.x = x_3082;
        let x_3085 : vec4<f32> = u_xlat13;
        let x_3086 : vec2<f32> = vec2<f32>(x_3085.z, x_3085.w);
        let x_3088 : f32 = u_xlat6.z;
        txVec44 = vec3<f32>(x_3086.x, x_3086.y, x_3088);
        let x_3096 : vec3<f32> = txVec44;
        let x_3098 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_3096.xy, x_3096.z);
        u_xlat75 = x_3098;
        let x_3099 : f32 = u_xlat75;
        let x_3101 : f32 = u_xlat19.y;
        u_xlat75 = (x_3099 * x_3101);
        let x_3104 : f32 = u_xlat19.x;
        let x_3106 : f32 = u_xlat9.x;
        let x_3108 : f32 = u_xlat75;
        u_xlat9.x = ((x_3104 * x_3106) + x_3108);
        let x_3112 : vec4<f32> = u_xlat14;
        let x_3113 : vec2<f32> = vec2<f32>(x_3112.x, x_3112.y);
        let x_3115 : f32 = u_xlat6.z;
        txVec45 = vec3<f32>(x_3113.x, x_3113.y, x_3115);
        let x_3122 : vec3<f32> = txVec45;
        let x_3124 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_3122.xy, x_3122.z);
        u_xlat75 = x_3124;
        let x_3126 : f32 = u_xlat19.z;
        let x_3127 : f32 = u_xlat75;
        let x_3130 : f32 = u_xlat9.x;
        u_xlat9.x = ((x_3126 * x_3127) + x_3130);
        let x_3134 : vec4<f32> = u_xlat16;
        let x_3135 : vec2<f32> = vec2<f32>(x_3134.x, x_3134.y);
        let x_3137 : f32 = u_xlat6.z;
        txVec46 = vec3<f32>(x_3135.x, x_3135.y, x_3137);
        let x_3144 : vec3<f32> = txVec46;
        let x_3146 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_3144.xy, x_3144.z);
        u_xlat75 = x_3146;
        let x_3148 : f32 = u_xlat19.w;
        let x_3149 : f32 = u_xlat75;
        let x_3152 : f32 = u_xlat9.x;
        u_xlat9.x = ((x_3148 * x_3149) + x_3152);
        let x_3156 : vec4<f32> = u_xlat15;
        let x_3157 : vec2<f32> = vec2<f32>(x_3156.x, x_3156.y);
        let x_3159 : f32 = u_xlat6.z;
        txVec47 = vec3<f32>(x_3157.x, x_3157.y, x_3159);
        let x_3166 : vec3<f32> = txVec47;
        let x_3168 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_3166.xy, x_3166.z);
        u_xlat75 = x_3168;
        let x_3170 : f32 = u_xlat20.x;
        let x_3171 : f32 = u_xlat75;
        let x_3174 : f32 = u_xlat9.x;
        u_xlat9.x = ((x_3170 * x_3171) + x_3174);
        let x_3178 : vec4<f32> = u_xlat15;
        let x_3179 : vec2<f32> = vec2<f32>(x_3178.z, x_3178.w);
        let x_3181 : f32 = u_xlat6.z;
        txVec48 = vec3<f32>(x_3179.x, x_3179.y, x_3181);
        let x_3188 : vec3<f32> = txVec48;
        let x_3190 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_3188.xy, x_3188.z);
        u_xlat75 = x_3190;
        let x_3192 : f32 = u_xlat20.y;
        let x_3193 : f32 = u_xlat75;
        let x_3196 : f32 = u_xlat9.x;
        u_xlat9.x = ((x_3192 * x_3193) + x_3196);
        let x_3200 : vec2<f32> = u_xlat58;
        let x_3202 : f32 = u_xlat6.z;
        txVec49 = vec3<f32>(x_3200.x, x_3200.y, x_3202);
        let x_3209 : vec3<f32> = txVec49;
        let x_3211 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_3209.xy, x_3209.z);
        u_xlat75 = x_3211;
        let x_3213 : f32 = u_xlat20.z;
        let x_3214 : f32 = u_xlat75;
        let x_3217 : f32 = u_xlat9.x;
        u_xlat9.x = ((x_3213 * x_3214) + x_3217);
        let x_3221 : vec4<f32> = u_xlat16;
        let x_3222 : vec2<f32> = vec2<f32>(x_3221.z, x_3221.w);
        let x_3224 : f32 = u_xlat6.z;
        txVec50 = vec3<f32>(x_3222.x, x_3222.y, x_3224);
        let x_3231 : vec3<f32> = txVec50;
        let x_3233 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_3231.xy, x_3231.z);
        u_xlat75 = x_3233;
        let x_3235 : f32 = u_xlat20.w;
        let x_3236 : f32 = u_xlat75;
        let x_3239 : f32 = u_xlat9.x;
        u_xlat9.x = ((x_3235 * x_3236) + x_3239);
        let x_3243 : vec4<f32> = u_xlat17;
        let x_3244 : vec2<f32> = vec2<f32>(x_3243.x, x_3243.y);
        let x_3246 : f32 = u_xlat6.z;
        txVec51 = vec3<f32>(x_3244.x, x_3244.y, x_3246);
        let x_3253 : vec3<f32> = txVec51;
        let x_3255 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_3253.xy, x_3253.z);
        u_xlat75 = x_3255;
        let x_3257 : f32 = u_xlat21.x;
        let x_3258 : f32 = u_xlat75;
        let x_3261 : f32 = u_xlat9.x;
        u_xlat9.x = ((x_3257 * x_3258) + x_3261);
        let x_3265 : vec4<f32> = u_xlat17;
        let x_3266 : vec2<f32> = vec2<f32>(x_3265.z, x_3265.w);
        let x_3268 : f32 = u_xlat6.z;
        txVec52 = vec3<f32>(x_3266.x, x_3266.y, x_3268);
        let x_3275 : vec3<f32> = txVec52;
        let x_3277 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_3275.xy, x_3275.z);
        u_xlat75 = x_3277;
        let x_3279 : f32 = u_xlat21.y;
        let x_3280 : f32 = u_xlat75;
        let x_3283 : f32 = u_xlat9.x;
        u_xlat9.x = ((x_3279 * x_3280) + x_3283);
        let x_3287 : vec2<f32> = u_xlat31;
        let x_3289 : f32 = u_xlat6.z;
        txVec53 = vec3<f32>(x_3287.x, x_3287.y, x_3289);
        let x_3296 : vec3<f32> = txVec53;
        let x_3298 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_3296.xy, x_3296.z);
        u_xlat31.x = x_3298;
        let x_3301 : f32 = u_xlat21.z;
        let x_3303 : f32 = u_xlat31.x;
        let x_3306 : f32 = u_xlat9.x;
        u_xlat9.x = ((x_3301 * x_3303) + x_3306);
        let x_3310 : vec4<f32> = u_xlat18;
        let x_3311 : vec2<f32> = vec2<f32>(x_3310.x, x_3310.y);
        let x_3313 : f32 = u_xlat6.z;
        txVec54 = vec3<f32>(x_3311.x, x_3311.y, x_3313);
        let x_3320 : vec3<f32> = txVec54;
        let x_3322 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_3320.xy, x_3320.z);
        u_xlat31.x = x_3322;
        let x_3325 : f32 = u_xlat21.w;
        let x_3327 : f32 = u_xlat31.x;
        let x_3330 : f32 = u_xlat9.x;
        u_xlat9.x = ((x_3325 * x_3327) + x_3330);
        let x_3334 : vec4<f32> = u_xlat12;
        let x_3335 : vec2<f32> = vec2<f32>(x_3334.x, x_3334.y);
        let x_3337 : f32 = u_xlat6.z;
        txVec55 = vec3<f32>(x_3335.x, x_3335.y, x_3337);
        let x_3344 : vec3<f32> = txVec55;
        let x_3346 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_3344.xy, x_3344.z);
        u_xlat31.x = x_3346;
        let x_3349 : f32 = u_xlat8.x;
        let x_3351 : f32 = u_xlat31.x;
        let x_3354 : f32 = u_xlat9.x;
        u_xlat8.x = ((x_3349 * x_3351) + x_3354);
        let x_3358 : vec4<f32> = u_xlat12;
        let x_3359 : vec2<f32> = vec2<f32>(x_3358.z, x_3358.w);
        let x_3361 : f32 = u_xlat6.z;
        txVec56 = vec3<f32>(x_3359.x, x_3359.y, x_3361);
        let x_3368 : vec3<f32> = txVec56;
        let x_3370 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_3368.xy, x_3368.z);
        u_xlat9.x = x_3370;
        let x_3373 : f32 = u_xlat8.y;
        let x_3375 : f32 = u_xlat9.x;
        let x_3378 : f32 = u_xlat8.x;
        u_xlat8.x = ((x_3373 * x_3375) + x_3378);
        let x_3382 : vec2<f32> = u_xlat55;
        let x_3384 : f32 = u_xlat6.z;
        txVec57 = vec3<f32>(x_3382.x, x_3382.y, x_3384);
        let x_3391 : vec3<f32> = txVec57;
        let x_3393 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_3391.xy, x_3391.z);
        u_xlat30.x = x_3393;
        let x_3396 : f32 = u_xlat8.z;
        let x_3398 : f32 = u_xlat30.x;
        let x_3401 : f32 = u_xlat8.x;
        u_xlat8.x = ((x_3396 * x_3398) + x_3401);
        let x_3405 : vec2<f32> = u_xlat51;
        let x_3407 : f32 = u_xlat6.z;
        txVec58 = vec3<f32>(x_3405.x, x_3405.y, x_3407);
        let x_3414 : vec3<f32> = txVec58;
        let x_3416 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_3414.xy, x_3414.z);
        u_xlat51.x = x_3416;
        let x_3419 : f32 = u_xlat8.w;
        let x_3421 : f32 = u_xlat51.x;
        let x_3424 : f32 = u_xlat8.x;
        u_xlat66 = ((x_3419 * x_3421) + x_3424);
      }
    }
  } else {
    let x_3428 : vec4<f32> = u_xlat6;
    let x_3429 : vec2<f32> = vec2<f32>(x_3428.x, x_3428.y);
    let x_3431 : f32 = u_xlat6.z;
    txVec59 = vec3<f32>(x_3429.x, x_3429.y, x_3431);
    let x_3438 : vec3<f32> = txVec59;
    let x_3440 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_3438.xy, x_3438.z);
    u_xlat66 = x_3440;
  }
  let x_3441 : f32 = u_xlat66;
  let x_3443 : f32 = x_271.x_MainLightShadowParams.x;
  let x_3445 : f32 = u_xlat68;
  u_xlat66 = ((x_3441 * x_3443) + x_3445);
  let x_3447 : bool = u_xlatb70;
  let x_3448 : f32 = u_xlat66;
  u_xlat66 = select(x_3448, 1.0f, x_3447);
  let x_3450 : vec3<f32> = vs_INTERP0;
  let x_3452 : vec3<f32> = x_90.x_WorldSpaceCameraPos;
  let x_3454 : vec3<f32> = (x_3450 + -(x_3452));
  let x_3455 : vec4<f32> = u_xlat6;
  u_xlat6 = vec4<f32>(x_3454.x, x_3454.y, x_3454.z, x_3455.w);
  let x_3457 : vec4<f32> = u_xlat6;
  let x_3459 : vec4<f32> = u_xlat6;
  u_xlat68 = dot(vec3<f32>(x_3457.x, x_3457.y, x_3457.z), vec3<f32>(x_3459.x, x_3459.y, x_3459.z));
  let x_3462 : f32 = u_xlat68;
  let x_3464 : f32 = x_271.x_MainLightShadowParams.z;
  let x_3467 : f32 = x_271.x_MainLightShadowParams.w;
  u_xlat68 = ((x_3462 * x_3464) + x_3467);
  let x_3469 : f32 = u_xlat68;
  u_xlat68 = clamp(x_3469, 0.0f, 1.0f);
  let x_3471 : f32 = u_xlat66;
  u_xlat70 = (-(x_3471) + 1.0f);
  let x_3474 : f32 = u_xlat68;
  let x_3475 : f32 = u_xlat70;
  let x_3477 : f32 = u_xlat66;
  u_xlat66 = ((x_3474 * x_3475) + x_3477);
  let x_3485 : f32 = x_3483.x_MainLightCookieTextureFormat;
  u_xlatb68 = !((x_3485 == -1.0f));
  let x_3487 : bool = u_xlatb68;
  if (x_3487) {
    let x_3490 : vec3<f32> = vs_INTERP0;
    let x_3493 : vec4<f32> = x_3483.x_MainLightWorldToLight[1i];
    let x_3495 : vec2<f32> = (vec2<f32>(x_3490.y, x_3490.y) * vec2<f32>(x_3493.x, x_3493.y));
    let x_3496 : vec4<f32> = u_xlat6;
    u_xlat6 = vec4<f32>(x_3495.x, x_3495.y, x_3496.z, x_3496.w);
    let x_3499 : vec4<f32> = x_3483.x_MainLightWorldToLight[0i];
    let x_3501 : vec3<f32> = vs_INTERP0;
    let x_3504 : vec4<f32> = u_xlat6;
    let x_3506 : vec2<f32> = ((vec2<f32>(x_3499.x, x_3499.y) * vec2<f32>(x_3501.x, x_3501.x)) + vec2<f32>(x_3504.x, x_3504.y));
    let x_3507 : vec4<f32> = u_xlat6;
    u_xlat6 = vec4<f32>(x_3506.x, x_3506.y, x_3507.z, x_3507.w);
    let x_3510 : vec4<f32> = x_3483.x_MainLightWorldToLight[2i];
    let x_3512 : vec3<f32> = vs_INTERP0;
    let x_3515 : vec4<f32> = u_xlat6;
    let x_3517 : vec2<f32> = ((vec2<f32>(x_3510.x, x_3510.y) * vec2<f32>(x_3512.z, x_3512.z)) + vec2<f32>(x_3515.x, x_3515.y));
    let x_3518 : vec4<f32> = u_xlat6;
    u_xlat6 = vec4<f32>(x_3517.x, x_3517.y, x_3518.z, x_3518.w);
    let x_3520 : vec4<f32> = u_xlat6;
    let x_3523 : vec4<f32> = x_3483.x_MainLightWorldToLight[3i];
    let x_3525 : vec2<f32> = (vec2<f32>(x_3520.x, x_3520.y) + vec2<f32>(x_3523.x, x_3523.y));
    let x_3526 : vec4<f32> = u_xlat6;
    u_xlat6 = vec4<f32>(x_3525.x, x_3525.y, x_3526.z, x_3526.w);
    let x_3528 : vec4<f32> = u_xlat6;
    let x_3531 : vec2<f32> = ((vec2<f32>(x_3528.x, x_3528.y) * vec2<f32>(0.5f, 0.5f)) + vec2<f32>(0.5f, 0.5f));
    let x_3532 : vec4<f32> = u_xlat6;
    u_xlat6 = vec4<f32>(x_3531.x, x_3531.y, x_3532.z, x_3532.w);
    let x_3539 : vec4<f32> = u_xlat6;
    let x_3542 : f32 = x_90.x_GlobalMipBias.x;
    let x_3543 : vec4<f32> = textureSampleBias(x_MainLightCookieTexture, sampler_MainLightCookieTexture, vec2<f32>(x_3539.x, x_3539.y), x_3542);
    u_xlat8 = x_3543;
    let x_3545 : f32 = x_3483.x_MainLightCookieTextureFormat;
    let x_3547 : f32 = x_3483.x_MainLightCookieTextureFormat;
    let x_3549 : f32 = x_3483.x_MainLightCookieTextureFormat;
    let x_3551 : f32 = x_3483.x_MainLightCookieTextureFormat;
    let x_3552 : vec4<f32> = vec4<f32>(x_3545, x_3547, x_3549, x_3551);
    let x_3559 : vec4<bool> = (vec4<f32>(x_3552.x, x_3552.y, x_3552.z, x_3552.w) == vec4<f32>(0.0f, 1.0f, 0.0f, 0.0f));
    let x_3560 : vec2<bool> = vec2<bool>(x_3559.x, x_3559.y);
    let x_3561 : vec4<bool> = u_xlatb6;
    u_xlatb6 = vec4<bool>(x_3560.x, x_3560.y, x_3561.z, x_3561.w);
    let x_3564 : bool = u_xlatb6.y;
    if (x_3564) {
      let x_3569 : f32 = u_xlat8.w;
      x_3565 = x_3569;
    } else {
      let x_3572 : f32 = u_xlat8.x;
      x_3565 = x_3572;
    }
    let x_3573 : f32 = x_3565;
    u_xlat68 = x_3573;
    let x_3575 : bool = u_xlatb6.x;
    if (x_3575) {
      let x_3579 : vec4<f32> = u_xlat8;
      x_3576 = vec3<f32>(x_3579.x, x_3579.y, x_3579.z);
    } else {
      let x_3582 : f32 = u_xlat68;
      x_3576 = vec3<f32>(x_3582, x_3582, x_3582);
    }
    let x_3584 : vec3<f32> = x_3576;
    let x_3585 : vec4<f32> = u_xlat6;
    u_xlat6 = vec4<f32>(x_3584.x, x_3584.y, x_3584.z, x_3585.w);
  } else {
    u_xlat6.x = 1.0f;
    u_xlat6.y = 1.0f;
    u_xlat6.z = 1.0f;
  }
  let x_3591 : vec4<f32> = u_xlat6;
  let x_3594 : vec4<f32> = x_90.x_MainLightColor;
  let x_3596 : vec3<f32> = (vec3<f32>(x_3591.x, x_3591.y, x_3591.z) * vec3<f32>(x_3594.x, x_3594.y, x_3594.z));
  let x_3597 : vec4<f32> = u_xlat6;
  u_xlat6 = vec4<f32>(x_3596.x, x_3596.y, x_3596.z, x_3597.w);
  let x_3599 : f32 = u_xlat29;
  let x_3601 : vec4<f32> = u_xlat6;
  let x_3603 : vec3<f32> = (vec3<f32>(x_3599, x_3599, x_3599) * vec3<f32>(x_3601.x, x_3601.y, x_3601.z));
  let x_3604 : vec4<f32> = u_xlat6;
  u_xlat6 = vec4<f32>(x_3603.x, x_3603.y, x_3603.z, x_3604.w);
  let x_3606 : vec3<f32> = u_xlat2;
  let x_3608 : vec4<f32> = u_xlat3;
  u_xlat68 = dot(-(x_3606), vec3<f32>(x_3608.x, x_3608.y, x_3608.z));
  let x_3611 : f32 = u_xlat68;
  let x_3612 : f32 = u_xlat68;
  u_xlat68 = (x_3611 + x_3612);
  let x_3614 : vec4<f32> = u_xlat3;
  let x_3616 : f32 = u_xlat68;
  let x_3620 : vec3<f32> = u_xlat2;
  let x_3622 : vec3<f32> = ((vec3<f32>(x_3614.x, x_3614.y, x_3614.z) * -(vec3<f32>(x_3616, x_3616, x_3616))) + -(x_3620));
  let x_3623 : vec4<f32> = u_xlat8;
  u_xlat8 = vec4<f32>(x_3622.x, x_3622.y, x_3622.z, x_3623.w);
  let x_3625 : vec4<f32> = u_xlat3;
  let x_3627 : vec3<f32> = u_xlat2;
  u_xlat68 = dot(vec3<f32>(x_3625.x, x_3625.y, x_3625.z), x_3627);
  let x_3629 : f32 = u_xlat68;
  u_xlat68 = clamp(x_3629, 0.0f, 1.0f);
  let x_3631 : f32 = u_xlat68;
  u_xlat68 = (-(x_3631) + 1.0f);
  let x_3634 : f32 = u_xlat68;
  let x_3635 : f32 = u_xlat68;
  u_xlat68 = (x_3634 * x_3635);
  let x_3637 : f32 = u_xlat68;
  let x_3638 : f32 = u_xlat68;
  u_xlat68 = (x_3637 * x_3638);
  let x_3641 : f32 = u_xlat45.x;
  u_xlat70 = ((-(x_3641) * 0.699999988f) + 1.700000048f);
  let x_3648 : f32 = u_xlat45.x;
  let x_3649 : f32 = u_xlat70;
  u_xlat45.x = (x_3648 * x_3649);
  let x_3653 : f32 = u_xlat45.x;
  u_xlat45.x = (x_3653 * 6.0f);
  let x_3665 : vec4<f32> = u_xlat8;
  let x_3668 : f32 = u_xlat45.x;
  let x_3669 : vec4<f32> = textureSampleLevel(unity_SpecCube0, samplerunity_SpecCube0, vec3<f32>(x_3665.x, x_3665.y, x_3665.z), x_3668);
  u_xlat8 = x_3669;
  let x_3671 : f32 = u_xlat8.w;
  u_xlat45.x = (x_3671 + -1.0f);
  let x_3675 : f32 = x_161.unity_SpecCube0_HDR.w;
  let x_3677 : f32 = u_xlat45.x;
  u_xlat45.x = ((x_3675 * x_3677) + 1.0f);
  let x_3682 : f32 = u_xlat45.x;
  u_xlat45.x = max(x_3682, 0.0f);
  let x_3686 : f32 = u_xlat45.x;
  u_xlat45.x = log2(x_3686);
  let x_3690 : f32 = u_xlat45.x;
  let x_3692 : f32 = x_161.unity_SpecCube0_HDR.y;
  u_xlat45.x = (x_3690 * x_3692);
  let x_3696 : f32 = u_xlat45.x;
  u_xlat45.x = exp2(x_3696);
  let x_3700 : f32 = u_xlat45.x;
  let x_3702 : f32 = x_161.unity_SpecCube0_HDR.x;
  u_xlat45.x = (x_3700 * x_3702);
  let x_3705 : vec4<f32> = u_xlat8;
  let x_3707 : vec2<f32> = u_xlat45;
  let x_3709 : vec3<f32> = (vec3<f32>(x_3705.x, x_3705.y, x_3705.z) * vec3<f32>(x_3707.x, x_3707.x, x_3707.x));
  let x_3710 : vec4<f32> = u_xlat8;
  u_xlat8 = vec4<f32>(x_3709.x, x_3709.y, x_3709.z, x_3710.w);
  let x_3712 : f32 = u_xlat67;
  let x_3714 : f32 = u_xlat67;
  u_xlat45 = ((vec2<f32>(x_3712, x_3712) * vec2<f32>(x_3714, x_3714)) + vec2<f32>(-1.0f, 1.0f));
  let x_3720 : f32 = u_xlat45.y;
  u_xlat67 = (1.0f / x_3720);
  let x_3723 : f32 = u_xlat5.x;
  u_xlat70 = (x_3723 + -0.039999999f);
  let x_3726 : f32 = u_xlat68;
  let x_3727 : f32 = u_xlat70;
  u_xlat68 = ((x_3726 * x_3727) + 0.039999999f);
  let x_3731 : f32 = u_xlat67;
  let x_3732 : f32 = u_xlat68;
  u_xlat67 = (x_3731 * x_3732);
  let x_3734 : f32 = u_xlat67;
  let x_3736 : vec4<f32> = u_xlat8;
  let x_3738 : vec3<f32> = (vec3<f32>(x_3734, x_3734, x_3734) * vec3<f32>(x_3736.x, x_3736.y, x_3736.z));
  let x_3739 : vec4<f32> = u_xlat8;
  u_xlat8 = vec4<f32>(x_3738.x, x_3738.y, x_3738.z, x_3739.w);
  let x_3741 : vec3<f32> = u_xlat27;
  let x_3742 : vec3<f32> = u_xlat4;
  let x_3744 : vec4<f32> = u_xlat8;
  let x_3746 : vec3<f32> = ((x_3741 * x_3742) + vec3<f32>(x_3744.x, x_3744.y, x_3744.z));
  let x_3747 : vec4<f32> = u_xlat5;
  u_xlat5 = vec4<f32>(x_3746.x, x_3746.y, x_3746.z, x_3747.w);
  let x_3749 : f32 = u_xlat66;
  let x_3751 : f32 = x_161.unity_LightData.z;
  u_xlat66 = (x_3749 * x_3751);
  let x_3753 : vec4<f32> = u_xlat3;
  let x_3756 : vec4<f32> = x_90.x_MainLightPosition;
  u_xlat67 = dot(vec3<f32>(x_3753.x, x_3753.y, x_3753.z), vec3<f32>(x_3756.x, x_3756.y, x_3756.z));
  let x_3759 : f32 = u_xlat67;
  u_xlat67 = clamp(x_3759, 0.0f, 1.0f);
  let x_3761 : f32 = u_xlat66;
  let x_3762 : f32 = u_xlat67;
  u_xlat66 = (x_3761 * x_3762);
  let x_3764 : f32 = u_xlat66;
  let x_3766 : vec4<f32> = u_xlat6;
  let x_3768 : vec3<f32> = (vec3<f32>(x_3764, x_3764, x_3764) * vec3<f32>(x_3766.x, x_3766.y, x_3766.z));
  let x_3769 : vec4<f32> = u_xlat6;
  u_xlat6 = vec4<f32>(x_3768.x, x_3768.y, x_3768.z, x_3769.w);
  let x_3771 : vec3<f32> = u_xlat2;
  let x_3773 : vec4<f32> = x_90.x_MainLightPosition;
  let x_3775 : vec3<f32> = (x_3771 + vec3<f32>(x_3773.x, x_3773.y, x_3773.z));
  let x_3776 : vec4<f32> = u_xlat8;
  u_xlat8 = vec4<f32>(x_3775.x, x_3775.y, x_3775.z, x_3776.w);
  let x_3778 : vec4<f32> = u_xlat8;
  let x_3780 : vec4<f32> = u_xlat8;
  u_xlat66 = dot(vec3<f32>(x_3778.x, x_3778.y, x_3778.z), vec3<f32>(x_3780.x, x_3780.y, x_3780.z));
  let x_3783 : f32 = u_xlat66;
  u_xlat66 = max(x_3783, 1.17549435e-37f);
  let x_3786 : f32 = u_xlat66;
  u_xlat66 = inverseSqrt(x_3786);
  let x_3788 : f32 = u_xlat66;
  let x_3790 : vec4<f32> = u_xlat8;
  let x_3792 : vec3<f32> = (vec3<f32>(x_3788, x_3788, x_3788) * vec3<f32>(x_3790.x, x_3790.y, x_3790.z));
  let x_3793 : vec4<f32> = u_xlat8;
  u_xlat8 = vec4<f32>(x_3792.x, x_3792.y, x_3792.z, x_3793.w);
  let x_3795 : vec4<f32> = u_xlat3;
  let x_3797 : vec4<f32> = u_xlat8;
  u_xlat66 = dot(vec3<f32>(x_3795.x, x_3795.y, x_3795.z), vec3<f32>(x_3797.x, x_3797.y, x_3797.z));
  let x_3800 : f32 = u_xlat66;
  u_xlat66 = clamp(x_3800, 0.0f, 1.0f);
  let x_3803 : vec4<f32> = x_90.x_MainLightPosition;
  let x_3805 : vec4<f32> = u_xlat8;
  u_xlat67 = dot(vec3<f32>(x_3803.x, x_3803.y, x_3803.z), vec3<f32>(x_3805.x, x_3805.y, x_3805.z));
  let x_3808 : f32 = u_xlat67;
  u_xlat67 = clamp(x_3808, 0.0f, 1.0f);
  let x_3810 : f32 = u_xlat66;
  let x_3811 : f32 = u_xlat66;
  u_xlat66 = (x_3810 * x_3811);
  let x_3813 : f32 = u_xlat66;
  let x_3815 : f32 = u_xlat45.x;
  u_xlat66 = ((x_3813 * x_3815) + 1.000010014f);
  let x_3819 : f32 = u_xlat67;
  let x_3820 : f32 = u_xlat67;
  u_xlat67 = (x_3819 * x_3820);
  let x_3822 : f32 = u_xlat66;
  let x_3823 : f32 = u_xlat66;
  u_xlat66 = (x_3822 * x_3823);
  let x_3825 : f32 = u_xlat67;
  u_xlat67 = max(x_3825, 0.100000001f);
  let x_3828 : f32 = u_xlat66;
  let x_3829 : f32 = u_xlat67;
  u_xlat66 = (x_3828 * x_3829);
  let x_3831 : f32 = u_xlat72;
  let x_3832 : f32 = u_xlat66;
  u_xlat66 = (x_3831 * x_3832);
  let x_3834 : f32 = u_xlat69;
  let x_3835 : f32 = u_xlat66;
  u_xlat66 = (x_3834 / x_3835);
  let x_3837 : f32 = u_xlat66;
  let x_3841 : vec3<f32> = u_xlat4;
  let x_3842 : vec3<f32> = ((vec3<f32>(x_3837, x_3837, x_3837) * vec3<f32>(0.039999999f, 0.039999999f, 0.039999999f)) + x_3841);
  let x_3843 : vec4<f32> = u_xlat8;
  u_xlat8 = vec4<f32>(x_3842.x, x_3842.y, x_3842.z, x_3843.w);
  let x_3845 : vec4<f32> = u_xlat6;
  let x_3847 : vec4<f32> = u_xlat8;
  let x_3849 : vec3<f32> = (vec3<f32>(x_3845.x, x_3845.y, x_3845.z) * vec3<f32>(x_3847.x, x_3847.y, x_3847.z));
  let x_3850 : vec4<f32> = u_xlat6;
  u_xlat6 = vec4<f32>(x_3849.x, x_3849.y, x_3849.z, x_3850.w);
  let x_3853 : f32 = x_90.x_AdditionalLightsCount.x;
  let x_3855 : f32 = x_161.unity_LightData.y;
  u_xlat66 = min(x_3853, x_3855);
  let x_3857 : f32 = u_xlat66;
  u_xlatu66 = bitcast<u32>(i32(x_3857));
  let x_3861 : f32 = x_3483.x_AdditionalLightsCookieAtlasTextureFormat;
  let x_3863 : f32 = x_3483.x_AdditionalLightsCookieAtlasTextureFormat;
  let x_3865 : f32 = x_3483.x_AdditionalLightsCookieAtlasTextureFormat;
  let x_3867 : f32 = x_3483.x_AdditionalLightsCookieAtlasTextureFormat;
  let x_3868 : vec4<f32> = vec4<f32>(x_3861, x_3863, x_3865, x_3867);
  let x_3875 : vec4<bool> = (vec4<f32>(x_3868.x, x_3868.y, x_3868.z, x_3868.w) == vec4<f32>(0.0f, 1.0f, 0.0f, 1.0f));
  u_xlatb51 = vec2<bool>(x_3875.x, x_3875.y);
  u_xlat8.x = 0.0f;
  u_xlat8.y = 0.0f;
  u_xlat8.z = 0.0f;
  u_xlatu_loop_1 = 0u;
  loop {
    let x_3886 : u32 = u_xlatu_loop_1;
    let x_3887 : u32 = u_xlatu66;
    if ((x_3886 < x_3887)) {
    } else {
      break;
    }
    let x_3890 : u32 = u_xlatu_loop_1;
    u_xlatu68 = (x_3890 >> 2u);
    let x_3893 : u32 = u_xlatu_loop_1;
    u_xlati70 = bitcast<i32>((x_3893 & 3u));
    let x_3896 : u32 = u_xlatu68;
    let x_3899 : vec4<f32> = x_161.unity_LightIndices[bitcast<i32>(x_3896)];
    let x_3909 : i32 = u_xlati70;
    indexable = array<vec4<u32>, 4u>(vec4<u32>(1065353216u, 0u, 0u, 0u), vec4<u32>(0u, 1065353216u, 0u, 0u), vec4<u32>(0u, 0u, 1065353216u, 0u), vec4<u32>(0u, 0u, 0u, 1065353216u));
    let x_3914 : vec4<u32> = indexable[x_3909];
    u_xlat68 = dot(x_3899, bitcast<vec4<f32>>(x_3914));
    let x_3917 : f32 = u_xlat68;
    u_xlatu68 = bitcast<u32>(i32(x_3917));
    let x_3920 : vec3<f32> = vs_INTERP0;
    let x_3932 : u32 = u_xlatu68;
    let x_3935 : vec4<f32> = x_3931.x_AdditionalLightsPosition[bitcast<i32>(x_3932)];
    let x_3938 : u32 = u_xlatu68;
    let x_3941 : vec4<f32> = x_3931.x_AdditionalLightsPosition[bitcast<i32>(x_3938)];
    let x_3943 : vec3<f32> = ((-(x_3920) * vec3<f32>(x_3935.w, x_3935.w, x_3935.w)) + vec3<f32>(x_3941.x, x_3941.y, x_3941.z));
    let x_3944 : vec4<f32> = u_xlat9;
    u_xlat9 = vec4<f32>(x_3943.x, x_3943.y, x_3943.z, x_3944.w);
    let x_3946 : vec4<f32> = u_xlat9;
    let x_3948 : vec4<f32> = u_xlat9;
    u_xlat70 = dot(vec3<f32>(x_3946.x, x_3946.y, x_3946.z), vec3<f32>(x_3948.x, x_3948.y, x_3948.z));
    let x_3951 : f32 = u_xlat70;
    u_xlat70 = max(x_3951, 6.10351562e-05f);
    let x_3955 : f32 = u_xlat70;
    u_xlat71 = inverseSqrt(x_3955);
    let x_3957 : f32 = u_xlat71;
    let x_3959 : vec4<f32> = u_xlat9;
    let x_3961 : vec3<f32> = (vec3<f32>(x_3957, x_3957, x_3957) * vec3<f32>(x_3959.x, x_3959.y, x_3959.z));
    let x_3962 : vec4<f32> = u_xlat10;
    u_xlat10 = vec4<f32>(x_3961.x, x_3961.y, x_3961.z, x_3962.w);
    let x_3965 : f32 = u_xlat70;
    u_xlat74 = (1.0f / x_3965);
    let x_3967 : f32 = u_xlat70;
    let x_3968 : u32 = u_xlatu68;
    let x_3971 : f32 = x_3931.x_AdditionalLightsAttenuation[bitcast<i32>(x_3968)].x;
    u_xlat70 = (x_3967 * x_3971);
    let x_3973 : f32 = u_xlat70;
    let x_3975 : f32 = u_xlat70;
    u_xlat70 = ((-(x_3973) * x_3975) + 1.0f);
    let x_3978 : f32 = u_xlat70;
    u_xlat70 = max(x_3978, 0.0f);
    let x_3980 : f32 = u_xlat70;
    let x_3981 : f32 = u_xlat70;
    u_xlat70 = (x_3980 * x_3981);
    let x_3983 : f32 = u_xlat70;
    let x_3984 : f32 = u_xlat74;
    u_xlat70 = (x_3983 * x_3984);
    let x_3986 : u32 = u_xlatu68;
    let x_3989 : vec4<f32> = x_3931.x_AdditionalLightsSpotDir[bitcast<i32>(x_3986)];
    let x_3991 : vec4<f32> = u_xlat10;
    u_xlat74 = dot(vec3<f32>(x_3989.x, x_3989.y, x_3989.z), vec3<f32>(x_3991.x, x_3991.y, x_3991.z));
    let x_3994 : f32 = u_xlat74;
    let x_3995 : u32 = u_xlatu68;
    let x_3998 : f32 = x_3931.x_AdditionalLightsAttenuation[bitcast<i32>(x_3995)].z;
    let x_4000 : u32 = u_xlatu68;
    let x_4003 : f32 = x_3931.x_AdditionalLightsAttenuation[bitcast<i32>(x_4000)].w;
    u_xlat74 = ((x_3994 * x_3998) + x_4003);
    let x_4005 : f32 = u_xlat74;
    u_xlat74 = clamp(x_4005, 0.0f, 1.0f);
    let x_4007 : f32 = u_xlat74;
    let x_4008 : f32 = u_xlat74;
    u_xlat74 = (x_4007 * x_4008);
    let x_4010 : f32 = u_xlat70;
    let x_4011 : f32 = u_xlat74;
    u_xlat70 = (x_4010 * x_4011);
    let x_4014 : u32 = u_xlatu68;
    u_xlatu74 = (x_4014 >> 5u);
    let x_4017 : u32 = u_xlatu68;
    u_xlati75 = (1i << bitcast<u32>((bitcast<i32>(x_4017) & 31i)));
    let x_4023 : i32 = u_xlati75;
    let x_4025 : u32 = u_xlatu74;
    let x_4028 : f32 = x_3483.x_AdditionalLightsCookieEnableBits[bitcast<i32>(x_4025)].el;
    u_xlati74 = bitcast<i32>((bitcast<u32>(x_4023) & bitcast<u32>(x_4028)));
    let x_4032 : i32 = u_xlati74;
    if ((x_4032 != 0i)) {
      let x_4042 : u32 = u_xlatu68;
      let x_4045 : f32 = x_4041.x_AdditionalLightsLightTypes[bitcast<i32>(x_4042)].el;
      u_xlati74 = i32(x_4045);
      let x_4047 : i32 = u_xlati74;
      u_xlati75 = select(1i, 0i, (x_4047 != 0i));
      let x_4051 : u32 = u_xlatu68;
      u_xlati76 = (bitcast<i32>(x_4051) << bitcast<u32>(2i));
      let x_4054 : i32 = u_xlati75;
      if ((x_4054 != 0i)) {
        let x_4058 : vec3<f32> = vs_INTERP0;
        let x_4060 : i32 = u_xlati76;
        let x_4063 : i32 = u_xlati76;
        let x_4067 : vec4<f32> = x_4041.x_AdditionalLightsWorldToLights[((x_4060 + 1i) / 4i)][((x_4063 + 1i) % 4i)];
        let x_4069 : vec3<f32> = (vec3<f32>(x_4058.y, x_4058.y, x_4058.y) * vec3<f32>(x_4067.x, x_4067.y, x_4067.w));
        let x_4070 : vec4<f32> = u_xlat11;
        u_xlat11 = vec4<f32>(x_4069.x, x_4069.y, x_4069.z, x_4070.w);
        let x_4072 : i32 = u_xlati76;
        let x_4074 : i32 = u_xlati76;
        let x_4077 : vec4<f32> = x_4041.x_AdditionalLightsWorldToLights[(x_4072 / 4i)][(x_4074 % 4i)];
        let x_4079 : vec3<f32> = vs_INTERP0;
        let x_4082 : vec4<f32> = u_xlat11;
        let x_4084 : vec3<f32> = ((vec3<f32>(x_4077.x, x_4077.y, x_4077.w) * vec3<f32>(x_4079.x, x_4079.x, x_4079.x)) + vec3<f32>(x_4082.x, x_4082.y, x_4082.z));
        let x_4085 : vec4<f32> = u_xlat11;
        u_xlat11 = vec4<f32>(x_4084.x, x_4084.y, x_4084.z, x_4085.w);
        let x_4087 : i32 = u_xlati76;
        let x_4090 : i32 = u_xlati76;
        let x_4094 : vec4<f32> = x_4041.x_AdditionalLightsWorldToLights[((x_4087 + 2i) / 4i)][((x_4090 + 2i) % 4i)];
        let x_4096 : vec3<f32> = vs_INTERP0;
        let x_4099 : vec4<f32> = u_xlat11;
        let x_4101 : vec3<f32> = ((vec3<f32>(x_4094.x, x_4094.y, x_4094.w) * vec3<f32>(x_4096.z, x_4096.z, x_4096.z)) + vec3<f32>(x_4099.x, x_4099.y, x_4099.z));
        let x_4102 : vec4<f32> = u_xlat11;
        u_xlat11 = vec4<f32>(x_4101.x, x_4101.y, x_4101.z, x_4102.w);
        let x_4104 : vec4<f32> = u_xlat11;
        let x_4106 : i32 = u_xlati76;
        let x_4109 : i32 = u_xlati76;
        let x_4113 : vec4<f32> = x_4041.x_AdditionalLightsWorldToLights[((x_4106 + 3i) / 4i)][((x_4109 + 3i) % 4i)];
        let x_4115 : vec3<f32> = (vec3<f32>(x_4104.x, x_4104.y, x_4104.z) + vec3<f32>(x_4113.x, x_4113.y, x_4113.w));
        let x_4116 : vec4<f32> = u_xlat11;
        u_xlat11 = vec4<f32>(x_4115.x, x_4115.y, x_4115.z, x_4116.w);
        let x_4118 : vec4<f32> = u_xlat11;
        let x_4120 : vec4<f32> = u_xlat11;
        let x_4122 : vec2<f32> = (vec2<f32>(x_4118.x, x_4118.y) / vec2<f32>(x_4120.z, x_4120.z));
        let x_4123 : vec4<f32> = u_xlat11;
        u_xlat11 = vec4<f32>(x_4122.x, x_4122.y, x_4123.z, x_4123.w);
        let x_4125 : vec4<f32> = u_xlat11;
        let x_4128 : vec2<f32> = ((vec2<f32>(x_4125.x, x_4125.y) * vec2<f32>(0.5f, 0.5f)) + vec2<f32>(0.5f, 0.5f));
        let x_4129 : vec4<f32> = u_xlat11;
        u_xlat11 = vec4<f32>(x_4128.x, x_4128.y, x_4129.z, x_4129.w);
        let x_4131 : vec4<f32> = u_xlat11;
        let x_4135 : vec2<f32> = clamp(vec2<f32>(x_4131.x, x_4131.y), vec2<f32>(0.0f, 0.0f), vec2<f32>(1.0f, 1.0f));
        let x_4136 : vec4<f32> = u_xlat11;
        u_xlat11 = vec4<f32>(x_4135.x, x_4135.y, x_4136.z, x_4136.w);
        let x_4138 : u32 = u_xlatu68;
        let x_4141 : vec4<f32> = x_4041.x_AdditionalLightsCookieAtlasUVRects[bitcast<i32>(x_4138)];
        let x_4143 : vec4<f32> = u_xlat11;
        let x_4146 : u32 = u_xlatu68;
        let x_4149 : vec4<f32> = x_4041.x_AdditionalLightsCookieAtlasUVRects[bitcast<i32>(x_4146)];
        let x_4151 : vec2<f32> = ((vec2<f32>(x_4141.x, x_4141.y) * vec2<f32>(x_4143.x, x_4143.y)) + vec2<f32>(x_4149.z, x_4149.w));
        let x_4152 : vec4<f32> = u_xlat11;
        u_xlat11 = vec4<f32>(x_4151.x, x_4151.y, x_4152.z, x_4152.w);
      } else {
        let x_4156 : i32 = u_xlati74;
        u_xlatb74 = (x_4156 == 1i);
        let x_4158 : bool = u_xlatb74;
        u_xlati74 = select(0i, 1i, x_4158);
        let x_4160 : i32 = u_xlati74;
        if ((x_4160 != 0i)) {
          let x_4164 : vec3<f32> = vs_INTERP0;
          let x_4166 : i32 = u_xlati76;
          let x_4169 : i32 = u_xlati76;
          let x_4173 : vec4<f32> = x_4041.x_AdditionalLightsWorldToLights[((x_4166 + 1i) / 4i)][((x_4169 + 1i) % 4i)];
          u_xlat55 = (vec2<f32>(x_4164.y, x_4164.y) * vec2<f32>(x_4173.x, x_4173.y));
          let x_4176 : i32 = u_xlati76;
          let x_4178 : i32 = u_xlati76;
          let x_4181 : vec4<f32> = x_4041.x_AdditionalLightsWorldToLights[(x_4176 / 4i)][(x_4178 % 4i)];
          let x_4183 : vec3<f32> = vs_INTERP0;
          let x_4186 : vec2<f32> = u_xlat55;
          u_xlat55 = ((vec2<f32>(x_4181.x, x_4181.y) * vec2<f32>(x_4183.x, x_4183.x)) + x_4186);
          let x_4188 : i32 = u_xlati76;
          let x_4191 : i32 = u_xlati76;
          let x_4195 : vec4<f32> = x_4041.x_AdditionalLightsWorldToLights[((x_4188 + 2i) / 4i)][((x_4191 + 2i) % 4i)];
          let x_4197 : vec3<f32> = vs_INTERP0;
          let x_4200 : vec2<f32> = u_xlat55;
          u_xlat55 = ((vec2<f32>(x_4195.x, x_4195.y) * vec2<f32>(x_4197.z, x_4197.z)) + x_4200);
          let x_4202 : vec2<f32> = u_xlat55;
          let x_4203 : i32 = u_xlati76;
          let x_4206 : i32 = u_xlati76;
          let x_4210 : vec4<f32> = x_4041.x_AdditionalLightsWorldToLights[((x_4203 + 3i) / 4i)][((x_4206 + 3i) % 4i)];
          u_xlat55 = (x_4202 + vec2<f32>(x_4210.x, x_4210.y));
          let x_4213 : vec2<f32> = u_xlat55;
          u_xlat55 = ((x_4213 * vec2<f32>(0.5f, 0.5f)) + vec2<f32>(0.5f, 0.5f));
          let x_4216 : vec2<f32> = u_xlat55;
          u_xlat55 = fract(x_4216);
          let x_4218 : u32 = u_xlatu68;
          let x_4221 : vec4<f32> = x_4041.x_AdditionalLightsCookieAtlasUVRects[bitcast<i32>(x_4218)];
          let x_4223 : vec2<f32> = u_xlat55;
          let x_4225 : u32 = u_xlatu68;
          let x_4228 : vec4<f32> = x_4041.x_AdditionalLightsCookieAtlasUVRects[bitcast<i32>(x_4225)];
          let x_4230 : vec2<f32> = ((vec2<f32>(x_4221.x, x_4221.y) * x_4223) + vec2<f32>(x_4228.z, x_4228.w));
          let x_4231 : vec4<f32> = u_xlat11;
          u_xlat11 = vec4<f32>(x_4230.x, x_4230.y, x_4231.z, x_4231.w);
        } else {
          let x_4234 : vec3<f32> = vs_INTERP0;
          let x_4236 : i32 = u_xlati76;
          let x_4239 : i32 = u_xlati76;
          let x_4243 : vec4<f32> = x_4041.x_AdditionalLightsWorldToLights[((x_4236 + 1i) / 4i)][((x_4239 + 1i) % 4i)];
          u_xlat12 = (vec4<f32>(x_4234.y, x_4234.y, x_4234.y, x_4234.y) * x_4243);
          let x_4245 : i32 = u_xlati76;
          let x_4247 : i32 = u_xlati76;
          let x_4250 : vec4<f32> = x_4041.x_AdditionalLightsWorldToLights[(x_4245 / 4i)][(x_4247 % 4i)];
          let x_4251 : vec3<f32> = vs_INTERP0;
          let x_4254 : vec4<f32> = u_xlat12;
          u_xlat12 = ((x_4250 * vec4<f32>(x_4251.x, x_4251.x, x_4251.x, x_4251.x)) + x_4254);
          let x_4256 : i32 = u_xlati76;
          let x_4259 : i32 = u_xlati76;
          let x_4263 : vec4<f32> = x_4041.x_AdditionalLightsWorldToLights[((x_4256 + 2i) / 4i)][((x_4259 + 2i) % 4i)];
          let x_4264 : vec3<f32> = vs_INTERP0;
          let x_4267 : vec4<f32> = u_xlat12;
          u_xlat12 = ((x_4263 * vec4<f32>(x_4264.z, x_4264.z, x_4264.z, x_4264.z)) + x_4267);
          let x_4269 : vec4<f32> = u_xlat12;
          let x_4270 : i32 = u_xlati76;
          let x_4273 : i32 = u_xlati76;
          let x_4277 : vec4<f32> = x_4041.x_AdditionalLightsWorldToLights[((x_4270 + 3i) / 4i)][((x_4273 + 3i) % 4i)];
          u_xlat12 = (x_4269 + x_4277);
          let x_4279 : vec4<f32> = u_xlat12;
          let x_4281 : vec4<f32> = u_xlat12;
          let x_4283 : vec3<f32> = (vec3<f32>(x_4279.x, x_4279.y, x_4279.z) / vec3<f32>(x_4281.w, x_4281.w, x_4281.w));
          let x_4284 : vec4<f32> = u_xlat12;
          u_xlat12 = vec4<f32>(x_4283.x, x_4283.y, x_4283.z, x_4284.w);
          let x_4286 : vec4<f32> = u_xlat12;
          let x_4288 : vec4<f32> = u_xlat12;
          u_xlat74 = dot(vec3<f32>(x_4286.x, x_4286.y, x_4286.z), vec3<f32>(x_4288.x, x_4288.y, x_4288.z));
          let x_4291 : f32 = u_xlat74;
          u_xlat74 = inverseSqrt(x_4291);
          let x_4293 : f32 = u_xlat74;
          let x_4295 : vec4<f32> = u_xlat12;
          let x_4297 : vec3<f32> = (vec3<f32>(x_4293, x_4293, x_4293) * vec3<f32>(x_4295.x, x_4295.y, x_4295.z));
          let x_4298 : vec4<f32> = u_xlat12;
          u_xlat12 = vec4<f32>(x_4297.x, x_4297.y, x_4297.z, x_4298.w);
          let x_4300 : vec4<f32> = u_xlat12;
          u_xlat74 = dot(abs(vec3<f32>(x_4300.x, x_4300.y, x_4300.z)), vec3<f32>(1.0f, 1.0f, 1.0f));
          let x_4305 : f32 = u_xlat74;
          u_xlat74 = max(x_4305, 0.000001f);
          let x_4308 : f32 = u_xlat74;
          u_xlat74 = (1.0f / x_4308);
          let x_4310 : f32 = u_xlat74;
          let x_4312 : vec4<f32> = u_xlat12;
          let x_4314 : vec3<f32> = (vec3<f32>(x_4310, x_4310, x_4310) * vec3<f32>(x_4312.z, x_4312.x, x_4312.y));
          let x_4315 : vec4<f32> = u_xlat13;
          u_xlat13 = vec4<f32>(x_4314.x, x_4314.y, x_4314.z, x_4315.w);
          let x_4318 : f32 = u_xlat13.x;
          u_xlat13.x = -(x_4318);
          let x_4322 : f32 = u_xlat13.x;
          u_xlat13.x = clamp(x_4322, 0.0f, 1.0f);
          let x_4326 : vec4<f32> = u_xlat13;
          let x_4329 : vec4<bool> = (vec4<f32>(x_4326.y, x_4326.z, x_4326.y, x_4326.z) >= vec4<f32>(0.0f, 0.0f, 0.0f, 0.0f));
          u_xlatb55 = vec2<bool>(x_4329.x, x_4329.y);
          let x_4332 : bool = u_xlatb55.x;
          if (x_4332) {
            let x_4337 : f32 = u_xlat13.x;
            x_4333 = x_4337;
          } else {
            let x_4340 : f32 = u_xlat13.x;
            x_4333 = -(x_4340);
          }
          let x_4342 : f32 = x_4333;
          u_xlat55.x = x_4342;
          let x_4345 : bool = u_xlatb55.y;
          if (x_4345) {
            let x_4350 : f32 = u_xlat13.x;
            x_4346 = x_4350;
          } else {
            let x_4353 : f32 = u_xlat13.x;
            x_4346 = -(x_4353);
          }
          let x_4355 : f32 = x_4346;
          u_xlat55.y = x_4355;
          let x_4357 : vec4<f32> = u_xlat12;
          let x_4359 : f32 = u_xlat74;
          let x_4362 : vec2<f32> = u_xlat55;
          u_xlat55 = ((vec2<f32>(x_4357.x, x_4357.y) * vec2<f32>(x_4359, x_4359)) + x_4362);
          let x_4364 : vec2<f32> = u_xlat55;
          u_xlat55 = ((x_4364 * vec2<f32>(0.5f, 0.5f)) + vec2<f32>(0.5f, 0.5f));
          let x_4367 : vec2<f32> = u_xlat55;
          u_xlat55 = clamp(x_4367, vec2<f32>(0.0f, 0.0f), vec2<f32>(1.0f, 1.0f));
          let x_4371 : u32 = u_xlatu68;
          let x_4374 : vec4<f32> = x_4041.x_AdditionalLightsCookieAtlasUVRects[bitcast<i32>(x_4371)];
          let x_4376 : vec2<f32> = u_xlat55;
          let x_4378 : u32 = u_xlatu68;
          let x_4381 : vec4<f32> = x_4041.x_AdditionalLightsCookieAtlasUVRects[bitcast<i32>(x_4378)];
          let x_4383 : vec2<f32> = ((vec2<f32>(x_4374.x, x_4374.y) * x_4376) + vec2<f32>(x_4381.z, x_4381.w));
          let x_4384 : vec4<f32> = u_xlat11;
          u_xlat11 = vec4<f32>(x_4383.x, x_4383.y, x_4384.z, x_4384.w);
        }
      }
      let x_4391 : vec4<f32> = u_xlat11;
      let x_4394 : f32 = x_90.x_GlobalMipBias.x;
      let x_4395 : vec4<f32> = textureSampleBias(x_AdditionalLightsCookieAtlasTexture, sampler_AdditionalLightsCookieAtlasTexture, vec2<f32>(x_4391.x, x_4391.y), x_4394);
      u_xlat11 = x_4395;
      let x_4397 : bool = u_xlatb51.y;
      if (x_4397) {
        let x_4402 : f32 = u_xlat11.w;
        x_4398 = x_4402;
      } else {
        let x_4405 : f32 = u_xlat11.x;
        x_4398 = x_4405;
      }
      let x_4406 : f32 = x_4398;
      u_xlat74 = x_4406;
      let x_4408 : bool = u_xlatb51.x;
      if (x_4408) {
        let x_4412 : vec4<f32> = u_xlat11;
        x_4409 = vec3<f32>(x_4412.x, x_4412.y, x_4412.z);
      } else {
        let x_4415 : f32 = u_xlat74;
        x_4409 = vec3<f32>(x_4415, x_4415, x_4415);
      }
      let x_4417 : vec3<f32> = x_4409;
      let x_4418 : vec4<f32> = u_xlat11;
      u_xlat11 = vec4<f32>(x_4417.x, x_4417.y, x_4417.z, x_4418.w);
    } else {
      u_xlat11.x = 1.0f;
      u_xlat11.y = 1.0f;
      u_xlat11.z = 1.0f;
    }
    let x_4424 : vec4<f32> = u_xlat11;
    let x_4426 : u32 = u_xlatu68;
    let x_4429 : vec4<f32> = x_3931.x_AdditionalLightsColor[bitcast<i32>(x_4426)];
    let x_4431 : vec3<f32> = (vec3<f32>(x_4424.x, x_4424.y, x_4424.z) * vec3<f32>(x_4429.x, x_4429.y, x_4429.z));
    let x_4432 : vec4<f32> = u_xlat11;
    u_xlat11 = vec4<f32>(x_4431.x, x_4431.y, x_4431.z, x_4432.w);
    let x_4434 : f32 = u_xlat29;
    let x_4436 : vec4<f32> = u_xlat11;
    let x_4438 : vec3<f32> = (vec3<f32>(x_4434, x_4434, x_4434) * vec3<f32>(x_4436.x, x_4436.y, x_4436.z));
    let x_4439 : vec4<f32> = u_xlat11;
    u_xlat11 = vec4<f32>(x_4438.x, x_4438.y, x_4438.z, x_4439.w);
    let x_4441 : vec4<f32> = u_xlat3;
    let x_4443 : vec4<f32> = u_xlat10;
    u_xlat68 = dot(vec3<f32>(x_4441.x, x_4441.y, x_4441.z), vec3<f32>(x_4443.x, x_4443.y, x_4443.z));
    let x_4446 : f32 = u_xlat68;
    u_xlat68 = clamp(x_4446, 0.0f, 1.0f);
    let x_4448 : f32 = u_xlat68;
    let x_4449 : f32 = u_xlat70;
    u_xlat68 = (x_4448 * x_4449);
    let x_4451 : f32 = u_xlat68;
    let x_4453 : vec4<f32> = u_xlat11;
    let x_4455 : vec3<f32> = (vec3<f32>(x_4451, x_4451, x_4451) * vec3<f32>(x_4453.x, x_4453.y, x_4453.z));
    let x_4456 : vec4<f32> = u_xlat11;
    u_xlat11 = vec4<f32>(x_4455.x, x_4455.y, x_4455.z, x_4456.w);
    let x_4458 : vec4<f32> = u_xlat9;
    let x_4460 : f32 = u_xlat71;
    let x_4463 : vec3<f32> = u_xlat2;
    let x_4464 : vec3<f32> = ((vec3<f32>(x_4458.x, x_4458.y, x_4458.z) * vec3<f32>(x_4460, x_4460, x_4460)) + x_4463);
    let x_4465 : vec4<f32> = u_xlat9;
    u_xlat9 = vec4<f32>(x_4464.x, x_4464.y, x_4464.z, x_4465.w);
    let x_4467 : vec4<f32> = u_xlat9;
    let x_4469 : vec4<f32> = u_xlat9;
    u_xlat68 = dot(vec3<f32>(x_4467.x, x_4467.y, x_4467.z), vec3<f32>(x_4469.x, x_4469.y, x_4469.z));
    let x_4472 : f32 = u_xlat68;
    u_xlat68 = max(x_4472, 1.17549435e-37f);
    let x_4474 : f32 = u_xlat68;
    u_xlat68 = inverseSqrt(x_4474);
    let x_4476 : f32 = u_xlat68;
    let x_4478 : vec4<f32> = u_xlat9;
    let x_4480 : vec3<f32> = (vec3<f32>(x_4476, x_4476, x_4476) * vec3<f32>(x_4478.x, x_4478.y, x_4478.z));
    let x_4481 : vec4<f32> = u_xlat9;
    u_xlat9 = vec4<f32>(x_4480.x, x_4480.y, x_4480.z, x_4481.w);
    let x_4483 : vec4<f32> = u_xlat3;
    let x_4485 : vec4<f32> = u_xlat9;
    u_xlat68 = dot(vec3<f32>(x_4483.x, x_4483.y, x_4483.z), vec3<f32>(x_4485.x, x_4485.y, x_4485.z));
    let x_4488 : f32 = u_xlat68;
    u_xlat68 = clamp(x_4488, 0.0f, 1.0f);
    let x_4490 : vec4<f32> = u_xlat10;
    let x_4492 : vec4<f32> = u_xlat9;
    u_xlat70 = dot(vec3<f32>(x_4490.x, x_4490.y, x_4490.z), vec3<f32>(x_4492.x, x_4492.y, x_4492.z));
    let x_4495 : f32 = u_xlat70;
    u_xlat70 = clamp(x_4495, 0.0f, 1.0f);
    let x_4497 : f32 = u_xlat68;
    let x_4498 : f32 = u_xlat68;
    u_xlat68 = (x_4497 * x_4498);
    let x_4500 : f32 = u_xlat68;
    let x_4502 : f32 = u_xlat45.x;
    u_xlat68 = ((x_4500 * x_4502) + 1.000010014f);
    let x_4505 : f32 = u_xlat70;
    let x_4506 : f32 = u_xlat70;
    u_xlat70 = (x_4505 * x_4506);
    let x_4508 : f32 = u_xlat68;
    let x_4509 : f32 = u_xlat68;
    u_xlat68 = (x_4508 * x_4509);
    let x_4511 : f32 = u_xlat70;
    u_xlat70 = max(x_4511, 0.100000001f);
    let x_4513 : f32 = u_xlat68;
    let x_4514 : f32 = u_xlat70;
    u_xlat68 = (x_4513 * x_4514);
    let x_4516 : f32 = u_xlat72;
    let x_4517 : f32 = u_xlat68;
    u_xlat68 = (x_4516 * x_4517);
    let x_4519 : f32 = u_xlat69;
    let x_4520 : f32 = u_xlat68;
    u_xlat68 = (x_4519 / x_4520);
    let x_4522 : f32 = u_xlat68;
    let x_4525 : vec3<f32> = u_xlat4;
    let x_4526 : vec3<f32> = ((vec3<f32>(x_4522, x_4522, x_4522) * vec3<f32>(0.039999999f, 0.039999999f, 0.039999999f)) + x_4525);
    let x_4527 : vec4<f32> = u_xlat9;
    u_xlat9 = vec4<f32>(x_4526.x, x_4526.y, x_4526.z, x_4527.w);
    let x_4529 : vec4<f32> = u_xlat9;
    let x_4531 : vec4<f32> = u_xlat11;
    let x_4534 : vec4<f32> = u_xlat8;
    let x_4536 : vec3<f32> = ((vec3<f32>(x_4529.x, x_4529.y, x_4529.z) * vec3<f32>(x_4531.x, x_4531.y, x_4531.z)) + vec3<f32>(x_4534.x, x_4534.y, x_4534.z));
    let x_4537 : vec4<f32> = u_xlat8;
    u_xlat8 = vec4<f32>(x_4536.x, x_4536.y, x_4536.z, x_4537.w);

    continuing {
      let x_4539 : u32 = u_xlatu_loop_1;
      u_xlatu_loop_1 = (x_4539 + bitcast<u32>(1i));
    }
  }
  let x_4541 : vec4<f32> = u_xlat5;
  let x_4543 : vec4<f32> = u_xlat7;
  let x_4546 : vec4<f32> = u_xlat6;
  u_xlat2 = ((vec3<f32>(x_4541.x, x_4541.y, x_4541.z) * vec3<f32>(x_4543.x, x_4543.x, x_4543.x)) + vec3<f32>(x_4546.x, x_4546.y, x_4546.z));
  let x_4549 : vec4<f32> = u_xlat8;
  let x_4551 : vec3<f32> = u_xlat2;
  u_xlat2 = (vec3<f32>(x_4549.x, x_4549.y, x_4549.z) + x_4551);
  let x_4555 : vec4<f32> = vs_INTERP4;
  let x_4557 : vec3<f32> = u_xlat0;
  let x_4559 : vec3<f32> = u_xlat2;
  let x_4560 : vec3<f32> = ((vec3<f32>(x_4555.w, x_4555.w, x_4555.w) * x_4557) + x_4559);
  let x_4561 : vec4<f32> = SV_Target0;
  SV_Target0 = vec4<f32>(x_4560.x, x_4560.y, x_4560.z, x_4561.w);
  let x_4563 : bool = u_xlatb23;
  if (x_4563) {
    let x_4568 : f32 = u_xlat1.x;
    x_4564 = x_4568;
  } else {
    x_4564 = 1.0f;
  }
  let x_4570 : f32 = x_4564;
  SV_Target0.w = x_4570;
  return;
}

struct main_out {
  @location(0)
  SV_Target0_1 : vec4<f32>,
}

@fragment
fn main(@builtin(position) gl_FragCoord_param : vec4<f32>, @location(1) vs_INTERP1_param : vec3<f32>, @location(0) vs_INTERP0_param : vec3<f32>, @location(3) vs_INTERP3_param : vec4<f32>, @location(4) vs_INTERP4_param : vec4<f32>, @location(2) vs_INTERP2_param : vec4<f32>) -> main_out {
  gl_FragCoord = gl_FragCoord_param;
  vs_INTERP1 = vs_INTERP1_param;
  vs_INTERP0 = vs_INTERP0_param;
  vs_INTERP3 = vs_INTERP3_param;
  vs_INTERP4 = vs_INTERP4_param;
  vs_INTERP2 = vs_INTERP2_param;
  main_1();
  return main_out(SV_Target0);
}

