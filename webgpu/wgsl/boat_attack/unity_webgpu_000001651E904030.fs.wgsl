type Arr = array<vec4<f32>, 2u>;

struct UnityPerDraw {
  unity_ObjectToWorld : mat4x4<f32>,
  unity_WorldToObject : mat4x4<f32>,
  unity_LODFade : vec4<f32>,
  unity_WorldTransformParams : vec4<f32>,
  unity_RenderingLayer : vec4<f32>,
  unity_LightData : vec4<f32>,
  unity_LightIndices : Arr,
  unity_ProbesOcclusion : vec4<f32>,
  unity_SpecCube0_HDR : vec4<f32>,
  unity_SpecCube1_HDR : vec4<f32>,
  unity_SpecCube0_BoxMax : vec4<f32>,
  unity_SpecCube0_BoxMin : vec4<f32>,
  unity_SpecCube0_ProbePosition : vec4<f32>,
  unity_SpecCube1_BoxMax : vec4<f32>,
  unity_SpecCube1_BoxMin : vec4<f32>,
  unity_SpecCube1_ProbePosition : vec4<f32>,
  unity_LightmapST : vec4<f32>,
  unity_DynamicLightmapST : vec4<f32>,
  unity_SHAr : vec4<f32>,
  unity_SHAg : vec4<f32>,
  unity_SHAb : vec4<f32>,
  unity_SHBr : vec4<f32>,
  unity_SHBg : vec4<f32>,
  unity_SHBb : vec4<f32>,
  unity_SHC : vec4<f32>,
  unity_RendererBounds_Min : vec4<f32>,
  unity_RendererBounds_Max : vec4<f32>,
  unity_MatrixPreviousM : mat4x4<f32>,
  unity_MatrixPreviousMI : mat4x4<f32>,
  unity_MotionVectorsParams : vec4<f32>,
  unity_SpriteColor : vec4<f32>,
  unity_SpriteProps : vec4<f32>,
}

struct PGlobals {
  x_ScaledScreenParams : vec4<f32>,
  x_GlobalMipBias : vec2<f32>,
  x_AlphaToMaskAvailable : f32,
  @size(4)
  padding : u32,
  x_MainLightPosition : vec4<f32>,
  x_MainLightColor : vec4<f32>,
  x_AmbientOcclusionParam : vec4<f32>,
  x_AdditionalLightsCount : vec4<f32>,
  x_RenderingLayerMaxInt : u32,
  x_RenderingLayerRcpMaxInt : f32,
  @size(8)
  padding_1 : u32,
  x_WorldSpaceCameraPos : vec3<f32>,
  @size(4)
  padding_2 : u32,
  x_ProjectionParams : vec4<f32>,
  unity_OrthoParams : vec4<f32>,
  x_ScaleBiasRt : vec4<f32>,
  unity_FogParams : vec4<f32>,
  unity_FogColor : vec4<f32>,
  unity_MatrixV : mat4x4<f32>,
}

struct UnityPerMaterial {
  Texture2D_B222E8F_TexelSize : vec4<f32>,
  Color_C30C7CA3 : vec4<f32>,
  Texture2D_D9BFD5F1_TexelSize : vec4<f32>,
}

type Arr_1 = array<mat4x4<f32>, 5u>;

struct MainLightShadows {
  x_MainLightWorldToShadow : Arr_1,
  x_CascadeShadowSplitSpheres0 : vec4<f32>,
  x_CascadeShadowSplitSpheres1 : vec4<f32>,
  x_CascadeShadowSplitSpheres2 : vec4<f32>,
  x_CascadeShadowSplitSpheres3 : vec4<f32>,
  x_CascadeShadowSplitSphereRadii : vec4<f32>,
  x_MainLightShadowOffset0 : vec4<f32>,
  x_MainLightShadowOffset1 : vec4<f32>,
  x_MainLightShadowParams : vec4<f32>,
  x_MainLightShadowmapSize : vec4<f32>,
}

struct strided_arr {
  @size(16)
  el : f32,
}

type Arr_2 = array<strided_arr, 8u>;

struct LightCookies {
  x_MainLightWorldToLight : mat4x4<f32>,
  x_AdditionalLightsCookieEnableBits : Arr_2,
  x_MainLightCookieTextureFormat : f32,
  x_AdditionalLightsCookieAtlasTextureFormat : f32,
}

type Arr_3 = array<vec4<f32>, 256u>;

type Arr_4 = array<vec4<f32>, 256u>;

type Arr_5 = array<vec4<f32>, 256u>;

type Arr_6 = array<vec4<f32>, 256u>;

type Arr_7 = array<vec4<f32>, 256u>;

struct strided_arr_1 {
  @size(16)
  el : f32,
}

type Arr_8 = array<strided_arr_1, 256u>;

type Arr_9 = array<vec4<f32>, 256u>;

type Arr_10 = array<strided_arr_1, 256u>;

struct AdditionalLights {
  x_AdditionalLightsPosition : Arr_9,
  x_AdditionalLightsColor : Arr_9,
  x_AdditionalLightsAttenuation : Arr_9,
  x_AdditionalLightsSpotDir : Arr_9,
  x_AdditionalLightsOcclusionProbes : Arr_9,
  x_AdditionalLightsLayerMasks : Arr_10,
}

type Arr_11 = array<mat4x4<f32>, 256u>;

struct AdditionalLightsCookies {
  x_AdditionalLightsWorldToLights : Arr_11,
  x_AdditionalLightsCookieAtlasUVRects : Arr_9,
  x_AdditionalLightsLightTypes : Arr_10,
}

var<private> gl_FragCoord : vec4<f32>;

var<private> vs_INTERP1 : vec3<f32>;

var<private> vs_INTERP2 : vec4<f32>;

@group(1) @binding(2) var<uniform> x_60 : UnityPerDraw;

@group(0) @binding(6) var Texture2D_B222E8F : texture_2d<f32>;

@group(0) @binding(14) var samplerTexture2D_B222E8F : sampler;

var<private> vs_INTERP3 : vec4<f32>;

@group(1) @binding(0) var<uniform> x_139 : PGlobals;

@group(1) @binding(6) var<uniform> x_149 : UnityPerMaterial;

@group(0) @binding(7) var Texture2D_D9BFD5F1 : texture_2d<f32>;

@group(0) @binding(15) var samplerTexture2D_D9BFD5F1 : sampler;

var<private> vs_INTERP4 : vec4<f32>;

var<private> vs_INTERP0 : vec3<f32>;

@group(1) @binding(3) var<uniform> x_253 : MainLightShadows;

@group(0) @binding(3) var x_MainLightShadowmapTexture : texture_depth_2d;

@group(0) @binding(11) var sampler_MainLightShadowmapTexture : sampler_comparison;

@group(0) @binding(1) var unity_Lightmap : texture_2d<f32>;

@group(0) @binding(9) var samplerunity_Lightmap : sampler;

var<private> vs_INTERP5 : vec2<f32>;

@group(0) @binding(2) var x_ScreenSpaceOcclusionTexture : texture_2d<f32>;

@group(0) @binding(10) var sampler_ScreenSpaceOcclusionTexture : sampler;

@group(1) @binding(4) var<uniform> x_3320 : LightCookies;

@group(0) @binding(4) var x_MainLightCookieTexture : texture_2d<f32>;

@group(0) @binding(12) var sampler_MainLightCookieTexture : sampler;

@group(0) @binding(0) var unity_SpecCube0 : texture_cube<f32>;

@group(0) @binding(8) var samplerunity_SpecCube0 : sampler;

@group(1) @binding(1) var<uniform> x_3797 : AdditionalLights;

@group(1) @binding(5) var<uniform> x_3906 : AdditionalLightsCookies;

@group(0) @binding(5) var x_AdditionalLightsCookieAtlasTexture : texture_2d<f32>;

@group(0) @binding(13) var sampler_AdditionalLightsCookieAtlasTexture : sampler;

var<private> SV_Target0 : vec4<f32>;

var<private> SV_Target1 : vec4<f32>;

fn main_1() {
  var hlslcc_FragCoord : vec4<f32>;
  var u_xlat0 : vec3<f32>;
  var u_xlatb22 : vec2<bool>;
  var u_xlat22 : vec3<f32>;
  var u_xlat1 : vec3<f32>;
  var u_xlat2 : vec4<f32>;
  var u_xlat3 : vec4<f32>;
  var u_xlat4 : vec4<f32>;
  var u_xlat5 : vec3<f32>;
  var u_xlat6 : vec4<f32>;
  var u_xlat7 : vec4<f32>;
  var u_xlat28 : vec3<f32>;
  var u_xlat8 : vec4<f32>;
  var u_xlatb2 : vec4<bool>;
  var u_xlatu0 : u32;
  var u_xlati0 : i32;
  var u_xlatb0 : bool;
  var u_xlatb67 : bool;
  var txVec0 : vec3<f32>;
  var txVec1 : vec3<f32>;
  var txVec2 : vec3<f32>;
  var txVec3 : vec3<f32>;
  var u_xlat67 : f32;
  var u_xlatb68 : bool;
  var u_xlat47 : vec2<f32>;
  var u_xlat52 : vec2<f32>;
  var u_xlat9 : vec4<f32>;
  var u_xlat10 : vec4<f32>;
  var u_xlat11 : vec4<f32>;
  var u_xlat12 : vec4<f32>;
  var u_xlat13 : vec4<f32>;
  var u_xlat14 : vec4<f32>;
  var u_xlat68 : f32;
  var txVec4 : vec3<f32>;
  var txVec5 : vec3<f32>;
  var u_xlat25 : f32;
  var txVec6 : vec3<f32>;
  var txVec7 : vec3<f32>;
  var txVec8 : vec3<f32>;
  var txVec9 : vec3<f32>;
  var txVec10 : vec3<f32>;
  var txVec11 : vec3<f32>;
  var txVec12 : vec3<f32>;
  var u_xlat29 : vec3<f32>;
  var u_xlat15 : vec4<f32>;
  var u_xlat16 : vec4<f32>;
  var u_xlat30 : vec2<f32>;
  var u_xlat58 : vec2<f32>;
  var u_xlat53 : vec2<f32>;
  var u_xlat17 : vec4<f32>;
  var u_xlat18 : vec4<f32>;
  var u_xlat19 : vec4<f32>;
  var txVec13 : vec3<f32>;
  var txVec14 : vec3<f32>;
  var u_xlat71 : f32;
  var txVec15 : vec3<f32>;
  var txVec16 : vec3<f32>;
  var txVec17 : vec3<f32>;
  var txVec18 : vec3<f32>;
  var txVec19 : vec3<f32>;
  var txVec20 : vec3<f32>;
  var txVec21 : vec3<f32>;
  var txVec22 : vec3<f32>;
  var txVec23 : vec3<f32>;
  var txVec24 : vec3<f32>;
  var txVec25 : vec3<f32>;
  var txVec26 : vec3<f32>;
  var txVec27 : vec3<f32>;
  var txVec28 : vec3<f32>;
  var txVec29 : vec3<f32>;
  var u_xlatb3 : bool;
  var u_xlatb25 : bool;
  var u_xlat23 : vec3<f32>;
  var x_1756 : f32;
  var u_xlat69 : f32;
  var u_xlatb47 : bool;
  var x_1879 : vec3<f32>;
  var u_xlat70 : f32;
  var u_xlat51 : f32;
  var txVec30 : vec3<f32>;
  var txVec31 : vec3<f32>;
  var txVec32 : vec3<f32>;
  var txVec33 : vec3<f32>;
  var u_xlatb73 : bool;
  var u_xlat54 : vec2<f32>;
  var u_xlat73 : f32;
  var txVec34 : vec3<f32>;
  var txVec35 : vec3<f32>;
  var txVec36 : vec3<f32>;
  var txVec37 : vec3<f32>;
  var txVec38 : vec3<f32>;
  var txVec39 : vec3<f32>;
  var txVec40 : vec3<f32>;
  var txVec41 : vec3<f32>;
  var txVec42 : vec3<f32>;
  var u_xlat31 : vec3<f32>;
  var u_xlat32 : vec2<f32>;
  var u_xlat60 : vec2<f32>;
  var u_xlat55 : vec2<f32>;
  var u_xlat20 : vec4<f32>;
  var u_xlat21 : vec4<f32>;
  var txVec43 : vec3<f32>;
  var txVec44 : vec3<f32>;
  var txVec45 : vec3<f32>;
  var txVec46 : vec3<f32>;
  var txVec47 : vec3<f32>;
  var txVec48 : vec3<f32>;
  var txVec49 : vec3<f32>;
  var txVec50 : vec3<f32>;
  var txVec51 : vec3<f32>;
  var txVec52 : vec3<f32>;
  var txVec53 : vec3<f32>;
  var txVec54 : vec3<f32>;
  var txVec55 : vec3<f32>;
  var txVec56 : vec3<f32>;
  var txVec57 : vec3<f32>;
  var txVec58 : vec3<f32>;
  var txVec59 : vec3<f32>;
  var x_3269 : f32;
  var u_xlat24 : f32;
  var u_xlatb8 : vec2<bool>;
  var x_3403 : f32;
  var x_3414 : vec3<f32>;
  var u_xlatu_loop_1 : u32;
  var u_xlatu69 : u32;
  var u_xlati70 : i32;
  var indexable : array<vec4<u32>, 4u>;
  var u_xlat72 : f32;
  var u_xlatu73 : u32;
  var u_xlati52 : i32;
  var u_xlati73 : i32;
  var u_xlati74 : i32;
  var u_xlat56 : vec2<f32>;
  var u_xlatb52 : vec2<bool>;
  var x_4198 : f32;
  var x_4211 : f32;
  var x_4263 : f32;
  var x_4274 : vec3<f32>;
  var u_xlat66 : f32;
  var u_xlat_precise_vec4 : vec4<f32>;
  var u_xlat_precise_ivec4 : vec4<i32>;
  var u_xlat_precise_bvec4 : vec4<bool>;
  var u_xlat_precise_uvec4 : vec4<u32>;
  let x_13 : vec4<f32> = gl_FragCoord;
  let x_14 : vec3<f32> = vec3<f32>(x_13.x, x_13.y, x_13.z);
  let x_20 : f32 = gl_FragCoord.w;
  hlslcc_FragCoord = vec4<f32>(x_14.x, x_14.y, x_14.z, (1.0f / x_20));
  let x_30 : vec3<f32> = vs_INTERP1;
  let x_31 : vec3<f32> = vs_INTERP1;
  u_xlat0.x = dot(x_30, x_31);
  let x_37 : f32 = u_xlat0.x;
  u_xlat0.x = sqrt(x_37);
  let x_41 : f32 = u_xlat0.x;
  u_xlat0.x = (1.0f / x_41);
  let x_51 : f32 = vs_INTERP2.w;
  u_xlatb22.x = (0.0f < x_51);
  let x_65 : f32 = x_60.unity_WorldTransformParams.w;
  u_xlatb22.y = (x_65 >= 0.0f);
  let x_71 : bool = u_xlatb22.x;
  u_xlat22.x = select(-1.0f, 1.0f, x_71);
  let x_76 : bool = u_xlatb22.y;
  u_xlat22.y = select(-1.0f, 1.0f, x_76);
  let x_80 : f32 = u_xlat22.y;
  let x_82 : f32 = u_xlat22.x;
  u_xlat22.x = (x_80 * x_82);
  let x_86 : vec3<f32> = vs_INTERP1;
  let x_88 : vec4<f32> = vs_INTERP2;
  u_xlat1 = (vec3<f32>(x_86.z, x_86.x, x_86.y) * vec3<f32>(x_88.y, x_88.z, x_88.x));
  let x_91 : vec3<f32> = vs_INTERP1;
  let x_93 : vec4<f32> = vs_INTERP2;
  let x_96 : vec3<f32> = u_xlat1;
  u_xlat1 = ((vec3<f32>(x_91.y, x_91.z, x_91.x) * vec3<f32>(x_93.z, x_93.x, x_93.y)) + -(x_96));
  let x_99 : vec3<f32> = u_xlat22;
  let x_101 : vec3<f32> = u_xlat1;
  u_xlat22 = (vec3<f32>(x_99.x, x_99.x, x_99.x) * x_101);
  let x_103 : vec3<f32> = u_xlat0;
  let x_105 : vec3<f32> = vs_INTERP1;
  u_xlat1 = (vec3<f32>(x_103.x, x_103.x, x_103.x) * x_105);
  let x_108 : vec3<f32> = u_xlat0;
  let x_110 : vec4<f32> = vs_INTERP2;
  let x_112 : vec3<f32> = (vec3<f32>(x_108.x, x_108.x, x_108.x) * vec3<f32>(x_110.x, x_110.y, x_110.z));
  let x_113 : vec4<f32> = u_xlat2;
  u_xlat2 = vec4<f32>(x_112.x, x_112.y, x_112.z, x_113.w);
  let x_116 : vec3<f32> = u_xlat22;
  let x_117 : vec3<f32> = u_xlat0;
  let x_119 : vec3<f32> = (x_116 * vec3<f32>(x_117.x, x_117.x, x_117.x));
  let x_120 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_119.x, x_119.y, x_119.z, x_120.w);
  let x_135 : vec4<f32> = vs_INTERP3;
  let x_142 : f32 = x_139.x_GlobalMipBias.x;
  let x_143 : vec4<f32> = textureSampleBias(Texture2D_B222E8F, samplerTexture2D_B222E8F, vec2<f32>(x_135.x, x_135.y), x_142);
  u_xlat4 = x_143;
  let x_145 : vec4<f32> = u_xlat4;
  let x_152 : vec4<f32> = x_149.Color_C30C7CA3;
  u_xlat5 = (vec3<f32>(x_145.x, x_145.y, x_145.z) * vec3<f32>(x_152.x, x_152.y, x_152.z));
  let x_161 : vec4<f32> = vs_INTERP3;
  let x_164 : f32 = x_139.x_GlobalMipBias.x;
  let x_165 : vec4<f32> = textureSampleBias(Texture2D_D9BFD5F1, samplerTexture2D_D9BFD5F1, vec2<f32>(x_161.x, x_161.y), x_164);
  u_xlat6 = vec4<f32>(x_165.w, x_165.x, x_165.y, x_165.z);
  let x_168 : vec4<f32> = u_xlat6;
  u_xlat7 = ((vec4<f32>(x_168.y, x_168.z, x_168.w, x_168.x) * vec4<f32>(2.0f, 2.0f, 2.0f, 2.0f)) + vec4<f32>(-1.0f, -1.0f, -1.0f, -1.0f));
  let x_175 : vec4<f32> = u_xlat7;
  let x_176 : vec4<f32> = u_xlat7;
  u_xlat0.x = dot(x_175, x_176);
  let x_180 : f32 = u_xlat0.x;
  u_xlat0.x = inverseSqrt(x_180);
  let x_184 : vec3<f32> = u_xlat0;
  let x_186 : vec4<f32> = u_xlat7;
  u_xlat28 = (vec3<f32>(x_184.x, x_184.x, x_184.x) * vec3<f32>(x_186.x, x_186.y, x_186.z));
  let x_191 : f32 = vs_INTERP4.y;
  u_xlat0.x = (x_191 * 200.0f);
  let x_196 : f32 = u_xlat0.x;
  u_xlat0.x = min(x_196, 1.0f);
  let x_199 : vec3<f32> = u_xlat0;
  let x_201 : vec4<f32> = u_xlat4;
  let x_203 : vec3<f32> = (vec3<f32>(x_199.x, x_199.x, x_199.x) * vec3<f32>(x_201.x, x_201.y, x_201.z));
  let x_204 : vec4<f32> = u_xlat4;
  u_xlat4 = vec4<f32>(x_203.x, x_203.y, x_203.z, x_204.w);
  let x_206 : vec4<f32> = u_xlat3;
  let x_208 : vec3<f32> = u_xlat28;
  let x_210 : vec3<f32> = (vec3<f32>(x_206.x, x_206.y, x_206.z) * vec3<f32>(x_208.y, x_208.y, x_208.y));
  let x_211 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_210.x, x_210.y, x_210.z, x_211.w);
  let x_213 : vec3<f32> = u_xlat28;
  let x_215 : vec4<f32> = u_xlat2;
  let x_218 : vec4<f32> = u_xlat3;
  let x_220 : vec3<f32> = ((vec3<f32>(x_213.x, x_213.x, x_213.x) * vec3<f32>(x_215.x, x_215.y, x_215.z)) + vec3<f32>(x_218.x, x_218.y, x_218.z));
  let x_221 : vec4<f32> = u_xlat2;
  u_xlat2 = vec4<f32>(x_220.x, x_220.y, x_220.z, x_221.w);
  let x_223 : vec3<f32> = u_xlat28;
  let x_225 : vec3<f32> = u_xlat1;
  let x_227 : vec4<f32> = u_xlat2;
  u_xlat1 = ((vec3<f32>(x_223.z, x_223.z, x_223.z) * x_225) + vec3<f32>(x_227.x, x_227.y, x_227.z));
  let x_230 : vec3<f32> = u_xlat1;
  let x_231 : vec3<f32> = u_xlat1;
  u_xlat0.x = dot(x_230, x_231);
  let x_235 : f32 = u_xlat0.x;
  u_xlat0.x = max(x_235, 1.17549435e-37f);
  let x_240 : f32 = u_xlat0.x;
  u_xlat0.x = inverseSqrt(x_240);
  let x_243 : vec3<f32> = u_xlat0;
  let x_245 : vec3<f32> = u_xlat1;
  u_xlat1 = (vec3<f32>(x_243.x, x_243.x, x_243.x) * x_245);
  let x_248 : vec3<f32> = vs_INTERP0;
  let x_255 : vec4<f32> = x_253.x_CascadeShadowSplitSpheres0;
  let x_258 : vec3<f32> = (x_248 + -(vec3<f32>(x_255.x, x_255.y, x_255.z)));
  let x_259 : vec4<f32> = u_xlat2;
  u_xlat2 = vec4<f32>(x_258.x, x_258.y, x_258.z, x_259.w);
  let x_261 : vec3<f32> = vs_INTERP0;
  let x_264 : vec4<f32> = x_253.x_CascadeShadowSplitSpheres1;
  let x_267 : vec3<f32> = (x_261 + -(vec3<f32>(x_264.x, x_264.y, x_264.z)));
  let x_268 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_267.x, x_267.y, x_267.z, x_268.w);
  let x_270 : vec3<f32> = vs_INTERP0;
  let x_272 : vec4<f32> = x_253.x_CascadeShadowSplitSpheres2;
  let x_275 : vec3<f32> = (x_270 + -(vec3<f32>(x_272.x, x_272.y, x_272.z)));
  let x_276 : vec4<f32> = u_xlat7;
  u_xlat7 = vec4<f32>(x_275.x, x_275.y, x_275.z, x_276.w);
  let x_279 : vec3<f32> = vs_INTERP0;
  let x_282 : vec4<f32> = x_253.x_CascadeShadowSplitSpheres3;
  let x_285 : vec3<f32> = (x_279 + -(vec3<f32>(x_282.x, x_282.y, x_282.z)));
  let x_286 : vec4<f32> = u_xlat8;
  u_xlat8 = vec4<f32>(x_285.x, x_285.y, x_285.z, x_286.w);
  let x_288 : vec4<f32> = u_xlat2;
  let x_290 : vec4<f32> = u_xlat2;
  u_xlat2.x = dot(vec3<f32>(x_288.x, x_288.y, x_288.z), vec3<f32>(x_290.x, x_290.y, x_290.z));
  let x_294 : vec4<f32> = u_xlat3;
  let x_296 : vec4<f32> = u_xlat3;
  u_xlat2.y = dot(vec3<f32>(x_294.x, x_294.y, x_294.z), vec3<f32>(x_296.x, x_296.y, x_296.z));
  let x_300 : vec4<f32> = u_xlat7;
  let x_302 : vec4<f32> = u_xlat7;
  u_xlat2.z = dot(vec3<f32>(x_300.x, x_300.y, x_300.z), vec3<f32>(x_302.x, x_302.y, x_302.z));
  let x_306 : vec4<f32> = u_xlat8;
  let x_308 : vec4<f32> = u_xlat8;
  u_xlat2.w = dot(vec3<f32>(x_306.x, x_306.y, x_306.z), vec3<f32>(x_308.x, x_308.y, x_308.z));
  let x_315 : vec4<f32> = u_xlat2;
  let x_318 : vec4<f32> = x_253.x_CascadeShadowSplitSphereRadii;
  u_xlatb2 = (x_315 < x_318);
  let x_321 : bool = u_xlatb2.x;
  u_xlat3.x = select(0.0f, 1.0f, x_321);
  let x_325 : bool = u_xlatb2.y;
  u_xlat3.y = select(0.0f, 1.0f, x_325);
  let x_329 : bool = u_xlatb2.z;
  u_xlat3.z = select(0.0f, 1.0f, x_329);
  let x_333 : bool = u_xlatb2.w;
  u_xlat3.w = select(0.0f, 1.0f, x_333);
  let x_337 : bool = u_xlatb2.x;
  u_xlat2.x = select(-0.0f, -1.0f, x_337);
  let x_342 : bool = u_xlatb2.y;
  u_xlat2.y = select(-0.0f, -1.0f, x_342);
  let x_346 : bool = u_xlatb2.z;
  u_xlat2.z = select(-0.0f, -1.0f, x_346);
  let x_349 : vec4<f32> = u_xlat2;
  let x_351 : vec4<f32> = u_xlat3;
  let x_353 : vec3<f32> = (vec3<f32>(x_349.x, x_349.y, x_349.z) + vec3<f32>(x_351.y, x_351.z, x_351.w));
  let x_354 : vec4<f32> = u_xlat2;
  u_xlat2 = vec4<f32>(x_353.x, x_353.y, x_353.z, x_354.w);
  let x_356 : vec4<f32> = u_xlat2;
  let x_359 : vec3<f32> = max(vec3<f32>(x_356.x, x_356.y, x_356.z), vec3<f32>(0.0f, 0.0f, 0.0f));
  let x_360 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_360.x, x_359.x, x_359.y, x_359.z);
  let x_362 : vec4<f32> = u_xlat3;
  u_xlat0.x = dot(x_362, vec4<f32>(4.0f, 3.0f, 2.0f, 1.0f));
  let x_369 : f32 = u_xlat0.x;
  u_xlat0.x = (-(x_369) + 4.0f);
  let x_376 : f32 = u_xlat0.x;
  u_xlatu0 = u32(x_376);
  let x_380 : u32 = u_xlatu0;
  u_xlati0 = (bitcast<i32>(x_380) << bitcast<u32>(2i));
  let x_383 : vec3<f32> = vs_INTERP0;
  let x_386 : i32 = u_xlati0;
  let x_389 : i32 = u_xlati0;
  let x_393 : vec4<f32> = x_253.x_MainLightWorldToShadow[((x_386 + 1i) / 4i)][((x_389 + 1i) % 4i)];
  let x_395 : vec3<f32> = (vec3<f32>(x_383.y, x_383.y, x_383.y) * vec3<f32>(x_393.x, x_393.y, x_393.z));
  let x_396 : vec4<f32> = u_xlat2;
  u_xlat2 = vec4<f32>(x_395.x, x_395.y, x_395.z, x_396.w);
  let x_398 : i32 = u_xlati0;
  let x_400 : i32 = u_xlati0;
  let x_403 : vec4<f32> = x_253.x_MainLightWorldToShadow[(x_398 / 4i)][(x_400 % 4i)];
  let x_405 : vec3<f32> = vs_INTERP0;
  let x_408 : vec4<f32> = u_xlat2;
  let x_410 : vec3<f32> = ((vec3<f32>(x_403.x, x_403.y, x_403.z) * vec3<f32>(x_405.x, x_405.x, x_405.x)) + vec3<f32>(x_408.x, x_408.y, x_408.z));
  let x_411 : vec4<f32> = u_xlat2;
  u_xlat2 = vec4<f32>(x_410.x, x_410.y, x_410.z, x_411.w);
  let x_413 : i32 = u_xlati0;
  let x_416 : i32 = u_xlati0;
  let x_420 : vec4<f32> = x_253.x_MainLightWorldToShadow[((x_413 + 2i) / 4i)][((x_416 + 2i) % 4i)];
  let x_422 : vec3<f32> = vs_INTERP0;
  let x_425 : vec4<f32> = u_xlat2;
  let x_427 : vec3<f32> = ((vec3<f32>(x_420.x, x_420.y, x_420.z) * vec3<f32>(x_422.z, x_422.z, x_422.z)) + vec3<f32>(x_425.x, x_425.y, x_425.z));
  let x_428 : vec4<f32> = u_xlat2;
  u_xlat2 = vec4<f32>(x_427.x, x_427.y, x_427.z, x_428.w);
  let x_430 : vec4<f32> = u_xlat2;
  let x_432 : i32 = u_xlati0;
  let x_435 : i32 = u_xlati0;
  let x_439 : vec4<f32> = x_253.x_MainLightWorldToShadow[((x_432 + 3i) / 4i)][((x_435 + 3i) % 4i)];
  let x_441 : vec3<f32> = (vec3<f32>(x_430.x, x_430.y, x_430.z) + vec3<f32>(x_439.x, x_439.y, x_439.z));
  let x_442 : vec4<f32> = u_xlat2;
  u_xlat2 = vec4<f32>(x_441.x, x_441.y, x_441.z, x_442.w);
  let x_447 : f32 = x_253.x_MainLightShadowParams.y;
  u_xlatb0 = (0.0f < x_447);
  let x_449 : bool = u_xlatb0;
  if (x_449) {
    let x_454 : f32 = x_253.x_MainLightShadowParams.y;
    u_xlatb67 = (x_454 == 1.0f);
    let x_456 : bool = u_xlatb67;
    if (x_456) {
      let x_459 : vec4<f32> = u_xlat2;
      let x_463 : vec4<f32> = x_253.x_MainLightShadowOffset0;
      u_xlat3 = (vec4<f32>(x_459.x, x_459.y, x_459.x, x_459.y) + x_463);
      let x_466 : vec4<f32> = u_xlat3;
      let x_467 : vec2<f32> = vec2<f32>(x_466.x, x_466.y);
      let x_469 : f32 = u_xlat2.z;
      txVec0 = vec3<f32>(x_467.x, x_467.y, x_469);
      let x_481 : vec3<f32> = txVec0;
      let x_483 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_481.xy, x_481.z);
      u_xlat7.x = x_483;
      let x_486 : vec4<f32> = u_xlat3;
      let x_487 : vec2<f32> = vec2<f32>(x_486.z, x_486.w);
      let x_489 : f32 = u_xlat2.z;
      txVec1 = vec3<f32>(x_487.x, x_487.y, x_489);
      let x_496 : vec3<f32> = txVec1;
      let x_498 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_496.xy, x_496.z);
      u_xlat7.y = x_498;
      let x_500 : vec4<f32> = u_xlat2;
      let x_504 : vec4<f32> = x_253.x_MainLightShadowOffset1;
      u_xlat3 = (vec4<f32>(x_500.x, x_500.y, x_500.x, x_500.y) + x_504);
      let x_507 : vec4<f32> = u_xlat3;
      let x_508 : vec2<f32> = vec2<f32>(x_507.x, x_507.y);
      let x_510 : f32 = u_xlat2.z;
      txVec2 = vec3<f32>(x_508.x, x_508.y, x_510);
      let x_517 : vec3<f32> = txVec2;
      let x_519 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_517.xy, x_517.z);
      u_xlat7.z = x_519;
      let x_522 : vec4<f32> = u_xlat3;
      let x_523 : vec2<f32> = vec2<f32>(x_522.z, x_522.w);
      let x_525 : f32 = u_xlat2.z;
      txVec3 = vec3<f32>(x_523.x, x_523.y, x_525);
      let x_532 : vec3<f32> = txVec3;
      let x_534 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_532.xy, x_532.z);
      u_xlat7.w = x_534;
      let x_537 : vec4<f32> = u_xlat7;
      u_xlat67 = dot(x_537, vec4<f32>(0.25f, 0.25f, 0.25f, 0.25f));
    } else {
      let x_544 : f32 = x_253.x_MainLightShadowParams.y;
      u_xlatb68 = (x_544 == 2.0f);
      let x_546 : bool = u_xlatb68;
      if (x_546) {
        let x_549 : vec4<f32> = u_xlat2;
        let x_553 : vec4<f32> = x_253.x_MainLightShadowmapSize;
        let x_558 : vec2<f32> = ((vec2<f32>(x_549.x, x_549.y) * vec2<f32>(x_553.z, x_553.w)) + vec2<f32>(0.5f, 0.5f));
        let x_559 : vec4<f32> = u_xlat3;
        u_xlat3 = vec4<f32>(x_558.x, x_558.y, x_559.z, x_559.w);
        let x_561 : vec4<f32> = u_xlat3;
        let x_563 : vec2<f32> = floor(vec2<f32>(x_561.x, x_561.y));
        let x_564 : vec4<f32> = u_xlat3;
        u_xlat3 = vec4<f32>(x_563.x, x_563.y, x_564.z, x_564.w);
        let x_568 : vec4<f32> = u_xlat2;
        let x_571 : vec4<f32> = x_253.x_MainLightShadowmapSize;
        let x_574 : vec4<f32> = u_xlat3;
        u_xlat47 = ((vec2<f32>(x_568.x, x_568.y) * vec2<f32>(x_571.z, x_571.w)) + -(vec2<f32>(x_574.x, x_574.y)));
        let x_578 : vec2<f32> = u_xlat47;
        u_xlat7 = (vec4<f32>(x_578.x, x_578.x, x_578.y, x_578.y) + vec4<f32>(0.5f, 1.0f, 0.5f, 1.0f));
        let x_582 : vec4<f32> = u_xlat7;
        let x_584 : vec4<f32> = u_xlat7;
        u_xlat8 = (vec4<f32>(x_582.x, x_582.x, x_582.z, x_582.z) * vec4<f32>(x_584.x, x_584.x, x_584.z, x_584.z));
        let x_587 : vec4<f32> = u_xlat8;
        let x_591 : vec2<f32> = (vec2<f32>(x_587.y, x_587.w) * vec2<f32>(0.079999998f, 0.079999998f));
        let x_592 : vec4<f32> = u_xlat7;
        u_xlat7 = vec4<f32>(x_591.x, x_592.y, x_591.y, x_592.w);
        let x_594 : vec4<f32> = u_xlat8;
        let x_597 : vec2<f32> = u_xlat47;
        let x_599 : vec2<f32> = ((vec2<f32>(x_594.x, x_594.z) * vec2<f32>(0.5f, 0.5f)) + -(x_597));
        let x_600 : vec4<f32> = u_xlat8;
        u_xlat8 = vec4<f32>(x_599.x, x_599.y, x_600.z, x_600.w);
        let x_603 : vec2<f32> = u_xlat47;
        u_xlat52 = (-(x_603) + vec2<f32>(1.0f, 1.0f));
        let x_608 : vec2<f32> = u_xlat47;
        let x_610 : vec2<f32> = min(x_608, vec2<f32>(0.0f, 0.0f));
        let x_611 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_610.x, x_610.y, x_611.z, x_611.w);
        let x_613 : vec4<f32> = u_xlat9;
        let x_616 : vec4<f32> = u_xlat9;
        let x_619 : vec2<f32> = u_xlat52;
        let x_620 : vec2<f32> = ((-(vec2<f32>(x_613.x, x_613.y)) * vec2<f32>(x_616.x, x_616.y)) + x_619);
        let x_621 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_620.x, x_620.y, x_621.z, x_621.w);
        let x_623 : vec2<f32> = u_xlat47;
        u_xlat47 = max(x_623, vec2<f32>(0.0f, 0.0f));
        let x_625 : vec2<f32> = u_xlat47;
        let x_627 : vec2<f32> = u_xlat47;
        let x_629 : vec4<f32> = u_xlat7;
        u_xlat47 = ((-(x_625) * x_627) + vec2<f32>(x_629.y, x_629.w));
        let x_632 : vec4<f32> = u_xlat9;
        let x_634 : vec2<f32> = (vec2<f32>(x_632.x, x_632.y) + vec2<f32>(1.0f, 1.0f));
        let x_635 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_634.x, x_634.y, x_635.z, x_635.w);
        let x_637 : vec2<f32> = u_xlat47;
        u_xlat47 = (x_637 + vec2<f32>(1.0f, 1.0f));
        let x_640 : vec4<f32> = u_xlat8;
        let x_644 : vec2<f32> = (vec2<f32>(x_640.x, x_640.y) * vec2<f32>(0.159999996f, 0.159999996f));
        let x_645 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_644.x, x_644.y, x_645.z, x_645.w);
        let x_647 : vec2<f32> = u_xlat52;
        let x_648 : vec2<f32> = (x_647 * vec2<f32>(0.159999996f, 0.159999996f));
        let x_649 : vec4<f32> = u_xlat8;
        u_xlat8 = vec4<f32>(x_648.x, x_648.y, x_649.z, x_649.w);
        let x_651 : vec4<f32> = u_xlat9;
        let x_653 : vec2<f32> = (vec2<f32>(x_651.x, x_651.y) * vec2<f32>(0.159999996f, 0.159999996f));
        let x_654 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_653.x, x_653.y, x_654.z, x_654.w);
        let x_657 : vec2<f32> = u_xlat47;
        let x_658 : vec2<f32> = (x_657 * vec2<f32>(0.159999996f, 0.159999996f));
        let x_659 : vec4<f32> = u_xlat11;
        u_xlat11 = vec4<f32>(x_658.x, x_658.y, x_659.z, x_659.w);
        let x_661 : vec4<f32> = u_xlat7;
        u_xlat47 = (vec2<f32>(x_661.y, x_661.w) * vec2<f32>(0.159999996f, 0.159999996f));
        let x_665 : f32 = u_xlat9.x;
        u_xlat10.z = x_665;
        let x_668 : f32 = u_xlat47.x;
        u_xlat10.w = x_668;
        let x_671 : f32 = u_xlat11.x;
        u_xlat8.z = x_671;
        let x_674 : f32 = u_xlat7.x;
        u_xlat8.w = x_674;
        let x_677 : vec4<f32> = u_xlat8;
        let x_679 : vec4<f32> = u_xlat10;
        u_xlat12 = (vec4<f32>(x_677.z, x_677.w, x_677.x, x_677.z) + vec4<f32>(x_679.z, x_679.w, x_679.x, x_679.z));
        let x_683 : f32 = u_xlat10.y;
        u_xlat9.z = x_683;
        let x_686 : f32 = u_xlat47.y;
        u_xlat9.w = x_686;
        let x_689 : f32 = u_xlat8.y;
        u_xlat11.z = x_689;
        let x_692 : f32 = u_xlat7.z;
        u_xlat11.w = x_692;
        let x_694 : vec4<f32> = u_xlat9;
        let x_696 : vec4<f32> = u_xlat11;
        let x_698 : vec3<f32> = (vec3<f32>(x_694.z, x_694.y, x_694.w) + vec3<f32>(x_696.z, x_696.y, x_696.w));
        let x_699 : vec4<f32> = u_xlat7;
        u_xlat7 = vec4<f32>(x_698.x, x_698.y, x_698.z, x_699.w);
        let x_701 : vec4<f32> = u_xlat8;
        let x_703 : vec4<f32> = u_xlat12;
        let x_705 : vec3<f32> = (vec3<f32>(x_701.x, x_701.z, x_701.w) / vec3<f32>(x_703.z, x_703.w, x_703.y));
        let x_706 : vec4<f32> = u_xlat8;
        u_xlat8 = vec4<f32>(x_705.x, x_705.y, x_705.z, x_706.w);
        let x_708 : vec4<f32> = u_xlat8;
        let x_714 : vec3<f32> = (vec3<f32>(x_708.x, x_708.y, x_708.z) + vec3<f32>(-2.5f, -0.5f, 1.5f));
        let x_715 : vec4<f32> = u_xlat8;
        u_xlat8 = vec4<f32>(x_714.x, x_714.y, x_714.z, x_715.w);
        let x_717 : vec4<f32> = u_xlat11;
        let x_719 : vec4<f32> = u_xlat7;
        let x_721 : vec3<f32> = (vec3<f32>(x_717.z, x_717.y, x_717.w) / vec3<f32>(x_719.x, x_719.y, x_719.z));
        let x_722 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_721.x, x_721.y, x_721.z, x_722.w);
        let x_724 : vec4<f32> = u_xlat9;
        let x_726 : vec3<f32> = (vec3<f32>(x_724.x, x_724.y, x_724.z) + vec3<f32>(-2.5f, -0.5f, 1.5f));
        let x_727 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_726.x, x_726.y, x_726.z, x_727.w);
        let x_729 : vec4<f32> = u_xlat8;
        let x_732 : vec4<f32> = x_253.x_MainLightShadowmapSize;
        let x_734 : vec3<f32> = (vec3<f32>(x_729.y, x_729.x, x_729.z) * vec3<f32>(x_732.x, x_732.x, x_732.x));
        let x_735 : vec4<f32> = u_xlat8;
        u_xlat8 = vec4<f32>(x_734.x, x_734.y, x_734.z, x_735.w);
        let x_737 : vec4<f32> = u_xlat9;
        let x_740 : vec4<f32> = x_253.x_MainLightShadowmapSize;
        let x_742 : vec3<f32> = (vec3<f32>(x_737.x, x_737.y, x_737.z) * vec3<f32>(x_740.y, x_740.y, x_740.y));
        let x_743 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_742.x, x_742.y, x_742.z, x_743.w);
        let x_746 : f32 = u_xlat9.x;
        u_xlat8.w = x_746;
        let x_748 : vec4<f32> = u_xlat3;
        let x_751 : vec4<f32> = x_253.x_MainLightShadowmapSize;
        let x_754 : vec4<f32> = u_xlat8;
        u_xlat10 = ((vec4<f32>(x_748.x, x_748.y, x_748.x, x_748.y) * vec4<f32>(x_751.x, x_751.y, x_751.x, x_751.y)) + vec4<f32>(x_754.y, x_754.w, x_754.x, x_754.w));
        let x_757 : vec4<f32> = u_xlat3;
        let x_760 : vec4<f32> = x_253.x_MainLightShadowmapSize;
        let x_763 : vec4<f32> = u_xlat8;
        u_xlat47 = ((vec2<f32>(x_757.x, x_757.y) * vec2<f32>(x_760.x, x_760.y)) + vec2<f32>(x_763.z, x_763.w));
        let x_767 : f32 = u_xlat8.y;
        u_xlat9.w = x_767;
        let x_769 : vec4<f32> = u_xlat9;
        let x_770 : vec2<f32> = vec2<f32>(x_769.y, x_769.z);
        let x_771 : vec4<f32> = u_xlat8;
        u_xlat8 = vec4<f32>(x_771.x, x_770.x, x_771.z, x_770.y);
        let x_773 : vec4<f32> = u_xlat3;
        let x_776 : vec4<f32> = x_253.x_MainLightShadowmapSize;
        let x_779 : vec4<f32> = u_xlat8;
        u_xlat11 = ((vec4<f32>(x_773.x, x_773.y, x_773.x, x_773.y) * vec4<f32>(x_776.x, x_776.y, x_776.x, x_776.y)) + vec4<f32>(x_779.x, x_779.y, x_779.z, x_779.y));
        let x_782 : vec4<f32> = u_xlat3;
        let x_785 : vec4<f32> = x_253.x_MainLightShadowmapSize;
        let x_788 : vec4<f32> = u_xlat9;
        u_xlat9 = ((vec4<f32>(x_782.x, x_782.y, x_782.x, x_782.y) * vec4<f32>(x_785.x, x_785.y, x_785.x, x_785.y)) + vec4<f32>(x_788.w, x_788.y, x_788.w, x_788.z));
        let x_791 : vec4<f32> = u_xlat3;
        let x_794 : vec4<f32> = x_253.x_MainLightShadowmapSize;
        let x_797 : vec4<f32> = u_xlat8;
        u_xlat8 = ((vec4<f32>(x_791.x, x_791.y, x_791.x, x_791.y) * vec4<f32>(x_794.x, x_794.y, x_794.x, x_794.y)) + vec4<f32>(x_797.x, x_797.w, x_797.z, x_797.w));
        let x_801 : vec4<f32> = u_xlat7;
        let x_803 : vec4<f32> = u_xlat12;
        u_xlat13 = (vec4<f32>(x_801.x, x_801.x, x_801.x, x_801.y) * vec4<f32>(x_803.z, x_803.w, x_803.y, x_803.z));
        let x_807 : vec4<f32> = u_xlat7;
        let x_809 : vec4<f32> = u_xlat12;
        u_xlat14 = (vec4<f32>(x_807.y, x_807.y, x_807.z, x_807.z) * x_809);
        let x_813 : f32 = u_xlat7.z;
        let x_815 : f32 = u_xlat12.y;
        u_xlat68 = (x_813 * x_815);
        let x_818 : vec4<f32> = u_xlat10;
        let x_819 : vec2<f32> = vec2<f32>(x_818.x, x_818.y);
        let x_821 : f32 = u_xlat2.z;
        txVec4 = vec3<f32>(x_819.x, x_819.y, x_821);
        let x_828 : vec3<f32> = txVec4;
        let x_830 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_828.xy, x_828.z);
        u_xlat3.x = x_830;
        let x_833 : vec4<f32> = u_xlat10;
        let x_834 : vec2<f32> = vec2<f32>(x_833.z, x_833.w);
        let x_836 : f32 = u_xlat2.z;
        txVec5 = vec3<f32>(x_834.x, x_834.y, x_836);
        let x_844 : vec3<f32> = txVec5;
        let x_846 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_844.xy, x_844.z);
        u_xlat25 = x_846;
        let x_847 : f32 = u_xlat25;
        let x_849 : f32 = u_xlat13.y;
        u_xlat25 = (x_847 * x_849);
        let x_852 : f32 = u_xlat13.x;
        let x_854 : f32 = u_xlat3.x;
        let x_856 : f32 = u_xlat25;
        u_xlat3.x = ((x_852 * x_854) + x_856);
        let x_860 : vec2<f32> = u_xlat47;
        let x_862 : f32 = u_xlat2.z;
        txVec6 = vec3<f32>(x_860.x, x_860.y, x_862);
        let x_869 : vec3<f32> = txVec6;
        let x_871 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_869.xy, x_869.z);
        u_xlat25 = x_871;
        let x_873 : f32 = u_xlat13.z;
        let x_874 : f32 = u_xlat25;
        let x_877 : f32 = u_xlat3.x;
        u_xlat3.x = ((x_873 * x_874) + x_877);
        let x_881 : vec4<f32> = u_xlat9;
        let x_882 : vec2<f32> = vec2<f32>(x_881.x, x_881.y);
        let x_884 : f32 = u_xlat2.z;
        txVec7 = vec3<f32>(x_882.x, x_882.y, x_884);
        let x_891 : vec3<f32> = txVec7;
        let x_893 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_891.xy, x_891.z);
        u_xlat25 = x_893;
        let x_895 : f32 = u_xlat13.w;
        let x_896 : f32 = u_xlat25;
        let x_899 : f32 = u_xlat3.x;
        u_xlat3.x = ((x_895 * x_896) + x_899);
        let x_903 : vec4<f32> = u_xlat11;
        let x_904 : vec2<f32> = vec2<f32>(x_903.x, x_903.y);
        let x_906 : f32 = u_xlat2.z;
        txVec8 = vec3<f32>(x_904.x, x_904.y, x_906);
        let x_913 : vec3<f32> = txVec8;
        let x_915 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_913.xy, x_913.z);
        u_xlat25 = x_915;
        let x_917 : f32 = u_xlat14.x;
        let x_918 : f32 = u_xlat25;
        let x_921 : f32 = u_xlat3.x;
        u_xlat3.x = ((x_917 * x_918) + x_921);
        let x_925 : vec4<f32> = u_xlat11;
        let x_926 : vec2<f32> = vec2<f32>(x_925.z, x_925.w);
        let x_928 : f32 = u_xlat2.z;
        txVec9 = vec3<f32>(x_926.x, x_926.y, x_928);
        let x_935 : vec3<f32> = txVec9;
        let x_937 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_935.xy, x_935.z);
        u_xlat25 = x_937;
        let x_939 : f32 = u_xlat14.y;
        let x_940 : f32 = u_xlat25;
        let x_943 : f32 = u_xlat3.x;
        u_xlat3.x = ((x_939 * x_940) + x_943);
        let x_947 : vec4<f32> = u_xlat9;
        let x_948 : vec2<f32> = vec2<f32>(x_947.z, x_947.w);
        let x_950 : f32 = u_xlat2.z;
        txVec10 = vec3<f32>(x_948.x, x_948.y, x_950);
        let x_957 : vec3<f32> = txVec10;
        let x_959 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_957.xy, x_957.z);
        u_xlat25 = x_959;
        let x_961 : f32 = u_xlat14.z;
        let x_962 : f32 = u_xlat25;
        let x_965 : f32 = u_xlat3.x;
        u_xlat3.x = ((x_961 * x_962) + x_965);
        let x_969 : vec4<f32> = u_xlat8;
        let x_970 : vec2<f32> = vec2<f32>(x_969.x, x_969.y);
        let x_972 : f32 = u_xlat2.z;
        txVec11 = vec3<f32>(x_970.x, x_970.y, x_972);
        let x_979 : vec3<f32> = txVec11;
        let x_981 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_979.xy, x_979.z);
        u_xlat25 = x_981;
        let x_983 : f32 = u_xlat14.w;
        let x_984 : f32 = u_xlat25;
        let x_987 : f32 = u_xlat3.x;
        u_xlat3.x = ((x_983 * x_984) + x_987);
        let x_991 : vec4<f32> = u_xlat8;
        let x_992 : vec2<f32> = vec2<f32>(x_991.z, x_991.w);
        let x_994 : f32 = u_xlat2.z;
        txVec12 = vec3<f32>(x_992.x, x_992.y, x_994);
        let x_1001 : vec3<f32> = txVec12;
        let x_1003 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1001.xy, x_1001.z);
        u_xlat25 = x_1003;
        let x_1004 : f32 = u_xlat68;
        let x_1005 : f32 = u_xlat25;
        let x_1008 : f32 = u_xlat3.x;
        u_xlat67 = ((x_1004 * x_1005) + x_1008);
      } else {
        let x_1011 : vec4<f32> = u_xlat2;
        let x_1014 : vec4<f32> = x_253.x_MainLightShadowmapSize;
        let x_1017 : vec2<f32> = ((vec2<f32>(x_1011.x, x_1011.y) * vec2<f32>(x_1014.z, x_1014.w)) + vec2<f32>(0.5f, 0.5f));
        let x_1018 : vec4<f32> = u_xlat3;
        u_xlat3 = vec4<f32>(x_1017.x, x_1017.y, x_1018.z, x_1018.w);
        let x_1020 : vec4<f32> = u_xlat3;
        let x_1022 : vec2<f32> = floor(vec2<f32>(x_1020.x, x_1020.y));
        let x_1023 : vec4<f32> = u_xlat3;
        u_xlat3 = vec4<f32>(x_1022.x, x_1022.y, x_1023.z, x_1023.w);
        let x_1025 : vec4<f32> = u_xlat2;
        let x_1028 : vec4<f32> = x_253.x_MainLightShadowmapSize;
        let x_1031 : vec4<f32> = u_xlat3;
        u_xlat47 = ((vec2<f32>(x_1025.x, x_1025.y) * vec2<f32>(x_1028.z, x_1028.w)) + -(vec2<f32>(x_1031.x, x_1031.y)));
        let x_1035 : vec2<f32> = u_xlat47;
        u_xlat7 = (vec4<f32>(x_1035.x, x_1035.x, x_1035.y, x_1035.y) + vec4<f32>(0.5f, 1.0f, 0.5f, 1.0f));
        let x_1038 : vec4<f32> = u_xlat7;
        let x_1040 : vec4<f32> = u_xlat7;
        u_xlat8 = (vec4<f32>(x_1038.x, x_1038.x, x_1038.z, x_1038.z) * vec4<f32>(x_1040.x, x_1040.x, x_1040.z, x_1040.z));
        let x_1043 : vec4<f32> = u_xlat8;
        let x_1047 : vec2<f32> = (vec2<f32>(x_1043.y, x_1043.w) * vec2<f32>(0.040816002f, 0.040816002f));
        let x_1048 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_1048.x, x_1047.x, x_1048.z, x_1047.y);
        let x_1050 : vec4<f32> = u_xlat8;
        let x_1053 : vec2<f32> = u_xlat47;
        let x_1055 : vec2<f32> = ((vec2<f32>(x_1050.x, x_1050.z) * vec2<f32>(0.5f, 0.5f)) + -(x_1053));
        let x_1056 : vec4<f32> = u_xlat7;
        u_xlat7 = vec4<f32>(x_1055.x, x_1056.y, x_1055.y, x_1056.w);
        let x_1058 : vec2<f32> = u_xlat47;
        let x_1060 : vec2<f32> = (-(x_1058) + vec2<f32>(1.0f, 1.0f));
        let x_1061 : vec4<f32> = u_xlat8;
        u_xlat8 = vec4<f32>(x_1060.x, x_1060.y, x_1061.z, x_1061.w);
        let x_1063 : vec2<f32> = u_xlat47;
        u_xlat52 = min(x_1063, vec2<f32>(0.0f, 0.0f));
        let x_1065 : vec2<f32> = u_xlat52;
        let x_1067 : vec2<f32> = u_xlat52;
        let x_1069 : vec4<f32> = u_xlat8;
        let x_1071 : vec2<f32> = ((-(x_1065) * x_1067) + vec2<f32>(x_1069.x, x_1069.y));
        let x_1072 : vec4<f32> = u_xlat8;
        u_xlat8 = vec4<f32>(x_1071.x, x_1071.y, x_1072.z, x_1072.w);
        let x_1074 : vec2<f32> = u_xlat47;
        u_xlat52 = max(x_1074, vec2<f32>(0.0f, 0.0f));
        let x_1077 : vec2<f32> = u_xlat52;
        let x_1079 : vec2<f32> = u_xlat52;
        let x_1081 : vec4<f32> = u_xlat7;
        let x_1083 : vec2<f32> = ((-(x_1077) * x_1079) + vec2<f32>(x_1081.y, x_1081.w));
        let x_1084 : vec3<f32> = u_xlat29;
        u_xlat29 = vec3<f32>(x_1083.x, x_1084.y, x_1083.y);
        let x_1086 : vec4<f32> = u_xlat8;
        let x_1089 : vec2<f32> = (vec2<f32>(x_1086.x, x_1086.y) + vec2<f32>(2.0f, 2.0f));
        let x_1090 : vec4<f32> = u_xlat8;
        u_xlat8 = vec4<f32>(x_1089.x, x_1089.y, x_1090.z, x_1090.w);
        let x_1092 : vec3<f32> = u_xlat29;
        let x_1094 : vec2<f32> = (vec2<f32>(x_1092.x, x_1092.z) + vec2<f32>(2.0f, 2.0f));
        let x_1095 : vec4<f32> = u_xlat7;
        u_xlat7 = vec4<f32>(x_1095.x, x_1094.x, x_1095.z, x_1094.y);
        let x_1098 : f32 = u_xlat7.y;
        u_xlat10.z = (x_1098 * 0.081632003f);
        let x_1102 : vec4<f32> = u_xlat7;
        let x_1105 : vec3<f32> = (vec3<f32>(x_1102.z, x_1102.x, x_1102.w) * vec3<f32>(0.081632003f, 0.081632003f, 0.081632003f));
        let x_1106 : vec4<f32> = u_xlat11;
        u_xlat11 = vec4<f32>(x_1105.x, x_1105.y, x_1105.z, x_1106.w);
        let x_1108 : vec4<f32> = u_xlat8;
        let x_1111 : vec2<f32> = (vec2<f32>(x_1108.x, x_1108.y) * vec2<f32>(0.081632003f, 0.081632003f));
        let x_1112 : vec4<f32> = u_xlat7;
        u_xlat7 = vec4<f32>(x_1111.x, x_1111.y, x_1112.z, x_1112.w);
        let x_1115 : f32 = u_xlat11.y;
        u_xlat10.x = x_1115;
        let x_1117 : vec2<f32> = u_xlat47;
        let x_1124 : vec2<f32> = ((vec2<f32>(x_1117.x, x_1117.x) * vec2<f32>(-0.081632003f, 0.081632003f)) + vec2<f32>(0.163264006f, 0.081632003f));
        let x_1125 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_1125.x, x_1124.x, x_1125.z, x_1124.y);
        let x_1127 : vec2<f32> = u_xlat47;
        let x_1131 : vec2<f32> = ((vec2<f32>(x_1127.x, x_1127.x) * vec2<f32>(-0.081632003f, 0.081632003f)) + vec2<f32>(0.081632003f, 0.163264006f));
        let x_1132 : vec4<f32> = u_xlat8;
        u_xlat8 = vec4<f32>(x_1131.x, x_1132.y, x_1131.y, x_1132.w);
        let x_1135 : f32 = u_xlat7.x;
        u_xlat8.y = x_1135;
        let x_1138 : f32 = u_xlat9.y;
        u_xlat8.w = x_1138;
        let x_1140 : vec4<f32> = u_xlat8;
        let x_1141 : vec4<f32> = u_xlat10;
        u_xlat10 = (x_1140 + x_1141);
        let x_1143 : vec2<f32> = u_xlat47;
        let x_1146 : vec2<f32> = ((vec2<f32>(x_1143.y, x_1143.y) * vec2<f32>(-0.081632003f, 0.081632003f)) + vec2<f32>(0.163264006f, 0.081632003f));
        let x_1147 : vec4<f32> = u_xlat11;
        u_xlat11 = vec4<f32>(x_1147.x, x_1146.x, x_1147.z, x_1146.y);
        let x_1149 : vec2<f32> = u_xlat47;
        let x_1152 : vec2<f32> = ((vec2<f32>(x_1149.y, x_1149.y) * vec2<f32>(-0.081632003f, 0.081632003f)) + vec2<f32>(0.081632003f, 0.163264006f));
        let x_1153 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_1152.x, x_1153.y, x_1152.y, x_1153.w);
        let x_1156 : f32 = u_xlat7.y;
        u_xlat9.y = x_1156;
        let x_1158 : vec4<f32> = u_xlat9;
        let x_1159 : vec4<f32> = u_xlat11;
        u_xlat7 = (x_1158 + x_1159);
        let x_1161 : vec4<f32> = u_xlat8;
        let x_1162 : vec4<f32> = u_xlat10;
        u_xlat8 = (x_1161 / x_1162);
        let x_1164 : vec4<f32> = u_xlat8;
        u_xlat8 = (x_1164 + vec4<f32>(-3.5f, -1.5f, 0.5f, 2.5f));
        let x_1170 : vec4<f32> = u_xlat9;
        let x_1171 : vec4<f32> = u_xlat7;
        u_xlat9 = (x_1170 / x_1171);
        let x_1173 : vec4<f32> = u_xlat9;
        u_xlat9 = (x_1173 + vec4<f32>(-3.5f, -1.5f, 0.5f, 2.5f));
        let x_1175 : vec4<f32> = u_xlat8;
        let x_1178 : vec4<f32> = x_253.x_MainLightShadowmapSize;
        u_xlat8 = (vec4<f32>(x_1175.w, x_1175.x, x_1175.y, x_1175.z) * vec4<f32>(x_1178.x, x_1178.x, x_1178.x, x_1178.x));
        let x_1181 : vec4<f32> = u_xlat9;
        let x_1184 : vec4<f32> = x_253.x_MainLightShadowmapSize;
        u_xlat9 = (vec4<f32>(x_1181.x, x_1181.w, x_1181.y, x_1181.z) * vec4<f32>(x_1184.y, x_1184.y, x_1184.y, x_1184.y));
        let x_1187 : vec4<f32> = u_xlat8;
        let x_1188 : vec3<f32> = vec3<f32>(x_1187.y, x_1187.z, x_1187.w);
        let x_1189 : vec4<f32> = u_xlat11;
        u_xlat11 = vec4<f32>(x_1188.x, x_1189.y, x_1188.y, x_1188.z);
        let x_1192 : f32 = u_xlat9.x;
        u_xlat11.y = x_1192;
        let x_1194 : vec4<f32> = u_xlat3;
        let x_1197 : vec4<f32> = x_253.x_MainLightShadowmapSize;
        let x_1200 : vec4<f32> = u_xlat11;
        u_xlat12 = ((vec4<f32>(x_1194.x, x_1194.y, x_1194.x, x_1194.y) * vec4<f32>(x_1197.x, x_1197.y, x_1197.x, x_1197.y)) + vec4<f32>(x_1200.x, x_1200.y, x_1200.z, x_1200.y));
        let x_1203 : vec4<f32> = u_xlat3;
        let x_1206 : vec4<f32> = x_253.x_MainLightShadowmapSize;
        let x_1209 : vec4<f32> = u_xlat11;
        u_xlat47 = ((vec2<f32>(x_1203.x, x_1203.y) * vec2<f32>(x_1206.x, x_1206.y)) + vec2<f32>(x_1209.w, x_1209.y));
        let x_1213 : f32 = u_xlat11.y;
        u_xlat8.y = x_1213;
        let x_1216 : f32 = u_xlat9.z;
        u_xlat11.y = x_1216;
        let x_1218 : vec4<f32> = u_xlat3;
        let x_1221 : vec4<f32> = x_253.x_MainLightShadowmapSize;
        let x_1224 : vec4<f32> = u_xlat11;
        u_xlat13 = ((vec4<f32>(x_1218.x, x_1218.y, x_1218.x, x_1218.y) * vec4<f32>(x_1221.x, x_1221.y, x_1221.x, x_1221.y)) + vec4<f32>(x_1224.x, x_1224.y, x_1224.z, x_1224.y));
        let x_1227 : vec4<f32> = u_xlat3;
        let x_1230 : vec4<f32> = x_253.x_MainLightShadowmapSize;
        let x_1233 : vec4<f32> = u_xlat11;
        let x_1235 : vec2<f32> = ((vec2<f32>(x_1227.x, x_1227.y) * vec2<f32>(x_1230.x, x_1230.y)) + vec2<f32>(x_1233.w, x_1233.y));
        let x_1236 : vec4<f32> = u_xlat14;
        u_xlat14 = vec4<f32>(x_1235.x, x_1235.y, x_1236.z, x_1236.w);
        let x_1239 : f32 = u_xlat11.y;
        u_xlat8.z = x_1239;
        let x_1242 : vec4<f32> = u_xlat3;
        let x_1245 : vec4<f32> = x_253.x_MainLightShadowmapSize;
        let x_1248 : vec4<f32> = u_xlat8;
        u_xlat15 = ((vec4<f32>(x_1242.x, x_1242.y, x_1242.x, x_1242.y) * vec4<f32>(x_1245.x, x_1245.y, x_1245.x, x_1245.y)) + vec4<f32>(x_1248.x, x_1248.y, x_1248.x, x_1248.z));
        let x_1252 : f32 = u_xlat9.w;
        u_xlat11.y = x_1252;
        let x_1255 : vec4<f32> = u_xlat3;
        let x_1258 : vec4<f32> = x_253.x_MainLightShadowmapSize;
        let x_1261 : vec4<f32> = u_xlat11;
        u_xlat16 = ((vec4<f32>(x_1255.x, x_1255.y, x_1255.x, x_1255.y) * vec4<f32>(x_1258.x, x_1258.y, x_1258.x, x_1258.y)) + vec4<f32>(x_1261.x, x_1261.y, x_1261.z, x_1261.y));
        let x_1265 : vec4<f32> = u_xlat3;
        let x_1268 : vec4<f32> = x_253.x_MainLightShadowmapSize;
        let x_1271 : vec4<f32> = u_xlat11;
        u_xlat30 = ((vec2<f32>(x_1265.x, x_1265.y) * vec2<f32>(x_1268.x, x_1268.y)) + vec2<f32>(x_1271.w, x_1271.y));
        let x_1275 : f32 = u_xlat11.y;
        u_xlat8.w = x_1275;
        let x_1278 : vec4<f32> = u_xlat3;
        let x_1281 : vec4<f32> = x_253.x_MainLightShadowmapSize;
        let x_1284 : vec4<f32> = u_xlat8;
        u_xlat58 = ((vec2<f32>(x_1278.x, x_1278.y) * vec2<f32>(x_1281.x, x_1281.y)) + vec2<f32>(x_1284.x, x_1284.w));
        let x_1287 : vec4<f32> = u_xlat11;
        let x_1288 : vec3<f32> = vec3<f32>(x_1287.x, x_1287.z, x_1287.w);
        let x_1289 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_1288.x, x_1289.y, x_1288.y, x_1288.z);
        let x_1291 : vec4<f32> = u_xlat3;
        let x_1294 : vec4<f32> = x_253.x_MainLightShadowmapSize;
        let x_1297 : vec4<f32> = u_xlat9;
        u_xlat11 = ((vec4<f32>(x_1291.x, x_1291.y, x_1291.x, x_1291.y) * vec4<f32>(x_1294.x, x_1294.y, x_1294.x, x_1294.y)) + vec4<f32>(x_1297.x, x_1297.y, x_1297.z, x_1297.y));
        let x_1301 : vec4<f32> = u_xlat3;
        let x_1304 : vec4<f32> = x_253.x_MainLightShadowmapSize;
        let x_1307 : vec4<f32> = u_xlat9;
        u_xlat53 = ((vec2<f32>(x_1301.x, x_1301.y) * vec2<f32>(x_1304.x, x_1304.y)) + vec2<f32>(x_1307.w, x_1307.y));
        let x_1311 : f32 = u_xlat8.x;
        u_xlat9.x = x_1311;
        let x_1313 : vec4<f32> = u_xlat3;
        let x_1316 : vec4<f32> = x_253.x_MainLightShadowmapSize;
        let x_1319 : vec4<f32> = u_xlat9;
        let x_1321 : vec2<f32> = ((vec2<f32>(x_1313.x, x_1313.y) * vec2<f32>(x_1316.x, x_1316.y)) + vec2<f32>(x_1319.x, x_1319.y));
        let x_1322 : vec4<f32> = u_xlat3;
        u_xlat3 = vec4<f32>(x_1321.x, x_1321.y, x_1322.z, x_1322.w);
        let x_1325 : vec4<f32> = u_xlat7;
        let x_1327 : vec4<f32> = u_xlat10;
        u_xlat17 = (vec4<f32>(x_1325.x, x_1325.x, x_1325.x, x_1325.x) * x_1327);
        let x_1330 : vec4<f32> = u_xlat7;
        let x_1332 : vec4<f32> = u_xlat10;
        u_xlat18 = (vec4<f32>(x_1330.y, x_1330.y, x_1330.y, x_1330.y) * x_1332);
        let x_1335 : vec4<f32> = u_xlat7;
        let x_1337 : vec4<f32> = u_xlat10;
        u_xlat19 = (vec4<f32>(x_1335.z, x_1335.z, x_1335.z, x_1335.z) * x_1337);
        let x_1339 : vec4<f32> = u_xlat7;
        let x_1341 : vec4<f32> = u_xlat10;
        u_xlat7 = (vec4<f32>(x_1339.w, x_1339.w, x_1339.w, x_1339.w) * x_1341);
        let x_1344 : vec4<f32> = u_xlat12;
        let x_1345 : vec2<f32> = vec2<f32>(x_1344.x, x_1344.y);
        let x_1347 : f32 = u_xlat2.z;
        txVec13 = vec3<f32>(x_1345.x, x_1345.y, x_1347);
        let x_1354 : vec3<f32> = txVec13;
        let x_1356 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1354.xy, x_1354.z);
        u_xlat68 = x_1356;
        let x_1358 : vec4<f32> = u_xlat12;
        let x_1359 : vec2<f32> = vec2<f32>(x_1358.z, x_1358.w);
        let x_1361 : f32 = u_xlat2.z;
        txVec14 = vec3<f32>(x_1359.x, x_1359.y, x_1361);
        let x_1369 : vec3<f32> = txVec14;
        let x_1371 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1369.xy, x_1369.z);
        u_xlat71 = x_1371;
        let x_1372 : f32 = u_xlat71;
        let x_1374 : f32 = u_xlat17.y;
        u_xlat71 = (x_1372 * x_1374);
        let x_1377 : f32 = u_xlat17.x;
        let x_1378 : f32 = u_xlat68;
        let x_1380 : f32 = u_xlat71;
        u_xlat68 = ((x_1377 * x_1378) + x_1380);
        let x_1383 : vec2<f32> = u_xlat47;
        let x_1385 : f32 = u_xlat2.z;
        txVec15 = vec3<f32>(x_1383.x, x_1383.y, x_1385);
        let x_1392 : vec3<f32> = txVec15;
        let x_1394 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1392.xy, x_1392.z);
        u_xlat47.x = x_1394;
        let x_1397 : f32 = u_xlat17.z;
        let x_1399 : f32 = u_xlat47.x;
        let x_1401 : f32 = u_xlat68;
        u_xlat68 = ((x_1397 * x_1399) + x_1401);
        let x_1404 : vec4<f32> = u_xlat15;
        let x_1405 : vec2<f32> = vec2<f32>(x_1404.x, x_1404.y);
        let x_1407 : f32 = u_xlat2.z;
        txVec16 = vec3<f32>(x_1405.x, x_1405.y, x_1407);
        let x_1414 : vec3<f32> = txVec16;
        let x_1416 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1414.xy, x_1414.z);
        u_xlat47.x = x_1416;
        let x_1419 : f32 = u_xlat17.w;
        let x_1421 : f32 = u_xlat47.x;
        let x_1423 : f32 = u_xlat68;
        u_xlat68 = ((x_1419 * x_1421) + x_1423);
        let x_1426 : vec4<f32> = u_xlat13;
        let x_1427 : vec2<f32> = vec2<f32>(x_1426.x, x_1426.y);
        let x_1429 : f32 = u_xlat2.z;
        txVec17 = vec3<f32>(x_1427.x, x_1427.y, x_1429);
        let x_1436 : vec3<f32> = txVec17;
        let x_1438 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1436.xy, x_1436.z);
        u_xlat47.x = x_1438;
        let x_1441 : f32 = u_xlat18.x;
        let x_1443 : f32 = u_xlat47.x;
        let x_1445 : f32 = u_xlat68;
        u_xlat68 = ((x_1441 * x_1443) + x_1445);
        let x_1448 : vec4<f32> = u_xlat13;
        let x_1449 : vec2<f32> = vec2<f32>(x_1448.z, x_1448.w);
        let x_1451 : f32 = u_xlat2.z;
        txVec18 = vec3<f32>(x_1449.x, x_1449.y, x_1451);
        let x_1458 : vec3<f32> = txVec18;
        let x_1460 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1458.xy, x_1458.z);
        u_xlat47.x = x_1460;
        let x_1463 : f32 = u_xlat18.y;
        let x_1465 : f32 = u_xlat47.x;
        let x_1467 : f32 = u_xlat68;
        u_xlat68 = ((x_1463 * x_1465) + x_1467);
        let x_1470 : vec4<f32> = u_xlat14;
        let x_1471 : vec2<f32> = vec2<f32>(x_1470.x, x_1470.y);
        let x_1473 : f32 = u_xlat2.z;
        txVec19 = vec3<f32>(x_1471.x, x_1471.y, x_1473);
        let x_1480 : vec3<f32> = txVec19;
        let x_1482 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1480.xy, x_1480.z);
        u_xlat47.x = x_1482;
        let x_1485 : f32 = u_xlat18.z;
        let x_1487 : f32 = u_xlat47.x;
        let x_1489 : f32 = u_xlat68;
        u_xlat68 = ((x_1485 * x_1487) + x_1489);
        let x_1492 : vec4<f32> = u_xlat15;
        let x_1493 : vec2<f32> = vec2<f32>(x_1492.z, x_1492.w);
        let x_1495 : f32 = u_xlat2.z;
        txVec20 = vec3<f32>(x_1493.x, x_1493.y, x_1495);
        let x_1502 : vec3<f32> = txVec20;
        let x_1504 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1502.xy, x_1502.z);
        u_xlat47.x = x_1504;
        let x_1507 : f32 = u_xlat18.w;
        let x_1509 : f32 = u_xlat47.x;
        let x_1511 : f32 = u_xlat68;
        u_xlat68 = ((x_1507 * x_1509) + x_1511);
        let x_1514 : vec4<f32> = u_xlat16;
        let x_1515 : vec2<f32> = vec2<f32>(x_1514.x, x_1514.y);
        let x_1517 : f32 = u_xlat2.z;
        txVec21 = vec3<f32>(x_1515.x, x_1515.y, x_1517);
        let x_1524 : vec3<f32> = txVec21;
        let x_1526 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1524.xy, x_1524.z);
        u_xlat47.x = x_1526;
        let x_1529 : f32 = u_xlat19.x;
        let x_1531 : f32 = u_xlat47.x;
        let x_1533 : f32 = u_xlat68;
        u_xlat68 = ((x_1529 * x_1531) + x_1533);
        let x_1536 : vec4<f32> = u_xlat16;
        let x_1537 : vec2<f32> = vec2<f32>(x_1536.z, x_1536.w);
        let x_1539 : f32 = u_xlat2.z;
        txVec22 = vec3<f32>(x_1537.x, x_1537.y, x_1539);
        let x_1546 : vec3<f32> = txVec22;
        let x_1548 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1546.xy, x_1546.z);
        u_xlat47.x = x_1548;
        let x_1551 : f32 = u_xlat19.y;
        let x_1553 : f32 = u_xlat47.x;
        let x_1555 : f32 = u_xlat68;
        u_xlat68 = ((x_1551 * x_1553) + x_1555);
        let x_1558 : vec2<f32> = u_xlat30;
        let x_1560 : f32 = u_xlat2.z;
        txVec23 = vec3<f32>(x_1558.x, x_1558.y, x_1560);
        let x_1567 : vec3<f32> = txVec23;
        let x_1569 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1567.xy, x_1567.z);
        u_xlat47.x = x_1569;
        let x_1572 : f32 = u_xlat19.z;
        let x_1574 : f32 = u_xlat47.x;
        let x_1576 : f32 = u_xlat68;
        u_xlat68 = ((x_1572 * x_1574) + x_1576);
        let x_1579 : vec2<f32> = u_xlat58;
        let x_1581 : f32 = u_xlat2.z;
        txVec24 = vec3<f32>(x_1579.x, x_1579.y, x_1581);
        let x_1588 : vec3<f32> = txVec24;
        let x_1590 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1588.xy, x_1588.z);
        u_xlat47.x = x_1590;
        let x_1593 : f32 = u_xlat19.w;
        let x_1595 : f32 = u_xlat47.x;
        let x_1597 : f32 = u_xlat68;
        u_xlat68 = ((x_1593 * x_1595) + x_1597);
        let x_1600 : vec4<f32> = u_xlat11;
        let x_1601 : vec2<f32> = vec2<f32>(x_1600.x, x_1600.y);
        let x_1603 : f32 = u_xlat2.z;
        txVec25 = vec3<f32>(x_1601.x, x_1601.y, x_1603);
        let x_1610 : vec3<f32> = txVec25;
        let x_1612 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1610.xy, x_1610.z);
        u_xlat47.x = x_1612;
        let x_1615 : f32 = u_xlat7.x;
        let x_1617 : f32 = u_xlat47.x;
        let x_1619 : f32 = u_xlat68;
        u_xlat68 = ((x_1615 * x_1617) + x_1619);
        let x_1622 : vec4<f32> = u_xlat11;
        let x_1623 : vec2<f32> = vec2<f32>(x_1622.z, x_1622.w);
        let x_1625 : f32 = u_xlat2.z;
        txVec26 = vec3<f32>(x_1623.x, x_1623.y, x_1625);
        let x_1632 : vec3<f32> = txVec26;
        let x_1634 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1632.xy, x_1632.z);
        u_xlat47.x = x_1634;
        let x_1637 : f32 = u_xlat7.y;
        let x_1639 : f32 = u_xlat47.x;
        let x_1641 : f32 = u_xlat68;
        u_xlat68 = ((x_1637 * x_1639) + x_1641);
        let x_1644 : vec2<f32> = u_xlat53;
        let x_1646 : f32 = u_xlat2.z;
        txVec27 = vec3<f32>(x_1644.x, x_1644.y, x_1646);
        let x_1653 : vec3<f32> = txVec27;
        let x_1655 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1653.xy, x_1653.z);
        u_xlat47.x = x_1655;
        let x_1658 : f32 = u_xlat7.z;
        let x_1660 : f32 = u_xlat47.x;
        let x_1662 : f32 = u_xlat68;
        u_xlat68 = ((x_1658 * x_1660) + x_1662);
        let x_1665 : vec4<f32> = u_xlat3;
        let x_1666 : vec2<f32> = vec2<f32>(x_1665.x, x_1665.y);
        let x_1668 : f32 = u_xlat2.z;
        txVec28 = vec3<f32>(x_1666.x, x_1666.y, x_1668);
        let x_1675 : vec3<f32> = txVec28;
        let x_1677 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1675.xy, x_1675.z);
        u_xlat3.x = x_1677;
        let x_1680 : f32 = u_xlat7.w;
        let x_1682 : f32 = u_xlat3.x;
        let x_1684 : f32 = u_xlat68;
        u_xlat67 = ((x_1680 * x_1682) + x_1684);
      }
    }
  } else {
    let x_1688 : vec4<f32> = u_xlat2;
    let x_1689 : vec2<f32> = vec2<f32>(x_1688.x, x_1688.y);
    let x_1691 : f32 = u_xlat2.z;
    txVec29 = vec3<f32>(x_1689.x, x_1689.y, x_1691);
    let x_1698 : vec3<f32> = txVec29;
    let x_1700 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1698.xy, x_1698.z);
    u_xlat67 = x_1700;
  }
  let x_1702 : f32 = x_253.x_MainLightShadowParams.x;
  u_xlat68 = (-(x_1702) + 1.0f);
  let x_1705 : f32 = u_xlat67;
  let x_1707 : f32 = x_253.x_MainLightShadowParams.x;
  let x_1709 : f32 = u_xlat68;
  u_xlat67 = ((x_1705 * x_1707) + x_1709);
  let x_1713 : f32 = u_xlat2.z;
  u_xlatb3 = (0.0f >= x_1713);
  let x_1717 : f32 = u_xlat2.z;
  u_xlatb25 = (x_1717 >= 1.0f);
  let x_1719 : bool = u_xlatb25;
  let x_1720 : bool = u_xlatb3;
  u_xlatb3 = (x_1719 | x_1720);
  let x_1722 : bool = u_xlatb3;
  let x_1723 : f32 = u_xlat67;
  u_xlat67 = select(x_1723, 1.0f, x_1722);
  let x_1725 : vec3<f32> = u_xlat1;
  let x_1727 : vec4<f32> = x_139.x_MainLightPosition;
  u_xlat1.x = dot(x_1725, -(vec3<f32>(x_1727.x, x_1727.y, x_1727.z)));
  let x_1733 : f32 = u_xlat1.x;
  u_xlat1.x = clamp(x_1733, 0.0f, 1.0f);
  let x_1737 : f32 = u_xlat67;
  let x_1740 : vec4<f32> = x_139.x_MainLightColor;
  u_xlat23 = (vec3<f32>(x_1737, x_1737, x_1737) * vec3<f32>(x_1740.x, x_1740.y, x_1740.z));
  let x_1743 : vec3<f32> = u_xlat23;
  let x_1744 : vec3<f32> = u_xlat1;
  u_xlat1 = (x_1743 * vec3<f32>(x_1744.x, x_1744.x, x_1744.x));
  let x_1747 : vec3<f32> = u_xlat1;
  let x_1748 : vec4<f32> = u_xlat4;
  u_xlat1 = (x_1747 * vec3<f32>(x_1748.x, x_1748.y, x_1748.z));
  let x_1752 : f32 = u_xlat4.w;
  u_xlatb67 = (x_1752 >= 0.400000006f);
  let x_1755 : bool = u_xlatb67;
  if (x_1755) {
    let x_1760 : f32 = u_xlat4.w;
    x_1756 = x_1760;
  } else {
    x_1756 = 0.0f;
  }
  let x_1762 : f32 = x_1756;
  u_xlat67 = x_1762;
  let x_1764 : f32 = u_xlat4.w;
  u_xlat25 = (x_1764 + -0.400000006f);
  let x_1768 : f32 = u_xlat4.w;
  u_xlat47.x = dpdxCoarse(x_1768);
  let x_1773 : f32 = u_xlat4.w;
  u_xlat69 = dpdyCoarse(x_1773);
  let x_1775 : f32 = u_xlat69;
  let x_1778 : f32 = u_xlat47.x;
  u_xlat47.x = (abs(x_1775) + abs(x_1778));
  let x_1783 : f32 = u_xlat47.x;
  u_xlat47.x = max(x_1783, 0.0001f);
  let x_1787 : f32 = u_xlat25;
  let x_1789 : f32 = u_xlat47.x;
  u_xlat25 = (x_1787 / x_1789);
  let x_1791 : f32 = u_xlat25;
  u_xlat25 = (x_1791 + 0.5f);
  let x_1793 : f32 = u_xlat25;
  u_xlat25 = clamp(x_1793, 0.0f, 1.0f);
  let x_1797 : f32 = x_139.x_AlphaToMaskAvailable;
  u_xlatb47 = !((x_1797 == 0.0f));
  let x_1799 : bool = u_xlatb47;
  let x_1800 : f32 = u_xlat25;
  let x_1801 : f32 = u_xlat67;
  u_xlat67 = select(x_1801, x_1800, x_1799);
  let x_1803 : f32 = u_xlat67;
  u_xlat25 = (x_1803 + -0.0001f);
  let x_1806 : f32 = u_xlat25;
  u_xlatb25 = (x_1806 < 0.0f);
  let x_1808 : bool = u_xlatb25;
  if (((select(0i, 1i, x_1808) * -1i) != 0i)) {
    discard;
  }
  let x_1816 : vec3<f32> = u_xlat22;
  let x_1817 : vec3<f32> = u_xlat28;
  u_xlat22 = (x_1816 * vec3<f32>(x_1817.y, x_1817.y, x_1817.y));
  let x_1820 : vec3<f32> = u_xlat28;
  let x_1822 : vec4<f32> = vs_INTERP2;
  let x_1825 : vec3<f32> = u_xlat22;
  u_xlat22 = ((vec3<f32>(x_1820.x, x_1820.x, x_1820.x) * vec3<f32>(x_1822.x, x_1822.y, x_1822.z)) + x_1825);
  let x_1827 : vec3<f32> = u_xlat28;
  let x_1829 : vec3<f32> = vs_INTERP1;
  let x_1831 : vec3<f32> = u_xlat22;
  u_xlat22 = ((vec3<f32>(x_1827.z, x_1827.z, x_1827.z) * x_1829) + x_1831);
  let x_1833 : vec3<f32> = u_xlat22;
  let x_1834 : vec3<f32> = u_xlat22;
  u_xlat25 = dot(x_1833, x_1834);
  let x_1836 : f32 = u_xlat25;
  u_xlat25 = inverseSqrt(x_1836);
  let x_1838 : vec3<f32> = u_xlat22;
  let x_1839 : f32 = u_xlat25;
  u_xlat22 = (x_1838 * vec3<f32>(x_1839, x_1839, x_1839));
  let x_1844 : f32 = x_139.unity_OrthoParams.w;
  u_xlatb25 = (x_1844 == 0.0f);
  let x_1846 : vec3<f32> = vs_INTERP0;
  let x_1850 : vec3<f32> = x_139.x_WorldSpaceCameraPos;
  let x_1851 : vec3<f32> = (-(x_1846) + x_1850);
  let x_1852 : vec4<f32> = u_xlat4;
  u_xlat4 = vec4<f32>(x_1851.x, x_1851.y, x_1851.z, x_1852.w);
  let x_1854 : vec4<f32> = u_xlat4;
  let x_1856 : vec4<f32> = u_xlat4;
  u_xlat69 = dot(vec3<f32>(x_1854.x, x_1854.y, x_1854.z), vec3<f32>(x_1856.x, x_1856.y, x_1856.z));
  let x_1859 : f32 = u_xlat69;
  u_xlat69 = inverseSqrt(x_1859);
  let x_1861 : f32 = u_xlat69;
  let x_1863 : vec4<f32> = u_xlat4;
  let x_1865 : vec3<f32> = (vec3<f32>(x_1861, x_1861, x_1861) * vec3<f32>(x_1863.x, x_1863.y, x_1863.z));
  let x_1866 : vec4<f32> = u_xlat4;
  u_xlat4 = vec4<f32>(x_1865.x, x_1865.y, x_1865.z, x_1866.w);
  let x_1870 : f32 = x_139.unity_MatrixV[0i].z;
  u_xlat7.x = x_1870;
  let x_1873 : f32 = x_139.unity_MatrixV[1i].z;
  u_xlat7.y = x_1873;
  let x_1876 : f32 = x_139.unity_MatrixV[2i].z;
  u_xlat7.z = x_1876;
  let x_1878 : bool = u_xlatb25;
  if (x_1878) {
    let x_1882 : vec4<f32> = u_xlat4;
    x_1879 = vec3<f32>(x_1882.x, x_1882.y, x_1882.z);
  } else {
    let x_1885 : vec4<f32> = u_xlat7;
    x_1879 = vec3<f32>(x_1885.x, x_1885.y, x_1885.z);
  }
  let x_1887 : vec3<f32> = x_1879;
  let x_1888 : vec4<f32> = u_xlat4;
  u_xlat4 = vec4<f32>(x_1887.x, x_1887.y, x_1887.z, x_1888.w);
  let x_1891 : f32 = vs_INTERP0.y;
  let x_1893 : f32 = x_139.unity_MatrixV[1i].z;
  u_xlat25 = (x_1891 * x_1893);
  let x_1896 : f32 = x_139.unity_MatrixV[0i].z;
  let x_1898 : f32 = vs_INTERP0.x;
  let x_1900 : f32 = u_xlat25;
  u_xlat25 = ((x_1896 * x_1898) + x_1900);
  let x_1903 : f32 = x_139.unity_MatrixV[2i].z;
  let x_1905 : f32 = vs_INTERP0.z;
  let x_1907 : f32 = u_xlat25;
  u_xlat25 = ((x_1903 * x_1905) + x_1907);
  let x_1909 : f32 = u_xlat25;
  let x_1911 : f32 = x_139.unity_MatrixV[3i].z;
  u_xlat25 = (x_1909 + x_1911);
  let x_1913 : f32 = u_xlat25;
  let x_1917 : f32 = x_139.x_ProjectionParams.y;
  u_xlat25 = (-(x_1913) + -(x_1917));
  let x_1920 : f32 = u_xlat25;
  u_xlat25 = max(x_1920, 0.0f);
  let x_1922 : f32 = u_xlat25;
  let x_1925 : f32 = x_139.unity_FogParams.x;
  u_xlat25 = (x_1922 * x_1925);
  let x_1934 : vec2<f32> = vs_INTERP5;
  let x_1936 : f32 = x_139.x_GlobalMipBias.x;
  let x_1937 : vec4<f32> = textureSampleBias(unity_Lightmap, samplerunity_Lightmap, x_1934, x_1936);
  u_xlat28 = vec3<f32>(x_1937.x, x_1937.y, x_1937.z);
  let x_1940 : vec4<f32> = x_139.x_ScaledScreenParams;
  let x_1941 : vec2<f32> = vec2<f32>(x_1940.x, x_1940.y);
  let x_1945 : vec2<f32> = (vec2<f32>(1.0f, 1.0f) / vec2<f32>(x_1941.x, x_1941.y));
  let x_1946 : vec4<f32> = u_xlat7;
  u_xlat7 = vec4<f32>(x_1945.x, x_1945.y, x_1946.z, x_1946.w);
  let x_1948 : vec4<f32> = u_xlat7;
  let x_1950 : vec4<f32> = hlslcc_FragCoord;
  let x_1952 : vec2<f32> = (vec2<f32>(x_1948.x, x_1948.y) * vec2<f32>(x_1950.x, x_1950.y));
  let x_1953 : vec4<f32> = u_xlat7;
  u_xlat7 = vec4<f32>(x_1952.x, x_1952.y, x_1953.z, x_1953.w);
  let x_1956 : f32 = u_xlat7.y;
  let x_1959 : f32 = x_139.x_ScaleBiasRt.x;
  let x_1962 : f32 = x_139.x_ScaleBiasRt.y;
  u_xlat69 = ((x_1956 * x_1959) + x_1962);
  let x_1964 : f32 = u_xlat69;
  u_xlat7.z = (-(x_1964) + 1.0f);
  let x_1969 : f32 = u_xlat6.x;
  u_xlat6.x = x_1969;
  let x_1972 : f32 = u_xlat6.x;
  u_xlat6.x = clamp(x_1972, 0.0f, 1.0f);
  let x_1975 : f32 = u_xlat67;
  u_xlat67 = min(x_1975, 1.0f);
  let x_1977 : vec3<f32> = u_xlat5;
  u_xlat5 = (x_1977 * vec3<f32>(0.959999979f, 0.959999979f, 0.959999979f));
  let x_1982 : f32 = u_xlat6.x;
  u_xlat69 = (-(x_1982) + 1.0f);
  let x_1986 : f32 = u_xlat69;
  let x_1987 : f32 = u_xlat69;
  u_xlat70 = (x_1986 * x_1987);
  let x_1989 : f32 = u_xlat70;
  u_xlat70 = max(x_1989, 0.0078125f);
  let x_1992 : f32 = u_xlat70;
  let x_1993 : f32 = u_xlat70;
  u_xlat71 = (x_1992 * x_1993);
  let x_1996 : f32 = u_xlat6.x;
  u_xlat6.x = (x_1996 + 0.040000021f);
  let x_2001 : f32 = u_xlat6.x;
  u_xlat6.x = min(x_2001, 1.0f);
  let x_2004 : f32 = u_xlat70;
  u_xlat29.x = ((x_2004 * 4.0f) + 2.0f);
  let x_2013 : vec4<f32> = u_xlat7;
  let x_2016 : f32 = x_139.x_GlobalMipBias.x;
  let x_2017 : vec4<f32> = textureSampleBias(x_ScreenSpaceOcclusionTexture, sampler_ScreenSpaceOcclusionTexture, vec2<f32>(x_2013.x, x_2013.z), x_2016);
  u_xlat7.x = x_2017.x;
  let x_2022 : f32 = u_xlat7.x;
  u_xlat51 = (x_2022 + -1.0f);
  let x_2025 : f32 = x_139.x_AmbientOcclusionParam.w;
  let x_2026 : f32 = u_xlat51;
  u_xlat51 = ((x_2025 * x_2026) + 1.0f);
  let x_2030 : f32 = u_xlat7.x;
  let x_2032 : f32 = vs_INTERP4.w;
  u_xlat7.x = min(x_2030, x_2032);
  let x_2035 : bool = u_xlatb0;
  if (x_2035) {
    let x_2039 : f32 = x_253.x_MainLightShadowParams.y;
    u_xlatb0 = (x_2039 == 1.0f);
    let x_2041 : bool = u_xlatb0;
    if (x_2041) {
      let x_2044 : vec4<f32> = u_xlat2;
      let x_2047 : vec4<f32> = x_253.x_MainLightShadowOffset0;
      u_xlat8 = (vec4<f32>(x_2044.x, x_2044.y, x_2044.x, x_2044.y) + x_2047);
      let x_2050 : vec4<f32> = u_xlat8;
      let x_2051 : vec2<f32> = vec2<f32>(x_2050.x, x_2050.y);
      let x_2053 : f32 = u_xlat2.z;
      txVec30 = vec3<f32>(x_2051.x, x_2051.y, x_2053);
      let x_2060 : vec3<f32> = txVec30;
      let x_2062 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2060.xy, x_2060.z);
      u_xlat9.x = x_2062;
      let x_2065 : vec4<f32> = u_xlat8;
      let x_2066 : vec2<f32> = vec2<f32>(x_2065.z, x_2065.w);
      let x_2068 : f32 = u_xlat2.z;
      txVec31 = vec3<f32>(x_2066.x, x_2066.y, x_2068);
      let x_2075 : vec3<f32> = txVec31;
      let x_2077 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2075.xy, x_2075.z);
      u_xlat9.y = x_2077;
      let x_2079 : vec4<f32> = u_xlat2;
      let x_2082 : vec4<f32> = x_253.x_MainLightShadowOffset1;
      u_xlat8 = (vec4<f32>(x_2079.x, x_2079.y, x_2079.x, x_2079.y) + x_2082);
      let x_2085 : vec4<f32> = u_xlat8;
      let x_2086 : vec2<f32> = vec2<f32>(x_2085.x, x_2085.y);
      let x_2088 : f32 = u_xlat2.z;
      txVec32 = vec3<f32>(x_2086.x, x_2086.y, x_2088);
      let x_2095 : vec3<f32> = txVec32;
      let x_2097 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2095.xy, x_2095.z);
      u_xlat9.z = x_2097;
      let x_2100 : vec4<f32> = u_xlat8;
      let x_2101 : vec2<f32> = vec2<f32>(x_2100.z, x_2100.w);
      let x_2103 : f32 = u_xlat2.z;
      txVec33 = vec3<f32>(x_2101.x, x_2101.y, x_2103);
      let x_2110 : vec3<f32> = txVec33;
      let x_2112 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2110.xy, x_2110.z);
      u_xlat9.w = x_2112;
      let x_2114 : vec4<f32> = u_xlat9;
      u_xlat0.x = dot(x_2114, vec4<f32>(0.25f, 0.25f, 0.25f, 0.25f));
    } else {
      let x_2120 : f32 = x_253.x_MainLightShadowParams.y;
      u_xlatb73 = (x_2120 == 2.0f);
      let x_2122 : bool = u_xlatb73;
      if (x_2122) {
        let x_2125 : vec4<f32> = u_xlat2;
        let x_2128 : vec4<f32> = x_253.x_MainLightShadowmapSize;
        let x_2131 : vec2<f32> = ((vec2<f32>(x_2125.x, x_2125.y) * vec2<f32>(x_2128.z, x_2128.w)) + vec2<f32>(0.5f, 0.5f));
        let x_2132 : vec4<f32> = u_xlat8;
        u_xlat8 = vec4<f32>(x_2131.x, x_2131.y, x_2132.z, x_2132.w);
        let x_2134 : vec4<f32> = u_xlat8;
        let x_2136 : vec2<f32> = floor(vec2<f32>(x_2134.x, x_2134.y));
        let x_2137 : vec4<f32> = u_xlat8;
        u_xlat8 = vec4<f32>(x_2136.x, x_2136.y, x_2137.z, x_2137.w);
        let x_2139 : vec4<f32> = u_xlat2;
        let x_2142 : vec4<f32> = x_253.x_MainLightShadowmapSize;
        let x_2145 : vec4<f32> = u_xlat8;
        u_xlat52 = ((vec2<f32>(x_2139.x, x_2139.y) * vec2<f32>(x_2142.z, x_2142.w)) + -(vec2<f32>(x_2145.x, x_2145.y)));
        let x_2149 : vec2<f32> = u_xlat52;
        u_xlat9 = (vec4<f32>(x_2149.x, x_2149.x, x_2149.y, x_2149.y) + vec4<f32>(0.5f, 1.0f, 0.5f, 1.0f));
        let x_2152 : vec4<f32> = u_xlat9;
        let x_2154 : vec4<f32> = u_xlat9;
        u_xlat10 = (vec4<f32>(x_2152.x, x_2152.x, x_2152.z, x_2152.z) * vec4<f32>(x_2154.x, x_2154.x, x_2154.z, x_2154.z));
        let x_2157 : vec4<f32> = u_xlat10;
        let x_2159 : vec2<f32> = (vec2<f32>(x_2157.y, x_2157.w) * vec2<f32>(0.079999998f, 0.079999998f));
        let x_2160 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_2159.x, x_2160.y, x_2159.y, x_2160.w);
        let x_2162 : vec4<f32> = u_xlat10;
        let x_2165 : vec2<f32> = u_xlat52;
        let x_2167 : vec2<f32> = ((vec2<f32>(x_2162.x, x_2162.z) * vec2<f32>(0.5f, 0.5f)) + -(x_2165));
        let x_2168 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_2167.x, x_2167.y, x_2168.z, x_2168.w);
        let x_2171 : vec2<f32> = u_xlat52;
        u_xlat54 = (-(x_2171) + vec2<f32>(1.0f, 1.0f));
        let x_2174 : vec2<f32> = u_xlat52;
        let x_2175 : vec2<f32> = min(x_2174, vec2<f32>(0.0f, 0.0f));
        let x_2176 : vec4<f32> = u_xlat11;
        u_xlat11 = vec4<f32>(x_2175.x, x_2175.y, x_2176.z, x_2176.w);
        let x_2178 : vec4<f32> = u_xlat11;
        let x_2181 : vec4<f32> = u_xlat11;
        let x_2184 : vec2<f32> = u_xlat54;
        let x_2185 : vec2<f32> = ((-(vec2<f32>(x_2178.x, x_2178.y)) * vec2<f32>(x_2181.x, x_2181.y)) + x_2184);
        let x_2186 : vec4<f32> = u_xlat11;
        u_xlat11 = vec4<f32>(x_2185.x, x_2185.y, x_2186.z, x_2186.w);
        let x_2188 : vec2<f32> = u_xlat52;
        u_xlat52 = max(x_2188, vec2<f32>(0.0f, 0.0f));
        let x_2190 : vec2<f32> = u_xlat52;
        let x_2192 : vec2<f32> = u_xlat52;
        let x_2194 : vec4<f32> = u_xlat9;
        u_xlat52 = ((-(x_2190) * x_2192) + vec2<f32>(x_2194.y, x_2194.w));
        let x_2197 : vec4<f32> = u_xlat11;
        let x_2199 : vec2<f32> = (vec2<f32>(x_2197.x, x_2197.y) + vec2<f32>(1.0f, 1.0f));
        let x_2200 : vec4<f32> = u_xlat11;
        u_xlat11 = vec4<f32>(x_2199.x, x_2199.y, x_2200.z, x_2200.w);
        let x_2202 : vec2<f32> = u_xlat52;
        u_xlat52 = (x_2202 + vec2<f32>(1.0f, 1.0f));
        let x_2204 : vec4<f32> = u_xlat10;
        let x_2206 : vec2<f32> = (vec2<f32>(x_2204.x, x_2204.y) * vec2<f32>(0.159999996f, 0.159999996f));
        let x_2207 : vec4<f32> = u_xlat12;
        u_xlat12 = vec4<f32>(x_2206.x, x_2206.y, x_2207.z, x_2207.w);
        let x_2209 : vec2<f32> = u_xlat54;
        let x_2210 : vec2<f32> = (x_2209 * vec2<f32>(0.159999996f, 0.159999996f));
        let x_2211 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_2210.x, x_2210.y, x_2211.z, x_2211.w);
        let x_2213 : vec4<f32> = u_xlat11;
        let x_2215 : vec2<f32> = (vec2<f32>(x_2213.x, x_2213.y) * vec2<f32>(0.159999996f, 0.159999996f));
        let x_2216 : vec4<f32> = u_xlat11;
        u_xlat11 = vec4<f32>(x_2215.x, x_2215.y, x_2216.z, x_2216.w);
        let x_2218 : vec2<f32> = u_xlat52;
        let x_2219 : vec2<f32> = (x_2218 * vec2<f32>(0.159999996f, 0.159999996f));
        let x_2220 : vec4<f32> = u_xlat13;
        u_xlat13 = vec4<f32>(x_2219.x, x_2219.y, x_2220.z, x_2220.w);
        let x_2222 : vec4<f32> = u_xlat9;
        u_xlat52 = (vec2<f32>(x_2222.y, x_2222.w) * vec2<f32>(0.159999996f, 0.159999996f));
        let x_2226 : f32 = u_xlat11.x;
        u_xlat12.z = x_2226;
        let x_2229 : f32 = u_xlat52.x;
        u_xlat12.w = x_2229;
        let x_2232 : f32 = u_xlat13.x;
        u_xlat10.z = x_2232;
        let x_2235 : f32 = u_xlat9.x;
        u_xlat10.w = x_2235;
        let x_2237 : vec4<f32> = u_xlat10;
        let x_2239 : vec4<f32> = u_xlat12;
        u_xlat14 = (vec4<f32>(x_2237.z, x_2237.w, x_2237.x, x_2237.z) + vec4<f32>(x_2239.z, x_2239.w, x_2239.x, x_2239.z));
        let x_2243 : f32 = u_xlat12.y;
        u_xlat11.z = x_2243;
        let x_2246 : f32 = u_xlat52.y;
        u_xlat11.w = x_2246;
        let x_2249 : f32 = u_xlat10.y;
        u_xlat13.z = x_2249;
        let x_2252 : f32 = u_xlat9.z;
        u_xlat13.w = x_2252;
        let x_2254 : vec4<f32> = u_xlat11;
        let x_2256 : vec4<f32> = u_xlat13;
        let x_2258 : vec3<f32> = (vec3<f32>(x_2254.z, x_2254.y, x_2254.w) + vec3<f32>(x_2256.z, x_2256.y, x_2256.w));
        let x_2259 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_2258.x, x_2258.y, x_2258.z, x_2259.w);
        let x_2261 : vec4<f32> = u_xlat10;
        let x_2263 : vec4<f32> = u_xlat14;
        let x_2265 : vec3<f32> = (vec3<f32>(x_2261.x, x_2261.z, x_2261.w) / vec3<f32>(x_2263.z, x_2263.w, x_2263.y));
        let x_2266 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_2265.x, x_2265.y, x_2265.z, x_2266.w);
        let x_2268 : vec4<f32> = u_xlat10;
        let x_2270 : vec3<f32> = (vec3<f32>(x_2268.x, x_2268.y, x_2268.z) + vec3<f32>(-2.5f, -0.5f, 1.5f));
        let x_2271 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_2270.x, x_2270.y, x_2270.z, x_2271.w);
        let x_2273 : vec4<f32> = u_xlat13;
        let x_2275 : vec4<f32> = u_xlat9;
        let x_2277 : vec3<f32> = (vec3<f32>(x_2273.z, x_2273.y, x_2273.w) / vec3<f32>(x_2275.x, x_2275.y, x_2275.z));
        let x_2278 : vec4<f32> = u_xlat11;
        u_xlat11 = vec4<f32>(x_2277.x, x_2277.y, x_2277.z, x_2278.w);
        let x_2280 : vec4<f32> = u_xlat11;
        let x_2282 : vec3<f32> = (vec3<f32>(x_2280.x, x_2280.y, x_2280.z) + vec3<f32>(-2.5f, -0.5f, 1.5f));
        let x_2283 : vec4<f32> = u_xlat11;
        u_xlat11 = vec4<f32>(x_2282.x, x_2282.y, x_2282.z, x_2283.w);
        let x_2285 : vec4<f32> = u_xlat10;
        let x_2288 : vec4<f32> = x_253.x_MainLightShadowmapSize;
        let x_2290 : vec3<f32> = (vec3<f32>(x_2285.y, x_2285.x, x_2285.z) * vec3<f32>(x_2288.x, x_2288.x, x_2288.x));
        let x_2291 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_2290.x, x_2290.y, x_2290.z, x_2291.w);
        let x_2293 : vec4<f32> = u_xlat11;
        let x_2296 : vec4<f32> = x_253.x_MainLightShadowmapSize;
        let x_2298 : vec3<f32> = (vec3<f32>(x_2293.x, x_2293.y, x_2293.z) * vec3<f32>(x_2296.y, x_2296.y, x_2296.y));
        let x_2299 : vec4<f32> = u_xlat11;
        u_xlat11 = vec4<f32>(x_2298.x, x_2298.y, x_2298.z, x_2299.w);
        let x_2302 : f32 = u_xlat11.x;
        u_xlat10.w = x_2302;
        let x_2304 : vec4<f32> = u_xlat8;
        let x_2307 : vec4<f32> = x_253.x_MainLightShadowmapSize;
        let x_2310 : vec4<f32> = u_xlat10;
        u_xlat12 = ((vec4<f32>(x_2304.x, x_2304.y, x_2304.x, x_2304.y) * vec4<f32>(x_2307.x, x_2307.y, x_2307.x, x_2307.y)) + vec4<f32>(x_2310.y, x_2310.w, x_2310.x, x_2310.w));
        let x_2313 : vec4<f32> = u_xlat8;
        let x_2316 : vec4<f32> = x_253.x_MainLightShadowmapSize;
        let x_2319 : vec4<f32> = u_xlat10;
        u_xlat52 = ((vec2<f32>(x_2313.x, x_2313.y) * vec2<f32>(x_2316.x, x_2316.y)) + vec2<f32>(x_2319.z, x_2319.w));
        let x_2323 : f32 = u_xlat10.y;
        u_xlat11.w = x_2323;
        let x_2325 : vec4<f32> = u_xlat11;
        let x_2326 : vec2<f32> = vec2<f32>(x_2325.y, x_2325.z);
        let x_2327 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_2327.x, x_2326.x, x_2327.z, x_2326.y);
        let x_2329 : vec4<f32> = u_xlat8;
        let x_2332 : vec4<f32> = x_253.x_MainLightShadowmapSize;
        let x_2335 : vec4<f32> = u_xlat10;
        u_xlat13 = ((vec4<f32>(x_2329.x, x_2329.y, x_2329.x, x_2329.y) * vec4<f32>(x_2332.x, x_2332.y, x_2332.x, x_2332.y)) + vec4<f32>(x_2335.x, x_2335.y, x_2335.z, x_2335.y));
        let x_2338 : vec4<f32> = u_xlat8;
        let x_2341 : vec4<f32> = x_253.x_MainLightShadowmapSize;
        let x_2344 : vec4<f32> = u_xlat11;
        u_xlat11 = ((vec4<f32>(x_2338.x, x_2338.y, x_2338.x, x_2338.y) * vec4<f32>(x_2341.x, x_2341.y, x_2341.x, x_2341.y)) + vec4<f32>(x_2344.w, x_2344.y, x_2344.w, x_2344.z));
        let x_2347 : vec4<f32> = u_xlat8;
        let x_2350 : vec4<f32> = x_253.x_MainLightShadowmapSize;
        let x_2353 : vec4<f32> = u_xlat10;
        u_xlat10 = ((vec4<f32>(x_2347.x, x_2347.y, x_2347.x, x_2347.y) * vec4<f32>(x_2350.x, x_2350.y, x_2350.x, x_2350.y)) + vec4<f32>(x_2353.x, x_2353.w, x_2353.z, x_2353.w));
        let x_2356 : vec4<f32> = u_xlat9;
        let x_2358 : vec4<f32> = u_xlat14;
        u_xlat15 = (vec4<f32>(x_2356.x, x_2356.x, x_2356.x, x_2356.y) * vec4<f32>(x_2358.z, x_2358.w, x_2358.y, x_2358.z));
        let x_2361 : vec4<f32> = u_xlat9;
        let x_2363 : vec4<f32> = u_xlat14;
        u_xlat16 = (vec4<f32>(x_2361.y, x_2361.y, x_2361.z, x_2361.z) * x_2363);
        let x_2367 : f32 = u_xlat9.z;
        let x_2369 : f32 = u_xlat14.y;
        u_xlat73 = (x_2367 * x_2369);
        let x_2372 : vec4<f32> = u_xlat12;
        let x_2373 : vec2<f32> = vec2<f32>(x_2372.x, x_2372.y);
        let x_2375 : f32 = u_xlat2.z;
        txVec34 = vec3<f32>(x_2373.x, x_2373.y, x_2375);
        let x_2382 : vec3<f32> = txVec34;
        let x_2384 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2382.xy, x_2382.z);
        u_xlat8.x = x_2384;
        let x_2387 : vec4<f32> = u_xlat12;
        let x_2388 : vec2<f32> = vec2<f32>(x_2387.z, x_2387.w);
        let x_2390 : f32 = u_xlat2.z;
        txVec35 = vec3<f32>(x_2388.x, x_2388.y, x_2390);
        let x_2397 : vec3<f32> = txVec35;
        let x_2399 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2397.xy, x_2397.z);
        u_xlat30.x = x_2399;
        let x_2402 : f32 = u_xlat30.x;
        let x_2404 : f32 = u_xlat15.y;
        u_xlat30.x = (x_2402 * x_2404);
        let x_2408 : f32 = u_xlat15.x;
        let x_2410 : f32 = u_xlat8.x;
        let x_2413 : f32 = u_xlat30.x;
        u_xlat8.x = ((x_2408 * x_2410) + x_2413);
        let x_2417 : vec2<f32> = u_xlat52;
        let x_2419 : f32 = u_xlat2.z;
        txVec36 = vec3<f32>(x_2417.x, x_2417.y, x_2419);
        let x_2426 : vec3<f32> = txVec36;
        let x_2428 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2426.xy, x_2426.z);
        u_xlat30.x = x_2428;
        let x_2431 : f32 = u_xlat15.z;
        let x_2433 : f32 = u_xlat30.x;
        let x_2436 : f32 = u_xlat8.x;
        u_xlat8.x = ((x_2431 * x_2433) + x_2436);
        let x_2440 : vec4<f32> = u_xlat11;
        let x_2441 : vec2<f32> = vec2<f32>(x_2440.x, x_2440.y);
        let x_2443 : f32 = u_xlat2.z;
        txVec37 = vec3<f32>(x_2441.x, x_2441.y, x_2443);
        let x_2450 : vec3<f32> = txVec37;
        let x_2452 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2450.xy, x_2450.z);
        u_xlat30.x = x_2452;
        let x_2455 : f32 = u_xlat15.w;
        let x_2457 : f32 = u_xlat30.x;
        let x_2460 : f32 = u_xlat8.x;
        u_xlat8.x = ((x_2455 * x_2457) + x_2460);
        let x_2464 : vec4<f32> = u_xlat13;
        let x_2465 : vec2<f32> = vec2<f32>(x_2464.x, x_2464.y);
        let x_2467 : f32 = u_xlat2.z;
        txVec38 = vec3<f32>(x_2465.x, x_2465.y, x_2467);
        let x_2474 : vec3<f32> = txVec38;
        let x_2476 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2474.xy, x_2474.z);
        u_xlat30.x = x_2476;
        let x_2479 : f32 = u_xlat16.x;
        let x_2481 : f32 = u_xlat30.x;
        let x_2484 : f32 = u_xlat8.x;
        u_xlat8.x = ((x_2479 * x_2481) + x_2484);
        let x_2488 : vec4<f32> = u_xlat13;
        let x_2489 : vec2<f32> = vec2<f32>(x_2488.z, x_2488.w);
        let x_2491 : f32 = u_xlat2.z;
        txVec39 = vec3<f32>(x_2489.x, x_2489.y, x_2491);
        let x_2498 : vec3<f32> = txVec39;
        let x_2500 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2498.xy, x_2498.z);
        u_xlat30.x = x_2500;
        let x_2503 : f32 = u_xlat16.y;
        let x_2505 : f32 = u_xlat30.x;
        let x_2508 : f32 = u_xlat8.x;
        u_xlat8.x = ((x_2503 * x_2505) + x_2508);
        let x_2512 : vec4<f32> = u_xlat11;
        let x_2513 : vec2<f32> = vec2<f32>(x_2512.z, x_2512.w);
        let x_2515 : f32 = u_xlat2.z;
        txVec40 = vec3<f32>(x_2513.x, x_2513.y, x_2515);
        let x_2522 : vec3<f32> = txVec40;
        let x_2524 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2522.xy, x_2522.z);
        u_xlat30.x = x_2524;
        let x_2527 : f32 = u_xlat16.z;
        let x_2529 : f32 = u_xlat30.x;
        let x_2532 : f32 = u_xlat8.x;
        u_xlat8.x = ((x_2527 * x_2529) + x_2532);
        let x_2536 : vec4<f32> = u_xlat10;
        let x_2537 : vec2<f32> = vec2<f32>(x_2536.x, x_2536.y);
        let x_2539 : f32 = u_xlat2.z;
        txVec41 = vec3<f32>(x_2537.x, x_2537.y, x_2539);
        let x_2546 : vec3<f32> = txVec41;
        let x_2548 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2546.xy, x_2546.z);
        u_xlat30.x = x_2548;
        let x_2551 : f32 = u_xlat16.w;
        let x_2553 : f32 = u_xlat30.x;
        let x_2556 : f32 = u_xlat8.x;
        u_xlat8.x = ((x_2551 * x_2553) + x_2556);
        let x_2560 : vec4<f32> = u_xlat10;
        let x_2561 : vec2<f32> = vec2<f32>(x_2560.z, x_2560.w);
        let x_2563 : f32 = u_xlat2.z;
        txVec42 = vec3<f32>(x_2561.x, x_2561.y, x_2563);
        let x_2570 : vec3<f32> = txVec42;
        let x_2572 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2570.xy, x_2570.z);
        u_xlat30.x = x_2572;
        let x_2574 : f32 = u_xlat73;
        let x_2576 : f32 = u_xlat30.x;
        let x_2579 : f32 = u_xlat8.x;
        u_xlat0.x = ((x_2574 * x_2576) + x_2579);
      } else {
        let x_2583 : vec4<f32> = u_xlat2;
        let x_2586 : vec4<f32> = x_253.x_MainLightShadowmapSize;
        let x_2589 : vec2<f32> = ((vec2<f32>(x_2583.x, x_2583.y) * vec2<f32>(x_2586.z, x_2586.w)) + vec2<f32>(0.5f, 0.5f));
        let x_2590 : vec4<f32> = u_xlat8;
        u_xlat8 = vec4<f32>(x_2589.x, x_2589.y, x_2590.z, x_2590.w);
        let x_2592 : vec4<f32> = u_xlat8;
        let x_2594 : vec2<f32> = floor(vec2<f32>(x_2592.x, x_2592.y));
        let x_2595 : vec4<f32> = u_xlat8;
        u_xlat8 = vec4<f32>(x_2594.x, x_2594.y, x_2595.z, x_2595.w);
        let x_2597 : vec4<f32> = u_xlat2;
        let x_2600 : vec4<f32> = x_253.x_MainLightShadowmapSize;
        let x_2603 : vec4<f32> = u_xlat8;
        u_xlat52 = ((vec2<f32>(x_2597.x, x_2597.y) * vec2<f32>(x_2600.z, x_2600.w)) + -(vec2<f32>(x_2603.x, x_2603.y)));
        let x_2607 : vec2<f32> = u_xlat52;
        u_xlat9 = (vec4<f32>(x_2607.x, x_2607.x, x_2607.y, x_2607.y) + vec4<f32>(0.5f, 1.0f, 0.5f, 1.0f));
        let x_2610 : vec4<f32> = u_xlat9;
        let x_2612 : vec4<f32> = u_xlat9;
        u_xlat10 = (vec4<f32>(x_2610.x, x_2610.x, x_2610.z, x_2610.z) * vec4<f32>(x_2612.x, x_2612.x, x_2612.z, x_2612.z));
        let x_2615 : vec4<f32> = u_xlat10;
        let x_2617 : vec2<f32> = (vec2<f32>(x_2615.y, x_2615.w) * vec2<f32>(0.040816002f, 0.040816002f));
        let x_2618 : vec4<f32> = u_xlat11;
        u_xlat11 = vec4<f32>(x_2618.x, x_2617.x, x_2618.z, x_2617.y);
        let x_2620 : vec4<f32> = u_xlat10;
        let x_2623 : vec2<f32> = u_xlat52;
        let x_2625 : vec2<f32> = ((vec2<f32>(x_2620.x, x_2620.z) * vec2<f32>(0.5f, 0.5f)) + -(x_2623));
        let x_2626 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_2625.x, x_2626.y, x_2625.y, x_2626.w);
        let x_2628 : vec2<f32> = u_xlat52;
        let x_2630 : vec2<f32> = (-(x_2628) + vec2<f32>(1.0f, 1.0f));
        let x_2631 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_2630.x, x_2630.y, x_2631.z, x_2631.w);
        let x_2633 : vec2<f32> = u_xlat52;
        u_xlat54 = min(x_2633, vec2<f32>(0.0f, 0.0f));
        let x_2635 : vec2<f32> = u_xlat54;
        let x_2637 : vec2<f32> = u_xlat54;
        let x_2639 : vec4<f32> = u_xlat10;
        let x_2641 : vec2<f32> = ((-(x_2635) * x_2637) + vec2<f32>(x_2639.x, x_2639.y));
        let x_2642 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_2641.x, x_2641.y, x_2642.z, x_2642.w);
        let x_2644 : vec2<f32> = u_xlat52;
        u_xlat54 = max(x_2644, vec2<f32>(0.0f, 0.0f));
        let x_2647 : vec2<f32> = u_xlat54;
        let x_2649 : vec2<f32> = u_xlat54;
        let x_2651 : vec4<f32> = u_xlat9;
        let x_2653 : vec2<f32> = ((-(x_2647) * x_2649) + vec2<f32>(x_2651.y, x_2651.w));
        let x_2654 : vec3<f32> = u_xlat31;
        u_xlat31 = vec3<f32>(x_2653.x, x_2654.y, x_2653.y);
        let x_2656 : vec4<f32> = u_xlat10;
        let x_2658 : vec2<f32> = (vec2<f32>(x_2656.x, x_2656.y) + vec2<f32>(2.0f, 2.0f));
        let x_2659 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_2658.x, x_2658.y, x_2659.z, x_2659.w);
        let x_2661 : vec3<f32> = u_xlat31;
        let x_2663 : vec2<f32> = (vec2<f32>(x_2661.x, x_2661.z) + vec2<f32>(2.0f, 2.0f));
        let x_2664 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_2664.x, x_2663.x, x_2664.z, x_2663.y);
        let x_2667 : f32 = u_xlat9.y;
        u_xlat12.z = (x_2667 * 0.081632003f);
        let x_2670 : vec4<f32> = u_xlat9;
        let x_2672 : vec3<f32> = (vec3<f32>(x_2670.z, x_2670.x, x_2670.w) * vec3<f32>(0.081632003f, 0.081632003f, 0.081632003f));
        let x_2673 : vec4<f32> = u_xlat13;
        u_xlat13 = vec4<f32>(x_2672.x, x_2672.y, x_2672.z, x_2673.w);
        let x_2675 : vec4<f32> = u_xlat10;
        let x_2677 : vec2<f32> = (vec2<f32>(x_2675.x, x_2675.y) * vec2<f32>(0.081632003f, 0.081632003f));
        let x_2678 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_2677.x, x_2677.y, x_2678.z, x_2678.w);
        let x_2681 : f32 = u_xlat13.y;
        u_xlat12.x = x_2681;
        let x_2683 : vec2<f32> = u_xlat52;
        let x_2686 : vec2<f32> = ((vec2<f32>(x_2683.x, x_2683.x) * vec2<f32>(-0.081632003f, 0.081632003f)) + vec2<f32>(0.163264006f, 0.081632003f));
        let x_2687 : vec4<f32> = u_xlat12;
        u_xlat12 = vec4<f32>(x_2687.x, x_2686.x, x_2687.z, x_2686.y);
        let x_2689 : vec2<f32> = u_xlat52;
        let x_2692 : vec2<f32> = ((vec2<f32>(x_2689.x, x_2689.x) * vec2<f32>(-0.081632003f, 0.081632003f)) + vec2<f32>(0.081632003f, 0.163264006f));
        let x_2693 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_2692.x, x_2693.y, x_2692.y, x_2693.w);
        let x_2696 : f32 = u_xlat9.x;
        u_xlat10.y = x_2696;
        let x_2699 : f32 = u_xlat11.y;
        u_xlat10.w = x_2699;
        let x_2701 : vec4<f32> = u_xlat10;
        let x_2702 : vec4<f32> = u_xlat12;
        u_xlat12 = (x_2701 + x_2702);
        let x_2704 : vec2<f32> = u_xlat52;
        let x_2707 : vec2<f32> = ((vec2<f32>(x_2704.y, x_2704.y) * vec2<f32>(-0.081632003f, 0.081632003f)) + vec2<f32>(0.163264006f, 0.081632003f));
        let x_2708 : vec4<f32> = u_xlat13;
        u_xlat13 = vec4<f32>(x_2708.x, x_2707.x, x_2708.z, x_2707.y);
        let x_2710 : vec2<f32> = u_xlat52;
        let x_2713 : vec2<f32> = ((vec2<f32>(x_2710.y, x_2710.y) * vec2<f32>(-0.081632003f, 0.081632003f)) + vec2<f32>(0.081632003f, 0.163264006f));
        let x_2714 : vec4<f32> = u_xlat11;
        u_xlat11 = vec4<f32>(x_2713.x, x_2714.y, x_2713.y, x_2714.w);
        let x_2717 : f32 = u_xlat9.y;
        u_xlat11.y = x_2717;
        let x_2719 : vec4<f32> = u_xlat11;
        let x_2720 : vec4<f32> = u_xlat13;
        u_xlat9 = (x_2719 + x_2720);
        let x_2722 : vec4<f32> = u_xlat10;
        let x_2723 : vec4<f32> = u_xlat12;
        u_xlat10 = (x_2722 / x_2723);
        let x_2725 : vec4<f32> = u_xlat10;
        u_xlat10 = (x_2725 + vec4<f32>(-3.5f, -1.5f, 0.5f, 2.5f));
        let x_2727 : vec4<f32> = u_xlat11;
        let x_2728 : vec4<f32> = u_xlat9;
        u_xlat11 = (x_2727 / x_2728);
        let x_2730 : vec4<f32> = u_xlat11;
        u_xlat11 = (x_2730 + vec4<f32>(-3.5f, -1.5f, 0.5f, 2.5f));
        let x_2732 : vec4<f32> = u_xlat10;
        let x_2735 : vec4<f32> = x_253.x_MainLightShadowmapSize;
        u_xlat10 = (vec4<f32>(x_2732.w, x_2732.x, x_2732.y, x_2732.z) * vec4<f32>(x_2735.x, x_2735.x, x_2735.x, x_2735.x));
        let x_2738 : vec4<f32> = u_xlat11;
        let x_2741 : vec4<f32> = x_253.x_MainLightShadowmapSize;
        u_xlat11 = (vec4<f32>(x_2738.x, x_2738.w, x_2738.y, x_2738.z) * vec4<f32>(x_2741.y, x_2741.y, x_2741.y, x_2741.y));
        let x_2744 : vec4<f32> = u_xlat10;
        let x_2745 : vec3<f32> = vec3<f32>(x_2744.y, x_2744.z, x_2744.w);
        let x_2746 : vec4<f32> = u_xlat13;
        u_xlat13 = vec4<f32>(x_2745.x, x_2746.y, x_2745.y, x_2745.z);
        let x_2749 : f32 = u_xlat11.x;
        u_xlat13.y = x_2749;
        let x_2751 : vec4<f32> = u_xlat8;
        let x_2754 : vec4<f32> = x_253.x_MainLightShadowmapSize;
        let x_2757 : vec4<f32> = u_xlat13;
        u_xlat14 = ((vec4<f32>(x_2751.x, x_2751.y, x_2751.x, x_2751.y) * vec4<f32>(x_2754.x, x_2754.y, x_2754.x, x_2754.y)) + vec4<f32>(x_2757.x, x_2757.y, x_2757.z, x_2757.y));
        let x_2760 : vec4<f32> = u_xlat8;
        let x_2763 : vec4<f32> = x_253.x_MainLightShadowmapSize;
        let x_2766 : vec4<f32> = u_xlat13;
        u_xlat52 = ((vec2<f32>(x_2760.x, x_2760.y) * vec2<f32>(x_2763.x, x_2763.y)) + vec2<f32>(x_2766.w, x_2766.y));
        let x_2770 : f32 = u_xlat13.y;
        u_xlat10.y = x_2770;
        let x_2773 : f32 = u_xlat11.z;
        u_xlat13.y = x_2773;
        let x_2775 : vec4<f32> = u_xlat8;
        let x_2778 : vec4<f32> = x_253.x_MainLightShadowmapSize;
        let x_2781 : vec4<f32> = u_xlat13;
        u_xlat15 = ((vec4<f32>(x_2775.x, x_2775.y, x_2775.x, x_2775.y) * vec4<f32>(x_2778.x, x_2778.y, x_2778.x, x_2778.y)) + vec4<f32>(x_2781.x, x_2781.y, x_2781.z, x_2781.y));
        let x_2784 : vec4<f32> = u_xlat8;
        let x_2787 : vec4<f32> = x_253.x_MainLightShadowmapSize;
        let x_2790 : vec4<f32> = u_xlat13;
        let x_2792 : vec2<f32> = ((vec2<f32>(x_2784.x, x_2784.y) * vec2<f32>(x_2787.x, x_2787.y)) + vec2<f32>(x_2790.w, x_2790.y));
        let x_2793 : vec4<f32> = u_xlat16;
        u_xlat16 = vec4<f32>(x_2792.x, x_2792.y, x_2793.z, x_2793.w);
        let x_2796 : f32 = u_xlat13.y;
        u_xlat10.z = x_2796;
        let x_2798 : vec4<f32> = u_xlat8;
        let x_2801 : vec4<f32> = x_253.x_MainLightShadowmapSize;
        let x_2804 : vec4<f32> = u_xlat10;
        u_xlat17 = ((vec4<f32>(x_2798.x, x_2798.y, x_2798.x, x_2798.y) * vec4<f32>(x_2801.x, x_2801.y, x_2801.x, x_2801.y)) + vec4<f32>(x_2804.x, x_2804.y, x_2804.x, x_2804.z));
        let x_2808 : f32 = u_xlat11.w;
        u_xlat13.y = x_2808;
        let x_2810 : vec4<f32> = u_xlat8;
        let x_2813 : vec4<f32> = x_253.x_MainLightShadowmapSize;
        let x_2816 : vec4<f32> = u_xlat13;
        u_xlat18 = ((vec4<f32>(x_2810.x, x_2810.y, x_2810.x, x_2810.y) * vec4<f32>(x_2813.x, x_2813.y, x_2813.x, x_2813.y)) + vec4<f32>(x_2816.x, x_2816.y, x_2816.z, x_2816.y));
        let x_2820 : vec4<f32> = u_xlat8;
        let x_2823 : vec4<f32> = x_253.x_MainLightShadowmapSize;
        let x_2826 : vec4<f32> = u_xlat13;
        u_xlat32 = ((vec2<f32>(x_2820.x, x_2820.y) * vec2<f32>(x_2823.x, x_2823.y)) + vec2<f32>(x_2826.w, x_2826.y));
        let x_2830 : f32 = u_xlat13.y;
        u_xlat10.w = x_2830;
        let x_2833 : vec4<f32> = u_xlat8;
        let x_2836 : vec4<f32> = x_253.x_MainLightShadowmapSize;
        let x_2839 : vec4<f32> = u_xlat10;
        u_xlat60 = ((vec2<f32>(x_2833.x, x_2833.y) * vec2<f32>(x_2836.x, x_2836.y)) + vec2<f32>(x_2839.x, x_2839.w));
        let x_2842 : vec4<f32> = u_xlat13;
        let x_2843 : vec3<f32> = vec3<f32>(x_2842.x, x_2842.z, x_2842.w);
        let x_2844 : vec4<f32> = u_xlat11;
        u_xlat11 = vec4<f32>(x_2843.x, x_2844.y, x_2843.y, x_2843.z);
        let x_2846 : vec4<f32> = u_xlat8;
        let x_2849 : vec4<f32> = x_253.x_MainLightShadowmapSize;
        let x_2852 : vec4<f32> = u_xlat11;
        u_xlat13 = ((vec4<f32>(x_2846.x, x_2846.y, x_2846.x, x_2846.y) * vec4<f32>(x_2849.x, x_2849.y, x_2849.x, x_2849.y)) + vec4<f32>(x_2852.x, x_2852.y, x_2852.z, x_2852.y));
        let x_2856 : vec4<f32> = u_xlat8;
        let x_2859 : vec4<f32> = x_253.x_MainLightShadowmapSize;
        let x_2862 : vec4<f32> = u_xlat11;
        u_xlat55 = ((vec2<f32>(x_2856.x, x_2856.y) * vec2<f32>(x_2859.x, x_2859.y)) + vec2<f32>(x_2862.w, x_2862.y));
        let x_2866 : f32 = u_xlat10.x;
        u_xlat11.x = x_2866;
        let x_2868 : vec4<f32> = u_xlat8;
        let x_2871 : vec4<f32> = x_253.x_MainLightShadowmapSize;
        let x_2874 : vec4<f32> = u_xlat11;
        let x_2876 : vec2<f32> = ((vec2<f32>(x_2868.x, x_2868.y) * vec2<f32>(x_2871.x, x_2871.y)) + vec2<f32>(x_2874.x, x_2874.y));
        let x_2877 : vec4<f32> = u_xlat8;
        u_xlat8 = vec4<f32>(x_2876.x, x_2876.y, x_2877.z, x_2877.w);
        let x_2879 : vec4<f32> = u_xlat9;
        let x_2881 : vec4<f32> = u_xlat12;
        u_xlat19 = (vec4<f32>(x_2879.x, x_2879.x, x_2879.x, x_2879.x) * x_2881);
        let x_2884 : vec4<f32> = u_xlat9;
        let x_2886 : vec4<f32> = u_xlat12;
        u_xlat20 = (vec4<f32>(x_2884.y, x_2884.y, x_2884.y, x_2884.y) * x_2886);
        let x_2889 : vec4<f32> = u_xlat9;
        let x_2891 : vec4<f32> = u_xlat12;
        u_xlat21 = (vec4<f32>(x_2889.z, x_2889.z, x_2889.z, x_2889.z) * x_2891);
        let x_2893 : vec4<f32> = u_xlat9;
        let x_2895 : vec4<f32> = u_xlat12;
        u_xlat9 = (vec4<f32>(x_2893.w, x_2893.w, x_2893.w, x_2893.w) * x_2895);
        let x_2898 : vec4<f32> = u_xlat14;
        let x_2899 : vec2<f32> = vec2<f32>(x_2898.x, x_2898.y);
        let x_2901 : f32 = u_xlat2.z;
        txVec43 = vec3<f32>(x_2899.x, x_2899.y, x_2901);
        let x_2908 : vec3<f32> = txVec43;
        let x_2910 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2908.xy, x_2908.z);
        u_xlat73 = x_2910;
        let x_2912 : vec4<f32> = u_xlat14;
        let x_2913 : vec2<f32> = vec2<f32>(x_2912.z, x_2912.w);
        let x_2915 : f32 = u_xlat2.z;
        txVec44 = vec3<f32>(x_2913.x, x_2913.y, x_2915);
        let x_2922 : vec3<f32> = txVec44;
        let x_2924 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2922.xy, x_2922.z);
        u_xlat10.x = x_2924;
        let x_2927 : f32 = u_xlat10.x;
        let x_2929 : f32 = u_xlat19.y;
        u_xlat10.x = (x_2927 * x_2929);
        let x_2933 : f32 = u_xlat19.x;
        let x_2934 : f32 = u_xlat73;
        let x_2937 : f32 = u_xlat10.x;
        u_xlat73 = ((x_2933 * x_2934) + x_2937);
        let x_2940 : vec2<f32> = u_xlat52;
        let x_2942 : f32 = u_xlat2.z;
        txVec45 = vec3<f32>(x_2940.x, x_2940.y, x_2942);
        let x_2949 : vec3<f32> = txVec45;
        let x_2951 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2949.xy, x_2949.z);
        u_xlat52.x = x_2951;
        let x_2954 : f32 = u_xlat19.z;
        let x_2956 : f32 = u_xlat52.x;
        let x_2958 : f32 = u_xlat73;
        u_xlat73 = ((x_2954 * x_2956) + x_2958);
        let x_2961 : vec4<f32> = u_xlat17;
        let x_2962 : vec2<f32> = vec2<f32>(x_2961.x, x_2961.y);
        let x_2964 : f32 = u_xlat2.z;
        txVec46 = vec3<f32>(x_2962.x, x_2962.y, x_2964);
        let x_2971 : vec3<f32> = txVec46;
        let x_2973 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2971.xy, x_2971.z);
        u_xlat52.x = x_2973;
        let x_2976 : f32 = u_xlat19.w;
        let x_2978 : f32 = u_xlat52.x;
        let x_2980 : f32 = u_xlat73;
        u_xlat73 = ((x_2976 * x_2978) + x_2980);
        let x_2983 : vec4<f32> = u_xlat15;
        let x_2984 : vec2<f32> = vec2<f32>(x_2983.x, x_2983.y);
        let x_2986 : f32 = u_xlat2.z;
        txVec47 = vec3<f32>(x_2984.x, x_2984.y, x_2986);
        let x_2993 : vec3<f32> = txVec47;
        let x_2995 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2993.xy, x_2993.z);
        u_xlat52.x = x_2995;
        let x_2998 : f32 = u_xlat20.x;
        let x_3000 : f32 = u_xlat52.x;
        let x_3002 : f32 = u_xlat73;
        u_xlat73 = ((x_2998 * x_3000) + x_3002);
        let x_3005 : vec4<f32> = u_xlat15;
        let x_3006 : vec2<f32> = vec2<f32>(x_3005.z, x_3005.w);
        let x_3008 : f32 = u_xlat2.z;
        txVec48 = vec3<f32>(x_3006.x, x_3006.y, x_3008);
        let x_3015 : vec3<f32> = txVec48;
        let x_3017 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_3015.xy, x_3015.z);
        u_xlat52.x = x_3017;
        let x_3020 : f32 = u_xlat20.y;
        let x_3022 : f32 = u_xlat52.x;
        let x_3024 : f32 = u_xlat73;
        u_xlat73 = ((x_3020 * x_3022) + x_3024);
        let x_3027 : vec4<f32> = u_xlat16;
        let x_3028 : vec2<f32> = vec2<f32>(x_3027.x, x_3027.y);
        let x_3030 : f32 = u_xlat2.z;
        txVec49 = vec3<f32>(x_3028.x, x_3028.y, x_3030);
        let x_3037 : vec3<f32> = txVec49;
        let x_3039 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_3037.xy, x_3037.z);
        u_xlat52.x = x_3039;
        let x_3042 : f32 = u_xlat20.z;
        let x_3044 : f32 = u_xlat52.x;
        let x_3046 : f32 = u_xlat73;
        u_xlat73 = ((x_3042 * x_3044) + x_3046);
        let x_3049 : vec4<f32> = u_xlat17;
        let x_3050 : vec2<f32> = vec2<f32>(x_3049.z, x_3049.w);
        let x_3052 : f32 = u_xlat2.z;
        txVec50 = vec3<f32>(x_3050.x, x_3050.y, x_3052);
        let x_3059 : vec3<f32> = txVec50;
        let x_3061 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_3059.xy, x_3059.z);
        u_xlat52.x = x_3061;
        let x_3064 : f32 = u_xlat20.w;
        let x_3066 : f32 = u_xlat52.x;
        let x_3068 : f32 = u_xlat73;
        u_xlat73 = ((x_3064 * x_3066) + x_3068);
        let x_3071 : vec4<f32> = u_xlat18;
        let x_3072 : vec2<f32> = vec2<f32>(x_3071.x, x_3071.y);
        let x_3074 : f32 = u_xlat2.z;
        txVec51 = vec3<f32>(x_3072.x, x_3072.y, x_3074);
        let x_3081 : vec3<f32> = txVec51;
        let x_3083 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_3081.xy, x_3081.z);
        u_xlat52.x = x_3083;
        let x_3086 : f32 = u_xlat21.x;
        let x_3088 : f32 = u_xlat52.x;
        let x_3090 : f32 = u_xlat73;
        u_xlat73 = ((x_3086 * x_3088) + x_3090);
        let x_3093 : vec4<f32> = u_xlat18;
        let x_3094 : vec2<f32> = vec2<f32>(x_3093.z, x_3093.w);
        let x_3096 : f32 = u_xlat2.z;
        txVec52 = vec3<f32>(x_3094.x, x_3094.y, x_3096);
        let x_3103 : vec3<f32> = txVec52;
        let x_3105 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_3103.xy, x_3103.z);
        u_xlat52.x = x_3105;
        let x_3108 : f32 = u_xlat21.y;
        let x_3110 : f32 = u_xlat52.x;
        let x_3112 : f32 = u_xlat73;
        u_xlat73 = ((x_3108 * x_3110) + x_3112);
        let x_3115 : vec2<f32> = u_xlat32;
        let x_3117 : f32 = u_xlat2.z;
        txVec53 = vec3<f32>(x_3115.x, x_3115.y, x_3117);
        let x_3124 : vec3<f32> = txVec53;
        let x_3126 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_3124.xy, x_3124.z);
        u_xlat52.x = x_3126;
        let x_3129 : f32 = u_xlat21.z;
        let x_3131 : f32 = u_xlat52.x;
        let x_3133 : f32 = u_xlat73;
        u_xlat73 = ((x_3129 * x_3131) + x_3133);
        let x_3136 : vec2<f32> = u_xlat60;
        let x_3138 : f32 = u_xlat2.z;
        txVec54 = vec3<f32>(x_3136.x, x_3136.y, x_3138);
        let x_3145 : vec3<f32> = txVec54;
        let x_3147 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_3145.xy, x_3145.z);
        u_xlat52.x = x_3147;
        let x_3150 : f32 = u_xlat21.w;
        let x_3152 : f32 = u_xlat52.x;
        let x_3154 : f32 = u_xlat73;
        u_xlat73 = ((x_3150 * x_3152) + x_3154);
        let x_3157 : vec4<f32> = u_xlat13;
        let x_3158 : vec2<f32> = vec2<f32>(x_3157.x, x_3157.y);
        let x_3160 : f32 = u_xlat2.z;
        txVec55 = vec3<f32>(x_3158.x, x_3158.y, x_3160);
        let x_3167 : vec3<f32> = txVec55;
        let x_3169 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_3167.xy, x_3167.z);
        u_xlat52.x = x_3169;
        let x_3172 : f32 = u_xlat9.x;
        let x_3174 : f32 = u_xlat52.x;
        let x_3176 : f32 = u_xlat73;
        u_xlat73 = ((x_3172 * x_3174) + x_3176);
        let x_3179 : vec4<f32> = u_xlat13;
        let x_3180 : vec2<f32> = vec2<f32>(x_3179.z, x_3179.w);
        let x_3182 : f32 = u_xlat2.z;
        txVec56 = vec3<f32>(x_3180.x, x_3180.y, x_3182);
        let x_3189 : vec3<f32> = txVec56;
        let x_3191 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_3189.xy, x_3189.z);
        u_xlat52.x = x_3191;
        let x_3194 : f32 = u_xlat9.y;
        let x_3196 : f32 = u_xlat52.x;
        let x_3198 : f32 = u_xlat73;
        u_xlat73 = ((x_3194 * x_3196) + x_3198);
        let x_3201 : vec2<f32> = u_xlat55;
        let x_3203 : f32 = u_xlat2.z;
        txVec57 = vec3<f32>(x_3201.x, x_3201.y, x_3203);
        let x_3210 : vec3<f32> = txVec57;
        let x_3212 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_3210.xy, x_3210.z);
        u_xlat52.x = x_3212;
        let x_3215 : f32 = u_xlat9.z;
        let x_3217 : f32 = u_xlat52.x;
        let x_3219 : f32 = u_xlat73;
        u_xlat73 = ((x_3215 * x_3217) + x_3219);
        let x_3222 : vec4<f32> = u_xlat8;
        let x_3223 : vec2<f32> = vec2<f32>(x_3222.x, x_3222.y);
        let x_3225 : f32 = u_xlat2.z;
        txVec58 = vec3<f32>(x_3223.x, x_3223.y, x_3225);
        let x_3232 : vec3<f32> = txVec58;
        let x_3234 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_3232.xy, x_3232.z);
        u_xlat8.x = x_3234;
        let x_3237 : f32 = u_xlat9.w;
        let x_3239 : f32 = u_xlat8.x;
        let x_3241 : f32 = u_xlat73;
        u_xlat0.x = ((x_3237 * x_3239) + x_3241);
      }
    }
  } else {
    let x_3246 : vec4<f32> = u_xlat2;
    let x_3247 : vec2<f32> = vec2<f32>(x_3246.x, x_3246.y);
    let x_3249 : f32 = u_xlat2.z;
    txVec59 = vec3<f32>(x_3247.x, x_3247.y, x_3249);
    let x_3256 : vec3<f32> = txVec59;
    let x_3258 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_3256.xy, x_3256.z);
    u_xlat0.x = x_3258;
  }
  let x_3261 : f32 = u_xlat0.x;
  let x_3263 : f32 = x_253.x_MainLightShadowParams.x;
  let x_3265 : f32 = u_xlat68;
  u_xlat0.x = ((x_3261 * x_3263) + x_3265);
  let x_3268 : bool = u_xlatb3;
  if (x_3268) {
    x_3269 = 1.0f;
  } else {
    let x_3274 : f32 = u_xlat0.x;
    x_3269 = x_3274;
  }
  let x_3275 : f32 = x_3269;
  u_xlat0.x = x_3275;
  let x_3277 : vec3<f32> = vs_INTERP0;
  let x_3279 : vec3<f32> = x_139.x_WorldSpaceCameraPos;
  let x_3281 : vec3<f32> = (x_3277 + -(x_3279));
  let x_3282 : vec4<f32> = u_xlat2;
  u_xlat2 = vec4<f32>(x_3281.x, x_3281.y, x_3281.z, x_3282.w);
  let x_3284 : vec4<f32> = u_xlat2;
  let x_3286 : vec4<f32> = u_xlat2;
  u_xlat2.x = dot(vec3<f32>(x_3284.x, x_3284.y, x_3284.z), vec3<f32>(x_3286.x, x_3286.y, x_3286.z));
  let x_3291 : f32 = u_xlat2.x;
  let x_3293 : f32 = x_253.x_MainLightShadowParams.z;
  let x_3296 : f32 = x_253.x_MainLightShadowParams.w;
  u_xlat2.x = ((x_3291 * x_3293) + x_3296);
  let x_3300 : f32 = u_xlat2.x;
  u_xlat2.x = clamp(x_3300, 0.0f, 1.0f);
  let x_3305 : f32 = u_xlat0.x;
  u_xlat24 = (-(x_3305) + 1.0f);
  let x_3309 : f32 = u_xlat2.x;
  let x_3310 : f32 = u_xlat24;
  let x_3313 : f32 = u_xlat0.x;
  u_xlat0.x = ((x_3309 * x_3310) + x_3313);
  let x_3322 : f32 = x_3320.x_MainLightCookieTextureFormat;
  u_xlatb2.x = !((x_3322 == -1.0f));
  let x_3326 : bool = u_xlatb2.x;
  if (x_3326) {
    let x_3329 : vec3<f32> = vs_INTERP0;
    let x_3332 : vec4<f32> = x_3320.x_MainLightWorldToLight[1i];
    let x_3334 : vec2<f32> = (vec2<f32>(x_3329.y, x_3329.y) * vec2<f32>(x_3332.x, x_3332.y));
    let x_3335 : vec4<f32> = u_xlat2;
    u_xlat2 = vec4<f32>(x_3334.x, x_3334.y, x_3335.z, x_3335.w);
    let x_3338 : vec4<f32> = x_3320.x_MainLightWorldToLight[0i];
    let x_3340 : vec3<f32> = vs_INTERP0;
    let x_3343 : vec4<f32> = u_xlat2;
    let x_3345 : vec2<f32> = ((vec2<f32>(x_3338.x, x_3338.y) * vec2<f32>(x_3340.x, x_3340.x)) + vec2<f32>(x_3343.x, x_3343.y));
    let x_3346 : vec4<f32> = u_xlat2;
    u_xlat2 = vec4<f32>(x_3345.x, x_3345.y, x_3346.z, x_3346.w);
    let x_3349 : vec4<f32> = x_3320.x_MainLightWorldToLight[2i];
    let x_3351 : vec3<f32> = vs_INTERP0;
    let x_3354 : vec4<f32> = u_xlat2;
    let x_3356 : vec2<f32> = ((vec2<f32>(x_3349.x, x_3349.y) * vec2<f32>(x_3351.z, x_3351.z)) + vec2<f32>(x_3354.x, x_3354.y));
    let x_3357 : vec4<f32> = u_xlat2;
    u_xlat2 = vec4<f32>(x_3356.x, x_3356.y, x_3357.z, x_3357.w);
    let x_3359 : vec4<f32> = u_xlat2;
    let x_3362 : vec4<f32> = x_3320.x_MainLightWorldToLight[3i];
    let x_3364 : vec2<f32> = (vec2<f32>(x_3359.x, x_3359.y) + vec2<f32>(x_3362.x, x_3362.y));
    let x_3365 : vec4<f32> = u_xlat2;
    u_xlat2 = vec4<f32>(x_3364.x, x_3364.y, x_3365.z, x_3365.w);
    let x_3367 : vec4<f32> = u_xlat2;
    let x_3370 : vec2<f32> = ((vec2<f32>(x_3367.x, x_3367.y) * vec2<f32>(0.5f, 0.5f)) + vec2<f32>(0.5f, 0.5f));
    let x_3371 : vec4<f32> = u_xlat2;
    u_xlat2 = vec4<f32>(x_3370.x, x_3370.y, x_3371.z, x_3371.w);
    let x_3378 : vec4<f32> = u_xlat2;
    let x_3381 : f32 = x_139.x_GlobalMipBias.x;
    let x_3382 : vec4<f32> = textureSampleBias(x_MainLightCookieTexture, sampler_MainLightCookieTexture, vec2<f32>(x_3378.x, x_3378.y), x_3381);
    u_xlat2 = x_3382;
    let x_3385 : f32 = x_3320.x_MainLightCookieTextureFormat;
    let x_3387 : f32 = x_3320.x_MainLightCookieTextureFormat;
    let x_3389 : f32 = x_3320.x_MainLightCookieTextureFormat;
    let x_3391 : f32 = x_3320.x_MainLightCookieTextureFormat;
    let x_3392 : vec4<f32> = vec4<f32>(x_3385, x_3387, x_3389, x_3391);
    let x_3399 : vec4<bool> = (vec4<f32>(x_3392.x, x_3392.y, x_3392.z, x_3392.w) == vec4<f32>(0.0f, 1.0f, 0.0f, 0.0f));
    u_xlatb8 = vec2<bool>(x_3399.x, x_3399.y);
    let x_3402 : bool = u_xlatb8.y;
    if (x_3402) {
      let x_3407 : f32 = u_xlat2.w;
      x_3403 = x_3407;
    } else {
      let x_3410 : f32 = u_xlat2.x;
      x_3403 = x_3410;
    }
    let x_3411 : f32 = x_3403;
    u_xlat68 = x_3411;
    let x_3413 : bool = u_xlatb8.x;
    if (x_3413) {
      let x_3417 : vec4<f32> = u_xlat2;
      x_3414 = vec3<f32>(x_3417.x, x_3417.y, x_3417.z);
    } else {
      let x_3420 : f32 = u_xlat68;
      x_3414 = vec3<f32>(x_3420, x_3420, x_3420);
    }
    let x_3422 : vec3<f32> = x_3414;
    let x_3423 : vec4<f32> = u_xlat2;
    u_xlat2 = vec4<f32>(x_3422.x, x_3422.y, x_3422.z, x_3423.w);
  } else {
    u_xlat2.x = 1.0f;
    u_xlat2.y = 1.0f;
    u_xlat2.z = 1.0f;
  }
  let x_3429 : vec4<f32> = u_xlat2;
  let x_3432 : vec4<f32> = x_139.x_MainLightColor;
  let x_3434 : vec3<f32> = (vec3<f32>(x_3429.x, x_3429.y, x_3429.z) * vec3<f32>(x_3432.x, x_3432.y, x_3432.z));
  let x_3435 : vec4<f32> = u_xlat2;
  u_xlat2 = vec4<f32>(x_3434.x, x_3434.y, x_3434.z, x_3435.w);
  let x_3437 : f32 = u_xlat51;
  let x_3439 : vec4<f32> = u_xlat2;
  let x_3441 : vec3<f32> = (vec3<f32>(x_3437, x_3437, x_3437) * vec3<f32>(x_3439.x, x_3439.y, x_3439.z));
  let x_3442 : vec4<f32> = u_xlat2;
  u_xlat2 = vec4<f32>(x_3441.x, x_3441.y, x_3441.z, x_3442.w);
  let x_3444 : vec4<f32> = u_xlat4;
  let x_3447 : vec3<f32> = u_xlat22;
  u_xlat68 = dot(-(vec3<f32>(x_3444.x, x_3444.y, x_3444.z)), x_3447);
  let x_3449 : f32 = u_xlat68;
  let x_3450 : f32 = u_xlat68;
  u_xlat68 = (x_3449 + x_3450);
  let x_3452 : vec3<f32> = u_xlat22;
  let x_3453 : f32 = u_xlat68;
  let x_3457 : vec4<f32> = u_xlat4;
  let x_3460 : vec3<f32> = ((x_3452 * -(vec3<f32>(x_3453, x_3453, x_3453))) + -(vec3<f32>(x_3457.x, x_3457.y, x_3457.z)));
  let x_3461 : vec4<f32> = u_xlat8;
  u_xlat8 = vec4<f32>(x_3460.x, x_3460.y, x_3460.z, x_3461.w);
  let x_3463 : vec3<f32> = u_xlat22;
  let x_3464 : vec4<f32> = u_xlat4;
  u_xlat68 = dot(x_3463, vec3<f32>(x_3464.x, x_3464.y, x_3464.z));
  let x_3467 : f32 = u_xlat68;
  u_xlat68 = clamp(x_3467, 0.0f, 1.0f);
  let x_3469 : f32 = u_xlat68;
  u_xlat68 = (-(x_3469) + 1.0f);
  let x_3472 : f32 = u_xlat68;
  let x_3473 : f32 = u_xlat68;
  u_xlat68 = (x_3472 * x_3473);
  let x_3475 : f32 = u_xlat68;
  let x_3476 : f32 = u_xlat68;
  u_xlat68 = (x_3475 * x_3476);
  let x_3478 : f32 = u_xlat69;
  u_xlat3.x = ((-(x_3478) * 0.699999988f) + 1.700000048f);
  let x_3486 : f32 = u_xlat3.x;
  let x_3487 : f32 = u_xlat69;
  u_xlat3.x = (x_3486 * x_3487);
  let x_3491 : f32 = u_xlat3.x;
  u_xlat3.x = (x_3491 * 6.0f);
  let x_3503 : vec4<f32> = u_xlat8;
  let x_3506 : f32 = u_xlat3.x;
  let x_3507 : vec4<f32> = textureSampleLevel(unity_SpecCube0, samplerunity_SpecCube0, vec3<f32>(x_3503.x, x_3503.y, x_3503.z), x_3506);
  u_xlat8 = x_3507;
  let x_3509 : f32 = u_xlat8.w;
  u_xlat3.x = (x_3509 + -1.0f);
  let x_3513 : f32 = x_60.unity_SpecCube0_HDR.w;
  let x_3515 : f32 = u_xlat3.x;
  u_xlat3.x = ((x_3513 * x_3515) + 1.0f);
  let x_3520 : f32 = u_xlat3.x;
  u_xlat3.x = max(x_3520, 0.0f);
  let x_3524 : f32 = u_xlat3.x;
  u_xlat3.x = log2(x_3524);
  let x_3528 : f32 = u_xlat3.x;
  let x_3530 : f32 = x_60.unity_SpecCube0_HDR.y;
  u_xlat3.x = (x_3528 * x_3530);
  let x_3534 : f32 = u_xlat3.x;
  u_xlat3.x = exp2(x_3534);
  let x_3538 : f32 = u_xlat3.x;
  let x_3540 : f32 = x_60.unity_SpecCube0_HDR.x;
  u_xlat3.x = (x_3538 * x_3540);
  let x_3543 : vec4<f32> = u_xlat8;
  let x_3545 : vec4<f32> = u_xlat3;
  let x_3547 : vec3<f32> = (vec3<f32>(x_3543.x, x_3543.y, x_3543.z) * vec3<f32>(x_3545.x, x_3545.x, x_3545.x));
  let x_3548 : vec4<f32> = u_xlat8;
  u_xlat8 = vec4<f32>(x_3547.x, x_3547.y, x_3547.z, x_3548.w);
  let x_3550 : f32 = u_xlat70;
  let x_3552 : f32 = u_xlat70;
  let x_3556 : vec2<f32> = ((vec2<f32>(x_3550, x_3550) * vec2<f32>(x_3552, x_3552)) + vec2<f32>(-1.0f, 1.0f));
  let x_3557 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_3556.x, x_3557.y, x_3557.z, x_3556.y);
  let x_3560 : f32 = u_xlat3.w;
  u_xlat69 = (1.0f / x_3560);
  let x_3563 : f32 = u_xlat6.x;
  u_xlat70 = (x_3563 + -0.039999999f);
  let x_3566 : f32 = u_xlat68;
  let x_3567 : f32 = u_xlat70;
  u_xlat68 = ((x_3566 * x_3567) + 0.039999999f);
  let x_3571 : f32 = u_xlat68;
  let x_3572 : f32 = u_xlat69;
  u_xlat68 = (x_3571 * x_3572);
  let x_3574 : f32 = u_xlat68;
  let x_3576 : vec4<f32> = u_xlat8;
  let x_3578 : vec3<f32> = (vec3<f32>(x_3574, x_3574, x_3574) * vec3<f32>(x_3576.x, x_3576.y, x_3576.z));
  let x_3579 : vec4<f32> = u_xlat8;
  u_xlat8 = vec4<f32>(x_3578.x, x_3578.y, x_3578.z, x_3579.w);
  let x_3581 : vec3<f32> = u_xlat28;
  let x_3582 : vec3<f32> = u_xlat5;
  let x_3584 : vec4<f32> = u_xlat8;
  let x_3586 : vec3<f32> = ((x_3581 * x_3582) + vec3<f32>(x_3584.x, x_3584.y, x_3584.z));
  let x_3587 : vec4<f32> = u_xlat6;
  u_xlat6 = vec4<f32>(x_3586.x, x_3586.y, x_3586.z, x_3587.w);
  let x_3590 : f32 = u_xlat0.x;
  let x_3592 : f32 = x_60.unity_LightData.z;
  u_xlat0.x = (x_3590 * x_3592);
  let x_3595 : vec3<f32> = u_xlat22;
  let x_3597 : vec4<f32> = x_139.x_MainLightPosition;
  u_xlat68 = dot(x_3595, vec3<f32>(x_3597.x, x_3597.y, x_3597.z));
  let x_3600 : f32 = u_xlat68;
  u_xlat68 = clamp(x_3600, 0.0f, 1.0f);
  let x_3603 : f32 = u_xlat0.x;
  let x_3604 : f32 = u_xlat68;
  u_xlat0.x = (x_3603 * x_3604);
  let x_3607 : vec3<f32> = u_xlat0;
  let x_3609 : vec4<f32> = u_xlat2;
  let x_3611 : vec3<f32> = (vec3<f32>(x_3607.x, x_3607.x, x_3607.x) * vec3<f32>(x_3609.x, x_3609.y, x_3609.z));
  let x_3612 : vec4<f32> = u_xlat2;
  u_xlat2 = vec4<f32>(x_3611.x, x_3611.y, x_3611.z, x_3612.w);
  let x_3614 : vec4<f32> = u_xlat4;
  let x_3617 : vec4<f32> = x_139.x_MainLightPosition;
  let x_3619 : vec3<f32> = (vec3<f32>(x_3614.x, x_3614.y, x_3614.z) + vec3<f32>(x_3617.x, x_3617.y, x_3617.z));
  let x_3620 : vec4<f32> = u_xlat8;
  u_xlat8 = vec4<f32>(x_3619.x, x_3619.y, x_3619.z, x_3620.w);
  let x_3622 : vec4<f32> = u_xlat8;
  let x_3624 : vec4<f32> = u_xlat8;
  u_xlat0.x = dot(vec3<f32>(x_3622.x, x_3622.y, x_3622.z), vec3<f32>(x_3624.x, x_3624.y, x_3624.z));
  let x_3629 : f32 = u_xlat0.x;
  u_xlat0.x = max(x_3629, 1.17549435e-37f);
  let x_3633 : f32 = u_xlat0.x;
  u_xlat0.x = inverseSqrt(x_3633);
  let x_3636 : vec3<f32> = u_xlat0;
  let x_3638 : vec4<f32> = u_xlat8;
  let x_3640 : vec3<f32> = (vec3<f32>(x_3636.x, x_3636.x, x_3636.x) * vec3<f32>(x_3638.x, x_3638.y, x_3638.z));
  let x_3641 : vec4<f32> = u_xlat8;
  u_xlat8 = vec4<f32>(x_3640.x, x_3640.y, x_3640.z, x_3641.w);
  let x_3643 : vec3<f32> = u_xlat22;
  let x_3644 : vec4<f32> = u_xlat8;
  u_xlat0.x = dot(x_3643, vec3<f32>(x_3644.x, x_3644.y, x_3644.z));
  let x_3649 : f32 = u_xlat0.x;
  u_xlat0.x = clamp(x_3649, 0.0f, 1.0f);
  let x_3653 : vec4<f32> = x_139.x_MainLightPosition;
  let x_3655 : vec4<f32> = u_xlat8;
  u_xlat68 = dot(vec3<f32>(x_3653.x, x_3653.y, x_3653.z), vec3<f32>(x_3655.x, x_3655.y, x_3655.z));
  let x_3658 : f32 = u_xlat68;
  u_xlat68 = clamp(x_3658, 0.0f, 1.0f);
  let x_3661 : f32 = u_xlat0.x;
  let x_3663 : f32 = u_xlat0.x;
  u_xlat0.x = (x_3661 * x_3663);
  let x_3667 : f32 = u_xlat0.x;
  let x_3669 : f32 = u_xlat3.x;
  u_xlat0.x = ((x_3667 * x_3669) + 1.000010014f);
  let x_3674 : f32 = u_xlat68;
  let x_3675 : f32 = u_xlat68;
  u_xlat68 = (x_3674 * x_3675);
  let x_3678 : f32 = u_xlat0.x;
  let x_3680 : f32 = u_xlat0.x;
  u_xlat0.x = (x_3678 * x_3680);
  let x_3683 : f32 = u_xlat68;
  u_xlat68 = max(x_3683, 0.100000001f);
  let x_3687 : f32 = u_xlat0.x;
  let x_3688 : f32 = u_xlat68;
  u_xlat0.x = (x_3687 * x_3688);
  let x_3692 : f32 = u_xlat29.x;
  let x_3694 : f32 = u_xlat0.x;
  u_xlat0.x = (x_3692 * x_3694);
  let x_3697 : f32 = u_xlat71;
  let x_3699 : f32 = u_xlat0.x;
  u_xlat0.x = (x_3697 / x_3699);
  let x_3702 : vec3<f32> = u_xlat0;
  let x_3706 : vec3<f32> = u_xlat5;
  let x_3707 : vec3<f32> = ((vec3<f32>(x_3702.x, x_3702.x, x_3702.x) * vec3<f32>(0.039999999f, 0.039999999f, 0.039999999f)) + x_3706);
  let x_3708 : vec4<f32> = u_xlat8;
  u_xlat8 = vec4<f32>(x_3707.x, x_3707.y, x_3707.z, x_3708.w);
  let x_3710 : vec4<f32> = u_xlat2;
  let x_3712 : vec4<f32> = u_xlat8;
  let x_3714 : vec3<f32> = (vec3<f32>(x_3710.x, x_3710.y, x_3710.z) * vec3<f32>(x_3712.x, x_3712.y, x_3712.z));
  let x_3715 : vec4<f32> = u_xlat2;
  u_xlat2 = vec4<f32>(x_3714.x, x_3714.y, x_3714.z, x_3715.w);
  let x_3718 : f32 = x_139.x_AdditionalLightsCount.x;
  let x_3720 : f32 = x_60.unity_LightData.y;
  u_xlat0.x = min(x_3718, x_3720);
  let x_3724 : f32 = u_xlat0.x;
  u_xlatu0 = bitcast<u32>(i32(x_3724));
  let x_3728 : f32 = x_3320.x_AdditionalLightsCookieAtlasTextureFormat;
  let x_3730 : f32 = x_3320.x_AdditionalLightsCookieAtlasTextureFormat;
  let x_3732 : f32 = x_3320.x_AdditionalLightsCookieAtlasTextureFormat;
  let x_3734 : f32 = x_3320.x_AdditionalLightsCookieAtlasTextureFormat;
  let x_3735 : vec4<f32> = vec4<f32>(x_3728, x_3730, x_3732, x_3734);
  let x_3741 : vec4<bool> = (vec4<f32>(x_3735.x, x_3735.y, x_3735.z, x_3735.w) == vec4<f32>(0.0f, 1.0f, 0.0f, 0.0f));
  u_xlatb8 = vec2<bool>(x_3741.x, x_3741.y);
  u_xlat9.x = 0.0f;
  u_xlat9.y = 0.0f;
  u_xlat9.z = 0.0f;
  u_xlatu_loop_1 = 0u;
  loop {
    let x_3752 : u32 = u_xlatu_loop_1;
    let x_3753 : u32 = u_xlatu0;
    if ((x_3752 < x_3753)) {
    } else {
      break;
    }
    let x_3756 : u32 = u_xlatu_loop_1;
    u_xlatu69 = (x_3756 >> 2u);
    let x_3759 : u32 = u_xlatu_loop_1;
    u_xlati70 = bitcast<i32>((x_3759 & 3u));
    let x_3762 : u32 = u_xlatu69;
    let x_3765 : vec4<f32> = x_60.unity_LightIndices[bitcast<i32>(x_3762)];
    let x_3775 : i32 = u_xlati70;
    indexable = array<vec4<u32>, 4u>(vec4<u32>(1065353216u, 0u, 0u, 0u), vec4<u32>(0u, 1065353216u, 0u, 0u), vec4<u32>(0u, 0u, 1065353216u, 0u), vec4<u32>(0u, 0u, 0u, 1065353216u));
    let x_3780 : vec4<u32> = indexable[x_3775];
    u_xlat69 = dot(x_3765, bitcast<vec4<f32>>(x_3780));
    let x_3783 : f32 = u_xlat69;
    u_xlatu69 = bitcast<u32>(i32(x_3783));
    let x_3786 : vec3<f32> = vs_INTERP0;
    let x_3798 : u32 = u_xlatu69;
    let x_3801 : vec4<f32> = x_3797.x_AdditionalLightsPosition[bitcast<i32>(x_3798)];
    let x_3804 : u32 = u_xlatu69;
    let x_3807 : vec4<f32> = x_3797.x_AdditionalLightsPosition[bitcast<i32>(x_3804)];
    let x_3809 : vec3<f32> = ((-(x_3786) * vec3<f32>(x_3801.w, x_3801.w, x_3801.w)) + vec3<f32>(x_3807.x, x_3807.y, x_3807.z));
    let x_3810 : vec4<f32> = u_xlat10;
    u_xlat10 = vec4<f32>(x_3809.x, x_3809.y, x_3809.z, x_3810.w);
    let x_3812 : vec4<f32> = u_xlat10;
    let x_3814 : vec4<f32> = u_xlat10;
    u_xlat70 = dot(vec3<f32>(x_3812.x, x_3812.y, x_3812.z), vec3<f32>(x_3814.x, x_3814.y, x_3814.z));
    let x_3817 : f32 = u_xlat70;
    u_xlat70 = max(x_3817, 6.10351562e-05f);
    let x_3821 : f32 = u_xlat70;
    u_xlat72 = inverseSqrt(x_3821);
    let x_3823 : f32 = u_xlat72;
    let x_3825 : vec4<f32> = u_xlat10;
    let x_3827 : vec3<f32> = (vec3<f32>(x_3823, x_3823, x_3823) * vec3<f32>(x_3825.x, x_3825.y, x_3825.z));
    let x_3828 : vec4<f32> = u_xlat11;
    u_xlat11 = vec4<f32>(x_3827.x, x_3827.y, x_3827.z, x_3828.w);
    let x_3830 : f32 = u_xlat70;
    u_xlat73 = (1.0f / x_3830);
    let x_3832 : f32 = u_xlat70;
    let x_3833 : u32 = u_xlatu69;
    let x_3836 : f32 = x_3797.x_AdditionalLightsAttenuation[bitcast<i32>(x_3833)].x;
    u_xlat70 = (x_3832 * x_3836);
    let x_3838 : f32 = u_xlat70;
    let x_3840 : f32 = u_xlat70;
    u_xlat70 = ((-(x_3838) * x_3840) + 1.0f);
    let x_3843 : f32 = u_xlat70;
    u_xlat70 = max(x_3843, 0.0f);
    let x_3845 : f32 = u_xlat70;
    let x_3846 : f32 = u_xlat70;
    u_xlat70 = (x_3845 * x_3846);
    let x_3848 : f32 = u_xlat70;
    let x_3849 : f32 = u_xlat73;
    u_xlat70 = (x_3848 * x_3849);
    let x_3851 : u32 = u_xlatu69;
    let x_3854 : vec4<f32> = x_3797.x_AdditionalLightsSpotDir[bitcast<i32>(x_3851)];
    let x_3856 : vec4<f32> = u_xlat11;
    u_xlat73 = dot(vec3<f32>(x_3854.x, x_3854.y, x_3854.z), vec3<f32>(x_3856.x, x_3856.y, x_3856.z));
    let x_3859 : f32 = u_xlat73;
    let x_3860 : u32 = u_xlatu69;
    let x_3863 : f32 = x_3797.x_AdditionalLightsAttenuation[bitcast<i32>(x_3860)].z;
    let x_3865 : u32 = u_xlatu69;
    let x_3868 : f32 = x_3797.x_AdditionalLightsAttenuation[bitcast<i32>(x_3865)].w;
    u_xlat73 = ((x_3859 * x_3863) + x_3868);
    let x_3870 : f32 = u_xlat73;
    u_xlat73 = clamp(x_3870, 0.0f, 1.0f);
    let x_3872 : f32 = u_xlat73;
    let x_3873 : f32 = u_xlat73;
    u_xlat73 = (x_3872 * x_3873);
    let x_3875 : f32 = u_xlat70;
    let x_3876 : f32 = u_xlat73;
    u_xlat70 = (x_3875 * x_3876);
    let x_3879 : u32 = u_xlatu69;
    u_xlatu73 = (x_3879 >> 5u);
    let x_3882 : u32 = u_xlatu69;
    u_xlati52 = (1i << bitcast<u32>((bitcast<i32>(x_3882) & 31i)));
    let x_3888 : i32 = u_xlati52;
    let x_3890 : u32 = u_xlatu73;
    let x_3893 : f32 = x_3320.x_AdditionalLightsCookieEnableBits[bitcast<i32>(x_3890)].el;
    u_xlati73 = bitcast<i32>((bitcast<u32>(x_3888) & bitcast<u32>(x_3893)));
    let x_3897 : i32 = u_xlati73;
    if ((x_3897 != 0i)) {
      let x_3907 : u32 = u_xlatu69;
      let x_3910 : f32 = x_3906.x_AdditionalLightsLightTypes[bitcast<i32>(x_3907)].el;
      u_xlati73 = i32(x_3910);
      let x_3912 : i32 = u_xlati73;
      u_xlati52 = select(1i, 0i, (x_3912 != 0i));
      let x_3916 : u32 = u_xlatu69;
      u_xlati74 = (bitcast<i32>(x_3916) << bitcast<u32>(2i));
      let x_3919 : i32 = u_xlati52;
      if ((x_3919 != 0i)) {
        let x_3923 : vec3<f32> = vs_INTERP0;
        let x_3925 : i32 = u_xlati74;
        let x_3928 : i32 = u_xlati74;
        let x_3932 : vec4<f32> = x_3906.x_AdditionalLightsWorldToLights[((x_3925 + 1i) / 4i)][((x_3928 + 1i) % 4i)];
        let x_3934 : vec3<f32> = (vec3<f32>(x_3923.y, x_3923.y, x_3923.y) * vec3<f32>(x_3932.x, x_3932.y, x_3932.w));
        let x_3935 : vec4<f32> = u_xlat12;
        u_xlat12 = vec4<f32>(x_3934.x, x_3934.y, x_3934.z, x_3935.w);
        let x_3937 : i32 = u_xlati74;
        let x_3939 : i32 = u_xlati74;
        let x_3942 : vec4<f32> = x_3906.x_AdditionalLightsWorldToLights[(x_3937 / 4i)][(x_3939 % 4i)];
        let x_3944 : vec3<f32> = vs_INTERP0;
        let x_3947 : vec4<f32> = u_xlat12;
        let x_3949 : vec3<f32> = ((vec3<f32>(x_3942.x, x_3942.y, x_3942.w) * vec3<f32>(x_3944.x, x_3944.x, x_3944.x)) + vec3<f32>(x_3947.x, x_3947.y, x_3947.z));
        let x_3950 : vec4<f32> = u_xlat12;
        u_xlat12 = vec4<f32>(x_3949.x, x_3949.y, x_3949.z, x_3950.w);
        let x_3952 : i32 = u_xlati74;
        let x_3955 : i32 = u_xlati74;
        let x_3959 : vec4<f32> = x_3906.x_AdditionalLightsWorldToLights[((x_3952 + 2i) / 4i)][((x_3955 + 2i) % 4i)];
        let x_3961 : vec3<f32> = vs_INTERP0;
        let x_3964 : vec4<f32> = u_xlat12;
        let x_3966 : vec3<f32> = ((vec3<f32>(x_3959.x, x_3959.y, x_3959.w) * vec3<f32>(x_3961.z, x_3961.z, x_3961.z)) + vec3<f32>(x_3964.x, x_3964.y, x_3964.z));
        let x_3967 : vec4<f32> = u_xlat12;
        u_xlat12 = vec4<f32>(x_3966.x, x_3966.y, x_3966.z, x_3967.w);
        let x_3969 : vec4<f32> = u_xlat12;
        let x_3971 : i32 = u_xlati74;
        let x_3974 : i32 = u_xlati74;
        let x_3978 : vec4<f32> = x_3906.x_AdditionalLightsWorldToLights[((x_3971 + 3i) / 4i)][((x_3974 + 3i) % 4i)];
        let x_3980 : vec3<f32> = (vec3<f32>(x_3969.x, x_3969.y, x_3969.z) + vec3<f32>(x_3978.x, x_3978.y, x_3978.w));
        let x_3981 : vec4<f32> = u_xlat12;
        u_xlat12 = vec4<f32>(x_3980.x, x_3980.y, x_3980.z, x_3981.w);
        let x_3983 : vec4<f32> = u_xlat12;
        let x_3985 : vec4<f32> = u_xlat12;
        let x_3987 : vec2<f32> = (vec2<f32>(x_3983.x, x_3983.y) / vec2<f32>(x_3985.z, x_3985.z));
        let x_3988 : vec4<f32> = u_xlat12;
        u_xlat12 = vec4<f32>(x_3987.x, x_3987.y, x_3988.z, x_3988.w);
        let x_3990 : vec4<f32> = u_xlat12;
        let x_3993 : vec2<f32> = ((vec2<f32>(x_3990.x, x_3990.y) * vec2<f32>(0.5f, 0.5f)) + vec2<f32>(0.5f, 0.5f));
        let x_3994 : vec4<f32> = u_xlat12;
        u_xlat12 = vec4<f32>(x_3993.x, x_3993.y, x_3994.z, x_3994.w);
        let x_3996 : vec4<f32> = u_xlat12;
        let x_4000 : vec2<f32> = clamp(vec2<f32>(x_3996.x, x_3996.y), vec2<f32>(0.0f, 0.0f), vec2<f32>(1.0f, 1.0f));
        let x_4001 : vec4<f32> = u_xlat12;
        u_xlat12 = vec4<f32>(x_4000.x, x_4000.y, x_4001.z, x_4001.w);
        let x_4003 : u32 = u_xlatu69;
        let x_4006 : vec4<f32> = x_3906.x_AdditionalLightsCookieAtlasUVRects[bitcast<i32>(x_4003)];
        let x_4008 : vec4<f32> = u_xlat12;
        let x_4011 : u32 = u_xlatu69;
        let x_4014 : vec4<f32> = x_3906.x_AdditionalLightsCookieAtlasUVRects[bitcast<i32>(x_4011)];
        let x_4016 : vec2<f32> = ((vec2<f32>(x_4006.x, x_4006.y) * vec2<f32>(x_4008.x, x_4008.y)) + vec2<f32>(x_4014.z, x_4014.w));
        let x_4017 : vec4<f32> = u_xlat12;
        u_xlat12 = vec4<f32>(x_4016.x, x_4016.y, x_4017.z, x_4017.w);
      } else {
        let x_4020 : i32 = u_xlati73;
        u_xlatb73 = (x_4020 == 1i);
        let x_4022 : bool = u_xlatb73;
        u_xlati73 = select(0i, 1i, x_4022);
        let x_4024 : i32 = u_xlati73;
        if ((x_4024 != 0i)) {
          let x_4029 : vec3<f32> = vs_INTERP0;
          let x_4031 : i32 = u_xlati74;
          let x_4034 : i32 = u_xlati74;
          let x_4038 : vec4<f32> = x_3906.x_AdditionalLightsWorldToLights[((x_4031 + 1i) / 4i)][((x_4034 + 1i) % 4i)];
          u_xlat56 = (vec2<f32>(x_4029.y, x_4029.y) * vec2<f32>(x_4038.x, x_4038.y));
          let x_4041 : i32 = u_xlati74;
          let x_4043 : i32 = u_xlati74;
          let x_4046 : vec4<f32> = x_3906.x_AdditionalLightsWorldToLights[(x_4041 / 4i)][(x_4043 % 4i)];
          let x_4048 : vec3<f32> = vs_INTERP0;
          let x_4051 : vec2<f32> = u_xlat56;
          u_xlat56 = ((vec2<f32>(x_4046.x, x_4046.y) * vec2<f32>(x_4048.x, x_4048.x)) + x_4051);
          let x_4053 : i32 = u_xlati74;
          let x_4056 : i32 = u_xlati74;
          let x_4060 : vec4<f32> = x_3906.x_AdditionalLightsWorldToLights[((x_4053 + 2i) / 4i)][((x_4056 + 2i) % 4i)];
          let x_4062 : vec3<f32> = vs_INTERP0;
          let x_4065 : vec2<f32> = u_xlat56;
          u_xlat56 = ((vec2<f32>(x_4060.x, x_4060.y) * vec2<f32>(x_4062.z, x_4062.z)) + x_4065);
          let x_4067 : vec2<f32> = u_xlat56;
          let x_4068 : i32 = u_xlati74;
          let x_4071 : i32 = u_xlati74;
          let x_4075 : vec4<f32> = x_3906.x_AdditionalLightsWorldToLights[((x_4068 + 3i) / 4i)][((x_4071 + 3i) % 4i)];
          u_xlat56 = (x_4067 + vec2<f32>(x_4075.x, x_4075.y));
          let x_4078 : vec2<f32> = u_xlat56;
          u_xlat56 = ((x_4078 * vec2<f32>(0.5f, 0.5f)) + vec2<f32>(0.5f, 0.5f));
          let x_4081 : vec2<f32> = u_xlat56;
          u_xlat56 = fract(x_4081);
          let x_4083 : u32 = u_xlatu69;
          let x_4086 : vec4<f32> = x_3906.x_AdditionalLightsCookieAtlasUVRects[bitcast<i32>(x_4083)];
          let x_4088 : vec2<f32> = u_xlat56;
          let x_4090 : u32 = u_xlatu69;
          let x_4093 : vec4<f32> = x_3906.x_AdditionalLightsCookieAtlasUVRects[bitcast<i32>(x_4090)];
          let x_4095 : vec2<f32> = ((vec2<f32>(x_4086.x, x_4086.y) * x_4088) + vec2<f32>(x_4093.z, x_4093.w));
          let x_4096 : vec4<f32> = u_xlat12;
          u_xlat12 = vec4<f32>(x_4095.x, x_4095.y, x_4096.z, x_4096.w);
        } else {
          let x_4099 : vec3<f32> = vs_INTERP0;
          let x_4101 : i32 = u_xlati74;
          let x_4104 : i32 = u_xlati74;
          let x_4108 : vec4<f32> = x_3906.x_AdditionalLightsWorldToLights[((x_4101 + 1i) / 4i)][((x_4104 + 1i) % 4i)];
          u_xlat13 = (vec4<f32>(x_4099.y, x_4099.y, x_4099.y, x_4099.y) * x_4108);
          let x_4110 : i32 = u_xlati74;
          let x_4112 : i32 = u_xlati74;
          let x_4115 : vec4<f32> = x_3906.x_AdditionalLightsWorldToLights[(x_4110 / 4i)][(x_4112 % 4i)];
          let x_4116 : vec3<f32> = vs_INTERP0;
          let x_4119 : vec4<f32> = u_xlat13;
          u_xlat13 = ((x_4115 * vec4<f32>(x_4116.x, x_4116.x, x_4116.x, x_4116.x)) + x_4119);
          let x_4121 : i32 = u_xlati74;
          let x_4124 : i32 = u_xlati74;
          let x_4128 : vec4<f32> = x_3906.x_AdditionalLightsWorldToLights[((x_4121 + 2i) / 4i)][((x_4124 + 2i) % 4i)];
          let x_4129 : vec3<f32> = vs_INTERP0;
          let x_4132 : vec4<f32> = u_xlat13;
          u_xlat13 = ((x_4128 * vec4<f32>(x_4129.z, x_4129.z, x_4129.z, x_4129.z)) + x_4132);
          let x_4134 : vec4<f32> = u_xlat13;
          let x_4135 : i32 = u_xlati74;
          let x_4138 : i32 = u_xlati74;
          let x_4142 : vec4<f32> = x_3906.x_AdditionalLightsWorldToLights[((x_4135 + 3i) / 4i)][((x_4138 + 3i) % 4i)];
          u_xlat13 = (x_4134 + x_4142);
          let x_4144 : vec4<f32> = u_xlat13;
          let x_4146 : vec4<f32> = u_xlat13;
          let x_4148 : vec3<f32> = (vec3<f32>(x_4144.x, x_4144.y, x_4144.z) / vec3<f32>(x_4146.w, x_4146.w, x_4146.w));
          let x_4149 : vec4<f32> = u_xlat13;
          u_xlat13 = vec4<f32>(x_4148.x, x_4148.y, x_4148.z, x_4149.w);
          let x_4151 : vec4<f32> = u_xlat13;
          let x_4153 : vec4<f32> = u_xlat13;
          u_xlat73 = dot(vec3<f32>(x_4151.x, x_4151.y, x_4151.z), vec3<f32>(x_4153.x, x_4153.y, x_4153.z));
          let x_4156 : f32 = u_xlat73;
          u_xlat73 = inverseSqrt(x_4156);
          let x_4158 : f32 = u_xlat73;
          let x_4160 : vec4<f32> = u_xlat13;
          let x_4162 : vec3<f32> = (vec3<f32>(x_4158, x_4158, x_4158) * vec3<f32>(x_4160.x, x_4160.y, x_4160.z));
          let x_4163 : vec4<f32> = u_xlat13;
          u_xlat13 = vec4<f32>(x_4162.x, x_4162.y, x_4162.z, x_4163.w);
          let x_4165 : vec4<f32> = u_xlat13;
          u_xlat73 = dot(abs(vec3<f32>(x_4165.x, x_4165.y, x_4165.z)), vec3<f32>(1.0f, 1.0f, 1.0f));
          let x_4170 : f32 = u_xlat73;
          u_xlat73 = max(x_4170, 0.000001f);
          let x_4173 : f32 = u_xlat73;
          u_xlat73 = (1.0f / x_4173);
          let x_4175 : f32 = u_xlat73;
          let x_4177 : vec4<f32> = u_xlat13;
          let x_4179 : vec3<f32> = (vec3<f32>(x_4175, x_4175, x_4175) * vec3<f32>(x_4177.z, x_4177.x, x_4177.y));
          let x_4180 : vec4<f32> = u_xlat14;
          u_xlat14 = vec4<f32>(x_4179.x, x_4179.y, x_4179.z, x_4180.w);
          let x_4183 : f32 = u_xlat14.x;
          u_xlat14.x = -(x_4183);
          let x_4187 : f32 = u_xlat14.x;
          u_xlat14.x = clamp(x_4187, 0.0f, 1.0f);
          let x_4191 : vec4<f32> = u_xlat14;
          let x_4194 : vec4<bool> = (vec4<f32>(x_4191.y, x_4191.z, x_4191.y, x_4191.z) >= vec4<f32>(0.0f, 0.0f, 0.0f, 0.0f));
          u_xlatb52 = vec2<bool>(x_4194.x, x_4194.y);
          let x_4197 : bool = u_xlatb52.x;
          if (x_4197) {
            let x_4202 : f32 = u_xlat14.x;
            x_4198 = x_4202;
          } else {
            let x_4205 : f32 = u_xlat14.x;
            x_4198 = -(x_4205);
          }
          let x_4207 : f32 = x_4198;
          u_xlat52.x = x_4207;
          let x_4210 : bool = u_xlatb52.y;
          if (x_4210) {
            let x_4215 : f32 = u_xlat14.x;
            x_4211 = x_4215;
          } else {
            let x_4218 : f32 = u_xlat14.x;
            x_4211 = -(x_4218);
          }
          let x_4220 : f32 = x_4211;
          u_xlat52.y = x_4220;
          let x_4222 : vec4<f32> = u_xlat13;
          let x_4224 : f32 = u_xlat73;
          let x_4227 : vec2<f32> = u_xlat52;
          u_xlat52 = ((vec2<f32>(x_4222.x, x_4222.y) * vec2<f32>(x_4224, x_4224)) + x_4227);
          let x_4229 : vec2<f32> = u_xlat52;
          u_xlat52 = ((x_4229 * vec2<f32>(0.5f, 0.5f)) + vec2<f32>(0.5f, 0.5f));
          let x_4232 : vec2<f32> = u_xlat52;
          u_xlat52 = clamp(x_4232, vec2<f32>(0.0f, 0.0f), vec2<f32>(1.0f, 1.0f));
          let x_4236 : u32 = u_xlatu69;
          let x_4239 : vec4<f32> = x_3906.x_AdditionalLightsCookieAtlasUVRects[bitcast<i32>(x_4236)];
          let x_4241 : vec2<f32> = u_xlat52;
          let x_4243 : u32 = u_xlatu69;
          let x_4246 : vec4<f32> = x_3906.x_AdditionalLightsCookieAtlasUVRects[bitcast<i32>(x_4243)];
          let x_4248 : vec2<f32> = ((vec2<f32>(x_4239.x, x_4239.y) * x_4241) + vec2<f32>(x_4246.z, x_4246.w));
          let x_4249 : vec4<f32> = u_xlat12;
          u_xlat12 = vec4<f32>(x_4248.x, x_4248.y, x_4249.z, x_4249.w);
        }
      }
      let x_4256 : vec4<f32> = u_xlat12;
      let x_4259 : f32 = x_139.x_GlobalMipBias.x;
      let x_4260 : vec4<f32> = textureSampleBias(x_AdditionalLightsCookieAtlasTexture, sampler_AdditionalLightsCookieAtlasTexture, vec2<f32>(x_4256.x, x_4256.y), x_4259);
      u_xlat12 = x_4260;
      let x_4262 : bool = u_xlatb8.y;
      if (x_4262) {
        let x_4267 : f32 = u_xlat12.w;
        x_4263 = x_4267;
      } else {
        let x_4270 : f32 = u_xlat12.x;
        x_4263 = x_4270;
      }
      let x_4271 : f32 = x_4263;
      u_xlat73 = x_4271;
      let x_4273 : bool = u_xlatb8.x;
      if (x_4273) {
        let x_4277 : vec4<f32> = u_xlat12;
        x_4274 = vec3<f32>(x_4277.x, x_4277.y, x_4277.z);
      } else {
        let x_4280 : f32 = u_xlat73;
        x_4274 = vec3<f32>(x_4280, x_4280, x_4280);
      }
      let x_4282 : vec3<f32> = x_4274;
      let x_4283 : vec4<f32> = u_xlat12;
      u_xlat12 = vec4<f32>(x_4282.x, x_4282.y, x_4282.z, x_4283.w);
    } else {
      u_xlat12.x = 1.0f;
      u_xlat12.y = 1.0f;
      u_xlat12.z = 1.0f;
    }
    let x_4289 : vec4<f32> = u_xlat12;
    let x_4291 : u32 = u_xlatu69;
    let x_4294 : vec4<f32> = x_3797.x_AdditionalLightsColor[bitcast<i32>(x_4291)];
    let x_4296 : vec3<f32> = (vec3<f32>(x_4289.x, x_4289.y, x_4289.z) * vec3<f32>(x_4294.x, x_4294.y, x_4294.z));
    let x_4297 : vec4<f32> = u_xlat12;
    u_xlat12 = vec4<f32>(x_4296.x, x_4296.y, x_4296.z, x_4297.w);
    let x_4299 : f32 = u_xlat51;
    let x_4301 : vec4<f32> = u_xlat12;
    let x_4303 : vec3<f32> = (vec3<f32>(x_4299, x_4299, x_4299) * vec3<f32>(x_4301.x, x_4301.y, x_4301.z));
    let x_4304 : vec4<f32> = u_xlat12;
    u_xlat12 = vec4<f32>(x_4303.x, x_4303.y, x_4303.z, x_4304.w);
    let x_4306 : vec3<f32> = u_xlat22;
    let x_4307 : vec4<f32> = u_xlat11;
    u_xlat69 = dot(x_4306, vec3<f32>(x_4307.x, x_4307.y, x_4307.z));
    let x_4310 : f32 = u_xlat69;
    u_xlat69 = clamp(x_4310, 0.0f, 1.0f);
    let x_4312 : f32 = u_xlat69;
    let x_4313 : f32 = u_xlat70;
    u_xlat69 = (x_4312 * x_4313);
    let x_4315 : f32 = u_xlat69;
    let x_4317 : vec4<f32> = u_xlat12;
    let x_4319 : vec3<f32> = (vec3<f32>(x_4315, x_4315, x_4315) * vec3<f32>(x_4317.x, x_4317.y, x_4317.z));
    let x_4320 : vec4<f32> = u_xlat12;
    u_xlat12 = vec4<f32>(x_4319.x, x_4319.y, x_4319.z, x_4320.w);
    let x_4322 : vec4<f32> = u_xlat10;
    let x_4324 : f32 = u_xlat72;
    let x_4327 : vec4<f32> = u_xlat4;
    let x_4329 : vec3<f32> = ((vec3<f32>(x_4322.x, x_4322.y, x_4322.z) * vec3<f32>(x_4324, x_4324, x_4324)) + vec3<f32>(x_4327.x, x_4327.y, x_4327.z));
    let x_4330 : vec4<f32> = u_xlat10;
    u_xlat10 = vec4<f32>(x_4329.x, x_4329.y, x_4329.z, x_4330.w);
    let x_4332 : vec4<f32> = u_xlat10;
    let x_4334 : vec4<f32> = u_xlat10;
    u_xlat69 = dot(vec3<f32>(x_4332.x, x_4332.y, x_4332.z), vec3<f32>(x_4334.x, x_4334.y, x_4334.z));
    let x_4337 : f32 = u_xlat69;
    u_xlat69 = max(x_4337, 1.17549435e-37f);
    let x_4339 : f32 = u_xlat69;
    u_xlat69 = inverseSqrt(x_4339);
    let x_4341 : f32 = u_xlat69;
    let x_4343 : vec4<f32> = u_xlat10;
    let x_4345 : vec3<f32> = (vec3<f32>(x_4341, x_4341, x_4341) * vec3<f32>(x_4343.x, x_4343.y, x_4343.z));
    let x_4346 : vec4<f32> = u_xlat10;
    u_xlat10 = vec4<f32>(x_4345.x, x_4345.y, x_4345.z, x_4346.w);
    let x_4348 : vec3<f32> = u_xlat22;
    let x_4349 : vec4<f32> = u_xlat10;
    u_xlat69 = dot(x_4348, vec3<f32>(x_4349.x, x_4349.y, x_4349.z));
    let x_4352 : f32 = u_xlat69;
    u_xlat69 = clamp(x_4352, 0.0f, 1.0f);
    let x_4354 : vec4<f32> = u_xlat11;
    let x_4356 : vec4<f32> = u_xlat10;
    u_xlat70 = dot(vec3<f32>(x_4354.x, x_4354.y, x_4354.z), vec3<f32>(x_4356.x, x_4356.y, x_4356.z));
    let x_4359 : f32 = u_xlat70;
    u_xlat70 = clamp(x_4359, 0.0f, 1.0f);
    let x_4361 : f32 = u_xlat69;
    let x_4362 : f32 = u_xlat69;
    u_xlat69 = (x_4361 * x_4362);
    let x_4364 : f32 = u_xlat69;
    let x_4366 : f32 = u_xlat3.x;
    u_xlat69 = ((x_4364 * x_4366) + 1.000010014f);
    let x_4369 : f32 = u_xlat70;
    let x_4370 : f32 = u_xlat70;
    u_xlat70 = (x_4369 * x_4370);
    let x_4372 : f32 = u_xlat69;
    let x_4373 : f32 = u_xlat69;
    u_xlat69 = (x_4372 * x_4373);
    let x_4375 : f32 = u_xlat70;
    u_xlat70 = max(x_4375, 0.100000001f);
    let x_4377 : f32 = u_xlat69;
    let x_4378 : f32 = u_xlat70;
    u_xlat69 = (x_4377 * x_4378);
    let x_4381 : f32 = u_xlat29.x;
    let x_4382 : f32 = u_xlat69;
    u_xlat69 = (x_4381 * x_4382);
    let x_4384 : f32 = u_xlat71;
    let x_4385 : f32 = u_xlat69;
    u_xlat69 = (x_4384 / x_4385);
    let x_4387 : f32 = u_xlat69;
    let x_4390 : vec3<f32> = u_xlat5;
    let x_4391 : vec3<f32> = ((vec3<f32>(x_4387, x_4387, x_4387) * vec3<f32>(0.039999999f, 0.039999999f, 0.039999999f)) + x_4390);
    let x_4392 : vec4<f32> = u_xlat10;
    u_xlat10 = vec4<f32>(x_4391.x, x_4391.y, x_4391.z, x_4392.w);
    let x_4394 : vec4<f32> = u_xlat10;
    let x_4396 : vec4<f32> = u_xlat12;
    let x_4399 : vec4<f32> = u_xlat9;
    let x_4401 : vec3<f32> = ((vec3<f32>(x_4394.x, x_4394.y, x_4394.z) * vec3<f32>(x_4396.x, x_4396.y, x_4396.z)) + vec3<f32>(x_4399.x, x_4399.y, x_4399.z));
    let x_4402 : vec4<f32> = u_xlat9;
    u_xlat9 = vec4<f32>(x_4401.x, x_4401.y, x_4401.z, x_4402.w);

    continuing {
      let x_4404 : u32 = u_xlatu_loop_1;
      u_xlatu_loop_1 = (x_4404 + bitcast<u32>(1i));
    }
  }
  let x_4406 : vec4<f32> = u_xlat6;
  let x_4408 : vec4<f32> = u_xlat7;
  let x_4411 : vec4<f32> = u_xlat2;
  u_xlat0 = ((vec3<f32>(x_4406.x, x_4406.y, x_4406.z) * vec3<f32>(x_4408.x, x_4408.x, x_4408.x)) + vec3<f32>(x_4411.x, x_4411.y, x_4411.z));
  let x_4414 : vec4<f32> = u_xlat9;
  let x_4416 : vec3<f32> = u_xlat0;
  u_xlat0 = (vec3<f32>(x_4414.x, x_4414.y, x_4414.z) + x_4416);
  let x_4418 : vec4<f32> = vs_INTERP4;
  let x_4420 : vec3<f32> = u_xlat1;
  let x_4422 : vec3<f32> = u_xlat0;
  u_xlat0 = ((vec3<f32>(x_4418.w, x_4418.w, x_4418.w) * x_4420) + x_4422);
  let x_4425 : f32 = u_xlat25;
  let x_4426 : f32 = u_xlat25;
  u_xlat66 = (x_4425 * -(x_4426));
  let x_4429 : f32 = u_xlat66;
  u_xlat66 = exp2(x_4429);
  let x_4431 : vec3<f32> = u_xlat0;
  let x_4434 : vec4<f32> = x_139.unity_FogColor;
  u_xlat0 = (x_4431 + -(vec3<f32>(x_4434.x, x_4434.y, x_4434.z)));
  let x_4440 : f32 = u_xlat66;
  let x_4442 : vec3<f32> = u_xlat0;
  let x_4445 : vec4<f32> = x_139.unity_FogColor;
  let x_4447 : vec3<f32> = ((vec3<f32>(x_4440, x_4440, x_4440) * x_4442) + vec3<f32>(x_4445.x, x_4445.y, x_4445.z));
  let x_4448 : vec4<f32> = SV_Target0;
  SV_Target0 = vec4<f32>(x_4447.x, x_4447.y, x_4447.z, x_4448.w);
  let x_4450 : bool = u_xlatb47;
  let x_4451 : f32 = u_xlat67;
  SV_Target0.w = select(1.0f, x_4451, x_4450);
  let x_4457 : u32 = x_139.x_RenderingLayerMaxInt;
  let x_4459 : f32 = x_60.unity_RenderingLayer.x;
  u_xlatu0 = (x_4457 & bitcast<u32>(x_4459));
  let x_4462 : u32 = u_xlatu0;
  u_xlat0.x = f32(x_4462);
  let x_4467 : f32 = u_xlat0.x;
  let x_4469 : f32 = x_139.x_RenderingLayerRcpMaxInt;
  SV_Target1.x = (x_4467 * x_4469);
  let x_4473 : f32 = SV_Target1.x;
  SV_Target1.x = clamp(x_4473, 0.0f, 1.0f);
  let x_4476 : vec4<f32> = SV_Target1;
  SV_Target1 = vec4<f32>(x_4476.x, vec3<f32>(0.0f, 0.0f, 0.0f).x, vec3<f32>(0.0f, 0.0f, 0.0f).y, vec3<f32>(0.0f, 0.0f, 0.0f).z);
  return;
}

struct main_out {
  @location(0)
  SV_Target0_1 : vec4<f32>,
  @location(1)
  SV_Target1_1 : vec4<f32>,
}

@fragment
fn main(@builtin(position) gl_FragCoord_param : vec4<f32>, @location(1) vs_INTERP1_param : vec3<f32>, @location(2) vs_INTERP2_param : vec4<f32>, @location(3) vs_INTERP3_param : vec4<f32>, @location(4) vs_INTERP4_param : vec4<f32>, @location(0) vs_INTERP0_param : vec3<f32>, @location(5) vs_INTERP5_param : vec2<f32>) -> main_out {
  gl_FragCoord = gl_FragCoord_param;
  vs_INTERP1 = vs_INTERP1_param;
  vs_INTERP2 = vs_INTERP2_param;
  vs_INTERP3 = vs_INTERP3_param;
  vs_INTERP4 = vs_INTERP4_param;
  vs_INTERP0 = vs_INTERP0_param;
  vs_INTERP5 = vs_INTERP5_param;
  main_1();
  return main_out(SV_Target0, SV_Target1);
}

