struct PGlobals {
  x_GlobalMipBias : vec2<f32>,
  @size(8)
  padding : u32,
  x_SourceSize : vec4<f32>,
  x_Dithering_Params : vec4<f32>,
  x_FsrRcasConstants : vec4<f32>,
}

var<private> vs_TEXCOORD0 : vec2<f32>;

@group(1) @binding(0) var<uniform> x_26 : PGlobals;

@group(0) @binding(0) var x_BlitTexture : texture_2d<f32>;

@group(0) @binding(2) var sampler_LinearClamp : sampler;

@group(0) @binding(1) var x_BlueNoise_Texture : texture_2d<f32>;

@group(0) @binding(3) var sampler_PointRepeat : sampler;

var<private> SV_Target0 : vec4<f32>;

var<private> gl_FragCoord : vec4<f32>;

fn main_1() {
  var u_xlatu0 : vec4<u32>;
  var u_xlat1 : vec4<f32>;
  var u_xlatu1 : vec4<u32>;
  var u_xlatu2 : vec4<u32>;
  var u_xlat0 : vec3<f32>;
  var u_xlatu3 : vec4<u32>;
  var u_xlatu4 : vec4<u32>;
  var u_xlat3 : vec4<f32>;
  var u_xlat5 : vec3<f32>;
  var u_xlat2 : vec4<f32>;
  var u_xlat4 : vec3<f32>;
  var u_xlat6 : vec3<f32>;
  var u_xlat7 : vec3<f32>;
  var u_xlat8 : vec3<f32>;
  var u_xlat9 : vec3<f32>;
  var u_xlat30 : f32;
  var u_xlat21 : f32;
  var u_xlati2 : vec4<i32>;
  var u_xlati1 : vec4<i32>;
  var u_xlat10 : vec3<f32>;
  var u_xlat20 : f32;
  var u_xlat12 : f32;
  var u_xlat11 : f32;
  var u_xlatb0 : vec3<bool>;
  var x_729 : vec3<f32>;
  var x_778 : f32;
  var x_790 : f32;
  var x_802 : f32;
  var x_843 : f32;
  var x_855 : f32;
  var x_867 : f32;
  var u_xlatb30 : bool;
  var x_980 : f32;
  var x_993 : f32;
  var x_1005 : f32;
  var u_xlat_precise_vec4 : vec4<f32>;
  var u_xlat_precise_ivec4 : vec4<i32>;
  var u_xlat_precise_bvec4 : vec4<bool>;
  var u_xlat_precise_uvec4 : vec4<u32>;
  u_xlatu0.z = 0u;
  u_xlatu0.w = 0u;
  let x_23 : vec2<f32> = vs_TEXCOORD0;
  let x_31 : vec4<f32> = x_26.x_SourceSize;
  let x_33 : vec2<f32> = (x_23 * vec2<f32>(x_31.x, x_31.y));
  let x_34 : vec4<f32> = u_xlat1;
  u_xlat1 = vec4<f32>(x_33.x, x_33.y, x_34.z, x_34.w);
  let x_37 : vec4<f32> = u_xlat1;
  let x_42 : vec2<u32> = bitcast<vec2<u32>>(vec2<i32>(vec2<f32>(x_37.x, x_37.y)));
  let x_43 : vec4<u32> = u_xlatu1;
  u_xlatu1 = vec4<u32>(x_42.x, x_42.y, x_43.z, x_43.w);
  let x_46 : vec4<u32> = u_xlatu1;
  u_xlatu2 = (vec4<u32>(x_46.x, x_46.y, x_46.x, x_46.y) + vec4<u32>(0u, 4294967295u, 4294967295u, 0u));
  let x_51 : vec4<u32> = u_xlatu2;
  let x_52 : vec2<u32> = vec2<u32>(x_51.z, x_51.w);
  let x_53 : vec4<u32> = u_xlatu0;
  u_xlatu0 = vec4<u32>(x_52.x, x_52.y, x_53.z, x_53.w);
  let x_62 : vec4<u32> = u_xlatu0;
  let x_66 : u32 = u_xlatu0.w;
  let x_68 : vec4<f32> = textureLoad(x_BlitTexture, bitcast<vec2<i32>>(vec2<u32>(x_62.x, x_62.y)), bitcast<i32>(x_66));
  u_xlat0 = vec3<f32>(x_68.x, x_68.y, x_68.z);
  u_xlatu3.z = 0u;
  u_xlatu3.w = 0u;
  let x_74 : vec4<u32> = u_xlatu1;
  u_xlatu4 = (vec4<u32>(x_74.x, x_74.y, x_74.x, x_74.y) + vec4<u32>(0u, 1u, 1u, 0u));
  let x_79 : vec4<u32> = u_xlatu4;
  let x_80 : vec2<u32> = vec2<u32>(x_79.z, x_79.w);
  let x_81 : vec4<u32> = u_xlatu3;
  u_xlatu3 = vec4<u32>(x_80.x, x_80.y, x_81.z, x_81.w);
  let x_85 : vec4<u32> = u_xlatu3;
  let x_89 : u32 = u_xlatu3.w;
  let x_91 : vec4<f32> = textureLoad(x_BlitTexture, bitcast<vec2<i32>>(vec2<u32>(x_85.x, x_85.y)), bitcast<i32>(x_89));
  let x_92 : vec3<f32> = vec3<f32>(x_91.x, x_91.y, x_91.z);
  let x_93 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_92.x, x_92.y, x_92.z, x_93.w);
  let x_96 : vec3<f32> = u_xlat0;
  let x_97 : vec4<f32> = u_xlat3;
  u_xlat5 = max(x_96, vec3<f32>(x_97.x, x_97.y, x_97.z));
  u_xlatu2.z = 0u;
  u_xlatu2.w = 0u;
  let x_104 : vec4<u32> = u_xlatu2;
  let x_108 : u32 = u_xlatu2.w;
  let x_110 : vec4<f32> = textureLoad(x_BlitTexture, bitcast<vec2<i32>>(vec2<u32>(x_104.x, x_104.y)), bitcast<i32>(x_108));
  let x_111 : vec3<f32> = vec3<f32>(x_110.x, x_110.y, x_110.z);
  let x_112 : vec4<f32> = u_xlat2;
  u_xlat2 = vec4<f32>(x_111.x, x_111.y, x_111.z, x_112.w);
  let x_114 : vec3<f32> = u_xlat5;
  let x_115 : vec4<f32> = u_xlat2;
  u_xlat5 = max(x_114, vec3<f32>(x_115.x, x_115.y, x_115.z));
  u_xlatu4.z = 0u;
  u_xlatu4.w = 0u;
  let x_122 : vec4<u32> = u_xlatu4;
  let x_126 : u32 = u_xlatu4.w;
  let x_128 : vec4<f32> = textureLoad(x_BlitTexture, bitcast<vec2<i32>>(vec2<u32>(x_122.x, x_122.y)), bitcast<i32>(x_126));
  u_xlat4 = vec3<f32>(x_128.x, x_128.y, x_128.z);
  let x_130 : vec3<f32> = u_xlat4;
  let x_131 : vec3<f32> = u_xlat5;
  u_xlat5 = max(x_130, x_131);
  u_xlatu1.z = 0u;
  u_xlatu1.w = 0u;
  let x_137 : vec4<u32> = u_xlatu1;
  let x_141 : u32 = u_xlatu1.w;
  let x_143 : vec4<f32> = textureLoad(x_BlitTexture, bitcast<vec2<i32>>(vec2<u32>(x_137.x, x_137.y)), bitcast<i32>(x_141));
  u_xlat6 = vec3<f32>(x_143.x, x_143.y, x_143.z);
  let x_146 : vec3<f32> = u_xlat5;
  let x_147 : vec3<f32> = u_xlat6;
  u_xlat7 = max(x_146, x_147);
  let x_149 : vec3<f32> = u_xlat5;
  u_xlat5 = (x_149 * vec3<f32>(4.0f, 4.0f, 4.0f));
  let x_155 : vec3<f32> = u_xlat5;
  u_xlat5 = (vec3<f32>(1.0f, 1.0f, 1.0f) / vec3<f32>(x_155.x, x_155.y, x_155.z));
  let x_161 : vec3<f32> = u_xlat7;
  u_xlat7 = (-(x_161) + vec3<f32>(1.0f, 1.0f, 1.0f));
  let x_165 : vec3<f32> = u_xlat0;
  let x_166 : vec4<f32> = u_xlat3;
  u_xlat8 = min(x_165, vec3<f32>(x_166.x, x_166.y, x_166.z));
  let x_169 : vec4<f32> = u_xlat2;
  let x_171 : vec3<f32> = u_xlat8;
  u_xlat8 = min(vec3<f32>(x_169.x, x_169.y, x_169.z), x_171);
  let x_173 : vec3<f32> = u_xlat4;
  let x_174 : vec3<f32> = u_xlat8;
  u_xlat8 = min(x_173, x_174);
  let x_177 : vec3<f32> = u_xlat8;
  u_xlat9 = ((x_177 * vec3<f32>(4.0f, 4.0f, 4.0f)) + vec3<f32>(-4.0f, -4.0f, -4.0f));
  let x_182 : vec3<f32> = u_xlat6;
  let x_183 : vec3<f32> = u_xlat8;
  u_xlat8 = min(x_182, x_183);
  let x_185 : vec3<f32> = u_xlat5;
  let x_186 : vec3<f32> = u_xlat8;
  u_xlat5 = (x_185 * x_186);
  let x_188 : vec3<f32> = u_xlat9;
  u_xlat8 = (vec3<f32>(1.0f, 1.0f, 1.0f) / vec3<f32>(x_188.x, x_188.y, x_188.z));
  let x_194 : vec3<f32> = u_xlat7;
  let x_195 : vec3<f32> = u_xlat8;
  u_xlat7 = (x_194 * x_195);
  let x_197 : vec3<f32> = u_xlat5;
  let x_199 : vec3<f32> = u_xlat7;
  u_xlat5 = max(-(x_197), x_199);
  let x_204 : f32 = u_xlat5.z;
  let x_206 : f32 = u_xlat5.y;
  u_xlat30 = max(x_204, x_206);
  let x_208 : f32 = u_xlat30;
  let x_210 : f32 = u_xlat5.x;
  u_xlat30 = max(x_208, x_210);
  let x_212 : f32 = u_xlat30;
  u_xlat30 = min(x_212, 0.0f);
  let x_215 : f32 = u_xlat30;
  u_xlat30 = max(x_215, -0.1875f);
  let x_218 : f32 = u_xlat30;
  let x_222 : f32 = x_26.x_FsrRcasConstants.x;
  u_xlat30 = (x_218 * x_222);
  let x_224 : vec3<f32> = u_xlat0;
  let x_225 : f32 = u_xlat30;
  u_xlat0 = (x_224 * vec3<f32>(x_225, x_225, x_225));
  let x_228 : f32 = u_xlat30;
  let x_230 : vec4<f32> = u_xlat2;
  let x_233 : vec3<f32> = u_xlat0;
  u_xlat0 = ((vec3<f32>(x_228, x_228, x_228) * vec3<f32>(x_230.x, x_230.y, x_230.z)) + x_233);
  let x_235 : f32 = u_xlat30;
  let x_237 : vec3<f32> = u_xlat4;
  let x_239 : vec3<f32> = u_xlat0;
  u_xlat0 = ((vec3<f32>(x_235, x_235, x_235) * x_237) + x_239);
  let x_241 : f32 = u_xlat30;
  let x_243 : vec4<f32> = u_xlat3;
  let x_246 : vec3<f32> = u_xlat0;
  u_xlat0 = ((vec3<f32>(x_241, x_241, x_241) * vec3<f32>(x_243.x, x_243.y, x_243.z)) + x_246);
  let x_248 : f32 = u_xlat30;
  u_xlat30 = ((x_248 * 4.0f) + 1.0f);
  let x_251 : vec3<f32> = u_xlat6;
  let x_252 : vec3<f32> = u_xlat0;
  u_xlat0 = (x_251 + x_252);
  let x_255 : f32 = u_xlat30;
  u_xlat21 = bitcast<f32>((-(bitcast<i32>(x_255)) + 2129764351i));
  let x_261 : f32 = u_xlat21;
  let x_263 : f32 = u_xlat30;
  u_xlat30 = ((-(x_261) * x_263) + 2.0f);
  let x_267 : f32 = u_xlat30;
  let x_268 : f32 = u_xlat21;
  u_xlat30 = (x_267 * x_268);
  let x_270 : f32 = u_xlat30;
  let x_272 : vec3<f32> = u_xlat0;
  u_xlat0 = (vec3<f32>(x_270, x_270, x_270) * x_272);
  let x_274 : vec3<f32> = u_xlat0;
  u_xlat0 = clamp(x_274, vec3<f32>(0.0f, 0.0f, 0.0f), vec3<f32>(1.0f, 1.0f, 1.0f));
  let x_278 : vec3<f32> = u_xlat0;
  u_xlat0.x = dot(x_278, vec3<f32>(0.212672904f, 0.715152204f, 0.072175004f));
  let x_288 : vec4<u32> = u_xlatu1;
  u_xlati2 = (bitcast<vec4<i32>>(vec4<u32>(x_288.x, x_288.y, x_288.x, x_288.y)) + vec4<i32>(-1i, -1i, 1i, -1i));
  let x_295 : vec4<u32> = u_xlatu1;
  u_xlati1 = (bitcast<vec4<i32>>(vec4<u32>(x_295.x, x_295.y, x_295.x, x_295.y)) + vec4<i32>(-1i, 1i, 1i, 1i));
  let x_300 : vec4<i32> = u_xlati1;
  u_xlat1 = vec4<f32>(x_300);
  let x_302 : vec4<f32> = u_xlat1;
  u_xlat1 = max(x_302, vec4<f32>(0.0f, 0.0f, 0.0f, 0.0f));
  let x_305 : vec4<i32> = u_xlati2;
  u_xlat2 = vec4<f32>(x_305);
  let x_307 : vec4<f32> = u_xlat2;
  u_xlat2 = max(x_307, vec4<f32>(0.0f, 0.0f, 0.0f, 0.0f));
  let x_310 : vec4<f32> = x_26.x_SourceSize;
  u_xlat3 = (vec4<f32>(x_310.x, x_310.y, x_310.x, x_310.y) + vec4<f32>(-1.0f, -1.0f, -1.0f, -1.0f));
  let x_315 : vec4<f32> = u_xlat2;
  let x_316 : vec4<f32> = u_xlat3;
  u_xlat2 = min(x_315, x_316);
  let x_318 : vec4<f32> = u_xlat1;
  let x_319 : vec4<f32> = u_xlat3;
  u_xlat1 = min(x_318, x_319);
  let x_321 : vec4<f32> = u_xlat1;
  u_xlatu1 = bitcast<vec4<u32>>(vec4<i32>(vec4<f32>(x_321.z, x_321.w, x_321.x, x_321.y)));
  let x_325 : vec4<f32> = u_xlat2;
  u_xlatu2 = bitcast<vec4<u32>>(vec4<i32>(vec4<f32>(x_325.z, x_325.w, x_325.x, x_325.y)));
  let x_329 : vec4<u32> = u_xlatu2;
  let x_330 : vec2<u32> = vec2<u32>(x_329.z, x_329.w);
  let x_331 : vec4<u32> = u_xlatu3;
  u_xlatu3 = vec4<u32>(x_330.x, x_330.y, x_331.z, x_331.w);
  u_xlatu3.z = 0u;
  u_xlatu3.w = 0u;
  let x_337 : vec4<u32> = u_xlatu3;
  let x_341 : u32 = u_xlatu3.w;
  let x_343 : vec4<f32> = textureLoad(x_BlitTexture, bitcast<vec2<i32>>(vec2<u32>(x_337.x, x_337.y)), bitcast<i32>(x_341));
  u_xlat10 = vec3<f32>(x_343.x, x_343.y, x_343.z);
  let x_345 : vec3<f32> = u_xlat10;
  u_xlat10 = x_345;
  let x_346 : vec3<f32> = u_xlat10;
  u_xlat10 = clamp(x_346, vec3<f32>(0.0f, 0.0f, 0.0f), vec3<f32>(1.0f, 1.0f, 1.0f));
  let x_350 : vec3<f32> = u_xlat10;
  u_xlat10.x = dot(x_350, vec3<f32>(0.212672904f, 0.715152204f, 0.072175004f));
  let x_355 : f32 = u_xlat10.x;
  let x_357 : f32 = u_xlat0.x;
  u_xlat20 = min(x_355, x_357);
  let x_360 : f32 = u_xlat10.x;
  let x_362 : f32 = u_xlat0.x;
  u_xlat0.x = max(x_360, x_362);
  u_xlatu2.z = 0u;
  u_xlatu2.w = 0u;
  let x_368 : vec4<u32> = u_xlatu2;
  let x_372 : u32 = u_xlatu2.w;
  let x_374 : vec4<f32> = textureLoad(x_BlitTexture, bitcast<vec2<i32>>(vec2<u32>(x_368.x, x_368.y)), bitcast<i32>(x_372));
  let x_375 : vec3<f32> = vec3<f32>(x_374.x, x_374.y, x_374.z);
  let x_376 : vec4<f32> = u_xlat2;
  u_xlat2 = vec4<f32>(x_375.x, x_375.y, x_375.z, x_376.w);
  let x_378 : vec4<f32> = u_xlat2;
  let x_379 : vec3<f32> = vec3<f32>(x_378.x, x_378.y, x_378.z);
  let x_380 : vec4<f32> = u_xlat2;
  u_xlat2 = vec4<f32>(x_379.x, x_379.y, x_379.z, x_380.w);
  let x_382 : vec4<f32> = u_xlat2;
  let x_386 : vec3<f32> = clamp(vec3<f32>(x_382.x, x_382.y, x_382.z), vec3<f32>(0.0f, 0.0f, 0.0f), vec3<f32>(1.0f, 1.0f, 1.0f));
  let x_387 : vec4<f32> = u_xlat2;
  u_xlat2 = vec4<f32>(x_386.x, x_386.y, x_386.z, x_387.w);
  let x_389 : vec4<f32> = u_xlat2;
  u_xlat30 = dot(vec3<f32>(x_389.x, x_389.y, x_389.z), vec3<f32>(0.212672904f, 0.715152204f, 0.072175004f));
  let x_392 : vec4<u32> = u_xlatu1;
  let x_393 : vec2<u32> = vec2<u32>(x_392.z, x_392.w);
  let x_394 : vec4<u32> = u_xlatu2;
  u_xlatu2 = vec4<u32>(x_393.x, x_393.y, x_394.z, x_394.w);
  u_xlatu2.z = 0u;
  u_xlatu2.w = 0u;
  let x_399 : vec4<u32> = u_xlatu2;
  let x_403 : u32 = u_xlatu2.w;
  let x_405 : vec4<f32> = textureLoad(x_BlitTexture, bitcast<vec2<i32>>(vec2<u32>(x_399.x, x_399.y)), bitcast<i32>(x_403));
  let x_406 : vec3<f32> = vec3<f32>(x_405.x, x_405.y, x_405.z);
  let x_407 : vec4<f32> = u_xlat2;
  u_xlat2 = vec4<f32>(x_406.x, x_406.y, x_406.z, x_407.w);
  let x_409 : vec4<f32> = u_xlat2;
  let x_410 : vec3<f32> = vec3<f32>(x_409.x, x_409.y, x_409.z);
  let x_411 : vec4<f32> = u_xlat2;
  u_xlat2 = vec4<f32>(x_410.x, x_410.y, x_410.z, x_411.w);
  let x_413 : vec4<f32> = u_xlat2;
  let x_417 : vec3<f32> = clamp(vec3<f32>(x_413.x, x_413.y, x_413.z), vec3<f32>(0.0f, 0.0f, 0.0f), vec3<f32>(1.0f, 1.0f, 1.0f));
  let x_418 : vec4<f32> = u_xlat2;
  u_xlat2 = vec4<f32>(x_417.x, x_417.y, x_417.z, x_418.w);
  let x_420 : vec4<f32> = u_xlat2;
  u_xlat2.x = dot(vec3<f32>(x_420.x, x_420.y, x_420.z), vec3<f32>(0.212672904f, 0.715152204f, 0.072175004f));
  let x_425 : f32 = u_xlat30;
  let x_427 : f32 = u_xlat2.x;
  u_xlat12 = min(x_425, x_427);
  u_xlatu1.z = 0u;
  u_xlatu1.w = 0u;
  let x_432 : vec4<u32> = u_xlatu1;
  let x_436 : u32 = u_xlatu1.w;
  let x_438 : vec4<f32> = textureLoad(x_BlitTexture, bitcast<vec2<i32>>(vec2<u32>(x_432.x, x_432.y)), bitcast<i32>(x_436));
  let x_439 : vec3<f32> = vec3<f32>(x_438.x, x_438.y, x_438.z);
  let x_440 : vec4<f32> = u_xlat1;
  u_xlat1 = vec4<f32>(x_439.x, x_439.y, x_439.z, x_440.w);
  let x_442 : vec4<f32> = u_xlat1;
  let x_443 : vec3<f32> = vec3<f32>(x_442.x, x_442.y, x_442.z);
  let x_444 : vec4<f32> = u_xlat1;
  u_xlat1 = vec4<f32>(x_443.x, x_443.y, x_443.z, x_444.w);
  let x_446 : vec4<f32> = u_xlat1;
  let x_450 : vec3<f32> = clamp(vec3<f32>(x_446.x, x_446.y, x_446.z), vec3<f32>(0.0f, 0.0f, 0.0f), vec3<f32>(1.0f, 1.0f, 1.0f));
  let x_451 : vec4<f32> = u_xlat1;
  u_xlat1 = vec4<f32>(x_450.x, x_450.y, x_450.z, x_451.w);
  let x_453 : vec4<f32> = u_xlat1;
  u_xlat1.x = dot(vec3<f32>(x_453.x, x_453.y, x_453.z), vec3<f32>(0.212672904f, 0.715152204f, 0.072175004f));
  let x_459 : f32 = u_xlat1.x;
  let x_460 : f32 = u_xlat12;
  u_xlat11 = min(x_459, x_460);
  let x_462 : f32 = u_xlat20;
  let x_463 : f32 = u_xlat11;
  u_xlat0.z = min(x_462, x_463);
  let x_467 : f32 = u_xlat10.x;
  let x_469 : f32 = u_xlat2.x;
  u_xlat11 = (x_467 + x_469);
  let x_471 : f32 = u_xlat30;
  let x_473 : f32 = u_xlat10.x;
  u_xlat10.x = (x_471 + x_473);
  let x_476 : f32 = u_xlat30;
  let x_478 : f32 = u_xlat1.x;
  u_xlat21 = (x_476 + x_478);
  let x_480 : f32 = u_xlat30;
  let x_482 : f32 = u_xlat2.x;
  u_xlat30 = max(x_480, x_482);
  let x_485 : f32 = u_xlat1.x;
  let x_486 : f32 = u_xlat30;
  u_xlat30 = max(x_485, x_486);
  let x_488 : f32 = u_xlat30;
  let x_490 : f32 = u_xlat0.x;
  u_xlat0.x = max(x_488, x_490);
  let x_493 : f32 = u_xlat21;
  let x_496 : f32 = u_xlat11;
  let x_498 : vec2<f32> = (-(vec2<f32>(x_493, x_493)) + vec2<f32>(x_496, x_496));
  let x_499 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_499.x, x_498.x, x_499.z, x_498.y);
  let x_502 : f32 = u_xlat1.x;
  let x_504 : f32 = u_xlat2.x;
  u_xlat30 = (x_502 + x_504);
  let x_507 : f32 = u_xlat2.x;
  let x_509 : f32 = u_xlat10.x;
  u_xlat11 = (x_507 + x_509);
  let x_511 : f32 = u_xlat30;
  let x_514 : f32 = u_xlat10.x;
  u_xlat10.x = (-(x_511) + x_514);
  let x_518 : f32 = u_xlat1.x;
  let x_519 : f32 = u_xlat11;
  u_xlat30 = (x_518 + x_519);
  let x_521 : f32 = u_xlat30;
  u_xlat30 = (x_521 * 0.03125f);
  let x_524 : f32 = u_xlat30;
  u_xlat30 = max(x_524, 0.0078125f);
  let x_528 : f32 = u_xlat3.w;
  let x_531 : f32 = u_xlat10.x;
  u_xlat1.x = min(abs(x_528), abs(x_531));
  let x_535 : vec3<f32> = u_xlat10;
  let x_537 : vec2<f32> = -(vec2<f32>(x_535.x, x_535.x));
  let x_538 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_537.x, x_538.y, x_537.y, x_538.w);
  let x_540 : f32 = u_xlat30;
  let x_542 : f32 = u_xlat1.x;
  u_xlat10.x = (x_540 + x_542);
  let x_546 : f32 = u_xlat10.x;
  u_xlat10.x = (1.0f / x_546);
  let x_549 : vec3<f32> = u_xlat10;
  let x_551 : vec4<f32> = u_xlat3;
  u_xlat1 = (vec4<f32>(x_549.x, x_549.x, x_549.x, x_549.x) * x_551);
  let x_553 : vec4<f32> = u_xlat1;
  u_xlat1 = max(x_553, vec4<f32>(-8.0f, -8.0f, -8.0f, -8.0f));
  let x_557 : vec4<f32> = u_xlat1;
  u_xlat1 = min(x_557, vec4<f32>(8.0f, 8.0f, 8.0f, 8.0f));
  let x_561 : vec4<f32> = u_xlat1;
  let x_563 : vec4<f32> = x_26.x_SourceSize;
  u_xlat1 = (x_561 * vec4<f32>(x_563.z, x_563.w, x_563.z, x_563.w));
  let x_566 : vec4<f32> = u_xlat1;
  let x_572 : vec2<f32> = vs_TEXCOORD0;
  u_xlat2 = ((vec4<f32>(x_566.z, x_566.w, x_566.z, x_566.w) * vec4<f32>(-0.5f, -0.5f, -0.166666672f, -0.166666672f)) + vec4<f32>(x_572.x, x_572.y, x_572.x, x_572.y));
  let x_575 : vec4<f32> = u_xlat1;
  let x_580 : vec2<f32> = vs_TEXCOORD0;
  u_xlat1 = ((x_575 * vec4<f32>(0.166666672f, 0.166666672f, 0.5f, 0.5f)) + vec4<f32>(x_580.x, x_580.y, x_580.x, x_580.y));
  let x_590 : vec4<f32> = u_xlat2;
  let x_594 : f32 = x_26.x_GlobalMipBias.x;
  let x_595 : vec4<f32> = textureSampleBias(x_BlitTexture, sampler_LinearClamp, vec2<f32>(x_590.x, x_590.y), x_594);
  let x_596 : vec3<f32> = vec3<f32>(x_595.x, x_595.y, x_595.z);
  let x_597 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_596.x, x_596.y, x_596.z, x_597.w);
  let x_602 : vec4<f32> = u_xlat2;
  let x_605 : f32 = x_26.x_GlobalMipBias.x;
  let x_606 : vec4<f32> = textureSampleBias(x_BlitTexture, sampler_LinearClamp, vec2<f32>(x_602.z, x_602.w), x_605);
  let x_607 : vec3<f32> = vec3<f32>(x_606.x, x_606.y, x_606.z);
  let x_608 : vec4<f32> = u_xlat2;
  u_xlat2 = vec4<f32>(x_607.x, x_607.y, x_607.z, x_608.w);
  let x_610 : vec4<f32> = u_xlat2;
  let x_611 : vec3<f32> = vec3<f32>(x_610.x, x_610.y, x_610.z);
  let x_612 : vec4<f32> = u_xlat2;
  u_xlat2 = vec4<f32>(x_611.x, x_611.y, x_611.z, x_612.w);
  let x_614 : vec4<f32> = u_xlat2;
  let x_618 : vec3<f32> = clamp(vec3<f32>(x_614.x, x_614.y, x_614.z), vec3<f32>(0.0f, 0.0f, 0.0f), vec3<f32>(1.0f, 1.0f, 1.0f));
  let x_619 : vec4<f32> = u_xlat2;
  u_xlat2 = vec4<f32>(x_618.x, x_618.y, x_618.z, x_619.w);
  let x_621 : vec4<f32> = u_xlat3;
  let x_622 : vec3<f32> = vec3<f32>(x_621.x, x_621.y, x_621.z);
  let x_623 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_622.x, x_622.y, x_622.z, x_623.w);
  let x_625 : vec4<f32> = u_xlat3;
  let x_629 : vec3<f32> = clamp(vec3<f32>(x_625.x, x_625.y, x_625.z), vec3<f32>(0.0f, 0.0f, 0.0f), vec3<f32>(1.0f, 1.0f, 1.0f));
  let x_630 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_629.x, x_629.y, x_629.z, x_630.w);
  let x_635 : vec4<f32> = u_xlat1;
  let x_638 : f32 = x_26.x_GlobalMipBias.x;
  let x_639 : vec4<f32> = textureSampleBias(x_BlitTexture, sampler_LinearClamp, vec2<f32>(x_635.z, x_635.w), x_638);
  u_xlat4 = vec3<f32>(x_639.x, x_639.y, x_639.z);
  let x_644 : vec4<f32> = u_xlat1;
  let x_647 : f32 = x_26.x_GlobalMipBias.x;
  let x_648 : vec4<f32> = textureSampleBias(x_BlitTexture, sampler_LinearClamp, vec2<f32>(x_644.x, x_644.y), x_647);
  let x_649 : vec3<f32> = vec3<f32>(x_648.x, x_648.y, x_648.z);
  let x_650 : vec4<f32> = u_xlat1;
  u_xlat1 = vec4<f32>(x_649.x, x_649.y, x_649.z, x_650.w);
  let x_652 : vec4<f32> = u_xlat1;
  let x_653 : vec3<f32> = vec3<f32>(x_652.x, x_652.y, x_652.z);
  let x_654 : vec4<f32> = u_xlat1;
  u_xlat1 = vec4<f32>(x_653.x, x_653.y, x_653.z, x_654.w);
  let x_656 : vec4<f32> = u_xlat1;
  let x_660 : vec3<f32> = clamp(vec3<f32>(x_656.x, x_656.y, x_656.z), vec3<f32>(0.0f, 0.0f, 0.0f), vec3<f32>(1.0f, 1.0f, 1.0f));
  let x_661 : vec4<f32> = u_xlat1;
  u_xlat1 = vec4<f32>(x_660.x, x_660.y, x_660.z, x_661.w);
  let x_663 : vec4<f32> = u_xlat1;
  let x_665 : vec4<f32> = u_xlat2;
  let x_667 : vec3<f32> = (vec3<f32>(x_663.x, x_663.y, x_663.z) + vec3<f32>(x_665.x, x_665.y, x_665.z));
  let x_668 : vec4<f32> = u_xlat1;
  u_xlat1 = vec4<f32>(x_667.x, x_667.y, x_667.z, x_668.w);
  let x_670 : vec3<f32> = u_xlat4;
  u_xlat4 = x_670;
  let x_671 : vec3<f32> = u_xlat4;
  u_xlat4 = clamp(x_671, vec3<f32>(0.0f, 0.0f, 0.0f), vec3<f32>(1.0f, 1.0f, 1.0f));
  let x_675 : vec4<f32> = u_xlat3;
  let x_677 : vec3<f32> = u_xlat4;
  let x_678 : vec3<f32> = (vec3<f32>(x_675.x, x_675.y, x_675.z) + x_677);
  let x_679 : vec4<f32> = u_xlat2;
  u_xlat2 = vec4<f32>(x_678.x, x_678.y, x_678.z, x_679.w);
  let x_681 : vec4<f32> = u_xlat2;
  let x_685 : vec3<f32> = (vec3<f32>(x_681.x, x_681.y, x_681.z) * vec3<f32>(0.25f, 0.25f, 0.25f));
  let x_686 : vec4<f32> = u_xlat2;
  u_xlat2 = vec4<f32>(x_685.x, x_685.y, x_685.z, x_686.w);
  let x_688 : vec4<f32> = u_xlat1;
  let x_691 : vec4<f32> = u_xlat2;
  let x_693 : vec3<f32> = ((vec3<f32>(x_688.x, x_688.y, x_688.z) * vec3<f32>(0.25f, 0.25f, 0.25f)) + vec3<f32>(x_691.x, x_691.y, x_691.z));
  let x_694 : vec4<f32> = u_xlat2;
  u_xlat2 = vec4<f32>(x_693.x, x_693.y, x_693.z, x_694.w);
  let x_696 : vec4<f32> = u_xlat1;
  let x_699 : vec3<f32> = (vec3<f32>(x_696.x, x_696.y, x_696.z) * vec3<f32>(0.5f, 0.5f, 0.5f));
  let x_700 : vec4<f32> = u_xlat1;
  u_xlat1 = vec4<f32>(x_699.x, x_699.y, x_699.z, x_700.w);
  let x_702 : vec4<f32> = u_xlat2;
  u_xlat0.y = dot(vec3<f32>(x_702.x, x_702.y, x_702.z), vec3<f32>(0.212672904f, 0.715152204f, 0.072175004f));
  let x_710 : vec3<f32> = u_xlat0;
  let x_712 : vec3<f32> = u_xlat0;
  let x_715 : vec4<bool> = (vec4<f32>(x_710.x, x_710.x, x_710.y, x_710.x) < vec4<f32>(x_712.y, x_712.y, x_712.z, x_712.y));
  let x_717 : vec2<bool> = vec2<bool>(x_715.x, x_715.z);
  let x_718 : vec3<bool> = u_xlatb0;
  u_xlatb0 = vec3<bool>(x_717.x, x_718.y, x_717.y);
  let x_722 : bool = u_xlatb0.x;
  let x_724 : bool = u_xlatb0.z;
  u_xlatb0.x = (x_722 | x_724);
  let x_728 : bool = u_xlatb0.x;
  if (x_728) {
    let x_732 : vec4<f32> = u_xlat1;
    x_729 = vec3<f32>(x_732.x, x_732.y, x_732.z);
  } else {
    let x_735 : vec4<f32> = u_xlat2;
    x_729 = vec3<f32>(x_735.x, x_735.y, x_735.z);
  }
  let x_737 : vec3<f32> = x_729;
  u_xlat0 = x_737;
  let x_738 : vec3<f32> = u_xlat0;
  let x_739 : vec3<f32> = log2(x_738);
  let x_740 : vec4<f32> = u_xlat1;
  u_xlat1 = vec4<f32>(x_739.x, x_739.y, x_739.z, x_740.w);
  let x_742 : vec4<f32> = u_xlat1;
  let x_746 : vec3<f32> = (vec3<f32>(x_742.x, x_742.y, x_742.z) * vec3<f32>(0.416666657f, 0.416666657f, 0.416666657f));
  let x_747 : vec4<f32> = u_xlat1;
  u_xlat1 = vec4<f32>(x_746.x, x_746.y, x_746.z, x_747.w);
  let x_749 : vec4<f32> = u_xlat1;
  let x_751 : vec3<f32> = exp2(vec3<f32>(x_749.x, x_749.y, x_749.z));
  let x_752 : vec4<f32> = u_xlat1;
  u_xlat1 = vec4<f32>(x_751.x, x_751.y, x_751.z, x_752.w);
  let x_754 : vec4<f32> = u_xlat1;
  let x_761 : vec3<f32> = ((vec3<f32>(x_754.x, x_754.y, x_754.z) * vec3<f32>(1.054999948f, 1.054999948f, 1.054999948f)) + vec3<f32>(-0.055f, -0.055f, -0.055f));
  let x_762 : vec4<f32> = u_xlat1;
  u_xlat1 = vec4<f32>(x_761.x, x_761.y, x_761.z, x_762.w);
  let x_764 : vec3<f32> = u_xlat0;
  let x_767 : vec3<f32> = (x_764 * vec3<f32>(12.920000076f, 12.920000076f, 12.920000076f));
  let x_768 : vec4<f32> = u_xlat2;
  u_xlat2 = vec4<f32>(x_767.x, x_767.y, x_767.z, x_768.w);
  let x_772 : vec3<f32> = u_xlat0;
  let x_774 : vec4<bool> = (vec4<f32>(0.0031308f, 0.0031308f, 0.0031308f, 0.0f) >= vec4<f32>(x_772.x, x_772.y, x_772.z, x_772.x));
  u_xlatb0 = vec3<bool>(x_774.x, x_774.y, x_774.z);
  let x_777 : bool = u_xlatb0.x;
  if (x_777) {
    let x_782 : f32 = u_xlat2.x;
    x_778 = x_782;
  } else {
    let x_785 : f32 = u_xlat1.x;
    x_778 = x_785;
  }
  let x_786 : f32 = x_778;
  u_xlat0.x = x_786;
  let x_789 : bool = u_xlatb0.y;
  if (x_789) {
    let x_794 : f32 = u_xlat2.y;
    x_790 = x_794;
  } else {
    let x_797 : f32 = u_xlat1.y;
    x_790 = x_797;
  }
  let x_798 : f32 = x_790;
  u_xlat0.y = x_798;
  let x_801 : bool = u_xlatb0.z;
  if (x_801) {
    let x_806 : f32 = u_xlat2.z;
    x_802 = x_806;
  } else {
    let x_809 : f32 = u_xlat1.z;
    x_802 = x_809;
  }
  let x_810 : f32 = x_802;
  u_xlat0.z = x_810;
  let x_812 : vec3<f32> = u_xlat0;
  let x_814 : vec3<f32> = log2(abs(x_812));
  let x_815 : vec4<f32> = u_xlat1;
  u_xlat1 = vec4<f32>(x_814.x, x_814.y, x_814.z, x_815.w);
  let x_817 : vec4<f32> = u_xlat1;
  let x_819 : vec3<f32> = (vec3<f32>(x_817.x, x_817.y, x_817.z) * vec3<f32>(0.416666657f, 0.416666657f, 0.416666657f));
  let x_820 : vec4<f32> = u_xlat1;
  u_xlat1 = vec4<f32>(x_819.x, x_819.y, x_819.z, x_820.w);
  let x_822 : vec4<f32> = u_xlat1;
  let x_824 : vec3<f32> = exp2(vec3<f32>(x_822.x, x_822.y, x_822.z));
  let x_825 : vec4<f32> = u_xlat1;
  u_xlat1 = vec4<f32>(x_824.x, x_824.y, x_824.z, x_825.w);
  let x_827 : vec4<f32> = u_xlat1;
  let x_830 : vec3<f32> = ((vec3<f32>(x_827.x, x_827.y, x_827.z) * vec3<f32>(1.054999948f, 1.054999948f, 1.054999948f)) + vec3<f32>(-0.055f, -0.055f, -0.055f));
  let x_831 : vec4<f32> = u_xlat1;
  u_xlat1 = vec4<f32>(x_830.x, x_830.y, x_830.z, x_831.w);
  let x_833 : vec3<f32> = u_xlat0;
  let x_834 : vec3<f32> = (x_833 * vec3<f32>(12.920000076f, 12.920000076f, 12.920000076f));
  let x_835 : vec4<f32> = u_xlat2;
  u_xlat2 = vec4<f32>(x_834.x, x_834.y, x_834.z, x_835.w);
  let x_837 : vec3<f32> = u_xlat0;
  let x_839 : vec4<bool> = (vec4<f32>(0.0031308f, 0.0031308f, 0.0031308f, 0.0f) >= vec4<f32>(x_837.x, x_837.y, x_837.z, x_837.x));
  u_xlatb0 = vec3<bool>(x_839.x, x_839.y, x_839.z);
  let x_842 : bool = u_xlatb0.x;
  if (x_842) {
    let x_847 : f32 = u_xlat2.x;
    x_843 = x_847;
  } else {
    let x_850 : f32 = u_xlat1.x;
    x_843 = x_850;
  }
  let x_851 : f32 = x_843;
  u_xlat0.x = x_851;
  let x_854 : bool = u_xlatb0.y;
  if (x_854) {
    let x_859 : f32 = u_xlat2.y;
    x_855 = x_859;
  } else {
    let x_862 : f32 = u_xlat1.y;
    x_855 = x_862;
  }
  let x_863 : f32 = x_855;
  u_xlat0.y = x_863;
  let x_866 : bool = u_xlatb0.z;
  if (x_866) {
    let x_871 : f32 = u_xlat2.z;
    x_867 = x_871;
  } else {
    let x_874 : f32 = u_xlat1.z;
    x_867 = x_874;
  }
  let x_875 : f32 = x_867;
  u_xlat0.z = x_875;
  let x_877 : vec2<f32> = vs_TEXCOORD0;
  let x_880 : vec4<f32> = x_26.x_Dithering_Params;
  let x_884 : vec4<f32> = x_26.x_Dithering_Params;
  let x_886 : vec2<f32> = ((x_877 * vec2<f32>(x_880.x, x_880.y)) + vec2<f32>(x_884.z, x_884.w));
  let x_887 : vec4<f32> = u_xlat1;
  u_xlat1 = vec4<f32>(x_886.x, x_886.y, x_887.z, x_887.w);
  let x_894 : vec4<f32> = u_xlat1;
  let x_897 : f32 = x_26.x_GlobalMipBias.x;
  let x_898 : vec4<f32> = textureSampleBias(x_BlueNoise_Texture, sampler_PointRepeat, vec2<f32>(x_894.x, x_894.y), x_897);
  u_xlat30 = x_898.w;
  let x_900 : f32 = u_xlat30;
  u_xlat30 = ((x_900 * 2.0f) + -1.0f);
  let x_903 : f32 = u_xlat30;
  u_xlat1.x = (-(abs(x_903)) + 1.0f);
  let x_909 : f32 = u_xlat30;
  u_xlatb30 = (x_909 >= 0.0f);
  let x_911 : bool = u_xlatb30;
  u_xlat30 = select(-1.0f, 1.0f, x_911);
  let x_914 : f32 = u_xlat1.x;
  u_xlat1.x = sqrt(x_914);
  let x_918 : f32 = u_xlat1.x;
  u_xlat1.x = (-(x_918) + 1.0f);
  let x_922 : f32 = u_xlat30;
  let x_924 : f32 = u_xlat1.x;
  u_xlat30 = (x_922 * x_924);
  let x_926 : f32 = u_xlat30;
  let x_931 : vec3<f32> = u_xlat0;
  u_xlat0 = ((vec3<f32>(x_926, x_926, x_926) * vec3<f32>(0.003921569f, 0.003921569f, 0.003921569f)) + x_931);
  let x_933 : vec3<f32> = u_xlat0;
  let x_936 : vec3<f32> = (x_933 + vec3<f32>(0.055f, 0.055f, 0.055f));
  let x_937 : vec4<f32> = u_xlat1;
  u_xlat1 = vec4<f32>(x_936.x, x_936.y, x_936.z, x_937.w);
  let x_939 : vec4<f32> = u_xlat1;
  let x_943 : vec3<f32> = (vec3<f32>(x_939.x, x_939.y, x_939.z) * vec3<f32>(0.947867334f, 0.947867334f, 0.947867334f));
  let x_944 : vec4<f32> = u_xlat1;
  u_xlat1 = vec4<f32>(x_943.x, x_943.y, x_943.z, x_944.w);
  let x_946 : vec4<f32> = u_xlat1;
  let x_949 : vec3<f32> = log2(abs(vec3<f32>(x_946.x, x_946.y, x_946.z)));
  let x_950 : vec4<f32> = u_xlat1;
  u_xlat1 = vec4<f32>(x_949.x, x_949.y, x_949.z, x_950.w);
  let x_952 : vec4<f32> = u_xlat1;
  let x_956 : vec3<f32> = (vec3<f32>(x_952.x, x_952.y, x_952.z) * vec3<f32>(2.400000095f, 2.400000095f, 2.400000095f));
  let x_957 : vec4<f32> = u_xlat1;
  u_xlat1 = vec4<f32>(x_956.x, x_956.y, x_956.z, x_957.w);
  let x_959 : vec4<f32> = u_xlat1;
  let x_961 : vec3<f32> = exp2(vec3<f32>(x_959.x, x_959.y, x_959.z));
  let x_962 : vec4<f32> = u_xlat1;
  u_xlat1 = vec4<f32>(x_961.x, x_961.y, x_961.z, x_962.w);
  let x_964 : vec3<f32> = u_xlat0;
  let x_967 : vec3<f32> = (x_964 * vec3<f32>(0.077399381f, 0.077399381f, 0.077399381f));
  let x_968 : vec4<f32> = u_xlat2;
  u_xlat2 = vec4<f32>(x_967.x, x_967.y, x_967.z, x_968.w);
  let x_972 : vec3<f32> = u_xlat0;
  let x_974 : vec4<bool> = (vec4<f32>(0.040449999f, 0.040449999f, 0.040449999f, 0.0f) >= vec4<f32>(x_972.x, x_972.y, x_972.z, x_972.x));
  u_xlatb0 = vec3<bool>(x_974.x, x_974.y, x_974.z);
  let x_979 : bool = u_xlatb0.x;
  if (x_979) {
    let x_984 : f32 = u_xlat2.x;
    x_980 = x_984;
  } else {
    let x_987 : f32 = u_xlat1.x;
    x_980 = x_987;
  }
  let x_988 : f32 = x_980;
  SV_Target0.x = x_988;
  let x_992 : bool = u_xlatb0.y;
  if (x_992) {
    let x_997 : f32 = u_xlat2.y;
    x_993 = x_997;
  } else {
    let x_1000 : f32 = u_xlat1.y;
    x_993 = x_1000;
  }
  let x_1001 : f32 = x_993;
  SV_Target0.y = x_1001;
  let x_1004 : bool = u_xlatb0.z;
  if (x_1004) {
    let x_1009 : f32 = u_xlat2.z;
    x_1005 = x_1009;
  } else {
    let x_1012 : f32 = u_xlat1.z;
    x_1005 = x_1012;
  }
  let x_1013 : f32 = x_1005;
  SV_Target0.z = x_1013;
  SV_Target0.w = 1.0f;
  return;
}

struct main_out {
  @location(0)
  SV_Target0_1 : vec4<f32>,
}

@fragment
fn main(@location(0) vs_TEXCOORD0_param : vec2<f32>, @builtin(position) gl_FragCoord_param : vec4<f32>) -> main_out {
  vs_TEXCOORD0 = vs_TEXCOORD0_param;
  gl_FragCoord = gl_FragCoord_param;
  main_1();
  return main_out(SV_Target0);
}

