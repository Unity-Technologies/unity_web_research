type Arr = array<vec4<f32>, 2u>;

struct UnityPerDraw {
  unity_ObjectToWorld : mat4x4<f32>,
  unity_WorldToObject : mat4x4<f32>,
  unity_LODFade : vec4<f32>,
  unity_WorldTransformParams : vec4<f32>,
  unity_RenderingLayer : vec4<f32>,
  unity_LightData : vec4<f32>,
  unity_LightIndices : Arr,
  unity_ProbesOcclusion : vec4<f32>,
  unity_SpecCube0_HDR : vec4<f32>,
  unity_SpecCube1_HDR : vec4<f32>,
  unity_SpecCube0_BoxMax : vec4<f32>,
  unity_SpecCube0_BoxMin : vec4<f32>,
  unity_SpecCube0_ProbePosition : vec4<f32>,
  unity_SpecCube1_BoxMax : vec4<f32>,
  unity_SpecCube1_BoxMin : vec4<f32>,
  unity_SpecCube1_ProbePosition : vec4<f32>,
  unity_LightmapST : vec4<f32>,
  unity_DynamicLightmapST : vec4<f32>,
  unity_SHAr : vec4<f32>,
  unity_SHAg : vec4<f32>,
  unity_SHAb : vec4<f32>,
  unity_SHBr : vec4<f32>,
  unity_SHBg : vec4<f32>,
  unity_SHBb : vec4<f32>,
  unity_SHC : vec4<f32>,
  unity_RendererBounds_Min : vec4<f32>,
  unity_RendererBounds_Max : vec4<f32>,
  unity_MatrixPreviousM : mat4x4<f32>,
  unity_MatrixPreviousMI : mat4x4<f32>,
  unity_MotionVectorsParams : vec4<f32>,
  unity_SpriteColor : vec4<f32>,
  unity_SpriteProps : vec4<f32>,
}

struct PGlobals {
  x_ScaledScreenParams : vec4<f32>,
  x_GlobalMipBias : vec2<f32>,
  x_AlphaToMaskAvailable : f32,
  @size(4)
  padding : u32,
  x_MainLightPosition : vec4<f32>,
  x_MainLightColor : vec4<f32>,
  x_AmbientOcclusionParam : vec4<f32>,
  x_AdditionalLightsCount : vec4<f32>,
  x_WorldSpaceCameraPos : vec3<f32>,
  @size(4)
  padding_1 : u32,
  x_ScreenParams : vec4<f32>,
  unity_OrthoParams : vec4<f32>,
  x_ScaleBiasRt : vec4<f32>,
  unity_MatrixV : mat4x4<f32>,
}

struct UnityPerMaterial {
  Texture2D_B222E8F_TexelSize : vec4<f32>,
  Color_C30C7CA3 : vec4<f32>,
  Texture2D_D9BFD5F1_TexelSize : vec4<f32>,
}

type Arr_1 = array<mat4x4<f32>, 5u>;

struct MainLightShadows {
  x_MainLightWorldToShadow : Arr_1,
  x_CascadeShadowSplitSpheres0 : vec4<f32>,
  x_CascadeShadowSplitSpheres1 : vec4<f32>,
  x_CascadeShadowSplitSpheres2 : vec4<f32>,
  x_CascadeShadowSplitSpheres3 : vec4<f32>,
  x_CascadeShadowSplitSphereRadii : vec4<f32>,
  x_MainLightShadowOffset0 : vec4<f32>,
  x_MainLightShadowOffset1 : vec4<f32>,
  x_MainLightShadowParams : vec4<f32>,
  x_MainLightShadowmapSize : vec4<f32>,
}

struct strided_arr {
  @size(16)
  el : f32,
}

type Arr_2 = array<strided_arr, 8u>;

struct LightCookies {
  x_MainLightWorldToLight : mat4x4<f32>,
  x_AdditionalLightsCookieEnableBits : Arr_2,
  x_MainLightCookieTextureFormat : f32,
  x_AdditionalLightsCookieAtlasTextureFormat : f32,
}

type Arr_3 = array<vec4<f32>, 256u>;

type Arr_4 = array<vec4<f32>, 256u>;

type Arr_5 = array<vec4<f32>, 256u>;

type Arr_6 = array<vec4<f32>, 256u>;

type Arr_7 = array<vec4<f32>, 256u>;

struct strided_arr_1 {
  @size(16)
  el : f32,
}

type Arr_8 = array<strided_arr_1, 256u>;

type Arr_9 = array<vec4<f32>, 256u>;

type Arr_10 = array<strided_arr_1, 256u>;

struct AdditionalLights {
  x_AdditionalLightsPosition : Arr_9,
  x_AdditionalLightsColor : Arr_9,
  x_AdditionalLightsAttenuation : Arr_9,
  x_AdditionalLightsSpotDir : Arr_9,
  x_AdditionalLightsOcclusionProbes : Arr_9,
  x_AdditionalLightsLayerMasks : Arr_10,
}

type Arr_11 = array<mat4x4<f32>, 256u>;

struct AdditionalLightsCookies {
  x_AdditionalLightsWorldToLights : Arr_11,
  x_AdditionalLightsCookieAtlasUVRects : Arr_9,
  x_AdditionalLightsLightTypes : Arr_10,
}

var<private> gl_FragCoord : vec4<f32>;

var<private> vs_INTERP1 : vec3<f32>;

var<private> vs_INTERP2 : vec4<f32>;

@group(1) @binding(2) var<uniform> x_95 : UnityPerDraw;

@group(1) @binding(0) var<uniform> x_160 : PGlobals;

var<private> vs_INTERP0 : vec3<f32>;

@group(0) @binding(5) var Texture2D_B222E8F : texture_2d<f32>;

@group(0) @binding(12) var samplerTexture2D_B222E8F : sampler;

var<private> vs_INTERP3 : vec4<f32>;

@group(1) @binding(6) var<uniform> x_299 : UnityPerMaterial;

@group(0) @binding(6) var Texture2D_D9BFD5F1 : texture_2d<f32>;

@group(0) @binding(13) var samplerTexture2D_D9BFD5F1 : sampler;

var<private> vs_INTERP4 : vec4<f32>;

@group(1) @binding(3) var<uniform> x_401 : MainLightShadows;

@group(0) @binding(2) var x_MainLightShadowmapTexture : texture_depth_2d;

@group(0) @binding(9) var sampler_MainLightShadowmapTexture : sampler_comparison;

@group(0) @binding(1) var x_ScreenSpaceOcclusionTexture : texture_2d<f32>;

@group(0) @binding(8) var sampler_ScreenSpaceOcclusionTexture : sampler;

@group(1) @binding(4) var<uniform> x_3536 : LightCookies;

@group(0) @binding(3) var x_MainLightCookieTexture : texture_2d<f32>;

@group(0) @binding(10) var sampler_MainLightCookieTexture : sampler;

@group(0) @binding(0) var unity_SpecCube0 : texture_cube<f32>;

@group(0) @binding(7) var samplerunity_SpecCube0 : sampler;

@group(1) @binding(1) var<uniform> x_4015 : AdditionalLights;

@group(1) @binding(5) var<uniform> x_4124 : AdditionalLightsCookies;

@group(0) @binding(4) var x_AdditionalLightsCookieAtlasTexture : texture_2d<f32>;

@group(0) @binding(11) var sampler_AdditionalLightsCookieAtlasTexture : sampler;

var<private> SV_Target0 : vec4<f32>;

fn int_bitfieldInsert_i1_i1_i1_i1_(base : ptr<function, i32>, insert : ptr<function, i32>, offset_1 : ptr<function, i32>, bits : ptr<function, i32>) -> i32 {
  var mask : u32;
  let x_19 : i32 = *(bits);
  let x_23 : i32 = *(offset_1);
  mask = (~((4294967295u << bitcast<u32>(x_19))) << bitcast<u32>(x_23));
  let x_26 : i32 = *(base);
  let x_28 : u32 = mask;
  let x_31 : i32 = *(insert);
  let x_33 : i32 = *(offset_1);
  let x_36 : u32 = mask;
  return bitcast<i32>(((bitcast<u32>(x_26) & ~(x_28)) | ((bitcast<u32>(x_31) << bitcast<u32>(x_33)) & x_36)));
}

fn main_1() {
  var hlslcc_FragCoord : vec4<f32>;
  var u_xlat0 : vec3<f32>;
  var u_xlatb22 : vec2<bool>;
  var u_xlat22 : vec3<f32>;
  var u_xlat1 : vec3<f32>;
  var u_xlat2 : vec4<f32>;
  var u_xlat3 : vec4<f32>;
  var u_xlatb0 : bool;
  var u_xlat4 : vec4<f32>;
  var u_xlat67 : f32;
  var u_xlat5 : vec3<f32>;
  var x_193 : f32;
  var x_206 : f32;
  var x_218 : f32;
  var u_xlat6 : vec4<f32>;
  var u_xlat7 : vec3<f32>;
  var u_xlat8 : vec4<f32>;
  var u_xlat9 : vec4<f32>;
  var u_xlat30 : vec3<f32>;
  var u_xlat10 : vec4<f32>;
  var u_xlatb2 : vec4<bool>;
  var u_xlatu0 : u32;
  var u_xlati0 : i32;
  var u_xlatb67 : bool;
  var txVec0 : vec3<f32>;
  var txVec1 : vec3<f32>;
  var txVec2 : vec3<f32>;
  var txVec3 : vec3<f32>;
  var u_xlatb68 : bool;
  var u_xlat47 : vec2<f32>;
  var u_xlat54 : vec2<f32>;
  var u_xlat11 : vec4<f32>;
  var u_xlat12 : vec4<f32>;
  var u_xlat13 : vec4<f32>;
  var u_xlat14 : vec4<f32>;
  var u_xlat15 : vec4<f32>;
  var u_xlat16 : vec4<f32>;
  var u_xlat68 : f32;
  var txVec4 : vec3<f32>;
  var txVec5 : vec3<f32>;
  var u_xlat25 : f32;
  var txVec6 : vec3<f32>;
  var txVec7 : vec3<f32>;
  var txVec8 : vec3<f32>;
  var txVec9 : vec3<f32>;
  var txVec10 : vec3<f32>;
  var txVec11 : vec3<f32>;
  var txVec12 : vec3<f32>;
  var u_xlat31 : vec3<f32>;
  var u_xlat17 : vec4<f32>;
  var u_xlat18 : vec4<f32>;
  var u_xlat32 : vec2<f32>;
  var u_xlat60 : vec2<f32>;
  var u_xlat55 : vec2<f32>;
  var u_xlat19 : vec4<f32>;
  var u_xlat20 : vec4<f32>;
  var u_xlat21 : vec4<f32>;
  var txVec13 : vec3<f32>;
  var txVec14 : vec3<f32>;
  var u_xlat70 : f32;
  var txVec15 : vec3<f32>;
  var txVec16 : vec3<f32>;
  var txVec17 : vec3<f32>;
  var txVec18 : vec3<f32>;
  var txVec19 : vec3<f32>;
  var txVec20 : vec3<f32>;
  var txVec21 : vec3<f32>;
  var txVec22 : vec3<f32>;
  var txVec23 : vec3<f32>;
  var txVec24 : vec3<f32>;
  var txVec25 : vec3<f32>;
  var txVec26 : vec3<f32>;
  var txVec27 : vec3<f32>;
  var txVec28 : vec3<f32>;
  var txVec29 : vec3<f32>;
  var u_xlatb3 : bool;
  var u_xlatb25 : bool;
  var u_xlat23 : vec3<f32>;
  var x_1898 : f32;
  var u_xlatu4 : vec3<u32>;
  var u_xlatu47 : u32;
  var u_xlatu69 : u32;
  var u_xlati47 : i32;
  var param : i32;
  var param_1 : i32;
  var param_2 : i32;
  var param_3 : i32;
  var u_xlat69 : f32;
  var x_2023 : f32;
  var u_xlatb47 : vec2<bool>;
  var x_2079 : f32;
  var u_xlat71 : f32;
  var u_xlat28 : f32;
  var u_xlat50 : f32;
  var txVec30 : vec3<f32>;
  var txVec31 : vec3<f32>;
  var txVec32 : vec3<f32>;
  var txVec33 : vec3<f32>;
  var u_xlatb72 : bool;
  var u_xlat52 : vec2<f32>;
  var u_xlat72 : f32;
  var txVec34 : vec3<f32>;
  var u_xlat73 : f32;
  var txVec35 : vec3<f32>;
  var txVec36 : vec3<f32>;
  var txVec37 : vec3<f32>;
  var txVec38 : vec3<f32>;
  var txVec39 : vec3<f32>;
  var txVec40 : vec3<f32>;
  var txVec41 : vec3<f32>;
  var txVec42 : vec3<f32>;
  var txVec43 : vec3<f32>;
  var txVec44 : vec3<f32>;
  var txVec45 : vec3<f32>;
  var txVec46 : vec3<f32>;
  var txVec47 : vec3<f32>;
  var txVec48 : vec3<f32>;
  var txVec49 : vec3<f32>;
  var txVec50 : vec3<f32>;
  var txVec51 : vec3<f32>;
  var txVec52 : vec3<f32>;
  var txVec53 : vec3<f32>;
  var txVec54 : vec3<f32>;
  var txVec55 : vec3<f32>;
  var txVec56 : vec3<f32>;
  var txVec57 : vec3<f32>;
  var txVec58 : vec3<f32>;
  var txVec59 : vec3<f32>;
  var x_3485 : f32;
  var u_xlat24 : f32;
  var u_xlatb8 : vec2<bool>;
  var x_3619 : f32;
  var x_3630 : vec3<f32>;
  var u_xlatu_loop_1 : u32;
  var u_xlatu71 : u32;
  var u_xlati72 : i32;
  var indexable : array<vec4<u32>, 4u>;
  var u_xlat74 : f32;
  var u_xlatu74 : u32;
  var u_xlati75 : i32;
  var u_xlati74 : i32;
  var u_xlati76 : i32;
  var u_xlatb74 : bool;
  var u_xlatb55 : vec2<bool>;
  var x_4416 : f32;
  var x_4429 : f32;
  var x_4481 : f32;
  var x_4492 : vec3<f32>;
  var u_xlat_precise_vec4 : vec4<f32>;
  var u_xlat_precise_ivec4 : vec4<i32>;
  var u_xlat_precise_bvec4 : vec4<bool>;
  var u_xlat_precise_uvec4 : vec4<u32>;
  let x_49 : vec4<f32> = gl_FragCoord;
  let x_50 : vec3<f32> = vec3<f32>(x_49.x, x_49.y, x_49.z);
  let x_55 : f32 = gl_FragCoord.w;
  hlslcc_FragCoord = vec4<f32>(x_50.x, x_50.y, x_50.z, (1.0f / x_55));
  let x_65 : vec3<f32> = vs_INTERP1;
  let x_66 : vec3<f32> = vs_INTERP1;
  u_xlat0.x = dot(x_65, x_66);
  let x_72 : f32 = u_xlat0.x;
  u_xlat0.x = sqrt(x_72);
  let x_76 : f32 = u_xlat0.x;
  u_xlat0.x = (1.0f / x_76);
  let x_86 : f32 = vs_INTERP2.w;
  u_xlatb22.x = (0.0f < x_86);
  let x_99 : f32 = x_95.unity_WorldTransformParams.w;
  u_xlatb22.y = (x_99 >= 0.0f);
  let x_105 : bool = u_xlatb22.x;
  u_xlat22.x = select(-1.0f, 1.0f, x_105);
  let x_110 : bool = u_xlatb22.y;
  u_xlat22.y = select(-1.0f, 1.0f, x_110);
  let x_114 : f32 = u_xlat22.y;
  let x_116 : f32 = u_xlat22.x;
  u_xlat22.x = (x_114 * x_116);
  let x_120 : vec3<f32> = vs_INTERP1;
  let x_122 : vec4<f32> = vs_INTERP2;
  u_xlat1 = (vec3<f32>(x_120.z, x_120.x, x_120.y) * vec3<f32>(x_122.y, x_122.z, x_122.x));
  let x_125 : vec3<f32> = vs_INTERP1;
  let x_127 : vec4<f32> = vs_INTERP2;
  let x_130 : vec3<f32> = u_xlat1;
  u_xlat1 = ((vec3<f32>(x_125.y, x_125.z, x_125.x) * vec3<f32>(x_127.z, x_127.x, x_127.y)) + -(x_130));
  let x_133 : vec3<f32> = u_xlat22;
  let x_135 : vec3<f32> = u_xlat1;
  u_xlat22 = (vec3<f32>(x_133.x, x_133.x, x_133.x) * x_135);
  let x_137 : vec3<f32> = u_xlat0;
  let x_139 : vec3<f32> = vs_INTERP1;
  u_xlat1 = (vec3<f32>(x_137.x, x_137.x, x_137.x) * x_139);
  let x_142 : vec3<f32> = u_xlat0;
  let x_144 : vec4<f32> = vs_INTERP2;
  let x_146 : vec3<f32> = (vec3<f32>(x_142.x, x_142.x, x_142.x) * vec3<f32>(x_144.x, x_144.y, x_144.z));
  let x_147 : vec4<f32> = u_xlat2;
  u_xlat2 = vec4<f32>(x_146.x, x_146.y, x_146.z, x_147.w);
  let x_150 : vec3<f32> = u_xlat22;
  let x_151 : vec3<f32> = u_xlat0;
  let x_153 : vec3<f32> = (x_150 * vec3<f32>(x_151.x, x_151.x, x_151.x));
  let x_154 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_153.x, x_153.y, x_153.z, x_154.w);
  let x_163 : f32 = x_160.unity_OrthoParams.w;
  u_xlatb0 = (x_163 == 0.0f);
  let x_167 : vec3<f32> = vs_INTERP0;
  let x_172 : vec3<f32> = x_160.x_WorldSpaceCameraPos;
  let x_173 : vec3<f32> = (-(x_167) + x_172);
  let x_174 : vec4<f32> = u_xlat4;
  u_xlat4 = vec4<f32>(x_173.x, x_173.y, x_173.z, x_174.w);
  let x_177 : vec4<f32> = u_xlat4;
  let x_179 : vec4<f32> = u_xlat4;
  u_xlat67 = dot(vec3<f32>(x_177.x, x_177.y, x_177.z), vec3<f32>(x_179.x, x_179.y, x_179.z));
  let x_182 : f32 = u_xlat67;
  u_xlat67 = inverseSqrt(x_182);
  let x_184 : f32 = u_xlat67;
  let x_186 : vec4<f32> = u_xlat4;
  let x_188 : vec3<f32> = (vec3<f32>(x_184, x_184, x_184) * vec3<f32>(x_186.x, x_186.y, x_186.z));
  let x_189 : vec4<f32> = u_xlat4;
  u_xlat4 = vec4<f32>(x_188.x, x_188.y, x_188.z, x_189.w);
  let x_192 : bool = u_xlatb0;
  if (x_192) {
    let x_197 : f32 = u_xlat4.x;
    x_193 = x_197;
  } else {
    let x_202 : f32 = x_160.unity_MatrixV[0i].z;
    x_193 = x_202;
  }
  let x_203 : f32 = x_193;
  u_xlat5.x = x_203;
  let x_205 : bool = u_xlatb0;
  if (x_205) {
    let x_210 : f32 = u_xlat4.y;
    x_206 = x_210;
  } else {
    let x_214 : f32 = x_160.unity_MatrixV[1i].z;
    x_206 = x_214;
  }
  let x_215 : f32 = x_206;
  u_xlat5.y = x_215;
  let x_217 : bool = u_xlatb0;
  if (x_217) {
    let x_222 : f32 = u_xlat4.z;
    x_218 = x_222;
  } else {
    let x_226 : f32 = x_160.unity_MatrixV[2i].z;
    x_218 = x_226;
  }
  let x_227 : f32 = x_218;
  u_xlat5.z = x_227;
  let x_229 : vec3<f32> = u_xlat5;
  let x_233 : vec4<f32> = x_95.unity_WorldToObject[1i];
  let x_235 : vec3<f32> = (vec3<f32>(x_229.y, x_229.y, x_229.y) * vec3<f32>(x_233.x, x_233.y, x_233.z));
  let x_236 : vec4<f32> = u_xlat4;
  u_xlat4 = vec4<f32>(x_235.x, x_235.y, x_235.z, x_236.w);
  let x_239 : vec4<f32> = x_95.unity_WorldToObject[0i];
  let x_241 : vec3<f32> = u_xlat5;
  let x_244 : vec4<f32> = u_xlat4;
  let x_246 : vec3<f32> = ((vec3<f32>(x_239.x, x_239.y, x_239.z) * vec3<f32>(x_241.x, x_241.x, x_241.x)) + vec3<f32>(x_244.x, x_244.y, x_244.z));
  let x_247 : vec4<f32> = u_xlat4;
  u_xlat4 = vec4<f32>(x_246.x, x_246.y, x_246.z, x_247.w);
  let x_250 : vec4<f32> = x_95.unity_WorldToObject[2i];
  let x_252 : vec3<f32> = u_xlat5;
  let x_255 : vec4<f32> = u_xlat4;
  let x_257 : vec3<f32> = ((vec3<f32>(x_250.x, x_250.y, x_250.z) * vec3<f32>(x_252.z, x_252.z, x_252.z)) + vec3<f32>(x_255.x, x_255.y, x_255.z));
  let x_258 : vec4<f32> = u_xlat4;
  u_xlat4 = vec4<f32>(x_257.x, x_257.y, x_257.z, x_258.w);
  let x_260 : vec4<f32> = u_xlat4;
  let x_262 : vec4<f32> = u_xlat4;
  u_xlat0.x = dot(vec3<f32>(x_260.x, x_260.y, x_260.z), vec3<f32>(x_262.x, x_262.y, x_262.z));
  let x_267 : f32 = u_xlat0.x;
  u_xlat0.x = inverseSqrt(x_267);
  let x_270 : vec3<f32> = u_xlat0;
  let x_272 : vec4<f32> = u_xlat4;
  let x_274 : vec3<f32> = (vec3<f32>(x_270.x, x_270.x, x_270.x) * vec3<f32>(x_272.x, x_272.y, x_272.z));
  let x_275 : vec4<f32> = u_xlat4;
  u_xlat4 = vec4<f32>(x_274.x, x_274.y, x_274.z, x_275.w);
  let x_289 : vec4<f32> = vs_INTERP3;
  let x_292 : f32 = x_160.x_GlobalMipBias.x;
  let x_293 : vec4<f32> = textureSampleBias(Texture2D_B222E8F, samplerTexture2D_B222E8F, vec2<f32>(x_289.x, x_289.y), x_292);
  u_xlat6 = x_293;
  let x_295 : vec4<f32> = u_xlat6;
  let x_301 : vec4<f32> = x_299.Color_C30C7CA3;
  u_xlat7 = (vec3<f32>(x_295.x, x_295.y, x_295.z) * vec3<f32>(x_301.x, x_301.y, x_301.z));
  let x_310 : vec4<f32> = vs_INTERP3;
  let x_313 : f32 = x_160.x_GlobalMipBias.x;
  let x_314 : vec4<f32> = textureSampleBias(Texture2D_D9BFD5F1, samplerTexture2D_D9BFD5F1, vec2<f32>(x_310.x, x_310.y), x_313);
  u_xlat8 = vec4<f32>(x_314.w, x_314.x, x_314.y, x_314.z);
  let x_317 : vec4<f32> = u_xlat8;
  u_xlat9 = ((vec4<f32>(x_317.y, x_317.z, x_317.w, x_317.x) * vec4<f32>(2.0f, 2.0f, 2.0f, 2.0f)) + vec4<f32>(-1.0f, -1.0f, -1.0f, -1.0f));
  let x_324 : vec4<f32> = u_xlat9;
  let x_325 : vec4<f32> = u_xlat9;
  u_xlat0.x = dot(x_324, x_325);
  let x_329 : f32 = u_xlat0.x;
  u_xlat0.x = inverseSqrt(x_329);
  let x_333 : vec3<f32> = u_xlat0;
  let x_335 : vec4<f32> = u_xlat9;
  u_xlat30 = (vec3<f32>(x_333.x, x_333.x, x_333.x) * vec3<f32>(x_335.x, x_335.y, x_335.z));
  let x_340 : f32 = vs_INTERP4.y;
  u_xlat0.x = (x_340 * 200.0f);
  let x_345 : f32 = u_xlat0.x;
  u_xlat0.x = min(x_345, 1.0f);
  let x_348 : vec3<f32> = u_xlat0;
  let x_350 : vec4<f32> = u_xlat6;
  let x_352 : vec3<f32> = (vec3<f32>(x_348.x, x_348.x, x_348.x) * vec3<f32>(x_350.x, x_350.y, x_350.z));
  let x_353 : vec4<f32> = u_xlat6;
  u_xlat6 = vec4<f32>(x_352.x, x_352.y, x_352.z, x_353.w);
  let x_355 : vec4<f32> = u_xlat3;
  let x_357 : vec3<f32> = u_xlat30;
  let x_359 : vec3<f32> = (vec3<f32>(x_355.x, x_355.y, x_355.z) * vec3<f32>(x_357.y, x_357.y, x_357.y));
  let x_360 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_359.x, x_359.y, x_359.z, x_360.w);
  let x_362 : vec3<f32> = u_xlat30;
  let x_364 : vec4<f32> = u_xlat2;
  let x_367 : vec4<f32> = u_xlat3;
  let x_369 : vec3<f32> = ((vec3<f32>(x_362.x, x_362.x, x_362.x) * vec3<f32>(x_364.x, x_364.y, x_364.z)) + vec3<f32>(x_367.x, x_367.y, x_367.z));
  let x_370 : vec4<f32> = u_xlat2;
  u_xlat2 = vec4<f32>(x_369.x, x_369.y, x_369.z, x_370.w);
  let x_372 : vec3<f32> = u_xlat30;
  let x_374 : vec3<f32> = u_xlat1;
  let x_376 : vec4<f32> = u_xlat2;
  u_xlat1 = ((vec3<f32>(x_372.z, x_372.z, x_372.z) * x_374) + vec3<f32>(x_376.x, x_376.y, x_376.z));
  let x_379 : vec3<f32> = u_xlat1;
  let x_380 : vec3<f32> = u_xlat1;
  u_xlat0.x = dot(x_379, x_380);
  let x_384 : f32 = u_xlat0.x;
  u_xlat0.x = max(x_384, 1.17549435e-37f);
  let x_389 : f32 = u_xlat0.x;
  u_xlat0.x = inverseSqrt(x_389);
  let x_392 : vec3<f32> = u_xlat0;
  let x_394 : vec3<f32> = u_xlat1;
  u_xlat1 = (vec3<f32>(x_392.x, x_392.x, x_392.x) * x_394);
  let x_396 : vec3<f32> = vs_INTERP0;
  let x_403 : vec4<f32> = x_401.x_CascadeShadowSplitSpheres0;
  let x_406 : vec3<f32> = (x_396 + -(vec3<f32>(x_403.x, x_403.y, x_403.z)));
  let x_407 : vec4<f32> = u_xlat2;
  u_xlat2 = vec4<f32>(x_406.x, x_406.y, x_406.z, x_407.w);
  let x_409 : vec3<f32> = vs_INTERP0;
  let x_411 : vec4<f32> = x_401.x_CascadeShadowSplitSpheres1;
  let x_414 : vec3<f32> = (x_409 + -(vec3<f32>(x_411.x, x_411.y, x_411.z)));
  let x_415 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_414.x, x_414.y, x_414.z, x_415.w);
  let x_417 : vec3<f32> = vs_INTERP0;
  let x_419 : vec4<f32> = x_401.x_CascadeShadowSplitSpheres2;
  let x_422 : vec3<f32> = (x_417 + -(vec3<f32>(x_419.x, x_419.y, x_419.z)));
  let x_423 : vec4<f32> = u_xlat9;
  u_xlat9 = vec4<f32>(x_422.x, x_422.y, x_422.z, x_423.w);
  let x_426 : vec3<f32> = vs_INTERP0;
  let x_429 : vec4<f32> = x_401.x_CascadeShadowSplitSpheres3;
  let x_432 : vec3<f32> = (x_426 + -(vec3<f32>(x_429.x, x_429.y, x_429.z)));
  let x_433 : vec4<f32> = u_xlat10;
  u_xlat10 = vec4<f32>(x_432.x, x_432.y, x_432.z, x_433.w);
  let x_435 : vec4<f32> = u_xlat2;
  let x_437 : vec4<f32> = u_xlat2;
  u_xlat2.x = dot(vec3<f32>(x_435.x, x_435.y, x_435.z), vec3<f32>(x_437.x, x_437.y, x_437.z));
  let x_441 : vec4<f32> = u_xlat3;
  let x_443 : vec4<f32> = u_xlat3;
  u_xlat2.y = dot(vec3<f32>(x_441.x, x_441.y, x_441.z), vec3<f32>(x_443.x, x_443.y, x_443.z));
  let x_447 : vec4<f32> = u_xlat9;
  let x_449 : vec4<f32> = u_xlat9;
  u_xlat2.z = dot(vec3<f32>(x_447.x, x_447.y, x_447.z), vec3<f32>(x_449.x, x_449.y, x_449.z));
  let x_453 : vec4<f32> = u_xlat10;
  let x_455 : vec4<f32> = u_xlat10;
  u_xlat2.w = dot(vec3<f32>(x_453.x, x_453.y, x_453.z), vec3<f32>(x_455.x, x_455.y, x_455.z));
  let x_462 : vec4<f32> = u_xlat2;
  let x_465 : vec4<f32> = x_401.x_CascadeShadowSplitSphereRadii;
  u_xlatb2 = (x_462 < x_465);
  let x_468 : bool = u_xlatb2.x;
  u_xlat3.x = select(0.0f, 1.0f, x_468);
  let x_472 : bool = u_xlatb2.y;
  u_xlat3.y = select(0.0f, 1.0f, x_472);
  let x_476 : bool = u_xlatb2.z;
  u_xlat3.z = select(0.0f, 1.0f, x_476);
  let x_480 : bool = u_xlatb2.w;
  u_xlat3.w = select(0.0f, 1.0f, x_480);
  let x_484 : bool = u_xlatb2.x;
  u_xlat2.x = select(-0.0f, -1.0f, x_484);
  let x_489 : bool = u_xlatb2.y;
  u_xlat2.y = select(-0.0f, -1.0f, x_489);
  let x_493 : bool = u_xlatb2.z;
  u_xlat2.z = select(-0.0f, -1.0f, x_493);
  let x_496 : vec4<f32> = u_xlat2;
  let x_498 : vec4<f32> = u_xlat3;
  let x_500 : vec3<f32> = (vec3<f32>(x_496.x, x_496.y, x_496.z) + vec3<f32>(x_498.y, x_498.z, x_498.w));
  let x_501 : vec4<f32> = u_xlat2;
  u_xlat2 = vec4<f32>(x_500.x, x_500.y, x_500.z, x_501.w);
  let x_503 : vec4<f32> = u_xlat2;
  let x_506 : vec3<f32> = max(vec3<f32>(x_503.x, x_503.y, x_503.z), vec3<f32>(0.0f, 0.0f, 0.0f));
  let x_507 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_507.x, x_506.x, x_506.y, x_506.z);
  let x_509 : vec4<f32> = u_xlat3;
  u_xlat0.x = dot(x_509, vec4<f32>(4.0f, 3.0f, 2.0f, 1.0f));
  let x_516 : f32 = u_xlat0.x;
  u_xlat0.x = (-(x_516) + 4.0f);
  let x_522 : f32 = u_xlat0.x;
  u_xlatu0 = u32(x_522);
  let x_525 : u32 = u_xlatu0;
  u_xlati0 = (bitcast<i32>(x_525) << bitcast<u32>(2i));
  let x_528 : vec3<f32> = vs_INTERP0;
  let x_530 : i32 = u_xlati0;
  let x_533 : i32 = u_xlati0;
  let x_537 : vec4<f32> = x_401.x_MainLightWorldToShadow[((x_530 + 1i) / 4i)][((x_533 + 1i) % 4i)];
  let x_539 : vec3<f32> = (vec3<f32>(x_528.y, x_528.y, x_528.y) * vec3<f32>(x_537.x, x_537.y, x_537.z));
  let x_540 : vec4<f32> = u_xlat2;
  u_xlat2 = vec4<f32>(x_539.x, x_539.y, x_539.z, x_540.w);
  let x_542 : i32 = u_xlati0;
  let x_544 : i32 = u_xlati0;
  let x_547 : vec4<f32> = x_401.x_MainLightWorldToShadow[(x_542 / 4i)][(x_544 % 4i)];
  let x_549 : vec3<f32> = vs_INTERP0;
  let x_552 : vec4<f32> = u_xlat2;
  let x_554 : vec3<f32> = ((vec3<f32>(x_547.x, x_547.y, x_547.z) * vec3<f32>(x_549.x, x_549.x, x_549.x)) + vec3<f32>(x_552.x, x_552.y, x_552.z));
  let x_555 : vec4<f32> = u_xlat2;
  u_xlat2 = vec4<f32>(x_554.x, x_554.y, x_554.z, x_555.w);
  let x_557 : i32 = u_xlati0;
  let x_560 : i32 = u_xlati0;
  let x_564 : vec4<f32> = x_401.x_MainLightWorldToShadow[((x_557 + 2i) / 4i)][((x_560 + 2i) % 4i)];
  let x_566 : vec3<f32> = vs_INTERP0;
  let x_569 : vec4<f32> = u_xlat2;
  let x_571 : vec3<f32> = ((vec3<f32>(x_564.x, x_564.y, x_564.z) * vec3<f32>(x_566.z, x_566.z, x_566.z)) + vec3<f32>(x_569.x, x_569.y, x_569.z));
  let x_572 : vec4<f32> = u_xlat2;
  u_xlat2 = vec4<f32>(x_571.x, x_571.y, x_571.z, x_572.w);
  let x_574 : vec4<f32> = u_xlat2;
  let x_576 : i32 = u_xlati0;
  let x_579 : i32 = u_xlati0;
  let x_583 : vec4<f32> = x_401.x_MainLightWorldToShadow[((x_576 + 3i) / 4i)][((x_579 + 3i) % 4i)];
  let x_585 : vec3<f32> = (vec3<f32>(x_574.x, x_574.y, x_574.z) + vec3<f32>(x_583.x, x_583.y, x_583.z));
  let x_586 : vec4<f32> = u_xlat2;
  u_xlat2 = vec4<f32>(x_585.x, x_585.y, x_585.z, x_586.w);
  let x_590 : f32 = x_401.x_MainLightShadowParams.y;
  u_xlatb0 = (0.0f < x_590);
  let x_592 : bool = u_xlatb0;
  if (x_592) {
    let x_597 : f32 = x_401.x_MainLightShadowParams.y;
    u_xlatb67 = (x_597 == 1.0f);
    let x_599 : bool = u_xlatb67;
    if (x_599) {
      let x_602 : vec4<f32> = u_xlat2;
      let x_606 : vec4<f32> = x_401.x_MainLightShadowOffset0;
      u_xlat3 = (vec4<f32>(x_602.x, x_602.y, x_602.x, x_602.y) + x_606);
      let x_609 : vec4<f32> = u_xlat3;
      let x_610 : vec2<f32> = vec2<f32>(x_609.x, x_609.y);
      let x_612 : f32 = u_xlat2.z;
      txVec0 = vec3<f32>(x_610.x, x_610.y, x_612);
      let x_624 : vec3<f32> = txVec0;
      let x_626 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_624.xy, x_624.z);
      u_xlat9.x = x_626;
      let x_629 : vec4<f32> = u_xlat3;
      let x_630 : vec2<f32> = vec2<f32>(x_629.z, x_629.w);
      let x_632 : f32 = u_xlat2.z;
      txVec1 = vec3<f32>(x_630.x, x_630.y, x_632);
      let x_639 : vec3<f32> = txVec1;
      let x_641 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_639.xy, x_639.z);
      u_xlat9.y = x_641;
      let x_643 : vec4<f32> = u_xlat2;
      let x_646 : vec4<f32> = x_401.x_MainLightShadowOffset1;
      u_xlat3 = (vec4<f32>(x_643.x, x_643.y, x_643.x, x_643.y) + x_646);
      let x_649 : vec4<f32> = u_xlat3;
      let x_650 : vec2<f32> = vec2<f32>(x_649.x, x_649.y);
      let x_652 : f32 = u_xlat2.z;
      txVec2 = vec3<f32>(x_650.x, x_650.y, x_652);
      let x_659 : vec3<f32> = txVec2;
      let x_661 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_659.xy, x_659.z);
      u_xlat9.z = x_661;
      let x_664 : vec4<f32> = u_xlat3;
      let x_665 : vec2<f32> = vec2<f32>(x_664.z, x_664.w);
      let x_667 : f32 = u_xlat2.z;
      txVec3 = vec3<f32>(x_665.x, x_665.y, x_667);
      let x_674 : vec3<f32> = txVec3;
      let x_676 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_674.xy, x_674.z);
      u_xlat9.w = x_676;
      let x_678 : vec4<f32> = u_xlat9;
      u_xlat67 = dot(x_678, vec4<f32>(0.25f, 0.25f, 0.25f, 0.25f));
    } else {
      let x_685 : f32 = x_401.x_MainLightShadowParams.y;
      u_xlatb68 = (x_685 == 2.0f);
      let x_687 : bool = u_xlatb68;
      if (x_687) {
        let x_690 : vec4<f32> = u_xlat2;
        let x_693 : vec4<f32> = x_401.x_MainLightShadowmapSize;
        let x_698 : vec2<f32> = ((vec2<f32>(x_690.x, x_690.y) * vec2<f32>(x_693.z, x_693.w)) + vec2<f32>(0.5f, 0.5f));
        let x_699 : vec4<f32> = u_xlat3;
        u_xlat3 = vec4<f32>(x_698.x, x_698.y, x_699.z, x_699.w);
        let x_701 : vec4<f32> = u_xlat3;
        let x_703 : vec2<f32> = floor(vec2<f32>(x_701.x, x_701.y));
        let x_704 : vec4<f32> = u_xlat3;
        u_xlat3 = vec4<f32>(x_703.x, x_703.y, x_704.z, x_704.w);
        let x_708 : vec4<f32> = u_xlat2;
        let x_711 : vec4<f32> = x_401.x_MainLightShadowmapSize;
        let x_714 : vec4<f32> = u_xlat3;
        u_xlat47 = ((vec2<f32>(x_708.x, x_708.y) * vec2<f32>(x_711.z, x_711.w)) + -(vec2<f32>(x_714.x, x_714.y)));
        let x_718 : vec2<f32> = u_xlat47;
        u_xlat9 = (vec4<f32>(x_718.x, x_718.x, x_718.y, x_718.y) + vec4<f32>(0.5f, 1.0f, 0.5f, 1.0f));
        let x_722 : vec4<f32> = u_xlat9;
        let x_724 : vec4<f32> = u_xlat9;
        u_xlat10 = (vec4<f32>(x_722.x, x_722.x, x_722.z, x_722.z) * vec4<f32>(x_724.x, x_724.x, x_724.z, x_724.z));
        let x_727 : vec4<f32> = u_xlat10;
        let x_731 : vec2<f32> = (vec2<f32>(x_727.y, x_727.w) * vec2<f32>(0.079999998f, 0.079999998f));
        let x_732 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_731.x, x_732.y, x_731.y, x_732.w);
        let x_734 : vec4<f32> = u_xlat10;
        let x_737 : vec2<f32> = u_xlat47;
        let x_739 : vec2<f32> = ((vec2<f32>(x_734.x, x_734.z) * vec2<f32>(0.5f, 0.5f)) + -(x_737));
        let x_740 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_739.x, x_739.y, x_740.z, x_740.w);
        let x_743 : vec2<f32> = u_xlat47;
        u_xlat54 = (-(x_743) + vec2<f32>(1.0f, 1.0f));
        let x_748 : vec2<f32> = u_xlat47;
        let x_750 : vec2<f32> = min(x_748, vec2<f32>(0.0f, 0.0f));
        let x_751 : vec4<f32> = u_xlat11;
        u_xlat11 = vec4<f32>(x_750.x, x_750.y, x_751.z, x_751.w);
        let x_753 : vec4<f32> = u_xlat11;
        let x_756 : vec4<f32> = u_xlat11;
        let x_759 : vec2<f32> = u_xlat54;
        let x_760 : vec2<f32> = ((-(vec2<f32>(x_753.x, x_753.y)) * vec2<f32>(x_756.x, x_756.y)) + x_759);
        let x_761 : vec4<f32> = u_xlat11;
        u_xlat11 = vec4<f32>(x_760.x, x_760.y, x_761.z, x_761.w);
        let x_763 : vec2<f32> = u_xlat47;
        u_xlat47 = max(x_763, vec2<f32>(0.0f, 0.0f));
        let x_765 : vec2<f32> = u_xlat47;
        let x_767 : vec2<f32> = u_xlat47;
        let x_769 : vec4<f32> = u_xlat9;
        u_xlat47 = ((-(x_765) * x_767) + vec2<f32>(x_769.y, x_769.w));
        let x_772 : vec4<f32> = u_xlat11;
        let x_774 : vec2<f32> = (vec2<f32>(x_772.x, x_772.y) + vec2<f32>(1.0f, 1.0f));
        let x_775 : vec4<f32> = u_xlat11;
        u_xlat11 = vec4<f32>(x_774.x, x_774.y, x_775.z, x_775.w);
        let x_777 : vec2<f32> = u_xlat47;
        u_xlat47 = (x_777 + vec2<f32>(1.0f, 1.0f));
        let x_780 : vec4<f32> = u_xlat10;
        let x_784 : vec2<f32> = (vec2<f32>(x_780.x, x_780.y) * vec2<f32>(0.159999996f, 0.159999996f));
        let x_785 : vec4<f32> = u_xlat12;
        u_xlat12 = vec4<f32>(x_784.x, x_784.y, x_785.z, x_785.w);
        let x_787 : vec2<f32> = u_xlat54;
        let x_788 : vec2<f32> = (x_787 * vec2<f32>(0.159999996f, 0.159999996f));
        let x_789 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_788.x, x_788.y, x_789.z, x_789.w);
        let x_791 : vec4<f32> = u_xlat11;
        let x_793 : vec2<f32> = (vec2<f32>(x_791.x, x_791.y) * vec2<f32>(0.159999996f, 0.159999996f));
        let x_794 : vec4<f32> = u_xlat11;
        u_xlat11 = vec4<f32>(x_793.x, x_793.y, x_794.z, x_794.w);
        let x_797 : vec2<f32> = u_xlat47;
        let x_798 : vec2<f32> = (x_797 * vec2<f32>(0.159999996f, 0.159999996f));
        let x_799 : vec4<f32> = u_xlat13;
        u_xlat13 = vec4<f32>(x_798.x, x_798.y, x_799.z, x_799.w);
        let x_801 : vec4<f32> = u_xlat9;
        u_xlat47 = (vec2<f32>(x_801.y, x_801.w) * vec2<f32>(0.159999996f, 0.159999996f));
        let x_805 : f32 = u_xlat11.x;
        u_xlat12.z = x_805;
        let x_808 : f32 = u_xlat47.x;
        u_xlat12.w = x_808;
        let x_811 : f32 = u_xlat13.x;
        u_xlat10.z = x_811;
        let x_814 : f32 = u_xlat9.x;
        u_xlat10.w = x_814;
        let x_817 : vec4<f32> = u_xlat10;
        let x_819 : vec4<f32> = u_xlat12;
        u_xlat14 = (vec4<f32>(x_817.z, x_817.w, x_817.x, x_817.z) + vec4<f32>(x_819.z, x_819.w, x_819.x, x_819.z));
        let x_823 : f32 = u_xlat12.y;
        u_xlat11.z = x_823;
        let x_826 : f32 = u_xlat47.y;
        u_xlat11.w = x_826;
        let x_829 : f32 = u_xlat10.y;
        u_xlat13.z = x_829;
        let x_832 : f32 = u_xlat9.z;
        u_xlat13.w = x_832;
        let x_834 : vec4<f32> = u_xlat11;
        let x_836 : vec4<f32> = u_xlat13;
        let x_838 : vec3<f32> = (vec3<f32>(x_834.z, x_834.y, x_834.w) + vec3<f32>(x_836.z, x_836.y, x_836.w));
        let x_839 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_838.x, x_838.y, x_838.z, x_839.w);
        let x_841 : vec4<f32> = u_xlat10;
        let x_843 : vec4<f32> = u_xlat14;
        let x_845 : vec3<f32> = (vec3<f32>(x_841.x, x_841.z, x_841.w) / vec3<f32>(x_843.z, x_843.w, x_843.y));
        let x_846 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_845.x, x_845.y, x_845.z, x_846.w);
        let x_848 : vec4<f32> = u_xlat10;
        let x_854 : vec3<f32> = (vec3<f32>(x_848.x, x_848.y, x_848.z) + vec3<f32>(-2.5f, -0.5f, 1.5f));
        let x_855 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_854.x, x_854.y, x_854.z, x_855.w);
        let x_857 : vec4<f32> = u_xlat13;
        let x_859 : vec4<f32> = u_xlat9;
        let x_861 : vec3<f32> = (vec3<f32>(x_857.z, x_857.y, x_857.w) / vec3<f32>(x_859.x, x_859.y, x_859.z));
        let x_862 : vec4<f32> = u_xlat11;
        u_xlat11 = vec4<f32>(x_861.x, x_861.y, x_861.z, x_862.w);
        let x_864 : vec4<f32> = u_xlat11;
        let x_866 : vec3<f32> = (vec3<f32>(x_864.x, x_864.y, x_864.z) + vec3<f32>(-2.5f, -0.5f, 1.5f));
        let x_867 : vec4<f32> = u_xlat11;
        u_xlat11 = vec4<f32>(x_866.x, x_866.y, x_866.z, x_867.w);
        let x_869 : vec4<f32> = u_xlat10;
        let x_872 : vec4<f32> = x_401.x_MainLightShadowmapSize;
        let x_874 : vec3<f32> = (vec3<f32>(x_869.y, x_869.x, x_869.z) * vec3<f32>(x_872.x, x_872.x, x_872.x));
        let x_875 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_874.x, x_874.y, x_874.z, x_875.w);
        let x_877 : vec4<f32> = u_xlat11;
        let x_880 : vec4<f32> = x_401.x_MainLightShadowmapSize;
        let x_882 : vec3<f32> = (vec3<f32>(x_877.x, x_877.y, x_877.z) * vec3<f32>(x_880.y, x_880.y, x_880.y));
        let x_883 : vec4<f32> = u_xlat11;
        u_xlat11 = vec4<f32>(x_882.x, x_882.y, x_882.z, x_883.w);
        let x_886 : f32 = u_xlat11.x;
        u_xlat10.w = x_886;
        let x_888 : vec4<f32> = u_xlat3;
        let x_891 : vec4<f32> = x_401.x_MainLightShadowmapSize;
        let x_894 : vec4<f32> = u_xlat10;
        u_xlat12 = ((vec4<f32>(x_888.x, x_888.y, x_888.x, x_888.y) * vec4<f32>(x_891.x, x_891.y, x_891.x, x_891.y)) + vec4<f32>(x_894.y, x_894.w, x_894.x, x_894.w));
        let x_897 : vec4<f32> = u_xlat3;
        let x_900 : vec4<f32> = x_401.x_MainLightShadowmapSize;
        let x_903 : vec4<f32> = u_xlat10;
        u_xlat47 = ((vec2<f32>(x_897.x, x_897.y) * vec2<f32>(x_900.x, x_900.y)) + vec2<f32>(x_903.z, x_903.w));
        let x_907 : f32 = u_xlat10.y;
        u_xlat11.w = x_907;
        let x_909 : vec4<f32> = u_xlat11;
        let x_910 : vec2<f32> = vec2<f32>(x_909.y, x_909.z);
        let x_911 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_911.x, x_910.x, x_911.z, x_910.y);
        let x_913 : vec4<f32> = u_xlat3;
        let x_916 : vec4<f32> = x_401.x_MainLightShadowmapSize;
        let x_919 : vec4<f32> = u_xlat10;
        u_xlat13 = ((vec4<f32>(x_913.x, x_913.y, x_913.x, x_913.y) * vec4<f32>(x_916.x, x_916.y, x_916.x, x_916.y)) + vec4<f32>(x_919.x, x_919.y, x_919.z, x_919.y));
        let x_922 : vec4<f32> = u_xlat3;
        let x_925 : vec4<f32> = x_401.x_MainLightShadowmapSize;
        let x_928 : vec4<f32> = u_xlat11;
        u_xlat11 = ((vec4<f32>(x_922.x, x_922.y, x_922.x, x_922.y) * vec4<f32>(x_925.x, x_925.y, x_925.x, x_925.y)) + vec4<f32>(x_928.w, x_928.y, x_928.w, x_928.z));
        let x_931 : vec4<f32> = u_xlat3;
        let x_934 : vec4<f32> = x_401.x_MainLightShadowmapSize;
        let x_937 : vec4<f32> = u_xlat10;
        u_xlat10 = ((vec4<f32>(x_931.x, x_931.y, x_931.x, x_931.y) * vec4<f32>(x_934.x, x_934.y, x_934.x, x_934.y)) + vec4<f32>(x_937.x, x_937.w, x_937.z, x_937.w));
        let x_941 : vec4<f32> = u_xlat9;
        let x_943 : vec4<f32> = u_xlat14;
        u_xlat15 = (vec4<f32>(x_941.x, x_941.x, x_941.x, x_941.y) * vec4<f32>(x_943.z, x_943.w, x_943.y, x_943.z));
        let x_947 : vec4<f32> = u_xlat9;
        let x_949 : vec4<f32> = u_xlat14;
        u_xlat16 = (vec4<f32>(x_947.y, x_947.y, x_947.z, x_947.z) * x_949);
        let x_953 : f32 = u_xlat9.z;
        let x_955 : f32 = u_xlat14.y;
        u_xlat68 = (x_953 * x_955);
        let x_958 : vec4<f32> = u_xlat12;
        let x_959 : vec2<f32> = vec2<f32>(x_958.x, x_958.y);
        let x_961 : f32 = u_xlat2.z;
        txVec4 = vec3<f32>(x_959.x, x_959.y, x_961);
        let x_968 : vec3<f32> = txVec4;
        let x_970 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_968.xy, x_968.z);
        u_xlat3.x = x_970;
        let x_973 : vec4<f32> = u_xlat12;
        let x_974 : vec2<f32> = vec2<f32>(x_973.z, x_973.w);
        let x_976 : f32 = u_xlat2.z;
        txVec5 = vec3<f32>(x_974.x, x_974.y, x_976);
        let x_984 : vec3<f32> = txVec5;
        let x_986 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_984.xy, x_984.z);
        u_xlat25 = x_986;
        let x_987 : f32 = u_xlat25;
        let x_989 : f32 = u_xlat15.y;
        u_xlat25 = (x_987 * x_989);
        let x_992 : f32 = u_xlat15.x;
        let x_994 : f32 = u_xlat3.x;
        let x_996 : f32 = u_xlat25;
        u_xlat3.x = ((x_992 * x_994) + x_996);
        let x_1000 : vec2<f32> = u_xlat47;
        let x_1002 : f32 = u_xlat2.z;
        txVec6 = vec3<f32>(x_1000.x, x_1000.y, x_1002);
        let x_1009 : vec3<f32> = txVec6;
        let x_1011 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1009.xy, x_1009.z);
        u_xlat25 = x_1011;
        let x_1013 : f32 = u_xlat15.z;
        let x_1014 : f32 = u_xlat25;
        let x_1017 : f32 = u_xlat3.x;
        u_xlat3.x = ((x_1013 * x_1014) + x_1017);
        let x_1021 : vec4<f32> = u_xlat11;
        let x_1022 : vec2<f32> = vec2<f32>(x_1021.x, x_1021.y);
        let x_1024 : f32 = u_xlat2.z;
        txVec7 = vec3<f32>(x_1022.x, x_1022.y, x_1024);
        let x_1031 : vec3<f32> = txVec7;
        let x_1033 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1031.xy, x_1031.z);
        u_xlat25 = x_1033;
        let x_1035 : f32 = u_xlat15.w;
        let x_1036 : f32 = u_xlat25;
        let x_1039 : f32 = u_xlat3.x;
        u_xlat3.x = ((x_1035 * x_1036) + x_1039);
        let x_1043 : vec4<f32> = u_xlat13;
        let x_1044 : vec2<f32> = vec2<f32>(x_1043.x, x_1043.y);
        let x_1046 : f32 = u_xlat2.z;
        txVec8 = vec3<f32>(x_1044.x, x_1044.y, x_1046);
        let x_1053 : vec3<f32> = txVec8;
        let x_1055 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1053.xy, x_1053.z);
        u_xlat25 = x_1055;
        let x_1057 : f32 = u_xlat16.x;
        let x_1058 : f32 = u_xlat25;
        let x_1061 : f32 = u_xlat3.x;
        u_xlat3.x = ((x_1057 * x_1058) + x_1061);
        let x_1065 : vec4<f32> = u_xlat13;
        let x_1066 : vec2<f32> = vec2<f32>(x_1065.z, x_1065.w);
        let x_1068 : f32 = u_xlat2.z;
        txVec9 = vec3<f32>(x_1066.x, x_1066.y, x_1068);
        let x_1075 : vec3<f32> = txVec9;
        let x_1077 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1075.xy, x_1075.z);
        u_xlat25 = x_1077;
        let x_1079 : f32 = u_xlat16.y;
        let x_1080 : f32 = u_xlat25;
        let x_1083 : f32 = u_xlat3.x;
        u_xlat3.x = ((x_1079 * x_1080) + x_1083);
        let x_1087 : vec4<f32> = u_xlat11;
        let x_1088 : vec2<f32> = vec2<f32>(x_1087.z, x_1087.w);
        let x_1090 : f32 = u_xlat2.z;
        txVec10 = vec3<f32>(x_1088.x, x_1088.y, x_1090);
        let x_1097 : vec3<f32> = txVec10;
        let x_1099 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1097.xy, x_1097.z);
        u_xlat25 = x_1099;
        let x_1101 : f32 = u_xlat16.z;
        let x_1102 : f32 = u_xlat25;
        let x_1105 : f32 = u_xlat3.x;
        u_xlat3.x = ((x_1101 * x_1102) + x_1105);
        let x_1109 : vec4<f32> = u_xlat10;
        let x_1110 : vec2<f32> = vec2<f32>(x_1109.x, x_1109.y);
        let x_1112 : f32 = u_xlat2.z;
        txVec11 = vec3<f32>(x_1110.x, x_1110.y, x_1112);
        let x_1119 : vec3<f32> = txVec11;
        let x_1121 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1119.xy, x_1119.z);
        u_xlat25 = x_1121;
        let x_1123 : f32 = u_xlat16.w;
        let x_1124 : f32 = u_xlat25;
        let x_1127 : f32 = u_xlat3.x;
        u_xlat3.x = ((x_1123 * x_1124) + x_1127);
        let x_1131 : vec4<f32> = u_xlat10;
        let x_1132 : vec2<f32> = vec2<f32>(x_1131.z, x_1131.w);
        let x_1134 : f32 = u_xlat2.z;
        txVec12 = vec3<f32>(x_1132.x, x_1132.y, x_1134);
        let x_1141 : vec3<f32> = txVec12;
        let x_1143 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1141.xy, x_1141.z);
        u_xlat25 = x_1143;
        let x_1144 : f32 = u_xlat68;
        let x_1145 : f32 = u_xlat25;
        let x_1148 : f32 = u_xlat3.x;
        u_xlat67 = ((x_1144 * x_1145) + x_1148);
      } else {
        let x_1151 : vec4<f32> = u_xlat2;
        let x_1154 : vec4<f32> = x_401.x_MainLightShadowmapSize;
        let x_1157 : vec2<f32> = ((vec2<f32>(x_1151.x, x_1151.y) * vec2<f32>(x_1154.z, x_1154.w)) + vec2<f32>(0.5f, 0.5f));
        let x_1158 : vec4<f32> = u_xlat3;
        u_xlat3 = vec4<f32>(x_1157.x, x_1157.y, x_1158.z, x_1158.w);
        let x_1160 : vec4<f32> = u_xlat3;
        let x_1162 : vec2<f32> = floor(vec2<f32>(x_1160.x, x_1160.y));
        let x_1163 : vec4<f32> = u_xlat3;
        u_xlat3 = vec4<f32>(x_1162.x, x_1162.y, x_1163.z, x_1163.w);
        let x_1165 : vec4<f32> = u_xlat2;
        let x_1168 : vec4<f32> = x_401.x_MainLightShadowmapSize;
        let x_1171 : vec4<f32> = u_xlat3;
        u_xlat47 = ((vec2<f32>(x_1165.x, x_1165.y) * vec2<f32>(x_1168.z, x_1168.w)) + -(vec2<f32>(x_1171.x, x_1171.y)));
        let x_1175 : vec2<f32> = u_xlat47;
        u_xlat9 = (vec4<f32>(x_1175.x, x_1175.x, x_1175.y, x_1175.y) + vec4<f32>(0.5f, 1.0f, 0.5f, 1.0f));
        let x_1178 : vec4<f32> = u_xlat9;
        let x_1180 : vec4<f32> = u_xlat9;
        u_xlat10 = (vec4<f32>(x_1178.x, x_1178.x, x_1178.z, x_1178.z) * vec4<f32>(x_1180.x, x_1180.x, x_1180.z, x_1180.z));
        let x_1183 : vec4<f32> = u_xlat10;
        let x_1187 : vec2<f32> = (vec2<f32>(x_1183.y, x_1183.w) * vec2<f32>(0.040816002f, 0.040816002f));
        let x_1188 : vec4<f32> = u_xlat11;
        u_xlat11 = vec4<f32>(x_1188.x, x_1187.x, x_1188.z, x_1187.y);
        let x_1190 : vec4<f32> = u_xlat10;
        let x_1193 : vec2<f32> = u_xlat47;
        let x_1195 : vec2<f32> = ((vec2<f32>(x_1190.x, x_1190.z) * vec2<f32>(0.5f, 0.5f)) + -(x_1193));
        let x_1196 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_1195.x, x_1196.y, x_1195.y, x_1196.w);
        let x_1198 : vec2<f32> = u_xlat47;
        let x_1200 : vec2<f32> = (-(x_1198) + vec2<f32>(1.0f, 1.0f));
        let x_1201 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_1200.x, x_1200.y, x_1201.z, x_1201.w);
        let x_1203 : vec2<f32> = u_xlat47;
        u_xlat54 = min(x_1203, vec2<f32>(0.0f, 0.0f));
        let x_1205 : vec2<f32> = u_xlat54;
        let x_1207 : vec2<f32> = u_xlat54;
        let x_1209 : vec4<f32> = u_xlat10;
        let x_1211 : vec2<f32> = ((-(x_1205) * x_1207) + vec2<f32>(x_1209.x, x_1209.y));
        let x_1212 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_1211.x, x_1211.y, x_1212.z, x_1212.w);
        let x_1214 : vec2<f32> = u_xlat47;
        u_xlat54 = max(x_1214, vec2<f32>(0.0f, 0.0f));
        let x_1217 : vec2<f32> = u_xlat54;
        let x_1219 : vec2<f32> = u_xlat54;
        let x_1221 : vec4<f32> = u_xlat9;
        let x_1223 : vec2<f32> = ((-(x_1217) * x_1219) + vec2<f32>(x_1221.y, x_1221.w));
        let x_1224 : vec3<f32> = u_xlat31;
        u_xlat31 = vec3<f32>(x_1223.x, x_1224.y, x_1223.y);
        let x_1226 : vec4<f32> = u_xlat10;
        let x_1229 : vec2<f32> = (vec2<f32>(x_1226.x, x_1226.y) + vec2<f32>(2.0f, 2.0f));
        let x_1230 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_1229.x, x_1229.y, x_1230.z, x_1230.w);
        let x_1232 : vec3<f32> = u_xlat31;
        let x_1234 : vec2<f32> = (vec2<f32>(x_1232.x, x_1232.z) + vec2<f32>(2.0f, 2.0f));
        let x_1235 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_1235.x, x_1234.x, x_1235.z, x_1234.y);
        let x_1238 : f32 = u_xlat9.y;
        u_xlat12.z = (x_1238 * 0.081632003f);
        let x_1242 : vec4<f32> = u_xlat9;
        let x_1245 : vec3<f32> = (vec3<f32>(x_1242.z, x_1242.x, x_1242.w) * vec3<f32>(0.081632003f, 0.081632003f, 0.081632003f));
        let x_1246 : vec4<f32> = u_xlat13;
        u_xlat13 = vec4<f32>(x_1245.x, x_1245.y, x_1245.z, x_1246.w);
        let x_1248 : vec4<f32> = u_xlat10;
        let x_1251 : vec2<f32> = (vec2<f32>(x_1248.x, x_1248.y) * vec2<f32>(0.081632003f, 0.081632003f));
        let x_1252 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_1251.x, x_1251.y, x_1252.z, x_1252.w);
        let x_1255 : f32 = u_xlat13.y;
        u_xlat12.x = x_1255;
        let x_1257 : vec2<f32> = u_xlat47;
        let x_1264 : vec2<f32> = ((vec2<f32>(x_1257.x, x_1257.x) * vec2<f32>(-0.081632003f, 0.081632003f)) + vec2<f32>(0.163264006f, 0.081632003f));
        let x_1265 : vec4<f32> = u_xlat12;
        u_xlat12 = vec4<f32>(x_1265.x, x_1264.x, x_1265.z, x_1264.y);
        let x_1267 : vec2<f32> = u_xlat47;
        let x_1271 : vec2<f32> = ((vec2<f32>(x_1267.x, x_1267.x) * vec2<f32>(-0.081632003f, 0.081632003f)) + vec2<f32>(0.081632003f, 0.163264006f));
        let x_1272 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_1271.x, x_1272.y, x_1271.y, x_1272.w);
        let x_1275 : f32 = u_xlat9.x;
        u_xlat10.y = x_1275;
        let x_1278 : f32 = u_xlat11.y;
        u_xlat10.w = x_1278;
        let x_1280 : vec4<f32> = u_xlat10;
        let x_1281 : vec4<f32> = u_xlat12;
        u_xlat12 = (x_1280 + x_1281);
        let x_1283 : vec2<f32> = u_xlat47;
        let x_1286 : vec2<f32> = ((vec2<f32>(x_1283.y, x_1283.y) * vec2<f32>(-0.081632003f, 0.081632003f)) + vec2<f32>(0.163264006f, 0.081632003f));
        let x_1287 : vec4<f32> = u_xlat13;
        u_xlat13 = vec4<f32>(x_1287.x, x_1286.x, x_1287.z, x_1286.y);
        let x_1289 : vec2<f32> = u_xlat47;
        let x_1292 : vec2<f32> = ((vec2<f32>(x_1289.y, x_1289.y) * vec2<f32>(-0.081632003f, 0.081632003f)) + vec2<f32>(0.081632003f, 0.163264006f));
        let x_1293 : vec4<f32> = u_xlat11;
        u_xlat11 = vec4<f32>(x_1292.x, x_1293.y, x_1292.y, x_1293.w);
        let x_1296 : f32 = u_xlat9.y;
        u_xlat11.y = x_1296;
        let x_1298 : vec4<f32> = u_xlat11;
        let x_1299 : vec4<f32> = u_xlat13;
        u_xlat9 = (x_1298 + x_1299);
        let x_1301 : vec4<f32> = u_xlat10;
        let x_1302 : vec4<f32> = u_xlat12;
        u_xlat10 = (x_1301 / x_1302);
        let x_1304 : vec4<f32> = u_xlat10;
        u_xlat10 = (x_1304 + vec4<f32>(-3.5f, -1.5f, 0.5f, 2.5f));
        let x_1310 : vec4<f32> = u_xlat11;
        let x_1311 : vec4<f32> = u_xlat9;
        u_xlat11 = (x_1310 / x_1311);
        let x_1313 : vec4<f32> = u_xlat11;
        u_xlat11 = (x_1313 + vec4<f32>(-3.5f, -1.5f, 0.5f, 2.5f));
        let x_1315 : vec4<f32> = u_xlat10;
        let x_1318 : vec4<f32> = x_401.x_MainLightShadowmapSize;
        u_xlat10 = (vec4<f32>(x_1315.w, x_1315.x, x_1315.y, x_1315.z) * vec4<f32>(x_1318.x, x_1318.x, x_1318.x, x_1318.x));
        let x_1321 : vec4<f32> = u_xlat11;
        let x_1324 : vec4<f32> = x_401.x_MainLightShadowmapSize;
        u_xlat11 = (vec4<f32>(x_1321.x, x_1321.w, x_1321.y, x_1321.z) * vec4<f32>(x_1324.y, x_1324.y, x_1324.y, x_1324.y));
        let x_1327 : vec4<f32> = u_xlat10;
        let x_1328 : vec3<f32> = vec3<f32>(x_1327.y, x_1327.z, x_1327.w);
        let x_1329 : vec4<f32> = u_xlat13;
        u_xlat13 = vec4<f32>(x_1328.x, x_1329.y, x_1328.y, x_1328.z);
        let x_1332 : f32 = u_xlat11.x;
        u_xlat13.y = x_1332;
        let x_1334 : vec4<f32> = u_xlat3;
        let x_1337 : vec4<f32> = x_401.x_MainLightShadowmapSize;
        let x_1340 : vec4<f32> = u_xlat13;
        u_xlat14 = ((vec4<f32>(x_1334.x, x_1334.y, x_1334.x, x_1334.y) * vec4<f32>(x_1337.x, x_1337.y, x_1337.x, x_1337.y)) + vec4<f32>(x_1340.x, x_1340.y, x_1340.z, x_1340.y));
        let x_1343 : vec4<f32> = u_xlat3;
        let x_1346 : vec4<f32> = x_401.x_MainLightShadowmapSize;
        let x_1349 : vec4<f32> = u_xlat13;
        u_xlat47 = ((vec2<f32>(x_1343.x, x_1343.y) * vec2<f32>(x_1346.x, x_1346.y)) + vec2<f32>(x_1349.w, x_1349.y));
        let x_1353 : f32 = u_xlat13.y;
        u_xlat10.y = x_1353;
        let x_1356 : f32 = u_xlat11.z;
        u_xlat13.y = x_1356;
        let x_1358 : vec4<f32> = u_xlat3;
        let x_1361 : vec4<f32> = x_401.x_MainLightShadowmapSize;
        let x_1364 : vec4<f32> = u_xlat13;
        u_xlat15 = ((vec4<f32>(x_1358.x, x_1358.y, x_1358.x, x_1358.y) * vec4<f32>(x_1361.x, x_1361.y, x_1361.x, x_1361.y)) + vec4<f32>(x_1364.x, x_1364.y, x_1364.z, x_1364.y));
        let x_1367 : vec4<f32> = u_xlat3;
        let x_1370 : vec4<f32> = x_401.x_MainLightShadowmapSize;
        let x_1373 : vec4<f32> = u_xlat13;
        let x_1375 : vec2<f32> = ((vec2<f32>(x_1367.x, x_1367.y) * vec2<f32>(x_1370.x, x_1370.y)) + vec2<f32>(x_1373.w, x_1373.y));
        let x_1376 : vec4<f32> = u_xlat16;
        u_xlat16 = vec4<f32>(x_1375.x, x_1375.y, x_1376.z, x_1376.w);
        let x_1379 : f32 = u_xlat13.y;
        u_xlat10.z = x_1379;
        let x_1382 : vec4<f32> = u_xlat3;
        let x_1385 : vec4<f32> = x_401.x_MainLightShadowmapSize;
        let x_1388 : vec4<f32> = u_xlat10;
        u_xlat17 = ((vec4<f32>(x_1382.x, x_1382.y, x_1382.x, x_1382.y) * vec4<f32>(x_1385.x, x_1385.y, x_1385.x, x_1385.y)) + vec4<f32>(x_1388.x, x_1388.y, x_1388.x, x_1388.z));
        let x_1392 : f32 = u_xlat11.w;
        u_xlat13.y = x_1392;
        let x_1395 : vec4<f32> = u_xlat3;
        let x_1398 : vec4<f32> = x_401.x_MainLightShadowmapSize;
        let x_1401 : vec4<f32> = u_xlat13;
        u_xlat18 = ((vec4<f32>(x_1395.x, x_1395.y, x_1395.x, x_1395.y) * vec4<f32>(x_1398.x, x_1398.y, x_1398.x, x_1398.y)) + vec4<f32>(x_1401.x, x_1401.y, x_1401.z, x_1401.y));
        let x_1405 : vec4<f32> = u_xlat3;
        let x_1408 : vec4<f32> = x_401.x_MainLightShadowmapSize;
        let x_1411 : vec4<f32> = u_xlat13;
        u_xlat32 = ((vec2<f32>(x_1405.x, x_1405.y) * vec2<f32>(x_1408.x, x_1408.y)) + vec2<f32>(x_1411.w, x_1411.y));
        let x_1415 : f32 = u_xlat13.y;
        u_xlat10.w = x_1415;
        let x_1418 : vec4<f32> = u_xlat3;
        let x_1421 : vec4<f32> = x_401.x_MainLightShadowmapSize;
        let x_1424 : vec4<f32> = u_xlat10;
        u_xlat60 = ((vec2<f32>(x_1418.x, x_1418.y) * vec2<f32>(x_1421.x, x_1421.y)) + vec2<f32>(x_1424.x, x_1424.w));
        let x_1427 : vec4<f32> = u_xlat13;
        let x_1428 : vec3<f32> = vec3<f32>(x_1427.x, x_1427.z, x_1427.w);
        let x_1429 : vec4<f32> = u_xlat11;
        u_xlat11 = vec4<f32>(x_1428.x, x_1429.y, x_1428.y, x_1428.z);
        let x_1431 : vec4<f32> = u_xlat3;
        let x_1434 : vec4<f32> = x_401.x_MainLightShadowmapSize;
        let x_1437 : vec4<f32> = u_xlat11;
        u_xlat13 = ((vec4<f32>(x_1431.x, x_1431.y, x_1431.x, x_1431.y) * vec4<f32>(x_1434.x, x_1434.y, x_1434.x, x_1434.y)) + vec4<f32>(x_1437.x, x_1437.y, x_1437.z, x_1437.y));
        let x_1441 : vec4<f32> = u_xlat3;
        let x_1444 : vec4<f32> = x_401.x_MainLightShadowmapSize;
        let x_1447 : vec4<f32> = u_xlat11;
        u_xlat55 = ((vec2<f32>(x_1441.x, x_1441.y) * vec2<f32>(x_1444.x, x_1444.y)) + vec2<f32>(x_1447.w, x_1447.y));
        let x_1451 : f32 = u_xlat10.x;
        u_xlat11.x = x_1451;
        let x_1453 : vec4<f32> = u_xlat3;
        let x_1456 : vec4<f32> = x_401.x_MainLightShadowmapSize;
        let x_1459 : vec4<f32> = u_xlat11;
        let x_1461 : vec2<f32> = ((vec2<f32>(x_1453.x, x_1453.y) * vec2<f32>(x_1456.x, x_1456.y)) + vec2<f32>(x_1459.x, x_1459.y));
        let x_1462 : vec4<f32> = u_xlat3;
        u_xlat3 = vec4<f32>(x_1461.x, x_1461.y, x_1462.z, x_1462.w);
        let x_1465 : vec4<f32> = u_xlat9;
        let x_1467 : vec4<f32> = u_xlat12;
        u_xlat19 = (vec4<f32>(x_1465.x, x_1465.x, x_1465.x, x_1465.x) * x_1467);
        let x_1470 : vec4<f32> = u_xlat9;
        let x_1472 : vec4<f32> = u_xlat12;
        u_xlat20 = (vec4<f32>(x_1470.y, x_1470.y, x_1470.y, x_1470.y) * x_1472);
        let x_1475 : vec4<f32> = u_xlat9;
        let x_1477 : vec4<f32> = u_xlat12;
        u_xlat21 = (vec4<f32>(x_1475.z, x_1475.z, x_1475.z, x_1475.z) * x_1477);
        let x_1479 : vec4<f32> = u_xlat9;
        let x_1481 : vec4<f32> = u_xlat12;
        u_xlat9 = (vec4<f32>(x_1479.w, x_1479.w, x_1479.w, x_1479.w) * x_1481);
        let x_1484 : vec4<f32> = u_xlat14;
        let x_1485 : vec2<f32> = vec2<f32>(x_1484.x, x_1484.y);
        let x_1487 : f32 = u_xlat2.z;
        txVec13 = vec3<f32>(x_1485.x, x_1485.y, x_1487);
        let x_1494 : vec3<f32> = txVec13;
        let x_1496 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1494.xy, x_1494.z);
        u_xlat68 = x_1496;
        let x_1498 : vec4<f32> = u_xlat14;
        let x_1499 : vec2<f32> = vec2<f32>(x_1498.z, x_1498.w);
        let x_1501 : f32 = u_xlat2.z;
        txVec14 = vec3<f32>(x_1499.x, x_1499.y, x_1501);
        let x_1509 : vec3<f32> = txVec14;
        let x_1511 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1509.xy, x_1509.z);
        u_xlat70 = x_1511;
        let x_1512 : f32 = u_xlat70;
        let x_1514 : f32 = u_xlat19.y;
        u_xlat70 = (x_1512 * x_1514);
        let x_1517 : f32 = u_xlat19.x;
        let x_1518 : f32 = u_xlat68;
        let x_1520 : f32 = u_xlat70;
        u_xlat68 = ((x_1517 * x_1518) + x_1520);
        let x_1523 : vec2<f32> = u_xlat47;
        let x_1525 : f32 = u_xlat2.z;
        txVec15 = vec3<f32>(x_1523.x, x_1523.y, x_1525);
        let x_1532 : vec3<f32> = txVec15;
        let x_1534 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1532.xy, x_1532.z);
        u_xlat47.x = x_1534;
        let x_1537 : f32 = u_xlat19.z;
        let x_1539 : f32 = u_xlat47.x;
        let x_1541 : f32 = u_xlat68;
        u_xlat68 = ((x_1537 * x_1539) + x_1541);
        let x_1544 : vec4<f32> = u_xlat17;
        let x_1545 : vec2<f32> = vec2<f32>(x_1544.x, x_1544.y);
        let x_1547 : f32 = u_xlat2.z;
        txVec16 = vec3<f32>(x_1545.x, x_1545.y, x_1547);
        let x_1554 : vec3<f32> = txVec16;
        let x_1556 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1554.xy, x_1554.z);
        u_xlat47.x = x_1556;
        let x_1559 : f32 = u_xlat19.w;
        let x_1561 : f32 = u_xlat47.x;
        let x_1563 : f32 = u_xlat68;
        u_xlat68 = ((x_1559 * x_1561) + x_1563);
        let x_1566 : vec4<f32> = u_xlat15;
        let x_1567 : vec2<f32> = vec2<f32>(x_1566.x, x_1566.y);
        let x_1569 : f32 = u_xlat2.z;
        txVec17 = vec3<f32>(x_1567.x, x_1567.y, x_1569);
        let x_1576 : vec3<f32> = txVec17;
        let x_1578 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1576.xy, x_1576.z);
        u_xlat47.x = x_1578;
        let x_1581 : f32 = u_xlat20.x;
        let x_1583 : f32 = u_xlat47.x;
        let x_1585 : f32 = u_xlat68;
        u_xlat68 = ((x_1581 * x_1583) + x_1585);
        let x_1588 : vec4<f32> = u_xlat15;
        let x_1589 : vec2<f32> = vec2<f32>(x_1588.z, x_1588.w);
        let x_1591 : f32 = u_xlat2.z;
        txVec18 = vec3<f32>(x_1589.x, x_1589.y, x_1591);
        let x_1598 : vec3<f32> = txVec18;
        let x_1600 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1598.xy, x_1598.z);
        u_xlat47.x = x_1600;
        let x_1603 : f32 = u_xlat20.y;
        let x_1605 : f32 = u_xlat47.x;
        let x_1607 : f32 = u_xlat68;
        u_xlat68 = ((x_1603 * x_1605) + x_1607);
        let x_1610 : vec4<f32> = u_xlat16;
        let x_1611 : vec2<f32> = vec2<f32>(x_1610.x, x_1610.y);
        let x_1613 : f32 = u_xlat2.z;
        txVec19 = vec3<f32>(x_1611.x, x_1611.y, x_1613);
        let x_1620 : vec3<f32> = txVec19;
        let x_1622 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1620.xy, x_1620.z);
        u_xlat47.x = x_1622;
        let x_1625 : f32 = u_xlat20.z;
        let x_1627 : f32 = u_xlat47.x;
        let x_1629 : f32 = u_xlat68;
        u_xlat68 = ((x_1625 * x_1627) + x_1629);
        let x_1632 : vec4<f32> = u_xlat17;
        let x_1633 : vec2<f32> = vec2<f32>(x_1632.z, x_1632.w);
        let x_1635 : f32 = u_xlat2.z;
        txVec20 = vec3<f32>(x_1633.x, x_1633.y, x_1635);
        let x_1642 : vec3<f32> = txVec20;
        let x_1644 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1642.xy, x_1642.z);
        u_xlat47.x = x_1644;
        let x_1647 : f32 = u_xlat20.w;
        let x_1649 : f32 = u_xlat47.x;
        let x_1651 : f32 = u_xlat68;
        u_xlat68 = ((x_1647 * x_1649) + x_1651);
        let x_1654 : vec4<f32> = u_xlat18;
        let x_1655 : vec2<f32> = vec2<f32>(x_1654.x, x_1654.y);
        let x_1657 : f32 = u_xlat2.z;
        txVec21 = vec3<f32>(x_1655.x, x_1655.y, x_1657);
        let x_1664 : vec3<f32> = txVec21;
        let x_1666 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1664.xy, x_1664.z);
        u_xlat47.x = x_1666;
        let x_1669 : f32 = u_xlat21.x;
        let x_1671 : f32 = u_xlat47.x;
        let x_1673 : f32 = u_xlat68;
        u_xlat68 = ((x_1669 * x_1671) + x_1673);
        let x_1676 : vec4<f32> = u_xlat18;
        let x_1677 : vec2<f32> = vec2<f32>(x_1676.z, x_1676.w);
        let x_1679 : f32 = u_xlat2.z;
        txVec22 = vec3<f32>(x_1677.x, x_1677.y, x_1679);
        let x_1686 : vec3<f32> = txVec22;
        let x_1688 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1686.xy, x_1686.z);
        u_xlat47.x = x_1688;
        let x_1691 : f32 = u_xlat21.y;
        let x_1693 : f32 = u_xlat47.x;
        let x_1695 : f32 = u_xlat68;
        u_xlat68 = ((x_1691 * x_1693) + x_1695);
        let x_1698 : vec2<f32> = u_xlat32;
        let x_1700 : f32 = u_xlat2.z;
        txVec23 = vec3<f32>(x_1698.x, x_1698.y, x_1700);
        let x_1707 : vec3<f32> = txVec23;
        let x_1709 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1707.xy, x_1707.z);
        u_xlat47.x = x_1709;
        let x_1712 : f32 = u_xlat21.z;
        let x_1714 : f32 = u_xlat47.x;
        let x_1716 : f32 = u_xlat68;
        u_xlat68 = ((x_1712 * x_1714) + x_1716);
        let x_1719 : vec2<f32> = u_xlat60;
        let x_1721 : f32 = u_xlat2.z;
        txVec24 = vec3<f32>(x_1719.x, x_1719.y, x_1721);
        let x_1728 : vec3<f32> = txVec24;
        let x_1730 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1728.xy, x_1728.z);
        u_xlat47.x = x_1730;
        let x_1733 : f32 = u_xlat21.w;
        let x_1735 : f32 = u_xlat47.x;
        let x_1737 : f32 = u_xlat68;
        u_xlat68 = ((x_1733 * x_1735) + x_1737);
        let x_1740 : vec4<f32> = u_xlat13;
        let x_1741 : vec2<f32> = vec2<f32>(x_1740.x, x_1740.y);
        let x_1743 : f32 = u_xlat2.z;
        txVec25 = vec3<f32>(x_1741.x, x_1741.y, x_1743);
        let x_1750 : vec3<f32> = txVec25;
        let x_1752 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1750.xy, x_1750.z);
        u_xlat47.x = x_1752;
        let x_1755 : f32 = u_xlat9.x;
        let x_1757 : f32 = u_xlat47.x;
        let x_1759 : f32 = u_xlat68;
        u_xlat68 = ((x_1755 * x_1757) + x_1759);
        let x_1762 : vec4<f32> = u_xlat13;
        let x_1763 : vec2<f32> = vec2<f32>(x_1762.z, x_1762.w);
        let x_1765 : f32 = u_xlat2.z;
        txVec26 = vec3<f32>(x_1763.x, x_1763.y, x_1765);
        let x_1772 : vec3<f32> = txVec26;
        let x_1774 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1772.xy, x_1772.z);
        u_xlat47.x = x_1774;
        let x_1777 : f32 = u_xlat9.y;
        let x_1779 : f32 = u_xlat47.x;
        let x_1781 : f32 = u_xlat68;
        u_xlat68 = ((x_1777 * x_1779) + x_1781);
        let x_1784 : vec2<f32> = u_xlat55;
        let x_1786 : f32 = u_xlat2.z;
        txVec27 = vec3<f32>(x_1784.x, x_1784.y, x_1786);
        let x_1793 : vec3<f32> = txVec27;
        let x_1795 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1793.xy, x_1793.z);
        u_xlat47.x = x_1795;
        let x_1798 : f32 = u_xlat9.z;
        let x_1800 : f32 = u_xlat47.x;
        let x_1802 : f32 = u_xlat68;
        u_xlat68 = ((x_1798 * x_1800) + x_1802);
        let x_1805 : vec4<f32> = u_xlat3;
        let x_1806 : vec2<f32> = vec2<f32>(x_1805.x, x_1805.y);
        let x_1808 : f32 = u_xlat2.z;
        txVec28 = vec3<f32>(x_1806.x, x_1806.y, x_1808);
        let x_1815 : vec3<f32> = txVec28;
        let x_1817 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1815.xy, x_1815.z);
        u_xlat3.x = x_1817;
        let x_1820 : f32 = u_xlat9.w;
        let x_1822 : f32 = u_xlat3.x;
        let x_1824 : f32 = u_xlat68;
        u_xlat67 = ((x_1820 * x_1822) + x_1824);
      }
    }
  } else {
    let x_1828 : vec4<f32> = u_xlat2;
    let x_1829 : vec2<f32> = vec2<f32>(x_1828.x, x_1828.y);
    let x_1831 : f32 = u_xlat2.z;
    txVec29 = vec3<f32>(x_1829.x, x_1829.y, x_1831);
    let x_1838 : vec3<f32> = txVec29;
    let x_1840 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1838.xy, x_1838.z);
    u_xlat67 = x_1840;
  }
  let x_1842 : f32 = x_401.x_MainLightShadowParams.x;
  u_xlat68 = (-(x_1842) + 1.0f);
  let x_1845 : f32 = u_xlat67;
  let x_1847 : f32 = x_401.x_MainLightShadowParams.x;
  let x_1849 : f32 = u_xlat68;
  u_xlat67 = ((x_1845 * x_1847) + x_1849);
  let x_1853 : f32 = u_xlat2.z;
  u_xlatb3 = (0.0f >= x_1853);
  let x_1857 : f32 = u_xlat2.z;
  u_xlatb25 = (x_1857 >= 1.0f);
  let x_1859 : bool = u_xlatb25;
  let x_1860 : bool = u_xlatb3;
  u_xlatb3 = (x_1859 | x_1860);
  let x_1862 : bool = u_xlatb3;
  let x_1863 : f32 = u_xlat67;
  u_xlat67 = select(x_1863, 1.0f, x_1862);
  let x_1865 : vec3<f32> = u_xlat1;
  let x_1867 : vec4<f32> = x_160.x_MainLightPosition;
  u_xlat1.x = dot(x_1865, -(vec3<f32>(x_1867.x, x_1867.y, x_1867.z)));
  let x_1873 : f32 = u_xlat1.x;
  u_xlat1.x = clamp(x_1873, 0.0f, 1.0f);
  let x_1877 : f32 = u_xlat67;
  let x_1880 : vec4<f32> = x_160.x_MainLightColor;
  u_xlat23 = (vec3<f32>(x_1877, x_1877, x_1877) * vec3<f32>(x_1880.x, x_1880.y, x_1880.z));
  let x_1883 : vec3<f32> = u_xlat23;
  let x_1884 : vec3<f32> = u_xlat1;
  u_xlat1 = (x_1883 * vec3<f32>(x_1884.x, x_1884.x, x_1884.x));
  let x_1887 : vec3<f32> = u_xlat1;
  let x_1888 : vec4<f32> = u_xlat6;
  u_xlat1 = (x_1887 * vec3<f32>(x_1888.x, x_1888.y, x_1888.z));
  let x_1892 : f32 = x_95.unity_LODFade.x;
  u_xlatb67 = (x_1892 < 0.0f);
  let x_1895 : f32 = x_95.unity_LODFade.x;
  u_xlat25 = (x_1895 + 1.0f);
  let x_1897 : bool = u_xlatb67;
  if (x_1897) {
    let x_1901 : f32 = u_xlat25;
    x_1898 = x_1901;
  } else {
    let x_1904 : f32 = x_95.unity_LODFade.x;
    x_1898 = x_1904;
  }
  let x_1905 : f32 = x_1898;
  u_xlat67 = x_1905;
  let x_1906 : f32 = u_xlat67;
  u_xlatb25 = (0.5f >= x_1906);
  let x_1908 : vec4<f32> = u_xlat4;
  let x_1912 : vec4<f32> = x_160.x_ScreenParams;
  let x_1914 : vec3<f32> = (abs(vec3<f32>(x_1908.x, x_1908.y, x_1908.z)) * vec3<f32>(x_1912.x, x_1912.y, x_1912.x));
  let x_1915 : vec4<f32> = u_xlat4;
  u_xlat4 = vec4<f32>(x_1914.x, x_1914.y, x_1914.z, x_1915.w);
  let x_1920 : vec4<f32> = u_xlat4;
  u_xlatu4 = vec3<u32>(vec3<f32>(x_1920.x, x_1920.y, x_1920.z));
  let x_1925 : u32 = u_xlatu4.z;
  u_xlatu47 = (x_1925 * 1025u);
  let x_1929 : u32 = u_xlatu47;
  u_xlatu69 = (x_1929 >> 6u);
  let x_1933 : u32 = u_xlatu69;
  let x_1934 : u32 = u_xlatu47;
  u_xlati47 = bitcast<i32>((x_1933 ^ x_1934));
  let x_1937 : i32 = u_xlati47;
  u_xlatu47 = (bitcast<u32>(x_1937) * 9u);
  let x_1941 : u32 = u_xlatu47;
  u_xlatu69 = (x_1941 >> 11u);
  let x_1944 : u32 = u_xlatu69;
  let x_1945 : u32 = u_xlatu47;
  u_xlati47 = bitcast<i32>((x_1944 ^ x_1945));
  let x_1948 : i32 = u_xlati47;
  u_xlati47 = (x_1948 * 32769i);
  let x_1951 : i32 = u_xlati47;
  let x_1954 : u32 = u_xlatu4.y;
  u_xlati47 = bitcast<i32>((bitcast<u32>(x_1951) ^ x_1954));
  let x_1957 : i32 = u_xlati47;
  u_xlatu47 = (bitcast<u32>(x_1957) * 1025u);
  let x_1960 : u32 = u_xlatu47;
  u_xlatu69 = (x_1960 >> 6u);
  let x_1962 : u32 = u_xlatu69;
  let x_1963 : u32 = u_xlatu47;
  u_xlati47 = bitcast<i32>((x_1962 ^ x_1963));
  let x_1966 : i32 = u_xlati47;
  u_xlatu47 = (bitcast<u32>(x_1966) * 9u);
  let x_1969 : u32 = u_xlatu47;
  u_xlatu69 = (x_1969 >> 11u);
  let x_1971 : u32 = u_xlatu69;
  let x_1972 : u32 = u_xlatu47;
  u_xlati47 = bitcast<i32>((x_1971 ^ x_1972));
  let x_1975 : i32 = u_xlati47;
  u_xlati47 = (x_1975 * 32769i);
  let x_1977 : i32 = u_xlati47;
  let x_1980 : u32 = u_xlatu4.x;
  u_xlati47 = bitcast<i32>((bitcast<u32>(x_1977) ^ x_1980));
  let x_1983 : i32 = u_xlati47;
  u_xlatu47 = (bitcast<u32>(x_1983) * 1025u);
  let x_1986 : u32 = u_xlatu47;
  u_xlatu69 = (x_1986 >> 6u);
  let x_1988 : u32 = u_xlatu69;
  let x_1989 : u32 = u_xlatu47;
  u_xlati47 = bitcast<i32>((x_1988 ^ x_1989));
  let x_1992 : i32 = u_xlati47;
  u_xlatu47 = (bitcast<u32>(x_1992) * 9u);
  let x_1995 : u32 = u_xlatu47;
  u_xlatu69 = (x_1995 >> 11u);
  let x_1997 : u32 = u_xlatu69;
  let x_1998 : u32 = u_xlatu47;
  u_xlati47 = bitcast<i32>((x_1997 ^ x_1998));
  let x_2001 : i32 = u_xlati47;
  u_xlati47 = (x_2001 * 32769i);
  param = 1065353216i;
  let x_2007 : i32 = u_xlati47;
  param_1 = x_2007;
  param_2 = 0i;
  param_3 = 23i;
  let x_2010 : i32 = int_bitfieldInsert_i1_i1_i1_i1_(&(param), &(param_1), &(param_2), &(param_3));
  u_xlat47.x = bitcast<f32>(x_2010);
  let x_2014 : f32 = u_xlat47.x;
  u_xlat47.x = (x_2014 + -1.0f);
  let x_2019 : f32 = u_xlat47.x;
  u_xlat69 = (-(x_2019) + 1.0f);
  let x_2022 : bool = u_xlatb25;
  if (x_2022) {
    let x_2027 : f32 = u_xlat47.x;
    x_2023 = x_2027;
  } else {
    let x_2029 : f32 = u_xlat69;
    x_2023 = x_2029;
  }
  let x_2030 : f32 = x_2023;
  u_xlat25 = x_2030;
  let x_2031 : f32 = u_xlat67;
  let x_2033 : f32 = u_xlat25;
  u_xlat67 = ((x_2031 * 2.0f) + -(x_2033));
  let x_2036 : f32 = u_xlat67;
  let x_2038 : f32 = u_xlat6.w;
  u_xlat25 = (x_2036 * x_2038);
  let x_2041 : f32 = u_xlat25;
  u_xlatb47.x = (x_2041 >= 0.400000006f);
  let x_2046 : bool = u_xlatb47.x;
  let x_2047 : f32 = u_xlat25;
  u_xlat47.x = select(0.0f, x_2047, x_2046);
  let x_2051 : f32 = u_xlat6.w;
  let x_2052 : f32 = u_xlat67;
  u_xlat67 = ((x_2051 * x_2052) + -0.400000006f);
  let x_2056 : f32 = u_xlat25;
  u_xlat69 = dpdxCoarse(x_2056);
  let x_2058 : f32 = u_xlat25;
  u_xlat25 = dpdyCoarse(x_2058);
  let x_2060 : f32 = u_xlat25;
  let x_2062 : f32 = u_xlat69;
  u_xlat25 = (abs(x_2060) + abs(x_2062));
  let x_2065 : f32 = u_xlat25;
  u_xlat25 = max(x_2065, 0.0001f);
  let x_2068 : f32 = u_xlat67;
  let x_2069 : f32 = u_xlat25;
  u_xlat67 = (x_2068 / x_2069);
  let x_2071 : f32 = u_xlat67;
  u_xlat67 = (x_2071 + 0.5f);
  let x_2073 : f32 = u_xlat67;
  u_xlat67 = clamp(x_2073, 0.0f, 1.0f);
  let x_2076 : f32 = x_160.x_AlphaToMaskAvailable;
  u_xlatb25 = !((x_2076 == 0.0f));
  let x_2078 : bool = u_xlatb25;
  if (x_2078) {
    let x_2082 : f32 = u_xlat67;
    x_2079 = x_2082;
  } else {
    let x_2085 : f32 = u_xlat47.x;
    x_2079 = x_2085;
  }
  let x_2086 : f32 = x_2079;
  u_xlat67 = x_2086;
  let x_2087 : f32 = u_xlat67;
  u_xlat47.x = (x_2087 + -0.0001f);
  let x_2092 : f32 = u_xlat47.x;
  u_xlatb47.x = (x_2092 < 0.0f);
  let x_2096 : bool = u_xlatb47.x;
  if (((select(0i, 1i, x_2096) * -1i) != 0i)) {
    discard;
  }
  let x_2104 : vec3<f32> = u_xlat22;
  let x_2105 : vec3<f32> = u_xlat30;
  u_xlat22 = (x_2104 * vec3<f32>(x_2105.y, x_2105.y, x_2105.y));
  let x_2108 : vec3<f32> = u_xlat30;
  let x_2110 : vec4<f32> = vs_INTERP2;
  let x_2113 : vec3<f32> = u_xlat22;
  u_xlat22 = ((vec3<f32>(x_2108.x, x_2108.x, x_2108.x) * vec3<f32>(x_2110.x, x_2110.y, x_2110.z)) + x_2113);
  let x_2115 : vec3<f32> = u_xlat30;
  let x_2117 : vec3<f32> = vs_INTERP1;
  let x_2119 : vec3<f32> = u_xlat22;
  u_xlat22 = ((vec3<f32>(x_2115.z, x_2115.z, x_2115.z) * x_2117) + x_2119);
  let x_2121 : vec3<f32> = u_xlat22;
  let x_2122 : vec3<f32> = u_xlat22;
  u_xlat47.x = dot(x_2121, x_2122);
  let x_2126 : f32 = u_xlat47.x;
  u_xlat47.x = inverseSqrt(x_2126);
  let x_2129 : vec3<f32> = u_xlat22;
  let x_2130 : vec2<f32> = u_xlat47;
  let x_2132 : vec3<f32> = (x_2129 * vec3<f32>(x_2130.x, x_2130.x, x_2130.x));
  let x_2133 : vec4<f32> = u_xlat4;
  u_xlat4 = vec4<f32>(x_2132.x, x_2132.y, x_2132.z, x_2133.w);
  u_xlat4.w = 1.0f;
  let x_2138 : vec4<f32> = x_95.unity_SHAr;
  let x_2139 : vec4<f32> = u_xlat4;
  u_xlat6.x = dot(x_2138, x_2139);
  let x_2144 : vec4<f32> = x_95.unity_SHAg;
  let x_2145 : vec4<f32> = u_xlat4;
  u_xlat6.y = dot(x_2144, x_2145);
  let x_2150 : vec4<f32> = x_95.unity_SHAb;
  let x_2151 : vec4<f32> = u_xlat4;
  u_xlat6.z = dot(x_2150, x_2151);
  let x_2154 : vec4<f32> = u_xlat4;
  let x_2156 : vec4<f32> = u_xlat4;
  u_xlat9 = (vec4<f32>(x_2154.y, x_2154.z, x_2154.z, x_2154.x) * vec4<f32>(x_2156.x, x_2156.y, x_2156.z, x_2156.z));
  let x_2161 : vec4<f32> = x_95.unity_SHBr;
  let x_2162 : vec4<f32> = u_xlat9;
  u_xlat10.x = dot(x_2161, x_2162);
  let x_2167 : vec4<f32> = x_95.unity_SHBg;
  let x_2168 : vec4<f32> = u_xlat9;
  u_xlat10.y = dot(x_2167, x_2168);
  let x_2172 : vec4<f32> = x_95.unity_SHBb;
  let x_2173 : vec4<f32> = u_xlat9;
  u_xlat10.z = dot(x_2172, x_2173);
  let x_2177 : f32 = u_xlat4.y;
  let x_2179 : f32 = u_xlat4.y;
  u_xlat22.x = (x_2177 * x_2179);
  let x_2183 : f32 = u_xlat4.x;
  let x_2185 : f32 = u_xlat4.x;
  let x_2188 : f32 = u_xlat22.x;
  u_xlat22.x = ((x_2183 * x_2185) + -(x_2188));
  let x_2194 : vec4<f32> = x_95.unity_SHC;
  let x_2196 : vec3<f32> = u_xlat22;
  let x_2199 : vec4<f32> = u_xlat10;
  u_xlat22 = ((vec3<f32>(x_2194.x, x_2194.y, x_2194.z) * vec3<f32>(x_2196.x, x_2196.x, x_2196.x)) + vec3<f32>(x_2199.x, x_2199.y, x_2199.z));
  let x_2202 : vec3<f32> = u_xlat22;
  let x_2203 : vec4<f32> = u_xlat6;
  u_xlat22 = (x_2202 + vec3<f32>(x_2203.x, x_2203.y, x_2203.z));
  let x_2206 : vec3<f32> = u_xlat22;
  u_xlat22 = max(x_2206, vec3<f32>(0.0f, 0.0f, 0.0f));
  let x_2209 : vec4<f32> = x_160.x_ScaledScreenParams;
  let x_2210 : vec2<f32> = vec2<f32>(x_2209.x, x_2209.y);
  u_xlat47 = (vec2<f32>(1.0f, 1.0f) / vec2<f32>(x_2210.x, x_2210.y));
  let x_2215 : vec2<f32> = u_xlat47;
  let x_2216 : vec4<f32> = hlslcc_FragCoord;
  let x_2218 : vec2<f32> = (x_2215 * vec2<f32>(x_2216.x, x_2216.y));
  let x_2219 : vec4<f32> = u_xlat6;
  u_xlat6 = vec4<f32>(x_2218.x, x_2218.y, x_2219.z, x_2219.w);
  let x_2222 : f32 = u_xlat6.y;
  let x_2225 : f32 = x_160.x_ScaleBiasRt.x;
  let x_2228 : f32 = x_160.x_ScaleBiasRt.y;
  u_xlat47.x = ((x_2222 * x_2225) + x_2228);
  let x_2232 : f32 = u_xlat47.x;
  u_xlat6.z = (-(x_2232) + 1.0f);
  let x_2237 : f32 = u_xlat8.x;
  u_xlat8.x = x_2237;
  let x_2240 : f32 = u_xlat8.x;
  u_xlat8.x = clamp(x_2240, 0.0f, 1.0f);
  let x_2243 : f32 = u_xlat67;
  u_xlat67 = x_2243;
  let x_2244 : f32 = u_xlat67;
  u_xlat67 = clamp(x_2244, 0.0f, 1.0f);
  let x_2246 : vec3<f32> = u_xlat7;
  u_xlat7 = (x_2246 * vec3<f32>(0.959999979f, 0.959999979f, 0.959999979f));
  let x_2251 : f32 = u_xlat8.x;
  u_xlat47.x = (-(x_2251) + 1.0f);
  let x_2256 : f32 = u_xlat47.x;
  let x_2258 : f32 = u_xlat47.x;
  u_xlat69 = (x_2256 * x_2258);
  let x_2260 : f32 = u_xlat69;
  u_xlat69 = max(x_2260, 0.0078125f);
  let x_2263 : f32 = u_xlat69;
  let x_2264 : f32 = u_xlat69;
  u_xlat70 = (x_2263 * x_2264);
  let x_2268 : f32 = u_xlat8.x;
  u_xlat71 = (x_2268 + 0.040000021f);
  let x_2271 : f32 = u_xlat71;
  u_xlat71 = min(x_2271, 1.0f);
  let x_2274 : f32 = u_xlat69;
  u_xlat28 = ((x_2274 * 4.0f) + 2.0f);
  let x_2282 : vec4<f32> = u_xlat6;
  let x_2285 : f32 = x_160.x_GlobalMipBias.x;
  let x_2286 : vec4<f32> = textureSampleBias(x_ScreenSpaceOcclusionTexture, sampler_ScreenSpaceOcclusionTexture, vec2<f32>(x_2282.x, x_2282.z), x_2285);
  u_xlat6.x = x_2286.x;
  let x_2291 : f32 = u_xlat6.x;
  u_xlat50 = (x_2291 + -1.0f);
  let x_2294 : f32 = x_160.x_AmbientOcclusionParam.w;
  let x_2295 : f32 = u_xlat50;
  u_xlat50 = ((x_2294 * x_2295) + 1.0f);
  let x_2299 : f32 = u_xlat6.x;
  let x_2301 : f32 = vs_INTERP4.w;
  u_xlat6.x = min(x_2299, x_2301);
  let x_2304 : bool = u_xlatb0;
  if (x_2304) {
    let x_2308 : f32 = x_401.x_MainLightShadowParams.y;
    u_xlatb0 = (x_2308 == 1.0f);
    let x_2310 : bool = u_xlatb0;
    if (x_2310) {
      let x_2313 : vec4<f32> = u_xlat2;
      let x_2316 : vec4<f32> = x_401.x_MainLightShadowOffset0;
      u_xlat8 = (vec4<f32>(x_2313.x, x_2313.y, x_2313.x, x_2313.y) + x_2316);
      let x_2319 : vec4<f32> = u_xlat8;
      let x_2320 : vec2<f32> = vec2<f32>(x_2319.x, x_2319.y);
      let x_2322 : f32 = u_xlat2.z;
      txVec30 = vec3<f32>(x_2320.x, x_2320.y, x_2322);
      let x_2329 : vec3<f32> = txVec30;
      let x_2331 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2329.xy, x_2329.z);
      u_xlat9.x = x_2331;
      let x_2334 : vec4<f32> = u_xlat8;
      let x_2335 : vec2<f32> = vec2<f32>(x_2334.z, x_2334.w);
      let x_2337 : f32 = u_xlat2.z;
      txVec31 = vec3<f32>(x_2335.x, x_2335.y, x_2337);
      let x_2344 : vec3<f32> = txVec31;
      let x_2346 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2344.xy, x_2344.z);
      u_xlat9.y = x_2346;
      let x_2348 : vec4<f32> = u_xlat2;
      let x_2351 : vec4<f32> = x_401.x_MainLightShadowOffset1;
      u_xlat8 = (vec4<f32>(x_2348.x, x_2348.y, x_2348.x, x_2348.y) + x_2351);
      let x_2354 : vec4<f32> = u_xlat8;
      let x_2355 : vec2<f32> = vec2<f32>(x_2354.x, x_2354.y);
      let x_2357 : f32 = u_xlat2.z;
      txVec32 = vec3<f32>(x_2355.x, x_2355.y, x_2357);
      let x_2364 : vec3<f32> = txVec32;
      let x_2366 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2364.xy, x_2364.z);
      u_xlat9.z = x_2366;
      let x_2369 : vec4<f32> = u_xlat8;
      let x_2370 : vec2<f32> = vec2<f32>(x_2369.z, x_2369.w);
      let x_2372 : f32 = u_xlat2.z;
      txVec33 = vec3<f32>(x_2370.x, x_2370.y, x_2372);
      let x_2379 : vec3<f32> = txVec33;
      let x_2381 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2379.xy, x_2379.z);
      u_xlat9.w = x_2381;
      let x_2383 : vec4<f32> = u_xlat9;
      u_xlat0.x = dot(x_2383, vec4<f32>(0.25f, 0.25f, 0.25f, 0.25f));
    } else {
      let x_2389 : f32 = x_401.x_MainLightShadowParams.y;
      u_xlatb72 = (x_2389 == 2.0f);
      let x_2391 : bool = u_xlatb72;
      if (x_2391) {
        let x_2394 : vec4<f32> = u_xlat2;
        let x_2397 : vec4<f32> = x_401.x_MainLightShadowmapSize;
        let x_2400 : vec2<f32> = ((vec2<f32>(x_2394.x, x_2394.y) * vec2<f32>(x_2397.z, x_2397.w)) + vec2<f32>(0.5f, 0.5f));
        let x_2401 : vec4<f32> = u_xlat8;
        u_xlat8 = vec4<f32>(x_2400.x, x_2400.y, x_2401.z, x_2401.w);
        let x_2403 : vec4<f32> = u_xlat8;
        let x_2405 : vec2<f32> = floor(vec2<f32>(x_2403.x, x_2403.y));
        let x_2406 : vec4<f32> = u_xlat8;
        u_xlat8 = vec4<f32>(x_2405.x, x_2405.y, x_2406.z, x_2406.w);
        let x_2409 : vec4<f32> = u_xlat2;
        let x_2412 : vec4<f32> = x_401.x_MainLightShadowmapSize;
        let x_2415 : vec4<f32> = u_xlat8;
        u_xlat52 = ((vec2<f32>(x_2409.x, x_2409.y) * vec2<f32>(x_2412.z, x_2412.w)) + -(vec2<f32>(x_2415.x, x_2415.y)));
        let x_2419 : vec2<f32> = u_xlat52;
        u_xlat9 = (vec4<f32>(x_2419.x, x_2419.x, x_2419.y, x_2419.y) + vec4<f32>(0.5f, 1.0f, 0.5f, 1.0f));
        let x_2422 : vec4<f32> = u_xlat9;
        let x_2424 : vec4<f32> = u_xlat9;
        u_xlat10 = (vec4<f32>(x_2422.x, x_2422.x, x_2422.z, x_2422.z) * vec4<f32>(x_2424.x, x_2424.x, x_2424.z, x_2424.z));
        let x_2427 : vec4<f32> = u_xlat10;
        let x_2429 : vec2<f32> = (vec2<f32>(x_2427.y, x_2427.w) * vec2<f32>(0.079999998f, 0.079999998f));
        let x_2430 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_2429.x, x_2430.y, x_2429.y, x_2430.w);
        let x_2432 : vec4<f32> = u_xlat10;
        let x_2435 : vec2<f32> = u_xlat52;
        let x_2437 : vec2<f32> = ((vec2<f32>(x_2432.x, x_2432.z) * vec2<f32>(0.5f, 0.5f)) + -(x_2435));
        let x_2438 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_2437.x, x_2437.y, x_2438.z, x_2438.w);
        let x_2440 : vec2<f32> = u_xlat52;
        u_xlat54 = (-(x_2440) + vec2<f32>(1.0f, 1.0f));
        let x_2443 : vec2<f32> = u_xlat52;
        let x_2444 : vec2<f32> = min(x_2443, vec2<f32>(0.0f, 0.0f));
        let x_2445 : vec4<f32> = u_xlat11;
        u_xlat11 = vec4<f32>(x_2444.x, x_2444.y, x_2445.z, x_2445.w);
        let x_2447 : vec4<f32> = u_xlat11;
        let x_2450 : vec4<f32> = u_xlat11;
        let x_2453 : vec2<f32> = u_xlat54;
        let x_2454 : vec2<f32> = ((-(vec2<f32>(x_2447.x, x_2447.y)) * vec2<f32>(x_2450.x, x_2450.y)) + x_2453);
        let x_2455 : vec4<f32> = u_xlat11;
        u_xlat11 = vec4<f32>(x_2454.x, x_2454.y, x_2455.z, x_2455.w);
        let x_2457 : vec2<f32> = u_xlat52;
        u_xlat52 = max(x_2457, vec2<f32>(0.0f, 0.0f));
        let x_2459 : vec2<f32> = u_xlat52;
        let x_2461 : vec2<f32> = u_xlat52;
        let x_2463 : vec4<f32> = u_xlat9;
        u_xlat52 = ((-(x_2459) * x_2461) + vec2<f32>(x_2463.y, x_2463.w));
        let x_2466 : vec4<f32> = u_xlat11;
        let x_2468 : vec2<f32> = (vec2<f32>(x_2466.x, x_2466.y) + vec2<f32>(1.0f, 1.0f));
        let x_2469 : vec4<f32> = u_xlat11;
        u_xlat11 = vec4<f32>(x_2468.x, x_2468.y, x_2469.z, x_2469.w);
        let x_2471 : vec2<f32> = u_xlat52;
        u_xlat52 = (x_2471 + vec2<f32>(1.0f, 1.0f));
        let x_2473 : vec4<f32> = u_xlat10;
        let x_2475 : vec2<f32> = (vec2<f32>(x_2473.x, x_2473.y) * vec2<f32>(0.159999996f, 0.159999996f));
        let x_2476 : vec4<f32> = u_xlat12;
        u_xlat12 = vec4<f32>(x_2475.x, x_2475.y, x_2476.z, x_2476.w);
        let x_2478 : vec2<f32> = u_xlat54;
        let x_2479 : vec2<f32> = (x_2478 * vec2<f32>(0.159999996f, 0.159999996f));
        let x_2480 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_2479.x, x_2479.y, x_2480.z, x_2480.w);
        let x_2482 : vec4<f32> = u_xlat11;
        let x_2484 : vec2<f32> = (vec2<f32>(x_2482.x, x_2482.y) * vec2<f32>(0.159999996f, 0.159999996f));
        let x_2485 : vec4<f32> = u_xlat11;
        u_xlat11 = vec4<f32>(x_2484.x, x_2484.y, x_2485.z, x_2485.w);
        let x_2487 : vec2<f32> = u_xlat52;
        let x_2488 : vec2<f32> = (x_2487 * vec2<f32>(0.159999996f, 0.159999996f));
        let x_2489 : vec4<f32> = u_xlat13;
        u_xlat13 = vec4<f32>(x_2488.x, x_2488.y, x_2489.z, x_2489.w);
        let x_2491 : vec4<f32> = u_xlat9;
        u_xlat52 = (vec2<f32>(x_2491.y, x_2491.w) * vec2<f32>(0.159999996f, 0.159999996f));
        let x_2495 : f32 = u_xlat11.x;
        u_xlat12.z = x_2495;
        let x_2498 : f32 = u_xlat52.x;
        u_xlat12.w = x_2498;
        let x_2501 : f32 = u_xlat13.x;
        u_xlat10.z = x_2501;
        let x_2504 : f32 = u_xlat9.x;
        u_xlat10.w = x_2504;
        let x_2506 : vec4<f32> = u_xlat10;
        let x_2508 : vec4<f32> = u_xlat12;
        u_xlat14 = (vec4<f32>(x_2506.z, x_2506.w, x_2506.x, x_2506.z) + vec4<f32>(x_2508.z, x_2508.w, x_2508.x, x_2508.z));
        let x_2512 : f32 = u_xlat12.y;
        u_xlat11.z = x_2512;
        let x_2515 : f32 = u_xlat52.y;
        u_xlat11.w = x_2515;
        let x_2518 : f32 = u_xlat10.y;
        u_xlat13.z = x_2518;
        let x_2521 : f32 = u_xlat9.z;
        u_xlat13.w = x_2521;
        let x_2523 : vec4<f32> = u_xlat11;
        let x_2525 : vec4<f32> = u_xlat13;
        let x_2527 : vec3<f32> = (vec3<f32>(x_2523.z, x_2523.y, x_2523.w) + vec3<f32>(x_2525.z, x_2525.y, x_2525.w));
        let x_2528 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_2527.x, x_2527.y, x_2527.z, x_2528.w);
        let x_2530 : vec4<f32> = u_xlat10;
        let x_2532 : vec4<f32> = u_xlat14;
        let x_2534 : vec3<f32> = (vec3<f32>(x_2530.x, x_2530.z, x_2530.w) / vec3<f32>(x_2532.z, x_2532.w, x_2532.y));
        let x_2535 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_2534.x, x_2534.y, x_2534.z, x_2535.w);
        let x_2537 : vec4<f32> = u_xlat10;
        let x_2539 : vec3<f32> = (vec3<f32>(x_2537.x, x_2537.y, x_2537.z) + vec3<f32>(-2.5f, -0.5f, 1.5f));
        let x_2540 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_2539.x, x_2539.y, x_2539.z, x_2540.w);
        let x_2542 : vec4<f32> = u_xlat13;
        let x_2544 : vec4<f32> = u_xlat9;
        let x_2546 : vec3<f32> = (vec3<f32>(x_2542.z, x_2542.y, x_2542.w) / vec3<f32>(x_2544.x, x_2544.y, x_2544.z));
        let x_2547 : vec4<f32> = u_xlat11;
        u_xlat11 = vec4<f32>(x_2546.x, x_2546.y, x_2546.z, x_2547.w);
        let x_2549 : vec4<f32> = u_xlat11;
        let x_2551 : vec3<f32> = (vec3<f32>(x_2549.x, x_2549.y, x_2549.z) + vec3<f32>(-2.5f, -0.5f, 1.5f));
        let x_2552 : vec4<f32> = u_xlat11;
        u_xlat11 = vec4<f32>(x_2551.x, x_2551.y, x_2551.z, x_2552.w);
        let x_2554 : vec4<f32> = u_xlat10;
        let x_2557 : vec4<f32> = x_401.x_MainLightShadowmapSize;
        let x_2559 : vec3<f32> = (vec3<f32>(x_2554.y, x_2554.x, x_2554.z) * vec3<f32>(x_2557.x, x_2557.x, x_2557.x));
        let x_2560 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_2559.x, x_2559.y, x_2559.z, x_2560.w);
        let x_2562 : vec4<f32> = u_xlat11;
        let x_2565 : vec4<f32> = x_401.x_MainLightShadowmapSize;
        let x_2567 : vec3<f32> = (vec3<f32>(x_2562.x, x_2562.y, x_2562.z) * vec3<f32>(x_2565.y, x_2565.y, x_2565.y));
        let x_2568 : vec4<f32> = u_xlat11;
        u_xlat11 = vec4<f32>(x_2567.x, x_2567.y, x_2567.z, x_2568.w);
        let x_2571 : f32 = u_xlat11.x;
        u_xlat10.w = x_2571;
        let x_2573 : vec4<f32> = u_xlat8;
        let x_2576 : vec4<f32> = x_401.x_MainLightShadowmapSize;
        let x_2579 : vec4<f32> = u_xlat10;
        u_xlat12 = ((vec4<f32>(x_2573.x, x_2573.y, x_2573.x, x_2573.y) * vec4<f32>(x_2576.x, x_2576.y, x_2576.x, x_2576.y)) + vec4<f32>(x_2579.y, x_2579.w, x_2579.x, x_2579.w));
        let x_2582 : vec4<f32> = u_xlat8;
        let x_2585 : vec4<f32> = x_401.x_MainLightShadowmapSize;
        let x_2588 : vec4<f32> = u_xlat10;
        u_xlat52 = ((vec2<f32>(x_2582.x, x_2582.y) * vec2<f32>(x_2585.x, x_2585.y)) + vec2<f32>(x_2588.z, x_2588.w));
        let x_2592 : f32 = u_xlat10.y;
        u_xlat11.w = x_2592;
        let x_2594 : vec4<f32> = u_xlat11;
        let x_2595 : vec2<f32> = vec2<f32>(x_2594.y, x_2594.z);
        let x_2596 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_2596.x, x_2595.x, x_2596.z, x_2595.y);
        let x_2598 : vec4<f32> = u_xlat8;
        let x_2601 : vec4<f32> = x_401.x_MainLightShadowmapSize;
        let x_2604 : vec4<f32> = u_xlat10;
        u_xlat13 = ((vec4<f32>(x_2598.x, x_2598.y, x_2598.x, x_2598.y) * vec4<f32>(x_2601.x, x_2601.y, x_2601.x, x_2601.y)) + vec4<f32>(x_2604.x, x_2604.y, x_2604.z, x_2604.y));
        let x_2607 : vec4<f32> = u_xlat8;
        let x_2610 : vec4<f32> = x_401.x_MainLightShadowmapSize;
        let x_2613 : vec4<f32> = u_xlat11;
        u_xlat11 = ((vec4<f32>(x_2607.x, x_2607.y, x_2607.x, x_2607.y) * vec4<f32>(x_2610.x, x_2610.y, x_2610.x, x_2610.y)) + vec4<f32>(x_2613.w, x_2613.y, x_2613.w, x_2613.z));
        let x_2616 : vec4<f32> = u_xlat8;
        let x_2619 : vec4<f32> = x_401.x_MainLightShadowmapSize;
        let x_2622 : vec4<f32> = u_xlat10;
        u_xlat10 = ((vec4<f32>(x_2616.x, x_2616.y, x_2616.x, x_2616.y) * vec4<f32>(x_2619.x, x_2619.y, x_2619.x, x_2619.y)) + vec4<f32>(x_2622.x, x_2622.w, x_2622.z, x_2622.w));
        let x_2625 : vec4<f32> = u_xlat9;
        let x_2627 : vec4<f32> = u_xlat14;
        u_xlat15 = (vec4<f32>(x_2625.x, x_2625.x, x_2625.x, x_2625.y) * vec4<f32>(x_2627.z, x_2627.w, x_2627.y, x_2627.z));
        let x_2630 : vec4<f32> = u_xlat9;
        let x_2632 : vec4<f32> = u_xlat14;
        u_xlat16 = (vec4<f32>(x_2630.y, x_2630.y, x_2630.z, x_2630.z) * x_2632);
        let x_2636 : f32 = u_xlat9.z;
        let x_2638 : f32 = u_xlat14.y;
        u_xlat72 = (x_2636 * x_2638);
        let x_2641 : vec4<f32> = u_xlat12;
        let x_2642 : vec2<f32> = vec2<f32>(x_2641.x, x_2641.y);
        let x_2644 : f32 = u_xlat2.z;
        txVec34 = vec3<f32>(x_2642.x, x_2642.y, x_2644);
        let x_2652 : vec3<f32> = txVec34;
        let x_2654 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2652.xy, x_2652.z);
        u_xlat73 = x_2654;
        let x_2656 : vec4<f32> = u_xlat12;
        let x_2657 : vec2<f32> = vec2<f32>(x_2656.z, x_2656.w);
        let x_2659 : f32 = u_xlat2.z;
        txVec35 = vec3<f32>(x_2657.x, x_2657.y, x_2659);
        let x_2666 : vec3<f32> = txVec35;
        let x_2668 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2666.xy, x_2666.z);
        u_xlat8.x = x_2668;
        let x_2671 : f32 = u_xlat8.x;
        let x_2673 : f32 = u_xlat15.y;
        u_xlat8.x = (x_2671 * x_2673);
        let x_2677 : f32 = u_xlat15.x;
        let x_2678 : f32 = u_xlat73;
        let x_2681 : f32 = u_xlat8.x;
        u_xlat73 = ((x_2677 * x_2678) + x_2681);
        let x_2684 : vec2<f32> = u_xlat52;
        let x_2686 : f32 = u_xlat2.z;
        txVec36 = vec3<f32>(x_2684.x, x_2684.y, x_2686);
        let x_2693 : vec3<f32> = txVec36;
        let x_2695 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2693.xy, x_2693.z);
        u_xlat8.x = x_2695;
        let x_2698 : f32 = u_xlat15.z;
        let x_2700 : f32 = u_xlat8.x;
        let x_2702 : f32 = u_xlat73;
        u_xlat73 = ((x_2698 * x_2700) + x_2702);
        let x_2705 : vec4<f32> = u_xlat11;
        let x_2706 : vec2<f32> = vec2<f32>(x_2705.x, x_2705.y);
        let x_2708 : f32 = u_xlat2.z;
        txVec37 = vec3<f32>(x_2706.x, x_2706.y, x_2708);
        let x_2715 : vec3<f32> = txVec37;
        let x_2717 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2715.xy, x_2715.z);
        u_xlat8.x = x_2717;
        let x_2720 : f32 = u_xlat15.w;
        let x_2722 : f32 = u_xlat8.x;
        let x_2724 : f32 = u_xlat73;
        u_xlat73 = ((x_2720 * x_2722) + x_2724);
        let x_2727 : vec4<f32> = u_xlat13;
        let x_2728 : vec2<f32> = vec2<f32>(x_2727.x, x_2727.y);
        let x_2730 : f32 = u_xlat2.z;
        txVec38 = vec3<f32>(x_2728.x, x_2728.y, x_2730);
        let x_2737 : vec3<f32> = txVec38;
        let x_2739 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2737.xy, x_2737.z);
        u_xlat8.x = x_2739;
        let x_2742 : f32 = u_xlat16.x;
        let x_2744 : f32 = u_xlat8.x;
        let x_2746 : f32 = u_xlat73;
        u_xlat73 = ((x_2742 * x_2744) + x_2746);
        let x_2749 : vec4<f32> = u_xlat13;
        let x_2750 : vec2<f32> = vec2<f32>(x_2749.z, x_2749.w);
        let x_2752 : f32 = u_xlat2.z;
        txVec39 = vec3<f32>(x_2750.x, x_2750.y, x_2752);
        let x_2759 : vec3<f32> = txVec39;
        let x_2761 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2759.xy, x_2759.z);
        u_xlat8.x = x_2761;
        let x_2764 : f32 = u_xlat16.y;
        let x_2766 : f32 = u_xlat8.x;
        let x_2768 : f32 = u_xlat73;
        u_xlat73 = ((x_2764 * x_2766) + x_2768);
        let x_2771 : vec4<f32> = u_xlat11;
        let x_2772 : vec2<f32> = vec2<f32>(x_2771.z, x_2771.w);
        let x_2774 : f32 = u_xlat2.z;
        txVec40 = vec3<f32>(x_2772.x, x_2772.y, x_2774);
        let x_2781 : vec3<f32> = txVec40;
        let x_2783 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2781.xy, x_2781.z);
        u_xlat8.x = x_2783;
        let x_2786 : f32 = u_xlat16.z;
        let x_2788 : f32 = u_xlat8.x;
        let x_2790 : f32 = u_xlat73;
        u_xlat73 = ((x_2786 * x_2788) + x_2790);
        let x_2793 : vec4<f32> = u_xlat10;
        let x_2794 : vec2<f32> = vec2<f32>(x_2793.x, x_2793.y);
        let x_2796 : f32 = u_xlat2.z;
        txVec41 = vec3<f32>(x_2794.x, x_2794.y, x_2796);
        let x_2803 : vec3<f32> = txVec41;
        let x_2805 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2803.xy, x_2803.z);
        u_xlat8.x = x_2805;
        let x_2808 : f32 = u_xlat16.w;
        let x_2810 : f32 = u_xlat8.x;
        let x_2812 : f32 = u_xlat73;
        u_xlat73 = ((x_2808 * x_2810) + x_2812);
        let x_2815 : vec4<f32> = u_xlat10;
        let x_2816 : vec2<f32> = vec2<f32>(x_2815.z, x_2815.w);
        let x_2818 : f32 = u_xlat2.z;
        txVec42 = vec3<f32>(x_2816.x, x_2816.y, x_2818);
        let x_2825 : vec3<f32> = txVec42;
        let x_2827 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2825.xy, x_2825.z);
        u_xlat8.x = x_2827;
        let x_2829 : f32 = u_xlat72;
        let x_2831 : f32 = u_xlat8.x;
        let x_2833 : f32 = u_xlat73;
        u_xlat0.x = ((x_2829 * x_2831) + x_2833);
      } else {
        let x_2837 : vec4<f32> = u_xlat2;
        let x_2840 : vec4<f32> = x_401.x_MainLightShadowmapSize;
        let x_2843 : vec2<f32> = ((vec2<f32>(x_2837.x, x_2837.y) * vec2<f32>(x_2840.z, x_2840.w)) + vec2<f32>(0.5f, 0.5f));
        let x_2844 : vec4<f32> = u_xlat8;
        u_xlat8 = vec4<f32>(x_2843.x, x_2843.y, x_2844.z, x_2844.w);
        let x_2846 : vec4<f32> = u_xlat8;
        let x_2848 : vec2<f32> = floor(vec2<f32>(x_2846.x, x_2846.y));
        let x_2849 : vec4<f32> = u_xlat8;
        u_xlat8 = vec4<f32>(x_2848.x, x_2848.y, x_2849.z, x_2849.w);
        let x_2851 : vec4<f32> = u_xlat2;
        let x_2854 : vec4<f32> = x_401.x_MainLightShadowmapSize;
        let x_2857 : vec4<f32> = u_xlat8;
        u_xlat52 = ((vec2<f32>(x_2851.x, x_2851.y) * vec2<f32>(x_2854.z, x_2854.w)) + -(vec2<f32>(x_2857.x, x_2857.y)));
        let x_2861 : vec2<f32> = u_xlat52;
        u_xlat9 = (vec4<f32>(x_2861.x, x_2861.x, x_2861.y, x_2861.y) + vec4<f32>(0.5f, 1.0f, 0.5f, 1.0f));
        let x_2864 : vec4<f32> = u_xlat9;
        let x_2866 : vec4<f32> = u_xlat9;
        u_xlat10 = (vec4<f32>(x_2864.x, x_2864.x, x_2864.z, x_2864.z) * vec4<f32>(x_2866.x, x_2866.x, x_2866.z, x_2866.z));
        let x_2869 : vec4<f32> = u_xlat10;
        let x_2871 : vec2<f32> = (vec2<f32>(x_2869.y, x_2869.w) * vec2<f32>(0.040816002f, 0.040816002f));
        let x_2872 : vec4<f32> = u_xlat11;
        u_xlat11 = vec4<f32>(x_2872.x, x_2871.x, x_2872.z, x_2871.y);
        let x_2874 : vec4<f32> = u_xlat10;
        let x_2877 : vec2<f32> = u_xlat52;
        let x_2879 : vec2<f32> = ((vec2<f32>(x_2874.x, x_2874.z) * vec2<f32>(0.5f, 0.5f)) + -(x_2877));
        let x_2880 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_2879.x, x_2880.y, x_2879.y, x_2880.w);
        let x_2882 : vec2<f32> = u_xlat52;
        let x_2884 : vec2<f32> = (-(x_2882) + vec2<f32>(1.0f, 1.0f));
        let x_2885 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_2884.x, x_2884.y, x_2885.z, x_2885.w);
        let x_2887 : vec2<f32> = u_xlat52;
        u_xlat54 = min(x_2887, vec2<f32>(0.0f, 0.0f));
        let x_2889 : vec2<f32> = u_xlat54;
        let x_2891 : vec2<f32> = u_xlat54;
        let x_2893 : vec4<f32> = u_xlat10;
        let x_2895 : vec2<f32> = ((-(x_2889) * x_2891) + vec2<f32>(x_2893.x, x_2893.y));
        let x_2896 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_2895.x, x_2895.y, x_2896.z, x_2896.w);
        let x_2898 : vec2<f32> = u_xlat52;
        u_xlat54 = max(x_2898, vec2<f32>(0.0f, 0.0f));
        let x_2900 : vec2<f32> = u_xlat54;
        let x_2902 : vec2<f32> = u_xlat54;
        let x_2904 : vec4<f32> = u_xlat9;
        let x_2906 : vec2<f32> = ((-(x_2900) * x_2902) + vec2<f32>(x_2904.y, x_2904.w));
        let x_2907 : vec3<f32> = u_xlat31;
        u_xlat31 = vec3<f32>(x_2906.x, x_2907.y, x_2906.y);
        let x_2909 : vec4<f32> = u_xlat10;
        let x_2911 : vec2<f32> = (vec2<f32>(x_2909.x, x_2909.y) + vec2<f32>(2.0f, 2.0f));
        let x_2912 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_2911.x, x_2911.y, x_2912.z, x_2912.w);
        let x_2914 : vec3<f32> = u_xlat31;
        let x_2916 : vec2<f32> = (vec2<f32>(x_2914.x, x_2914.z) + vec2<f32>(2.0f, 2.0f));
        let x_2917 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_2917.x, x_2916.x, x_2917.z, x_2916.y);
        let x_2920 : f32 = u_xlat9.y;
        u_xlat12.z = (x_2920 * 0.081632003f);
        let x_2923 : vec4<f32> = u_xlat9;
        let x_2925 : vec3<f32> = (vec3<f32>(x_2923.z, x_2923.x, x_2923.w) * vec3<f32>(0.081632003f, 0.081632003f, 0.081632003f));
        let x_2926 : vec4<f32> = u_xlat13;
        u_xlat13 = vec4<f32>(x_2925.x, x_2925.y, x_2925.z, x_2926.w);
        let x_2928 : vec4<f32> = u_xlat10;
        let x_2930 : vec2<f32> = (vec2<f32>(x_2928.x, x_2928.y) * vec2<f32>(0.081632003f, 0.081632003f));
        let x_2931 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_2930.x, x_2930.y, x_2931.z, x_2931.w);
        let x_2934 : f32 = u_xlat13.y;
        u_xlat12.x = x_2934;
        let x_2936 : vec2<f32> = u_xlat52;
        let x_2939 : vec2<f32> = ((vec2<f32>(x_2936.x, x_2936.x) * vec2<f32>(-0.081632003f, 0.081632003f)) + vec2<f32>(0.163264006f, 0.081632003f));
        let x_2940 : vec4<f32> = u_xlat12;
        u_xlat12 = vec4<f32>(x_2940.x, x_2939.x, x_2940.z, x_2939.y);
        let x_2942 : vec2<f32> = u_xlat52;
        let x_2945 : vec2<f32> = ((vec2<f32>(x_2942.x, x_2942.x) * vec2<f32>(-0.081632003f, 0.081632003f)) + vec2<f32>(0.081632003f, 0.163264006f));
        let x_2946 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_2945.x, x_2946.y, x_2945.y, x_2946.w);
        let x_2949 : f32 = u_xlat9.x;
        u_xlat10.y = x_2949;
        let x_2952 : f32 = u_xlat11.y;
        u_xlat10.w = x_2952;
        let x_2954 : vec4<f32> = u_xlat10;
        let x_2955 : vec4<f32> = u_xlat12;
        u_xlat12 = (x_2954 + x_2955);
        let x_2957 : vec2<f32> = u_xlat52;
        let x_2960 : vec2<f32> = ((vec2<f32>(x_2957.y, x_2957.y) * vec2<f32>(-0.081632003f, 0.081632003f)) + vec2<f32>(0.163264006f, 0.081632003f));
        let x_2961 : vec4<f32> = u_xlat13;
        u_xlat13 = vec4<f32>(x_2961.x, x_2960.x, x_2961.z, x_2960.y);
        let x_2963 : vec2<f32> = u_xlat52;
        let x_2966 : vec2<f32> = ((vec2<f32>(x_2963.y, x_2963.y) * vec2<f32>(-0.081632003f, 0.081632003f)) + vec2<f32>(0.081632003f, 0.163264006f));
        let x_2967 : vec4<f32> = u_xlat11;
        u_xlat11 = vec4<f32>(x_2966.x, x_2967.y, x_2966.y, x_2967.w);
        let x_2970 : f32 = u_xlat9.y;
        u_xlat11.y = x_2970;
        let x_2972 : vec4<f32> = u_xlat11;
        let x_2973 : vec4<f32> = u_xlat13;
        u_xlat9 = (x_2972 + x_2973);
        let x_2975 : vec4<f32> = u_xlat10;
        let x_2976 : vec4<f32> = u_xlat12;
        u_xlat10 = (x_2975 / x_2976);
        let x_2978 : vec4<f32> = u_xlat10;
        u_xlat10 = (x_2978 + vec4<f32>(-3.5f, -1.5f, 0.5f, 2.5f));
        let x_2980 : vec4<f32> = u_xlat11;
        let x_2981 : vec4<f32> = u_xlat9;
        u_xlat11 = (x_2980 / x_2981);
        let x_2983 : vec4<f32> = u_xlat11;
        u_xlat11 = (x_2983 + vec4<f32>(-3.5f, -1.5f, 0.5f, 2.5f));
        let x_2985 : vec4<f32> = u_xlat10;
        let x_2988 : vec4<f32> = x_401.x_MainLightShadowmapSize;
        u_xlat10 = (vec4<f32>(x_2985.w, x_2985.x, x_2985.y, x_2985.z) * vec4<f32>(x_2988.x, x_2988.x, x_2988.x, x_2988.x));
        let x_2991 : vec4<f32> = u_xlat11;
        let x_2994 : vec4<f32> = x_401.x_MainLightShadowmapSize;
        u_xlat11 = (vec4<f32>(x_2991.x, x_2991.w, x_2991.y, x_2991.z) * vec4<f32>(x_2994.y, x_2994.y, x_2994.y, x_2994.y));
        let x_2997 : vec4<f32> = u_xlat10;
        let x_2998 : vec3<f32> = vec3<f32>(x_2997.y, x_2997.z, x_2997.w);
        let x_2999 : vec4<f32> = u_xlat13;
        u_xlat13 = vec4<f32>(x_2998.x, x_2999.y, x_2998.y, x_2998.z);
        let x_3002 : f32 = u_xlat11.x;
        u_xlat13.y = x_3002;
        let x_3004 : vec4<f32> = u_xlat8;
        let x_3007 : vec4<f32> = x_401.x_MainLightShadowmapSize;
        let x_3010 : vec4<f32> = u_xlat13;
        u_xlat14 = ((vec4<f32>(x_3004.x, x_3004.y, x_3004.x, x_3004.y) * vec4<f32>(x_3007.x, x_3007.y, x_3007.x, x_3007.y)) + vec4<f32>(x_3010.x, x_3010.y, x_3010.z, x_3010.y));
        let x_3013 : vec4<f32> = u_xlat8;
        let x_3016 : vec4<f32> = x_401.x_MainLightShadowmapSize;
        let x_3019 : vec4<f32> = u_xlat13;
        u_xlat52 = ((vec2<f32>(x_3013.x, x_3013.y) * vec2<f32>(x_3016.x, x_3016.y)) + vec2<f32>(x_3019.w, x_3019.y));
        let x_3023 : f32 = u_xlat13.y;
        u_xlat10.y = x_3023;
        let x_3026 : f32 = u_xlat11.z;
        u_xlat13.y = x_3026;
        let x_3028 : vec4<f32> = u_xlat8;
        let x_3031 : vec4<f32> = x_401.x_MainLightShadowmapSize;
        let x_3034 : vec4<f32> = u_xlat13;
        u_xlat15 = ((vec4<f32>(x_3028.x, x_3028.y, x_3028.x, x_3028.y) * vec4<f32>(x_3031.x, x_3031.y, x_3031.x, x_3031.y)) + vec4<f32>(x_3034.x, x_3034.y, x_3034.z, x_3034.y));
        let x_3037 : vec4<f32> = u_xlat8;
        let x_3040 : vec4<f32> = x_401.x_MainLightShadowmapSize;
        let x_3043 : vec4<f32> = u_xlat13;
        let x_3045 : vec2<f32> = ((vec2<f32>(x_3037.x, x_3037.y) * vec2<f32>(x_3040.x, x_3040.y)) + vec2<f32>(x_3043.w, x_3043.y));
        let x_3046 : vec4<f32> = u_xlat16;
        u_xlat16 = vec4<f32>(x_3045.x, x_3045.y, x_3046.z, x_3046.w);
        let x_3049 : f32 = u_xlat13.y;
        u_xlat10.z = x_3049;
        let x_3051 : vec4<f32> = u_xlat8;
        let x_3054 : vec4<f32> = x_401.x_MainLightShadowmapSize;
        let x_3057 : vec4<f32> = u_xlat10;
        u_xlat17 = ((vec4<f32>(x_3051.x, x_3051.y, x_3051.x, x_3051.y) * vec4<f32>(x_3054.x, x_3054.y, x_3054.x, x_3054.y)) + vec4<f32>(x_3057.x, x_3057.y, x_3057.x, x_3057.z));
        let x_3061 : f32 = u_xlat11.w;
        u_xlat13.y = x_3061;
        let x_3063 : vec4<f32> = u_xlat8;
        let x_3066 : vec4<f32> = x_401.x_MainLightShadowmapSize;
        let x_3069 : vec4<f32> = u_xlat13;
        u_xlat18 = ((vec4<f32>(x_3063.x, x_3063.y, x_3063.x, x_3063.y) * vec4<f32>(x_3066.x, x_3066.y, x_3066.x, x_3066.y)) + vec4<f32>(x_3069.x, x_3069.y, x_3069.z, x_3069.y));
        let x_3072 : vec4<f32> = u_xlat8;
        let x_3075 : vec4<f32> = x_401.x_MainLightShadowmapSize;
        let x_3078 : vec4<f32> = u_xlat13;
        u_xlat32 = ((vec2<f32>(x_3072.x, x_3072.y) * vec2<f32>(x_3075.x, x_3075.y)) + vec2<f32>(x_3078.w, x_3078.y));
        let x_3082 : f32 = u_xlat13.y;
        u_xlat10.w = x_3082;
        let x_3084 : vec4<f32> = u_xlat8;
        let x_3087 : vec4<f32> = x_401.x_MainLightShadowmapSize;
        let x_3090 : vec4<f32> = u_xlat10;
        u_xlat60 = ((vec2<f32>(x_3084.x, x_3084.y) * vec2<f32>(x_3087.x, x_3087.y)) + vec2<f32>(x_3090.x, x_3090.w));
        let x_3093 : vec4<f32> = u_xlat13;
        let x_3094 : vec3<f32> = vec3<f32>(x_3093.x, x_3093.z, x_3093.w);
        let x_3095 : vec4<f32> = u_xlat11;
        u_xlat11 = vec4<f32>(x_3094.x, x_3095.y, x_3094.y, x_3094.z);
        let x_3097 : vec4<f32> = u_xlat8;
        let x_3100 : vec4<f32> = x_401.x_MainLightShadowmapSize;
        let x_3103 : vec4<f32> = u_xlat11;
        u_xlat13 = ((vec4<f32>(x_3097.x, x_3097.y, x_3097.x, x_3097.y) * vec4<f32>(x_3100.x, x_3100.y, x_3100.x, x_3100.y)) + vec4<f32>(x_3103.x, x_3103.y, x_3103.z, x_3103.y));
        let x_3106 : vec4<f32> = u_xlat8;
        let x_3109 : vec4<f32> = x_401.x_MainLightShadowmapSize;
        let x_3112 : vec4<f32> = u_xlat11;
        u_xlat55 = ((vec2<f32>(x_3106.x, x_3106.y) * vec2<f32>(x_3109.x, x_3109.y)) + vec2<f32>(x_3112.w, x_3112.y));
        let x_3116 : f32 = u_xlat10.x;
        u_xlat11.x = x_3116;
        let x_3118 : vec4<f32> = u_xlat8;
        let x_3121 : vec4<f32> = x_401.x_MainLightShadowmapSize;
        let x_3124 : vec4<f32> = u_xlat11;
        let x_3126 : vec2<f32> = ((vec2<f32>(x_3118.x, x_3118.y) * vec2<f32>(x_3121.x, x_3121.y)) + vec2<f32>(x_3124.x, x_3124.y));
        let x_3127 : vec4<f32> = u_xlat8;
        u_xlat8 = vec4<f32>(x_3126.x, x_3126.y, x_3127.z, x_3127.w);
        let x_3129 : vec4<f32> = u_xlat9;
        let x_3131 : vec4<f32> = u_xlat12;
        u_xlat19 = (vec4<f32>(x_3129.x, x_3129.x, x_3129.x, x_3129.x) * x_3131);
        let x_3133 : vec4<f32> = u_xlat9;
        let x_3135 : vec4<f32> = u_xlat12;
        u_xlat20 = (vec4<f32>(x_3133.y, x_3133.y, x_3133.y, x_3133.y) * x_3135);
        let x_3137 : vec4<f32> = u_xlat9;
        let x_3139 : vec4<f32> = u_xlat12;
        u_xlat21 = (vec4<f32>(x_3137.z, x_3137.z, x_3137.z, x_3137.z) * x_3139);
        let x_3141 : vec4<f32> = u_xlat9;
        let x_3143 : vec4<f32> = u_xlat12;
        u_xlat9 = (vec4<f32>(x_3141.w, x_3141.w, x_3141.w, x_3141.w) * x_3143);
        let x_3146 : vec4<f32> = u_xlat14;
        let x_3147 : vec2<f32> = vec2<f32>(x_3146.x, x_3146.y);
        let x_3149 : f32 = u_xlat2.z;
        txVec43 = vec3<f32>(x_3147.x, x_3147.y, x_3149);
        let x_3156 : vec3<f32> = txVec43;
        let x_3158 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_3156.xy, x_3156.z);
        u_xlat72 = x_3158;
        let x_3160 : vec4<f32> = u_xlat14;
        let x_3161 : vec2<f32> = vec2<f32>(x_3160.z, x_3160.w);
        let x_3163 : f32 = u_xlat2.z;
        txVec44 = vec3<f32>(x_3161.x, x_3161.y, x_3163);
        let x_3170 : vec3<f32> = txVec44;
        let x_3172 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_3170.xy, x_3170.z);
        u_xlat73 = x_3172;
        let x_3173 : f32 = u_xlat73;
        let x_3175 : f32 = u_xlat19.y;
        u_xlat73 = (x_3173 * x_3175);
        let x_3178 : f32 = u_xlat19.x;
        let x_3179 : f32 = u_xlat72;
        let x_3181 : f32 = u_xlat73;
        u_xlat72 = ((x_3178 * x_3179) + x_3181);
        let x_3184 : vec2<f32> = u_xlat52;
        let x_3186 : f32 = u_xlat2.z;
        txVec45 = vec3<f32>(x_3184.x, x_3184.y, x_3186);
        let x_3193 : vec3<f32> = txVec45;
        let x_3195 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_3193.xy, x_3193.z);
        u_xlat73 = x_3195;
        let x_3197 : f32 = u_xlat19.z;
        let x_3198 : f32 = u_xlat73;
        let x_3200 : f32 = u_xlat72;
        u_xlat72 = ((x_3197 * x_3198) + x_3200);
        let x_3203 : vec4<f32> = u_xlat17;
        let x_3204 : vec2<f32> = vec2<f32>(x_3203.x, x_3203.y);
        let x_3206 : f32 = u_xlat2.z;
        txVec46 = vec3<f32>(x_3204.x, x_3204.y, x_3206);
        let x_3213 : vec3<f32> = txVec46;
        let x_3215 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_3213.xy, x_3213.z);
        u_xlat73 = x_3215;
        let x_3217 : f32 = u_xlat19.w;
        let x_3218 : f32 = u_xlat73;
        let x_3220 : f32 = u_xlat72;
        u_xlat72 = ((x_3217 * x_3218) + x_3220);
        let x_3223 : vec4<f32> = u_xlat15;
        let x_3224 : vec2<f32> = vec2<f32>(x_3223.x, x_3223.y);
        let x_3226 : f32 = u_xlat2.z;
        txVec47 = vec3<f32>(x_3224.x, x_3224.y, x_3226);
        let x_3233 : vec3<f32> = txVec47;
        let x_3235 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_3233.xy, x_3233.z);
        u_xlat73 = x_3235;
        let x_3237 : f32 = u_xlat20.x;
        let x_3238 : f32 = u_xlat73;
        let x_3240 : f32 = u_xlat72;
        u_xlat72 = ((x_3237 * x_3238) + x_3240);
        let x_3243 : vec4<f32> = u_xlat15;
        let x_3244 : vec2<f32> = vec2<f32>(x_3243.z, x_3243.w);
        let x_3246 : f32 = u_xlat2.z;
        txVec48 = vec3<f32>(x_3244.x, x_3244.y, x_3246);
        let x_3253 : vec3<f32> = txVec48;
        let x_3255 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_3253.xy, x_3253.z);
        u_xlat73 = x_3255;
        let x_3257 : f32 = u_xlat20.y;
        let x_3258 : f32 = u_xlat73;
        let x_3260 : f32 = u_xlat72;
        u_xlat72 = ((x_3257 * x_3258) + x_3260);
        let x_3263 : vec4<f32> = u_xlat16;
        let x_3264 : vec2<f32> = vec2<f32>(x_3263.x, x_3263.y);
        let x_3266 : f32 = u_xlat2.z;
        txVec49 = vec3<f32>(x_3264.x, x_3264.y, x_3266);
        let x_3273 : vec3<f32> = txVec49;
        let x_3275 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_3273.xy, x_3273.z);
        u_xlat73 = x_3275;
        let x_3277 : f32 = u_xlat20.z;
        let x_3278 : f32 = u_xlat73;
        let x_3280 : f32 = u_xlat72;
        u_xlat72 = ((x_3277 * x_3278) + x_3280);
        let x_3283 : vec4<f32> = u_xlat17;
        let x_3284 : vec2<f32> = vec2<f32>(x_3283.z, x_3283.w);
        let x_3286 : f32 = u_xlat2.z;
        txVec50 = vec3<f32>(x_3284.x, x_3284.y, x_3286);
        let x_3293 : vec3<f32> = txVec50;
        let x_3295 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_3293.xy, x_3293.z);
        u_xlat73 = x_3295;
        let x_3297 : f32 = u_xlat20.w;
        let x_3298 : f32 = u_xlat73;
        let x_3300 : f32 = u_xlat72;
        u_xlat72 = ((x_3297 * x_3298) + x_3300);
        let x_3303 : vec4<f32> = u_xlat18;
        let x_3304 : vec2<f32> = vec2<f32>(x_3303.x, x_3303.y);
        let x_3306 : f32 = u_xlat2.z;
        txVec51 = vec3<f32>(x_3304.x, x_3304.y, x_3306);
        let x_3313 : vec3<f32> = txVec51;
        let x_3315 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_3313.xy, x_3313.z);
        u_xlat73 = x_3315;
        let x_3317 : f32 = u_xlat21.x;
        let x_3318 : f32 = u_xlat73;
        let x_3320 : f32 = u_xlat72;
        u_xlat72 = ((x_3317 * x_3318) + x_3320);
        let x_3323 : vec4<f32> = u_xlat18;
        let x_3324 : vec2<f32> = vec2<f32>(x_3323.z, x_3323.w);
        let x_3326 : f32 = u_xlat2.z;
        txVec52 = vec3<f32>(x_3324.x, x_3324.y, x_3326);
        let x_3333 : vec3<f32> = txVec52;
        let x_3335 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_3333.xy, x_3333.z);
        u_xlat73 = x_3335;
        let x_3337 : f32 = u_xlat21.y;
        let x_3338 : f32 = u_xlat73;
        let x_3340 : f32 = u_xlat72;
        u_xlat72 = ((x_3337 * x_3338) + x_3340);
        let x_3343 : vec2<f32> = u_xlat32;
        let x_3345 : f32 = u_xlat2.z;
        txVec53 = vec3<f32>(x_3343.x, x_3343.y, x_3345);
        let x_3352 : vec3<f32> = txVec53;
        let x_3354 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_3352.xy, x_3352.z);
        u_xlat73 = x_3354;
        let x_3356 : f32 = u_xlat21.z;
        let x_3357 : f32 = u_xlat73;
        let x_3359 : f32 = u_xlat72;
        u_xlat72 = ((x_3356 * x_3357) + x_3359);
        let x_3362 : vec2<f32> = u_xlat60;
        let x_3364 : f32 = u_xlat2.z;
        txVec54 = vec3<f32>(x_3362.x, x_3362.y, x_3364);
        let x_3371 : vec3<f32> = txVec54;
        let x_3373 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_3371.xy, x_3371.z);
        u_xlat73 = x_3373;
        let x_3375 : f32 = u_xlat21.w;
        let x_3376 : f32 = u_xlat73;
        let x_3378 : f32 = u_xlat72;
        u_xlat72 = ((x_3375 * x_3376) + x_3378);
        let x_3381 : vec4<f32> = u_xlat13;
        let x_3382 : vec2<f32> = vec2<f32>(x_3381.x, x_3381.y);
        let x_3384 : f32 = u_xlat2.z;
        txVec55 = vec3<f32>(x_3382.x, x_3382.y, x_3384);
        let x_3391 : vec3<f32> = txVec55;
        let x_3393 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_3391.xy, x_3391.z);
        u_xlat73 = x_3393;
        let x_3395 : f32 = u_xlat9.x;
        let x_3396 : f32 = u_xlat73;
        let x_3398 : f32 = u_xlat72;
        u_xlat72 = ((x_3395 * x_3396) + x_3398);
        let x_3401 : vec4<f32> = u_xlat13;
        let x_3402 : vec2<f32> = vec2<f32>(x_3401.z, x_3401.w);
        let x_3404 : f32 = u_xlat2.z;
        txVec56 = vec3<f32>(x_3402.x, x_3402.y, x_3404);
        let x_3411 : vec3<f32> = txVec56;
        let x_3413 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_3411.xy, x_3411.z);
        u_xlat73 = x_3413;
        let x_3415 : f32 = u_xlat9.y;
        let x_3416 : f32 = u_xlat73;
        let x_3418 : f32 = u_xlat72;
        u_xlat72 = ((x_3415 * x_3416) + x_3418);
        let x_3421 : vec2<f32> = u_xlat55;
        let x_3423 : f32 = u_xlat2.z;
        txVec57 = vec3<f32>(x_3421.x, x_3421.y, x_3423);
        let x_3430 : vec3<f32> = txVec57;
        let x_3432 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_3430.xy, x_3430.z);
        u_xlat73 = x_3432;
        let x_3434 : f32 = u_xlat9.z;
        let x_3435 : f32 = u_xlat73;
        let x_3437 : f32 = u_xlat72;
        u_xlat72 = ((x_3434 * x_3435) + x_3437);
        let x_3440 : vec4<f32> = u_xlat8;
        let x_3441 : vec2<f32> = vec2<f32>(x_3440.x, x_3440.y);
        let x_3443 : f32 = u_xlat2.z;
        txVec58 = vec3<f32>(x_3441.x, x_3441.y, x_3443);
        let x_3450 : vec3<f32> = txVec58;
        let x_3452 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_3450.xy, x_3450.z);
        u_xlat73 = x_3452;
        let x_3454 : f32 = u_xlat9.w;
        let x_3455 : f32 = u_xlat73;
        let x_3457 : f32 = u_xlat72;
        u_xlat0.x = ((x_3454 * x_3455) + x_3457);
      }
    }
  } else {
    let x_3462 : vec4<f32> = u_xlat2;
    let x_3463 : vec2<f32> = vec2<f32>(x_3462.x, x_3462.y);
    let x_3465 : f32 = u_xlat2.z;
    txVec59 = vec3<f32>(x_3463.x, x_3463.y, x_3465);
    let x_3472 : vec3<f32> = txVec59;
    let x_3474 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_3472.xy, x_3472.z);
    u_xlat0.x = x_3474;
  }
  let x_3477 : f32 = u_xlat0.x;
  let x_3479 : f32 = x_401.x_MainLightShadowParams.x;
  let x_3481 : f32 = u_xlat68;
  u_xlat0.x = ((x_3477 * x_3479) + x_3481);
  let x_3484 : bool = u_xlatb3;
  if (x_3484) {
    x_3485 = 1.0f;
  } else {
    let x_3490 : f32 = u_xlat0.x;
    x_3485 = x_3490;
  }
  let x_3491 : f32 = x_3485;
  u_xlat0.x = x_3491;
  let x_3493 : vec3<f32> = vs_INTERP0;
  let x_3495 : vec3<f32> = x_160.x_WorldSpaceCameraPos;
  let x_3497 : vec3<f32> = (x_3493 + -(x_3495));
  let x_3498 : vec4<f32> = u_xlat2;
  u_xlat2 = vec4<f32>(x_3497.x, x_3497.y, x_3497.z, x_3498.w);
  let x_3500 : vec4<f32> = u_xlat2;
  let x_3502 : vec4<f32> = u_xlat2;
  u_xlat2.x = dot(vec3<f32>(x_3500.x, x_3500.y, x_3500.z), vec3<f32>(x_3502.x, x_3502.y, x_3502.z));
  let x_3507 : f32 = u_xlat2.x;
  let x_3509 : f32 = x_401.x_MainLightShadowParams.z;
  let x_3512 : f32 = x_401.x_MainLightShadowParams.w;
  u_xlat2.x = ((x_3507 * x_3509) + x_3512);
  let x_3516 : f32 = u_xlat2.x;
  u_xlat2.x = clamp(x_3516, 0.0f, 1.0f);
  let x_3521 : f32 = u_xlat0.x;
  u_xlat24 = (-(x_3521) + 1.0f);
  let x_3525 : f32 = u_xlat2.x;
  let x_3526 : f32 = u_xlat24;
  let x_3529 : f32 = u_xlat0.x;
  u_xlat0.x = ((x_3525 * x_3526) + x_3529);
  let x_3538 : f32 = x_3536.x_MainLightCookieTextureFormat;
  u_xlatb2.x = !((x_3538 == -1.0f));
  let x_3542 : bool = u_xlatb2.x;
  if (x_3542) {
    let x_3545 : vec3<f32> = vs_INTERP0;
    let x_3548 : vec4<f32> = x_3536.x_MainLightWorldToLight[1i];
    let x_3550 : vec2<f32> = (vec2<f32>(x_3545.y, x_3545.y) * vec2<f32>(x_3548.x, x_3548.y));
    let x_3551 : vec4<f32> = u_xlat2;
    u_xlat2 = vec4<f32>(x_3550.x, x_3550.y, x_3551.z, x_3551.w);
    let x_3554 : vec4<f32> = x_3536.x_MainLightWorldToLight[0i];
    let x_3556 : vec3<f32> = vs_INTERP0;
    let x_3559 : vec4<f32> = u_xlat2;
    let x_3561 : vec2<f32> = ((vec2<f32>(x_3554.x, x_3554.y) * vec2<f32>(x_3556.x, x_3556.x)) + vec2<f32>(x_3559.x, x_3559.y));
    let x_3562 : vec4<f32> = u_xlat2;
    u_xlat2 = vec4<f32>(x_3561.x, x_3561.y, x_3562.z, x_3562.w);
    let x_3565 : vec4<f32> = x_3536.x_MainLightWorldToLight[2i];
    let x_3567 : vec3<f32> = vs_INTERP0;
    let x_3570 : vec4<f32> = u_xlat2;
    let x_3572 : vec2<f32> = ((vec2<f32>(x_3565.x, x_3565.y) * vec2<f32>(x_3567.z, x_3567.z)) + vec2<f32>(x_3570.x, x_3570.y));
    let x_3573 : vec4<f32> = u_xlat2;
    u_xlat2 = vec4<f32>(x_3572.x, x_3572.y, x_3573.z, x_3573.w);
    let x_3575 : vec4<f32> = u_xlat2;
    let x_3578 : vec4<f32> = x_3536.x_MainLightWorldToLight[3i];
    let x_3580 : vec2<f32> = (vec2<f32>(x_3575.x, x_3575.y) + vec2<f32>(x_3578.x, x_3578.y));
    let x_3581 : vec4<f32> = u_xlat2;
    u_xlat2 = vec4<f32>(x_3580.x, x_3580.y, x_3581.z, x_3581.w);
    let x_3583 : vec4<f32> = u_xlat2;
    let x_3586 : vec2<f32> = ((vec2<f32>(x_3583.x, x_3583.y) * vec2<f32>(0.5f, 0.5f)) + vec2<f32>(0.5f, 0.5f));
    let x_3587 : vec4<f32> = u_xlat2;
    u_xlat2 = vec4<f32>(x_3586.x, x_3586.y, x_3587.z, x_3587.w);
    let x_3594 : vec4<f32> = u_xlat2;
    let x_3597 : f32 = x_160.x_GlobalMipBias.x;
    let x_3598 : vec4<f32> = textureSampleBias(x_MainLightCookieTexture, sampler_MainLightCookieTexture, vec2<f32>(x_3594.x, x_3594.y), x_3597);
    u_xlat2 = x_3598;
    let x_3601 : f32 = x_3536.x_MainLightCookieTextureFormat;
    let x_3603 : f32 = x_3536.x_MainLightCookieTextureFormat;
    let x_3605 : f32 = x_3536.x_MainLightCookieTextureFormat;
    let x_3607 : f32 = x_3536.x_MainLightCookieTextureFormat;
    let x_3608 : vec4<f32> = vec4<f32>(x_3601, x_3603, x_3605, x_3607);
    let x_3615 : vec4<bool> = (vec4<f32>(x_3608.x, x_3608.y, x_3608.z, x_3608.w) == vec4<f32>(0.0f, 1.0f, 0.0f, 0.0f));
    u_xlatb8 = vec2<bool>(x_3615.x, x_3615.y);
    let x_3618 : bool = u_xlatb8.y;
    if (x_3618) {
      let x_3623 : f32 = u_xlat2.w;
      x_3619 = x_3623;
    } else {
      let x_3626 : f32 = u_xlat2.x;
      x_3619 = x_3626;
    }
    let x_3627 : f32 = x_3619;
    u_xlat68 = x_3627;
    let x_3629 : bool = u_xlatb8.x;
    if (x_3629) {
      let x_3633 : vec4<f32> = u_xlat2;
      x_3630 = vec3<f32>(x_3633.x, x_3633.y, x_3633.z);
    } else {
      let x_3636 : f32 = u_xlat68;
      x_3630 = vec3<f32>(x_3636, x_3636, x_3636);
    }
    let x_3638 : vec3<f32> = x_3630;
    let x_3639 : vec4<f32> = u_xlat2;
    u_xlat2 = vec4<f32>(x_3638.x, x_3638.y, x_3638.z, x_3639.w);
  } else {
    u_xlat2.x = 1.0f;
    u_xlat2.y = 1.0f;
    u_xlat2.z = 1.0f;
  }
  let x_3645 : vec4<f32> = u_xlat2;
  let x_3648 : vec4<f32> = x_160.x_MainLightColor;
  let x_3650 : vec3<f32> = (vec3<f32>(x_3645.x, x_3645.y, x_3645.z) * vec3<f32>(x_3648.x, x_3648.y, x_3648.z));
  let x_3651 : vec4<f32> = u_xlat2;
  u_xlat2 = vec4<f32>(x_3650.x, x_3650.y, x_3650.z, x_3651.w);
  let x_3653 : f32 = u_xlat50;
  let x_3655 : vec4<f32> = u_xlat2;
  let x_3657 : vec3<f32> = (vec3<f32>(x_3653, x_3653, x_3653) * vec3<f32>(x_3655.x, x_3655.y, x_3655.z));
  let x_3658 : vec4<f32> = u_xlat2;
  u_xlat2 = vec4<f32>(x_3657.x, x_3657.y, x_3657.z, x_3658.w);
  let x_3660 : vec3<f32> = u_xlat5;
  let x_3662 : vec4<f32> = u_xlat4;
  u_xlat68 = dot(-(x_3660), vec3<f32>(x_3662.x, x_3662.y, x_3662.z));
  let x_3665 : f32 = u_xlat68;
  let x_3666 : f32 = u_xlat68;
  u_xlat68 = (x_3665 + x_3666);
  let x_3668 : vec4<f32> = u_xlat4;
  let x_3670 : f32 = u_xlat68;
  let x_3674 : vec3<f32> = u_xlat5;
  let x_3676 : vec3<f32> = ((vec3<f32>(x_3668.x, x_3668.y, x_3668.z) * -(vec3<f32>(x_3670, x_3670, x_3670))) + -(x_3674));
  let x_3677 : vec4<f32> = u_xlat8;
  u_xlat8 = vec4<f32>(x_3676.x, x_3676.y, x_3676.z, x_3677.w);
  let x_3679 : vec4<f32> = u_xlat4;
  let x_3681 : vec3<f32> = u_xlat5;
  u_xlat68 = dot(vec3<f32>(x_3679.x, x_3679.y, x_3679.z), x_3681);
  let x_3683 : f32 = u_xlat68;
  u_xlat68 = clamp(x_3683, 0.0f, 1.0f);
  let x_3685 : f32 = u_xlat68;
  u_xlat68 = (-(x_3685) + 1.0f);
  let x_3688 : f32 = u_xlat68;
  let x_3689 : f32 = u_xlat68;
  u_xlat68 = (x_3688 * x_3689);
  let x_3691 : f32 = u_xlat68;
  let x_3692 : f32 = u_xlat68;
  u_xlat68 = (x_3691 * x_3692);
  let x_3695 : f32 = u_xlat47.x;
  u_xlat3.x = ((-(x_3695) * 0.699999988f) + 1.700000048f);
  let x_3703 : f32 = u_xlat3.x;
  let x_3705 : f32 = u_xlat47.x;
  u_xlat3.x = (x_3703 * x_3705);
  let x_3709 : f32 = u_xlat3.x;
  u_xlat3.x = (x_3709 * 6.0f);
  let x_3721 : vec4<f32> = u_xlat8;
  let x_3724 : f32 = u_xlat3.x;
  let x_3725 : vec4<f32> = textureSampleLevel(unity_SpecCube0, samplerunity_SpecCube0, vec3<f32>(x_3721.x, x_3721.y, x_3721.z), x_3724);
  u_xlat8 = x_3725;
  let x_3727 : f32 = u_xlat8.w;
  u_xlat3.x = (x_3727 + -1.0f);
  let x_3731 : f32 = x_95.unity_SpecCube0_HDR.w;
  let x_3733 : f32 = u_xlat3.x;
  u_xlat3.x = ((x_3731 * x_3733) + 1.0f);
  let x_3738 : f32 = u_xlat3.x;
  u_xlat3.x = max(x_3738, 0.0f);
  let x_3742 : f32 = u_xlat3.x;
  u_xlat3.x = log2(x_3742);
  let x_3746 : f32 = u_xlat3.x;
  let x_3748 : f32 = x_95.unity_SpecCube0_HDR.y;
  u_xlat3.x = (x_3746 * x_3748);
  let x_3752 : f32 = u_xlat3.x;
  u_xlat3.x = exp2(x_3752);
  let x_3756 : f32 = u_xlat3.x;
  let x_3758 : f32 = x_95.unity_SpecCube0_HDR.x;
  u_xlat3.x = (x_3756 * x_3758);
  let x_3761 : vec4<f32> = u_xlat8;
  let x_3763 : vec4<f32> = u_xlat3;
  let x_3765 : vec3<f32> = (vec3<f32>(x_3761.x, x_3761.y, x_3761.z) * vec3<f32>(x_3763.x, x_3763.x, x_3763.x));
  let x_3766 : vec4<f32> = u_xlat8;
  u_xlat8 = vec4<f32>(x_3765.x, x_3765.y, x_3765.z, x_3766.w);
  let x_3768 : f32 = u_xlat69;
  let x_3770 : f32 = u_xlat69;
  let x_3774 : vec2<f32> = ((vec2<f32>(x_3768, x_3768) * vec2<f32>(x_3770, x_3770)) + vec2<f32>(-1.0f, 1.0f));
  let x_3775 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_3774.x, x_3775.y, x_3774.y, x_3775.w);
  let x_3778 : f32 = u_xlat3.z;
  u_xlat47.x = (1.0f / x_3778);
  let x_3781 : f32 = u_xlat71;
  u_xlat69 = (x_3781 + -0.039999999f);
  let x_3784 : f32 = u_xlat68;
  let x_3785 : f32 = u_xlat69;
  u_xlat68 = ((x_3784 * x_3785) + 0.039999999f);
  let x_3789 : f32 = u_xlat68;
  let x_3791 : f32 = u_xlat47.x;
  u_xlat68 = (x_3789 * x_3791);
  let x_3793 : f32 = u_xlat68;
  let x_3795 : vec4<f32> = u_xlat8;
  let x_3797 : vec3<f32> = (vec3<f32>(x_3793, x_3793, x_3793) * vec3<f32>(x_3795.x, x_3795.y, x_3795.z));
  let x_3798 : vec4<f32> = u_xlat8;
  u_xlat8 = vec4<f32>(x_3797.x, x_3797.y, x_3797.z, x_3798.w);
  let x_3800 : vec3<f32> = u_xlat22;
  let x_3801 : vec3<f32> = u_xlat7;
  let x_3803 : vec4<f32> = u_xlat8;
  u_xlat22 = ((x_3800 * x_3801) + vec3<f32>(x_3803.x, x_3803.y, x_3803.z));
  let x_3807 : f32 = u_xlat0.x;
  let x_3809 : f32 = x_95.unity_LightData.z;
  u_xlat0.x = (x_3807 * x_3809);
  let x_3812 : vec4<f32> = u_xlat4;
  let x_3815 : vec4<f32> = x_160.x_MainLightPosition;
  u_xlat68 = dot(vec3<f32>(x_3812.x, x_3812.y, x_3812.z), vec3<f32>(x_3815.x, x_3815.y, x_3815.z));
  let x_3818 : f32 = u_xlat68;
  u_xlat68 = clamp(x_3818, 0.0f, 1.0f);
  let x_3821 : f32 = u_xlat0.x;
  let x_3822 : f32 = u_xlat68;
  u_xlat0.x = (x_3821 * x_3822);
  let x_3825 : vec3<f32> = u_xlat0;
  let x_3827 : vec4<f32> = u_xlat2;
  let x_3829 : vec3<f32> = (vec3<f32>(x_3825.x, x_3825.x, x_3825.x) * vec3<f32>(x_3827.x, x_3827.y, x_3827.z));
  let x_3830 : vec4<f32> = u_xlat2;
  u_xlat2 = vec4<f32>(x_3829.x, x_3829.y, x_3829.z, x_3830.w);
  let x_3832 : vec3<f32> = u_xlat5;
  let x_3834 : vec4<f32> = x_160.x_MainLightPosition;
  let x_3836 : vec3<f32> = (x_3832 + vec3<f32>(x_3834.x, x_3834.y, x_3834.z));
  let x_3837 : vec4<f32> = u_xlat8;
  u_xlat8 = vec4<f32>(x_3836.x, x_3836.y, x_3836.z, x_3837.w);
  let x_3839 : vec4<f32> = u_xlat8;
  let x_3841 : vec4<f32> = u_xlat8;
  u_xlat0.x = dot(vec3<f32>(x_3839.x, x_3839.y, x_3839.z), vec3<f32>(x_3841.x, x_3841.y, x_3841.z));
  let x_3846 : f32 = u_xlat0.x;
  u_xlat0.x = max(x_3846, 1.17549435e-37f);
  let x_3850 : f32 = u_xlat0.x;
  u_xlat0.x = inverseSqrt(x_3850);
  let x_3853 : vec3<f32> = u_xlat0;
  let x_3855 : vec4<f32> = u_xlat8;
  let x_3857 : vec3<f32> = (vec3<f32>(x_3853.x, x_3853.x, x_3853.x) * vec3<f32>(x_3855.x, x_3855.y, x_3855.z));
  let x_3858 : vec4<f32> = u_xlat8;
  u_xlat8 = vec4<f32>(x_3857.x, x_3857.y, x_3857.z, x_3858.w);
  let x_3860 : vec4<f32> = u_xlat4;
  let x_3862 : vec4<f32> = u_xlat8;
  u_xlat0.x = dot(vec3<f32>(x_3860.x, x_3860.y, x_3860.z), vec3<f32>(x_3862.x, x_3862.y, x_3862.z));
  let x_3867 : f32 = u_xlat0.x;
  u_xlat0.x = clamp(x_3867, 0.0f, 1.0f);
  let x_3871 : vec4<f32> = x_160.x_MainLightPosition;
  let x_3873 : vec4<f32> = u_xlat8;
  u_xlat68 = dot(vec3<f32>(x_3871.x, x_3871.y, x_3871.z), vec3<f32>(x_3873.x, x_3873.y, x_3873.z));
  let x_3876 : f32 = u_xlat68;
  u_xlat68 = clamp(x_3876, 0.0f, 1.0f);
  let x_3879 : f32 = u_xlat0.x;
  let x_3881 : f32 = u_xlat0.x;
  u_xlat0.x = (x_3879 * x_3881);
  let x_3885 : f32 = u_xlat0.x;
  let x_3887 : f32 = u_xlat3.x;
  u_xlat0.x = ((x_3885 * x_3887) + 1.000010014f);
  let x_3892 : f32 = u_xlat68;
  let x_3893 : f32 = u_xlat68;
  u_xlat68 = (x_3892 * x_3893);
  let x_3896 : f32 = u_xlat0.x;
  let x_3898 : f32 = u_xlat0.x;
  u_xlat0.x = (x_3896 * x_3898);
  let x_3901 : f32 = u_xlat68;
  u_xlat68 = max(x_3901, 0.100000001f);
  let x_3905 : f32 = u_xlat0.x;
  let x_3906 : f32 = u_xlat68;
  u_xlat0.x = (x_3905 * x_3906);
  let x_3909 : f32 = u_xlat28;
  let x_3911 : f32 = u_xlat0.x;
  u_xlat0.x = (x_3909 * x_3911);
  let x_3914 : f32 = u_xlat70;
  let x_3916 : f32 = u_xlat0.x;
  u_xlat0.x = (x_3914 / x_3916);
  let x_3919 : vec3<f32> = u_xlat0;
  let x_3923 : vec3<f32> = u_xlat7;
  let x_3924 : vec3<f32> = ((vec3<f32>(x_3919.x, x_3919.x, x_3919.x) * vec3<f32>(0.039999999f, 0.039999999f, 0.039999999f)) + x_3923);
  let x_3925 : vec4<f32> = u_xlat8;
  u_xlat8 = vec4<f32>(x_3924.x, x_3924.y, x_3924.z, x_3925.w);
  let x_3927 : vec4<f32> = u_xlat2;
  let x_3929 : vec4<f32> = u_xlat8;
  let x_3931 : vec3<f32> = (vec3<f32>(x_3927.x, x_3927.y, x_3927.z) * vec3<f32>(x_3929.x, x_3929.y, x_3929.z));
  let x_3932 : vec4<f32> = u_xlat2;
  u_xlat2 = vec4<f32>(x_3931.x, x_3931.y, x_3931.z, x_3932.w);
  let x_3935 : f32 = x_160.x_AdditionalLightsCount.x;
  let x_3937 : f32 = x_95.unity_LightData.y;
  u_xlat0.x = min(x_3935, x_3937);
  let x_3941 : f32 = u_xlat0.x;
  u_xlatu0 = bitcast<u32>(i32(x_3941));
  let x_3945 : f32 = x_3536.x_AdditionalLightsCookieAtlasTextureFormat;
  let x_3947 : f32 = x_3536.x_AdditionalLightsCookieAtlasTextureFormat;
  let x_3949 : f32 = x_3536.x_AdditionalLightsCookieAtlasTextureFormat;
  let x_3951 : f32 = x_3536.x_AdditionalLightsCookieAtlasTextureFormat;
  let x_3952 : vec4<f32> = vec4<f32>(x_3945, x_3947, x_3949, x_3951);
  let x_3959 : vec4<bool> = (vec4<f32>(x_3952.x, x_3952.y, x_3952.z, x_3952.w) == vec4<f32>(0.0f, 1.0f, 0.0f, 1.0f));
  u_xlatb47 = vec2<bool>(x_3959.x, x_3959.y);
  u_xlat8.x = 0.0f;
  u_xlat8.y = 0.0f;
  u_xlat8.z = 0.0f;
  u_xlatu_loop_1 = 0u;
  loop {
    let x_3970 : u32 = u_xlatu_loop_1;
    let x_3971 : u32 = u_xlatu0;
    if ((x_3970 < x_3971)) {
    } else {
      break;
    }
    let x_3974 : u32 = u_xlatu_loop_1;
    u_xlatu71 = (x_3974 >> 2u);
    let x_3977 : u32 = u_xlatu_loop_1;
    u_xlati72 = bitcast<i32>((x_3977 & 3u));
    let x_3980 : u32 = u_xlatu71;
    let x_3983 : vec4<f32> = x_95.unity_LightIndices[bitcast<i32>(x_3980)];
    let x_3993 : i32 = u_xlati72;
    indexable = array<vec4<u32>, 4u>(vec4<u32>(1065353216u, 0u, 0u, 0u), vec4<u32>(0u, 1065353216u, 0u, 0u), vec4<u32>(0u, 0u, 1065353216u, 0u), vec4<u32>(0u, 0u, 0u, 1065353216u));
    let x_3998 : vec4<u32> = indexable[x_3993];
    u_xlat71 = dot(x_3983, bitcast<vec4<f32>>(x_3998));
    let x_4001 : f32 = u_xlat71;
    u_xlatu71 = bitcast<u32>(i32(x_4001));
    let x_4004 : vec3<f32> = vs_INTERP0;
    let x_4016 : u32 = u_xlatu71;
    let x_4019 : vec4<f32> = x_4015.x_AdditionalLightsPosition[bitcast<i32>(x_4016)];
    let x_4022 : u32 = u_xlatu71;
    let x_4025 : vec4<f32> = x_4015.x_AdditionalLightsPosition[bitcast<i32>(x_4022)];
    let x_4027 : vec3<f32> = ((-(x_4004) * vec3<f32>(x_4019.w, x_4019.w, x_4019.w)) + vec3<f32>(x_4025.x, x_4025.y, x_4025.z));
    let x_4028 : vec4<f32> = u_xlat9;
    u_xlat9 = vec4<f32>(x_4027.x, x_4027.y, x_4027.z, x_4028.w);
    let x_4030 : vec4<f32> = u_xlat9;
    let x_4032 : vec4<f32> = u_xlat9;
    u_xlat72 = dot(vec3<f32>(x_4030.x, x_4030.y, x_4030.z), vec3<f32>(x_4032.x, x_4032.y, x_4032.z));
    let x_4035 : f32 = u_xlat72;
    u_xlat72 = max(x_4035, 6.10351562e-05f);
    let x_4038 : f32 = u_xlat72;
    u_xlat73 = inverseSqrt(x_4038);
    let x_4040 : f32 = u_xlat73;
    let x_4042 : vec4<f32> = u_xlat9;
    let x_4044 : vec3<f32> = (vec3<f32>(x_4040, x_4040, x_4040) * vec3<f32>(x_4042.x, x_4042.y, x_4042.z));
    let x_4045 : vec4<f32> = u_xlat10;
    u_xlat10 = vec4<f32>(x_4044.x, x_4044.y, x_4044.z, x_4045.w);
    let x_4048 : f32 = u_xlat72;
    u_xlat74 = (1.0f / x_4048);
    let x_4050 : f32 = u_xlat72;
    let x_4051 : u32 = u_xlatu71;
    let x_4054 : f32 = x_4015.x_AdditionalLightsAttenuation[bitcast<i32>(x_4051)].x;
    u_xlat72 = (x_4050 * x_4054);
    let x_4056 : f32 = u_xlat72;
    let x_4058 : f32 = u_xlat72;
    u_xlat72 = ((-(x_4056) * x_4058) + 1.0f);
    let x_4061 : f32 = u_xlat72;
    u_xlat72 = max(x_4061, 0.0f);
    let x_4063 : f32 = u_xlat72;
    let x_4064 : f32 = u_xlat72;
    u_xlat72 = (x_4063 * x_4064);
    let x_4066 : f32 = u_xlat72;
    let x_4067 : f32 = u_xlat74;
    u_xlat72 = (x_4066 * x_4067);
    let x_4069 : u32 = u_xlatu71;
    let x_4072 : vec4<f32> = x_4015.x_AdditionalLightsSpotDir[bitcast<i32>(x_4069)];
    let x_4074 : vec4<f32> = u_xlat10;
    u_xlat74 = dot(vec3<f32>(x_4072.x, x_4072.y, x_4072.z), vec3<f32>(x_4074.x, x_4074.y, x_4074.z));
    let x_4077 : f32 = u_xlat74;
    let x_4078 : u32 = u_xlatu71;
    let x_4081 : f32 = x_4015.x_AdditionalLightsAttenuation[bitcast<i32>(x_4078)].z;
    let x_4083 : u32 = u_xlatu71;
    let x_4086 : f32 = x_4015.x_AdditionalLightsAttenuation[bitcast<i32>(x_4083)].w;
    u_xlat74 = ((x_4077 * x_4081) + x_4086);
    let x_4088 : f32 = u_xlat74;
    u_xlat74 = clamp(x_4088, 0.0f, 1.0f);
    let x_4090 : f32 = u_xlat74;
    let x_4091 : f32 = u_xlat74;
    u_xlat74 = (x_4090 * x_4091);
    let x_4093 : f32 = u_xlat72;
    let x_4094 : f32 = u_xlat74;
    u_xlat72 = (x_4093 * x_4094);
    let x_4097 : u32 = u_xlatu71;
    u_xlatu74 = (x_4097 >> 5u);
    let x_4100 : u32 = u_xlatu71;
    u_xlati75 = (1i << bitcast<u32>((bitcast<i32>(x_4100) & 31i)));
    let x_4106 : i32 = u_xlati75;
    let x_4108 : u32 = u_xlatu74;
    let x_4111 : f32 = x_3536.x_AdditionalLightsCookieEnableBits[bitcast<i32>(x_4108)].el;
    u_xlati74 = bitcast<i32>((bitcast<u32>(x_4106) & bitcast<u32>(x_4111)));
    let x_4115 : i32 = u_xlati74;
    if ((x_4115 != 0i)) {
      let x_4125 : u32 = u_xlatu71;
      let x_4128 : f32 = x_4124.x_AdditionalLightsLightTypes[bitcast<i32>(x_4125)].el;
      u_xlati74 = i32(x_4128);
      let x_4130 : i32 = u_xlati74;
      u_xlati75 = select(1i, 0i, (x_4130 != 0i));
      let x_4134 : u32 = u_xlatu71;
      u_xlati76 = (bitcast<i32>(x_4134) << bitcast<u32>(2i));
      let x_4137 : i32 = u_xlati75;
      if ((x_4137 != 0i)) {
        let x_4141 : vec3<f32> = vs_INTERP0;
        let x_4143 : i32 = u_xlati76;
        let x_4146 : i32 = u_xlati76;
        let x_4150 : vec4<f32> = x_4124.x_AdditionalLightsWorldToLights[((x_4143 + 1i) / 4i)][((x_4146 + 1i) % 4i)];
        let x_4152 : vec3<f32> = (vec3<f32>(x_4141.y, x_4141.y, x_4141.y) * vec3<f32>(x_4150.x, x_4150.y, x_4150.w));
        let x_4153 : vec4<f32> = u_xlat11;
        u_xlat11 = vec4<f32>(x_4152.x, x_4152.y, x_4152.z, x_4153.w);
        let x_4155 : i32 = u_xlati76;
        let x_4157 : i32 = u_xlati76;
        let x_4160 : vec4<f32> = x_4124.x_AdditionalLightsWorldToLights[(x_4155 / 4i)][(x_4157 % 4i)];
        let x_4162 : vec3<f32> = vs_INTERP0;
        let x_4165 : vec4<f32> = u_xlat11;
        let x_4167 : vec3<f32> = ((vec3<f32>(x_4160.x, x_4160.y, x_4160.w) * vec3<f32>(x_4162.x, x_4162.x, x_4162.x)) + vec3<f32>(x_4165.x, x_4165.y, x_4165.z));
        let x_4168 : vec4<f32> = u_xlat11;
        u_xlat11 = vec4<f32>(x_4167.x, x_4167.y, x_4167.z, x_4168.w);
        let x_4170 : i32 = u_xlati76;
        let x_4173 : i32 = u_xlati76;
        let x_4177 : vec4<f32> = x_4124.x_AdditionalLightsWorldToLights[((x_4170 + 2i) / 4i)][((x_4173 + 2i) % 4i)];
        let x_4179 : vec3<f32> = vs_INTERP0;
        let x_4182 : vec4<f32> = u_xlat11;
        let x_4184 : vec3<f32> = ((vec3<f32>(x_4177.x, x_4177.y, x_4177.w) * vec3<f32>(x_4179.z, x_4179.z, x_4179.z)) + vec3<f32>(x_4182.x, x_4182.y, x_4182.z));
        let x_4185 : vec4<f32> = u_xlat11;
        u_xlat11 = vec4<f32>(x_4184.x, x_4184.y, x_4184.z, x_4185.w);
        let x_4187 : vec4<f32> = u_xlat11;
        let x_4189 : i32 = u_xlati76;
        let x_4192 : i32 = u_xlati76;
        let x_4196 : vec4<f32> = x_4124.x_AdditionalLightsWorldToLights[((x_4189 + 3i) / 4i)][((x_4192 + 3i) % 4i)];
        let x_4198 : vec3<f32> = (vec3<f32>(x_4187.x, x_4187.y, x_4187.z) + vec3<f32>(x_4196.x, x_4196.y, x_4196.w));
        let x_4199 : vec4<f32> = u_xlat11;
        u_xlat11 = vec4<f32>(x_4198.x, x_4198.y, x_4198.z, x_4199.w);
        let x_4201 : vec4<f32> = u_xlat11;
        let x_4203 : vec4<f32> = u_xlat11;
        let x_4205 : vec2<f32> = (vec2<f32>(x_4201.x, x_4201.y) / vec2<f32>(x_4203.z, x_4203.z));
        let x_4206 : vec4<f32> = u_xlat11;
        u_xlat11 = vec4<f32>(x_4205.x, x_4205.y, x_4206.z, x_4206.w);
        let x_4208 : vec4<f32> = u_xlat11;
        let x_4211 : vec2<f32> = ((vec2<f32>(x_4208.x, x_4208.y) * vec2<f32>(0.5f, 0.5f)) + vec2<f32>(0.5f, 0.5f));
        let x_4212 : vec4<f32> = u_xlat11;
        u_xlat11 = vec4<f32>(x_4211.x, x_4211.y, x_4212.z, x_4212.w);
        let x_4214 : vec4<f32> = u_xlat11;
        let x_4218 : vec2<f32> = clamp(vec2<f32>(x_4214.x, x_4214.y), vec2<f32>(0.0f, 0.0f), vec2<f32>(1.0f, 1.0f));
        let x_4219 : vec4<f32> = u_xlat11;
        u_xlat11 = vec4<f32>(x_4218.x, x_4218.y, x_4219.z, x_4219.w);
        let x_4221 : u32 = u_xlatu71;
        let x_4224 : vec4<f32> = x_4124.x_AdditionalLightsCookieAtlasUVRects[bitcast<i32>(x_4221)];
        let x_4226 : vec4<f32> = u_xlat11;
        let x_4229 : u32 = u_xlatu71;
        let x_4232 : vec4<f32> = x_4124.x_AdditionalLightsCookieAtlasUVRects[bitcast<i32>(x_4229)];
        let x_4234 : vec2<f32> = ((vec2<f32>(x_4224.x, x_4224.y) * vec2<f32>(x_4226.x, x_4226.y)) + vec2<f32>(x_4232.z, x_4232.w));
        let x_4235 : vec4<f32> = u_xlat11;
        u_xlat11 = vec4<f32>(x_4234.x, x_4234.y, x_4235.z, x_4235.w);
      } else {
        let x_4239 : i32 = u_xlati74;
        u_xlatb74 = (x_4239 == 1i);
        let x_4241 : bool = u_xlatb74;
        u_xlati74 = select(0i, 1i, x_4241);
        let x_4243 : i32 = u_xlati74;
        if ((x_4243 != 0i)) {
          let x_4247 : vec3<f32> = vs_INTERP0;
          let x_4249 : i32 = u_xlati76;
          let x_4252 : i32 = u_xlati76;
          let x_4256 : vec4<f32> = x_4124.x_AdditionalLightsWorldToLights[((x_4249 + 1i) / 4i)][((x_4252 + 1i) % 4i)];
          u_xlat55 = (vec2<f32>(x_4247.y, x_4247.y) * vec2<f32>(x_4256.x, x_4256.y));
          let x_4259 : i32 = u_xlati76;
          let x_4261 : i32 = u_xlati76;
          let x_4264 : vec4<f32> = x_4124.x_AdditionalLightsWorldToLights[(x_4259 / 4i)][(x_4261 % 4i)];
          let x_4266 : vec3<f32> = vs_INTERP0;
          let x_4269 : vec2<f32> = u_xlat55;
          u_xlat55 = ((vec2<f32>(x_4264.x, x_4264.y) * vec2<f32>(x_4266.x, x_4266.x)) + x_4269);
          let x_4271 : i32 = u_xlati76;
          let x_4274 : i32 = u_xlati76;
          let x_4278 : vec4<f32> = x_4124.x_AdditionalLightsWorldToLights[((x_4271 + 2i) / 4i)][((x_4274 + 2i) % 4i)];
          let x_4280 : vec3<f32> = vs_INTERP0;
          let x_4283 : vec2<f32> = u_xlat55;
          u_xlat55 = ((vec2<f32>(x_4278.x, x_4278.y) * vec2<f32>(x_4280.z, x_4280.z)) + x_4283);
          let x_4285 : vec2<f32> = u_xlat55;
          let x_4286 : i32 = u_xlati76;
          let x_4289 : i32 = u_xlati76;
          let x_4293 : vec4<f32> = x_4124.x_AdditionalLightsWorldToLights[((x_4286 + 3i) / 4i)][((x_4289 + 3i) % 4i)];
          u_xlat55 = (x_4285 + vec2<f32>(x_4293.x, x_4293.y));
          let x_4296 : vec2<f32> = u_xlat55;
          u_xlat55 = ((x_4296 * vec2<f32>(0.5f, 0.5f)) + vec2<f32>(0.5f, 0.5f));
          let x_4299 : vec2<f32> = u_xlat55;
          u_xlat55 = fract(x_4299);
          let x_4301 : u32 = u_xlatu71;
          let x_4304 : vec4<f32> = x_4124.x_AdditionalLightsCookieAtlasUVRects[bitcast<i32>(x_4301)];
          let x_4306 : vec2<f32> = u_xlat55;
          let x_4308 : u32 = u_xlatu71;
          let x_4311 : vec4<f32> = x_4124.x_AdditionalLightsCookieAtlasUVRects[bitcast<i32>(x_4308)];
          let x_4313 : vec2<f32> = ((vec2<f32>(x_4304.x, x_4304.y) * x_4306) + vec2<f32>(x_4311.z, x_4311.w));
          let x_4314 : vec4<f32> = u_xlat11;
          u_xlat11 = vec4<f32>(x_4313.x, x_4313.y, x_4314.z, x_4314.w);
        } else {
          let x_4317 : vec3<f32> = vs_INTERP0;
          let x_4319 : i32 = u_xlati76;
          let x_4322 : i32 = u_xlati76;
          let x_4326 : vec4<f32> = x_4124.x_AdditionalLightsWorldToLights[((x_4319 + 1i) / 4i)][((x_4322 + 1i) % 4i)];
          u_xlat12 = (vec4<f32>(x_4317.y, x_4317.y, x_4317.y, x_4317.y) * x_4326);
          let x_4328 : i32 = u_xlati76;
          let x_4330 : i32 = u_xlati76;
          let x_4333 : vec4<f32> = x_4124.x_AdditionalLightsWorldToLights[(x_4328 / 4i)][(x_4330 % 4i)];
          let x_4334 : vec3<f32> = vs_INTERP0;
          let x_4337 : vec4<f32> = u_xlat12;
          u_xlat12 = ((x_4333 * vec4<f32>(x_4334.x, x_4334.x, x_4334.x, x_4334.x)) + x_4337);
          let x_4339 : i32 = u_xlati76;
          let x_4342 : i32 = u_xlati76;
          let x_4346 : vec4<f32> = x_4124.x_AdditionalLightsWorldToLights[((x_4339 + 2i) / 4i)][((x_4342 + 2i) % 4i)];
          let x_4347 : vec3<f32> = vs_INTERP0;
          let x_4350 : vec4<f32> = u_xlat12;
          u_xlat12 = ((x_4346 * vec4<f32>(x_4347.z, x_4347.z, x_4347.z, x_4347.z)) + x_4350);
          let x_4352 : vec4<f32> = u_xlat12;
          let x_4353 : i32 = u_xlati76;
          let x_4356 : i32 = u_xlati76;
          let x_4360 : vec4<f32> = x_4124.x_AdditionalLightsWorldToLights[((x_4353 + 3i) / 4i)][((x_4356 + 3i) % 4i)];
          u_xlat12 = (x_4352 + x_4360);
          let x_4362 : vec4<f32> = u_xlat12;
          let x_4364 : vec4<f32> = u_xlat12;
          let x_4366 : vec3<f32> = (vec3<f32>(x_4362.x, x_4362.y, x_4362.z) / vec3<f32>(x_4364.w, x_4364.w, x_4364.w));
          let x_4367 : vec4<f32> = u_xlat12;
          u_xlat12 = vec4<f32>(x_4366.x, x_4366.y, x_4366.z, x_4367.w);
          let x_4369 : vec4<f32> = u_xlat12;
          let x_4371 : vec4<f32> = u_xlat12;
          u_xlat74 = dot(vec3<f32>(x_4369.x, x_4369.y, x_4369.z), vec3<f32>(x_4371.x, x_4371.y, x_4371.z));
          let x_4374 : f32 = u_xlat74;
          u_xlat74 = inverseSqrt(x_4374);
          let x_4376 : f32 = u_xlat74;
          let x_4378 : vec4<f32> = u_xlat12;
          let x_4380 : vec3<f32> = (vec3<f32>(x_4376, x_4376, x_4376) * vec3<f32>(x_4378.x, x_4378.y, x_4378.z));
          let x_4381 : vec4<f32> = u_xlat12;
          u_xlat12 = vec4<f32>(x_4380.x, x_4380.y, x_4380.z, x_4381.w);
          let x_4383 : vec4<f32> = u_xlat12;
          u_xlat74 = dot(abs(vec3<f32>(x_4383.x, x_4383.y, x_4383.z)), vec3<f32>(1.0f, 1.0f, 1.0f));
          let x_4388 : f32 = u_xlat74;
          u_xlat74 = max(x_4388, 0.000001f);
          let x_4391 : f32 = u_xlat74;
          u_xlat74 = (1.0f / x_4391);
          let x_4393 : f32 = u_xlat74;
          let x_4395 : vec4<f32> = u_xlat12;
          let x_4397 : vec3<f32> = (vec3<f32>(x_4393, x_4393, x_4393) * vec3<f32>(x_4395.z, x_4395.x, x_4395.y));
          let x_4398 : vec4<f32> = u_xlat13;
          u_xlat13 = vec4<f32>(x_4397.x, x_4397.y, x_4397.z, x_4398.w);
          let x_4401 : f32 = u_xlat13.x;
          u_xlat13.x = -(x_4401);
          let x_4405 : f32 = u_xlat13.x;
          u_xlat13.x = clamp(x_4405, 0.0f, 1.0f);
          let x_4409 : vec4<f32> = u_xlat13;
          let x_4412 : vec4<bool> = (vec4<f32>(x_4409.y, x_4409.z, x_4409.y, x_4409.z) >= vec4<f32>(0.0f, 0.0f, 0.0f, 0.0f));
          u_xlatb55 = vec2<bool>(x_4412.x, x_4412.y);
          let x_4415 : bool = u_xlatb55.x;
          if (x_4415) {
            let x_4420 : f32 = u_xlat13.x;
            x_4416 = x_4420;
          } else {
            let x_4423 : f32 = u_xlat13.x;
            x_4416 = -(x_4423);
          }
          let x_4425 : f32 = x_4416;
          u_xlat55.x = x_4425;
          let x_4428 : bool = u_xlatb55.y;
          if (x_4428) {
            let x_4433 : f32 = u_xlat13.x;
            x_4429 = x_4433;
          } else {
            let x_4436 : f32 = u_xlat13.x;
            x_4429 = -(x_4436);
          }
          let x_4438 : f32 = x_4429;
          u_xlat55.y = x_4438;
          let x_4440 : vec4<f32> = u_xlat12;
          let x_4442 : f32 = u_xlat74;
          let x_4445 : vec2<f32> = u_xlat55;
          u_xlat55 = ((vec2<f32>(x_4440.x, x_4440.y) * vec2<f32>(x_4442, x_4442)) + x_4445);
          let x_4447 : vec2<f32> = u_xlat55;
          u_xlat55 = ((x_4447 * vec2<f32>(0.5f, 0.5f)) + vec2<f32>(0.5f, 0.5f));
          let x_4450 : vec2<f32> = u_xlat55;
          u_xlat55 = clamp(x_4450, vec2<f32>(0.0f, 0.0f), vec2<f32>(1.0f, 1.0f));
          let x_4454 : u32 = u_xlatu71;
          let x_4457 : vec4<f32> = x_4124.x_AdditionalLightsCookieAtlasUVRects[bitcast<i32>(x_4454)];
          let x_4459 : vec2<f32> = u_xlat55;
          let x_4461 : u32 = u_xlatu71;
          let x_4464 : vec4<f32> = x_4124.x_AdditionalLightsCookieAtlasUVRects[bitcast<i32>(x_4461)];
          let x_4466 : vec2<f32> = ((vec2<f32>(x_4457.x, x_4457.y) * x_4459) + vec2<f32>(x_4464.z, x_4464.w));
          let x_4467 : vec4<f32> = u_xlat11;
          u_xlat11 = vec4<f32>(x_4466.x, x_4466.y, x_4467.z, x_4467.w);
        }
      }
      let x_4474 : vec4<f32> = u_xlat11;
      let x_4477 : f32 = x_160.x_GlobalMipBias.x;
      let x_4478 : vec4<f32> = textureSampleBias(x_AdditionalLightsCookieAtlasTexture, sampler_AdditionalLightsCookieAtlasTexture, vec2<f32>(x_4474.x, x_4474.y), x_4477);
      u_xlat11 = x_4478;
      let x_4480 : bool = u_xlatb47.y;
      if (x_4480) {
        let x_4485 : f32 = u_xlat11.w;
        x_4481 = x_4485;
      } else {
        let x_4488 : f32 = u_xlat11.x;
        x_4481 = x_4488;
      }
      let x_4489 : f32 = x_4481;
      u_xlat74 = x_4489;
      let x_4491 : bool = u_xlatb47.x;
      if (x_4491) {
        let x_4495 : vec4<f32> = u_xlat11;
        x_4492 = vec3<f32>(x_4495.x, x_4495.y, x_4495.z);
      } else {
        let x_4498 : f32 = u_xlat74;
        x_4492 = vec3<f32>(x_4498, x_4498, x_4498);
      }
      let x_4500 : vec3<f32> = x_4492;
      let x_4501 : vec4<f32> = u_xlat11;
      u_xlat11 = vec4<f32>(x_4500.x, x_4500.y, x_4500.z, x_4501.w);
    } else {
      u_xlat11.x = 1.0f;
      u_xlat11.y = 1.0f;
      u_xlat11.z = 1.0f;
    }
    let x_4507 : vec4<f32> = u_xlat11;
    let x_4509 : u32 = u_xlatu71;
    let x_4512 : vec4<f32> = x_4015.x_AdditionalLightsColor[bitcast<i32>(x_4509)];
    let x_4514 : vec3<f32> = (vec3<f32>(x_4507.x, x_4507.y, x_4507.z) * vec3<f32>(x_4512.x, x_4512.y, x_4512.z));
    let x_4515 : vec4<f32> = u_xlat11;
    u_xlat11 = vec4<f32>(x_4514.x, x_4514.y, x_4514.z, x_4515.w);
    let x_4517 : f32 = u_xlat50;
    let x_4519 : vec4<f32> = u_xlat11;
    let x_4521 : vec3<f32> = (vec3<f32>(x_4517, x_4517, x_4517) * vec3<f32>(x_4519.x, x_4519.y, x_4519.z));
    let x_4522 : vec4<f32> = u_xlat11;
    u_xlat11 = vec4<f32>(x_4521.x, x_4521.y, x_4521.z, x_4522.w);
    let x_4524 : vec4<f32> = u_xlat4;
    let x_4526 : vec4<f32> = u_xlat10;
    u_xlat71 = dot(vec3<f32>(x_4524.x, x_4524.y, x_4524.z), vec3<f32>(x_4526.x, x_4526.y, x_4526.z));
    let x_4529 : f32 = u_xlat71;
    u_xlat71 = clamp(x_4529, 0.0f, 1.0f);
    let x_4531 : f32 = u_xlat71;
    let x_4532 : f32 = u_xlat72;
    u_xlat71 = (x_4531 * x_4532);
    let x_4534 : f32 = u_xlat71;
    let x_4536 : vec4<f32> = u_xlat11;
    let x_4538 : vec3<f32> = (vec3<f32>(x_4534, x_4534, x_4534) * vec3<f32>(x_4536.x, x_4536.y, x_4536.z));
    let x_4539 : vec4<f32> = u_xlat11;
    u_xlat11 = vec4<f32>(x_4538.x, x_4538.y, x_4538.z, x_4539.w);
    let x_4541 : vec4<f32> = u_xlat9;
    let x_4543 : f32 = u_xlat73;
    let x_4546 : vec3<f32> = u_xlat5;
    let x_4547 : vec3<f32> = ((vec3<f32>(x_4541.x, x_4541.y, x_4541.z) * vec3<f32>(x_4543, x_4543, x_4543)) + x_4546);
    let x_4548 : vec4<f32> = u_xlat9;
    u_xlat9 = vec4<f32>(x_4547.x, x_4547.y, x_4547.z, x_4548.w);
    let x_4550 : vec4<f32> = u_xlat9;
    let x_4552 : vec4<f32> = u_xlat9;
    u_xlat71 = dot(vec3<f32>(x_4550.x, x_4550.y, x_4550.z), vec3<f32>(x_4552.x, x_4552.y, x_4552.z));
    let x_4555 : f32 = u_xlat71;
    u_xlat71 = max(x_4555, 1.17549435e-37f);
    let x_4557 : f32 = u_xlat71;
    u_xlat71 = inverseSqrt(x_4557);
    let x_4559 : f32 = u_xlat71;
    let x_4561 : vec4<f32> = u_xlat9;
    let x_4563 : vec3<f32> = (vec3<f32>(x_4559, x_4559, x_4559) * vec3<f32>(x_4561.x, x_4561.y, x_4561.z));
    let x_4564 : vec4<f32> = u_xlat9;
    u_xlat9 = vec4<f32>(x_4563.x, x_4563.y, x_4563.z, x_4564.w);
    let x_4566 : vec4<f32> = u_xlat4;
    let x_4568 : vec4<f32> = u_xlat9;
    u_xlat71 = dot(vec3<f32>(x_4566.x, x_4566.y, x_4566.z), vec3<f32>(x_4568.x, x_4568.y, x_4568.z));
    let x_4571 : f32 = u_xlat71;
    u_xlat71 = clamp(x_4571, 0.0f, 1.0f);
    let x_4573 : vec4<f32> = u_xlat10;
    let x_4575 : vec4<f32> = u_xlat9;
    u_xlat72 = dot(vec3<f32>(x_4573.x, x_4573.y, x_4573.z), vec3<f32>(x_4575.x, x_4575.y, x_4575.z));
    let x_4578 : f32 = u_xlat72;
    u_xlat72 = clamp(x_4578, 0.0f, 1.0f);
    let x_4580 : f32 = u_xlat71;
    let x_4581 : f32 = u_xlat71;
    u_xlat71 = (x_4580 * x_4581);
    let x_4583 : f32 = u_xlat71;
    let x_4585 : f32 = u_xlat3.x;
    u_xlat71 = ((x_4583 * x_4585) + 1.000010014f);
    let x_4588 : f32 = u_xlat72;
    let x_4589 : f32 = u_xlat72;
    u_xlat72 = (x_4588 * x_4589);
    let x_4591 : f32 = u_xlat71;
    let x_4592 : f32 = u_xlat71;
    u_xlat71 = (x_4591 * x_4592);
    let x_4594 : f32 = u_xlat72;
    u_xlat72 = max(x_4594, 0.100000001f);
    let x_4596 : f32 = u_xlat71;
    let x_4597 : f32 = u_xlat72;
    u_xlat71 = (x_4596 * x_4597);
    let x_4599 : f32 = u_xlat28;
    let x_4600 : f32 = u_xlat71;
    u_xlat71 = (x_4599 * x_4600);
    let x_4602 : f32 = u_xlat70;
    let x_4603 : f32 = u_xlat71;
    u_xlat71 = (x_4602 / x_4603);
    let x_4605 : f32 = u_xlat71;
    let x_4608 : vec3<f32> = u_xlat7;
    let x_4609 : vec3<f32> = ((vec3<f32>(x_4605, x_4605, x_4605) * vec3<f32>(0.039999999f, 0.039999999f, 0.039999999f)) + x_4608);
    let x_4610 : vec4<f32> = u_xlat9;
    u_xlat9 = vec4<f32>(x_4609.x, x_4609.y, x_4609.z, x_4610.w);
    let x_4612 : vec4<f32> = u_xlat9;
    let x_4614 : vec4<f32> = u_xlat11;
    let x_4617 : vec4<f32> = u_xlat8;
    let x_4619 : vec3<f32> = ((vec3<f32>(x_4612.x, x_4612.y, x_4612.z) * vec3<f32>(x_4614.x, x_4614.y, x_4614.z)) + vec3<f32>(x_4617.x, x_4617.y, x_4617.z));
    let x_4620 : vec4<f32> = u_xlat8;
    u_xlat8 = vec4<f32>(x_4619.x, x_4619.y, x_4619.z, x_4620.w);

    continuing {
      let x_4622 : u32 = u_xlatu_loop_1;
      u_xlatu_loop_1 = (x_4622 + bitcast<u32>(1i));
    }
  }
  let x_4624 : vec3<f32> = u_xlat22;
  let x_4625 : vec4<f32> = u_xlat6;
  let x_4628 : vec4<f32> = u_xlat2;
  u_xlat0 = ((x_4624 * vec3<f32>(x_4625.x, x_4625.x, x_4625.x)) + vec3<f32>(x_4628.x, x_4628.y, x_4628.z));
  let x_4631 : vec4<f32> = u_xlat8;
  let x_4633 : vec3<f32> = u_xlat0;
  u_xlat0 = (vec3<f32>(x_4631.x, x_4631.y, x_4631.z) + x_4633);
  let x_4637 : vec4<f32> = vs_INTERP4;
  let x_4639 : vec3<f32> = u_xlat1;
  let x_4641 : vec3<f32> = u_xlat0;
  let x_4642 : vec3<f32> = ((vec3<f32>(x_4637.w, x_4637.w, x_4637.w) * x_4639) + x_4641);
  let x_4643 : vec4<f32> = SV_Target0;
  SV_Target0 = vec4<f32>(x_4642.x, x_4642.y, x_4642.z, x_4643.w);
  let x_4645 : bool = u_xlatb25;
  let x_4646 : f32 = u_xlat67;
  SV_Target0.w = select(1.0f, x_4646, x_4645);
  return;
}

struct main_out {
  @location(0)
  SV_Target0_1 : vec4<f32>,
}

@fragment
fn main(@builtin(position) gl_FragCoord_param : vec4<f32>, @location(1) vs_INTERP1_param : vec3<f32>, @location(2) vs_INTERP2_param : vec4<f32>, @location(0) vs_INTERP0_param : vec3<f32>, @location(3) vs_INTERP3_param : vec4<f32>, @location(4) vs_INTERP4_param : vec4<f32>) -> main_out {
  gl_FragCoord = gl_FragCoord_param;
  vs_INTERP1 = vs_INTERP1_param;
  vs_INTERP2 = vs_INTERP2_param;
  vs_INTERP0 = vs_INTERP0_param;
  vs_INTERP3 = vs_INTERP3_param;
  vs_INTERP4 = vs_INTERP4_param;
  main_1();
  return main_out(SV_Target0);
}

