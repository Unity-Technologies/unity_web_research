diagnostic(off, derivative_uniformity);

alias Arr = array<vec4<f32>, 2u>;

struct UnityPerDraw {
  /* @offset(0) */
  unity_ObjectToWorld : mat4x4<f32>,
  /* @offset(64) */
  unity_WorldToObject : mat4x4<f32>,
  /* @offset(128) */
  unity_LODFade : vec4<f32>,
  /* @offset(144) */
  unity_WorldTransformParams : vec4<f32>,
  /* @offset(160) */
  unity_RenderingLayer : vec4<f32>,
  /* @offset(176) */
  unity_LightData : vec4<f32>,
  /* @offset(192) */
  unity_LightIndices : Arr,
  /* @offset(224) */
  unity_ProbesOcclusion : vec4<f32>,
  /* @offset(240) */
  unity_SpecCube0_HDR : vec4<f32>,
  /* @offset(256) */
  unity_SpecCube1_HDR : vec4<f32>,
  /* @offset(272) */
  unity_SpecCube0_BoxMax : vec4<f32>,
  /* @offset(288) */
  unity_SpecCube0_BoxMin : vec4<f32>,
  /* @offset(304) */
  unity_SpecCube0_ProbePosition : vec4<f32>,
  /* @offset(320) */
  unity_SpecCube1_BoxMax : vec4<f32>,
  /* @offset(336) */
  unity_SpecCube1_BoxMin : vec4<f32>,
  /* @offset(352) */
  unity_SpecCube1_ProbePosition : vec4<f32>,
  /* @offset(368) */
  unity_LightmapST : vec4<f32>,
  /* @offset(384) */
  unity_DynamicLightmapST : vec4<f32>,
  /* @offset(400) */
  unity_SHAr : vec4<f32>,
  /* @offset(416) */
  unity_SHAg : vec4<f32>,
  /* @offset(432) */
  unity_SHAb : vec4<f32>,
  /* @offset(448) */
  unity_SHBr : vec4<f32>,
  /* @offset(464) */
  unity_SHBg : vec4<f32>,
  /* @offset(480) */
  unity_SHBb : vec4<f32>,
  /* @offset(496) */
  unity_SHC : vec4<f32>,
  /* @offset(512) */
  unity_RendererBounds_Min : vec4<f32>,
  /* @offset(528) */
  unity_RendererBounds_Max : vec4<f32>,
  /* @offset(544) */
  unity_MatrixPreviousM : mat4x4<f32>,
  /* @offset(608) */
  unity_MatrixPreviousMI : mat4x4<f32>,
  /* @offset(672) */
  unity_MotionVectorsParams : vec4<f32>,
  /* @offset(688) */
  unity_SpriteColor : vec4<f32>,
  /* @offset(704) */
  unity_SpriteProps : vec4<f32>,
}

struct PGlobals {
  /* @offset(0) */
  x_GlobalMipBias : vec2<f32>,
  /* @offset(8) */
  x_AlphaToMaskAvailable : f32,
  /* @offset(16) */
  x_MainLightPosition : vec4<f32>,
  /* @offset(32) */
  x_MainLightColor : vec4<f32>,
  /* @offset(48) */
  x_AdditionalLightsCount : vec4<f32>,
  /* @offset(64) */
  x_WorldSpaceCameraPos : vec3<f32>,
  /* @offset(80) */
  x_ProjectionParams : vec4<f32>,
  /* @offset(96) */
  x_ScreenParams : vec4<f32>,
  /* @offset(112) */
  unity_OrthoParams : vec4<f32>,
  /* @offset(128) */
  unity_FogParams : vec4<f32>,
  /* @offset(144) */
  unity_FogColor : vec4<f32>,
  /* @offset(160) */
  unity_MatrixV : mat4x4<f32>,
}

struct UnityPerMaterial {
  /* @offset(0) */
  Texture2D_B222E8F_TexelSize : vec4<f32>,
  /* @offset(16) */
  Color_C30C7CA3 : vec4<f32>,
  /* @offset(32) */
  Texture2D_D9BFD5F1_TexelSize : vec4<f32>,
}

alias Arr_1 = array<mat4x4<f32>, 5u>;

alias Arr_2 = array<vec4<f32>, 32u>;

alias Arr_3 = array<mat4x4<f32>, 32u>;

alias Arr_4 = array<vec4<f32>, 32u>;

struct LightShadows {
  /* @offset(0) */
  x_MainLightWorldToShadow : Arr_1,
  /* @offset(320) */
  x_CascadeShadowSplitSpheres0 : vec4<f32>,
  /* @offset(336) */
  x_CascadeShadowSplitSpheres1 : vec4<f32>,
  /* @offset(352) */
  x_CascadeShadowSplitSpheres2 : vec4<f32>,
  /* @offset(368) */
  x_CascadeShadowSplitSpheres3 : vec4<f32>,
  /* @offset(384) */
  x_CascadeShadowSplitSphereRadii : vec4<f32>,
  /* @offset(400) */
  x_MainLightShadowOffset0 : vec4<f32>,
  /* @offset(416) */
  x_MainLightShadowOffset1 : vec4<f32>,
  /* @offset(432) */
  x_MainLightShadowParams : vec4<f32>,
  /* @offset(448) */
  x_MainLightShadowmapSize : vec4<f32>,
  /* @offset(464) */
  x_AdditionalShadowOffset0 : vec4<f32>,
  /* @offset(480) */
  x_AdditionalShadowOffset1 : vec4<f32>,
  /* @offset(496) */
  x_AdditionalShadowFadeParams : vec4<f32>,
  /* @offset(512) */
  x_AdditionalShadowmapSize : vec4<f32>,
  /* @offset(528) */
  x_AdditionalShadowParams : Arr_4,
  /* @offset(1040) */
  x_AdditionalLightsWorldToShadow : Arr_3,
}

alias Arr_5 = array<vec4<f32>, 32u>;

alias Arr_6 = array<vec4<f32>, 32u>;

alias Arr_7 = array<vec4<f32>, 32u>;

alias Arr_8 = array<vec4<f32>, 32u>;

struct strided_arr {
  @size(16)
  el : f32,
}

alias Arr_9 = array<strided_arr, 32u>;

struct AdditionalLights {
  /* @offset(0) */
  x_AdditionalLightsPosition : Arr_4,
  /* @offset(512) */
  x_AdditionalLightsColor : Arr_4,
  /* @offset(1024) */
  x_AdditionalLightsAttenuation : Arr_4,
  /* @offset(1536) */
  x_AdditionalLightsSpotDir : Arr_4,
  /* @offset(2048) */
  x_AdditionalLightsOcclusionProbes : Arr_4,
  /* @offset(2560) */
  x_AdditionalLightsLayerMasks : Arr_9,
}

var<private> u_xlat0 : vec3<f32>;

var<private> vs_INTERP9 : vec3<f32>;

var<private> u_xlatb26 : vec2<bool>;

var<private> vs_INTERP4 : vec4<f32>;

@group(1) @binding(2) var<uniform> x_83 : UnityPerDraw;

var<private> u_xlat26 : vec3<f32>;

var<private> u_xlat1 : vec3<f32>;

var<private> u_xlat2 : vec4<f32>;

var<private> u_xlat3 : vec4<f32>;

var<private> u_xlatb0 : bool;

@group(1) @binding(0) var<uniform> x_149 : PGlobals;

var<private> u_xlat4 : vec3<f32>;

var<private> vs_INTERP8 : vec3<f32>;

var<private> u_xlat79 : f32;

var<private> u_xlat5 : vec4<f32>;

var<private> u_xlat6 : vec4<f32>;

@group(0) @binding(5) var Texture2D_B222E8F : texture_2d<f32>;

@group(0) @binding(10) var samplerTexture2D_B222E8F : sampler;

var<private> vs_INTERP5 : vec4<f32>;

var<private> u_xlat7 : vec3<f32>;

@group(1) @binding(4) var<uniform> x_267 : UnityPerMaterial;

var<private> u_xlat8 : vec4<f32>;

@group(0) @binding(6) var Texture2D_D9BFD5F1 : texture_2d<f32>;

@group(0) @binding(11) var samplerTexture2D_D9BFD5F1 : sampler;

var<private> u_xlat9 : vec4<f32>;

var<private> u_xlat34 : vec3<f32>;

var<private> vs_INTERP6 : vec4<f32>;

@group(1) @binding(3) var<uniform> x_372 : LightShadows;

var<private> u_xlat10 : vec4<f32>;

var<private> u_xlatb2 : vec4<bool>;

var<private> u_xlatu0 : u32;

var<private> u_xlati0 : i32;

var<private> u_xlatb79 : bool;

@group(0) @binding(3) var x_MainLightShadowmapTexture : texture_depth_2d;

@group(0) @binding(9) var sampler_LinearClampCompare : sampler_comparison;

var<private> u_xlatb80 : bool;

var<private> u_xlat55 : vec2<f32>;

var<private> u_xlat62 : vec2<f32>;

var<private> u_xlat11 : vec4<f32>;

var<private> u_xlat12 : vec4<f32>;

var<private> u_xlat13 : vec4<f32>;

var<private> u_xlat14 : vec4<f32>;

var<private> u_xlat15 : vec4<f32>;

var<private> u_xlat16 : vec4<f32>;

var<private> u_xlat80 : f32;

var<private> u_xlat29 : f32;

var<private> u_xlat35 : vec3<f32>;

var<private> u_xlat17 : vec4<f32>;

var<private> u_xlat18 : vec4<f32>;

var<private> u_xlat36 : vec2<f32>;

var<private> u_xlat68 : vec2<f32>;

var<private> u_xlat63 : vec2<f32>;

var<private> u_xlat19 : vec4<f32>;

var<private> u_xlat20 : vec4<f32>;

var<private> u_xlat21 : vec4<f32>;

var<private> u_xlat82 : f32;

var<private> u_xlatb3 : bool;

var<private> u_xlatb29 : bool;

var<private> u_xlat27 : vec3<f32>;

var<private> u_xlatu5 : vec3<u32>;

var<private> u_xlatu55 : u32;

var<private> u_xlatu81 : u32;

var<private> u_xlati55 : i32;

var<private> u_xlat81 : f32;

var<private> u_xlatb55 : bool;

@group(0) @binding(2) var unity_LightmapInd : texture_2d<f32>;

@group(0) @binding(8) var samplerunity_Lightmap : sampler;

var<private> vs_INTERP0 : vec2<f32>;

@group(0) @binding(1) var unity_Lightmap : texture_2d<f32>;

var<private> u_xlat83 : f32;

var<private> u_xlat84 : f32;

var<private> u_xlat33 : f32;

var<private> u_xlatb59 : bool;

var<private> u_xlat59 : vec2<f32>;

var<private> u_xlat60 : vec2<f32>;

var<private> u_xlat85 : f32;

var<private> u_xlat66 : vec2<f32>;

var<private> u_xlat87 : f32;

var<private> u_xlat28 : vec3<f32>;

var<private> u_xlat54 : f32;

@group(0) @binding(0) var unity_SpecCube0 : texture_cube<f32>;

@group(0) @binding(7) var samplerunity_SpecCube0 : sampler;

var<private> u_xlati82 : i32;

var<private> u_xlati81 : i32;

@group(1) @binding(1) var<uniform> x_3888 : AdditionalLights;

var<private> u_xlati85 : i32;

var<private> u_xlatb86 : bool;

var<private> u_xlatb11 : vec4<bool>;

var<private> u_xlat86 : f32;

var<private> u_xlatb85 : bool;

@group(0) @binding(4) var x_AdditionalLightsShadowmapTexture : texture_depth_2d;

var<private> u_xlat64 : vec2<f32>;

var<private> u_xlat88 : f32;

var<private> u_xlat39 : vec3<f32>;

var<private> u_xlat22 : vec4<f32>;

var<private> u_xlat40 : vec2<f32>;

var<private> u_xlat72 : vec2<f32>;

var<private> u_xlat67 : vec2<f32>;

var<private> u_xlat23 : vec4<f32>;

var<private> u_xlat24 : vec4<f32>;

var<private> u_xlat25 : vec4<f32>;

var<private> u_xlatb87 : bool;

var<private> u_xlat78 : f32;

var<private> SV_Target0 : vec4<f32>;

var<private> gl_FragCoord : vec4<f32>;

var<private> u_xlatu3 : u32;

var<private> u_xlatb81 : bool;

fn int_bitfieldInsert_i1_i1_i1_i1_(base : ptr<function, i32>, insert : ptr<function, i32>, offset_1 : ptr<function, i32>, bits : ptr<function, i32>) -> i32 {
  var mask : u32;
  let x_19 : i32 = *(bits);
  let x_23 : i32 = *(offset_1);
  mask = (~((4294967295u << bitcast<u32>(x_19))) << bitcast<u32>(x_23));
  let x_26 : i32 = *(base);
  let x_28 : u32 = mask;
  let x_31 : i32 = *(insert);
  let x_33 : i32 = *(offset_1);
  let x_36 : u32 = mask;
  return bitcast<i32>(((bitcast<u32>(x_26) & ~(x_28)) | ((bitcast<u32>(x_31) << bitcast<u32>(x_33)) & x_36)));
}

fn main_1() {
  var x_189 : vec3<f32>;
  var txVec0 : vec3<f32>;
  var txVec1 : vec3<f32>;
  var txVec2 : vec3<f32>;
  var txVec3 : vec3<f32>;
  var txVec4 : vec3<f32>;
  var txVec5 : vec3<f32>;
  var txVec6 : vec3<f32>;
  var txVec7 : vec3<f32>;
  var txVec8 : vec3<f32>;
  var txVec9 : vec3<f32>;
  var txVec10 : vec3<f32>;
  var txVec11 : vec3<f32>;
  var txVec12 : vec3<f32>;
  var txVec13 : vec3<f32>;
  var txVec14 : vec3<f32>;
  var txVec15 : vec3<f32>;
  var txVec16 : vec3<f32>;
  var txVec17 : vec3<f32>;
  var txVec18 : vec3<f32>;
  var txVec19 : vec3<f32>;
  var txVec20 : vec3<f32>;
  var txVec21 : vec3<f32>;
  var txVec22 : vec3<f32>;
  var txVec23 : vec3<f32>;
  var txVec24 : vec3<f32>;
  var txVec25 : vec3<f32>;
  var txVec26 : vec3<f32>;
  var txVec27 : vec3<f32>;
  var txVec28 : vec3<f32>;
  var txVec29 : vec3<f32>;
  var x_1872 : f32;
  var param : i32;
  var param_1 : i32;
  var param_2 : i32;
  var param_3 : i32;
  var x_1997 : f32;
  var x_2051 : f32;
  var txVec30 : vec3<f32>;
  var txVec31 : vec3<f32>;
  var txVec32 : vec3<f32>;
  var txVec33 : vec3<f32>;
  var txVec34 : vec3<f32>;
  var txVec35 : vec3<f32>;
  var txVec36 : vec3<f32>;
  var txVec37 : vec3<f32>;
  var txVec38 : vec3<f32>;
  var txVec39 : vec3<f32>;
  var txVec40 : vec3<f32>;
  var txVec41 : vec3<f32>;
  var txVec42 : vec3<f32>;
  var txVec43 : vec3<f32>;
  var txVec44 : vec3<f32>;
  var txVec45 : vec3<f32>;
  var txVec46 : vec3<f32>;
  var txVec47 : vec3<f32>;
  var txVec48 : vec3<f32>;
  var txVec49 : vec3<f32>;
  var txVec50 : vec3<f32>;
  var txVec51 : vec3<f32>;
  var txVec52 : vec3<f32>;
  var txVec53 : vec3<f32>;
  var txVec54 : vec3<f32>;
  var txVec55 : vec3<f32>;
  var txVec56 : vec3<f32>;
  var txVec57 : vec3<f32>;
  var txVec58 : vec3<f32>;
  var txVec59 : vec3<f32>;
  var x_3477 : f32;
  var u_xlatu_loop_1 : u32;
  var indexable : array<vec4<u32>, 4u>;
  var x_4022 : f32;
  var x_4032 : f32;
  var txVec60 : vec3<f32>;
  var txVec61 : vec3<f32>;
  var txVec62 : vec3<f32>;
  var txVec63 : vec3<f32>;
  var txVec64 : vec3<f32>;
  var txVec65 : vec3<f32>;
  var txVec66 : vec3<f32>;
  var txVec67 : vec3<f32>;
  var txVec68 : vec3<f32>;
  var txVec69 : vec3<f32>;
  var txVec70 : vec3<f32>;
  var txVec71 : vec3<f32>;
  var txVec72 : vec3<f32>;
  var txVec73 : vec3<f32>;
  var txVec74 : vec3<f32>;
  var txVec75 : vec3<f32>;
  var txVec76 : vec3<f32>;
  var txVec77 : vec3<f32>;
  var txVec78 : vec3<f32>;
  var txVec79 : vec3<f32>;
  var txVec80 : vec3<f32>;
  var txVec81 : vec3<f32>;
  var txVec82 : vec3<f32>;
  var txVec83 : vec3<f32>;
  var txVec84 : vec3<f32>;
  var txVec85 : vec3<f32>;
  var txVec86 : vec3<f32>;
  var txVec87 : vec3<f32>;
  var txVec88 : vec3<f32>;
  var txVec89 : vec3<f32>;
  var u_xlat_precise_vec4 : vec4<f32>;
  var u_xlat_precise_ivec4 : vec4<i32>;
  var u_xlat_precise_bvec4 : vec4<bool>;
  var u_xlat_precise_uvec4 : vec4<u32>;
  let x_48 : vec3<f32> = vs_INTERP9;
  let x_49 : vec3<f32> = vs_INTERP9;
  u_xlat0.x = dot(x_48, x_49);
  let x_55 : f32 = u_xlat0.x;
  u_xlat0.x = sqrt(x_55);
  let x_60 : f32 = u_xlat0.x;
  u_xlat0.x = (1.0f / x_60);
  let x_74 : f32 = vs_INTERP4.w;
  u_xlatb26.x = (0.0f < x_74);
  let x_87 : f32 = x_83.unity_WorldTransformParams.w;
  u_xlatb26.y = (x_87 >= 0.0f);
  let x_93 : bool = u_xlatb26.x;
  u_xlat26.x = select(-1.0f, 1.0f, x_93);
  let x_98 : bool = u_xlatb26.y;
  u_xlat26.y = select(-1.0f, 1.0f, x_98);
  let x_102 : f32 = u_xlat26.y;
  let x_104 : f32 = u_xlat26.x;
  u_xlat26.x = (x_102 * x_104);
  let x_108 : vec4<f32> = vs_INTERP4;
  let x_110 : vec3<f32> = vs_INTERP9;
  u_xlat1 = (vec3<f32>(x_108.y, x_108.z, x_108.x) * vec3<f32>(x_110.z, x_110.x, x_110.y));
  let x_113 : vec3<f32> = vs_INTERP9;
  let x_115 : vec4<f32> = vs_INTERP4;
  let x_118 : vec3<f32> = u_xlat1;
  u_xlat1 = ((vec3<f32>(x_113.y, x_113.z, x_113.x) * vec3<f32>(x_115.z, x_115.x, x_115.y)) + -(x_118));
  let x_121 : vec3<f32> = u_xlat26;
  let x_123 : vec3<f32> = u_xlat1;
  u_xlat26 = (vec3<f32>(x_121.x, x_121.x, x_121.x) * x_123);
  let x_125 : vec3<f32> = u_xlat0;
  let x_127 : vec3<f32> = vs_INTERP9;
  u_xlat1 = (vec3<f32>(x_125.x, x_125.x, x_125.x) * x_127);
  let x_131 : vec3<f32> = u_xlat0;
  let x_133 : vec4<f32> = vs_INTERP4;
  let x_135 : vec3<f32> = (vec3<f32>(x_131.x, x_131.x, x_131.x) * vec3<f32>(x_133.x, x_133.y, x_133.z));
  let x_136 : vec4<f32> = u_xlat2;
  u_xlat2 = vec4<f32>(x_135.x, x_135.y, x_135.z, x_136.w);
  let x_139 : vec3<f32> = u_xlat26;
  let x_140 : vec3<f32> = u_xlat0;
  let x_142 : vec3<f32> = (x_139 * vec3<f32>(x_140.x, x_140.x, x_140.x));
  let x_143 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_142.x, x_142.y, x_142.z, x_143.w);
  let x_152 : f32 = x_149.unity_OrthoParams.w;
  u_xlatb0 = (x_152 == 0.0f);
  let x_156 : vec3<f32> = vs_INTERP8;
  let x_161 : vec3<f32> = x_149.x_WorldSpaceCameraPos;
  u_xlat4 = (-(x_156) + x_161);
  let x_164 : vec3<f32> = u_xlat4;
  let x_165 : vec3<f32> = u_xlat4;
  u_xlat79 = dot(x_164, x_165);
  let x_167 : f32 = u_xlat79;
  u_xlat79 = inverseSqrt(x_167);
  let x_169 : f32 = u_xlat79;
  let x_171 : vec3<f32> = u_xlat4;
  u_xlat4 = (vec3<f32>(x_169, x_169, x_169) * x_171);
  let x_177 : f32 = x_149.unity_MatrixV[0i].z;
  u_xlat5.x = x_177;
  let x_181 : f32 = x_149.unity_MatrixV[1i].z;
  u_xlat5.y = x_181;
  let x_185 : f32 = x_149.unity_MatrixV[2i].z;
  u_xlat5.z = x_185;
  let x_187 : bool = u_xlatb0;
  if (x_187) {
    let x_192 : vec3<f32> = u_xlat4;
    x_189 = x_192;
  } else {
    let x_194 : vec4<f32> = u_xlat5;
    x_189 = vec3<f32>(x_194.x, x_194.y, x_194.z);
  }
  let x_196 : vec3<f32> = x_189;
  u_xlat4 = x_196;
  let x_197 : vec3<f32> = u_xlat4;
  let x_201 : vec4<f32> = x_83.unity_WorldToObject[1i];
  let x_203 : vec3<f32> = (vec3<f32>(x_197.y, x_197.y, x_197.y) * vec3<f32>(x_201.x, x_201.y, x_201.z));
  let x_204 : vec4<f32> = u_xlat5;
  u_xlat5 = vec4<f32>(x_203.x, x_203.y, x_203.z, x_204.w);
  let x_207 : vec4<f32> = x_83.unity_WorldToObject[0i];
  let x_209 : vec3<f32> = u_xlat4;
  let x_212 : vec4<f32> = u_xlat5;
  let x_214 : vec3<f32> = ((vec3<f32>(x_207.x, x_207.y, x_207.z) * vec3<f32>(x_209.x, x_209.x, x_209.x)) + vec3<f32>(x_212.x, x_212.y, x_212.z));
  let x_215 : vec4<f32> = u_xlat5;
  u_xlat5 = vec4<f32>(x_214.x, x_214.y, x_214.z, x_215.w);
  let x_218 : vec4<f32> = x_83.unity_WorldToObject[2i];
  let x_220 : vec3<f32> = u_xlat4;
  let x_223 : vec4<f32> = u_xlat5;
  let x_225 : vec3<f32> = ((vec3<f32>(x_218.x, x_218.y, x_218.z) * vec3<f32>(x_220.z, x_220.z, x_220.z)) + vec3<f32>(x_223.x, x_223.y, x_223.z));
  let x_226 : vec4<f32> = u_xlat5;
  u_xlat5 = vec4<f32>(x_225.x, x_225.y, x_225.z, x_226.w);
  let x_228 : vec4<f32> = u_xlat5;
  let x_230 : vec4<f32> = u_xlat5;
  u_xlat0.x = dot(vec3<f32>(x_228.x, x_228.y, x_228.z), vec3<f32>(x_230.x, x_230.y, x_230.z));
  let x_235 : f32 = u_xlat0.x;
  u_xlat0.x = inverseSqrt(x_235);
  let x_238 : vec3<f32> = u_xlat0;
  let x_240 : vec4<f32> = u_xlat5;
  let x_242 : vec3<f32> = (vec3<f32>(x_238.x, x_238.x, x_238.x) * vec3<f32>(x_240.x, x_240.y, x_240.z));
  let x_243 : vec4<f32> = u_xlat5;
  u_xlat5 = vec4<f32>(x_242.x, x_242.y, x_242.z, x_243.w);
  let x_257 : vec4<f32> = vs_INTERP5;
  let x_260 : f32 = x_149.x_GlobalMipBias.x;
  let x_261 : vec4<f32> = textureSampleBias(Texture2D_B222E8F, samplerTexture2D_B222E8F, vec2<f32>(x_257.x, x_257.y), x_260);
  u_xlat6 = x_261;
  let x_263 : vec4<f32> = u_xlat6;
  let x_269 : vec4<f32> = x_267.Color_C30C7CA3;
  u_xlat7 = (vec3<f32>(x_263.x, x_263.y, x_263.z) * vec3<f32>(x_269.x, x_269.y, x_269.z));
  let x_278 : vec4<f32> = vs_INTERP5;
  let x_281 : f32 = x_149.x_GlobalMipBias.x;
  let x_282 : vec4<f32> = textureSampleBias(Texture2D_D9BFD5F1, samplerTexture2D_D9BFD5F1, vec2<f32>(x_278.x, x_278.y), x_281);
  u_xlat8 = vec4<f32>(x_282.w, x_282.x, x_282.y, x_282.z);
  let x_285 : vec4<f32> = u_xlat8;
  u_xlat9 = ((vec4<f32>(x_285.y, x_285.z, x_285.w, x_285.x) * vec4<f32>(2.0f, 2.0f, 2.0f, 2.0f)) + vec4<f32>(-1.0f, -1.0f, -1.0f, -1.0f));
  let x_292 : vec4<f32> = u_xlat9;
  let x_293 : vec4<f32> = u_xlat9;
  u_xlat0.x = dot(x_292, x_293);
  let x_297 : f32 = u_xlat0.x;
  u_xlat0.x = inverseSqrt(x_297);
  let x_301 : vec3<f32> = u_xlat0;
  let x_303 : vec4<f32> = u_xlat9;
  u_xlat34 = (vec3<f32>(x_301.x, x_301.x, x_301.x) * vec3<f32>(x_303.x, x_303.y, x_303.z));
  let x_308 : f32 = vs_INTERP6.y;
  u_xlat0.x = (x_308 * 200.0f);
  let x_313 : f32 = u_xlat0.x;
  u_xlat0.x = min(x_313, 1.0f);
  let x_316 : vec3<f32> = u_xlat0;
  let x_318 : vec4<f32> = u_xlat6;
  let x_320 : vec3<f32> = (vec3<f32>(x_316.x, x_316.x, x_316.x) * vec3<f32>(x_318.x, x_318.y, x_318.z));
  let x_321 : vec4<f32> = u_xlat6;
  u_xlat6 = vec4<f32>(x_320.x, x_320.y, x_320.z, x_321.w);
  let x_323 : vec4<f32> = u_xlat3;
  let x_325 : vec3<f32> = u_xlat34;
  let x_327 : vec3<f32> = (vec3<f32>(x_323.x, x_323.y, x_323.z) * vec3<f32>(x_325.y, x_325.y, x_325.y));
  let x_328 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_327.x, x_327.y, x_327.z, x_328.w);
  let x_330 : vec3<f32> = u_xlat34;
  let x_332 : vec4<f32> = u_xlat2;
  let x_335 : vec4<f32> = u_xlat3;
  let x_337 : vec3<f32> = ((vec3<f32>(x_330.x, x_330.x, x_330.x) * vec3<f32>(x_332.x, x_332.y, x_332.z)) + vec3<f32>(x_335.x, x_335.y, x_335.z));
  let x_338 : vec4<f32> = u_xlat2;
  u_xlat2 = vec4<f32>(x_337.x, x_337.y, x_337.z, x_338.w);
  let x_340 : vec3<f32> = u_xlat34;
  let x_342 : vec3<f32> = u_xlat1;
  let x_344 : vec4<f32> = u_xlat2;
  u_xlat1 = ((vec3<f32>(x_340.z, x_340.z, x_340.z) * x_342) + vec3<f32>(x_344.x, x_344.y, x_344.z));
  let x_347 : vec3<f32> = u_xlat1;
  let x_348 : vec3<f32> = u_xlat1;
  u_xlat0.x = dot(x_347, x_348);
  let x_352 : f32 = u_xlat0.x;
  u_xlat0.x = max(x_352, 1.17549435e-38f);
  let x_357 : f32 = u_xlat0.x;
  u_xlat0.x = inverseSqrt(x_357);
  let x_360 : vec3<f32> = u_xlat0;
  let x_362 : vec3<f32> = u_xlat1;
  u_xlat1 = (vec3<f32>(x_360.x, x_360.x, x_360.x) * x_362);
  let x_364 : vec3<f32> = vs_INTERP8;
  let x_374 : vec4<f32> = x_372.x_CascadeShadowSplitSpheres0;
  let x_377 : vec3<f32> = (x_364 + -(vec3<f32>(x_374.x, x_374.y, x_374.z)));
  let x_378 : vec4<f32> = u_xlat2;
  u_xlat2 = vec4<f32>(x_377.x, x_377.y, x_377.z, x_378.w);
  let x_380 : vec3<f32> = vs_INTERP8;
  let x_382 : vec4<f32> = x_372.x_CascadeShadowSplitSpheres1;
  let x_385 : vec3<f32> = (x_380 + -(vec3<f32>(x_382.x, x_382.y, x_382.z)));
  let x_386 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_385.x, x_385.y, x_385.z, x_386.w);
  let x_388 : vec3<f32> = vs_INTERP8;
  let x_390 : vec4<f32> = x_372.x_CascadeShadowSplitSpheres2;
  let x_393 : vec3<f32> = (x_388 + -(vec3<f32>(x_390.x, x_390.y, x_390.z)));
  let x_394 : vec4<f32> = u_xlat9;
  u_xlat9 = vec4<f32>(x_393.x, x_393.y, x_393.z, x_394.w);
  let x_397 : vec3<f32> = vs_INTERP8;
  let x_400 : vec4<f32> = x_372.x_CascadeShadowSplitSpheres3;
  let x_403 : vec3<f32> = (x_397 + -(vec3<f32>(x_400.x, x_400.y, x_400.z)));
  let x_404 : vec4<f32> = u_xlat10;
  u_xlat10 = vec4<f32>(x_403.x, x_403.y, x_403.z, x_404.w);
  let x_406 : vec4<f32> = u_xlat2;
  let x_408 : vec4<f32> = u_xlat2;
  u_xlat2.x = dot(vec3<f32>(x_406.x, x_406.y, x_406.z), vec3<f32>(x_408.x, x_408.y, x_408.z));
  let x_412 : vec4<f32> = u_xlat3;
  let x_414 : vec4<f32> = u_xlat3;
  u_xlat2.y = dot(vec3<f32>(x_412.x, x_412.y, x_412.z), vec3<f32>(x_414.x, x_414.y, x_414.z));
  let x_418 : vec4<f32> = u_xlat9;
  let x_420 : vec4<f32> = u_xlat9;
  u_xlat2.z = dot(vec3<f32>(x_418.x, x_418.y, x_418.z), vec3<f32>(x_420.x, x_420.y, x_420.z));
  let x_424 : vec4<f32> = u_xlat10;
  let x_426 : vec4<f32> = u_xlat10;
  u_xlat2.w = dot(vec3<f32>(x_424.x, x_424.y, x_424.z), vec3<f32>(x_426.x, x_426.y, x_426.z));
  let x_433 : vec4<f32> = u_xlat2;
  let x_435 : vec4<f32> = x_372.x_CascadeShadowSplitSphereRadii;
  u_xlatb2 = (x_433 < x_435);
  let x_438 : bool = u_xlatb2.x;
  u_xlat3.x = select(0.0f, 1.0f, x_438);
  let x_442 : bool = u_xlatb2.y;
  u_xlat3.y = select(0.0f, 1.0f, x_442);
  let x_446 : bool = u_xlatb2.z;
  u_xlat3.z = select(0.0f, 1.0f, x_446);
  let x_450 : bool = u_xlatb2.w;
  u_xlat3.w = select(0.0f, 1.0f, x_450);
  let x_454 : bool = u_xlatb2.x;
  u_xlat2.x = select(-0.0f, -1.0f, x_454);
  let x_459 : bool = u_xlatb2.y;
  u_xlat2.y = select(-0.0f, -1.0f, x_459);
  let x_463 : bool = u_xlatb2.z;
  u_xlat2.z = select(-0.0f, -1.0f, x_463);
  let x_466 : vec4<f32> = u_xlat2;
  let x_468 : vec4<f32> = u_xlat3;
  let x_470 : vec3<f32> = (vec3<f32>(x_466.x, x_466.y, x_466.z) + vec3<f32>(x_468.y, x_468.z, x_468.w));
  let x_471 : vec4<f32> = u_xlat2;
  u_xlat2 = vec4<f32>(x_470.x, x_470.y, x_470.z, x_471.w);
  let x_473 : vec4<f32> = u_xlat2;
  let x_476 : vec3<f32> = max(vec3<f32>(x_473.x, x_473.y, x_473.z), vec3<f32>(0.0f, 0.0f, 0.0f));
  let x_477 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_477.x, x_476.x, x_476.y, x_476.z);
  let x_479 : vec4<f32> = u_xlat3;
  u_xlat0.x = dot(x_479, vec4<f32>(4.0f, 3.0f, 2.0f, 1.0f));
  let x_486 : f32 = u_xlat0.x;
  u_xlat0.x = (-(x_486) + 4.0f);
  let x_493 : f32 = u_xlat0.x;
  u_xlatu0 = u32(x_493);
  let x_497 : u32 = u_xlatu0;
  u_xlati0 = (bitcast<i32>(x_497) << bitcast<u32>(2i));
  let x_500 : vec3<f32> = vs_INTERP8;
  let x_502 : i32 = u_xlati0;
  let x_505 : i32 = u_xlati0;
  let x_509 : vec4<f32> = x_372.x_MainLightWorldToShadow[((x_502 + 1i) / 4i)][((x_505 + 1i) % 4i)];
  let x_511 : vec3<f32> = (vec3<f32>(x_500.y, x_500.y, x_500.y) * vec3<f32>(x_509.x, x_509.y, x_509.z));
  let x_512 : vec4<f32> = u_xlat2;
  u_xlat2 = vec4<f32>(x_511.x, x_511.y, x_511.z, x_512.w);
  let x_514 : i32 = u_xlati0;
  let x_516 : i32 = u_xlati0;
  let x_519 : vec4<f32> = x_372.x_MainLightWorldToShadow[(x_514 / 4i)][(x_516 % 4i)];
  let x_521 : vec3<f32> = vs_INTERP8;
  let x_524 : vec4<f32> = u_xlat2;
  let x_526 : vec3<f32> = ((vec3<f32>(x_519.x, x_519.y, x_519.z) * vec3<f32>(x_521.x, x_521.x, x_521.x)) + vec3<f32>(x_524.x, x_524.y, x_524.z));
  let x_527 : vec4<f32> = u_xlat2;
  u_xlat2 = vec4<f32>(x_526.x, x_526.y, x_526.z, x_527.w);
  let x_529 : i32 = u_xlati0;
  let x_532 : i32 = u_xlati0;
  let x_536 : vec4<f32> = x_372.x_MainLightWorldToShadow[((x_529 + 2i) / 4i)][((x_532 + 2i) % 4i)];
  let x_538 : vec3<f32> = vs_INTERP8;
  let x_541 : vec4<f32> = u_xlat2;
  let x_543 : vec3<f32> = ((vec3<f32>(x_536.x, x_536.y, x_536.z) * vec3<f32>(x_538.z, x_538.z, x_538.z)) + vec3<f32>(x_541.x, x_541.y, x_541.z));
  let x_544 : vec4<f32> = u_xlat2;
  u_xlat2 = vec4<f32>(x_543.x, x_543.y, x_543.z, x_544.w);
  let x_546 : vec4<f32> = u_xlat2;
  let x_548 : i32 = u_xlati0;
  let x_551 : i32 = u_xlati0;
  let x_555 : vec4<f32> = x_372.x_MainLightWorldToShadow[((x_548 + 3i) / 4i)][((x_551 + 3i) % 4i)];
  let x_557 : vec3<f32> = (vec3<f32>(x_546.x, x_546.y, x_546.z) + vec3<f32>(x_555.x, x_555.y, x_555.z));
  let x_558 : vec4<f32> = u_xlat2;
  u_xlat2 = vec4<f32>(x_557.x, x_557.y, x_557.z, x_558.w);
  let x_561 : f32 = x_372.x_MainLightShadowParams.y;
  u_xlatb0 = (0.0f < x_561);
  let x_563 : bool = u_xlatb0;
  if (x_563) {
    let x_568 : f32 = x_372.x_MainLightShadowParams.y;
    u_xlatb79 = (x_568 == 1.0f);
    let x_570 : bool = u_xlatb79;
    if (x_570) {
      let x_573 : vec4<f32> = u_xlat2;
      let x_577 : vec4<f32> = x_372.x_MainLightShadowOffset0;
      u_xlat3 = (vec4<f32>(x_573.x, x_573.y, x_573.x, x_573.y) + x_577);
      let x_580 : vec4<f32> = u_xlat3;
      let x_581 : vec2<f32> = vec2<f32>(x_580.x, x_580.y);
      let x_583 : f32 = u_xlat2.z;
      txVec0 = vec3<f32>(x_581.x, x_581.y, x_583);
      let x_595 : vec3<f32> = txVec0;
      let x_597 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_LinearClampCompare, x_595.xy, x_595.z);
      u_xlat9.x = x_597;
      let x_600 : vec4<f32> = u_xlat3;
      let x_601 : vec2<f32> = vec2<f32>(x_600.z, x_600.w);
      let x_603 : f32 = u_xlat2.z;
      txVec1 = vec3<f32>(x_601.x, x_601.y, x_603);
      let x_610 : vec3<f32> = txVec1;
      let x_612 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_LinearClampCompare, x_610.xy, x_610.z);
      u_xlat9.y = x_612;
      let x_614 : vec4<f32> = u_xlat2;
      let x_618 : vec4<f32> = x_372.x_MainLightShadowOffset1;
      u_xlat3 = (vec4<f32>(x_614.x, x_614.y, x_614.x, x_614.y) + x_618);
      let x_621 : vec4<f32> = u_xlat3;
      let x_622 : vec2<f32> = vec2<f32>(x_621.x, x_621.y);
      let x_624 : f32 = u_xlat2.z;
      txVec2 = vec3<f32>(x_622.x, x_622.y, x_624);
      let x_631 : vec3<f32> = txVec2;
      let x_633 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_LinearClampCompare, x_631.xy, x_631.z);
      u_xlat9.z = x_633;
      let x_636 : vec4<f32> = u_xlat3;
      let x_637 : vec2<f32> = vec2<f32>(x_636.z, x_636.w);
      let x_639 : f32 = u_xlat2.z;
      txVec3 = vec3<f32>(x_637.x, x_637.y, x_639);
      let x_646 : vec3<f32> = txVec3;
      let x_648 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_LinearClampCompare, x_646.xy, x_646.z);
      u_xlat9.w = x_648;
      let x_650 : vec4<f32> = u_xlat9;
      u_xlat79 = dot(x_650, vec4<f32>(0.25f, 0.25f, 0.25f, 0.25f));
    } else {
      let x_657 : f32 = x_372.x_MainLightShadowParams.y;
      u_xlatb80 = (x_657 == 2.0f);
      let x_659 : bool = u_xlatb80;
      if (x_659) {
        let x_662 : vec4<f32> = u_xlat2;
        let x_666 : vec4<f32> = x_372.x_MainLightShadowmapSize;
        let x_671 : vec2<f32> = ((vec2<f32>(x_662.x, x_662.y) * vec2<f32>(x_666.z, x_666.w)) + vec2<f32>(0.5f, 0.5f));
        let x_672 : vec4<f32> = u_xlat3;
        u_xlat3 = vec4<f32>(x_671.x, x_671.y, x_672.z, x_672.w);
        let x_674 : vec4<f32> = u_xlat3;
        let x_676 : vec2<f32> = floor(vec2<f32>(x_674.x, x_674.y));
        let x_677 : vec4<f32> = u_xlat3;
        u_xlat3 = vec4<f32>(x_676.x, x_676.y, x_677.z, x_677.w);
        let x_681 : vec4<f32> = u_xlat2;
        let x_684 : vec4<f32> = x_372.x_MainLightShadowmapSize;
        let x_687 : vec4<f32> = u_xlat3;
        u_xlat55 = ((vec2<f32>(x_681.x, x_681.y) * vec2<f32>(x_684.z, x_684.w)) + -(vec2<f32>(x_687.x, x_687.y)));
        let x_691 : vec2<f32> = u_xlat55;
        u_xlat9 = (vec4<f32>(x_691.x, x_691.x, x_691.y, x_691.y) + vec4<f32>(0.5f, 1.0f, 0.5f, 1.0f));
        let x_695 : vec4<f32> = u_xlat9;
        let x_697 : vec4<f32> = u_xlat9;
        u_xlat10 = (vec4<f32>(x_695.x, x_695.x, x_695.z, x_695.z) * vec4<f32>(x_697.x, x_697.x, x_697.z, x_697.z));
        let x_700 : vec4<f32> = u_xlat10;
        let x_704 : vec2<f32> = (vec2<f32>(x_700.y, x_700.w) * vec2<f32>(0.07999999821186065674f, 0.07999999821186065674f));
        let x_705 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_704.x, x_705.y, x_704.y, x_705.w);
        let x_707 : vec4<f32> = u_xlat10;
        let x_710 : vec2<f32> = u_xlat55;
        let x_712 : vec2<f32> = ((vec2<f32>(x_707.x, x_707.z) * vec2<f32>(0.5f, 0.5f)) + -(x_710));
        let x_713 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_712.x, x_712.y, x_713.z, x_713.w);
        let x_716 : vec2<f32> = u_xlat55;
        u_xlat62 = (-(x_716) + vec2<f32>(1.0f, 1.0f));
        let x_721 : vec2<f32> = u_xlat55;
        let x_723 : vec2<f32> = min(x_721, vec2<f32>(0.0f, 0.0f));
        let x_724 : vec4<f32> = u_xlat11;
        u_xlat11 = vec4<f32>(x_723.x, x_723.y, x_724.z, x_724.w);
        let x_726 : vec4<f32> = u_xlat11;
        let x_729 : vec4<f32> = u_xlat11;
        let x_732 : vec2<f32> = u_xlat62;
        let x_733 : vec2<f32> = ((-(vec2<f32>(x_726.x, x_726.y)) * vec2<f32>(x_729.x, x_729.y)) + x_732);
        let x_734 : vec4<f32> = u_xlat11;
        u_xlat11 = vec4<f32>(x_733.x, x_733.y, x_734.z, x_734.w);
        let x_736 : vec2<f32> = u_xlat55;
        u_xlat55 = max(x_736, vec2<f32>(0.0f, 0.0f));
        let x_738 : vec2<f32> = u_xlat55;
        let x_740 : vec2<f32> = u_xlat55;
        let x_742 : vec4<f32> = u_xlat9;
        u_xlat55 = ((-(x_738) * x_740) + vec2<f32>(x_742.y, x_742.w));
        let x_745 : vec4<f32> = u_xlat11;
        let x_747 : vec2<f32> = (vec2<f32>(x_745.x, x_745.y) + vec2<f32>(1.0f, 1.0f));
        let x_748 : vec4<f32> = u_xlat11;
        u_xlat11 = vec4<f32>(x_747.x, x_747.y, x_748.z, x_748.w);
        let x_750 : vec2<f32> = u_xlat55;
        u_xlat55 = (x_750 + vec2<f32>(1.0f, 1.0f));
        let x_753 : vec4<f32> = u_xlat10;
        let x_757 : vec2<f32> = (vec2<f32>(x_753.x, x_753.y) * vec2<f32>(0.15999999642372131348f, 0.15999999642372131348f));
        let x_758 : vec4<f32> = u_xlat12;
        u_xlat12 = vec4<f32>(x_757.x, x_757.y, x_758.z, x_758.w);
        let x_760 : vec2<f32> = u_xlat62;
        let x_761 : vec2<f32> = (x_760 * vec2<f32>(0.15999999642372131348f, 0.15999999642372131348f));
        let x_762 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_761.x, x_761.y, x_762.z, x_762.w);
        let x_764 : vec4<f32> = u_xlat11;
        let x_766 : vec2<f32> = (vec2<f32>(x_764.x, x_764.y) * vec2<f32>(0.15999999642372131348f, 0.15999999642372131348f));
        let x_767 : vec4<f32> = u_xlat11;
        u_xlat11 = vec4<f32>(x_766.x, x_766.y, x_767.z, x_767.w);
        let x_770 : vec2<f32> = u_xlat55;
        let x_771 : vec2<f32> = (x_770 * vec2<f32>(0.15999999642372131348f, 0.15999999642372131348f));
        let x_772 : vec4<f32> = u_xlat13;
        u_xlat13 = vec4<f32>(x_771.x, x_771.y, x_772.z, x_772.w);
        let x_774 : vec4<f32> = u_xlat9;
        u_xlat55 = (vec2<f32>(x_774.y, x_774.w) * vec2<f32>(0.15999999642372131348f, 0.15999999642372131348f));
        let x_778 : f32 = u_xlat11.x;
        u_xlat12.z = x_778;
        let x_781 : f32 = u_xlat55.x;
        u_xlat12.w = x_781;
        let x_784 : f32 = u_xlat13.x;
        u_xlat10.z = x_784;
        let x_787 : f32 = u_xlat9.x;
        u_xlat10.w = x_787;
        let x_790 : vec4<f32> = u_xlat10;
        let x_792 : vec4<f32> = u_xlat12;
        u_xlat14 = (vec4<f32>(x_790.z, x_790.w, x_790.x, x_790.z) + vec4<f32>(x_792.z, x_792.w, x_792.x, x_792.z));
        let x_796 : f32 = u_xlat12.y;
        u_xlat11.z = x_796;
        let x_799 : f32 = u_xlat55.y;
        u_xlat11.w = x_799;
        let x_802 : f32 = u_xlat10.y;
        u_xlat13.z = x_802;
        let x_805 : f32 = u_xlat9.z;
        u_xlat13.w = x_805;
        let x_807 : vec4<f32> = u_xlat11;
        let x_809 : vec4<f32> = u_xlat13;
        let x_811 : vec3<f32> = (vec3<f32>(x_807.z, x_807.y, x_807.w) + vec3<f32>(x_809.z, x_809.y, x_809.w));
        let x_812 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_811.x, x_811.y, x_811.z, x_812.w);
        let x_814 : vec4<f32> = u_xlat10;
        let x_816 : vec4<f32> = u_xlat14;
        let x_818 : vec3<f32> = (vec3<f32>(x_814.x, x_814.z, x_814.w) / vec3<f32>(x_816.z, x_816.w, x_816.y));
        let x_819 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_818.x, x_818.y, x_818.z, x_819.w);
        let x_821 : vec4<f32> = u_xlat10;
        let x_827 : vec3<f32> = (vec3<f32>(x_821.x, x_821.y, x_821.z) + vec3<f32>(-2.5f, -0.5f, 1.5f));
        let x_828 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_827.x, x_827.y, x_827.z, x_828.w);
        let x_830 : vec4<f32> = u_xlat13;
        let x_832 : vec4<f32> = u_xlat9;
        let x_834 : vec3<f32> = (vec3<f32>(x_830.z, x_830.y, x_830.w) / vec3<f32>(x_832.x, x_832.y, x_832.z));
        let x_835 : vec4<f32> = u_xlat11;
        u_xlat11 = vec4<f32>(x_834.x, x_834.y, x_834.z, x_835.w);
        let x_837 : vec4<f32> = u_xlat11;
        let x_839 : vec3<f32> = (vec3<f32>(x_837.x, x_837.y, x_837.z) + vec3<f32>(-2.5f, -0.5f, 1.5f));
        let x_840 : vec4<f32> = u_xlat11;
        u_xlat11 = vec4<f32>(x_839.x, x_839.y, x_839.z, x_840.w);
        let x_842 : vec4<f32> = u_xlat10;
        let x_845 : vec4<f32> = x_372.x_MainLightShadowmapSize;
        let x_847 : vec3<f32> = (vec3<f32>(x_842.y, x_842.x, x_842.z) * vec3<f32>(x_845.x, x_845.x, x_845.x));
        let x_848 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_847.x, x_847.y, x_847.z, x_848.w);
        let x_850 : vec4<f32> = u_xlat11;
        let x_853 : vec4<f32> = x_372.x_MainLightShadowmapSize;
        let x_855 : vec3<f32> = (vec3<f32>(x_850.x, x_850.y, x_850.z) * vec3<f32>(x_853.y, x_853.y, x_853.y));
        let x_856 : vec4<f32> = u_xlat11;
        u_xlat11 = vec4<f32>(x_855.x, x_855.y, x_855.z, x_856.w);
        let x_859 : f32 = u_xlat11.x;
        u_xlat10.w = x_859;
        let x_861 : vec4<f32> = u_xlat3;
        let x_864 : vec4<f32> = x_372.x_MainLightShadowmapSize;
        let x_867 : vec4<f32> = u_xlat10;
        u_xlat12 = ((vec4<f32>(x_861.x, x_861.y, x_861.x, x_861.y) * vec4<f32>(x_864.x, x_864.y, x_864.x, x_864.y)) + vec4<f32>(x_867.y, x_867.w, x_867.x, x_867.w));
        let x_870 : vec4<f32> = u_xlat3;
        let x_873 : vec4<f32> = x_372.x_MainLightShadowmapSize;
        let x_876 : vec4<f32> = u_xlat10;
        u_xlat55 = ((vec2<f32>(x_870.x, x_870.y) * vec2<f32>(x_873.x, x_873.y)) + vec2<f32>(x_876.z, x_876.w));
        let x_880 : f32 = u_xlat10.y;
        u_xlat11.w = x_880;
        let x_882 : vec4<f32> = u_xlat11;
        let x_883 : vec2<f32> = vec2<f32>(x_882.y, x_882.z);
        let x_884 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_884.x, x_883.x, x_884.z, x_883.y);
        let x_886 : vec4<f32> = u_xlat3;
        let x_889 : vec4<f32> = x_372.x_MainLightShadowmapSize;
        let x_892 : vec4<f32> = u_xlat10;
        u_xlat13 = ((vec4<f32>(x_886.x, x_886.y, x_886.x, x_886.y) * vec4<f32>(x_889.x, x_889.y, x_889.x, x_889.y)) + vec4<f32>(x_892.x, x_892.y, x_892.z, x_892.y));
        let x_895 : vec4<f32> = u_xlat3;
        let x_898 : vec4<f32> = x_372.x_MainLightShadowmapSize;
        let x_901 : vec4<f32> = u_xlat11;
        u_xlat11 = ((vec4<f32>(x_895.x, x_895.y, x_895.x, x_895.y) * vec4<f32>(x_898.x, x_898.y, x_898.x, x_898.y)) + vec4<f32>(x_901.w, x_901.y, x_901.w, x_901.z));
        let x_904 : vec4<f32> = u_xlat3;
        let x_907 : vec4<f32> = x_372.x_MainLightShadowmapSize;
        let x_910 : vec4<f32> = u_xlat10;
        u_xlat10 = ((vec4<f32>(x_904.x, x_904.y, x_904.x, x_904.y) * vec4<f32>(x_907.x, x_907.y, x_907.x, x_907.y)) + vec4<f32>(x_910.x, x_910.w, x_910.z, x_910.w));
        let x_914 : vec4<f32> = u_xlat9;
        let x_916 : vec4<f32> = u_xlat14;
        u_xlat15 = (vec4<f32>(x_914.x, x_914.x, x_914.x, x_914.y) * vec4<f32>(x_916.z, x_916.w, x_916.y, x_916.z));
        let x_920 : vec4<f32> = u_xlat9;
        let x_922 : vec4<f32> = u_xlat14;
        u_xlat16 = (vec4<f32>(x_920.y, x_920.y, x_920.z, x_920.z) * x_922);
        let x_926 : f32 = u_xlat9.z;
        let x_928 : f32 = u_xlat14.y;
        u_xlat80 = (x_926 * x_928);
        let x_931 : vec4<f32> = u_xlat12;
        let x_932 : vec2<f32> = vec2<f32>(x_931.x, x_931.y);
        let x_934 : f32 = u_xlat2.z;
        txVec4 = vec3<f32>(x_932.x, x_932.y, x_934);
        let x_941 : vec3<f32> = txVec4;
        let x_943 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_LinearClampCompare, x_941.xy, x_941.z);
        u_xlat3.x = x_943;
        let x_946 : vec4<f32> = u_xlat12;
        let x_947 : vec2<f32> = vec2<f32>(x_946.z, x_946.w);
        let x_949 : f32 = u_xlat2.z;
        txVec5 = vec3<f32>(x_947.x, x_947.y, x_949);
        let x_957 : vec3<f32> = txVec5;
        let x_959 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_LinearClampCompare, x_957.xy, x_957.z);
        u_xlat29 = x_959;
        let x_960 : f32 = u_xlat29;
        let x_962 : f32 = u_xlat15.y;
        u_xlat29 = (x_960 * x_962);
        let x_965 : f32 = u_xlat15.x;
        let x_967 : f32 = u_xlat3.x;
        let x_969 : f32 = u_xlat29;
        u_xlat3.x = ((x_965 * x_967) + x_969);
        let x_973 : vec2<f32> = u_xlat55;
        let x_975 : f32 = u_xlat2.z;
        txVec6 = vec3<f32>(x_973.x, x_973.y, x_975);
        let x_982 : vec3<f32> = txVec6;
        let x_984 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_LinearClampCompare, x_982.xy, x_982.z);
        u_xlat29 = x_984;
        let x_986 : f32 = u_xlat15.z;
        let x_987 : f32 = u_xlat29;
        let x_990 : f32 = u_xlat3.x;
        u_xlat3.x = ((x_986 * x_987) + x_990);
        let x_994 : vec4<f32> = u_xlat11;
        let x_995 : vec2<f32> = vec2<f32>(x_994.x, x_994.y);
        let x_997 : f32 = u_xlat2.z;
        txVec7 = vec3<f32>(x_995.x, x_995.y, x_997);
        let x_1004 : vec3<f32> = txVec7;
        let x_1006 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_LinearClampCompare, x_1004.xy, x_1004.z);
        u_xlat29 = x_1006;
        let x_1008 : f32 = u_xlat15.w;
        let x_1009 : f32 = u_xlat29;
        let x_1012 : f32 = u_xlat3.x;
        u_xlat3.x = ((x_1008 * x_1009) + x_1012);
        let x_1016 : vec4<f32> = u_xlat13;
        let x_1017 : vec2<f32> = vec2<f32>(x_1016.x, x_1016.y);
        let x_1019 : f32 = u_xlat2.z;
        txVec8 = vec3<f32>(x_1017.x, x_1017.y, x_1019);
        let x_1026 : vec3<f32> = txVec8;
        let x_1028 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_LinearClampCompare, x_1026.xy, x_1026.z);
        u_xlat29 = x_1028;
        let x_1030 : f32 = u_xlat16.x;
        let x_1031 : f32 = u_xlat29;
        let x_1034 : f32 = u_xlat3.x;
        u_xlat3.x = ((x_1030 * x_1031) + x_1034);
        let x_1038 : vec4<f32> = u_xlat13;
        let x_1039 : vec2<f32> = vec2<f32>(x_1038.z, x_1038.w);
        let x_1041 : f32 = u_xlat2.z;
        txVec9 = vec3<f32>(x_1039.x, x_1039.y, x_1041);
        let x_1048 : vec3<f32> = txVec9;
        let x_1050 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_LinearClampCompare, x_1048.xy, x_1048.z);
        u_xlat29 = x_1050;
        let x_1052 : f32 = u_xlat16.y;
        let x_1053 : f32 = u_xlat29;
        let x_1056 : f32 = u_xlat3.x;
        u_xlat3.x = ((x_1052 * x_1053) + x_1056);
        let x_1060 : vec4<f32> = u_xlat11;
        let x_1061 : vec2<f32> = vec2<f32>(x_1060.z, x_1060.w);
        let x_1063 : f32 = u_xlat2.z;
        txVec10 = vec3<f32>(x_1061.x, x_1061.y, x_1063);
        let x_1070 : vec3<f32> = txVec10;
        let x_1072 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_LinearClampCompare, x_1070.xy, x_1070.z);
        u_xlat29 = x_1072;
        let x_1074 : f32 = u_xlat16.z;
        let x_1075 : f32 = u_xlat29;
        let x_1078 : f32 = u_xlat3.x;
        u_xlat3.x = ((x_1074 * x_1075) + x_1078);
        let x_1082 : vec4<f32> = u_xlat10;
        let x_1083 : vec2<f32> = vec2<f32>(x_1082.x, x_1082.y);
        let x_1085 : f32 = u_xlat2.z;
        txVec11 = vec3<f32>(x_1083.x, x_1083.y, x_1085);
        let x_1092 : vec3<f32> = txVec11;
        let x_1094 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_LinearClampCompare, x_1092.xy, x_1092.z);
        u_xlat29 = x_1094;
        let x_1096 : f32 = u_xlat16.w;
        let x_1097 : f32 = u_xlat29;
        let x_1100 : f32 = u_xlat3.x;
        u_xlat3.x = ((x_1096 * x_1097) + x_1100);
        let x_1104 : vec4<f32> = u_xlat10;
        let x_1105 : vec2<f32> = vec2<f32>(x_1104.z, x_1104.w);
        let x_1107 : f32 = u_xlat2.z;
        txVec12 = vec3<f32>(x_1105.x, x_1105.y, x_1107);
        let x_1114 : vec3<f32> = txVec12;
        let x_1116 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_LinearClampCompare, x_1114.xy, x_1114.z);
        u_xlat29 = x_1116;
        let x_1117 : f32 = u_xlat80;
        let x_1118 : f32 = u_xlat29;
        let x_1121 : f32 = u_xlat3.x;
        u_xlat79 = ((x_1117 * x_1118) + x_1121);
      } else {
        let x_1124 : vec4<f32> = u_xlat2;
        let x_1127 : vec4<f32> = x_372.x_MainLightShadowmapSize;
        let x_1130 : vec2<f32> = ((vec2<f32>(x_1124.x, x_1124.y) * vec2<f32>(x_1127.z, x_1127.w)) + vec2<f32>(0.5f, 0.5f));
        let x_1131 : vec4<f32> = u_xlat3;
        u_xlat3 = vec4<f32>(x_1130.x, x_1130.y, x_1131.z, x_1131.w);
        let x_1133 : vec4<f32> = u_xlat3;
        let x_1135 : vec2<f32> = floor(vec2<f32>(x_1133.x, x_1133.y));
        let x_1136 : vec4<f32> = u_xlat3;
        u_xlat3 = vec4<f32>(x_1135.x, x_1135.y, x_1136.z, x_1136.w);
        let x_1138 : vec4<f32> = u_xlat2;
        let x_1141 : vec4<f32> = x_372.x_MainLightShadowmapSize;
        let x_1144 : vec4<f32> = u_xlat3;
        u_xlat55 = ((vec2<f32>(x_1138.x, x_1138.y) * vec2<f32>(x_1141.z, x_1141.w)) + -(vec2<f32>(x_1144.x, x_1144.y)));
        let x_1148 : vec2<f32> = u_xlat55;
        u_xlat9 = (vec4<f32>(x_1148.x, x_1148.x, x_1148.y, x_1148.y) + vec4<f32>(0.5f, 1.0f, 0.5f, 1.0f));
        let x_1151 : vec4<f32> = u_xlat9;
        let x_1153 : vec4<f32> = u_xlat9;
        u_xlat10 = (vec4<f32>(x_1151.x, x_1151.x, x_1151.z, x_1151.z) * vec4<f32>(x_1153.x, x_1153.x, x_1153.z, x_1153.z));
        let x_1156 : vec4<f32> = u_xlat10;
        let x_1160 : vec2<f32> = (vec2<f32>(x_1156.y, x_1156.w) * vec2<f32>(0.04081600159406661987f, 0.04081600159406661987f));
        let x_1161 : vec4<f32> = u_xlat11;
        u_xlat11 = vec4<f32>(x_1161.x, x_1160.x, x_1161.z, x_1160.y);
        let x_1163 : vec4<f32> = u_xlat10;
        let x_1166 : vec2<f32> = u_xlat55;
        let x_1168 : vec2<f32> = ((vec2<f32>(x_1163.x, x_1163.z) * vec2<f32>(0.5f, 0.5f)) + -(x_1166));
        let x_1169 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_1168.x, x_1169.y, x_1168.y, x_1169.w);
        let x_1171 : vec2<f32> = u_xlat55;
        let x_1173 : vec2<f32> = (-(x_1171) + vec2<f32>(1.0f, 1.0f));
        let x_1174 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_1173.x, x_1173.y, x_1174.z, x_1174.w);
        let x_1176 : vec2<f32> = u_xlat55;
        u_xlat62 = min(x_1176, vec2<f32>(0.0f, 0.0f));
        let x_1178 : vec2<f32> = u_xlat62;
        let x_1180 : vec2<f32> = u_xlat62;
        let x_1182 : vec4<f32> = u_xlat10;
        let x_1184 : vec2<f32> = ((-(x_1178) * x_1180) + vec2<f32>(x_1182.x, x_1182.y));
        let x_1185 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_1184.x, x_1184.y, x_1185.z, x_1185.w);
        let x_1187 : vec2<f32> = u_xlat55;
        u_xlat62 = max(x_1187, vec2<f32>(0.0f, 0.0f));
        let x_1190 : vec2<f32> = u_xlat62;
        let x_1192 : vec2<f32> = u_xlat62;
        let x_1194 : vec4<f32> = u_xlat9;
        let x_1196 : vec2<f32> = ((-(x_1190) * x_1192) + vec2<f32>(x_1194.y, x_1194.w));
        let x_1197 : vec3<f32> = u_xlat35;
        u_xlat35 = vec3<f32>(x_1196.x, x_1197.y, x_1196.y);
        let x_1199 : vec4<f32> = u_xlat10;
        let x_1202 : vec2<f32> = (vec2<f32>(x_1199.x, x_1199.y) + vec2<f32>(2.0f, 2.0f));
        let x_1203 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_1202.x, x_1202.y, x_1203.z, x_1203.w);
        let x_1205 : vec3<f32> = u_xlat35;
        let x_1207 : vec2<f32> = (vec2<f32>(x_1205.x, x_1205.z) + vec2<f32>(2.0f, 2.0f));
        let x_1208 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_1208.x, x_1207.x, x_1208.z, x_1207.y);
        let x_1211 : f32 = u_xlat9.y;
        u_xlat12.z = (x_1211 * 0.08163200318813323975f);
        let x_1215 : vec4<f32> = u_xlat9;
        let x_1218 : vec3<f32> = (vec3<f32>(x_1215.z, x_1215.x, x_1215.w) * vec3<f32>(0.08163200318813323975f, 0.08163200318813323975f, 0.08163200318813323975f));
        let x_1219 : vec4<f32> = u_xlat13;
        u_xlat13 = vec4<f32>(x_1218.x, x_1218.y, x_1218.z, x_1219.w);
        let x_1221 : vec4<f32> = u_xlat10;
        let x_1224 : vec2<f32> = (vec2<f32>(x_1221.x, x_1221.y) * vec2<f32>(0.08163200318813323975f, 0.08163200318813323975f));
        let x_1225 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_1224.x, x_1224.y, x_1225.z, x_1225.w);
        let x_1228 : f32 = u_xlat13.y;
        u_xlat12.x = x_1228;
        let x_1230 : vec2<f32> = u_xlat55;
        let x_1237 : vec2<f32> = ((vec2<f32>(x_1230.x, x_1230.x) * vec2<f32>(-0.08163200318813323975f, 0.08163200318813323975f)) + vec2<f32>(0.16326400637626647949f, 0.08163200318813323975f));
        let x_1238 : vec4<f32> = u_xlat12;
        u_xlat12 = vec4<f32>(x_1238.x, x_1237.x, x_1238.z, x_1237.y);
        let x_1240 : vec2<f32> = u_xlat55;
        let x_1244 : vec2<f32> = ((vec2<f32>(x_1240.x, x_1240.x) * vec2<f32>(-0.08163200318813323975f, 0.08163200318813323975f)) + vec2<f32>(0.08163200318813323975f, 0.16326400637626647949f));
        let x_1245 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_1244.x, x_1245.y, x_1244.y, x_1245.w);
        let x_1248 : f32 = u_xlat9.x;
        u_xlat10.y = x_1248;
        let x_1251 : f32 = u_xlat11.y;
        u_xlat10.w = x_1251;
        let x_1253 : vec4<f32> = u_xlat10;
        let x_1254 : vec4<f32> = u_xlat12;
        u_xlat12 = (x_1253 + x_1254);
        let x_1256 : vec2<f32> = u_xlat55;
        let x_1259 : vec2<f32> = ((vec2<f32>(x_1256.y, x_1256.y) * vec2<f32>(-0.08163200318813323975f, 0.08163200318813323975f)) + vec2<f32>(0.16326400637626647949f, 0.08163200318813323975f));
        let x_1260 : vec4<f32> = u_xlat13;
        u_xlat13 = vec4<f32>(x_1260.x, x_1259.x, x_1260.z, x_1259.y);
        let x_1262 : vec2<f32> = u_xlat55;
        let x_1265 : vec2<f32> = ((vec2<f32>(x_1262.y, x_1262.y) * vec2<f32>(-0.08163200318813323975f, 0.08163200318813323975f)) + vec2<f32>(0.08163200318813323975f, 0.16326400637626647949f));
        let x_1266 : vec4<f32> = u_xlat11;
        u_xlat11 = vec4<f32>(x_1265.x, x_1266.y, x_1265.y, x_1266.w);
        let x_1269 : f32 = u_xlat9.y;
        u_xlat11.y = x_1269;
        let x_1271 : vec4<f32> = u_xlat11;
        let x_1272 : vec4<f32> = u_xlat13;
        u_xlat9 = (x_1271 + x_1272);
        let x_1274 : vec4<f32> = u_xlat10;
        let x_1275 : vec4<f32> = u_xlat12;
        u_xlat10 = (x_1274 / x_1275);
        let x_1277 : vec4<f32> = u_xlat10;
        u_xlat10 = (x_1277 + vec4<f32>(-3.5f, -1.5f, 0.5f, 2.5f));
        let x_1283 : vec4<f32> = u_xlat11;
        let x_1284 : vec4<f32> = u_xlat9;
        u_xlat11 = (x_1283 / x_1284);
        let x_1286 : vec4<f32> = u_xlat11;
        u_xlat11 = (x_1286 + vec4<f32>(-3.5f, -1.5f, 0.5f, 2.5f));
        let x_1288 : vec4<f32> = u_xlat10;
        let x_1291 : vec4<f32> = x_372.x_MainLightShadowmapSize;
        u_xlat10 = (vec4<f32>(x_1288.w, x_1288.x, x_1288.y, x_1288.z) * vec4<f32>(x_1291.x, x_1291.x, x_1291.x, x_1291.x));
        let x_1294 : vec4<f32> = u_xlat11;
        let x_1297 : vec4<f32> = x_372.x_MainLightShadowmapSize;
        u_xlat11 = (vec4<f32>(x_1294.x, x_1294.w, x_1294.y, x_1294.z) * vec4<f32>(x_1297.y, x_1297.y, x_1297.y, x_1297.y));
        let x_1300 : vec4<f32> = u_xlat10;
        let x_1301 : vec3<f32> = vec3<f32>(x_1300.y, x_1300.z, x_1300.w);
        let x_1302 : vec4<f32> = u_xlat13;
        u_xlat13 = vec4<f32>(x_1301.x, x_1302.y, x_1301.y, x_1301.z);
        let x_1305 : f32 = u_xlat11.x;
        u_xlat13.y = x_1305;
        let x_1307 : vec4<f32> = u_xlat3;
        let x_1310 : vec4<f32> = x_372.x_MainLightShadowmapSize;
        let x_1313 : vec4<f32> = u_xlat13;
        u_xlat14 = ((vec4<f32>(x_1307.x, x_1307.y, x_1307.x, x_1307.y) * vec4<f32>(x_1310.x, x_1310.y, x_1310.x, x_1310.y)) + vec4<f32>(x_1313.x, x_1313.y, x_1313.z, x_1313.y));
        let x_1316 : vec4<f32> = u_xlat3;
        let x_1319 : vec4<f32> = x_372.x_MainLightShadowmapSize;
        let x_1322 : vec4<f32> = u_xlat13;
        u_xlat55 = ((vec2<f32>(x_1316.x, x_1316.y) * vec2<f32>(x_1319.x, x_1319.y)) + vec2<f32>(x_1322.w, x_1322.y));
        let x_1326 : f32 = u_xlat13.y;
        u_xlat10.y = x_1326;
        let x_1329 : f32 = u_xlat11.z;
        u_xlat13.y = x_1329;
        let x_1331 : vec4<f32> = u_xlat3;
        let x_1334 : vec4<f32> = x_372.x_MainLightShadowmapSize;
        let x_1337 : vec4<f32> = u_xlat13;
        u_xlat15 = ((vec4<f32>(x_1331.x, x_1331.y, x_1331.x, x_1331.y) * vec4<f32>(x_1334.x, x_1334.y, x_1334.x, x_1334.y)) + vec4<f32>(x_1337.x, x_1337.y, x_1337.z, x_1337.y));
        let x_1340 : vec4<f32> = u_xlat3;
        let x_1343 : vec4<f32> = x_372.x_MainLightShadowmapSize;
        let x_1346 : vec4<f32> = u_xlat13;
        let x_1348 : vec2<f32> = ((vec2<f32>(x_1340.x, x_1340.y) * vec2<f32>(x_1343.x, x_1343.y)) + vec2<f32>(x_1346.w, x_1346.y));
        let x_1349 : vec4<f32> = u_xlat16;
        u_xlat16 = vec4<f32>(x_1348.x, x_1348.y, x_1349.z, x_1349.w);
        let x_1352 : f32 = u_xlat13.y;
        u_xlat10.z = x_1352;
        let x_1355 : vec4<f32> = u_xlat3;
        let x_1358 : vec4<f32> = x_372.x_MainLightShadowmapSize;
        let x_1361 : vec4<f32> = u_xlat10;
        u_xlat17 = ((vec4<f32>(x_1355.x, x_1355.y, x_1355.x, x_1355.y) * vec4<f32>(x_1358.x, x_1358.y, x_1358.x, x_1358.y)) + vec4<f32>(x_1361.x, x_1361.y, x_1361.x, x_1361.z));
        let x_1365 : f32 = u_xlat11.w;
        u_xlat13.y = x_1365;
        let x_1368 : vec4<f32> = u_xlat3;
        let x_1371 : vec4<f32> = x_372.x_MainLightShadowmapSize;
        let x_1374 : vec4<f32> = u_xlat13;
        u_xlat18 = ((vec4<f32>(x_1368.x, x_1368.y, x_1368.x, x_1368.y) * vec4<f32>(x_1371.x, x_1371.y, x_1371.x, x_1371.y)) + vec4<f32>(x_1374.x, x_1374.y, x_1374.z, x_1374.y));
        let x_1378 : vec4<f32> = u_xlat3;
        let x_1381 : vec4<f32> = x_372.x_MainLightShadowmapSize;
        let x_1384 : vec4<f32> = u_xlat13;
        u_xlat36 = ((vec2<f32>(x_1378.x, x_1378.y) * vec2<f32>(x_1381.x, x_1381.y)) + vec2<f32>(x_1384.w, x_1384.y));
        let x_1388 : f32 = u_xlat13.y;
        u_xlat10.w = x_1388;
        let x_1391 : vec4<f32> = u_xlat3;
        let x_1394 : vec4<f32> = x_372.x_MainLightShadowmapSize;
        let x_1397 : vec4<f32> = u_xlat10;
        u_xlat68 = ((vec2<f32>(x_1391.x, x_1391.y) * vec2<f32>(x_1394.x, x_1394.y)) + vec2<f32>(x_1397.x, x_1397.w));
        let x_1400 : vec4<f32> = u_xlat13;
        let x_1401 : vec3<f32> = vec3<f32>(x_1400.x, x_1400.z, x_1400.w);
        let x_1402 : vec4<f32> = u_xlat11;
        u_xlat11 = vec4<f32>(x_1401.x, x_1402.y, x_1401.y, x_1401.z);
        let x_1404 : vec4<f32> = u_xlat3;
        let x_1407 : vec4<f32> = x_372.x_MainLightShadowmapSize;
        let x_1410 : vec4<f32> = u_xlat11;
        u_xlat13 = ((vec4<f32>(x_1404.x, x_1404.y, x_1404.x, x_1404.y) * vec4<f32>(x_1407.x, x_1407.y, x_1407.x, x_1407.y)) + vec4<f32>(x_1410.x, x_1410.y, x_1410.z, x_1410.y));
        let x_1414 : vec4<f32> = u_xlat3;
        let x_1417 : vec4<f32> = x_372.x_MainLightShadowmapSize;
        let x_1420 : vec4<f32> = u_xlat11;
        u_xlat63 = ((vec2<f32>(x_1414.x, x_1414.y) * vec2<f32>(x_1417.x, x_1417.y)) + vec2<f32>(x_1420.w, x_1420.y));
        let x_1424 : f32 = u_xlat10.x;
        u_xlat11.x = x_1424;
        let x_1426 : vec4<f32> = u_xlat3;
        let x_1429 : vec4<f32> = x_372.x_MainLightShadowmapSize;
        let x_1432 : vec4<f32> = u_xlat11;
        let x_1434 : vec2<f32> = ((vec2<f32>(x_1426.x, x_1426.y) * vec2<f32>(x_1429.x, x_1429.y)) + vec2<f32>(x_1432.x, x_1432.y));
        let x_1435 : vec4<f32> = u_xlat3;
        u_xlat3 = vec4<f32>(x_1434.x, x_1434.y, x_1435.z, x_1435.w);
        let x_1438 : vec4<f32> = u_xlat9;
        let x_1440 : vec4<f32> = u_xlat12;
        u_xlat19 = (vec4<f32>(x_1438.x, x_1438.x, x_1438.x, x_1438.x) * x_1440);
        let x_1443 : vec4<f32> = u_xlat9;
        let x_1445 : vec4<f32> = u_xlat12;
        u_xlat20 = (vec4<f32>(x_1443.y, x_1443.y, x_1443.y, x_1443.y) * x_1445);
        let x_1448 : vec4<f32> = u_xlat9;
        let x_1450 : vec4<f32> = u_xlat12;
        u_xlat21 = (vec4<f32>(x_1448.z, x_1448.z, x_1448.z, x_1448.z) * x_1450);
        let x_1452 : vec4<f32> = u_xlat9;
        let x_1454 : vec4<f32> = u_xlat12;
        u_xlat9 = (vec4<f32>(x_1452.w, x_1452.w, x_1452.w, x_1452.w) * x_1454);
        let x_1457 : vec4<f32> = u_xlat14;
        let x_1458 : vec2<f32> = vec2<f32>(x_1457.x, x_1457.y);
        let x_1460 : f32 = u_xlat2.z;
        txVec13 = vec3<f32>(x_1458.x, x_1458.y, x_1460);
        let x_1467 : vec3<f32> = txVec13;
        let x_1469 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_LinearClampCompare, x_1467.xy, x_1467.z);
        u_xlat80 = x_1469;
        let x_1471 : vec4<f32> = u_xlat14;
        let x_1472 : vec2<f32> = vec2<f32>(x_1471.z, x_1471.w);
        let x_1474 : f32 = u_xlat2.z;
        txVec14 = vec3<f32>(x_1472.x, x_1472.y, x_1474);
        let x_1482 : vec3<f32> = txVec14;
        let x_1484 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_LinearClampCompare, x_1482.xy, x_1482.z);
        u_xlat82 = x_1484;
        let x_1485 : f32 = u_xlat82;
        let x_1487 : f32 = u_xlat19.y;
        u_xlat82 = (x_1485 * x_1487);
        let x_1490 : f32 = u_xlat19.x;
        let x_1491 : f32 = u_xlat80;
        let x_1493 : f32 = u_xlat82;
        u_xlat80 = ((x_1490 * x_1491) + x_1493);
        let x_1496 : vec2<f32> = u_xlat55;
        let x_1498 : f32 = u_xlat2.z;
        txVec15 = vec3<f32>(x_1496.x, x_1496.y, x_1498);
        let x_1505 : vec3<f32> = txVec15;
        let x_1507 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_LinearClampCompare, x_1505.xy, x_1505.z);
        u_xlat55.x = x_1507;
        let x_1510 : f32 = u_xlat19.z;
        let x_1512 : f32 = u_xlat55.x;
        let x_1514 : f32 = u_xlat80;
        u_xlat80 = ((x_1510 * x_1512) + x_1514);
        let x_1517 : vec4<f32> = u_xlat17;
        let x_1518 : vec2<f32> = vec2<f32>(x_1517.x, x_1517.y);
        let x_1520 : f32 = u_xlat2.z;
        txVec16 = vec3<f32>(x_1518.x, x_1518.y, x_1520);
        let x_1527 : vec3<f32> = txVec16;
        let x_1529 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_LinearClampCompare, x_1527.xy, x_1527.z);
        u_xlat55.x = x_1529;
        let x_1532 : f32 = u_xlat19.w;
        let x_1534 : f32 = u_xlat55.x;
        let x_1536 : f32 = u_xlat80;
        u_xlat80 = ((x_1532 * x_1534) + x_1536);
        let x_1539 : vec4<f32> = u_xlat15;
        let x_1540 : vec2<f32> = vec2<f32>(x_1539.x, x_1539.y);
        let x_1542 : f32 = u_xlat2.z;
        txVec17 = vec3<f32>(x_1540.x, x_1540.y, x_1542);
        let x_1549 : vec3<f32> = txVec17;
        let x_1551 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_LinearClampCompare, x_1549.xy, x_1549.z);
        u_xlat55.x = x_1551;
        let x_1554 : f32 = u_xlat20.x;
        let x_1556 : f32 = u_xlat55.x;
        let x_1558 : f32 = u_xlat80;
        u_xlat80 = ((x_1554 * x_1556) + x_1558);
        let x_1561 : vec4<f32> = u_xlat15;
        let x_1562 : vec2<f32> = vec2<f32>(x_1561.z, x_1561.w);
        let x_1564 : f32 = u_xlat2.z;
        txVec18 = vec3<f32>(x_1562.x, x_1562.y, x_1564);
        let x_1571 : vec3<f32> = txVec18;
        let x_1573 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_LinearClampCompare, x_1571.xy, x_1571.z);
        u_xlat55.x = x_1573;
        let x_1576 : f32 = u_xlat20.y;
        let x_1578 : f32 = u_xlat55.x;
        let x_1580 : f32 = u_xlat80;
        u_xlat80 = ((x_1576 * x_1578) + x_1580);
        let x_1583 : vec4<f32> = u_xlat16;
        let x_1584 : vec2<f32> = vec2<f32>(x_1583.x, x_1583.y);
        let x_1586 : f32 = u_xlat2.z;
        txVec19 = vec3<f32>(x_1584.x, x_1584.y, x_1586);
        let x_1593 : vec3<f32> = txVec19;
        let x_1595 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_LinearClampCompare, x_1593.xy, x_1593.z);
        u_xlat55.x = x_1595;
        let x_1598 : f32 = u_xlat20.z;
        let x_1600 : f32 = u_xlat55.x;
        let x_1602 : f32 = u_xlat80;
        u_xlat80 = ((x_1598 * x_1600) + x_1602);
        let x_1605 : vec4<f32> = u_xlat17;
        let x_1606 : vec2<f32> = vec2<f32>(x_1605.z, x_1605.w);
        let x_1608 : f32 = u_xlat2.z;
        txVec20 = vec3<f32>(x_1606.x, x_1606.y, x_1608);
        let x_1615 : vec3<f32> = txVec20;
        let x_1617 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_LinearClampCompare, x_1615.xy, x_1615.z);
        u_xlat55.x = x_1617;
        let x_1620 : f32 = u_xlat20.w;
        let x_1622 : f32 = u_xlat55.x;
        let x_1624 : f32 = u_xlat80;
        u_xlat80 = ((x_1620 * x_1622) + x_1624);
        let x_1627 : vec4<f32> = u_xlat18;
        let x_1628 : vec2<f32> = vec2<f32>(x_1627.x, x_1627.y);
        let x_1630 : f32 = u_xlat2.z;
        txVec21 = vec3<f32>(x_1628.x, x_1628.y, x_1630);
        let x_1637 : vec3<f32> = txVec21;
        let x_1639 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_LinearClampCompare, x_1637.xy, x_1637.z);
        u_xlat55.x = x_1639;
        let x_1642 : f32 = u_xlat21.x;
        let x_1644 : f32 = u_xlat55.x;
        let x_1646 : f32 = u_xlat80;
        u_xlat80 = ((x_1642 * x_1644) + x_1646);
        let x_1649 : vec4<f32> = u_xlat18;
        let x_1650 : vec2<f32> = vec2<f32>(x_1649.z, x_1649.w);
        let x_1652 : f32 = u_xlat2.z;
        txVec22 = vec3<f32>(x_1650.x, x_1650.y, x_1652);
        let x_1659 : vec3<f32> = txVec22;
        let x_1661 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_LinearClampCompare, x_1659.xy, x_1659.z);
        u_xlat55.x = x_1661;
        let x_1664 : f32 = u_xlat21.y;
        let x_1666 : f32 = u_xlat55.x;
        let x_1668 : f32 = u_xlat80;
        u_xlat80 = ((x_1664 * x_1666) + x_1668);
        let x_1671 : vec2<f32> = u_xlat36;
        let x_1673 : f32 = u_xlat2.z;
        txVec23 = vec3<f32>(x_1671.x, x_1671.y, x_1673);
        let x_1680 : vec3<f32> = txVec23;
        let x_1682 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_LinearClampCompare, x_1680.xy, x_1680.z);
        u_xlat55.x = x_1682;
        let x_1685 : f32 = u_xlat21.z;
        let x_1687 : f32 = u_xlat55.x;
        let x_1689 : f32 = u_xlat80;
        u_xlat80 = ((x_1685 * x_1687) + x_1689);
        let x_1692 : vec2<f32> = u_xlat68;
        let x_1694 : f32 = u_xlat2.z;
        txVec24 = vec3<f32>(x_1692.x, x_1692.y, x_1694);
        let x_1701 : vec3<f32> = txVec24;
        let x_1703 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_LinearClampCompare, x_1701.xy, x_1701.z);
        u_xlat55.x = x_1703;
        let x_1706 : f32 = u_xlat21.w;
        let x_1708 : f32 = u_xlat55.x;
        let x_1710 : f32 = u_xlat80;
        u_xlat80 = ((x_1706 * x_1708) + x_1710);
        let x_1713 : vec4<f32> = u_xlat13;
        let x_1714 : vec2<f32> = vec2<f32>(x_1713.x, x_1713.y);
        let x_1716 : f32 = u_xlat2.z;
        txVec25 = vec3<f32>(x_1714.x, x_1714.y, x_1716);
        let x_1723 : vec3<f32> = txVec25;
        let x_1725 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_LinearClampCompare, x_1723.xy, x_1723.z);
        u_xlat55.x = x_1725;
        let x_1728 : f32 = u_xlat9.x;
        let x_1730 : f32 = u_xlat55.x;
        let x_1732 : f32 = u_xlat80;
        u_xlat80 = ((x_1728 * x_1730) + x_1732);
        let x_1735 : vec4<f32> = u_xlat13;
        let x_1736 : vec2<f32> = vec2<f32>(x_1735.z, x_1735.w);
        let x_1738 : f32 = u_xlat2.z;
        txVec26 = vec3<f32>(x_1736.x, x_1736.y, x_1738);
        let x_1745 : vec3<f32> = txVec26;
        let x_1747 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_LinearClampCompare, x_1745.xy, x_1745.z);
        u_xlat55.x = x_1747;
        let x_1750 : f32 = u_xlat9.y;
        let x_1752 : f32 = u_xlat55.x;
        let x_1754 : f32 = u_xlat80;
        u_xlat80 = ((x_1750 * x_1752) + x_1754);
        let x_1757 : vec2<f32> = u_xlat63;
        let x_1759 : f32 = u_xlat2.z;
        txVec27 = vec3<f32>(x_1757.x, x_1757.y, x_1759);
        let x_1766 : vec3<f32> = txVec27;
        let x_1768 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_LinearClampCompare, x_1766.xy, x_1766.z);
        u_xlat55.x = x_1768;
        let x_1771 : f32 = u_xlat9.z;
        let x_1773 : f32 = u_xlat55.x;
        let x_1775 : f32 = u_xlat80;
        u_xlat80 = ((x_1771 * x_1773) + x_1775);
        let x_1778 : vec4<f32> = u_xlat3;
        let x_1779 : vec2<f32> = vec2<f32>(x_1778.x, x_1778.y);
        let x_1781 : f32 = u_xlat2.z;
        txVec28 = vec3<f32>(x_1779.x, x_1779.y, x_1781);
        let x_1788 : vec3<f32> = txVec28;
        let x_1790 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_LinearClampCompare, x_1788.xy, x_1788.z);
        u_xlat3.x = x_1790;
        let x_1793 : f32 = u_xlat9.w;
        let x_1795 : f32 = u_xlat3.x;
        let x_1797 : f32 = u_xlat80;
        u_xlat79 = ((x_1793 * x_1795) + x_1797);
      }
    }
  } else {
    let x_1801 : vec4<f32> = u_xlat2;
    let x_1802 : vec2<f32> = vec2<f32>(x_1801.x, x_1801.y);
    let x_1804 : f32 = u_xlat2.z;
    txVec29 = vec3<f32>(x_1802.x, x_1802.y, x_1804);
    let x_1811 : vec3<f32> = txVec29;
    let x_1813 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_LinearClampCompare, x_1811.xy, x_1811.z);
    u_xlat79 = x_1813;
  }
  let x_1815 : f32 = x_372.x_MainLightShadowParams.x;
  u_xlat80 = (-(x_1815) + 1.0f);
  let x_1818 : f32 = u_xlat79;
  let x_1820 : f32 = x_372.x_MainLightShadowParams.x;
  let x_1822 : f32 = u_xlat80;
  u_xlat79 = ((x_1818 * x_1820) + x_1822);
  let x_1826 : f32 = u_xlat2.z;
  u_xlatb3 = (0.0f >= x_1826);
  let x_1830 : f32 = u_xlat2.z;
  u_xlatb29 = (x_1830 >= 1.0f);
  let x_1832 : bool = u_xlatb29;
  let x_1833 : bool = u_xlatb3;
  u_xlatb3 = (x_1832 | x_1833);
  let x_1835 : bool = u_xlatb3;
  let x_1836 : f32 = u_xlat79;
  u_xlat79 = select(x_1836, 1.0f, x_1835);
  let x_1838 : vec3<f32> = u_xlat1;
  let x_1840 : vec4<f32> = x_149.x_MainLightPosition;
  u_xlat1.x = dot(x_1838, -(vec3<f32>(x_1840.x, x_1840.y, x_1840.z)));
  let x_1846 : f32 = u_xlat1.x;
  u_xlat1.x = clamp(x_1846, 0.0f, 1.0f);
  let x_1850 : f32 = u_xlat79;
  let x_1853 : vec4<f32> = x_149.x_MainLightColor;
  u_xlat27 = (vec3<f32>(x_1850, x_1850, x_1850) * vec3<f32>(x_1853.x, x_1853.y, x_1853.z));
  let x_1856 : vec3<f32> = u_xlat27;
  let x_1857 : vec3<f32> = u_xlat1;
  u_xlat1 = (x_1856 * vec3<f32>(x_1857.x, x_1857.x, x_1857.x));
  let x_1860 : vec3<f32> = u_xlat1;
  let x_1861 : vec4<f32> = u_xlat6;
  u_xlat1 = (x_1860 * vec3<f32>(x_1861.x, x_1861.y, x_1861.z));
  let x_1865 : f32 = x_83.unity_LODFade.x;
  u_xlatb79 = (x_1865 < 0.0f);
  let x_1868 : f32 = x_83.unity_LODFade.x;
  u_xlat29 = (x_1868 + 1.0f);
  let x_1870 : bool = u_xlatb79;
  if (x_1870) {
    let x_1875 : f32 = u_xlat29;
    x_1872 = x_1875;
  } else {
    let x_1878 : f32 = x_83.unity_LODFade.x;
    x_1872 = x_1878;
  }
  let x_1879 : f32 = x_1872;
  u_xlat79 = x_1879;
  let x_1880 : f32 = u_xlat79;
  u_xlatb29 = (0.5f >= x_1880);
  let x_1882 : vec4<f32> = u_xlat5;
  let x_1886 : vec4<f32> = x_149.x_ScreenParams;
  let x_1888 : vec3<f32> = (abs(vec3<f32>(x_1882.x, x_1882.y, x_1882.z)) * vec3<f32>(x_1886.x, x_1886.y, x_1886.x));
  let x_1889 : vec4<f32> = u_xlat5;
  u_xlat5 = vec4<f32>(x_1888.x, x_1888.y, x_1888.z, x_1889.w);
  let x_1894 : vec4<f32> = u_xlat5;
  u_xlatu5 = vec3<u32>(vec3<f32>(x_1894.x, x_1894.y, x_1894.z));
  let x_1899 : u32 = u_xlatu5.z;
  u_xlatu55 = (x_1899 * 1025u);
  let x_1903 : u32 = u_xlatu55;
  u_xlatu81 = (x_1903 >> 6u);
  let x_1907 : u32 = u_xlatu81;
  let x_1908 : u32 = u_xlatu55;
  u_xlati55 = bitcast<i32>((x_1907 ^ x_1908));
  let x_1911 : i32 = u_xlati55;
  u_xlatu55 = (bitcast<u32>(x_1911) * 9u);
  let x_1915 : u32 = u_xlatu55;
  u_xlatu81 = (x_1915 >> 11u);
  let x_1918 : u32 = u_xlatu81;
  let x_1919 : u32 = u_xlatu55;
  u_xlati55 = bitcast<i32>((x_1918 ^ x_1919));
  let x_1922 : i32 = u_xlati55;
  u_xlati55 = (x_1922 * 32769i);
  let x_1925 : i32 = u_xlati55;
  let x_1928 : u32 = u_xlatu5.y;
  u_xlati55 = bitcast<i32>((bitcast<u32>(x_1925) ^ x_1928));
  let x_1931 : i32 = u_xlati55;
  u_xlatu55 = (bitcast<u32>(x_1931) * 1025u);
  let x_1934 : u32 = u_xlatu55;
  u_xlatu81 = (x_1934 >> 6u);
  let x_1936 : u32 = u_xlatu81;
  let x_1937 : u32 = u_xlatu55;
  u_xlati55 = bitcast<i32>((x_1936 ^ x_1937));
  let x_1940 : i32 = u_xlati55;
  u_xlatu55 = (bitcast<u32>(x_1940) * 9u);
  let x_1943 : u32 = u_xlatu55;
  u_xlatu81 = (x_1943 >> 11u);
  let x_1945 : u32 = u_xlatu81;
  let x_1946 : u32 = u_xlatu55;
  u_xlati55 = bitcast<i32>((x_1945 ^ x_1946));
  let x_1949 : i32 = u_xlati55;
  u_xlati55 = (x_1949 * 32769i);
  let x_1951 : i32 = u_xlati55;
  let x_1954 : u32 = u_xlatu5.x;
  u_xlati55 = bitcast<i32>((bitcast<u32>(x_1951) ^ x_1954));
  let x_1957 : i32 = u_xlati55;
  u_xlatu55 = (bitcast<u32>(x_1957) * 1025u);
  let x_1960 : u32 = u_xlatu55;
  u_xlatu81 = (x_1960 >> 6u);
  let x_1962 : u32 = u_xlatu81;
  let x_1963 : u32 = u_xlatu55;
  u_xlati55 = bitcast<i32>((x_1962 ^ x_1963));
  let x_1966 : i32 = u_xlati55;
  u_xlatu55 = (bitcast<u32>(x_1966) * 9u);
  let x_1969 : u32 = u_xlatu55;
  u_xlatu81 = (x_1969 >> 11u);
  let x_1971 : u32 = u_xlatu81;
  let x_1972 : u32 = u_xlatu55;
  u_xlati55 = bitcast<i32>((x_1971 ^ x_1972));
  let x_1975 : i32 = u_xlati55;
  u_xlati55 = (x_1975 * 32769i);
  param = 1065353216i;
  let x_1981 : i32 = u_xlati55;
  param_1 = x_1981;
  param_2 = 0i;
  param_3 = 23i;
  let x_1984 : i32 = int_bitfieldInsert_i1_i1_i1_i1_(&(param), &(param_1), &(param_2), &(param_3));
  u_xlat55.x = bitcast<f32>(x_1984);
  let x_1988 : f32 = u_xlat55.x;
  u_xlat55.x = (x_1988 + -1.0f);
  let x_1993 : f32 = u_xlat55.x;
  u_xlat81 = (-(x_1993) + 1.0f);
  let x_1996 : bool = u_xlatb29;
  if (x_1996) {
    let x_2001 : f32 = u_xlat55.x;
    x_1997 = x_2001;
  } else {
    let x_2003 : f32 = u_xlat81;
    x_1997 = x_2003;
  }
  let x_2004 : f32 = x_1997;
  u_xlat29 = x_2004;
  let x_2005 : f32 = u_xlat79;
  let x_2007 : f32 = u_xlat29;
  u_xlat79 = ((x_2005 * 2.0f) + -(x_2007));
  let x_2010 : f32 = u_xlat79;
  let x_2012 : f32 = u_xlat6.w;
  u_xlat29 = (x_2010 * x_2012);
  let x_2015 : f32 = u_xlat29;
  u_xlatb55 = (x_2015 >= 0.40000000596046447754f);
  let x_2018 : bool = u_xlatb55;
  let x_2019 : f32 = u_xlat29;
  u_xlat55.x = select(0.0f, x_2019, x_2018);
  let x_2023 : f32 = u_xlat6.w;
  let x_2024 : f32 = u_xlat79;
  u_xlat79 = ((x_2023 * x_2024) + -0.40000000596046447754f);
  let x_2028 : f32 = u_xlat29;
  u_xlat81 = dpdxCoarse(x_2028);
  let x_2030 : f32 = u_xlat29;
  u_xlat29 = dpdyCoarse(x_2030);
  let x_2032 : f32 = u_xlat29;
  let x_2034 : f32 = u_xlat81;
  u_xlat29 = (abs(x_2032) + abs(x_2034));
  let x_2037 : f32 = u_xlat29;
  u_xlat29 = max(x_2037, 0.00009999999747378752f);
  let x_2040 : f32 = u_xlat79;
  let x_2041 : f32 = u_xlat29;
  u_xlat79 = (x_2040 / x_2041);
  let x_2043 : f32 = u_xlat79;
  u_xlat79 = (x_2043 + 0.5f);
  let x_2045 : f32 = u_xlat79;
  u_xlat79 = clamp(x_2045, 0.0f, 1.0f);
  let x_2048 : f32 = x_149.x_AlphaToMaskAvailable;
  u_xlatb29 = !((x_2048 == 0.0f));
  let x_2050 : bool = u_xlatb29;
  if (x_2050) {
    let x_2054 : f32 = u_xlat79;
    x_2051 = x_2054;
  } else {
    let x_2057 : f32 = u_xlat55.x;
    x_2051 = x_2057;
  }
  let x_2058 : f32 = x_2051;
  u_xlat79 = x_2058;
  let x_2059 : f32 = u_xlat79;
  u_xlat55.x = (x_2059 + -0.00009999999747378752f);
  let x_2064 : f32 = u_xlat55.x;
  u_xlatb55 = (x_2064 < 0.0f);
  let x_2066 : bool = u_xlatb55;
  if (((select(0i, 1i, x_2066) * -1i) != 0i)) {
    discard;
  }
  let x_2074 : vec3<f32> = u_xlat26;
  let x_2075 : vec3<f32> = u_xlat34;
  u_xlat26 = (x_2074 * vec3<f32>(x_2075.y, x_2075.y, x_2075.y));
  let x_2078 : vec3<f32> = u_xlat34;
  let x_2080 : vec4<f32> = vs_INTERP4;
  let x_2083 : vec3<f32> = u_xlat26;
  u_xlat26 = ((vec3<f32>(x_2078.x, x_2078.x, x_2078.x) * vec3<f32>(x_2080.x, x_2080.y, x_2080.z)) + x_2083);
  let x_2085 : vec3<f32> = u_xlat34;
  let x_2087 : vec3<f32> = vs_INTERP9;
  let x_2089 : vec3<f32> = u_xlat26;
  u_xlat26 = ((vec3<f32>(x_2085.z, x_2085.z, x_2085.z) * x_2087) + x_2089);
  let x_2091 : vec3<f32> = u_xlat26;
  let x_2092 : vec3<f32> = u_xlat26;
  u_xlat55.x = dot(x_2091, x_2092);
  let x_2096 : f32 = u_xlat55.x;
  u_xlat55.x = inverseSqrt(x_2096);
  let x_2099 : vec3<f32> = u_xlat26;
  let x_2100 : vec2<f32> = u_xlat55;
  u_xlat26 = (x_2099 * vec3<f32>(x_2100.x, x_2100.x, x_2100.x));
  let x_2104 : f32 = vs_INTERP8.y;
  let x_2106 : f32 = x_149.unity_MatrixV[1i].z;
  u_xlat55.x = (x_2104 * x_2106);
  let x_2110 : f32 = x_149.unity_MatrixV[0i].z;
  let x_2112 : f32 = vs_INTERP8.x;
  let x_2115 : f32 = u_xlat55.x;
  u_xlat55.x = ((x_2110 * x_2112) + x_2115);
  let x_2119 : f32 = x_149.unity_MatrixV[2i].z;
  let x_2121 : f32 = vs_INTERP8.z;
  let x_2124 : f32 = u_xlat55.x;
  u_xlat55.x = ((x_2119 * x_2121) + x_2124);
  let x_2128 : f32 = u_xlat55.x;
  let x_2130 : f32 = x_149.unity_MatrixV[3i].z;
  u_xlat55.x = (x_2128 + x_2130);
  let x_2134 : f32 = u_xlat55.x;
  let x_2137 : f32 = x_149.x_ProjectionParams.y;
  u_xlat55.x = (-(x_2134) + -(x_2137));
  let x_2142 : f32 = u_xlat55.x;
  u_xlat55.x = max(x_2142, 0.0f);
  let x_2146 : f32 = u_xlat55.x;
  let x_2148 : f32 = x_149.unity_FogParams.x;
  u_xlat55.x = (x_2146 * x_2148);
  let x_2158 : vec2<f32> = vs_INTERP0;
  let x_2160 : f32 = x_149.x_GlobalMipBias.x;
  let x_2161 : vec4<f32> = textureSampleBias(unity_LightmapInd, samplerunity_Lightmap, x_2158, x_2160);
  u_xlat5 = x_2161;
  let x_2166 : vec2<f32> = vs_INTERP0;
  let x_2168 : f32 = x_149.x_GlobalMipBias.x;
  let x_2169 : vec4<f32> = textureSampleBias(unity_Lightmap, samplerunity_Lightmap, x_2166, x_2168);
  let x_2170 : vec3<f32> = vec3<f32>(x_2169.x, x_2169.y, x_2169.z);
  let x_2171 : vec4<f32> = u_xlat6;
  u_xlat6 = vec4<f32>(x_2170.x, x_2170.y, x_2170.z, x_2171.w);
  let x_2173 : vec4<f32> = u_xlat5;
  let x_2176 : vec3<f32> = (vec3<f32>(x_2173.x, x_2173.y, x_2173.z) + vec3<f32>(-0.5f, -0.5f, -0.5f));
  let x_2177 : vec4<f32> = u_xlat5;
  u_xlat5 = vec4<f32>(x_2176.x, x_2176.y, x_2176.z, x_2177.w);
  let x_2179 : vec3<f32> = u_xlat26;
  let x_2180 : vec4<f32> = u_xlat5;
  u_xlat81 = dot(x_2179, vec3<f32>(x_2180.x, x_2180.y, x_2180.z));
  let x_2183 : f32 = u_xlat81;
  u_xlat81 = (x_2183 + 0.5f);
  let x_2185 : f32 = u_xlat81;
  let x_2187 : vec4<f32> = u_xlat6;
  let x_2189 : vec3<f32> = (vec3<f32>(x_2185, x_2185, x_2185) * vec3<f32>(x_2187.x, x_2187.y, x_2187.z));
  let x_2190 : vec4<f32> = u_xlat5;
  u_xlat5 = vec4<f32>(x_2189.x, x_2189.y, x_2189.z, x_2190.w);
  let x_2193 : f32 = u_xlat5.w;
  u_xlat81 = max(x_2193, 0.00009999999747378752f);
  let x_2195 : vec4<f32> = u_xlat5;
  let x_2197 : f32 = u_xlat81;
  let x_2199 : vec3<f32> = (vec3<f32>(x_2195.x, x_2195.y, x_2195.z) / vec3<f32>(x_2197, x_2197, x_2197));
  let x_2200 : vec4<f32> = u_xlat5;
  u_xlat5 = vec4<f32>(x_2199.x, x_2199.y, x_2199.z, x_2200.w);
  let x_2203 : f32 = u_xlat8.x;
  u_xlat8.x = x_2203;
  let x_2206 : f32 = u_xlat8.x;
  u_xlat8.x = clamp(x_2206, 0.0f, 1.0f);
  let x_2209 : f32 = u_xlat79;
  u_xlat79 = x_2209;
  let x_2210 : f32 = u_xlat79;
  u_xlat79 = clamp(x_2210, 0.0f, 1.0f);
  let x_2212 : vec3<f32> = u_xlat7;
  let x_2215 : vec3<f32> = (x_2212 * vec3<f32>(0.95999997854232788086f, 0.95999997854232788086f, 0.95999997854232788086f));
  let x_2216 : vec4<f32> = u_xlat6;
  u_xlat6 = vec4<f32>(x_2215.x, x_2215.y, x_2215.z, x_2216.w);
  let x_2219 : f32 = u_xlat8.x;
  u_xlat81 = (-(x_2219) + 1.0f);
  let x_2222 : f32 = u_xlat81;
  let x_2223 : f32 = u_xlat81;
  u_xlat82 = (x_2222 * x_2223);
  let x_2225 : f32 = u_xlat82;
  u_xlat82 = max(x_2225, 0.0078125f);
  let x_2229 : f32 = u_xlat82;
  let x_2230 : f32 = u_xlat82;
  u_xlat83 = (x_2229 * x_2230);
  let x_2234 : f32 = u_xlat8.x;
  u_xlat84 = (x_2234 + 0.04000002145767211914f);
  let x_2237 : f32 = u_xlat84;
  u_xlat84 = min(x_2237, 1.0f);
  let x_2239 : f32 = u_xlat82;
  u_xlat7.x = ((x_2239 * 4.0f) + 2.0f);
  let x_2245 : f32 = vs_INTERP6.w;
  u_xlat33 = min(x_2245, 1.0f);
  let x_2247 : bool = u_xlatb0;
  if (x_2247) {
    let x_2251 : f32 = x_372.x_MainLightShadowParams.y;
    u_xlatb0 = (x_2251 == 1.0f);
    let x_2253 : bool = u_xlatb0;
    if (x_2253) {
      let x_2256 : vec4<f32> = u_xlat2;
      let x_2259 : vec4<f32> = x_372.x_MainLightShadowOffset0;
      u_xlat8 = (vec4<f32>(x_2256.x, x_2256.y, x_2256.x, x_2256.y) + x_2259);
      let x_2262 : vec4<f32> = u_xlat8;
      let x_2263 : vec2<f32> = vec2<f32>(x_2262.x, x_2262.y);
      let x_2265 : f32 = u_xlat2.z;
      txVec30 = vec3<f32>(x_2263.x, x_2263.y, x_2265);
      let x_2272 : vec3<f32> = txVec30;
      let x_2274 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_LinearClampCompare, x_2272.xy, x_2272.z);
      u_xlat9.x = x_2274;
      let x_2277 : vec4<f32> = u_xlat8;
      let x_2278 : vec2<f32> = vec2<f32>(x_2277.z, x_2277.w);
      let x_2280 : f32 = u_xlat2.z;
      txVec31 = vec3<f32>(x_2278.x, x_2278.y, x_2280);
      let x_2287 : vec3<f32> = txVec31;
      let x_2289 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_LinearClampCompare, x_2287.xy, x_2287.z);
      u_xlat9.y = x_2289;
      let x_2291 : vec4<f32> = u_xlat2;
      let x_2294 : vec4<f32> = x_372.x_MainLightShadowOffset1;
      u_xlat8 = (vec4<f32>(x_2291.x, x_2291.y, x_2291.x, x_2291.y) + x_2294);
      let x_2297 : vec4<f32> = u_xlat8;
      let x_2298 : vec2<f32> = vec2<f32>(x_2297.x, x_2297.y);
      let x_2300 : f32 = u_xlat2.z;
      txVec32 = vec3<f32>(x_2298.x, x_2298.y, x_2300);
      let x_2307 : vec3<f32> = txVec32;
      let x_2309 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_LinearClampCompare, x_2307.xy, x_2307.z);
      u_xlat9.z = x_2309;
      let x_2312 : vec4<f32> = u_xlat8;
      let x_2313 : vec2<f32> = vec2<f32>(x_2312.z, x_2312.w);
      let x_2315 : f32 = u_xlat2.z;
      txVec33 = vec3<f32>(x_2313.x, x_2313.y, x_2315);
      let x_2322 : vec3<f32> = txVec33;
      let x_2324 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_LinearClampCompare, x_2322.xy, x_2322.z);
      u_xlat9.w = x_2324;
      let x_2326 : vec4<f32> = u_xlat9;
      u_xlat0.x = dot(x_2326, vec4<f32>(0.25f, 0.25f, 0.25f, 0.25f));
    } else {
      let x_2332 : f32 = x_372.x_MainLightShadowParams.y;
      u_xlatb59 = (x_2332 == 2.0f);
      let x_2334 : bool = u_xlatb59;
      if (x_2334) {
        let x_2338 : vec4<f32> = u_xlat2;
        let x_2341 : vec4<f32> = x_372.x_MainLightShadowmapSize;
        u_xlat59 = ((vec2<f32>(x_2338.x, x_2338.y) * vec2<f32>(x_2341.z, x_2341.w)) + vec2<f32>(0.5f, 0.5f));
        let x_2345 : vec2<f32> = u_xlat59;
        u_xlat59 = floor(x_2345);
        let x_2347 : vec4<f32> = u_xlat2;
        let x_2350 : vec4<f32> = x_372.x_MainLightShadowmapSize;
        let x_2353 : vec2<f32> = u_xlat59;
        let x_2355 : vec2<f32> = ((vec2<f32>(x_2347.x, x_2347.y) * vec2<f32>(x_2350.z, x_2350.w)) + -(x_2353));
        let x_2356 : vec4<f32> = u_xlat8;
        u_xlat8 = vec4<f32>(x_2355.x, x_2355.y, x_2356.z, x_2356.w);
        let x_2358 : vec4<f32> = u_xlat8;
        u_xlat9 = (vec4<f32>(x_2358.x, x_2358.x, x_2358.y, x_2358.y) + vec4<f32>(0.5f, 1.0f, 0.5f, 1.0f));
        let x_2361 : vec4<f32> = u_xlat9;
        let x_2363 : vec4<f32> = u_xlat9;
        u_xlat10 = (vec4<f32>(x_2361.x, x_2361.x, x_2361.z, x_2361.z) * vec4<f32>(x_2363.x, x_2363.x, x_2363.z, x_2363.z));
        let x_2367 : vec4<f32> = u_xlat10;
        u_xlat60 = (vec2<f32>(x_2367.y, x_2367.w) * vec2<f32>(0.07999999821186065674f, 0.07999999821186065674f));
        let x_2370 : vec4<f32> = u_xlat10;
        let x_2373 : vec4<f32> = u_xlat8;
        let x_2376 : vec2<f32> = ((vec2<f32>(x_2370.x, x_2370.z) * vec2<f32>(0.5f, 0.5f)) + -(vec2<f32>(x_2373.x, x_2373.y)));
        let x_2377 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_2376.x, x_2377.y, x_2376.y, x_2377.w);
        let x_2379 : vec4<f32> = u_xlat8;
        let x_2382 : vec2<f32> = (-(vec2<f32>(x_2379.x, x_2379.y)) + vec2<f32>(1.0f, 1.0f));
        let x_2383 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_2382.x, x_2382.y, x_2383.z, x_2383.w);
        let x_2385 : vec4<f32> = u_xlat8;
        u_xlat62 = min(vec2<f32>(x_2385.x, x_2385.y), vec2<f32>(0.0f, 0.0f));
        let x_2388 : vec2<f32> = u_xlat62;
        let x_2390 : vec2<f32> = u_xlat62;
        let x_2392 : vec4<f32> = u_xlat10;
        u_xlat62 = ((-(x_2388) * x_2390) + vec2<f32>(x_2392.x, x_2392.y));
        let x_2395 : vec4<f32> = u_xlat8;
        let x_2397 : vec2<f32> = max(vec2<f32>(x_2395.x, x_2395.y), vec2<f32>(0.0f, 0.0f));
        let x_2398 : vec4<f32> = u_xlat8;
        u_xlat8 = vec4<f32>(x_2397.x, x_2397.y, x_2398.z, x_2398.w);
        let x_2400 : vec4<f32> = u_xlat8;
        let x_2403 : vec4<f32> = u_xlat8;
        let x_2406 : vec4<f32> = u_xlat9;
        let x_2408 : vec2<f32> = ((-(vec2<f32>(x_2400.x, x_2400.y)) * vec2<f32>(x_2403.x, x_2403.y)) + vec2<f32>(x_2406.y, x_2406.w));
        let x_2409 : vec4<f32> = u_xlat8;
        u_xlat8 = vec4<f32>(x_2408.x, x_2408.y, x_2409.z, x_2409.w);
        let x_2411 : vec2<f32> = u_xlat62;
        u_xlat62 = (x_2411 + vec2<f32>(1.0f, 1.0f));
        let x_2413 : vec4<f32> = u_xlat8;
        let x_2415 : vec2<f32> = (vec2<f32>(x_2413.x, x_2413.y) + vec2<f32>(1.0f, 1.0f));
        let x_2416 : vec4<f32> = u_xlat8;
        u_xlat8 = vec4<f32>(x_2415.x, x_2415.y, x_2416.z, x_2416.w);
        let x_2418 : vec4<f32> = u_xlat9;
        let x_2420 : vec2<f32> = (vec2<f32>(x_2418.x, x_2418.z) * vec2<f32>(0.15999999642372131348f, 0.15999999642372131348f));
        let x_2421 : vec4<f32> = u_xlat11;
        u_xlat11 = vec4<f32>(x_2420.x, x_2420.y, x_2421.z, x_2421.w);
        let x_2423 : vec4<f32> = u_xlat10;
        let x_2425 : vec2<f32> = (vec2<f32>(x_2423.x, x_2423.y) * vec2<f32>(0.15999999642372131348f, 0.15999999642372131348f));
        let x_2426 : vec4<f32> = u_xlat12;
        u_xlat12 = vec4<f32>(x_2425.x, x_2425.y, x_2426.z, x_2426.w);
        let x_2428 : vec2<f32> = u_xlat62;
        let x_2429 : vec2<f32> = (x_2428 * vec2<f32>(0.15999999642372131348f, 0.15999999642372131348f));
        let x_2430 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_2429.x, x_2429.y, x_2430.z, x_2430.w);
        let x_2432 : vec4<f32> = u_xlat8;
        let x_2434 : vec2<f32> = (vec2<f32>(x_2432.x, x_2432.y) * vec2<f32>(0.15999999642372131348f, 0.15999999642372131348f));
        let x_2435 : vec4<f32> = u_xlat13;
        u_xlat13 = vec4<f32>(x_2434.x, x_2434.y, x_2435.z, x_2435.w);
        let x_2437 : vec4<f32> = u_xlat9;
        let x_2439 : vec2<f32> = (vec2<f32>(x_2437.y, x_2437.w) * vec2<f32>(0.15999999642372131348f, 0.15999999642372131348f));
        let x_2440 : vec4<f32> = u_xlat8;
        u_xlat8 = vec4<f32>(x_2439.x, x_2439.y, x_2440.z, x_2440.w);
        let x_2443 : f32 = u_xlat10.x;
        u_xlat11.z = x_2443;
        let x_2446 : f32 = u_xlat8.x;
        u_xlat11.w = x_2446;
        let x_2449 : f32 = u_xlat13.x;
        u_xlat12.z = x_2449;
        let x_2452 : f32 = u_xlat60.x;
        u_xlat12.w = x_2452;
        let x_2454 : vec4<f32> = u_xlat11;
        let x_2456 : vec4<f32> = u_xlat12;
        u_xlat9 = (vec4<f32>(x_2454.z, x_2454.w, x_2454.x, x_2454.z) + vec4<f32>(x_2456.z, x_2456.w, x_2456.x, x_2456.z));
        let x_2460 : f32 = u_xlat11.y;
        u_xlat10.z = x_2460;
        let x_2463 : f32 = u_xlat8.y;
        u_xlat10.w = x_2463;
        let x_2466 : f32 = u_xlat12.y;
        u_xlat13.z = x_2466;
        let x_2469 : f32 = u_xlat60.y;
        u_xlat13.w = x_2469;
        let x_2471 : vec4<f32> = u_xlat10;
        let x_2473 : vec4<f32> = u_xlat13;
        let x_2475 : vec3<f32> = (vec3<f32>(x_2471.z, x_2471.y, x_2471.w) + vec3<f32>(x_2473.z, x_2473.y, x_2473.w));
        let x_2476 : vec4<f32> = u_xlat8;
        u_xlat8 = vec4<f32>(x_2475.x, x_2475.y, x_2475.z, x_2476.w);
        let x_2478 : vec4<f32> = u_xlat12;
        let x_2480 : vec4<f32> = u_xlat9;
        let x_2482 : vec3<f32> = (vec3<f32>(x_2478.x, x_2478.z, x_2478.w) / vec3<f32>(x_2480.z, x_2480.w, x_2480.y));
        let x_2483 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_2482.x, x_2482.y, x_2482.z, x_2483.w);
        let x_2485 : vec4<f32> = u_xlat10;
        let x_2487 : vec3<f32> = (vec3<f32>(x_2485.x, x_2485.y, x_2485.z) + vec3<f32>(-2.5f, -0.5f, 1.5f));
        let x_2488 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_2487.x, x_2487.y, x_2487.z, x_2488.w);
        let x_2490 : vec4<f32> = u_xlat13;
        let x_2492 : vec4<f32> = u_xlat8;
        let x_2494 : vec3<f32> = (vec3<f32>(x_2490.z, x_2490.y, x_2490.w) / vec3<f32>(x_2492.x, x_2492.y, x_2492.z));
        let x_2495 : vec4<f32> = u_xlat11;
        u_xlat11 = vec4<f32>(x_2494.x, x_2494.y, x_2494.z, x_2495.w);
        let x_2497 : vec4<f32> = u_xlat11;
        let x_2499 : vec3<f32> = (vec3<f32>(x_2497.x, x_2497.y, x_2497.z) + vec3<f32>(-2.5f, -0.5f, 1.5f));
        let x_2500 : vec4<f32> = u_xlat11;
        u_xlat11 = vec4<f32>(x_2499.x, x_2499.y, x_2499.z, x_2500.w);
        let x_2502 : vec4<f32> = u_xlat10;
        let x_2505 : vec4<f32> = x_372.x_MainLightShadowmapSize;
        let x_2507 : vec3<f32> = (vec3<f32>(x_2502.y, x_2502.x, x_2502.z) * vec3<f32>(x_2505.x, x_2505.x, x_2505.x));
        let x_2508 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_2507.x, x_2507.y, x_2507.z, x_2508.w);
        let x_2510 : vec4<f32> = u_xlat11;
        let x_2513 : vec4<f32> = x_372.x_MainLightShadowmapSize;
        let x_2515 : vec3<f32> = (vec3<f32>(x_2510.x, x_2510.y, x_2510.z) * vec3<f32>(x_2513.y, x_2513.y, x_2513.y));
        let x_2516 : vec4<f32> = u_xlat11;
        u_xlat11 = vec4<f32>(x_2515.x, x_2515.y, x_2515.z, x_2516.w);
        let x_2519 : f32 = u_xlat11.x;
        u_xlat10.w = x_2519;
        let x_2521 : vec2<f32> = u_xlat59;
        let x_2524 : vec4<f32> = x_372.x_MainLightShadowmapSize;
        let x_2527 : vec4<f32> = u_xlat10;
        u_xlat12 = ((vec4<f32>(x_2521.x, x_2521.y, x_2521.x, x_2521.y) * vec4<f32>(x_2524.x, x_2524.y, x_2524.x, x_2524.y)) + vec4<f32>(x_2527.y, x_2527.w, x_2527.x, x_2527.w));
        let x_2530 : vec2<f32> = u_xlat59;
        let x_2532 : vec4<f32> = x_372.x_MainLightShadowmapSize;
        let x_2535 : vec4<f32> = u_xlat10;
        let x_2537 : vec2<f32> = ((x_2530 * vec2<f32>(x_2532.x, x_2532.y)) + vec2<f32>(x_2535.z, x_2535.w));
        let x_2538 : vec4<f32> = u_xlat13;
        u_xlat13 = vec4<f32>(x_2537.x, x_2537.y, x_2538.z, x_2538.w);
        let x_2541 : f32 = u_xlat10.y;
        u_xlat11.w = x_2541;
        let x_2543 : vec4<f32> = u_xlat11;
        let x_2544 : vec2<f32> = vec2<f32>(x_2543.y, x_2543.z);
        let x_2545 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_2545.x, x_2544.x, x_2545.z, x_2544.y);
        let x_2547 : vec2<f32> = u_xlat59;
        let x_2550 : vec4<f32> = x_372.x_MainLightShadowmapSize;
        let x_2553 : vec4<f32> = u_xlat10;
        u_xlat14 = ((vec4<f32>(x_2547.x, x_2547.y, x_2547.x, x_2547.y) * vec4<f32>(x_2550.x, x_2550.y, x_2550.x, x_2550.y)) + vec4<f32>(x_2553.x, x_2553.y, x_2553.z, x_2553.y));
        let x_2556 : vec2<f32> = u_xlat59;
        let x_2559 : vec4<f32> = x_372.x_MainLightShadowmapSize;
        let x_2562 : vec4<f32> = u_xlat11;
        u_xlat11 = ((vec4<f32>(x_2556.x, x_2556.y, x_2556.x, x_2556.y) * vec4<f32>(x_2559.x, x_2559.y, x_2559.x, x_2559.y)) + vec4<f32>(x_2562.w, x_2562.y, x_2562.w, x_2562.z));
        let x_2565 : vec2<f32> = u_xlat59;
        let x_2568 : vec4<f32> = x_372.x_MainLightShadowmapSize;
        let x_2571 : vec4<f32> = u_xlat10;
        u_xlat10 = ((vec4<f32>(x_2565.x, x_2565.y, x_2565.x, x_2565.y) * vec4<f32>(x_2568.x, x_2568.y, x_2568.x, x_2568.y)) + vec4<f32>(x_2571.x, x_2571.w, x_2571.z, x_2571.w));
        let x_2574 : vec4<f32> = u_xlat8;
        let x_2576 : vec4<f32> = u_xlat9;
        u_xlat15 = (vec4<f32>(x_2574.x, x_2574.x, x_2574.x, x_2574.y) * vec4<f32>(x_2576.z, x_2576.w, x_2576.y, x_2576.z));
        let x_2579 : vec4<f32> = u_xlat8;
        let x_2581 : vec4<f32> = u_xlat9;
        u_xlat16 = (vec4<f32>(x_2579.y, x_2579.y, x_2579.z, x_2579.z) * x_2581);
        let x_2584 : f32 = u_xlat8.z;
        let x_2586 : f32 = u_xlat9.y;
        u_xlat59.x = (x_2584 * x_2586);
        let x_2590 : vec4<f32> = u_xlat12;
        let x_2591 : vec2<f32> = vec2<f32>(x_2590.x, x_2590.y);
        let x_2593 : f32 = u_xlat2.z;
        txVec34 = vec3<f32>(x_2591.x, x_2591.y, x_2593);
        let x_2601 : vec3<f32> = txVec34;
        let x_2603 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_LinearClampCompare, x_2601.xy, x_2601.z);
        u_xlat85 = x_2603;
        let x_2605 : vec4<f32> = u_xlat12;
        let x_2606 : vec2<f32> = vec2<f32>(x_2605.z, x_2605.w);
        let x_2608 : f32 = u_xlat2.z;
        txVec35 = vec3<f32>(x_2606.x, x_2606.y, x_2608);
        let x_2615 : vec3<f32> = txVec35;
        let x_2617 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_LinearClampCompare, x_2615.xy, x_2615.z);
        u_xlat8.x = x_2617;
        let x_2620 : f32 = u_xlat8.x;
        let x_2622 : f32 = u_xlat15.y;
        u_xlat8.x = (x_2620 * x_2622);
        let x_2626 : f32 = u_xlat15.x;
        let x_2627 : f32 = u_xlat85;
        let x_2630 : f32 = u_xlat8.x;
        u_xlat85 = ((x_2626 * x_2627) + x_2630);
        let x_2633 : vec4<f32> = u_xlat13;
        let x_2634 : vec2<f32> = vec2<f32>(x_2633.x, x_2633.y);
        let x_2636 : f32 = u_xlat2.z;
        txVec36 = vec3<f32>(x_2634.x, x_2634.y, x_2636);
        let x_2643 : vec3<f32> = txVec36;
        let x_2645 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_LinearClampCompare, x_2643.xy, x_2643.z);
        u_xlat8.x = x_2645;
        let x_2648 : f32 = u_xlat15.z;
        let x_2650 : f32 = u_xlat8.x;
        let x_2652 : f32 = u_xlat85;
        u_xlat85 = ((x_2648 * x_2650) + x_2652);
        let x_2655 : vec4<f32> = u_xlat11;
        let x_2656 : vec2<f32> = vec2<f32>(x_2655.x, x_2655.y);
        let x_2658 : f32 = u_xlat2.z;
        txVec37 = vec3<f32>(x_2656.x, x_2656.y, x_2658);
        let x_2665 : vec3<f32> = txVec37;
        let x_2667 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_LinearClampCompare, x_2665.xy, x_2665.z);
        u_xlat8.x = x_2667;
        let x_2670 : f32 = u_xlat15.w;
        let x_2672 : f32 = u_xlat8.x;
        let x_2674 : f32 = u_xlat85;
        u_xlat85 = ((x_2670 * x_2672) + x_2674);
        let x_2677 : vec4<f32> = u_xlat14;
        let x_2678 : vec2<f32> = vec2<f32>(x_2677.x, x_2677.y);
        let x_2680 : f32 = u_xlat2.z;
        txVec38 = vec3<f32>(x_2678.x, x_2678.y, x_2680);
        let x_2687 : vec3<f32> = txVec38;
        let x_2689 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_LinearClampCompare, x_2687.xy, x_2687.z);
        u_xlat8.x = x_2689;
        let x_2692 : f32 = u_xlat16.x;
        let x_2694 : f32 = u_xlat8.x;
        let x_2696 : f32 = u_xlat85;
        u_xlat85 = ((x_2692 * x_2694) + x_2696);
        let x_2699 : vec4<f32> = u_xlat14;
        let x_2700 : vec2<f32> = vec2<f32>(x_2699.z, x_2699.w);
        let x_2702 : f32 = u_xlat2.z;
        txVec39 = vec3<f32>(x_2700.x, x_2700.y, x_2702);
        let x_2709 : vec3<f32> = txVec39;
        let x_2711 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_LinearClampCompare, x_2709.xy, x_2709.z);
        u_xlat8.x = x_2711;
        let x_2714 : f32 = u_xlat16.y;
        let x_2716 : f32 = u_xlat8.x;
        let x_2718 : f32 = u_xlat85;
        u_xlat85 = ((x_2714 * x_2716) + x_2718);
        let x_2721 : vec4<f32> = u_xlat11;
        let x_2722 : vec2<f32> = vec2<f32>(x_2721.z, x_2721.w);
        let x_2724 : f32 = u_xlat2.z;
        txVec40 = vec3<f32>(x_2722.x, x_2722.y, x_2724);
        let x_2731 : vec3<f32> = txVec40;
        let x_2733 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_LinearClampCompare, x_2731.xy, x_2731.z);
        u_xlat8.x = x_2733;
        let x_2736 : f32 = u_xlat16.z;
        let x_2738 : f32 = u_xlat8.x;
        let x_2740 : f32 = u_xlat85;
        u_xlat85 = ((x_2736 * x_2738) + x_2740);
        let x_2743 : vec4<f32> = u_xlat10;
        let x_2744 : vec2<f32> = vec2<f32>(x_2743.x, x_2743.y);
        let x_2746 : f32 = u_xlat2.z;
        txVec41 = vec3<f32>(x_2744.x, x_2744.y, x_2746);
        let x_2753 : vec3<f32> = txVec41;
        let x_2755 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_LinearClampCompare, x_2753.xy, x_2753.z);
        u_xlat8.x = x_2755;
        let x_2758 : f32 = u_xlat16.w;
        let x_2760 : f32 = u_xlat8.x;
        let x_2762 : f32 = u_xlat85;
        u_xlat85 = ((x_2758 * x_2760) + x_2762);
        let x_2765 : vec4<f32> = u_xlat10;
        let x_2766 : vec2<f32> = vec2<f32>(x_2765.z, x_2765.w);
        let x_2768 : f32 = u_xlat2.z;
        txVec42 = vec3<f32>(x_2766.x, x_2766.y, x_2768);
        let x_2775 : vec3<f32> = txVec42;
        let x_2777 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_LinearClampCompare, x_2775.xy, x_2775.z);
        u_xlat8.x = x_2777;
        let x_2780 : f32 = u_xlat59.x;
        let x_2782 : f32 = u_xlat8.x;
        let x_2784 : f32 = u_xlat85;
        u_xlat0.x = ((x_2780 * x_2782) + x_2784);
      } else {
        let x_2788 : vec4<f32> = u_xlat2;
        let x_2791 : vec4<f32> = x_372.x_MainLightShadowmapSize;
        u_xlat59 = ((vec2<f32>(x_2788.x, x_2788.y) * vec2<f32>(x_2791.z, x_2791.w)) + vec2<f32>(0.5f, 0.5f));
        let x_2795 : vec2<f32> = u_xlat59;
        u_xlat59 = floor(x_2795);
        let x_2797 : vec4<f32> = u_xlat2;
        let x_2800 : vec4<f32> = x_372.x_MainLightShadowmapSize;
        let x_2803 : vec2<f32> = u_xlat59;
        let x_2805 : vec2<f32> = ((vec2<f32>(x_2797.x, x_2797.y) * vec2<f32>(x_2800.z, x_2800.w)) + -(x_2803));
        let x_2806 : vec4<f32> = u_xlat8;
        u_xlat8 = vec4<f32>(x_2805.x, x_2805.y, x_2806.z, x_2806.w);
        let x_2808 : vec4<f32> = u_xlat8;
        u_xlat9 = (vec4<f32>(x_2808.x, x_2808.x, x_2808.y, x_2808.y) + vec4<f32>(0.5f, 1.0f, 0.5f, 1.0f));
        let x_2811 : vec4<f32> = u_xlat9;
        let x_2813 : vec4<f32> = u_xlat9;
        u_xlat10 = (vec4<f32>(x_2811.x, x_2811.x, x_2811.z, x_2811.z) * vec4<f32>(x_2813.x, x_2813.x, x_2813.z, x_2813.z));
        let x_2816 : vec4<f32> = u_xlat10;
        let x_2818 : vec2<f32> = (vec2<f32>(x_2816.y, x_2816.w) * vec2<f32>(0.04081600159406661987f, 0.04081600159406661987f));
        let x_2819 : vec4<f32> = u_xlat11;
        u_xlat11 = vec4<f32>(x_2819.x, x_2818.x, x_2819.z, x_2818.y);
        let x_2821 : vec4<f32> = u_xlat10;
        let x_2824 : vec4<f32> = u_xlat8;
        u_xlat60 = ((vec2<f32>(x_2821.x, x_2821.z) * vec2<f32>(0.5f, 0.5f)) + -(vec2<f32>(x_2824.x, x_2824.y)));
        let x_2828 : vec4<f32> = u_xlat8;
        let x_2831 : vec2<f32> = (-(vec2<f32>(x_2828.x, x_2828.y)) + vec2<f32>(1.0f, 1.0f));
        let x_2832 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_2831.x, x_2832.y, x_2831.y, x_2832.w);
        let x_2834 : vec4<f32> = u_xlat8;
        let x_2836 : vec2<f32> = min(vec2<f32>(x_2834.x, x_2834.y), vec2<f32>(0.0f, 0.0f));
        let x_2837 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_2836.x, x_2836.y, x_2837.z, x_2837.w);
        let x_2839 : vec4<f32> = u_xlat10;
        let x_2842 : vec4<f32> = u_xlat10;
        let x_2845 : vec4<f32> = u_xlat9;
        let x_2847 : vec2<f32> = ((-(vec2<f32>(x_2839.x, x_2839.y)) * vec2<f32>(x_2842.x, x_2842.y)) + vec2<f32>(x_2845.x, x_2845.z));
        let x_2848 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_2847.x, x_2848.y, x_2847.y, x_2848.w);
        let x_2850 : vec4<f32> = u_xlat8;
        let x_2852 : vec2<f32> = max(vec2<f32>(x_2850.x, x_2850.y), vec2<f32>(0.0f, 0.0f));
        let x_2853 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_2852.x, x_2852.y, x_2853.z, x_2853.w);
        let x_2855 : vec4<f32> = u_xlat10;
        let x_2858 : vec4<f32> = u_xlat10;
        let x_2861 : vec4<f32> = u_xlat9;
        let x_2863 : vec2<f32> = ((-(vec2<f32>(x_2855.x, x_2855.y)) * vec2<f32>(x_2858.x, x_2858.y)) + vec2<f32>(x_2861.y, x_2861.w));
        let x_2864 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_2864.x, x_2863.x, x_2864.z, x_2863.y);
        let x_2866 : vec4<f32> = u_xlat9;
        u_xlat9 = (x_2866 + vec4<f32>(2.0f, 2.0f, 2.0f, 2.0f));
        let x_2869 : f32 = u_xlat9.y;
        u_xlat10.z = (x_2869 * 0.08163200318813323975f);
        let x_2872 : vec2<f32> = u_xlat60;
        let x_2874 : vec2<f32> = (vec2<f32>(x_2872.y, x_2872.x) * vec2<f32>(0.08163200318813323975f, 0.08163200318813323975f));
        let x_2875 : vec4<f32> = u_xlat12;
        u_xlat12 = vec4<f32>(x_2874.x, x_2874.y, x_2875.z, x_2875.w);
        let x_2877 : vec4<f32> = u_xlat9;
        u_xlat60 = (vec2<f32>(x_2877.x, x_2877.z) * vec2<f32>(0.08163200318813323975f, 0.08163200318813323975f));
        let x_2881 : f32 = u_xlat9.w;
        u_xlat12.z = (x_2881 * 0.08163200318813323975f);
        let x_2885 : f32 = u_xlat12.y;
        u_xlat10.x = x_2885;
        let x_2887 : vec4<f32> = u_xlat8;
        let x_2890 : vec2<f32> = ((vec2<f32>(x_2887.x, x_2887.x) * vec2<f32>(-0.08163200318813323975f, 0.08163200318813323975f)) + vec2<f32>(0.16326400637626647949f, 0.08163200318813323975f));
        let x_2891 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_2891.x, x_2890.x, x_2891.z, x_2890.y);
        let x_2893 : vec4<f32> = u_xlat8;
        let x_2896 : vec2<f32> = ((vec2<f32>(x_2893.x, x_2893.x) * vec2<f32>(-0.08163200318813323975f, 0.08163200318813323975f)) + vec2<f32>(0.08163200318813323975f, 0.16326400637626647949f));
        let x_2897 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_2896.x, x_2897.y, x_2896.y, x_2897.w);
        let x_2900 : f32 = u_xlat60.x;
        u_xlat9.y = x_2900;
        let x_2903 : f32 = u_xlat11.y;
        u_xlat9.w = x_2903;
        let x_2905 : vec4<f32> = u_xlat9;
        let x_2906 : vec4<f32> = u_xlat10;
        u_xlat10 = (x_2905 + x_2906);
        let x_2908 : vec4<f32> = u_xlat8;
        let x_2911 : vec2<f32> = ((vec2<f32>(x_2908.y, x_2908.y) * vec2<f32>(-0.08163200318813323975f, 0.08163200318813323975f)) + vec2<f32>(0.16326400637626647949f, 0.08163200318813323975f));
        let x_2912 : vec4<f32> = u_xlat12;
        u_xlat12 = vec4<f32>(x_2912.x, x_2911.x, x_2912.z, x_2911.y);
        let x_2914 : vec4<f32> = u_xlat8;
        let x_2917 : vec2<f32> = ((vec2<f32>(x_2914.y, x_2914.y) * vec2<f32>(-0.08163200318813323975f, 0.08163200318813323975f)) + vec2<f32>(0.08163200318813323975f, 0.16326400637626647949f));
        let x_2918 : vec4<f32> = u_xlat11;
        u_xlat11 = vec4<f32>(x_2917.x, x_2918.y, x_2917.y, x_2918.w);
        let x_2921 : f32 = u_xlat60.y;
        u_xlat11.y = x_2921;
        let x_2923 : vec4<f32> = u_xlat11;
        let x_2924 : vec4<f32> = u_xlat12;
        u_xlat8 = (x_2923 + x_2924);
        let x_2926 : vec4<f32> = u_xlat9;
        let x_2927 : vec4<f32> = u_xlat10;
        u_xlat9 = (x_2926 / x_2927);
        let x_2929 : vec4<f32> = u_xlat9;
        u_xlat9 = (x_2929 + vec4<f32>(-3.5f, -1.5f, 0.5f, 2.5f));
        let x_2931 : vec4<f32> = u_xlat11;
        let x_2932 : vec4<f32> = u_xlat8;
        u_xlat11 = (x_2931 / x_2932);
        let x_2934 : vec4<f32> = u_xlat11;
        u_xlat11 = (x_2934 + vec4<f32>(-3.5f, -1.5f, 0.5f, 2.5f));
        let x_2936 : vec4<f32> = u_xlat9;
        let x_2939 : vec4<f32> = x_372.x_MainLightShadowmapSize;
        u_xlat9 = (vec4<f32>(x_2936.w, x_2936.x, x_2936.y, x_2936.z) * vec4<f32>(x_2939.x, x_2939.x, x_2939.x, x_2939.x));
        let x_2942 : vec4<f32> = u_xlat11;
        let x_2945 : vec4<f32> = x_372.x_MainLightShadowmapSize;
        u_xlat11 = (vec4<f32>(x_2942.x, x_2942.w, x_2942.y, x_2942.z) * vec4<f32>(x_2945.y, x_2945.y, x_2945.y, x_2945.y));
        let x_2948 : vec4<f32> = u_xlat9;
        let x_2949 : vec3<f32> = vec3<f32>(x_2948.y, x_2948.z, x_2948.w);
        let x_2950 : vec4<f32> = u_xlat12;
        u_xlat12 = vec4<f32>(x_2949.x, x_2950.y, x_2949.y, x_2949.z);
        let x_2953 : f32 = u_xlat11.x;
        u_xlat12.y = x_2953;
        let x_2955 : vec2<f32> = u_xlat59;
        let x_2958 : vec4<f32> = x_372.x_MainLightShadowmapSize;
        let x_2961 : vec4<f32> = u_xlat12;
        u_xlat13 = ((vec4<f32>(x_2955.x, x_2955.y, x_2955.x, x_2955.y) * vec4<f32>(x_2958.x, x_2958.y, x_2958.x, x_2958.y)) + vec4<f32>(x_2961.x, x_2961.y, x_2961.z, x_2961.y));
        let x_2964 : vec2<f32> = u_xlat59;
        let x_2966 : vec4<f32> = x_372.x_MainLightShadowmapSize;
        let x_2969 : vec4<f32> = u_xlat12;
        let x_2971 : vec2<f32> = ((x_2964 * vec2<f32>(x_2966.x, x_2966.y)) + vec2<f32>(x_2969.w, x_2969.y));
        let x_2972 : vec4<f32> = u_xlat14;
        u_xlat14 = vec4<f32>(x_2971.x, x_2971.y, x_2972.z, x_2972.w);
        let x_2975 : f32 = u_xlat12.y;
        u_xlat9.y = x_2975;
        let x_2978 : f32 = u_xlat11.z;
        u_xlat12.y = x_2978;
        let x_2980 : vec2<f32> = u_xlat59;
        let x_2983 : vec4<f32> = x_372.x_MainLightShadowmapSize;
        let x_2986 : vec4<f32> = u_xlat12;
        u_xlat15 = ((vec4<f32>(x_2980.x, x_2980.y, x_2980.x, x_2980.y) * vec4<f32>(x_2983.x, x_2983.y, x_2983.x, x_2983.y)) + vec4<f32>(x_2986.x, x_2986.y, x_2986.z, x_2986.y));
        let x_2990 : vec2<f32> = u_xlat59;
        let x_2992 : vec4<f32> = x_372.x_MainLightShadowmapSize;
        let x_2995 : vec4<f32> = u_xlat12;
        u_xlat66 = ((x_2990 * vec2<f32>(x_2992.x, x_2992.y)) + vec2<f32>(x_2995.w, x_2995.y));
        let x_2999 : f32 = u_xlat12.y;
        u_xlat9.z = x_2999;
        let x_3001 : vec2<f32> = u_xlat59;
        let x_3004 : vec4<f32> = x_372.x_MainLightShadowmapSize;
        let x_3007 : vec4<f32> = u_xlat9;
        u_xlat16 = ((vec4<f32>(x_3001.x, x_3001.y, x_3001.x, x_3001.y) * vec4<f32>(x_3004.x, x_3004.y, x_3004.x, x_3004.y)) + vec4<f32>(x_3007.x, x_3007.y, x_3007.x, x_3007.z));
        let x_3011 : f32 = u_xlat11.w;
        u_xlat12.y = x_3011;
        let x_3013 : vec2<f32> = u_xlat59;
        let x_3016 : vec4<f32> = x_372.x_MainLightShadowmapSize;
        let x_3019 : vec4<f32> = u_xlat12;
        u_xlat17 = ((vec4<f32>(x_3013.x, x_3013.y, x_3013.x, x_3013.y) * vec4<f32>(x_3016.x, x_3016.y, x_3016.x, x_3016.y)) + vec4<f32>(x_3019.x, x_3019.y, x_3019.z, x_3019.y));
        let x_3022 : vec2<f32> = u_xlat59;
        let x_3024 : vec4<f32> = x_372.x_MainLightShadowmapSize;
        let x_3027 : vec4<f32> = u_xlat12;
        let x_3029 : vec2<f32> = ((x_3022 * vec2<f32>(x_3024.x, x_3024.y)) + vec2<f32>(x_3027.w, x_3027.y));
        let x_3030 : vec3<f32> = u_xlat35;
        u_xlat35 = vec3<f32>(x_3029.x, x_3029.y, x_3030.z);
        let x_3033 : f32 = u_xlat12.y;
        u_xlat9.w = x_3033;
        let x_3035 : vec2<f32> = u_xlat59;
        let x_3037 : vec4<f32> = x_372.x_MainLightShadowmapSize;
        let x_3040 : vec4<f32> = u_xlat9;
        let x_3042 : vec2<f32> = ((x_3035 * vec2<f32>(x_3037.x, x_3037.y)) + vec2<f32>(x_3040.x, x_3040.w));
        let x_3043 : vec4<f32> = u_xlat18;
        u_xlat18 = vec4<f32>(x_3042.x, x_3042.y, x_3043.z, x_3043.w);
        let x_3045 : vec4<f32> = u_xlat12;
        let x_3046 : vec3<f32> = vec3<f32>(x_3045.x, x_3045.z, x_3045.w);
        let x_3047 : vec4<f32> = u_xlat11;
        u_xlat11 = vec4<f32>(x_3046.x, x_3047.y, x_3046.y, x_3046.z);
        let x_3049 : vec2<f32> = u_xlat59;
        let x_3052 : vec4<f32> = x_372.x_MainLightShadowmapSize;
        let x_3055 : vec4<f32> = u_xlat11;
        u_xlat12 = ((vec4<f32>(x_3049.x, x_3049.y, x_3049.x, x_3049.y) * vec4<f32>(x_3052.x, x_3052.y, x_3052.x, x_3052.y)) + vec4<f32>(x_3055.x, x_3055.y, x_3055.z, x_3055.y));
        let x_3058 : vec2<f32> = u_xlat59;
        let x_3060 : vec4<f32> = x_372.x_MainLightShadowmapSize;
        let x_3063 : vec4<f32> = u_xlat11;
        u_xlat63 = ((x_3058 * vec2<f32>(x_3060.x, x_3060.y)) + vec2<f32>(x_3063.w, x_3063.y));
        let x_3067 : f32 = u_xlat9.x;
        u_xlat11.x = x_3067;
        let x_3069 : vec2<f32> = u_xlat59;
        let x_3071 : vec4<f32> = x_372.x_MainLightShadowmapSize;
        let x_3074 : vec4<f32> = u_xlat11;
        u_xlat59 = ((x_3069 * vec2<f32>(x_3071.x, x_3071.y)) + vec2<f32>(x_3074.x, x_3074.y));
        let x_3077 : vec4<f32> = u_xlat8;
        let x_3079 : vec4<f32> = u_xlat10;
        u_xlat19 = (vec4<f32>(x_3077.x, x_3077.x, x_3077.x, x_3077.x) * x_3079);
        let x_3081 : vec4<f32> = u_xlat8;
        let x_3083 : vec4<f32> = u_xlat10;
        u_xlat20 = (vec4<f32>(x_3081.y, x_3081.y, x_3081.y, x_3081.y) * x_3083);
        let x_3085 : vec4<f32> = u_xlat8;
        let x_3087 : vec4<f32> = u_xlat10;
        u_xlat21 = (vec4<f32>(x_3085.z, x_3085.z, x_3085.z, x_3085.z) * x_3087);
        let x_3089 : vec4<f32> = u_xlat8;
        let x_3091 : vec4<f32> = u_xlat10;
        u_xlat8 = (vec4<f32>(x_3089.w, x_3089.w, x_3089.w, x_3089.w) * x_3091);
        let x_3094 : vec4<f32> = u_xlat13;
        let x_3095 : vec2<f32> = vec2<f32>(x_3094.x, x_3094.y);
        let x_3097 : f32 = u_xlat2.z;
        txVec43 = vec3<f32>(x_3095.x, x_3095.y, x_3097);
        let x_3104 : vec3<f32> = txVec43;
        let x_3106 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_LinearClampCompare, x_3104.xy, x_3104.z);
        u_xlat9.x = x_3106;
        let x_3109 : vec4<f32> = u_xlat13;
        let x_3110 : vec2<f32> = vec2<f32>(x_3109.z, x_3109.w);
        let x_3112 : f32 = u_xlat2.z;
        txVec44 = vec3<f32>(x_3110.x, x_3110.y, x_3112);
        let x_3120 : vec3<f32> = txVec44;
        let x_3122 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_LinearClampCompare, x_3120.xy, x_3120.z);
        u_xlat87 = x_3122;
        let x_3123 : f32 = u_xlat87;
        let x_3125 : f32 = u_xlat19.y;
        u_xlat87 = (x_3123 * x_3125);
        let x_3128 : f32 = u_xlat19.x;
        let x_3130 : f32 = u_xlat9.x;
        let x_3132 : f32 = u_xlat87;
        u_xlat9.x = ((x_3128 * x_3130) + x_3132);
        let x_3136 : vec4<f32> = u_xlat14;
        let x_3137 : vec2<f32> = vec2<f32>(x_3136.x, x_3136.y);
        let x_3139 : f32 = u_xlat2.z;
        txVec45 = vec3<f32>(x_3137.x, x_3137.y, x_3139);
        let x_3146 : vec3<f32> = txVec45;
        let x_3148 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_LinearClampCompare, x_3146.xy, x_3146.z);
        u_xlat87 = x_3148;
        let x_3150 : f32 = u_xlat19.z;
        let x_3151 : f32 = u_xlat87;
        let x_3154 : f32 = u_xlat9.x;
        u_xlat9.x = ((x_3150 * x_3151) + x_3154);
        let x_3158 : vec4<f32> = u_xlat16;
        let x_3159 : vec2<f32> = vec2<f32>(x_3158.x, x_3158.y);
        let x_3161 : f32 = u_xlat2.z;
        txVec46 = vec3<f32>(x_3159.x, x_3159.y, x_3161);
        let x_3168 : vec3<f32> = txVec46;
        let x_3170 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_LinearClampCompare, x_3168.xy, x_3168.z);
        u_xlat87 = x_3170;
        let x_3172 : f32 = u_xlat19.w;
        let x_3173 : f32 = u_xlat87;
        let x_3176 : f32 = u_xlat9.x;
        u_xlat9.x = ((x_3172 * x_3173) + x_3176);
        let x_3180 : vec4<f32> = u_xlat15;
        let x_3181 : vec2<f32> = vec2<f32>(x_3180.x, x_3180.y);
        let x_3183 : f32 = u_xlat2.z;
        txVec47 = vec3<f32>(x_3181.x, x_3181.y, x_3183);
        let x_3190 : vec3<f32> = txVec47;
        let x_3192 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_LinearClampCompare, x_3190.xy, x_3190.z);
        u_xlat87 = x_3192;
        let x_3194 : f32 = u_xlat20.x;
        let x_3195 : f32 = u_xlat87;
        let x_3198 : f32 = u_xlat9.x;
        u_xlat9.x = ((x_3194 * x_3195) + x_3198);
        let x_3202 : vec4<f32> = u_xlat15;
        let x_3203 : vec2<f32> = vec2<f32>(x_3202.z, x_3202.w);
        let x_3205 : f32 = u_xlat2.z;
        txVec48 = vec3<f32>(x_3203.x, x_3203.y, x_3205);
        let x_3212 : vec3<f32> = txVec48;
        let x_3214 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_LinearClampCompare, x_3212.xy, x_3212.z);
        u_xlat87 = x_3214;
        let x_3216 : f32 = u_xlat20.y;
        let x_3217 : f32 = u_xlat87;
        let x_3220 : f32 = u_xlat9.x;
        u_xlat9.x = ((x_3216 * x_3217) + x_3220);
        let x_3224 : vec2<f32> = u_xlat66;
        let x_3226 : f32 = u_xlat2.z;
        txVec49 = vec3<f32>(x_3224.x, x_3224.y, x_3226);
        let x_3233 : vec3<f32> = txVec49;
        let x_3235 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_LinearClampCompare, x_3233.xy, x_3233.z);
        u_xlat87 = x_3235;
        let x_3237 : f32 = u_xlat20.z;
        let x_3238 : f32 = u_xlat87;
        let x_3241 : f32 = u_xlat9.x;
        u_xlat9.x = ((x_3237 * x_3238) + x_3241);
        let x_3245 : vec4<f32> = u_xlat16;
        let x_3246 : vec2<f32> = vec2<f32>(x_3245.z, x_3245.w);
        let x_3248 : f32 = u_xlat2.z;
        txVec50 = vec3<f32>(x_3246.x, x_3246.y, x_3248);
        let x_3255 : vec3<f32> = txVec50;
        let x_3257 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_LinearClampCompare, x_3255.xy, x_3255.z);
        u_xlat87 = x_3257;
        let x_3259 : f32 = u_xlat20.w;
        let x_3260 : f32 = u_xlat87;
        let x_3263 : f32 = u_xlat9.x;
        u_xlat9.x = ((x_3259 * x_3260) + x_3263);
        let x_3267 : vec4<f32> = u_xlat17;
        let x_3268 : vec2<f32> = vec2<f32>(x_3267.x, x_3267.y);
        let x_3270 : f32 = u_xlat2.z;
        txVec51 = vec3<f32>(x_3268.x, x_3268.y, x_3270);
        let x_3277 : vec3<f32> = txVec51;
        let x_3279 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_LinearClampCompare, x_3277.xy, x_3277.z);
        u_xlat87 = x_3279;
        let x_3281 : f32 = u_xlat21.x;
        let x_3282 : f32 = u_xlat87;
        let x_3285 : f32 = u_xlat9.x;
        u_xlat9.x = ((x_3281 * x_3282) + x_3285);
        let x_3289 : vec4<f32> = u_xlat17;
        let x_3290 : vec2<f32> = vec2<f32>(x_3289.z, x_3289.w);
        let x_3292 : f32 = u_xlat2.z;
        txVec52 = vec3<f32>(x_3290.x, x_3290.y, x_3292);
        let x_3299 : vec3<f32> = txVec52;
        let x_3301 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_LinearClampCompare, x_3299.xy, x_3299.z);
        u_xlat87 = x_3301;
        let x_3303 : f32 = u_xlat21.y;
        let x_3304 : f32 = u_xlat87;
        let x_3307 : f32 = u_xlat9.x;
        u_xlat9.x = ((x_3303 * x_3304) + x_3307);
        let x_3311 : vec3<f32> = u_xlat35;
        let x_3312 : vec2<f32> = vec2<f32>(x_3311.x, x_3311.y);
        let x_3314 : f32 = u_xlat2.z;
        txVec53 = vec3<f32>(x_3312.x, x_3312.y, x_3314);
        let x_3321 : vec3<f32> = txVec53;
        let x_3323 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_LinearClampCompare, x_3321.xy, x_3321.z);
        u_xlat35.x = x_3323;
        let x_3326 : f32 = u_xlat21.z;
        let x_3328 : f32 = u_xlat35.x;
        let x_3331 : f32 = u_xlat9.x;
        u_xlat9.x = ((x_3326 * x_3328) + x_3331);
        let x_3335 : vec4<f32> = u_xlat18;
        let x_3336 : vec2<f32> = vec2<f32>(x_3335.x, x_3335.y);
        let x_3338 : f32 = u_xlat2.z;
        txVec54 = vec3<f32>(x_3336.x, x_3336.y, x_3338);
        let x_3345 : vec3<f32> = txVec54;
        let x_3347 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_LinearClampCompare, x_3345.xy, x_3345.z);
        u_xlat35.x = x_3347;
        let x_3350 : f32 = u_xlat21.w;
        let x_3352 : f32 = u_xlat35.x;
        let x_3355 : f32 = u_xlat9.x;
        u_xlat9.x = ((x_3350 * x_3352) + x_3355);
        let x_3359 : vec4<f32> = u_xlat12;
        let x_3360 : vec2<f32> = vec2<f32>(x_3359.x, x_3359.y);
        let x_3362 : f32 = u_xlat2.z;
        txVec55 = vec3<f32>(x_3360.x, x_3360.y, x_3362);
        let x_3369 : vec3<f32> = txVec55;
        let x_3371 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_LinearClampCompare, x_3369.xy, x_3369.z);
        u_xlat35.x = x_3371;
        let x_3374 : f32 = u_xlat8.x;
        let x_3376 : f32 = u_xlat35.x;
        let x_3379 : f32 = u_xlat9.x;
        u_xlat8.x = ((x_3374 * x_3376) + x_3379);
        let x_3383 : vec4<f32> = u_xlat12;
        let x_3384 : vec2<f32> = vec2<f32>(x_3383.z, x_3383.w);
        let x_3386 : f32 = u_xlat2.z;
        txVec56 = vec3<f32>(x_3384.x, x_3384.y, x_3386);
        let x_3393 : vec3<f32> = txVec56;
        let x_3395 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_LinearClampCompare, x_3393.xy, x_3393.z);
        u_xlat9.x = x_3395;
        let x_3398 : f32 = u_xlat8.y;
        let x_3400 : f32 = u_xlat9.x;
        let x_3403 : f32 = u_xlat8.x;
        u_xlat8.x = ((x_3398 * x_3400) + x_3403);
        let x_3407 : vec2<f32> = u_xlat63;
        let x_3409 : f32 = u_xlat2.z;
        txVec57 = vec3<f32>(x_3407.x, x_3407.y, x_3409);
        let x_3416 : vec3<f32> = txVec57;
        let x_3418 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_LinearClampCompare, x_3416.xy, x_3416.z);
        u_xlat34.x = x_3418;
        let x_3421 : f32 = u_xlat8.z;
        let x_3423 : f32 = u_xlat34.x;
        let x_3426 : f32 = u_xlat8.x;
        u_xlat8.x = ((x_3421 * x_3423) + x_3426);
        let x_3430 : vec2<f32> = u_xlat59;
        let x_3432 : f32 = u_xlat2.z;
        txVec58 = vec3<f32>(x_3430.x, x_3430.y, x_3432);
        let x_3439 : vec3<f32> = txVec58;
        let x_3441 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_LinearClampCompare, x_3439.xy, x_3439.z);
        u_xlat59.x = x_3441;
        let x_3444 : f32 = u_xlat8.w;
        let x_3446 : f32 = u_xlat59.x;
        let x_3449 : f32 = u_xlat8.x;
        u_xlat0.x = ((x_3444 * x_3446) + x_3449);
      }
    }
  } else {
    let x_3454 : vec4<f32> = u_xlat2;
    let x_3455 : vec2<f32> = vec2<f32>(x_3454.x, x_3454.y);
    let x_3457 : f32 = u_xlat2.z;
    txVec59 = vec3<f32>(x_3455.x, x_3455.y, x_3457);
    let x_3464 : vec3<f32> = txVec59;
    let x_3466 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_LinearClampCompare, x_3464.xy, x_3464.z);
    u_xlat0.x = x_3466;
  }
  let x_3469 : f32 = u_xlat0.x;
  let x_3471 : f32 = x_372.x_MainLightShadowParams.x;
  let x_3473 : f32 = u_xlat80;
  u_xlat0.x = ((x_3469 * x_3471) + x_3473);
  let x_3476 : bool = u_xlatb3;
  if (x_3476) {
    x_3477 = 1.0f;
  } else {
    let x_3482 : f32 = u_xlat0.x;
    x_3477 = x_3482;
  }
  let x_3483 : f32 = x_3477;
  u_xlat0.x = x_3483;
  let x_3485 : vec3<f32> = vs_INTERP8;
  let x_3487 : vec3<f32> = x_149.x_WorldSpaceCameraPos;
  let x_3489 : vec3<f32> = (x_3485 + -(x_3487));
  let x_3490 : vec4<f32> = u_xlat2;
  u_xlat2 = vec4<f32>(x_3489.x, x_3489.y, x_3489.z, x_3490.w);
  let x_3492 : vec4<f32> = u_xlat2;
  let x_3494 : vec4<f32> = u_xlat2;
  u_xlat2.x = dot(vec3<f32>(x_3492.x, x_3492.y, x_3492.z), vec3<f32>(x_3494.x, x_3494.y, x_3494.z));
  let x_3500 : f32 = u_xlat2.x;
  let x_3502 : f32 = x_372.x_MainLightShadowParams.z;
  let x_3505 : f32 = x_372.x_MainLightShadowParams.w;
  u_xlat28.x = ((x_3500 * x_3502) + x_3505);
  let x_3509 : f32 = u_xlat28.x;
  u_xlat28.x = clamp(x_3509, 0.0f, 1.0f);
  let x_3514 : f32 = u_xlat0.x;
  u_xlat54 = (-(x_3514) + 1.0f);
  let x_3518 : f32 = u_xlat28.x;
  let x_3519 : f32 = u_xlat54;
  let x_3522 : f32 = u_xlat0.x;
  u_xlat0.x = ((x_3518 * x_3519) + x_3522);
  let x_3525 : vec3<f32> = u_xlat4;
  let x_3527 : vec3<f32> = u_xlat26;
  u_xlat28.x = dot(-(x_3525), x_3527);
  let x_3531 : f32 = u_xlat28.x;
  let x_3533 : f32 = u_xlat28.x;
  u_xlat28.x = (x_3531 + x_3533);
  let x_3536 : vec3<f32> = u_xlat26;
  let x_3537 : vec3<f32> = u_xlat28;
  let x_3541 : vec3<f32> = u_xlat4;
  u_xlat28 = ((x_3536 * -(vec3<f32>(x_3537.x, x_3537.x, x_3537.x))) + -(x_3541));
  let x_3544 : vec3<f32> = u_xlat26;
  let x_3545 : vec3<f32> = u_xlat4;
  u_xlat3.x = dot(x_3544, x_3545);
  let x_3549 : f32 = u_xlat3.x;
  u_xlat3.x = clamp(x_3549, 0.0f, 1.0f);
  let x_3553 : f32 = u_xlat3.x;
  u_xlat3.x = (-(x_3553) + 1.0f);
  let x_3558 : f32 = u_xlat3.x;
  let x_3560 : f32 = u_xlat3.x;
  u_xlat3.x = (x_3558 * x_3560);
  let x_3564 : f32 = u_xlat3.x;
  let x_3566 : f32 = u_xlat3.x;
  u_xlat3.x = (x_3564 * x_3566);
  let x_3569 : f32 = u_xlat81;
  u_xlat59.x = ((-(x_3569) * 0.69999998807907104492f) + 1.70000004768371582031f);
  let x_3576 : f32 = u_xlat81;
  let x_3578 : f32 = u_xlat59.x;
  u_xlat81 = (x_3576 * x_3578);
  let x_3580 : f32 = u_xlat81;
  u_xlat81 = (x_3580 * 6.0f);
  let x_3591 : vec3<f32> = u_xlat28;
  let x_3592 : f32 = u_xlat81;
  let x_3593 : vec4<f32> = textureSampleLevel(unity_SpecCube0, samplerunity_SpecCube0, x_3591, x_3592);
  u_xlat8 = x_3593;
  let x_3595 : f32 = u_xlat8.w;
  u_xlat28.x = (x_3595 + -1.0f);
  let x_3599 : f32 = x_83.unity_SpecCube0_HDR.w;
  let x_3601 : f32 = u_xlat28.x;
  u_xlat28.x = ((x_3599 * x_3601) + 1.0f);
  let x_3606 : f32 = u_xlat28.x;
  u_xlat28.x = max(x_3606, 0.0f);
  let x_3610 : f32 = u_xlat28.x;
  u_xlat28.x = log2(x_3610);
  let x_3614 : f32 = u_xlat28.x;
  let x_3616 : f32 = x_83.unity_SpecCube0_HDR.y;
  u_xlat28.x = (x_3614 * x_3616);
  let x_3620 : f32 = u_xlat28.x;
  u_xlat28.x = exp2(x_3620);
  let x_3624 : f32 = u_xlat28.x;
  let x_3626 : f32 = x_83.unity_SpecCube0_HDR.x;
  u_xlat28.x = (x_3624 * x_3626);
  let x_3629 : vec4<f32> = u_xlat8;
  let x_3631 : vec3<f32> = u_xlat28;
  u_xlat28 = (vec3<f32>(x_3629.x, x_3629.y, x_3629.z) * vec3<f32>(x_3631.x, x_3631.x, x_3631.x));
  let x_3634 : f32 = u_xlat82;
  let x_3636 : f32 = u_xlat82;
  u_xlat59 = ((vec2<f32>(x_3634, x_3634) * vec2<f32>(x_3636, x_3636)) + vec2<f32>(-1.0f, 1.0f));
  let x_3642 : f32 = u_xlat59.y;
  u_xlat81 = (1.0f / x_3642);
  let x_3644 : f32 = u_xlat84;
  u_xlat82 = (x_3644 + -0.03999999910593032837f);
  let x_3648 : f32 = u_xlat3.x;
  let x_3649 : f32 = u_xlat82;
  u_xlat3.x = ((x_3648 * x_3649) + 0.03999999910593032837f);
  let x_3655 : f32 = u_xlat3.x;
  let x_3656 : f32 = u_xlat81;
  u_xlat3.x = (x_3655 * x_3656);
  let x_3659 : vec3<f32> = u_xlat28;
  let x_3660 : vec4<f32> = u_xlat3;
  u_xlat28 = (x_3659 * vec3<f32>(x_3660.x, x_3660.x, x_3660.x));
  let x_3663 : vec4<f32> = u_xlat5;
  let x_3665 : vec4<f32> = u_xlat6;
  let x_3668 : vec3<f32> = u_xlat28;
  u_xlat28 = ((vec3<f32>(x_3663.x, x_3663.y, x_3663.z) * vec3<f32>(x_3665.x, x_3665.y, x_3665.z)) + x_3668);
  let x_3671 : f32 = u_xlat0.x;
  let x_3673 : f32 = x_83.unity_LightData.z;
  u_xlat0.x = (x_3671 * x_3673);
  let x_3676 : vec3<f32> = u_xlat26;
  let x_3678 : vec4<f32> = x_149.x_MainLightPosition;
  u_xlat3.x = dot(x_3676, vec3<f32>(x_3678.x, x_3678.y, x_3678.z));
  let x_3683 : f32 = u_xlat3.x;
  u_xlat3.x = clamp(x_3683, 0.0f, 1.0f);
  let x_3687 : f32 = u_xlat0.x;
  let x_3689 : f32 = u_xlat3.x;
  u_xlat0.x = (x_3687 * x_3689);
  let x_3692 : vec3<f32> = u_xlat0;
  let x_3695 : vec4<f32> = x_149.x_MainLightColor;
  let x_3697 : vec3<f32> = (vec3<f32>(x_3692.x, x_3692.x, x_3692.x) * vec3<f32>(x_3695.x, x_3695.y, x_3695.z));
  let x_3698 : vec4<f32> = u_xlat5;
  u_xlat5 = vec4<f32>(x_3697.x, x_3697.y, x_3697.z, x_3698.w);
  let x_3700 : vec3<f32> = u_xlat4;
  let x_3702 : vec4<f32> = x_149.x_MainLightPosition;
  let x_3704 : vec3<f32> = (x_3700 + vec3<f32>(x_3702.x, x_3702.y, x_3702.z));
  let x_3705 : vec4<f32> = u_xlat8;
  u_xlat8 = vec4<f32>(x_3704.x, x_3704.y, x_3704.z, x_3705.w);
  let x_3707 : vec4<f32> = u_xlat8;
  let x_3709 : vec4<f32> = u_xlat8;
  u_xlat0.x = dot(vec3<f32>(x_3707.x, x_3707.y, x_3707.z), vec3<f32>(x_3709.x, x_3709.y, x_3709.z));
  let x_3714 : f32 = u_xlat0.x;
  u_xlat0.x = max(x_3714, 1.17549435e-38f);
  let x_3718 : f32 = u_xlat0.x;
  u_xlat0.x = inverseSqrt(x_3718);
  let x_3721 : vec3<f32> = u_xlat0;
  let x_3723 : vec4<f32> = u_xlat8;
  let x_3725 : vec3<f32> = (vec3<f32>(x_3721.x, x_3721.x, x_3721.x) * vec3<f32>(x_3723.x, x_3723.y, x_3723.z));
  let x_3726 : vec4<f32> = u_xlat8;
  u_xlat8 = vec4<f32>(x_3725.x, x_3725.y, x_3725.z, x_3726.w);
  let x_3728 : vec3<f32> = u_xlat26;
  let x_3729 : vec4<f32> = u_xlat8;
  u_xlat0.x = dot(x_3728, vec3<f32>(x_3729.x, x_3729.y, x_3729.z));
  let x_3734 : f32 = u_xlat0.x;
  u_xlat0.x = clamp(x_3734, 0.0f, 1.0f);
  let x_3738 : vec4<f32> = x_149.x_MainLightPosition;
  let x_3740 : vec4<f32> = u_xlat8;
  u_xlat3.x = dot(vec3<f32>(x_3738.x, x_3738.y, x_3738.z), vec3<f32>(x_3740.x, x_3740.y, x_3740.z));
  let x_3745 : f32 = u_xlat3.x;
  u_xlat3.x = clamp(x_3745, 0.0f, 1.0f);
  let x_3749 : f32 = u_xlat0.x;
  let x_3751 : f32 = u_xlat0.x;
  u_xlat0.x = (x_3749 * x_3751);
  let x_3755 : f32 = u_xlat0.x;
  let x_3757 : f32 = u_xlat59.x;
  u_xlat0.x = ((x_3755 * x_3757) + 1.00001001358032226562f);
  let x_3763 : f32 = u_xlat3.x;
  let x_3765 : f32 = u_xlat3.x;
  u_xlat3.x = (x_3763 * x_3765);
  let x_3769 : f32 = u_xlat0.x;
  let x_3771 : f32 = u_xlat0.x;
  u_xlat0.x = (x_3769 * x_3771);
  let x_3775 : f32 = u_xlat3.x;
  u_xlat3.x = max(x_3775, 0.10000000149011611938f);
  let x_3780 : f32 = u_xlat0.x;
  let x_3782 : f32 = u_xlat3.x;
  u_xlat0.x = (x_3780 * x_3782);
  let x_3786 : f32 = u_xlat7.x;
  let x_3788 : f32 = u_xlat0.x;
  u_xlat0.x = (x_3786 * x_3788);
  let x_3791 : f32 = u_xlat83;
  let x_3793 : f32 = u_xlat0.x;
  u_xlat0.x = (x_3791 / x_3793);
  let x_3796 : vec3<f32> = u_xlat0;
  let x_3800 : vec4<f32> = u_xlat6;
  let x_3802 : vec3<f32> = ((vec3<f32>(x_3796.x, x_3796.x, x_3796.x) * vec3<f32>(0.03999999910593032837f, 0.03999999910593032837f, 0.03999999910593032837f)) + vec3<f32>(x_3800.x, x_3800.y, x_3800.z));
  let x_3803 : vec4<f32> = u_xlat8;
  u_xlat8 = vec4<f32>(x_3802.x, x_3802.y, x_3802.z, x_3803.w);
  let x_3805 : vec4<f32> = u_xlat5;
  let x_3807 : vec4<f32> = u_xlat8;
  let x_3809 : vec3<f32> = (vec3<f32>(x_3805.x, x_3805.y, x_3805.z) * vec3<f32>(x_3807.x, x_3807.y, x_3807.z));
  let x_3810 : vec4<f32> = u_xlat5;
  u_xlat5 = vec4<f32>(x_3809.x, x_3809.y, x_3809.z, x_3810.w);
  let x_3813 : f32 = x_149.x_AdditionalLightsCount.x;
  let x_3815 : f32 = x_83.unity_LightData.y;
  u_xlat0.x = min(x_3813, x_3815);
  let x_3819 : f32 = u_xlat0.x;
  u_xlatu0 = bitcast<u32>(i32(x_3819));
  let x_3823 : f32 = u_xlat2.x;
  let x_3826 : f32 = x_372.x_AdditionalShadowFadeParams.x;
  let x_3829 : f32 = x_372.x_AdditionalShadowFadeParams.y;
  u_xlat2.x = ((x_3823 * x_3826) + x_3829);
  let x_3833 : f32 = u_xlat2.x;
  u_xlat2.x = clamp(x_3833, 0.0f, 1.0f);
  u_xlat8.x = 0.0f;
  u_xlat8.y = 0.0f;
  u_xlat8.z = 0.0f;
  u_xlatu_loop_1 = 0u;
  loop {
    let x_3845 : u32 = u_xlatu_loop_1;
    let x_3846 : u32 = u_xlatu0;
    if ((x_3845 < x_3846)) {
    } else {
      break;
    }
    let x_3848 : u32 = u_xlatu_loop_1;
    u_xlatu81 = (x_3848 >> 2u);
    let x_3851 : u32 = u_xlatu_loop_1;
    u_xlati82 = bitcast<i32>((x_3851 & 3u));
    let x_3854 : u32 = u_xlatu81;
    let x_3857 : vec4<f32> = x_83.unity_LightIndices[bitcast<i32>(x_3854)];
    let x_3867 : i32 = u_xlati82;
    indexable = array<vec4<u32>, 4u>(vec4<u32>(1065353216u, 0u, 0u, 0u), vec4<u32>(0u, 1065353216u, 0u, 0u), vec4<u32>(0u, 0u, 1065353216u, 0u), vec4<u32>(0u, 0u, 0u, 1065353216u));
    let x_3872 : vec4<u32> = indexable[x_3867];
    u_xlat81 = dot(x_3857, bitcast<vec4<f32>>(x_3872));
    let x_3876 : f32 = u_xlat81;
    u_xlati81 = i32(x_3876);
    let x_3878 : vec3<f32> = vs_INTERP8;
    let x_3889 : i32 = u_xlati81;
    let x_3891 : vec4<f32> = x_3888.x_AdditionalLightsPosition[x_3889];
    let x_3894 : i32 = u_xlati81;
    let x_3896 : vec4<f32> = x_3888.x_AdditionalLightsPosition[x_3894];
    let x_3898 : vec3<f32> = ((-(x_3878) * vec3<f32>(x_3891.w, x_3891.w, x_3891.w)) + vec3<f32>(x_3896.x, x_3896.y, x_3896.z));
    let x_3899 : vec4<f32> = u_xlat9;
    u_xlat9 = vec4<f32>(x_3898.x, x_3898.y, x_3898.z, x_3899.w);
    let x_3901 : vec4<f32> = u_xlat9;
    let x_3903 : vec4<f32> = u_xlat9;
    u_xlat82 = dot(vec3<f32>(x_3901.x, x_3901.y, x_3901.z), vec3<f32>(x_3903.x, x_3903.y, x_3903.z));
    let x_3906 : f32 = u_xlat82;
    u_xlat82 = max(x_3906, 0.00006103515625f);
    let x_3909 : f32 = u_xlat82;
    u_xlat84 = inverseSqrt(x_3909);
    let x_3911 : f32 = u_xlat84;
    let x_3913 : vec4<f32> = u_xlat9;
    let x_3915 : vec3<f32> = (vec3<f32>(x_3911, x_3911, x_3911) * vec3<f32>(x_3913.x, x_3913.y, x_3913.z));
    let x_3916 : vec4<f32> = u_xlat10;
    u_xlat10 = vec4<f32>(x_3915.x, x_3915.y, x_3915.z, x_3916.w);
    let x_3918 : f32 = u_xlat82;
    u_xlat85 = (1.0f / x_3918);
    let x_3920 : f32 = u_xlat82;
    let x_3921 : i32 = u_xlati81;
    let x_3923 : f32 = x_3888.x_AdditionalLightsAttenuation[x_3921].x;
    u_xlat82 = (x_3920 * x_3923);
    let x_3925 : f32 = u_xlat82;
    let x_3927 : f32 = u_xlat82;
    u_xlat82 = ((-(x_3925) * x_3927) + 1.0f);
    let x_3930 : f32 = u_xlat82;
    u_xlat82 = max(x_3930, 0.0f);
    let x_3932 : f32 = u_xlat82;
    let x_3933 : f32 = u_xlat82;
    u_xlat82 = (x_3932 * x_3933);
    let x_3935 : f32 = u_xlat82;
    let x_3936 : f32 = u_xlat85;
    u_xlat82 = (x_3935 * x_3936);
    let x_3938 : i32 = u_xlati81;
    let x_3940 : vec4<f32> = x_3888.x_AdditionalLightsSpotDir[x_3938];
    let x_3942 : vec4<f32> = u_xlat10;
    u_xlat85 = dot(vec3<f32>(x_3940.x, x_3940.y, x_3940.z), vec3<f32>(x_3942.x, x_3942.y, x_3942.z));
    let x_3945 : f32 = u_xlat85;
    let x_3946 : i32 = u_xlati81;
    let x_3948 : f32 = x_3888.x_AdditionalLightsAttenuation[x_3946].z;
    let x_3950 : i32 = u_xlati81;
    let x_3952 : f32 = x_3888.x_AdditionalLightsAttenuation[x_3950].w;
    u_xlat85 = ((x_3945 * x_3948) + x_3952);
    let x_3954 : f32 = u_xlat85;
    u_xlat85 = clamp(x_3954, 0.0f, 1.0f);
    let x_3956 : f32 = u_xlat85;
    let x_3957 : f32 = u_xlat85;
    u_xlat85 = (x_3956 * x_3957);
    let x_3959 : f32 = u_xlat82;
    let x_3960 : f32 = u_xlat85;
    u_xlat82 = (x_3959 * x_3960);
    let x_3964 : i32 = u_xlati81;
    let x_3966 : f32 = x_372.x_AdditionalShadowParams[x_3964].w;
    u_xlati85 = i32(x_3966);
    let x_3969 : i32 = u_xlati85;
    u_xlatb86 = (x_3969 >= 0i);
    let x_3971 : bool = u_xlatb86;
    if (x_3971) {
      let x_3975 : i32 = u_xlati81;
      let x_3977 : f32 = x_372.x_AdditionalShadowParams[x_3975].z;
      u_xlatb86 = any(!((vec4<f32>(0.0f, 0.0f, 0.0f, 0.0f) == vec4<f32>(x_3977, x_3977, x_3977, x_3977))));
      let x_3981 : bool = u_xlatb86;
      if (x_3981) {
        let x_3985 : vec4<f32> = u_xlat10;
        let x_3988 : vec4<f32> = u_xlat10;
        let x_3991 : vec4<bool> = (abs(vec4<f32>(x_3985.z, x_3985.z, x_3985.y, x_3985.z)) >= abs(vec4<f32>(x_3988.x, x_3988.y, x_3988.x, x_3988.x)));
        let x_3993 : vec3<bool> = vec3<bool>(x_3991.x, x_3991.y, x_3991.z);
        let x_3994 : vec4<bool> = u_xlatb11;
        u_xlatb11 = vec4<bool>(x_3993.x, x_3993.y, x_3993.z, x_3994.w);
        let x_3997 : bool = u_xlatb11.y;
        let x_3999 : bool = u_xlatb11.x;
        u_xlatb86 = (x_3997 & x_3999);
        let x_4001 : vec4<f32> = u_xlat10;
        let x_4004 : vec4<bool> = (-(vec4<f32>(x_4001.z, x_4001.y, x_4001.z, x_4001.x)) < vec4<f32>(0.0f, 0.0f, 0.0f, 0.0f));
        let x_4005 : vec3<bool> = vec3<bool>(x_4004.x, x_4004.y, x_4004.w);
        let x_4006 : vec4<bool> = u_xlatb11;
        u_xlatb11 = vec4<bool>(x_4005.x, x_4005.y, x_4006.z, x_4005.z);
        let x_4009 : bool = u_xlatb11.x;
        u_xlat11.x = select(4.0f, 5.0f, x_4009);
        let x_4014 : bool = u_xlatb11.y;
        u_xlat11.y = select(2.0f, 3.0f, x_4014);
        let x_4018 : bool = u_xlatb11.w;
        u_xlat87 = select(0.0f, 1.0f, x_4018);
        let x_4021 : bool = u_xlatb11.z;
        if (x_4021) {
          let x_4026 : f32 = u_xlat11.y;
          x_4022 = x_4026;
        } else {
          let x_4028 : f32 = u_xlat87;
          x_4022 = x_4028;
        }
        let x_4029 : f32 = x_4022;
        u_xlat87 = x_4029;
        let x_4031 : bool = u_xlatb86;
        if (x_4031) {
          let x_4036 : f32 = u_xlat11.x;
          x_4032 = x_4036;
        } else {
          let x_4038 : f32 = u_xlat87;
          x_4032 = x_4038;
        }
        let x_4039 : f32 = x_4032;
        u_xlat86 = x_4039;
        let x_4040 : i32 = u_xlati81;
        let x_4042 : f32 = x_372.x_AdditionalShadowParams[x_4040].w;
        u_xlat87 = trunc(x_4042);
        let x_4044 : f32 = u_xlat86;
        let x_4045 : f32 = u_xlat87;
        u_xlat86 = (x_4044 + x_4045);
        let x_4047 : f32 = u_xlat86;
        u_xlati85 = i32(x_4047);
      }
      let x_4049 : i32 = u_xlati85;
      u_xlati85 = (x_4049 << bitcast<u32>(2i));
      let x_4051 : vec3<f32> = vs_INTERP8;
      let x_4054 : i32 = u_xlati85;
      let x_4057 : i32 = u_xlati85;
      let x_4061 : vec4<f32> = x_372.x_AdditionalLightsWorldToShadow[((x_4054 + 1i) / 4i)][((x_4057 + 1i) % 4i)];
      u_xlat11 = (vec4<f32>(x_4051.y, x_4051.y, x_4051.y, x_4051.y) * x_4061);
      let x_4063 : i32 = u_xlati85;
      let x_4065 : i32 = u_xlati85;
      let x_4068 : vec4<f32> = x_372.x_AdditionalLightsWorldToShadow[(x_4063 / 4i)][(x_4065 % 4i)];
      let x_4069 : vec3<f32> = vs_INTERP8;
      let x_4072 : vec4<f32> = u_xlat11;
      u_xlat11 = ((x_4068 * vec4<f32>(x_4069.x, x_4069.x, x_4069.x, x_4069.x)) + x_4072);
      let x_4074 : i32 = u_xlati85;
      let x_4077 : i32 = u_xlati85;
      let x_4081 : vec4<f32> = x_372.x_AdditionalLightsWorldToShadow[((x_4074 + 2i) / 4i)][((x_4077 + 2i) % 4i)];
      let x_4082 : vec3<f32> = vs_INTERP8;
      let x_4085 : vec4<f32> = u_xlat11;
      u_xlat11 = ((x_4081 * vec4<f32>(x_4082.z, x_4082.z, x_4082.z, x_4082.z)) + x_4085);
      let x_4087 : vec4<f32> = u_xlat11;
      let x_4088 : i32 = u_xlati85;
      let x_4091 : i32 = u_xlati85;
      let x_4095 : vec4<f32> = x_372.x_AdditionalLightsWorldToShadow[((x_4088 + 3i) / 4i)][((x_4091 + 3i) % 4i)];
      u_xlat11 = (x_4087 + x_4095);
      let x_4097 : vec4<f32> = u_xlat11;
      let x_4099 : vec4<f32> = u_xlat11;
      let x_4101 : vec3<f32> = (vec3<f32>(x_4097.x, x_4097.y, x_4097.z) / vec3<f32>(x_4099.w, x_4099.w, x_4099.w));
      let x_4102 : vec4<f32> = u_xlat11;
      u_xlat11 = vec4<f32>(x_4101.x, x_4101.y, x_4101.z, x_4102.w);
      let x_4105 : i32 = u_xlati81;
      let x_4107 : f32 = x_372.x_AdditionalShadowParams[x_4105].y;
      u_xlatb85 = (0.0f < x_4107);
      let x_4109 : bool = u_xlatb85;
      if (x_4109) {
        let x_4112 : i32 = u_xlati81;
        let x_4114 : f32 = x_372.x_AdditionalShadowParams[x_4112].y;
        u_xlatb85 = (1.0f == x_4114);
        let x_4116 : bool = u_xlatb85;
        if (x_4116) {
          let x_4119 : vec4<f32> = u_xlat11;
          let x_4123 : vec4<f32> = x_372.x_AdditionalShadowOffset0;
          u_xlat12 = (vec4<f32>(x_4119.x, x_4119.y, x_4119.x, x_4119.y) + x_4123);
          let x_4126 : vec4<f32> = u_xlat12;
          let x_4127 : vec2<f32> = vec2<f32>(x_4126.x, x_4126.y);
          let x_4129 : f32 = u_xlat11.z;
          txVec60 = vec3<f32>(x_4127.x, x_4127.y, x_4129);
          let x_4137 : vec3<f32> = txVec60;
          let x_4139 : f32 = textureSampleCompareLevel(x_AdditionalLightsShadowmapTexture, sampler_LinearClampCompare, x_4137.xy, x_4137.z);
          u_xlat13.x = x_4139;
          let x_4142 : vec4<f32> = u_xlat12;
          let x_4143 : vec2<f32> = vec2<f32>(x_4142.z, x_4142.w);
          let x_4145 : f32 = u_xlat11.z;
          txVec61 = vec3<f32>(x_4143.x, x_4143.y, x_4145);
          let x_4152 : vec3<f32> = txVec61;
          let x_4154 : f32 = textureSampleCompareLevel(x_AdditionalLightsShadowmapTexture, sampler_LinearClampCompare, x_4152.xy, x_4152.z);
          u_xlat13.y = x_4154;
          let x_4156 : vec4<f32> = u_xlat11;
          let x_4159 : vec4<f32> = x_372.x_AdditionalShadowOffset1;
          u_xlat12 = (vec4<f32>(x_4156.x, x_4156.y, x_4156.x, x_4156.y) + x_4159);
          let x_4162 : vec4<f32> = u_xlat12;
          let x_4163 : vec2<f32> = vec2<f32>(x_4162.x, x_4162.y);
          let x_4165 : f32 = u_xlat11.z;
          txVec62 = vec3<f32>(x_4163.x, x_4163.y, x_4165);
          let x_4172 : vec3<f32> = txVec62;
          let x_4174 : f32 = textureSampleCompareLevel(x_AdditionalLightsShadowmapTexture, sampler_LinearClampCompare, x_4172.xy, x_4172.z);
          u_xlat13.z = x_4174;
          let x_4177 : vec4<f32> = u_xlat12;
          let x_4178 : vec2<f32> = vec2<f32>(x_4177.z, x_4177.w);
          let x_4180 : f32 = u_xlat11.z;
          txVec63 = vec3<f32>(x_4178.x, x_4178.y, x_4180);
          let x_4187 : vec3<f32> = txVec63;
          let x_4189 : f32 = textureSampleCompareLevel(x_AdditionalLightsShadowmapTexture, sampler_LinearClampCompare, x_4187.xy, x_4187.z);
          u_xlat13.w = x_4189;
          let x_4191 : vec4<f32> = u_xlat13;
          u_xlat85 = dot(x_4191, vec4<f32>(0.25f, 0.25f, 0.25f, 0.25f));
        } else {
          let x_4194 : i32 = u_xlati81;
          let x_4196 : f32 = x_372.x_AdditionalShadowParams[x_4194].y;
          u_xlatb86 = (2.0f == x_4196);
          let x_4198 : bool = u_xlatb86;
          if (x_4198) {
            let x_4201 : vec4<f32> = u_xlat11;
            let x_4205 : vec4<f32> = x_372.x_AdditionalShadowmapSize;
            let x_4208 : vec2<f32> = ((vec2<f32>(x_4201.x, x_4201.y) * vec2<f32>(x_4205.z, x_4205.w)) + vec2<f32>(0.5f, 0.5f));
            let x_4209 : vec4<f32> = u_xlat12;
            u_xlat12 = vec4<f32>(x_4208.x, x_4208.y, x_4209.z, x_4209.w);
            let x_4211 : vec4<f32> = u_xlat12;
            let x_4213 : vec2<f32> = floor(vec2<f32>(x_4211.x, x_4211.y));
            let x_4214 : vec4<f32> = u_xlat12;
            u_xlat12 = vec4<f32>(x_4213.x, x_4213.y, x_4214.z, x_4214.w);
            let x_4217 : vec4<f32> = u_xlat11;
            let x_4220 : vec4<f32> = x_372.x_AdditionalShadowmapSize;
            let x_4223 : vec4<f32> = u_xlat12;
            u_xlat64 = ((vec2<f32>(x_4217.x, x_4217.y) * vec2<f32>(x_4220.z, x_4220.w)) + -(vec2<f32>(x_4223.x, x_4223.y)));
            let x_4227 : vec2<f32> = u_xlat64;
            u_xlat13 = (vec4<f32>(x_4227.x, x_4227.x, x_4227.y, x_4227.y) + vec4<f32>(0.5f, 1.0f, 0.5f, 1.0f));
            let x_4230 : vec4<f32> = u_xlat13;
            let x_4232 : vec4<f32> = u_xlat13;
            u_xlat14 = (vec4<f32>(x_4230.x, x_4230.x, x_4230.z, x_4230.z) * vec4<f32>(x_4232.x, x_4232.x, x_4232.z, x_4232.z));
            let x_4235 : vec4<f32> = u_xlat14;
            let x_4237 : vec2<f32> = (vec2<f32>(x_4235.y, x_4235.w) * vec2<f32>(0.07999999821186065674f, 0.07999999821186065674f));
            let x_4238 : vec4<f32> = u_xlat13;
            u_xlat13 = vec4<f32>(x_4237.x, x_4238.y, x_4237.y, x_4238.w);
            let x_4240 : vec4<f32> = u_xlat14;
            let x_4243 : vec2<f32> = u_xlat64;
            let x_4245 : vec2<f32> = ((vec2<f32>(x_4240.x, x_4240.z) * vec2<f32>(0.5f, 0.5f)) + -(x_4243));
            let x_4246 : vec4<f32> = u_xlat14;
            u_xlat14 = vec4<f32>(x_4245.x, x_4245.y, x_4246.z, x_4246.w);
            let x_4248 : vec2<f32> = u_xlat64;
            u_xlat66 = (-(x_4248) + vec2<f32>(1.0f, 1.0f));
            let x_4251 : vec2<f32> = u_xlat64;
            let x_4252 : vec2<f32> = min(x_4251, vec2<f32>(0.0f, 0.0f));
            let x_4253 : vec4<f32> = u_xlat15;
            u_xlat15 = vec4<f32>(x_4252.x, x_4252.y, x_4253.z, x_4253.w);
            let x_4255 : vec4<f32> = u_xlat15;
            let x_4258 : vec4<f32> = u_xlat15;
            let x_4261 : vec2<f32> = u_xlat66;
            let x_4262 : vec2<f32> = ((-(vec2<f32>(x_4255.x, x_4255.y)) * vec2<f32>(x_4258.x, x_4258.y)) + x_4261);
            let x_4263 : vec4<f32> = u_xlat15;
            u_xlat15 = vec4<f32>(x_4262.x, x_4262.y, x_4263.z, x_4263.w);
            let x_4265 : vec2<f32> = u_xlat64;
            u_xlat64 = max(x_4265, vec2<f32>(0.0f, 0.0f));
            let x_4267 : vec2<f32> = u_xlat64;
            let x_4269 : vec2<f32> = u_xlat64;
            let x_4271 : vec4<f32> = u_xlat13;
            u_xlat64 = ((-(x_4267) * x_4269) + vec2<f32>(x_4271.y, x_4271.w));
            let x_4274 : vec4<f32> = u_xlat15;
            let x_4276 : vec2<f32> = (vec2<f32>(x_4274.x, x_4274.y) + vec2<f32>(1.0f, 1.0f));
            let x_4277 : vec4<f32> = u_xlat15;
            u_xlat15 = vec4<f32>(x_4276.x, x_4276.y, x_4277.z, x_4277.w);
            let x_4279 : vec2<f32> = u_xlat64;
            u_xlat64 = (x_4279 + vec2<f32>(1.0f, 1.0f));
            let x_4281 : vec4<f32> = u_xlat14;
            let x_4283 : vec2<f32> = (vec2<f32>(x_4281.x, x_4281.y) * vec2<f32>(0.15999999642372131348f, 0.15999999642372131348f));
            let x_4284 : vec4<f32> = u_xlat16;
            u_xlat16 = vec4<f32>(x_4283.x, x_4283.y, x_4284.z, x_4284.w);
            let x_4286 : vec2<f32> = u_xlat66;
            let x_4287 : vec2<f32> = (x_4286 * vec2<f32>(0.15999999642372131348f, 0.15999999642372131348f));
            let x_4288 : vec4<f32> = u_xlat14;
            u_xlat14 = vec4<f32>(x_4287.x, x_4287.y, x_4288.z, x_4288.w);
            let x_4290 : vec4<f32> = u_xlat15;
            let x_4292 : vec2<f32> = (vec2<f32>(x_4290.x, x_4290.y) * vec2<f32>(0.15999999642372131348f, 0.15999999642372131348f));
            let x_4293 : vec4<f32> = u_xlat15;
            u_xlat15 = vec4<f32>(x_4292.x, x_4292.y, x_4293.z, x_4293.w);
            let x_4295 : vec2<f32> = u_xlat64;
            let x_4296 : vec2<f32> = (x_4295 * vec2<f32>(0.15999999642372131348f, 0.15999999642372131348f));
            let x_4297 : vec4<f32> = u_xlat17;
            u_xlat17 = vec4<f32>(x_4296.x, x_4296.y, x_4297.z, x_4297.w);
            let x_4299 : vec4<f32> = u_xlat13;
            u_xlat64 = (vec2<f32>(x_4299.y, x_4299.w) * vec2<f32>(0.15999999642372131348f, 0.15999999642372131348f));
            let x_4303 : f32 = u_xlat15.x;
            u_xlat16.z = x_4303;
            let x_4306 : f32 = u_xlat64.x;
            u_xlat16.w = x_4306;
            let x_4309 : f32 = u_xlat17.x;
            u_xlat14.z = x_4309;
            let x_4312 : f32 = u_xlat13.x;
            u_xlat14.w = x_4312;
            let x_4314 : vec4<f32> = u_xlat14;
            let x_4316 : vec4<f32> = u_xlat16;
            u_xlat18 = (vec4<f32>(x_4314.z, x_4314.w, x_4314.x, x_4314.z) + vec4<f32>(x_4316.z, x_4316.w, x_4316.x, x_4316.z));
            let x_4320 : f32 = u_xlat16.y;
            u_xlat15.z = x_4320;
            let x_4323 : f32 = u_xlat64.y;
            u_xlat15.w = x_4323;
            let x_4326 : f32 = u_xlat14.y;
            u_xlat17.z = x_4326;
            let x_4329 : f32 = u_xlat13.z;
            u_xlat17.w = x_4329;
            let x_4331 : vec4<f32> = u_xlat15;
            let x_4333 : vec4<f32> = u_xlat17;
            let x_4335 : vec3<f32> = (vec3<f32>(x_4331.z, x_4331.y, x_4331.w) + vec3<f32>(x_4333.z, x_4333.y, x_4333.w));
            let x_4336 : vec4<f32> = u_xlat13;
            u_xlat13 = vec4<f32>(x_4335.x, x_4335.y, x_4335.z, x_4336.w);
            let x_4338 : vec4<f32> = u_xlat14;
            let x_4340 : vec4<f32> = u_xlat18;
            let x_4342 : vec3<f32> = (vec3<f32>(x_4338.x, x_4338.z, x_4338.w) / vec3<f32>(x_4340.z, x_4340.w, x_4340.y));
            let x_4343 : vec4<f32> = u_xlat14;
            u_xlat14 = vec4<f32>(x_4342.x, x_4342.y, x_4342.z, x_4343.w);
            let x_4345 : vec4<f32> = u_xlat14;
            let x_4347 : vec3<f32> = (vec3<f32>(x_4345.x, x_4345.y, x_4345.z) + vec3<f32>(-2.5f, -0.5f, 1.5f));
            let x_4348 : vec4<f32> = u_xlat14;
            u_xlat14 = vec4<f32>(x_4347.x, x_4347.y, x_4347.z, x_4348.w);
            let x_4350 : vec4<f32> = u_xlat17;
            let x_4352 : vec4<f32> = u_xlat13;
            let x_4354 : vec3<f32> = (vec3<f32>(x_4350.z, x_4350.y, x_4350.w) / vec3<f32>(x_4352.x, x_4352.y, x_4352.z));
            let x_4355 : vec4<f32> = u_xlat15;
            u_xlat15 = vec4<f32>(x_4354.x, x_4354.y, x_4354.z, x_4355.w);
            let x_4357 : vec4<f32> = u_xlat15;
            let x_4359 : vec3<f32> = (vec3<f32>(x_4357.x, x_4357.y, x_4357.z) + vec3<f32>(-2.5f, -0.5f, 1.5f));
            let x_4360 : vec4<f32> = u_xlat15;
            u_xlat15 = vec4<f32>(x_4359.x, x_4359.y, x_4359.z, x_4360.w);
            let x_4362 : vec4<f32> = u_xlat14;
            let x_4365 : vec4<f32> = x_372.x_AdditionalShadowmapSize;
            let x_4367 : vec3<f32> = (vec3<f32>(x_4362.y, x_4362.x, x_4362.z) * vec3<f32>(x_4365.x, x_4365.x, x_4365.x));
            let x_4368 : vec4<f32> = u_xlat14;
            u_xlat14 = vec4<f32>(x_4367.x, x_4367.y, x_4367.z, x_4368.w);
            let x_4370 : vec4<f32> = u_xlat15;
            let x_4373 : vec4<f32> = x_372.x_AdditionalShadowmapSize;
            let x_4375 : vec3<f32> = (vec3<f32>(x_4370.x, x_4370.y, x_4370.z) * vec3<f32>(x_4373.y, x_4373.y, x_4373.y));
            let x_4376 : vec4<f32> = u_xlat15;
            u_xlat15 = vec4<f32>(x_4375.x, x_4375.y, x_4375.z, x_4376.w);
            let x_4379 : f32 = u_xlat15.x;
            u_xlat14.w = x_4379;
            let x_4381 : vec4<f32> = u_xlat12;
            let x_4384 : vec4<f32> = x_372.x_AdditionalShadowmapSize;
            let x_4387 : vec4<f32> = u_xlat14;
            u_xlat16 = ((vec4<f32>(x_4381.x, x_4381.y, x_4381.x, x_4381.y) * vec4<f32>(x_4384.x, x_4384.y, x_4384.x, x_4384.y)) + vec4<f32>(x_4387.y, x_4387.w, x_4387.x, x_4387.w));
            let x_4390 : vec4<f32> = u_xlat12;
            let x_4393 : vec4<f32> = x_372.x_AdditionalShadowmapSize;
            let x_4396 : vec4<f32> = u_xlat14;
            u_xlat64 = ((vec2<f32>(x_4390.x, x_4390.y) * vec2<f32>(x_4393.x, x_4393.y)) + vec2<f32>(x_4396.z, x_4396.w));
            let x_4400 : f32 = u_xlat14.y;
            u_xlat15.w = x_4400;
            let x_4402 : vec4<f32> = u_xlat15;
            let x_4403 : vec2<f32> = vec2<f32>(x_4402.y, x_4402.z);
            let x_4404 : vec4<f32> = u_xlat14;
            u_xlat14 = vec4<f32>(x_4404.x, x_4403.x, x_4404.z, x_4403.y);
            let x_4406 : vec4<f32> = u_xlat12;
            let x_4409 : vec4<f32> = x_372.x_AdditionalShadowmapSize;
            let x_4412 : vec4<f32> = u_xlat14;
            u_xlat17 = ((vec4<f32>(x_4406.x, x_4406.y, x_4406.x, x_4406.y) * vec4<f32>(x_4409.x, x_4409.y, x_4409.x, x_4409.y)) + vec4<f32>(x_4412.x, x_4412.y, x_4412.z, x_4412.y));
            let x_4415 : vec4<f32> = u_xlat12;
            let x_4418 : vec4<f32> = x_372.x_AdditionalShadowmapSize;
            let x_4421 : vec4<f32> = u_xlat15;
            u_xlat15 = ((vec4<f32>(x_4415.x, x_4415.y, x_4415.x, x_4415.y) * vec4<f32>(x_4418.x, x_4418.y, x_4418.x, x_4418.y)) + vec4<f32>(x_4421.w, x_4421.y, x_4421.w, x_4421.z));
            let x_4424 : vec4<f32> = u_xlat12;
            let x_4427 : vec4<f32> = x_372.x_AdditionalShadowmapSize;
            let x_4430 : vec4<f32> = u_xlat14;
            u_xlat14 = ((vec4<f32>(x_4424.x, x_4424.y, x_4424.x, x_4424.y) * vec4<f32>(x_4427.x, x_4427.y, x_4427.x, x_4427.y)) + vec4<f32>(x_4430.x, x_4430.w, x_4430.z, x_4430.w));
            let x_4433 : vec4<f32> = u_xlat13;
            let x_4435 : vec4<f32> = u_xlat18;
            u_xlat19 = (vec4<f32>(x_4433.x, x_4433.x, x_4433.x, x_4433.y) * vec4<f32>(x_4435.z, x_4435.w, x_4435.y, x_4435.z));
            let x_4438 : vec4<f32> = u_xlat13;
            let x_4440 : vec4<f32> = u_xlat18;
            u_xlat20 = (vec4<f32>(x_4438.y, x_4438.y, x_4438.z, x_4438.z) * x_4440);
            let x_4443 : f32 = u_xlat13.z;
            let x_4445 : f32 = u_xlat18.y;
            u_xlat86 = (x_4443 * x_4445);
            let x_4448 : vec4<f32> = u_xlat16;
            let x_4449 : vec2<f32> = vec2<f32>(x_4448.x, x_4448.y);
            let x_4451 : f32 = u_xlat11.z;
            txVec64 = vec3<f32>(x_4449.x, x_4449.y, x_4451);
            let x_4458 : vec3<f32> = txVec64;
            let x_4460 : f32 = textureSampleCompareLevel(x_AdditionalLightsShadowmapTexture, sampler_LinearClampCompare, x_4458.xy, x_4458.z);
            u_xlat87 = x_4460;
            let x_4462 : vec4<f32> = u_xlat16;
            let x_4463 : vec2<f32> = vec2<f32>(x_4462.z, x_4462.w);
            let x_4465 : f32 = u_xlat11.z;
            txVec65 = vec3<f32>(x_4463.x, x_4463.y, x_4465);
            let x_4473 : vec3<f32> = txVec65;
            let x_4475 : f32 = textureSampleCompareLevel(x_AdditionalLightsShadowmapTexture, sampler_LinearClampCompare, x_4473.xy, x_4473.z);
            u_xlat88 = x_4475;
            let x_4476 : f32 = u_xlat88;
            let x_4478 : f32 = u_xlat19.y;
            u_xlat88 = (x_4476 * x_4478);
            let x_4481 : f32 = u_xlat19.x;
            let x_4482 : f32 = u_xlat87;
            let x_4484 : f32 = u_xlat88;
            u_xlat87 = ((x_4481 * x_4482) + x_4484);
            let x_4487 : vec2<f32> = u_xlat64;
            let x_4489 : f32 = u_xlat11.z;
            txVec66 = vec3<f32>(x_4487.x, x_4487.y, x_4489);
            let x_4496 : vec3<f32> = txVec66;
            let x_4498 : f32 = textureSampleCompareLevel(x_AdditionalLightsShadowmapTexture, sampler_LinearClampCompare, x_4496.xy, x_4496.z);
            u_xlat88 = x_4498;
            let x_4500 : f32 = u_xlat19.z;
            let x_4501 : f32 = u_xlat88;
            let x_4503 : f32 = u_xlat87;
            u_xlat87 = ((x_4500 * x_4501) + x_4503);
            let x_4506 : vec4<f32> = u_xlat15;
            let x_4507 : vec2<f32> = vec2<f32>(x_4506.x, x_4506.y);
            let x_4509 : f32 = u_xlat11.z;
            txVec67 = vec3<f32>(x_4507.x, x_4507.y, x_4509);
            let x_4516 : vec3<f32> = txVec67;
            let x_4518 : f32 = textureSampleCompareLevel(x_AdditionalLightsShadowmapTexture, sampler_LinearClampCompare, x_4516.xy, x_4516.z);
            u_xlat88 = x_4518;
            let x_4520 : f32 = u_xlat19.w;
            let x_4521 : f32 = u_xlat88;
            let x_4523 : f32 = u_xlat87;
            u_xlat87 = ((x_4520 * x_4521) + x_4523);
            let x_4526 : vec4<f32> = u_xlat17;
            let x_4527 : vec2<f32> = vec2<f32>(x_4526.x, x_4526.y);
            let x_4529 : f32 = u_xlat11.z;
            txVec68 = vec3<f32>(x_4527.x, x_4527.y, x_4529);
            let x_4536 : vec3<f32> = txVec68;
            let x_4538 : f32 = textureSampleCompareLevel(x_AdditionalLightsShadowmapTexture, sampler_LinearClampCompare, x_4536.xy, x_4536.z);
            u_xlat88 = x_4538;
            let x_4540 : f32 = u_xlat20.x;
            let x_4541 : f32 = u_xlat88;
            let x_4543 : f32 = u_xlat87;
            u_xlat87 = ((x_4540 * x_4541) + x_4543);
            let x_4546 : vec4<f32> = u_xlat17;
            let x_4547 : vec2<f32> = vec2<f32>(x_4546.z, x_4546.w);
            let x_4549 : f32 = u_xlat11.z;
            txVec69 = vec3<f32>(x_4547.x, x_4547.y, x_4549);
            let x_4556 : vec3<f32> = txVec69;
            let x_4558 : f32 = textureSampleCompareLevel(x_AdditionalLightsShadowmapTexture, sampler_LinearClampCompare, x_4556.xy, x_4556.z);
            u_xlat88 = x_4558;
            let x_4560 : f32 = u_xlat20.y;
            let x_4561 : f32 = u_xlat88;
            let x_4563 : f32 = u_xlat87;
            u_xlat87 = ((x_4560 * x_4561) + x_4563);
            let x_4566 : vec4<f32> = u_xlat15;
            let x_4567 : vec2<f32> = vec2<f32>(x_4566.z, x_4566.w);
            let x_4569 : f32 = u_xlat11.z;
            txVec70 = vec3<f32>(x_4567.x, x_4567.y, x_4569);
            let x_4576 : vec3<f32> = txVec70;
            let x_4578 : f32 = textureSampleCompareLevel(x_AdditionalLightsShadowmapTexture, sampler_LinearClampCompare, x_4576.xy, x_4576.z);
            u_xlat88 = x_4578;
            let x_4580 : f32 = u_xlat20.z;
            let x_4581 : f32 = u_xlat88;
            let x_4583 : f32 = u_xlat87;
            u_xlat87 = ((x_4580 * x_4581) + x_4583);
            let x_4586 : vec4<f32> = u_xlat14;
            let x_4587 : vec2<f32> = vec2<f32>(x_4586.x, x_4586.y);
            let x_4589 : f32 = u_xlat11.z;
            txVec71 = vec3<f32>(x_4587.x, x_4587.y, x_4589);
            let x_4596 : vec3<f32> = txVec71;
            let x_4598 : f32 = textureSampleCompareLevel(x_AdditionalLightsShadowmapTexture, sampler_LinearClampCompare, x_4596.xy, x_4596.z);
            u_xlat88 = x_4598;
            let x_4600 : f32 = u_xlat20.w;
            let x_4601 : f32 = u_xlat88;
            let x_4603 : f32 = u_xlat87;
            u_xlat87 = ((x_4600 * x_4601) + x_4603);
            let x_4606 : vec4<f32> = u_xlat14;
            let x_4607 : vec2<f32> = vec2<f32>(x_4606.z, x_4606.w);
            let x_4609 : f32 = u_xlat11.z;
            txVec72 = vec3<f32>(x_4607.x, x_4607.y, x_4609);
            let x_4616 : vec3<f32> = txVec72;
            let x_4618 : f32 = textureSampleCompareLevel(x_AdditionalLightsShadowmapTexture, sampler_LinearClampCompare, x_4616.xy, x_4616.z);
            u_xlat88 = x_4618;
            let x_4619 : f32 = u_xlat86;
            let x_4620 : f32 = u_xlat88;
            let x_4622 : f32 = u_xlat87;
            u_xlat85 = ((x_4619 * x_4620) + x_4622);
          } else {
            let x_4625 : vec4<f32> = u_xlat11;
            let x_4628 : vec4<f32> = x_372.x_AdditionalShadowmapSize;
            let x_4631 : vec2<f32> = ((vec2<f32>(x_4625.x, x_4625.y) * vec2<f32>(x_4628.z, x_4628.w)) + vec2<f32>(0.5f, 0.5f));
            let x_4632 : vec4<f32> = u_xlat12;
            u_xlat12 = vec4<f32>(x_4631.x, x_4631.y, x_4632.z, x_4632.w);
            let x_4634 : vec4<f32> = u_xlat12;
            let x_4636 : vec2<f32> = floor(vec2<f32>(x_4634.x, x_4634.y));
            let x_4637 : vec4<f32> = u_xlat12;
            u_xlat12 = vec4<f32>(x_4636.x, x_4636.y, x_4637.z, x_4637.w);
            let x_4639 : vec4<f32> = u_xlat11;
            let x_4642 : vec4<f32> = x_372.x_AdditionalShadowmapSize;
            let x_4645 : vec4<f32> = u_xlat12;
            u_xlat64 = ((vec2<f32>(x_4639.x, x_4639.y) * vec2<f32>(x_4642.z, x_4642.w)) + -(vec2<f32>(x_4645.x, x_4645.y)));
            let x_4649 : vec2<f32> = u_xlat64;
            u_xlat13 = (vec4<f32>(x_4649.x, x_4649.x, x_4649.y, x_4649.y) + vec4<f32>(0.5f, 1.0f, 0.5f, 1.0f));
            let x_4652 : vec4<f32> = u_xlat13;
            let x_4654 : vec4<f32> = u_xlat13;
            u_xlat14 = (vec4<f32>(x_4652.x, x_4652.x, x_4652.z, x_4652.z) * vec4<f32>(x_4654.x, x_4654.x, x_4654.z, x_4654.z));
            let x_4657 : vec4<f32> = u_xlat14;
            let x_4659 : vec2<f32> = (vec2<f32>(x_4657.y, x_4657.w) * vec2<f32>(0.04081600159406661987f, 0.04081600159406661987f));
            let x_4660 : vec4<f32> = u_xlat15;
            u_xlat15 = vec4<f32>(x_4660.x, x_4659.x, x_4660.z, x_4659.y);
            let x_4662 : vec4<f32> = u_xlat14;
            let x_4665 : vec2<f32> = u_xlat64;
            let x_4667 : vec2<f32> = ((vec2<f32>(x_4662.x, x_4662.z) * vec2<f32>(0.5f, 0.5f)) + -(x_4665));
            let x_4668 : vec4<f32> = u_xlat13;
            u_xlat13 = vec4<f32>(x_4667.x, x_4668.y, x_4667.y, x_4668.w);
            let x_4670 : vec2<f32> = u_xlat64;
            let x_4672 : vec2<f32> = (-(x_4670) + vec2<f32>(1.0f, 1.0f));
            let x_4673 : vec4<f32> = u_xlat14;
            u_xlat14 = vec4<f32>(x_4672.x, x_4672.y, x_4673.z, x_4673.w);
            let x_4675 : vec2<f32> = u_xlat64;
            u_xlat66 = min(x_4675, vec2<f32>(0.0f, 0.0f));
            let x_4677 : vec2<f32> = u_xlat66;
            let x_4679 : vec2<f32> = u_xlat66;
            let x_4681 : vec4<f32> = u_xlat14;
            let x_4683 : vec2<f32> = ((-(x_4677) * x_4679) + vec2<f32>(x_4681.x, x_4681.y));
            let x_4684 : vec4<f32> = u_xlat14;
            u_xlat14 = vec4<f32>(x_4683.x, x_4683.y, x_4684.z, x_4684.w);
            let x_4686 : vec2<f32> = u_xlat64;
            u_xlat66 = max(x_4686, vec2<f32>(0.0f, 0.0f));
            let x_4689 : vec2<f32> = u_xlat66;
            let x_4691 : vec2<f32> = u_xlat66;
            let x_4693 : vec4<f32> = u_xlat13;
            let x_4695 : vec2<f32> = ((-(x_4689) * x_4691) + vec2<f32>(x_4693.y, x_4693.w));
            let x_4696 : vec3<f32> = u_xlat39;
            u_xlat39 = vec3<f32>(x_4695.x, x_4696.y, x_4695.y);
            let x_4698 : vec4<f32> = u_xlat14;
            let x_4700 : vec2<f32> = (vec2<f32>(x_4698.x, x_4698.y) + vec2<f32>(2.0f, 2.0f));
            let x_4701 : vec4<f32> = u_xlat14;
            u_xlat14 = vec4<f32>(x_4700.x, x_4700.y, x_4701.z, x_4701.w);
            let x_4703 : vec3<f32> = u_xlat39;
            let x_4705 : vec2<f32> = (vec2<f32>(x_4703.x, x_4703.z) + vec2<f32>(2.0f, 2.0f));
            let x_4706 : vec4<f32> = u_xlat13;
            u_xlat13 = vec4<f32>(x_4706.x, x_4705.x, x_4706.z, x_4705.y);
            let x_4709 : f32 = u_xlat13.y;
            u_xlat16.z = (x_4709 * 0.08163200318813323975f);
            let x_4712 : vec4<f32> = u_xlat13;
            let x_4714 : vec3<f32> = (vec3<f32>(x_4712.z, x_4712.x, x_4712.w) * vec3<f32>(0.08163200318813323975f, 0.08163200318813323975f, 0.08163200318813323975f));
            let x_4715 : vec4<f32> = u_xlat17;
            u_xlat17 = vec4<f32>(x_4714.x, x_4714.y, x_4714.z, x_4715.w);
            let x_4717 : vec4<f32> = u_xlat14;
            let x_4719 : vec2<f32> = (vec2<f32>(x_4717.x, x_4717.y) * vec2<f32>(0.08163200318813323975f, 0.08163200318813323975f));
            let x_4720 : vec4<f32> = u_xlat13;
            u_xlat13 = vec4<f32>(x_4719.x, x_4719.y, x_4720.z, x_4720.w);
            let x_4723 : f32 = u_xlat17.y;
            u_xlat16.x = x_4723;
            let x_4725 : vec2<f32> = u_xlat64;
            let x_4728 : vec2<f32> = ((vec2<f32>(x_4725.x, x_4725.x) * vec2<f32>(-0.08163200318813323975f, 0.08163200318813323975f)) + vec2<f32>(0.16326400637626647949f, 0.08163200318813323975f));
            let x_4729 : vec4<f32> = u_xlat16;
            u_xlat16 = vec4<f32>(x_4729.x, x_4728.x, x_4729.z, x_4728.y);
            let x_4731 : vec2<f32> = u_xlat64;
            let x_4734 : vec2<f32> = ((vec2<f32>(x_4731.x, x_4731.x) * vec2<f32>(-0.08163200318813323975f, 0.08163200318813323975f)) + vec2<f32>(0.08163200318813323975f, 0.16326400637626647949f));
            let x_4735 : vec4<f32> = u_xlat14;
            u_xlat14 = vec4<f32>(x_4734.x, x_4735.y, x_4734.y, x_4735.w);
            let x_4738 : f32 = u_xlat13.x;
            u_xlat14.y = x_4738;
            let x_4741 : f32 = u_xlat15.y;
            u_xlat14.w = x_4741;
            let x_4743 : vec4<f32> = u_xlat14;
            let x_4744 : vec4<f32> = u_xlat16;
            u_xlat16 = (x_4743 + x_4744);
            let x_4746 : vec2<f32> = u_xlat64;
            let x_4749 : vec2<f32> = ((vec2<f32>(x_4746.y, x_4746.y) * vec2<f32>(-0.08163200318813323975f, 0.08163200318813323975f)) + vec2<f32>(0.16326400637626647949f, 0.08163200318813323975f));
            let x_4750 : vec4<f32> = u_xlat17;
            u_xlat17 = vec4<f32>(x_4750.x, x_4749.x, x_4750.z, x_4749.y);
            let x_4752 : vec2<f32> = u_xlat64;
            let x_4755 : vec2<f32> = ((vec2<f32>(x_4752.y, x_4752.y) * vec2<f32>(-0.08163200318813323975f, 0.08163200318813323975f)) + vec2<f32>(0.08163200318813323975f, 0.16326400637626647949f));
            let x_4756 : vec4<f32> = u_xlat15;
            u_xlat15 = vec4<f32>(x_4755.x, x_4756.y, x_4755.y, x_4756.w);
            let x_4759 : f32 = u_xlat13.y;
            u_xlat15.y = x_4759;
            let x_4761 : vec4<f32> = u_xlat15;
            let x_4762 : vec4<f32> = u_xlat17;
            u_xlat13 = (x_4761 + x_4762);
            let x_4764 : vec4<f32> = u_xlat14;
            let x_4765 : vec4<f32> = u_xlat16;
            u_xlat14 = (x_4764 / x_4765);
            let x_4767 : vec4<f32> = u_xlat14;
            u_xlat14 = (x_4767 + vec4<f32>(-3.5f, -1.5f, 0.5f, 2.5f));
            let x_4769 : vec4<f32> = u_xlat15;
            let x_4770 : vec4<f32> = u_xlat13;
            u_xlat15 = (x_4769 / x_4770);
            let x_4772 : vec4<f32> = u_xlat15;
            u_xlat15 = (x_4772 + vec4<f32>(-3.5f, -1.5f, 0.5f, 2.5f));
            let x_4774 : vec4<f32> = u_xlat14;
            let x_4777 : vec4<f32> = x_372.x_AdditionalShadowmapSize;
            u_xlat14 = (vec4<f32>(x_4774.w, x_4774.x, x_4774.y, x_4774.z) * vec4<f32>(x_4777.x, x_4777.x, x_4777.x, x_4777.x));
            let x_4780 : vec4<f32> = u_xlat15;
            let x_4783 : vec4<f32> = x_372.x_AdditionalShadowmapSize;
            u_xlat15 = (vec4<f32>(x_4780.x, x_4780.w, x_4780.y, x_4780.z) * vec4<f32>(x_4783.y, x_4783.y, x_4783.y, x_4783.y));
            let x_4786 : vec4<f32> = u_xlat14;
            let x_4787 : vec3<f32> = vec3<f32>(x_4786.y, x_4786.z, x_4786.w);
            let x_4788 : vec4<f32> = u_xlat17;
            u_xlat17 = vec4<f32>(x_4787.x, x_4788.y, x_4787.y, x_4787.z);
            let x_4791 : f32 = u_xlat15.x;
            u_xlat17.y = x_4791;
            let x_4793 : vec4<f32> = u_xlat12;
            let x_4796 : vec4<f32> = x_372.x_AdditionalShadowmapSize;
            let x_4799 : vec4<f32> = u_xlat17;
            u_xlat18 = ((vec4<f32>(x_4793.x, x_4793.y, x_4793.x, x_4793.y) * vec4<f32>(x_4796.x, x_4796.y, x_4796.x, x_4796.y)) + vec4<f32>(x_4799.x, x_4799.y, x_4799.z, x_4799.y));
            let x_4802 : vec4<f32> = u_xlat12;
            let x_4805 : vec4<f32> = x_372.x_AdditionalShadowmapSize;
            let x_4808 : vec4<f32> = u_xlat17;
            u_xlat64 = ((vec2<f32>(x_4802.x, x_4802.y) * vec2<f32>(x_4805.x, x_4805.y)) + vec2<f32>(x_4808.w, x_4808.y));
            let x_4812 : f32 = u_xlat17.y;
            u_xlat14.y = x_4812;
            let x_4815 : f32 = u_xlat15.z;
            u_xlat17.y = x_4815;
            let x_4817 : vec4<f32> = u_xlat12;
            let x_4820 : vec4<f32> = x_372.x_AdditionalShadowmapSize;
            let x_4823 : vec4<f32> = u_xlat17;
            u_xlat19 = ((vec4<f32>(x_4817.x, x_4817.y, x_4817.x, x_4817.y) * vec4<f32>(x_4820.x, x_4820.y, x_4820.x, x_4820.y)) + vec4<f32>(x_4823.x, x_4823.y, x_4823.z, x_4823.y));
            let x_4826 : vec4<f32> = u_xlat12;
            let x_4829 : vec4<f32> = x_372.x_AdditionalShadowmapSize;
            let x_4832 : vec4<f32> = u_xlat17;
            let x_4834 : vec2<f32> = ((vec2<f32>(x_4826.x, x_4826.y) * vec2<f32>(x_4829.x, x_4829.y)) + vec2<f32>(x_4832.w, x_4832.y));
            let x_4835 : vec4<f32> = u_xlat20;
            u_xlat20 = vec4<f32>(x_4834.x, x_4834.y, x_4835.z, x_4835.w);
            let x_4838 : f32 = u_xlat17.y;
            u_xlat14.z = x_4838;
            let x_4840 : vec4<f32> = u_xlat12;
            let x_4843 : vec4<f32> = x_372.x_AdditionalShadowmapSize;
            let x_4846 : vec4<f32> = u_xlat14;
            u_xlat21 = ((vec4<f32>(x_4840.x, x_4840.y, x_4840.x, x_4840.y) * vec4<f32>(x_4843.x, x_4843.y, x_4843.x, x_4843.y)) + vec4<f32>(x_4846.x, x_4846.y, x_4846.x, x_4846.z));
            let x_4850 : f32 = u_xlat15.w;
            u_xlat17.y = x_4850;
            let x_4853 : vec4<f32> = u_xlat12;
            let x_4856 : vec4<f32> = x_372.x_AdditionalShadowmapSize;
            let x_4859 : vec4<f32> = u_xlat17;
            u_xlat22 = ((vec4<f32>(x_4853.x, x_4853.y, x_4853.x, x_4853.y) * vec4<f32>(x_4856.x, x_4856.y, x_4856.x, x_4856.y)) + vec4<f32>(x_4859.x, x_4859.y, x_4859.z, x_4859.y));
            let x_4863 : vec4<f32> = u_xlat12;
            let x_4866 : vec4<f32> = x_372.x_AdditionalShadowmapSize;
            let x_4869 : vec4<f32> = u_xlat17;
            u_xlat40 = ((vec2<f32>(x_4863.x, x_4863.y) * vec2<f32>(x_4866.x, x_4866.y)) + vec2<f32>(x_4869.w, x_4869.y));
            let x_4873 : f32 = u_xlat17.y;
            u_xlat14.w = x_4873;
            let x_4876 : vec4<f32> = u_xlat12;
            let x_4879 : vec4<f32> = x_372.x_AdditionalShadowmapSize;
            let x_4882 : vec4<f32> = u_xlat14;
            u_xlat72 = ((vec2<f32>(x_4876.x, x_4876.y) * vec2<f32>(x_4879.x, x_4879.y)) + vec2<f32>(x_4882.x, x_4882.w));
            let x_4885 : vec4<f32> = u_xlat17;
            let x_4886 : vec3<f32> = vec3<f32>(x_4885.x, x_4885.z, x_4885.w);
            let x_4887 : vec4<f32> = u_xlat15;
            u_xlat15 = vec4<f32>(x_4886.x, x_4887.y, x_4886.y, x_4886.z);
            let x_4889 : vec4<f32> = u_xlat12;
            let x_4892 : vec4<f32> = x_372.x_AdditionalShadowmapSize;
            let x_4895 : vec4<f32> = u_xlat15;
            u_xlat17 = ((vec4<f32>(x_4889.x, x_4889.y, x_4889.x, x_4889.y) * vec4<f32>(x_4892.x, x_4892.y, x_4892.x, x_4892.y)) + vec4<f32>(x_4895.x, x_4895.y, x_4895.z, x_4895.y));
            let x_4899 : vec4<f32> = u_xlat12;
            let x_4902 : vec4<f32> = x_372.x_AdditionalShadowmapSize;
            let x_4905 : vec4<f32> = u_xlat15;
            u_xlat67 = ((vec2<f32>(x_4899.x, x_4899.y) * vec2<f32>(x_4902.x, x_4902.y)) + vec2<f32>(x_4905.w, x_4905.y));
            let x_4909 : f32 = u_xlat14.x;
            u_xlat15.x = x_4909;
            let x_4911 : vec4<f32> = u_xlat12;
            let x_4914 : vec4<f32> = x_372.x_AdditionalShadowmapSize;
            let x_4917 : vec4<f32> = u_xlat15;
            let x_4919 : vec2<f32> = ((vec2<f32>(x_4911.x, x_4911.y) * vec2<f32>(x_4914.x, x_4914.y)) + vec2<f32>(x_4917.x, x_4917.y));
            let x_4920 : vec4<f32> = u_xlat12;
            u_xlat12 = vec4<f32>(x_4919.x, x_4919.y, x_4920.z, x_4920.w);
            let x_4923 : vec4<f32> = u_xlat13;
            let x_4925 : vec4<f32> = u_xlat16;
            u_xlat23 = (vec4<f32>(x_4923.x, x_4923.x, x_4923.x, x_4923.x) * x_4925);
            let x_4928 : vec4<f32> = u_xlat13;
            let x_4930 : vec4<f32> = u_xlat16;
            u_xlat24 = (vec4<f32>(x_4928.y, x_4928.y, x_4928.y, x_4928.y) * x_4930);
            let x_4933 : vec4<f32> = u_xlat13;
            let x_4935 : vec4<f32> = u_xlat16;
            u_xlat25 = (vec4<f32>(x_4933.z, x_4933.z, x_4933.z, x_4933.z) * x_4935);
            let x_4937 : vec4<f32> = u_xlat13;
            let x_4939 : vec4<f32> = u_xlat16;
            u_xlat13 = (vec4<f32>(x_4937.w, x_4937.w, x_4937.w, x_4937.w) * x_4939);
            let x_4942 : vec4<f32> = u_xlat18;
            let x_4943 : vec2<f32> = vec2<f32>(x_4942.x, x_4942.y);
            let x_4945 : f32 = u_xlat11.z;
            txVec73 = vec3<f32>(x_4943.x, x_4943.y, x_4945);
            let x_4952 : vec3<f32> = txVec73;
            let x_4954 : f32 = textureSampleCompareLevel(x_AdditionalLightsShadowmapTexture, sampler_LinearClampCompare, x_4952.xy, x_4952.z);
            u_xlat86 = x_4954;
            let x_4956 : vec4<f32> = u_xlat18;
            let x_4957 : vec2<f32> = vec2<f32>(x_4956.z, x_4956.w);
            let x_4959 : f32 = u_xlat11.z;
            txVec74 = vec3<f32>(x_4957.x, x_4957.y, x_4959);
            let x_4966 : vec3<f32> = txVec74;
            let x_4968 : f32 = textureSampleCompareLevel(x_AdditionalLightsShadowmapTexture, sampler_LinearClampCompare, x_4966.xy, x_4966.z);
            u_xlat87 = x_4968;
            let x_4969 : f32 = u_xlat87;
            let x_4971 : f32 = u_xlat23.y;
            u_xlat87 = (x_4969 * x_4971);
            let x_4974 : f32 = u_xlat23.x;
            let x_4975 : f32 = u_xlat86;
            let x_4977 : f32 = u_xlat87;
            u_xlat86 = ((x_4974 * x_4975) + x_4977);
            let x_4980 : vec2<f32> = u_xlat64;
            let x_4982 : f32 = u_xlat11.z;
            txVec75 = vec3<f32>(x_4980.x, x_4980.y, x_4982);
            let x_4989 : vec3<f32> = txVec75;
            let x_4991 : f32 = textureSampleCompareLevel(x_AdditionalLightsShadowmapTexture, sampler_LinearClampCompare, x_4989.xy, x_4989.z);
            u_xlat87 = x_4991;
            let x_4993 : f32 = u_xlat23.z;
            let x_4994 : f32 = u_xlat87;
            let x_4996 : f32 = u_xlat86;
            u_xlat86 = ((x_4993 * x_4994) + x_4996);
            let x_4999 : vec4<f32> = u_xlat21;
            let x_5000 : vec2<f32> = vec2<f32>(x_4999.x, x_4999.y);
            let x_5002 : f32 = u_xlat11.z;
            txVec76 = vec3<f32>(x_5000.x, x_5000.y, x_5002);
            let x_5009 : vec3<f32> = txVec76;
            let x_5011 : f32 = textureSampleCompareLevel(x_AdditionalLightsShadowmapTexture, sampler_LinearClampCompare, x_5009.xy, x_5009.z);
            u_xlat87 = x_5011;
            let x_5013 : f32 = u_xlat23.w;
            let x_5014 : f32 = u_xlat87;
            let x_5016 : f32 = u_xlat86;
            u_xlat86 = ((x_5013 * x_5014) + x_5016);
            let x_5019 : vec4<f32> = u_xlat19;
            let x_5020 : vec2<f32> = vec2<f32>(x_5019.x, x_5019.y);
            let x_5022 : f32 = u_xlat11.z;
            txVec77 = vec3<f32>(x_5020.x, x_5020.y, x_5022);
            let x_5029 : vec3<f32> = txVec77;
            let x_5031 : f32 = textureSampleCompareLevel(x_AdditionalLightsShadowmapTexture, sampler_LinearClampCompare, x_5029.xy, x_5029.z);
            u_xlat87 = x_5031;
            let x_5033 : f32 = u_xlat24.x;
            let x_5034 : f32 = u_xlat87;
            let x_5036 : f32 = u_xlat86;
            u_xlat86 = ((x_5033 * x_5034) + x_5036);
            let x_5039 : vec4<f32> = u_xlat19;
            let x_5040 : vec2<f32> = vec2<f32>(x_5039.z, x_5039.w);
            let x_5042 : f32 = u_xlat11.z;
            txVec78 = vec3<f32>(x_5040.x, x_5040.y, x_5042);
            let x_5049 : vec3<f32> = txVec78;
            let x_5051 : f32 = textureSampleCompareLevel(x_AdditionalLightsShadowmapTexture, sampler_LinearClampCompare, x_5049.xy, x_5049.z);
            u_xlat87 = x_5051;
            let x_5053 : f32 = u_xlat24.y;
            let x_5054 : f32 = u_xlat87;
            let x_5056 : f32 = u_xlat86;
            u_xlat86 = ((x_5053 * x_5054) + x_5056);
            let x_5059 : vec4<f32> = u_xlat20;
            let x_5060 : vec2<f32> = vec2<f32>(x_5059.x, x_5059.y);
            let x_5062 : f32 = u_xlat11.z;
            txVec79 = vec3<f32>(x_5060.x, x_5060.y, x_5062);
            let x_5069 : vec3<f32> = txVec79;
            let x_5071 : f32 = textureSampleCompareLevel(x_AdditionalLightsShadowmapTexture, sampler_LinearClampCompare, x_5069.xy, x_5069.z);
            u_xlat87 = x_5071;
            let x_5073 : f32 = u_xlat24.z;
            let x_5074 : f32 = u_xlat87;
            let x_5076 : f32 = u_xlat86;
            u_xlat86 = ((x_5073 * x_5074) + x_5076);
            let x_5079 : vec4<f32> = u_xlat21;
            let x_5080 : vec2<f32> = vec2<f32>(x_5079.z, x_5079.w);
            let x_5082 : f32 = u_xlat11.z;
            txVec80 = vec3<f32>(x_5080.x, x_5080.y, x_5082);
            let x_5089 : vec3<f32> = txVec80;
            let x_5091 : f32 = textureSampleCompareLevel(x_AdditionalLightsShadowmapTexture, sampler_LinearClampCompare, x_5089.xy, x_5089.z);
            u_xlat87 = x_5091;
            let x_5093 : f32 = u_xlat24.w;
            let x_5094 : f32 = u_xlat87;
            let x_5096 : f32 = u_xlat86;
            u_xlat86 = ((x_5093 * x_5094) + x_5096);
            let x_5099 : vec4<f32> = u_xlat22;
            let x_5100 : vec2<f32> = vec2<f32>(x_5099.x, x_5099.y);
            let x_5102 : f32 = u_xlat11.z;
            txVec81 = vec3<f32>(x_5100.x, x_5100.y, x_5102);
            let x_5109 : vec3<f32> = txVec81;
            let x_5111 : f32 = textureSampleCompareLevel(x_AdditionalLightsShadowmapTexture, sampler_LinearClampCompare, x_5109.xy, x_5109.z);
            u_xlat87 = x_5111;
            let x_5113 : f32 = u_xlat25.x;
            let x_5114 : f32 = u_xlat87;
            let x_5116 : f32 = u_xlat86;
            u_xlat86 = ((x_5113 * x_5114) + x_5116);
            let x_5119 : vec4<f32> = u_xlat22;
            let x_5120 : vec2<f32> = vec2<f32>(x_5119.z, x_5119.w);
            let x_5122 : f32 = u_xlat11.z;
            txVec82 = vec3<f32>(x_5120.x, x_5120.y, x_5122);
            let x_5129 : vec3<f32> = txVec82;
            let x_5131 : f32 = textureSampleCompareLevel(x_AdditionalLightsShadowmapTexture, sampler_LinearClampCompare, x_5129.xy, x_5129.z);
            u_xlat87 = x_5131;
            let x_5133 : f32 = u_xlat25.y;
            let x_5134 : f32 = u_xlat87;
            let x_5136 : f32 = u_xlat86;
            u_xlat86 = ((x_5133 * x_5134) + x_5136);
            let x_5139 : vec2<f32> = u_xlat40;
            let x_5141 : f32 = u_xlat11.z;
            txVec83 = vec3<f32>(x_5139.x, x_5139.y, x_5141);
            let x_5148 : vec3<f32> = txVec83;
            let x_5150 : f32 = textureSampleCompareLevel(x_AdditionalLightsShadowmapTexture, sampler_LinearClampCompare, x_5148.xy, x_5148.z);
            u_xlat87 = x_5150;
            let x_5152 : f32 = u_xlat25.z;
            let x_5153 : f32 = u_xlat87;
            let x_5155 : f32 = u_xlat86;
            u_xlat86 = ((x_5152 * x_5153) + x_5155);
            let x_5158 : vec2<f32> = u_xlat72;
            let x_5160 : f32 = u_xlat11.z;
            txVec84 = vec3<f32>(x_5158.x, x_5158.y, x_5160);
            let x_5167 : vec3<f32> = txVec84;
            let x_5169 : f32 = textureSampleCompareLevel(x_AdditionalLightsShadowmapTexture, sampler_LinearClampCompare, x_5167.xy, x_5167.z);
            u_xlat87 = x_5169;
            let x_5171 : f32 = u_xlat25.w;
            let x_5172 : f32 = u_xlat87;
            let x_5174 : f32 = u_xlat86;
            u_xlat86 = ((x_5171 * x_5172) + x_5174);
            let x_5177 : vec4<f32> = u_xlat17;
            let x_5178 : vec2<f32> = vec2<f32>(x_5177.x, x_5177.y);
            let x_5180 : f32 = u_xlat11.z;
            txVec85 = vec3<f32>(x_5178.x, x_5178.y, x_5180);
            let x_5187 : vec3<f32> = txVec85;
            let x_5189 : f32 = textureSampleCompareLevel(x_AdditionalLightsShadowmapTexture, sampler_LinearClampCompare, x_5187.xy, x_5187.z);
            u_xlat87 = x_5189;
            let x_5191 : f32 = u_xlat13.x;
            let x_5192 : f32 = u_xlat87;
            let x_5194 : f32 = u_xlat86;
            u_xlat86 = ((x_5191 * x_5192) + x_5194);
            let x_5197 : vec4<f32> = u_xlat17;
            let x_5198 : vec2<f32> = vec2<f32>(x_5197.z, x_5197.w);
            let x_5200 : f32 = u_xlat11.z;
            txVec86 = vec3<f32>(x_5198.x, x_5198.y, x_5200);
            let x_5207 : vec3<f32> = txVec86;
            let x_5209 : f32 = textureSampleCompareLevel(x_AdditionalLightsShadowmapTexture, sampler_LinearClampCompare, x_5207.xy, x_5207.z);
            u_xlat87 = x_5209;
            let x_5211 : f32 = u_xlat13.y;
            let x_5212 : f32 = u_xlat87;
            let x_5214 : f32 = u_xlat86;
            u_xlat86 = ((x_5211 * x_5212) + x_5214);
            let x_5217 : vec2<f32> = u_xlat67;
            let x_5219 : f32 = u_xlat11.z;
            txVec87 = vec3<f32>(x_5217.x, x_5217.y, x_5219);
            let x_5226 : vec3<f32> = txVec87;
            let x_5228 : f32 = textureSampleCompareLevel(x_AdditionalLightsShadowmapTexture, sampler_LinearClampCompare, x_5226.xy, x_5226.z);
            u_xlat87 = x_5228;
            let x_5230 : f32 = u_xlat13.z;
            let x_5231 : f32 = u_xlat87;
            let x_5233 : f32 = u_xlat86;
            u_xlat86 = ((x_5230 * x_5231) + x_5233);
            let x_5236 : vec4<f32> = u_xlat12;
            let x_5237 : vec2<f32> = vec2<f32>(x_5236.x, x_5236.y);
            let x_5239 : f32 = u_xlat11.z;
            txVec88 = vec3<f32>(x_5237.x, x_5237.y, x_5239);
            let x_5246 : vec3<f32> = txVec88;
            let x_5248 : f32 = textureSampleCompareLevel(x_AdditionalLightsShadowmapTexture, sampler_LinearClampCompare, x_5246.xy, x_5246.z);
            u_xlat87 = x_5248;
            let x_5250 : f32 = u_xlat13.w;
            let x_5251 : f32 = u_xlat87;
            let x_5253 : f32 = u_xlat86;
            u_xlat85 = ((x_5250 * x_5251) + x_5253);
          }
        }
      } else {
        let x_5257 : vec4<f32> = u_xlat11;
        let x_5258 : vec2<f32> = vec2<f32>(x_5257.x, x_5257.y);
        let x_5260 : f32 = u_xlat11.z;
        txVec89 = vec3<f32>(x_5258.x, x_5258.y, x_5260);
        let x_5267 : vec3<f32> = txVec89;
        let x_5269 : f32 = textureSampleCompareLevel(x_AdditionalLightsShadowmapTexture, sampler_LinearClampCompare, x_5267.xy, x_5267.z);
        u_xlat85 = x_5269;
      }
      let x_5270 : i32 = u_xlati81;
      let x_5272 : f32 = x_372.x_AdditionalShadowParams[x_5270].x;
      u_xlat86 = (1.0f + -(x_5272));
      let x_5275 : f32 = u_xlat85;
      let x_5276 : i32 = u_xlati81;
      let x_5278 : f32 = x_372.x_AdditionalShadowParams[x_5276].x;
      let x_5280 : f32 = u_xlat86;
      u_xlat85 = ((x_5275 * x_5278) + x_5280);
      let x_5283 : f32 = u_xlat11.z;
      u_xlatb86 = (0.0f >= x_5283);
      let x_5287 : f32 = u_xlat11.z;
      u_xlatb87 = (x_5287 >= 1.0f);
      let x_5289 : bool = u_xlatb86;
      let x_5290 : bool = u_xlatb87;
      u_xlatb86 = (x_5289 | x_5290);
      let x_5292 : bool = u_xlatb86;
      let x_5293 : f32 = u_xlat85;
      u_xlat85 = select(x_5293, 1.0f, x_5292);
    } else {
      u_xlat85 = 1.0f;
    }
    let x_5296 : f32 = u_xlat85;
    u_xlat86 = (-(x_5296) + 1.0f);
    let x_5300 : f32 = u_xlat2.x;
    let x_5301 : f32 = u_xlat86;
    let x_5303 : f32 = u_xlat85;
    u_xlat85 = ((x_5300 * x_5301) + x_5303);
    let x_5305 : f32 = u_xlat82;
    let x_5306 : f32 = u_xlat85;
    u_xlat82 = (x_5305 * x_5306);
    let x_5308 : vec3<f32> = u_xlat26;
    let x_5309 : vec4<f32> = u_xlat10;
    u_xlat85 = dot(x_5308, vec3<f32>(x_5309.x, x_5309.y, x_5309.z));
    let x_5312 : f32 = u_xlat85;
    u_xlat85 = clamp(x_5312, 0.0f, 1.0f);
    let x_5314 : f32 = u_xlat82;
    let x_5315 : f32 = u_xlat85;
    u_xlat82 = (x_5314 * x_5315);
    let x_5317 : f32 = u_xlat82;
    let x_5319 : i32 = u_xlati81;
    let x_5321 : vec4<f32> = x_3888.x_AdditionalLightsColor[x_5319];
    let x_5323 : vec3<f32> = (vec3<f32>(x_5317, x_5317, x_5317) * vec3<f32>(x_5321.x, x_5321.y, x_5321.z));
    let x_5324 : vec4<f32> = u_xlat11;
    u_xlat11 = vec4<f32>(x_5323.x, x_5323.y, x_5323.z, x_5324.w);
    let x_5326 : vec4<f32> = u_xlat9;
    let x_5328 : f32 = u_xlat84;
    let x_5331 : vec3<f32> = u_xlat4;
    let x_5332 : vec3<f32> = ((vec3<f32>(x_5326.x, x_5326.y, x_5326.z) * vec3<f32>(x_5328, x_5328, x_5328)) + x_5331);
    let x_5333 : vec4<f32> = u_xlat9;
    u_xlat9 = vec4<f32>(x_5332.x, x_5332.y, x_5332.z, x_5333.w);
    let x_5335 : vec4<f32> = u_xlat9;
    let x_5337 : vec4<f32> = u_xlat9;
    u_xlat81 = dot(vec3<f32>(x_5335.x, x_5335.y, x_5335.z), vec3<f32>(x_5337.x, x_5337.y, x_5337.z));
    let x_5340 : f32 = u_xlat81;
    u_xlat81 = max(x_5340, 1.17549435e-38f);
    let x_5342 : f32 = u_xlat81;
    u_xlat81 = inverseSqrt(x_5342);
    let x_5344 : f32 = u_xlat81;
    let x_5346 : vec4<f32> = u_xlat9;
    let x_5348 : vec3<f32> = (vec3<f32>(x_5344, x_5344, x_5344) * vec3<f32>(x_5346.x, x_5346.y, x_5346.z));
    let x_5349 : vec4<f32> = u_xlat9;
    u_xlat9 = vec4<f32>(x_5348.x, x_5348.y, x_5348.z, x_5349.w);
    let x_5351 : vec3<f32> = u_xlat26;
    let x_5352 : vec4<f32> = u_xlat9;
    u_xlat81 = dot(x_5351, vec3<f32>(x_5352.x, x_5352.y, x_5352.z));
    let x_5355 : f32 = u_xlat81;
    u_xlat81 = clamp(x_5355, 0.0f, 1.0f);
    let x_5357 : vec4<f32> = u_xlat10;
    let x_5359 : vec4<f32> = u_xlat9;
    u_xlat82 = dot(vec3<f32>(x_5357.x, x_5357.y, x_5357.z), vec3<f32>(x_5359.x, x_5359.y, x_5359.z));
    let x_5362 : f32 = u_xlat82;
    u_xlat82 = clamp(x_5362, 0.0f, 1.0f);
    let x_5364 : f32 = u_xlat81;
    let x_5365 : f32 = u_xlat81;
    u_xlat81 = (x_5364 * x_5365);
    let x_5367 : f32 = u_xlat81;
    let x_5369 : f32 = u_xlat59.x;
    u_xlat81 = ((x_5367 * x_5369) + 1.00001001358032226562f);
    let x_5372 : f32 = u_xlat82;
    let x_5373 : f32 = u_xlat82;
    u_xlat82 = (x_5372 * x_5373);
    let x_5375 : f32 = u_xlat81;
    let x_5376 : f32 = u_xlat81;
    u_xlat81 = (x_5375 * x_5376);
    let x_5378 : f32 = u_xlat82;
    u_xlat82 = max(x_5378, 0.10000000149011611938f);
    let x_5380 : f32 = u_xlat81;
    let x_5381 : f32 = u_xlat82;
    u_xlat81 = (x_5380 * x_5381);
    let x_5384 : f32 = u_xlat7.x;
    let x_5385 : f32 = u_xlat81;
    u_xlat81 = (x_5384 * x_5385);
    let x_5387 : f32 = u_xlat83;
    let x_5388 : f32 = u_xlat81;
    u_xlat81 = (x_5387 / x_5388);
    let x_5390 : f32 = u_xlat81;
    let x_5393 : vec4<f32> = u_xlat6;
    let x_5395 : vec3<f32> = ((vec3<f32>(x_5390, x_5390, x_5390) * vec3<f32>(0.03999999910593032837f, 0.03999999910593032837f, 0.03999999910593032837f)) + vec3<f32>(x_5393.x, x_5393.y, x_5393.z));
    let x_5396 : vec4<f32> = u_xlat9;
    u_xlat9 = vec4<f32>(x_5395.x, x_5395.y, x_5395.z, x_5396.w);
    let x_5398 : vec4<f32> = u_xlat9;
    let x_5400 : vec4<f32> = u_xlat11;
    let x_5403 : vec4<f32> = u_xlat8;
    let x_5405 : vec3<f32> = ((vec3<f32>(x_5398.x, x_5398.y, x_5398.z) * vec3<f32>(x_5400.x, x_5400.y, x_5400.z)) + vec3<f32>(x_5403.x, x_5403.y, x_5403.z));
    let x_5406 : vec4<f32> = u_xlat8;
    u_xlat8 = vec4<f32>(x_5405.x, x_5405.y, x_5405.z, x_5406.w);

    continuing {
      let x_5408 : u32 = u_xlatu_loop_1;
      u_xlatu_loop_1 = (x_5408 + bitcast<u32>(1i));
    }
  }
  let x_5410 : vec3<f32> = u_xlat28;
  let x_5411 : f32 = u_xlat33;
  let x_5414 : vec4<f32> = u_xlat5;
  u_xlat0 = ((x_5410 * vec3<f32>(x_5411, x_5411, x_5411)) + vec3<f32>(x_5414.x, x_5414.y, x_5414.z));
  let x_5417 : vec4<f32> = u_xlat8;
  let x_5419 : vec3<f32> = u_xlat0;
  u_xlat0 = (vec3<f32>(x_5417.x, x_5417.y, x_5417.z) + x_5419);
  let x_5421 : vec4<f32> = vs_INTERP6;
  let x_5423 : vec3<f32> = u_xlat1;
  let x_5425 : vec3<f32> = u_xlat0;
  u_xlat0 = ((vec3<f32>(x_5421.w, x_5421.w, x_5421.w) * x_5423) + x_5425);
  let x_5429 : f32 = u_xlat55.x;
  let x_5431 : f32 = u_xlat55.x;
  u_xlat78 = (x_5429 * -(x_5431));
  let x_5434 : f32 = u_xlat78;
  u_xlat78 = exp2(x_5434);
  let x_5436 : vec3<f32> = u_xlat0;
  let x_5438 : vec4<f32> = x_149.unity_FogColor;
  u_xlat0 = (x_5436 + -(vec3<f32>(x_5438.x, x_5438.y, x_5438.z)));
  let x_5444 : f32 = u_xlat78;
  let x_5446 : vec3<f32> = u_xlat0;
  let x_5449 : vec4<f32> = x_149.unity_FogColor;
  let x_5451 : vec3<f32> = ((vec3<f32>(x_5444, x_5444, x_5444) * x_5446) + vec3<f32>(x_5449.x, x_5449.y, x_5449.z));
  let x_5452 : vec4<f32> = SV_Target0;
  SV_Target0 = vec4<f32>(x_5451.x, x_5451.y, x_5451.z, x_5452.w);
  let x_5454 : bool = u_xlatb29;
  let x_5455 : f32 = u_xlat79;
  SV_Target0.w = select(1.0f, x_5455, x_5454);
  return;
}

struct main_out {
  @location(0)
  SV_Target0_1 : vec4<f32>,
}

@fragment
fn main(@location(5) vs_INTERP9_param : vec3<f32>, @location(1) vs_INTERP4_param : vec4<f32>, @location(4) vs_INTERP8_param : vec3<f32>, @location(2) vs_INTERP5_param : vec4<f32>, @location(3) vs_INTERP6_param : vec4<f32>, @location(0) vs_INTERP0_param : vec2<f32>, @builtin(position) gl_FragCoord_param : vec4<f32>) -> main_out {
  vs_INTERP9 = vs_INTERP9_param;
  vs_INTERP4 = vs_INTERP4_param;
  vs_INTERP8 = vs_INTERP8_param;
  vs_INTERP5 = vs_INTERP5_param;
  vs_INTERP6 = vs_INTERP6_param;
  vs_INTERP0 = vs_INTERP0_param;
  gl_FragCoord = gl_FragCoord_param;
  main_1();
  return main_out(SV_Target0);
}


