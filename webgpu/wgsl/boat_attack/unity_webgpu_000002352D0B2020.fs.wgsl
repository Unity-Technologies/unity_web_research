type Arr = array<vec4<f32>, 2u>;

type Arr_1 = array<mat4x4<f32>, 2u>;

type Arr_2 = array<vec4<f32>, 2u>;

type Arr_3 = array<vec4<f32>, 2u>;

struct PGlobals {
  x_ScaledScreenParams : vec4<f32>,
  x_GlobalMipBias : vec2<f32>,
  @size(8)
  padding : u32,
  x_ZBufferParams : vec4<f32>,
  unity_MatrixV : mat4x4<f32>,
  x_SSAOParams : vec4<f32>,
  x_CameraViewTopLeftCorner : Arr_3,
  x_CameraViewProjections : Arr_1,
  x_SourceSize : vec4<f32>,
  x_ProjectionParams2 : vec4<f32>,
  x_CameraViewXExtent : Arr_3,
  x_CameraViewYExtent : Arr_3,
}

@group(0) @binding(0) var x_CameraDepthTexture : texture_2d<f32>;

@group(0) @binding(1) var sampler_CameraDepthTexture : sampler;

var<private> vs_TEXCOORD0 : vec2<f32>;

@group(1) @binding(0) var<uniform> x_33 : PGlobals;

var<private> SV_Target0 : vec4<f32>;

var<private> gl_FragCoord : vec4<f32>;

fn main_1() {
  var u_xlat0 : f32;
  var u_xlatb8 : bool;
  var u_xlat8 : vec3<f32>;
  var u_xlat16 : f32;
  var u_xlat1 : vec4<f32>;
  var u_xlat9 : vec3<f32>;
  var u_xlat2 : vec4<f32>;
  var u_xlat11 : vec3<f32>;
  var u_xlat12 : vec3<f32>;
  var u_xlatb1 : bool;
  var u_xlatb26 : bool;
  var u_xlat5 : vec3<f32>;
  var x_286 : vec3<f32>;
  var u_xlat4 : vec4<f32>;
  var x_295 : vec3<f32>;
  var x_306 : vec3<f32>;
  var x_317 : vec3<f32>;
  var x_328 : vec2<f32>;
  var u_xlat17 : f32;
  var u_xlat3 : vec4<f32>;
  var u_xlat10 : vec2<f32>;
  var u_xlat25 : f32;
  var u_xlat18 : vec2<f32>;
  var u_xlatb25 : bool;
  var x_560 : vec3<f32>;
  var u_xlatb3 : vec2<bool>;
  var u_xlat26 : f32;
  var u_xlat6 : f32;
  var u_xlat7 : f32;
  var x_837 : vec3<f32>;
  var u_xlat28 : f32;
  var u_xlatb28 : bool;
  var u_xlatb18 : bool;
  var x_1109 : vec3<f32>;
  var u_xlat19 : f32;
  var x_1382 : vec3<f32>;
  var x_1633 : vec3<f32>;
  var x_1905 : vec3<f32>;
  var x_2161 : vec3<f32>;
  var x_2432 : vec3<f32>;
  var x_2688 : vec3<f32>;
  var x_2960 : vec3<f32>;
  var x_3216 : vec3<f32>;
  var u_xlatb2 : vec4<bool>;
  var x_3497 : vec3<f32>;
  var u_xlat_precise_vec4 : vec4<f32>;
  var u_xlat_precise_ivec4 : vec4<i32>;
  var u_xlat_precise_bvec4 : vec4<bool>;
  var u_xlat_precise_uvec4 : vec4<u32>;
  let x_22 : vec2<f32> = vs_TEXCOORD0;
  let x_39 : f32 = x_33.x_GlobalMipBias.x;
  let x_40 : vec4<f32> = textureSampleBias(x_CameraDepthTexture, sampler_CameraDepthTexture, x_22, x_39);
  u_xlat0 = x_40.x;
  let x_45 : f32 = u_xlat0;
  u_xlatb8 = (x_45 < 0.00001f);
  let x_48 : bool = u_xlatb8;
  if (x_48) {
    SV_Target0 = vec4<f32>(0.0f, 0.5f, 0.5f, 0.5f);
    return;
  }
  let x_59 : f32 = x_33.x_ZBufferParams.z;
  let x_60 : f32 = u_xlat0;
  let x_64 : f32 = x_33.x_ZBufferParams.w;
  u_xlat0 = ((x_59 * x_60) + x_64);
  let x_67 : f32 = u_xlat0;
  u_xlat0 = (1.0f / x_67);
  let x_71 : f32 = x_33.x_SSAOParams.w;
  let x_72 : f32 = u_xlat0;
  u_xlatb8 = (x_71 < x_72);
  let x_74 : bool = u_xlatb8;
  if (x_74) {
    SV_Target0 = vec4<f32>(0.0f, 0.5f, 0.5f, 0.5f);
    return;
  }
  let x_84 : f32 = vs_TEXCOORD0.y;
  u_xlat8.x = (-(x_84) + 1.0f);
  let x_89 : f32 = u_xlat0;
  let x_92 : f32 = x_33.x_ProjectionParams2.x;
  u_xlat16 = (x_89 * x_92);
  let x_100 : vec4<f32> = x_33.x_CameraViewXExtent[0i];
  let x_102 : vec2<f32> = vs_TEXCOORD0;
  let x_107 : vec4<f32> = x_33.x_CameraViewTopLeftCorner[0i];
  let x_109 : vec3<f32> = ((vec3<f32>(x_100.x, x_100.y, x_100.z) * vec3<f32>(x_102.x, x_102.x, x_102.x)) + vec3<f32>(x_107.x, x_107.y, x_107.z));
  let x_110 : vec4<f32> = u_xlat1;
  u_xlat1 = vec4<f32>(x_109.x, x_109.y, x_109.z, x_110.w);
  let x_114 : vec4<f32> = x_33.x_CameraViewYExtent[0i];
  let x_116 : vec3<f32> = u_xlat8;
  let x_119 : vec4<f32> = u_xlat1;
  let x_121 : vec3<f32> = ((vec3<f32>(x_114.x, x_114.y, x_114.z) * vec3<f32>(x_116.x, x_116.x, x_116.x)) + vec3<f32>(x_119.x, x_119.y, x_119.z));
  let x_122 : vec4<f32> = u_xlat1;
  u_xlat1 = vec4<f32>(x_121.x, x_121.y, x_121.z, x_122.w);
  let x_124 : f32 = u_xlat16;
  let x_126 : vec4<f32> = u_xlat1;
  u_xlat8 = (vec3<f32>(x_124, x_124, x_124) * vec3<f32>(x_126.x, x_126.y, x_126.z));
  let x_132 : f32 = x_33.x_SourceSize.z;
  u_xlat9.x = (x_132 * -2.0f);
  u_xlat9.y = 0.0f;
  let x_137 : vec3<f32> = u_xlat9;
  let x_139 : vec2<f32> = vs_TEXCOORD0;
  let x_140 : vec2<f32> = (vec2<f32>(x_137.x, x_137.y) + x_139);
  let x_141 : vec3<f32> = u_xlat9;
  u_xlat9 = vec3<f32>(x_140.x, x_140.y, x_141.z);
  let x_146 : vec3<f32> = u_xlat9;
  let x_149 : f32 = x_33.x_GlobalMipBias.x;
  let x_150 : vec4<f32> = textureSampleBias(x_CameraDepthTexture, sampler_CameraDepthTexture, vec2<f32>(x_146.x, x_146.y), x_149);
  u_xlat1.x = x_150.x;
  let x_154 : f32 = x_33.x_ZBufferParams.z;
  let x_156 : f32 = u_xlat1.x;
  let x_159 : f32 = x_33.x_ZBufferParams.w;
  u_xlat1.x = ((x_154 * x_156) + x_159);
  let x_163 : f32 = u_xlat1.x;
  u_xlat9.z = (1.0f / x_163);
  let x_168 : f32 = x_33.x_SourceSize.z;
  u_xlat2.x = (x_168 * 2.0f);
  u_xlat2.y = 0.0f;
  let x_173 : vec4<f32> = u_xlat2;
  let x_175 : vec2<f32> = vs_TEXCOORD0;
  let x_176 : vec2<f32> = (vec2<f32>(x_173.x, x_173.y) + x_175);
  let x_177 : vec4<f32> = u_xlat2;
  u_xlat2 = vec4<f32>(x_176.x, x_176.y, x_177.z, x_177.w);
  let x_182 : vec4<f32> = u_xlat2;
  let x_185 : f32 = x_33.x_GlobalMipBias.x;
  let x_186 : vec4<f32> = textureSampleBias(x_CameraDepthTexture, sampler_CameraDepthTexture, vec2<f32>(x_182.x, x_182.y), x_185);
  u_xlat1.x = x_186.x;
  let x_190 : f32 = x_33.x_ZBufferParams.z;
  let x_192 : f32 = u_xlat1.x;
  let x_195 : f32 = x_33.x_ZBufferParams.w;
  u_xlat1.x = ((x_190 * x_192) + x_195);
  let x_199 : f32 = u_xlat1.x;
  u_xlat2.z = (1.0f / x_199);
  u_xlat11.x = 0.0f;
  let x_205 : f32 = x_33.x_SourceSize.w;
  u_xlat11.y = (x_205 * 2.0f);
  let x_208 : vec3<f32> = u_xlat11;
  let x_210 : vec2<f32> = vs_TEXCOORD0;
  let x_211 : vec2<f32> = (vec2<f32>(x_208.x, x_208.y) + x_210);
  let x_212 : vec3<f32> = u_xlat11;
  u_xlat11 = vec3<f32>(x_211.x, x_211.y, x_212.z);
  let x_217 : vec3<f32> = u_xlat11;
  let x_220 : f32 = x_33.x_GlobalMipBias.x;
  let x_221 : vec4<f32> = textureSampleBias(x_CameraDepthTexture, sampler_CameraDepthTexture, vec2<f32>(x_217.x, x_217.y), x_220);
  u_xlat1.x = x_221.x;
  let x_225 : f32 = x_33.x_ZBufferParams.z;
  let x_227 : f32 = u_xlat1.x;
  let x_230 : f32 = x_33.x_ZBufferParams.w;
  u_xlat1.x = ((x_225 * x_227) + x_230);
  let x_234 : f32 = u_xlat1.x;
  u_xlat11.z = (1.0f / x_234);
  u_xlat12.x = 0.0f;
  let x_240 : f32 = x_33.x_SourceSize.w;
  u_xlat12.y = (x_240 * -2.0f);
  let x_243 : vec3<f32> = u_xlat12;
  let x_245 : vec2<f32> = vs_TEXCOORD0;
  let x_246 : vec2<f32> = (vec2<f32>(x_243.x, x_243.y) + x_245);
  let x_247 : vec3<f32> = u_xlat12;
  u_xlat12 = vec3<f32>(x_246.x, x_246.y, x_247.z);
  let x_252 : vec3<f32> = u_xlat12;
  let x_255 : f32 = x_33.x_GlobalMipBias.x;
  let x_256 : vec4<f32> = textureSampleBias(x_CameraDepthTexture, sampler_CameraDepthTexture, vec2<f32>(x_252.x, x_252.y), x_255);
  u_xlat1.x = x_256.x;
  let x_260 : f32 = x_33.x_ZBufferParams.z;
  let x_262 : f32 = u_xlat1.x;
  let x_265 : f32 = x_33.x_ZBufferParams.w;
  u_xlat1.x = ((x_260 * x_262) + x_265);
  let x_269 : f32 = u_xlat1.x;
  u_xlat12.z = (1.0f / x_269);
  let x_274 : f32 = u_xlat2.z;
  let x_276 : f32 = u_xlat9.z;
  u_xlatb1 = (x_274 < x_276);
  let x_280 : f32 = u_xlat11.z;
  let x_282 : f32 = u_xlat12.z;
  u_xlatb26 = (x_280 < x_282);
  let x_285 : bool = u_xlatb1;
  if (x_285) {
    let x_289 : vec3<f32> = u_xlat9;
    x_286 = x_289;
  } else {
    let x_291 : vec3<f32> = u_xlat12;
    x_286 = x_291;
  }
  let x_292 : vec3<f32> = x_286;
  u_xlat5 = x_292;
  let x_294 : bool = u_xlatb1;
  if (x_294) {
    let x_298 : vec3<f32> = u_xlat12;
    x_295 = x_298;
  } else {
    let x_300 : vec4<f32> = u_xlat2;
    x_295 = vec3<f32>(x_300.x, x_300.y, x_300.z);
  }
  let x_302 : vec3<f32> = x_295;
  let x_303 : vec4<f32> = u_xlat4;
  u_xlat4 = vec4<f32>(x_303.x, x_302.x, x_302.y, x_302.z);
  let x_305 : bool = u_xlatb1;
  if (x_305) {
    let x_309 : vec3<f32> = u_xlat11;
    x_306 = x_309;
  } else {
    let x_311 : vec4<f32> = u_xlat2;
    x_306 = vec3<f32>(x_311.x, x_311.y, x_311.z);
  }
  let x_313 : vec3<f32> = x_306;
  let x_314 : vec4<f32> = u_xlat2;
  u_xlat2 = vec4<f32>(x_313.x, x_313.y, x_313.z, x_314.w);
  let x_316 : bool = u_xlatb1;
  if (x_316) {
    let x_320 : vec3<f32> = u_xlat9;
    x_317 = x_320;
  } else {
    let x_322 : vec3<f32> = u_xlat11;
    x_317 = x_322;
  }
  let x_323 : vec3<f32> = x_317;
  let x_324 : vec4<f32> = u_xlat1;
  u_xlat1 = vec4<f32>(x_324.x, x_323.x, x_323.y, x_323.z);
  let x_326 : bool = u_xlatb26;
  if (x_326) {
    let x_331 : vec3<f32> = u_xlat5;
    x_328 = vec2<f32>(x_331.x, x_331.y);
  } else {
    let x_334 : vec4<f32> = u_xlat2;
    x_328 = vec2<f32>(x_334.x, x_334.y);
  }
  let x_336 : vec2<f32> = x_328;
  let x_337 : vec4<f32> = u_xlat2;
  u_xlat2 = vec4<f32>(x_336.x, x_336.y, x_337.z, x_337.w);
  let x_340 : f32 = u_xlat5.z;
  u_xlat4.x = x_340;
  let x_343 : f32 = u_xlat2.z;
  u_xlat1.x = x_343;
  let x_345 : bool = u_xlatb26;
  let x_346 : vec4<f32> = u_xlat4;
  let x_347 : vec4<f32> = u_xlat1;
  u_xlat1 = select(x_347, x_346, vec4<bool>(x_345, x_345, x_345, x_345));
  let x_353 : f32 = u_xlat1.z;
  u_xlat17 = (-(x_353) + 1.0f);
  let x_356 : vec4<f32> = u_xlat1;
  let x_359 : vec4<f32> = x_33.x_ProjectionParams2;
  let x_361 : vec2<f32> = (vec2<f32>(x_356.w, x_356.x) * vec2<f32>(x_359.x, x_359.x));
  let x_362 : vec4<f32> = u_xlat1;
  u_xlat1 = vec4<f32>(x_361.x, x_362.y, x_362.z, x_361.y);
  let x_366 : vec4<f32> = x_33.x_CameraViewXExtent[0i];
  let x_368 : vec4<f32> = u_xlat1;
  let x_372 : vec4<f32> = x_33.x_CameraViewTopLeftCorner[0i];
  let x_374 : vec3<f32> = ((vec3<f32>(x_366.z, x_366.x, x_366.y) * vec3<f32>(x_368.y, x_368.y, x_368.y)) + vec3<f32>(x_372.z, x_372.x, x_372.y));
  let x_375 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_374.x, x_374.y, x_374.z, x_375.w);
  let x_378 : vec4<f32> = x_33.x_CameraViewYExtent[0i];
  let x_380 : f32 = u_xlat17;
  let x_383 : vec4<f32> = u_xlat3;
  let x_385 : vec3<f32> = ((vec3<f32>(x_378.z, x_378.x, x_378.y) * vec3<f32>(x_380, x_380, x_380)) + vec3<f32>(x_383.x, x_383.y, x_383.z));
  let x_386 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_385.x, x_385.y, x_385.z, x_386.w);
  let x_388 : vec4<f32> = u_xlat3;
  let x_390 : vec4<f32> = u_xlat1;
  let x_393 : vec3<f32> = u_xlat8;
  let x_396 : vec3<f32> = ((vec3<f32>(x_388.x, x_388.y, x_388.z) * vec3<f32>(x_390.x, x_390.x, x_390.x)) + -(vec3<f32>(x_393.z, x_393.x, x_393.y)));
  let x_397 : vec4<f32> = u_xlat1;
  u_xlat1 = vec4<f32>(x_396.x, x_396.y, x_396.z, x_397.w);
  let x_401 : f32 = u_xlat2.y;
  u_xlat10.x = (-(x_401) + 1.0f);
  let x_406 : vec4<f32> = x_33.x_CameraViewXExtent[0i];
  let x_408 : vec4<f32> = u_xlat2;
  let x_412 : vec4<f32> = x_33.x_CameraViewTopLeftCorner[0i];
  let x_414 : vec3<f32> = ((vec3<f32>(x_406.y, x_406.z, x_406.x) * vec3<f32>(x_408.x, x_408.x, x_408.x)) + vec3<f32>(x_412.y, x_412.z, x_412.x));
  let x_415 : vec4<f32> = u_xlat2;
  u_xlat2 = vec4<f32>(x_414.x, x_415.y, x_414.y, x_414.z);
  let x_418 : vec4<f32> = x_33.x_CameraViewYExtent[0i];
  let x_420 : vec2<f32> = u_xlat10;
  let x_423 : vec4<f32> = u_xlat2;
  let x_425 : vec3<f32> = ((vec3<f32>(x_418.y, x_418.z, x_418.x) * vec3<f32>(x_420.x, x_420.x, x_420.x)) + vec3<f32>(x_423.x, x_423.z, x_423.w));
  let x_426 : vec4<f32> = u_xlat2;
  u_xlat2 = vec4<f32>(x_425.x, x_425.y, x_425.z, x_426.w);
  let x_428 : vec4<f32> = u_xlat2;
  let x_430 : vec4<f32> = u_xlat1;
  let x_433 : vec3<f32> = u_xlat8;
  let x_436 : vec3<f32> = ((vec3<f32>(x_428.x, x_428.y, x_428.z) * vec3<f32>(x_430.w, x_430.w, x_430.w)) + -(vec3<f32>(x_433.y, x_433.z, x_433.x)));
  let x_437 : vec4<f32> = u_xlat2;
  u_xlat2 = vec4<f32>(x_436.x, x_436.y, x_436.z, x_437.w);
  let x_439 : vec4<f32> = u_xlat1;
  let x_441 : vec4<f32> = u_xlat2;
  let x_443 : vec3<f32> = (vec3<f32>(x_439.x, x_439.y, x_439.z) * vec3<f32>(x_441.x, x_441.y, x_441.z));
  let x_444 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_443.x, x_443.y, x_443.z, x_444.w);
  let x_446 : vec4<f32> = u_xlat1;
  let x_448 : vec4<f32> = u_xlat2;
  let x_451 : vec4<f32> = u_xlat3;
  let x_454 : vec3<f32> = ((vec3<f32>(x_446.z, x_446.x, x_446.y) * vec3<f32>(x_448.y, x_448.z, x_448.x)) + -(vec3<f32>(x_451.x, x_451.y, x_451.z)));
  let x_455 : vec4<f32> = u_xlat1;
  u_xlat1 = vec4<f32>(x_454.x, x_454.y, x_454.z, x_455.w);
  let x_458 : vec4<f32> = u_xlat1;
  let x_460 : vec4<f32> = u_xlat1;
  u_xlat25 = dot(vec3<f32>(x_458.x, x_458.y, x_458.z), vec3<f32>(x_460.x, x_460.y, x_460.z));
  let x_463 : f32 = u_xlat25;
  u_xlat25 = inverseSqrt(x_463);
  let x_465 : f32 = u_xlat25;
  let x_467 : vec4<f32> = u_xlat1;
  let x_469 : vec3<f32> = (vec3<f32>(x_465, x_465, x_465) * vec3<f32>(x_467.x, x_467.y, x_467.z));
  let x_470 : vec4<f32> = u_xlat1;
  u_xlat1 = vec4<f32>(x_469.x, x_469.y, x_469.z, x_470.w);
  let x_472 : vec2<f32> = vs_TEXCOORD0;
  let x_474 : vec4<f32> = x_33.x_ScaledScreenParams;
  let x_476 : vec2<f32> = (x_472 * vec2<f32>(x_474.x, x_474.y));
  let x_477 : vec4<f32> = u_xlat2;
  u_xlat2 = vec4<f32>(x_476.x, x_476.y, x_477.z, x_477.w);
  let x_480 : vec4<f32> = u_xlat2;
  let x_483 : vec4<f32> = x_33.x_SSAOParams;
  u_xlat18 = (vec2<f32>(x_480.x, x_480.y) * vec2<f32>(x_483.z, x_483.z));
  let x_486 : vec2<f32> = u_xlat18;
  u_xlat25 = dot(x_486, vec2<f32>(0.067110561f, 0.00583715f));
  let x_491 : f32 = u_xlat25;
  u_xlat25 = fract(x_491);
  let x_493 : f32 = u_xlat25;
  u_xlat25 = (x_493 * 52.982917786f);
  let x_496 : f32 = u_xlat25;
  u_xlat25 = fract(x_496);
  let x_498 : f32 = u_xlat25;
  u_xlat18.x = fract(x_498);
  let x_502 : f32 = u_xlat18.x;
  u_xlat3.z = ((x_502 * 2.0f) + -1.0f);
  let x_507 : f32 = u_xlat25;
  u_xlat25 = (x_507 + 0.9296875f);
  let x_510 : f32 = u_xlat25;
  u_xlat25 = (x_510 * 6.283185482f);
  let x_514 : f32 = u_xlat3.z;
  let x_517 : f32 = u_xlat3.z;
  u_xlat18.x = ((-(x_514) * x_517) + 1.0f);
  let x_522 : f32 = u_xlat18.x;
  u_xlat18.x = sqrt(x_522);
  let x_525 : f32 = u_xlat25;
  u_xlat4.x = sin(x_525);
  let x_528 : f32 = u_xlat25;
  u_xlat5.x = cos(x_528);
  let x_532 : f32 = u_xlat18.x;
  let x_534 : f32 = u_xlat5.x;
  u_xlat3.x = (x_532 * x_534);
  let x_538 : f32 = u_xlat18.x;
  let x_540 : f32 = u_xlat4.x;
  u_xlat3.y = (x_538 * x_540);
  let x_543 : vec4<f32> = u_xlat3;
  let x_547 : vec3<f32> = (vec3<f32>(x_543.x, x_543.y, x_543.z) * vec3<f32>(0.288675129f, 0.288675129f, 0.288675129f));
  let x_548 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_547.x, x_547.y, x_547.z, x_548.w);
  let x_550 : vec4<f32> = u_xlat1;
  let x_553 : vec4<f32> = u_xlat3;
  u_xlat25 = dot(-(vec3<f32>(x_550.x, x_550.y, x_550.z)), vec3<f32>(x_553.x, x_553.y, x_553.z));
  let x_557 : f32 = u_xlat25;
  u_xlatb25 = (x_557 >= 0.0f);
  let x_559 : bool = u_xlatb25;
  if (x_559) {
    let x_563 : vec4<f32> = u_xlat3;
    x_560 = -(vec3<f32>(x_563.x, x_563.y, x_563.z));
  } else {
    let x_567 : vec4<f32> = u_xlat3;
    x_560 = vec3<f32>(x_567.x, x_567.y, x_567.z);
  }
  let x_569 : vec3<f32> = x_560;
  let x_570 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_569.x, x_569.y, x_569.z, x_570.w);
  let x_572 : vec4<f32> = u_xlat3;
  let x_575 : vec4<f32> = x_33.x_SSAOParams;
  let x_578 : vec3<f32> = u_xlat8;
  let x_579 : vec3<f32> = ((vec3<f32>(x_572.x, x_572.y, x_572.z) * vec3<f32>(x_575.y, x_575.y, x_575.y)) + x_578);
  let x_580 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_579.x, x_579.y, x_579.z, x_580.w);
  let x_582 : vec4<f32> = u_xlat3;
  let x_586 : vec4<f32> = x_33.x_CameraViewProjections[0i][1i];
  u_xlat18 = (vec2<f32>(x_582.y, x_582.y) * vec2<f32>(x_586.x, x_586.y));
  let x_590 : vec4<f32> = x_33.x_CameraViewProjections[0i][0i];
  let x_592 : vec4<f32> = u_xlat3;
  let x_595 : vec2<f32> = u_xlat18;
  u_xlat18 = ((vec2<f32>(x_590.x, x_590.y) * vec2<f32>(x_592.x, x_592.x)) + x_595);
  let x_598 : vec4<f32> = x_33.x_CameraViewProjections[0i][2i];
  let x_600 : vec4<f32> = u_xlat3;
  let x_603 : vec2<f32> = u_xlat18;
  u_xlat18 = ((vec2<f32>(x_598.x, x_598.y) * vec2<f32>(x_600.z, x_600.z)) + x_603);
  let x_607 : f32 = x_33.unity_MatrixV[0i].z;
  u_xlat4.x = x_607;
  let x_610 : f32 = x_33.unity_MatrixV[1i].z;
  u_xlat4.y = x_610;
  let x_613 : f32 = x_33.unity_MatrixV[2i].z;
  u_xlat4.z = x_613;
  let x_615 : vec4<f32> = u_xlat4;
  let x_617 : vec4<f32> = u_xlat3;
  u_xlat25 = dot(vec3<f32>(x_615.x, x_615.y, x_615.z), vec3<f32>(x_617.x, x_617.y, x_617.z));
  let x_620 : f32 = u_xlat25;
  u_xlat3.x = (1.0f / -(x_620));
  let x_624 : vec2<f32> = u_xlat18;
  let x_625 : vec4<f32> = u_xlat3;
  u_xlat18 = ((x_624 * vec2<f32>(x_625.x, x_625.x)) + vec2<f32>(1.0f, 1.0f));
  let x_630 : vec2<f32> = u_xlat18;
  u_xlat18 = (x_630 * vec2<f32>(0.5f, 0.5f));
  let x_633 : vec2<f32> = u_xlat18;
  u_xlat18 = clamp(x_633, vec2<f32>(0.0f, 0.0f), vec2<f32>(1.0f, 1.0f));
  let x_640 : vec2<f32> = u_xlat18;
  let x_642 : f32 = x_33.x_GlobalMipBias.x;
  let x_643 : vec4<f32> = textureSampleBias(x_CameraDepthTexture, sampler_CameraDepthTexture, x_640, x_642);
  u_xlat3.x = x_643.x;
  let x_647 : f32 = x_33.x_ZBufferParams.z;
  let x_649 : f32 = u_xlat3.x;
  let x_652 : f32 = x_33.x_ZBufferParams.w;
  u_xlat11.x = ((x_647 * x_649) + x_652);
  let x_656 : f32 = u_xlat11.x;
  u_xlat11.x = (1.0f / x_656);
  let x_659 : f32 = u_xlat25;
  let x_662 : f32 = u_xlat11.x;
  u_xlat25 = (-(x_659) + -(x_662));
  let x_665 : f32 = u_xlat25;
  let x_668 : f32 = x_33.x_SSAOParams.y;
  u_xlatb25 = (abs(x_665) < x_668);
  let x_670 : bool = u_xlatb25;
  u_xlat25 = select(0.0f, 1.0f, x_670);
  let x_676 : f32 = u_xlat3.x;
  u_xlatb3.x = (0.00001f < x_676);
  let x_680 : bool = u_xlatb3.x;
  u_xlat3.x = select(0.0f, 1.0f, x_680);
  let x_683 : f32 = u_xlat25;
  let x_685 : f32 = u_xlat3.x;
  u_xlat25 = (x_683 * x_685);
  let x_689 : f32 = u_xlat18.y;
  u_xlat26 = (-(x_689) + 1.0f);
  let x_693 : f32 = u_xlat11.x;
  let x_695 : f32 = x_33.x_ProjectionParams2.x;
  u_xlat3.x = (x_693 * x_695);
  let x_699 : vec4<f32> = x_33.x_CameraViewXExtent[0i];
  let x_701 : vec2<f32> = u_xlat18;
  let x_705 : vec4<f32> = x_33.x_CameraViewTopLeftCorner[0i];
  u_xlat11 = ((vec3<f32>(x_699.x, x_699.y, x_699.z) * vec3<f32>(x_701.x, x_701.x, x_701.x)) + vec3<f32>(x_705.x, x_705.y, x_705.z));
  let x_709 : vec4<f32> = x_33.x_CameraViewYExtent[0i];
  let x_711 : f32 = u_xlat26;
  let x_714 : vec3<f32> = u_xlat11;
  u_xlat11 = ((vec3<f32>(x_709.x, x_709.y, x_709.z) * vec3<f32>(x_711, x_711, x_711)) + x_714);
  let x_716 : vec3<f32> = u_xlat11;
  let x_717 : vec4<f32> = u_xlat3;
  let x_720 : vec3<f32> = u_xlat8;
  let x_722 : vec3<f32> = ((x_716 * vec3<f32>(x_717.x, x_717.x, x_717.x)) + -(x_720));
  let x_723 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_722.x, x_722.y, x_722.z, x_723.w);
  let x_725 : vec4<f32> = u_xlat3;
  let x_727 : vec4<f32> = u_xlat1;
  u_xlat18.x = dot(vec3<f32>(x_725.x, x_725.y, x_725.z), vec3<f32>(x_727.x, x_727.y, x_727.z));
  let x_731 : f32 = u_xlat0;
  let x_736 : f32 = u_xlat18.x;
  u_xlat18.x = ((-(x_731) * 0.004f) + x_736);
  let x_740 : f32 = u_xlat18.x;
  u_xlat18.x = max(x_740, 0.0f);
  let x_743 : vec4<f32> = u_xlat3;
  let x_745 : vec4<f32> = u_xlat3;
  u_xlat26 = dot(vec3<f32>(x_743.x, x_743.y, x_743.z), vec3<f32>(x_745.x, x_745.y, x_745.z));
  let x_748 : f32 = u_xlat26;
  u_xlat26 = (x_748 + 0.0001f);
  let x_751 : f32 = u_xlat26;
  u_xlat26 = (1.0f / x_751);
  let x_753 : f32 = u_xlat26;
  let x_755 : f32 = u_xlat18.x;
  u_xlat18.x = (x_753 * x_755);
  let x_758 : vec4<f32> = u_xlat2;
  let x_761 : vec4<f32> = x_33.x_SSAOParams;
  u_xlat3 = ((vec4<f32>(x_758.x, x_758.y, x_758.x, x_758.y) * vec4<f32>(x_761.z, x_761.z, x_761.z, x_761.z)) + vec4<f32>(2.082999945f, 4.867000103f, 4.165999889f, 9.734000206f));
  let x_770 : vec4<f32> = u_xlat3;
  u_xlat26 = dot(vec2<f32>(x_770.x, x_770.y), vec2<f32>(0.067110561f, 0.00583715f));
  let x_773 : f32 = u_xlat26;
  u_xlat26 = fract(x_773);
  let x_775 : f32 = u_xlat26;
  u_xlat26 = (x_775 * 52.982917786f);
  let x_777 : f32 = u_xlat26;
  u_xlat26 = fract(x_777);
  let x_779 : f32 = u_xlat26;
  let x_784 : vec2<f32> = (vec2<f32>(x_779, x_779) + vec2<f32>(0.33984375f, 0.76171875f));
  let x_785 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_784.x, x_784.y, x_785.z, x_785.w);
  let x_788 : f32 = u_xlat3.x;
  u_xlat26 = fract(x_788);
  let x_790 : f32 = u_xlat26;
  u_xlat5.z = ((x_790 * 2.0f) + -1.0f);
  let x_795 : f32 = u_xlat3.y;
  u_xlat26 = (x_795 * 6.283185482f);
  let x_798 : f32 = u_xlat5.z;
  let x_801 : f32 = u_xlat5.z;
  u_xlat3.x = ((-(x_798) * x_801) + 1.0f);
  let x_806 : f32 = u_xlat3.x;
  u_xlat3.x = sqrt(x_806);
  let x_810 : f32 = u_xlat26;
  u_xlat6 = sin(x_810);
  let x_813 : f32 = u_xlat26;
  u_xlat7 = cos(x_813);
  let x_816 : f32 = u_xlat3.x;
  let x_817 : f32 = u_xlat7;
  u_xlat5.x = (x_816 * x_817);
  let x_821 : f32 = u_xlat3.x;
  let x_822 : f32 = u_xlat6;
  u_xlat5.y = (x_821 * x_822);
  let x_825 : vec3<f32> = u_xlat5;
  u_xlat5 = (x_825 * vec3<f32>(0.408248305f, 0.408248305f, 0.408248305f));
  let x_829 : vec4<f32> = u_xlat1;
  let x_832 : vec3<f32> = u_xlat5;
  u_xlat26 = dot(-(vec3<f32>(x_829.x, x_829.y, x_829.z)), x_832);
  let x_834 : f32 = u_xlat26;
  u_xlatb26 = (x_834 >= 0.0f);
  let x_836 : bool = u_xlatb26;
  if (x_836) {
    let x_840 : vec3<f32> = u_xlat5;
    x_837 = -(x_840);
  } else {
    let x_843 : vec3<f32> = u_xlat5;
    x_837 = x_843;
  }
  let x_844 : vec3<f32> = x_837;
  u_xlat5 = x_844;
  let x_845 : vec3<f32> = u_xlat5;
  let x_847 : vec4<f32> = x_33.x_SSAOParams;
  let x_850 : vec3<f32> = u_xlat8;
  u_xlat5 = ((x_845 * vec3<f32>(x_847.y, x_847.y, x_847.y)) + x_850);
  let x_852 : vec3<f32> = u_xlat5;
  let x_855 : vec4<f32> = x_33.x_CameraViewProjections[0i][1i];
  let x_857 : vec2<f32> = (vec2<f32>(x_852.y, x_852.y) * vec2<f32>(x_855.x, x_855.y));
  let x_858 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_857.x, x_857.y, x_858.z, x_858.w);
  let x_861 : vec4<f32> = x_33.x_CameraViewProjections[0i][0i];
  let x_863 : vec3<f32> = u_xlat5;
  let x_866 : vec4<f32> = u_xlat3;
  let x_868 : vec2<f32> = ((vec2<f32>(x_861.x, x_861.y) * vec2<f32>(x_863.x, x_863.x)) + vec2<f32>(x_866.x, x_866.y));
  let x_869 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_868.x, x_868.y, x_869.z, x_869.w);
  let x_872 : vec4<f32> = x_33.x_CameraViewProjections[0i][2i];
  let x_874 : vec3<f32> = u_xlat5;
  let x_877 : vec4<f32> = u_xlat3;
  let x_879 : vec2<f32> = ((vec2<f32>(x_872.x, x_872.y) * vec2<f32>(x_874.z, x_874.z)) + vec2<f32>(x_877.x, x_877.y));
  let x_880 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_879.x, x_879.y, x_880.z, x_880.w);
  let x_882 : vec4<f32> = u_xlat4;
  let x_884 : vec3<f32> = u_xlat5;
  u_xlat26 = dot(vec3<f32>(x_882.x, x_882.y, x_882.z), x_884);
  let x_887 : f32 = u_xlat26;
  u_xlat28 = (1.0f / -(x_887));
  let x_890 : vec4<f32> = u_xlat3;
  let x_892 : f32 = u_xlat28;
  let x_895 : vec2<f32> = ((vec2<f32>(x_890.x, x_890.y) * vec2<f32>(x_892, x_892)) + vec2<f32>(1.0f, 1.0f));
  let x_896 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_895.x, x_895.y, x_896.z, x_896.w);
  let x_898 : vec4<f32> = u_xlat3;
  let x_900 : vec2<f32> = (vec2<f32>(x_898.x, x_898.y) * vec2<f32>(0.5f, 0.5f));
  let x_901 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_900.x, x_900.y, x_901.z, x_901.w);
  let x_903 : vec4<f32> = u_xlat3;
  let x_907 : vec2<f32> = clamp(vec2<f32>(x_903.x, x_903.y), vec2<f32>(0.0f, 0.0f), vec2<f32>(1.0f, 1.0f));
  let x_908 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_907.x, x_907.y, x_908.z, x_908.w);
  let x_913 : vec4<f32> = u_xlat3;
  let x_916 : f32 = x_33.x_GlobalMipBias.x;
  let x_917 : vec4<f32> = textureSampleBias(x_CameraDepthTexture, sampler_CameraDepthTexture, vec2<f32>(x_913.x, x_913.y), x_916);
  u_xlat28 = x_917.x;
  let x_920 : f32 = x_33.x_ZBufferParams.z;
  let x_921 : f32 = u_xlat28;
  let x_924 : f32 = x_33.x_ZBufferParams.w;
  u_xlat5.x = ((x_920 * x_921) + x_924);
  let x_928 : f32 = u_xlat5.x;
  u_xlat5.x = (1.0f / x_928);
  let x_931 : f32 = u_xlat26;
  let x_934 : f32 = u_xlat5.x;
  u_xlat26 = (-(x_931) + -(x_934));
  let x_937 : f32 = u_xlat26;
  let x_940 : f32 = x_33.x_SSAOParams.y;
  u_xlatb26 = (abs(x_937) < x_940);
  let x_942 : bool = u_xlatb26;
  u_xlat26 = select(0.0f, 1.0f, x_942);
  let x_945 : f32 = u_xlat28;
  u_xlatb28 = (0.00001f < x_945);
  let x_947 : bool = u_xlatb28;
  u_xlat28 = select(0.0f, 1.0f, x_947);
  let x_949 : f32 = u_xlat26;
  let x_950 : f32 = u_xlat28;
  u_xlat26 = (x_949 * x_950);
  let x_953 : f32 = u_xlat3.y;
  u_xlat11.x = (-(x_953) + 1.0f);
  let x_958 : f32 = u_xlat5.x;
  let x_960 : f32 = x_33.x_ProjectionParams2.x;
  u_xlat28 = (x_958 * x_960);
  let x_963 : vec4<f32> = x_33.x_CameraViewXExtent[0i];
  let x_965 : vec4<f32> = u_xlat3;
  let x_969 : vec4<f32> = x_33.x_CameraViewTopLeftCorner[0i];
  u_xlat5 = ((vec3<f32>(x_963.x, x_963.y, x_963.z) * vec3<f32>(x_965.x, x_965.x, x_965.x)) + vec3<f32>(x_969.x, x_969.y, x_969.z));
  let x_973 : vec4<f32> = x_33.x_CameraViewYExtent[0i];
  let x_975 : vec3<f32> = u_xlat11;
  let x_978 : vec3<f32> = u_xlat5;
  u_xlat5 = ((vec3<f32>(x_973.x, x_973.y, x_973.z) * vec3<f32>(x_975.x, x_975.x, x_975.x)) + x_978);
  let x_980 : vec3<f32> = u_xlat5;
  let x_981 : f32 = u_xlat28;
  let x_984 : vec3<f32> = u_xlat8;
  u_xlat5 = ((x_980 * vec3<f32>(x_981, x_981, x_981)) + -(x_984));
  let x_987 : vec3<f32> = u_xlat5;
  let x_988 : vec4<f32> = u_xlat1;
  u_xlat3.x = dot(x_987, vec3<f32>(x_988.x, x_988.y, x_988.z));
  let x_992 : f32 = u_xlat0;
  let x_996 : f32 = u_xlat3.x;
  u_xlat3.x = ((-(x_992) * 0.004f) + x_996);
  let x_1000 : f32 = u_xlat3.x;
  u_xlat3.x = max(x_1000, 0.0f);
  let x_1003 : vec3<f32> = u_xlat5;
  let x_1004 : vec3<f32> = u_xlat5;
  u_xlat11.x = dot(x_1003, x_1004);
  let x_1008 : f32 = u_xlat11.x;
  u_xlat11.x = (x_1008 + 0.0001f);
  let x_1012 : f32 = u_xlat11.x;
  u_xlat11.x = (1.0f / x_1012);
  let x_1016 : f32 = u_xlat11.x;
  let x_1018 : f32 = u_xlat3.x;
  u_xlat3.x = (x_1016 * x_1018);
  let x_1021 : f32 = u_xlat26;
  let x_1023 : f32 = u_xlat3.x;
  u_xlat26 = (x_1021 * x_1023);
  let x_1026 : f32 = u_xlat18.x;
  let x_1027 : f32 = u_xlat25;
  let x_1029 : f32 = u_xlat26;
  u_xlat25 = ((x_1026 * x_1027) + x_1029);
  let x_1031 : vec4<f32> = u_xlat3;
  u_xlat18.x = dot(vec2<f32>(x_1031.z, x_1031.w), vec2<f32>(0.067110561f, 0.00583715f));
  let x_1036 : f32 = u_xlat18.x;
  u_xlat18.x = fract(x_1036);
  let x_1040 : f32 = u_xlat18.x;
  u_xlat18.x = (x_1040 * 52.982917786f);
  let x_1044 : f32 = u_xlat18.x;
  u_xlat18.x = fract(x_1044);
  let x_1047 : vec2<f32> = u_xlat18;
  u_xlat18 = (vec2<f32>(x_1047.x, x_1047.x) + vec2<f32>(0.75390625f, 0.133333296f));
  let x_1054 : f32 = u_xlat18.x;
  u_xlat18.x = fract(x_1054);
  let x_1058 : f32 = u_xlat18.x;
  u_xlat3.z = ((x_1058 * 2.0f) + -1.0f);
  let x_1063 : f32 = u_xlat18.y;
  u_xlat18.x = (x_1063 * 6.283185482f);
  let x_1067 : f32 = u_xlat3.z;
  let x_1070 : f32 = u_xlat3.z;
  u_xlat26 = ((-(x_1067) * x_1070) + 1.0f);
  let x_1073 : f32 = u_xlat26;
  u_xlat26 = sqrt(x_1073);
  let x_1076 : f32 = u_xlat18.x;
  u_xlat5.x = sin(x_1076);
  let x_1080 : f32 = u_xlat18.x;
  u_xlat6 = cos(x_1080);
  let x_1082 : f32 = u_xlat26;
  let x_1083 : f32 = u_xlat6;
  u_xlat3.x = (x_1082 * x_1083);
  let x_1086 : f32 = u_xlat26;
  let x_1088 : f32 = u_xlat5.x;
  u_xlat3.y = (x_1086 * x_1088);
  let x_1091 : vec4<f32> = u_xlat3;
  let x_1094 : vec3<f32> = (vec3<f32>(x_1091.x, x_1091.y, x_1091.z) * vec3<f32>(0.5f, 0.5f, 0.5f));
  let x_1095 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_1094.x, x_1094.y, x_1094.z, x_1095.w);
  let x_1097 : vec4<f32> = u_xlat1;
  let x_1100 : vec4<f32> = u_xlat3;
  u_xlat18.x = dot(-(vec3<f32>(x_1097.x, x_1097.y, x_1097.z)), vec3<f32>(x_1100.x, x_1100.y, x_1100.z));
  let x_1106 : f32 = u_xlat18.x;
  u_xlatb18 = (x_1106 >= 0.0f);
  let x_1108 : bool = u_xlatb18;
  if (x_1108) {
    let x_1112 : vec4<f32> = u_xlat3;
    x_1109 = -(vec3<f32>(x_1112.x, x_1112.y, x_1112.z));
  } else {
    let x_1116 : vec4<f32> = u_xlat3;
    x_1109 = vec3<f32>(x_1116.x, x_1116.y, x_1116.z);
  }
  let x_1118 : vec3<f32> = x_1109;
  let x_1119 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_1118.x, x_1118.y, x_1118.z, x_1119.w);
  let x_1121 : vec4<f32> = u_xlat3;
  let x_1124 : vec4<f32> = x_33.x_SSAOParams;
  let x_1127 : vec3<f32> = u_xlat8;
  let x_1128 : vec3<f32> = ((vec3<f32>(x_1121.x, x_1121.y, x_1121.z) * vec3<f32>(x_1124.y, x_1124.y, x_1124.y)) + x_1127);
  let x_1129 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_1128.x, x_1128.y, x_1128.z, x_1129.w);
  let x_1131 : vec4<f32> = u_xlat3;
  let x_1134 : vec4<f32> = x_33.x_CameraViewProjections[0i][1i];
  u_xlat18 = (vec2<f32>(x_1131.y, x_1131.y) * vec2<f32>(x_1134.x, x_1134.y));
  let x_1138 : vec4<f32> = x_33.x_CameraViewProjections[0i][0i];
  let x_1140 : vec4<f32> = u_xlat3;
  let x_1143 : vec2<f32> = u_xlat18;
  u_xlat18 = ((vec2<f32>(x_1138.x, x_1138.y) * vec2<f32>(x_1140.x, x_1140.x)) + x_1143);
  let x_1146 : vec4<f32> = x_33.x_CameraViewProjections[0i][2i];
  let x_1148 : vec4<f32> = u_xlat3;
  let x_1151 : vec2<f32> = u_xlat18;
  u_xlat18 = ((vec2<f32>(x_1146.x, x_1146.y) * vec2<f32>(x_1148.z, x_1148.z)) + x_1151);
  let x_1153 : vec4<f32> = u_xlat4;
  let x_1155 : vec4<f32> = u_xlat3;
  u_xlat3.x = dot(vec3<f32>(x_1153.x, x_1153.y, x_1153.z), vec3<f32>(x_1155.x, x_1155.y, x_1155.z));
  let x_1160 : f32 = u_xlat3.x;
  u_xlat11.x = (1.0f / -(x_1160));
  let x_1164 : vec2<f32> = u_xlat18;
  let x_1165 : vec3<f32> = u_xlat11;
  u_xlat18 = ((x_1164 * vec2<f32>(x_1165.x, x_1165.x)) + vec2<f32>(1.0f, 1.0f));
  let x_1169 : vec2<f32> = u_xlat18;
  u_xlat18 = (x_1169 * vec2<f32>(0.5f, 0.5f));
  let x_1171 : vec2<f32> = u_xlat18;
  u_xlat18 = clamp(x_1171, vec2<f32>(0.0f, 0.0f), vec2<f32>(1.0f, 1.0f));
  let x_1178 : vec2<f32> = u_xlat18;
  let x_1180 : f32 = x_33.x_GlobalMipBias.x;
  let x_1181 : vec4<f32> = textureSampleBias(x_CameraDepthTexture, sampler_CameraDepthTexture, x_1178, x_1180);
  u_xlat11.x = x_1181.x;
  let x_1186 : f32 = x_33.x_ZBufferParams.z;
  let x_1188 : f32 = u_xlat11.x;
  let x_1191 : f32 = x_33.x_ZBufferParams.w;
  u_xlat19 = ((x_1186 * x_1188) + x_1191);
  let x_1193 : f32 = u_xlat19;
  u_xlat19 = (1.0f / x_1193);
  let x_1195 : f32 = u_xlat19;
  let x_1198 : f32 = u_xlat3.x;
  u_xlat3.x = (-(x_1195) + -(x_1198));
  let x_1203 : f32 = u_xlat3.x;
  let x_1206 : f32 = x_33.x_SSAOParams.y;
  u_xlatb3.x = (abs(x_1203) < x_1206);
  let x_1210 : f32 = u_xlat11.x;
  u_xlatb3.y = (0.00001f < x_1210);
  let x_1214 : bool = u_xlatb3.x;
  u_xlat3.x = select(0.0f, 1.0f, x_1214);
  let x_1218 : bool = u_xlatb3.y;
  u_xlat3.y = select(0.0f, 1.0f, x_1218);
  let x_1222 : f32 = u_xlat3.y;
  let x_1224 : f32 = u_xlat3.x;
  u_xlat3.x = (x_1222 * x_1224);
  let x_1228 : f32 = u_xlat18.y;
  u_xlat26 = (-(x_1228) + 1.0f);
  let x_1231 : f32 = u_xlat19;
  let x_1233 : f32 = x_33.x_ProjectionParams2.x;
  u_xlat11.x = (x_1231 * x_1233);
  let x_1237 : vec4<f32> = x_33.x_CameraViewXExtent[0i];
  let x_1239 : vec2<f32> = u_xlat18;
  let x_1243 : vec4<f32> = x_33.x_CameraViewTopLeftCorner[0i];
  u_xlat5 = ((vec3<f32>(x_1237.x, x_1237.y, x_1237.z) * vec3<f32>(x_1239.x, x_1239.x, x_1239.x)) + vec3<f32>(x_1243.x, x_1243.y, x_1243.z));
  let x_1247 : vec4<f32> = x_33.x_CameraViewYExtent[0i];
  let x_1249 : f32 = u_xlat26;
  let x_1252 : vec3<f32> = u_xlat5;
  u_xlat5 = ((vec3<f32>(x_1247.x, x_1247.y, x_1247.z) * vec3<f32>(x_1249, x_1249, x_1249)) + x_1252);
  let x_1254 : vec3<f32> = u_xlat5;
  let x_1255 : vec3<f32> = u_xlat11;
  let x_1258 : vec3<f32> = u_xlat8;
  u_xlat11 = ((x_1254 * vec3<f32>(x_1255.x, x_1255.x, x_1255.x)) + -(x_1258));
  let x_1261 : vec3<f32> = u_xlat11;
  let x_1262 : vec4<f32> = u_xlat1;
  u_xlat18.x = dot(x_1261, vec3<f32>(x_1262.x, x_1262.y, x_1262.z));
  let x_1266 : f32 = u_xlat0;
  let x_1270 : f32 = u_xlat18.x;
  u_xlat18.x = ((-(x_1266) * 0.004f) + x_1270);
  let x_1274 : f32 = u_xlat18.x;
  u_xlat18.x = max(x_1274, 0.0f);
  let x_1277 : vec3<f32> = u_xlat11;
  let x_1278 : vec3<f32> = u_xlat11;
  u_xlat26 = dot(x_1277, x_1278);
  let x_1280 : f32 = u_xlat26;
  u_xlat26 = (x_1280 + 0.0001f);
  let x_1282 : f32 = u_xlat26;
  u_xlat26 = (1.0f / x_1282);
  let x_1284 : f32 = u_xlat26;
  let x_1286 : f32 = u_xlat18.x;
  u_xlat18.x = (x_1284 * x_1286);
  let x_1290 : f32 = u_xlat18.x;
  let x_1292 : f32 = u_xlat3.x;
  let x_1294 : f32 = u_xlat25;
  u_xlat25 = ((x_1290 * x_1292) + x_1294);
  let x_1296 : vec4<f32> = u_xlat2;
  let x_1299 : vec4<f32> = x_33.x_SSAOParams;
  u_xlat3 = ((vec4<f32>(x_1296.x, x_1296.y, x_1296.x, x_1296.y) * vec4<f32>(x_1299.z, x_1299.z, x_1299.z, x_1299.z)) + vec4<f32>(6.248999596f, 14.600999832f, 8.331999779f, 19.468000412f));
  let x_1308 : vec4<f32> = u_xlat3;
  u_xlat18.x = dot(vec2<f32>(x_1308.x, x_1308.y), vec2<f32>(0.067110561f, 0.00583715f));
  let x_1313 : f32 = u_xlat18.x;
  u_xlat18.x = fract(x_1313);
  let x_1317 : f32 = u_xlat18.x;
  u_xlat18.x = (x_1317 * 52.982917786f);
  let x_1321 : f32 = u_xlat18.x;
  u_xlat18.x = fract(x_1321);
  let x_1324 : vec2<f32> = u_xlat18;
  u_xlat18 = (vec2<f32>(x_1324.x, x_1324.x) + vec2<f32>(0.56640625f, 0.015625f));
  let x_1331 : f32 = u_xlat18.x;
  u_xlat18.x = fract(x_1331);
  let x_1335 : f32 = u_xlat18.x;
  u_xlat5.z = ((x_1335 * 2.0f) + -1.0f);
  let x_1340 : f32 = u_xlat18.y;
  u_xlat18.x = (x_1340 * 6.283185482f);
  let x_1344 : f32 = u_xlat5.z;
  let x_1347 : f32 = u_xlat5.z;
  u_xlat26 = ((-(x_1344) * x_1347) + 1.0f);
  let x_1350 : f32 = u_xlat26;
  u_xlat26 = sqrt(x_1350);
  let x_1353 : f32 = u_xlat18.x;
  u_xlat3.x = sin(x_1353);
  let x_1357 : f32 = u_xlat18.x;
  u_xlat6 = cos(x_1357);
  let x_1359 : f32 = u_xlat26;
  let x_1360 : f32 = u_xlat6;
  u_xlat5.x = (x_1359 * x_1360);
  let x_1363 : f32 = u_xlat26;
  let x_1365 : f32 = u_xlat3.x;
  u_xlat5.y = (x_1363 * x_1365);
  let x_1368 : vec3<f32> = u_xlat5;
  u_xlat5 = (x_1368 * vec3<f32>(0.577350259f, 0.577350259f, 0.577350259f));
  let x_1372 : vec4<f32> = u_xlat1;
  let x_1375 : vec3<f32> = u_xlat5;
  u_xlat18.x = dot(-(vec3<f32>(x_1372.x, x_1372.y, x_1372.z)), x_1375);
  let x_1379 : f32 = u_xlat18.x;
  u_xlatb18 = (x_1379 >= 0.0f);
  let x_1381 : bool = u_xlatb18;
  if (x_1381) {
    let x_1385 : vec3<f32> = u_xlat5;
    x_1382 = -(x_1385);
  } else {
    let x_1388 : vec3<f32> = u_xlat5;
    x_1382 = x_1388;
  }
  let x_1389 : vec3<f32> = x_1382;
  u_xlat5 = x_1389;
  let x_1390 : vec3<f32> = u_xlat5;
  let x_1392 : vec4<f32> = x_33.x_SSAOParams;
  let x_1395 : vec3<f32> = u_xlat8;
  u_xlat5 = ((x_1390 * vec3<f32>(x_1392.y, x_1392.y, x_1392.y)) + x_1395);
  let x_1397 : vec3<f32> = u_xlat5;
  let x_1400 : vec4<f32> = x_33.x_CameraViewProjections[0i][1i];
  u_xlat18 = (vec2<f32>(x_1397.y, x_1397.y) * vec2<f32>(x_1400.x, x_1400.y));
  let x_1404 : vec4<f32> = x_33.x_CameraViewProjections[0i][0i];
  let x_1406 : vec3<f32> = u_xlat5;
  let x_1409 : vec2<f32> = u_xlat18;
  u_xlat18 = ((vec2<f32>(x_1404.x, x_1404.y) * vec2<f32>(x_1406.x, x_1406.x)) + x_1409);
  let x_1412 : vec4<f32> = x_33.x_CameraViewProjections[0i][2i];
  let x_1414 : vec3<f32> = u_xlat5;
  let x_1417 : vec2<f32> = u_xlat18;
  u_xlat18 = ((vec2<f32>(x_1412.x, x_1412.y) * vec2<f32>(x_1414.z, x_1414.z)) + x_1417);
  let x_1419 : vec4<f32> = u_xlat4;
  let x_1421 : vec3<f32> = u_xlat5;
  u_xlat3.x = dot(vec3<f32>(x_1419.x, x_1419.y, x_1419.z), x_1421);
  let x_1425 : f32 = u_xlat3.x;
  u_xlat11.x = (1.0f / -(x_1425));
  let x_1429 : vec2<f32> = u_xlat18;
  let x_1430 : vec3<f32> = u_xlat11;
  u_xlat18 = ((x_1429 * vec2<f32>(x_1430.x, x_1430.x)) + vec2<f32>(1.0f, 1.0f));
  let x_1434 : vec2<f32> = u_xlat18;
  u_xlat18 = (x_1434 * vec2<f32>(0.5f, 0.5f));
  let x_1436 : vec2<f32> = u_xlat18;
  u_xlat18 = clamp(x_1436, vec2<f32>(0.0f, 0.0f), vec2<f32>(1.0f, 1.0f));
  let x_1443 : vec2<f32> = u_xlat18;
  let x_1445 : f32 = x_33.x_GlobalMipBias.x;
  let x_1446 : vec4<f32> = textureSampleBias(x_CameraDepthTexture, sampler_CameraDepthTexture, x_1443, x_1445);
  u_xlat11.x = x_1446.x;
  let x_1450 : f32 = x_33.x_ZBufferParams.z;
  let x_1452 : f32 = u_xlat11.x;
  let x_1455 : f32 = x_33.x_ZBufferParams.w;
  u_xlat28 = ((x_1450 * x_1452) + x_1455);
  let x_1457 : f32 = u_xlat28;
  u_xlat28 = (1.0f / x_1457);
  let x_1460 : f32 = u_xlat3.x;
  let x_1462 : f32 = u_xlat28;
  u_xlat3.x = (-(x_1460) + -(x_1462));
  let x_1467 : f32 = u_xlat3.x;
  let x_1470 : f32 = x_33.x_SSAOParams.y;
  u_xlatb3.x = (abs(x_1467) < x_1470);
  let x_1474 : f32 = u_xlat11.x;
  u_xlatb3.y = (0.00001f < x_1474);
  let x_1478 : bool = u_xlatb3.x;
  u_xlat3.x = select(0.0f, 1.0f, x_1478);
  let x_1482 : bool = u_xlatb3.y;
  u_xlat3.y = select(0.0f, 1.0f, x_1482);
  let x_1486 : f32 = u_xlat3.y;
  let x_1488 : f32 = u_xlat3.x;
  u_xlat3.x = (x_1486 * x_1488);
  let x_1492 : f32 = u_xlat18.y;
  u_xlat26 = (-(x_1492) + 1.0f);
  let x_1495 : f32 = u_xlat28;
  let x_1497 : f32 = x_33.x_ProjectionParams2.x;
  u_xlat11.x = (x_1495 * x_1497);
  let x_1501 : vec4<f32> = x_33.x_CameraViewXExtent[0i];
  let x_1503 : vec2<f32> = u_xlat18;
  let x_1507 : vec4<f32> = x_33.x_CameraViewTopLeftCorner[0i];
  u_xlat5 = ((vec3<f32>(x_1501.x, x_1501.y, x_1501.z) * vec3<f32>(x_1503.x, x_1503.x, x_1503.x)) + vec3<f32>(x_1507.x, x_1507.y, x_1507.z));
  let x_1511 : vec4<f32> = x_33.x_CameraViewYExtent[0i];
  let x_1513 : f32 = u_xlat26;
  let x_1516 : vec3<f32> = u_xlat5;
  u_xlat5 = ((vec3<f32>(x_1511.x, x_1511.y, x_1511.z) * vec3<f32>(x_1513, x_1513, x_1513)) + x_1516);
  let x_1518 : vec3<f32> = u_xlat5;
  let x_1519 : vec3<f32> = u_xlat11;
  let x_1522 : vec3<f32> = u_xlat8;
  u_xlat5 = ((x_1518 * vec3<f32>(x_1519.x, x_1519.x, x_1519.x)) + -(x_1522));
  let x_1525 : vec3<f32> = u_xlat5;
  let x_1526 : vec4<f32> = u_xlat1;
  u_xlat18.x = dot(x_1525, vec3<f32>(x_1526.x, x_1526.y, x_1526.z));
  let x_1530 : f32 = u_xlat0;
  let x_1534 : f32 = u_xlat18.x;
  u_xlat18.x = ((-(x_1530) * 0.004f) + x_1534);
  let x_1538 : f32 = u_xlat18.x;
  u_xlat18.x = max(x_1538, 0.0f);
  let x_1541 : vec3<f32> = u_xlat5;
  let x_1542 : vec3<f32> = u_xlat5;
  u_xlat26 = dot(x_1541, x_1542);
  let x_1544 : f32 = u_xlat26;
  u_xlat26 = (x_1544 + 0.0001f);
  let x_1546 : f32 = u_xlat26;
  u_xlat26 = (1.0f / x_1546);
  let x_1548 : f32 = u_xlat26;
  let x_1550 : f32 = u_xlat18.x;
  u_xlat18.x = (x_1548 * x_1550);
  let x_1554 : f32 = u_xlat18.x;
  let x_1556 : f32 = u_xlat3.x;
  let x_1558 : f32 = u_xlat25;
  u_xlat25 = ((x_1554 * x_1556) + x_1558);
  let x_1560 : vec4<f32> = u_xlat3;
  u_xlat18.x = dot(vec2<f32>(x_1560.z, x_1560.w), vec2<f32>(0.067110561f, 0.00583715f));
  let x_1565 : f32 = u_xlat18.x;
  u_xlat18.x = fract(x_1565);
  let x_1569 : f32 = u_xlat18.x;
  u_xlat18.x = (x_1569 * 52.982917786f);
  let x_1573 : f32 = u_xlat18.x;
  u_xlat18.x = fract(x_1573);
  let x_1577 : f32 = u_xlat18.x;
  u_xlat26 = (x_1577 + 0.984375f);
  let x_1580 : f32 = u_xlat26;
  u_xlat26 = fract(x_1580);
  let x_1582 : f32 = u_xlat26;
  u_xlat3.z = ((x_1582 * 2.0f) + -1.0f);
  let x_1587 : f32 = u_xlat18.x;
  u_xlat18.x = (x_1587 * 6.283185482f);
  let x_1591 : f32 = u_xlat3.z;
  let x_1594 : f32 = u_xlat3.z;
  u_xlat26 = ((-(x_1591) * x_1594) + 1.0f);
  let x_1597 : f32 = u_xlat26;
  u_xlat26 = sqrt(x_1597);
  let x_1600 : f32 = u_xlat18.x;
  u_xlat5.x = sin(x_1600);
  let x_1604 : f32 = u_xlat18.x;
  u_xlat6 = cos(x_1604);
  let x_1606 : f32 = u_xlat26;
  let x_1607 : f32 = u_xlat6;
  u_xlat3.x = (x_1606 * x_1607);
  let x_1610 : f32 = u_xlat26;
  let x_1612 : f32 = u_xlat5.x;
  u_xlat3.y = (x_1610 * x_1612);
  let x_1615 : vec4<f32> = u_xlat3;
  let x_1619 : vec3<f32> = (vec3<f32>(x_1615.x, x_1615.y, x_1615.z) * vec3<f32>(0.645497262f, 0.645497262f, 0.645497262f));
  let x_1620 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_1619.x, x_1619.y, x_1619.z, x_1620.w);
  let x_1622 : vec4<f32> = u_xlat1;
  let x_1625 : vec4<f32> = u_xlat3;
  u_xlat18.x = dot(-(vec3<f32>(x_1622.x, x_1622.y, x_1622.z)), vec3<f32>(x_1625.x, x_1625.y, x_1625.z));
  let x_1630 : f32 = u_xlat18.x;
  u_xlatb18 = (x_1630 >= 0.0f);
  let x_1632 : bool = u_xlatb18;
  if (x_1632) {
    let x_1636 : vec4<f32> = u_xlat3;
    x_1633 = -(vec3<f32>(x_1636.x, x_1636.y, x_1636.z));
  } else {
    let x_1640 : vec4<f32> = u_xlat3;
    x_1633 = vec3<f32>(x_1640.x, x_1640.y, x_1640.z);
  }
  let x_1642 : vec3<f32> = x_1633;
  let x_1643 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_1642.x, x_1642.y, x_1642.z, x_1643.w);
  let x_1645 : vec4<f32> = u_xlat3;
  let x_1648 : vec4<f32> = x_33.x_SSAOParams;
  let x_1651 : vec3<f32> = u_xlat8;
  let x_1652 : vec3<f32> = ((vec3<f32>(x_1645.x, x_1645.y, x_1645.z) * vec3<f32>(x_1648.y, x_1648.y, x_1648.y)) + x_1651);
  let x_1653 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_1652.x, x_1652.y, x_1652.z, x_1653.w);
  let x_1655 : vec4<f32> = u_xlat3;
  let x_1658 : vec4<f32> = x_33.x_CameraViewProjections[0i][1i];
  u_xlat18 = (vec2<f32>(x_1655.y, x_1655.y) * vec2<f32>(x_1658.x, x_1658.y));
  let x_1662 : vec4<f32> = x_33.x_CameraViewProjections[0i][0i];
  let x_1664 : vec4<f32> = u_xlat3;
  let x_1667 : vec2<f32> = u_xlat18;
  u_xlat18 = ((vec2<f32>(x_1662.x, x_1662.y) * vec2<f32>(x_1664.x, x_1664.x)) + x_1667);
  let x_1670 : vec4<f32> = x_33.x_CameraViewProjections[0i][2i];
  let x_1672 : vec4<f32> = u_xlat3;
  let x_1675 : vec2<f32> = u_xlat18;
  u_xlat18 = ((vec2<f32>(x_1670.x, x_1670.y) * vec2<f32>(x_1672.z, x_1672.z)) + x_1675);
  let x_1677 : vec4<f32> = u_xlat4;
  let x_1679 : vec4<f32> = u_xlat3;
  u_xlat3.x = dot(vec3<f32>(x_1677.x, x_1677.y, x_1677.z), vec3<f32>(x_1679.x, x_1679.y, x_1679.z));
  let x_1684 : f32 = u_xlat3.x;
  u_xlat11.x = (1.0f / -(x_1684));
  let x_1688 : vec2<f32> = u_xlat18;
  let x_1689 : vec3<f32> = u_xlat11;
  u_xlat18 = ((x_1688 * vec2<f32>(x_1689.x, x_1689.x)) + vec2<f32>(1.0f, 1.0f));
  let x_1693 : vec2<f32> = u_xlat18;
  u_xlat18 = (x_1693 * vec2<f32>(0.5f, 0.5f));
  let x_1695 : vec2<f32> = u_xlat18;
  u_xlat18 = clamp(x_1695, vec2<f32>(0.0f, 0.0f), vec2<f32>(1.0f, 1.0f));
  let x_1702 : vec2<f32> = u_xlat18;
  let x_1704 : f32 = x_33.x_GlobalMipBias.x;
  let x_1705 : vec4<f32> = textureSampleBias(x_CameraDepthTexture, sampler_CameraDepthTexture, x_1702, x_1704);
  u_xlat11.x = x_1705.x;
  let x_1709 : f32 = x_33.x_ZBufferParams.z;
  let x_1711 : f32 = u_xlat11.x;
  let x_1714 : f32 = x_33.x_ZBufferParams.w;
  u_xlat19 = ((x_1709 * x_1711) + x_1714);
  let x_1716 : f32 = u_xlat19;
  u_xlat19 = (1.0f / x_1716);
  let x_1718 : f32 = u_xlat19;
  let x_1721 : f32 = u_xlat3.x;
  u_xlat3.x = (-(x_1718) + -(x_1721));
  let x_1726 : f32 = u_xlat3.x;
  let x_1729 : f32 = x_33.x_SSAOParams.y;
  u_xlatb3.x = (abs(x_1726) < x_1729);
  let x_1733 : f32 = u_xlat11.x;
  u_xlatb3.y = (0.00001f < x_1733);
  let x_1737 : bool = u_xlatb3.x;
  u_xlat3.x = select(0.0f, 1.0f, x_1737);
  let x_1741 : bool = u_xlatb3.y;
  u_xlat3.y = select(0.0f, 1.0f, x_1741);
  let x_1745 : f32 = u_xlat3.y;
  let x_1747 : f32 = u_xlat3.x;
  u_xlat3.x = (x_1745 * x_1747);
  let x_1751 : f32 = u_xlat18.y;
  u_xlat26 = (-(x_1751) + 1.0f);
  let x_1754 : f32 = u_xlat19;
  let x_1756 : f32 = x_33.x_ProjectionParams2.x;
  u_xlat11.x = (x_1754 * x_1756);
  let x_1760 : vec4<f32> = x_33.x_CameraViewXExtent[0i];
  let x_1762 : vec2<f32> = u_xlat18;
  let x_1766 : vec4<f32> = x_33.x_CameraViewTopLeftCorner[0i];
  u_xlat5 = ((vec3<f32>(x_1760.x, x_1760.y, x_1760.z) * vec3<f32>(x_1762.x, x_1762.x, x_1762.x)) + vec3<f32>(x_1766.x, x_1766.y, x_1766.z));
  let x_1770 : vec4<f32> = x_33.x_CameraViewYExtent[0i];
  let x_1772 : f32 = u_xlat26;
  let x_1775 : vec3<f32> = u_xlat5;
  u_xlat5 = ((vec3<f32>(x_1770.x, x_1770.y, x_1770.z) * vec3<f32>(x_1772, x_1772, x_1772)) + x_1775);
  let x_1777 : vec3<f32> = u_xlat5;
  let x_1778 : vec3<f32> = u_xlat11;
  let x_1781 : vec3<f32> = u_xlat8;
  u_xlat11 = ((x_1777 * vec3<f32>(x_1778.x, x_1778.x, x_1778.x)) + -(x_1781));
  let x_1784 : vec3<f32> = u_xlat11;
  let x_1785 : vec4<f32> = u_xlat1;
  u_xlat18.x = dot(x_1784, vec3<f32>(x_1785.x, x_1785.y, x_1785.z));
  let x_1789 : f32 = u_xlat0;
  let x_1793 : f32 = u_xlat18.x;
  u_xlat18.x = ((-(x_1789) * 0.004f) + x_1793);
  let x_1797 : f32 = u_xlat18.x;
  u_xlat18.x = max(x_1797, 0.0f);
  let x_1800 : vec3<f32> = u_xlat11;
  let x_1801 : vec3<f32> = u_xlat11;
  u_xlat26 = dot(x_1800, x_1801);
  let x_1803 : f32 = u_xlat26;
  u_xlat26 = (x_1803 + 0.0001f);
  let x_1805 : f32 = u_xlat26;
  u_xlat26 = (1.0f / x_1805);
  let x_1807 : f32 = u_xlat26;
  let x_1809 : f32 = u_xlat18.x;
  u_xlat18.x = (x_1807 * x_1809);
  let x_1813 : f32 = u_xlat18.x;
  let x_1815 : f32 = u_xlat3.x;
  let x_1817 : f32 = u_xlat25;
  u_xlat25 = ((x_1813 * x_1815) + x_1817);
  let x_1819 : vec4<f32> = u_xlat2;
  let x_1822 : vec4<f32> = x_33.x_SSAOParams;
  u_xlat3 = ((vec4<f32>(x_1819.x, x_1819.y, x_1819.x, x_1819.y) * vec4<f32>(x_1822.z, x_1822.z, x_1822.z, x_1822.z)) + vec4<f32>(10.414999962f, 24.335000992f, 12.497999191f, 29.201999664f));
  let x_1831 : vec4<f32> = u_xlat3;
  u_xlat18.x = dot(vec2<f32>(x_1831.x, x_1831.y), vec2<f32>(0.067110561f, 0.00583715f));
  let x_1836 : f32 = u_xlat18.x;
  u_xlat18.x = fract(x_1836);
  let x_1840 : f32 = u_xlat18.x;
  u_xlat18.x = (x_1840 * 52.982917786f);
  let x_1844 : f32 = u_xlat18.x;
  u_xlat18.x = fract(x_1844);
  let x_1847 : vec2<f32> = u_xlat18;
  u_xlat18 = (vec2<f32>(x_1847.x, x_1847.x) + vec2<f32>(0.07421875f, 0.10546875f));
  let x_1854 : f32 = u_xlat18.x;
  u_xlat18.x = fract(x_1854);
  let x_1858 : f32 = u_xlat18.x;
  u_xlat5.z = ((x_1858 * 2.0f) + -1.0f);
  let x_1863 : f32 = u_xlat18.y;
  u_xlat18.x = (x_1863 * 6.283185482f);
  let x_1867 : f32 = u_xlat5.z;
  let x_1870 : f32 = u_xlat5.z;
  u_xlat26 = ((-(x_1867) * x_1870) + 1.0f);
  let x_1873 : f32 = u_xlat26;
  u_xlat26 = sqrt(x_1873);
  let x_1876 : f32 = u_xlat18.x;
  u_xlat3.x = sin(x_1876);
  let x_1880 : f32 = u_xlat18.x;
  u_xlat6 = cos(x_1880);
  let x_1882 : f32 = u_xlat26;
  let x_1883 : f32 = u_xlat6;
  u_xlat5.x = (x_1882 * x_1883);
  let x_1886 : f32 = u_xlat26;
  let x_1888 : f32 = u_xlat3.x;
  u_xlat5.y = (x_1886 * x_1888);
  let x_1891 : vec3<f32> = u_xlat5;
  u_xlat5 = (x_1891 * vec3<f32>(0.707106769f, 0.707106769f, 0.707106769f));
  let x_1895 : vec4<f32> = u_xlat1;
  let x_1898 : vec3<f32> = u_xlat5;
  u_xlat18.x = dot(-(vec3<f32>(x_1895.x, x_1895.y, x_1895.z)), x_1898);
  let x_1902 : f32 = u_xlat18.x;
  u_xlatb18 = (x_1902 >= 0.0f);
  let x_1904 : bool = u_xlatb18;
  if (x_1904) {
    let x_1908 : vec3<f32> = u_xlat5;
    x_1905 = -(x_1908);
  } else {
    let x_1911 : vec3<f32> = u_xlat5;
    x_1905 = x_1911;
  }
  let x_1912 : vec3<f32> = x_1905;
  u_xlat5 = x_1912;
  let x_1913 : vec3<f32> = u_xlat5;
  let x_1915 : vec4<f32> = x_33.x_SSAOParams;
  let x_1918 : vec3<f32> = u_xlat8;
  u_xlat5 = ((x_1913 * vec3<f32>(x_1915.y, x_1915.y, x_1915.y)) + x_1918);
  let x_1920 : vec3<f32> = u_xlat5;
  let x_1923 : vec4<f32> = x_33.x_CameraViewProjections[0i][1i];
  u_xlat18 = (vec2<f32>(x_1920.y, x_1920.y) * vec2<f32>(x_1923.x, x_1923.y));
  let x_1927 : vec4<f32> = x_33.x_CameraViewProjections[0i][0i];
  let x_1929 : vec3<f32> = u_xlat5;
  let x_1932 : vec2<f32> = u_xlat18;
  u_xlat18 = ((vec2<f32>(x_1927.x, x_1927.y) * vec2<f32>(x_1929.x, x_1929.x)) + x_1932);
  let x_1935 : vec4<f32> = x_33.x_CameraViewProjections[0i][2i];
  let x_1937 : vec3<f32> = u_xlat5;
  let x_1940 : vec2<f32> = u_xlat18;
  u_xlat18 = ((vec2<f32>(x_1935.x, x_1935.y) * vec2<f32>(x_1937.z, x_1937.z)) + x_1940);
  let x_1942 : vec4<f32> = u_xlat4;
  let x_1944 : vec3<f32> = u_xlat5;
  u_xlat3.x = dot(vec3<f32>(x_1942.x, x_1942.y, x_1942.z), x_1944);
  let x_1948 : f32 = u_xlat3.x;
  u_xlat11.x = (1.0f / -(x_1948));
  let x_1952 : vec2<f32> = u_xlat18;
  let x_1953 : vec3<f32> = u_xlat11;
  u_xlat18 = ((x_1952 * vec2<f32>(x_1953.x, x_1953.x)) + vec2<f32>(1.0f, 1.0f));
  let x_1957 : vec2<f32> = u_xlat18;
  u_xlat18 = (x_1957 * vec2<f32>(0.5f, 0.5f));
  let x_1959 : vec2<f32> = u_xlat18;
  u_xlat18 = clamp(x_1959, vec2<f32>(0.0f, 0.0f), vec2<f32>(1.0f, 1.0f));
  let x_1966 : vec2<f32> = u_xlat18;
  let x_1968 : f32 = x_33.x_GlobalMipBias.x;
  let x_1969 : vec4<f32> = textureSampleBias(x_CameraDepthTexture, sampler_CameraDepthTexture, x_1966, x_1968);
  u_xlat11.x = x_1969.x;
  let x_1973 : f32 = x_33.x_ZBufferParams.z;
  let x_1975 : f32 = u_xlat11.x;
  let x_1978 : f32 = x_33.x_ZBufferParams.w;
  u_xlat28 = ((x_1973 * x_1975) + x_1978);
  let x_1980 : f32 = u_xlat28;
  u_xlat28 = (1.0f / x_1980);
  let x_1983 : f32 = u_xlat3.x;
  let x_1985 : f32 = u_xlat28;
  u_xlat3.x = (-(x_1983) + -(x_1985));
  let x_1990 : f32 = u_xlat3.x;
  let x_1993 : f32 = x_33.x_SSAOParams.y;
  u_xlatb3.x = (abs(x_1990) < x_1993);
  let x_1997 : f32 = u_xlat11.x;
  u_xlatb3.y = (0.00001f < x_1997);
  let x_2001 : bool = u_xlatb3.x;
  u_xlat3.x = select(0.0f, 1.0f, x_2001);
  let x_2005 : bool = u_xlatb3.y;
  u_xlat3.y = select(0.0f, 1.0f, x_2005);
  let x_2009 : f32 = u_xlat3.y;
  let x_2011 : f32 = u_xlat3.x;
  u_xlat3.x = (x_2009 * x_2011);
  let x_2015 : f32 = u_xlat18.y;
  u_xlat26 = (-(x_2015) + 1.0f);
  let x_2018 : f32 = u_xlat28;
  let x_2020 : f32 = x_33.x_ProjectionParams2.x;
  u_xlat11.x = (x_2018 * x_2020);
  let x_2024 : vec4<f32> = x_33.x_CameraViewXExtent[0i];
  let x_2026 : vec2<f32> = u_xlat18;
  let x_2030 : vec4<f32> = x_33.x_CameraViewTopLeftCorner[0i];
  u_xlat5 = ((vec3<f32>(x_2024.x, x_2024.y, x_2024.z) * vec3<f32>(x_2026.x, x_2026.x, x_2026.x)) + vec3<f32>(x_2030.x, x_2030.y, x_2030.z));
  let x_2034 : vec4<f32> = x_33.x_CameraViewYExtent[0i];
  let x_2036 : f32 = u_xlat26;
  let x_2039 : vec3<f32> = u_xlat5;
  u_xlat5 = ((vec3<f32>(x_2034.x, x_2034.y, x_2034.z) * vec3<f32>(x_2036, x_2036, x_2036)) + x_2039);
  let x_2041 : vec3<f32> = u_xlat5;
  let x_2042 : vec3<f32> = u_xlat11;
  let x_2045 : vec3<f32> = u_xlat8;
  u_xlat5 = ((x_2041 * vec3<f32>(x_2042.x, x_2042.x, x_2042.x)) + -(x_2045));
  let x_2048 : vec3<f32> = u_xlat5;
  let x_2049 : vec4<f32> = u_xlat1;
  u_xlat18.x = dot(x_2048, vec3<f32>(x_2049.x, x_2049.y, x_2049.z));
  let x_2053 : f32 = u_xlat0;
  let x_2057 : f32 = u_xlat18.x;
  u_xlat18.x = ((-(x_2053) * 0.004f) + x_2057);
  let x_2061 : f32 = u_xlat18.x;
  u_xlat18.x = max(x_2061, 0.0f);
  let x_2064 : vec3<f32> = u_xlat5;
  let x_2065 : vec3<f32> = u_xlat5;
  u_xlat26 = dot(x_2064, x_2065);
  let x_2067 : f32 = u_xlat26;
  u_xlat26 = (x_2067 + 0.0001f);
  let x_2069 : f32 = u_xlat26;
  u_xlat26 = (1.0f / x_2069);
  let x_2071 : f32 = u_xlat26;
  let x_2073 : f32 = u_xlat18.x;
  u_xlat18.x = (x_2071 * x_2073);
  let x_2077 : f32 = u_xlat18.x;
  let x_2079 : f32 = u_xlat3.x;
  let x_2081 : f32 = u_xlat25;
  u_xlat25 = ((x_2077 * x_2079) + x_2081);
  let x_2083 : vec4<f32> = u_xlat3;
  u_xlat18.x = dot(vec2<f32>(x_2083.z, x_2083.w), vec2<f32>(0.067110561f, 0.00583715f));
  let x_2088 : f32 = u_xlat18.x;
  u_xlat18.x = fract(x_2088);
  let x_2092 : f32 = u_xlat18.x;
  u_xlat18.x = (x_2092 * 52.982917786f);
  let x_2096 : f32 = u_xlat18.x;
  u_xlat18.x = fract(x_2096);
  let x_2099 : vec2<f32> = u_xlat18;
  u_xlat18 = (vec2<f32>(x_2099.x, x_2099.x) + vec2<f32>(0.23828125f, 0.640625f));
  let x_2106 : f32 = u_xlat18.x;
  u_xlat18.x = fract(x_2106);
  let x_2110 : f32 = u_xlat18.x;
  u_xlat3.z = ((x_2110 * 2.0f) + -1.0f);
  let x_2115 : f32 = u_xlat18.y;
  u_xlat18.x = (x_2115 * 6.283185482f);
  let x_2119 : f32 = u_xlat3.z;
  let x_2122 : f32 = u_xlat3.z;
  u_xlat26 = ((-(x_2119) * x_2122) + 1.0f);
  let x_2125 : f32 = u_xlat26;
  u_xlat26 = sqrt(x_2125);
  let x_2128 : f32 = u_xlat18.x;
  u_xlat5.x = sin(x_2128);
  let x_2132 : f32 = u_xlat18.x;
  u_xlat6 = cos(x_2132);
  let x_2134 : f32 = u_xlat26;
  let x_2135 : f32 = u_xlat6;
  u_xlat3.x = (x_2134 * x_2135);
  let x_2138 : f32 = u_xlat26;
  let x_2140 : f32 = u_xlat5.x;
  u_xlat3.y = (x_2138 * x_2140);
  let x_2143 : vec4<f32> = u_xlat3;
  let x_2147 : vec3<f32> = (vec3<f32>(x_2143.x, x_2143.y, x_2143.z) * vec3<f32>(0.763762653f, 0.763762653f, 0.763762653f));
  let x_2148 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_2147.x, x_2147.y, x_2147.z, x_2148.w);
  let x_2150 : vec4<f32> = u_xlat1;
  let x_2153 : vec4<f32> = u_xlat3;
  u_xlat18.x = dot(-(vec3<f32>(x_2150.x, x_2150.y, x_2150.z)), vec3<f32>(x_2153.x, x_2153.y, x_2153.z));
  let x_2158 : f32 = u_xlat18.x;
  u_xlatb18 = (x_2158 >= 0.0f);
  let x_2160 : bool = u_xlatb18;
  if (x_2160) {
    let x_2164 : vec4<f32> = u_xlat3;
    x_2161 = -(vec3<f32>(x_2164.x, x_2164.y, x_2164.z));
  } else {
    let x_2168 : vec4<f32> = u_xlat3;
    x_2161 = vec3<f32>(x_2168.x, x_2168.y, x_2168.z);
  }
  let x_2170 : vec3<f32> = x_2161;
  let x_2171 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_2170.x, x_2170.y, x_2170.z, x_2171.w);
  let x_2173 : vec4<f32> = u_xlat3;
  let x_2176 : vec4<f32> = x_33.x_SSAOParams;
  let x_2179 : vec3<f32> = u_xlat8;
  let x_2180 : vec3<f32> = ((vec3<f32>(x_2173.x, x_2173.y, x_2173.z) * vec3<f32>(x_2176.y, x_2176.y, x_2176.y)) + x_2179);
  let x_2181 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_2180.x, x_2180.y, x_2180.z, x_2181.w);
  let x_2183 : vec4<f32> = u_xlat3;
  let x_2186 : vec4<f32> = x_33.x_CameraViewProjections[0i][1i];
  u_xlat18 = (vec2<f32>(x_2183.y, x_2183.y) * vec2<f32>(x_2186.x, x_2186.y));
  let x_2190 : vec4<f32> = x_33.x_CameraViewProjections[0i][0i];
  let x_2192 : vec4<f32> = u_xlat3;
  let x_2195 : vec2<f32> = u_xlat18;
  u_xlat18 = ((vec2<f32>(x_2190.x, x_2190.y) * vec2<f32>(x_2192.x, x_2192.x)) + x_2195);
  let x_2198 : vec4<f32> = x_33.x_CameraViewProjections[0i][2i];
  let x_2200 : vec4<f32> = u_xlat3;
  let x_2203 : vec2<f32> = u_xlat18;
  u_xlat18 = ((vec2<f32>(x_2198.x, x_2198.y) * vec2<f32>(x_2200.z, x_2200.z)) + x_2203);
  let x_2205 : vec4<f32> = u_xlat4;
  let x_2207 : vec4<f32> = u_xlat3;
  u_xlat3.x = dot(vec3<f32>(x_2205.x, x_2205.y, x_2205.z), vec3<f32>(x_2207.x, x_2207.y, x_2207.z));
  let x_2212 : f32 = u_xlat3.x;
  u_xlat11.x = (1.0f / -(x_2212));
  let x_2216 : vec2<f32> = u_xlat18;
  let x_2217 : vec3<f32> = u_xlat11;
  u_xlat18 = ((x_2216 * vec2<f32>(x_2217.x, x_2217.x)) + vec2<f32>(1.0f, 1.0f));
  let x_2221 : vec2<f32> = u_xlat18;
  u_xlat18 = (x_2221 * vec2<f32>(0.5f, 0.5f));
  let x_2223 : vec2<f32> = u_xlat18;
  u_xlat18 = clamp(x_2223, vec2<f32>(0.0f, 0.0f), vec2<f32>(1.0f, 1.0f));
  let x_2230 : vec2<f32> = u_xlat18;
  let x_2232 : f32 = x_33.x_GlobalMipBias.x;
  let x_2233 : vec4<f32> = textureSampleBias(x_CameraDepthTexture, sampler_CameraDepthTexture, x_2230, x_2232);
  u_xlat11.x = x_2233.x;
  let x_2237 : f32 = x_33.x_ZBufferParams.z;
  let x_2239 : f32 = u_xlat11.x;
  let x_2242 : f32 = x_33.x_ZBufferParams.w;
  u_xlat19 = ((x_2237 * x_2239) + x_2242);
  let x_2244 : f32 = u_xlat19;
  u_xlat19 = (1.0f / x_2244);
  let x_2246 : f32 = u_xlat19;
  let x_2249 : f32 = u_xlat3.x;
  u_xlat3.x = (-(x_2246) + -(x_2249));
  let x_2254 : f32 = u_xlat3.x;
  let x_2257 : f32 = x_33.x_SSAOParams.y;
  u_xlatb3.x = (abs(x_2254) < x_2257);
  let x_2261 : f32 = u_xlat11.x;
  u_xlatb3.y = (0.00001f < x_2261);
  let x_2265 : bool = u_xlatb3.x;
  u_xlat3.x = select(0.0f, 1.0f, x_2265);
  let x_2269 : bool = u_xlatb3.y;
  u_xlat3.y = select(0.0f, 1.0f, x_2269);
  let x_2273 : f32 = u_xlat3.y;
  let x_2275 : f32 = u_xlat3.x;
  u_xlat3.x = (x_2273 * x_2275);
  let x_2279 : f32 = u_xlat18.y;
  u_xlat26 = (-(x_2279) + 1.0f);
  let x_2282 : f32 = u_xlat19;
  let x_2284 : f32 = x_33.x_ProjectionParams2.x;
  u_xlat11.x = (x_2282 * x_2284);
  let x_2288 : vec4<f32> = x_33.x_CameraViewXExtent[0i];
  let x_2290 : vec2<f32> = u_xlat18;
  let x_2294 : vec4<f32> = x_33.x_CameraViewTopLeftCorner[0i];
  u_xlat5 = ((vec3<f32>(x_2288.x, x_2288.y, x_2288.z) * vec3<f32>(x_2290.x, x_2290.x, x_2290.x)) + vec3<f32>(x_2294.x, x_2294.y, x_2294.z));
  let x_2298 : vec4<f32> = x_33.x_CameraViewYExtent[0i];
  let x_2300 : f32 = u_xlat26;
  let x_2303 : vec3<f32> = u_xlat5;
  u_xlat5 = ((vec3<f32>(x_2298.x, x_2298.y, x_2298.z) * vec3<f32>(x_2300, x_2300, x_2300)) + x_2303);
  let x_2305 : vec3<f32> = u_xlat5;
  let x_2306 : vec3<f32> = u_xlat11;
  let x_2309 : vec3<f32> = u_xlat8;
  u_xlat11 = ((x_2305 * vec3<f32>(x_2306.x, x_2306.x, x_2306.x)) + -(x_2309));
  let x_2312 : vec3<f32> = u_xlat11;
  let x_2313 : vec4<f32> = u_xlat1;
  u_xlat18.x = dot(x_2312, vec3<f32>(x_2313.x, x_2313.y, x_2313.z));
  let x_2317 : f32 = u_xlat0;
  let x_2321 : f32 = u_xlat18.x;
  u_xlat18.x = ((-(x_2317) * 0.004f) + x_2321);
  let x_2325 : f32 = u_xlat18.x;
  u_xlat18.x = max(x_2325, 0.0f);
  let x_2328 : vec3<f32> = u_xlat11;
  let x_2329 : vec3<f32> = u_xlat11;
  u_xlat26 = dot(x_2328, x_2329);
  let x_2331 : f32 = u_xlat26;
  u_xlat26 = (x_2331 + 0.0001f);
  let x_2333 : f32 = u_xlat26;
  u_xlat26 = (1.0f / x_2333);
  let x_2335 : f32 = u_xlat26;
  let x_2337 : f32 = u_xlat18.x;
  u_xlat18.x = (x_2335 * x_2337);
  let x_2341 : f32 = u_xlat18.x;
  let x_2343 : f32 = u_xlat3.x;
  let x_2345 : f32 = u_xlat25;
  u_xlat25 = ((x_2341 * x_2343) + x_2345);
  let x_2347 : vec4<f32> = u_xlat2;
  let x_2350 : vec4<f32> = x_33.x_SSAOParams;
  u_xlat3 = ((vec4<f32>(x_2347.x, x_2347.y, x_2347.x, x_2347.y) * vec4<f32>(x_2350.z, x_2350.z, x_2350.z, x_2350.z)) + vec4<f32>(14.580999374f, 34.069000244f, 16.663999557f, 38.936000824f));
  let x_2359 : vec4<f32> = u_xlat3;
  u_xlat18.x = dot(vec2<f32>(x_2359.x, x_2359.y), vec2<f32>(0.067110561f, 0.00583715f));
  let x_2364 : f32 = u_xlat18.x;
  u_xlat18.x = fract(x_2364);
  let x_2368 : f32 = u_xlat18.x;
  u_xlat18.x = (x_2368 * 52.982917786f);
  let x_2372 : f32 = u_xlat18.x;
  u_xlat18.x = fract(x_2372);
  let x_2375 : vec2<f32> = u_xlat18;
  u_xlat18 = (vec2<f32>(x_2375.x, x_2375.x) + vec2<f32>(0.640625f, 0.74609375f));
  let x_2381 : f32 = u_xlat18.x;
  u_xlat18.x = fract(x_2381);
  let x_2385 : f32 = u_xlat18.x;
  u_xlat5.z = ((x_2385 * 2.0f) + -1.0f);
  let x_2390 : f32 = u_xlat18.y;
  u_xlat18.x = (x_2390 * 6.283185482f);
  let x_2394 : f32 = u_xlat5.z;
  let x_2397 : f32 = u_xlat5.z;
  u_xlat26 = ((-(x_2394) * x_2397) + 1.0f);
  let x_2400 : f32 = u_xlat26;
  u_xlat26 = sqrt(x_2400);
  let x_2403 : f32 = u_xlat18.x;
  u_xlat3.x = sin(x_2403);
  let x_2407 : f32 = u_xlat18.x;
  u_xlat6 = cos(x_2407);
  let x_2409 : f32 = u_xlat26;
  let x_2410 : f32 = u_xlat6;
  u_xlat5.x = (x_2409 * x_2410);
  let x_2413 : f32 = u_xlat26;
  let x_2415 : f32 = u_xlat3.x;
  u_xlat5.y = (x_2413 * x_2415);
  let x_2418 : vec3<f32> = u_xlat5;
  u_xlat5 = (x_2418 * vec3<f32>(0.816496611f, 0.816496611f, 0.816496611f));
  let x_2422 : vec4<f32> = u_xlat1;
  let x_2425 : vec3<f32> = u_xlat5;
  u_xlat18.x = dot(-(vec3<f32>(x_2422.x, x_2422.y, x_2422.z)), x_2425);
  let x_2429 : f32 = u_xlat18.x;
  u_xlatb18 = (x_2429 >= 0.0f);
  let x_2431 : bool = u_xlatb18;
  if (x_2431) {
    let x_2435 : vec3<f32> = u_xlat5;
    x_2432 = -(x_2435);
  } else {
    let x_2438 : vec3<f32> = u_xlat5;
    x_2432 = x_2438;
  }
  let x_2439 : vec3<f32> = x_2432;
  u_xlat5 = x_2439;
  let x_2440 : vec3<f32> = u_xlat5;
  let x_2442 : vec4<f32> = x_33.x_SSAOParams;
  let x_2445 : vec3<f32> = u_xlat8;
  u_xlat5 = ((x_2440 * vec3<f32>(x_2442.y, x_2442.y, x_2442.y)) + x_2445);
  let x_2447 : vec3<f32> = u_xlat5;
  let x_2450 : vec4<f32> = x_33.x_CameraViewProjections[0i][1i];
  u_xlat18 = (vec2<f32>(x_2447.y, x_2447.y) * vec2<f32>(x_2450.x, x_2450.y));
  let x_2454 : vec4<f32> = x_33.x_CameraViewProjections[0i][0i];
  let x_2456 : vec3<f32> = u_xlat5;
  let x_2459 : vec2<f32> = u_xlat18;
  u_xlat18 = ((vec2<f32>(x_2454.x, x_2454.y) * vec2<f32>(x_2456.x, x_2456.x)) + x_2459);
  let x_2462 : vec4<f32> = x_33.x_CameraViewProjections[0i][2i];
  let x_2464 : vec3<f32> = u_xlat5;
  let x_2467 : vec2<f32> = u_xlat18;
  u_xlat18 = ((vec2<f32>(x_2462.x, x_2462.y) * vec2<f32>(x_2464.z, x_2464.z)) + x_2467);
  let x_2469 : vec4<f32> = u_xlat4;
  let x_2471 : vec3<f32> = u_xlat5;
  u_xlat3.x = dot(vec3<f32>(x_2469.x, x_2469.y, x_2469.z), x_2471);
  let x_2475 : f32 = u_xlat3.x;
  u_xlat11.x = (1.0f / -(x_2475));
  let x_2479 : vec2<f32> = u_xlat18;
  let x_2480 : vec3<f32> = u_xlat11;
  u_xlat18 = ((x_2479 * vec2<f32>(x_2480.x, x_2480.x)) + vec2<f32>(1.0f, 1.0f));
  let x_2484 : vec2<f32> = u_xlat18;
  u_xlat18 = (x_2484 * vec2<f32>(0.5f, 0.5f));
  let x_2486 : vec2<f32> = u_xlat18;
  u_xlat18 = clamp(x_2486, vec2<f32>(0.0f, 0.0f), vec2<f32>(1.0f, 1.0f));
  let x_2493 : vec2<f32> = u_xlat18;
  let x_2495 : f32 = x_33.x_GlobalMipBias.x;
  let x_2496 : vec4<f32> = textureSampleBias(x_CameraDepthTexture, sampler_CameraDepthTexture, x_2493, x_2495);
  u_xlat11.x = x_2496.x;
  let x_2500 : f32 = x_33.x_ZBufferParams.z;
  let x_2502 : f32 = u_xlat11.x;
  let x_2505 : f32 = x_33.x_ZBufferParams.w;
  u_xlat28 = ((x_2500 * x_2502) + x_2505);
  let x_2507 : f32 = u_xlat28;
  u_xlat28 = (1.0f / x_2507);
  let x_2510 : f32 = u_xlat3.x;
  let x_2512 : f32 = u_xlat28;
  u_xlat3.x = (-(x_2510) + -(x_2512));
  let x_2517 : f32 = u_xlat3.x;
  let x_2520 : f32 = x_33.x_SSAOParams.y;
  u_xlatb3.x = (abs(x_2517) < x_2520);
  let x_2524 : f32 = u_xlat11.x;
  u_xlatb3.y = (0.00001f < x_2524);
  let x_2528 : bool = u_xlatb3.x;
  u_xlat3.x = select(0.0f, 1.0f, x_2528);
  let x_2532 : bool = u_xlatb3.y;
  u_xlat3.y = select(0.0f, 1.0f, x_2532);
  let x_2536 : f32 = u_xlat3.y;
  let x_2538 : f32 = u_xlat3.x;
  u_xlat3.x = (x_2536 * x_2538);
  let x_2542 : f32 = u_xlat18.y;
  u_xlat26 = (-(x_2542) + 1.0f);
  let x_2545 : f32 = u_xlat28;
  let x_2547 : f32 = x_33.x_ProjectionParams2.x;
  u_xlat11.x = (x_2545 * x_2547);
  let x_2551 : vec4<f32> = x_33.x_CameraViewXExtent[0i];
  let x_2553 : vec2<f32> = u_xlat18;
  let x_2557 : vec4<f32> = x_33.x_CameraViewTopLeftCorner[0i];
  u_xlat5 = ((vec3<f32>(x_2551.x, x_2551.y, x_2551.z) * vec3<f32>(x_2553.x, x_2553.x, x_2553.x)) + vec3<f32>(x_2557.x, x_2557.y, x_2557.z));
  let x_2561 : vec4<f32> = x_33.x_CameraViewYExtent[0i];
  let x_2563 : f32 = u_xlat26;
  let x_2566 : vec3<f32> = u_xlat5;
  u_xlat5 = ((vec3<f32>(x_2561.x, x_2561.y, x_2561.z) * vec3<f32>(x_2563, x_2563, x_2563)) + x_2566);
  let x_2568 : vec3<f32> = u_xlat5;
  let x_2569 : vec3<f32> = u_xlat11;
  let x_2572 : vec3<f32> = u_xlat8;
  u_xlat5 = ((x_2568 * vec3<f32>(x_2569.x, x_2569.x, x_2569.x)) + -(x_2572));
  let x_2575 : vec3<f32> = u_xlat5;
  let x_2576 : vec4<f32> = u_xlat1;
  u_xlat18.x = dot(x_2575, vec3<f32>(x_2576.x, x_2576.y, x_2576.z));
  let x_2580 : f32 = u_xlat0;
  let x_2584 : f32 = u_xlat18.x;
  u_xlat18.x = ((-(x_2580) * 0.004f) + x_2584);
  let x_2588 : f32 = u_xlat18.x;
  u_xlat18.x = max(x_2588, 0.0f);
  let x_2591 : vec3<f32> = u_xlat5;
  let x_2592 : vec3<f32> = u_xlat5;
  u_xlat26 = dot(x_2591, x_2592);
  let x_2594 : f32 = u_xlat26;
  u_xlat26 = (x_2594 + 0.0001f);
  let x_2596 : f32 = u_xlat26;
  u_xlat26 = (1.0f / x_2596);
  let x_2598 : f32 = u_xlat26;
  let x_2600 : f32 = u_xlat18.x;
  u_xlat18.x = (x_2598 * x_2600);
  let x_2604 : f32 = u_xlat18.x;
  let x_2606 : f32 = u_xlat3.x;
  let x_2608 : f32 = u_xlat25;
  u_xlat25 = ((x_2604 * x_2606) + x_2608);
  let x_2610 : vec4<f32> = u_xlat3;
  u_xlat18.x = dot(vec2<f32>(x_2610.z, x_2610.w), vec2<f32>(0.067110561f, 0.00583715f));
  let x_2615 : f32 = u_xlat18.x;
  u_xlat18.x = fract(x_2615);
  let x_2619 : f32 = u_xlat18.x;
  u_xlat18.x = (x_2619 * 52.982917786f);
  let x_2623 : f32 = u_xlat18.x;
  u_xlat18.x = fract(x_2623);
  let x_2626 : vec2<f32> = u_xlat18;
  u_xlat18 = (vec2<f32>(x_2626.x, x_2626.x) + vec2<f32>(0.359375f, 0.6796875f));
  let x_2633 : f32 = u_xlat18.x;
  u_xlat18.x = fract(x_2633);
  let x_2637 : f32 = u_xlat18.x;
  u_xlat3.z = ((x_2637 * 2.0f) + -1.0f);
  let x_2642 : f32 = u_xlat18.y;
  u_xlat18.x = (x_2642 * 6.283185482f);
  let x_2646 : f32 = u_xlat3.z;
  let x_2649 : f32 = u_xlat3.z;
  u_xlat26 = ((-(x_2646) * x_2649) + 1.0f);
  let x_2652 : f32 = u_xlat26;
  u_xlat26 = sqrt(x_2652);
  let x_2655 : f32 = u_xlat18.x;
  u_xlat5.x = sin(x_2655);
  let x_2659 : f32 = u_xlat18.x;
  u_xlat6 = cos(x_2659);
  let x_2661 : f32 = u_xlat26;
  let x_2662 : f32 = u_xlat6;
  u_xlat3.x = (x_2661 * x_2662);
  let x_2665 : f32 = u_xlat26;
  let x_2667 : f32 = u_xlat5.x;
  u_xlat3.y = (x_2665 * x_2667);
  let x_2670 : vec4<f32> = u_xlat3;
  let x_2674 : vec3<f32> = (vec3<f32>(x_2670.x, x_2670.y, x_2670.z) * vec3<f32>(0.866025388f, 0.866025388f, 0.866025388f));
  let x_2675 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_2674.x, x_2674.y, x_2674.z, x_2675.w);
  let x_2677 : vec4<f32> = u_xlat1;
  let x_2680 : vec4<f32> = u_xlat3;
  u_xlat18.x = dot(-(vec3<f32>(x_2677.x, x_2677.y, x_2677.z)), vec3<f32>(x_2680.x, x_2680.y, x_2680.z));
  let x_2685 : f32 = u_xlat18.x;
  u_xlatb18 = (x_2685 >= 0.0f);
  let x_2687 : bool = u_xlatb18;
  if (x_2687) {
    let x_2691 : vec4<f32> = u_xlat3;
    x_2688 = -(vec3<f32>(x_2691.x, x_2691.y, x_2691.z));
  } else {
    let x_2695 : vec4<f32> = u_xlat3;
    x_2688 = vec3<f32>(x_2695.x, x_2695.y, x_2695.z);
  }
  let x_2697 : vec3<f32> = x_2688;
  let x_2698 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_2697.x, x_2697.y, x_2697.z, x_2698.w);
  let x_2700 : vec4<f32> = u_xlat3;
  let x_2703 : vec4<f32> = x_33.x_SSAOParams;
  let x_2706 : vec3<f32> = u_xlat8;
  let x_2707 : vec3<f32> = ((vec3<f32>(x_2700.x, x_2700.y, x_2700.z) * vec3<f32>(x_2703.y, x_2703.y, x_2703.y)) + x_2706);
  let x_2708 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_2707.x, x_2707.y, x_2707.z, x_2708.w);
  let x_2710 : vec4<f32> = u_xlat3;
  let x_2713 : vec4<f32> = x_33.x_CameraViewProjections[0i][1i];
  u_xlat18 = (vec2<f32>(x_2710.y, x_2710.y) * vec2<f32>(x_2713.x, x_2713.y));
  let x_2717 : vec4<f32> = x_33.x_CameraViewProjections[0i][0i];
  let x_2719 : vec4<f32> = u_xlat3;
  let x_2722 : vec2<f32> = u_xlat18;
  u_xlat18 = ((vec2<f32>(x_2717.x, x_2717.y) * vec2<f32>(x_2719.x, x_2719.x)) + x_2722);
  let x_2725 : vec4<f32> = x_33.x_CameraViewProjections[0i][2i];
  let x_2727 : vec4<f32> = u_xlat3;
  let x_2730 : vec2<f32> = u_xlat18;
  u_xlat18 = ((vec2<f32>(x_2725.x, x_2725.y) * vec2<f32>(x_2727.z, x_2727.z)) + x_2730);
  let x_2732 : vec4<f32> = u_xlat4;
  let x_2734 : vec4<f32> = u_xlat3;
  u_xlat3.x = dot(vec3<f32>(x_2732.x, x_2732.y, x_2732.z), vec3<f32>(x_2734.x, x_2734.y, x_2734.z));
  let x_2739 : f32 = u_xlat3.x;
  u_xlat11.x = (1.0f / -(x_2739));
  let x_2743 : vec2<f32> = u_xlat18;
  let x_2744 : vec3<f32> = u_xlat11;
  u_xlat18 = ((x_2743 * vec2<f32>(x_2744.x, x_2744.x)) + vec2<f32>(1.0f, 1.0f));
  let x_2748 : vec2<f32> = u_xlat18;
  u_xlat18 = (x_2748 * vec2<f32>(0.5f, 0.5f));
  let x_2750 : vec2<f32> = u_xlat18;
  u_xlat18 = clamp(x_2750, vec2<f32>(0.0f, 0.0f), vec2<f32>(1.0f, 1.0f));
  let x_2757 : vec2<f32> = u_xlat18;
  let x_2759 : f32 = x_33.x_GlobalMipBias.x;
  let x_2760 : vec4<f32> = textureSampleBias(x_CameraDepthTexture, sampler_CameraDepthTexture, x_2757, x_2759);
  u_xlat11.x = x_2760.x;
  let x_2764 : f32 = x_33.x_ZBufferParams.z;
  let x_2766 : f32 = u_xlat11.x;
  let x_2769 : f32 = x_33.x_ZBufferParams.w;
  u_xlat19 = ((x_2764 * x_2766) + x_2769);
  let x_2771 : f32 = u_xlat19;
  u_xlat19 = (1.0f / x_2771);
  let x_2773 : f32 = u_xlat19;
  let x_2776 : f32 = u_xlat3.x;
  u_xlat3.x = (-(x_2773) + -(x_2776));
  let x_2781 : f32 = u_xlat3.x;
  let x_2784 : f32 = x_33.x_SSAOParams.y;
  u_xlatb3.x = (abs(x_2781) < x_2784);
  let x_2788 : f32 = u_xlat11.x;
  u_xlatb3.y = (0.00001f < x_2788);
  let x_2792 : bool = u_xlatb3.x;
  u_xlat3.x = select(0.0f, 1.0f, x_2792);
  let x_2796 : bool = u_xlatb3.y;
  u_xlat3.y = select(0.0f, 1.0f, x_2796);
  let x_2800 : f32 = u_xlat3.y;
  let x_2802 : f32 = u_xlat3.x;
  u_xlat3.x = (x_2800 * x_2802);
  let x_2806 : f32 = u_xlat18.y;
  u_xlat26 = (-(x_2806) + 1.0f);
  let x_2809 : f32 = u_xlat19;
  let x_2811 : f32 = x_33.x_ProjectionParams2.x;
  u_xlat11.x = (x_2809 * x_2811);
  let x_2815 : vec4<f32> = x_33.x_CameraViewXExtent[0i];
  let x_2817 : vec2<f32> = u_xlat18;
  let x_2821 : vec4<f32> = x_33.x_CameraViewTopLeftCorner[0i];
  u_xlat5 = ((vec3<f32>(x_2815.x, x_2815.y, x_2815.z) * vec3<f32>(x_2817.x, x_2817.x, x_2817.x)) + vec3<f32>(x_2821.x, x_2821.y, x_2821.z));
  let x_2825 : vec4<f32> = x_33.x_CameraViewYExtent[0i];
  let x_2827 : f32 = u_xlat26;
  let x_2830 : vec3<f32> = u_xlat5;
  u_xlat5 = ((vec3<f32>(x_2825.x, x_2825.y, x_2825.z) * vec3<f32>(x_2827, x_2827, x_2827)) + x_2830);
  let x_2832 : vec3<f32> = u_xlat5;
  let x_2833 : vec3<f32> = u_xlat11;
  let x_2836 : vec3<f32> = u_xlat8;
  u_xlat11 = ((x_2832 * vec3<f32>(x_2833.x, x_2833.x, x_2833.x)) + -(x_2836));
  let x_2839 : vec3<f32> = u_xlat11;
  let x_2840 : vec4<f32> = u_xlat1;
  u_xlat18.x = dot(x_2839, vec3<f32>(x_2840.x, x_2840.y, x_2840.z));
  let x_2844 : f32 = u_xlat0;
  let x_2848 : f32 = u_xlat18.x;
  u_xlat18.x = ((-(x_2844) * 0.004f) + x_2848);
  let x_2852 : f32 = u_xlat18.x;
  u_xlat18.x = max(x_2852, 0.0f);
  let x_2855 : vec3<f32> = u_xlat11;
  let x_2856 : vec3<f32> = u_xlat11;
  u_xlat26 = dot(x_2855, x_2856);
  let x_2858 : f32 = u_xlat26;
  u_xlat26 = (x_2858 + 0.0001f);
  let x_2860 : f32 = u_xlat26;
  u_xlat26 = (1.0f / x_2860);
  let x_2862 : f32 = u_xlat26;
  let x_2864 : f32 = u_xlat18.x;
  u_xlat18.x = (x_2862 * x_2864);
  let x_2868 : f32 = u_xlat18.x;
  let x_2870 : f32 = u_xlat3.x;
  let x_2872 : f32 = u_xlat25;
  u_xlat25 = ((x_2868 * x_2870) + x_2872);
  let x_2874 : vec4<f32> = u_xlat2;
  let x_2877 : vec4<f32> = x_33.x_SSAOParams;
  u_xlat3 = ((vec4<f32>(x_2874.x, x_2874.y, x_2874.x, x_2874.y) * vec4<f32>(x_2877.z, x_2877.z, x_2877.z, x_2877.z)) + vec4<f32>(18.746999741f, 43.803001404f, 20.829999924f, 48.670001984f));
  let x_2886 : vec4<f32> = u_xlat3;
  u_xlat18.x = dot(vec2<f32>(x_2886.x, x_2886.y), vec2<f32>(0.067110561f, 0.00583715f));
  let x_2891 : f32 = u_xlat18.x;
  u_xlat18.x = fract(x_2891);
  let x_2895 : f32 = u_xlat18.x;
  u_xlat18.x = (x_2895 * 52.982917786f);
  let x_2899 : f32 = u_xlat18.x;
  u_xlat18.x = fract(x_2899);
  let x_2902 : vec2<f32> = u_xlat18;
  u_xlat18 = (vec2<f32>(x_2902.x, x_2902.x) + vec2<f32>(0.5078125f, 0.3515625f));
  let x_2909 : f32 = u_xlat18.x;
  u_xlat18.x = fract(x_2909);
  let x_2913 : f32 = u_xlat18.x;
  u_xlat5.z = ((x_2913 * 2.0f) + -1.0f);
  let x_2918 : f32 = u_xlat18.y;
  u_xlat18.x = (x_2918 * 6.283185482f);
  let x_2922 : f32 = u_xlat5.z;
  let x_2925 : f32 = u_xlat5.z;
  u_xlat26 = ((-(x_2922) * x_2925) + 1.0f);
  let x_2928 : f32 = u_xlat26;
  u_xlat26 = sqrt(x_2928);
  let x_2931 : f32 = u_xlat18.x;
  u_xlat3.x = sin(x_2931);
  let x_2935 : f32 = u_xlat18.x;
  u_xlat6 = cos(x_2935);
  let x_2937 : f32 = u_xlat26;
  let x_2938 : f32 = u_xlat6;
  u_xlat5.x = (x_2937 * x_2938);
  let x_2941 : f32 = u_xlat26;
  let x_2943 : f32 = u_xlat3.x;
  u_xlat5.y = (x_2941 * x_2943);
  let x_2946 : vec3<f32> = u_xlat5;
  u_xlat5 = (x_2946 * vec3<f32>(0.912870944f, 0.912870944f, 0.912870944f));
  let x_2950 : vec4<f32> = u_xlat1;
  let x_2953 : vec3<f32> = u_xlat5;
  u_xlat18.x = dot(-(vec3<f32>(x_2950.x, x_2950.y, x_2950.z)), x_2953);
  let x_2957 : f32 = u_xlat18.x;
  u_xlatb18 = (x_2957 >= 0.0f);
  let x_2959 : bool = u_xlatb18;
  if (x_2959) {
    let x_2963 : vec3<f32> = u_xlat5;
    x_2960 = -(x_2963);
  } else {
    let x_2966 : vec3<f32> = u_xlat5;
    x_2960 = x_2966;
  }
  let x_2967 : vec3<f32> = x_2960;
  u_xlat5 = x_2967;
  let x_2968 : vec3<f32> = u_xlat5;
  let x_2970 : vec4<f32> = x_33.x_SSAOParams;
  let x_2973 : vec3<f32> = u_xlat8;
  u_xlat5 = ((x_2968 * vec3<f32>(x_2970.y, x_2970.y, x_2970.y)) + x_2973);
  let x_2975 : vec3<f32> = u_xlat5;
  let x_2978 : vec4<f32> = x_33.x_CameraViewProjections[0i][1i];
  u_xlat18 = (vec2<f32>(x_2975.y, x_2975.y) * vec2<f32>(x_2978.x, x_2978.y));
  let x_2982 : vec4<f32> = x_33.x_CameraViewProjections[0i][0i];
  let x_2984 : vec3<f32> = u_xlat5;
  let x_2987 : vec2<f32> = u_xlat18;
  u_xlat18 = ((vec2<f32>(x_2982.x, x_2982.y) * vec2<f32>(x_2984.x, x_2984.x)) + x_2987);
  let x_2990 : vec4<f32> = x_33.x_CameraViewProjections[0i][2i];
  let x_2992 : vec3<f32> = u_xlat5;
  let x_2995 : vec2<f32> = u_xlat18;
  u_xlat18 = ((vec2<f32>(x_2990.x, x_2990.y) * vec2<f32>(x_2992.z, x_2992.z)) + x_2995);
  let x_2997 : vec4<f32> = u_xlat4;
  let x_2999 : vec3<f32> = u_xlat5;
  u_xlat3.x = dot(vec3<f32>(x_2997.x, x_2997.y, x_2997.z), x_2999);
  let x_3003 : f32 = u_xlat3.x;
  u_xlat11.x = (1.0f / -(x_3003));
  let x_3007 : vec2<f32> = u_xlat18;
  let x_3008 : vec3<f32> = u_xlat11;
  u_xlat18 = ((x_3007 * vec2<f32>(x_3008.x, x_3008.x)) + vec2<f32>(1.0f, 1.0f));
  let x_3012 : vec2<f32> = u_xlat18;
  u_xlat18 = (x_3012 * vec2<f32>(0.5f, 0.5f));
  let x_3014 : vec2<f32> = u_xlat18;
  u_xlat18 = clamp(x_3014, vec2<f32>(0.0f, 0.0f), vec2<f32>(1.0f, 1.0f));
  let x_3021 : vec2<f32> = u_xlat18;
  let x_3023 : f32 = x_33.x_GlobalMipBias.x;
  let x_3024 : vec4<f32> = textureSampleBias(x_CameraDepthTexture, sampler_CameraDepthTexture, x_3021, x_3023);
  u_xlat11.x = x_3024.x;
  let x_3028 : f32 = x_33.x_ZBufferParams.z;
  let x_3030 : f32 = u_xlat11.x;
  let x_3033 : f32 = x_33.x_ZBufferParams.w;
  u_xlat28 = ((x_3028 * x_3030) + x_3033);
  let x_3035 : f32 = u_xlat28;
  u_xlat28 = (1.0f / x_3035);
  let x_3038 : f32 = u_xlat3.x;
  let x_3040 : f32 = u_xlat28;
  u_xlat3.x = (-(x_3038) + -(x_3040));
  let x_3045 : f32 = u_xlat3.x;
  let x_3048 : f32 = x_33.x_SSAOParams.y;
  u_xlatb3.x = (abs(x_3045) < x_3048);
  let x_3052 : f32 = u_xlat11.x;
  u_xlatb3.y = (0.00001f < x_3052);
  let x_3056 : bool = u_xlatb3.x;
  u_xlat3.x = select(0.0f, 1.0f, x_3056);
  let x_3060 : bool = u_xlatb3.y;
  u_xlat3.y = select(0.0f, 1.0f, x_3060);
  let x_3064 : f32 = u_xlat3.y;
  let x_3066 : f32 = u_xlat3.x;
  u_xlat3.x = (x_3064 * x_3066);
  let x_3070 : f32 = u_xlat18.y;
  u_xlat26 = (-(x_3070) + 1.0f);
  let x_3073 : f32 = u_xlat28;
  let x_3075 : f32 = x_33.x_ProjectionParams2.x;
  u_xlat11.x = (x_3073 * x_3075);
  let x_3079 : vec4<f32> = x_33.x_CameraViewXExtent[0i];
  let x_3081 : vec2<f32> = u_xlat18;
  let x_3085 : vec4<f32> = x_33.x_CameraViewTopLeftCorner[0i];
  u_xlat5 = ((vec3<f32>(x_3079.x, x_3079.y, x_3079.z) * vec3<f32>(x_3081.x, x_3081.x, x_3081.x)) + vec3<f32>(x_3085.x, x_3085.y, x_3085.z));
  let x_3089 : vec4<f32> = x_33.x_CameraViewYExtent[0i];
  let x_3091 : f32 = u_xlat26;
  let x_3094 : vec3<f32> = u_xlat5;
  u_xlat5 = ((vec3<f32>(x_3089.x, x_3089.y, x_3089.z) * vec3<f32>(x_3091, x_3091, x_3091)) + x_3094);
  let x_3096 : vec3<f32> = u_xlat5;
  let x_3097 : vec3<f32> = u_xlat11;
  let x_3100 : vec3<f32> = u_xlat8;
  u_xlat5 = ((x_3096 * vec3<f32>(x_3097.x, x_3097.x, x_3097.x)) + -(x_3100));
  let x_3103 : vec3<f32> = u_xlat5;
  let x_3104 : vec4<f32> = u_xlat1;
  u_xlat18.x = dot(x_3103, vec3<f32>(x_3104.x, x_3104.y, x_3104.z));
  let x_3108 : f32 = u_xlat0;
  let x_3112 : f32 = u_xlat18.x;
  u_xlat18.x = ((-(x_3108) * 0.004f) + x_3112);
  let x_3116 : f32 = u_xlat18.x;
  u_xlat18.x = max(x_3116, 0.0f);
  let x_3119 : vec3<f32> = u_xlat5;
  let x_3120 : vec3<f32> = u_xlat5;
  u_xlat26 = dot(x_3119, x_3120);
  let x_3122 : f32 = u_xlat26;
  u_xlat26 = (x_3122 + 0.0001f);
  let x_3124 : f32 = u_xlat26;
  u_xlat26 = (1.0f / x_3124);
  let x_3126 : f32 = u_xlat26;
  let x_3128 : f32 = u_xlat18.x;
  u_xlat18.x = (x_3126 * x_3128);
  let x_3132 : f32 = u_xlat18.x;
  let x_3134 : f32 = u_xlat3.x;
  let x_3136 : f32 = u_xlat25;
  u_xlat25 = ((x_3132 * x_3134) + x_3136);
  let x_3138 : vec4<f32> = u_xlat3;
  u_xlat18.x = dot(vec2<f32>(x_3138.z, x_3138.w), vec2<f32>(0.067110561f, 0.00583715f));
  let x_3143 : f32 = u_xlat18.x;
  u_xlat18.x = fract(x_3143);
  let x_3147 : f32 = u_xlat18.x;
  u_xlat18.x = (x_3147 * 52.982917786f);
  let x_3151 : f32 = u_xlat18.x;
  u_xlat18.x = fract(x_3151);
  let x_3154 : vec2<f32> = u_xlat18;
  u_xlat18 = (vec2<f32>(x_3154.x, x_3154.x) + vec2<f32>(0.3828125f, 0.4921875f));
  let x_3161 : f32 = u_xlat18.x;
  u_xlat18.x = fract(x_3161);
  let x_3165 : f32 = u_xlat18.x;
  u_xlat3.z = ((x_3165 * 2.0f) + -1.0f);
  let x_3170 : f32 = u_xlat18.y;
  u_xlat18.x = (x_3170 * 6.283185482f);
  let x_3174 : f32 = u_xlat3.z;
  let x_3177 : f32 = u_xlat3.z;
  u_xlat26 = ((-(x_3174) * x_3177) + 1.0f);
  let x_3180 : f32 = u_xlat26;
  u_xlat26 = sqrt(x_3180);
  let x_3183 : f32 = u_xlat18.x;
  u_xlat5.x = sin(x_3183);
  let x_3187 : f32 = u_xlat18.x;
  u_xlat6 = cos(x_3187);
  let x_3189 : f32 = u_xlat26;
  let x_3190 : f32 = u_xlat6;
  u_xlat3.x = (x_3189 * x_3190);
  let x_3193 : f32 = u_xlat26;
  let x_3195 : f32 = u_xlat5.x;
  u_xlat3.y = (x_3193 * x_3195);
  let x_3198 : vec4<f32> = u_xlat3;
  let x_3202 : vec3<f32> = (vec3<f32>(x_3198.x, x_3198.y, x_3198.z) * vec3<f32>(0.957427144f, 0.957427144f, 0.957427144f));
  let x_3203 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_3202.x, x_3202.y, x_3202.z, x_3203.w);
  let x_3205 : vec4<f32> = u_xlat1;
  let x_3208 : vec4<f32> = u_xlat3;
  u_xlat18.x = dot(-(vec3<f32>(x_3205.x, x_3205.y, x_3205.z)), vec3<f32>(x_3208.x, x_3208.y, x_3208.z));
  let x_3213 : f32 = u_xlat18.x;
  u_xlatb18 = (x_3213 >= 0.0f);
  let x_3215 : bool = u_xlatb18;
  if (x_3215) {
    let x_3219 : vec4<f32> = u_xlat3;
    x_3216 = -(vec3<f32>(x_3219.x, x_3219.y, x_3219.z));
  } else {
    let x_3223 : vec4<f32> = u_xlat3;
    x_3216 = vec3<f32>(x_3223.x, x_3223.y, x_3223.z);
  }
  let x_3225 : vec3<f32> = x_3216;
  let x_3226 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_3225.x, x_3225.y, x_3225.z, x_3226.w);
  let x_3228 : vec4<f32> = u_xlat3;
  let x_3231 : vec4<f32> = x_33.x_SSAOParams;
  let x_3234 : vec3<f32> = u_xlat8;
  let x_3235 : vec3<f32> = ((vec3<f32>(x_3228.x, x_3228.y, x_3228.z) * vec3<f32>(x_3231.y, x_3231.y, x_3231.y)) + x_3234);
  let x_3236 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_3235.x, x_3235.y, x_3235.z, x_3236.w);
  let x_3238 : vec4<f32> = u_xlat3;
  let x_3241 : vec4<f32> = x_33.x_CameraViewProjections[0i][1i];
  u_xlat18 = (vec2<f32>(x_3238.y, x_3238.y) * vec2<f32>(x_3241.x, x_3241.y));
  let x_3245 : vec4<f32> = x_33.x_CameraViewProjections[0i][0i];
  let x_3247 : vec4<f32> = u_xlat3;
  let x_3250 : vec2<f32> = u_xlat18;
  u_xlat18 = ((vec2<f32>(x_3245.x, x_3245.y) * vec2<f32>(x_3247.x, x_3247.x)) + x_3250);
  let x_3253 : vec4<f32> = x_33.x_CameraViewProjections[0i][2i];
  let x_3255 : vec4<f32> = u_xlat3;
  let x_3258 : vec2<f32> = u_xlat18;
  u_xlat18 = ((vec2<f32>(x_3253.x, x_3253.y) * vec2<f32>(x_3255.z, x_3255.z)) + x_3258);
  let x_3260 : vec4<f32> = u_xlat4;
  let x_3262 : vec4<f32> = u_xlat3;
  u_xlat3.x = dot(vec3<f32>(x_3260.x, x_3260.y, x_3260.z), vec3<f32>(x_3262.x, x_3262.y, x_3262.z));
  let x_3267 : f32 = u_xlat3.x;
  u_xlat11.x = (1.0f / -(x_3267));
  let x_3271 : vec2<f32> = u_xlat18;
  let x_3272 : vec3<f32> = u_xlat11;
  u_xlat18 = ((x_3271 * vec2<f32>(x_3272.x, x_3272.x)) + vec2<f32>(1.0f, 1.0f));
  let x_3276 : vec2<f32> = u_xlat18;
  u_xlat18 = (x_3276 * vec2<f32>(0.5f, 0.5f));
  let x_3278 : vec2<f32> = u_xlat18;
  u_xlat18 = clamp(x_3278, vec2<f32>(0.0f, 0.0f), vec2<f32>(1.0f, 1.0f));
  let x_3285 : vec2<f32> = u_xlat18;
  let x_3287 : f32 = x_33.x_GlobalMipBias.x;
  let x_3288 : vec4<f32> = textureSampleBias(x_CameraDepthTexture, sampler_CameraDepthTexture, x_3285, x_3287);
  u_xlat11.x = x_3288.x;
  let x_3292 : f32 = x_33.x_ZBufferParams.z;
  let x_3294 : f32 = u_xlat11.x;
  let x_3297 : f32 = x_33.x_ZBufferParams.w;
  u_xlat19 = ((x_3292 * x_3294) + x_3297);
  let x_3299 : f32 = u_xlat19;
  u_xlat19 = (1.0f / x_3299);
  let x_3301 : f32 = u_xlat19;
  let x_3304 : f32 = u_xlat3.x;
  u_xlat3.x = (-(x_3301) + -(x_3304));
  let x_3309 : f32 = u_xlat3.x;
  let x_3312 : f32 = x_33.x_SSAOParams.y;
  u_xlatb3.x = (abs(x_3309) < x_3312);
  let x_3316 : f32 = u_xlat11.x;
  u_xlatb3.y = (0.00001f < x_3316);
  let x_3320 : bool = u_xlatb3.x;
  u_xlat3.x = select(0.0f, 1.0f, x_3320);
  let x_3324 : bool = u_xlatb3.y;
  u_xlat3.y = select(0.0f, 1.0f, x_3324);
  let x_3328 : f32 = u_xlat3.y;
  let x_3330 : f32 = u_xlat3.x;
  u_xlat3.x = (x_3328 * x_3330);
  let x_3334 : f32 = u_xlat18.y;
  u_xlat26 = (-(x_3334) + 1.0f);
  let x_3337 : f32 = u_xlat19;
  let x_3339 : f32 = x_33.x_ProjectionParams2.x;
  u_xlat11.x = (x_3337 * x_3339);
  let x_3343 : vec4<f32> = x_33.x_CameraViewXExtent[0i];
  let x_3345 : vec2<f32> = u_xlat18;
  let x_3349 : vec4<f32> = x_33.x_CameraViewTopLeftCorner[0i];
  u_xlat5 = ((vec3<f32>(x_3343.x, x_3343.y, x_3343.z) * vec3<f32>(x_3345.x, x_3345.x, x_3345.x)) + vec3<f32>(x_3349.x, x_3349.y, x_3349.z));
  let x_3353 : vec4<f32> = x_33.x_CameraViewYExtent[0i];
  let x_3355 : f32 = u_xlat26;
  let x_3358 : vec3<f32> = u_xlat5;
  u_xlat5 = ((vec3<f32>(x_3353.x, x_3353.y, x_3353.z) * vec3<f32>(x_3355, x_3355, x_3355)) + x_3358);
  let x_3360 : vec3<f32> = u_xlat5;
  let x_3361 : vec3<f32> = u_xlat11;
  let x_3364 : vec3<f32> = u_xlat8;
  u_xlat11 = ((x_3360 * vec3<f32>(x_3361.x, x_3361.x, x_3361.x)) + -(x_3364));
  let x_3367 : vec3<f32> = u_xlat11;
  let x_3368 : vec4<f32> = u_xlat1;
  u_xlat18.x = dot(x_3367, vec3<f32>(x_3368.x, x_3368.y, x_3368.z));
  let x_3372 : f32 = u_xlat0;
  let x_3376 : f32 = u_xlat18.x;
  u_xlat18.x = ((-(x_3372) * 0.004f) + x_3376);
  let x_3380 : f32 = u_xlat18.x;
  u_xlat18.x = max(x_3380, 0.0f);
  let x_3383 : vec3<f32> = u_xlat11;
  let x_3384 : vec3<f32> = u_xlat11;
  u_xlat26 = dot(x_3383, x_3384);
  let x_3386 : f32 = u_xlat26;
  u_xlat26 = (x_3386 + 0.0001f);
  let x_3388 : f32 = u_xlat26;
  u_xlat26 = (1.0f / x_3388);
  let x_3390 : f32 = u_xlat26;
  let x_3392 : f32 = u_xlat18.x;
  u_xlat18.x = (x_3390 * x_3392);
  let x_3396 : f32 = u_xlat18.x;
  let x_3398 : f32 = u_xlat3.x;
  let x_3400 : f32 = u_xlat25;
  u_xlat25 = ((x_3396 * x_3398) + x_3400);
  let x_3402 : vec4<f32> = u_xlat2;
  let x_3405 : vec4<f32> = x_33.x_SSAOParams;
  let x_3411 : vec2<f32> = ((vec2<f32>(x_3402.x, x_3402.y) * vec2<f32>(x_3405.z, x_3405.z)) + vec2<f32>(22.913000107f, 53.537002563f));
  let x_3412 : vec4<f32> = u_xlat2;
  u_xlat2 = vec4<f32>(x_3411.x, x_3411.y, x_3412.z, x_3412.w);
  let x_3414 : vec4<f32> = u_xlat2;
  u_xlat2.x = dot(vec2<f32>(x_3414.x, x_3414.y), vec2<f32>(0.067110561f, 0.00583715f));
  let x_3419 : f32 = u_xlat2.x;
  u_xlat2.x = fract(x_3419);
  let x_3423 : f32 = u_xlat2.x;
  u_xlat2.x = (x_3423 * 52.982917786f);
  let x_3427 : f32 = u_xlat2.x;
  u_xlat2.x = fract(x_3427);
  let x_3430 : vec4<f32> = u_xlat2;
  let x_3434 : vec2<f32> = (vec2<f32>(x_3430.x, x_3430.x) + vec2<f32>(0.984375f, 0.125f));
  let x_3435 : vec4<f32> = u_xlat2;
  u_xlat2 = vec4<f32>(x_3434.x, x_3434.y, x_3435.z, x_3435.w);
  let x_3438 : f32 = u_xlat2.x;
  u_xlat2.x = fract(x_3438);
  let x_3442 : f32 = u_xlat2.x;
  u_xlat3.z = ((x_3442 * 2.0f) + -1.0f);
  let x_3447 : f32 = u_xlat2.y;
  u_xlat2.x = (x_3447 * 6.283185482f);
  let x_3451 : f32 = u_xlat3.z;
  let x_3454 : f32 = u_xlat3.z;
  u_xlat10.x = ((-(x_3451) * x_3454) + 1.0f);
  let x_3459 : f32 = u_xlat10.x;
  u_xlat10.x = sqrt(x_3459);
  let x_3463 : f32 = u_xlat2.x;
  u_xlat5.x = cos(x_3463);
  let x_3467 : f32 = u_xlat2.x;
  u_xlat2.x = sin(x_3467);
  let x_3471 : f32 = u_xlat10.x;
  let x_3473 : f32 = u_xlat5.x;
  u_xlat3.x = (x_3471 * x_3473);
  let x_3477 : f32 = u_xlat2.x;
  let x_3479 : f32 = u_xlat10.x;
  u_xlat3.y = (x_3477 * x_3479);
  let x_3482 : vec4<f32> = u_xlat1;
  let x_3485 : vec4<f32> = u_xlat3;
  u_xlat2.x = dot(-(vec3<f32>(x_3482.x, x_3482.y, x_3482.z)), vec3<f32>(x_3485.x, x_3485.y, x_3485.z));
  let x_3492 : f32 = u_xlat2.x;
  u_xlatb2.x = (x_3492 >= 0.0f);
  let x_3496 : bool = u_xlatb2.x;
  if (x_3496) {
    let x_3500 : vec4<f32> = u_xlat3;
    x_3497 = -(vec3<f32>(x_3500.x, x_3500.y, x_3500.z));
  } else {
    let x_3504 : vec4<f32> = u_xlat3;
    x_3497 = vec3<f32>(x_3504.x, x_3504.y, x_3504.z);
  }
  let x_3506 : vec3<f32> = x_3497;
  let x_3507 : vec4<f32> = u_xlat2;
  u_xlat2 = vec4<f32>(x_3506.x, x_3506.y, x_3506.z, x_3507.w);
  let x_3509 : vec4<f32> = u_xlat2;
  let x_3512 : vec4<f32> = x_33.x_SSAOParams;
  let x_3515 : vec3<f32> = u_xlat8;
  let x_3516 : vec3<f32> = ((vec3<f32>(x_3509.x, x_3509.y, x_3509.z) * vec3<f32>(x_3512.y, x_3512.y, x_3512.y)) + x_3515);
  let x_3517 : vec4<f32> = u_xlat2;
  u_xlat2 = vec4<f32>(x_3516.x, x_3516.y, x_3516.z, x_3517.w);
  let x_3519 : vec4<f32> = u_xlat2;
  let x_3522 : vec4<f32> = x_33.x_CameraViewProjections[0i][1i];
  let x_3524 : vec2<f32> = (vec2<f32>(x_3519.y, x_3519.y) * vec2<f32>(x_3522.x, x_3522.y));
  let x_3525 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_3524.x, x_3524.y, x_3525.z, x_3525.w);
  let x_3528 : vec4<f32> = x_33.x_CameraViewProjections[0i][0i];
  let x_3530 : vec4<f32> = u_xlat2;
  let x_3533 : vec4<f32> = u_xlat3;
  let x_3535 : vec2<f32> = ((vec2<f32>(x_3528.x, x_3528.y) * vec2<f32>(x_3530.x, x_3530.x)) + vec2<f32>(x_3533.x, x_3533.y));
  let x_3536 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_3535.x, x_3535.y, x_3536.z, x_3536.w);
  let x_3539 : vec4<f32> = x_33.x_CameraViewProjections[0i][2i];
  let x_3541 : vec4<f32> = u_xlat2;
  let x_3544 : vec4<f32> = u_xlat3;
  let x_3546 : vec2<f32> = ((vec2<f32>(x_3539.x, x_3539.y) * vec2<f32>(x_3541.z, x_3541.z)) + vec2<f32>(x_3544.x, x_3544.y));
  let x_3547 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_3546.x, x_3546.y, x_3547.z, x_3547.w);
  let x_3549 : vec4<f32> = u_xlat4;
  let x_3551 : vec4<f32> = u_xlat2;
  u_xlat2.x = dot(vec3<f32>(x_3549.x, x_3549.y, x_3549.z), vec3<f32>(x_3551.x, x_3551.y, x_3551.z));
  let x_3556 : f32 = u_xlat2.x;
  u_xlat10.x = (1.0f / -(x_3556));
  let x_3560 : vec4<f32> = u_xlat3;
  let x_3562 : vec2<f32> = u_xlat10;
  u_xlat10 = ((vec2<f32>(x_3560.x, x_3560.y) * vec2<f32>(x_3562.x, x_3562.x)) + vec2<f32>(1.0f, 1.0f));
  let x_3566 : vec2<f32> = u_xlat10;
  u_xlat10 = (x_3566 * vec2<f32>(0.5f, 0.5f));
  let x_3568 : vec2<f32> = u_xlat10;
  u_xlat10 = clamp(x_3568, vec2<f32>(0.0f, 0.0f), vec2<f32>(1.0f, 1.0f));
  let x_3575 : vec2<f32> = u_xlat10;
  let x_3577 : f32 = x_33.x_GlobalMipBias.x;
  let x_3578 : vec4<f32> = textureSampleBias(x_CameraDepthTexture, sampler_CameraDepthTexture, x_3575, x_3577);
  u_xlat26 = x_3578.x;
  let x_3581 : f32 = x_33.x_ZBufferParams.z;
  let x_3582 : f32 = u_xlat26;
  let x_3585 : f32 = x_33.x_ZBufferParams.w;
  u_xlat3.x = ((x_3581 * x_3582) + x_3585);
  let x_3589 : f32 = u_xlat3.x;
  u_xlat3.x = (1.0f / x_3589);
  let x_3593 : f32 = u_xlat2.x;
  let x_3596 : f32 = u_xlat3.x;
  u_xlat2.x = (-(x_3593) + -(x_3596));
  let x_3601 : f32 = u_xlat2.x;
  let x_3604 : f32 = x_33.x_SSAOParams.y;
  u_xlatb2.x = (abs(x_3601) < x_3604);
  let x_3607 : f32 = u_xlat26;
  u_xlatb2.w = (0.00001f < x_3607);
  let x_3611 : bool = u_xlatb2.x;
  u_xlat2.x = select(0.0f, 1.0f, x_3611);
  let x_3615 : bool = u_xlatb2.w;
  u_xlat2.w = select(0.0f, 1.0f, x_3615);
  let x_3619 : f32 = u_xlat2.w;
  let x_3621 : f32 = u_xlat2.x;
  u_xlat2.x = (x_3619 * x_3621);
  let x_3625 : f32 = u_xlat10.y;
  u_xlat18.x = (-(x_3625) + 1.0f);
  let x_3630 : f32 = u_xlat3.x;
  let x_3632 : f32 = x_33.x_ProjectionParams2.x;
  u_xlat26 = (x_3630 * x_3632);
  let x_3635 : vec4<f32> = x_33.x_CameraViewXExtent[0i];
  let x_3637 : vec2<f32> = u_xlat10;
  let x_3641 : vec4<f32> = x_33.x_CameraViewTopLeftCorner[0i];
  let x_3643 : vec3<f32> = ((vec3<f32>(x_3635.x, x_3635.y, x_3635.z) * vec3<f32>(x_3637.x, x_3637.x, x_3637.x)) + vec3<f32>(x_3641.x, x_3641.y, x_3641.z));
  let x_3644 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_3643.x, x_3643.y, x_3643.z, x_3644.w);
  let x_3647 : vec4<f32> = x_33.x_CameraViewYExtent[0i];
  let x_3649 : vec2<f32> = u_xlat18;
  let x_3652 : vec4<f32> = u_xlat3;
  let x_3654 : vec3<f32> = ((vec3<f32>(x_3647.x, x_3647.y, x_3647.z) * vec3<f32>(x_3649.x, x_3649.x, x_3649.x)) + vec3<f32>(x_3652.x, x_3652.y, x_3652.z));
  let x_3655 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_3654.x, x_3654.y, x_3654.z, x_3655.w);
  let x_3657 : vec4<f32> = u_xlat3;
  let x_3659 : f32 = u_xlat26;
  let x_3662 : vec3<f32> = u_xlat8;
  u_xlat8 = ((vec3<f32>(x_3657.x, x_3657.y, x_3657.z) * vec3<f32>(x_3659, x_3659, x_3659)) + -(x_3662));
  let x_3665 : vec3<f32> = u_xlat8;
  let x_3666 : vec4<f32> = u_xlat1;
  u_xlat10.x = dot(x_3665, vec3<f32>(x_3666.x, x_3666.y, x_3666.z));
  let x_3670 : f32 = u_xlat0;
  let x_3674 : f32 = u_xlat10.x;
  u_xlat10.x = ((-(x_3670) * 0.004f) + x_3674);
  let x_3678 : f32 = u_xlat10.x;
  u_xlat10.x = max(x_3678, 0.0f);
  let x_3681 : vec3<f32> = u_xlat8;
  let x_3682 : vec3<f32> = u_xlat8;
  u_xlat8.x = dot(x_3681, x_3682);
  let x_3686 : f32 = u_xlat8.x;
  u_xlat8.x = (x_3686 + 0.0001f);
  let x_3690 : f32 = u_xlat8.x;
  u_xlat8.x = (1.0f / x_3690);
  let x_3694 : f32 = u_xlat8.x;
  let x_3696 : f32 = u_xlat10.x;
  u_xlat8.x = (x_3694 * x_3696);
  let x_3700 : f32 = u_xlat8.x;
  let x_3702 : f32 = u_xlat2.x;
  let x_3704 : f32 = u_xlat25;
  u_xlat8.x = ((x_3700 * x_3702) + x_3704);
  let x_3708 : f32 = u_xlat8.x;
  let x_3710 : f32 = x_33.x_SSAOParams.y;
  u_xlat8.x = (x_3708 * x_3710);
  let x_3714 : f32 = x_33.x_SSAOParams.w;
  u_xlat16 = (1.0f / x_3714);
  let x_3716 : f32 = u_xlat0;
  let x_3718 : f32 = u_xlat16;
  u_xlat0 = ((-(x_3716) * x_3718) + 1.0f);
  let x_3721 : f32 = u_xlat0;
  let x_3722 : f32 = u_xlat0;
  u_xlat0 = (x_3721 * x_3722);
  let x_3725 : f32 = u_xlat8.x;
  let x_3727 : f32 = x_33.x_SSAOParams.x;
  u_xlat8.x = (x_3725 * x_3727);
  let x_3730 : f32 = u_xlat0;
  let x_3732 : f32 = u_xlat8.x;
  u_xlat0 = (x_3730 * x_3732);
  let x_3734 : f32 = u_xlat0;
  u_xlat0 = (x_3734 * 0.083333336f);
  let x_3737 : f32 = u_xlat0;
  u_xlat0 = clamp(x_3737, 0.0f, 1.0f);
  let x_3739 : f32 = u_xlat0;
  u_xlat0 = log2(x_3739);
  let x_3741 : f32 = u_xlat0;
  u_xlat0 = (x_3741 * 0.600000024f);
  let x_3744 : f32 = u_xlat0;
  SV_Target0.x = exp2(x_3744);
  let x_3748 : vec4<f32> = u_xlat1;
  let x_3751 : vec3<f32> = ((vec3<f32>(x_3748.x, x_3748.y, x_3748.z) * vec3<f32>(0.5f, 0.5f, 0.5f)) + vec3<f32>(0.5f, 0.5f, 0.5f));
  let x_3752 : vec4<f32> = SV_Target0;
  SV_Target0 = vec4<f32>(x_3752.x, x_3751.x, x_3751.y, x_3751.z);
  return;
}

struct main_out {
  @location(0)
  SV_Target0_1 : vec4<f32>,
}

@fragment
fn main(@location(0) vs_TEXCOORD0_param : vec2<f32>, @builtin(position) gl_FragCoord_param : vec4<f32>) -> main_out {
  vs_TEXCOORD0 = vs_TEXCOORD0_param;
  gl_FragCoord = gl_FragCoord_param;
  main_1();
  return main_out(SV_Target0);
}

