type Arr = array<vec4<f32>, 2u>;

struct UnityPerDraw {
  unity_ObjectToWorld : mat4x4<f32>,
  unity_WorldToObject : mat4x4<f32>,
  unity_LODFade : vec4<f32>,
  unity_WorldTransformParams : vec4<f32>,
  unity_RenderingLayer : vec4<f32>,
  unity_LightData : vec4<f32>,
  unity_LightIndices : Arr,
  unity_ProbesOcclusion : vec4<f32>,
  unity_SpecCube0_HDR : vec4<f32>,
  unity_SpecCube1_HDR : vec4<f32>,
  unity_SpecCube0_BoxMax : vec4<f32>,
  unity_SpecCube0_BoxMin : vec4<f32>,
  unity_SpecCube0_ProbePosition : vec4<f32>,
  unity_SpecCube1_BoxMax : vec4<f32>,
  unity_SpecCube1_BoxMin : vec4<f32>,
  unity_SpecCube1_ProbePosition : vec4<f32>,
  unity_LightmapST : vec4<f32>,
  unity_DynamicLightmapST : vec4<f32>,
  unity_SHAr : vec4<f32>,
  unity_SHAg : vec4<f32>,
  unity_SHAb : vec4<f32>,
  unity_SHBr : vec4<f32>,
  unity_SHBg : vec4<f32>,
  unity_SHBb : vec4<f32>,
  unity_SHC : vec4<f32>,
  unity_RendererBounds_Min : vec4<f32>,
  unity_RendererBounds_Max : vec4<f32>,
  unity_MatrixPreviousM : mat4x4<f32>,
  unity_MatrixPreviousMI : mat4x4<f32>,
  unity_MotionVectorsParams : vec4<f32>,
  unity_SpriteColor : vec4<f32>,
  unity_SpriteProps : vec4<f32>,
}

struct PGlobals {
  x_ScaledScreenParams : vec4<f32>,
  x_GlobalMipBias : vec2<f32>,
  x_AlphaToMaskAvailable : f32,
  @size(4)
  padding : u32,
  x_MainLightPosition : vec4<f32>,
  x_MainLightColor : vec4<f32>,
  x_AmbientOcclusionParam : vec4<f32>,
  x_AdditionalLightsCount : vec4<f32>,
  x_WorldSpaceCameraPos : vec3<f32>,
  @size(4)
  padding_1 : u32,
  unity_OrthoParams : vec4<f32>,
  x_ScaleBiasRt : vec4<f32>,
  unity_MatrixV : mat4x4<f32>,
}

struct UnityPerMaterial {
  Texture2D_B222E8F_TexelSize : vec4<f32>,
  Color_C30C7CA3 : vec4<f32>,
  Texture2D_D9BFD5F1_TexelSize : vec4<f32>,
}

type Arr_1 = array<mat4x4<f32>, 5u>;

struct MainLightShadows {
  x_MainLightWorldToShadow : Arr_1,
  x_CascadeShadowSplitSpheres0 : vec4<f32>,
  x_CascadeShadowSplitSpheres1 : vec4<f32>,
  x_CascadeShadowSplitSpheres2 : vec4<f32>,
  x_CascadeShadowSplitSpheres3 : vec4<f32>,
  x_CascadeShadowSplitSphereRadii : vec4<f32>,
  x_MainLightShadowOffset0 : vec4<f32>,
  x_MainLightShadowOffset1 : vec4<f32>,
  x_MainLightShadowParams : vec4<f32>,
  x_MainLightShadowmapSize : vec4<f32>,
}

type Arr_2 = array<vec4<f32>, 256u>;

type Arr_3 = array<vec4<f32>, 256u>;

type Arr_4 = array<vec4<f32>, 256u>;

type Arr_5 = array<vec4<f32>, 256u>;

type Arr_6 = array<vec4<f32>, 256u>;

struct strided_arr {
  @size(16)
  el : f32,
}

type Arr_7 = array<strided_arr, 256u>;

struct AdditionalLights {
  x_AdditionalLightsPosition : Arr_6,
  x_AdditionalLightsColor : Arr_6,
  x_AdditionalLightsAttenuation : Arr_6,
  x_AdditionalLightsSpotDir : Arr_6,
  x_AdditionalLightsOcclusionProbes : Arr_6,
  x_AdditionalLightsLayerMasks : Arr_7,
}

var<private> gl_FragCoord : vec4<f32>;

var<private> vs_INTERP1 : vec3<f32>;

var<private> vs_INTERP2 : vec4<f32>;

@group(1) @binding(2) var<uniform> x_60 : UnityPerDraw;

@group(0) @binding(3) var Texture2D_B222E8F : texture_2d<f32>;

@group(0) @binding(8) var samplerTexture2D_B222E8F : sampler;

var<private> vs_INTERP3 : vec4<f32>;

@group(1) @binding(0) var<uniform> x_137 : PGlobals;

@group(1) @binding(4) var<uniform> x_147 : UnityPerMaterial;

@group(0) @binding(4) var Texture2D_D9BFD5F1 : texture_2d<f32>;

@group(0) @binding(9) var samplerTexture2D_D9BFD5F1 : sampler;

var<private> vs_INTERP4 : vec4<f32>;

var<private> vs_INTERP0 : vec3<f32>;

@group(1) @binding(3) var<uniform> x_248 : MainLightShadows;

@group(0) @binding(2) var x_MainLightShadowmapTexture : texture_depth_2d;

@group(0) @binding(7) var sampler_MainLightShadowmapTexture : sampler_comparison;

@group(0) @binding(1) var x_ScreenSpaceOcclusionTexture : texture_2d<f32>;

@group(0) @binding(6) var sampler_ScreenSpaceOcclusionTexture : sampler;

var<private> vs_INTERP9 : vec4<f32>;

@group(0) @binding(0) var unity_SpecCube0 : texture_cube<f32>;

@group(0) @binding(5) var samplerunity_SpecCube0 : sampler;

@group(1) @binding(1) var<uniform> x_3604 : AdditionalLights;

var<private> SV_Target0 : vec4<f32>;

fn main_1() {
  var hlslcc_FragCoord : vec4<f32>;
  var u_xlat0 : vec3<f32>;
  var u_xlatb21 : vec2<bool>;
  var u_xlat21 : vec3<f32>;
  var u_xlat1 : vec3<f32>;
  var u_xlat2 : vec3<f32>;
  var u_xlat3 : vec4<f32>;
  var u_xlat4 : vec4<f32>;
  var u_xlat5 : vec3<f32>;
  var u_xlat6 : vec4<f32>;
  var u_xlat7 : vec4<f32>;
  var u_xlat27 : vec3<f32>;
  var u_xlatb0 : bool;
  var u_xlatb64 : bool;
  var txVec0 : vec3<f32>;
  var txVec1 : vec3<f32>;
  var txVec2 : vec3<f32>;
  var txVec3 : vec3<f32>;
  var u_xlat64 : f32;
  var u_xlatb65 : bool;
  var u_xlat45 : vec2<f32>;
  var u_xlat8 : vec4<f32>;
  var u_xlat50 : vec2<f32>;
  var u_xlat9 : vec4<f32>;
  var u_xlat10 : vec4<f32>;
  var u_xlat11 : vec4<f32>;
  var u_xlat12 : vec4<f32>;
  var u_xlat13 : vec4<f32>;
  var u_xlat14 : vec4<f32>;
  var u_xlat65 : f32;
  var txVec4 : vec3<f32>;
  var txVec5 : vec3<f32>;
  var u_xlat24 : f32;
  var txVec6 : vec3<f32>;
  var txVec7 : vec3<f32>;
  var txVec8 : vec3<f32>;
  var txVec9 : vec3<f32>;
  var txVec10 : vec3<f32>;
  var txVec11 : vec3<f32>;
  var txVec12 : vec3<f32>;
  var u_xlat28 : vec3<f32>;
  var u_xlat15 : vec4<f32>;
  var u_xlat16 : vec4<f32>;
  var u_xlat29 : vec3<f32>;
  var u_xlat56 : vec2<f32>;
  var u_xlat51 : vec2<f32>;
  var u_xlat17 : vec4<f32>;
  var u_xlat18 : vec4<f32>;
  var u_xlat19 : vec4<f32>;
  var txVec13 : vec3<f32>;
  var txVec14 : vec3<f32>;
  var u_xlat68 : f32;
  var txVec15 : vec3<f32>;
  var txVec16 : vec3<f32>;
  var txVec17 : vec3<f32>;
  var txVec18 : vec3<f32>;
  var txVec19 : vec3<f32>;
  var txVec20 : vec3<f32>;
  var txVec21 : vec3<f32>;
  var txVec22 : vec3<f32>;
  var txVec23 : vec3<f32>;
  var txVec24 : vec3<f32>;
  var txVec25 : vec3<f32>;
  var txVec26 : vec3<f32>;
  var txVec27 : vec3<f32>;
  var txVec28 : vec3<f32>;
  var txVec29 : vec3<f32>;
  var u_xlatb23 : bool;
  var u_xlatb44 : bool;
  var u_xlat22 : vec3<f32>;
  var x_1595 : f32;
  var u_xlat23 : vec3<f32>;
  var u_xlat44 : f32;
  var x_1640 : f32;
  var u_xlat42 : f32;
  var x_1723 : f32;
  var x_1736 : f32;
  var x_1748 : f32;
  var u_xlat66 : f32;
  var u_xlat25 : vec2<f32>;
  var u_xlat67 : f32;
  var u_xlat46 : f32;
  var txVec30 : vec3<f32>;
  var txVec31 : vec3<f32>;
  var txVec32 : vec3<f32>;
  var txVec33 : vec3<f32>;
  var u_xlatb68 : bool;
  var u_xlat48 : vec2<f32>;
  var txVec34 : vec3<f32>;
  var txVec35 : vec3<f32>;
  var txVec36 : vec3<f32>;
  var txVec37 : vec3<f32>;
  var txVec38 : vec3<f32>;
  var txVec39 : vec3<f32>;
  var txVec40 : vec3<f32>;
  var txVec41 : vec3<f32>;
  var txVec42 : vec3<f32>;
  var u_xlat30 : vec2<f32>;
  var u_xlat57 : vec2<f32>;
  var u_xlat52 : vec2<f32>;
  var u_xlat20 : vec4<f32>;
  var txVec43 : vec3<f32>;
  var txVec44 : vec3<f32>;
  var u_xlat70 : f32;
  var txVec45 : vec3<f32>;
  var txVec46 : vec3<f32>;
  var txVec47 : vec3<f32>;
  var txVec48 : vec3<f32>;
  var txVec49 : vec3<f32>;
  var txVec50 : vec3<f32>;
  var txVec51 : vec3<f32>;
  var txVec52 : vec3<f32>;
  var txVec53 : vec3<f32>;
  var txVec54 : vec3<f32>;
  var txVec55 : vec3<f32>;
  var txVec56 : vec3<f32>;
  var txVec57 : vec3<f32>;
  var txVec58 : vec3<f32>;
  var txVec59 : vec3<f32>;
  var u_xlatb2 : bool;
  var x_3179 : f32;
  var u_xlatu0 : u32;
  var u_xlatu_loop_1 : u32;
  var u_xlatu65 : u32;
  var u_xlati25 : i32;
  var indexable : array<vec4<u32>, 4u>;
  var u_xlati65 : i32;
  var u_xlat69 : f32;
  var u_xlat_precise_vec4 : vec4<f32>;
  var u_xlat_precise_ivec4 : vec4<i32>;
  var u_xlat_precise_bvec4 : vec4<bool>;
  var u_xlat_precise_uvec4 : vec4<u32>;
  let x_13 : vec4<f32> = gl_FragCoord;
  let x_14 : vec3<f32> = vec3<f32>(x_13.x, x_13.y, x_13.z);
  let x_20 : f32 = gl_FragCoord.w;
  hlslcc_FragCoord = vec4<f32>(x_14.x, x_14.y, x_14.z, (1.0f / x_20));
  let x_30 : vec3<f32> = vs_INTERP1;
  let x_31 : vec3<f32> = vs_INTERP1;
  u_xlat0.x = dot(x_30, x_31);
  let x_37 : f32 = u_xlat0.x;
  u_xlat0.x = sqrt(x_37);
  let x_41 : f32 = u_xlat0.x;
  u_xlat0.x = (1.0f / x_41);
  let x_51 : f32 = vs_INTERP2.w;
  u_xlatb21.x = (0.0f < x_51);
  let x_65 : f32 = x_60.unity_WorldTransformParams.w;
  u_xlatb21.y = (x_65 >= 0.0f);
  let x_71 : bool = u_xlatb21.x;
  u_xlat21.x = select(-1.0f, 1.0f, x_71);
  let x_76 : bool = u_xlatb21.y;
  u_xlat21.y = select(-1.0f, 1.0f, x_76);
  let x_80 : f32 = u_xlat21.y;
  let x_82 : f32 = u_xlat21.x;
  u_xlat21.x = (x_80 * x_82);
  let x_86 : vec3<f32> = vs_INTERP1;
  let x_88 : vec4<f32> = vs_INTERP2;
  u_xlat1 = (vec3<f32>(x_86.z, x_86.x, x_86.y) * vec3<f32>(x_88.y, x_88.z, x_88.x));
  let x_91 : vec3<f32> = vs_INTERP1;
  let x_93 : vec4<f32> = vs_INTERP2;
  let x_96 : vec3<f32> = u_xlat1;
  u_xlat1 = ((vec3<f32>(x_91.y, x_91.z, x_91.x) * vec3<f32>(x_93.z, x_93.x, x_93.y)) + -(x_96));
  let x_99 : vec3<f32> = u_xlat21;
  let x_101 : vec3<f32> = u_xlat1;
  u_xlat21 = (vec3<f32>(x_99.x, x_99.x, x_99.x) * x_101);
  let x_103 : vec3<f32> = u_xlat0;
  let x_105 : vec3<f32> = vs_INTERP1;
  u_xlat1 = (vec3<f32>(x_103.x, x_103.x, x_103.x) * x_105);
  let x_108 : vec3<f32> = u_xlat0;
  let x_110 : vec4<f32> = vs_INTERP2;
  u_xlat2 = (vec3<f32>(x_108.x, x_108.x, x_108.x) * vec3<f32>(x_110.x, x_110.y, x_110.z));
  let x_114 : vec3<f32> = u_xlat21;
  let x_115 : vec3<f32> = u_xlat0;
  let x_117 : vec3<f32> = (x_114 * vec3<f32>(x_115.x, x_115.x, x_115.x));
  let x_118 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_117.x, x_117.y, x_117.z, x_118.w);
  let x_133 : vec4<f32> = vs_INTERP3;
  let x_140 : f32 = x_137.x_GlobalMipBias.x;
  let x_141 : vec4<f32> = textureSampleBias(Texture2D_B222E8F, samplerTexture2D_B222E8F, vec2<f32>(x_133.x, x_133.y), x_140);
  u_xlat4 = x_141;
  let x_143 : vec4<f32> = u_xlat4;
  let x_150 : vec4<f32> = x_147.Color_C30C7CA3;
  u_xlat5 = (vec3<f32>(x_143.x, x_143.y, x_143.z) * vec3<f32>(x_150.x, x_150.y, x_150.z));
  let x_159 : vec4<f32> = vs_INTERP3;
  let x_162 : f32 = x_137.x_GlobalMipBias.x;
  let x_163 : vec4<f32> = textureSampleBias(Texture2D_D9BFD5F1, samplerTexture2D_D9BFD5F1, vec2<f32>(x_159.x, x_159.y), x_162);
  u_xlat6 = vec4<f32>(x_163.w, x_163.x, x_163.y, x_163.z);
  let x_166 : vec4<f32> = u_xlat6;
  u_xlat7 = ((vec4<f32>(x_166.y, x_166.z, x_166.w, x_166.x) * vec4<f32>(2.0f, 2.0f, 2.0f, 2.0f)) + vec4<f32>(-1.0f, -1.0f, -1.0f, -1.0f));
  let x_173 : vec4<f32> = u_xlat7;
  let x_174 : vec4<f32> = u_xlat7;
  u_xlat0.x = dot(x_173, x_174);
  let x_178 : f32 = u_xlat0.x;
  u_xlat0.x = inverseSqrt(x_178);
  let x_182 : vec3<f32> = u_xlat0;
  let x_184 : vec4<f32> = u_xlat7;
  u_xlat27 = (vec3<f32>(x_182.x, x_182.x, x_182.x) * vec3<f32>(x_184.x, x_184.y, x_184.z));
  let x_189 : f32 = vs_INTERP4.y;
  u_xlat0.x = (x_189 * 200.0f);
  let x_194 : f32 = u_xlat0.x;
  u_xlat0.x = min(x_194, 1.0f);
  let x_197 : vec3<f32> = u_xlat0;
  let x_199 : vec4<f32> = u_xlat4;
  let x_201 : vec3<f32> = (vec3<f32>(x_197.x, x_197.x, x_197.x) * vec3<f32>(x_199.x, x_199.y, x_199.z));
  let x_202 : vec4<f32> = u_xlat4;
  u_xlat4 = vec4<f32>(x_201.x, x_201.y, x_201.z, x_202.w);
  let x_204 : vec4<f32> = u_xlat3;
  let x_206 : vec3<f32> = u_xlat27;
  let x_208 : vec3<f32> = (vec3<f32>(x_204.x, x_204.y, x_204.z) * vec3<f32>(x_206.y, x_206.y, x_206.y));
  let x_209 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_208.x, x_208.y, x_208.z, x_209.w);
  let x_211 : vec3<f32> = u_xlat27;
  let x_213 : vec3<f32> = u_xlat2;
  let x_215 : vec4<f32> = u_xlat3;
  u_xlat2 = ((vec3<f32>(x_211.x, x_211.x, x_211.x) * x_213) + vec3<f32>(x_215.x, x_215.y, x_215.z));
  let x_218 : vec3<f32> = u_xlat27;
  let x_220 : vec3<f32> = u_xlat1;
  let x_222 : vec3<f32> = u_xlat2;
  u_xlat1 = ((vec3<f32>(x_218.z, x_218.z, x_218.z) * x_220) + x_222);
  let x_224 : vec3<f32> = u_xlat1;
  let x_225 : vec3<f32> = u_xlat1;
  u_xlat0.x = dot(x_224, x_225);
  let x_229 : f32 = u_xlat0.x;
  u_xlat0.x = max(x_229, 1.17549435e-37f);
  let x_234 : f32 = u_xlat0.x;
  u_xlat0.x = inverseSqrt(x_234);
  let x_237 : vec3<f32> = u_xlat0;
  let x_239 : vec3<f32> = u_xlat1;
  u_xlat1 = (vec3<f32>(x_237.x, x_237.x, x_237.x) * x_239);
  let x_242 : vec3<f32> = vs_INTERP0;
  let x_251 : vec4<f32> = x_248.x_MainLightWorldToShadow[0i][1i];
  u_xlat2 = (vec3<f32>(x_242.y, x_242.y, x_242.y) * vec3<f32>(x_251.x, x_251.y, x_251.z));
  let x_255 : vec4<f32> = x_248.x_MainLightWorldToShadow[0i][0i];
  let x_257 : vec3<f32> = vs_INTERP0;
  let x_260 : vec3<f32> = u_xlat2;
  u_xlat2 = ((vec3<f32>(x_255.x, x_255.y, x_255.z) * vec3<f32>(x_257.x, x_257.x, x_257.x)) + x_260);
  let x_264 : vec4<f32> = x_248.x_MainLightWorldToShadow[0i][2i];
  let x_266 : vec3<f32> = vs_INTERP0;
  let x_269 : vec3<f32> = u_xlat2;
  u_xlat2 = ((vec3<f32>(x_264.x, x_264.y, x_264.z) * vec3<f32>(x_266.z, x_266.z, x_266.z)) + x_269);
  let x_271 : vec3<f32> = u_xlat2;
  let x_273 : vec4<f32> = x_248.x_MainLightWorldToShadow[0i][3i];
  u_xlat2 = (x_271 + vec3<f32>(x_273.x, x_273.y, x_273.z));
  let x_279 : f32 = x_248.x_MainLightShadowParams.y;
  u_xlatb0 = (0.0f < x_279);
  let x_281 : bool = u_xlatb0;
  if (x_281) {
    let x_286 : f32 = x_248.x_MainLightShadowParams.y;
    u_xlatb64 = (x_286 == 1.0f);
    let x_288 : bool = u_xlatb64;
    if (x_288) {
      let x_291 : vec3<f32> = u_xlat2;
      let x_295 : vec4<f32> = x_248.x_MainLightShadowOffset0;
      u_xlat3 = (vec4<f32>(x_291.x, x_291.y, x_291.x, x_291.y) + x_295);
      let x_298 : vec4<f32> = u_xlat3;
      let x_299 : vec2<f32> = vec2<f32>(x_298.x, x_298.y);
      let x_301 : f32 = u_xlat2.z;
      txVec0 = vec3<f32>(x_299.x, x_299.y, x_301);
      let x_313 : vec3<f32> = txVec0;
      let x_315 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_313.xy, x_313.z);
      u_xlat7.x = x_315;
      let x_318 : vec4<f32> = u_xlat3;
      let x_319 : vec2<f32> = vec2<f32>(x_318.z, x_318.w);
      let x_321 : f32 = u_xlat2.z;
      txVec1 = vec3<f32>(x_319.x, x_319.y, x_321);
      let x_328 : vec3<f32> = txVec1;
      let x_330 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_328.xy, x_328.z);
      u_xlat7.y = x_330;
      let x_332 : vec3<f32> = u_xlat2;
      let x_336 : vec4<f32> = x_248.x_MainLightShadowOffset1;
      u_xlat3 = (vec4<f32>(x_332.x, x_332.y, x_332.x, x_332.y) + x_336);
      let x_339 : vec4<f32> = u_xlat3;
      let x_340 : vec2<f32> = vec2<f32>(x_339.x, x_339.y);
      let x_342 : f32 = u_xlat2.z;
      txVec2 = vec3<f32>(x_340.x, x_340.y, x_342);
      let x_349 : vec3<f32> = txVec2;
      let x_351 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_349.xy, x_349.z);
      u_xlat7.z = x_351;
      let x_354 : vec4<f32> = u_xlat3;
      let x_355 : vec2<f32> = vec2<f32>(x_354.z, x_354.w);
      let x_357 : f32 = u_xlat2.z;
      txVec3 = vec3<f32>(x_355.x, x_355.y, x_357);
      let x_364 : vec3<f32> = txVec3;
      let x_366 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_364.xy, x_364.z);
      u_xlat7.w = x_366;
      let x_369 : vec4<f32> = u_xlat7;
      u_xlat64 = dot(x_369, vec4<f32>(0.25f, 0.25f, 0.25f, 0.25f));
    } else {
      let x_376 : f32 = x_248.x_MainLightShadowParams.y;
      u_xlatb65 = (x_376 == 2.0f);
      let x_378 : bool = u_xlatb65;
      if (x_378) {
        let x_381 : vec3<f32> = u_xlat2;
        let x_385 : vec4<f32> = x_248.x_MainLightShadowmapSize;
        let x_390 : vec2<f32> = ((vec2<f32>(x_381.x, x_381.y) * vec2<f32>(x_385.z, x_385.w)) + vec2<f32>(0.5f, 0.5f));
        let x_391 : vec4<f32> = u_xlat3;
        u_xlat3 = vec4<f32>(x_390.x, x_390.y, x_391.z, x_391.w);
        let x_393 : vec4<f32> = u_xlat3;
        let x_395 : vec2<f32> = floor(vec2<f32>(x_393.x, x_393.y));
        let x_396 : vec4<f32> = u_xlat3;
        u_xlat3 = vec4<f32>(x_395.x, x_395.y, x_396.z, x_396.w);
        let x_400 : vec3<f32> = u_xlat2;
        let x_403 : vec4<f32> = x_248.x_MainLightShadowmapSize;
        let x_406 : vec4<f32> = u_xlat3;
        u_xlat45 = ((vec2<f32>(x_400.x, x_400.y) * vec2<f32>(x_403.z, x_403.w)) + -(vec2<f32>(x_406.x, x_406.y)));
        let x_410 : vec2<f32> = u_xlat45;
        u_xlat7 = (vec4<f32>(x_410.x, x_410.x, x_410.y, x_410.y) + vec4<f32>(0.5f, 1.0f, 0.5f, 1.0f));
        let x_415 : vec4<f32> = u_xlat7;
        let x_417 : vec4<f32> = u_xlat7;
        u_xlat8 = (vec4<f32>(x_415.x, x_415.x, x_415.z, x_415.z) * vec4<f32>(x_417.x, x_417.x, x_417.z, x_417.z));
        let x_420 : vec4<f32> = u_xlat8;
        let x_424 : vec2<f32> = (vec2<f32>(x_420.y, x_420.w) * vec2<f32>(0.079999998f, 0.079999998f));
        let x_425 : vec4<f32> = u_xlat7;
        u_xlat7 = vec4<f32>(x_424.x, x_425.y, x_424.y, x_425.w);
        let x_427 : vec4<f32> = u_xlat8;
        let x_430 : vec2<f32> = u_xlat45;
        let x_432 : vec2<f32> = ((vec2<f32>(x_427.x, x_427.z) * vec2<f32>(0.5f, 0.5f)) + -(x_430));
        let x_433 : vec4<f32> = u_xlat8;
        u_xlat8 = vec4<f32>(x_432.x, x_432.y, x_433.z, x_433.w);
        let x_436 : vec2<f32> = u_xlat45;
        u_xlat50 = (-(x_436) + vec2<f32>(1.0f, 1.0f));
        let x_441 : vec2<f32> = u_xlat45;
        let x_443 : vec2<f32> = min(x_441, vec2<f32>(0.0f, 0.0f));
        let x_444 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_443.x, x_443.y, x_444.z, x_444.w);
        let x_446 : vec4<f32> = u_xlat9;
        let x_449 : vec4<f32> = u_xlat9;
        let x_452 : vec2<f32> = u_xlat50;
        let x_453 : vec2<f32> = ((-(vec2<f32>(x_446.x, x_446.y)) * vec2<f32>(x_449.x, x_449.y)) + x_452);
        let x_454 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_453.x, x_453.y, x_454.z, x_454.w);
        let x_456 : vec2<f32> = u_xlat45;
        u_xlat45 = max(x_456, vec2<f32>(0.0f, 0.0f));
        let x_458 : vec2<f32> = u_xlat45;
        let x_460 : vec2<f32> = u_xlat45;
        let x_462 : vec4<f32> = u_xlat7;
        u_xlat45 = ((-(x_458) * x_460) + vec2<f32>(x_462.y, x_462.w));
        let x_465 : vec4<f32> = u_xlat9;
        let x_467 : vec2<f32> = (vec2<f32>(x_465.x, x_465.y) + vec2<f32>(1.0f, 1.0f));
        let x_468 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_467.x, x_467.y, x_468.z, x_468.w);
        let x_470 : vec2<f32> = u_xlat45;
        u_xlat45 = (x_470 + vec2<f32>(1.0f, 1.0f));
        let x_473 : vec4<f32> = u_xlat8;
        let x_477 : vec2<f32> = (vec2<f32>(x_473.x, x_473.y) * vec2<f32>(0.159999996f, 0.159999996f));
        let x_478 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_477.x, x_477.y, x_478.z, x_478.w);
        let x_480 : vec2<f32> = u_xlat50;
        let x_481 : vec2<f32> = (x_480 * vec2<f32>(0.159999996f, 0.159999996f));
        let x_482 : vec4<f32> = u_xlat8;
        u_xlat8 = vec4<f32>(x_481.x, x_481.y, x_482.z, x_482.w);
        let x_484 : vec4<f32> = u_xlat9;
        let x_486 : vec2<f32> = (vec2<f32>(x_484.x, x_484.y) * vec2<f32>(0.159999996f, 0.159999996f));
        let x_487 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_486.x, x_486.y, x_487.z, x_487.w);
        let x_490 : vec2<f32> = u_xlat45;
        let x_491 : vec2<f32> = (x_490 * vec2<f32>(0.159999996f, 0.159999996f));
        let x_492 : vec4<f32> = u_xlat11;
        u_xlat11 = vec4<f32>(x_491.x, x_491.y, x_492.z, x_492.w);
        let x_494 : vec4<f32> = u_xlat7;
        u_xlat45 = (vec2<f32>(x_494.y, x_494.w) * vec2<f32>(0.159999996f, 0.159999996f));
        let x_498 : f32 = u_xlat9.x;
        u_xlat10.z = x_498;
        let x_501 : f32 = u_xlat45.x;
        u_xlat10.w = x_501;
        let x_504 : f32 = u_xlat11.x;
        u_xlat8.z = x_504;
        let x_507 : f32 = u_xlat7.x;
        u_xlat8.w = x_507;
        let x_510 : vec4<f32> = u_xlat8;
        let x_512 : vec4<f32> = u_xlat10;
        u_xlat12 = (vec4<f32>(x_510.z, x_510.w, x_510.x, x_510.z) + vec4<f32>(x_512.z, x_512.w, x_512.x, x_512.z));
        let x_516 : f32 = u_xlat10.y;
        u_xlat9.z = x_516;
        let x_519 : f32 = u_xlat45.y;
        u_xlat9.w = x_519;
        let x_522 : f32 = u_xlat8.y;
        u_xlat11.z = x_522;
        let x_525 : f32 = u_xlat7.z;
        u_xlat11.w = x_525;
        let x_527 : vec4<f32> = u_xlat9;
        let x_529 : vec4<f32> = u_xlat11;
        let x_531 : vec3<f32> = (vec3<f32>(x_527.z, x_527.y, x_527.w) + vec3<f32>(x_529.z, x_529.y, x_529.w));
        let x_532 : vec4<f32> = u_xlat7;
        u_xlat7 = vec4<f32>(x_531.x, x_531.y, x_531.z, x_532.w);
        let x_534 : vec4<f32> = u_xlat8;
        let x_536 : vec4<f32> = u_xlat12;
        let x_538 : vec3<f32> = (vec3<f32>(x_534.x, x_534.z, x_534.w) / vec3<f32>(x_536.z, x_536.w, x_536.y));
        let x_539 : vec4<f32> = u_xlat8;
        u_xlat8 = vec4<f32>(x_538.x, x_538.y, x_538.z, x_539.w);
        let x_541 : vec4<f32> = u_xlat8;
        let x_547 : vec3<f32> = (vec3<f32>(x_541.x, x_541.y, x_541.z) + vec3<f32>(-2.5f, -0.5f, 1.5f));
        let x_548 : vec4<f32> = u_xlat8;
        u_xlat8 = vec4<f32>(x_547.x, x_547.y, x_547.z, x_548.w);
        let x_550 : vec4<f32> = u_xlat11;
        let x_552 : vec4<f32> = u_xlat7;
        let x_554 : vec3<f32> = (vec3<f32>(x_550.z, x_550.y, x_550.w) / vec3<f32>(x_552.x, x_552.y, x_552.z));
        let x_555 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_554.x, x_554.y, x_554.z, x_555.w);
        let x_557 : vec4<f32> = u_xlat9;
        let x_559 : vec3<f32> = (vec3<f32>(x_557.x, x_557.y, x_557.z) + vec3<f32>(-2.5f, -0.5f, 1.5f));
        let x_560 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_559.x, x_559.y, x_559.z, x_560.w);
        let x_562 : vec4<f32> = u_xlat8;
        let x_565 : vec4<f32> = x_248.x_MainLightShadowmapSize;
        let x_567 : vec3<f32> = (vec3<f32>(x_562.y, x_562.x, x_562.z) * vec3<f32>(x_565.x, x_565.x, x_565.x));
        let x_568 : vec4<f32> = u_xlat8;
        u_xlat8 = vec4<f32>(x_567.x, x_567.y, x_567.z, x_568.w);
        let x_570 : vec4<f32> = u_xlat9;
        let x_573 : vec4<f32> = x_248.x_MainLightShadowmapSize;
        let x_575 : vec3<f32> = (vec3<f32>(x_570.x, x_570.y, x_570.z) * vec3<f32>(x_573.y, x_573.y, x_573.y));
        let x_576 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_575.x, x_575.y, x_575.z, x_576.w);
        let x_579 : f32 = u_xlat9.x;
        u_xlat8.w = x_579;
        let x_581 : vec4<f32> = u_xlat3;
        let x_584 : vec4<f32> = x_248.x_MainLightShadowmapSize;
        let x_587 : vec4<f32> = u_xlat8;
        u_xlat10 = ((vec4<f32>(x_581.x, x_581.y, x_581.x, x_581.y) * vec4<f32>(x_584.x, x_584.y, x_584.x, x_584.y)) + vec4<f32>(x_587.y, x_587.w, x_587.x, x_587.w));
        let x_590 : vec4<f32> = u_xlat3;
        let x_593 : vec4<f32> = x_248.x_MainLightShadowmapSize;
        let x_596 : vec4<f32> = u_xlat8;
        u_xlat45 = ((vec2<f32>(x_590.x, x_590.y) * vec2<f32>(x_593.x, x_593.y)) + vec2<f32>(x_596.z, x_596.w));
        let x_600 : f32 = u_xlat8.y;
        u_xlat9.w = x_600;
        let x_602 : vec4<f32> = u_xlat9;
        let x_603 : vec2<f32> = vec2<f32>(x_602.y, x_602.z);
        let x_604 : vec4<f32> = u_xlat8;
        u_xlat8 = vec4<f32>(x_604.x, x_603.x, x_604.z, x_603.y);
        let x_606 : vec4<f32> = u_xlat3;
        let x_609 : vec4<f32> = x_248.x_MainLightShadowmapSize;
        let x_612 : vec4<f32> = u_xlat8;
        u_xlat11 = ((vec4<f32>(x_606.x, x_606.y, x_606.x, x_606.y) * vec4<f32>(x_609.x, x_609.y, x_609.x, x_609.y)) + vec4<f32>(x_612.x, x_612.y, x_612.z, x_612.y));
        let x_615 : vec4<f32> = u_xlat3;
        let x_618 : vec4<f32> = x_248.x_MainLightShadowmapSize;
        let x_621 : vec4<f32> = u_xlat9;
        u_xlat9 = ((vec4<f32>(x_615.x, x_615.y, x_615.x, x_615.y) * vec4<f32>(x_618.x, x_618.y, x_618.x, x_618.y)) + vec4<f32>(x_621.w, x_621.y, x_621.w, x_621.z));
        let x_624 : vec4<f32> = u_xlat3;
        let x_627 : vec4<f32> = x_248.x_MainLightShadowmapSize;
        let x_630 : vec4<f32> = u_xlat8;
        u_xlat8 = ((vec4<f32>(x_624.x, x_624.y, x_624.x, x_624.y) * vec4<f32>(x_627.x, x_627.y, x_627.x, x_627.y)) + vec4<f32>(x_630.x, x_630.w, x_630.z, x_630.w));
        let x_634 : vec4<f32> = u_xlat7;
        let x_636 : vec4<f32> = u_xlat12;
        u_xlat13 = (vec4<f32>(x_634.x, x_634.x, x_634.x, x_634.y) * vec4<f32>(x_636.z, x_636.w, x_636.y, x_636.z));
        let x_640 : vec4<f32> = u_xlat7;
        let x_642 : vec4<f32> = u_xlat12;
        u_xlat14 = (vec4<f32>(x_640.y, x_640.y, x_640.z, x_640.z) * x_642);
        let x_646 : f32 = u_xlat7.z;
        let x_648 : f32 = u_xlat12.y;
        u_xlat65 = (x_646 * x_648);
        let x_651 : vec4<f32> = u_xlat10;
        let x_652 : vec2<f32> = vec2<f32>(x_651.x, x_651.y);
        let x_654 : f32 = u_xlat2.z;
        txVec4 = vec3<f32>(x_652.x, x_652.y, x_654);
        let x_661 : vec3<f32> = txVec4;
        let x_663 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_661.xy, x_661.z);
        u_xlat3.x = x_663;
        let x_666 : vec4<f32> = u_xlat10;
        let x_667 : vec2<f32> = vec2<f32>(x_666.z, x_666.w);
        let x_669 : f32 = u_xlat2.z;
        txVec5 = vec3<f32>(x_667.x, x_667.y, x_669);
        let x_677 : vec3<f32> = txVec5;
        let x_679 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_677.xy, x_677.z);
        u_xlat24 = x_679;
        let x_680 : f32 = u_xlat24;
        let x_682 : f32 = u_xlat13.y;
        u_xlat24 = (x_680 * x_682);
        let x_685 : f32 = u_xlat13.x;
        let x_687 : f32 = u_xlat3.x;
        let x_689 : f32 = u_xlat24;
        u_xlat3.x = ((x_685 * x_687) + x_689);
        let x_693 : vec2<f32> = u_xlat45;
        let x_695 : f32 = u_xlat2.z;
        txVec6 = vec3<f32>(x_693.x, x_693.y, x_695);
        let x_702 : vec3<f32> = txVec6;
        let x_704 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_702.xy, x_702.z);
        u_xlat24 = x_704;
        let x_706 : f32 = u_xlat13.z;
        let x_707 : f32 = u_xlat24;
        let x_710 : f32 = u_xlat3.x;
        u_xlat3.x = ((x_706 * x_707) + x_710);
        let x_714 : vec4<f32> = u_xlat9;
        let x_715 : vec2<f32> = vec2<f32>(x_714.x, x_714.y);
        let x_717 : f32 = u_xlat2.z;
        txVec7 = vec3<f32>(x_715.x, x_715.y, x_717);
        let x_724 : vec3<f32> = txVec7;
        let x_726 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_724.xy, x_724.z);
        u_xlat24 = x_726;
        let x_728 : f32 = u_xlat13.w;
        let x_729 : f32 = u_xlat24;
        let x_732 : f32 = u_xlat3.x;
        u_xlat3.x = ((x_728 * x_729) + x_732);
        let x_736 : vec4<f32> = u_xlat11;
        let x_737 : vec2<f32> = vec2<f32>(x_736.x, x_736.y);
        let x_739 : f32 = u_xlat2.z;
        txVec8 = vec3<f32>(x_737.x, x_737.y, x_739);
        let x_746 : vec3<f32> = txVec8;
        let x_748 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_746.xy, x_746.z);
        u_xlat24 = x_748;
        let x_750 : f32 = u_xlat14.x;
        let x_751 : f32 = u_xlat24;
        let x_754 : f32 = u_xlat3.x;
        u_xlat3.x = ((x_750 * x_751) + x_754);
        let x_758 : vec4<f32> = u_xlat11;
        let x_759 : vec2<f32> = vec2<f32>(x_758.z, x_758.w);
        let x_761 : f32 = u_xlat2.z;
        txVec9 = vec3<f32>(x_759.x, x_759.y, x_761);
        let x_768 : vec3<f32> = txVec9;
        let x_770 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_768.xy, x_768.z);
        u_xlat24 = x_770;
        let x_772 : f32 = u_xlat14.y;
        let x_773 : f32 = u_xlat24;
        let x_776 : f32 = u_xlat3.x;
        u_xlat3.x = ((x_772 * x_773) + x_776);
        let x_780 : vec4<f32> = u_xlat9;
        let x_781 : vec2<f32> = vec2<f32>(x_780.z, x_780.w);
        let x_783 : f32 = u_xlat2.z;
        txVec10 = vec3<f32>(x_781.x, x_781.y, x_783);
        let x_790 : vec3<f32> = txVec10;
        let x_792 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_790.xy, x_790.z);
        u_xlat24 = x_792;
        let x_794 : f32 = u_xlat14.z;
        let x_795 : f32 = u_xlat24;
        let x_798 : f32 = u_xlat3.x;
        u_xlat3.x = ((x_794 * x_795) + x_798);
        let x_802 : vec4<f32> = u_xlat8;
        let x_803 : vec2<f32> = vec2<f32>(x_802.x, x_802.y);
        let x_805 : f32 = u_xlat2.z;
        txVec11 = vec3<f32>(x_803.x, x_803.y, x_805);
        let x_812 : vec3<f32> = txVec11;
        let x_814 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_812.xy, x_812.z);
        u_xlat24 = x_814;
        let x_816 : f32 = u_xlat14.w;
        let x_817 : f32 = u_xlat24;
        let x_820 : f32 = u_xlat3.x;
        u_xlat3.x = ((x_816 * x_817) + x_820);
        let x_824 : vec4<f32> = u_xlat8;
        let x_825 : vec2<f32> = vec2<f32>(x_824.z, x_824.w);
        let x_827 : f32 = u_xlat2.z;
        txVec12 = vec3<f32>(x_825.x, x_825.y, x_827);
        let x_834 : vec3<f32> = txVec12;
        let x_836 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_834.xy, x_834.z);
        u_xlat24 = x_836;
        let x_837 : f32 = u_xlat65;
        let x_838 : f32 = u_xlat24;
        let x_841 : f32 = u_xlat3.x;
        u_xlat64 = ((x_837 * x_838) + x_841);
      } else {
        let x_844 : vec3<f32> = u_xlat2;
        let x_847 : vec4<f32> = x_248.x_MainLightShadowmapSize;
        let x_850 : vec2<f32> = ((vec2<f32>(x_844.x, x_844.y) * vec2<f32>(x_847.z, x_847.w)) + vec2<f32>(0.5f, 0.5f));
        let x_851 : vec4<f32> = u_xlat3;
        u_xlat3 = vec4<f32>(x_850.x, x_850.y, x_851.z, x_851.w);
        let x_853 : vec4<f32> = u_xlat3;
        let x_855 : vec2<f32> = floor(vec2<f32>(x_853.x, x_853.y));
        let x_856 : vec4<f32> = u_xlat3;
        u_xlat3 = vec4<f32>(x_855.x, x_855.y, x_856.z, x_856.w);
        let x_858 : vec3<f32> = u_xlat2;
        let x_861 : vec4<f32> = x_248.x_MainLightShadowmapSize;
        let x_864 : vec4<f32> = u_xlat3;
        u_xlat45 = ((vec2<f32>(x_858.x, x_858.y) * vec2<f32>(x_861.z, x_861.w)) + -(vec2<f32>(x_864.x, x_864.y)));
        let x_868 : vec2<f32> = u_xlat45;
        u_xlat7 = (vec4<f32>(x_868.x, x_868.x, x_868.y, x_868.y) + vec4<f32>(0.5f, 1.0f, 0.5f, 1.0f));
        let x_871 : vec4<f32> = u_xlat7;
        let x_873 : vec4<f32> = u_xlat7;
        u_xlat8 = (vec4<f32>(x_871.x, x_871.x, x_871.z, x_871.z) * vec4<f32>(x_873.x, x_873.x, x_873.z, x_873.z));
        let x_876 : vec4<f32> = u_xlat8;
        let x_880 : vec2<f32> = (vec2<f32>(x_876.y, x_876.w) * vec2<f32>(0.040816002f, 0.040816002f));
        let x_881 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_881.x, x_880.x, x_881.z, x_880.y);
        let x_883 : vec4<f32> = u_xlat8;
        let x_886 : vec2<f32> = u_xlat45;
        let x_888 : vec2<f32> = ((vec2<f32>(x_883.x, x_883.z) * vec2<f32>(0.5f, 0.5f)) + -(x_886));
        let x_889 : vec4<f32> = u_xlat7;
        u_xlat7 = vec4<f32>(x_888.x, x_889.y, x_888.y, x_889.w);
        let x_891 : vec2<f32> = u_xlat45;
        let x_893 : vec2<f32> = (-(x_891) + vec2<f32>(1.0f, 1.0f));
        let x_894 : vec4<f32> = u_xlat8;
        u_xlat8 = vec4<f32>(x_893.x, x_893.y, x_894.z, x_894.w);
        let x_896 : vec2<f32> = u_xlat45;
        u_xlat50 = min(x_896, vec2<f32>(0.0f, 0.0f));
        let x_898 : vec2<f32> = u_xlat50;
        let x_900 : vec2<f32> = u_xlat50;
        let x_902 : vec4<f32> = u_xlat8;
        let x_904 : vec2<f32> = ((-(x_898) * x_900) + vec2<f32>(x_902.x, x_902.y));
        let x_905 : vec4<f32> = u_xlat8;
        u_xlat8 = vec4<f32>(x_904.x, x_904.y, x_905.z, x_905.w);
        let x_907 : vec2<f32> = u_xlat45;
        u_xlat50 = max(x_907, vec2<f32>(0.0f, 0.0f));
        let x_910 : vec2<f32> = u_xlat50;
        let x_912 : vec2<f32> = u_xlat50;
        let x_914 : vec4<f32> = u_xlat7;
        let x_916 : vec2<f32> = ((-(x_910) * x_912) + vec2<f32>(x_914.y, x_914.w));
        let x_917 : vec3<f32> = u_xlat28;
        u_xlat28 = vec3<f32>(x_916.x, x_917.y, x_916.y);
        let x_919 : vec4<f32> = u_xlat8;
        let x_922 : vec2<f32> = (vec2<f32>(x_919.x, x_919.y) + vec2<f32>(2.0f, 2.0f));
        let x_923 : vec4<f32> = u_xlat8;
        u_xlat8 = vec4<f32>(x_922.x, x_922.y, x_923.z, x_923.w);
        let x_925 : vec3<f32> = u_xlat28;
        let x_927 : vec2<f32> = (vec2<f32>(x_925.x, x_925.z) + vec2<f32>(2.0f, 2.0f));
        let x_928 : vec4<f32> = u_xlat7;
        u_xlat7 = vec4<f32>(x_928.x, x_927.x, x_928.z, x_927.y);
        let x_931 : f32 = u_xlat7.y;
        u_xlat10.z = (x_931 * 0.081632003f);
        let x_935 : vec4<f32> = u_xlat7;
        let x_938 : vec3<f32> = (vec3<f32>(x_935.z, x_935.x, x_935.w) * vec3<f32>(0.081632003f, 0.081632003f, 0.081632003f));
        let x_939 : vec4<f32> = u_xlat11;
        u_xlat11 = vec4<f32>(x_938.x, x_938.y, x_938.z, x_939.w);
        let x_941 : vec4<f32> = u_xlat8;
        let x_944 : vec2<f32> = (vec2<f32>(x_941.x, x_941.y) * vec2<f32>(0.081632003f, 0.081632003f));
        let x_945 : vec4<f32> = u_xlat7;
        u_xlat7 = vec4<f32>(x_944.x, x_944.y, x_945.z, x_945.w);
        let x_948 : f32 = u_xlat11.y;
        u_xlat10.x = x_948;
        let x_950 : vec2<f32> = u_xlat45;
        let x_957 : vec2<f32> = ((vec2<f32>(x_950.x, x_950.x) * vec2<f32>(-0.081632003f, 0.081632003f)) + vec2<f32>(0.163264006f, 0.081632003f));
        let x_958 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_958.x, x_957.x, x_958.z, x_957.y);
        let x_960 : vec2<f32> = u_xlat45;
        let x_964 : vec2<f32> = ((vec2<f32>(x_960.x, x_960.x) * vec2<f32>(-0.081632003f, 0.081632003f)) + vec2<f32>(0.081632003f, 0.163264006f));
        let x_965 : vec4<f32> = u_xlat8;
        u_xlat8 = vec4<f32>(x_964.x, x_965.y, x_964.y, x_965.w);
        let x_968 : f32 = u_xlat7.x;
        u_xlat8.y = x_968;
        let x_971 : f32 = u_xlat9.y;
        u_xlat8.w = x_971;
        let x_973 : vec4<f32> = u_xlat8;
        let x_974 : vec4<f32> = u_xlat10;
        u_xlat10 = (x_973 + x_974);
        let x_976 : vec2<f32> = u_xlat45;
        let x_979 : vec2<f32> = ((vec2<f32>(x_976.y, x_976.y) * vec2<f32>(-0.081632003f, 0.081632003f)) + vec2<f32>(0.163264006f, 0.081632003f));
        let x_980 : vec4<f32> = u_xlat11;
        u_xlat11 = vec4<f32>(x_980.x, x_979.x, x_980.z, x_979.y);
        let x_982 : vec2<f32> = u_xlat45;
        let x_985 : vec2<f32> = ((vec2<f32>(x_982.y, x_982.y) * vec2<f32>(-0.081632003f, 0.081632003f)) + vec2<f32>(0.081632003f, 0.163264006f));
        let x_986 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_985.x, x_986.y, x_985.y, x_986.w);
        let x_989 : f32 = u_xlat7.y;
        u_xlat9.y = x_989;
        let x_991 : vec4<f32> = u_xlat9;
        let x_992 : vec4<f32> = u_xlat11;
        u_xlat7 = (x_991 + x_992);
        let x_994 : vec4<f32> = u_xlat8;
        let x_995 : vec4<f32> = u_xlat10;
        u_xlat8 = (x_994 / x_995);
        let x_997 : vec4<f32> = u_xlat8;
        u_xlat8 = (x_997 + vec4<f32>(-3.5f, -1.5f, 0.5f, 2.5f));
        let x_1003 : vec4<f32> = u_xlat9;
        let x_1004 : vec4<f32> = u_xlat7;
        u_xlat9 = (x_1003 / x_1004);
        let x_1006 : vec4<f32> = u_xlat9;
        u_xlat9 = (x_1006 + vec4<f32>(-3.5f, -1.5f, 0.5f, 2.5f));
        let x_1008 : vec4<f32> = u_xlat8;
        let x_1011 : vec4<f32> = x_248.x_MainLightShadowmapSize;
        u_xlat8 = (vec4<f32>(x_1008.w, x_1008.x, x_1008.y, x_1008.z) * vec4<f32>(x_1011.x, x_1011.x, x_1011.x, x_1011.x));
        let x_1014 : vec4<f32> = u_xlat9;
        let x_1017 : vec4<f32> = x_248.x_MainLightShadowmapSize;
        u_xlat9 = (vec4<f32>(x_1014.x, x_1014.w, x_1014.y, x_1014.z) * vec4<f32>(x_1017.y, x_1017.y, x_1017.y, x_1017.y));
        let x_1020 : vec4<f32> = u_xlat8;
        let x_1021 : vec3<f32> = vec3<f32>(x_1020.y, x_1020.z, x_1020.w);
        let x_1022 : vec4<f32> = u_xlat11;
        u_xlat11 = vec4<f32>(x_1021.x, x_1022.y, x_1021.y, x_1021.z);
        let x_1025 : f32 = u_xlat9.x;
        u_xlat11.y = x_1025;
        let x_1027 : vec4<f32> = u_xlat3;
        let x_1030 : vec4<f32> = x_248.x_MainLightShadowmapSize;
        let x_1033 : vec4<f32> = u_xlat11;
        u_xlat12 = ((vec4<f32>(x_1027.x, x_1027.y, x_1027.x, x_1027.y) * vec4<f32>(x_1030.x, x_1030.y, x_1030.x, x_1030.y)) + vec4<f32>(x_1033.x, x_1033.y, x_1033.z, x_1033.y));
        let x_1036 : vec4<f32> = u_xlat3;
        let x_1039 : vec4<f32> = x_248.x_MainLightShadowmapSize;
        let x_1042 : vec4<f32> = u_xlat11;
        u_xlat45 = ((vec2<f32>(x_1036.x, x_1036.y) * vec2<f32>(x_1039.x, x_1039.y)) + vec2<f32>(x_1042.w, x_1042.y));
        let x_1046 : f32 = u_xlat11.y;
        u_xlat8.y = x_1046;
        let x_1049 : f32 = u_xlat9.z;
        u_xlat11.y = x_1049;
        let x_1051 : vec4<f32> = u_xlat3;
        let x_1054 : vec4<f32> = x_248.x_MainLightShadowmapSize;
        let x_1057 : vec4<f32> = u_xlat11;
        u_xlat13 = ((vec4<f32>(x_1051.x, x_1051.y, x_1051.x, x_1051.y) * vec4<f32>(x_1054.x, x_1054.y, x_1054.x, x_1054.y)) + vec4<f32>(x_1057.x, x_1057.y, x_1057.z, x_1057.y));
        let x_1060 : vec4<f32> = u_xlat3;
        let x_1063 : vec4<f32> = x_248.x_MainLightShadowmapSize;
        let x_1066 : vec4<f32> = u_xlat11;
        let x_1068 : vec2<f32> = ((vec2<f32>(x_1060.x, x_1060.y) * vec2<f32>(x_1063.x, x_1063.y)) + vec2<f32>(x_1066.w, x_1066.y));
        let x_1069 : vec4<f32> = u_xlat14;
        u_xlat14 = vec4<f32>(x_1068.x, x_1068.y, x_1069.z, x_1069.w);
        let x_1072 : f32 = u_xlat11.y;
        u_xlat8.z = x_1072;
        let x_1075 : vec4<f32> = u_xlat3;
        let x_1078 : vec4<f32> = x_248.x_MainLightShadowmapSize;
        let x_1081 : vec4<f32> = u_xlat8;
        u_xlat15 = ((vec4<f32>(x_1075.x, x_1075.y, x_1075.x, x_1075.y) * vec4<f32>(x_1078.x, x_1078.y, x_1078.x, x_1078.y)) + vec4<f32>(x_1081.x, x_1081.y, x_1081.x, x_1081.z));
        let x_1085 : f32 = u_xlat9.w;
        u_xlat11.y = x_1085;
        let x_1088 : vec4<f32> = u_xlat3;
        let x_1091 : vec4<f32> = x_248.x_MainLightShadowmapSize;
        let x_1094 : vec4<f32> = u_xlat11;
        u_xlat16 = ((vec4<f32>(x_1088.x, x_1088.y, x_1088.x, x_1088.y) * vec4<f32>(x_1091.x, x_1091.y, x_1091.x, x_1091.y)) + vec4<f32>(x_1094.x, x_1094.y, x_1094.z, x_1094.y));
        let x_1098 : vec4<f32> = u_xlat3;
        let x_1101 : vec4<f32> = x_248.x_MainLightShadowmapSize;
        let x_1104 : vec4<f32> = u_xlat11;
        let x_1106 : vec2<f32> = ((vec2<f32>(x_1098.x, x_1098.y) * vec2<f32>(x_1101.x, x_1101.y)) + vec2<f32>(x_1104.w, x_1104.y));
        let x_1107 : vec3<f32> = u_xlat29;
        u_xlat29 = vec3<f32>(x_1106.x, x_1106.y, x_1107.z);
        let x_1110 : f32 = u_xlat11.y;
        u_xlat8.w = x_1110;
        let x_1113 : vec4<f32> = u_xlat3;
        let x_1116 : vec4<f32> = x_248.x_MainLightShadowmapSize;
        let x_1119 : vec4<f32> = u_xlat8;
        u_xlat56 = ((vec2<f32>(x_1113.x, x_1113.y) * vec2<f32>(x_1116.x, x_1116.y)) + vec2<f32>(x_1119.x, x_1119.w));
        let x_1122 : vec4<f32> = u_xlat11;
        let x_1123 : vec3<f32> = vec3<f32>(x_1122.x, x_1122.z, x_1122.w);
        let x_1124 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_1123.x, x_1124.y, x_1123.y, x_1123.z);
        let x_1126 : vec4<f32> = u_xlat3;
        let x_1129 : vec4<f32> = x_248.x_MainLightShadowmapSize;
        let x_1132 : vec4<f32> = u_xlat9;
        u_xlat11 = ((vec4<f32>(x_1126.x, x_1126.y, x_1126.x, x_1126.y) * vec4<f32>(x_1129.x, x_1129.y, x_1129.x, x_1129.y)) + vec4<f32>(x_1132.x, x_1132.y, x_1132.z, x_1132.y));
        let x_1136 : vec4<f32> = u_xlat3;
        let x_1139 : vec4<f32> = x_248.x_MainLightShadowmapSize;
        let x_1142 : vec4<f32> = u_xlat9;
        u_xlat51 = ((vec2<f32>(x_1136.x, x_1136.y) * vec2<f32>(x_1139.x, x_1139.y)) + vec2<f32>(x_1142.w, x_1142.y));
        let x_1146 : f32 = u_xlat8.x;
        u_xlat9.x = x_1146;
        let x_1148 : vec4<f32> = u_xlat3;
        let x_1151 : vec4<f32> = x_248.x_MainLightShadowmapSize;
        let x_1154 : vec4<f32> = u_xlat9;
        let x_1156 : vec2<f32> = ((vec2<f32>(x_1148.x, x_1148.y) * vec2<f32>(x_1151.x, x_1151.y)) + vec2<f32>(x_1154.x, x_1154.y));
        let x_1157 : vec4<f32> = u_xlat3;
        u_xlat3 = vec4<f32>(x_1156.x, x_1156.y, x_1157.z, x_1157.w);
        let x_1160 : vec4<f32> = u_xlat7;
        let x_1162 : vec4<f32> = u_xlat10;
        u_xlat17 = (vec4<f32>(x_1160.x, x_1160.x, x_1160.x, x_1160.x) * x_1162);
        let x_1165 : vec4<f32> = u_xlat7;
        let x_1167 : vec4<f32> = u_xlat10;
        u_xlat18 = (vec4<f32>(x_1165.y, x_1165.y, x_1165.y, x_1165.y) * x_1167);
        let x_1170 : vec4<f32> = u_xlat7;
        let x_1172 : vec4<f32> = u_xlat10;
        u_xlat19 = (vec4<f32>(x_1170.z, x_1170.z, x_1170.z, x_1170.z) * x_1172);
        let x_1174 : vec4<f32> = u_xlat7;
        let x_1176 : vec4<f32> = u_xlat10;
        u_xlat7 = (vec4<f32>(x_1174.w, x_1174.w, x_1174.w, x_1174.w) * x_1176);
        let x_1179 : vec4<f32> = u_xlat12;
        let x_1180 : vec2<f32> = vec2<f32>(x_1179.x, x_1179.y);
        let x_1182 : f32 = u_xlat2.z;
        txVec13 = vec3<f32>(x_1180.x, x_1180.y, x_1182);
        let x_1189 : vec3<f32> = txVec13;
        let x_1191 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1189.xy, x_1189.z);
        u_xlat65 = x_1191;
        let x_1193 : vec4<f32> = u_xlat12;
        let x_1194 : vec2<f32> = vec2<f32>(x_1193.z, x_1193.w);
        let x_1196 : f32 = u_xlat2.z;
        txVec14 = vec3<f32>(x_1194.x, x_1194.y, x_1196);
        let x_1204 : vec3<f32> = txVec14;
        let x_1206 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1204.xy, x_1204.z);
        u_xlat68 = x_1206;
        let x_1207 : f32 = u_xlat68;
        let x_1209 : f32 = u_xlat17.y;
        u_xlat68 = (x_1207 * x_1209);
        let x_1212 : f32 = u_xlat17.x;
        let x_1213 : f32 = u_xlat65;
        let x_1215 : f32 = u_xlat68;
        u_xlat65 = ((x_1212 * x_1213) + x_1215);
        let x_1218 : vec2<f32> = u_xlat45;
        let x_1220 : f32 = u_xlat2.z;
        txVec15 = vec3<f32>(x_1218.x, x_1218.y, x_1220);
        let x_1227 : vec3<f32> = txVec15;
        let x_1229 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1227.xy, x_1227.z);
        u_xlat45.x = x_1229;
        let x_1232 : f32 = u_xlat17.z;
        let x_1234 : f32 = u_xlat45.x;
        let x_1236 : f32 = u_xlat65;
        u_xlat65 = ((x_1232 * x_1234) + x_1236);
        let x_1239 : vec4<f32> = u_xlat15;
        let x_1240 : vec2<f32> = vec2<f32>(x_1239.x, x_1239.y);
        let x_1242 : f32 = u_xlat2.z;
        txVec16 = vec3<f32>(x_1240.x, x_1240.y, x_1242);
        let x_1249 : vec3<f32> = txVec16;
        let x_1251 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1249.xy, x_1249.z);
        u_xlat45.x = x_1251;
        let x_1254 : f32 = u_xlat17.w;
        let x_1256 : f32 = u_xlat45.x;
        let x_1258 : f32 = u_xlat65;
        u_xlat65 = ((x_1254 * x_1256) + x_1258);
        let x_1261 : vec4<f32> = u_xlat13;
        let x_1262 : vec2<f32> = vec2<f32>(x_1261.x, x_1261.y);
        let x_1264 : f32 = u_xlat2.z;
        txVec17 = vec3<f32>(x_1262.x, x_1262.y, x_1264);
        let x_1271 : vec3<f32> = txVec17;
        let x_1273 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1271.xy, x_1271.z);
        u_xlat45.x = x_1273;
        let x_1276 : f32 = u_xlat18.x;
        let x_1278 : f32 = u_xlat45.x;
        let x_1280 : f32 = u_xlat65;
        u_xlat65 = ((x_1276 * x_1278) + x_1280);
        let x_1283 : vec4<f32> = u_xlat13;
        let x_1284 : vec2<f32> = vec2<f32>(x_1283.z, x_1283.w);
        let x_1286 : f32 = u_xlat2.z;
        txVec18 = vec3<f32>(x_1284.x, x_1284.y, x_1286);
        let x_1293 : vec3<f32> = txVec18;
        let x_1295 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1293.xy, x_1293.z);
        u_xlat45.x = x_1295;
        let x_1298 : f32 = u_xlat18.y;
        let x_1300 : f32 = u_xlat45.x;
        let x_1302 : f32 = u_xlat65;
        u_xlat65 = ((x_1298 * x_1300) + x_1302);
        let x_1305 : vec4<f32> = u_xlat14;
        let x_1306 : vec2<f32> = vec2<f32>(x_1305.x, x_1305.y);
        let x_1308 : f32 = u_xlat2.z;
        txVec19 = vec3<f32>(x_1306.x, x_1306.y, x_1308);
        let x_1315 : vec3<f32> = txVec19;
        let x_1317 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1315.xy, x_1315.z);
        u_xlat45.x = x_1317;
        let x_1320 : f32 = u_xlat18.z;
        let x_1322 : f32 = u_xlat45.x;
        let x_1324 : f32 = u_xlat65;
        u_xlat65 = ((x_1320 * x_1322) + x_1324);
        let x_1327 : vec4<f32> = u_xlat15;
        let x_1328 : vec2<f32> = vec2<f32>(x_1327.z, x_1327.w);
        let x_1330 : f32 = u_xlat2.z;
        txVec20 = vec3<f32>(x_1328.x, x_1328.y, x_1330);
        let x_1337 : vec3<f32> = txVec20;
        let x_1339 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1337.xy, x_1337.z);
        u_xlat45.x = x_1339;
        let x_1342 : f32 = u_xlat18.w;
        let x_1344 : f32 = u_xlat45.x;
        let x_1346 : f32 = u_xlat65;
        u_xlat65 = ((x_1342 * x_1344) + x_1346);
        let x_1349 : vec4<f32> = u_xlat16;
        let x_1350 : vec2<f32> = vec2<f32>(x_1349.x, x_1349.y);
        let x_1352 : f32 = u_xlat2.z;
        txVec21 = vec3<f32>(x_1350.x, x_1350.y, x_1352);
        let x_1359 : vec3<f32> = txVec21;
        let x_1361 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1359.xy, x_1359.z);
        u_xlat45.x = x_1361;
        let x_1364 : f32 = u_xlat19.x;
        let x_1366 : f32 = u_xlat45.x;
        let x_1368 : f32 = u_xlat65;
        u_xlat65 = ((x_1364 * x_1366) + x_1368);
        let x_1371 : vec4<f32> = u_xlat16;
        let x_1372 : vec2<f32> = vec2<f32>(x_1371.z, x_1371.w);
        let x_1374 : f32 = u_xlat2.z;
        txVec22 = vec3<f32>(x_1372.x, x_1372.y, x_1374);
        let x_1381 : vec3<f32> = txVec22;
        let x_1383 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1381.xy, x_1381.z);
        u_xlat45.x = x_1383;
        let x_1386 : f32 = u_xlat19.y;
        let x_1388 : f32 = u_xlat45.x;
        let x_1390 : f32 = u_xlat65;
        u_xlat65 = ((x_1386 * x_1388) + x_1390);
        let x_1393 : vec3<f32> = u_xlat29;
        let x_1394 : vec2<f32> = vec2<f32>(x_1393.x, x_1393.y);
        let x_1396 : f32 = u_xlat2.z;
        txVec23 = vec3<f32>(x_1394.x, x_1394.y, x_1396);
        let x_1403 : vec3<f32> = txVec23;
        let x_1405 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1403.xy, x_1403.z);
        u_xlat45.x = x_1405;
        let x_1408 : f32 = u_xlat19.z;
        let x_1410 : f32 = u_xlat45.x;
        let x_1412 : f32 = u_xlat65;
        u_xlat65 = ((x_1408 * x_1410) + x_1412);
        let x_1415 : vec2<f32> = u_xlat56;
        let x_1417 : f32 = u_xlat2.z;
        txVec24 = vec3<f32>(x_1415.x, x_1415.y, x_1417);
        let x_1424 : vec3<f32> = txVec24;
        let x_1426 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1424.xy, x_1424.z);
        u_xlat45.x = x_1426;
        let x_1429 : f32 = u_xlat19.w;
        let x_1431 : f32 = u_xlat45.x;
        let x_1433 : f32 = u_xlat65;
        u_xlat65 = ((x_1429 * x_1431) + x_1433);
        let x_1436 : vec4<f32> = u_xlat11;
        let x_1437 : vec2<f32> = vec2<f32>(x_1436.x, x_1436.y);
        let x_1439 : f32 = u_xlat2.z;
        txVec25 = vec3<f32>(x_1437.x, x_1437.y, x_1439);
        let x_1446 : vec3<f32> = txVec25;
        let x_1448 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1446.xy, x_1446.z);
        u_xlat45.x = x_1448;
        let x_1451 : f32 = u_xlat7.x;
        let x_1453 : f32 = u_xlat45.x;
        let x_1455 : f32 = u_xlat65;
        u_xlat65 = ((x_1451 * x_1453) + x_1455);
        let x_1458 : vec4<f32> = u_xlat11;
        let x_1459 : vec2<f32> = vec2<f32>(x_1458.z, x_1458.w);
        let x_1461 : f32 = u_xlat2.z;
        txVec26 = vec3<f32>(x_1459.x, x_1459.y, x_1461);
        let x_1468 : vec3<f32> = txVec26;
        let x_1470 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1468.xy, x_1468.z);
        u_xlat45.x = x_1470;
        let x_1473 : f32 = u_xlat7.y;
        let x_1475 : f32 = u_xlat45.x;
        let x_1477 : f32 = u_xlat65;
        u_xlat65 = ((x_1473 * x_1475) + x_1477);
        let x_1480 : vec2<f32> = u_xlat51;
        let x_1482 : f32 = u_xlat2.z;
        txVec27 = vec3<f32>(x_1480.x, x_1480.y, x_1482);
        let x_1489 : vec3<f32> = txVec27;
        let x_1491 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1489.xy, x_1489.z);
        u_xlat45.x = x_1491;
        let x_1494 : f32 = u_xlat7.z;
        let x_1496 : f32 = u_xlat45.x;
        let x_1498 : f32 = u_xlat65;
        u_xlat65 = ((x_1494 * x_1496) + x_1498);
        let x_1501 : vec4<f32> = u_xlat3;
        let x_1502 : vec2<f32> = vec2<f32>(x_1501.x, x_1501.y);
        let x_1504 : f32 = u_xlat2.z;
        txVec28 = vec3<f32>(x_1502.x, x_1502.y, x_1504);
        let x_1511 : vec3<f32> = txVec28;
        let x_1513 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1511.xy, x_1511.z);
        u_xlat3.x = x_1513;
        let x_1516 : f32 = u_xlat7.w;
        let x_1518 : f32 = u_xlat3.x;
        let x_1520 : f32 = u_xlat65;
        u_xlat64 = ((x_1516 * x_1518) + x_1520);
      }
    }
  } else {
    let x_1524 : vec3<f32> = u_xlat2;
    let x_1525 : vec2<f32> = vec2<f32>(x_1524.x, x_1524.y);
    let x_1527 : f32 = u_xlat2.z;
    txVec29 = vec3<f32>(x_1525.x, x_1525.y, x_1527);
    let x_1534 : vec3<f32> = txVec29;
    let x_1536 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1534.xy, x_1534.z);
    u_xlat64 = x_1536;
  }
  let x_1538 : f32 = x_248.x_MainLightShadowParams.x;
  u_xlat2.x = (-(x_1538) + 1.0f);
  let x_1542 : f32 = u_xlat64;
  let x_1544 : f32 = x_248.x_MainLightShadowParams.x;
  let x_1547 : f32 = u_xlat2.x;
  u_xlat64 = ((x_1542 * x_1544) + x_1547);
  let x_1551 : f32 = u_xlat2.z;
  u_xlatb23 = (0.0f >= x_1551);
  let x_1555 : f32 = u_xlat2.z;
  u_xlatb44 = (x_1555 >= 1.0f);
  let x_1557 : bool = u_xlatb44;
  let x_1558 : bool = u_xlatb23;
  u_xlatb23 = (x_1557 | x_1558);
  let x_1560 : bool = u_xlatb23;
  let x_1561 : f32 = u_xlat64;
  u_xlat64 = select(x_1561, 1.0f, x_1560);
  let x_1563 : vec3<f32> = u_xlat1;
  let x_1565 : vec4<f32> = x_137.x_MainLightPosition;
  u_xlat1.x = dot(x_1563, -(vec3<f32>(x_1565.x, x_1565.y, x_1565.z)));
  let x_1571 : f32 = u_xlat1.x;
  u_xlat1.x = clamp(x_1571, 0.0f, 1.0f);
  let x_1575 : f32 = u_xlat64;
  let x_1579 : vec4<f32> = x_137.x_MainLightColor;
  u_xlat22 = (vec3<f32>(x_1575, x_1575, x_1575) * vec3<f32>(x_1579.x, x_1579.y, x_1579.z));
  let x_1582 : vec3<f32> = u_xlat22;
  let x_1583 : vec3<f32> = u_xlat1;
  u_xlat1 = (x_1582 * vec3<f32>(x_1583.x, x_1583.x, x_1583.x));
  let x_1586 : vec3<f32> = u_xlat1;
  let x_1587 : vec4<f32> = u_xlat4;
  u_xlat1 = (x_1586 * vec3<f32>(x_1587.x, x_1587.y, x_1587.z));
  let x_1591 : f32 = u_xlat4.w;
  u_xlatb64 = (x_1591 >= 0.400000006f);
  let x_1594 : bool = u_xlatb64;
  if (x_1594) {
    let x_1599 : f32 = u_xlat4.w;
    x_1595 = x_1599;
  } else {
    x_1595 = 0.0f;
  }
  let x_1601 : f32 = x_1595;
  u_xlat64 = x_1601;
  let x_1604 : f32 = u_xlat4.w;
  u_xlat23.x = (x_1604 + -0.400000006f);
  let x_1610 : f32 = u_xlat4.w;
  u_xlat44 = dpdxCoarse(x_1610);
  let x_1613 : f32 = u_xlat4.w;
  u_xlat65 = dpdyCoarse(x_1613);
  let x_1615 : f32 = u_xlat65;
  let x_1617 : f32 = u_xlat44;
  u_xlat44 = (abs(x_1615) + abs(x_1617));
  let x_1620 : f32 = u_xlat44;
  u_xlat44 = max(x_1620, 0.0001f);
  let x_1624 : f32 = u_xlat23.x;
  let x_1625 : f32 = u_xlat44;
  u_xlat23.x = (x_1624 / x_1625);
  let x_1629 : f32 = u_xlat23.x;
  u_xlat23.x = (x_1629 + 0.5f);
  let x_1633 : f32 = u_xlat23.x;
  u_xlat23.x = clamp(x_1633, 0.0f, 1.0f);
  let x_1637 : f32 = x_137.x_AlphaToMaskAvailable;
  u_xlatb44 = !((x_1637 == 0.0f));
  let x_1639 : bool = u_xlatb44;
  if (x_1639) {
    let x_1644 : f32 = u_xlat23.x;
    x_1640 = x_1644;
  } else {
    let x_1646 : f32 = u_xlat64;
    x_1640 = x_1646;
  }
  let x_1647 : f32 = x_1640;
  u_xlat64 = x_1647;
  let x_1648 : f32 = u_xlat64;
  u_xlat23.x = (x_1648 + -0.0001f);
  let x_1653 : f32 = u_xlat23.x;
  u_xlatb23 = (x_1653 < 0.0f);
  let x_1655 : bool = u_xlatb23;
  if (((select(0i, 1i, x_1655) * -1i) != 0i)) {
    discard;
  }
  let x_1663 : vec3<f32> = u_xlat21;
  let x_1664 : vec3<f32> = u_xlat27;
  u_xlat21 = (x_1663 * vec3<f32>(x_1664.y, x_1664.y, x_1664.y));
  let x_1667 : vec3<f32> = u_xlat27;
  let x_1669 : vec4<f32> = vs_INTERP2;
  let x_1672 : vec3<f32> = u_xlat21;
  u_xlat21 = ((vec3<f32>(x_1667.x, x_1667.x, x_1667.x) * vec3<f32>(x_1669.x, x_1669.y, x_1669.z)) + x_1672);
  let x_1674 : vec3<f32> = u_xlat27;
  let x_1676 : vec3<f32> = vs_INTERP1;
  let x_1678 : vec3<f32> = u_xlat21;
  u_xlat21 = ((vec3<f32>(x_1674.z, x_1674.z, x_1674.z) * x_1676) + x_1678);
  let x_1680 : vec3<f32> = u_xlat21;
  let x_1681 : vec3<f32> = u_xlat21;
  u_xlat23.x = dot(x_1680, x_1681);
  let x_1685 : f32 = u_xlat23.x;
  u_xlat23.x = inverseSqrt(x_1685);
  let x_1688 : vec3<f32> = u_xlat21;
  let x_1689 : vec3<f32> = u_xlat23;
  let x_1691 : vec3<f32> = (x_1688 * vec3<f32>(x_1689.x, x_1689.x, x_1689.x));
  let x_1692 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_1691.x, x_1691.y, x_1691.z, x_1692.w);
  let x_1695 : f32 = x_137.unity_OrthoParams.w;
  u_xlatb21.x = (x_1695 == 0.0f);
  let x_1698 : vec3<f32> = vs_INTERP0;
  let x_1702 : vec3<f32> = x_137.x_WorldSpaceCameraPos;
  let x_1703 : vec3<f32> = (-(x_1698) + x_1702);
  let x_1704 : vec4<f32> = u_xlat4;
  u_xlat4 = vec4<f32>(x_1703.x, x_1703.y, x_1703.z, x_1704.w);
  let x_1707 : vec4<f32> = u_xlat4;
  let x_1709 : vec4<f32> = u_xlat4;
  u_xlat42 = dot(vec3<f32>(x_1707.x, x_1707.y, x_1707.z), vec3<f32>(x_1709.x, x_1709.y, x_1709.z));
  let x_1712 : f32 = u_xlat42;
  u_xlat42 = inverseSqrt(x_1712);
  let x_1714 : f32 = u_xlat42;
  let x_1716 : vec4<f32> = u_xlat4;
  let x_1718 : vec3<f32> = (vec3<f32>(x_1714, x_1714, x_1714) * vec3<f32>(x_1716.x, x_1716.y, x_1716.z));
  let x_1719 : vec4<f32> = u_xlat4;
  u_xlat4 = vec4<f32>(x_1718.x, x_1718.y, x_1718.z, x_1719.w);
  let x_1722 : bool = u_xlatb21.x;
  if (x_1722) {
    let x_1727 : f32 = u_xlat4.x;
    x_1723 = x_1727;
  } else {
    let x_1731 : f32 = x_137.unity_MatrixV[0i].z;
    x_1723 = x_1731;
  }
  let x_1732 : f32 = x_1723;
  u_xlat7.x = x_1732;
  let x_1735 : bool = u_xlatb21.x;
  if (x_1735) {
    let x_1740 : f32 = u_xlat4.y;
    x_1736 = x_1740;
  } else {
    let x_1743 : f32 = x_137.unity_MatrixV[1i].z;
    x_1736 = x_1743;
  }
  let x_1744 : f32 = x_1736;
  u_xlat7.y = x_1744;
  let x_1747 : bool = u_xlatb21.x;
  if (x_1747) {
    let x_1752 : f32 = u_xlat4.z;
    x_1748 = x_1752;
  } else {
    let x_1755 : f32 = x_137.unity_MatrixV[2i].z;
    x_1748 = x_1755;
  }
  let x_1756 : f32 = x_1748;
  u_xlat7.z = x_1756;
  u_xlat3.w = 1.0f;
  let x_1761 : vec4<f32> = x_60.unity_SHAr;
  let x_1762 : vec4<f32> = u_xlat3;
  u_xlat4.x = dot(x_1761, x_1762);
  let x_1767 : vec4<f32> = x_60.unity_SHAg;
  let x_1768 : vec4<f32> = u_xlat3;
  u_xlat4.y = dot(x_1767, x_1768);
  let x_1773 : vec4<f32> = x_60.unity_SHAb;
  let x_1774 : vec4<f32> = u_xlat3;
  u_xlat4.z = dot(x_1773, x_1774);
  let x_1777 : vec4<f32> = u_xlat3;
  let x_1779 : vec4<f32> = u_xlat3;
  u_xlat8 = (vec4<f32>(x_1777.y, x_1777.z, x_1777.z, x_1777.x) * vec4<f32>(x_1779.x, x_1779.y, x_1779.z, x_1779.z));
  let x_1784 : vec4<f32> = x_60.unity_SHBr;
  let x_1785 : vec4<f32> = u_xlat8;
  u_xlat9.x = dot(x_1784, x_1785);
  let x_1790 : vec4<f32> = x_60.unity_SHBg;
  let x_1791 : vec4<f32> = u_xlat8;
  u_xlat9.y = dot(x_1790, x_1791);
  let x_1796 : vec4<f32> = x_60.unity_SHBb;
  let x_1797 : vec4<f32> = u_xlat8;
  u_xlat9.z = dot(x_1796, x_1797);
  let x_1801 : f32 = u_xlat3.y;
  let x_1803 : f32 = u_xlat3.y;
  u_xlat21.x = (x_1801 * x_1803);
  let x_1807 : f32 = u_xlat3.x;
  let x_1809 : f32 = u_xlat3.x;
  let x_1812 : f32 = u_xlat21.x;
  u_xlat21.x = ((x_1807 * x_1809) + -(x_1812));
  let x_1818 : vec4<f32> = x_60.unity_SHC;
  let x_1820 : vec3<f32> = u_xlat21;
  let x_1823 : vec4<f32> = u_xlat9;
  u_xlat21 = ((vec3<f32>(x_1818.x, x_1818.y, x_1818.z) * vec3<f32>(x_1820.x, x_1820.x, x_1820.x)) + vec3<f32>(x_1823.x, x_1823.y, x_1823.z));
  let x_1826 : vec3<f32> = u_xlat21;
  let x_1827 : vec4<f32> = u_xlat4;
  u_xlat21 = (x_1826 + vec3<f32>(x_1827.x, x_1827.y, x_1827.z));
  let x_1830 : vec3<f32> = u_xlat21;
  u_xlat21 = max(x_1830, vec3<f32>(0.0f, 0.0f, 0.0f));
  let x_1834 : vec4<f32> = x_137.x_ScaledScreenParams;
  let x_1835 : vec2<f32> = vec2<f32>(x_1834.x, x_1834.y);
  let x_1839 : vec2<f32> = (vec2<f32>(1.0f, 1.0f) / vec2<f32>(x_1835.x, x_1835.y));
  let x_1840 : vec3<f32> = u_xlat23;
  u_xlat23 = vec3<f32>(x_1839.x, x_1840.y, x_1839.y);
  let x_1842 : vec3<f32> = u_xlat23;
  let x_1844 : vec4<f32> = hlslcc_FragCoord;
  let x_1846 : vec2<f32> = (vec2<f32>(x_1842.x, x_1842.z) * vec2<f32>(x_1844.x, x_1844.y));
  let x_1847 : vec4<f32> = u_xlat4;
  u_xlat4 = vec4<f32>(x_1846.x, x_1846.y, x_1847.z, x_1847.w);
  let x_1850 : f32 = u_xlat4.y;
  let x_1852 : f32 = x_137.x_ScaleBiasRt.x;
  let x_1855 : f32 = x_137.x_ScaleBiasRt.y;
  u_xlat23.x = ((x_1850 * x_1852) + x_1855);
  let x_1859 : f32 = u_xlat23.x;
  u_xlat4.z = (-(x_1859) + 1.0f);
  let x_1864 : f32 = u_xlat6.x;
  u_xlat6.x = x_1864;
  let x_1867 : f32 = u_xlat6.x;
  u_xlat6.x = clamp(x_1867, 0.0f, 1.0f);
  let x_1870 : f32 = u_xlat64;
  u_xlat64 = min(x_1870, 1.0f);
  let x_1872 : vec3<f32> = u_xlat5;
  u_xlat5 = (x_1872 * vec3<f32>(0.959999979f, 0.959999979f, 0.959999979f));
  let x_1877 : f32 = u_xlat6.x;
  u_xlat23.x = (-(x_1877) + 1.0f);
  let x_1882 : f32 = u_xlat23.x;
  let x_1884 : f32 = u_xlat23.x;
  u_xlat65 = (x_1882 * x_1884);
  let x_1886 : f32 = u_xlat65;
  u_xlat65 = max(x_1886, 0.0078125f);
  let x_1890 : f32 = u_xlat65;
  let x_1891 : f32 = u_xlat65;
  u_xlat66 = (x_1890 * x_1891);
  let x_1895 : f32 = u_xlat6.x;
  u_xlat25.x = (x_1895 + 0.040000021f);
  let x_1900 : f32 = u_xlat25.x;
  u_xlat4.y = min(x_1900, 1.0f);
  let x_1904 : f32 = u_xlat65;
  u_xlat67 = ((x_1904 * 4.0f) + 2.0f);
  let x_1913 : vec4<f32> = u_xlat4;
  let x_1916 : f32 = x_137.x_GlobalMipBias.x;
  let x_1917 : vec4<f32> = textureSampleBias(x_ScreenSpaceOcclusionTexture, sampler_ScreenSpaceOcclusionTexture, vec2<f32>(x_1913.x, x_1913.z), x_1916);
  u_xlat4.x = x_1917.x;
  let x_1920 : vec4<f32> = u_xlat4;
  u_xlat25 = (vec2<f32>(x_1920.y, x_1920.x) + vec2<f32>(-0.039999999f, -1.0f));
  let x_1928 : f32 = x_137.x_AmbientOcclusionParam.w;
  let x_1930 : f32 = u_xlat25.y;
  u_xlat46 = ((x_1928 * x_1930) + 1.0f);
  let x_1934 : f32 = u_xlat4.x;
  let x_1936 : f32 = vs_INTERP4.w;
  u_xlat4.x = min(x_1934, x_1936);
  let x_1939 : bool = u_xlatb0;
  if (x_1939) {
    let x_1943 : f32 = x_248.x_MainLightShadowParams.y;
    u_xlatb0 = (x_1943 == 1.0f);
    let x_1945 : bool = u_xlatb0;
    if (x_1945) {
      let x_1949 : vec4<f32> = vs_INTERP9;
      let x_1952 : vec4<f32> = x_248.x_MainLightShadowOffset0;
      u_xlat6 = (vec4<f32>(x_1949.x, x_1949.y, x_1949.x, x_1949.y) + x_1952);
      let x_1955 : vec4<f32> = u_xlat6;
      let x_1956 : vec2<f32> = vec2<f32>(x_1955.x, x_1955.y);
      let x_1958 : f32 = vs_INTERP9.z;
      txVec30 = vec3<f32>(x_1956.x, x_1956.y, x_1958);
      let x_1965 : vec3<f32> = txVec30;
      let x_1967 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1965.xy, x_1965.z);
      u_xlat8.x = x_1967;
      let x_1970 : vec4<f32> = u_xlat6;
      let x_1971 : vec2<f32> = vec2<f32>(x_1970.z, x_1970.w);
      let x_1973 : f32 = vs_INTERP9.z;
      txVec31 = vec3<f32>(x_1971.x, x_1971.y, x_1973);
      let x_1980 : vec3<f32> = txVec31;
      let x_1982 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1980.xy, x_1980.z);
      u_xlat8.y = x_1982;
      let x_1984 : vec4<f32> = vs_INTERP9;
      let x_1987 : vec4<f32> = x_248.x_MainLightShadowOffset1;
      u_xlat6 = (vec4<f32>(x_1984.x, x_1984.y, x_1984.x, x_1984.y) + x_1987);
      let x_1990 : vec4<f32> = u_xlat6;
      let x_1991 : vec2<f32> = vec2<f32>(x_1990.x, x_1990.y);
      let x_1993 : f32 = vs_INTERP9.z;
      txVec32 = vec3<f32>(x_1991.x, x_1991.y, x_1993);
      let x_2000 : vec3<f32> = txVec32;
      let x_2002 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2000.xy, x_2000.z);
      u_xlat8.z = x_2002;
      let x_2005 : vec4<f32> = u_xlat6;
      let x_2006 : vec2<f32> = vec2<f32>(x_2005.z, x_2005.w);
      let x_2008 : f32 = vs_INTERP9.z;
      txVec33 = vec3<f32>(x_2006.x, x_2006.y, x_2008);
      let x_2015 : vec3<f32> = txVec33;
      let x_2017 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2015.xy, x_2015.z);
      u_xlat8.w = x_2017;
      let x_2019 : vec4<f32> = u_xlat8;
      u_xlat0.x = dot(x_2019, vec4<f32>(0.25f, 0.25f, 0.25f, 0.25f));
    } else {
      let x_2025 : f32 = x_248.x_MainLightShadowParams.y;
      u_xlatb68 = (x_2025 == 2.0f);
      let x_2027 : bool = u_xlatb68;
      if (x_2027) {
        let x_2030 : vec4<f32> = vs_INTERP9;
        let x_2033 : vec4<f32> = x_248.x_MainLightShadowmapSize;
        let x_2036 : vec2<f32> = ((vec2<f32>(x_2030.x, x_2030.y) * vec2<f32>(x_2033.z, x_2033.w)) + vec2<f32>(0.5f, 0.5f));
        let x_2037 : vec4<f32> = u_xlat6;
        u_xlat6 = vec4<f32>(x_2036.x, x_2036.y, x_2037.z, x_2037.w);
        let x_2039 : vec4<f32> = u_xlat6;
        let x_2041 : vec2<f32> = floor(vec2<f32>(x_2039.x, x_2039.y));
        let x_2042 : vec4<f32> = u_xlat6;
        u_xlat6 = vec4<f32>(x_2041.x, x_2041.y, x_2042.z, x_2042.w);
        let x_2045 : vec4<f32> = vs_INTERP9;
        let x_2048 : vec4<f32> = x_248.x_MainLightShadowmapSize;
        let x_2051 : vec4<f32> = u_xlat6;
        u_xlat48 = ((vec2<f32>(x_2045.x, x_2045.y) * vec2<f32>(x_2048.z, x_2048.w)) + -(vec2<f32>(x_2051.x, x_2051.y)));
        let x_2055 : vec2<f32> = u_xlat48;
        u_xlat8 = (vec4<f32>(x_2055.x, x_2055.x, x_2055.y, x_2055.y) + vec4<f32>(0.5f, 1.0f, 0.5f, 1.0f));
        let x_2058 : vec4<f32> = u_xlat8;
        let x_2060 : vec4<f32> = u_xlat8;
        u_xlat9 = (vec4<f32>(x_2058.x, x_2058.x, x_2058.z, x_2058.z) * vec4<f32>(x_2060.x, x_2060.x, x_2060.z, x_2060.z));
        let x_2063 : vec4<f32> = u_xlat9;
        let x_2065 : vec2<f32> = (vec2<f32>(x_2063.y, x_2063.w) * vec2<f32>(0.079999998f, 0.079999998f));
        let x_2066 : vec4<f32> = u_xlat8;
        u_xlat8 = vec4<f32>(x_2065.x, x_2066.y, x_2065.y, x_2066.w);
        let x_2068 : vec4<f32> = u_xlat9;
        let x_2071 : vec2<f32> = u_xlat48;
        let x_2073 : vec2<f32> = ((vec2<f32>(x_2068.x, x_2068.z) * vec2<f32>(0.5f, 0.5f)) + -(x_2071));
        let x_2074 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_2073.x, x_2073.y, x_2074.z, x_2074.w);
        let x_2076 : vec2<f32> = u_xlat48;
        u_xlat51 = (-(x_2076) + vec2<f32>(1.0f, 1.0f));
        let x_2079 : vec2<f32> = u_xlat48;
        let x_2080 : vec2<f32> = min(x_2079, vec2<f32>(0.0f, 0.0f));
        let x_2081 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_2080.x, x_2080.y, x_2081.z, x_2081.w);
        let x_2083 : vec4<f32> = u_xlat10;
        let x_2086 : vec4<f32> = u_xlat10;
        let x_2089 : vec2<f32> = u_xlat51;
        let x_2090 : vec2<f32> = ((-(vec2<f32>(x_2083.x, x_2083.y)) * vec2<f32>(x_2086.x, x_2086.y)) + x_2089);
        let x_2091 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_2090.x, x_2090.y, x_2091.z, x_2091.w);
        let x_2093 : vec2<f32> = u_xlat48;
        u_xlat48 = max(x_2093, vec2<f32>(0.0f, 0.0f));
        let x_2095 : vec2<f32> = u_xlat48;
        let x_2097 : vec2<f32> = u_xlat48;
        let x_2099 : vec4<f32> = u_xlat8;
        u_xlat48 = ((-(x_2095) * x_2097) + vec2<f32>(x_2099.y, x_2099.w));
        let x_2102 : vec4<f32> = u_xlat10;
        let x_2104 : vec2<f32> = (vec2<f32>(x_2102.x, x_2102.y) + vec2<f32>(1.0f, 1.0f));
        let x_2105 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_2104.x, x_2104.y, x_2105.z, x_2105.w);
        let x_2107 : vec2<f32> = u_xlat48;
        u_xlat48 = (x_2107 + vec2<f32>(1.0f, 1.0f));
        let x_2109 : vec4<f32> = u_xlat9;
        let x_2111 : vec2<f32> = (vec2<f32>(x_2109.x, x_2109.y) * vec2<f32>(0.159999996f, 0.159999996f));
        let x_2112 : vec4<f32> = u_xlat11;
        u_xlat11 = vec4<f32>(x_2111.x, x_2111.y, x_2112.z, x_2112.w);
        let x_2114 : vec2<f32> = u_xlat51;
        let x_2115 : vec2<f32> = (x_2114 * vec2<f32>(0.159999996f, 0.159999996f));
        let x_2116 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_2115.x, x_2115.y, x_2116.z, x_2116.w);
        let x_2118 : vec4<f32> = u_xlat10;
        let x_2120 : vec2<f32> = (vec2<f32>(x_2118.x, x_2118.y) * vec2<f32>(0.159999996f, 0.159999996f));
        let x_2121 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_2120.x, x_2120.y, x_2121.z, x_2121.w);
        let x_2123 : vec2<f32> = u_xlat48;
        let x_2124 : vec2<f32> = (x_2123 * vec2<f32>(0.159999996f, 0.159999996f));
        let x_2125 : vec4<f32> = u_xlat12;
        u_xlat12 = vec4<f32>(x_2124.x, x_2124.y, x_2125.z, x_2125.w);
        let x_2127 : vec4<f32> = u_xlat8;
        u_xlat48 = (vec2<f32>(x_2127.y, x_2127.w) * vec2<f32>(0.159999996f, 0.159999996f));
        let x_2131 : f32 = u_xlat10.x;
        u_xlat11.z = x_2131;
        let x_2134 : f32 = u_xlat48.x;
        u_xlat11.w = x_2134;
        let x_2137 : f32 = u_xlat12.x;
        u_xlat9.z = x_2137;
        let x_2140 : f32 = u_xlat8.x;
        u_xlat9.w = x_2140;
        let x_2142 : vec4<f32> = u_xlat9;
        let x_2144 : vec4<f32> = u_xlat11;
        u_xlat13 = (vec4<f32>(x_2142.z, x_2142.w, x_2142.x, x_2142.z) + vec4<f32>(x_2144.z, x_2144.w, x_2144.x, x_2144.z));
        let x_2148 : f32 = u_xlat11.y;
        u_xlat10.z = x_2148;
        let x_2151 : f32 = u_xlat48.y;
        u_xlat10.w = x_2151;
        let x_2154 : f32 = u_xlat9.y;
        u_xlat12.z = x_2154;
        let x_2157 : f32 = u_xlat8.z;
        u_xlat12.w = x_2157;
        let x_2159 : vec4<f32> = u_xlat10;
        let x_2161 : vec4<f32> = u_xlat12;
        let x_2163 : vec3<f32> = (vec3<f32>(x_2159.z, x_2159.y, x_2159.w) + vec3<f32>(x_2161.z, x_2161.y, x_2161.w));
        let x_2164 : vec4<f32> = u_xlat8;
        u_xlat8 = vec4<f32>(x_2163.x, x_2163.y, x_2163.z, x_2164.w);
        let x_2166 : vec4<f32> = u_xlat9;
        let x_2168 : vec4<f32> = u_xlat13;
        let x_2170 : vec3<f32> = (vec3<f32>(x_2166.x, x_2166.z, x_2166.w) / vec3<f32>(x_2168.z, x_2168.w, x_2168.y));
        let x_2171 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_2170.x, x_2170.y, x_2170.z, x_2171.w);
        let x_2173 : vec4<f32> = u_xlat9;
        let x_2175 : vec3<f32> = (vec3<f32>(x_2173.x, x_2173.y, x_2173.z) + vec3<f32>(-2.5f, -0.5f, 1.5f));
        let x_2176 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_2175.x, x_2175.y, x_2175.z, x_2176.w);
        let x_2178 : vec4<f32> = u_xlat12;
        let x_2180 : vec4<f32> = u_xlat8;
        let x_2182 : vec3<f32> = (vec3<f32>(x_2178.z, x_2178.y, x_2178.w) / vec3<f32>(x_2180.x, x_2180.y, x_2180.z));
        let x_2183 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_2182.x, x_2182.y, x_2182.z, x_2183.w);
        let x_2185 : vec4<f32> = u_xlat10;
        let x_2187 : vec3<f32> = (vec3<f32>(x_2185.x, x_2185.y, x_2185.z) + vec3<f32>(-2.5f, -0.5f, 1.5f));
        let x_2188 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_2187.x, x_2187.y, x_2187.z, x_2188.w);
        let x_2190 : vec4<f32> = u_xlat9;
        let x_2193 : vec4<f32> = x_248.x_MainLightShadowmapSize;
        let x_2195 : vec3<f32> = (vec3<f32>(x_2190.y, x_2190.x, x_2190.z) * vec3<f32>(x_2193.x, x_2193.x, x_2193.x));
        let x_2196 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_2195.x, x_2195.y, x_2195.z, x_2196.w);
        let x_2198 : vec4<f32> = u_xlat10;
        let x_2201 : vec4<f32> = x_248.x_MainLightShadowmapSize;
        let x_2203 : vec3<f32> = (vec3<f32>(x_2198.x, x_2198.y, x_2198.z) * vec3<f32>(x_2201.y, x_2201.y, x_2201.y));
        let x_2204 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_2203.x, x_2203.y, x_2203.z, x_2204.w);
        let x_2207 : f32 = u_xlat10.x;
        u_xlat9.w = x_2207;
        let x_2209 : vec4<f32> = u_xlat6;
        let x_2212 : vec4<f32> = x_248.x_MainLightShadowmapSize;
        let x_2215 : vec4<f32> = u_xlat9;
        u_xlat11 = ((vec4<f32>(x_2209.x, x_2209.y, x_2209.x, x_2209.y) * vec4<f32>(x_2212.x, x_2212.y, x_2212.x, x_2212.y)) + vec4<f32>(x_2215.y, x_2215.w, x_2215.x, x_2215.w));
        let x_2218 : vec4<f32> = u_xlat6;
        let x_2221 : vec4<f32> = x_248.x_MainLightShadowmapSize;
        let x_2224 : vec4<f32> = u_xlat9;
        u_xlat48 = ((vec2<f32>(x_2218.x, x_2218.y) * vec2<f32>(x_2221.x, x_2221.y)) + vec2<f32>(x_2224.z, x_2224.w));
        let x_2228 : f32 = u_xlat9.y;
        u_xlat10.w = x_2228;
        let x_2230 : vec4<f32> = u_xlat10;
        let x_2231 : vec2<f32> = vec2<f32>(x_2230.y, x_2230.z);
        let x_2232 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_2232.x, x_2231.x, x_2232.z, x_2231.y);
        let x_2234 : vec4<f32> = u_xlat6;
        let x_2237 : vec4<f32> = x_248.x_MainLightShadowmapSize;
        let x_2240 : vec4<f32> = u_xlat9;
        u_xlat12 = ((vec4<f32>(x_2234.x, x_2234.y, x_2234.x, x_2234.y) * vec4<f32>(x_2237.x, x_2237.y, x_2237.x, x_2237.y)) + vec4<f32>(x_2240.x, x_2240.y, x_2240.z, x_2240.y));
        let x_2243 : vec4<f32> = u_xlat6;
        let x_2246 : vec4<f32> = x_248.x_MainLightShadowmapSize;
        let x_2249 : vec4<f32> = u_xlat10;
        u_xlat10 = ((vec4<f32>(x_2243.x, x_2243.y, x_2243.x, x_2243.y) * vec4<f32>(x_2246.x, x_2246.y, x_2246.x, x_2246.y)) + vec4<f32>(x_2249.w, x_2249.y, x_2249.w, x_2249.z));
        let x_2252 : vec4<f32> = u_xlat6;
        let x_2255 : vec4<f32> = x_248.x_MainLightShadowmapSize;
        let x_2258 : vec4<f32> = u_xlat9;
        u_xlat9 = ((vec4<f32>(x_2252.x, x_2252.y, x_2252.x, x_2252.y) * vec4<f32>(x_2255.x, x_2255.y, x_2255.x, x_2255.y)) + vec4<f32>(x_2258.x, x_2258.w, x_2258.z, x_2258.w));
        let x_2261 : vec4<f32> = u_xlat8;
        let x_2263 : vec4<f32> = u_xlat13;
        u_xlat14 = (vec4<f32>(x_2261.x, x_2261.x, x_2261.x, x_2261.y) * vec4<f32>(x_2263.z, x_2263.w, x_2263.y, x_2263.z));
        let x_2266 : vec4<f32> = u_xlat8;
        let x_2268 : vec4<f32> = u_xlat13;
        u_xlat15 = (vec4<f32>(x_2266.y, x_2266.y, x_2266.z, x_2266.z) * x_2268);
        let x_2271 : f32 = u_xlat8.z;
        let x_2273 : f32 = u_xlat13.y;
        u_xlat68 = (x_2271 * x_2273);
        let x_2276 : vec4<f32> = u_xlat11;
        let x_2277 : vec2<f32> = vec2<f32>(x_2276.x, x_2276.y);
        let x_2279 : f32 = vs_INTERP9.z;
        txVec34 = vec3<f32>(x_2277.x, x_2277.y, x_2279);
        let x_2286 : vec3<f32> = txVec34;
        let x_2288 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2286.xy, x_2286.z);
        u_xlat6.x = x_2288;
        let x_2291 : vec4<f32> = u_xlat11;
        let x_2292 : vec2<f32> = vec2<f32>(x_2291.z, x_2291.w);
        let x_2294 : f32 = vs_INTERP9.z;
        txVec35 = vec3<f32>(x_2292.x, x_2292.y, x_2294);
        let x_2301 : vec3<f32> = txVec35;
        let x_2303 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2301.xy, x_2301.z);
        u_xlat27.x = x_2303;
        let x_2306 : f32 = u_xlat27.x;
        let x_2308 : f32 = u_xlat14.y;
        u_xlat27.x = (x_2306 * x_2308);
        let x_2312 : f32 = u_xlat14.x;
        let x_2314 : f32 = u_xlat6.x;
        let x_2317 : f32 = u_xlat27.x;
        u_xlat6.x = ((x_2312 * x_2314) + x_2317);
        let x_2321 : vec2<f32> = u_xlat48;
        let x_2323 : f32 = vs_INTERP9.z;
        txVec36 = vec3<f32>(x_2321.x, x_2321.y, x_2323);
        let x_2330 : vec3<f32> = txVec36;
        let x_2332 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2330.xy, x_2330.z);
        u_xlat27.x = x_2332;
        let x_2335 : f32 = u_xlat14.z;
        let x_2337 : f32 = u_xlat27.x;
        let x_2340 : f32 = u_xlat6.x;
        u_xlat6.x = ((x_2335 * x_2337) + x_2340);
        let x_2344 : vec4<f32> = u_xlat10;
        let x_2345 : vec2<f32> = vec2<f32>(x_2344.x, x_2344.y);
        let x_2347 : f32 = vs_INTERP9.z;
        txVec37 = vec3<f32>(x_2345.x, x_2345.y, x_2347);
        let x_2354 : vec3<f32> = txVec37;
        let x_2356 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2354.xy, x_2354.z);
        u_xlat27.x = x_2356;
        let x_2359 : f32 = u_xlat14.w;
        let x_2361 : f32 = u_xlat27.x;
        let x_2364 : f32 = u_xlat6.x;
        u_xlat6.x = ((x_2359 * x_2361) + x_2364);
        let x_2368 : vec4<f32> = u_xlat12;
        let x_2369 : vec2<f32> = vec2<f32>(x_2368.x, x_2368.y);
        let x_2371 : f32 = vs_INTERP9.z;
        txVec38 = vec3<f32>(x_2369.x, x_2369.y, x_2371);
        let x_2378 : vec3<f32> = txVec38;
        let x_2380 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2378.xy, x_2378.z);
        u_xlat27.x = x_2380;
        let x_2383 : f32 = u_xlat15.x;
        let x_2385 : f32 = u_xlat27.x;
        let x_2388 : f32 = u_xlat6.x;
        u_xlat6.x = ((x_2383 * x_2385) + x_2388);
        let x_2392 : vec4<f32> = u_xlat12;
        let x_2393 : vec2<f32> = vec2<f32>(x_2392.z, x_2392.w);
        let x_2395 : f32 = vs_INTERP9.z;
        txVec39 = vec3<f32>(x_2393.x, x_2393.y, x_2395);
        let x_2402 : vec3<f32> = txVec39;
        let x_2404 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2402.xy, x_2402.z);
        u_xlat27.x = x_2404;
        let x_2407 : f32 = u_xlat15.y;
        let x_2409 : f32 = u_xlat27.x;
        let x_2412 : f32 = u_xlat6.x;
        u_xlat6.x = ((x_2407 * x_2409) + x_2412);
        let x_2416 : vec4<f32> = u_xlat10;
        let x_2417 : vec2<f32> = vec2<f32>(x_2416.z, x_2416.w);
        let x_2419 : f32 = vs_INTERP9.z;
        txVec40 = vec3<f32>(x_2417.x, x_2417.y, x_2419);
        let x_2426 : vec3<f32> = txVec40;
        let x_2428 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2426.xy, x_2426.z);
        u_xlat27.x = x_2428;
        let x_2431 : f32 = u_xlat15.z;
        let x_2433 : f32 = u_xlat27.x;
        let x_2436 : f32 = u_xlat6.x;
        u_xlat6.x = ((x_2431 * x_2433) + x_2436);
        let x_2440 : vec4<f32> = u_xlat9;
        let x_2441 : vec2<f32> = vec2<f32>(x_2440.x, x_2440.y);
        let x_2443 : f32 = vs_INTERP9.z;
        txVec41 = vec3<f32>(x_2441.x, x_2441.y, x_2443);
        let x_2450 : vec3<f32> = txVec41;
        let x_2452 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2450.xy, x_2450.z);
        u_xlat27.x = x_2452;
        let x_2455 : f32 = u_xlat15.w;
        let x_2457 : f32 = u_xlat27.x;
        let x_2460 : f32 = u_xlat6.x;
        u_xlat6.x = ((x_2455 * x_2457) + x_2460);
        let x_2464 : vec4<f32> = u_xlat9;
        let x_2465 : vec2<f32> = vec2<f32>(x_2464.z, x_2464.w);
        let x_2467 : f32 = vs_INTERP9.z;
        txVec42 = vec3<f32>(x_2465.x, x_2465.y, x_2467);
        let x_2474 : vec3<f32> = txVec42;
        let x_2476 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2474.xy, x_2474.z);
        u_xlat27.x = x_2476;
        let x_2478 : f32 = u_xlat68;
        let x_2480 : f32 = u_xlat27.x;
        let x_2483 : f32 = u_xlat6.x;
        u_xlat0.x = ((x_2478 * x_2480) + x_2483);
      } else {
        let x_2487 : vec4<f32> = vs_INTERP9;
        let x_2490 : vec4<f32> = x_248.x_MainLightShadowmapSize;
        let x_2493 : vec2<f32> = ((vec2<f32>(x_2487.x, x_2487.y) * vec2<f32>(x_2490.z, x_2490.w)) + vec2<f32>(0.5f, 0.5f));
        let x_2494 : vec4<f32> = u_xlat6;
        u_xlat6 = vec4<f32>(x_2493.x, x_2493.y, x_2494.z, x_2494.w);
        let x_2496 : vec4<f32> = u_xlat6;
        let x_2498 : vec2<f32> = floor(vec2<f32>(x_2496.x, x_2496.y));
        let x_2499 : vec4<f32> = u_xlat6;
        u_xlat6 = vec4<f32>(x_2498.x, x_2498.y, x_2499.z, x_2499.w);
        let x_2501 : vec4<f32> = vs_INTERP9;
        let x_2504 : vec4<f32> = x_248.x_MainLightShadowmapSize;
        let x_2507 : vec4<f32> = u_xlat6;
        u_xlat48 = ((vec2<f32>(x_2501.x, x_2501.y) * vec2<f32>(x_2504.z, x_2504.w)) + -(vec2<f32>(x_2507.x, x_2507.y)));
        let x_2511 : vec2<f32> = u_xlat48;
        u_xlat8 = (vec4<f32>(x_2511.x, x_2511.x, x_2511.y, x_2511.y) + vec4<f32>(0.5f, 1.0f, 0.5f, 1.0f));
        let x_2514 : vec4<f32> = u_xlat8;
        let x_2516 : vec4<f32> = u_xlat8;
        u_xlat9 = (vec4<f32>(x_2514.x, x_2514.x, x_2514.z, x_2514.z) * vec4<f32>(x_2516.x, x_2516.x, x_2516.z, x_2516.z));
        let x_2519 : vec4<f32> = u_xlat9;
        let x_2521 : vec2<f32> = (vec2<f32>(x_2519.y, x_2519.w) * vec2<f32>(0.040816002f, 0.040816002f));
        let x_2522 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_2522.x, x_2521.x, x_2522.z, x_2521.y);
        let x_2524 : vec4<f32> = u_xlat9;
        let x_2527 : vec2<f32> = u_xlat48;
        let x_2529 : vec2<f32> = ((vec2<f32>(x_2524.x, x_2524.z) * vec2<f32>(0.5f, 0.5f)) + -(x_2527));
        let x_2530 : vec4<f32> = u_xlat8;
        u_xlat8 = vec4<f32>(x_2529.x, x_2530.y, x_2529.y, x_2530.w);
        let x_2532 : vec2<f32> = u_xlat48;
        let x_2534 : vec2<f32> = (-(x_2532) + vec2<f32>(1.0f, 1.0f));
        let x_2535 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_2534.x, x_2534.y, x_2535.z, x_2535.w);
        let x_2537 : vec2<f32> = u_xlat48;
        u_xlat51 = min(x_2537, vec2<f32>(0.0f, 0.0f));
        let x_2539 : vec2<f32> = u_xlat51;
        let x_2541 : vec2<f32> = u_xlat51;
        let x_2543 : vec4<f32> = u_xlat9;
        let x_2545 : vec2<f32> = ((-(x_2539) * x_2541) + vec2<f32>(x_2543.x, x_2543.y));
        let x_2546 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_2545.x, x_2545.y, x_2546.z, x_2546.w);
        let x_2548 : vec2<f32> = u_xlat48;
        u_xlat51 = max(x_2548, vec2<f32>(0.0f, 0.0f));
        let x_2550 : vec2<f32> = u_xlat51;
        let x_2552 : vec2<f32> = u_xlat51;
        let x_2554 : vec4<f32> = u_xlat8;
        let x_2556 : vec2<f32> = ((-(x_2550) * x_2552) + vec2<f32>(x_2554.y, x_2554.w));
        let x_2557 : vec3<f32> = u_xlat29;
        u_xlat29 = vec3<f32>(x_2556.x, x_2557.y, x_2556.y);
        let x_2559 : vec4<f32> = u_xlat9;
        let x_2561 : vec2<f32> = (vec2<f32>(x_2559.x, x_2559.y) + vec2<f32>(2.0f, 2.0f));
        let x_2562 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_2561.x, x_2561.y, x_2562.z, x_2562.w);
        let x_2564 : vec3<f32> = u_xlat29;
        let x_2566 : vec2<f32> = (vec2<f32>(x_2564.x, x_2564.z) + vec2<f32>(2.0f, 2.0f));
        let x_2567 : vec4<f32> = u_xlat8;
        u_xlat8 = vec4<f32>(x_2567.x, x_2566.x, x_2567.z, x_2566.y);
        let x_2570 : f32 = u_xlat8.y;
        u_xlat11.z = (x_2570 * 0.081632003f);
        let x_2573 : vec4<f32> = u_xlat8;
        let x_2575 : vec3<f32> = (vec3<f32>(x_2573.z, x_2573.x, x_2573.w) * vec3<f32>(0.081632003f, 0.081632003f, 0.081632003f));
        let x_2576 : vec4<f32> = u_xlat12;
        u_xlat12 = vec4<f32>(x_2575.x, x_2575.y, x_2575.z, x_2576.w);
        let x_2578 : vec4<f32> = u_xlat9;
        let x_2580 : vec2<f32> = (vec2<f32>(x_2578.x, x_2578.y) * vec2<f32>(0.081632003f, 0.081632003f));
        let x_2581 : vec4<f32> = u_xlat8;
        u_xlat8 = vec4<f32>(x_2580.x, x_2580.y, x_2581.z, x_2581.w);
        let x_2584 : f32 = u_xlat12.y;
        u_xlat11.x = x_2584;
        let x_2586 : vec2<f32> = u_xlat48;
        let x_2589 : vec2<f32> = ((vec2<f32>(x_2586.x, x_2586.x) * vec2<f32>(-0.081632003f, 0.081632003f)) + vec2<f32>(0.163264006f, 0.081632003f));
        let x_2590 : vec4<f32> = u_xlat11;
        u_xlat11 = vec4<f32>(x_2590.x, x_2589.x, x_2590.z, x_2589.y);
        let x_2592 : vec2<f32> = u_xlat48;
        let x_2595 : vec2<f32> = ((vec2<f32>(x_2592.x, x_2592.x) * vec2<f32>(-0.081632003f, 0.081632003f)) + vec2<f32>(0.081632003f, 0.163264006f));
        let x_2596 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_2595.x, x_2596.y, x_2595.y, x_2596.w);
        let x_2599 : f32 = u_xlat8.x;
        u_xlat9.y = x_2599;
        let x_2602 : f32 = u_xlat10.y;
        u_xlat9.w = x_2602;
        let x_2604 : vec4<f32> = u_xlat9;
        let x_2605 : vec4<f32> = u_xlat11;
        u_xlat11 = (x_2604 + x_2605);
        let x_2607 : vec2<f32> = u_xlat48;
        let x_2610 : vec2<f32> = ((vec2<f32>(x_2607.y, x_2607.y) * vec2<f32>(-0.081632003f, 0.081632003f)) + vec2<f32>(0.163264006f, 0.081632003f));
        let x_2611 : vec4<f32> = u_xlat12;
        u_xlat12 = vec4<f32>(x_2611.x, x_2610.x, x_2611.z, x_2610.y);
        let x_2613 : vec2<f32> = u_xlat48;
        let x_2616 : vec2<f32> = ((vec2<f32>(x_2613.y, x_2613.y) * vec2<f32>(-0.081632003f, 0.081632003f)) + vec2<f32>(0.081632003f, 0.163264006f));
        let x_2617 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_2616.x, x_2617.y, x_2616.y, x_2617.w);
        let x_2620 : f32 = u_xlat8.y;
        u_xlat10.y = x_2620;
        let x_2622 : vec4<f32> = u_xlat10;
        let x_2623 : vec4<f32> = u_xlat12;
        u_xlat8 = (x_2622 + x_2623);
        let x_2625 : vec4<f32> = u_xlat9;
        let x_2626 : vec4<f32> = u_xlat11;
        u_xlat9 = (x_2625 / x_2626);
        let x_2628 : vec4<f32> = u_xlat9;
        u_xlat9 = (x_2628 + vec4<f32>(-3.5f, -1.5f, 0.5f, 2.5f));
        let x_2630 : vec4<f32> = u_xlat10;
        let x_2631 : vec4<f32> = u_xlat8;
        u_xlat10 = (x_2630 / x_2631);
        let x_2633 : vec4<f32> = u_xlat10;
        u_xlat10 = (x_2633 + vec4<f32>(-3.5f, -1.5f, 0.5f, 2.5f));
        let x_2635 : vec4<f32> = u_xlat9;
        let x_2638 : vec4<f32> = x_248.x_MainLightShadowmapSize;
        u_xlat9 = (vec4<f32>(x_2635.w, x_2635.x, x_2635.y, x_2635.z) * vec4<f32>(x_2638.x, x_2638.x, x_2638.x, x_2638.x));
        let x_2641 : vec4<f32> = u_xlat10;
        let x_2644 : vec4<f32> = x_248.x_MainLightShadowmapSize;
        u_xlat10 = (vec4<f32>(x_2641.x, x_2641.w, x_2641.y, x_2641.z) * vec4<f32>(x_2644.y, x_2644.y, x_2644.y, x_2644.y));
        let x_2647 : vec4<f32> = u_xlat9;
        let x_2648 : vec3<f32> = vec3<f32>(x_2647.y, x_2647.z, x_2647.w);
        let x_2649 : vec4<f32> = u_xlat12;
        u_xlat12 = vec4<f32>(x_2648.x, x_2649.y, x_2648.y, x_2648.z);
        let x_2652 : f32 = u_xlat10.x;
        u_xlat12.y = x_2652;
        let x_2654 : vec4<f32> = u_xlat6;
        let x_2657 : vec4<f32> = x_248.x_MainLightShadowmapSize;
        let x_2660 : vec4<f32> = u_xlat12;
        u_xlat13 = ((vec4<f32>(x_2654.x, x_2654.y, x_2654.x, x_2654.y) * vec4<f32>(x_2657.x, x_2657.y, x_2657.x, x_2657.y)) + vec4<f32>(x_2660.x, x_2660.y, x_2660.z, x_2660.y));
        let x_2663 : vec4<f32> = u_xlat6;
        let x_2666 : vec4<f32> = x_248.x_MainLightShadowmapSize;
        let x_2669 : vec4<f32> = u_xlat12;
        u_xlat48 = ((vec2<f32>(x_2663.x, x_2663.y) * vec2<f32>(x_2666.x, x_2666.y)) + vec2<f32>(x_2669.w, x_2669.y));
        let x_2673 : f32 = u_xlat12.y;
        u_xlat9.y = x_2673;
        let x_2676 : f32 = u_xlat10.z;
        u_xlat12.y = x_2676;
        let x_2678 : vec4<f32> = u_xlat6;
        let x_2681 : vec4<f32> = x_248.x_MainLightShadowmapSize;
        let x_2684 : vec4<f32> = u_xlat12;
        u_xlat14 = ((vec4<f32>(x_2678.x, x_2678.y, x_2678.x, x_2678.y) * vec4<f32>(x_2681.x, x_2681.y, x_2681.x, x_2681.y)) + vec4<f32>(x_2684.x, x_2684.y, x_2684.z, x_2684.y));
        let x_2687 : vec4<f32> = u_xlat6;
        let x_2690 : vec4<f32> = x_248.x_MainLightShadowmapSize;
        let x_2693 : vec4<f32> = u_xlat12;
        let x_2695 : vec2<f32> = ((vec2<f32>(x_2687.x, x_2687.y) * vec2<f32>(x_2690.x, x_2690.y)) + vec2<f32>(x_2693.w, x_2693.y));
        let x_2696 : vec4<f32> = u_xlat15;
        u_xlat15 = vec4<f32>(x_2695.x, x_2695.y, x_2696.z, x_2696.w);
        let x_2699 : f32 = u_xlat12.y;
        u_xlat9.z = x_2699;
        let x_2701 : vec4<f32> = u_xlat6;
        let x_2704 : vec4<f32> = x_248.x_MainLightShadowmapSize;
        let x_2707 : vec4<f32> = u_xlat9;
        u_xlat16 = ((vec4<f32>(x_2701.x, x_2701.y, x_2701.x, x_2701.y) * vec4<f32>(x_2704.x, x_2704.y, x_2704.x, x_2704.y)) + vec4<f32>(x_2707.x, x_2707.y, x_2707.x, x_2707.z));
        let x_2711 : f32 = u_xlat10.w;
        u_xlat12.y = x_2711;
        let x_2713 : vec4<f32> = u_xlat6;
        let x_2716 : vec4<f32> = x_248.x_MainLightShadowmapSize;
        let x_2719 : vec4<f32> = u_xlat12;
        u_xlat17 = ((vec4<f32>(x_2713.x, x_2713.y, x_2713.x, x_2713.y) * vec4<f32>(x_2716.x, x_2716.y, x_2716.x, x_2716.y)) + vec4<f32>(x_2719.x, x_2719.y, x_2719.z, x_2719.y));
        let x_2723 : vec4<f32> = u_xlat6;
        let x_2726 : vec4<f32> = x_248.x_MainLightShadowmapSize;
        let x_2729 : vec4<f32> = u_xlat12;
        u_xlat30 = ((vec2<f32>(x_2723.x, x_2723.y) * vec2<f32>(x_2726.x, x_2726.y)) + vec2<f32>(x_2729.w, x_2729.y));
        let x_2733 : f32 = u_xlat12.y;
        u_xlat9.w = x_2733;
        let x_2736 : vec4<f32> = u_xlat6;
        let x_2739 : vec4<f32> = x_248.x_MainLightShadowmapSize;
        let x_2742 : vec4<f32> = u_xlat9;
        u_xlat57 = ((vec2<f32>(x_2736.x, x_2736.y) * vec2<f32>(x_2739.x, x_2739.y)) + vec2<f32>(x_2742.x, x_2742.w));
        let x_2745 : vec4<f32> = u_xlat12;
        let x_2746 : vec3<f32> = vec3<f32>(x_2745.x, x_2745.z, x_2745.w);
        let x_2747 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_2746.x, x_2747.y, x_2746.y, x_2746.z);
        let x_2749 : vec4<f32> = u_xlat6;
        let x_2752 : vec4<f32> = x_248.x_MainLightShadowmapSize;
        let x_2755 : vec4<f32> = u_xlat10;
        u_xlat12 = ((vec4<f32>(x_2749.x, x_2749.y, x_2749.x, x_2749.y) * vec4<f32>(x_2752.x, x_2752.y, x_2752.x, x_2752.y)) + vec4<f32>(x_2755.x, x_2755.y, x_2755.z, x_2755.y));
        let x_2759 : vec4<f32> = u_xlat6;
        let x_2762 : vec4<f32> = x_248.x_MainLightShadowmapSize;
        let x_2765 : vec4<f32> = u_xlat10;
        u_xlat52 = ((vec2<f32>(x_2759.x, x_2759.y) * vec2<f32>(x_2762.x, x_2762.y)) + vec2<f32>(x_2765.w, x_2765.y));
        let x_2769 : f32 = u_xlat9.x;
        u_xlat10.x = x_2769;
        let x_2771 : vec4<f32> = u_xlat6;
        let x_2774 : vec4<f32> = x_248.x_MainLightShadowmapSize;
        let x_2777 : vec4<f32> = u_xlat10;
        let x_2779 : vec2<f32> = ((vec2<f32>(x_2771.x, x_2771.y) * vec2<f32>(x_2774.x, x_2774.y)) + vec2<f32>(x_2777.x, x_2777.y));
        let x_2780 : vec4<f32> = u_xlat6;
        u_xlat6 = vec4<f32>(x_2779.x, x_2779.y, x_2780.z, x_2780.w);
        let x_2782 : vec4<f32> = u_xlat8;
        let x_2784 : vec4<f32> = u_xlat11;
        u_xlat18 = (vec4<f32>(x_2782.x, x_2782.x, x_2782.x, x_2782.x) * x_2784);
        let x_2786 : vec4<f32> = u_xlat8;
        let x_2788 : vec4<f32> = u_xlat11;
        u_xlat19 = (vec4<f32>(x_2786.y, x_2786.y, x_2786.y, x_2786.y) * x_2788);
        let x_2791 : vec4<f32> = u_xlat8;
        let x_2793 : vec4<f32> = u_xlat11;
        u_xlat20 = (vec4<f32>(x_2791.z, x_2791.z, x_2791.z, x_2791.z) * x_2793);
        let x_2795 : vec4<f32> = u_xlat8;
        let x_2797 : vec4<f32> = u_xlat11;
        u_xlat8 = (vec4<f32>(x_2795.w, x_2795.w, x_2795.w, x_2795.w) * x_2797);
        let x_2800 : vec4<f32> = u_xlat13;
        let x_2801 : vec2<f32> = vec2<f32>(x_2800.x, x_2800.y);
        let x_2803 : f32 = vs_INTERP9.z;
        txVec43 = vec3<f32>(x_2801.x, x_2801.y, x_2803);
        let x_2810 : vec3<f32> = txVec43;
        let x_2812 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2810.xy, x_2810.z);
        u_xlat68 = x_2812;
        let x_2814 : vec4<f32> = u_xlat13;
        let x_2815 : vec2<f32> = vec2<f32>(x_2814.z, x_2814.w);
        let x_2817 : f32 = vs_INTERP9.z;
        txVec44 = vec3<f32>(x_2815.x, x_2815.y, x_2817);
        let x_2825 : vec3<f32> = txVec44;
        let x_2827 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2825.xy, x_2825.z);
        u_xlat70 = x_2827;
        let x_2828 : f32 = u_xlat70;
        let x_2830 : f32 = u_xlat18.y;
        u_xlat70 = (x_2828 * x_2830);
        let x_2833 : f32 = u_xlat18.x;
        let x_2834 : f32 = u_xlat68;
        let x_2836 : f32 = u_xlat70;
        u_xlat68 = ((x_2833 * x_2834) + x_2836);
        let x_2839 : vec2<f32> = u_xlat48;
        let x_2841 : f32 = vs_INTERP9.z;
        txVec45 = vec3<f32>(x_2839.x, x_2839.y, x_2841);
        let x_2848 : vec3<f32> = txVec45;
        let x_2850 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2848.xy, x_2848.z);
        u_xlat48.x = x_2850;
        let x_2853 : f32 = u_xlat18.z;
        let x_2855 : f32 = u_xlat48.x;
        let x_2857 : f32 = u_xlat68;
        u_xlat68 = ((x_2853 * x_2855) + x_2857);
        let x_2860 : vec4<f32> = u_xlat16;
        let x_2861 : vec2<f32> = vec2<f32>(x_2860.x, x_2860.y);
        let x_2863 : f32 = vs_INTERP9.z;
        txVec46 = vec3<f32>(x_2861.x, x_2861.y, x_2863);
        let x_2870 : vec3<f32> = txVec46;
        let x_2872 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2870.xy, x_2870.z);
        u_xlat48.x = x_2872;
        let x_2875 : f32 = u_xlat18.w;
        let x_2877 : f32 = u_xlat48.x;
        let x_2879 : f32 = u_xlat68;
        u_xlat68 = ((x_2875 * x_2877) + x_2879);
        let x_2882 : vec4<f32> = u_xlat14;
        let x_2883 : vec2<f32> = vec2<f32>(x_2882.x, x_2882.y);
        let x_2885 : f32 = vs_INTERP9.z;
        txVec47 = vec3<f32>(x_2883.x, x_2883.y, x_2885);
        let x_2892 : vec3<f32> = txVec47;
        let x_2894 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2892.xy, x_2892.z);
        u_xlat48.x = x_2894;
        let x_2897 : f32 = u_xlat19.x;
        let x_2899 : f32 = u_xlat48.x;
        let x_2901 : f32 = u_xlat68;
        u_xlat68 = ((x_2897 * x_2899) + x_2901);
        let x_2904 : vec4<f32> = u_xlat14;
        let x_2905 : vec2<f32> = vec2<f32>(x_2904.z, x_2904.w);
        let x_2907 : f32 = vs_INTERP9.z;
        txVec48 = vec3<f32>(x_2905.x, x_2905.y, x_2907);
        let x_2914 : vec3<f32> = txVec48;
        let x_2916 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2914.xy, x_2914.z);
        u_xlat48.x = x_2916;
        let x_2919 : f32 = u_xlat19.y;
        let x_2921 : f32 = u_xlat48.x;
        let x_2923 : f32 = u_xlat68;
        u_xlat68 = ((x_2919 * x_2921) + x_2923);
        let x_2926 : vec4<f32> = u_xlat15;
        let x_2927 : vec2<f32> = vec2<f32>(x_2926.x, x_2926.y);
        let x_2929 : f32 = vs_INTERP9.z;
        txVec49 = vec3<f32>(x_2927.x, x_2927.y, x_2929);
        let x_2936 : vec3<f32> = txVec49;
        let x_2938 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2936.xy, x_2936.z);
        u_xlat48.x = x_2938;
        let x_2941 : f32 = u_xlat19.z;
        let x_2943 : f32 = u_xlat48.x;
        let x_2945 : f32 = u_xlat68;
        u_xlat68 = ((x_2941 * x_2943) + x_2945);
        let x_2948 : vec4<f32> = u_xlat16;
        let x_2949 : vec2<f32> = vec2<f32>(x_2948.z, x_2948.w);
        let x_2951 : f32 = vs_INTERP9.z;
        txVec50 = vec3<f32>(x_2949.x, x_2949.y, x_2951);
        let x_2958 : vec3<f32> = txVec50;
        let x_2960 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2958.xy, x_2958.z);
        u_xlat48.x = x_2960;
        let x_2963 : f32 = u_xlat19.w;
        let x_2965 : f32 = u_xlat48.x;
        let x_2967 : f32 = u_xlat68;
        u_xlat68 = ((x_2963 * x_2965) + x_2967);
        let x_2970 : vec4<f32> = u_xlat17;
        let x_2971 : vec2<f32> = vec2<f32>(x_2970.x, x_2970.y);
        let x_2973 : f32 = vs_INTERP9.z;
        txVec51 = vec3<f32>(x_2971.x, x_2971.y, x_2973);
        let x_2980 : vec3<f32> = txVec51;
        let x_2982 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2980.xy, x_2980.z);
        u_xlat48.x = x_2982;
        let x_2985 : f32 = u_xlat20.x;
        let x_2987 : f32 = u_xlat48.x;
        let x_2989 : f32 = u_xlat68;
        u_xlat68 = ((x_2985 * x_2987) + x_2989);
        let x_2992 : vec4<f32> = u_xlat17;
        let x_2993 : vec2<f32> = vec2<f32>(x_2992.z, x_2992.w);
        let x_2995 : f32 = vs_INTERP9.z;
        txVec52 = vec3<f32>(x_2993.x, x_2993.y, x_2995);
        let x_3002 : vec3<f32> = txVec52;
        let x_3004 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_3002.xy, x_3002.z);
        u_xlat48.x = x_3004;
        let x_3007 : f32 = u_xlat20.y;
        let x_3009 : f32 = u_xlat48.x;
        let x_3011 : f32 = u_xlat68;
        u_xlat68 = ((x_3007 * x_3009) + x_3011);
        let x_3014 : vec2<f32> = u_xlat30;
        let x_3016 : f32 = vs_INTERP9.z;
        txVec53 = vec3<f32>(x_3014.x, x_3014.y, x_3016);
        let x_3023 : vec3<f32> = txVec53;
        let x_3025 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_3023.xy, x_3023.z);
        u_xlat48.x = x_3025;
        let x_3028 : f32 = u_xlat20.z;
        let x_3030 : f32 = u_xlat48.x;
        let x_3032 : f32 = u_xlat68;
        u_xlat68 = ((x_3028 * x_3030) + x_3032);
        let x_3035 : vec2<f32> = u_xlat57;
        let x_3037 : f32 = vs_INTERP9.z;
        txVec54 = vec3<f32>(x_3035.x, x_3035.y, x_3037);
        let x_3044 : vec3<f32> = txVec54;
        let x_3046 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_3044.xy, x_3044.z);
        u_xlat48.x = x_3046;
        let x_3049 : f32 = u_xlat20.w;
        let x_3051 : f32 = u_xlat48.x;
        let x_3053 : f32 = u_xlat68;
        u_xlat68 = ((x_3049 * x_3051) + x_3053);
        let x_3056 : vec4<f32> = u_xlat12;
        let x_3057 : vec2<f32> = vec2<f32>(x_3056.x, x_3056.y);
        let x_3059 : f32 = vs_INTERP9.z;
        txVec55 = vec3<f32>(x_3057.x, x_3057.y, x_3059);
        let x_3066 : vec3<f32> = txVec55;
        let x_3068 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_3066.xy, x_3066.z);
        u_xlat48.x = x_3068;
        let x_3071 : f32 = u_xlat8.x;
        let x_3073 : f32 = u_xlat48.x;
        let x_3075 : f32 = u_xlat68;
        u_xlat68 = ((x_3071 * x_3073) + x_3075);
        let x_3078 : vec4<f32> = u_xlat12;
        let x_3079 : vec2<f32> = vec2<f32>(x_3078.z, x_3078.w);
        let x_3081 : f32 = vs_INTERP9.z;
        txVec56 = vec3<f32>(x_3079.x, x_3079.y, x_3081);
        let x_3088 : vec3<f32> = txVec56;
        let x_3090 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_3088.xy, x_3088.z);
        u_xlat48.x = x_3090;
        let x_3093 : f32 = u_xlat8.y;
        let x_3095 : f32 = u_xlat48.x;
        let x_3097 : f32 = u_xlat68;
        u_xlat68 = ((x_3093 * x_3095) + x_3097);
        let x_3100 : vec2<f32> = u_xlat52;
        let x_3102 : f32 = vs_INTERP9.z;
        txVec57 = vec3<f32>(x_3100.x, x_3100.y, x_3102);
        let x_3109 : vec3<f32> = txVec57;
        let x_3111 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_3109.xy, x_3109.z);
        u_xlat48.x = x_3111;
        let x_3114 : f32 = u_xlat8.z;
        let x_3116 : f32 = u_xlat48.x;
        let x_3118 : f32 = u_xlat68;
        u_xlat68 = ((x_3114 * x_3116) + x_3118);
        let x_3121 : vec4<f32> = u_xlat6;
        let x_3122 : vec2<f32> = vec2<f32>(x_3121.x, x_3121.y);
        let x_3124 : f32 = vs_INTERP9.z;
        txVec58 = vec3<f32>(x_3122.x, x_3122.y, x_3124);
        let x_3131 : vec3<f32> = txVec58;
        let x_3133 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_3131.xy, x_3131.z);
        u_xlat6.x = x_3133;
        let x_3136 : f32 = u_xlat8.w;
        let x_3138 : f32 = u_xlat6.x;
        let x_3140 : f32 = u_xlat68;
        u_xlat0.x = ((x_3136 * x_3138) + x_3140);
      }
    }
  } else {
    let x_3145 : vec4<f32> = vs_INTERP9;
    let x_3146 : vec2<f32> = vec2<f32>(x_3145.x, x_3145.y);
    let x_3148 : f32 = vs_INTERP9.z;
    txVec59 = vec3<f32>(x_3146.x, x_3146.y, x_3148);
    let x_3155 : vec3<f32> = txVec59;
    let x_3157 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_3155.xy, x_3155.z);
    u_xlat0.x = x_3157;
  }
  let x_3160 : f32 = u_xlat0.x;
  let x_3162 : f32 = x_248.x_MainLightShadowParams.x;
  let x_3165 : f32 = u_xlat2.x;
  u_xlat0.x = ((x_3160 * x_3162) + x_3165);
  let x_3170 : f32 = vs_INTERP9.z;
  u_xlatb2 = (0.0f >= x_3170);
  let x_3173 : f32 = vs_INTERP9.z;
  u_xlatb68 = (x_3173 >= 1.0f);
  let x_3175 : bool = u_xlatb2;
  let x_3176 : bool = u_xlatb68;
  u_xlatb2 = (x_3175 | x_3176);
  let x_3178 : bool = u_xlatb2;
  if (x_3178) {
    x_3179 = 1.0f;
  } else {
    let x_3184 : f32 = u_xlat0.x;
    x_3179 = x_3184;
  }
  let x_3185 : f32 = x_3179;
  u_xlat0.x = x_3185;
  let x_3187 : vec3<f32> = vs_INTERP0;
  let x_3189 : vec3<f32> = x_137.x_WorldSpaceCameraPos;
  let x_3191 : vec3<f32> = (x_3187 + -(x_3189));
  let x_3192 : vec4<f32> = u_xlat6;
  u_xlat6 = vec4<f32>(x_3191.x, x_3191.y, x_3191.z, x_3192.w);
  let x_3194 : vec4<f32> = u_xlat6;
  let x_3196 : vec4<f32> = u_xlat6;
  u_xlat2.x = dot(vec3<f32>(x_3194.x, x_3194.y, x_3194.z), vec3<f32>(x_3196.x, x_3196.y, x_3196.z));
  let x_3201 : f32 = u_xlat2.x;
  let x_3203 : f32 = x_248.x_MainLightShadowParams.z;
  let x_3206 : f32 = x_248.x_MainLightShadowParams.w;
  u_xlat2.x = ((x_3201 * x_3203) + x_3206);
  let x_3210 : f32 = u_xlat2.x;
  u_xlat2.x = clamp(x_3210, 0.0f, 1.0f);
  let x_3214 : f32 = u_xlat0.x;
  u_xlat68 = (-(x_3214) + 1.0f);
  let x_3218 : f32 = u_xlat2.x;
  let x_3219 : f32 = u_xlat68;
  let x_3222 : f32 = u_xlat0.x;
  u_xlat0.x = ((x_3218 * x_3219) + x_3222);
  let x_3225 : f32 = u_xlat46;
  let x_3228 : vec4<f32> = x_137.x_MainLightColor;
  let x_3230 : vec3<f32> = (vec3<f32>(x_3225, x_3225, x_3225) * vec3<f32>(x_3228.x, x_3228.y, x_3228.z));
  let x_3231 : vec4<f32> = u_xlat6;
  u_xlat6 = vec4<f32>(x_3230.x, x_3230.y, x_3230.z, x_3231.w);
  let x_3233 : vec4<f32> = u_xlat7;
  let x_3236 : vec4<f32> = u_xlat3;
  u_xlat2.x = dot(-(vec3<f32>(x_3233.x, x_3233.y, x_3233.z)), vec3<f32>(x_3236.x, x_3236.y, x_3236.z));
  let x_3241 : f32 = u_xlat2.x;
  let x_3243 : f32 = u_xlat2.x;
  u_xlat2.x = (x_3241 + x_3243);
  let x_3246 : vec4<f32> = u_xlat3;
  let x_3248 : vec3<f32> = u_xlat2;
  let x_3252 : vec4<f32> = u_xlat7;
  let x_3255 : vec3<f32> = ((vec3<f32>(x_3246.x, x_3246.y, x_3246.z) * -(vec3<f32>(x_3248.x, x_3248.x, x_3248.x))) + -(vec3<f32>(x_3252.x, x_3252.y, x_3252.z)));
  let x_3256 : vec4<f32> = u_xlat8;
  u_xlat8 = vec4<f32>(x_3255.x, x_3255.y, x_3255.z, x_3256.w);
  let x_3258 : vec4<f32> = u_xlat3;
  let x_3260 : vec4<f32> = u_xlat7;
  u_xlat2.x = dot(vec3<f32>(x_3258.x, x_3258.y, x_3258.z), vec3<f32>(x_3260.x, x_3260.y, x_3260.z));
  let x_3265 : f32 = u_xlat2.x;
  u_xlat2.x = clamp(x_3265, 0.0f, 1.0f);
  let x_3269 : f32 = u_xlat2.x;
  u_xlat2.x = (-(x_3269) + 1.0f);
  let x_3274 : f32 = u_xlat2.x;
  let x_3276 : f32 = u_xlat2.x;
  u_xlat2.x = (x_3274 * x_3276);
  let x_3280 : f32 = u_xlat2.x;
  let x_3282 : f32 = u_xlat2.x;
  u_xlat2.x = (x_3280 * x_3282);
  let x_3286 : f32 = u_xlat23.x;
  u_xlat68 = ((-(x_3286) * 0.699999988f) + 1.700000048f);
  let x_3293 : f32 = u_xlat23.x;
  let x_3294 : f32 = u_xlat68;
  u_xlat23.x = (x_3293 * x_3294);
  let x_3298 : f32 = u_xlat23.x;
  u_xlat23.x = (x_3298 * 6.0f);
  let x_3310 : vec4<f32> = u_xlat8;
  let x_3313 : f32 = u_xlat23.x;
  let x_3314 : vec4<f32> = textureSampleLevel(unity_SpecCube0, samplerunity_SpecCube0, vec3<f32>(x_3310.x, x_3310.y, x_3310.z), x_3313);
  u_xlat8 = x_3314;
  let x_3316 : f32 = u_xlat8.w;
  u_xlat23.x = (x_3316 + -1.0f);
  let x_3320 : f32 = x_60.unity_SpecCube0_HDR.w;
  let x_3322 : f32 = u_xlat23.x;
  u_xlat23.x = ((x_3320 * x_3322) + 1.0f);
  let x_3327 : f32 = u_xlat23.x;
  u_xlat23.x = max(x_3327, 0.0f);
  let x_3331 : f32 = u_xlat23.x;
  u_xlat23.x = log2(x_3331);
  let x_3335 : f32 = u_xlat23.x;
  let x_3337 : f32 = x_60.unity_SpecCube0_HDR.y;
  u_xlat23.x = (x_3335 * x_3337);
  let x_3341 : f32 = u_xlat23.x;
  u_xlat23.x = exp2(x_3341);
  let x_3345 : f32 = u_xlat23.x;
  let x_3347 : f32 = x_60.unity_SpecCube0_HDR.x;
  u_xlat23.x = (x_3345 * x_3347);
  let x_3350 : vec4<f32> = u_xlat8;
  let x_3352 : vec3<f32> = u_xlat23;
  let x_3354 : vec3<f32> = (vec3<f32>(x_3350.x, x_3350.y, x_3350.z) * vec3<f32>(x_3352.x, x_3352.x, x_3352.x));
  let x_3355 : vec4<f32> = u_xlat8;
  u_xlat8 = vec4<f32>(x_3354.x, x_3354.y, x_3354.z, x_3355.w);
  let x_3357 : f32 = u_xlat65;
  let x_3359 : f32 = u_xlat65;
  let x_3363 : vec2<f32> = ((vec2<f32>(x_3357, x_3357) * vec2<f32>(x_3359, x_3359)) + vec2<f32>(-1.0f, 1.0f));
  let x_3364 : vec3<f32> = u_xlat23;
  u_xlat23 = vec3<f32>(x_3363.x, x_3364.y, x_3363.y);
  let x_3367 : f32 = u_xlat23.z;
  u_xlat65 = (1.0f / x_3367);
  let x_3370 : f32 = u_xlat2.x;
  let x_3372 : f32 = u_xlat25.x;
  u_xlat2.x = ((x_3370 * x_3372) + 0.039999999f);
  let x_3378 : f32 = u_xlat2.x;
  let x_3379 : f32 = u_xlat65;
  u_xlat2.x = (x_3378 * x_3379);
  let x_3382 : vec3<f32> = u_xlat2;
  let x_3384 : vec4<f32> = u_xlat8;
  let x_3386 : vec3<f32> = (vec3<f32>(x_3382.x, x_3382.x, x_3382.x) * vec3<f32>(x_3384.x, x_3384.y, x_3384.z));
  let x_3387 : vec4<f32> = u_xlat8;
  u_xlat8 = vec4<f32>(x_3386.x, x_3386.y, x_3386.z, x_3387.w);
  let x_3389 : vec3<f32> = u_xlat21;
  let x_3390 : vec3<f32> = u_xlat5;
  let x_3392 : vec4<f32> = u_xlat8;
  u_xlat21 = ((x_3389 * x_3390) + vec3<f32>(x_3392.x, x_3392.y, x_3392.z));
  let x_3396 : f32 = u_xlat0.x;
  let x_3398 : f32 = x_60.unity_LightData.z;
  u_xlat0.x = (x_3396 * x_3398);
  let x_3401 : vec4<f32> = u_xlat3;
  let x_3404 : vec4<f32> = x_137.x_MainLightPosition;
  u_xlat2.x = dot(vec3<f32>(x_3401.x, x_3401.y, x_3401.z), vec3<f32>(x_3404.x, x_3404.y, x_3404.z));
  let x_3409 : f32 = u_xlat2.x;
  u_xlat2.x = clamp(x_3409, 0.0f, 1.0f);
  let x_3413 : f32 = u_xlat0.x;
  let x_3415 : f32 = u_xlat2.x;
  u_xlat0.x = (x_3413 * x_3415);
  let x_3418 : vec3<f32> = u_xlat0;
  let x_3420 : vec4<f32> = u_xlat6;
  let x_3422 : vec3<f32> = (vec3<f32>(x_3418.x, x_3418.x, x_3418.x) * vec3<f32>(x_3420.x, x_3420.y, x_3420.z));
  let x_3423 : vec4<f32> = u_xlat6;
  u_xlat6 = vec4<f32>(x_3422.x, x_3422.y, x_3422.z, x_3423.w);
  let x_3425 : vec4<f32> = u_xlat7;
  let x_3428 : vec4<f32> = x_137.x_MainLightPosition;
  let x_3430 : vec3<f32> = (vec3<f32>(x_3425.x, x_3425.y, x_3425.z) + vec3<f32>(x_3428.x, x_3428.y, x_3428.z));
  let x_3431 : vec4<f32> = u_xlat8;
  u_xlat8 = vec4<f32>(x_3430.x, x_3430.y, x_3430.z, x_3431.w);
  let x_3433 : vec4<f32> = u_xlat8;
  let x_3435 : vec4<f32> = u_xlat8;
  u_xlat0.x = dot(vec3<f32>(x_3433.x, x_3433.y, x_3433.z), vec3<f32>(x_3435.x, x_3435.y, x_3435.z));
  let x_3440 : f32 = u_xlat0.x;
  u_xlat0.x = max(x_3440, 1.17549435e-37f);
  let x_3444 : f32 = u_xlat0.x;
  u_xlat0.x = inverseSqrt(x_3444);
  let x_3447 : vec3<f32> = u_xlat0;
  let x_3449 : vec4<f32> = u_xlat8;
  let x_3451 : vec3<f32> = (vec3<f32>(x_3447.x, x_3447.x, x_3447.x) * vec3<f32>(x_3449.x, x_3449.y, x_3449.z));
  let x_3452 : vec4<f32> = u_xlat8;
  u_xlat8 = vec4<f32>(x_3451.x, x_3451.y, x_3451.z, x_3452.w);
  let x_3454 : vec4<f32> = u_xlat3;
  let x_3456 : vec4<f32> = u_xlat8;
  u_xlat0.x = dot(vec3<f32>(x_3454.x, x_3454.y, x_3454.z), vec3<f32>(x_3456.x, x_3456.y, x_3456.z));
  let x_3461 : f32 = u_xlat0.x;
  u_xlat0.x = clamp(x_3461, 0.0f, 1.0f);
  let x_3465 : vec4<f32> = x_137.x_MainLightPosition;
  let x_3467 : vec4<f32> = u_xlat8;
  u_xlat2.x = dot(vec3<f32>(x_3465.x, x_3465.y, x_3465.z), vec3<f32>(x_3467.x, x_3467.y, x_3467.z));
  let x_3472 : f32 = u_xlat2.x;
  u_xlat2.x = clamp(x_3472, 0.0f, 1.0f);
  let x_3476 : f32 = u_xlat0.x;
  let x_3478 : f32 = u_xlat0.x;
  u_xlat0.x = (x_3476 * x_3478);
  let x_3482 : f32 = u_xlat0.x;
  let x_3484 : f32 = u_xlat23.x;
  u_xlat0.x = ((x_3482 * x_3484) + 1.000010014f);
  let x_3490 : f32 = u_xlat2.x;
  let x_3492 : f32 = u_xlat2.x;
  u_xlat2.x = (x_3490 * x_3492);
  let x_3496 : f32 = u_xlat0.x;
  let x_3498 : f32 = u_xlat0.x;
  u_xlat0.x = (x_3496 * x_3498);
  let x_3502 : f32 = u_xlat2.x;
  u_xlat2.x = max(x_3502, 0.100000001f);
  let x_3507 : f32 = u_xlat0.x;
  let x_3509 : f32 = u_xlat2.x;
  u_xlat0.x = (x_3507 * x_3509);
  let x_3512 : f32 = u_xlat67;
  let x_3514 : f32 = u_xlat0.x;
  u_xlat0.x = (x_3512 * x_3514);
  let x_3517 : f32 = u_xlat66;
  let x_3519 : f32 = u_xlat0.x;
  u_xlat0.x = (x_3517 / x_3519);
  let x_3522 : vec3<f32> = u_xlat0;
  let x_3526 : vec3<f32> = u_xlat5;
  let x_3527 : vec3<f32> = ((vec3<f32>(x_3522.x, x_3522.x, x_3522.x) * vec3<f32>(0.039999999f, 0.039999999f, 0.039999999f)) + x_3526);
  let x_3528 : vec4<f32> = u_xlat8;
  u_xlat8 = vec4<f32>(x_3527.x, x_3527.y, x_3527.z, x_3528.w);
  let x_3530 : vec4<f32> = u_xlat6;
  let x_3532 : vec4<f32> = u_xlat8;
  let x_3534 : vec3<f32> = (vec3<f32>(x_3530.x, x_3530.y, x_3530.z) * vec3<f32>(x_3532.x, x_3532.y, x_3532.z));
  let x_3535 : vec4<f32> = u_xlat6;
  u_xlat6 = vec4<f32>(x_3534.x, x_3534.y, x_3534.z, x_3535.w);
  let x_3538 : f32 = x_137.x_AdditionalLightsCount.x;
  let x_3540 : f32 = x_60.unity_LightData.y;
  u_xlat0.x = min(x_3538, x_3540);
  let x_3546 : f32 = u_xlat0.x;
  u_xlatu0 = bitcast<u32>(i32(x_3546));
  u_xlat8.x = 0.0f;
  u_xlat8.y = 0.0f;
  u_xlat8.z = 0.0f;
  u_xlatu_loop_1 = 0u;
  loop {
    let x_3558 : u32 = u_xlatu_loop_1;
    let x_3559 : u32 = u_xlatu0;
    if ((x_3558 < x_3559)) {
    } else {
      break;
    }
    let x_3562 : u32 = u_xlatu_loop_1;
    u_xlatu65 = (x_3562 >> 2u);
    let x_3566 : u32 = u_xlatu_loop_1;
    u_xlati25 = bitcast<i32>((x_3566 & 3u));
    let x_3569 : u32 = u_xlatu65;
    let x_3572 : vec4<f32> = x_60.unity_LightIndices[bitcast<i32>(x_3569)];
    let x_3582 : i32 = u_xlati25;
    indexable = array<vec4<u32>, 4u>(vec4<u32>(1065353216u, 0u, 0u, 0u), vec4<u32>(0u, 1065353216u, 0u, 0u), vec4<u32>(0u, 0u, 1065353216u, 0u), vec4<u32>(0u, 0u, 0u, 1065353216u));
    let x_3587 : vec4<u32> = indexable[x_3582];
    u_xlat65 = dot(x_3572, bitcast<vec4<f32>>(x_3587));
    let x_3591 : f32 = u_xlat65;
    u_xlati65 = i32(x_3591);
    let x_3593 : vec3<f32> = vs_INTERP0;
    let x_3605 : i32 = u_xlati65;
    let x_3607 : vec4<f32> = x_3604.x_AdditionalLightsPosition[x_3605];
    let x_3610 : i32 = u_xlati65;
    let x_3612 : vec4<f32> = x_3604.x_AdditionalLightsPosition[x_3610];
    let x_3614 : vec3<f32> = ((-(x_3593) * vec3<f32>(x_3607.w, x_3607.w, x_3607.w)) + vec3<f32>(x_3612.x, x_3612.y, x_3612.z));
    let x_3615 : vec4<f32> = u_xlat9;
    u_xlat9 = vec4<f32>(x_3614.x, x_3614.y, x_3614.z, x_3615.w);
    let x_3617 : vec4<f32> = u_xlat9;
    let x_3619 : vec4<f32> = u_xlat9;
    u_xlat25.x = dot(vec3<f32>(x_3617.x, x_3617.y, x_3617.z), vec3<f32>(x_3619.x, x_3619.y, x_3619.z));
    let x_3624 : f32 = u_xlat25.x;
    u_xlat25.x = max(x_3624, 6.10351562e-05f);
    let x_3629 : f32 = u_xlat25.x;
    u_xlat68 = inverseSqrt(x_3629);
    let x_3631 : f32 = u_xlat68;
    let x_3633 : vec4<f32> = u_xlat9;
    let x_3635 : vec3<f32> = (vec3<f32>(x_3631, x_3631, x_3631) * vec3<f32>(x_3633.x, x_3633.y, x_3633.z));
    let x_3636 : vec4<f32> = u_xlat10;
    u_xlat10 = vec4<f32>(x_3635.x, x_3635.y, x_3635.z, x_3636.w);
    let x_3640 : f32 = u_xlat25.x;
    u_xlat69 = (1.0f / x_3640);
    let x_3643 : f32 = u_xlat25.x;
    let x_3644 : i32 = u_xlati65;
    let x_3646 : f32 = x_3604.x_AdditionalLightsAttenuation[x_3644].x;
    u_xlat25.x = (x_3643 * x_3646);
    let x_3650 : f32 = u_xlat25.x;
    let x_3653 : f32 = u_xlat25.x;
    u_xlat25.x = ((-(x_3650) * x_3653) + 1.0f);
    let x_3658 : f32 = u_xlat25.x;
    u_xlat25.x = max(x_3658, 0.0f);
    let x_3662 : f32 = u_xlat25.x;
    let x_3664 : f32 = u_xlat25.x;
    u_xlat25.x = (x_3662 * x_3664);
    let x_3668 : f32 = u_xlat25.x;
    let x_3669 : f32 = u_xlat69;
    u_xlat25.x = (x_3668 * x_3669);
    let x_3672 : i32 = u_xlati65;
    let x_3674 : vec4<f32> = x_3604.x_AdditionalLightsSpotDir[x_3672];
    let x_3676 : vec4<f32> = u_xlat10;
    u_xlat69 = dot(vec3<f32>(x_3674.x, x_3674.y, x_3674.z), vec3<f32>(x_3676.x, x_3676.y, x_3676.z));
    let x_3679 : f32 = u_xlat69;
    let x_3680 : i32 = u_xlati65;
    let x_3682 : f32 = x_3604.x_AdditionalLightsAttenuation[x_3680].z;
    let x_3684 : i32 = u_xlati65;
    let x_3686 : f32 = x_3604.x_AdditionalLightsAttenuation[x_3684].w;
    u_xlat69 = ((x_3679 * x_3682) + x_3686);
    let x_3688 : f32 = u_xlat69;
    u_xlat69 = clamp(x_3688, 0.0f, 1.0f);
    let x_3690 : f32 = u_xlat69;
    let x_3691 : f32 = u_xlat69;
    u_xlat69 = (x_3690 * x_3691);
    let x_3694 : f32 = u_xlat25.x;
    let x_3695 : f32 = u_xlat69;
    u_xlat25.x = (x_3694 * x_3695);
    let x_3698 : f32 = u_xlat46;
    let x_3700 : i32 = u_xlati65;
    let x_3702 : vec4<f32> = x_3604.x_AdditionalLightsColor[x_3700];
    let x_3704 : vec3<f32> = (vec3<f32>(x_3698, x_3698, x_3698) * vec3<f32>(x_3702.x, x_3702.y, x_3702.z));
    let x_3705 : vec4<f32> = u_xlat11;
    u_xlat11 = vec4<f32>(x_3704.x, x_3704.y, x_3704.z, x_3705.w);
    let x_3707 : vec4<f32> = u_xlat3;
    let x_3709 : vec4<f32> = u_xlat10;
    u_xlat65 = dot(vec3<f32>(x_3707.x, x_3707.y, x_3707.z), vec3<f32>(x_3709.x, x_3709.y, x_3709.z));
    let x_3712 : f32 = u_xlat65;
    u_xlat65 = clamp(x_3712, 0.0f, 1.0f);
    let x_3714 : f32 = u_xlat65;
    let x_3716 : f32 = u_xlat25.x;
    u_xlat65 = (x_3714 * x_3716);
    let x_3718 : f32 = u_xlat65;
    let x_3720 : vec4<f32> = u_xlat11;
    let x_3722 : vec3<f32> = (vec3<f32>(x_3718, x_3718, x_3718) * vec3<f32>(x_3720.x, x_3720.y, x_3720.z));
    let x_3723 : vec4<f32> = u_xlat11;
    u_xlat11 = vec4<f32>(x_3722.x, x_3722.y, x_3722.z, x_3723.w);
    let x_3725 : vec4<f32> = u_xlat9;
    let x_3727 : f32 = u_xlat68;
    let x_3730 : vec4<f32> = u_xlat7;
    let x_3732 : vec3<f32> = ((vec3<f32>(x_3725.x, x_3725.y, x_3725.z) * vec3<f32>(x_3727, x_3727, x_3727)) + vec3<f32>(x_3730.x, x_3730.y, x_3730.z));
    let x_3733 : vec4<f32> = u_xlat9;
    u_xlat9 = vec4<f32>(x_3732.x, x_3732.y, x_3732.z, x_3733.w);
    let x_3735 : vec4<f32> = u_xlat9;
    let x_3737 : vec4<f32> = u_xlat9;
    u_xlat65 = dot(vec3<f32>(x_3735.x, x_3735.y, x_3735.z), vec3<f32>(x_3737.x, x_3737.y, x_3737.z));
    let x_3740 : f32 = u_xlat65;
    u_xlat65 = max(x_3740, 1.17549435e-37f);
    let x_3742 : f32 = u_xlat65;
    u_xlat65 = inverseSqrt(x_3742);
    let x_3744 : f32 = u_xlat65;
    let x_3746 : vec4<f32> = u_xlat9;
    let x_3748 : vec3<f32> = (vec3<f32>(x_3744, x_3744, x_3744) * vec3<f32>(x_3746.x, x_3746.y, x_3746.z));
    let x_3749 : vec4<f32> = u_xlat9;
    u_xlat9 = vec4<f32>(x_3748.x, x_3748.y, x_3748.z, x_3749.w);
    let x_3751 : vec4<f32> = u_xlat3;
    let x_3753 : vec4<f32> = u_xlat9;
    u_xlat65 = dot(vec3<f32>(x_3751.x, x_3751.y, x_3751.z), vec3<f32>(x_3753.x, x_3753.y, x_3753.z));
    let x_3756 : f32 = u_xlat65;
    u_xlat65 = clamp(x_3756, 0.0f, 1.0f);
    let x_3758 : vec4<f32> = u_xlat10;
    let x_3760 : vec4<f32> = u_xlat9;
    u_xlat25.x = dot(vec3<f32>(x_3758.x, x_3758.y, x_3758.z), vec3<f32>(x_3760.x, x_3760.y, x_3760.z));
    let x_3765 : f32 = u_xlat25.x;
    u_xlat25.x = clamp(x_3765, 0.0f, 1.0f);
    let x_3768 : f32 = u_xlat65;
    let x_3769 : f32 = u_xlat65;
    u_xlat65 = (x_3768 * x_3769);
    let x_3771 : f32 = u_xlat65;
    let x_3773 : f32 = u_xlat23.x;
    u_xlat65 = ((x_3771 * x_3773) + 1.000010014f);
    let x_3777 : f32 = u_xlat25.x;
    let x_3779 : f32 = u_xlat25.x;
    u_xlat25.x = (x_3777 * x_3779);
    let x_3782 : f32 = u_xlat65;
    let x_3783 : f32 = u_xlat65;
    u_xlat65 = (x_3782 * x_3783);
    let x_3786 : f32 = u_xlat25.x;
    u_xlat25.x = max(x_3786, 0.100000001f);
    let x_3789 : f32 = u_xlat65;
    let x_3791 : f32 = u_xlat25.x;
    u_xlat65 = (x_3789 * x_3791);
    let x_3793 : f32 = u_xlat67;
    let x_3794 : f32 = u_xlat65;
    u_xlat65 = (x_3793 * x_3794);
    let x_3796 : f32 = u_xlat66;
    let x_3797 : f32 = u_xlat65;
    u_xlat65 = (x_3796 / x_3797);
    let x_3799 : f32 = u_xlat65;
    let x_3802 : vec3<f32> = u_xlat5;
    let x_3803 : vec3<f32> = ((vec3<f32>(x_3799, x_3799, x_3799) * vec3<f32>(0.039999999f, 0.039999999f, 0.039999999f)) + x_3802);
    let x_3804 : vec4<f32> = u_xlat9;
    u_xlat9 = vec4<f32>(x_3803.x, x_3803.y, x_3803.z, x_3804.w);
    let x_3806 : vec4<f32> = u_xlat9;
    let x_3808 : vec4<f32> = u_xlat11;
    let x_3811 : vec4<f32> = u_xlat8;
    let x_3813 : vec3<f32> = ((vec3<f32>(x_3806.x, x_3806.y, x_3806.z) * vec3<f32>(x_3808.x, x_3808.y, x_3808.z)) + vec3<f32>(x_3811.x, x_3811.y, x_3811.z));
    let x_3814 : vec4<f32> = u_xlat8;
    u_xlat8 = vec4<f32>(x_3813.x, x_3813.y, x_3813.z, x_3814.w);

    continuing {
      let x_3816 : u32 = u_xlatu_loop_1;
      u_xlatu_loop_1 = (x_3816 + bitcast<u32>(1i));
    }
  }
  let x_3818 : vec3<f32> = u_xlat21;
  let x_3819 : vec4<f32> = u_xlat4;
  let x_3822 : vec4<f32> = u_xlat6;
  u_xlat0 = ((x_3818 * vec3<f32>(x_3819.x, x_3819.x, x_3819.x)) + vec3<f32>(x_3822.x, x_3822.y, x_3822.z));
  let x_3825 : vec4<f32> = u_xlat8;
  let x_3827 : vec3<f32> = u_xlat0;
  u_xlat0 = (vec3<f32>(x_3825.x, x_3825.y, x_3825.z) + x_3827);
  let x_3831 : vec4<f32> = vs_INTERP4;
  let x_3833 : vec3<f32> = u_xlat1;
  let x_3835 : vec3<f32> = u_xlat0;
  let x_3836 : vec3<f32> = ((vec3<f32>(x_3831.w, x_3831.w, x_3831.w) * x_3833) + x_3835);
  let x_3837 : vec4<f32> = SV_Target0;
  SV_Target0 = vec4<f32>(x_3836.x, x_3836.y, x_3836.z, x_3837.w);
  let x_3839 : bool = u_xlatb44;
  let x_3840 : f32 = u_xlat64;
  SV_Target0.w = select(1.0f, x_3840, x_3839);
  return;
}

struct main_out {
  @location(0)
  SV_Target0_1 : vec4<f32>,
}

@fragment
fn main(@builtin(position) gl_FragCoord_param : vec4<f32>, @location(1) vs_INTERP1_param : vec3<f32>, @location(2) vs_INTERP2_param : vec4<f32>, @location(3) vs_INTERP3_param : vec4<f32>, @location(4) vs_INTERP4_param : vec4<f32>, @location(0) vs_INTERP0_param : vec3<f32>, @location(5) vs_INTERP9_param : vec4<f32>) -> main_out {
  gl_FragCoord = gl_FragCoord_param;
  vs_INTERP1 = vs_INTERP1_param;
  vs_INTERP2 = vs_INTERP2_param;
  vs_INTERP3 = vs_INTERP3_param;
  vs_INTERP4 = vs_INTERP4_param;
  vs_INTERP0 = vs_INTERP0_param;
  vs_INTERP9 = vs_INTERP9_param;
  main_1();
  return main_out(SV_Target0);
}

