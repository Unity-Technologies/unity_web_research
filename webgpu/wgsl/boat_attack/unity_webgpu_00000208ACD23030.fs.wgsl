struct PGlobals {
  x_ScaledScreenParams : vec4<f32>,
  x_GlobalMipBias : vec2<f32>,
  x_AlphaToMaskAvailable : f32,
  @size(4)
  padding : u32,
  x_MainLightPosition : vec4<f32>,
  x_MainLightColor : vec4<f32>,
  x_AmbientOcclusionParam : vec4<f32>,
  x_AdditionalLightsCount : vec4<f32>,
  x_RenderingLayerMaxInt : u32,
  x_RenderingLayerRcpMaxInt : f32,
  @size(8)
  padding_1 : u32,
  x_WorldSpaceCameraPos : vec3<f32>,
  @size(4)
  padding_2 : u32,
  unity_OrthoParams : vec4<f32>,
  x_ScaleBiasRt : vec4<f32>,
  unity_MatrixV : mat4x4<f32>,
}

struct UnityPerMaterial {
  Texture2D_B222E8F_TexelSize : vec4<f32>,
  Color_C30C7CA3 : vec4<f32>,
  Texture2D_D9BFD5F1_TexelSize : vec4<f32>,
}

type Arr = array<mat4x4<f32>, 5u>;

struct MainLightShadows {
  x_MainLightWorldToShadow : Arr,
  x_CascadeShadowSplitSpheres0 : vec4<f32>,
  x_CascadeShadowSplitSpheres1 : vec4<f32>,
  x_CascadeShadowSplitSpheres2 : vec4<f32>,
  x_CascadeShadowSplitSpheres3 : vec4<f32>,
  x_CascadeShadowSplitSphereRadii : vec4<f32>,
  x_MainLightShadowOffset0 : vec4<f32>,
  x_MainLightShadowOffset1 : vec4<f32>,
  x_MainLightShadowParams : vec4<f32>,
  x_MainLightShadowmapSize : vec4<f32>,
}

type Arr_1 = array<vec4<f32>, 2u>;

struct UnityPerDraw {
  unity_ObjectToWorld : mat4x4<f32>,
  unity_WorldToObject : mat4x4<f32>,
  unity_LODFade : vec4<f32>,
  unity_WorldTransformParams : vec4<f32>,
  unity_RenderingLayer : vec4<f32>,
  unity_LightData : vec4<f32>,
  unity_LightIndices : Arr_1,
  unity_ProbesOcclusion : vec4<f32>,
  unity_SpecCube0_HDR : vec4<f32>,
  unity_SpecCube1_HDR : vec4<f32>,
  unity_SpecCube0_BoxMax : vec4<f32>,
  unity_SpecCube0_BoxMin : vec4<f32>,
  unity_SpecCube0_ProbePosition : vec4<f32>,
  unity_SpecCube1_BoxMax : vec4<f32>,
  unity_SpecCube1_BoxMin : vec4<f32>,
  unity_SpecCube1_ProbePosition : vec4<f32>,
  unity_LightmapST : vec4<f32>,
  unity_DynamicLightmapST : vec4<f32>,
  unity_SHAr : vec4<f32>,
  unity_SHAg : vec4<f32>,
  unity_SHAb : vec4<f32>,
  unity_SHBr : vec4<f32>,
  unity_SHBg : vec4<f32>,
  unity_SHBb : vec4<f32>,
  unity_SHC : vec4<f32>,
  unity_RendererBounds_Min : vec4<f32>,
  unity_RendererBounds_Max : vec4<f32>,
  unity_MatrixPreviousM : mat4x4<f32>,
  unity_MatrixPreviousMI : mat4x4<f32>,
  unity_MotionVectorsParams : vec4<f32>,
  unity_SpriteColor : vec4<f32>,
  unity_SpriteProps : vec4<f32>,
}

struct strided_arr {
  @size(16)
  el : f32,
}

type Arr_2 = array<strided_arr, 8u>;

struct LightCookies {
  x_MainLightWorldToLight : mat4x4<f32>,
  x_AdditionalLightsCookieEnableBits : Arr_2,
  x_MainLightCookieTextureFormat : f32,
  x_AdditionalLightsCookieAtlasTextureFormat : f32,
}

type Arr_3 = array<vec4<f32>, 256u>;

type Arr_4 = array<vec4<f32>, 256u>;

type Arr_5 = array<vec4<f32>, 256u>;

type Arr_6 = array<vec4<f32>, 256u>;

type Arr_7 = array<vec4<f32>, 256u>;

struct strided_arr_1 {
  @size(16)
  el : f32,
}

type Arr_8 = array<strided_arr_1, 256u>;

type Arr_9 = array<vec4<f32>, 256u>;

type Arr_10 = array<strided_arr_1, 256u>;

struct AdditionalLights {
  x_AdditionalLightsPosition : Arr_9,
  x_AdditionalLightsColor : Arr_9,
  x_AdditionalLightsAttenuation : Arr_9,
  x_AdditionalLightsSpotDir : Arr_9,
  x_AdditionalLightsOcclusionProbes : Arr_9,
  x_AdditionalLightsLayerMasks : Arr_10,
}

type Arr_11 = array<mat4x4<f32>, 256u>;

struct AdditionalLightsCookies {
  x_AdditionalLightsWorldToLights : Arr_11,
  x_AdditionalLightsCookieAtlasUVRects : Arr_9,
  x_AdditionalLightsLightTypes : Arr_10,
}

var<private> gl_FragCoord : vec4<f32>;

var<private> vs_INTERP1 : vec3<f32>;

@group(0) @binding(7) var Texture2D_B222E8F : texture_2d<f32>;

@group(0) @binding(15) var samplerTexture2D_B222E8F : sampler;

var<private> vs_INTERP3 : vec4<f32>;

@group(1) @binding(0) var<uniform> x_66 : PGlobals;

@group(1) @binding(6) var<uniform> x_78 : UnityPerMaterial;

@group(0) @binding(8) var Texture2D_D9BFD5F1 : texture_2d<f32>;

@group(0) @binding(16) var samplerTexture2D_D9BFD5F1 : sampler;

var<private> vs_INTERP4 : vec4<f32>;

var<private> vs_INTERP0 : vec3<f32>;

@group(1) @binding(3) var<uniform> x_139 : MainLightShadows;

@group(0) @binding(4) var x_MainLightShadowmapTexture : texture_depth_2d;

@group(0) @binding(12) var sampler_MainLightShadowmapTexture : sampler_comparison;

var<private> vs_INTERP2 : vec4<f32>;

@group(1) @binding(2) var<uniform> x_1592 : UnityPerDraw;

@group(0) @binding(2) var unity_LightmapInd : texture_2d<f32>;

@group(0) @binding(10) var samplerunity_Lightmap : sampler;

var<private> vs_INTERP5 : vec2<f32>;

@group(0) @binding(1) var unity_Lightmap : texture_2d<f32>;

@group(0) @binding(3) var x_ScreenSpaceOcclusionTexture : texture_2d<f32>;

@group(0) @binding(11) var sampler_ScreenSpaceOcclusionTexture : sampler;

var<private> vs_INTERP9 : vec4<f32>;

@group(1) @binding(4) var<uniform> x_3152 : LightCookies;

@group(0) @binding(5) var x_MainLightCookieTexture : texture_2d<f32>;

@group(0) @binding(13) var sampler_MainLightCookieTexture : sampler;

@group(0) @binding(0) var unity_SpecCube0 : texture_cube<f32>;

@group(0) @binding(9) var samplerunity_SpecCube0 : sampler;

@group(1) @binding(1) var<uniform> x_3612 : AdditionalLights;

@group(1) @binding(5) var<uniform> x_3721 : AdditionalLightsCookies;

@group(0) @binding(6) var x_AdditionalLightsCookieAtlasTexture : texture_2d<f32>;

@group(0) @binding(14) var sampler_AdditionalLightsCookieAtlasTexture : sampler;

var<private> SV_Target0 : vec4<f32>;

var<private> SV_Target1 : vec4<f32>;

fn main_1() {
  var hlslcc_FragCoord : vec4<f32>;
  var u_xlat0 : vec3<f32>;
  var u_xlat1 : vec4<f32>;
  var u_xlat2 : vec3<f32>;
  var u_xlat3 : vec4<f32>;
  var u_xlat4 : vec4<f32>;
  var u_xlat63 : f32;
  var u_xlat24 : vec3<f32>;
  var u_xlatb63 : bool;
  var u_xlatb65 : bool;
  var u_xlat5 : vec4<f32>;
  var txVec0 : vec3<f32>;
  var u_xlat6 : vec4<f32>;
  var txVec1 : vec3<f32>;
  var txVec2 : vec3<f32>;
  var txVec3 : vec3<f32>;
  var u_xlat65 : f32;
  var u_xlatb67 : bool;
  var u_xlat47 : vec2<f32>;
  var u_xlat7 : vec4<f32>;
  var u_xlat49 : vec2<f32>;
  var u_xlat8 : vec4<f32>;
  var u_xlat9 : vec4<f32>;
  var u_xlat10 : vec4<f32>;
  var u_xlat11 : vec4<f32>;
  var u_xlat12 : vec4<f32>;
  var u_xlat13 : vec4<f32>;
  var u_xlat67 : f32;
  var txVec4 : vec3<f32>;
  var txVec5 : vec3<f32>;
  var u_xlat26 : f32;
  var txVec6 : vec3<f32>;
  var txVec7 : vec3<f32>;
  var txVec8 : vec3<f32>;
  var txVec9 : vec3<f32>;
  var txVec10 : vec3<f32>;
  var txVec11 : vec3<f32>;
  var txVec12 : vec3<f32>;
  var u_xlat27 : vec3<f32>;
  var u_xlat14 : vec4<f32>;
  var u_xlat15 : vec4<f32>;
  var u_xlat28 : vec2<f32>;
  var u_xlat55 : vec2<f32>;
  var u_xlat50 : vec2<f32>;
  var u_xlat16 : vec4<f32>;
  var u_xlat17 : vec4<f32>;
  var u_xlat18 : vec4<f32>;
  var txVec13 : vec3<f32>;
  var txVec14 : vec3<f32>;
  var txVec15 : vec3<f32>;
  var txVec16 : vec3<f32>;
  var txVec17 : vec3<f32>;
  var txVec18 : vec3<f32>;
  var txVec19 : vec3<f32>;
  var txVec20 : vec3<f32>;
  var txVec21 : vec3<f32>;
  var txVec22 : vec3<f32>;
  var txVec23 : vec3<f32>;
  var txVec24 : vec3<f32>;
  var txVec25 : vec3<f32>;
  var txVec26 : vec3<f32>;
  var txVec27 : vec3<f32>;
  var txVec28 : vec3<f32>;
  var txVec29 : vec3<f32>;
  var u_xlatb25 : bool;
  var u_xlatb46 : bool;
  var u_xlat25 : vec3<f32>;
  var u_xlatb1 : bool;
  var x_1505 : f32;
  var u_xlat22 : vec3<f32>;
  var u_xlat43 : f32;
  var u_xlat64 : f32;
  var u_xlatb43 : bool;
  var x_1553 : f32;
  var u_xlatb22 : vec3<bool>;
  var x_1679 : f32;
  var x_1692 : f32;
  var x_1704 : f32;
  var u_xlat68 : f32;
  var txVec30 : vec3<f32>;
  var txVec31 : vec3<f32>;
  var txVec32 : vec3<f32>;
  var txVec33 : vec3<f32>;
  var u_xlatb48 : vec2<bool>;
  var u_xlat48 : vec2<f32>;
  var u_xlat51 : vec2<f32>;
  var txVec34 : vec3<f32>;
  var u_xlat69 : f32;
  var txVec35 : vec3<f32>;
  var txVec36 : vec3<f32>;
  var txVec37 : vec3<f32>;
  var txVec38 : vec3<f32>;
  var txVec39 : vec3<f32>;
  var txVec40 : vec3<f32>;
  var txVec41 : vec3<f32>;
  var txVec42 : vec3<f32>;
  var u_xlat29 : vec2<f32>;
  var u_xlat52 : vec2<f32>;
  var u_xlat19 : vec4<f32>;
  var u_xlat20 : vec4<f32>;
  var txVec43 : vec3<f32>;
  var txVec44 : vec3<f32>;
  var u_xlat71 : f32;
  var txVec45 : vec3<f32>;
  var txVec46 : vec3<f32>;
  var txVec47 : vec3<f32>;
  var txVec48 : vec3<f32>;
  var txVec49 : vec3<f32>;
  var txVec50 : vec3<f32>;
  var txVec51 : vec3<f32>;
  var txVec52 : vec3<f32>;
  var txVec53 : vec3<f32>;
  var txVec54 : vec3<f32>;
  var txVec55 : vec3<f32>;
  var txVec56 : vec3<f32>;
  var txVec57 : vec3<f32>;
  var txVec58 : vec3<f32>;
  var txVec59 : vec3<f32>;
  var u_xlatb4 : bool;
  var x_3218 : f32;
  var x_3230 : vec3<f32>;
  var u_xlatu63 : u32;
  var u_xlatu_loop_1 : u32;
  var u_xlatu3 : u32;
  var u_xlati67 : i32;
  var indexable : array<vec4<u32>, 4u>;
  var u_xlat70 : f32;
  var u_xlatu71 : u32;
  var u_xlati72 : i32;
  var u_xlati71 : i32;
  var u_xlati73 : i32;
  var u_xlatb71 : bool;
  var u_xlat53 : vec2<f32>;
  var u_xlatb53 : vec2<bool>;
  var x_4014 : f32;
  var x_4027 : f32;
  var x_4079 : f32;
  var x_4090 : vec3<f32>;
  var x_4271 : f32;
  var u_xlatu0 : u32;
  var u_xlat_precise_vec4 : vec4<f32>;
  var u_xlat_precise_ivec4 : vec4<i32>;
  var u_xlat_precise_bvec4 : vec4<bool>;
  var u_xlat_precise_uvec4 : vec4<u32>;
  let x_13 : vec4<f32> = gl_FragCoord;
  let x_14 : vec3<f32> = vec3<f32>(x_13.x, x_13.y, x_13.z);
  let x_20 : f32 = gl_FragCoord.w;
  hlslcc_FragCoord = vec4<f32>(x_14.x, x_14.y, x_14.z, (1.0f / x_20));
  let x_30 : vec3<f32> = vs_INTERP1;
  let x_31 : vec3<f32> = vs_INTERP1;
  u_xlat0.x = dot(x_30, x_31);
  let x_37 : f32 = u_xlat0.x;
  u_xlat0.x = sqrt(x_37);
  let x_41 : f32 = u_xlat0.x;
  u_xlat0.x = (1.0f / x_41);
  let x_44 : vec3<f32> = u_xlat0;
  let x_46 : vec3<f32> = vs_INTERP1;
  u_xlat0 = (vec3<f32>(x_44.x, x_44.x, x_44.x) * x_46);
  let x_61 : vec4<f32> = vs_INTERP3;
  let x_71 : f32 = x_66.x_GlobalMipBias.x;
  let x_72 : vec4<f32> = textureSampleBias(Texture2D_B222E8F, samplerTexture2D_B222E8F, vec2<f32>(x_61.x, x_61.y), x_71);
  u_xlat1 = x_72;
  let x_74 : vec4<f32> = u_xlat1;
  let x_81 : vec4<f32> = x_78.Color_C30C7CA3;
  u_xlat2 = (vec3<f32>(x_74.x, x_74.y, x_74.z) * vec3<f32>(x_81.x, x_81.y, x_81.z));
  let x_90 : vec4<f32> = vs_INTERP3;
  let x_93 : f32 = x_66.x_GlobalMipBias.x;
  let x_94 : vec4<f32> = textureSampleBias(Texture2D_D9BFD5F1, samplerTexture2D_D9BFD5F1, vec2<f32>(x_90.x, x_90.y), x_93);
  u_xlat3 = vec4<f32>(x_94.w, x_94.x, x_94.y, x_94.z);
  let x_97 : vec4<f32> = u_xlat3;
  u_xlat4 = ((vec4<f32>(x_97.y, x_97.z, x_97.w, x_97.x) * vec4<f32>(2.0f, 2.0f, 2.0f, 2.0f)) + vec4<f32>(-1.0f, -1.0f, -1.0f, -1.0f));
  let x_106 : vec4<f32> = u_xlat4;
  let x_107 : vec4<f32> = u_xlat4;
  u_xlat63 = dot(x_106, x_107);
  let x_109 : f32 = u_xlat63;
  u_xlat63 = inverseSqrt(x_109);
  let x_112 : f32 = u_xlat63;
  let x_114 : vec4<f32> = u_xlat4;
  u_xlat24 = (vec3<f32>(x_112, x_112, x_112) * vec3<f32>(x_114.x, x_114.y, x_114.z));
  let x_120 : f32 = vs_INTERP4.y;
  u_xlat63 = (x_120 * 200.0f);
  let x_123 : f32 = u_xlat63;
  u_xlat63 = min(x_123, 1.0f);
  let x_125 : f32 = u_xlat63;
  let x_127 : vec4<f32> = u_xlat1;
  let x_129 : vec3<f32> = (vec3<f32>(x_125, x_125, x_125) * vec3<f32>(x_127.x, x_127.y, x_127.z));
  let x_130 : vec4<f32> = u_xlat1;
  u_xlat1 = vec4<f32>(x_129.x, x_129.y, x_129.z, x_130.w);
  let x_133 : vec3<f32> = vs_INTERP0;
  let x_142 : vec4<f32> = x_139.x_MainLightWorldToShadow[0i][1i];
  let x_144 : vec3<f32> = (vec3<f32>(x_133.y, x_133.y, x_133.y) * vec3<f32>(x_142.x, x_142.y, x_142.z));
  let x_145 : vec4<f32> = u_xlat4;
  u_xlat4 = vec4<f32>(x_144.x, x_144.y, x_144.z, x_145.w);
  let x_148 : vec4<f32> = x_139.x_MainLightWorldToShadow[0i][0i];
  let x_150 : vec3<f32> = vs_INTERP0;
  let x_153 : vec4<f32> = u_xlat4;
  let x_155 : vec3<f32> = ((vec3<f32>(x_148.x, x_148.y, x_148.z) * vec3<f32>(x_150.x, x_150.x, x_150.x)) + vec3<f32>(x_153.x, x_153.y, x_153.z));
  let x_156 : vec4<f32> = u_xlat4;
  u_xlat4 = vec4<f32>(x_155.x, x_155.y, x_155.z, x_156.w);
  let x_160 : vec4<f32> = x_139.x_MainLightWorldToShadow[0i][2i];
  let x_162 : vec3<f32> = vs_INTERP0;
  let x_165 : vec4<f32> = u_xlat4;
  let x_167 : vec3<f32> = ((vec3<f32>(x_160.x, x_160.y, x_160.z) * vec3<f32>(x_162.z, x_162.z, x_162.z)) + vec3<f32>(x_165.x, x_165.y, x_165.z));
  let x_168 : vec4<f32> = u_xlat4;
  u_xlat4 = vec4<f32>(x_167.x, x_167.y, x_167.z, x_168.w);
  let x_170 : vec4<f32> = u_xlat4;
  let x_174 : vec4<f32> = x_139.x_MainLightWorldToShadow[0i][3i];
  let x_176 : vec3<f32> = (vec3<f32>(x_170.x, x_170.y, x_170.z) + vec3<f32>(x_174.x, x_174.y, x_174.z));
  let x_177 : vec4<f32> = u_xlat4;
  u_xlat4 = vec4<f32>(x_176.x, x_176.y, x_176.z, x_177.w);
  let x_185 : f32 = x_139.x_MainLightShadowParams.y;
  u_xlatb63 = (0.0f < x_185);
  let x_187 : bool = u_xlatb63;
  if (x_187) {
    let x_192 : f32 = x_139.x_MainLightShadowParams.y;
    u_xlatb65 = (x_192 == 1.0f);
    let x_194 : bool = u_xlatb65;
    if (x_194) {
      let x_198 : vec4<f32> = u_xlat4;
      let x_202 : vec4<f32> = x_139.x_MainLightShadowOffset0;
      u_xlat5 = (vec4<f32>(x_198.x, x_198.y, x_198.x, x_198.y) + x_202);
      let x_205 : vec4<f32> = u_xlat5;
      let x_206 : vec2<f32> = vec2<f32>(x_205.x, x_205.y);
      let x_209 : f32 = u_xlat4.z;
      txVec0 = vec3<f32>(x_206.x, x_206.y, x_209);
      let x_222 : vec3<f32> = txVec0;
      let x_224 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_222.xy, x_222.z);
      u_xlat6.x = x_224;
      let x_227 : vec4<f32> = u_xlat5;
      let x_228 : vec2<f32> = vec2<f32>(x_227.z, x_227.w);
      let x_230 : f32 = u_xlat4.z;
      txVec1 = vec3<f32>(x_228.x, x_228.y, x_230);
      let x_237 : vec3<f32> = txVec1;
      let x_239 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_237.xy, x_237.z);
      u_xlat6.y = x_239;
      let x_241 : vec4<f32> = u_xlat4;
      let x_245 : vec4<f32> = x_139.x_MainLightShadowOffset1;
      u_xlat5 = (vec4<f32>(x_241.x, x_241.y, x_241.x, x_241.y) + x_245);
      let x_248 : vec4<f32> = u_xlat5;
      let x_249 : vec2<f32> = vec2<f32>(x_248.x, x_248.y);
      let x_251 : f32 = u_xlat4.z;
      txVec2 = vec3<f32>(x_249.x, x_249.y, x_251);
      let x_258 : vec3<f32> = txVec2;
      let x_260 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_258.xy, x_258.z);
      u_xlat6.z = x_260;
      let x_263 : vec4<f32> = u_xlat5;
      let x_264 : vec2<f32> = vec2<f32>(x_263.z, x_263.w);
      let x_266 : f32 = u_xlat4.z;
      txVec3 = vec3<f32>(x_264.x, x_264.y, x_266);
      let x_273 : vec3<f32> = txVec3;
      let x_275 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_273.xy, x_273.z);
      u_xlat6.w = x_275;
      let x_278 : vec4<f32> = u_xlat6;
      u_xlat65 = dot(x_278, vec4<f32>(0.25f, 0.25f, 0.25f, 0.25f));
    } else {
      let x_285 : f32 = x_139.x_MainLightShadowParams.y;
      u_xlatb67 = (x_285 == 2.0f);
      let x_287 : bool = u_xlatb67;
      if (x_287) {
        let x_290 : vec4<f32> = u_xlat4;
        let x_294 : vec4<f32> = x_139.x_MainLightShadowmapSize;
        let x_299 : vec2<f32> = ((vec2<f32>(x_290.x, x_290.y) * vec2<f32>(x_294.z, x_294.w)) + vec2<f32>(0.5f, 0.5f));
        let x_300 : vec4<f32> = u_xlat5;
        u_xlat5 = vec4<f32>(x_299.x, x_299.y, x_300.z, x_300.w);
        let x_302 : vec4<f32> = u_xlat5;
        let x_304 : vec2<f32> = floor(vec2<f32>(x_302.x, x_302.y));
        let x_305 : vec4<f32> = u_xlat5;
        u_xlat5 = vec4<f32>(x_304.x, x_304.y, x_305.z, x_305.w);
        let x_309 : vec4<f32> = u_xlat4;
        let x_312 : vec4<f32> = x_139.x_MainLightShadowmapSize;
        let x_315 : vec4<f32> = u_xlat5;
        u_xlat47 = ((vec2<f32>(x_309.x, x_309.y) * vec2<f32>(x_312.z, x_312.w)) + -(vec2<f32>(x_315.x, x_315.y)));
        let x_319 : vec2<f32> = u_xlat47;
        u_xlat6 = (vec4<f32>(x_319.x, x_319.x, x_319.y, x_319.y) + vec4<f32>(0.5f, 1.0f, 0.5f, 1.0f));
        let x_324 : vec4<f32> = u_xlat6;
        let x_326 : vec4<f32> = u_xlat6;
        u_xlat7 = (vec4<f32>(x_324.x, x_324.x, x_324.z, x_324.z) * vec4<f32>(x_326.x, x_326.x, x_326.z, x_326.z));
        let x_329 : vec4<f32> = u_xlat7;
        let x_333 : vec2<f32> = (vec2<f32>(x_329.y, x_329.w) * vec2<f32>(0.079999998f, 0.079999998f));
        let x_334 : vec4<f32> = u_xlat6;
        u_xlat6 = vec4<f32>(x_333.x, x_334.y, x_333.y, x_334.w);
        let x_336 : vec4<f32> = u_xlat7;
        let x_339 : vec2<f32> = u_xlat47;
        let x_341 : vec2<f32> = ((vec2<f32>(x_336.x, x_336.z) * vec2<f32>(0.5f, 0.5f)) + -(x_339));
        let x_342 : vec4<f32> = u_xlat7;
        u_xlat7 = vec4<f32>(x_341.x, x_341.y, x_342.z, x_342.w);
        let x_345 : vec2<f32> = u_xlat47;
        u_xlat49 = (-(x_345) + vec2<f32>(1.0f, 1.0f));
        let x_350 : vec2<f32> = u_xlat47;
        let x_352 : vec2<f32> = min(x_350, vec2<f32>(0.0f, 0.0f));
        let x_353 : vec4<f32> = u_xlat8;
        u_xlat8 = vec4<f32>(x_352.x, x_352.y, x_353.z, x_353.w);
        let x_355 : vec4<f32> = u_xlat8;
        let x_358 : vec4<f32> = u_xlat8;
        let x_361 : vec2<f32> = u_xlat49;
        let x_362 : vec2<f32> = ((-(vec2<f32>(x_355.x, x_355.y)) * vec2<f32>(x_358.x, x_358.y)) + x_361);
        let x_363 : vec4<f32> = u_xlat8;
        u_xlat8 = vec4<f32>(x_362.x, x_362.y, x_363.z, x_363.w);
        let x_365 : vec2<f32> = u_xlat47;
        u_xlat47 = max(x_365, vec2<f32>(0.0f, 0.0f));
        let x_367 : vec2<f32> = u_xlat47;
        let x_369 : vec2<f32> = u_xlat47;
        let x_371 : vec4<f32> = u_xlat6;
        u_xlat47 = ((-(x_367) * x_369) + vec2<f32>(x_371.y, x_371.w));
        let x_374 : vec4<f32> = u_xlat8;
        let x_376 : vec2<f32> = (vec2<f32>(x_374.x, x_374.y) + vec2<f32>(1.0f, 1.0f));
        let x_377 : vec4<f32> = u_xlat8;
        u_xlat8 = vec4<f32>(x_376.x, x_376.y, x_377.z, x_377.w);
        let x_379 : vec2<f32> = u_xlat47;
        u_xlat47 = (x_379 + vec2<f32>(1.0f, 1.0f));
        let x_382 : vec4<f32> = u_xlat7;
        let x_386 : vec2<f32> = (vec2<f32>(x_382.x, x_382.y) * vec2<f32>(0.159999996f, 0.159999996f));
        let x_387 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_386.x, x_386.y, x_387.z, x_387.w);
        let x_389 : vec2<f32> = u_xlat49;
        let x_390 : vec2<f32> = (x_389 * vec2<f32>(0.159999996f, 0.159999996f));
        let x_391 : vec4<f32> = u_xlat7;
        u_xlat7 = vec4<f32>(x_390.x, x_390.y, x_391.z, x_391.w);
        let x_393 : vec4<f32> = u_xlat8;
        let x_395 : vec2<f32> = (vec2<f32>(x_393.x, x_393.y) * vec2<f32>(0.159999996f, 0.159999996f));
        let x_396 : vec4<f32> = u_xlat8;
        u_xlat8 = vec4<f32>(x_395.x, x_395.y, x_396.z, x_396.w);
        let x_399 : vec2<f32> = u_xlat47;
        let x_400 : vec2<f32> = (x_399 * vec2<f32>(0.159999996f, 0.159999996f));
        let x_401 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_400.x, x_400.y, x_401.z, x_401.w);
        let x_403 : vec4<f32> = u_xlat6;
        u_xlat47 = (vec2<f32>(x_403.y, x_403.w) * vec2<f32>(0.159999996f, 0.159999996f));
        let x_407 : f32 = u_xlat8.x;
        u_xlat9.z = x_407;
        let x_410 : f32 = u_xlat47.x;
        u_xlat9.w = x_410;
        let x_413 : f32 = u_xlat10.x;
        u_xlat7.z = x_413;
        let x_416 : f32 = u_xlat6.x;
        u_xlat7.w = x_416;
        let x_419 : vec4<f32> = u_xlat7;
        let x_421 : vec4<f32> = u_xlat9;
        u_xlat11 = (vec4<f32>(x_419.z, x_419.w, x_419.x, x_419.z) + vec4<f32>(x_421.z, x_421.w, x_421.x, x_421.z));
        let x_425 : f32 = u_xlat9.y;
        u_xlat8.z = x_425;
        let x_428 : f32 = u_xlat47.y;
        u_xlat8.w = x_428;
        let x_431 : f32 = u_xlat7.y;
        u_xlat10.z = x_431;
        let x_434 : f32 = u_xlat6.z;
        u_xlat10.w = x_434;
        let x_436 : vec4<f32> = u_xlat8;
        let x_438 : vec4<f32> = u_xlat10;
        let x_440 : vec3<f32> = (vec3<f32>(x_436.z, x_436.y, x_436.w) + vec3<f32>(x_438.z, x_438.y, x_438.w));
        let x_441 : vec4<f32> = u_xlat6;
        u_xlat6 = vec4<f32>(x_440.x, x_440.y, x_440.z, x_441.w);
        let x_443 : vec4<f32> = u_xlat7;
        let x_445 : vec4<f32> = u_xlat11;
        let x_447 : vec3<f32> = (vec3<f32>(x_443.x, x_443.z, x_443.w) / vec3<f32>(x_445.z, x_445.w, x_445.y));
        let x_448 : vec4<f32> = u_xlat7;
        u_xlat7 = vec4<f32>(x_447.x, x_447.y, x_447.z, x_448.w);
        let x_450 : vec4<f32> = u_xlat7;
        let x_456 : vec3<f32> = (vec3<f32>(x_450.x, x_450.y, x_450.z) + vec3<f32>(-2.5f, -0.5f, 1.5f));
        let x_457 : vec4<f32> = u_xlat7;
        u_xlat7 = vec4<f32>(x_456.x, x_456.y, x_456.z, x_457.w);
        let x_459 : vec4<f32> = u_xlat10;
        let x_461 : vec4<f32> = u_xlat6;
        let x_463 : vec3<f32> = (vec3<f32>(x_459.z, x_459.y, x_459.w) / vec3<f32>(x_461.x, x_461.y, x_461.z));
        let x_464 : vec4<f32> = u_xlat8;
        u_xlat8 = vec4<f32>(x_463.x, x_463.y, x_463.z, x_464.w);
        let x_466 : vec4<f32> = u_xlat8;
        let x_468 : vec3<f32> = (vec3<f32>(x_466.x, x_466.y, x_466.z) + vec3<f32>(-2.5f, -0.5f, 1.5f));
        let x_469 : vec4<f32> = u_xlat8;
        u_xlat8 = vec4<f32>(x_468.x, x_468.y, x_468.z, x_469.w);
        let x_471 : vec4<f32> = u_xlat7;
        let x_474 : vec4<f32> = x_139.x_MainLightShadowmapSize;
        let x_476 : vec3<f32> = (vec3<f32>(x_471.y, x_471.x, x_471.z) * vec3<f32>(x_474.x, x_474.x, x_474.x));
        let x_477 : vec4<f32> = u_xlat7;
        u_xlat7 = vec4<f32>(x_476.x, x_476.y, x_476.z, x_477.w);
        let x_479 : vec4<f32> = u_xlat8;
        let x_482 : vec4<f32> = x_139.x_MainLightShadowmapSize;
        let x_484 : vec3<f32> = (vec3<f32>(x_479.x, x_479.y, x_479.z) * vec3<f32>(x_482.y, x_482.y, x_482.y));
        let x_485 : vec4<f32> = u_xlat8;
        u_xlat8 = vec4<f32>(x_484.x, x_484.y, x_484.z, x_485.w);
        let x_488 : f32 = u_xlat8.x;
        u_xlat7.w = x_488;
        let x_490 : vec4<f32> = u_xlat5;
        let x_493 : vec4<f32> = x_139.x_MainLightShadowmapSize;
        let x_496 : vec4<f32> = u_xlat7;
        u_xlat9 = ((vec4<f32>(x_490.x, x_490.y, x_490.x, x_490.y) * vec4<f32>(x_493.x, x_493.y, x_493.x, x_493.y)) + vec4<f32>(x_496.y, x_496.w, x_496.x, x_496.w));
        let x_499 : vec4<f32> = u_xlat5;
        let x_502 : vec4<f32> = x_139.x_MainLightShadowmapSize;
        let x_505 : vec4<f32> = u_xlat7;
        u_xlat47 = ((vec2<f32>(x_499.x, x_499.y) * vec2<f32>(x_502.x, x_502.y)) + vec2<f32>(x_505.z, x_505.w));
        let x_509 : f32 = u_xlat7.y;
        u_xlat8.w = x_509;
        let x_511 : vec4<f32> = u_xlat8;
        let x_512 : vec2<f32> = vec2<f32>(x_511.y, x_511.z);
        let x_513 : vec4<f32> = u_xlat7;
        u_xlat7 = vec4<f32>(x_513.x, x_512.x, x_513.z, x_512.y);
        let x_515 : vec4<f32> = u_xlat5;
        let x_518 : vec4<f32> = x_139.x_MainLightShadowmapSize;
        let x_521 : vec4<f32> = u_xlat7;
        u_xlat10 = ((vec4<f32>(x_515.x, x_515.y, x_515.x, x_515.y) * vec4<f32>(x_518.x, x_518.y, x_518.x, x_518.y)) + vec4<f32>(x_521.x, x_521.y, x_521.z, x_521.y));
        let x_524 : vec4<f32> = u_xlat5;
        let x_527 : vec4<f32> = x_139.x_MainLightShadowmapSize;
        let x_530 : vec4<f32> = u_xlat8;
        u_xlat8 = ((vec4<f32>(x_524.x, x_524.y, x_524.x, x_524.y) * vec4<f32>(x_527.x, x_527.y, x_527.x, x_527.y)) + vec4<f32>(x_530.w, x_530.y, x_530.w, x_530.z));
        let x_533 : vec4<f32> = u_xlat5;
        let x_536 : vec4<f32> = x_139.x_MainLightShadowmapSize;
        let x_539 : vec4<f32> = u_xlat7;
        u_xlat7 = ((vec4<f32>(x_533.x, x_533.y, x_533.x, x_533.y) * vec4<f32>(x_536.x, x_536.y, x_536.x, x_536.y)) + vec4<f32>(x_539.x, x_539.w, x_539.z, x_539.w));
        let x_543 : vec4<f32> = u_xlat6;
        let x_545 : vec4<f32> = u_xlat11;
        u_xlat12 = (vec4<f32>(x_543.x, x_543.x, x_543.x, x_543.y) * vec4<f32>(x_545.z, x_545.w, x_545.y, x_545.z));
        let x_549 : vec4<f32> = u_xlat6;
        let x_551 : vec4<f32> = u_xlat11;
        u_xlat13 = (vec4<f32>(x_549.y, x_549.y, x_549.z, x_549.z) * x_551);
        let x_555 : f32 = u_xlat6.z;
        let x_557 : f32 = u_xlat11.y;
        u_xlat67 = (x_555 * x_557);
        let x_560 : vec4<f32> = u_xlat9;
        let x_561 : vec2<f32> = vec2<f32>(x_560.x, x_560.y);
        let x_563 : f32 = u_xlat4.z;
        txVec4 = vec3<f32>(x_561.x, x_561.y, x_563);
        let x_570 : vec3<f32> = txVec4;
        let x_572 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_570.xy, x_570.z);
        u_xlat5.x = x_572;
        let x_575 : vec4<f32> = u_xlat9;
        let x_576 : vec2<f32> = vec2<f32>(x_575.z, x_575.w);
        let x_578 : f32 = u_xlat4.z;
        txVec5 = vec3<f32>(x_576.x, x_576.y, x_578);
        let x_586 : vec3<f32> = txVec5;
        let x_588 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_586.xy, x_586.z);
        u_xlat26 = x_588;
        let x_589 : f32 = u_xlat26;
        let x_591 : f32 = u_xlat12.y;
        u_xlat26 = (x_589 * x_591);
        let x_594 : f32 = u_xlat12.x;
        let x_596 : f32 = u_xlat5.x;
        let x_598 : f32 = u_xlat26;
        u_xlat5.x = ((x_594 * x_596) + x_598);
        let x_602 : vec2<f32> = u_xlat47;
        let x_604 : f32 = u_xlat4.z;
        txVec6 = vec3<f32>(x_602.x, x_602.y, x_604);
        let x_611 : vec3<f32> = txVec6;
        let x_613 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_611.xy, x_611.z);
        u_xlat26 = x_613;
        let x_615 : f32 = u_xlat12.z;
        let x_616 : f32 = u_xlat26;
        let x_619 : f32 = u_xlat5.x;
        u_xlat5.x = ((x_615 * x_616) + x_619);
        let x_623 : vec4<f32> = u_xlat8;
        let x_624 : vec2<f32> = vec2<f32>(x_623.x, x_623.y);
        let x_626 : f32 = u_xlat4.z;
        txVec7 = vec3<f32>(x_624.x, x_624.y, x_626);
        let x_633 : vec3<f32> = txVec7;
        let x_635 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_633.xy, x_633.z);
        u_xlat26 = x_635;
        let x_637 : f32 = u_xlat12.w;
        let x_638 : f32 = u_xlat26;
        let x_641 : f32 = u_xlat5.x;
        u_xlat5.x = ((x_637 * x_638) + x_641);
        let x_645 : vec4<f32> = u_xlat10;
        let x_646 : vec2<f32> = vec2<f32>(x_645.x, x_645.y);
        let x_648 : f32 = u_xlat4.z;
        txVec8 = vec3<f32>(x_646.x, x_646.y, x_648);
        let x_655 : vec3<f32> = txVec8;
        let x_657 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_655.xy, x_655.z);
        u_xlat26 = x_657;
        let x_659 : f32 = u_xlat13.x;
        let x_660 : f32 = u_xlat26;
        let x_663 : f32 = u_xlat5.x;
        u_xlat5.x = ((x_659 * x_660) + x_663);
        let x_667 : vec4<f32> = u_xlat10;
        let x_668 : vec2<f32> = vec2<f32>(x_667.z, x_667.w);
        let x_670 : f32 = u_xlat4.z;
        txVec9 = vec3<f32>(x_668.x, x_668.y, x_670);
        let x_677 : vec3<f32> = txVec9;
        let x_679 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_677.xy, x_677.z);
        u_xlat26 = x_679;
        let x_681 : f32 = u_xlat13.y;
        let x_682 : f32 = u_xlat26;
        let x_685 : f32 = u_xlat5.x;
        u_xlat5.x = ((x_681 * x_682) + x_685);
        let x_689 : vec4<f32> = u_xlat8;
        let x_690 : vec2<f32> = vec2<f32>(x_689.z, x_689.w);
        let x_692 : f32 = u_xlat4.z;
        txVec10 = vec3<f32>(x_690.x, x_690.y, x_692);
        let x_699 : vec3<f32> = txVec10;
        let x_701 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_699.xy, x_699.z);
        u_xlat26 = x_701;
        let x_703 : f32 = u_xlat13.z;
        let x_704 : f32 = u_xlat26;
        let x_707 : f32 = u_xlat5.x;
        u_xlat5.x = ((x_703 * x_704) + x_707);
        let x_711 : vec4<f32> = u_xlat7;
        let x_712 : vec2<f32> = vec2<f32>(x_711.x, x_711.y);
        let x_714 : f32 = u_xlat4.z;
        txVec11 = vec3<f32>(x_712.x, x_712.y, x_714);
        let x_721 : vec3<f32> = txVec11;
        let x_723 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_721.xy, x_721.z);
        u_xlat26 = x_723;
        let x_725 : f32 = u_xlat13.w;
        let x_726 : f32 = u_xlat26;
        let x_729 : f32 = u_xlat5.x;
        u_xlat5.x = ((x_725 * x_726) + x_729);
        let x_733 : vec4<f32> = u_xlat7;
        let x_734 : vec2<f32> = vec2<f32>(x_733.z, x_733.w);
        let x_736 : f32 = u_xlat4.z;
        txVec12 = vec3<f32>(x_734.x, x_734.y, x_736);
        let x_743 : vec3<f32> = txVec12;
        let x_745 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_743.xy, x_743.z);
        u_xlat26 = x_745;
        let x_746 : f32 = u_xlat67;
        let x_747 : f32 = u_xlat26;
        let x_750 : f32 = u_xlat5.x;
        u_xlat65 = ((x_746 * x_747) + x_750);
      } else {
        let x_753 : vec4<f32> = u_xlat4;
        let x_756 : vec4<f32> = x_139.x_MainLightShadowmapSize;
        let x_759 : vec2<f32> = ((vec2<f32>(x_753.x, x_753.y) * vec2<f32>(x_756.z, x_756.w)) + vec2<f32>(0.5f, 0.5f));
        let x_760 : vec4<f32> = u_xlat5;
        u_xlat5 = vec4<f32>(x_759.x, x_759.y, x_760.z, x_760.w);
        let x_762 : vec4<f32> = u_xlat5;
        let x_764 : vec2<f32> = floor(vec2<f32>(x_762.x, x_762.y));
        let x_765 : vec4<f32> = u_xlat5;
        u_xlat5 = vec4<f32>(x_764.x, x_764.y, x_765.z, x_765.w);
        let x_767 : vec4<f32> = u_xlat4;
        let x_770 : vec4<f32> = x_139.x_MainLightShadowmapSize;
        let x_773 : vec4<f32> = u_xlat5;
        u_xlat47 = ((vec2<f32>(x_767.x, x_767.y) * vec2<f32>(x_770.z, x_770.w)) + -(vec2<f32>(x_773.x, x_773.y)));
        let x_777 : vec2<f32> = u_xlat47;
        u_xlat6 = (vec4<f32>(x_777.x, x_777.x, x_777.y, x_777.y) + vec4<f32>(0.5f, 1.0f, 0.5f, 1.0f));
        let x_780 : vec4<f32> = u_xlat6;
        let x_782 : vec4<f32> = u_xlat6;
        u_xlat7 = (vec4<f32>(x_780.x, x_780.x, x_780.z, x_780.z) * vec4<f32>(x_782.x, x_782.x, x_782.z, x_782.z));
        let x_785 : vec4<f32> = u_xlat7;
        let x_789 : vec2<f32> = (vec2<f32>(x_785.y, x_785.w) * vec2<f32>(0.040816002f, 0.040816002f));
        let x_790 : vec4<f32> = u_xlat8;
        u_xlat8 = vec4<f32>(x_790.x, x_789.x, x_790.z, x_789.y);
        let x_792 : vec4<f32> = u_xlat7;
        let x_795 : vec2<f32> = u_xlat47;
        let x_797 : vec2<f32> = ((vec2<f32>(x_792.x, x_792.z) * vec2<f32>(0.5f, 0.5f)) + -(x_795));
        let x_798 : vec4<f32> = u_xlat6;
        u_xlat6 = vec4<f32>(x_797.x, x_798.y, x_797.y, x_798.w);
        let x_800 : vec2<f32> = u_xlat47;
        let x_802 : vec2<f32> = (-(x_800) + vec2<f32>(1.0f, 1.0f));
        let x_803 : vec4<f32> = u_xlat7;
        u_xlat7 = vec4<f32>(x_802.x, x_802.y, x_803.z, x_803.w);
        let x_805 : vec2<f32> = u_xlat47;
        u_xlat49 = min(x_805, vec2<f32>(0.0f, 0.0f));
        let x_807 : vec2<f32> = u_xlat49;
        let x_809 : vec2<f32> = u_xlat49;
        let x_811 : vec4<f32> = u_xlat7;
        let x_813 : vec2<f32> = ((-(x_807) * x_809) + vec2<f32>(x_811.x, x_811.y));
        let x_814 : vec4<f32> = u_xlat7;
        u_xlat7 = vec4<f32>(x_813.x, x_813.y, x_814.z, x_814.w);
        let x_816 : vec2<f32> = u_xlat47;
        u_xlat49 = max(x_816, vec2<f32>(0.0f, 0.0f));
        let x_819 : vec2<f32> = u_xlat49;
        let x_821 : vec2<f32> = u_xlat49;
        let x_823 : vec4<f32> = u_xlat6;
        let x_825 : vec2<f32> = ((-(x_819) * x_821) + vec2<f32>(x_823.y, x_823.w));
        let x_826 : vec3<f32> = u_xlat27;
        u_xlat27 = vec3<f32>(x_825.x, x_826.y, x_825.y);
        let x_828 : vec4<f32> = u_xlat7;
        let x_831 : vec2<f32> = (vec2<f32>(x_828.x, x_828.y) + vec2<f32>(2.0f, 2.0f));
        let x_832 : vec4<f32> = u_xlat7;
        u_xlat7 = vec4<f32>(x_831.x, x_831.y, x_832.z, x_832.w);
        let x_834 : vec3<f32> = u_xlat27;
        let x_836 : vec2<f32> = (vec2<f32>(x_834.x, x_834.z) + vec2<f32>(2.0f, 2.0f));
        let x_837 : vec4<f32> = u_xlat6;
        u_xlat6 = vec4<f32>(x_837.x, x_836.x, x_837.z, x_836.y);
        let x_840 : f32 = u_xlat6.y;
        u_xlat9.z = (x_840 * 0.081632003f);
        let x_844 : vec4<f32> = u_xlat6;
        let x_847 : vec3<f32> = (vec3<f32>(x_844.z, x_844.x, x_844.w) * vec3<f32>(0.081632003f, 0.081632003f, 0.081632003f));
        let x_848 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_847.x, x_847.y, x_847.z, x_848.w);
        let x_850 : vec4<f32> = u_xlat7;
        let x_853 : vec2<f32> = (vec2<f32>(x_850.x, x_850.y) * vec2<f32>(0.081632003f, 0.081632003f));
        let x_854 : vec4<f32> = u_xlat6;
        u_xlat6 = vec4<f32>(x_853.x, x_853.y, x_854.z, x_854.w);
        let x_857 : f32 = u_xlat10.y;
        u_xlat9.x = x_857;
        let x_859 : vec2<f32> = u_xlat47;
        let x_866 : vec2<f32> = ((vec2<f32>(x_859.x, x_859.x) * vec2<f32>(-0.081632003f, 0.081632003f)) + vec2<f32>(0.163264006f, 0.081632003f));
        let x_867 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_867.x, x_866.x, x_867.z, x_866.y);
        let x_869 : vec2<f32> = u_xlat47;
        let x_873 : vec2<f32> = ((vec2<f32>(x_869.x, x_869.x) * vec2<f32>(-0.081632003f, 0.081632003f)) + vec2<f32>(0.081632003f, 0.163264006f));
        let x_874 : vec4<f32> = u_xlat7;
        u_xlat7 = vec4<f32>(x_873.x, x_874.y, x_873.y, x_874.w);
        let x_877 : f32 = u_xlat6.x;
        u_xlat7.y = x_877;
        let x_880 : f32 = u_xlat8.y;
        u_xlat7.w = x_880;
        let x_882 : vec4<f32> = u_xlat7;
        let x_883 : vec4<f32> = u_xlat9;
        u_xlat9 = (x_882 + x_883);
        let x_885 : vec2<f32> = u_xlat47;
        let x_888 : vec2<f32> = ((vec2<f32>(x_885.y, x_885.y) * vec2<f32>(-0.081632003f, 0.081632003f)) + vec2<f32>(0.163264006f, 0.081632003f));
        let x_889 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_889.x, x_888.x, x_889.z, x_888.y);
        let x_891 : vec2<f32> = u_xlat47;
        let x_894 : vec2<f32> = ((vec2<f32>(x_891.y, x_891.y) * vec2<f32>(-0.081632003f, 0.081632003f)) + vec2<f32>(0.081632003f, 0.163264006f));
        let x_895 : vec4<f32> = u_xlat8;
        u_xlat8 = vec4<f32>(x_894.x, x_895.y, x_894.y, x_895.w);
        let x_898 : f32 = u_xlat6.y;
        u_xlat8.y = x_898;
        let x_900 : vec4<f32> = u_xlat8;
        let x_901 : vec4<f32> = u_xlat10;
        u_xlat6 = (x_900 + x_901);
        let x_903 : vec4<f32> = u_xlat7;
        let x_904 : vec4<f32> = u_xlat9;
        u_xlat7 = (x_903 / x_904);
        let x_906 : vec4<f32> = u_xlat7;
        u_xlat7 = (x_906 + vec4<f32>(-3.5f, -1.5f, 0.5f, 2.5f));
        let x_912 : vec4<f32> = u_xlat8;
        let x_913 : vec4<f32> = u_xlat6;
        u_xlat8 = (x_912 / x_913);
        let x_915 : vec4<f32> = u_xlat8;
        u_xlat8 = (x_915 + vec4<f32>(-3.5f, -1.5f, 0.5f, 2.5f));
        let x_917 : vec4<f32> = u_xlat7;
        let x_920 : vec4<f32> = x_139.x_MainLightShadowmapSize;
        u_xlat7 = (vec4<f32>(x_917.w, x_917.x, x_917.y, x_917.z) * vec4<f32>(x_920.x, x_920.x, x_920.x, x_920.x));
        let x_923 : vec4<f32> = u_xlat8;
        let x_926 : vec4<f32> = x_139.x_MainLightShadowmapSize;
        u_xlat8 = (vec4<f32>(x_923.x, x_923.w, x_923.y, x_923.z) * vec4<f32>(x_926.y, x_926.y, x_926.y, x_926.y));
        let x_929 : vec4<f32> = u_xlat7;
        let x_930 : vec3<f32> = vec3<f32>(x_929.y, x_929.z, x_929.w);
        let x_931 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_930.x, x_931.y, x_930.y, x_930.z);
        let x_934 : f32 = u_xlat8.x;
        u_xlat10.y = x_934;
        let x_936 : vec4<f32> = u_xlat5;
        let x_939 : vec4<f32> = x_139.x_MainLightShadowmapSize;
        let x_942 : vec4<f32> = u_xlat10;
        u_xlat11 = ((vec4<f32>(x_936.x, x_936.y, x_936.x, x_936.y) * vec4<f32>(x_939.x, x_939.y, x_939.x, x_939.y)) + vec4<f32>(x_942.x, x_942.y, x_942.z, x_942.y));
        let x_945 : vec4<f32> = u_xlat5;
        let x_948 : vec4<f32> = x_139.x_MainLightShadowmapSize;
        let x_951 : vec4<f32> = u_xlat10;
        u_xlat47 = ((vec2<f32>(x_945.x, x_945.y) * vec2<f32>(x_948.x, x_948.y)) + vec2<f32>(x_951.w, x_951.y));
        let x_955 : f32 = u_xlat10.y;
        u_xlat7.y = x_955;
        let x_958 : f32 = u_xlat8.z;
        u_xlat10.y = x_958;
        let x_960 : vec4<f32> = u_xlat5;
        let x_963 : vec4<f32> = x_139.x_MainLightShadowmapSize;
        let x_966 : vec4<f32> = u_xlat10;
        u_xlat12 = ((vec4<f32>(x_960.x, x_960.y, x_960.x, x_960.y) * vec4<f32>(x_963.x, x_963.y, x_963.x, x_963.y)) + vec4<f32>(x_966.x, x_966.y, x_966.z, x_966.y));
        let x_969 : vec4<f32> = u_xlat5;
        let x_972 : vec4<f32> = x_139.x_MainLightShadowmapSize;
        let x_975 : vec4<f32> = u_xlat10;
        let x_977 : vec2<f32> = ((vec2<f32>(x_969.x, x_969.y) * vec2<f32>(x_972.x, x_972.y)) + vec2<f32>(x_975.w, x_975.y));
        let x_978 : vec4<f32> = u_xlat13;
        u_xlat13 = vec4<f32>(x_977.x, x_977.y, x_978.z, x_978.w);
        let x_981 : f32 = u_xlat10.y;
        u_xlat7.z = x_981;
        let x_984 : vec4<f32> = u_xlat5;
        let x_987 : vec4<f32> = x_139.x_MainLightShadowmapSize;
        let x_990 : vec4<f32> = u_xlat7;
        u_xlat14 = ((vec4<f32>(x_984.x, x_984.y, x_984.x, x_984.y) * vec4<f32>(x_987.x, x_987.y, x_987.x, x_987.y)) + vec4<f32>(x_990.x, x_990.y, x_990.x, x_990.z));
        let x_994 : f32 = u_xlat8.w;
        u_xlat10.y = x_994;
        let x_997 : vec4<f32> = u_xlat5;
        let x_1000 : vec4<f32> = x_139.x_MainLightShadowmapSize;
        let x_1003 : vec4<f32> = u_xlat10;
        u_xlat15 = ((vec4<f32>(x_997.x, x_997.y, x_997.x, x_997.y) * vec4<f32>(x_1000.x, x_1000.y, x_1000.x, x_1000.y)) + vec4<f32>(x_1003.x, x_1003.y, x_1003.z, x_1003.y));
        let x_1007 : vec4<f32> = u_xlat5;
        let x_1010 : vec4<f32> = x_139.x_MainLightShadowmapSize;
        let x_1013 : vec4<f32> = u_xlat10;
        u_xlat28 = ((vec2<f32>(x_1007.x, x_1007.y) * vec2<f32>(x_1010.x, x_1010.y)) + vec2<f32>(x_1013.w, x_1013.y));
        let x_1017 : f32 = u_xlat10.y;
        u_xlat7.w = x_1017;
        let x_1020 : vec4<f32> = u_xlat5;
        let x_1023 : vec4<f32> = x_139.x_MainLightShadowmapSize;
        let x_1026 : vec4<f32> = u_xlat7;
        u_xlat55 = ((vec2<f32>(x_1020.x, x_1020.y) * vec2<f32>(x_1023.x, x_1023.y)) + vec2<f32>(x_1026.x, x_1026.w));
        let x_1029 : vec4<f32> = u_xlat10;
        let x_1030 : vec3<f32> = vec3<f32>(x_1029.x, x_1029.z, x_1029.w);
        let x_1031 : vec4<f32> = u_xlat8;
        u_xlat8 = vec4<f32>(x_1030.x, x_1031.y, x_1030.y, x_1030.z);
        let x_1033 : vec4<f32> = u_xlat5;
        let x_1036 : vec4<f32> = x_139.x_MainLightShadowmapSize;
        let x_1039 : vec4<f32> = u_xlat8;
        u_xlat10 = ((vec4<f32>(x_1033.x, x_1033.y, x_1033.x, x_1033.y) * vec4<f32>(x_1036.x, x_1036.y, x_1036.x, x_1036.y)) + vec4<f32>(x_1039.x, x_1039.y, x_1039.z, x_1039.y));
        let x_1043 : vec4<f32> = u_xlat5;
        let x_1046 : vec4<f32> = x_139.x_MainLightShadowmapSize;
        let x_1049 : vec4<f32> = u_xlat8;
        u_xlat50 = ((vec2<f32>(x_1043.x, x_1043.y) * vec2<f32>(x_1046.x, x_1046.y)) + vec2<f32>(x_1049.w, x_1049.y));
        let x_1053 : f32 = u_xlat7.x;
        u_xlat8.x = x_1053;
        let x_1055 : vec4<f32> = u_xlat5;
        let x_1058 : vec4<f32> = x_139.x_MainLightShadowmapSize;
        let x_1061 : vec4<f32> = u_xlat8;
        let x_1063 : vec2<f32> = ((vec2<f32>(x_1055.x, x_1055.y) * vec2<f32>(x_1058.x, x_1058.y)) + vec2<f32>(x_1061.x, x_1061.y));
        let x_1064 : vec4<f32> = u_xlat5;
        u_xlat5 = vec4<f32>(x_1063.x, x_1063.y, x_1064.z, x_1064.w);
        let x_1067 : vec4<f32> = u_xlat6;
        let x_1069 : vec4<f32> = u_xlat9;
        u_xlat16 = (vec4<f32>(x_1067.x, x_1067.x, x_1067.x, x_1067.x) * x_1069);
        let x_1072 : vec4<f32> = u_xlat6;
        let x_1074 : vec4<f32> = u_xlat9;
        u_xlat17 = (vec4<f32>(x_1072.y, x_1072.y, x_1072.y, x_1072.y) * x_1074);
        let x_1077 : vec4<f32> = u_xlat6;
        let x_1079 : vec4<f32> = u_xlat9;
        u_xlat18 = (vec4<f32>(x_1077.z, x_1077.z, x_1077.z, x_1077.z) * x_1079);
        let x_1081 : vec4<f32> = u_xlat6;
        let x_1083 : vec4<f32> = u_xlat9;
        u_xlat6 = (vec4<f32>(x_1081.w, x_1081.w, x_1081.w, x_1081.w) * x_1083);
        let x_1086 : vec4<f32> = u_xlat11;
        let x_1087 : vec2<f32> = vec2<f32>(x_1086.x, x_1086.y);
        let x_1089 : f32 = u_xlat4.z;
        txVec13 = vec3<f32>(x_1087.x, x_1087.y, x_1089);
        let x_1096 : vec3<f32> = txVec13;
        let x_1098 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1096.xy, x_1096.z);
        u_xlat67 = x_1098;
        let x_1100 : vec4<f32> = u_xlat11;
        let x_1101 : vec2<f32> = vec2<f32>(x_1100.z, x_1100.w);
        let x_1103 : f32 = u_xlat4.z;
        txVec14 = vec3<f32>(x_1101.x, x_1101.y, x_1103);
        let x_1110 : vec3<f32> = txVec14;
        let x_1112 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1110.xy, x_1110.z);
        u_xlat7.x = x_1112;
        let x_1115 : f32 = u_xlat7.x;
        let x_1117 : f32 = u_xlat16.y;
        u_xlat7.x = (x_1115 * x_1117);
        let x_1121 : f32 = u_xlat16.x;
        let x_1122 : f32 = u_xlat67;
        let x_1125 : f32 = u_xlat7.x;
        u_xlat67 = ((x_1121 * x_1122) + x_1125);
        let x_1128 : vec2<f32> = u_xlat47;
        let x_1130 : f32 = u_xlat4.z;
        txVec15 = vec3<f32>(x_1128.x, x_1128.y, x_1130);
        let x_1137 : vec3<f32> = txVec15;
        let x_1139 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1137.xy, x_1137.z);
        u_xlat47.x = x_1139;
        let x_1142 : f32 = u_xlat16.z;
        let x_1144 : f32 = u_xlat47.x;
        let x_1146 : f32 = u_xlat67;
        u_xlat67 = ((x_1142 * x_1144) + x_1146);
        let x_1149 : vec4<f32> = u_xlat14;
        let x_1150 : vec2<f32> = vec2<f32>(x_1149.x, x_1149.y);
        let x_1152 : f32 = u_xlat4.z;
        txVec16 = vec3<f32>(x_1150.x, x_1150.y, x_1152);
        let x_1159 : vec3<f32> = txVec16;
        let x_1161 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1159.xy, x_1159.z);
        u_xlat47.x = x_1161;
        let x_1164 : f32 = u_xlat16.w;
        let x_1166 : f32 = u_xlat47.x;
        let x_1168 : f32 = u_xlat67;
        u_xlat67 = ((x_1164 * x_1166) + x_1168);
        let x_1171 : vec4<f32> = u_xlat12;
        let x_1172 : vec2<f32> = vec2<f32>(x_1171.x, x_1171.y);
        let x_1174 : f32 = u_xlat4.z;
        txVec17 = vec3<f32>(x_1172.x, x_1172.y, x_1174);
        let x_1181 : vec3<f32> = txVec17;
        let x_1183 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1181.xy, x_1181.z);
        u_xlat47.x = x_1183;
        let x_1186 : f32 = u_xlat17.x;
        let x_1188 : f32 = u_xlat47.x;
        let x_1190 : f32 = u_xlat67;
        u_xlat67 = ((x_1186 * x_1188) + x_1190);
        let x_1193 : vec4<f32> = u_xlat12;
        let x_1194 : vec2<f32> = vec2<f32>(x_1193.z, x_1193.w);
        let x_1196 : f32 = u_xlat4.z;
        txVec18 = vec3<f32>(x_1194.x, x_1194.y, x_1196);
        let x_1203 : vec3<f32> = txVec18;
        let x_1205 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1203.xy, x_1203.z);
        u_xlat47.x = x_1205;
        let x_1208 : f32 = u_xlat17.y;
        let x_1210 : f32 = u_xlat47.x;
        let x_1212 : f32 = u_xlat67;
        u_xlat67 = ((x_1208 * x_1210) + x_1212);
        let x_1215 : vec4<f32> = u_xlat13;
        let x_1216 : vec2<f32> = vec2<f32>(x_1215.x, x_1215.y);
        let x_1218 : f32 = u_xlat4.z;
        txVec19 = vec3<f32>(x_1216.x, x_1216.y, x_1218);
        let x_1225 : vec3<f32> = txVec19;
        let x_1227 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1225.xy, x_1225.z);
        u_xlat47.x = x_1227;
        let x_1230 : f32 = u_xlat17.z;
        let x_1232 : f32 = u_xlat47.x;
        let x_1234 : f32 = u_xlat67;
        u_xlat67 = ((x_1230 * x_1232) + x_1234);
        let x_1237 : vec4<f32> = u_xlat14;
        let x_1238 : vec2<f32> = vec2<f32>(x_1237.z, x_1237.w);
        let x_1240 : f32 = u_xlat4.z;
        txVec20 = vec3<f32>(x_1238.x, x_1238.y, x_1240);
        let x_1247 : vec3<f32> = txVec20;
        let x_1249 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1247.xy, x_1247.z);
        u_xlat47.x = x_1249;
        let x_1252 : f32 = u_xlat17.w;
        let x_1254 : f32 = u_xlat47.x;
        let x_1256 : f32 = u_xlat67;
        u_xlat67 = ((x_1252 * x_1254) + x_1256);
        let x_1259 : vec4<f32> = u_xlat15;
        let x_1260 : vec2<f32> = vec2<f32>(x_1259.x, x_1259.y);
        let x_1262 : f32 = u_xlat4.z;
        txVec21 = vec3<f32>(x_1260.x, x_1260.y, x_1262);
        let x_1269 : vec3<f32> = txVec21;
        let x_1271 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1269.xy, x_1269.z);
        u_xlat47.x = x_1271;
        let x_1274 : f32 = u_xlat18.x;
        let x_1276 : f32 = u_xlat47.x;
        let x_1278 : f32 = u_xlat67;
        u_xlat67 = ((x_1274 * x_1276) + x_1278);
        let x_1281 : vec4<f32> = u_xlat15;
        let x_1282 : vec2<f32> = vec2<f32>(x_1281.z, x_1281.w);
        let x_1284 : f32 = u_xlat4.z;
        txVec22 = vec3<f32>(x_1282.x, x_1282.y, x_1284);
        let x_1291 : vec3<f32> = txVec22;
        let x_1293 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1291.xy, x_1291.z);
        u_xlat47.x = x_1293;
        let x_1296 : f32 = u_xlat18.y;
        let x_1298 : f32 = u_xlat47.x;
        let x_1300 : f32 = u_xlat67;
        u_xlat67 = ((x_1296 * x_1298) + x_1300);
        let x_1303 : vec2<f32> = u_xlat28;
        let x_1305 : f32 = u_xlat4.z;
        txVec23 = vec3<f32>(x_1303.x, x_1303.y, x_1305);
        let x_1312 : vec3<f32> = txVec23;
        let x_1314 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1312.xy, x_1312.z);
        u_xlat47.x = x_1314;
        let x_1317 : f32 = u_xlat18.z;
        let x_1319 : f32 = u_xlat47.x;
        let x_1321 : f32 = u_xlat67;
        u_xlat67 = ((x_1317 * x_1319) + x_1321);
        let x_1324 : vec2<f32> = u_xlat55;
        let x_1326 : f32 = u_xlat4.z;
        txVec24 = vec3<f32>(x_1324.x, x_1324.y, x_1326);
        let x_1333 : vec3<f32> = txVec24;
        let x_1335 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1333.xy, x_1333.z);
        u_xlat47.x = x_1335;
        let x_1338 : f32 = u_xlat18.w;
        let x_1340 : f32 = u_xlat47.x;
        let x_1342 : f32 = u_xlat67;
        u_xlat67 = ((x_1338 * x_1340) + x_1342);
        let x_1345 : vec4<f32> = u_xlat10;
        let x_1346 : vec2<f32> = vec2<f32>(x_1345.x, x_1345.y);
        let x_1348 : f32 = u_xlat4.z;
        txVec25 = vec3<f32>(x_1346.x, x_1346.y, x_1348);
        let x_1355 : vec3<f32> = txVec25;
        let x_1357 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1355.xy, x_1355.z);
        u_xlat47.x = x_1357;
        let x_1360 : f32 = u_xlat6.x;
        let x_1362 : f32 = u_xlat47.x;
        let x_1364 : f32 = u_xlat67;
        u_xlat67 = ((x_1360 * x_1362) + x_1364);
        let x_1367 : vec4<f32> = u_xlat10;
        let x_1368 : vec2<f32> = vec2<f32>(x_1367.z, x_1367.w);
        let x_1370 : f32 = u_xlat4.z;
        txVec26 = vec3<f32>(x_1368.x, x_1368.y, x_1370);
        let x_1377 : vec3<f32> = txVec26;
        let x_1379 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1377.xy, x_1377.z);
        u_xlat47.x = x_1379;
        let x_1382 : f32 = u_xlat6.y;
        let x_1384 : f32 = u_xlat47.x;
        let x_1386 : f32 = u_xlat67;
        u_xlat67 = ((x_1382 * x_1384) + x_1386);
        let x_1389 : vec2<f32> = u_xlat50;
        let x_1391 : f32 = u_xlat4.z;
        txVec27 = vec3<f32>(x_1389.x, x_1389.y, x_1391);
        let x_1398 : vec3<f32> = txVec27;
        let x_1400 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1398.xy, x_1398.z);
        u_xlat47.x = x_1400;
        let x_1403 : f32 = u_xlat6.z;
        let x_1405 : f32 = u_xlat47.x;
        let x_1407 : f32 = u_xlat67;
        u_xlat67 = ((x_1403 * x_1405) + x_1407);
        let x_1410 : vec4<f32> = u_xlat5;
        let x_1411 : vec2<f32> = vec2<f32>(x_1410.x, x_1410.y);
        let x_1413 : f32 = u_xlat4.z;
        txVec28 = vec3<f32>(x_1411.x, x_1411.y, x_1413);
        let x_1420 : vec3<f32> = txVec28;
        let x_1422 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1420.xy, x_1420.z);
        u_xlat5.x = x_1422;
        let x_1425 : f32 = u_xlat6.w;
        let x_1427 : f32 = u_xlat5.x;
        let x_1429 : f32 = u_xlat67;
        u_xlat65 = ((x_1425 * x_1427) + x_1429);
      }
    }
  } else {
    let x_1433 : vec4<f32> = u_xlat4;
    let x_1434 : vec2<f32> = vec2<f32>(x_1433.x, x_1433.y);
    let x_1436 : f32 = u_xlat4.z;
    txVec29 = vec3<f32>(x_1434.x, x_1434.y, x_1436);
    let x_1443 : vec3<f32> = txVec29;
    let x_1445 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1443.xy, x_1443.z);
    u_xlat65 = x_1445;
  }
  let x_1447 : f32 = x_139.x_MainLightShadowParams.x;
  u_xlat4.x = (-(x_1447) + 1.0f);
  let x_1451 : f32 = u_xlat65;
  let x_1453 : f32 = x_139.x_MainLightShadowParams.x;
  let x_1456 : f32 = u_xlat4.x;
  u_xlat65 = ((x_1451 * x_1453) + x_1456);
  let x_1460 : f32 = u_xlat4.z;
  u_xlatb25 = (0.0f >= x_1460);
  let x_1464 : f32 = u_xlat4.z;
  u_xlatb46 = (x_1464 >= 1.0f);
  let x_1466 : bool = u_xlatb46;
  let x_1467 : bool = u_xlatb25;
  u_xlatb25 = (x_1466 | x_1467);
  let x_1469 : bool = u_xlatb25;
  let x_1470 : f32 = u_xlat65;
  u_xlat65 = select(x_1470, 1.0f, x_1469);
  let x_1472 : vec3<f32> = u_xlat0;
  let x_1474 : vec4<f32> = x_66.x_MainLightPosition;
  u_xlat0.x = dot(x_1472, -(vec3<f32>(x_1474.x, x_1474.y, x_1474.z)));
  let x_1480 : f32 = u_xlat0.x;
  u_xlat0.x = clamp(x_1480, 0.0f, 1.0f);
  let x_1484 : f32 = u_xlat65;
  let x_1488 : vec4<f32> = x_66.x_MainLightColor;
  u_xlat25 = (vec3<f32>(x_1484, x_1484, x_1484) * vec3<f32>(x_1488.x, x_1488.y, x_1488.z));
  let x_1491 : vec3<f32> = u_xlat0;
  let x_1493 : vec3<f32> = u_xlat25;
  u_xlat0 = (vec3<f32>(x_1491.x, x_1491.x, x_1491.x) * x_1493);
  let x_1495 : vec3<f32> = u_xlat0;
  let x_1496 : vec4<f32> = u_xlat1;
  u_xlat0 = (x_1495 * vec3<f32>(x_1496.x, x_1496.y, x_1496.z));
  let x_1501 : f32 = u_xlat1.w;
  u_xlatb1 = (x_1501 >= 0.400000006f);
  let x_1504 : bool = u_xlatb1;
  if (x_1504) {
    let x_1509 : f32 = u_xlat1.w;
    x_1505 = x_1509;
  } else {
    x_1505 = 0.0f;
  }
  let x_1511 : f32 = x_1505;
  u_xlat1.x = x_1511;
  let x_1515 : f32 = u_xlat1.w;
  u_xlat22.x = (x_1515 + -0.400000006f);
  let x_1521 : f32 = u_xlat1.w;
  u_xlat43 = dpdxCoarse(x_1521);
  let x_1525 : f32 = u_xlat1.w;
  u_xlat64 = dpdyCoarse(x_1525);
  let x_1527 : f32 = u_xlat64;
  let x_1529 : f32 = u_xlat43;
  u_xlat43 = (abs(x_1527) + abs(x_1529));
  let x_1532 : f32 = u_xlat43;
  u_xlat43 = max(x_1532, 0.0001f);
  let x_1536 : f32 = u_xlat22.x;
  let x_1537 : f32 = u_xlat43;
  u_xlat22.x = (x_1536 / x_1537);
  let x_1541 : f32 = u_xlat22.x;
  u_xlat22.x = (x_1541 + 0.5f);
  let x_1545 : f32 = u_xlat22.x;
  u_xlat22.x = clamp(x_1545, 0.0f, 1.0f);
  let x_1550 : f32 = x_66.x_AlphaToMaskAvailable;
  u_xlatb43 = !((x_1550 == 0.0f));
  let x_1552 : bool = u_xlatb43;
  if (x_1552) {
    let x_1557 : f32 = u_xlat22.x;
    x_1553 = x_1557;
  } else {
    let x_1560 : f32 = u_xlat1.x;
    x_1553 = x_1560;
  }
  let x_1561 : f32 = x_1553;
  u_xlat1.x = x_1561;
  let x_1564 : f32 = u_xlat1.x;
  u_xlat22.x = (x_1564 + -0.0001f);
  let x_1572 : f32 = u_xlat22.x;
  u_xlatb22.x = (x_1572 < 0.0f);
  let x_1576 : bool = u_xlatb22.x;
  if (((select(0i, 1i, x_1576) * -1i) != 0i)) {
    discard;
  }
  let x_1586 : f32 = vs_INTERP2.w;
  u_xlatb22.x = (0.0f < x_1586);
  let x_1594 : f32 = x_1592.unity_WorldTransformParams.w;
  u_xlatb22.z = (x_1594 >= 0.0f);
  let x_1598 : bool = u_xlatb22.x;
  u_xlat22.x = select(-1.0f, 1.0f, x_1598);
  let x_1602 : bool = u_xlatb22.z;
  u_xlat22.z = select(-1.0f, 1.0f, x_1602);
  let x_1606 : f32 = u_xlat22.z;
  let x_1608 : f32 = u_xlat22.x;
  u_xlat22.x = (x_1606 * x_1608);
  let x_1611 : vec3<f32> = vs_INTERP1;
  let x_1613 : vec4<f32> = vs_INTERP2;
  u_xlat25 = (vec3<f32>(x_1611.z, x_1611.x, x_1611.y) * vec3<f32>(x_1613.y, x_1613.z, x_1613.x));
  let x_1616 : vec3<f32> = vs_INTERP1;
  let x_1618 : vec4<f32> = vs_INTERP2;
  let x_1621 : vec3<f32> = u_xlat25;
  u_xlat25 = ((vec3<f32>(x_1616.y, x_1616.z, x_1616.x) * vec3<f32>(x_1618.z, x_1618.x, x_1618.y)) + -(x_1621));
  let x_1624 : vec3<f32> = u_xlat22;
  let x_1626 : vec3<f32> = u_xlat25;
  u_xlat25 = (vec3<f32>(x_1624.x, x_1624.x, x_1624.x) * x_1626);
  let x_1628 : vec3<f32> = u_xlat24;
  let x_1630 : vec3<f32> = u_xlat25;
  u_xlat25 = (vec3<f32>(x_1628.y, x_1628.y, x_1628.y) * x_1630);
  let x_1632 : vec3<f32> = u_xlat24;
  let x_1634 : vec4<f32> = vs_INTERP2;
  let x_1637 : vec3<f32> = u_xlat25;
  u_xlat25 = ((vec3<f32>(x_1632.x, x_1632.x, x_1632.x) * vec3<f32>(x_1634.x, x_1634.y, x_1634.z)) + x_1637);
  let x_1639 : vec3<f32> = u_xlat24;
  let x_1641 : vec3<f32> = vs_INTERP1;
  let x_1643 : vec3<f32> = u_xlat25;
  u_xlat24 = ((vec3<f32>(x_1639.z, x_1639.z, x_1639.z) * x_1641) + x_1643);
  let x_1645 : vec3<f32> = u_xlat24;
  let x_1646 : vec3<f32> = u_xlat24;
  u_xlat22.x = dot(x_1645, x_1646);
  let x_1650 : f32 = u_xlat22.x;
  u_xlat22.x = inverseSqrt(x_1650);
  let x_1653 : vec3<f32> = u_xlat22;
  let x_1655 : vec3<f32> = u_xlat24;
  u_xlat24 = (vec3<f32>(x_1653.x, x_1653.x, x_1653.x) * x_1655);
  let x_1659 : f32 = x_66.unity_OrthoParams.w;
  u_xlatb22.x = (x_1659 == 0.0f);
  let x_1662 : vec3<f32> = vs_INTERP0;
  let x_1666 : vec3<f32> = x_66.x_WorldSpaceCameraPos;
  u_xlat25 = (-(x_1662) + x_1666);
  let x_1668 : vec3<f32> = u_xlat25;
  let x_1669 : vec3<f32> = u_xlat25;
  u_xlat64 = dot(x_1668, x_1669);
  let x_1671 : f32 = u_xlat64;
  u_xlat64 = inverseSqrt(x_1671);
  let x_1673 : f32 = u_xlat64;
  let x_1675 : vec3<f32> = u_xlat25;
  u_xlat25 = (vec3<f32>(x_1673, x_1673, x_1673) * x_1675);
  let x_1678 : bool = u_xlatb22.x;
  if (x_1678) {
    let x_1683 : f32 = u_xlat25.x;
    x_1679 = x_1683;
  } else {
    let x_1687 : f32 = x_66.unity_MatrixV[0i].z;
    x_1679 = x_1687;
  }
  let x_1688 : f32 = x_1679;
  u_xlat5.x = x_1688;
  let x_1691 : bool = u_xlatb22.x;
  if (x_1691) {
    let x_1696 : f32 = u_xlat25.y;
    x_1692 = x_1696;
  } else {
    let x_1699 : f32 = x_66.unity_MatrixV[1i].z;
    x_1692 = x_1699;
  }
  let x_1700 : f32 = x_1692;
  u_xlat5.y = x_1700;
  let x_1703 : bool = u_xlatb22.x;
  if (x_1703) {
    let x_1708 : f32 = u_xlat25.z;
    x_1704 = x_1708;
  } else {
    let x_1711 : f32 = x_66.unity_MatrixV[2i].z;
    x_1704 = x_1711;
  }
  let x_1712 : f32 = x_1704;
  u_xlat5.z = x_1712;
  let x_1721 : vec2<f32> = vs_INTERP5;
  let x_1723 : f32 = x_66.x_GlobalMipBias.x;
  let x_1724 : vec4<f32> = textureSampleBias(unity_LightmapInd, samplerunity_Lightmap, x_1721, x_1723);
  u_xlat6 = x_1724;
  let x_1729 : vec2<f32> = vs_INTERP5;
  let x_1731 : f32 = x_66.x_GlobalMipBias.x;
  let x_1732 : vec4<f32> = textureSampleBias(unity_Lightmap, samplerunity_Lightmap, x_1729, x_1731);
  u_xlat25 = vec3<f32>(x_1732.x, x_1732.y, x_1732.z);
  let x_1734 : vec4<f32> = u_xlat6;
  let x_1737 : vec3<f32> = (vec3<f32>(x_1734.x, x_1734.y, x_1734.z) + vec3<f32>(-0.5f, -0.5f, -0.5f));
  let x_1738 : vec4<f32> = u_xlat6;
  u_xlat6 = vec4<f32>(x_1737.x, x_1737.y, x_1737.z, x_1738.w);
  let x_1740 : vec3<f32> = u_xlat24;
  let x_1741 : vec4<f32> = u_xlat6;
  u_xlat22.x = dot(x_1740, vec3<f32>(x_1741.x, x_1741.y, x_1741.z));
  let x_1746 : f32 = u_xlat22.x;
  u_xlat22.x = (x_1746 + 0.5f);
  let x_1749 : vec3<f32> = u_xlat22;
  let x_1751 : vec3<f32> = u_xlat25;
  u_xlat25 = (vec3<f32>(x_1749.x, x_1749.x, x_1749.x) * x_1751);
  let x_1754 : f32 = u_xlat6.w;
  u_xlat22.x = max(x_1754, 0.0001f);
  let x_1757 : vec3<f32> = u_xlat25;
  let x_1758 : vec3<f32> = u_xlat22;
  u_xlat25 = (x_1757 / vec3<f32>(x_1758.x, x_1758.x, x_1758.x));
  let x_1762 : vec4<f32> = x_66.x_ScaledScreenParams;
  let x_1763 : vec2<f32> = vec2<f32>(x_1762.x, x_1762.y);
  let x_1767 : vec2<f32> = (vec2<f32>(1.0f, 1.0f) / vec2<f32>(x_1763.x, x_1763.y));
  let x_1768 : vec3<f32> = u_xlat22;
  u_xlat22 = vec3<f32>(x_1767.x, x_1768.y, x_1767.y);
  let x_1770 : vec3<f32> = u_xlat22;
  let x_1772 : vec4<f32> = hlslcc_FragCoord;
  let x_1774 : vec2<f32> = (vec2<f32>(x_1770.x, x_1770.z) * vec2<f32>(x_1772.x, x_1772.y));
  let x_1775 : vec4<f32> = u_xlat6;
  u_xlat6 = vec4<f32>(x_1774.x, x_1774.y, x_1775.z, x_1775.w);
  let x_1778 : f32 = u_xlat6.y;
  let x_1781 : f32 = x_66.x_ScaleBiasRt.x;
  let x_1784 : f32 = x_66.x_ScaleBiasRt.y;
  u_xlat22.x = ((x_1778 * x_1781) + x_1784);
  let x_1788 : f32 = u_xlat22.x;
  u_xlat6.z = (-(x_1788) + 1.0f);
  let x_1793 : f32 = u_xlat3.x;
  u_xlat3.x = x_1793;
  let x_1796 : f32 = u_xlat3.x;
  u_xlat3.x = clamp(x_1796, 0.0f, 1.0f);
  let x_1800 : f32 = u_xlat1.x;
  u_xlat1.x = min(x_1800, 1.0f);
  let x_1803 : vec3<f32> = u_xlat2;
  u_xlat2 = (x_1803 * vec3<f32>(0.959999979f, 0.959999979f, 0.959999979f));
  let x_1808 : f32 = u_xlat3.x;
  u_xlat22.x = (-(x_1808) + 1.0f);
  let x_1813 : f32 = u_xlat22.x;
  let x_1815 : f32 = u_xlat22.x;
  u_xlat64 = (x_1813 * x_1815);
  let x_1817 : f32 = u_xlat64;
  u_xlat64 = max(x_1817, 0.0078125f);
  let x_1820 : f32 = u_xlat64;
  let x_1821 : f32 = u_xlat64;
  u_xlat65 = (x_1820 * x_1821);
  let x_1824 : f32 = u_xlat3.x;
  u_xlat3.x = (x_1824 + 0.040000021f);
  let x_1829 : f32 = u_xlat3.x;
  u_xlat3.x = min(x_1829, 1.0f);
  let x_1833 : f32 = u_xlat64;
  u_xlat68 = ((x_1833 * 4.0f) + 2.0f);
  let x_1842 : vec4<f32> = u_xlat6;
  let x_1845 : f32 = x_66.x_GlobalMipBias.x;
  let x_1846 : vec4<f32> = textureSampleBias(x_ScreenSpaceOcclusionTexture, sampler_ScreenSpaceOcclusionTexture, vec2<f32>(x_1842.x, x_1842.z), x_1845);
  u_xlat6.x = x_1846.x;
  let x_1850 : f32 = u_xlat6.x;
  u_xlat27.x = (x_1850 + -1.0f);
  let x_1855 : f32 = x_66.x_AmbientOcclusionParam.w;
  let x_1857 : f32 = u_xlat27.x;
  u_xlat27.x = ((x_1855 * x_1857) + 1.0f);
  let x_1862 : f32 = u_xlat6.x;
  let x_1864 : f32 = vs_INTERP4.w;
  u_xlat6.x = min(x_1862, x_1864);
  let x_1867 : bool = u_xlatb63;
  if (x_1867) {
    let x_1871 : f32 = x_139.x_MainLightShadowParams.y;
    u_xlatb63 = (x_1871 == 1.0f);
    let x_1873 : bool = u_xlatb63;
    if (x_1873) {
      let x_1877 : vec4<f32> = vs_INTERP9;
      let x_1880 : vec4<f32> = x_139.x_MainLightShadowOffset0;
      u_xlat7 = (vec4<f32>(x_1877.x, x_1877.y, x_1877.x, x_1877.y) + x_1880);
      let x_1883 : vec4<f32> = u_xlat7;
      let x_1884 : vec2<f32> = vec2<f32>(x_1883.x, x_1883.y);
      let x_1886 : f32 = vs_INTERP9.z;
      txVec30 = vec3<f32>(x_1884.x, x_1884.y, x_1886);
      let x_1893 : vec3<f32> = txVec30;
      let x_1895 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1893.xy, x_1893.z);
      u_xlat8.x = x_1895;
      let x_1898 : vec4<f32> = u_xlat7;
      let x_1899 : vec2<f32> = vec2<f32>(x_1898.z, x_1898.w);
      let x_1901 : f32 = vs_INTERP9.z;
      txVec31 = vec3<f32>(x_1899.x, x_1899.y, x_1901);
      let x_1908 : vec3<f32> = txVec31;
      let x_1910 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1908.xy, x_1908.z);
      u_xlat8.y = x_1910;
      let x_1912 : vec4<f32> = vs_INTERP9;
      let x_1915 : vec4<f32> = x_139.x_MainLightShadowOffset1;
      u_xlat7 = (vec4<f32>(x_1912.x, x_1912.y, x_1912.x, x_1912.y) + x_1915);
      let x_1918 : vec4<f32> = u_xlat7;
      let x_1919 : vec2<f32> = vec2<f32>(x_1918.x, x_1918.y);
      let x_1921 : f32 = vs_INTERP9.z;
      txVec32 = vec3<f32>(x_1919.x, x_1919.y, x_1921);
      let x_1928 : vec3<f32> = txVec32;
      let x_1930 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1928.xy, x_1928.z);
      u_xlat8.z = x_1930;
      let x_1933 : vec4<f32> = u_xlat7;
      let x_1934 : vec2<f32> = vec2<f32>(x_1933.z, x_1933.w);
      let x_1936 : f32 = vs_INTERP9.z;
      txVec33 = vec3<f32>(x_1934.x, x_1934.y, x_1936);
      let x_1943 : vec3<f32> = txVec33;
      let x_1945 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1943.xy, x_1943.z);
      u_xlat8.w = x_1945;
      let x_1947 : vec4<f32> = u_xlat8;
      u_xlat63 = dot(x_1947, vec4<f32>(0.25f, 0.25f, 0.25f, 0.25f));
    } else {
      let x_1954 : f32 = x_139.x_MainLightShadowParams.y;
      u_xlatb48.x = (x_1954 == 2.0f);
      let x_1958 : bool = u_xlatb48.x;
      if (x_1958) {
        let x_1962 : vec4<f32> = vs_INTERP9;
        let x_1965 : vec4<f32> = x_139.x_MainLightShadowmapSize;
        u_xlat48 = ((vec2<f32>(x_1962.x, x_1962.y) * vec2<f32>(x_1965.z, x_1965.w)) + vec2<f32>(0.5f, 0.5f));
        let x_1969 : vec2<f32> = u_xlat48;
        u_xlat48 = floor(x_1969);
        let x_1971 : vec4<f32> = vs_INTERP9;
        let x_1974 : vec4<f32> = x_139.x_MainLightShadowmapSize;
        let x_1977 : vec2<f32> = u_xlat48;
        let x_1979 : vec2<f32> = ((vec2<f32>(x_1971.x, x_1971.y) * vec2<f32>(x_1974.z, x_1974.w)) + -(x_1977));
        let x_1980 : vec4<f32> = u_xlat7;
        u_xlat7 = vec4<f32>(x_1979.x, x_1979.y, x_1980.z, x_1980.w);
        let x_1982 : vec4<f32> = u_xlat7;
        u_xlat8 = (vec4<f32>(x_1982.x, x_1982.x, x_1982.y, x_1982.y) + vec4<f32>(0.5f, 1.0f, 0.5f, 1.0f));
        let x_1985 : vec4<f32> = u_xlat8;
        let x_1987 : vec4<f32> = u_xlat8;
        u_xlat9 = (vec4<f32>(x_1985.x, x_1985.x, x_1985.z, x_1985.z) * vec4<f32>(x_1987.x, x_1987.x, x_1987.z, x_1987.z));
        let x_1990 : vec4<f32> = u_xlat9;
        u_xlat49 = (vec2<f32>(x_1990.y, x_1990.w) * vec2<f32>(0.079999998f, 0.079999998f));
        let x_1993 : vec4<f32> = u_xlat9;
        let x_1996 : vec4<f32> = u_xlat7;
        let x_1999 : vec2<f32> = ((vec2<f32>(x_1993.x, x_1993.z) * vec2<f32>(0.5f, 0.5f)) + -(vec2<f32>(x_1996.x, x_1996.y)));
        let x_2000 : vec4<f32> = u_xlat8;
        u_xlat8 = vec4<f32>(x_1999.x, x_2000.y, x_1999.y, x_2000.w);
        let x_2002 : vec4<f32> = u_xlat7;
        let x_2005 : vec2<f32> = (-(vec2<f32>(x_2002.x, x_2002.y)) + vec2<f32>(1.0f, 1.0f));
        let x_2006 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_2005.x, x_2005.y, x_2006.z, x_2006.w);
        let x_2009 : vec4<f32> = u_xlat7;
        u_xlat51 = min(vec2<f32>(x_2009.x, x_2009.y), vec2<f32>(0.0f, 0.0f));
        let x_2012 : vec2<f32> = u_xlat51;
        let x_2014 : vec2<f32> = u_xlat51;
        let x_2016 : vec4<f32> = u_xlat9;
        u_xlat51 = ((-(x_2012) * x_2014) + vec2<f32>(x_2016.x, x_2016.y));
        let x_2019 : vec4<f32> = u_xlat7;
        let x_2021 : vec2<f32> = max(vec2<f32>(x_2019.x, x_2019.y), vec2<f32>(0.0f, 0.0f));
        let x_2022 : vec4<f32> = u_xlat7;
        u_xlat7 = vec4<f32>(x_2021.x, x_2021.y, x_2022.z, x_2022.w);
        let x_2024 : vec4<f32> = u_xlat7;
        let x_2027 : vec4<f32> = u_xlat7;
        let x_2030 : vec4<f32> = u_xlat8;
        let x_2032 : vec2<f32> = ((-(vec2<f32>(x_2024.x, x_2024.y)) * vec2<f32>(x_2027.x, x_2027.y)) + vec2<f32>(x_2030.y, x_2030.w));
        let x_2033 : vec4<f32> = u_xlat7;
        u_xlat7 = vec4<f32>(x_2032.x, x_2032.y, x_2033.z, x_2033.w);
        let x_2035 : vec2<f32> = u_xlat51;
        u_xlat51 = (x_2035 + vec2<f32>(1.0f, 1.0f));
        let x_2037 : vec4<f32> = u_xlat7;
        let x_2039 : vec2<f32> = (vec2<f32>(x_2037.x, x_2037.y) + vec2<f32>(1.0f, 1.0f));
        let x_2040 : vec4<f32> = u_xlat7;
        u_xlat7 = vec4<f32>(x_2039.x, x_2039.y, x_2040.z, x_2040.w);
        let x_2042 : vec4<f32> = u_xlat8;
        let x_2044 : vec2<f32> = (vec2<f32>(x_2042.x, x_2042.z) * vec2<f32>(0.159999996f, 0.159999996f));
        let x_2045 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_2044.x, x_2044.y, x_2045.z, x_2045.w);
        let x_2047 : vec4<f32> = u_xlat9;
        let x_2049 : vec2<f32> = (vec2<f32>(x_2047.x, x_2047.y) * vec2<f32>(0.159999996f, 0.159999996f));
        let x_2050 : vec4<f32> = u_xlat11;
        u_xlat11 = vec4<f32>(x_2049.x, x_2049.y, x_2050.z, x_2050.w);
        let x_2052 : vec2<f32> = u_xlat51;
        let x_2053 : vec2<f32> = (x_2052 * vec2<f32>(0.159999996f, 0.159999996f));
        let x_2054 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_2053.x, x_2053.y, x_2054.z, x_2054.w);
        let x_2056 : vec4<f32> = u_xlat7;
        let x_2058 : vec2<f32> = (vec2<f32>(x_2056.x, x_2056.y) * vec2<f32>(0.159999996f, 0.159999996f));
        let x_2059 : vec4<f32> = u_xlat12;
        u_xlat12 = vec4<f32>(x_2058.x, x_2058.y, x_2059.z, x_2059.w);
        let x_2061 : vec4<f32> = u_xlat8;
        let x_2063 : vec2<f32> = (vec2<f32>(x_2061.y, x_2061.w) * vec2<f32>(0.159999996f, 0.159999996f));
        let x_2064 : vec4<f32> = u_xlat7;
        u_xlat7 = vec4<f32>(x_2063.x, x_2063.y, x_2064.z, x_2064.w);
        let x_2067 : f32 = u_xlat9.x;
        u_xlat10.z = x_2067;
        let x_2070 : f32 = u_xlat7.x;
        u_xlat10.w = x_2070;
        let x_2073 : f32 = u_xlat12.x;
        u_xlat11.z = x_2073;
        let x_2076 : f32 = u_xlat49.x;
        u_xlat11.w = x_2076;
        let x_2078 : vec4<f32> = u_xlat10;
        let x_2080 : vec4<f32> = u_xlat11;
        u_xlat8 = (vec4<f32>(x_2078.z, x_2078.w, x_2078.x, x_2078.z) + vec4<f32>(x_2080.z, x_2080.w, x_2080.x, x_2080.z));
        let x_2084 : f32 = u_xlat10.y;
        u_xlat9.z = x_2084;
        let x_2087 : f32 = u_xlat7.y;
        u_xlat9.w = x_2087;
        let x_2090 : f32 = u_xlat11.y;
        u_xlat12.z = x_2090;
        let x_2093 : f32 = u_xlat49.y;
        u_xlat12.w = x_2093;
        let x_2095 : vec4<f32> = u_xlat9;
        let x_2097 : vec4<f32> = u_xlat12;
        let x_2099 : vec3<f32> = (vec3<f32>(x_2095.z, x_2095.y, x_2095.w) + vec3<f32>(x_2097.z, x_2097.y, x_2097.w));
        let x_2100 : vec4<f32> = u_xlat7;
        u_xlat7 = vec4<f32>(x_2099.x, x_2099.y, x_2099.z, x_2100.w);
        let x_2102 : vec4<f32> = u_xlat11;
        let x_2104 : vec4<f32> = u_xlat8;
        let x_2106 : vec3<f32> = (vec3<f32>(x_2102.x, x_2102.z, x_2102.w) / vec3<f32>(x_2104.z, x_2104.w, x_2104.y));
        let x_2107 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_2106.x, x_2106.y, x_2106.z, x_2107.w);
        let x_2109 : vec4<f32> = u_xlat9;
        let x_2111 : vec3<f32> = (vec3<f32>(x_2109.x, x_2109.y, x_2109.z) + vec3<f32>(-2.5f, -0.5f, 1.5f));
        let x_2112 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_2111.x, x_2111.y, x_2111.z, x_2112.w);
        let x_2114 : vec4<f32> = u_xlat12;
        let x_2116 : vec4<f32> = u_xlat7;
        let x_2118 : vec3<f32> = (vec3<f32>(x_2114.z, x_2114.y, x_2114.w) / vec3<f32>(x_2116.x, x_2116.y, x_2116.z));
        let x_2119 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_2118.x, x_2118.y, x_2118.z, x_2119.w);
        let x_2121 : vec4<f32> = u_xlat10;
        let x_2123 : vec3<f32> = (vec3<f32>(x_2121.x, x_2121.y, x_2121.z) + vec3<f32>(-2.5f, -0.5f, 1.5f));
        let x_2124 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_2123.x, x_2123.y, x_2123.z, x_2124.w);
        let x_2126 : vec4<f32> = u_xlat9;
        let x_2129 : vec4<f32> = x_139.x_MainLightShadowmapSize;
        let x_2131 : vec3<f32> = (vec3<f32>(x_2126.y, x_2126.x, x_2126.z) * vec3<f32>(x_2129.x, x_2129.x, x_2129.x));
        let x_2132 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_2131.x, x_2131.y, x_2131.z, x_2132.w);
        let x_2134 : vec4<f32> = u_xlat10;
        let x_2137 : vec4<f32> = x_139.x_MainLightShadowmapSize;
        let x_2139 : vec3<f32> = (vec3<f32>(x_2134.x, x_2134.y, x_2134.z) * vec3<f32>(x_2137.y, x_2137.y, x_2137.y));
        let x_2140 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_2139.x, x_2139.y, x_2139.z, x_2140.w);
        let x_2143 : f32 = u_xlat10.x;
        u_xlat9.w = x_2143;
        let x_2145 : vec2<f32> = u_xlat48;
        let x_2148 : vec4<f32> = x_139.x_MainLightShadowmapSize;
        let x_2151 : vec4<f32> = u_xlat9;
        u_xlat11 = ((vec4<f32>(x_2145.x, x_2145.y, x_2145.x, x_2145.y) * vec4<f32>(x_2148.x, x_2148.y, x_2148.x, x_2148.y)) + vec4<f32>(x_2151.y, x_2151.w, x_2151.x, x_2151.w));
        let x_2154 : vec2<f32> = u_xlat48;
        let x_2156 : vec4<f32> = x_139.x_MainLightShadowmapSize;
        let x_2159 : vec4<f32> = u_xlat9;
        let x_2161 : vec2<f32> = ((x_2154 * vec2<f32>(x_2156.x, x_2156.y)) + vec2<f32>(x_2159.z, x_2159.w));
        let x_2162 : vec4<f32> = u_xlat12;
        u_xlat12 = vec4<f32>(x_2161.x, x_2161.y, x_2162.z, x_2162.w);
        let x_2165 : f32 = u_xlat9.y;
        u_xlat10.w = x_2165;
        let x_2167 : vec4<f32> = u_xlat10;
        let x_2168 : vec2<f32> = vec2<f32>(x_2167.y, x_2167.z);
        let x_2169 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_2169.x, x_2168.x, x_2169.z, x_2168.y);
        let x_2171 : vec2<f32> = u_xlat48;
        let x_2174 : vec4<f32> = x_139.x_MainLightShadowmapSize;
        let x_2177 : vec4<f32> = u_xlat9;
        u_xlat13 = ((vec4<f32>(x_2171.x, x_2171.y, x_2171.x, x_2171.y) * vec4<f32>(x_2174.x, x_2174.y, x_2174.x, x_2174.y)) + vec4<f32>(x_2177.x, x_2177.y, x_2177.z, x_2177.y));
        let x_2180 : vec2<f32> = u_xlat48;
        let x_2183 : vec4<f32> = x_139.x_MainLightShadowmapSize;
        let x_2186 : vec4<f32> = u_xlat10;
        u_xlat10 = ((vec4<f32>(x_2180.x, x_2180.y, x_2180.x, x_2180.y) * vec4<f32>(x_2183.x, x_2183.y, x_2183.x, x_2183.y)) + vec4<f32>(x_2186.w, x_2186.y, x_2186.w, x_2186.z));
        let x_2189 : vec2<f32> = u_xlat48;
        let x_2192 : vec4<f32> = x_139.x_MainLightShadowmapSize;
        let x_2195 : vec4<f32> = u_xlat9;
        u_xlat9 = ((vec4<f32>(x_2189.x, x_2189.y, x_2189.x, x_2189.y) * vec4<f32>(x_2192.x, x_2192.y, x_2192.x, x_2192.y)) + vec4<f32>(x_2195.x, x_2195.w, x_2195.z, x_2195.w));
        let x_2198 : vec4<f32> = u_xlat7;
        let x_2200 : vec4<f32> = u_xlat8;
        u_xlat14 = (vec4<f32>(x_2198.x, x_2198.x, x_2198.x, x_2198.y) * vec4<f32>(x_2200.z, x_2200.w, x_2200.y, x_2200.z));
        let x_2203 : vec4<f32> = u_xlat7;
        let x_2205 : vec4<f32> = u_xlat8;
        u_xlat15 = (vec4<f32>(x_2203.y, x_2203.y, x_2203.z, x_2203.z) * x_2205);
        let x_2208 : f32 = u_xlat7.z;
        let x_2210 : f32 = u_xlat8.y;
        u_xlat48.x = (x_2208 * x_2210);
        let x_2214 : vec4<f32> = u_xlat11;
        let x_2215 : vec2<f32> = vec2<f32>(x_2214.x, x_2214.y);
        let x_2217 : f32 = vs_INTERP9.z;
        txVec34 = vec3<f32>(x_2215.x, x_2215.y, x_2217);
        let x_2225 : vec3<f32> = txVec34;
        let x_2227 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2225.xy, x_2225.z);
        u_xlat69 = x_2227;
        let x_2229 : vec4<f32> = u_xlat11;
        let x_2230 : vec2<f32> = vec2<f32>(x_2229.z, x_2229.w);
        let x_2232 : f32 = vs_INTERP9.z;
        txVec35 = vec3<f32>(x_2230.x, x_2230.y, x_2232);
        let x_2239 : vec3<f32> = txVec35;
        let x_2241 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2239.xy, x_2239.z);
        u_xlat7.x = x_2241;
        let x_2244 : f32 = u_xlat7.x;
        let x_2246 : f32 = u_xlat14.y;
        u_xlat7.x = (x_2244 * x_2246);
        let x_2250 : f32 = u_xlat14.x;
        let x_2251 : f32 = u_xlat69;
        let x_2254 : f32 = u_xlat7.x;
        u_xlat69 = ((x_2250 * x_2251) + x_2254);
        let x_2257 : vec4<f32> = u_xlat12;
        let x_2258 : vec2<f32> = vec2<f32>(x_2257.x, x_2257.y);
        let x_2260 : f32 = vs_INTERP9.z;
        txVec36 = vec3<f32>(x_2258.x, x_2258.y, x_2260);
        let x_2267 : vec3<f32> = txVec36;
        let x_2269 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2267.xy, x_2267.z);
        u_xlat7.x = x_2269;
        let x_2272 : f32 = u_xlat14.z;
        let x_2274 : f32 = u_xlat7.x;
        let x_2276 : f32 = u_xlat69;
        u_xlat69 = ((x_2272 * x_2274) + x_2276);
        let x_2279 : vec4<f32> = u_xlat10;
        let x_2280 : vec2<f32> = vec2<f32>(x_2279.x, x_2279.y);
        let x_2282 : f32 = vs_INTERP9.z;
        txVec37 = vec3<f32>(x_2280.x, x_2280.y, x_2282);
        let x_2289 : vec3<f32> = txVec37;
        let x_2291 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2289.xy, x_2289.z);
        u_xlat7.x = x_2291;
        let x_2294 : f32 = u_xlat14.w;
        let x_2296 : f32 = u_xlat7.x;
        let x_2298 : f32 = u_xlat69;
        u_xlat69 = ((x_2294 * x_2296) + x_2298);
        let x_2301 : vec4<f32> = u_xlat13;
        let x_2302 : vec2<f32> = vec2<f32>(x_2301.x, x_2301.y);
        let x_2304 : f32 = vs_INTERP9.z;
        txVec38 = vec3<f32>(x_2302.x, x_2302.y, x_2304);
        let x_2311 : vec3<f32> = txVec38;
        let x_2313 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2311.xy, x_2311.z);
        u_xlat7.x = x_2313;
        let x_2316 : f32 = u_xlat15.x;
        let x_2318 : f32 = u_xlat7.x;
        let x_2320 : f32 = u_xlat69;
        u_xlat69 = ((x_2316 * x_2318) + x_2320);
        let x_2323 : vec4<f32> = u_xlat13;
        let x_2324 : vec2<f32> = vec2<f32>(x_2323.z, x_2323.w);
        let x_2326 : f32 = vs_INTERP9.z;
        txVec39 = vec3<f32>(x_2324.x, x_2324.y, x_2326);
        let x_2333 : vec3<f32> = txVec39;
        let x_2335 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2333.xy, x_2333.z);
        u_xlat7.x = x_2335;
        let x_2338 : f32 = u_xlat15.y;
        let x_2340 : f32 = u_xlat7.x;
        let x_2342 : f32 = u_xlat69;
        u_xlat69 = ((x_2338 * x_2340) + x_2342);
        let x_2345 : vec4<f32> = u_xlat10;
        let x_2346 : vec2<f32> = vec2<f32>(x_2345.z, x_2345.w);
        let x_2348 : f32 = vs_INTERP9.z;
        txVec40 = vec3<f32>(x_2346.x, x_2346.y, x_2348);
        let x_2355 : vec3<f32> = txVec40;
        let x_2357 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2355.xy, x_2355.z);
        u_xlat7.x = x_2357;
        let x_2360 : f32 = u_xlat15.z;
        let x_2362 : f32 = u_xlat7.x;
        let x_2364 : f32 = u_xlat69;
        u_xlat69 = ((x_2360 * x_2362) + x_2364);
        let x_2367 : vec4<f32> = u_xlat9;
        let x_2368 : vec2<f32> = vec2<f32>(x_2367.x, x_2367.y);
        let x_2370 : f32 = vs_INTERP9.z;
        txVec41 = vec3<f32>(x_2368.x, x_2368.y, x_2370);
        let x_2377 : vec3<f32> = txVec41;
        let x_2379 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2377.xy, x_2377.z);
        u_xlat7.x = x_2379;
        let x_2382 : f32 = u_xlat15.w;
        let x_2384 : f32 = u_xlat7.x;
        let x_2386 : f32 = u_xlat69;
        u_xlat69 = ((x_2382 * x_2384) + x_2386);
        let x_2389 : vec4<f32> = u_xlat9;
        let x_2390 : vec2<f32> = vec2<f32>(x_2389.z, x_2389.w);
        let x_2392 : f32 = vs_INTERP9.z;
        txVec42 = vec3<f32>(x_2390.x, x_2390.y, x_2392);
        let x_2399 : vec3<f32> = txVec42;
        let x_2401 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2399.xy, x_2399.z);
        u_xlat7.x = x_2401;
        let x_2404 : f32 = u_xlat48.x;
        let x_2406 : f32 = u_xlat7.x;
        let x_2408 : f32 = u_xlat69;
        u_xlat63 = ((x_2404 * x_2406) + x_2408);
      } else {
        let x_2411 : vec4<f32> = vs_INTERP9;
        let x_2414 : vec4<f32> = x_139.x_MainLightShadowmapSize;
        u_xlat48 = ((vec2<f32>(x_2411.x, x_2411.y) * vec2<f32>(x_2414.z, x_2414.w)) + vec2<f32>(0.5f, 0.5f));
        let x_2418 : vec2<f32> = u_xlat48;
        u_xlat48 = floor(x_2418);
        let x_2420 : vec4<f32> = vs_INTERP9;
        let x_2423 : vec4<f32> = x_139.x_MainLightShadowmapSize;
        let x_2426 : vec2<f32> = u_xlat48;
        let x_2428 : vec2<f32> = ((vec2<f32>(x_2420.x, x_2420.y) * vec2<f32>(x_2423.z, x_2423.w)) + -(x_2426));
        let x_2429 : vec4<f32> = u_xlat7;
        u_xlat7 = vec4<f32>(x_2428.x, x_2428.y, x_2429.z, x_2429.w);
        let x_2431 : vec4<f32> = u_xlat7;
        u_xlat8 = (vec4<f32>(x_2431.x, x_2431.x, x_2431.y, x_2431.y) + vec4<f32>(0.5f, 1.0f, 0.5f, 1.0f));
        let x_2434 : vec4<f32> = u_xlat8;
        let x_2436 : vec4<f32> = u_xlat8;
        u_xlat9 = (vec4<f32>(x_2434.x, x_2434.x, x_2434.z, x_2434.z) * vec4<f32>(x_2436.x, x_2436.x, x_2436.z, x_2436.z));
        let x_2439 : vec4<f32> = u_xlat9;
        let x_2441 : vec2<f32> = (vec2<f32>(x_2439.y, x_2439.w) * vec2<f32>(0.040816002f, 0.040816002f));
        let x_2442 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_2442.x, x_2441.x, x_2442.z, x_2441.y);
        let x_2444 : vec4<f32> = u_xlat9;
        let x_2447 : vec4<f32> = u_xlat7;
        u_xlat49 = ((vec2<f32>(x_2444.x, x_2444.z) * vec2<f32>(0.5f, 0.5f)) + -(vec2<f32>(x_2447.x, x_2447.y)));
        let x_2451 : vec4<f32> = u_xlat7;
        let x_2454 : vec2<f32> = (-(vec2<f32>(x_2451.x, x_2451.y)) + vec2<f32>(1.0f, 1.0f));
        let x_2455 : vec4<f32> = u_xlat8;
        u_xlat8 = vec4<f32>(x_2454.x, x_2455.y, x_2454.y, x_2455.w);
        let x_2457 : vec4<f32> = u_xlat7;
        let x_2459 : vec2<f32> = min(vec2<f32>(x_2457.x, x_2457.y), vec2<f32>(0.0f, 0.0f));
        let x_2460 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_2459.x, x_2459.y, x_2460.z, x_2460.w);
        let x_2462 : vec4<f32> = u_xlat9;
        let x_2465 : vec4<f32> = u_xlat9;
        let x_2468 : vec4<f32> = u_xlat8;
        let x_2470 : vec2<f32> = ((-(vec2<f32>(x_2462.x, x_2462.y)) * vec2<f32>(x_2465.x, x_2465.y)) + vec2<f32>(x_2468.x, x_2468.z));
        let x_2471 : vec4<f32> = u_xlat8;
        u_xlat8 = vec4<f32>(x_2470.x, x_2471.y, x_2470.y, x_2471.w);
        let x_2473 : vec4<f32> = u_xlat7;
        let x_2475 : vec2<f32> = max(vec2<f32>(x_2473.x, x_2473.y), vec2<f32>(0.0f, 0.0f));
        let x_2476 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_2475.x, x_2475.y, x_2476.z, x_2476.w);
        let x_2478 : vec4<f32> = u_xlat9;
        let x_2481 : vec4<f32> = u_xlat9;
        let x_2484 : vec4<f32> = u_xlat8;
        let x_2486 : vec2<f32> = ((-(vec2<f32>(x_2478.x, x_2478.y)) * vec2<f32>(x_2481.x, x_2481.y)) + vec2<f32>(x_2484.y, x_2484.w));
        let x_2487 : vec4<f32> = u_xlat8;
        u_xlat8 = vec4<f32>(x_2487.x, x_2486.x, x_2487.z, x_2486.y);
        let x_2489 : vec4<f32> = u_xlat8;
        u_xlat8 = (x_2489 + vec4<f32>(2.0f, 2.0f, 2.0f, 2.0f));
        let x_2492 : f32 = u_xlat8.y;
        u_xlat9.z = (x_2492 * 0.081632003f);
        let x_2495 : vec2<f32> = u_xlat49;
        let x_2497 : vec2<f32> = (vec2<f32>(x_2495.y, x_2495.x) * vec2<f32>(0.081632003f, 0.081632003f));
        let x_2498 : vec4<f32> = u_xlat11;
        u_xlat11 = vec4<f32>(x_2497.x, x_2497.y, x_2498.z, x_2498.w);
        let x_2500 : vec4<f32> = u_xlat8;
        u_xlat49 = (vec2<f32>(x_2500.x, x_2500.z) * vec2<f32>(0.081632003f, 0.081632003f));
        let x_2504 : f32 = u_xlat8.w;
        u_xlat11.z = (x_2504 * 0.081632003f);
        let x_2508 : f32 = u_xlat11.y;
        u_xlat9.x = x_2508;
        let x_2510 : vec4<f32> = u_xlat7;
        let x_2513 : vec2<f32> = ((vec2<f32>(x_2510.x, x_2510.x) * vec2<f32>(-0.081632003f, 0.081632003f)) + vec2<f32>(0.163264006f, 0.081632003f));
        let x_2514 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_2514.x, x_2513.x, x_2514.z, x_2513.y);
        let x_2516 : vec4<f32> = u_xlat7;
        let x_2519 : vec2<f32> = ((vec2<f32>(x_2516.x, x_2516.x) * vec2<f32>(-0.081632003f, 0.081632003f)) + vec2<f32>(0.081632003f, 0.163264006f));
        let x_2520 : vec4<f32> = u_xlat8;
        u_xlat8 = vec4<f32>(x_2519.x, x_2520.y, x_2519.y, x_2520.w);
        let x_2523 : f32 = u_xlat49.x;
        u_xlat8.y = x_2523;
        let x_2526 : f32 = u_xlat10.y;
        u_xlat8.w = x_2526;
        let x_2528 : vec4<f32> = u_xlat8;
        let x_2529 : vec4<f32> = u_xlat9;
        u_xlat9 = (x_2528 + x_2529);
        let x_2531 : vec4<f32> = u_xlat7;
        let x_2534 : vec2<f32> = ((vec2<f32>(x_2531.y, x_2531.y) * vec2<f32>(-0.081632003f, 0.081632003f)) + vec2<f32>(0.163264006f, 0.081632003f));
        let x_2535 : vec4<f32> = u_xlat11;
        u_xlat11 = vec4<f32>(x_2535.x, x_2534.x, x_2535.z, x_2534.y);
        let x_2537 : vec4<f32> = u_xlat7;
        let x_2540 : vec2<f32> = ((vec2<f32>(x_2537.y, x_2537.y) * vec2<f32>(-0.081632003f, 0.081632003f)) + vec2<f32>(0.081632003f, 0.163264006f));
        let x_2541 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_2540.x, x_2541.y, x_2540.y, x_2541.w);
        let x_2544 : f32 = u_xlat49.y;
        u_xlat10.y = x_2544;
        let x_2546 : vec4<f32> = u_xlat10;
        let x_2547 : vec4<f32> = u_xlat11;
        u_xlat7 = (x_2546 + x_2547);
        let x_2549 : vec4<f32> = u_xlat8;
        let x_2550 : vec4<f32> = u_xlat9;
        u_xlat8 = (x_2549 / x_2550);
        let x_2552 : vec4<f32> = u_xlat8;
        u_xlat8 = (x_2552 + vec4<f32>(-3.5f, -1.5f, 0.5f, 2.5f));
        let x_2554 : vec4<f32> = u_xlat10;
        let x_2555 : vec4<f32> = u_xlat7;
        u_xlat10 = (x_2554 / x_2555);
        let x_2557 : vec4<f32> = u_xlat10;
        u_xlat10 = (x_2557 + vec4<f32>(-3.5f, -1.5f, 0.5f, 2.5f));
        let x_2559 : vec4<f32> = u_xlat8;
        let x_2562 : vec4<f32> = x_139.x_MainLightShadowmapSize;
        u_xlat8 = (vec4<f32>(x_2559.w, x_2559.x, x_2559.y, x_2559.z) * vec4<f32>(x_2562.x, x_2562.x, x_2562.x, x_2562.x));
        let x_2565 : vec4<f32> = u_xlat10;
        let x_2568 : vec4<f32> = x_139.x_MainLightShadowmapSize;
        u_xlat10 = (vec4<f32>(x_2565.x, x_2565.w, x_2565.y, x_2565.z) * vec4<f32>(x_2568.y, x_2568.y, x_2568.y, x_2568.y));
        let x_2571 : vec4<f32> = u_xlat8;
        let x_2572 : vec3<f32> = vec3<f32>(x_2571.y, x_2571.z, x_2571.w);
        let x_2573 : vec4<f32> = u_xlat11;
        u_xlat11 = vec4<f32>(x_2572.x, x_2573.y, x_2572.y, x_2572.z);
        let x_2576 : f32 = u_xlat10.x;
        u_xlat11.y = x_2576;
        let x_2578 : vec2<f32> = u_xlat48;
        let x_2581 : vec4<f32> = x_139.x_MainLightShadowmapSize;
        let x_2584 : vec4<f32> = u_xlat11;
        u_xlat12 = ((vec4<f32>(x_2578.x, x_2578.y, x_2578.x, x_2578.y) * vec4<f32>(x_2581.x, x_2581.y, x_2581.x, x_2581.y)) + vec4<f32>(x_2584.x, x_2584.y, x_2584.z, x_2584.y));
        let x_2587 : vec2<f32> = u_xlat48;
        let x_2589 : vec4<f32> = x_139.x_MainLightShadowmapSize;
        let x_2592 : vec4<f32> = u_xlat11;
        let x_2594 : vec2<f32> = ((x_2587 * vec2<f32>(x_2589.x, x_2589.y)) + vec2<f32>(x_2592.w, x_2592.y));
        let x_2595 : vec4<f32> = u_xlat13;
        u_xlat13 = vec4<f32>(x_2594.x, x_2594.y, x_2595.z, x_2595.w);
        let x_2598 : f32 = u_xlat11.y;
        u_xlat8.y = x_2598;
        let x_2601 : f32 = u_xlat10.z;
        u_xlat11.y = x_2601;
        let x_2603 : vec2<f32> = u_xlat48;
        let x_2606 : vec4<f32> = x_139.x_MainLightShadowmapSize;
        let x_2609 : vec4<f32> = u_xlat11;
        u_xlat14 = ((vec4<f32>(x_2603.x, x_2603.y, x_2603.x, x_2603.y) * vec4<f32>(x_2606.x, x_2606.y, x_2606.x, x_2606.y)) + vec4<f32>(x_2609.x, x_2609.y, x_2609.z, x_2609.y));
        let x_2612 : vec2<f32> = u_xlat48;
        let x_2614 : vec4<f32> = x_139.x_MainLightShadowmapSize;
        let x_2617 : vec4<f32> = u_xlat11;
        u_xlat55 = ((x_2612 * vec2<f32>(x_2614.x, x_2614.y)) + vec2<f32>(x_2617.w, x_2617.y));
        let x_2621 : f32 = u_xlat11.y;
        u_xlat8.z = x_2621;
        let x_2623 : vec2<f32> = u_xlat48;
        let x_2626 : vec4<f32> = x_139.x_MainLightShadowmapSize;
        let x_2629 : vec4<f32> = u_xlat8;
        u_xlat15 = ((vec4<f32>(x_2623.x, x_2623.y, x_2623.x, x_2623.y) * vec4<f32>(x_2626.x, x_2626.y, x_2626.x, x_2626.y)) + vec4<f32>(x_2629.x, x_2629.y, x_2629.x, x_2629.z));
        let x_2633 : f32 = u_xlat10.w;
        u_xlat11.y = x_2633;
        let x_2635 : vec2<f32> = u_xlat48;
        let x_2638 : vec4<f32> = x_139.x_MainLightShadowmapSize;
        let x_2641 : vec4<f32> = u_xlat11;
        u_xlat16 = ((vec4<f32>(x_2635.x, x_2635.y, x_2635.x, x_2635.y) * vec4<f32>(x_2638.x, x_2638.y, x_2638.x, x_2638.y)) + vec4<f32>(x_2641.x, x_2641.y, x_2641.z, x_2641.y));
        let x_2645 : vec2<f32> = u_xlat48;
        let x_2647 : vec4<f32> = x_139.x_MainLightShadowmapSize;
        let x_2650 : vec4<f32> = u_xlat11;
        u_xlat29 = ((x_2645 * vec2<f32>(x_2647.x, x_2647.y)) + vec2<f32>(x_2650.w, x_2650.y));
        let x_2654 : f32 = u_xlat11.y;
        u_xlat8.w = x_2654;
        let x_2656 : vec2<f32> = u_xlat48;
        let x_2658 : vec4<f32> = x_139.x_MainLightShadowmapSize;
        let x_2661 : vec4<f32> = u_xlat8;
        let x_2663 : vec2<f32> = ((x_2656 * vec2<f32>(x_2658.x, x_2658.y)) + vec2<f32>(x_2661.x, x_2661.w));
        let x_2664 : vec4<f32> = u_xlat17;
        u_xlat17 = vec4<f32>(x_2663.x, x_2663.y, x_2664.z, x_2664.w);
        let x_2666 : vec4<f32> = u_xlat11;
        let x_2667 : vec3<f32> = vec3<f32>(x_2666.x, x_2666.z, x_2666.w);
        let x_2668 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_2667.x, x_2668.y, x_2667.y, x_2667.z);
        let x_2670 : vec2<f32> = u_xlat48;
        let x_2673 : vec4<f32> = x_139.x_MainLightShadowmapSize;
        let x_2676 : vec4<f32> = u_xlat10;
        u_xlat11 = ((vec4<f32>(x_2670.x, x_2670.y, x_2670.x, x_2670.y) * vec4<f32>(x_2673.x, x_2673.y, x_2673.x, x_2673.y)) + vec4<f32>(x_2676.x, x_2676.y, x_2676.z, x_2676.y));
        let x_2680 : vec2<f32> = u_xlat48;
        let x_2682 : vec4<f32> = x_139.x_MainLightShadowmapSize;
        let x_2685 : vec4<f32> = u_xlat10;
        u_xlat52 = ((x_2680 * vec2<f32>(x_2682.x, x_2682.y)) + vec2<f32>(x_2685.w, x_2685.y));
        let x_2689 : f32 = u_xlat8.x;
        u_xlat10.x = x_2689;
        let x_2691 : vec2<f32> = u_xlat48;
        let x_2693 : vec4<f32> = x_139.x_MainLightShadowmapSize;
        let x_2696 : vec4<f32> = u_xlat10;
        u_xlat48 = ((x_2691 * vec2<f32>(x_2693.x, x_2693.y)) + vec2<f32>(x_2696.x, x_2696.y));
        let x_2699 : vec4<f32> = u_xlat7;
        let x_2701 : vec4<f32> = u_xlat9;
        u_xlat18 = (vec4<f32>(x_2699.x, x_2699.x, x_2699.x, x_2699.x) * x_2701);
        let x_2704 : vec4<f32> = u_xlat7;
        let x_2706 : vec4<f32> = u_xlat9;
        u_xlat19 = (vec4<f32>(x_2704.y, x_2704.y, x_2704.y, x_2704.y) * x_2706);
        let x_2709 : vec4<f32> = u_xlat7;
        let x_2711 : vec4<f32> = u_xlat9;
        u_xlat20 = (vec4<f32>(x_2709.z, x_2709.z, x_2709.z, x_2709.z) * x_2711);
        let x_2713 : vec4<f32> = u_xlat7;
        let x_2715 : vec4<f32> = u_xlat9;
        u_xlat7 = (vec4<f32>(x_2713.w, x_2713.w, x_2713.w, x_2713.w) * x_2715);
        let x_2718 : vec4<f32> = u_xlat12;
        let x_2719 : vec2<f32> = vec2<f32>(x_2718.x, x_2718.y);
        let x_2721 : f32 = vs_INTERP9.z;
        txVec43 = vec3<f32>(x_2719.x, x_2719.y, x_2721);
        let x_2728 : vec3<f32> = txVec43;
        let x_2730 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2728.xy, x_2728.z);
        u_xlat8.x = x_2730;
        let x_2733 : vec4<f32> = u_xlat12;
        let x_2734 : vec2<f32> = vec2<f32>(x_2733.z, x_2733.w);
        let x_2736 : f32 = vs_INTERP9.z;
        txVec44 = vec3<f32>(x_2734.x, x_2734.y, x_2736);
        let x_2744 : vec3<f32> = txVec44;
        let x_2746 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2744.xy, x_2744.z);
        u_xlat71 = x_2746;
        let x_2747 : f32 = u_xlat71;
        let x_2749 : f32 = u_xlat18.y;
        u_xlat71 = (x_2747 * x_2749);
        let x_2752 : f32 = u_xlat18.x;
        let x_2754 : f32 = u_xlat8.x;
        let x_2756 : f32 = u_xlat71;
        u_xlat8.x = ((x_2752 * x_2754) + x_2756);
        let x_2760 : vec4<f32> = u_xlat13;
        let x_2761 : vec2<f32> = vec2<f32>(x_2760.x, x_2760.y);
        let x_2763 : f32 = vs_INTERP9.z;
        txVec45 = vec3<f32>(x_2761.x, x_2761.y, x_2763);
        let x_2770 : vec3<f32> = txVec45;
        let x_2772 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2770.xy, x_2770.z);
        u_xlat71 = x_2772;
        let x_2774 : f32 = u_xlat18.z;
        let x_2775 : f32 = u_xlat71;
        let x_2778 : f32 = u_xlat8.x;
        u_xlat8.x = ((x_2774 * x_2775) + x_2778);
        let x_2782 : vec4<f32> = u_xlat15;
        let x_2783 : vec2<f32> = vec2<f32>(x_2782.x, x_2782.y);
        let x_2785 : f32 = vs_INTERP9.z;
        txVec46 = vec3<f32>(x_2783.x, x_2783.y, x_2785);
        let x_2792 : vec3<f32> = txVec46;
        let x_2794 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2792.xy, x_2792.z);
        u_xlat71 = x_2794;
        let x_2796 : f32 = u_xlat18.w;
        let x_2797 : f32 = u_xlat71;
        let x_2800 : f32 = u_xlat8.x;
        u_xlat8.x = ((x_2796 * x_2797) + x_2800);
        let x_2804 : vec4<f32> = u_xlat14;
        let x_2805 : vec2<f32> = vec2<f32>(x_2804.x, x_2804.y);
        let x_2807 : f32 = vs_INTERP9.z;
        txVec47 = vec3<f32>(x_2805.x, x_2805.y, x_2807);
        let x_2814 : vec3<f32> = txVec47;
        let x_2816 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2814.xy, x_2814.z);
        u_xlat71 = x_2816;
        let x_2818 : f32 = u_xlat19.x;
        let x_2819 : f32 = u_xlat71;
        let x_2822 : f32 = u_xlat8.x;
        u_xlat8.x = ((x_2818 * x_2819) + x_2822);
        let x_2826 : vec4<f32> = u_xlat14;
        let x_2827 : vec2<f32> = vec2<f32>(x_2826.z, x_2826.w);
        let x_2829 : f32 = vs_INTERP9.z;
        txVec48 = vec3<f32>(x_2827.x, x_2827.y, x_2829);
        let x_2836 : vec3<f32> = txVec48;
        let x_2838 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2836.xy, x_2836.z);
        u_xlat71 = x_2838;
        let x_2840 : f32 = u_xlat19.y;
        let x_2841 : f32 = u_xlat71;
        let x_2844 : f32 = u_xlat8.x;
        u_xlat8.x = ((x_2840 * x_2841) + x_2844);
        let x_2848 : vec2<f32> = u_xlat55;
        let x_2850 : f32 = vs_INTERP9.z;
        txVec49 = vec3<f32>(x_2848.x, x_2848.y, x_2850);
        let x_2857 : vec3<f32> = txVec49;
        let x_2859 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2857.xy, x_2857.z);
        u_xlat71 = x_2859;
        let x_2861 : f32 = u_xlat19.z;
        let x_2862 : f32 = u_xlat71;
        let x_2865 : f32 = u_xlat8.x;
        u_xlat8.x = ((x_2861 * x_2862) + x_2865);
        let x_2869 : vec4<f32> = u_xlat15;
        let x_2870 : vec2<f32> = vec2<f32>(x_2869.z, x_2869.w);
        let x_2872 : f32 = vs_INTERP9.z;
        txVec50 = vec3<f32>(x_2870.x, x_2870.y, x_2872);
        let x_2879 : vec3<f32> = txVec50;
        let x_2881 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2879.xy, x_2879.z);
        u_xlat71 = x_2881;
        let x_2883 : f32 = u_xlat19.w;
        let x_2884 : f32 = u_xlat71;
        let x_2887 : f32 = u_xlat8.x;
        u_xlat8.x = ((x_2883 * x_2884) + x_2887);
        let x_2891 : vec4<f32> = u_xlat16;
        let x_2892 : vec2<f32> = vec2<f32>(x_2891.x, x_2891.y);
        let x_2894 : f32 = vs_INTERP9.z;
        txVec51 = vec3<f32>(x_2892.x, x_2892.y, x_2894);
        let x_2901 : vec3<f32> = txVec51;
        let x_2903 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2901.xy, x_2901.z);
        u_xlat71 = x_2903;
        let x_2905 : f32 = u_xlat20.x;
        let x_2906 : f32 = u_xlat71;
        let x_2909 : f32 = u_xlat8.x;
        u_xlat8.x = ((x_2905 * x_2906) + x_2909);
        let x_2913 : vec4<f32> = u_xlat16;
        let x_2914 : vec2<f32> = vec2<f32>(x_2913.z, x_2913.w);
        let x_2916 : f32 = vs_INTERP9.z;
        txVec52 = vec3<f32>(x_2914.x, x_2914.y, x_2916);
        let x_2923 : vec3<f32> = txVec52;
        let x_2925 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2923.xy, x_2923.z);
        u_xlat71 = x_2925;
        let x_2927 : f32 = u_xlat20.y;
        let x_2928 : f32 = u_xlat71;
        let x_2931 : f32 = u_xlat8.x;
        u_xlat8.x = ((x_2927 * x_2928) + x_2931);
        let x_2935 : vec2<f32> = u_xlat29;
        let x_2937 : f32 = vs_INTERP9.z;
        txVec53 = vec3<f32>(x_2935.x, x_2935.y, x_2937);
        let x_2944 : vec3<f32> = txVec53;
        let x_2946 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2944.xy, x_2944.z);
        u_xlat29.x = x_2946;
        let x_2949 : f32 = u_xlat20.z;
        let x_2951 : f32 = u_xlat29.x;
        let x_2954 : f32 = u_xlat8.x;
        u_xlat8.x = ((x_2949 * x_2951) + x_2954);
        let x_2958 : vec4<f32> = u_xlat17;
        let x_2959 : vec2<f32> = vec2<f32>(x_2958.x, x_2958.y);
        let x_2961 : f32 = vs_INTERP9.z;
        txVec54 = vec3<f32>(x_2959.x, x_2959.y, x_2961);
        let x_2968 : vec3<f32> = txVec54;
        let x_2970 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2968.xy, x_2968.z);
        u_xlat29.x = x_2970;
        let x_2973 : f32 = u_xlat20.w;
        let x_2975 : f32 = u_xlat29.x;
        let x_2978 : f32 = u_xlat8.x;
        u_xlat8.x = ((x_2973 * x_2975) + x_2978);
        let x_2982 : vec4<f32> = u_xlat11;
        let x_2983 : vec2<f32> = vec2<f32>(x_2982.x, x_2982.y);
        let x_2985 : f32 = vs_INTERP9.z;
        txVec55 = vec3<f32>(x_2983.x, x_2983.y, x_2985);
        let x_2992 : vec3<f32> = txVec55;
        let x_2994 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2992.xy, x_2992.z);
        u_xlat29.x = x_2994;
        let x_2997 : f32 = u_xlat7.x;
        let x_2999 : f32 = u_xlat29.x;
        let x_3002 : f32 = u_xlat8.x;
        u_xlat7.x = ((x_2997 * x_2999) + x_3002);
        let x_3006 : vec4<f32> = u_xlat11;
        let x_3007 : vec2<f32> = vec2<f32>(x_3006.z, x_3006.w);
        let x_3009 : f32 = vs_INTERP9.z;
        txVec56 = vec3<f32>(x_3007.x, x_3007.y, x_3009);
        let x_3016 : vec3<f32> = txVec56;
        let x_3018 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_3016.xy, x_3016.z);
        u_xlat8.x = x_3018;
        let x_3021 : f32 = u_xlat7.y;
        let x_3023 : f32 = u_xlat8.x;
        let x_3026 : f32 = u_xlat7.x;
        u_xlat7.x = ((x_3021 * x_3023) + x_3026);
        let x_3030 : vec2<f32> = u_xlat52;
        let x_3032 : f32 = vs_INTERP9.z;
        txVec57 = vec3<f32>(x_3030.x, x_3030.y, x_3032);
        let x_3039 : vec3<f32> = txVec57;
        let x_3041 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_3039.xy, x_3039.z);
        u_xlat28.x = x_3041;
        let x_3044 : f32 = u_xlat7.z;
        let x_3046 : f32 = u_xlat28.x;
        let x_3049 : f32 = u_xlat7.x;
        u_xlat7.x = ((x_3044 * x_3046) + x_3049);
        let x_3053 : vec2<f32> = u_xlat48;
        let x_3055 : f32 = vs_INTERP9.z;
        txVec58 = vec3<f32>(x_3053.x, x_3053.y, x_3055);
        let x_3062 : vec3<f32> = txVec58;
        let x_3064 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_3062.xy, x_3062.z);
        u_xlat48.x = x_3064;
        let x_3067 : f32 = u_xlat7.w;
        let x_3069 : f32 = u_xlat48.x;
        let x_3072 : f32 = u_xlat7.x;
        u_xlat63 = ((x_3067 * x_3069) + x_3072);
      }
    }
  } else {
    let x_3076 : vec4<f32> = vs_INTERP9;
    let x_3077 : vec2<f32> = vec2<f32>(x_3076.x, x_3076.y);
    let x_3079 : f32 = vs_INTERP9.z;
    txVec59 = vec3<f32>(x_3077.x, x_3077.y, x_3079);
    let x_3086 : vec3<f32> = txVec59;
    let x_3088 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_3086.xy, x_3086.z);
    u_xlat63 = x_3088;
  }
  let x_3089 : f32 = u_xlat63;
  let x_3091 : f32 = x_139.x_MainLightShadowParams.x;
  let x_3094 : f32 = u_xlat4.x;
  u_xlat63 = ((x_3089 * x_3091) + x_3094);
  let x_3098 : f32 = vs_INTERP9.z;
  u_xlatb4 = (0.0f >= x_3098);
  let x_3101 : f32 = vs_INTERP9.z;
  u_xlatb48.x = (x_3101 >= 1.0f);
  let x_3104 : bool = u_xlatb4;
  let x_3106 : bool = u_xlatb48.x;
  u_xlatb4 = (x_3104 | x_3106);
  let x_3108 : bool = u_xlatb4;
  let x_3109 : f32 = u_xlat63;
  u_xlat63 = select(x_3109, 1.0f, x_3108);
  let x_3111 : vec3<f32> = vs_INTERP0;
  let x_3113 : vec3<f32> = x_66.x_WorldSpaceCameraPos;
  let x_3115 : vec3<f32> = (x_3111 + -(x_3113));
  let x_3116 : vec4<f32> = u_xlat7;
  u_xlat7 = vec4<f32>(x_3115.x, x_3115.y, x_3115.z, x_3116.w);
  let x_3118 : vec4<f32> = u_xlat7;
  let x_3120 : vec4<f32> = u_xlat7;
  u_xlat4.x = dot(vec3<f32>(x_3118.x, x_3118.y, x_3118.z), vec3<f32>(x_3120.x, x_3120.y, x_3120.z));
  let x_3125 : f32 = u_xlat4.x;
  let x_3127 : f32 = x_139.x_MainLightShadowParams.z;
  let x_3130 : f32 = x_139.x_MainLightShadowParams.w;
  u_xlat4.x = ((x_3125 * x_3127) + x_3130);
  let x_3134 : f32 = u_xlat4.x;
  u_xlat4.x = clamp(x_3134, 0.0f, 1.0f);
  let x_3137 : f32 = u_xlat63;
  u_xlat48.x = (-(x_3137) + 1.0f);
  let x_3142 : f32 = u_xlat4.x;
  let x_3144 : f32 = u_xlat48.x;
  let x_3146 : f32 = u_xlat63;
  u_xlat63 = ((x_3142 * x_3144) + x_3146);
  let x_3154 : f32 = x_3152.x_MainLightCookieTextureFormat;
  u_xlatb4 = !((x_3154 == -1.0f));
  let x_3156 : bool = u_xlatb4;
  if (x_3156) {
    let x_3159 : vec3<f32> = vs_INTERP0;
    let x_3162 : vec4<f32> = x_3152.x_MainLightWorldToLight[1i];
    u_xlat48 = (vec2<f32>(x_3159.y, x_3159.y) * vec2<f32>(x_3162.x, x_3162.y));
    let x_3166 : vec4<f32> = x_3152.x_MainLightWorldToLight[0i];
    let x_3168 : vec3<f32> = vs_INTERP0;
    let x_3171 : vec2<f32> = u_xlat48;
    u_xlat48 = ((vec2<f32>(x_3166.x, x_3166.y) * vec2<f32>(x_3168.x, x_3168.x)) + x_3171);
    let x_3174 : vec4<f32> = x_3152.x_MainLightWorldToLight[2i];
    let x_3176 : vec3<f32> = vs_INTERP0;
    let x_3179 : vec2<f32> = u_xlat48;
    u_xlat48 = ((vec2<f32>(x_3174.x, x_3174.y) * vec2<f32>(x_3176.z, x_3176.z)) + x_3179);
    let x_3181 : vec2<f32> = u_xlat48;
    let x_3183 : vec4<f32> = x_3152.x_MainLightWorldToLight[3i];
    u_xlat48 = (x_3181 + vec2<f32>(x_3183.x, x_3183.y));
    let x_3186 : vec2<f32> = u_xlat48;
    u_xlat48 = ((x_3186 * vec2<f32>(0.5f, 0.5f)) + vec2<f32>(0.5f, 0.5f));
    let x_3194 : vec2<f32> = u_xlat48;
    let x_3196 : f32 = x_66.x_GlobalMipBias.x;
    let x_3197 : vec4<f32> = textureSampleBias(x_MainLightCookieTexture, sampler_MainLightCookieTexture, x_3194, x_3196);
    u_xlat7 = x_3197;
    let x_3199 : f32 = x_3152.x_MainLightCookieTextureFormat;
    let x_3201 : f32 = x_3152.x_MainLightCookieTextureFormat;
    let x_3203 : f32 = x_3152.x_MainLightCookieTextureFormat;
    let x_3205 : f32 = x_3152.x_MainLightCookieTextureFormat;
    let x_3206 : vec4<f32> = vec4<f32>(x_3199, x_3201, x_3203, x_3205);
    let x_3214 : vec4<bool> = (vec4<f32>(x_3206.x, x_3206.y, x_3206.z, x_3206.w) == vec4<f32>(0.0f, 1.0f, 0.0f, 1.0f));
    u_xlatb48 = vec2<bool>(x_3214.x, x_3214.y);
    let x_3217 : bool = u_xlatb48.y;
    if (x_3217) {
      let x_3222 : f32 = u_xlat7.w;
      x_3218 = x_3222;
    } else {
      let x_3225 : f32 = u_xlat7.x;
      x_3218 = x_3225;
    }
    let x_3226 : f32 = x_3218;
    u_xlat4.x = x_3226;
    let x_3229 : bool = u_xlatb48.x;
    if (x_3229) {
      let x_3233 : vec4<f32> = u_xlat7;
      x_3230 = vec3<f32>(x_3233.x, x_3233.y, x_3233.z);
    } else {
      let x_3236 : vec4<f32> = u_xlat4;
      x_3230 = vec3<f32>(x_3236.x, x_3236.x, x_3236.x);
    }
    let x_3238 : vec3<f32> = x_3230;
    let x_3239 : vec4<f32> = u_xlat7;
    u_xlat7 = vec4<f32>(x_3238.x, x_3238.y, x_3238.z, x_3239.w);
  } else {
    u_xlat7.x = 1.0f;
    u_xlat7.y = 1.0f;
    u_xlat7.z = 1.0f;
  }
  let x_3245 : vec4<f32> = u_xlat7;
  let x_3248 : vec4<f32> = x_66.x_MainLightColor;
  let x_3250 : vec3<f32> = (vec3<f32>(x_3245.x, x_3245.y, x_3245.z) * vec3<f32>(x_3248.x, x_3248.y, x_3248.z));
  let x_3251 : vec4<f32> = u_xlat7;
  u_xlat7 = vec4<f32>(x_3250.x, x_3250.y, x_3250.z, x_3251.w);
  let x_3253 : vec3<f32> = u_xlat27;
  let x_3255 : vec4<f32> = u_xlat7;
  let x_3257 : vec3<f32> = (vec3<f32>(x_3253.x, x_3253.x, x_3253.x) * vec3<f32>(x_3255.x, x_3255.y, x_3255.z));
  let x_3258 : vec4<f32> = u_xlat7;
  u_xlat7 = vec4<f32>(x_3257.x, x_3257.y, x_3257.z, x_3258.w);
  let x_3260 : vec4<f32> = u_xlat5;
  let x_3263 : vec3<f32> = u_xlat24;
  u_xlat4.x = dot(-(vec3<f32>(x_3260.x, x_3260.y, x_3260.z)), x_3263);
  let x_3267 : f32 = u_xlat4.x;
  let x_3269 : f32 = u_xlat4.x;
  u_xlat4.x = (x_3267 + x_3269);
  let x_3272 : vec3<f32> = u_xlat24;
  let x_3273 : vec4<f32> = u_xlat4;
  let x_3277 : vec4<f32> = u_xlat5;
  let x_3280 : vec3<f32> = ((x_3272 * -(vec3<f32>(x_3273.x, x_3273.x, x_3273.x))) + -(vec3<f32>(x_3277.x, x_3277.y, x_3277.z)));
  let x_3281 : vec4<f32> = u_xlat8;
  u_xlat8 = vec4<f32>(x_3280.x, x_3280.y, x_3280.z, x_3281.w);
  let x_3283 : vec3<f32> = u_xlat24;
  let x_3284 : vec4<f32> = u_xlat5;
  u_xlat4.x = dot(x_3283, vec3<f32>(x_3284.x, x_3284.y, x_3284.z));
  let x_3289 : f32 = u_xlat4.x;
  u_xlat4.x = clamp(x_3289, 0.0f, 1.0f);
  let x_3293 : f32 = u_xlat4.x;
  u_xlat4.x = (-(x_3293) + 1.0f);
  let x_3298 : f32 = u_xlat4.x;
  let x_3300 : f32 = u_xlat4.x;
  u_xlat4.x = (x_3298 * x_3300);
  let x_3304 : f32 = u_xlat4.x;
  let x_3306 : f32 = u_xlat4.x;
  u_xlat4.x = (x_3304 * x_3306);
  let x_3310 : f32 = u_xlat22.x;
  u_xlat48.x = ((-(x_3310) * 0.699999988f) + 1.700000048f);
  let x_3318 : f32 = u_xlat22.x;
  let x_3320 : f32 = u_xlat48.x;
  u_xlat22.x = (x_3318 * x_3320);
  let x_3324 : f32 = u_xlat22.x;
  u_xlat22.x = (x_3324 * 6.0f);
  let x_3336 : vec4<f32> = u_xlat8;
  let x_3339 : f32 = u_xlat22.x;
  let x_3340 : vec4<f32> = textureSampleLevel(unity_SpecCube0, samplerunity_SpecCube0, vec3<f32>(x_3336.x, x_3336.y, x_3336.z), x_3339);
  u_xlat8 = x_3340;
  let x_3342 : f32 = u_xlat8.w;
  u_xlat22.x = (x_3342 + -1.0f);
  let x_3346 : f32 = x_1592.unity_SpecCube0_HDR.w;
  let x_3348 : f32 = u_xlat22.x;
  u_xlat22.x = ((x_3346 * x_3348) + 1.0f);
  let x_3353 : f32 = u_xlat22.x;
  u_xlat22.x = max(x_3353, 0.0f);
  let x_3357 : f32 = u_xlat22.x;
  u_xlat22.x = log2(x_3357);
  let x_3361 : f32 = u_xlat22.x;
  let x_3363 : f32 = x_1592.unity_SpecCube0_HDR.y;
  u_xlat22.x = (x_3361 * x_3363);
  let x_3367 : f32 = u_xlat22.x;
  u_xlat22.x = exp2(x_3367);
  let x_3371 : f32 = u_xlat22.x;
  let x_3373 : f32 = x_1592.unity_SpecCube0_HDR.x;
  u_xlat22.x = (x_3371 * x_3373);
  let x_3376 : vec4<f32> = u_xlat8;
  let x_3378 : vec3<f32> = u_xlat22;
  let x_3380 : vec3<f32> = (vec3<f32>(x_3376.x, x_3376.y, x_3376.z) * vec3<f32>(x_3378.x, x_3378.x, x_3378.x));
  let x_3381 : vec4<f32> = u_xlat8;
  u_xlat8 = vec4<f32>(x_3380.x, x_3380.y, x_3380.z, x_3381.w);
  let x_3383 : f32 = u_xlat64;
  let x_3385 : f32 = u_xlat64;
  let x_3389 : vec2<f32> = ((vec2<f32>(x_3383, x_3383) * vec2<f32>(x_3385, x_3385)) + vec2<f32>(-1.0f, 1.0f));
  let x_3390 : vec3<f32> = u_xlat22;
  u_xlat22 = vec3<f32>(x_3389.x, x_3390.y, x_3389.y);
  let x_3393 : f32 = u_xlat22.z;
  u_xlat64 = (1.0f / x_3393);
  let x_3396 : f32 = u_xlat3.x;
  u_xlat3.x = (x_3396 + -0.039999999f);
  let x_3401 : f32 = u_xlat4.x;
  let x_3403 : f32 = u_xlat3.x;
  u_xlat3.x = ((x_3401 * x_3403) + 0.039999999f);
  let x_3408 : f32 = u_xlat64;
  let x_3410 : f32 = u_xlat3.x;
  u_xlat64 = (x_3408 * x_3410);
  let x_3412 : f32 = u_xlat64;
  let x_3414 : vec4<f32> = u_xlat8;
  let x_3416 : vec3<f32> = (vec3<f32>(x_3412, x_3412, x_3412) * vec3<f32>(x_3414.x, x_3414.y, x_3414.z));
  let x_3417 : vec4<f32> = u_xlat8;
  u_xlat8 = vec4<f32>(x_3416.x, x_3416.y, x_3416.z, x_3417.w);
  let x_3419 : vec3<f32> = u_xlat25;
  let x_3420 : vec3<f32> = u_xlat2;
  let x_3422 : vec4<f32> = u_xlat8;
  let x_3424 : vec3<f32> = ((x_3419 * x_3420) + vec3<f32>(x_3422.x, x_3422.y, x_3422.z));
  let x_3425 : vec4<f32> = u_xlat4;
  u_xlat4 = vec4<f32>(x_3424.x, x_3424.y, x_3424.z, x_3425.w);
  let x_3427 : f32 = u_xlat63;
  let x_3429 : f32 = x_1592.unity_LightData.z;
  u_xlat63 = (x_3427 * x_3429);
  let x_3431 : vec3<f32> = u_xlat24;
  let x_3433 : vec4<f32> = x_66.x_MainLightPosition;
  u_xlat64 = dot(x_3431, vec3<f32>(x_3433.x, x_3433.y, x_3433.z));
  let x_3436 : f32 = u_xlat64;
  u_xlat64 = clamp(x_3436, 0.0f, 1.0f);
  let x_3438 : f32 = u_xlat63;
  let x_3439 : f32 = u_xlat64;
  u_xlat63 = (x_3438 * x_3439);
  let x_3441 : f32 = u_xlat63;
  let x_3443 : vec4<f32> = u_xlat7;
  let x_3445 : vec3<f32> = (vec3<f32>(x_3441, x_3441, x_3441) * vec3<f32>(x_3443.x, x_3443.y, x_3443.z));
  let x_3446 : vec4<f32> = u_xlat7;
  u_xlat7 = vec4<f32>(x_3445.x, x_3445.y, x_3445.z, x_3446.w);
  let x_3448 : vec4<f32> = u_xlat5;
  let x_3451 : vec4<f32> = x_66.x_MainLightPosition;
  let x_3453 : vec3<f32> = (vec3<f32>(x_3448.x, x_3448.y, x_3448.z) + vec3<f32>(x_3451.x, x_3451.y, x_3451.z));
  let x_3454 : vec4<f32> = u_xlat8;
  u_xlat8 = vec4<f32>(x_3453.x, x_3453.y, x_3453.z, x_3454.w);
  let x_3456 : vec4<f32> = u_xlat8;
  let x_3458 : vec4<f32> = u_xlat8;
  u_xlat63 = dot(vec3<f32>(x_3456.x, x_3456.y, x_3456.z), vec3<f32>(x_3458.x, x_3458.y, x_3458.z));
  let x_3461 : f32 = u_xlat63;
  u_xlat63 = max(x_3461, 1.17549435e-37f);
  let x_3464 : f32 = u_xlat63;
  u_xlat63 = inverseSqrt(x_3464);
  let x_3466 : f32 = u_xlat63;
  let x_3468 : vec4<f32> = u_xlat8;
  let x_3470 : vec3<f32> = (vec3<f32>(x_3466, x_3466, x_3466) * vec3<f32>(x_3468.x, x_3468.y, x_3468.z));
  let x_3471 : vec4<f32> = u_xlat8;
  u_xlat8 = vec4<f32>(x_3470.x, x_3470.y, x_3470.z, x_3471.w);
  let x_3473 : vec3<f32> = u_xlat24;
  let x_3474 : vec4<f32> = u_xlat8;
  u_xlat63 = dot(x_3473, vec3<f32>(x_3474.x, x_3474.y, x_3474.z));
  let x_3477 : f32 = u_xlat63;
  u_xlat63 = clamp(x_3477, 0.0f, 1.0f);
  let x_3480 : vec4<f32> = x_66.x_MainLightPosition;
  let x_3482 : vec4<f32> = u_xlat8;
  u_xlat64 = dot(vec3<f32>(x_3480.x, x_3480.y, x_3480.z), vec3<f32>(x_3482.x, x_3482.y, x_3482.z));
  let x_3485 : f32 = u_xlat64;
  u_xlat64 = clamp(x_3485, 0.0f, 1.0f);
  let x_3487 : f32 = u_xlat63;
  let x_3488 : f32 = u_xlat63;
  u_xlat63 = (x_3487 * x_3488);
  let x_3490 : f32 = u_xlat63;
  let x_3492 : f32 = u_xlat22.x;
  u_xlat63 = ((x_3490 * x_3492) + 1.000010014f);
  let x_3496 : f32 = u_xlat64;
  let x_3497 : f32 = u_xlat64;
  u_xlat64 = (x_3496 * x_3497);
  let x_3499 : f32 = u_xlat63;
  let x_3500 : f32 = u_xlat63;
  u_xlat63 = (x_3499 * x_3500);
  let x_3502 : f32 = u_xlat64;
  u_xlat64 = max(x_3502, 0.100000001f);
  let x_3505 : f32 = u_xlat63;
  let x_3506 : f32 = u_xlat64;
  u_xlat63 = (x_3505 * x_3506);
  let x_3508 : f32 = u_xlat68;
  let x_3509 : f32 = u_xlat63;
  u_xlat63 = (x_3508 * x_3509);
  let x_3511 : f32 = u_xlat65;
  let x_3512 : f32 = u_xlat63;
  u_xlat63 = (x_3511 / x_3512);
  let x_3514 : f32 = u_xlat63;
  let x_3518 : vec3<f32> = u_xlat2;
  let x_3519 : vec3<f32> = ((vec3<f32>(x_3514, x_3514, x_3514) * vec3<f32>(0.039999999f, 0.039999999f, 0.039999999f)) + x_3518);
  let x_3520 : vec4<f32> = u_xlat8;
  u_xlat8 = vec4<f32>(x_3519.x, x_3519.y, x_3519.z, x_3520.w);
  let x_3522 : vec4<f32> = u_xlat7;
  let x_3524 : vec4<f32> = u_xlat8;
  let x_3526 : vec3<f32> = (vec3<f32>(x_3522.x, x_3522.y, x_3522.z) * vec3<f32>(x_3524.x, x_3524.y, x_3524.z));
  let x_3527 : vec4<f32> = u_xlat7;
  u_xlat7 = vec4<f32>(x_3526.x, x_3526.y, x_3526.z, x_3527.w);
  let x_3530 : f32 = x_66.x_AdditionalLightsCount.x;
  let x_3532 : f32 = x_1592.unity_LightData.y;
  u_xlat63 = min(x_3530, x_3532);
  let x_3536 : f32 = u_xlat63;
  u_xlatu63 = bitcast<u32>(i32(x_3536));
  let x_3540 : f32 = x_3152.x_AdditionalLightsCookieAtlasTextureFormat;
  let x_3542 : f32 = x_3152.x_AdditionalLightsCookieAtlasTextureFormat;
  let x_3544 : f32 = x_3152.x_AdditionalLightsCookieAtlasTextureFormat;
  let x_3546 : f32 = x_3152.x_AdditionalLightsCookieAtlasTextureFormat;
  let x_3547 : vec4<f32> = vec4<f32>(x_3540, x_3542, x_3544, x_3546);
  let x_3553 : vec4<bool> = (vec4<f32>(x_3547.x, x_3547.y, x_3547.z, x_3547.w) == vec4<f32>(0.0f, 1.0f, 0.0f, 1.0f));
  u_xlatb48 = vec2<bool>(x_3553.x, x_3553.y);
  u_xlat8.x = 0.0f;
  u_xlat8.y = 0.0f;
  u_xlat8.z = 0.0f;
  u_xlatu_loop_1 = 0u;
  loop {
    let x_3564 : u32 = u_xlatu_loop_1;
    let x_3565 : u32 = u_xlatu63;
    if ((x_3564 < x_3565)) {
    } else {
      break;
    }
    let x_3568 : u32 = u_xlatu_loop_1;
    u_xlatu3 = (x_3568 >> 2u);
    let x_3572 : u32 = u_xlatu_loop_1;
    u_xlati67 = bitcast<i32>((x_3572 & 3u));
    let x_3575 : u32 = u_xlatu3;
    let x_3578 : vec4<f32> = x_1592.unity_LightIndices[bitcast<i32>(x_3575)];
    let x_3588 : i32 = u_xlati67;
    indexable = array<vec4<u32>, 4u>(vec4<u32>(1065353216u, 0u, 0u, 0u), vec4<u32>(0u, 1065353216u, 0u, 0u), vec4<u32>(0u, 0u, 1065353216u, 0u), vec4<u32>(0u, 0u, 0u, 1065353216u));
    let x_3593 : vec4<u32> = indexable[x_3588];
    u_xlat3.x = dot(x_3578, bitcast<vec4<f32>>(x_3593));
    let x_3598 : f32 = u_xlat3.x;
    u_xlatu3 = bitcast<u32>(i32(x_3598));
    let x_3601 : vec3<f32> = vs_INTERP0;
    let x_3613 : u32 = u_xlatu3;
    let x_3616 : vec4<f32> = x_3612.x_AdditionalLightsPosition[bitcast<i32>(x_3613)];
    let x_3619 : u32 = u_xlatu3;
    let x_3622 : vec4<f32> = x_3612.x_AdditionalLightsPosition[bitcast<i32>(x_3619)];
    let x_3624 : vec3<f32> = ((-(x_3601) * vec3<f32>(x_3616.w, x_3616.w, x_3616.w)) + vec3<f32>(x_3622.x, x_3622.y, x_3622.z));
    let x_3625 : vec4<f32> = u_xlat9;
    u_xlat9 = vec4<f32>(x_3624.x, x_3624.y, x_3624.z, x_3625.w);
    let x_3627 : vec4<f32> = u_xlat9;
    let x_3629 : vec4<f32> = u_xlat9;
    u_xlat67 = dot(vec3<f32>(x_3627.x, x_3627.y, x_3627.z), vec3<f32>(x_3629.x, x_3629.y, x_3629.z));
    let x_3632 : f32 = u_xlat67;
    u_xlat67 = max(x_3632, 6.10351562e-05f);
    let x_3636 : f32 = u_xlat67;
    u_xlat70 = inverseSqrt(x_3636);
    let x_3638 : f32 = u_xlat70;
    let x_3640 : vec4<f32> = u_xlat9;
    let x_3642 : vec3<f32> = (vec3<f32>(x_3638, x_3638, x_3638) * vec3<f32>(x_3640.x, x_3640.y, x_3640.z));
    let x_3643 : vec4<f32> = u_xlat10;
    u_xlat10 = vec4<f32>(x_3642.x, x_3642.y, x_3642.z, x_3643.w);
    let x_3645 : f32 = u_xlat67;
    u_xlat71 = (1.0f / x_3645);
    let x_3647 : f32 = u_xlat67;
    let x_3648 : u32 = u_xlatu3;
    let x_3651 : f32 = x_3612.x_AdditionalLightsAttenuation[bitcast<i32>(x_3648)].x;
    u_xlat67 = (x_3647 * x_3651);
    let x_3653 : f32 = u_xlat67;
    let x_3655 : f32 = u_xlat67;
    u_xlat67 = ((-(x_3653) * x_3655) + 1.0f);
    let x_3658 : f32 = u_xlat67;
    u_xlat67 = max(x_3658, 0.0f);
    let x_3660 : f32 = u_xlat67;
    let x_3661 : f32 = u_xlat67;
    u_xlat67 = (x_3660 * x_3661);
    let x_3663 : f32 = u_xlat67;
    let x_3664 : f32 = u_xlat71;
    u_xlat67 = (x_3663 * x_3664);
    let x_3666 : u32 = u_xlatu3;
    let x_3669 : vec4<f32> = x_3612.x_AdditionalLightsSpotDir[bitcast<i32>(x_3666)];
    let x_3671 : vec4<f32> = u_xlat10;
    u_xlat71 = dot(vec3<f32>(x_3669.x, x_3669.y, x_3669.z), vec3<f32>(x_3671.x, x_3671.y, x_3671.z));
    let x_3674 : f32 = u_xlat71;
    let x_3675 : u32 = u_xlatu3;
    let x_3678 : f32 = x_3612.x_AdditionalLightsAttenuation[bitcast<i32>(x_3675)].z;
    let x_3680 : u32 = u_xlatu3;
    let x_3683 : f32 = x_3612.x_AdditionalLightsAttenuation[bitcast<i32>(x_3680)].w;
    u_xlat71 = ((x_3674 * x_3678) + x_3683);
    let x_3685 : f32 = u_xlat71;
    u_xlat71 = clamp(x_3685, 0.0f, 1.0f);
    let x_3687 : f32 = u_xlat71;
    let x_3688 : f32 = u_xlat71;
    u_xlat71 = (x_3687 * x_3688);
    let x_3690 : f32 = u_xlat67;
    let x_3691 : f32 = u_xlat71;
    u_xlat67 = (x_3690 * x_3691);
    let x_3694 : u32 = u_xlatu3;
    u_xlatu71 = (x_3694 >> 5u);
    let x_3697 : u32 = u_xlatu3;
    u_xlati72 = (1i << bitcast<u32>((bitcast<i32>(x_3697) & 31i)));
    let x_3703 : i32 = u_xlati72;
    let x_3705 : u32 = u_xlatu71;
    let x_3708 : f32 = x_3152.x_AdditionalLightsCookieEnableBits[bitcast<i32>(x_3705)].el;
    u_xlati71 = bitcast<i32>((bitcast<u32>(x_3703) & bitcast<u32>(x_3708)));
    let x_3712 : i32 = u_xlati71;
    if ((x_3712 != 0i)) {
      let x_3722 : u32 = u_xlatu3;
      let x_3725 : f32 = x_3721.x_AdditionalLightsLightTypes[bitcast<i32>(x_3722)].el;
      u_xlati71 = i32(x_3725);
      let x_3727 : i32 = u_xlati71;
      u_xlati72 = select(1i, 0i, (x_3727 != 0i));
      let x_3731 : u32 = u_xlatu3;
      u_xlati73 = (bitcast<i32>(x_3731) << bitcast<u32>(2i));
      let x_3734 : i32 = u_xlati72;
      if ((x_3734 != 0i)) {
        let x_3738 : vec3<f32> = vs_INTERP0;
        let x_3740 : i32 = u_xlati73;
        let x_3743 : i32 = u_xlati73;
        let x_3747 : vec4<f32> = x_3721.x_AdditionalLightsWorldToLights[((x_3740 + 1i) / 4i)][((x_3743 + 1i) % 4i)];
        let x_3749 : vec3<f32> = (vec3<f32>(x_3738.y, x_3738.y, x_3738.y) * vec3<f32>(x_3747.x, x_3747.y, x_3747.w));
        let x_3750 : vec4<f32> = u_xlat11;
        u_xlat11 = vec4<f32>(x_3749.x, x_3749.y, x_3749.z, x_3750.w);
        let x_3752 : i32 = u_xlati73;
        let x_3754 : i32 = u_xlati73;
        let x_3757 : vec4<f32> = x_3721.x_AdditionalLightsWorldToLights[(x_3752 / 4i)][(x_3754 % 4i)];
        let x_3759 : vec3<f32> = vs_INTERP0;
        let x_3762 : vec4<f32> = u_xlat11;
        let x_3764 : vec3<f32> = ((vec3<f32>(x_3757.x, x_3757.y, x_3757.w) * vec3<f32>(x_3759.x, x_3759.x, x_3759.x)) + vec3<f32>(x_3762.x, x_3762.y, x_3762.z));
        let x_3765 : vec4<f32> = u_xlat11;
        u_xlat11 = vec4<f32>(x_3764.x, x_3764.y, x_3764.z, x_3765.w);
        let x_3767 : i32 = u_xlati73;
        let x_3770 : i32 = u_xlati73;
        let x_3774 : vec4<f32> = x_3721.x_AdditionalLightsWorldToLights[((x_3767 + 2i) / 4i)][((x_3770 + 2i) % 4i)];
        let x_3776 : vec3<f32> = vs_INTERP0;
        let x_3779 : vec4<f32> = u_xlat11;
        let x_3781 : vec3<f32> = ((vec3<f32>(x_3774.x, x_3774.y, x_3774.w) * vec3<f32>(x_3776.z, x_3776.z, x_3776.z)) + vec3<f32>(x_3779.x, x_3779.y, x_3779.z));
        let x_3782 : vec4<f32> = u_xlat11;
        u_xlat11 = vec4<f32>(x_3781.x, x_3781.y, x_3781.z, x_3782.w);
        let x_3784 : vec4<f32> = u_xlat11;
        let x_3786 : i32 = u_xlati73;
        let x_3789 : i32 = u_xlati73;
        let x_3793 : vec4<f32> = x_3721.x_AdditionalLightsWorldToLights[((x_3786 + 3i) / 4i)][((x_3789 + 3i) % 4i)];
        let x_3795 : vec3<f32> = (vec3<f32>(x_3784.x, x_3784.y, x_3784.z) + vec3<f32>(x_3793.x, x_3793.y, x_3793.w));
        let x_3796 : vec4<f32> = u_xlat11;
        u_xlat11 = vec4<f32>(x_3795.x, x_3795.y, x_3795.z, x_3796.w);
        let x_3798 : vec4<f32> = u_xlat11;
        let x_3800 : vec4<f32> = u_xlat11;
        let x_3802 : vec2<f32> = (vec2<f32>(x_3798.x, x_3798.y) / vec2<f32>(x_3800.z, x_3800.z));
        let x_3803 : vec4<f32> = u_xlat11;
        u_xlat11 = vec4<f32>(x_3802.x, x_3802.y, x_3803.z, x_3803.w);
        let x_3805 : vec4<f32> = u_xlat11;
        let x_3808 : vec2<f32> = ((vec2<f32>(x_3805.x, x_3805.y) * vec2<f32>(0.5f, 0.5f)) + vec2<f32>(0.5f, 0.5f));
        let x_3809 : vec4<f32> = u_xlat11;
        u_xlat11 = vec4<f32>(x_3808.x, x_3808.y, x_3809.z, x_3809.w);
        let x_3811 : vec4<f32> = u_xlat11;
        let x_3815 : vec2<f32> = clamp(vec2<f32>(x_3811.x, x_3811.y), vec2<f32>(0.0f, 0.0f), vec2<f32>(1.0f, 1.0f));
        let x_3816 : vec4<f32> = u_xlat11;
        u_xlat11 = vec4<f32>(x_3815.x, x_3815.y, x_3816.z, x_3816.w);
        let x_3818 : u32 = u_xlatu3;
        let x_3821 : vec4<f32> = x_3721.x_AdditionalLightsCookieAtlasUVRects[bitcast<i32>(x_3818)];
        let x_3823 : vec4<f32> = u_xlat11;
        let x_3826 : u32 = u_xlatu3;
        let x_3829 : vec4<f32> = x_3721.x_AdditionalLightsCookieAtlasUVRects[bitcast<i32>(x_3826)];
        let x_3831 : vec2<f32> = ((vec2<f32>(x_3821.x, x_3821.y) * vec2<f32>(x_3823.x, x_3823.y)) + vec2<f32>(x_3829.z, x_3829.w));
        let x_3832 : vec4<f32> = u_xlat11;
        u_xlat11 = vec4<f32>(x_3831.x, x_3831.y, x_3832.z, x_3832.w);
      } else {
        let x_3836 : i32 = u_xlati71;
        u_xlatb71 = (x_3836 == 1i);
        let x_3838 : bool = u_xlatb71;
        u_xlati71 = select(0i, 1i, x_3838);
        let x_3840 : i32 = u_xlati71;
        if ((x_3840 != 0i)) {
          let x_3845 : vec3<f32> = vs_INTERP0;
          let x_3847 : i32 = u_xlati73;
          let x_3850 : i32 = u_xlati73;
          let x_3854 : vec4<f32> = x_3721.x_AdditionalLightsWorldToLights[((x_3847 + 1i) / 4i)][((x_3850 + 1i) % 4i)];
          u_xlat53 = (vec2<f32>(x_3845.y, x_3845.y) * vec2<f32>(x_3854.x, x_3854.y));
          let x_3857 : i32 = u_xlati73;
          let x_3859 : i32 = u_xlati73;
          let x_3862 : vec4<f32> = x_3721.x_AdditionalLightsWorldToLights[(x_3857 / 4i)][(x_3859 % 4i)];
          let x_3864 : vec3<f32> = vs_INTERP0;
          let x_3867 : vec2<f32> = u_xlat53;
          u_xlat53 = ((vec2<f32>(x_3862.x, x_3862.y) * vec2<f32>(x_3864.x, x_3864.x)) + x_3867);
          let x_3869 : i32 = u_xlati73;
          let x_3872 : i32 = u_xlati73;
          let x_3876 : vec4<f32> = x_3721.x_AdditionalLightsWorldToLights[((x_3869 + 2i) / 4i)][((x_3872 + 2i) % 4i)];
          let x_3878 : vec3<f32> = vs_INTERP0;
          let x_3881 : vec2<f32> = u_xlat53;
          u_xlat53 = ((vec2<f32>(x_3876.x, x_3876.y) * vec2<f32>(x_3878.z, x_3878.z)) + x_3881);
          let x_3883 : vec2<f32> = u_xlat53;
          let x_3884 : i32 = u_xlati73;
          let x_3887 : i32 = u_xlati73;
          let x_3891 : vec4<f32> = x_3721.x_AdditionalLightsWorldToLights[((x_3884 + 3i) / 4i)][((x_3887 + 3i) % 4i)];
          u_xlat53 = (x_3883 + vec2<f32>(x_3891.x, x_3891.y));
          let x_3894 : vec2<f32> = u_xlat53;
          u_xlat53 = ((x_3894 * vec2<f32>(0.5f, 0.5f)) + vec2<f32>(0.5f, 0.5f));
          let x_3897 : vec2<f32> = u_xlat53;
          u_xlat53 = fract(x_3897);
          let x_3899 : u32 = u_xlatu3;
          let x_3902 : vec4<f32> = x_3721.x_AdditionalLightsCookieAtlasUVRects[bitcast<i32>(x_3899)];
          let x_3904 : vec2<f32> = u_xlat53;
          let x_3906 : u32 = u_xlatu3;
          let x_3909 : vec4<f32> = x_3721.x_AdditionalLightsCookieAtlasUVRects[bitcast<i32>(x_3906)];
          let x_3911 : vec2<f32> = ((vec2<f32>(x_3902.x, x_3902.y) * x_3904) + vec2<f32>(x_3909.z, x_3909.w));
          let x_3912 : vec4<f32> = u_xlat11;
          u_xlat11 = vec4<f32>(x_3911.x, x_3911.y, x_3912.z, x_3912.w);
        } else {
          let x_3915 : vec3<f32> = vs_INTERP0;
          let x_3917 : i32 = u_xlati73;
          let x_3920 : i32 = u_xlati73;
          let x_3924 : vec4<f32> = x_3721.x_AdditionalLightsWorldToLights[((x_3917 + 1i) / 4i)][((x_3920 + 1i) % 4i)];
          u_xlat12 = (vec4<f32>(x_3915.y, x_3915.y, x_3915.y, x_3915.y) * x_3924);
          let x_3926 : i32 = u_xlati73;
          let x_3928 : i32 = u_xlati73;
          let x_3931 : vec4<f32> = x_3721.x_AdditionalLightsWorldToLights[(x_3926 / 4i)][(x_3928 % 4i)];
          let x_3932 : vec3<f32> = vs_INTERP0;
          let x_3935 : vec4<f32> = u_xlat12;
          u_xlat12 = ((x_3931 * vec4<f32>(x_3932.x, x_3932.x, x_3932.x, x_3932.x)) + x_3935);
          let x_3937 : i32 = u_xlati73;
          let x_3940 : i32 = u_xlati73;
          let x_3944 : vec4<f32> = x_3721.x_AdditionalLightsWorldToLights[((x_3937 + 2i) / 4i)][((x_3940 + 2i) % 4i)];
          let x_3945 : vec3<f32> = vs_INTERP0;
          let x_3948 : vec4<f32> = u_xlat12;
          u_xlat12 = ((x_3944 * vec4<f32>(x_3945.z, x_3945.z, x_3945.z, x_3945.z)) + x_3948);
          let x_3950 : vec4<f32> = u_xlat12;
          let x_3951 : i32 = u_xlati73;
          let x_3954 : i32 = u_xlati73;
          let x_3958 : vec4<f32> = x_3721.x_AdditionalLightsWorldToLights[((x_3951 + 3i) / 4i)][((x_3954 + 3i) % 4i)];
          u_xlat12 = (x_3950 + x_3958);
          let x_3960 : vec4<f32> = u_xlat12;
          let x_3962 : vec4<f32> = u_xlat12;
          let x_3964 : vec3<f32> = (vec3<f32>(x_3960.x, x_3960.y, x_3960.z) / vec3<f32>(x_3962.w, x_3962.w, x_3962.w));
          let x_3965 : vec4<f32> = u_xlat12;
          u_xlat12 = vec4<f32>(x_3964.x, x_3964.y, x_3964.z, x_3965.w);
          let x_3967 : vec4<f32> = u_xlat12;
          let x_3969 : vec4<f32> = u_xlat12;
          u_xlat71 = dot(vec3<f32>(x_3967.x, x_3967.y, x_3967.z), vec3<f32>(x_3969.x, x_3969.y, x_3969.z));
          let x_3972 : f32 = u_xlat71;
          u_xlat71 = inverseSqrt(x_3972);
          let x_3974 : f32 = u_xlat71;
          let x_3976 : vec4<f32> = u_xlat12;
          let x_3978 : vec3<f32> = (vec3<f32>(x_3974, x_3974, x_3974) * vec3<f32>(x_3976.x, x_3976.y, x_3976.z));
          let x_3979 : vec4<f32> = u_xlat12;
          u_xlat12 = vec4<f32>(x_3978.x, x_3978.y, x_3978.z, x_3979.w);
          let x_3981 : vec4<f32> = u_xlat12;
          u_xlat71 = dot(abs(vec3<f32>(x_3981.x, x_3981.y, x_3981.z)), vec3<f32>(1.0f, 1.0f, 1.0f));
          let x_3986 : f32 = u_xlat71;
          u_xlat71 = max(x_3986, 0.000001f);
          let x_3989 : f32 = u_xlat71;
          u_xlat71 = (1.0f / x_3989);
          let x_3991 : f32 = u_xlat71;
          let x_3993 : vec4<f32> = u_xlat12;
          let x_3995 : vec3<f32> = (vec3<f32>(x_3991, x_3991, x_3991) * vec3<f32>(x_3993.z, x_3993.x, x_3993.y));
          let x_3996 : vec4<f32> = u_xlat13;
          u_xlat13 = vec4<f32>(x_3995.x, x_3995.y, x_3995.z, x_3996.w);
          let x_3999 : f32 = u_xlat13.x;
          u_xlat13.x = -(x_3999);
          let x_4003 : f32 = u_xlat13.x;
          u_xlat13.x = clamp(x_4003, 0.0f, 1.0f);
          let x_4007 : vec4<f32> = u_xlat13;
          let x_4010 : vec4<bool> = (vec4<f32>(x_4007.y, x_4007.z, x_4007.y, x_4007.z) >= vec4<f32>(0.0f, 0.0f, 0.0f, 0.0f));
          u_xlatb53 = vec2<bool>(x_4010.x, x_4010.y);
          let x_4013 : bool = u_xlatb53.x;
          if (x_4013) {
            let x_4018 : f32 = u_xlat13.x;
            x_4014 = x_4018;
          } else {
            let x_4021 : f32 = u_xlat13.x;
            x_4014 = -(x_4021);
          }
          let x_4023 : f32 = x_4014;
          u_xlat53.x = x_4023;
          let x_4026 : bool = u_xlatb53.y;
          if (x_4026) {
            let x_4031 : f32 = u_xlat13.x;
            x_4027 = x_4031;
          } else {
            let x_4034 : f32 = u_xlat13.x;
            x_4027 = -(x_4034);
          }
          let x_4036 : f32 = x_4027;
          u_xlat53.y = x_4036;
          let x_4038 : vec4<f32> = u_xlat12;
          let x_4040 : f32 = u_xlat71;
          let x_4043 : vec2<f32> = u_xlat53;
          u_xlat53 = ((vec2<f32>(x_4038.x, x_4038.y) * vec2<f32>(x_4040, x_4040)) + x_4043);
          let x_4045 : vec2<f32> = u_xlat53;
          u_xlat53 = ((x_4045 * vec2<f32>(0.5f, 0.5f)) + vec2<f32>(0.5f, 0.5f));
          let x_4048 : vec2<f32> = u_xlat53;
          u_xlat53 = clamp(x_4048, vec2<f32>(0.0f, 0.0f), vec2<f32>(1.0f, 1.0f));
          let x_4052 : u32 = u_xlatu3;
          let x_4055 : vec4<f32> = x_3721.x_AdditionalLightsCookieAtlasUVRects[bitcast<i32>(x_4052)];
          let x_4057 : vec2<f32> = u_xlat53;
          let x_4059 : u32 = u_xlatu3;
          let x_4062 : vec4<f32> = x_3721.x_AdditionalLightsCookieAtlasUVRects[bitcast<i32>(x_4059)];
          let x_4064 : vec2<f32> = ((vec2<f32>(x_4055.x, x_4055.y) * x_4057) + vec2<f32>(x_4062.z, x_4062.w));
          let x_4065 : vec4<f32> = u_xlat11;
          u_xlat11 = vec4<f32>(x_4064.x, x_4064.y, x_4065.z, x_4065.w);
        }
      }
      let x_4072 : vec4<f32> = u_xlat11;
      let x_4075 : f32 = x_66.x_GlobalMipBias.x;
      let x_4076 : vec4<f32> = textureSampleBias(x_AdditionalLightsCookieAtlasTexture, sampler_AdditionalLightsCookieAtlasTexture, vec2<f32>(x_4072.x, x_4072.y), x_4075);
      u_xlat11 = x_4076;
      let x_4078 : bool = u_xlatb48.y;
      if (x_4078) {
        let x_4083 : f32 = u_xlat11.w;
        x_4079 = x_4083;
      } else {
        let x_4086 : f32 = u_xlat11.x;
        x_4079 = x_4086;
      }
      let x_4087 : f32 = x_4079;
      u_xlat71 = x_4087;
      let x_4089 : bool = u_xlatb48.x;
      if (x_4089) {
        let x_4093 : vec4<f32> = u_xlat11;
        x_4090 = vec3<f32>(x_4093.x, x_4093.y, x_4093.z);
      } else {
        let x_4096 : f32 = u_xlat71;
        x_4090 = vec3<f32>(x_4096, x_4096, x_4096);
      }
      let x_4098 : vec3<f32> = x_4090;
      let x_4099 : vec4<f32> = u_xlat11;
      u_xlat11 = vec4<f32>(x_4098.x, x_4098.y, x_4098.z, x_4099.w);
    } else {
      u_xlat11.x = 1.0f;
      u_xlat11.y = 1.0f;
      u_xlat11.z = 1.0f;
    }
    let x_4105 : vec4<f32> = u_xlat11;
    let x_4107 : u32 = u_xlatu3;
    let x_4110 : vec4<f32> = x_3612.x_AdditionalLightsColor[bitcast<i32>(x_4107)];
    let x_4112 : vec3<f32> = (vec3<f32>(x_4105.x, x_4105.y, x_4105.z) * vec3<f32>(x_4110.x, x_4110.y, x_4110.z));
    let x_4113 : vec4<f32> = u_xlat11;
    u_xlat11 = vec4<f32>(x_4112.x, x_4112.y, x_4112.z, x_4113.w);
    let x_4115 : vec3<f32> = u_xlat27;
    let x_4117 : vec4<f32> = u_xlat11;
    let x_4119 : vec3<f32> = (vec3<f32>(x_4115.x, x_4115.x, x_4115.x) * vec3<f32>(x_4117.x, x_4117.y, x_4117.z));
    let x_4120 : vec4<f32> = u_xlat11;
    u_xlat11 = vec4<f32>(x_4119.x, x_4119.y, x_4119.z, x_4120.w);
    let x_4122 : vec3<f32> = u_xlat24;
    let x_4123 : vec4<f32> = u_xlat10;
    u_xlat3.x = dot(x_4122, vec3<f32>(x_4123.x, x_4123.y, x_4123.z));
    let x_4128 : f32 = u_xlat3.x;
    u_xlat3.x = clamp(x_4128, 0.0f, 1.0f);
    let x_4132 : f32 = u_xlat3.x;
    let x_4133 : f32 = u_xlat67;
    u_xlat3.x = (x_4132 * x_4133);
    let x_4136 : vec4<f32> = u_xlat3;
    let x_4138 : vec4<f32> = u_xlat11;
    let x_4140 : vec3<f32> = (vec3<f32>(x_4136.x, x_4136.x, x_4136.x) * vec3<f32>(x_4138.x, x_4138.y, x_4138.z));
    let x_4141 : vec4<f32> = u_xlat11;
    u_xlat11 = vec4<f32>(x_4140.x, x_4140.y, x_4140.z, x_4141.w);
    let x_4143 : vec4<f32> = u_xlat9;
    let x_4145 : f32 = u_xlat70;
    let x_4148 : vec4<f32> = u_xlat5;
    let x_4150 : vec3<f32> = ((vec3<f32>(x_4143.x, x_4143.y, x_4143.z) * vec3<f32>(x_4145, x_4145, x_4145)) + vec3<f32>(x_4148.x, x_4148.y, x_4148.z));
    let x_4151 : vec4<f32> = u_xlat9;
    u_xlat9 = vec4<f32>(x_4150.x, x_4150.y, x_4150.z, x_4151.w);
    let x_4153 : vec4<f32> = u_xlat9;
    let x_4155 : vec4<f32> = u_xlat9;
    u_xlat3.x = dot(vec3<f32>(x_4153.x, x_4153.y, x_4153.z), vec3<f32>(x_4155.x, x_4155.y, x_4155.z));
    let x_4160 : f32 = u_xlat3.x;
    u_xlat3.x = max(x_4160, 1.17549435e-37f);
    let x_4164 : f32 = u_xlat3.x;
    u_xlat3.x = inverseSqrt(x_4164);
    let x_4167 : vec4<f32> = u_xlat3;
    let x_4169 : vec4<f32> = u_xlat9;
    let x_4171 : vec3<f32> = (vec3<f32>(x_4167.x, x_4167.x, x_4167.x) * vec3<f32>(x_4169.x, x_4169.y, x_4169.z));
    let x_4172 : vec4<f32> = u_xlat9;
    u_xlat9 = vec4<f32>(x_4171.x, x_4171.y, x_4171.z, x_4172.w);
    let x_4174 : vec3<f32> = u_xlat24;
    let x_4175 : vec4<f32> = u_xlat9;
    u_xlat3.x = dot(x_4174, vec3<f32>(x_4175.x, x_4175.y, x_4175.z));
    let x_4180 : f32 = u_xlat3.x;
    u_xlat3.x = clamp(x_4180, 0.0f, 1.0f);
    let x_4183 : vec4<f32> = u_xlat10;
    let x_4185 : vec4<f32> = u_xlat9;
    u_xlat67 = dot(vec3<f32>(x_4183.x, x_4183.y, x_4183.z), vec3<f32>(x_4185.x, x_4185.y, x_4185.z));
    let x_4188 : f32 = u_xlat67;
    u_xlat67 = clamp(x_4188, 0.0f, 1.0f);
    let x_4191 : f32 = u_xlat3.x;
    let x_4193 : f32 = u_xlat3.x;
    u_xlat3.x = (x_4191 * x_4193);
    let x_4197 : f32 = u_xlat3.x;
    let x_4199 : f32 = u_xlat22.x;
    u_xlat3.x = ((x_4197 * x_4199) + 1.000010014f);
    let x_4203 : f32 = u_xlat67;
    let x_4204 : f32 = u_xlat67;
    u_xlat67 = (x_4203 * x_4204);
    let x_4207 : f32 = u_xlat3.x;
    let x_4209 : f32 = u_xlat3.x;
    u_xlat3.x = (x_4207 * x_4209);
    let x_4212 : f32 = u_xlat67;
    u_xlat67 = max(x_4212, 0.100000001f);
    let x_4215 : f32 = u_xlat3.x;
    let x_4216 : f32 = u_xlat67;
    u_xlat3.x = (x_4215 * x_4216);
    let x_4219 : f32 = u_xlat68;
    let x_4221 : f32 = u_xlat3.x;
    u_xlat3.x = (x_4219 * x_4221);
    let x_4224 : f32 = u_xlat65;
    let x_4226 : f32 = u_xlat3.x;
    u_xlat3.x = (x_4224 / x_4226);
    let x_4229 : vec4<f32> = u_xlat3;
    let x_4232 : vec3<f32> = u_xlat2;
    let x_4233 : vec3<f32> = ((vec3<f32>(x_4229.x, x_4229.x, x_4229.x) * vec3<f32>(0.039999999f, 0.039999999f, 0.039999999f)) + x_4232);
    let x_4234 : vec4<f32> = u_xlat9;
    u_xlat9 = vec4<f32>(x_4233.x, x_4233.y, x_4233.z, x_4234.w);
    let x_4236 : vec4<f32> = u_xlat9;
    let x_4238 : vec4<f32> = u_xlat11;
    let x_4241 : vec4<f32> = u_xlat8;
    let x_4243 : vec3<f32> = ((vec3<f32>(x_4236.x, x_4236.y, x_4236.z) * vec3<f32>(x_4238.x, x_4238.y, x_4238.z)) + vec3<f32>(x_4241.x, x_4241.y, x_4241.z));
    let x_4244 : vec4<f32> = u_xlat8;
    u_xlat8 = vec4<f32>(x_4243.x, x_4243.y, x_4243.z, x_4244.w);

    continuing {
      let x_4246 : u32 = u_xlatu_loop_1;
      u_xlatu_loop_1 = (x_4246 + bitcast<u32>(1i));
    }
  }
  let x_4248 : vec4<f32> = u_xlat4;
  let x_4250 : vec4<f32> = u_xlat6;
  let x_4253 : vec4<f32> = u_xlat7;
  u_xlat2 = ((vec3<f32>(x_4248.x, x_4248.y, x_4248.z) * vec3<f32>(x_4250.x, x_4250.x, x_4250.x)) + vec3<f32>(x_4253.x, x_4253.y, x_4253.z));
  let x_4256 : vec4<f32> = u_xlat8;
  let x_4258 : vec3<f32> = u_xlat2;
  u_xlat2 = (vec3<f32>(x_4256.x, x_4256.y, x_4256.z) + x_4258);
  let x_4262 : vec4<f32> = vs_INTERP4;
  let x_4264 : vec3<f32> = u_xlat0;
  let x_4266 : vec3<f32> = u_xlat2;
  let x_4267 : vec3<f32> = ((vec3<f32>(x_4262.w, x_4262.w, x_4262.w) * x_4264) + x_4266);
  let x_4268 : vec4<f32> = SV_Target0;
  SV_Target0 = vec4<f32>(x_4267.x, x_4267.y, x_4267.z, x_4268.w);
  let x_4270 : bool = u_xlatb43;
  if (x_4270) {
    let x_4275 : f32 = u_xlat1.x;
    x_4271 = x_4275;
  } else {
    x_4271 = 1.0f;
  }
  let x_4277 : f32 = x_4271;
  SV_Target0.w = x_4277;
  let x_4283 : u32 = x_66.x_RenderingLayerMaxInt;
  let x_4285 : f32 = x_1592.unity_RenderingLayer.x;
  u_xlatu0 = (x_4283 & bitcast<u32>(x_4285));
  let x_4288 : u32 = u_xlatu0;
  u_xlat0.x = f32(x_4288);
  let x_4293 : f32 = u_xlat0.x;
  let x_4295 : f32 = x_66.x_RenderingLayerRcpMaxInt;
  SV_Target1.x = (x_4293 * x_4295);
  let x_4299 : f32 = SV_Target1.x;
  SV_Target1.x = clamp(x_4299, 0.0f, 1.0f);
  let x_4303 : vec4<f32> = SV_Target1;
  SV_Target1 = vec4<f32>(x_4303.x, vec3<f32>(0.0f, 0.0f, 0.0f).x, vec3<f32>(0.0f, 0.0f, 0.0f).y, vec3<f32>(0.0f, 0.0f, 0.0f).z);
  return;
}

struct main_out {
  @location(0)
  SV_Target0_1 : vec4<f32>,
  @location(1)
  SV_Target1_1 : vec4<f32>,
}

@fragment
fn main(@builtin(position) gl_FragCoord_param : vec4<f32>, @location(1) vs_INTERP1_param : vec3<f32>, @location(3) vs_INTERP3_param : vec4<f32>, @location(4) vs_INTERP4_param : vec4<f32>, @location(0) vs_INTERP0_param : vec3<f32>, @location(2) vs_INTERP2_param : vec4<f32>, @location(5) vs_INTERP5_param : vec2<f32>, @location(6) vs_INTERP9_param : vec4<f32>) -> main_out {
  gl_FragCoord = gl_FragCoord_param;
  vs_INTERP1 = vs_INTERP1_param;
  vs_INTERP3 = vs_INTERP3_param;
  vs_INTERP4 = vs_INTERP4_param;
  vs_INTERP0 = vs_INTERP0_param;
  vs_INTERP2 = vs_INTERP2_param;
  vs_INTERP5 = vs_INTERP5_param;
  vs_INTERP9 = vs_INTERP9_param;
  main_1();
  return main_out(SV_Target0, SV_Target1);
}

