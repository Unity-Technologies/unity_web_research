type Arr = array<vec4<f32>, 2u>;

struct UnityPerDraw {
  unity_ObjectToWorld : mat4x4<f32>,
  unity_WorldToObject : mat4x4<f32>,
  unity_LODFade : vec4<f32>,
  unity_WorldTransformParams : vec4<f32>,
  unity_RenderingLayer : vec4<f32>,
  unity_LightData : vec4<f32>,
  unity_LightIndices : Arr,
  unity_ProbesOcclusion : vec4<f32>,
  unity_SpecCube0_HDR : vec4<f32>,
  unity_SpecCube1_HDR : vec4<f32>,
  unity_SpecCube0_BoxMax : vec4<f32>,
  unity_SpecCube0_BoxMin : vec4<f32>,
  unity_SpecCube0_ProbePosition : vec4<f32>,
  unity_SpecCube1_BoxMax : vec4<f32>,
  unity_SpecCube1_BoxMin : vec4<f32>,
  unity_SpecCube1_ProbePosition : vec4<f32>,
  unity_LightmapST : vec4<f32>,
  unity_DynamicLightmapST : vec4<f32>,
  unity_SHAr : vec4<f32>,
  unity_SHAg : vec4<f32>,
  unity_SHAb : vec4<f32>,
  unity_SHBr : vec4<f32>,
  unity_SHBg : vec4<f32>,
  unity_SHBb : vec4<f32>,
  unity_SHC : vec4<f32>,
  unity_RendererBounds_Min : vec4<f32>,
  unity_RendererBounds_Max : vec4<f32>,
  unity_MatrixPreviousM : mat4x4<f32>,
  unity_MatrixPreviousMI : mat4x4<f32>,
  unity_MotionVectorsParams : vec4<f32>,
  unity_SpriteColor : vec4<f32>,
  unity_SpriteProps : vec4<f32>,
}

struct PGlobals {
  x_ScaledScreenParams : vec4<f32>,
  x_GlobalMipBias : vec2<f32>,
  x_AlphaToMaskAvailable : f32,
  @size(4)
  padding : u32,
  x_MainLightPosition : vec4<f32>,
  x_MainLightColor : vec4<f32>,
  x_AmbientOcclusionParam : vec4<f32>,
  x_AdditionalLightsCount : vec4<f32>,
  x_RenderingLayerMaxInt : u32,
  x_RenderingLayerRcpMaxInt : f32,
  @size(8)
  padding_1 : u32,
  x_WorldSpaceCameraPos : vec3<f32>,
  @size(4)
  padding_2 : u32,
  unity_OrthoParams : vec4<f32>,
  x_ScaleBiasRt : vec4<f32>,
  unity_MatrixV : mat4x4<f32>,
}

struct UnityPerMaterial {
  Texture2D_B222E8F_TexelSize : vec4<f32>,
  Color_C30C7CA3 : vec4<f32>,
  Texture2D_D9BFD5F1_TexelSize : vec4<f32>,
}

type Arr_1 = array<mat4x4<f32>, 5u>;

struct MainLightShadows {
  x_MainLightWorldToShadow : Arr_1,
  x_CascadeShadowSplitSpheres0 : vec4<f32>,
  x_CascadeShadowSplitSpheres1 : vec4<f32>,
  x_CascadeShadowSplitSpheres2 : vec4<f32>,
  x_CascadeShadowSplitSpheres3 : vec4<f32>,
  x_CascadeShadowSplitSphereRadii : vec4<f32>,
  x_MainLightShadowOffset0 : vec4<f32>,
  x_MainLightShadowOffset1 : vec4<f32>,
  x_MainLightShadowParams : vec4<f32>,
  x_MainLightShadowmapSize : vec4<f32>,
}

struct strided_arr {
  @size(16)
  el : f32,
}

type Arr_2 = array<strided_arr, 8u>;

struct LightCookies {
  x_MainLightWorldToLight : mat4x4<f32>,
  x_AdditionalLightsCookieEnableBits : Arr_2,
  x_MainLightCookieTextureFormat : f32,
  x_AdditionalLightsCookieAtlasTextureFormat : f32,
}

type Arr_3 = array<vec4<f32>, 256u>;

type Arr_4 = array<vec4<f32>, 256u>;

type Arr_5 = array<vec4<f32>, 256u>;

type Arr_6 = array<vec4<f32>, 256u>;

type Arr_7 = array<vec4<f32>, 256u>;

struct strided_arr_1 {
  @size(16)
  el : f32,
}

type Arr_8 = array<strided_arr_1, 256u>;

type Arr_9 = array<vec4<f32>, 256u>;

type Arr_10 = array<strided_arr_1, 256u>;

struct AdditionalLights {
  x_AdditionalLightsPosition : Arr_9,
  x_AdditionalLightsColor : Arr_9,
  x_AdditionalLightsAttenuation : Arr_9,
  x_AdditionalLightsSpotDir : Arr_9,
  x_AdditionalLightsOcclusionProbes : Arr_9,
  x_AdditionalLightsLayerMasks : Arr_10,
}

type Arr_11 = array<mat4x4<f32>, 256u>;

struct AdditionalLightsCookies {
  x_AdditionalLightsWorldToLights : Arr_11,
  x_AdditionalLightsCookieAtlasUVRects : Arr_9,
  x_AdditionalLightsLightTypes : Arr_10,
}

var<private> gl_FragCoord : vec4<f32>;

var<private> vs_INTERP1 : vec3<f32>;

var<private> vs_INTERP2 : vec4<f32>;

@group(1) @binding(2) var<uniform> x_60 : UnityPerDraw;

@group(0) @binding(6) var Texture2D_B222E8F : texture_2d<f32>;

@group(0) @binding(14) var samplerTexture2D_B222E8F : sampler;

var<private> vs_INTERP3 : vec4<f32>;

@group(1) @binding(0) var<uniform> x_139 : PGlobals;

@group(1) @binding(6) var<uniform> x_149 : UnityPerMaterial;

@group(0) @binding(7) var Texture2D_D9BFD5F1 : texture_2d<f32>;

@group(0) @binding(15) var samplerTexture2D_D9BFD5F1 : sampler;

var<private> vs_INTERP4 : vec4<f32>;

var<private> vs_INTERP0 : vec3<f32>;

@group(1) @binding(3) var<uniform> x_253 : MainLightShadows;

@group(0) @binding(3) var x_MainLightShadowmapTexture : texture_depth_2d;

@group(0) @binding(11) var sampler_MainLightShadowmapTexture : sampler_comparison;

@group(0) @binding(1) var unity_Lightmap : texture_2d<f32>;

@group(0) @binding(9) var samplerunity_Lightmap : sampler;

var<private> vs_INTERP5 : vec2<f32>;

@group(0) @binding(2) var x_ScreenSpaceOcclusionTexture : texture_2d<f32>;

@group(0) @binding(10) var sampler_ScreenSpaceOcclusionTexture : sampler;

@group(1) @binding(4) var<uniform> x_3297 : LightCookies;

@group(0) @binding(4) var x_MainLightCookieTexture : texture_2d<f32>;

@group(0) @binding(12) var sampler_MainLightCookieTexture : sampler;

@group(0) @binding(0) var unity_SpecCube0 : texture_cube<f32>;

@group(0) @binding(8) var samplerunity_SpecCube0 : sampler;

@group(1) @binding(1) var<uniform> x_3781 : AdditionalLights;

@group(1) @binding(5) var<uniform> x_3890 : AdditionalLightsCookies;

@group(0) @binding(5) var x_AdditionalLightsCookieAtlasTexture : texture_2d<f32>;

@group(0) @binding(13) var sampler_AdditionalLightsCookieAtlasTexture : sampler;

var<private> SV_Target0 : vec4<f32>;

var<private> SV_Target1 : vec4<f32>;

fn main_1() {
  var hlslcc_FragCoord : vec4<f32>;
  var u_xlat0 : vec3<f32>;
  var u_xlatb22 : vec2<bool>;
  var u_xlat22 : vec3<f32>;
  var u_xlat1 : vec3<f32>;
  var u_xlat2 : vec4<f32>;
  var u_xlat3 : vec4<f32>;
  var u_xlat4 : vec4<f32>;
  var u_xlat5 : vec3<f32>;
  var u_xlat6 : vec4<f32>;
  var u_xlat7 : vec4<f32>;
  var u_xlat28 : vec3<f32>;
  var u_xlat8 : vec4<f32>;
  var u_xlatb2 : vec4<bool>;
  var u_xlatu0 : u32;
  var u_xlati0 : i32;
  var u_xlatb0 : bool;
  var u_xlatb67 : bool;
  var txVec0 : vec3<f32>;
  var txVec1 : vec3<f32>;
  var txVec2 : vec3<f32>;
  var txVec3 : vec3<f32>;
  var u_xlat67 : f32;
  var u_xlatb68 : bool;
  var u_xlat47 : vec2<f32>;
  var u_xlat52 : vec2<f32>;
  var u_xlat9 : vec4<f32>;
  var u_xlat10 : vec4<f32>;
  var u_xlat11 : vec4<f32>;
  var u_xlat12 : vec4<f32>;
  var u_xlat13 : vec4<f32>;
  var u_xlat14 : vec4<f32>;
  var u_xlat68 : f32;
  var txVec4 : vec3<f32>;
  var txVec5 : vec3<f32>;
  var u_xlat25 : vec3<f32>;
  var txVec6 : vec3<f32>;
  var txVec7 : vec3<f32>;
  var txVec8 : vec3<f32>;
  var txVec9 : vec3<f32>;
  var txVec10 : vec3<f32>;
  var txVec11 : vec3<f32>;
  var txVec12 : vec3<f32>;
  var u_xlat29 : vec3<f32>;
  var u_xlat15 : vec4<f32>;
  var u_xlat16 : vec4<f32>;
  var u_xlat30 : vec2<f32>;
  var u_xlat58 : vec2<f32>;
  var u_xlat53 : vec2<f32>;
  var u_xlat17 : vec4<f32>;
  var u_xlat18 : vec4<f32>;
  var u_xlat19 : vec4<f32>;
  var txVec13 : vec3<f32>;
  var txVec14 : vec3<f32>;
  var u_xlat71 : f32;
  var txVec15 : vec3<f32>;
  var txVec16 : vec3<f32>;
  var txVec17 : vec3<f32>;
  var txVec18 : vec3<f32>;
  var txVec19 : vec3<f32>;
  var txVec20 : vec3<f32>;
  var txVec21 : vec3<f32>;
  var txVec22 : vec3<f32>;
  var txVec23 : vec3<f32>;
  var txVec24 : vec3<f32>;
  var txVec25 : vec3<f32>;
  var txVec26 : vec3<f32>;
  var txVec27 : vec3<f32>;
  var txVec28 : vec3<f32>;
  var txVec29 : vec3<f32>;
  var u_xlatb3 : bool;
  var u_xlatb25 : vec3<bool>;
  var u_xlat23 : vec3<f32>;
  var x_1778 : f32;
  var u_xlat69 : f32;
  var u_xlatb47 : bool;
  var x_1829 : f32;
  var x_1912 : f32;
  var x_1925 : f32;
  var x_1937 : f32;
  var u_xlat70 : f32;
  var u_xlat50 : f32;
  var txVec30 : vec3<f32>;
  var txVec31 : vec3<f32>;
  var txVec32 : vec3<f32>;
  var txVec33 : vec3<f32>;
  var u_xlatb72 : bool;
  var u_xlat54 : vec2<f32>;
  var u_xlat72 : f32;
  var txVec34 : vec3<f32>;
  var u_xlat73 : f32;
  var txVec35 : vec3<f32>;
  var txVec36 : vec3<f32>;
  var txVec37 : vec3<f32>;
  var txVec38 : vec3<f32>;
  var txVec39 : vec3<f32>;
  var txVec40 : vec3<f32>;
  var txVec41 : vec3<f32>;
  var txVec42 : vec3<f32>;
  var u_xlat31 : vec3<f32>;
  var u_xlat32 : vec2<f32>;
  var u_xlat60 : vec2<f32>;
  var u_xlat55 : vec2<f32>;
  var u_xlat20 : vec4<f32>;
  var u_xlat21 : vec4<f32>;
  var txVec43 : vec3<f32>;
  var txVec44 : vec3<f32>;
  var txVec45 : vec3<f32>;
  var txVec46 : vec3<f32>;
  var txVec47 : vec3<f32>;
  var txVec48 : vec3<f32>;
  var txVec49 : vec3<f32>;
  var txVec50 : vec3<f32>;
  var txVec51 : vec3<f32>;
  var txVec52 : vec3<f32>;
  var txVec53 : vec3<f32>;
  var txVec54 : vec3<f32>;
  var txVec55 : vec3<f32>;
  var txVec56 : vec3<f32>;
  var txVec57 : vec3<f32>;
  var txVec58 : vec3<f32>;
  var txVec59 : vec3<f32>;
  var x_3246 : f32;
  var u_xlat24 : f32;
  var u_xlatb8 : vec2<bool>;
  var x_3380 : f32;
  var x_3391 : vec3<f32>;
  var u_xlatu_loop_1 : u32;
  var u_xlatu71 : u32;
  var u_xlati72 : i32;
  var indexable : array<vec4<u32>, 4u>;
  var u_xlat74 : f32;
  var u_xlatu74 : u32;
  var u_xlati75 : i32;
  var u_xlati74 : i32;
  var u_xlati76 : i32;
  var u_xlatb74 : bool;
  var u_xlatb55 : vec2<bool>;
  var x_4182 : f32;
  var x_4195 : f32;
  var x_4247 : f32;
  var x_4258 : vec3<f32>;
  var u_xlat_precise_vec4 : vec4<f32>;
  var u_xlat_precise_ivec4 : vec4<i32>;
  var u_xlat_precise_bvec4 : vec4<bool>;
  var u_xlat_precise_uvec4 : vec4<u32>;
  let x_13 : vec4<f32> = gl_FragCoord;
  let x_14 : vec3<f32> = vec3<f32>(x_13.x, x_13.y, x_13.z);
  let x_20 : f32 = gl_FragCoord.w;
  hlslcc_FragCoord = vec4<f32>(x_14.x, x_14.y, x_14.z, (1.0f / x_20));
  let x_30 : vec3<f32> = vs_INTERP1;
  let x_31 : vec3<f32> = vs_INTERP1;
  u_xlat0.x = dot(x_30, x_31);
  let x_37 : f32 = u_xlat0.x;
  u_xlat0.x = sqrt(x_37);
  let x_41 : f32 = u_xlat0.x;
  u_xlat0.x = (1.0f / x_41);
  let x_51 : f32 = vs_INTERP2.w;
  u_xlatb22.x = (0.0f < x_51);
  let x_65 : f32 = x_60.unity_WorldTransformParams.w;
  u_xlatb22.y = (x_65 >= 0.0f);
  let x_71 : bool = u_xlatb22.x;
  u_xlat22.x = select(-1.0f, 1.0f, x_71);
  let x_76 : bool = u_xlatb22.y;
  u_xlat22.y = select(-1.0f, 1.0f, x_76);
  let x_80 : f32 = u_xlat22.y;
  let x_82 : f32 = u_xlat22.x;
  u_xlat22.x = (x_80 * x_82);
  let x_86 : vec3<f32> = vs_INTERP1;
  let x_88 : vec4<f32> = vs_INTERP2;
  u_xlat1 = (vec3<f32>(x_86.z, x_86.x, x_86.y) * vec3<f32>(x_88.y, x_88.z, x_88.x));
  let x_91 : vec3<f32> = vs_INTERP1;
  let x_93 : vec4<f32> = vs_INTERP2;
  let x_96 : vec3<f32> = u_xlat1;
  u_xlat1 = ((vec3<f32>(x_91.y, x_91.z, x_91.x) * vec3<f32>(x_93.z, x_93.x, x_93.y)) + -(x_96));
  let x_99 : vec3<f32> = u_xlat22;
  let x_101 : vec3<f32> = u_xlat1;
  u_xlat22 = (vec3<f32>(x_99.x, x_99.x, x_99.x) * x_101);
  let x_103 : vec3<f32> = u_xlat0;
  let x_105 : vec3<f32> = vs_INTERP1;
  u_xlat1 = (vec3<f32>(x_103.x, x_103.x, x_103.x) * x_105);
  let x_108 : vec3<f32> = u_xlat0;
  let x_110 : vec4<f32> = vs_INTERP2;
  let x_112 : vec3<f32> = (vec3<f32>(x_108.x, x_108.x, x_108.x) * vec3<f32>(x_110.x, x_110.y, x_110.z));
  let x_113 : vec4<f32> = u_xlat2;
  u_xlat2 = vec4<f32>(x_112.x, x_112.y, x_112.z, x_113.w);
  let x_116 : vec3<f32> = u_xlat22;
  let x_117 : vec3<f32> = u_xlat0;
  let x_119 : vec3<f32> = (x_116 * vec3<f32>(x_117.x, x_117.x, x_117.x));
  let x_120 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_119.x, x_119.y, x_119.z, x_120.w);
  let x_135 : vec4<f32> = vs_INTERP3;
  let x_142 : f32 = x_139.x_GlobalMipBias.x;
  let x_143 : vec4<f32> = textureSampleBias(Texture2D_B222E8F, samplerTexture2D_B222E8F, vec2<f32>(x_135.x, x_135.y), x_142);
  u_xlat4 = x_143;
  let x_145 : vec4<f32> = u_xlat4;
  let x_152 : vec4<f32> = x_149.Color_C30C7CA3;
  u_xlat5 = (vec3<f32>(x_145.x, x_145.y, x_145.z) * vec3<f32>(x_152.x, x_152.y, x_152.z));
  let x_161 : vec4<f32> = vs_INTERP3;
  let x_164 : f32 = x_139.x_GlobalMipBias.x;
  let x_165 : vec4<f32> = textureSampleBias(Texture2D_D9BFD5F1, samplerTexture2D_D9BFD5F1, vec2<f32>(x_161.x, x_161.y), x_164);
  u_xlat6 = vec4<f32>(x_165.w, x_165.x, x_165.y, x_165.z);
  let x_168 : vec4<f32> = u_xlat6;
  u_xlat7 = ((vec4<f32>(x_168.y, x_168.z, x_168.w, x_168.x) * vec4<f32>(2.0f, 2.0f, 2.0f, 2.0f)) + vec4<f32>(-1.0f, -1.0f, -1.0f, -1.0f));
  let x_175 : vec4<f32> = u_xlat7;
  let x_176 : vec4<f32> = u_xlat7;
  u_xlat0.x = dot(x_175, x_176);
  let x_180 : f32 = u_xlat0.x;
  u_xlat0.x = inverseSqrt(x_180);
  let x_184 : vec3<f32> = u_xlat0;
  let x_186 : vec4<f32> = u_xlat7;
  u_xlat28 = (vec3<f32>(x_184.x, x_184.x, x_184.x) * vec3<f32>(x_186.x, x_186.y, x_186.z));
  let x_191 : f32 = vs_INTERP4.y;
  u_xlat0.x = (x_191 * 200.0f);
  let x_196 : f32 = u_xlat0.x;
  u_xlat0.x = min(x_196, 1.0f);
  let x_199 : vec3<f32> = u_xlat0;
  let x_201 : vec4<f32> = u_xlat4;
  let x_203 : vec3<f32> = (vec3<f32>(x_199.x, x_199.x, x_199.x) * vec3<f32>(x_201.x, x_201.y, x_201.z));
  let x_204 : vec4<f32> = u_xlat4;
  u_xlat4 = vec4<f32>(x_203.x, x_203.y, x_203.z, x_204.w);
  let x_206 : vec4<f32> = u_xlat3;
  let x_208 : vec3<f32> = u_xlat28;
  let x_210 : vec3<f32> = (vec3<f32>(x_206.x, x_206.y, x_206.z) * vec3<f32>(x_208.y, x_208.y, x_208.y));
  let x_211 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_210.x, x_210.y, x_210.z, x_211.w);
  let x_213 : vec3<f32> = u_xlat28;
  let x_215 : vec4<f32> = u_xlat2;
  let x_218 : vec4<f32> = u_xlat3;
  let x_220 : vec3<f32> = ((vec3<f32>(x_213.x, x_213.x, x_213.x) * vec3<f32>(x_215.x, x_215.y, x_215.z)) + vec3<f32>(x_218.x, x_218.y, x_218.z));
  let x_221 : vec4<f32> = u_xlat2;
  u_xlat2 = vec4<f32>(x_220.x, x_220.y, x_220.z, x_221.w);
  let x_223 : vec3<f32> = u_xlat28;
  let x_225 : vec3<f32> = u_xlat1;
  let x_227 : vec4<f32> = u_xlat2;
  u_xlat1 = ((vec3<f32>(x_223.z, x_223.z, x_223.z) * x_225) + vec3<f32>(x_227.x, x_227.y, x_227.z));
  let x_230 : vec3<f32> = u_xlat1;
  let x_231 : vec3<f32> = u_xlat1;
  u_xlat0.x = dot(x_230, x_231);
  let x_235 : f32 = u_xlat0.x;
  u_xlat0.x = max(x_235, 1.17549435e-37f);
  let x_240 : f32 = u_xlat0.x;
  u_xlat0.x = inverseSqrt(x_240);
  let x_243 : vec3<f32> = u_xlat0;
  let x_245 : vec3<f32> = u_xlat1;
  u_xlat1 = (vec3<f32>(x_243.x, x_243.x, x_243.x) * x_245);
  let x_248 : vec3<f32> = vs_INTERP0;
  let x_255 : vec4<f32> = x_253.x_CascadeShadowSplitSpheres0;
  let x_258 : vec3<f32> = (x_248 + -(vec3<f32>(x_255.x, x_255.y, x_255.z)));
  let x_259 : vec4<f32> = u_xlat2;
  u_xlat2 = vec4<f32>(x_258.x, x_258.y, x_258.z, x_259.w);
  let x_261 : vec3<f32> = vs_INTERP0;
  let x_264 : vec4<f32> = x_253.x_CascadeShadowSplitSpheres1;
  let x_267 : vec3<f32> = (x_261 + -(vec3<f32>(x_264.x, x_264.y, x_264.z)));
  let x_268 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_267.x, x_267.y, x_267.z, x_268.w);
  let x_270 : vec3<f32> = vs_INTERP0;
  let x_272 : vec4<f32> = x_253.x_CascadeShadowSplitSpheres2;
  let x_275 : vec3<f32> = (x_270 + -(vec3<f32>(x_272.x, x_272.y, x_272.z)));
  let x_276 : vec4<f32> = u_xlat7;
  u_xlat7 = vec4<f32>(x_275.x, x_275.y, x_275.z, x_276.w);
  let x_279 : vec3<f32> = vs_INTERP0;
  let x_282 : vec4<f32> = x_253.x_CascadeShadowSplitSpheres3;
  let x_285 : vec3<f32> = (x_279 + -(vec3<f32>(x_282.x, x_282.y, x_282.z)));
  let x_286 : vec4<f32> = u_xlat8;
  u_xlat8 = vec4<f32>(x_285.x, x_285.y, x_285.z, x_286.w);
  let x_288 : vec4<f32> = u_xlat2;
  let x_290 : vec4<f32> = u_xlat2;
  u_xlat2.x = dot(vec3<f32>(x_288.x, x_288.y, x_288.z), vec3<f32>(x_290.x, x_290.y, x_290.z));
  let x_294 : vec4<f32> = u_xlat3;
  let x_296 : vec4<f32> = u_xlat3;
  u_xlat2.y = dot(vec3<f32>(x_294.x, x_294.y, x_294.z), vec3<f32>(x_296.x, x_296.y, x_296.z));
  let x_300 : vec4<f32> = u_xlat7;
  let x_302 : vec4<f32> = u_xlat7;
  u_xlat2.z = dot(vec3<f32>(x_300.x, x_300.y, x_300.z), vec3<f32>(x_302.x, x_302.y, x_302.z));
  let x_306 : vec4<f32> = u_xlat8;
  let x_308 : vec4<f32> = u_xlat8;
  u_xlat2.w = dot(vec3<f32>(x_306.x, x_306.y, x_306.z), vec3<f32>(x_308.x, x_308.y, x_308.z));
  let x_315 : vec4<f32> = u_xlat2;
  let x_318 : vec4<f32> = x_253.x_CascadeShadowSplitSphereRadii;
  u_xlatb2 = (x_315 < x_318);
  let x_321 : bool = u_xlatb2.x;
  u_xlat3.x = select(0.0f, 1.0f, x_321);
  let x_325 : bool = u_xlatb2.y;
  u_xlat3.y = select(0.0f, 1.0f, x_325);
  let x_329 : bool = u_xlatb2.z;
  u_xlat3.z = select(0.0f, 1.0f, x_329);
  let x_333 : bool = u_xlatb2.w;
  u_xlat3.w = select(0.0f, 1.0f, x_333);
  let x_337 : bool = u_xlatb2.x;
  u_xlat2.x = select(-0.0f, -1.0f, x_337);
  let x_342 : bool = u_xlatb2.y;
  u_xlat2.y = select(-0.0f, -1.0f, x_342);
  let x_346 : bool = u_xlatb2.z;
  u_xlat2.z = select(-0.0f, -1.0f, x_346);
  let x_349 : vec4<f32> = u_xlat2;
  let x_351 : vec4<f32> = u_xlat3;
  let x_353 : vec3<f32> = (vec3<f32>(x_349.x, x_349.y, x_349.z) + vec3<f32>(x_351.y, x_351.z, x_351.w));
  let x_354 : vec4<f32> = u_xlat2;
  u_xlat2 = vec4<f32>(x_353.x, x_353.y, x_353.z, x_354.w);
  let x_356 : vec4<f32> = u_xlat2;
  let x_359 : vec3<f32> = max(vec3<f32>(x_356.x, x_356.y, x_356.z), vec3<f32>(0.0f, 0.0f, 0.0f));
  let x_360 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_360.x, x_359.x, x_359.y, x_359.z);
  let x_362 : vec4<f32> = u_xlat3;
  u_xlat0.x = dot(x_362, vec4<f32>(4.0f, 3.0f, 2.0f, 1.0f));
  let x_369 : f32 = u_xlat0.x;
  u_xlat0.x = (-(x_369) + 4.0f);
  let x_376 : f32 = u_xlat0.x;
  u_xlatu0 = u32(x_376);
  let x_380 : u32 = u_xlatu0;
  u_xlati0 = (bitcast<i32>(x_380) << bitcast<u32>(2i));
  let x_383 : vec3<f32> = vs_INTERP0;
  let x_386 : i32 = u_xlati0;
  let x_389 : i32 = u_xlati0;
  let x_393 : vec4<f32> = x_253.x_MainLightWorldToShadow[((x_386 + 1i) / 4i)][((x_389 + 1i) % 4i)];
  let x_395 : vec3<f32> = (vec3<f32>(x_383.y, x_383.y, x_383.y) * vec3<f32>(x_393.x, x_393.y, x_393.z));
  let x_396 : vec4<f32> = u_xlat2;
  u_xlat2 = vec4<f32>(x_395.x, x_395.y, x_395.z, x_396.w);
  let x_398 : i32 = u_xlati0;
  let x_400 : i32 = u_xlati0;
  let x_403 : vec4<f32> = x_253.x_MainLightWorldToShadow[(x_398 / 4i)][(x_400 % 4i)];
  let x_405 : vec3<f32> = vs_INTERP0;
  let x_408 : vec4<f32> = u_xlat2;
  let x_410 : vec3<f32> = ((vec3<f32>(x_403.x, x_403.y, x_403.z) * vec3<f32>(x_405.x, x_405.x, x_405.x)) + vec3<f32>(x_408.x, x_408.y, x_408.z));
  let x_411 : vec4<f32> = u_xlat2;
  u_xlat2 = vec4<f32>(x_410.x, x_410.y, x_410.z, x_411.w);
  let x_413 : i32 = u_xlati0;
  let x_416 : i32 = u_xlati0;
  let x_420 : vec4<f32> = x_253.x_MainLightWorldToShadow[((x_413 + 2i) / 4i)][((x_416 + 2i) % 4i)];
  let x_422 : vec3<f32> = vs_INTERP0;
  let x_425 : vec4<f32> = u_xlat2;
  let x_427 : vec3<f32> = ((vec3<f32>(x_420.x, x_420.y, x_420.z) * vec3<f32>(x_422.z, x_422.z, x_422.z)) + vec3<f32>(x_425.x, x_425.y, x_425.z));
  let x_428 : vec4<f32> = u_xlat2;
  u_xlat2 = vec4<f32>(x_427.x, x_427.y, x_427.z, x_428.w);
  let x_430 : vec4<f32> = u_xlat2;
  let x_432 : i32 = u_xlati0;
  let x_435 : i32 = u_xlati0;
  let x_439 : vec4<f32> = x_253.x_MainLightWorldToShadow[((x_432 + 3i) / 4i)][((x_435 + 3i) % 4i)];
  let x_441 : vec3<f32> = (vec3<f32>(x_430.x, x_430.y, x_430.z) + vec3<f32>(x_439.x, x_439.y, x_439.z));
  let x_442 : vec4<f32> = u_xlat2;
  u_xlat2 = vec4<f32>(x_441.x, x_441.y, x_441.z, x_442.w);
  let x_447 : f32 = x_253.x_MainLightShadowParams.y;
  u_xlatb0 = (0.0f < x_447);
  let x_449 : bool = u_xlatb0;
  if (x_449) {
    let x_454 : f32 = x_253.x_MainLightShadowParams.y;
    u_xlatb67 = (x_454 == 1.0f);
    let x_456 : bool = u_xlatb67;
    if (x_456) {
      let x_459 : vec4<f32> = u_xlat2;
      let x_463 : vec4<f32> = x_253.x_MainLightShadowOffset0;
      u_xlat3 = (vec4<f32>(x_459.x, x_459.y, x_459.x, x_459.y) + x_463);
      let x_466 : vec4<f32> = u_xlat3;
      let x_467 : vec2<f32> = vec2<f32>(x_466.x, x_466.y);
      let x_469 : f32 = u_xlat2.z;
      txVec0 = vec3<f32>(x_467.x, x_467.y, x_469);
      let x_481 : vec3<f32> = txVec0;
      let x_483 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_481.xy, x_481.z);
      u_xlat7.x = x_483;
      let x_486 : vec4<f32> = u_xlat3;
      let x_487 : vec2<f32> = vec2<f32>(x_486.z, x_486.w);
      let x_489 : f32 = u_xlat2.z;
      txVec1 = vec3<f32>(x_487.x, x_487.y, x_489);
      let x_496 : vec3<f32> = txVec1;
      let x_498 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_496.xy, x_496.z);
      u_xlat7.y = x_498;
      let x_500 : vec4<f32> = u_xlat2;
      let x_504 : vec4<f32> = x_253.x_MainLightShadowOffset1;
      u_xlat3 = (vec4<f32>(x_500.x, x_500.y, x_500.x, x_500.y) + x_504);
      let x_507 : vec4<f32> = u_xlat3;
      let x_508 : vec2<f32> = vec2<f32>(x_507.x, x_507.y);
      let x_510 : f32 = u_xlat2.z;
      txVec2 = vec3<f32>(x_508.x, x_508.y, x_510);
      let x_517 : vec3<f32> = txVec2;
      let x_519 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_517.xy, x_517.z);
      u_xlat7.z = x_519;
      let x_522 : vec4<f32> = u_xlat3;
      let x_523 : vec2<f32> = vec2<f32>(x_522.z, x_522.w);
      let x_525 : f32 = u_xlat2.z;
      txVec3 = vec3<f32>(x_523.x, x_523.y, x_525);
      let x_532 : vec3<f32> = txVec3;
      let x_534 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_532.xy, x_532.z);
      u_xlat7.w = x_534;
      let x_537 : vec4<f32> = u_xlat7;
      u_xlat67 = dot(x_537, vec4<f32>(0.25f, 0.25f, 0.25f, 0.25f));
    } else {
      let x_544 : f32 = x_253.x_MainLightShadowParams.y;
      u_xlatb68 = (x_544 == 2.0f);
      let x_546 : bool = u_xlatb68;
      if (x_546) {
        let x_549 : vec4<f32> = u_xlat2;
        let x_553 : vec4<f32> = x_253.x_MainLightShadowmapSize;
        let x_558 : vec2<f32> = ((vec2<f32>(x_549.x, x_549.y) * vec2<f32>(x_553.z, x_553.w)) + vec2<f32>(0.5f, 0.5f));
        let x_559 : vec4<f32> = u_xlat3;
        u_xlat3 = vec4<f32>(x_558.x, x_558.y, x_559.z, x_559.w);
        let x_561 : vec4<f32> = u_xlat3;
        let x_563 : vec2<f32> = floor(vec2<f32>(x_561.x, x_561.y));
        let x_564 : vec4<f32> = u_xlat3;
        u_xlat3 = vec4<f32>(x_563.x, x_563.y, x_564.z, x_564.w);
        let x_568 : vec4<f32> = u_xlat2;
        let x_571 : vec4<f32> = x_253.x_MainLightShadowmapSize;
        let x_574 : vec4<f32> = u_xlat3;
        u_xlat47 = ((vec2<f32>(x_568.x, x_568.y) * vec2<f32>(x_571.z, x_571.w)) + -(vec2<f32>(x_574.x, x_574.y)));
        let x_578 : vec2<f32> = u_xlat47;
        u_xlat7 = (vec4<f32>(x_578.x, x_578.x, x_578.y, x_578.y) + vec4<f32>(0.5f, 1.0f, 0.5f, 1.0f));
        let x_582 : vec4<f32> = u_xlat7;
        let x_584 : vec4<f32> = u_xlat7;
        u_xlat8 = (vec4<f32>(x_582.x, x_582.x, x_582.z, x_582.z) * vec4<f32>(x_584.x, x_584.x, x_584.z, x_584.z));
        let x_587 : vec4<f32> = u_xlat8;
        let x_591 : vec2<f32> = (vec2<f32>(x_587.y, x_587.w) * vec2<f32>(0.079999998f, 0.079999998f));
        let x_592 : vec4<f32> = u_xlat7;
        u_xlat7 = vec4<f32>(x_591.x, x_592.y, x_591.y, x_592.w);
        let x_594 : vec4<f32> = u_xlat8;
        let x_597 : vec2<f32> = u_xlat47;
        let x_599 : vec2<f32> = ((vec2<f32>(x_594.x, x_594.z) * vec2<f32>(0.5f, 0.5f)) + -(x_597));
        let x_600 : vec4<f32> = u_xlat8;
        u_xlat8 = vec4<f32>(x_599.x, x_599.y, x_600.z, x_600.w);
        let x_603 : vec2<f32> = u_xlat47;
        u_xlat52 = (-(x_603) + vec2<f32>(1.0f, 1.0f));
        let x_608 : vec2<f32> = u_xlat47;
        let x_610 : vec2<f32> = min(x_608, vec2<f32>(0.0f, 0.0f));
        let x_611 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_610.x, x_610.y, x_611.z, x_611.w);
        let x_613 : vec4<f32> = u_xlat9;
        let x_616 : vec4<f32> = u_xlat9;
        let x_619 : vec2<f32> = u_xlat52;
        let x_620 : vec2<f32> = ((-(vec2<f32>(x_613.x, x_613.y)) * vec2<f32>(x_616.x, x_616.y)) + x_619);
        let x_621 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_620.x, x_620.y, x_621.z, x_621.w);
        let x_623 : vec2<f32> = u_xlat47;
        u_xlat47 = max(x_623, vec2<f32>(0.0f, 0.0f));
        let x_625 : vec2<f32> = u_xlat47;
        let x_627 : vec2<f32> = u_xlat47;
        let x_629 : vec4<f32> = u_xlat7;
        u_xlat47 = ((-(x_625) * x_627) + vec2<f32>(x_629.y, x_629.w));
        let x_632 : vec4<f32> = u_xlat9;
        let x_634 : vec2<f32> = (vec2<f32>(x_632.x, x_632.y) + vec2<f32>(1.0f, 1.0f));
        let x_635 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_634.x, x_634.y, x_635.z, x_635.w);
        let x_637 : vec2<f32> = u_xlat47;
        u_xlat47 = (x_637 + vec2<f32>(1.0f, 1.0f));
        let x_640 : vec4<f32> = u_xlat8;
        let x_644 : vec2<f32> = (vec2<f32>(x_640.x, x_640.y) * vec2<f32>(0.159999996f, 0.159999996f));
        let x_645 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_644.x, x_644.y, x_645.z, x_645.w);
        let x_647 : vec2<f32> = u_xlat52;
        let x_648 : vec2<f32> = (x_647 * vec2<f32>(0.159999996f, 0.159999996f));
        let x_649 : vec4<f32> = u_xlat8;
        u_xlat8 = vec4<f32>(x_648.x, x_648.y, x_649.z, x_649.w);
        let x_651 : vec4<f32> = u_xlat9;
        let x_653 : vec2<f32> = (vec2<f32>(x_651.x, x_651.y) * vec2<f32>(0.159999996f, 0.159999996f));
        let x_654 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_653.x, x_653.y, x_654.z, x_654.w);
        let x_657 : vec2<f32> = u_xlat47;
        let x_658 : vec2<f32> = (x_657 * vec2<f32>(0.159999996f, 0.159999996f));
        let x_659 : vec4<f32> = u_xlat11;
        u_xlat11 = vec4<f32>(x_658.x, x_658.y, x_659.z, x_659.w);
        let x_661 : vec4<f32> = u_xlat7;
        u_xlat47 = (vec2<f32>(x_661.y, x_661.w) * vec2<f32>(0.159999996f, 0.159999996f));
        let x_665 : f32 = u_xlat9.x;
        u_xlat10.z = x_665;
        let x_668 : f32 = u_xlat47.x;
        u_xlat10.w = x_668;
        let x_671 : f32 = u_xlat11.x;
        u_xlat8.z = x_671;
        let x_674 : f32 = u_xlat7.x;
        u_xlat8.w = x_674;
        let x_677 : vec4<f32> = u_xlat8;
        let x_679 : vec4<f32> = u_xlat10;
        u_xlat12 = (vec4<f32>(x_677.z, x_677.w, x_677.x, x_677.z) + vec4<f32>(x_679.z, x_679.w, x_679.x, x_679.z));
        let x_683 : f32 = u_xlat10.y;
        u_xlat9.z = x_683;
        let x_686 : f32 = u_xlat47.y;
        u_xlat9.w = x_686;
        let x_689 : f32 = u_xlat8.y;
        u_xlat11.z = x_689;
        let x_692 : f32 = u_xlat7.z;
        u_xlat11.w = x_692;
        let x_694 : vec4<f32> = u_xlat9;
        let x_696 : vec4<f32> = u_xlat11;
        let x_698 : vec3<f32> = (vec3<f32>(x_694.z, x_694.y, x_694.w) + vec3<f32>(x_696.z, x_696.y, x_696.w));
        let x_699 : vec4<f32> = u_xlat7;
        u_xlat7 = vec4<f32>(x_698.x, x_698.y, x_698.z, x_699.w);
        let x_701 : vec4<f32> = u_xlat8;
        let x_703 : vec4<f32> = u_xlat12;
        let x_705 : vec3<f32> = (vec3<f32>(x_701.x, x_701.z, x_701.w) / vec3<f32>(x_703.z, x_703.w, x_703.y));
        let x_706 : vec4<f32> = u_xlat8;
        u_xlat8 = vec4<f32>(x_705.x, x_705.y, x_705.z, x_706.w);
        let x_708 : vec4<f32> = u_xlat8;
        let x_714 : vec3<f32> = (vec3<f32>(x_708.x, x_708.y, x_708.z) + vec3<f32>(-2.5f, -0.5f, 1.5f));
        let x_715 : vec4<f32> = u_xlat8;
        u_xlat8 = vec4<f32>(x_714.x, x_714.y, x_714.z, x_715.w);
        let x_717 : vec4<f32> = u_xlat11;
        let x_719 : vec4<f32> = u_xlat7;
        let x_721 : vec3<f32> = (vec3<f32>(x_717.z, x_717.y, x_717.w) / vec3<f32>(x_719.x, x_719.y, x_719.z));
        let x_722 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_721.x, x_721.y, x_721.z, x_722.w);
        let x_724 : vec4<f32> = u_xlat9;
        let x_726 : vec3<f32> = (vec3<f32>(x_724.x, x_724.y, x_724.z) + vec3<f32>(-2.5f, -0.5f, 1.5f));
        let x_727 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_726.x, x_726.y, x_726.z, x_727.w);
        let x_729 : vec4<f32> = u_xlat8;
        let x_732 : vec4<f32> = x_253.x_MainLightShadowmapSize;
        let x_734 : vec3<f32> = (vec3<f32>(x_729.y, x_729.x, x_729.z) * vec3<f32>(x_732.x, x_732.x, x_732.x));
        let x_735 : vec4<f32> = u_xlat8;
        u_xlat8 = vec4<f32>(x_734.x, x_734.y, x_734.z, x_735.w);
        let x_737 : vec4<f32> = u_xlat9;
        let x_740 : vec4<f32> = x_253.x_MainLightShadowmapSize;
        let x_742 : vec3<f32> = (vec3<f32>(x_737.x, x_737.y, x_737.z) * vec3<f32>(x_740.y, x_740.y, x_740.y));
        let x_743 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_742.x, x_742.y, x_742.z, x_743.w);
        let x_746 : f32 = u_xlat9.x;
        u_xlat8.w = x_746;
        let x_748 : vec4<f32> = u_xlat3;
        let x_751 : vec4<f32> = x_253.x_MainLightShadowmapSize;
        let x_754 : vec4<f32> = u_xlat8;
        u_xlat10 = ((vec4<f32>(x_748.x, x_748.y, x_748.x, x_748.y) * vec4<f32>(x_751.x, x_751.y, x_751.x, x_751.y)) + vec4<f32>(x_754.y, x_754.w, x_754.x, x_754.w));
        let x_757 : vec4<f32> = u_xlat3;
        let x_760 : vec4<f32> = x_253.x_MainLightShadowmapSize;
        let x_763 : vec4<f32> = u_xlat8;
        u_xlat47 = ((vec2<f32>(x_757.x, x_757.y) * vec2<f32>(x_760.x, x_760.y)) + vec2<f32>(x_763.z, x_763.w));
        let x_767 : f32 = u_xlat8.y;
        u_xlat9.w = x_767;
        let x_769 : vec4<f32> = u_xlat9;
        let x_770 : vec2<f32> = vec2<f32>(x_769.y, x_769.z);
        let x_771 : vec4<f32> = u_xlat8;
        u_xlat8 = vec4<f32>(x_771.x, x_770.x, x_771.z, x_770.y);
        let x_773 : vec4<f32> = u_xlat3;
        let x_776 : vec4<f32> = x_253.x_MainLightShadowmapSize;
        let x_779 : vec4<f32> = u_xlat8;
        u_xlat11 = ((vec4<f32>(x_773.x, x_773.y, x_773.x, x_773.y) * vec4<f32>(x_776.x, x_776.y, x_776.x, x_776.y)) + vec4<f32>(x_779.x, x_779.y, x_779.z, x_779.y));
        let x_782 : vec4<f32> = u_xlat3;
        let x_785 : vec4<f32> = x_253.x_MainLightShadowmapSize;
        let x_788 : vec4<f32> = u_xlat9;
        u_xlat9 = ((vec4<f32>(x_782.x, x_782.y, x_782.x, x_782.y) * vec4<f32>(x_785.x, x_785.y, x_785.x, x_785.y)) + vec4<f32>(x_788.w, x_788.y, x_788.w, x_788.z));
        let x_791 : vec4<f32> = u_xlat3;
        let x_794 : vec4<f32> = x_253.x_MainLightShadowmapSize;
        let x_797 : vec4<f32> = u_xlat8;
        u_xlat8 = ((vec4<f32>(x_791.x, x_791.y, x_791.x, x_791.y) * vec4<f32>(x_794.x, x_794.y, x_794.x, x_794.y)) + vec4<f32>(x_797.x, x_797.w, x_797.z, x_797.w));
        let x_801 : vec4<f32> = u_xlat7;
        let x_803 : vec4<f32> = u_xlat12;
        u_xlat13 = (vec4<f32>(x_801.x, x_801.x, x_801.x, x_801.y) * vec4<f32>(x_803.z, x_803.w, x_803.y, x_803.z));
        let x_807 : vec4<f32> = u_xlat7;
        let x_809 : vec4<f32> = u_xlat12;
        u_xlat14 = (vec4<f32>(x_807.y, x_807.y, x_807.z, x_807.z) * x_809);
        let x_813 : f32 = u_xlat7.z;
        let x_815 : f32 = u_xlat12.y;
        u_xlat68 = (x_813 * x_815);
        let x_818 : vec4<f32> = u_xlat10;
        let x_819 : vec2<f32> = vec2<f32>(x_818.x, x_818.y);
        let x_821 : f32 = u_xlat2.z;
        txVec4 = vec3<f32>(x_819.x, x_819.y, x_821);
        let x_828 : vec3<f32> = txVec4;
        let x_830 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_828.xy, x_828.z);
        u_xlat3.x = x_830;
        let x_833 : vec4<f32> = u_xlat10;
        let x_834 : vec2<f32> = vec2<f32>(x_833.z, x_833.w);
        let x_836 : f32 = u_xlat2.z;
        txVec5 = vec3<f32>(x_834.x, x_834.y, x_836);
        let x_844 : vec3<f32> = txVec5;
        let x_846 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_844.xy, x_844.z);
        u_xlat25.x = x_846;
        let x_849 : f32 = u_xlat25.x;
        let x_851 : f32 = u_xlat13.y;
        u_xlat25.x = (x_849 * x_851);
        let x_855 : f32 = u_xlat13.x;
        let x_857 : f32 = u_xlat3.x;
        let x_860 : f32 = u_xlat25.x;
        u_xlat3.x = ((x_855 * x_857) + x_860);
        let x_864 : vec2<f32> = u_xlat47;
        let x_866 : f32 = u_xlat2.z;
        txVec6 = vec3<f32>(x_864.x, x_864.y, x_866);
        let x_873 : vec3<f32> = txVec6;
        let x_875 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_873.xy, x_873.z);
        u_xlat25.x = x_875;
        let x_878 : f32 = u_xlat13.z;
        let x_880 : f32 = u_xlat25.x;
        let x_883 : f32 = u_xlat3.x;
        u_xlat3.x = ((x_878 * x_880) + x_883);
        let x_887 : vec4<f32> = u_xlat9;
        let x_888 : vec2<f32> = vec2<f32>(x_887.x, x_887.y);
        let x_890 : f32 = u_xlat2.z;
        txVec7 = vec3<f32>(x_888.x, x_888.y, x_890);
        let x_897 : vec3<f32> = txVec7;
        let x_899 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_897.xy, x_897.z);
        u_xlat25.x = x_899;
        let x_902 : f32 = u_xlat13.w;
        let x_904 : f32 = u_xlat25.x;
        let x_907 : f32 = u_xlat3.x;
        u_xlat3.x = ((x_902 * x_904) + x_907);
        let x_911 : vec4<f32> = u_xlat11;
        let x_912 : vec2<f32> = vec2<f32>(x_911.x, x_911.y);
        let x_914 : f32 = u_xlat2.z;
        txVec8 = vec3<f32>(x_912.x, x_912.y, x_914);
        let x_921 : vec3<f32> = txVec8;
        let x_923 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_921.xy, x_921.z);
        u_xlat25.x = x_923;
        let x_926 : f32 = u_xlat14.x;
        let x_928 : f32 = u_xlat25.x;
        let x_931 : f32 = u_xlat3.x;
        u_xlat3.x = ((x_926 * x_928) + x_931);
        let x_935 : vec4<f32> = u_xlat11;
        let x_936 : vec2<f32> = vec2<f32>(x_935.z, x_935.w);
        let x_938 : f32 = u_xlat2.z;
        txVec9 = vec3<f32>(x_936.x, x_936.y, x_938);
        let x_945 : vec3<f32> = txVec9;
        let x_947 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_945.xy, x_945.z);
        u_xlat25.x = x_947;
        let x_950 : f32 = u_xlat14.y;
        let x_952 : f32 = u_xlat25.x;
        let x_955 : f32 = u_xlat3.x;
        u_xlat3.x = ((x_950 * x_952) + x_955);
        let x_959 : vec4<f32> = u_xlat9;
        let x_960 : vec2<f32> = vec2<f32>(x_959.z, x_959.w);
        let x_962 : f32 = u_xlat2.z;
        txVec10 = vec3<f32>(x_960.x, x_960.y, x_962);
        let x_969 : vec3<f32> = txVec10;
        let x_971 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_969.xy, x_969.z);
        u_xlat25.x = x_971;
        let x_974 : f32 = u_xlat14.z;
        let x_976 : f32 = u_xlat25.x;
        let x_979 : f32 = u_xlat3.x;
        u_xlat3.x = ((x_974 * x_976) + x_979);
        let x_983 : vec4<f32> = u_xlat8;
        let x_984 : vec2<f32> = vec2<f32>(x_983.x, x_983.y);
        let x_986 : f32 = u_xlat2.z;
        txVec11 = vec3<f32>(x_984.x, x_984.y, x_986);
        let x_993 : vec3<f32> = txVec11;
        let x_995 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_993.xy, x_993.z);
        u_xlat25.x = x_995;
        let x_998 : f32 = u_xlat14.w;
        let x_1000 : f32 = u_xlat25.x;
        let x_1003 : f32 = u_xlat3.x;
        u_xlat3.x = ((x_998 * x_1000) + x_1003);
        let x_1007 : vec4<f32> = u_xlat8;
        let x_1008 : vec2<f32> = vec2<f32>(x_1007.z, x_1007.w);
        let x_1010 : f32 = u_xlat2.z;
        txVec12 = vec3<f32>(x_1008.x, x_1008.y, x_1010);
        let x_1017 : vec3<f32> = txVec12;
        let x_1019 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1017.xy, x_1017.z);
        u_xlat25.x = x_1019;
        let x_1021 : f32 = u_xlat68;
        let x_1023 : f32 = u_xlat25.x;
        let x_1026 : f32 = u_xlat3.x;
        u_xlat67 = ((x_1021 * x_1023) + x_1026);
      } else {
        let x_1029 : vec4<f32> = u_xlat2;
        let x_1032 : vec4<f32> = x_253.x_MainLightShadowmapSize;
        let x_1035 : vec2<f32> = ((vec2<f32>(x_1029.x, x_1029.y) * vec2<f32>(x_1032.z, x_1032.w)) + vec2<f32>(0.5f, 0.5f));
        let x_1036 : vec4<f32> = u_xlat3;
        u_xlat3 = vec4<f32>(x_1035.x, x_1035.y, x_1036.z, x_1036.w);
        let x_1038 : vec4<f32> = u_xlat3;
        let x_1040 : vec2<f32> = floor(vec2<f32>(x_1038.x, x_1038.y));
        let x_1041 : vec4<f32> = u_xlat3;
        u_xlat3 = vec4<f32>(x_1040.x, x_1040.y, x_1041.z, x_1041.w);
        let x_1043 : vec4<f32> = u_xlat2;
        let x_1046 : vec4<f32> = x_253.x_MainLightShadowmapSize;
        let x_1049 : vec4<f32> = u_xlat3;
        u_xlat47 = ((vec2<f32>(x_1043.x, x_1043.y) * vec2<f32>(x_1046.z, x_1046.w)) + -(vec2<f32>(x_1049.x, x_1049.y)));
        let x_1053 : vec2<f32> = u_xlat47;
        u_xlat7 = (vec4<f32>(x_1053.x, x_1053.x, x_1053.y, x_1053.y) + vec4<f32>(0.5f, 1.0f, 0.5f, 1.0f));
        let x_1056 : vec4<f32> = u_xlat7;
        let x_1058 : vec4<f32> = u_xlat7;
        u_xlat8 = (vec4<f32>(x_1056.x, x_1056.x, x_1056.z, x_1056.z) * vec4<f32>(x_1058.x, x_1058.x, x_1058.z, x_1058.z));
        let x_1061 : vec4<f32> = u_xlat8;
        let x_1065 : vec2<f32> = (vec2<f32>(x_1061.y, x_1061.w) * vec2<f32>(0.040816002f, 0.040816002f));
        let x_1066 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_1066.x, x_1065.x, x_1066.z, x_1065.y);
        let x_1068 : vec4<f32> = u_xlat8;
        let x_1071 : vec2<f32> = u_xlat47;
        let x_1073 : vec2<f32> = ((vec2<f32>(x_1068.x, x_1068.z) * vec2<f32>(0.5f, 0.5f)) + -(x_1071));
        let x_1074 : vec4<f32> = u_xlat7;
        u_xlat7 = vec4<f32>(x_1073.x, x_1074.y, x_1073.y, x_1074.w);
        let x_1076 : vec2<f32> = u_xlat47;
        let x_1078 : vec2<f32> = (-(x_1076) + vec2<f32>(1.0f, 1.0f));
        let x_1079 : vec4<f32> = u_xlat8;
        u_xlat8 = vec4<f32>(x_1078.x, x_1078.y, x_1079.z, x_1079.w);
        let x_1081 : vec2<f32> = u_xlat47;
        u_xlat52 = min(x_1081, vec2<f32>(0.0f, 0.0f));
        let x_1083 : vec2<f32> = u_xlat52;
        let x_1085 : vec2<f32> = u_xlat52;
        let x_1087 : vec4<f32> = u_xlat8;
        let x_1089 : vec2<f32> = ((-(x_1083) * x_1085) + vec2<f32>(x_1087.x, x_1087.y));
        let x_1090 : vec4<f32> = u_xlat8;
        u_xlat8 = vec4<f32>(x_1089.x, x_1089.y, x_1090.z, x_1090.w);
        let x_1092 : vec2<f32> = u_xlat47;
        u_xlat52 = max(x_1092, vec2<f32>(0.0f, 0.0f));
        let x_1095 : vec2<f32> = u_xlat52;
        let x_1097 : vec2<f32> = u_xlat52;
        let x_1099 : vec4<f32> = u_xlat7;
        let x_1101 : vec2<f32> = ((-(x_1095) * x_1097) + vec2<f32>(x_1099.y, x_1099.w));
        let x_1102 : vec3<f32> = u_xlat29;
        u_xlat29 = vec3<f32>(x_1101.x, x_1102.y, x_1101.y);
        let x_1104 : vec4<f32> = u_xlat8;
        let x_1107 : vec2<f32> = (vec2<f32>(x_1104.x, x_1104.y) + vec2<f32>(2.0f, 2.0f));
        let x_1108 : vec4<f32> = u_xlat8;
        u_xlat8 = vec4<f32>(x_1107.x, x_1107.y, x_1108.z, x_1108.w);
        let x_1110 : vec3<f32> = u_xlat29;
        let x_1112 : vec2<f32> = (vec2<f32>(x_1110.x, x_1110.z) + vec2<f32>(2.0f, 2.0f));
        let x_1113 : vec4<f32> = u_xlat7;
        u_xlat7 = vec4<f32>(x_1113.x, x_1112.x, x_1113.z, x_1112.y);
        let x_1116 : f32 = u_xlat7.y;
        u_xlat10.z = (x_1116 * 0.081632003f);
        let x_1120 : vec4<f32> = u_xlat7;
        let x_1123 : vec3<f32> = (vec3<f32>(x_1120.z, x_1120.x, x_1120.w) * vec3<f32>(0.081632003f, 0.081632003f, 0.081632003f));
        let x_1124 : vec4<f32> = u_xlat11;
        u_xlat11 = vec4<f32>(x_1123.x, x_1123.y, x_1123.z, x_1124.w);
        let x_1126 : vec4<f32> = u_xlat8;
        let x_1129 : vec2<f32> = (vec2<f32>(x_1126.x, x_1126.y) * vec2<f32>(0.081632003f, 0.081632003f));
        let x_1130 : vec4<f32> = u_xlat7;
        u_xlat7 = vec4<f32>(x_1129.x, x_1129.y, x_1130.z, x_1130.w);
        let x_1133 : f32 = u_xlat11.y;
        u_xlat10.x = x_1133;
        let x_1135 : vec2<f32> = u_xlat47;
        let x_1142 : vec2<f32> = ((vec2<f32>(x_1135.x, x_1135.x) * vec2<f32>(-0.081632003f, 0.081632003f)) + vec2<f32>(0.163264006f, 0.081632003f));
        let x_1143 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_1143.x, x_1142.x, x_1143.z, x_1142.y);
        let x_1145 : vec2<f32> = u_xlat47;
        let x_1149 : vec2<f32> = ((vec2<f32>(x_1145.x, x_1145.x) * vec2<f32>(-0.081632003f, 0.081632003f)) + vec2<f32>(0.081632003f, 0.163264006f));
        let x_1150 : vec4<f32> = u_xlat8;
        u_xlat8 = vec4<f32>(x_1149.x, x_1150.y, x_1149.y, x_1150.w);
        let x_1153 : f32 = u_xlat7.x;
        u_xlat8.y = x_1153;
        let x_1156 : f32 = u_xlat9.y;
        u_xlat8.w = x_1156;
        let x_1158 : vec4<f32> = u_xlat8;
        let x_1159 : vec4<f32> = u_xlat10;
        u_xlat10 = (x_1158 + x_1159);
        let x_1161 : vec2<f32> = u_xlat47;
        let x_1164 : vec2<f32> = ((vec2<f32>(x_1161.y, x_1161.y) * vec2<f32>(-0.081632003f, 0.081632003f)) + vec2<f32>(0.163264006f, 0.081632003f));
        let x_1165 : vec4<f32> = u_xlat11;
        u_xlat11 = vec4<f32>(x_1165.x, x_1164.x, x_1165.z, x_1164.y);
        let x_1167 : vec2<f32> = u_xlat47;
        let x_1170 : vec2<f32> = ((vec2<f32>(x_1167.y, x_1167.y) * vec2<f32>(-0.081632003f, 0.081632003f)) + vec2<f32>(0.081632003f, 0.163264006f));
        let x_1171 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_1170.x, x_1171.y, x_1170.y, x_1171.w);
        let x_1174 : f32 = u_xlat7.y;
        u_xlat9.y = x_1174;
        let x_1176 : vec4<f32> = u_xlat9;
        let x_1177 : vec4<f32> = u_xlat11;
        u_xlat7 = (x_1176 + x_1177);
        let x_1179 : vec4<f32> = u_xlat8;
        let x_1180 : vec4<f32> = u_xlat10;
        u_xlat8 = (x_1179 / x_1180);
        let x_1182 : vec4<f32> = u_xlat8;
        u_xlat8 = (x_1182 + vec4<f32>(-3.5f, -1.5f, 0.5f, 2.5f));
        let x_1188 : vec4<f32> = u_xlat9;
        let x_1189 : vec4<f32> = u_xlat7;
        u_xlat9 = (x_1188 / x_1189);
        let x_1191 : vec4<f32> = u_xlat9;
        u_xlat9 = (x_1191 + vec4<f32>(-3.5f, -1.5f, 0.5f, 2.5f));
        let x_1193 : vec4<f32> = u_xlat8;
        let x_1196 : vec4<f32> = x_253.x_MainLightShadowmapSize;
        u_xlat8 = (vec4<f32>(x_1193.w, x_1193.x, x_1193.y, x_1193.z) * vec4<f32>(x_1196.x, x_1196.x, x_1196.x, x_1196.x));
        let x_1199 : vec4<f32> = u_xlat9;
        let x_1202 : vec4<f32> = x_253.x_MainLightShadowmapSize;
        u_xlat9 = (vec4<f32>(x_1199.x, x_1199.w, x_1199.y, x_1199.z) * vec4<f32>(x_1202.y, x_1202.y, x_1202.y, x_1202.y));
        let x_1205 : vec4<f32> = u_xlat8;
        let x_1206 : vec3<f32> = vec3<f32>(x_1205.y, x_1205.z, x_1205.w);
        let x_1207 : vec4<f32> = u_xlat11;
        u_xlat11 = vec4<f32>(x_1206.x, x_1207.y, x_1206.y, x_1206.z);
        let x_1210 : f32 = u_xlat9.x;
        u_xlat11.y = x_1210;
        let x_1212 : vec4<f32> = u_xlat3;
        let x_1215 : vec4<f32> = x_253.x_MainLightShadowmapSize;
        let x_1218 : vec4<f32> = u_xlat11;
        u_xlat12 = ((vec4<f32>(x_1212.x, x_1212.y, x_1212.x, x_1212.y) * vec4<f32>(x_1215.x, x_1215.y, x_1215.x, x_1215.y)) + vec4<f32>(x_1218.x, x_1218.y, x_1218.z, x_1218.y));
        let x_1221 : vec4<f32> = u_xlat3;
        let x_1224 : vec4<f32> = x_253.x_MainLightShadowmapSize;
        let x_1227 : vec4<f32> = u_xlat11;
        u_xlat47 = ((vec2<f32>(x_1221.x, x_1221.y) * vec2<f32>(x_1224.x, x_1224.y)) + vec2<f32>(x_1227.w, x_1227.y));
        let x_1231 : f32 = u_xlat11.y;
        u_xlat8.y = x_1231;
        let x_1234 : f32 = u_xlat9.z;
        u_xlat11.y = x_1234;
        let x_1236 : vec4<f32> = u_xlat3;
        let x_1239 : vec4<f32> = x_253.x_MainLightShadowmapSize;
        let x_1242 : vec4<f32> = u_xlat11;
        u_xlat13 = ((vec4<f32>(x_1236.x, x_1236.y, x_1236.x, x_1236.y) * vec4<f32>(x_1239.x, x_1239.y, x_1239.x, x_1239.y)) + vec4<f32>(x_1242.x, x_1242.y, x_1242.z, x_1242.y));
        let x_1245 : vec4<f32> = u_xlat3;
        let x_1248 : vec4<f32> = x_253.x_MainLightShadowmapSize;
        let x_1251 : vec4<f32> = u_xlat11;
        let x_1253 : vec2<f32> = ((vec2<f32>(x_1245.x, x_1245.y) * vec2<f32>(x_1248.x, x_1248.y)) + vec2<f32>(x_1251.w, x_1251.y));
        let x_1254 : vec4<f32> = u_xlat14;
        u_xlat14 = vec4<f32>(x_1253.x, x_1253.y, x_1254.z, x_1254.w);
        let x_1257 : f32 = u_xlat11.y;
        u_xlat8.z = x_1257;
        let x_1260 : vec4<f32> = u_xlat3;
        let x_1263 : vec4<f32> = x_253.x_MainLightShadowmapSize;
        let x_1266 : vec4<f32> = u_xlat8;
        u_xlat15 = ((vec4<f32>(x_1260.x, x_1260.y, x_1260.x, x_1260.y) * vec4<f32>(x_1263.x, x_1263.y, x_1263.x, x_1263.y)) + vec4<f32>(x_1266.x, x_1266.y, x_1266.x, x_1266.z));
        let x_1270 : f32 = u_xlat9.w;
        u_xlat11.y = x_1270;
        let x_1273 : vec4<f32> = u_xlat3;
        let x_1276 : vec4<f32> = x_253.x_MainLightShadowmapSize;
        let x_1279 : vec4<f32> = u_xlat11;
        u_xlat16 = ((vec4<f32>(x_1273.x, x_1273.y, x_1273.x, x_1273.y) * vec4<f32>(x_1276.x, x_1276.y, x_1276.x, x_1276.y)) + vec4<f32>(x_1279.x, x_1279.y, x_1279.z, x_1279.y));
        let x_1283 : vec4<f32> = u_xlat3;
        let x_1286 : vec4<f32> = x_253.x_MainLightShadowmapSize;
        let x_1289 : vec4<f32> = u_xlat11;
        u_xlat30 = ((vec2<f32>(x_1283.x, x_1283.y) * vec2<f32>(x_1286.x, x_1286.y)) + vec2<f32>(x_1289.w, x_1289.y));
        let x_1293 : f32 = u_xlat11.y;
        u_xlat8.w = x_1293;
        let x_1296 : vec4<f32> = u_xlat3;
        let x_1299 : vec4<f32> = x_253.x_MainLightShadowmapSize;
        let x_1302 : vec4<f32> = u_xlat8;
        u_xlat58 = ((vec2<f32>(x_1296.x, x_1296.y) * vec2<f32>(x_1299.x, x_1299.y)) + vec2<f32>(x_1302.x, x_1302.w));
        let x_1305 : vec4<f32> = u_xlat11;
        let x_1306 : vec3<f32> = vec3<f32>(x_1305.x, x_1305.z, x_1305.w);
        let x_1307 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_1306.x, x_1307.y, x_1306.y, x_1306.z);
        let x_1309 : vec4<f32> = u_xlat3;
        let x_1312 : vec4<f32> = x_253.x_MainLightShadowmapSize;
        let x_1315 : vec4<f32> = u_xlat9;
        u_xlat11 = ((vec4<f32>(x_1309.x, x_1309.y, x_1309.x, x_1309.y) * vec4<f32>(x_1312.x, x_1312.y, x_1312.x, x_1312.y)) + vec4<f32>(x_1315.x, x_1315.y, x_1315.z, x_1315.y));
        let x_1319 : vec4<f32> = u_xlat3;
        let x_1322 : vec4<f32> = x_253.x_MainLightShadowmapSize;
        let x_1325 : vec4<f32> = u_xlat9;
        u_xlat53 = ((vec2<f32>(x_1319.x, x_1319.y) * vec2<f32>(x_1322.x, x_1322.y)) + vec2<f32>(x_1325.w, x_1325.y));
        let x_1329 : f32 = u_xlat8.x;
        u_xlat9.x = x_1329;
        let x_1331 : vec4<f32> = u_xlat3;
        let x_1334 : vec4<f32> = x_253.x_MainLightShadowmapSize;
        let x_1337 : vec4<f32> = u_xlat9;
        let x_1339 : vec2<f32> = ((vec2<f32>(x_1331.x, x_1331.y) * vec2<f32>(x_1334.x, x_1334.y)) + vec2<f32>(x_1337.x, x_1337.y));
        let x_1340 : vec4<f32> = u_xlat3;
        u_xlat3 = vec4<f32>(x_1339.x, x_1339.y, x_1340.z, x_1340.w);
        let x_1343 : vec4<f32> = u_xlat7;
        let x_1345 : vec4<f32> = u_xlat10;
        u_xlat17 = (vec4<f32>(x_1343.x, x_1343.x, x_1343.x, x_1343.x) * x_1345);
        let x_1348 : vec4<f32> = u_xlat7;
        let x_1350 : vec4<f32> = u_xlat10;
        u_xlat18 = (vec4<f32>(x_1348.y, x_1348.y, x_1348.y, x_1348.y) * x_1350);
        let x_1353 : vec4<f32> = u_xlat7;
        let x_1355 : vec4<f32> = u_xlat10;
        u_xlat19 = (vec4<f32>(x_1353.z, x_1353.z, x_1353.z, x_1353.z) * x_1355);
        let x_1357 : vec4<f32> = u_xlat7;
        let x_1359 : vec4<f32> = u_xlat10;
        u_xlat7 = (vec4<f32>(x_1357.w, x_1357.w, x_1357.w, x_1357.w) * x_1359);
        let x_1362 : vec4<f32> = u_xlat12;
        let x_1363 : vec2<f32> = vec2<f32>(x_1362.x, x_1362.y);
        let x_1365 : f32 = u_xlat2.z;
        txVec13 = vec3<f32>(x_1363.x, x_1363.y, x_1365);
        let x_1372 : vec3<f32> = txVec13;
        let x_1374 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1372.xy, x_1372.z);
        u_xlat68 = x_1374;
        let x_1376 : vec4<f32> = u_xlat12;
        let x_1377 : vec2<f32> = vec2<f32>(x_1376.z, x_1376.w);
        let x_1379 : f32 = u_xlat2.z;
        txVec14 = vec3<f32>(x_1377.x, x_1377.y, x_1379);
        let x_1387 : vec3<f32> = txVec14;
        let x_1389 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1387.xy, x_1387.z);
        u_xlat71 = x_1389;
        let x_1390 : f32 = u_xlat71;
        let x_1392 : f32 = u_xlat17.y;
        u_xlat71 = (x_1390 * x_1392);
        let x_1395 : f32 = u_xlat17.x;
        let x_1396 : f32 = u_xlat68;
        let x_1398 : f32 = u_xlat71;
        u_xlat68 = ((x_1395 * x_1396) + x_1398);
        let x_1401 : vec2<f32> = u_xlat47;
        let x_1403 : f32 = u_xlat2.z;
        txVec15 = vec3<f32>(x_1401.x, x_1401.y, x_1403);
        let x_1410 : vec3<f32> = txVec15;
        let x_1412 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1410.xy, x_1410.z);
        u_xlat47.x = x_1412;
        let x_1415 : f32 = u_xlat17.z;
        let x_1417 : f32 = u_xlat47.x;
        let x_1419 : f32 = u_xlat68;
        u_xlat68 = ((x_1415 * x_1417) + x_1419);
        let x_1422 : vec4<f32> = u_xlat15;
        let x_1423 : vec2<f32> = vec2<f32>(x_1422.x, x_1422.y);
        let x_1425 : f32 = u_xlat2.z;
        txVec16 = vec3<f32>(x_1423.x, x_1423.y, x_1425);
        let x_1432 : vec3<f32> = txVec16;
        let x_1434 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1432.xy, x_1432.z);
        u_xlat47.x = x_1434;
        let x_1437 : f32 = u_xlat17.w;
        let x_1439 : f32 = u_xlat47.x;
        let x_1441 : f32 = u_xlat68;
        u_xlat68 = ((x_1437 * x_1439) + x_1441);
        let x_1444 : vec4<f32> = u_xlat13;
        let x_1445 : vec2<f32> = vec2<f32>(x_1444.x, x_1444.y);
        let x_1447 : f32 = u_xlat2.z;
        txVec17 = vec3<f32>(x_1445.x, x_1445.y, x_1447);
        let x_1454 : vec3<f32> = txVec17;
        let x_1456 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1454.xy, x_1454.z);
        u_xlat47.x = x_1456;
        let x_1459 : f32 = u_xlat18.x;
        let x_1461 : f32 = u_xlat47.x;
        let x_1463 : f32 = u_xlat68;
        u_xlat68 = ((x_1459 * x_1461) + x_1463);
        let x_1466 : vec4<f32> = u_xlat13;
        let x_1467 : vec2<f32> = vec2<f32>(x_1466.z, x_1466.w);
        let x_1469 : f32 = u_xlat2.z;
        txVec18 = vec3<f32>(x_1467.x, x_1467.y, x_1469);
        let x_1476 : vec3<f32> = txVec18;
        let x_1478 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1476.xy, x_1476.z);
        u_xlat47.x = x_1478;
        let x_1481 : f32 = u_xlat18.y;
        let x_1483 : f32 = u_xlat47.x;
        let x_1485 : f32 = u_xlat68;
        u_xlat68 = ((x_1481 * x_1483) + x_1485);
        let x_1488 : vec4<f32> = u_xlat14;
        let x_1489 : vec2<f32> = vec2<f32>(x_1488.x, x_1488.y);
        let x_1491 : f32 = u_xlat2.z;
        txVec19 = vec3<f32>(x_1489.x, x_1489.y, x_1491);
        let x_1498 : vec3<f32> = txVec19;
        let x_1500 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1498.xy, x_1498.z);
        u_xlat47.x = x_1500;
        let x_1503 : f32 = u_xlat18.z;
        let x_1505 : f32 = u_xlat47.x;
        let x_1507 : f32 = u_xlat68;
        u_xlat68 = ((x_1503 * x_1505) + x_1507);
        let x_1510 : vec4<f32> = u_xlat15;
        let x_1511 : vec2<f32> = vec2<f32>(x_1510.z, x_1510.w);
        let x_1513 : f32 = u_xlat2.z;
        txVec20 = vec3<f32>(x_1511.x, x_1511.y, x_1513);
        let x_1520 : vec3<f32> = txVec20;
        let x_1522 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1520.xy, x_1520.z);
        u_xlat47.x = x_1522;
        let x_1525 : f32 = u_xlat18.w;
        let x_1527 : f32 = u_xlat47.x;
        let x_1529 : f32 = u_xlat68;
        u_xlat68 = ((x_1525 * x_1527) + x_1529);
        let x_1532 : vec4<f32> = u_xlat16;
        let x_1533 : vec2<f32> = vec2<f32>(x_1532.x, x_1532.y);
        let x_1535 : f32 = u_xlat2.z;
        txVec21 = vec3<f32>(x_1533.x, x_1533.y, x_1535);
        let x_1542 : vec3<f32> = txVec21;
        let x_1544 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1542.xy, x_1542.z);
        u_xlat47.x = x_1544;
        let x_1547 : f32 = u_xlat19.x;
        let x_1549 : f32 = u_xlat47.x;
        let x_1551 : f32 = u_xlat68;
        u_xlat68 = ((x_1547 * x_1549) + x_1551);
        let x_1554 : vec4<f32> = u_xlat16;
        let x_1555 : vec2<f32> = vec2<f32>(x_1554.z, x_1554.w);
        let x_1557 : f32 = u_xlat2.z;
        txVec22 = vec3<f32>(x_1555.x, x_1555.y, x_1557);
        let x_1564 : vec3<f32> = txVec22;
        let x_1566 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1564.xy, x_1564.z);
        u_xlat47.x = x_1566;
        let x_1569 : f32 = u_xlat19.y;
        let x_1571 : f32 = u_xlat47.x;
        let x_1573 : f32 = u_xlat68;
        u_xlat68 = ((x_1569 * x_1571) + x_1573);
        let x_1576 : vec2<f32> = u_xlat30;
        let x_1578 : f32 = u_xlat2.z;
        txVec23 = vec3<f32>(x_1576.x, x_1576.y, x_1578);
        let x_1585 : vec3<f32> = txVec23;
        let x_1587 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1585.xy, x_1585.z);
        u_xlat47.x = x_1587;
        let x_1590 : f32 = u_xlat19.z;
        let x_1592 : f32 = u_xlat47.x;
        let x_1594 : f32 = u_xlat68;
        u_xlat68 = ((x_1590 * x_1592) + x_1594);
        let x_1597 : vec2<f32> = u_xlat58;
        let x_1599 : f32 = u_xlat2.z;
        txVec24 = vec3<f32>(x_1597.x, x_1597.y, x_1599);
        let x_1606 : vec3<f32> = txVec24;
        let x_1608 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1606.xy, x_1606.z);
        u_xlat47.x = x_1608;
        let x_1611 : f32 = u_xlat19.w;
        let x_1613 : f32 = u_xlat47.x;
        let x_1615 : f32 = u_xlat68;
        u_xlat68 = ((x_1611 * x_1613) + x_1615);
        let x_1618 : vec4<f32> = u_xlat11;
        let x_1619 : vec2<f32> = vec2<f32>(x_1618.x, x_1618.y);
        let x_1621 : f32 = u_xlat2.z;
        txVec25 = vec3<f32>(x_1619.x, x_1619.y, x_1621);
        let x_1628 : vec3<f32> = txVec25;
        let x_1630 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1628.xy, x_1628.z);
        u_xlat47.x = x_1630;
        let x_1633 : f32 = u_xlat7.x;
        let x_1635 : f32 = u_xlat47.x;
        let x_1637 : f32 = u_xlat68;
        u_xlat68 = ((x_1633 * x_1635) + x_1637);
        let x_1640 : vec4<f32> = u_xlat11;
        let x_1641 : vec2<f32> = vec2<f32>(x_1640.z, x_1640.w);
        let x_1643 : f32 = u_xlat2.z;
        txVec26 = vec3<f32>(x_1641.x, x_1641.y, x_1643);
        let x_1650 : vec3<f32> = txVec26;
        let x_1652 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1650.xy, x_1650.z);
        u_xlat47.x = x_1652;
        let x_1655 : f32 = u_xlat7.y;
        let x_1657 : f32 = u_xlat47.x;
        let x_1659 : f32 = u_xlat68;
        u_xlat68 = ((x_1655 * x_1657) + x_1659);
        let x_1662 : vec2<f32> = u_xlat53;
        let x_1664 : f32 = u_xlat2.z;
        txVec27 = vec3<f32>(x_1662.x, x_1662.y, x_1664);
        let x_1671 : vec3<f32> = txVec27;
        let x_1673 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1671.xy, x_1671.z);
        u_xlat47.x = x_1673;
        let x_1676 : f32 = u_xlat7.z;
        let x_1678 : f32 = u_xlat47.x;
        let x_1680 : f32 = u_xlat68;
        u_xlat68 = ((x_1676 * x_1678) + x_1680);
        let x_1683 : vec4<f32> = u_xlat3;
        let x_1684 : vec2<f32> = vec2<f32>(x_1683.x, x_1683.y);
        let x_1686 : f32 = u_xlat2.z;
        txVec28 = vec3<f32>(x_1684.x, x_1684.y, x_1686);
        let x_1693 : vec3<f32> = txVec28;
        let x_1695 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1693.xy, x_1693.z);
        u_xlat3.x = x_1695;
        let x_1698 : f32 = u_xlat7.w;
        let x_1700 : f32 = u_xlat3.x;
        let x_1702 : f32 = u_xlat68;
        u_xlat67 = ((x_1698 * x_1700) + x_1702);
      }
    }
  } else {
    let x_1706 : vec4<f32> = u_xlat2;
    let x_1707 : vec2<f32> = vec2<f32>(x_1706.x, x_1706.y);
    let x_1709 : f32 = u_xlat2.z;
    txVec29 = vec3<f32>(x_1707.x, x_1707.y, x_1709);
    let x_1716 : vec3<f32> = txVec29;
    let x_1718 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1716.xy, x_1716.z);
    u_xlat67 = x_1718;
  }
  let x_1720 : f32 = x_253.x_MainLightShadowParams.x;
  u_xlat68 = (-(x_1720) + 1.0f);
  let x_1723 : f32 = u_xlat67;
  let x_1725 : f32 = x_253.x_MainLightShadowParams.x;
  let x_1727 : f32 = u_xlat68;
  u_xlat67 = ((x_1723 * x_1725) + x_1727);
  let x_1731 : f32 = u_xlat2.z;
  u_xlatb3 = (0.0f >= x_1731);
  let x_1737 : f32 = u_xlat2.z;
  u_xlatb25.x = (x_1737 >= 1.0f);
  let x_1741 : bool = u_xlatb25.x;
  let x_1742 : bool = u_xlatb3;
  u_xlatb3 = (x_1741 | x_1742);
  let x_1744 : bool = u_xlatb3;
  let x_1745 : f32 = u_xlat67;
  u_xlat67 = select(x_1745, 1.0f, x_1744);
  let x_1747 : vec3<f32> = u_xlat1;
  let x_1749 : vec4<f32> = x_139.x_MainLightPosition;
  u_xlat1.x = dot(x_1747, -(vec3<f32>(x_1749.x, x_1749.y, x_1749.z)));
  let x_1755 : f32 = u_xlat1.x;
  u_xlat1.x = clamp(x_1755, 0.0f, 1.0f);
  let x_1759 : f32 = u_xlat67;
  let x_1762 : vec4<f32> = x_139.x_MainLightColor;
  u_xlat23 = (vec3<f32>(x_1759, x_1759, x_1759) * vec3<f32>(x_1762.x, x_1762.y, x_1762.z));
  let x_1765 : vec3<f32> = u_xlat23;
  let x_1766 : vec3<f32> = u_xlat1;
  u_xlat1 = (x_1765 * vec3<f32>(x_1766.x, x_1766.x, x_1766.x));
  let x_1769 : vec3<f32> = u_xlat1;
  let x_1770 : vec4<f32> = u_xlat4;
  u_xlat1 = (x_1769 * vec3<f32>(x_1770.x, x_1770.y, x_1770.z));
  let x_1774 : f32 = u_xlat4.w;
  u_xlatb67 = (x_1774 >= 0.400000006f);
  let x_1777 : bool = u_xlatb67;
  if (x_1777) {
    let x_1782 : f32 = u_xlat4.w;
    x_1778 = x_1782;
  } else {
    x_1778 = 0.0f;
  }
  let x_1784 : f32 = x_1778;
  u_xlat67 = x_1784;
  let x_1786 : f32 = u_xlat4.w;
  u_xlat25.x = (x_1786 + -0.400000006f);
  let x_1791 : f32 = u_xlat4.w;
  u_xlat47.x = dpdxCoarse(x_1791);
  let x_1796 : f32 = u_xlat4.w;
  u_xlat69 = dpdyCoarse(x_1796);
  let x_1798 : f32 = u_xlat69;
  let x_1801 : f32 = u_xlat47.x;
  u_xlat47.x = (abs(x_1798) + abs(x_1801));
  let x_1806 : f32 = u_xlat47.x;
  u_xlat47.x = max(x_1806, 0.0001f);
  let x_1811 : f32 = u_xlat25.x;
  let x_1813 : f32 = u_xlat47.x;
  u_xlat25.x = (x_1811 / x_1813);
  let x_1817 : f32 = u_xlat25.x;
  u_xlat25.x = (x_1817 + 0.5f);
  let x_1821 : f32 = u_xlat25.x;
  u_xlat25.x = clamp(x_1821, 0.0f, 1.0f);
  let x_1826 : f32 = x_139.x_AlphaToMaskAvailable;
  u_xlatb47 = !((x_1826 == 0.0f));
  let x_1828 : bool = u_xlatb47;
  if (x_1828) {
    let x_1833 : f32 = u_xlat25.x;
    x_1829 = x_1833;
  } else {
    let x_1835 : f32 = u_xlat67;
    x_1829 = x_1835;
  }
  let x_1836 : f32 = x_1829;
  u_xlat67 = x_1836;
  let x_1837 : f32 = u_xlat67;
  u_xlat25.x = (x_1837 + -0.0001f);
  let x_1842 : f32 = u_xlat25.x;
  u_xlatb25.x = (x_1842 < 0.0f);
  let x_1846 : bool = u_xlatb25.x;
  if (((select(0i, 1i, x_1846) * -1i) != 0i)) {
    discard;
  }
  let x_1854 : vec3<f32> = u_xlat22;
  let x_1855 : vec3<f32> = u_xlat28;
  u_xlat22 = (x_1854 * vec3<f32>(x_1855.y, x_1855.y, x_1855.y));
  let x_1858 : vec3<f32> = u_xlat28;
  let x_1860 : vec4<f32> = vs_INTERP2;
  let x_1863 : vec3<f32> = u_xlat22;
  u_xlat22 = ((vec3<f32>(x_1858.x, x_1858.x, x_1858.x) * vec3<f32>(x_1860.x, x_1860.y, x_1860.z)) + x_1863);
  let x_1865 : vec3<f32> = u_xlat28;
  let x_1867 : vec3<f32> = vs_INTERP1;
  let x_1869 : vec3<f32> = u_xlat22;
  u_xlat22 = ((vec3<f32>(x_1865.z, x_1865.z, x_1865.z) * x_1867) + x_1869);
  let x_1871 : vec3<f32> = u_xlat22;
  let x_1872 : vec3<f32> = u_xlat22;
  u_xlat25.x = dot(x_1871, x_1872);
  let x_1876 : f32 = u_xlat25.x;
  u_xlat25.x = inverseSqrt(x_1876);
  let x_1879 : vec3<f32> = u_xlat22;
  let x_1880 : vec3<f32> = u_xlat25;
  u_xlat22 = (x_1879 * vec3<f32>(x_1880.x, x_1880.x, x_1880.x));
  let x_1885 : f32 = x_139.unity_OrthoParams.w;
  u_xlatb25.x = (x_1885 == 0.0f);
  let x_1888 : vec3<f32> = vs_INTERP0;
  let x_1892 : vec3<f32> = x_139.x_WorldSpaceCameraPos;
  let x_1893 : vec3<f32> = (-(x_1888) + x_1892);
  let x_1894 : vec4<f32> = u_xlat4;
  u_xlat4 = vec4<f32>(x_1893.x, x_1893.y, x_1893.z, x_1894.w);
  let x_1896 : vec4<f32> = u_xlat4;
  let x_1898 : vec4<f32> = u_xlat4;
  u_xlat69 = dot(vec3<f32>(x_1896.x, x_1896.y, x_1896.z), vec3<f32>(x_1898.x, x_1898.y, x_1898.z));
  let x_1901 : f32 = u_xlat69;
  u_xlat69 = inverseSqrt(x_1901);
  let x_1903 : f32 = u_xlat69;
  let x_1905 : vec4<f32> = u_xlat4;
  let x_1907 : vec3<f32> = (vec3<f32>(x_1903, x_1903, x_1903) * vec3<f32>(x_1905.x, x_1905.y, x_1905.z));
  let x_1908 : vec4<f32> = u_xlat4;
  u_xlat4 = vec4<f32>(x_1907.x, x_1907.y, x_1907.z, x_1908.w);
  let x_1911 : bool = u_xlatb25.x;
  if (x_1911) {
    let x_1916 : f32 = u_xlat4.x;
    x_1912 = x_1916;
  } else {
    let x_1920 : f32 = x_139.unity_MatrixV[0i].z;
    x_1912 = x_1920;
  }
  let x_1921 : f32 = x_1912;
  u_xlat7.x = x_1921;
  let x_1924 : bool = u_xlatb25.x;
  if (x_1924) {
    let x_1929 : f32 = u_xlat4.y;
    x_1925 = x_1929;
  } else {
    let x_1932 : f32 = x_139.unity_MatrixV[1i].z;
    x_1925 = x_1932;
  }
  let x_1933 : f32 = x_1925;
  u_xlat7.y = x_1933;
  let x_1936 : bool = u_xlatb25.x;
  if (x_1936) {
    let x_1941 : f32 = u_xlat4.z;
    x_1937 = x_1941;
  } else {
    let x_1944 : f32 = x_139.unity_MatrixV[2i].z;
    x_1937 = x_1944;
  }
  let x_1945 : f32 = x_1937;
  u_xlat7.z = x_1945;
  let x_1954 : vec2<f32> = vs_INTERP5;
  let x_1956 : f32 = x_139.x_GlobalMipBias.x;
  let x_1957 : vec4<f32> = textureSampleBias(unity_Lightmap, samplerunity_Lightmap, x_1954, x_1956);
  let x_1958 : vec3<f32> = vec3<f32>(x_1957.x, x_1957.y, x_1957.z);
  let x_1959 : vec4<f32> = u_xlat4;
  u_xlat4 = vec4<f32>(x_1958.x, x_1958.y, x_1958.z, x_1959.w);
  let x_1962 : vec4<f32> = x_139.x_ScaledScreenParams;
  let x_1963 : vec2<f32> = vec2<f32>(x_1962.x, x_1962.y);
  let x_1967 : vec2<f32> = (vec2<f32>(1.0f, 1.0f) / vec2<f32>(x_1963.x, x_1963.y));
  let x_1968 : vec3<f32> = u_xlat25;
  u_xlat25 = vec3<f32>(x_1967.x, x_1968.y, x_1967.y);
  let x_1970 : vec3<f32> = u_xlat25;
  let x_1972 : vec4<f32> = hlslcc_FragCoord;
  let x_1974 : vec2<f32> = (vec2<f32>(x_1970.x, x_1970.z) * vec2<f32>(x_1972.x, x_1972.y));
  let x_1975 : vec4<f32> = u_xlat8;
  u_xlat8 = vec4<f32>(x_1974.x, x_1974.y, x_1975.z, x_1975.w);
  let x_1978 : f32 = u_xlat8.y;
  let x_1981 : f32 = x_139.x_ScaleBiasRt.x;
  let x_1984 : f32 = x_139.x_ScaleBiasRt.y;
  u_xlat25.x = ((x_1978 * x_1981) + x_1984);
  let x_1988 : f32 = u_xlat25.x;
  u_xlat8.z = (-(x_1988) + 1.0f);
  let x_1993 : f32 = u_xlat6.x;
  u_xlat6.x = x_1993;
  let x_1996 : f32 = u_xlat6.x;
  u_xlat6.x = clamp(x_1996, 0.0f, 1.0f);
  let x_1999 : f32 = u_xlat67;
  u_xlat67 = min(x_1999, 1.0f);
  let x_2001 : vec3<f32> = u_xlat5;
  u_xlat5 = (x_2001 * vec3<f32>(0.959999979f, 0.959999979f, 0.959999979f));
  let x_2006 : f32 = u_xlat6.x;
  u_xlat25.x = (-(x_2006) + 1.0f);
  let x_2011 : f32 = u_xlat25.x;
  let x_2013 : f32 = u_xlat25.x;
  u_xlat69 = (x_2011 * x_2013);
  let x_2015 : f32 = u_xlat69;
  u_xlat69 = max(x_2015, 0.0078125f);
  let x_2019 : f32 = u_xlat69;
  let x_2020 : f32 = u_xlat69;
  u_xlat70 = (x_2019 * x_2020);
  let x_2023 : f32 = u_xlat6.x;
  u_xlat71 = (x_2023 + 0.040000021f);
  let x_2026 : f32 = u_xlat71;
  u_xlat71 = min(x_2026, 1.0f);
  let x_2028 : f32 = u_xlat69;
  u_xlat6.x = ((x_2028 * 4.0f) + 2.0f);
  let x_2037 : vec4<f32> = u_xlat8;
  let x_2040 : f32 = x_139.x_GlobalMipBias.x;
  let x_2041 : vec4<f32> = textureSampleBias(x_ScreenSpaceOcclusionTexture, sampler_ScreenSpaceOcclusionTexture, vec2<f32>(x_2037.x, x_2037.z), x_2040);
  u_xlat28.x = x_2041.x;
  let x_2046 : f32 = u_xlat28.x;
  u_xlat50 = (x_2046 + -1.0f);
  let x_2049 : f32 = x_139.x_AmbientOcclusionParam.w;
  let x_2050 : f32 = u_xlat50;
  u_xlat50 = ((x_2049 * x_2050) + 1.0f);
  let x_2054 : f32 = u_xlat28.x;
  let x_2056 : f32 = vs_INTERP4.w;
  u_xlat28.x = min(x_2054, x_2056);
  let x_2059 : bool = u_xlatb0;
  if (x_2059) {
    let x_2063 : f32 = x_253.x_MainLightShadowParams.y;
    u_xlatb0 = (x_2063 == 1.0f);
    let x_2065 : bool = u_xlatb0;
    if (x_2065) {
      let x_2068 : vec4<f32> = u_xlat2;
      let x_2071 : vec4<f32> = x_253.x_MainLightShadowOffset0;
      u_xlat8 = (vec4<f32>(x_2068.x, x_2068.y, x_2068.x, x_2068.y) + x_2071);
      let x_2074 : vec4<f32> = u_xlat8;
      let x_2075 : vec2<f32> = vec2<f32>(x_2074.x, x_2074.y);
      let x_2077 : f32 = u_xlat2.z;
      txVec30 = vec3<f32>(x_2075.x, x_2075.y, x_2077);
      let x_2084 : vec3<f32> = txVec30;
      let x_2086 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2084.xy, x_2084.z);
      u_xlat9.x = x_2086;
      let x_2089 : vec4<f32> = u_xlat8;
      let x_2090 : vec2<f32> = vec2<f32>(x_2089.z, x_2089.w);
      let x_2092 : f32 = u_xlat2.z;
      txVec31 = vec3<f32>(x_2090.x, x_2090.y, x_2092);
      let x_2099 : vec3<f32> = txVec31;
      let x_2101 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2099.xy, x_2099.z);
      u_xlat9.y = x_2101;
      let x_2103 : vec4<f32> = u_xlat2;
      let x_2106 : vec4<f32> = x_253.x_MainLightShadowOffset1;
      u_xlat8 = (vec4<f32>(x_2103.x, x_2103.y, x_2103.x, x_2103.y) + x_2106);
      let x_2109 : vec4<f32> = u_xlat8;
      let x_2110 : vec2<f32> = vec2<f32>(x_2109.x, x_2109.y);
      let x_2112 : f32 = u_xlat2.z;
      txVec32 = vec3<f32>(x_2110.x, x_2110.y, x_2112);
      let x_2119 : vec3<f32> = txVec32;
      let x_2121 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2119.xy, x_2119.z);
      u_xlat9.z = x_2121;
      let x_2124 : vec4<f32> = u_xlat8;
      let x_2125 : vec2<f32> = vec2<f32>(x_2124.z, x_2124.w);
      let x_2127 : f32 = u_xlat2.z;
      txVec33 = vec3<f32>(x_2125.x, x_2125.y, x_2127);
      let x_2134 : vec3<f32> = txVec33;
      let x_2136 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2134.xy, x_2134.z);
      u_xlat9.w = x_2136;
      let x_2138 : vec4<f32> = u_xlat9;
      u_xlat0.x = dot(x_2138, vec4<f32>(0.25f, 0.25f, 0.25f, 0.25f));
    } else {
      let x_2144 : f32 = x_253.x_MainLightShadowParams.y;
      u_xlatb72 = (x_2144 == 2.0f);
      let x_2146 : bool = u_xlatb72;
      if (x_2146) {
        let x_2149 : vec4<f32> = u_xlat2;
        let x_2152 : vec4<f32> = x_253.x_MainLightShadowmapSize;
        let x_2155 : vec2<f32> = ((vec2<f32>(x_2149.x, x_2149.y) * vec2<f32>(x_2152.z, x_2152.w)) + vec2<f32>(0.5f, 0.5f));
        let x_2156 : vec4<f32> = u_xlat8;
        u_xlat8 = vec4<f32>(x_2155.x, x_2155.y, x_2156.z, x_2156.w);
        let x_2158 : vec4<f32> = u_xlat8;
        let x_2160 : vec2<f32> = floor(vec2<f32>(x_2158.x, x_2158.y));
        let x_2161 : vec4<f32> = u_xlat8;
        u_xlat8 = vec4<f32>(x_2160.x, x_2160.y, x_2161.z, x_2161.w);
        let x_2163 : vec4<f32> = u_xlat2;
        let x_2166 : vec4<f32> = x_253.x_MainLightShadowmapSize;
        let x_2169 : vec4<f32> = u_xlat8;
        u_xlat52 = ((vec2<f32>(x_2163.x, x_2163.y) * vec2<f32>(x_2166.z, x_2166.w)) + -(vec2<f32>(x_2169.x, x_2169.y)));
        let x_2173 : vec2<f32> = u_xlat52;
        u_xlat9 = (vec4<f32>(x_2173.x, x_2173.x, x_2173.y, x_2173.y) + vec4<f32>(0.5f, 1.0f, 0.5f, 1.0f));
        let x_2176 : vec4<f32> = u_xlat9;
        let x_2178 : vec4<f32> = u_xlat9;
        u_xlat10 = (vec4<f32>(x_2176.x, x_2176.x, x_2176.z, x_2176.z) * vec4<f32>(x_2178.x, x_2178.x, x_2178.z, x_2178.z));
        let x_2181 : vec4<f32> = u_xlat10;
        let x_2183 : vec2<f32> = (vec2<f32>(x_2181.y, x_2181.w) * vec2<f32>(0.079999998f, 0.079999998f));
        let x_2184 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_2183.x, x_2184.y, x_2183.y, x_2184.w);
        let x_2186 : vec4<f32> = u_xlat10;
        let x_2189 : vec2<f32> = u_xlat52;
        let x_2191 : vec2<f32> = ((vec2<f32>(x_2186.x, x_2186.z) * vec2<f32>(0.5f, 0.5f)) + -(x_2189));
        let x_2192 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_2191.x, x_2191.y, x_2192.z, x_2192.w);
        let x_2195 : vec2<f32> = u_xlat52;
        u_xlat54 = (-(x_2195) + vec2<f32>(1.0f, 1.0f));
        let x_2198 : vec2<f32> = u_xlat52;
        let x_2199 : vec2<f32> = min(x_2198, vec2<f32>(0.0f, 0.0f));
        let x_2200 : vec4<f32> = u_xlat11;
        u_xlat11 = vec4<f32>(x_2199.x, x_2199.y, x_2200.z, x_2200.w);
        let x_2202 : vec4<f32> = u_xlat11;
        let x_2205 : vec4<f32> = u_xlat11;
        let x_2208 : vec2<f32> = u_xlat54;
        let x_2209 : vec2<f32> = ((-(vec2<f32>(x_2202.x, x_2202.y)) * vec2<f32>(x_2205.x, x_2205.y)) + x_2208);
        let x_2210 : vec4<f32> = u_xlat11;
        u_xlat11 = vec4<f32>(x_2209.x, x_2209.y, x_2210.z, x_2210.w);
        let x_2212 : vec2<f32> = u_xlat52;
        u_xlat52 = max(x_2212, vec2<f32>(0.0f, 0.0f));
        let x_2214 : vec2<f32> = u_xlat52;
        let x_2216 : vec2<f32> = u_xlat52;
        let x_2218 : vec4<f32> = u_xlat9;
        u_xlat52 = ((-(x_2214) * x_2216) + vec2<f32>(x_2218.y, x_2218.w));
        let x_2221 : vec4<f32> = u_xlat11;
        let x_2223 : vec2<f32> = (vec2<f32>(x_2221.x, x_2221.y) + vec2<f32>(1.0f, 1.0f));
        let x_2224 : vec4<f32> = u_xlat11;
        u_xlat11 = vec4<f32>(x_2223.x, x_2223.y, x_2224.z, x_2224.w);
        let x_2226 : vec2<f32> = u_xlat52;
        u_xlat52 = (x_2226 + vec2<f32>(1.0f, 1.0f));
        let x_2228 : vec4<f32> = u_xlat10;
        let x_2230 : vec2<f32> = (vec2<f32>(x_2228.x, x_2228.y) * vec2<f32>(0.159999996f, 0.159999996f));
        let x_2231 : vec4<f32> = u_xlat12;
        u_xlat12 = vec4<f32>(x_2230.x, x_2230.y, x_2231.z, x_2231.w);
        let x_2233 : vec2<f32> = u_xlat54;
        let x_2234 : vec2<f32> = (x_2233 * vec2<f32>(0.159999996f, 0.159999996f));
        let x_2235 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_2234.x, x_2234.y, x_2235.z, x_2235.w);
        let x_2237 : vec4<f32> = u_xlat11;
        let x_2239 : vec2<f32> = (vec2<f32>(x_2237.x, x_2237.y) * vec2<f32>(0.159999996f, 0.159999996f));
        let x_2240 : vec4<f32> = u_xlat11;
        u_xlat11 = vec4<f32>(x_2239.x, x_2239.y, x_2240.z, x_2240.w);
        let x_2242 : vec2<f32> = u_xlat52;
        let x_2243 : vec2<f32> = (x_2242 * vec2<f32>(0.159999996f, 0.159999996f));
        let x_2244 : vec4<f32> = u_xlat13;
        u_xlat13 = vec4<f32>(x_2243.x, x_2243.y, x_2244.z, x_2244.w);
        let x_2246 : vec4<f32> = u_xlat9;
        u_xlat52 = (vec2<f32>(x_2246.y, x_2246.w) * vec2<f32>(0.159999996f, 0.159999996f));
        let x_2250 : f32 = u_xlat11.x;
        u_xlat12.z = x_2250;
        let x_2253 : f32 = u_xlat52.x;
        u_xlat12.w = x_2253;
        let x_2256 : f32 = u_xlat13.x;
        u_xlat10.z = x_2256;
        let x_2259 : f32 = u_xlat9.x;
        u_xlat10.w = x_2259;
        let x_2261 : vec4<f32> = u_xlat10;
        let x_2263 : vec4<f32> = u_xlat12;
        u_xlat14 = (vec4<f32>(x_2261.z, x_2261.w, x_2261.x, x_2261.z) + vec4<f32>(x_2263.z, x_2263.w, x_2263.x, x_2263.z));
        let x_2267 : f32 = u_xlat12.y;
        u_xlat11.z = x_2267;
        let x_2270 : f32 = u_xlat52.y;
        u_xlat11.w = x_2270;
        let x_2273 : f32 = u_xlat10.y;
        u_xlat13.z = x_2273;
        let x_2276 : f32 = u_xlat9.z;
        u_xlat13.w = x_2276;
        let x_2278 : vec4<f32> = u_xlat11;
        let x_2280 : vec4<f32> = u_xlat13;
        let x_2282 : vec3<f32> = (vec3<f32>(x_2278.z, x_2278.y, x_2278.w) + vec3<f32>(x_2280.z, x_2280.y, x_2280.w));
        let x_2283 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_2282.x, x_2282.y, x_2282.z, x_2283.w);
        let x_2285 : vec4<f32> = u_xlat10;
        let x_2287 : vec4<f32> = u_xlat14;
        let x_2289 : vec3<f32> = (vec3<f32>(x_2285.x, x_2285.z, x_2285.w) / vec3<f32>(x_2287.z, x_2287.w, x_2287.y));
        let x_2290 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_2289.x, x_2289.y, x_2289.z, x_2290.w);
        let x_2292 : vec4<f32> = u_xlat10;
        let x_2294 : vec3<f32> = (vec3<f32>(x_2292.x, x_2292.y, x_2292.z) + vec3<f32>(-2.5f, -0.5f, 1.5f));
        let x_2295 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_2294.x, x_2294.y, x_2294.z, x_2295.w);
        let x_2297 : vec4<f32> = u_xlat13;
        let x_2299 : vec4<f32> = u_xlat9;
        let x_2301 : vec3<f32> = (vec3<f32>(x_2297.z, x_2297.y, x_2297.w) / vec3<f32>(x_2299.x, x_2299.y, x_2299.z));
        let x_2302 : vec4<f32> = u_xlat11;
        u_xlat11 = vec4<f32>(x_2301.x, x_2301.y, x_2301.z, x_2302.w);
        let x_2304 : vec4<f32> = u_xlat11;
        let x_2306 : vec3<f32> = (vec3<f32>(x_2304.x, x_2304.y, x_2304.z) + vec3<f32>(-2.5f, -0.5f, 1.5f));
        let x_2307 : vec4<f32> = u_xlat11;
        u_xlat11 = vec4<f32>(x_2306.x, x_2306.y, x_2306.z, x_2307.w);
        let x_2309 : vec4<f32> = u_xlat10;
        let x_2312 : vec4<f32> = x_253.x_MainLightShadowmapSize;
        let x_2314 : vec3<f32> = (vec3<f32>(x_2309.y, x_2309.x, x_2309.z) * vec3<f32>(x_2312.x, x_2312.x, x_2312.x));
        let x_2315 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_2314.x, x_2314.y, x_2314.z, x_2315.w);
        let x_2317 : vec4<f32> = u_xlat11;
        let x_2320 : vec4<f32> = x_253.x_MainLightShadowmapSize;
        let x_2322 : vec3<f32> = (vec3<f32>(x_2317.x, x_2317.y, x_2317.z) * vec3<f32>(x_2320.y, x_2320.y, x_2320.y));
        let x_2323 : vec4<f32> = u_xlat11;
        u_xlat11 = vec4<f32>(x_2322.x, x_2322.y, x_2322.z, x_2323.w);
        let x_2326 : f32 = u_xlat11.x;
        u_xlat10.w = x_2326;
        let x_2328 : vec4<f32> = u_xlat8;
        let x_2331 : vec4<f32> = x_253.x_MainLightShadowmapSize;
        let x_2334 : vec4<f32> = u_xlat10;
        u_xlat12 = ((vec4<f32>(x_2328.x, x_2328.y, x_2328.x, x_2328.y) * vec4<f32>(x_2331.x, x_2331.y, x_2331.x, x_2331.y)) + vec4<f32>(x_2334.y, x_2334.w, x_2334.x, x_2334.w));
        let x_2337 : vec4<f32> = u_xlat8;
        let x_2340 : vec4<f32> = x_253.x_MainLightShadowmapSize;
        let x_2343 : vec4<f32> = u_xlat10;
        u_xlat52 = ((vec2<f32>(x_2337.x, x_2337.y) * vec2<f32>(x_2340.x, x_2340.y)) + vec2<f32>(x_2343.z, x_2343.w));
        let x_2347 : f32 = u_xlat10.y;
        u_xlat11.w = x_2347;
        let x_2349 : vec4<f32> = u_xlat11;
        let x_2350 : vec2<f32> = vec2<f32>(x_2349.y, x_2349.z);
        let x_2351 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_2351.x, x_2350.x, x_2351.z, x_2350.y);
        let x_2353 : vec4<f32> = u_xlat8;
        let x_2356 : vec4<f32> = x_253.x_MainLightShadowmapSize;
        let x_2359 : vec4<f32> = u_xlat10;
        u_xlat13 = ((vec4<f32>(x_2353.x, x_2353.y, x_2353.x, x_2353.y) * vec4<f32>(x_2356.x, x_2356.y, x_2356.x, x_2356.y)) + vec4<f32>(x_2359.x, x_2359.y, x_2359.z, x_2359.y));
        let x_2362 : vec4<f32> = u_xlat8;
        let x_2365 : vec4<f32> = x_253.x_MainLightShadowmapSize;
        let x_2368 : vec4<f32> = u_xlat11;
        u_xlat11 = ((vec4<f32>(x_2362.x, x_2362.y, x_2362.x, x_2362.y) * vec4<f32>(x_2365.x, x_2365.y, x_2365.x, x_2365.y)) + vec4<f32>(x_2368.w, x_2368.y, x_2368.w, x_2368.z));
        let x_2371 : vec4<f32> = u_xlat8;
        let x_2374 : vec4<f32> = x_253.x_MainLightShadowmapSize;
        let x_2377 : vec4<f32> = u_xlat10;
        u_xlat10 = ((vec4<f32>(x_2371.x, x_2371.y, x_2371.x, x_2371.y) * vec4<f32>(x_2374.x, x_2374.y, x_2374.x, x_2374.y)) + vec4<f32>(x_2377.x, x_2377.w, x_2377.z, x_2377.w));
        let x_2380 : vec4<f32> = u_xlat9;
        let x_2382 : vec4<f32> = u_xlat14;
        u_xlat15 = (vec4<f32>(x_2380.x, x_2380.x, x_2380.x, x_2380.y) * vec4<f32>(x_2382.z, x_2382.w, x_2382.y, x_2382.z));
        let x_2385 : vec4<f32> = u_xlat9;
        let x_2387 : vec4<f32> = u_xlat14;
        u_xlat16 = (vec4<f32>(x_2385.y, x_2385.y, x_2385.z, x_2385.z) * x_2387);
        let x_2391 : f32 = u_xlat9.z;
        let x_2393 : f32 = u_xlat14.y;
        u_xlat72 = (x_2391 * x_2393);
        let x_2396 : vec4<f32> = u_xlat12;
        let x_2397 : vec2<f32> = vec2<f32>(x_2396.x, x_2396.y);
        let x_2399 : f32 = u_xlat2.z;
        txVec34 = vec3<f32>(x_2397.x, x_2397.y, x_2399);
        let x_2407 : vec3<f32> = txVec34;
        let x_2409 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2407.xy, x_2407.z);
        u_xlat73 = x_2409;
        let x_2411 : vec4<f32> = u_xlat12;
        let x_2412 : vec2<f32> = vec2<f32>(x_2411.z, x_2411.w);
        let x_2414 : f32 = u_xlat2.z;
        txVec35 = vec3<f32>(x_2412.x, x_2412.y, x_2414);
        let x_2421 : vec3<f32> = txVec35;
        let x_2423 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2421.xy, x_2421.z);
        u_xlat8.x = x_2423;
        let x_2426 : f32 = u_xlat8.x;
        let x_2428 : f32 = u_xlat15.y;
        u_xlat8.x = (x_2426 * x_2428);
        let x_2432 : f32 = u_xlat15.x;
        let x_2433 : f32 = u_xlat73;
        let x_2436 : f32 = u_xlat8.x;
        u_xlat73 = ((x_2432 * x_2433) + x_2436);
        let x_2439 : vec2<f32> = u_xlat52;
        let x_2441 : f32 = u_xlat2.z;
        txVec36 = vec3<f32>(x_2439.x, x_2439.y, x_2441);
        let x_2448 : vec3<f32> = txVec36;
        let x_2450 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2448.xy, x_2448.z);
        u_xlat8.x = x_2450;
        let x_2453 : f32 = u_xlat15.z;
        let x_2455 : f32 = u_xlat8.x;
        let x_2457 : f32 = u_xlat73;
        u_xlat73 = ((x_2453 * x_2455) + x_2457);
        let x_2460 : vec4<f32> = u_xlat11;
        let x_2461 : vec2<f32> = vec2<f32>(x_2460.x, x_2460.y);
        let x_2463 : f32 = u_xlat2.z;
        txVec37 = vec3<f32>(x_2461.x, x_2461.y, x_2463);
        let x_2470 : vec3<f32> = txVec37;
        let x_2472 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2470.xy, x_2470.z);
        u_xlat8.x = x_2472;
        let x_2475 : f32 = u_xlat15.w;
        let x_2477 : f32 = u_xlat8.x;
        let x_2479 : f32 = u_xlat73;
        u_xlat73 = ((x_2475 * x_2477) + x_2479);
        let x_2482 : vec4<f32> = u_xlat13;
        let x_2483 : vec2<f32> = vec2<f32>(x_2482.x, x_2482.y);
        let x_2485 : f32 = u_xlat2.z;
        txVec38 = vec3<f32>(x_2483.x, x_2483.y, x_2485);
        let x_2492 : vec3<f32> = txVec38;
        let x_2494 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2492.xy, x_2492.z);
        u_xlat8.x = x_2494;
        let x_2497 : f32 = u_xlat16.x;
        let x_2499 : f32 = u_xlat8.x;
        let x_2501 : f32 = u_xlat73;
        u_xlat73 = ((x_2497 * x_2499) + x_2501);
        let x_2504 : vec4<f32> = u_xlat13;
        let x_2505 : vec2<f32> = vec2<f32>(x_2504.z, x_2504.w);
        let x_2507 : f32 = u_xlat2.z;
        txVec39 = vec3<f32>(x_2505.x, x_2505.y, x_2507);
        let x_2514 : vec3<f32> = txVec39;
        let x_2516 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2514.xy, x_2514.z);
        u_xlat8.x = x_2516;
        let x_2519 : f32 = u_xlat16.y;
        let x_2521 : f32 = u_xlat8.x;
        let x_2523 : f32 = u_xlat73;
        u_xlat73 = ((x_2519 * x_2521) + x_2523);
        let x_2526 : vec4<f32> = u_xlat11;
        let x_2527 : vec2<f32> = vec2<f32>(x_2526.z, x_2526.w);
        let x_2529 : f32 = u_xlat2.z;
        txVec40 = vec3<f32>(x_2527.x, x_2527.y, x_2529);
        let x_2536 : vec3<f32> = txVec40;
        let x_2538 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2536.xy, x_2536.z);
        u_xlat8.x = x_2538;
        let x_2541 : f32 = u_xlat16.z;
        let x_2543 : f32 = u_xlat8.x;
        let x_2545 : f32 = u_xlat73;
        u_xlat73 = ((x_2541 * x_2543) + x_2545);
        let x_2548 : vec4<f32> = u_xlat10;
        let x_2549 : vec2<f32> = vec2<f32>(x_2548.x, x_2548.y);
        let x_2551 : f32 = u_xlat2.z;
        txVec41 = vec3<f32>(x_2549.x, x_2549.y, x_2551);
        let x_2558 : vec3<f32> = txVec41;
        let x_2560 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2558.xy, x_2558.z);
        u_xlat8.x = x_2560;
        let x_2563 : f32 = u_xlat16.w;
        let x_2565 : f32 = u_xlat8.x;
        let x_2567 : f32 = u_xlat73;
        u_xlat73 = ((x_2563 * x_2565) + x_2567);
        let x_2570 : vec4<f32> = u_xlat10;
        let x_2571 : vec2<f32> = vec2<f32>(x_2570.z, x_2570.w);
        let x_2573 : f32 = u_xlat2.z;
        txVec42 = vec3<f32>(x_2571.x, x_2571.y, x_2573);
        let x_2580 : vec3<f32> = txVec42;
        let x_2582 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2580.xy, x_2580.z);
        u_xlat8.x = x_2582;
        let x_2584 : f32 = u_xlat72;
        let x_2586 : f32 = u_xlat8.x;
        let x_2588 : f32 = u_xlat73;
        u_xlat0.x = ((x_2584 * x_2586) + x_2588);
      } else {
        let x_2592 : vec4<f32> = u_xlat2;
        let x_2595 : vec4<f32> = x_253.x_MainLightShadowmapSize;
        let x_2598 : vec2<f32> = ((vec2<f32>(x_2592.x, x_2592.y) * vec2<f32>(x_2595.z, x_2595.w)) + vec2<f32>(0.5f, 0.5f));
        let x_2599 : vec4<f32> = u_xlat8;
        u_xlat8 = vec4<f32>(x_2598.x, x_2598.y, x_2599.z, x_2599.w);
        let x_2601 : vec4<f32> = u_xlat8;
        let x_2603 : vec2<f32> = floor(vec2<f32>(x_2601.x, x_2601.y));
        let x_2604 : vec4<f32> = u_xlat8;
        u_xlat8 = vec4<f32>(x_2603.x, x_2603.y, x_2604.z, x_2604.w);
        let x_2606 : vec4<f32> = u_xlat2;
        let x_2609 : vec4<f32> = x_253.x_MainLightShadowmapSize;
        let x_2612 : vec4<f32> = u_xlat8;
        u_xlat52 = ((vec2<f32>(x_2606.x, x_2606.y) * vec2<f32>(x_2609.z, x_2609.w)) + -(vec2<f32>(x_2612.x, x_2612.y)));
        let x_2616 : vec2<f32> = u_xlat52;
        u_xlat9 = (vec4<f32>(x_2616.x, x_2616.x, x_2616.y, x_2616.y) + vec4<f32>(0.5f, 1.0f, 0.5f, 1.0f));
        let x_2619 : vec4<f32> = u_xlat9;
        let x_2621 : vec4<f32> = u_xlat9;
        u_xlat10 = (vec4<f32>(x_2619.x, x_2619.x, x_2619.z, x_2619.z) * vec4<f32>(x_2621.x, x_2621.x, x_2621.z, x_2621.z));
        let x_2624 : vec4<f32> = u_xlat10;
        let x_2626 : vec2<f32> = (vec2<f32>(x_2624.y, x_2624.w) * vec2<f32>(0.040816002f, 0.040816002f));
        let x_2627 : vec4<f32> = u_xlat11;
        u_xlat11 = vec4<f32>(x_2627.x, x_2626.x, x_2627.z, x_2626.y);
        let x_2629 : vec4<f32> = u_xlat10;
        let x_2632 : vec2<f32> = u_xlat52;
        let x_2634 : vec2<f32> = ((vec2<f32>(x_2629.x, x_2629.z) * vec2<f32>(0.5f, 0.5f)) + -(x_2632));
        let x_2635 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_2634.x, x_2635.y, x_2634.y, x_2635.w);
        let x_2637 : vec2<f32> = u_xlat52;
        let x_2639 : vec2<f32> = (-(x_2637) + vec2<f32>(1.0f, 1.0f));
        let x_2640 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_2639.x, x_2639.y, x_2640.z, x_2640.w);
        let x_2642 : vec2<f32> = u_xlat52;
        u_xlat54 = min(x_2642, vec2<f32>(0.0f, 0.0f));
        let x_2644 : vec2<f32> = u_xlat54;
        let x_2646 : vec2<f32> = u_xlat54;
        let x_2648 : vec4<f32> = u_xlat10;
        let x_2650 : vec2<f32> = ((-(x_2644) * x_2646) + vec2<f32>(x_2648.x, x_2648.y));
        let x_2651 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_2650.x, x_2650.y, x_2651.z, x_2651.w);
        let x_2653 : vec2<f32> = u_xlat52;
        u_xlat54 = max(x_2653, vec2<f32>(0.0f, 0.0f));
        let x_2656 : vec2<f32> = u_xlat54;
        let x_2658 : vec2<f32> = u_xlat54;
        let x_2660 : vec4<f32> = u_xlat9;
        let x_2662 : vec2<f32> = ((-(x_2656) * x_2658) + vec2<f32>(x_2660.y, x_2660.w));
        let x_2663 : vec3<f32> = u_xlat31;
        u_xlat31 = vec3<f32>(x_2662.x, x_2663.y, x_2662.y);
        let x_2665 : vec4<f32> = u_xlat10;
        let x_2667 : vec2<f32> = (vec2<f32>(x_2665.x, x_2665.y) + vec2<f32>(2.0f, 2.0f));
        let x_2668 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_2667.x, x_2667.y, x_2668.z, x_2668.w);
        let x_2670 : vec3<f32> = u_xlat31;
        let x_2672 : vec2<f32> = (vec2<f32>(x_2670.x, x_2670.z) + vec2<f32>(2.0f, 2.0f));
        let x_2673 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_2673.x, x_2672.x, x_2673.z, x_2672.y);
        let x_2676 : f32 = u_xlat9.y;
        u_xlat12.z = (x_2676 * 0.081632003f);
        let x_2679 : vec4<f32> = u_xlat9;
        let x_2681 : vec3<f32> = (vec3<f32>(x_2679.z, x_2679.x, x_2679.w) * vec3<f32>(0.081632003f, 0.081632003f, 0.081632003f));
        let x_2682 : vec4<f32> = u_xlat13;
        u_xlat13 = vec4<f32>(x_2681.x, x_2681.y, x_2681.z, x_2682.w);
        let x_2684 : vec4<f32> = u_xlat10;
        let x_2686 : vec2<f32> = (vec2<f32>(x_2684.x, x_2684.y) * vec2<f32>(0.081632003f, 0.081632003f));
        let x_2687 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_2686.x, x_2686.y, x_2687.z, x_2687.w);
        let x_2690 : f32 = u_xlat13.y;
        u_xlat12.x = x_2690;
        let x_2692 : vec2<f32> = u_xlat52;
        let x_2695 : vec2<f32> = ((vec2<f32>(x_2692.x, x_2692.x) * vec2<f32>(-0.081632003f, 0.081632003f)) + vec2<f32>(0.163264006f, 0.081632003f));
        let x_2696 : vec4<f32> = u_xlat12;
        u_xlat12 = vec4<f32>(x_2696.x, x_2695.x, x_2696.z, x_2695.y);
        let x_2698 : vec2<f32> = u_xlat52;
        let x_2701 : vec2<f32> = ((vec2<f32>(x_2698.x, x_2698.x) * vec2<f32>(-0.081632003f, 0.081632003f)) + vec2<f32>(0.081632003f, 0.163264006f));
        let x_2702 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_2701.x, x_2702.y, x_2701.y, x_2702.w);
        let x_2705 : f32 = u_xlat9.x;
        u_xlat10.y = x_2705;
        let x_2708 : f32 = u_xlat11.y;
        u_xlat10.w = x_2708;
        let x_2710 : vec4<f32> = u_xlat10;
        let x_2711 : vec4<f32> = u_xlat12;
        u_xlat12 = (x_2710 + x_2711);
        let x_2713 : vec2<f32> = u_xlat52;
        let x_2716 : vec2<f32> = ((vec2<f32>(x_2713.y, x_2713.y) * vec2<f32>(-0.081632003f, 0.081632003f)) + vec2<f32>(0.163264006f, 0.081632003f));
        let x_2717 : vec4<f32> = u_xlat13;
        u_xlat13 = vec4<f32>(x_2717.x, x_2716.x, x_2717.z, x_2716.y);
        let x_2719 : vec2<f32> = u_xlat52;
        let x_2722 : vec2<f32> = ((vec2<f32>(x_2719.y, x_2719.y) * vec2<f32>(-0.081632003f, 0.081632003f)) + vec2<f32>(0.081632003f, 0.163264006f));
        let x_2723 : vec4<f32> = u_xlat11;
        u_xlat11 = vec4<f32>(x_2722.x, x_2723.y, x_2722.y, x_2723.w);
        let x_2726 : f32 = u_xlat9.y;
        u_xlat11.y = x_2726;
        let x_2728 : vec4<f32> = u_xlat11;
        let x_2729 : vec4<f32> = u_xlat13;
        u_xlat9 = (x_2728 + x_2729);
        let x_2731 : vec4<f32> = u_xlat10;
        let x_2732 : vec4<f32> = u_xlat12;
        u_xlat10 = (x_2731 / x_2732);
        let x_2734 : vec4<f32> = u_xlat10;
        u_xlat10 = (x_2734 + vec4<f32>(-3.5f, -1.5f, 0.5f, 2.5f));
        let x_2736 : vec4<f32> = u_xlat11;
        let x_2737 : vec4<f32> = u_xlat9;
        u_xlat11 = (x_2736 / x_2737);
        let x_2739 : vec4<f32> = u_xlat11;
        u_xlat11 = (x_2739 + vec4<f32>(-3.5f, -1.5f, 0.5f, 2.5f));
        let x_2741 : vec4<f32> = u_xlat10;
        let x_2744 : vec4<f32> = x_253.x_MainLightShadowmapSize;
        u_xlat10 = (vec4<f32>(x_2741.w, x_2741.x, x_2741.y, x_2741.z) * vec4<f32>(x_2744.x, x_2744.x, x_2744.x, x_2744.x));
        let x_2747 : vec4<f32> = u_xlat11;
        let x_2750 : vec4<f32> = x_253.x_MainLightShadowmapSize;
        u_xlat11 = (vec4<f32>(x_2747.x, x_2747.w, x_2747.y, x_2747.z) * vec4<f32>(x_2750.y, x_2750.y, x_2750.y, x_2750.y));
        let x_2753 : vec4<f32> = u_xlat10;
        let x_2754 : vec3<f32> = vec3<f32>(x_2753.y, x_2753.z, x_2753.w);
        let x_2755 : vec4<f32> = u_xlat13;
        u_xlat13 = vec4<f32>(x_2754.x, x_2755.y, x_2754.y, x_2754.z);
        let x_2758 : f32 = u_xlat11.x;
        u_xlat13.y = x_2758;
        let x_2760 : vec4<f32> = u_xlat8;
        let x_2763 : vec4<f32> = x_253.x_MainLightShadowmapSize;
        let x_2766 : vec4<f32> = u_xlat13;
        u_xlat14 = ((vec4<f32>(x_2760.x, x_2760.y, x_2760.x, x_2760.y) * vec4<f32>(x_2763.x, x_2763.y, x_2763.x, x_2763.y)) + vec4<f32>(x_2766.x, x_2766.y, x_2766.z, x_2766.y));
        let x_2769 : vec4<f32> = u_xlat8;
        let x_2772 : vec4<f32> = x_253.x_MainLightShadowmapSize;
        let x_2775 : vec4<f32> = u_xlat13;
        u_xlat52 = ((vec2<f32>(x_2769.x, x_2769.y) * vec2<f32>(x_2772.x, x_2772.y)) + vec2<f32>(x_2775.w, x_2775.y));
        let x_2779 : f32 = u_xlat13.y;
        u_xlat10.y = x_2779;
        let x_2782 : f32 = u_xlat11.z;
        u_xlat13.y = x_2782;
        let x_2784 : vec4<f32> = u_xlat8;
        let x_2787 : vec4<f32> = x_253.x_MainLightShadowmapSize;
        let x_2790 : vec4<f32> = u_xlat13;
        u_xlat15 = ((vec4<f32>(x_2784.x, x_2784.y, x_2784.x, x_2784.y) * vec4<f32>(x_2787.x, x_2787.y, x_2787.x, x_2787.y)) + vec4<f32>(x_2790.x, x_2790.y, x_2790.z, x_2790.y));
        let x_2793 : vec4<f32> = u_xlat8;
        let x_2796 : vec4<f32> = x_253.x_MainLightShadowmapSize;
        let x_2799 : vec4<f32> = u_xlat13;
        let x_2801 : vec2<f32> = ((vec2<f32>(x_2793.x, x_2793.y) * vec2<f32>(x_2796.x, x_2796.y)) + vec2<f32>(x_2799.w, x_2799.y));
        let x_2802 : vec4<f32> = u_xlat16;
        u_xlat16 = vec4<f32>(x_2801.x, x_2801.y, x_2802.z, x_2802.w);
        let x_2805 : f32 = u_xlat13.y;
        u_xlat10.z = x_2805;
        let x_2807 : vec4<f32> = u_xlat8;
        let x_2810 : vec4<f32> = x_253.x_MainLightShadowmapSize;
        let x_2813 : vec4<f32> = u_xlat10;
        u_xlat17 = ((vec4<f32>(x_2807.x, x_2807.y, x_2807.x, x_2807.y) * vec4<f32>(x_2810.x, x_2810.y, x_2810.x, x_2810.y)) + vec4<f32>(x_2813.x, x_2813.y, x_2813.x, x_2813.z));
        let x_2817 : f32 = u_xlat11.w;
        u_xlat13.y = x_2817;
        let x_2819 : vec4<f32> = u_xlat8;
        let x_2822 : vec4<f32> = x_253.x_MainLightShadowmapSize;
        let x_2825 : vec4<f32> = u_xlat13;
        u_xlat18 = ((vec4<f32>(x_2819.x, x_2819.y, x_2819.x, x_2819.y) * vec4<f32>(x_2822.x, x_2822.y, x_2822.x, x_2822.y)) + vec4<f32>(x_2825.x, x_2825.y, x_2825.z, x_2825.y));
        let x_2829 : vec4<f32> = u_xlat8;
        let x_2832 : vec4<f32> = x_253.x_MainLightShadowmapSize;
        let x_2835 : vec4<f32> = u_xlat13;
        u_xlat32 = ((vec2<f32>(x_2829.x, x_2829.y) * vec2<f32>(x_2832.x, x_2832.y)) + vec2<f32>(x_2835.w, x_2835.y));
        let x_2839 : f32 = u_xlat13.y;
        u_xlat10.w = x_2839;
        let x_2842 : vec4<f32> = u_xlat8;
        let x_2845 : vec4<f32> = x_253.x_MainLightShadowmapSize;
        let x_2848 : vec4<f32> = u_xlat10;
        u_xlat60 = ((vec2<f32>(x_2842.x, x_2842.y) * vec2<f32>(x_2845.x, x_2845.y)) + vec2<f32>(x_2848.x, x_2848.w));
        let x_2851 : vec4<f32> = u_xlat13;
        let x_2852 : vec3<f32> = vec3<f32>(x_2851.x, x_2851.z, x_2851.w);
        let x_2853 : vec4<f32> = u_xlat11;
        u_xlat11 = vec4<f32>(x_2852.x, x_2853.y, x_2852.y, x_2852.z);
        let x_2855 : vec4<f32> = u_xlat8;
        let x_2858 : vec4<f32> = x_253.x_MainLightShadowmapSize;
        let x_2861 : vec4<f32> = u_xlat11;
        u_xlat13 = ((vec4<f32>(x_2855.x, x_2855.y, x_2855.x, x_2855.y) * vec4<f32>(x_2858.x, x_2858.y, x_2858.x, x_2858.y)) + vec4<f32>(x_2861.x, x_2861.y, x_2861.z, x_2861.y));
        let x_2865 : vec4<f32> = u_xlat8;
        let x_2868 : vec4<f32> = x_253.x_MainLightShadowmapSize;
        let x_2871 : vec4<f32> = u_xlat11;
        u_xlat55 = ((vec2<f32>(x_2865.x, x_2865.y) * vec2<f32>(x_2868.x, x_2868.y)) + vec2<f32>(x_2871.w, x_2871.y));
        let x_2875 : f32 = u_xlat10.x;
        u_xlat11.x = x_2875;
        let x_2877 : vec4<f32> = u_xlat8;
        let x_2880 : vec4<f32> = x_253.x_MainLightShadowmapSize;
        let x_2883 : vec4<f32> = u_xlat11;
        let x_2885 : vec2<f32> = ((vec2<f32>(x_2877.x, x_2877.y) * vec2<f32>(x_2880.x, x_2880.y)) + vec2<f32>(x_2883.x, x_2883.y));
        let x_2886 : vec4<f32> = u_xlat8;
        u_xlat8 = vec4<f32>(x_2885.x, x_2885.y, x_2886.z, x_2886.w);
        let x_2888 : vec4<f32> = u_xlat9;
        let x_2890 : vec4<f32> = u_xlat12;
        u_xlat19 = (vec4<f32>(x_2888.x, x_2888.x, x_2888.x, x_2888.x) * x_2890);
        let x_2893 : vec4<f32> = u_xlat9;
        let x_2895 : vec4<f32> = u_xlat12;
        u_xlat20 = (vec4<f32>(x_2893.y, x_2893.y, x_2893.y, x_2893.y) * x_2895);
        let x_2898 : vec4<f32> = u_xlat9;
        let x_2900 : vec4<f32> = u_xlat12;
        u_xlat21 = (vec4<f32>(x_2898.z, x_2898.z, x_2898.z, x_2898.z) * x_2900);
        let x_2902 : vec4<f32> = u_xlat9;
        let x_2904 : vec4<f32> = u_xlat12;
        u_xlat9 = (vec4<f32>(x_2902.w, x_2902.w, x_2902.w, x_2902.w) * x_2904);
        let x_2907 : vec4<f32> = u_xlat14;
        let x_2908 : vec2<f32> = vec2<f32>(x_2907.x, x_2907.y);
        let x_2910 : f32 = u_xlat2.z;
        txVec43 = vec3<f32>(x_2908.x, x_2908.y, x_2910);
        let x_2917 : vec3<f32> = txVec43;
        let x_2919 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2917.xy, x_2917.z);
        u_xlat72 = x_2919;
        let x_2921 : vec4<f32> = u_xlat14;
        let x_2922 : vec2<f32> = vec2<f32>(x_2921.z, x_2921.w);
        let x_2924 : f32 = u_xlat2.z;
        txVec44 = vec3<f32>(x_2922.x, x_2922.y, x_2924);
        let x_2931 : vec3<f32> = txVec44;
        let x_2933 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2931.xy, x_2931.z);
        u_xlat73 = x_2933;
        let x_2934 : f32 = u_xlat73;
        let x_2936 : f32 = u_xlat19.y;
        u_xlat73 = (x_2934 * x_2936);
        let x_2939 : f32 = u_xlat19.x;
        let x_2940 : f32 = u_xlat72;
        let x_2942 : f32 = u_xlat73;
        u_xlat72 = ((x_2939 * x_2940) + x_2942);
        let x_2945 : vec2<f32> = u_xlat52;
        let x_2947 : f32 = u_xlat2.z;
        txVec45 = vec3<f32>(x_2945.x, x_2945.y, x_2947);
        let x_2954 : vec3<f32> = txVec45;
        let x_2956 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2954.xy, x_2954.z);
        u_xlat73 = x_2956;
        let x_2958 : f32 = u_xlat19.z;
        let x_2959 : f32 = u_xlat73;
        let x_2961 : f32 = u_xlat72;
        u_xlat72 = ((x_2958 * x_2959) + x_2961);
        let x_2964 : vec4<f32> = u_xlat17;
        let x_2965 : vec2<f32> = vec2<f32>(x_2964.x, x_2964.y);
        let x_2967 : f32 = u_xlat2.z;
        txVec46 = vec3<f32>(x_2965.x, x_2965.y, x_2967);
        let x_2974 : vec3<f32> = txVec46;
        let x_2976 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2974.xy, x_2974.z);
        u_xlat73 = x_2976;
        let x_2978 : f32 = u_xlat19.w;
        let x_2979 : f32 = u_xlat73;
        let x_2981 : f32 = u_xlat72;
        u_xlat72 = ((x_2978 * x_2979) + x_2981);
        let x_2984 : vec4<f32> = u_xlat15;
        let x_2985 : vec2<f32> = vec2<f32>(x_2984.x, x_2984.y);
        let x_2987 : f32 = u_xlat2.z;
        txVec47 = vec3<f32>(x_2985.x, x_2985.y, x_2987);
        let x_2994 : vec3<f32> = txVec47;
        let x_2996 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2994.xy, x_2994.z);
        u_xlat73 = x_2996;
        let x_2998 : f32 = u_xlat20.x;
        let x_2999 : f32 = u_xlat73;
        let x_3001 : f32 = u_xlat72;
        u_xlat72 = ((x_2998 * x_2999) + x_3001);
        let x_3004 : vec4<f32> = u_xlat15;
        let x_3005 : vec2<f32> = vec2<f32>(x_3004.z, x_3004.w);
        let x_3007 : f32 = u_xlat2.z;
        txVec48 = vec3<f32>(x_3005.x, x_3005.y, x_3007);
        let x_3014 : vec3<f32> = txVec48;
        let x_3016 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_3014.xy, x_3014.z);
        u_xlat73 = x_3016;
        let x_3018 : f32 = u_xlat20.y;
        let x_3019 : f32 = u_xlat73;
        let x_3021 : f32 = u_xlat72;
        u_xlat72 = ((x_3018 * x_3019) + x_3021);
        let x_3024 : vec4<f32> = u_xlat16;
        let x_3025 : vec2<f32> = vec2<f32>(x_3024.x, x_3024.y);
        let x_3027 : f32 = u_xlat2.z;
        txVec49 = vec3<f32>(x_3025.x, x_3025.y, x_3027);
        let x_3034 : vec3<f32> = txVec49;
        let x_3036 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_3034.xy, x_3034.z);
        u_xlat73 = x_3036;
        let x_3038 : f32 = u_xlat20.z;
        let x_3039 : f32 = u_xlat73;
        let x_3041 : f32 = u_xlat72;
        u_xlat72 = ((x_3038 * x_3039) + x_3041);
        let x_3044 : vec4<f32> = u_xlat17;
        let x_3045 : vec2<f32> = vec2<f32>(x_3044.z, x_3044.w);
        let x_3047 : f32 = u_xlat2.z;
        txVec50 = vec3<f32>(x_3045.x, x_3045.y, x_3047);
        let x_3054 : vec3<f32> = txVec50;
        let x_3056 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_3054.xy, x_3054.z);
        u_xlat73 = x_3056;
        let x_3058 : f32 = u_xlat20.w;
        let x_3059 : f32 = u_xlat73;
        let x_3061 : f32 = u_xlat72;
        u_xlat72 = ((x_3058 * x_3059) + x_3061);
        let x_3064 : vec4<f32> = u_xlat18;
        let x_3065 : vec2<f32> = vec2<f32>(x_3064.x, x_3064.y);
        let x_3067 : f32 = u_xlat2.z;
        txVec51 = vec3<f32>(x_3065.x, x_3065.y, x_3067);
        let x_3074 : vec3<f32> = txVec51;
        let x_3076 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_3074.xy, x_3074.z);
        u_xlat73 = x_3076;
        let x_3078 : f32 = u_xlat21.x;
        let x_3079 : f32 = u_xlat73;
        let x_3081 : f32 = u_xlat72;
        u_xlat72 = ((x_3078 * x_3079) + x_3081);
        let x_3084 : vec4<f32> = u_xlat18;
        let x_3085 : vec2<f32> = vec2<f32>(x_3084.z, x_3084.w);
        let x_3087 : f32 = u_xlat2.z;
        txVec52 = vec3<f32>(x_3085.x, x_3085.y, x_3087);
        let x_3094 : vec3<f32> = txVec52;
        let x_3096 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_3094.xy, x_3094.z);
        u_xlat73 = x_3096;
        let x_3098 : f32 = u_xlat21.y;
        let x_3099 : f32 = u_xlat73;
        let x_3101 : f32 = u_xlat72;
        u_xlat72 = ((x_3098 * x_3099) + x_3101);
        let x_3104 : vec2<f32> = u_xlat32;
        let x_3106 : f32 = u_xlat2.z;
        txVec53 = vec3<f32>(x_3104.x, x_3104.y, x_3106);
        let x_3113 : vec3<f32> = txVec53;
        let x_3115 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_3113.xy, x_3113.z);
        u_xlat73 = x_3115;
        let x_3117 : f32 = u_xlat21.z;
        let x_3118 : f32 = u_xlat73;
        let x_3120 : f32 = u_xlat72;
        u_xlat72 = ((x_3117 * x_3118) + x_3120);
        let x_3123 : vec2<f32> = u_xlat60;
        let x_3125 : f32 = u_xlat2.z;
        txVec54 = vec3<f32>(x_3123.x, x_3123.y, x_3125);
        let x_3132 : vec3<f32> = txVec54;
        let x_3134 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_3132.xy, x_3132.z);
        u_xlat73 = x_3134;
        let x_3136 : f32 = u_xlat21.w;
        let x_3137 : f32 = u_xlat73;
        let x_3139 : f32 = u_xlat72;
        u_xlat72 = ((x_3136 * x_3137) + x_3139);
        let x_3142 : vec4<f32> = u_xlat13;
        let x_3143 : vec2<f32> = vec2<f32>(x_3142.x, x_3142.y);
        let x_3145 : f32 = u_xlat2.z;
        txVec55 = vec3<f32>(x_3143.x, x_3143.y, x_3145);
        let x_3152 : vec3<f32> = txVec55;
        let x_3154 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_3152.xy, x_3152.z);
        u_xlat73 = x_3154;
        let x_3156 : f32 = u_xlat9.x;
        let x_3157 : f32 = u_xlat73;
        let x_3159 : f32 = u_xlat72;
        u_xlat72 = ((x_3156 * x_3157) + x_3159);
        let x_3162 : vec4<f32> = u_xlat13;
        let x_3163 : vec2<f32> = vec2<f32>(x_3162.z, x_3162.w);
        let x_3165 : f32 = u_xlat2.z;
        txVec56 = vec3<f32>(x_3163.x, x_3163.y, x_3165);
        let x_3172 : vec3<f32> = txVec56;
        let x_3174 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_3172.xy, x_3172.z);
        u_xlat73 = x_3174;
        let x_3176 : f32 = u_xlat9.y;
        let x_3177 : f32 = u_xlat73;
        let x_3179 : f32 = u_xlat72;
        u_xlat72 = ((x_3176 * x_3177) + x_3179);
        let x_3182 : vec2<f32> = u_xlat55;
        let x_3184 : f32 = u_xlat2.z;
        txVec57 = vec3<f32>(x_3182.x, x_3182.y, x_3184);
        let x_3191 : vec3<f32> = txVec57;
        let x_3193 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_3191.xy, x_3191.z);
        u_xlat73 = x_3193;
        let x_3195 : f32 = u_xlat9.z;
        let x_3196 : f32 = u_xlat73;
        let x_3198 : f32 = u_xlat72;
        u_xlat72 = ((x_3195 * x_3196) + x_3198);
        let x_3201 : vec4<f32> = u_xlat8;
        let x_3202 : vec2<f32> = vec2<f32>(x_3201.x, x_3201.y);
        let x_3204 : f32 = u_xlat2.z;
        txVec58 = vec3<f32>(x_3202.x, x_3202.y, x_3204);
        let x_3211 : vec3<f32> = txVec58;
        let x_3213 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_3211.xy, x_3211.z);
        u_xlat73 = x_3213;
        let x_3215 : f32 = u_xlat9.w;
        let x_3216 : f32 = u_xlat73;
        let x_3218 : f32 = u_xlat72;
        u_xlat0.x = ((x_3215 * x_3216) + x_3218);
      }
    }
  } else {
    let x_3223 : vec4<f32> = u_xlat2;
    let x_3224 : vec2<f32> = vec2<f32>(x_3223.x, x_3223.y);
    let x_3226 : f32 = u_xlat2.z;
    txVec59 = vec3<f32>(x_3224.x, x_3224.y, x_3226);
    let x_3233 : vec3<f32> = txVec59;
    let x_3235 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_3233.xy, x_3233.z);
    u_xlat0.x = x_3235;
  }
  let x_3238 : f32 = u_xlat0.x;
  let x_3240 : f32 = x_253.x_MainLightShadowParams.x;
  let x_3242 : f32 = u_xlat68;
  u_xlat0.x = ((x_3238 * x_3240) + x_3242);
  let x_3245 : bool = u_xlatb3;
  if (x_3245) {
    x_3246 = 1.0f;
  } else {
    let x_3251 : f32 = u_xlat0.x;
    x_3246 = x_3251;
  }
  let x_3252 : f32 = x_3246;
  u_xlat0.x = x_3252;
  let x_3254 : vec3<f32> = vs_INTERP0;
  let x_3256 : vec3<f32> = x_139.x_WorldSpaceCameraPos;
  let x_3258 : vec3<f32> = (x_3254 + -(x_3256));
  let x_3259 : vec4<f32> = u_xlat2;
  u_xlat2 = vec4<f32>(x_3258.x, x_3258.y, x_3258.z, x_3259.w);
  let x_3261 : vec4<f32> = u_xlat2;
  let x_3263 : vec4<f32> = u_xlat2;
  u_xlat2.x = dot(vec3<f32>(x_3261.x, x_3261.y, x_3261.z), vec3<f32>(x_3263.x, x_3263.y, x_3263.z));
  let x_3268 : f32 = u_xlat2.x;
  let x_3270 : f32 = x_253.x_MainLightShadowParams.z;
  let x_3273 : f32 = x_253.x_MainLightShadowParams.w;
  u_xlat2.x = ((x_3268 * x_3270) + x_3273);
  let x_3277 : f32 = u_xlat2.x;
  u_xlat2.x = clamp(x_3277, 0.0f, 1.0f);
  let x_3282 : f32 = u_xlat0.x;
  u_xlat24 = (-(x_3282) + 1.0f);
  let x_3286 : f32 = u_xlat2.x;
  let x_3287 : f32 = u_xlat24;
  let x_3290 : f32 = u_xlat0.x;
  u_xlat0.x = ((x_3286 * x_3287) + x_3290);
  let x_3299 : f32 = x_3297.x_MainLightCookieTextureFormat;
  u_xlatb2.x = !((x_3299 == -1.0f));
  let x_3303 : bool = u_xlatb2.x;
  if (x_3303) {
    let x_3306 : vec3<f32> = vs_INTERP0;
    let x_3309 : vec4<f32> = x_3297.x_MainLightWorldToLight[1i];
    let x_3311 : vec2<f32> = (vec2<f32>(x_3306.y, x_3306.y) * vec2<f32>(x_3309.x, x_3309.y));
    let x_3312 : vec4<f32> = u_xlat2;
    u_xlat2 = vec4<f32>(x_3311.x, x_3311.y, x_3312.z, x_3312.w);
    let x_3315 : vec4<f32> = x_3297.x_MainLightWorldToLight[0i];
    let x_3317 : vec3<f32> = vs_INTERP0;
    let x_3320 : vec4<f32> = u_xlat2;
    let x_3322 : vec2<f32> = ((vec2<f32>(x_3315.x, x_3315.y) * vec2<f32>(x_3317.x, x_3317.x)) + vec2<f32>(x_3320.x, x_3320.y));
    let x_3323 : vec4<f32> = u_xlat2;
    u_xlat2 = vec4<f32>(x_3322.x, x_3322.y, x_3323.z, x_3323.w);
    let x_3326 : vec4<f32> = x_3297.x_MainLightWorldToLight[2i];
    let x_3328 : vec3<f32> = vs_INTERP0;
    let x_3331 : vec4<f32> = u_xlat2;
    let x_3333 : vec2<f32> = ((vec2<f32>(x_3326.x, x_3326.y) * vec2<f32>(x_3328.z, x_3328.z)) + vec2<f32>(x_3331.x, x_3331.y));
    let x_3334 : vec4<f32> = u_xlat2;
    u_xlat2 = vec4<f32>(x_3333.x, x_3333.y, x_3334.z, x_3334.w);
    let x_3336 : vec4<f32> = u_xlat2;
    let x_3339 : vec4<f32> = x_3297.x_MainLightWorldToLight[3i];
    let x_3341 : vec2<f32> = (vec2<f32>(x_3336.x, x_3336.y) + vec2<f32>(x_3339.x, x_3339.y));
    let x_3342 : vec4<f32> = u_xlat2;
    u_xlat2 = vec4<f32>(x_3341.x, x_3341.y, x_3342.z, x_3342.w);
    let x_3344 : vec4<f32> = u_xlat2;
    let x_3347 : vec2<f32> = ((vec2<f32>(x_3344.x, x_3344.y) * vec2<f32>(0.5f, 0.5f)) + vec2<f32>(0.5f, 0.5f));
    let x_3348 : vec4<f32> = u_xlat2;
    u_xlat2 = vec4<f32>(x_3347.x, x_3347.y, x_3348.z, x_3348.w);
    let x_3355 : vec4<f32> = u_xlat2;
    let x_3358 : f32 = x_139.x_GlobalMipBias.x;
    let x_3359 : vec4<f32> = textureSampleBias(x_MainLightCookieTexture, sampler_MainLightCookieTexture, vec2<f32>(x_3355.x, x_3355.y), x_3358);
    u_xlat2 = x_3359;
    let x_3362 : f32 = x_3297.x_MainLightCookieTextureFormat;
    let x_3364 : f32 = x_3297.x_MainLightCookieTextureFormat;
    let x_3366 : f32 = x_3297.x_MainLightCookieTextureFormat;
    let x_3368 : f32 = x_3297.x_MainLightCookieTextureFormat;
    let x_3369 : vec4<f32> = vec4<f32>(x_3362, x_3364, x_3366, x_3368);
    let x_3376 : vec4<bool> = (vec4<f32>(x_3369.x, x_3369.y, x_3369.z, x_3369.w) == vec4<f32>(0.0f, 1.0f, 0.0f, 0.0f));
    u_xlatb8 = vec2<bool>(x_3376.x, x_3376.y);
    let x_3379 : bool = u_xlatb8.y;
    if (x_3379) {
      let x_3384 : f32 = u_xlat2.w;
      x_3380 = x_3384;
    } else {
      let x_3387 : f32 = u_xlat2.x;
      x_3380 = x_3387;
    }
    let x_3388 : f32 = x_3380;
    u_xlat68 = x_3388;
    let x_3390 : bool = u_xlatb8.x;
    if (x_3390) {
      let x_3394 : vec4<f32> = u_xlat2;
      x_3391 = vec3<f32>(x_3394.x, x_3394.y, x_3394.z);
    } else {
      let x_3397 : f32 = u_xlat68;
      x_3391 = vec3<f32>(x_3397, x_3397, x_3397);
    }
    let x_3399 : vec3<f32> = x_3391;
    let x_3400 : vec4<f32> = u_xlat2;
    u_xlat2 = vec4<f32>(x_3399.x, x_3399.y, x_3399.z, x_3400.w);
  } else {
    u_xlat2.x = 1.0f;
    u_xlat2.y = 1.0f;
    u_xlat2.z = 1.0f;
  }
  let x_3406 : vec4<f32> = u_xlat2;
  let x_3409 : vec4<f32> = x_139.x_MainLightColor;
  let x_3411 : vec3<f32> = (vec3<f32>(x_3406.x, x_3406.y, x_3406.z) * vec3<f32>(x_3409.x, x_3409.y, x_3409.z));
  let x_3412 : vec4<f32> = u_xlat2;
  u_xlat2 = vec4<f32>(x_3411.x, x_3411.y, x_3411.z, x_3412.w);
  let x_3414 : f32 = u_xlat50;
  let x_3416 : vec4<f32> = u_xlat2;
  let x_3418 : vec3<f32> = (vec3<f32>(x_3414, x_3414, x_3414) * vec3<f32>(x_3416.x, x_3416.y, x_3416.z));
  let x_3419 : vec4<f32> = u_xlat2;
  u_xlat2 = vec4<f32>(x_3418.x, x_3418.y, x_3418.z, x_3419.w);
  let x_3421 : vec4<f32> = u_xlat7;
  let x_3424 : vec3<f32> = u_xlat22;
  u_xlat68 = dot(-(vec3<f32>(x_3421.x, x_3421.y, x_3421.z)), x_3424);
  let x_3426 : f32 = u_xlat68;
  let x_3427 : f32 = u_xlat68;
  u_xlat68 = (x_3426 + x_3427);
  let x_3429 : vec3<f32> = u_xlat22;
  let x_3430 : f32 = u_xlat68;
  let x_3434 : vec4<f32> = u_xlat7;
  let x_3437 : vec3<f32> = ((x_3429 * -(vec3<f32>(x_3430, x_3430, x_3430))) + -(vec3<f32>(x_3434.x, x_3434.y, x_3434.z)));
  let x_3438 : vec4<f32> = u_xlat8;
  u_xlat8 = vec4<f32>(x_3437.x, x_3437.y, x_3437.z, x_3438.w);
  let x_3440 : vec3<f32> = u_xlat22;
  let x_3441 : vec4<f32> = u_xlat7;
  u_xlat68 = dot(x_3440, vec3<f32>(x_3441.x, x_3441.y, x_3441.z));
  let x_3444 : f32 = u_xlat68;
  u_xlat68 = clamp(x_3444, 0.0f, 1.0f);
  let x_3446 : f32 = u_xlat68;
  u_xlat68 = (-(x_3446) + 1.0f);
  let x_3449 : f32 = u_xlat68;
  let x_3450 : f32 = u_xlat68;
  u_xlat68 = (x_3449 * x_3450);
  let x_3452 : f32 = u_xlat68;
  let x_3453 : f32 = u_xlat68;
  u_xlat68 = (x_3452 * x_3453);
  let x_3456 : f32 = u_xlat25.x;
  u_xlat3.x = ((-(x_3456) * 0.699999988f) + 1.700000048f);
  let x_3464 : f32 = u_xlat3.x;
  let x_3466 : f32 = u_xlat25.x;
  u_xlat3.x = (x_3464 * x_3466);
  let x_3470 : f32 = u_xlat3.x;
  u_xlat3.x = (x_3470 * 6.0f);
  let x_3482 : vec4<f32> = u_xlat8;
  let x_3485 : f32 = u_xlat3.x;
  let x_3486 : vec4<f32> = textureSampleLevel(unity_SpecCube0, samplerunity_SpecCube0, vec3<f32>(x_3482.x, x_3482.y, x_3482.z), x_3485);
  u_xlat8 = x_3486;
  let x_3488 : f32 = u_xlat8.w;
  u_xlat3.x = (x_3488 + -1.0f);
  let x_3492 : f32 = x_60.unity_SpecCube0_HDR.w;
  let x_3494 : f32 = u_xlat3.x;
  u_xlat3.x = ((x_3492 * x_3494) + 1.0f);
  let x_3499 : f32 = u_xlat3.x;
  u_xlat3.x = max(x_3499, 0.0f);
  let x_3503 : f32 = u_xlat3.x;
  u_xlat3.x = log2(x_3503);
  let x_3507 : f32 = u_xlat3.x;
  let x_3509 : f32 = x_60.unity_SpecCube0_HDR.y;
  u_xlat3.x = (x_3507 * x_3509);
  let x_3513 : f32 = u_xlat3.x;
  u_xlat3.x = exp2(x_3513);
  let x_3517 : f32 = u_xlat3.x;
  let x_3519 : f32 = x_60.unity_SpecCube0_HDR.x;
  u_xlat3.x = (x_3517 * x_3519);
  let x_3522 : vec4<f32> = u_xlat8;
  let x_3524 : vec4<f32> = u_xlat3;
  let x_3526 : vec3<f32> = (vec3<f32>(x_3522.x, x_3522.y, x_3522.z) * vec3<f32>(x_3524.x, x_3524.x, x_3524.x));
  let x_3527 : vec4<f32> = u_xlat8;
  u_xlat8 = vec4<f32>(x_3526.x, x_3526.y, x_3526.z, x_3527.w);
  let x_3529 : f32 = u_xlat69;
  let x_3531 : f32 = u_xlat69;
  let x_3535 : vec2<f32> = ((vec2<f32>(x_3529, x_3529) * vec2<f32>(x_3531, x_3531)) + vec2<f32>(-1.0f, 1.0f));
  let x_3536 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_3535.x, x_3535.y, x_3536.z, x_3536.w);
  let x_3539 : f32 = u_xlat3.y;
  u_xlat25.x = (1.0f / x_3539);
  let x_3542 : f32 = u_xlat71;
  u_xlat69 = (x_3542 + -0.039999999f);
  let x_3545 : f32 = u_xlat68;
  let x_3546 : f32 = u_xlat69;
  u_xlat68 = ((x_3545 * x_3546) + 0.039999999f);
  let x_3550 : f32 = u_xlat68;
  let x_3552 : f32 = u_xlat25.x;
  u_xlat68 = (x_3550 * x_3552);
  let x_3554 : f32 = u_xlat68;
  let x_3556 : vec4<f32> = u_xlat8;
  let x_3558 : vec3<f32> = (vec3<f32>(x_3554, x_3554, x_3554) * vec3<f32>(x_3556.x, x_3556.y, x_3556.z));
  let x_3559 : vec4<f32> = u_xlat8;
  u_xlat8 = vec4<f32>(x_3558.x, x_3558.y, x_3558.z, x_3559.w);
  let x_3561 : vec4<f32> = u_xlat4;
  let x_3563 : vec3<f32> = u_xlat5;
  let x_3565 : vec4<f32> = u_xlat8;
  let x_3567 : vec3<f32> = ((vec3<f32>(x_3561.x, x_3561.y, x_3561.z) * x_3563) + vec3<f32>(x_3565.x, x_3565.y, x_3565.z));
  let x_3568 : vec4<f32> = u_xlat4;
  u_xlat4 = vec4<f32>(x_3567.x, x_3567.y, x_3567.z, x_3568.w);
  let x_3571 : f32 = u_xlat0.x;
  let x_3573 : f32 = x_60.unity_LightData.z;
  u_xlat0.x = (x_3571 * x_3573);
  let x_3576 : vec3<f32> = u_xlat22;
  let x_3578 : vec4<f32> = x_139.x_MainLightPosition;
  u_xlat68 = dot(x_3576, vec3<f32>(x_3578.x, x_3578.y, x_3578.z));
  let x_3581 : f32 = u_xlat68;
  u_xlat68 = clamp(x_3581, 0.0f, 1.0f);
  let x_3584 : f32 = u_xlat0.x;
  let x_3585 : f32 = u_xlat68;
  u_xlat0.x = (x_3584 * x_3585);
  let x_3588 : vec3<f32> = u_xlat0;
  let x_3590 : vec4<f32> = u_xlat2;
  let x_3592 : vec3<f32> = (vec3<f32>(x_3588.x, x_3588.x, x_3588.x) * vec3<f32>(x_3590.x, x_3590.y, x_3590.z));
  let x_3593 : vec4<f32> = u_xlat2;
  u_xlat2 = vec4<f32>(x_3592.x, x_3592.y, x_3592.z, x_3593.w);
  let x_3595 : vec4<f32> = u_xlat7;
  let x_3598 : vec4<f32> = x_139.x_MainLightPosition;
  let x_3600 : vec3<f32> = (vec3<f32>(x_3595.x, x_3595.y, x_3595.z) + vec3<f32>(x_3598.x, x_3598.y, x_3598.z));
  let x_3601 : vec4<f32> = u_xlat8;
  u_xlat8 = vec4<f32>(x_3600.x, x_3600.y, x_3600.z, x_3601.w);
  let x_3603 : vec4<f32> = u_xlat8;
  let x_3605 : vec4<f32> = u_xlat8;
  u_xlat0.x = dot(vec3<f32>(x_3603.x, x_3603.y, x_3603.z), vec3<f32>(x_3605.x, x_3605.y, x_3605.z));
  let x_3610 : f32 = u_xlat0.x;
  u_xlat0.x = max(x_3610, 1.17549435e-37f);
  let x_3614 : f32 = u_xlat0.x;
  u_xlat0.x = inverseSqrt(x_3614);
  let x_3617 : vec3<f32> = u_xlat0;
  let x_3619 : vec4<f32> = u_xlat8;
  let x_3621 : vec3<f32> = (vec3<f32>(x_3617.x, x_3617.x, x_3617.x) * vec3<f32>(x_3619.x, x_3619.y, x_3619.z));
  let x_3622 : vec4<f32> = u_xlat8;
  u_xlat8 = vec4<f32>(x_3621.x, x_3621.y, x_3621.z, x_3622.w);
  let x_3624 : vec3<f32> = u_xlat22;
  let x_3625 : vec4<f32> = u_xlat8;
  u_xlat0.x = dot(x_3624, vec3<f32>(x_3625.x, x_3625.y, x_3625.z));
  let x_3630 : f32 = u_xlat0.x;
  u_xlat0.x = clamp(x_3630, 0.0f, 1.0f);
  let x_3634 : vec4<f32> = x_139.x_MainLightPosition;
  let x_3636 : vec4<f32> = u_xlat8;
  u_xlat68 = dot(vec3<f32>(x_3634.x, x_3634.y, x_3634.z), vec3<f32>(x_3636.x, x_3636.y, x_3636.z));
  let x_3639 : f32 = u_xlat68;
  u_xlat68 = clamp(x_3639, 0.0f, 1.0f);
  let x_3642 : f32 = u_xlat0.x;
  let x_3644 : f32 = u_xlat0.x;
  u_xlat0.x = (x_3642 * x_3644);
  let x_3648 : f32 = u_xlat0.x;
  let x_3650 : f32 = u_xlat3.x;
  u_xlat0.x = ((x_3648 * x_3650) + 1.000010014f);
  let x_3655 : f32 = u_xlat68;
  let x_3656 : f32 = u_xlat68;
  u_xlat68 = (x_3655 * x_3656);
  let x_3659 : f32 = u_xlat0.x;
  let x_3661 : f32 = u_xlat0.x;
  u_xlat0.x = (x_3659 * x_3661);
  let x_3664 : f32 = u_xlat68;
  u_xlat68 = max(x_3664, 0.100000001f);
  let x_3668 : f32 = u_xlat0.x;
  let x_3669 : f32 = u_xlat68;
  u_xlat0.x = (x_3668 * x_3669);
  let x_3673 : f32 = u_xlat6.x;
  let x_3675 : f32 = u_xlat0.x;
  u_xlat0.x = (x_3673 * x_3675);
  let x_3678 : f32 = u_xlat70;
  let x_3680 : f32 = u_xlat0.x;
  u_xlat0.x = (x_3678 / x_3680);
  let x_3683 : vec3<f32> = u_xlat0;
  let x_3687 : vec3<f32> = u_xlat5;
  let x_3688 : vec3<f32> = ((vec3<f32>(x_3683.x, x_3683.x, x_3683.x) * vec3<f32>(0.039999999f, 0.039999999f, 0.039999999f)) + x_3687);
  let x_3689 : vec4<f32> = u_xlat8;
  u_xlat8 = vec4<f32>(x_3688.x, x_3688.y, x_3688.z, x_3689.w);
  let x_3691 : vec4<f32> = u_xlat2;
  let x_3693 : vec4<f32> = u_xlat8;
  let x_3695 : vec3<f32> = (vec3<f32>(x_3691.x, x_3691.y, x_3691.z) * vec3<f32>(x_3693.x, x_3693.y, x_3693.z));
  let x_3696 : vec4<f32> = u_xlat2;
  u_xlat2 = vec4<f32>(x_3695.x, x_3695.y, x_3695.z, x_3696.w);
  let x_3699 : f32 = x_139.x_AdditionalLightsCount.x;
  let x_3701 : f32 = x_60.unity_LightData.y;
  u_xlat0.x = min(x_3699, x_3701);
  let x_3705 : f32 = u_xlat0.x;
  u_xlatu0 = bitcast<u32>(i32(x_3705));
  let x_3709 : f32 = x_3297.x_AdditionalLightsCookieAtlasTextureFormat;
  let x_3711 : f32 = x_3297.x_AdditionalLightsCookieAtlasTextureFormat;
  let x_3713 : f32 = x_3297.x_AdditionalLightsCookieAtlasTextureFormat;
  let x_3715 : f32 = x_3297.x_AdditionalLightsCookieAtlasTextureFormat;
  let x_3716 : vec4<f32> = vec4<f32>(x_3709, x_3711, x_3713, x_3715);
  let x_3723 : vec4<bool> = (vec4<f32>(x_3716.x, x_3716.y, x_3716.z, x_3716.w) == vec4<f32>(0.0f, 0.0f, 1.0f, 1.0f));
  let x_3724 : vec2<bool> = vec2<bool>(x_3723.x, x_3723.z);
  let x_3725 : vec3<bool> = u_xlatb25;
  u_xlatb25 = vec3<bool>(x_3724.x, x_3725.y, x_3724.y);
  u_xlat8.x = 0.0f;
  u_xlat8.y = 0.0f;
  u_xlat8.z = 0.0f;
  u_xlatu_loop_1 = 0u;
  loop {
    let x_3736 : u32 = u_xlatu_loop_1;
    let x_3737 : u32 = u_xlatu0;
    if ((x_3736 < x_3737)) {
    } else {
      break;
    }
    let x_3740 : u32 = u_xlatu_loop_1;
    u_xlatu71 = (x_3740 >> 2u);
    let x_3743 : u32 = u_xlatu_loop_1;
    u_xlati72 = bitcast<i32>((x_3743 & 3u));
    let x_3746 : u32 = u_xlatu71;
    let x_3749 : vec4<f32> = x_60.unity_LightIndices[bitcast<i32>(x_3746)];
    let x_3759 : i32 = u_xlati72;
    indexable = array<vec4<u32>, 4u>(vec4<u32>(1065353216u, 0u, 0u, 0u), vec4<u32>(0u, 1065353216u, 0u, 0u), vec4<u32>(0u, 0u, 1065353216u, 0u), vec4<u32>(0u, 0u, 0u, 1065353216u));
    let x_3764 : vec4<u32> = indexable[x_3759];
    u_xlat71 = dot(x_3749, bitcast<vec4<f32>>(x_3764));
    let x_3767 : f32 = u_xlat71;
    u_xlatu71 = bitcast<u32>(i32(x_3767));
    let x_3770 : vec3<f32> = vs_INTERP0;
    let x_3782 : u32 = u_xlatu71;
    let x_3785 : vec4<f32> = x_3781.x_AdditionalLightsPosition[bitcast<i32>(x_3782)];
    let x_3788 : u32 = u_xlatu71;
    let x_3791 : vec4<f32> = x_3781.x_AdditionalLightsPosition[bitcast<i32>(x_3788)];
    let x_3793 : vec3<f32> = ((-(x_3770) * vec3<f32>(x_3785.w, x_3785.w, x_3785.w)) + vec3<f32>(x_3791.x, x_3791.y, x_3791.z));
    let x_3794 : vec4<f32> = u_xlat9;
    u_xlat9 = vec4<f32>(x_3793.x, x_3793.y, x_3793.z, x_3794.w);
    let x_3796 : vec4<f32> = u_xlat9;
    let x_3798 : vec4<f32> = u_xlat9;
    u_xlat72 = dot(vec3<f32>(x_3796.x, x_3796.y, x_3796.z), vec3<f32>(x_3798.x, x_3798.y, x_3798.z));
    let x_3801 : f32 = u_xlat72;
    u_xlat72 = max(x_3801, 6.10351562e-05f);
    let x_3804 : f32 = u_xlat72;
    u_xlat73 = inverseSqrt(x_3804);
    let x_3806 : f32 = u_xlat73;
    let x_3808 : vec4<f32> = u_xlat9;
    let x_3810 : vec3<f32> = (vec3<f32>(x_3806, x_3806, x_3806) * vec3<f32>(x_3808.x, x_3808.y, x_3808.z));
    let x_3811 : vec4<f32> = u_xlat10;
    u_xlat10 = vec4<f32>(x_3810.x, x_3810.y, x_3810.z, x_3811.w);
    let x_3814 : f32 = u_xlat72;
    u_xlat74 = (1.0f / x_3814);
    let x_3816 : f32 = u_xlat72;
    let x_3817 : u32 = u_xlatu71;
    let x_3820 : f32 = x_3781.x_AdditionalLightsAttenuation[bitcast<i32>(x_3817)].x;
    u_xlat72 = (x_3816 * x_3820);
    let x_3822 : f32 = u_xlat72;
    let x_3824 : f32 = u_xlat72;
    u_xlat72 = ((-(x_3822) * x_3824) + 1.0f);
    let x_3827 : f32 = u_xlat72;
    u_xlat72 = max(x_3827, 0.0f);
    let x_3829 : f32 = u_xlat72;
    let x_3830 : f32 = u_xlat72;
    u_xlat72 = (x_3829 * x_3830);
    let x_3832 : f32 = u_xlat72;
    let x_3833 : f32 = u_xlat74;
    u_xlat72 = (x_3832 * x_3833);
    let x_3835 : u32 = u_xlatu71;
    let x_3838 : vec4<f32> = x_3781.x_AdditionalLightsSpotDir[bitcast<i32>(x_3835)];
    let x_3840 : vec4<f32> = u_xlat10;
    u_xlat74 = dot(vec3<f32>(x_3838.x, x_3838.y, x_3838.z), vec3<f32>(x_3840.x, x_3840.y, x_3840.z));
    let x_3843 : f32 = u_xlat74;
    let x_3844 : u32 = u_xlatu71;
    let x_3847 : f32 = x_3781.x_AdditionalLightsAttenuation[bitcast<i32>(x_3844)].z;
    let x_3849 : u32 = u_xlatu71;
    let x_3852 : f32 = x_3781.x_AdditionalLightsAttenuation[bitcast<i32>(x_3849)].w;
    u_xlat74 = ((x_3843 * x_3847) + x_3852);
    let x_3854 : f32 = u_xlat74;
    u_xlat74 = clamp(x_3854, 0.0f, 1.0f);
    let x_3856 : f32 = u_xlat74;
    let x_3857 : f32 = u_xlat74;
    u_xlat74 = (x_3856 * x_3857);
    let x_3859 : f32 = u_xlat72;
    let x_3860 : f32 = u_xlat74;
    u_xlat72 = (x_3859 * x_3860);
    let x_3863 : u32 = u_xlatu71;
    u_xlatu74 = (x_3863 >> 5u);
    let x_3866 : u32 = u_xlatu71;
    u_xlati75 = (1i << bitcast<u32>((bitcast<i32>(x_3866) & 31i)));
    let x_3872 : i32 = u_xlati75;
    let x_3874 : u32 = u_xlatu74;
    let x_3877 : f32 = x_3297.x_AdditionalLightsCookieEnableBits[bitcast<i32>(x_3874)].el;
    u_xlati74 = bitcast<i32>((bitcast<u32>(x_3872) & bitcast<u32>(x_3877)));
    let x_3881 : i32 = u_xlati74;
    if ((x_3881 != 0i)) {
      let x_3891 : u32 = u_xlatu71;
      let x_3894 : f32 = x_3890.x_AdditionalLightsLightTypes[bitcast<i32>(x_3891)].el;
      u_xlati74 = i32(x_3894);
      let x_3896 : i32 = u_xlati74;
      u_xlati75 = select(1i, 0i, (x_3896 != 0i));
      let x_3900 : u32 = u_xlatu71;
      u_xlati76 = (bitcast<i32>(x_3900) << bitcast<u32>(2i));
      let x_3903 : i32 = u_xlati75;
      if ((x_3903 != 0i)) {
        let x_3907 : vec3<f32> = vs_INTERP0;
        let x_3909 : i32 = u_xlati76;
        let x_3912 : i32 = u_xlati76;
        let x_3916 : vec4<f32> = x_3890.x_AdditionalLightsWorldToLights[((x_3909 + 1i) / 4i)][((x_3912 + 1i) % 4i)];
        let x_3918 : vec3<f32> = (vec3<f32>(x_3907.y, x_3907.y, x_3907.y) * vec3<f32>(x_3916.x, x_3916.y, x_3916.w));
        let x_3919 : vec4<f32> = u_xlat11;
        u_xlat11 = vec4<f32>(x_3918.x, x_3918.y, x_3918.z, x_3919.w);
        let x_3921 : i32 = u_xlati76;
        let x_3923 : i32 = u_xlati76;
        let x_3926 : vec4<f32> = x_3890.x_AdditionalLightsWorldToLights[(x_3921 / 4i)][(x_3923 % 4i)];
        let x_3928 : vec3<f32> = vs_INTERP0;
        let x_3931 : vec4<f32> = u_xlat11;
        let x_3933 : vec3<f32> = ((vec3<f32>(x_3926.x, x_3926.y, x_3926.w) * vec3<f32>(x_3928.x, x_3928.x, x_3928.x)) + vec3<f32>(x_3931.x, x_3931.y, x_3931.z));
        let x_3934 : vec4<f32> = u_xlat11;
        u_xlat11 = vec4<f32>(x_3933.x, x_3933.y, x_3933.z, x_3934.w);
        let x_3936 : i32 = u_xlati76;
        let x_3939 : i32 = u_xlati76;
        let x_3943 : vec4<f32> = x_3890.x_AdditionalLightsWorldToLights[((x_3936 + 2i) / 4i)][((x_3939 + 2i) % 4i)];
        let x_3945 : vec3<f32> = vs_INTERP0;
        let x_3948 : vec4<f32> = u_xlat11;
        let x_3950 : vec3<f32> = ((vec3<f32>(x_3943.x, x_3943.y, x_3943.w) * vec3<f32>(x_3945.z, x_3945.z, x_3945.z)) + vec3<f32>(x_3948.x, x_3948.y, x_3948.z));
        let x_3951 : vec4<f32> = u_xlat11;
        u_xlat11 = vec4<f32>(x_3950.x, x_3950.y, x_3950.z, x_3951.w);
        let x_3953 : vec4<f32> = u_xlat11;
        let x_3955 : i32 = u_xlati76;
        let x_3958 : i32 = u_xlati76;
        let x_3962 : vec4<f32> = x_3890.x_AdditionalLightsWorldToLights[((x_3955 + 3i) / 4i)][((x_3958 + 3i) % 4i)];
        let x_3964 : vec3<f32> = (vec3<f32>(x_3953.x, x_3953.y, x_3953.z) + vec3<f32>(x_3962.x, x_3962.y, x_3962.w));
        let x_3965 : vec4<f32> = u_xlat11;
        u_xlat11 = vec4<f32>(x_3964.x, x_3964.y, x_3964.z, x_3965.w);
        let x_3967 : vec4<f32> = u_xlat11;
        let x_3969 : vec4<f32> = u_xlat11;
        let x_3971 : vec2<f32> = (vec2<f32>(x_3967.x, x_3967.y) / vec2<f32>(x_3969.z, x_3969.z));
        let x_3972 : vec4<f32> = u_xlat11;
        u_xlat11 = vec4<f32>(x_3971.x, x_3971.y, x_3972.z, x_3972.w);
        let x_3974 : vec4<f32> = u_xlat11;
        let x_3977 : vec2<f32> = ((vec2<f32>(x_3974.x, x_3974.y) * vec2<f32>(0.5f, 0.5f)) + vec2<f32>(0.5f, 0.5f));
        let x_3978 : vec4<f32> = u_xlat11;
        u_xlat11 = vec4<f32>(x_3977.x, x_3977.y, x_3978.z, x_3978.w);
        let x_3980 : vec4<f32> = u_xlat11;
        let x_3984 : vec2<f32> = clamp(vec2<f32>(x_3980.x, x_3980.y), vec2<f32>(0.0f, 0.0f), vec2<f32>(1.0f, 1.0f));
        let x_3985 : vec4<f32> = u_xlat11;
        u_xlat11 = vec4<f32>(x_3984.x, x_3984.y, x_3985.z, x_3985.w);
        let x_3987 : u32 = u_xlatu71;
        let x_3990 : vec4<f32> = x_3890.x_AdditionalLightsCookieAtlasUVRects[bitcast<i32>(x_3987)];
        let x_3992 : vec4<f32> = u_xlat11;
        let x_3995 : u32 = u_xlatu71;
        let x_3998 : vec4<f32> = x_3890.x_AdditionalLightsCookieAtlasUVRects[bitcast<i32>(x_3995)];
        let x_4000 : vec2<f32> = ((vec2<f32>(x_3990.x, x_3990.y) * vec2<f32>(x_3992.x, x_3992.y)) + vec2<f32>(x_3998.z, x_3998.w));
        let x_4001 : vec4<f32> = u_xlat11;
        u_xlat11 = vec4<f32>(x_4000.x, x_4000.y, x_4001.z, x_4001.w);
      } else {
        let x_4005 : i32 = u_xlati74;
        u_xlatb74 = (x_4005 == 1i);
        let x_4007 : bool = u_xlatb74;
        u_xlati74 = select(0i, 1i, x_4007);
        let x_4009 : i32 = u_xlati74;
        if ((x_4009 != 0i)) {
          let x_4013 : vec3<f32> = vs_INTERP0;
          let x_4015 : i32 = u_xlati76;
          let x_4018 : i32 = u_xlati76;
          let x_4022 : vec4<f32> = x_3890.x_AdditionalLightsWorldToLights[((x_4015 + 1i) / 4i)][((x_4018 + 1i) % 4i)];
          u_xlat55 = (vec2<f32>(x_4013.y, x_4013.y) * vec2<f32>(x_4022.x, x_4022.y));
          let x_4025 : i32 = u_xlati76;
          let x_4027 : i32 = u_xlati76;
          let x_4030 : vec4<f32> = x_3890.x_AdditionalLightsWorldToLights[(x_4025 / 4i)][(x_4027 % 4i)];
          let x_4032 : vec3<f32> = vs_INTERP0;
          let x_4035 : vec2<f32> = u_xlat55;
          u_xlat55 = ((vec2<f32>(x_4030.x, x_4030.y) * vec2<f32>(x_4032.x, x_4032.x)) + x_4035);
          let x_4037 : i32 = u_xlati76;
          let x_4040 : i32 = u_xlati76;
          let x_4044 : vec4<f32> = x_3890.x_AdditionalLightsWorldToLights[((x_4037 + 2i) / 4i)][((x_4040 + 2i) % 4i)];
          let x_4046 : vec3<f32> = vs_INTERP0;
          let x_4049 : vec2<f32> = u_xlat55;
          u_xlat55 = ((vec2<f32>(x_4044.x, x_4044.y) * vec2<f32>(x_4046.z, x_4046.z)) + x_4049);
          let x_4051 : vec2<f32> = u_xlat55;
          let x_4052 : i32 = u_xlati76;
          let x_4055 : i32 = u_xlati76;
          let x_4059 : vec4<f32> = x_3890.x_AdditionalLightsWorldToLights[((x_4052 + 3i) / 4i)][((x_4055 + 3i) % 4i)];
          u_xlat55 = (x_4051 + vec2<f32>(x_4059.x, x_4059.y));
          let x_4062 : vec2<f32> = u_xlat55;
          u_xlat55 = ((x_4062 * vec2<f32>(0.5f, 0.5f)) + vec2<f32>(0.5f, 0.5f));
          let x_4065 : vec2<f32> = u_xlat55;
          u_xlat55 = fract(x_4065);
          let x_4067 : u32 = u_xlatu71;
          let x_4070 : vec4<f32> = x_3890.x_AdditionalLightsCookieAtlasUVRects[bitcast<i32>(x_4067)];
          let x_4072 : vec2<f32> = u_xlat55;
          let x_4074 : u32 = u_xlatu71;
          let x_4077 : vec4<f32> = x_3890.x_AdditionalLightsCookieAtlasUVRects[bitcast<i32>(x_4074)];
          let x_4079 : vec2<f32> = ((vec2<f32>(x_4070.x, x_4070.y) * x_4072) + vec2<f32>(x_4077.z, x_4077.w));
          let x_4080 : vec4<f32> = u_xlat11;
          u_xlat11 = vec4<f32>(x_4079.x, x_4079.y, x_4080.z, x_4080.w);
        } else {
          let x_4083 : vec3<f32> = vs_INTERP0;
          let x_4085 : i32 = u_xlati76;
          let x_4088 : i32 = u_xlati76;
          let x_4092 : vec4<f32> = x_3890.x_AdditionalLightsWorldToLights[((x_4085 + 1i) / 4i)][((x_4088 + 1i) % 4i)];
          u_xlat12 = (vec4<f32>(x_4083.y, x_4083.y, x_4083.y, x_4083.y) * x_4092);
          let x_4094 : i32 = u_xlati76;
          let x_4096 : i32 = u_xlati76;
          let x_4099 : vec4<f32> = x_3890.x_AdditionalLightsWorldToLights[(x_4094 / 4i)][(x_4096 % 4i)];
          let x_4100 : vec3<f32> = vs_INTERP0;
          let x_4103 : vec4<f32> = u_xlat12;
          u_xlat12 = ((x_4099 * vec4<f32>(x_4100.x, x_4100.x, x_4100.x, x_4100.x)) + x_4103);
          let x_4105 : i32 = u_xlati76;
          let x_4108 : i32 = u_xlati76;
          let x_4112 : vec4<f32> = x_3890.x_AdditionalLightsWorldToLights[((x_4105 + 2i) / 4i)][((x_4108 + 2i) % 4i)];
          let x_4113 : vec3<f32> = vs_INTERP0;
          let x_4116 : vec4<f32> = u_xlat12;
          u_xlat12 = ((x_4112 * vec4<f32>(x_4113.z, x_4113.z, x_4113.z, x_4113.z)) + x_4116);
          let x_4118 : vec4<f32> = u_xlat12;
          let x_4119 : i32 = u_xlati76;
          let x_4122 : i32 = u_xlati76;
          let x_4126 : vec4<f32> = x_3890.x_AdditionalLightsWorldToLights[((x_4119 + 3i) / 4i)][((x_4122 + 3i) % 4i)];
          u_xlat12 = (x_4118 + x_4126);
          let x_4128 : vec4<f32> = u_xlat12;
          let x_4130 : vec4<f32> = u_xlat12;
          let x_4132 : vec3<f32> = (vec3<f32>(x_4128.x, x_4128.y, x_4128.z) / vec3<f32>(x_4130.w, x_4130.w, x_4130.w));
          let x_4133 : vec4<f32> = u_xlat12;
          u_xlat12 = vec4<f32>(x_4132.x, x_4132.y, x_4132.z, x_4133.w);
          let x_4135 : vec4<f32> = u_xlat12;
          let x_4137 : vec4<f32> = u_xlat12;
          u_xlat74 = dot(vec3<f32>(x_4135.x, x_4135.y, x_4135.z), vec3<f32>(x_4137.x, x_4137.y, x_4137.z));
          let x_4140 : f32 = u_xlat74;
          u_xlat74 = inverseSqrt(x_4140);
          let x_4142 : f32 = u_xlat74;
          let x_4144 : vec4<f32> = u_xlat12;
          let x_4146 : vec3<f32> = (vec3<f32>(x_4142, x_4142, x_4142) * vec3<f32>(x_4144.x, x_4144.y, x_4144.z));
          let x_4147 : vec4<f32> = u_xlat12;
          u_xlat12 = vec4<f32>(x_4146.x, x_4146.y, x_4146.z, x_4147.w);
          let x_4149 : vec4<f32> = u_xlat12;
          u_xlat74 = dot(abs(vec3<f32>(x_4149.x, x_4149.y, x_4149.z)), vec3<f32>(1.0f, 1.0f, 1.0f));
          let x_4154 : f32 = u_xlat74;
          u_xlat74 = max(x_4154, 0.000001f);
          let x_4157 : f32 = u_xlat74;
          u_xlat74 = (1.0f / x_4157);
          let x_4159 : f32 = u_xlat74;
          let x_4161 : vec4<f32> = u_xlat12;
          let x_4163 : vec3<f32> = (vec3<f32>(x_4159, x_4159, x_4159) * vec3<f32>(x_4161.z, x_4161.x, x_4161.y));
          let x_4164 : vec4<f32> = u_xlat13;
          u_xlat13 = vec4<f32>(x_4163.x, x_4163.y, x_4163.z, x_4164.w);
          let x_4167 : f32 = u_xlat13.x;
          u_xlat13.x = -(x_4167);
          let x_4171 : f32 = u_xlat13.x;
          u_xlat13.x = clamp(x_4171, 0.0f, 1.0f);
          let x_4175 : vec4<f32> = u_xlat13;
          let x_4178 : vec4<bool> = (vec4<f32>(x_4175.y, x_4175.z, x_4175.y, x_4175.z) >= vec4<f32>(0.0f, 0.0f, 0.0f, 0.0f));
          u_xlatb55 = vec2<bool>(x_4178.x, x_4178.y);
          let x_4181 : bool = u_xlatb55.x;
          if (x_4181) {
            let x_4186 : f32 = u_xlat13.x;
            x_4182 = x_4186;
          } else {
            let x_4189 : f32 = u_xlat13.x;
            x_4182 = -(x_4189);
          }
          let x_4191 : f32 = x_4182;
          u_xlat55.x = x_4191;
          let x_4194 : bool = u_xlatb55.y;
          if (x_4194) {
            let x_4199 : f32 = u_xlat13.x;
            x_4195 = x_4199;
          } else {
            let x_4202 : f32 = u_xlat13.x;
            x_4195 = -(x_4202);
          }
          let x_4204 : f32 = x_4195;
          u_xlat55.y = x_4204;
          let x_4206 : vec4<f32> = u_xlat12;
          let x_4208 : f32 = u_xlat74;
          let x_4211 : vec2<f32> = u_xlat55;
          u_xlat55 = ((vec2<f32>(x_4206.x, x_4206.y) * vec2<f32>(x_4208, x_4208)) + x_4211);
          let x_4213 : vec2<f32> = u_xlat55;
          u_xlat55 = ((x_4213 * vec2<f32>(0.5f, 0.5f)) + vec2<f32>(0.5f, 0.5f));
          let x_4216 : vec2<f32> = u_xlat55;
          u_xlat55 = clamp(x_4216, vec2<f32>(0.0f, 0.0f), vec2<f32>(1.0f, 1.0f));
          let x_4220 : u32 = u_xlatu71;
          let x_4223 : vec4<f32> = x_3890.x_AdditionalLightsCookieAtlasUVRects[bitcast<i32>(x_4220)];
          let x_4225 : vec2<f32> = u_xlat55;
          let x_4227 : u32 = u_xlatu71;
          let x_4230 : vec4<f32> = x_3890.x_AdditionalLightsCookieAtlasUVRects[bitcast<i32>(x_4227)];
          let x_4232 : vec2<f32> = ((vec2<f32>(x_4223.x, x_4223.y) * x_4225) + vec2<f32>(x_4230.z, x_4230.w));
          let x_4233 : vec4<f32> = u_xlat11;
          u_xlat11 = vec4<f32>(x_4232.x, x_4232.y, x_4233.z, x_4233.w);
        }
      }
      let x_4240 : vec4<f32> = u_xlat11;
      let x_4243 : f32 = x_139.x_GlobalMipBias.x;
      let x_4244 : vec4<f32> = textureSampleBias(x_AdditionalLightsCookieAtlasTexture, sampler_AdditionalLightsCookieAtlasTexture, vec2<f32>(x_4240.x, x_4240.y), x_4243);
      u_xlat11 = x_4244;
      let x_4246 : bool = u_xlatb25.z;
      if (x_4246) {
        let x_4251 : f32 = u_xlat11.w;
        x_4247 = x_4251;
      } else {
        let x_4254 : f32 = u_xlat11.x;
        x_4247 = x_4254;
      }
      let x_4255 : f32 = x_4247;
      u_xlat74 = x_4255;
      let x_4257 : bool = u_xlatb25.x;
      if (x_4257) {
        let x_4261 : vec4<f32> = u_xlat11;
        x_4258 = vec3<f32>(x_4261.x, x_4261.y, x_4261.z);
      } else {
        let x_4264 : f32 = u_xlat74;
        x_4258 = vec3<f32>(x_4264, x_4264, x_4264);
      }
      let x_4266 : vec3<f32> = x_4258;
      let x_4267 : vec4<f32> = u_xlat11;
      u_xlat11 = vec4<f32>(x_4266.x, x_4266.y, x_4266.z, x_4267.w);
    } else {
      u_xlat11.x = 1.0f;
      u_xlat11.y = 1.0f;
      u_xlat11.z = 1.0f;
    }
    let x_4273 : vec4<f32> = u_xlat11;
    let x_4275 : u32 = u_xlatu71;
    let x_4278 : vec4<f32> = x_3781.x_AdditionalLightsColor[bitcast<i32>(x_4275)];
    let x_4280 : vec3<f32> = (vec3<f32>(x_4273.x, x_4273.y, x_4273.z) * vec3<f32>(x_4278.x, x_4278.y, x_4278.z));
    let x_4281 : vec4<f32> = u_xlat11;
    u_xlat11 = vec4<f32>(x_4280.x, x_4280.y, x_4280.z, x_4281.w);
    let x_4283 : f32 = u_xlat50;
    let x_4285 : vec4<f32> = u_xlat11;
    let x_4287 : vec3<f32> = (vec3<f32>(x_4283, x_4283, x_4283) * vec3<f32>(x_4285.x, x_4285.y, x_4285.z));
    let x_4288 : vec4<f32> = u_xlat11;
    u_xlat11 = vec4<f32>(x_4287.x, x_4287.y, x_4287.z, x_4288.w);
    let x_4290 : vec3<f32> = u_xlat22;
    let x_4291 : vec4<f32> = u_xlat10;
    u_xlat71 = dot(x_4290, vec3<f32>(x_4291.x, x_4291.y, x_4291.z));
    let x_4294 : f32 = u_xlat71;
    u_xlat71 = clamp(x_4294, 0.0f, 1.0f);
    let x_4296 : f32 = u_xlat71;
    let x_4297 : f32 = u_xlat72;
    u_xlat71 = (x_4296 * x_4297);
    let x_4299 : f32 = u_xlat71;
    let x_4301 : vec4<f32> = u_xlat11;
    let x_4303 : vec3<f32> = (vec3<f32>(x_4299, x_4299, x_4299) * vec3<f32>(x_4301.x, x_4301.y, x_4301.z));
    let x_4304 : vec4<f32> = u_xlat11;
    u_xlat11 = vec4<f32>(x_4303.x, x_4303.y, x_4303.z, x_4304.w);
    let x_4306 : vec4<f32> = u_xlat9;
    let x_4308 : f32 = u_xlat73;
    let x_4311 : vec4<f32> = u_xlat7;
    let x_4313 : vec3<f32> = ((vec3<f32>(x_4306.x, x_4306.y, x_4306.z) * vec3<f32>(x_4308, x_4308, x_4308)) + vec3<f32>(x_4311.x, x_4311.y, x_4311.z));
    let x_4314 : vec4<f32> = u_xlat9;
    u_xlat9 = vec4<f32>(x_4313.x, x_4313.y, x_4313.z, x_4314.w);
    let x_4316 : vec4<f32> = u_xlat9;
    let x_4318 : vec4<f32> = u_xlat9;
    u_xlat71 = dot(vec3<f32>(x_4316.x, x_4316.y, x_4316.z), vec3<f32>(x_4318.x, x_4318.y, x_4318.z));
    let x_4321 : f32 = u_xlat71;
    u_xlat71 = max(x_4321, 1.17549435e-37f);
    let x_4323 : f32 = u_xlat71;
    u_xlat71 = inverseSqrt(x_4323);
    let x_4325 : f32 = u_xlat71;
    let x_4327 : vec4<f32> = u_xlat9;
    let x_4329 : vec3<f32> = (vec3<f32>(x_4325, x_4325, x_4325) * vec3<f32>(x_4327.x, x_4327.y, x_4327.z));
    let x_4330 : vec4<f32> = u_xlat9;
    u_xlat9 = vec4<f32>(x_4329.x, x_4329.y, x_4329.z, x_4330.w);
    let x_4332 : vec3<f32> = u_xlat22;
    let x_4333 : vec4<f32> = u_xlat9;
    u_xlat71 = dot(x_4332, vec3<f32>(x_4333.x, x_4333.y, x_4333.z));
    let x_4336 : f32 = u_xlat71;
    u_xlat71 = clamp(x_4336, 0.0f, 1.0f);
    let x_4338 : vec4<f32> = u_xlat10;
    let x_4340 : vec4<f32> = u_xlat9;
    u_xlat72 = dot(vec3<f32>(x_4338.x, x_4338.y, x_4338.z), vec3<f32>(x_4340.x, x_4340.y, x_4340.z));
    let x_4343 : f32 = u_xlat72;
    u_xlat72 = clamp(x_4343, 0.0f, 1.0f);
    let x_4345 : f32 = u_xlat71;
    let x_4346 : f32 = u_xlat71;
    u_xlat71 = (x_4345 * x_4346);
    let x_4348 : f32 = u_xlat71;
    let x_4350 : f32 = u_xlat3.x;
    u_xlat71 = ((x_4348 * x_4350) + 1.000010014f);
    let x_4353 : f32 = u_xlat72;
    let x_4354 : f32 = u_xlat72;
    u_xlat72 = (x_4353 * x_4354);
    let x_4356 : f32 = u_xlat71;
    let x_4357 : f32 = u_xlat71;
    u_xlat71 = (x_4356 * x_4357);
    let x_4359 : f32 = u_xlat72;
    u_xlat72 = max(x_4359, 0.100000001f);
    let x_4361 : f32 = u_xlat71;
    let x_4362 : f32 = u_xlat72;
    u_xlat71 = (x_4361 * x_4362);
    let x_4365 : f32 = u_xlat6.x;
    let x_4366 : f32 = u_xlat71;
    u_xlat71 = (x_4365 * x_4366);
    let x_4368 : f32 = u_xlat70;
    let x_4369 : f32 = u_xlat71;
    u_xlat71 = (x_4368 / x_4369);
    let x_4371 : f32 = u_xlat71;
    let x_4374 : vec3<f32> = u_xlat5;
    let x_4375 : vec3<f32> = ((vec3<f32>(x_4371, x_4371, x_4371) * vec3<f32>(0.039999999f, 0.039999999f, 0.039999999f)) + x_4374);
    let x_4376 : vec4<f32> = u_xlat9;
    u_xlat9 = vec4<f32>(x_4375.x, x_4375.y, x_4375.z, x_4376.w);
    let x_4378 : vec4<f32> = u_xlat9;
    let x_4380 : vec4<f32> = u_xlat11;
    let x_4383 : vec4<f32> = u_xlat8;
    let x_4385 : vec3<f32> = ((vec3<f32>(x_4378.x, x_4378.y, x_4378.z) * vec3<f32>(x_4380.x, x_4380.y, x_4380.z)) + vec3<f32>(x_4383.x, x_4383.y, x_4383.z));
    let x_4386 : vec4<f32> = u_xlat8;
    u_xlat8 = vec4<f32>(x_4385.x, x_4385.y, x_4385.z, x_4386.w);

    continuing {
      let x_4388 : u32 = u_xlatu_loop_1;
      u_xlatu_loop_1 = (x_4388 + bitcast<u32>(1i));
    }
  }
  let x_4390 : vec4<f32> = u_xlat4;
  let x_4392 : vec3<f32> = u_xlat28;
  let x_4395 : vec4<f32> = u_xlat2;
  u_xlat0 = ((vec3<f32>(x_4390.x, x_4390.y, x_4390.z) * vec3<f32>(x_4392.x, x_4392.x, x_4392.x)) + vec3<f32>(x_4395.x, x_4395.y, x_4395.z));
  let x_4398 : vec4<f32> = u_xlat8;
  let x_4400 : vec3<f32> = u_xlat0;
  u_xlat0 = (vec3<f32>(x_4398.x, x_4398.y, x_4398.z) + x_4400);
  let x_4404 : vec4<f32> = vs_INTERP4;
  let x_4406 : vec3<f32> = u_xlat1;
  let x_4408 : vec3<f32> = u_xlat0;
  let x_4409 : vec3<f32> = ((vec3<f32>(x_4404.w, x_4404.w, x_4404.w) * x_4406) + x_4408);
  let x_4410 : vec4<f32> = SV_Target0;
  SV_Target0 = vec4<f32>(x_4409.x, x_4409.y, x_4409.z, x_4410.w);
  let x_4412 : bool = u_xlatb47;
  let x_4413 : f32 = u_xlat67;
  SV_Target0.w = select(1.0f, x_4413, x_4412);
  let x_4419 : u32 = x_139.x_RenderingLayerMaxInt;
  let x_4421 : f32 = x_60.unity_RenderingLayer.x;
  u_xlatu0 = (x_4419 & bitcast<u32>(x_4421));
  let x_4424 : u32 = u_xlatu0;
  u_xlat0.x = f32(x_4424);
  let x_4429 : f32 = u_xlat0.x;
  let x_4431 : f32 = x_139.x_RenderingLayerRcpMaxInt;
  SV_Target1.x = (x_4429 * x_4431);
  let x_4435 : f32 = SV_Target1.x;
  SV_Target1.x = clamp(x_4435, 0.0f, 1.0f);
  let x_4438 : vec4<f32> = SV_Target1;
  SV_Target1 = vec4<f32>(x_4438.x, vec3<f32>(0.0f, 0.0f, 0.0f).x, vec3<f32>(0.0f, 0.0f, 0.0f).y, vec3<f32>(0.0f, 0.0f, 0.0f).z);
  return;
}

struct main_out {
  @location(0)
  SV_Target0_1 : vec4<f32>,
  @location(1)
  SV_Target1_1 : vec4<f32>,
}

@fragment
fn main(@builtin(position) gl_FragCoord_param : vec4<f32>, @location(1) vs_INTERP1_param : vec3<f32>, @location(2) vs_INTERP2_param : vec4<f32>, @location(3) vs_INTERP3_param : vec4<f32>, @location(4) vs_INTERP4_param : vec4<f32>, @location(0) vs_INTERP0_param : vec3<f32>, @location(5) vs_INTERP5_param : vec2<f32>) -> main_out {
  gl_FragCoord = gl_FragCoord_param;
  vs_INTERP1 = vs_INTERP1_param;
  vs_INTERP2 = vs_INTERP2_param;
  vs_INTERP3 = vs_INTERP3_param;
  vs_INTERP4 = vs_INTERP4_param;
  vs_INTERP0 = vs_INTERP0_param;
  vs_INTERP5 = vs_INTERP5_param;
  main_1();
  return main_out(SV_Target0, SV_Target1);
}

