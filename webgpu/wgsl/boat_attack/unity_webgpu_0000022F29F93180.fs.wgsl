struct PGlobals {
  x_ScaledScreenParams : vec4<f32>,
  x_GlobalMipBias : vec2<f32>,
  @size(8)
  padding : u32,
  x_MainLightPosition : vec4<f32>,
  x_MainLightColor : vec4<f32>,
  x_AmbientOcclusionParam : vec4<f32>,
  x_AdditionalLightsCount : vec4<f32>,
  x_WorldSpaceCameraPos : vec3<f32>,
  @size(4)
  padding_1 : u32,
  x_ProjectionParams : vec4<f32>,
  unity_OrthoParams : vec4<f32>,
  x_ScaleBiasRt : vec4<f32>,
  unity_FogParams : vec4<f32>,
  unity_FogColor : vec4<f32>,
  unity_MatrixV : mat4x4<f32>,
}

struct UnityPerMaterial {
  x_MainTex_TexelSize : vec4<f32>,
  x_MRLL_TexelSize : vec4<f32>,
  x_BumpMap_TexelSize : vec4<f32>,
  x_Color1 : vec4<f32>,
  x_Color2 : vec4<f32>,
}

type Arr = array<vec4<f32>, 2u>;

struct UnityPerDraw {
  unity_ObjectToWorld : mat4x4<f32>,
  unity_WorldToObject : mat4x4<f32>,
  unity_LODFade : vec4<f32>,
  unity_WorldTransformParams : vec4<f32>,
  unity_RenderingLayer : vec4<f32>,
  unity_LightData : vec4<f32>,
  unity_LightIndices : Arr,
  unity_ProbesOcclusion : vec4<f32>,
  unity_SpecCube0_HDR : vec4<f32>,
  unity_SpecCube1_HDR : vec4<f32>,
  unity_SpecCube0_BoxMax : vec4<f32>,
  unity_SpecCube0_BoxMin : vec4<f32>,
  unity_SpecCube0_ProbePosition : vec4<f32>,
  unity_SpecCube1_BoxMax : vec4<f32>,
  unity_SpecCube1_BoxMin : vec4<f32>,
  unity_SpecCube1_ProbePosition : vec4<f32>,
  unity_LightmapST : vec4<f32>,
  unity_DynamicLightmapST : vec4<f32>,
  unity_SHAr : vec4<f32>,
  unity_SHAg : vec4<f32>,
  unity_SHAb : vec4<f32>,
  unity_SHBr : vec4<f32>,
  unity_SHBg : vec4<f32>,
  unity_SHBb : vec4<f32>,
  unity_SHC : vec4<f32>,
  unity_RendererBounds_Min : vec4<f32>,
  unity_RendererBounds_Max : vec4<f32>,
  unity_MatrixPreviousM : mat4x4<f32>,
  unity_MatrixPreviousMI : mat4x4<f32>,
  unity_MotionVectorsParams : vec4<f32>,
  unity_SpriteColor : vec4<f32>,
  unity_SpriteProps : vec4<f32>,
}

type Arr_1 = array<mat4x4<f32>, 5u>;

struct MainLightShadows {
  x_MainLightWorldToShadow : Arr_1,
  x_CascadeShadowSplitSpheres0 : vec4<f32>,
  x_CascadeShadowSplitSpheres1 : vec4<f32>,
  x_CascadeShadowSplitSpheres2 : vec4<f32>,
  x_CascadeShadowSplitSpheres3 : vec4<f32>,
  x_CascadeShadowSplitSphereRadii : vec4<f32>,
  x_MainLightShadowOffset0 : vec4<f32>,
  x_MainLightShadowOffset1 : vec4<f32>,
  x_MainLightShadowParams : vec4<f32>,
  x_MainLightShadowmapSize : vec4<f32>,
}

type Arr_2 = array<vec4<f32>, 256u>;

type Arr_3 = array<vec4<f32>, 256u>;

type Arr_4 = array<vec4<f32>, 256u>;

type Arr_5 = array<vec4<f32>, 256u>;

type Arr_6 = array<vec4<f32>, 256u>;

struct strided_arr {
  @size(16)
  el : f32,
}

type Arr_7 = array<strided_arr, 256u>;

struct AdditionalLights {
  x_AdditionalLightsPosition : Arr_6,
  x_AdditionalLightsColor : Arr_6,
  x_AdditionalLightsAttenuation : Arr_6,
  x_AdditionalLightsSpotDir : Arr_6,
  x_AdditionalLightsOcclusionProbes : Arr_6,
  x_AdditionalLightsLayerMasks : Arr_7,
}

var<private> gl_FragCoord : vec4<f32>;

@group(0) @binding(5) var x_MainTex : texture_2d<f32>;

@group(0) @binding(12) var samplerSamplerState_Trilinear_Clamp : sampler;

var<private> vs_INTERP3 : vec4<f32>;

@group(1) @binding(0) var<uniform> x_44 : PGlobals;

@group(0) @binding(6) var x_MRLL : texture_2d<f32>;

@group(1) @binding(4) var<uniform> x_68 : UnityPerMaterial;

@group(0) @binding(7) var x_BumpMap : texture_2d<f32>;

var<private> vs_INTERP2 : vec4<f32>;

@group(1) @binding(2) var<uniform> x_274 : UnityPerDraw;

var<private> vs_INTERP1 : vec3<f32>;

var<private> vs_INTERP0 : vec3<f32>;

@group(1) @binding(3) var<uniform> x_391 : MainLightShadows;

@group(0) @binding(2) var unity_LightmapInd : texture_2d<f32>;

@group(0) @binding(9) var samplerunity_Lightmap : sampler;

var<private> vs_INTERP4 : vec2<f32>;

@group(0) @binding(1) var unity_Lightmap : texture_2d<f32>;

@group(0) @binding(3) var x_ScreenSpaceOcclusionTexture : texture_2d<f32>;

@group(0) @binding(10) var sampler_ScreenSpaceOcclusionTexture : sampler;

@group(0) @binding(4) var x_MainLightShadowmapTexture : texture_depth_2d;

@group(0) @binding(11) var sampler_MainLightShadowmapTexture : sampler_comparison;

@group(0) @binding(0) var unity_SpecCube0 : texture_cube<f32>;

@group(0) @binding(8) var samplerunity_SpecCube0 : sampler;

@group(1) @binding(1) var<uniform> x_2432 : AdditionalLights;

var<private> SV_Target0 : vec4<f32>;

fn main_1() {
  var hlslcc_FragCoord : vec4<f32>;
  var u_xlat0 : vec4<f32>;
  var u_xlat1 : vec4<f32>;
  var u_xlat2 : vec3<f32>;
  var u_xlat43 : f32;
  var u_xlat3 : vec3<f32>;
  var u_xlat4 : vec4<f32>;
  var u_xlatb4 : vec4<bool>;
  var u_xlat5 : vec4<f32>;
  var u_xlat21 : vec2<f32>;
  var u_xlatb22 : vec3<bool>;
  var u_xlat22 : vec3<f32>;
  var u_xlatb21 : bool;
  var u_xlat42 : f32;
  var x_378 : vec3<f32>;
  var u_xlat6 : vec4<f32>;
  var u_xlat7 : vec3<f32>;
  var u_xlatu21 : u32;
  var u_xlati21 : i32;
  var u_xlat65 : f32;
  var u_xlat66 : f32;
  var u_xlat67 : f32;
  var u_xlat68 : f32;
  var u_xlat63 : f32;
  var u_xlatb67 : bool;
  var txVec0 : vec3<f32>;
  var u_xlat8 : vec4<f32>;
  var txVec1 : vec3<f32>;
  var txVec2 : vec3<f32>;
  var txVec3 : vec3<f32>;
  var u_xlatb6 : bool;
  var u_xlat48 : vec2<f32>;
  var u_xlat9 : vec4<f32>;
  var u_xlat51 : vec2<f32>;
  var u_xlat10 : vec4<f32>;
  var u_xlat11 : vec4<f32>;
  var u_xlat12 : vec4<f32>;
  var u_xlat13 : vec4<f32>;
  var u_xlat14 : vec4<f32>;
  var u_xlat15 : vec4<f32>;
  var txVec4 : vec3<f32>;
  var u_xlat27 : f32;
  var txVec5 : vec3<f32>;
  var u_xlat70 : f32;
  var txVec6 : vec3<f32>;
  var txVec7 : vec3<f32>;
  var txVec8 : vec3<f32>;
  var txVec9 : vec3<f32>;
  var txVec10 : vec3<f32>;
  var txVec11 : vec3<f32>;
  var txVec12 : vec3<f32>;
  var u_xlat29 : vec3<f32>;
  var u_xlat16 : vec4<f32>;
  var u_xlat17 : vec4<f32>;
  var u_xlat30 : vec2<f32>;
  var u_xlat57 : vec2<f32>;
  var u_xlat52 : vec2<f32>;
  var u_xlat18 : vec4<f32>;
  var u_xlat19 : vec4<f32>;
  var u_xlat20 : vec4<f32>;
  var txVec13 : vec3<f32>;
  var txVec14 : vec3<f32>;
  var txVec15 : vec3<f32>;
  var txVec16 : vec3<f32>;
  var u_xlat69 : f32;
  var txVec17 : vec3<f32>;
  var txVec18 : vec3<f32>;
  var txVec19 : vec3<f32>;
  var txVec20 : vec3<f32>;
  var txVec21 : vec3<f32>;
  var txVec22 : vec3<f32>;
  var txVec23 : vec3<f32>;
  var txVec24 : vec3<f32>;
  var txVec25 : vec3<f32>;
  var txVec26 : vec3<f32>;
  var txVec27 : vec3<f32>;
  var txVec28 : vec3<f32>;
  var txVec29 : vec3<f32>;
  var u_xlatb25 : bool;
  var u_xlatb46 : bool;
  var x_2059 : f32;
  var u_xlat25 : vec3<f32>;
  var u_xlat46 : f32;
  var u_xlatu42 : u32;
  var u_xlatu_loop_1 : u32;
  var u_xlatu67 : u32;
  var u_xlati69 : i32;
  var indexable : array<vec4<u32>, 4u>;
  var u_xlati67 : i32;
  var u_xlat71 : f32;
  var u_xlat_precise_vec4 : vec4<f32>;
  var u_xlat_precise_ivec4 : vec4<i32>;
  var u_xlat_precise_bvec4 : vec4<bool>;
  var u_xlat_precise_uvec4 : vec4<u32>;
  let x_13 : vec4<f32> = gl_FragCoord;
  let x_14 : vec3<f32> = vec3<f32>(x_13.x, x_13.y, x_13.z);
  let x_20 : f32 = gl_FragCoord.w;
  hlslcc_FragCoord = vec4<f32>(x_14.x, x_14.y, x_14.z, (1.0f / x_20));
  let x_39 : vec4<f32> = vs_INTERP3;
  let x_50 : f32 = x_44.x_GlobalMipBias.x;
  let x_51 : vec4<f32> = textureSampleBias(x_MainTex, samplerSamplerState_Trilinear_Clamp, vec2<f32>(x_39.x, x_39.y), x_50);
  u_xlat0 = x_51;
  let x_57 : vec4<f32> = vs_INTERP3;
  let x_60 : f32 = x_44.x_GlobalMipBias.x;
  let x_61 : vec4<f32> = textureSampleBias(x_MRLL, samplerSamplerState_Trilinear_Clamp, vec2<f32>(x_57.x, x_57.y), x_60);
  u_xlat1 = x_61;
  let x_64 : vec4<f32> = u_xlat1;
  let x_72 : vec4<f32> = x_68.x_Color2;
  u_xlat2 = (vec3<f32>(x_64.w, x_64.w, x_64.w) * vec3<f32>(x_72.x, x_72.y, x_72.z));
  let x_77 : vec4<f32> = x_68.x_Color1;
  let x_79 : vec4<f32> = u_xlat1;
  let x_82 : vec3<f32> = u_xlat2;
  u_xlat2 = ((vec3<f32>(x_77.x, x_77.y, x_77.z) * vec3<f32>(x_79.z, x_79.z, x_79.z)) + x_82);
  let x_87 : f32 = u_xlat1.w;
  let x_90 : f32 = u_xlat1.z;
  u_xlat43 = (x_87 + x_90);
  let x_92 : f32 = u_xlat43;
  u_xlat43 = clamp(x_92, 0.0f, 1.0f);
  let x_96 : vec4<f32> = u_xlat0;
  u_xlat3 = (-(vec3<f32>(x_96.x, x_96.y, x_96.z)) + vec3<f32>(1.0f, 1.0f, 1.0f));
  let x_101 : vec3<f32> = u_xlat3;
  let x_102 : vec3<f32> = u_xlat3;
  u_xlat3 = (x_101 + x_102);
  let x_105 : vec3<f32> = u_xlat2;
  let x_107 : vec3<f32> = (-(x_105) + vec3<f32>(1.0f, 1.0f, 1.0f));
  let x_108 : vec4<f32> = u_xlat4;
  u_xlat4 = vec4<f32>(x_107.x, x_107.y, x_107.z, x_108.w);
  let x_110 : vec3<f32> = u_xlat3;
  let x_112 : vec4<f32> = u_xlat4;
  u_xlat3 = ((-(x_110) * vec3<f32>(x_112.x, x_112.y, x_112.z)) + vec3<f32>(1.0f, 1.0f, 1.0f));
  let x_116 : vec4<f32> = u_xlat0;
  let x_118 : vec3<f32> = u_xlat2;
  u_xlat2 = (vec3<f32>(x_116.x, x_116.y, x_116.z) * x_118);
  let x_120 : vec3<f32> = u_xlat2;
  let x_121 : vec3<f32> = u_xlat2;
  u_xlat2 = (x_120 + x_121);
  let x_129 : vec4<f32> = u_xlat0;
  let x_131 : vec4<bool> = (vec4<f32>(0.5f, 0.5f, 0.5f, 0.0f) >= vec4<f32>(x_129.x, x_129.y, x_129.z, x_129.x));
  let x_133 : vec3<bool> = vec3<bool>(x_131.x, x_131.y, x_131.z);
  let x_134 : vec4<bool> = u_xlatb4;
  u_xlatb4 = vec4<bool>(x_133.x, x_133.y, x_133.z, x_134.w);
  let x_139 : bool = u_xlatb4.x;
  u_xlat5.x = select(0.0f, 1.0f, x_139);
  let x_144 : bool = u_xlatb4.y;
  u_xlat5.y = select(0.0f, 1.0f, x_144);
  let x_148 : bool = u_xlatb4.z;
  u_xlat5.z = select(0.0f, 1.0f, x_148);
  let x_152 : bool = u_xlatb4.x;
  u_xlat4.x = select(1.0f, 0.0f, x_152);
  let x_156 : bool = u_xlatb4.y;
  u_xlat4.y = select(1.0f, 0.0f, x_156);
  let x_160 : bool = u_xlatb4.z;
  u_xlat4.z = select(1.0f, 0.0f, x_160);
  let x_163 : vec3<f32> = u_xlat3;
  let x_164 : vec4<f32> = u_xlat4;
  u_xlat3 = (x_163 * vec3<f32>(x_164.x, x_164.y, x_164.z));
  let x_167 : vec3<f32> = u_xlat2;
  let x_168 : vec4<f32> = u_xlat5;
  let x_171 : vec3<f32> = u_xlat3;
  u_xlat2 = ((x_167 * vec3<f32>(x_168.x, x_168.y, x_168.z)) + x_171);
  let x_173 : vec4<f32> = u_xlat0;
  let x_176 : vec3<f32> = u_xlat2;
  u_xlat2 = (-(vec3<f32>(x_173.x, x_173.y, x_173.z)) + x_176);
  let x_178 : f32 = u_xlat43;
  let x_180 : vec3<f32> = u_xlat2;
  let x_182 : vec4<f32> = u_xlat0;
  u_xlat2 = ((vec3<f32>(x_178, x_178, x_178) * x_180) + vec3<f32>(x_182.x, x_182.y, x_182.z));
  let x_186 : f32 = u_xlat0.x;
  u_xlat0.x = (x_186 + -0.150000006f);
  let x_191 : f32 = u_xlat0.x;
  u_xlat0.x = ceil(x_191);
  let x_195 : f32 = u_xlat0.x;
  u_xlat0.x = (-(x_195) + 1.0f);
  let x_199 : vec4<f32> = u_xlat0;
  let x_204 : vec3<f32> = u_xlat2;
  u_xlat2 = ((vec3<f32>(x_199.x, x_199.x, x_199.x) * vec3<f32>(0.400000006f, 0.400000006f, 0.400000006f)) + x_204);
  let x_210 : vec4<f32> = vs_INTERP3;
  let x_213 : f32 = x_44.x_GlobalMipBias.x;
  let x_214 : vec4<f32> = textureSampleBias(x_BumpMap, samplerSamplerState_Trilinear_Clamp, vec2<f32>(x_210.x, x_210.y), x_213);
  u_xlat3 = vec3<f32>(x_214.x, x_214.y, x_214.w);
  let x_217 : f32 = u_xlat3.x;
  let x_219 : f32 = u_xlat3.z;
  u_xlat3.x = (x_217 * x_219);
  let x_224 : vec3<f32> = u_xlat3;
  u_xlat21 = ((vec2<f32>(x_224.x, x_224.y) * vec2<f32>(2.0f, 2.0f)) + vec2<f32>(-1.0f, -1.0f));
  let x_232 : vec2<f32> = u_xlat21;
  let x_233 : vec2<f32> = u_xlat21;
  u_xlat43 = dot(x_232, x_233);
  let x_235 : f32 = u_xlat43;
  u_xlat43 = min(x_235, 1.0f);
  let x_237 : f32 = u_xlat43;
  u_xlat43 = (-(x_237) + 1.0f);
  let x_240 : f32 = u_xlat43;
  u_xlat43 = sqrt(x_240);
  let x_242 : f32 = u_xlat43;
  u_xlat43 = max(x_242, 1.00000002e-16f);
  let x_246 : f32 = u_xlat1.x;
  let x_248 : f32 = u_xlat0.x;
  u_xlat0.x = (x_246 + x_248);
  let x_252 : f32 = u_xlat0.x;
  u_xlat0.x = clamp(x_252, 0.0f, 1.0f);
  let x_256 : f32 = u_xlat1.y;
  u_xlat1.x = max(x_256, 0.0f);
  let x_260 : f32 = u_xlat1.x;
  u_xlat1.x = min(x_260, 0.850000024f);
  let x_268 : f32 = vs_INTERP2.w;
  u_xlatb22.x = (0.0f < x_268);
  let x_276 : f32 = x_274.unity_WorldTransformParams.w;
  u_xlatb22.z = (x_276 >= 0.0f);
  let x_281 : bool = u_xlatb22.x;
  u_xlat22.x = select(-1.0f, 1.0f, x_281);
  let x_285 : bool = u_xlatb22.z;
  u_xlat22.z = select(-1.0f, 1.0f, x_285);
  let x_289 : f32 = u_xlat22.z;
  let x_291 : f32 = u_xlat22.x;
  u_xlat22.x = (x_289 * x_291);
  let x_296 : vec3<f32> = vs_INTERP1;
  let x_298 : vec4<f32> = vs_INTERP2;
  u_xlat3 = (vec3<f32>(x_296.z, x_296.x, x_296.y) * vec3<f32>(x_298.y, x_298.z, x_298.x));
  let x_301 : vec3<f32> = vs_INTERP1;
  let x_303 : vec4<f32> = vs_INTERP2;
  let x_306 : vec3<f32> = u_xlat3;
  u_xlat3 = ((vec3<f32>(x_301.y, x_301.z, x_301.x) * vec3<f32>(x_303.z, x_303.x, x_303.y)) + -(x_306));
  let x_309 : vec3<f32> = u_xlat22;
  let x_311 : vec3<f32> = u_xlat3;
  u_xlat3 = (vec3<f32>(x_309.x, x_309.x, x_309.x) * x_311);
  let x_313 : vec2<f32> = u_xlat21;
  let x_315 : vec3<f32> = u_xlat3;
  u_xlat3 = (vec3<f32>(x_313.y, x_313.y, x_313.y) * x_315);
  let x_317 : vec2<f32> = u_xlat21;
  let x_319 : vec4<f32> = vs_INTERP2;
  let x_322 : vec3<f32> = u_xlat3;
  u_xlat3 = ((vec3<f32>(x_317.x, x_317.x, x_317.x) * vec3<f32>(x_319.x, x_319.y, x_319.z)) + x_322);
  let x_324 : f32 = u_xlat43;
  let x_326 : vec3<f32> = vs_INTERP1;
  let x_328 : vec3<f32> = u_xlat3;
  u_xlat22 = ((vec3<f32>(x_324, x_324, x_324) * x_326) + x_328);
  let x_330 : vec3<f32> = u_xlat22;
  let x_331 : vec3<f32> = u_xlat22;
  u_xlat21.x = dot(x_330, x_331);
  let x_335 : f32 = u_xlat21.x;
  u_xlat21.x = inverseSqrt(x_335);
  let x_338 : vec2<f32> = u_xlat21;
  let x_340 : vec3<f32> = u_xlat22;
  u_xlat22 = (vec3<f32>(x_338.x, x_338.x, x_338.x) * x_340);
  let x_345 : f32 = x_44.unity_OrthoParams.w;
  u_xlatb21 = (x_345 == 0.0f);
  let x_348 : vec3<f32> = vs_INTERP0;
  let x_353 : vec3<f32> = x_44.x_WorldSpaceCameraPos;
  u_xlat3 = (-(x_348) + x_353);
  let x_356 : vec3<f32> = u_xlat3;
  let x_357 : vec3<f32> = u_xlat3;
  u_xlat42 = dot(x_356, x_357);
  let x_359 : f32 = u_xlat42;
  u_xlat42 = inverseSqrt(x_359);
  let x_361 : f32 = u_xlat42;
  let x_363 : vec3<f32> = u_xlat3;
  u_xlat3 = (vec3<f32>(x_361, x_361, x_361) * x_363);
  let x_368 : f32 = x_44.unity_MatrixV[0i].z;
  u_xlat4.x = x_368;
  let x_371 : f32 = x_44.unity_MatrixV[1i].z;
  u_xlat4.y = x_371;
  let x_375 : f32 = x_44.unity_MatrixV[2i].z;
  u_xlat4.z = x_375;
  let x_377 : bool = u_xlatb21;
  if (x_377) {
    let x_381 : vec3<f32> = u_xlat3;
    x_378 = x_381;
  } else {
    let x_383 : vec4<f32> = u_xlat4;
    x_378 = vec3<f32>(x_383.x, x_383.y, x_383.z);
  }
  let x_385 : vec3<f32> = x_378;
  u_xlat3 = x_385;
  let x_386 : vec3<f32> = vs_INTERP0;
  let x_393 : vec4<f32> = x_391.x_CascadeShadowSplitSpheres0;
  let x_396 : vec3<f32> = (x_386 + -(vec3<f32>(x_393.x, x_393.y, x_393.z)));
  let x_397 : vec4<f32> = u_xlat4;
  u_xlat4 = vec4<f32>(x_396.x, x_396.y, x_396.z, x_397.w);
  let x_399 : vec3<f32> = vs_INTERP0;
  let x_401 : vec4<f32> = x_391.x_CascadeShadowSplitSpheres1;
  let x_404 : vec3<f32> = (x_399 + -(vec3<f32>(x_401.x, x_401.y, x_401.z)));
  let x_405 : vec4<f32> = u_xlat5;
  u_xlat5 = vec4<f32>(x_404.x, x_404.y, x_404.z, x_405.w);
  let x_408 : vec3<f32> = vs_INTERP0;
  let x_410 : vec4<f32> = x_391.x_CascadeShadowSplitSpheres2;
  let x_413 : vec3<f32> = (x_408 + -(vec3<f32>(x_410.x, x_410.y, x_410.z)));
  let x_414 : vec4<f32> = u_xlat6;
  u_xlat6 = vec4<f32>(x_413.x, x_413.y, x_413.z, x_414.w);
  let x_417 : vec3<f32> = vs_INTERP0;
  let x_419 : vec4<f32> = x_391.x_CascadeShadowSplitSpheres3;
  u_xlat7 = (x_417 + -(vec3<f32>(x_419.x, x_419.y, x_419.z)));
  let x_423 : vec4<f32> = u_xlat4;
  let x_425 : vec4<f32> = u_xlat4;
  u_xlat4.x = dot(vec3<f32>(x_423.x, x_423.y, x_423.z), vec3<f32>(x_425.x, x_425.y, x_425.z));
  let x_429 : vec4<f32> = u_xlat5;
  let x_431 : vec4<f32> = u_xlat5;
  u_xlat4.y = dot(vec3<f32>(x_429.x, x_429.y, x_429.z), vec3<f32>(x_431.x, x_431.y, x_431.z));
  let x_435 : vec4<f32> = u_xlat6;
  let x_437 : vec4<f32> = u_xlat6;
  u_xlat4.z = dot(vec3<f32>(x_435.x, x_435.y, x_435.z), vec3<f32>(x_437.x, x_437.y, x_437.z));
  let x_441 : vec3<f32> = u_xlat7;
  let x_442 : vec3<f32> = u_xlat7;
  u_xlat4.w = dot(x_441, x_442);
  let x_445 : vec4<f32> = u_xlat4;
  let x_448 : vec4<f32> = x_391.x_CascadeShadowSplitSphereRadii;
  u_xlatb4 = (x_445 < x_448);
  let x_451 : bool = u_xlatb4.x;
  u_xlat5.x = select(0.0f, 1.0f, x_451);
  let x_455 : bool = u_xlatb4.y;
  u_xlat5.y = select(0.0f, 1.0f, x_455);
  let x_459 : bool = u_xlatb4.z;
  u_xlat5.z = select(0.0f, 1.0f, x_459);
  let x_463 : bool = u_xlatb4.w;
  u_xlat5.w = select(0.0f, 1.0f, x_463);
  let x_467 : bool = u_xlatb4.x;
  u_xlat4.x = select(-0.0f, -1.0f, x_467);
  let x_472 : bool = u_xlatb4.y;
  u_xlat4.y = select(-0.0f, -1.0f, x_472);
  let x_476 : bool = u_xlatb4.z;
  u_xlat4.z = select(-0.0f, -1.0f, x_476);
  let x_479 : vec4<f32> = u_xlat4;
  let x_481 : vec4<f32> = u_xlat5;
  let x_483 : vec3<f32> = (vec3<f32>(x_479.x, x_479.y, x_479.z) + vec3<f32>(x_481.y, x_481.z, x_481.w));
  let x_484 : vec4<f32> = u_xlat4;
  u_xlat4 = vec4<f32>(x_483.x, x_483.y, x_483.z, x_484.w);
  let x_486 : vec4<f32> = u_xlat4;
  let x_489 : vec3<f32> = max(vec3<f32>(x_486.x, x_486.y, x_486.z), vec3<f32>(0.0f, 0.0f, 0.0f));
  let x_490 : vec4<f32> = u_xlat5;
  u_xlat5 = vec4<f32>(x_490.x, x_489.x, x_489.y, x_489.z);
  let x_492 : vec4<f32> = u_xlat5;
  u_xlat21.x = dot(x_492, vec4<f32>(4.0f, 3.0f, 2.0f, 1.0f));
  let x_499 : f32 = u_xlat21.x;
  u_xlat21.x = (-(x_499) + 4.0f);
  let x_506 : f32 = u_xlat21.x;
  u_xlatu21 = u32(x_506);
  let x_510 : u32 = u_xlatu21;
  u_xlati21 = (bitcast<i32>(x_510) << bitcast<u32>(2i));
  let x_513 : vec3<f32> = vs_INTERP0;
  let x_515 : i32 = u_xlati21;
  let x_518 : i32 = u_xlati21;
  let x_522 : vec4<f32> = x_391.x_MainLightWorldToShadow[((x_515 + 1i) / 4i)][((x_518 + 1i) % 4i)];
  let x_524 : vec3<f32> = (vec3<f32>(x_513.y, x_513.y, x_513.y) * vec3<f32>(x_522.x, x_522.y, x_522.z));
  let x_525 : vec4<f32> = u_xlat4;
  u_xlat4 = vec4<f32>(x_524.x, x_524.y, x_524.z, x_525.w);
  let x_527 : i32 = u_xlati21;
  let x_529 : i32 = u_xlati21;
  let x_532 : vec4<f32> = x_391.x_MainLightWorldToShadow[(x_527 / 4i)][(x_529 % 4i)];
  let x_534 : vec3<f32> = vs_INTERP0;
  let x_537 : vec4<f32> = u_xlat4;
  let x_539 : vec3<f32> = ((vec3<f32>(x_532.x, x_532.y, x_532.z) * vec3<f32>(x_534.x, x_534.x, x_534.x)) + vec3<f32>(x_537.x, x_537.y, x_537.z));
  let x_540 : vec4<f32> = u_xlat4;
  u_xlat4 = vec4<f32>(x_539.x, x_539.y, x_539.z, x_540.w);
  let x_542 : i32 = u_xlati21;
  let x_545 : i32 = u_xlati21;
  let x_549 : vec4<f32> = x_391.x_MainLightWorldToShadow[((x_542 + 2i) / 4i)][((x_545 + 2i) % 4i)];
  let x_551 : vec3<f32> = vs_INTERP0;
  let x_554 : vec4<f32> = u_xlat4;
  let x_556 : vec3<f32> = ((vec3<f32>(x_549.x, x_549.y, x_549.z) * vec3<f32>(x_551.z, x_551.z, x_551.z)) + vec3<f32>(x_554.x, x_554.y, x_554.z));
  let x_557 : vec4<f32> = u_xlat4;
  u_xlat4 = vec4<f32>(x_556.x, x_556.y, x_556.z, x_557.w);
  let x_559 : vec4<f32> = u_xlat4;
  let x_561 : i32 = u_xlati21;
  let x_564 : i32 = u_xlati21;
  let x_568 : vec4<f32> = x_391.x_MainLightWorldToShadow[((x_561 + 3i) / 4i)][((x_564 + 3i) % 4i)];
  let x_570 : vec3<f32> = (vec3<f32>(x_559.x, x_559.y, x_559.z) + vec3<f32>(x_568.x, x_568.y, x_568.z));
  let x_571 : vec4<f32> = u_xlat4;
  u_xlat4 = vec4<f32>(x_570.x, x_570.y, x_570.z, x_571.w);
  let x_574 : f32 = vs_INTERP0.y;
  let x_576 : f32 = x_44.unity_MatrixV[1i].z;
  u_xlat21.x = (x_574 * x_576);
  let x_580 : f32 = x_44.unity_MatrixV[0i].z;
  let x_582 : f32 = vs_INTERP0.x;
  let x_585 : f32 = u_xlat21.x;
  u_xlat21.x = ((x_580 * x_582) + x_585);
  let x_589 : f32 = x_44.unity_MatrixV[2i].z;
  let x_591 : f32 = vs_INTERP0.z;
  let x_594 : f32 = u_xlat21.x;
  u_xlat21.x = ((x_589 * x_591) + x_594);
  let x_598 : f32 = u_xlat21.x;
  let x_600 : f32 = x_44.unity_MatrixV[3i].z;
  u_xlat21.x = (x_598 + x_600);
  let x_604 : f32 = u_xlat21.x;
  let x_608 : f32 = x_44.x_ProjectionParams.y;
  u_xlat21.x = (-(x_604) + -(x_608));
  let x_613 : f32 = u_xlat21.x;
  u_xlat21.x = max(x_613, 0.0f);
  let x_617 : f32 = u_xlat21.x;
  let x_620 : f32 = x_44.unity_FogParams.x;
  u_xlat21.x = (x_617 * x_620);
  let x_630 : vec2<f32> = vs_INTERP4;
  let x_632 : f32 = x_44.x_GlobalMipBias.x;
  let x_633 : vec4<f32> = textureSampleBias(unity_LightmapInd, samplerunity_Lightmap, x_630, x_632);
  u_xlat5 = x_633;
  let x_638 : vec2<f32> = vs_INTERP4;
  let x_640 : f32 = x_44.x_GlobalMipBias.x;
  let x_641 : vec4<f32> = textureSampleBias(unity_Lightmap, samplerunity_Lightmap, x_638, x_640);
  let x_642 : vec3<f32> = vec3<f32>(x_641.x, x_641.y, x_641.z);
  let x_643 : vec4<f32> = u_xlat6;
  u_xlat6 = vec4<f32>(x_642.x, x_642.y, x_642.z, x_643.w);
  let x_645 : vec4<f32> = u_xlat5;
  let x_649 : vec3<f32> = (vec3<f32>(x_645.x, x_645.y, x_645.z) + vec3<f32>(-0.5f, -0.5f, -0.5f));
  let x_650 : vec4<f32> = u_xlat5;
  u_xlat5 = vec4<f32>(x_649.x, x_649.y, x_649.z, x_650.w);
  let x_652 : vec3<f32> = u_xlat22;
  let x_653 : vec4<f32> = u_xlat5;
  u_xlat42 = dot(x_652, vec3<f32>(x_653.x, x_653.y, x_653.z));
  let x_656 : f32 = u_xlat42;
  u_xlat42 = (x_656 + 0.5f);
  let x_658 : f32 = u_xlat42;
  let x_660 : vec4<f32> = u_xlat6;
  let x_662 : vec3<f32> = (vec3<f32>(x_658, x_658, x_658) * vec3<f32>(x_660.x, x_660.y, x_660.z));
  let x_663 : vec4<f32> = u_xlat5;
  u_xlat5 = vec4<f32>(x_662.x, x_662.y, x_662.z, x_663.w);
  let x_666 : f32 = u_xlat5.w;
  u_xlat42 = max(x_666, 0.0001f);
  let x_669 : vec4<f32> = u_xlat5;
  let x_671 : f32 = u_xlat42;
  let x_673 : vec3<f32> = (vec3<f32>(x_669.x, x_669.y, x_669.z) / vec3<f32>(x_671, x_671, x_671));
  let x_674 : vec4<f32> = u_xlat5;
  u_xlat5 = vec4<f32>(x_673.x, x_673.y, x_673.z, x_674.w);
  let x_678 : vec4<f32> = x_44.x_ScaledScreenParams;
  let x_679 : vec2<f32> = vec2<f32>(x_678.x, x_678.y);
  let x_683 : vec2<f32> = (vec2<f32>(1.0f, 1.0f) / vec2<f32>(x_679.x, x_679.y));
  let x_684 : vec4<f32> = u_xlat6;
  u_xlat6 = vec4<f32>(x_683.x, x_683.y, x_684.z, x_684.w);
  let x_686 : vec4<f32> = u_xlat6;
  let x_688 : vec4<f32> = hlslcc_FragCoord;
  let x_690 : vec2<f32> = (vec2<f32>(x_686.x, x_686.y) * vec2<f32>(x_688.x, x_688.y));
  let x_691 : vec4<f32> = u_xlat6;
  u_xlat6 = vec4<f32>(x_690.x, x_690.y, x_691.z, x_691.w);
  let x_694 : f32 = u_xlat6.y;
  let x_697 : f32 = x_44.x_ScaleBiasRt.x;
  let x_700 : f32 = x_44.x_ScaleBiasRt.y;
  u_xlat42 = ((x_694 * x_697) + x_700);
  let x_702 : f32 = u_xlat42;
  u_xlat6.z = (-(x_702) + 1.0f);
  let x_707 : f32 = u_xlat0.x;
  u_xlat42 = ((-(x_707) * 0.959999979f) + 0.959999979f);
  let x_713 : f32 = u_xlat42;
  let x_716 : f32 = u_xlat1.x;
  u_xlat65 = (-(x_713) + x_716);
  let x_718 : f32 = u_xlat42;
  let x_720 : vec3<f32> = u_xlat2;
  u_xlat7 = (vec3<f32>(x_718, x_718, x_718) * x_720);
  let x_722 : vec3<f32> = u_xlat2;
  u_xlat2 = (x_722 + vec3<f32>(-0.039999999f, -0.039999999f, -0.039999999f));
  let x_726 : vec4<f32> = u_xlat0;
  let x_728 : vec3<f32> = u_xlat2;
  u_xlat2 = ((vec3<f32>(x_726.x, x_726.x, x_726.x) * x_728) + vec3<f32>(0.039999999f, 0.039999999f, 0.039999999f));
  let x_734 : f32 = u_xlat1.x;
  u_xlat0.x = (-(x_734) + 1.0f);
  let x_739 : f32 = u_xlat0.x;
  let x_741 : f32 = u_xlat0.x;
  u_xlat42 = (x_739 * x_741);
  let x_743 : f32 = u_xlat42;
  let x_744 : f32 = u_xlat42;
  u_xlat1.x = (x_743 * x_744);
  let x_747 : f32 = u_xlat65;
  u_xlat65 = (x_747 + 1.0f);
  let x_749 : f32 = u_xlat65;
  u_xlat65 = min(x_749, 1.0f);
  let x_752 : f32 = u_xlat42;
  u_xlat66 = ((x_752 * 4.0f) + 2.0f);
  let x_761 : vec4<f32> = u_xlat6;
  let x_764 : f32 = x_44.x_GlobalMipBias.x;
  let x_765 : vec4<f32> = textureSampleBias(x_ScreenSpaceOcclusionTexture, sampler_ScreenSpaceOcclusionTexture, vec2<f32>(x_761.x, x_761.z), x_764);
  u_xlat67 = x_765.x;
  let x_768 : f32 = u_xlat67;
  u_xlat68 = (x_768 + -1.0f);
  let x_771 : f32 = x_44.x_AmbientOcclusionParam.w;
  let x_772 : f32 = u_xlat68;
  u_xlat68 = ((x_771 * x_772) + 1.0f);
  let x_777 : f32 = u_xlat0.w;
  let x_778 : f32 = u_xlat67;
  u_xlat63 = min(x_777, x_778);
  let x_782 : f32 = x_391.x_MainLightShadowParams.y;
  u_xlatb67 = (0.0f < x_782);
  let x_784 : bool = u_xlatb67;
  if (x_784) {
    let x_788 : f32 = x_391.x_MainLightShadowParams.y;
    u_xlatb67 = (x_788 == 1.0f);
    let x_790 : bool = u_xlatb67;
    if (x_790) {
      let x_793 : vec4<f32> = u_xlat4;
      let x_796 : vec4<f32> = x_391.x_MainLightShadowOffset0;
      u_xlat6 = (vec4<f32>(x_793.x, x_793.y, x_793.x, x_793.y) + x_796);
      let x_799 : vec4<f32> = u_xlat6;
      let x_800 : vec2<f32> = vec2<f32>(x_799.x, x_799.y);
      let x_802 : f32 = u_xlat4.z;
      txVec0 = vec3<f32>(x_800.x, x_800.y, x_802);
      let x_815 : vec3<f32> = txVec0;
      let x_817 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_815.xy, x_815.z);
      u_xlat8.x = x_817;
      let x_820 : vec4<f32> = u_xlat6;
      let x_821 : vec2<f32> = vec2<f32>(x_820.z, x_820.w);
      let x_823 : f32 = u_xlat4.z;
      txVec1 = vec3<f32>(x_821.x, x_821.y, x_823);
      let x_830 : vec3<f32> = txVec1;
      let x_832 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_830.xy, x_830.z);
      u_xlat8.y = x_832;
      let x_834 : vec4<f32> = u_xlat4;
      let x_837 : vec4<f32> = x_391.x_MainLightShadowOffset1;
      u_xlat6 = (vec4<f32>(x_834.x, x_834.y, x_834.x, x_834.y) + x_837);
      let x_840 : vec4<f32> = u_xlat6;
      let x_841 : vec2<f32> = vec2<f32>(x_840.x, x_840.y);
      let x_843 : f32 = u_xlat4.z;
      txVec2 = vec3<f32>(x_841.x, x_841.y, x_843);
      let x_850 : vec3<f32> = txVec2;
      let x_852 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_850.xy, x_850.z);
      u_xlat8.z = x_852;
      let x_855 : vec4<f32> = u_xlat6;
      let x_856 : vec2<f32> = vec2<f32>(x_855.z, x_855.w);
      let x_858 : f32 = u_xlat4.z;
      txVec3 = vec3<f32>(x_856.x, x_856.y, x_858);
      let x_865 : vec3<f32> = txVec3;
      let x_867 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_865.xy, x_865.z);
      u_xlat8.w = x_867;
      let x_869 : vec4<f32> = u_xlat8;
      u_xlat67 = dot(x_869, vec4<f32>(0.25f, 0.25f, 0.25f, 0.25f));
    } else {
      let x_876 : f32 = x_391.x_MainLightShadowParams.y;
      u_xlatb6 = (x_876 == 2.0f);
      let x_878 : bool = u_xlatb6;
      if (x_878) {
        let x_881 : vec4<f32> = u_xlat4;
        let x_884 : vec4<f32> = x_391.x_MainLightShadowmapSize;
        let x_888 : vec2<f32> = ((vec2<f32>(x_881.x, x_881.y) * vec2<f32>(x_884.z, x_884.w)) + vec2<f32>(0.5f, 0.5f));
        let x_889 : vec4<f32> = u_xlat6;
        u_xlat6 = vec4<f32>(x_888.x, x_888.y, x_889.z, x_889.w);
        let x_891 : vec4<f32> = u_xlat6;
        let x_893 : vec2<f32> = floor(vec2<f32>(x_891.x, x_891.y));
        let x_894 : vec4<f32> = u_xlat6;
        u_xlat6 = vec4<f32>(x_893.x, x_893.y, x_894.z, x_894.w);
        let x_897 : vec4<f32> = u_xlat4;
        let x_900 : vec4<f32> = x_391.x_MainLightShadowmapSize;
        let x_903 : vec4<f32> = u_xlat6;
        u_xlat48 = ((vec2<f32>(x_897.x, x_897.y) * vec2<f32>(x_900.z, x_900.w)) + -(vec2<f32>(x_903.x, x_903.y)));
        let x_907 : vec2<f32> = u_xlat48;
        u_xlat8 = (vec4<f32>(x_907.x, x_907.x, x_907.y, x_907.y) + vec4<f32>(0.5f, 1.0f, 0.5f, 1.0f));
        let x_912 : vec4<f32> = u_xlat8;
        let x_914 : vec4<f32> = u_xlat8;
        u_xlat9 = (vec4<f32>(x_912.x, x_912.x, x_912.z, x_912.z) * vec4<f32>(x_914.x, x_914.x, x_914.z, x_914.z));
        let x_917 : vec4<f32> = u_xlat9;
        let x_921 : vec2<f32> = (vec2<f32>(x_917.y, x_917.w) * vec2<f32>(0.079999998f, 0.079999998f));
        let x_922 : vec4<f32> = u_xlat8;
        u_xlat8 = vec4<f32>(x_921.x, x_922.y, x_921.y, x_922.w);
        let x_924 : vec4<f32> = u_xlat9;
        let x_927 : vec2<f32> = u_xlat48;
        let x_929 : vec2<f32> = ((vec2<f32>(x_924.x, x_924.z) * vec2<f32>(0.5f, 0.5f)) + -(x_927));
        let x_930 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_929.x, x_929.y, x_930.z, x_930.w);
        let x_933 : vec2<f32> = u_xlat48;
        u_xlat51 = (-(x_933) + vec2<f32>(1.0f, 1.0f));
        let x_937 : vec2<f32> = u_xlat48;
        let x_939 : vec2<f32> = min(x_937, vec2<f32>(0.0f, 0.0f));
        let x_940 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_939.x, x_939.y, x_940.z, x_940.w);
        let x_942 : vec4<f32> = u_xlat10;
        let x_945 : vec4<f32> = u_xlat10;
        let x_948 : vec2<f32> = u_xlat51;
        let x_949 : vec2<f32> = ((-(vec2<f32>(x_942.x, x_942.y)) * vec2<f32>(x_945.x, x_945.y)) + x_948);
        let x_950 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_949.x, x_949.y, x_950.z, x_950.w);
        let x_952 : vec2<f32> = u_xlat48;
        u_xlat48 = max(x_952, vec2<f32>(0.0f, 0.0f));
        let x_954 : vec2<f32> = u_xlat48;
        let x_956 : vec2<f32> = u_xlat48;
        let x_958 : vec4<f32> = u_xlat8;
        u_xlat48 = ((-(x_954) * x_956) + vec2<f32>(x_958.y, x_958.w));
        let x_961 : vec4<f32> = u_xlat10;
        let x_963 : vec2<f32> = (vec2<f32>(x_961.x, x_961.y) + vec2<f32>(1.0f, 1.0f));
        let x_964 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_963.x, x_963.y, x_964.z, x_964.w);
        let x_966 : vec2<f32> = u_xlat48;
        u_xlat48 = (x_966 + vec2<f32>(1.0f, 1.0f));
        let x_969 : vec4<f32> = u_xlat9;
        let x_973 : vec2<f32> = (vec2<f32>(x_969.x, x_969.y) * vec2<f32>(0.159999996f, 0.159999996f));
        let x_974 : vec4<f32> = u_xlat11;
        u_xlat11 = vec4<f32>(x_973.x, x_973.y, x_974.z, x_974.w);
        let x_976 : vec2<f32> = u_xlat51;
        let x_977 : vec2<f32> = (x_976 * vec2<f32>(0.159999996f, 0.159999996f));
        let x_978 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_977.x, x_977.y, x_978.z, x_978.w);
        let x_980 : vec4<f32> = u_xlat10;
        let x_982 : vec2<f32> = (vec2<f32>(x_980.x, x_980.y) * vec2<f32>(0.159999996f, 0.159999996f));
        let x_983 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_982.x, x_982.y, x_983.z, x_983.w);
        let x_986 : vec2<f32> = u_xlat48;
        let x_987 : vec2<f32> = (x_986 * vec2<f32>(0.159999996f, 0.159999996f));
        let x_988 : vec4<f32> = u_xlat12;
        u_xlat12 = vec4<f32>(x_987.x, x_987.y, x_988.z, x_988.w);
        let x_990 : vec4<f32> = u_xlat8;
        u_xlat48 = (vec2<f32>(x_990.y, x_990.w) * vec2<f32>(0.159999996f, 0.159999996f));
        let x_994 : f32 = u_xlat10.x;
        u_xlat11.z = x_994;
        let x_997 : f32 = u_xlat48.x;
        u_xlat11.w = x_997;
        let x_1000 : f32 = u_xlat12.x;
        u_xlat9.z = x_1000;
        let x_1003 : f32 = u_xlat8.x;
        u_xlat9.w = x_1003;
        let x_1006 : vec4<f32> = u_xlat9;
        let x_1008 : vec4<f32> = u_xlat11;
        u_xlat13 = (vec4<f32>(x_1006.z, x_1006.w, x_1006.x, x_1006.z) + vec4<f32>(x_1008.z, x_1008.w, x_1008.x, x_1008.z));
        let x_1012 : f32 = u_xlat11.y;
        u_xlat10.z = x_1012;
        let x_1015 : f32 = u_xlat48.y;
        u_xlat10.w = x_1015;
        let x_1018 : f32 = u_xlat9.y;
        u_xlat12.z = x_1018;
        let x_1021 : f32 = u_xlat8.z;
        u_xlat12.w = x_1021;
        let x_1023 : vec4<f32> = u_xlat10;
        let x_1025 : vec4<f32> = u_xlat12;
        let x_1027 : vec3<f32> = (vec3<f32>(x_1023.z, x_1023.y, x_1023.w) + vec3<f32>(x_1025.z, x_1025.y, x_1025.w));
        let x_1028 : vec4<f32> = u_xlat8;
        u_xlat8 = vec4<f32>(x_1027.x, x_1027.y, x_1027.z, x_1028.w);
        let x_1030 : vec4<f32> = u_xlat9;
        let x_1032 : vec4<f32> = u_xlat13;
        let x_1034 : vec3<f32> = (vec3<f32>(x_1030.x, x_1030.z, x_1030.w) / vec3<f32>(x_1032.z, x_1032.w, x_1032.y));
        let x_1035 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_1034.x, x_1034.y, x_1034.z, x_1035.w);
        let x_1037 : vec4<f32> = u_xlat9;
        let x_1042 : vec3<f32> = (vec3<f32>(x_1037.x, x_1037.y, x_1037.z) + vec3<f32>(-2.5f, -0.5f, 1.5f));
        let x_1043 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_1042.x, x_1042.y, x_1042.z, x_1043.w);
        let x_1045 : vec4<f32> = u_xlat12;
        let x_1047 : vec4<f32> = u_xlat8;
        let x_1049 : vec3<f32> = (vec3<f32>(x_1045.z, x_1045.y, x_1045.w) / vec3<f32>(x_1047.x, x_1047.y, x_1047.z));
        let x_1050 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_1049.x, x_1049.y, x_1049.z, x_1050.w);
        let x_1052 : vec4<f32> = u_xlat10;
        let x_1054 : vec3<f32> = (vec3<f32>(x_1052.x, x_1052.y, x_1052.z) + vec3<f32>(-2.5f, -0.5f, 1.5f));
        let x_1055 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_1054.x, x_1054.y, x_1054.z, x_1055.w);
        let x_1057 : vec4<f32> = u_xlat9;
        let x_1060 : vec4<f32> = x_391.x_MainLightShadowmapSize;
        let x_1062 : vec3<f32> = (vec3<f32>(x_1057.y, x_1057.x, x_1057.z) * vec3<f32>(x_1060.x, x_1060.x, x_1060.x));
        let x_1063 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_1062.x, x_1062.y, x_1062.z, x_1063.w);
        let x_1065 : vec4<f32> = u_xlat10;
        let x_1068 : vec4<f32> = x_391.x_MainLightShadowmapSize;
        let x_1070 : vec3<f32> = (vec3<f32>(x_1065.x, x_1065.y, x_1065.z) * vec3<f32>(x_1068.y, x_1068.y, x_1068.y));
        let x_1071 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_1070.x, x_1070.y, x_1070.z, x_1071.w);
        let x_1074 : f32 = u_xlat10.x;
        u_xlat9.w = x_1074;
        let x_1076 : vec4<f32> = u_xlat6;
        let x_1079 : vec4<f32> = x_391.x_MainLightShadowmapSize;
        let x_1082 : vec4<f32> = u_xlat9;
        u_xlat11 = ((vec4<f32>(x_1076.x, x_1076.y, x_1076.x, x_1076.y) * vec4<f32>(x_1079.x, x_1079.y, x_1079.x, x_1079.y)) + vec4<f32>(x_1082.y, x_1082.w, x_1082.x, x_1082.w));
        let x_1085 : vec4<f32> = u_xlat6;
        let x_1088 : vec4<f32> = x_391.x_MainLightShadowmapSize;
        let x_1091 : vec4<f32> = u_xlat9;
        u_xlat48 = ((vec2<f32>(x_1085.x, x_1085.y) * vec2<f32>(x_1088.x, x_1088.y)) + vec2<f32>(x_1091.z, x_1091.w));
        let x_1095 : f32 = u_xlat9.y;
        u_xlat10.w = x_1095;
        let x_1097 : vec4<f32> = u_xlat10;
        let x_1098 : vec2<f32> = vec2<f32>(x_1097.y, x_1097.z);
        let x_1099 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_1099.x, x_1098.x, x_1099.z, x_1098.y);
        let x_1101 : vec4<f32> = u_xlat6;
        let x_1104 : vec4<f32> = x_391.x_MainLightShadowmapSize;
        let x_1107 : vec4<f32> = u_xlat9;
        u_xlat12 = ((vec4<f32>(x_1101.x, x_1101.y, x_1101.x, x_1101.y) * vec4<f32>(x_1104.x, x_1104.y, x_1104.x, x_1104.y)) + vec4<f32>(x_1107.x, x_1107.y, x_1107.z, x_1107.y));
        let x_1110 : vec4<f32> = u_xlat6;
        let x_1113 : vec4<f32> = x_391.x_MainLightShadowmapSize;
        let x_1116 : vec4<f32> = u_xlat10;
        u_xlat10 = ((vec4<f32>(x_1110.x, x_1110.y, x_1110.x, x_1110.y) * vec4<f32>(x_1113.x, x_1113.y, x_1113.x, x_1113.y)) + vec4<f32>(x_1116.w, x_1116.y, x_1116.w, x_1116.z));
        let x_1119 : vec4<f32> = u_xlat6;
        let x_1122 : vec4<f32> = x_391.x_MainLightShadowmapSize;
        let x_1125 : vec4<f32> = u_xlat9;
        u_xlat9 = ((vec4<f32>(x_1119.x, x_1119.y, x_1119.x, x_1119.y) * vec4<f32>(x_1122.x, x_1122.y, x_1122.x, x_1122.y)) + vec4<f32>(x_1125.x, x_1125.w, x_1125.z, x_1125.w));
        let x_1129 : vec4<f32> = u_xlat8;
        let x_1131 : vec4<f32> = u_xlat13;
        u_xlat14 = (vec4<f32>(x_1129.x, x_1129.x, x_1129.x, x_1129.y) * vec4<f32>(x_1131.z, x_1131.w, x_1131.y, x_1131.z));
        let x_1135 : vec4<f32> = u_xlat8;
        let x_1137 : vec4<f32> = u_xlat13;
        u_xlat15 = (vec4<f32>(x_1135.y, x_1135.y, x_1135.z, x_1135.z) * x_1137);
        let x_1140 : f32 = u_xlat8.z;
        let x_1142 : f32 = u_xlat13.y;
        u_xlat6.x = (x_1140 * x_1142);
        let x_1146 : vec4<f32> = u_xlat11;
        let x_1147 : vec2<f32> = vec2<f32>(x_1146.x, x_1146.y);
        let x_1149 : f32 = u_xlat4.z;
        txVec4 = vec3<f32>(x_1147.x, x_1147.y, x_1149);
        let x_1157 : vec3<f32> = txVec4;
        let x_1159 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1157.xy, x_1157.z);
        u_xlat27 = x_1159;
        let x_1161 : vec4<f32> = u_xlat11;
        let x_1162 : vec2<f32> = vec2<f32>(x_1161.z, x_1161.w);
        let x_1164 : f32 = u_xlat4.z;
        txVec5 = vec3<f32>(x_1162.x, x_1162.y, x_1164);
        let x_1172 : vec3<f32> = txVec5;
        let x_1174 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1172.xy, x_1172.z);
        u_xlat70 = x_1174;
        let x_1175 : f32 = u_xlat70;
        let x_1177 : f32 = u_xlat14.y;
        u_xlat70 = (x_1175 * x_1177);
        let x_1180 : f32 = u_xlat14.x;
        let x_1181 : f32 = u_xlat27;
        let x_1183 : f32 = u_xlat70;
        u_xlat27 = ((x_1180 * x_1181) + x_1183);
        let x_1186 : vec2<f32> = u_xlat48;
        let x_1188 : f32 = u_xlat4.z;
        txVec6 = vec3<f32>(x_1186.x, x_1186.y, x_1188);
        let x_1195 : vec3<f32> = txVec6;
        let x_1197 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1195.xy, x_1195.z);
        u_xlat48.x = x_1197;
        let x_1200 : f32 = u_xlat14.z;
        let x_1202 : f32 = u_xlat48.x;
        let x_1204 : f32 = u_xlat27;
        u_xlat27 = ((x_1200 * x_1202) + x_1204);
        let x_1207 : vec4<f32> = u_xlat10;
        let x_1208 : vec2<f32> = vec2<f32>(x_1207.x, x_1207.y);
        let x_1210 : f32 = u_xlat4.z;
        txVec7 = vec3<f32>(x_1208.x, x_1208.y, x_1210);
        let x_1217 : vec3<f32> = txVec7;
        let x_1219 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1217.xy, x_1217.z);
        u_xlat48.x = x_1219;
        let x_1222 : f32 = u_xlat14.w;
        let x_1224 : f32 = u_xlat48.x;
        let x_1226 : f32 = u_xlat27;
        u_xlat27 = ((x_1222 * x_1224) + x_1226);
        let x_1229 : vec4<f32> = u_xlat12;
        let x_1230 : vec2<f32> = vec2<f32>(x_1229.x, x_1229.y);
        let x_1232 : f32 = u_xlat4.z;
        txVec8 = vec3<f32>(x_1230.x, x_1230.y, x_1232);
        let x_1239 : vec3<f32> = txVec8;
        let x_1241 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1239.xy, x_1239.z);
        u_xlat48.x = x_1241;
        let x_1244 : f32 = u_xlat15.x;
        let x_1246 : f32 = u_xlat48.x;
        let x_1248 : f32 = u_xlat27;
        u_xlat27 = ((x_1244 * x_1246) + x_1248);
        let x_1251 : vec4<f32> = u_xlat12;
        let x_1252 : vec2<f32> = vec2<f32>(x_1251.z, x_1251.w);
        let x_1254 : f32 = u_xlat4.z;
        txVec9 = vec3<f32>(x_1252.x, x_1252.y, x_1254);
        let x_1261 : vec3<f32> = txVec9;
        let x_1263 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1261.xy, x_1261.z);
        u_xlat48.x = x_1263;
        let x_1266 : f32 = u_xlat15.y;
        let x_1268 : f32 = u_xlat48.x;
        let x_1270 : f32 = u_xlat27;
        u_xlat27 = ((x_1266 * x_1268) + x_1270);
        let x_1273 : vec4<f32> = u_xlat10;
        let x_1274 : vec2<f32> = vec2<f32>(x_1273.z, x_1273.w);
        let x_1276 : f32 = u_xlat4.z;
        txVec10 = vec3<f32>(x_1274.x, x_1274.y, x_1276);
        let x_1283 : vec3<f32> = txVec10;
        let x_1285 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1283.xy, x_1283.z);
        u_xlat48.x = x_1285;
        let x_1288 : f32 = u_xlat15.z;
        let x_1290 : f32 = u_xlat48.x;
        let x_1292 : f32 = u_xlat27;
        u_xlat27 = ((x_1288 * x_1290) + x_1292);
        let x_1295 : vec4<f32> = u_xlat9;
        let x_1296 : vec2<f32> = vec2<f32>(x_1295.x, x_1295.y);
        let x_1298 : f32 = u_xlat4.z;
        txVec11 = vec3<f32>(x_1296.x, x_1296.y, x_1298);
        let x_1305 : vec3<f32> = txVec11;
        let x_1307 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1305.xy, x_1305.z);
        u_xlat48.x = x_1307;
        let x_1310 : f32 = u_xlat15.w;
        let x_1312 : f32 = u_xlat48.x;
        let x_1314 : f32 = u_xlat27;
        u_xlat27 = ((x_1310 * x_1312) + x_1314);
        let x_1317 : vec4<f32> = u_xlat9;
        let x_1318 : vec2<f32> = vec2<f32>(x_1317.z, x_1317.w);
        let x_1320 : f32 = u_xlat4.z;
        txVec12 = vec3<f32>(x_1318.x, x_1318.y, x_1320);
        let x_1327 : vec3<f32> = txVec12;
        let x_1329 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1327.xy, x_1327.z);
        u_xlat48.x = x_1329;
        let x_1332 : f32 = u_xlat6.x;
        let x_1334 : f32 = u_xlat48.x;
        let x_1336 : f32 = u_xlat27;
        u_xlat67 = ((x_1332 * x_1334) + x_1336);
      } else {
        let x_1339 : vec4<f32> = u_xlat4;
        let x_1342 : vec4<f32> = x_391.x_MainLightShadowmapSize;
        let x_1345 : vec2<f32> = ((vec2<f32>(x_1339.x, x_1339.y) * vec2<f32>(x_1342.z, x_1342.w)) + vec2<f32>(0.5f, 0.5f));
        let x_1346 : vec4<f32> = u_xlat6;
        u_xlat6 = vec4<f32>(x_1345.x, x_1345.y, x_1346.z, x_1346.w);
        let x_1348 : vec4<f32> = u_xlat6;
        let x_1350 : vec2<f32> = floor(vec2<f32>(x_1348.x, x_1348.y));
        let x_1351 : vec4<f32> = u_xlat6;
        u_xlat6 = vec4<f32>(x_1350.x, x_1350.y, x_1351.z, x_1351.w);
        let x_1353 : vec4<f32> = u_xlat4;
        let x_1356 : vec4<f32> = x_391.x_MainLightShadowmapSize;
        let x_1359 : vec4<f32> = u_xlat6;
        u_xlat48 = ((vec2<f32>(x_1353.x, x_1353.y) * vec2<f32>(x_1356.z, x_1356.w)) + -(vec2<f32>(x_1359.x, x_1359.y)));
        let x_1363 : vec2<f32> = u_xlat48;
        u_xlat8 = (vec4<f32>(x_1363.x, x_1363.x, x_1363.y, x_1363.y) + vec4<f32>(0.5f, 1.0f, 0.5f, 1.0f));
        let x_1366 : vec4<f32> = u_xlat8;
        let x_1368 : vec4<f32> = u_xlat8;
        u_xlat9 = (vec4<f32>(x_1366.x, x_1366.x, x_1366.z, x_1366.z) * vec4<f32>(x_1368.x, x_1368.x, x_1368.z, x_1368.z));
        let x_1371 : vec4<f32> = u_xlat9;
        let x_1375 : vec2<f32> = (vec2<f32>(x_1371.y, x_1371.w) * vec2<f32>(0.040816002f, 0.040816002f));
        let x_1376 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_1376.x, x_1375.x, x_1376.z, x_1375.y);
        let x_1378 : vec4<f32> = u_xlat9;
        let x_1381 : vec2<f32> = u_xlat48;
        let x_1383 : vec2<f32> = ((vec2<f32>(x_1378.x, x_1378.z) * vec2<f32>(0.5f, 0.5f)) + -(x_1381));
        let x_1384 : vec4<f32> = u_xlat8;
        u_xlat8 = vec4<f32>(x_1383.x, x_1384.y, x_1383.y, x_1384.w);
        let x_1386 : vec2<f32> = u_xlat48;
        let x_1388 : vec2<f32> = (-(x_1386) + vec2<f32>(1.0f, 1.0f));
        let x_1389 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_1388.x, x_1388.y, x_1389.z, x_1389.w);
        let x_1391 : vec2<f32> = u_xlat48;
        u_xlat51 = min(x_1391, vec2<f32>(0.0f, 0.0f));
        let x_1393 : vec2<f32> = u_xlat51;
        let x_1395 : vec2<f32> = u_xlat51;
        let x_1397 : vec4<f32> = u_xlat9;
        let x_1399 : vec2<f32> = ((-(x_1393) * x_1395) + vec2<f32>(x_1397.x, x_1397.y));
        let x_1400 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_1399.x, x_1399.y, x_1400.z, x_1400.w);
        let x_1402 : vec2<f32> = u_xlat48;
        u_xlat51 = max(x_1402, vec2<f32>(0.0f, 0.0f));
        let x_1405 : vec2<f32> = u_xlat51;
        let x_1407 : vec2<f32> = u_xlat51;
        let x_1409 : vec4<f32> = u_xlat8;
        let x_1411 : vec2<f32> = ((-(x_1405) * x_1407) + vec2<f32>(x_1409.y, x_1409.w));
        let x_1412 : vec3<f32> = u_xlat29;
        u_xlat29 = vec3<f32>(x_1411.x, x_1412.y, x_1411.y);
        let x_1414 : vec4<f32> = u_xlat9;
        let x_1416 : vec2<f32> = (vec2<f32>(x_1414.x, x_1414.y) + vec2<f32>(2.0f, 2.0f));
        let x_1417 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_1416.x, x_1416.y, x_1417.z, x_1417.w);
        let x_1419 : vec3<f32> = u_xlat29;
        let x_1421 : vec2<f32> = (vec2<f32>(x_1419.x, x_1419.z) + vec2<f32>(2.0f, 2.0f));
        let x_1422 : vec4<f32> = u_xlat8;
        u_xlat8 = vec4<f32>(x_1422.x, x_1421.x, x_1422.z, x_1421.y);
        let x_1425 : f32 = u_xlat8.y;
        u_xlat11.z = (x_1425 * 0.081632003f);
        let x_1429 : vec4<f32> = u_xlat8;
        let x_1432 : vec3<f32> = (vec3<f32>(x_1429.z, x_1429.x, x_1429.w) * vec3<f32>(0.081632003f, 0.081632003f, 0.081632003f));
        let x_1433 : vec4<f32> = u_xlat12;
        u_xlat12 = vec4<f32>(x_1432.x, x_1432.y, x_1432.z, x_1433.w);
        let x_1435 : vec4<f32> = u_xlat9;
        let x_1438 : vec2<f32> = (vec2<f32>(x_1435.x, x_1435.y) * vec2<f32>(0.081632003f, 0.081632003f));
        let x_1439 : vec4<f32> = u_xlat8;
        u_xlat8 = vec4<f32>(x_1438.x, x_1438.y, x_1439.z, x_1439.w);
        let x_1442 : f32 = u_xlat12.y;
        u_xlat11.x = x_1442;
        let x_1444 : vec2<f32> = u_xlat48;
        let x_1451 : vec2<f32> = ((vec2<f32>(x_1444.x, x_1444.x) * vec2<f32>(-0.081632003f, 0.081632003f)) + vec2<f32>(0.163264006f, 0.081632003f));
        let x_1452 : vec4<f32> = u_xlat11;
        u_xlat11 = vec4<f32>(x_1452.x, x_1451.x, x_1452.z, x_1451.y);
        let x_1454 : vec2<f32> = u_xlat48;
        let x_1458 : vec2<f32> = ((vec2<f32>(x_1454.x, x_1454.x) * vec2<f32>(-0.081632003f, 0.081632003f)) + vec2<f32>(0.081632003f, 0.163264006f));
        let x_1459 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_1458.x, x_1459.y, x_1458.y, x_1459.w);
        let x_1462 : f32 = u_xlat8.x;
        u_xlat9.y = x_1462;
        let x_1465 : f32 = u_xlat10.y;
        u_xlat9.w = x_1465;
        let x_1467 : vec4<f32> = u_xlat9;
        let x_1468 : vec4<f32> = u_xlat11;
        u_xlat11 = (x_1467 + x_1468);
        let x_1470 : vec2<f32> = u_xlat48;
        let x_1473 : vec2<f32> = ((vec2<f32>(x_1470.y, x_1470.y) * vec2<f32>(-0.081632003f, 0.081632003f)) + vec2<f32>(0.163264006f, 0.081632003f));
        let x_1474 : vec4<f32> = u_xlat12;
        u_xlat12 = vec4<f32>(x_1474.x, x_1473.x, x_1474.z, x_1473.y);
        let x_1476 : vec2<f32> = u_xlat48;
        let x_1479 : vec2<f32> = ((vec2<f32>(x_1476.y, x_1476.y) * vec2<f32>(-0.081632003f, 0.081632003f)) + vec2<f32>(0.081632003f, 0.163264006f));
        let x_1480 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_1479.x, x_1480.y, x_1479.y, x_1480.w);
        let x_1483 : f32 = u_xlat8.y;
        u_xlat10.y = x_1483;
        let x_1485 : vec4<f32> = u_xlat10;
        let x_1486 : vec4<f32> = u_xlat12;
        u_xlat8 = (x_1485 + x_1486);
        let x_1488 : vec4<f32> = u_xlat9;
        let x_1489 : vec4<f32> = u_xlat11;
        u_xlat9 = (x_1488 / x_1489);
        let x_1491 : vec4<f32> = u_xlat9;
        u_xlat9 = (x_1491 + vec4<f32>(-3.5f, -1.5f, 0.5f, 2.5f));
        let x_1497 : vec4<f32> = u_xlat10;
        let x_1498 : vec4<f32> = u_xlat8;
        u_xlat10 = (x_1497 / x_1498);
        let x_1500 : vec4<f32> = u_xlat10;
        u_xlat10 = (x_1500 + vec4<f32>(-3.5f, -1.5f, 0.5f, 2.5f));
        let x_1502 : vec4<f32> = u_xlat9;
        let x_1505 : vec4<f32> = x_391.x_MainLightShadowmapSize;
        u_xlat9 = (vec4<f32>(x_1502.w, x_1502.x, x_1502.y, x_1502.z) * vec4<f32>(x_1505.x, x_1505.x, x_1505.x, x_1505.x));
        let x_1508 : vec4<f32> = u_xlat10;
        let x_1511 : vec4<f32> = x_391.x_MainLightShadowmapSize;
        u_xlat10 = (vec4<f32>(x_1508.x, x_1508.w, x_1508.y, x_1508.z) * vec4<f32>(x_1511.y, x_1511.y, x_1511.y, x_1511.y));
        let x_1514 : vec4<f32> = u_xlat9;
        let x_1515 : vec3<f32> = vec3<f32>(x_1514.y, x_1514.z, x_1514.w);
        let x_1516 : vec4<f32> = u_xlat12;
        u_xlat12 = vec4<f32>(x_1515.x, x_1516.y, x_1515.y, x_1515.z);
        let x_1519 : f32 = u_xlat10.x;
        u_xlat12.y = x_1519;
        let x_1521 : vec4<f32> = u_xlat6;
        let x_1524 : vec4<f32> = x_391.x_MainLightShadowmapSize;
        let x_1527 : vec4<f32> = u_xlat12;
        u_xlat13 = ((vec4<f32>(x_1521.x, x_1521.y, x_1521.x, x_1521.y) * vec4<f32>(x_1524.x, x_1524.y, x_1524.x, x_1524.y)) + vec4<f32>(x_1527.x, x_1527.y, x_1527.z, x_1527.y));
        let x_1530 : vec4<f32> = u_xlat6;
        let x_1533 : vec4<f32> = x_391.x_MainLightShadowmapSize;
        let x_1536 : vec4<f32> = u_xlat12;
        u_xlat48 = ((vec2<f32>(x_1530.x, x_1530.y) * vec2<f32>(x_1533.x, x_1533.y)) + vec2<f32>(x_1536.w, x_1536.y));
        let x_1540 : f32 = u_xlat12.y;
        u_xlat9.y = x_1540;
        let x_1543 : f32 = u_xlat10.z;
        u_xlat12.y = x_1543;
        let x_1545 : vec4<f32> = u_xlat6;
        let x_1548 : vec4<f32> = x_391.x_MainLightShadowmapSize;
        let x_1551 : vec4<f32> = u_xlat12;
        u_xlat14 = ((vec4<f32>(x_1545.x, x_1545.y, x_1545.x, x_1545.y) * vec4<f32>(x_1548.x, x_1548.y, x_1548.x, x_1548.y)) + vec4<f32>(x_1551.x, x_1551.y, x_1551.z, x_1551.y));
        let x_1554 : vec4<f32> = u_xlat6;
        let x_1557 : vec4<f32> = x_391.x_MainLightShadowmapSize;
        let x_1560 : vec4<f32> = u_xlat12;
        let x_1562 : vec2<f32> = ((vec2<f32>(x_1554.x, x_1554.y) * vec2<f32>(x_1557.x, x_1557.y)) + vec2<f32>(x_1560.w, x_1560.y));
        let x_1563 : vec4<f32> = u_xlat15;
        u_xlat15 = vec4<f32>(x_1562.x, x_1562.y, x_1563.z, x_1563.w);
        let x_1566 : f32 = u_xlat12.y;
        u_xlat9.z = x_1566;
        let x_1569 : vec4<f32> = u_xlat6;
        let x_1572 : vec4<f32> = x_391.x_MainLightShadowmapSize;
        let x_1575 : vec4<f32> = u_xlat9;
        u_xlat16 = ((vec4<f32>(x_1569.x, x_1569.y, x_1569.x, x_1569.y) * vec4<f32>(x_1572.x, x_1572.y, x_1572.x, x_1572.y)) + vec4<f32>(x_1575.x, x_1575.y, x_1575.x, x_1575.z));
        let x_1579 : f32 = u_xlat10.w;
        u_xlat12.y = x_1579;
        let x_1582 : vec4<f32> = u_xlat6;
        let x_1585 : vec4<f32> = x_391.x_MainLightShadowmapSize;
        let x_1588 : vec4<f32> = u_xlat12;
        u_xlat17 = ((vec4<f32>(x_1582.x, x_1582.y, x_1582.x, x_1582.y) * vec4<f32>(x_1585.x, x_1585.y, x_1585.x, x_1585.y)) + vec4<f32>(x_1588.x, x_1588.y, x_1588.z, x_1588.y));
        let x_1592 : vec4<f32> = u_xlat6;
        let x_1595 : vec4<f32> = x_391.x_MainLightShadowmapSize;
        let x_1598 : vec4<f32> = u_xlat12;
        u_xlat30 = ((vec2<f32>(x_1592.x, x_1592.y) * vec2<f32>(x_1595.x, x_1595.y)) + vec2<f32>(x_1598.w, x_1598.y));
        let x_1602 : f32 = u_xlat12.y;
        u_xlat9.w = x_1602;
        let x_1605 : vec4<f32> = u_xlat6;
        let x_1608 : vec4<f32> = x_391.x_MainLightShadowmapSize;
        let x_1611 : vec4<f32> = u_xlat9;
        u_xlat57 = ((vec2<f32>(x_1605.x, x_1605.y) * vec2<f32>(x_1608.x, x_1608.y)) + vec2<f32>(x_1611.x, x_1611.w));
        let x_1614 : vec4<f32> = u_xlat12;
        let x_1615 : vec3<f32> = vec3<f32>(x_1614.x, x_1614.z, x_1614.w);
        let x_1616 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_1615.x, x_1616.y, x_1615.y, x_1615.z);
        let x_1618 : vec4<f32> = u_xlat6;
        let x_1621 : vec4<f32> = x_391.x_MainLightShadowmapSize;
        let x_1624 : vec4<f32> = u_xlat10;
        u_xlat12 = ((vec4<f32>(x_1618.x, x_1618.y, x_1618.x, x_1618.y) * vec4<f32>(x_1621.x, x_1621.y, x_1621.x, x_1621.y)) + vec4<f32>(x_1624.x, x_1624.y, x_1624.z, x_1624.y));
        let x_1628 : vec4<f32> = u_xlat6;
        let x_1631 : vec4<f32> = x_391.x_MainLightShadowmapSize;
        let x_1634 : vec4<f32> = u_xlat10;
        u_xlat52 = ((vec2<f32>(x_1628.x, x_1628.y) * vec2<f32>(x_1631.x, x_1631.y)) + vec2<f32>(x_1634.w, x_1634.y));
        let x_1638 : f32 = u_xlat9.x;
        u_xlat10.x = x_1638;
        let x_1640 : vec4<f32> = u_xlat6;
        let x_1643 : vec4<f32> = x_391.x_MainLightShadowmapSize;
        let x_1646 : vec4<f32> = u_xlat10;
        let x_1648 : vec2<f32> = ((vec2<f32>(x_1640.x, x_1640.y) * vec2<f32>(x_1643.x, x_1643.y)) + vec2<f32>(x_1646.x, x_1646.y));
        let x_1649 : vec4<f32> = u_xlat6;
        u_xlat6 = vec4<f32>(x_1648.x, x_1648.y, x_1649.z, x_1649.w);
        let x_1652 : vec4<f32> = u_xlat8;
        let x_1654 : vec4<f32> = u_xlat11;
        u_xlat18 = (vec4<f32>(x_1652.x, x_1652.x, x_1652.x, x_1652.x) * x_1654);
        let x_1657 : vec4<f32> = u_xlat8;
        let x_1659 : vec4<f32> = u_xlat11;
        u_xlat19 = (vec4<f32>(x_1657.y, x_1657.y, x_1657.y, x_1657.y) * x_1659);
        let x_1662 : vec4<f32> = u_xlat8;
        let x_1664 : vec4<f32> = u_xlat11;
        u_xlat20 = (vec4<f32>(x_1662.z, x_1662.z, x_1662.z, x_1662.z) * x_1664);
        let x_1666 : vec4<f32> = u_xlat8;
        let x_1668 : vec4<f32> = u_xlat11;
        u_xlat8 = (vec4<f32>(x_1666.w, x_1666.w, x_1666.w, x_1666.w) * x_1668);
        let x_1671 : vec4<f32> = u_xlat13;
        let x_1672 : vec2<f32> = vec2<f32>(x_1671.x, x_1671.y);
        let x_1674 : f32 = u_xlat4.z;
        txVec13 = vec3<f32>(x_1672.x, x_1672.y, x_1674);
        let x_1681 : vec3<f32> = txVec13;
        let x_1683 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1681.xy, x_1681.z);
        u_xlat70 = x_1683;
        let x_1685 : vec4<f32> = u_xlat13;
        let x_1686 : vec2<f32> = vec2<f32>(x_1685.z, x_1685.w);
        let x_1688 : f32 = u_xlat4.z;
        txVec14 = vec3<f32>(x_1686.x, x_1686.y, x_1688);
        let x_1695 : vec3<f32> = txVec14;
        let x_1697 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1695.xy, x_1695.z);
        u_xlat9.x = x_1697;
        let x_1700 : f32 = u_xlat9.x;
        let x_1702 : f32 = u_xlat18.y;
        u_xlat9.x = (x_1700 * x_1702);
        let x_1706 : f32 = u_xlat18.x;
        let x_1707 : f32 = u_xlat70;
        let x_1710 : f32 = u_xlat9.x;
        u_xlat70 = ((x_1706 * x_1707) + x_1710);
        let x_1713 : vec2<f32> = u_xlat48;
        let x_1715 : f32 = u_xlat4.z;
        txVec15 = vec3<f32>(x_1713.x, x_1713.y, x_1715);
        let x_1722 : vec3<f32> = txVec15;
        let x_1724 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1722.xy, x_1722.z);
        u_xlat48.x = x_1724;
        let x_1727 : f32 = u_xlat18.z;
        let x_1729 : f32 = u_xlat48.x;
        let x_1731 : f32 = u_xlat70;
        u_xlat48.x = ((x_1727 * x_1729) + x_1731);
        let x_1735 : vec4<f32> = u_xlat16;
        let x_1736 : vec2<f32> = vec2<f32>(x_1735.x, x_1735.y);
        let x_1738 : f32 = u_xlat4.z;
        txVec16 = vec3<f32>(x_1736.x, x_1736.y, x_1738);
        let x_1746 : vec3<f32> = txVec16;
        let x_1748 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1746.xy, x_1746.z);
        u_xlat69 = x_1748;
        let x_1750 : f32 = u_xlat18.w;
        let x_1751 : f32 = u_xlat69;
        let x_1754 : f32 = u_xlat48.x;
        u_xlat48.x = ((x_1750 * x_1751) + x_1754);
        let x_1758 : vec4<f32> = u_xlat14;
        let x_1759 : vec2<f32> = vec2<f32>(x_1758.x, x_1758.y);
        let x_1761 : f32 = u_xlat4.z;
        txVec17 = vec3<f32>(x_1759.x, x_1759.y, x_1761);
        let x_1768 : vec3<f32> = txVec17;
        let x_1770 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1768.xy, x_1768.z);
        u_xlat69 = x_1770;
        let x_1772 : f32 = u_xlat19.x;
        let x_1773 : f32 = u_xlat69;
        let x_1776 : f32 = u_xlat48.x;
        u_xlat48.x = ((x_1772 * x_1773) + x_1776);
        let x_1780 : vec4<f32> = u_xlat14;
        let x_1781 : vec2<f32> = vec2<f32>(x_1780.z, x_1780.w);
        let x_1783 : f32 = u_xlat4.z;
        txVec18 = vec3<f32>(x_1781.x, x_1781.y, x_1783);
        let x_1790 : vec3<f32> = txVec18;
        let x_1792 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1790.xy, x_1790.z);
        u_xlat69 = x_1792;
        let x_1794 : f32 = u_xlat19.y;
        let x_1795 : f32 = u_xlat69;
        let x_1798 : f32 = u_xlat48.x;
        u_xlat48.x = ((x_1794 * x_1795) + x_1798);
        let x_1802 : vec4<f32> = u_xlat15;
        let x_1803 : vec2<f32> = vec2<f32>(x_1802.x, x_1802.y);
        let x_1805 : f32 = u_xlat4.z;
        txVec19 = vec3<f32>(x_1803.x, x_1803.y, x_1805);
        let x_1812 : vec3<f32> = txVec19;
        let x_1814 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1812.xy, x_1812.z);
        u_xlat69 = x_1814;
        let x_1816 : f32 = u_xlat19.z;
        let x_1817 : f32 = u_xlat69;
        let x_1820 : f32 = u_xlat48.x;
        u_xlat48.x = ((x_1816 * x_1817) + x_1820);
        let x_1824 : vec4<f32> = u_xlat16;
        let x_1825 : vec2<f32> = vec2<f32>(x_1824.z, x_1824.w);
        let x_1827 : f32 = u_xlat4.z;
        txVec20 = vec3<f32>(x_1825.x, x_1825.y, x_1827);
        let x_1834 : vec3<f32> = txVec20;
        let x_1836 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1834.xy, x_1834.z);
        u_xlat69 = x_1836;
        let x_1838 : f32 = u_xlat19.w;
        let x_1839 : f32 = u_xlat69;
        let x_1842 : f32 = u_xlat48.x;
        u_xlat48.x = ((x_1838 * x_1839) + x_1842);
        let x_1846 : vec4<f32> = u_xlat17;
        let x_1847 : vec2<f32> = vec2<f32>(x_1846.x, x_1846.y);
        let x_1849 : f32 = u_xlat4.z;
        txVec21 = vec3<f32>(x_1847.x, x_1847.y, x_1849);
        let x_1856 : vec3<f32> = txVec21;
        let x_1858 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1856.xy, x_1856.z);
        u_xlat69 = x_1858;
        let x_1860 : f32 = u_xlat20.x;
        let x_1861 : f32 = u_xlat69;
        let x_1864 : f32 = u_xlat48.x;
        u_xlat48.x = ((x_1860 * x_1861) + x_1864);
        let x_1868 : vec4<f32> = u_xlat17;
        let x_1869 : vec2<f32> = vec2<f32>(x_1868.z, x_1868.w);
        let x_1871 : f32 = u_xlat4.z;
        txVec22 = vec3<f32>(x_1869.x, x_1869.y, x_1871);
        let x_1878 : vec3<f32> = txVec22;
        let x_1880 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1878.xy, x_1878.z);
        u_xlat69 = x_1880;
        let x_1882 : f32 = u_xlat20.y;
        let x_1883 : f32 = u_xlat69;
        let x_1886 : f32 = u_xlat48.x;
        u_xlat48.x = ((x_1882 * x_1883) + x_1886);
        let x_1890 : vec2<f32> = u_xlat30;
        let x_1892 : f32 = u_xlat4.z;
        txVec23 = vec3<f32>(x_1890.x, x_1890.y, x_1892);
        let x_1899 : vec3<f32> = txVec23;
        let x_1901 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1899.xy, x_1899.z);
        u_xlat69 = x_1901;
        let x_1903 : f32 = u_xlat20.z;
        let x_1904 : f32 = u_xlat69;
        let x_1907 : f32 = u_xlat48.x;
        u_xlat48.x = ((x_1903 * x_1904) + x_1907);
        let x_1911 : vec2<f32> = u_xlat57;
        let x_1913 : f32 = u_xlat4.z;
        txVec24 = vec3<f32>(x_1911.x, x_1911.y, x_1913);
        let x_1920 : vec3<f32> = txVec24;
        let x_1922 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1920.xy, x_1920.z);
        u_xlat69 = x_1922;
        let x_1924 : f32 = u_xlat20.w;
        let x_1925 : f32 = u_xlat69;
        let x_1928 : f32 = u_xlat48.x;
        u_xlat48.x = ((x_1924 * x_1925) + x_1928);
        let x_1932 : vec4<f32> = u_xlat12;
        let x_1933 : vec2<f32> = vec2<f32>(x_1932.x, x_1932.y);
        let x_1935 : f32 = u_xlat4.z;
        txVec25 = vec3<f32>(x_1933.x, x_1933.y, x_1935);
        let x_1942 : vec3<f32> = txVec25;
        let x_1944 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1942.xy, x_1942.z);
        u_xlat69 = x_1944;
        let x_1946 : f32 = u_xlat8.x;
        let x_1947 : f32 = u_xlat69;
        let x_1950 : f32 = u_xlat48.x;
        u_xlat48.x = ((x_1946 * x_1947) + x_1950);
        let x_1954 : vec4<f32> = u_xlat12;
        let x_1955 : vec2<f32> = vec2<f32>(x_1954.z, x_1954.w);
        let x_1957 : f32 = u_xlat4.z;
        txVec26 = vec3<f32>(x_1955.x, x_1955.y, x_1957);
        let x_1964 : vec3<f32> = txVec26;
        let x_1966 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1964.xy, x_1964.z);
        u_xlat69 = x_1966;
        let x_1968 : f32 = u_xlat8.y;
        let x_1969 : f32 = u_xlat69;
        let x_1972 : f32 = u_xlat48.x;
        u_xlat48.x = ((x_1968 * x_1969) + x_1972);
        let x_1976 : vec2<f32> = u_xlat52;
        let x_1978 : f32 = u_xlat4.z;
        txVec27 = vec3<f32>(x_1976.x, x_1976.y, x_1978);
        let x_1985 : vec3<f32> = txVec27;
        let x_1987 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1985.xy, x_1985.z);
        u_xlat69 = x_1987;
        let x_1989 : f32 = u_xlat8.z;
        let x_1990 : f32 = u_xlat69;
        let x_1993 : f32 = u_xlat48.x;
        u_xlat48.x = ((x_1989 * x_1990) + x_1993);
        let x_1997 : vec4<f32> = u_xlat6;
        let x_1998 : vec2<f32> = vec2<f32>(x_1997.x, x_1997.y);
        let x_2000 : f32 = u_xlat4.z;
        txVec28 = vec3<f32>(x_1998.x, x_1998.y, x_2000);
        let x_2007 : vec3<f32> = txVec28;
        let x_2009 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2007.xy, x_2007.z);
        u_xlat6.x = x_2009;
        let x_2012 : f32 = u_xlat8.w;
        let x_2014 : f32 = u_xlat6.x;
        let x_2017 : f32 = u_xlat48.x;
        u_xlat67 = ((x_2012 * x_2014) + x_2017);
      }
    }
  } else {
    let x_2021 : vec4<f32> = u_xlat4;
    let x_2022 : vec2<f32> = vec2<f32>(x_2021.x, x_2021.y);
    let x_2024 : f32 = u_xlat4.z;
    txVec29 = vec3<f32>(x_2022.x, x_2022.y, x_2024);
    let x_2031 : vec3<f32> = txVec29;
    let x_2033 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2031.xy, x_2031.z);
    u_xlat67 = x_2033;
  }
  let x_2035 : f32 = x_391.x_MainLightShadowParams.x;
  u_xlat4.x = (-(x_2035) + 1.0f);
  let x_2039 : f32 = u_xlat67;
  let x_2041 : f32 = x_391.x_MainLightShadowParams.x;
  let x_2044 : f32 = u_xlat4.x;
  u_xlat4.x = ((x_2039 * x_2041) + x_2044);
  let x_2049 : f32 = u_xlat4.z;
  u_xlatb25 = (0.0f >= x_2049);
  let x_2053 : f32 = u_xlat4.z;
  u_xlatb46 = (x_2053 >= 1.0f);
  let x_2055 : bool = u_xlatb46;
  let x_2056 : bool = u_xlatb25;
  u_xlatb25 = (x_2055 | x_2056);
  let x_2058 : bool = u_xlatb25;
  if (x_2058) {
    x_2059 = 1.0f;
  } else {
    let x_2064 : f32 = u_xlat4.x;
    x_2059 = x_2064;
  }
  let x_2065 : f32 = x_2059;
  u_xlat4.x = x_2065;
  let x_2068 : vec3<f32> = vs_INTERP0;
  let x_2070 : vec3<f32> = x_44.x_WorldSpaceCameraPos;
  u_xlat25 = (x_2068 + -(x_2070));
  let x_2073 : vec3<f32> = u_xlat25;
  let x_2074 : vec3<f32> = u_xlat25;
  u_xlat25.x = dot(x_2073, x_2074);
  let x_2078 : f32 = u_xlat25.x;
  let x_2080 : f32 = x_391.x_MainLightShadowParams.z;
  let x_2083 : f32 = x_391.x_MainLightShadowParams.w;
  u_xlat25.x = ((x_2078 * x_2080) + x_2083);
  let x_2087 : f32 = u_xlat25.x;
  u_xlat25.x = clamp(x_2087, 0.0f, 1.0f);
  let x_2092 : f32 = u_xlat4.x;
  u_xlat46 = (-(x_2092) + 1.0f);
  let x_2096 : f32 = u_xlat25.x;
  let x_2097 : f32 = u_xlat46;
  let x_2100 : f32 = u_xlat4.x;
  u_xlat4.x = ((x_2096 * x_2097) + x_2100);
  let x_2103 : f32 = u_xlat68;
  let x_2106 : vec4<f32> = x_44.x_MainLightColor;
  u_xlat25 = (vec3<f32>(x_2103, x_2103, x_2103) * vec3<f32>(x_2106.x, x_2106.y, x_2106.z));
  let x_2109 : vec3<f32> = u_xlat3;
  let x_2111 : vec3<f32> = u_xlat22;
  u_xlat6.x = dot(-(x_2109), x_2111);
  let x_2115 : f32 = u_xlat6.x;
  let x_2117 : f32 = u_xlat6.x;
  u_xlat6.x = (x_2115 + x_2117);
  let x_2120 : vec3<f32> = u_xlat22;
  let x_2121 : vec4<f32> = u_xlat6;
  let x_2125 : vec3<f32> = u_xlat3;
  let x_2127 : vec3<f32> = ((x_2120 * -(vec3<f32>(x_2121.x, x_2121.x, x_2121.x))) + -(x_2125));
  let x_2128 : vec4<f32> = u_xlat6;
  u_xlat6 = vec4<f32>(x_2127.x, x_2127.y, x_2127.z, x_2128.w);
  let x_2130 : vec3<f32> = u_xlat22;
  let x_2131 : vec3<f32> = u_xlat3;
  u_xlat69 = dot(x_2130, x_2131);
  let x_2133 : f32 = u_xlat69;
  u_xlat69 = clamp(x_2133, 0.0f, 1.0f);
  let x_2135 : f32 = u_xlat69;
  u_xlat69 = (-(x_2135) + 1.0f);
  let x_2138 : f32 = u_xlat69;
  let x_2139 : f32 = u_xlat69;
  u_xlat69 = (x_2138 * x_2139);
  let x_2141 : f32 = u_xlat69;
  let x_2142 : f32 = u_xlat69;
  u_xlat69 = (x_2141 * x_2142);
  let x_2145 : f32 = u_xlat0.x;
  u_xlat70 = ((-(x_2145) * 0.699999988f) + 1.700000048f);
  let x_2152 : f32 = u_xlat0.x;
  let x_2153 : f32 = u_xlat70;
  u_xlat0.x = (x_2152 * x_2153);
  let x_2157 : f32 = u_xlat0.x;
  u_xlat0.x = (x_2157 * 6.0f);
  let x_2169 : vec4<f32> = u_xlat6;
  let x_2172 : f32 = u_xlat0.x;
  let x_2173 : vec4<f32> = textureSampleLevel(unity_SpecCube0, samplerunity_SpecCube0, vec3<f32>(x_2169.x, x_2169.y, x_2169.z), x_2172);
  u_xlat8 = x_2173;
  let x_2175 : f32 = u_xlat8.w;
  u_xlat0.x = (x_2175 + -1.0f);
  let x_2179 : f32 = x_274.unity_SpecCube0_HDR.w;
  let x_2181 : f32 = u_xlat0.x;
  u_xlat0.x = ((x_2179 * x_2181) + 1.0f);
  let x_2186 : f32 = u_xlat0.x;
  u_xlat0.x = max(x_2186, 0.0f);
  let x_2190 : f32 = u_xlat0.x;
  u_xlat0.x = log2(x_2190);
  let x_2194 : f32 = u_xlat0.x;
  let x_2196 : f32 = x_274.unity_SpecCube0_HDR.y;
  u_xlat0.x = (x_2194 * x_2196);
  let x_2200 : f32 = u_xlat0.x;
  u_xlat0.x = exp2(x_2200);
  let x_2204 : f32 = u_xlat0.x;
  let x_2206 : f32 = x_274.unity_SpecCube0_HDR.x;
  u_xlat0.x = (x_2204 * x_2206);
  let x_2209 : vec4<f32> = u_xlat8;
  let x_2211 : vec4<f32> = u_xlat0;
  let x_2213 : vec3<f32> = (vec3<f32>(x_2209.x, x_2209.y, x_2209.z) * vec3<f32>(x_2211.x, x_2211.x, x_2211.x));
  let x_2214 : vec4<f32> = u_xlat6;
  u_xlat6 = vec4<f32>(x_2213.x, x_2213.y, x_2213.z, x_2214.w);
  let x_2216 : f32 = u_xlat42;
  let x_2218 : f32 = u_xlat42;
  let x_2222 : vec2<f32> = ((vec2<f32>(x_2216, x_2216) * vec2<f32>(x_2218, x_2218)) + vec2<f32>(-1.0f, 1.0f));
  let x_2223 : vec4<f32> = u_xlat0;
  u_xlat0 = vec4<f32>(x_2222.x, x_2223.y, x_2222.y, x_2223.w);
  let x_2226 : f32 = u_xlat0.z;
  u_xlat42 = (1.0f / x_2226);
  let x_2228 : vec3<f32> = u_xlat2;
  let x_2230 : f32 = u_xlat65;
  let x_2232 : vec3<f32> = (-(x_2228) + vec3<f32>(x_2230, x_2230, x_2230));
  let x_2233 : vec4<f32> = u_xlat8;
  u_xlat8 = vec4<f32>(x_2232.x, x_2232.y, x_2232.z, x_2233.w);
  let x_2235 : f32 = u_xlat69;
  let x_2237 : vec4<f32> = u_xlat8;
  let x_2240 : vec3<f32> = u_xlat2;
  let x_2241 : vec3<f32> = ((vec3<f32>(x_2235, x_2235, x_2235) * vec3<f32>(x_2237.x, x_2237.y, x_2237.z)) + x_2240);
  let x_2242 : vec4<f32> = u_xlat8;
  u_xlat8 = vec4<f32>(x_2241.x, x_2241.y, x_2241.z, x_2242.w);
  let x_2244 : f32 = u_xlat42;
  let x_2246 : vec4<f32> = u_xlat8;
  let x_2248 : vec3<f32> = (vec3<f32>(x_2244, x_2244, x_2244) * vec3<f32>(x_2246.x, x_2246.y, x_2246.z));
  let x_2249 : vec4<f32> = u_xlat8;
  u_xlat8 = vec4<f32>(x_2248.x, x_2248.y, x_2248.z, x_2249.w);
  let x_2251 : vec4<f32> = u_xlat6;
  let x_2253 : vec4<f32> = u_xlat8;
  let x_2255 : vec3<f32> = (vec3<f32>(x_2251.x, x_2251.y, x_2251.z) * vec3<f32>(x_2253.x, x_2253.y, x_2253.z));
  let x_2256 : vec4<f32> = u_xlat6;
  u_xlat6 = vec4<f32>(x_2255.x, x_2255.y, x_2255.z, x_2256.w);
  let x_2258 : vec4<f32> = u_xlat5;
  let x_2260 : vec3<f32> = u_xlat7;
  let x_2262 : vec4<f32> = u_xlat6;
  let x_2264 : vec3<f32> = ((vec3<f32>(x_2258.x, x_2258.y, x_2258.z) * x_2260) + vec3<f32>(x_2262.x, x_2262.y, x_2262.z));
  let x_2265 : vec4<f32> = u_xlat5;
  u_xlat5 = vec4<f32>(x_2264.x, x_2264.y, x_2264.z, x_2265.w);
  let x_2268 : f32 = u_xlat4.x;
  let x_2270 : f32 = x_274.unity_LightData.z;
  u_xlat42 = (x_2268 * x_2270);
  let x_2272 : vec3<f32> = u_xlat22;
  let x_2274 : vec4<f32> = x_44.x_MainLightPosition;
  u_xlat65 = dot(x_2272, vec3<f32>(x_2274.x, x_2274.y, x_2274.z));
  let x_2277 : f32 = u_xlat65;
  u_xlat65 = clamp(x_2277, 0.0f, 1.0f);
  let x_2279 : f32 = u_xlat42;
  let x_2280 : f32 = u_xlat65;
  u_xlat42 = (x_2279 * x_2280);
  let x_2282 : f32 = u_xlat42;
  let x_2284 : vec3<f32> = u_xlat25;
  let x_2285 : vec3<f32> = (vec3<f32>(x_2282, x_2282, x_2282) * x_2284);
  let x_2286 : vec4<f32> = u_xlat4;
  u_xlat4 = vec4<f32>(x_2285.x, x_2285.y, x_2285.z, x_2286.w);
  let x_2288 : vec3<f32> = u_xlat3;
  let x_2290 : vec4<f32> = x_44.x_MainLightPosition;
  let x_2292 : vec3<f32> = (x_2288 + vec3<f32>(x_2290.x, x_2290.y, x_2290.z));
  let x_2293 : vec4<f32> = u_xlat6;
  u_xlat6 = vec4<f32>(x_2292.x, x_2292.y, x_2292.z, x_2293.w);
  let x_2295 : vec4<f32> = u_xlat6;
  let x_2297 : vec4<f32> = u_xlat6;
  u_xlat42 = dot(vec3<f32>(x_2295.x, x_2295.y, x_2295.z), vec3<f32>(x_2297.x, x_2297.y, x_2297.z));
  let x_2300 : f32 = u_xlat42;
  u_xlat42 = max(x_2300, 1.17549435e-37f);
  let x_2303 : f32 = u_xlat42;
  u_xlat42 = inverseSqrt(x_2303);
  let x_2305 : f32 = u_xlat42;
  let x_2307 : vec4<f32> = u_xlat6;
  let x_2309 : vec3<f32> = (vec3<f32>(x_2305, x_2305, x_2305) * vec3<f32>(x_2307.x, x_2307.y, x_2307.z));
  let x_2310 : vec4<f32> = u_xlat6;
  u_xlat6 = vec4<f32>(x_2309.x, x_2309.y, x_2309.z, x_2310.w);
  let x_2312 : vec3<f32> = u_xlat22;
  let x_2313 : vec4<f32> = u_xlat6;
  u_xlat42 = dot(x_2312, vec3<f32>(x_2313.x, x_2313.y, x_2313.z));
  let x_2316 : f32 = u_xlat42;
  u_xlat42 = clamp(x_2316, 0.0f, 1.0f);
  let x_2319 : vec4<f32> = x_44.x_MainLightPosition;
  let x_2321 : vec4<f32> = u_xlat6;
  u_xlat65 = dot(vec3<f32>(x_2319.x, x_2319.y, x_2319.z), vec3<f32>(x_2321.x, x_2321.y, x_2321.z));
  let x_2324 : f32 = u_xlat65;
  u_xlat65 = clamp(x_2324, 0.0f, 1.0f);
  let x_2326 : f32 = u_xlat42;
  let x_2327 : f32 = u_xlat42;
  u_xlat42 = (x_2326 * x_2327);
  let x_2329 : f32 = u_xlat42;
  let x_2331 : f32 = u_xlat0.x;
  u_xlat42 = ((x_2329 * x_2331) + 1.000010014f);
  let x_2335 : f32 = u_xlat65;
  let x_2336 : f32 = u_xlat65;
  u_xlat65 = (x_2335 * x_2336);
  let x_2338 : f32 = u_xlat42;
  let x_2339 : f32 = u_xlat42;
  u_xlat42 = (x_2338 * x_2339);
  let x_2341 : f32 = u_xlat65;
  u_xlat65 = max(x_2341, 0.100000001f);
  let x_2344 : f32 = u_xlat42;
  let x_2345 : f32 = u_xlat65;
  u_xlat42 = (x_2344 * x_2345);
  let x_2347 : f32 = u_xlat66;
  let x_2348 : f32 = u_xlat42;
  u_xlat42 = (x_2347 * x_2348);
  let x_2351 : f32 = u_xlat1.x;
  let x_2352 : f32 = u_xlat42;
  u_xlat42 = (x_2351 / x_2352);
  let x_2354 : vec3<f32> = u_xlat2;
  let x_2355 : f32 = u_xlat42;
  let x_2358 : vec3<f32> = u_xlat7;
  let x_2359 : vec3<f32> = ((x_2354 * vec3<f32>(x_2355, x_2355, x_2355)) + x_2358);
  let x_2360 : vec4<f32> = u_xlat6;
  u_xlat6 = vec4<f32>(x_2359.x, x_2359.y, x_2359.z, x_2360.w);
  let x_2362 : vec4<f32> = u_xlat4;
  let x_2364 : vec4<f32> = u_xlat6;
  let x_2366 : vec3<f32> = (vec3<f32>(x_2362.x, x_2362.y, x_2362.z) * vec3<f32>(x_2364.x, x_2364.y, x_2364.z));
  let x_2367 : vec4<f32> = u_xlat4;
  u_xlat4 = vec4<f32>(x_2366.x, x_2366.y, x_2366.z, x_2367.w);
  let x_2370 : f32 = x_44.x_AdditionalLightsCount.x;
  let x_2372 : f32 = x_274.unity_LightData.y;
  u_xlat42 = min(x_2370, x_2372);
  let x_2375 : f32 = u_xlat42;
  u_xlatu42 = bitcast<u32>(i32(x_2375));
  u_xlat6.x = 0.0f;
  u_xlat6.y = 0.0f;
  u_xlat6.z = 0.0f;
  u_xlatu_loop_1 = 0u;
  loop {
    let x_2387 : u32 = u_xlatu_loop_1;
    let x_2388 : u32 = u_xlatu42;
    if ((x_2387 < x_2388)) {
    } else {
      break;
    }
    let x_2391 : u32 = u_xlatu_loop_1;
    u_xlatu67 = (x_2391 >> 2u);
    let x_2394 : u32 = u_xlatu_loop_1;
    u_xlati69 = bitcast<i32>((x_2394 & 3u));
    let x_2397 : u32 = u_xlatu67;
    let x_2400 : vec4<f32> = x_274.unity_LightIndices[bitcast<i32>(x_2397)];
    let x_2410 : i32 = u_xlati69;
    indexable = array<vec4<u32>, 4u>(vec4<u32>(1065353216u, 0u, 0u, 0u), vec4<u32>(0u, 1065353216u, 0u, 0u), vec4<u32>(0u, 0u, 1065353216u, 0u), vec4<u32>(0u, 0u, 0u, 1065353216u));
    let x_2415 : vec4<u32> = indexable[x_2410];
    u_xlat67 = dot(x_2400, bitcast<vec4<f32>>(x_2415));
    let x_2419 : f32 = u_xlat67;
    u_xlati67 = i32(x_2419);
    let x_2421 : vec3<f32> = vs_INTERP0;
    let x_2433 : i32 = u_xlati67;
    let x_2435 : vec4<f32> = x_2432.x_AdditionalLightsPosition[x_2433];
    let x_2438 : i32 = u_xlati67;
    let x_2440 : vec4<f32> = x_2432.x_AdditionalLightsPosition[x_2438];
    let x_2442 : vec3<f32> = ((-(x_2421) * vec3<f32>(x_2435.w, x_2435.w, x_2435.w)) + vec3<f32>(x_2440.x, x_2440.y, x_2440.z));
    let x_2443 : vec4<f32> = u_xlat8;
    u_xlat8 = vec4<f32>(x_2442.x, x_2442.y, x_2442.z, x_2443.w);
    let x_2445 : vec4<f32> = u_xlat8;
    let x_2447 : vec4<f32> = u_xlat8;
    u_xlat69 = dot(vec3<f32>(x_2445.x, x_2445.y, x_2445.z), vec3<f32>(x_2447.x, x_2447.y, x_2447.z));
    let x_2450 : f32 = u_xlat69;
    u_xlat69 = max(x_2450, 6.10351562e-05f);
    let x_2453 : f32 = u_xlat69;
    u_xlat70 = inverseSqrt(x_2453);
    let x_2455 : f32 = u_xlat70;
    let x_2457 : vec4<f32> = u_xlat8;
    let x_2459 : vec3<f32> = (vec3<f32>(x_2455, x_2455, x_2455) * vec3<f32>(x_2457.x, x_2457.y, x_2457.z));
    let x_2460 : vec4<f32> = u_xlat9;
    u_xlat9 = vec4<f32>(x_2459.x, x_2459.y, x_2459.z, x_2460.w);
    let x_2463 : f32 = u_xlat69;
    u_xlat71 = (1.0f / x_2463);
    let x_2465 : f32 = u_xlat69;
    let x_2466 : i32 = u_xlati67;
    let x_2468 : f32 = x_2432.x_AdditionalLightsAttenuation[x_2466].x;
    u_xlat69 = (x_2465 * x_2468);
    let x_2470 : f32 = u_xlat69;
    let x_2472 : f32 = u_xlat69;
    u_xlat69 = ((-(x_2470) * x_2472) + 1.0f);
    let x_2475 : f32 = u_xlat69;
    u_xlat69 = max(x_2475, 0.0f);
    let x_2477 : f32 = u_xlat69;
    let x_2478 : f32 = u_xlat69;
    u_xlat69 = (x_2477 * x_2478);
    let x_2480 : f32 = u_xlat69;
    let x_2481 : f32 = u_xlat71;
    u_xlat69 = (x_2480 * x_2481);
    let x_2483 : i32 = u_xlati67;
    let x_2485 : vec4<f32> = x_2432.x_AdditionalLightsSpotDir[x_2483];
    let x_2487 : vec4<f32> = u_xlat9;
    u_xlat71 = dot(vec3<f32>(x_2485.x, x_2485.y, x_2485.z), vec3<f32>(x_2487.x, x_2487.y, x_2487.z));
    let x_2490 : f32 = u_xlat71;
    let x_2491 : i32 = u_xlati67;
    let x_2493 : f32 = x_2432.x_AdditionalLightsAttenuation[x_2491].z;
    let x_2495 : i32 = u_xlati67;
    let x_2497 : f32 = x_2432.x_AdditionalLightsAttenuation[x_2495].w;
    u_xlat71 = ((x_2490 * x_2493) + x_2497);
    let x_2499 : f32 = u_xlat71;
    u_xlat71 = clamp(x_2499, 0.0f, 1.0f);
    let x_2501 : f32 = u_xlat71;
    let x_2502 : f32 = u_xlat71;
    u_xlat71 = (x_2501 * x_2502);
    let x_2504 : f32 = u_xlat69;
    let x_2505 : f32 = u_xlat71;
    u_xlat69 = (x_2504 * x_2505);
    let x_2507 : f32 = u_xlat68;
    let x_2509 : i32 = u_xlati67;
    let x_2511 : vec4<f32> = x_2432.x_AdditionalLightsColor[x_2509];
    let x_2513 : vec3<f32> = (vec3<f32>(x_2507, x_2507, x_2507) * vec3<f32>(x_2511.x, x_2511.y, x_2511.z));
    let x_2514 : vec4<f32> = u_xlat10;
    u_xlat10 = vec4<f32>(x_2513.x, x_2513.y, x_2513.z, x_2514.w);
    let x_2516 : vec3<f32> = u_xlat22;
    let x_2517 : vec4<f32> = u_xlat9;
    u_xlat67 = dot(x_2516, vec3<f32>(x_2517.x, x_2517.y, x_2517.z));
    let x_2520 : f32 = u_xlat67;
    u_xlat67 = clamp(x_2520, 0.0f, 1.0f);
    let x_2522 : f32 = u_xlat67;
    let x_2523 : f32 = u_xlat69;
    u_xlat67 = (x_2522 * x_2523);
    let x_2525 : f32 = u_xlat67;
    let x_2527 : vec4<f32> = u_xlat10;
    let x_2529 : vec3<f32> = (vec3<f32>(x_2525, x_2525, x_2525) * vec3<f32>(x_2527.x, x_2527.y, x_2527.z));
    let x_2530 : vec4<f32> = u_xlat10;
    u_xlat10 = vec4<f32>(x_2529.x, x_2529.y, x_2529.z, x_2530.w);
    let x_2532 : vec4<f32> = u_xlat8;
    let x_2534 : f32 = u_xlat70;
    let x_2537 : vec3<f32> = u_xlat3;
    let x_2538 : vec3<f32> = ((vec3<f32>(x_2532.x, x_2532.y, x_2532.z) * vec3<f32>(x_2534, x_2534, x_2534)) + x_2537);
    let x_2539 : vec4<f32> = u_xlat8;
    u_xlat8 = vec4<f32>(x_2538.x, x_2538.y, x_2538.z, x_2539.w);
    let x_2541 : vec4<f32> = u_xlat8;
    let x_2543 : vec4<f32> = u_xlat8;
    u_xlat67 = dot(vec3<f32>(x_2541.x, x_2541.y, x_2541.z), vec3<f32>(x_2543.x, x_2543.y, x_2543.z));
    let x_2546 : f32 = u_xlat67;
    u_xlat67 = max(x_2546, 1.17549435e-37f);
    let x_2548 : f32 = u_xlat67;
    u_xlat67 = inverseSqrt(x_2548);
    let x_2550 : f32 = u_xlat67;
    let x_2552 : vec4<f32> = u_xlat8;
    let x_2554 : vec3<f32> = (vec3<f32>(x_2550, x_2550, x_2550) * vec3<f32>(x_2552.x, x_2552.y, x_2552.z));
    let x_2555 : vec4<f32> = u_xlat8;
    u_xlat8 = vec4<f32>(x_2554.x, x_2554.y, x_2554.z, x_2555.w);
    let x_2557 : vec3<f32> = u_xlat22;
    let x_2558 : vec4<f32> = u_xlat8;
    u_xlat67 = dot(x_2557, vec3<f32>(x_2558.x, x_2558.y, x_2558.z));
    let x_2561 : f32 = u_xlat67;
    u_xlat67 = clamp(x_2561, 0.0f, 1.0f);
    let x_2563 : vec4<f32> = u_xlat9;
    let x_2565 : vec4<f32> = u_xlat8;
    u_xlat69 = dot(vec3<f32>(x_2563.x, x_2563.y, x_2563.z), vec3<f32>(x_2565.x, x_2565.y, x_2565.z));
    let x_2568 : f32 = u_xlat69;
    u_xlat69 = clamp(x_2568, 0.0f, 1.0f);
    let x_2570 : f32 = u_xlat67;
    let x_2571 : f32 = u_xlat67;
    u_xlat67 = (x_2570 * x_2571);
    let x_2573 : f32 = u_xlat67;
    let x_2575 : f32 = u_xlat0.x;
    u_xlat67 = ((x_2573 * x_2575) + 1.000010014f);
    let x_2578 : f32 = u_xlat69;
    let x_2579 : f32 = u_xlat69;
    u_xlat69 = (x_2578 * x_2579);
    let x_2581 : f32 = u_xlat67;
    let x_2582 : f32 = u_xlat67;
    u_xlat67 = (x_2581 * x_2582);
    let x_2584 : f32 = u_xlat69;
    u_xlat69 = max(x_2584, 0.100000001f);
    let x_2586 : f32 = u_xlat67;
    let x_2587 : f32 = u_xlat69;
    u_xlat67 = (x_2586 * x_2587);
    let x_2589 : f32 = u_xlat66;
    let x_2590 : f32 = u_xlat67;
    u_xlat67 = (x_2589 * x_2590);
    let x_2593 : f32 = u_xlat1.x;
    let x_2594 : f32 = u_xlat67;
    u_xlat67 = (x_2593 / x_2594);
    let x_2596 : vec3<f32> = u_xlat2;
    let x_2597 : f32 = u_xlat67;
    let x_2600 : vec3<f32> = u_xlat7;
    let x_2601 : vec3<f32> = ((x_2596 * vec3<f32>(x_2597, x_2597, x_2597)) + x_2600);
    let x_2602 : vec4<f32> = u_xlat8;
    u_xlat8 = vec4<f32>(x_2601.x, x_2601.y, x_2601.z, x_2602.w);
    let x_2604 : vec4<f32> = u_xlat8;
    let x_2606 : vec4<f32> = u_xlat10;
    let x_2609 : vec4<f32> = u_xlat6;
    let x_2611 : vec3<f32> = ((vec3<f32>(x_2604.x, x_2604.y, x_2604.z) * vec3<f32>(x_2606.x, x_2606.y, x_2606.z)) + vec3<f32>(x_2609.x, x_2609.y, x_2609.z));
    let x_2612 : vec4<f32> = u_xlat6;
    u_xlat6 = vec4<f32>(x_2611.x, x_2611.y, x_2611.z, x_2612.w);

    continuing {
      let x_2614 : u32 = u_xlatu_loop_1;
      u_xlatu_loop_1 = (x_2614 + bitcast<u32>(1i));
    }
  }
  let x_2616 : vec4<f32> = u_xlat5;
  let x_2618 : f32 = u_xlat63;
  let x_2621 : vec4<f32> = u_xlat4;
  let x_2623 : vec3<f32> = ((vec3<f32>(x_2616.x, x_2616.y, x_2616.z) * vec3<f32>(x_2618, x_2618, x_2618)) + vec3<f32>(x_2621.x, x_2621.y, x_2621.z));
  let x_2624 : vec4<f32> = u_xlat0;
  u_xlat0 = vec4<f32>(x_2623.x, x_2624.y, x_2623.y, x_2623.z);
  let x_2626 : vec4<f32> = u_xlat6;
  let x_2628 : vec4<f32> = u_xlat0;
  let x_2630 : vec3<f32> = (vec3<f32>(x_2626.x, x_2626.y, x_2626.z) + vec3<f32>(x_2628.x, x_2628.z, x_2628.w));
  let x_2631 : vec4<f32> = u_xlat0;
  u_xlat0 = vec4<f32>(x_2630.x, x_2631.y, x_2630.y, x_2630.z);
  let x_2634 : f32 = u_xlat21.x;
  let x_2636 : f32 = u_xlat21.x;
  u_xlat21.x = (x_2634 * -(x_2636));
  let x_2641 : f32 = u_xlat21.x;
  u_xlat21.x = exp2(x_2641);
  let x_2644 : vec4<f32> = u_xlat0;
  let x_2648 : vec4<f32> = x_44.unity_FogColor;
  let x_2651 : vec3<f32> = (vec3<f32>(x_2644.x, x_2644.z, x_2644.w) + -(vec3<f32>(x_2648.x, x_2648.y, x_2648.z)));
  let x_2652 : vec4<f32> = u_xlat0;
  u_xlat0 = vec4<f32>(x_2651.x, x_2652.y, x_2651.y, x_2651.z);
  let x_2656 : vec2<f32> = u_xlat21;
  let x_2658 : vec4<f32> = u_xlat0;
  let x_2662 : vec4<f32> = x_44.unity_FogColor;
  let x_2664 : vec3<f32> = ((vec3<f32>(x_2656.x, x_2656.x, x_2656.x) * vec3<f32>(x_2658.x, x_2658.z, x_2658.w)) + vec3<f32>(x_2662.x, x_2662.y, x_2662.z));
  let x_2665 : vec4<f32> = SV_Target0;
  SV_Target0 = vec4<f32>(x_2664.x, x_2664.y, x_2664.z, x_2665.w);
  SV_Target0.w = 1.0f;
  return;
}

struct main_out {
  @location(0)
  SV_Target0_1 : vec4<f32>,
}

@fragment
fn main(@builtin(position) gl_FragCoord_param : vec4<f32>, @location(3) vs_INTERP3_param : vec4<f32>, @location(2) vs_INTERP2_param : vec4<f32>, @location(1) vs_INTERP1_param : vec3<f32>, @location(0) vs_INTERP0_param : vec3<f32>, @location(4) vs_INTERP4_param : vec2<f32>) -> main_out {
  gl_FragCoord = gl_FragCoord_param;
  vs_INTERP3 = vs_INTERP3_param;
  vs_INTERP2 = vs_INTERP2_param;
  vs_INTERP1 = vs_INTERP1_param;
  vs_INTERP0 = vs_INTERP0_param;
  vs_INTERP4 = vs_INTERP4_param;
  main_1();
  return main_out(SV_Target0);
}

