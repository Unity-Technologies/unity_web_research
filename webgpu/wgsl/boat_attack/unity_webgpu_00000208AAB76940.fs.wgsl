struct PGlobals {
  x_GlobalMipBias : vec2<f32>,
  @size(8)
  padding : u32,
  x_Lut_Params : vec4<f32>,
  x_ColorBalance : vec4<f32>,
  x_ColorFilter : vec4<f32>,
  x_ChannelMixerRed : vec4<f32>,
  x_ChannelMixerGreen : vec4<f32>,
  x_ChannelMixerBlue : vec4<f32>,
  x_HueSatCon : vec4<f32>,
  x_Lift : vec4<f32>,
  x_Gamma : vec4<f32>,
  x_Gain : vec4<f32>,
  x_Shadows : vec4<f32>,
  x_Midtones : vec4<f32>,
  x_Highlights : vec4<f32>,
  x_ShaHiLimits : vec4<f32>,
  x_SplitShadows : vec4<f32>,
  x_SplitHighlights : vec4<f32>,
}

var<private> vs_TEXCOORD0 : vec2<f32>;

@group(1) @binding(0) var<uniform> x_16 : PGlobals;

@group(0) @binding(4) var x_CurveHueVsHue : texture_2d<f32>;

@group(0) @binding(8) var sampler_LinearClamp : sampler;

@group(0) @binding(7) var x_CurveLumVsSat : texture_2d<f32>;

@group(0) @binding(5) var x_CurveHueVsSat : texture_2d<f32>;

@group(0) @binding(6) var x_CurveSatVsSat : texture_2d<f32>;

@group(0) @binding(0) var x_CurveMaster : texture_2d<f32>;

@group(0) @binding(1) var x_CurveRed : texture_2d<f32>;

@group(0) @binding(2) var x_CurveGreen : texture_2d<f32>;

@group(0) @binding(3) var x_CurveBlue : texture_2d<f32>;

var<private> SV_Target0 : vec4<f32>;

var<private> gl_FragCoord : vec4<f32>;

fn main_1() {
  var u_xlat0 : vec4<f32>;
  var u_xlat1 : vec3<f32>;
  var u_xlat2 : vec4<f32>;
  var u_xlatb0 : vec3<bool>;
  var x_236 : f32;
  var x_248 : f32;
  var x_260 : f32;
  var u_xlatb1 : vec4<bool>;
  var u_xlatb2 : vec2<bool>;
  var u_xlat7 : vec3<f32>;
  var x_323 : f32;
  var x_333 : f32;
  var u_xlat12 : f32;
  var x_351 : f32;
  var x_367 : f32;
  var x_379 : f32;
  var x_391 : f32;
  var u_xlat3 : vec4<f32>;
  var u_xlat18 : f32;
  var u_xlat19 : f32;
  var u_xlat4 : vec3<f32>;
  var u_xlatb4 : vec3<bool>;
  var u_xlat5 : vec3<f32>;
  var u_xlat14 : vec2<f32>;
  var u_xlat8 : vec3<f32>;
  var u_xlati1 : vec3<i32>;
  var u_xlati2 : vec3<i32>;
  var u_xlat6 : vec3<f32>;
  var u_xlatb18 : bool;
  var x_1146 : f32;
  var u_xlatb6 : bool;
  var x_1160 : f32;
  var u_xlat15 : vec2<f32>;
  var x_1642 : f32;
  var x_1652 : f32;
  var u_xlat13 : f32;
  var u_xlatb19 : bool;
  var x_1831 : f32;
  var x_1861 : f32;
  var x_1878 : f32;
  var x_1900 : f32;
  var x_1916 : f32;
  var u_xlat_precise_vec4 : vec4<f32>;
  var u_xlat_precise_ivec4 : vec4<i32>;
  var u_xlat_precise_bvec4 : vec4<bool>;
  var u_xlat_precise_uvec4 : vec4<u32>;
  let x_13 : vec2<f32> = vs_TEXCOORD0;
  let x_21 : vec4<f32> = x_16.x_Lut_Params;
  let x_24 : vec2<f32> = (x_13 + -(vec2<f32>(x_21.y, x_21.z)));
  let x_25 : vec4<f32> = u_xlat0;
  u_xlat0 = vec4<f32>(x_25.x, x_24.x, x_24.y, x_25.w);
  let x_34 : f32 = u_xlat0.y;
  let x_38 : f32 = x_16.x_Lut_Params.x;
  u_xlat1.x = (x_34 * x_38);
  let x_42 : f32 = u_xlat1.x;
  u_xlat0.x = fract(x_42);
  let x_46 : f32 = u_xlat0.x;
  let x_48 : f32 = x_16.x_Lut_Params.x;
  u_xlat1.x = (x_46 / x_48);
  let x_52 : f32 = u_xlat0.y;
  let x_54 : f32 = u_xlat1.x;
  u_xlat0.w = (x_52 + -(x_54));
  let x_59 : vec4<f32> = u_xlat0;
  let x_62 : vec4<f32> = x_16.x_Lut_Params;
  let x_67 : vec3<f32> = ((vec3<f32>(x_59.x, x_59.z, x_59.w) * vec3<f32>(x_62.w, x_62.w, x_62.w)) + vec3<f32>(-0.386036009f, -0.386036009f, -0.386036009f));
  let x_68 : vec4<f32> = u_xlat0;
  u_xlat0 = vec4<f32>(x_67.x, x_67.y, x_67.z, x_68.w);
  let x_70 : vec4<f32> = u_xlat0;
  let x_74 : vec3<f32> = (vec3<f32>(x_70.x, x_70.y, x_70.z) * vec3<f32>(13.605482101f, 13.605482101f, 13.605482101f));
  let x_75 : vec4<f32> = u_xlat0;
  u_xlat0 = vec4<f32>(x_74.x, x_74.y, x_74.z, x_75.w);
  let x_77 : vec4<f32> = u_xlat0;
  let x_79 : vec3<f32> = exp2(vec3<f32>(x_77.x, x_77.y, x_77.z));
  let x_80 : vec4<f32> = u_xlat0;
  u_xlat0 = vec4<f32>(x_79.x, x_79.y, x_79.z, x_80.w);
  let x_82 : vec4<f32> = u_xlat0;
  let x_86 : vec3<f32> = (vec3<f32>(x_82.x, x_82.y, x_82.z) + vec3<f32>(-0.047995999f, -0.047995999f, -0.047995999f));
  let x_87 : vec4<f32> = u_xlat0;
  u_xlat0 = vec4<f32>(x_86.x, x_86.y, x_86.z, x_87.w);
  let x_89 : vec4<f32> = u_xlat0;
  let x_93 : vec3<f32> = (vec3<f32>(x_89.x, x_89.y, x_89.z) * vec3<f32>(0.179999992f, 0.179999992f, 0.179999992f));
  let x_94 : vec4<f32> = u_xlat0;
  u_xlat0 = vec4<f32>(x_93.x, x_93.y, x_93.z, x_94.w);
  let x_100 : vec4<f32> = u_xlat0;
  u_xlat1.x = dot(vec3<f32>(0.390404999f, 0.549941003f, 0.00892632f), vec3<f32>(x_100.x, x_100.y, x_100.z));
  let x_108 : vec4<f32> = u_xlat0;
  u_xlat1.y = dot(vec3<f32>(0.070841603f, 0.963172019f, 0.00135775f), vec3<f32>(x_108.x, x_108.y, x_108.z));
  let x_116 : vec4<f32> = u_xlat0;
  u_xlat1.z = dot(vec3<f32>(0.023108199f, 0.128021002f, 0.936245024f), vec3<f32>(x_116.x, x_116.y, x_116.z));
  let x_121 : vec3<f32> = u_xlat1;
  let x_124 : vec4<f32> = x_16.x_ColorBalance;
  let x_126 : vec3<f32> = (x_121 * vec3<f32>(x_124.x, x_124.y, x_124.z));
  let x_127 : vec4<f32> = u_xlat0;
  u_xlat0 = vec4<f32>(x_126.x, x_126.y, x_126.z, x_127.w);
  let x_133 : vec4<f32> = u_xlat0;
  u_xlat1.x = dot(vec3<f32>(2.858469963f, -1.628790021f, -0.024891f), vec3<f32>(x_133.x, x_133.y, x_133.z));
  let x_141 : vec4<f32> = u_xlat0;
  u_xlat1.y = dot(vec3<f32>(-0.210181996f, 1.158200026f, 0.000324281f), vec3<f32>(x_141.x, x_141.y, x_141.z));
  let x_149 : vec4<f32> = u_xlat0;
  u_xlat1.z = dot(vec3<f32>(-0.041811999f, -0.118169002f, 1.068670034f), vec3<f32>(x_149.x, x_149.y, x_149.z));
  let x_157 : vec3<f32> = u_xlat1;
  u_xlat0.x = dot(vec3<f32>(0.439700991f, 0.382977992f, 0.177334994f), x_157);
  let x_164 : vec3<f32> = u_xlat1;
  u_xlat0.y = dot(vec3<f32>(0.089792296f, 0.813422978f, 0.096761599f), x_164);
  let x_171 : vec3<f32> = u_xlat1;
  u_xlat0.z = dot(vec3<f32>(0.017543999f, 0.111543998f, 0.870703995f), x_171);
  let x_174 : vec4<f32> = u_xlat0;
  let x_178 : vec3<f32> = max(vec3<f32>(x_174.x, x_174.y, x_174.z), vec3<f32>(0.0f, 0.0f, 0.0f));
  let x_179 : vec4<f32> = u_xlat0;
  u_xlat0 = vec4<f32>(x_178.x, x_178.y, x_178.z, x_179.w);
  let x_181 : vec4<f32> = u_xlat0;
  let x_185 : vec3<f32> = min(vec3<f32>(x_181.x, x_181.y, x_181.z), vec3<f32>(65504.0f, 65504.0f, 65504.0f));
  let x_186 : vec4<f32> = u_xlat0;
  u_xlat0 = vec4<f32>(x_185.x, x_185.y, x_185.z, x_186.w);
  let x_188 : vec4<f32> = u_xlat0;
  u_xlat1 = ((vec3<f32>(x_188.x, x_188.y, x_188.z) * vec3<f32>(0.5f, 0.5f, 0.5f)) + vec3<f32>(1.525878e-05f, 1.525878e-05f, 1.525878e-05f));
  let x_196 : vec3<f32> = u_xlat1;
  u_xlat1 = log2(x_196);
  let x_198 : vec3<f32> = u_xlat1;
  u_xlat1 = (x_198 + vec3<f32>(9.720000267f, 9.720000267f, 9.720000267f));
  let x_202 : vec3<f32> = u_xlat1;
  u_xlat1 = (x_202 * vec3<f32>(0.057077624f, 0.057077624f, 0.057077624f));
  let x_207 : vec4<f32> = u_xlat0;
  let x_209 : vec3<f32> = log2(vec3<f32>(x_207.x, x_207.y, x_207.z));
  let x_210 : vec4<f32> = u_xlat2;
  u_xlat2 = vec4<f32>(x_209.x, x_209.y, x_209.z, x_210.w);
  let x_216 : vec4<f32> = u_xlat0;
  let x_221 : vec4<bool> = (vec4<f32>(x_216.x, x_216.y, x_216.z, x_216.x) < vec4<f32>(3.05175708e-05f, 3.05175708e-05f, 3.05175708e-05f, 0.0f));
  u_xlatb0 = vec3<bool>(x_221.x, x_221.y, x_221.z);
  let x_223 : vec4<f32> = u_xlat2;
  let x_225 : vec3<f32> = (vec3<f32>(x_223.x, x_223.y, x_223.z) + vec3<f32>(9.720000267f, 9.720000267f, 9.720000267f));
  let x_226 : vec4<f32> = u_xlat2;
  u_xlat2 = vec4<f32>(x_225.x, x_225.y, x_225.z, x_226.w);
  let x_228 : vec4<f32> = u_xlat2;
  let x_230 : vec3<f32> = (vec3<f32>(x_228.x, x_228.y, x_228.z) * vec3<f32>(0.057077624f, 0.057077624f, 0.057077624f));
  let x_231 : vec4<f32> = u_xlat2;
  u_xlat2 = vec4<f32>(x_230.x, x_230.y, x_230.z, x_231.w);
  let x_235 : bool = u_xlatb0.x;
  if (x_235) {
    let x_240 : f32 = u_xlat1.x;
    x_236 = x_240;
  } else {
    let x_243 : f32 = u_xlat2.x;
    x_236 = x_243;
  }
  let x_244 : f32 = x_236;
  u_xlat0.x = x_244;
  let x_247 : bool = u_xlatb0.y;
  if (x_247) {
    let x_252 : f32 = u_xlat1.y;
    x_248 = x_252;
  } else {
    let x_255 : f32 = u_xlat2.y;
    x_248 = x_255;
  }
  let x_256 : f32 = x_248;
  u_xlat0.y = x_256;
  let x_259 : bool = u_xlatb0.z;
  if (x_259) {
    let x_264 : f32 = u_xlat1.z;
    x_260 = x_264;
  } else {
    let x_267 : f32 = u_xlat2.z;
    x_260 = x_267;
  }
  let x_268 : f32 = x_260;
  u_xlat0.z = x_268;
  let x_270 : vec4<f32> = u_xlat0;
  let x_274 : vec3<f32> = (vec3<f32>(x_270.x, x_270.y, x_270.z) + vec3<f32>(-0.413588405f, -0.413588405f, -0.413588405f));
  let x_275 : vec4<f32> = u_xlat0;
  u_xlat0 = vec4<f32>(x_274.x, x_274.y, x_274.z, x_275.w);
  let x_277 : vec4<f32> = u_xlat0;
  let x_281 : vec4<f32> = x_16.x_HueSatCon;
  let x_286 : vec3<f32> = ((vec3<f32>(x_277.x, x_277.y, x_277.z) * vec3<f32>(x_281.z, x_281.z, x_281.z)) + vec3<f32>(0.413588405f, 0.413588405f, 0.413588405f));
  let x_287 : vec4<f32> = u_xlat0;
  u_xlat0 = vec4<f32>(x_286.x, x_286.y, x_286.z, x_287.w);
  let x_291 : vec4<f32> = u_xlat0;
  u_xlatb1 = (vec4<f32>(x_291.x, x_291.x, x_291.y, x_291.y) < vec4<f32>(-0.301369876f, 1.467996359f, -0.301369876f, 1.467996359f));
  let x_297 : vec4<f32> = u_xlat0;
  let x_304 : vec3<f32> = ((vec3<f32>(x_297.x, x_297.y, x_297.z) * vec3<f32>(17.520000458f, 17.520000458f, 17.520000458f)) + vec3<f32>(-9.720000267f, -9.720000267f, -9.720000267f));
  let x_305 : vec4<f32> = u_xlat0;
  u_xlat0 = vec4<f32>(x_304.x, x_304.y, x_305.z, x_304.z);
  let x_310 : vec4<f32> = u_xlat0;
  let x_313 : vec4<bool> = (vec4<f32>(x_310.z, x_310.z, x_310.z, x_310.z) < vec4<f32>(-0.301369876f, 1.467996359f, 0.0f, 0.0f));
  u_xlatb2 = vec2<bool>(x_313.x, x_313.y);
  let x_315 : vec4<f32> = u_xlat0;
  let x_317 : vec3<f32> = exp2(vec3<f32>(x_315.x, x_315.y, x_315.w));
  let x_318 : vec4<f32> = u_xlat0;
  u_xlat0 = vec4<f32>(x_317.x, x_317.y, x_317.z, x_318.w);
  let x_322 : bool = u_xlatb1.y;
  if (x_322) {
    let x_327 : f32 = u_xlat0.x;
    x_323 = x_327;
  } else {
    x_323 = 65504.0f;
  }
  let x_329 : f32 = x_323;
  u_xlat7.x = x_329;
  let x_332 : bool = u_xlatb1.w;
  if (x_332) {
    let x_337 : f32 = u_xlat0.y;
    x_333 = x_337;
  } else {
    x_333 = 65504.0f;
  }
  let x_339 : f32 = x_333;
  u_xlat7.z = x_339;
  let x_341 : vec4<f32> = u_xlat0;
  let x_345 : vec3<f32> = (vec3<f32>(x_341.x, x_341.y, x_341.z) + vec3<f32>(-1.52587891e-05f, -1.52587891e-05f, -1.52587891e-05f));
  let x_346 : vec4<f32> = u_xlat0;
  u_xlat0 = vec4<f32>(x_345.x, x_345.y, x_346.z, x_345.z);
  let x_350 : bool = u_xlatb2.y;
  if (x_350) {
    let x_355 : f32 = u_xlat0.z;
    x_351 = x_355;
  } else {
    x_351 = 65504.0f;
  }
  let x_357 : f32 = x_351;
  u_xlat12 = x_357;
  let x_358 : vec4<f32> = u_xlat0;
  let x_360 : vec4<f32> = u_xlat0;
  let x_362 : vec3<f32> = (vec3<f32>(x_358.x, x_358.y, x_358.w) + vec3<f32>(x_360.x, x_360.y, x_360.w));
  let x_363 : vec4<f32> = u_xlat0;
  u_xlat0 = vec4<f32>(x_362.x, x_362.y, x_363.z, x_362.z);
  let x_366 : bool = u_xlatb1.x;
  if (x_366) {
    let x_371 : f32 = u_xlat0.x;
    x_367 = x_371;
  } else {
    let x_374 : f32 = u_xlat7.x;
    x_367 = x_374;
  }
  let x_375 : f32 = x_367;
  u_xlat1.x = x_375;
  let x_378 : bool = u_xlatb1.z;
  if (x_378) {
    let x_383 : f32 = u_xlat0.y;
    x_379 = x_383;
  } else {
    let x_386 : f32 = u_xlat7.z;
    x_379 = x_386;
  }
  let x_387 : f32 = x_379;
  u_xlat1.y = x_387;
  let x_390 : bool = u_xlatb2.x;
  if (x_390) {
    let x_395 : f32 = u_xlat0.w;
    x_391 = x_395;
  } else {
    let x_397 : f32 = u_xlat12;
    x_391 = x_397;
  }
  let x_398 : f32 = x_391;
  u_xlat1.z = x_398;
  let x_404 : vec3<f32> = u_xlat1;
  u_xlat0.x = dot(vec3<f32>(1.451439261f, -0.236510754f, -0.214928567f), x_404);
  let x_411 : vec3<f32> = u_xlat1;
  u_xlat0.y = dot(vec3<f32>(-0.076553777f, 1.176229715f, -0.099675924f), x_411);
  let x_418 : vec3<f32> = u_xlat1;
  u_xlat0.z = dot(vec3<f32>(0.008316148f, -0.00603244966f, 0.997716308f), x_418);
  let x_421 : vec4<f32> = u_xlat0;
  let x_425 : vec4<f32> = x_16.x_ColorFilter;
  let x_427 : vec3<f32> = (vec3<f32>(x_421.x, x_421.y, x_421.z) * vec3<f32>(x_425.x, x_425.y, x_425.z));
  let x_428 : vec4<f32> = u_xlat0;
  u_xlat0 = vec4<f32>(x_427.x, x_427.y, x_427.z, x_428.w);
  let x_430 : vec4<f32> = u_xlat0;
  let x_432 : vec3<f32> = max(vec3<f32>(x_430.x, x_430.y, x_430.z), vec3<f32>(0.0f, 0.0f, 0.0f));
  let x_433 : vec4<f32> = u_xlat0;
  u_xlat0 = vec4<f32>(x_432.x, x_432.y, x_432.z, x_433.w);
  let x_435 : vec4<f32> = u_xlat0;
  let x_437 : vec3<f32> = log2(vec3<f32>(x_435.x, x_435.y, x_435.z));
  let x_438 : vec4<f32> = u_xlat0;
  u_xlat0 = vec4<f32>(x_437.x, x_437.y, x_437.z, x_438.w);
  let x_440 : vec4<f32> = u_xlat0;
  let x_444 : vec3<f32> = (vec3<f32>(x_440.x, x_440.y, x_440.z) * vec3<f32>(0.454545468f, 0.454545468f, 0.454545468f));
  let x_445 : vec4<f32> = u_xlat0;
  u_xlat0 = vec4<f32>(x_444.x, x_444.y, x_444.z, x_445.w);
  let x_447 : vec4<f32> = u_xlat0;
  let x_449 : vec3<f32> = exp2(vec3<f32>(x_447.x, x_447.y, x_447.z));
  let x_450 : vec4<f32> = u_xlat0;
  u_xlat0 = vec4<f32>(x_449.x, x_449.y, x_449.z, x_450.w);
  let x_452 : vec4<f32> = u_xlat0;
  let x_454 : vec4<f32> = u_xlat0;
  u_xlat1 = (vec3<f32>(x_452.x, x_452.y, x_452.z) + vec3<f32>(x_454.x, x_454.y, x_454.z));
  let x_457 : vec4<f32> = u_xlat0;
  let x_459 : vec4<f32> = u_xlat0;
  let x_461 : vec3<f32> = (vec3<f32>(x_457.x, x_457.y, x_457.z) * vec3<f32>(x_459.x, x_459.y, x_459.z));
  let x_462 : vec4<f32> = u_xlat2;
  u_xlat2 = vec4<f32>(x_461.x, x_461.y, x_461.z, x_462.w);
  let x_465 : vec4<f32> = u_xlat0;
  let x_469 : vec3<f32> = min(vec3<f32>(x_465.x, x_465.y, x_465.z), vec3<f32>(1.0f, 1.0f, 1.0f));
  let x_470 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_469.x, x_469.y, x_469.z, x_470.w);
  let x_472 : vec4<f32> = u_xlat0;
  let x_474 : vec3<f32> = sqrt(vec3<f32>(x_472.x, x_472.y, x_472.z));
  let x_475 : vec4<f32> = u_xlat0;
  u_xlat0 = vec4<f32>(x_474.x, x_474.y, x_474.z, x_475.w);
  let x_478 : vec4<f32> = u_xlat3;
  u_xlat18 = dot(vec3<f32>(x_478.x, x_478.y, x_478.z), vec3<f32>(0.272228986f, 0.674081981f, 0.053689498f));
  let x_485 : f32 = u_xlat18;
  let x_488 : f32 = x_16.x_SplitShadows.w;
  u_xlat18 = (x_485 + x_488);
  let x_490 : f32 = u_xlat18;
  u_xlat18 = clamp(x_490, 0.0f, 1.0f);
  let x_493 : f32 = u_xlat18;
  u_xlat19 = (-(x_493) + 1.0f);
  let x_497 : vec4<f32> = x_16.x_SplitShadows;
  let x_501 : vec3<f32> = (vec3<f32>(x_497.x, x_497.y, x_497.z) + vec3<f32>(-0.5f, -0.5f, -0.5f));
  let x_502 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_501.x, x_501.y, x_501.z, x_502.w);
  let x_504 : f32 = u_xlat19;
  let x_506 : vec4<f32> = u_xlat3;
  let x_509 : vec3<f32> = ((vec3<f32>(x_504, x_504, x_504) * vec3<f32>(x_506.x, x_506.y, x_506.z)) + vec3<f32>(0.5f, 0.5f, 0.5f));
  let x_510 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_509.x, x_509.y, x_509.z, x_510.w);
  let x_513 : vec4<f32> = u_xlat3;
  u_xlat4 = ((-(vec3<f32>(x_513.x, x_513.y, x_513.z)) * vec3<f32>(2.0f, 2.0f, 2.0f)) + vec3<f32>(1.0f, 1.0f, 1.0f));
  let x_520 : vec4<f32> = u_xlat2;
  let x_522 : vec3<f32> = u_xlat4;
  let x_523 : vec3<f32> = (vec3<f32>(x_520.x, x_520.y, x_520.z) * x_522);
  let x_524 : vec4<f32> = u_xlat2;
  u_xlat2 = vec4<f32>(x_523.x, x_523.y, x_523.z, x_524.w);
  let x_526 : vec3<f32> = u_xlat1;
  let x_527 : vec4<f32> = u_xlat3;
  let x_530 : vec4<f32> = u_xlat2;
  let x_532 : vec3<f32> = ((x_526 * vec3<f32>(x_527.x, x_527.y, x_527.z)) + vec3<f32>(x_530.x, x_530.y, x_530.z));
  let x_533 : vec4<f32> = u_xlat2;
  u_xlat2 = vec4<f32>(x_532.x, x_532.y, x_532.z, x_533.w);
  let x_536 : vec4<f32> = u_xlat3;
  let x_539 : vec4<bool> = (vec4<f32>(x_536.x, x_536.y, x_536.z, x_536.x) >= vec4<f32>(0.5f, 0.5f, 0.5f, 0.0f));
  u_xlatb4 = vec3<bool>(x_539.x, x_539.y, x_539.z);
  let x_543 : bool = u_xlatb4.x;
  u_xlat5.x = select(1.0f, 0.0f, x_543);
  let x_547 : bool = u_xlatb4.y;
  u_xlat5.y = select(1.0f, 0.0f, x_547);
  let x_551 : bool = u_xlatb4.z;
  u_xlat5.z = select(1.0f, 0.0f, x_551);
  let x_555 : bool = u_xlatb4.x;
  u_xlat4.x = select(0.0f, 1.0f, x_555);
  let x_559 : bool = u_xlatb4.y;
  u_xlat4.y = select(0.0f, 1.0f, x_559);
  let x_563 : bool = u_xlatb4.z;
  u_xlat4.z = select(0.0f, 1.0f, x_563);
  let x_566 : vec4<f32> = u_xlat2;
  let x_568 : vec3<f32> = u_xlat5;
  let x_569 : vec3<f32> = (vec3<f32>(x_566.x, x_566.y, x_566.z) * x_568);
  let x_570 : vec4<f32> = u_xlat2;
  u_xlat2 = vec4<f32>(x_569.x, x_569.y, x_569.z, x_570.w);
  let x_572 : vec4<f32> = u_xlat3;
  u_xlat5 = (-(vec3<f32>(x_572.x, x_572.y, x_572.z)) + vec3<f32>(1.0f, 1.0f, 1.0f));
  let x_576 : vec4<f32> = u_xlat3;
  let x_581 : vec3<f32> = ((vec3<f32>(x_576.x, x_576.y, x_576.z) * vec3<f32>(2.0f, 2.0f, 2.0f)) + vec3<f32>(-1.0f, -1.0f, -1.0f));
  let x_582 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_581.x, x_581.y, x_581.z, x_582.w);
  let x_584 : vec3<f32> = u_xlat1;
  let x_585 : vec3<f32> = u_xlat5;
  u_xlat1 = (x_584 * x_585);
  let x_587 : vec4<f32> = u_xlat0;
  let x_589 : vec4<f32> = u_xlat3;
  let x_592 : vec3<f32> = u_xlat1;
  let x_593 : vec3<f32> = ((vec3<f32>(x_587.x, x_587.y, x_587.z) * vec3<f32>(x_589.x, x_589.y, x_589.z)) + x_592);
  let x_594 : vec4<f32> = u_xlat0;
  u_xlat0 = vec4<f32>(x_593.x, x_593.y, x_593.z, x_594.w);
  let x_596 : vec4<f32> = u_xlat0;
  let x_598 : vec3<f32> = u_xlat4;
  let x_600 : vec4<f32> = u_xlat2;
  let x_602 : vec3<f32> = ((vec3<f32>(x_596.x, x_596.y, x_596.z) * x_598) + vec3<f32>(x_600.x, x_600.y, x_600.z));
  let x_603 : vec4<f32> = u_xlat0;
  u_xlat0 = vec4<f32>(x_602.x, x_602.y, x_602.z, x_603.w);
  let x_605 : vec4<f32> = u_xlat0;
  let x_607 : vec4<f32> = u_xlat0;
  u_xlat1 = (vec3<f32>(x_605.x, x_605.y, x_605.z) + vec3<f32>(x_607.x, x_607.y, x_607.z));
  let x_610 : vec4<f32> = u_xlat0;
  let x_612 : vec4<f32> = u_xlat0;
  let x_614 : vec3<f32> = (vec3<f32>(x_610.x, x_610.y, x_610.z) * vec3<f32>(x_612.x, x_612.y, x_612.z));
  let x_615 : vec4<f32> = u_xlat2;
  u_xlat2 = vec4<f32>(x_614.x, x_614.y, x_614.z, x_615.w);
  let x_617 : vec4<f32> = u_xlat0;
  let x_619 : vec3<f32> = sqrt(vec3<f32>(x_617.x, x_617.y, x_617.z));
  let x_620 : vec4<f32> = u_xlat0;
  u_xlat0 = vec4<f32>(x_619.x, x_619.y, x_619.z, x_620.w);
  let x_624 : vec4<f32> = x_16.x_SplitHighlights;
  let x_626 : vec3<f32> = (vec3<f32>(x_624.x, x_624.y, x_624.z) + vec3<f32>(-0.5f, -0.5f, -0.5f));
  let x_627 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_626.x, x_626.y, x_626.z, x_627.w);
  let x_629 : f32 = u_xlat18;
  let x_631 : vec4<f32> = u_xlat3;
  let x_634 : vec3<f32> = ((vec3<f32>(x_629, x_629, x_629) * vec3<f32>(x_631.x, x_631.y, x_631.z)) + vec3<f32>(0.5f, 0.5f, 0.5f));
  let x_635 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_634.x, x_634.y, x_634.z, x_635.w);
  let x_637 : vec4<f32> = u_xlat3;
  u_xlat4 = ((-(vec3<f32>(x_637.x, x_637.y, x_637.z)) * vec3<f32>(2.0f, 2.0f, 2.0f)) + vec3<f32>(1.0f, 1.0f, 1.0f));
  let x_642 : vec4<f32> = u_xlat2;
  let x_644 : vec3<f32> = u_xlat4;
  let x_645 : vec3<f32> = (vec3<f32>(x_642.x, x_642.y, x_642.z) * x_644);
  let x_646 : vec4<f32> = u_xlat2;
  u_xlat2 = vec4<f32>(x_645.x, x_645.y, x_645.z, x_646.w);
  let x_648 : vec3<f32> = u_xlat1;
  let x_649 : vec4<f32> = u_xlat3;
  let x_652 : vec4<f32> = u_xlat2;
  let x_654 : vec3<f32> = ((x_648 * vec3<f32>(x_649.x, x_649.y, x_649.z)) + vec3<f32>(x_652.x, x_652.y, x_652.z));
  let x_655 : vec4<f32> = u_xlat2;
  u_xlat2 = vec4<f32>(x_654.x, x_654.y, x_654.z, x_655.w);
  let x_657 : vec4<f32> = u_xlat3;
  let x_659 : vec4<bool> = (vec4<f32>(x_657.x, x_657.y, x_657.z, x_657.x) >= vec4<f32>(0.5f, 0.5f, 0.5f, 0.0f));
  u_xlatb4 = vec3<bool>(x_659.x, x_659.y, x_659.z);
  let x_662 : bool = u_xlatb4.x;
  u_xlat5.x = select(1.0f, 0.0f, x_662);
  let x_666 : bool = u_xlatb4.y;
  u_xlat5.y = select(1.0f, 0.0f, x_666);
  let x_670 : bool = u_xlatb4.z;
  u_xlat5.z = select(1.0f, 0.0f, x_670);
  let x_674 : bool = u_xlatb4.x;
  u_xlat4.x = select(0.0f, 1.0f, x_674);
  let x_678 : bool = u_xlatb4.y;
  u_xlat4.y = select(0.0f, 1.0f, x_678);
  let x_682 : bool = u_xlatb4.z;
  u_xlat4.z = select(0.0f, 1.0f, x_682);
  let x_685 : vec4<f32> = u_xlat2;
  let x_687 : vec3<f32> = u_xlat5;
  let x_688 : vec3<f32> = (vec3<f32>(x_685.x, x_685.y, x_685.z) * x_687);
  let x_689 : vec4<f32> = u_xlat2;
  u_xlat2 = vec4<f32>(x_688.x, x_688.y, x_688.z, x_689.w);
  let x_691 : vec4<f32> = u_xlat3;
  u_xlat5 = (-(vec3<f32>(x_691.x, x_691.y, x_691.z)) + vec3<f32>(1.0f, 1.0f, 1.0f));
  let x_695 : vec4<f32> = u_xlat3;
  let x_698 : vec3<f32> = ((vec3<f32>(x_695.x, x_695.y, x_695.z) * vec3<f32>(2.0f, 2.0f, 2.0f)) + vec3<f32>(-1.0f, -1.0f, -1.0f));
  let x_699 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_698.x, x_698.y, x_698.z, x_699.w);
  let x_701 : vec3<f32> = u_xlat1;
  let x_702 : vec3<f32> = u_xlat5;
  u_xlat1 = (x_701 * x_702);
  let x_704 : vec4<f32> = u_xlat0;
  let x_706 : vec4<f32> = u_xlat3;
  let x_709 : vec3<f32> = u_xlat1;
  let x_710 : vec3<f32> = ((vec3<f32>(x_704.x, x_704.y, x_704.z) * vec3<f32>(x_706.x, x_706.y, x_706.z)) + x_709);
  let x_711 : vec4<f32> = u_xlat0;
  u_xlat0 = vec4<f32>(x_710.x, x_710.y, x_710.z, x_711.w);
  let x_713 : vec4<f32> = u_xlat0;
  let x_715 : vec3<f32> = u_xlat4;
  let x_717 : vec4<f32> = u_xlat2;
  let x_719 : vec3<f32> = ((vec3<f32>(x_713.x, x_713.y, x_713.z) * x_715) + vec3<f32>(x_717.x, x_717.y, x_717.z));
  let x_720 : vec4<f32> = u_xlat0;
  u_xlat0 = vec4<f32>(x_719.x, x_719.y, x_719.z, x_720.w);
  let x_722 : vec4<f32> = u_xlat0;
  let x_725 : vec3<f32> = log2(abs(vec3<f32>(x_722.x, x_722.y, x_722.z)));
  let x_726 : vec4<f32> = u_xlat0;
  u_xlat0 = vec4<f32>(x_725.x, x_725.y, x_725.z, x_726.w);
  let x_728 : vec4<f32> = u_xlat0;
  let x_732 : vec3<f32> = (vec3<f32>(x_728.x, x_728.y, x_728.z) * vec3<f32>(2.200000048f, 2.200000048f, 2.200000048f));
  let x_733 : vec4<f32> = u_xlat0;
  u_xlat0 = vec4<f32>(x_732.x, x_732.y, x_732.z, x_733.w);
  let x_735 : vec4<f32> = u_xlat0;
  let x_737 : vec3<f32> = exp2(vec3<f32>(x_735.x, x_735.y, x_735.z));
  let x_738 : vec4<f32> = u_xlat0;
  u_xlat0 = vec4<f32>(x_737.x, x_737.y, x_737.z, x_738.w);
  let x_740 : vec4<f32> = u_xlat0;
  let x_744 : vec4<f32> = x_16.x_ChannelMixerRed;
  u_xlat1.x = dot(vec3<f32>(x_740.x, x_740.y, x_740.z), vec3<f32>(x_744.x, x_744.y, x_744.z));
  let x_748 : vec4<f32> = u_xlat0;
  let x_752 : vec4<f32> = x_16.x_ChannelMixerGreen;
  u_xlat1.y = dot(vec3<f32>(x_748.x, x_748.y, x_748.z), vec3<f32>(x_752.x, x_752.y, x_752.z));
  let x_756 : vec4<f32> = u_xlat0;
  let x_760 : vec4<f32> = x_16.x_ChannelMixerBlue;
  u_xlat1.z = dot(vec3<f32>(x_756.x, x_756.y, x_756.z), vec3<f32>(x_760.x, x_760.y, x_760.z));
  let x_764 : vec3<f32> = u_xlat1;
  let x_767 : vec4<f32> = x_16.x_Midtones;
  let x_769 : vec3<f32> = (x_764 * vec3<f32>(x_767.x, x_767.y, x_767.z));
  let x_770 : vec4<f32> = u_xlat0;
  u_xlat0 = vec4<f32>(x_769.x, x_769.y, x_769.z, x_770.w);
  let x_772 : vec3<f32> = u_xlat1;
  u_xlat18 = dot(x_772, vec3<f32>(0.272228986f, 0.674081981f, 0.053689498f));
  let x_774 : f32 = u_xlat18;
  let x_778 : vec4<f32> = x_16.x_ShaHiLimits;
  let x_781 : vec2<f32> = (vec2<f32>(x_774, x_774) + -(vec2<f32>(x_778.x, x_778.z)));
  let x_782 : vec4<f32> = u_xlat2;
  u_xlat2 = vec4<f32>(x_781.x, x_781.y, x_782.z, x_782.w);
  let x_787 : vec4<f32> = x_16.x_ShaHiLimits;
  let x_791 : vec4<f32> = x_16.x_ShaHiLimits;
  u_xlat14 = (-(vec2<f32>(x_787.x, x_787.z)) + vec2<f32>(x_791.y, x_791.w));
  let x_795 : vec2<f32> = u_xlat14;
  u_xlat14 = (vec2<f32>(1.0f, 1.0f) / x_795);
  let x_797 : vec2<f32> = u_xlat14;
  let x_798 : vec4<f32> = u_xlat2;
  let x_800 : vec2<f32> = (x_797 * vec2<f32>(x_798.x, x_798.y));
  let x_801 : vec4<f32> = u_xlat2;
  u_xlat2 = vec4<f32>(x_800.x, x_800.y, x_801.z, x_801.w);
  let x_803 : vec4<f32> = u_xlat2;
  let x_807 : vec2<f32> = clamp(vec2<f32>(x_803.x, x_803.y), vec2<f32>(0.0f, 0.0f), vec2<f32>(1.0f, 1.0f));
  let x_808 : vec4<f32> = u_xlat2;
  u_xlat2 = vec4<f32>(x_807.x, x_807.y, x_808.z, x_808.w);
  let x_810 : vec4<f32> = u_xlat2;
  u_xlat14 = ((vec2<f32>(x_810.x, x_810.y) * vec2<f32>(-2.0f, -2.0f)) + vec2<f32>(3.0f, 3.0f));
  let x_818 : vec4<f32> = u_xlat2;
  let x_820 : vec4<f32> = u_xlat2;
  let x_822 : vec2<f32> = (vec2<f32>(x_818.x, x_818.y) * vec2<f32>(x_820.x, x_820.y));
  let x_823 : vec4<f32> = u_xlat2;
  u_xlat2 = vec4<f32>(x_822.x, x_822.y, x_823.z, x_823.w);
  let x_826 : f32 = u_xlat14.x;
  let x_829 : f32 = u_xlat2.x;
  u_xlat18 = ((-(x_826) * x_829) + 1.0f);
  let x_832 : f32 = u_xlat18;
  u_xlat19 = (-(x_832) + 1.0f);
  let x_836 : f32 = u_xlat14.y;
  let x_839 : f32 = u_xlat2.y;
  let x_841 : f32 = u_xlat19;
  u_xlat19 = ((-(x_836) * x_839) + x_841);
  let x_844 : f32 = u_xlat2.y;
  let x_846 : f32 = u_xlat14.y;
  u_xlat2.x = (x_844 * x_846);
  let x_849 : vec4<f32> = u_xlat0;
  let x_851 : f32 = u_xlat19;
  let x_853 : vec3<f32> = (vec3<f32>(x_849.x, x_849.y, x_849.z) * vec3<f32>(x_851, x_851, x_851));
  let x_854 : vec4<f32> = u_xlat0;
  u_xlat0 = vec4<f32>(x_853.x, x_853.y, x_853.z, x_854.w);
  let x_857 : vec3<f32> = u_xlat1;
  let x_860 : vec4<f32> = x_16.x_Shadows;
  u_xlat8 = (x_857 * vec3<f32>(x_860.x, x_860.y, x_860.z));
  let x_863 : vec3<f32> = u_xlat1;
  let x_866 : vec4<f32> = x_16.x_Highlights;
  u_xlat1 = (x_863 * vec3<f32>(x_866.x, x_866.y, x_866.z));
  let x_869 : vec3<f32> = u_xlat8;
  let x_870 : f32 = u_xlat18;
  let x_873 : vec4<f32> = u_xlat0;
  let x_875 : vec3<f32> = ((x_869 * vec3<f32>(x_870, x_870, x_870)) + vec3<f32>(x_873.x, x_873.y, x_873.z));
  let x_876 : vec4<f32> = u_xlat0;
  u_xlat0 = vec4<f32>(x_875.x, x_875.y, x_875.z, x_876.w);
  let x_878 : vec3<f32> = u_xlat1;
  let x_879 : vec4<f32> = u_xlat2;
  let x_882 : vec4<f32> = u_xlat0;
  let x_884 : vec3<f32> = ((x_878 * vec3<f32>(x_879.x, x_879.x, x_879.x)) + vec3<f32>(x_882.x, x_882.y, x_882.z));
  let x_885 : vec4<f32> = u_xlat0;
  u_xlat0 = vec4<f32>(x_884.x, x_884.y, x_884.z, x_885.w);
  let x_887 : vec4<f32> = u_xlat0;
  let x_891 : vec4<f32> = x_16.x_Gain;
  let x_896 : vec4<f32> = x_16.x_Lift;
  let x_898 : vec3<f32> = ((vec3<f32>(x_887.x, x_887.y, x_887.z) * vec3<f32>(x_891.x, x_891.y, x_891.z)) + vec3<f32>(x_896.x, x_896.y, x_896.z));
  let x_899 : vec4<f32> = u_xlat0;
  u_xlat0 = vec4<f32>(x_898.x, x_898.y, x_898.z, x_899.w);
  let x_905 : vec4<f32> = u_xlat0;
  let x_907 : vec4<bool> = (vec4<f32>(0.0f, 0.0f, 0.0f, 0.0f) < vec4<f32>(x_905.x, x_905.y, x_905.z, x_905.x));
  u_xlati1 = bitcast<vec3<i32>>((select(vec3<u32>(0u, 0u, 0u), vec3<u32>(1u, 1u, 1u), vec3<bool>(x_907.x, x_907.y, x_907.z)) * vec3<u32>(4294967295u, 4294967295u, 4294967295u)));
  let x_918 : vec4<f32> = u_xlat0;
  let x_920 : vec4<bool> = (vec4<f32>(x_918.x, x_918.y, x_918.z, x_918.x) < vec4<f32>(0.0f, 0.0f, 0.0f, 0.0f));
  u_xlati2 = bitcast<vec3<i32>>((select(vec3<u32>(0u, 0u, 0u), vec3<u32>(1u, 1u, 1u), vec3<bool>(x_920.x, x_920.y, x_920.z)) * vec3<u32>(4294967295u, 4294967295u, 4294967295u)));
  let x_926 : vec4<f32> = u_xlat0;
  let x_929 : vec3<f32> = log2(abs(vec3<f32>(x_926.x, x_926.y, x_926.z)));
  let x_930 : vec4<f32> = u_xlat0;
  u_xlat0 = vec4<f32>(x_929.x, x_929.y, x_929.z, x_930.w);
  let x_932 : vec4<f32> = u_xlat0;
  let x_936 : vec4<f32> = x_16.x_Gamma;
  let x_938 : vec3<f32> = (vec3<f32>(x_932.x, x_932.y, x_932.z) * vec3<f32>(x_936.x, x_936.y, x_936.z));
  let x_939 : vec4<f32> = u_xlat0;
  u_xlat0 = vec4<f32>(x_938.x, x_938.y, x_938.z, x_939.w);
  let x_941 : vec4<f32> = u_xlat0;
  let x_943 : vec3<f32> = exp2(vec3<f32>(x_941.x, x_941.y, x_941.z));
  let x_944 : vec4<f32> = u_xlat0;
  u_xlat0 = vec4<f32>(x_943.x, x_943.y, x_943.z, x_944.w);
  let x_946 : vec3<i32> = u_xlati1;
  let x_948 : vec3<i32> = u_xlati2;
  u_xlati1 = (-(x_946) + x_948);
  let x_950 : vec3<i32> = u_xlati1;
  u_xlat1 = vec3<f32>(x_950);
  let x_952 : vec4<f32> = u_xlat0;
  let x_954 : vec3<f32> = u_xlat1;
  let x_955 : vec3<f32> = (vec3<f32>(x_952.x, x_952.y, x_952.z) * x_954);
  let x_956 : vec4<f32> = u_xlat2;
  u_xlat2 = vec4<f32>(x_955.x, x_955.y, x_955.z, x_956.w);
  let x_958 : vec4<f32> = u_xlat2;
  let x_959 : vec2<f32> = vec2<f32>(x_958.z, x_958.y);
  let x_960 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_959.x, x_959.y, x_960.z, x_960.w);
  let x_962 : vec3<f32> = u_xlat1;
  let x_964 : vec4<f32> = u_xlat0;
  let x_967 : vec4<f32> = u_xlat3;
  let x_970 : vec2<f32> = ((vec2<f32>(x_962.y, x_962.z) * vec2<f32>(x_964.y, x_964.z)) + -(vec2<f32>(x_967.x, x_967.y)));
  let x_971 : vec4<f32> = u_xlat0;
  u_xlat0 = vec4<f32>(x_970.x, x_970.y, x_971.z, x_971.w);
  let x_974 : f32 = u_xlat3.y;
  let x_976 : f32 = u_xlat2.z;
  u_xlatb1.x = (x_974 >= x_976);
  let x_980 : bool = u_xlatb1.x;
  u_xlat1.x = select(0.0f, 1.0f, x_980);
  u_xlat3.z = -1.0f;
  u_xlat3.w = 0.666666687f;
  u_xlat0.z = 1.0f;
  u_xlat0.w = -1.0f;
  let x_988 : vec3<f32> = u_xlat1;
  let x_990 : vec4<f32> = u_xlat0;
  let x_993 : vec4<f32> = u_xlat3;
  u_xlat0 = ((vec4<f32>(x_988.x, x_988.x, x_988.x, x_988.x) * vec4<f32>(x_990.x, x_990.y, x_990.w, x_990.z)) + vec4<f32>(x_993.x, x_993.y, x_993.w, x_993.z));
  let x_997 : f32 = u_xlat2.x;
  let x_999 : f32 = u_xlat0.x;
  u_xlatb1.x = (x_997 >= x_999);
  let x_1003 : bool = u_xlatb1.x;
  u_xlat1.x = select(0.0f, 1.0f, x_1003);
  let x_1007 : f32 = u_xlat0.w;
  u_xlat3.z = x_1007;
  let x_1010 : f32 = u_xlat2.x;
  u_xlat0.w = x_1010;
  let x_1012 : vec4<f32> = u_xlat2;
  u_xlat2.x = dot(vec3<f32>(x_1012.x, x_1012.y, x_1012.z), vec3<f32>(0.212672904f, 0.715152204f, 0.072175004f));
  let x_1020 : vec4<f32> = u_xlat0;
  let x_1021 : vec3<f32> = vec3<f32>(x_1020.w, x_1020.y, x_1020.x);
  let x_1022 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_1021.x, x_1021.y, x_1022.z, x_1021.z);
  let x_1024 : vec4<f32> = u_xlat0;
  let x_1026 : vec4<f32> = u_xlat3;
  u_xlat3 = (-(x_1024) + x_1026);
  let x_1028 : vec3<f32> = u_xlat1;
  let x_1030 : vec4<f32> = u_xlat3;
  let x_1032 : vec4<f32> = u_xlat0;
  u_xlat0 = ((vec4<f32>(x_1028.x, x_1028.x, x_1028.x, x_1028.x) * x_1030) + x_1032);
  let x_1035 : f32 = u_xlat0.y;
  let x_1037 : f32 = u_xlat0.w;
  u_xlat1.x = min(x_1035, x_1037);
  let x_1041 : f32 = u_xlat0.x;
  let x_1043 : f32 = u_xlat1.x;
  u_xlat1.x = (x_1041 + -(x_1043));
  let x_1048 : f32 = u_xlat1.x;
  u_xlat7.x = ((x_1048 * 6.0f) + 0.0001f);
  let x_1056 : f32 = u_xlat0.y;
  let x_1059 : f32 = u_xlat0.w;
  u_xlat6.x = (-(x_1056) + x_1059);
  let x_1063 : f32 = u_xlat6.x;
  let x_1065 : f32 = u_xlat7.x;
  u_xlat6.x = (x_1063 / x_1065);
  let x_1069 : f32 = u_xlat6.x;
  let x_1071 : f32 = u_xlat0.z;
  u_xlat6.x = (x_1069 + x_1071);
  let x_1075 : f32 = u_xlat6.x;
  u_xlat3.x = abs(x_1075);
  let x_1079 : f32 = u_xlat3.x;
  let x_1081 : f32 = x_16.x_HueSatCon.x;
  u_xlat14.x = (x_1079 + x_1081);
  u_xlat2.y = 0.0f;
  u_xlat14.y = 0.0f;
  let x_1096 : vec2<f32> = u_xlat14;
  let x_1099 : f32 = x_16.x_GlobalMipBias.x;
  let x_1100 : vec4<f32> = textureSampleBias(x_CurveHueVsHue, sampler_LinearClamp, x_1096, x_1099);
  u_xlat6.x = x_1100.x;
  let x_1107 : vec4<f32> = u_xlat2;
  let x_1110 : f32 = x_16.x_GlobalMipBias.x;
  let x_1111 : vec4<f32> = textureSampleBias(x_CurveLumVsSat, sampler_LinearClamp, vec2<f32>(x_1107.x, x_1107.y), x_1110);
  u_xlat6.y = x_1111.x;
  let x_1114 : vec3<f32> = u_xlat6;
  let x_1115 : vec2<f32> = vec2<f32>(x_1114.x, x_1114.y);
  let x_1116 : vec3<f32> = u_xlat6;
  u_xlat6 = vec3<f32>(x_1115.x, x_1115.y, x_1116.z);
  let x_1118 : vec3<f32> = u_xlat6;
  let x_1122 : vec2<f32> = clamp(vec2<f32>(x_1118.x, x_1118.y), vec2<f32>(0.0f, 0.0f), vec2<f32>(1.0f, 1.0f));
  let x_1123 : vec3<f32> = u_xlat6;
  u_xlat6 = vec3<f32>(x_1122.x, x_1122.y, x_1123.z);
  let x_1126 : f32 = u_xlat6.x;
  u_xlat6.x = (x_1126 + -0.5f);
  let x_1130 : f32 = u_xlat6.x;
  let x_1132 : f32 = u_xlat14.x;
  u_xlat6.x = (x_1130 + x_1132);
  let x_1137 : f32 = u_xlat6.x;
  u_xlatb18 = (1.0f < x_1137);
  let x_1139 : vec3<f32> = u_xlat6;
  let x_1142 : vec2<f32> = (vec2<f32>(x_1139.x, x_1139.x) + vec2<f32>(1.0f, -1.0f));
  let x_1143 : vec3<f32> = u_xlat7;
  u_xlat7 = vec3<f32>(x_1142.x, x_1142.y, x_1143.z);
  let x_1145 : bool = u_xlatb18;
  if (x_1145) {
    let x_1150 : f32 = u_xlat7.y;
    x_1146 = x_1150;
  } else {
    let x_1153 : f32 = u_xlat6.x;
    x_1146 = x_1153;
  }
  let x_1154 : f32 = x_1146;
  u_xlat18 = x_1154;
  let x_1157 : f32 = u_xlat6.x;
  u_xlatb6 = (x_1157 < 0.0f);
  let x_1159 : bool = u_xlatb6;
  if (x_1159) {
    let x_1164 : f32 = u_xlat7.x;
    x_1160 = x_1164;
  } else {
    let x_1166 : f32 = u_xlat18;
    x_1160 = x_1166;
  }
  let x_1167 : f32 = x_1160;
  u_xlat6.x = x_1167;
  let x_1169 : vec3<f32> = u_xlat6;
  u_xlat7 = (vec3<f32>(x_1169.x, x_1169.x, x_1169.x) + vec3<f32>(1.0f, 0.666666687f, 0.333333343f));
  let x_1174 : vec3<f32> = u_xlat7;
  u_xlat7 = fract(x_1174);
  let x_1176 : vec3<f32> = u_xlat7;
  u_xlat7 = ((x_1176 * vec3<f32>(6.0f, 6.0f, 6.0f)) + vec3<f32>(-3.0f, -3.0f, -3.0f));
  let x_1182 : vec3<f32> = u_xlat7;
  u_xlat7 = (abs(x_1182) + vec3<f32>(-1.0f, -1.0f, -1.0f));
  let x_1185 : vec3<f32> = u_xlat7;
  u_xlat7 = clamp(x_1185, vec3<f32>(0.0f, 0.0f, 0.0f), vec3<f32>(1.0f, 1.0f, 1.0f));
  let x_1189 : vec3<f32> = u_xlat7;
  u_xlat7 = (x_1189 + vec3<f32>(-1.0f, -1.0f, -1.0f));
  let x_1192 : f32 = u_xlat0.x;
  u_xlat6.x = (x_1192 + 0.0001f);
  let x_1197 : f32 = u_xlat1.x;
  let x_1199 : f32 = u_xlat6.x;
  u_xlat15.x = (x_1197 / x_1199);
  let x_1202 : vec2<f32> = u_xlat15;
  let x_1204 : vec3<f32> = u_xlat7;
  u_xlat1 = ((vec3<f32>(x_1202.x, x_1202.x, x_1202.x) * x_1204) + vec3<f32>(1.0f, 1.0f, 1.0f));
  let x_1207 : vec4<f32> = u_xlat0;
  let x_1209 : vec3<f32> = u_xlat1;
  let x_1210 : vec3<f32> = (vec3<f32>(x_1207.x, x_1207.x, x_1207.x) * x_1209);
  let x_1211 : vec4<f32> = u_xlat2;
  u_xlat2 = vec4<f32>(x_1210.x, x_1210.y, x_1210.z, x_1211.w);
  let x_1213 : vec4<f32> = u_xlat2;
  u_xlat6.x = dot(vec3<f32>(x_1213.x, x_1213.y, x_1213.z), vec3<f32>(0.272228986f, 0.674081981f, 0.053689498f));
  let x_1217 : vec4<f32> = u_xlat0;
  let x_1219 : vec3<f32> = u_xlat1;
  let x_1221 : vec3<f32> = u_xlat6;
  u_xlat1 = ((vec3<f32>(x_1217.x, x_1217.x, x_1217.x) * x_1219) + -(vec3<f32>(x_1221.x, x_1221.x, x_1221.x)));
  u_xlat3.y = 0.0f;
  u_xlat15.y = 0.0f;
  let x_1231 : vec4<f32> = u_xlat3;
  let x_1234 : f32 = x_16.x_GlobalMipBias.x;
  let x_1235 : vec4<f32> = textureSampleBias(x_CurveHueVsSat, sampler_LinearClamp, vec2<f32>(x_1231.x, x_1231.y), x_1234);
  u_xlat0.x = x_1235.x;
  let x_1242 : vec2<f32> = u_xlat15;
  let x_1244 : f32 = x_16.x_GlobalMipBias.x;
  let x_1245 : vec4<f32> = textureSampleBias(x_CurveSatVsSat, sampler_LinearClamp, x_1242, x_1244);
  u_xlat0.w = x_1245.x;
  let x_1248 : vec4<f32> = u_xlat0;
  let x_1249 : vec2<f32> = vec2<f32>(x_1248.x, x_1248.w);
  let x_1250 : vec4<f32> = u_xlat0;
  u_xlat0 = vec4<f32>(x_1249.x, x_1250.y, x_1250.z, x_1249.y);
  let x_1252 : vec4<f32> = u_xlat0;
  let x_1256 : vec2<f32> = clamp(vec2<f32>(x_1252.x, x_1252.w), vec2<f32>(0.0f, 0.0f), vec2<f32>(1.0f, 1.0f));
  let x_1257 : vec4<f32> = u_xlat0;
  u_xlat0 = vec4<f32>(x_1256.x, x_1257.y, x_1257.z, x_1256.y);
  let x_1260 : f32 = u_xlat0.x;
  let x_1262 : f32 = u_xlat0.x;
  u_xlat0.x = (x_1260 + x_1262);
  let x_1265 : vec4<f32> = u_xlat0;
  let x_1267 : vec4<f32> = u_xlat0;
  u_xlat0.x = dot(vec2<f32>(x_1265.w, x_1265.w), vec2<f32>(x_1267.x, x_1267.x));
  let x_1272 : f32 = u_xlat0.x;
  let x_1274 : f32 = u_xlat6.y;
  u_xlat0.x = (x_1272 * x_1274);
  let x_1278 : vec4<f32> = x_16.x_HueSatCon;
  let x_1280 : vec4<f32> = u_xlat0;
  u_xlat0.x = dot(vec2<f32>(x_1278.y, x_1278.y), vec2<f32>(x_1280.x, x_1280.x));
  let x_1284 : vec4<f32> = u_xlat0;
  let x_1286 : vec3<f32> = u_xlat1;
  let x_1288 : vec3<f32> = u_xlat6;
  let x_1290 : vec3<f32> = ((vec3<f32>(x_1284.x, x_1284.x, x_1284.x) * x_1286) + vec3<f32>(x_1288.x, x_1288.x, x_1288.x));
  let x_1291 : vec4<f32> = u_xlat0;
  u_xlat0 = vec4<f32>(x_1290.x, x_1290.y, x_1290.z, x_1291.w);
  let x_1294 : f32 = u_xlat0.y;
  let x_1296 : f32 = u_xlat0.x;
  u_xlat18 = max(x_1294, x_1296);
  let x_1299 : f32 = u_xlat0.z;
  let x_1300 : f32 = u_xlat18;
  u_xlat18 = max(x_1299, x_1300);
  let x_1302 : f32 = u_xlat18;
  u_xlat18 = (x_1302 + 1.0f);
  let x_1304 : f32 = u_xlat18;
  u_xlat18 = (1.0f / x_1304);
  let x_1306 : vec4<f32> = u_xlat0;
  let x_1308 : f32 = u_xlat18;
  let x_1313 : vec3<f32> = ((vec3<f32>(x_1306.x, x_1306.y, x_1306.z) * vec3<f32>(x_1308, x_1308, x_1308)) + vec3<f32>(0.00390625f, 0.00390625f, 0.00390625f));
  let x_1314 : vec4<f32> = u_xlat0;
  u_xlat0 = vec4<f32>(x_1313.x, x_1313.y, x_1313.z, x_1314.w);
  u_xlat0.w = 0.0f;
  let x_1321 : vec4<f32> = u_xlat0;
  let x_1324 : f32 = x_16.x_GlobalMipBias.x;
  let x_1325 : vec4<f32> = textureSampleBias(x_CurveMaster, sampler_LinearClamp, vec2<f32>(x_1321.x, x_1321.w), x_1324);
  u_xlat1.x = x_1325.x;
  let x_1329 : f32 = u_xlat1.x;
  u_xlat1.x = x_1329;
  let x_1332 : f32 = u_xlat1.x;
  u_xlat1.x = clamp(x_1332, 0.0f, 1.0f);
  let x_1338 : vec4<f32> = u_xlat0;
  let x_1341 : f32 = x_16.x_GlobalMipBias.x;
  let x_1342 : vec4<f32> = textureSampleBias(x_CurveMaster, sampler_LinearClamp, vec2<f32>(x_1338.y, x_1338.w), x_1341);
  u_xlat7.x = x_1342.x;
  let x_1348 : vec4<f32> = u_xlat0;
  let x_1351 : f32 = x_16.x_GlobalMipBias.x;
  let x_1352 : vec4<f32> = textureSampleBias(x_CurveMaster, sampler_LinearClamp, vec2<f32>(x_1348.z, x_1348.w), x_1351);
  u_xlat7.y = x_1352.x;
  let x_1355 : vec3<f32> = u_xlat7;
  let x_1356 : vec2<f32> = vec2<f32>(x_1355.x, x_1355.y);
  let x_1357 : vec3<f32> = u_xlat1;
  u_xlat1 = vec3<f32>(x_1357.x, x_1356.x, x_1356.y);
  let x_1359 : vec3<f32> = u_xlat1;
  let x_1363 : vec2<f32> = clamp(vec2<f32>(x_1359.y, x_1359.z), vec2<f32>(0.0f, 0.0f), vec2<f32>(1.0f, 1.0f));
  let x_1364 : vec3<f32> = u_xlat1;
  u_xlat1 = vec3<f32>(x_1364.x, x_1363.x, x_1363.y);
  let x_1366 : vec3<f32> = u_xlat1;
  let x_1367 : vec3<f32> = (x_1366 + vec3<f32>(0.00390625f, 0.00390625f, 0.00390625f));
  let x_1368 : vec4<f32> = u_xlat0;
  u_xlat0 = vec4<f32>(x_1367.x, x_1367.y, x_1367.z, x_1368.w);
  u_xlat0.w = 0.0f;
  let x_1375 : vec4<f32> = u_xlat0;
  let x_1378 : f32 = x_16.x_GlobalMipBias.x;
  let x_1379 : vec4<f32> = textureSampleBias(x_CurveRed, sampler_LinearClamp, vec2<f32>(x_1375.x, x_1375.w), x_1378);
  u_xlat1.x = x_1379.x;
  let x_1383 : f32 = u_xlat1.x;
  u_xlat1.x = x_1383;
  let x_1386 : f32 = u_xlat1.x;
  u_xlat1.x = clamp(x_1386, 0.0f, 1.0f);
  let x_1393 : vec4<f32> = u_xlat0;
  let x_1396 : f32 = x_16.x_GlobalMipBias.x;
  let x_1397 : vec4<f32> = textureSampleBias(x_CurveGreen, sampler_LinearClamp, vec2<f32>(x_1393.y, x_1393.w), x_1396);
  u_xlat7.x = x_1397.x;
  let x_1404 : vec4<f32> = u_xlat0;
  let x_1407 : f32 = x_16.x_GlobalMipBias.x;
  let x_1408 : vec4<f32> = textureSampleBias(x_CurveBlue, sampler_LinearClamp, vec2<f32>(x_1404.z, x_1404.w), x_1407);
  u_xlat7.y = x_1408.x;
  let x_1411 : vec3<f32> = u_xlat7;
  let x_1412 : vec2<f32> = vec2<f32>(x_1411.x, x_1411.y);
  let x_1413 : vec3<f32> = u_xlat1;
  u_xlat1 = vec3<f32>(x_1413.x, x_1412.x, x_1412.y);
  let x_1415 : vec3<f32> = u_xlat1;
  let x_1419 : vec2<f32> = clamp(vec2<f32>(x_1415.y, x_1415.z), vec2<f32>(0.0f, 0.0f), vec2<f32>(1.0f, 1.0f));
  let x_1420 : vec3<f32> = u_xlat1;
  u_xlat1 = vec3<f32>(x_1420.x, x_1419.x, x_1419.y);
  let x_1423 : f32 = u_xlat1.y;
  let x_1425 : f32 = u_xlat1.x;
  u_xlat0.x = max(x_1423, x_1425);
  let x_1429 : f32 = u_xlat1.z;
  let x_1431 : f32 = u_xlat0.x;
  u_xlat0.x = max(x_1429, x_1431);
  let x_1435 : f32 = u_xlat0.x;
  u_xlat0.x = (-(x_1435) + 1.0f);
  let x_1440 : f32 = u_xlat0.x;
  u_xlat0.x = (1.0f / x_1440);
  let x_1443 : vec4<f32> = u_xlat0;
  let x_1445 : vec3<f32> = u_xlat1;
  let x_1446 : vec3<f32> = (vec3<f32>(x_1443.x, x_1443.x, x_1443.x) * x_1445);
  let x_1447 : vec4<f32> = u_xlat0;
  u_xlat0 = vec4<f32>(x_1446.x, x_1446.y, x_1446.z, x_1447.w);
  let x_1449 : vec4<f32> = u_xlat0;
  let x_1451 : vec3<f32> = max(vec3<f32>(x_1449.x, x_1449.y, x_1449.z), vec3<f32>(0.0f, 0.0f, 0.0f));
  let x_1452 : vec4<f32> = u_xlat0;
  u_xlat0 = vec4<f32>(x_1451.x, x_1451.y, x_1451.z, x_1452.w);
  let x_1458 : vec4<f32> = u_xlat0;
  u_xlat7.x = dot(vec3<f32>(0.695452213f, 0.140678704f, 0.163869068f), vec3<f32>(x_1458.x, x_1458.y, x_1458.z));
  let x_1466 : vec4<f32> = u_xlat0;
  u_xlat7.y = dot(vec3<f32>(0.044794563f, 0.859671116f, 0.095534317f), vec3<f32>(x_1466.x, x_1466.y, x_1466.z));
  let x_1474 : vec4<f32> = u_xlat0;
  u_xlat7.z = dot(vec3<f32>(-0.005525883f, 0.00402521f, 1.001500726f), vec3<f32>(x_1474.x, x_1474.y, x_1474.z));
  let x_1478 : vec3<f32> = u_xlat7;
  let x_1481 : vec3<f32> = u_xlat7;
  let x_1483 : vec3<f32> = (-(vec3<f32>(x_1478.y, x_1478.x, x_1478.z)) + vec3<f32>(x_1481.z, x_1481.y, x_1481.x));
  let x_1484 : vec4<f32> = u_xlat0;
  u_xlat0 = vec4<f32>(x_1483.x, x_1483.y, x_1483.z, x_1484.w);
  let x_1486 : vec4<f32> = u_xlat0;
  let x_1488 : vec3<f32> = u_xlat7;
  let x_1490 : vec2<f32> = (vec2<f32>(x_1486.x, x_1486.y) * vec2<f32>(x_1488.z, x_1488.y));
  let x_1491 : vec4<f32> = u_xlat0;
  u_xlat0 = vec4<f32>(x_1490.x, x_1490.y, x_1491.z, x_1491.w);
  let x_1494 : f32 = u_xlat0.y;
  let x_1496 : f32 = u_xlat0.x;
  u_xlat0.x = (x_1494 + x_1496);
  let x_1500 : f32 = u_xlat7.x;
  let x_1502 : f32 = u_xlat0.z;
  let x_1505 : f32 = u_xlat0.x;
  u_xlat0.x = ((x_1500 * x_1502) + x_1505);
  let x_1509 : f32 = u_xlat0.x;
  u_xlat0.x = max(x_1509, 0.0f);
  let x_1513 : f32 = u_xlat0.x;
  u_xlat0.x = sqrt(x_1513);
  let x_1517 : f32 = u_xlat7.y;
  let x_1519 : f32 = u_xlat7.z;
  u_xlat6.x = (x_1517 + x_1519);
  let x_1523 : f32 = u_xlat7.x;
  let x_1525 : f32 = u_xlat6.x;
  u_xlat6.x = (x_1523 + x_1525);
  let x_1529 : f32 = u_xlat0.x;
  let x_1533 : f32 = u_xlat6.x;
  u_xlat0.x = ((x_1529 * 1.75f) + x_1533);
  let x_1537 : f32 = u_xlat0.x;
  u_xlat6.x = (x_1537 * 0.333333343f);
  let x_1542 : f32 = u_xlat6.x;
  u_xlat6.x = (0.079999998f / x_1542);
  let x_1546 : f32 = u_xlat7.y;
  let x_1548 : f32 = u_xlat7.x;
  u_xlat12 = min(x_1546, x_1548);
  let x_1551 : f32 = u_xlat7.z;
  let x_1552 : f32 = u_xlat12;
  u_xlat12 = min(x_1551, x_1552);
  let x_1554 : f32 = u_xlat12;
  u_xlat12 = max(x_1554, 0.0001f);
  let x_1557 : f32 = u_xlat7.y;
  let x_1559 : f32 = u_xlat7.x;
  u_xlat18 = max(x_1557, x_1559);
  let x_1562 : f32 = u_xlat7.z;
  let x_1563 : f32 = u_xlat18;
  u_xlat18 = max(x_1562, x_1563);
  let x_1565 : f32 = u_xlat18;
  let x_1569 : vec2<f32> = max(vec2<f32>(x_1565, x_1565), vec2<f32>(0.0001f, 0.01f));
  let x_1570 : vec4<f32> = u_xlat2;
  u_xlat2 = vec4<f32>(x_1569.x, x_1569.y, x_1570.z, x_1570.w);
  let x_1572 : f32 = u_xlat12;
  let x_1575 : f32 = u_xlat2.x;
  u_xlat12 = (-(x_1572) + x_1575);
  let x_1577 : f32 = u_xlat12;
  let x_1579 : f32 = u_xlat2.y;
  u_xlat6.y = (x_1577 / x_1579);
  let x_1582 : vec3<f32> = u_xlat6;
  let x_1586 : vec2<f32> = (vec2<f32>(x_1582.x, x_1582.y) + vec2<f32>(-0.5f, -0.400000006f));
  let x_1587 : vec3<f32> = u_xlat6;
  u_xlat6 = vec3<f32>(x_1586.x, x_1587.y, x_1586.y);
  let x_1590 : f32 = u_xlat6.z;
  u_xlat1.x = (x_1590 * 2.5f);
  let x_1595 : f32 = u_xlat6.z;
  u_xlatb18 = (x_1595 >= 0.0f);
  let x_1597 : bool = u_xlatb18;
  u_xlat18 = select(-1.0f, 1.0f, x_1597);
  let x_1600 : f32 = u_xlat1.x;
  u_xlat1.x = (-(abs(x_1600)) + 1.0f);
  let x_1606 : f32 = u_xlat1.x;
  u_xlat1.x = max(x_1606, 0.0f);
  let x_1610 : f32 = u_xlat1.x;
  let x_1613 : f32 = u_xlat1.x;
  u_xlat1.x = ((-(x_1610) * x_1613) + 1.0f);
  let x_1617 : f32 = u_xlat18;
  let x_1619 : f32 = u_xlat1.x;
  u_xlat18 = ((x_1617 * x_1619) + 1.0f);
  let x_1622 : f32 = u_xlat18;
  u_xlat18 = (x_1622 * 0.025f);
  let x_1626 : f32 = u_xlat6.x;
  let x_1627 : f32 = u_xlat18;
  u_xlat6.x = (x_1626 * x_1627);
  let x_1631 : f32 = u_xlat0.x;
  u_xlatb1.x = (x_1631 >= 0.479999989f);
  let x_1637 : f32 = u_xlat0.x;
  u_xlatb0.x = (0.159999996f >= x_1637);
  let x_1641 : bool = u_xlatb1.x;
  if (x_1641) {
    x_1642 = 0.0f;
  } else {
    let x_1647 : f32 = u_xlat6.x;
    x_1642 = x_1647;
  }
  let x_1648 : f32 = x_1642;
  u_xlat6.x = x_1648;
  let x_1651 : bool = u_xlatb0.x;
  if (x_1651) {
    let x_1655 : f32 = u_xlat18;
    x_1652 = x_1655;
  } else {
    let x_1658 : f32 = u_xlat6.x;
    x_1652 = x_1658;
  }
  let x_1659 : f32 = x_1652;
  u_xlat0.x = x_1659;
  let x_1662 : f32 = u_xlat0.x;
  u_xlat0.x = (x_1662 + 1.0f);
  let x_1665 : vec4<f32> = u_xlat0;
  let x_1667 : vec3<f32> = u_xlat7;
  let x_1668 : vec3<f32> = (vec3<f32>(x_1665.x, x_1665.x, x_1665.x) * x_1667);
  let x_1669 : vec4<f32> = u_xlat2;
  u_xlat2 = vec4<f32>(x_1669.x, x_1668.x, x_1668.y, x_1668.z);
  let x_1672 : f32 = u_xlat7.x;
  let x_1675 : f32 = u_xlat0.x;
  u_xlat6.x = ((-(x_1672) * x_1675) + 0.029999999f);
  let x_1681 : f32 = u_xlat7.y;
  let x_1683 : f32 = u_xlat0.x;
  let x_1686 : f32 = u_xlat2.w;
  u_xlat18 = ((x_1681 * x_1683) + -(x_1686));
  let x_1689 : f32 = u_xlat18;
  u_xlat18 = (x_1689 * 1.732050776f);
  let x_1693 : f32 = u_xlat2.y;
  let x_1696 : f32 = u_xlat2.z;
  u_xlat1.x = ((x_1693 * 2.0f) + -(x_1696));
  let x_1701 : f32 = u_xlat7.z;
  let x_1704 : f32 = u_xlat0.x;
  let x_1707 : f32 = u_xlat1.x;
  u_xlat0.x = ((-(x_1701) * x_1704) + x_1707);
  let x_1711 : f32 = u_xlat0.x;
  let x_1713 : f32 = u_xlat18;
  u_xlat1.x = max(abs(x_1711), abs(x_1713));
  let x_1718 : f32 = u_xlat1.x;
  u_xlat1.x = (1.0f / x_1718);
  let x_1722 : f32 = u_xlat0.x;
  let x_1724 : f32 = u_xlat18;
  u_xlat7.x = min(abs(x_1722), abs(x_1724));
  let x_1729 : f32 = u_xlat1.x;
  let x_1731 : f32 = u_xlat7.x;
  u_xlat1.x = (x_1729 * x_1731);
  let x_1735 : f32 = u_xlat1.x;
  let x_1737 : f32 = u_xlat1.x;
  u_xlat7.x = (x_1735 * x_1737);
  let x_1742 : f32 = u_xlat7.x;
  u_xlat13 = ((x_1742 * 0.0208351f) + -0.085133001f);
  let x_1748 : f32 = u_xlat7.x;
  let x_1749 : f32 = u_xlat13;
  u_xlat13 = ((x_1748 * x_1749) + 0.180141002f);
  let x_1754 : f32 = u_xlat7.x;
  let x_1755 : f32 = u_xlat13;
  u_xlat13 = ((x_1754 * x_1755) + -0.330299497f);
  let x_1760 : f32 = u_xlat7.x;
  let x_1761 : f32 = u_xlat13;
  u_xlat7.x = ((x_1760 * x_1761) + 0.999866009f);
  let x_1767 : f32 = u_xlat7.x;
  let x_1769 : f32 = u_xlat1.x;
  u_xlat13 = (x_1767 * x_1769);
  let x_1771 : f32 = u_xlat13;
  u_xlat13 = ((x_1771 * -2.0f) + 1.570796371f);
  let x_1777 : f32 = u_xlat0.x;
  let x_1779 : f32 = u_xlat18;
  u_xlatb19 = (abs(x_1777) < abs(x_1779));
  let x_1782 : bool = u_xlatb19;
  let x_1783 : f32 = u_xlat13;
  u_xlat13 = select(0.0f, x_1783, x_1782);
  let x_1786 : f32 = u_xlat0.x;
  let x_1787 : f32 = u_xlat18;
  u_xlat19 = min(x_1786, x_1787);
  let x_1790 : f32 = u_xlat0.x;
  let x_1791 : f32 = u_xlat18;
  u_xlat18 = max(x_1790, x_1791);
  let x_1794 : f32 = u_xlat0.x;
  let x_1796 : f32 = u_xlat0.x;
  u_xlatb0.x = (x_1794 < -(x_1796));
  let x_1801 : bool = u_xlatb0.x;
  u_xlat0.x = select(0.0f, -3.141592741f, x_1801);
  let x_1805 : f32 = u_xlat18;
  let x_1806 : f32 = u_xlat18;
  u_xlatb18 = (x_1805 >= -(x_1806));
  let x_1809 : f32 = u_xlat19;
  let x_1810 : f32 = u_xlat19;
  u_xlatb19 = (x_1809 < -(x_1810));
  let x_1813 : bool = u_xlatb18;
  let x_1814 : bool = u_xlatb19;
  u_xlatb18 = (x_1813 & x_1814);
  let x_1817 : f32 = u_xlat1.x;
  let x_1819 : f32 = u_xlat7.x;
  let x_1821 : f32 = u_xlat13;
  u_xlat1.x = ((x_1817 * x_1819) + x_1821);
  let x_1825 : f32 = u_xlat0.x;
  let x_1827 : f32 = u_xlat1.x;
  u_xlat0.x = (x_1825 + x_1827);
  let x_1830 : bool = u_xlatb18;
  if (x_1830) {
    let x_1835 : f32 = u_xlat0.x;
    x_1831 = -(x_1835);
  } else {
    let x_1839 : f32 = u_xlat0.x;
    x_1831 = x_1839;
  }
  let x_1840 : f32 = x_1831;
  u_xlat0.x = x_1840;
  let x_1842 : vec4<f32> = u_xlat2;
  let x_1844 : vec4<f32> = u_xlat2;
  let x_1846 : vec4<bool> = (vec4<f32>(x_1842.z, x_1842.w, x_1842.z, x_1842.z) == vec4<f32>(x_1844.y, x_1844.z, x_1844.y, x_1844.y));
  let x_1847 : vec2<bool> = vec2<bool>(x_1846.x, x_1846.y);
  let x_1848 : vec4<bool> = u_xlatb1;
  u_xlatb1 = vec4<bool>(x_1847.x, x_1847.y, x_1848.z, x_1848.w);
  let x_1851 : bool = u_xlatb1.y;
  let x_1853 : bool = u_xlatb1.x;
  u_xlatb18 = (x_1851 & x_1853);
  let x_1856 : f32 = u_xlat0.x;
  u_xlat0.x = (x_1856 * 57.295780182f);
  let x_1860 : bool = u_xlatb18;
  if (x_1860) {
    x_1861 = 0.0f;
  } else {
    let x_1866 : f32 = u_xlat0.x;
    x_1861 = x_1866;
  }
  let x_1867 : f32 = x_1861;
  u_xlat0.x = x_1867;
  let x_1870 : f32 = u_xlat0.x;
  u_xlatb18 = (x_1870 < 0.0f);
  let x_1873 : f32 = u_xlat0.x;
  u_xlat1.x = (x_1873 + 360.0f);
  let x_1877 : bool = u_xlatb18;
  if (x_1877) {
    let x_1882 : f32 = u_xlat1.x;
    x_1878 = x_1882;
  } else {
    let x_1885 : f32 = u_xlat0.x;
    x_1878 = x_1885;
  }
  let x_1886 : f32 = x_1878;
  u_xlat0.x = x_1886;
  let x_1890 : f32 = u_xlat0.x;
  u_xlatb18 = (180.0f < x_1890);
  let x_1892 : vec4<f32> = u_xlat0;
  let x_1896 : vec2<f32> = (vec2<f32>(x_1892.x, x_1892.x) + vec2<f32>(360.0f, -360.0f));
  let x_1897 : vec3<f32> = u_xlat1;
  u_xlat1 = vec3<f32>(x_1896.x, x_1896.y, x_1897.z);
  let x_1899 : bool = u_xlatb18;
  if (x_1899) {
    let x_1904 : f32 = u_xlat1.y;
    x_1900 = x_1904;
  } else {
    let x_1907 : f32 = u_xlat0.x;
    x_1900 = x_1907;
  }
  let x_1908 : f32 = x_1900;
  u_xlat18 = x_1908;
  let x_1910 : f32 = u_xlat0.x;
  u_xlatb0.x = (x_1910 < -180.0f);
  let x_1915 : bool = u_xlatb0.x;
  if (x_1915) {
    let x_1920 : f32 = u_xlat1.x;
    x_1916 = x_1920;
  } else {
    let x_1922 : f32 = u_xlat18;
    x_1916 = x_1922;
  }
  let x_1923 : f32 = x_1916;
  u_xlat0.x = x_1923;
  let x_1926 : f32 = u_xlat0.x;
  u_xlat0.x = (x_1926 * 0.014814815f);
  let x_1931 : f32 = u_xlat0.x;
  u_xlat0.x = (-(abs(x_1931)) + 1.0f);
  let x_1937 : f32 = u_xlat0.x;
  u_xlat0.x = max(x_1937, 0.0f);
  let x_1941 : f32 = u_xlat0.x;
  u_xlat18 = ((x_1941 * -2.0f) + 3.0f);
  let x_1945 : f32 = u_xlat0.x;
  let x_1947 : f32 = u_xlat0.x;
  u_xlat0.x = (x_1945 * x_1947);
  let x_1951 : f32 = u_xlat0.x;
  let x_1952 : f32 = u_xlat18;
  u_xlat0.x = (x_1951 * x_1952);
  let x_1956 : f32 = u_xlat0.x;
  let x_1958 : f32 = u_xlat0.x;
  u_xlat0.x = (x_1956 * x_1958);
  let x_1962 : f32 = u_xlat6.y;
  let x_1964 : f32 = u_xlat0.x;
  u_xlat0.x = (x_1962 * x_1964);
  let x_1968 : f32 = u_xlat6.x;
  let x_1970 : f32 = u_xlat0.x;
  u_xlat0.x = (x_1968 * x_1970);
  let x_1974 : f32 = u_xlat0.x;
  let x_1978 : f32 = u_xlat2.y;
  u_xlat2.x = ((x_1974 * 0.180000007f) + x_1978);
  let x_1981 : vec4<f32> = u_xlat2;
  u_xlat0.x = dot(vec3<f32>(1.451439261f, -0.236510754f, -0.214928567f), vec3<f32>(x_1981.x, x_1981.z, x_1981.w));
  let x_1985 : vec4<f32> = u_xlat2;
  u_xlat0.y = dot(vec3<f32>(-0.076553777f, 1.176229715f, -0.099675924f), vec3<f32>(x_1985.x, x_1985.z, x_1985.w));
  let x_1989 : vec4<f32> = u_xlat2;
  u_xlat0.z = dot(vec3<f32>(0.008316148f, -0.00603244966f, 0.997716308f), vec3<f32>(x_1989.x, x_1989.z, x_1989.w));
  let x_1993 : vec4<f32> = u_xlat0;
  let x_1995 : vec3<f32> = max(vec3<f32>(x_1993.x, x_1993.y, x_1993.z), vec3<f32>(0.0f, 0.0f, 0.0f));
  let x_1996 : vec4<f32> = u_xlat0;
  u_xlat0 = vec4<f32>(x_1995.x, x_1995.y, x_1995.z, x_1996.w);
  let x_1998 : vec4<f32> = u_xlat0;
  u_xlat18 = dot(vec3<f32>(x_1998.x, x_1998.y, x_1998.z), vec3<f32>(0.272228986f, 0.674081981f, 0.053689498f));
  let x_2001 : f32 = u_xlat18;
  let x_2004 : vec4<f32> = u_xlat0;
  let x_2006 : vec3<f32> = (-(vec3<f32>(x_2001, x_2001, x_2001)) + vec3<f32>(x_2004.x, x_2004.y, x_2004.z));
  let x_2007 : vec4<f32> = u_xlat0;
  u_xlat0 = vec4<f32>(x_2006.x, x_2006.y, x_2006.z, x_2007.w);
  let x_2009 : vec4<f32> = u_xlat0;
  let x_2014 : f32 = u_xlat18;
  let x_2016 : vec3<f32> = ((vec3<f32>(x_2009.x, x_2009.y, x_2009.z) * vec3<f32>(0.959999979f, 0.959999979f, 0.959999979f)) + vec3<f32>(x_2014, x_2014, x_2014));
  let x_2017 : vec4<f32> = u_xlat0;
  u_xlat0 = vec4<f32>(x_2016.x, x_2016.y, x_2016.z, x_2017.w);
  let x_2019 : vec4<f32> = u_xlat0;
  u_xlat1 = (vec3<f32>(x_2019.x, x_2019.y, x_2019.z) + vec3<f32>(0.024578599f, 0.024578599f, 0.024578599f));
  let x_2024 : vec4<f32> = u_xlat0;
  let x_2026 : vec3<f32> = u_xlat1;
  u_xlat1 = ((vec3<f32>(x_2024.x, x_2024.y, x_2024.z) * x_2026) + vec3<f32>(-0.000090537f, -0.000090537f, -0.000090537f));
  let x_2031 : vec4<f32> = u_xlat0;
  let x_2038 : vec3<f32> = ((vec3<f32>(x_2031.x, x_2031.y, x_2031.z) * vec3<f32>(0.983729005f, 0.983729005f, 0.983729005f)) + vec3<f32>(0.432951003f, 0.432951003f, 0.432951003f));
  let x_2039 : vec4<f32> = u_xlat2;
  u_xlat2 = vec4<f32>(x_2038.x, x_2038.y, x_2038.z, x_2039.w);
  let x_2041 : vec4<f32> = u_xlat0;
  let x_2043 : vec4<f32> = u_xlat2;
  let x_2048 : vec3<f32> = ((vec3<f32>(x_2041.x, x_2041.y, x_2041.z) * vec3<f32>(x_2043.x, x_2043.y, x_2043.z)) + vec3<f32>(0.238080993f, 0.238080993f, 0.238080993f));
  let x_2049 : vec4<f32> = u_xlat0;
  u_xlat0 = vec4<f32>(x_2048.x, x_2048.y, x_2048.z, x_2049.w);
  let x_2051 : vec3<f32> = u_xlat1;
  let x_2052 : vec4<f32> = u_xlat0;
  let x_2054 : vec3<f32> = (x_2051 / vec3<f32>(x_2052.x, x_2052.y, x_2052.z));
  let x_2055 : vec4<f32> = u_xlat0;
  u_xlat0 = vec4<f32>(x_2054.x, x_2054.y, x_2054.z, x_2055.w);
  let x_2061 : vec4<f32> = u_xlat0;
  u_xlat1.z = dot(vec3<f32>(-0.00557464967f, 0.0040607336f, 1.010339141f), vec3<f32>(x_2061.x, x_2061.y, x_2061.z));
  let x_2069 : vec4<f32> = u_xlat0;
  u_xlat1.x = dot(vec3<f32>(0.662454188f, 0.134004205f, 0.156187683f), vec3<f32>(x_2069.x, x_2069.y, x_2069.z));
  let x_2077 : vec4<f32> = u_xlat0;
  u_xlat1.y = dot(vec3<f32>(0.272228718f, 0.674081743f, 0.053689517f), vec3<f32>(x_2077.x, x_2077.y, x_2077.z));
  let x_2081 : vec3<f32> = u_xlat1;
  u_xlat0.x = dot(x_2081, vec3<f32>(1.0f, 1.0f, 1.0f));
  let x_2085 : f32 = u_xlat0.x;
  u_xlat0.x = max(x_2085, 0.0001f);
  let x_2088 : vec3<f32> = u_xlat1;
  let x_2090 : vec4<f32> = u_xlat0;
  let x_2092 : vec2<f32> = (vec2<f32>(x_2088.x, x_2088.y) / vec2<f32>(x_2090.x, x_2090.x));
  let x_2093 : vec4<f32> = u_xlat0;
  u_xlat0 = vec4<f32>(x_2092.x, x_2092.y, x_2093.z, x_2093.w);
  let x_2096 : f32 = u_xlat1.y;
  u_xlat18 = max(x_2096, 0.0f);
  let x_2098 : f32 = u_xlat18;
  u_xlat18 = min(x_2098, 65504.0f);
  let x_2100 : f32 = u_xlat18;
  u_xlat18 = log2(x_2100);
  let x_2102 : f32 = u_xlat18;
  u_xlat18 = (x_2102 * 0.981100023f);
  let x_2105 : f32 = u_xlat18;
  u_xlat1.y = exp2(x_2105);
  let x_2109 : f32 = u_xlat0.x;
  u_xlat18 = (-(x_2109) + 1.0f);
  let x_2113 : f32 = u_xlat0.y;
  let x_2115 : f32 = u_xlat18;
  u_xlat0.z = (-(x_2113) + x_2115);
  let x_2119 : f32 = u_xlat0.y;
  u_xlat6.x = max(x_2119, 0.0001f);
  let x_2123 : f32 = u_xlat1.y;
  let x_2125 : f32 = u_xlat6.x;
  u_xlat6.x = (x_2123 / x_2125);
  let x_2128 : vec3<f32> = u_xlat6;
  let x_2130 : vec4<f32> = u_xlat0;
  let x_2132 : vec2<f32> = (vec2<f32>(x_2128.x, x_2128.x) * vec2<f32>(x_2130.x, x_2130.z));
  let x_2133 : vec3<f32> = u_xlat1;
  u_xlat1 = vec3<f32>(x_2132.x, x_2133.y, x_2132.y);
  let x_2139 : vec3<f32> = u_xlat1;
  u_xlat0.x = dot(vec3<f32>(1.641023397f, -0.324803293f, -0.236424699f), x_2139);
  let x_2146 : vec3<f32> = u_xlat1;
  u_xlat0.y = dot(vec3<f32>(-0.663662851f, 1.61533165f, 0.016756348f), x_2146);
  let x_2153 : vec3<f32> = u_xlat1;
  u_xlat0.z = dot(vec3<f32>(0.011721894f, -0.008284442f, 0.988394856f), x_2153);
  let x_2156 : vec4<f32> = u_xlat0;
  u_xlat18 = dot(vec3<f32>(x_2156.x, x_2156.y, x_2156.z), vec3<f32>(0.272228986f, 0.674081981f, 0.053689498f));
  let x_2159 : f32 = u_xlat18;
  let x_2162 : vec4<f32> = u_xlat0;
  let x_2164 : vec3<f32> = (-(vec3<f32>(x_2159, x_2159, x_2159)) + vec3<f32>(x_2162.x, x_2162.y, x_2162.z));
  let x_2165 : vec4<f32> = u_xlat0;
  u_xlat0 = vec4<f32>(x_2164.x, x_2164.y, x_2164.z, x_2165.w);
  let x_2167 : vec4<f32> = u_xlat0;
  let x_2172 : f32 = u_xlat18;
  let x_2174 : vec3<f32> = ((vec3<f32>(x_2167.x, x_2167.y, x_2167.z) * vec3<f32>(0.930000007f, 0.930000007f, 0.930000007f)) + vec3<f32>(x_2172, x_2172, x_2172));
  let x_2175 : vec4<f32> = u_xlat0;
  u_xlat0 = vec4<f32>(x_2174.x, x_2174.y, x_2174.z, x_2175.w);
  let x_2177 : vec4<f32> = u_xlat0;
  u_xlat1.x = dot(vec3<f32>(0.662454188f, 0.134004205f, 0.156187683f), vec3<f32>(x_2177.x, x_2177.y, x_2177.z));
  let x_2181 : vec4<f32> = u_xlat0;
  u_xlat1.y = dot(vec3<f32>(0.272228718f, 0.674081743f, 0.053689517f), vec3<f32>(x_2181.x, x_2181.y, x_2181.z));
  let x_2185 : vec4<f32> = u_xlat0;
  u_xlat1.z = dot(vec3<f32>(-0.00557464967f, 0.0040607336f, 1.010339141f), vec3<f32>(x_2185.x, x_2185.y, x_2185.z));
  let x_2193 : vec3<f32> = u_xlat1;
  u_xlat0.x = dot(vec3<f32>(0.987223983f, -0.00611327f, 0.015953301f), x_2193);
  let x_2200 : vec3<f32> = u_xlat1;
  u_xlat0.y = dot(vec3<f32>(-0.00759836f, 1.001860023f, 0.0053302f), x_2200);
  let x_2207 : vec3<f32> = u_xlat1;
  u_xlat0.z = dot(vec3<f32>(0.00307257f, -0.00509595f, 1.081680059f), x_2207);
  let x_2216 : vec4<f32> = u_xlat0;
  SV_Target0.x = dot(vec3<f32>(3.240969896f, -1.537383199f, -0.498610765f), vec3<f32>(x_2216.x, x_2216.y, x_2216.z));
  let x_2225 : vec4<f32> = u_xlat0;
  SV_Target0.y = dot(vec3<f32>(-0.969243646f, 1.875967503f, 0.041555058f), vec3<f32>(x_2225.x, x_2225.y, x_2225.z));
  let x_2233 : vec4<f32> = u_xlat0;
  SV_Target0.z = dot(vec3<f32>(0.05563008f, -0.203976959f, 1.05697155f), vec3<f32>(x_2233.x, x_2233.y, x_2233.z));
  SV_Target0.w = 1.0f;
  return;
}

struct main_out {
  @location(0)
  SV_Target0_1 : vec4<f32>,
}

@fragment
fn main(@location(0) vs_TEXCOORD0_param : vec2<f32>, @builtin(position) gl_FragCoord_param : vec4<f32>) -> main_out {
  vs_TEXCOORD0 = vs_TEXCOORD0_param;
  gl_FragCoord = gl_FragCoord_param;
  main_1();
  return main_out(SV_Target0);
}

