struct PGlobals {
  x_ScaledScreenParams : vec4<f32>,
  x_GlobalMipBias : vec2<f32>,
  x_AlphaToMaskAvailable : f32,
  @size(4)
  padding : u32,
  x_MainLightPosition : vec4<f32>,
  x_MainLightColor : vec4<f32>,
  x_AmbientOcclusionParam : vec4<f32>,
  x_AdditionalLightsCount : vec4<f32>,
  x_WorldSpaceCameraPos : vec3<f32>,
  @size(4)
  padding_1 : u32,
  x_ProjectionParams : vec4<f32>,
  x_ScreenParams : vec4<f32>,
  unity_OrthoParams : vec4<f32>,
  x_ScaleBiasRt : vec4<f32>,
  unity_FogParams : vec4<f32>,
  unity_FogColor : vec4<f32>,
  unity_MatrixV : mat4x4<f32>,
}

type Arr = array<vec4<f32>, 2u>;

struct UnityPerDraw {
  unity_ObjectToWorld : mat4x4<f32>,
  unity_WorldToObject : mat4x4<f32>,
  unity_LODFade : vec4<f32>,
  unity_WorldTransformParams : vec4<f32>,
  unity_RenderingLayer : vec4<f32>,
  unity_LightData : vec4<f32>,
  unity_LightIndices : Arr,
  unity_ProbesOcclusion : vec4<f32>,
  unity_SpecCube0_HDR : vec4<f32>,
  unity_SpecCube1_HDR : vec4<f32>,
  unity_SpecCube0_BoxMax : vec4<f32>,
  unity_SpecCube0_BoxMin : vec4<f32>,
  unity_SpecCube0_ProbePosition : vec4<f32>,
  unity_SpecCube1_BoxMax : vec4<f32>,
  unity_SpecCube1_BoxMin : vec4<f32>,
  unity_SpecCube1_ProbePosition : vec4<f32>,
  unity_LightmapST : vec4<f32>,
  unity_DynamicLightmapST : vec4<f32>,
  unity_SHAr : vec4<f32>,
  unity_SHAg : vec4<f32>,
  unity_SHAb : vec4<f32>,
  unity_SHBr : vec4<f32>,
  unity_SHBg : vec4<f32>,
  unity_SHBb : vec4<f32>,
  unity_SHC : vec4<f32>,
  unity_RendererBounds_Min : vec4<f32>,
  unity_RendererBounds_Max : vec4<f32>,
  unity_MatrixPreviousM : mat4x4<f32>,
  unity_MatrixPreviousMI : mat4x4<f32>,
  unity_MotionVectorsParams : vec4<f32>,
  unity_SpriteColor : vec4<f32>,
  unity_SpriteProps : vec4<f32>,
}

struct UnityPerMaterial {
  Texture2D_B222E8F_TexelSize : vec4<f32>,
  Color_C30C7CA3 : vec4<f32>,
  Texture2D_D9BFD5F1_TexelSize : vec4<f32>,
}

type Arr_1 = array<mat4x4<f32>, 5u>;

struct MainLightShadows {
  x_MainLightWorldToShadow : Arr_1,
  x_CascadeShadowSplitSpheres0 : vec4<f32>,
  x_CascadeShadowSplitSpheres1 : vec4<f32>,
  x_CascadeShadowSplitSpheres2 : vec4<f32>,
  x_CascadeShadowSplitSpheres3 : vec4<f32>,
  x_CascadeShadowSplitSphereRadii : vec4<f32>,
  x_MainLightShadowOffset0 : vec4<f32>,
  x_MainLightShadowOffset1 : vec4<f32>,
  x_MainLightShadowParams : vec4<f32>,
  x_MainLightShadowmapSize : vec4<f32>,
}

struct strided_arr {
  @size(16)
  el : f32,
}

type Arr_2 = array<strided_arr, 8u>;

struct LightCookies {
  x_MainLightWorldToLight : mat4x4<f32>,
  x_AdditionalLightsCookieEnableBits : Arr_2,
  x_MainLightCookieTextureFormat : f32,
  x_AdditionalLightsCookieAtlasTextureFormat : f32,
}

type Arr_3 = array<vec4<f32>, 256u>;

type Arr_4 = array<vec4<f32>, 256u>;

type Arr_5 = array<vec4<f32>, 256u>;

type Arr_6 = array<vec4<f32>, 256u>;

type Arr_7 = array<vec4<f32>, 256u>;

struct strided_arr_1 {
  @size(16)
  el : f32,
}

type Arr_8 = array<strided_arr_1, 256u>;

type Arr_9 = array<vec4<f32>, 256u>;

type Arr_10 = array<strided_arr_1, 256u>;

struct AdditionalLights {
  x_AdditionalLightsPosition : Arr_9,
  x_AdditionalLightsColor : Arr_9,
  x_AdditionalLightsAttenuation : Arr_9,
  x_AdditionalLightsSpotDir : Arr_9,
  x_AdditionalLightsOcclusionProbes : Arr_9,
  x_AdditionalLightsLayerMasks : Arr_10,
}

type Arr_11 = array<mat4x4<f32>, 256u>;

struct AdditionalLightsCookies {
  x_AdditionalLightsWorldToLights : Arr_11,
  x_AdditionalLightsCookieAtlasUVRects : Arr_9,
  x_AdditionalLightsLightTypes : Arr_10,
}

var<private> gl_FragCoord : vec4<f32>;

var<private> vs_INTERP1 : vec3<f32>;

@group(1) @binding(0) var<uniform> x_90 : PGlobals;

var<private> vs_INTERP0 : vec3<f32>;

@group(1) @binding(2) var<uniform> x_145 : UnityPerDraw;

@group(0) @binding(6) var Texture2D_B222E8F : texture_2d<f32>;

@group(0) @binding(14) var samplerTexture2D_B222E8F : sampler;

var<private> vs_INTERP3 : vec4<f32>;

@group(1) @binding(6) var<uniform> x_199 : UnityPerMaterial;

@group(0) @binding(7) var Texture2D_D9BFD5F1 : texture_2d<f32>;

@group(0) @binding(15) var samplerTexture2D_D9BFD5F1 : sampler;

var<private> vs_INTERP4 : vec4<f32>;

@group(1) @binding(3) var<uniform> x_255 : MainLightShadows;

@group(0) @binding(3) var x_MainLightShadowmapTexture : texture_depth_2d;

@group(0) @binding(11) var sampler_MainLightShadowmapTexture : sampler_comparison;

var<private> vs_INTERP2 : vec4<f32>;

@group(0) @binding(1) var unity_Lightmap : texture_2d<f32>;

@group(0) @binding(9) var samplerunity_Lightmap : sampler;

var<private> vs_INTERP5 : vec2<f32>;

@group(0) @binding(2) var x_ScreenSpaceOcclusionTexture : texture_2d<f32>;

@group(0) @binding(10) var sampler_ScreenSpaceOcclusionTexture : sampler;

@group(1) @binding(4) var<uniform> x_3462 : LightCookies;

@group(0) @binding(4) var x_MainLightCookieTexture : texture_2d<f32>;

@group(0) @binding(12) var sampler_MainLightCookieTexture : sampler;

@group(0) @binding(0) var unity_SpecCube0 : texture_cube<f32>;

@group(0) @binding(8) var samplerunity_SpecCube0 : sampler;

@group(1) @binding(1) var<uniform> x_3894 : AdditionalLights;

@group(1) @binding(5) var<uniform> x_3999 : AdditionalLightsCookies;

@group(0) @binding(5) var x_AdditionalLightsCookieAtlasTexture : texture_2d<f32>;

@group(0) @binding(13) var sampler_AdditionalLightsCookieAtlasTexture : sampler;

var<private> SV_Target0 : vec4<f32>;

fn int_bitfieldInsert_i1_i1_i1_i1_(base : ptr<function, i32>, insert : ptr<function, i32>, offset_1 : ptr<function, i32>, bits : ptr<function, i32>) -> i32 {
  var mask : u32;
  let x_19 : i32 = *(bits);
  let x_23 : i32 = *(offset_1);
  mask = (~((4294967295u << bitcast<u32>(x_19))) << bitcast<u32>(x_23));
  let x_26 : i32 = *(base);
  let x_28 : u32 = mask;
  let x_31 : i32 = *(insert);
  let x_33 : i32 = *(offset_1);
  let x_36 : u32 = mask;
  return bitcast<i32>(((bitcast<u32>(x_26) & ~(x_28)) | ((bitcast<u32>(x_31) << bitcast<u32>(x_33)) & x_36)));
}

fn main_1() {
  var hlslcc_FragCoord : vec4<f32>;
  var u_xlat0 : vec3<f32>;
  var u_xlatb66 : bool;
  var u_xlat1 : vec3<f32>;
  var u_xlat67 : f32;
  var u_xlat2 : vec3<f32>;
  var x_133 : vec3<f32>;
  var u_xlat66 : f32;
  var u_xlat3 : vec4<f32>;
  var u_xlat4 : vec3<f32>;
  var u_xlat5 : vec4<f32>;
  var u_xlat6 : vec4<f32>;
  var u_xlat27 : vec3<f32>;
  var u_xlat7 : vec4<f32>;
  var u_xlat8 : vec4<f32>;
  var u_xlat9 : vec4<f32>;
  var u_xlatb6 : vec4<bool>;
  var u_xlatu66 : u32;
  var u_xlati66 : i32;
  var u_xlatb67 : bool;
  var txVec0 : vec3<f32>;
  var txVec1 : vec3<f32>;
  var txVec2 : vec3<f32>;
  var txVec3 : vec3<f32>;
  var u_xlatb68 : bool;
  var u_xlat51 : vec2<f32>;
  var u_xlat53 : vec2<f32>;
  var u_xlat10 : vec4<f32>;
  var u_xlat11 : vec4<f32>;
  var u_xlat12 : vec4<f32>;
  var u_xlat13 : vec4<f32>;
  var u_xlat14 : vec4<f32>;
  var u_xlat15 : vec4<f32>;
  var u_xlat68 : f32;
  var txVec4 : vec3<f32>;
  var u_xlat70 : f32;
  var txVec5 : vec3<f32>;
  var u_xlat72 : f32;
  var txVec6 : vec3<f32>;
  var txVec7 : vec3<f32>;
  var txVec8 : vec3<f32>;
  var txVec9 : vec3<f32>;
  var txVec10 : vec3<f32>;
  var txVec11 : vec3<f32>;
  var txVec12 : vec3<f32>;
  var u_xlat30 : vec3<f32>;
  var u_xlat16 : vec4<f32>;
  var u_xlat17 : vec4<f32>;
  var u_xlat31 : vec3<f32>;
  var u_xlat59 : vec2<f32>;
  var u_xlat54 : vec2<f32>;
  var u_xlat18 : vec4<f32>;
  var u_xlat19 : vec4<f32>;
  var u_xlat20 : vec4<f32>;
  var txVec13 : vec3<f32>;
  var txVec14 : vec3<f32>;
  var txVec15 : vec3<f32>;
  var txVec16 : vec3<f32>;
  var txVec17 : vec3<f32>;
  var txVec18 : vec3<f32>;
  var txVec19 : vec3<f32>;
  var txVec20 : vec3<f32>;
  var txVec21 : vec3<f32>;
  var txVec22 : vec3<f32>;
  var txVec23 : vec3<f32>;
  var txVec24 : vec3<f32>;
  var txVec25 : vec3<f32>;
  var txVec26 : vec3<f32>;
  var txVec27 : vec3<f32>;
  var txVec28 : vec3<f32>;
  var txVec29 : vec3<f32>;
  var u_xlatb70 : bool;
  var u_xlatb72 : bool;
  var x_1714 : f32;
  var u_xlatb3 : bool;
  var u_xlatu2 : vec3<u32>;
  var u_xlatu46 : u32;
  var u_xlatu25 : u32;
  var u_xlati46 : i32;
  var u_xlati24 : i32;
  var u_xlatu24 : u32;
  var u_xlati2 : i32;
  var param : i32;
  var param_1 : i32;
  var param_2 : i32;
  var param_3 : i32;
  var u_xlat24 : vec2<f32>;
  var x_1847 : f32;
  var u_xlatb24 : vec2<bool>;
  var x_1878 : f32;
  var u_xlat46 : f32;
  var u_xlatb2 : bool;
  var x_1925 : f32;
  var u_xlat69 : f32;
  var u_xlat29 : f32;
  var txVec30 : vec3<f32>;
  var txVec31 : vec3<f32>;
  var txVec32 : vec3<f32>;
  var txVec33 : vec3<f32>;
  var u_xlatb73 : bool;
  var u_xlat52 : vec2<f32>;
  var u_xlat73 : f32;
  var txVec34 : vec3<f32>;
  var txVec35 : vec3<f32>;
  var txVec36 : vec3<f32>;
  var txVec37 : vec3<f32>;
  var txVec38 : vec3<f32>;
  var txVec39 : vec3<f32>;
  var txVec40 : vec3<f32>;
  var txVec41 : vec3<f32>;
  var txVec42 : vec3<f32>;
  var u_xlat32 : vec2<f32>;
  var u_xlat60 : vec2<f32>;
  var u_xlat55 : vec2<f32>;
  var u_xlat21 : vec4<f32>;
  var txVec43 : vec3<f32>;
  var txVec44 : vec3<f32>;
  var txVec45 : vec3<f32>;
  var txVec46 : vec3<f32>;
  var txVec47 : vec3<f32>;
  var txVec48 : vec3<f32>;
  var txVec49 : vec3<f32>;
  var txVec50 : vec3<f32>;
  var txVec51 : vec3<f32>;
  var txVec52 : vec3<f32>;
  var txVec53 : vec3<f32>;
  var txVec54 : vec3<f32>;
  var txVec55 : vec3<f32>;
  var txVec56 : vec3<f32>;
  var txVec57 : vec3<f32>;
  var txVec58 : vec3<f32>;
  var txVec59 : vec3<f32>;
  var x_3544 : f32;
  var x_3555 : vec3<f32>;
  var u_xlatb46 : vec2<bool>;
  var u_xlatu_loop_1 : u32;
  var u_xlatu70 : u32;
  var u_xlati71 : i32;
  var indexable : array<vec4<u32>, 4u>;
  var u_xlat71 : f32;
  var u_xlat74 : f32;
  var u_xlatu74 : u32;
  var u_xlati76 : i32;
  var u_xlati74 : i32;
  var u_xlati11 : i32;
  var u_xlat33 : vec3<f32>;
  var u_xlatb74 : bool;
  var u_xlatb11 : vec4<bool>;
  var x_4301 : f32;
  var x_4314 : f32;
  var x_4376 : f32;
  var x_4387 : vec3<f32>;
  var u_xlat_precise_vec4 : vec4<f32>;
  var u_xlat_precise_ivec4 : vec4<i32>;
  var u_xlat_precise_bvec4 : vec4<bool>;
  var u_xlat_precise_uvec4 : vec4<u32>;
  let x_49 : vec4<f32> = gl_FragCoord;
  let x_50 : vec3<f32> = vec3<f32>(x_49.x, x_49.y, x_49.z);
  let x_55 : f32 = gl_FragCoord.w;
  hlslcc_FragCoord = vec4<f32>(x_50.x, x_50.y, x_50.z, (1.0f / x_55));
  let x_65 : vec3<f32> = vs_INTERP1;
  let x_66 : vec3<f32> = vs_INTERP1;
  u_xlat0.x = dot(x_65, x_66);
  let x_72 : f32 = u_xlat0.x;
  u_xlat0.x = sqrt(x_72);
  let x_76 : f32 = u_xlat0.x;
  u_xlat0.x = (1.0f / x_76);
  let x_79 : vec3<f32> = u_xlat0;
  let x_81 : vec3<f32> = vs_INTERP1;
  u_xlat0 = (vec3<f32>(x_79.x, x_79.x, x_79.x) * x_81);
  let x_94 : f32 = x_90.unity_OrthoParams.w;
  u_xlatb66 = (x_94 == 0.0f);
  let x_99 : vec3<f32> = vs_INTERP0;
  let x_104 : vec3<f32> = x_90.x_WorldSpaceCameraPos;
  u_xlat1 = (-(x_99) + x_104);
  let x_107 : vec3<f32> = u_xlat1;
  let x_108 : vec3<f32> = u_xlat1;
  u_xlat67 = dot(x_107, x_108);
  let x_110 : f32 = u_xlat67;
  u_xlat67 = inverseSqrt(x_110);
  let x_112 : f32 = u_xlat67;
  let x_114 : vec3<f32> = u_xlat1;
  u_xlat1 = (vec3<f32>(x_112, x_112, x_112) * x_114);
  let x_121 : f32 = x_90.unity_MatrixV[0i].z;
  u_xlat2.x = x_121;
  let x_125 : f32 = x_90.unity_MatrixV[1i].z;
  u_xlat2.y = x_125;
  let x_130 : f32 = x_90.unity_MatrixV[2i].z;
  u_xlat2.z = x_130;
  let x_132 : bool = u_xlatb66;
  if (x_132) {
    let x_136 : vec3<f32> = u_xlat1;
    x_133 = x_136;
  } else {
    let x_138 : vec3<f32> = u_xlat2;
    x_133 = x_138;
  }
  let x_139 : vec3<f32> = x_133;
  u_xlat1 = x_139;
  let x_140 : vec3<f32> = u_xlat1;
  let x_148 : vec4<f32> = x_145.unity_WorldToObject[1i];
  u_xlat2 = (vec3<f32>(x_140.y, x_140.y, x_140.y) * vec3<f32>(x_148.x, x_148.y, x_148.z));
  let x_152 : vec4<f32> = x_145.unity_WorldToObject[0i];
  let x_154 : vec3<f32> = u_xlat1;
  let x_157 : vec3<f32> = u_xlat2;
  u_xlat2 = ((vec3<f32>(x_152.x, x_152.y, x_152.z) * vec3<f32>(x_154.x, x_154.x, x_154.x)) + x_157);
  let x_160 : vec4<f32> = x_145.unity_WorldToObject[2i];
  let x_162 : vec3<f32> = u_xlat1;
  let x_165 : vec3<f32> = u_xlat2;
  u_xlat2 = ((vec3<f32>(x_160.x, x_160.y, x_160.z) * vec3<f32>(x_162.z, x_162.z, x_162.z)) + x_165);
  let x_168 : vec3<f32> = u_xlat2;
  let x_169 : vec3<f32> = u_xlat2;
  u_xlat66 = dot(x_168, x_169);
  let x_171 : f32 = u_xlat66;
  u_xlat66 = inverseSqrt(x_171);
  let x_173 : f32 = u_xlat66;
  let x_175 : vec3<f32> = u_xlat2;
  u_xlat2 = (vec3<f32>(x_173, x_173, x_173) * x_175);
  let x_189 : vec4<f32> = vs_INTERP3;
  let x_192 : f32 = x_90.x_GlobalMipBias.x;
  let x_193 : vec4<f32> = textureSampleBias(Texture2D_B222E8F, samplerTexture2D_B222E8F, vec2<f32>(x_189.x, x_189.y), x_192);
  u_xlat3 = x_193;
  let x_195 : vec4<f32> = u_xlat3;
  let x_201 : vec4<f32> = x_199.Color_C30C7CA3;
  u_xlat4 = (vec3<f32>(x_195.x, x_195.y, x_195.z) * vec3<f32>(x_201.x, x_201.y, x_201.z));
  let x_210 : vec4<f32> = vs_INTERP3;
  let x_213 : f32 = x_90.x_GlobalMipBias.x;
  let x_214 : vec4<f32> = textureSampleBias(Texture2D_D9BFD5F1, samplerTexture2D_D9BFD5F1, vec2<f32>(x_210.x, x_210.y), x_213);
  u_xlat5 = vec4<f32>(x_214.w, x_214.x, x_214.y, x_214.z);
  let x_217 : vec4<f32> = u_xlat5;
  u_xlat6 = ((vec4<f32>(x_217.y, x_217.z, x_217.w, x_217.x) * vec4<f32>(2.0f, 2.0f, 2.0f, 2.0f)) + vec4<f32>(-1.0f, -1.0f, -1.0f, -1.0f));
  let x_225 : vec4<f32> = u_xlat6;
  let x_226 : vec4<f32> = u_xlat6;
  u_xlat66 = dot(x_225, x_226);
  let x_228 : f32 = u_xlat66;
  u_xlat66 = inverseSqrt(x_228);
  let x_231 : f32 = u_xlat66;
  let x_233 : vec4<f32> = u_xlat6;
  u_xlat27 = (vec3<f32>(x_231, x_231, x_231) * vec3<f32>(x_233.x, x_233.y, x_233.z));
  let x_238 : f32 = vs_INTERP4.y;
  u_xlat66 = (x_238 * 200.0f);
  let x_241 : f32 = u_xlat66;
  u_xlat66 = min(x_241, 1.0f);
  let x_243 : f32 = u_xlat66;
  let x_245 : vec4<f32> = u_xlat3;
  let x_247 : vec3<f32> = (vec3<f32>(x_243, x_243, x_243) * vec3<f32>(x_245.x, x_245.y, x_245.z));
  let x_248 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_247.x, x_247.y, x_247.z, x_248.w);
  let x_250 : vec3<f32> = vs_INTERP0;
  let x_257 : vec4<f32> = x_255.x_CascadeShadowSplitSpheres0;
  let x_260 : vec3<f32> = (x_250 + -(vec3<f32>(x_257.x, x_257.y, x_257.z)));
  let x_261 : vec4<f32> = u_xlat6;
  u_xlat6 = vec4<f32>(x_260.x, x_260.y, x_260.z, x_261.w);
  let x_264 : vec3<f32> = vs_INTERP0;
  let x_266 : vec4<f32> = x_255.x_CascadeShadowSplitSpheres1;
  let x_269 : vec3<f32> = (x_264 + -(vec3<f32>(x_266.x, x_266.y, x_266.z)));
  let x_270 : vec4<f32> = u_xlat7;
  u_xlat7 = vec4<f32>(x_269.x, x_269.y, x_269.z, x_270.w);
  let x_273 : vec3<f32> = vs_INTERP0;
  let x_276 : vec4<f32> = x_255.x_CascadeShadowSplitSpheres2;
  let x_279 : vec3<f32> = (x_273 + -(vec3<f32>(x_276.x, x_276.y, x_276.z)));
  let x_280 : vec4<f32> = u_xlat8;
  u_xlat8 = vec4<f32>(x_279.x, x_279.y, x_279.z, x_280.w);
  let x_283 : vec3<f32> = vs_INTERP0;
  let x_286 : vec4<f32> = x_255.x_CascadeShadowSplitSpheres3;
  let x_289 : vec3<f32> = (x_283 + -(vec3<f32>(x_286.x, x_286.y, x_286.z)));
  let x_290 : vec4<f32> = u_xlat9;
  u_xlat9 = vec4<f32>(x_289.x, x_289.y, x_289.z, x_290.w);
  let x_292 : vec4<f32> = u_xlat6;
  let x_294 : vec4<f32> = u_xlat6;
  u_xlat6.x = dot(vec3<f32>(x_292.x, x_292.y, x_292.z), vec3<f32>(x_294.x, x_294.y, x_294.z));
  let x_298 : vec4<f32> = u_xlat7;
  let x_300 : vec4<f32> = u_xlat7;
  u_xlat6.y = dot(vec3<f32>(x_298.x, x_298.y, x_298.z), vec3<f32>(x_300.x, x_300.y, x_300.z));
  let x_304 : vec4<f32> = u_xlat8;
  let x_306 : vec4<f32> = u_xlat8;
  u_xlat6.z = dot(vec3<f32>(x_304.x, x_304.y, x_304.z), vec3<f32>(x_306.x, x_306.y, x_306.z));
  let x_310 : vec4<f32> = u_xlat9;
  let x_312 : vec4<f32> = u_xlat9;
  u_xlat6.w = dot(vec3<f32>(x_310.x, x_310.y, x_310.z), vec3<f32>(x_312.x, x_312.y, x_312.z));
  let x_319 : vec4<f32> = u_xlat6;
  let x_322 : vec4<f32> = x_255.x_CascadeShadowSplitSphereRadii;
  u_xlatb6 = (x_319 < x_322);
  let x_325 : bool = u_xlatb6.x;
  u_xlat7.x = select(0.0f, 1.0f, x_325);
  let x_329 : bool = u_xlatb6.y;
  u_xlat7.y = select(0.0f, 1.0f, x_329);
  let x_333 : bool = u_xlatb6.z;
  u_xlat7.z = select(0.0f, 1.0f, x_333);
  let x_337 : bool = u_xlatb6.w;
  u_xlat7.w = select(0.0f, 1.0f, x_337);
  let x_341 : bool = u_xlatb6.x;
  u_xlat6.x = select(-0.0f, -1.0f, x_341);
  let x_346 : bool = u_xlatb6.y;
  u_xlat6.y = select(-0.0f, -1.0f, x_346);
  let x_350 : bool = u_xlatb6.z;
  u_xlat6.z = select(-0.0f, -1.0f, x_350);
  let x_353 : vec4<f32> = u_xlat6;
  let x_355 : vec4<f32> = u_xlat7;
  let x_357 : vec3<f32> = (vec3<f32>(x_353.x, x_353.y, x_353.z) + vec3<f32>(x_355.y, x_355.z, x_355.w));
  let x_358 : vec4<f32> = u_xlat6;
  u_xlat6 = vec4<f32>(x_357.x, x_357.y, x_357.z, x_358.w);
  let x_360 : vec4<f32> = u_xlat6;
  let x_363 : vec3<f32> = max(vec3<f32>(x_360.x, x_360.y, x_360.z), vec3<f32>(0.0f, 0.0f, 0.0f));
  let x_364 : vec4<f32> = u_xlat7;
  u_xlat7 = vec4<f32>(x_364.x, x_363.x, x_363.y, x_363.z);
  let x_366 : vec4<f32> = u_xlat7;
  u_xlat66 = dot(x_366, vec4<f32>(4.0f, 3.0f, 2.0f, 1.0f));
  let x_371 : f32 = u_xlat66;
  u_xlat66 = (-(x_371) + 4.0f);
  let x_375 : f32 = u_xlat66;
  u_xlatu66 = u32(x_375);
  let x_378 : u32 = u_xlatu66;
  u_xlati66 = (bitcast<i32>(x_378) << bitcast<u32>(2i));
  let x_381 : vec3<f32> = vs_INTERP0;
  let x_383 : i32 = u_xlati66;
  let x_386 : i32 = u_xlati66;
  let x_390 : vec4<f32> = x_255.x_MainLightWorldToShadow[((x_383 + 1i) / 4i)][((x_386 + 1i) % 4i)];
  let x_392 : vec3<f32> = (vec3<f32>(x_381.y, x_381.y, x_381.y) * vec3<f32>(x_390.x, x_390.y, x_390.z));
  let x_393 : vec4<f32> = u_xlat6;
  u_xlat6 = vec4<f32>(x_392.x, x_392.y, x_392.z, x_393.w);
  let x_395 : i32 = u_xlati66;
  let x_397 : i32 = u_xlati66;
  let x_400 : vec4<f32> = x_255.x_MainLightWorldToShadow[(x_395 / 4i)][(x_397 % 4i)];
  let x_402 : vec3<f32> = vs_INTERP0;
  let x_405 : vec4<f32> = u_xlat6;
  let x_407 : vec3<f32> = ((vec3<f32>(x_400.x, x_400.y, x_400.z) * vec3<f32>(x_402.x, x_402.x, x_402.x)) + vec3<f32>(x_405.x, x_405.y, x_405.z));
  let x_408 : vec4<f32> = u_xlat6;
  u_xlat6 = vec4<f32>(x_407.x, x_407.y, x_407.z, x_408.w);
  let x_410 : i32 = u_xlati66;
  let x_413 : i32 = u_xlati66;
  let x_417 : vec4<f32> = x_255.x_MainLightWorldToShadow[((x_410 + 2i) / 4i)][((x_413 + 2i) % 4i)];
  let x_419 : vec3<f32> = vs_INTERP0;
  let x_422 : vec4<f32> = u_xlat6;
  let x_424 : vec3<f32> = ((vec3<f32>(x_417.x, x_417.y, x_417.z) * vec3<f32>(x_419.z, x_419.z, x_419.z)) + vec3<f32>(x_422.x, x_422.y, x_422.z));
  let x_425 : vec4<f32> = u_xlat6;
  u_xlat6 = vec4<f32>(x_424.x, x_424.y, x_424.z, x_425.w);
  let x_427 : vec4<f32> = u_xlat6;
  let x_429 : i32 = u_xlati66;
  let x_432 : i32 = u_xlati66;
  let x_436 : vec4<f32> = x_255.x_MainLightWorldToShadow[((x_429 + 3i) / 4i)][((x_432 + 3i) % 4i)];
  let x_438 : vec3<f32> = (vec3<f32>(x_427.x, x_427.y, x_427.z) + vec3<f32>(x_436.x, x_436.y, x_436.z));
  let x_439 : vec4<f32> = u_xlat6;
  u_xlat6 = vec4<f32>(x_438.x, x_438.y, x_438.z, x_439.w);
  let x_443 : f32 = x_255.x_MainLightShadowParams.y;
  u_xlatb66 = (0.0f < x_443);
  let x_445 : bool = u_xlatb66;
  if (x_445) {
    let x_450 : f32 = x_255.x_MainLightShadowParams.y;
    u_xlatb67 = (x_450 == 1.0f);
    let x_452 : bool = u_xlatb67;
    if (x_452) {
      let x_455 : vec4<f32> = u_xlat6;
      let x_459 : vec4<f32> = x_255.x_MainLightShadowOffset0;
      u_xlat7 = (vec4<f32>(x_455.x, x_455.y, x_455.x, x_455.y) + x_459);
      let x_462 : vec4<f32> = u_xlat7;
      let x_463 : vec2<f32> = vec2<f32>(x_462.x, x_462.y);
      let x_465 : f32 = u_xlat6.z;
      txVec0 = vec3<f32>(x_463.x, x_463.y, x_465);
      let x_477 : vec3<f32> = txVec0;
      let x_479 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_477.xy, x_477.z);
      u_xlat8.x = x_479;
      let x_482 : vec4<f32> = u_xlat7;
      let x_483 : vec2<f32> = vec2<f32>(x_482.z, x_482.w);
      let x_485 : f32 = u_xlat6.z;
      txVec1 = vec3<f32>(x_483.x, x_483.y, x_485);
      let x_492 : vec3<f32> = txVec1;
      let x_494 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_492.xy, x_492.z);
      u_xlat8.y = x_494;
      let x_496 : vec4<f32> = u_xlat6;
      let x_499 : vec4<f32> = x_255.x_MainLightShadowOffset1;
      u_xlat7 = (vec4<f32>(x_496.x, x_496.y, x_496.x, x_496.y) + x_499);
      let x_502 : vec4<f32> = u_xlat7;
      let x_503 : vec2<f32> = vec2<f32>(x_502.x, x_502.y);
      let x_505 : f32 = u_xlat6.z;
      txVec2 = vec3<f32>(x_503.x, x_503.y, x_505);
      let x_512 : vec3<f32> = txVec2;
      let x_514 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_512.xy, x_512.z);
      u_xlat8.z = x_514;
      let x_517 : vec4<f32> = u_xlat7;
      let x_518 : vec2<f32> = vec2<f32>(x_517.z, x_517.w);
      let x_520 : f32 = u_xlat6.z;
      txVec3 = vec3<f32>(x_518.x, x_518.y, x_520);
      let x_527 : vec3<f32> = txVec3;
      let x_529 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_527.xy, x_527.z);
      u_xlat8.w = x_529;
      let x_531 : vec4<f32> = u_xlat8;
      u_xlat67 = dot(x_531, vec4<f32>(0.25f, 0.25f, 0.25f, 0.25f));
    } else {
      let x_538 : f32 = x_255.x_MainLightShadowParams.y;
      u_xlatb68 = (x_538 == 2.0f);
      let x_540 : bool = u_xlatb68;
      if (x_540) {
        let x_543 : vec4<f32> = u_xlat6;
        let x_547 : vec4<f32> = x_255.x_MainLightShadowmapSize;
        let x_552 : vec2<f32> = ((vec2<f32>(x_543.x, x_543.y) * vec2<f32>(x_547.z, x_547.w)) + vec2<f32>(0.5f, 0.5f));
        let x_553 : vec4<f32> = u_xlat7;
        u_xlat7 = vec4<f32>(x_552.x, x_552.y, x_553.z, x_553.w);
        let x_555 : vec4<f32> = u_xlat7;
        let x_557 : vec2<f32> = floor(vec2<f32>(x_555.x, x_555.y));
        let x_558 : vec4<f32> = u_xlat7;
        u_xlat7 = vec4<f32>(x_557.x, x_557.y, x_558.z, x_558.w);
        let x_562 : vec4<f32> = u_xlat6;
        let x_565 : vec4<f32> = x_255.x_MainLightShadowmapSize;
        let x_568 : vec4<f32> = u_xlat7;
        u_xlat51 = ((vec2<f32>(x_562.x, x_562.y) * vec2<f32>(x_565.z, x_565.w)) + -(vec2<f32>(x_568.x, x_568.y)));
        let x_572 : vec2<f32> = u_xlat51;
        u_xlat8 = (vec4<f32>(x_572.x, x_572.x, x_572.y, x_572.y) + vec4<f32>(0.5f, 1.0f, 0.5f, 1.0f));
        let x_576 : vec4<f32> = u_xlat8;
        let x_578 : vec4<f32> = u_xlat8;
        u_xlat9 = (vec4<f32>(x_576.x, x_576.x, x_576.z, x_576.z) * vec4<f32>(x_578.x, x_578.x, x_578.z, x_578.z));
        let x_581 : vec4<f32> = u_xlat9;
        let x_585 : vec2<f32> = (vec2<f32>(x_581.y, x_581.w) * vec2<f32>(0.079999998f, 0.079999998f));
        let x_586 : vec4<f32> = u_xlat8;
        u_xlat8 = vec4<f32>(x_585.x, x_586.y, x_585.y, x_586.w);
        let x_588 : vec4<f32> = u_xlat9;
        let x_591 : vec2<f32> = u_xlat51;
        let x_593 : vec2<f32> = ((vec2<f32>(x_588.x, x_588.z) * vec2<f32>(0.5f, 0.5f)) + -(x_591));
        let x_594 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_593.x, x_593.y, x_594.z, x_594.w);
        let x_597 : vec2<f32> = u_xlat51;
        u_xlat53 = (-(x_597) + vec2<f32>(1.0f, 1.0f));
        let x_602 : vec2<f32> = u_xlat51;
        let x_604 : vec2<f32> = min(x_602, vec2<f32>(0.0f, 0.0f));
        let x_605 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_604.x, x_604.y, x_605.z, x_605.w);
        let x_607 : vec4<f32> = u_xlat10;
        let x_610 : vec4<f32> = u_xlat10;
        let x_613 : vec2<f32> = u_xlat53;
        let x_614 : vec2<f32> = ((-(vec2<f32>(x_607.x, x_607.y)) * vec2<f32>(x_610.x, x_610.y)) + x_613);
        let x_615 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_614.x, x_614.y, x_615.z, x_615.w);
        let x_617 : vec2<f32> = u_xlat51;
        u_xlat51 = max(x_617, vec2<f32>(0.0f, 0.0f));
        let x_619 : vec2<f32> = u_xlat51;
        let x_621 : vec2<f32> = u_xlat51;
        let x_623 : vec4<f32> = u_xlat8;
        u_xlat51 = ((-(x_619) * x_621) + vec2<f32>(x_623.y, x_623.w));
        let x_626 : vec4<f32> = u_xlat10;
        let x_628 : vec2<f32> = (vec2<f32>(x_626.x, x_626.y) + vec2<f32>(1.0f, 1.0f));
        let x_629 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_628.x, x_628.y, x_629.z, x_629.w);
        let x_631 : vec2<f32> = u_xlat51;
        u_xlat51 = (x_631 + vec2<f32>(1.0f, 1.0f));
        let x_634 : vec4<f32> = u_xlat9;
        let x_638 : vec2<f32> = (vec2<f32>(x_634.x, x_634.y) * vec2<f32>(0.159999996f, 0.159999996f));
        let x_639 : vec4<f32> = u_xlat11;
        u_xlat11 = vec4<f32>(x_638.x, x_638.y, x_639.z, x_639.w);
        let x_641 : vec2<f32> = u_xlat53;
        let x_642 : vec2<f32> = (x_641 * vec2<f32>(0.159999996f, 0.159999996f));
        let x_643 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_642.x, x_642.y, x_643.z, x_643.w);
        let x_645 : vec4<f32> = u_xlat10;
        let x_647 : vec2<f32> = (vec2<f32>(x_645.x, x_645.y) * vec2<f32>(0.159999996f, 0.159999996f));
        let x_648 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_647.x, x_647.y, x_648.z, x_648.w);
        let x_651 : vec2<f32> = u_xlat51;
        let x_652 : vec2<f32> = (x_651 * vec2<f32>(0.159999996f, 0.159999996f));
        let x_653 : vec4<f32> = u_xlat12;
        u_xlat12 = vec4<f32>(x_652.x, x_652.y, x_653.z, x_653.w);
        let x_655 : vec4<f32> = u_xlat8;
        u_xlat51 = (vec2<f32>(x_655.y, x_655.w) * vec2<f32>(0.159999996f, 0.159999996f));
        let x_659 : f32 = u_xlat10.x;
        u_xlat11.z = x_659;
        let x_662 : f32 = u_xlat51.x;
        u_xlat11.w = x_662;
        let x_665 : f32 = u_xlat12.x;
        u_xlat9.z = x_665;
        let x_668 : f32 = u_xlat8.x;
        u_xlat9.w = x_668;
        let x_671 : vec4<f32> = u_xlat9;
        let x_673 : vec4<f32> = u_xlat11;
        u_xlat13 = (vec4<f32>(x_671.z, x_671.w, x_671.x, x_671.z) + vec4<f32>(x_673.z, x_673.w, x_673.x, x_673.z));
        let x_677 : f32 = u_xlat11.y;
        u_xlat10.z = x_677;
        let x_680 : f32 = u_xlat51.y;
        u_xlat10.w = x_680;
        let x_683 : f32 = u_xlat9.y;
        u_xlat12.z = x_683;
        let x_686 : f32 = u_xlat8.z;
        u_xlat12.w = x_686;
        let x_688 : vec4<f32> = u_xlat10;
        let x_690 : vec4<f32> = u_xlat12;
        let x_692 : vec3<f32> = (vec3<f32>(x_688.z, x_688.y, x_688.w) + vec3<f32>(x_690.z, x_690.y, x_690.w));
        let x_693 : vec4<f32> = u_xlat8;
        u_xlat8 = vec4<f32>(x_692.x, x_692.y, x_692.z, x_693.w);
        let x_695 : vec4<f32> = u_xlat9;
        let x_697 : vec4<f32> = u_xlat13;
        let x_699 : vec3<f32> = (vec3<f32>(x_695.x, x_695.z, x_695.w) / vec3<f32>(x_697.z, x_697.w, x_697.y));
        let x_700 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_699.x, x_699.y, x_699.z, x_700.w);
        let x_702 : vec4<f32> = u_xlat9;
        let x_708 : vec3<f32> = (vec3<f32>(x_702.x, x_702.y, x_702.z) + vec3<f32>(-2.5f, -0.5f, 1.5f));
        let x_709 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_708.x, x_708.y, x_708.z, x_709.w);
        let x_711 : vec4<f32> = u_xlat12;
        let x_713 : vec4<f32> = u_xlat8;
        let x_715 : vec3<f32> = (vec3<f32>(x_711.z, x_711.y, x_711.w) / vec3<f32>(x_713.x, x_713.y, x_713.z));
        let x_716 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_715.x, x_715.y, x_715.z, x_716.w);
        let x_718 : vec4<f32> = u_xlat10;
        let x_720 : vec3<f32> = (vec3<f32>(x_718.x, x_718.y, x_718.z) + vec3<f32>(-2.5f, -0.5f, 1.5f));
        let x_721 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_720.x, x_720.y, x_720.z, x_721.w);
        let x_723 : vec4<f32> = u_xlat9;
        let x_726 : vec4<f32> = x_255.x_MainLightShadowmapSize;
        let x_728 : vec3<f32> = (vec3<f32>(x_723.y, x_723.x, x_723.z) * vec3<f32>(x_726.x, x_726.x, x_726.x));
        let x_729 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_728.x, x_728.y, x_728.z, x_729.w);
        let x_731 : vec4<f32> = u_xlat10;
        let x_734 : vec4<f32> = x_255.x_MainLightShadowmapSize;
        let x_736 : vec3<f32> = (vec3<f32>(x_731.x, x_731.y, x_731.z) * vec3<f32>(x_734.y, x_734.y, x_734.y));
        let x_737 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_736.x, x_736.y, x_736.z, x_737.w);
        let x_740 : f32 = u_xlat10.x;
        u_xlat9.w = x_740;
        let x_742 : vec4<f32> = u_xlat7;
        let x_745 : vec4<f32> = x_255.x_MainLightShadowmapSize;
        let x_748 : vec4<f32> = u_xlat9;
        u_xlat11 = ((vec4<f32>(x_742.x, x_742.y, x_742.x, x_742.y) * vec4<f32>(x_745.x, x_745.y, x_745.x, x_745.y)) + vec4<f32>(x_748.y, x_748.w, x_748.x, x_748.w));
        let x_751 : vec4<f32> = u_xlat7;
        let x_754 : vec4<f32> = x_255.x_MainLightShadowmapSize;
        let x_757 : vec4<f32> = u_xlat9;
        u_xlat51 = ((vec2<f32>(x_751.x, x_751.y) * vec2<f32>(x_754.x, x_754.y)) + vec2<f32>(x_757.z, x_757.w));
        let x_761 : f32 = u_xlat9.y;
        u_xlat10.w = x_761;
        let x_763 : vec4<f32> = u_xlat10;
        let x_764 : vec2<f32> = vec2<f32>(x_763.y, x_763.z);
        let x_765 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_765.x, x_764.x, x_765.z, x_764.y);
        let x_767 : vec4<f32> = u_xlat7;
        let x_770 : vec4<f32> = x_255.x_MainLightShadowmapSize;
        let x_773 : vec4<f32> = u_xlat9;
        u_xlat12 = ((vec4<f32>(x_767.x, x_767.y, x_767.x, x_767.y) * vec4<f32>(x_770.x, x_770.y, x_770.x, x_770.y)) + vec4<f32>(x_773.x, x_773.y, x_773.z, x_773.y));
        let x_776 : vec4<f32> = u_xlat7;
        let x_779 : vec4<f32> = x_255.x_MainLightShadowmapSize;
        let x_782 : vec4<f32> = u_xlat10;
        u_xlat10 = ((vec4<f32>(x_776.x, x_776.y, x_776.x, x_776.y) * vec4<f32>(x_779.x, x_779.y, x_779.x, x_779.y)) + vec4<f32>(x_782.w, x_782.y, x_782.w, x_782.z));
        let x_785 : vec4<f32> = u_xlat7;
        let x_788 : vec4<f32> = x_255.x_MainLightShadowmapSize;
        let x_791 : vec4<f32> = u_xlat9;
        u_xlat9 = ((vec4<f32>(x_785.x, x_785.y, x_785.x, x_785.y) * vec4<f32>(x_788.x, x_788.y, x_788.x, x_788.y)) + vec4<f32>(x_791.x, x_791.w, x_791.z, x_791.w));
        let x_795 : vec4<f32> = u_xlat8;
        let x_797 : vec4<f32> = u_xlat13;
        u_xlat14 = (vec4<f32>(x_795.x, x_795.x, x_795.x, x_795.y) * vec4<f32>(x_797.z, x_797.w, x_797.y, x_797.z));
        let x_801 : vec4<f32> = u_xlat8;
        let x_803 : vec4<f32> = u_xlat13;
        u_xlat15 = (vec4<f32>(x_801.y, x_801.y, x_801.z, x_801.z) * x_803);
        let x_807 : f32 = u_xlat8.z;
        let x_809 : f32 = u_xlat13.y;
        u_xlat68 = (x_807 * x_809);
        let x_812 : vec4<f32> = u_xlat11;
        let x_813 : vec2<f32> = vec2<f32>(x_812.x, x_812.y);
        let x_815 : f32 = u_xlat6.z;
        txVec4 = vec3<f32>(x_813.x, x_813.y, x_815);
        let x_823 : vec3<f32> = txVec4;
        let x_825 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_823.xy, x_823.z);
        u_xlat70 = x_825;
        let x_827 : vec4<f32> = u_xlat11;
        let x_828 : vec2<f32> = vec2<f32>(x_827.z, x_827.w);
        let x_830 : f32 = u_xlat6.z;
        txVec5 = vec3<f32>(x_828.x, x_828.y, x_830);
        let x_838 : vec3<f32> = txVec5;
        let x_840 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_838.xy, x_838.z);
        u_xlat72 = x_840;
        let x_841 : f32 = u_xlat72;
        let x_843 : f32 = u_xlat14.y;
        u_xlat72 = (x_841 * x_843);
        let x_846 : f32 = u_xlat14.x;
        let x_847 : f32 = u_xlat70;
        let x_849 : f32 = u_xlat72;
        u_xlat70 = ((x_846 * x_847) + x_849);
        let x_852 : vec2<f32> = u_xlat51;
        let x_854 : f32 = u_xlat6.z;
        txVec6 = vec3<f32>(x_852.x, x_852.y, x_854);
        let x_861 : vec3<f32> = txVec6;
        let x_863 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_861.xy, x_861.z);
        u_xlat72 = x_863;
        let x_865 : f32 = u_xlat14.z;
        let x_866 : f32 = u_xlat72;
        let x_868 : f32 = u_xlat70;
        u_xlat70 = ((x_865 * x_866) + x_868);
        let x_871 : vec4<f32> = u_xlat10;
        let x_872 : vec2<f32> = vec2<f32>(x_871.x, x_871.y);
        let x_874 : f32 = u_xlat6.z;
        txVec7 = vec3<f32>(x_872.x, x_872.y, x_874);
        let x_881 : vec3<f32> = txVec7;
        let x_883 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_881.xy, x_881.z);
        u_xlat72 = x_883;
        let x_885 : f32 = u_xlat14.w;
        let x_886 : f32 = u_xlat72;
        let x_888 : f32 = u_xlat70;
        u_xlat70 = ((x_885 * x_886) + x_888);
        let x_891 : vec4<f32> = u_xlat12;
        let x_892 : vec2<f32> = vec2<f32>(x_891.x, x_891.y);
        let x_894 : f32 = u_xlat6.z;
        txVec8 = vec3<f32>(x_892.x, x_892.y, x_894);
        let x_901 : vec3<f32> = txVec8;
        let x_903 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_901.xy, x_901.z);
        u_xlat72 = x_903;
        let x_905 : f32 = u_xlat15.x;
        let x_906 : f32 = u_xlat72;
        let x_908 : f32 = u_xlat70;
        u_xlat70 = ((x_905 * x_906) + x_908);
        let x_911 : vec4<f32> = u_xlat12;
        let x_912 : vec2<f32> = vec2<f32>(x_911.z, x_911.w);
        let x_914 : f32 = u_xlat6.z;
        txVec9 = vec3<f32>(x_912.x, x_912.y, x_914);
        let x_921 : vec3<f32> = txVec9;
        let x_923 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_921.xy, x_921.z);
        u_xlat72 = x_923;
        let x_925 : f32 = u_xlat15.y;
        let x_926 : f32 = u_xlat72;
        let x_928 : f32 = u_xlat70;
        u_xlat70 = ((x_925 * x_926) + x_928);
        let x_931 : vec4<f32> = u_xlat10;
        let x_932 : vec2<f32> = vec2<f32>(x_931.z, x_931.w);
        let x_934 : f32 = u_xlat6.z;
        txVec10 = vec3<f32>(x_932.x, x_932.y, x_934);
        let x_941 : vec3<f32> = txVec10;
        let x_943 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_941.xy, x_941.z);
        u_xlat72 = x_943;
        let x_945 : f32 = u_xlat15.z;
        let x_946 : f32 = u_xlat72;
        let x_948 : f32 = u_xlat70;
        u_xlat70 = ((x_945 * x_946) + x_948);
        let x_951 : vec4<f32> = u_xlat9;
        let x_952 : vec2<f32> = vec2<f32>(x_951.x, x_951.y);
        let x_954 : f32 = u_xlat6.z;
        txVec11 = vec3<f32>(x_952.x, x_952.y, x_954);
        let x_961 : vec3<f32> = txVec11;
        let x_963 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_961.xy, x_961.z);
        u_xlat72 = x_963;
        let x_965 : f32 = u_xlat15.w;
        let x_966 : f32 = u_xlat72;
        let x_968 : f32 = u_xlat70;
        u_xlat70 = ((x_965 * x_966) + x_968);
        let x_971 : vec4<f32> = u_xlat9;
        let x_972 : vec2<f32> = vec2<f32>(x_971.z, x_971.w);
        let x_974 : f32 = u_xlat6.z;
        txVec12 = vec3<f32>(x_972.x, x_972.y, x_974);
        let x_981 : vec3<f32> = txVec12;
        let x_983 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_981.xy, x_981.z);
        u_xlat72 = x_983;
        let x_984 : f32 = u_xlat68;
        let x_985 : f32 = u_xlat72;
        let x_987 : f32 = u_xlat70;
        u_xlat67 = ((x_984 * x_985) + x_987);
      } else {
        let x_990 : vec4<f32> = u_xlat6;
        let x_993 : vec4<f32> = x_255.x_MainLightShadowmapSize;
        let x_996 : vec2<f32> = ((vec2<f32>(x_990.x, x_990.y) * vec2<f32>(x_993.z, x_993.w)) + vec2<f32>(0.5f, 0.5f));
        let x_997 : vec4<f32> = u_xlat7;
        u_xlat7 = vec4<f32>(x_996.x, x_996.y, x_997.z, x_997.w);
        let x_999 : vec4<f32> = u_xlat7;
        let x_1001 : vec2<f32> = floor(vec2<f32>(x_999.x, x_999.y));
        let x_1002 : vec4<f32> = u_xlat7;
        u_xlat7 = vec4<f32>(x_1001.x, x_1001.y, x_1002.z, x_1002.w);
        let x_1004 : vec4<f32> = u_xlat6;
        let x_1007 : vec4<f32> = x_255.x_MainLightShadowmapSize;
        let x_1010 : vec4<f32> = u_xlat7;
        u_xlat51 = ((vec2<f32>(x_1004.x, x_1004.y) * vec2<f32>(x_1007.z, x_1007.w)) + -(vec2<f32>(x_1010.x, x_1010.y)));
        let x_1014 : vec2<f32> = u_xlat51;
        u_xlat8 = (vec4<f32>(x_1014.x, x_1014.x, x_1014.y, x_1014.y) + vec4<f32>(0.5f, 1.0f, 0.5f, 1.0f));
        let x_1017 : vec4<f32> = u_xlat8;
        let x_1019 : vec4<f32> = u_xlat8;
        u_xlat9 = (vec4<f32>(x_1017.x, x_1017.x, x_1017.z, x_1017.z) * vec4<f32>(x_1019.x, x_1019.x, x_1019.z, x_1019.z));
        let x_1022 : vec4<f32> = u_xlat9;
        let x_1026 : vec2<f32> = (vec2<f32>(x_1022.y, x_1022.w) * vec2<f32>(0.040816002f, 0.040816002f));
        let x_1027 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_1027.x, x_1026.x, x_1027.z, x_1026.y);
        let x_1029 : vec4<f32> = u_xlat9;
        let x_1032 : vec2<f32> = u_xlat51;
        let x_1034 : vec2<f32> = ((vec2<f32>(x_1029.x, x_1029.z) * vec2<f32>(0.5f, 0.5f)) + -(x_1032));
        let x_1035 : vec4<f32> = u_xlat8;
        u_xlat8 = vec4<f32>(x_1034.x, x_1035.y, x_1034.y, x_1035.w);
        let x_1037 : vec2<f32> = u_xlat51;
        let x_1039 : vec2<f32> = (-(x_1037) + vec2<f32>(1.0f, 1.0f));
        let x_1040 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_1039.x, x_1039.y, x_1040.z, x_1040.w);
        let x_1042 : vec2<f32> = u_xlat51;
        u_xlat53 = min(x_1042, vec2<f32>(0.0f, 0.0f));
        let x_1044 : vec2<f32> = u_xlat53;
        let x_1046 : vec2<f32> = u_xlat53;
        let x_1048 : vec4<f32> = u_xlat9;
        let x_1050 : vec2<f32> = ((-(x_1044) * x_1046) + vec2<f32>(x_1048.x, x_1048.y));
        let x_1051 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_1050.x, x_1050.y, x_1051.z, x_1051.w);
        let x_1053 : vec2<f32> = u_xlat51;
        u_xlat53 = max(x_1053, vec2<f32>(0.0f, 0.0f));
        let x_1056 : vec2<f32> = u_xlat53;
        let x_1058 : vec2<f32> = u_xlat53;
        let x_1060 : vec4<f32> = u_xlat8;
        let x_1062 : vec2<f32> = ((-(x_1056) * x_1058) + vec2<f32>(x_1060.y, x_1060.w));
        let x_1063 : vec3<f32> = u_xlat30;
        u_xlat30 = vec3<f32>(x_1062.x, x_1063.y, x_1062.y);
        let x_1065 : vec4<f32> = u_xlat9;
        let x_1068 : vec2<f32> = (vec2<f32>(x_1065.x, x_1065.y) + vec2<f32>(2.0f, 2.0f));
        let x_1069 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_1068.x, x_1068.y, x_1069.z, x_1069.w);
        let x_1071 : vec3<f32> = u_xlat30;
        let x_1073 : vec2<f32> = (vec2<f32>(x_1071.x, x_1071.z) + vec2<f32>(2.0f, 2.0f));
        let x_1074 : vec4<f32> = u_xlat8;
        u_xlat8 = vec4<f32>(x_1074.x, x_1073.x, x_1074.z, x_1073.y);
        let x_1077 : f32 = u_xlat8.y;
        u_xlat11.z = (x_1077 * 0.081632003f);
        let x_1081 : vec4<f32> = u_xlat8;
        let x_1084 : vec3<f32> = (vec3<f32>(x_1081.z, x_1081.x, x_1081.w) * vec3<f32>(0.081632003f, 0.081632003f, 0.081632003f));
        let x_1085 : vec4<f32> = u_xlat12;
        u_xlat12 = vec4<f32>(x_1084.x, x_1084.y, x_1084.z, x_1085.w);
        let x_1087 : vec4<f32> = u_xlat9;
        let x_1090 : vec2<f32> = (vec2<f32>(x_1087.x, x_1087.y) * vec2<f32>(0.081632003f, 0.081632003f));
        let x_1091 : vec4<f32> = u_xlat8;
        u_xlat8 = vec4<f32>(x_1090.x, x_1090.y, x_1091.z, x_1091.w);
        let x_1094 : f32 = u_xlat12.y;
        u_xlat11.x = x_1094;
        let x_1096 : vec2<f32> = u_xlat51;
        let x_1103 : vec2<f32> = ((vec2<f32>(x_1096.x, x_1096.x) * vec2<f32>(-0.081632003f, 0.081632003f)) + vec2<f32>(0.163264006f, 0.081632003f));
        let x_1104 : vec4<f32> = u_xlat11;
        u_xlat11 = vec4<f32>(x_1104.x, x_1103.x, x_1104.z, x_1103.y);
        let x_1106 : vec2<f32> = u_xlat51;
        let x_1110 : vec2<f32> = ((vec2<f32>(x_1106.x, x_1106.x) * vec2<f32>(-0.081632003f, 0.081632003f)) + vec2<f32>(0.081632003f, 0.163264006f));
        let x_1111 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_1110.x, x_1111.y, x_1110.y, x_1111.w);
        let x_1114 : f32 = u_xlat8.x;
        u_xlat9.y = x_1114;
        let x_1117 : f32 = u_xlat10.y;
        u_xlat9.w = x_1117;
        let x_1119 : vec4<f32> = u_xlat9;
        let x_1120 : vec4<f32> = u_xlat11;
        u_xlat11 = (x_1119 + x_1120);
        let x_1122 : vec2<f32> = u_xlat51;
        let x_1125 : vec2<f32> = ((vec2<f32>(x_1122.y, x_1122.y) * vec2<f32>(-0.081632003f, 0.081632003f)) + vec2<f32>(0.163264006f, 0.081632003f));
        let x_1126 : vec4<f32> = u_xlat12;
        u_xlat12 = vec4<f32>(x_1126.x, x_1125.x, x_1126.z, x_1125.y);
        let x_1128 : vec2<f32> = u_xlat51;
        let x_1131 : vec2<f32> = ((vec2<f32>(x_1128.y, x_1128.y) * vec2<f32>(-0.081632003f, 0.081632003f)) + vec2<f32>(0.081632003f, 0.163264006f));
        let x_1132 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_1131.x, x_1132.y, x_1131.y, x_1132.w);
        let x_1135 : f32 = u_xlat8.y;
        u_xlat10.y = x_1135;
        let x_1137 : vec4<f32> = u_xlat10;
        let x_1138 : vec4<f32> = u_xlat12;
        u_xlat8 = (x_1137 + x_1138);
        let x_1140 : vec4<f32> = u_xlat9;
        let x_1141 : vec4<f32> = u_xlat11;
        u_xlat9 = (x_1140 / x_1141);
        let x_1143 : vec4<f32> = u_xlat9;
        u_xlat9 = (x_1143 + vec4<f32>(-3.5f, -1.5f, 0.5f, 2.5f));
        let x_1149 : vec4<f32> = u_xlat10;
        let x_1150 : vec4<f32> = u_xlat8;
        u_xlat10 = (x_1149 / x_1150);
        let x_1152 : vec4<f32> = u_xlat10;
        u_xlat10 = (x_1152 + vec4<f32>(-3.5f, -1.5f, 0.5f, 2.5f));
        let x_1154 : vec4<f32> = u_xlat9;
        let x_1157 : vec4<f32> = x_255.x_MainLightShadowmapSize;
        u_xlat9 = (vec4<f32>(x_1154.w, x_1154.x, x_1154.y, x_1154.z) * vec4<f32>(x_1157.x, x_1157.x, x_1157.x, x_1157.x));
        let x_1160 : vec4<f32> = u_xlat10;
        let x_1163 : vec4<f32> = x_255.x_MainLightShadowmapSize;
        u_xlat10 = (vec4<f32>(x_1160.x, x_1160.w, x_1160.y, x_1160.z) * vec4<f32>(x_1163.y, x_1163.y, x_1163.y, x_1163.y));
        let x_1166 : vec4<f32> = u_xlat9;
        let x_1167 : vec3<f32> = vec3<f32>(x_1166.y, x_1166.z, x_1166.w);
        let x_1168 : vec4<f32> = u_xlat12;
        u_xlat12 = vec4<f32>(x_1167.x, x_1168.y, x_1167.y, x_1167.z);
        let x_1171 : f32 = u_xlat10.x;
        u_xlat12.y = x_1171;
        let x_1173 : vec4<f32> = u_xlat7;
        let x_1176 : vec4<f32> = x_255.x_MainLightShadowmapSize;
        let x_1179 : vec4<f32> = u_xlat12;
        u_xlat13 = ((vec4<f32>(x_1173.x, x_1173.y, x_1173.x, x_1173.y) * vec4<f32>(x_1176.x, x_1176.y, x_1176.x, x_1176.y)) + vec4<f32>(x_1179.x, x_1179.y, x_1179.z, x_1179.y));
        let x_1182 : vec4<f32> = u_xlat7;
        let x_1185 : vec4<f32> = x_255.x_MainLightShadowmapSize;
        let x_1188 : vec4<f32> = u_xlat12;
        u_xlat51 = ((vec2<f32>(x_1182.x, x_1182.y) * vec2<f32>(x_1185.x, x_1185.y)) + vec2<f32>(x_1188.w, x_1188.y));
        let x_1192 : f32 = u_xlat12.y;
        u_xlat9.y = x_1192;
        let x_1195 : f32 = u_xlat10.z;
        u_xlat12.y = x_1195;
        let x_1197 : vec4<f32> = u_xlat7;
        let x_1200 : vec4<f32> = x_255.x_MainLightShadowmapSize;
        let x_1203 : vec4<f32> = u_xlat12;
        u_xlat14 = ((vec4<f32>(x_1197.x, x_1197.y, x_1197.x, x_1197.y) * vec4<f32>(x_1200.x, x_1200.y, x_1200.x, x_1200.y)) + vec4<f32>(x_1203.x, x_1203.y, x_1203.z, x_1203.y));
        let x_1206 : vec4<f32> = u_xlat7;
        let x_1209 : vec4<f32> = x_255.x_MainLightShadowmapSize;
        let x_1212 : vec4<f32> = u_xlat12;
        let x_1214 : vec2<f32> = ((vec2<f32>(x_1206.x, x_1206.y) * vec2<f32>(x_1209.x, x_1209.y)) + vec2<f32>(x_1212.w, x_1212.y));
        let x_1215 : vec4<f32> = u_xlat15;
        u_xlat15 = vec4<f32>(x_1214.x, x_1214.y, x_1215.z, x_1215.w);
        let x_1218 : f32 = u_xlat12.y;
        u_xlat9.z = x_1218;
        let x_1221 : vec4<f32> = u_xlat7;
        let x_1224 : vec4<f32> = x_255.x_MainLightShadowmapSize;
        let x_1227 : vec4<f32> = u_xlat9;
        u_xlat16 = ((vec4<f32>(x_1221.x, x_1221.y, x_1221.x, x_1221.y) * vec4<f32>(x_1224.x, x_1224.y, x_1224.x, x_1224.y)) + vec4<f32>(x_1227.x, x_1227.y, x_1227.x, x_1227.z));
        let x_1231 : f32 = u_xlat10.w;
        u_xlat12.y = x_1231;
        let x_1234 : vec4<f32> = u_xlat7;
        let x_1237 : vec4<f32> = x_255.x_MainLightShadowmapSize;
        let x_1240 : vec4<f32> = u_xlat12;
        u_xlat17 = ((vec4<f32>(x_1234.x, x_1234.y, x_1234.x, x_1234.y) * vec4<f32>(x_1237.x, x_1237.y, x_1237.x, x_1237.y)) + vec4<f32>(x_1240.x, x_1240.y, x_1240.z, x_1240.y));
        let x_1244 : vec4<f32> = u_xlat7;
        let x_1247 : vec4<f32> = x_255.x_MainLightShadowmapSize;
        let x_1250 : vec4<f32> = u_xlat12;
        let x_1252 : vec2<f32> = ((vec2<f32>(x_1244.x, x_1244.y) * vec2<f32>(x_1247.x, x_1247.y)) + vec2<f32>(x_1250.w, x_1250.y));
        let x_1253 : vec3<f32> = u_xlat31;
        u_xlat31 = vec3<f32>(x_1252.x, x_1252.y, x_1253.z);
        let x_1256 : f32 = u_xlat12.y;
        u_xlat9.w = x_1256;
        let x_1259 : vec4<f32> = u_xlat7;
        let x_1262 : vec4<f32> = x_255.x_MainLightShadowmapSize;
        let x_1265 : vec4<f32> = u_xlat9;
        u_xlat59 = ((vec2<f32>(x_1259.x, x_1259.y) * vec2<f32>(x_1262.x, x_1262.y)) + vec2<f32>(x_1265.x, x_1265.w));
        let x_1268 : vec4<f32> = u_xlat12;
        let x_1269 : vec3<f32> = vec3<f32>(x_1268.x, x_1268.z, x_1268.w);
        let x_1270 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_1269.x, x_1270.y, x_1269.y, x_1269.z);
        let x_1272 : vec4<f32> = u_xlat7;
        let x_1275 : vec4<f32> = x_255.x_MainLightShadowmapSize;
        let x_1278 : vec4<f32> = u_xlat10;
        u_xlat12 = ((vec4<f32>(x_1272.x, x_1272.y, x_1272.x, x_1272.y) * vec4<f32>(x_1275.x, x_1275.y, x_1275.x, x_1275.y)) + vec4<f32>(x_1278.x, x_1278.y, x_1278.z, x_1278.y));
        let x_1282 : vec4<f32> = u_xlat7;
        let x_1285 : vec4<f32> = x_255.x_MainLightShadowmapSize;
        let x_1288 : vec4<f32> = u_xlat10;
        u_xlat54 = ((vec2<f32>(x_1282.x, x_1282.y) * vec2<f32>(x_1285.x, x_1285.y)) + vec2<f32>(x_1288.w, x_1288.y));
        let x_1292 : f32 = u_xlat9.x;
        u_xlat10.x = x_1292;
        let x_1294 : vec4<f32> = u_xlat7;
        let x_1297 : vec4<f32> = x_255.x_MainLightShadowmapSize;
        let x_1300 : vec4<f32> = u_xlat10;
        let x_1302 : vec2<f32> = ((vec2<f32>(x_1294.x, x_1294.y) * vec2<f32>(x_1297.x, x_1297.y)) + vec2<f32>(x_1300.x, x_1300.y));
        let x_1303 : vec4<f32> = u_xlat7;
        u_xlat7 = vec4<f32>(x_1302.x, x_1302.y, x_1303.z, x_1303.w);
        let x_1306 : vec4<f32> = u_xlat8;
        let x_1308 : vec4<f32> = u_xlat11;
        u_xlat18 = (vec4<f32>(x_1306.x, x_1306.x, x_1306.x, x_1306.x) * x_1308);
        let x_1311 : vec4<f32> = u_xlat8;
        let x_1313 : vec4<f32> = u_xlat11;
        u_xlat19 = (vec4<f32>(x_1311.y, x_1311.y, x_1311.y, x_1311.y) * x_1313);
        let x_1316 : vec4<f32> = u_xlat8;
        let x_1318 : vec4<f32> = u_xlat11;
        u_xlat20 = (vec4<f32>(x_1316.z, x_1316.z, x_1316.z, x_1316.z) * x_1318);
        let x_1320 : vec4<f32> = u_xlat8;
        let x_1322 : vec4<f32> = u_xlat11;
        u_xlat8 = (vec4<f32>(x_1320.w, x_1320.w, x_1320.w, x_1320.w) * x_1322);
        let x_1325 : vec4<f32> = u_xlat13;
        let x_1326 : vec2<f32> = vec2<f32>(x_1325.x, x_1325.y);
        let x_1328 : f32 = u_xlat6.z;
        txVec13 = vec3<f32>(x_1326.x, x_1326.y, x_1328);
        let x_1335 : vec3<f32> = txVec13;
        let x_1337 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1335.xy, x_1335.z);
        u_xlat68 = x_1337;
        let x_1339 : vec4<f32> = u_xlat13;
        let x_1340 : vec2<f32> = vec2<f32>(x_1339.z, x_1339.w);
        let x_1342 : f32 = u_xlat6.z;
        txVec14 = vec3<f32>(x_1340.x, x_1340.y, x_1342);
        let x_1349 : vec3<f32> = txVec14;
        let x_1351 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1349.xy, x_1349.z);
        u_xlat70 = x_1351;
        let x_1352 : f32 = u_xlat70;
        let x_1354 : f32 = u_xlat18.y;
        u_xlat70 = (x_1352 * x_1354);
        let x_1357 : f32 = u_xlat18.x;
        let x_1358 : f32 = u_xlat68;
        let x_1360 : f32 = u_xlat70;
        u_xlat68 = ((x_1357 * x_1358) + x_1360);
        let x_1363 : vec2<f32> = u_xlat51;
        let x_1365 : f32 = u_xlat6.z;
        txVec15 = vec3<f32>(x_1363.x, x_1363.y, x_1365);
        let x_1372 : vec3<f32> = txVec15;
        let x_1374 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1372.xy, x_1372.z);
        u_xlat70 = x_1374;
        let x_1376 : f32 = u_xlat18.z;
        let x_1377 : f32 = u_xlat70;
        let x_1379 : f32 = u_xlat68;
        u_xlat68 = ((x_1376 * x_1377) + x_1379);
        let x_1382 : vec4<f32> = u_xlat16;
        let x_1383 : vec2<f32> = vec2<f32>(x_1382.x, x_1382.y);
        let x_1385 : f32 = u_xlat6.z;
        txVec16 = vec3<f32>(x_1383.x, x_1383.y, x_1385);
        let x_1392 : vec3<f32> = txVec16;
        let x_1394 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1392.xy, x_1392.z);
        u_xlat70 = x_1394;
        let x_1396 : f32 = u_xlat18.w;
        let x_1397 : f32 = u_xlat70;
        let x_1399 : f32 = u_xlat68;
        u_xlat68 = ((x_1396 * x_1397) + x_1399);
        let x_1402 : vec4<f32> = u_xlat14;
        let x_1403 : vec2<f32> = vec2<f32>(x_1402.x, x_1402.y);
        let x_1405 : f32 = u_xlat6.z;
        txVec17 = vec3<f32>(x_1403.x, x_1403.y, x_1405);
        let x_1412 : vec3<f32> = txVec17;
        let x_1414 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1412.xy, x_1412.z);
        u_xlat70 = x_1414;
        let x_1416 : f32 = u_xlat19.x;
        let x_1417 : f32 = u_xlat70;
        let x_1419 : f32 = u_xlat68;
        u_xlat68 = ((x_1416 * x_1417) + x_1419);
        let x_1422 : vec4<f32> = u_xlat14;
        let x_1423 : vec2<f32> = vec2<f32>(x_1422.z, x_1422.w);
        let x_1425 : f32 = u_xlat6.z;
        txVec18 = vec3<f32>(x_1423.x, x_1423.y, x_1425);
        let x_1432 : vec3<f32> = txVec18;
        let x_1434 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1432.xy, x_1432.z);
        u_xlat70 = x_1434;
        let x_1436 : f32 = u_xlat19.y;
        let x_1437 : f32 = u_xlat70;
        let x_1439 : f32 = u_xlat68;
        u_xlat68 = ((x_1436 * x_1437) + x_1439);
        let x_1442 : vec4<f32> = u_xlat15;
        let x_1443 : vec2<f32> = vec2<f32>(x_1442.x, x_1442.y);
        let x_1445 : f32 = u_xlat6.z;
        txVec19 = vec3<f32>(x_1443.x, x_1443.y, x_1445);
        let x_1452 : vec3<f32> = txVec19;
        let x_1454 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1452.xy, x_1452.z);
        u_xlat70 = x_1454;
        let x_1456 : f32 = u_xlat19.z;
        let x_1457 : f32 = u_xlat70;
        let x_1459 : f32 = u_xlat68;
        u_xlat68 = ((x_1456 * x_1457) + x_1459);
        let x_1462 : vec4<f32> = u_xlat16;
        let x_1463 : vec2<f32> = vec2<f32>(x_1462.z, x_1462.w);
        let x_1465 : f32 = u_xlat6.z;
        txVec20 = vec3<f32>(x_1463.x, x_1463.y, x_1465);
        let x_1472 : vec3<f32> = txVec20;
        let x_1474 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1472.xy, x_1472.z);
        u_xlat70 = x_1474;
        let x_1476 : f32 = u_xlat19.w;
        let x_1477 : f32 = u_xlat70;
        let x_1479 : f32 = u_xlat68;
        u_xlat68 = ((x_1476 * x_1477) + x_1479);
        let x_1482 : vec4<f32> = u_xlat17;
        let x_1483 : vec2<f32> = vec2<f32>(x_1482.x, x_1482.y);
        let x_1485 : f32 = u_xlat6.z;
        txVec21 = vec3<f32>(x_1483.x, x_1483.y, x_1485);
        let x_1492 : vec3<f32> = txVec21;
        let x_1494 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1492.xy, x_1492.z);
        u_xlat70 = x_1494;
        let x_1496 : f32 = u_xlat20.x;
        let x_1497 : f32 = u_xlat70;
        let x_1499 : f32 = u_xlat68;
        u_xlat68 = ((x_1496 * x_1497) + x_1499);
        let x_1502 : vec4<f32> = u_xlat17;
        let x_1503 : vec2<f32> = vec2<f32>(x_1502.z, x_1502.w);
        let x_1505 : f32 = u_xlat6.z;
        txVec22 = vec3<f32>(x_1503.x, x_1503.y, x_1505);
        let x_1512 : vec3<f32> = txVec22;
        let x_1514 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1512.xy, x_1512.z);
        u_xlat70 = x_1514;
        let x_1516 : f32 = u_xlat20.y;
        let x_1517 : f32 = u_xlat70;
        let x_1519 : f32 = u_xlat68;
        u_xlat68 = ((x_1516 * x_1517) + x_1519);
        let x_1522 : vec3<f32> = u_xlat31;
        let x_1523 : vec2<f32> = vec2<f32>(x_1522.x, x_1522.y);
        let x_1525 : f32 = u_xlat6.z;
        txVec23 = vec3<f32>(x_1523.x, x_1523.y, x_1525);
        let x_1532 : vec3<f32> = txVec23;
        let x_1534 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1532.xy, x_1532.z);
        u_xlat70 = x_1534;
        let x_1536 : f32 = u_xlat20.z;
        let x_1537 : f32 = u_xlat70;
        let x_1539 : f32 = u_xlat68;
        u_xlat68 = ((x_1536 * x_1537) + x_1539);
        let x_1542 : vec2<f32> = u_xlat59;
        let x_1544 : f32 = u_xlat6.z;
        txVec24 = vec3<f32>(x_1542.x, x_1542.y, x_1544);
        let x_1551 : vec3<f32> = txVec24;
        let x_1553 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1551.xy, x_1551.z);
        u_xlat70 = x_1553;
        let x_1555 : f32 = u_xlat20.w;
        let x_1556 : f32 = u_xlat70;
        let x_1558 : f32 = u_xlat68;
        u_xlat68 = ((x_1555 * x_1556) + x_1558);
        let x_1561 : vec4<f32> = u_xlat12;
        let x_1562 : vec2<f32> = vec2<f32>(x_1561.x, x_1561.y);
        let x_1564 : f32 = u_xlat6.z;
        txVec25 = vec3<f32>(x_1562.x, x_1562.y, x_1564);
        let x_1571 : vec3<f32> = txVec25;
        let x_1573 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1571.xy, x_1571.z);
        u_xlat70 = x_1573;
        let x_1575 : f32 = u_xlat8.x;
        let x_1576 : f32 = u_xlat70;
        let x_1578 : f32 = u_xlat68;
        u_xlat68 = ((x_1575 * x_1576) + x_1578);
        let x_1581 : vec4<f32> = u_xlat12;
        let x_1582 : vec2<f32> = vec2<f32>(x_1581.z, x_1581.w);
        let x_1584 : f32 = u_xlat6.z;
        txVec26 = vec3<f32>(x_1582.x, x_1582.y, x_1584);
        let x_1591 : vec3<f32> = txVec26;
        let x_1593 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1591.xy, x_1591.z);
        u_xlat70 = x_1593;
        let x_1595 : f32 = u_xlat8.y;
        let x_1596 : f32 = u_xlat70;
        let x_1598 : f32 = u_xlat68;
        u_xlat68 = ((x_1595 * x_1596) + x_1598);
        let x_1601 : vec2<f32> = u_xlat54;
        let x_1603 : f32 = u_xlat6.z;
        txVec27 = vec3<f32>(x_1601.x, x_1601.y, x_1603);
        let x_1610 : vec3<f32> = txVec27;
        let x_1612 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1610.xy, x_1610.z);
        u_xlat70 = x_1612;
        let x_1614 : f32 = u_xlat8.z;
        let x_1615 : f32 = u_xlat70;
        let x_1617 : f32 = u_xlat68;
        u_xlat68 = ((x_1614 * x_1615) + x_1617);
        let x_1620 : vec4<f32> = u_xlat7;
        let x_1621 : vec2<f32> = vec2<f32>(x_1620.x, x_1620.y);
        let x_1623 : f32 = u_xlat6.z;
        txVec28 = vec3<f32>(x_1621.x, x_1621.y, x_1623);
        let x_1630 : vec3<f32> = txVec28;
        let x_1632 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1630.xy, x_1630.z);
        u_xlat70 = x_1632;
        let x_1634 : f32 = u_xlat8.w;
        let x_1635 : f32 = u_xlat70;
        let x_1637 : f32 = u_xlat68;
        u_xlat67 = ((x_1634 * x_1635) + x_1637);
      }
    }
  } else {
    let x_1641 : vec4<f32> = u_xlat6;
    let x_1642 : vec2<f32> = vec2<f32>(x_1641.x, x_1641.y);
    let x_1644 : f32 = u_xlat6.z;
    txVec29 = vec3<f32>(x_1642.x, x_1642.y, x_1644);
    let x_1651 : vec3<f32> = txVec29;
    let x_1653 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1651.xy, x_1651.z);
    u_xlat67 = x_1653;
  }
  let x_1655 : f32 = x_255.x_MainLightShadowParams.x;
  u_xlat68 = (-(x_1655) + 1.0f);
  let x_1658 : f32 = u_xlat67;
  let x_1660 : f32 = x_255.x_MainLightShadowParams.x;
  let x_1662 : f32 = u_xlat68;
  u_xlat67 = ((x_1658 * x_1660) + x_1662);
  let x_1666 : f32 = u_xlat6.z;
  u_xlatb70 = (0.0f >= x_1666);
  let x_1670 : f32 = u_xlat6.z;
  u_xlatb72 = (x_1670 >= 1.0f);
  let x_1672 : bool = u_xlatb70;
  let x_1673 : bool = u_xlatb72;
  u_xlatb70 = (x_1672 | x_1673);
  let x_1675 : bool = u_xlatb70;
  let x_1676 : f32 = u_xlat67;
  u_xlat67 = select(x_1676, 1.0f, x_1675);
  let x_1678 : vec3<f32> = u_xlat0;
  let x_1680 : vec4<f32> = x_90.x_MainLightPosition;
  u_xlat0.x = dot(x_1678, -(vec3<f32>(x_1680.x, x_1680.y, x_1680.z)));
  let x_1686 : f32 = u_xlat0.x;
  u_xlat0.x = clamp(x_1686, 0.0f, 1.0f);
  let x_1689 : f32 = u_xlat67;
  let x_1692 : vec4<f32> = x_90.x_MainLightColor;
  let x_1694 : vec3<f32> = (vec3<f32>(x_1689, x_1689, x_1689) * vec3<f32>(x_1692.x, x_1692.y, x_1692.z));
  let x_1695 : vec4<f32> = u_xlat7;
  u_xlat7 = vec4<f32>(x_1694.x, x_1694.y, x_1694.z, x_1695.w);
  let x_1697 : vec3<f32> = u_xlat0;
  let x_1699 : vec4<f32> = u_xlat7;
  u_xlat0 = (vec3<f32>(x_1697.x, x_1697.x, x_1697.x) * vec3<f32>(x_1699.x, x_1699.y, x_1699.z));
  let x_1702 : vec3<f32> = u_xlat0;
  let x_1703 : vec4<f32> = u_xlat3;
  u_xlat0 = (x_1702 * vec3<f32>(x_1703.x, x_1703.y, x_1703.z));
  let x_1707 : f32 = x_145.unity_LODFade.x;
  u_xlatb67 = (x_1707 < 0.0f);
  let x_1710 : f32 = x_145.unity_LODFade.x;
  u_xlat3.x = (x_1710 + 1.0f);
  let x_1713 : bool = u_xlatb67;
  if (x_1713) {
    let x_1718 : f32 = u_xlat3.x;
    x_1714 = x_1718;
  } else {
    let x_1721 : f32 = x_145.unity_LODFade.x;
    x_1714 = x_1721;
  }
  let x_1722 : f32 = x_1714;
  u_xlat67 = x_1722;
  let x_1724 : f32 = u_xlat67;
  u_xlatb3 = (0.5f >= x_1724);
  let x_1726 : vec3<f32> = u_xlat2;
  let x_1729 : vec4<f32> = x_90.x_ScreenParams;
  u_xlat2 = (abs(x_1726) * vec3<f32>(x_1729.x, x_1729.y, x_1729.x));
  let x_1735 : vec3<f32> = u_xlat2;
  u_xlatu2 = vec3<u32>(x_1735);
  let x_1739 : u32 = u_xlatu2.z;
  u_xlatu46 = (x_1739 * 1025u);
  let x_1743 : u32 = u_xlatu46;
  u_xlatu25 = (x_1743 >> 6u);
  let x_1747 : u32 = u_xlatu46;
  let x_1748 : u32 = u_xlatu25;
  u_xlati46 = bitcast<i32>((x_1747 ^ x_1748));
  let x_1751 : i32 = u_xlati46;
  u_xlatu46 = (bitcast<u32>(x_1751) * 9u);
  let x_1755 : u32 = u_xlatu46;
  u_xlatu25 = (x_1755 >> 11u);
  let x_1758 : u32 = u_xlatu46;
  let x_1759 : u32 = u_xlatu25;
  u_xlati46 = bitcast<i32>((x_1758 ^ x_1759));
  let x_1762 : i32 = u_xlati46;
  u_xlati46 = (x_1762 * 32769i);
  let x_1766 : i32 = u_xlati46;
  let x_1769 : u32 = u_xlatu2.y;
  u_xlati24 = bitcast<i32>((bitcast<u32>(x_1766) ^ x_1769));
  let x_1773 : i32 = u_xlati24;
  u_xlatu24 = (bitcast<u32>(x_1773) * 1025u);
  let x_1776 : u32 = u_xlatu24;
  u_xlatu46 = (x_1776 >> 6u);
  let x_1778 : u32 = u_xlatu46;
  let x_1779 : u32 = u_xlatu24;
  u_xlati24 = bitcast<i32>((x_1778 ^ x_1779));
  let x_1782 : i32 = u_xlati24;
  u_xlatu24 = (bitcast<u32>(x_1782) * 9u);
  let x_1785 : u32 = u_xlatu24;
  u_xlatu46 = (x_1785 >> 11u);
  let x_1787 : u32 = u_xlatu46;
  let x_1788 : u32 = u_xlatu24;
  u_xlati24 = bitcast<i32>((x_1787 ^ x_1788));
  let x_1791 : i32 = u_xlati24;
  u_xlati24 = (x_1791 * 32769i);
  let x_1794 : i32 = u_xlati24;
  let x_1797 : u32 = u_xlatu2.x;
  u_xlati2 = bitcast<i32>((bitcast<u32>(x_1794) ^ x_1797));
  let x_1800 : i32 = u_xlati2;
  u_xlatu2.x = (bitcast<u32>(x_1800) * 1025u);
  let x_1805 : u32 = u_xlatu2.x;
  u_xlatu24 = (x_1805 >> 6u);
  let x_1807 : u32 = u_xlatu24;
  let x_1809 : u32 = u_xlatu2.x;
  u_xlati2 = bitcast<i32>((x_1807 ^ x_1809));
  let x_1812 : i32 = u_xlati2;
  u_xlatu2.x = (bitcast<u32>(x_1812) * 9u);
  let x_1817 : u32 = u_xlatu2.x;
  u_xlatu24 = (x_1817 >> 11u);
  let x_1819 : u32 = u_xlatu24;
  let x_1821 : u32 = u_xlatu2.x;
  u_xlati2 = bitcast<i32>((x_1819 ^ x_1821));
  let x_1824 : i32 = u_xlati2;
  u_xlati2 = (x_1824 * 32769i);
  param = 1065353216i;
  let x_1830 : i32 = u_xlati2;
  param_1 = x_1830;
  param_2 = 0i;
  param_3 = 23i;
  let x_1833 : i32 = int_bitfieldInsert_i1_i1_i1_i1_(&(param), &(param_1), &(param_2), &(param_3));
  u_xlat2.x = bitcast<f32>(x_1833);
  let x_1837 : f32 = u_xlat2.x;
  u_xlat2.x = (x_1837 + -1.0f);
  let x_1842 : f32 = u_xlat2.x;
  u_xlat24.x = (-(x_1842) + 1.0f);
  let x_1846 : bool = u_xlatb3;
  if (x_1846) {
    let x_1851 : f32 = u_xlat2.x;
    x_1847 = x_1851;
  } else {
    let x_1854 : f32 = u_xlat24.x;
    x_1847 = x_1854;
  }
  let x_1855 : f32 = x_1847;
  u_xlat2.x = x_1855;
  let x_1857 : f32 = u_xlat67;
  let x_1860 : f32 = u_xlat2.x;
  u_xlat67 = ((x_1857 * 2.0f) + -(x_1860));
  let x_1863 : f32 = u_xlat67;
  let x_1865 : f32 = u_xlat3.w;
  u_xlat2.x = (x_1863 * x_1865);
  let x_1872 : f32 = u_xlat2.x;
  u_xlatb24.x = (x_1872 >= 0.400000006f);
  let x_1877 : bool = u_xlatb24.x;
  if (x_1877) {
    let x_1882 : f32 = u_xlat2.x;
    x_1878 = x_1882;
  } else {
    x_1878 = 0.0f;
  }
  let x_1884 : f32 = x_1878;
  u_xlat24.x = x_1884;
  let x_1887 : f32 = u_xlat3.w;
  let x_1888 : f32 = u_xlat67;
  u_xlat67 = ((x_1887 * x_1888) + -0.400000006f);
  let x_1894 : f32 = u_xlat2.x;
  u_xlat46 = dpdxCoarse(x_1894);
  let x_1897 : f32 = u_xlat2.x;
  u_xlat2.x = dpdyCoarse(x_1897);
  let x_1901 : f32 = u_xlat2.x;
  let x_1903 : f32 = u_xlat46;
  u_xlat2.x = (abs(x_1901) + abs(x_1903));
  let x_1908 : f32 = u_xlat2.x;
  u_xlat2.x = max(x_1908, 0.0001f);
  let x_1912 : f32 = u_xlat67;
  let x_1914 : f32 = u_xlat2.x;
  u_xlat67 = (x_1912 / x_1914);
  let x_1916 : f32 = u_xlat67;
  u_xlat67 = (x_1916 + 0.5f);
  let x_1918 : f32 = u_xlat67;
  u_xlat67 = clamp(x_1918, 0.0f, 1.0f);
  let x_1922 : f32 = x_90.x_AlphaToMaskAvailable;
  u_xlatb2 = !((x_1922 == 0.0f));
  let x_1924 : bool = u_xlatb2;
  if (x_1924) {
    let x_1928 : f32 = u_xlat67;
    x_1925 = x_1928;
  } else {
    let x_1931 : f32 = u_xlat24.x;
    x_1925 = x_1931;
  }
  let x_1932 : f32 = x_1925;
  u_xlat67 = x_1932;
  let x_1933 : f32 = u_xlat67;
  u_xlat24.x = (x_1933 + -0.0001f);
  let x_1938 : f32 = u_xlat24.x;
  u_xlatb24.x = (x_1938 < 0.0f);
  let x_1942 : bool = u_xlatb24.x;
  if (((select(0i, 1i, x_1942) * -1i) != 0i)) {
    discard;
  }
  let x_1952 : f32 = vs_INTERP2.w;
  u_xlatb24.x = (0.0f < x_1952);
  let x_1956 : f32 = x_145.unity_WorldTransformParams.w;
  u_xlatb24.y = (x_1956 >= 0.0f);
  let x_1960 : bool = u_xlatb24.x;
  u_xlat24.x = select(-1.0f, 1.0f, x_1960);
  let x_1964 : bool = u_xlatb24.y;
  u_xlat24.y = select(-1.0f, 1.0f, x_1964);
  let x_1968 : f32 = u_xlat24.y;
  let x_1970 : f32 = u_xlat24.x;
  u_xlat24.x = (x_1968 * x_1970);
  let x_1973 : vec3<f32> = vs_INTERP1;
  let x_1975 : vec4<f32> = vs_INTERP2;
  let x_1977 : vec3<f32> = (vec3<f32>(x_1973.z, x_1973.x, x_1973.y) * vec3<f32>(x_1975.y, x_1975.z, x_1975.x));
  let x_1978 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_1977.x, x_1977.y, x_1977.z, x_1978.w);
  let x_1980 : vec3<f32> = vs_INTERP1;
  let x_1982 : vec4<f32> = vs_INTERP2;
  let x_1985 : vec4<f32> = u_xlat3;
  let x_1988 : vec3<f32> = ((vec3<f32>(x_1980.y, x_1980.z, x_1980.x) * vec3<f32>(x_1982.z, x_1982.x, x_1982.y)) + -(vec3<f32>(x_1985.x, x_1985.y, x_1985.z)));
  let x_1989 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_1988.x, x_1988.y, x_1988.z, x_1989.w);
  let x_1991 : vec2<f32> = u_xlat24;
  let x_1993 : vec4<f32> = u_xlat3;
  let x_1995 : vec3<f32> = (vec3<f32>(x_1991.x, x_1991.x, x_1991.x) * vec3<f32>(x_1993.x, x_1993.y, x_1993.z));
  let x_1996 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_1995.x, x_1995.y, x_1995.z, x_1996.w);
  let x_1998 : vec4<f32> = u_xlat3;
  let x_2000 : vec3<f32> = u_xlat27;
  let x_2002 : vec3<f32> = (vec3<f32>(x_1998.x, x_1998.y, x_1998.z) * vec3<f32>(x_2000.y, x_2000.y, x_2000.y));
  let x_2003 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_2002.x, x_2002.y, x_2002.z, x_2003.w);
  let x_2005 : vec3<f32> = u_xlat27;
  let x_2007 : vec4<f32> = vs_INTERP2;
  let x_2010 : vec4<f32> = u_xlat3;
  let x_2012 : vec3<f32> = ((vec3<f32>(x_2005.x, x_2005.x, x_2005.x) * vec3<f32>(x_2007.x, x_2007.y, x_2007.z)) + vec3<f32>(x_2010.x, x_2010.y, x_2010.z));
  let x_2013 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_2012.x, x_2012.y, x_2012.z, x_2013.w);
  let x_2015 : vec3<f32> = u_xlat27;
  let x_2017 : vec3<f32> = vs_INTERP1;
  let x_2019 : vec4<f32> = u_xlat3;
  let x_2021 : vec3<f32> = ((vec3<f32>(x_2015.z, x_2015.z, x_2015.z) * x_2017) + vec3<f32>(x_2019.x, x_2019.y, x_2019.z));
  let x_2022 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_2021.x, x_2021.y, x_2021.z, x_2022.w);
  let x_2024 : vec4<f32> = u_xlat3;
  let x_2026 : vec4<f32> = u_xlat3;
  u_xlat24.x = dot(vec3<f32>(x_2024.x, x_2024.y, x_2024.z), vec3<f32>(x_2026.x, x_2026.y, x_2026.z));
  let x_2031 : f32 = u_xlat24.x;
  u_xlat24.x = inverseSqrt(x_2031);
  let x_2034 : vec2<f32> = u_xlat24;
  let x_2036 : vec4<f32> = u_xlat3;
  let x_2038 : vec3<f32> = (vec3<f32>(x_2034.x, x_2034.x, x_2034.x) * vec3<f32>(x_2036.x, x_2036.y, x_2036.z));
  let x_2039 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_2038.x, x_2038.y, x_2038.z, x_2039.w);
  let x_2042 : f32 = vs_INTERP0.y;
  let x_2044 : f32 = x_90.unity_MatrixV[1i].z;
  u_xlat24.x = (x_2042 * x_2044);
  let x_2048 : f32 = x_90.unity_MatrixV[0i].z;
  let x_2050 : f32 = vs_INTERP0.x;
  let x_2053 : f32 = u_xlat24.x;
  u_xlat24.x = ((x_2048 * x_2050) + x_2053);
  let x_2057 : f32 = x_90.unity_MatrixV[2i].z;
  let x_2059 : f32 = vs_INTERP0.z;
  let x_2062 : f32 = u_xlat24.x;
  u_xlat24.x = ((x_2057 * x_2059) + x_2062);
  let x_2066 : f32 = u_xlat24.x;
  let x_2068 : f32 = x_90.unity_MatrixV[3i].z;
  u_xlat24.x = (x_2066 + x_2068);
  let x_2072 : f32 = u_xlat24.x;
  let x_2075 : f32 = x_90.x_ProjectionParams.y;
  u_xlat24.x = (-(x_2072) + -(x_2075));
  let x_2080 : f32 = u_xlat24.x;
  u_xlat24.x = max(x_2080, 0.0f);
  let x_2084 : f32 = u_xlat24.x;
  let x_2087 : f32 = x_90.unity_FogParams.x;
  u_xlat24.x = (x_2084 * x_2087);
  let x_2097 : vec2<f32> = vs_INTERP5;
  let x_2099 : f32 = x_90.x_GlobalMipBias.x;
  let x_2100 : vec4<f32> = textureSampleBias(unity_Lightmap, samplerunity_Lightmap, x_2097, x_2099);
  u_xlat27 = vec3<f32>(x_2100.x, x_2100.y, x_2100.z);
  let x_2103 : vec4<f32> = x_90.x_ScaledScreenParams;
  let x_2104 : vec2<f32> = vec2<f32>(x_2103.x, x_2103.y);
  let x_2108 : vec2<f32> = (vec2<f32>(1.0f, 1.0f) / vec2<f32>(x_2104.x, x_2104.y));
  let x_2109 : vec4<f32> = u_xlat7;
  u_xlat7 = vec4<f32>(x_2108.x, x_2108.y, x_2109.z, x_2109.w);
  let x_2111 : vec4<f32> = u_xlat7;
  let x_2113 : vec4<f32> = hlslcc_FragCoord;
  let x_2115 : vec2<f32> = (vec2<f32>(x_2111.x, x_2111.y) * vec2<f32>(x_2113.x, x_2113.y));
  let x_2116 : vec4<f32> = u_xlat7;
  u_xlat7 = vec4<f32>(x_2115.x, x_2115.y, x_2116.z, x_2116.w);
  let x_2119 : f32 = u_xlat7.y;
  let x_2122 : f32 = x_90.x_ScaleBiasRt.x;
  let x_2125 : f32 = x_90.x_ScaleBiasRt.y;
  u_xlat46 = ((x_2119 * x_2122) + x_2125);
  let x_2127 : f32 = u_xlat46;
  u_xlat7.z = (-(x_2127) + 1.0f);
  let x_2132 : f32 = u_xlat5.x;
  u_xlat5.x = x_2132;
  let x_2135 : f32 = u_xlat5.x;
  u_xlat5.x = clamp(x_2135, 0.0f, 1.0f);
  let x_2138 : f32 = u_xlat67;
  u_xlat67 = x_2138;
  let x_2139 : f32 = u_xlat67;
  u_xlat67 = clamp(x_2139, 0.0f, 1.0f);
  let x_2141 : vec3<f32> = u_xlat4;
  u_xlat4 = (x_2141 * vec3<f32>(0.959999979f, 0.959999979f, 0.959999979f));
  let x_2146 : f32 = u_xlat5.x;
  u_xlat46 = (-(x_2146) + 1.0f);
  let x_2150 : f32 = u_xlat46;
  let x_2151 : f32 = u_xlat46;
  u_xlat69 = (x_2150 * x_2151);
  let x_2153 : f32 = u_xlat69;
  u_xlat69 = max(x_2153, 0.0078125f);
  let x_2156 : f32 = u_xlat69;
  let x_2157 : f32 = u_xlat69;
  u_xlat72 = (x_2156 * x_2157);
  let x_2160 : f32 = u_xlat5.x;
  u_xlat5.x = (x_2160 + 0.040000021f);
  let x_2165 : f32 = u_xlat5.x;
  u_xlat5.x = min(x_2165, 1.0f);
  let x_2169 : f32 = u_xlat69;
  u_xlat29 = ((x_2169 * 4.0f) + 2.0f);
  let x_2177 : vec4<f32> = u_xlat7;
  let x_2180 : f32 = x_90.x_GlobalMipBias.x;
  let x_2181 : vec4<f32> = textureSampleBias(x_ScreenSpaceOcclusionTexture, sampler_ScreenSpaceOcclusionTexture, vec2<f32>(x_2177.x, x_2177.z), x_2180);
  u_xlat7.x = x_2181.x;
  let x_2185 : f32 = u_xlat7.x;
  u_xlat51.x = (x_2185 + -1.0f);
  let x_2189 : f32 = x_90.x_AmbientOcclusionParam.w;
  let x_2191 : f32 = u_xlat51.x;
  u_xlat51.x = ((x_2189 * x_2191) + 1.0f);
  let x_2196 : f32 = u_xlat7.x;
  let x_2198 : f32 = vs_INTERP4.w;
  u_xlat7.x = min(x_2196, x_2198);
  let x_2201 : bool = u_xlatb66;
  if (x_2201) {
    let x_2205 : f32 = x_255.x_MainLightShadowParams.y;
    u_xlatb66 = (x_2205 == 1.0f);
    let x_2207 : bool = u_xlatb66;
    if (x_2207) {
      let x_2210 : vec4<f32> = u_xlat6;
      let x_2213 : vec4<f32> = x_255.x_MainLightShadowOffset0;
      u_xlat8 = (vec4<f32>(x_2210.x, x_2210.y, x_2210.x, x_2210.y) + x_2213);
      let x_2216 : vec4<f32> = u_xlat8;
      let x_2217 : vec2<f32> = vec2<f32>(x_2216.x, x_2216.y);
      let x_2219 : f32 = u_xlat6.z;
      txVec30 = vec3<f32>(x_2217.x, x_2217.y, x_2219);
      let x_2226 : vec3<f32> = txVec30;
      let x_2228 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2226.xy, x_2226.z);
      u_xlat9.x = x_2228;
      let x_2231 : vec4<f32> = u_xlat8;
      let x_2232 : vec2<f32> = vec2<f32>(x_2231.z, x_2231.w);
      let x_2234 : f32 = u_xlat6.z;
      txVec31 = vec3<f32>(x_2232.x, x_2232.y, x_2234);
      let x_2241 : vec3<f32> = txVec31;
      let x_2243 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2241.xy, x_2241.z);
      u_xlat9.y = x_2243;
      let x_2245 : vec4<f32> = u_xlat6;
      let x_2248 : vec4<f32> = x_255.x_MainLightShadowOffset1;
      u_xlat8 = (vec4<f32>(x_2245.x, x_2245.y, x_2245.x, x_2245.y) + x_2248);
      let x_2251 : vec4<f32> = u_xlat8;
      let x_2252 : vec2<f32> = vec2<f32>(x_2251.x, x_2251.y);
      let x_2254 : f32 = u_xlat6.z;
      txVec32 = vec3<f32>(x_2252.x, x_2252.y, x_2254);
      let x_2261 : vec3<f32> = txVec32;
      let x_2263 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2261.xy, x_2261.z);
      u_xlat9.z = x_2263;
      let x_2266 : vec4<f32> = u_xlat8;
      let x_2267 : vec2<f32> = vec2<f32>(x_2266.z, x_2266.w);
      let x_2269 : f32 = u_xlat6.z;
      txVec33 = vec3<f32>(x_2267.x, x_2267.y, x_2269);
      let x_2276 : vec3<f32> = txVec33;
      let x_2278 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2276.xy, x_2276.z);
      u_xlat9.w = x_2278;
      let x_2280 : vec4<f32> = u_xlat9;
      u_xlat66 = dot(x_2280, vec4<f32>(0.25f, 0.25f, 0.25f, 0.25f));
    } else {
      let x_2285 : f32 = x_255.x_MainLightShadowParams.y;
      u_xlatb73 = (x_2285 == 2.0f);
      let x_2287 : bool = u_xlatb73;
      if (x_2287) {
        let x_2290 : vec4<f32> = u_xlat6;
        let x_2293 : vec4<f32> = x_255.x_MainLightShadowmapSize;
        let x_2296 : vec2<f32> = ((vec2<f32>(x_2290.x, x_2290.y) * vec2<f32>(x_2293.z, x_2293.w)) + vec2<f32>(0.5f, 0.5f));
        let x_2297 : vec4<f32> = u_xlat8;
        u_xlat8 = vec4<f32>(x_2296.x, x_2296.y, x_2297.z, x_2297.w);
        let x_2299 : vec4<f32> = u_xlat8;
        let x_2301 : vec2<f32> = floor(vec2<f32>(x_2299.x, x_2299.y));
        let x_2302 : vec4<f32> = u_xlat8;
        u_xlat8 = vec4<f32>(x_2301.x, x_2301.y, x_2302.z, x_2302.w);
        let x_2305 : vec4<f32> = u_xlat6;
        let x_2308 : vec4<f32> = x_255.x_MainLightShadowmapSize;
        let x_2311 : vec4<f32> = u_xlat8;
        u_xlat52 = ((vec2<f32>(x_2305.x, x_2305.y) * vec2<f32>(x_2308.z, x_2308.w)) + -(vec2<f32>(x_2311.x, x_2311.y)));
        let x_2315 : vec2<f32> = u_xlat52;
        u_xlat9 = (vec4<f32>(x_2315.x, x_2315.x, x_2315.y, x_2315.y) + vec4<f32>(0.5f, 1.0f, 0.5f, 1.0f));
        let x_2318 : vec4<f32> = u_xlat9;
        let x_2320 : vec4<f32> = u_xlat9;
        u_xlat10 = (vec4<f32>(x_2318.x, x_2318.x, x_2318.z, x_2318.z) * vec4<f32>(x_2320.x, x_2320.x, x_2320.z, x_2320.z));
        let x_2323 : vec4<f32> = u_xlat10;
        let x_2325 : vec2<f32> = (vec2<f32>(x_2323.y, x_2323.w) * vec2<f32>(0.079999998f, 0.079999998f));
        let x_2326 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_2325.x, x_2326.y, x_2325.y, x_2326.w);
        let x_2328 : vec4<f32> = u_xlat10;
        let x_2331 : vec2<f32> = u_xlat52;
        let x_2333 : vec2<f32> = ((vec2<f32>(x_2328.x, x_2328.z) * vec2<f32>(0.5f, 0.5f)) + -(x_2331));
        let x_2334 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_2333.x, x_2333.y, x_2334.z, x_2334.w);
        let x_2336 : vec2<f32> = u_xlat52;
        u_xlat54 = (-(x_2336) + vec2<f32>(1.0f, 1.0f));
        let x_2339 : vec2<f32> = u_xlat52;
        let x_2340 : vec2<f32> = min(x_2339, vec2<f32>(0.0f, 0.0f));
        let x_2341 : vec4<f32> = u_xlat11;
        u_xlat11 = vec4<f32>(x_2340.x, x_2340.y, x_2341.z, x_2341.w);
        let x_2343 : vec4<f32> = u_xlat11;
        let x_2346 : vec4<f32> = u_xlat11;
        let x_2349 : vec2<f32> = u_xlat54;
        let x_2350 : vec2<f32> = ((-(vec2<f32>(x_2343.x, x_2343.y)) * vec2<f32>(x_2346.x, x_2346.y)) + x_2349);
        let x_2351 : vec4<f32> = u_xlat11;
        u_xlat11 = vec4<f32>(x_2350.x, x_2350.y, x_2351.z, x_2351.w);
        let x_2353 : vec2<f32> = u_xlat52;
        u_xlat52 = max(x_2353, vec2<f32>(0.0f, 0.0f));
        let x_2355 : vec2<f32> = u_xlat52;
        let x_2357 : vec2<f32> = u_xlat52;
        let x_2359 : vec4<f32> = u_xlat9;
        u_xlat52 = ((-(x_2355) * x_2357) + vec2<f32>(x_2359.y, x_2359.w));
        let x_2362 : vec4<f32> = u_xlat11;
        let x_2364 : vec2<f32> = (vec2<f32>(x_2362.x, x_2362.y) + vec2<f32>(1.0f, 1.0f));
        let x_2365 : vec4<f32> = u_xlat11;
        u_xlat11 = vec4<f32>(x_2364.x, x_2364.y, x_2365.z, x_2365.w);
        let x_2367 : vec2<f32> = u_xlat52;
        u_xlat52 = (x_2367 + vec2<f32>(1.0f, 1.0f));
        let x_2369 : vec4<f32> = u_xlat10;
        let x_2371 : vec2<f32> = (vec2<f32>(x_2369.x, x_2369.y) * vec2<f32>(0.159999996f, 0.159999996f));
        let x_2372 : vec4<f32> = u_xlat12;
        u_xlat12 = vec4<f32>(x_2371.x, x_2371.y, x_2372.z, x_2372.w);
        let x_2374 : vec2<f32> = u_xlat54;
        let x_2375 : vec2<f32> = (x_2374 * vec2<f32>(0.159999996f, 0.159999996f));
        let x_2376 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_2375.x, x_2375.y, x_2376.z, x_2376.w);
        let x_2378 : vec4<f32> = u_xlat11;
        let x_2380 : vec2<f32> = (vec2<f32>(x_2378.x, x_2378.y) * vec2<f32>(0.159999996f, 0.159999996f));
        let x_2381 : vec4<f32> = u_xlat11;
        u_xlat11 = vec4<f32>(x_2380.x, x_2380.y, x_2381.z, x_2381.w);
        let x_2383 : vec2<f32> = u_xlat52;
        let x_2384 : vec2<f32> = (x_2383 * vec2<f32>(0.159999996f, 0.159999996f));
        let x_2385 : vec4<f32> = u_xlat13;
        u_xlat13 = vec4<f32>(x_2384.x, x_2384.y, x_2385.z, x_2385.w);
        let x_2387 : vec4<f32> = u_xlat9;
        u_xlat52 = (vec2<f32>(x_2387.y, x_2387.w) * vec2<f32>(0.159999996f, 0.159999996f));
        let x_2391 : f32 = u_xlat11.x;
        u_xlat12.z = x_2391;
        let x_2394 : f32 = u_xlat52.x;
        u_xlat12.w = x_2394;
        let x_2397 : f32 = u_xlat13.x;
        u_xlat10.z = x_2397;
        let x_2400 : f32 = u_xlat9.x;
        u_xlat10.w = x_2400;
        let x_2402 : vec4<f32> = u_xlat10;
        let x_2404 : vec4<f32> = u_xlat12;
        u_xlat14 = (vec4<f32>(x_2402.z, x_2402.w, x_2402.x, x_2402.z) + vec4<f32>(x_2404.z, x_2404.w, x_2404.x, x_2404.z));
        let x_2408 : f32 = u_xlat12.y;
        u_xlat11.z = x_2408;
        let x_2411 : f32 = u_xlat52.y;
        u_xlat11.w = x_2411;
        let x_2414 : f32 = u_xlat10.y;
        u_xlat13.z = x_2414;
        let x_2417 : f32 = u_xlat9.z;
        u_xlat13.w = x_2417;
        let x_2419 : vec4<f32> = u_xlat11;
        let x_2421 : vec4<f32> = u_xlat13;
        let x_2423 : vec3<f32> = (vec3<f32>(x_2419.z, x_2419.y, x_2419.w) + vec3<f32>(x_2421.z, x_2421.y, x_2421.w));
        let x_2424 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_2423.x, x_2423.y, x_2423.z, x_2424.w);
        let x_2426 : vec4<f32> = u_xlat10;
        let x_2428 : vec4<f32> = u_xlat14;
        let x_2430 : vec3<f32> = (vec3<f32>(x_2426.x, x_2426.z, x_2426.w) / vec3<f32>(x_2428.z, x_2428.w, x_2428.y));
        let x_2431 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_2430.x, x_2430.y, x_2430.z, x_2431.w);
        let x_2433 : vec4<f32> = u_xlat10;
        let x_2435 : vec3<f32> = (vec3<f32>(x_2433.x, x_2433.y, x_2433.z) + vec3<f32>(-2.5f, -0.5f, 1.5f));
        let x_2436 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_2435.x, x_2435.y, x_2435.z, x_2436.w);
        let x_2438 : vec4<f32> = u_xlat13;
        let x_2440 : vec4<f32> = u_xlat9;
        let x_2442 : vec3<f32> = (vec3<f32>(x_2438.z, x_2438.y, x_2438.w) / vec3<f32>(x_2440.x, x_2440.y, x_2440.z));
        let x_2443 : vec4<f32> = u_xlat11;
        u_xlat11 = vec4<f32>(x_2442.x, x_2442.y, x_2442.z, x_2443.w);
        let x_2445 : vec4<f32> = u_xlat11;
        let x_2447 : vec3<f32> = (vec3<f32>(x_2445.x, x_2445.y, x_2445.z) + vec3<f32>(-2.5f, -0.5f, 1.5f));
        let x_2448 : vec4<f32> = u_xlat11;
        u_xlat11 = vec4<f32>(x_2447.x, x_2447.y, x_2447.z, x_2448.w);
        let x_2450 : vec4<f32> = u_xlat10;
        let x_2453 : vec4<f32> = x_255.x_MainLightShadowmapSize;
        let x_2455 : vec3<f32> = (vec3<f32>(x_2450.y, x_2450.x, x_2450.z) * vec3<f32>(x_2453.x, x_2453.x, x_2453.x));
        let x_2456 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_2455.x, x_2455.y, x_2455.z, x_2456.w);
        let x_2458 : vec4<f32> = u_xlat11;
        let x_2461 : vec4<f32> = x_255.x_MainLightShadowmapSize;
        let x_2463 : vec3<f32> = (vec3<f32>(x_2458.x, x_2458.y, x_2458.z) * vec3<f32>(x_2461.y, x_2461.y, x_2461.y));
        let x_2464 : vec4<f32> = u_xlat11;
        u_xlat11 = vec4<f32>(x_2463.x, x_2463.y, x_2463.z, x_2464.w);
        let x_2467 : f32 = u_xlat11.x;
        u_xlat10.w = x_2467;
        let x_2469 : vec4<f32> = u_xlat8;
        let x_2472 : vec4<f32> = x_255.x_MainLightShadowmapSize;
        let x_2475 : vec4<f32> = u_xlat10;
        u_xlat12 = ((vec4<f32>(x_2469.x, x_2469.y, x_2469.x, x_2469.y) * vec4<f32>(x_2472.x, x_2472.y, x_2472.x, x_2472.y)) + vec4<f32>(x_2475.y, x_2475.w, x_2475.x, x_2475.w));
        let x_2478 : vec4<f32> = u_xlat8;
        let x_2481 : vec4<f32> = x_255.x_MainLightShadowmapSize;
        let x_2484 : vec4<f32> = u_xlat10;
        u_xlat52 = ((vec2<f32>(x_2478.x, x_2478.y) * vec2<f32>(x_2481.x, x_2481.y)) + vec2<f32>(x_2484.z, x_2484.w));
        let x_2488 : f32 = u_xlat10.y;
        u_xlat11.w = x_2488;
        let x_2490 : vec4<f32> = u_xlat11;
        let x_2491 : vec2<f32> = vec2<f32>(x_2490.y, x_2490.z);
        let x_2492 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_2492.x, x_2491.x, x_2492.z, x_2491.y);
        let x_2494 : vec4<f32> = u_xlat8;
        let x_2497 : vec4<f32> = x_255.x_MainLightShadowmapSize;
        let x_2500 : vec4<f32> = u_xlat10;
        u_xlat13 = ((vec4<f32>(x_2494.x, x_2494.y, x_2494.x, x_2494.y) * vec4<f32>(x_2497.x, x_2497.y, x_2497.x, x_2497.y)) + vec4<f32>(x_2500.x, x_2500.y, x_2500.z, x_2500.y));
        let x_2503 : vec4<f32> = u_xlat8;
        let x_2506 : vec4<f32> = x_255.x_MainLightShadowmapSize;
        let x_2509 : vec4<f32> = u_xlat11;
        u_xlat11 = ((vec4<f32>(x_2503.x, x_2503.y, x_2503.x, x_2503.y) * vec4<f32>(x_2506.x, x_2506.y, x_2506.x, x_2506.y)) + vec4<f32>(x_2509.w, x_2509.y, x_2509.w, x_2509.z));
        let x_2512 : vec4<f32> = u_xlat8;
        let x_2515 : vec4<f32> = x_255.x_MainLightShadowmapSize;
        let x_2518 : vec4<f32> = u_xlat10;
        u_xlat10 = ((vec4<f32>(x_2512.x, x_2512.y, x_2512.x, x_2512.y) * vec4<f32>(x_2515.x, x_2515.y, x_2515.x, x_2515.y)) + vec4<f32>(x_2518.x, x_2518.w, x_2518.z, x_2518.w));
        let x_2521 : vec4<f32> = u_xlat9;
        let x_2523 : vec4<f32> = u_xlat14;
        u_xlat15 = (vec4<f32>(x_2521.x, x_2521.x, x_2521.x, x_2521.y) * vec4<f32>(x_2523.z, x_2523.w, x_2523.y, x_2523.z));
        let x_2526 : vec4<f32> = u_xlat9;
        let x_2528 : vec4<f32> = u_xlat14;
        u_xlat16 = (vec4<f32>(x_2526.y, x_2526.y, x_2526.z, x_2526.z) * x_2528);
        let x_2532 : f32 = u_xlat9.z;
        let x_2534 : f32 = u_xlat14.y;
        u_xlat73 = (x_2532 * x_2534);
        let x_2537 : vec4<f32> = u_xlat12;
        let x_2538 : vec2<f32> = vec2<f32>(x_2537.x, x_2537.y);
        let x_2540 : f32 = u_xlat6.z;
        txVec34 = vec3<f32>(x_2538.x, x_2538.y, x_2540);
        let x_2547 : vec3<f32> = txVec34;
        let x_2549 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2547.xy, x_2547.z);
        u_xlat8.x = x_2549;
        let x_2552 : vec4<f32> = u_xlat12;
        let x_2553 : vec2<f32> = vec2<f32>(x_2552.z, x_2552.w);
        let x_2555 : f32 = u_xlat6.z;
        txVec35 = vec3<f32>(x_2553.x, x_2553.y, x_2555);
        let x_2562 : vec3<f32> = txVec35;
        let x_2564 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2562.xy, x_2562.z);
        u_xlat30.x = x_2564;
        let x_2567 : f32 = u_xlat30.x;
        let x_2569 : f32 = u_xlat15.y;
        u_xlat30.x = (x_2567 * x_2569);
        let x_2573 : f32 = u_xlat15.x;
        let x_2575 : f32 = u_xlat8.x;
        let x_2578 : f32 = u_xlat30.x;
        u_xlat8.x = ((x_2573 * x_2575) + x_2578);
        let x_2582 : vec2<f32> = u_xlat52;
        let x_2584 : f32 = u_xlat6.z;
        txVec36 = vec3<f32>(x_2582.x, x_2582.y, x_2584);
        let x_2591 : vec3<f32> = txVec36;
        let x_2593 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2591.xy, x_2591.z);
        u_xlat30.x = x_2593;
        let x_2596 : f32 = u_xlat15.z;
        let x_2598 : f32 = u_xlat30.x;
        let x_2601 : f32 = u_xlat8.x;
        u_xlat8.x = ((x_2596 * x_2598) + x_2601);
        let x_2605 : vec4<f32> = u_xlat11;
        let x_2606 : vec2<f32> = vec2<f32>(x_2605.x, x_2605.y);
        let x_2608 : f32 = u_xlat6.z;
        txVec37 = vec3<f32>(x_2606.x, x_2606.y, x_2608);
        let x_2615 : vec3<f32> = txVec37;
        let x_2617 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2615.xy, x_2615.z);
        u_xlat30.x = x_2617;
        let x_2620 : f32 = u_xlat15.w;
        let x_2622 : f32 = u_xlat30.x;
        let x_2625 : f32 = u_xlat8.x;
        u_xlat8.x = ((x_2620 * x_2622) + x_2625);
        let x_2629 : vec4<f32> = u_xlat13;
        let x_2630 : vec2<f32> = vec2<f32>(x_2629.x, x_2629.y);
        let x_2632 : f32 = u_xlat6.z;
        txVec38 = vec3<f32>(x_2630.x, x_2630.y, x_2632);
        let x_2639 : vec3<f32> = txVec38;
        let x_2641 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2639.xy, x_2639.z);
        u_xlat30.x = x_2641;
        let x_2644 : f32 = u_xlat16.x;
        let x_2646 : f32 = u_xlat30.x;
        let x_2649 : f32 = u_xlat8.x;
        u_xlat8.x = ((x_2644 * x_2646) + x_2649);
        let x_2653 : vec4<f32> = u_xlat13;
        let x_2654 : vec2<f32> = vec2<f32>(x_2653.z, x_2653.w);
        let x_2656 : f32 = u_xlat6.z;
        txVec39 = vec3<f32>(x_2654.x, x_2654.y, x_2656);
        let x_2663 : vec3<f32> = txVec39;
        let x_2665 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2663.xy, x_2663.z);
        u_xlat30.x = x_2665;
        let x_2668 : f32 = u_xlat16.y;
        let x_2670 : f32 = u_xlat30.x;
        let x_2673 : f32 = u_xlat8.x;
        u_xlat8.x = ((x_2668 * x_2670) + x_2673);
        let x_2677 : vec4<f32> = u_xlat11;
        let x_2678 : vec2<f32> = vec2<f32>(x_2677.z, x_2677.w);
        let x_2680 : f32 = u_xlat6.z;
        txVec40 = vec3<f32>(x_2678.x, x_2678.y, x_2680);
        let x_2687 : vec3<f32> = txVec40;
        let x_2689 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2687.xy, x_2687.z);
        u_xlat30.x = x_2689;
        let x_2692 : f32 = u_xlat16.z;
        let x_2694 : f32 = u_xlat30.x;
        let x_2697 : f32 = u_xlat8.x;
        u_xlat8.x = ((x_2692 * x_2694) + x_2697);
        let x_2701 : vec4<f32> = u_xlat10;
        let x_2702 : vec2<f32> = vec2<f32>(x_2701.x, x_2701.y);
        let x_2704 : f32 = u_xlat6.z;
        txVec41 = vec3<f32>(x_2702.x, x_2702.y, x_2704);
        let x_2711 : vec3<f32> = txVec41;
        let x_2713 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2711.xy, x_2711.z);
        u_xlat30.x = x_2713;
        let x_2716 : f32 = u_xlat16.w;
        let x_2718 : f32 = u_xlat30.x;
        let x_2721 : f32 = u_xlat8.x;
        u_xlat8.x = ((x_2716 * x_2718) + x_2721);
        let x_2725 : vec4<f32> = u_xlat10;
        let x_2726 : vec2<f32> = vec2<f32>(x_2725.z, x_2725.w);
        let x_2728 : f32 = u_xlat6.z;
        txVec42 = vec3<f32>(x_2726.x, x_2726.y, x_2728);
        let x_2735 : vec3<f32> = txVec42;
        let x_2737 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2735.xy, x_2735.z);
        u_xlat30.x = x_2737;
        let x_2739 : f32 = u_xlat73;
        let x_2741 : f32 = u_xlat30.x;
        let x_2744 : f32 = u_xlat8.x;
        u_xlat66 = ((x_2739 * x_2741) + x_2744);
      } else {
        let x_2747 : vec4<f32> = u_xlat6;
        let x_2750 : vec4<f32> = x_255.x_MainLightShadowmapSize;
        let x_2753 : vec2<f32> = ((vec2<f32>(x_2747.x, x_2747.y) * vec2<f32>(x_2750.z, x_2750.w)) + vec2<f32>(0.5f, 0.5f));
        let x_2754 : vec4<f32> = u_xlat8;
        u_xlat8 = vec4<f32>(x_2753.x, x_2753.y, x_2754.z, x_2754.w);
        let x_2756 : vec4<f32> = u_xlat8;
        let x_2758 : vec2<f32> = floor(vec2<f32>(x_2756.x, x_2756.y));
        let x_2759 : vec4<f32> = u_xlat8;
        u_xlat8 = vec4<f32>(x_2758.x, x_2758.y, x_2759.z, x_2759.w);
        let x_2761 : vec4<f32> = u_xlat6;
        let x_2764 : vec4<f32> = x_255.x_MainLightShadowmapSize;
        let x_2767 : vec4<f32> = u_xlat8;
        u_xlat52 = ((vec2<f32>(x_2761.x, x_2761.y) * vec2<f32>(x_2764.z, x_2764.w)) + -(vec2<f32>(x_2767.x, x_2767.y)));
        let x_2771 : vec2<f32> = u_xlat52;
        u_xlat9 = (vec4<f32>(x_2771.x, x_2771.x, x_2771.y, x_2771.y) + vec4<f32>(0.5f, 1.0f, 0.5f, 1.0f));
        let x_2774 : vec4<f32> = u_xlat9;
        let x_2776 : vec4<f32> = u_xlat9;
        u_xlat10 = (vec4<f32>(x_2774.x, x_2774.x, x_2774.z, x_2774.z) * vec4<f32>(x_2776.x, x_2776.x, x_2776.z, x_2776.z));
        let x_2779 : vec4<f32> = u_xlat10;
        let x_2781 : vec2<f32> = (vec2<f32>(x_2779.y, x_2779.w) * vec2<f32>(0.040816002f, 0.040816002f));
        let x_2782 : vec4<f32> = u_xlat11;
        u_xlat11 = vec4<f32>(x_2782.x, x_2781.x, x_2782.z, x_2781.y);
        let x_2784 : vec4<f32> = u_xlat10;
        let x_2787 : vec2<f32> = u_xlat52;
        let x_2789 : vec2<f32> = ((vec2<f32>(x_2784.x, x_2784.z) * vec2<f32>(0.5f, 0.5f)) + -(x_2787));
        let x_2790 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_2789.x, x_2790.y, x_2789.y, x_2790.w);
        let x_2792 : vec2<f32> = u_xlat52;
        let x_2794 : vec2<f32> = (-(x_2792) + vec2<f32>(1.0f, 1.0f));
        let x_2795 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_2794.x, x_2794.y, x_2795.z, x_2795.w);
        let x_2797 : vec2<f32> = u_xlat52;
        u_xlat54 = min(x_2797, vec2<f32>(0.0f, 0.0f));
        let x_2799 : vec2<f32> = u_xlat54;
        let x_2801 : vec2<f32> = u_xlat54;
        let x_2803 : vec4<f32> = u_xlat10;
        let x_2805 : vec2<f32> = ((-(x_2799) * x_2801) + vec2<f32>(x_2803.x, x_2803.y));
        let x_2806 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_2805.x, x_2805.y, x_2806.z, x_2806.w);
        let x_2808 : vec2<f32> = u_xlat52;
        u_xlat54 = max(x_2808, vec2<f32>(0.0f, 0.0f));
        let x_2810 : vec2<f32> = u_xlat54;
        let x_2812 : vec2<f32> = u_xlat54;
        let x_2814 : vec4<f32> = u_xlat9;
        let x_2816 : vec2<f32> = ((-(x_2810) * x_2812) + vec2<f32>(x_2814.y, x_2814.w));
        let x_2817 : vec3<f32> = u_xlat31;
        u_xlat31 = vec3<f32>(x_2816.x, x_2817.y, x_2816.y);
        let x_2819 : vec4<f32> = u_xlat10;
        let x_2821 : vec2<f32> = (vec2<f32>(x_2819.x, x_2819.y) + vec2<f32>(2.0f, 2.0f));
        let x_2822 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_2821.x, x_2821.y, x_2822.z, x_2822.w);
        let x_2824 : vec3<f32> = u_xlat31;
        let x_2826 : vec2<f32> = (vec2<f32>(x_2824.x, x_2824.z) + vec2<f32>(2.0f, 2.0f));
        let x_2827 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_2827.x, x_2826.x, x_2827.z, x_2826.y);
        let x_2830 : f32 = u_xlat9.y;
        u_xlat12.z = (x_2830 * 0.081632003f);
        let x_2833 : vec4<f32> = u_xlat9;
        let x_2835 : vec3<f32> = (vec3<f32>(x_2833.z, x_2833.x, x_2833.w) * vec3<f32>(0.081632003f, 0.081632003f, 0.081632003f));
        let x_2836 : vec4<f32> = u_xlat13;
        u_xlat13 = vec4<f32>(x_2835.x, x_2835.y, x_2835.z, x_2836.w);
        let x_2838 : vec4<f32> = u_xlat10;
        let x_2840 : vec2<f32> = (vec2<f32>(x_2838.x, x_2838.y) * vec2<f32>(0.081632003f, 0.081632003f));
        let x_2841 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_2840.x, x_2840.y, x_2841.z, x_2841.w);
        let x_2844 : f32 = u_xlat13.y;
        u_xlat12.x = x_2844;
        let x_2846 : vec2<f32> = u_xlat52;
        let x_2849 : vec2<f32> = ((vec2<f32>(x_2846.x, x_2846.x) * vec2<f32>(-0.081632003f, 0.081632003f)) + vec2<f32>(0.163264006f, 0.081632003f));
        let x_2850 : vec4<f32> = u_xlat12;
        u_xlat12 = vec4<f32>(x_2850.x, x_2849.x, x_2850.z, x_2849.y);
        let x_2852 : vec2<f32> = u_xlat52;
        let x_2855 : vec2<f32> = ((vec2<f32>(x_2852.x, x_2852.x) * vec2<f32>(-0.081632003f, 0.081632003f)) + vec2<f32>(0.081632003f, 0.163264006f));
        let x_2856 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_2855.x, x_2856.y, x_2855.y, x_2856.w);
        let x_2859 : f32 = u_xlat9.x;
        u_xlat10.y = x_2859;
        let x_2862 : f32 = u_xlat11.y;
        u_xlat10.w = x_2862;
        let x_2864 : vec4<f32> = u_xlat10;
        let x_2865 : vec4<f32> = u_xlat12;
        u_xlat12 = (x_2864 + x_2865);
        let x_2867 : vec2<f32> = u_xlat52;
        let x_2870 : vec2<f32> = ((vec2<f32>(x_2867.y, x_2867.y) * vec2<f32>(-0.081632003f, 0.081632003f)) + vec2<f32>(0.163264006f, 0.081632003f));
        let x_2871 : vec4<f32> = u_xlat13;
        u_xlat13 = vec4<f32>(x_2871.x, x_2870.x, x_2871.z, x_2870.y);
        let x_2873 : vec2<f32> = u_xlat52;
        let x_2876 : vec2<f32> = ((vec2<f32>(x_2873.y, x_2873.y) * vec2<f32>(-0.081632003f, 0.081632003f)) + vec2<f32>(0.081632003f, 0.163264006f));
        let x_2877 : vec4<f32> = u_xlat11;
        u_xlat11 = vec4<f32>(x_2876.x, x_2877.y, x_2876.y, x_2877.w);
        let x_2880 : f32 = u_xlat9.y;
        u_xlat11.y = x_2880;
        let x_2882 : vec4<f32> = u_xlat11;
        let x_2883 : vec4<f32> = u_xlat13;
        u_xlat9 = (x_2882 + x_2883);
        let x_2885 : vec4<f32> = u_xlat10;
        let x_2886 : vec4<f32> = u_xlat12;
        u_xlat10 = (x_2885 / x_2886);
        let x_2888 : vec4<f32> = u_xlat10;
        u_xlat10 = (x_2888 + vec4<f32>(-3.5f, -1.5f, 0.5f, 2.5f));
        let x_2890 : vec4<f32> = u_xlat11;
        let x_2891 : vec4<f32> = u_xlat9;
        u_xlat11 = (x_2890 / x_2891);
        let x_2893 : vec4<f32> = u_xlat11;
        u_xlat11 = (x_2893 + vec4<f32>(-3.5f, -1.5f, 0.5f, 2.5f));
        let x_2895 : vec4<f32> = u_xlat10;
        let x_2898 : vec4<f32> = x_255.x_MainLightShadowmapSize;
        u_xlat10 = (vec4<f32>(x_2895.w, x_2895.x, x_2895.y, x_2895.z) * vec4<f32>(x_2898.x, x_2898.x, x_2898.x, x_2898.x));
        let x_2901 : vec4<f32> = u_xlat11;
        let x_2904 : vec4<f32> = x_255.x_MainLightShadowmapSize;
        u_xlat11 = (vec4<f32>(x_2901.x, x_2901.w, x_2901.y, x_2901.z) * vec4<f32>(x_2904.y, x_2904.y, x_2904.y, x_2904.y));
        let x_2907 : vec4<f32> = u_xlat10;
        let x_2908 : vec3<f32> = vec3<f32>(x_2907.y, x_2907.z, x_2907.w);
        let x_2909 : vec4<f32> = u_xlat13;
        u_xlat13 = vec4<f32>(x_2908.x, x_2909.y, x_2908.y, x_2908.z);
        let x_2912 : f32 = u_xlat11.x;
        u_xlat13.y = x_2912;
        let x_2914 : vec4<f32> = u_xlat8;
        let x_2917 : vec4<f32> = x_255.x_MainLightShadowmapSize;
        let x_2920 : vec4<f32> = u_xlat13;
        u_xlat14 = ((vec4<f32>(x_2914.x, x_2914.y, x_2914.x, x_2914.y) * vec4<f32>(x_2917.x, x_2917.y, x_2917.x, x_2917.y)) + vec4<f32>(x_2920.x, x_2920.y, x_2920.z, x_2920.y));
        let x_2923 : vec4<f32> = u_xlat8;
        let x_2926 : vec4<f32> = x_255.x_MainLightShadowmapSize;
        let x_2929 : vec4<f32> = u_xlat13;
        u_xlat52 = ((vec2<f32>(x_2923.x, x_2923.y) * vec2<f32>(x_2926.x, x_2926.y)) + vec2<f32>(x_2929.w, x_2929.y));
        let x_2933 : f32 = u_xlat13.y;
        u_xlat10.y = x_2933;
        let x_2936 : f32 = u_xlat11.z;
        u_xlat13.y = x_2936;
        let x_2938 : vec4<f32> = u_xlat8;
        let x_2941 : vec4<f32> = x_255.x_MainLightShadowmapSize;
        let x_2944 : vec4<f32> = u_xlat13;
        u_xlat15 = ((vec4<f32>(x_2938.x, x_2938.y, x_2938.x, x_2938.y) * vec4<f32>(x_2941.x, x_2941.y, x_2941.x, x_2941.y)) + vec4<f32>(x_2944.x, x_2944.y, x_2944.z, x_2944.y));
        let x_2947 : vec4<f32> = u_xlat8;
        let x_2950 : vec4<f32> = x_255.x_MainLightShadowmapSize;
        let x_2953 : vec4<f32> = u_xlat13;
        let x_2955 : vec2<f32> = ((vec2<f32>(x_2947.x, x_2947.y) * vec2<f32>(x_2950.x, x_2950.y)) + vec2<f32>(x_2953.w, x_2953.y));
        let x_2956 : vec4<f32> = u_xlat16;
        u_xlat16 = vec4<f32>(x_2955.x, x_2955.y, x_2956.z, x_2956.w);
        let x_2959 : f32 = u_xlat13.y;
        u_xlat10.z = x_2959;
        let x_2961 : vec4<f32> = u_xlat8;
        let x_2964 : vec4<f32> = x_255.x_MainLightShadowmapSize;
        let x_2967 : vec4<f32> = u_xlat10;
        u_xlat17 = ((vec4<f32>(x_2961.x, x_2961.y, x_2961.x, x_2961.y) * vec4<f32>(x_2964.x, x_2964.y, x_2964.x, x_2964.y)) + vec4<f32>(x_2967.x, x_2967.y, x_2967.x, x_2967.z));
        let x_2971 : f32 = u_xlat11.w;
        u_xlat13.y = x_2971;
        let x_2973 : vec4<f32> = u_xlat8;
        let x_2976 : vec4<f32> = x_255.x_MainLightShadowmapSize;
        let x_2979 : vec4<f32> = u_xlat13;
        u_xlat18 = ((vec4<f32>(x_2973.x, x_2973.y, x_2973.x, x_2973.y) * vec4<f32>(x_2976.x, x_2976.y, x_2976.x, x_2976.y)) + vec4<f32>(x_2979.x, x_2979.y, x_2979.z, x_2979.y));
        let x_2983 : vec4<f32> = u_xlat8;
        let x_2986 : vec4<f32> = x_255.x_MainLightShadowmapSize;
        let x_2989 : vec4<f32> = u_xlat13;
        u_xlat32 = ((vec2<f32>(x_2983.x, x_2983.y) * vec2<f32>(x_2986.x, x_2986.y)) + vec2<f32>(x_2989.w, x_2989.y));
        let x_2993 : f32 = u_xlat13.y;
        u_xlat10.w = x_2993;
        let x_2996 : vec4<f32> = u_xlat8;
        let x_2999 : vec4<f32> = x_255.x_MainLightShadowmapSize;
        let x_3002 : vec4<f32> = u_xlat10;
        u_xlat60 = ((vec2<f32>(x_2996.x, x_2996.y) * vec2<f32>(x_2999.x, x_2999.y)) + vec2<f32>(x_3002.x, x_3002.w));
        let x_3005 : vec4<f32> = u_xlat13;
        let x_3006 : vec3<f32> = vec3<f32>(x_3005.x, x_3005.z, x_3005.w);
        let x_3007 : vec4<f32> = u_xlat11;
        u_xlat11 = vec4<f32>(x_3006.x, x_3007.y, x_3006.y, x_3006.z);
        let x_3009 : vec4<f32> = u_xlat8;
        let x_3012 : vec4<f32> = x_255.x_MainLightShadowmapSize;
        let x_3015 : vec4<f32> = u_xlat11;
        u_xlat13 = ((vec4<f32>(x_3009.x, x_3009.y, x_3009.x, x_3009.y) * vec4<f32>(x_3012.x, x_3012.y, x_3012.x, x_3012.y)) + vec4<f32>(x_3015.x, x_3015.y, x_3015.z, x_3015.y));
        let x_3019 : vec4<f32> = u_xlat8;
        let x_3022 : vec4<f32> = x_255.x_MainLightShadowmapSize;
        let x_3025 : vec4<f32> = u_xlat11;
        u_xlat55 = ((vec2<f32>(x_3019.x, x_3019.y) * vec2<f32>(x_3022.x, x_3022.y)) + vec2<f32>(x_3025.w, x_3025.y));
        let x_3029 : f32 = u_xlat10.x;
        u_xlat11.x = x_3029;
        let x_3031 : vec4<f32> = u_xlat8;
        let x_3034 : vec4<f32> = x_255.x_MainLightShadowmapSize;
        let x_3037 : vec4<f32> = u_xlat11;
        let x_3039 : vec2<f32> = ((vec2<f32>(x_3031.x, x_3031.y) * vec2<f32>(x_3034.x, x_3034.y)) + vec2<f32>(x_3037.x, x_3037.y));
        let x_3040 : vec4<f32> = u_xlat8;
        u_xlat8 = vec4<f32>(x_3039.x, x_3039.y, x_3040.z, x_3040.w);
        let x_3042 : vec4<f32> = u_xlat9;
        let x_3044 : vec4<f32> = u_xlat12;
        u_xlat19 = (vec4<f32>(x_3042.x, x_3042.x, x_3042.x, x_3042.x) * x_3044);
        let x_3046 : vec4<f32> = u_xlat9;
        let x_3048 : vec4<f32> = u_xlat12;
        u_xlat20 = (vec4<f32>(x_3046.y, x_3046.y, x_3046.y, x_3046.y) * x_3048);
        let x_3051 : vec4<f32> = u_xlat9;
        let x_3053 : vec4<f32> = u_xlat12;
        u_xlat21 = (vec4<f32>(x_3051.z, x_3051.z, x_3051.z, x_3051.z) * x_3053);
        let x_3055 : vec4<f32> = u_xlat9;
        let x_3057 : vec4<f32> = u_xlat12;
        u_xlat9 = (vec4<f32>(x_3055.w, x_3055.w, x_3055.w, x_3055.w) * x_3057);
        let x_3060 : vec4<f32> = u_xlat14;
        let x_3061 : vec2<f32> = vec2<f32>(x_3060.x, x_3060.y);
        let x_3063 : f32 = u_xlat6.z;
        txVec43 = vec3<f32>(x_3061.x, x_3061.y, x_3063);
        let x_3070 : vec3<f32> = txVec43;
        let x_3072 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_3070.xy, x_3070.z);
        u_xlat73 = x_3072;
        let x_3074 : vec4<f32> = u_xlat14;
        let x_3075 : vec2<f32> = vec2<f32>(x_3074.z, x_3074.w);
        let x_3077 : f32 = u_xlat6.z;
        txVec44 = vec3<f32>(x_3075.x, x_3075.y, x_3077);
        let x_3084 : vec3<f32> = txVec44;
        let x_3086 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_3084.xy, x_3084.z);
        u_xlat10.x = x_3086;
        let x_3089 : f32 = u_xlat10.x;
        let x_3091 : f32 = u_xlat19.y;
        u_xlat10.x = (x_3089 * x_3091);
        let x_3095 : f32 = u_xlat19.x;
        let x_3096 : f32 = u_xlat73;
        let x_3099 : f32 = u_xlat10.x;
        u_xlat73 = ((x_3095 * x_3096) + x_3099);
        let x_3102 : vec2<f32> = u_xlat52;
        let x_3104 : f32 = u_xlat6.z;
        txVec45 = vec3<f32>(x_3102.x, x_3102.y, x_3104);
        let x_3111 : vec3<f32> = txVec45;
        let x_3113 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_3111.xy, x_3111.z);
        u_xlat52.x = x_3113;
        let x_3116 : f32 = u_xlat19.z;
        let x_3118 : f32 = u_xlat52.x;
        let x_3120 : f32 = u_xlat73;
        u_xlat73 = ((x_3116 * x_3118) + x_3120);
        let x_3123 : vec4<f32> = u_xlat17;
        let x_3124 : vec2<f32> = vec2<f32>(x_3123.x, x_3123.y);
        let x_3126 : f32 = u_xlat6.z;
        txVec46 = vec3<f32>(x_3124.x, x_3124.y, x_3126);
        let x_3133 : vec3<f32> = txVec46;
        let x_3135 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_3133.xy, x_3133.z);
        u_xlat52.x = x_3135;
        let x_3138 : f32 = u_xlat19.w;
        let x_3140 : f32 = u_xlat52.x;
        let x_3142 : f32 = u_xlat73;
        u_xlat73 = ((x_3138 * x_3140) + x_3142);
        let x_3145 : vec4<f32> = u_xlat15;
        let x_3146 : vec2<f32> = vec2<f32>(x_3145.x, x_3145.y);
        let x_3148 : f32 = u_xlat6.z;
        txVec47 = vec3<f32>(x_3146.x, x_3146.y, x_3148);
        let x_3155 : vec3<f32> = txVec47;
        let x_3157 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_3155.xy, x_3155.z);
        u_xlat52.x = x_3157;
        let x_3160 : f32 = u_xlat20.x;
        let x_3162 : f32 = u_xlat52.x;
        let x_3164 : f32 = u_xlat73;
        u_xlat73 = ((x_3160 * x_3162) + x_3164);
        let x_3167 : vec4<f32> = u_xlat15;
        let x_3168 : vec2<f32> = vec2<f32>(x_3167.z, x_3167.w);
        let x_3170 : f32 = u_xlat6.z;
        txVec48 = vec3<f32>(x_3168.x, x_3168.y, x_3170);
        let x_3177 : vec3<f32> = txVec48;
        let x_3179 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_3177.xy, x_3177.z);
        u_xlat52.x = x_3179;
        let x_3182 : f32 = u_xlat20.y;
        let x_3184 : f32 = u_xlat52.x;
        let x_3186 : f32 = u_xlat73;
        u_xlat73 = ((x_3182 * x_3184) + x_3186);
        let x_3189 : vec4<f32> = u_xlat16;
        let x_3190 : vec2<f32> = vec2<f32>(x_3189.x, x_3189.y);
        let x_3192 : f32 = u_xlat6.z;
        txVec49 = vec3<f32>(x_3190.x, x_3190.y, x_3192);
        let x_3199 : vec3<f32> = txVec49;
        let x_3201 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_3199.xy, x_3199.z);
        u_xlat52.x = x_3201;
        let x_3204 : f32 = u_xlat20.z;
        let x_3206 : f32 = u_xlat52.x;
        let x_3208 : f32 = u_xlat73;
        u_xlat73 = ((x_3204 * x_3206) + x_3208);
        let x_3211 : vec4<f32> = u_xlat17;
        let x_3212 : vec2<f32> = vec2<f32>(x_3211.z, x_3211.w);
        let x_3214 : f32 = u_xlat6.z;
        txVec50 = vec3<f32>(x_3212.x, x_3212.y, x_3214);
        let x_3221 : vec3<f32> = txVec50;
        let x_3223 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_3221.xy, x_3221.z);
        u_xlat52.x = x_3223;
        let x_3226 : f32 = u_xlat20.w;
        let x_3228 : f32 = u_xlat52.x;
        let x_3230 : f32 = u_xlat73;
        u_xlat73 = ((x_3226 * x_3228) + x_3230);
        let x_3233 : vec4<f32> = u_xlat18;
        let x_3234 : vec2<f32> = vec2<f32>(x_3233.x, x_3233.y);
        let x_3236 : f32 = u_xlat6.z;
        txVec51 = vec3<f32>(x_3234.x, x_3234.y, x_3236);
        let x_3243 : vec3<f32> = txVec51;
        let x_3245 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_3243.xy, x_3243.z);
        u_xlat52.x = x_3245;
        let x_3248 : f32 = u_xlat21.x;
        let x_3250 : f32 = u_xlat52.x;
        let x_3252 : f32 = u_xlat73;
        u_xlat73 = ((x_3248 * x_3250) + x_3252);
        let x_3255 : vec4<f32> = u_xlat18;
        let x_3256 : vec2<f32> = vec2<f32>(x_3255.z, x_3255.w);
        let x_3258 : f32 = u_xlat6.z;
        txVec52 = vec3<f32>(x_3256.x, x_3256.y, x_3258);
        let x_3265 : vec3<f32> = txVec52;
        let x_3267 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_3265.xy, x_3265.z);
        u_xlat52.x = x_3267;
        let x_3270 : f32 = u_xlat21.y;
        let x_3272 : f32 = u_xlat52.x;
        let x_3274 : f32 = u_xlat73;
        u_xlat73 = ((x_3270 * x_3272) + x_3274);
        let x_3277 : vec2<f32> = u_xlat32;
        let x_3279 : f32 = u_xlat6.z;
        txVec53 = vec3<f32>(x_3277.x, x_3277.y, x_3279);
        let x_3286 : vec3<f32> = txVec53;
        let x_3288 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_3286.xy, x_3286.z);
        u_xlat52.x = x_3288;
        let x_3291 : f32 = u_xlat21.z;
        let x_3293 : f32 = u_xlat52.x;
        let x_3295 : f32 = u_xlat73;
        u_xlat73 = ((x_3291 * x_3293) + x_3295);
        let x_3298 : vec2<f32> = u_xlat60;
        let x_3300 : f32 = u_xlat6.z;
        txVec54 = vec3<f32>(x_3298.x, x_3298.y, x_3300);
        let x_3307 : vec3<f32> = txVec54;
        let x_3309 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_3307.xy, x_3307.z);
        u_xlat52.x = x_3309;
        let x_3312 : f32 = u_xlat21.w;
        let x_3314 : f32 = u_xlat52.x;
        let x_3316 : f32 = u_xlat73;
        u_xlat73 = ((x_3312 * x_3314) + x_3316);
        let x_3319 : vec4<f32> = u_xlat13;
        let x_3320 : vec2<f32> = vec2<f32>(x_3319.x, x_3319.y);
        let x_3322 : f32 = u_xlat6.z;
        txVec55 = vec3<f32>(x_3320.x, x_3320.y, x_3322);
        let x_3329 : vec3<f32> = txVec55;
        let x_3331 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_3329.xy, x_3329.z);
        u_xlat52.x = x_3331;
        let x_3334 : f32 = u_xlat9.x;
        let x_3336 : f32 = u_xlat52.x;
        let x_3338 : f32 = u_xlat73;
        u_xlat73 = ((x_3334 * x_3336) + x_3338);
        let x_3341 : vec4<f32> = u_xlat13;
        let x_3342 : vec2<f32> = vec2<f32>(x_3341.z, x_3341.w);
        let x_3344 : f32 = u_xlat6.z;
        txVec56 = vec3<f32>(x_3342.x, x_3342.y, x_3344);
        let x_3351 : vec3<f32> = txVec56;
        let x_3353 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_3351.xy, x_3351.z);
        u_xlat52.x = x_3353;
        let x_3356 : f32 = u_xlat9.y;
        let x_3358 : f32 = u_xlat52.x;
        let x_3360 : f32 = u_xlat73;
        u_xlat73 = ((x_3356 * x_3358) + x_3360);
        let x_3363 : vec2<f32> = u_xlat55;
        let x_3365 : f32 = u_xlat6.z;
        txVec57 = vec3<f32>(x_3363.x, x_3363.y, x_3365);
        let x_3372 : vec3<f32> = txVec57;
        let x_3374 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_3372.xy, x_3372.z);
        u_xlat52.x = x_3374;
        let x_3377 : f32 = u_xlat9.z;
        let x_3379 : f32 = u_xlat52.x;
        let x_3381 : f32 = u_xlat73;
        u_xlat73 = ((x_3377 * x_3379) + x_3381);
        let x_3384 : vec4<f32> = u_xlat8;
        let x_3385 : vec2<f32> = vec2<f32>(x_3384.x, x_3384.y);
        let x_3387 : f32 = u_xlat6.z;
        txVec58 = vec3<f32>(x_3385.x, x_3385.y, x_3387);
        let x_3394 : vec3<f32> = txVec58;
        let x_3396 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_3394.xy, x_3394.z);
        u_xlat8.x = x_3396;
        let x_3399 : f32 = u_xlat9.w;
        let x_3401 : f32 = u_xlat8.x;
        let x_3403 : f32 = u_xlat73;
        u_xlat66 = ((x_3399 * x_3401) + x_3403);
      }
    }
  } else {
    let x_3407 : vec4<f32> = u_xlat6;
    let x_3408 : vec2<f32> = vec2<f32>(x_3407.x, x_3407.y);
    let x_3410 : f32 = u_xlat6.z;
    txVec59 = vec3<f32>(x_3408.x, x_3408.y, x_3410);
    let x_3417 : vec3<f32> = txVec59;
    let x_3419 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_3417.xy, x_3417.z);
    u_xlat66 = x_3419;
  }
  let x_3420 : f32 = u_xlat66;
  let x_3422 : f32 = x_255.x_MainLightShadowParams.x;
  let x_3424 : f32 = u_xlat68;
  u_xlat66 = ((x_3420 * x_3422) + x_3424);
  let x_3426 : bool = u_xlatb70;
  let x_3427 : f32 = u_xlat66;
  u_xlat66 = select(x_3427, 1.0f, x_3426);
  let x_3429 : vec3<f32> = vs_INTERP0;
  let x_3431 : vec3<f32> = x_90.x_WorldSpaceCameraPos;
  let x_3433 : vec3<f32> = (x_3429 + -(x_3431));
  let x_3434 : vec4<f32> = u_xlat6;
  u_xlat6 = vec4<f32>(x_3433.x, x_3433.y, x_3433.z, x_3434.w);
  let x_3436 : vec4<f32> = u_xlat6;
  let x_3438 : vec4<f32> = u_xlat6;
  u_xlat68 = dot(vec3<f32>(x_3436.x, x_3436.y, x_3436.z), vec3<f32>(x_3438.x, x_3438.y, x_3438.z));
  let x_3441 : f32 = u_xlat68;
  let x_3443 : f32 = x_255.x_MainLightShadowParams.z;
  let x_3446 : f32 = x_255.x_MainLightShadowParams.w;
  u_xlat68 = ((x_3441 * x_3443) + x_3446);
  let x_3448 : f32 = u_xlat68;
  u_xlat68 = clamp(x_3448, 0.0f, 1.0f);
  let x_3450 : f32 = u_xlat66;
  u_xlat70 = (-(x_3450) + 1.0f);
  let x_3453 : f32 = u_xlat68;
  let x_3454 : f32 = u_xlat70;
  let x_3456 : f32 = u_xlat66;
  u_xlat66 = ((x_3453 * x_3454) + x_3456);
  let x_3464 : f32 = x_3462.x_MainLightCookieTextureFormat;
  u_xlatb68 = !((x_3464 == -1.0f));
  let x_3466 : bool = u_xlatb68;
  if (x_3466) {
    let x_3469 : vec3<f32> = vs_INTERP0;
    let x_3472 : vec4<f32> = x_3462.x_MainLightWorldToLight[1i];
    let x_3474 : vec2<f32> = (vec2<f32>(x_3469.y, x_3469.y) * vec2<f32>(x_3472.x, x_3472.y));
    let x_3475 : vec4<f32> = u_xlat6;
    u_xlat6 = vec4<f32>(x_3474.x, x_3474.y, x_3475.z, x_3475.w);
    let x_3478 : vec4<f32> = x_3462.x_MainLightWorldToLight[0i];
    let x_3480 : vec3<f32> = vs_INTERP0;
    let x_3483 : vec4<f32> = u_xlat6;
    let x_3485 : vec2<f32> = ((vec2<f32>(x_3478.x, x_3478.y) * vec2<f32>(x_3480.x, x_3480.x)) + vec2<f32>(x_3483.x, x_3483.y));
    let x_3486 : vec4<f32> = u_xlat6;
    u_xlat6 = vec4<f32>(x_3485.x, x_3485.y, x_3486.z, x_3486.w);
    let x_3489 : vec4<f32> = x_3462.x_MainLightWorldToLight[2i];
    let x_3491 : vec3<f32> = vs_INTERP0;
    let x_3494 : vec4<f32> = u_xlat6;
    let x_3496 : vec2<f32> = ((vec2<f32>(x_3489.x, x_3489.y) * vec2<f32>(x_3491.z, x_3491.z)) + vec2<f32>(x_3494.x, x_3494.y));
    let x_3497 : vec4<f32> = u_xlat6;
    u_xlat6 = vec4<f32>(x_3496.x, x_3496.y, x_3497.z, x_3497.w);
    let x_3499 : vec4<f32> = u_xlat6;
    let x_3502 : vec4<f32> = x_3462.x_MainLightWorldToLight[3i];
    let x_3504 : vec2<f32> = (vec2<f32>(x_3499.x, x_3499.y) + vec2<f32>(x_3502.x, x_3502.y));
    let x_3505 : vec4<f32> = u_xlat6;
    u_xlat6 = vec4<f32>(x_3504.x, x_3504.y, x_3505.z, x_3505.w);
    let x_3507 : vec4<f32> = u_xlat6;
    let x_3510 : vec2<f32> = ((vec2<f32>(x_3507.x, x_3507.y) * vec2<f32>(0.5f, 0.5f)) + vec2<f32>(0.5f, 0.5f));
    let x_3511 : vec4<f32> = u_xlat6;
    u_xlat6 = vec4<f32>(x_3510.x, x_3510.y, x_3511.z, x_3511.w);
    let x_3518 : vec4<f32> = u_xlat6;
    let x_3521 : f32 = x_90.x_GlobalMipBias.x;
    let x_3522 : vec4<f32> = textureSampleBias(x_MainLightCookieTexture, sampler_MainLightCookieTexture, vec2<f32>(x_3518.x, x_3518.y), x_3521);
    u_xlat8 = x_3522;
    let x_3524 : f32 = x_3462.x_MainLightCookieTextureFormat;
    let x_3526 : f32 = x_3462.x_MainLightCookieTextureFormat;
    let x_3528 : f32 = x_3462.x_MainLightCookieTextureFormat;
    let x_3530 : f32 = x_3462.x_MainLightCookieTextureFormat;
    let x_3531 : vec4<f32> = vec4<f32>(x_3524, x_3526, x_3528, x_3530);
    let x_3538 : vec4<bool> = (vec4<f32>(x_3531.x, x_3531.y, x_3531.z, x_3531.w) == vec4<f32>(0.0f, 1.0f, 0.0f, 0.0f));
    let x_3539 : vec2<bool> = vec2<bool>(x_3538.x, x_3538.y);
    let x_3540 : vec4<bool> = u_xlatb6;
    u_xlatb6 = vec4<bool>(x_3539.x, x_3539.y, x_3540.z, x_3540.w);
    let x_3543 : bool = u_xlatb6.y;
    if (x_3543) {
      let x_3548 : f32 = u_xlat8.w;
      x_3544 = x_3548;
    } else {
      let x_3551 : f32 = u_xlat8.x;
      x_3544 = x_3551;
    }
    let x_3552 : f32 = x_3544;
    u_xlat68 = x_3552;
    let x_3554 : bool = u_xlatb6.x;
    if (x_3554) {
      let x_3558 : vec4<f32> = u_xlat8;
      x_3555 = vec3<f32>(x_3558.x, x_3558.y, x_3558.z);
    } else {
      let x_3561 : f32 = u_xlat68;
      x_3555 = vec3<f32>(x_3561, x_3561, x_3561);
    }
    let x_3563 : vec3<f32> = x_3555;
    let x_3564 : vec4<f32> = u_xlat6;
    u_xlat6 = vec4<f32>(x_3563.x, x_3563.y, x_3563.z, x_3564.w);
  } else {
    u_xlat6.x = 1.0f;
    u_xlat6.y = 1.0f;
    u_xlat6.z = 1.0f;
  }
  let x_3570 : vec4<f32> = u_xlat6;
  let x_3573 : vec4<f32> = x_90.x_MainLightColor;
  let x_3575 : vec3<f32> = (vec3<f32>(x_3570.x, x_3570.y, x_3570.z) * vec3<f32>(x_3573.x, x_3573.y, x_3573.z));
  let x_3576 : vec4<f32> = u_xlat6;
  u_xlat6 = vec4<f32>(x_3575.x, x_3575.y, x_3575.z, x_3576.w);
  let x_3578 : vec2<f32> = u_xlat51;
  let x_3580 : vec4<f32> = u_xlat6;
  let x_3582 : vec3<f32> = (vec3<f32>(x_3578.x, x_3578.x, x_3578.x) * vec3<f32>(x_3580.x, x_3580.y, x_3580.z));
  let x_3583 : vec4<f32> = u_xlat6;
  u_xlat6 = vec4<f32>(x_3582.x, x_3582.y, x_3582.z, x_3583.w);
  let x_3585 : vec3<f32> = u_xlat1;
  let x_3587 : vec4<f32> = u_xlat3;
  u_xlat68 = dot(-(x_3585), vec3<f32>(x_3587.x, x_3587.y, x_3587.z));
  let x_3590 : f32 = u_xlat68;
  let x_3591 : f32 = u_xlat68;
  u_xlat68 = (x_3590 + x_3591);
  let x_3593 : vec4<f32> = u_xlat3;
  let x_3595 : f32 = u_xlat68;
  let x_3599 : vec3<f32> = u_xlat1;
  let x_3601 : vec3<f32> = ((vec3<f32>(x_3593.x, x_3593.y, x_3593.z) * -(vec3<f32>(x_3595, x_3595, x_3595))) + -(x_3599));
  let x_3602 : vec4<f32> = u_xlat8;
  u_xlat8 = vec4<f32>(x_3601.x, x_3601.y, x_3601.z, x_3602.w);
  let x_3604 : vec4<f32> = u_xlat3;
  let x_3606 : vec3<f32> = u_xlat1;
  u_xlat68 = dot(vec3<f32>(x_3604.x, x_3604.y, x_3604.z), x_3606);
  let x_3608 : f32 = u_xlat68;
  u_xlat68 = clamp(x_3608, 0.0f, 1.0f);
  let x_3610 : f32 = u_xlat68;
  u_xlat68 = (-(x_3610) + 1.0f);
  let x_3613 : f32 = u_xlat68;
  let x_3614 : f32 = u_xlat68;
  u_xlat68 = (x_3613 * x_3614);
  let x_3616 : f32 = u_xlat68;
  let x_3617 : f32 = u_xlat68;
  u_xlat68 = (x_3616 * x_3617);
  let x_3619 : f32 = u_xlat46;
  u_xlat70 = ((-(x_3619) * 0.699999988f) + 1.700000048f);
  let x_3625 : f32 = u_xlat46;
  let x_3626 : f32 = u_xlat70;
  u_xlat46 = (x_3625 * x_3626);
  let x_3628 : f32 = u_xlat46;
  u_xlat46 = (x_3628 * 6.0f);
  let x_3639 : vec4<f32> = u_xlat8;
  let x_3641 : f32 = u_xlat46;
  let x_3642 : vec4<f32> = textureSampleLevel(unity_SpecCube0, samplerunity_SpecCube0, vec3<f32>(x_3639.x, x_3639.y, x_3639.z), x_3641);
  u_xlat8 = x_3642;
  let x_3644 : f32 = u_xlat8.w;
  u_xlat46 = (x_3644 + -1.0f);
  let x_3647 : f32 = x_145.unity_SpecCube0_HDR.w;
  let x_3648 : f32 = u_xlat46;
  u_xlat46 = ((x_3647 * x_3648) + 1.0f);
  let x_3651 : f32 = u_xlat46;
  u_xlat46 = max(x_3651, 0.0f);
  let x_3653 : f32 = u_xlat46;
  u_xlat46 = log2(x_3653);
  let x_3655 : f32 = u_xlat46;
  let x_3657 : f32 = x_145.unity_SpecCube0_HDR.y;
  u_xlat46 = (x_3655 * x_3657);
  let x_3659 : f32 = u_xlat46;
  u_xlat46 = exp2(x_3659);
  let x_3661 : f32 = u_xlat46;
  let x_3663 : f32 = x_145.unity_SpecCube0_HDR.x;
  u_xlat46 = (x_3661 * x_3663);
  let x_3665 : vec4<f32> = u_xlat8;
  let x_3667 : f32 = u_xlat46;
  let x_3669 : vec3<f32> = (vec3<f32>(x_3665.x, x_3665.y, x_3665.z) * vec3<f32>(x_3667, x_3667, x_3667));
  let x_3670 : vec4<f32> = u_xlat8;
  u_xlat8 = vec4<f32>(x_3669.x, x_3669.y, x_3669.z, x_3670.w);
  let x_3672 : f32 = u_xlat69;
  let x_3674 : f32 = u_xlat69;
  let x_3678 : vec2<f32> = ((vec2<f32>(x_3672, x_3672) * vec2<f32>(x_3674, x_3674)) + vec2<f32>(-1.0f, 1.0f));
  let x_3679 : vec4<f32> = u_xlat9;
  u_xlat9 = vec4<f32>(x_3678.x, x_3678.y, x_3679.z, x_3679.w);
  let x_3682 : f32 = u_xlat9.y;
  u_xlat46 = (1.0f / x_3682);
  let x_3685 : f32 = u_xlat5.x;
  u_xlat69 = (x_3685 + -0.039999999f);
  let x_3688 : f32 = u_xlat68;
  let x_3689 : f32 = u_xlat69;
  u_xlat68 = ((x_3688 * x_3689) + 0.039999999f);
  let x_3693 : f32 = u_xlat68;
  let x_3694 : f32 = u_xlat46;
  u_xlat46 = (x_3693 * x_3694);
  let x_3696 : f32 = u_xlat46;
  let x_3698 : vec4<f32> = u_xlat8;
  let x_3700 : vec3<f32> = (vec3<f32>(x_3696, x_3696, x_3696) * vec3<f32>(x_3698.x, x_3698.y, x_3698.z));
  let x_3701 : vec4<f32> = u_xlat8;
  u_xlat8 = vec4<f32>(x_3700.x, x_3700.y, x_3700.z, x_3701.w);
  let x_3703 : vec3<f32> = u_xlat27;
  let x_3704 : vec3<f32> = u_xlat4;
  let x_3706 : vec4<f32> = u_xlat8;
  let x_3708 : vec3<f32> = ((x_3703 * x_3704) + vec3<f32>(x_3706.x, x_3706.y, x_3706.z));
  let x_3709 : vec4<f32> = u_xlat5;
  u_xlat5 = vec4<f32>(x_3708.x, x_3708.y, x_3708.z, x_3709.w);
  let x_3711 : f32 = u_xlat66;
  let x_3713 : f32 = x_145.unity_LightData.z;
  u_xlat66 = (x_3711 * x_3713);
  let x_3715 : vec4<f32> = u_xlat3;
  let x_3718 : vec4<f32> = x_90.x_MainLightPosition;
  u_xlat46 = dot(vec3<f32>(x_3715.x, x_3715.y, x_3715.z), vec3<f32>(x_3718.x, x_3718.y, x_3718.z));
  let x_3721 : f32 = u_xlat46;
  u_xlat46 = clamp(x_3721, 0.0f, 1.0f);
  let x_3723 : f32 = u_xlat66;
  let x_3724 : f32 = u_xlat46;
  u_xlat66 = (x_3723 * x_3724);
  let x_3726 : f32 = u_xlat66;
  let x_3728 : vec4<f32> = u_xlat6;
  let x_3730 : vec3<f32> = (vec3<f32>(x_3726, x_3726, x_3726) * vec3<f32>(x_3728.x, x_3728.y, x_3728.z));
  let x_3731 : vec4<f32> = u_xlat6;
  u_xlat6 = vec4<f32>(x_3730.x, x_3730.y, x_3730.z, x_3731.w);
  let x_3733 : vec3<f32> = u_xlat1;
  let x_3735 : vec4<f32> = x_90.x_MainLightPosition;
  let x_3737 : vec3<f32> = (x_3733 + vec3<f32>(x_3735.x, x_3735.y, x_3735.z));
  let x_3738 : vec4<f32> = u_xlat8;
  u_xlat8 = vec4<f32>(x_3737.x, x_3737.y, x_3737.z, x_3738.w);
  let x_3740 : vec4<f32> = u_xlat8;
  let x_3742 : vec4<f32> = u_xlat8;
  u_xlat66 = dot(vec3<f32>(x_3740.x, x_3740.y, x_3740.z), vec3<f32>(x_3742.x, x_3742.y, x_3742.z));
  let x_3745 : f32 = u_xlat66;
  u_xlat66 = max(x_3745, 1.17549435e-37f);
  let x_3748 : f32 = u_xlat66;
  u_xlat66 = inverseSqrt(x_3748);
  let x_3750 : f32 = u_xlat66;
  let x_3752 : vec4<f32> = u_xlat8;
  let x_3754 : vec3<f32> = (vec3<f32>(x_3750, x_3750, x_3750) * vec3<f32>(x_3752.x, x_3752.y, x_3752.z));
  let x_3755 : vec4<f32> = u_xlat8;
  u_xlat8 = vec4<f32>(x_3754.x, x_3754.y, x_3754.z, x_3755.w);
  let x_3757 : vec4<f32> = u_xlat3;
  let x_3759 : vec4<f32> = u_xlat8;
  u_xlat66 = dot(vec3<f32>(x_3757.x, x_3757.y, x_3757.z), vec3<f32>(x_3759.x, x_3759.y, x_3759.z));
  let x_3762 : f32 = u_xlat66;
  u_xlat66 = clamp(x_3762, 0.0f, 1.0f);
  let x_3765 : vec4<f32> = x_90.x_MainLightPosition;
  let x_3767 : vec4<f32> = u_xlat8;
  u_xlat46 = dot(vec3<f32>(x_3765.x, x_3765.y, x_3765.z), vec3<f32>(x_3767.x, x_3767.y, x_3767.z));
  let x_3770 : f32 = u_xlat46;
  u_xlat46 = clamp(x_3770, 0.0f, 1.0f);
  let x_3772 : f32 = u_xlat66;
  let x_3773 : f32 = u_xlat66;
  u_xlat66 = (x_3772 * x_3773);
  let x_3775 : f32 = u_xlat66;
  let x_3777 : f32 = u_xlat9.x;
  u_xlat66 = ((x_3775 * x_3777) + 1.000010014f);
  let x_3781 : f32 = u_xlat46;
  let x_3782 : f32 = u_xlat46;
  u_xlat46 = (x_3781 * x_3782);
  let x_3784 : f32 = u_xlat66;
  let x_3785 : f32 = u_xlat66;
  u_xlat66 = (x_3784 * x_3785);
  let x_3787 : f32 = u_xlat46;
  u_xlat46 = max(x_3787, 0.100000001f);
  let x_3790 : f32 = u_xlat66;
  let x_3791 : f32 = u_xlat46;
  u_xlat66 = (x_3790 * x_3791);
  let x_3793 : f32 = u_xlat29;
  let x_3794 : f32 = u_xlat66;
  u_xlat66 = (x_3793 * x_3794);
  let x_3796 : f32 = u_xlat72;
  let x_3797 : f32 = u_xlat66;
  u_xlat66 = (x_3796 / x_3797);
  let x_3799 : f32 = u_xlat66;
  let x_3803 : vec3<f32> = u_xlat4;
  let x_3804 : vec3<f32> = ((vec3<f32>(x_3799, x_3799, x_3799) * vec3<f32>(0.039999999f, 0.039999999f, 0.039999999f)) + x_3803);
  let x_3805 : vec4<f32> = u_xlat8;
  u_xlat8 = vec4<f32>(x_3804.x, x_3804.y, x_3804.z, x_3805.w);
  let x_3807 : vec4<f32> = u_xlat6;
  let x_3809 : vec4<f32> = u_xlat8;
  let x_3811 : vec3<f32> = (vec3<f32>(x_3807.x, x_3807.y, x_3807.z) * vec3<f32>(x_3809.x, x_3809.y, x_3809.z));
  let x_3812 : vec4<f32> = u_xlat6;
  u_xlat6 = vec4<f32>(x_3811.x, x_3811.y, x_3811.z, x_3812.w);
  let x_3815 : f32 = x_90.x_AdditionalLightsCount.x;
  let x_3817 : f32 = x_145.unity_LightData.y;
  u_xlat66 = min(x_3815, x_3817);
  let x_3819 : f32 = u_xlat66;
  u_xlatu66 = bitcast<u32>(i32(x_3819));
  let x_3824 : f32 = x_3462.x_AdditionalLightsCookieAtlasTextureFormat;
  let x_3826 : f32 = x_3462.x_AdditionalLightsCookieAtlasTextureFormat;
  let x_3828 : f32 = x_3462.x_AdditionalLightsCookieAtlasTextureFormat;
  let x_3830 : f32 = x_3462.x_AdditionalLightsCookieAtlasTextureFormat;
  let x_3831 : vec4<f32> = vec4<f32>(x_3824, x_3826, x_3828, x_3830);
  let x_3838 : vec4<bool> = (vec4<f32>(x_3831.x, x_3831.y, x_3831.z, x_3831.w) == vec4<f32>(0.0f, 1.0f, 0.0f, 1.0f));
  u_xlatb46 = vec2<bool>(x_3838.x, x_3838.y);
  u_xlat8.x = 0.0f;
  u_xlat8.y = 0.0f;
  u_xlat8.z = 0.0f;
  u_xlatu_loop_1 = 0u;
  loop {
    let x_3849 : u32 = u_xlatu_loop_1;
    let x_3850 : u32 = u_xlatu66;
    if ((x_3849 < x_3850)) {
    } else {
      break;
    }
    let x_3853 : u32 = u_xlatu_loop_1;
    u_xlatu70 = (x_3853 >> 2u);
    let x_3856 : u32 = u_xlatu_loop_1;
    u_xlati71 = bitcast<i32>((x_3856 & 3u));
    let x_3859 : u32 = u_xlatu70;
    let x_3862 : vec4<f32> = x_145.unity_LightIndices[bitcast<i32>(x_3859)];
    let x_3872 : i32 = u_xlati71;
    indexable = array<vec4<u32>, 4u>(vec4<u32>(1065353216u, 0u, 0u, 0u), vec4<u32>(0u, 1065353216u, 0u, 0u), vec4<u32>(0u, 0u, 1065353216u, 0u), vec4<u32>(0u, 0u, 0u, 1065353216u));
    let x_3877 : vec4<u32> = indexable[x_3872];
    u_xlat70 = dot(x_3862, bitcast<vec4<f32>>(x_3877));
    let x_3880 : f32 = u_xlat70;
    u_xlatu70 = bitcast<u32>(i32(x_3880));
    let x_3883 : vec3<f32> = vs_INTERP0;
    let x_3895 : u32 = u_xlatu70;
    let x_3898 : vec4<f32> = x_3894.x_AdditionalLightsPosition[bitcast<i32>(x_3895)];
    let x_3901 : u32 = u_xlatu70;
    let x_3904 : vec4<f32> = x_3894.x_AdditionalLightsPosition[bitcast<i32>(x_3901)];
    u_xlat31 = ((-(x_3883) * vec3<f32>(x_3898.w, x_3898.w, x_3898.w)) + vec3<f32>(x_3904.x, x_3904.y, x_3904.z));
    let x_3908 : vec3<f32> = u_xlat31;
    let x_3909 : vec3<f32> = u_xlat31;
    u_xlat71 = dot(x_3908, x_3909);
    let x_3911 : f32 = u_xlat71;
    u_xlat71 = max(x_3911, 6.10351562e-05f);
    let x_3914 : f32 = u_xlat71;
    u_xlat73 = inverseSqrt(x_3914);
    let x_3916 : f32 = u_xlat73;
    let x_3918 : vec3<f32> = u_xlat31;
    let x_3919 : vec3<f32> = (vec3<f32>(x_3916, x_3916, x_3916) * x_3918);
    let x_3920 : vec4<f32> = u_xlat10;
    u_xlat10 = vec4<f32>(x_3919.x, x_3919.y, x_3919.z, x_3920.w);
    let x_3923 : f32 = u_xlat71;
    u_xlat74 = (1.0f / x_3923);
    let x_3925 : f32 = u_xlat71;
    let x_3926 : u32 = u_xlatu70;
    let x_3929 : f32 = x_3894.x_AdditionalLightsAttenuation[bitcast<i32>(x_3926)].x;
    u_xlat71 = (x_3925 * x_3929);
    let x_3931 : f32 = u_xlat71;
    let x_3933 : f32 = u_xlat71;
    u_xlat71 = ((-(x_3931) * x_3933) + 1.0f);
    let x_3936 : f32 = u_xlat71;
    u_xlat71 = max(x_3936, 0.0f);
    let x_3938 : f32 = u_xlat71;
    let x_3939 : f32 = u_xlat71;
    u_xlat71 = (x_3938 * x_3939);
    let x_3941 : f32 = u_xlat71;
    let x_3942 : f32 = u_xlat74;
    u_xlat71 = (x_3941 * x_3942);
    let x_3944 : u32 = u_xlatu70;
    let x_3947 : vec4<f32> = x_3894.x_AdditionalLightsSpotDir[bitcast<i32>(x_3944)];
    let x_3949 : vec4<f32> = u_xlat10;
    u_xlat74 = dot(vec3<f32>(x_3947.x, x_3947.y, x_3947.z), vec3<f32>(x_3949.x, x_3949.y, x_3949.z));
    let x_3952 : f32 = u_xlat74;
    let x_3953 : u32 = u_xlatu70;
    let x_3956 : f32 = x_3894.x_AdditionalLightsAttenuation[bitcast<i32>(x_3953)].z;
    let x_3958 : u32 = u_xlatu70;
    let x_3961 : f32 = x_3894.x_AdditionalLightsAttenuation[bitcast<i32>(x_3958)].w;
    u_xlat74 = ((x_3952 * x_3956) + x_3961);
    let x_3963 : f32 = u_xlat74;
    u_xlat74 = clamp(x_3963, 0.0f, 1.0f);
    let x_3965 : f32 = u_xlat74;
    let x_3966 : f32 = u_xlat74;
    u_xlat74 = (x_3965 * x_3966);
    let x_3968 : f32 = u_xlat71;
    let x_3969 : f32 = u_xlat74;
    u_xlat71 = (x_3968 * x_3969);
    let x_3972 : u32 = u_xlatu70;
    u_xlatu74 = (x_3972 >> 5u);
    let x_3975 : u32 = u_xlatu70;
    u_xlati76 = (1i << bitcast<u32>((bitcast<i32>(x_3975) & 31i)));
    let x_3981 : i32 = u_xlati76;
    let x_3983 : u32 = u_xlatu74;
    let x_3986 : f32 = x_3462.x_AdditionalLightsCookieEnableBits[bitcast<i32>(x_3983)].el;
    u_xlati74 = bitcast<i32>((bitcast<u32>(x_3981) & bitcast<u32>(x_3986)));
    let x_3990 : i32 = u_xlati74;
    if ((x_3990 != 0i)) {
      let x_4000 : u32 = u_xlatu70;
      let x_4003 : f32 = x_3999.x_AdditionalLightsLightTypes[bitcast<i32>(x_4000)].el;
      u_xlati74 = i32(x_4003);
      let x_4005 : i32 = u_xlati74;
      u_xlati76 = select(1i, 0i, (x_4005 != 0i));
      let x_4009 : u32 = u_xlatu70;
      u_xlati11 = (bitcast<i32>(x_4009) << bitcast<u32>(2i));
      let x_4012 : i32 = u_xlati76;
      if ((x_4012 != 0i)) {
        let x_4017 : vec3<f32> = vs_INTERP0;
        let x_4019 : i32 = u_xlati11;
        let x_4022 : i32 = u_xlati11;
        let x_4026 : vec4<f32> = x_3999.x_AdditionalLightsWorldToLights[((x_4019 + 1i) / 4i)][((x_4022 + 1i) % 4i)];
        u_xlat33 = (vec3<f32>(x_4017.y, x_4017.y, x_4017.y) * vec3<f32>(x_4026.x, x_4026.y, x_4026.w));
        let x_4029 : i32 = u_xlati11;
        let x_4031 : i32 = u_xlati11;
        let x_4034 : vec4<f32> = x_3999.x_AdditionalLightsWorldToLights[(x_4029 / 4i)][(x_4031 % 4i)];
        let x_4036 : vec3<f32> = vs_INTERP0;
        let x_4039 : vec3<f32> = u_xlat33;
        u_xlat33 = ((vec3<f32>(x_4034.x, x_4034.y, x_4034.w) * vec3<f32>(x_4036.x, x_4036.x, x_4036.x)) + x_4039);
        let x_4041 : i32 = u_xlati11;
        let x_4044 : i32 = u_xlati11;
        let x_4048 : vec4<f32> = x_3999.x_AdditionalLightsWorldToLights[((x_4041 + 2i) / 4i)][((x_4044 + 2i) % 4i)];
        let x_4050 : vec3<f32> = vs_INTERP0;
        let x_4053 : vec3<f32> = u_xlat33;
        u_xlat33 = ((vec3<f32>(x_4048.x, x_4048.y, x_4048.w) * vec3<f32>(x_4050.z, x_4050.z, x_4050.z)) + x_4053);
        let x_4055 : vec3<f32> = u_xlat33;
        let x_4056 : i32 = u_xlati11;
        let x_4059 : i32 = u_xlati11;
        let x_4063 : vec4<f32> = x_3999.x_AdditionalLightsWorldToLights[((x_4056 + 3i) / 4i)][((x_4059 + 3i) % 4i)];
        u_xlat33 = (x_4055 + vec3<f32>(x_4063.x, x_4063.y, x_4063.w));
        let x_4066 : vec3<f32> = u_xlat33;
        let x_4068 : vec3<f32> = u_xlat33;
        let x_4070 : vec2<f32> = (vec2<f32>(x_4066.x, x_4066.y) / vec2<f32>(x_4068.z, x_4068.z));
        let x_4071 : vec3<f32> = u_xlat33;
        u_xlat33 = vec3<f32>(x_4070.x, x_4070.y, x_4071.z);
        let x_4073 : vec3<f32> = u_xlat33;
        let x_4076 : vec2<f32> = ((vec2<f32>(x_4073.x, x_4073.y) * vec2<f32>(0.5f, 0.5f)) + vec2<f32>(0.5f, 0.5f));
        let x_4077 : vec3<f32> = u_xlat33;
        u_xlat33 = vec3<f32>(x_4076.x, x_4076.y, x_4077.z);
        let x_4079 : vec3<f32> = u_xlat33;
        let x_4083 : vec2<f32> = clamp(vec2<f32>(x_4079.x, x_4079.y), vec2<f32>(0.0f, 0.0f), vec2<f32>(1.0f, 1.0f));
        let x_4084 : vec3<f32> = u_xlat33;
        u_xlat33 = vec3<f32>(x_4083.x, x_4083.y, x_4084.z);
        let x_4086 : u32 = u_xlatu70;
        let x_4089 : vec4<f32> = x_3999.x_AdditionalLightsCookieAtlasUVRects[bitcast<i32>(x_4086)];
        let x_4091 : vec3<f32> = u_xlat33;
        let x_4094 : u32 = u_xlatu70;
        let x_4097 : vec4<f32> = x_3999.x_AdditionalLightsCookieAtlasUVRects[bitcast<i32>(x_4094)];
        let x_4099 : vec2<f32> = ((vec2<f32>(x_4089.x, x_4089.y) * vec2<f32>(x_4091.x, x_4091.y)) + vec2<f32>(x_4097.z, x_4097.w));
        let x_4100 : vec3<f32> = u_xlat33;
        u_xlat33 = vec3<f32>(x_4099.x, x_4099.y, x_4100.z);
      } else {
        let x_4104 : i32 = u_xlati74;
        u_xlatb74 = (x_4104 == 1i);
        let x_4106 : bool = u_xlatb74;
        u_xlati74 = select(0i, 1i, x_4106);
        let x_4108 : i32 = u_xlati74;
        if ((x_4108 != 0i)) {
          let x_4112 : vec3<f32> = vs_INTERP0;
          let x_4114 : i32 = u_xlati11;
          let x_4117 : i32 = u_xlati11;
          let x_4121 : vec4<f32> = x_3999.x_AdditionalLightsWorldToLights[((x_4114 + 1i) / 4i)][((x_4117 + 1i) % 4i)];
          let x_4123 : vec2<f32> = (vec2<f32>(x_4112.y, x_4112.y) * vec2<f32>(x_4121.x, x_4121.y));
          let x_4124 : vec4<f32> = u_xlat12;
          u_xlat12 = vec4<f32>(x_4123.x, x_4123.y, x_4124.z, x_4124.w);
          let x_4126 : i32 = u_xlati11;
          let x_4128 : i32 = u_xlati11;
          let x_4131 : vec4<f32> = x_3999.x_AdditionalLightsWorldToLights[(x_4126 / 4i)][(x_4128 % 4i)];
          let x_4133 : vec3<f32> = vs_INTERP0;
          let x_4136 : vec4<f32> = u_xlat12;
          let x_4138 : vec2<f32> = ((vec2<f32>(x_4131.x, x_4131.y) * vec2<f32>(x_4133.x, x_4133.x)) + vec2<f32>(x_4136.x, x_4136.y));
          let x_4139 : vec4<f32> = u_xlat12;
          u_xlat12 = vec4<f32>(x_4138.x, x_4138.y, x_4139.z, x_4139.w);
          let x_4141 : i32 = u_xlati11;
          let x_4144 : i32 = u_xlati11;
          let x_4148 : vec4<f32> = x_3999.x_AdditionalLightsWorldToLights[((x_4141 + 2i) / 4i)][((x_4144 + 2i) % 4i)];
          let x_4150 : vec3<f32> = vs_INTERP0;
          let x_4153 : vec4<f32> = u_xlat12;
          let x_4155 : vec2<f32> = ((vec2<f32>(x_4148.x, x_4148.y) * vec2<f32>(x_4150.z, x_4150.z)) + vec2<f32>(x_4153.x, x_4153.y));
          let x_4156 : vec4<f32> = u_xlat12;
          u_xlat12 = vec4<f32>(x_4155.x, x_4155.y, x_4156.z, x_4156.w);
          let x_4158 : vec4<f32> = u_xlat12;
          let x_4160 : i32 = u_xlati11;
          let x_4163 : i32 = u_xlati11;
          let x_4167 : vec4<f32> = x_3999.x_AdditionalLightsWorldToLights[((x_4160 + 3i) / 4i)][((x_4163 + 3i) % 4i)];
          let x_4169 : vec2<f32> = (vec2<f32>(x_4158.x, x_4158.y) + vec2<f32>(x_4167.x, x_4167.y));
          let x_4170 : vec4<f32> = u_xlat12;
          u_xlat12 = vec4<f32>(x_4169.x, x_4169.y, x_4170.z, x_4170.w);
          let x_4172 : vec4<f32> = u_xlat12;
          let x_4175 : vec2<f32> = ((vec2<f32>(x_4172.x, x_4172.y) * vec2<f32>(0.5f, 0.5f)) + vec2<f32>(0.5f, 0.5f));
          let x_4176 : vec4<f32> = u_xlat12;
          u_xlat12 = vec4<f32>(x_4175.x, x_4175.y, x_4176.z, x_4176.w);
          let x_4178 : vec4<f32> = u_xlat12;
          let x_4180 : vec2<f32> = fract(vec2<f32>(x_4178.x, x_4178.y));
          let x_4181 : vec4<f32> = u_xlat12;
          u_xlat12 = vec4<f32>(x_4180.x, x_4180.y, x_4181.z, x_4181.w);
          let x_4183 : u32 = u_xlatu70;
          let x_4186 : vec4<f32> = x_3999.x_AdditionalLightsCookieAtlasUVRects[bitcast<i32>(x_4183)];
          let x_4188 : vec4<f32> = u_xlat12;
          let x_4191 : u32 = u_xlatu70;
          let x_4194 : vec4<f32> = x_3999.x_AdditionalLightsCookieAtlasUVRects[bitcast<i32>(x_4191)];
          let x_4196 : vec2<f32> = ((vec2<f32>(x_4186.x, x_4186.y) * vec2<f32>(x_4188.x, x_4188.y)) + vec2<f32>(x_4194.z, x_4194.w));
          let x_4197 : vec3<f32> = u_xlat33;
          u_xlat33 = vec3<f32>(x_4196.x, x_4196.y, x_4197.z);
        } else {
          let x_4200 : vec3<f32> = vs_INTERP0;
          let x_4202 : i32 = u_xlati11;
          let x_4205 : i32 = u_xlati11;
          let x_4209 : vec4<f32> = x_3999.x_AdditionalLightsWorldToLights[((x_4202 + 1i) / 4i)][((x_4205 + 1i) % 4i)];
          u_xlat12 = (vec4<f32>(x_4200.y, x_4200.y, x_4200.y, x_4200.y) * x_4209);
          let x_4211 : i32 = u_xlati11;
          let x_4213 : i32 = u_xlati11;
          let x_4216 : vec4<f32> = x_3999.x_AdditionalLightsWorldToLights[(x_4211 / 4i)][(x_4213 % 4i)];
          let x_4217 : vec3<f32> = vs_INTERP0;
          let x_4220 : vec4<f32> = u_xlat12;
          u_xlat12 = ((x_4216 * vec4<f32>(x_4217.x, x_4217.x, x_4217.x, x_4217.x)) + x_4220);
          let x_4222 : i32 = u_xlati11;
          let x_4225 : i32 = u_xlati11;
          let x_4229 : vec4<f32> = x_3999.x_AdditionalLightsWorldToLights[((x_4222 + 2i) / 4i)][((x_4225 + 2i) % 4i)];
          let x_4230 : vec3<f32> = vs_INTERP0;
          let x_4233 : vec4<f32> = u_xlat12;
          u_xlat12 = ((x_4229 * vec4<f32>(x_4230.z, x_4230.z, x_4230.z, x_4230.z)) + x_4233);
          let x_4235 : vec4<f32> = u_xlat12;
          let x_4236 : i32 = u_xlati11;
          let x_4239 : i32 = u_xlati11;
          let x_4243 : vec4<f32> = x_3999.x_AdditionalLightsWorldToLights[((x_4236 + 3i) / 4i)][((x_4239 + 3i) % 4i)];
          u_xlat12 = (x_4235 + x_4243);
          let x_4245 : vec4<f32> = u_xlat12;
          let x_4247 : vec4<f32> = u_xlat12;
          let x_4249 : vec3<f32> = (vec3<f32>(x_4245.x, x_4245.y, x_4245.z) / vec3<f32>(x_4247.w, x_4247.w, x_4247.w));
          let x_4250 : vec4<f32> = u_xlat12;
          u_xlat12 = vec4<f32>(x_4249.x, x_4249.y, x_4249.z, x_4250.w);
          let x_4252 : vec4<f32> = u_xlat12;
          let x_4254 : vec4<f32> = u_xlat12;
          u_xlat74 = dot(vec3<f32>(x_4252.x, x_4252.y, x_4252.z), vec3<f32>(x_4254.x, x_4254.y, x_4254.z));
          let x_4257 : f32 = u_xlat74;
          u_xlat74 = inverseSqrt(x_4257);
          let x_4259 : f32 = u_xlat74;
          let x_4261 : vec4<f32> = u_xlat12;
          let x_4263 : vec3<f32> = (vec3<f32>(x_4259, x_4259, x_4259) * vec3<f32>(x_4261.x, x_4261.y, x_4261.z));
          let x_4264 : vec4<f32> = u_xlat12;
          u_xlat12 = vec4<f32>(x_4263.x, x_4263.y, x_4263.z, x_4264.w);
          let x_4266 : vec4<f32> = u_xlat12;
          u_xlat74 = dot(abs(vec3<f32>(x_4266.x, x_4266.y, x_4266.z)), vec3<f32>(1.0f, 1.0f, 1.0f));
          let x_4271 : f32 = u_xlat74;
          u_xlat74 = max(x_4271, 0.000001f);
          let x_4274 : f32 = u_xlat74;
          u_xlat74 = (1.0f / x_4274);
          let x_4276 : f32 = u_xlat74;
          let x_4278 : vec4<f32> = u_xlat12;
          let x_4280 : vec3<f32> = (vec3<f32>(x_4276, x_4276, x_4276) * vec3<f32>(x_4278.z, x_4278.x, x_4278.y));
          let x_4281 : vec4<f32> = u_xlat13;
          u_xlat13 = vec4<f32>(x_4280.x, x_4280.y, x_4280.z, x_4281.w);
          let x_4284 : f32 = u_xlat13.x;
          u_xlat13.x = -(x_4284);
          let x_4288 : f32 = u_xlat13.x;
          u_xlat13.x = clamp(x_4288, 0.0f, 1.0f);
          let x_4292 : vec4<f32> = u_xlat13;
          let x_4295 : vec4<bool> = (vec4<f32>(x_4292.y, x_4292.y, x_4292.y, x_4292.z) >= vec4<f32>(0.0f, 0.0f, 0.0f, 0.0f));
          let x_4296 : vec2<bool> = vec2<bool>(x_4295.x, x_4295.w);
          let x_4297 : vec4<bool> = u_xlatb11;
          u_xlatb11 = vec4<bool>(x_4296.x, x_4297.y, x_4297.z, x_4296.y);
          let x_4300 : bool = u_xlatb11.x;
          if (x_4300) {
            let x_4305 : f32 = u_xlat13.x;
            x_4301 = x_4305;
          } else {
            let x_4308 : f32 = u_xlat13.x;
            x_4301 = -(x_4308);
          }
          let x_4310 : f32 = x_4301;
          u_xlat11.x = x_4310;
          let x_4313 : bool = u_xlatb11.w;
          if (x_4313) {
            let x_4318 : f32 = u_xlat13.x;
            x_4314 = x_4318;
          } else {
            let x_4321 : f32 = u_xlat13.x;
            x_4314 = -(x_4321);
          }
          let x_4323 : f32 = x_4314;
          u_xlat11.w = x_4323;
          let x_4325 : vec4<f32> = u_xlat12;
          let x_4327 : f32 = u_xlat74;
          let x_4330 : vec4<f32> = u_xlat11;
          let x_4332 : vec2<f32> = ((vec2<f32>(x_4325.x, x_4325.y) * vec2<f32>(x_4327, x_4327)) + vec2<f32>(x_4330.x, x_4330.w));
          let x_4333 : vec4<f32> = u_xlat11;
          u_xlat11 = vec4<f32>(x_4332.x, x_4333.y, x_4333.z, x_4332.y);
          let x_4335 : vec4<f32> = u_xlat11;
          let x_4338 : vec2<f32> = ((vec2<f32>(x_4335.x, x_4335.w) * vec2<f32>(0.5f, 0.5f)) + vec2<f32>(0.5f, 0.5f));
          let x_4339 : vec4<f32> = u_xlat11;
          u_xlat11 = vec4<f32>(x_4338.x, x_4339.y, x_4339.z, x_4338.y);
          let x_4341 : vec4<f32> = u_xlat11;
          let x_4345 : vec2<f32> = clamp(vec2<f32>(x_4341.x, x_4341.w), vec2<f32>(0.0f, 0.0f), vec2<f32>(1.0f, 1.0f));
          let x_4346 : vec4<f32> = u_xlat11;
          u_xlat11 = vec4<f32>(x_4345.x, x_4346.y, x_4346.z, x_4345.y);
          let x_4348 : u32 = u_xlatu70;
          let x_4351 : vec4<f32> = x_3999.x_AdditionalLightsCookieAtlasUVRects[bitcast<i32>(x_4348)];
          let x_4353 : vec4<f32> = u_xlat11;
          let x_4356 : u32 = u_xlatu70;
          let x_4359 : vec4<f32> = x_3999.x_AdditionalLightsCookieAtlasUVRects[bitcast<i32>(x_4356)];
          let x_4361 : vec2<f32> = ((vec2<f32>(x_4351.x, x_4351.y) * vec2<f32>(x_4353.x, x_4353.w)) + vec2<f32>(x_4359.z, x_4359.w));
          let x_4362 : vec3<f32> = u_xlat33;
          u_xlat33 = vec3<f32>(x_4361.x, x_4361.y, x_4362.z);
        }
      }
      let x_4369 : vec3<f32> = u_xlat33;
      let x_4372 : f32 = x_90.x_GlobalMipBias.x;
      let x_4373 : vec4<f32> = textureSampleBias(x_AdditionalLightsCookieAtlasTexture, sampler_AdditionalLightsCookieAtlasTexture, vec2<f32>(x_4369.x, x_4369.y), x_4372);
      u_xlat11 = x_4373;
      let x_4375 : bool = u_xlatb46.y;
      if (x_4375) {
        let x_4380 : f32 = u_xlat11.w;
        x_4376 = x_4380;
      } else {
        let x_4383 : f32 = u_xlat11.x;
        x_4376 = x_4383;
      }
      let x_4384 : f32 = x_4376;
      u_xlat74 = x_4384;
      let x_4386 : bool = u_xlatb46.x;
      if (x_4386) {
        let x_4390 : vec4<f32> = u_xlat11;
        x_4387 = vec3<f32>(x_4390.x, x_4390.y, x_4390.z);
      } else {
        let x_4393 : f32 = u_xlat74;
        x_4387 = vec3<f32>(x_4393, x_4393, x_4393);
      }
      let x_4395 : vec3<f32> = x_4387;
      let x_4396 : vec4<f32> = u_xlat11;
      u_xlat11 = vec4<f32>(x_4395.x, x_4395.y, x_4395.z, x_4396.w);
    } else {
      u_xlat11.x = 1.0f;
      u_xlat11.y = 1.0f;
      u_xlat11.z = 1.0f;
    }
    let x_4402 : vec4<f32> = u_xlat11;
    let x_4404 : u32 = u_xlatu70;
    let x_4407 : vec4<f32> = x_3894.x_AdditionalLightsColor[bitcast<i32>(x_4404)];
    let x_4409 : vec3<f32> = (vec3<f32>(x_4402.x, x_4402.y, x_4402.z) * vec3<f32>(x_4407.x, x_4407.y, x_4407.z));
    let x_4410 : vec4<f32> = u_xlat11;
    u_xlat11 = vec4<f32>(x_4409.x, x_4409.y, x_4409.z, x_4410.w);
    let x_4412 : vec2<f32> = u_xlat51;
    let x_4414 : vec4<f32> = u_xlat11;
    let x_4416 : vec3<f32> = (vec3<f32>(x_4412.x, x_4412.x, x_4412.x) * vec3<f32>(x_4414.x, x_4414.y, x_4414.z));
    let x_4417 : vec4<f32> = u_xlat11;
    u_xlat11 = vec4<f32>(x_4416.x, x_4416.y, x_4416.z, x_4417.w);
    let x_4419 : vec4<f32> = u_xlat3;
    let x_4421 : vec4<f32> = u_xlat10;
    u_xlat70 = dot(vec3<f32>(x_4419.x, x_4419.y, x_4419.z), vec3<f32>(x_4421.x, x_4421.y, x_4421.z));
    let x_4424 : f32 = u_xlat70;
    u_xlat70 = clamp(x_4424, 0.0f, 1.0f);
    let x_4426 : f32 = u_xlat70;
    let x_4427 : f32 = u_xlat71;
    u_xlat70 = (x_4426 * x_4427);
    let x_4429 : f32 = u_xlat70;
    let x_4431 : vec4<f32> = u_xlat11;
    let x_4433 : vec3<f32> = (vec3<f32>(x_4429, x_4429, x_4429) * vec3<f32>(x_4431.x, x_4431.y, x_4431.z));
    let x_4434 : vec4<f32> = u_xlat11;
    u_xlat11 = vec4<f32>(x_4433.x, x_4433.y, x_4433.z, x_4434.w);
    let x_4436 : vec3<f32> = u_xlat31;
    let x_4437 : f32 = u_xlat73;
    let x_4440 : vec3<f32> = u_xlat1;
    u_xlat31 = ((x_4436 * vec3<f32>(x_4437, x_4437, x_4437)) + x_4440);
    let x_4442 : vec3<f32> = u_xlat31;
    let x_4443 : vec3<f32> = u_xlat31;
    u_xlat70 = dot(x_4442, x_4443);
    let x_4445 : f32 = u_xlat70;
    u_xlat70 = max(x_4445, 1.17549435e-37f);
    let x_4447 : f32 = u_xlat70;
    u_xlat70 = inverseSqrt(x_4447);
    let x_4449 : f32 = u_xlat70;
    let x_4451 : vec3<f32> = u_xlat31;
    u_xlat31 = (vec3<f32>(x_4449, x_4449, x_4449) * x_4451);
    let x_4453 : vec4<f32> = u_xlat3;
    let x_4455 : vec3<f32> = u_xlat31;
    u_xlat70 = dot(vec3<f32>(x_4453.x, x_4453.y, x_4453.z), x_4455);
    let x_4457 : f32 = u_xlat70;
    u_xlat70 = clamp(x_4457, 0.0f, 1.0f);
    let x_4459 : vec4<f32> = u_xlat10;
    let x_4461 : vec3<f32> = u_xlat31;
    u_xlat71 = dot(vec3<f32>(x_4459.x, x_4459.y, x_4459.z), x_4461);
    let x_4463 : f32 = u_xlat71;
    u_xlat71 = clamp(x_4463, 0.0f, 1.0f);
    let x_4465 : f32 = u_xlat70;
    let x_4466 : f32 = u_xlat70;
    u_xlat70 = (x_4465 * x_4466);
    let x_4468 : f32 = u_xlat70;
    let x_4470 : f32 = u_xlat9.x;
    u_xlat70 = ((x_4468 * x_4470) + 1.000010014f);
    let x_4473 : f32 = u_xlat71;
    let x_4474 : f32 = u_xlat71;
    u_xlat71 = (x_4473 * x_4474);
    let x_4476 : f32 = u_xlat70;
    let x_4477 : f32 = u_xlat70;
    u_xlat70 = (x_4476 * x_4477);
    let x_4479 : f32 = u_xlat71;
    u_xlat71 = max(x_4479, 0.100000001f);
    let x_4481 : f32 = u_xlat70;
    let x_4482 : f32 = u_xlat71;
    u_xlat70 = (x_4481 * x_4482);
    let x_4484 : f32 = u_xlat29;
    let x_4485 : f32 = u_xlat70;
    u_xlat70 = (x_4484 * x_4485);
    let x_4487 : f32 = u_xlat72;
    let x_4488 : f32 = u_xlat70;
    u_xlat70 = (x_4487 / x_4488);
    let x_4490 : f32 = u_xlat70;
    let x_4493 : vec3<f32> = u_xlat4;
    u_xlat31 = ((vec3<f32>(x_4490, x_4490, x_4490) * vec3<f32>(0.039999999f, 0.039999999f, 0.039999999f)) + x_4493);
    let x_4495 : vec3<f32> = u_xlat31;
    let x_4496 : vec4<f32> = u_xlat11;
    let x_4499 : vec4<f32> = u_xlat8;
    let x_4501 : vec3<f32> = ((x_4495 * vec3<f32>(x_4496.x, x_4496.y, x_4496.z)) + vec3<f32>(x_4499.x, x_4499.y, x_4499.z));
    let x_4502 : vec4<f32> = u_xlat8;
    u_xlat8 = vec4<f32>(x_4501.x, x_4501.y, x_4501.z, x_4502.w);

    continuing {
      let x_4504 : u32 = u_xlatu_loop_1;
      u_xlatu_loop_1 = (x_4504 + bitcast<u32>(1i));
    }
  }
  let x_4506 : vec4<f32> = u_xlat5;
  let x_4508 : vec4<f32> = u_xlat7;
  let x_4511 : vec4<f32> = u_xlat6;
  u_xlat1 = ((vec3<f32>(x_4506.x, x_4506.y, x_4506.z) * vec3<f32>(x_4508.x, x_4508.x, x_4508.x)) + vec3<f32>(x_4511.x, x_4511.y, x_4511.z));
  let x_4514 : vec4<f32> = u_xlat8;
  let x_4516 : vec3<f32> = u_xlat1;
  u_xlat1 = (vec3<f32>(x_4514.x, x_4514.y, x_4514.z) + x_4516);
  let x_4518 : vec4<f32> = vs_INTERP4;
  let x_4520 : vec3<f32> = u_xlat0;
  let x_4522 : vec3<f32> = u_xlat1;
  u_xlat0 = ((vec3<f32>(x_4518.w, x_4518.w, x_4518.w) * x_4520) + x_4522);
  let x_4525 : f32 = u_xlat24.x;
  let x_4527 : f32 = u_xlat24.x;
  u_xlat66 = (x_4525 * -(x_4527));
  let x_4530 : f32 = u_xlat66;
  u_xlat66 = exp2(x_4530);
  let x_4532 : vec3<f32> = u_xlat0;
  let x_4535 : vec4<f32> = x_90.unity_FogColor;
  u_xlat0 = (x_4532 + -(vec3<f32>(x_4535.x, x_4535.y, x_4535.z)));
  let x_4541 : f32 = u_xlat66;
  let x_4543 : vec3<f32> = u_xlat0;
  let x_4546 : vec4<f32> = x_90.unity_FogColor;
  let x_4548 : vec3<f32> = ((vec3<f32>(x_4541, x_4541, x_4541) * x_4543) + vec3<f32>(x_4546.x, x_4546.y, x_4546.z));
  let x_4549 : vec4<f32> = SV_Target0;
  SV_Target0 = vec4<f32>(x_4548.x, x_4548.y, x_4548.z, x_4549.w);
  let x_4551 : bool = u_xlatb2;
  let x_4552 : f32 = u_xlat67;
  SV_Target0.w = select(1.0f, x_4552, x_4551);
  return;
}

struct main_out {
  @location(0)
  SV_Target0_1 : vec4<f32>,
}

@fragment
fn main(@builtin(position) gl_FragCoord_param : vec4<f32>, @location(1) vs_INTERP1_param : vec3<f32>, @location(0) vs_INTERP0_param : vec3<f32>, @location(3) vs_INTERP3_param : vec4<f32>, @location(4) vs_INTERP4_param : vec4<f32>, @location(2) vs_INTERP2_param : vec4<f32>, @location(5) vs_INTERP5_param : vec2<f32>) -> main_out {
  gl_FragCoord = gl_FragCoord_param;
  vs_INTERP1 = vs_INTERP1_param;
  vs_INTERP0 = vs_INTERP0_param;
  vs_INTERP3 = vs_INTERP3_param;
  vs_INTERP4 = vs_INTERP4_param;
  vs_INTERP2 = vs_INTERP2_param;
  vs_INTERP5 = vs_INTERP5_param;
  main_1();
  return main_out(SV_Target0);
}

