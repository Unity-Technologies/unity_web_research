struct PGlobals {
  x_GlobalMipBias : vec2<f32>,
  @size(8)
  padding : u32,
  x_MainLightPosition : vec4<f32>,
  x_MainLightColor : vec4<f32>,
  x_AdditionalLightsCount : vec4<f32>,
  x_Time : vec4<f32>,
  x_ScreenParams : vec4<f32>,
  x_ZBufferParams : vec4<f32>,
  unity_FogColor : vec4<f32>,
  unity_MatrixVP : mat4x4<f32>,
  x_MaxDepth : f32,
  @size(12)
  padding_1 : u32,
  x_VeraslWater_DepthCamParams : vec4<f32>,
}

struct UnityPerMaterial {
  x_BumpScale : f32,
  @size(12)
  padding_2 : u32,
  x_DitherPattern_TexelSize : vec4<f32>,
}

type Arr = array<mat4x4<f32>, 5u>;

struct MainLightShadows {
  x_MainLightWorldToShadow : Arr,
  x_CascadeShadowSplitSpheres0 : vec4<f32>,
  x_CascadeShadowSplitSpheres1 : vec4<f32>,
  x_CascadeShadowSplitSpheres2 : vec4<f32>,
  x_CascadeShadowSplitSpheres3 : vec4<f32>,
  x_CascadeShadowSplitSphereRadii : vec4<f32>,
  x_MainLightShadowOffset0 : vec4<f32>,
  x_MainLightShadowOffset1 : vec4<f32>,
  x_MainLightShadowParams : vec4<f32>,
  x_MainLightShadowmapSize : vec4<f32>,
}

type Arr_1 = array<vec4<f32>, 2u>;

struct UnityPerDraw {
  unity_ObjectToWorld : mat4x4<f32>,
  unity_WorldToObject : mat4x4<f32>,
  unity_LODFade : vec4<f32>,
  unity_WorldTransformParams : vec4<f32>,
  unity_RenderingLayer : vec4<f32>,
  unity_LightData : vec4<f32>,
  unity_LightIndices : Arr_1,
  unity_ProbesOcclusion : vec4<f32>,
  unity_SpecCube0_HDR : vec4<f32>,
  unity_SpecCube1_HDR : vec4<f32>,
  unity_SpecCube0_BoxMax : vec4<f32>,
  unity_SpecCube0_BoxMin : vec4<f32>,
  unity_SpecCube0_ProbePosition : vec4<f32>,
  unity_SpecCube1_BoxMax : vec4<f32>,
  unity_SpecCube1_BoxMin : vec4<f32>,
  unity_SpecCube1_ProbePosition : vec4<f32>,
  unity_LightmapST : vec4<f32>,
  unity_DynamicLightmapST : vec4<f32>,
  unity_SHAr : vec4<f32>,
  unity_SHAg : vec4<f32>,
  unity_SHAb : vec4<f32>,
  unity_SHBr : vec4<f32>,
  unity_SHBg : vec4<f32>,
  unity_SHBb : vec4<f32>,
  unity_SHC : vec4<f32>,
  unity_RendererBounds_Min : vec4<f32>,
  unity_RendererBounds_Max : vec4<f32>,
  unity_MatrixPreviousM : mat4x4<f32>,
  unity_MatrixPreviousMI : mat4x4<f32>,
  unity_MotionVectorsParams : vec4<f32>,
  unity_SpriteColor : vec4<f32>,
  unity_SpriteProps : vec4<f32>,
}

type Arr_2 = array<vec4<f32>, 256u>;

type Arr_3 = array<vec4<f32>, 256u>;

type Arr_4 = array<vec4<f32>, 256u>;

type Arr_5 = array<vec4<f32>, 256u>;

type Arr_6 = array<vec4<f32>, 256u>;

struct strided_arr {
  @size(16)
  el : f32,
}

type Arr_7 = array<strided_arr, 256u>;

struct AdditionalLights {
  x_AdditionalLightsPosition : Arr_6,
  x_AdditionalLightsColor : Arr_6,
  x_AdditionalLightsAttenuation : Arr_6,
  x_AdditionalLightsSpotDir : Arr_6,
  x_AdditionalLightsOcclusionProbes : Arr_6,
  x_AdditionalLightsLayerMasks : Arr_7,
}

var<private> vs_TEXCOORD6 : vec4<f32>;

@group(0) @binding(1) var x_WaterFXMap : texture_2d<f32>;

@group(0) @binding(10) var sampler_ScreenTextures_linear_clamp : sampler;

var<private> vs_TEXCOORD3 : vec3<f32>;

@group(1) @binding(0) var<uniform> x_40 : PGlobals;

@group(0) @binding(2) var x_CameraDepthTexture : texture_2d<f32>;

var<private> vs_TEXCOORD5 : vec4<f32>;

var<private> vs_TEXCOORD1 : vec3<f32>;

@group(0) @binding(4) var x_WaterDepthMap : texture_2d<f32>;

@group(0) @binding(13) var sampler_WaterDepthMap_linear_clamp : sampler;

@group(0) @binding(6) var x_SurfaceMap : texture_2d<f32>;

@group(0) @binding(15) var sampler_SurfaceMap : sampler;

var<private> vs_TEXCOORD0 : vec4<f32>;

@group(1) @binding(3) var<uniform> x_203 : UnityPerMaterial;

var<private> vs_NORMAL0 : vec3<f32>;

var<private> vs_TEXCOORD2 : vec3<f32>;

@group(1) @binding(4) var<uniform> x_364 : MainLightShadows;

@group(0) @binding(9) var x_MainLightShadowmapTexture : texture_depth_2d;

@group(0) @binding(18) var sampler_MainLightShadowmapTexture : sampler_comparison;

@group(0) @binding(8) var x_DitherPattern : texture_2d<f32>;

@group(0) @binding(17) var sampler_DitherPattern : sampler;

@group(1) @binding(2) var<uniform> x_2327 : UnityPerDraw;

@group(0) @binding(7) var x_FoamMap : texture_2d<f32>;

@group(0) @binding(16) var sampler_FoamMap : sampler;

@group(0) @binding(5) var x_AbsorptionScatteringRamp : texture_2d<f32>;

@group(0) @binding(14) var sampler_AbsorptionScatteringRamp : sampler;

@group(1) @binding(1) var<uniform> x_2727 : AdditionalLights;

@group(0) @binding(0) var x_CubemapTexture : texture_cube<f32>;

@group(0) @binding(11) var sampler_CubemapTexture : sampler;

@group(0) @binding(3) var x_CameraOpaqueTexture : texture_2d<f32>;

@group(0) @binding(12) var sampler_CameraOpaqueTexture_linear_clamp : sampler;

var<private> vs_TEXCOORD4 : vec2<f32>;

var<private> SV_Target0 : vec4<f32>;

var<private> gl_FragCoord : vec4<f32>;

fn main_1() {
  var u_xlat0 : vec4<f32>;
  var u_xlat1 : vec3<f32>;
  var u_xlat38 : f32;
  var u_xlat2 : vec4<f32>;
  var u_xlat57 : f32;
  var u_xlat58 : f32;
  var u_xlat40 : vec2<f32>;
  var u_xlat3 : f32;
  var u_xlat4 : vec4<f32>;
  var u_xlat20 : vec2<f32>;
  var u_xlatb22 : bool;
  var x_322 : vec2<f32>;
  var u_xlat22 : vec3<f32>;
  var u_xlat5 : vec4<f32>;
  var u_xlat6 : vec4<f32>;
  var u_xlat7 : vec4<f32>;
  var u_xlatb4 : vec4<bool>;
  var u_xlatu22 : u32;
  var u_xlati22 : i32;
  var txVec0 : vec3<f32>;
  var txVec1 : vec3<f32>;
  var txVec2 : vec3<f32>;
  var txVec3 : vec3<f32>;
  var u_xlatb23 : bool;
  var u_xlat23 : vec2<f32>;
  var u_xlat43 : vec2<f32>;
  var u_xlat45 : vec2<f32>;
  var u_xlat8 : vec4<f32>;
  var u_xlat9 : vec4<f32>;
  var u_xlat10 : vec4<f32>;
  var u_xlat11 : vec4<f32>;
  var u_xlat12 : vec4<f32>;
  var u_xlat13 : vec4<f32>;
  var txVec4 : vec3<f32>;
  var u_xlat42 : f32;
  var txVec5 : vec3<f32>;
  var u_xlat61 : f32;
  var txVec6 : vec3<f32>;
  var txVec7 : vec3<f32>;
  var txVec8 : vec3<f32>;
  var txVec9 : vec3<f32>;
  var txVec10 : vec3<f32>;
  var txVec11 : vec3<f32>;
  var txVec12 : vec3<f32>;
  var u_xlat49 : vec2<f32>;
  var u_xlat14 : vec4<f32>;
  var u_xlat25 : vec3<f32>;
  var u_xlat15 : vec2<f32>;
  var u_xlat46 : vec2<f32>;
  var u_xlat16 : vec4<f32>;
  var u_xlat17 : vec4<f32>;
  var u_xlat18 : vec4<f32>;
  var txVec13 : vec3<f32>;
  var txVec14 : vec3<f32>;
  var txVec15 : vec3<f32>;
  var txVec16 : vec3<f32>;
  var txVec17 : vec3<f32>;
  var txVec18 : vec3<f32>;
  var txVec19 : vec3<f32>;
  var txVec20 : vec3<f32>;
  var txVec21 : vec3<f32>;
  var txVec22 : vec3<f32>;
  var txVec23 : vec3<f32>;
  var txVec24 : vec3<f32>;
  var txVec25 : vec3<f32>;
  var txVec26 : vec3<f32>;
  var txVec27 : vec3<f32>;
  var txVec28 : vec3<f32>;
  var txVec29 : vec3<f32>;
  var u_xlatb41 : bool;
  var u_xlatb60 : bool;
  var x_1815 : f32;
  var u_xlat41 : vec2<f32>;
  var u_xlatu_loop_1 : u32;
  var u_xlat44 : vec2<f32>;
  var u_xlatb7 : vec4<bool>;
  var u_xlatu7 : u32;
  var u_xlati7 : i32;
  var u_xlat26 : vec3<f32>;
  var txVec30 : vec3<f32>;
  var u_xlatb5 : vec4<bool>;
  var u_xlatu0 : u32;
  var u_xlati0 : i32;
  var u_xlat19 : f32;
  var u_xlatb19 : bool;
  var u_xlatb0 : bool;
  var u_xlat59 : f32;
  var u_xlatu_loop_2 : u32;
  var u_xlatu1 : u32;
  var u_xlati59 : i32;
  var indexable : array<vec4<u32>, 4u>;
  var u_xlati1 : i32;
  var u_xlat_precise_vec4 : vec4<f32>;
  var u_xlat_precise_ivec4 : vec4<i32>;
  var u_xlat_precise_bvec4 : vec4<bool>;
  var u_xlat_precise_uvec4 : vec4<u32>;
  let x_13 : vec4<f32> = vs_TEXCOORD6;
  let x_15 : vec4<f32> = vs_TEXCOORD6;
  let x_17 : vec2<f32> = (vec2<f32>(x_13.x, x_13.y) / vec2<f32>(x_15.w, x_15.w));
  let x_18 : vec4<f32> = u_xlat0;
  u_xlat0 = vec4<f32>(x_17.x, x_17.y, x_18.z, x_18.w);
  let x_35 : vec3<f32> = vs_TEXCOORD3;
  let x_47 : f32 = x_40.x_GlobalMipBias.x;
  let x_48 : vec4<f32> = textureSampleBias(x_WaterFXMap, sampler_ScreenTextures_linear_clamp, vec2<f32>(x_35.x, x_35.y), x_47);
  u_xlat1 = vec3<f32>(x_48.x, x_48.y, x_48.z);
  let x_56 : vec4<f32> = u_xlat0;
  let x_59 : f32 = x_40.x_GlobalMipBias.x;
  let x_60 : vec4<f32> = textureSampleBias(x_CameraDepthTexture, sampler_ScreenTextures_linear_clamp, vec2<f32>(x_56.x, x_56.y), x_59);
  u_xlat38 = x_60.x;
  let x_65 : f32 = x_40.x_ZBufferParams.z;
  let x_66 : f32 = u_xlat38;
  let x_70 : f32 = x_40.x_ZBufferParams.w;
  u_xlat38 = ((x_65 * x_66) + x_70);
  let x_73 : f32 = u_xlat38;
  u_xlat38 = (1.0f / x_73);
  let x_75 : f32 = u_xlat38;
  let x_79 : f32 = vs_TEXCOORD5.x;
  let x_83 : f32 = vs_TEXCOORD5.y;
  u_xlat38 = ((x_75 * x_79) + -(x_83));
  let x_88 : vec3<f32> = vs_TEXCOORD1;
  let x_95 : vec2<f32> = ((vec2<f32>(x_88.x, x_88.z) * vec2<f32>(0.002f, 0.002f)) + vec2<f32>(0.5f, 0.5f));
  let x_96 : vec4<f32> = u_xlat2;
  u_xlat2 = vec4<f32>(x_95.x, x_95.y, x_96.z, x_96.w);
  let x_104 : vec4<f32> = u_xlat2;
  let x_106 : vec4<f32> = textureSampleLevel(x_WaterDepthMap, sampler_WaterDepthMap_linear_clamp, vec2<f32>(x_104.x, x_104.y), 1.0f);
  u_xlat57 = x_106.x;
  let x_108 : f32 = u_xlat57;
  u_xlat57 = (-(x_108) + 1.0f);
  let x_114 : f32 = x_40.x_MaxDepth;
  let x_117 : f32 = x_40.x_VeraslWater_DepthCamParams.x;
  u_xlat58 = (x_114 + x_117);
  let x_119 : f32 = u_xlat57;
  let x_120 : f32 = u_xlat58;
  let x_123 : f32 = x_40.x_VeraslWater_DepthCamParams.x;
  u_xlat57 = ((x_119 * x_120) + -(x_123));
  let x_126 : f32 = u_xlat57;
  let x_128 : f32 = vs_TEXCOORD1.y;
  u_xlat57 = (x_126 + x_128);
  let x_131 : f32 = x_40.x_MaxDepth;
  u_xlat58 = (1.0f / x_131);
  let x_139 : vec4<f32> = vs_TEXCOORD0;
  let x_142 : f32 = x_40.x_GlobalMipBias.x;
  let x_143 : vec4<f32> = textureSampleBias(x_SurfaceMap, sampler_SurfaceMap, vec2<f32>(x_139.z, x_139.w), x_142);
  let x_144 : vec2<f32> = vec2<f32>(x_143.x, x_143.y);
  let x_145 : vec4<f32> = u_xlat2;
  u_xlat2 = vec4<f32>(x_144.x, x_144.y, x_145.z, x_145.w);
  let x_147 : vec4<f32> = u_xlat2;
  let x_154 : vec2<f32> = ((vec2<f32>(x_147.x, x_147.y) * vec2<f32>(2.0f, 2.0f)) + vec2<f32>(-1.0f, -1.0f));
  let x_155 : vec4<f32> = u_xlat2;
  u_xlat2 = vec4<f32>(x_154.x, x_154.y, x_155.z, x_155.w);
  let x_162 : vec4<f32> = vs_TEXCOORD0;
  let x_165 : f32 = x_40.x_GlobalMipBias.x;
  let x_166 : vec4<f32> = textureSampleBias(x_SurfaceMap, sampler_SurfaceMap, vec2<f32>(x_162.x, x_162.y), x_165);
  u_xlat40 = vec2<f32>(x_166.x, x_166.y);
  let x_168 : vec2<f32> = u_xlat40;
  u_xlat40 = ((x_168 * vec2<f32>(2.0f, 2.0f)) + vec2<f32>(-1.0f, -1.0f));
  let x_171 : vec2<f32> = u_xlat40;
  let x_173 : vec4<f32> = u_xlat2;
  let x_175 : vec2<f32> = ((x_171 * vec2<f32>(0.5f, 0.5f)) + vec2<f32>(x_173.x, x_173.y));
  let x_176 : vec4<f32> = u_xlat2;
  u_xlat2 = vec4<f32>(x_175.x, x_175.y, x_176.z, x_176.w);
  let x_179 : f32 = u_xlat38;
  u_xlat3 = (x_179 * 0.005f);
  let x_182 : f32 = u_xlat38;
  u_xlat40.x = ((x_182 * 0.25f) + 0.25f);
  let x_188 : f32 = u_xlat40.x;
  u_xlat40.x = clamp(x_188, 0.0f, 1.0f);
  let x_192 : vec2<f32> = u_xlat40;
  let x_194 : vec4<f32> = u_xlat2;
  let x_196 : vec2<f32> = (vec2<f32>(x_192.x, x_192.x) * vec2<f32>(x_194.x, x_194.y));
  let x_197 : vec4<f32> = u_xlat2;
  u_xlat2 = vec4<f32>(x_196.x, x_196.y, x_197.z, x_197.w);
  let x_199 : vec4<f32> = u_xlat2;
  let x_205 : f32 = x_203.x_BumpScale;
  let x_207 : vec2<f32> = (vec2<f32>(x_199.x, x_199.y) * vec2<f32>(x_205, x_205));
  let x_208 : vec4<f32> = u_xlat2;
  u_xlat2 = vec4<f32>(x_207.x, x_208.y, x_207.y, x_208.w);
  u_xlat2.y = 0.0f;
  u_xlat2.w = 1.0f;
  let x_212 : vec4<f32> = u_xlat2;
  let x_215 : vec3<f32> = vs_NORMAL0;
  let x_216 : vec3<f32> = (vec3<f32>(x_212.x, x_212.y, x_212.z) + x_215);
  let x_217 : vec4<f32> = u_xlat2;
  u_xlat2 = vec4<f32>(x_216.x, x_216.y, x_216.z, x_217.w);
  let x_220 : vec3<f32> = u_xlat1;
  let x_223 : vec2<f32> = (-(vec2<f32>(x_220.y, x_220.z)) + vec2<f32>(0.5f, 0.5f));
  let x_224 : vec4<f32> = u_xlat4;
  u_xlat4 = vec4<f32>(x_223.x, x_224.y, x_223.y, x_224.w);
  u_xlat4.y = 0.0f;
  let x_227 : vec4<f32> = u_xlat2;
  let x_229 : vec4<f32> = u_xlat4;
  let x_231 : vec3<f32> = (vec3<f32>(x_227.x, x_227.y, x_227.z) + vec3<f32>(x_229.x, x_229.y, x_229.z));
  let x_232 : vec4<f32> = u_xlat2;
  u_xlat2 = vec4<f32>(x_231.x, x_231.y, x_231.z, x_232.w);
  let x_235 : vec4<f32> = u_xlat2;
  let x_237 : vec4<f32> = u_xlat2;
  u_xlat20.x = dot(vec3<f32>(x_235.x, x_235.y, x_235.z), vec3<f32>(x_237.x, x_237.y, x_237.z));
  let x_242 : f32 = u_xlat20.x;
  u_xlat20.x = inverseSqrt(x_242);
  let x_245 : vec2<f32> = u_xlat20;
  let x_247 : vec4<f32> = u_xlat2;
  let x_249 : vec3<f32> = (vec3<f32>(x_245.x, x_245.x, x_245.x) * vec3<f32>(x_247.x, x_247.y, x_247.z));
  let x_250 : vec4<f32> = u_xlat2;
  u_xlat2 = vec4<f32>(x_249.x, x_249.y, x_249.z, x_250.w);
  let x_252 : vec4<f32> = u_xlat2;
  let x_259 : vec4<f32> = x_40.unity_MatrixVP[1i];
  u_xlat20 = (-(vec2<f32>(x_252.y, x_252.y)) * vec2<f32>(x_259.x, x_259.z));
  let x_263 : vec4<f32> = x_40.unity_MatrixVP[0i];
  let x_265 : vec4<f32> = u_xlat2;
  let x_269 : vec2<f32> = u_xlat20;
  u_xlat20 = ((vec2<f32>(x_263.x, x_263.z) * -(vec2<f32>(x_265.x, x_265.x))) + x_269);
  let x_273 : vec4<f32> = x_40.unity_MatrixVP[2i];
  let x_275 : vec4<f32> = u_xlat2;
  let x_279 : vec2<f32> = u_xlat20;
  u_xlat20 = ((vec2<f32>(x_273.x, x_273.z) * -(vec2<f32>(x_275.z, x_275.z))) + x_279);
  let x_281 : f32 = u_xlat3;
  u_xlat3 = x_281;
  let x_282 : f32 = u_xlat3;
  u_xlat3 = clamp(x_282, 0.0f, 1.0f);
  let x_284 : vec2<f32> = u_xlat20;
  let x_285 : f32 = u_xlat3;
  let x_288 : vec4<f32> = u_xlat0;
  u_xlat20 = ((x_284 * vec2<f32>(x_285, x_285)) + vec2<f32>(x_288.x, x_288.y));
  let x_294 : vec2<f32> = u_xlat20;
  let x_296 : f32 = x_40.x_GlobalMipBias.x;
  let x_297 : vec4<f32> = textureSampleBias(x_CameraDepthTexture, sampler_ScreenTextures_linear_clamp, x_294, x_296);
  u_xlat3 = x_297.x;
  let x_300 : f32 = x_40.x_ZBufferParams.z;
  let x_301 : f32 = u_xlat3;
  let x_304 : f32 = x_40.x_ZBufferParams.w;
  u_xlat3 = ((x_300 * x_301) + x_304);
  let x_306 : f32 = u_xlat3;
  u_xlat3 = (1.0f / x_306);
  let x_308 : f32 = u_xlat3;
  let x_310 : f32 = vs_TEXCOORD5.x;
  let x_313 : f32 = vs_TEXCOORD5.y;
  u_xlat3 = ((x_308 * x_310) + -(x_313));
  let x_319 : f32 = u_xlat3;
  u_xlatb22 = (x_319 < 0.0f);
  let x_321 : bool = u_xlatb22;
  if (x_321) {
    let x_325 : vec4<f32> = u_xlat0;
    x_322 = vec2<f32>(x_325.x, x_325.y);
  } else {
    let x_328 : vec2<f32> = u_xlat20;
    x_322 = x_328;
  }
  let x_329 : vec2<f32> = x_322;
  u_xlat20 = x_329;
  let x_330 : bool = u_xlatb22;
  let x_331 : f32 = u_xlat38;
  let x_332 : f32 = u_xlat3;
  u_xlat38 = select(x_332, x_331, x_330);
  let x_334 : vec4<f32> = u_xlat2;
  let x_337 : vec3<f32> = vs_TEXCOORD2;
  u_xlat3 = dot(vec3<f32>(x_334.x, x_334.y, x_334.z), x_337);
  let x_339 : f32 = u_xlat3;
  u_xlat3 = (-(x_339) + 1.0f);
  let x_343 : f32 = u_xlat3;
  let x_344 : f32 = u_xlat3;
  u_xlat22.x = (x_343 * x_344);
  let x_348 : f32 = u_xlat22.x;
  let x_350 : f32 = u_xlat22.x;
  u_xlat22.x = (x_348 * x_350);
  let x_354 : f32 = u_xlat22.x;
  let x_355 : f32 = u_xlat3;
  u_xlat3 = (x_354 * x_355);
  let x_357 : f32 = u_xlat3;
  u_xlat3 = clamp(x_357, 0.0f, 1.0f);
  let x_359 : vec3<f32> = vs_TEXCOORD1;
  let x_366 : vec4<f32> = x_364.x_CascadeShadowSplitSpheres0;
  u_xlat22 = (x_359 + -(vec3<f32>(x_366.x, x_366.y, x_366.z)));
  let x_370 : vec3<f32> = vs_TEXCOORD1;
  let x_372 : vec4<f32> = x_364.x_CascadeShadowSplitSpheres1;
  let x_375 : vec3<f32> = (x_370 + -(vec3<f32>(x_372.x, x_372.y, x_372.z)));
  let x_376 : vec4<f32> = u_xlat4;
  u_xlat4 = vec4<f32>(x_375.x, x_375.y, x_375.z, x_376.w);
  let x_379 : vec3<f32> = vs_TEXCOORD1;
  let x_382 : vec4<f32> = x_364.x_CascadeShadowSplitSpheres2;
  let x_385 : vec3<f32> = (x_379 + -(vec3<f32>(x_382.x, x_382.y, x_382.z)));
  let x_386 : vec4<f32> = u_xlat5;
  u_xlat5 = vec4<f32>(x_385.x, x_385.y, x_385.z, x_386.w);
  let x_389 : vec3<f32> = vs_TEXCOORD1;
  let x_392 : vec4<f32> = x_364.x_CascadeShadowSplitSpheres3;
  let x_395 : vec3<f32> = (x_389 + -(vec3<f32>(x_392.x, x_392.y, x_392.z)));
  let x_396 : vec4<f32> = u_xlat6;
  u_xlat6 = vec4<f32>(x_395.x, x_395.y, x_395.z, x_396.w);
  let x_399 : vec3<f32> = u_xlat22;
  let x_400 : vec3<f32> = u_xlat22;
  u_xlat7.x = dot(x_399, x_400);
  let x_403 : vec4<f32> = u_xlat4;
  let x_405 : vec4<f32> = u_xlat4;
  u_xlat7.y = dot(vec3<f32>(x_403.x, x_403.y, x_403.z), vec3<f32>(x_405.x, x_405.y, x_405.z));
  let x_409 : vec4<f32> = u_xlat5;
  let x_411 : vec4<f32> = u_xlat5;
  u_xlat7.z = dot(vec3<f32>(x_409.x, x_409.y, x_409.z), vec3<f32>(x_411.x, x_411.y, x_411.z));
  let x_415 : vec4<f32> = u_xlat6;
  let x_417 : vec4<f32> = u_xlat6;
  u_xlat7.w = dot(vec3<f32>(x_415.x, x_415.y, x_415.z), vec3<f32>(x_417.x, x_417.y, x_417.z));
  let x_424 : vec4<f32> = u_xlat7;
  let x_427 : vec4<f32> = x_364.x_CascadeShadowSplitSphereRadii;
  u_xlatb4 = (x_424 < x_427);
  let x_430 : bool = u_xlatb4.x;
  u_xlat5.x = select(0.0f, 1.0f, x_430);
  let x_434 : bool = u_xlatb4.y;
  u_xlat5.y = select(0.0f, 1.0f, x_434);
  let x_438 : bool = u_xlatb4.z;
  u_xlat5.z = select(0.0f, 1.0f, x_438);
  let x_442 : bool = u_xlatb4.w;
  u_xlat5.w = select(0.0f, 1.0f, x_442);
  let x_446 : bool = u_xlatb4.x;
  u_xlat22.x = select(-0.0f, -1.0f, x_446);
  let x_451 : bool = u_xlatb4.y;
  u_xlat22.y = select(-0.0f, -1.0f, x_451);
  let x_455 : bool = u_xlatb4.z;
  u_xlat22.z = select(-0.0f, -1.0f, x_455);
  let x_458 : vec3<f32> = u_xlat22;
  let x_459 : vec4<f32> = u_xlat5;
  u_xlat22 = (x_458 + vec3<f32>(x_459.y, x_459.z, x_459.w));
  let x_462 : vec3<f32> = u_xlat22;
  let x_464 : vec3<f32> = max(x_462, vec3<f32>(0.0f, 0.0f, 0.0f));
  let x_465 : vec4<f32> = u_xlat5;
  u_xlat5 = vec4<f32>(x_465.x, x_464.x, x_464.y, x_464.z);
  let x_467 : vec4<f32> = u_xlat5;
  u_xlat22.x = dot(x_467, vec4<f32>(4.0f, 3.0f, 2.0f, 1.0f));
  let x_474 : f32 = u_xlat22.x;
  u_xlat22.x = (-(x_474) + 4.0f);
  let x_481 : f32 = u_xlat22.x;
  u_xlatu22 = u32(x_481);
  let x_485 : u32 = u_xlatu22;
  u_xlati22 = (bitcast<i32>(x_485) << bitcast<u32>(2i));
  let x_488 : vec3<f32> = vs_TEXCOORD1;
  let x_490 : i32 = u_xlati22;
  let x_493 : i32 = u_xlati22;
  let x_497 : vec4<f32> = x_364.x_MainLightWorldToShadow[((x_490 + 1i) / 4i)][((x_493 + 1i) % 4i)];
  let x_499 : vec3<f32> = (vec3<f32>(x_488.y, x_488.y, x_488.y) * vec3<f32>(x_497.x, x_497.y, x_497.z));
  let x_500 : vec4<f32> = u_xlat4;
  u_xlat4 = vec4<f32>(x_499.x, x_499.y, x_499.z, x_500.w);
  let x_502 : i32 = u_xlati22;
  let x_504 : i32 = u_xlati22;
  let x_507 : vec4<f32> = x_364.x_MainLightWorldToShadow[(x_502 / 4i)][(x_504 % 4i)];
  let x_509 : vec3<f32> = vs_TEXCOORD1;
  let x_512 : vec4<f32> = u_xlat4;
  let x_514 : vec3<f32> = ((vec3<f32>(x_507.x, x_507.y, x_507.z) * vec3<f32>(x_509.x, x_509.x, x_509.x)) + vec3<f32>(x_512.x, x_512.y, x_512.z));
  let x_515 : vec4<f32> = u_xlat4;
  u_xlat4 = vec4<f32>(x_514.x, x_514.y, x_514.z, x_515.w);
  let x_517 : i32 = u_xlati22;
  let x_520 : i32 = u_xlati22;
  let x_524 : vec4<f32> = x_364.x_MainLightWorldToShadow[((x_517 + 2i) / 4i)][((x_520 + 2i) % 4i)];
  let x_526 : vec3<f32> = vs_TEXCOORD1;
  let x_529 : vec4<f32> = u_xlat4;
  let x_531 : vec3<f32> = ((vec3<f32>(x_524.x, x_524.y, x_524.z) * vec3<f32>(x_526.z, x_526.z, x_526.z)) + vec3<f32>(x_529.x, x_529.y, x_529.z));
  let x_532 : vec4<f32> = u_xlat4;
  u_xlat4 = vec4<f32>(x_531.x, x_531.y, x_531.z, x_532.w);
  let x_534 : vec4<f32> = u_xlat4;
  let x_536 : i32 = u_xlati22;
  let x_539 : i32 = u_xlati22;
  let x_543 : vec4<f32> = x_364.x_MainLightWorldToShadow[((x_536 + 3i) / 4i)][((x_539 + 3i) % 4i)];
  u_xlat22 = (vec3<f32>(x_534.x, x_534.y, x_534.z) + vec3<f32>(x_543.x, x_543.y, x_543.z));
  let x_547 : f32 = x_364.x_MainLightShadowParams.y;
  u_xlatb4.x = (0.0f < x_547);
  let x_551 : bool = u_xlatb4.x;
  if (x_551) {
    let x_555 : f32 = x_364.x_MainLightShadowParams.y;
    u_xlatb4.x = (x_555 == 1.0f);
    let x_559 : bool = u_xlatb4.x;
    if (x_559) {
      let x_562 : vec3<f32> = u_xlat22;
      let x_565 : vec4<f32> = x_364.x_MainLightShadowOffset0;
      u_xlat4 = (vec4<f32>(x_562.x, x_562.y, x_562.x, x_562.y) + x_565);
      let x_568 : vec4<f32> = u_xlat4;
      let x_569 : vec2<f32> = vec2<f32>(x_568.x, x_568.y);
      let x_571 : f32 = u_xlat22.z;
      txVec0 = vec3<f32>(x_569.x, x_569.y, x_571);
      let x_583 : vec3<f32> = txVec0;
      let x_585 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_583.xy, x_583.z);
      u_xlat5.x = x_585;
      let x_588 : vec4<f32> = u_xlat4;
      let x_589 : vec2<f32> = vec2<f32>(x_588.z, x_588.w);
      let x_591 : f32 = u_xlat22.z;
      txVec1 = vec3<f32>(x_589.x, x_589.y, x_591);
      let x_598 : vec3<f32> = txVec1;
      let x_600 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_598.xy, x_598.z);
      u_xlat5.y = x_600;
      let x_602 : vec3<f32> = u_xlat22;
      let x_606 : vec4<f32> = x_364.x_MainLightShadowOffset1;
      u_xlat4 = (vec4<f32>(x_602.x, x_602.y, x_602.x, x_602.y) + x_606);
      let x_609 : vec4<f32> = u_xlat4;
      let x_610 : vec2<f32> = vec2<f32>(x_609.x, x_609.y);
      let x_612 : f32 = u_xlat22.z;
      txVec2 = vec3<f32>(x_610.x, x_610.y, x_612);
      let x_619 : vec3<f32> = txVec2;
      let x_621 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_619.xy, x_619.z);
      u_xlat5.z = x_621;
      let x_624 : vec4<f32> = u_xlat4;
      let x_625 : vec2<f32> = vec2<f32>(x_624.z, x_624.w);
      let x_627 : f32 = u_xlat22.z;
      txVec3 = vec3<f32>(x_625.x, x_625.y, x_627);
      let x_634 : vec3<f32> = txVec3;
      let x_636 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_634.xy, x_634.z);
      u_xlat5.w = x_636;
      let x_638 : vec4<f32> = u_xlat5;
      u_xlat4.x = dot(x_638, vec4<f32>(0.25f, 0.25f, 0.25f, 0.25f));
    } else {
      let x_645 : f32 = x_364.x_MainLightShadowParams.y;
      u_xlatb23 = (x_645 == 2.0f);
      let x_647 : bool = u_xlatb23;
      if (x_647) {
        let x_651 : vec3<f32> = u_xlat22;
        let x_654 : vec4<f32> = x_364.x_MainLightShadowmapSize;
        u_xlat23 = ((vec2<f32>(x_651.x, x_651.y) * vec2<f32>(x_654.z, x_654.w)) + vec2<f32>(0.5f, 0.5f));
        let x_658 : vec2<f32> = u_xlat23;
        u_xlat23 = floor(x_658);
        let x_660 : vec3<f32> = u_xlat22;
        let x_663 : vec4<f32> = x_364.x_MainLightShadowmapSize;
        let x_666 : vec2<f32> = u_xlat23;
        let x_668 : vec2<f32> = ((vec2<f32>(x_660.x, x_660.y) * vec2<f32>(x_663.z, x_663.w)) + -(x_666));
        let x_669 : vec4<f32> = u_xlat5;
        u_xlat5 = vec4<f32>(x_668.x, x_668.y, x_669.z, x_669.w);
        let x_671 : vec4<f32> = u_xlat5;
        u_xlat6 = (vec4<f32>(x_671.x, x_671.x, x_671.y, x_671.y) + vec4<f32>(0.5f, 1.0f, 0.5f, 1.0f));
        let x_675 : vec4<f32> = u_xlat6;
        let x_677 : vec4<f32> = u_xlat6;
        u_xlat7 = (vec4<f32>(x_675.x, x_675.x, x_675.z, x_675.z) * vec4<f32>(x_677.x, x_677.x, x_677.z, x_677.z));
        let x_681 : vec4<f32> = u_xlat7;
        u_xlat43 = (vec2<f32>(x_681.y, x_681.w) * vec2<f32>(0.079999998f, 0.079999998f));
        let x_686 : vec4<f32> = u_xlat7;
        let x_689 : vec4<f32> = u_xlat5;
        let x_692 : vec2<f32> = ((vec2<f32>(x_686.x, x_686.z) * vec2<f32>(0.5f, 0.5f)) + -(vec2<f32>(x_689.x, x_689.y)));
        let x_693 : vec4<f32> = u_xlat6;
        u_xlat6 = vec4<f32>(x_692.x, x_693.y, x_692.y, x_693.w);
        let x_695 : vec4<f32> = u_xlat5;
        let x_699 : vec2<f32> = (-(vec2<f32>(x_695.x, x_695.y)) + vec2<f32>(1.0f, 1.0f));
        let x_700 : vec4<f32> = u_xlat7;
        u_xlat7 = vec4<f32>(x_699.x, x_699.y, x_700.z, x_700.w);
        let x_703 : vec4<f32> = u_xlat5;
        u_xlat45 = min(vec2<f32>(x_703.x, x_703.y), vec2<f32>(0.0f, 0.0f));
        let x_707 : vec2<f32> = u_xlat45;
        let x_709 : vec2<f32> = u_xlat45;
        let x_711 : vec4<f32> = u_xlat7;
        u_xlat45 = ((-(x_707) * x_709) + vec2<f32>(x_711.x, x_711.y));
        let x_714 : vec4<f32> = u_xlat5;
        let x_716 : vec2<f32> = max(vec2<f32>(x_714.x, x_714.y), vec2<f32>(0.0f, 0.0f));
        let x_717 : vec4<f32> = u_xlat5;
        u_xlat5 = vec4<f32>(x_716.x, x_716.y, x_717.z, x_717.w);
        let x_719 : vec4<f32> = u_xlat5;
        let x_722 : vec4<f32> = u_xlat5;
        let x_725 : vec4<f32> = u_xlat6;
        let x_727 : vec2<f32> = ((-(vec2<f32>(x_719.x, x_719.y)) * vec2<f32>(x_722.x, x_722.y)) + vec2<f32>(x_725.y, x_725.w));
        let x_728 : vec4<f32> = u_xlat5;
        u_xlat5 = vec4<f32>(x_727.x, x_727.y, x_728.z, x_728.w);
        let x_730 : vec2<f32> = u_xlat45;
        u_xlat45 = (x_730 + vec2<f32>(1.0f, 1.0f));
        let x_732 : vec4<f32> = u_xlat5;
        let x_734 : vec2<f32> = (vec2<f32>(x_732.x, x_732.y) + vec2<f32>(1.0f, 1.0f));
        let x_735 : vec4<f32> = u_xlat5;
        u_xlat5 = vec4<f32>(x_734.x, x_734.y, x_735.z, x_735.w);
        let x_738 : vec4<f32> = u_xlat6;
        let x_742 : vec2<f32> = (vec2<f32>(x_738.x, x_738.z) * vec2<f32>(0.159999996f, 0.159999996f));
        let x_743 : vec4<f32> = u_xlat8;
        u_xlat8 = vec4<f32>(x_742.x, x_742.y, x_743.z, x_743.w);
        let x_746 : vec4<f32> = u_xlat7;
        let x_748 : vec2<f32> = (vec2<f32>(x_746.x, x_746.y) * vec2<f32>(0.159999996f, 0.159999996f));
        let x_749 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_748.x, x_748.y, x_749.z, x_749.w);
        let x_751 : vec2<f32> = u_xlat45;
        let x_752 : vec2<f32> = (x_751 * vec2<f32>(0.159999996f, 0.159999996f));
        let x_753 : vec4<f32> = u_xlat7;
        u_xlat7 = vec4<f32>(x_752.x, x_752.y, x_753.z, x_753.w);
        let x_756 : vec4<f32> = u_xlat5;
        let x_758 : vec2<f32> = (vec2<f32>(x_756.x, x_756.y) * vec2<f32>(0.159999996f, 0.159999996f));
        let x_759 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_758.x, x_758.y, x_759.z, x_759.w);
        let x_761 : vec4<f32> = u_xlat6;
        let x_763 : vec2<f32> = (vec2<f32>(x_761.y, x_761.w) * vec2<f32>(0.159999996f, 0.159999996f));
        let x_764 : vec4<f32> = u_xlat5;
        u_xlat5 = vec4<f32>(x_763.x, x_763.y, x_764.z, x_764.w);
        let x_767 : f32 = u_xlat7.x;
        u_xlat8.z = x_767;
        let x_770 : f32 = u_xlat5.x;
        u_xlat8.w = x_770;
        let x_773 : f32 = u_xlat10.x;
        u_xlat9.z = x_773;
        let x_776 : f32 = u_xlat43.x;
        u_xlat9.w = x_776;
        let x_778 : vec4<f32> = u_xlat8;
        let x_780 : vec4<f32> = u_xlat9;
        u_xlat6 = (vec4<f32>(x_778.z, x_778.w, x_778.x, x_778.z) + vec4<f32>(x_780.z, x_780.w, x_780.x, x_780.z));
        let x_784 : f32 = u_xlat8.y;
        u_xlat7.z = x_784;
        let x_787 : f32 = u_xlat5.y;
        u_xlat7.w = x_787;
        let x_790 : f32 = u_xlat9.y;
        u_xlat10.z = x_790;
        let x_793 : f32 = u_xlat43.y;
        u_xlat10.w = x_793;
        let x_795 : vec4<f32> = u_xlat7;
        let x_797 : vec4<f32> = u_xlat10;
        let x_799 : vec3<f32> = (vec3<f32>(x_795.z, x_795.y, x_795.w) + vec3<f32>(x_797.z, x_797.y, x_797.w));
        let x_800 : vec4<f32> = u_xlat5;
        u_xlat5 = vec4<f32>(x_799.x, x_799.y, x_799.z, x_800.w);
        let x_802 : vec4<f32> = u_xlat9;
        let x_804 : vec4<f32> = u_xlat6;
        let x_806 : vec3<f32> = (vec3<f32>(x_802.x, x_802.z, x_802.w) / vec3<f32>(x_804.z, x_804.w, x_804.y));
        let x_807 : vec4<f32> = u_xlat7;
        u_xlat7 = vec4<f32>(x_806.x, x_806.y, x_806.z, x_807.w);
        let x_809 : vec4<f32> = u_xlat7;
        let x_815 : vec3<f32> = (vec3<f32>(x_809.x, x_809.y, x_809.z) + vec3<f32>(-2.5f, -0.5f, 1.5f));
        let x_816 : vec4<f32> = u_xlat7;
        u_xlat7 = vec4<f32>(x_815.x, x_815.y, x_815.z, x_816.w);
        let x_818 : vec4<f32> = u_xlat10;
        let x_820 : vec4<f32> = u_xlat5;
        let x_822 : vec3<f32> = (vec3<f32>(x_818.z, x_818.y, x_818.w) / vec3<f32>(x_820.x, x_820.y, x_820.z));
        let x_823 : vec4<f32> = u_xlat8;
        u_xlat8 = vec4<f32>(x_822.x, x_822.y, x_822.z, x_823.w);
        let x_825 : vec4<f32> = u_xlat8;
        let x_827 : vec3<f32> = (vec3<f32>(x_825.x, x_825.y, x_825.z) + vec3<f32>(-2.5f, -0.5f, 1.5f));
        let x_828 : vec4<f32> = u_xlat8;
        u_xlat8 = vec4<f32>(x_827.x, x_827.y, x_827.z, x_828.w);
        let x_830 : vec4<f32> = u_xlat7;
        let x_833 : vec4<f32> = x_364.x_MainLightShadowmapSize;
        let x_835 : vec3<f32> = (vec3<f32>(x_830.y, x_830.x, x_830.z) * vec3<f32>(x_833.x, x_833.x, x_833.x));
        let x_836 : vec4<f32> = u_xlat7;
        u_xlat7 = vec4<f32>(x_835.x, x_835.y, x_835.z, x_836.w);
        let x_838 : vec4<f32> = u_xlat8;
        let x_841 : vec4<f32> = x_364.x_MainLightShadowmapSize;
        let x_843 : vec3<f32> = (vec3<f32>(x_838.x, x_838.y, x_838.z) * vec3<f32>(x_841.y, x_841.y, x_841.y));
        let x_844 : vec4<f32> = u_xlat8;
        u_xlat8 = vec4<f32>(x_843.x, x_843.y, x_843.z, x_844.w);
        let x_847 : f32 = u_xlat8.x;
        u_xlat7.w = x_847;
        let x_849 : vec2<f32> = u_xlat23;
        let x_852 : vec4<f32> = x_364.x_MainLightShadowmapSize;
        let x_855 : vec4<f32> = u_xlat7;
        u_xlat9 = ((vec4<f32>(x_849.x, x_849.y, x_849.x, x_849.y) * vec4<f32>(x_852.x, x_852.y, x_852.x, x_852.y)) + vec4<f32>(x_855.y, x_855.w, x_855.x, x_855.w));
        let x_858 : vec2<f32> = u_xlat23;
        let x_860 : vec4<f32> = x_364.x_MainLightShadowmapSize;
        let x_863 : vec4<f32> = u_xlat7;
        let x_865 : vec2<f32> = ((x_858 * vec2<f32>(x_860.x, x_860.y)) + vec2<f32>(x_863.z, x_863.w));
        let x_866 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_865.x, x_865.y, x_866.z, x_866.w);
        let x_869 : f32 = u_xlat7.y;
        u_xlat8.w = x_869;
        let x_871 : vec4<f32> = u_xlat8;
        let x_872 : vec2<f32> = vec2<f32>(x_871.y, x_871.z);
        let x_873 : vec4<f32> = u_xlat7;
        u_xlat7 = vec4<f32>(x_873.x, x_872.x, x_873.z, x_872.y);
        let x_876 : vec2<f32> = u_xlat23;
        let x_879 : vec4<f32> = x_364.x_MainLightShadowmapSize;
        let x_882 : vec4<f32> = u_xlat7;
        u_xlat11 = ((vec4<f32>(x_876.x, x_876.y, x_876.x, x_876.y) * vec4<f32>(x_879.x, x_879.y, x_879.x, x_879.y)) + vec4<f32>(x_882.x, x_882.y, x_882.z, x_882.y));
        let x_885 : vec2<f32> = u_xlat23;
        let x_888 : vec4<f32> = x_364.x_MainLightShadowmapSize;
        let x_891 : vec4<f32> = u_xlat8;
        u_xlat8 = ((vec4<f32>(x_885.x, x_885.y, x_885.x, x_885.y) * vec4<f32>(x_888.x, x_888.y, x_888.x, x_888.y)) + vec4<f32>(x_891.w, x_891.y, x_891.w, x_891.z));
        let x_894 : vec2<f32> = u_xlat23;
        let x_897 : vec4<f32> = x_364.x_MainLightShadowmapSize;
        let x_900 : vec4<f32> = u_xlat7;
        u_xlat7 = ((vec4<f32>(x_894.x, x_894.y, x_894.x, x_894.y) * vec4<f32>(x_897.x, x_897.y, x_897.x, x_897.y)) + vec4<f32>(x_900.x, x_900.w, x_900.z, x_900.w));
        let x_904 : vec4<f32> = u_xlat5;
        let x_906 : vec4<f32> = u_xlat6;
        u_xlat12 = (vec4<f32>(x_904.x, x_904.x, x_904.x, x_904.y) * vec4<f32>(x_906.z, x_906.w, x_906.y, x_906.z));
        let x_910 : vec4<f32> = u_xlat5;
        let x_912 : vec4<f32> = u_xlat6;
        u_xlat13 = (vec4<f32>(x_910.y, x_910.y, x_910.z, x_910.z) * x_912);
        let x_915 : f32 = u_xlat5.z;
        let x_917 : f32 = u_xlat6.y;
        u_xlat23.x = (x_915 * x_917);
        let x_921 : vec4<f32> = u_xlat9;
        let x_922 : vec2<f32> = vec2<f32>(x_921.x, x_921.y);
        let x_924 : f32 = u_xlat22.z;
        txVec4 = vec3<f32>(x_922.x, x_922.y, x_924);
        let x_932 : vec3<f32> = txVec4;
        let x_934 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_932.xy, x_932.z);
        u_xlat42 = x_934;
        let x_936 : vec4<f32> = u_xlat9;
        let x_937 : vec2<f32> = vec2<f32>(x_936.z, x_936.w);
        let x_939 : f32 = u_xlat22.z;
        txVec5 = vec3<f32>(x_937.x, x_937.y, x_939);
        let x_947 : vec3<f32> = txVec5;
        let x_949 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_947.xy, x_947.z);
        u_xlat61 = x_949;
        let x_950 : f32 = u_xlat61;
        let x_952 : f32 = u_xlat12.y;
        u_xlat61 = (x_950 * x_952);
        let x_955 : f32 = u_xlat12.x;
        let x_956 : f32 = u_xlat42;
        let x_958 : f32 = u_xlat61;
        u_xlat42 = ((x_955 * x_956) + x_958);
        let x_961 : vec4<f32> = u_xlat10;
        let x_962 : vec2<f32> = vec2<f32>(x_961.x, x_961.y);
        let x_964 : f32 = u_xlat22.z;
        txVec6 = vec3<f32>(x_962.x, x_962.y, x_964);
        let x_971 : vec3<f32> = txVec6;
        let x_973 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_971.xy, x_971.z);
        u_xlat61 = x_973;
        let x_975 : f32 = u_xlat12.z;
        let x_976 : f32 = u_xlat61;
        let x_978 : f32 = u_xlat42;
        u_xlat42 = ((x_975 * x_976) + x_978);
        let x_981 : vec4<f32> = u_xlat8;
        let x_982 : vec2<f32> = vec2<f32>(x_981.x, x_981.y);
        let x_984 : f32 = u_xlat22.z;
        txVec7 = vec3<f32>(x_982.x, x_982.y, x_984);
        let x_991 : vec3<f32> = txVec7;
        let x_993 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_991.xy, x_991.z);
        u_xlat61 = x_993;
        let x_995 : f32 = u_xlat12.w;
        let x_996 : f32 = u_xlat61;
        let x_998 : f32 = u_xlat42;
        u_xlat42 = ((x_995 * x_996) + x_998);
        let x_1001 : vec4<f32> = u_xlat11;
        let x_1002 : vec2<f32> = vec2<f32>(x_1001.x, x_1001.y);
        let x_1004 : f32 = u_xlat22.z;
        txVec8 = vec3<f32>(x_1002.x, x_1002.y, x_1004);
        let x_1011 : vec3<f32> = txVec8;
        let x_1013 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1011.xy, x_1011.z);
        u_xlat61 = x_1013;
        let x_1015 : f32 = u_xlat13.x;
        let x_1016 : f32 = u_xlat61;
        let x_1018 : f32 = u_xlat42;
        u_xlat42 = ((x_1015 * x_1016) + x_1018);
        let x_1021 : vec4<f32> = u_xlat11;
        let x_1022 : vec2<f32> = vec2<f32>(x_1021.z, x_1021.w);
        let x_1024 : f32 = u_xlat22.z;
        txVec9 = vec3<f32>(x_1022.x, x_1022.y, x_1024);
        let x_1031 : vec3<f32> = txVec9;
        let x_1033 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1031.xy, x_1031.z);
        u_xlat61 = x_1033;
        let x_1035 : f32 = u_xlat13.y;
        let x_1036 : f32 = u_xlat61;
        let x_1038 : f32 = u_xlat42;
        u_xlat42 = ((x_1035 * x_1036) + x_1038);
        let x_1041 : vec4<f32> = u_xlat8;
        let x_1042 : vec2<f32> = vec2<f32>(x_1041.z, x_1041.w);
        let x_1044 : f32 = u_xlat22.z;
        txVec10 = vec3<f32>(x_1042.x, x_1042.y, x_1044);
        let x_1051 : vec3<f32> = txVec10;
        let x_1053 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1051.xy, x_1051.z);
        u_xlat61 = x_1053;
        let x_1055 : f32 = u_xlat13.z;
        let x_1056 : f32 = u_xlat61;
        let x_1058 : f32 = u_xlat42;
        u_xlat42 = ((x_1055 * x_1056) + x_1058);
        let x_1061 : vec4<f32> = u_xlat7;
        let x_1062 : vec2<f32> = vec2<f32>(x_1061.x, x_1061.y);
        let x_1064 : f32 = u_xlat22.z;
        txVec11 = vec3<f32>(x_1062.x, x_1062.y, x_1064);
        let x_1071 : vec3<f32> = txVec11;
        let x_1073 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1071.xy, x_1071.z);
        u_xlat61 = x_1073;
        let x_1075 : f32 = u_xlat13.w;
        let x_1076 : f32 = u_xlat61;
        let x_1078 : f32 = u_xlat42;
        u_xlat42 = ((x_1075 * x_1076) + x_1078);
        let x_1081 : vec4<f32> = u_xlat7;
        let x_1082 : vec2<f32> = vec2<f32>(x_1081.z, x_1081.w);
        let x_1084 : f32 = u_xlat22.z;
        txVec12 = vec3<f32>(x_1082.x, x_1082.y, x_1084);
        let x_1091 : vec3<f32> = txVec12;
        let x_1093 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1091.xy, x_1091.z);
        u_xlat61 = x_1093;
        let x_1095 : f32 = u_xlat23.x;
        let x_1096 : f32 = u_xlat61;
        let x_1098 : f32 = u_xlat42;
        u_xlat4.x = ((x_1095 * x_1096) + x_1098);
      } else {
        let x_1102 : vec3<f32> = u_xlat22;
        let x_1105 : vec4<f32> = x_364.x_MainLightShadowmapSize;
        u_xlat23 = ((vec2<f32>(x_1102.x, x_1102.y) * vec2<f32>(x_1105.z, x_1105.w)) + vec2<f32>(0.5f, 0.5f));
        let x_1109 : vec2<f32> = u_xlat23;
        u_xlat23 = floor(x_1109);
        let x_1111 : vec3<f32> = u_xlat22;
        let x_1114 : vec4<f32> = x_364.x_MainLightShadowmapSize;
        let x_1117 : vec2<f32> = u_xlat23;
        let x_1119 : vec2<f32> = ((vec2<f32>(x_1111.x, x_1111.y) * vec2<f32>(x_1114.z, x_1114.w)) + -(x_1117));
        let x_1120 : vec4<f32> = u_xlat5;
        u_xlat5 = vec4<f32>(x_1119.x, x_1119.y, x_1120.z, x_1120.w);
        let x_1122 : vec4<f32> = u_xlat5;
        u_xlat6 = (vec4<f32>(x_1122.x, x_1122.x, x_1122.y, x_1122.y) + vec4<f32>(0.5f, 1.0f, 0.5f, 1.0f));
        let x_1125 : vec4<f32> = u_xlat6;
        let x_1127 : vec4<f32> = u_xlat6;
        u_xlat7 = (vec4<f32>(x_1125.x, x_1125.x, x_1125.z, x_1125.z) * vec4<f32>(x_1127.x, x_1127.x, x_1127.z, x_1127.z));
        let x_1130 : vec4<f32> = u_xlat7;
        let x_1134 : vec2<f32> = (vec2<f32>(x_1130.y, x_1130.w) * vec2<f32>(0.040816002f, 0.040816002f));
        let x_1135 : vec4<f32> = u_xlat8;
        u_xlat8 = vec4<f32>(x_1135.x, x_1134.x, x_1135.z, x_1134.y);
        let x_1137 : vec4<f32> = u_xlat7;
        let x_1140 : vec4<f32> = u_xlat5;
        u_xlat43 = ((vec2<f32>(x_1137.x, x_1137.z) * vec2<f32>(0.5f, 0.5f)) + -(vec2<f32>(x_1140.x, x_1140.y)));
        let x_1144 : vec4<f32> = u_xlat5;
        let x_1147 : vec2<f32> = (-(vec2<f32>(x_1144.x, x_1144.y)) + vec2<f32>(1.0f, 1.0f));
        let x_1148 : vec4<f32> = u_xlat6;
        u_xlat6 = vec4<f32>(x_1147.x, x_1148.y, x_1147.y, x_1148.w);
        let x_1150 : vec4<f32> = u_xlat5;
        let x_1152 : vec2<f32> = min(vec2<f32>(x_1150.x, x_1150.y), vec2<f32>(0.0f, 0.0f));
        let x_1153 : vec4<f32> = u_xlat7;
        u_xlat7 = vec4<f32>(x_1152.x, x_1152.y, x_1153.z, x_1153.w);
        let x_1155 : vec4<f32> = u_xlat7;
        let x_1158 : vec4<f32> = u_xlat7;
        let x_1161 : vec4<f32> = u_xlat6;
        let x_1163 : vec2<f32> = ((-(vec2<f32>(x_1155.x, x_1155.y)) * vec2<f32>(x_1158.x, x_1158.y)) + vec2<f32>(x_1161.x, x_1161.z));
        let x_1164 : vec4<f32> = u_xlat6;
        u_xlat6 = vec4<f32>(x_1163.x, x_1164.y, x_1163.y, x_1164.w);
        let x_1166 : vec4<f32> = u_xlat5;
        let x_1168 : vec2<f32> = max(vec2<f32>(x_1166.x, x_1166.y), vec2<f32>(0.0f, 0.0f));
        let x_1169 : vec4<f32> = u_xlat7;
        u_xlat7 = vec4<f32>(x_1168.x, x_1168.y, x_1169.z, x_1169.w);
        let x_1171 : vec4<f32> = u_xlat7;
        let x_1174 : vec4<f32> = u_xlat7;
        let x_1177 : vec4<f32> = u_xlat6;
        let x_1179 : vec2<f32> = ((-(vec2<f32>(x_1171.x, x_1171.y)) * vec2<f32>(x_1174.x, x_1174.y)) + vec2<f32>(x_1177.y, x_1177.w));
        let x_1180 : vec4<f32> = u_xlat6;
        u_xlat6 = vec4<f32>(x_1180.x, x_1179.x, x_1180.z, x_1179.y);
        let x_1182 : vec4<f32> = u_xlat6;
        u_xlat6 = (x_1182 + vec4<f32>(2.0f, 2.0f, 2.0f, 2.0f));
        let x_1186 : f32 = u_xlat6.y;
        u_xlat7.z = (x_1186 * 0.081632003f);
        let x_1190 : vec2<f32> = u_xlat43;
        let x_1193 : vec2<f32> = (vec2<f32>(x_1190.y, x_1190.x) * vec2<f32>(0.081632003f, 0.081632003f));
        let x_1194 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_1193.x, x_1193.y, x_1194.z, x_1194.w);
        let x_1196 : vec4<f32> = u_xlat6;
        u_xlat43 = (vec2<f32>(x_1196.x, x_1196.z) * vec2<f32>(0.081632003f, 0.081632003f));
        let x_1200 : f32 = u_xlat6.w;
        u_xlat9.z = (x_1200 * 0.081632003f);
        let x_1204 : f32 = u_xlat9.y;
        u_xlat7.x = x_1204;
        let x_1206 : vec4<f32> = u_xlat5;
        let x_1213 : vec2<f32> = ((vec2<f32>(x_1206.x, x_1206.x) * vec2<f32>(-0.081632003f, 0.081632003f)) + vec2<f32>(0.163264006f, 0.081632003f));
        let x_1214 : vec4<f32> = u_xlat7;
        u_xlat7 = vec4<f32>(x_1214.x, x_1213.x, x_1214.z, x_1213.y);
        let x_1216 : vec4<f32> = u_xlat5;
        let x_1220 : vec2<f32> = ((vec2<f32>(x_1216.x, x_1216.x) * vec2<f32>(-0.081632003f, 0.081632003f)) + vec2<f32>(0.081632003f, 0.163264006f));
        let x_1221 : vec4<f32> = u_xlat6;
        u_xlat6 = vec4<f32>(x_1220.x, x_1221.y, x_1220.y, x_1221.w);
        let x_1224 : f32 = u_xlat43.x;
        u_xlat6.y = x_1224;
        let x_1227 : f32 = u_xlat8.y;
        u_xlat6.w = x_1227;
        let x_1229 : vec4<f32> = u_xlat6;
        let x_1230 : vec4<f32> = u_xlat7;
        u_xlat7 = (x_1229 + x_1230);
        let x_1232 : vec4<f32> = u_xlat5;
        let x_1235 : vec2<f32> = ((vec2<f32>(x_1232.y, x_1232.y) * vec2<f32>(-0.081632003f, 0.081632003f)) + vec2<f32>(0.163264006f, 0.081632003f));
        let x_1236 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_1236.x, x_1235.x, x_1236.z, x_1235.y);
        let x_1238 : vec4<f32> = u_xlat5;
        let x_1241 : vec2<f32> = ((vec2<f32>(x_1238.y, x_1238.y) * vec2<f32>(-0.081632003f, 0.081632003f)) + vec2<f32>(0.081632003f, 0.163264006f));
        let x_1242 : vec4<f32> = u_xlat8;
        u_xlat8 = vec4<f32>(x_1241.x, x_1242.y, x_1241.y, x_1242.w);
        let x_1245 : f32 = u_xlat43.y;
        u_xlat8.y = x_1245;
        let x_1247 : vec4<f32> = u_xlat8;
        let x_1248 : vec4<f32> = u_xlat9;
        u_xlat5 = (x_1247 + x_1248);
        let x_1250 : vec4<f32> = u_xlat6;
        let x_1251 : vec4<f32> = u_xlat7;
        u_xlat6 = (x_1250 / x_1251);
        let x_1253 : vec4<f32> = u_xlat6;
        u_xlat6 = (x_1253 + vec4<f32>(-3.5f, -1.5f, 0.5f, 2.5f));
        let x_1259 : vec4<f32> = u_xlat8;
        let x_1260 : vec4<f32> = u_xlat5;
        u_xlat8 = (x_1259 / x_1260);
        let x_1262 : vec4<f32> = u_xlat8;
        u_xlat8 = (x_1262 + vec4<f32>(-3.5f, -1.5f, 0.5f, 2.5f));
        let x_1264 : vec4<f32> = u_xlat6;
        let x_1267 : vec4<f32> = x_364.x_MainLightShadowmapSize;
        u_xlat6 = (vec4<f32>(x_1264.w, x_1264.x, x_1264.y, x_1264.z) * vec4<f32>(x_1267.x, x_1267.x, x_1267.x, x_1267.x));
        let x_1270 : vec4<f32> = u_xlat8;
        let x_1273 : vec4<f32> = x_364.x_MainLightShadowmapSize;
        u_xlat8 = (vec4<f32>(x_1270.x, x_1270.w, x_1270.y, x_1270.z) * vec4<f32>(x_1273.y, x_1273.y, x_1273.y, x_1273.y));
        let x_1276 : vec4<f32> = u_xlat6;
        let x_1277 : vec3<f32> = vec3<f32>(x_1276.y, x_1276.z, x_1276.w);
        let x_1278 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_1277.x, x_1278.y, x_1277.y, x_1277.z);
        let x_1281 : f32 = u_xlat8.x;
        u_xlat9.y = x_1281;
        let x_1283 : vec2<f32> = u_xlat23;
        let x_1286 : vec4<f32> = x_364.x_MainLightShadowmapSize;
        let x_1289 : vec4<f32> = u_xlat9;
        u_xlat10 = ((vec4<f32>(x_1283.x, x_1283.y, x_1283.x, x_1283.y) * vec4<f32>(x_1286.x, x_1286.y, x_1286.x, x_1286.y)) + vec4<f32>(x_1289.x, x_1289.y, x_1289.z, x_1289.y));
        let x_1292 : vec2<f32> = u_xlat23;
        let x_1294 : vec4<f32> = x_364.x_MainLightShadowmapSize;
        let x_1297 : vec4<f32> = u_xlat9;
        let x_1299 : vec2<f32> = ((x_1292 * vec2<f32>(x_1294.x, x_1294.y)) + vec2<f32>(x_1297.w, x_1297.y));
        let x_1300 : vec4<f32> = u_xlat11;
        u_xlat11 = vec4<f32>(x_1299.x, x_1299.y, x_1300.z, x_1300.w);
        let x_1303 : f32 = u_xlat9.y;
        u_xlat6.y = x_1303;
        let x_1306 : f32 = u_xlat8.z;
        u_xlat9.y = x_1306;
        let x_1308 : vec2<f32> = u_xlat23;
        let x_1311 : vec4<f32> = x_364.x_MainLightShadowmapSize;
        let x_1314 : vec4<f32> = u_xlat9;
        u_xlat12 = ((vec4<f32>(x_1308.x, x_1308.y, x_1308.x, x_1308.y) * vec4<f32>(x_1311.x, x_1311.y, x_1311.x, x_1311.y)) + vec4<f32>(x_1314.x, x_1314.y, x_1314.z, x_1314.y));
        let x_1318 : vec2<f32> = u_xlat23;
        let x_1320 : vec4<f32> = x_364.x_MainLightShadowmapSize;
        let x_1323 : vec4<f32> = u_xlat9;
        u_xlat49 = ((x_1318 * vec2<f32>(x_1320.x, x_1320.y)) + vec2<f32>(x_1323.w, x_1323.y));
        let x_1327 : f32 = u_xlat9.y;
        u_xlat6.z = x_1327;
        let x_1329 : vec2<f32> = u_xlat23;
        let x_1332 : vec4<f32> = x_364.x_MainLightShadowmapSize;
        let x_1335 : vec4<f32> = u_xlat6;
        u_xlat13 = ((vec4<f32>(x_1329.x, x_1329.y, x_1329.x, x_1329.y) * vec4<f32>(x_1332.x, x_1332.y, x_1332.x, x_1332.y)) + vec4<f32>(x_1335.x, x_1335.y, x_1335.x, x_1335.z));
        let x_1339 : f32 = u_xlat8.w;
        u_xlat9.y = x_1339;
        let x_1342 : vec2<f32> = u_xlat23;
        let x_1345 : vec4<f32> = x_364.x_MainLightShadowmapSize;
        let x_1348 : vec4<f32> = u_xlat9;
        u_xlat14 = ((vec4<f32>(x_1342.x, x_1342.y, x_1342.x, x_1342.y) * vec4<f32>(x_1345.x, x_1345.y, x_1345.x, x_1345.y)) + vec4<f32>(x_1348.x, x_1348.y, x_1348.z, x_1348.y));
        let x_1352 : vec2<f32> = u_xlat23;
        let x_1354 : vec4<f32> = x_364.x_MainLightShadowmapSize;
        let x_1357 : vec4<f32> = u_xlat9;
        let x_1359 : vec2<f32> = ((x_1352 * vec2<f32>(x_1354.x, x_1354.y)) + vec2<f32>(x_1357.w, x_1357.y));
        let x_1360 : vec3<f32> = u_xlat25;
        u_xlat25 = vec3<f32>(x_1359.x, x_1359.y, x_1360.z);
        let x_1363 : f32 = u_xlat9.y;
        u_xlat6.w = x_1363;
        let x_1366 : vec2<f32> = u_xlat23;
        let x_1368 : vec4<f32> = x_364.x_MainLightShadowmapSize;
        let x_1371 : vec4<f32> = u_xlat6;
        u_xlat15 = ((x_1366 * vec2<f32>(x_1368.x, x_1368.y)) + vec2<f32>(x_1371.x, x_1371.w));
        let x_1374 : vec4<f32> = u_xlat9;
        let x_1375 : vec3<f32> = vec3<f32>(x_1374.x, x_1374.z, x_1374.w);
        let x_1376 : vec4<f32> = u_xlat8;
        u_xlat8 = vec4<f32>(x_1375.x, x_1376.y, x_1375.y, x_1375.z);
        let x_1378 : vec2<f32> = u_xlat23;
        let x_1381 : vec4<f32> = x_364.x_MainLightShadowmapSize;
        let x_1384 : vec4<f32> = u_xlat8;
        u_xlat9 = ((vec4<f32>(x_1378.x, x_1378.y, x_1378.x, x_1378.y) * vec4<f32>(x_1381.x, x_1381.y, x_1381.x, x_1381.y)) + vec4<f32>(x_1384.x, x_1384.y, x_1384.z, x_1384.y));
        let x_1388 : vec2<f32> = u_xlat23;
        let x_1390 : vec4<f32> = x_364.x_MainLightShadowmapSize;
        let x_1393 : vec4<f32> = u_xlat8;
        u_xlat46 = ((x_1388 * vec2<f32>(x_1390.x, x_1390.y)) + vec2<f32>(x_1393.w, x_1393.y));
        let x_1397 : f32 = u_xlat6.x;
        u_xlat8.x = x_1397;
        let x_1399 : vec2<f32> = u_xlat23;
        let x_1401 : vec4<f32> = x_364.x_MainLightShadowmapSize;
        let x_1404 : vec4<f32> = u_xlat8;
        u_xlat23 = ((x_1399 * vec2<f32>(x_1401.x, x_1401.y)) + vec2<f32>(x_1404.x, x_1404.y));
        let x_1408 : vec4<f32> = u_xlat5;
        let x_1410 : vec4<f32> = u_xlat7;
        u_xlat16 = (vec4<f32>(x_1408.x, x_1408.x, x_1408.x, x_1408.x) * x_1410);
        let x_1413 : vec4<f32> = u_xlat5;
        let x_1415 : vec4<f32> = u_xlat7;
        u_xlat17 = (vec4<f32>(x_1413.y, x_1413.y, x_1413.y, x_1413.y) * x_1415);
        let x_1418 : vec4<f32> = u_xlat5;
        let x_1420 : vec4<f32> = u_xlat7;
        u_xlat18 = (vec4<f32>(x_1418.z, x_1418.z, x_1418.z, x_1418.z) * x_1420);
        let x_1422 : vec4<f32> = u_xlat5;
        let x_1424 : vec4<f32> = u_xlat7;
        u_xlat5 = (vec4<f32>(x_1422.w, x_1422.w, x_1422.w, x_1422.w) * x_1424);
        let x_1427 : vec4<f32> = u_xlat10;
        let x_1428 : vec2<f32> = vec2<f32>(x_1427.x, x_1427.y);
        let x_1430 : f32 = u_xlat22.z;
        txVec13 = vec3<f32>(x_1428.x, x_1428.y, x_1430);
        let x_1437 : vec3<f32> = txVec13;
        let x_1439 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1437.xy, x_1437.z);
        u_xlat61 = x_1439;
        let x_1441 : vec4<f32> = u_xlat10;
        let x_1442 : vec2<f32> = vec2<f32>(x_1441.z, x_1441.w);
        let x_1444 : f32 = u_xlat22.z;
        txVec14 = vec3<f32>(x_1442.x, x_1442.y, x_1444);
        let x_1451 : vec3<f32> = txVec14;
        let x_1453 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1451.xy, x_1451.z);
        u_xlat6.x = x_1453;
        let x_1456 : f32 = u_xlat6.x;
        let x_1458 : f32 = u_xlat16.y;
        u_xlat6.x = (x_1456 * x_1458);
        let x_1462 : f32 = u_xlat16.x;
        let x_1463 : f32 = u_xlat61;
        let x_1466 : f32 = u_xlat6.x;
        u_xlat61 = ((x_1462 * x_1463) + x_1466);
        let x_1469 : vec4<f32> = u_xlat11;
        let x_1470 : vec2<f32> = vec2<f32>(x_1469.x, x_1469.y);
        let x_1472 : f32 = u_xlat22.z;
        txVec15 = vec3<f32>(x_1470.x, x_1470.y, x_1472);
        let x_1479 : vec3<f32> = txVec15;
        let x_1481 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1479.xy, x_1479.z);
        u_xlat6.x = x_1481;
        let x_1484 : f32 = u_xlat16.z;
        let x_1486 : f32 = u_xlat6.x;
        let x_1488 : f32 = u_xlat61;
        u_xlat61 = ((x_1484 * x_1486) + x_1488);
        let x_1491 : vec4<f32> = u_xlat13;
        let x_1492 : vec2<f32> = vec2<f32>(x_1491.x, x_1491.y);
        let x_1494 : f32 = u_xlat22.z;
        txVec16 = vec3<f32>(x_1492.x, x_1492.y, x_1494);
        let x_1501 : vec3<f32> = txVec16;
        let x_1503 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1501.xy, x_1501.z);
        u_xlat6.x = x_1503;
        let x_1506 : f32 = u_xlat16.w;
        let x_1508 : f32 = u_xlat6.x;
        let x_1510 : f32 = u_xlat61;
        u_xlat61 = ((x_1506 * x_1508) + x_1510);
        let x_1513 : vec4<f32> = u_xlat12;
        let x_1514 : vec2<f32> = vec2<f32>(x_1513.x, x_1513.y);
        let x_1516 : f32 = u_xlat22.z;
        txVec17 = vec3<f32>(x_1514.x, x_1514.y, x_1516);
        let x_1523 : vec3<f32> = txVec17;
        let x_1525 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1523.xy, x_1523.z);
        u_xlat6.x = x_1525;
        let x_1528 : f32 = u_xlat17.x;
        let x_1530 : f32 = u_xlat6.x;
        let x_1532 : f32 = u_xlat61;
        u_xlat61 = ((x_1528 * x_1530) + x_1532);
        let x_1535 : vec4<f32> = u_xlat12;
        let x_1536 : vec2<f32> = vec2<f32>(x_1535.z, x_1535.w);
        let x_1538 : f32 = u_xlat22.z;
        txVec18 = vec3<f32>(x_1536.x, x_1536.y, x_1538);
        let x_1545 : vec3<f32> = txVec18;
        let x_1547 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1545.xy, x_1545.z);
        u_xlat6.x = x_1547;
        let x_1550 : f32 = u_xlat17.y;
        let x_1552 : f32 = u_xlat6.x;
        let x_1554 : f32 = u_xlat61;
        u_xlat61 = ((x_1550 * x_1552) + x_1554);
        let x_1557 : vec2<f32> = u_xlat49;
        let x_1559 : f32 = u_xlat22.z;
        txVec19 = vec3<f32>(x_1557.x, x_1557.y, x_1559);
        let x_1566 : vec3<f32> = txVec19;
        let x_1568 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1566.xy, x_1566.z);
        u_xlat6.x = x_1568;
        let x_1571 : f32 = u_xlat17.z;
        let x_1573 : f32 = u_xlat6.x;
        let x_1575 : f32 = u_xlat61;
        u_xlat61 = ((x_1571 * x_1573) + x_1575);
        let x_1578 : vec4<f32> = u_xlat13;
        let x_1579 : vec2<f32> = vec2<f32>(x_1578.z, x_1578.w);
        let x_1581 : f32 = u_xlat22.z;
        txVec20 = vec3<f32>(x_1579.x, x_1579.y, x_1581);
        let x_1588 : vec3<f32> = txVec20;
        let x_1590 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1588.xy, x_1588.z);
        u_xlat6.x = x_1590;
        let x_1593 : f32 = u_xlat17.w;
        let x_1595 : f32 = u_xlat6.x;
        let x_1597 : f32 = u_xlat61;
        u_xlat61 = ((x_1593 * x_1595) + x_1597);
        let x_1600 : vec4<f32> = u_xlat14;
        let x_1601 : vec2<f32> = vec2<f32>(x_1600.x, x_1600.y);
        let x_1603 : f32 = u_xlat22.z;
        txVec21 = vec3<f32>(x_1601.x, x_1601.y, x_1603);
        let x_1610 : vec3<f32> = txVec21;
        let x_1612 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1610.xy, x_1610.z);
        u_xlat6.x = x_1612;
        let x_1615 : f32 = u_xlat18.x;
        let x_1617 : f32 = u_xlat6.x;
        let x_1619 : f32 = u_xlat61;
        u_xlat61 = ((x_1615 * x_1617) + x_1619);
        let x_1622 : vec4<f32> = u_xlat14;
        let x_1623 : vec2<f32> = vec2<f32>(x_1622.z, x_1622.w);
        let x_1625 : f32 = u_xlat22.z;
        txVec22 = vec3<f32>(x_1623.x, x_1623.y, x_1625);
        let x_1632 : vec3<f32> = txVec22;
        let x_1634 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1632.xy, x_1632.z);
        u_xlat6.x = x_1634;
        let x_1637 : f32 = u_xlat18.y;
        let x_1639 : f32 = u_xlat6.x;
        let x_1641 : f32 = u_xlat61;
        u_xlat61 = ((x_1637 * x_1639) + x_1641);
        let x_1644 : vec3<f32> = u_xlat25;
        let x_1645 : vec2<f32> = vec2<f32>(x_1644.x, x_1644.y);
        let x_1647 : f32 = u_xlat22.z;
        txVec23 = vec3<f32>(x_1645.x, x_1645.y, x_1647);
        let x_1654 : vec3<f32> = txVec23;
        let x_1656 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1654.xy, x_1654.z);
        u_xlat6.x = x_1656;
        let x_1659 : f32 = u_xlat18.z;
        let x_1661 : f32 = u_xlat6.x;
        let x_1663 : f32 = u_xlat61;
        u_xlat61 = ((x_1659 * x_1661) + x_1663);
        let x_1666 : vec2<f32> = u_xlat15;
        let x_1668 : f32 = u_xlat22.z;
        txVec24 = vec3<f32>(x_1666.x, x_1666.y, x_1668);
        let x_1675 : vec3<f32> = txVec24;
        let x_1677 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1675.xy, x_1675.z);
        u_xlat6.x = x_1677;
        let x_1680 : f32 = u_xlat18.w;
        let x_1682 : f32 = u_xlat6.x;
        let x_1684 : f32 = u_xlat61;
        u_xlat61 = ((x_1680 * x_1682) + x_1684);
        let x_1687 : vec4<f32> = u_xlat9;
        let x_1688 : vec2<f32> = vec2<f32>(x_1687.x, x_1687.y);
        let x_1690 : f32 = u_xlat22.z;
        txVec25 = vec3<f32>(x_1688.x, x_1688.y, x_1690);
        let x_1697 : vec3<f32> = txVec25;
        let x_1699 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1697.xy, x_1697.z);
        u_xlat6.x = x_1699;
        let x_1702 : f32 = u_xlat5.x;
        let x_1704 : f32 = u_xlat6.x;
        let x_1706 : f32 = u_xlat61;
        u_xlat61 = ((x_1702 * x_1704) + x_1706);
        let x_1709 : vec4<f32> = u_xlat9;
        let x_1710 : vec2<f32> = vec2<f32>(x_1709.z, x_1709.w);
        let x_1712 : f32 = u_xlat22.z;
        txVec26 = vec3<f32>(x_1710.x, x_1710.y, x_1712);
        let x_1719 : vec3<f32> = txVec26;
        let x_1721 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1719.xy, x_1719.z);
        u_xlat5.x = x_1721;
        let x_1724 : f32 = u_xlat5.y;
        let x_1726 : f32 = u_xlat5.x;
        let x_1728 : f32 = u_xlat61;
        u_xlat61 = ((x_1724 * x_1726) + x_1728);
        let x_1731 : vec2<f32> = u_xlat46;
        let x_1733 : f32 = u_xlat22.z;
        txVec27 = vec3<f32>(x_1731.x, x_1731.y, x_1733);
        let x_1740 : vec3<f32> = txVec27;
        let x_1742 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1740.xy, x_1740.z);
        u_xlat5.x = x_1742;
        let x_1745 : f32 = u_xlat5.z;
        let x_1747 : f32 = u_xlat5.x;
        let x_1749 : f32 = u_xlat61;
        u_xlat61 = ((x_1745 * x_1747) + x_1749);
        let x_1752 : vec2<f32> = u_xlat23;
        let x_1754 : f32 = u_xlat22.z;
        txVec28 = vec3<f32>(x_1752.x, x_1752.y, x_1754);
        let x_1761 : vec3<f32> = txVec28;
        let x_1763 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1761.xy, x_1761.z);
        u_xlat23.x = x_1763;
        let x_1766 : f32 = u_xlat5.w;
        let x_1768 : f32 = u_xlat23.x;
        let x_1770 : f32 = u_xlat61;
        u_xlat4.x = ((x_1766 * x_1768) + x_1770);
      }
    }
  } else {
    let x_1775 : vec3<f32> = u_xlat22;
    let x_1776 : vec2<f32> = vec2<f32>(x_1775.x, x_1775.y);
    let x_1778 : f32 = u_xlat22.z;
    txVec29 = vec3<f32>(x_1776.x, x_1776.y, x_1778);
    let x_1785 : vec3<f32> = txVec29;
    let x_1787 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1785.xy, x_1785.z);
    u_xlat4.x = x_1787;
  }
  let x_1790 : f32 = x_364.x_MainLightShadowParams.x;
  u_xlat22.x = (-(x_1790) + 1.0f);
  let x_1795 : f32 = u_xlat4.x;
  let x_1797 : f32 = x_364.x_MainLightShadowParams.x;
  let x_1800 : f32 = u_xlat22.x;
  u_xlat22.x = ((x_1795 * x_1797) + x_1800);
  let x_1805 : f32 = u_xlat22.z;
  u_xlatb41 = (0.0f >= x_1805);
  let x_1809 : f32 = u_xlat22.z;
  u_xlatb60 = (x_1809 >= 1.0f);
  let x_1811 : bool = u_xlatb60;
  let x_1812 : bool = u_xlatb41;
  u_xlatb41 = (x_1811 | x_1812);
  let x_1814 : bool = u_xlatb41;
  if (x_1814) {
    x_1815 = 1.0f;
  } else {
    let x_1820 : f32 = u_xlat22.x;
    x_1815 = x_1820;
  }
  let x_1821 : f32 = x_1815;
  u_xlat22.x = x_1821;
  let x_1823 : vec4<f32> = u_xlat0;
  let x_1826 : vec4<f32> = x_40.x_ScreenParams;
  let x_1828 : vec2<f32> = (vec2<f32>(x_1823.x, x_1823.y) * vec2<f32>(x_1826.x, x_1826.y));
  let x_1829 : vec4<f32> = u_xlat0;
  u_xlat0 = vec4<f32>(x_1828.x, x_1828.y, x_1829.z, x_1829.w);
  let x_1831 : vec4<f32> = u_xlat0;
  let x_1834 : vec4<f32> = x_203.x_DitherPattern_TexelSize;
  let x_1836 : vec2<f32> = (vec2<f32>(x_1831.x, x_1831.y) * vec2<f32>(x_1834.x, x_1834.y));
  let x_1837 : vec4<f32> = u_xlat0;
  u_xlat0 = vec4<f32>(x_1836.x, x_1836.y, x_1837.z, x_1837.w);
  let x_1840 : f32 = u_xlat38;
  u_xlat41 = (vec2<f32>(x_1840, x_1840) * vec2<f32>(20.0f, 0.25f));
  let x_1845 : vec2<f32> = u_xlat41;
  let x_1847 : vec3<f32> = vs_TEXCOORD2;
  let x_1849 : vec3<f32> = (vec3<f32>(x_1845.y, x_1845.y, x_1845.y) * -(x_1847));
  let x_1850 : vec4<f32> = u_xlat4;
  u_xlat4 = vec4<f32>(x_1849.x, x_1849.y, x_1849.z, x_1850.w);
  let x_1853 : f32 = x_40.x_Time.x;
  u_xlat5.x = fract(x_1853);
  let x_1857 : f32 = x_40.x_Time.z;
  u_xlat5.y = fract(-(x_1857));
  let x_1861 : vec4<f32> = u_xlat0;
  u_xlat43 = vec2<f32>(x_1861.x, x_1861.y);
  u_xlat61 = 0.0f;
  u_xlatu_loop_1 = 0u;
  loop {
    let x_1869 : u32 = u_xlatu_loop_1;
    if ((x_1869 < 4u)) {
    } else {
      break;
    }
    let x_1872 : vec4<f32> = u_xlat5;
    let x_1874 : vec2<f32> = u_xlat43;
    u_xlat43 = (vec2<f32>(x_1872.x, x_1872.y) + x_1874);
    let x_1876 : u32 = u_xlatu_loop_1;
    u_xlat25.x = f32(x_1876);
    let x_1880 : vec3<f32> = u_xlat25;
    let x_1883 : vec4<f32> = x_40.x_ScreenParams;
    let x_1886 : vec2<f32> = u_xlat43;
    u_xlat44 = ((vec2<f32>(x_1880.x, x_1880.x) * vec2<f32>(x_1883.x, x_1883.y)) + x_1886);
    let x_1893 : vec2<f32> = u_xlat44;
    let x_1895 : f32 = x_40.x_GlobalMipBias.x;
    let x_1896 : vec4<f32> = textureSampleBias(x_DitherPattern, sampler_DitherPattern, x_1893, x_1895);
    let x_1897 : vec3<f32> = vec3<f32>(x_1896.x, x_1896.y, x_1896.z);
    let x_1898 : vec4<f32> = u_xlat7;
    u_xlat7 = vec4<f32>(x_1897.x, x_1897.y, x_1897.z, x_1898.w);
    let x_1900 : vec4<f32> = u_xlat7;
    let x_1905 : vec3<f32> = ((vec3<f32>(x_1900.x, x_1900.z, x_1900.y) * vec3<f32>(2.0f, 2.0f, 2.0f)) + vec3<f32>(-1.0f, -1.0f, -1.0f));
    let x_1906 : vec4<f32> = u_xlat7;
    u_xlat7 = vec4<f32>(x_1905.x, x_1905.y, x_1905.z, x_1906.w);
    let x_1908 : vec2<f32> = u_xlat41;
    let x_1910 : vec4<f32> = u_xlat7;
    let x_1912 : vec3<f32> = (vec3<f32>(x_1908.y, x_1908.y, x_1908.y) * vec3<f32>(x_1910.x, x_1910.y, x_1910.z));
    let x_1913 : vec4<f32> = u_xlat7;
    u_xlat7 = vec4<f32>(x_1912.x, x_1912.y, x_1913.z, x_1912.z);
    let x_1915 : vec3<f32> = u_xlat25;
    let x_1917 : vec4<f32> = u_xlat7;
    let x_1919 : vec3<f32> = (vec3<f32>(x_1915.x, x_1915.x, x_1915.x) * vec3<f32>(x_1917.x, x_1917.y, x_1917.w));
    let x_1920 : vec4<f32> = u_xlat7;
    u_xlat7 = vec4<f32>(x_1919.x, x_1919.y, x_1920.z, x_1919.z);
    let x_1922 : vec4<f32> = u_xlat7;
    let x_1927 : vec3<f32> = vs_TEXCOORD1;
    let x_1928 : vec3<f32> = ((vec3<f32>(x_1922.x, x_1922.y, x_1922.w) * vec3<f32>(0.100000001f, 0.100000001f, 0.100000001f)) + x_1927);
    let x_1929 : vec4<f32> = u_xlat7;
    u_xlat7 = vec4<f32>(x_1928.x, x_1928.y, x_1929.z, x_1928.z);
    let x_1932 : f32 = u_xlat25.x;
    let x_1934 : f32 = u_xlat7.z;
    u_xlat25.x = (x_1932 + x_1934);
    let x_1937 : vec4<f32> = u_xlat4;
    let x_1939 : vec3<f32> = u_xlat25;
    let x_1942 : vec4<f32> = u_xlat7;
    u_xlat25 = ((vec3<f32>(x_1937.x, x_1937.y, x_1937.z) * vec3<f32>(x_1939.x, x_1939.x, x_1939.x)) + vec3<f32>(x_1942.x, x_1942.y, x_1942.w));
    let x_1945 : vec3<f32> = u_xlat25;
    let x_1947 : vec4<f32> = x_364.x_CascadeShadowSplitSpheres0;
    let x_1950 : vec3<f32> = (x_1945 + -(vec3<f32>(x_1947.x, x_1947.y, x_1947.z)));
    let x_1951 : vec4<f32> = u_xlat7;
    u_xlat7 = vec4<f32>(x_1950.x, x_1950.y, x_1950.z, x_1951.w);
    let x_1953 : vec3<f32> = u_xlat25;
    let x_1955 : vec4<f32> = x_364.x_CascadeShadowSplitSpheres1;
    let x_1958 : vec3<f32> = (x_1953 + -(vec3<f32>(x_1955.x, x_1955.y, x_1955.z)));
    let x_1959 : vec4<f32> = u_xlat8;
    u_xlat8 = vec4<f32>(x_1958.x, x_1958.y, x_1958.z, x_1959.w);
    let x_1961 : vec3<f32> = u_xlat25;
    let x_1963 : vec4<f32> = x_364.x_CascadeShadowSplitSpheres2;
    let x_1966 : vec3<f32> = (x_1961 + -(vec3<f32>(x_1963.x, x_1963.y, x_1963.z)));
    let x_1967 : vec4<f32> = u_xlat9;
    u_xlat9 = vec4<f32>(x_1966.x, x_1966.y, x_1966.z, x_1967.w);
    let x_1969 : vec3<f32> = u_xlat25;
    let x_1971 : vec4<f32> = x_364.x_CascadeShadowSplitSpheres3;
    let x_1974 : vec3<f32> = (x_1969 + -(vec3<f32>(x_1971.x, x_1971.y, x_1971.z)));
    let x_1975 : vec4<f32> = u_xlat10;
    u_xlat10 = vec4<f32>(x_1974.x, x_1974.y, x_1974.z, x_1975.w);
    let x_1977 : vec4<f32> = u_xlat7;
    let x_1979 : vec4<f32> = u_xlat7;
    u_xlat7.x = dot(vec3<f32>(x_1977.x, x_1977.y, x_1977.z), vec3<f32>(x_1979.x, x_1979.y, x_1979.z));
    let x_1983 : vec4<f32> = u_xlat8;
    let x_1985 : vec4<f32> = u_xlat8;
    u_xlat7.y = dot(vec3<f32>(x_1983.x, x_1983.y, x_1983.z), vec3<f32>(x_1985.x, x_1985.y, x_1985.z));
    let x_1989 : vec4<f32> = u_xlat9;
    let x_1991 : vec4<f32> = u_xlat9;
    u_xlat7.z = dot(vec3<f32>(x_1989.x, x_1989.y, x_1989.z), vec3<f32>(x_1991.x, x_1991.y, x_1991.z));
    let x_1995 : vec4<f32> = u_xlat10;
    let x_1997 : vec4<f32> = u_xlat10;
    u_xlat7.w = dot(vec3<f32>(x_1995.x, x_1995.y, x_1995.z), vec3<f32>(x_1997.x, x_1997.y, x_1997.z));
    let x_2002 : vec4<f32> = u_xlat7;
    let x_2004 : vec4<f32> = x_364.x_CascadeShadowSplitSphereRadii;
    u_xlatb7 = (x_2002 < x_2004);
    let x_2007 : bool = u_xlatb7.x;
    u_xlat8.x = select(0.0f, 1.0f, x_2007);
    let x_2011 : bool = u_xlatb7.y;
    u_xlat8.y = select(0.0f, 1.0f, x_2011);
    let x_2015 : bool = u_xlatb7.z;
    u_xlat8.z = select(0.0f, 1.0f, x_2015);
    let x_2019 : bool = u_xlatb7.w;
    u_xlat8.w = select(0.0f, 1.0f, x_2019);
    let x_2023 : bool = u_xlatb7.x;
    u_xlat7.x = select(-0.0f, -1.0f, x_2023);
    let x_2027 : bool = u_xlatb7.y;
    u_xlat7.y = select(-0.0f, -1.0f, x_2027);
    let x_2031 : bool = u_xlatb7.z;
    u_xlat7.z = select(-0.0f, -1.0f, x_2031);
    let x_2034 : vec4<f32> = u_xlat7;
    let x_2036 : vec4<f32> = u_xlat8;
    let x_2038 : vec3<f32> = (vec3<f32>(x_2034.x, x_2034.y, x_2034.z) + vec3<f32>(x_2036.y, x_2036.z, x_2036.w));
    let x_2039 : vec4<f32> = u_xlat7;
    u_xlat7 = vec4<f32>(x_2038.x, x_2038.y, x_2038.z, x_2039.w);
    let x_2041 : vec4<f32> = u_xlat7;
    let x_2043 : vec3<f32> = max(vec3<f32>(x_2041.x, x_2041.y, x_2041.z), vec3<f32>(0.0f, 0.0f, 0.0f));
    let x_2044 : vec4<f32> = u_xlat8;
    u_xlat8 = vec4<f32>(x_2044.x, x_2043.x, x_2043.y, x_2043.z);
    let x_2046 : vec4<f32> = u_xlat8;
    u_xlat7.x = dot(x_2046, vec4<f32>(4.0f, 3.0f, 2.0f, 1.0f));
    let x_2050 : f32 = u_xlat7.x;
    u_xlat7.x = (-(x_2050) + 4.0f);
    let x_2056 : f32 = u_xlat7.x;
    u_xlatu7 = u32(x_2056);
    let x_2059 : u32 = u_xlatu7;
    u_xlati7 = (bitcast<i32>(x_2059) << bitcast<u32>(2i));
    let x_2063 : vec3<f32> = u_xlat25;
    let x_2065 : i32 = u_xlati7;
    let x_2068 : i32 = u_xlati7;
    let x_2072 : vec4<f32> = x_364.x_MainLightWorldToShadow[((x_2065 + 1i) / 4i)][((x_2068 + 1i) % 4i)];
    u_xlat26 = (vec3<f32>(x_2063.y, x_2063.y, x_2063.y) * vec3<f32>(x_2072.x, x_2072.y, x_2072.z));
    let x_2075 : i32 = u_xlati7;
    let x_2077 : i32 = u_xlati7;
    let x_2080 : vec4<f32> = x_364.x_MainLightWorldToShadow[(x_2075 / 4i)][(x_2077 % 4i)];
    let x_2082 : vec3<f32> = u_xlat25;
    let x_2085 : vec3<f32> = u_xlat26;
    u_xlat26 = ((vec3<f32>(x_2080.x, x_2080.y, x_2080.z) * vec3<f32>(x_2082.x, x_2082.x, x_2082.x)) + x_2085);
    let x_2087 : i32 = u_xlati7;
    let x_2090 : i32 = u_xlati7;
    let x_2094 : vec4<f32> = x_364.x_MainLightWorldToShadow[((x_2087 + 2i) / 4i)][((x_2090 + 2i) % 4i)];
    let x_2096 : vec3<f32> = u_xlat25;
    let x_2099 : vec3<f32> = u_xlat26;
    u_xlat25 = ((vec3<f32>(x_2094.x, x_2094.y, x_2094.z) * vec3<f32>(x_2096.z, x_2096.z, x_2096.z)) + x_2099);
    let x_2101 : vec3<f32> = u_xlat25;
    let x_2102 : i32 = u_xlati7;
    let x_2105 : i32 = u_xlati7;
    let x_2109 : vec4<f32> = x_364.x_MainLightWorldToShadow[((x_2102 + 3i) / 4i)][((x_2105 + 3i) % 4i)];
    u_xlat25 = (x_2101 + vec3<f32>(x_2109.x, x_2109.y, x_2109.z));
    let x_2113 : vec3<f32> = u_xlat25;
    let x_2114 : vec2<f32> = vec2<f32>(x_2113.x, x_2113.y);
    let x_2116 : f32 = u_xlat25.z;
    txVec30 = vec3<f32>(x_2114.x, x_2114.y, x_2116);
    let x_2123 : vec3<f32> = txVec30;
    let x_2125 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2123.xy, x_2123.z);
    u_xlat25.x = x_2125;
    let x_2127 : f32 = u_xlat61;
    let x_2129 : f32 = u_xlat25.x;
    u_xlat61 = (x_2127 + x_2129);

    continuing {
      let x_2131 : u32 = u_xlatu_loop_1;
      u_xlatu_loop_1 = (x_2131 + bitcast<u32>(1i));
    }
  }
  let x_2133 : vec3<f32> = vs_TEXCOORD1;
  let x_2136 : vec3<f32> = (x_2133 * vec3<f32>(1.100000024f, 1.100000024f, 1.100000024f));
  let x_2137 : vec4<f32> = u_xlat4;
  u_xlat4 = vec4<f32>(x_2136.x, x_2136.y, x_2136.z, x_2137.w);
  let x_2139 : vec3<f32> = vs_TEXCOORD1;
  let x_2142 : vec4<f32> = x_364.x_CascadeShadowSplitSpheres0;
  let x_2145 : vec3<f32> = ((x_2139 * vec3<f32>(1.100000024f, 1.100000024f, 1.100000024f)) + -(vec3<f32>(x_2142.x, x_2142.y, x_2142.z)));
  let x_2146 : vec4<f32> = u_xlat5;
  u_xlat5 = vec4<f32>(x_2145.x, x_2145.y, x_2145.z, x_2146.w);
  let x_2148 : vec3<f32> = vs_TEXCOORD1;
  let x_2151 : vec4<f32> = x_364.x_CascadeShadowSplitSpheres1;
  let x_2154 : vec3<f32> = ((x_2148 * vec3<f32>(1.100000024f, 1.100000024f, 1.100000024f)) + -(vec3<f32>(x_2151.x, x_2151.y, x_2151.z)));
  let x_2155 : vec4<f32> = u_xlat6;
  u_xlat6 = vec4<f32>(x_2154.x, x_2154.y, x_2154.z, x_2155.w);
  let x_2157 : vec3<f32> = vs_TEXCOORD1;
  let x_2160 : vec4<f32> = x_364.x_CascadeShadowSplitSpheres2;
  let x_2163 : vec3<f32> = ((x_2157 * vec3<f32>(1.100000024f, 1.100000024f, 1.100000024f)) + -(vec3<f32>(x_2160.x, x_2160.y, x_2160.z)));
  let x_2164 : vec4<f32> = u_xlat7;
  u_xlat7 = vec4<f32>(x_2163.x, x_2163.y, x_2163.z, x_2164.w);
  let x_2166 : vec3<f32> = vs_TEXCOORD1;
  let x_2169 : vec4<f32> = x_364.x_CascadeShadowSplitSpheres3;
  let x_2172 : vec3<f32> = ((x_2166 * vec3<f32>(1.100000024f, 1.100000024f, 1.100000024f)) + -(vec3<f32>(x_2169.x, x_2169.y, x_2169.z)));
  let x_2173 : vec4<f32> = u_xlat8;
  u_xlat8 = vec4<f32>(x_2172.x, x_2172.y, x_2172.z, x_2173.w);
  let x_2175 : vec4<f32> = u_xlat5;
  let x_2177 : vec4<f32> = u_xlat5;
  u_xlat5.x = dot(vec3<f32>(x_2175.x, x_2175.y, x_2175.z), vec3<f32>(x_2177.x, x_2177.y, x_2177.z));
  let x_2181 : vec4<f32> = u_xlat6;
  let x_2183 : vec4<f32> = u_xlat6;
  u_xlat5.y = dot(vec3<f32>(x_2181.x, x_2181.y, x_2181.z), vec3<f32>(x_2183.x, x_2183.y, x_2183.z));
  let x_2187 : vec4<f32> = u_xlat7;
  let x_2189 : vec4<f32> = u_xlat7;
  u_xlat5.z = dot(vec3<f32>(x_2187.x, x_2187.y, x_2187.z), vec3<f32>(x_2189.x, x_2189.y, x_2189.z));
  let x_2193 : vec4<f32> = u_xlat8;
  let x_2195 : vec4<f32> = u_xlat8;
  u_xlat5.w = dot(vec3<f32>(x_2193.x, x_2193.y, x_2193.z), vec3<f32>(x_2195.x, x_2195.y, x_2195.z));
  let x_2200 : vec4<f32> = u_xlat5;
  let x_2202 : vec4<f32> = x_364.x_CascadeShadowSplitSphereRadii;
  u_xlatb5 = (x_2200 < x_2202);
  let x_2205 : bool = u_xlatb5.x;
  u_xlat6.x = select(0.0f, 1.0f, x_2205);
  let x_2209 : bool = u_xlatb5.y;
  u_xlat6.y = select(0.0f, 1.0f, x_2209);
  let x_2213 : bool = u_xlatb5.z;
  u_xlat6.z = select(0.0f, 1.0f, x_2213);
  let x_2217 : bool = u_xlatb5.w;
  u_xlat6.w = select(0.0f, 1.0f, x_2217);
  let x_2221 : bool = u_xlatb5.x;
  u_xlat5.x = select(-0.0f, -1.0f, x_2221);
  let x_2225 : bool = u_xlatb5.y;
  u_xlat5.y = select(-0.0f, -1.0f, x_2225);
  let x_2229 : bool = u_xlatb5.z;
  u_xlat5.z = select(-0.0f, -1.0f, x_2229);
  let x_2232 : vec4<f32> = u_xlat5;
  let x_2234 : vec4<f32> = u_xlat6;
  let x_2236 : vec3<f32> = (vec3<f32>(x_2232.x, x_2232.y, x_2232.z) + vec3<f32>(x_2234.y, x_2234.z, x_2234.w));
  let x_2237 : vec4<f32> = u_xlat5;
  u_xlat5 = vec4<f32>(x_2236.x, x_2236.y, x_2236.z, x_2237.w);
  let x_2239 : vec4<f32> = u_xlat5;
  let x_2241 : vec3<f32> = max(vec3<f32>(x_2239.x, x_2239.y, x_2239.z), vec3<f32>(0.0f, 0.0f, 0.0f));
  let x_2242 : vec4<f32> = u_xlat6;
  u_xlat6 = vec4<f32>(x_2242.x, x_2241.x, x_2241.y, x_2241.z);
  let x_2244 : vec4<f32> = u_xlat6;
  u_xlat0.x = dot(x_2244, vec4<f32>(4.0f, 3.0f, 2.0f, 1.0f));
  let x_2248 : f32 = u_xlat0.x;
  u_xlat0.x = (-(x_2248) + 4.0f);
  let x_2254 : f32 = u_xlat0.x;
  u_xlatu0 = u32(x_2254);
  let x_2257 : u32 = u_xlatu0;
  u_xlati0 = (bitcast<i32>(x_2257) << bitcast<u32>(2i));
  let x_2262 : f32 = u_xlat4.y;
  let x_2263 : i32 = u_xlati0;
  let x_2266 : i32 = u_xlati0;
  let x_2270 : f32 = x_364.x_MainLightWorldToShadow[((x_2263 + 1i) / 4i)][((x_2266 + 1i) % 4i)].z;
  u_xlat19 = (x_2262 * x_2270);
  let x_2272 : i32 = u_xlati0;
  let x_2274 : i32 = u_xlati0;
  let x_2277 : f32 = x_364.x_MainLightWorldToShadow[(x_2272 / 4i)][(x_2274 % 4i)].z;
  let x_2279 : f32 = u_xlat4.x;
  let x_2281 : f32 = u_xlat19;
  u_xlat19 = ((x_2277 * x_2279) + x_2281);
  let x_2283 : i32 = u_xlati0;
  let x_2286 : i32 = u_xlati0;
  let x_2290 : f32 = x_364.x_MainLightWorldToShadow[((x_2283 + 2i) / 4i)][((x_2286 + 2i) % 4i)].z;
  let x_2292 : f32 = u_xlat4.z;
  let x_2294 : f32 = u_xlat19;
  u_xlat19 = ((x_2290 * x_2292) + x_2294);
  let x_2296 : f32 = u_xlat19;
  let x_2297 : i32 = u_xlati0;
  let x_2300 : i32 = u_xlati0;
  let x_2304 : f32 = x_364.x_MainLightWorldToShadow[((x_2297 + 3i) / 4i)][((x_2300 + 3i) % 4i)].z;
  u_xlat0.x = (x_2296 + x_2304);
  let x_2309 : f32 = u_xlat0.x;
  u_xlatb19 = (0.0f >= x_2309);
  let x_2313 : f32 = u_xlat0.x;
  u_xlatb0 = (x_2313 >= 1.0f);
  let x_2315 : bool = u_xlatb0;
  let x_2316 : bool = u_xlatb19;
  u_xlatb0 = (x_2315 | x_2316);
  let x_2318 : f32 = u_xlat61;
  u_xlat19 = (x_2318 * 0.25f);
  let x_2320 : bool = u_xlatb0;
  let x_2321 : f32 = u_xlat19;
  u_xlat0.x = select(x_2321, 1.0f, x_2320);
  let x_2330 : vec4<f32> = x_2327.unity_SHAr;
  let x_2331 : vec4<f32> = u_xlat2;
  u_xlat4.x = dot(x_2330, x_2331);
  let x_2336 : vec4<f32> = x_2327.unity_SHAg;
  let x_2337 : vec4<f32> = u_xlat2;
  u_xlat4.y = dot(x_2336, x_2337);
  let x_2342 : vec4<f32> = x_2327.unity_SHAb;
  let x_2343 : vec4<f32> = u_xlat2;
  u_xlat4.z = dot(x_2342, x_2343);
  let x_2346 : vec4<f32> = u_xlat2;
  let x_2348 : vec4<f32> = u_xlat2;
  u_xlat5 = (vec4<f32>(x_2346.y, x_2346.z, x_2346.z, x_2346.x) * vec4<f32>(x_2348.x, x_2348.y, x_2348.z, x_2348.z));
  let x_2353 : vec4<f32> = x_2327.unity_SHBr;
  let x_2354 : vec4<f32> = u_xlat5;
  u_xlat6.x = dot(x_2353, x_2354);
  let x_2359 : vec4<f32> = x_2327.unity_SHBg;
  let x_2360 : vec4<f32> = u_xlat5;
  u_xlat6.y = dot(x_2359, x_2360);
  let x_2365 : vec4<f32> = x_2327.unity_SHBb;
  let x_2366 : vec4<f32> = u_xlat5;
  u_xlat6.z = dot(x_2365, x_2366);
  let x_2370 : f32 = u_xlat2.y;
  let x_2372 : f32 = u_xlat2.y;
  u_xlat19 = (x_2370 * x_2372);
  let x_2375 : f32 = u_xlat2.x;
  let x_2377 : f32 = u_xlat2.x;
  let x_2379 : f32 = u_xlat19;
  u_xlat19 = ((x_2375 * x_2377) + -(x_2379));
  let x_2384 : vec4<f32> = x_2327.unity_SHC;
  let x_2386 : f32 = u_xlat19;
  let x_2389 : vec4<f32> = u_xlat6;
  let x_2391 : vec3<f32> = ((vec3<f32>(x_2384.x, x_2384.y, x_2384.z) * vec3<f32>(x_2386, x_2386, x_2386)) + vec3<f32>(x_2389.x, x_2389.y, x_2389.z));
  let x_2392 : vec4<f32> = u_xlat5;
  u_xlat5 = vec4<f32>(x_2391.x, x_2391.y, x_2391.z, x_2392.w);
  let x_2394 : vec4<f32> = u_xlat4;
  let x_2396 : vec4<f32> = u_xlat5;
  let x_2398 : vec3<f32> = (vec3<f32>(x_2394.x, x_2394.y, x_2394.z) + vec3<f32>(x_2396.x, x_2396.y, x_2396.z));
  let x_2399 : vec4<f32> = u_xlat4;
  u_xlat4 = vec4<f32>(x_2398.x, x_2398.y, x_2398.z, x_2399.w);
  let x_2401 : vec4<f32> = u_xlat4;
  let x_2403 : vec3<f32> = max(vec3<f32>(x_2401.x, x_2401.y, x_2401.z), vec3<f32>(0.0f, 0.0f, 0.0f));
  let x_2404 : vec4<f32> = u_xlat4;
  u_xlat4 = vec4<f32>(x_2403.x, x_2403.y, x_2403.z, x_2404.w);
  let x_2406 : vec3<f32> = vs_TEXCOORD2;
  let x_2408 : vec4<f32> = x_40.x_MainLightPosition;
  u_xlat19 = dot(x_2406, -(vec3<f32>(x_2408.x, x_2408.y, x_2408.z)));
  let x_2412 : f32 = u_xlat19;
  let x_2414 : f32 = vs_TEXCOORD5.z;
  u_xlat19 = (x_2412 * x_2414);
  let x_2417 : f32 = u_xlat19;
  let x_2418 : f32 = u_xlat19;
  u_xlat59 = (x_2417 * x_2418);
  let x_2420 : f32 = u_xlat19;
  let x_2421 : f32 = u_xlat59;
  u_xlat19 = (x_2420 * x_2421);
  let x_2423 : f32 = u_xlat19;
  u_xlat19 = clamp(x_2423, 0.0f, 1.0f);
  let x_2425 : f32 = u_xlat19;
  u_xlat19 = (x_2425 * 5.0f);
  let x_2428 : f32 = u_xlat19;
  let x_2431 : vec4<f32> = x_40.x_MainLightColor;
  let x_2433 : vec3<f32> = (vec3<f32>(x_2428, x_2428, x_2428) * vec3<f32>(x_2431.x, x_2431.y, x_2431.z));
  let x_2434 : vec4<f32> = u_xlat5;
  u_xlat5 = vec4<f32>(x_2433.x, x_2433.y, x_2433.z, x_2434.w);
  let x_2437 : vec4<f32> = x_40.x_MainLightPosition;
  let x_2440 : vec4<f32> = x_40.x_MainLightColor;
  let x_2443 : vec4<f32> = u_xlat5;
  let x_2445 : vec3<f32> = ((vec3<f32>(x_2437.y, x_2437.y, x_2437.y) * vec3<f32>(x_2440.x, x_2440.y, x_2440.z)) + vec3<f32>(x_2443.x, x_2443.y, x_2443.z));
  let x_2446 : vec4<f32> = u_xlat5;
  u_xlat5 = vec4<f32>(x_2445.x, x_2445.y, x_2445.z, x_2446.w);
  let x_2448 : vec4<f32> = u_xlat5;
  let x_2450 : vec4<f32> = u_xlat0;
  let x_2453 : vec4<f32> = u_xlat4;
  let x_2455 : vec3<f32> = ((vec3<f32>(x_2448.x, x_2448.y, x_2448.z) * vec3<f32>(x_2450.x, x_2450.x, x_2450.x)) + vec3<f32>(x_2453.x, x_2453.y, x_2453.z));
  let x_2456 : vec4<f32> = u_xlat5;
  u_xlat5 = vec4<f32>(x_2455.x, x_2455.y, x_2455.z, x_2456.w);
  let x_2463 : vec4<f32> = vs_TEXCOORD0;
  let x_2466 : f32 = x_40.x_GlobalMipBias.x;
  let x_2467 : vec4<f32> = textureSampleBias(x_FoamMap, sampler_FoamMap, vec2<f32>(x_2463.z, x_2463.w), x_2466);
  let x_2468 : vec3<f32> = vec3<f32>(x_2467.x, x_2467.y, x_2467.z);
  let x_2469 : vec4<f32> = u_xlat6;
  u_xlat6 = vec4<f32>(x_2468.x, x_2468.y, x_2468.z, x_2469.w);
  let x_2472 : f32 = u_xlat41.x;
  u_xlat41.x = x_2472;
  let x_2475 : f32 = u_xlat41.x;
  u_xlat41.x = clamp(x_2475, 0.0f, 1.0f);
  let x_2479 : f32 = vs_TEXCOORD5.z;
  u_xlat19 = (x_2479 + -0.375f);
  let x_2482 : f32 = u_xlat19;
  u_xlat19 = clamp(x_2482, 0.0f, 1.0f);
  let x_2484 : f32 = u_xlat38;
  u_xlat59 = ((-(x_2484) * 4.0f) + 1.0f);
  let x_2488 : f32 = u_xlat59;
  u_xlat59 = clamp(x_2488, 0.0f, 1.0f);
  let x_2490 : f32 = u_xlat57;
  let x_2491 : f32 = u_xlat38;
  u_xlat57 = min(x_2490, x_2491);
  let x_2493 : f32 = u_xlat57;
  u_xlat57 = ((-(x_2493) * 0.5f) + 0.75f);
  let x_2498 : f32 = u_xlat59;
  let x_2500 : f32 = u_xlat57;
  u_xlat57 = ((x_2498 * 0.5f) + x_2500);
  let x_2502 : f32 = u_xlat57;
  u_xlat57 = clamp(x_2502, 0.0f, 1.0f);
  let x_2505 : f32 = u_xlat41.x;
  let x_2506 : f32 = u_xlat57;
  u_xlat57 = (x_2505 * x_2506);
  let x_2508 : f32 = u_xlat57;
  let x_2509 : f32 = u_xlat19;
  u_xlat19 = max(x_2508, x_2509);
  let x_2512 : f32 = u_xlat1.x;
  let x_2514 : f32 = u_xlat1.x;
  u_xlat57 = (x_2512 + x_2514);
  let x_2516 : f32 = u_xlat57;
  let x_2517 : f32 = u_xlat19;
  u_xlat7.x = max(x_2516, x_2517);
  u_xlat7.y = 0.660000026f;
  let x_2527 : vec4<f32> = u_xlat7;
  let x_2530 : f32 = x_40.x_GlobalMipBias.x;
  let x_2531 : vec4<f32> = textureSampleBias(x_AbsorptionScatteringRamp, sampler_AbsorptionScatteringRamp, vec2<f32>(x_2527.x, x_2527.y), x_2530);
  let x_2532 : vec3<f32> = vec3<f32>(x_2531.x, x_2531.y, x_2531.z);
  let x_2533 : vec4<f32> = u_xlat7;
  u_xlat7 = vec4<f32>(x_2532.x, x_2532.y, x_2532.z, x_2533.w);
  let x_2535 : vec4<f32> = u_xlat6;
  let x_2537 : vec4<f32> = u_xlat7;
  let x_2539 : vec3<f32> = (vec3<f32>(x_2535.x, x_2535.y, x_2535.z) * vec3<f32>(x_2537.x, x_2537.y, x_2537.z));
  let x_2540 : vec4<f32> = u_xlat6;
  u_xlat6 = vec4<f32>(x_2539.x, x_2539.y, x_2539.z, x_2540.w);
  let x_2542 : vec4<f32> = u_xlat6;
  let x_2544 : vec4<f32> = u_xlat6;
  u_xlat19 = dot(vec3<f32>(x_2542.x, x_2542.y, x_2542.z), vec3<f32>(x_2544.x, x_2544.y, x_2544.z));
  let x_2547 : f32 = u_xlat19;
  u_xlat19 = sqrt(x_2547);
  let x_2549 : f32 = u_xlat19;
  u_xlat19 = ((x_2549 * 1.5f) + -0.100000001f);
  let x_2553 : f32 = u_xlat19;
  u_xlat19 = clamp(x_2553, 0.0f, 1.0f);
  let x_2555 : vec3<f32> = u_xlat22;
  let x_2558 : vec4<f32> = x_40.x_MainLightColor;
  let x_2561 : vec4<f32> = u_xlat4;
  let x_2563 : vec3<f32> = ((vec3<f32>(x_2555.x, x_2555.x, x_2555.x) * vec3<f32>(x_2558.x, x_2558.y, x_2558.z)) + vec3<f32>(x_2561.x, x_2561.y, x_2561.z));
  let x_2564 : vec4<f32> = u_xlat4;
  u_xlat4 = vec4<f32>(x_2563.x, x_2563.y, x_2563.z, x_2564.w);
  let x_2566 : vec3<f32> = vs_TEXCOORD2;
  let x_2568 : vec4<f32> = x_40.x_MainLightPosition;
  let x_2570 : vec3<f32> = (x_2566 + vec3<f32>(x_2568.x, x_2568.y, x_2568.z));
  let x_2571 : vec4<f32> = u_xlat6;
  u_xlat6 = vec4<f32>(x_2570.x, x_2570.y, x_2570.z, x_2571.w);
  let x_2573 : vec4<f32> = u_xlat6;
  let x_2575 : vec4<f32> = u_xlat6;
  u_xlat57 = dot(vec3<f32>(x_2573.x, x_2573.y, x_2573.z), vec3<f32>(x_2575.x, x_2575.y, x_2575.z));
  let x_2578 : f32 = u_xlat57;
  u_xlat57 = max(x_2578, 1.17549435e-37f);
  let x_2581 : f32 = u_xlat57;
  u_xlat57 = inverseSqrt(x_2581);
  let x_2583 : f32 = u_xlat57;
  let x_2585 : vec4<f32> = u_xlat6;
  let x_2587 : vec3<f32> = (vec3<f32>(x_2583, x_2583, x_2583) * vec3<f32>(x_2585.x, x_2585.y, x_2585.z));
  let x_2588 : vec4<f32> = u_xlat6;
  u_xlat6 = vec4<f32>(x_2587.x, x_2587.y, x_2587.z, x_2588.w);
  let x_2590 : vec4<f32> = u_xlat2;
  let x_2592 : vec4<f32> = u_xlat6;
  u_xlat57 = dot(vec3<f32>(x_2590.x, x_2590.y, x_2590.z), vec3<f32>(x_2592.x, x_2592.y, x_2592.z));
  let x_2595 : f32 = u_xlat57;
  u_xlat57 = clamp(x_2595, 0.0f, 1.0f);
  let x_2598 : vec4<f32> = x_40.x_MainLightPosition;
  let x_2600 : vec4<f32> = u_xlat6;
  u_xlat1.x = dot(vec3<f32>(x_2598.x, x_2598.y, x_2598.z), vec3<f32>(x_2600.x, x_2600.y, x_2600.z));
  let x_2605 : f32 = u_xlat1.x;
  u_xlat1.x = clamp(x_2605, 0.0f, 1.0f);
  let x_2608 : f32 = u_xlat57;
  let x_2609 : f32 = u_xlat57;
  u_xlat57 = (x_2608 * x_2609);
  let x_2611 : f32 = u_xlat57;
  u_xlat57 = ((x_2611 * -0.999938965f) + 1.000010014f);
  let x_2617 : f32 = u_xlat1.x;
  let x_2619 : f32 = u_xlat1.x;
  u_xlat1.x = (x_2617 * x_2619);
  let x_2622 : f32 = u_xlat57;
  let x_2623 : f32 = u_xlat57;
  u_xlat57 = (x_2622 * x_2623);
  let x_2626 : f32 = u_xlat1.x;
  u_xlat1.x = max(x_2626, 0.100000001f);
  let x_2629 : f32 = u_xlat57;
  let x_2631 : f32 = u_xlat1.x;
  u_xlat57 = (x_2629 * x_2631);
  let x_2633 : f32 = u_xlat57;
  u_xlat57 = (x_2633 * 2.03125f);
  let x_2637 : f32 = u_xlat57;
  u_xlat57 = (6.10351562e-05f / x_2637);
  let x_2640 : f32 = u_xlat0.x;
  let x_2641 : f32 = u_xlat57;
  u_xlat0.x = (x_2640 * x_2641);
  let x_2645 : f32 = u_xlat0.x;
  u_xlat0.x = (x_2645 * 0.039999999f);
  let x_2649 : vec4<f32> = u_xlat0;
  let x_2652 : vec4<f32> = x_40.x_MainLightColor;
  let x_2654 : vec3<f32> = (vec3<f32>(x_2649.x, x_2649.x, x_2649.x) * vec3<f32>(x_2652.x, x_2652.y, x_2652.z));
  let x_2655 : vec4<f32> = u_xlat6;
  u_xlat6 = vec4<f32>(x_2654.x, x_2654.y, x_2654.z, x_2655.w);
  let x_2658 : f32 = x_40.x_AdditionalLightsCount.x;
  let x_2660 : f32 = x_2327.unity_LightData.y;
  u_xlat0.x = min(x_2658, x_2660);
  let x_2664 : f32 = u_xlat0.x;
  u_xlatu0 = bitcast<u32>(i32(x_2664));
  let x_2667 : vec4<f32> = u_xlat5;
  let x_2668 : vec3<f32> = vec3<f32>(x_2667.x, x_2667.y, x_2667.z);
  let x_2669 : vec4<f32> = u_xlat7;
  u_xlat7 = vec4<f32>(x_2668.x, x_2668.y, x_2668.z, x_2669.w);
  let x_2671 : vec4<f32> = u_xlat6;
  let x_2672 : vec3<f32> = vec3<f32>(x_2671.x, x_2671.y, x_2671.z);
  let x_2673 : vec4<f32> = u_xlat8;
  u_xlat8 = vec4<f32>(x_2672.x, x_2672.y, x_2672.z, x_2673.w);
  u_xlatu_loop_2 = 0u;
  loop {
    let x_2681 : u32 = u_xlatu_loop_2;
    let x_2682 : u32 = u_xlatu0;
    if ((x_2681 < x_2682)) {
    } else {
      break;
    }
    let x_2685 : u32 = u_xlatu_loop_2;
    u_xlatu1 = (x_2685 >> 2u);
    let x_2688 : u32 = u_xlatu_loop_2;
    u_xlati59 = bitcast<i32>((x_2688 & 3u));
    let x_2691 : u32 = u_xlatu1;
    let x_2694 : vec4<f32> = x_2327.unity_LightIndices[bitcast<i32>(x_2691)];
    let x_2703 : i32 = u_xlati59;
    indexable = array<vec4<u32>, 4u>(vec4<u32>(1065353216u, 0u, 0u, 0u), vec4<u32>(0u, 1065353216u, 0u, 0u), vec4<u32>(0u, 0u, 1065353216u, 0u), vec4<u32>(0u, 0u, 0u, 1065353216u));
    let x_2708 : vec4<u32> = indexable[x_2703];
    u_xlat1.x = dot(x_2694, bitcast<vec4<f32>>(x_2708));
    let x_2714 : f32 = u_xlat1.x;
    u_xlati1 = i32(x_2714);
    let x_2716 : vec3<f32> = vs_TEXCOORD1;
    let x_2728 : i32 = u_xlati1;
    let x_2730 : vec4<f32> = x_2727.x_AdditionalLightsPosition[x_2728];
    let x_2733 : i32 = u_xlati1;
    let x_2735 : vec4<f32> = x_2727.x_AdditionalLightsPosition[x_2733];
    let x_2737 : vec3<f32> = ((-(x_2716) * vec3<f32>(x_2730.w, x_2730.w, x_2730.w)) + vec3<f32>(x_2735.x, x_2735.y, x_2735.z));
    let x_2738 : vec4<f32> = u_xlat9;
    u_xlat9 = vec4<f32>(x_2737.x, x_2737.y, x_2737.z, x_2738.w);
    let x_2740 : vec4<f32> = u_xlat9;
    let x_2742 : vec4<f32> = u_xlat9;
    u_xlat59 = dot(vec3<f32>(x_2740.x, x_2740.y, x_2740.z), vec3<f32>(x_2742.x, x_2742.y, x_2742.z));
    let x_2745 : f32 = u_xlat59;
    u_xlat59 = max(x_2745, 6.10351562e-05f);
    let x_2747 : f32 = u_xlat59;
    u_xlat22.x = inverseSqrt(x_2747);
    let x_2750 : vec3<f32> = u_xlat22;
    let x_2752 : vec4<f32> = u_xlat9;
    let x_2754 : vec3<f32> = (vec3<f32>(x_2750.x, x_2750.x, x_2750.x) * vec3<f32>(x_2752.x, x_2752.y, x_2752.z));
    let x_2755 : vec4<f32> = u_xlat10;
    u_xlat10 = vec4<f32>(x_2754.x, x_2754.y, x_2754.z, x_2755.w);
    let x_2757 : f32 = u_xlat59;
    u_xlat41.x = (1.0f / x_2757);
    let x_2760 : f32 = u_xlat59;
    let x_2761 : i32 = u_xlati1;
    let x_2763 : f32 = x_2727.x_AdditionalLightsAttenuation[x_2761].x;
    u_xlat59 = (x_2760 * x_2763);
    let x_2765 : f32 = u_xlat59;
    let x_2767 : f32 = u_xlat59;
    u_xlat59 = ((-(x_2765) * x_2767) + 1.0f);
    let x_2770 : f32 = u_xlat59;
    u_xlat59 = max(x_2770, 0.0f);
    let x_2772 : f32 = u_xlat59;
    let x_2773 : f32 = u_xlat59;
    u_xlat59 = (x_2772 * x_2773);
    let x_2775 : f32 = u_xlat59;
    let x_2777 : f32 = u_xlat41.x;
    u_xlat59 = (x_2775 * x_2777);
    let x_2779 : i32 = u_xlati1;
    let x_2781 : vec4<f32> = x_2727.x_AdditionalLightsSpotDir[x_2779];
    let x_2783 : vec4<f32> = u_xlat10;
    u_xlat41.x = dot(vec3<f32>(x_2781.x, x_2781.y, x_2781.z), vec3<f32>(x_2783.x, x_2783.y, x_2783.z));
    let x_2788 : f32 = u_xlat41.x;
    let x_2789 : i32 = u_xlati1;
    let x_2791 : f32 = x_2727.x_AdditionalLightsAttenuation[x_2789].z;
    let x_2793 : i32 = u_xlati1;
    let x_2795 : f32 = x_2727.x_AdditionalLightsAttenuation[x_2793].w;
    u_xlat41.x = ((x_2788 * x_2791) + x_2795);
    let x_2799 : f32 = u_xlat41.x;
    u_xlat41.x = clamp(x_2799, 0.0f, 1.0f);
    let x_2803 : f32 = u_xlat41.x;
    let x_2805 : f32 = u_xlat41.x;
    u_xlat41.x = (x_2803 * x_2805);
    let x_2808 : f32 = u_xlat59;
    let x_2810 : f32 = u_xlat41.x;
    u_xlat59 = (x_2808 * x_2810);
    let x_2812 : vec4<f32> = u_xlat2;
    let x_2814 : vec4<f32> = u_xlat10;
    u_xlat41.x = dot(vec3<f32>(x_2812.x, x_2812.y, x_2812.z), vec3<f32>(x_2814.x, x_2814.y, x_2814.z));
    let x_2819 : f32 = u_xlat41.x;
    u_xlat41.x = clamp(x_2819, 0.0f, 1.0f);
    let x_2822 : f32 = u_xlat59;
    let x_2824 : f32 = u_xlat41.x;
    u_xlat41.x = (x_2822 * x_2824);
    let x_2827 : vec2<f32> = u_xlat41;
    let x_2829 : i32 = u_xlati1;
    let x_2831 : vec4<f32> = x_2727.x_AdditionalLightsColor[x_2829];
    let x_2833 : vec3<f32> = (vec3<f32>(x_2827.x, x_2827.x, x_2827.x) * vec3<f32>(x_2831.x, x_2831.y, x_2831.z));
    let x_2834 : vec4<f32> = u_xlat11;
    u_xlat11 = vec4<f32>(x_2833.x, x_2833.y, x_2833.z, x_2834.w);
    let x_2836 : vec4<f32> = u_xlat9;
    let x_2838 : vec3<f32> = u_xlat22;
    let x_2841 : vec3<f32> = vs_TEXCOORD2;
    let x_2842 : vec3<f32> = ((vec3<f32>(x_2836.x, x_2836.y, x_2836.z) * vec3<f32>(x_2838.x, x_2838.x, x_2838.x)) + x_2841);
    let x_2843 : vec4<f32> = u_xlat9;
    u_xlat9 = vec4<f32>(x_2842.x, x_2842.y, x_2842.z, x_2843.w);
    let x_2845 : vec4<f32> = u_xlat9;
    let x_2847 : vec4<f32> = u_xlat9;
    u_xlat22.x = dot(vec3<f32>(x_2845.x, x_2845.y, x_2845.z), vec3<f32>(x_2847.x, x_2847.y, x_2847.z));
    let x_2852 : f32 = u_xlat22.x;
    u_xlat22.x = max(x_2852, 1.17549435e-37f);
    let x_2856 : f32 = u_xlat22.x;
    u_xlat22.x = inverseSqrt(x_2856);
    let x_2859 : vec3<f32> = u_xlat22;
    let x_2861 : vec4<f32> = u_xlat9;
    let x_2863 : vec3<f32> = (vec3<f32>(x_2859.x, x_2859.x, x_2859.x) * vec3<f32>(x_2861.x, x_2861.y, x_2861.z));
    let x_2864 : vec4<f32> = u_xlat9;
    u_xlat9 = vec4<f32>(x_2863.x, x_2863.y, x_2863.z, x_2864.w);
    let x_2866 : vec4<f32> = u_xlat2;
    let x_2868 : vec4<f32> = u_xlat9;
    u_xlat22.x = dot(vec3<f32>(x_2866.x, x_2866.y, x_2866.z), vec3<f32>(x_2868.x, x_2868.y, x_2868.z));
    let x_2873 : f32 = u_xlat22.x;
    u_xlat22.x = clamp(x_2873, 0.0f, 1.0f);
    let x_2876 : vec4<f32> = u_xlat10;
    let x_2878 : vec4<f32> = u_xlat9;
    u_xlat22.y = dot(vec3<f32>(x_2876.x, x_2876.y, x_2876.z), vec3<f32>(x_2878.x, x_2878.y, x_2878.z));
    let x_2883 : f32 = u_xlat22.y;
    u_xlat22.y = clamp(x_2883, 0.0f, 1.0f);
    let x_2886 : vec3<f32> = u_xlat22;
    let x_2888 : vec3<f32> = u_xlat22;
    let x_2890 : vec2<f32> = (vec2<f32>(x_2886.x, x_2886.y) * vec2<f32>(x_2888.x, x_2888.y));
    let x_2891 : vec3<f32> = u_xlat22;
    u_xlat22 = vec3<f32>(x_2890.x, x_2890.y, x_2891.z);
    let x_2894 : f32 = u_xlat22.x;
    u_xlat22.x = ((x_2894 * -0.999938965f) + 1.000010014f);
    let x_2899 : f32 = u_xlat22.x;
    let x_2901 : f32 = u_xlat22.x;
    u_xlat22.x = (x_2899 * x_2901);
    let x_2905 : f32 = u_xlat22.y;
    u_xlat41.x = max(x_2905, 0.100000001f);
    let x_2909 : f32 = u_xlat41.x;
    let x_2911 : f32 = u_xlat22.x;
    u_xlat22.x = (x_2909 * x_2911);
    let x_2915 : f32 = u_xlat22.x;
    u_xlat22.x = (x_2915 * 2.03125f);
    let x_2919 : f32 = u_xlat22.x;
    u_xlat22.x = (6.10351562e-05f / x_2919);
    let x_2923 : f32 = u_xlat22.x;
    u_xlat22.x = (x_2923 * 0.039999999f);
    let x_2926 : vec3<f32> = u_xlat22;
    let x_2928 : vec4<f32> = u_xlat11;
    let x_2931 : vec4<f32> = u_xlat8;
    let x_2933 : vec3<f32> = ((vec3<f32>(x_2926.x, x_2926.x, x_2926.x) * vec3<f32>(x_2928.x, x_2928.y, x_2928.z)) + vec3<f32>(x_2931.x, x_2931.y, x_2931.z));
    let x_2934 : vec4<f32> = u_xlat8;
    u_xlat8 = vec4<f32>(x_2933.x, x_2933.y, x_2933.z, x_2934.w);
    let x_2936 : f32 = u_xlat59;
    let x_2938 : i32 = u_xlati1;
    let x_2940 : vec4<f32> = x_2727.x_AdditionalLightsColor[x_2938];
    let x_2943 : vec4<f32> = u_xlat7;
    let x_2945 : vec3<f32> = ((vec3<f32>(x_2936, x_2936, x_2936) * vec3<f32>(x_2940.x, x_2940.y, x_2940.z)) + vec3<f32>(x_2943.x, x_2943.y, x_2943.z));
    let x_2946 : vec4<f32> = u_xlat7;
    u_xlat7 = vec4<f32>(x_2945.x, x_2945.y, x_2945.z, x_2946.w);

    continuing {
      let x_2948 : u32 = u_xlatu_loop_2;
      u_xlatu_loop_2 = (x_2948 + bitcast<u32>(1i));
    }
  }
  let x_2950 : f32 = u_xlat58;
  let x_2951 : f32 = u_xlat38;
  u_xlat5.x = (x_2950 * x_2951);
  u_xlat5.y = 0.375f;
  u_xlat5.z = 0.0f;
  let x_2960 : vec4<f32> = u_xlat5;
  let x_2963 : f32 = x_40.x_GlobalMipBias.x;
  let x_2964 : vec4<f32> = textureSampleBias(x_AbsorptionScatteringRamp, sampler_AbsorptionScatteringRamp, vec2<f32>(x_2960.x, x_2960.y), x_2963);
  let x_2965 : vec3<f32> = vec3<f32>(x_2964.x, x_2964.y, x_2964.z);
  let x_2966 : vec4<f32> = u_xlat0;
  u_xlat0 = vec4<f32>(x_2965.x, x_2966.y, x_2965.y, x_2965.z);
  let x_2968 : vec3<f32> = vs_TEXCOORD2;
  let x_2970 : vec4<f32> = u_xlat2;
  u_xlat1.x = dot(-(x_2968), vec3<f32>(x_2970.x, x_2970.y, x_2970.z));
  let x_2975 : f32 = u_xlat1.x;
  let x_2977 : f32 = u_xlat1.x;
  u_xlat1.x = (x_2975 + x_2977);
  let x_2980 : vec4<f32> = u_xlat2;
  let x_2982 : vec3<f32> = u_xlat1;
  let x_2986 : vec3<f32> = vs_TEXCOORD2;
  let x_2988 : vec3<f32> = ((vec3<f32>(x_2980.x, x_2980.y, x_2980.z) * -(vec3<f32>(x_2982.x, x_2982.x, x_2982.x))) + -(x_2986));
  let x_2989 : vec4<f32> = u_xlat2;
  u_xlat2 = vec4<f32>(x_2988.x, x_2988.y, x_2988.z, x_2989.w);
  let x_2999 : vec4<f32> = u_xlat2;
  let x_3002 : f32 = x_40.x_GlobalMipBias.x;
  let x_3003 : vec4<f32> = textureSampleBias(x_CubemapTexture, sampler_CubemapTexture, vec3<f32>(x_2999.x, x_2999.y, x_2999.z), x_3002);
  let x_3004 : vec3<f32> = vec3<f32>(x_3003.x, x_3003.y, x_3003.z);
  let x_3005 : vec4<f32> = u_xlat2;
  u_xlat2 = vec4<f32>(x_3004.x, x_3004.y, x_3004.z, x_3005.w);
  let x_3012 : vec2<f32> = u_xlat20;
  let x_3014 : f32 = u_xlat41.y;
  let x_3015 : vec4<f32> = textureSampleLevel(x_CameraOpaqueTexture, sampler_CameraOpaqueTexture_linear_clamp, x_3012, x_3014);
  u_xlat1 = vec3<f32>(x_3015.x, x_3015.y, x_3015.z);
  let x_3020 : vec4<f32> = u_xlat5;
  let x_3023 : f32 = x_40.x_GlobalMipBias.x;
  let x_3024 : vec4<f32> = textureSampleBias(x_AbsorptionScatteringRamp, sampler_AbsorptionScatteringRamp, vec2<f32>(x_3020.x, x_3020.z), x_3023);
  u_xlat22 = vec3<f32>(x_3024.x, x_3024.y, x_3024.z);
  let x_3026 : vec3<f32> = u_xlat1;
  let x_3027 : vec3<f32> = u_xlat22;
  let x_3028 : vec3<f32> = (x_3026 * x_3027);
  let x_3029 : vec4<f32> = u_xlat5;
  u_xlat5 = vec4<f32>(x_3028.x, x_3028.y, x_3028.z, x_3029.w);
  let x_3031 : vec3<f32> = u_xlat1;
  let x_3033 : vec3<f32> = u_xlat22;
  let x_3035 : vec4<f32> = u_xlat2;
  u_xlat1 = ((-(x_3031) * x_3033) + vec3<f32>(x_3035.x, x_3035.y, x_3035.z));
  let x_3038 : f32 = u_xlat3;
  let x_3040 : vec3<f32> = u_xlat1;
  let x_3042 : vec4<f32> = u_xlat5;
  u_xlat1 = ((vec3<f32>(x_3038, x_3038, x_3038) * x_3040) + vec3<f32>(x_3042.x, x_3042.y, x_3042.z));
  let x_3045 : vec4<f32> = u_xlat7;
  let x_3047 : vec4<f32> = u_xlat0;
  let x_3050 : vec3<f32> = u_xlat1;
  let x_3051 : vec3<f32> = ((vec3<f32>(x_3045.x, x_3045.y, x_3045.z) * vec3<f32>(x_3047.x, x_3047.z, x_3047.w)) + x_3050);
  let x_3052 : vec4<f32> = u_xlat0;
  u_xlat0 = vec4<f32>(x_3051.x, x_3052.y, x_3051.y, x_3051.z);
  let x_3054 : vec4<f32> = u_xlat8;
  let x_3056 : vec4<f32> = u_xlat0;
  let x_3058 : vec3<f32> = (vec3<f32>(x_3054.x, x_3054.y, x_3054.z) + vec3<f32>(x_3056.x, x_3056.z, x_3056.w));
  let x_3059 : vec4<f32> = u_xlat0;
  u_xlat0 = vec4<f32>(x_3058.x, x_3059.y, x_3058.y, x_3058.z);
  let x_3061 : f32 = u_xlat19;
  let x_3063 : vec4<f32> = u_xlat4;
  let x_3066 : vec4<f32> = u_xlat0;
  u_xlat1 = ((vec3<f32>(x_3061, x_3061, x_3061) * vec3<f32>(x_3063.x, x_3063.y, x_3063.z)) + -(vec3<f32>(x_3066.x, x_3066.z, x_3066.w)));
  let x_3070 : f32 = u_xlat19;
  let x_3072 : vec3<f32> = u_xlat1;
  let x_3074 : vec4<f32> = u_xlat0;
  let x_3076 : vec3<f32> = ((vec3<f32>(x_3070, x_3070, x_3070) * x_3072) + vec3<f32>(x_3074.x, x_3074.z, x_3074.w));
  let x_3077 : vec4<f32> = u_xlat0;
  u_xlat0 = vec4<f32>(x_3076.x, x_3076.y, x_3076.z, x_3077.w);
  let x_3082 : f32 = vs_TEXCOORD4.x;
  let x_3084 : f32 = vs_TEXCOORD4.x;
  u_xlat57 = (x_3082 * -(x_3084));
  let x_3087 : f32 = u_xlat57;
  u_xlat57 = exp2(x_3087);
  let x_3089 : vec4<f32> = u_xlat0;
  let x_3092 : vec4<f32> = x_40.unity_FogColor;
  let x_3095 : vec3<f32> = (vec3<f32>(x_3089.x, x_3089.y, x_3089.z) + -(vec3<f32>(x_3092.x, x_3092.y, x_3092.z)));
  let x_3096 : vec4<f32> = u_xlat0;
  u_xlat0 = vec4<f32>(x_3095.x, x_3095.y, x_3095.z, x_3096.w);
  let x_3100 : f32 = u_xlat57;
  let x_3102 : vec4<f32> = u_xlat0;
  let x_3106 : vec4<f32> = x_40.unity_FogColor;
  let x_3108 : vec3<f32> = ((vec3<f32>(x_3100, x_3100, x_3100) * vec3<f32>(x_3102.x, x_3102.y, x_3102.z)) + vec3<f32>(x_3106.x, x_3106.y, x_3106.z));
  let x_3109 : vec4<f32> = SV_Target0;
  SV_Target0 = vec4<f32>(x_3108.x, x_3108.y, x_3108.z, x_3109.w);
  SV_Target0.w = 1.0f;
  return;
}

struct main_out {
  @location(0)
  SV_Target0_1 : vec4<f32>,
}

@fragment
fn main(@location(7) vs_TEXCOORD6_param : vec4<f32>, @location(4) vs_TEXCOORD3_param : vec3<f32>, @location(6) vs_TEXCOORD5_param : vec4<f32>, @location(1) vs_TEXCOORD1_param : vec3<f32>, @location(0) vs_TEXCOORD0_param : vec4<f32>, @location(2) vs_NORMAL0_param : vec3<f32>, @location(3) vs_TEXCOORD2_param : vec3<f32>, @location(5) vs_TEXCOORD4_param : vec2<f32>, @builtin(position) gl_FragCoord_param : vec4<f32>) -> main_out {
  vs_TEXCOORD6 = vs_TEXCOORD6_param;
  vs_TEXCOORD3 = vs_TEXCOORD3_param;
  vs_TEXCOORD5 = vs_TEXCOORD5_param;
  vs_TEXCOORD1 = vs_TEXCOORD1_param;
  vs_TEXCOORD0 = vs_TEXCOORD0_param;
  vs_NORMAL0 = vs_NORMAL0_param;
  vs_TEXCOORD2 = vs_TEXCOORD2_param;
  vs_TEXCOORD4 = vs_TEXCOORD4_param;
  gl_FragCoord = gl_FragCoord_param;
  main_1();
  return main_out(SV_Target0);
}

