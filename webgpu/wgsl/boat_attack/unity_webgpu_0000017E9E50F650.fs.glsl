#version 440
#extension GL_ARB_explicit_attrib_location : require
#extension GL_ARB_shading_language_420pack : require

layout(origin_upper_left) in vec4 gl_FragCoord;
#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
precise vec4 u_xlat_precise_vec4;
precise ivec4 u_xlat_precise_ivec4;
precise bvec4 u_xlat_precise_bvec4;
precise uvec4 u_xlat_precise_uvec4;
const uvec4 ImmCB_0[] = uvec4[4] (
	uvec4(0x3F800000, 0x0, 0x0, 0x0),
	uvec4(0x0, 0x3F800000, 0x0, 0x0),
	uvec4(0x0, 0x0, 0x3F800000, 0x0),
	uvec4(0x0, 0x0, 0x0, 0x3F800000));
layout(set = 1, binding = 0, std140) uniform PGlobals {
	vec2 _GlobalMipBias;
	vec4 _MainLightPosition;
	vec4 _MainLightColor;
	vec4 _AdditionalLightsCount;
	vec4 _Time;
	vec4 _ScreenParams;
	vec4 _ZBufferParams;
	vec4 unity_FogColor;
	mat4x4 unity_MatrixVP;
	float _MaxDepth;
	vec4 _VeraslWater_DepthCamParams;
};
layout(set = 1, binding = 1, std140) uniform AdditionalLights {
	vec4 _AdditionalLightsPosition[32];
	vec4 _AdditionalLightsColor[32];
	vec4 _AdditionalLightsAttenuation[32];
	vec4 _AdditionalLightsSpotDir[32];
	vec4 _AdditionalLightsOcclusionProbes[32];
	float _AdditionalLightsLayerMasks[32];
};
layout(set = 1, binding = 2, std140) uniform UnityPerDraw {
	mat4x4 unity_ObjectToWorld;
	mat4x4 unity_WorldToObject;
	vec4 unity_LODFade;
	vec4 unity_WorldTransformParams;
	vec4 unity_RenderingLayer;
	vec4 unity_LightData;
	vec4 unity_LightIndices[2];
	vec4 unity_ProbesOcclusion;
	vec4 unity_SpecCube0_HDR;
	vec4 unity_SpecCube1_HDR;
	vec4 unity_SpecCube0_BoxMax;
	vec4 unity_SpecCube0_BoxMin;
	vec4 unity_SpecCube0_ProbePosition;
	vec4 unity_SpecCube1_BoxMax;
	vec4 unity_SpecCube1_BoxMin;
	vec4 unity_SpecCube1_ProbePosition;
	vec4 unity_LightmapST;
	vec4 unity_DynamicLightmapST;
	vec4 unity_SHAr;
	vec4 unity_SHAg;
	vec4 unity_SHAb;
	vec4 unity_SHBr;
	vec4 unity_SHBg;
	vec4 unity_SHBb;
	vec4 unity_SHC;
	vec4 unity_RendererBounds_Min;
	vec4 unity_RendererBounds_Max;
	mat4x4 unity_MatrixPreviousM;
	mat4x4 unity_MatrixPreviousMI;
	vec4 unity_MotionVectorsParams;
	vec4 unity_SpriteColor;
	vec4 unity_SpriteProps;
};
layout(set = 1, binding = 3, std140) uniform UnityPerMaterial {
	float _BumpScale;
	vec4 _DitherPattern_TexelSize;
};
layout(set = 1, binding = 4, std140) uniform LightShadows {
	mat4x4 _MainLightWorldToShadow[5];
	vec4 _CascadeShadowSplitSpheres0;
	vec4 _CascadeShadowSplitSpheres1;
	vec4 _CascadeShadowSplitSpheres2;
	vec4 _CascadeShadowSplitSpheres3;
	vec4 _CascadeShadowSplitSphereRadii;
	vec4 _MainLightShadowOffset0;
	vec4 _MainLightShadowOffset1;
	vec4 _MainLightShadowParams;
	vec4 _MainLightShadowmapSize;
	vec4 _AdditionalShadowOffset0;
	vec4 _AdditionalShadowOffset1;
	vec4 _AdditionalShadowFadeParams;
	vec4 _AdditionalShadowmapSize;
	vec4 _AdditionalShadowParams[32];
	mat4x4 _AdditionalLightsWorldToShadow[32];
};
layout(set = 0, binding = 0) uniform mediump texture2D _PlanarReflectionTexture;
layout(set = 0, binding = 1) uniform mediump texture2D _WaterFXMap;
layout(set = 0, binding = 2) uniform highp texture2D _CameraDepthTexture;
layout(set = 0, binding = 3) uniform mediump texture2D _CameraOpaqueTexture;
layout(set = 0, binding = 4) uniform mediump texture2D _WaterDepthMap;
layout(set = 0, binding = 5) uniform mediump texture2D _AbsorptionScatteringRamp;
layout(set = 0, binding = 6) uniform mediump texture2D _SurfaceMap;
layout(set = 0, binding = 7) uniform mediump texture2D _FoamMap;
layout(set = 0, binding = 8) uniform mediump texture2D _DitherPattern;
layout(set = 0, binding = 9) uniform mediump texture2D _MainLightShadowmapTexture;
layout(location = 0) in highp  vec4 vs_TEXCOORD0;
layout(location = 1) in highp  vec3 vs_TEXCOORD1;
layout(location = 2) in highp  vec3 vs_NORMAL0;
layout(location = 3) in highp  vec3 vs_TEXCOORD2;
layout(location = 4) in highp  vec3 vs_TEXCOORD3;
layout(location = 5) in highp  vec2 vs_TEXCOORD4;
layout(location = 6) in highp  vec4 vs_TEXCOORD5;
layout(location = 7) in highp  vec4 vs_TEXCOORD6;
layout(location = 0) out highp vec4 SV_Target0;
vec3 u_xlat0;
vec3 u_xlat1;
uint u_xlatu1;
vec4 u_xlat2;
float u_xlat3;
vec4 u_xlat4;
bvec4 u_xlatb4;
vec4 u_xlat5;
vec4 u_xlat6;
bvec4 u_xlatb6;
vec4 u_xlat7;
vec4 u_xlat8;
bvec4 u_xlatb8;
vec4 u_xlat9;
vec3 u_xlat10;
vec3 u_xlat11;
vec2 u_xlat13;
vec3 u_xlat15;
int u_xlati15;
uint u_xlatu15;
bool u_xlatb15;
float u_xlat24;
vec2 u_xlat26;
vec2 u_xlat27;
int u_xlati27;
uint u_xlatu27;
bool u_xlatb27;
vec2 u_xlat28;
uint u_xlatu30;
float u_xlat36;
float u_xlat37;
float u_xlat38;
uint u_xlatu38;
float u_xlat39;
bool u_xlatb39;
float u_xlat41;
int u_xlati41;
uint u_xlatu41;
bool u_xlatb41;
float u_xlat42;
int u_xlati42;
uint u_xlatu42;
bool u_xlatb42;
float u_xlat43;
float u_xlat44;
layout(set = 0, binding = 10) uniform mediump  sampler sampler_ScreenTextures_linear_clamp;
layout(set = 0, binding = 11) uniform highp  sampler sampler_CameraDepthTexture;
layout(set = 0, binding = 12) uniform mediump  sampler sampler_CameraOpaqueTexture_linear_clamp;
layout(set = 0, binding = 13) uniform mediump  sampler sampler_WaterDepthMap_linear_clamp;
layout(set = 0, binding = 14) uniform mediump  sampler sampler_AbsorptionScatteringRamp;
layout(set = 0, binding = 15) uniform mediump  sampler sampler_SurfaceMap;
layout(set = 0, binding = 16) uniform mediump  sampler sampler_FoamMap;
layout(set = 0, binding = 17) uniform mediump  sampler sampler_DitherPattern;
layout(set = 0, binding = 18) uniform mediump  samplerShadow sampler_LinearClampCompare;
void main()
{
    u_xlat0.xy = vs_TEXCOORD6.xy / vs_TEXCOORD6.ww;
    u_xlat1.xyz = texture(sampler2D(_WaterFXMap, sampler_ScreenTextures_linear_clamp), vs_TEXCOORD3.xy, _GlobalMipBias.x).xyz;
    u_xlat24 = texture(sampler2D(_CameraDepthTexture, sampler_CameraDepthTexture), u_xlat0.xy, _GlobalMipBias.x).x;
    u_xlat24 = _ZBufferParams.z * u_xlat24 + _ZBufferParams.w;
    u_xlat24 = float(1.0) / u_xlat24;
    u_xlat24 = u_xlat24 * vs_TEXCOORD5.x + (-vs_TEXCOORD5.y);
    u_xlat2.xy = vs_TEXCOORD1.xz * vec2(0.00200000009, 0.00200000009) + vec2(0.5, 0.5);
    u_xlat36 = textureLod(sampler2D(_WaterDepthMap, sampler_WaterDepthMap_linear_clamp), u_xlat2.xy, 1.0).x;
    u_xlat36 = (-u_xlat36) + 1.0;
    u_xlat37 = _MaxDepth + _VeraslWater_DepthCamParams.x;
    u_xlat36 = u_xlat36 * u_xlat37 + (-_VeraslWater_DepthCamParams.x);
    u_xlat36 = u_xlat36 + vs_TEXCOORD1.y;
    u_xlat37 = float(1.0) / _MaxDepth;
    u_xlat2.xy = texture(sampler2D(_SurfaceMap, sampler_SurfaceMap), vs_TEXCOORD0.zw, _GlobalMipBias.x).xy;
    u_xlat2.xy = u_xlat2.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
    u_xlat26.xy = texture(sampler2D(_SurfaceMap, sampler_SurfaceMap), vs_TEXCOORD0.xy, _GlobalMipBias.x).xy;
    u_xlat26.xy = u_xlat26.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
    u_xlat2.xy = u_xlat26.xy * vec2(0.5, 0.5) + u_xlat2.xy;
    u_xlat3 = u_xlat24 * 0.00499999989;
    u_xlat26.x = u_xlat24 * 0.25 + 0.25;
    u_xlat26.x = clamp(u_xlat26.x, 0.0, 1.0);
    u_xlat2.xy = u_xlat26.xx * u_xlat2.xy;
    u_xlat2.xz = u_xlat2.xy * vec2(_BumpScale) + vs_NORMAL0.xz;
    u_xlat4.xz = (-u_xlat1.yz) + vec2(0.5, 0.5);
    u_xlat2.w = 0.0;
    u_xlat4.y = vs_NORMAL0.y;
    u_xlat2.xyz = u_xlat2.xwz + u_xlat4.xyz;
    u_xlat13.x = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat13.x = inversesqrt(u_xlat13.x);
    u_xlat2.xyz = u_xlat13.xxx * u_xlat2.xyz;
    u_xlat13.xy = (-u_xlat2.yy) * unity_MatrixVP[1].xz;
    u_xlat13.xy = unity_MatrixVP[0].xz * (-u_xlat2.xx) + u_xlat13.xy;
    u_xlat13.xy = unity_MatrixVP[2].xz * (-u_xlat2.zz) + u_xlat13.xy;
    u_xlat3 = u_xlat3;
    u_xlat3 = clamp(u_xlat3, 0.0, 1.0);
    u_xlat13.xy = u_xlat13.xy * vec2(u_xlat3) + u_xlat0.xy;
    u_xlat3 = texture(sampler2D(_CameraDepthTexture, sampler_CameraDepthTexture), u_xlat13.xy, _GlobalMipBias.x).x;
    u_xlat3 = _ZBufferParams.z * u_xlat3 + _ZBufferParams.w;
    u_xlat3 = float(1.0) / u_xlat3;
    u_xlat3 = u_xlat3 * vs_TEXCOORD5.x + (-vs_TEXCOORD5.y);
    u_xlatb15 = u_xlat3<0.0;
    u_xlat13.xy = (bool(u_xlatb15)) ? u_xlat0.xy : u_xlat13.xy;
    u_xlat24 = (u_xlatb15) ? u_xlat24 : u_xlat3;
    u_xlat3 = dot(u_xlat2.xyz, vs_TEXCOORD2.xyz);
    u_xlat3 = (-u_xlat3) + 1.0;
    u_xlat15.x = u_xlat3 * u_xlat3;
    u_xlat15.x = u_xlat15.x * u_xlat15.x;
    u_xlat3 = u_xlat15.x * u_xlat3;
    u_xlat3 = clamp(u_xlat3, 0.0, 1.0);
    u_xlat15.xyz = vs_TEXCOORD1.xyz + (-_CascadeShadowSplitSpheres0.xyz);
    u_xlat4.xyz = vs_TEXCOORD1.xyz + (-_CascadeShadowSplitSpheres1.xyz);
    u_xlat5.xyz = vs_TEXCOORD1.xyz + (-_CascadeShadowSplitSpheres2.xyz);
    u_xlat6.xyz = vs_TEXCOORD1.xyz + (-_CascadeShadowSplitSpheres3.xyz);
    u_xlat7.x = dot(u_xlat15.xyz, u_xlat15.xyz);
    u_xlat7.y = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat7.z = dot(u_xlat5.xyz, u_xlat5.xyz);
    u_xlat7.w = dot(u_xlat6.xyz, u_xlat6.xyz);
    u_xlatb4 = lessThan(u_xlat7, _CascadeShadowSplitSphereRadii);
    u_xlat5.x = u_xlatb4.x ? float(1.0) : 0.0;
    u_xlat5.y = u_xlatb4.y ? float(1.0) : 0.0;
    u_xlat5.z = u_xlatb4.z ? float(1.0) : 0.0;
    u_xlat5.w = u_xlatb4.w ? float(1.0) : 0.0;
;
    u_xlat15.x = (u_xlatb4.x) ? float(-1.0) : float(-0.0);
    u_xlat15.y = (u_xlatb4.y) ? float(-1.0) : float(-0.0);
    u_xlat15.z = (u_xlatb4.z) ? float(-1.0) : float(-0.0);
    u_xlat15.xyz = u_xlat15.xyz + u_xlat5.yzw;
    u_xlat5.yzw = max(u_xlat15.xyz, vec3(0.0, 0.0, 0.0));
    u_xlat15.x = dot(u_xlat5, vec4(4.0, 3.0, 2.0, 1.0));
    u_xlat15.x = (-u_xlat15.x) + 4.0;
    u_xlatu15 = uint(u_xlat15.x);
    u_xlati15 = int(u_xlatu15) << (2 & int(0x1F));
    u_xlat4.xyz = vs_TEXCOORD1.yyy * _MainLightWorldToShadow[(u_xlati15 + 1) / 4][(u_xlati15 + 1) % 4].xyz;
    u_xlat4.xyz = _MainLightWorldToShadow[u_xlati15 / 4][u_xlati15 % 4].xyz * vs_TEXCOORD1.xxx + u_xlat4.xyz;
    u_xlat4.xyz = _MainLightWorldToShadow[(u_xlati15 + 2) / 4][(u_xlati15 + 2) % 4].xyz * vs_TEXCOORD1.zzz + u_xlat4.xyz;
    u_xlat15.xyz = u_xlat4.xyz + _MainLightWorldToShadow[(u_xlati15 + 3) / 4][(u_xlati15 + 3) % 4].xyz;
    vec3 txVec0 = vec3(u_xlat15.xy,u_xlat15.z);
    u_xlat15.x = textureLod(sampler2DShadow(_MainLightShadowmapTexture, sampler_LinearClampCompare), txVec0, 0.0);
    u_xlat27.x = (-_MainLightShadowParams.x) + 1.0;
    u_xlat15.x = u_xlat15.x * _MainLightShadowParams.x + u_xlat27.x;
    u_xlatb27 = 0.0>=u_xlat15.z;
    u_xlatb39 = u_xlat15.z>=1.0;
    u_xlatb27 = u_xlatb39 || u_xlatb27;
    u_xlat15.x = (u_xlatb27) ? 1.0 : u_xlat15.x;
    u_xlat27.xy = u_xlat0.xy * _ScreenParams.xy;
    u_xlat27.xy = u_xlat27.xy * _DitherPattern_TexelSize.xy;
    u_xlat4.xy = vec2(u_xlat24) * vec2(20.0, 0.25);
    u_xlat5.xyz = u_xlat4.yyy * (-vs_TEXCOORD2.xyz);
    u_xlat6.x = fract(_Time.x);
    u_xlat6.y = fract((-_Time.z));
    u_xlat28.xy = u_xlat27.xy;
    u_xlat41 = 0.0;
    for(uint u_xlatu_loop_1 = 0u ; u_xlatu_loop_1<4u ; u_xlatu_loop_1++)
    {
        u_xlat28.xy = u_xlat6.xy + u_xlat28.xy;
        u_xlat42 = float(u_xlatu_loop_1);
        u_xlat7.xy = vec2(u_xlat42) * _ScreenParams.xy + u_xlat28.xy;
        u_xlat7.xyz = texture(sampler2D(_DitherPattern, sampler_DitherPattern), u_xlat7.xy, _GlobalMipBias.x).xyz;
        u_xlat7.xyz = u_xlat7.xzy * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
        u_xlat7.xyw = u_xlat4.yyy * u_xlat7.xyz;
        u_xlat7.xyw = vec3(u_xlat42) * u_xlat7.xyw;
        u_xlat7.xyw = u_xlat7.xyw * vec3(0.100000001, 0.100000001, 0.100000001) + vs_TEXCOORD1.xyz;
        u_xlat42 = u_xlat42 + u_xlat7.z;
        u_xlat7.xyz = u_xlat5.xyz * vec3(u_xlat42) + u_xlat7.xyw;
        u_xlat8.xyz = u_xlat7.xyz + (-_CascadeShadowSplitSpheres0.xyz);
        u_xlat9.xyz = u_xlat7.xyz + (-_CascadeShadowSplitSpheres1.xyz);
        u_xlat10.xyz = u_xlat7.xyz + (-_CascadeShadowSplitSpheres2.xyz);
        u_xlat11.xyz = u_xlat7.xyz + (-_CascadeShadowSplitSpheres3.xyz);
        u_xlat8.x = dot(u_xlat8.xyz, u_xlat8.xyz);
        u_xlat8.y = dot(u_xlat9.xyz, u_xlat9.xyz);
        u_xlat8.z = dot(u_xlat10.xyz, u_xlat10.xyz);
        u_xlat8.w = dot(u_xlat11.xyz, u_xlat11.xyz);
        u_xlatb8 = lessThan(u_xlat8, _CascadeShadowSplitSphereRadii);
        u_xlat9.x = u_xlatb8.x ? float(1.0) : 0.0;
        u_xlat9.y = u_xlatb8.y ? float(1.0) : 0.0;
        u_xlat9.z = u_xlatb8.z ? float(1.0) : 0.0;
        u_xlat9.w = u_xlatb8.w ? float(1.0) : 0.0;
;
        u_xlat8.x = (u_xlatb8.x) ? float(-1.0) : float(-0.0);
        u_xlat8.y = (u_xlatb8.y) ? float(-1.0) : float(-0.0);
        u_xlat8.z = (u_xlatb8.z) ? float(-1.0) : float(-0.0);
        u_xlat8.xyz = u_xlat8.xyz + u_xlat9.yzw;
        u_xlat9.yzw = max(u_xlat8.xyz, vec3(0.0, 0.0, 0.0));
        u_xlat42 = dot(u_xlat9, vec4(4.0, 3.0, 2.0, 1.0));
        u_xlat42 = (-u_xlat42) + 4.0;
        u_xlatu42 = uint(u_xlat42);
        u_xlati42 = int(u_xlatu42) << (2 & int(0x1F));
        u_xlat8.xyz = u_xlat7.yyy * _MainLightWorldToShadow[(u_xlati42 + 1) / 4][(u_xlati42 + 1) % 4].xyz;
        u_xlat7.xyw = _MainLightWorldToShadow[u_xlati42 / 4][u_xlati42 % 4].xyz * u_xlat7.xxx + u_xlat8.xyz;
        u_xlat7.xyz = _MainLightWorldToShadow[(u_xlati42 + 2) / 4][(u_xlati42 + 2) % 4].xyz * u_xlat7.zzz + u_xlat7.xyw;
        u_xlat7.xyz = u_xlat7.xyz + _MainLightWorldToShadow[(u_xlati42 + 3) / 4][(u_xlati42 + 3) % 4].xyz;
        vec3 txVec1 = vec3(u_xlat7.xy,u_xlat7.z);
        u_xlat42 = textureLod(sampler2DShadow(_MainLightShadowmapTexture, sampler_LinearClampCompare), txVec1, 0.0);
        u_xlat41 = u_xlat41 + u_xlat42;
    }
    u_xlat5.xyz = vs_TEXCOORD1.xyz * vec3(1.10000002, 1.10000002, 1.10000002);
    u_xlat6.xyz = vs_TEXCOORD1.xyz * vec3(1.10000002, 1.10000002, 1.10000002) + (-_CascadeShadowSplitSpheres0.xyz);
    u_xlat7.xyz = vs_TEXCOORD1.xyz * vec3(1.10000002, 1.10000002, 1.10000002) + (-_CascadeShadowSplitSpheres1.xyz);
    u_xlat8.xyz = vs_TEXCOORD1.xyz * vec3(1.10000002, 1.10000002, 1.10000002) + (-_CascadeShadowSplitSpheres2.xyz);
    u_xlat9.xyz = vs_TEXCOORD1.xyz * vec3(1.10000002, 1.10000002, 1.10000002) + (-_CascadeShadowSplitSpheres3.xyz);
    u_xlat6.x = dot(u_xlat6.xyz, u_xlat6.xyz);
    u_xlat6.y = dot(u_xlat7.xyz, u_xlat7.xyz);
    u_xlat6.z = dot(u_xlat8.xyz, u_xlat8.xyz);
    u_xlat6.w = dot(u_xlat9.xyz, u_xlat9.xyz);
    u_xlatb6 = lessThan(u_xlat6, _CascadeShadowSplitSphereRadii);
    u_xlat7.x = u_xlatb6.x ? float(1.0) : 0.0;
    u_xlat7.y = u_xlatb6.y ? float(1.0) : 0.0;
    u_xlat7.z = u_xlatb6.z ? float(1.0) : 0.0;
    u_xlat7.w = u_xlatb6.w ? float(1.0) : 0.0;
;
    u_xlat6.x = (u_xlatb6.x) ? float(-1.0) : float(-0.0);
    u_xlat6.y = (u_xlatb6.y) ? float(-1.0) : float(-0.0);
    u_xlat6.z = (u_xlatb6.z) ? float(-1.0) : float(-0.0);
    u_xlat6.xyz = u_xlat6.xyz + u_xlat7.yzw;
    u_xlat7.yzw = max(u_xlat6.xyz, vec3(0.0, 0.0, 0.0));
    u_xlat27.x = dot(u_xlat7, vec4(4.0, 3.0, 2.0, 1.0));
    u_xlat27.x = (-u_xlat27.x) + 4.0;
    u_xlatu27 = uint(u_xlat27.x);
    u_xlati27 = int(u_xlatu27) << (2 & int(0x1F));
    u_xlat39 = u_xlat5.y * _MainLightWorldToShadow[(u_xlati27 + 1) / 4][(u_xlati27 + 1) % 4].z;
    u_xlat39 = _MainLightWorldToShadow[u_xlati27 / 4][u_xlati27 % 4].z * u_xlat5.x + u_xlat39;
    u_xlat39 = _MainLightWorldToShadow[(u_xlati27 + 2) / 4][(u_xlati27 + 2) % 4].z * u_xlat5.z + u_xlat39;
    u_xlat27.x = u_xlat39 + _MainLightWorldToShadow[(u_xlati27 + 3) / 4][(u_xlati27 + 3) % 4].z;
    u_xlatb39 = 0.0>=u_xlat27.x;
    u_xlatb27 = u_xlat27.x>=1.0;
    u_xlatb27 = u_xlatb27 || u_xlatb39;
    u_xlat39 = u_xlat41 * 0.25;
    u_xlat27.x = (u_xlatb27) ? 1.0 : u_xlat39;
    u_xlat2.w = 1.0;
    u_xlat5.x = dot(unity_SHAr, u_xlat2);
    u_xlat5.y = dot(unity_SHAg, u_xlat2);
    u_xlat5.z = dot(unity_SHAb, u_xlat2);
    u_xlat6 = u_xlat2.yzzx * u_xlat2.xyzz;
    u_xlat7.x = dot(unity_SHBr, u_xlat6);
    u_xlat7.y = dot(unity_SHBg, u_xlat6);
    u_xlat7.z = dot(unity_SHBb, u_xlat6);
    u_xlat38 = u_xlat2.y * u_xlat2.y;
    u_xlat38 = u_xlat2.x * u_xlat2.x + (-u_xlat38);
    u_xlat6.xyz = unity_SHC.xyz * vec3(u_xlat38) + u_xlat7.xyz;
    u_xlat5.xyz = u_xlat5.xyz + u_xlat6.xyz;
    u_xlat5.xyz = max(u_xlat5.xyz, vec3(0.0, 0.0, 0.0));
    u_xlat38 = dot(vs_TEXCOORD2.xyz, (-_MainLightPosition.xyz));
    u_xlat38 = u_xlat38 * vs_TEXCOORD5.z;
    u_xlat39 = u_xlat38 * u_xlat38;
    u_xlat38 = u_xlat38 * u_xlat39;
    u_xlat38 = clamp(u_xlat38, 0.0, 1.0);
    u_xlat38 = u_xlat38 * 5.0;
    u_xlat6.xyz = vec3(u_xlat38) * _MainLightColor.xyz;
    u_xlat6.xyz = _MainLightPosition.yyy * _MainLightColor.xyz + u_xlat6.xyz;
    u_xlat6.xyz = u_xlat6.xyz * u_xlat27.xxx + u_xlat5.xyz;
    u_xlat7.xyz = texture(sampler2D(_FoamMap, sampler_FoamMap), vs_TEXCOORD0.zw, _GlobalMipBias.x).xyz;
    u_xlat4.x = u_xlat4.x;
    u_xlat4.x = clamp(u_xlat4.x, 0.0, 1.0);
    u_xlat38 = vs_TEXCOORD5.z + -0.375;
    u_xlat38 = clamp(u_xlat38, 0.0, 1.0);
    u_xlat39 = (-u_xlat24) * 4.0 + 1.0;
    u_xlat39 = clamp(u_xlat39, 0.0, 1.0);
    u_xlat36 = min(u_xlat36, u_xlat24);
    u_xlat36 = (-u_xlat36) * 0.5 + 0.75;
    u_xlat36 = u_xlat39 * 0.5 + u_xlat36;
    u_xlat36 = clamp(u_xlat36, 0.0, 1.0);
    u_xlat36 = u_xlat4.x * u_xlat36;
    u_xlat36 = max(u_xlat36, u_xlat38);
    u_xlat1.x = u_xlat1.x + u_xlat1.x;
    u_xlat8.x = max(u_xlat36, u_xlat1.x);
    u_xlat8.y = 0.660000026;
    u_xlat4.xzw = texture(sampler2D(_AbsorptionScatteringRamp, sampler_AbsorptionScatteringRamp), u_xlat8.xy, _GlobalMipBias.x).xyz;
    u_xlat4.xzw = u_xlat4.xzw * u_xlat7.xyz;
    u_xlat36 = dot(u_xlat4.xzw, u_xlat4.xzw);
    u_xlat36 = sqrt(u_xlat36);
    u_xlat36 = u_xlat36 * 1.5 + -0.100000001;
    u_xlat36 = clamp(u_xlat36, 0.0, 1.0);
    u_xlat4.xzw = u_xlat15.xxx * _MainLightColor.xyz + u_xlat5.xyz;
    u_xlat5.xyz = vs_TEXCOORD2.xyz + _MainLightPosition.xyz;
    u_xlat1.x = dot(u_xlat5.xyz, u_xlat5.xyz);
    u_xlat1.x = max(u_xlat1.x, 1.17549435e-38);
    u_xlat1.x = inversesqrt(u_xlat1.x);
    u_xlat5.xyz = u_xlat1.xxx * u_xlat5.xyz;
    u_xlat1.x = dot(u_xlat2.xyz, u_xlat5.xyz);
    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
    u_xlat38 = dot(_MainLightPosition.xyz, u_xlat5.xyz);
    u_xlat38 = clamp(u_xlat38, 0.0, 1.0);
    u_xlat1.x = u_xlat1.x * u_xlat1.x;
    u_xlat1.x = u_xlat1.x * -0.999938965 + 1.00001001;
    u_xlat38 = u_xlat38 * u_xlat38;
    u_xlat1.x = u_xlat1.x * u_xlat1.x;
    u_xlat38 = max(u_xlat38, 0.100000001);
    u_xlat1.x = u_xlat1.x * u_xlat38;
    u_xlat1.x = u_xlat1.x * 2.03125;
    u_xlat1.x = 6.10351562e-05 / u_xlat1.x;
    u_xlat1.x = u_xlat27.x * u_xlat1.x;
    u_xlat1.x = u_xlat1.x * 0.0399999991;
    u_xlat15.xyz = u_xlat1.xxx * _MainLightColor.xyz;
    u_xlat1.x = min(_AdditionalLightsCount.x, unity_LightData.y);
    u_xlatu1 =  uint(int(u_xlat1.x));
    u_xlat5.xyz = u_xlat6.xyz;
    u_xlat7.xyz = u_xlat15.xyz;
    for(uint u_xlatu_loop_2 = 0u ; u_xlatu_loop_2<u_xlatu1 ; u_xlatu_loop_2++)
    {
        u_xlatu41 = u_xlatu_loop_2 >> (2u & uint(0x1F));
        u_xlati42 = int(u_xlatu_loop_2 & 3u);
        u_xlat41 = dot(unity_LightIndices[int(u_xlatu41)], uintBitsToFloat(ImmCB_0[u_xlati42]));
        u_xlati41 = int(u_xlat41);
        u_xlat8.xyz = (-vs_TEXCOORD1.xyz) * _AdditionalLightsPosition[u_xlati41].www + _AdditionalLightsPosition[u_xlati41].xyz;
        u_xlat42 = dot(u_xlat8.xyz, u_xlat8.xyz);
        u_xlat42 = max(u_xlat42, 6.10351562e-05);
        u_xlat43 = inversesqrt(u_xlat42);
        u_xlat9.xyz = vec3(u_xlat43) * u_xlat8.xyz;
        u_xlat44 = float(1.0) / float(u_xlat42);
        u_xlat42 = u_xlat42 * _AdditionalLightsAttenuation[u_xlati41].x;
        u_xlat42 = (-u_xlat42) * u_xlat42 + 1.0;
        u_xlat42 = max(u_xlat42, 0.0);
        u_xlat42 = u_xlat42 * u_xlat42;
        u_xlat42 = u_xlat42 * u_xlat44;
        u_xlat44 = dot(_AdditionalLightsSpotDir[u_xlati41].xyz, u_xlat9.xyz);
        u_xlat44 = u_xlat44 * _AdditionalLightsAttenuation[u_xlati41].z + _AdditionalLightsAttenuation[u_xlati41].w;
        u_xlat44 = clamp(u_xlat44, 0.0, 1.0);
        u_xlat44 = u_xlat44 * u_xlat44;
        u_xlat42 = u_xlat42 * u_xlat44;
        u_xlat44 = dot(u_xlat2.xyz, u_xlat9.xyz);
        u_xlat44 = clamp(u_xlat44, 0.0, 1.0);
        u_xlat44 = u_xlat42 * u_xlat44;
        u_xlat10.xyz = vec3(u_xlat44) * _AdditionalLightsColor[u_xlati41].xyz;
        u_xlat8.xyz = u_xlat8.xyz * vec3(u_xlat43) + vs_TEXCOORD2.xyz;
        u_xlat43 = dot(u_xlat8.xyz, u_xlat8.xyz);
        u_xlat43 = max(u_xlat43, 1.17549435e-38);
        u_xlat43 = inversesqrt(u_xlat43);
        u_xlat8.xyz = vec3(u_xlat43) * u_xlat8.xyz;
        u_xlat43 = dot(u_xlat2.xyz, u_xlat8.xyz);
        u_xlat43 = clamp(u_xlat43, 0.0, 1.0);
        u_xlat8.x = dot(u_xlat9.xyz, u_xlat8.xyz);
        u_xlat8.x = clamp(u_xlat8.x, 0.0, 1.0);
        u_xlat43 = u_xlat43 * u_xlat43;
        u_xlat43 = u_xlat43 * -0.999938965 + 1.00001001;
        u_xlat8.x = u_xlat8.x * u_xlat8.x;
        u_xlat43 = u_xlat43 * u_xlat43;
        u_xlat8.x = max(u_xlat8.x, 0.100000001);
        u_xlat43 = u_xlat43 * u_xlat8.x;
        u_xlat43 = u_xlat43 * 2.03125;
        u_xlat43 = 6.10351562e-05 / u_xlat43;
        u_xlat43 = u_xlat43 * 0.0399999991;
        u_xlat7.xyz = vec3(u_xlat43) * u_xlat10.xyz + u_xlat7.xyz;
        u_xlat5.xyz = vec3(u_xlat42) * _AdditionalLightsColor[u_xlati41].xyz + u_xlat5.xyz;
    }
    u_xlat6.x = u_xlat37 * u_xlat24;
    u_xlat6.y = float(0.375);
    u_xlat6.z = float(0.0);
    u_xlat15.xyz = texture(sampler2D(_AbsorptionScatteringRamp, sampler_AbsorptionScatteringRamp), u_xlat6.xy, _GlobalMipBias.x).xyz;
    u_xlat0.xy = u_xlat2.zx * vec2(0.0199999996, 0.150000006) + u_xlat0.xy;
    u_xlat0.xyz = textureLod(sampler2D(_PlanarReflectionTexture, sampler_ScreenTextures_linear_clamp), u_xlat0.xy, 0.0).xyz;
    u_xlat1.xyz = textureLod(sampler2D(_CameraOpaqueTexture, sampler_CameraOpaqueTexture_linear_clamp), u_xlat13.xy, u_xlat4.y).xyz;
    u_xlat2.xyz = texture(sampler2D(_AbsorptionScatteringRamp, sampler_AbsorptionScatteringRamp), u_xlat6.xz, _GlobalMipBias.x).xyz;
    u_xlat6.xyz = u_xlat1.xyz * u_xlat2.xyz;
    u_xlat0.xyz = (-u_xlat1.xyz) * u_xlat2.xyz + u_xlat0.xyz;
    u_xlat0.xyz = vec3(u_xlat3) * u_xlat0.xyz + u_xlat6.xyz;
    u_xlat0.xyz = u_xlat5.xyz * u_xlat15.xyz + u_xlat0.xyz;
    u_xlat0.xyz = u_xlat7.xyz + u_xlat0.xyz;
    u_xlat1.xyz = vec3(u_xlat36) * u_xlat4.xzw + (-u_xlat0.xyz);
    u_xlat0.xyz = vec3(u_xlat36) * u_xlat1.xyz + u_xlat0.xyz;
    u_xlat36 = vs_TEXCOORD4.x * (-vs_TEXCOORD4.x);
    u_xlat36 = exp2(u_xlat36);
    u_xlat0.xyz = u_xlat0.xyz + (-unity_FogColor.xyz);
    SV_Target0.xyz = vec3(u_xlat36) * u_xlat0.xyz + unity_FogColor.xyz;
    SV_Target0.w = 1.0;
    return;
}

