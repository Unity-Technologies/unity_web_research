struct PGlobals {
  x_ScaledScreenParams : vec4<f32>,
  x_GlobalMipBias : vec2<f32>,
  @size(8)
  padding : u32,
  x_MainLightPosition : vec4<f32>,
  x_MainLightColor : vec4<f32>,
  x_AmbientOcclusionParam : vec4<f32>,
  x_AdditionalLightsCount : vec4<f32>,
  x_WorldSpaceCameraPos : vec3<f32>,
  @size(4)
  padding_1 : u32,
  x_ProjectionParams : vec4<f32>,
  unity_OrthoParams : vec4<f32>,
  x_ScaleBiasRt : vec4<f32>,
  unity_FogParams : vec4<f32>,
  unity_FogColor : vec4<f32>,
  unity_MatrixV : mat4x4<f32>,
}

struct UnityPerMaterial {
  Texture2D_25A083BC_TexelSize : vec4<f32>,
  Texture2D_6EEDD32E_TexelSize : vec4<f32>,
  Texture2D_E9EC22CC_TexelSize : vec4<f32>,
  x_Hue : f32,
}

type Arr = array<vec4<f32>, 2u>;

struct UnityPerDraw {
  unity_ObjectToWorld : mat4x4<f32>,
  unity_WorldToObject : mat4x4<f32>,
  unity_LODFade : vec4<f32>,
  unity_WorldTransformParams : vec4<f32>,
  unity_RenderingLayer : vec4<f32>,
  unity_LightData : vec4<f32>,
  unity_LightIndices : Arr,
  unity_ProbesOcclusion : vec4<f32>,
  unity_SpecCube0_HDR : vec4<f32>,
  unity_SpecCube1_HDR : vec4<f32>,
  unity_SpecCube0_BoxMax : vec4<f32>,
  unity_SpecCube0_BoxMin : vec4<f32>,
  unity_SpecCube0_ProbePosition : vec4<f32>,
  unity_SpecCube1_BoxMax : vec4<f32>,
  unity_SpecCube1_BoxMin : vec4<f32>,
  unity_SpecCube1_ProbePosition : vec4<f32>,
  unity_LightmapST : vec4<f32>,
  unity_DynamicLightmapST : vec4<f32>,
  unity_SHAr : vec4<f32>,
  unity_SHAg : vec4<f32>,
  unity_SHAb : vec4<f32>,
  unity_SHBr : vec4<f32>,
  unity_SHBg : vec4<f32>,
  unity_SHBb : vec4<f32>,
  unity_SHC : vec4<f32>,
  unity_RendererBounds_Min : vec4<f32>,
  unity_RendererBounds_Max : vec4<f32>,
  unity_MatrixPreviousM : mat4x4<f32>,
  unity_MatrixPreviousMI : mat4x4<f32>,
  unity_MotionVectorsParams : vec4<f32>,
  unity_SpriteColor : vec4<f32>,
  unity_SpriteProps : vec4<f32>,
}

type Arr_1 = array<mat4x4<f32>, 5u>;

struct MainLightShadows {
  x_MainLightWorldToShadow : Arr_1,
  x_CascadeShadowSplitSpheres0 : vec4<f32>,
  x_CascadeShadowSplitSpheres1 : vec4<f32>,
  x_CascadeShadowSplitSpheres2 : vec4<f32>,
  x_CascadeShadowSplitSpheres3 : vec4<f32>,
  x_CascadeShadowSplitSphereRadii : vec4<f32>,
  x_MainLightShadowOffset0 : vec4<f32>,
  x_MainLightShadowOffset1 : vec4<f32>,
  x_MainLightShadowParams : vec4<f32>,
  x_MainLightShadowmapSize : vec4<f32>,
}

type Arr_2 = array<vec4<f32>, 256u>;

type Arr_3 = array<vec4<f32>, 256u>;

type Arr_4 = array<vec4<f32>, 256u>;

type Arr_5 = array<vec4<f32>, 256u>;

type Arr_6 = array<vec4<f32>, 256u>;

struct strided_arr {
  @size(16)
  el : f32,
}

type Arr_7 = array<strided_arr, 256u>;

struct AdditionalLights {
  x_AdditionalLightsPosition : Arr_6,
  x_AdditionalLightsColor : Arr_6,
  x_AdditionalLightsAttenuation : Arr_6,
  x_AdditionalLightsSpotDir : Arr_6,
  x_AdditionalLightsOcclusionProbes : Arr_6,
  x_AdditionalLightsLayerMasks : Arr_7,
}

var<private> gl_FragCoord : vec4<f32>;

@group(0) @binding(4) var Texture2D_25A083BC : texture_2d<f32>;

@group(0) @binding(11) var samplerTexture2D_25A083BC : sampler;

var<private> vs_INTERP3 : vec4<f32>;

@group(1) @binding(0) var<uniform> x_44 : PGlobals;

@group(1) @binding(4) var<uniform> x_190 : UnityPerMaterial;

@group(0) @binding(6) var Texture2D_E9EC22CC : texture_2d<f32>;

@group(0) @binding(13) var samplerTexture2D_E9EC22CC : sampler;

@group(0) @binding(5) var Texture2D_6EEDD32E : texture_2d<f32>;

@group(0) @binding(12) var samplerTexture2D_6EEDD32E : sampler;

var<private> vs_INTERP2 : vec4<f32>;

@group(1) @binding(2) var<uniform> x_359 : UnityPerDraw;

var<private> vs_INTERP1 : vec3<f32>;

var<private> vs_INTERP0 : vec3<f32>;

@group(0) @binding(1) var unity_Lightmap : texture_2d<f32>;

@group(0) @binding(8) var samplerunity_Lightmap : sampler;

var<private> vs_INTERP4 : vec2<f32>;

@group(0) @binding(2) var x_ScreenSpaceOcclusionTexture : texture_2d<f32>;

@group(0) @binding(9) var sampler_ScreenSpaceOcclusionTexture : sampler;

@group(1) @binding(3) var<uniform> x_686 : MainLightShadows;

var<private> vs_INTERP8 : vec4<f32>;

@group(0) @binding(3) var x_MainLightShadowmapTexture : texture_depth_2d;

@group(0) @binding(10) var sampler_MainLightShadowmapTexture : sampler_comparison;

@group(0) @binding(0) var unity_SpecCube0 : texture_cube<f32>;

@group(0) @binding(7) var samplerunity_SpecCube0 : sampler;

@group(1) @binding(1) var<uniform> x_2291 : AdditionalLights;

var<private> SV_Target0 : vec4<f32>;

fn main_1() {
  var hlslcc_FragCoord : vec4<f32>;
  var u_xlat0 : vec4<f32>;
  var u_xlatb1 : bool;
  var u_xlat1 : vec4<f32>;
  var u_xlat2 : vec4<f32>;
  var u_xlat3 : vec4<f32>;
  var u_xlatb21 : bool;
  var u_xlat21 : f32;
  var u_xlat42 : f32;
  var x_146 : f32;
  var u_xlat22 : vec3<f32>;
  var u_xlatb63 : bool;
  var x_211 : f32;
  var x_220 : f32;
  var u_xlat63 : f32;
  var u_xlatb43 : vec2<bool>;
  var u_xlat43 : vec2<f32>;
  var u_xlat64 : f32;
  var u_xlat4 : vec3<f32>;
  var x_487 : vec3<f32>;
  var u_xlat5 : vec3<f32>;
  var u_xlat65 : f32;
  var u_xlat6 : vec3<f32>;
  var u_xlat23 : f32;
  var u_xlat66 : f32;
  var u_xlat67 : f32;
  var u_xlat44 : f32;
  var u_xlatb67 : bool;
  var u_xlat7 : vec4<f32>;
  var txVec0 : vec3<f32>;
  var u_xlat8 : vec4<f32>;
  var txVec1 : vec3<f32>;
  var txVec2 : vec3<f32>;
  var txVec3 : vec3<f32>;
  var u_xlatb26 : bool;
  var u_xlat26 : vec3<f32>;
  var u_xlat9 : vec4<f32>;
  var u_xlat49 : vec2<f32>;
  var u_xlat51 : vec2<f32>;
  var u_xlat10 : vec4<f32>;
  var u_xlat11 : vec4<f32>;
  var u_xlat12 : vec4<f32>;
  var u_xlat13 : vec4<f32>;
  var u_xlat14 : vec4<f32>;
  var u_xlat15 : vec4<f32>;
  var txVec4 : vec3<f32>;
  var u_xlat47 : f32;
  var txVec5 : vec3<f32>;
  var u_xlat68 : f32;
  var txVec6 : vec3<f32>;
  var txVec7 : vec3<f32>;
  var txVec8 : vec3<f32>;
  var txVec9 : vec3<f32>;
  var txVec10 : vec3<f32>;
  var txVec11 : vec3<f32>;
  var txVec12 : vec3<f32>;
  var u_xlat55 : vec2<f32>;
  var u_xlat16 : vec4<f32>;
  var u_xlat29 : vec3<f32>;
  var u_xlat17 : vec2<f32>;
  var u_xlat52 : vec2<f32>;
  var u_xlat18 : vec4<f32>;
  var u_xlat19 : vec4<f32>;
  var u_xlat20 : vec4<f32>;
  var txVec13 : vec3<f32>;
  var txVec14 : vec3<f32>;
  var u_xlat69 : f32;
  var txVec15 : vec3<f32>;
  var txVec16 : vec3<f32>;
  var txVec17 : vec3<f32>;
  var txVec18 : vec3<f32>;
  var txVec19 : vec3<f32>;
  var txVec20 : vec3<f32>;
  var txVec21 : vec3<f32>;
  var txVec22 : vec3<f32>;
  var txVec23 : vec3<f32>;
  var txVec24 : vec3<f32>;
  var txVec25 : vec3<f32>;
  var txVec26 : vec3<f32>;
  var txVec27 : vec3<f32>;
  var txVec28 : vec3<f32>;
  var txVec29 : vec3<f32>;
  var u_xlatb47 : bool;
  var u_xlat70 : f32;
  var u_xlatu64 : u32;
  var u_xlatu_loop_1 : u32;
  var u_xlatu65 : u32;
  var u_xlati67 : i32;
  var indexable : array<vec4<u32>, 4u>;
  var u_xlati65 : i32;
  var u_xlat_precise_vec4 : vec4<f32>;
  var u_xlat_precise_ivec4 : vec4<i32>;
  var u_xlat_precise_bvec4 : vec4<bool>;
  var u_xlat_precise_uvec4 : vec4<u32>;
  let x_13 : vec4<f32> = gl_FragCoord;
  let x_14 : vec3<f32> = vec3<f32>(x_13.x, x_13.y, x_13.z);
  let x_20 : f32 = gl_FragCoord.w;
  hlslcc_FragCoord = vec4<f32>(x_14.x, x_14.y, x_14.z, (1.0f / x_20));
  let x_39 : vec4<f32> = vs_INTERP3;
  let x_50 : f32 = x_44.x_GlobalMipBias.x;
  let x_51 : vec4<f32> = textureSampleBias(Texture2D_25A083BC, samplerTexture2D_25A083BC, vec2<f32>(x_39.x, x_39.y), x_50);
  u_xlat0 = x_51;
  let x_58 : f32 = u_xlat0.y;
  let x_61 : f32 = u_xlat0.z;
  u_xlatb1 = (x_58 >= x_61);
  let x_64 : bool = u_xlatb1;
  u_xlat1.x = select(0.0f, 1.0f, x_64);
  let x_69 : vec4<f32> = u_xlat0;
  let x_70 : vec2<f32> = vec2<f32>(x_69.z, x_69.y);
  let x_71 : vec4<f32> = u_xlat2;
  u_xlat2 = vec4<f32>(x_70.x, x_70.y, x_71.z, x_71.w);
  u_xlat2.z = -1.0f;
  u_xlat2.w = 0.666666687f;
  let x_78 : vec4<f32> = u_xlat0;
  let x_80 : vec4<f32> = u_xlat2;
  let x_83 : vec2<f32> = (vec2<f32>(x_78.y, x_78.z) + -(vec2<f32>(x_80.x, x_80.y)));
  let x_84 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_83.x, x_83.y, x_84.z, x_84.w);
  u_xlat3.z = 1.0f;
  u_xlat3.w = -1.0f;
  let x_88 : vec4<f32> = u_xlat1;
  let x_90 : vec4<f32> = u_xlat3;
  let x_92 : vec4<f32> = u_xlat2;
  u_xlat1 = ((vec4<f32>(x_88.x, x_88.x, x_88.x, x_88.x) * x_90) + x_92);
  let x_96 : f32 = u_xlat0.x;
  let x_98 : f32 = u_xlat1.x;
  u_xlatb21 = (x_96 >= x_98);
  let x_101 : bool = u_xlatb21;
  u_xlat21 = select(0.0f, 1.0f, x_101);
  let x_103 : vec4<f32> = u_xlat1;
  let x_104 : vec3<f32> = vec3<f32>(x_103.x, x_103.y, x_103.w);
  let x_105 : vec4<f32> = u_xlat2;
  u_xlat2 = vec4<f32>(x_104.x, x_104.y, x_104.z, x_105.w);
  let x_108 : f32 = u_xlat0.x;
  u_xlat2.w = x_108;
  let x_110 : vec4<f32> = u_xlat2;
  let x_111 : vec3<f32> = vec3<f32>(x_110.w, x_110.y, x_110.x);
  let x_112 : vec4<f32> = u_xlat1;
  u_xlat1 = vec4<f32>(x_111.x, x_111.y, x_112.z, x_111.z);
  let x_114 : vec4<f32> = u_xlat2;
  let x_116 : vec4<f32> = u_xlat1;
  u_xlat1 = (-(x_114) + x_116);
  let x_118 : f32 = u_xlat21;
  let x_120 : vec4<f32> = u_xlat1;
  let x_122 : vec4<f32> = u_xlat2;
  u_xlat1 = ((vec4<f32>(x_118, x_118, x_118, x_118) * x_120) + x_122);
  let x_125 : f32 = u_xlat1.y;
  let x_127 : f32 = u_xlat1.w;
  u_xlat0.x = min(x_125, x_127);
  let x_131 : f32 = u_xlat0.x;
  let x_134 : f32 = u_xlat1.x;
  u_xlat0.x = (-(x_131) + x_134);
  let x_138 : f32 = u_xlat0.x;
  u_xlatb21 = (x_138 == 0.0f);
  let x_142 : f32 = u_xlat1.x;
  u_xlat42 = (x_142 + 1.00000001e-10f);
  let x_145 : bool = u_xlatb21;
  if (x_145) {
    let x_150 : f32 = u_xlat1.x;
    x_146 = x_150;
  } else {
    let x_152 : f32 = u_xlat42;
    x_146 = x_152;
  }
  let x_153 : f32 = x_146;
  u_xlat21 = x_153;
  let x_155 : f32 = u_xlat1.y;
  let x_158 : f32 = u_xlat1.w;
  u_xlat1.x = (-(x_155) + x_158);
  let x_164 : f32 = u_xlat0.x;
  u_xlat22.x = ((x_164 * 6.0f) + 1.00000001e-10f);
  let x_170 : f32 = u_xlat1.x;
  let x_172 : f32 = u_xlat22.x;
  u_xlat1.x = (x_170 / x_172);
  let x_176 : f32 = u_xlat1.x;
  let x_178 : f32 = u_xlat1.z;
  u_xlat1.x = (x_176 + x_178);
  let x_182 : f32 = u_xlat0.x;
  let x_183 : f32 = u_xlat42;
  u_xlat0.x = (x_182 / x_183);
  let x_187 : f32 = u_xlat0.w;
  let x_193 : f32 = x_190.x_Hue;
  let x_196 : f32 = u_xlat1.x;
  u_xlat42 = ((x_187 * x_193) + abs(x_196));
  let x_200 : f32 = u_xlat42;
  u_xlatb63 = (x_200 < 0.0f);
  let x_202 : f32 = u_xlat42;
  u_xlatb1 = (1.0f < x_202);
  let x_204 : f32 = u_xlat42;
  let x_207 : vec2<f32> = (vec2<f32>(x_204, x_204) + vec2<f32>(1.0f, -1.0f));
  let x_208 : vec3<f32> = u_xlat22;
  u_xlat22 = vec3<f32>(x_207.x, x_207.y, x_208.z);
  let x_210 : bool = u_xlatb1;
  if (x_210) {
    let x_215 : f32 = u_xlat22.y;
    x_211 = x_215;
  } else {
    let x_217 : f32 = u_xlat42;
    x_211 = x_217;
  }
  let x_218 : f32 = x_211;
  u_xlat42 = x_218;
  let x_219 : bool = u_xlatb63;
  if (x_219) {
    let x_224 : f32 = u_xlat22.x;
    x_220 = x_224;
  } else {
    let x_226 : f32 = u_xlat42;
    x_220 = x_226;
  }
  let x_227 : f32 = x_220;
  u_xlat42 = x_227;
  let x_228 : f32 = u_xlat42;
  let x_232 : vec3<f32> = (vec3<f32>(x_228, x_228, x_228) + vec3<f32>(1.0f, 0.666666687f, 0.333333343f));
  let x_233 : vec4<f32> = u_xlat1;
  u_xlat1 = vec4<f32>(x_232.x, x_232.y, x_232.z, x_233.w);
  let x_235 : vec4<f32> = u_xlat1;
  let x_237 : vec3<f32> = fract(vec3<f32>(x_235.x, x_235.y, x_235.z));
  let x_238 : vec4<f32> = u_xlat1;
  u_xlat1 = vec4<f32>(x_237.x, x_237.y, x_237.z, x_238.w);
  let x_240 : vec4<f32> = u_xlat1;
  let x_246 : vec3<f32> = ((vec3<f32>(x_240.x, x_240.y, x_240.z) * vec3<f32>(6.0f, 6.0f, 6.0f)) + vec3<f32>(-3.0f, -3.0f, -3.0f));
  let x_247 : vec4<f32> = u_xlat1;
  u_xlat1 = vec4<f32>(x_246.x, x_246.y, x_246.z, x_247.w);
  let x_249 : vec4<f32> = u_xlat1;
  let x_253 : vec3<f32> = (abs(vec3<f32>(x_249.x, x_249.y, x_249.z)) + vec3<f32>(-1.0f, -1.0f, -1.0f));
  let x_254 : vec4<f32> = u_xlat1;
  u_xlat1 = vec4<f32>(x_253.x, x_253.y, x_253.z, x_254.w);
  let x_256 : vec4<f32> = u_xlat1;
  let x_260 : vec3<f32> = clamp(vec3<f32>(x_256.x, x_256.y, x_256.z), vec3<f32>(0.0f, 0.0f, 0.0f), vec3<f32>(1.0f, 1.0f, 1.0f));
  let x_261 : vec4<f32> = u_xlat1;
  u_xlat1 = vec4<f32>(x_260.x, x_260.y, x_260.z, x_261.w);
  let x_263 : vec4<f32> = u_xlat1;
  let x_265 : vec3<f32> = (vec3<f32>(x_263.x, x_263.y, x_263.z) + vec3<f32>(-1.0f, -1.0f, -1.0f));
  let x_266 : vec4<f32> = u_xlat1;
  u_xlat1 = vec4<f32>(x_265.x, x_265.y, x_265.z, x_266.w);
  let x_268 : vec4<f32> = u_xlat0;
  let x_270 : vec4<f32> = u_xlat1;
  let x_274 : vec3<f32> = ((vec3<f32>(x_268.x, x_268.x, x_268.x) * vec3<f32>(x_270.x, x_270.y, x_270.z)) + vec3<f32>(1.0f, 1.0f, 1.0f));
  let x_275 : vec4<f32> = u_xlat0;
  u_xlat0 = vec4<f32>(x_274.x, x_275.y, x_274.y, x_274.z);
  let x_277 : vec4<f32> = u_xlat0;
  let x_279 : f32 = u_xlat21;
  let x_281 : vec3<f32> = (vec3<f32>(x_277.x, x_277.z, x_277.w) * vec3<f32>(x_279, x_279, x_279));
  let x_282 : vec4<f32> = u_xlat0;
  u_xlat0 = vec4<f32>(x_281.x, x_281.y, x_281.z, x_282.w);
  let x_284 : vec4<f32> = u_xlat0;
  let x_288 : vec3<f32> = clamp(vec3<f32>(x_284.x, x_284.y, x_284.z), vec3<f32>(0.0f, 0.0f, 0.0f), vec3<f32>(1.0f, 1.0f, 1.0f));
  let x_289 : vec4<f32> = u_xlat0;
  u_xlat0 = vec4<f32>(x_288.x, x_288.y, x_288.z, x_289.w);
  let x_296 : vec4<f32> = vs_INTERP3;
  let x_299 : f32 = x_44.x_GlobalMipBias.x;
  let x_300 : vec4<f32> = textureSampleBias(Texture2D_E9EC22CC, samplerTexture2D_E9EC22CC, vec2<f32>(x_296.x, x_296.y), x_299);
  let x_301 : vec3<f32> = vec3<f32>(x_300.x, x_300.y, x_300.w);
  let x_302 : vec4<f32> = u_xlat1;
  u_xlat1 = vec4<f32>(x_301.x, x_301.y, x_301.z, x_302.w);
  let x_305 : f32 = u_xlat1.x;
  let x_307 : f32 = u_xlat1.z;
  u_xlat1.x = (x_305 * x_307);
  let x_310 : vec4<f32> = u_xlat1;
  let x_316 : vec2<f32> = ((vec2<f32>(x_310.x, x_310.y) * vec2<f32>(2.0f, 2.0f)) + vec2<f32>(-1.0f, -1.0f));
  let x_317 : vec4<f32> = u_xlat1;
  u_xlat1 = vec4<f32>(x_316.x, x_316.y, x_317.z, x_317.w);
  let x_320 : vec4<f32> = u_xlat1;
  let x_322 : vec4<f32> = u_xlat1;
  u_xlat63 = dot(vec2<f32>(x_320.x, x_320.y), vec2<f32>(x_322.x, x_322.y));
  let x_325 : f32 = u_xlat63;
  u_xlat63 = min(x_325, 1.0f);
  let x_327 : f32 = u_xlat63;
  u_xlat63 = (-(x_327) + 1.0f);
  let x_330 : f32 = u_xlat63;
  u_xlat63 = sqrt(x_330);
  let x_332 : f32 = u_xlat63;
  u_xlat63 = max(x_332, 1.00000002e-16f);
  let x_340 : vec4<f32> = vs_INTERP3;
  let x_343 : f32 = x_44.x_GlobalMipBias.x;
  let x_344 : vec4<f32> = textureSampleBias(Texture2D_6EEDD32E, samplerTexture2D_6EEDD32E, vec2<f32>(x_340.x, x_340.y), x_343);
  let x_345 : vec3<f32> = vec3<f32>(x_344.x, x_344.w, x_344.y);
  let x_346 : vec4<f32> = u_xlat2;
  u_xlat2 = vec4<f32>(x_345.x, x_345.y, x_345.z, x_346.w);
  let x_353 : f32 = vs_INTERP2.w;
  u_xlatb43.x = (0.0f < x_353);
  let x_361 : f32 = x_359.unity_WorldTransformParams.w;
  u_xlatb43.y = (x_361 >= 0.0f);
  let x_367 : bool = u_xlatb43.x;
  u_xlat43.x = select(-1.0f, 1.0f, x_367);
  let x_371 : bool = u_xlatb43.y;
  u_xlat43.y = select(-1.0f, 1.0f, x_371);
  let x_375 : f32 = u_xlat43.y;
  let x_377 : f32 = u_xlat43.x;
  u_xlat43.x = (x_375 * x_377);
  let x_382 : vec3<f32> = vs_INTERP1;
  let x_384 : vec4<f32> = vs_INTERP2;
  let x_386 : vec3<f32> = (vec3<f32>(x_382.z, x_382.x, x_382.y) * vec3<f32>(x_384.y, x_384.z, x_384.x));
  let x_387 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_386.x, x_386.y, x_386.z, x_387.w);
  let x_389 : vec3<f32> = vs_INTERP1;
  let x_391 : vec4<f32> = vs_INTERP2;
  let x_394 : vec4<f32> = u_xlat3;
  let x_397 : vec3<f32> = ((vec3<f32>(x_389.y, x_389.z, x_389.x) * vec3<f32>(x_391.z, x_391.x, x_391.y)) + -(vec3<f32>(x_394.x, x_394.y, x_394.z)));
  let x_398 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_397.x, x_397.y, x_397.z, x_398.w);
  let x_400 : vec2<f32> = u_xlat43;
  let x_402 : vec4<f32> = u_xlat3;
  let x_404 : vec3<f32> = (vec3<f32>(x_400.x, x_400.x, x_400.x) * vec3<f32>(x_402.x, x_402.y, x_402.z));
  let x_405 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_404.x, x_404.y, x_404.z, x_405.w);
  let x_407 : vec4<f32> = u_xlat1;
  let x_409 : vec4<f32> = u_xlat3;
  u_xlat22 = (vec3<f32>(x_407.y, x_407.y, x_407.y) * vec3<f32>(x_409.x, x_409.y, x_409.z));
  let x_412 : vec4<f32> = u_xlat1;
  let x_414 : vec4<f32> = vs_INTERP2;
  let x_417 : vec3<f32> = u_xlat22;
  let x_418 : vec3<f32> = ((vec3<f32>(x_412.x, x_412.x, x_412.x) * vec3<f32>(x_414.x, x_414.y, x_414.z)) + x_417);
  let x_419 : vec4<f32> = u_xlat1;
  u_xlat1 = vec4<f32>(x_418.x, x_418.y, x_418.z, x_419.w);
  let x_421 : f32 = u_xlat63;
  let x_423 : vec3<f32> = vs_INTERP1;
  let x_425 : vec4<f32> = u_xlat1;
  let x_427 : vec3<f32> = ((vec3<f32>(x_421, x_421, x_421) * x_423) + vec3<f32>(x_425.x, x_425.y, x_425.z));
  let x_428 : vec4<f32> = u_xlat1;
  u_xlat1 = vec4<f32>(x_427.x, x_427.y, x_427.z, x_428.w);
  let x_430 : vec4<f32> = u_xlat1;
  let x_432 : vec4<f32> = u_xlat1;
  u_xlat63 = dot(vec3<f32>(x_430.x, x_430.y, x_430.z), vec3<f32>(x_432.x, x_432.y, x_432.z));
  let x_435 : f32 = u_xlat63;
  u_xlat63 = inverseSqrt(x_435);
  let x_437 : f32 = u_xlat63;
  let x_439 : vec4<f32> = u_xlat1;
  let x_441 : vec3<f32> = (vec3<f32>(x_437, x_437, x_437) * vec3<f32>(x_439.x, x_439.y, x_439.z));
  let x_442 : vec4<f32> = u_xlat1;
  u_xlat1 = vec4<f32>(x_441.x, x_441.y, x_441.z, x_442.w);
  let x_446 : f32 = x_44.unity_OrthoParams.w;
  u_xlatb63 = (x_446 == 0.0f);
  let x_449 : vec3<f32> = vs_INTERP0;
  let x_454 : vec3<f32> = x_44.x_WorldSpaceCameraPos;
  let x_455 : vec3<f32> = (-(x_449) + x_454);
  let x_456 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_455.x, x_455.y, x_455.z, x_456.w);
  let x_459 : vec4<f32> = u_xlat3;
  let x_461 : vec4<f32> = u_xlat3;
  u_xlat64 = dot(vec3<f32>(x_459.x, x_459.y, x_459.z), vec3<f32>(x_461.x, x_461.y, x_461.z));
  let x_464 : f32 = u_xlat64;
  u_xlat64 = inverseSqrt(x_464);
  let x_466 : f32 = u_xlat64;
  let x_468 : vec4<f32> = u_xlat3;
  let x_470 : vec3<f32> = (vec3<f32>(x_466, x_466, x_466) * vec3<f32>(x_468.x, x_468.y, x_468.z));
  let x_471 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_470.x, x_470.y, x_470.z, x_471.w);
  let x_477 : f32 = x_44.unity_MatrixV[0i].z;
  u_xlat4.x = x_477;
  let x_480 : f32 = x_44.unity_MatrixV[1i].z;
  u_xlat4.y = x_480;
  let x_484 : f32 = x_44.unity_MatrixV[2i].z;
  u_xlat4.z = x_484;
  let x_486 : bool = u_xlatb63;
  if (x_486) {
    let x_490 : vec4<f32> = u_xlat3;
    x_487 = vec3<f32>(x_490.x, x_490.y, x_490.z);
  } else {
    let x_493 : vec3<f32> = u_xlat4;
    x_487 = x_493;
  }
  let x_494 : vec3<f32> = x_487;
  let x_495 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_494.x, x_494.y, x_494.z, x_495.w);
  let x_498 : f32 = vs_INTERP0.y;
  let x_500 : f32 = x_44.unity_MatrixV[1i].z;
  u_xlat63 = (x_498 * x_500);
  let x_503 : f32 = x_44.unity_MatrixV[0i].z;
  let x_505 : f32 = vs_INTERP0.x;
  let x_507 : f32 = u_xlat63;
  u_xlat63 = ((x_503 * x_505) + x_507);
  let x_510 : f32 = x_44.unity_MatrixV[2i].z;
  let x_512 : f32 = vs_INTERP0.z;
  let x_514 : f32 = u_xlat63;
  u_xlat63 = ((x_510 * x_512) + x_514);
  let x_516 : f32 = u_xlat63;
  let x_518 : f32 = x_44.unity_MatrixV[3i].z;
  u_xlat63 = (x_516 + x_518);
  let x_520 : f32 = u_xlat63;
  let x_524 : f32 = x_44.x_ProjectionParams.y;
  u_xlat63 = (-(x_520) + -(x_524));
  let x_527 : f32 = u_xlat63;
  u_xlat63 = max(x_527, 0.0f);
  let x_529 : f32 = u_xlat63;
  let x_532 : f32 = x_44.unity_FogParams.x;
  u_xlat63 = (x_529 * x_532);
  let x_541 : vec2<f32> = vs_INTERP4;
  let x_543 : f32 = x_44.x_GlobalMipBias.x;
  let x_544 : vec4<f32> = textureSampleBias(unity_Lightmap, samplerunity_Lightmap, x_541, x_543);
  u_xlat4 = vec3<f32>(x_544.x, x_544.y, x_544.z);
  let x_550 : vec4<f32> = x_44.x_ScaledScreenParams;
  let x_551 : vec2<f32> = vec2<f32>(x_550.x, x_550.y);
  let x_555 : vec2<f32> = (vec2<f32>(1.0f, 1.0f) / vec2<f32>(x_551.x, x_551.y));
  let x_556 : vec3<f32> = u_xlat5;
  u_xlat5 = vec3<f32>(x_555.x, x_555.y, x_556.z);
  let x_558 : vec3<f32> = u_xlat5;
  let x_560 : vec4<f32> = hlslcc_FragCoord;
  let x_562 : vec2<f32> = (vec2<f32>(x_558.x, x_558.y) * vec2<f32>(x_560.x, x_560.y));
  let x_563 : vec3<f32> = u_xlat5;
  u_xlat5 = vec3<f32>(x_562.x, x_562.y, x_563.z);
  let x_566 : f32 = u_xlat5.y;
  let x_569 : f32 = x_44.x_ScaleBiasRt.x;
  let x_572 : f32 = x_44.x_ScaleBiasRt.y;
  u_xlat64 = ((x_566 * x_569) + x_572);
  let x_574 : f32 = u_xlat64;
  u_xlat5.z = (-(x_574) + 1.0f);
  let x_578 : vec4<f32> = u_xlat2;
  let x_579 : vec2<f32> = vec2<f32>(x_578.x, x_578.y);
  let x_580 : vec4<f32> = u_xlat2;
  u_xlat2 = vec4<f32>(x_579.x, x_579.y, x_580.z, x_580.w);
  let x_582 : vec4<f32> = u_xlat2;
  let x_586 : vec2<f32> = clamp(vec2<f32>(x_582.x, x_582.y), vec2<f32>(0.0f, 0.0f), vec2<f32>(1.0f, 1.0f));
  let x_587 : vec4<f32> = u_xlat2;
  u_xlat2 = vec4<f32>(x_586.x, x_586.y, x_587.z, x_587.w);
  let x_590 : f32 = u_xlat2.x;
  u_xlat64 = ((-(x_590) * 0.959999979f) + 0.959999979f);
  let x_596 : f32 = u_xlat64;
  let x_599 : f32 = u_xlat2.y;
  u_xlat65 = (-(x_596) + x_599);
  let x_602 : vec4<f32> = u_xlat0;
  let x_604 : f32 = u_xlat64;
  u_xlat6 = (vec3<f32>(x_602.x, x_602.y, x_602.z) * vec3<f32>(x_604, x_604, x_604));
  let x_607 : vec4<f32> = u_xlat0;
  let x_611 : vec3<f32> = (vec3<f32>(x_607.x, x_607.y, x_607.z) + vec3<f32>(-0.039999999f, -0.039999999f, -0.039999999f));
  let x_612 : vec4<f32> = u_xlat0;
  u_xlat0 = vec4<f32>(x_611.x, x_611.y, x_611.z, x_612.w);
  let x_614 : vec4<f32> = u_xlat2;
  let x_616 : vec4<f32> = u_xlat0;
  let x_621 : vec3<f32> = ((vec3<f32>(x_614.x, x_614.x, x_614.x) * vec3<f32>(x_616.x, x_616.y, x_616.z)) + vec3<f32>(0.039999999f, 0.039999999f, 0.039999999f));
  let x_622 : vec4<f32> = u_xlat0;
  u_xlat0 = vec4<f32>(x_621.x, x_621.y, x_621.z, x_622.w);
  let x_625 : f32 = u_xlat2.y;
  u_xlat64 = (-(x_625) + 1.0f);
  let x_628 : f32 = u_xlat64;
  let x_629 : f32 = u_xlat64;
  u_xlat2.x = (x_628 * x_629);
  let x_633 : f32 = u_xlat2.x;
  u_xlat2.x = max(x_633, 0.0078125f);
  let x_639 : f32 = u_xlat2.x;
  let x_641 : f32 = u_xlat2.x;
  u_xlat23 = (x_639 * x_641);
  let x_643 : f32 = u_xlat65;
  u_xlat65 = (x_643 + 1.0f);
  let x_645 : f32 = u_xlat65;
  u_xlat65 = min(x_645, 1.0f);
  let x_649 : f32 = u_xlat2.x;
  u_xlat66 = ((x_649 * 4.0f) + 2.0f);
  let x_659 : vec3<f32> = u_xlat5;
  let x_662 : f32 = x_44.x_GlobalMipBias.x;
  let x_663 : vec4<f32> = textureSampleBias(x_ScreenSpaceOcclusionTexture, sampler_ScreenSpaceOcclusionTexture, vec2<f32>(x_659.x, x_659.z), x_662);
  u_xlat67 = x_663.x;
  let x_665 : f32 = u_xlat67;
  u_xlat5.x = (x_665 + -1.0f);
  let x_670 : f32 = x_44.x_AmbientOcclusionParam.w;
  let x_672 : f32 = u_xlat5.x;
  u_xlat5.x = ((x_670 * x_672) + 1.0f);
  let x_678 : f32 = u_xlat2.z;
  let x_679 : f32 = u_xlat67;
  u_xlat44 = min(x_678, x_679);
  let x_688 : f32 = x_686.x_MainLightShadowParams.y;
  u_xlatb67 = (0.0f < x_688);
  let x_690 : bool = u_xlatb67;
  if (x_690) {
    let x_694 : f32 = x_686.x_MainLightShadowParams.y;
    u_xlatb67 = (x_694 == 1.0f);
    let x_696 : bool = u_xlatb67;
    if (x_696) {
      let x_701 : vec4<f32> = vs_INTERP8;
      let x_704 : vec4<f32> = x_686.x_MainLightShadowOffset0;
      u_xlat7 = (vec4<f32>(x_701.x, x_701.y, x_701.x, x_701.y) + x_704);
      let x_707 : vec4<f32> = u_xlat7;
      let x_708 : vec2<f32> = vec2<f32>(x_707.x, x_707.y);
      let x_710 : f32 = vs_INTERP8.z;
      txVec0 = vec3<f32>(x_708.x, x_708.y, x_710);
      let x_723 : vec3<f32> = txVec0;
      let x_725 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_723.xy, x_723.z);
      u_xlat8.x = x_725;
      let x_728 : vec4<f32> = u_xlat7;
      let x_729 : vec2<f32> = vec2<f32>(x_728.z, x_728.w);
      let x_731 : f32 = vs_INTERP8.z;
      txVec1 = vec3<f32>(x_729.x, x_729.y, x_731);
      let x_738 : vec3<f32> = txVec1;
      let x_740 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_738.xy, x_738.z);
      u_xlat8.y = x_740;
      let x_742 : vec4<f32> = vs_INTERP8;
      let x_745 : vec4<f32> = x_686.x_MainLightShadowOffset1;
      u_xlat7 = (vec4<f32>(x_742.x, x_742.y, x_742.x, x_742.y) + x_745);
      let x_748 : vec4<f32> = u_xlat7;
      let x_749 : vec2<f32> = vec2<f32>(x_748.x, x_748.y);
      let x_751 : f32 = vs_INTERP8.z;
      txVec2 = vec3<f32>(x_749.x, x_749.y, x_751);
      let x_758 : vec3<f32> = txVec2;
      let x_760 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_758.xy, x_758.z);
      u_xlat8.z = x_760;
      let x_763 : vec4<f32> = u_xlat7;
      let x_764 : vec2<f32> = vec2<f32>(x_763.z, x_763.w);
      let x_766 : f32 = vs_INTERP8.z;
      txVec3 = vec3<f32>(x_764.x, x_764.y, x_766);
      let x_773 : vec3<f32> = txVec3;
      let x_775 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_773.xy, x_773.z);
      u_xlat8.w = x_775;
      let x_777 : vec4<f32> = u_xlat8;
      u_xlat67 = dot(x_777, vec4<f32>(0.25f, 0.25f, 0.25f, 0.25f));
    } else {
      let x_784 : f32 = x_686.x_MainLightShadowParams.y;
      u_xlatb26 = (x_784 == 2.0f);
      let x_786 : bool = u_xlatb26;
      if (x_786) {
        let x_790 : vec4<f32> = vs_INTERP8;
        let x_793 : vec4<f32> = x_686.x_MainLightShadowmapSize;
        let x_798 : vec2<f32> = ((vec2<f32>(x_790.x, x_790.y) * vec2<f32>(x_793.z, x_793.w)) + vec2<f32>(0.5f, 0.5f));
        let x_799 : vec3<f32> = u_xlat26;
        u_xlat26 = vec3<f32>(x_798.x, x_798.y, x_799.z);
        let x_801 : vec3<f32> = u_xlat26;
        let x_803 : vec2<f32> = floor(vec2<f32>(x_801.x, x_801.y));
        let x_804 : vec3<f32> = u_xlat26;
        u_xlat26 = vec3<f32>(x_803.x, x_803.y, x_804.z);
        let x_806 : vec4<f32> = vs_INTERP8;
        let x_809 : vec4<f32> = x_686.x_MainLightShadowmapSize;
        let x_812 : vec3<f32> = u_xlat26;
        let x_815 : vec2<f32> = ((vec2<f32>(x_806.x, x_806.y) * vec2<f32>(x_809.z, x_809.w)) + -(vec2<f32>(x_812.x, x_812.y)));
        let x_816 : vec4<f32> = u_xlat7;
        u_xlat7 = vec4<f32>(x_815.x, x_815.y, x_816.z, x_816.w);
        let x_818 : vec4<f32> = u_xlat7;
        u_xlat8 = (vec4<f32>(x_818.x, x_818.x, x_818.y, x_818.y) + vec4<f32>(0.5f, 1.0f, 0.5f, 1.0f));
        let x_823 : vec4<f32> = u_xlat8;
        let x_825 : vec4<f32> = u_xlat8;
        u_xlat9 = (vec4<f32>(x_823.x, x_823.x, x_823.z, x_823.z) * vec4<f32>(x_825.x, x_825.x, x_825.z, x_825.z));
        let x_829 : vec4<f32> = u_xlat9;
        u_xlat49 = (vec2<f32>(x_829.y, x_829.w) * vec2<f32>(0.079999998f, 0.079999998f));
        let x_834 : vec4<f32> = u_xlat9;
        let x_837 : vec4<f32> = u_xlat7;
        let x_840 : vec2<f32> = ((vec2<f32>(x_834.x, x_834.z) * vec2<f32>(0.5f, 0.5f)) + -(vec2<f32>(x_837.x, x_837.y)));
        let x_841 : vec4<f32> = u_xlat8;
        u_xlat8 = vec4<f32>(x_840.x, x_841.y, x_840.y, x_841.w);
        let x_843 : vec4<f32> = u_xlat7;
        let x_846 : vec2<f32> = (-(vec2<f32>(x_843.x, x_843.y)) + vec2<f32>(1.0f, 1.0f));
        let x_847 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_846.x, x_846.y, x_847.z, x_847.w);
        let x_850 : vec4<f32> = u_xlat7;
        u_xlat51 = min(vec2<f32>(x_850.x, x_850.y), vec2<f32>(0.0f, 0.0f));
        let x_854 : vec2<f32> = u_xlat51;
        let x_856 : vec2<f32> = u_xlat51;
        let x_858 : vec4<f32> = u_xlat9;
        u_xlat51 = ((-(x_854) * x_856) + vec2<f32>(x_858.x, x_858.y));
        let x_861 : vec4<f32> = u_xlat7;
        let x_863 : vec2<f32> = max(vec2<f32>(x_861.x, x_861.y), vec2<f32>(0.0f, 0.0f));
        let x_864 : vec4<f32> = u_xlat7;
        u_xlat7 = vec4<f32>(x_863.x, x_863.y, x_864.z, x_864.w);
        let x_866 : vec4<f32> = u_xlat7;
        let x_869 : vec4<f32> = u_xlat7;
        let x_872 : vec4<f32> = u_xlat8;
        let x_874 : vec2<f32> = ((-(vec2<f32>(x_866.x, x_866.y)) * vec2<f32>(x_869.x, x_869.y)) + vec2<f32>(x_872.y, x_872.w));
        let x_875 : vec4<f32> = u_xlat7;
        u_xlat7 = vec4<f32>(x_874.x, x_874.y, x_875.z, x_875.w);
        let x_877 : vec2<f32> = u_xlat51;
        u_xlat51 = (x_877 + vec2<f32>(1.0f, 1.0f));
        let x_879 : vec4<f32> = u_xlat7;
        let x_881 : vec2<f32> = (vec2<f32>(x_879.x, x_879.y) + vec2<f32>(1.0f, 1.0f));
        let x_882 : vec4<f32> = u_xlat7;
        u_xlat7 = vec4<f32>(x_881.x, x_881.y, x_882.z, x_882.w);
        let x_885 : vec4<f32> = u_xlat8;
        let x_889 : vec2<f32> = (vec2<f32>(x_885.x, x_885.z) * vec2<f32>(0.159999996f, 0.159999996f));
        let x_890 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_889.x, x_889.y, x_890.z, x_890.w);
        let x_893 : vec4<f32> = u_xlat9;
        let x_895 : vec2<f32> = (vec2<f32>(x_893.x, x_893.y) * vec2<f32>(0.159999996f, 0.159999996f));
        let x_896 : vec4<f32> = u_xlat11;
        u_xlat11 = vec4<f32>(x_895.x, x_895.y, x_896.z, x_896.w);
        let x_898 : vec2<f32> = u_xlat51;
        let x_899 : vec2<f32> = (x_898 * vec2<f32>(0.159999996f, 0.159999996f));
        let x_900 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_899.x, x_899.y, x_900.z, x_900.w);
        let x_903 : vec4<f32> = u_xlat7;
        let x_905 : vec2<f32> = (vec2<f32>(x_903.x, x_903.y) * vec2<f32>(0.159999996f, 0.159999996f));
        let x_906 : vec4<f32> = u_xlat12;
        u_xlat12 = vec4<f32>(x_905.x, x_905.y, x_906.z, x_906.w);
        let x_908 : vec4<f32> = u_xlat8;
        let x_910 : vec2<f32> = (vec2<f32>(x_908.y, x_908.w) * vec2<f32>(0.159999996f, 0.159999996f));
        let x_911 : vec4<f32> = u_xlat7;
        u_xlat7 = vec4<f32>(x_910.x, x_910.y, x_911.z, x_911.w);
        let x_914 : f32 = u_xlat9.x;
        u_xlat10.z = x_914;
        let x_917 : f32 = u_xlat7.x;
        u_xlat10.w = x_917;
        let x_920 : f32 = u_xlat12.x;
        u_xlat11.z = x_920;
        let x_923 : f32 = u_xlat49.x;
        u_xlat11.w = x_923;
        let x_925 : vec4<f32> = u_xlat10;
        let x_927 : vec4<f32> = u_xlat11;
        u_xlat8 = (vec4<f32>(x_925.z, x_925.w, x_925.x, x_925.z) + vec4<f32>(x_927.z, x_927.w, x_927.x, x_927.z));
        let x_931 : f32 = u_xlat10.y;
        u_xlat9.z = x_931;
        let x_934 : f32 = u_xlat7.y;
        u_xlat9.w = x_934;
        let x_937 : f32 = u_xlat11.y;
        u_xlat12.z = x_937;
        let x_940 : f32 = u_xlat49.y;
        u_xlat12.w = x_940;
        let x_942 : vec4<f32> = u_xlat9;
        let x_944 : vec4<f32> = u_xlat12;
        let x_946 : vec3<f32> = (vec3<f32>(x_942.z, x_942.y, x_942.w) + vec3<f32>(x_944.z, x_944.y, x_944.w));
        let x_947 : vec4<f32> = u_xlat7;
        u_xlat7 = vec4<f32>(x_946.x, x_946.y, x_946.z, x_947.w);
        let x_949 : vec4<f32> = u_xlat11;
        let x_951 : vec4<f32> = u_xlat8;
        let x_953 : vec3<f32> = (vec3<f32>(x_949.x, x_949.z, x_949.w) / vec3<f32>(x_951.z, x_951.w, x_951.y));
        let x_954 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_953.x, x_953.y, x_953.z, x_954.w);
        let x_956 : vec4<f32> = u_xlat9;
        let x_962 : vec3<f32> = (vec3<f32>(x_956.x, x_956.y, x_956.z) + vec3<f32>(-2.5f, -0.5f, 1.5f));
        let x_963 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_962.x, x_962.y, x_962.z, x_963.w);
        let x_965 : vec4<f32> = u_xlat12;
        let x_967 : vec4<f32> = u_xlat7;
        let x_969 : vec3<f32> = (vec3<f32>(x_965.z, x_965.y, x_965.w) / vec3<f32>(x_967.x, x_967.y, x_967.z));
        let x_970 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_969.x, x_969.y, x_969.z, x_970.w);
        let x_972 : vec4<f32> = u_xlat10;
        let x_974 : vec3<f32> = (vec3<f32>(x_972.x, x_972.y, x_972.z) + vec3<f32>(-2.5f, -0.5f, 1.5f));
        let x_975 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_974.x, x_974.y, x_974.z, x_975.w);
        let x_977 : vec4<f32> = u_xlat9;
        let x_980 : vec4<f32> = x_686.x_MainLightShadowmapSize;
        let x_982 : vec3<f32> = (vec3<f32>(x_977.y, x_977.x, x_977.z) * vec3<f32>(x_980.x, x_980.x, x_980.x));
        let x_983 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_982.x, x_982.y, x_982.z, x_983.w);
        let x_985 : vec4<f32> = u_xlat10;
        let x_988 : vec4<f32> = x_686.x_MainLightShadowmapSize;
        let x_990 : vec3<f32> = (vec3<f32>(x_985.x, x_985.y, x_985.z) * vec3<f32>(x_988.y, x_988.y, x_988.y));
        let x_991 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_990.x, x_990.y, x_990.z, x_991.w);
        let x_994 : f32 = u_xlat10.x;
        u_xlat9.w = x_994;
        let x_996 : vec3<f32> = u_xlat26;
        let x_999 : vec4<f32> = x_686.x_MainLightShadowmapSize;
        let x_1002 : vec4<f32> = u_xlat9;
        u_xlat11 = ((vec4<f32>(x_996.x, x_996.y, x_996.x, x_996.y) * vec4<f32>(x_999.x, x_999.y, x_999.x, x_999.y)) + vec4<f32>(x_1002.y, x_1002.w, x_1002.x, x_1002.w));
        let x_1005 : vec3<f32> = u_xlat26;
        let x_1008 : vec4<f32> = x_686.x_MainLightShadowmapSize;
        let x_1011 : vec4<f32> = u_xlat9;
        let x_1013 : vec2<f32> = ((vec2<f32>(x_1005.x, x_1005.y) * vec2<f32>(x_1008.x, x_1008.y)) + vec2<f32>(x_1011.z, x_1011.w));
        let x_1014 : vec4<f32> = u_xlat12;
        u_xlat12 = vec4<f32>(x_1013.x, x_1013.y, x_1014.z, x_1014.w);
        let x_1017 : f32 = u_xlat9.y;
        u_xlat10.w = x_1017;
        let x_1019 : vec4<f32> = u_xlat10;
        let x_1020 : vec2<f32> = vec2<f32>(x_1019.y, x_1019.z);
        let x_1021 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_1021.x, x_1020.x, x_1021.z, x_1020.y);
        let x_1024 : vec3<f32> = u_xlat26;
        let x_1027 : vec4<f32> = x_686.x_MainLightShadowmapSize;
        let x_1030 : vec4<f32> = u_xlat9;
        u_xlat13 = ((vec4<f32>(x_1024.x, x_1024.y, x_1024.x, x_1024.y) * vec4<f32>(x_1027.x, x_1027.y, x_1027.x, x_1027.y)) + vec4<f32>(x_1030.x, x_1030.y, x_1030.z, x_1030.y));
        let x_1033 : vec3<f32> = u_xlat26;
        let x_1036 : vec4<f32> = x_686.x_MainLightShadowmapSize;
        let x_1039 : vec4<f32> = u_xlat10;
        u_xlat10 = ((vec4<f32>(x_1033.x, x_1033.y, x_1033.x, x_1033.y) * vec4<f32>(x_1036.x, x_1036.y, x_1036.x, x_1036.y)) + vec4<f32>(x_1039.w, x_1039.y, x_1039.w, x_1039.z));
        let x_1042 : vec3<f32> = u_xlat26;
        let x_1045 : vec4<f32> = x_686.x_MainLightShadowmapSize;
        let x_1048 : vec4<f32> = u_xlat9;
        u_xlat9 = ((vec4<f32>(x_1042.x, x_1042.y, x_1042.x, x_1042.y) * vec4<f32>(x_1045.x, x_1045.y, x_1045.x, x_1045.y)) + vec4<f32>(x_1048.x, x_1048.w, x_1048.z, x_1048.w));
        let x_1052 : vec4<f32> = u_xlat7;
        let x_1054 : vec4<f32> = u_xlat8;
        u_xlat14 = (vec4<f32>(x_1052.x, x_1052.x, x_1052.x, x_1052.y) * vec4<f32>(x_1054.z, x_1054.w, x_1054.y, x_1054.z));
        let x_1058 : vec4<f32> = u_xlat7;
        let x_1060 : vec4<f32> = u_xlat8;
        u_xlat15 = (vec4<f32>(x_1058.y, x_1058.y, x_1058.z, x_1058.z) * x_1060);
        let x_1063 : f32 = u_xlat7.z;
        let x_1065 : f32 = u_xlat8.y;
        u_xlat26.x = (x_1063 * x_1065);
        let x_1069 : vec4<f32> = u_xlat11;
        let x_1070 : vec2<f32> = vec2<f32>(x_1069.x, x_1069.y);
        let x_1072 : f32 = vs_INTERP8.z;
        txVec4 = vec3<f32>(x_1070.x, x_1070.y, x_1072);
        let x_1080 : vec3<f32> = txVec4;
        let x_1082 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1080.xy, x_1080.z);
        u_xlat47 = x_1082;
        let x_1084 : vec4<f32> = u_xlat11;
        let x_1085 : vec2<f32> = vec2<f32>(x_1084.z, x_1084.w);
        let x_1087 : f32 = vs_INTERP8.z;
        txVec5 = vec3<f32>(x_1085.x, x_1085.y, x_1087);
        let x_1095 : vec3<f32> = txVec5;
        let x_1097 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1095.xy, x_1095.z);
        u_xlat68 = x_1097;
        let x_1098 : f32 = u_xlat68;
        let x_1100 : f32 = u_xlat14.y;
        u_xlat68 = (x_1098 * x_1100);
        let x_1103 : f32 = u_xlat14.x;
        let x_1104 : f32 = u_xlat47;
        let x_1106 : f32 = u_xlat68;
        u_xlat47 = ((x_1103 * x_1104) + x_1106);
        let x_1109 : vec4<f32> = u_xlat12;
        let x_1110 : vec2<f32> = vec2<f32>(x_1109.x, x_1109.y);
        let x_1112 : f32 = vs_INTERP8.z;
        txVec6 = vec3<f32>(x_1110.x, x_1110.y, x_1112);
        let x_1119 : vec3<f32> = txVec6;
        let x_1121 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1119.xy, x_1119.z);
        u_xlat68 = x_1121;
        let x_1123 : f32 = u_xlat14.z;
        let x_1124 : f32 = u_xlat68;
        let x_1126 : f32 = u_xlat47;
        u_xlat47 = ((x_1123 * x_1124) + x_1126);
        let x_1129 : vec4<f32> = u_xlat10;
        let x_1130 : vec2<f32> = vec2<f32>(x_1129.x, x_1129.y);
        let x_1132 : f32 = vs_INTERP8.z;
        txVec7 = vec3<f32>(x_1130.x, x_1130.y, x_1132);
        let x_1139 : vec3<f32> = txVec7;
        let x_1141 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1139.xy, x_1139.z);
        u_xlat68 = x_1141;
        let x_1143 : f32 = u_xlat14.w;
        let x_1144 : f32 = u_xlat68;
        let x_1146 : f32 = u_xlat47;
        u_xlat47 = ((x_1143 * x_1144) + x_1146);
        let x_1149 : vec4<f32> = u_xlat13;
        let x_1150 : vec2<f32> = vec2<f32>(x_1149.x, x_1149.y);
        let x_1152 : f32 = vs_INTERP8.z;
        txVec8 = vec3<f32>(x_1150.x, x_1150.y, x_1152);
        let x_1159 : vec3<f32> = txVec8;
        let x_1161 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1159.xy, x_1159.z);
        u_xlat68 = x_1161;
        let x_1163 : f32 = u_xlat15.x;
        let x_1164 : f32 = u_xlat68;
        let x_1166 : f32 = u_xlat47;
        u_xlat47 = ((x_1163 * x_1164) + x_1166);
        let x_1169 : vec4<f32> = u_xlat13;
        let x_1170 : vec2<f32> = vec2<f32>(x_1169.z, x_1169.w);
        let x_1172 : f32 = vs_INTERP8.z;
        txVec9 = vec3<f32>(x_1170.x, x_1170.y, x_1172);
        let x_1179 : vec3<f32> = txVec9;
        let x_1181 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1179.xy, x_1179.z);
        u_xlat68 = x_1181;
        let x_1183 : f32 = u_xlat15.y;
        let x_1184 : f32 = u_xlat68;
        let x_1186 : f32 = u_xlat47;
        u_xlat47 = ((x_1183 * x_1184) + x_1186);
        let x_1189 : vec4<f32> = u_xlat10;
        let x_1190 : vec2<f32> = vec2<f32>(x_1189.z, x_1189.w);
        let x_1192 : f32 = vs_INTERP8.z;
        txVec10 = vec3<f32>(x_1190.x, x_1190.y, x_1192);
        let x_1199 : vec3<f32> = txVec10;
        let x_1201 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1199.xy, x_1199.z);
        u_xlat68 = x_1201;
        let x_1203 : f32 = u_xlat15.z;
        let x_1204 : f32 = u_xlat68;
        let x_1206 : f32 = u_xlat47;
        u_xlat47 = ((x_1203 * x_1204) + x_1206);
        let x_1209 : vec4<f32> = u_xlat9;
        let x_1210 : vec2<f32> = vec2<f32>(x_1209.x, x_1209.y);
        let x_1212 : f32 = vs_INTERP8.z;
        txVec11 = vec3<f32>(x_1210.x, x_1210.y, x_1212);
        let x_1219 : vec3<f32> = txVec11;
        let x_1221 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1219.xy, x_1219.z);
        u_xlat68 = x_1221;
        let x_1223 : f32 = u_xlat15.w;
        let x_1224 : f32 = u_xlat68;
        let x_1226 : f32 = u_xlat47;
        u_xlat47 = ((x_1223 * x_1224) + x_1226);
        let x_1229 : vec4<f32> = u_xlat9;
        let x_1230 : vec2<f32> = vec2<f32>(x_1229.z, x_1229.w);
        let x_1232 : f32 = vs_INTERP8.z;
        txVec12 = vec3<f32>(x_1230.x, x_1230.y, x_1232);
        let x_1239 : vec3<f32> = txVec12;
        let x_1241 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1239.xy, x_1239.z);
        u_xlat68 = x_1241;
        let x_1243 : f32 = u_xlat26.x;
        let x_1244 : f32 = u_xlat68;
        let x_1246 : f32 = u_xlat47;
        u_xlat67 = ((x_1243 * x_1244) + x_1246);
      } else {
        let x_1249 : vec4<f32> = vs_INTERP8;
        let x_1252 : vec4<f32> = x_686.x_MainLightShadowmapSize;
        let x_1255 : vec2<f32> = ((vec2<f32>(x_1249.x, x_1249.y) * vec2<f32>(x_1252.z, x_1252.w)) + vec2<f32>(0.5f, 0.5f));
        let x_1256 : vec3<f32> = u_xlat26;
        u_xlat26 = vec3<f32>(x_1255.x, x_1255.y, x_1256.z);
        let x_1258 : vec3<f32> = u_xlat26;
        let x_1260 : vec2<f32> = floor(vec2<f32>(x_1258.x, x_1258.y));
        let x_1261 : vec3<f32> = u_xlat26;
        u_xlat26 = vec3<f32>(x_1260.x, x_1260.y, x_1261.z);
        let x_1263 : vec4<f32> = vs_INTERP8;
        let x_1266 : vec4<f32> = x_686.x_MainLightShadowmapSize;
        let x_1269 : vec3<f32> = u_xlat26;
        let x_1272 : vec2<f32> = ((vec2<f32>(x_1263.x, x_1263.y) * vec2<f32>(x_1266.z, x_1266.w)) + -(vec2<f32>(x_1269.x, x_1269.y)));
        let x_1273 : vec4<f32> = u_xlat7;
        u_xlat7 = vec4<f32>(x_1272.x, x_1272.y, x_1273.z, x_1273.w);
        let x_1275 : vec4<f32> = u_xlat7;
        u_xlat8 = (vec4<f32>(x_1275.x, x_1275.x, x_1275.y, x_1275.y) + vec4<f32>(0.5f, 1.0f, 0.5f, 1.0f));
        let x_1278 : vec4<f32> = u_xlat8;
        let x_1280 : vec4<f32> = u_xlat8;
        u_xlat9 = (vec4<f32>(x_1278.x, x_1278.x, x_1278.z, x_1278.z) * vec4<f32>(x_1280.x, x_1280.x, x_1280.z, x_1280.z));
        let x_1283 : vec4<f32> = u_xlat9;
        let x_1287 : vec2<f32> = (vec2<f32>(x_1283.y, x_1283.w) * vec2<f32>(0.040816002f, 0.040816002f));
        let x_1288 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_1288.x, x_1287.x, x_1288.z, x_1287.y);
        let x_1290 : vec4<f32> = u_xlat9;
        let x_1293 : vec4<f32> = u_xlat7;
        u_xlat49 = ((vec2<f32>(x_1290.x, x_1290.z) * vec2<f32>(0.5f, 0.5f)) + -(vec2<f32>(x_1293.x, x_1293.y)));
        let x_1297 : vec4<f32> = u_xlat7;
        let x_1300 : vec2<f32> = (-(vec2<f32>(x_1297.x, x_1297.y)) + vec2<f32>(1.0f, 1.0f));
        let x_1301 : vec4<f32> = u_xlat8;
        u_xlat8 = vec4<f32>(x_1300.x, x_1301.y, x_1300.y, x_1301.w);
        let x_1303 : vec4<f32> = u_xlat7;
        let x_1305 : vec2<f32> = min(vec2<f32>(x_1303.x, x_1303.y), vec2<f32>(0.0f, 0.0f));
        let x_1306 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_1305.x, x_1305.y, x_1306.z, x_1306.w);
        let x_1308 : vec4<f32> = u_xlat9;
        let x_1311 : vec4<f32> = u_xlat9;
        let x_1314 : vec4<f32> = u_xlat8;
        let x_1316 : vec2<f32> = ((-(vec2<f32>(x_1308.x, x_1308.y)) * vec2<f32>(x_1311.x, x_1311.y)) + vec2<f32>(x_1314.x, x_1314.z));
        let x_1317 : vec4<f32> = u_xlat8;
        u_xlat8 = vec4<f32>(x_1316.x, x_1317.y, x_1316.y, x_1317.w);
        let x_1319 : vec4<f32> = u_xlat7;
        let x_1321 : vec2<f32> = max(vec2<f32>(x_1319.x, x_1319.y), vec2<f32>(0.0f, 0.0f));
        let x_1322 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_1321.x, x_1321.y, x_1322.z, x_1322.w);
        let x_1324 : vec4<f32> = u_xlat9;
        let x_1327 : vec4<f32> = u_xlat9;
        let x_1330 : vec4<f32> = u_xlat8;
        let x_1332 : vec2<f32> = ((-(vec2<f32>(x_1324.x, x_1324.y)) * vec2<f32>(x_1327.x, x_1327.y)) + vec2<f32>(x_1330.y, x_1330.w));
        let x_1333 : vec4<f32> = u_xlat8;
        u_xlat8 = vec4<f32>(x_1333.x, x_1332.x, x_1333.z, x_1332.y);
        let x_1335 : vec4<f32> = u_xlat8;
        u_xlat8 = (x_1335 + vec4<f32>(2.0f, 2.0f, 2.0f, 2.0f));
        let x_1339 : f32 = u_xlat8.y;
        u_xlat9.z = (x_1339 * 0.081632003f);
        let x_1343 : vec2<f32> = u_xlat49;
        let x_1346 : vec2<f32> = (vec2<f32>(x_1343.y, x_1343.x) * vec2<f32>(0.081632003f, 0.081632003f));
        let x_1347 : vec4<f32> = u_xlat11;
        u_xlat11 = vec4<f32>(x_1346.x, x_1346.y, x_1347.z, x_1347.w);
        let x_1349 : vec4<f32> = u_xlat8;
        u_xlat49 = (vec2<f32>(x_1349.x, x_1349.z) * vec2<f32>(0.081632003f, 0.081632003f));
        let x_1353 : f32 = u_xlat8.w;
        u_xlat11.z = (x_1353 * 0.081632003f);
        let x_1357 : f32 = u_xlat11.y;
        u_xlat9.x = x_1357;
        let x_1359 : vec4<f32> = u_xlat7;
        let x_1366 : vec2<f32> = ((vec2<f32>(x_1359.x, x_1359.x) * vec2<f32>(-0.081632003f, 0.081632003f)) + vec2<f32>(0.163264006f, 0.081632003f));
        let x_1367 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_1367.x, x_1366.x, x_1367.z, x_1366.y);
        let x_1369 : vec4<f32> = u_xlat7;
        let x_1373 : vec2<f32> = ((vec2<f32>(x_1369.x, x_1369.x) * vec2<f32>(-0.081632003f, 0.081632003f)) + vec2<f32>(0.081632003f, 0.163264006f));
        let x_1374 : vec4<f32> = u_xlat8;
        u_xlat8 = vec4<f32>(x_1373.x, x_1374.y, x_1373.y, x_1374.w);
        let x_1377 : f32 = u_xlat49.x;
        u_xlat8.y = x_1377;
        let x_1380 : f32 = u_xlat10.y;
        u_xlat8.w = x_1380;
        let x_1382 : vec4<f32> = u_xlat8;
        let x_1383 : vec4<f32> = u_xlat9;
        u_xlat9 = (x_1382 + x_1383);
        let x_1385 : vec4<f32> = u_xlat7;
        let x_1388 : vec2<f32> = ((vec2<f32>(x_1385.y, x_1385.y) * vec2<f32>(-0.081632003f, 0.081632003f)) + vec2<f32>(0.163264006f, 0.081632003f));
        let x_1389 : vec4<f32> = u_xlat11;
        u_xlat11 = vec4<f32>(x_1389.x, x_1388.x, x_1389.z, x_1388.y);
        let x_1391 : vec4<f32> = u_xlat7;
        let x_1394 : vec2<f32> = ((vec2<f32>(x_1391.y, x_1391.y) * vec2<f32>(-0.081632003f, 0.081632003f)) + vec2<f32>(0.081632003f, 0.163264006f));
        let x_1395 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_1394.x, x_1395.y, x_1394.y, x_1395.w);
        let x_1398 : f32 = u_xlat49.y;
        u_xlat10.y = x_1398;
        let x_1400 : vec4<f32> = u_xlat10;
        let x_1401 : vec4<f32> = u_xlat11;
        u_xlat7 = (x_1400 + x_1401);
        let x_1403 : vec4<f32> = u_xlat8;
        let x_1404 : vec4<f32> = u_xlat9;
        u_xlat8 = (x_1403 / x_1404);
        let x_1406 : vec4<f32> = u_xlat8;
        u_xlat8 = (x_1406 + vec4<f32>(-3.5f, -1.5f, 0.5f, 2.5f));
        let x_1412 : vec4<f32> = u_xlat10;
        let x_1413 : vec4<f32> = u_xlat7;
        u_xlat10 = (x_1412 / x_1413);
        let x_1415 : vec4<f32> = u_xlat10;
        u_xlat10 = (x_1415 + vec4<f32>(-3.5f, -1.5f, 0.5f, 2.5f));
        let x_1417 : vec4<f32> = u_xlat8;
        let x_1420 : vec4<f32> = x_686.x_MainLightShadowmapSize;
        u_xlat8 = (vec4<f32>(x_1417.w, x_1417.x, x_1417.y, x_1417.z) * vec4<f32>(x_1420.x, x_1420.x, x_1420.x, x_1420.x));
        let x_1423 : vec4<f32> = u_xlat10;
        let x_1426 : vec4<f32> = x_686.x_MainLightShadowmapSize;
        u_xlat10 = (vec4<f32>(x_1423.x, x_1423.w, x_1423.y, x_1423.z) * vec4<f32>(x_1426.y, x_1426.y, x_1426.y, x_1426.y));
        let x_1429 : vec4<f32> = u_xlat8;
        let x_1430 : vec3<f32> = vec3<f32>(x_1429.y, x_1429.z, x_1429.w);
        let x_1431 : vec4<f32> = u_xlat11;
        u_xlat11 = vec4<f32>(x_1430.x, x_1431.y, x_1430.y, x_1430.z);
        let x_1434 : f32 = u_xlat10.x;
        u_xlat11.y = x_1434;
        let x_1436 : vec3<f32> = u_xlat26;
        let x_1439 : vec4<f32> = x_686.x_MainLightShadowmapSize;
        let x_1442 : vec4<f32> = u_xlat11;
        u_xlat12 = ((vec4<f32>(x_1436.x, x_1436.y, x_1436.x, x_1436.y) * vec4<f32>(x_1439.x, x_1439.y, x_1439.x, x_1439.y)) + vec4<f32>(x_1442.x, x_1442.y, x_1442.z, x_1442.y));
        let x_1445 : vec3<f32> = u_xlat26;
        let x_1448 : vec4<f32> = x_686.x_MainLightShadowmapSize;
        let x_1451 : vec4<f32> = u_xlat11;
        let x_1453 : vec2<f32> = ((vec2<f32>(x_1445.x, x_1445.y) * vec2<f32>(x_1448.x, x_1448.y)) + vec2<f32>(x_1451.w, x_1451.y));
        let x_1454 : vec4<f32> = u_xlat13;
        u_xlat13 = vec4<f32>(x_1453.x, x_1453.y, x_1454.z, x_1454.w);
        let x_1457 : f32 = u_xlat11.y;
        u_xlat8.y = x_1457;
        let x_1460 : f32 = u_xlat10.z;
        u_xlat11.y = x_1460;
        let x_1462 : vec3<f32> = u_xlat26;
        let x_1465 : vec4<f32> = x_686.x_MainLightShadowmapSize;
        let x_1468 : vec4<f32> = u_xlat11;
        u_xlat14 = ((vec4<f32>(x_1462.x, x_1462.y, x_1462.x, x_1462.y) * vec4<f32>(x_1465.x, x_1465.y, x_1465.x, x_1465.y)) + vec4<f32>(x_1468.x, x_1468.y, x_1468.z, x_1468.y));
        let x_1472 : vec3<f32> = u_xlat26;
        let x_1475 : vec4<f32> = x_686.x_MainLightShadowmapSize;
        let x_1478 : vec4<f32> = u_xlat11;
        u_xlat55 = ((vec2<f32>(x_1472.x, x_1472.y) * vec2<f32>(x_1475.x, x_1475.y)) + vec2<f32>(x_1478.w, x_1478.y));
        let x_1482 : f32 = u_xlat11.y;
        u_xlat8.z = x_1482;
        let x_1484 : vec3<f32> = u_xlat26;
        let x_1487 : vec4<f32> = x_686.x_MainLightShadowmapSize;
        let x_1490 : vec4<f32> = u_xlat8;
        u_xlat15 = ((vec4<f32>(x_1484.x, x_1484.y, x_1484.x, x_1484.y) * vec4<f32>(x_1487.x, x_1487.y, x_1487.x, x_1487.y)) + vec4<f32>(x_1490.x, x_1490.y, x_1490.x, x_1490.z));
        let x_1494 : f32 = u_xlat10.w;
        u_xlat11.y = x_1494;
        let x_1497 : vec3<f32> = u_xlat26;
        let x_1500 : vec4<f32> = x_686.x_MainLightShadowmapSize;
        let x_1503 : vec4<f32> = u_xlat11;
        u_xlat16 = ((vec4<f32>(x_1497.x, x_1497.y, x_1497.x, x_1497.y) * vec4<f32>(x_1500.x, x_1500.y, x_1500.x, x_1500.y)) + vec4<f32>(x_1503.x, x_1503.y, x_1503.z, x_1503.y));
        let x_1507 : vec3<f32> = u_xlat26;
        let x_1510 : vec4<f32> = x_686.x_MainLightShadowmapSize;
        let x_1513 : vec4<f32> = u_xlat11;
        let x_1515 : vec2<f32> = ((vec2<f32>(x_1507.x, x_1507.y) * vec2<f32>(x_1510.x, x_1510.y)) + vec2<f32>(x_1513.w, x_1513.y));
        let x_1516 : vec3<f32> = u_xlat29;
        u_xlat29 = vec3<f32>(x_1515.x, x_1515.y, x_1516.z);
        let x_1519 : f32 = u_xlat11.y;
        u_xlat8.w = x_1519;
        let x_1522 : vec3<f32> = u_xlat26;
        let x_1525 : vec4<f32> = x_686.x_MainLightShadowmapSize;
        let x_1528 : vec4<f32> = u_xlat8;
        u_xlat17 = ((vec2<f32>(x_1522.x, x_1522.y) * vec2<f32>(x_1525.x, x_1525.y)) + vec2<f32>(x_1528.x, x_1528.w));
        let x_1531 : vec4<f32> = u_xlat11;
        let x_1532 : vec3<f32> = vec3<f32>(x_1531.x, x_1531.z, x_1531.w);
        let x_1533 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_1532.x, x_1533.y, x_1532.y, x_1532.z);
        let x_1535 : vec3<f32> = u_xlat26;
        let x_1538 : vec4<f32> = x_686.x_MainLightShadowmapSize;
        let x_1541 : vec4<f32> = u_xlat10;
        u_xlat11 = ((vec4<f32>(x_1535.x, x_1535.y, x_1535.x, x_1535.y) * vec4<f32>(x_1538.x, x_1538.y, x_1538.x, x_1538.y)) + vec4<f32>(x_1541.x, x_1541.y, x_1541.z, x_1541.y));
        let x_1545 : vec3<f32> = u_xlat26;
        let x_1548 : vec4<f32> = x_686.x_MainLightShadowmapSize;
        let x_1551 : vec4<f32> = u_xlat10;
        u_xlat52 = ((vec2<f32>(x_1545.x, x_1545.y) * vec2<f32>(x_1548.x, x_1548.y)) + vec2<f32>(x_1551.w, x_1551.y));
        let x_1555 : f32 = u_xlat8.x;
        u_xlat10.x = x_1555;
        let x_1557 : vec3<f32> = u_xlat26;
        let x_1560 : vec4<f32> = x_686.x_MainLightShadowmapSize;
        let x_1563 : vec4<f32> = u_xlat10;
        let x_1565 : vec2<f32> = ((vec2<f32>(x_1557.x, x_1557.y) * vec2<f32>(x_1560.x, x_1560.y)) + vec2<f32>(x_1563.x, x_1563.y));
        let x_1566 : vec3<f32> = u_xlat26;
        u_xlat26 = vec3<f32>(x_1565.x, x_1565.y, x_1566.z);
        let x_1569 : vec4<f32> = u_xlat7;
        let x_1571 : vec4<f32> = u_xlat9;
        u_xlat18 = (vec4<f32>(x_1569.x, x_1569.x, x_1569.x, x_1569.x) * x_1571);
        let x_1574 : vec4<f32> = u_xlat7;
        let x_1576 : vec4<f32> = u_xlat9;
        u_xlat19 = (vec4<f32>(x_1574.y, x_1574.y, x_1574.y, x_1574.y) * x_1576);
        let x_1579 : vec4<f32> = u_xlat7;
        let x_1581 : vec4<f32> = u_xlat9;
        u_xlat20 = (vec4<f32>(x_1579.z, x_1579.z, x_1579.z, x_1579.z) * x_1581);
        let x_1583 : vec4<f32> = u_xlat7;
        let x_1585 : vec4<f32> = u_xlat9;
        u_xlat7 = (vec4<f32>(x_1583.w, x_1583.w, x_1583.w, x_1583.w) * x_1585);
        let x_1588 : vec4<f32> = u_xlat12;
        let x_1589 : vec2<f32> = vec2<f32>(x_1588.x, x_1588.y);
        let x_1591 : f32 = vs_INTERP8.z;
        txVec13 = vec3<f32>(x_1589.x, x_1589.y, x_1591);
        let x_1598 : vec3<f32> = txVec13;
        let x_1600 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1598.xy, x_1598.z);
        u_xlat68 = x_1600;
        let x_1602 : vec4<f32> = u_xlat12;
        let x_1603 : vec2<f32> = vec2<f32>(x_1602.z, x_1602.w);
        let x_1605 : f32 = vs_INTERP8.z;
        txVec14 = vec3<f32>(x_1603.x, x_1603.y, x_1605);
        let x_1613 : vec3<f32> = txVec14;
        let x_1615 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1613.xy, x_1613.z);
        u_xlat69 = x_1615;
        let x_1616 : f32 = u_xlat69;
        let x_1618 : f32 = u_xlat18.y;
        u_xlat69 = (x_1616 * x_1618);
        let x_1621 : f32 = u_xlat18.x;
        let x_1622 : f32 = u_xlat68;
        let x_1624 : f32 = u_xlat69;
        u_xlat68 = ((x_1621 * x_1622) + x_1624);
        let x_1627 : vec4<f32> = u_xlat13;
        let x_1628 : vec2<f32> = vec2<f32>(x_1627.x, x_1627.y);
        let x_1630 : f32 = vs_INTERP8.z;
        txVec15 = vec3<f32>(x_1628.x, x_1628.y, x_1630);
        let x_1637 : vec3<f32> = txVec15;
        let x_1639 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1637.xy, x_1637.z);
        u_xlat69 = x_1639;
        let x_1641 : f32 = u_xlat18.z;
        let x_1642 : f32 = u_xlat69;
        let x_1644 : f32 = u_xlat68;
        u_xlat68 = ((x_1641 * x_1642) + x_1644);
        let x_1647 : vec4<f32> = u_xlat15;
        let x_1648 : vec2<f32> = vec2<f32>(x_1647.x, x_1647.y);
        let x_1650 : f32 = vs_INTERP8.z;
        txVec16 = vec3<f32>(x_1648.x, x_1648.y, x_1650);
        let x_1657 : vec3<f32> = txVec16;
        let x_1659 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1657.xy, x_1657.z);
        u_xlat69 = x_1659;
        let x_1661 : f32 = u_xlat18.w;
        let x_1662 : f32 = u_xlat69;
        let x_1664 : f32 = u_xlat68;
        u_xlat68 = ((x_1661 * x_1662) + x_1664);
        let x_1667 : vec4<f32> = u_xlat14;
        let x_1668 : vec2<f32> = vec2<f32>(x_1667.x, x_1667.y);
        let x_1670 : f32 = vs_INTERP8.z;
        txVec17 = vec3<f32>(x_1668.x, x_1668.y, x_1670);
        let x_1677 : vec3<f32> = txVec17;
        let x_1679 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1677.xy, x_1677.z);
        u_xlat69 = x_1679;
        let x_1681 : f32 = u_xlat19.x;
        let x_1682 : f32 = u_xlat69;
        let x_1684 : f32 = u_xlat68;
        u_xlat68 = ((x_1681 * x_1682) + x_1684);
        let x_1687 : vec4<f32> = u_xlat14;
        let x_1688 : vec2<f32> = vec2<f32>(x_1687.z, x_1687.w);
        let x_1690 : f32 = vs_INTERP8.z;
        txVec18 = vec3<f32>(x_1688.x, x_1688.y, x_1690);
        let x_1697 : vec3<f32> = txVec18;
        let x_1699 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1697.xy, x_1697.z);
        u_xlat69 = x_1699;
        let x_1701 : f32 = u_xlat19.y;
        let x_1702 : f32 = u_xlat69;
        let x_1704 : f32 = u_xlat68;
        u_xlat68 = ((x_1701 * x_1702) + x_1704);
        let x_1707 : vec2<f32> = u_xlat55;
        let x_1709 : f32 = vs_INTERP8.z;
        txVec19 = vec3<f32>(x_1707.x, x_1707.y, x_1709);
        let x_1716 : vec3<f32> = txVec19;
        let x_1718 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1716.xy, x_1716.z);
        u_xlat69 = x_1718;
        let x_1720 : f32 = u_xlat19.z;
        let x_1721 : f32 = u_xlat69;
        let x_1723 : f32 = u_xlat68;
        u_xlat68 = ((x_1720 * x_1721) + x_1723);
        let x_1726 : vec4<f32> = u_xlat15;
        let x_1727 : vec2<f32> = vec2<f32>(x_1726.z, x_1726.w);
        let x_1729 : f32 = vs_INTERP8.z;
        txVec20 = vec3<f32>(x_1727.x, x_1727.y, x_1729);
        let x_1736 : vec3<f32> = txVec20;
        let x_1738 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1736.xy, x_1736.z);
        u_xlat69 = x_1738;
        let x_1740 : f32 = u_xlat19.w;
        let x_1741 : f32 = u_xlat69;
        let x_1743 : f32 = u_xlat68;
        u_xlat68 = ((x_1740 * x_1741) + x_1743);
        let x_1746 : vec4<f32> = u_xlat16;
        let x_1747 : vec2<f32> = vec2<f32>(x_1746.x, x_1746.y);
        let x_1749 : f32 = vs_INTERP8.z;
        txVec21 = vec3<f32>(x_1747.x, x_1747.y, x_1749);
        let x_1756 : vec3<f32> = txVec21;
        let x_1758 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1756.xy, x_1756.z);
        u_xlat69 = x_1758;
        let x_1760 : f32 = u_xlat20.x;
        let x_1761 : f32 = u_xlat69;
        let x_1763 : f32 = u_xlat68;
        u_xlat68 = ((x_1760 * x_1761) + x_1763);
        let x_1766 : vec4<f32> = u_xlat16;
        let x_1767 : vec2<f32> = vec2<f32>(x_1766.z, x_1766.w);
        let x_1769 : f32 = vs_INTERP8.z;
        txVec22 = vec3<f32>(x_1767.x, x_1767.y, x_1769);
        let x_1776 : vec3<f32> = txVec22;
        let x_1778 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1776.xy, x_1776.z);
        u_xlat69 = x_1778;
        let x_1780 : f32 = u_xlat20.y;
        let x_1781 : f32 = u_xlat69;
        let x_1783 : f32 = u_xlat68;
        u_xlat68 = ((x_1780 * x_1781) + x_1783);
        let x_1786 : vec3<f32> = u_xlat29;
        let x_1787 : vec2<f32> = vec2<f32>(x_1786.x, x_1786.y);
        let x_1789 : f32 = vs_INTERP8.z;
        txVec23 = vec3<f32>(x_1787.x, x_1787.y, x_1789);
        let x_1796 : vec3<f32> = txVec23;
        let x_1798 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1796.xy, x_1796.z);
        u_xlat69 = x_1798;
        let x_1800 : f32 = u_xlat20.z;
        let x_1801 : f32 = u_xlat69;
        let x_1803 : f32 = u_xlat68;
        u_xlat68 = ((x_1800 * x_1801) + x_1803);
        let x_1806 : vec2<f32> = u_xlat17;
        let x_1808 : f32 = vs_INTERP8.z;
        txVec24 = vec3<f32>(x_1806.x, x_1806.y, x_1808);
        let x_1815 : vec3<f32> = txVec24;
        let x_1817 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1815.xy, x_1815.z);
        u_xlat69 = x_1817;
        let x_1819 : f32 = u_xlat20.w;
        let x_1820 : f32 = u_xlat69;
        let x_1822 : f32 = u_xlat68;
        u_xlat68 = ((x_1819 * x_1820) + x_1822);
        let x_1825 : vec4<f32> = u_xlat11;
        let x_1826 : vec2<f32> = vec2<f32>(x_1825.x, x_1825.y);
        let x_1828 : f32 = vs_INTERP8.z;
        txVec25 = vec3<f32>(x_1826.x, x_1826.y, x_1828);
        let x_1835 : vec3<f32> = txVec25;
        let x_1837 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1835.xy, x_1835.z);
        u_xlat69 = x_1837;
        let x_1839 : f32 = u_xlat7.x;
        let x_1840 : f32 = u_xlat69;
        let x_1842 : f32 = u_xlat68;
        u_xlat68 = ((x_1839 * x_1840) + x_1842);
        let x_1845 : vec4<f32> = u_xlat11;
        let x_1846 : vec2<f32> = vec2<f32>(x_1845.z, x_1845.w);
        let x_1848 : f32 = vs_INTERP8.z;
        txVec26 = vec3<f32>(x_1846.x, x_1846.y, x_1848);
        let x_1855 : vec3<f32> = txVec26;
        let x_1857 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1855.xy, x_1855.z);
        u_xlat69 = x_1857;
        let x_1859 : f32 = u_xlat7.y;
        let x_1860 : f32 = u_xlat69;
        let x_1862 : f32 = u_xlat68;
        u_xlat68 = ((x_1859 * x_1860) + x_1862);
        let x_1865 : vec2<f32> = u_xlat52;
        let x_1867 : f32 = vs_INTERP8.z;
        txVec27 = vec3<f32>(x_1865.x, x_1865.y, x_1867);
        let x_1874 : vec3<f32> = txVec27;
        let x_1876 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1874.xy, x_1874.z);
        u_xlat69 = x_1876;
        let x_1878 : f32 = u_xlat7.z;
        let x_1879 : f32 = u_xlat69;
        let x_1881 : f32 = u_xlat68;
        u_xlat68 = ((x_1878 * x_1879) + x_1881);
        let x_1884 : vec3<f32> = u_xlat26;
        let x_1885 : vec2<f32> = vec2<f32>(x_1884.x, x_1884.y);
        let x_1887 : f32 = vs_INTERP8.z;
        txVec28 = vec3<f32>(x_1885.x, x_1885.y, x_1887);
        let x_1894 : vec3<f32> = txVec28;
        let x_1896 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1894.xy, x_1894.z);
        u_xlat26.x = x_1896;
        let x_1899 : f32 = u_xlat7.w;
        let x_1901 : f32 = u_xlat26.x;
        let x_1903 : f32 = u_xlat68;
        u_xlat67 = ((x_1899 * x_1901) + x_1903);
      }
    }
  } else {
    let x_1907 : vec4<f32> = vs_INTERP8;
    let x_1908 : vec2<f32> = vec2<f32>(x_1907.x, x_1907.y);
    let x_1910 : f32 = vs_INTERP8.z;
    txVec29 = vec3<f32>(x_1908.x, x_1908.y, x_1910);
    let x_1917 : vec3<f32> = txVec29;
    let x_1919 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1917.xy, x_1917.z);
    u_xlat67 = x_1919;
  }
  let x_1921 : f32 = x_686.x_MainLightShadowParams.x;
  u_xlat26.x = (-(x_1921) + 1.0f);
  let x_1925 : f32 = u_xlat67;
  let x_1927 : f32 = x_686.x_MainLightShadowParams.x;
  let x_1930 : f32 = u_xlat26.x;
  u_xlat67 = ((x_1925 * x_1927) + x_1930);
  let x_1933 : f32 = vs_INTERP8.z;
  u_xlatb26 = (0.0f >= x_1933);
  let x_1937 : f32 = vs_INTERP8.z;
  u_xlatb47 = (x_1937 >= 1.0f);
  let x_1939 : bool = u_xlatb47;
  let x_1940 : bool = u_xlatb26;
  u_xlatb26 = (x_1939 | x_1940);
  let x_1942 : bool = u_xlatb26;
  let x_1943 : f32 = u_xlat67;
  u_xlat67 = select(x_1943, 1.0f, x_1942);
  let x_1945 : vec3<f32> = vs_INTERP0;
  let x_1947 : vec3<f32> = x_44.x_WorldSpaceCameraPos;
  u_xlat26 = (x_1945 + -(x_1947));
  let x_1950 : vec3<f32> = u_xlat26;
  let x_1951 : vec3<f32> = u_xlat26;
  u_xlat26.x = dot(x_1950, x_1951);
  let x_1955 : f32 = u_xlat26.x;
  let x_1957 : f32 = x_686.x_MainLightShadowParams.z;
  let x_1960 : f32 = x_686.x_MainLightShadowParams.w;
  u_xlat26.x = ((x_1955 * x_1957) + x_1960);
  let x_1964 : f32 = u_xlat26.x;
  u_xlat26.x = clamp(x_1964, 0.0f, 1.0f);
  let x_1967 : f32 = u_xlat67;
  u_xlat47 = (-(x_1967) + 1.0f);
  let x_1971 : f32 = u_xlat26.x;
  let x_1972 : f32 = u_xlat47;
  let x_1974 : f32 = u_xlat67;
  u_xlat67 = ((x_1971 * x_1972) + x_1974);
  let x_1976 : vec3<f32> = u_xlat5;
  let x_1979 : vec4<f32> = x_44.x_MainLightColor;
  u_xlat26 = (vec3<f32>(x_1976.x, x_1976.x, x_1976.x) * vec3<f32>(x_1979.x, x_1979.y, x_1979.z));
  let x_1982 : vec4<f32> = u_xlat3;
  let x_1985 : vec4<f32> = u_xlat1;
  u_xlat69 = dot(-(vec3<f32>(x_1982.x, x_1982.y, x_1982.z)), vec3<f32>(x_1985.x, x_1985.y, x_1985.z));
  let x_1988 : f32 = u_xlat69;
  let x_1989 : f32 = u_xlat69;
  u_xlat69 = (x_1988 + x_1989);
  let x_1991 : vec4<f32> = u_xlat1;
  let x_1993 : f32 = u_xlat69;
  let x_1997 : vec4<f32> = u_xlat3;
  let x_2000 : vec3<f32> = ((vec3<f32>(x_1991.x, x_1991.y, x_1991.z) * -(vec3<f32>(x_1993, x_1993, x_1993))) + -(vec3<f32>(x_1997.x, x_1997.y, x_1997.z)));
  let x_2001 : vec4<f32> = u_xlat7;
  u_xlat7 = vec4<f32>(x_2000.x, x_2000.y, x_2000.z, x_2001.w);
  let x_2003 : vec4<f32> = u_xlat1;
  let x_2005 : vec4<f32> = u_xlat3;
  u_xlat69 = dot(vec3<f32>(x_2003.x, x_2003.y, x_2003.z), vec3<f32>(x_2005.x, x_2005.y, x_2005.z));
  let x_2008 : f32 = u_xlat69;
  u_xlat69 = clamp(x_2008, 0.0f, 1.0f);
  let x_2010 : f32 = u_xlat69;
  u_xlat69 = (-(x_2010) + 1.0f);
  let x_2013 : f32 = u_xlat69;
  let x_2014 : f32 = u_xlat69;
  u_xlat69 = (x_2013 * x_2014);
  let x_2016 : f32 = u_xlat69;
  let x_2017 : f32 = u_xlat69;
  u_xlat69 = (x_2016 * x_2017);
  let x_2020 : f32 = u_xlat64;
  u_xlat70 = ((-(x_2020) * 0.699999988f) + 1.700000048f);
  let x_2026 : f32 = u_xlat64;
  let x_2027 : f32 = u_xlat70;
  u_xlat64 = (x_2026 * x_2027);
  let x_2029 : f32 = u_xlat64;
  u_xlat64 = (x_2029 * 6.0f);
  let x_2039 : vec4<f32> = u_xlat7;
  let x_2041 : f32 = u_xlat64;
  let x_2042 : vec4<f32> = textureSampleLevel(unity_SpecCube0, samplerunity_SpecCube0, vec3<f32>(x_2039.x, x_2039.y, x_2039.z), x_2041);
  u_xlat7 = x_2042;
  let x_2044 : f32 = u_xlat7.w;
  u_xlat64 = (x_2044 + -1.0f);
  let x_2047 : f32 = x_359.unity_SpecCube0_HDR.w;
  let x_2048 : f32 = u_xlat64;
  u_xlat64 = ((x_2047 * x_2048) + 1.0f);
  let x_2051 : f32 = u_xlat64;
  u_xlat64 = max(x_2051, 0.0f);
  let x_2053 : f32 = u_xlat64;
  u_xlat64 = log2(x_2053);
  let x_2055 : f32 = u_xlat64;
  let x_2057 : f32 = x_359.unity_SpecCube0_HDR.y;
  u_xlat64 = (x_2055 * x_2057);
  let x_2059 : f32 = u_xlat64;
  u_xlat64 = exp2(x_2059);
  let x_2061 : f32 = u_xlat64;
  let x_2063 : f32 = x_359.unity_SpecCube0_HDR.x;
  u_xlat64 = (x_2061 * x_2063);
  let x_2065 : vec4<f32> = u_xlat7;
  let x_2067 : f32 = u_xlat64;
  let x_2069 : vec3<f32> = (vec3<f32>(x_2065.x, x_2065.y, x_2065.z) * vec3<f32>(x_2067, x_2067, x_2067));
  let x_2070 : vec4<f32> = u_xlat7;
  u_xlat7 = vec4<f32>(x_2069.x, x_2069.y, x_2069.z, x_2070.w);
  let x_2072 : vec4<f32> = u_xlat2;
  let x_2074 : vec4<f32> = u_xlat2;
  let x_2078 : vec2<f32> = ((vec2<f32>(x_2072.x, x_2072.x) * vec2<f32>(x_2074.x, x_2074.x)) + vec2<f32>(-1.0f, 1.0f));
  let x_2079 : vec4<f32> = u_xlat8;
  u_xlat8 = vec4<f32>(x_2078.x, x_2078.y, x_2079.z, x_2079.w);
  let x_2082 : f32 = u_xlat8.y;
  u_xlat64 = (1.0f / x_2082);
  let x_2084 : vec4<f32> = u_xlat0;
  let x_2087 : f32 = u_xlat65;
  u_xlat29 = (-(vec3<f32>(x_2084.x, x_2084.y, x_2084.z)) + vec3<f32>(x_2087, x_2087, x_2087));
  let x_2090 : f32 = u_xlat69;
  let x_2092 : vec3<f32> = u_xlat29;
  let x_2094 : vec4<f32> = u_xlat0;
  u_xlat29 = ((vec3<f32>(x_2090, x_2090, x_2090) * x_2092) + vec3<f32>(x_2094.x, x_2094.y, x_2094.z));
  let x_2097 : f32 = u_xlat64;
  let x_2099 : vec3<f32> = u_xlat29;
  u_xlat29 = (vec3<f32>(x_2097, x_2097, x_2097) * x_2099);
  let x_2101 : vec4<f32> = u_xlat7;
  let x_2103 : vec3<f32> = u_xlat29;
  let x_2104 : vec3<f32> = (vec3<f32>(x_2101.x, x_2101.y, x_2101.z) * x_2103);
  let x_2105 : vec4<f32> = u_xlat7;
  u_xlat7 = vec4<f32>(x_2104.x, x_2104.y, x_2104.z, x_2105.w);
  let x_2107 : vec3<f32> = u_xlat4;
  let x_2108 : vec3<f32> = u_xlat6;
  let x_2110 : vec4<f32> = u_xlat7;
  u_xlat4 = ((x_2107 * x_2108) + vec3<f32>(x_2110.x, x_2110.y, x_2110.z));
  let x_2113 : f32 = u_xlat67;
  let x_2116 : f32 = x_359.unity_LightData.z;
  u_xlat64 = (x_2113 * x_2116);
  let x_2118 : vec4<f32> = u_xlat1;
  let x_2121 : vec4<f32> = x_44.x_MainLightPosition;
  u_xlat2.x = dot(vec3<f32>(x_2118.x, x_2118.y, x_2118.z), vec3<f32>(x_2121.x, x_2121.y, x_2121.z));
  let x_2126 : f32 = u_xlat2.x;
  u_xlat2.x = clamp(x_2126, 0.0f, 1.0f);
  let x_2129 : f32 = u_xlat64;
  let x_2131 : f32 = u_xlat2.x;
  u_xlat64 = (x_2129 * x_2131);
  let x_2133 : f32 = u_xlat64;
  let x_2135 : vec3<f32> = u_xlat26;
  u_xlat26 = (vec3<f32>(x_2133, x_2133, x_2133) * x_2135);
  let x_2137 : vec4<f32> = u_xlat3;
  let x_2140 : vec4<f32> = x_44.x_MainLightPosition;
  let x_2142 : vec3<f32> = (vec3<f32>(x_2137.x, x_2137.y, x_2137.z) + vec3<f32>(x_2140.x, x_2140.y, x_2140.z));
  let x_2143 : vec4<f32> = u_xlat7;
  u_xlat7 = vec4<f32>(x_2142.x, x_2142.y, x_2142.z, x_2143.w);
  let x_2145 : vec4<f32> = u_xlat7;
  let x_2147 : vec4<f32> = u_xlat7;
  u_xlat64 = dot(vec3<f32>(x_2145.x, x_2145.y, x_2145.z), vec3<f32>(x_2147.x, x_2147.y, x_2147.z));
  let x_2150 : f32 = u_xlat64;
  u_xlat64 = max(x_2150, 1.17549435e-37f);
  let x_2153 : f32 = u_xlat64;
  u_xlat64 = inverseSqrt(x_2153);
  let x_2155 : f32 = u_xlat64;
  let x_2157 : vec4<f32> = u_xlat7;
  let x_2159 : vec3<f32> = (vec3<f32>(x_2155, x_2155, x_2155) * vec3<f32>(x_2157.x, x_2157.y, x_2157.z));
  let x_2160 : vec4<f32> = u_xlat7;
  u_xlat7 = vec4<f32>(x_2159.x, x_2159.y, x_2159.z, x_2160.w);
  let x_2162 : vec4<f32> = u_xlat1;
  let x_2164 : vec4<f32> = u_xlat7;
  u_xlat64 = dot(vec3<f32>(x_2162.x, x_2162.y, x_2162.z), vec3<f32>(x_2164.x, x_2164.y, x_2164.z));
  let x_2167 : f32 = u_xlat64;
  u_xlat64 = clamp(x_2167, 0.0f, 1.0f);
  let x_2170 : vec4<f32> = x_44.x_MainLightPosition;
  let x_2172 : vec4<f32> = u_xlat7;
  u_xlat2.x = dot(vec3<f32>(x_2170.x, x_2170.y, x_2170.z), vec3<f32>(x_2172.x, x_2172.y, x_2172.z));
  let x_2177 : f32 = u_xlat2.x;
  u_xlat2.x = clamp(x_2177, 0.0f, 1.0f);
  let x_2180 : f32 = u_xlat64;
  let x_2181 : f32 = u_xlat64;
  u_xlat64 = (x_2180 * x_2181);
  let x_2183 : f32 = u_xlat64;
  let x_2185 : f32 = u_xlat8.x;
  u_xlat64 = ((x_2183 * x_2185) + 1.000010014f);
  let x_2190 : f32 = u_xlat2.x;
  let x_2192 : f32 = u_xlat2.x;
  u_xlat2.x = (x_2190 * x_2192);
  let x_2195 : f32 = u_xlat64;
  let x_2196 : f32 = u_xlat64;
  u_xlat64 = (x_2195 * x_2196);
  let x_2199 : f32 = u_xlat2.x;
  u_xlat2.x = max(x_2199, 0.100000001f);
  let x_2203 : f32 = u_xlat64;
  let x_2205 : f32 = u_xlat2.x;
  u_xlat64 = (x_2203 * x_2205);
  let x_2207 : f32 = u_xlat66;
  let x_2208 : f32 = u_xlat64;
  u_xlat64 = (x_2207 * x_2208);
  let x_2210 : f32 = u_xlat23;
  let x_2211 : f32 = u_xlat64;
  u_xlat64 = (x_2210 / x_2211);
  let x_2213 : vec4<f32> = u_xlat0;
  let x_2215 : f32 = u_xlat64;
  let x_2218 : vec3<f32> = u_xlat6;
  let x_2219 : vec3<f32> = ((vec3<f32>(x_2213.x, x_2213.y, x_2213.z) * vec3<f32>(x_2215, x_2215, x_2215)) + x_2218);
  let x_2220 : vec4<f32> = u_xlat7;
  u_xlat7 = vec4<f32>(x_2219.x, x_2219.y, x_2219.z, x_2220.w);
  let x_2222 : vec3<f32> = u_xlat26;
  let x_2223 : vec4<f32> = u_xlat7;
  u_xlat26 = (x_2222 * vec3<f32>(x_2223.x, x_2223.y, x_2223.z));
  let x_2227 : f32 = x_44.x_AdditionalLightsCount.x;
  let x_2229 : f32 = x_359.unity_LightData.y;
  u_xlat64 = min(x_2227, x_2229);
  let x_2233 : f32 = u_xlat64;
  u_xlatu64 = bitcast<u32>(i32(x_2233));
  u_xlat7.x = 0.0f;
  u_xlat7.y = 0.0f;
  u_xlat7.z = 0.0f;
  u_xlatu_loop_1 = 0u;
  loop {
    let x_2245 : u32 = u_xlatu_loop_1;
    let x_2246 : u32 = u_xlatu64;
    if ((x_2245 < x_2246)) {
    } else {
      break;
    }
    let x_2249 : u32 = u_xlatu_loop_1;
    u_xlatu65 = (x_2249 >> 2u);
    let x_2253 : u32 = u_xlatu_loop_1;
    u_xlati67 = bitcast<i32>((x_2253 & 3u));
    let x_2256 : u32 = u_xlatu65;
    let x_2259 : vec4<f32> = x_359.unity_LightIndices[bitcast<i32>(x_2256)];
    let x_2269 : i32 = u_xlati67;
    indexable = array<vec4<u32>, 4u>(vec4<u32>(1065353216u, 0u, 0u, 0u), vec4<u32>(0u, 1065353216u, 0u, 0u), vec4<u32>(0u, 0u, 1065353216u, 0u), vec4<u32>(0u, 0u, 0u, 1065353216u));
    let x_2274 : vec4<u32> = indexable[x_2269];
    u_xlat65 = dot(x_2259, bitcast<vec4<f32>>(x_2274));
    let x_2278 : f32 = u_xlat65;
    u_xlati65 = i32(x_2278);
    let x_2280 : vec3<f32> = vs_INTERP0;
    let x_2292 : i32 = u_xlati65;
    let x_2294 : vec4<f32> = x_2291.x_AdditionalLightsPosition[x_2292];
    let x_2297 : i32 = u_xlati65;
    let x_2299 : vec4<f32> = x_2291.x_AdditionalLightsPosition[x_2297];
    u_xlat29 = ((-(x_2280) * vec3<f32>(x_2294.w, x_2294.w, x_2294.w)) + vec3<f32>(x_2299.x, x_2299.y, x_2299.z));
    let x_2302 : vec3<f32> = u_xlat29;
    let x_2303 : vec3<f32> = u_xlat29;
    u_xlat67 = dot(x_2302, x_2303);
    let x_2305 : f32 = u_xlat67;
    u_xlat67 = max(x_2305, 6.10351562e-05f);
    let x_2308 : f32 = u_xlat67;
    u_xlat69 = inverseSqrt(x_2308);
    let x_2310 : f32 = u_xlat69;
    let x_2312 : vec3<f32> = u_xlat29;
    let x_2313 : vec3<f32> = (vec3<f32>(x_2310, x_2310, x_2310) * x_2312);
    let x_2314 : vec4<f32> = u_xlat9;
    u_xlat9 = vec4<f32>(x_2313.x, x_2313.y, x_2313.z, x_2314.w);
    let x_2316 : f32 = u_xlat67;
    u_xlat70 = (1.0f / x_2316);
    let x_2318 : f32 = u_xlat67;
    let x_2319 : i32 = u_xlati65;
    let x_2321 : f32 = x_2291.x_AdditionalLightsAttenuation[x_2319].x;
    u_xlat67 = (x_2318 * x_2321);
    let x_2323 : f32 = u_xlat67;
    let x_2325 : f32 = u_xlat67;
    u_xlat67 = ((-(x_2323) * x_2325) + 1.0f);
    let x_2328 : f32 = u_xlat67;
    u_xlat67 = max(x_2328, 0.0f);
    let x_2330 : f32 = u_xlat67;
    let x_2331 : f32 = u_xlat67;
    u_xlat67 = (x_2330 * x_2331);
    let x_2333 : f32 = u_xlat67;
    let x_2334 : f32 = u_xlat70;
    u_xlat67 = (x_2333 * x_2334);
    let x_2336 : i32 = u_xlati65;
    let x_2338 : vec4<f32> = x_2291.x_AdditionalLightsSpotDir[x_2336];
    let x_2340 : vec4<f32> = u_xlat9;
    u_xlat70 = dot(vec3<f32>(x_2338.x, x_2338.y, x_2338.z), vec3<f32>(x_2340.x, x_2340.y, x_2340.z));
    let x_2343 : f32 = u_xlat70;
    let x_2344 : i32 = u_xlati65;
    let x_2346 : f32 = x_2291.x_AdditionalLightsAttenuation[x_2344].z;
    let x_2348 : i32 = u_xlati65;
    let x_2350 : f32 = x_2291.x_AdditionalLightsAttenuation[x_2348].w;
    u_xlat70 = ((x_2343 * x_2346) + x_2350);
    let x_2352 : f32 = u_xlat70;
    u_xlat70 = clamp(x_2352, 0.0f, 1.0f);
    let x_2354 : f32 = u_xlat70;
    let x_2355 : f32 = u_xlat70;
    u_xlat70 = (x_2354 * x_2355);
    let x_2357 : f32 = u_xlat67;
    let x_2358 : f32 = u_xlat70;
    u_xlat67 = (x_2357 * x_2358);
    let x_2360 : vec3<f32> = u_xlat5;
    let x_2362 : i32 = u_xlati65;
    let x_2364 : vec4<f32> = x_2291.x_AdditionalLightsColor[x_2362];
    let x_2366 : vec3<f32> = (vec3<f32>(x_2360.x, x_2360.x, x_2360.x) * vec3<f32>(x_2364.x, x_2364.y, x_2364.z));
    let x_2367 : vec4<f32> = u_xlat10;
    u_xlat10 = vec4<f32>(x_2366.x, x_2366.y, x_2366.z, x_2367.w);
    let x_2369 : vec4<f32> = u_xlat1;
    let x_2371 : vec4<f32> = u_xlat9;
    u_xlat65 = dot(vec3<f32>(x_2369.x, x_2369.y, x_2369.z), vec3<f32>(x_2371.x, x_2371.y, x_2371.z));
    let x_2374 : f32 = u_xlat65;
    u_xlat65 = clamp(x_2374, 0.0f, 1.0f);
    let x_2376 : f32 = u_xlat65;
    let x_2377 : f32 = u_xlat67;
    u_xlat65 = (x_2376 * x_2377);
    let x_2379 : f32 = u_xlat65;
    let x_2381 : vec4<f32> = u_xlat10;
    let x_2383 : vec3<f32> = (vec3<f32>(x_2379, x_2379, x_2379) * vec3<f32>(x_2381.x, x_2381.y, x_2381.z));
    let x_2384 : vec4<f32> = u_xlat10;
    u_xlat10 = vec4<f32>(x_2383.x, x_2383.y, x_2383.z, x_2384.w);
    let x_2386 : vec3<f32> = u_xlat29;
    let x_2387 : f32 = u_xlat69;
    let x_2390 : vec4<f32> = u_xlat3;
    u_xlat29 = ((x_2386 * vec3<f32>(x_2387, x_2387, x_2387)) + vec3<f32>(x_2390.x, x_2390.y, x_2390.z));
    let x_2393 : vec3<f32> = u_xlat29;
    let x_2394 : vec3<f32> = u_xlat29;
    u_xlat65 = dot(x_2393, x_2394);
    let x_2396 : f32 = u_xlat65;
    u_xlat65 = max(x_2396, 1.17549435e-37f);
    let x_2398 : f32 = u_xlat65;
    u_xlat65 = inverseSqrt(x_2398);
    let x_2400 : f32 = u_xlat65;
    let x_2402 : vec3<f32> = u_xlat29;
    u_xlat29 = (vec3<f32>(x_2400, x_2400, x_2400) * x_2402);
    let x_2404 : vec4<f32> = u_xlat1;
    let x_2406 : vec3<f32> = u_xlat29;
    u_xlat65 = dot(vec3<f32>(x_2404.x, x_2404.y, x_2404.z), x_2406);
    let x_2408 : f32 = u_xlat65;
    u_xlat65 = clamp(x_2408, 0.0f, 1.0f);
    let x_2410 : vec4<f32> = u_xlat9;
    let x_2412 : vec3<f32> = u_xlat29;
    u_xlat67 = dot(vec3<f32>(x_2410.x, x_2410.y, x_2410.z), x_2412);
    let x_2414 : f32 = u_xlat67;
    u_xlat67 = clamp(x_2414, 0.0f, 1.0f);
    let x_2416 : f32 = u_xlat65;
    let x_2417 : f32 = u_xlat65;
    u_xlat65 = (x_2416 * x_2417);
    let x_2419 : f32 = u_xlat65;
    let x_2421 : f32 = u_xlat8.x;
    u_xlat65 = ((x_2419 * x_2421) + 1.000010014f);
    let x_2424 : f32 = u_xlat67;
    let x_2425 : f32 = u_xlat67;
    u_xlat67 = (x_2424 * x_2425);
    let x_2427 : f32 = u_xlat65;
    let x_2428 : f32 = u_xlat65;
    u_xlat65 = (x_2427 * x_2428);
    let x_2430 : f32 = u_xlat67;
    u_xlat67 = max(x_2430, 0.100000001f);
    let x_2432 : f32 = u_xlat65;
    let x_2433 : f32 = u_xlat67;
    u_xlat65 = (x_2432 * x_2433);
    let x_2435 : f32 = u_xlat66;
    let x_2436 : f32 = u_xlat65;
    u_xlat65 = (x_2435 * x_2436);
    let x_2438 : f32 = u_xlat23;
    let x_2439 : f32 = u_xlat65;
    u_xlat65 = (x_2438 / x_2439);
    let x_2441 : vec4<f32> = u_xlat0;
    let x_2443 : f32 = u_xlat65;
    let x_2446 : vec3<f32> = u_xlat6;
    u_xlat29 = ((vec3<f32>(x_2441.x, x_2441.y, x_2441.z) * vec3<f32>(x_2443, x_2443, x_2443)) + x_2446);
    let x_2448 : vec3<f32> = u_xlat29;
    let x_2449 : vec4<f32> = u_xlat10;
    let x_2452 : vec4<f32> = u_xlat7;
    let x_2454 : vec3<f32> = ((x_2448 * vec3<f32>(x_2449.x, x_2449.y, x_2449.z)) + vec3<f32>(x_2452.x, x_2452.y, x_2452.z));
    let x_2455 : vec4<f32> = u_xlat7;
    u_xlat7 = vec4<f32>(x_2454.x, x_2454.y, x_2454.z, x_2455.w);

    continuing {
      let x_2457 : u32 = u_xlatu_loop_1;
      u_xlatu_loop_1 = (x_2457 + bitcast<u32>(1i));
    }
  }
  let x_2459 : vec3<f32> = u_xlat4;
  let x_2460 : f32 = u_xlat44;
  let x_2463 : vec3<f32> = u_xlat26;
  let x_2464 : vec3<f32> = ((x_2459 * vec3<f32>(x_2460, x_2460, x_2460)) + x_2463);
  let x_2465 : vec4<f32> = u_xlat0;
  u_xlat0 = vec4<f32>(x_2464.x, x_2464.y, x_2464.z, x_2465.w);
  let x_2467 : vec4<f32> = u_xlat7;
  let x_2469 : vec4<f32> = u_xlat0;
  let x_2471 : vec3<f32> = (vec3<f32>(x_2467.x, x_2467.y, x_2467.z) + vec3<f32>(x_2469.x, x_2469.y, x_2469.z));
  let x_2472 : vec4<f32> = u_xlat0;
  u_xlat0 = vec4<f32>(x_2471.x, x_2471.y, x_2471.z, x_2472.w);
  let x_2474 : f32 = u_xlat63;
  let x_2475 : f32 = u_xlat63;
  u_xlat63 = (x_2474 * -(x_2475));
  let x_2478 : f32 = u_xlat63;
  u_xlat63 = exp2(x_2478);
  let x_2480 : vec4<f32> = u_xlat0;
  let x_2484 : vec4<f32> = x_44.unity_FogColor;
  let x_2487 : vec3<f32> = (vec3<f32>(x_2480.x, x_2480.y, x_2480.z) + -(vec3<f32>(x_2484.x, x_2484.y, x_2484.z)));
  let x_2488 : vec4<f32> = u_xlat0;
  u_xlat0 = vec4<f32>(x_2487.x, x_2487.y, x_2487.z, x_2488.w);
  let x_2492 : f32 = u_xlat63;
  let x_2494 : vec4<f32> = u_xlat0;
  let x_2498 : vec4<f32> = x_44.unity_FogColor;
  let x_2500 : vec3<f32> = ((vec3<f32>(x_2492, x_2492, x_2492) * vec3<f32>(x_2494.x, x_2494.y, x_2494.z)) + vec3<f32>(x_2498.x, x_2498.y, x_2498.z));
  let x_2501 : vec4<f32> = SV_Target0;
  SV_Target0 = vec4<f32>(x_2500.x, x_2500.y, x_2500.z, x_2501.w);
  SV_Target0.w = 1.0f;
  return;
}

struct main_out {
  @location(0)
  SV_Target0_1 : vec4<f32>,
}

@fragment
fn main(@builtin(position) gl_FragCoord_param : vec4<f32>, @location(3) vs_INTERP3_param : vec4<f32>, @location(2) vs_INTERP2_param : vec4<f32>, @location(1) vs_INTERP1_param : vec3<f32>, @location(0) vs_INTERP0_param : vec3<f32>, @location(4) vs_INTERP4_param : vec2<f32>, @location(5) vs_INTERP8_param : vec4<f32>) -> main_out {
  gl_FragCoord = gl_FragCoord_param;
  vs_INTERP3 = vs_INTERP3_param;
  vs_INTERP2 = vs_INTERP2_param;
  vs_INTERP1 = vs_INTERP1_param;
  vs_INTERP0 = vs_INTERP0_param;
  vs_INTERP4 = vs_INTERP4_param;
  vs_INTERP8 = vs_INTERP8_param;
  main_1();
  return main_out(SV_Target0);
}

