struct PGlobals {
  x_ScaledScreenParams : vec4<f32>,
  x_GlobalMipBias : vec2<f32>,
  @size(8)
  padding : u32,
  x_MainLightPosition : vec4<f32>,
  x_MainLightColor : vec4<f32>,
  x_AmbientOcclusionParam : vec4<f32>,
  x_AdditionalLightsCount : vec4<f32>,
  x_WorldSpaceCameraPos : vec3<f32>,
  @size(4)
  padding_1 : u32,
  unity_OrthoParams : vec4<f32>,
  x_ScaleBiasRt : vec4<f32>,
  unity_MatrixV : mat4x4<f32>,
}

struct UnityPerMaterial {
  x_MainTex_TexelSize : vec4<f32>,
  x_MRLL_TexelSize : vec4<f32>,
  x_BumpMap_TexelSize : vec4<f32>,
  x_Color1 : vec4<f32>,
  x_Color2 : vec4<f32>,
}

type Arr = array<vec4<f32>, 2u>;

struct UnityPerDraw {
  unity_ObjectToWorld : mat4x4<f32>,
  unity_WorldToObject : mat4x4<f32>,
  unity_LODFade : vec4<f32>,
  unity_WorldTransformParams : vec4<f32>,
  unity_RenderingLayer : vec4<f32>,
  unity_LightData : vec4<f32>,
  unity_LightIndices : Arr,
  unity_ProbesOcclusion : vec4<f32>,
  unity_SpecCube0_HDR : vec4<f32>,
  unity_SpecCube1_HDR : vec4<f32>,
  unity_SpecCube0_BoxMax : vec4<f32>,
  unity_SpecCube0_BoxMin : vec4<f32>,
  unity_SpecCube0_ProbePosition : vec4<f32>,
  unity_SpecCube1_BoxMax : vec4<f32>,
  unity_SpecCube1_BoxMin : vec4<f32>,
  unity_SpecCube1_ProbePosition : vec4<f32>,
  unity_LightmapST : vec4<f32>,
  unity_DynamicLightmapST : vec4<f32>,
  unity_SHAr : vec4<f32>,
  unity_SHAg : vec4<f32>,
  unity_SHAb : vec4<f32>,
  unity_SHBr : vec4<f32>,
  unity_SHBg : vec4<f32>,
  unity_SHBb : vec4<f32>,
  unity_SHC : vec4<f32>,
  unity_RendererBounds_Min : vec4<f32>,
  unity_RendererBounds_Max : vec4<f32>,
  unity_MatrixPreviousM : mat4x4<f32>,
  unity_MatrixPreviousMI : mat4x4<f32>,
  unity_MotionVectorsParams : vec4<f32>,
  unity_SpriteColor : vec4<f32>,
  unity_SpriteProps : vec4<f32>,
}

type Arr_1 = array<mat4x4<f32>, 5u>;

struct MainLightShadows {
  x_MainLightWorldToShadow : Arr_1,
  x_CascadeShadowSplitSpheres0 : vec4<f32>,
  x_CascadeShadowSplitSpheres1 : vec4<f32>,
  x_CascadeShadowSplitSpheres2 : vec4<f32>,
  x_CascadeShadowSplitSpheres3 : vec4<f32>,
  x_CascadeShadowSplitSphereRadii : vec4<f32>,
  x_MainLightShadowOffset0 : vec4<f32>,
  x_MainLightShadowOffset1 : vec4<f32>,
  x_MainLightShadowParams : vec4<f32>,
  x_MainLightShadowmapSize : vec4<f32>,
}

type Arr_2 = array<vec4<f32>, 256u>;

type Arr_3 = array<vec4<f32>, 256u>;

type Arr_4 = array<vec4<f32>, 256u>;

type Arr_5 = array<vec4<f32>, 256u>;

type Arr_6 = array<vec4<f32>, 256u>;

struct strided_arr {
  @size(16)
  el : f32,
}

type Arr_7 = array<strided_arr, 256u>;

struct AdditionalLights {
  x_AdditionalLightsPosition : Arr_6,
  x_AdditionalLightsColor : Arr_6,
  x_AdditionalLightsAttenuation : Arr_6,
  x_AdditionalLightsSpotDir : Arr_6,
  x_AdditionalLightsOcclusionProbes : Arr_6,
  x_AdditionalLightsLayerMasks : Arr_7,
}

var<private> gl_FragCoord : vec4<f32>;

@group(0) @binding(3) var x_MainTex : texture_2d<f32>;

@group(0) @binding(9) var samplerSamplerState_Trilinear_Clamp : sampler;

var<private> vs_INTERP3 : vec4<f32>;

@group(1) @binding(0) var<uniform> x_44 : PGlobals;

@group(0) @binding(4) var x_MRLL : texture_2d<f32>;

@group(1) @binding(4) var<uniform> x_68 : UnityPerMaterial;

@group(0) @binding(5) var x_BumpMap : texture_2d<f32>;

var<private> vs_INTERP2 : vec4<f32>;

@group(1) @binding(2) var<uniform> x_281 : UnityPerDraw;

var<private> vs_INTERP1 : vec3<f32>;

var<private> vs_INTERP0 : vec3<f32>;

@group(1) @binding(3) var<uniform> x_430 : MainLightShadows;

@group(0) @binding(1) var x_ScreenSpaceOcclusionTexture : texture_2d<f32>;

@group(0) @binding(7) var sampler_ScreenSpaceOcclusionTexture : sampler;

@group(0) @binding(2) var x_MainLightShadowmapTexture : texture_depth_2d;

@group(0) @binding(8) var sampler_MainLightShadowmapTexture : sampler_comparison;

@group(0) @binding(0) var unity_SpecCube0 : texture_cube<f32>;

@group(0) @binding(6) var samplerunity_SpecCube0 : sampler;

@group(1) @binding(1) var<uniform> x_2439 : AdditionalLights;

var<private> SV_Target0 : vec4<f32>;

fn main_1() {
  var hlslcc_FragCoord : vec4<f32>;
  var u_xlat0 : vec4<f32>;
  var u_xlat1 : vec4<f32>;
  var u_xlat2 : vec3<f32>;
  var u_xlat43 : f32;
  var u_xlat3 : vec4<f32>;
  var u_xlat4 : vec3<f32>;
  var u_xlatb4 : vec3<bool>;
  var u_xlat5 : vec3<f32>;
  var u_xlat21 : vec2<f32>;
  var u_xlatb22 : vec3<bool>;
  var u_xlat22 : vec3<f32>;
  var u_xlatb21 : bool;
  var u_xlat42 : f32;
  var x_390 : f32;
  var x_403 : f32;
  var x_414 : f32;
  var u_xlat6 : vec4<f32>;
  var u_xlat7 : vec3<f32>;
  var u_xlat8 : vec4<f32>;
  var u_xlatb5 : vec4<bool>;
  var u_xlatu21 : u32;
  var u_xlati21 : i32;
  var u_xlat65 : f32;
  var u_xlat66 : f32;
  var u_xlat67 : f32;
  var u_xlat63 : f32;
  var u_xlatb66 : bool;
  var txVec0 : vec3<f32>;
  var txVec1 : vec3<f32>;
  var txVec2 : vec3<f32>;
  var txVec3 : vec3<f32>;
  var u_xlatb68 : bool;
  var u_xlat48 : vec2<f32>;
  var u_xlat9 : vec4<f32>;
  var u_xlat51 : vec2<f32>;
  var u_xlat10 : vec4<f32>;
  var u_xlat11 : vec4<f32>;
  var u_xlat12 : vec4<f32>;
  var u_xlat13 : vec4<f32>;
  var u_xlat14 : vec4<f32>;
  var u_xlat15 : vec4<f32>;
  var u_xlat68 : f32;
  var txVec4 : vec3<f32>;
  var txVec5 : vec3<f32>;
  var u_xlat27 : f32;
  var txVec6 : vec3<f32>;
  var txVec7 : vec3<f32>;
  var txVec8 : vec3<f32>;
  var txVec9 : vec3<f32>;
  var txVec10 : vec3<f32>;
  var txVec11 : vec3<f32>;
  var txVec12 : vec3<f32>;
  var u_xlat29 : vec3<f32>;
  var u_xlat16 : vec4<f32>;
  var u_xlat17 : vec4<f32>;
  var u_xlat30 : vec2<f32>;
  var u_xlat57 : vec2<f32>;
  var u_xlat52 : vec2<f32>;
  var u_xlat18 : vec4<f32>;
  var u_xlat19 : vec4<f32>;
  var u_xlat20 : vec4<f32>;
  var txVec13 : vec3<f32>;
  var txVec14 : vec3<f32>;
  var u_xlat70 : f32;
  var txVec15 : vec3<f32>;
  var txVec16 : vec3<f32>;
  var txVec17 : vec3<f32>;
  var txVec18 : vec3<f32>;
  var txVec19 : vec3<f32>;
  var txVec20 : vec3<f32>;
  var txVec21 : vec3<f32>;
  var txVec22 : vec3<f32>;
  var txVec23 : vec3<f32>;
  var txVec24 : vec3<f32>;
  var txVec25 : vec3<f32>;
  var txVec26 : vec3<f32>;
  var txVec27 : vec3<f32>;
  var txVec28 : vec3<f32>;
  var txVec29 : vec3<f32>;
  var u_xlatb43 : bool;
  var u_xlatb64 : bool;
  var x_2048 : f32;
  var u_xlat64 : f32;
  var u_xlatu_loop_1 : u32;
  var u_xlatu66 : u32;
  var u_xlati68 : i32;
  var indexable : array<vec4<u32>, 4u>;
  var u_xlati66 : i32;
  var u_xlat69 : f32;
  var u_xlat_precise_vec4 : vec4<f32>;
  var u_xlat_precise_ivec4 : vec4<i32>;
  var u_xlat_precise_bvec4 : vec4<bool>;
  var u_xlat_precise_uvec4 : vec4<u32>;
  let x_13 : vec4<f32> = gl_FragCoord;
  let x_14 : vec3<f32> = vec3<f32>(x_13.x, x_13.y, x_13.z);
  let x_20 : f32 = gl_FragCoord.w;
  hlslcc_FragCoord = vec4<f32>(x_14.x, x_14.y, x_14.z, (1.0f / x_20));
  let x_39 : vec4<f32> = vs_INTERP3;
  let x_50 : f32 = x_44.x_GlobalMipBias.x;
  let x_51 : vec4<f32> = textureSampleBias(x_MainTex, samplerSamplerState_Trilinear_Clamp, vec2<f32>(x_39.x, x_39.y), x_50);
  u_xlat0 = x_51;
  let x_57 : vec4<f32> = vs_INTERP3;
  let x_60 : f32 = x_44.x_GlobalMipBias.x;
  let x_61 : vec4<f32> = textureSampleBias(x_MRLL, samplerSamplerState_Trilinear_Clamp, vec2<f32>(x_57.x, x_57.y), x_60);
  u_xlat1 = x_61;
  let x_64 : vec4<f32> = u_xlat1;
  let x_72 : vec4<f32> = x_68.x_Color2;
  u_xlat2 = (vec3<f32>(x_64.w, x_64.w, x_64.w) * vec3<f32>(x_72.x, x_72.y, x_72.z));
  let x_77 : vec4<f32> = x_68.x_Color1;
  let x_79 : vec4<f32> = u_xlat1;
  let x_82 : vec3<f32> = u_xlat2;
  u_xlat2 = ((vec3<f32>(x_77.x, x_77.y, x_77.z) * vec3<f32>(x_79.z, x_79.z, x_79.z)) + x_82);
  let x_87 : f32 = u_xlat1.w;
  let x_90 : f32 = u_xlat1.z;
  u_xlat43 = (x_87 + x_90);
  let x_92 : f32 = u_xlat43;
  u_xlat43 = clamp(x_92, 0.0f, 1.0f);
  let x_96 : vec4<f32> = u_xlat0;
  let x_100 : vec3<f32> = (-(vec3<f32>(x_96.x, x_96.y, x_96.z)) + vec3<f32>(1.0f, 1.0f, 1.0f));
  let x_101 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_100.x, x_100.y, x_100.z, x_101.w);
  let x_103 : vec4<f32> = u_xlat3;
  let x_105 : vec4<f32> = u_xlat3;
  let x_107 : vec3<f32> = (vec3<f32>(x_103.x, x_103.y, x_103.z) + vec3<f32>(x_105.x, x_105.y, x_105.z));
  let x_108 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_107.x, x_107.y, x_107.z, x_108.w);
  let x_111 : vec3<f32> = u_xlat2;
  u_xlat4 = (-(x_111) + vec3<f32>(1.0f, 1.0f, 1.0f));
  let x_114 : vec4<f32> = u_xlat3;
  let x_117 : vec3<f32> = u_xlat4;
  let x_119 : vec3<f32> = ((-(vec3<f32>(x_114.x, x_114.y, x_114.z)) * x_117) + vec3<f32>(1.0f, 1.0f, 1.0f));
  let x_120 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_119.x, x_119.y, x_119.z, x_120.w);
  let x_122 : vec4<f32> = u_xlat0;
  let x_124 : vec3<f32> = u_xlat2;
  u_xlat2 = (vec3<f32>(x_122.x, x_122.y, x_122.z) * x_124);
  let x_126 : vec3<f32> = u_xlat2;
  let x_127 : vec3<f32> = u_xlat2;
  u_xlat2 = (x_126 + x_127);
  let x_135 : vec4<f32> = u_xlat0;
  let x_138 : vec4<bool> = (vec4<f32>(0.5f, 0.5f, 0.5f, 0.0f) >= vec4<f32>(x_135.x, x_135.y, x_135.z, x_135.x));
  u_xlatb4 = vec3<bool>(x_138.x, x_138.y, x_138.z);
  let x_143 : bool = u_xlatb4.x;
  u_xlat5.x = select(0.0f, 1.0f, x_143);
  let x_148 : bool = u_xlatb4.y;
  u_xlat5.y = select(0.0f, 1.0f, x_148);
  let x_152 : bool = u_xlatb4.z;
  u_xlat5.z = select(0.0f, 1.0f, x_152);
  let x_156 : bool = u_xlatb4.x;
  u_xlat4.x = select(1.0f, 0.0f, x_156);
  let x_160 : bool = u_xlatb4.y;
  u_xlat4.y = select(1.0f, 0.0f, x_160);
  let x_164 : bool = u_xlatb4.z;
  u_xlat4.z = select(1.0f, 0.0f, x_164);
  let x_167 : vec4<f32> = u_xlat3;
  let x_169 : vec3<f32> = u_xlat4;
  let x_170 : vec3<f32> = (vec3<f32>(x_167.x, x_167.y, x_167.z) * x_169);
  let x_171 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_170.x, x_170.y, x_170.z, x_171.w);
  let x_173 : vec3<f32> = u_xlat2;
  let x_174 : vec3<f32> = u_xlat5;
  let x_176 : vec4<f32> = u_xlat3;
  u_xlat2 = ((x_173 * x_174) + vec3<f32>(x_176.x, x_176.y, x_176.z));
  let x_179 : vec4<f32> = u_xlat0;
  let x_182 : vec3<f32> = u_xlat2;
  u_xlat2 = (-(vec3<f32>(x_179.x, x_179.y, x_179.z)) + x_182);
  let x_184 : f32 = u_xlat43;
  let x_186 : vec3<f32> = u_xlat2;
  let x_188 : vec4<f32> = u_xlat0;
  u_xlat2 = ((vec3<f32>(x_184, x_184, x_184) * x_186) + vec3<f32>(x_188.x, x_188.y, x_188.z));
  let x_192 : f32 = u_xlat0.x;
  u_xlat0.x = (x_192 + -0.150000006f);
  let x_197 : f32 = u_xlat0.x;
  u_xlat0.x = ceil(x_197);
  let x_201 : f32 = u_xlat0.x;
  u_xlat0.x = (-(x_201) + 1.0f);
  let x_205 : vec4<f32> = u_xlat0;
  let x_210 : vec3<f32> = u_xlat2;
  u_xlat2 = ((vec3<f32>(x_205.x, x_205.x, x_205.x) * vec3<f32>(0.400000006f, 0.400000006f, 0.400000006f)) + x_210);
  let x_216 : vec4<f32> = vs_INTERP3;
  let x_219 : f32 = x_44.x_GlobalMipBias.x;
  let x_220 : vec4<f32> = textureSampleBias(x_BumpMap, samplerSamplerState_Trilinear_Clamp, vec2<f32>(x_216.x, x_216.y), x_219);
  let x_221 : vec3<f32> = vec3<f32>(x_220.x, x_220.y, x_220.w);
  let x_222 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_221.x, x_221.y, x_221.z, x_222.w);
  let x_225 : f32 = u_xlat3.x;
  let x_227 : f32 = u_xlat3.z;
  u_xlat3.x = (x_225 * x_227);
  let x_232 : vec4<f32> = u_xlat3;
  u_xlat21 = ((vec2<f32>(x_232.x, x_232.y) * vec2<f32>(2.0f, 2.0f)) + vec2<f32>(-1.0f, -1.0f));
  let x_240 : vec2<f32> = u_xlat21;
  let x_241 : vec2<f32> = u_xlat21;
  u_xlat43 = dot(x_240, x_241);
  let x_243 : f32 = u_xlat43;
  u_xlat43 = min(x_243, 1.0f);
  let x_245 : f32 = u_xlat43;
  u_xlat43 = (-(x_245) + 1.0f);
  let x_248 : f32 = u_xlat43;
  u_xlat43 = sqrt(x_248);
  let x_250 : f32 = u_xlat43;
  u_xlat43 = max(x_250, 1.00000002e-16f);
  let x_254 : f32 = u_xlat1.x;
  let x_256 : f32 = u_xlat0.x;
  u_xlat0.x = (x_254 + x_256);
  let x_260 : f32 = u_xlat0.x;
  u_xlat0.x = clamp(x_260, 0.0f, 1.0f);
  let x_264 : f32 = u_xlat1.y;
  u_xlat1.x = max(x_264, 0.0f);
  let x_268 : f32 = u_xlat1.x;
  u_xlat1.x = min(x_268, 0.850000024f);
  let x_275 : f32 = vs_INTERP2.w;
  u_xlatb22.x = (0.0f < x_275);
  let x_283 : f32 = x_281.unity_WorldTransformParams.w;
  u_xlatb22.z = (x_283 >= 0.0f);
  let x_288 : bool = u_xlatb22.x;
  u_xlat22.x = select(-1.0f, 1.0f, x_288);
  let x_292 : bool = u_xlatb22.z;
  u_xlat22.z = select(-1.0f, 1.0f, x_292);
  let x_296 : f32 = u_xlat22.z;
  let x_298 : f32 = u_xlat22.x;
  u_xlat22.x = (x_296 * x_298);
  let x_303 : vec3<f32> = vs_INTERP1;
  let x_305 : vec4<f32> = vs_INTERP2;
  let x_307 : vec3<f32> = (vec3<f32>(x_303.z, x_303.x, x_303.y) * vec3<f32>(x_305.y, x_305.z, x_305.x));
  let x_308 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_307.x, x_307.y, x_307.z, x_308.w);
  let x_310 : vec3<f32> = vs_INTERP1;
  let x_312 : vec4<f32> = vs_INTERP2;
  let x_315 : vec4<f32> = u_xlat3;
  let x_318 : vec3<f32> = ((vec3<f32>(x_310.y, x_310.z, x_310.x) * vec3<f32>(x_312.z, x_312.x, x_312.y)) + -(vec3<f32>(x_315.x, x_315.y, x_315.z)));
  let x_319 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_318.x, x_318.y, x_318.z, x_319.w);
  let x_321 : vec3<f32> = u_xlat22;
  let x_323 : vec4<f32> = u_xlat3;
  let x_325 : vec3<f32> = (vec3<f32>(x_321.x, x_321.x, x_321.x) * vec3<f32>(x_323.x, x_323.y, x_323.z));
  let x_326 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_325.x, x_325.y, x_325.z, x_326.w);
  let x_328 : vec2<f32> = u_xlat21;
  let x_330 : vec4<f32> = u_xlat3;
  let x_332 : vec3<f32> = (vec3<f32>(x_328.y, x_328.y, x_328.y) * vec3<f32>(x_330.x, x_330.y, x_330.z));
  let x_333 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_332.x, x_332.y, x_332.z, x_333.w);
  let x_335 : vec2<f32> = u_xlat21;
  let x_337 : vec4<f32> = vs_INTERP2;
  let x_340 : vec4<f32> = u_xlat3;
  let x_342 : vec3<f32> = ((vec3<f32>(x_335.x, x_335.x, x_335.x) * vec3<f32>(x_337.x, x_337.y, x_337.z)) + vec3<f32>(x_340.x, x_340.y, x_340.z));
  let x_343 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_342.x, x_342.y, x_342.z, x_343.w);
  let x_345 : f32 = u_xlat43;
  let x_347 : vec3<f32> = vs_INTERP1;
  let x_349 : vec4<f32> = u_xlat3;
  u_xlat22 = ((vec3<f32>(x_345, x_345, x_345) * x_347) + vec3<f32>(x_349.x, x_349.y, x_349.z));
  let x_352 : vec3<f32> = u_xlat22;
  let x_353 : vec3<f32> = u_xlat22;
  u_xlat21.x = dot(x_352, x_353);
  let x_357 : f32 = u_xlat21.x;
  u_xlat21.x = inverseSqrt(x_357);
  let x_360 : vec2<f32> = u_xlat21;
  let x_362 : vec3<f32> = u_xlat22;
  let x_363 : vec3<f32> = (vec3<f32>(x_360.x, x_360.x, x_360.x) * x_362);
  let x_364 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_363.x, x_363.y, x_363.z, x_364.w);
  let x_369 : f32 = x_44.unity_OrthoParams.w;
  u_xlatb21 = (x_369 == 0.0f);
  let x_372 : vec3<f32> = vs_INTERP0;
  let x_377 : vec3<f32> = x_44.x_WorldSpaceCameraPos;
  u_xlat22 = (-(x_372) + x_377);
  let x_380 : vec3<f32> = u_xlat22;
  let x_381 : vec3<f32> = u_xlat22;
  u_xlat42 = dot(x_380, x_381);
  let x_383 : f32 = u_xlat42;
  u_xlat42 = inverseSqrt(x_383);
  let x_385 : f32 = u_xlat42;
  let x_387 : vec3<f32> = u_xlat22;
  u_xlat22 = (vec3<f32>(x_385, x_385, x_385) * x_387);
  let x_389 : bool = u_xlatb21;
  if (x_389) {
    let x_394 : f32 = u_xlat22.x;
    x_390 = x_394;
  } else {
    let x_399 : f32 = x_44.unity_MatrixV[0i].z;
    x_390 = x_399;
  }
  let x_400 : f32 = x_390;
  u_xlat4.x = x_400;
  let x_402 : bool = u_xlatb21;
  if (x_402) {
    let x_407 : f32 = u_xlat22.y;
    x_403 = x_407;
  } else {
    let x_410 : f32 = x_44.unity_MatrixV[1i].z;
    x_403 = x_410;
  }
  let x_411 : f32 = x_403;
  u_xlat4.y = x_411;
  let x_413 : bool = u_xlatb21;
  if (x_413) {
    let x_418 : f32 = u_xlat22.z;
    x_414 = x_418;
  } else {
    let x_422 : f32 = x_44.unity_MatrixV[2i].z;
    x_414 = x_422;
  }
  let x_423 : f32 = x_414;
  u_xlat4.z = x_423;
  let x_425 : vec3<f32> = vs_INTERP0;
  let x_432 : vec4<f32> = x_430.x_CascadeShadowSplitSpheres0;
  u_xlat22 = (x_425 + -(vec3<f32>(x_432.x, x_432.y, x_432.z)));
  let x_436 : vec3<f32> = vs_INTERP0;
  let x_438 : vec4<f32> = x_430.x_CascadeShadowSplitSpheres1;
  u_xlat5 = (x_436 + -(vec3<f32>(x_438.x, x_438.y, x_438.z)));
  let x_443 : vec3<f32> = vs_INTERP0;
  let x_445 : vec4<f32> = x_430.x_CascadeShadowSplitSpheres2;
  let x_448 : vec3<f32> = (x_443 + -(vec3<f32>(x_445.x, x_445.y, x_445.z)));
  let x_449 : vec4<f32> = u_xlat6;
  u_xlat6 = vec4<f32>(x_448.x, x_448.y, x_448.z, x_449.w);
  let x_452 : vec3<f32> = vs_INTERP0;
  let x_454 : vec4<f32> = x_430.x_CascadeShadowSplitSpheres3;
  u_xlat7 = (x_452 + -(vec3<f32>(x_454.x, x_454.y, x_454.z)));
  let x_459 : vec3<f32> = u_xlat22;
  let x_460 : vec3<f32> = u_xlat22;
  u_xlat8.x = dot(x_459, x_460);
  let x_463 : vec3<f32> = u_xlat5;
  let x_464 : vec3<f32> = u_xlat5;
  u_xlat8.y = dot(x_463, x_464);
  let x_467 : vec4<f32> = u_xlat6;
  let x_469 : vec4<f32> = u_xlat6;
  u_xlat8.z = dot(vec3<f32>(x_467.x, x_467.y, x_467.z), vec3<f32>(x_469.x, x_469.y, x_469.z));
  let x_473 : vec3<f32> = u_xlat7;
  let x_474 : vec3<f32> = u_xlat7;
  u_xlat8.w = dot(x_473, x_474);
  let x_479 : vec4<f32> = u_xlat8;
  let x_482 : vec4<f32> = x_430.x_CascadeShadowSplitSphereRadii;
  u_xlatb5 = (x_479 < x_482);
  let x_485 : bool = u_xlatb5.x;
  u_xlat6.x = select(0.0f, 1.0f, x_485);
  let x_489 : bool = u_xlatb5.y;
  u_xlat6.y = select(0.0f, 1.0f, x_489);
  let x_493 : bool = u_xlatb5.z;
  u_xlat6.z = select(0.0f, 1.0f, x_493);
  let x_497 : bool = u_xlatb5.w;
  u_xlat6.w = select(0.0f, 1.0f, x_497);
  let x_501 : bool = u_xlatb5.x;
  u_xlat22.x = select(-0.0f, -1.0f, x_501);
  let x_506 : bool = u_xlatb5.y;
  u_xlat22.y = select(-0.0f, -1.0f, x_506);
  let x_510 : bool = u_xlatb5.z;
  u_xlat22.z = select(-0.0f, -1.0f, x_510);
  let x_513 : vec3<f32> = u_xlat22;
  let x_514 : vec4<f32> = u_xlat6;
  u_xlat22 = (x_513 + vec3<f32>(x_514.y, x_514.z, x_514.w));
  let x_517 : vec3<f32> = u_xlat22;
  let x_519 : vec3<f32> = max(x_517, vec3<f32>(0.0f, 0.0f, 0.0f));
  let x_520 : vec4<f32> = u_xlat6;
  u_xlat6 = vec4<f32>(x_520.x, x_519.x, x_519.y, x_519.z);
  let x_522 : vec4<f32> = u_xlat6;
  u_xlat21.x = dot(x_522, vec4<f32>(4.0f, 3.0f, 2.0f, 1.0f));
  let x_529 : f32 = u_xlat21.x;
  u_xlat21.x = (-(x_529) + 4.0f);
  let x_536 : f32 = u_xlat21.x;
  u_xlatu21 = u32(x_536);
  let x_540 : u32 = u_xlatu21;
  u_xlati21 = (bitcast<i32>(x_540) << bitcast<u32>(2i));
  let x_543 : vec3<f32> = vs_INTERP0;
  let x_545 : i32 = u_xlati21;
  let x_548 : i32 = u_xlati21;
  let x_552 : vec4<f32> = x_430.x_MainLightWorldToShadow[((x_545 + 1i) / 4i)][((x_548 + 1i) % 4i)];
  u_xlat22 = (vec3<f32>(x_543.y, x_543.y, x_543.y) * vec3<f32>(x_552.x, x_552.y, x_552.z));
  let x_555 : i32 = u_xlati21;
  let x_557 : i32 = u_xlati21;
  let x_560 : vec4<f32> = x_430.x_MainLightWorldToShadow[(x_555 / 4i)][(x_557 % 4i)];
  let x_562 : vec3<f32> = vs_INTERP0;
  let x_565 : vec3<f32> = u_xlat22;
  u_xlat22 = ((vec3<f32>(x_560.x, x_560.y, x_560.z) * vec3<f32>(x_562.x, x_562.x, x_562.x)) + x_565);
  let x_567 : i32 = u_xlati21;
  let x_570 : i32 = u_xlati21;
  let x_574 : vec4<f32> = x_430.x_MainLightWorldToShadow[((x_567 + 2i) / 4i)][((x_570 + 2i) % 4i)];
  let x_576 : vec3<f32> = vs_INTERP0;
  let x_579 : vec3<f32> = u_xlat22;
  u_xlat22 = ((vec3<f32>(x_574.x, x_574.y, x_574.z) * vec3<f32>(x_576.z, x_576.z, x_576.z)) + x_579);
  let x_581 : vec3<f32> = u_xlat22;
  let x_582 : i32 = u_xlati21;
  let x_585 : i32 = u_xlati21;
  let x_589 : vec4<f32> = x_430.x_MainLightWorldToShadow[((x_582 + 3i) / 4i)][((x_585 + 3i) % 4i)];
  u_xlat22 = (x_581 + vec3<f32>(x_589.x, x_589.y, x_589.z));
  u_xlat3.w = 1.0f;
  let x_595 : vec4<f32> = x_281.unity_SHAr;
  let x_596 : vec4<f32> = u_xlat3;
  u_xlat5.x = dot(x_595, x_596);
  let x_601 : vec4<f32> = x_281.unity_SHAg;
  let x_602 : vec4<f32> = u_xlat3;
  u_xlat5.y = dot(x_601, x_602);
  let x_607 : vec4<f32> = x_281.unity_SHAb;
  let x_608 : vec4<f32> = u_xlat3;
  u_xlat5.z = dot(x_607, x_608);
  let x_611 : vec4<f32> = u_xlat3;
  let x_613 : vec4<f32> = u_xlat3;
  u_xlat6 = (vec4<f32>(x_611.y, x_611.z, x_611.z, x_611.x) * vec4<f32>(x_613.x, x_613.y, x_613.z, x_613.z));
  let x_618 : vec4<f32> = x_281.unity_SHBr;
  let x_619 : vec4<f32> = u_xlat6;
  u_xlat7.x = dot(x_618, x_619);
  let x_624 : vec4<f32> = x_281.unity_SHBg;
  let x_625 : vec4<f32> = u_xlat6;
  u_xlat7.y = dot(x_624, x_625);
  let x_630 : vec4<f32> = x_281.unity_SHBb;
  let x_631 : vec4<f32> = u_xlat6;
  u_xlat7.z = dot(x_630, x_631);
  let x_635 : f32 = u_xlat3.y;
  let x_637 : f32 = u_xlat3.y;
  u_xlat21.x = (x_635 * x_637);
  let x_641 : f32 = u_xlat3.x;
  let x_643 : f32 = u_xlat3.x;
  let x_646 : f32 = u_xlat21.x;
  u_xlat21.x = ((x_641 * x_643) + -(x_646));
  let x_652 : vec4<f32> = x_281.unity_SHC;
  let x_654 : vec2<f32> = u_xlat21;
  let x_657 : vec3<f32> = u_xlat7;
  let x_658 : vec3<f32> = ((vec3<f32>(x_652.x, x_652.y, x_652.z) * vec3<f32>(x_654.x, x_654.x, x_654.x)) + x_657);
  let x_659 : vec4<f32> = u_xlat6;
  u_xlat6 = vec4<f32>(x_658.x, x_658.y, x_658.z, x_659.w);
  let x_661 : vec3<f32> = u_xlat5;
  let x_662 : vec4<f32> = u_xlat6;
  u_xlat5 = (x_661 + vec3<f32>(x_662.x, x_662.y, x_662.z));
  let x_665 : vec3<f32> = u_xlat5;
  u_xlat5 = max(x_665, vec3<f32>(0.0f, 0.0f, 0.0f));
  let x_669 : vec4<f32> = x_44.x_ScaledScreenParams;
  let x_670 : vec2<f32> = vec2<f32>(x_669.x, x_669.y);
  u_xlat21 = (vec2<f32>(1.0f, 1.0f) / vec2<f32>(x_670.x, x_670.y));
  let x_675 : vec2<f32> = u_xlat21;
  let x_676 : vec4<f32> = hlslcc_FragCoord;
  let x_678 : vec2<f32> = (x_675 * vec2<f32>(x_676.x, x_676.y));
  let x_679 : vec4<f32> = u_xlat6;
  u_xlat6 = vec4<f32>(x_678.x, x_678.y, x_679.z, x_679.w);
  let x_682 : f32 = u_xlat6.y;
  let x_685 : f32 = x_44.x_ScaleBiasRt.x;
  let x_688 : f32 = x_44.x_ScaleBiasRt.y;
  u_xlat21.x = ((x_682 * x_685) + x_688);
  let x_692 : f32 = u_xlat21.x;
  u_xlat6.z = (-(x_692) + 1.0f);
  let x_697 : f32 = u_xlat0.x;
  u_xlat21.x = ((-(x_697) * 0.959999979f) + 0.959999979f);
  let x_704 : f32 = u_xlat21.x;
  u_xlat42 = (-(x_704) + 1.0f);
  let x_707 : vec2<f32> = u_xlat21;
  let x_709 : vec3<f32> = u_xlat2;
  u_xlat7 = (vec3<f32>(x_707.x, x_707.x, x_707.x) * x_709);
  let x_711 : vec3<f32> = u_xlat2;
  u_xlat2 = (x_711 + vec3<f32>(-0.039999999f, -0.039999999f, -0.039999999f));
  let x_715 : vec4<f32> = u_xlat0;
  let x_717 : vec3<f32> = u_xlat2;
  u_xlat2 = ((vec3<f32>(x_715.x, x_715.x, x_715.x) * x_717) + vec3<f32>(0.039999999f, 0.039999999f, 0.039999999f));
  let x_723 : f32 = u_xlat1.x;
  u_xlat0.x = (-(x_723) + 1.0f);
  let x_728 : f32 = u_xlat0.x;
  let x_730 : f32 = u_xlat0.x;
  u_xlat21.x = (x_728 * x_730);
  let x_735 : f32 = u_xlat21.x;
  let x_737 : f32 = u_xlat21.x;
  u_xlat65 = (x_735 * x_737);
  let x_739 : f32 = u_xlat42;
  let x_741 : f32 = u_xlat1.x;
  u_xlat42 = (x_739 + x_741);
  let x_743 : f32 = u_xlat42;
  u_xlat42 = min(x_743, 1.0f);
  let x_746 : f32 = u_xlat21.x;
  u_xlat1.x = ((x_746 * 4.0f) + 2.0f);
  let x_756 : vec4<f32> = u_xlat6;
  let x_759 : f32 = x_44.x_GlobalMipBias.x;
  let x_760 : vec4<f32> = textureSampleBias(x_ScreenSpaceOcclusionTexture, sampler_ScreenSpaceOcclusionTexture, vec2<f32>(x_756.x, x_756.z), x_759);
  u_xlat66 = x_760.x;
  let x_763 : f32 = u_xlat66;
  u_xlat67 = (x_763 + -1.0f);
  let x_766 : f32 = x_44.x_AmbientOcclusionParam.w;
  let x_767 : f32 = u_xlat67;
  u_xlat67 = ((x_766 * x_767) + 1.0f);
  let x_772 : f32 = u_xlat0.w;
  let x_773 : f32 = u_xlat66;
  u_xlat63 = min(x_772, x_773);
  let x_777 : f32 = x_430.x_MainLightShadowParams.y;
  u_xlatb66 = (0.0f < x_777);
  let x_779 : bool = u_xlatb66;
  if (x_779) {
    let x_783 : f32 = x_430.x_MainLightShadowParams.y;
    u_xlatb66 = (x_783 == 1.0f);
    let x_785 : bool = u_xlatb66;
    if (x_785) {
      let x_788 : vec3<f32> = u_xlat22;
      let x_791 : vec4<f32> = x_430.x_MainLightShadowOffset0;
      u_xlat6 = (vec4<f32>(x_788.x, x_788.y, x_788.x, x_788.y) + x_791);
      let x_794 : vec4<f32> = u_xlat6;
      let x_795 : vec2<f32> = vec2<f32>(x_794.x, x_794.y);
      let x_797 : f32 = u_xlat22.z;
      txVec0 = vec3<f32>(x_795.x, x_795.y, x_797);
      let x_809 : vec3<f32> = txVec0;
      let x_811 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_809.xy, x_809.z);
      u_xlat8.x = x_811;
      let x_814 : vec4<f32> = u_xlat6;
      let x_815 : vec2<f32> = vec2<f32>(x_814.z, x_814.w);
      let x_817 : f32 = u_xlat22.z;
      txVec1 = vec3<f32>(x_815.x, x_815.y, x_817);
      let x_824 : vec3<f32> = txVec1;
      let x_826 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_824.xy, x_824.z);
      u_xlat8.y = x_826;
      let x_828 : vec3<f32> = u_xlat22;
      let x_831 : vec4<f32> = x_430.x_MainLightShadowOffset1;
      u_xlat6 = (vec4<f32>(x_828.x, x_828.y, x_828.x, x_828.y) + x_831);
      let x_834 : vec4<f32> = u_xlat6;
      let x_835 : vec2<f32> = vec2<f32>(x_834.x, x_834.y);
      let x_837 : f32 = u_xlat22.z;
      txVec2 = vec3<f32>(x_835.x, x_835.y, x_837);
      let x_844 : vec3<f32> = txVec2;
      let x_846 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_844.xy, x_844.z);
      u_xlat8.z = x_846;
      let x_849 : vec4<f32> = u_xlat6;
      let x_850 : vec2<f32> = vec2<f32>(x_849.z, x_849.w);
      let x_852 : f32 = u_xlat22.z;
      txVec3 = vec3<f32>(x_850.x, x_850.y, x_852);
      let x_859 : vec3<f32> = txVec3;
      let x_861 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_859.xy, x_859.z);
      u_xlat8.w = x_861;
      let x_863 : vec4<f32> = u_xlat8;
      u_xlat66 = dot(x_863, vec4<f32>(0.25f, 0.25f, 0.25f, 0.25f));
    } else {
      let x_870 : f32 = x_430.x_MainLightShadowParams.y;
      u_xlatb68 = (x_870 == 2.0f);
      let x_872 : bool = u_xlatb68;
      if (x_872) {
        let x_875 : vec3<f32> = u_xlat22;
        let x_878 : vec4<f32> = x_430.x_MainLightShadowmapSize;
        let x_882 : vec2<f32> = ((vec2<f32>(x_875.x, x_875.y) * vec2<f32>(x_878.z, x_878.w)) + vec2<f32>(0.5f, 0.5f));
        let x_883 : vec4<f32> = u_xlat6;
        u_xlat6 = vec4<f32>(x_882.x, x_882.y, x_883.z, x_883.w);
        let x_885 : vec4<f32> = u_xlat6;
        let x_887 : vec2<f32> = floor(vec2<f32>(x_885.x, x_885.y));
        let x_888 : vec4<f32> = u_xlat6;
        u_xlat6 = vec4<f32>(x_887.x, x_887.y, x_888.z, x_888.w);
        let x_891 : vec3<f32> = u_xlat22;
        let x_894 : vec4<f32> = x_430.x_MainLightShadowmapSize;
        let x_897 : vec4<f32> = u_xlat6;
        u_xlat48 = ((vec2<f32>(x_891.x, x_891.y) * vec2<f32>(x_894.z, x_894.w)) + -(vec2<f32>(x_897.x, x_897.y)));
        let x_901 : vec2<f32> = u_xlat48;
        u_xlat8 = (vec4<f32>(x_901.x, x_901.x, x_901.y, x_901.y) + vec4<f32>(0.5f, 1.0f, 0.5f, 1.0f));
        let x_906 : vec4<f32> = u_xlat8;
        let x_908 : vec4<f32> = u_xlat8;
        u_xlat9 = (vec4<f32>(x_906.x, x_906.x, x_906.z, x_906.z) * vec4<f32>(x_908.x, x_908.x, x_908.z, x_908.z));
        let x_911 : vec4<f32> = u_xlat9;
        let x_915 : vec2<f32> = (vec2<f32>(x_911.y, x_911.w) * vec2<f32>(0.079999998f, 0.079999998f));
        let x_916 : vec4<f32> = u_xlat8;
        u_xlat8 = vec4<f32>(x_915.x, x_916.y, x_915.y, x_916.w);
        let x_918 : vec4<f32> = u_xlat9;
        let x_921 : vec2<f32> = u_xlat48;
        let x_923 : vec2<f32> = ((vec2<f32>(x_918.x, x_918.z) * vec2<f32>(0.5f, 0.5f)) + -(x_921));
        let x_924 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_923.x, x_923.y, x_924.z, x_924.w);
        let x_927 : vec2<f32> = u_xlat48;
        u_xlat51 = (-(x_927) + vec2<f32>(1.0f, 1.0f));
        let x_931 : vec2<f32> = u_xlat48;
        let x_933 : vec2<f32> = min(x_931, vec2<f32>(0.0f, 0.0f));
        let x_934 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_933.x, x_933.y, x_934.z, x_934.w);
        let x_936 : vec4<f32> = u_xlat10;
        let x_939 : vec4<f32> = u_xlat10;
        let x_942 : vec2<f32> = u_xlat51;
        let x_943 : vec2<f32> = ((-(vec2<f32>(x_936.x, x_936.y)) * vec2<f32>(x_939.x, x_939.y)) + x_942);
        let x_944 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_943.x, x_943.y, x_944.z, x_944.w);
        let x_946 : vec2<f32> = u_xlat48;
        u_xlat48 = max(x_946, vec2<f32>(0.0f, 0.0f));
        let x_948 : vec2<f32> = u_xlat48;
        let x_950 : vec2<f32> = u_xlat48;
        let x_952 : vec4<f32> = u_xlat8;
        u_xlat48 = ((-(x_948) * x_950) + vec2<f32>(x_952.y, x_952.w));
        let x_955 : vec4<f32> = u_xlat10;
        let x_957 : vec2<f32> = (vec2<f32>(x_955.x, x_955.y) + vec2<f32>(1.0f, 1.0f));
        let x_958 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_957.x, x_957.y, x_958.z, x_958.w);
        let x_960 : vec2<f32> = u_xlat48;
        u_xlat48 = (x_960 + vec2<f32>(1.0f, 1.0f));
        let x_963 : vec4<f32> = u_xlat9;
        let x_967 : vec2<f32> = (vec2<f32>(x_963.x, x_963.y) * vec2<f32>(0.159999996f, 0.159999996f));
        let x_968 : vec4<f32> = u_xlat11;
        u_xlat11 = vec4<f32>(x_967.x, x_967.y, x_968.z, x_968.w);
        let x_970 : vec2<f32> = u_xlat51;
        let x_971 : vec2<f32> = (x_970 * vec2<f32>(0.159999996f, 0.159999996f));
        let x_972 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_971.x, x_971.y, x_972.z, x_972.w);
        let x_974 : vec4<f32> = u_xlat10;
        let x_976 : vec2<f32> = (vec2<f32>(x_974.x, x_974.y) * vec2<f32>(0.159999996f, 0.159999996f));
        let x_977 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_976.x, x_976.y, x_977.z, x_977.w);
        let x_980 : vec2<f32> = u_xlat48;
        let x_981 : vec2<f32> = (x_980 * vec2<f32>(0.159999996f, 0.159999996f));
        let x_982 : vec4<f32> = u_xlat12;
        u_xlat12 = vec4<f32>(x_981.x, x_981.y, x_982.z, x_982.w);
        let x_984 : vec4<f32> = u_xlat8;
        u_xlat48 = (vec2<f32>(x_984.y, x_984.w) * vec2<f32>(0.159999996f, 0.159999996f));
        let x_988 : f32 = u_xlat10.x;
        u_xlat11.z = x_988;
        let x_991 : f32 = u_xlat48.x;
        u_xlat11.w = x_991;
        let x_994 : f32 = u_xlat12.x;
        u_xlat9.z = x_994;
        let x_997 : f32 = u_xlat8.x;
        u_xlat9.w = x_997;
        let x_1000 : vec4<f32> = u_xlat9;
        let x_1002 : vec4<f32> = u_xlat11;
        u_xlat13 = (vec4<f32>(x_1000.z, x_1000.w, x_1000.x, x_1000.z) + vec4<f32>(x_1002.z, x_1002.w, x_1002.x, x_1002.z));
        let x_1006 : f32 = u_xlat11.y;
        u_xlat10.z = x_1006;
        let x_1009 : f32 = u_xlat48.y;
        u_xlat10.w = x_1009;
        let x_1012 : f32 = u_xlat9.y;
        u_xlat12.z = x_1012;
        let x_1015 : f32 = u_xlat8.z;
        u_xlat12.w = x_1015;
        let x_1017 : vec4<f32> = u_xlat10;
        let x_1019 : vec4<f32> = u_xlat12;
        let x_1021 : vec3<f32> = (vec3<f32>(x_1017.z, x_1017.y, x_1017.w) + vec3<f32>(x_1019.z, x_1019.y, x_1019.w));
        let x_1022 : vec4<f32> = u_xlat8;
        u_xlat8 = vec4<f32>(x_1021.x, x_1021.y, x_1021.z, x_1022.w);
        let x_1024 : vec4<f32> = u_xlat9;
        let x_1026 : vec4<f32> = u_xlat13;
        let x_1028 : vec3<f32> = (vec3<f32>(x_1024.x, x_1024.z, x_1024.w) / vec3<f32>(x_1026.z, x_1026.w, x_1026.y));
        let x_1029 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_1028.x, x_1028.y, x_1028.z, x_1029.w);
        let x_1031 : vec4<f32> = u_xlat9;
        let x_1037 : vec3<f32> = (vec3<f32>(x_1031.x, x_1031.y, x_1031.z) + vec3<f32>(-2.5f, -0.5f, 1.5f));
        let x_1038 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_1037.x, x_1037.y, x_1037.z, x_1038.w);
        let x_1040 : vec4<f32> = u_xlat12;
        let x_1042 : vec4<f32> = u_xlat8;
        let x_1044 : vec3<f32> = (vec3<f32>(x_1040.z, x_1040.y, x_1040.w) / vec3<f32>(x_1042.x, x_1042.y, x_1042.z));
        let x_1045 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_1044.x, x_1044.y, x_1044.z, x_1045.w);
        let x_1047 : vec4<f32> = u_xlat10;
        let x_1049 : vec3<f32> = (vec3<f32>(x_1047.x, x_1047.y, x_1047.z) + vec3<f32>(-2.5f, -0.5f, 1.5f));
        let x_1050 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_1049.x, x_1049.y, x_1049.z, x_1050.w);
        let x_1052 : vec4<f32> = u_xlat9;
        let x_1055 : vec4<f32> = x_430.x_MainLightShadowmapSize;
        let x_1057 : vec3<f32> = (vec3<f32>(x_1052.y, x_1052.x, x_1052.z) * vec3<f32>(x_1055.x, x_1055.x, x_1055.x));
        let x_1058 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_1057.x, x_1057.y, x_1057.z, x_1058.w);
        let x_1060 : vec4<f32> = u_xlat10;
        let x_1063 : vec4<f32> = x_430.x_MainLightShadowmapSize;
        let x_1065 : vec3<f32> = (vec3<f32>(x_1060.x, x_1060.y, x_1060.z) * vec3<f32>(x_1063.y, x_1063.y, x_1063.y));
        let x_1066 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_1065.x, x_1065.y, x_1065.z, x_1066.w);
        let x_1069 : f32 = u_xlat10.x;
        u_xlat9.w = x_1069;
        let x_1071 : vec4<f32> = u_xlat6;
        let x_1074 : vec4<f32> = x_430.x_MainLightShadowmapSize;
        let x_1077 : vec4<f32> = u_xlat9;
        u_xlat11 = ((vec4<f32>(x_1071.x, x_1071.y, x_1071.x, x_1071.y) * vec4<f32>(x_1074.x, x_1074.y, x_1074.x, x_1074.y)) + vec4<f32>(x_1077.y, x_1077.w, x_1077.x, x_1077.w));
        let x_1080 : vec4<f32> = u_xlat6;
        let x_1083 : vec4<f32> = x_430.x_MainLightShadowmapSize;
        let x_1086 : vec4<f32> = u_xlat9;
        u_xlat48 = ((vec2<f32>(x_1080.x, x_1080.y) * vec2<f32>(x_1083.x, x_1083.y)) + vec2<f32>(x_1086.z, x_1086.w));
        let x_1090 : f32 = u_xlat9.y;
        u_xlat10.w = x_1090;
        let x_1092 : vec4<f32> = u_xlat10;
        let x_1093 : vec2<f32> = vec2<f32>(x_1092.y, x_1092.z);
        let x_1094 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_1094.x, x_1093.x, x_1094.z, x_1093.y);
        let x_1096 : vec4<f32> = u_xlat6;
        let x_1099 : vec4<f32> = x_430.x_MainLightShadowmapSize;
        let x_1102 : vec4<f32> = u_xlat9;
        u_xlat12 = ((vec4<f32>(x_1096.x, x_1096.y, x_1096.x, x_1096.y) * vec4<f32>(x_1099.x, x_1099.y, x_1099.x, x_1099.y)) + vec4<f32>(x_1102.x, x_1102.y, x_1102.z, x_1102.y));
        let x_1105 : vec4<f32> = u_xlat6;
        let x_1108 : vec4<f32> = x_430.x_MainLightShadowmapSize;
        let x_1111 : vec4<f32> = u_xlat10;
        u_xlat10 = ((vec4<f32>(x_1105.x, x_1105.y, x_1105.x, x_1105.y) * vec4<f32>(x_1108.x, x_1108.y, x_1108.x, x_1108.y)) + vec4<f32>(x_1111.w, x_1111.y, x_1111.w, x_1111.z));
        let x_1114 : vec4<f32> = u_xlat6;
        let x_1117 : vec4<f32> = x_430.x_MainLightShadowmapSize;
        let x_1120 : vec4<f32> = u_xlat9;
        u_xlat9 = ((vec4<f32>(x_1114.x, x_1114.y, x_1114.x, x_1114.y) * vec4<f32>(x_1117.x, x_1117.y, x_1117.x, x_1117.y)) + vec4<f32>(x_1120.x, x_1120.w, x_1120.z, x_1120.w));
        let x_1124 : vec4<f32> = u_xlat8;
        let x_1126 : vec4<f32> = u_xlat13;
        u_xlat14 = (vec4<f32>(x_1124.x, x_1124.x, x_1124.x, x_1124.y) * vec4<f32>(x_1126.z, x_1126.w, x_1126.y, x_1126.z));
        let x_1130 : vec4<f32> = u_xlat8;
        let x_1132 : vec4<f32> = u_xlat13;
        u_xlat15 = (vec4<f32>(x_1130.y, x_1130.y, x_1130.z, x_1130.z) * x_1132);
        let x_1136 : f32 = u_xlat8.z;
        let x_1138 : f32 = u_xlat13.y;
        u_xlat68 = (x_1136 * x_1138);
        let x_1141 : vec4<f32> = u_xlat11;
        let x_1142 : vec2<f32> = vec2<f32>(x_1141.x, x_1141.y);
        let x_1144 : f32 = u_xlat22.z;
        txVec4 = vec3<f32>(x_1142.x, x_1142.y, x_1144);
        let x_1151 : vec3<f32> = txVec4;
        let x_1153 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1151.xy, x_1151.z);
        u_xlat6.x = x_1153;
        let x_1156 : vec4<f32> = u_xlat11;
        let x_1157 : vec2<f32> = vec2<f32>(x_1156.z, x_1156.w);
        let x_1159 : f32 = u_xlat22.z;
        txVec5 = vec3<f32>(x_1157.x, x_1157.y, x_1159);
        let x_1167 : vec3<f32> = txVec5;
        let x_1169 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1167.xy, x_1167.z);
        u_xlat27 = x_1169;
        let x_1170 : f32 = u_xlat27;
        let x_1172 : f32 = u_xlat14.y;
        u_xlat27 = (x_1170 * x_1172);
        let x_1175 : f32 = u_xlat14.x;
        let x_1177 : f32 = u_xlat6.x;
        let x_1179 : f32 = u_xlat27;
        u_xlat6.x = ((x_1175 * x_1177) + x_1179);
        let x_1183 : vec2<f32> = u_xlat48;
        let x_1185 : f32 = u_xlat22.z;
        txVec6 = vec3<f32>(x_1183.x, x_1183.y, x_1185);
        let x_1192 : vec3<f32> = txVec6;
        let x_1194 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1192.xy, x_1192.z);
        u_xlat27 = x_1194;
        let x_1196 : f32 = u_xlat14.z;
        let x_1197 : f32 = u_xlat27;
        let x_1200 : f32 = u_xlat6.x;
        u_xlat6.x = ((x_1196 * x_1197) + x_1200);
        let x_1204 : vec4<f32> = u_xlat10;
        let x_1205 : vec2<f32> = vec2<f32>(x_1204.x, x_1204.y);
        let x_1207 : f32 = u_xlat22.z;
        txVec7 = vec3<f32>(x_1205.x, x_1205.y, x_1207);
        let x_1214 : vec3<f32> = txVec7;
        let x_1216 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1214.xy, x_1214.z);
        u_xlat27 = x_1216;
        let x_1218 : f32 = u_xlat14.w;
        let x_1219 : f32 = u_xlat27;
        let x_1222 : f32 = u_xlat6.x;
        u_xlat6.x = ((x_1218 * x_1219) + x_1222);
        let x_1226 : vec4<f32> = u_xlat12;
        let x_1227 : vec2<f32> = vec2<f32>(x_1226.x, x_1226.y);
        let x_1229 : f32 = u_xlat22.z;
        txVec8 = vec3<f32>(x_1227.x, x_1227.y, x_1229);
        let x_1236 : vec3<f32> = txVec8;
        let x_1238 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1236.xy, x_1236.z);
        u_xlat27 = x_1238;
        let x_1240 : f32 = u_xlat15.x;
        let x_1241 : f32 = u_xlat27;
        let x_1244 : f32 = u_xlat6.x;
        u_xlat6.x = ((x_1240 * x_1241) + x_1244);
        let x_1248 : vec4<f32> = u_xlat12;
        let x_1249 : vec2<f32> = vec2<f32>(x_1248.z, x_1248.w);
        let x_1251 : f32 = u_xlat22.z;
        txVec9 = vec3<f32>(x_1249.x, x_1249.y, x_1251);
        let x_1258 : vec3<f32> = txVec9;
        let x_1260 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1258.xy, x_1258.z);
        u_xlat27 = x_1260;
        let x_1262 : f32 = u_xlat15.y;
        let x_1263 : f32 = u_xlat27;
        let x_1266 : f32 = u_xlat6.x;
        u_xlat6.x = ((x_1262 * x_1263) + x_1266);
        let x_1270 : vec4<f32> = u_xlat10;
        let x_1271 : vec2<f32> = vec2<f32>(x_1270.z, x_1270.w);
        let x_1273 : f32 = u_xlat22.z;
        txVec10 = vec3<f32>(x_1271.x, x_1271.y, x_1273);
        let x_1280 : vec3<f32> = txVec10;
        let x_1282 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1280.xy, x_1280.z);
        u_xlat27 = x_1282;
        let x_1284 : f32 = u_xlat15.z;
        let x_1285 : f32 = u_xlat27;
        let x_1288 : f32 = u_xlat6.x;
        u_xlat6.x = ((x_1284 * x_1285) + x_1288);
        let x_1292 : vec4<f32> = u_xlat9;
        let x_1293 : vec2<f32> = vec2<f32>(x_1292.x, x_1292.y);
        let x_1295 : f32 = u_xlat22.z;
        txVec11 = vec3<f32>(x_1293.x, x_1293.y, x_1295);
        let x_1302 : vec3<f32> = txVec11;
        let x_1304 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1302.xy, x_1302.z);
        u_xlat27 = x_1304;
        let x_1306 : f32 = u_xlat15.w;
        let x_1307 : f32 = u_xlat27;
        let x_1310 : f32 = u_xlat6.x;
        u_xlat6.x = ((x_1306 * x_1307) + x_1310);
        let x_1314 : vec4<f32> = u_xlat9;
        let x_1315 : vec2<f32> = vec2<f32>(x_1314.z, x_1314.w);
        let x_1317 : f32 = u_xlat22.z;
        txVec12 = vec3<f32>(x_1315.x, x_1315.y, x_1317);
        let x_1324 : vec3<f32> = txVec12;
        let x_1326 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1324.xy, x_1324.z);
        u_xlat27 = x_1326;
        let x_1327 : f32 = u_xlat68;
        let x_1328 : f32 = u_xlat27;
        let x_1331 : f32 = u_xlat6.x;
        u_xlat66 = ((x_1327 * x_1328) + x_1331);
      } else {
        let x_1334 : vec3<f32> = u_xlat22;
        let x_1337 : vec4<f32> = x_430.x_MainLightShadowmapSize;
        let x_1340 : vec2<f32> = ((vec2<f32>(x_1334.x, x_1334.y) * vec2<f32>(x_1337.z, x_1337.w)) + vec2<f32>(0.5f, 0.5f));
        let x_1341 : vec4<f32> = u_xlat6;
        u_xlat6 = vec4<f32>(x_1340.x, x_1340.y, x_1341.z, x_1341.w);
        let x_1343 : vec4<f32> = u_xlat6;
        let x_1345 : vec2<f32> = floor(vec2<f32>(x_1343.x, x_1343.y));
        let x_1346 : vec4<f32> = u_xlat6;
        u_xlat6 = vec4<f32>(x_1345.x, x_1345.y, x_1346.z, x_1346.w);
        let x_1348 : vec3<f32> = u_xlat22;
        let x_1351 : vec4<f32> = x_430.x_MainLightShadowmapSize;
        let x_1354 : vec4<f32> = u_xlat6;
        u_xlat48 = ((vec2<f32>(x_1348.x, x_1348.y) * vec2<f32>(x_1351.z, x_1351.w)) + -(vec2<f32>(x_1354.x, x_1354.y)));
        let x_1358 : vec2<f32> = u_xlat48;
        u_xlat8 = (vec4<f32>(x_1358.x, x_1358.x, x_1358.y, x_1358.y) + vec4<f32>(0.5f, 1.0f, 0.5f, 1.0f));
        let x_1361 : vec4<f32> = u_xlat8;
        let x_1363 : vec4<f32> = u_xlat8;
        u_xlat9 = (vec4<f32>(x_1361.x, x_1361.x, x_1361.z, x_1361.z) * vec4<f32>(x_1363.x, x_1363.x, x_1363.z, x_1363.z));
        let x_1366 : vec4<f32> = u_xlat9;
        let x_1370 : vec2<f32> = (vec2<f32>(x_1366.y, x_1366.w) * vec2<f32>(0.040816002f, 0.040816002f));
        let x_1371 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_1371.x, x_1370.x, x_1371.z, x_1370.y);
        let x_1373 : vec4<f32> = u_xlat9;
        let x_1376 : vec2<f32> = u_xlat48;
        let x_1378 : vec2<f32> = ((vec2<f32>(x_1373.x, x_1373.z) * vec2<f32>(0.5f, 0.5f)) + -(x_1376));
        let x_1379 : vec4<f32> = u_xlat8;
        u_xlat8 = vec4<f32>(x_1378.x, x_1379.y, x_1378.y, x_1379.w);
        let x_1381 : vec2<f32> = u_xlat48;
        let x_1383 : vec2<f32> = (-(x_1381) + vec2<f32>(1.0f, 1.0f));
        let x_1384 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_1383.x, x_1383.y, x_1384.z, x_1384.w);
        let x_1386 : vec2<f32> = u_xlat48;
        u_xlat51 = min(x_1386, vec2<f32>(0.0f, 0.0f));
        let x_1388 : vec2<f32> = u_xlat51;
        let x_1390 : vec2<f32> = u_xlat51;
        let x_1392 : vec4<f32> = u_xlat9;
        let x_1394 : vec2<f32> = ((-(x_1388) * x_1390) + vec2<f32>(x_1392.x, x_1392.y));
        let x_1395 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_1394.x, x_1394.y, x_1395.z, x_1395.w);
        let x_1397 : vec2<f32> = u_xlat48;
        u_xlat51 = max(x_1397, vec2<f32>(0.0f, 0.0f));
        let x_1400 : vec2<f32> = u_xlat51;
        let x_1402 : vec2<f32> = u_xlat51;
        let x_1404 : vec4<f32> = u_xlat8;
        let x_1406 : vec2<f32> = ((-(x_1400) * x_1402) + vec2<f32>(x_1404.y, x_1404.w));
        let x_1407 : vec3<f32> = u_xlat29;
        u_xlat29 = vec3<f32>(x_1406.x, x_1407.y, x_1406.y);
        let x_1409 : vec4<f32> = u_xlat9;
        let x_1411 : vec2<f32> = (vec2<f32>(x_1409.x, x_1409.y) + vec2<f32>(2.0f, 2.0f));
        let x_1412 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_1411.x, x_1411.y, x_1412.z, x_1412.w);
        let x_1414 : vec3<f32> = u_xlat29;
        let x_1416 : vec2<f32> = (vec2<f32>(x_1414.x, x_1414.z) + vec2<f32>(2.0f, 2.0f));
        let x_1417 : vec4<f32> = u_xlat8;
        u_xlat8 = vec4<f32>(x_1417.x, x_1416.x, x_1417.z, x_1416.y);
        let x_1420 : f32 = u_xlat8.y;
        u_xlat11.z = (x_1420 * 0.081632003f);
        let x_1424 : vec4<f32> = u_xlat8;
        let x_1427 : vec3<f32> = (vec3<f32>(x_1424.z, x_1424.x, x_1424.w) * vec3<f32>(0.081632003f, 0.081632003f, 0.081632003f));
        let x_1428 : vec4<f32> = u_xlat12;
        u_xlat12 = vec4<f32>(x_1427.x, x_1427.y, x_1427.z, x_1428.w);
        let x_1430 : vec4<f32> = u_xlat9;
        let x_1433 : vec2<f32> = (vec2<f32>(x_1430.x, x_1430.y) * vec2<f32>(0.081632003f, 0.081632003f));
        let x_1434 : vec4<f32> = u_xlat8;
        u_xlat8 = vec4<f32>(x_1433.x, x_1433.y, x_1434.z, x_1434.w);
        let x_1437 : f32 = u_xlat12.y;
        u_xlat11.x = x_1437;
        let x_1439 : vec2<f32> = u_xlat48;
        let x_1446 : vec2<f32> = ((vec2<f32>(x_1439.x, x_1439.x) * vec2<f32>(-0.081632003f, 0.081632003f)) + vec2<f32>(0.163264006f, 0.081632003f));
        let x_1447 : vec4<f32> = u_xlat11;
        u_xlat11 = vec4<f32>(x_1447.x, x_1446.x, x_1447.z, x_1446.y);
        let x_1449 : vec2<f32> = u_xlat48;
        let x_1453 : vec2<f32> = ((vec2<f32>(x_1449.x, x_1449.x) * vec2<f32>(-0.081632003f, 0.081632003f)) + vec2<f32>(0.081632003f, 0.163264006f));
        let x_1454 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_1453.x, x_1454.y, x_1453.y, x_1454.w);
        let x_1457 : f32 = u_xlat8.x;
        u_xlat9.y = x_1457;
        let x_1460 : f32 = u_xlat10.y;
        u_xlat9.w = x_1460;
        let x_1462 : vec4<f32> = u_xlat9;
        let x_1463 : vec4<f32> = u_xlat11;
        u_xlat11 = (x_1462 + x_1463);
        let x_1465 : vec2<f32> = u_xlat48;
        let x_1468 : vec2<f32> = ((vec2<f32>(x_1465.y, x_1465.y) * vec2<f32>(-0.081632003f, 0.081632003f)) + vec2<f32>(0.163264006f, 0.081632003f));
        let x_1469 : vec4<f32> = u_xlat12;
        u_xlat12 = vec4<f32>(x_1469.x, x_1468.x, x_1469.z, x_1468.y);
        let x_1471 : vec2<f32> = u_xlat48;
        let x_1474 : vec2<f32> = ((vec2<f32>(x_1471.y, x_1471.y) * vec2<f32>(-0.081632003f, 0.081632003f)) + vec2<f32>(0.081632003f, 0.163264006f));
        let x_1475 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_1474.x, x_1475.y, x_1474.y, x_1475.w);
        let x_1478 : f32 = u_xlat8.y;
        u_xlat10.y = x_1478;
        let x_1480 : vec4<f32> = u_xlat10;
        let x_1481 : vec4<f32> = u_xlat12;
        u_xlat8 = (x_1480 + x_1481);
        let x_1483 : vec4<f32> = u_xlat9;
        let x_1484 : vec4<f32> = u_xlat11;
        u_xlat9 = (x_1483 / x_1484);
        let x_1486 : vec4<f32> = u_xlat9;
        u_xlat9 = (x_1486 + vec4<f32>(-3.5f, -1.5f, 0.5f, 2.5f));
        let x_1492 : vec4<f32> = u_xlat10;
        let x_1493 : vec4<f32> = u_xlat8;
        u_xlat10 = (x_1492 / x_1493);
        let x_1495 : vec4<f32> = u_xlat10;
        u_xlat10 = (x_1495 + vec4<f32>(-3.5f, -1.5f, 0.5f, 2.5f));
        let x_1497 : vec4<f32> = u_xlat9;
        let x_1500 : vec4<f32> = x_430.x_MainLightShadowmapSize;
        u_xlat9 = (vec4<f32>(x_1497.w, x_1497.x, x_1497.y, x_1497.z) * vec4<f32>(x_1500.x, x_1500.x, x_1500.x, x_1500.x));
        let x_1503 : vec4<f32> = u_xlat10;
        let x_1506 : vec4<f32> = x_430.x_MainLightShadowmapSize;
        u_xlat10 = (vec4<f32>(x_1503.x, x_1503.w, x_1503.y, x_1503.z) * vec4<f32>(x_1506.y, x_1506.y, x_1506.y, x_1506.y));
        let x_1509 : vec4<f32> = u_xlat9;
        let x_1510 : vec3<f32> = vec3<f32>(x_1509.y, x_1509.z, x_1509.w);
        let x_1511 : vec4<f32> = u_xlat12;
        u_xlat12 = vec4<f32>(x_1510.x, x_1511.y, x_1510.y, x_1510.z);
        let x_1514 : f32 = u_xlat10.x;
        u_xlat12.y = x_1514;
        let x_1516 : vec4<f32> = u_xlat6;
        let x_1519 : vec4<f32> = x_430.x_MainLightShadowmapSize;
        let x_1522 : vec4<f32> = u_xlat12;
        u_xlat13 = ((vec4<f32>(x_1516.x, x_1516.y, x_1516.x, x_1516.y) * vec4<f32>(x_1519.x, x_1519.y, x_1519.x, x_1519.y)) + vec4<f32>(x_1522.x, x_1522.y, x_1522.z, x_1522.y));
        let x_1525 : vec4<f32> = u_xlat6;
        let x_1528 : vec4<f32> = x_430.x_MainLightShadowmapSize;
        let x_1531 : vec4<f32> = u_xlat12;
        u_xlat48 = ((vec2<f32>(x_1525.x, x_1525.y) * vec2<f32>(x_1528.x, x_1528.y)) + vec2<f32>(x_1531.w, x_1531.y));
        let x_1535 : f32 = u_xlat12.y;
        u_xlat9.y = x_1535;
        let x_1538 : f32 = u_xlat10.z;
        u_xlat12.y = x_1538;
        let x_1540 : vec4<f32> = u_xlat6;
        let x_1543 : vec4<f32> = x_430.x_MainLightShadowmapSize;
        let x_1546 : vec4<f32> = u_xlat12;
        u_xlat14 = ((vec4<f32>(x_1540.x, x_1540.y, x_1540.x, x_1540.y) * vec4<f32>(x_1543.x, x_1543.y, x_1543.x, x_1543.y)) + vec4<f32>(x_1546.x, x_1546.y, x_1546.z, x_1546.y));
        let x_1549 : vec4<f32> = u_xlat6;
        let x_1552 : vec4<f32> = x_430.x_MainLightShadowmapSize;
        let x_1555 : vec4<f32> = u_xlat12;
        let x_1557 : vec2<f32> = ((vec2<f32>(x_1549.x, x_1549.y) * vec2<f32>(x_1552.x, x_1552.y)) + vec2<f32>(x_1555.w, x_1555.y));
        let x_1558 : vec4<f32> = u_xlat15;
        u_xlat15 = vec4<f32>(x_1557.x, x_1557.y, x_1558.z, x_1558.w);
        let x_1561 : f32 = u_xlat12.y;
        u_xlat9.z = x_1561;
        let x_1564 : vec4<f32> = u_xlat6;
        let x_1567 : vec4<f32> = x_430.x_MainLightShadowmapSize;
        let x_1570 : vec4<f32> = u_xlat9;
        u_xlat16 = ((vec4<f32>(x_1564.x, x_1564.y, x_1564.x, x_1564.y) * vec4<f32>(x_1567.x, x_1567.y, x_1567.x, x_1567.y)) + vec4<f32>(x_1570.x, x_1570.y, x_1570.x, x_1570.z));
        let x_1574 : f32 = u_xlat10.w;
        u_xlat12.y = x_1574;
        let x_1577 : vec4<f32> = u_xlat6;
        let x_1580 : vec4<f32> = x_430.x_MainLightShadowmapSize;
        let x_1583 : vec4<f32> = u_xlat12;
        u_xlat17 = ((vec4<f32>(x_1577.x, x_1577.y, x_1577.x, x_1577.y) * vec4<f32>(x_1580.x, x_1580.y, x_1580.x, x_1580.y)) + vec4<f32>(x_1583.x, x_1583.y, x_1583.z, x_1583.y));
        let x_1587 : vec4<f32> = u_xlat6;
        let x_1590 : vec4<f32> = x_430.x_MainLightShadowmapSize;
        let x_1593 : vec4<f32> = u_xlat12;
        u_xlat30 = ((vec2<f32>(x_1587.x, x_1587.y) * vec2<f32>(x_1590.x, x_1590.y)) + vec2<f32>(x_1593.w, x_1593.y));
        let x_1597 : f32 = u_xlat12.y;
        u_xlat9.w = x_1597;
        let x_1600 : vec4<f32> = u_xlat6;
        let x_1603 : vec4<f32> = x_430.x_MainLightShadowmapSize;
        let x_1606 : vec4<f32> = u_xlat9;
        u_xlat57 = ((vec2<f32>(x_1600.x, x_1600.y) * vec2<f32>(x_1603.x, x_1603.y)) + vec2<f32>(x_1606.x, x_1606.w));
        let x_1609 : vec4<f32> = u_xlat12;
        let x_1610 : vec3<f32> = vec3<f32>(x_1609.x, x_1609.z, x_1609.w);
        let x_1611 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_1610.x, x_1611.y, x_1610.y, x_1610.z);
        let x_1613 : vec4<f32> = u_xlat6;
        let x_1616 : vec4<f32> = x_430.x_MainLightShadowmapSize;
        let x_1619 : vec4<f32> = u_xlat10;
        u_xlat12 = ((vec4<f32>(x_1613.x, x_1613.y, x_1613.x, x_1613.y) * vec4<f32>(x_1616.x, x_1616.y, x_1616.x, x_1616.y)) + vec4<f32>(x_1619.x, x_1619.y, x_1619.z, x_1619.y));
        let x_1623 : vec4<f32> = u_xlat6;
        let x_1626 : vec4<f32> = x_430.x_MainLightShadowmapSize;
        let x_1629 : vec4<f32> = u_xlat10;
        u_xlat52 = ((vec2<f32>(x_1623.x, x_1623.y) * vec2<f32>(x_1626.x, x_1626.y)) + vec2<f32>(x_1629.w, x_1629.y));
        let x_1633 : f32 = u_xlat9.x;
        u_xlat10.x = x_1633;
        let x_1635 : vec4<f32> = u_xlat6;
        let x_1638 : vec4<f32> = x_430.x_MainLightShadowmapSize;
        let x_1641 : vec4<f32> = u_xlat10;
        let x_1643 : vec2<f32> = ((vec2<f32>(x_1635.x, x_1635.y) * vec2<f32>(x_1638.x, x_1638.y)) + vec2<f32>(x_1641.x, x_1641.y));
        let x_1644 : vec4<f32> = u_xlat6;
        u_xlat6 = vec4<f32>(x_1643.x, x_1643.y, x_1644.z, x_1644.w);
        let x_1647 : vec4<f32> = u_xlat8;
        let x_1649 : vec4<f32> = u_xlat11;
        u_xlat18 = (vec4<f32>(x_1647.x, x_1647.x, x_1647.x, x_1647.x) * x_1649);
        let x_1652 : vec4<f32> = u_xlat8;
        let x_1654 : vec4<f32> = u_xlat11;
        u_xlat19 = (vec4<f32>(x_1652.y, x_1652.y, x_1652.y, x_1652.y) * x_1654);
        let x_1657 : vec4<f32> = u_xlat8;
        let x_1659 : vec4<f32> = u_xlat11;
        u_xlat20 = (vec4<f32>(x_1657.z, x_1657.z, x_1657.z, x_1657.z) * x_1659);
        let x_1661 : vec4<f32> = u_xlat8;
        let x_1663 : vec4<f32> = u_xlat11;
        u_xlat8 = (vec4<f32>(x_1661.w, x_1661.w, x_1661.w, x_1661.w) * x_1663);
        let x_1666 : vec4<f32> = u_xlat13;
        let x_1667 : vec2<f32> = vec2<f32>(x_1666.x, x_1666.y);
        let x_1669 : f32 = u_xlat22.z;
        txVec13 = vec3<f32>(x_1667.x, x_1667.y, x_1669);
        let x_1676 : vec3<f32> = txVec13;
        let x_1678 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1676.xy, x_1676.z);
        u_xlat68 = x_1678;
        let x_1680 : vec4<f32> = u_xlat13;
        let x_1681 : vec2<f32> = vec2<f32>(x_1680.z, x_1680.w);
        let x_1683 : f32 = u_xlat22.z;
        txVec14 = vec3<f32>(x_1681.x, x_1681.y, x_1683);
        let x_1691 : vec3<f32> = txVec14;
        let x_1693 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1691.xy, x_1691.z);
        u_xlat70 = x_1693;
        let x_1694 : f32 = u_xlat70;
        let x_1696 : f32 = u_xlat18.y;
        u_xlat70 = (x_1694 * x_1696);
        let x_1699 : f32 = u_xlat18.x;
        let x_1700 : f32 = u_xlat68;
        let x_1702 : f32 = u_xlat70;
        u_xlat68 = ((x_1699 * x_1700) + x_1702);
        let x_1705 : vec2<f32> = u_xlat48;
        let x_1707 : f32 = u_xlat22.z;
        txVec15 = vec3<f32>(x_1705.x, x_1705.y, x_1707);
        let x_1714 : vec3<f32> = txVec15;
        let x_1716 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1714.xy, x_1714.z);
        u_xlat48.x = x_1716;
        let x_1719 : f32 = u_xlat18.z;
        let x_1721 : f32 = u_xlat48.x;
        let x_1723 : f32 = u_xlat68;
        u_xlat68 = ((x_1719 * x_1721) + x_1723);
        let x_1726 : vec4<f32> = u_xlat16;
        let x_1727 : vec2<f32> = vec2<f32>(x_1726.x, x_1726.y);
        let x_1729 : f32 = u_xlat22.z;
        txVec16 = vec3<f32>(x_1727.x, x_1727.y, x_1729);
        let x_1736 : vec3<f32> = txVec16;
        let x_1738 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1736.xy, x_1736.z);
        u_xlat48.x = x_1738;
        let x_1741 : f32 = u_xlat18.w;
        let x_1743 : f32 = u_xlat48.x;
        let x_1745 : f32 = u_xlat68;
        u_xlat68 = ((x_1741 * x_1743) + x_1745);
        let x_1748 : vec4<f32> = u_xlat14;
        let x_1749 : vec2<f32> = vec2<f32>(x_1748.x, x_1748.y);
        let x_1751 : f32 = u_xlat22.z;
        txVec17 = vec3<f32>(x_1749.x, x_1749.y, x_1751);
        let x_1758 : vec3<f32> = txVec17;
        let x_1760 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1758.xy, x_1758.z);
        u_xlat48.x = x_1760;
        let x_1763 : f32 = u_xlat19.x;
        let x_1765 : f32 = u_xlat48.x;
        let x_1767 : f32 = u_xlat68;
        u_xlat68 = ((x_1763 * x_1765) + x_1767);
        let x_1770 : vec4<f32> = u_xlat14;
        let x_1771 : vec2<f32> = vec2<f32>(x_1770.z, x_1770.w);
        let x_1773 : f32 = u_xlat22.z;
        txVec18 = vec3<f32>(x_1771.x, x_1771.y, x_1773);
        let x_1780 : vec3<f32> = txVec18;
        let x_1782 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1780.xy, x_1780.z);
        u_xlat48.x = x_1782;
        let x_1785 : f32 = u_xlat19.y;
        let x_1787 : f32 = u_xlat48.x;
        let x_1789 : f32 = u_xlat68;
        u_xlat68 = ((x_1785 * x_1787) + x_1789);
        let x_1792 : vec4<f32> = u_xlat15;
        let x_1793 : vec2<f32> = vec2<f32>(x_1792.x, x_1792.y);
        let x_1795 : f32 = u_xlat22.z;
        txVec19 = vec3<f32>(x_1793.x, x_1793.y, x_1795);
        let x_1802 : vec3<f32> = txVec19;
        let x_1804 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1802.xy, x_1802.z);
        u_xlat48.x = x_1804;
        let x_1807 : f32 = u_xlat19.z;
        let x_1809 : f32 = u_xlat48.x;
        let x_1811 : f32 = u_xlat68;
        u_xlat68 = ((x_1807 * x_1809) + x_1811);
        let x_1814 : vec4<f32> = u_xlat16;
        let x_1815 : vec2<f32> = vec2<f32>(x_1814.z, x_1814.w);
        let x_1817 : f32 = u_xlat22.z;
        txVec20 = vec3<f32>(x_1815.x, x_1815.y, x_1817);
        let x_1824 : vec3<f32> = txVec20;
        let x_1826 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1824.xy, x_1824.z);
        u_xlat48.x = x_1826;
        let x_1829 : f32 = u_xlat19.w;
        let x_1831 : f32 = u_xlat48.x;
        let x_1833 : f32 = u_xlat68;
        u_xlat68 = ((x_1829 * x_1831) + x_1833);
        let x_1836 : vec4<f32> = u_xlat17;
        let x_1837 : vec2<f32> = vec2<f32>(x_1836.x, x_1836.y);
        let x_1839 : f32 = u_xlat22.z;
        txVec21 = vec3<f32>(x_1837.x, x_1837.y, x_1839);
        let x_1846 : vec3<f32> = txVec21;
        let x_1848 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1846.xy, x_1846.z);
        u_xlat48.x = x_1848;
        let x_1851 : f32 = u_xlat20.x;
        let x_1853 : f32 = u_xlat48.x;
        let x_1855 : f32 = u_xlat68;
        u_xlat68 = ((x_1851 * x_1853) + x_1855);
        let x_1858 : vec4<f32> = u_xlat17;
        let x_1859 : vec2<f32> = vec2<f32>(x_1858.z, x_1858.w);
        let x_1861 : f32 = u_xlat22.z;
        txVec22 = vec3<f32>(x_1859.x, x_1859.y, x_1861);
        let x_1868 : vec3<f32> = txVec22;
        let x_1870 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1868.xy, x_1868.z);
        u_xlat48.x = x_1870;
        let x_1873 : f32 = u_xlat20.y;
        let x_1875 : f32 = u_xlat48.x;
        let x_1877 : f32 = u_xlat68;
        u_xlat68 = ((x_1873 * x_1875) + x_1877);
        let x_1880 : vec2<f32> = u_xlat30;
        let x_1882 : f32 = u_xlat22.z;
        txVec23 = vec3<f32>(x_1880.x, x_1880.y, x_1882);
        let x_1889 : vec3<f32> = txVec23;
        let x_1891 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1889.xy, x_1889.z);
        u_xlat48.x = x_1891;
        let x_1894 : f32 = u_xlat20.z;
        let x_1896 : f32 = u_xlat48.x;
        let x_1898 : f32 = u_xlat68;
        u_xlat68 = ((x_1894 * x_1896) + x_1898);
        let x_1901 : vec2<f32> = u_xlat57;
        let x_1903 : f32 = u_xlat22.z;
        txVec24 = vec3<f32>(x_1901.x, x_1901.y, x_1903);
        let x_1910 : vec3<f32> = txVec24;
        let x_1912 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1910.xy, x_1910.z);
        u_xlat48.x = x_1912;
        let x_1915 : f32 = u_xlat20.w;
        let x_1917 : f32 = u_xlat48.x;
        let x_1919 : f32 = u_xlat68;
        u_xlat68 = ((x_1915 * x_1917) + x_1919);
        let x_1922 : vec4<f32> = u_xlat12;
        let x_1923 : vec2<f32> = vec2<f32>(x_1922.x, x_1922.y);
        let x_1925 : f32 = u_xlat22.z;
        txVec25 = vec3<f32>(x_1923.x, x_1923.y, x_1925);
        let x_1932 : vec3<f32> = txVec25;
        let x_1934 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1932.xy, x_1932.z);
        u_xlat48.x = x_1934;
        let x_1937 : f32 = u_xlat8.x;
        let x_1939 : f32 = u_xlat48.x;
        let x_1941 : f32 = u_xlat68;
        u_xlat68 = ((x_1937 * x_1939) + x_1941);
        let x_1944 : vec4<f32> = u_xlat12;
        let x_1945 : vec2<f32> = vec2<f32>(x_1944.z, x_1944.w);
        let x_1947 : f32 = u_xlat22.z;
        txVec26 = vec3<f32>(x_1945.x, x_1945.y, x_1947);
        let x_1954 : vec3<f32> = txVec26;
        let x_1956 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1954.xy, x_1954.z);
        u_xlat48.x = x_1956;
        let x_1959 : f32 = u_xlat8.y;
        let x_1961 : f32 = u_xlat48.x;
        let x_1963 : f32 = u_xlat68;
        u_xlat68 = ((x_1959 * x_1961) + x_1963);
        let x_1966 : vec2<f32> = u_xlat52;
        let x_1968 : f32 = u_xlat22.z;
        txVec27 = vec3<f32>(x_1966.x, x_1966.y, x_1968);
        let x_1975 : vec3<f32> = txVec27;
        let x_1977 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1975.xy, x_1975.z);
        u_xlat48.x = x_1977;
        let x_1980 : f32 = u_xlat8.z;
        let x_1982 : f32 = u_xlat48.x;
        let x_1984 : f32 = u_xlat68;
        u_xlat68 = ((x_1980 * x_1982) + x_1984);
        let x_1987 : vec4<f32> = u_xlat6;
        let x_1988 : vec2<f32> = vec2<f32>(x_1987.x, x_1987.y);
        let x_1990 : f32 = u_xlat22.z;
        txVec28 = vec3<f32>(x_1988.x, x_1988.y, x_1990);
        let x_1997 : vec3<f32> = txVec28;
        let x_1999 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1997.xy, x_1997.z);
        u_xlat6.x = x_1999;
        let x_2002 : f32 = u_xlat8.w;
        let x_2004 : f32 = u_xlat6.x;
        let x_2006 : f32 = u_xlat68;
        u_xlat66 = ((x_2002 * x_2004) + x_2006);
      }
    }
  } else {
    let x_2010 : vec3<f32> = u_xlat22;
    let x_2011 : vec2<f32> = vec2<f32>(x_2010.x, x_2010.y);
    let x_2013 : f32 = u_xlat22.z;
    txVec29 = vec3<f32>(x_2011.x, x_2011.y, x_2013);
    let x_2020 : vec3<f32> = txVec29;
    let x_2022 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2020.xy, x_2020.z);
    u_xlat66 = x_2022;
  }
  let x_2024 : f32 = x_430.x_MainLightShadowParams.x;
  u_xlat22.x = (-(x_2024) + 1.0f);
  let x_2028 : f32 = u_xlat66;
  let x_2030 : f32 = x_430.x_MainLightShadowParams.x;
  let x_2033 : f32 = u_xlat22.x;
  u_xlat22.x = ((x_2028 * x_2030) + x_2033);
  let x_2038 : f32 = u_xlat22.z;
  u_xlatb43 = (0.0f >= x_2038);
  let x_2042 : f32 = u_xlat22.z;
  u_xlatb64 = (x_2042 >= 1.0f);
  let x_2044 : bool = u_xlatb64;
  let x_2045 : bool = u_xlatb43;
  u_xlatb43 = (x_2044 | x_2045);
  let x_2047 : bool = u_xlatb43;
  if (x_2047) {
    x_2048 = 1.0f;
  } else {
    let x_2053 : f32 = u_xlat22.x;
    x_2048 = x_2053;
  }
  let x_2054 : f32 = x_2048;
  u_xlat22.x = x_2054;
  let x_2056 : vec3<f32> = vs_INTERP0;
  let x_2058 : vec3<f32> = x_44.x_WorldSpaceCameraPos;
  let x_2060 : vec3<f32> = (x_2056 + -(x_2058));
  let x_2061 : vec4<f32> = u_xlat6;
  u_xlat6 = vec4<f32>(x_2060.x, x_2060.y, x_2060.z, x_2061.w);
  let x_2063 : vec4<f32> = u_xlat6;
  let x_2065 : vec4<f32> = u_xlat6;
  u_xlat43 = dot(vec3<f32>(x_2063.x, x_2063.y, x_2063.z), vec3<f32>(x_2065.x, x_2065.y, x_2065.z));
  let x_2068 : f32 = u_xlat43;
  let x_2070 : f32 = x_430.x_MainLightShadowParams.z;
  let x_2073 : f32 = x_430.x_MainLightShadowParams.w;
  u_xlat43 = ((x_2068 * x_2070) + x_2073);
  let x_2075 : f32 = u_xlat43;
  u_xlat43 = clamp(x_2075, 0.0f, 1.0f);
  let x_2079 : f32 = u_xlat22.x;
  u_xlat64 = (-(x_2079) + 1.0f);
  let x_2082 : f32 = u_xlat43;
  let x_2083 : f32 = u_xlat64;
  let x_2086 : f32 = u_xlat22.x;
  u_xlat22.x = ((x_2082 * x_2083) + x_2086);
  let x_2089 : f32 = u_xlat67;
  let x_2092 : vec4<f32> = x_44.x_MainLightColor;
  let x_2094 : vec3<f32> = (vec3<f32>(x_2089, x_2089, x_2089) * vec3<f32>(x_2092.x, x_2092.y, x_2092.z));
  let x_2095 : vec4<f32> = u_xlat6;
  u_xlat6 = vec4<f32>(x_2094.x, x_2094.y, x_2094.z, x_2095.w);
  let x_2097 : vec3<f32> = u_xlat4;
  let x_2099 : vec4<f32> = u_xlat3;
  u_xlat43 = dot(-(x_2097), vec3<f32>(x_2099.x, x_2099.y, x_2099.z));
  let x_2102 : f32 = u_xlat43;
  let x_2103 : f32 = u_xlat43;
  u_xlat43 = (x_2102 + x_2103);
  let x_2105 : vec4<f32> = u_xlat3;
  let x_2107 : f32 = u_xlat43;
  let x_2111 : vec3<f32> = u_xlat4;
  let x_2113 : vec3<f32> = ((vec3<f32>(x_2105.x, x_2105.y, x_2105.z) * -(vec3<f32>(x_2107, x_2107, x_2107))) + -(x_2111));
  let x_2114 : vec4<f32> = u_xlat8;
  u_xlat8 = vec4<f32>(x_2113.x, x_2113.y, x_2113.z, x_2114.w);
  let x_2116 : vec4<f32> = u_xlat3;
  let x_2118 : vec3<f32> = u_xlat4;
  u_xlat43 = dot(vec3<f32>(x_2116.x, x_2116.y, x_2116.z), x_2118);
  let x_2120 : f32 = u_xlat43;
  u_xlat43 = clamp(x_2120, 0.0f, 1.0f);
  let x_2122 : f32 = u_xlat43;
  u_xlat43 = (-(x_2122) + 1.0f);
  let x_2125 : f32 = u_xlat43;
  let x_2126 : f32 = u_xlat43;
  u_xlat43 = (x_2125 * x_2126);
  let x_2128 : f32 = u_xlat43;
  let x_2129 : f32 = u_xlat43;
  u_xlat43 = (x_2128 * x_2129);
  let x_2132 : f32 = u_xlat0.x;
  u_xlat64 = ((-(x_2132) * 0.699999988f) + 1.700000048f);
  let x_2139 : f32 = u_xlat0.x;
  let x_2140 : f32 = u_xlat64;
  u_xlat0.x = (x_2139 * x_2140);
  let x_2144 : f32 = u_xlat0.x;
  u_xlat0.x = (x_2144 * 6.0f);
  let x_2156 : vec4<f32> = u_xlat8;
  let x_2159 : f32 = u_xlat0.x;
  let x_2160 : vec4<f32> = textureSampleLevel(unity_SpecCube0, samplerunity_SpecCube0, vec3<f32>(x_2156.x, x_2156.y, x_2156.z), x_2159);
  u_xlat8 = x_2160;
  let x_2162 : f32 = u_xlat8.w;
  u_xlat0.x = (x_2162 + -1.0f);
  let x_2166 : f32 = x_281.unity_SpecCube0_HDR.w;
  let x_2168 : f32 = u_xlat0.x;
  u_xlat0.x = ((x_2166 * x_2168) + 1.0f);
  let x_2173 : f32 = u_xlat0.x;
  u_xlat0.x = max(x_2173, 0.0f);
  let x_2177 : f32 = u_xlat0.x;
  u_xlat0.x = log2(x_2177);
  let x_2181 : f32 = u_xlat0.x;
  let x_2183 : f32 = x_281.unity_SpecCube0_HDR.y;
  u_xlat0.x = (x_2181 * x_2183);
  let x_2187 : f32 = u_xlat0.x;
  u_xlat0.x = exp2(x_2187);
  let x_2191 : f32 = u_xlat0.x;
  let x_2193 : f32 = x_281.unity_SpecCube0_HDR.x;
  u_xlat0.x = (x_2191 * x_2193);
  let x_2196 : vec4<f32> = u_xlat8;
  let x_2198 : vec4<f32> = u_xlat0;
  let x_2200 : vec3<f32> = (vec3<f32>(x_2196.x, x_2196.y, x_2196.z) * vec3<f32>(x_2198.x, x_2198.x, x_2198.x));
  let x_2201 : vec4<f32> = u_xlat8;
  u_xlat8 = vec4<f32>(x_2200.x, x_2200.y, x_2200.z, x_2201.w);
  let x_2203 : vec2<f32> = u_xlat21;
  let x_2205 : vec2<f32> = u_xlat21;
  let x_2209 : vec2<f32> = ((vec2<f32>(x_2203.x, x_2203.x) * vec2<f32>(x_2205.x, x_2205.x)) + vec2<f32>(-1.0f, 1.0f));
  let x_2210 : vec4<f32> = u_xlat0;
  u_xlat0 = vec4<f32>(x_2209.x, x_2209.y, x_2210.z, x_2210.w);
  let x_2213 : f32 = u_xlat0.y;
  u_xlat21.x = (1.0f / x_2213);
  let x_2216 : vec3<f32> = u_xlat2;
  let x_2218 : f32 = u_xlat42;
  let x_2220 : vec3<f32> = (-(x_2216) + vec3<f32>(x_2218, x_2218, x_2218));
  let x_2221 : vec4<f32> = u_xlat9;
  u_xlat9 = vec4<f32>(x_2220.x, x_2220.y, x_2220.z, x_2221.w);
  let x_2223 : f32 = u_xlat43;
  let x_2225 : vec4<f32> = u_xlat9;
  let x_2228 : vec3<f32> = u_xlat2;
  let x_2229 : vec3<f32> = ((vec3<f32>(x_2223, x_2223, x_2223) * vec3<f32>(x_2225.x, x_2225.y, x_2225.z)) + x_2228);
  let x_2230 : vec4<f32> = u_xlat9;
  u_xlat9 = vec4<f32>(x_2229.x, x_2229.y, x_2229.z, x_2230.w);
  let x_2232 : vec2<f32> = u_xlat21;
  let x_2234 : vec4<f32> = u_xlat9;
  let x_2236 : vec3<f32> = (vec3<f32>(x_2232.x, x_2232.x, x_2232.x) * vec3<f32>(x_2234.x, x_2234.y, x_2234.z));
  let x_2237 : vec4<f32> = u_xlat9;
  u_xlat9 = vec4<f32>(x_2236.x, x_2236.y, x_2236.z, x_2237.w);
  let x_2239 : vec4<f32> = u_xlat8;
  let x_2241 : vec4<f32> = u_xlat9;
  let x_2243 : vec3<f32> = (vec3<f32>(x_2239.x, x_2239.y, x_2239.z) * vec3<f32>(x_2241.x, x_2241.y, x_2241.z));
  let x_2244 : vec4<f32> = u_xlat8;
  u_xlat8 = vec4<f32>(x_2243.x, x_2243.y, x_2243.z, x_2244.w);
  let x_2246 : vec3<f32> = u_xlat5;
  let x_2247 : vec3<f32> = u_xlat7;
  let x_2249 : vec4<f32> = u_xlat8;
  u_xlat5 = ((x_2246 * x_2247) + vec3<f32>(x_2249.x, x_2249.y, x_2249.z));
  let x_2253 : f32 = u_xlat22.x;
  let x_2255 : f32 = x_281.unity_LightData.z;
  u_xlat21.x = (x_2253 * x_2255);
  let x_2258 : vec4<f32> = u_xlat3;
  let x_2261 : vec4<f32> = x_44.x_MainLightPosition;
  u_xlat42 = dot(vec3<f32>(x_2258.x, x_2258.y, x_2258.z), vec3<f32>(x_2261.x, x_2261.y, x_2261.z));
  let x_2264 : f32 = u_xlat42;
  u_xlat42 = clamp(x_2264, 0.0f, 1.0f);
  let x_2266 : f32 = u_xlat42;
  let x_2268 : f32 = u_xlat21.x;
  u_xlat21.x = (x_2266 * x_2268);
  let x_2271 : vec2<f32> = u_xlat21;
  let x_2273 : vec4<f32> = u_xlat6;
  u_xlat22 = (vec3<f32>(x_2271.x, x_2271.x, x_2271.x) * vec3<f32>(x_2273.x, x_2273.y, x_2273.z));
  let x_2276 : vec3<f32> = u_xlat4;
  let x_2278 : vec4<f32> = x_44.x_MainLightPosition;
  let x_2280 : vec3<f32> = (x_2276 + vec3<f32>(x_2278.x, x_2278.y, x_2278.z));
  let x_2281 : vec4<f32> = u_xlat6;
  u_xlat6 = vec4<f32>(x_2280.x, x_2280.y, x_2280.z, x_2281.w);
  let x_2283 : vec4<f32> = u_xlat6;
  let x_2285 : vec4<f32> = u_xlat6;
  u_xlat21.x = dot(vec3<f32>(x_2283.x, x_2283.y, x_2283.z), vec3<f32>(x_2285.x, x_2285.y, x_2285.z));
  let x_2290 : f32 = u_xlat21.x;
  u_xlat21.x = max(x_2290, 1.17549435e-37f);
  let x_2295 : f32 = u_xlat21.x;
  u_xlat21.x = inverseSqrt(x_2295);
  let x_2298 : vec2<f32> = u_xlat21;
  let x_2300 : vec4<f32> = u_xlat6;
  let x_2302 : vec3<f32> = (vec3<f32>(x_2298.x, x_2298.x, x_2298.x) * vec3<f32>(x_2300.x, x_2300.y, x_2300.z));
  let x_2303 : vec4<f32> = u_xlat6;
  u_xlat6 = vec4<f32>(x_2302.x, x_2302.y, x_2302.z, x_2303.w);
  let x_2305 : vec4<f32> = u_xlat3;
  let x_2307 : vec4<f32> = u_xlat6;
  u_xlat21.x = dot(vec3<f32>(x_2305.x, x_2305.y, x_2305.z), vec3<f32>(x_2307.x, x_2307.y, x_2307.z));
  let x_2312 : f32 = u_xlat21.x;
  u_xlat21.x = clamp(x_2312, 0.0f, 1.0f);
  let x_2316 : vec4<f32> = x_44.x_MainLightPosition;
  let x_2318 : vec4<f32> = u_xlat6;
  u_xlat21.y = dot(vec3<f32>(x_2316.x, x_2316.y, x_2316.z), vec3<f32>(x_2318.x, x_2318.y, x_2318.z));
  let x_2323 : f32 = u_xlat21.y;
  u_xlat21.y = clamp(x_2323, 0.0f, 1.0f);
  let x_2326 : vec2<f32> = u_xlat21;
  let x_2327 : vec2<f32> = u_xlat21;
  u_xlat21 = (x_2326 * x_2327);
  let x_2330 : f32 = u_xlat21.x;
  let x_2332 : f32 = u_xlat0.x;
  u_xlat21.x = ((x_2330 * x_2332) + 1.000010014f);
  let x_2338 : f32 = u_xlat21.x;
  let x_2340 : f32 = u_xlat21.x;
  u_xlat21.x = (x_2338 * x_2340);
  let x_2344 : f32 = u_xlat21.y;
  u_xlat42 = max(x_2344, 0.100000001f);
  let x_2347 : f32 = u_xlat42;
  let x_2349 : f32 = u_xlat21.x;
  u_xlat21.x = (x_2347 * x_2349);
  let x_2353 : f32 = u_xlat1.x;
  let x_2355 : f32 = u_xlat21.x;
  u_xlat21.x = (x_2353 * x_2355);
  let x_2358 : f32 = u_xlat65;
  let x_2360 : f32 = u_xlat21.x;
  u_xlat21.x = (x_2358 / x_2360);
  let x_2363 : vec3<f32> = u_xlat2;
  let x_2364 : vec2<f32> = u_xlat21;
  let x_2367 : vec3<f32> = u_xlat7;
  let x_2368 : vec3<f32> = ((x_2363 * vec3<f32>(x_2364.x, x_2364.x, x_2364.x)) + x_2367);
  let x_2369 : vec4<f32> = u_xlat6;
  u_xlat6 = vec4<f32>(x_2368.x, x_2368.y, x_2368.z, x_2369.w);
  let x_2371 : vec3<f32> = u_xlat22;
  let x_2372 : vec4<f32> = u_xlat6;
  u_xlat22 = (x_2371 * vec3<f32>(x_2372.x, x_2372.y, x_2372.z));
  let x_2376 : f32 = x_44.x_AdditionalLightsCount.x;
  let x_2378 : f32 = x_281.unity_LightData.y;
  u_xlat21.x = min(x_2376, x_2378);
  let x_2382 : f32 = u_xlat21.x;
  u_xlatu21 = bitcast<u32>(i32(x_2382));
  u_xlat6.x = 0.0f;
  u_xlat6.y = 0.0f;
  u_xlat6.z = 0.0f;
  u_xlatu_loop_1 = 0u;
  loop {
    let x_2394 : u32 = u_xlatu_loop_1;
    let x_2395 : u32 = u_xlatu21;
    if ((x_2394 < x_2395)) {
    } else {
      break;
    }
    let x_2398 : u32 = u_xlatu_loop_1;
    u_xlatu66 = (x_2398 >> 2u);
    let x_2401 : u32 = u_xlatu_loop_1;
    u_xlati68 = bitcast<i32>((x_2401 & 3u));
    let x_2404 : u32 = u_xlatu66;
    let x_2407 : vec4<f32> = x_281.unity_LightIndices[bitcast<i32>(x_2404)];
    let x_2417 : i32 = u_xlati68;
    indexable = array<vec4<u32>, 4u>(vec4<u32>(1065353216u, 0u, 0u, 0u), vec4<u32>(0u, 1065353216u, 0u, 0u), vec4<u32>(0u, 0u, 1065353216u, 0u), vec4<u32>(0u, 0u, 0u, 1065353216u));
    let x_2422 : vec4<u32> = indexable[x_2417];
    u_xlat66 = dot(x_2407, bitcast<vec4<f32>>(x_2422));
    let x_2426 : f32 = u_xlat66;
    u_xlati66 = i32(x_2426);
    let x_2428 : vec3<f32> = vs_INTERP0;
    let x_2440 : i32 = u_xlati66;
    let x_2442 : vec4<f32> = x_2439.x_AdditionalLightsPosition[x_2440];
    let x_2445 : i32 = u_xlati66;
    let x_2447 : vec4<f32> = x_2439.x_AdditionalLightsPosition[x_2445];
    let x_2449 : vec3<f32> = ((-(x_2428) * vec3<f32>(x_2442.w, x_2442.w, x_2442.w)) + vec3<f32>(x_2447.x, x_2447.y, x_2447.z));
    let x_2450 : vec4<f32> = u_xlat8;
    u_xlat8 = vec4<f32>(x_2449.x, x_2449.y, x_2449.z, x_2450.w);
    let x_2452 : vec4<f32> = u_xlat8;
    let x_2454 : vec4<f32> = u_xlat8;
    u_xlat68 = dot(vec3<f32>(x_2452.x, x_2452.y, x_2452.z), vec3<f32>(x_2454.x, x_2454.y, x_2454.z));
    let x_2457 : f32 = u_xlat68;
    u_xlat68 = max(x_2457, 6.10351562e-05f);
    let x_2461 : f32 = u_xlat68;
    u_xlat69 = inverseSqrt(x_2461);
    let x_2463 : f32 = u_xlat69;
    let x_2465 : vec4<f32> = u_xlat8;
    let x_2467 : vec3<f32> = (vec3<f32>(x_2463, x_2463, x_2463) * vec3<f32>(x_2465.x, x_2465.y, x_2465.z));
    let x_2468 : vec4<f32> = u_xlat9;
    u_xlat9 = vec4<f32>(x_2467.x, x_2467.y, x_2467.z, x_2468.w);
    let x_2470 : f32 = u_xlat68;
    u_xlat70 = (1.0f / x_2470);
    let x_2472 : f32 = u_xlat68;
    let x_2473 : i32 = u_xlati66;
    let x_2475 : f32 = x_2439.x_AdditionalLightsAttenuation[x_2473].x;
    u_xlat68 = (x_2472 * x_2475);
    let x_2477 : f32 = u_xlat68;
    let x_2479 : f32 = u_xlat68;
    u_xlat68 = ((-(x_2477) * x_2479) + 1.0f);
    let x_2482 : f32 = u_xlat68;
    u_xlat68 = max(x_2482, 0.0f);
    let x_2484 : f32 = u_xlat68;
    let x_2485 : f32 = u_xlat68;
    u_xlat68 = (x_2484 * x_2485);
    let x_2487 : f32 = u_xlat68;
    let x_2488 : f32 = u_xlat70;
    u_xlat68 = (x_2487 * x_2488);
    let x_2490 : i32 = u_xlati66;
    let x_2492 : vec4<f32> = x_2439.x_AdditionalLightsSpotDir[x_2490];
    let x_2494 : vec4<f32> = u_xlat9;
    u_xlat70 = dot(vec3<f32>(x_2492.x, x_2492.y, x_2492.z), vec3<f32>(x_2494.x, x_2494.y, x_2494.z));
    let x_2497 : f32 = u_xlat70;
    let x_2498 : i32 = u_xlati66;
    let x_2500 : f32 = x_2439.x_AdditionalLightsAttenuation[x_2498].z;
    let x_2502 : i32 = u_xlati66;
    let x_2504 : f32 = x_2439.x_AdditionalLightsAttenuation[x_2502].w;
    u_xlat70 = ((x_2497 * x_2500) + x_2504);
    let x_2506 : f32 = u_xlat70;
    u_xlat70 = clamp(x_2506, 0.0f, 1.0f);
    let x_2508 : f32 = u_xlat70;
    let x_2509 : f32 = u_xlat70;
    u_xlat70 = (x_2508 * x_2509);
    let x_2511 : f32 = u_xlat68;
    let x_2512 : f32 = u_xlat70;
    u_xlat68 = (x_2511 * x_2512);
    let x_2514 : f32 = u_xlat67;
    let x_2516 : i32 = u_xlati66;
    let x_2518 : vec4<f32> = x_2439.x_AdditionalLightsColor[x_2516];
    let x_2520 : vec3<f32> = (vec3<f32>(x_2514, x_2514, x_2514) * vec3<f32>(x_2518.x, x_2518.y, x_2518.z));
    let x_2521 : vec4<f32> = u_xlat10;
    u_xlat10 = vec4<f32>(x_2520.x, x_2520.y, x_2520.z, x_2521.w);
    let x_2523 : vec4<f32> = u_xlat3;
    let x_2525 : vec4<f32> = u_xlat9;
    u_xlat66 = dot(vec3<f32>(x_2523.x, x_2523.y, x_2523.z), vec3<f32>(x_2525.x, x_2525.y, x_2525.z));
    let x_2528 : f32 = u_xlat66;
    u_xlat66 = clamp(x_2528, 0.0f, 1.0f);
    let x_2530 : f32 = u_xlat66;
    let x_2531 : f32 = u_xlat68;
    u_xlat66 = (x_2530 * x_2531);
    let x_2533 : f32 = u_xlat66;
    let x_2535 : vec4<f32> = u_xlat10;
    let x_2537 : vec3<f32> = (vec3<f32>(x_2533, x_2533, x_2533) * vec3<f32>(x_2535.x, x_2535.y, x_2535.z));
    let x_2538 : vec4<f32> = u_xlat10;
    u_xlat10 = vec4<f32>(x_2537.x, x_2537.y, x_2537.z, x_2538.w);
    let x_2540 : vec4<f32> = u_xlat8;
    let x_2542 : f32 = u_xlat69;
    let x_2545 : vec3<f32> = u_xlat4;
    let x_2546 : vec3<f32> = ((vec3<f32>(x_2540.x, x_2540.y, x_2540.z) * vec3<f32>(x_2542, x_2542, x_2542)) + x_2545);
    let x_2547 : vec4<f32> = u_xlat8;
    u_xlat8 = vec4<f32>(x_2546.x, x_2546.y, x_2546.z, x_2547.w);
    let x_2549 : vec4<f32> = u_xlat8;
    let x_2551 : vec4<f32> = u_xlat8;
    u_xlat66 = dot(vec3<f32>(x_2549.x, x_2549.y, x_2549.z), vec3<f32>(x_2551.x, x_2551.y, x_2551.z));
    let x_2554 : f32 = u_xlat66;
    u_xlat66 = max(x_2554, 1.17549435e-37f);
    let x_2556 : f32 = u_xlat66;
    u_xlat66 = inverseSqrt(x_2556);
    let x_2558 : f32 = u_xlat66;
    let x_2560 : vec4<f32> = u_xlat8;
    let x_2562 : vec3<f32> = (vec3<f32>(x_2558, x_2558, x_2558) * vec3<f32>(x_2560.x, x_2560.y, x_2560.z));
    let x_2563 : vec4<f32> = u_xlat8;
    u_xlat8 = vec4<f32>(x_2562.x, x_2562.y, x_2562.z, x_2563.w);
    let x_2565 : vec4<f32> = u_xlat3;
    let x_2567 : vec4<f32> = u_xlat8;
    u_xlat66 = dot(vec3<f32>(x_2565.x, x_2565.y, x_2565.z), vec3<f32>(x_2567.x, x_2567.y, x_2567.z));
    let x_2570 : f32 = u_xlat66;
    u_xlat66 = clamp(x_2570, 0.0f, 1.0f);
    let x_2572 : vec4<f32> = u_xlat9;
    let x_2574 : vec4<f32> = u_xlat8;
    u_xlat68 = dot(vec3<f32>(x_2572.x, x_2572.y, x_2572.z), vec3<f32>(x_2574.x, x_2574.y, x_2574.z));
    let x_2577 : f32 = u_xlat68;
    u_xlat68 = clamp(x_2577, 0.0f, 1.0f);
    let x_2579 : f32 = u_xlat66;
    let x_2580 : f32 = u_xlat66;
    u_xlat66 = (x_2579 * x_2580);
    let x_2582 : f32 = u_xlat66;
    let x_2584 : f32 = u_xlat0.x;
    u_xlat66 = ((x_2582 * x_2584) + 1.000010014f);
    let x_2587 : f32 = u_xlat68;
    let x_2588 : f32 = u_xlat68;
    u_xlat68 = (x_2587 * x_2588);
    let x_2590 : f32 = u_xlat66;
    let x_2591 : f32 = u_xlat66;
    u_xlat66 = (x_2590 * x_2591);
    let x_2593 : f32 = u_xlat68;
    u_xlat68 = max(x_2593, 0.100000001f);
    let x_2595 : f32 = u_xlat66;
    let x_2596 : f32 = u_xlat68;
    u_xlat66 = (x_2595 * x_2596);
    let x_2599 : f32 = u_xlat1.x;
    let x_2600 : f32 = u_xlat66;
    u_xlat66 = (x_2599 * x_2600);
    let x_2602 : f32 = u_xlat65;
    let x_2603 : f32 = u_xlat66;
    u_xlat66 = (x_2602 / x_2603);
    let x_2605 : vec3<f32> = u_xlat2;
    let x_2606 : f32 = u_xlat66;
    let x_2609 : vec3<f32> = u_xlat7;
    let x_2610 : vec3<f32> = ((x_2605 * vec3<f32>(x_2606, x_2606, x_2606)) + x_2609);
    let x_2611 : vec4<f32> = u_xlat8;
    u_xlat8 = vec4<f32>(x_2610.x, x_2610.y, x_2610.z, x_2611.w);
    let x_2613 : vec4<f32> = u_xlat8;
    let x_2615 : vec4<f32> = u_xlat10;
    let x_2618 : vec4<f32> = u_xlat6;
    let x_2620 : vec3<f32> = ((vec3<f32>(x_2613.x, x_2613.y, x_2613.z) * vec3<f32>(x_2615.x, x_2615.y, x_2615.z)) + vec3<f32>(x_2618.x, x_2618.y, x_2618.z));
    let x_2621 : vec4<f32> = u_xlat6;
    u_xlat6 = vec4<f32>(x_2620.x, x_2620.y, x_2620.z, x_2621.w);

    continuing {
      let x_2623 : u32 = u_xlatu_loop_1;
      u_xlatu_loop_1 = (x_2623 + bitcast<u32>(1i));
    }
  }
  let x_2625 : vec3<f32> = u_xlat5;
  let x_2626 : f32 = u_xlat63;
  let x_2629 : vec3<f32> = u_xlat22;
  let x_2630 : vec3<f32> = ((x_2625 * vec3<f32>(x_2626, x_2626, x_2626)) + x_2629);
  let x_2631 : vec4<f32> = u_xlat0;
  u_xlat0 = vec4<f32>(x_2630.x, x_2630.y, x_2630.z, x_2631.w);
  let x_2635 : vec4<f32> = u_xlat6;
  let x_2637 : vec4<f32> = u_xlat0;
  let x_2639 : vec3<f32> = (vec3<f32>(x_2635.x, x_2635.y, x_2635.z) + vec3<f32>(x_2637.x, x_2637.y, x_2637.z));
  let x_2640 : vec4<f32> = SV_Target0;
  SV_Target0 = vec4<f32>(x_2639.x, x_2639.y, x_2639.z, x_2640.w);
  SV_Target0.w = 1.0f;
  return;
}

struct main_out {
  @location(0)
  SV_Target0_1 : vec4<f32>,
}

@fragment
fn main(@builtin(position) gl_FragCoord_param : vec4<f32>, @location(3) vs_INTERP3_param : vec4<f32>, @location(2) vs_INTERP2_param : vec4<f32>, @location(1) vs_INTERP1_param : vec3<f32>, @location(0) vs_INTERP0_param : vec3<f32>) -> main_out {
  gl_FragCoord = gl_FragCoord_param;
  vs_INTERP3 = vs_INTERP3_param;
  vs_INTERP2 = vs_INTERP2_param;
  vs_INTERP1 = vs_INTERP1_param;
  vs_INTERP0 = vs_INTERP0_param;
  main_1();
  return main_out(SV_Target0);
}

