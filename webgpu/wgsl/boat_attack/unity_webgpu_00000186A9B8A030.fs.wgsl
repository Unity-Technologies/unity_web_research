type Arr = array<vec4<f32>, 2u>;

type Arr_1 = array<mat4x4<f32>, 2u>;

type Arr_2 = array<vec4<f32>, 2u>;

type Arr_3 = array<vec4<f32>, 2u>;

struct PGlobals {
  x_GlobalMipBias : vec2<f32>,
  @size(8)
  padding : u32,
  x_ZBufferParams : vec4<f32>,
  unity_MatrixV : mat4x4<f32>,
  x_SSAOParams : vec4<f32>,
  x_CameraViewTopLeftCorner : Arr_3,
  x_CameraViewProjections : Arr_1,
  x_SourceSize : vec4<f32>,
  x_ProjectionParams2 : vec4<f32>,
  x_CameraViewXExtent : Arr_3,
  x_CameraViewYExtent : Arr_3,
  x_SSAOBlueNoiseParams : vec4<f32>,
}

@group(0) @binding(0) var x_CameraDepthTexture : texture_2d<f32>;

@group(0) @binding(3) var sampler_CameraDepthTexture : sampler;

var<private> vs_TEXCOORD0 : vec2<f32>;

@group(1) @binding(0) var<uniform> x_33 : PGlobals;

var<private> SV_Target0 : vec4<f32>;

@group(0) @binding(1) var x_BlueNoiseTexture : texture_2d<f32>;

@group(0) @binding(2) var sampler_PointRepeat : sampler;

var<private> gl_FragCoord : vec4<f32>;

fn main_1() {
  var u_xlat0 : f32;
  var u_xlatb8 : bool;
  var u_xlat8 : vec3<f32>;
  var u_xlat16 : f32;
  var u_xlat1 : vec4<f32>;
  var u_xlat9 : vec3<f32>;
  var u_xlat2 : vec4<f32>;
  var u_xlat18 : vec2<f32>;
  var u_xlat3 : vec4<f32>;
  var u_xlat12 : vec3<f32>;
  var u_xlat13 : vec3<f32>;
  var u_xlat6 : vec4<f32>;
  var u_xlat10 : vec3<f32>;
  var u_xlatb1 : bool;
  var u_xlatb2 : vec4<bool>;
  var x_464 : vec3<f32>;
  var u_xlat5 : vec4<f32>;
  var x_473 : vec3<f32>;
  var x_484 : vec3<f32>;
  var x_495 : vec3<f32>;
  var x_506 : vec2<f32>;
  var u_xlat17 : f32;
  var u_xlat25 : f32;
  var u_xlat4 : vec3<f32>;
  var u_xlatb25 : bool;
  var u_xlat11 : vec3<f32>;
  var u_xlatb3 : vec2<bool>;
  var u_xlat26 : f32;
  var u_xlat7 : f32;
  var u_xlatb26 : bool;
  var u_xlat28 : f32;
  var u_xlatb28 : bool;
  var u_xlatb18 : bool;
  var u_xlat19 : f32;
  var u_xlat_precise_vec4 : vec4<f32>;
  var u_xlat_precise_ivec4 : vec4<i32>;
  var u_xlat_precise_bvec4 : vec4<bool>;
  var u_xlat_precise_uvec4 : vec4<u32>;
  let x_22 : vec2<f32> = vs_TEXCOORD0;
  let x_39 : f32 = x_33.x_GlobalMipBias.x;
  let x_40 : vec4<f32> = textureSampleBias(x_CameraDepthTexture, sampler_CameraDepthTexture, x_22, x_39);
  u_xlat0 = x_40.x;
  let x_45 : f32 = u_xlat0;
  u_xlatb8 = (x_45 < 0.00001f);
  let x_48 : bool = u_xlatb8;
  if (x_48) {
    SV_Target0 = vec4<f32>(0.0f, 0.5f, 0.5f, 0.5f);
    return;
  }
  let x_59 : f32 = x_33.x_ZBufferParams.z;
  let x_60 : f32 = u_xlat0;
  let x_64 : f32 = x_33.x_ZBufferParams.w;
  u_xlat0 = ((x_59 * x_60) + x_64);
  let x_67 : f32 = u_xlat0;
  u_xlat0 = (1.0f / x_67);
  let x_71 : f32 = x_33.x_SSAOParams.w;
  let x_72 : f32 = u_xlat0;
  u_xlatb8 = (x_71 < x_72);
  let x_74 : bool = u_xlatb8;
  if (x_74) {
    SV_Target0 = vec4<f32>(0.0f, 0.5f, 0.5f, 0.5f);
    return;
  }
  let x_84 : f32 = vs_TEXCOORD0.y;
  u_xlat8.x = (-(x_84) + 1.0f);
  let x_89 : f32 = u_xlat0;
  let x_92 : f32 = x_33.x_ProjectionParams2.x;
  u_xlat16 = (x_89 * x_92);
  let x_99 : vec4<f32> = x_33.x_CameraViewXExtent[0i];
  let x_101 : vec2<f32> = vs_TEXCOORD0;
  let x_106 : vec4<f32> = x_33.x_CameraViewTopLeftCorner[0i];
  let x_108 : vec3<f32> = ((vec3<f32>(x_99.x, x_99.y, x_99.z) * vec3<f32>(x_101.x, x_101.x, x_101.x)) + vec3<f32>(x_106.x, x_106.y, x_106.z));
  let x_109 : vec4<f32> = u_xlat1;
  u_xlat1 = vec4<f32>(x_108.x, x_108.y, x_108.z, x_109.w);
  let x_113 : vec4<f32> = x_33.x_CameraViewYExtent[0i];
  let x_115 : vec3<f32> = u_xlat8;
  let x_118 : vec4<f32> = u_xlat1;
  let x_120 : vec3<f32> = ((vec3<f32>(x_113.x, x_113.y, x_113.z) * vec3<f32>(x_115.x, x_115.x, x_115.x)) + vec3<f32>(x_118.x, x_118.y, x_118.z));
  let x_121 : vec4<f32> = u_xlat1;
  u_xlat1 = vec4<f32>(x_120.x, x_120.y, x_120.z, x_121.w);
  let x_123 : f32 = u_xlat16;
  let x_125 : vec4<f32> = u_xlat1;
  u_xlat8 = (vec3<f32>(x_123, x_123, x_123) * vec3<f32>(x_125.x, x_125.y, x_125.z));
  let x_131 : f32 = x_33.x_SourceSize.z;
  u_xlat9.x = (x_131 * -2.0f);
  u_xlat9.y = 0.0f;
  let x_136 : vec3<f32> = u_xlat9;
  let x_138 : vec2<f32> = vs_TEXCOORD0;
  let x_139 : vec2<f32> = (vec2<f32>(x_136.x, x_136.y) + x_138);
  let x_140 : vec3<f32> = u_xlat9;
  u_xlat9 = vec3<f32>(x_139.x, x_139.y, x_140.z);
  let x_145 : vec3<f32> = u_xlat9;
  let x_148 : f32 = x_33.x_GlobalMipBias.x;
  let x_149 : vec4<f32> = textureSampleBias(x_CameraDepthTexture, sampler_CameraDepthTexture, vec2<f32>(x_145.x, x_145.y), x_148);
  u_xlat1.x = x_149.x;
  let x_153 : f32 = x_33.x_ZBufferParams.z;
  let x_155 : f32 = u_xlat1.x;
  let x_158 : f32 = x_33.x_ZBufferParams.w;
  u_xlat1.x = ((x_153 * x_155) + x_158);
  let x_162 : f32 = u_xlat1.x;
  u_xlat9.z = (1.0f / x_162);
  let x_167 : f32 = x_33.x_SourceSize.z;
  u_xlat2.x = (x_167 * 2.0f);
  u_xlat2.y = 0.0f;
  u_xlat18.y = 0.0f;
  let x_176 : vec4<f32> = u_xlat2;
  let x_178 : vec2<f32> = vs_TEXCOORD0;
  let x_179 : vec2<f32> = (vec2<f32>(x_176.x, x_176.y) + x_178);
  let x_180 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_179.x, x_179.y, x_180.z, x_180.w);
  let x_185 : vec4<f32> = u_xlat3;
  let x_188 : f32 = x_33.x_GlobalMipBias.x;
  let x_189 : vec4<f32> = textureSampleBias(x_CameraDepthTexture, sampler_CameraDepthTexture, vec2<f32>(x_185.x, x_185.y), x_188);
  u_xlat1.x = x_189.x;
  let x_193 : f32 = x_33.x_ZBufferParams.z;
  let x_195 : f32 = u_xlat1.x;
  let x_198 : f32 = x_33.x_ZBufferParams.w;
  u_xlat1.x = ((x_193 * x_195) + x_198);
  let x_202 : f32 = u_xlat1.x;
  u_xlat3.z = (1.0f / x_202);
  u_xlat12.x = 0.0f;
  let x_208 : f32 = x_33.x_SourceSize.w;
  u_xlat12.y = (x_208 * 2.0f);
  let x_211 : vec3<f32> = u_xlat12;
  let x_213 : vec2<f32> = vs_TEXCOORD0;
  let x_214 : vec2<f32> = (vec2<f32>(x_211.x, x_211.y) + x_213);
  let x_215 : vec3<f32> = u_xlat12;
  u_xlat12 = vec3<f32>(x_214.x, x_214.y, x_215.z);
  let x_220 : vec3<f32> = u_xlat12;
  let x_223 : f32 = x_33.x_GlobalMipBias.x;
  let x_224 : vec4<f32> = textureSampleBias(x_CameraDepthTexture, sampler_CameraDepthTexture, vec2<f32>(x_220.x, x_220.y), x_223);
  u_xlat1.x = x_224.x;
  let x_228 : f32 = x_33.x_ZBufferParams.z;
  let x_230 : f32 = u_xlat1.x;
  let x_233 : f32 = x_33.x_ZBufferParams.w;
  u_xlat1.x = ((x_228 * x_230) + x_233);
  let x_237 : f32 = u_xlat1.x;
  u_xlat12.z = (1.0f / x_237);
  u_xlat13.x = 0.0f;
  let x_243 : f32 = x_33.x_SourceSize.w;
  u_xlat13.y = (x_243 * -2.0f);
  let x_246 : vec3<f32> = u_xlat13;
  let x_248 : vec2<f32> = vs_TEXCOORD0;
  let x_249 : vec2<f32> = (vec2<f32>(x_246.x, x_246.y) + x_248);
  let x_250 : vec3<f32> = u_xlat13;
  u_xlat13 = vec3<f32>(x_249.x, x_249.y, x_250.z);
  let x_255 : vec3<f32> = u_xlat13;
  let x_258 : f32 = x_33.x_GlobalMipBias.x;
  let x_259 : vec4<f32> = textureSampleBias(x_CameraDepthTexture, sampler_CameraDepthTexture, vec2<f32>(x_255.x, x_255.y), x_258);
  u_xlat1.x = x_259.x;
  let x_263 : f32 = x_33.x_ZBufferParams.z;
  let x_265 : f32 = u_xlat1.x;
  let x_268 : f32 = x_33.x_ZBufferParams.w;
  u_xlat1.x = ((x_263 * x_265) + x_268);
  let x_272 : f32 = u_xlat1.x;
  u_xlat13.z = (1.0f / x_272);
  let x_276 : f32 = x_33.x_SourceSize.z;
  u_xlat18.x = x_276;
  let x_278 : vec2<f32> = u_xlat18;
  let x_284 : vec2<f32> = vs_TEXCOORD0;
  u_xlat2 = ((vec4<f32>(x_278.x, x_278.y, x_278.x, x_278.y) * vec4<f32>(-4.0f, 2.0f, 4.0f, 2.0f)) + vec4<f32>(x_284.x, x_284.y, x_284.x, x_284.y));
  let x_290 : vec4<f32> = u_xlat2;
  let x_293 : f32 = x_33.x_GlobalMipBias.x;
  let x_294 : vec4<f32> = textureSampleBias(x_CameraDepthTexture, sampler_CameraDepthTexture, vec2<f32>(x_290.x, x_290.y), x_293);
  u_xlat1.x = x_294.x;
  let x_298 : f32 = x_33.x_ZBufferParams.z;
  let x_300 : f32 = u_xlat1.x;
  let x_303 : f32 = x_33.x_ZBufferParams.w;
  u_xlat1.x = ((x_298 * x_300) + x_303);
  let x_307 : f32 = u_xlat1.x;
  u_xlat1.x = (1.0f / x_307);
  let x_313 : vec4<f32> = u_xlat2;
  let x_316 : f32 = x_33.x_GlobalMipBias.x;
  let x_317 : vec4<f32> = textureSampleBias(x_CameraDepthTexture, sampler_CameraDepthTexture, vec2<f32>(x_313.z, x_313.w), x_316);
  u_xlat2.x = x_317.x;
  let x_321 : f32 = x_33.x_ZBufferParams.z;
  let x_323 : f32 = u_xlat2.x;
  let x_326 : f32 = x_33.x_ZBufferParams.w;
  u_xlat2.x = ((x_321 * x_323) + x_326);
  let x_330 : f32 = u_xlat2.x;
  u_xlat2.x = (1.0f / x_330);
  u_xlat6.x = 2.0f;
  let x_336 : f32 = x_33.x_SourceSize.w;
  u_xlat6.y = x_336;
  let x_339 : vec4<f32> = u_xlat6;
  let x_342 : vec2<f32> = vs_TEXCOORD0;
  u_xlat6 = ((vec4<f32>(0.0f, 4.0f, 0.0f, -4.0f) * vec4<f32>(x_339.x, x_339.y, x_339.x, x_339.y)) + vec4<f32>(x_342.x, x_342.y, x_342.x, x_342.y));
  let x_349 : vec4<f32> = u_xlat6;
  let x_352 : f32 = x_33.x_GlobalMipBias.x;
  let x_353 : vec4<f32> = textureSampleBias(x_CameraDepthTexture, sampler_CameraDepthTexture, vec2<f32>(x_349.x, x_349.y), x_352);
  u_xlat10.x = x_353.x;
  let x_357 : f32 = x_33.x_ZBufferParams.z;
  let x_359 : f32 = u_xlat10.x;
  let x_362 : f32 = x_33.x_ZBufferParams.w;
  u_xlat10.x = ((x_357 * x_359) + x_362);
  let x_366 : f32 = u_xlat10.x;
  u_xlat10.x = (1.0f / x_366);
  let x_372 : vec4<f32> = u_xlat6;
  let x_375 : f32 = x_33.x_GlobalMipBias.x;
  let x_376 : vec4<f32> = textureSampleBias(x_CameraDepthTexture, sampler_CameraDepthTexture, vec2<f32>(x_372.z, x_372.w), x_375);
  u_xlat18.x = x_376.x;
  let x_380 : f32 = x_33.x_ZBufferParams.z;
  let x_382 : f32 = u_xlat18.x;
  let x_385 : f32 = x_33.x_ZBufferParams.w;
  u_xlat18.x = ((x_380 * x_382) + x_385);
  let x_389 : f32 = u_xlat18.x;
  u_xlat18.x = (1.0f / x_389);
  let x_393 : f32 = u_xlat9.z;
  let x_396 : f32 = u_xlat1.x;
  u_xlat1.x = ((x_393 * 2.0f) + -(x_396));
  let x_400 : f32 = u_xlat0;
  let x_403 : f32 = u_xlat1.x;
  u_xlat1.x = (-(x_400) + x_403);
  let x_407 : f32 = u_xlat3.z;
  let x_410 : f32 = u_xlat2.x;
  u_xlat2.x = ((x_407 * 2.0f) + -(x_410));
  let x_414 : f32 = u_xlat0;
  let x_417 : f32 = u_xlat2.x;
  u_xlat2.x = (-(x_414) + x_417);
  let x_422 : f32 = u_xlat1.x;
  let x_425 : f32 = u_xlat2.x;
  u_xlatb1 = (abs(x_422) < abs(x_425));
  let x_429 : f32 = u_xlat13.z;
  let x_432 : f32 = u_xlat18.x;
  u_xlat2.x = ((x_429 * 2.0f) + -(x_432));
  let x_437 : f32 = u_xlat12.z;
  let x_440 : f32 = u_xlat10.x;
  u_xlat2.y = ((x_437 * 2.0f) + -(x_440));
  let x_444 : f32 = u_xlat0;
  let x_447 : vec4<f32> = u_xlat2;
  let x_449 : vec2<f32> = (-(vec2<f32>(x_444, x_444)) + vec2<f32>(x_447.x, x_447.y));
  let x_450 : vec4<f32> = u_xlat2;
  u_xlat2 = vec4<f32>(x_449.x, x_449.y, x_450.z, x_450.w);
  let x_456 : f32 = u_xlat2.x;
  let x_459 : f32 = u_xlat2.y;
  u_xlatb2.x = (abs(x_456) < abs(x_459));
  let x_463 : bool = u_xlatb1;
  if (x_463) {
    let x_467 : vec3<f32> = u_xlat9;
    x_464 = x_467;
  } else {
    let x_469 : vec3<f32> = u_xlat13;
    x_464 = x_469;
  }
  let x_470 : vec3<f32> = x_464;
  u_xlat10 = x_470;
  let x_472 : bool = u_xlatb1;
  if (x_472) {
    let x_476 : vec3<f32> = u_xlat13;
    x_473 = x_476;
  } else {
    let x_478 : vec4<f32> = u_xlat3;
    x_473 = vec3<f32>(x_478.x, x_478.y, x_478.z);
  }
  let x_480 : vec3<f32> = x_473;
  let x_481 : vec4<f32> = u_xlat5;
  u_xlat5 = vec4<f32>(x_481.x, x_480.x, x_480.y, x_480.z);
  let x_483 : bool = u_xlatb1;
  if (x_483) {
    let x_487 : vec3<f32> = u_xlat12;
    x_484 = x_487;
  } else {
    let x_489 : vec4<f32> = u_xlat3;
    x_484 = vec3<f32>(x_489.x, x_489.y, x_489.z);
  }
  let x_491 : vec3<f32> = x_484;
  let x_492 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_491.x, x_491.y, x_491.z, x_492.w);
  let x_494 : bool = u_xlatb1;
  if (x_494) {
    let x_498 : vec3<f32> = u_xlat9;
    x_495 = x_498;
  } else {
    let x_500 : vec3<f32> = u_xlat12;
    x_495 = x_500;
  }
  let x_501 : vec3<f32> = x_495;
  let x_502 : vec4<f32> = u_xlat1;
  u_xlat1 = vec4<f32>(x_502.x, x_501.x, x_501.y, x_501.z);
  let x_505 : bool = u_xlatb2.x;
  if (x_505) {
    let x_509 : vec3<f32> = u_xlat10;
    x_506 = vec2<f32>(x_509.x, x_509.y);
  } else {
    let x_512 : vec4<f32> = u_xlat3;
    x_506 = vec2<f32>(x_512.x, x_512.y);
  }
  let x_514 : vec2<f32> = x_506;
  let x_515 : vec3<f32> = u_xlat10;
  u_xlat10 = vec3<f32>(x_514.x, x_514.y, x_515.z);
  let x_518 : f32 = u_xlat10.z;
  u_xlat5.x = x_518;
  let x_521 : f32 = u_xlat3.z;
  u_xlat1.x = x_521;
  let x_524 : bool = u_xlatb2.x;
  let x_525 : vec4<f32> = u_xlat5;
  let x_526 : vec4<f32> = u_xlat1;
  u_xlat1 = select(x_526, x_525, vec4<bool>(x_524, x_524, x_524, x_524));
  let x_531 : f32 = u_xlat1.z;
  u_xlat17 = (-(x_531) + 1.0f);
  let x_534 : vec4<f32> = u_xlat1;
  let x_537 : vec4<f32> = x_33.x_ProjectionParams2;
  let x_539 : vec2<f32> = (vec2<f32>(x_534.w, x_534.x) * vec2<f32>(x_537.x, x_537.x));
  let x_540 : vec4<f32> = u_xlat1;
  u_xlat1 = vec4<f32>(x_539.x, x_540.y, x_540.z, x_539.y);
  let x_543 : vec4<f32> = x_33.x_CameraViewXExtent[0i];
  let x_545 : vec4<f32> = u_xlat1;
  let x_549 : vec4<f32> = x_33.x_CameraViewTopLeftCorner[0i];
  let x_551 : vec3<f32> = ((vec3<f32>(x_543.z, x_543.x, x_543.y) * vec3<f32>(x_545.y, x_545.y, x_545.y)) + vec3<f32>(x_549.z, x_549.x, x_549.y));
  let x_552 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_551.x, x_551.y, x_551.z, x_552.w);
  let x_555 : vec4<f32> = x_33.x_CameraViewYExtent[0i];
  let x_557 : f32 = u_xlat17;
  let x_560 : vec4<f32> = u_xlat3;
  let x_562 : vec3<f32> = ((vec3<f32>(x_555.z, x_555.x, x_555.y) * vec3<f32>(x_557, x_557, x_557)) + vec3<f32>(x_560.x, x_560.y, x_560.z));
  let x_563 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_562.x, x_562.y, x_562.z, x_563.w);
  let x_565 : vec4<f32> = u_xlat3;
  let x_567 : vec4<f32> = u_xlat1;
  let x_570 : vec3<f32> = u_xlat8;
  let x_573 : vec3<f32> = ((vec3<f32>(x_565.x, x_565.y, x_565.z) * vec3<f32>(x_567.x, x_567.x, x_567.x)) + -(vec3<f32>(x_570.z, x_570.x, x_570.y)));
  let x_574 : vec4<f32> = u_xlat1;
  u_xlat1 = vec4<f32>(x_573.x, x_573.y, x_573.z, x_574.w);
  let x_577 : f32 = u_xlat10.y;
  u_xlat2.x = (-(x_577) + 1.0f);
  let x_582 : vec4<f32> = x_33.x_CameraViewXExtent[0i];
  let x_584 : vec3<f32> = u_xlat10;
  let x_588 : vec4<f32> = x_33.x_CameraViewTopLeftCorner[0i];
  u_xlat10 = ((vec3<f32>(x_582.y, x_582.z, x_582.x) * vec3<f32>(x_584.x, x_584.x, x_584.x)) + vec3<f32>(x_588.y, x_588.z, x_588.x));
  let x_592 : vec4<f32> = x_33.x_CameraViewYExtent[0i];
  let x_594 : vec4<f32> = u_xlat2;
  let x_597 : vec3<f32> = u_xlat10;
  let x_598 : vec3<f32> = ((vec3<f32>(x_592.y, x_592.z, x_592.x) * vec3<f32>(x_594.x, x_594.x, x_594.x)) + x_597);
  let x_599 : vec4<f32> = u_xlat2;
  u_xlat2 = vec4<f32>(x_598.x, x_598.y, x_598.z, x_599.w);
  let x_601 : vec4<f32> = u_xlat2;
  let x_603 : vec4<f32> = u_xlat1;
  let x_606 : vec3<f32> = u_xlat8;
  let x_609 : vec3<f32> = ((vec3<f32>(x_601.x, x_601.y, x_601.z) * vec3<f32>(x_603.w, x_603.w, x_603.w)) + -(vec3<f32>(x_606.y, x_606.z, x_606.x)));
  let x_610 : vec4<f32> = u_xlat2;
  u_xlat2 = vec4<f32>(x_609.x, x_609.y, x_609.z, x_610.w);
  let x_612 : vec4<f32> = u_xlat1;
  let x_614 : vec4<f32> = u_xlat2;
  let x_616 : vec3<f32> = (vec3<f32>(x_612.x, x_612.y, x_612.z) * vec3<f32>(x_614.x, x_614.y, x_614.z));
  let x_617 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_616.x, x_616.y, x_616.z, x_617.w);
  let x_619 : vec4<f32> = u_xlat1;
  let x_621 : vec4<f32> = u_xlat2;
  let x_624 : vec4<f32> = u_xlat3;
  let x_627 : vec3<f32> = ((vec3<f32>(x_619.z, x_619.x, x_619.y) * vec3<f32>(x_621.y, x_621.z, x_621.x)) + -(vec3<f32>(x_624.x, x_624.y, x_624.z)));
  let x_628 : vec4<f32> = u_xlat1;
  u_xlat1 = vec4<f32>(x_627.x, x_627.y, x_627.z, x_628.w);
  let x_631 : vec4<f32> = u_xlat1;
  let x_633 : vec4<f32> = u_xlat1;
  u_xlat25 = dot(vec3<f32>(x_631.x, x_631.y, x_631.z), vec3<f32>(x_633.x, x_633.y, x_633.z));
  let x_636 : f32 = u_xlat25;
  u_xlat25 = inverseSqrt(x_636);
  let x_638 : f32 = u_xlat25;
  let x_640 : vec4<f32> = u_xlat1;
  let x_642 : vec3<f32> = (vec3<f32>(x_638, x_638, x_638) * vec3<f32>(x_640.x, x_640.y, x_640.z));
  let x_643 : vec4<f32> = u_xlat1;
  u_xlat1 = vec4<f32>(x_642.x, x_642.y, x_642.z, x_643.w);
  let x_645 : vec2<f32> = vs_TEXCOORD0;
  let x_648 : vec4<f32> = x_33.x_SSAOBlueNoiseParams;
  let x_650 : vec2<f32> = (x_645 + vec2<f32>(x_648.z, x_648.w));
  let x_651 : vec4<f32> = u_xlat2;
  u_xlat2 = vec4<f32>(x_650.x, x_650.y, x_651.z, x_651.w);
  let x_653 : vec4<f32> = u_xlat2;
  let x_656 : vec4<f32> = x_33.x_SSAOBlueNoiseParams;
  u_xlat18 = (vec2<f32>(x_653.x, x_653.y) * vec2<f32>(x_656.x, x_656.y));
  let x_664 : vec2<f32> = u_xlat18;
  let x_666 : f32 = x_33.x_GlobalMipBias.x;
  let x_667 : vec4<f32> = textureSampleBias(x_BlueNoiseTexture, sampler_PointRepeat, x_664, x_666);
  u_xlat25 = x_667.w;
  let x_669 : f32 = u_xlat25;
  u_xlat18.x = fract(x_669);
  let x_673 : f32 = u_xlat18.x;
  u_xlat3.z = ((x_673 * 2.0f) + -1.0f);
  let x_678 : f32 = u_xlat25;
  u_xlat25 = (x_678 + 0.9296875f);
  let x_681 : f32 = u_xlat25;
  u_xlat25 = (x_681 * 628.31854248f);
  let x_685 : f32 = u_xlat3.z;
  let x_688 : f32 = u_xlat3.z;
  u_xlat18.x = ((-(x_685) * x_688) + 1.0f);
  let x_693 : f32 = u_xlat18.x;
  u_xlat18.x = sqrt(x_693);
  let x_697 : f32 = u_xlat25;
  u_xlat4.x = sin(x_697);
  let x_700 : f32 = u_xlat25;
  u_xlat5.x = cos(x_700);
  let x_704 : f32 = u_xlat18.x;
  let x_706 : f32 = u_xlat5.x;
  u_xlat3.x = (x_704 * x_706);
  let x_710 : f32 = u_xlat18.x;
  let x_712 : f32 = u_xlat4.x;
  u_xlat3.y = (x_710 * x_712);
  let x_715 : vec4<f32> = u_xlat1;
  let x_717 : vec4<f32> = u_xlat3;
  u_xlat25 = dot(vec3<f32>(x_715.x, x_715.y, x_715.z), vec3<f32>(x_717.x, x_717.y, x_717.z));
  let x_721 : f32 = u_xlat25;
  u_xlatb25 = (x_721 >= 0.0f);
  let x_723 : bool = u_xlatb25;
  u_xlat25 = select(-1.0f, 1.0f, x_723);
  let x_725 : f32 = u_xlat25;
  let x_727 : vec4<f32> = u_xlat3;
  let x_729 : vec3<f32> = (vec3<f32>(x_725, x_725, x_725) * vec3<f32>(x_727.x, x_727.y, x_727.z));
  let x_730 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_729.x, x_729.y, x_729.z, x_730.w);
  let x_732 : vec4<f32> = u_xlat3;
  let x_735 : vec4<f32> = x_33.x_SSAOParams;
  let x_737 : vec3<f32> = (vec3<f32>(x_732.x, x_732.y, x_732.z) * vec3<f32>(x_735.y, x_735.y, x_735.y));
  let x_738 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_737.x, x_737.y, x_737.z, x_738.w);
  let x_740 : vec4<f32> = u_xlat3;
  let x_745 : vec3<f32> = u_xlat8;
  let x_746 : vec3<f32> = ((vec3<f32>(x_740.x, x_740.y, x_740.z) * vec3<f32>(0.100000001f, 0.100000001f, 0.100000001f)) + x_745);
  let x_747 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_746.x, x_746.y, x_746.z, x_747.w);
  let x_749 : vec4<f32> = u_xlat3;
  let x_753 : vec4<f32> = x_33.x_CameraViewProjections[0i][1i];
  u_xlat18 = (vec2<f32>(x_749.y, x_749.y) * vec2<f32>(x_753.x, x_753.y));
  let x_757 : vec4<f32> = x_33.x_CameraViewProjections[0i][0i];
  let x_759 : vec4<f32> = u_xlat3;
  let x_762 : vec2<f32> = u_xlat18;
  u_xlat18 = ((vec2<f32>(x_757.x, x_757.y) * vec2<f32>(x_759.x, x_759.x)) + x_762);
  let x_766 : vec4<f32> = x_33.x_CameraViewProjections[0i][2i];
  let x_768 : vec4<f32> = u_xlat3;
  let x_771 : vec2<f32> = u_xlat18;
  u_xlat18 = ((vec2<f32>(x_766.x, x_766.y) * vec2<f32>(x_768.z, x_768.z)) + x_771);
  let x_774 : f32 = x_33.unity_MatrixV[0i].z;
  u_xlat4.x = x_774;
  let x_777 : f32 = x_33.unity_MatrixV[1i].z;
  u_xlat4.y = x_777;
  let x_780 : f32 = x_33.unity_MatrixV[2i].z;
  u_xlat4.z = x_780;
  let x_782 : vec3<f32> = u_xlat4;
  let x_783 : vec4<f32> = u_xlat3;
  u_xlat25 = dot(x_782, vec3<f32>(x_783.x, x_783.y, x_783.z));
  let x_786 : f32 = u_xlat25;
  u_xlat3.x = (1.0f / -(x_786));
  let x_790 : vec2<f32> = u_xlat18;
  let x_791 : vec4<f32> = u_xlat3;
  u_xlat18 = ((x_790 * vec2<f32>(x_791.x, x_791.x)) + vec2<f32>(1.0f, 1.0f));
  let x_796 : vec2<f32> = u_xlat18;
  u_xlat18 = (x_796 * vec2<f32>(0.5f, 0.5f));
  let x_799 : vec2<f32> = u_xlat18;
  u_xlat18 = clamp(x_799, vec2<f32>(0.0f, 0.0f), vec2<f32>(1.0f, 1.0f));
  let x_806 : vec2<f32> = u_xlat18;
  let x_808 : f32 = x_33.x_GlobalMipBias.x;
  let x_809 : vec4<f32> = textureSampleBias(x_CameraDepthTexture, sampler_CameraDepthTexture, x_806, x_808);
  u_xlat3.x = x_809.x;
  let x_814 : f32 = x_33.x_ZBufferParams.z;
  let x_816 : f32 = u_xlat3.x;
  let x_819 : f32 = x_33.x_ZBufferParams.w;
  u_xlat11.x = ((x_814 * x_816) + x_819);
  let x_823 : f32 = u_xlat11.x;
  u_xlat11.x = (1.0f / x_823);
  let x_826 : f32 = u_xlat25;
  let x_829 : f32 = u_xlat11.x;
  u_xlat25 = (-(x_826) + -(x_829));
  let x_832 : f32 = u_xlat25;
  let x_835 : f32 = x_33.x_SSAOParams.y;
  u_xlatb25 = (abs(x_832) < x_835);
  let x_837 : bool = u_xlatb25;
  u_xlat25 = select(0.0f, 1.0f, x_837);
  let x_843 : f32 = u_xlat3.x;
  u_xlatb3.x = (0.00001f < x_843);
  let x_847 : bool = u_xlatb3.x;
  u_xlat3.x = select(0.0f, 1.0f, x_847);
  let x_850 : f32 = u_xlat25;
  let x_852 : f32 = u_xlat3.x;
  u_xlat25 = (x_850 * x_852);
  let x_856 : f32 = u_xlat18.y;
  u_xlat26 = (-(x_856) + 1.0f);
  let x_860 : f32 = u_xlat11.x;
  let x_862 : f32 = x_33.x_ProjectionParams2.x;
  u_xlat3.x = (x_860 * x_862);
  let x_866 : vec4<f32> = x_33.x_CameraViewXExtent[0i];
  let x_868 : vec2<f32> = u_xlat18;
  let x_872 : vec4<f32> = x_33.x_CameraViewTopLeftCorner[0i];
  u_xlat11 = ((vec3<f32>(x_866.x, x_866.y, x_866.z) * vec3<f32>(x_868.x, x_868.x, x_868.x)) + vec3<f32>(x_872.x, x_872.y, x_872.z));
  let x_876 : vec4<f32> = x_33.x_CameraViewYExtent[0i];
  let x_878 : f32 = u_xlat26;
  let x_881 : vec3<f32> = u_xlat11;
  u_xlat11 = ((vec3<f32>(x_876.x, x_876.y, x_876.z) * vec3<f32>(x_878, x_878, x_878)) + x_881);
  let x_883 : vec3<f32> = u_xlat11;
  let x_884 : vec4<f32> = u_xlat3;
  let x_887 : vec3<f32> = u_xlat8;
  let x_889 : vec3<f32> = ((x_883 * vec3<f32>(x_884.x, x_884.x, x_884.x)) + -(x_887));
  let x_890 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_889.x, x_889.y, x_889.z, x_890.w);
  let x_892 : vec4<f32> = u_xlat3;
  let x_894 : vec4<f32> = u_xlat1;
  u_xlat18.x = dot(vec3<f32>(x_892.x, x_892.y, x_892.z), vec3<f32>(x_894.x, x_894.y, x_894.z));
  let x_898 : f32 = u_xlat0;
  let x_903 : f32 = u_xlat18.x;
  u_xlat18.x = ((-(x_898) * 0.004f) + x_903);
  let x_907 : f32 = u_xlat18.x;
  u_xlat18.x = max(x_907, 0.0f);
  let x_910 : vec4<f32> = u_xlat3;
  let x_912 : vec4<f32> = u_xlat3;
  u_xlat26 = dot(vec3<f32>(x_910.x, x_910.y, x_910.z), vec3<f32>(x_912.x, x_912.y, x_912.z));
  let x_915 : f32 = u_xlat26;
  u_xlat26 = (x_915 + 0.0001f);
  let x_918 : f32 = u_xlat26;
  u_xlat26 = (1.0f / x_918);
  let x_920 : f32 = u_xlat26;
  let x_922 : f32 = u_xlat18.x;
  u_xlat18.x = (x_920 * x_922);
  let x_925 : vec4<f32> = u_xlat2;
  let x_928 : vec4<f32> = x_33.x_SSAOBlueNoiseParams;
  u_xlat3 = ((vec4<f32>(x_925.x, x_925.y, x_925.x, x_925.y) * vec4<f32>(x_928.x, x_928.y, x_928.x, x_928.y)) + vec4<f32>(0.083333336f, 0.083333336f, 0.166666672f, 0.166666672f));
  let x_938 : vec4<f32> = u_xlat3;
  let x_941 : f32 = x_33.x_GlobalMipBias.x;
  let x_942 : vec4<f32> = textureSampleBias(x_BlueNoiseTexture, sampler_PointRepeat, vec2<f32>(x_938.x, x_938.y), x_941);
  u_xlat26 = x_942.w;
  let x_944 : f32 = u_xlat26;
  let x_949 : vec2<f32> = (vec2<f32>(x_944, x_944) + vec2<f32>(0.33984375f, 0.76171875f));
  let x_950 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_949.x, x_949.y, x_950.z, x_950.w);
  let x_953 : f32 = u_xlat3.x;
  u_xlat26 = fract(x_953);
  let x_955 : f32 = u_xlat26;
  u_xlat5.z = ((x_955 * 2.0f) + -1.0f);
  let x_960 : f32 = u_xlat3.y;
  u_xlat26 = (x_960 * 628.31854248f);
  let x_963 : f32 = u_xlat5.z;
  let x_966 : f32 = u_xlat5.z;
  u_xlat3.x = ((-(x_963) * x_966) + 1.0f);
  let x_971 : f32 = u_xlat3.x;
  u_xlat3.x = sqrt(x_971);
  let x_974 : f32 = u_xlat26;
  u_xlat6.x = sin(x_974);
  let x_978 : f32 = u_xlat26;
  u_xlat7 = cos(x_978);
  let x_981 : f32 = u_xlat3.x;
  let x_982 : f32 = u_xlat7;
  u_xlat5.x = (x_981 * x_982);
  let x_986 : f32 = u_xlat3.x;
  let x_988 : f32 = u_xlat6.x;
  u_xlat5.y = (x_986 * x_988);
  let x_991 : vec4<f32> = u_xlat1;
  let x_993 : vec4<f32> = u_xlat5;
  u_xlat26 = dot(vec3<f32>(x_991.x, x_991.y, x_991.z), vec3<f32>(x_993.x, x_993.y, x_993.z));
  let x_997 : f32 = u_xlat26;
  u_xlatb26 = (x_997 >= 0.0f);
  let x_999 : bool = u_xlatb26;
  u_xlat26 = select(-1.0f, 1.0f, x_999);
  let x_1001 : f32 = u_xlat26;
  let x_1003 : vec4<f32> = u_xlat5;
  let x_1005 : vec3<f32> = (vec3<f32>(x_1001, x_1001, x_1001) * vec3<f32>(x_1003.x, x_1003.y, x_1003.z));
  let x_1006 : vec4<f32> = u_xlat5;
  u_xlat5 = vec4<f32>(x_1005.x, x_1005.y, x_1005.z, x_1006.w);
  let x_1008 : vec4<f32> = u_xlat5;
  let x_1011 : vec4<f32> = x_33.x_SSAOParams;
  let x_1013 : vec3<f32> = (vec3<f32>(x_1008.x, x_1008.y, x_1008.z) * vec3<f32>(x_1011.y, x_1011.y, x_1011.y));
  let x_1014 : vec4<f32> = u_xlat5;
  u_xlat5 = vec4<f32>(x_1013.x, x_1013.y, x_1013.z, x_1014.w);
  let x_1016 : vec4<f32> = u_xlat5;
  let x_1021 : vec3<f32> = u_xlat8;
  let x_1022 : vec3<f32> = ((vec3<f32>(x_1016.x, x_1016.y, x_1016.z) * vec3<f32>(0.106250003f, 0.106250003f, 0.106250003f)) + x_1021);
  let x_1023 : vec4<f32> = u_xlat5;
  u_xlat5 = vec4<f32>(x_1022.x, x_1022.y, x_1022.z, x_1023.w);
  let x_1025 : vec4<f32> = u_xlat5;
  let x_1028 : vec4<f32> = x_33.x_CameraViewProjections[0i][1i];
  let x_1030 : vec2<f32> = (vec2<f32>(x_1025.y, x_1025.y) * vec2<f32>(x_1028.x, x_1028.y));
  let x_1031 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_1030.x, x_1030.y, x_1031.z, x_1031.w);
  let x_1034 : vec4<f32> = x_33.x_CameraViewProjections[0i][0i];
  let x_1036 : vec4<f32> = u_xlat5;
  let x_1039 : vec4<f32> = u_xlat3;
  let x_1041 : vec2<f32> = ((vec2<f32>(x_1034.x, x_1034.y) * vec2<f32>(x_1036.x, x_1036.x)) + vec2<f32>(x_1039.x, x_1039.y));
  let x_1042 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_1041.x, x_1041.y, x_1042.z, x_1042.w);
  let x_1045 : vec4<f32> = x_33.x_CameraViewProjections[0i][2i];
  let x_1047 : vec4<f32> = u_xlat5;
  let x_1050 : vec4<f32> = u_xlat3;
  let x_1052 : vec2<f32> = ((vec2<f32>(x_1045.x, x_1045.y) * vec2<f32>(x_1047.z, x_1047.z)) + vec2<f32>(x_1050.x, x_1050.y));
  let x_1053 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_1052.x, x_1052.y, x_1053.z, x_1053.w);
  let x_1055 : vec3<f32> = u_xlat4;
  let x_1056 : vec4<f32> = u_xlat5;
  u_xlat26 = dot(x_1055, vec3<f32>(x_1056.x, x_1056.y, x_1056.z));
  let x_1060 : f32 = u_xlat26;
  u_xlat28 = (1.0f / -(x_1060));
  let x_1063 : vec4<f32> = u_xlat3;
  let x_1065 : f32 = u_xlat28;
  let x_1068 : vec2<f32> = ((vec2<f32>(x_1063.x, x_1063.y) * vec2<f32>(x_1065, x_1065)) + vec2<f32>(1.0f, 1.0f));
  let x_1069 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_1068.x, x_1068.y, x_1069.z, x_1069.w);
  let x_1071 : vec4<f32> = u_xlat3;
  let x_1073 : vec2<f32> = (vec2<f32>(x_1071.x, x_1071.y) * vec2<f32>(0.5f, 0.5f));
  let x_1074 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_1073.x, x_1073.y, x_1074.z, x_1074.w);
  let x_1076 : vec4<f32> = u_xlat3;
  let x_1080 : vec2<f32> = clamp(vec2<f32>(x_1076.x, x_1076.y), vec2<f32>(0.0f, 0.0f), vec2<f32>(1.0f, 1.0f));
  let x_1081 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_1080.x, x_1080.y, x_1081.z, x_1081.w);
  let x_1086 : vec4<f32> = u_xlat3;
  let x_1089 : f32 = x_33.x_GlobalMipBias.x;
  let x_1090 : vec4<f32> = textureSampleBias(x_CameraDepthTexture, sampler_CameraDepthTexture, vec2<f32>(x_1086.x, x_1086.y), x_1089);
  u_xlat28 = x_1090.x;
  let x_1093 : f32 = x_33.x_ZBufferParams.z;
  let x_1094 : f32 = u_xlat28;
  let x_1097 : f32 = x_33.x_ZBufferParams.w;
  u_xlat5.x = ((x_1093 * x_1094) + x_1097);
  let x_1101 : f32 = u_xlat5.x;
  u_xlat5.x = (1.0f / x_1101);
  let x_1104 : f32 = u_xlat26;
  let x_1107 : f32 = u_xlat5.x;
  u_xlat26 = (-(x_1104) + -(x_1107));
  let x_1110 : f32 = u_xlat26;
  let x_1113 : f32 = x_33.x_SSAOParams.y;
  u_xlatb26 = (abs(x_1110) < x_1113);
  let x_1115 : bool = u_xlatb26;
  u_xlat26 = select(0.0f, 1.0f, x_1115);
  let x_1118 : f32 = u_xlat28;
  u_xlatb28 = (0.00001f < x_1118);
  let x_1120 : bool = u_xlatb28;
  u_xlat28 = select(0.0f, 1.0f, x_1120);
  let x_1122 : f32 = u_xlat26;
  let x_1123 : f32 = u_xlat28;
  u_xlat26 = (x_1122 * x_1123);
  let x_1126 : f32 = u_xlat3.y;
  u_xlat11.x = (-(x_1126) + 1.0f);
  let x_1131 : f32 = u_xlat5.x;
  let x_1133 : f32 = x_33.x_ProjectionParams2.x;
  u_xlat28 = (x_1131 * x_1133);
  let x_1136 : vec4<f32> = x_33.x_CameraViewXExtent[0i];
  let x_1138 : vec4<f32> = u_xlat3;
  let x_1142 : vec4<f32> = x_33.x_CameraViewTopLeftCorner[0i];
  let x_1144 : vec3<f32> = ((vec3<f32>(x_1136.x, x_1136.y, x_1136.z) * vec3<f32>(x_1138.x, x_1138.x, x_1138.x)) + vec3<f32>(x_1142.x, x_1142.y, x_1142.z));
  let x_1145 : vec4<f32> = u_xlat5;
  u_xlat5 = vec4<f32>(x_1144.x, x_1144.y, x_1144.z, x_1145.w);
  let x_1148 : vec4<f32> = x_33.x_CameraViewYExtent[0i];
  let x_1150 : vec3<f32> = u_xlat11;
  let x_1153 : vec4<f32> = u_xlat5;
  let x_1155 : vec3<f32> = ((vec3<f32>(x_1148.x, x_1148.y, x_1148.z) * vec3<f32>(x_1150.x, x_1150.x, x_1150.x)) + vec3<f32>(x_1153.x, x_1153.y, x_1153.z));
  let x_1156 : vec4<f32> = u_xlat5;
  u_xlat5 = vec4<f32>(x_1155.x, x_1155.y, x_1155.z, x_1156.w);
  let x_1158 : vec4<f32> = u_xlat5;
  let x_1160 : f32 = u_xlat28;
  let x_1163 : vec3<f32> = u_xlat8;
  let x_1165 : vec3<f32> = ((vec3<f32>(x_1158.x, x_1158.y, x_1158.z) * vec3<f32>(x_1160, x_1160, x_1160)) + -(x_1163));
  let x_1166 : vec4<f32> = u_xlat5;
  u_xlat5 = vec4<f32>(x_1165.x, x_1165.y, x_1165.z, x_1166.w);
  let x_1168 : vec4<f32> = u_xlat5;
  let x_1170 : vec4<f32> = u_xlat1;
  u_xlat3.x = dot(vec3<f32>(x_1168.x, x_1168.y, x_1168.z), vec3<f32>(x_1170.x, x_1170.y, x_1170.z));
  let x_1174 : f32 = u_xlat0;
  let x_1178 : f32 = u_xlat3.x;
  u_xlat3.x = ((-(x_1174) * 0.004f) + x_1178);
  let x_1182 : f32 = u_xlat3.x;
  u_xlat3.x = max(x_1182, 0.0f);
  let x_1185 : vec4<f32> = u_xlat5;
  let x_1187 : vec4<f32> = u_xlat5;
  u_xlat11.x = dot(vec3<f32>(x_1185.x, x_1185.y, x_1185.z), vec3<f32>(x_1187.x, x_1187.y, x_1187.z));
  let x_1192 : f32 = u_xlat11.x;
  u_xlat11.x = (x_1192 + 0.0001f);
  let x_1196 : f32 = u_xlat11.x;
  u_xlat11.x = (1.0f / x_1196);
  let x_1200 : f32 = u_xlat11.x;
  let x_1202 : f32 = u_xlat3.x;
  u_xlat3.x = (x_1200 * x_1202);
  let x_1205 : f32 = u_xlat26;
  let x_1207 : f32 = u_xlat3.x;
  u_xlat26 = (x_1205 * x_1207);
  let x_1210 : f32 = u_xlat18.x;
  let x_1211 : f32 = u_xlat25;
  let x_1213 : f32 = u_xlat26;
  u_xlat25 = ((x_1210 * x_1211) + x_1213);
  let x_1218 : vec4<f32> = u_xlat3;
  let x_1221 : f32 = x_33.x_GlobalMipBias.x;
  let x_1222 : vec4<f32> = textureSampleBias(x_BlueNoiseTexture, sampler_PointRepeat, vec2<f32>(x_1218.z, x_1218.w), x_1221);
  u_xlat18.x = x_1222.w;
  let x_1225 : vec2<f32> = u_xlat18;
  u_xlat18 = (vec2<f32>(x_1225.x, x_1225.x) + vec2<f32>(0.75390625f, 0.133333296f));
  let x_1232 : f32 = u_xlat18.x;
  u_xlat18.x = fract(x_1232);
  let x_1236 : f32 = u_xlat18.x;
  u_xlat3.z = ((x_1236 * 2.0f) + -1.0f);
  let x_1241 : f32 = u_xlat18.y;
  u_xlat18.x = (x_1241 * 628.31854248f);
  let x_1245 : f32 = u_xlat3.z;
  let x_1248 : f32 = u_xlat3.z;
  u_xlat26 = ((-(x_1245) * x_1248) + 1.0f);
  let x_1251 : f32 = u_xlat26;
  u_xlat26 = sqrt(x_1251);
  let x_1254 : f32 = u_xlat18.x;
  u_xlat5.x = sin(x_1254);
  let x_1258 : f32 = u_xlat18.x;
  u_xlat6.x = cos(x_1258);
  let x_1261 : f32 = u_xlat26;
  let x_1263 : f32 = u_xlat6.x;
  u_xlat3.x = (x_1261 * x_1263);
  let x_1266 : f32 = u_xlat26;
  let x_1268 : f32 = u_xlat5.x;
  u_xlat3.y = (x_1266 * x_1268);
  let x_1271 : vec4<f32> = u_xlat1;
  let x_1273 : vec4<f32> = u_xlat3;
  u_xlat18.x = dot(vec3<f32>(x_1271.x, x_1271.y, x_1271.z), vec3<f32>(x_1273.x, x_1273.y, x_1273.z));
  let x_1279 : f32 = u_xlat18.x;
  u_xlatb18 = (x_1279 >= 0.0f);
  let x_1281 : bool = u_xlatb18;
  u_xlat18.x = select(-1.0f, 1.0f, x_1281);
  let x_1284 : vec2<f32> = u_xlat18;
  let x_1286 : vec4<f32> = u_xlat3;
  let x_1288 : vec3<f32> = (vec3<f32>(x_1284.x, x_1284.x, x_1284.x) * vec3<f32>(x_1286.x, x_1286.y, x_1286.z));
  let x_1289 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_1288.x, x_1288.y, x_1288.z, x_1289.w);
  let x_1291 : vec4<f32> = u_xlat3;
  let x_1294 : vec4<f32> = x_33.x_SSAOParams;
  let x_1296 : vec3<f32> = (vec3<f32>(x_1291.x, x_1291.y, x_1291.z) * vec3<f32>(x_1294.y, x_1294.y, x_1294.y));
  let x_1297 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_1296.x, x_1296.y, x_1296.z, x_1297.w);
  let x_1299 : vec4<f32> = u_xlat3;
  let x_1304 : vec3<f32> = u_xlat8;
  let x_1305 : vec3<f32> = ((vec3<f32>(x_1299.x, x_1299.y, x_1299.z) * vec3<f32>(0.125f, 0.125f, 0.125f)) + x_1304);
  let x_1306 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_1305.x, x_1305.y, x_1305.z, x_1306.w);
  let x_1308 : vec4<f32> = u_xlat3;
  let x_1311 : vec4<f32> = x_33.x_CameraViewProjections[0i][1i];
  u_xlat18 = (vec2<f32>(x_1308.y, x_1308.y) * vec2<f32>(x_1311.x, x_1311.y));
  let x_1315 : vec4<f32> = x_33.x_CameraViewProjections[0i][0i];
  let x_1317 : vec4<f32> = u_xlat3;
  let x_1320 : vec2<f32> = u_xlat18;
  u_xlat18 = ((vec2<f32>(x_1315.x, x_1315.y) * vec2<f32>(x_1317.x, x_1317.x)) + x_1320);
  let x_1323 : vec4<f32> = x_33.x_CameraViewProjections[0i][2i];
  let x_1325 : vec4<f32> = u_xlat3;
  let x_1328 : vec2<f32> = u_xlat18;
  u_xlat18 = ((vec2<f32>(x_1323.x, x_1323.y) * vec2<f32>(x_1325.z, x_1325.z)) + x_1328);
  let x_1330 : vec3<f32> = u_xlat4;
  let x_1331 : vec4<f32> = u_xlat3;
  u_xlat3.x = dot(x_1330, vec3<f32>(x_1331.x, x_1331.y, x_1331.z));
  let x_1336 : f32 = u_xlat3.x;
  u_xlat11.x = (1.0f / -(x_1336));
  let x_1340 : vec2<f32> = u_xlat18;
  let x_1341 : vec3<f32> = u_xlat11;
  u_xlat18 = ((x_1340 * vec2<f32>(x_1341.x, x_1341.x)) + vec2<f32>(1.0f, 1.0f));
  let x_1345 : vec2<f32> = u_xlat18;
  u_xlat18 = (x_1345 * vec2<f32>(0.5f, 0.5f));
  let x_1347 : vec2<f32> = u_xlat18;
  u_xlat18 = clamp(x_1347, vec2<f32>(0.0f, 0.0f), vec2<f32>(1.0f, 1.0f));
  let x_1354 : vec2<f32> = u_xlat18;
  let x_1356 : f32 = x_33.x_GlobalMipBias.x;
  let x_1357 : vec4<f32> = textureSampleBias(x_CameraDepthTexture, sampler_CameraDepthTexture, x_1354, x_1356);
  u_xlat11.x = x_1357.x;
  let x_1362 : f32 = x_33.x_ZBufferParams.z;
  let x_1364 : f32 = u_xlat11.x;
  let x_1367 : f32 = x_33.x_ZBufferParams.w;
  u_xlat19 = ((x_1362 * x_1364) + x_1367);
  let x_1369 : f32 = u_xlat19;
  u_xlat19 = (1.0f / x_1369);
  let x_1371 : f32 = u_xlat19;
  let x_1374 : f32 = u_xlat3.x;
  u_xlat3.x = (-(x_1371) + -(x_1374));
  let x_1379 : f32 = u_xlat3.x;
  let x_1382 : f32 = x_33.x_SSAOParams.y;
  u_xlatb3.x = (abs(x_1379) < x_1382);
  let x_1386 : f32 = u_xlat11.x;
  u_xlatb3.y = (0.00001f < x_1386);
  let x_1390 : bool = u_xlatb3.x;
  u_xlat3.x = select(0.0f, 1.0f, x_1390);
  let x_1394 : bool = u_xlatb3.y;
  u_xlat3.y = select(0.0f, 1.0f, x_1394);
  let x_1398 : f32 = u_xlat3.y;
  let x_1400 : f32 = u_xlat3.x;
  u_xlat3.x = (x_1398 * x_1400);
  let x_1404 : f32 = u_xlat18.y;
  u_xlat26 = (-(x_1404) + 1.0f);
  let x_1407 : f32 = u_xlat19;
  let x_1409 : f32 = x_33.x_ProjectionParams2.x;
  u_xlat11.x = (x_1407 * x_1409);
  let x_1413 : vec4<f32> = x_33.x_CameraViewXExtent[0i];
  let x_1415 : vec2<f32> = u_xlat18;
  let x_1419 : vec4<f32> = x_33.x_CameraViewTopLeftCorner[0i];
  let x_1421 : vec3<f32> = ((vec3<f32>(x_1413.x, x_1413.y, x_1413.z) * vec3<f32>(x_1415.x, x_1415.x, x_1415.x)) + vec3<f32>(x_1419.x, x_1419.y, x_1419.z));
  let x_1422 : vec4<f32> = u_xlat5;
  u_xlat5 = vec4<f32>(x_1421.x, x_1421.y, x_1421.z, x_1422.w);
  let x_1425 : vec4<f32> = x_33.x_CameraViewYExtent[0i];
  let x_1427 : f32 = u_xlat26;
  let x_1430 : vec4<f32> = u_xlat5;
  let x_1432 : vec3<f32> = ((vec3<f32>(x_1425.x, x_1425.y, x_1425.z) * vec3<f32>(x_1427, x_1427, x_1427)) + vec3<f32>(x_1430.x, x_1430.y, x_1430.z));
  let x_1433 : vec4<f32> = u_xlat5;
  u_xlat5 = vec4<f32>(x_1432.x, x_1432.y, x_1432.z, x_1433.w);
  let x_1435 : vec4<f32> = u_xlat5;
  let x_1437 : vec3<f32> = u_xlat11;
  let x_1440 : vec3<f32> = u_xlat8;
  u_xlat11 = ((vec3<f32>(x_1435.x, x_1435.y, x_1435.z) * vec3<f32>(x_1437.x, x_1437.x, x_1437.x)) + -(x_1440));
  let x_1443 : vec3<f32> = u_xlat11;
  let x_1444 : vec4<f32> = u_xlat1;
  u_xlat18.x = dot(x_1443, vec3<f32>(x_1444.x, x_1444.y, x_1444.z));
  let x_1448 : f32 = u_xlat0;
  let x_1452 : f32 = u_xlat18.x;
  u_xlat18.x = ((-(x_1448) * 0.004f) + x_1452);
  let x_1456 : f32 = u_xlat18.x;
  u_xlat18.x = max(x_1456, 0.0f);
  let x_1459 : vec3<f32> = u_xlat11;
  let x_1460 : vec3<f32> = u_xlat11;
  u_xlat26 = dot(x_1459, x_1460);
  let x_1462 : f32 = u_xlat26;
  u_xlat26 = (x_1462 + 0.0001f);
  let x_1464 : f32 = u_xlat26;
  u_xlat26 = (1.0f / x_1464);
  let x_1466 : f32 = u_xlat26;
  let x_1468 : f32 = u_xlat18.x;
  u_xlat18.x = (x_1466 * x_1468);
  let x_1472 : f32 = u_xlat18.x;
  let x_1474 : f32 = u_xlat3.x;
  let x_1476 : f32 = u_xlat25;
  u_xlat25 = ((x_1472 * x_1474) + x_1476);
  let x_1478 : vec4<f32> = u_xlat2;
  let x_1481 : vec4<f32> = x_33.x_SSAOBlueNoiseParams;
  u_xlat3 = ((vec4<f32>(x_1478.x, x_1478.y, x_1478.x, x_1478.y) * vec4<f32>(x_1481.x, x_1481.y, x_1481.x, x_1481.y)) + vec4<f32>(0.25f, 0.25f, 0.333333343f, 0.333333343f));
  let x_1491 : vec4<f32> = u_xlat3;
  let x_1494 : f32 = x_33.x_GlobalMipBias.x;
  let x_1495 : vec4<f32> = textureSampleBias(x_BlueNoiseTexture, sampler_PointRepeat, vec2<f32>(x_1491.x, x_1491.y), x_1494);
  u_xlat18.x = x_1495.w;
  let x_1498 : vec2<f32> = u_xlat18;
  u_xlat18 = (vec2<f32>(x_1498.x, x_1498.x) + vec2<f32>(0.56640625f, 0.015625f));
  let x_1505 : f32 = u_xlat18.x;
  u_xlat18.x = fract(x_1505);
  let x_1509 : f32 = u_xlat18.x;
  u_xlat5.z = ((x_1509 * 2.0f) + -1.0f);
  let x_1514 : f32 = u_xlat18.y;
  u_xlat18.x = (x_1514 * 628.31854248f);
  let x_1518 : f32 = u_xlat5.z;
  let x_1521 : f32 = u_xlat5.z;
  u_xlat26 = ((-(x_1518) * x_1521) + 1.0f);
  let x_1524 : f32 = u_xlat26;
  u_xlat26 = sqrt(x_1524);
  let x_1527 : f32 = u_xlat18.x;
  u_xlat3.x = sin(x_1527);
  let x_1531 : f32 = u_xlat18.x;
  u_xlat6.x = cos(x_1531);
  let x_1534 : f32 = u_xlat26;
  let x_1536 : f32 = u_xlat6.x;
  u_xlat5.x = (x_1534 * x_1536);
  let x_1539 : f32 = u_xlat26;
  let x_1541 : f32 = u_xlat3.x;
  u_xlat5.y = (x_1539 * x_1541);
  let x_1544 : vec4<f32> = u_xlat1;
  let x_1546 : vec4<f32> = u_xlat5;
  u_xlat18.x = dot(vec3<f32>(x_1544.x, x_1544.y, x_1544.z), vec3<f32>(x_1546.x, x_1546.y, x_1546.z));
  let x_1551 : f32 = u_xlat18.x;
  u_xlatb18 = (x_1551 >= 0.0f);
  let x_1553 : bool = u_xlatb18;
  u_xlat18.x = select(-1.0f, 1.0f, x_1553);
  let x_1556 : vec2<f32> = u_xlat18;
  let x_1558 : vec4<f32> = u_xlat5;
  let x_1560 : vec3<f32> = (vec3<f32>(x_1556.x, x_1556.x, x_1556.x) * vec3<f32>(x_1558.x, x_1558.y, x_1558.z));
  let x_1561 : vec4<f32> = u_xlat5;
  u_xlat5 = vec4<f32>(x_1560.x, x_1560.y, x_1560.z, x_1561.w);
  let x_1563 : vec4<f32> = u_xlat5;
  let x_1566 : vec4<f32> = x_33.x_SSAOParams;
  let x_1568 : vec3<f32> = (vec3<f32>(x_1563.x, x_1563.y, x_1563.z) * vec3<f32>(x_1566.y, x_1566.y, x_1566.y));
  let x_1569 : vec4<f32> = u_xlat5;
  u_xlat5 = vec4<f32>(x_1568.x, x_1568.y, x_1568.z, x_1569.w);
  let x_1571 : vec4<f32> = u_xlat5;
  let x_1576 : vec3<f32> = u_xlat8;
  let x_1577 : vec3<f32> = ((vec3<f32>(x_1571.x, x_1571.y, x_1571.z) * vec3<f32>(0.15625f, 0.15625f, 0.15625f)) + x_1576);
  let x_1578 : vec4<f32> = u_xlat5;
  u_xlat5 = vec4<f32>(x_1577.x, x_1577.y, x_1577.z, x_1578.w);
  let x_1580 : vec4<f32> = u_xlat5;
  let x_1583 : vec4<f32> = x_33.x_CameraViewProjections[0i][1i];
  u_xlat18 = (vec2<f32>(x_1580.y, x_1580.y) * vec2<f32>(x_1583.x, x_1583.y));
  let x_1587 : vec4<f32> = x_33.x_CameraViewProjections[0i][0i];
  let x_1589 : vec4<f32> = u_xlat5;
  let x_1592 : vec2<f32> = u_xlat18;
  u_xlat18 = ((vec2<f32>(x_1587.x, x_1587.y) * vec2<f32>(x_1589.x, x_1589.x)) + x_1592);
  let x_1595 : vec4<f32> = x_33.x_CameraViewProjections[0i][2i];
  let x_1597 : vec4<f32> = u_xlat5;
  let x_1600 : vec2<f32> = u_xlat18;
  u_xlat18 = ((vec2<f32>(x_1595.x, x_1595.y) * vec2<f32>(x_1597.z, x_1597.z)) + x_1600);
  let x_1602 : vec3<f32> = u_xlat4;
  let x_1603 : vec4<f32> = u_xlat5;
  u_xlat3.x = dot(x_1602, vec3<f32>(x_1603.x, x_1603.y, x_1603.z));
  let x_1608 : f32 = u_xlat3.x;
  u_xlat11.x = (1.0f / -(x_1608));
  let x_1612 : vec2<f32> = u_xlat18;
  let x_1613 : vec3<f32> = u_xlat11;
  u_xlat18 = ((x_1612 * vec2<f32>(x_1613.x, x_1613.x)) + vec2<f32>(1.0f, 1.0f));
  let x_1617 : vec2<f32> = u_xlat18;
  u_xlat18 = (x_1617 * vec2<f32>(0.5f, 0.5f));
  let x_1619 : vec2<f32> = u_xlat18;
  u_xlat18 = clamp(x_1619, vec2<f32>(0.0f, 0.0f), vec2<f32>(1.0f, 1.0f));
  let x_1626 : vec2<f32> = u_xlat18;
  let x_1628 : f32 = x_33.x_GlobalMipBias.x;
  let x_1629 : vec4<f32> = textureSampleBias(x_CameraDepthTexture, sampler_CameraDepthTexture, x_1626, x_1628);
  u_xlat11.x = x_1629.x;
  let x_1633 : f32 = x_33.x_ZBufferParams.z;
  let x_1635 : f32 = u_xlat11.x;
  let x_1638 : f32 = x_33.x_ZBufferParams.w;
  u_xlat28 = ((x_1633 * x_1635) + x_1638);
  let x_1640 : f32 = u_xlat28;
  u_xlat28 = (1.0f / x_1640);
  let x_1643 : f32 = u_xlat3.x;
  let x_1645 : f32 = u_xlat28;
  u_xlat3.x = (-(x_1643) + -(x_1645));
  let x_1650 : f32 = u_xlat3.x;
  let x_1653 : f32 = x_33.x_SSAOParams.y;
  u_xlatb3.x = (abs(x_1650) < x_1653);
  let x_1657 : f32 = u_xlat11.x;
  u_xlatb3.y = (0.00001f < x_1657);
  let x_1661 : bool = u_xlatb3.x;
  u_xlat3.x = select(0.0f, 1.0f, x_1661);
  let x_1665 : bool = u_xlatb3.y;
  u_xlat3.y = select(0.0f, 1.0f, x_1665);
  let x_1669 : f32 = u_xlat3.y;
  let x_1671 : f32 = u_xlat3.x;
  u_xlat3.x = (x_1669 * x_1671);
  let x_1675 : f32 = u_xlat18.y;
  u_xlat26 = (-(x_1675) + 1.0f);
  let x_1678 : f32 = u_xlat28;
  let x_1680 : f32 = x_33.x_ProjectionParams2.x;
  u_xlat11.x = (x_1678 * x_1680);
  let x_1684 : vec4<f32> = x_33.x_CameraViewXExtent[0i];
  let x_1686 : vec2<f32> = u_xlat18;
  let x_1690 : vec4<f32> = x_33.x_CameraViewTopLeftCorner[0i];
  let x_1692 : vec3<f32> = ((vec3<f32>(x_1684.x, x_1684.y, x_1684.z) * vec3<f32>(x_1686.x, x_1686.x, x_1686.x)) + vec3<f32>(x_1690.x, x_1690.y, x_1690.z));
  let x_1693 : vec4<f32> = u_xlat5;
  u_xlat5 = vec4<f32>(x_1692.x, x_1692.y, x_1692.z, x_1693.w);
  let x_1696 : vec4<f32> = x_33.x_CameraViewYExtent[0i];
  let x_1698 : f32 = u_xlat26;
  let x_1701 : vec4<f32> = u_xlat5;
  let x_1703 : vec3<f32> = ((vec3<f32>(x_1696.x, x_1696.y, x_1696.z) * vec3<f32>(x_1698, x_1698, x_1698)) + vec3<f32>(x_1701.x, x_1701.y, x_1701.z));
  let x_1704 : vec4<f32> = u_xlat5;
  u_xlat5 = vec4<f32>(x_1703.x, x_1703.y, x_1703.z, x_1704.w);
  let x_1706 : vec4<f32> = u_xlat5;
  let x_1708 : vec3<f32> = u_xlat11;
  let x_1711 : vec3<f32> = u_xlat8;
  let x_1713 : vec3<f32> = ((vec3<f32>(x_1706.x, x_1706.y, x_1706.z) * vec3<f32>(x_1708.x, x_1708.x, x_1708.x)) + -(x_1711));
  let x_1714 : vec4<f32> = u_xlat5;
  u_xlat5 = vec4<f32>(x_1713.x, x_1713.y, x_1713.z, x_1714.w);
  let x_1716 : vec4<f32> = u_xlat5;
  let x_1718 : vec4<f32> = u_xlat1;
  u_xlat18.x = dot(vec3<f32>(x_1716.x, x_1716.y, x_1716.z), vec3<f32>(x_1718.x, x_1718.y, x_1718.z));
  let x_1722 : f32 = u_xlat0;
  let x_1726 : f32 = u_xlat18.x;
  u_xlat18.x = ((-(x_1722) * 0.004f) + x_1726);
  let x_1730 : f32 = u_xlat18.x;
  u_xlat18.x = max(x_1730, 0.0f);
  let x_1733 : vec4<f32> = u_xlat5;
  let x_1735 : vec4<f32> = u_xlat5;
  u_xlat26 = dot(vec3<f32>(x_1733.x, x_1733.y, x_1733.z), vec3<f32>(x_1735.x, x_1735.y, x_1735.z));
  let x_1738 : f32 = u_xlat26;
  u_xlat26 = (x_1738 + 0.0001f);
  let x_1740 : f32 = u_xlat26;
  u_xlat26 = (1.0f / x_1740);
  let x_1742 : f32 = u_xlat26;
  let x_1744 : f32 = u_xlat18.x;
  u_xlat18.x = (x_1742 * x_1744);
  let x_1748 : f32 = u_xlat18.x;
  let x_1750 : f32 = u_xlat3.x;
  let x_1752 : f32 = u_xlat25;
  u_xlat25 = ((x_1748 * x_1750) + x_1752);
  let x_1757 : vec4<f32> = u_xlat3;
  let x_1760 : f32 = x_33.x_GlobalMipBias.x;
  let x_1761 : vec4<f32> = textureSampleBias(x_BlueNoiseTexture, sampler_PointRepeat, vec2<f32>(x_1757.z, x_1757.w), x_1760);
  u_xlat18.x = x_1761.w;
  let x_1765 : f32 = u_xlat18.x;
  u_xlat26 = (x_1765 + 0.984375f);
  let x_1768 : f32 = u_xlat26;
  u_xlat26 = fract(x_1768);
  let x_1770 : f32 = u_xlat26;
  u_xlat3.z = ((x_1770 * 2.0f) + -1.0f);
  let x_1775 : f32 = u_xlat18.x;
  u_xlat18.x = (x_1775 * 628.31854248f);
  let x_1779 : f32 = u_xlat3.z;
  let x_1782 : f32 = u_xlat3.z;
  u_xlat26 = ((-(x_1779) * x_1782) + 1.0f);
  let x_1785 : f32 = u_xlat26;
  u_xlat26 = sqrt(x_1785);
  let x_1788 : f32 = u_xlat18.x;
  u_xlat5.x = sin(x_1788);
  let x_1792 : f32 = u_xlat18.x;
  u_xlat6.x = cos(x_1792);
  let x_1795 : f32 = u_xlat26;
  let x_1797 : f32 = u_xlat6.x;
  u_xlat3.x = (x_1795 * x_1797);
  let x_1800 : f32 = u_xlat26;
  let x_1802 : f32 = u_xlat5.x;
  u_xlat3.y = (x_1800 * x_1802);
  let x_1805 : vec4<f32> = u_xlat1;
  let x_1807 : vec4<f32> = u_xlat3;
  u_xlat18.x = dot(vec3<f32>(x_1805.x, x_1805.y, x_1805.z), vec3<f32>(x_1807.x, x_1807.y, x_1807.z));
  let x_1812 : f32 = u_xlat18.x;
  u_xlatb18 = (x_1812 >= 0.0f);
  let x_1814 : bool = u_xlatb18;
  u_xlat18.x = select(-1.0f, 1.0f, x_1814);
  let x_1817 : vec2<f32> = u_xlat18;
  let x_1819 : vec4<f32> = u_xlat3;
  let x_1821 : vec3<f32> = (vec3<f32>(x_1817.x, x_1817.x, x_1817.x) * vec3<f32>(x_1819.x, x_1819.y, x_1819.z));
  let x_1822 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_1821.x, x_1821.y, x_1821.z, x_1822.w);
  let x_1824 : vec4<f32> = u_xlat3;
  let x_1827 : vec4<f32> = x_33.x_SSAOParams;
  let x_1829 : vec3<f32> = (vec3<f32>(x_1824.x, x_1824.y, x_1824.z) * vec3<f32>(x_1827.y, x_1827.y, x_1827.y));
  let x_1830 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_1829.x, x_1829.y, x_1829.z, x_1830.w);
  let x_1832 : vec4<f32> = u_xlat3;
  let x_1837 : vec3<f32> = u_xlat8;
  let x_1838 : vec3<f32> = ((vec3<f32>(x_1832.x, x_1832.y, x_1832.z) * vec3<f32>(0.200000003f, 0.200000003f, 0.200000003f)) + x_1837);
  let x_1839 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_1838.x, x_1838.y, x_1838.z, x_1839.w);
  let x_1841 : vec4<f32> = u_xlat3;
  let x_1844 : vec4<f32> = x_33.x_CameraViewProjections[0i][1i];
  u_xlat18 = (vec2<f32>(x_1841.y, x_1841.y) * vec2<f32>(x_1844.x, x_1844.y));
  let x_1848 : vec4<f32> = x_33.x_CameraViewProjections[0i][0i];
  let x_1850 : vec4<f32> = u_xlat3;
  let x_1853 : vec2<f32> = u_xlat18;
  u_xlat18 = ((vec2<f32>(x_1848.x, x_1848.y) * vec2<f32>(x_1850.x, x_1850.x)) + x_1853);
  let x_1856 : vec4<f32> = x_33.x_CameraViewProjections[0i][2i];
  let x_1858 : vec4<f32> = u_xlat3;
  let x_1861 : vec2<f32> = u_xlat18;
  u_xlat18 = ((vec2<f32>(x_1856.x, x_1856.y) * vec2<f32>(x_1858.z, x_1858.z)) + x_1861);
  let x_1863 : vec3<f32> = u_xlat4;
  let x_1864 : vec4<f32> = u_xlat3;
  u_xlat3.x = dot(x_1863, vec3<f32>(x_1864.x, x_1864.y, x_1864.z));
  let x_1869 : f32 = u_xlat3.x;
  u_xlat11.x = (1.0f / -(x_1869));
  let x_1873 : vec2<f32> = u_xlat18;
  let x_1874 : vec3<f32> = u_xlat11;
  u_xlat18 = ((x_1873 * vec2<f32>(x_1874.x, x_1874.x)) + vec2<f32>(1.0f, 1.0f));
  let x_1878 : vec2<f32> = u_xlat18;
  u_xlat18 = (x_1878 * vec2<f32>(0.5f, 0.5f));
  let x_1880 : vec2<f32> = u_xlat18;
  u_xlat18 = clamp(x_1880, vec2<f32>(0.0f, 0.0f), vec2<f32>(1.0f, 1.0f));
  let x_1887 : vec2<f32> = u_xlat18;
  let x_1889 : f32 = x_33.x_GlobalMipBias.x;
  let x_1890 : vec4<f32> = textureSampleBias(x_CameraDepthTexture, sampler_CameraDepthTexture, x_1887, x_1889);
  u_xlat11.x = x_1890.x;
  let x_1894 : f32 = x_33.x_ZBufferParams.z;
  let x_1896 : f32 = u_xlat11.x;
  let x_1899 : f32 = x_33.x_ZBufferParams.w;
  u_xlat19 = ((x_1894 * x_1896) + x_1899);
  let x_1901 : f32 = u_xlat19;
  u_xlat19 = (1.0f / x_1901);
  let x_1903 : f32 = u_xlat19;
  let x_1906 : f32 = u_xlat3.x;
  u_xlat3.x = (-(x_1903) + -(x_1906));
  let x_1911 : f32 = u_xlat3.x;
  let x_1914 : f32 = x_33.x_SSAOParams.y;
  u_xlatb3.x = (abs(x_1911) < x_1914);
  let x_1918 : f32 = u_xlat11.x;
  u_xlatb3.y = (0.00001f < x_1918);
  let x_1922 : bool = u_xlatb3.x;
  u_xlat3.x = select(0.0f, 1.0f, x_1922);
  let x_1926 : bool = u_xlatb3.y;
  u_xlat3.y = select(0.0f, 1.0f, x_1926);
  let x_1930 : f32 = u_xlat3.y;
  let x_1932 : f32 = u_xlat3.x;
  u_xlat3.x = (x_1930 * x_1932);
  let x_1936 : f32 = u_xlat18.y;
  u_xlat26 = (-(x_1936) + 1.0f);
  let x_1939 : f32 = u_xlat19;
  let x_1941 : f32 = x_33.x_ProjectionParams2.x;
  u_xlat11.x = (x_1939 * x_1941);
  let x_1945 : vec4<f32> = x_33.x_CameraViewXExtent[0i];
  let x_1947 : vec2<f32> = u_xlat18;
  let x_1951 : vec4<f32> = x_33.x_CameraViewTopLeftCorner[0i];
  let x_1953 : vec3<f32> = ((vec3<f32>(x_1945.x, x_1945.y, x_1945.z) * vec3<f32>(x_1947.x, x_1947.x, x_1947.x)) + vec3<f32>(x_1951.x, x_1951.y, x_1951.z));
  let x_1954 : vec4<f32> = u_xlat5;
  u_xlat5 = vec4<f32>(x_1953.x, x_1953.y, x_1953.z, x_1954.w);
  let x_1957 : vec4<f32> = x_33.x_CameraViewYExtent[0i];
  let x_1959 : f32 = u_xlat26;
  let x_1962 : vec4<f32> = u_xlat5;
  let x_1964 : vec3<f32> = ((vec3<f32>(x_1957.x, x_1957.y, x_1957.z) * vec3<f32>(x_1959, x_1959, x_1959)) + vec3<f32>(x_1962.x, x_1962.y, x_1962.z));
  let x_1965 : vec4<f32> = u_xlat5;
  u_xlat5 = vec4<f32>(x_1964.x, x_1964.y, x_1964.z, x_1965.w);
  let x_1967 : vec4<f32> = u_xlat5;
  let x_1969 : vec3<f32> = u_xlat11;
  let x_1972 : vec3<f32> = u_xlat8;
  u_xlat11 = ((vec3<f32>(x_1967.x, x_1967.y, x_1967.z) * vec3<f32>(x_1969.x, x_1969.x, x_1969.x)) + -(x_1972));
  let x_1975 : vec3<f32> = u_xlat11;
  let x_1976 : vec4<f32> = u_xlat1;
  u_xlat18.x = dot(x_1975, vec3<f32>(x_1976.x, x_1976.y, x_1976.z));
  let x_1980 : f32 = u_xlat0;
  let x_1984 : f32 = u_xlat18.x;
  u_xlat18.x = ((-(x_1980) * 0.004f) + x_1984);
  let x_1988 : f32 = u_xlat18.x;
  u_xlat18.x = max(x_1988, 0.0f);
  let x_1991 : vec3<f32> = u_xlat11;
  let x_1992 : vec3<f32> = u_xlat11;
  u_xlat26 = dot(x_1991, x_1992);
  let x_1994 : f32 = u_xlat26;
  u_xlat26 = (x_1994 + 0.0001f);
  let x_1996 : f32 = u_xlat26;
  u_xlat26 = (1.0f / x_1996);
  let x_1998 : f32 = u_xlat26;
  let x_2000 : f32 = u_xlat18.x;
  u_xlat18.x = (x_1998 * x_2000);
  let x_2004 : f32 = u_xlat18.x;
  let x_2006 : f32 = u_xlat3.x;
  let x_2008 : f32 = u_xlat25;
  u_xlat25 = ((x_2004 * x_2006) + x_2008);
  let x_2010 : vec4<f32> = u_xlat2;
  let x_2013 : vec4<f32> = x_33.x_SSAOBlueNoiseParams;
  u_xlat3 = ((vec4<f32>(x_2010.x, x_2010.y, x_2010.x, x_2010.y) * vec4<f32>(x_2013.x, x_2013.y, x_2013.x, x_2013.y)) + vec4<f32>(0.416666687f, 0.416666687f, 0.5f, 0.5f));
  let x_2022 : vec4<f32> = u_xlat3;
  let x_2025 : f32 = x_33.x_GlobalMipBias.x;
  let x_2026 : vec4<f32> = textureSampleBias(x_BlueNoiseTexture, sampler_PointRepeat, vec2<f32>(x_2022.x, x_2022.y), x_2025);
  u_xlat18.x = x_2026.w;
  let x_2029 : vec2<f32> = u_xlat18;
  u_xlat18 = (vec2<f32>(x_2029.x, x_2029.x) + vec2<f32>(0.07421875f, 0.10546875f));
  let x_2036 : f32 = u_xlat18.x;
  u_xlat18.x = fract(x_2036);
  let x_2040 : f32 = u_xlat18.x;
  u_xlat5.z = ((x_2040 * 2.0f) + -1.0f);
  let x_2045 : f32 = u_xlat18.y;
  u_xlat18.x = (x_2045 * 628.31854248f);
  let x_2049 : f32 = u_xlat5.z;
  let x_2052 : f32 = u_xlat5.z;
  u_xlat26 = ((-(x_2049) * x_2052) + 1.0f);
  let x_2055 : f32 = u_xlat26;
  u_xlat26 = sqrt(x_2055);
  let x_2058 : f32 = u_xlat18.x;
  u_xlat3.x = sin(x_2058);
  let x_2062 : f32 = u_xlat18.x;
  u_xlat6.x = cos(x_2062);
  let x_2065 : f32 = u_xlat26;
  let x_2067 : f32 = u_xlat6.x;
  u_xlat5.x = (x_2065 * x_2067);
  let x_2070 : f32 = u_xlat26;
  let x_2072 : f32 = u_xlat3.x;
  u_xlat5.y = (x_2070 * x_2072);
  let x_2075 : vec4<f32> = u_xlat1;
  let x_2077 : vec4<f32> = u_xlat5;
  u_xlat18.x = dot(vec3<f32>(x_2075.x, x_2075.y, x_2075.z), vec3<f32>(x_2077.x, x_2077.y, x_2077.z));
  let x_2082 : f32 = u_xlat18.x;
  u_xlatb18 = (x_2082 >= 0.0f);
  let x_2084 : bool = u_xlatb18;
  u_xlat18.x = select(-1.0f, 1.0f, x_2084);
  let x_2087 : vec2<f32> = u_xlat18;
  let x_2089 : vec4<f32> = u_xlat5;
  let x_2091 : vec3<f32> = (vec3<f32>(x_2087.x, x_2087.x, x_2087.x) * vec3<f32>(x_2089.x, x_2089.y, x_2089.z));
  let x_2092 : vec4<f32> = u_xlat5;
  u_xlat5 = vec4<f32>(x_2091.x, x_2091.y, x_2091.z, x_2092.w);
  let x_2094 : vec4<f32> = u_xlat5;
  let x_2097 : vec4<f32> = x_33.x_SSAOParams;
  let x_2099 : vec3<f32> = (vec3<f32>(x_2094.x, x_2094.y, x_2094.z) * vec3<f32>(x_2097.y, x_2097.y, x_2097.y));
  let x_2100 : vec4<f32> = u_xlat5;
  u_xlat5 = vec4<f32>(x_2099.x, x_2099.y, x_2099.z, x_2100.w);
  let x_2102 : vec4<f32> = u_xlat5;
  let x_2107 : vec3<f32> = u_xlat8;
  let x_2108 : vec3<f32> = ((vec3<f32>(x_2102.x, x_2102.y, x_2102.z) * vec3<f32>(0.256250024f, 0.256250024f, 0.256250024f)) + x_2107);
  let x_2109 : vec4<f32> = u_xlat5;
  u_xlat5 = vec4<f32>(x_2108.x, x_2108.y, x_2108.z, x_2109.w);
  let x_2111 : vec4<f32> = u_xlat5;
  let x_2114 : vec4<f32> = x_33.x_CameraViewProjections[0i][1i];
  u_xlat18 = (vec2<f32>(x_2111.y, x_2111.y) * vec2<f32>(x_2114.x, x_2114.y));
  let x_2118 : vec4<f32> = x_33.x_CameraViewProjections[0i][0i];
  let x_2120 : vec4<f32> = u_xlat5;
  let x_2123 : vec2<f32> = u_xlat18;
  u_xlat18 = ((vec2<f32>(x_2118.x, x_2118.y) * vec2<f32>(x_2120.x, x_2120.x)) + x_2123);
  let x_2126 : vec4<f32> = x_33.x_CameraViewProjections[0i][2i];
  let x_2128 : vec4<f32> = u_xlat5;
  let x_2131 : vec2<f32> = u_xlat18;
  u_xlat18 = ((vec2<f32>(x_2126.x, x_2126.y) * vec2<f32>(x_2128.z, x_2128.z)) + x_2131);
  let x_2133 : vec3<f32> = u_xlat4;
  let x_2134 : vec4<f32> = u_xlat5;
  u_xlat3.x = dot(x_2133, vec3<f32>(x_2134.x, x_2134.y, x_2134.z));
  let x_2139 : f32 = u_xlat3.x;
  u_xlat11.x = (1.0f / -(x_2139));
  let x_2143 : vec2<f32> = u_xlat18;
  let x_2144 : vec3<f32> = u_xlat11;
  u_xlat18 = ((x_2143 * vec2<f32>(x_2144.x, x_2144.x)) + vec2<f32>(1.0f, 1.0f));
  let x_2148 : vec2<f32> = u_xlat18;
  u_xlat18 = (x_2148 * vec2<f32>(0.5f, 0.5f));
  let x_2150 : vec2<f32> = u_xlat18;
  u_xlat18 = clamp(x_2150, vec2<f32>(0.0f, 0.0f), vec2<f32>(1.0f, 1.0f));
  let x_2157 : vec2<f32> = u_xlat18;
  let x_2159 : f32 = x_33.x_GlobalMipBias.x;
  let x_2160 : vec4<f32> = textureSampleBias(x_CameraDepthTexture, sampler_CameraDepthTexture, x_2157, x_2159);
  u_xlat11.x = x_2160.x;
  let x_2164 : f32 = x_33.x_ZBufferParams.z;
  let x_2166 : f32 = u_xlat11.x;
  let x_2169 : f32 = x_33.x_ZBufferParams.w;
  u_xlat28 = ((x_2164 * x_2166) + x_2169);
  let x_2171 : f32 = u_xlat28;
  u_xlat28 = (1.0f / x_2171);
  let x_2174 : f32 = u_xlat3.x;
  let x_2176 : f32 = u_xlat28;
  u_xlat3.x = (-(x_2174) + -(x_2176));
  let x_2181 : f32 = u_xlat3.x;
  let x_2184 : f32 = x_33.x_SSAOParams.y;
  u_xlatb3.x = (abs(x_2181) < x_2184);
  let x_2188 : f32 = u_xlat11.x;
  u_xlatb3.y = (0.00001f < x_2188);
  let x_2192 : bool = u_xlatb3.x;
  u_xlat3.x = select(0.0f, 1.0f, x_2192);
  let x_2196 : bool = u_xlatb3.y;
  u_xlat3.y = select(0.0f, 1.0f, x_2196);
  let x_2200 : f32 = u_xlat3.y;
  let x_2202 : f32 = u_xlat3.x;
  u_xlat3.x = (x_2200 * x_2202);
  let x_2206 : f32 = u_xlat18.y;
  u_xlat26 = (-(x_2206) + 1.0f);
  let x_2209 : f32 = u_xlat28;
  let x_2211 : f32 = x_33.x_ProjectionParams2.x;
  u_xlat11.x = (x_2209 * x_2211);
  let x_2215 : vec4<f32> = x_33.x_CameraViewXExtent[0i];
  let x_2217 : vec2<f32> = u_xlat18;
  let x_2221 : vec4<f32> = x_33.x_CameraViewTopLeftCorner[0i];
  let x_2223 : vec3<f32> = ((vec3<f32>(x_2215.x, x_2215.y, x_2215.z) * vec3<f32>(x_2217.x, x_2217.x, x_2217.x)) + vec3<f32>(x_2221.x, x_2221.y, x_2221.z));
  let x_2224 : vec4<f32> = u_xlat5;
  u_xlat5 = vec4<f32>(x_2223.x, x_2223.y, x_2223.z, x_2224.w);
  let x_2227 : vec4<f32> = x_33.x_CameraViewYExtent[0i];
  let x_2229 : f32 = u_xlat26;
  let x_2232 : vec4<f32> = u_xlat5;
  let x_2234 : vec3<f32> = ((vec3<f32>(x_2227.x, x_2227.y, x_2227.z) * vec3<f32>(x_2229, x_2229, x_2229)) + vec3<f32>(x_2232.x, x_2232.y, x_2232.z));
  let x_2235 : vec4<f32> = u_xlat5;
  u_xlat5 = vec4<f32>(x_2234.x, x_2234.y, x_2234.z, x_2235.w);
  let x_2237 : vec4<f32> = u_xlat5;
  let x_2239 : vec3<f32> = u_xlat11;
  let x_2242 : vec3<f32> = u_xlat8;
  let x_2244 : vec3<f32> = ((vec3<f32>(x_2237.x, x_2237.y, x_2237.z) * vec3<f32>(x_2239.x, x_2239.x, x_2239.x)) + -(x_2242));
  let x_2245 : vec4<f32> = u_xlat5;
  u_xlat5 = vec4<f32>(x_2244.x, x_2244.y, x_2244.z, x_2245.w);
  let x_2247 : vec4<f32> = u_xlat5;
  let x_2249 : vec4<f32> = u_xlat1;
  u_xlat18.x = dot(vec3<f32>(x_2247.x, x_2247.y, x_2247.z), vec3<f32>(x_2249.x, x_2249.y, x_2249.z));
  let x_2253 : f32 = u_xlat0;
  let x_2257 : f32 = u_xlat18.x;
  u_xlat18.x = ((-(x_2253) * 0.004f) + x_2257);
  let x_2261 : f32 = u_xlat18.x;
  u_xlat18.x = max(x_2261, 0.0f);
  let x_2264 : vec4<f32> = u_xlat5;
  let x_2266 : vec4<f32> = u_xlat5;
  u_xlat26 = dot(vec3<f32>(x_2264.x, x_2264.y, x_2264.z), vec3<f32>(x_2266.x, x_2266.y, x_2266.z));
  let x_2269 : f32 = u_xlat26;
  u_xlat26 = (x_2269 + 0.0001f);
  let x_2271 : f32 = u_xlat26;
  u_xlat26 = (1.0f / x_2271);
  let x_2273 : f32 = u_xlat26;
  let x_2275 : f32 = u_xlat18.x;
  u_xlat18.x = (x_2273 * x_2275);
  let x_2279 : f32 = u_xlat18.x;
  let x_2281 : f32 = u_xlat3.x;
  let x_2283 : f32 = u_xlat25;
  u_xlat25 = ((x_2279 * x_2281) + x_2283);
  let x_2288 : vec4<f32> = u_xlat3;
  let x_2291 : f32 = x_33.x_GlobalMipBias.x;
  let x_2292 : vec4<f32> = textureSampleBias(x_BlueNoiseTexture, sampler_PointRepeat, vec2<f32>(x_2288.z, x_2288.w), x_2291);
  u_xlat18.x = x_2292.w;
  let x_2295 : vec2<f32> = u_xlat18;
  u_xlat18 = (vec2<f32>(x_2295.x, x_2295.x) + vec2<f32>(0.23828125f, 0.640625f));
  let x_2302 : f32 = u_xlat18.x;
  u_xlat18.x = fract(x_2302);
  let x_2306 : f32 = u_xlat18.x;
  u_xlat3.z = ((x_2306 * 2.0f) + -1.0f);
  let x_2311 : f32 = u_xlat18.y;
  u_xlat18.x = (x_2311 * 628.31854248f);
  let x_2315 : f32 = u_xlat3.z;
  let x_2318 : f32 = u_xlat3.z;
  u_xlat26 = ((-(x_2315) * x_2318) + 1.0f);
  let x_2321 : f32 = u_xlat26;
  u_xlat26 = sqrt(x_2321);
  let x_2324 : f32 = u_xlat18.x;
  u_xlat5.x = sin(x_2324);
  let x_2328 : f32 = u_xlat18.x;
  u_xlat6.x = cos(x_2328);
  let x_2331 : f32 = u_xlat26;
  let x_2333 : f32 = u_xlat6.x;
  u_xlat3.x = (x_2331 * x_2333);
  let x_2336 : f32 = u_xlat26;
  let x_2338 : f32 = u_xlat5.x;
  u_xlat3.y = (x_2336 * x_2338);
  let x_2341 : vec4<f32> = u_xlat1;
  let x_2343 : vec4<f32> = u_xlat3;
  u_xlat18.x = dot(vec3<f32>(x_2341.x, x_2341.y, x_2341.z), vec3<f32>(x_2343.x, x_2343.y, x_2343.z));
  let x_2348 : f32 = u_xlat18.x;
  u_xlatb18 = (x_2348 >= 0.0f);
  let x_2350 : bool = u_xlatb18;
  u_xlat18.x = select(-1.0f, 1.0f, x_2350);
  let x_2353 : vec2<f32> = u_xlat18;
  let x_2355 : vec4<f32> = u_xlat3;
  let x_2357 : vec3<f32> = (vec3<f32>(x_2353.x, x_2353.x, x_2353.x) * vec3<f32>(x_2355.x, x_2355.y, x_2355.z));
  let x_2358 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_2357.x, x_2357.y, x_2357.z, x_2358.w);
  let x_2360 : vec4<f32> = u_xlat3;
  let x_2363 : vec4<f32> = x_33.x_SSAOParams;
  let x_2365 : vec3<f32> = (vec3<f32>(x_2360.x, x_2360.y, x_2360.z) * vec3<f32>(x_2363.y, x_2363.y, x_2363.y));
  let x_2366 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_2365.x, x_2365.y, x_2365.z, x_2366.w);
  let x_2368 : vec4<f32> = u_xlat3;
  let x_2373 : vec3<f32> = u_xlat8;
  let x_2374 : vec3<f32> = ((vec3<f32>(x_2368.x, x_2368.y, x_2368.z) * vec3<f32>(0.324999988f, 0.324999988f, 0.324999988f)) + x_2373);
  let x_2375 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_2374.x, x_2374.y, x_2374.z, x_2375.w);
  let x_2377 : vec4<f32> = u_xlat3;
  let x_2380 : vec4<f32> = x_33.x_CameraViewProjections[0i][1i];
  u_xlat18 = (vec2<f32>(x_2377.y, x_2377.y) * vec2<f32>(x_2380.x, x_2380.y));
  let x_2384 : vec4<f32> = x_33.x_CameraViewProjections[0i][0i];
  let x_2386 : vec4<f32> = u_xlat3;
  let x_2389 : vec2<f32> = u_xlat18;
  u_xlat18 = ((vec2<f32>(x_2384.x, x_2384.y) * vec2<f32>(x_2386.x, x_2386.x)) + x_2389);
  let x_2392 : vec4<f32> = x_33.x_CameraViewProjections[0i][2i];
  let x_2394 : vec4<f32> = u_xlat3;
  let x_2397 : vec2<f32> = u_xlat18;
  u_xlat18 = ((vec2<f32>(x_2392.x, x_2392.y) * vec2<f32>(x_2394.z, x_2394.z)) + x_2397);
  let x_2399 : vec3<f32> = u_xlat4;
  let x_2400 : vec4<f32> = u_xlat3;
  u_xlat3.x = dot(x_2399, vec3<f32>(x_2400.x, x_2400.y, x_2400.z));
  let x_2405 : f32 = u_xlat3.x;
  u_xlat11.x = (1.0f / -(x_2405));
  let x_2409 : vec2<f32> = u_xlat18;
  let x_2410 : vec3<f32> = u_xlat11;
  u_xlat18 = ((x_2409 * vec2<f32>(x_2410.x, x_2410.x)) + vec2<f32>(1.0f, 1.0f));
  let x_2414 : vec2<f32> = u_xlat18;
  u_xlat18 = (x_2414 * vec2<f32>(0.5f, 0.5f));
  let x_2416 : vec2<f32> = u_xlat18;
  u_xlat18 = clamp(x_2416, vec2<f32>(0.0f, 0.0f), vec2<f32>(1.0f, 1.0f));
  let x_2423 : vec2<f32> = u_xlat18;
  let x_2425 : f32 = x_33.x_GlobalMipBias.x;
  let x_2426 : vec4<f32> = textureSampleBias(x_CameraDepthTexture, sampler_CameraDepthTexture, x_2423, x_2425);
  u_xlat11.x = x_2426.x;
  let x_2430 : f32 = x_33.x_ZBufferParams.z;
  let x_2432 : f32 = u_xlat11.x;
  let x_2435 : f32 = x_33.x_ZBufferParams.w;
  u_xlat19 = ((x_2430 * x_2432) + x_2435);
  let x_2437 : f32 = u_xlat19;
  u_xlat19 = (1.0f / x_2437);
  let x_2439 : f32 = u_xlat19;
  let x_2442 : f32 = u_xlat3.x;
  u_xlat3.x = (-(x_2439) + -(x_2442));
  let x_2447 : f32 = u_xlat3.x;
  let x_2450 : f32 = x_33.x_SSAOParams.y;
  u_xlatb3.x = (abs(x_2447) < x_2450);
  let x_2454 : f32 = u_xlat11.x;
  u_xlatb3.y = (0.00001f < x_2454);
  let x_2458 : bool = u_xlatb3.x;
  u_xlat3.x = select(0.0f, 1.0f, x_2458);
  let x_2462 : bool = u_xlatb3.y;
  u_xlat3.y = select(0.0f, 1.0f, x_2462);
  let x_2466 : f32 = u_xlat3.y;
  let x_2468 : f32 = u_xlat3.x;
  u_xlat3.x = (x_2466 * x_2468);
  let x_2472 : f32 = u_xlat18.y;
  u_xlat26 = (-(x_2472) + 1.0f);
  let x_2475 : f32 = u_xlat19;
  let x_2477 : f32 = x_33.x_ProjectionParams2.x;
  u_xlat11.x = (x_2475 * x_2477);
  let x_2481 : vec4<f32> = x_33.x_CameraViewXExtent[0i];
  let x_2483 : vec2<f32> = u_xlat18;
  let x_2487 : vec4<f32> = x_33.x_CameraViewTopLeftCorner[0i];
  let x_2489 : vec3<f32> = ((vec3<f32>(x_2481.x, x_2481.y, x_2481.z) * vec3<f32>(x_2483.x, x_2483.x, x_2483.x)) + vec3<f32>(x_2487.x, x_2487.y, x_2487.z));
  let x_2490 : vec4<f32> = u_xlat5;
  u_xlat5 = vec4<f32>(x_2489.x, x_2489.y, x_2489.z, x_2490.w);
  let x_2493 : vec4<f32> = x_33.x_CameraViewYExtent[0i];
  let x_2495 : f32 = u_xlat26;
  let x_2498 : vec4<f32> = u_xlat5;
  let x_2500 : vec3<f32> = ((vec3<f32>(x_2493.x, x_2493.y, x_2493.z) * vec3<f32>(x_2495, x_2495, x_2495)) + vec3<f32>(x_2498.x, x_2498.y, x_2498.z));
  let x_2501 : vec4<f32> = u_xlat5;
  u_xlat5 = vec4<f32>(x_2500.x, x_2500.y, x_2500.z, x_2501.w);
  let x_2503 : vec4<f32> = u_xlat5;
  let x_2505 : vec3<f32> = u_xlat11;
  let x_2508 : vec3<f32> = u_xlat8;
  u_xlat11 = ((vec3<f32>(x_2503.x, x_2503.y, x_2503.z) * vec3<f32>(x_2505.x, x_2505.x, x_2505.x)) + -(x_2508));
  let x_2511 : vec3<f32> = u_xlat11;
  let x_2512 : vec4<f32> = u_xlat1;
  u_xlat18.x = dot(x_2511, vec3<f32>(x_2512.x, x_2512.y, x_2512.z));
  let x_2516 : f32 = u_xlat0;
  let x_2520 : f32 = u_xlat18.x;
  u_xlat18.x = ((-(x_2516) * 0.004f) + x_2520);
  let x_2524 : f32 = u_xlat18.x;
  u_xlat18.x = max(x_2524, 0.0f);
  let x_2527 : vec3<f32> = u_xlat11;
  let x_2528 : vec3<f32> = u_xlat11;
  u_xlat26 = dot(x_2527, x_2528);
  let x_2530 : f32 = u_xlat26;
  u_xlat26 = (x_2530 + 0.0001f);
  let x_2532 : f32 = u_xlat26;
  u_xlat26 = (1.0f / x_2532);
  let x_2534 : f32 = u_xlat26;
  let x_2536 : f32 = u_xlat18.x;
  u_xlat18.x = (x_2534 * x_2536);
  let x_2540 : f32 = u_xlat18.x;
  let x_2542 : f32 = u_xlat3.x;
  let x_2544 : f32 = u_xlat25;
  u_xlat25 = ((x_2540 * x_2542) + x_2544);
  let x_2546 : vec4<f32> = u_xlat2;
  let x_2549 : vec4<f32> = x_33.x_SSAOBlueNoiseParams;
  u_xlat3 = ((vec4<f32>(x_2546.x, x_2546.y, x_2546.x, x_2546.y) * vec4<f32>(x_2549.x, x_2549.y, x_2549.x, x_2549.y)) + vec4<f32>(0.583333373f, 0.583333373f, 0.666666687f, 0.666666687f));
  let x_2559 : vec4<f32> = u_xlat3;
  let x_2562 : f32 = x_33.x_GlobalMipBias.x;
  let x_2563 : vec4<f32> = textureSampleBias(x_BlueNoiseTexture, sampler_PointRepeat, vec2<f32>(x_2559.x, x_2559.y), x_2562);
  u_xlat18.x = x_2563.w;
  let x_2566 : vec2<f32> = u_xlat18;
  u_xlat18 = (vec2<f32>(x_2566.x, x_2566.x) + vec2<f32>(0.640625f, 0.74609375f));
  let x_2572 : f32 = u_xlat18.x;
  u_xlat18.x = fract(x_2572);
  let x_2576 : f32 = u_xlat18.x;
  u_xlat5.z = ((x_2576 * 2.0f) + -1.0f);
  let x_2581 : f32 = u_xlat18.y;
  u_xlat18.x = (x_2581 * 628.31854248f);
  let x_2585 : f32 = u_xlat5.z;
  let x_2588 : f32 = u_xlat5.z;
  u_xlat26 = ((-(x_2585) * x_2588) + 1.0f);
  let x_2591 : f32 = u_xlat26;
  u_xlat26 = sqrt(x_2591);
  let x_2594 : f32 = u_xlat18.x;
  u_xlat3.x = sin(x_2594);
  let x_2598 : f32 = u_xlat18.x;
  u_xlat6.x = cos(x_2598);
  let x_2601 : f32 = u_xlat26;
  let x_2603 : f32 = u_xlat6.x;
  u_xlat5.x = (x_2601 * x_2603);
  let x_2606 : f32 = u_xlat26;
  let x_2608 : f32 = u_xlat3.x;
  u_xlat5.y = (x_2606 * x_2608);
  let x_2611 : vec4<f32> = u_xlat1;
  let x_2613 : vec4<f32> = u_xlat5;
  u_xlat18.x = dot(vec3<f32>(x_2611.x, x_2611.y, x_2611.z), vec3<f32>(x_2613.x, x_2613.y, x_2613.z));
  let x_2618 : f32 = u_xlat18.x;
  u_xlatb18 = (x_2618 >= 0.0f);
  let x_2620 : bool = u_xlatb18;
  u_xlat18.x = select(-1.0f, 1.0f, x_2620);
  let x_2623 : vec2<f32> = u_xlat18;
  let x_2625 : vec4<f32> = u_xlat5;
  let x_2627 : vec3<f32> = (vec3<f32>(x_2623.x, x_2623.x, x_2623.x) * vec3<f32>(x_2625.x, x_2625.y, x_2625.z));
  let x_2628 : vec4<f32> = u_xlat5;
  u_xlat5 = vec4<f32>(x_2627.x, x_2627.y, x_2627.z, x_2628.w);
  let x_2630 : vec4<f32> = u_xlat5;
  let x_2633 : vec4<f32> = x_33.x_SSAOParams;
  let x_2635 : vec3<f32> = (vec3<f32>(x_2630.x, x_2630.y, x_2630.z) * vec3<f32>(x_2633.y, x_2633.y, x_2633.y));
  let x_2636 : vec4<f32> = u_xlat5;
  u_xlat5 = vec4<f32>(x_2635.x, x_2635.y, x_2635.z, x_2636.w);
  let x_2638 : vec4<f32> = u_xlat5;
  let x_2643 : vec3<f32> = u_xlat8;
  let x_2644 : vec3<f32> = ((vec3<f32>(x_2638.x, x_2638.y, x_2638.z) * vec3<f32>(0.40625003f, 0.40625003f, 0.40625003f)) + x_2643);
  let x_2645 : vec4<f32> = u_xlat5;
  u_xlat5 = vec4<f32>(x_2644.x, x_2644.y, x_2644.z, x_2645.w);
  let x_2647 : vec4<f32> = u_xlat5;
  let x_2650 : vec4<f32> = x_33.x_CameraViewProjections[0i][1i];
  u_xlat18 = (vec2<f32>(x_2647.y, x_2647.y) * vec2<f32>(x_2650.x, x_2650.y));
  let x_2654 : vec4<f32> = x_33.x_CameraViewProjections[0i][0i];
  let x_2656 : vec4<f32> = u_xlat5;
  let x_2659 : vec2<f32> = u_xlat18;
  u_xlat18 = ((vec2<f32>(x_2654.x, x_2654.y) * vec2<f32>(x_2656.x, x_2656.x)) + x_2659);
  let x_2662 : vec4<f32> = x_33.x_CameraViewProjections[0i][2i];
  let x_2664 : vec4<f32> = u_xlat5;
  let x_2667 : vec2<f32> = u_xlat18;
  u_xlat18 = ((vec2<f32>(x_2662.x, x_2662.y) * vec2<f32>(x_2664.z, x_2664.z)) + x_2667);
  let x_2669 : vec3<f32> = u_xlat4;
  let x_2670 : vec4<f32> = u_xlat5;
  u_xlat3.x = dot(x_2669, vec3<f32>(x_2670.x, x_2670.y, x_2670.z));
  let x_2675 : f32 = u_xlat3.x;
  u_xlat11.x = (1.0f / -(x_2675));
  let x_2679 : vec2<f32> = u_xlat18;
  let x_2680 : vec3<f32> = u_xlat11;
  u_xlat18 = ((x_2679 * vec2<f32>(x_2680.x, x_2680.x)) + vec2<f32>(1.0f, 1.0f));
  let x_2684 : vec2<f32> = u_xlat18;
  u_xlat18 = (x_2684 * vec2<f32>(0.5f, 0.5f));
  let x_2686 : vec2<f32> = u_xlat18;
  u_xlat18 = clamp(x_2686, vec2<f32>(0.0f, 0.0f), vec2<f32>(1.0f, 1.0f));
  let x_2693 : vec2<f32> = u_xlat18;
  let x_2695 : f32 = x_33.x_GlobalMipBias.x;
  let x_2696 : vec4<f32> = textureSampleBias(x_CameraDepthTexture, sampler_CameraDepthTexture, x_2693, x_2695);
  u_xlat11.x = x_2696.x;
  let x_2700 : f32 = x_33.x_ZBufferParams.z;
  let x_2702 : f32 = u_xlat11.x;
  let x_2705 : f32 = x_33.x_ZBufferParams.w;
  u_xlat28 = ((x_2700 * x_2702) + x_2705);
  let x_2707 : f32 = u_xlat28;
  u_xlat28 = (1.0f / x_2707);
  let x_2710 : f32 = u_xlat3.x;
  let x_2712 : f32 = u_xlat28;
  u_xlat3.x = (-(x_2710) + -(x_2712));
  let x_2717 : f32 = u_xlat3.x;
  let x_2720 : f32 = x_33.x_SSAOParams.y;
  u_xlatb3.x = (abs(x_2717) < x_2720);
  let x_2724 : f32 = u_xlat11.x;
  u_xlatb3.y = (0.00001f < x_2724);
  let x_2728 : bool = u_xlatb3.x;
  u_xlat3.x = select(0.0f, 1.0f, x_2728);
  let x_2732 : bool = u_xlatb3.y;
  u_xlat3.y = select(0.0f, 1.0f, x_2732);
  let x_2736 : f32 = u_xlat3.y;
  let x_2738 : f32 = u_xlat3.x;
  u_xlat3.x = (x_2736 * x_2738);
  let x_2742 : f32 = u_xlat18.y;
  u_xlat26 = (-(x_2742) + 1.0f);
  let x_2745 : f32 = u_xlat28;
  let x_2747 : f32 = x_33.x_ProjectionParams2.x;
  u_xlat11.x = (x_2745 * x_2747);
  let x_2751 : vec4<f32> = x_33.x_CameraViewXExtent[0i];
  let x_2753 : vec2<f32> = u_xlat18;
  let x_2757 : vec4<f32> = x_33.x_CameraViewTopLeftCorner[0i];
  let x_2759 : vec3<f32> = ((vec3<f32>(x_2751.x, x_2751.y, x_2751.z) * vec3<f32>(x_2753.x, x_2753.x, x_2753.x)) + vec3<f32>(x_2757.x, x_2757.y, x_2757.z));
  let x_2760 : vec4<f32> = u_xlat5;
  u_xlat5 = vec4<f32>(x_2759.x, x_2759.y, x_2759.z, x_2760.w);
  let x_2763 : vec4<f32> = x_33.x_CameraViewYExtent[0i];
  let x_2765 : f32 = u_xlat26;
  let x_2768 : vec4<f32> = u_xlat5;
  let x_2770 : vec3<f32> = ((vec3<f32>(x_2763.x, x_2763.y, x_2763.z) * vec3<f32>(x_2765, x_2765, x_2765)) + vec3<f32>(x_2768.x, x_2768.y, x_2768.z));
  let x_2771 : vec4<f32> = u_xlat5;
  u_xlat5 = vec4<f32>(x_2770.x, x_2770.y, x_2770.z, x_2771.w);
  let x_2773 : vec4<f32> = u_xlat5;
  let x_2775 : vec3<f32> = u_xlat11;
  let x_2778 : vec3<f32> = u_xlat8;
  let x_2780 : vec3<f32> = ((vec3<f32>(x_2773.x, x_2773.y, x_2773.z) * vec3<f32>(x_2775.x, x_2775.x, x_2775.x)) + -(x_2778));
  let x_2781 : vec4<f32> = u_xlat5;
  u_xlat5 = vec4<f32>(x_2780.x, x_2780.y, x_2780.z, x_2781.w);
  let x_2783 : vec4<f32> = u_xlat5;
  let x_2785 : vec4<f32> = u_xlat1;
  u_xlat18.x = dot(vec3<f32>(x_2783.x, x_2783.y, x_2783.z), vec3<f32>(x_2785.x, x_2785.y, x_2785.z));
  let x_2789 : f32 = u_xlat0;
  let x_2793 : f32 = u_xlat18.x;
  u_xlat18.x = ((-(x_2789) * 0.004f) + x_2793);
  let x_2797 : f32 = u_xlat18.x;
  u_xlat18.x = max(x_2797, 0.0f);
  let x_2800 : vec4<f32> = u_xlat5;
  let x_2802 : vec4<f32> = u_xlat5;
  u_xlat26 = dot(vec3<f32>(x_2800.x, x_2800.y, x_2800.z), vec3<f32>(x_2802.x, x_2802.y, x_2802.z));
  let x_2805 : f32 = u_xlat26;
  u_xlat26 = (x_2805 + 0.0001f);
  let x_2807 : f32 = u_xlat26;
  u_xlat26 = (1.0f / x_2807);
  let x_2809 : f32 = u_xlat26;
  let x_2811 : f32 = u_xlat18.x;
  u_xlat18.x = (x_2809 * x_2811);
  let x_2815 : f32 = u_xlat18.x;
  let x_2817 : f32 = u_xlat3.x;
  let x_2819 : f32 = u_xlat25;
  u_xlat25 = ((x_2815 * x_2817) + x_2819);
  let x_2824 : vec4<f32> = u_xlat3;
  let x_2827 : f32 = x_33.x_GlobalMipBias.x;
  let x_2828 : vec4<f32> = textureSampleBias(x_BlueNoiseTexture, sampler_PointRepeat, vec2<f32>(x_2824.z, x_2824.w), x_2827);
  u_xlat18.x = x_2828.w;
  let x_2831 : vec2<f32> = u_xlat18;
  u_xlat18 = (vec2<f32>(x_2831.x, x_2831.x) + vec2<f32>(0.359375f, 0.6796875f));
  let x_2838 : f32 = u_xlat18.x;
  u_xlat18.x = fract(x_2838);
  let x_2842 : f32 = u_xlat18.x;
  u_xlat3.z = ((x_2842 * 2.0f) + -1.0f);
  let x_2847 : f32 = u_xlat18.y;
  u_xlat18.x = (x_2847 * 628.31854248f);
  let x_2851 : f32 = u_xlat3.z;
  let x_2854 : f32 = u_xlat3.z;
  u_xlat26 = ((-(x_2851) * x_2854) + 1.0f);
  let x_2857 : f32 = u_xlat26;
  u_xlat26 = sqrt(x_2857);
  let x_2860 : f32 = u_xlat18.x;
  u_xlat5.x = sin(x_2860);
  let x_2864 : f32 = u_xlat18.x;
  u_xlat6.x = cos(x_2864);
  let x_2867 : f32 = u_xlat26;
  let x_2869 : f32 = u_xlat6.x;
  u_xlat3.x = (x_2867 * x_2869);
  let x_2872 : f32 = u_xlat26;
  let x_2874 : f32 = u_xlat5.x;
  u_xlat3.y = (x_2872 * x_2874);
  let x_2877 : vec4<f32> = u_xlat1;
  let x_2879 : vec4<f32> = u_xlat3;
  u_xlat18.x = dot(vec3<f32>(x_2877.x, x_2877.y, x_2877.z), vec3<f32>(x_2879.x, x_2879.y, x_2879.z));
  let x_2884 : f32 = u_xlat18.x;
  u_xlatb18 = (x_2884 >= 0.0f);
  let x_2886 : bool = u_xlatb18;
  u_xlat18.x = select(-1.0f, 1.0f, x_2886);
  let x_2889 : vec2<f32> = u_xlat18;
  let x_2891 : vec4<f32> = u_xlat3;
  let x_2893 : vec3<f32> = (vec3<f32>(x_2889.x, x_2889.x, x_2889.x) * vec3<f32>(x_2891.x, x_2891.y, x_2891.z));
  let x_2894 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_2893.x, x_2893.y, x_2893.z, x_2894.w);
  let x_2896 : vec4<f32> = u_xlat3;
  let x_2899 : vec4<f32> = x_33.x_SSAOParams;
  let x_2901 : vec3<f32> = (vec3<f32>(x_2896.x, x_2896.y, x_2896.z) * vec3<f32>(x_2899.y, x_2899.y, x_2899.y));
  let x_2902 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_2901.x, x_2901.y, x_2901.z, x_2902.w);
  let x_2904 : vec4<f32> = u_xlat3;
  let x_2908 : vec3<f32> = u_xlat8;
  let x_2909 : vec3<f32> = ((vec3<f32>(x_2904.x, x_2904.y, x_2904.z) * vec3<f32>(0.5f, 0.5f, 0.5f)) + x_2908);
  let x_2910 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_2909.x, x_2909.y, x_2909.z, x_2910.w);
  let x_2912 : vec4<f32> = u_xlat3;
  let x_2915 : vec4<f32> = x_33.x_CameraViewProjections[0i][1i];
  u_xlat18 = (vec2<f32>(x_2912.y, x_2912.y) * vec2<f32>(x_2915.x, x_2915.y));
  let x_2919 : vec4<f32> = x_33.x_CameraViewProjections[0i][0i];
  let x_2921 : vec4<f32> = u_xlat3;
  let x_2924 : vec2<f32> = u_xlat18;
  u_xlat18 = ((vec2<f32>(x_2919.x, x_2919.y) * vec2<f32>(x_2921.x, x_2921.x)) + x_2924);
  let x_2927 : vec4<f32> = x_33.x_CameraViewProjections[0i][2i];
  let x_2929 : vec4<f32> = u_xlat3;
  let x_2932 : vec2<f32> = u_xlat18;
  u_xlat18 = ((vec2<f32>(x_2927.x, x_2927.y) * vec2<f32>(x_2929.z, x_2929.z)) + x_2932);
  let x_2934 : vec3<f32> = u_xlat4;
  let x_2935 : vec4<f32> = u_xlat3;
  u_xlat3.x = dot(x_2934, vec3<f32>(x_2935.x, x_2935.y, x_2935.z));
  let x_2940 : f32 = u_xlat3.x;
  u_xlat11.x = (1.0f / -(x_2940));
  let x_2944 : vec2<f32> = u_xlat18;
  let x_2945 : vec3<f32> = u_xlat11;
  u_xlat18 = ((x_2944 * vec2<f32>(x_2945.x, x_2945.x)) + vec2<f32>(1.0f, 1.0f));
  let x_2949 : vec2<f32> = u_xlat18;
  u_xlat18 = (x_2949 * vec2<f32>(0.5f, 0.5f));
  let x_2951 : vec2<f32> = u_xlat18;
  u_xlat18 = clamp(x_2951, vec2<f32>(0.0f, 0.0f), vec2<f32>(1.0f, 1.0f));
  let x_2958 : vec2<f32> = u_xlat18;
  let x_2960 : f32 = x_33.x_GlobalMipBias.x;
  let x_2961 : vec4<f32> = textureSampleBias(x_CameraDepthTexture, sampler_CameraDepthTexture, x_2958, x_2960);
  u_xlat11.x = x_2961.x;
  let x_2965 : f32 = x_33.x_ZBufferParams.z;
  let x_2967 : f32 = u_xlat11.x;
  let x_2970 : f32 = x_33.x_ZBufferParams.w;
  u_xlat19 = ((x_2965 * x_2967) + x_2970);
  let x_2972 : f32 = u_xlat19;
  u_xlat19 = (1.0f / x_2972);
  let x_2974 : f32 = u_xlat19;
  let x_2977 : f32 = u_xlat3.x;
  u_xlat3.x = (-(x_2974) + -(x_2977));
  let x_2982 : f32 = u_xlat3.x;
  let x_2985 : f32 = x_33.x_SSAOParams.y;
  u_xlatb3.x = (abs(x_2982) < x_2985);
  let x_2989 : f32 = u_xlat11.x;
  u_xlatb3.y = (0.00001f < x_2989);
  let x_2993 : bool = u_xlatb3.x;
  u_xlat3.x = select(0.0f, 1.0f, x_2993);
  let x_2997 : bool = u_xlatb3.y;
  u_xlat3.y = select(0.0f, 1.0f, x_2997);
  let x_3001 : f32 = u_xlat3.y;
  let x_3003 : f32 = u_xlat3.x;
  u_xlat3.x = (x_3001 * x_3003);
  let x_3007 : f32 = u_xlat18.y;
  u_xlat26 = (-(x_3007) + 1.0f);
  let x_3010 : f32 = u_xlat19;
  let x_3012 : f32 = x_33.x_ProjectionParams2.x;
  u_xlat11.x = (x_3010 * x_3012);
  let x_3016 : vec4<f32> = x_33.x_CameraViewXExtent[0i];
  let x_3018 : vec2<f32> = u_xlat18;
  let x_3022 : vec4<f32> = x_33.x_CameraViewTopLeftCorner[0i];
  let x_3024 : vec3<f32> = ((vec3<f32>(x_3016.x, x_3016.y, x_3016.z) * vec3<f32>(x_3018.x, x_3018.x, x_3018.x)) + vec3<f32>(x_3022.x, x_3022.y, x_3022.z));
  let x_3025 : vec4<f32> = u_xlat5;
  u_xlat5 = vec4<f32>(x_3024.x, x_3024.y, x_3024.z, x_3025.w);
  let x_3028 : vec4<f32> = x_33.x_CameraViewYExtent[0i];
  let x_3030 : f32 = u_xlat26;
  let x_3033 : vec4<f32> = u_xlat5;
  let x_3035 : vec3<f32> = ((vec3<f32>(x_3028.x, x_3028.y, x_3028.z) * vec3<f32>(x_3030, x_3030, x_3030)) + vec3<f32>(x_3033.x, x_3033.y, x_3033.z));
  let x_3036 : vec4<f32> = u_xlat5;
  u_xlat5 = vec4<f32>(x_3035.x, x_3035.y, x_3035.z, x_3036.w);
  let x_3038 : vec4<f32> = u_xlat5;
  let x_3040 : vec3<f32> = u_xlat11;
  let x_3043 : vec3<f32> = u_xlat8;
  u_xlat11 = ((vec3<f32>(x_3038.x, x_3038.y, x_3038.z) * vec3<f32>(x_3040.x, x_3040.x, x_3040.x)) + -(x_3043));
  let x_3046 : vec3<f32> = u_xlat11;
  let x_3047 : vec4<f32> = u_xlat1;
  u_xlat18.x = dot(x_3046, vec3<f32>(x_3047.x, x_3047.y, x_3047.z));
  let x_3051 : f32 = u_xlat0;
  let x_3055 : f32 = u_xlat18.x;
  u_xlat18.x = ((-(x_3051) * 0.004f) + x_3055);
  let x_3059 : f32 = u_xlat18.x;
  u_xlat18.x = max(x_3059, 0.0f);
  let x_3062 : vec3<f32> = u_xlat11;
  let x_3063 : vec3<f32> = u_xlat11;
  u_xlat26 = dot(x_3062, x_3063);
  let x_3065 : f32 = u_xlat26;
  u_xlat26 = (x_3065 + 0.0001f);
  let x_3067 : f32 = u_xlat26;
  u_xlat26 = (1.0f / x_3067);
  let x_3069 : f32 = u_xlat26;
  let x_3071 : f32 = u_xlat18.x;
  u_xlat18.x = (x_3069 * x_3071);
  let x_3075 : f32 = u_xlat18.x;
  let x_3077 : f32 = u_xlat3.x;
  let x_3079 : f32 = u_xlat25;
  u_xlat25 = ((x_3075 * x_3077) + x_3079);
  let x_3081 : vec4<f32> = u_xlat2;
  let x_3084 : vec4<f32> = x_33.x_SSAOBlueNoiseParams;
  u_xlat3 = ((vec4<f32>(x_3081.x, x_3081.y, x_3081.x, x_3081.y) * vec4<f32>(x_3084.x, x_3084.y, x_3084.x, x_3084.y)) + vec4<f32>(0.75f, 0.75f, 0.833333373f, 0.833333373f));
  let x_3094 : vec4<f32> = u_xlat3;
  let x_3097 : f32 = x_33.x_GlobalMipBias.x;
  let x_3098 : vec4<f32> = textureSampleBias(x_BlueNoiseTexture, sampler_PointRepeat, vec2<f32>(x_3094.x, x_3094.y), x_3097);
  u_xlat18.x = x_3098.w;
  let x_3101 : vec2<f32> = u_xlat18;
  u_xlat18 = (vec2<f32>(x_3101.x, x_3101.x) + vec2<f32>(0.5078125f, 0.3515625f));
  let x_3108 : f32 = u_xlat18.x;
  u_xlat18.x = fract(x_3108);
  let x_3112 : f32 = u_xlat18.x;
  u_xlat5.z = ((x_3112 * 2.0f) + -1.0f);
  let x_3117 : f32 = u_xlat18.y;
  u_xlat18.x = (x_3117 * 628.31854248f);
  let x_3121 : f32 = u_xlat5.z;
  let x_3124 : f32 = u_xlat5.z;
  u_xlat26 = ((-(x_3121) * x_3124) + 1.0f);
  let x_3127 : f32 = u_xlat26;
  u_xlat26 = sqrt(x_3127);
  let x_3130 : f32 = u_xlat18.x;
  u_xlat3.x = sin(x_3130);
  let x_3134 : f32 = u_xlat18.x;
  u_xlat6.x = cos(x_3134);
  let x_3137 : f32 = u_xlat26;
  let x_3139 : f32 = u_xlat6.x;
  u_xlat5.x = (x_3137 * x_3139);
  let x_3142 : f32 = u_xlat26;
  let x_3144 : f32 = u_xlat3.x;
  u_xlat5.y = (x_3142 * x_3144);
  let x_3147 : vec4<f32> = u_xlat1;
  let x_3149 : vec4<f32> = u_xlat5;
  u_xlat18.x = dot(vec3<f32>(x_3147.x, x_3147.y, x_3147.z), vec3<f32>(x_3149.x, x_3149.y, x_3149.z));
  let x_3154 : f32 = u_xlat18.x;
  u_xlatb18 = (x_3154 >= 0.0f);
  let x_3156 : bool = u_xlatb18;
  u_xlat18.x = select(-1.0f, 1.0f, x_3156);
  let x_3159 : vec2<f32> = u_xlat18;
  let x_3161 : vec4<f32> = u_xlat5;
  let x_3163 : vec3<f32> = (vec3<f32>(x_3159.x, x_3159.x, x_3159.x) * vec3<f32>(x_3161.x, x_3161.y, x_3161.z));
  let x_3164 : vec4<f32> = u_xlat5;
  u_xlat5 = vec4<f32>(x_3163.x, x_3163.y, x_3163.z, x_3164.w);
  let x_3166 : vec4<f32> = u_xlat5;
  let x_3169 : vec4<f32> = x_33.x_SSAOParams;
  let x_3171 : vec3<f32> = (vec3<f32>(x_3166.x, x_3166.y, x_3166.z) * vec3<f32>(x_3169.y, x_3169.y, x_3169.y));
  let x_3172 : vec4<f32> = u_xlat5;
  u_xlat5 = vec4<f32>(x_3171.x, x_3171.y, x_3171.z, x_3172.w);
  let x_3174 : vec4<f32> = u_xlat5;
  let x_3179 : vec3<f32> = u_xlat8;
  let x_3180 : vec3<f32> = ((vec3<f32>(x_3174.x, x_3174.y, x_3174.z) * vec3<f32>(0.606249988f, 0.606249988f, 0.606249988f)) + x_3179);
  let x_3181 : vec4<f32> = u_xlat5;
  u_xlat5 = vec4<f32>(x_3180.x, x_3180.y, x_3180.z, x_3181.w);
  let x_3183 : vec4<f32> = u_xlat5;
  let x_3186 : vec4<f32> = x_33.x_CameraViewProjections[0i][1i];
  u_xlat18 = (vec2<f32>(x_3183.y, x_3183.y) * vec2<f32>(x_3186.x, x_3186.y));
  let x_3190 : vec4<f32> = x_33.x_CameraViewProjections[0i][0i];
  let x_3192 : vec4<f32> = u_xlat5;
  let x_3195 : vec2<f32> = u_xlat18;
  u_xlat18 = ((vec2<f32>(x_3190.x, x_3190.y) * vec2<f32>(x_3192.x, x_3192.x)) + x_3195);
  let x_3198 : vec4<f32> = x_33.x_CameraViewProjections[0i][2i];
  let x_3200 : vec4<f32> = u_xlat5;
  let x_3203 : vec2<f32> = u_xlat18;
  u_xlat18 = ((vec2<f32>(x_3198.x, x_3198.y) * vec2<f32>(x_3200.z, x_3200.z)) + x_3203);
  let x_3205 : vec3<f32> = u_xlat4;
  let x_3206 : vec4<f32> = u_xlat5;
  u_xlat3.x = dot(x_3205, vec3<f32>(x_3206.x, x_3206.y, x_3206.z));
  let x_3211 : f32 = u_xlat3.x;
  u_xlat11.x = (1.0f / -(x_3211));
  let x_3215 : vec2<f32> = u_xlat18;
  let x_3216 : vec3<f32> = u_xlat11;
  u_xlat18 = ((x_3215 * vec2<f32>(x_3216.x, x_3216.x)) + vec2<f32>(1.0f, 1.0f));
  let x_3220 : vec2<f32> = u_xlat18;
  u_xlat18 = (x_3220 * vec2<f32>(0.5f, 0.5f));
  let x_3222 : vec2<f32> = u_xlat18;
  u_xlat18 = clamp(x_3222, vec2<f32>(0.0f, 0.0f), vec2<f32>(1.0f, 1.0f));
  let x_3229 : vec2<f32> = u_xlat18;
  let x_3231 : f32 = x_33.x_GlobalMipBias.x;
  let x_3232 : vec4<f32> = textureSampleBias(x_CameraDepthTexture, sampler_CameraDepthTexture, x_3229, x_3231);
  u_xlat11.x = x_3232.x;
  let x_3236 : f32 = x_33.x_ZBufferParams.z;
  let x_3238 : f32 = u_xlat11.x;
  let x_3241 : f32 = x_33.x_ZBufferParams.w;
  u_xlat28 = ((x_3236 * x_3238) + x_3241);
  let x_3243 : f32 = u_xlat28;
  u_xlat28 = (1.0f / x_3243);
  let x_3246 : f32 = u_xlat3.x;
  let x_3248 : f32 = u_xlat28;
  u_xlat3.x = (-(x_3246) + -(x_3248));
  let x_3253 : f32 = u_xlat3.x;
  let x_3256 : f32 = x_33.x_SSAOParams.y;
  u_xlatb3.x = (abs(x_3253) < x_3256);
  let x_3260 : f32 = u_xlat11.x;
  u_xlatb3.y = (0.00001f < x_3260);
  let x_3264 : bool = u_xlatb3.x;
  u_xlat3.x = select(0.0f, 1.0f, x_3264);
  let x_3268 : bool = u_xlatb3.y;
  u_xlat3.y = select(0.0f, 1.0f, x_3268);
  let x_3272 : f32 = u_xlat3.y;
  let x_3274 : f32 = u_xlat3.x;
  u_xlat3.x = (x_3272 * x_3274);
  let x_3278 : f32 = u_xlat18.y;
  u_xlat26 = (-(x_3278) + 1.0f);
  let x_3281 : f32 = u_xlat28;
  let x_3283 : f32 = x_33.x_ProjectionParams2.x;
  u_xlat11.x = (x_3281 * x_3283);
  let x_3287 : vec4<f32> = x_33.x_CameraViewXExtent[0i];
  let x_3289 : vec2<f32> = u_xlat18;
  let x_3293 : vec4<f32> = x_33.x_CameraViewTopLeftCorner[0i];
  let x_3295 : vec3<f32> = ((vec3<f32>(x_3287.x, x_3287.y, x_3287.z) * vec3<f32>(x_3289.x, x_3289.x, x_3289.x)) + vec3<f32>(x_3293.x, x_3293.y, x_3293.z));
  let x_3296 : vec4<f32> = u_xlat5;
  u_xlat5 = vec4<f32>(x_3295.x, x_3295.y, x_3295.z, x_3296.w);
  let x_3299 : vec4<f32> = x_33.x_CameraViewYExtent[0i];
  let x_3301 : f32 = u_xlat26;
  let x_3304 : vec4<f32> = u_xlat5;
  let x_3306 : vec3<f32> = ((vec3<f32>(x_3299.x, x_3299.y, x_3299.z) * vec3<f32>(x_3301, x_3301, x_3301)) + vec3<f32>(x_3304.x, x_3304.y, x_3304.z));
  let x_3307 : vec4<f32> = u_xlat5;
  u_xlat5 = vec4<f32>(x_3306.x, x_3306.y, x_3306.z, x_3307.w);
  let x_3309 : vec4<f32> = u_xlat5;
  let x_3311 : vec3<f32> = u_xlat11;
  let x_3314 : vec3<f32> = u_xlat8;
  let x_3316 : vec3<f32> = ((vec3<f32>(x_3309.x, x_3309.y, x_3309.z) * vec3<f32>(x_3311.x, x_3311.x, x_3311.x)) + -(x_3314));
  let x_3317 : vec4<f32> = u_xlat5;
  u_xlat5 = vec4<f32>(x_3316.x, x_3316.y, x_3316.z, x_3317.w);
  let x_3319 : vec4<f32> = u_xlat5;
  let x_3321 : vec4<f32> = u_xlat1;
  u_xlat18.x = dot(vec3<f32>(x_3319.x, x_3319.y, x_3319.z), vec3<f32>(x_3321.x, x_3321.y, x_3321.z));
  let x_3325 : f32 = u_xlat0;
  let x_3329 : f32 = u_xlat18.x;
  u_xlat18.x = ((-(x_3325) * 0.004f) + x_3329);
  let x_3333 : f32 = u_xlat18.x;
  u_xlat18.x = max(x_3333, 0.0f);
  let x_3336 : vec4<f32> = u_xlat5;
  let x_3338 : vec4<f32> = u_xlat5;
  u_xlat26 = dot(vec3<f32>(x_3336.x, x_3336.y, x_3336.z), vec3<f32>(x_3338.x, x_3338.y, x_3338.z));
  let x_3341 : f32 = u_xlat26;
  u_xlat26 = (x_3341 + 0.0001f);
  let x_3343 : f32 = u_xlat26;
  u_xlat26 = (1.0f / x_3343);
  let x_3345 : f32 = u_xlat26;
  let x_3347 : f32 = u_xlat18.x;
  u_xlat18.x = (x_3345 * x_3347);
  let x_3351 : f32 = u_xlat18.x;
  let x_3353 : f32 = u_xlat3.x;
  let x_3355 : f32 = u_xlat25;
  u_xlat25 = ((x_3351 * x_3353) + x_3355);
  let x_3360 : vec4<f32> = u_xlat3;
  let x_3363 : f32 = x_33.x_GlobalMipBias.x;
  let x_3364 : vec4<f32> = textureSampleBias(x_BlueNoiseTexture, sampler_PointRepeat, vec2<f32>(x_3360.z, x_3360.w), x_3363);
  u_xlat18.x = x_3364.w;
  let x_3367 : vec2<f32> = u_xlat18;
  u_xlat18 = (vec2<f32>(x_3367.x, x_3367.x) + vec2<f32>(0.3828125f, 0.4921875f));
  let x_3374 : f32 = u_xlat18.x;
  u_xlat18.x = fract(x_3374);
  let x_3378 : f32 = u_xlat18.x;
  u_xlat3.z = ((x_3378 * 2.0f) + -1.0f);
  let x_3383 : f32 = u_xlat18.y;
  u_xlat18.x = (x_3383 * 628.31854248f);
  let x_3387 : f32 = u_xlat3.z;
  let x_3390 : f32 = u_xlat3.z;
  u_xlat26 = ((-(x_3387) * x_3390) + 1.0f);
  let x_3393 : f32 = u_xlat26;
  u_xlat26 = sqrt(x_3393);
  let x_3396 : f32 = u_xlat18.x;
  u_xlat5.x = sin(x_3396);
  let x_3400 : f32 = u_xlat18.x;
  u_xlat6.x = cos(x_3400);
  let x_3403 : f32 = u_xlat26;
  let x_3405 : f32 = u_xlat6.x;
  u_xlat3.x = (x_3403 * x_3405);
  let x_3408 : f32 = u_xlat26;
  let x_3410 : f32 = u_xlat5.x;
  u_xlat3.y = (x_3408 * x_3410);
  let x_3413 : vec4<f32> = u_xlat1;
  let x_3415 : vec4<f32> = u_xlat3;
  u_xlat18.x = dot(vec3<f32>(x_3413.x, x_3413.y, x_3413.z), vec3<f32>(x_3415.x, x_3415.y, x_3415.z));
  let x_3420 : f32 = u_xlat18.x;
  u_xlatb18 = (x_3420 >= 0.0f);
  let x_3422 : bool = u_xlatb18;
  u_xlat18.x = select(-1.0f, 1.0f, x_3422);
  let x_3425 : vec2<f32> = u_xlat18;
  let x_3427 : vec4<f32> = u_xlat3;
  let x_3429 : vec3<f32> = (vec3<f32>(x_3425.x, x_3425.x, x_3425.x) * vec3<f32>(x_3427.x, x_3427.y, x_3427.z));
  let x_3430 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_3429.x, x_3429.y, x_3429.z, x_3430.w);
  let x_3432 : vec4<f32> = u_xlat3;
  let x_3435 : vec4<f32> = x_33.x_SSAOParams;
  let x_3437 : vec3<f32> = (vec3<f32>(x_3432.x, x_3432.y, x_3432.z) * vec3<f32>(x_3435.y, x_3435.y, x_3435.y));
  let x_3438 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_3437.x, x_3437.y, x_3437.z, x_3438.w);
  let x_3440 : vec4<f32> = u_xlat3;
  let x_3445 : vec3<f32> = u_xlat8;
  let x_3446 : vec3<f32> = ((vec3<f32>(x_3440.x, x_3440.y, x_3440.z) * vec3<f32>(0.725000083f, 0.725000083f, 0.725000083f)) + x_3445);
  let x_3447 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_3446.x, x_3446.y, x_3446.z, x_3447.w);
  let x_3449 : vec4<f32> = u_xlat3;
  let x_3452 : vec4<f32> = x_33.x_CameraViewProjections[0i][1i];
  u_xlat18 = (vec2<f32>(x_3449.y, x_3449.y) * vec2<f32>(x_3452.x, x_3452.y));
  let x_3456 : vec4<f32> = x_33.x_CameraViewProjections[0i][0i];
  let x_3458 : vec4<f32> = u_xlat3;
  let x_3461 : vec2<f32> = u_xlat18;
  u_xlat18 = ((vec2<f32>(x_3456.x, x_3456.y) * vec2<f32>(x_3458.x, x_3458.x)) + x_3461);
  let x_3464 : vec4<f32> = x_33.x_CameraViewProjections[0i][2i];
  let x_3466 : vec4<f32> = u_xlat3;
  let x_3469 : vec2<f32> = u_xlat18;
  u_xlat18 = ((vec2<f32>(x_3464.x, x_3464.y) * vec2<f32>(x_3466.z, x_3466.z)) + x_3469);
  let x_3471 : vec3<f32> = u_xlat4;
  let x_3472 : vec4<f32> = u_xlat3;
  u_xlat3.x = dot(x_3471, vec3<f32>(x_3472.x, x_3472.y, x_3472.z));
  let x_3477 : f32 = u_xlat3.x;
  u_xlat11.x = (1.0f / -(x_3477));
  let x_3481 : vec2<f32> = u_xlat18;
  let x_3482 : vec3<f32> = u_xlat11;
  u_xlat18 = ((x_3481 * vec2<f32>(x_3482.x, x_3482.x)) + vec2<f32>(1.0f, 1.0f));
  let x_3486 : vec2<f32> = u_xlat18;
  u_xlat18 = (x_3486 * vec2<f32>(0.5f, 0.5f));
  let x_3488 : vec2<f32> = u_xlat18;
  u_xlat18 = clamp(x_3488, vec2<f32>(0.0f, 0.0f), vec2<f32>(1.0f, 1.0f));
  let x_3495 : vec2<f32> = u_xlat18;
  let x_3497 : f32 = x_33.x_GlobalMipBias.x;
  let x_3498 : vec4<f32> = textureSampleBias(x_CameraDepthTexture, sampler_CameraDepthTexture, x_3495, x_3497);
  u_xlat11.x = x_3498.x;
  let x_3502 : f32 = x_33.x_ZBufferParams.z;
  let x_3504 : f32 = u_xlat11.x;
  let x_3507 : f32 = x_33.x_ZBufferParams.w;
  u_xlat19 = ((x_3502 * x_3504) + x_3507);
  let x_3509 : f32 = u_xlat19;
  u_xlat19 = (1.0f / x_3509);
  let x_3511 : f32 = u_xlat19;
  let x_3514 : f32 = u_xlat3.x;
  u_xlat3.x = (-(x_3511) + -(x_3514));
  let x_3519 : f32 = u_xlat3.x;
  let x_3522 : f32 = x_33.x_SSAOParams.y;
  u_xlatb3.x = (abs(x_3519) < x_3522);
  let x_3526 : f32 = u_xlat11.x;
  u_xlatb3.y = (0.00001f < x_3526);
  let x_3530 : bool = u_xlatb3.x;
  u_xlat3.x = select(0.0f, 1.0f, x_3530);
  let x_3534 : bool = u_xlatb3.y;
  u_xlat3.y = select(0.0f, 1.0f, x_3534);
  let x_3538 : f32 = u_xlat3.y;
  let x_3540 : f32 = u_xlat3.x;
  u_xlat3.x = (x_3538 * x_3540);
  let x_3544 : f32 = u_xlat18.y;
  u_xlat26 = (-(x_3544) + 1.0f);
  let x_3547 : f32 = u_xlat19;
  let x_3549 : f32 = x_33.x_ProjectionParams2.x;
  u_xlat11.x = (x_3547 * x_3549);
  let x_3553 : vec4<f32> = x_33.x_CameraViewXExtent[0i];
  let x_3555 : vec2<f32> = u_xlat18;
  let x_3559 : vec4<f32> = x_33.x_CameraViewTopLeftCorner[0i];
  let x_3561 : vec3<f32> = ((vec3<f32>(x_3553.x, x_3553.y, x_3553.z) * vec3<f32>(x_3555.x, x_3555.x, x_3555.x)) + vec3<f32>(x_3559.x, x_3559.y, x_3559.z));
  let x_3562 : vec4<f32> = u_xlat5;
  u_xlat5 = vec4<f32>(x_3561.x, x_3561.y, x_3561.z, x_3562.w);
  let x_3565 : vec4<f32> = x_33.x_CameraViewYExtent[0i];
  let x_3567 : f32 = u_xlat26;
  let x_3570 : vec4<f32> = u_xlat5;
  let x_3572 : vec3<f32> = ((vec3<f32>(x_3565.x, x_3565.y, x_3565.z) * vec3<f32>(x_3567, x_3567, x_3567)) + vec3<f32>(x_3570.x, x_3570.y, x_3570.z));
  let x_3573 : vec4<f32> = u_xlat5;
  u_xlat5 = vec4<f32>(x_3572.x, x_3572.y, x_3572.z, x_3573.w);
  let x_3575 : vec4<f32> = u_xlat5;
  let x_3577 : vec3<f32> = u_xlat11;
  let x_3580 : vec3<f32> = u_xlat8;
  u_xlat11 = ((vec3<f32>(x_3575.x, x_3575.y, x_3575.z) * vec3<f32>(x_3577.x, x_3577.x, x_3577.x)) + -(x_3580));
  let x_3583 : vec3<f32> = u_xlat11;
  let x_3584 : vec4<f32> = u_xlat1;
  u_xlat18.x = dot(x_3583, vec3<f32>(x_3584.x, x_3584.y, x_3584.z));
  let x_3588 : f32 = u_xlat0;
  let x_3592 : f32 = u_xlat18.x;
  u_xlat18.x = ((-(x_3588) * 0.004f) + x_3592);
  let x_3596 : f32 = u_xlat18.x;
  u_xlat18.x = max(x_3596, 0.0f);
  let x_3599 : vec3<f32> = u_xlat11;
  let x_3600 : vec3<f32> = u_xlat11;
  u_xlat26 = dot(x_3599, x_3600);
  let x_3602 : f32 = u_xlat26;
  u_xlat26 = (x_3602 + 0.0001f);
  let x_3604 : f32 = u_xlat26;
  u_xlat26 = (1.0f / x_3604);
  let x_3606 : f32 = u_xlat26;
  let x_3608 : f32 = u_xlat18.x;
  u_xlat18.x = (x_3606 * x_3608);
  let x_3612 : f32 = u_xlat18.x;
  let x_3614 : f32 = u_xlat3.x;
  let x_3616 : f32 = u_xlat25;
  u_xlat25 = ((x_3612 * x_3614) + x_3616);
  let x_3618 : vec4<f32> = u_xlat2;
  let x_3621 : vec4<f32> = x_33.x_SSAOBlueNoiseParams;
  let x_3626 : vec2<f32> = ((vec2<f32>(x_3618.x, x_3618.y) * vec2<f32>(x_3621.x, x_3621.y)) + vec2<f32>(0.916666687f, 0.916666687f));
  let x_3627 : vec4<f32> = u_xlat2;
  u_xlat2 = vec4<f32>(x_3626.x, x_3626.y, x_3627.z, x_3627.w);
  let x_3632 : vec4<f32> = u_xlat2;
  let x_3635 : f32 = x_33.x_GlobalMipBias.x;
  let x_3636 : vec4<f32> = textureSampleBias(x_BlueNoiseTexture, sampler_PointRepeat, vec2<f32>(x_3632.x, x_3632.y), x_3635);
  u_xlat2.x = x_3636.w;
  let x_3639 : vec4<f32> = u_xlat2;
  let x_3642 : vec2<f32> = (vec2<f32>(x_3639.x, x_3639.x) + vec2<f32>(0.984375f, 0.125f));
  let x_3643 : vec4<f32> = u_xlat2;
  u_xlat2 = vec4<f32>(x_3642.x, x_3642.y, x_3643.z, x_3643.w);
  let x_3646 : f32 = u_xlat2.x;
  u_xlat2.x = fract(x_3646);
  let x_3650 : f32 = u_xlat2.x;
  u_xlat3.z = ((x_3650 * 2.0f) + -1.0f);
  let x_3655 : f32 = u_xlat2.y;
  u_xlat2.x = (x_3655 * 628.31854248f);
  let x_3659 : f32 = u_xlat3.z;
  let x_3662 : f32 = u_xlat3.z;
  u_xlat10.x = ((-(x_3659) * x_3662) + 1.0f);
  let x_3667 : f32 = u_xlat10.x;
  u_xlat10.x = sqrt(x_3667);
  let x_3671 : f32 = u_xlat2.x;
  u_xlat5.x = cos(x_3671);
  let x_3675 : f32 = u_xlat2.x;
  u_xlat2.x = sin(x_3675);
  let x_3679 : f32 = u_xlat10.x;
  let x_3681 : f32 = u_xlat5.x;
  u_xlat3.x = (x_3679 * x_3681);
  let x_3685 : f32 = u_xlat2.x;
  let x_3687 : f32 = u_xlat10.x;
  u_xlat3.y = (x_3685 * x_3687);
  let x_3690 : vec4<f32> = u_xlat1;
  let x_3692 : vec4<f32> = u_xlat3;
  u_xlat2.x = dot(vec3<f32>(x_3690.x, x_3690.y, x_3690.z), vec3<f32>(x_3692.x, x_3692.y, x_3692.z));
  let x_3697 : f32 = u_xlat2.x;
  u_xlatb2.x = (x_3697 >= 0.0f);
  let x_3701 : bool = u_xlatb2.x;
  u_xlat2.x = select(-1.0f, 1.0f, x_3701);
  let x_3704 : vec4<f32> = u_xlat2;
  let x_3706 : vec4<f32> = u_xlat3;
  let x_3708 : vec3<f32> = (vec3<f32>(x_3704.x, x_3704.x, x_3704.x) * vec3<f32>(x_3706.x, x_3706.y, x_3706.z));
  let x_3709 : vec4<f32> = u_xlat2;
  u_xlat2 = vec4<f32>(x_3708.x, x_3708.y, x_3708.z, x_3709.w);
  let x_3711 : vec4<f32> = u_xlat2;
  let x_3714 : vec4<f32> = x_33.x_SSAOParams;
  let x_3716 : vec3<f32> = (vec3<f32>(x_3711.x, x_3711.y, x_3711.z) * vec3<f32>(x_3714.y, x_3714.y, x_3714.y));
  let x_3717 : vec4<f32> = u_xlat2;
  u_xlat2 = vec4<f32>(x_3716.x, x_3716.y, x_3716.z, x_3717.w);
  let x_3719 : vec4<f32> = u_xlat2;
  let x_3724 : vec3<f32> = u_xlat8;
  let x_3725 : vec3<f32> = ((vec3<f32>(x_3719.x, x_3719.y, x_3719.z) * vec3<f32>(0.856249988f, 0.856249988f, 0.856249988f)) + x_3724);
  let x_3726 : vec4<f32> = u_xlat2;
  u_xlat2 = vec4<f32>(x_3725.x, x_3725.y, x_3725.z, x_3726.w);
  let x_3728 : vec4<f32> = u_xlat2;
  let x_3731 : vec4<f32> = x_33.x_CameraViewProjections[0i][1i];
  let x_3733 : vec2<f32> = (vec2<f32>(x_3728.y, x_3728.y) * vec2<f32>(x_3731.x, x_3731.y));
  let x_3734 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_3733.x, x_3733.y, x_3734.z, x_3734.w);
  let x_3737 : vec4<f32> = x_33.x_CameraViewProjections[0i][0i];
  let x_3739 : vec4<f32> = u_xlat2;
  let x_3742 : vec4<f32> = u_xlat3;
  let x_3744 : vec2<f32> = ((vec2<f32>(x_3737.x, x_3737.y) * vec2<f32>(x_3739.x, x_3739.x)) + vec2<f32>(x_3742.x, x_3742.y));
  let x_3745 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_3744.x, x_3744.y, x_3745.z, x_3745.w);
  let x_3748 : vec4<f32> = x_33.x_CameraViewProjections[0i][2i];
  let x_3750 : vec4<f32> = u_xlat2;
  let x_3753 : vec4<f32> = u_xlat3;
  let x_3755 : vec2<f32> = ((vec2<f32>(x_3748.x, x_3748.y) * vec2<f32>(x_3750.z, x_3750.z)) + vec2<f32>(x_3753.x, x_3753.y));
  let x_3756 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_3755.x, x_3755.y, x_3756.z, x_3756.w);
  let x_3758 : vec3<f32> = u_xlat4;
  let x_3759 : vec4<f32> = u_xlat2;
  u_xlat2.x = dot(x_3758, vec3<f32>(x_3759.x, x_3759.y, x_3759.z));
  let x_3764 : f32 = u_xlat2.x;
  u_xlat10.x = (1.0f / -(x_3764));
  let x_3768 : vec4<f32> = u_xlat3;
  let x_3770 : vec3<f32> = u_xlat10;
  let x_3773 : vec2<f32> = ((vec2<f32>(x_3768.x, x_3768.y) * vec2<f32>(x_3770.x, x_3770.x)) + vec2<f32>(1.0f, 1.0f));
  let x_3774 : vec3<f32> = u_xlat10;
  u_xlat10 = vec3<f32>(x_3773.x, x_3773.y, x_3774.z);
  let x_3776 : vec3<f32> = u_xlat10;
  let x_3778 : vec2<f32> = (vec2<f32>(x_3776.x, x_3776.y) * vec2<f32>(0.5f, 0.5f));
  let x_3779 : vec3<f32> = u_xlat10;
  u_xlat10 = vec3<f32>(x_3778.x, x_3778.y, x_3779.z);
  let x_3781 : vec3<f32> = u_xlat10;
  let x_3785 : vec2<f32> = clamp(vec2<f32>(x_3781.x, x_3781.y), vec2<f32>(0.0f, 0.0f), vec2<f32>(1.0f, 1.0f));
  let x_3786 : vec3<f32> = u_xlat10;
  u_xlat10 = vec3<f32>(x_3785.x, x_3785.y, x_3786.z);
  let x_3791 : vec3<f32> = u_xlat10;
  let x_3794 : f32 = x_33.x_GlobalMipBias.x;
  let x_3795 : vec4<f32> = textureSampleBias(x_CameraDepthTexture, sampler_CameraDepthTexture, vec2<f32>(x_3791.x, x_3791.y), x_3794);
  u_xlat26 = x_3795.x;
  let x_3798 : f32 = x_33.x_ZBufferParams.z;
  let x_3799 : f32 = u_xlat26;
  let x_3802 : f32 = x_33.x_ZBufferParams.w;
  u_xlat3.x = ((x_3798 * x_3799) + x_3802);
  let x_3806 : f32 = u_xlat3.x;
  u_xlat3.x = (1.0f / x_3806);
  let x_3810 : f32 = u_xlat2.x;
  let x_3813 : f32 = u_xlat3.x;
  u_xlat2.x = (-(x_3810) + -(x_3813));
  let x_3818 : f32 = u_xlat2.x;
  let x_3821 : f32 = x_33.x_SSAOParams.y;
  u_xlatb2.x = (abs(x_3818) < x_3821);
  let x_3824 : f32 = u_xlat26;
  u_xlatb2.w = (0.00001f < x_3824);
  let x_3828 : bool = u_xlatb2.x;
  u_xlat2.x = select(0.0f, 1.0f, x_3828);
  let x_3832 : bool = u_xlatb2.w;
  u_xlat2.w = select(0.0f, 1.0f, x_3832);
  let x_3836 : f32 = u_xlat2.w;
  let x_3838 : f32 = u_xlat2.x;
  u_xlat2.x = (x_3836 * x_3838);
  let x_3842 : f32 = u_xlat10.y;
  u_xlat18.x = (-(x_3842) + 1.0f);
  let x_3847 : f32 = u_xlat3.x;
  let x_3849 : f32 = x_33.x_ProjectionParams2.x;
  u_xlat26 = (x_3847 * x_3849);
  let x_3852 : vec4<f32> = x_33.x_CameraViewXExtent[0i];
  let x_3854 : vec3<f32> = u_xlat10;
  let x_3858 : vec4<f32> = x_33.x_CameraViewTopLeftCorner[0i];
  let x_3860 : vec3<f32> = ((vec3<f32>(x_3852.x, x_3852.y, x_3852.z) * vec3<f32>(x_3854.x, x_3854.x, x_3854.x)) + vec3<f32>(x_3858.x, x_3858.y, x_3858.z));
  let x_3861 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_3860.x, x_3860.y, x_3860.z, x_3861.w);
  let x_3864 : vec4<f32> = x_33.x_CameraViewYExtent[0i];
  let x_3866 : vec2<f32> = u_xlat18;
  let x_3869 : vec4<f32> = u_xlat3;
  let x_3871 : vec3<f32> = ((vec3<f32>(x_3864.x, x_3864.y, x_3864.z) * vec3<f32>(x_3866.x, x_3866.x, x_3866.x)) + vec3<f32>(x_3869.x, x_3869.y, x_3869.z));
  let x_3872 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_3871.x, x_3871.y, x_3871.z, x_3872.w);
  let x_3874 : vec4<f32> = u_xlat3;
  let x_3876 : f32 = u_xlat26;
  let x_3879 : vec3<f32> = u_xlat8;
  u_xlat8 = ((vec3<f32>(x_3874.x, x_3874.y, x_3874.z) * vec3<f32>(x_3876, x_3876, x_3876)) + -(x_3879));
  let x_3882 : vec3<f32> = u_xlat8;
  let x_3883 : vec4<f32> = u_xlat1;
  u_xlat10.x = dot(x_3882, vec3<f32>(x_3883.x, x_3883.y, x_3883.z));
  let x_3887 : f32 = u_xlat0;
  let x_3891 : f32 = u_xlat10.x;
  u_xlat10.x = ((-(x_3887) * 0.004f) + x_3891);
  let x_3895 : f32 = u_xlat10.x;
  u_xlat10.x = max(x_3895, 0.0f);
  let x_3898 : vec3<f32> = u_xlat8;
  let x_3899 : vec3<f32> = u_xlat8;
  u_xlat8.x = dot(x_3898, x_3899);
  let x_3903 : f32 = u_xlat8.x;
  u_xlat8.x = (x_3903 + 0.0001f);
  let x_3907 : f32 = u_xlat8.x;
  u_xlat8.x = (1.0f / x_3907);
  let x_3911 : f32 = u_xlat8.x;
  let x_3913 : f32 = u_xlat10.x;
  u_xlat8.x = (x_3911 * x_3913);
  let x_3917 : f32 = u_xlat8.x;
  let x_3919 : f32 = u_xlat2.x;
  let x_3921 : f32 = u_xlat25;
  u_xlat8.x = ((x_3917 * x_3919) + x_3921);
  let x_3925 : f32 = u_xlat8.x;
  let x_3927 : f32 = x_33.x_SSAOParams.y;
  u_xlat8.x = (x_3925 * x_3927);
  let x_3931 : f32 = x_33.x_SSAOParams.w;
  u_xlat16 = (1.0f / x_3931);
  let x_3933 : f32 = u_xlat0;
  let x_3935 : f32 = u_xlat16;
  u_xlat0 = ((-(x_3933) * x_3935) + 1.0f);
  let x_3938 : f32 = u_xlat0;
  let x_3939 : f32 = u_xlat0;
  u_xlat0 = (x_3938 * x_3939);
  let x_3942 : f32 = u_xlat8.x;
  let x_3944 : f32 = x_33.x_SSAOParams.x;
  u_xlat8.x = (x_3942 * x_3944);
  let x_3947 : f32 = u_xlat0;
  let x_3949 : f32 = u_xlat8.x;
  u_xlat0 = (x_3947 * x_3949);
  let x_3951 : f32 = u_xlat0;
  u_xlat0 = (x_3951 * 0.083333336f);
  let x_3953 : f32 = u_xlat0;
  u_xlat0 = clamp(x_3953, 0.0f, 1.0f);
  let x_3955 : f32 = u_xlat0;
  u_xlat0 = log2(x_3955);
  let x_3957 : f32 = u_xlat0;
  u_xlat0 = (x_3957 * 0.600000024f);
  let x_3960 : f32 = u_xlat0;
  SV_Target0.x = exp2(x_3960);
  let x_3964 : vec4<f32> = u_xlat1;
  let x_3967 : vec3<f32> = ((vec3<f32>(x_3964.x, x_3964.y, x_3964.z) * vec3<f32>(0.5f, 0.5f, 0.5f)) + vec3<f32>(0.5f, 0.5f, 0.5f));
  let x_3968 : vec4<f32> = SV_Target0;
  SV_Target0 = vec4<f32>(x_3968.x, x_3967.x, x_3967.y, x_3967.z);
  return;
}

struct main_out {
  @location(0)
  SV_Target0_1 : vec4<f32>,
}

@fragment
fn main(@location(0) vs_TEXCOORD0_param : vec2<f32>, @builtin(position) gl_FragCoord_param : vec4<f32>) -> main_out {
  vs_TEXCOORD0 = vs_TEXCOORD0_param;
  gl_FragCoord = gl_FragCoord_param;
  main_1();
  return main_out(SV_Target0);
}

