struct x_Terrain {
  x_NormalScale0 : f32,
  x_NormalScale1 : f32,
  x_NormalScale2 : f32,
  x_NormalScale3 : f32,
  x_Metallic0 : f32,
  x_Metallic1 : f32,
  x_Metallic2 : f32,
  x_Metallic3 : f32,
  x_Smoothness0 : f32,
  x_Smoothness1 : f32,
  x_Smoothness2 : f32,
  x_Smoothness3 : f32,
  x_DiffuseRemapScale0 : vec4<f32>,
  x_DiffuseRemapScale1 : vec4<f32>,
  x_DiffuseRemapScale2 : vec4<f32>,
  x_DiffuseRemapScale3 : vec4<f32>,
  x_MaskMapRemapOffset0 : vec4<f32>,
  x_MaskMapRemapOffset1 : vec4<f32>,
  x_MaskMapRemapOffset2 : vec4<f32>,
  x_MaskMapRemapOffset3 : vec4<f32>,
  x_MaskMapRemapScale0 : vec4<f32>,
  x_MaskMapRemapScale1 : vec4<f32>,
  x_MaskMapRemapScale2 : vec4<f32>,
  x_MaskMapRemapScale3 : vec4<f32>,
  x_Control_ST : vec4<f32>,
  x_Control_TexelSize : vec4<f32>,
  x_DiffuseHasAlpha0 : f32,
  x_DiffuseHasAlpha1 : f32,
  x_DiffuseHasAlpha2 : f32,
  x_DiffuseHasAlpha3 : f32,
  x_LayerHasMask0 : f32,
  x_LayerHasMask1 : f32,
  x_LayerHasMask2 : f32,
  x_LayerHasMask3 : f32,
  x_Splat0_ST : vec4<f32>,
  x_Splat1_ST : vec4<f32>,
  x_Splat2_ST : vec4<f32>,
  x_Splat3_ST : vec4<f32>,
  x_HeightTransition : f32,
  x_NumLayersCount : f32,
}

struct PGlobals {
  x_ScaledScreenParams : vec4<f32>,
  x_GlobalMipBias : vec2<f32>,
  @size(8)
  padding : u32,
  x_MainLightPosition : vec4<f32>,
  x_MainLightColor : vec4<f32>,
  x_AmbientOcclusionParam : vec4<f32>,
  x_AdditionalLightsCount : vec4<f32>,
  x_WorldSpaceCameraPos : vec3<f32>,
  @size(4)
  padding_1 : u32,
  x_ScaleBiasRt : vec4<f32>,
}

type Arr = array<mat4x4<f32>, 5u>;

struct MainLightShadows {
  x_MainLightWorldToShadow : Arr,
  x_CascadeShadowSplitSpheres0 : vec4<f32>,
  x_CascadeShadowSplitSpheres1 : vec4<f32>,
  x_CascadeShadowSplitSpheres2 : vec4<f32>,
  x_CascadeShadowSplitSpheres3 : vec4<f32>,
  x_CascadeShadowSplitSphereRadii : vec4<f32>,
  x_MainLightShadowOffset0 : vec4<f32>,
  x_MainLightShadowOffset1 : vec4<f32>,
  x_MainLightShadowParams : vec4<f32>,
  x_MainLightShadowmapSize : vec4<f32>,
}

type Arr_1 = array<vec4<f32>, 2u>;

struct UnityPerDraw {
  unity_ObjectToWorld : mat4x4<f32>,
  unity_WorldToObject : mat4x4<f32>,
  unity_LODFade : vec4<f32>,
  unity_WorldTransformParams : vec4<f32>,
  unity_RenderingLayer : vec4<f32>,
  unity_LightData : vec4<f32>,
  unity_LightIndices : Arr_1,
  unity_ProbesOcclusion : vec4<f32>,
  unity_SpecCube0_HDR : vec4<f32>,
  unity_SpecCube1_HDR : vec4<f32>,
  unity_SpecCube0_BoxMax : vec4<f32>,
  unity_SpecCube0_BoxMin : vec4<f32>,
  unity_SpecCube0_ProbePosition : vec4<f32>,
  unity_SpecCube1_BoxMax : vec4<f32>,
  unity_SpecCube1_BoxMin : vec4<f32>,
  unity_SpecCube1_ProbePosition : vec4<f32>,
  unity_LightmapST : vec4<f32>,
  unity_DynamicLightmapST : vec4<f32>,
  unity_SHAr : vec4<f32>,
  unity_SHAg : vec4<f32>,
  unity_SHAb : vec4<f32>,
  unity_SHBr : vec4<f32>,
  unity_SHBg : vec4<f32>,
  unity_SHBb : vec4<f32>,
  unity_SHC : vec4<f32>,
  unity_RendererBounds_Min : vec4<f32>,
  unity_RendererBounds_Max : vec4<f32>,
  unity_MatrixPreviousM : mat4x4<f32>,
  unity_MatrixPreviousMI : mat4x4<f32>,
  unity_MotionVectorsParams : vec4<f32>,
  unity_SpriteColor : vec4<f32>,
  unity_SpriteProps : vec4<f32>,
}

type Arr_2 = array<vec4<f32>, 256u>;

type Arr_3 = array<vec4<f32>, 256u>;

type Arr_4 = array<vec4<f32>, 256u>;

type Arr_5 = array<vec4<f32>, 256u>;

type Arr_6 = array<vec4<f32>, 256u>;

struct strided_arr {
  @size(16)
  el : f32,
}

type Arr_7 = array<strided_arr, 256u>;

struct AdditionalLights {
  x_AdditionalLightsPosition : Arr_6,
  x_AdditionalLightsColor : Arr_6,
  x_AdditionalLightsAttenuation : Arr_6,
  x_AdditionalLightsSpotDir : Arr_6,
  x_AdditionalLightsOcclusionProbes : Arr_6,
  x_AdditionalLightsLayerMasks : Arr_7,
}

var<private> gl_FragCoord : vec4<f32>;

@group(1) @binding(3) var<uniform> x_30 : x_Terrain;

var<private> vs_TEXCOORD0 : vec4<f32>;

@group(0) @binding(2) var x_Control : texture_2d<f32>;

@group(0) @binding(15) var sampler_Control : sampler;

@group(1) @binding(0) var<uniform> x_127 : PGlobals;

@group(0) @binding(3) var x_Splat0 : texture_2d<f32>;

@group(0) @binding(16) var sampler_Splat0 : sampler;

var<private> vs_TEXCOORD1 : vec4<f32>;

@group(0) @binding(4) var x_Splat1 : texture_2d<f32>;

@group(0) @binding(5) var x_Splat2 : texture_2d<f32>;

var<private> vs_TEXCOORD2 : vec4<f32>;

@group(0) @binding(6) var x_Splat3 : texture_2d<f32>;

@group(0) @binding(7) var x_Normal0 : texture_2d<f32>;

@group(0) @binding(17) var sampler_Normal0 : sampler;

@group(0) @binding(8) var x_Normal1 : texture_2d<f32>;

@group(0) @binding(9) var x_Normal2 : texture_2d<f32>;

@group(0) @binding(10) var x_Normal3 : texture_2d<f32>;

var<private> vs_TEXCOORD5 : vec4<f32>;

var<private> vs_TEXCOORD4 : vec4<f32>;

var<private> vs_TEXCOORD3 : vec4<f32>;

var<private> vs_TEXCOORD7 : vec3<f32>;

@group(1) @binding(4) var<uniform> x_854 : MainLightShadows;

@group(0) @binding(1) var unity_Lightmap : texture_2d<f32>;

@group(0) @binding(14) var samplerunity_Lightmap : sampler;

@group(0) @binding(11) var x_ScreenSpaceOcclusionTexture : texture_2d<f32>;

@group(0) @binding(18) var sampler_ScreenSpaceOcclusionTexture : sampler;

@group(0) @binding(12) var x_MainLightShadowmapTexture : texture_depth_2d;

@group(0) @binding(19) var sampler_MainLightShadowmapTexture : sampler_comparison;

@group(0) @binding(0) var unity_SpecCube0 : texture_cube<f32>;

@group(0) @binding(13) var samplerunity_SpecCube0 : sampler;

@group(1) @binding(2) var<uniform> x_2544 : UnityPerDraw;

@group(1) @binding(1) var<uniform> x_2809 : AdditionalLights;

var<private> SV_Target0 : vec4<f32>;

fn main_1() {
  var hlslcc_FragCoord : vec4<f32>;
  var u_xlat0 : vec3<f32>;
  var u_xlat1 : vec4<f32>;
  var u_xlat2 : vec4<f32>;
  var u_xlat3 : vec4<f32>;
  var u_xlat4 : vec4<f32>;
  var u_xlat63 : f32;
  var u_xlat5 : vec4<f32>;
  var u_xlat6 : vec4<f32>;
  var u_xlat7 : vec4<f32>;
  var u_xlat8 : vec4<f32>;
  var u_xlat9 : vec4<f32>;
  var u_xlat10 : vec4<f32>;
  var u_xlatb64 : bool;
  var u_xlat11 : vec4<f32>;
  var u_xlat12 : vec4<f32>;
  var u_xlat13 : vec4<f32>;
  var u_xlat64 : f32;
  var u_xlatb65 : bool;
  var u_xlat42 : f32;
  var u_xlat21 : f32;
  var u_xlatb2 : vec4<bool>;
  var u_xlatu64 : u32;
  var u_xlati64 : i32;
  var u_xlat65 : f32;
  var u_xlat66 : f32;
  var u_xlat25 : f32;
  var u_xlatb4 : bool;
  var txVec0 : vec3<f32>;
  var txVec1 : vec3<f32>;
  var txVec2 : vec3<f32>;
  var txVec3 : vec3<f32>;
  var u_xlatb46 : bool;
  var u_xlat46 : vec2<f32>;
  var u_xlat49 : vec2<f32>;
  var u_xlat51 : vec2<f32>;
  var u_xlat14 : vec4<f32>;
  var u_xlat15 : vec4<f32>;
  var txVec4 : vec3<f32>;
  var u_xlat67 : f32;
  var txVec5 : vec3<f32>;
  var u_xlat68 : f32;
  var txVec6 : vec3<f32>;
  var txVec7 : vec3<f32>;
  var txVec8 : vec3<f32>;
  var txVec9 : vec3<f32>;
  var txVec10 : vec3<f32>;
  var txVec11 : vec3<f32>;
  var txVec12 : vec3<f32>;
  var u_xlat55 : vec2<f32>;
  var u_xlat16 : vec4<f32>;
  var u_xlat29 : vec2<f32>;
  var u_xlat17 : vec2<f32>;
  var u_xlat52 : vec2<f32>;
  var u_xlat18 : vec4<f32>;
  var u_xlat19 : vec4<f32>;
  var u_xlat20 : vec4<f32>;
  var txVec13 : vec3<f32>;
  var txVec14 : vec3<f32>;
  var u_xlat69 : f32;
  var txVec15 : vec3<f32>;
  var txVec16 : vec3<f32>;
  var txVec17 : vec3<f32>;
  var txVec18 : vec3<f32>;
  var txVec19 : vec3<f32>;
  var txVec20 : vec3<f32>;
  var txVec21 : vec3<f32>;
  var txVec22 : vec3<f32>;
  var txVec23 : vec3<f32>;
  var txVec24 : vec3<f32>;
  var txVec25 : vec3<f32>;
  var txVec26 : vec3<f32>;
  var txVec27 : vec3<f32>;
  var txVec28 : vec3<f32>;
  var txVec29 : vec3<f32>;
  var u_xlatb23 : bool;
  var u_xlatb44 : bool;
  var x_2389 : f32;
  var u_xlat23 : vec3<f32>;
  var u_xlat44 : f32;
  var u_xlatu42 : u32;
  var u_xlatu_loop_1 : u32;
  var u_xlatu68 : u32;
  var u_xlati69 : i32;
  var indexable : array<vec4<u32>, 4u>;
  var u_xlati68 : i32;
  var u_xlat70 : f32;
  var u_xlat71 : f32;
  var u_xlat_precise_vec4 : vec4<f32>;
  var u_xlat_precise_ivec4 : vec4<i32>;
  var u_xlat_precise_bvec4 : vec4<bool>;
  var u_xlat_precise_uvec4 : vec4<u32>;
  let x_13 : vec4<f32> = gl_FragCoord;
  let x_14 : vec3<f32> = vec3<f32>(x_13.x, x_13.y, x_13.z);
  let x_20 : f32 = gl_FragCoord.w;
  hlslcc_FragCoord = vec4<f32>(x_14.x, x_14.y, x_14.z, (1.0f / x_20));
  let x_35 : vec4<f32> = x_30.x_MaskMapRemapScale0;
  let x_42 : vec4<f32> = x_30.x_MaskMapRemapOffset0;
  u_xlat0 = ((vec3<f32>(x_35.x, x_35.y, x_35.w) * vec3<f32>(0.5f, 0.5f, 0.5f)) + vec3<f32>(x_42.x, x_42.y, x_42.w));
  let x_48 : vec4<f32> = x_30.x_MaskMapRemapScale1;
  let x_53 : vec4<f32> = x_30.x_MaskMapRemapOffset1;
  let x_55 : vec3<f32> = ((vec3<f32>(x_48.x, x_48.y, x_48.w) * vec3<f32>(0.5f, 0.5f, 0.5f)) + vec3<f32>(x_53.x, x_53.y, x_53.w));
  let x_56 : vec4<f32> = u_xlat1;
  u_xlat1 = vec4<f32>(x_55.x, x_55.y, x_55.z, x_56.w);
  let x_61 : vec4<f32> = x_30.x_MaskMapRemapScale2;
  let x_66 : vec4<f32> = x_30.x_MaskMapRemapOffset2;
  let x_68 : vec3<f32> = ((vec3<f32>(x_61.x, x_61.y, x_61.w) * vec3<f32>(0.5f, 0.5f, 0.5f)) + vec3<f32>(x_66.x, x_66.y, x_66.w));
  let x_69 : vec4<f32> = u_xlat2;
  u_xlat2 = vec4<f32>(x_68.x, x_68.y, x_68.z, x_69.w);
  let x_74 : vec4<f32> = x_30.x_MaskMapRemapScale3;
  let x_79 : vec4<f32> = x_30.x_MaskMapRemapOffset3;
  let x_81 : vec3<f32> = ((vec3<f32>(x_74.x, x_74.w, x_74.y) * vec3<f32>(0.5f, 0.5f, 0.5f)) + vec3<f32>(x_79.x, x_79.w, x_79.y));
  let x_82 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_81.x, x_81.y, x_82.z, x_81.z);
  let x_88 : vec4<f32> = x_30.x_Control_TexelSize;
  let x_92 : vec2<f32> = (vec2<f32>(x_88.z, x_88.w) + vec2<f32>(-1.0f, -1.0f));
  let x_93 : vec4<f32> = u_xlat4;
  u_xlat4 = vec4<f32>(x_92.x, x_92.y, x_93.z, x_93.w);
  let x_96 : vec4<f32> = vs_TEXCOORD0;
  let x_98 : vec4<f32> = u_xlat4;
  let x_102 : vec2<f32> = ((vec2<f32>(x_96.x, x_96.y) * vec2<f32>(x_98.x, x_98.y)) + vec2<f32>(0.5f, 0.5f));
  let x_103 : vec4<f32> = u_xlat4;
  u_xlat4 = vec4<f32>(x_102.x, x_102.y, x_103.z, x_103.w);
  let x_105 : vec4<f32> = u_xlat4;
  let x_108 : vec4<f32> = x_30.x_Control_TexelSize;
  let x_110 : vec2<f32> = (vec2<f32>(x_105.x, x_105.y) * vec2<f32>(x_108.x, x_108.y));
  let x_111 : vec4<f32> = u_xlat4;
  u_xlat4 = vec4<f32>(x_110.x, x_110.y, x_111.z, x_111.w);
  let x_123 : vec4<f32> = u_xlat4;
  let x_132 : f32 = x_127.x_GlobalMipBias.x;
  let x_133 : vec4<f32> = textureSampleBias(x_Control, sampler_Control, vec2<f32>(x_123.x, x_123.y), x_132);
  u_xlat4 = x_133;
  let x_136 : vec4<f32> = u_xlat4;
  u_xlat63 = dot(x_136, vec4<f32>(1.0f, 1.0f, 1.0f, 1.0f));
  let x_146 : vec4<f32> = vs_TEXCOORD1;
  let x_149 : f32 = x_127.x_GlobalMipBias.x;
  let x_150 : vec4<f32> = textureSampleBias(x_Splat0, sampler_Splat0, vec2<f32>(x_146.x, x_146.y), x_149);
  u_xlat5 = x_150;
  let x_156 : vec4<f32> = vs_TEXCOORD1;
  let x_159 : f32 = x_127.x_GlobalMipBias.x;
  let x_160 : vec4<f32> = textureSampleBias(x_Splat1, sampler_Splat0, vec2<f32>(x_156.z, x_156.w), x_159);
  u_xlat6 = x_160;
  let x_167 : vec4<f32> = vs_TEXCOORD2;
  let x_170 : f32 = x_127.x_GlobalMipBias.x;
  let x_171 : vec4<f32> = textureSampleBias(x_Splat2, sampler_Splat0, vec2<f32>(x_167.x, x_167.y), x_170);
  u_xlat7 = x_171;
  let x_177 : vec4<f32> = vs_TEXCOORD2;
  let x_180 : f32 = x_127.x_GlobalMipBias.x;
  let x_181 : vec4<f32> = textureSampleBias(x_Splat3, sampler_Splat0, vec2<f32>(x_177.z, x_177.w), x_180);
  u_xlat8 = x_181;
  let x_184 : f32 = u_xlat5.w;
  u_xlat9.x = x_184;
  let x_187 : f32 = u_xlat6.w;
  u_xlat9.y = x_187;
  let x_191 : f32 = u_xlat7.w;
  u_xlat9.z = x_191;
  let x_195 : f32 = u_xlat8.w;
  u_xlat9.w = x_195;
  let x_198 : vec4<f32> = u_xlat9;
  let x_201 : f32 = x_30.x_Smoothness0;
  let x_204 : f32 = x_30.x_Smoothness1;
  let x_207 : f32 = x_30.x_Smoothness2;
  let x_210 : f32 = x_30.x_Smoothness3;
  u_xlat10 = (x_198 * vec4<f32>(x_201, x_204, x_207, x_210));
  let x_219 : f32 = x_30.x_NumLayersCount;
  u_xlatb64 = (4.0f >= x_219);
  let x_222 : vec4<f32> = u_xlat4;
  u_xlat11 = (-(x_222) + vec4<f32>(1.0f, 1.0f, 1.0f, 1.0f));
  let x_225 : vec4<f32> = u_xlat9;
  let x_226 : vec4<f32> = u_xlat11;
  u_xlat11 = (x_225 + -(x_226));
  let x_229 : vec4<f32> = u_xlat11;
  u_xlat11 = (x_229 * vec4<f32>(20.0f, 20.0f, 20.0f, 20.0f));
  let x_233 : vec4<f32> = u_xlat11;
  u_xlat11 = clamp(x_233, vec4<f32>(0.0f, 0.0f, 0.0f, 0.0f), vec4<f32>(1.0f, 1.0f, 1.0f, 1.0f));
  let x_238 : vec4<f32> = u_xlat4;
  let x_242 : vec4<f32> = u_xlat11;
  u_xlat11 = ((x_238 * vec4<f32>(0.001f, 0.001f, 0.001f, 0.001f)) + x_242);
  let x_245 : vec4<f32> = u_xlat4;
  let x_246 : vec4<f32> = u_xlat11;
  u_xlat12 = (x_245 + -(x_246));
  let x_251 : f32 = u_xlat12.x;
  let x_254 : f32 = x_30.x_DiffuseRemapScale0.w;
  u_xlat13.x = (x_251 * x_254);
  let x_258 : f32 = u_xlat12.y;
  let x_261 : f32 = x_30.x_DiffuseRemapScale1.w;
  u_xlat13.y = (x_258 * x_261);
  let x_265 : f32 = u_xlat12.z;
  let x_268 : f32 = x_30.x_DiffuseRemapScale2.w;
  u_xlat13.z = (x_265 * x_268);
  let x_272 : f32 = u_xlat12.w;
  let x_275 : f32 = x_30.x_DiffuseRemapScale3.w;
  u_xlat13.w = (x_272 * x_275);
  let x_278 : vec4<f32> = u_xlat11;
  let x_279 : vec4<f32> = u_xlat13;
  u_xlat11 = (x_278 + x_279);
  let x_281 : bool = u_xlatb64;
  let x_282 : vec4<f32> = u_xlat11;
  let x_283 : vec4<f32> = u_xlat4;
  u_xlat4 = select(x_283, x_282, vec4<bool>(x_281, x_281, x_281, x_281));
  let x_288 : vec4<f32> = u_xlat4;
  u_xlat64 = dot(x_288, vec4<f32>(1.0f, 1.0f, 1.0f, 1.0f));
  let x_292 : f32 = u_xlat64;
  u_xlatb65 = (0.005f >= x_292);
  let x_294 : bool = u_xlatb65;
  if (((select(0i, 1i, x_294) * -1i) != 0i)) {
    discard;
  }
  let x_303 : f32 = u_xlat64;
  u_xlat64 = (x_303 + 6.10351562e-05f);
  let x_306 : vec4<f32> = u_xlat4;
  let x_307 : f32 = u_xlat64;
  u_xlat4 = (x_306 / vec4<f32>(x_307, x_307, x_307, x_307));
  let x_310 : vec4<f32> = u_xlat4;
  let x_313 : vec4<f32> = x_30.x_DiffuseRemapScale0;
  let x_315 : vec3<f32> = (vec3<f32>(x_310.x, x_310.x, x_310.x) * vec3<f32>(x_313.x, x_313.y, x_313.z));
  let x_316 : vec4<f32> = u_xlat11;
  u_xlat11 = vec4<f32>(x_315.x, x_315.y, x_315.z, x_316.w);
  let x_318 : vec4<f32> = u_xlat4;
  let x_321 : vec4<f32> = x_30.x_DiffuseRemapScale1;
  let x_323 : vec3<f32> = (vec3<f32>(x_318.y, x_318.y, x_318.y) * vec3<f32>(x_321.x, x_321.y, x_321.z));
  let x_324 : vec4<f32> = u_xlat12;
  u_xlat12 = vec4<f32>(x_323.x, x_323.y, x_323.z, x_324.w);
  let x_326 : vec4<f32> = u_xlat6;
  let x_328 : vec4<f32> = u_xlat12;
  let x_330 : vec3<f32> = (vec3<f32>(x_326.x, x_326.y, x_326.z) * vec3<f32>(x_328.x, x_328.y, x_328.z));
  let x_331 : vec4<f32> = u_xlat6;
  u_xlat6 = vec4<f32>(x_330.x, x_330.y, x_330.z, x_331.w);
  let x_333 : vec4<f32> = u_xlat5;
  let x_335 : vec4<f32> = u_xlat11;
  let x_338 : vec4<f32> = u_xlat6;
  let x_340 : vec3<f32> = ((vec3<f32>(x_333.x, x_333.y, x_333.z) * vec3<f32>(x_335.x, x_335.y, x_335.z)) + vec3<f32>(x_338.x, x_338.y, x_338.z));
  let x_341 : vec4<f32> = u_xlat5;
  u_xlat5 = vec4<f32>(x_340.x, x_340.y, x_340.z, x_341.w);
  let x_343 : vec4<f32> = u_xlat4;
  let x_346 : vec4<f32> = x_30.x_DiffuseRemapScale2;
  let x_348 : vec3<f32> = (vec3<f32>(x_343.z, x_343.z, x_343.z) * vec3<f32>(x_346.x, x_346.y, x_346.z));
  let x_349 : vec4<f32> = u_xlat6;
  u_xlat6 = vec4<f32>(x_348.x, x_348.y, x_348.z, x_349.w);
  let x_351 : vec4<f32> = u_xlat7;
  let x_353 : vec4<f32> = u_xlat6;
  let x_356 : vec4<f32> = u_xlat5;
  let x_358 : vec3<f32> = ((vec3<f32>(x_351.x, x_351.y, x_351.z) * vec3<f32>(x_353.x, x_353.y, x_353.z)) + vec3<f32>(x_356.x, x_356.y, x_356.z));
  let x_359 : vec4<f32> = u_xlat5;
  u_xlat5 = vec4<f32>(x_358.x, x_358.y, x_358.z, x_359.w);
  let x_361 : vec4<f32> = u_xlat4;
  let x_364 : vec4<f32> = x_30.x_DiffuseRemapScale3;
  let x_366 : vec3<f32> = (vec3<f32>(x_361.w, x_361.w, x_361.w) * vec3<f32>(x_364.x, x_364.y, x_364.z));
  let x_367 : vec4<f32> = u_xlat6;
  u_xlat6 = vec4<f32>(x_366.x, x_366.y, x_366.z, x_367.w);
  let x_369 : vec4<f32> = u_xlat8;
  let x_371 : vec4<f32> = u_xlat6;
  let x_374 : vec4<f32> = u_xlat5;
  let x_376 : vec3<f32> = ((vec3<f32>(x_369.x, x_369.y, x_369.z) * vec3<f32>(x_371.x, x_371.y, x_371.z)) + vec3<f32>(x_374.x, x_374.y, x_374.z));
  let x_377 : vec4<f32> = u_xlat5;
  u_xlat5 = vec4<f32>(x_376.x, x_376.y, x_376.z, x_377.w);
  let x_384 : vec4<f32> = vs_TEXCOORD1;
  let x_387 : f32 = x_127.x_GlobalMipBias.x;
  let x_388 : vec4<f32> = textureSampleBias(x_Normal0, sampler_Normal0, vec2<f32>(x_384.x, x_384.y), x_387);
  let x_389 : vec3<f32> = vec3<f32>(x_388.x, x_388.y, x_388.w);
  let x_390 : vec4<f32> = u_xlat6;
  u_xlat6 = vec4<f32>(x_389.x, x_389.y, x_389.z, x_390.w);
  let x_393 : f32 = u_xlat6.x;
  let x_395 : f32 = u_xlat6.z;
  u_xlat6.x = (x_393 * x_395);
  let x_398 : vec4<f32> = u_xlat6;
  let x_403 : vec2<f32> = ((vec2<f32>(x_398.x, x_398.y) * vec2<f32>(2.0f, 2.0f)) + vec2<f32>(-1.0f, -1.0f));
  let x_404 : vec4<f32> = u_xlat6;
  u_xlat6 = vec4<f32>(x_403.x, x_403.y, x_404.z, x_404.w);
  let x_406 : vec4<f32> = u_xlat6;
  let x_408 : vec4<f32> = u_xlat6;
  u_xlat64 = dot(vec2<f32>(x_406.x, x_406.y), vec2<f32>(x_408.x, x_408.y));
  let x_411 : f32 = u_xlat64;
  u_xlat64 = min(x_411, 1.0f);
  let x_413 : f32 = u_xlat64;
  u_xlat64 = (-(x_413) + 1.0f);
  let x_416 : f32 = u_xlat64;
  u_xlat64 = sqrt(x_416);
  let x_418 : f32 = u_xlat64;
  u_xlat7.z = max(x_418, 1.00000002e-16f);
  let x_422 : vec4<f32> = u_xlat6;
  let x_425 : f32 = x_30.x_NormalScale0;
  let x_427 : vec2<f32> = (vec2<f32>(x_422.x, x_422.y) * vec2<f32>(x_425, x_425));
  let x_428 : vec4<f32> = u_xlat7;
  u_xlat7 = vec4<f32>(x_427.x, x_427.y, x_428.z, x_428.w);
  let x_434 : vec4<f32> = vs_TEXCOORD1;
  let x_437 : f32 = x_127.x_GlobalMipBias.x;
  let x_438 : vec4<f32> = textureSampleBias(x_Normal1, sampler_Normal0, vec2<f32>(x_434.z, x_434.w), x_437);
  let x_439 : vec3<f32> = vec3<f32>(x_438.x, x_438.y, x_438.w);
  let x_440 : vec4<f32> = u_xlat6;
  u_xlat6 = vec4<f32>(x_439.x, x_439.y, x_439.z, x_440.w);
  let x_443 : f32 = u_xlat6.x;
  let x_445 : f32 = u_xlat6.z;
  u_xlat6.x = (x_443 * x_445);
  let x_448 : vec4<f32> = u_xlat6;
  let x_451 : vec2<f32> = ((vec2<f32>(x_448.x, x_448.y) * vec2<f32>(2.0f, 2.0f)) + vec2<f32>(-1.0f, -1.0f));
  let x_452 : vec4<f32> = u_xlat6;
  u_xlat6 = vec4<f32>(x_451.x, x_451.y, x_452.z, x_452.w);
  let x_454 : vec4<f32> = u_xlat6;
  let x_456 : vec4<f32> = u_xlat6;
  u_xlat64 = dot(vec2<f32>(x_454.x, x_454.y), vec2<f32>(x_456.x, x_456.y));
  let x_459 : f32 = u_xlat64;
  u_xlat64 = min(x_459, 1.0f);
  let x_461 : f32 = u_xlat64;
  u_xlat64 = (-(x_461) + 1.0f);
  let x_464 : f32 = u_xlat64;
  u_xlat64 = sqrt(x_464);
  let x_466 : f32 = u_xlat64;
  u_xlat8.z = max(x_466, 1.00000002e-16f);
  let x_469 : vec4<f32> = u_xlat6;
  let x_472 : f32 = x_30.x_NormalScale1;
  let x_474 : f32 = x_30.x_NormalScale1;
  let x_475 : vec2<f32> = vec2<f32>(x_472, x_474);
  let x_479 : vec2<f32> = (vec2<f32>(x_469.x, x_469.y) * vec2<f32>(x_475.x, x_475.y));
  let x_480 : vec4<f32> = u_xlat8;
  u_xlat8 = vec4<f32>(x_479.x, x_479.y, x_480.z, x_480.w);
  let x_482 : vec4<f32> = u_xlat4;
  let x_484 : vec4<f32> = u_xlat8;
  let x_486 : vec3<f32> = (vec3<f32>(x_482.y, x_482.y, x_482.y) * vec3<f32>(x_484.x, x_484.y, x_484.z));
  let x_487 : vec4<f32> = u_xlat6;
  u_xlat6 = vec4<f32>(x_486.x, x_486.y, x_486.z, x_487.w);
  let x_489 : vec4<f32> = u_xlat4;
  let x_491 : vec4<f32> = u_xlat7;
  let x_494 : vec4<f32> = u_xlat6;
  let x_496 : vec3<f32> = ((vec3<f32>(x_489.x, x_489.x, x_489.x) * vec3<f32>(x_491.x, x_491.y, x_491.z)) + vec3<f32>(x_494.x, x_494.y, x_494.z));
  let x_497 : vec4<f32> = u_xlat6;
  u_xlat6 = vec4<f32>(x_496.x, x_496.y, x_496.z, x_497.w);
  let x_503 : vec4<f32> = vs_TEXCOORD2;
  let x_506 : f32 = x_127.x_GlobalMipBias.x;
  let x_507 : vec4<f32> = textureSampleBias(x_Normal2, sampler_Normal0, vec2<f32>(x_503.x, x_503.y), x_506);
  let x_508 : vec3<f32> = vec3<f32>(x_507.x, x_507.y, x_507.w);
  let x_509 : vec4<f32> = u_xlat7;
  u_xlat7 = vec4<f32>(x_508.x, x_508.y, x_508.z, x_509.w);
  let x_512 : f32 = u_xlat7.x;
  let x_514 : f32 = u_xlat7.z;
  u_xlat7.x = (x_512 * x_514);
  let x_517 : vec4<f32> = u_xlat7;
  let x_520 : vec2<f32> = ((vec2<f32>(x_517.x, x_517.y) * vec2<f32>(2.0f, 2.0f)) + vec2<f32>(-1.0f, -1.0f));
  let x_521 : vec4<f32> = u_xlat7;
  u_xlat7 = vec4<f32>(x_520.x, x_520.y, x_521.z, x_521.w);
  let x_523 : vec4<f32> = u_xlat7;
  let x_525 : vec4<f32> = u_xlat7;
  u_xlat64 = dot(vec2<f32>(x_523.x, x_523.y), vec2<f32>(x_525.x, x_525.y));
  let x_528 : f32 = u_xlat64;
  u_xlat64 = min(x_528, 1.0f);
  let x_530 : f32 = u_xlat64;
  u_xlat64 = (-(x_530) + 1.0f);
  let x_533 : f32 = u_xlat64;
  u_xlat64 = sqrt(x_533);
  let x_535 : f32 = u_xlat64;
  u_xlat8.z = max(x_535, 1.00000002e-16f);
  let x_538 : vec4<f32> = u_xlat7;
  let x_542 : f32 = x_30.x_NormalScale2;
  let x_544 : f32 = x_30.x_NormalScale2;
  let x_545 : vec2<f32> = vec2<f32>(x_542, x_544);
  let x_549 : vec2<f32> = (vec2<f32>(x_538.x, x_538.y) * vec2<f32>(x_545.x, x_545.y));
  let x_550 : vec4<f32> = u_xlat8;
  u_xlat8 = vec4<f32>(x_549.x, x_549.y, x_550.z, x_550.w);
  let x_552 : vec4<f32> = u_xlat4;
  let x_554 : vec4<f32> = u_xlat8;
  let x_557 : vec4<f32> = u_xlat6;
  let x_559 : vec3<f32> = ((vec3<f32>(x_552.z, x_552.z, x_552.z) * vec3<f32>(x_554.x, x_554.y, x_554.z)) + vec3<f32>(x_557.x, x_557.y, x_557.z));
  let x_560 : vec4<f32> = u_xlat6;
  u_xlat6 = vec4<f32>(x_559.x, x_559.y, x_559.z, x_560.w);
  let x_566 : vec4<f32> = vs_TEXCOORD2;
  let x_569 : f32 = x_127.x_GlobalMipBias.x;
  let x_570 : vec4<f32> = textureSampleBias(x_Normal3, sampler_Normal0, vec2<f32>(x_566.z, x_566.w), x_569);
  let x_571 : vec3<f32> = vec3<f32>(x_570.x, x_570.y, x_570.w);
  let x_572 : vec4<f32> = u_xlat7;
  u_xlat7 = vec4<f32>(x_571.x, x_571.y, x_571.z, x_572.w);
  let x_575 : f32 = u_xlat7.x;
  let x_577 : f32 = u_xlat7.z;
  u_xlat7.x = (x_575 * x_577);
  let x_580 : vec4<f32> = u_xlat7;
  let x_583 : vec2<f32> = ((vec2<f32>(x_580.x, x_580.y) * vec2<f32>(2.0f, 2.0f)) + vec2<f32>(-1.0f, -1.0f));
  let x_584 : vec4<f32> = u_xlat7;
  u_xlat7 = vec4<f32>(x_583.x, x_583.y, x_584.z, x_584.w);
  let x_586 : vec4<f32> = u_xlat7;
  let x_588 : vec4<f32> = u_xlat7;
  u_xlat64 = dot(vec2<f32>(x_586.x, x_586.y), vec2<f32>(x_588.x, x_588.y));
  let x_591 : f32 = u_xlat64;
  u_xlat64 = min(x_591, 1.0f);
  let x_593 : f32 = u_xlat64;
  u_xlat64 = (-(x_593) + 1.0f);
  let x_596 : f32 = u_xlat64;
  u_xlat64 = sqrt(x_596);
  let x_598 : f32 = u_xlat64;
  u_xlat8.z = max(x_598, 1.00000002e-16f);
  let x_601 : vec4<f32> = u_xlat7;
  let x_605 : f32 = x_30.x_NormalScale3;
  let x_607 : f32 = x_30.x_NormalScale3;
  let x_608 : vec2<f32> = vec2<f32>(x_605, x_607);
  let x_612 : vec2<f32> = (vec2<f32>(x_601.x, x_601.y) * vec2<f32>(x_608.x, x_608.y));
  let x_613 : vec4<f32> = u_xlat8;
  u_xlat8 = vec4<f32>(x_612.x, x_612.y, x_613.z, x_613.w);
  let x_615 : vec4<f32> = u_xlat4;
  let x_617 : vec4<f32> = u_xlat8;
  let x_620 : vec4<f32> = u_xlat6;
  let x_622 : vec3<f32> = ((vec3<f32>(x_615.w, x_615.w, x_615.w) * vec3<f32>(x_617.x, x_617.y, x_617.z)) + vec3<f32>(x_620.x, x_620.y, x_620.z));
  let x_623 : vec4<f32> = u_xlat6;
  u_xlat6 = vec4<f32>(x_622.x, x_622.y, x_622.z, x_623.w);
  let x_626 : f32 = u_xlat6.z;
  u_xlat6.w = (x_626 + 0.00001f);
  let x_630 : vec4<f32> = u_xlat6;
  let x_632 : vec4<f32> = u_xlat6;
  u_xlat64 = dot(vec3<f32>(x_630.x, x_630.y, x_630.w), vec3<f32>(x_632.x, x_632.y, x_632.w));
  let x_635 : f32 = u_xlat64;
  u_xlat64 = inverseSqrt(x_635);
  let x_637 : f32 = u_xlat64;
  let x_639 : vec4<f32> = u_xlat6;
  let x_641 : vec3<f32> = (vec3<f32>(x_637, x_637, x_637) * vec3<f32>(x_639.x, x_639.y, x_639.w));
  let x_642 : vec4<f32> = u_xlat6;
  u_xlat6 = vec4<f32>(x_641.x, x_641.y, x_641.z, x_642.w);
  let x_645 : f32 = x_30.x_MaskMapRemapScale0.y;
  u_xlat7.x = x_645;
  let x_648 : f32 = x_30.x_MaskMapRemapScale1.y;
  u_xlat7.y = x_648;
  let x_651 : f32 = x_30.x_MaskMapRemapScale2.y;
  u_xlat7.z = x_651;
  let x_654 : f32 = x_30.x_MaskMapRemapScale3.y;
  u_xlat7.w = x_654;
  let x_657 : f32 = x_30.x_MaskMapRemapOffset0.y;
  u_xlat8.x = x_657;
  let x_660 : f32 = x_30.x_MaskMapRemapOffset1.y;
  u_xlat8.y = x_660;
  let x_663 : f32 = x_30.x_MaskMapRemapOffset2.y;
  u_xlat8.z = x_663;
  let x_666 : f32 = x_30.x_MaskMapRemapOffset3.y;
  u_xlat8.w = x_666;
  let x_668 : vec4<f32> = u_xlat7;
  let x_669 : vec4<f32> = u_xlat8;
  u_xlat7 = (x_668 + x_669);
  let x_672 : f32 = u_xlat0.z;
  u_xlat8.x = x_672;
  let x_675 : f32 = u_xlat1.z;
  u_xlat8.y = x_675;
  let x_678 : f32 = u_xlat2.z;
  u_xlat8.z = x_678;
  let x_681 : f32 = u_xlat3.y;
  u_xlat8.w = x_681;
  let x_683 : vec4<f32> = u_xlat9;
  let x_686 : f32 = x_30.x_Smoothness0;
  let x_688 : f32 = x_30.x_Smoothness1;
  let x_690 : f32 = x_30.x_Smoothness2;
  let x_692 : f32 = x_30.x_Smoothness3;
  let x_695 : vec4<f32> = u_xlat8;
  u_xlat8 = ((-(x_683) * vec4<f32>(x_686, x_688, x_690, x_692)) + x_695);
  let x_699 : f32 = x_30.x_LayerHasMask0;
  let x_702 : f32 = x_30.x_LayerHasMask1;
  let x_705 : f32 = x_30.x_LayerHasMask2;
  let x_708 : f32 = x_30.x_LayerHasMask3;
  let x_710 : vec4<f32> = u_xlat8;
  let x_712 : vec4<f32> = u_xlat10;
  u_xlat8 = ((vec4<f32>(x_699, x_702, x_705, x_708) * x_710) + x_712);
  let x_715 : vec4<f32> = u_xlat4;
  let x_716 : vec4<f32> = u_xlat8;
  u_xlat42 = dot(x_715, x_716);
  let x_719 : f32 = u_xlat0.x;
  u_xlat8.x = x_719;
  let x_722 : f32 = u_xlat1.x;
  u_xlat8.y = x_722;
  let x_725 : f32 = u_xlat2.x;
  u_xlat8.z = x_725;
  let x_728 : f32 = u_xlat3.x;
  u_xlat8.w = x_728;
  let x_730 : vec4<f32> = u_xlat8;
  let x_733 : f32 = x_30.x_Metallic0;
  let x_736 : f32 = x_30.x_Metallic1;
  let x_739 : f32 = x_30.x_Metallic2;
  let x_742 : f32 = x_30.x_Metallic3;
  u_xlat8 = (x_730 + -(vec4<f32>(x_733, x_736, x_739, x_742)));
  let x_747 : f32 = x_30.x_LayerHasMask0;
  let x_749 : f32 = x_30.x_LayerHasMask1;
  let x_751 : f32 = x_30.x_LayerHasMask2;
  let x_753 : f32 = x_30.x_LayerHasMask3;
  let x_755 : vec4<f32> = u_xlat8;
  let x_758 : f32 = x_30.x_Metallic0;
  let x_760 : f32 = x_30.x_Metallic1;
  let x_762 : f32 = x_30.x_Metallic2;
  let x_764 : f32 = x_30.x_Metallic3;
  u_xlat8 = ((vec4<f32>(x_747, x_749, x_751, x_753) * x_755) + vec4<f32>(x_758, x_760, x_762, x_764));
  let x_767 : vec4<f32> = u_xlat4;
  let x_768 : vec4<f32> = u_xlat8;
  u_xlat0.x = dot(x_767, x_768);
  let x_772 : f32 = u_xlat0.y;
  u_xlat3.x = x_772;
  let x_775 : f32 = u_xlat1.y;
  u_xlat3.y = x_775;
  let x_778 : f32 = u_xlat2.y;
  u_xlat3.z = x_778;
  let x_780 : vec4<f32> = u_xlat7;
  let x_782 : vec4<f32> = u_xlat3;
  u_xlat1 = (-(x_780) + x_782);
  let x_785 : f32 = x_30.x_LayerHasMask0;
  let x_787 : f32 = x_30.x_LayerHasMask1;
  let x_789 : f32 = x_30.x_LayerHasMask2;
  let x_791 : f32 = x_30.x_LayerHasMask3;
  let x_793 : vec4<f32> = u_xlat1;
  let x_795 : vec4<f32> = u_xlat7;
  u_xlat1 = ((vec4<f32>(x_785, x_787, x_789, x_791) * x_793) + x_795);
  let x_798 : vec4<f32> = u_xlat4;
  let x_799 : vec4<f32> = u_xlat1;
  u_xlat21 = dot(x_798, x_799);
  let x_801 : vec4<f32> = u_xlat6;
  let x_804 : vec4<f32> = vs_TEXCOORD5;
  let x_806 : vec3<f32> = (vec3<f32>(x_801.y, x_801.y, x_801.y) * vec3<f32>(x_804.x, x_804.y, x_804.z));
  let x_807 : vec4<f32> = u_xlat1;
  u_xlat1 = vec4<f32>(x_806.x, x_806.y, x_806.z, x_807.w);
  let x_809 : vec4<f32> = u_xlat6;
  let x_812 : vec4<f32> = vs_TEXCOORD4;
  let x_816 : vec4<f32> = u_xlat1;
  let x_818 : vec3<f32> = ((vec3<f32>(x_809.x, x_809.x, x_809.x) * -(vec3<f32>(x_812.x, x_812.y, x_812.z))) + vec3<f32>(x_816.x, x_816.y, x_816.z));
  let x_819 : vec4<f32> = u_xlat1;
  u_xlat1 = vec4<f32>(x_818.x, x_818.y, x_818.z, x_819.w);
  let x_821 : vec4<f32> = u_xlat6;
  let x_824 : vec4<f32> = vs_TEXCOORD3;
  let x_827 : vec4<f32> = u_xlat1;
  let x_829 : vec3<f32> = ((vec3<f32>(x_821.z, x_821.z, x_821.z) * vec3<f32>(x_824.x, x_824.y, x_824.z)) + vec3<f32>(x_827.x, x_827.y, x_827.z));
  let x_830 : vec4<f32> = u_xlat1;
  u_xlat1 = vec4<f32>(x_829.x, x_829.y, x_829.z, x_830.w);
  let x_832 : vec4<f32> = u_xlat1;
  let x_834 : vec4<f32> = u_xlat1;
  u_xlat64 = dot(vec3<f32>(x_832.x, x_832.y, x_832.z), vec3<f32>(x_834.x, x_834.y, x_834.z));
  let x_837 : f32 = u_xlat64;
  u_xlat64 = inverseSqrt(x_837);
  let x_839 : f32 = u_xlat64;
  let x_841 : vec4<f32> = u_xlat1;
  let x_843 : vec3<f32> = (vec3<f32>(x_839, x_839, x_839) * vec3<f32>(x_841.x, x_841.y, x_841.z));
  let x_844 : vec4<f32> = u_xlat1;
  u_xlat1 = vec4<f32>(x_843.x, x_843.y, x_843.z, x_844.w);
  let x_848 : vec3<f32> = vs_TEXCOORD7;
  let x_856 : vec4<f32> = x_854.x_CascadeShadowSplitSpheres0;
  let x_859 : vec3<f32> = (x_848 + -(vec3<f32>(x_856.x, x_856.y, x_856.z)));
  let x_860 : vec4<f32> = u_xlat2;
  u_xlat2 = vec4<f32>(x_859.x, x_859.y, x_859.z, x_860.w);
  let x_862 : vec3<f32> = vs_TEXCOORD7;
  let x_864 : vec4<f32> = x_854.x_CascadeShadowSplitSpheres1;
  let x_867 : vec3<f32> = (x_862 + -(vec3<f32>(x_864.x, x_864.y, x_864.z)));
  let x_868 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_867.x, x_867.y, x_867.z, x_868.w);
  let x_870 : vec3<f32> = vs_TEXCOORD7;
  let x_872 : vec4<f32> = x_854.x_CascadeShadowSplitSpheres2;
  let x_875 : vec3<f32> = (x_870 + -(vec3<f32>(x_872.x, x_872.y, x_872.z)));
  let x_876 : vec4<f32> = u_xlat4;
  u_xlat4 = vec4<f32>(x_875.x, x_875.y, x_875.z, x_876.w);
  let x_878 : vec3<f32> = vs_TEXCOORD7;
  let x_880 : vec4<f32> = x_854.x_CascadeShadowSplitSpheres3;
  let x_883 : vec3<f32> = (x_878 + -(vec3<f32>(x_880.x, x_880.y, x_880.z)));
  let x_884 : vec4<f32> = u_xlat6;
  u_xlat6 = vec4<f32>(x_883.x, x_883.y, x_883.z, x_884.w);
  let x_886 : vec4<f32> = u_xlat2;
  let x_888 : vec4<f32> = u_xlat2;
  u_xlat2.x = dot(vec3<f32>(x_886.x, x_886.y, x_886.z), vec3<f32>(x_888.x, x_888.y, x_888.z));
  let x_892 : vec4<f32> = u_xlat3;
  let x_894 : vec4<f32> = u_xlat3;
  u_xlat2.y = dot(vec3<f32>(x_892.x, x_892.y, x_892.z), vec3<f32>(x_894.x, x_894.y, x_894.z));
  let x_898 : vec4<f32> = u_xlat4;
  let x_900 : vec4<f32> = u_xlat4;
  u_xlat2.z = dot(vec3<f32>(x_898.x, x_898.y, x_898.z), vec3<f32>(x_900.x, x_900.y, x_900.z));
  let x_904 : vec4<f32> = u_xlat6;
  let x_906 : vec4<f32> = u_xlat6;
  u_xlat2.w = dot(vec3<f32>(x_904.x, x_904.y, x_904.z), vec3<f32>(x_906.x, x_906.y, x_906.z));
  let x_912 : vec4<f32> = u_xlat2;
  let x_914 : vec4<f32> = x_854.x_CascadeShadowSplitSphereRadii;
  u_xlatb2 = (x_912 < x_914);
  let x_917 : bool = u_xlatb2.x;
  u_xlat3.x = select(0.0f, 1.0f, x_917);
  let x_921 : bool = u_xlatb2.y;
  u_xlat3.y = select(0.0f, 1.0f, x_921);
  let x_925 : bool = u_xlatb2.z;
  u_xlat3.z = select(0.0f, 1.0f, x_925);
  let x_929 : bool = u_xlatb2.w;
  u_xlat3.w = select(0.0f, 1.0f, x_929);
  let x_933 : bool = u_xlatb2.x;
  u_xlat2.x = select(-0.0f, -1.0f, x_933);
  let x_938 : bool = u_xlatb2.y;
  u_xlat2.y = select(-0.0f, -1.0f, x_938);
  let x_942 : bool = u_xlatb2.z;
  u_xlat2.z = select(-0.0f, -1.0f, x_942);
  let x_945 : vec4<f32> = u_xlat2;
  let x_947 : vec4<f32> = u_xlat3;
  let x_949 : vec3<f32> = (vec3<f32>(x_945.x, x_945.y, x_945.z) + vec3<f32>(x_947.y, x_947.z, x_947.w));
  let x_950 : vec4<f32> = u_xlat2;
  u_xlat2 = vec4<f32>(x_949.x, x_949.y, x_949.z, x_950.w);
  let x_952 : vec4<f32> = u_xlat2;
  let x_955 : vec3<f32> = max(vec3<f32>(x_952.x, x_952.y, x_952.z), vec3<f32>(0.0f, 0.0f, 0.0f));
  let x_956 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_956.x, x_955.x, x_955.y, x_955.z);
  let x_958 : vec4<f32> = u_xlat3;
  u_xlat64 = dot(x_958, vec4<f32>(4.0f, 3.0f, 2.0f, 1.0f));
  let x_962 : f32 = u_xlat64;
  u_xlat64 = (-(x_962) + 4.0f);
  let x_967 : f32 = u_xlat64;
  u_xlatu64 = u32(x_967);
  let x_971 : u32 = u_xlatu64;
  u_xlati64 = (bitcast<i32>(x_971) << bitcast<u32>(2i));
  let x_974 : vec3<f32> = vs_TEXCOORD7;
  let x_976 : i32 = u_xlati64;
  let x_979 : i32 = u_xlati64;
  let x_983 : vec4<f32> = x_854.x_MainLightWorldToShadow[((x_976 + 1i) / 4i)][((x_979 + 1i) % 4i)];
  let x_985 : vec3<f32> = (vec3<f32>(x_974.y, x_974.y, x_974.y) * vec3<f32>(x_983.x, x_983.y, x_983.z));
  let x_986 : vec4<f32> = u_xlat2;
  u_xlat2 = vec4<f32>(x_985.x, x_985.y, x_985.z, x_986.w);
  let x_988 : i32 = u_xlati64;
  let x_990 : i32 = u_xlati64;
  let x_993 : vec4<f32> = x_854.x_MainLightWorldToShadow[(x_988 / 4i)][(x_990 % 4i)];
  let x_995 : vec3<f32> = vs_TEXCOORD7;
  let x_998 : vec4<f32> = u_xlat2;
  let x_1000 : vec3<f32> = ((vec3<f32>(x_993.x, x_993.y, x_993.z) * vec3<f32>(x_995.x, x_995.x, x_995.x)) + vec3<f32>(x_998.x, x_998.y, x_998.z));
  let x_1001 : vec4<f32> = u_xlat2;
  u_xlat2 = vec4<f32>(x_1000.x, x_1000.y, x_1000.z, x_1001.w);
  let x_1003 : i32 = u_xlati64;
  let x_1006 : i32 = u_xlati64;
  let x_1010 : vec4<f32> = x_854.x_MainLightWorldToShadow[((x_1003 + 2i) / 4i)][((x_1006 + 2i) % 4i)];
  let x_1012 : vec3<f32> = vs_TEXCOORD7;
  let x_1015 : vec4<f32> = u_xlat2;
  let x_1017 : vec3<f32> = ((vec3<f32>(x_1010.x, x_1010.y, x_1010.z) * vec3<f32>(x_1012.z, x_1012.z, x_1012.z)) + vec3<f32>(x_1015.x, x_1015.y, x_1015.z));
  let x_1018 : vec4<f32> = u_xlat2;
  u_xlat2 = vec4<f32>(x_1017.x, x_1017.y, x_1017.z, x_1018.w);
  let x_1020 : vec4<f32> = u_xlat2;
  let x_1022 : i32 = u_xlati64;
  let x_1025 : i32 = u_xlati64;
  let x_1029 : vec4<f32> = x_854.x_MainLightWorldToShadow[((x_1022 + 3i) / 4i)][((x_1025 + 3i) % 4i)];
  let x_1031 : vec3<f32> = (vec3<f32>(x_1020.x, x_1020.y, x_1020.z) + vec3<f32>(x_1029.x, x_1029.y, x_1029.z));
  let x_1032 : vec4<f32> = u_xlat2;
  u_xlat2 = vec4<f32>(x_1031.x, x_1031.y, x_1031.z, x_1032.w);
  let x_1039 : vec4<f32> = vs_TEXCOORD0;
  let x_1042 : f32 = x_127.x_GlobalMipBias.x;
  let x_1043 : vec4<f32> = textureSampleBias(unity_Lightmap, samplerunity_Lightmap, vec2<f32>(x_1039.z, x_1039.w), x_1042);
  let x_1044 : vec3<f32> = vec3<f32>(x_1043.x, x_1043.y, x_1043.z);
  let x_1045 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_1044.x, x_1044.y, x_1044.z, x_1045.w);
  let x_1049 : vec4<f32> = x_127.x_ScaledScreenParams;
  let x_1050 : vec2<f32> = vec2<f32>(x_1049.x, x_1049.y);
  let x_1054 : vec2<f32> = (vec2<f32>(1.0f, 1.0f) / vec2<f32>(x_1050.x, x_1050.y));
  let x_1055 : vec4<f32> = u_xlat4;
  u_xlat4 = vec4<f32>(x_1054.x, x_1054.y, x_1055.z, x_1055.w);
  let x_1057 : vec4<f32> = u_xlat4;
  let x_1059 : vec4<f32> = hlslcc_FragCoord;
  let x_1061 : vec2<f32> = (vec2<f32>(x_1057.x, x_1057.y) * vec2<f32>(x_1059.x, x_1059.y));
  let x_1062 : vec4<f32> = u_xlat4;
  u_xlat4 = vec4<f32>(x_1061.x, x_1061.y, x_1062.z, x_1062.w);
  let x_1065 : f32 = u_xlat4.y;
  let x_1067 : f32 = x_127.x_ScaleBiasRt.x;
  let x_1070 : f32 = x_127.x_ScaleBiasRt.y;
  u_xlat64 = ((x_1065 * x_1067) + x_1070);
  let x_1072 : f32 = u_xlat64;
  u_xlat4.z = (-(x_1072) + 1.0f);
  let x_1077 : f32 = u_xlat0.x;
  u_xlat64 = ((-(x_1077) * 0.959999979f) + 0.959999979f);
  let x_1083 : f32 = u_xlat42;
  let x_1084 : f32 = u_xlat64;
  u_xlat65 = (x_1083 + -(x_1084));
  let x_1087 : f32 = u_xlat64;
  let x_1089 : vec4<f32> = u_xlat5;
  let x_1091 : vec3<f32> = (vec3<f32>(x_1087, x_1087, x_1087) * vec3<f32>(x_1089.x, x_1089.y, x_1089.z));
  let x_1092 : vec4<f32> = u_xlat6;
  u_xlat6 = vec4<f32>(x_1091.x, x_1091.y, x_1091.z, x_1092.w);
  let x_1094 : vec4<f32> = u_xlat5;
  let x_1098 : vec3<f32> = (vec3<f32>(x_1094.x, x_1094.y, x_1094.z) + vec3<f32>(-0.039999999f, -0.039999999f, -0.039999999f));
  let x_1099 : vec4<f32> = u_xlat5;
  u_xlat5 = vec4<f32>(x_1098.x, x_1098.y, x_1098.z, x_1099.w);
  let x_1101 : vec3<f32> = u_xlat0;
  let x_1103 : vec4<f32> = u_xlat5;
  let x_1108 : vec3<f32> = ((vec3<f32>(x_1101.x, x_1101.x, x_1101.x) * vec3<f32>(x_1103.x, x_1103.y, x_1103.z)) + vec3<f32>(0.039999999f, 0.039999999f, 0.039999999f));
  let x_1109 : vec4<f32> = u_xlat5;
  u_xlat5 = vec4<f32>(x_1108.x, x_1108.y, x_1108.z, x_1109.w);
  let x_1111 : f32 = u_xlat42;
  u_xlat0.x = (-(x_1111) + 1.0f);
  let x_1116 : f32 = u_xlat0.x;
  let x_1118 : f32 = u_xlat0.x;
  u_xlat42 = (x_1116 * x_1118);
  let x_1120 : f32 = u_xlat42;
  u_xlat42 = max(x_1120, 0.0078125f);
  let x_1123 : f32 = u_xlat42;
  let x_1124 : f32 = u_xlat42;
  u_xlat64 = (x_1123 * x_1124);
  let x_1126 : f32 = u_xlat65;
  u_xlat65 = (x_1126 + 1.0f);
  let x_1128 : f32 = u_xlat65;
  u_xlat65 = clamp(x_1128, 0.0f, 1.0f);
  let x_1131 : f32 = u_xlat42;
  u_xlat66 = ((x_1131 * 4.0f) + 2.0f);
  let x_1139 : vec4<f32> = u_xlat4;
  let x_1142 : f32 = x_127.x_GlobalMipBias.x;
  let x_1143 : vec4<f32> = textureSampleBias(x_ScreenSpaceOcclusionTexture, sampler_ScreenSpaceOcclusionTexture, vec2<f32>(x_1139.x, x_1139.z), x_1142);
  u_xlat4.x = x_1143.x;
  let x_1148 : f32 = u_xlat4.x;
  u_xlat25 = (x_1148 + -1.0f);
  let x_1151 : f32 = x_127.x_AmbientOcclusionParam.w;
  let x_1152 : f32 = u_xlat25;
  u_xlat25 = ((x_1151 * x_1152) + 1.0f);
  let x_1155 : f32 = u_xlat21;
  let x_1157 : f32 = u_xlat4.x;
  u_xlat21 = min(x_1155, x_1157);
  let x_1161 : f32 = x_854.x_MainLightShadowParams.y;
  u_xlatb4 = (0.0f < x_1161);
  let x_1163 : bool = u_xlatb4;
  if (x_1163) {
    let x_1167 : f32 = x_854.x_MainLightShadowParams.y;
    u_xlatb4 = (x_1167 == 1.0f);
    let x_1169 : bool = u_xlatb4;
    if (x_1169) {
      let x_1172 : vec4<f32> = u_xlat2;
      let x_1175 : vec4<f32> = x_854.x_MainLightShadowOffset0;
      u_xlat7 = (vec4<f32>(x_1172.x, x_1172.y, x_1172.x, x_1172.y) + x_1175);
      let x_1178 : vec4<f32> = u_xlat7;
      let x_1179 : vec2<f32> = vec2<f32>(x_1178.x, x_1178.y);
      let x_1181 : f32 = u_xlat2.z;
      txVec0 = vec3<f32>(x_1179.x, x_1179.y, x_1181);
      let x_1193 : vec3<f32> = txVec0;
      let x_1195 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1193.xy, x_1193.z);
      u_xlat8.x = x_1195;
      let x_1198 : vec4<f32> = u_xlat7;
      let x_1199 : vec2<f32> = vec2<f32>(x_1198.z, x_1198.w);
      let x_1201 : f32 = u_xlat2.z;
      txVec1 = vec3<f32>(x_1199.x, x_1199.y, x_1201);
      let x_1208 : vec3<f32> = txVec1;
      let x_1210 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1208.xy, x_1208.z);
      u_xlat8.y = x_1210;
      let x_1212 : vec4<f32> = u_xlat2;
      let x_1215 : vec4<f32> = x_854.x_MainLightShadowOffset1;
      u_xlat7 = (vec4<f32>(x_1212.x, x_1212.y, x_1212.x, x_1212.y) + x_1215);
      let x_1218 : vec4<f32> = u_xlat7;
      let x_1219 : vec2<f32> = vec2<f32>(x_1218.x, x_1218.y);
      let x_1221 : f32 = u_xlat2.z;
      txVec2 = vec3<f32>(x_1219.x, x_1219.y, x_1221);
      let x_1228 : vec3<f32> = txVec2;
      let x_1230 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1228.xy, x_1228.z);
      u_xlat8.z = x_1230;
      let x_1233 : vec4<f32> = u_xlat7;
      let x_1234 : vec2<f32> = vec2<f32>(x_1233.z, x_1233.w);
      let x_1236 : f32 = u_xlat2.z;
      txVec3 = vec3<f32>(x_1234.x, x_1234.y, x_1236);
      let x_1243 : vec3<f32> = txVec3;
      let x_1245 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1243.xy, x_1243.z);
      u_xlat8.w = x_1245;
      let x_1247 : vec4<f32> = u_xlat8;
      u_xlat4.x = dot(x_1247, vec4<f32>(0.25f, 0.25f, 0.25f, 0.25f));
    } else {
      let x_1255 : f32 = x_854.x_MainLightShadowParams.y;
      u_xlatb46 = (x_1255 == 2.0f);
      let x_1257 : bool = u_xlatb46;
      if (x_1257) {
        let x_1262 : vec4<f32> = u_xlat2;
        let x_1265 : vec4<f32> = x_854.x_MainLightShadowmapSize;
        u_xlat46 = ((vec2<f32>(x_1262.x, x_1262.y) * vec2<f32>(x_1265.z, x_1265.w)) + vec2<f32>(0.5f, 0.5f));
        let x_1269 : vec2<f32> = u_xlat46;
        u_xlat46 = floor(x_1269);
        let x_1271 : vec4<f32> = u_xlat2;
        let x_1274 : vec4<f32> = x_854.x_MainLightShadowmapSize;
        let x_1277 : vec2<f32> = u_xlat46;
        let x_1279 : vec2<f32> = ((vec2<f32>(x_1271.x, x_1271.y) * vec2<f32>(x_1274.z, x_1274.w)) + -(x_1277));
        let x_1280 : vec4<f32> = u_xlat7;
        u_xlat7 = vec4<f32>(x_1279.x, x_1279.y, x_1280.z, x_1280.w);
        let x_1282 : vec4<f32> = u_xlat7;
        u_xlat8 = (vec4<f32>(x_1282.x, x_1282.x, x_1282.y, x_1282.y) + vec4<f32>(0.5f, 1.0f, 0.5f, 1.0f));
        let x_1286 : vec4<f32> = u_xlat8;
        let x_1288 : vec4<f32> = u_xlat8;
        u_xlat9 = (vec4<f32>(x_1286.x, x_1286.x, x_1286.z, x_1286.z) * vec4<f32>(x_1288.x, x_1288.x, x_1288.z, x_1288.z));
        let x_1292 : vec4<f32> = u_xlat9;
        u_xlat49 = (vec2<f32>(x_1292.y, x_1292.w) * vec2<f32>(0.079999998f, 0.079999998f));
        let x_1297 : vec4<f32> = u_xlat9;
        let x_1300 : vec4<f32> = u_xlat7;
        let x_1303 : vec2<f32> = ((vec2<f32>(x_1297.x, x_1297.z) * vec2<f32>(0.5f, 0.5f)) + -(vec2<f32>(x_1300.x, x_1300.y)));
        let x_1304 : vec4<f32> = u_xlat8;
        u_xlat8 = vec4<f32>(x_1303.x, x_1304.y, x_1303.y, x_1304.w);
        let x_1306 : vec4<f32> = u_xlat7;
        let x_1309 : vec2<f32> = (-(vec2<f32>(x_1306.x, x_1306.y)) + vec2<f32>(1.0f, 1.0f));
        let x_1310 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_1309.x, x_1309.y, x_1310.z, x_1310.w);
        let x_1313 : vec4<f32> = u_xlat7;
        u_xlat51 = min(vec2<f32>(x_1313.x, x_1313.y), vec2<f32>(0.0f, 0.0f));
        let x_1317 : vec2<f32> = u_xlat51;
        let x_1319 : vec2<f32> = u_xlat51;
        let x_1321 : vec4<f32> = u_xlat9;
        u_xlat51 = ((-(x_1317) * x_1319) + vec2<f32>(x_1321.x, x_1321.y));
        let x_1324 : vec4<f32> = u_xlat7;
        let x_1326 : vec2<f32> = max(vec2<f32>(x_1324.x, x_1324.y), vec2<f32>(0.0f, 0.0f));
        let x_1327 : vec4<f32> = u_xlat7;
        u_xlat7 = vec4<f32>(x_1326.x, x_1326.y, x_1327.z, x_1327.w);
        let x_1329 : vec4<f32> = u_xlat7;
        let x_1332 : vec4<f32> = u_xlat7;
        let x_1335 : vec4<f32> = u_xlat8;
        let x_1337 : vec2<f32> = ((-(vec2<f32>(x_1329.x, x_1329.y)) * vec2<f32>(x_1332.x, x_1332.y)) + vec2<f32>(x_1335.y, x_1335.w));
        let x_1338 : vec4<f32> = u_xlat7;
        u_xlat7 = vec4<f32>(x_1337.x, x_1337.y, x_1338.z, x_1338.w);
        let x_1340 : vec2<f32> = u_xlat51;
        u_xlat51 = (x_1340 + vec2<f32>(1.0f, 1.0f));
        let x_1342 : vec4<f32> = u_xlat7;
        let x_1344 : vec2<f32> = (vec2<f32>(x_1342.x, x_1342.y) + vec2<f32>(1.0f, 1.0f));
        let x_1345 : vec4<f32> = u_xlat7;
        u_xlat7 = vec4<f32>(x_1344.x, x_1344.y, x_1345.z, x_1345.w);
        let x_1347 : vec4<f32> = u_xlat8;
        let x_1351 : vec2<f32> = (vec2<f32>(x_1347.x, x_1347.z) * vec2<f32>(0.159999996f, 0.159999996f));
        let x_1352 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_1351.x, x_1351.y, x_1352.z, x_1352.w);
        let x_1354 : vec4<f32> = u_xlat9;
        let x_1356 : vec2<f32> = (vec2<f32>(x_1354.x, x_1354.y) * vec2<f32>(0.159999996f, 0.159999996f));
        let x_1357 : vec4<f32> = u_xlat11;
        u_xlat11 = vec4<f32>(x_1356.x, x_1356.y, x_1357.z, x_1357.w);
        let x_1359 : vec2<f32> = u_xlat51;
        let x_1360 : vec2<f32> = (x_1359 * vec2<f32>(0.159999996f, 0.159999996f));
        let x_1361 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_1360.x, x_1360.y, x_1361.z, x_1361.w);
        let x_1363 : vec4<f32> = u_xlat7;
        let x_1365 : vec2<f32> = (vec2<f32>(x_1363.x, x_1363.y) * vec2<f32>(0.159999996f, 0.159999996f));
        let x_1366 : vec4<f32> = u_xlat12;
        u_xlat12 = vec4<f32>(x_1365.x, x_1365.y, x_1366.z, x_1366.w);
        let x_1368 : vec4<f32> = u_xlat8;
        let x_1370 : vec2<f32> = (vec2<f32>(x_1368.y, x_1368.w) * vec2<f32>(0.159999996f, 0.159999996f));
        let x_1371 : vec4<f32> = u_xlat7;
        u_xlat7 = vec4<f32>(x_1370.x, x_1370.y, x_1371.z, x_1371.w);
        let x_1374 : f32 = u_xlat9.x;
        u_xlat10.z = x_1374;
        let x_1377 : f32 = u_xlat7.x;
        u_xlat10.w = x_1377;
        let x_1380 : f32 = u_xlat12.x;
        u_xlat11.z = x_1380;
        let x_1383 : f32 = u_xlat49.x;
        u_xlat11.w = x_1383;
        let x_1385 : vec4<f32> = u_xlat10;
        let x_1387 : vec4<f32> = u_xlat11;
        u_xlat8 = (vec4<f32>(x_1385.z, x_1385.w, x_1385.x, x_1385.z) + vec4<f32>(x_1387.z, x_1387.w, x_1387.x, x_1387.z));
        let x_1391 : f32 = u_xlat10.y;
        u_xlat9.z = x_1391;
        let x_1394 : f32 = u_xlat7.y;
        u_xlat9.w = x_1394;
        let x_1397 : f32 = u_xlat11.y;
        u_xlat12.z = x_1397;
        let x_1400 : f32 = u_xlat49.y;
        u_xlat12.w = x_1400;
        let x_1402 : vec4<f32> = u_xlat9;
        let x_1404 : vec4<f32> = u_xlat12;
        let x_1406 : vec3<f32> = (vec3<f32>(x_1402.z, x_1402.y, x_1402.w) + vec3<f32>(x_1404.z, x_1404.y, x_1404.w));
        let x_1407 : vec4<f32> = u_xlat7;
        u_xlat7 = vec4<f32>(x_1406.x, x_1406.y, x_1406.z, x_1407.w);
        let x_1409 : vec4<f32> = u_xlat11;
        let x_1411 : vec4<f32> = u_xlat8;
        let x_1413 : vec3<f32> = (vec3<f32>(x_1409.x, x_1409.z, x_1409.w) / vec3<f32>(x_1411.z, x_1411.w, x_1411.y));
        let x_1414 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_1413.x, x_1413.y, x_1413.z, x_1414.w);
        let x_1416 : vec4<f32> = u_xlat9;
        let x_1422 : vec3<f32> = (vec3<f32>(x_1416.x, x_1416.y, x_1416.z) + vec3<f32>(-2.5f, -0.5f, 1.5f));
        let x_1423 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_1422.x, x_1422.y, x_1422.z, x_1423.w);
        let x_1425 : vec4<f32> = u_xlat12;
        let x_1427 : vec4<f32> = u_xlat7;
        let x_1429 : vec3<f32> = (vec3<f32>(x_1425.z, x_1425.y, x_1425.w) / vec3<f32>(x_1427.x, x_1427.y, x_1427.z));
        let x_1430 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_1429.x, x_1429.y, x_1429.z, x_1430.w);
        let x_1432 : vec4<f32> = u_xlat10;
        let x_1434 : vec3<f32> = (vec3<f32>(x_1432.x, x_1432.y, x_1432.z) + vec3<f32>(-2.5f, -0.5f, 1.5f));
        let x_1435 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_1434.x, x_1434.y, x_1434.z, x_1435.w);
        let x_1437 : vec4<f32> = u_xlat9;
        let x_1440 : vec4<f32> = x_854.x_MainLightShadowmapSize;
        let x_1442 : vec3<f32> = (vec3<f32>(x_1437.y, x_1437.x, x_1437.z) * vec3<f32>(x_1440.x, x_1440.x, x_1440.x));
        let x_1443 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_1442.x, x_1442.y, x_1442.z, x_1443.w);
        let x_1445 : vec4<f32> = u_xlat10;
        let x_1448 : vec4<f32> = x_854.x_MainLightShadowmapSize;
        let x_1450 : vec3<f32> = (vec3<f32>(x_1445.x, x_1445.y, x_1445.z) * vec3<f32>(x_1448.y, x_1448.y, x_1448.y));
        let x_1451 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_1450.x, x_1450.y, x_1450.z, x_1451.w);
        let x_1454 : f32 = u_xlat10.x;
        u_xlat9.w = x_1454;
        let x_1456 : vec2<f32> = u_xlat46;
        let x_1459 : vec4<f32> = x_854.x_MainLightShadowmapSize;
        let x_1462 : vec4<f32> = u_xlat9;
        u_xlat11 = ((vec4<f32>(x_1456.x, x_1456.y, x_1456.x, x_1456.y) * vec4<f32>(x_1459.x, x_1459.y, x_1459.x, x_1459.y)) + vec4<f32>(x_1462.y, x_1462.w, x_1462.x, x_1462.w));
        let x_1465 : vec2<f32> = u_xlat46;
        let x_1467 : vec4<f32> = x_854.x_MainLightShadowmapSize;
        let x_1470 : vec4<f32> = u_xlat9;
        let x_1472 : vec2<f32> = ((x_1465 * vec2<f32>(x_1467.x, x_1467.y)) + vec2<f32>(x_1470.z, x_1470.w));
        let x_1473 : vec4<f32> = u_xlat12;
        u_xlat12 = vec4<f32>(x_1472.x, x_1472.y, x_1473.z, x_1473.w);
        let x_1476 : f32 = u_xlat9.y;
        u_xlat10.w = x_1476;
        let x_1478 : vec4<f32> = u_xlat10;
        let x_1479 : vec2<f32> = vec2<f32>(x_1478.y, x_1478.z);
        let x_1480 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_1480.x, x_1479.x, x_1480.z, x_1479.y);
        let x_1482 : vec2<f32> = u_xlat46;
        let x_1485 : vec4<f32> = x_854.x_MainLightShadowmapSize;
        let x_1488 : vec4<f32> = u_xlat9;
        u_xlat13 = ((vec4<f32>(x_1482.x, x_1482.y, x_1482.x, x_1482.y) * vec4<f32>(x_1485.x, x_1485.y, x_1485.x, x_1485.y)) + vec4<f32>(x_1488.x, x_1488.y, x_1488.z, x_1488.y));
        let x_1491 : vec2<f32> = u_xlat46;
        let x_1494 : vec4<f32> = x_854.x_MainLightShadowmapSize;
        let x_1497 : vec4<f32> = u_xlat10;
        u_xlat10 = ((vec4<f32>(x_1491.x, x_1491.y, x_1491.x, x_1491.y) * vec4<f32>(x_1494.x, x_1494.y, x_1494.x, x_1494.y)) + vec4<f32>(x_1497.w, x_1497.y, x_1497.w, x_1497.z));
        let x_1500 : vec2<f32> = u_xlat46;
        let x_1503 : vec4<f32> = x_854.x_MainLightShadowmapSize;
        let x_1506 : vec4<f32> = u_xlat9;
        u_xlat9 = ((vec4<f32>(x_1500.x, x_1500.y, x_1500.x, x_1500.y) * vec4<f32>(x_1503.x, x_1503.y, x_1503.x, x_1503.y)) + vec4<f32>(x_1506.x, x_1506.w, x_1506.z, x_1506.w));
        let x_1510 : vec4<f32> = u_xlat7;
        let x_1512 : vec4<f32> = u_xlat8;
        u_xlat14 = (vec4<f32>(x_1510.x, x_1510.x, x_1510.x, x_1510.y) * vec4<f32>(x_1512.z, x_1512.w, x_1512.y, x_1512.z));
        let x_1516 : vec4<f32> = u_xlat7;
        let x_1518 : vec4<f32> = u_xlat8;
        u_xlat15 = (vec4<f32>(x_1516.y, x_1516.y, x_1516.z, x_1516.z) * x_1518);
        let x_1521 : f32 = u_xlat7.z;
        let x_1523 : f32 = u_xlat8.y;
        u_xlat46.x = (x_1521 * x_1523);
        let x_1527 : vec4<f32> = u_xlat11;
        let x_1528 : vec2<f32> = vec2<f32>(x_1527.x, x_1527.y);
        let x_1530 : f32 = u_xlat2.z;
        txVec4 = vec3<f32>(x_1528.x, x_1528.y, x_1530);
        let x_1538 : vec3<f32> = txVec4;
        let x_1540 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1538.xy, x_1538.z);
        u_xlat67 = x_1540;
        let x_1542 : vec4<f32> = u_xlat11;
        let x_1543 : vec2<f32> = vec2<f32>(x_1542.z, x_1542.w);
        let x_1545 : f32 = u_xlat2.z;
        txVec5 = vec3<f32>(x_1543.x, x_1543.y, x_1545);
        let x_1553 : vec3<f32> = txVec5;
        let x_1555 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1553.xy, x_1553.z);
        u_xlat68 = x_1555;
        let x_1556 : f32 = u_xlat68;
        let x_1558 : f32 = u_xlat14.y;
        u_xlat68 = (x_1556 * x_1558);
        let x_1561 : f32 = u_xlat14.x;
        let x_1562 : f32 = u_xlat67;
        let x_1564 : f32 = u_xlat68;
        u_xlat67 = ((x_1561 * x_1562) + x_1564);
        let x_1567 : vec4<f32> = u_xlat12;
        let x_1568 : vec2<f32> = vec2<f32>(x_1567.x, x_1567.y);
        let x_1570 : f32 = u_xlat2.z;
        txVec6 = vec3<f32>(x_1568.x, x_1568.y, x_1570);
        let x_1577 : vec3<f32> = txVec6;
        let x_1579 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1577.xy, x_1577.z);
        u_xlat68 = x_1579;
        let x_1581 : f32 = u_xlat14.z;
        let x_1582 : f32 = u_xlat68;
        let x_1584 : f32 = u_xlat67;
        u_xlat67 = ((x_1581 * x_1582) + x_1584);
        let x_1587 : vec4<f32> = u_xlat10;
        let x_1588 : vec2<f32> = vec2<f32>(x_1587.x, x_1587.y);
        let x_1590 : f32 = u_xlat2.z;
        txVec7 = vec3<f32>(x_1588.x, x_1588.y, x_1590);
        let x_1597 : vec3<f32> = txVec7;
        let x_1599 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1597.xy, x_1597.z);
        u_xlat68 = x_1599;
        let x_1601 : f32 = u_xlat14.w;
        let x_1602 : f32 = u_xlat68;
        let x_1604 : f32 = u_xlat67;
        u_xlat67 = ((x_1601 * x_1602) + x_1604);
        let x_1607 : vec4<f32> = u_xlat13;
        let x_1608 : vec2<f32> = vec2<f32>(x_1607.x, x_1607.y);
        let x_1610 : f32 = u_xlat2.z;
        txVec8 = vec3<f32>(x_1608.x, x_1608.y, x_1610);
        let x_1617 : vec3<f32> = txVec8;
        let x_1619 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1617.xy, x_1617.z);
        u_xlat68 = x_1619;
        let x_1621 : f32 = u_xlat15.x;
        let x_1622 : f32 = u_xlat68;
        let x_1624 : f32 = u_xlat67;
        u_xlat67 = ((x_1621 * x_1622) + x_1624);
        let x_1627 : vec4<f32> = u_xlat13;
        let x_1628 : vec2<f32> = vec2<f32>(x_1627.z, x_1627.w);
        let x_1630 : f32 = u_xlat2.z;
        txVec9 = vec3<f32>(x_1628.x, x_1628.y, x_1630);
        let x_1637 : vec3<f32> = txVec9;
        let x_1639 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1637.xy, x_1637.z);
        u_xlat68 = x_1639;
        let x_1641 : f32 = u_xlat15.y;
        let x_1642 : f32 = u_xlat68;
        let x_1644 : f32 = u_xlat67;
        u_xlat67 = ((x_1641 * x_1642) + x_1644);
        let x_1647 : vec4<f32> = u_xlat10;
        let x_1648 : vec2<f32> = vec2<f32>(x_1647.z, x_1647.w);
        let x_1650 : f32 = u_xlat2.z;
        txVec10 = vec3<f32>(x_1648.x, x_1648.y, x_1650);
        let x_1657 : vec3<f32> = txVec10;
        let x_1659 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1657.xy, x_1657.z);
        u_xlat68 = x_1659;
        let x_1661 : f32 = u_xlat15.z;
        let x_1662 : f32 = u_xlat68;
        let x_1664 : f32 = u_xlat67;
        u_xlat67 = ((x_1661 * x_1662) + x_1664);
        let x_1667 : vec4<f32> = u_xlat9;
        let x_1668 : vec2<f32> = vec2<f32>(x_1667.x, x_1667.y);
        let x_1670 : f32 = u_xlat2.z;
        txVec11 = vec3<f32>(x_1668.x, x_1668.y, x_1670);
        let x_1677 : vec3<f32> = txVec11;
        let x_1679 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1677.xy, x_1677.z);
        u_xlat68 = x_1679;
        let x_1681 : f32 = u_xlat15.w;
        let x_1682 : f32 = u_xlat68;
        let x_1684 : f32 = u_xlat67;
        u_xlat67 = ((x_1681 * x_1682) + x_1684);
        let x_1687 : vec4<f32> = u_xlat9;
        let x_1688 : vec2<f32> = vec2<f32>(x_1687.z, x_1687.w);
        let x_1690 : f32 = u_xlat2.z;
        txVec12 = vec3<f32>(x_1688.x, x_1688.y, x_1690);
        let x_1697 : vec3<f32> = txVec12;
        let x_1699 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1697.xy, x_1697.z);
        u_xlat68 = x_1699;
        let x_1701 : f32 = u_xlat46.x;
        let x_1702 : f32 = u_xlat68;
        let x_1704 : f32 = u_xlat67;
        u_xlat4.x = ((x_1701 * x_1702) + x_1704);
      } else {
        let x_1708 : vec4<f32> = u_xlat2;
        let x_1711 : vec4<f32> = x_854.x_MainLightShadowmapSize;
        u_xlat46 = ((vec2<f32>(x_1708.x, x_1708.y) * vec2<f32>(x_1711.z, x_1711.w)) + vec2<f32>(0.5f, 0.5f));
        let x_1715 : vec2<f32> = u_xlat46;
        u_xlat46 = floor(x_1715);
        let x_1717 : vec4<f32> = u_xlat2;
        let x_1720 : vec4<f32> = x_854.x_MainLightShadowmapSize;
        let x_1723 : vec2<f32> = u_xlat46;
        let x_1725 : vec2<f32> = ((vec2<f32>(x_1717.x, x_1717.y) * vec2<f32>(x_1720.z, x_1720.w)) + -(x_1723));
        let x_1726 : vec4<f32> = u_xlat7;
        u_xlat7 = vec4<f32>(x_1725.x, x_1725.y, x_1726.z, x_1726.w);
        let x_1728 : vec4<f32> = u_xlat7;
        u_xlat8 = (vec4<f32>(x_1728.x, x_1728.x, x_1728.y, x_1728.y) + vec4<f32>(0.5f, 1.0f, 0.5f, 1.0f));
        let x_1731 : vec4<f32> = u_xlat8;
        let x_1733 : vec4<f32> = u_xlat8;
        u_xlat9 = (vec4<f32>(x_1731.x, x_1731.x, x_1731.z, x_1731.z) * vec4<f32>(x_1733.x, x_1733.x, x_1733.z, x_1733.z));
        let x_1736 : vec4<f32> = u_xlat9;
        let x_1740 : vec2<f32> = (vec2<f32>(x_1736.y, x_1736.w) * vec2<f32>(0.040816002f, 0.040816002f));
        let x_1741 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_1741.x, x_1740.x, x_1741.z, x_1740.y);
        let x_1743 : vec4<f32> = u_xlat9;
        let x_1746 : vec4<f32> = u_xlat7;
        u_xlat49 = ((vec2<f32>(x_1743.x, x_1743.z) * vec2<f32>(0.5f, 0.5f)) + -(vec2<f32>(x_1746.x, x_1746.y)));
        let x_1750 : vec4<f32> = u_xlat7;
        let x_1753 : vec2<f32> = (-(vec2<f32>(x_1750.x, x_1750.y)) + vec2<f32>(1.0f, 1.0f));
        let x_1754 : vec4<f32> = u_xlat8;
        u_xlat8 = vec4<f32>(x_1753.x, x_1754.y, x_1753.y, x_1754.w);
        let x_1756 : vec4<f32> = u_xlat7;
        let x_1758 : vec2<f32> = min(vec2<f32>(x_1756.x, x_1756.y), vec2<f32>(0.0f, 0.0f));
        let x_1759 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_1758.x, x_1758.y, x_1759.z, x_1759.w);
        let x_1761 : vec4<f32> = u_xlat9;
        let x_1764 : vec4<f32> = u_xlat9;
        let x_1767 : vec4<f32> = u_xlat8;
        let x_1769 : vec2<f32> = ((-(vec2<f32>(x_1761.x, x_1761.y)) * vec2<f32>(x_1764.x, x_1764.y)) + vec2<f32>(x_1767.x, x_1767.z));
        let x_1770 : vec4<f32> = u_xlat8;
        u_xlat8 = vec4<f32>(x_1769.x, x_1770.y, x_1769.y, x_1770.w);
        let x_1772 : vec4<f32> = u_xlat7;
        let x_1774 : vec2<f32> = max(vec2<f32>(x_1772.x, x_1772.y), vec2<f32>(0.0f, 0.0f));
        let x_1775 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_1774.x, x_1774.y, x_1775.z, x_1775.w);
        let x_1777 : vec4<f32> = u_xlat9;
        let x_1780 : vec4<f32> = u_xlat9;
        let x_1783 : vec4<f32> = u_xlat8;
        let x_1785 : vec2<f32> = ((-(vec2<f32>(x_1777.x, x_1777.y)) * vec2<f32>(x_1780.x, x_1780.y)) + vec2<f32>(x_1783.y, x_1783.w));
        let x_1786 : vec4<f32> = u_xlat8;
        u_xlat8 = vec4<f32>(x_1786.x, x_1785.x, x_1786.z, x_1785.y);
        let x_1788 : vec4<f32> = u_xlat8;
        u_xlat8 = (x_1788 + vec4<f32>(2.0f, 2.0f, 2.0f, 2.0f));
        let x_1792 : f32 = u_xlat8.y;
        u_xlat9.z = (x_1792 * 0.081632003f);
        let x_1796 : vec2<f32> = u_xlat49;
        let x_1799 : vec2<f32> = (vec2<f32>(x_1796.y, x_1796.x) * vec2<f32>(0.081632003f, 0.081632003f));
        let x_1800 : vec4<f32> = u_xlat11;
        u_xlat11 = vec4<f32>(x_1799.x, x_1799.y, x_1800.z, x_1800.w);
        let x_1802 : vec4<f32> = u_xlat8;
        u_xlat49 = (vec2<f32>(x_1802.x, x_1802.z) * vec2<f32>(0.081632003f, 0.081632003f));
        let x_1806 : f32 = u_xlat8.w;
        u_xlat11.z = (x_1806 * 0.081632003f);
        let x_1810 : f32 = u_xlat11.y;
        u_xlat9.x = x_1810;
        let x_1812 : vec4<f32> = u_xlat7;
        let x_1819 : vec2<f32> = ((vec2<f32>(x_1812.x, x_1812.x) * vec2<f32>(-0.081632003f, 0.081632003f)) + vec2<f32>(0.163264006f, 0.081632003f));
        let x_1820 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_1820.x, x_1819.x, x_1820.z, x_1819.y);
        let x_1822 : vec4<f32> = u_xlat7;
        let x_1826 : vec2<f32> = ((vec2<f32>(x_1822.x, x_1822.x) * vec2<f32>(-0.081632003f, 0.081632003f)) + vec2<f32>(0.081632003f, 0.163264006f));
        let x_1827 : vec4<f32> = u_xlat8;
        u_xlat8 = vec4<f32>(x_1826.x, x_1827.y, x_1826.y, x_1827.w);
        let x_1830 : f32 = u_xlat49.x;
        u_xlat8.y = x_1830;
        let x_1833 : f32 = u_xlat10.y;
        u_xlat8.w = x_1833;
        let x_1835 : vec4<f32> = u_xlat8;
        let x_1836 : vec4<f32> = u_xlat9;
        u_xlat9 = (x_1835 + x_1836);
        let x_1838 : vec4<f32> = u_xlat7;
        let x_1841 : vec2<f32> = ((vec2<f32>(x_1838.y, x_1838.y) * vec2<f32>(-0.081632003f, 0.081632003f)) + vec2<f32>(0.163264006f, 0.081632003f));
        let x_1842 : vec4<f32> = u_xlat11;
        u_xlat11 = vec4<f32>(x_1842.x, x_1841.x, x_1842.z, x_1841.y);
        let x_1844 : vec4<f32> = u_xlat7;
        let x_1847 : vec2<f32> = ((vec2<f32>(x_1844.y, x_1844.y) * vec2<f32>(-0.081632003f, 0.081632003f)) + vec2<f32>(0.081632003f, 0.163264006f));
        let x_1848 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_1847.x, x_1848.y, x_1847.y, x_1848.w);
        let x_1851 : f32 = u_xlat49.y;
        u_xlat10.y = x_1851;
        let x_1853 : vec4<f32> = u_xlat10;
        let x_1854 : vec4<f32> = u_xlat11;
        u_xlat7 = (x_1853 + x_1854);
        let x_1856 : vec4<f32> = u_xlat8;
        let x_1857 : vec4<f32> = u_xlat9;
        u_xlat8 = (x_1856 / x_1857);
        let x_1859 : vec4<f32> = u_xlat8;
        u_xlat8 = (x_1859 + vec4<f32>(-3.5f, -1.5f, 0.5f, 2.5f));
        let x_1865 : vec4<f32> = u_xlat10;
        let x_1866 : vec4<f32> = u_xlat7;
        u_xlat10 = (x_1865 / x_1866);
        let x_1868 : vec4<f32> = u_xlat10;
        u_xlat10 = (x_1868 + vec4<f32>(-3.5f, -1.5f, 0.5f, 2.5f));
        let x_1870 : vec4<f32> = u_xlat8;
        let x_1873 : vec4<f32> = x_854.x_MainLightShadowmapSize;
        u_xlat8 = (vec4<f32>(x_1870.w, x_1870.x, x_1870.y, x_1870.z) * vec4<f32>(x_1873.x, x_1873.x, x_1873.x, x_1873.x));
        let x_1876 : vec4<f32> = u_xlat10;
        let x_1879 : vec4<f32> = x_854.x_MainLightShadowmapSize;
        u_xlat10 = (vec4<f32>(x_1876.x, x_1876.w, x_1876.y, x_1876.z) * vec4<f32>(x_1879.y, x_1879.y, x_1879.y, x_1879.y));
        let x_1882 : vec4<f32> = u_xlat8;
        let x_1883 : vec3<f32> = vec3<f32>(x_1882.y, x_1882.z, x_1882.w);
        let x_1884 : vec4<f32> = u_xlat11;
        u_xlat11 = vec4<f32>(x_1883.x, x_1884.y, x_1883.y, x_1883.z);
        let x_1887 : f32 = u_xlat10.x;
        u_xlat11.y = x_1887;
        let x_1889 : vec2<f32> = u_xlat46;
        let x_1892 : vec4<f32> = x_854.x_MainLightShadowmapSize;
        let x_1895 : vec4<f32> = u_xlat11;
        u_xlat12 = ((vec4<f32>(x_1889.x, x_1889.y, x_1889.x, x_1889.y) * vec4<f32>(x_1892.x, x_1892.y, x_1892.x, x_1892.y)) + vec4<f32>(x_1895.x, x_1895.y, x_1895.z, x_1895.y));
        let x_1898 : vec2<f32> = u_xlat46;
        let x_1900 : vec4<f32> = x_854.x_MainLightShadowmapSize;
        let x_1903 : vec4<f32> = u_xlat11;
        let x_1905 : vec2<f32> = ((x_1898 * vec2<f32>(x_1900.x, x_1900.y)) + vec2<f32>(x_1903.w, x_1903.y));
        let x_1906 : vec4<f32> = u_xlat13;
        u_xlat13 = vec4<f32>(x_1905.x, x_1905.y, x_1906.z, x_1906.w);
        let x_1909 : f32 = u_xlat11.y;
        u_xlat8.y = x_1909;
        let x_1912 : f32 = u_xlat10.z;
        u_xlat11.y = x_1912;
        let x_1914 : vec2<f32> = u_xlat46;
        let x_1917 : vec4<f32> = x_854.x_MainLightShadowmapSize;
        let x_1920 : vec4<f32> = u_xlat11;
        u_xlat14 = ((vec4<f32>(x_1914.x, x_1914.y, x_1914.x, x_1914.y) * vec4<f32>(x_1917.x, x_1917.y, x_1917.x, x_1917.y)) + vec4<f32>(x_1920.x, x_1920.y, x_1920.z, x_1920.y));
        let x_1924 : vec2<f32> = u_xlat46;
        let x_1926 : vec4<f32> = x_854.x_MainLightShadowmapSize;
        let x_1929 : vec4<f32> = u_xlat11;
        u_xlat55 = ((x_1924 * vec2<f32>(x_1926.x, x_1926.y)) + vec2<f32>(x_1929.w, x_1929.y));
        let x_1933 : f32 = u_xlat11.y;
        u_xlat8.z = x_1933;
        let x_1935 : vec2<f32> = u_xlat46;
        let x_1938 : vec4<f32> = x_854.x_MainLightShadowmapSize;
        let x_1941 : vec4<f32> = u_xlat8;
        u_xlat15 = ((vec4<f32>(x_1935.x, x_1935.y, x_1935.x, x_1935.y) * vec4<f32>(x_1938.x, x_1938.y, x_1938.x, x_1938.y)) + vec4<f32>(x_1941.x, x_1941.y, x_1941.x, x_1941.z));
        let x_1945 : f32 = u_xlat10.w;
        u_xlat11.y = x_1945;
        let x_1948 : vec2<f32> = u_xlat46;
        let x_1951 : vec4<f32> = x_854.x_MainLightShadowmapSize;
        let x_1954 : vec4<f32> = u_xlat11;
        u_xlat16 = ((vec4<f32>(x_1948.x, x_1948.y, x_1948.x, x_1948.y) * vec4<f32>(x_1951.x, x_1951.y, x_1951.x, x_1951.y)) + vec4<f32>(x_1954.x, x_1954.y, x_1954.z, x_1954.y));
        let x_1958 : vec2<f32> = u_xlat46;
        let x_1960 : vec4<f32> = x_854.x_MainLightShadowmapSize;
        let x_1963 : vec4<f32> = u_xlat11;
        u_xlat29 = ((x_1958 * vec2<f32>(x_1960.x, x_1960.y)) + vec2<f32>(x_1963.w, x_1963.y));
        let x_1967 : f32 = u_xlat11.y;
        u_xlat8.w = x_1967;
        let x_1970 : vec2<f32> = u_xlat46;
        let x_1972 : vec4<f32> = x_854.x_MainLightShadowmapSize;
        let x_1975 : vec4<f32> = u_xlat8;
        u_xlat17 = ((x_1970 * vec2<f32>(x_1972.x, x_1972.y)) + vec2<f32>(x_1975.x, x_1975.w));
        let x_1978 : vec4<f32> = u_xlat11;
        let x_1979 : vec3<f32> = vec3<f32>(x_1978.x, x_1978.z, x_1978.w);
        let x_1980 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_1979.x, x_1980.y, x_1979.y, x_1979.z);
        let x_1982 : vec2<f32> = u_xlat46;
        let x_1985 : vec4<f32> = x_854.x_MainLightShadowmapSize;
        let x_1988 : vec4<f32> = u_xlat10;
        u_xlat11 = ((vec4<f32>(x_1982.x, x_1982.y, x_1982.x, x_1982.y) * vec4<f32>(x_1985.x, x_1985.y, x_1985.x, x_1985.y)) + vec4<f32>(x_1988.x, x_1988.y, x_1988.z, x_1988.y));
        let x_1992 : vec2<f32> = u_xlat46;
        let x_1994 : vec4<f32> = x_854.x_MainLightShadowmapSize;
        let x_1997 : vec4<f32> = u_xlat10;
        u_xlat52 = ((x_1992 * vec2<f32>(x_1994.x, x_1994.y)) + vec2<f32>(x_1997.w, x_1997.y));
        let x_2001 : f32 = u_xlat8.x;
        u_xlat10.x = x_2001;
        let x_2003 : vec2<f32> = u_xlat46;
        let x_2005 : vec4<f32> = x_854.x_MainLightShadowmapSize;
        let x_2008 : vec4<f32> = u_xlat10;
        u_xlat46 = ((x_2003 * vec2<f32>(x_2005.x, x_2005.y)) + vec2<f32>(x_2008.x, x_2008.y));
        let x_2012 : vec4<f32> = u_xlat7;
        let x_2014 : vec4<f32> = u_xlat9;
        u_xlat18 = (vec4<f32>(x_2012.x, x_2012.x, x_2012.x, x_2012.x) * x_2014);
        let x_2017 : vec4<f32> = u_xlat7;
        let x_2019 : vec4<f32> = u_xlat9;
        u_xlat19 = (vec4<f32>(x_2017.y, x_2017.y, x_2017.y, x_2017.y) * x_2019);
        let x_2022 : vec4<f32> = u_xlat7;
        let x_2024 : vec4<f32> = u_xlat9;
        u_xlat20 = (vec4<f32>(x_2022.z, x_2022.z, x_2022.z, x_2022.z) * x_2024);
        let x_2026 : vec4<f32> = u_xlat7;
        let x_2028 : vec4<f32> = u_xlat9;
        u_xlat7 = (vec4<f32>(x_2026.w, x_2026.w, x_2026.w, x_2026.w) * x_2028);
        let x_2031 : vec4<f32> = u_xlat12;
        let x_2032 : vec2<f32> = vec2<f32>(x_2031.x, x_2031.y);
        let x_2034 : f32 = u_xlat2.z;
        txVec13 = vec3<f32>(x_2032.x, x_2032.y, x_2034);
        let x_2041 : vec3<f32> = txVec13;
        let x_2043 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2041.xy, x_2041.z);
        u_xlat68 = x_2043;
        let x_2045 : vec4<f32> = u_xlat12;
        let x_2046 : vec2<f32> = vec2<f32>(x_2045.z, x_2045.w);
        let x_2048 : f32 = u_xlat2.z;
        txVec14 = vec3<f32>(x_2046.x, x_2046.y, x_2048);
        let x_2056 : vec3<f32> = txVec14;
        let x_2058 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2056.xy, x_2056.z);
        u_xlat69 = x_2058;
        let x_2059 : f32 = u_xlat69;
        let x_2061 : f32 = u_xlat18.y;
        u_xlat69 = (x_2059 * x_2061);
        let x_2064 : f32 = u_xlat18.x;
        let x_2065 : f32 = u_xlat68;
        let x_2067 : f32 = u_xlat69;
        u_xlat68 = ((x_2064 * x_2065) + x_2067);
        let x_2070 : vec4<f32> = u_xlat13;
        let x_2071 : vec2<f32> = vec2<f32>(x_2070.x, x_2070.y);
        let x_2073 : f32 = u_xlat2.z;
        txVec15 = vec3<f32>(x_2071.x, x_2071.y, x_2073);
        let x_2080 : vec3<f32> = txVec15;
        let x_2082 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2080.xy, x_2080.z);
        u_xlat69 = x_2082;
        let x_2084 : f32 = u_xlat18.z;
        let x_2085 : f32 = u_xlat69;
        let x_2087 : f32 = u_xlat68;
        u_xlat68 = ((x_2084 * x_2085) + x_2087);
        let x_2090 : vec4<f32> = u_xlat15;
        let x_2091 : vec2<f32> = vec2<f32>(x_2090.x, x_2090.y);
        let x_2093 : f32 = u_xlat2.z;
        txVec16 = vec3<f32>(x_2091.x, x_2091.y, x_2093);
        let x_2100 : vec3<f32> = txVec16;
        let x_2102 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2100.xy, x_2100.z);
        u_xlat69 = x_2102;
        let x_2104 : f32 = u_xlat18.w;
        let x_2105 : f32 = u_xlat69;
        let x_2107 : f32 = u_xlat68;
        u_xlat68 = ((x_2104 * x_2105) + x_2107);
        let x_2110 : vec4<f32> = u_xlat14;
        let x_2111 : vec2<f32> = vec2<f32>(x_2110.x, x_2110.y);
        let x_2113 : f32 = u_xlat2.z;
        txVec17 = vec3<f32>(x_2111.x, x_2111.y, x_2113);
        let x_2120 : vec3<f32> = txVec17;
        let x_2122 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2120.xy, x_2120.z);
        u_xlat69 = x_2122;
        let x_2124 : f32 = u_xlat19.x;
        let x_2125 : f32 = u_xlat69;
        let x_2127 : f32 = u_xlat68;
        u_xlat68 = ((x_2124 * x_2125) + x_2127);
        let x_2130 : vec4<f32> = u_xlat14;
        let x_2131 : vec2<f32> = vec2<f32>(x_2130.z, x_2130.w);
        let x_2133 : f32 = u_xlat2.z;
        txVec18 = vec3<f32>(x_2131.x, x_2131.y, x_2133);
        let x_2140 : vec3<f32> = txVec18;
        let x_2142 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2140.xy, x_2140.z);
        u_xlat69 = x_2142;
        let x_2144 : f32 = u_xlat19.y;
        let x_2145 : f32 = u_xlat69;
        let x_2147 : f32 = u_xlat68;
        u_xlat68 = ((x_2144 * x_2145) + x_2147);
        let x_2150 : vec2<f32> = u_xlat55;
        let x_2152 : f32 = u_xlat2.z;
        txVec19 = vec3<f32>(x_2150.x, x_2150.y, x_2152);
        let x_2159 : vec3<f32> = txVec19;
        let x_2161 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2159.xy, x_2159.z);
        u_xlat69 = x_2161;
        let x_2163 : f32 = u_xlat19.z;
        let x_2164 : f32 = u_xlat69;
        let x_2166 : f32 = u_xlat68;
        u_xlat68 = ((x_2163 * x_2164) + x_2166);
        let x_2169 : vec4<f32> = u_xlat15;
        let x_2170 : vec2<f32> = vec2<f32>(x_2169.z, x_2169.w);
        let x_2172 : f32 = u_xlat2.z;
        txVec20 = vec3<f32>(x_2170.x, x_2170.y, x_2172);
        let x_2179 : vec3<f32> = txVec20;
        let x_2181 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2179.xy, x_2179.z);
        u_xlat69 = x_2181;
        let x_2183 : f32 = u_xlat19.w;
        let x_2184 : f32 = u_xlat69;
        let x_2186 : f32 = u_xlat68;
        u_xlat68 = ((x_2183 * x_2184) + x_2186);
        let x_2189 : vec4<f32> = u_xlat16;
        let x_2190 : vec2<f32> = vec2<f32>(x_2189.x, x_2189.y);
        let x_2192 : f32 = u_xlat2.z;
        txVec21 = vec3<f32>(x_2190.x, x_2190.y, x_2192);
        let x_2199 : vec3<f32> = txVec21;
        let x_2201 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2199.xy, x_2199.z);
        u_xlat69 = x_2201;
        let x_2203 : f32 = u_xlat20.x;
        let x_2204 : f32 = u_xlat69;
        let x_2206 : f32 = u_xlat68;
        u_xlat68 = ((x_2203 * x_2204) + x_2206);
        let x_2209 : vec4<f32> = u_xlat16;
        let x_2210 : vec2<f32> = vec2<f32>(x_2209.z, x_2209.w);
        let x_2212 : f32 = u_xlat2.z;
        txVec22 = vec3<f32>(x_2210.x, x_2210.y, x_2212);
        let x_2219 : vec3<f32> = txVec22;
        let x_2221 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2219.xy, x_2219.z);
        u_xlat69 = x_2221;
        let x_2223 : f32 = u_xlat20.y;
        let x_2224 : f32 = u_xlat69;
        let x_2226 : f32 = u_xlat68;
        u_xlat68 = ((x_2223 * x_2224) + x_2226);
        let x_2229 : vec2<f32> = u_xlat29;
        let x_2231 : f32 = u_xlat2.z;
        txVec23 = vec3<f32>(x_2229.x, x_2229.y, x_2231);
        let x_2238 : vec3<f32> = txVec23;
        let x_2240 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2238.xy, x_2238.z);
        u_xlat69 = x_2240;
        let x_2242 : f32 = u_xlat20.z;
        let x_2243 : f32 = u_xlat69;
        let x_2245 : f32 = u_xlat68;
        u_xlat68 = ((x_2242 * x_2243) + x_2245);
        let x_2248 : vec2<f32> = u_xlat17;
        let x_2250 : f32 = u_xlat2.z;
        txVec24 = vec3<f32>(x_2248.x, x_2248.y, x_2250);
        let x_2257 : vec3<f32> = txVec24;
        let x_2259 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2257.xy, x_2257.z);
        u_xlat69 = x_2259;
        let x_2261 : f32 = u_xlat20.w;
        let x_2262 : f32 = u_xlat69;
        let x_2264 : f32 = u_xlat68;
        u_xlat68 = ((x_2261 * x_2262) + x_2264);
        let x_2267 : vec4<f32> = u_xlat11;
        let x_2268 : vec2<f32> = vec2<f32>(x_2267.x, x_2267.y);
        let x_2270 : f32 = u_xlat2.z;
        txVec25 = vec3<f32>(x_2268.x, x_2268.y, x_2270);
        let x_2277 : vec3<f32> = txVec25;
        let x_2279 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2277.xy, x_2277.z);
        u_xlat69 = x_2279;
        let x_2281 : f32 = u_xlat7.x;
        let x_2282 : f32 = u_xlat69;
        let x_2284 : f32 = u_xlat68;
        u_xlat68 = ((x_2281 * x_2282) + x_2284);
        let x_2287 : vec4<f32> = u_xlat11;
        let x_2288 : vec2<f32> = vec2<f32>(x_2287.z, x_2287.w);
        let x_2290 : f32 = u_xlat2.z;
        txVec26 = vec3<f32>(x_2288.x, x_2288.y, x_2290);
        let x_2297 : vec3<f32> = txVec26;
        let x_2299 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2297.xy, x_2297.z);
        u_xlat69 = x_2299;
        let x_2301 : f32 = u_xlat7.y;
        let x_2302 : f32 = u_xlat69;
        let x_2304 : f32 = u_xlat68;
        u_xlat68 = ((x_2301 * x_2302) + x_2304);
        let x_2307 : vec2<f32> = u_xlat52;
        let x_2309 : f32 = u_xlat2.z;
        txVec27 = vec3<f32>(x_2307.x, x_2307.y, x_2309);
        let x_2316 : vec3<f32> = txVec27;
        let x_2318 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2316.xy, x_2316.z);
        u_xlat69 = x_2318;
        let x_2320 : f32 = u_xlat7.z;
        let x_2321 : f32 = u_xlat69;
        let x_2323 : f32 = u_xlat68;
        u_xlat68 = ((x_2320 * x_2321) + x_2323);
        let x_2326 : vec2<f32> = u_xlat46;
        let x_2328 : f32 = u_xlat2.z;
        txVec28 = vec3<f32>(x_2326.x, x_2326.y, x_2328);
        let x_2335 : vec3<f32> = txVec28;
        let x_2337 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2335.xy, x_2335.z);
        u_xlat46.x = x_2337;
        let x_2340 : f32 = u_xlat7.w;
        let x_2342 : f32 = u_xlat46.x;
        let x_2344 : f32 = u_xlat68;
        u_xlat4.x = ((x_2340 * x_2342) + x_2344);
      }
    }
  } else {
    let x_2349 : vec4<f32> = u_xlat2;
    let x_2350 : vec2<f32> = vec2<f32>(x_2349.x, x_2349.y);
    let x_2352 : f32 = u_xlat2.z;
    txVec29 = vec3<f32>(x_2350.x, x_2350.y, x_2352);
    let x_2359 : vec3<f32> = txVec29;
    let x_2361 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2359.xy, x_2359.z);
    u_xlat4.x = x_2361;
  }
  let x_2364 : f32 = x_854.x_MainLightShadowParams.x;
  u_xlat2.x = (-(x_2364) + 1.0f);
  let x_2369 : f32 = u_xlat4.x;
  let x_2371 : f32 = x_854.x_MainLightShadowParams.x;
  let x_2374 : f32 = u_xlat2.x;
  u_xlat2.x = ((x_2369 * x_2371) + x_2374);
  let x_2379 : f32 = u_xlat2.z;
  u_xlatb23 = (0.0f >= x_2379);
  let x_2383 : f32 = u_xlat2.z;
  u_xlatb44 = (x_2383 >= 1.0f);
  let x_2385 : bool = u_xlatb44;
  let x_2386 : bool = u_xlatb23;
  u_xlatb23 = (x_2385 | x_2386);
  let x_2388 : bool = u_xlatb23;
  if (x_2388) {
    x_2389 = 1.0f;
  } else {
    let x_2394 : f32 = u_xlat2.x;
    x_2389 = x_2394;
  }
  let x_2395 : f32 = x_2389;
  u_xlat2.x = x_2395;
  let x_2397 : vec3<f32> = vs_TEXCOORD7;
  let x_2400 : vec3<f32> = x_127.x_WorldSpaceCameraPos;
  let x_2402 : vec3<f32> = (x_2397 + -(x_2400));
  let x_2403 : vec4<f32> = u_xlat4;
  u_xlat4 = vec4<f32>(x_2402.x, x_2403.y, x_2402.y, x_2402.z);
  let x_2406 : vec4<f32> = u_xlat4;
  let x_2408 : vec4<f32> = u_xlat4;
  u_xlat23.x = dot(vec3<f32>(x_2406.x, x_2406.z, x_2406.w), vec3<f32>(x_2408.x, x_2408.z, x_2408.w));
  let x_2413 : f32 = u_xlat23.x;
  let x_2415 : f32 = x_854.x_MainLightShadowParams.z;
  let x_2418 : f32 = x_854.x_MainLightShadowParams.w;
  u_xlat23.x = ((x_2413 * x_2415) + x_2418);
  let x_2422 : f32 = u_xlat23.x;
  u_xlat23.x = clamp(x_2422, 0.0f, 1.0f);
  let x_2427 : f32 = u_xlat2.x;
  u_xlat44 = (-(x_2427) + 1.0f);
  let x_2431 : f32 = u_xlat23.x;
  let x_2432 : f32 = u_xlat44;
  let x_2435 : f32 = u_xlat2.x;
  u_xlat2.x = ((x_2431 * x_2432) + x_2435);
  let x_2438 : f32 = u_xlat25;
  let x_2441 : vec4<f32> = x_127.x_MainLightColor;
  let x_2443 : vec3<f32> = (vec3<f32>(x_2438, x_2438, x_2438) * vec3<f32>(x_2441.x, x_2441.y, x_2441.z));
  let x_2444 : vec4<f32> = u_xlat4;
  u_xlat4 = vec4<f32>(x_2443.x, x_2444.y, x_2443.y, x_2443.z);
  let x_2447 : f32 = vs_TEXCOORD3.w;
  u_xlat7.x = x_2447;
  let x_2450 : f32 = vs_TEXCOORD4.w;
  u_xlat7.y = x_2450;
  let x_2453 : f32 = vs_TEXCOORD5.w;
  u_xlat7.z = x_2453;
  let x_2455 : vec4<f32> = u_xlat7;
  let x_2458 : vec4<f32> = u_xlat1;
  u_xlat23.x = dot(-(vec3<f32>(x_2455.x, x_2455.y, x_2455.z)), vec3<f32>(x_2458.x, x_2458.y, x_2458.z));
  let x_2463 : f32 = u_xlat23.x;
  let x_2465 : f32 = u_xlat23.x;
  u_xlat23.x = (x_2463 + x_2465);
  let x_2468 : vec4<f32> = u_xlat1;
  let x_2470 : vec3<f32> = u_xlat23;
  let x_2474 : vec4<f32> = u_xlat7;
  let x_2477 : vec3<f32> = ((vec3<f32>(x_2468.x, x_2468.y, x_2468.z) * -(vec3<f32>(x_2470.x, x_2470.x, x_2470.x))) + -(vec3<f32>(x_2474.x, x_2474.y, x_2474.z)));
  let x_2478 : vec4<f32> = u_xlat8;
  u_xlat8 = vec4<f32>(x_2477.x, x_2477.y, x_2477.z, x_2478.w);
  let x_2480 : vec4<f32> = u_xlat1;
  let x_2482 : vec4<f32> = u_xlat7;
  u_xlat23.x = dot(vec3<f32>(x_2480.x, x_2480.y, x_2480.z), vec3<f32>(x_2482.x, x_2482.y, x_2482.z));
  let x_2487 : f32 = u_xlat23.x;
  u_xlat23.x = clamp(x_2487, 0.0f, 1.0f);
  let x_2491 : f32 = u_xlat23.x;
  u_xlat23.x = (-(x_2491) + 1.0f);
  let x_2496 : f32 = u_xlat23.x;
  let x_2498 : f32 = u_xlat23.x;
  u_xlat23.x = (x_2496 * x_2498);
  let x_2502 : f32 = u_xlat23.x;
  let x_2504 : f32 = u_xlat23.x;
  u_xlat23.x = (x_2502 * x_2504);
  let x_2508 : f32 = u_xlat0.x;
  u_xlat44 = ((-(x_2508) * 0.699999988f) + 1.700000048f);
  let x_2515 : f32 = u_xlat0.x;
  let x_2516 : f32 = u_xlat44;
  u_xlat0.x = (x_2515 * x_2516);
  let x_2520 : f32 = u_xlat0.x;
  u_xlat0.x = (x_2520 * 6.0f);
  let x_2532 : vec4<f32> = u_xlat8;
  let x_2535 : f32 = u_xlat0.x;
  let x_2536 : vec4<f32> = textureSampleLevel(unity_SpecCube0, samplerunity_SpecCube0, vec3<f32>(x_2532.x, x_2532.y, x_2532.z), x_2535);
  u_xlat8 = x_2536;
  let x_2538 : f32 = u_xlat8.w;
  u_xlat0.x = (x_2538 + -1.0f);
  let x_2546 : f32 = x_2544.unity_SpecCube0_HDR.w;
  let x_2548 : f32 = u_xlat0.x;
  u_xlat0.x = ((x_2546 * x_2548) + 1.0f);
  let x_2553 : f32 = u_xlat0.x;
  u_xlat0.x = max(x_2553, 0.0f);
  let x_2557 : f32 = u_xlat0.x;
  u_xlat0.x = log2(x_2557);
  let x_2561 : f32 = u_xlat0.x;
  let x_2563 : f32 = x_2544.unity_SpecCube0_HDR.y;
  u_xlat0.x = (x_2561 * x_2563);
  let x_2567 : f32 = u_xlat0.x;
  u_xlat0.x = exp2(x_2567);
  let x_2571 : f32 = u_xlat0.x;
  let x_2573 : f32 = x_2544.unity_SpecCube0_HDR.x;
  u_xlat0.x = (x_2571 * x_2573);
  let x_2576 : vec4<f32> = u_xlat8;
  let x_2578 : vec3<f32> = u_xlat0;
  let x_2580 : vec3<f32> = (vec3<f32>(x_2576.x, x_2576.y, x_2576.z) * vec3<f32>(x_2578.x, x_2578.x, x_2578.x));
  let x_2581 : vec4<f32> = u_xlat8;
  u_xlat8 = vec4<f32>(x_2580.x, x_2580.y, x_2580.z, x_2581.w);
  let x_2583 : f32 = u_xlat42;
  let x_2585 : f32 = u_xlat42;
  let x_2589 : vec2<f32> = ((vec2<f32>(x_2583, x_2583) * vec2<f32>(x_2585, x_2585)) + vec2<f32>(-1.0f, 1.0f));
  let x_2590 : vec3<f32> = u_xlat0;
  u_xlat0 = vec3<f32>(x_2589.x, x_2590.y, x_2589.y);
  let x_2593 : f32 = u_xlat0.z;
  u_xlat42 = (1.0f / x_2593);
  let x_2595 : vec4<f32> = u_xlat5;
  let x_2598 : f32 = u_xlat65;
  let x_2600 : vec3<f32> = (-(vec3<f32>(x_2595.x, x_2595.y, x_2595.z)) + vec3<f32>(x_2598, x_2598, x_2598));
  let x_2601 : vec4<f32> = u_xlat9;
  u_xlat9 = vec4<f32>(x_2600.x, x_2600.y, x_2600.z, x_2601.w);
  let x_2603 : vec3<f32> = u_xlat23;
  let x_2605 : vec4<f32> = u_xlat9;
  let x_2608 : vec4<f32> = u_xlat5;
  u_xlat23 = ((vec3<f32>(x_2603.x, x_2603.x, x_2603.x) * vec3<f32>(x_2605.x, x_2605.y, x_2605.z)) + vec3<f32>(x_2608.x, x_2608.y, x_2608.z));
  let x_2611 : f32 = u_xlat42;
  let x_2613 : vec3<f32> = u_xlat23;
  u_xlat23 = (vec3<f32>(x_2611, x_2611, x_2611) * x_2613);
  let x_2615 : vec3<f32> = u_xlat23;
  let x_2616 : vec4<f32> = u_xlat8;
  u_xlat23 = (x_2615 * vec3<f32>(x_2616.x, x_2616.y, x_2616.z));
  let x_2619 : vec4<f32> = u_xlat3;
  let x_2621 : vec4<f32> = u_xlat6;
  let x_2624 : vec3<f32> = u_xlat23;
  u_xlat23 = ((vec3<f32>(x_2619.x, x_2619.y, x_2619.z) * vec3<f32>(x_2621.x, x_2621.y, x_2621.z)) + x_2624);
  let x_2627 : f32 = u_xlat2.x;
  let x_2629 : f32 = x_2544.unity_LightData.z;
  u_xlat42 = (x_2627 * x_2629);
  let x_2631 : vec4<f32> = u_xlat1;
  let x_2634 : vec4<f32> = x_127.x_MainLightPosition;
  u_xlat2.x = dot(vec3<f32>(x_2631.x, x_2631.y, x_2631.z), vec3<f32>(x_2634.x, x_2634.y, x_2634.z));
  let x_2639 : f32 = u_xlat2.x;
  u_xlat2.x = clamp(x_2639, 0.0f, 1.0f);
  let x_2642 : f32 = u_xlat42;
  let x_2644 : f32 = u_xlat2.x;
  u_xlat42 = (x_2642 * x_2644);
  let x_2646 : f32 = u_xlat42;
  let x_2648 : vec4<f32> = u_xlat4;
  let x_2650 : vec3<f32> = (vec3<f32>(x_2646, x_2646, x_2646) * vec3<f32>(x_2648.x, x_2648.z, x_2648.w));
  let x_2651 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_2650.x, x_2650.y, x_2650.z, x_2651.w);
  let x_2653 : vec4<f32> = u_xlat7;
  let x_2656 : vec4<f32> = x_127.x_MainLightPosition;
  let x_2658 : vec3<f32> = (vec3<f32>(x_2653.x, x_2653.y, x_2653.z) + vec3<f32>(x_2656.x, x_2656.y, x_2656.z));
  let x_2659 : vec4<f32> = u_xlat4;
  u_xlat4 = vec4<f32>(x_2658.x, x_2659.y, x_2658.y, x_2658.z);
  let x_2661 : vec4<f32> = u_xlat4;
  let x_2663 : vec4<f32> = u_xlat4;
  u_xlat42 = dot(vec3<f32>(x_2661.x, x_2661.z, x_2661.w), vec3<f32>(x_2663.x, x_2663.z, x_2663.w));
  let x_2666 : f32 = u_xlat42;
  u_xlat42 = max(x_2666, 1.17549435e-37f);
  let x_2669 : f32 = u_xlat42;
  u_xlat42 = inverseSqrt(x_2669);
  let x_2671 : f32 = u_xlat42;
  let x_2673 : vec4<f32> = u_xlat4;
  let x_2675 : vec3<f32> = (vec3<f32>(x_2671, x_2671, x_2671) * vec3<f32>(x_2673.x, x_2673.z, x_2673.w));
  let x_2676 : vec4<f32> = u_xlat4;
  u_xlat4 = vec4<f32>(x_2675.x, x_2676.y, x_2675.y, x_2675.z);
  let x_2678 : vec4<f32> = u_xlat1;
  let x_2680 : vec4<f32> = u_xlat4;
  u_xlat42 = dot(vec3<f32>(x_2678.x, x_2678.y, x_2678.z), vec3<f32>(x_2680.x, x_2680.z, x_2680.w));
  let x_2683 : f32 = u_xlat42;
  u_xlat42 = clamp(x_2683, 0.0f, 1.0f);
  let x_2686 : vec4<f32> = x_127.x_MainLightPosition;
  let x_2688 : vec4<f32> = u_xlat4;
  u_xlat2.x = dot(vec3<f32>(x_2686.x, x_2686.y, x_2686.z), vec3<f32>(x_2688.x, x_2688.z, x_2688.w));
  let x_2693 : f32 = u_xlat2.x;
  u_xlat2.x = clamp(x_2693, 0.0f, 1.0f);
  let x_2696 : f32 = u_xlat42;
  let x_2697 : f32 = u_xlat42;
  u_xlat42 = (x_2696 * x_2697);
  let x_2699 : f32 = u_xlat42;
  let x_2701 : f32 = u_xlat0.x;
  u_xlat42 = ((x_2699 * x_2701) + 1.000010014f);
  let x_2706 : f32 = u_xlat2.x;
  let x_2708 : f32 = u_xlat2.x;
  u_xlat2.x = (x_2706 * x_2708);
  let x_2711 : f32 = u_xlat42;
  let x_2712 : f32 = u_xlat42;
  u_xlat42 = (x_2711 * x_2712);
  let x_2715 : f32 = u_xlat2.x;
  u_xlat2.x = max(x_2715, 0.100000001f);
  let x_2719 : f32 = u_xlat42;
  let x_2721 : f32 = u_xlat2.x;
  u_xlat42 = (x_2719 * x_2721);
  let x_2723 : f32 = u_xlat66;
  let x_2724 : f32 = u_xlat42;
  u_xlat42 = (x_2723 * x_2724);
  let x_2726 : f32 = u_xlat64;
  let x_2727 : f32 = u_xlat42;
  u_xlat42 = (x_2726 / x_2727);
  let x_2729 : vec4<f32> = u_xlat5;
  let x_2731 : f32 = u_xlat42;
  let x_2734 : vec4<f32> = u_xlat6;
  let x_2736 : vec3<f32> = ((vec3<f32>(x_2729.x, x_2729.y, x_2729.z) * vec3<f32>(x_2731, x_2731, x_2731)) + vec3<f32>(x_2734.x, x_2734.y, x_2734.z));
  let x_2737 : vec4<f32> = u_xlat4;
  u_xlat4 = vec4<f32>(x_2736.x, x_2737.y, x_2736.y, x_2736.z);
  let x_2739 : vec4<f32> = u_xlat3;
  let x_2741 : vec4<f32> = u_xlat4;
  let x_2743 : vec3<f32> = (vec3<f32>(x_2739.x, x_2739.y, x_2739.z) * vec3<f32>(x_2741.x, x_2741.z, x_2741.w));
  let x_2744 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_2743.x, x_2743.y, x_2743.z, x_2744.w);
  let x_2747 : f32 = x_127.x_AdditionalLightsCount.x;
  let x_2749 : f32 = x_2544.unity_LightData.y;
  u_xlat42 = min(x_2747, x_2749);
  let x_2752 : f32 = u_xlat42;
  u_xlatu42 = bitcast<u32>(i32(x_2752));
  u_xlat4.x = 0.0f;
  u_xlat4.z = 0.0f;
  u_xlat4.w = 0.0f;
  u_xlatu_loop_1 = 0u;
  loop {
    let x_2764 : u32 = u_xlatu_loop_1;
    let x_2765 : u32 = u_xlatu42;
    if ((x_2764 < x_2765)) {
    } else {
      break;
    }
    let x_2768 : u32 = u_xlatu_loop_1;
    u_xlatu68 = (x_2768 >> 2u);
    let x_2771 : u32 = u_xlatu_loop_1;
    u_xlati69 = bitcast<i32>((x_2771 & 3u));
    let x_2774 : u32 = u_xlatu68;
    let x_2777 : vec4<f32> = x_2544.unity_LightIndices[bitcast<i32>(x_2774)];
    let x_2787 : i32 = u_xlati69;
    indexable = array<vec4<u32>, 4u>(vec4<u32>(1065353216u, 0u, 0u, 0u), vec4<u32>(0u, 1065353216u, 0u, 0u), vec4<u32>(0u, 0u, 1065353216u, 0u), vec4<u32>(0u, 0u, 0u, 1065353216u));
    let x_2792 : vec4<u32> = indexable[x_2787];
    u_xlat68 = dot(x_2777, bitcast<vec4<f32>>(x_2792));
    let x_2796 : f32 = u_xlat68;
    u_xlati68 = i32(x_2796);
    let x_2798 : vec3<f32> = vs_TEXCOORD7;
    let x_2810 : i32 = u_xlati68;
    let x_2812 : vec4<f32> = x_2809.x_AdditionalLightsPosition[x_2810];
    let x_2815 : i32 = u_xlati68;
    let x_2817 : vec4<f32> = x_2809.x_AdditionalLightsPosition[x_2815];
    let x_2819 : vec3<f32> = ((-(x_2798) * vec3<f32>(x_2812.w, x_2812.w, x_2812.w)) + vec3<f32>(x_2817.x, x_2817.y, x_2817.z));
    let x_2820 : vec4<f32> = u_xlat8;
    u_xlat8 = vec4<f32>(x_2819.x, x_2819.y, x_2819.z, x_2820.w);
    let x_2822 : vec4<f32> = u_xlat8;
    let x_2824 : vec4<f32> = u_xlat8;
    u_xlat69 = dot(vec3<f32>(x_2822.x, x_2822.y, x_2822.z), vec3<f32>(x_2824.x, x_2824.y, x_2824.z));
    let x_2827 : f32 = u_xlat69;
    u_xlat69 = max(x_2827, 6.10351562e-05f);
    let x_2830 : f32 = u_xlat69;
    u_xlat70 = inverseSqrt(x_2830);
    let x_2832 : f32 = u_xlat70;
    let x_2834 : vec4<f32> = u_xlat8;
    let x_2836 : vec3<f32> = (vec3<f32>(x_2832, x_2832, x_2832) * vec3<f32>(x_2834.x, x_2834.y, x_2834.z));
    let x_2837 : vec4<f32> = u_xlat9;
    u_xlat9 = vec4<f32>(x_2836.x, x_2836.y, x_2836.z, x_2837.w);
    let x_2840 : f32 = u_xlat69;
    u_xlat71 = (1.0f / x_2840);
    let x_2842 : f32 = u_xlat69;
    let x_2843 : i32 = u_xlati68;
    let x_2845 : f32 = x_2809.x_AdditionalLightsAttenuation[x_2843].x;
    u_xlat69 = (x_2842 * x_2845);
    let x_2847 : f32 = u_xlat69;
    let x_2849 : f32 = u_xlat69;
    u_xlat69 = ((-(x_2847) * x_2849) + 1.0f);
    let x_2852 : f32 = u_xlat69;
    u_xlat69 = max(x_2852, 0.0f);
    let x_2854 : f32 = u_xlat69;
    let x_2855 : f32 = u_xlat69;
    u_xlat69 = (x_2854 * x_2855);
    let x_2857 : f32 = u_xlat69;
    let x_2858 : f32 = u_xlat71;
    u_xlat69 = (x_2857 * x_2858);
    let x_2860 : i32 = u_xlati68;
    let x_2862 : vec4<f32> = x_2809.x_AdditionalLightsSpotDir[x_2860];
    let x_2864 : vec4<f32> = u_xlat9;
    u_xlat71 = dot(vec3<f32>(x_2862.x, x_2862.y, x_2862.z), vec3<f32>(x_2864.x, x_2864.y, x_2864.z));
    let x_2867 : f32 = u_xlat71;
    let x_2868 : i32 = u_xlati68;
    let x_2870 : f32 = x_2809.x_AdditionalLightsAttenuation[x_2868].z;
    let x_2872 : i32 = u_xlati68;
    let x_2874 : f32 = x_2809.x_AdditionalLightsAttenuation[x_2872].w;
    u_xlat71 = ((x_2867 * x_2870) + x_2874);
    let x_2876 : f32 = u_xlat71;
    u_xlat71 = clamp(x_2876, 0.0f, 1.0f);
    let x_2878 : f32 = u_xlat71;
    let x_2879 : f32 = u_xlat71;
    u_xlat71 = (x_2878 * x_2879);
    let x_2881 : f32 = u_xlat69;
    let x_2882 : f32 = u_xlat71;
    u_xlat69 = (x_2881 * x_2882);
    let x_2884 : f32 = u_xlat25;
    let x_2886 : i32 = u_xlati68;
    let x_2888 : vec4<f32> = x_2809.x_AdditionalLightsColor[x_2886];
    let x_2890 : vec3<f32> = (vec3<f32>(x_2884, x_2884, x_2884) * vec3<f32>(x_2888.x, x_2888.y, x_2888.z));
    let x_2891 : vec4<f32> = u_xlat10;
    u_xlat10 = vec4<f32>(x_2890.x, x_2890.y, x_2890.z, x_2891.w);
    let x_2893 : vec4<f32> = u_xlat1;
    let x_2895 : vec4<f32> = u_xlat9;
    u_xlat68 = dot(vec3<f32>(x_2893.x, x_2893.y, x_2893.z), vec3<f32>(x_2895.x, x_2895.y, x_2895.z));
    let x_2898 : f32 = u_xlat68;
    u_xlat68 = clamp(x_2898, 0.0f, 1.0f);
    let x_2900 : f32 = u_xlat68;
    let x_2901 : f32 = u_xlat69;
    u_xlat68 = (x_2900 * x_2901);
    let x_2903 : f32 = u_xlat68;
    let x_2905 : vec4<f32> = u_xlat10;
    let x_2907 : vec3<f32> = (vec3<f32>(x_2903, x_2903, x_2903) * vec3<f32>(x_2905.x, x_2905.y, x_2905.z));
    let x_2908 : vec4<f32> = u_xlat10;
    u_xlat10 = vec4<f32>(x_2907.x, x_2907.y, x_2907.z, x_2908.w);
    let x_2910 : vec4<f32> = u_xlat8;
    let x_2912 : f32 = u_xlat70;
    let x_2915 : vec4<f32> = u_xlat7;
    let x_2917 : vec3<f32> = ((vec3<f32>(x_2910.x, x_2910.y, x_2910.z) * vec3<f32>(x_2912, x_2912, x_2912)) + vec3<f32>(x_2915.x, x_2915.y, x_2915.z));
    let x_2918 : vec4<f32> = u_xlat8;
    u_xlat8 = vec4<f32>(x_2917.x, x_2917.y, x_2917.z, x_2918.w);
    let x_2920 : vec4<f32> = u_xlat8;
    let x_2922 : vec4<f32> = u_xlat8;
    u_xlat68 = dot(vec3<f32>(x_2920.x, x_2920.y, x_2920.z), vec3<f32>(x_2922.x, x_2922.y, x_2922.z));
    let x_2925 : f32 = u_xlat68;
    u_xlat68 = max(x_2925, 1.17549435e-37f);
    let x_2927 : f32 = u_xlat68;
    u_xlat68 = inverseSqrt(x_2927);
    let x_2929 : f32 = u_xlat68;
    let x_2931 : vec4<f32> = u_xlat8;
    let x_2933 : vec3<f32> = (vec3<f32>(x_2929, x_2929, x_2929) * vec3<f32>(x_2931.x, x_2931.y, x_2931.z));
    let x_2934 : vec4<f32> = u_xlat8;
    u_xlat8 = vec4<f32>(x_2933.x, x_2933.y, x_2933.z, x_2934.w);
    let x_2936 : vec4<f32> = u_xlat1;
    let x_2938 : vec4<f32> = u_xlat8;
    u_xlat68 = dot(vec3<f32>(x_2936.x, x_2936.y, x_2936.z), vec3<f32>(x_2938.x, x_2938.y, x_2938.z));
    let x_2941 : f32 = u_xlat68;
    u_xlat68 = clamp(x_2941, 0.0f, 1.0f);
    let x_2943 : vec4<f32> = u_xlat9;
    let x_2945 : vec4<f32> = u_xlat8;
    u_xlat69 = dot(vec3<f32>(x_2943.x, x_2943.y, x_2943.z), vec3<f32>(x_2945.x, x_2945.y, x_2945.z));
    let x_2948 : f32 = u_xlat69;
    u_xlat69 = clamp(x_2948, 0.0f, 1.0f);
    let x_2950 : f32 = u_xlat68;
    let x_2951 : f32 = u_xlat68;
    u_xlat68 = (x_2950 * x_2951);
    let x_2953 : f32 = u_xlat68;
    let x_2955 : f32 = u_xlat0.x;
    u_xlat68 = ((x_2953 * x_2955) + 1.000010014f);
    let x_2958 : f32 = u_xlat69;
    let x_2959 : f32 = u_xlat69;
    u_xlat69 = (x_2958 * x_2959);
    let x_2961 : f32 = u_xlat68;
    let x_2962 : f32 = u_xlat68;
    u_xlat68 = (x_2961 * x_2962);
    let x_2964 : f32 = u_xlat69;
    u_xlat69 = max(x_2964, 0.100000001f);
    let x_2966 : f32 = u_xlat68;
    let x_2967 : f32 = u_xlat69;
    u_xlat68 = (x_2966 * x_2967);
    let x_2969 : f32 = u_xlat66;
    let x_2970 : f32 = u_xlat68;
    u_xlat68 = (x_2969 * x_2970);
    let x_2972 : f32 = u_xlat64;
    let x_2973 : f32 = u_xlat68;
    u_xlat68 = (x_2972 / x_2973);
    let x_2975 : vec4<f32> = u_xlat5;
    let x_2977 : f32 = u_xlat68;
    let x_2980 : vec4<f32> = u_xlat6;
    let x_2982 : vec3<f32> = ((vec3<f32>(x_2975.x, x_2975.y, x_2975.z) * vec3<f32>(x_2977, x_2977, x_2977)) + vec3<f32>(x_2980.x, x_2980.y, x_2980.z));
    let x_2983 : vec4<f32> = u_xlat8;
    u_xlat8 = vec4<f32>(x_2982.x, x_2982.y, x_2982.z, x_2983.w);
    let x_2985 : vec4<f32> = u_xlat8;
    let x_2987 : vec4<f32> = u_xlat10;
    let x_2990 : vec4<f32> = u_xlat4;
    let x_2992 : vec3<f32> = ((vec3<f32>(x_2985.x, x_2985.y, x_2985.z) * vec3<f32>(x_2987.x, x_2987.y, x_2987.z)) + vec3<f32>(x_2990.x, x_2990.z, x_2990.w));
    let x_2993 : vec4<f32> = u_xlat4;
    u_xlat4 = vec4<f32>(x_2992.x, x_2993.y, x_2992.y, x_2992.z);

    continuing {
      let x_2995 : u32 = u_xlatu_loop_1;
      u_xlatu_loop_1 = (x_2995 + bitcast<u32>(1i));
    }
  }
  let x_2997 : vec3<f32> = u_xlat23;
  let x_2998 : f32 = u_xlat21;
  let x_3001 : vec4<f32> = u_xlat3;
  u_xlat0 = ((x_2997 * vec3<f32>(x_2998, x_2998, x_2998)) + vec3<f32>(x_3001.x, x_3001.y, x_3001.z));
  let x_3004 : vec4<f32> = u_xlat4;
  let x_3006 : vec3<f32> = u_xlat0;
  u_xlat0 = (vec3<f32>(x_3004.x, x_3004.z, x_3004.w) + x_3006);
  let x_3010 : f32 = u_xlat63;
  let x_3012 : vec3<f32> = u_xlat0;
  let x_3013 : vec3<f32> = (vec3<f32>(x_3010, x_3010, x_3010) * x_3012);
  let x_3014 : vec4<f32> = SV_Target0;
  SV_Target0 = vec4<f32>(x_3013.x, x_3013.y, x_3013.z, x_3014.w);
  SV_Target0.w = 1.0f;
  return;
}

struct main_out {
  @location(0)
  SV_Target0_1 : vec4<f32>,
}

@fragment
fn main(@builtin(position) gl_FragCoord_param : vec4<f32>, @location(0) vs_TEXCOORD0_param : vec4<f32>, @location(1) vs_TEXCOORD1_param : vec4<f32>, @location(2) vs_TEXCOORD2_param : vec4<f32>, @location(5) vs_TEXCOORD5_param : vec4<f32>, @location(4) vs_TEXCOORD4_param : vec4<f32>, @location(3) vs_TEXCOORD3_param : vec4<f32>, @location(6) vs_TEXCOORD7_param : vec3<f32>) -> main_out {
  gl_FragCoord = gl_FragCoord_param;
  vs_TEXCOORD0 = vs_TEXCOORD0_param;
  vs_TEXCOORD1 = vs_TEXCOORD1_param;
  vs_TEXCOORD2 = vs_TEXCOORD2_param;
  vs_TEXCOORD5 = vs_TEXCOORD5_param;
  vs_TEXCOORD4 = vs_TEXCOORD4_param;
  vs_TEXCOORD3 = vs_TEXCOORD3_param;
  vs_TEXCOORD7 = vs_TEXCOORD7_param;
  main_1();
  return main_out(SV_Target0);
}

