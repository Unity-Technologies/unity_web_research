type Arr = array<vec4<f32>, 2u>;

type Arr_1 = array<mat4x4<f32>, 2u>;

type Arr_2 = array<vec4<f32>, 2u>;

type Arr_3 = array<vec4<f32>, 2u>;

struct PGlobals {
  x_GlobalMipBias : vec2<f32>,
  @size(8)
  padding : u32,
  x_ZBufferParams : vec4<f32>,
  unity_MatrixV : mat4x4<f32>,
  x_SSAOParams : vec4<f32>,
  x_CameraViewTopLeftCorner : Arr_3,
  x_CameraViewProjections : Arr_1,
  x_ProjectionParams2 : vec4<f32>,
  x_CameraViewXExtent : Arr_3,
  x_CameraViewYExtent : Arr_3,
  x_SSAOBlueNoiseParams : vec4<f32>,
}

@group(0) @binding(0) var x_CameraDepthTexture : texture_2d<f32>;

@group(0) @binding(3) var sampler_CameraDepthTexture : sampler;

var<private> vs_TEXCOORD0 : vec2<f32>;

@group(1) @binding(0) var<uniform> x_33 : PGlobals;

var<private> SV_Target0 : vec4<f32>;

@group(0) @binding(1) var x_BlueNoiseTexture : texture_2d<f32>;

@group(0) @binding(2) var sampler_PointRepeat : sampler;

var<private> gl_FragCoord : vec4<f32>;

fn main_1() {
  var u_xlat0 : f32;
  var u_xlatb8 : bool;
  var u_xlat8 : vec3<f32>;
  var u_xlat16 : f32;
  var u_xlat1 : vec3<f32>;
  var u_xlat2 : vec4<f32>;
  var u_xlat3 : vec4<f32>;
  var u_xlat25 : f32;
  var u_xlat18 : vec2<f32>;
  var u_xlat4 : vec3<f32>;
  var u_xlat5 : vec3<f32>;
  var u_xlatb25 : bool;
  var u_xlat11 : vec3<f32>;
  var u_xlatb3 : vec2<bool>;
  var u_xlat26 : f32;
  var u_xlat6 : f32;
  var u_xlat7 : f32;
  var u_xlatb26 : bool;
  var u_xlat28 : f32;
  var u_xlatb28 : bool;
  var u_xlatb18 : bool;
  var u_xlat19 : f32;
  var u_xlat10 : vec2<f32>;
  var u_xlatb2 : vec4<bool>;
  var u_xlat_precise_vec4 : vec4<f32>;
  var u_xlat_precise_ivec4 : vec4<i32>;
  var u_xlat_precise_bvec4 : vec4<bool>;
  var u_xlat_precise_uvec4 : vec4<u32>;
  let x_22 : vec2<f32> = vs_TEXCOORD0;
  let x_39 : f32 = x_33.x_GlobalMipBias.x;
  let x_40 : vec4<f32> = textureSampleBias(x_CameraDepthTexture, sampler_CameraDepthTexture, x_22, x_39);
  u_xlat0 = x_40.x;
  let x_45 : f32 = u_xlat0;
  u_xlatb8 = (x_45 < 0.00001f);
  let x_48 : bool = u_xlatb8;
  if (x_48) {
    SV_Target0 = vec4<f32>(0.0f, 0.5f, 0.5f, 0.5f);
    return;
  }
  let x_59 : f32 = x_33.x_ZBufferParams.z;
  let x_60 : f32 = u_xlat0;
  let x_64 : f32 = x_33.x_ZBufferParams.w;
  u_xlat0 = ((x_59 * x_60) + x_64);
  let x_67 : f32 = u_xlat0;
  u_xlat0 = (1.0f / x_67);
  let x_71 : f32 = x_33.x_SSAOParams.w;
  let x_72 : f32 = u_xlat0;
  u_xlatb8 = (x_71 < x_72);
  let x_74 : bool = u_xlatb8;
  if (x_74) {
    SV_Target0 = vec4<f32>(0.0f, 0.5f, 0.5f, 0.5f);
    return;
  }
  let x_84 : f32 = vs_TEXCOORD0.y;
  u_xlat8.x = (-(x_84) + 1.0f);
  let x_89 : f32 = u_xlat0;
  let x_92 : f32 = x_33.x_ProjectionParams2.x;
  u_xlat16 = (x_89 * x_92);
  let x_98 : vec4<f32> = x_33.x_CameraViewXExtent[0i];
  let x_100 : vec2<f32> = vs_TEXCOORD0;
  let x_105 : vec4<f32> = x_33.x_CameraViewTopLeftCorner[0i];
  u_xlat1 = ((vec3<f32>(x_98.x, x_98.y, x_98.z) * vec3<f32>(x_100.x, x_100.x, x_100.x)) + vec3<f32>(x_105.x, x_105.y, x_105.z));
  let x_110 : vec4<f32> = x_33.x_CameraViewYExtent[0i];
  let x_112 : vec3<f32> = u_xlat8;
  let x_115 : vec3<f32> = u_xlat1;
  u_xlat1 = ((vec3<f32>(x_110.x, x_110.y, x_110.z) * vec3<f32>(x_112.x, x_112.x, x_112.x)) + x_115);
  let x_117 : f32 = u_xlat16;
  let x_119 : vec3<f32> = u_xlat1;
  u_xlat8 = (vec3<f32>(x_117, x_117, x_117) * x_119);
  let x_121 : vec3<f32> = u_xlat8;
  u_xlat1 = dpdyCoarse(vec3<f32>(x_121.z, x_121.x, x_121.y));
  let x_126 : vec3<f32> = u_xlat8;
  let x_128 : vec3<f32> = dpdxCoarse(vec3<f32>(x_126.y, x_126.z, x_126.x));
  let x_129 : vec4<f32> = u_xlat2;
  u_xlat2 = vec4<f32>(x_128.x, x_128.y, x_128.z, x_129.w);
  let x_132 : vec3<f32> = u_xlat1;
  let x_133 : vec4<f32> = u_xlat2;
  let x_135 : vec3<f32> = (x_132 * vec3<f32>(x_133.x, x_133.y, x_133.z));
  let x_136 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_135.x, x_135.y, x_135.z, x_136.w);
  let x_138 : vec3<f32> = u_xlat1;
  let x_140 : vec4<f32> = u_xlat2;
  let x_143 : vec4<f32> = u_xlat3;
  u_xlat1 = ((vec3<f32>(x_138.z, x_138.x, x_138.y) * vec3<f32>(x_140.y, x_140.z, x_140.x)) + -(vec3<f32>(x_143.x, x_143.y, x_143.z)));
  let x_148 : vec3<f32> = u_xlat1;
  let x_149 : vec3<f32> = u_xlat1;
  u_xlat25 = dot(x_148, x_149);
  let x_151 : f32 = u_xlat25;
  u_xlat25 = inverseSqrt(x_151);
  let x_153 : f32 = u_xlat25;
  let x_155 : vec3<f32> = u_xlat1;
  u_xlat1 = (vec3<f32>(x_153, x_153, x_153) * x_155);
  let x_157 : vec2<f32> = vs_TEXCOORD0;
  let x_160 : vec4<f32> = x_33.x_SSAOBlueNoiseParams;
  let x_162 : vec2<f32> = (x_157 + vec2<f32>(x_160.z, x_160.w));
  let x_163 : vec4<f32> = u_xlat2;
  u_xlat2 = vec4<f32>(x_162.x, x_162.y, x_163.z, x_163.w);
  let x_167 : vec4<f32> = u_xlat2;
  let x_170 : vec4<f32> = x_33.x_SSAOBlueNoiseParams;
  u_xlat18 = (vec2<f32>(x_167.x, x_167.y) * vec2<f32>(x_170.x, x_170.y));
  let x_178 : vec2<f32> = u_xlat18;
  let x_180 : f32 = x_33.x_GlobalMipBias.x;
  let x_181 : vec4<f32> = textureSampleBias(x_BlueNoiseTexture, sampler_PointRepeat, x_178, x_180);
  u_xlat25 = x_181.w;
  let x_183 : f32 = u_xlat25;
  u_xlat18.x = fract(x_183);
  let x_187 : f32 = u_xlat18.x;
  u_xlat3.z = ((x_187 * 2.0f) + -1.0f);
  let x_193 : f32 = u_xlat25;
  u_xlat25 = (x_193 + 0.9296875f);
  let x_196 : f32 = u_xlat25;
  u_xlat25 = (x_196 * 628.31854248f);
  let x_200 : f32 = u_xlat3.z;
  let x_203 : f32 = u_xlat3.z;
  u_xlat18.x = ((-(x_200) * x_203) + 1.0f);
  let x_208 : f32 = u_xlat18.x;
  u_xlat18.x = sqrt(x_208);
  let x_212 : f32 = u_xlat25;
  u_xlat4.x = sin(x_212);
  let x_216 : f32 = u_xlat25;
  u_xlat5.x = cos(x_216);
  let x_220 : f32 = u_xlat18.x;
  let x_222 : f32 = u_xlat5.x;
  u_xlat3.x = (x_220 * x_222);
  let x_226 : f32 = u_xlat18.x;
  let x_228 : f32 = u_xlat4.x;
  u_xlat3.y = (x_226 * x_228);
  let x_231 : vec3<f32> = u_xlat1;
  let x_232 : vec4<f32> = u_xlat3;
  u_xlat25 = dot(x_231, vec3<f32>(x_232.x, x_232.y, x_232.z));
  let x_236 : f32 = u_xlat25;
  u_xlatb25 = (x_236 >= 0.0f);
  let x_238 : bool = u_xlatb25;
  u_xlat25 = select(-1.0f, 1.0f, x_238);
  let x_240 : f32 = u_xlat25;
  let x_242 : vec4<f32> = u_xlat3;
  let x_244 : vec3<f32> = (vec3<f32>(x_240, x_240, x_240) * vec3<f32>(x_242.x, x_242.y, x_242.z));
  let x_245 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_244.x, x_244.y, x_244.z, x_245.w);
  let x_247 : vec4<f32> = u_xlat3;
  let x_250 : vec4<f32> = x_33.x_SSAOParams;
  let x_252 : vec3<f32> = (vec3<f32>(x_247.x, x_247.y, x_247.z) * vec3<f32>(x_250.y, x_250.y, x_250.y));
  let x_253 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_252.x, x_252.y, x_252.z, x_253.w);
  let x_255 : vec4<f32> = u_xlat3;
  let x_260 : vec3<f32> = u_xlat8;
  let x_261 : vec3<f32> = ((vec3<f32>(x_255.x, x_255.y, x_255.z) * vec3<f32>(0.100000001f, 0.100000001f, 0.100000001f)) + x_260);
  let x_262 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_261.x, x_261.y, x_261.z, x_262.w);
  let x_264 : vec4<f32> = u_xlat3;
  let x_268 : vec4<f32> = x_33.x_CameraViewProjections[0i][1i];
  u_xlat18 = (vec2<f32>(x_264.y, x_264.y) * vec2<f32>(x_268.x, x_268.y));
  let x_272 : vec4<f32> = x_33.x_CameraViewProjections[0i][0i];
  let x_274 : vec4<f32> = u_xlat3;
  let x_277 : vec2<f32> = u_xlat18;
  u_xlat18 = ((vec2<f32>(x_272.x, x_272.y) * vec2<f32>(x_274.x, x_274.x)) + x_277);
  let x_281 : vec4<f32> = x_33.x_CameraViewProjections[0i][2i];
  let x_283 : vec4<f32> = u_xlat3;
  let x_286 : vec2<f32> = u_xlat18;
  u_xlat18 = ((vec2<f32>(x_281.x, x_281.y) * vec2<f32>(x_283.z, x_283.z)) + x_286);
  let x_289 : f32 = x_33.unity_MatrixV[0i].z;
  u_xlat4.x = x_289;
  let x_292 : f32 = x_33.unity_MatrixV[1i].z;
  u_xlat4.y = x_292;
  let x_295 : f32 = x_33.unity_MatrixV[2i].z;
  u_xlat4.z = x_295;
  let x_297 : vec3<f32> = u_xlat4;
  let x_298 : vec4<f32> = u_xlat3;
  u_xlat25 = dot(x_297, vec3<f32>(x_298.x, x_298.y, x_298.z));
  let x_301 : f32 = u_xlat25;
  u_xlat3.x = (1.0f / -(x_301));
  let x_305 : vec2<f32> = u_xlat18;
  let x_306 : vec4<f32> = u_xlat3;
  u_xlat18 = ((x_305 * vec2<f32>(x_306.x, x_306.x)) + vec2<f32>(1.0f, 1.0f));
  let x_311 : vec2<f32> = u_xlat18;
  u_xlat18 = (x_311 * vec2<f32>(0.5f, 0.5f));
  let x_314 : vec2<f32> = u_xlat18;
  u_xlat18 = clamp(x_314, vec2<f32>(0.0f, 0.0f), vec2<f32>(1.0f, 1.0f));
  let x_321 : vec2<f32> = u_xlat18;
  let x_323 : f32 = x_33.x_GlobalMipBias.x;
  let x_324 : vec4<f32> = textureSampleBias(x_CameraDepthTexture, sampler_CameraDepthTexture, x_321, x_323);
  u_xlat3.x = x_324.x;
  let x_329 : f32 = x_33.x_ZBufferParams.z;
  let x_331 : f32 = u_xlat3.x;
  let x_334 : f32 = x_33.x_ZBufferParams.w;
  u_xlat11.x = ((x_329 * x_331) + x_334);
  let x_338 : f32 = u_xlat11.x;
  u_xlat11.x = (1.0f / x_338);
  let x_341 : f32 = u_xlat25;
  let x_344 : f32 = u_xlat11.x;
  u_xlat25 = (-(x_341) + -(x_344));
  let x_347 : f32 = u_xlat25;
  let x_350 : f32 = x_33.x_SSAOParams.y;
  u_xlatb25 = (abs(x_347) < x_350);
  let x_352 : bool = u_xlatb25;
  u_xlat25 = select(0.0f, 1.0f, x_352);
  let x_358 : f32 = u_xlat3.x;
  u_xlatb3.x = (0.00001f < x_358);
  let x_362 : bool = u_xlatb3.x;
  u_xlat3.x = select(0.0f, 1.0f, x_362);
  let x_365 : f32 = u_xlat25;
  let x_367 : f32 = u_xlat3.x;
  u_xlat25 = (x_365 * x_367);
  let x_371 : f32 = u_xlat18.y;
  u_xlat26 = (-(x_371) + 1.0f);
  let x_375 : f32 = u_xlat11.x;
  let x_377 : f32 = x_33.x_ProjectionParams2.x;
  u_xlat3.x = (x_375 * x_377);
  let x_381 : vec4<f32> = x_33.x_CameraViewXExtent[0i];
  let x_383 : vec2<f32> = u_xlat18;
  let x_387 : vec4<f32> = x_33.x_CameraViewTopLeftCorner[0i];
  u_xlat11 = ((vec3<f32>(x_381.x, x_381.y, x_381.z) * vec3<f32>(x_383.x, x_383.x, x_383.x)) + vec3<f32>(x_387.x, x_387.y, x_387.z));
  let x_391 : vec4<f32> = x_33.x_CameraViewYExtent[0i];
  let x_393 : f32 = u_xlat26;
  let x_396 : vec3<f32> = u_xlat11;
  u_xlat11 = ((vec3<f32>(x_391.x, x_391.y, x_391.z) * vec3<f32>(x_393, x_393, x_393)) + x_396);
  let x_398 : vec3<f32> = u_xlat11;
  let x_399 : vec4<f32> = u_xlat3;
  let x_402 : vec3<f32> = u_xlat8;
  let x_404 : vec3<f32> = ((x_398 * vec3<f32>(x_399.x, x_399.x, x_399.x)) + -(x_402));
  let x_405 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_404.x, x_404.y, x_404.z, x_405.w);
  let x_407 : vec4<f32> = u_xlat3;
  let x_409 : vec3<f32> = u_xlat1;
  u_xlat18.x = dot(vec3<f32>(x_407.x, x_407.y, x_407.z), x_409);
  let x_412 : f32 = u_xlat0;
  let x_417 : f32 = u_xlat18.x;
  u_xlat18.x = ((-(x_412) * 0.004f) + x_417);
  let x_421 : f32 = u_xlat18.x;
  u_xlat18.x = max(x_421, 0.0f);
  let x_424 : vec4<f32> = u_xlat3;
  let x_426 : vec4<f32> = u_xlat3;
  u_xlat26 = dot(vec3<f32>(x_424.x, x_424.y, x_424.z), vec3<f32>(x_426.x, x_426.y, x_426.z));
  let x_429 : f32 = u_xlat26;
  u_xlat26 = (x_429 + 0.0001f);
  let x_432 : f32 = u_xlat26;
  u_xlat26 = (1.0f / x_432);
  let x_434 : f32 = u_xlat26;
  let x_436 : f32 = u_xlat18.x;
  u_xlat18.x = (x_434 * x_436);
  let x_439 : vec4<f32> = u_xlat2;
  let x_442 : vec4<f32> = x_33.x_SSAOBlueNoiseParams;
  u_xlat3 = ((vec4<f32>(x_439.x, x_439.y, x_439.x, x_439.y) * vec4<f32>(x_442.x, x_442.y, x_442.x, x_442.y)) + vec4<f32>(0.25f, 0.25f, 0.5f, 0.5f));
  let x_451 : vec4<f32> = u_xlat3;
  let x_454 : f32 = x_33.x_GlobalMipBias.x;
  let x_455 : vec4<f32> = textureSampleBias(x_BlueNoiseTexture, sampler_PointRepeat, vec2<f32>(x_451.x, x_451.y), x_454);
  u_xlat26 = x_455.w;
  let x_457 : f32 = u_xlat26;
  let x_462 : vec2<f32> = (vec2<f32>(x_457, x_457) + vec2<f32>(0.33984375f, 0.76171875f));
  let x_463 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_462.x, x_462.y, x_463.z, x_463.w);
  let x_466 : f32 = u_xlat3.x;
  u_xlat26 = fract(x_466);
  let x_468 : f32 = u_xlat26;
  u_xlat5.z = ((x_468 * 2.0f) + -1.0f);
  let x_473 : f32 = u_xlat3.y;
  u_xlat26 = (x_473 * 628.31854248f);
  let x_476 : f32 = u_xlat5.z;
  let x_479 : f32 = u_xlat5.z;
  u_xlat3.x = ((-(x_476) * x_479) + 1.0f);
  let x_484 : f32 = u_xlat3.x;
  u_xlat3.x = sqrt(x_484);
  let x_488 : f32 = u_xlat26;
  u_xlat6 = sin(x_488);
  let x_491 : f32 = u_xlat26;
  u_xlat7 = cos(x_491);
  let x_494 : f32 = u_xlat3.x;
  let x_495 : f32 = u_xlat7;
  u_xlat5.x = (x_494 * x_495);
  let x_499 : f32 = u_xlat3.x;
  let x_500 : f32 = u_xlat6;
  u_xlat5.y = (x_499 * x_500);
  let x_503 : vec3<f32> = u_xlat1;
  let x_504 : vec3<f32> = u_xlat5;
  u_xlat26 = dot(x_503, x_504);
  let x_507 : f32 = u_xlat26;
  u_xlatb26 = (x_507 >= 0.0f);
  let x_509 : bool = u_xlatb26;
  u_xlat26 = select(-1.0f, 1.0f, x_509);
  let x_511 : f32 = u_xlat26;
  let x_513 : vec3<f32> = u_xlat5;
  u_xlat5 = (vec3<f32>(x_511, x_511, x_511) * x_513);
  let x_515 : vec3<f32> = u_xlat5;
  let x_517 : vec4<f32> = x_33.x_SSAOParams;
  u_xlat5 = (x_515 * vec3<f32>(x_517.y, x_517.y, x_517.y));
  let x_520 : vec3<f32> = u_xlat5;
  let x_524 : vec3<f32> = u_xlat8;
  u_xlat5 = ((x_520 * vec3<f32>(0.15625f, 0.15625f, 0.15625f)) + x_524);
  let x_526 : vec3<f32> = u_xlat5;
  let x_529 : vec4<f32> = x_33.x_CameraViewProjections[0i][1i];
  let x_531 : vec2<f32> = (vec2<f32>(x_526.y, x_526.y) * vec2<f32>(x_529.x, x_529.y));
  let x_532 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_531.x, x_531.y, x_532.z, x_532.w);
  let x_535 : vec4<f32> = x_33.x_CameraViewProjections[0i][0i];
  let x_537 : vec3<f32> = u_xlat5;
  let x_540 : vec4<f32> = u_xlat3;
  let x_542 : vec2<f32> = ((vec2<f32>(x_535.x, x_535.y) * vec2<f32>(x_537.x, x_537.x)) + vec2<f32>(x_540.x, x_540.y));
  let x_543 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_542.x, x_542.y, x_543.z, x_543.w);
  let x_546 : vec4<f32> = x_33.x_CameraViewProjections[0i][2i];
  let x_548 : vec3<f32> = u_xlat5;
  let x_551 : vec4<f32> = u_xlat3;
  let x_553 : vec2<f32> = ((vec2<f32>(x_546.x, x_546.y) * vec2<f32>(x_548.z, x_548.z)) + vec2<f32>(x_551.x, x_551.y));
  let x_554 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_553.x, x_553.y, x_554.z, x_554.w);
  let x_556 : vec3<f32> = u_xlat4;
  let x_557 : vec3<f32> = u_xlat5;
  u_xlat26 = dot(x_556, x_557);
  let x_560 : f32 = u_xlat26;
  u_xlat28 = (1.0f / -(x_560));
  let x_563 : vec4<f32> = u_xlat3;
  let x_565 : f32 = u_xlat28;
  let x_568 : vec2<f32> = ((vec2<f32>(x_563.x, x_563.y) * vec2<f32>(x_565, x_565)) + vec2<f32>(1.0f, 1.0f));
  let x_569 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_568.x, x_568.y, x_569.z, x_569.w);
  let x_571 : vec4<f32> = u_xlat3;
  let x_573 : vec2<f32> = (vec2<f32>(x_571.x, x_571.y) * vec2<f32>(0.5f, 0.5f));
  let x_574 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_573.x, x_573.y, x_574.z, x_574.w);
  let x_576 : vec4<f32> = u_xlat3;
  let x_580 : vec2<f32> = clamp(vec2<f32>(x_576.x, x_576.y), vec2<f32>(0.0f, 0.0f), vec2<f32>(1.0f, 1.0f));
  let x_581 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_580.x, x_580.y, x_581.z, x_581.w);
  let x_586 : vec4<f32> = u_xlat3;
  let x_589 : f32 = x_33.x_GlobalMipBias.x;
  let x_590 : vec4<f32> = textureSampleBias(x_CameraDepthTexture, sampler_CameraDepthTexture, vec2<f32>(x_586.x, x_586.y), x_589);
  u_xlat28 = x_590.x;
  let x_593 : f32 = x_33.x_ZBufferParams.z;
  let x_594 : f32 = u_xlat28;
  let x_597 : f32 = x_33.x_ZBufferParams.w;
  u_xlat5.x = ((x_593 * x_594) + x_597);
  let x_601 : f32 = u_xlat5.x;
  u_xlat5.x = (1.0f / x_601);
  let x_604 : f32 = u_xlat26;
  let x_607 : f32 = u_xlat5.x;
  u_xlat26 = (-(x_604) + -(x_607));
  let x_610 : f32 = u_xlat26;
  let x_613 : f32 = x_33.x_SSAOParams.y;
  u_xlatb26 = (abs(x_610) < x_613);
  let x_615 : bool = u_xlatb26;
  u_xlat26 = select(0.0f, 1.0f, x_615);
  let x_618 : f32 = u_xlat28;
  u_xlatb28 = (0.00001f < x_618);
  let x_620 : bool = u_xlatb28;
  u_xlat28 = select(0.0f, 1.0f, x_620);
  let x_622 : f32 = u_xlat26;
  let x_623 : f32 = u_xlat28;
  u_xlat26 = (x_622 * x_623);
  let x_626 : f32 = u_xlat3.y;
  u_xlat11.x = (-(x_626) + 1.0f);
  let x_631 : f32 = u_xlat5.x;
  let x_633 : f32 = x_33.x_ProjectionParams2.x;
  u_xlat28 = (x_631 * x_633);
  let x_636 : vec4<f32> = x_33.x_CameraViewXExtent[0i];
  let x_638 : vec4<f32> = u_xlat3;
  let x_642 : vec4<f32> = x_33.x_CameraViewTopLeftCorner[0i];
  u_xlat5 = ((vec3<f32>(x_636.x, x_636.y, x_636.z) * vec3<f32>(x_638.x, x_638.x, x_638.x)) + vec3<f32>(x_642.x, x_642.y, x_642.z));
  let x_646 : vec4<f32> = x_33.x_CameraViewYExtent[0i];
  let x_648 : vec3<f32> = u_xlat11;
  let x_651 : vec3<f32> = u_xlat5;
  u_xlat5 = ((vec3<f32>(x_646.x, x_646.y, x_646.z) * vec3<f32>(x_648.x, x_648.x, x_648.x)) + x_651);
  let x_653 : vec3<f32> = u_xlat5;
  let x_654 : f32 = u_xlat28;
  let x_657 : vec3<f32> = u_xlat8;
  u_xlat5 = ((x_653 * vec3<f32>(x_654, x_654, x_654)) + -(x_657));
  let x_660 : vec3<f32> = u_xlat5;
  let x_661 : vec3<f32> = u_xlat1;
  u_xlat3.x = dot(x_660, x_661);
  let x_664 : f32 = u_xlat0;
  let x_668 : f32 = u_xlat3.x;
  u_xlat3.x = ((-(x_664) * 0.004f) + x_668);
  let x_672 : f32 = u_xlat3.x;
  u_xlat3.x = max(x_672, 0.0f);
  let x_675 : vec3<f32> = u_xlat5;
  let x_676 : vec3<f32> = u_xlat5;
  u_xlat11.x = dot(x_675, x_676);
  let x_680 : f32 = u_xlat11.x;
  u_xlat11.x = (x_680 + 0.0001f);
  let x_684 : f32 = u_xlat11.x;
  u_xlat11.x = (1.0f / x_684);
  let x_688 : f32 = u_xlat11.x;
  let x_690 : f32 = u_xlat3.x;
  u_xlat3.x = (x_688 * x_690);
  let x_693 : f32 = u_xlat26;
  let x_695 : f32 = u_xlat3.x;
  u_xlat26 = (x_693 * x_695);
  let x_698 : f32 = u_xlat18.x;
  let x_699 : f32 = u_xlat25;
  let x_701 : f32 = u_xlat26;
  u_xlat25 = ((x_698 * x_699) + x_701);
  let x_706 : vec4<f32> = u_xlat3;
  let x_709 : f32 = x_33.x_GlobalMipBias.x;
  let x_710 : vec4<f32> = textureSampleBias(x_BlueNoiseTexture, sampler_PointRepeat, vec2<f32>(x_706.z, x_706.w), x_709);
  u_xlat18.x = x_710.w;
  let x_713 : vec2<f32> = u_xlat18;
  u_xlat18 = (vec2<f32>(x_713.x, x_713.x) + vec2<f32>(0.75390625f, 0.133333296f));
  let x_720 : f32 = u_xlat18.x;
  u_xlat18.x = fract(x_720);
  let x_724 : f32 = u_xlat18.x;
  u_xlat3.z = ((x_724 * 2.0f) + -1.0f);
  let x_729 : f32 = u_xlat18.y;
  u_xlat18.x = (x_729 * 628.31854248f);
  let x_733 : f32 = u_xlat3.z;
  let x_736 : f32 = u_xlat3.z;
  u_xlat26 = ((-(x_733) * x_736) + 1.0f);
  let x_739 : f32 = u_xlat26;
  u_xlat26 = sqrt(x_739);
  let x_742 : f32 = u_xlat18.x;
  u_xlat5.x = sin(x_742);
  let x_746 : f32 = u_xlat18.x;
  u_xlat6 = cos(x_746);
  let x_748 : f32 = u_xlat26;
  let x_749 : f32 = u_xlat6;
  u_xlat3.x = (x_748 * x_749);
  let x_752 : f32 = u_xlat26;
  let x_754 : f32 = u_xlat5.x;
  u_xlat3.y = (x_752 * x_754);
  let x_757 : vec3<f32> = u_xlat1;
  let x_758 : vec4<f32> = u_xlat3;
  u_xlat18.x = dot(x_757, vec3<f32>(x_758.x, x_758.y, x_758.z));
  let x_764 : f32 = u_xlat18.x;
  u_xlatb18 = (x_764 >= 0.0f);
  let x_766 : bool = u_xlatb18;
  u_xlat18.x = select(-1.0f, 1.0f, x_766);
  let x_769 : vec2<f32> = u_xlat18;
  let x_771 : vec4<f32> = u_xlat3;
  let x_773 : vec3<f32> = (vec3<f32>(x_769.x, x_769.x, x_769.x) * vec3<f32>(x_771.x, x_771.y, x_771.z));
  let x_774 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_773.x, x_773.y, x_773.z, x_774.w);
  let x_776 : vec4<f32> = u_xlat3;
  let x_779 : vec4<f32> = x_33.x_SSAOParams;
  let x_781 : vec3<f32> = (vec3<f32>(x_776.x, x_776.y, x_776.z) * vec3<f32>(x_779.y, x_779.y, x_779.y));
  let x_782 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_781.x, x_781.y, x_781.z, x_782.w);
  let x_784 : vec4<f32> = u_xlat3;
  let x_789 : vec3<f32> = u_xlat8;
  let x_790 : vec3<f32> = ((vec3<f32>(x_784.x, x_784.y, x_784.z) * vec3<f32>(0.324999988f, 0.324999988f, 0.324999988f)) + x_789);
  let x_791 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_790.x, x_790.y, x_790.z, x_791.w);
  let x_793 : vec4<f32> = u_xlat3;
  let x_796 : vec4<f32> = x_33.x_CameraViewProjections[0i][1i];
  u_xlat18 = (vec2<f32>(x_793.y, x_793.y) * vec2<f32>(x_796.x, x_796.y));
  let x_800 : vec4<f32> = x_33.x_CameraViewProjections[0i][0i];
  let x_802 : vec4<f32> = u_xlat3;
  let x_805 : vec2<f32> = u_xlat18;
  u_xlat18 = ((vec2<f32>(x_800.x, x_800.y) * vec2<f32>(x_802.x, x_802.x)) + x_805);
  let x_808 : vec4<f32> = x_33.x_CameraViewProjections[0i][2i];
  let x_810 : vec4<f32> = u_xlat3;
  let x_813 : vec2<f32> = u_xlat18;
  u_xlat18 = ((vec2<f32>(x_808.x, x_808.y) * vec2<f32>(x_810.z, x_810.z)) + x_813);
  let x_815 : vec3<f32> = u_xlat4;
  let x_816 : vec4<f32> = u_xlat3;
  u_xlat3.x = dot(x_815, vec3<f32>(x_816.x, x_816.y, x_816.z));
  let x_821 : f32 = u_xlat3.x;
  u_xlat11.x = (1.0f / -(x_821));
  let x_825 : vec2<f32> = u_xlat18;
  let x_826 : vec3<f32> = u_xlat11;
  u_xlat18 = ((x_825 * vec2<f32>(x_826.x, x_826.x)) + vec2<f32>(1.0f, 1.0f));
  let x_830 : vec2<f32> = u_xlat18;
  u_xlat18 = (x_830 * vec2<f32>(0.5f, 0.5f));
  let x_832 : vec2<f32> = u_xlat18;
  u_xlat18 = clamp(x_832, vec2<f32>(0.0f, 0.0f), vec2<f32>(1.0f, 1.0f));
  let x_839 : vec2<f32> = u_xlat18;
  let x_841 : f32 = x_33.x_GlobalMipBias.x;
  let x_842 : vec4<f32> = textureSampleBias(x_CameraDepthTexture, sampler_CameraDepthTexture, x_839, x_841);
  u_xlat11.x = x_842.x;
  let x_847 : f32 = x_33.x_ZBufferParams.z;
  let x_849 : f32 = u_xlat11.x;
  let x_852 : f32 = x_33.x_ZBufferParams.w;
  u_xlat19 = ((x_847 * x_849) + x_852);
  let x_854 : f32 = u_xlat19;
  u_xlat19 = (1.0f / x_854);
  let x_856 : f32 = u_xlat19;
  let x_859 : f32 = u_xlat3.x;
  u_xlat3.x = (-(x_856) + -(x_859));
  let x_864 : f32 = u_xlat3.x;
  let x_867 : f32 = x_33.x_SSAOParams.y;
  u_xlatb3.x = (abs(x_864) < x_867);
  let x_871 : f32 = u_xlat11.x;
  u_xlatb3.y = (0.00001f < x_871);
  let x_875 : bool = u_xlatb3.x;
  u_xlat3.x = select(0.0f, 1.0f, x_875);
  let x_879 : bool = u_xlatb3.y;
  u_xlat3.y = select(0.0f, 1.0f, x_879);
  let x_883 : f32 = u_xlat3.y;
  let x_885 : f32 = u_xlat3.x;
  u_xlat3.x = (x_883 * x_885);
  let x_889 : f32 = u_xlat18.y;
  u_xlat26 = (-(x_889) + 1.0f);
  let x_892 : f32 = u_xlat19;
  let x_894 : f32 = x_33.x_ProjectionParams2.x;
  u_xlat11.x = (x_892 * x_894);
  let x_898 : vec4<f32> = x_33.x_CameraViewXExtent[0i];
  let x_900 : vec2<f32> = u_xlat18;
  let x_904 : vec4<f32> = x_33.x_CameraViewTopLeftCorner[0i];
  u_xlat5 = ((vec3<f32>(x_898.x, x_898.y, x_898.z) * vec3<f32>(x_900.x, x_900.x, x_900.x)) + vec3<f32>(x_904.x, x_904.y, x_904.z));
  let x_908 : vec4<f32> = x_33.x_CameraViewYExtent[0i];
  let x_910 : f32 = u_xlat26;
  let x_913 : vec3<f32> = u_xlat5;
  u_xlat5 = ((vec3<f32>(x_908.x, x_908.y, x_908.z) * vec3<f32>(x_910, x_910, x_910)) + x_913);
  let x_915 : vec3<f32> = u_xlat5;
  let x_916 : vec3<f32> = u_xlat11;
  let x_919 : vec3<f32> = u_xlat8;
  u_xlat11 = ((x_915 * vec3<f32>(x_916.x, x_916.x, x_916.x)) + -(x_919));
  let x_922 : vec3<f32> = u_xlat11;
  let x_923 : vec3<f32> = u_xlat1;
  u_xlat18.x = dot(x_922, x_923);
  let x_926 : f32 = u_xlat0;
  let x_930 : f32 = u_xlat18.x;
  u_xlat18.x = ((-(x_926) * 0.004f) + x_930);
  let x_934 : f32 = u_xlat18.x;
  u_xlat18.x = max(x_934, 0.0f);
  let x_937 : vec3<f32> = u_xlat11;
  let x_938 : vec3<f32> = u_xlat11;
  u_xlat26 = dot(x_937, x_938);
  let x_940 : f32 = u_xlat26;
  u_xlat26 = (x_940 + 0.0001f);
  let x_942 : f32 = u_xlat26;
  u_xlat26 = (1.0f / x_942);
  let x_944 : f32 = u_xlat26;
  let x_946 : f32 = u_xlat18.x;
  u_xlat18.x = (x_944 * x_946);
  let x_950 : f32 = u_xlat18.x;
  let x_952 : f32 = u_xlat3.x;
  let x_954 : f32 = u_xlat25;
  u_xlat25 = ((x_950 * x_952) + x_954);
  let x_956 : vec4<f32> = u_xlat2;
  let x_959 : vec4<f32> = x_33.x_SSAOBlueNoiseParams;
  let x_964 : vec2<f32> = ((vec2<f32>(x_956.x, x_956.y) * vec2<f32>(x_959.x, x_959.y)) + vec2<f32>(0.75f, 0.75f));
  let x_965 : vec4<f32> = u_xlat2;
  u_xlat2 = vec4<f32>(x_964.x, x_964.y, x_965.z, x_965.w);
  let x_970 : vec4<f32> = u_xlat2;
  let x_973 : f32 = x_33.x_GlobalMipBias.x;
  let x_974 : vec4<f32> = textureSampleBias(x_BlueNoiseTexture, sampler_PointRepeat, vec2<f32>(x_970.x, x_970.y), x_973);
  u_xlat2.x = x_974.w;
  let x_977 : vec4<f32> = u_xlat2;
  let x_982 : vec2<f32> = (vec2<f32>(x_977.x, x_977.x) + vec2<f32>(0.56640625f, 0.015625f));
  let x_983 : vec4<f32> = u_xlat2;
  u_xlat2 = vec4<f32>(x_982.x, x_982.y, x_983.z, x_983.w);
  let x_986 : f32 = u_xlat2.x;
  u_xlat2.x = fract(x_986);
  let x_990 : f32 = u_xlat2.x;
  u_xlat3.z = ((x_990 * 2.0f) + -1.0f);
  let x_995 : f32 = u_xlat2.y;
  u_xlat2.x = (x_995 * 628.31854248f);
  let x_1000 : f32 = u_xlat3.z;
  let x_1003 : f32 = u_xlat3.z;
  u_xlat10.x = ((-(x_1000) * x_1003) + 1.0f);
  let x_1008 : f32 = u_xlat10.x;
  u_xlat10.x = sqrt(x_1008);
  let x_1012 : f32 = u_xlat2.x;
  u_xlat5.x = cos(x_1012);
  let x_1016 : f32 = u_xlat2.x;
  u_xlat2.x = sin(x_1016);
  let x_1020 : f32 = u_xlat10.x;
  let x_1022 : f32 = u_xlat5.x;
  u_xlat3.x = (x_1020 * x_1022);
  let x_1026 : f32 = u_xlat2.x;
  let x_1028 : f32 = u_xlat10.x;
  u_xlat3.y = (x_1026 * x_1028);
  let x_1031 : vec3<f32> = u_xlat1;
  let x_1032 : vec4<f32> = u_xlat3;
  u_xlat2.x = dot(x_1031, vec3<f32>(x_1032.x, x_1032.y, x_1032.z));
  let x_1040 : f32 = u_xlat2.x;
  u_xlatb2.x = (x_1040 >= 0.0f);
  let x_1044 : bool = u_xlatb2.x;
  u_xlat2.x = select(-1.0f, 1.0f, x_1044);
  let x_1047 : vec4<f32> = u_xlat2;
  let x_1049 : vec4<f32> = u_xlat3;
  let x_1051 : vec3<f32> = (vec3<f32>(x_1047.x, x_1047.x, x_1047.x) * vec3<f32>(x_1049.x, x_1049.y, x_1049.z));
  let x_1052 : vec4<f32> = u_xlat2;
  u_xlat2 = vec4<f32>(x_1051.x, x_1051.y, x_1051.z, x_1052.w);
  let x_1054 : vec4<f32> = u_xlat2;
  let x_1057 : vec4<f32> = x_33.x_SSAOParams;
  let x_1059 : vec3<f32> = (vec3<f32>(x_1054.x, x_1054.y, x_1054.z) * vec3<f32>(x_1057.y, x_1057.y, x_1057.y));
  let x_1060 : vec4<f32> = u_xlat2;
  u_xlat2 = vec4<f32>(x_1059.x, x_1059.y, x_1059.z, x_1060.w);
  let x_1062 : vec4<f32> = u_xlat2;
  let x_1067 : vec3<f32> = u_xlat8;
  let x_1068 : vec3<f32> = ((vec3<f32>(x_1062.x, x_1062.y, x_1062.z) * vec3<f32>(0.606249988f, 0.606249988f, 0.606249988f)) + x_1067);
  let x_1069 : vec4<f32> = u_xlat2;
  u_xlat2 = vec4<f32>(x_1068.x, x_1068.y, x_1068.z, x_1069.w);
  let x_1071 : vec4<f32> = u_xlat2;
  let x_1074 : vec4<f32> = x_33.x_CameraViewProjections[0i][1i];
  let x_1076 : vec2<f32> = (vec2<f32>(x_1071.y, x_1071.y) * vec2<f32>(x_1074.x, x_1074.y));
  let x_1077 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_1076.x, x_1076.y, x_1077.z, x_1077.w);
  let x_1080 : vec4<f32> = x_33.x_CameraViewProjections[0i][0i];
  let x_1082 : vec4<f32> = u_xlat2;
  let x_1085 : vec4<f32> = u_xlat3;
  let x_1087 : vec2<f32> = ((vec2<f32>(x_1080.x, x_1080.y) * vec2<f32>(x_1082.x, x_1082.x)) + vec2<f32>(x_1085.x, x_1085.y));
  let x_1088 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_1087.x, x_1087.y, x_1088.z, x_1088.w);
  let x_1091 : vec4<f32> = x_33.x_CameraViewProjections[0i][2i];
  let x_1093 : vec4<f32> = u_xlat2;
  let x_1096 : vec4<f32> = u_xlat3;
  let x_1098 : vec2<f32> = ((vec2<f32>(x_1091.x, x_1091.y) * vec2<f32>(x_1093.z, x_1093.z)) + vec2<f32>(x_1096.x, x_1096.y));
  let x_1099 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_1098.x, x_1098.y, x_1099.z, x_1099.w);
  let x_1101 : vec3<f32> = u_xlat4;
  let x_1102 : vec4<f32> = u_xlat2;
  u_xlat2.x = dot(x_1101, vec3<f32>(x_1102.x, x_1102.y, x_1102.z));
  let x_1107 : f32 = u_xlat2.x;
  u_xlat10.x = (1.0f / -(x_1107));
  let x_1111 : vec4<f32> = u_xlat3;
  let x_1113 : vec2<f32> = u_xlat10;
  u_xlat10 = ((vec2<f32>(x_1111.x, x_1111.y) * vec2<f32>(x_1113.x, x_1113.x)) + vec2<f32>(1.0f, 1.0f));
  let x_1117 : vec2<f32> = u_xlat10;
  u_xlat10 = (x_1117 * vec2<f32>(0.5f, 0.5f));
  let x_1119 : vec2<f32> = u_xlat10;
  u_xlat10 = clamp(x_1119, vec2<f32>(0.0f, 0.0f), vec2<f32>(1.0f, 1.0f));
  let x_1126 : vec2<f32> = u_xlat10;
  let x_1128 : f32 = x_33.x_GlobalMipBias.x;
  let x_1129 : vec4<f32> = textureSampleBias(x_CameraDepthTexture, sampler_CameraDepthTexture, x_1126, x_1128);
  u_xlat26 = x_1129.x;
  let x_1132 : f32 = x_33.x_ZBufferParams.z;
  let x_1133 : f32 = u_xlat26;
  let x_1136 : f32 = x_33.x_ZBufferParams.w;
  u_xlat3.x = ((x_1132 * x_1133) + x_1136);
  let x_1140 : f32 = u_xlat3.x;
  u_xlat3.x = (1.0f / x_1140);
  let x_1144 : f32 = u_xlat2.x;
  let x_1147 : f32 = u_xlat3.x;
  u_xlat2.x = (-(x_1144) + -(x_1147));
  let x_1152 : f32 = u_xlat2.x;
  let x_1155 : f32 = x_33.x_SSAOParams.y;
  u_xlatb2.x = (abs(x_1152) < x_1155);
  let x_1158 : f32 = u_xlat26;
  u_xlatb2.w = (0.00001f < x_1158);
  let x_1162 : bool = u_xlatb2.x;
  u_xlat2.x = select(0.0f, 1.0f, x_1162);
  let x_1166 : bool = u_xlatb2.w;
  u_xlat2.w = select(0.0f, 1.0f, x_1166);
  let x_1170 : f32 = u_xlat2.w;
  let x_1172 : f32 = u_xlat2.x;
  u_xlat2.x = (x_1170 * x_1172);
  let x_1176 : f32 = u_xlat10.y;
  u_xlat18.x = (-(x_1176) + 1.0f);
  let x_1181 : f32 = u_xlat3.x;
  let x_1183 : f32 = x_33.x_ProjectionParams2.x;
  u_xlat26 = (x_1181 * x_1183);
  let x_1186 : vec4<f32> = x_33.x_CameraViewXExtent[0i];
  let x_1188 : vec2<f32> = u_xlat10;
  let x_1192 : vec4<f32> = x_33.x_CameraViewTopLeftCorner[0i];
  let x_1194 : vec3<f32> = ((vec3<f32>(x_1186.x, x_1186.y, x_1186.z) * vec3<f32>(x_1188.x, x_1188.x, x_1188.x)) + vec3<f32>(x_1192.x, x_1192.y, x_1192.z));
  let x_1195 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_1194.x, x_1194.y, x_1194.z, x_1195.w);
  let x_1198 : vec4<f32> = x_33.x_CameraViewYExtent[0i];
  let x_1200 : vec2<f32> = u_xlat18;
  let x_1203 : vec4<f32> = u_xlat3;
  let x_1205 : vec3<f32> = ((vec3<f32>(x_1198.x, x_1198.y, x_1198.z) * vec3<f32>(x_1200.x, x_1200.x, x_1200.x)) + vec3<f32>(x_1203.x, x_1203.y, x_1203.z));
  let x_1206 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_1205.x, x_1205.y, x_1205.z, x_1206.w);
  let x_1208 : vec4<f32> = u_xlat3;
  let x_1210 : f32 = u_xlat26;
  let x_1213 : vec3<f32> = u_xlat8;
  u_xlat8 = ((vec3<f32>(x_1208.x, x_1208.y, x_1208.z) * vec3<f32>(x_1210, x_1210, x_1210)) + -(x_1213));
  let x_1216 : vec3<f32> = u_xlat8;
  let x_1217 : vec3<f32> = u_xlat1;
  u_xlat10.x = dot(x_1216, x_1217);
  let x_1220 : f32 = u_xlat0;
  let x_1224 : f32 = u_xlat10.x;
  u_xlat10.x = ((-(x_1220) * 0.004f) + x_1224);
  let x_1228 : f32 = u_xlat10.x;
  u_xlat10.x = max(x_1228, 0.0f);
  let x_1231 : vec3<f32> = u_xlat8;
  let x_1232 : vec3<f32> = u_xlat8;
  u_xlat8.x = dot(x_1231, x_1232);
  let x_1236 : f32 = u_xlat8.x;
  u_xlat8.x = (x_1236 + 0.0001f);
  let x_1240 : f32 = u_xlat8.x;
  u_xlat8.x = (1.0f / x_1240);
  let x_1244 : f32 = u_xlat8.x;
  let x_1246 : f32 = u_xlat10.x;
  u_xlat8.x = (x_1244 * x_1246);
  let x_1250 : f32 = u_xlat8.x;
  let x_1252 : f32 = u_xlat2.x;
  let x_1254 : f32 = u_xlat25;
  u_xlat8.x = ((x_1250 * x_1252) + x_1254);
  let x_1258 : f32 = u_xlat8.x;
  let x_1260 : f32 = x_33.x_SSAOParams.y;
  u_xlat8.x = (x_1258 * x_1260);
  let x_1264 : f32 = x_33.x_SSAOParams.w;
  u_xlat16 = (1.0f / x_1264);
  let x_1266 : f32 = u_xlat0;
  let x_1268 : f32 = u_xlat16;
  u_xlat0 = ((-(x_1266) * x_1268) + 1.0f);
  let x_1271 : f32 = u_xlat0;
  let x_1272 : f32 = u_xlat0;
  u_xlat0 = (x_1271 * x_1272);
  let x_1275 : f32 = u_xlat8.x;
  let x_1277 : f32 = x_33.x_SSAOParams.x;
  u_xlat8.x = (x_1275 * x_1277);
  let x_1280 : f32 = u_xlat0;
  let x_1282 : f32 = u_xlat8.x;
  u_xlat0 = (x_1280 * x_1282);
  let x_1284 : f32 = u_xlat0;
  u_xlat0 = (x_1284 * 0.25f);
  let x_1286 : f32 = u_xlat0;
  u_xlat0 = clamp(x_1286, 0.0f, 1.0f);
  let x_1288 : f32 = u_xlat0;
  u_xlat0 = log2(x_1288);
  let x_1290 : f32 = u_xlat0;
  u_xlat0 = (x_1290 * 0.600000024f);
  let x_1293 : f32 = u_xlat0;
  SV_Target0.x = exp2(x_1293);
  let x_1297 : vec3<f32> = u_xlat1;
  let x_1300 : vec3<f32> = ((x_1297 * vec3<f32>(0.5f, 0.5f, 0.5f)) + vec3<f32>(0.5f, 0.5f, 0.5f));
  let x_1301 : vec4<f32> = SV_Target0;
  SV_Target0 = vec4<f32>(x_1301.x, x_1300.x, x_1300.y, x_1300.z);
  return;
}

struct main_out {
  @location(0)
  SV_Target0_1 : vec4<f32>,
}

@fragment
fn main(@location(0) vs_TEXCOORD0_param : vec2<f32>, @builtin(position) gl_FragCoord_param : vec4<f32>) -> main_out {
  vs_TEXCOORD0 = vs_TEXCOORD0_param;
  gl_FragCoord = gl_FragCoord_param;
  main_1();
  return main_out(SV_Target0);
}

