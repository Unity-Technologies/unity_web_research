struct PGlobals {
  x_GlobalMipBias : vec2<f32>,
  @size(8)
  padding : u32,
  x_MainLightPosition : vec4<f32>,
  x_MainLightColor : vec4<f32>,
  x_AdditionalLightsCount : vec4<f32>,
  x_Time : vec4<f32>,
  x_ScreenParams : vec4<f32>,
  x_ZBufferParams : vec4<f32>,
  unity_MatrixVP : mat4x4<f32>,
  x_MaxDepth : f32,
  @size(12)
  padding_1 : u32,
  x_VeraslWater_DepthCamParams : vec4<f32>,
}

struct UnityPerMaterial {
  x_BumpScale : f32,
  @size(12)
  padding_2 : u32,
  x_DitherPattern_TexelSize : vec4<f32>,
}

type Arr = array<mat4x4<f32>, 5u>;

struct MainLightShadows {
  x_MainLightWorldToShadow : Arr,
  x_CascadeShadowSplitSpheres0 : vec4<f32>,
  x_CascadeShadowSplitSpheres1 : vec4<f32>,
  x_CascadeShadowSplitSpheres2 : vec4<f32>,
  x_CascadeShadowSplitSpheres3 : vec4<f32>,
  x_CascadeShadowSplitSphereRadii : vec4<f32>,
  x_MainLightShadowOffset0 : vec4<f32>,
  x_MainLightShadowOffset1 : vec4<f32>,
  x_MainLightShadowParams : vec4<f32>,
  x_MainLightShadowmapSize : vec4<f32>,
}

type Arr_1 = array<vec4<f32>, 2u>;

struct UnityPerDraw {
  unity_ObjectToWorld : mat4x4<f32>,
  unity_WorldToObject : mat4x4<f32>,
  unity_LODFade : vec4<f32>,
  unity_WorldTransformParams : vec4<f32>,
  unity_RenderingLayer : vec4<f32>,
  unity_LightData : vec4<f32>,
  unity_LightIndices : Arr_1,
  unity_ProbesOcclusion : vec4<f32>,
  unity_SpecCube0_HDR : vec4<f32>,
  unity_SpecCube1_HDR : vec4<f32>,
  unity_SpecCube0_BoxMax : vec4<f32>,
  unity_SpecCube0_BoxMin : vec4<f32>,
  unity_SpecCube0_ProbePosition : vec4<f32>,
  unity_SpecCube1_BoxMax : vec4<f32>,
  unity_SpecCube1_BoxMin : vec4<f32>,
  unity_SpecCube1_ProbePosition : vec4<f32>,
  unity_LightmapST : vec4<f32>,
  unity_DynamicLightmapST : vec4<f32>,
  unity_SHAr : vec4<f32>,
  unity_SHAg : vec4<f32>,
  unity_SHAb : vec4<f32>,
  unity_SHBr : vec4<f32>,
  unity_SHBg : vec4<f32>,
  unity_SHBb : vec4<f32>,
  unity_SHC : vec4<f32>,
  unity_RendererBounds_Min : vec4<f32>,
  unity_RendererBounds_Max : vec4<f32>,
  unity_MatrixPreviousM : mat4x4<f32>,
  unity_MatrixPreviousMI : mat4x4<f32>,
  unity_MotionVectorsParams : vec4<f32>,
  unity_SpriteColor : vec4<f32>,
  unity_SpriteProps : vec4<f32>,
}

type Arr_2 = array<vec4<f32>, 256u>;

type Arr_3 = array<vec4<f32>, 256u>;

type Arr_4 = array<vec4<f32>, 256u>;

type Arr_5 = array<vec4<f32>, 256u>;

type Arr_6 = array<vec4<f32>, 256u>;

struct strided_arr {
  @size(16)
  el : f32,
}

type Arr_7 = array<strided_arr, 256u>;

struct AdditionalLights {
  x_AdditionalLightsPosition : Arr_6,
  x_AdditionalLightsColor : Arr_6,
  x_AdditionalLightsAttenuation : Arr_6,
  x_AdditionalLightsSpotDir : Arr_6,
  x_AdditionalLightsOcclusionProbes : Arr_6,
  x_AdditionalLightsLayerMasks : Arr_7,
}

var<private> vs_TEXCOORD6 : vec4<f32>;

@group(0) @binding(1) var x_WaterFXMap : texture_2d<f32>;

@group(0) @binding(10) var sampler_ScreenTextures_linear_clamp : sampler;

var<private> vs_TEXCOORD3 : vec3<f32>;

@group(1) @binding(0) var<uniform> x_40 : PGlobals;

@group(0) @binding(2) var x_CameraDepthTexture : texture_2d<f32>;

var<private> vs_TEXCOORD5 : vec4<f32>;

var<private> vs_TEXCOORD1 : vec3<f32>;

@group(0) @binding(4) var x_WaterDepthMap : texture_2d<f32>;

@group(0) @binding(13) var sampler_WaterDepthMap_linear_clamp : sampler;

@group(0) @binding(6) var x_SurfaceMap : texture_2d<f32>;

@group(0) @binding(15) var sampler_SurfaceMap : sampler;

var<private> vs_TEXCOORD0 : vec4<f32>;

@group(1) @binding(3) var<uniform> x_203 : UnityPerMaterial;

var<private> vs_NORMAL0 : vec3<f32>;

var<private> vs_TEXCOORD2 : vec3<f32>;

@group(1) @binding(4) var<uniform> x_364 : MainLightShadows;

@group(0) @binding(9) var x_MainLightShadowmapTexture : texture_depth_2d;

@group(0) @binding(18) var sampler_MainLightShadowmapTexture : sampler_comparison;

@group(0) @binding(8) var x_DitherPattern : texture_2d<f32>;

@group(0) @binding(17) var sampler_DitherPattern : sampler;

@group(1) @binding(2) var<uniform> x_2326 : UnityPerDraw;

@group(0) @binding(7) var x_FoamMap : texture_2d<f32>;

@group(0) @binding(16) var sampler_FoamMap : sampler;

@group(0) @binding(5) var x_AbsorptionScatteringRamp : texture_2d<f32>;

@group(0) @binding(14) var sampler_AbsorptionScatteringRamp : sampler;

@group(1) @binding(1) var<uniform> x_2726 : AdditionalLights;

@group(0) @binding(0) var x_CubemapTexture : texture_cube<f32>;

@group(0) @binding(11) var sampler_CubemapTexture : sampler;

@group(0) @binding(3) var x_CameraOpaqueTexture : texture_2d<f32>;

@group(0) @binding(12) var sampler_CameraOpaqueTexture_linear_clamp : sampler;

var<private> SV_Target0 : vec4<f32>;

var<private> gl_FragCoord : vec4<f32>;

fn main_1() {
  var u_xlat0 : vec4<f32>;
  var u_xlat1 : vec3<f32>;
  var u_xlat38 : f32;
  var u_xlat2 : vec4<f32>;
  var u_xlat57 : f32;
  var u_xlat58 : f32;
  var u_xlat40 : vec2<f32>;
  var u_xlat3 : f32;
  var u_xlat4 : vec4<f32>;
  var u_xlat20 : vec2<f32>;
  var u_xlatb22 : bool;
  var x_322 : vec2<f32>;
  var u_xlat22 : vec3<f32>;
  var u_xlat5 : vec4<f32>;
  var u_xlat6 : vec4<f32>;
  var u_xlat7 : vec4<f32>;
  var u_xlatb4 : vec4<bool>;
  var u_xlatu22 : u32;
  var u_xlati22 : i32;
  var txVec0 : vec3<f32>;
  var txVec1 : vec3<f32>;
  var txVec2 : vec3<f32>;
  var txVec3 : vec3<f32>;
  var u_xlatb23 : bool;
  var u_xlat23 : vec2<f32>;
  var u_xlat43 : vec2<f32>;
  var u_xlat45 : vec2<f32>;
  var u_xlat8 : vec4<f32>;
  var u_xlat9 : vec4<f32>;
  var u_xlat10 : vec4<f32>;
  var u_xlat11 : vec4<f32>;
  var u_xlat12 : vec4<f32>;
  var u_xlat13 : vec4<f32>;
  var txVec4 : vec3<f32>;
  var u_xlat42 : f32;
  var txVec5 : vec3<f32>;
  var u_xlat61 : f32;
  var txVec6 : vec3<f32>;
  var txVec7 : vec3<f32>;
  var txVec8 : vec3<f32>;
  var txVec9 : vec3<f32>;
  var txVec10 : vec3<f32>;
  var txVec11 : vec3<f32>;
  var txVec12 : vec3<f32>;
  var u_xlat49 : vec2<f32>;
  var u_xlat14 : vec4<f32>;
  var u_xlat25 : vec3<f32>;
  var u_xlat15 : vec2<f32>;
  var u_xlat46 : vec2<f32>;
  var u_xlat16 : vec4<f32>;
  var u_xlat17 : vec4<f32>;
  var u_xlat18 : vec4<f32>;
  var txVec13 : vec3<f32>;
  var txVec14 : vec3<f32>;
  var txVec15 : vec3<f32>;
  var txVec16 : vec3<f32>;
  var txVec17 : vec3<f32>;
  var txVec18 : vec3<f32>;
  var txVec19 : vec3<f32>;
  var txVec20 : vec3<f32>;
  var txVec21 : vec3<f32>;
  var txVec22 : vec3<f32>;
  var txVec23 : vec3<f32>;
  var txVec24 : vec3<f32>;
  var txVec25 : vec3<f32>;
  var txVec26 : vec3<f32>;
  var txVec27 : vec3<f32>;
  var txVec28 : vec3<f32>;
  var txVec29 : vec3<f32>;
  var u_xlatb41 : bool;
  var u_xlatb60 : bool;
  var x_1814 : f32;
  var u_xlat41 : vec2<f32>;
  var u_xlatu_loop_1 : u32;
  var u_xlat44 : vec2<f32>;
  var u_xlatb7 : vec4<bool>;
  var u_xlatu7 : u32;
  var u_xlati7 : i32;
  var u_xlat26 : vec3<f32>;
  var txVec30 : vec3<f32>;
  var u_xlatb5 : vec4<bool>;
  var u_xlatu0 : u32;
  var u_xlati0 : i32;
  var u_xlat19 : f32;
  var u_xlatb19 : bool;
  var u_xlatb0 : bool;
  var u_xlat59 : f32;
  var u_xlatu_loop_2 : u32;
  var u_xlatu1 : u32;
  var u_xlati59 : i32;
  var indexable : array<vec4<u32>, 4u>;
  var u_xlati1 : i32;
  var u_xlat_precise_vec4 : vec4<f32>;
  var u_xlat_precise_ivec4 : vec4<i32>;
  var u_xlat_precise_bvec4 : vec4<bool>;
  var u_xlat_precise_uvec4 : vec4<u32>;
  let x_13 : vec4<f32> = vs_TEXCOORD6;
  let x_15 : vec4<f32> = vs_TEXCOORD6;
  let x_17 : vec2<f32> = (vec2<f32>(x_13.x, x_13.y) / vec2<f32>(x_15.w, x_15.w));
  let x_18 : vec4<f32> = u_xlat0;
  u_xlat0 = vec4<f32>(x_17.x, x_17.y, x_18.z, x_18.w);
  let x_35 : vec3<f32> = vs_TEXCOORD3;
  let x_47 : f32 = x_40.x_GlobalMipBias.x;
  let x_48 : vec4<f32> = textureSampleBias(x_WaterFXMap, sampler_ScreenTextures_linear_clamp, vec2<f32>(x_35.x, x_35.y), x_47);
  u_xlat1 = vec3<f32>(x_48.x, x_48.y, x_48.z);
  let x_56 : vec4<f32> = u_xlat0;
  let x_59 : f32 = x_40.x_GlobalMipBias.x;
  let x_60 : vec4<f32> = textureSampleBias(x_CameraDepthTexture, sampler_ScreenTextures_linear_clamp, vec2<f32>(x_56.x, x_56.y), x_59);
  u_xlat38 = x_60.x;
  let x_65 : f32 = x_40.x_ZBufferParams.z;
  let x_66 : f32 = u_xlat38;
  let x_70 : f32 = x_40.x_ZBufferParams.w;
  u_xlat38 = ((x_65 * x_66) + x_70);
  let x_73 : f32 = u_xlat38;
  u_xlat38 = (1.0f / x_73);
  let x_75 : f32 = u_xlat38;
  let x_79 : f32 = vs_TEXCOORD5.x;
  let x_83 : f32 = vs_TEXCOORD5.y;
  u_xlat38 = ((x_75 * x_79) + -(x_83));
  let x_88 : vec3<f32> = vs_TEXCOORD1;
  let x_95 : vec2<f32> = ((vec2<f32>(x_88.x, x_88.z) * vec2<f32>(0.002f, 0.002f)) + vec2<f32>(0.5f, 0.5f));
  let x_96 : vec4<f32> = u_xlat2;
  u_xlat2 = vec4<f32>(x_95.x, x_95.y, x_96.z, x_96.w);
  let x_104 : vec4<f32> = u_xlat2;
  let x_106 : vec4<f32> = textureSampleLevel(x_WaterDepthMap, sampler_WaterDepthMap_linear_clamp, vec2<f32>(x_104.x, x_104.y), 1.0f);
  u_xlat57 = x_106.x;
  let x_108 : f32 = u_xlat57;
  u_xlat57 = (-(x_108) + 1.0f);
  let x_114 : f32 = x_40.x_MaxDepth;
  let x_117 : f32 = x_40.x_VeraslWater_DepthCamParams.x;
  u_xlat58 = (x_114 + x_117);
  let x_119 : f32 = u_xlat57;
  let x_120 : f32 = u_xlat58;
  let x_123 : f32 = x_40.x_VeraslWater_DepthCamParams.x;
  u_xlat57 = ((x_119 * x_120) + -(x_123));
  let x_126 : f32 = u_xlat57;
  let x_128 : f32 = vs_TEXCOORD1.y;
  u_xlat57 = (x_126 + x_128);
  let x_131 : f32 = x_40.x_MaxDepth;
  u_xlat58 = (1.0f / x_131);
  let x_139 : vec4<f32> = vs_TEXCOORD0;
  let x_142 : f32 = x_40.x_GlobalMipBias.x;
  let x_143 : vec4<f32> = textureSampleBias(x_SurfaceMap, sampler_SurfaceMap, vec2<f32>(x_139.z, x_139.w), x_142);
  let x_144 : vec2<f32> = vec2<f32>(x_143.x, x_143.y);
  let x_145 : vec4<f32> = u_xlat2;
  u_xlat2 = vec4<f32>(x_144.x, x_144.y, x_145.z, x_145.w);
  let x_147 : vec4<f32> = u_xlat2;
  let x_154 : vec2<f32> = ((vec2<f32>(x_147.x, x_147.y) * vec2<f32>(2.0f, 2.0f)) + vec2<f32>(-1.0f, -1.0f));
  let x_155 : vec4<f32> = u_xlat2;
  u_xlat2 = vec4<f32>(x_154.x, x_154.y, x_155.z, x_155.w);
  let x_162 : vec4<f32> = vs_TEXCOORD0;
  let x_165 : f32 = x_40.x_GlobalMipBias.x;
  let x_166 : vec4<f32> = textureSampleBias(x_SurfaceMap, sampler_SurfaceMap, vec2<f32>(x_162.x, x_162.y), x_165);
  u_xlat40 = vec2<f32>(x_166.x, x_166.y);
  let x_168 : vec2<f32> = u_xlat40;
  u_xlat40 = ((x_168 * vec2<f32>(2.0f, 2.0f)) + vec2<f32>(-1.0f, -1.0f));
  let x_171 : vec2<f32> = u_xlat40;
  let x_173 : vec4<f32> = u_xlat2;
  let x_175 : vec2<f32> = ((x_171 * vec2<f32>(0.5f, 0.5f)) + vec2<f32>(x_173.x, x_173.y));
  let x_176 : vec4<f32> = u_xlat2;
  u_xlat2 = vec4<f32>(x_175.x, x_175.y, x_176.z, x_176.w);
  let x_179 : f32 = u_xlat38;
  u_xlat3 = (x_179 * 0.005f);
  let x_182 : f32 = u_xlat38;
  u_xlat40.x = ((x_182 * 0.25f) + 0.25f);
  let x_188 : f32 = u_xlat40.x;
  u_xlat40.x = clamp(x_188, 0.0f, 1.0f);
  let x_192 : vec2<f32> = u_xlat40;
  let x_194 : vec4<f32> = u_xlat2;
  let x_196 : vec2<f32> = (vec2<f32>(x_192.x, x_192.x) * vec2<f32>(x_194.x, x_194.y));
  let x_197 : vec4<f32> = u_xlat2;
  u_xlat2 = vec4<f32>(x_196.x, x_196.y, x_197.z, x_197.w);
  let x_199 : vec4<f32> = u_xlat2;
  let x_205 : f32 = x_203.x_BumpScale;
  let x_207 : vec2<f32> = (vec2<f32>(x_199.x, x_199.y) * vec2<f32>(x_205, x_205));
  let x_208 : vec4<f32> = u_xlat2;
  u_xlat2 = vec4<f32>(x_207.x, x_208.y, x_207.y, x_208.w);
  u_xlat2.y = 0.0f;
  u_xlat2.w = 1.0f;
  let x_212 : vec4<f32> = u_xlat2;
  let x_215 : vec3<f32> = vs_NORMAL0;
  let x_216 : vec3<f32> = (vec3<f32>(x_212.x, x_212.y, x_212.z) + x_215);
  let x_217 : vec4<f32> = u_xlat2;
  u_xlat2 = vec4<f32>(x_216.x, x_216.y, x_216.z, x_217.w);
  let x_220 : vec3<f32> = u_xlat1;
  let x_223 : vec2<f32> = (-(vec2<f32>(x_220.y, x_220.z)) + vec2<f32>(0.5f, 0.5f));
  let x_224 : vec4<f32> = u_xlat4;
  u_xlat4 = vec4<f32>(x_223.x, x_224.y, x_223.y, x_224.w);
  u_xlat4.y = 0.0f;
  let x_227 : vec4<f32> = u_xlat2;
  let x_229 : vec4<f32> = u_xlat4;
  let x_231 : vec3<f32> = (vec3<f32>(x_227.x, x_227.y, x_227.z) + vec3<f32>(x_229.x, x_229.y, x_229.z));
  let x_232 : vec4<f32> = u_xlat2;
  u_xlat2 = vec4<f32>(x_231.x, x_231.y, x_231.z, x_232.w);
  let x_235 : vec4<f32> = u_xlat2;
  let x_237 : vec4<f32> = u_xlat2;
  u_xlat20.x = dot(vec3<f32>(x_235.x, x_235.y, x_235.z), vec3<f32>(x_237.x, x_237.y, x_237.z));
  let x_242 : f32 = u_xlat20.x;
  u_xlat20.x = inverseSqrt(x_242);
  let x_245 : vec2<f32> = u_xlat20;
  let x_247 : vec4<f32> = u_xlat2;
  let x_249 : vec3<f32> = (vec3<f32>(x_245.x, x_245.x, x_245.x) * vec3<f32>(x_247.x, x_247.y, x_247.z));
  let x_250 : vec4<f32> = u_xlat2;
  u_xlat2 = vec4<f32>(x_249.x, x_249.y, x_249.z, x_250.w);
  let x_252 : vec4<f32> = u_xlat2;
  let x_259 : vec4<f32> = x_40.unity_MatrixVP[1i];
  u_xlat20 = (-(vec2<f32>(x_252.y, x_252.y)) * vec2<f32>(x_259.x, x_259.z));
  let x_263 : vec4<f32> = x_40.unity_MatrixVP[0i];
  let x_265 : vec4<f32> = u_xlat2;
  let x_269 : vec2<f32> = u_xlat20;
  u_xlat20 = ((vec2<f32>(x_263.x, x_263.z) * -(vec2<f32>(x_265.x, x_265.x))) + x_269);
  let x_273 : vec4<f32> = x_40.unity_MatrixVP[2i];
  let x_275 : vec4<f32> = u_xlat2;
  let x_279 : vec2<f32> = u_xlat20;
  u_xlat20 = ((vec2<f32>(x_273.x, x_273.z) * -(vec2<f32>(x_275.z, x_275.z))) + x_279);
  let x_281 : f32 = u_xlat3;
  u_xlat3 = x_281;
  let x_282 : f32 = u_xlat3;
  u_xlat3 = clamp(x_282, 0.0f, 1.0f);
  let x_284 : vec2<f32> = u_xlat20;
  let x_285 : f32 = u_xlat3;
  let x_288 : vec4<f32> = u_xlat0;
  u_xlat20 = ((x_284 * vec2<f32>(x_285, x_285)) + vec2<f32>(x_288.x, x_288.y));
  let x_294 : vec2<f32> = u_xlat20;
  let x_296 : f32 = x_40.x_GlobalMipBias.x;
  let x_297 : vec4<f32> = textureSampleBias(x_CameraDepthTexture, sampler_ScreenTextures_linear_clamp, x_294, x_296);
  u_xlat3 = x_297.x;
  let x_300 : f32 = x_40.x_ZBufferParams.z;
  let x_301 : f32 = u_xlat3;
  let x_304 : f32 = x_40.x_ZBufferParams.w;
  u_xlat3 = ((x_300 * x_301) + x_304);
  let x_306 : f32 = u_xlat3;
  u_xlat3 = (1.0f / x_306);
  let x_308 : f32 = u_xlat3;
  let x_310 : f32 = vs_TEXCOORD5.x;
  let x_313 : f32 = vs_TEXCOORD5.y;
  u_xlat3 = ((x_308 * x_310) + -(x_313));
  let x_319 : f32 = u_xlat3;
  u_xlatb22 = (x_319 < 0.0f);
  let x_321 : bool = u_xlatb22;
  if (x_321) {
    let x_325 : vec4<f32> = u_xlat0;
    x_322 = vec2<f32>(x_325.x, x_325.y);
  } else {
    let x_328 : vec2<f32> = u_xlat20;
    x_322 = x_328;
  }
  let x_329 : vec2<f32> = x_322;
  u_xlat20 = x_329;
  let x_330 : bool = u_xlatb22;
  let x_331 : f32 = u_xlat38;
  let x_332 : f32 = u_xlat3;
  u_xlat38 = select(x_332, x_331, x_330);
  let x_334 : vec4<f32> = u_xlat2;
  let x_337 : vec3<f32> = vs_TEXCOORD2;
  u_xlat3 = dot(vec3<f32>(x_334.x, x_334.y, x_334.z), x_337);
  let x_339 : f32 = u_xlat3;
  u_xlat3 = (-(x_339) + 1.0f);
  let x_343 : f32 = u_xlat3;
  let x_344 : f32 = u_xlat3;
  u_xlat22.x = (x_343 * x_344);
  let x_348 : f32 = u_xlat22.x;
  let x_350 : f32 = u_xlat22.x;
  u_xlat22.x = (x_348 * x_350);
  let x_354 : f32 = u_xlat22.x;
  let x_355 : f32 = u_xlat3;
  u_xlat3 = (x_354 * x_355);
  let x_357 : f32 = u_xlat3;
  u_xlat3 = clamp(x_357, 0.0f, 1.0f);
  let x_359 : vec3<f32> = vs_TEXCOORD1;
  let x_366 : vec4<f32> = x_364.x_CascadeShadowSplitSpheres0;
  u_xlat22 = (x_359 + -(vec3<f32>(x_366.x, x_366.y, x_366.z)));
  let x_370 : vec3<f32> = vs_TEXCOORD1;
  let x_372 : vec4<f32> = x_364.x_CascadeShadowSplitSpheres1;
  let x_375 : vec3<f32> = (x_370 + -(vec3<f32>(x_372.x, x_372.y, x_372.z)));
  let x_376 : vec4<f32> = u_xlat4;
  u_xlat4 = vec4<f32>(x_375.x, x_375.y, x_375.z, x_376.w);
  let x_379 : vec3<f32> = vs_TEXCOORD1;
  let x_382 : vec4<f32> = x_364.x_CascadeShadowSplitSpheres2;
  let x_385 : vec3<f32> = (x_379 + -(vec3<f32>(x_382.x, x_382.y, x_382.z)));
  let x_386 : vec4<f32> = u_xlat5;
  u_xlat5 = vec4<f32>(x_385.x, x_385.y, x_385.z, x_386.w);
  let x_389 : vec3<f32> = vs_TEXCOORD1;
  let x_392 : vec4<f32> = x_364.x_CascadeShadowSplitSpheres3;
  let x_395 : vec3<f32> = (x_389 + -(vec3<f32>(x_392.x, x_392.y, x_392.z)));
  let x_396 : vec4<f32> = u_xlat6;
  u_xlat6 = vec4<f32>(x_395.x, x_395.y, x_395.z, x_396.w);
  let x_399 : vec3<f32> = u_xlat22;
  let x_400 : vec3<f32> = u_xlat22;
  u_xlat7.x = dot(x_399, x_400);
  let x_403 : vec4<f32> = u_xlat4;
  let x_405 : vec4<f32> = u_xlat4;
  u_xlat7.y = dot(vec3<f32>(x_403.x, x_403.y, x_403.z), vec3<f32>(x_405.x, x_405.y, x_405.z));
  let x_409 : vec4<f32> = u_xlat5;
  let x_411 : vec4<f32> = u_xlat5;
  u_xlat7.z = dot(vec3<f32>(x_409.x, x_409.y, x_409.z), vec3<f32>(x_411.x, x_411.y, x_411.z));
  let x_415 : vec4<f32> = u_xlat6;
  let x_417 : vec4<f32> = u_xlat6;
  u_xlat7.w = dot(vec3<f32>(x_415.x, x_415.y, x_415.z), vec3<f32>(x_417.x, x_417.y, x_417.z));
  let x_424 : vec4<f32> = u_xlat7;
  let x_427 : vec4<f32> = x_364.x_CascadeShadowSplitSphereRadii;
  u_xlatb4 = (x_424 < x_427);
  let x_430 : bool = u_xlatb4.x;
  u_xlat5.x = select(0.0f, 1.0f, x_430);
  let x_434 : bool = u_xlatb4.y;
  u_xlat5.y = select(0.0f, 1.0f, x_434);
  let x_438 : bool = u_xlatb4.z;
  u_xlat5.z = select(0.0f, 1.0f, x_438);
  let x_442 : bool = u_xlatb4.w;
  u_xlat5.w = select(0.0f, 1.0f, x_442);
  let x_446 : bool = u_xlatb4.x;
  u_xlat22.x = select(-0.0f, -1.0f, x_446);
  let x_451 : bool = u_xlatb4.y;
  u_xlat22.y = select(-0.0f, -1.0f, x_451);
  let x_455 : bool = u_xlatb4.z;
  u_xlat22.z = select(-0.0f, -1.0f, x_455);
  let x_458 : vec3<f32> = u_xlat22;
  let x_459 : vec4<f32> = u_xlat5;
  u_xlat22 = (x_458 + vec3<f32>(x_459.y, x_459.z, x_459.w));
  let x_462 : vec3<f32> = u_xlat22;
  let x_464 : vec3<f32> = max(x_462, vec3<f32>(0.0f, 0.0f, 0.0f));
  let x_465 : vec4<f32> = u_xlat5;
  u_xlat5 = vec4<f32>(x_465.x, x_464.x, x_464.y, x_464.z);
  let x_467 : vec4<f32> = u_xlat5;
  u_xlat22.x = dot(x_467, vec4<f32>(4.0f, 3.0f, 2.0f, 1.0f));
  let x_474 : f32 = u_xlat22.x;
  u_xlat22.x = (-(x_474) + 4.0f);
  let x_481 : f32 = u_xlat22.x;
  u_xlatu22 = u32(x_481);
  let x_485 : u32 = u_xlatu22;
  u_xlati22 = (bitcast<i32>(x_485) << bitcast<u32>(2i));
  let x_488 : vec3<f32> = vs_TEXCOORD1;
  let x_490 : i32 = u_xlati22;
  let x_493 : i32 = u_xlati22;
  let x_497 : vec4<f32> = x_364.x_MainLightWorldToShadow[((x_490 + 1i) / 4i)][((x_493 + 1i) % 4i)];
  let x_499 : vec3<f32> = (vec3<f32>(x_488.y, x_488.y, x_488.y) * vec3<f32>(x_497.x, x_497.y, x_497.z));
  let x_500 : vec4<f32> = u_xlat4;
  u_xlat4 = vec4<f32>(x_499.x, x_499.y, x_499.z, x_500.w);
  let x_502 : i32 = u_xlati22;
  let x_504 : i32 = u_xlati22;
  let x_507 : vec4<f32> = x_364.x_MainLightWorldToShadow[(x_502 / 4i)][(x_504 % 4i)];
  let x_509 : vec3<f32> = vs_TEXCOORD1;
  let x_512 : vec4<f32> = u_xlat4;
  let x_514 : vec3<f32> = ((vec3<f32>(x_507.x, x_507.y, x_507.z) * vec3<f32>(x_509.x, x_509.x, x_509.x)) + vec3<f32>(x_512.x, x_512.y, x_512.z));
  let x_515 : vec4<f32> = u_xlat4;
  u_xlat4 = vec4<f32>(x_514.x, x_514.y, x_514.z, x_515.w);
  let x_517 : i32 = u_xlati22;
  let x_520 : i32 = u_xlati22;
  let x_524 : vec4<f32> = x_364.x_MainLightWorldToShadow[((x_517 + 2i) / 4i)][((x_520 + 2i) % 4i)];
  let x_526 : vec3<f32> = vs_TEXCOORD1;
  let x_529 : vec4<f32> = u_xlat4;
  let x_531 : vec3<f32> = ((vec3<f32>(x_524.x, x_524.y, x_524.z) * vec3<f32>(x_526.z, x_526.z, x_526.z)) + vec3<f32>(x_529.x, x_529.y, x_529.z));
  let x_532 : vec4<f32> = u_xlat4;
  u_xlat4 = vec4<f32>(x_531.x, x_531.y, x_531.z, x_532.w);
  let x_534 : vec4<f32> = u_xlat4;
  let x_536 : i32 = u_xlati22;
  let x_539 : i32 = u_xlati22;
  let x_543 : vec4<f32> = x_364.x_MainLightWorldToShadow[((x_536 + 3i) / 4i)][((x_539 + 3i) % 4i)];
  u_xlat22 = (vec3<f32>(x_534.x, x_534.y, x_534.z) + vec3<f32>(x_543.x, x_543.y, x_543.z));
  let x_547 : f32 = x_364.x_MainLightShadowParams.y;
  u_xlatb4.x = (0.0f < x_547);
  let x_551 : bool = u_xlatb4.x;
  if (x_551) {
    let x_555 : f32 = x_364.x_MainLightShadowParams.y;
    u_xlatb4.x = (x_555 == 1.0f);
    let x_559 : bool = u_xlatb4.x;
    if (x_559) {
      let x_562 : vec3<f32> = u_xlat22;
      let x_565 : vec4<f32> = x_364.x_MainLightShadowOffset0;
      u_xlat4 = (vec4<f32>(x_562.x, x_562.y, x_562.x, x_562.y) + x_565);
      let x_568 : vec4<f32> = u_xlat4;
      let x_569 : vec2<f32> = vec2<f32>(x_568.x, x_568.y);
      let x_571 : f32 = u_xlat22.z;
      txVec0 = vec3<f32>(x_569.x, x_569.y, x_571);
      let x_583 : vec3<f32> = txVec0;
      let x_585 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_583.xy, x_583.z);
      u_xlat5.x = x_585;
      let x_588 : vec4<f32> = u_xlat4;
      let x_589 : vec2<f32> = vec2<f32>(x_588.z, x_588.w);
      let x_591 : f32 = u_xlat22.z;
      txVec1 = vec3<f32>(x_589.x, x_589.y, x_591);
      let x_598 : vec3<f32> = txVec1;
      let x_600 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_598.xy, x_598.z);
      u_xlat5.y = x_600;
      let x_602 : vec3<f32> = u_xlat22;
      let x_605 : vec4<f32> = x_364.x_MainLightShadowOffset1;
      u_xlat4 = (vec4<f32>(x_602.x, x_602.y, x_602.x, x_602.y) + x_605);
      let x_608 : vec4<f32> = u_xlat4;
      let x_609 : vec2<f32> = vec2<f32>(x_608.x, x_608.y);
      let x_611 : f32 = u_xlat22.z;
      txVec2 = vec3<f32>(x_609.x, x_609.y, x_611);
      let x_618 : vec3<f32> = txVec2;
      let x_620 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_618.xy, x_618.z);
      u_xlat5.z = x_620;
      let x_623 : vec4<f32> = u_xlat4;
      let x_624 : vec2<f32> = vec2<f32>(x_623.z, x_623.w);
      let x_626 : f32 = u_xlat22.z;
      txVec3 = vec3<f32>(x_624.x, x_624.y, x_626);
      let x_633 : vec3<f32> = txVec3;
      let x_635 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_633.xy, x_633.z);
      u_xlat5.w = x_635;
      let x_637 : vec4<f32> = u_xlat5;
      u_xlat4.x = dot(x_637, vec4<f32>(0.25f, 0.25f, 0.25f, 0.25f));
    } else {
      let x_644 : f32 = x_364.x_MainLightShadowParams.y;
      u_xlatb23 = (x_644 == 2.0f);
      let x_646 : bool = u_xlatb23;
      if (x_646) {
        let x_650 : vec3<f32> = u_xlat22;
        let x_653 : vec4<f32> = x_364.x_MainLightShadowmapSize;
        u_xlat23 = ((vec2<f32>(x_650.x, x_650.y) * vec2<f32>(x_653.z, x_653.w)) + vec2<f32>(0.5f, 0.5f));
        let x_657 : vec2<f32> = u_xlat23;
        u_xlat23 = floor(x_657);
        let x_659 : vec3<f32> = u_xlat22;
        let x_662 : vec4<f32> = x_364.x_MainLightShadowmapSize;
        let x_665 : vec2<f32> = u_xlat23;
        let x_667 : vec2<f32> = ((vec2<f32>(x_659.x, x_659.y) * vec2<f32>(x_662.z, x_662.w)) + -(x_665));
        let x_668 : vec4<f32> = u_xlat5;
        u_xlat5 = vec4<f32>(x_667.x, x_667.y, x_668.z, x_668.w);
        let x_670 : vec4<f32> = u_xlat5;
        u_xlat6 = (vec4<f32>(x_670.x, x_670.x, x_670.y, x_670.y) + vec4<f32>(0.5f, 1.0f, 0.5f, 1.0f));
        let x_674 : vec4<f32> = u_xlat6;
        let x_676 : vec4<f32> = u_xlat6;
        u_xlat7 = (vec4<f32>(x_674.x, x_674.x, x_674.z, x_674.z) * vec4<f32>(x_676.x, x_676.x, x_676.z, x_676.z));
        let x_680 : vec4<f32> = u_xlat7;
        u_xlat43 = (vec2<f32>(x_680.y, x_680.w) * vec2<f32>(0.079999998f, 0.079999998f));
        let x_685 : vec4<f32> = u_xlat7;
        let x_688 : vec4<f32> = u_xlat5;
        let x_691 : vec2<f32> = ((vec2<f32>(x_685.x, x_685.z) * vec2<f32>(0.5f, 0.5f)) + -(vec2<f32>(x_688.x, x_688.y)));
        let x_692 : vec4<f32> = u_xlat6;
        u_xlat6 = vec4<f32>(x_691.x, x_692.y, x_691.y, x_692.w);
        let x_694 : vec4<f32> = u_xlat5;
        let x_698 : vec2<f32> = (-(vec2<f32>(x_694.x, x_694.y)) + vec2<f32>(1.0f, 1.0f));
        let x_699 : vec4<f32> = u_xlat7;
        u_xlat7 = vec4<f32>(x_698.x, x_698.y, x_699.z, x_699.w);
        let x_702 : vec4<f32> = u_xlat5;
        u_xlat45 = min(vec2<f32>(x_702.x, x_702.y), vec2<f32>(0.0f, 0.0f));
        let x_706 : vec2<f32> = u_xlat45;
        let x_708 : vec2<f32> = u_xlat45;
        let x_710 : vec4<f32> = u_xlat7;
        u_xlat45 = ((-(x_706) * x_708) + vec2<f32>(x_710.x, x_710.y));
        let x_713 : vec4<f32> = u_xlat5;
        let x_715 : vec2<f32> = max(vec2<f32>(x_713.x, x_713.y), vec2<f32>(0.0f, 0.0f));
        let x_716 : vec4<f32> = u_xlat5;
        u_xlat5 = vec4<f32>(x_715.x, x_715.y, x_716.z, x_716.w);
        let x_718 : vec4<f32> = u_xlat5;
        let x_721 : vec4<f32> = u_xlat5;
        let x_724 : vec4<f32> = u_xlat6;
        let x_726 : vec2<f32> = ((-(vec2<f32>(x_718.x, x_718.y)) * vec2<f32>(x_721.x, x_721.y)) + vec2<f32>(x_724.y, x_724.w));
        let x_727 : vec4<f32> = u_xlat5;
        u_xlat5 = vec4<f32>(x_726.x, x_726.y, x_727.z, x_727.w);
        let x_729 : vec2<f32> = u_xlat45;
        u_xlat45 = (x_729 + vec2<f32>(1.0f, 1.0f));
        let x_731 : vec4<f32> = u_xlat5;
        let x_733 : vec2<f32> = (vec2<f32>(x_731.x, x_731.y) + vec2<f32>(1.0f, 1.0f));
        let x_734 : vec4<f32> = u_xlat5;
        u_xlat5 = vec4<f32>(x_733.x, x_733.y, x_734.z, x_734.w);
        let x_737 : vec4<f32> = u_xlat6;
        let x_741 : vec2<f32> = (vec2<f32>(x_737.x, x_737.z) * vec2<f32>(0.159999996f, 0.159999996f));
        let x_742 : vec4<f32> = u_xlat8;
        u_xlat8 = vec4<f32>(x_741.x, x_741.y, x_742.z, x_742.w);
        let x_745 : vec4<f32> = u_xlat7;
        let x_747 : vec2<f32> = (vec2<f32>(x_745.x, x_745.y) * vec2<f32>(0.159999996f, 0.159999996f));
        let x_748 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_747.x, x_747.y, x_748.z, x_748.w);
        let x_750 : vec2<f32> = u_xlat45;
        let x_751 : vec2<f32> = (x_750 * vec2<f32>(0.159999996f, 0.159999996f));
        let x_752 : vec4<f32> = u_xlat7;
        u_xlat7 = vec4<f32>(x_751.x, x_751.y, x_752.z, x_752.w);
        let x_755 : vec4<f32> = u_xlat5;
        let x_757 : vec2<f32> = (vec2<f32>(x_755.x, x_755.y) * vec2<f32>(0.159999996f, 0.159999996f));
        let x_758 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_757.x, x_757.y, x_758.z, x_758.w);
        let x_760 : vec4<f32> = u_xlat6;
        let x_762 : vec2<f32> = (vec2<f32>(x_760.y, x_760.w) * vec2<f32>(0.159999996f, 0.159999996f));
        let x_763 : vec4<f32> = u_xlat5;
        u_xlat5 = vec4<f32>(x_762.x, x_762.y, x_763.z, x_763.w);
        let x_766 : f32 = u_xlat7.x;
        u_xlat8.z = x_766;
        let x_769 : f32 = u_xlat5.x;
        u_xlat8.w = x_769;
        let x_772 : f32 = u_xlat10.x;
        u_xlat9.z = x_772;
        let x_775 : f32 = u_xlat43.x;
        u_xlat9.w = x_775;
        let x_777 : vec4<f32> = u_xlat8;
        let x_779 : vec4<f32> = u_xlat9;
        u_xlat6 = (vec4<f32>(x_777.z, x_777.w, x_777.x, x_777.z) + vec4<f32>(x_779.z, x_779.w, x_779.x, x_779.z));
        let x_783 : f32 = u_xlat8.y;
        u_xlat7.z = x_783;
        let x_786 : f32 = u_xlat5.y;
        u_xlat7.w = x_786;
        let x_789 : f32 = u_xlat9.y;
        u_xlat10.z = x_789;
        let x_792 : f32 = u_xlat43.y;
        u_xlat10.w = x_792;
        let x_794 : vec4<f32> = u_xlat7;
        let x_796 : vec4<f32> = u_xlat10;
        let x_798 : vec3<f32> = (vec3<f32>(x_794.z, x_794.y, x_794.w) + vec3<f32>(x_796.z, x_796.y, x_796.w));
        let x_799 : vec4<f32> = u_xlat5;
        u_xlat5 = vec4<f32>(x_798.x, x_798.y, x_798.z, x_799.w);
        let x_801 : vec4<f32> = u_xlat9;
        let x_803 : vec4<f32> = u_xlat6;
        let x_805 : vec3<f32> = (vec3<f32>(x_801.x, x_801.z, x_801.w) / vec3<f32>(x_803.z, x_803.w, x_803.y));
        let x_806 : vec4<f32> = u_xlat7;
        u_xlat7 = vec4<f32>(x_805.x, x_805.y, x_805.z, x_806.w);
        let x_808 : vec4<f32> = u_xlat7;
        let x_814 : vec3<f32> = (vec3<f32>(x_808.x, x_808.y, x_808.z) + vec3<f32>(-2.5f, -0.5f, 1.5f));
        let x_815 : vec4<f32> = u_xlat7;
        u_xlat7 = vec4<f32>(x_814.x, x_814.y, x_814.z, x_815.w);
        let x_817 : vec4<f32> = u_xlat10;
        let x_819 : vec4<f32> = u_xlat5;
        let x_821 : vec3<f32> = (vec3<f32>(x_817.z, x_817.y, x_817.w) / vec3<f32>(x_819.x, x_819.y, x_819.z));
        let x_822 : vec4<f32> = u_xlat8;
        u_xlat8 = vec4<f32>(x_821.x, x_821.y, x_821.z, x_822.w);
        let x_824 : vec4<f32> = u_xlat8;
        let x_826 : vec3<f32> = (vec3<f32>(x_824.x, x_824.y, x_824.z) + vec3<f32>(-2.5f, -0.5f, 1.5f));
        let x_827 : vec4<f32> = u_xlat8;
        u_xlat8 = vec4<f32>(x_826.x, x_826.y, x_826.z, x_827.w);
        let x_829 : vec4<f32> = u_xlat7;
        let x_832 : vec4<f32> = x_364.x_MainLightShadowmapSize;
        let x_834 : vec3<f32> = (vec3<f32>(x_829.y, x_829.x, x_829.z) * vec3<f32>(x_832.x, x_832.x, x_832.x));
        let x_835 : vec4<f32> = u_xlat7;
        u_xlat7 = vec4<f32>(x_834.x, x_834.y, x_834.z, x_835.w);
        let x_837 : vec4<f32> = u_xlat8;
        let x_840 : vec4<f32> = x_364.x_MainLightShadowmapSize;
        let x_842 : vec3<f32> = (vec3<f32>(x_837.x, x_837.y, x_837.z) * vec3<f32>(x_840.y, x_840.y, x_840.y));
        let x_843 : vec4<f32> = u_xlat8;
        u_xlat8 = vec4<f32>(x_842.x, x_842.y, x_842.z, x_843.w);
        let x_846 : f32 = u_xlat8.x;
        u_xlat7.w = x_846;
        let x_848 : vec2<f32> = u_xlat23;
        let x_851 : vec4<f32> = x_364.x_MainLightShadowmapSize;
        let x_854 : vec4<f32> = u_xlat7;
        u_xlat9 = ((vec4<f32>(x_848.x, x_848.y, x_848.x, x_848.y) * vec4<f32>(x_851.x, x_851.y, x_851.x, x_851.y)) + vec4<f32>(x_854.y, x_854.w, x_854.x, x_854.w));
        let x_857 : vec2<f32> = u_xlat23;
        let x_859 : vec4<f32> = x_364.x_MainLightShadowmapSize;
        let x_862 : vec4<f32> = u_xlat7;
        let x_864 : vec2<f32> = ((x_857 * vec2<f32>(x_859.x, x_859.y)) + vec2<f32>(x_862.z, x_862.w));
        let x_865 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_864.x, x_864.y, x_865.z, x_865.w);
        let x_868 : f32 = u_xlat7.y;
        u_xlat8.w = x_868;
        let x_870 : vec4<f32> = u_xlat8;
        let x_871 : vec2<f32> = vec2<f32>(x_870.y, x_870.z);
        let x_872 : vec4<f32> = u_xlat7;
        u_xlat7 = vec4<f32>(x_872.x, x_871.x, x_872.z, x_871.y);
        let x_875 : vec2<f32> = u_xlat23;
        let x_878 : vec4<f32> = x_364.x_MainLightShadowmapSize;
        let x_881 : vec4<f32> = u_xlat7;
        u_xlat11 = ((vec4<f32>(x_875.x, x_875.y, x_875.x, x_875.y) * vec4<f32>(x_878.x, x_878.y, x_878.x, x_878.y)) + vec4<f32>(x_881.x, x_881.y, x_881.z, x_881.y));
        let x_884 : vec2<f32> = u_xlat23;
        let x_887 : vec4<f32> = x_364.x_MainLightShadowmapSize;
        let x_890 : vec4<f32> = u_xlat8;
        u_xlat8 = ((vec4<f32>(x_884.x, x_884.y, x_884.x, x_884.y) * vec4<f32>(x_887.x, x_887.y, x_887.x, x_887.y)) + vec4<f32>(x_890.w, x_890.y, x_890.w, x_890.z));
        let x_893 : vec2<f32> = u_xlat23;
        let x_896 : vec4<f32> = x_364.x_MainLightShadowmapSize;
        let x_899 : vec4<f32> = u_xlat7;
        u_xlat7 = ((vec4<f32>(x_893.x, x_893.y, x_893.x, x_893.y) * vec4<f32>(x_896.x, x_896.y, x_896.x, x_896.y)) + vec4<f32>(x_899.x, x_899.w, x_899.z, x_899.w));
        let x_903 : vec4<f32> = u_xlat5;
        let x_905 : vec4<f32> = u_xlat6;
        u_xlat12 = (vec4<f32>(x_903.x, x_903.x, x_903.x, x_903.y) * vec4<f32>(x_905.z, x_905.w, x_905.y, x_905.z));
        let x_909 : vec4<f32> = u_xlat5;
        let x_911 : vec4<f32> = u_xlat6;
        u_xlat13 = (vec4<f32>(x_909.y, x_909.y, x_909.z, x_909.z) * x_911);
        let x_914 : f32 = u_xlat5.z;
        let x_916 : f32 = u_xlat6.y;
        u_xlat23.x = (x_914 * x_916);
        let x_920 : vec4<f32> = u_xlat9;
        let x_921 : vec2<f32> = vec2<f32>(x_920.x, x_920.y);
        let x_923 : f32 = u_xlat22.z;
        txVec4 = vec3<f32>(x_921.x, x_921.y, x_923);
        let x_931 : vec3<f32> = txVec4;
        let x_933 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_931.xy, x_931.z);
        u_xlat42 = x_933;
        let x_935 : vec4<f32> = u_xlat9;
        let x_936 : vec2<f32> = vec2<f32>(x_935.z, x_935.w);
        let x_938 : f32 = u_xlat22.z;
        txVec5 = vec3<f32>(x_936.x, x_936.y, x_938);
        let x_946 : vec3<f32> = txVec5;
        let x_948 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_946.xy, x_946.z);
        u_xlat61 = x_948;
        let x_949 : f32 = u_xlat61;
        let x_951 : f32 = u_xlat12.y;
        u_xlat61 = (x_949 * x_951);
        let x_954 : f32 = u_xlat12.x;
        let x_955 : f32 = u_xlat42;
        let x_957 : f32 = u_xlat61;
        u_xlat42 = ((x_954 * x_955) + x_957);
        let x_960 : vec4<f32> = u_xlat10;
        let x_961 : vec2<f32> = vec2<f32>(x_960.x, x_960.y);
        let x_963 : f32 = u_xlat22.z;
        txVec6 = vec3<f32>(x_961.x, x_961.y, x_963);
        let x_970 : vec3<f32> = txVec6;
        let x_972 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_970.xy, x_970.z);
        u_xlat61 = x_972;
        let x_974 : f32 = u_xlat12.z;
        let x_975 : f32 = u_xlat61;
        let x_977 : f32 = u_xlat42;
        u_xlat42 = ((x_974 * x_975) + x_977);
        let x_980 : vec4<f32> = u_xlat8;
        let x_981 : vec2<f32> = vec2<f32>(x_980.x, x_980.y);
        let x_983 : f32 = u_xlat22.z;
        txVec7 = vec3<f32>(x_981.x, x_981.y, x_983);
        let x_990 : vec3<f32> = txVec7;
        let x_992 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_990.xy, x_990.z);
        u_xlat61 = x_992;
        let x_994 : f32 = u_xlat12.w;
        let x_995 : f32 = u_xlat61;
        let x_997 : f32 = u_xlat42;
        u_xlat42 = ((x_994 * x_995) + x_997);
        let x_1000 : vec4<f32> = u_xlat11;
        let x_1001 : vec2<f32> = vec2<f32>(x_1000.x, x_1000.y);
        let x_1003 : f32 = u_xlat22.z;
        txVec8 = vec3<f32>(x_1001.x, x_1001.y, x_1003);
        let x_1010 : vec3<f32> = txVec8;
        let x_1012 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1010.xy, x_1010.z);
        u_xlat61 = x_1012;
        let x_1014 : f32 = u_xlat13.x;
        let x_1015 : f32 = u_xlat61;
        let x_1017 : f32 = u_xlat42;
        u_xlat42 = ((x_1014 * x_1015) + x_1017);
        let x_1020 : vec4<f32> = u_xlat11;
        let x_1021 : vec2<f32> = vec2<f32>(x_1020.z, x_1020.w);
        let x_1023 : f32 = u_xlat22.z;
        txVec9 = vec3<f32>(x_1021.x, x_1021.y, x_1023);
        let x_1030 : vec3<f32> = txVec9;
        let x_1032 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1030.xy, x_1030.z);
        u_xlat61 = x_1032;
        let x_1034 : f32 = u_xlat13.y;
        let x_1035 : f32 = u_xlat61;
        let x_1037 : f32 = u_xlat42;
        u_xlat42 = ((x_1034 * x_1035) + x_1037);
        let x_1040 : vec4<f32> = u_xlat8;
        let x_1041 : vec2<f32> = vec2<f32>(x_1040.z, x_1040.w);
        let x_1043 : f32 = u_xlat22.z;
        txVec10 = vec3<f32>(x_1041.x, x_1041.y, x_1043);
        let x_1050 : vec3<f32> = txVec10;
        let x_1052 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1050.xy, x_1050.z);
        u_xlat61 = x_1052;
        let x_1054 : f32 = u_xlat13.z;
        let x_1055 : f32 = u_xlat61;
        let x_1057 : f32 = u_xlat42;
        u_xlat42 = ((x_1054 * x_1055) + x_1057);
        let x_1060 : vec4<f32> = u_xlat7;
        let x_1061 : vec2<f32> = vec2<f32>(x_1060.x, x_1060.y);
        let x_1063 : f32 = u_xlat22.z;
        txVec11 = vec3<f32>(x_1061.x, x_1061.y, x_1063);
        let x_1070 : vec3<f32> = txVec11;
        let x_1072 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1070.xy, x_1070.z);
        u_xlat61 = x_1072;
        let x_1074 : f32 = u_xlat13.w;
        let x_1075 : f32 = u_xlat61;
        let x_1077 : f32 = u_xlat42;
        u_xlat42 = ((x_1074 * x_1075) + x_1077);
        let x_1080 : vec4<f32> = u_xlat7;
        let x_1081 : vec2<f32> = vec2<f32>(x_1080.z, x_1080.w);
        let x_1083 : f32 = u_xlat22.z;
        txVec12 = vec3<f32>(x_1081.x, x_1081.y, x_1083);
        let x_1090 : vec3<f32> = txVec12;
        let x_1092 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1090.xy, x_1090.z);
        u_xlat61 = x_1092;
        let x_1094 : f32 = u_xlat23.x;
        let x_1095 : f32 = u_xlat61;
        let x_1097 : f32 = u_xlat42;
        u_xlat4.x = ((x_1094 * x_1095) + x_1097);
      } else {
        let x_1101 : vec3<f32> = u_xlat22;
        let x_1104 : vec4<f32> = x_364.x_MainLightShadowmapSize;
        u_xlat23 = ((vec2<f32>(x_1101.x, x_1101.y) * vec2<f32>(x_1104.z, x_1104.w)) + vec2<f32>(0.5f, 0.5f));
        let x_1108 : vec2<f32> = u_xlat23;
        u_xlat23 = floor(x_1108);
        let x_1110 : vec3<f32> = u_xlat22;
        let x_1113 : vec4<f32> = x_364.x_MainLightShadowmapSize;
        let x_1116 : vec2<f32> = u_xlat23;
        let x_1118 : vec2<f32> = ((vec2<f32>(x_1110.x, x_1110.y) * vec2<f32>(x_1113.z, x_1113.w)) + -(x_1116));
        let x_1119 : vec4<f32> = u_xlat5;
        u_xlat5 = vec4<f32>(x_1118.x, x_1118.y, x_1119.z, x_1119.w);
        let x_1121 : vec4<f32> = u_xlat5;
        u_xlat6 = (vec4<f32>(x_1121.x, x_1121.x, x_1121.y, x_1121.y) + vec4<f32>(0.5f, 1.0f, 0.5f, 1.0f));
        let x_1124 : vec4<f32> = u_xlat6;
        let x_1126 : vec4<f32> = u_xlat6;
        u_xlat7 = (vec4<f32>(x_1124.x, x_1124.x, x_1124.z, x_1124.z) * vec4<f32>(x_1126.x, x_1126.x, x_1126.z, x_1126.z));
        let x_1129 : vec4<f32> = u_xlat7;
        let x_1133 : vec2<f32> = (vec2<f32>(x_1129.y, x_1129.w) * vec2<f32>(0.040816002f, 0.040816002f));
        let x_1134 : vec4<f32> = u_xlat8;
        u_xlat8 = vec4<f32>(x_1134.x, x_1133.x, x_1134.z, x_1133.y);
        let x_1136 : vec4<f32> = u_xlat7;
        let x_1139 : vec4<f32> = u_xlat5;
        u_xlat43 = ((vec2<f32>(x_1136.x, x_1136.z) * vec2<f32>(0.5f, 0.5f)) + -(vec2<f32>(x_1139.x, x_1139.y)));
        let x_1143 : vec4<f32> = u_xlat5;
        let x_1146 : vec2<f32> = (-(vec2<f32>(x_1143.x, x_1143.y)) + vec2<f32>(1.0f, 1.0f));
        let x_1147 : vec4<f32> = u_xlat6;
        u_xlat6 = vec4<f32>(x_1146.x, x_1147.y, x_1146.y, x_1147.w);
        let x_1149 : vec4<f32> = u_xlat5;
        let x_1151 : vec2<f32> = min(vec2<f32>(x_1149.x, x_1149.y), vec2<f32>(0.0f, 0.0f));
        let x_1152 : vec4<f32> = u_xlat7;
        u_xlat7 = vec4<f32>(x_1151.x, x_1151.y, x_1152.z, x_1152.w);
        let x_1154 : vec4<f32> = u_xlat7;
        let x_1157 : vec4<f32> = u_xlat7;
        let x_1160 : vec4<f32> = u_xlat6;
        let x_1162 : vec2<f32> = ((-(vec2<f32>(x_1154.x, x_1154.y)) * vec2<f32>(x_1157.x, x_1157.y)) + vec2<f32>(x_1160.x, x_1160.z));
        let x_1163 : vec4<f32> = u_xlat6;
        u_xlat6 = vec4<f32>(x_1162.x, x_1163.y, x_1162.y, x_1163.w);
        let x_1165 : vec4<f32> = u_xlat5;
        let x_1167 : vec2<f32> = max(vec2<f32>(x_1165.x, x_1165.y), vec2<f32>(0.0f, 0.0f));
        let x_1168 : vec4<f32> = u_xlat7;
        u_xlat7 = vec4<f32>(x_1167.x, x_1167.y, x_1168.z, x_1168.w);
        let x_1170 : vec4<f32> = u_xlat7;
        let x_1173 : vec4<f32> = u_xlat7;
        let x_1176 : vec4<f32> = u_xlat6;
        let x_1178 : vec2<f32> = ((-(vec2<f32>(x_1170.x, x_1170.y)) * vec2<f32>(x_1173.x, x_1173.y)) + vec2<f32>(x_1176.y, x_1176.w));
        let x_1179 : vec4<f32> = u_xlat6;
        u_xlat6 = vec4<f32>(x_1179.x, x_1178.x, x_1179.z, x_1178.y);
        let x_1181 : vec4<f32> = u_xlat6;
        u_xlat6 = (x_1181 + vec4<f32>(2.0f, 2.0f, 2.0f, 2.0f));
        let x_1185 : f32 = u_xlat6.y;
        u_xlat7.z = (x_1185 * 0.081632003f);
        let x_1189 : vec2<f32> = u_xlat43;
        let x_1192 : vec2<f32> = (vec2<f32>(x_1189.y, x_1189.x) * vec2<f32>(0.081632003f, 0.081632003f));
        let x_1193 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_1192.x, x_1192.y, x_1193.z, x_1193.w);
        let x_1195 : vec4<f32> = u_xlat6;
        u_xlat43 = (vec2<f32>(x_1195.x, x_1195.z) * vec2<f32>(0.081632003f, 0.081632003f));
        let x_1199 : f32 = u_xlat6.w;
        u_xlat9.z = (x_1199 * 0.081632003f);
        let x_1203 : f32 = u_xlat9.y;
        u_xlat7.x = x_1203;
        let x_1205 : vec4<f32> = u_xlat5;
        let x_1212 : vec2<f32> = ((vec2<f32>(x_1205.x, x_1205.x) * vec2<f32>(-0.081632003f, 0.081632003f)) + vec2<f32>(0.163264006f, 0.081632003f));
        let x_1213 : vec4<f32> = u_xlat7;
        u_xlat7 = vec4<f32>(x_1213.x, x_1212.x, x_1213.z, x_1212.y);
        let x_1215 : vec4<f32> = u_xlat5;
        let x_1219 : vec2<f32> = ((vec2<f32>(x_1215.x, x_1215.x) * vec2<f32>(-0.081632003f, 0.081632003f)) + vec2<f32>(0.081632003f, 0.163264006f));
        let x_1220 : vec4<f32> = u_xlat6;
        u_xlat6 = vec4<f32>(x_1219.x, x_1220.y, x_1219.y, x_1220.w);
        let x_1223 : f32 = u_xlat43.x;
        u_xlat6.y = x_1223;
        let x_1226 : f32 = u_xlat8.y;
        u_xlat6.w = x_1226;
        let x_1228 : vec4<f32> = u_xlat6;
        let x_1229 : vec4<f32> = u_xlat7;
        u_xlat7 = (x_1228 + x_1229);
        let x_1231 : vec4<f32> = u_xlat5;
        let x_1234 : vec2<f32> = ((vec2<f32>(x_1231.y, x_1231.y) * vec2<f32>(-0.081632003f, 0.081632003f)) + vec2<f32>(0.163264006f, 0.081632003f));
        let x_1235 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_1235.x, x_1234.x, x_1235.z, x_1234.y);
        let x_1237 : vec4<f32> = u_xlat5;
        let x_1240 : vec2<f32> = ((vec2<f32>(x_1237.y, x_1237.y) * vec2<f32>(-0.081632003f, 0.081632003f)) + vec2<f32>(0.081632003f, 0.163264006f));
        let x_1241 : vec4<f32> = u_xlat8;
        u_xlat8 = vec4<f32>(x_1240.x, x_1241.y, x_1240.y, x_1241.w);
        let x_1244 : f32 = u_xlat43.y;
        u_xlat8.y = x_1244;
        let x_1246 : vec4<f32> = u_xlat8;
        let x_1247 : vec4<f32> = u_xlat9;
        u_xlat5 = (x_1246 + x_1247);
        let x_1249 : vec4<f32> = u_xlat6;
        let x_1250 : vec4<f32> = u_xlat7;
        u_xlat6 = (x_1249 / x_1250);
        let x_1252 : vec4<f32> = u_xlat6;
        u_xlat6 = (x_1252 + vec4<f32>(-3.5f, -1.5f, 0.5f, 2.5f));
        let x_1258 : vec4<f32> = u_xlat8;
        let x_1259 : vec4<f32> = u_xlat5;
        u_xlat8 = (x_1258 / x_1259);
        let x_1261 : vec4<f32> = u_xlat8;
        u_xlat8 = (x_1261 + vec4<f32>(-3.5f, -1.5f, 0.5f, 2.5f));
        let x_1263 : vec4<f32> = u_xlat6;
        let x_1266 : vec4<f32> = x_364.x_MainLightShadowmapSize;
        u_xlat6 = (vec4<f32>(x_1263.w, x_1263.x, x_1263.y, x_1263.z) * vec4<f32>(x_1266.x, x_1266.x, x_1266.x, x_1266.x));
        let x_1269 : vec4<f32> = u_xlat8;
        let x_1272 : vec4<f32> = x_364.x_MainLightShadowmapSize;
        u_xlat8 = (vec4<f32>(x_1269.x, x_1269.w, x_1269.y, x_1269.z) * vec4<f32>(x_1272.y, x_1272.y, x_1272.y, x_1272.y));
        let x_1275 : vec4<f32> = u_xlat6;
        let x_1276 : vec3<f32> = vec3<f32>(x_1275.y, x_1275.z, x_1275.w);
        let x_1277 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_1276.x, x_1277.y, x_1276.y, x_1276.z);
        let x_1280 : f32 = u_xlat8.x;
        u_xlat9.y = x_1280;
        let x_1282 : vec2<f32> = u_xlat23;
        let x_1285 : vec4<f32> = x_364.x_MainLightShadowmapSize;
        let x_1288 : vec4<f32> = u_xlat9;
        u_xlat10 = ((vec4<f32>(x_1282.x, x_1282.y, x_1282.x, x_1282.y) * vec4<f32>(x_1285.x, x_1285.y, x_1285.x, x_1285.y)) + vec4<f32>(x_1288.x, x_1288.y, x_1288.z, x_1288.y));
        let x_1291 : vec2<f32> = u_xlat23;
        let x_1293 : vec4<f32> = x_364.x_MainLightShadowmapSize;
        let x_1296 : vec4<f32> = u_xlat9;
        let x_1298 : vec2<f32> = ((x_1291 * vec2<f32>(x_1293.x, x_1293.y)) + vec2<f32>(x_1296.w, x_1296.y));
        let x_1299 : vec4<f32> = u_xlat11;
        u_xlat11 = vec4<f32>(x_1298.x, x_1298.y, x_1299.z, x_1299.w);
        let x_1302 : f32 = u_xlat9.y;
        u_xlat6.y = x_1302;
        let x_1305 : f32 = u_xlat8.z;
        u_xlat9.y = x_1305;
        let x_1307 : vec2<f32> = u_xlat23;
        let x_1310 : vec4<f32> = x_364.x_MainLightShadowmapSize;
        let x_1313 : vec4<f32> = u_xlat9;
        u_xlat12 = ((vec4<f32>(x_1307.x, x_1307.y, x_1307.x, x_1307.y) * vec4<f32>(x_1310.x, x_1310.y, x_1310.x, x_1310.y)) + vec4<f32>(x_1313.x, x_1313.y, x_1313.z, x_1313.y));
        let x_1317 : vec2<f32> = u_xlat23;
        let x_1319 : vec4<f32> = x_364.x_MainLightShadowmapSize;
        let x_1322 : vec4<f32> = u_xlat9;
        u_xlat49 = ((x_1317 * vec2<f32>(x_1319.x, x_1319.y)) + vec2<f32>(x_1322.w, x_1322.y));
        let x_1326 : f32 = u_xlat9.y;
        u_xlat6.z = x_1326;
        let x_1328 : vec2<f32> = u_xlat23;
        let x_1331 : vec4<f32> = x_364.x_MainLightShadowmapSize;
        let x_1334 : vec4<f32> = u_xlat6;
        u_xlat13 = ((vec4<f32>(x_1328.x, x_1328.y, x_1328.x, x_1328.y) * vec4<f32>(x_1331.x, x_1331.y, x_1331.x, x_1331.y)) + vec4<f32>(x_1334.x, x_1334.y, x_1334.x, x_1334.z));
        let x_1338 : f32 = u_xlat8.w;
        u_xlat9.y = x_1338;
        let x_1341 : vec2<f32> = u_xlat23;
        let x_1344 : vec4<f32> = x_364.x_MainLightShadowmapSize;
        let x_1347 : vec4<f32> = u_xlat9;
        u_xlat14 = ((vec4<f32>(x_1341.x, x_1341.y, x_1341.x, x_1341.y) * vec4<f32>(x_1344.x, x_1344.y, x_1344.x, x_1344.y)) + vec4<f32>(x_1347.x, x_1347.y, x_1347.z, x_1347.y));
        let x_1351 : vec2<f32> = u_xlat23;
        let x_1353 : vec4<f32> = x_364.x_MainLightShadowmapSize;
        let x_1356 : vec4<f32> = u_xlat9;
        let x_1358 : vec2<f32> = ((x_1351 * vec2<f32>(x_1353.x, x_1353.y)) + vec2<f32>(x_1356.w, x_1356.y));
        let x_1359 : vec3<f32> = u_xlat25;
        u_xlat25 = vec3<f32>(x_1358.x, x_1358.y, x_1359.z);
        let x_1362 : f32 = u_xlat9.y;
        u_xlat6.w = x_1362;
        let x_1365 : vec2<f32> = u_xlat23;
        let x_1367 : vec4<f32> = x_364.x_MainLightShadowmapSize;
        let x_1370 : vec4<f32> = u_xlat6;
        u_xlat15 = ((x_1365 * vec2<f32>(x_1367.x, x_1367.y)) + vec2<f32>(x_1370.x, x_1370.w));
        let x_1373 : vec4<f32> = u_xlat9;
        let x_1374 : vec3<f32> = vec3<f32>(x_1373.x, x_1373.z, x_1373.w);
        let x_1375 : vec4<f32> = u_xlat8;
        u_xlat8 = vec4<f32>(x_1374.x, x_1375.y, x_1374.y, x_1374.z);
        let x_1377 : vec2<f32> = u_xlat23;
        let x_1380 : vec4<f32> = x_364.x_MainLightShadowmapSize;
        let x_1383 : vec4<f32> = u_xlat8;
        u_xlat9 = ((vec4<f32>(x_1377.x, x_1377.y, x_1377.x, x_1377.y) * vec4<f32>(x_1380.x, x_1380.y, x_1380.x, x_1380.y)) + vec4<f32>(x_1383.x, x_1383.y, x_1383.z, x_1383.y));
        let x_1387 : vec2<f32> = u_xlat23;
        let x_1389 : vec4<f32> = x_364.x_MainLightShadowmapSize;
        let x_1392 : vec4<f32> = u_xlat8;
        u_xlat46 = ((x_1387 * vec2<f32>(x_1389.x, x_1389.y)) + vec2<f32>(x_1392.w, x_1392.y));
        let x_1396 : f32 = u_xlat6.x;
        u_xlat8.x = x_1396;
        let x_1398 : vec2<f32> = u_xlat23;
        let x_1400 : vec4<f32> = x_364.x_MainLightShadowmapSize;
        let x_1403 : vec4<f32> = u_xlat8;
        u_xlat23 = ((x_1398 * vec2<f32>(x_1400.x, x_1400.y)) + vec2<f32>(x_1403.x, x_1403.y));
        let x_1407 : vec4<f32> = u_xlat5;
        let x_1409 : vec4<f32> = u_xlat7;
        u_xlat16 = (vec4<f32>(x_1407.x, x_1407.x, x_1407.x, x_1407.x) * x_1409);
        let x_1412 : vec4<f32> = u_xlat5;
        let x_1414 : vec4<f32> = u_xlat7;
        u_xlat17 = (vec4<f32>(x_1412.y, x_1412.y, x_1412.y, x_1412.y) * x_1414);
        let x_1417 : vec4<f32> = u_xlat5;
        let x_1419 : vec4<f32> = u_xlat7;
        u_xlat18 = (vec4<f32>(x_1417.z, x_1417.z, x_1417.z, x_1417.z) * x_1419);
        let x_1421 : vec4<f32> = u_xlat5;
        let x_1423 : vec4<f32> = u_xlat7;
        u_xlat5 = (vec4<f32>(x_1421.w, x_1421.w, x_1421.w, x_1421.w) * x_1423);
        let x_1426 : vec4<f32> = u_xlat10;
        let x_1427 : vec2<f32> = vec2<f32>(x_1426.x, x_1426.y);
        let x_1429 : f32 = u_xlat22.z;
        txVec13 = vec3<f32>(x_1427.x, x_1427.y, x_1429);
        let x_1436 : vec3<f32> = txVec13;
        let x_1438 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1436.xy, x_1436.z);
        u_xlat61 = x_1438;
        let x_1440 : vec4<f32> = u_xlat10;
        let x_1441 : vec2<f32> = vec2<f32>(x_1440.z, x_1440.w);
        let x_1443 : f32 = u_xlat22.z;
        txVec14 = vec3<f32>(x_1441.x, x_1441.y, x_1443);
        let x_1450 : vec3<f32> = txVec14;
        let x_1452 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1450.xy, x_1450.z);
        u_xlat6.x = x_1452;
        let x_1455 : f32 = u_xlat6.x;
        let x_1457 : f32 = u_xlat16.y;
        u_xlat6.x = (x_1455 * x_1457);
        let x_1461 : f32 = u_xlat16.x;
        let x_1462 : f32 = u_xlat61;
        let x_1465 : f32 = u_xlat6.x;
        u_xlat61 = ((x_1461 * x_1462) + x_1465);
        let x_1468 : vec4<f32> = u_xlat11;
        let x_1469 : vec2<f32> = vec2<f32>(x_1468.x, x_1468.y);
        let x_1471 : f32 = u_xlat22.z;
        txVec15 = vec3<f32>(x_1469.x, x_1469.y, x_1471);
        let x_1478 : vec3<f32> = txVec15;
        let x_1480 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1478.xy, x_1478.z);
        u_xlat6.x = x_1480;
        let x_1483 : f32 = u_xlat16.z;
        let x_1485 : f32 = u_xlat6.x;
        let x_1487 : f32 = u_xlat61;
        u_xlat61 = ((x_1483 * x_1485) + x_1487);
        let x_1490 : vec4<f32> = u_xlat13;
        let x_1491 : vec2<f32> = vec2<f32>(x_1490.x, x_1490.y);
        let x_1493 : f32 = u_xlat22.z;
        txVec16 = vec3<f32>(x_1491.x, x_1491.y, x_1493);
        let x_1500 : vec3<f32> = txVec16;
        let x_1502 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1500.xy, x_1500.z);
        u_xlat6.x = x_1502;
        let x_1505 : f32 = u_xlat16.w;
        let x_1507 : f32 = u_xlat6.x;
        let x_1509 : f32 = u_xlat61;
        u_xlat61 = ((x_1505 * x_1507) + x_1509);
        let x_1512 : vec4<f32> = u_xlat12;
        let x_1513 : vec2<f32> = vec2<f32>(x_1512.x, x_1512.y);
        let x_1515 : f32 = u_xlat22.z;
        txVec17 = vec3<f32>(x_1513.x, x_1513.y, x_1515);
        let x_1522 : vec3<f32> = txVec17;
        let x_1524 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1522.xy, x_1522.z);
        u_xlat6.x = x_1524;
        let x_1527 : f32 = u_xlat17.x;
        let x_1529 : f32 = u_xlat6.x;
        let x_1531 : f32 = u_xlat61;
        u_xlat61 = ((x_1527 * x_1529) + x_1531);
        let x_1534 : vec4<f32> = u_xlat12;
        let x_1535 : vec2<f32> = vec2<f32>(x_1534.z, x_1534.w);
        let x_1537 : f32 = u_xlat22.z;
        txVec18 = vec3<f32>(x_1535.x, x_1535.y, x_1537);
        let x_1544 : vec3<f32> = txVec18;
        let x_1546 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1544.xy, x_1544.z);
        u_xlat6.x = x_1546;
        let x_1549 : f32 = u_xlat17.y;
        let x_1551 : f32 = u_xlat6.x;
        let x_1553 : f32 = u_xlat61;
        u_xlat61 = ((x_1549 * x_1551) + x_1553);
        let x_1556 : vec2<f32> = u_xlat49;
        let x_1558 : f32 = u_xlat22.z;
        txVec19 = vec3<f32>(x_1556.x, x_1556.y, x_1558);
        let x_1565 : vec3<f32> = txVec19;
        let x_1567 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1565.xy, x_1565.z);
        u_xlat6.x = x_1567;
        let x_1570 : f32 = u_xlat17.z;
        let x_1572 : f32 = u_xlat6.x;
        let x_1574 : f32 = u_xlat61;
        u_xlat61 = ((x_1570 * x_1572) + x_1574);
        let x_1577 : vec4<f32> = u_xlat13;
        let x_1578 : vec2<f32> = vec2<f32>(x_1577.z, x_1577.w);
        let x_1580 : f32 = u_xlat22.z;
        txVec20 = vec3<f32>(x_1578.x, x_1578.y, x_1580);
        let x_1587 : vec3<f32> = txVec20;
        let x_1589 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1587.xy, x_1587.z);
        u_xlat6.x = x_1589;
        let x_1592 : f32 = u_xlat17.w;
        let x_1594 : f32 = u_xlat6.x;
        let x_1596 : f32 = u_xlat61;
        u_xlat61 = ((x_1592 * x_1594) + x_1596);
        let x_1599 : vec4<f32> = u_xlat14;
        let x_1600 : vec2<f32> = vec2<f32>(x_1599.x, x_1599.y);
        let x_1602 : f32 = u_xlat22.z;
        txVec21 = vec3<f32>(x_1600.x, x_1600.y, x_1602);
        let x_1609 : vec3<f32> = txVec21;
        let x_1611 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1609.xy, x_1609.z);
        u_xlat6.x = x_1611;
        let x_1614 : f32 = u_xlat18.x;
        let x_1616 : f32 = u_xlat6.x;
        let x_1618 : f32 = u_xlat61;
        u_xlat61 = ((x_1614 * x_1616) + x_1618);
        let x_1621 : vec4<f32> = u_xlat14;
        let x_1622 : vec2<f32> = vec2<f32>(x_1621.z, x_1621.w);
        let x_1624 : f32 = u_xlat22.z;
        txVec22 = vec3<f32>(x_1622.x, x_1622.y, x_1624);
        let x_1631 : vec3<f32> = txVec22;
        let x_1633 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1631.xy, x_1631.z);
        u_xlat6.x = x_1633;
        let x_1636 : f32 = u_xlat18.y;
        let x_1638 : f32 = u_xlat6.x;
        let x_1640 : f32 = u_xlat61;
        u_xlat61 = ((x_1636 * x_1638) + x_1640);
        let x_1643 : vec3<f32> = u_xlat25;
        let x_1644 : vec2<f32> = vec2<f32>(x_1643.x, x_1643.y);
        let x_1646 : f32 = u_xlat22.z;
        txVec23 = vec3<f32>(x_1644.x, x_1644.y, x_1646);
        let x_1653 : vec3<f32> = txVec23;
        let x_1655 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1653.xy, x_1653.z);
        u_xlat6.x = x_1655;
        let x_1658 : f32 = u_xlat18.z;
        let x_1660 : f32 = u_xlat6.x;
        let x_1662 : f32 = u_xlat61;
        u_xlat61 = ((x_1658 * x_1660) + x_1662);
        let x_1665 : vec2<f32> = u_xlat15;
        let x_1667 : f32 = u_xlat22.z;
        txVec24 = vec3<f32>(x_1665.x, x_1665.y, x_1667);
        let x_1674 : vec3<f32> = txVec24;
        let x_1676 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1674.xy, x_1674.z);
        u_xlat6.x = x_1676;
        let x_1679 : f32 = u_xlat18.w;
        let x_1681 : f32 = u_xlat6.x;
        let x_1683 : f32 = u_xlat61;
        u_xlat61 = ((x_1679 * x_1681) + x_1683);
        let x_1686 : vec4<f32> = u_xlat9;
        let x_1687 : vec2<f32> = vec2<f32>(x_1686.x, x_1686.y);
        let x_1689 : f32 = u_xlat22.z;
        txVec25 = vec3<f32>(x_1687.x, x_1687.y, x_1689);
        let x_1696 : vec3<f32> = txVec25;
        let x_1698 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1696.xy, x_1696.z);
        u_xlat6.x = x_1698;
        let x_1701 : f32 = u_xlat5.x;
        let x_1703 : f32 = u_xlat6.x;
        let x_1705 : f32 = u_xlat61;
        u_xlat61 = ((x_1701 * x_1703) + x_1705);
        let x_1708 : vec4<f32> = u_xlat9;
        let x_1709 : vec2<f32> = vec2<f32>(x_1708.z, x_1708.w);
        let x_1711 : f32 = u_xlat22.z;
        txVec26 = vec3<f32>(x_1709.x, x_1709.y, x_1711);
        let x_1718 : vec3<f32> = txVec26;
        let x_1720 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1718.xy, x_1718.z);
        u_xlat5.x = x_1720;
        let x_1723 : f32 = u_xlat5.y;
        let x_1725 : f32 = u_xlat5.x;
        let x_1727 : f32 = u_xlat61;
        u_xlat61 = ((x_1723 * x_1725) + x_1727);
        let x_1730 : vec2<f32> = u_xlat46;
        let x_1732 : f32 = u_xlat22.z;
        txVec27 = vec3<f32>(x_1730.x, x_1730.y, x_1732);
        let x_1739 : vec3<f32> = txVec27;
        let x_1741 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1739.xy, x_1739.z);
        u_xlat5.x = x_1741;
        let x_1744 : f32 = u_xlat5.z;
        let x_1746 : f32 = u_xlat5.x;
        let x_1748 : f32 = u_xlat61;
        u_xlat61 = ((x_1744 * x_1746) + x_1748);
        let x_1751 : vec2<f32> = u_xlat23;
        let x_1753 : f32 = u_xlat22.z;
        txVec28 = vec3<f32>(x_1751.x, x_1751.y, x_1753);
        let x_1760 : vec3<f32> = txVec28;
        let x_1762 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1760.xy, x_1760.z);
        u_xlat23.x = x_1762;
        let x_1765 : f32 = u_xlat5.w;
        let x_1767 : f32 = u_xlat23.x;
        let x_1769 : f32 = u_xlat61;
        u_xlat4.x = ((x_1765 * x_1767) + x_1769);
      }
    }
  } else {
    let x_1774 : vec3<f32> = u_xlat22;
    let x_1775 : vec2<f32> = vec2<f32>(x_1774.x, x_1774.y);
    let x_1777 : f32 = u_xlat22.z;
    txVec29 = vec3<f32>(x_1775.x, x_1775.y, x_1777);
    let x_1784 : vec3<f32> = txVec29;
    let x_1786 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1784.xy, x_1784.z);
    u_xlat4.x = x_1786;
  }
  let x_1789 : f32 = x_364.x_MainLightShadowParams.x;
  u_xlat22.x = (-(x_1789) + 1.0f);
  let x_1794 : f32 = u_xlat4.x;
  let x_1796 : f32 = x_364.x_MainLightShadowParams.x;
  let x_1799 : f32 = u_xlat22.x;
  u_xlat22.x = ((x_1794 * x_1796) + x_1799);
  let x_1804 : f32 = u_xlat22.z;
  u_xlatb41 = (0.0f >= x_1804);
  let x_1808 : f32 = u_xlat22.z;
  u_xlatb60 = (x_1808 >= 1.0f);
  let x_1810 : bool = u_xlatb60;
  let x_1811 : bool = u_xlatb41;
  u_xlatb41 = (x_1810 | x_1811);
  let x_1813 : bool = u_xlatb41;
  if (x_1813) {
    x_1814 = 1.0f;
  } else {
    let x_1819 : f32 = u_xlat22.x;
    x_1814 = x_1819;
  }
  let x_1820 : f32 = x_1814;
  u_xlat22.x = x_1820;
  let x_1822 : vec4<f32> = u_xlat0;
  let x_1825 : vec4<f32> = x_40.x_ScreenParams;
  let x_1827 : vec2<f32> = (vec2<f32>(x_1822.x, x_1822.y) * vec2<f32>(x_1825.x, x_1825.y));
  let x_1828 : vec4<f32> = u_xlat0;
  u_xlat0 = vec4<f32>(x_1827.x, x_1827.y, x_1828.z, x_1828.w);
  let x_1830 : vec4<f32> = u_xlat0;
  let x_1833 : vec4<f32> = x_203.x_DitherPattern_TexelSize;
  let x_1835 : vec2<f32> = (vec2<f32>(x_1830.x, x_1830.y) * vec2<f32>(x_1833.x, x_1833.y));
  let x_1836 : vec4<f32> = u_xlat0;
  u_xlat0 = vec4<f32>(x_1835.x, x_1835.y, x_1836.z, x_1836.w);
  let x_1839 : f32 = u_xlat38;
  u_xlat41 = (vec2<f32>(x_1839, x_1839) * vec2<f32>(20.0f, 0.25f));
  let x_1844 : vec2<f32> = u_xlat41;
  let x_1846 : vec3<f32> = vs_TEXCOORD2;
  let x_1848 : vec3<f32> = (vec3<f32>(x_1844.y, x_1844.y, x_1844.y) * -(x_1846));
  let x_1849 : vec4<f32> = u_xlat4;
  u_xlat4 = vec4<f32>(x_1848.x, x_1848.y, x_1848.z, x_1849.w);
  let x_1852 : f32 = x_40.x_Time.x;
  u_xlat5.x = fract(x_1852);
  let x_1856 : f32 = x_40.x_Time.z;
  u_xlat5.y = fract(-(x_1856));
  let x_1860 : vec4<f32> = u_xlat0;
  u_xlat43 = vec2<f32>(x_1860.x, x_1860.y);
  u_xlat61 = 0.0f;
  u_xlatu_loop_1 = 0u;
  loop {
    let x_1868 : u32 = u_xlatu_loop_1;
    if ((x_1868 < 4u)) {
    } else {
      break;
    }
    let x_1871 : vec4<f32> = u_xlat5;
    let x_1873 : vec2<f32> = u_xlat43;
    u_xlat43 = (vec2<f32>(x_1871.x, x_1871.y) + x_1873);
    let x_1875 : u32 = u_xlatu_loop_1;
    u_xlat25.x = f32(x_1875);
    let x_1879 : vec3<f32> = u_xlat25;
    let x_1882 : vec4<f32> = x_40.x_ScreenParams;
    let x_1885 : vec2<f32> = u_xlat43;
    u_xlat44 = ((vec2<f32>(x_1879.x, x_1879.x) * vec2<f32>(x_1882.x, x_1882.y)) + x_1885);
    let x_1892 : vec2<f32> = u_xlat44;
    let x_1894 : f32 = x_40.x_GlobalMipBias.x;
    let x_1895 : vec4<f32> = textureSampleBias(x_DitherPattern, sampler_DitherPattern, x_1892, x_1894);
    let x_1896 : vec3<f32> = vec3<f32>(x_1895.x, x_1895.y, x_1895.z);
    let x_1897 : vec4<f32> = u_xlat7;
    u_xlat7 = vec4<f32>(x_1896.x, x_1896.y, x_1896.z, x_1897.w);
    let x_1899 : vec4<f32> = u_xlat7;
    let x_1904 : vec3<f32> = ((vec3<f32>(x_1899.x, x_1899.z, x_1899.y) * vec3<f32>(2.0f, 2.0f, 2.0f)) + vec3<f32>(-1.0f, -1.0f, -1.0f));
    let x_1905 : vec4<f32> = u_xlat7;
    u_xlat7 = vec4<f32>(x_1904.x, x_1904.y, x_1904.z, x_1905.w);
    let x_1907 : vec2<f32> = u_xlat41;
    let x_1909 : vec4<f32> = u_xlat7;
    let x_1911 : vec3<f32> = (vec3<f32>(x_1907.y, x_1907.y, x_1907.y) * vec3<f32>(x_1909.x, x_1909.y, x_1909.z));
    let x_1912 : vec4<f32> = u_xlat7;
    u_xlat7 = vec4<f32>(x_1911.x, x_1911.y, x_1912.z, x_1911.z);
    let x_1914 : vec3<f32> = u_xlat25;
    let x_1916 : vec4<f32> = u_xlat7;
    let x_1918 : vec3<f32> = (vec3<f32>(x_1914.x, x_1914.x, x_1914.x) * vec3<f32>(x_1916.x, x_1916.y, x_1916.w));
    let x_1919 : vec4<f32> = u_xlat7;
    u_xlat7 = vec4<f32>(x_1918.x, x_1918.y, x_1919.z, x_1918.z);
    let x_1921 : vec4<f32> = u_xlat7;
    let x_1926 : vec3<f32> = vs_TEXCOORD1;
    let x_1927 : vec3<f32> = ((vec3<f32>(x_1921.x, x_1921.y, x_1921.w) * vec3<f32>(0.100000001f, 0.100000001f, 0.100000001f)) + x_1926);
    let x_1928 : vec4<f32> = u_xlat7;
    u_xlat7 = vec4<f32>(x_1927.x, x_1927.y, x_1928.z, x_1927.z);
    let x_1931 : f32 = u_xlat25.x;
    let x_1933 : f32 = u_xlat7.z;
    u_xlat25.x = (x_1931 + x_1933);
    let x_1936 : vec4<f32> = u_xlat4;
    let x_1938 : vec3<f32> = u_xlat25;
    let x_1941 : vec4<f32> = u_xlat7;
    u_xlat25 = ((vec3<f32>(x_1936.x, x_1936.y, x_1936.z) * vec3<f32>(x_1938.x, x_1938.x, x_1938.x)) + vec3<f32>(x_1941.x, x_1941.y, x_1941.w));
    let x_1944 : vec3<f32> = u_xlat25;
    let x_1946 : vec4<f32> = x_364.x_CascadeShadowSplitSpheres0;
    let x_1949 : vec3<f32> = (x_1944 + -(vec3<f32>(x_1946.x, x_1946.y, x_1946.z)));
    let x_1950 : vec4<f32> = u_xlat7;
    u_xlat7 = vec4<f32>(x_1949.x, x_1949.y, x_1949.z, x_1950.w);
    let x_1952 : vec3<f32> = u_xlat25;
    let x_1954 : vec4<f32> = x_364.x_CascadeShadowSplitSpheres1;
    let x_1957 : vec3<f32> = (x_1952 + -(vec3<f32>(x_1954.x, x_1954.y, x_1954.z)));
    let x_1958 : vec4<f32> = u_xlat8;
    u_xlat8 = vec4<f32>(x_1957.x, x_1957.y, x_1957.z, x_1958.w);
    let x_1960 : vec3<f32> = u_xlat25;
    let x_1962 : vec4<f32> = x_364.x_CascadeShadowSplitSpheres2;
    let x_1965 : vec3<f32> = (x_1960 + -(vec3<f32>(x_1962.x, x_1962.y, x_1962.z)));
    let x_1966 : vec4<f32> = u_xlat9;
    u_xlat9 = vec4<f32>(x_1965.x, x_1965.y, x_1965.z, x_1966.w);
    let x_1968 : vec3<f32> = u_xlat25;
    let x_1970 : vec4<f32> = x_364.x_CascadeShadowSplitSpheres3;
    let x_1973 : vec3<f32> = (x_1968 + -(vec3<f32>(x_1970.x, x_1970.y, x_1970.z)));
    let x_1974 : vec4<f32> = u_xlat10;
    u_xlat10 = vec4<f32>(x_1973.x, x_1973.y, x_1973.z, x_1974.w);
    let x_1976 : vec4<f32> = u_xlat7;
    let x_1978 : vec4<f32> = u_xlat7;
    u_xlat7.x = dot(vec3<f32>(x_1976.x, x_1976.y, x_1976.z), vec3<f32>(x_1978.x, x_1978.y, x_1978.z));
    let x_1982 : vec4<f32> = u_xlat8;
    let x_1984 : vec4<f32> = u_xlat8;
    u_xlat7.y = dot(vec3<f32>(x_1982.x, x_1982.y, x_1982.z), vec3<f32>(x_1984.x, x_1984.y, x_1984.z));
    let x_1988 : vec4<f32> = u_xlat9;
    let x_1990 : vec4<f32> = u_xlat9;
    u_xlat7.z = dot(vec3<f32>(x_1988.x, x_1988.y, x_1988.z), vec3<f32>(x_1990.x, x_1990.y, x_1990.z));
    let x_1994 : vec4<f32> = u_xlat10;
    let x_1996 : vec4<f32> = u_xlat10;
    u_xlat7.w = dot(vec3<f32>(x_1994.x, x_1994.y, x_1994.z), vec3<f32>(x_1996.x, x_1996.y, x_1996.z));
    let x_2001 : vec4<f32> = u_xlat7;
    let x_2003 : vec4<f32> = x_364.x_CascadeShadowSplitSphereRadii;
    u_xlatb7 = (x_2001 < x_2003);
    let x_2006 : bool = u_xlatb7.x;
    u_xlat8.x = select(0.0f, 1.0f, x_2006);
    let x_2010 : bool = u_xlatb7.y;
    u_xlat8.y = select(0.0f, 1.0f, x_2010);
    let x_2014 : bool = u_xlatb7.z;
    u_xlat8.z = select(0.0f, 1.0f, x_2014);
    let x_2018 : bool = u_xlatb7.w;
    u_xlat8.w = select(0.0f, 1.0f, x_2018);
    let x_2022 : bool = u_xlatb7.x;
    u_xlat7.x = select(-0.0f, -1.0f, x_2022);
    let x_2026 : bool = u_xlatb7.y;
    u_xlat7.y = select(-0.0f, -1.0f, x_2026);
    let x_2030 : bool = u_xlatb7.z;
    u_xlat7.z = select(-0.0f, -1.0f, x_2030);
    let x_2033 : vec4<f32> = u_xlat7;
    let x_2035 : vec4<f32> = u_xlat8;
    let x_2037 : vec3<f32> = (vec3<f32>(x_2033.x, x_2033.y, x_2033.z) + vec3<f32>(x_2035.y, x_2035.z, x_2035.w));
    let x_2038 : vec4<f32> = u_xlat7;
    u_xlat7 = vec4<f32>(x_2037.x, x_2037.y, x_2037.z, x_2038.w);
    let x_2040 : vec4<f32> = u_xlat7;
    let x_2042 : vec3<f32> = max(vec3<f32>(x_2040.x, x_2040.y, x_2040.z), vec3<f32>(0.0f, 0.0f, 0.0f));
    let x_2043 : vec4<f32> = u_xlat8;
    u_xlat8 = vec4<f32>(x_2043.x, x_2042.x, x_2042.y, x_2042.z);
    let x_2045 : vec4<f32> = u_xlat8;
    u_xlat7.x = dot(x_2045, vec4<f32>(4.0f, 3.0f, 2.0f, 1.0f));
    let x_2049 : f32 = u_xlat7.x;
    u_xlat7.x = (-(x_2049) + 4.0f);
    let x_2055 : f32 = u_xlat7.x;
    u_xlatu7 = u32(x_2055);
    let x_2058 : u32 = u_xlatu7;
    u_xlati7 = (bitcast<i32>(x_2058) << bitcast<u32>(2i));
    let x_2062 : vec3<f32> = u_xlat25;
    let x_2064 : i32 = u_xlati7;
    let x_2067 : i32 = u_xlati7;
    let x_2071 : vec4<f32> = x_364.x_MainLightWorldToShadow[((x_2064 + 1i) / 4i)][((x_2067 + 1i) % 4i)];
    u_xlat26 = (vec3<f32>(x_2062.y, x_2062.y, x_2062.y) * vec3<f32>(x_2071.x, x_2071.y, x_2071.z));
    let x_2074 : i32 = u_xlati7;
    let x_2076 : i32 = u_xlati7;
    let x_2079 : vec4<f32> = x_364.x_MainLightWorldToShadow[(x_2074 / 4i)][(x_2076 % 4i)];
    let x_2081 : vec3<f32> = u_xlat25;
    let x_2084 : vec3<f32> = u_xlat26;
    u_xlat26 = ((vec3<f32>(x_2079.x, x_2079.y, x_2079.z) * vec3<f32>(x_2081.x, x_2081.x, x_2081.x)) + x_2084);
    let x_2086 : i32 = u_xlati7;
    let x_2089 : i32 = u_xlati7;
    let x_2093 : vec4<f32> = x_364.x_MainLightWorldToShadow[((x_2086 + 2i) / 4i)][((x_2089 + 2i) % 4i)];
    let x_2095 : vec3<f32> = u_xlat25;
    let x_2098 : vec3<f32> = u_xlat26;
    u_xlat25 = ((vec3<f32>(x_2093.x, x_2093.y, x_2093.z) * vec3<f32>(x_2095.z, x_2095.z, x_2095.z)) + x_2098);
    let x_2100 : vec3<f32> = u_xlat25;
    let x_2101 : i32 = u_xlati7;
    let x_2104 : i32 = u_xlati7;
    let x_2108 : vec4<f32> = x_364.x_MainLightWorldToShadow[((x_2101 + 3i) / 4i)][((x_2104 + 3i) % 4i)];
    u_xlat25 = (x_2100 + vec3<f32>(x_2108.x, x_2108.y, x_2108.z));
    let x_2112 : vec3<f32> = u_xlat25;
    let x_2113 : vec2<f32> = vec2<f32>(x_2112.x, x_2112.y);
    let x_2115 : f32 = u_xlat25.z;
    txVec30 = vec3<f32>(x_2113.x, x_2113.y, x_2115);
    let x_2122 : vec3<f32> = txVec30;
    let x_2124 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2122.xy, x_2122.z);
    u_xlat25.x = x_2124;
    let x_2126 : f32 = u_xlat61;
    let x_2128 : f32 = u_xlat25.x;
    u_xlat61 = (x_2126 + x_2128);

    continuing {
      let x_2130 : u32 = u_xlatu_loop_1;
      u_xlatu_loop_1 = (x_2130 + bitcast<u32>(1i));
    }
  }
  let x_2132 : vec3<f32> = vs_TEXCOORD1;
  let x_2135 : vec3<f32> = (x_2132 * vec3<f32>(1.100000024f, 1.100000024f, 1.100000024f));
  let x_2136 : vec4<f32> = u_xlat4;
  u_xlat4 = vec4<f32>(x_2135.x, x_2135.y, x_2135.z, x_2136.w);
  let x_2138 : vec3<f32> = vs_TEXCOORD1;
  let x_2141 : vec4<f32> = x_364.x_CascadeShadowSplitSpheres0;
  let x_2144 : vec3<f32> = ((x_2138 * vec3<f32>(1.100000024f, 1.100000024f, 1.100000024f)) + -(vec3<f32>(x_2141.x, x_2141.y, x_2141.z)));
  let x_2145 : vec4<f32> = u_xlat5;
  u_xlat5 = vec4<f32>(x_2144.x, x_2144.y, x_2144.z, x_2145.w);
  let x_2147 : vec3<f32> = vs_TEXCOORD1;
  let x_2150 : vec4<f32> = x_364.x_CascadeShadowSplitSpheres1;
  let x_2153 : vec3<f32> = ((x_2147 * vec3<f32>(1.100000024f, 1.100000024f, 1.100000024f)) + -(vec3<f32>(x_2150.x, x_2150.y, x_2150.z)));
  let x_2154 : vec4<f32> = u_xlat6;
  u_xlat6 = vec4<f32>(x_2153.x, x_2153.y, x_2153.z, x_2154.w);
  let x_2156 : vec3<f32> = vs_TEXCOORD1;
  let x_2159 : vec4<f32> = x_364.x_CascadeShadowSplitSpheres2;
  let x_2162 : vec3<f32> = ((x_2156 * vec3<f32>(1.100000024f, 1.100000024f, 1.100000024f)) + -(vec3<f32>(x_2159.x, x_2159.y, x_2159.z)));
  let x_2163 : vec4<f32> = u_xlat7;
  u_xlat7 = vec4<f32>(x_2162.x, x_2162.y, x_2162.z, x_2163.w);
  let x_2165 : vec3<f32> = vs_TEXCOORD1;
  let x_2168 : vec4<f32> = x_364.x_CascadeShadowSplitSpheres3;
  let x_2171 : vec3<f32> = ((x_2165 * vec3<f32>(1.100000024f, 1.100000024f, 1.100000024f)) + -(vec3<f32>(x_2168.x, x_2168.y, x_2168.z)));
  let x_2172 : vec4<f32> = u_xlat8;
  u_xlat8 = vec4<f32>(x_2171.x, x_2171.y, x_2171.z, x_2172.w);
  let x_2174 : vec4<f32> = u_xlat5;
  let x_2176 : vec4<f32> = u_xlat5;
  u_xlat5.x = dot(vec3<f32>(x_2174.x, x_2174.y, x_2174.z), vec3<f32>(x_2176.x, x_2176.y, x_2176.z));
  let x_2180 : vec4<f32> = u_xlat6;
  let x_2182 : vec4<f32> = u_xlat6;
  u_xlat5.y = dot(vec3<f32>(x_2180.x, x_2180.y, x_2180.z), vec3<f32>(x_2182.x, x_2182.y, x_2182.z));
  let x_2186 : vec4<f32> = u_xlat7;
  let x_2188 : vec4<f32> = u_xlat7;
  u_xlat5.z = dot(vec3<f32>(x_2186.x, x_2186.y, x_2186.z), vec3<f32>(x_2188.x, x_2188.y, x_2188.z));
  let x_2192 : vec4<f32> = u_xlat8;
  let x_2194 : vec4<f32> = u_xlat8;
  u_xlat5.w = dot(vec3<f32>(x_2192.x, x_2192.y, x_2192.z), vec3<f32>(x_2194.x, x_2194.y, x_2194.z));
  let x_2199 : vec4<f32> = u_xlat5;
  let x_2201 : vec4<f32> = x_364.x_CascadeShadowSplitSphereRadii;
  u_xlatb5 = (x_2199 < x_2201);
  let x_2204 : bool = u_xlatb5.x;
  u_xlat6.x = select(0.0f, 1.0f, x_2204);
  let x_2208 : bool = u_xlatb5.y;
  u_xlat6.y = select(0.0f, 1.0f, x_2208);
  let x_2212 : bool = u_xlatb5.z;
  u_xlat6.z = select(0.0f, 1.0f, x_2212);
  let x_2216 : bool = u_xlatb5.w;
  u_xlat6.w = select(0.0f, 1.0f, x_2216);
  let x_2220 : bool = u_xlatb5.x;
  u_xlat5.x = select(-0.0f, -1.0f, x_2220);
  let x_2224 : bool = u_xlatb5.y;
  u_xlat5.y = select(-0.0f, -1.0f, x_2224);
  let x_2228 : bool = u_xlatb5.z;
  u_xlat5.z = select(-0.0f, -1.0f, x_2228);
  let x_2231 : vec4<f32> = u_xlat5;
  let x_2233 : vec4<f32> = u_xlat6;
  let x_2235 : vec3<f32> = (vec3<f32>(x_2231.x, x_2231.y, x_2231.z) + vec3<f32>(x_2233.y, x_2233.z, x_2233.w));
  let x_2236 : vec4<f32> = u_xlat5;
  u_xlat5 = vec4<f32>(x_2235.x, x_2235.y, x_2235.z, x_2236.w);
  let x_2238 : vec4<f32> = u_xlat5;
  let x_2240 : vec3<f32> = max(vec3<f32>(x_2238.x, x_2238.y, x_2238.z), vec3<f32>(0.0f, 0.0f, 0.0f));
  let x_2241 : vec4<f32> = u_xlat6;
  u_xlat6 = vec4<f32>(x_2241.x, x_2240.x, x_2240.y, x_2240.z);
  let x_2243 : vec4<f32> = u_xlat6;
  u_xlat0.x = dot(x_2243, vec4<f32>(4.0f, 3.0f, 2.0f, 1.0f));
  let x_2247 : f32 = u_xlat0.x;
  u_xlat0.x = (-(x_2247) + 4.0f);
  let x_2253 : f32 = u_xlat0.x;
  u_xlatu0 = u32(x_2253);
  let x_2256 : u32 = u_xlatu0;
  u_xlati0 = (bitcast<i32>(x_2256) << bitcast<u32>(2i));
  let x_2261 : f32 = u_xlat4.y;
  let x_2262 : i32 = u_xlati0;
  let x_2265 : i32 = u_xlati0;
  let x_2269 : f32 = x_364.x_MainLightWorldToShadow[((x_2262 + 1i) / 4i)][((x_2265 + 1i) % 4i)].z;
  u_xlat19 = (x_2261 * x_2269);
  let x_2271 : i32 = u_xlati0;
  let x_2273 : i32 = u_xlati0;
  let x_2276 : f32 = x_364.x_MainLightWorldToShadow[(x_2271 / 4i)][(x_2273 % 4i)].z;
  let x_2278 : f32 = u_xlat4.x;
  let x_2280 : f32 = u_xlat19;
  u_xlat19 = ((x_2276 * x_2278) + x_2280);
  let x_2282 : i32 = u_xlati0;
  let x_2285 : i32 = u_xlati0;
  let x_2289 : f32 = x_364.x_MainLightWorldToShadow[((x_2282 + 2i) / 4i)][((x_2285 + 2i) % 4i)].z;
  let x_2291 : f32 = u_xlat4.z;
  let x_2293 : f32 = u_xlat19;
  u_xlat19 = ((x_2289 * x_2291) + x_2293);
  let x_2295 : f32 = u_xlat19;
  let x_2296 : i32 = u_xlati0;
  let x_2299 : i32 = u_xlati0;
  let x_2303 : f32 = x_364.x_MainLightWorldToShadow[((x_2296 + 3i) / 4i)][((x_2299 + 3i) % 4i)].z;
  u_xlat0.x = (x_2295 + x_2303);
  let x_2308 : f32 = u_xlat0.x;
  u_xlatb19 = (0.0f >= x_2308);
  let x_2312 : f32 = u_xlat0.x;
  u_xlatb0 = (x_2312 >= 1.0f);
  let x_2314 : bool = u_xlatb0;
  let x_2315 : bool = u_xlatb19;
  u_xlatb0 = (x_2314 | x_2315);
  let x_2317 : f32 = u_xlat61;
  u_xlat19 = (x_2317 * 0.25f);
  let x_2319 : bool = u_xlatb0;
  let x_2320 : f32 = u_xlat19;
  u_xlat0.x = select(x_2320, 1.0f, x_2319);
  let x_2329 : vec4<f32> = x_2326.unity_SHAr;
  let x_2330 : vec4<f32> = u_xlat2;
  u_xlat4.x = dot(x_2329, x_2330);
  let x_2335 : vec4<f32> = x_2326.unity_SHAg;
  let x_2336 : vec4<f32> = u_xlat2;
  u_xlat4.y = dot(x_2335, x_2336);
  let x_2341 : vec4<f32> = x_2326.unity_SHAb;
  let x_2342 : vec4<f32> = u_xlat2;
  u_xlat4.z = dot(x_2341, x_2342);
  let x_2345 : vec4<f32> = u_xlat2;
  let x_2347 : vec4<f32> = u_xlat2;
  u_xlat5 = (vec4<f32>(x_2345.y, x_2345.z, x_2345.z, x_2345.x) * vec4<f32>(x_2347.x, x_2347.y, x_2347.z, x_2347.z));
  let x_2352 : vec4<f32> = x_2326.unity_SHBr;
  let x_2353 : vec4<f32> = u_xlat5;
  u_xlat6.x = dot(x_2352, x_2353);
  let x_2358 : vec4<f32> = x_2326.unity_SHBg;
  let x_2359 : vec4<f32> = u_xlat5;
  u_xlat6.y = dot(x_2358, x_2359);
  let x_2364 : vec4<f32> = x_2326.unity_SHBb;
  let x_2365 : vec4<f32> = u_xlat5;
  u_xlat6.z = dot(x_2364, x_2365);
  let x_2369 : f32 = u_xlat2.y;
  let x_2371 : f32 = u_xlat2.y;
  u_xlat19 = (x_2369 * x_2371);
  let x_2374 : f32 = u_xlat2.x;
  let x_2376 : f32 = u_xlat2.x;
  let x_2378 : f32 = u_xlat19;
  u_xlat19 = ((x_2374 * x_2376) + -(x_2378));
  let x_2383 : vec4<f32> = x_2326.unity_SHC;
  let x_2385 : f32 = u_xlat19;
  let x_2388 : vec4<f32> = u_xlat6;
  let x_2390 : vec3<f32> = ((vec3<f32>(x_2383.x, x_2383.y, x_2383.z) * vec3<f32>(x_2385, x_2385, x_2385)) + vec3<f32>(x_2388.x, x_2388.y, x_2388.z));
  let x_2391 : vec4<f32> = u_xlat5;
  u_xlat5 = vec4<f32>(x_2390.x, x_2390.y, x_2390.z, x_2391.w);
  let x_2393 : vec4<f32> = u_xlat4;
  let x_2395 : vec4<f32> = u_xlat5;
  let x_2397 : vec3<f32> = (vec3<f32>(x_2393.x, x_2393.y, x_2393.z) + vec3<f32>(x_2395.x, x_2395.y, x_2395.z));
  let x_2398 : vec4<f32> = u_xlat4;
  u_xlat4 = vec4<f32>(x_2397.x, x_2397.y, x_2397.z, x_2398.w);
  let x_2400 : vec4<f32> = u_xlat4;
  let x_2402 : vec3<f32> = max(vec3<f32>(x_2400.x, x_2400.y, x_2400.z), vec3<f32>(0.0f, 0.0f, 0.0f));
  let x_2403 : vec4<f32> = u_xlat4;
  u_xlat4 = vec4<f32>(x_2402.x, x_2402.y, x_2402.z, x_2403.w);
  let x_2405 : vec3<f32> = vs_TEXCOORD2;
  let x_2407 : vec4<f32> = x_40.x_MainLightPosition;
  u_xlat19 = dot(x_2405, -(vec3<f32>(x_2407.x, x_2407.y, x_2407.z)));
  let x_2411 : f32 = u_xlat19;
  let x_2413 : f32 = vs_TEXCOORD5.z;
  u_xlat19 = (x_2411 * x_2413);
  let x_2416 : f32 = u_xlat19;
  let x_2417 : f32 = u_xlat19;
  u_xlat59 = (x_2416 * x_2417);
  let x_2419 : f32 = u_xlat19;
  let x_2420 : f32 = u_xlat59;
  u_xlat19 = (x_2419 * x_2420);
  let x_2422 : f32 = u_xlat19;
  u_xlat19 = clamp(x_2422, 0.0f, 1.0f);
  let x_2424 : f32 = u_xlat19;
  u_xlat19 = (x_2424 * 5.0f);
  let x_2427 : f32 = u_xlat19;
  let x_2430 : vec4<f32> = x_40.x_MainLightColor;
  let x_2432 : vec3<f32> = (vec3<f32>(x_2427, x_2427, x_2427) * vec3<f32>(x_2430.x, x_2430.y, x_2430.z));
  let x_2433 : vec4<f32> = u_xlat5;
  u_xlat5 = vec4<f32>(x_2432.x, x_2432.y, x_2432.z, x_2433.w);
  let x_2436 : vec4<f32> = x_40.x_MainLightPosition;
  let x_2439 : vec4<f32> = x_40.x_MainLightColor;
  let x_2442 : vec4<f32> = u_xlat5;
  let x_2444 : vec3<f32> = ((vec3<f32>(x_2436.y, x_2436.y, x_2436.y) * vec3<f32>(x_2439.x, x_2439.y, x_2439.z)) + vec3<f32>(x_2442.x, x_2442.y, x_2442.z));
  let x_2445 : vec4<f32> = u_xlat5;
  u_xlat5 = vec4<f32>(x_2444.x, x_2444.y, x_2444.z, x_2445.w);
  let x_2447 : vec4<f32> = u_xlat5;
  let x_2449 : vec4<f32> = u_xlat0;
  let x_2452 : vec4<f32> = u_xlat4;
  let x_2454 : vec3<f32> = ((vec3<f32>(x_2447.x, x_2447.y, x_2447.z) * vec3<f32>(x_2449.x, x_2449.x, x_2449.x)) + vec3<f32>(x_2452.x, x_2452.y, x_2452.z));
  let x_2455 : vec4<f32> = u_xlat5;
  u_xlat5 = vec4<f32>(x_2454.x, x_2454.y, x_2454.z, x_2455.w);
  let x_2462 : vec4<f32> = vs_TEXCOORD0;
  let x_2465 : f32 = x_40.x_GlobalMipBias.x;
  let x_2466 : vec4<f32> = textureSampleBias(x_FoamMap, sampler_FoamMap, vec2<f32>(x_2462.z, x_2462.w), x_2465);
  let x_2467 : vec3<f32> = vec3<f32>(x_2466.x, x_2466.y, x_2466.z);
  let x_2468 : vec4<f32> = u_xlat6;
  u_xlat6 = vec4<f32>(x_2467.x, x_2467.y, x_2467.z, x_2468.w);
  let x_2471 : f32 = u_xlat41.x;
  u_xlat41.x = x_2471;
  let x_2474 : f32 = u_xlat41.x;
  u_xlat41.x = clamp(x_2474, 0.0f, 1.0f);
  let x_2478 : f32 = vs_TEXCOORD5.z;
  u_xlat19 = (x_2478 + -0.375f);
  let x_2481 : f32 = u_xlat19;
  u_xlat19 = clamp(x_2481, 0.0f, 1.0f);
  let x_2483 : f32 = u_xlat38;
  u_xlat59 = ((-(x_2483) * 4.0f) + 1.0f);
  let x_2487 : f32 = u_xlat59;
  u_xlat59 = clamp(x_2487, 0.0f, 1.0f);
  let x_2489 : f32 = u_xlat57;
  let x_2490 : f32 = u_xlat38;
  u_xlat57 = min(x_2489, x_2490);
  let x_2492 : f32 = u_xlat57;
  u_xlat57 = ((-(x_2492) * 0.5f) + 0.75f);
  let x_2497 : f32 = u_xlat59;
  let x_2499 : f32 = u_xlat57;
  u_xlat57 = ((x_2497 * 0.5f) + x_2499);
  let x_2501 : f32 = u_xlat57;
  u_xlat57 = clamp(x_2501, 0.0f, 1.0f);
  let x_2504 : f32 = u_xlat41.x;
  let x_2505 : f32 = u_xlat57;
  u_xlat57 = (x_2504 * x_2505);
  let x_2507 : f32 = u_xlat57;
  let x_2508 : f32 = u_xlat19;
  u_xlat19 = max(x_2507, x_2508);
  let x_2511 : f32 = u_xlat1.x;
  let x_2513 : f32 = u_xlat1.x;
  u_xlat57 = (x_2511 + x_2513);
  let x_2515 : f32 = u_xlat57;
  let x_2516 : f32 = u_xlat19;
  u_xlat7.x = max(x_2515, x_2516);
  u_xlat7.y = 0.660000026f;
  let x_2526 : vec4<f32> = u_xlat7;
  let x_2529 : f32 = x_40.x_GlobalMipBias.x;
  let x_2530 : vec4<f32> = textureSampleBias(x_AbsorptionScatteringRamp, sampler_AbsorptionScatteringRamp, vec2<f32>(x_2526.x, x_2526.y), x_2529);
  let x_2531 : vec3<f32> = vec3<f32>(x_2530.x, x_2530.y, x_2530.z);
  let x_2532 : vec4<f32> = u_xlat7;
  u_xlat7 = vec4<f32>(x_2531.x, x_2531.y, x_2531.z, x_2532.w);
  let x_2534 : vec4<f32> = u_xlat6;
  let x_2536 : vec4<f32> = u_xlat7;
  let x_2538 : vec3<f32> = (vec3<f32>(x_2534.x, x_2534.y, x_2534.z) * vec3<f32>(x_2536.x, x_2536.y, x_2536.z));
  let x_2539 : vec4<f32> = u_xlat6;
  u_xlat6 = vec4<f32>(x_2538.x, x_2538.y, x_2538.z, x_2539.w);
  let x_2541 : vec4<f32> = u_xlat6;
  let x_2543 : vec4<f32> = u_xlat6;
  u_xlat19 = dot(vec3<f32>(x_2541.x, x_2541.y, x_2541.z), vec3<f32>(x_2543.x, x_2543.y, x_2543.z));
  let x_2546 : f32 = u_xlat19;
  u_xlat19 = sqrt(x_2546);
  let x_2548 : f32 = u_xlat19;
  u_xlat19 = ((x_2548 * 1.5f) + -0.100000001f);
  let x_2552 : f32 = u_xlat19;
  u_xlat19 = clamp(x_2552, 0.0f, 1.0f);
  let x_2554 : vec3<f32> = u_xlat22;
  let x_2557 : vec4<f32> = x_40.x_MainLightColor;
  let x_2560 : vec4<f32> = u_xlat4;
  let x_2562 : vec3<f32> = ((vec3<f32>(x_2554.x, x_2554.x, x_2554.x) * vec3<f32>(x_2557.x, x_2557.y, x_2557.z)) + vec3<f32>(x_2560.x, x_2560.y, x_2560.z));
  let x_2563 : vec4<f32> = u_xlat4;
  u_xlat4 = vec4<f32>(x_2562.x, x_2562.y, x_2562.z, x_2563.w);
  let x_2565 : vec3<f32> = vs_TEXCOORD2;
  let x_2567 : vec4<f32> = x_40.x_MainLightPosition;
  let x_2569 : vec3<f32> = (x_2565 + vec3<f32>(x_2567.x, x_2567.y, x_2567.z));
  let x_2570 : vec4<f32> = u_xlat6;
  u_xlat6 = vec4<f32>(x_2569.x, x_2569.y, x_2569.z, x_2570.w);
  let x_2572 : vec4<f32> = u_xlat6;
  let x_2574 : vec4<f32> = u_xlat6;
  u_xlat57 = dot(vec3<f32>(x_2572.x, x_2572.y, x_2572.z), vec3<f32>(x_2574.x, x_2574.y, x_2574.z));
  let x_2577 : f32 = u_xlat57;
  u_xlat57 = max(x_2577, 1.17549435e-37f);
  let x_2580 : f32 = u_xlat57;
  u_xlat57 = inverseSqrt(x_2580);
  let x_2582 : f32 = u_xlat57;
  let x_2584 : vec4<f32> = u_xlat6;
  let x_2586 : vec3<f32> = (vec3<f32>(x_2582, x_2582, x_2582) * vec3<f32>(x_2584.x, x_2584.y, x_2584.z));
  let x_2587 : vec4<f32> = u_xlat6;
  u_xlat6 = vec4<f32>(x_2586.x, x_2586.y, x_2586.z, x_2587.w);
  let x_2589 : vec4<f32> = u_xlat2;
  let x_2591 : vec4<f32> = u_xlat6;
  u_xlat57 = dot(vec3<f32>(x_2589.x, x_2589.y, x_2589.z), vec3<f32>(x_2591.x, x_2591.y, x_2591.z));
  let x_2594 : f32 = u_xlat57;
  u_xlat57 = clamp(x_2594, 0.0f, 1.0f);
  let x_2597 : vec4<f32> = x_40.x_MainLightPosition;
  let x_2599 : vec4<f32> = u_xlat6;
  u_xlat1.x = dot(vec3<f32>(x_2597.x, x_2597.y, x_2597.z), vec3<f32>(x_2599.x, x_2599.y, x_2599.z));
  let x_2604 : f32 = u_xlat1.x;
  u_xlat1.x = clamp(x_2604, 0.0f, 1.0f);
  let x_2607 : f32 = u_xlat57;
  let x_2608 : f32 = u_xlat57;
  u_xlat57 = (x_2607 * x_2608);
  let x_2610 : f32 = u_xlat57;
  u_xlat57 = ((x_2610 * -0.999938965f) + 1.000010014f);
  let x_2616 : f32 = u_xlat1.x;
  let x_2618 : f32 = u_xlat1.x;
  u_xlat1.x = (x_2616 * x_2618);
  let x_2621 : f32 = u_xlat57;
  let x_2622 : f32 = u_xlat57;
  u_xlat57 = (x_2621 * x_2622);
  let x_2625 : f32 = u_xlat1.x;
  u_xlat1.x = max(x_2625, 0.100000001f);
  let x_2628 : f32 = u_xlat57;
  let x_2630 : f32 = u_xlat1.x;
  u_xlat57 = (x_2628 * x_2630);
  let x_2632 : f32 = u_xlat57;
  u_xlat57 = (x_2632 * 2.03125f);
  let x_2636 : f32 = u_xlat57;
  u_xlat57 = (6.10351562e-05f / x_2636);
  let x_2639 : f32 = u_xlat0.x;
  let x_2640 : f32 = u_xlat57;
  u_xlat0.x = (x_2639 * x_2640);
  let x_2644 : f32 = u_xlat0.x;
  u_xlat0.x = (x_2644 * 0.039999999f);
  let x_2648 : vec4<f32> = u_xlat0;
  let x_2651 : vec4<f32> = x_40.x_MainLightColor;
  let x_2653 : vec3<f32> = (vec3<f32>(x_2648.x, x_2648.x, x_2648.x) * vec3<f32>(x_2651.x, x_2651.y, x_2651.z));
  let x_2654 : vec4<f32> = u_xlat6;
  u_xlat6 = vec4<f32>(x_2653.x, x_2653.y, x_2653.z, x_2654.w);
  let x_2657 : f32 = x_40.x_AdditionalLightsCount.x;
  let x_2659 : f32 = x_2326.unity_LightData.y;
  u_xlat0.x = min(x_2657, x_2659);
  let x_2663 : f32 = u_xlat0.x;
  u_xlatu0 = bitcast<u32>(i32(x_2663));
  let x_2666 : vec4<f32> = u_xlat5;
  let x_2667 : vec3<f32> = vec3<f32>(x_2666.x, x_2666.y, x_2666.z);
  let x_2668 : vec4<f32> = u_xlat7;
  u_xlat7 = vec4<f32>(x_2667.x, x_2667.y, x_2667.z, x_2668.w);
  let x_2670 : vec4<f32> = u_xlat6;
  let x_2671 : vec3<f32> = vec3<f32>(x_2670.x, x_2670.y, x_2670.z);
  let x_2672 : vec4<f32> = u_xlat8;
  u_xlat8 = vec4<f32>(x_2671.x, x_2671.y, x_2671.z, x_2672.w);
  u_xlatu_loop_2 = 0u;
  loop {
    let x_2680 : u32 = u_xlatu_loop_2;
    let x_2681 : u32 = u_xlatu0;
    if ((x_2680 < x_2681)) {
    } else {
      break;
    }
    let x_2684 : u32 = u_xlatu_loop_2;
    u_xlatu1 = (x_2684 >> 2u);
    let x_2687 : u32 = u_xlatu_loop_2;
    u_xlati59 = bitcast<i32>((x_2687 & 3u));
    let x_2690 : u32 = u_xlatu1;
    let x_2693 : vec4<f32> = x_2326.unity_LightIndices[bitcast<i32>(x_2690)];
    let x_2702 : i32 = u_xlati59;
    indexable = array<vec4<u32>, 4u>(vec4<u32>(1065353216u, 0u, 0u, 0u), vec4<u32>(0u, 1065353216u, 0u, 0u), vec4<u32>(0u, 0u, 1065353216u, 0u), vec4<u32>(0u, 0u, 0u, 1065353216u));
    let x_2707 : vec4<u32> = indexable[x_2702];
    u_xlat1.x = dot(x_2693, bitcast<vec4<f32>>(x_2707));
    let x_2713 : f32 = u_xlat1.x;
    u_xlati1 = i32(x_2713);
    let x_2715 : vec3<f32> = vs_TEXCOORD1;
    let x_2727 : i32 = u_xlati1;
    let x_2729 : vec4<f32> = x_2726.x_AdditionalLightsPosition[x_2727];
    let x_2732 : i32 = u_xlati1;
    let x_2734 : vec4<f32> = x_2726.x_AdditionalLightsPosition[x_2732];
    let x_2736 : vec3<f32> = ((-(x_2715) * vec3<f32>(x_2729.w, x_2729.w, x_2729.w)) + vec3<f32>(x_2734.x, x_2734.y, x_2734.z));
    let x_2737 : vec4<f32> = u_xlat9;
    u_xlat9 = vec4<f32>(x_2736.x, x_2736.y, x_2736.z, x_2737.w);
    let x_2739 : vec4<f32> = u_xlat9;
    let x_2741 : vec4<f32> = u_xlat9;
    u_xlat59 = dot(vec3<f32>(x_2739.x, x_2739.y, x_2739.z), vec3<f32>(x_2741.x, x_2741.y, x_2741.z));
    let x_2744 : f32 = u_xlat59;
    u_xlat59 = max(x_2744, 6.10351562e-05f);
    let x_2746 : f32 = u_xlat59;
    u_xlat22.x = inverseSqrt(x_2746);
    let x_2749 : vec3<f32> = u_xlat22;
    let x_2751 : vec4<f32> = u_xlat9;
    let x_2753 : vec3<f32> = (vec3<f32>(x_2749.x, x_2749.x, x_2749.x) * vec3<f32>(x_2751.x, x_2751.y, x_2751.z));
    let x_2754 : vec4<f32> = u_xlat10;
    u_xlat10 = vec4<f32>(x_2753.x, x_2753.y, x_2753.z, x_2754.w);
    let x_2756 : f32 = u_xlat59;
    u_xlat41.x = (1.0f / x_2756);
    let x_2759 : f32 = u_xlat59;
    let x_2760 : i32 = u_xlati1;
    let x_2762 : f32 = x_2726.x_AdditionalLightsAttenuation[x_2760].x;
    u_xlat59 = (x_2759 * x_2762);
    let x_2764 : f32 = u_xlat59;
    let x_2766 : f32 = u_xlat59;
    u_xlat59 = ((-(x_2764) * x_2766) + 1.0f);
    let x_2769 : f32 = u_xlat59;
    u_xlat59 = max(x_2769, 0.0f);
    let x_2771 : f32 = u_xlat59;
    let x_2772 : f32 = u_xlat59;
    u_xlat59 = (x_2771 * x_2772);
    let x_2774 : f32 = u_xlat59;
    let x_2776 : f32 = u_xlat41.x;
    u_xlat59 = (x_2774 * x_2776);
    let x_2778 : i32 = u_xlati1;
    let x_2780 : vec4<f32> = x_2726.x_AdditionalLightsSpotDir[x_2778];
    let x_2782 : vec4<f32> = u_xlat10;
    u_xlat41.x = dot(vec3<f32>(x_2780.x, x_2780.y, x_2780.z), vec3<f32>(x_2782.x, x_2782.y, x_2782.z));
    let x_2787 : f32 = u_xlat41.x;
    let x_2788 : i32 = u_xlati1;
    let x_2790 : f32 = x_2726.x_AdditionalLightsAttenuation[x_2788].z;
    let x_2792 : i32 = u_xlati1;
    let x_2794 : f32 = x_2726.x_AdditionalLightsAttenuation[x_2792].w;
    u_xlat41.x = ((x_2787 * x_2790) + x_2794);
    let x_2798 : f32 = u_xlat41.x;
    u_xlat41.x = clamp(x_2798, 0.0f, 1.0f);
    let x_2802 : f32 = u_xlat41.x;
    let x_2804 : f32 = u_xlat41.x;
    u_xlat41.x = (x_2802 * x_2804);
    let x_2807 : f32 = u_xlat59;
    let x_2809 : f32 = u_xlat41.x;
    u_xlat59 = (x_2807 * x_2809);
    let x_2811 : vec4<f32> = u_xlat2;
    let x_2813 : vec4<f32> = u_xlat10;
    u_xlat41.x = dot(vec3<f32>(x_2811.x, x_2811.y, x_2811.z), vec3<f32>(x_2813.x, x_2813.y, x_2813.z));
    let x_2818 : f32 = u_xlat41.x;
    u_xlat41.x = clamp(x_2818, 0.0f, 1.0f);
    let x_2821 : f32 = u_xlat59;
    let x_2823 : f32 = u_xlat41.x;
    u_xlat41.x = (x_2821 * x_2823);
    let x_2826 : vec2<f32> = u_xlat41;
    let x_2828 : i32 = u_xlati1;
    let x_2830 : vec4<f32> = x_2726.x_AdditionalLightsColor[x_2828];
    let x_2832 : vec3<f32> = (vec3<f32>(x_2826.x, x_2826.x, x_2826.x) * vec3<f32>(x_2830.x, x_2830.y, x_2830.z));
    let x_2833 : vec4<f32> = u_xlat11;
    u_xlat11 = vec4<f32>(x_2832.x, x_2832.y, x_2832.z, x_2833.w);
    let x_2835 : vec4<f32> = u_xlat9;
    let x_2837 : vec3<f32> = u_xlat22;
    let x_2840 : vec3<f32> = vs_TEXCOORD2;
    let x_2841 : vec3<f32> = ((vec3<f32>(x_2835.x, x_2835.y, x_2835.z) * vec3<f32>(x_2837.x, x_2837.x, x_2837.x)) + x_2840);
    let x_2842 : vec4<f32> = u_xlat9;
    u_xlat9 = vec4<f32>(x_2841.x, x_2841.y, x_2841.z, x_2842.w);
    let x_2844 : vec4<f32> = u_xlat9;
    let x_2846 : vec4<f32> = u_xlat9;
    u_xlat22.x = dot(vec3<f32>(x_2844.x, x_2844.y, x_2844.z), vec3<f32>(x_2846.x, x_2846.y, x_2846.z));
    let x_2851 : f32 = u_xlat22.x;
    u_xlat22.x = max(x_2851, 1.17549435e-37f);
    let x_2855 : f32 = u_xlat22.x;
    u_xlat22.x = inverseSqrt(x_2855);
    let x_2858 : vec3<f32> = u_xlat22;
    let x_2860 : vec4<f32> = u_xlat9;
    let x_2862 : vec3<f32> = (vec3<f32>(x_2858.x, x_2858.x, x_2858.x) * vec3<f32>(x_2860.x, x_2860.y, x_2860.z));
    let x_2863 : vec4<f32> = u_xlat9;
    u_xlat9 = vec4<f32>(x_2862.x, x_2862.y, x_2862.z, x_2863.w);
    let x_2865 : vec4<f32> = u_xlat2;
    let x_2867 : vec4<f32> = u_xlat9;
    u_xlat22.x = dot(vec3<f32>(x_2865.x, x_2865.y, x_2865.z), vec3<f32>(x_2867.x, x_2867.y, x_2867.z));
    let x_2872 : f32 = u_xlat22.x;
    u_xlat22.x = clamp(x_2872, 0.0f, 1.0f);
    let x_2875 : vec4<f32> = u_xlat10;
    let x_2877 : vec4<f32> = u_xlat9;
    u_xlat22.y = dot(vec3<f32>(x_2875.x, x_2875.y, x_2875.z), vec3<f32>(x_2877.x, x_2877.y, x_2877.z));
    let x_2882 : f32 = u_xlat22.y;
    u_xlat22.y = clamp(x_2882, 0.0f, 1.0f);
    let x_2885 : vec3<f32> = u_xlat22;
    let x_2887 : vec3<f32> = u_xlat22;
    let x_2889 : vec2<f32> = (vec2<f32>(x_2885.x, x_2885.y) * vec2<f32>(x_2887.x, x_2887.y));
    let x_2890 : vec3<f32> = u_xlat22;
    u_xlat22 = vec3<f32>(x_2889.x, x_2889.y, x_2890.z);
    let x_2893 : f32 = u_xlat22.x;
    u_xlat22.x = ((x_2893 * -0.999938965f) + 1.000010014f);
    let x_2898 : f32 = u_xlat22.x;
    let x_2900 : f32 = u_xlat22.x;
    u_xlat22.x = (x_2898 * x_2900);
    let x_2904 : f32 = u_xlat22.y;
    u_xlat41.x = max(x_2904, 0.100000001f);
    let x_2908 : f32 = u_xlat41.x;
    let x_2910 : f32 = u_xlat22.x;
    u_xlat22.x = (x_2908 * x_2910);
    let x_2914 : f32 = u_xlat22.x;
    u_xlat22.x = (x_2914 * 2.03125f);
    let x_2918 : f32 = u_xlat22.x;
    u_xlat22.x = (6.10351562e-05f / x_2918);
    let x_2922 : f32 = u_xlat22.x;
    u_xlat22.x = (x_2922 * 0.039999999f);
    let x_2925 : vec3<f32> = u_xlat22;
    let x_2927 : vec4<f32> = u_xlat11;
    let x_2930 : vec4<f32> = u_xlat8;
    let x_2932 : vec3<f32> = ((vec3<f32>(x_2925.x, x_2925.x, x_2925.x) * vec3<f32>(x_2927.x, x_2927.y, x_2927.z)) + vec3<f32>(x_2930.x, x_2930.y, x_2930.z));
    let x_2933 : vec4<f32> = u_xlat8;
    u_xlat8 = vec4<f32>(x_2932.x, x_2932.y, x_2932.z, x_2933.w);
    let x_2935 : f32 = u_xlat59;
    let x_2937 : i32 = u_xlati1;
    let x_2939 : vec4<f32> = x_2726.x_AdditionalLightsColor[x_2937];
    let x_2942 : vec4<f32> = u_xlat7;
    let x_2944 : vec3<f32> = ((vec3<f32>(x_2935, x_2935, x_2935) * vec3<f32>(x_2939.x, x_2939.y, x_2939.z)) + vec3<f32>(x_2942.x, x_2942.y, x_2942.z));
    let x_2945 : vec4<f32> = u_xlat7;
    u_xlat7 = vec4<f32>(x_2944.x, x_2944.y, x_2944.z, x_2945.w);

    continuing {
      let x_2947 : u32 = u_xlatu_loop_2;
      u_xlatu_loop_2 = (x_2947 + bitcast<u32>(1i));
    }
  }
  let x_2949 : f32 = u_xlat58;
  let x_2950 : f32 = u_xlat38;
  u_xlat5.x = (x_2949 * x_2950);
  u_xlat5.y = 0.375f;
  u_xlat5.z = 0.0f;
  let x_2959 : vec4<f32> = u_xlat5;
  let x_2962 : f32 = x_40.x_GlobalMipBias.x;
  let x_2963 : vec4<f32> = textureSampleBias(x_AbsorptionScatteringRamp, sampler_AbsorptionScatteringRamp, vec2<f32>(x_2959.x, x_2959.y), x_2962);
  let x_2964 : vec3<f32> = vec3<f32>(x_2963.x, x_2963.y, x_2963.z);
  let x_2965 : vec4<f32> = u_xlat0;
  u_xlat0 = vec4<f32>(x_2964.x, x_2965.y, x_2964.y, x_2964.z);
  let x_2967 : vec3<f32> = vs_TEXCOORD2;
  let x_2969 : vec4<f32> = u_xlat2;
  u_xlat1.x = dot(-(x_2967), vec3<f32>(x_2969.x, x_2969.y, x_2969.z));
  let x_2974 : f32 = u_xlat1.x;
  let x_2976 : f32 = u_xlat1.x;
  u_xlat1.x = (x_2974 + x_2976);
  let x_2979 : vec4<f32> = u_xlat2;
  let x_2981 : vec3<f32> = u_xlat1;
  let x_2985 : vec3<f32> = vs_TEXCOORD2;
  let x_2987 : vec3<f32> = ((vec3<f32>(x_2979.x, x_2979.y, x_2979.z) * -(vec3<f32>(x_2981.x, x_2981.x, x_2981.x))) + -(x_2985));
  let x_2988 : vec4<f32> = u_xlat2;
  u_xlat2 = vec4<f32>(x_2987.x, x_2987.y, x_2987.z, x_2988.w);
  let x_2998 : vec4<f32> = u_xlat2;
  let x_3001 : f32 = x_40.x_GlobalMipBias.x;
  let x_3002 : vec4<f32> = textureSampleBias(x_CubemapTexture, sampler_CubemapTexture, vec3<f32>(x_2998.x, x_2998.y, x_2998.z), x_3001);
  let x_3003 : vec3<f32> = vec3<f32>(x_3002.x, x_3002.y, x_3002.z);
  let x_3004 : vec4<f32> = u_xlat2;
  u_xlat2 = vec4<f32>(x_3003.x, x_3003.y, x_3003.z, x_3004.w);
  let x_3011 : vec2<f32> = u_xlat20;
  let x_3013 : f32 = u_xlat41.y;
  let x_3014 : vec4<f32> = textureSampleLevel(x_CameraOpaqueTexture, sampler_CameraOpaqueTexture_linear_clamp, x_3011, x_3013);
  u_xlat1 = vec3<f32>(x_3014.x, x_3014.y, x_3014.z);
  let x_3019 : vec4<f32> = u_xlat5;
  let x_3022 : f32 = x_40.x_GlobalMipBias.x;
  let x_3023 : vec4<f32> = textureSampleBias(x_AbsorptionScatteringRamp, sampler_AbsorptionScatteringRamp, vec2<f32>(x_3019.x, x_3019.z), x_3022);
  u_xlat22 = vec3<f32>(x_3023.x, x_3023.y, x_3023.z);
  let x_3025 : vec3<f32> = u_xlat1;
  let x_3026 : vec3<f32> = u_xlat22;
  let x_3027 : vec3<f32> = (x_3025 * x_3026);
  let x_3028 : vec4<f32> = u_xlat5;
  u_xlat5 = vec4<f32>(x_3027.x, x_3027.y, x_3027.z, x_3028.w);
  let x_3030 : vec3<f32> = u_xlat1;
  let x_3032 : vec3<f32> = u_xlat22;
  let x_3034 : vec4<f32> = u_xlat2;
  u_xlat1 = ((-(x_3030) * x_3032) + vec3<f32>(x_3034.x, x_3034.y, x_3034.z));
  let x_3037 : f32 = u_xlat3;
  let x_3039 : vec3<f32> = u_xlat1;
  let x_3041 : vec4<f32> = u_xlat5;
  u_xlat1 = ((vec3<f32>(x_3037, x_3037, x_3037) * x_3039) + vec3<f32>(x_3041.x, x_3041.y, x_3041.z));
  let x_3044 : vec4<f32> = u_xlat7;
  let x_3046 : vec4<f32> = u_xlat0;
  let x_3049 : vec3<f32> = u_xlat1;
  let x_3050 : vec3<f32> = ((vec3<f32>(x_3044.x, x_3044.y, x_3044.z) * vec3<f32>(x_3046.x, x_3046.z, x_3046.w)) + x_3049);
  let x_3051 : vec4<f32> = u_xlat0;
  u_xlat0 = vec4<f32>(x_3050.x, x_3051.y, x_3050.y, x_3050.z);
  let x_3053 : vec4<f32> = u_xlat8;
  let x_3055 : vec4<f32> = u_xlat0;
  let x_3057 : vec3<f32> = (vec3<f32>(x_3053.x, x_3053.y, x_3053.z) + vec3<f32>(x_3055.x, x_3055.z, x_3055.w));
  let x_3058 : vec4<f32> = u_xlat0;
  u_xlat0 = vec4<f32>(x_3057.x, x_3058.y, x_3057.y, x_3057.z);
  let x_3060 : f32 = u_xlat19;
  let x_3062 : vec4<f32> = u_xlat4;
  let x_3065 : vec4<f32> = u_xlat0;
  u_xlat1 = ((vec3<f32>(x_3060, x_3060, x_3060) * vec3<f32>(x_3062.x, x_3062.y, x_3062.z)) + -(vec3<f32>(x_3065.x, x_3065.z, x_3065.w)));
  let x_3071 : f32 = u_xlat19;
  let x_3073 : vec3<f32> = u_xlat1;
  let x_3075 : vec4<f32> = u_xlat0;
  let x_3077 : vec3<f32> = ((vec3<f32>(x_3071, x_3071, x_3071) * x_3073) + vec3<f32>(x_3075.x, x_3075.z, x_3075.w));
  let x_3078 : vec4<f32> = SV_Target0;
  SV_Target0 = vec4<f32>(x_3077.x, x_3077.y, x_3077.z, x_3078.w);
  SV_Target0.w = 1.0f;
  return;
}

struct main_out {
  @location(0)
  SV_Target0_1 : vec4<f32>,
}

@fragment
fn main(@location(6) vs_TEXCOORD6_param : vec4<f32>, @location(4) vs_TEXCOORD3_param : vec3<f32>, @location(5) vs_TEXCOORD5_param : vec4<f32>, @location(1) vs_TEXCOORD1_param : vec3<f32>, @location(0) vs_TEXCOORD0_param : vec4<f32>, @location(2) vs_NORMAL0_param : vec3<f32>, @location(3) vs_TEXCOORD2_param : vec3<f32>, @builtin(position) gl_FragCoord_param : vec4<f32>) -> main_out {
  vs_TEXCOORD6 = vs_TEXCOORD6_param;
  vs_TEXCOORD3 = vs_TEXCOORD3_param;
  vs_TEXCOORD5 = vs_TEXCOORD5_param;
  vs_TEXCOORD1 = vs_TEXCOORD1_param;
  vs_TEXCOORD0 = vs_TEXCOORD0_param;
  vs_NORMAL0 = vs_NORMAL0_param;
  vs_TEXCOORD2 = vs_TEXCOORD2_param;
  gl_FragCoord = gl_FragCoord_param;
  main_1();
  return main_out(SV_Target0);
}

