type Arr = array<vec4<f32>, 2u>;

struct UnityPerDraw {
  unity_ObjectToWorld : mat4x4<f32>,
  unity_WorldToObject : mat4x4<f32>,
  unity_LODFade : vec4<f32>,
  unity_WorldTransformParams : vec4<f32>,
  unity_RenderingLayer : vec4<f32>,
  unity_LightData : vec4<f32>,
  unity_LightIndices : Arr,
  unity_ProbesOcclusion : vec4<f32>,
  unity_SpecCube0_HDR : vec4<f32>,
  unity_SpecCube1_HDR : vec4<f32>,
  unity_SpecCube0_BoxMax : vec4<f32>,
  unity_SpecCube0_BoxMin : vec4<f32>,
  unity_SpecCube0_ProbePosition : vec4<f32>,
  unity_SpecCube1_BoxMax : vec4<f32>,
  unity_SpecCube1_BoxMin : vec4<f32>,
  unity_SpecCube1_ProbePosition : vec4<f32>,
  unity_LightmapST : vec4<f32>,
  unity_DynamicLightmapST : vec4<f32>,
  unity_SHAr : vec4<f32>,
  unity_SHAg : vec4<f32>,
  unity_SHAb : vec4<f32>,
  unity_SHBr : vec4<f32>,
  unity_SHBg : vec4<f32>,
  unity_SHBb : vec4<f32>,
  unity_SHC : vec4<f32>,
  unity_RendererBounds_Min : vec4<f32>,
  unity_RendererBounds_Max : vec4<f32>,
  unity_MatrixPreviousM : mat4x4<f32>,
  unity_MatrixPreviousMI : mat4x4<f32>,
  unity_MotionVectorsParams : vec4<f32>,
  unity_SpriteColor : vec4<f32>,
  unity_SpriteProps : vec4<f32>,
}

struct PGlobals {
  x_ScaledScreenParams : vec4<f32>,
  x_GlobalMipBias : vec2<f32>,
  x_AlphaToMaskAvailable : f32,
  @size(4)
  padding : u32,
  x_MainLightPosition : vec4<f32>,
  x_MainLightColor : vec4<f32>,
  x_AmbientOcclusionParam : vec4<f32>,
  x_AdditionalLightsCount : vec4<f32>,
  x_WorldSpaceCameraPos : vec3<f32>,
  @size(4)
  padding_1 : u32,
  x_ScreenParams : vec4<f32>,
  unity_OrthoParams : vec4<f32>,
  x_ScaleBiasRt : vec4<f32>,
  unity_MatrixV : mat4x4<f32>,
}

struct UnityPerMaterial {
  Texture2D_B222E8F_TexelSize : vec4<f32>,
  Color_C30C7CA3 : vec4<f32>,
  Texture2D_D9BFD5F1_TexelSize : vec4<f32>,
}

type Arr_1 = array<mat4x4<f32>, 5u>;

struct MainLightShadows {
  x_MainLightWorldToShadow : Arr_1,
  x_CascadeShadowSplitSpheres0 : vec4<f32>,
  x_CascadeShadowSplitSpheres1 : vec4<f32>,
  x_CascadeShadowSplitSpheres2 : vec4<f32>,
  x_CascadeShadowSplitSpheres3 : vec4<f32>,
  x_CascadeShadowSplitSphereRadii : vec4<f32>,
  x_MainLightShadowOffset0 : vec4<f32>,
  x_MainLightShadowOffset1 : vec4<f32>,
  x_MainLightShadowParams : vec4<f32>,
  x_MainLightShadowmapSize : vec4<f32>,
}

struct strided_arr {
  @size(16)
  el : f32,
}

type Arr_2 = array<strided_arr, 8u>;

struct LightCookies {
  x_MainLightWorldToLight : mat4x4<f32>,
  x_AdditionalLightsCookieEnableBits : Arr_2,
  x_MainLightCookieTextureFormat : f32,
  x_AdditionalLightsCookieAtlasTextureFormat : f32,
}

type Arr_3 = array<vec4<f32>, 256u>;

type Arr_4 = array<vec4<f32>, 256u>;

type Arr_5 = array<vec4<f32>, 256u>;

type Arr_6 = array<vec4<f32>, 256u>;

type Arr_7 = array<vec4<f32>, 256u>;

struct strided_arr_1 {
  @size(16)
  el : f32,
}

type Arr_8 = array<strided_arr_1, 256u>;

type Arr_9 = array<vec4<f32>, 256u>;

type Arr_10 = array<strided_arr_1, 256u>;

struct AdditionalLights {
  x_AdditionalLightsPosition : Arr_9,
  x_AdditionalLightsColor : Arr_9,
  x_AdditionalLightsAttenuation : Arr_9,
  x_AdditionalLightsSpotDir : Arr_9,
  x_AdditionalLightsOcclusionProbes : Arr_9,
  x_AdditionalLightsLayerMasks : Arr_10,
}

type Arr_11 = array<mat4x4<f32>, 256u>;

struct AdditionalLightsCookies {
  x_AdditionalLightsWorldToLights : Arr_11,
  x_AdditionalLightsCookieAtlasUVRects : Arr_9,
  x_AdditionalLightsLightTypes : Arr_10,
}

var<private> gl_FragCoord : vec4<f32>;

var<private> vs_INTERP1 : vec3<f32>;

var<private> vs_INTERP2 : vec4<f32>;

@group(1) @binding(2) var<uniform> x_95 : UnityPerDraw;

@group(1) @binding(0) var<uniform> x_160 : PGlobals;

var<private> vs_INTERP0 : vec3<f32>;

@group(0) @binding(6) var Texture2D_B222E8F : texture_2d<f32>;

@group(0) @binding(14) var samplerTexture2D_B222E8F : sampler;

var<private> vs_INTERP3 : vec4<f32>;

@group(1) @binding(6) var<uniform> x_279 : UnityPerMaterial;

@group(0) @binding(7) var Texture2D_D9BFD5F1 : texture_2d<f32>;

@group(0) @binding(15) var samplerTexture2D_D9BFD5F1 : sampler;

var<private> vs_INTERP4 : vec4<f32>;

@group(1) @binding(3) var<uniform> x_381 : MainLightShadows;

@group(0) @binding(3) var x_MainLightShadowmapTexture : texture_depth_2d;

@group(0) @binding(11) var sampler_MainLightShadowmapTexture : sampler_comparison;

@group(0) @binding(1) var unity_Lightmap : texture_2d<f32>;

@group(0) @binding(9) var samplerunity_Lightmap : sampler;

var<private> vs_INTERP5 : vec2<f32>;

@group(0) @binding(2) var x_ScreenSpaceOcclusionTexture : texture_2d<f32>;

@group(0) @binding(10) var sampler_ScreenSpaceOcclusionTexture : sampler;

@group(1) @binding(4) var<uniform> x_3449 : LightCookies;

@group(0) @binding(4) var x_MainLightCookieTexture : texture_2d<f32>;

@group(0) @binding(12) var sampler_MainLightCookieTexture : sampler;

@group(0) @binding(0) var unity_SpecCube0 : texture_cube<f32>;

@group(0) @binding(8) var samplerunity_SpecCube0 : sampler;

@group(1) @binding(1) var<uniform> x_3923 : AdditionalLights;

@group(1) @binding(5) var<uniform> x_4032 : AdditionalLightsCookies;

@group(0) @binding(5) var x_AdditionalLightsCookieAtlasTexture : texture_2d<f32>;

@group(0) @binding(13) var sampler_AdditionalLightsCookieAtlasTexture : sampler;

var<private> SV_Target0 : vec4<f32>;

fn int_bitfieldInsert_i1_i1_i1_i1_(base : ptr<function, i32>, insert : ptr<function, i32>, offset_1 : ptr<function, i32>, bits : ptr<function, i32>) -> i32 {
  var mask : u32;
  let x_19 : i32 = *(bits);
  let x_23 : i32 = *(offset_1);
  mask = (~((4294967295u << bitcast<u32>(x_19))) << bitcast<u32>(x_23));
  let x_26 : i32 = *(base);
  let x_28 : u32 = mask;
  let x_31 : i32 = *(insert);
  let x_33 : i32 = *(offset_1);
  let x_36 : u32 = mask;
  return bitcast<i32>(((bitcast<u32>(x_26) & ~(x_28)) | ((bitcast<u32>(x_31) << bitcast<u32>(x_33)) & x_36)));
}

fn main_1() {
  var hlslcc_FragCoord : vec4<f32>;
  var u_xlat0 : vec3<f32>;
  var u_xlatb22 : vec2<bool>;
  var u_xlat22 : vec3<f32>;
  var u_xlat1 : vec3<f32>;
  var u_xlat2 : vec4<f32>;
  var u_xlat3 : vec4<f32>;
  var u_xlatb0 : bool;
  var u_xlat4 : vec3<f32>;
  var u_xlat67 : f32;
  var u_xlat5 : vec3<f32>;
  var x_186 : f32;
  var x_199 : f32;
  var x_211 : f32;
  var u_xlat6 : vec4<f32>;
  var u_xlat7 : vec3<f32>;
  var u_xlat8 : vec4<f32>;
  var u_xlat9 : vec4<f32>;
  var u_xlat30 : vec3<f32>;
  var u_xlat10 : vec4<f32>;
  var u_xlatb2 : vec4<bool>;
  var u_xlatu0 : u32;
  var u_xlati0 : i32;
  var u_xlatb67 : bool;
  var txVec0 : vec3<f32>;
  var txVec1 : vec3<f32>;
  var txVec2 : vec3<f32>;
  var txVec3 : vec3<f32>;
  var u_xlatb68 : bool;
  var u_xlat47 : vec2<f32>;
  var u_xlat54 : vec2<f32>;
  var u_xlat11 : vec4<f32>;
  var u_xlat12 : vec4<f32>;
  var u_xlat13 : vec4<f32>;
  var u_xlat14 : vec4<f32>;
  var u_xlat15 : vec4<f32>;
  var u_xlat16 : vec4<f32>;
  var u_xlat68 : f32;
  var txVec4 : vec3<f32>;
  var txVec5 : vec3<f32>;
  var u_xlat25 : f32;
  var txVec6 : vec3<f32>;
  var txVec7 : vec3<f32>;
  var txVec8 : vec3<f32>;
  var txVec9 : vec3<f32>;
  var txVec10 : vec3<f32>;
  var txVec11 : vec3<f32>;
  var txVec12 : vec3<f32>;
  var u_xlat31 : vec3<f32>;
  var u_xlat17 : vec4<f32>;
  var u_xlat18 : vec4<f32>;
  var u_xlat32 : vec2<f32>;
  var u_xlat60 : vec2<f32>;
  var u_xlat55 : vec2<f32>;
  var u_xlat19 : vec4<f32>;
  var u_xlat20 : vec4<f32>;
  var u_xlat21 : vec4<f32>;
  var txVec13 : vec3<f32>;
  var txVec14 : vec3<f32>;
  var u_xlat70 : f32;
  var txVec15 : vec3<f32>;
  var txVec16 : vec3<f32>;
  var txVec17 : vec3<f32>;
  var txVec18 : vec3<f32>;
  var txVec19 : vec3<f32>;
  var txVec20 : vec3<f32>;
  var txVec21 : vec3<f32>;
  var txVec22 : vec3<f32>;
  var txVec23 : vec3<f32>;
  var txVec24 : vec3<f32>;
  var txVec25 : vec3<f32>;
  var txVec26 : vec3<f32>;
  var txVec27 : vec3<f32>;
  var txVec28 : vec3<f32>;
  var txVec29 : vec3<f32>;
  var u_xlatb3 : bool;
  var u_xlatb25 : bool;
  var u_xlat23 : vec3<f32>;
  var x_1878 : f32;
  var u_xlatu4 : vec3<u32>;
  var u_xlatu47 : u32;
  var u_xlatu69 : u32;
  var u_xlati47 : i32;
  var param : i32;
  var param_1 : i32;
  var param_2 : i32;
  var param_3 : i32;
  var u_xlat69 : f32;
  var x_1999 : f32;
  var u_xlatb47 : vec2<bool>;
  var x_2055 : f32;
  var u_xlat71 : f32;
  var u_xlat28 : f32;
  var u_xlat50 : f32;
  var txVec30 : vec3<f32>;
  var txVec31 : vec3<f32>;
  var txVec32 : vec3<f32>;
  var txVec33 : vec3<f32>;
  var u_xlatb72 : bool;
  var u_xlat52 : vec2<f32>;
  var u_xlat72 : f32;
  var txVec34 : vec3<f32>;
  var u_xlat73 : f32;
  var txVec35 : vec3<f32>;
  var txVec36 : vec3<f32>;
  var txVec37 : vec3<f32>;
  var txVec38 : vec3<f32>;
  var txVec39 : vec3<f32>;
  var txVec40 : vec3<f32>;
  var txVec41 : vec3<f32>;
  var txVec42 : vec3<f32>;
  var txVec43 : vec3<f32>;
  var txVec44 : vec3<f32>;
  var txVec45 : vec3<f32>;
  var txVec46 : vec3<f32>;
  var txVec47 : vec3<f32>;
  var txVec48 : vec3<f32>;
  var txVec49 : vec3<f32>;
  var txVec50 : vec3<f32>;
  var txVec51 : vec3<f32>;
  var txVec52 : vec3<f32>;
  var txVec53 : vec3<f32>;
  var txVec54 : vec3<f32>;
  var txVec55 : vec3<f32>;
  var txVec56 : vec3<f32>;
  var txVec57 : vec3<f32>;
  var txVec58 : vec3<f32>;
  var txVec59 : vec3<f32>;
  var x_3398 : f32;
  var u_xlat24 : f32;
  var u_xlatb8 : vec2<bool>;
  var x_3532 : f32;
  var x_3543 : vec3<f32>;
  var u_xlatu_loop_1 : u32;
  var u_xlatu71 : u32;
  var u_xlati72 : i32;
  var indexable : array<vec4<u32>, 4u>;
  var u_xlat74 : f32;
  var u_xlatu74 : u32;
  var u_xlati75 : i32;
  var u_xlati74 : i32;
  var u_xlati76 : i32;
  var u_xlatb74 : bool;
  var u_xlatb55 : vec2<bool>;
  var x_4324 : f32;
  var x_4337 : f32;
  var x_4389 : f32;
  var x_4400 : vec3<f32>;
  var u_xlat_precise_vec4 : vec4<f32>;
  var u_xlat_precise_ivec4 : vec4<i32>;
  var u_xlat_precise_bvec4 : vec4<bool>;
  var u_xlat_precise_uvec4 : vec4<u32>;
  let x_49 : vec4<f32> = gl_FragCoord;
  let x_50 : vec3<f32> = vec3<f32>(x_49.x, x_49.y, x_49.z);
  let x_55 : f32 = gl_FragCoord.w;
  hlslcc_FragCoord = vec4<f32>(x_50.x, x_50.y, x_50.z, (1.0f / x_55));
  let x_65 : vec3<f32> = vs_INTERP1;
  let x_66 : vec3<f32> = vs_INTERP1;
  u_xlat0.x = dot(x_65, x_66);
  let x_72 : f32 = u_xlat0.x;
  u_xlat0.x = sqrt(x_72);
  let x_76 : f32 = u_xlat0.x;
  u_xlat0.x = (1.0f / x_76);
  let x_86 : f32 = vs_INTERP2.w;
  u_xlatb22.x = (0.0f < x_86);
  let x_99 : f32 = x_95.unity_WorldTransformParams.w;
  u_xlatb22.y = (x_99 >= 0.0f);
  let x_105 : bool = u_xlatb22.x;
  u_xlat22.x = select(-1.0f, 1.0f, x_105);
  let x_110 : bool = u_xlatb22.y;
  u_xlat22.y = select(-1.0f, 1.0f, x_110);
  let x_114 : f32 = u_xlat22.y;
  let x_116 : f32 = u_xlat22.x;
  u_xlat22.x = (x_114 * x_116);
  let x_120 : vec3<f32> = vs_INTERP1;
  let x_122 : vec4<f32> = vs_INTERP2;
  u_xlat1 = (vec3<f32>(x_120.z, x_120.x, x_120.y) * vec3<f32>(x_122.y, x_122.z, x_122.x));
  let x_125 : vec3<f32> = vs_INTERP1;
  let x_127 : vec4<f32> = vs_INTERP2;
  let x_130 : vec3<f32> = u_xlat1;
  u_xlat1 = ((vec3<f32>(x_125.y, x_125.z, x_125.x) * vec3<f32>(x_127.z, x_127.x, x_127.y)) + -(x_130));
  let x_133 : vec3<f32> = u_xlat22;
  let x_135 : vec3<f32> = u_xlat1;
  u_xlat22 = (vec3<f32>(x_133.x, x_133.x, x_133.x) * x_135);
  let x_137 : vec3<f32> = u_xlat0;
  let x_139 : vec3<f32> = vs_INTERP1;
  u_xlat1 = (vec3<f32>(x_137.x, x_137.x, x_137.x) * x_139);
  let x_142 : vec3<f32> = u_xlat0;
  let x_144 : vec4<f32> = vs_INTERP2;
  let x_146 : vec3<f32> = (vec3<f32>(x_142.x, x_142.x, x_142.x) * vec3<f32>(x_144.x, x_144.y, x_144.z));
  let x_147 : vec4<f32> = u_xlat2;
  u_xlat2 = vec4<f32>(x_146.x, x_146.y, x_146.z, x_147.w);
  let x_150 : vec3<f32> = u_xlat22;
  let x_151 : vec3<f32> = u_xlat0;
  let x_153 : vec3<f32> = (x_150 * vec3<f32>(x_151.x, x_151.x, x_151.x));
  let x_154 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_153.x, x_153.y, x_153.z, x_154.w);
  let x_163 : f32 = x_160.unity_OrthoParams.w;
  u_xlatb0 = (x_163 == 0.0f);
  let x_167 : vec3<f32> = vs_INTERP0;
  let x_172 : vec3<f32> = x_160.x_WorldSpaceCameraPos;
  u_xlat4 = (-(x_167) + x_172);
  let x_175 : vec3<f32> = u_xlat4;
  let x_176 : vec3<f32> = u_xlat4;
  u_xlat67 = dot(x_175, x_176);
  let x_178 : f32 = u_xlat67;
  u_xlat67 = inverseSqrt(x_178);
  let x_180 : f32 = u_xlat67;
  let x_182 : vec3<f32> = u_xlat4;
  u_xlat4 = (vec3<f32>(x_180, x_180, x_180) * x_182);
  let x_185 : bool = u_xlatb0;
  if (x_185) {
    let x_190 : f32 = u_xlat4.x;
    x_186 = x_190;
  } else {
    let x_195 : f32 = x_160.unity_MatrixV[0i].z;
    x_186 = x_195;
  }
  let x_196 : f32 = x_186;
  u_xlat5.x = x_196;
  let x_198 : bool = u_xlatb0;
  if (x_198) {
    let x_203 : f32 = u_xlat4.y;
    x_199 = x_203;
  } else {
    let x_207 : f32 = x_160.unity_MatrixV[1i].z;
    x_199 = x_207;
  }
  let x_208 : f32 = x_199;
  u_xlat5.y = x_208;
  let x_210 : bool = u_xlatb0;
  if (x_210) {
    let x_215 : f32 = u_xlat4.z;
    x_211 = x_215;
  } else {
    let x_219 : f32 = x_160.unity_MatrixV[2i].z;
    x_211 = x_219;
  }
  let x_220 : f32 = x_211;
  u_xlat5.z = x_220;
  let x_222 : vec3<f32> = u_xlat5;
  let x_226 : vec4<f32> = x_95.unity_WorldToObject[1i];
  u_xlat4 = (vec3<f32>(x_222.y, x_222.y, x_222.y) * vec3<f32>(x_226.x, x_226.y, x_226.z));
  let x_230 : vec4<f32> = x_95.unity_WorldToObject[0i];
  let x_232 : vec3<f32> = u_xlat5;
  let x_235 : vec3<f32> = u_xlat4;
  u_xlat4 = ((vec3<f32>(x_230.x, x_230.y, x_230.z) * vec3<f32>(x_232.x, x_232.x, x_232.x)) + x_235);
  let x_238 : vec4<f32> = x_95.unity_WorldToObject[2i];
  let x_240 : vec3<f32> = u_xlat5;
  let x_243 : vec3<f32> = u_xlat4;
  u_xlat4 = ((vec3<f32>(x_238.x, x_238.y, x_238.z) * vec3<f32>(x_240.z, x_240.z, x_240.z)) + x_243);
  let x_245 : vec3<f32> = u_xlat4;
  let x_246 : vec3<f32> = u_xlat4;
  u_xlat0.x = dot(x_245, x_246);
  let x_250 : f32 = u_xlat0.x;
  u_xlat0.x = inverseSqrt(x_250);
  let x_253 : vec3<f32> = u_xlat0;
  let x_255 : vec3<f32> = u_xlat4;
  u_xlat4 = (vec3<f32>(x_253.x, x_253.x, x_253.x) * x_255);
  let x_269 : vec4<f32> = vs_INTERP3;
  let x_272 : f32 = x_160.x_GlobalMipBias.x;
  let x_273 : vec4<f32> = textureSampleBias(Texture2D_B222E8F, samplerTexture2D_B222E8F, vec2<f32>(x_269.x, x_269.y), x_272);
  u_xlat6 = x_273;
  let x_275 : vec4<f32> = u_xlat6;
  let x_281 : vec4<f32> = x_279.Color_C30C7CA3;
  u_xlat7 = (vec3<f32>(x_275.x, x_275.y, x_275.z) * vec3<f32>(x_281.x, x_281.y, x_281.z));
  let x_290 : vec4<f32> = vs_INTERP3;
  let x_293 : f32 = x_160.x_GlobalMipBias.x;
  let x_294 : vec4<f32> = textureSampleBias(Texture2D_D9BFD5F1, samplerTexture2D_D9BFD5F1, vec2<f32>(x_290.x, x_290.y), x_293);
  u_xlat8 = vec4<f32>(x_294.w, x_294.x, x_294.y, x_294.z);
  let x_297 : vec4<f32> = u_xlat8;
  u_xlat9 = ((vec4<f32>(x_297.y, x_297.z, x_297.w, x_297.x) * vec4<f32>(2.0f, 2.0f, 2.0f, 2.0f)) + vec4<f32>(-1.0f, -1.0f, -1.0f, -1.0f));
  let x_304 : vec4<f32> = u_xlat9;
  let x_305 : vec4<f32> = u_xlat9;
  u_xlat0.x = dot(x_304, x_305);
  let x_309 : f32 = u_xlat0.x;
  u_xlat0.x = inverseSqrt(x_309);
  let x_313 : vec3<f32> = u_xlat0;
  let x_315 : vec4<f32> = u_xlat9;
  u_xlat30 = (vec3<f32>(x_313.x, x_313.x, x_313.x) * vec3<f32>(x_315.x, x_315.y, x_315.z));
  let x_320 : f32 = vs_INTERP4.y;
  u_xlat0.x = (x_320 * 200.0f);
  let x_325 : f32 = u_xlat0.x;
  u_xlat0.x = min(x_325, 1.0f);
  let x_328 : vec3<f32> = u_xlat0;
  let x_330 : vec4<f32> = u_xlat6;
  let x_332 : vec3<f32> = (vec3<f32>(x_328.x, x_328.x, x_328.x) * vec3<f32>(x_330.x, x_330.y, x_330.z));
  let x_333 : vec4<f32> = u_xlat6;
  u_xlat6 = vec4<f32>(x_332.x, x_332.y, x_332.z, x_333.w);
  let x_335 : vec4<f32> = u_xlat3;
  let x_337 : vec3<f32> = u_xlat30;
  let x_339 : vec3<f32> = (vec3<f32>(x_335.x, x_335.y, x_335.z) * vec3<f32>(x_337.y, x_337.y, x_337.y));
  let x_340 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_339.x, x_339.y, x_339.z, x_340.w);
  let x_342 : vec3<f32> = u_xlat30;
  let x_344 : vec4<f32> = u_xlat2;
  let x_347 : vec4<f32> = u_xlat3;
  let x_349 : vec3<f32> = ((vec3<f32>(x_342.x, x_342.x, x_342.x) * vec3<f32>(x_344.x, x_344.y, x_344.z)) + vec3<f32>(x_347.x, x_347.y, x_347.z));
  let x_350 : vec4<f32> = u_xlat2;
  u_xlat2 = vec4<f32>(x_349.x, x_349.y, x_349.z, x_350.w);
  let x_352 : vec3<f32> = u_xlat30;
  let x_354 : vec3<f32> = u_xlat1;
  let x_356 : vec4<f32> = u_xlat2;
  u_xlat1 = ((vec3<f32>(x_352.z, x_352.z, x_352.z) * x_354) + vec3<f32>(x_356.x, x_356.y, x_356.z));
  let x_359 : vec3<f32> = u_xlat1;
  let x_360 : vec3<f32> = u_xlat1;
  u_xlat0.x = dot(x_359, x_360);
  let x_364 : f32 = u_xlat0.x;
  u_xlat0.x = max(x_364, 1.17549435e-37f);
  let x_369 : f32 = u_xlat0.x;
  u_xlat0.x = inverseSqrt(x_369);
  let x_372 : vec3<f32> = u_xlat0;
  let x_374 : vec3<f32> = u_xlat1;
  u_xlat1 = (vec3<f32>(x_372.x, x_372.x, x_372.x) * x_374);
  let x_376 : vec3<f32> = vs_INTERP0;
  let x_383 : vec4<f32> = x_381.x_CascadeShadowSplitSpheres0;
  let x_386 : vec3<f32> = (x_376 + -(vec3<f32>(x_383.x, x_383.y, x_383.z)));
  let x_387 : vec4<f32> = u_xlat2;
  u_xlat2 = vec4<f32>(x_386.x, x_386.y, x_386.z, x_387.w);
  let x_389 : vec3<f32> = vs_INTERP0;
  let x_391 : vec4<f32> = x_381.x_CascadeShadowSplitSpheres1;
  let x_394 : vec3<f32> = (x_389 + -(vec3<f32>(x_391.x, x_391.y, x_391.z)));
  let x_395 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_394.x, x_394.y, x_394.z, x_395.w);
  let x_397 : vec3<f32> = vs_INTERP0;
  let x_399 : vec4<f32> = x_381.x_CascadeShadowSplitSpheres2;
  let x_402 : vec3<f32> = (x_397 + -(vec3<f32>(x_399.x, x_399.y, x_399.z)));
  let x_403 : vec4<f32> = u_xlat9;
  u_xlat9 = vec4<f32>(x_402.x, x_402.y, x_402.z, x_403.w);
  let x_406 : vec3<f32> = vs_INTERP0;
  let x_409 : vec4<f32> = x_381.x_CascadeShadowSplitSpheres3;
  let x_412 : vec3<f32> = (x_406 + -(vec3<f32>(x_409.x, x_409.y, x_409.z)));
  let x_413 : vec4<f32> = u_xlat10;
  u_xlat10 = vec4<f32>(x_412.x, x_412.y, x_412.z, x_413.w);
  let x_415 : vec4<f32> = u_xlat2;
  let x_417 : vec4<f32> = u_xlat2;
  u_xlat2.x = dot(vec3<f32>(x_415.x, x_415.y, x_415.z), vec3<f32>(x_417.x, x_417.y, x_417.z));
  let x_421 : vec4<f32> = u_xlat3;
  let x_423 : vec4<f32> = u_xlat3;
  u_xlat2.y = dot(vec3<f32>(x_421.x, x_421.y, x_421.z), vec3<f32>(x_423.x, x_423.y, x_423.z));
  let x_427 : vec4<f32> = u_xlat9;
  let x_429 : vec4<f32> = u_xlat9;
  u_xlat2.z = dot(vec3<f32>(x_427.x, x_427.y, x_427.z), vec3<f32>(x_429.x, x_429.y, x_429.z));
  let x_433 : vec4<f32> = u_xlat10;
  let x_435 : vec4<f32> = u_xlat10;
  u_xlat2.w = dot(vec3<f32>(x_433.x, x_433.y, x_433.z), vec3<f32>(x_435.x, x_435.y, x_435.z));
  let x_442 : vec4<f32> = u_xlat2;
  let x_445 : vec4<f32> = x_381.x_CascadeShadowSplitSphereRadii;
  u_xlatb2 = (x_442 < x_445);
  let x_448 : bool = u_xlatb2.x;
  u_xlat3.x = select(0.0f, 1.0f, x_448);
  let x_452 : bool = u_xlatb2.y;
  u_xlat3.y = select(0.0f, 1.0f, x_452);
  let x_456 : bool = u_xlatb2.z;
  u_xlat3.z = select(0.0f, 1.0f, x_456);
  let x_460 : bool = u_xlatb2.w;
  u_xlat3.w = select(0.0f, 1.0f, x_460);
  let x_464 : bool = u_xlatb2.x;
  u_xlat2.x = select(-0.0f, -1.0f, x_464);
  let x_469 : bool = u_xlatb2.y;
  u_xlat2.y = select(-0.0f, -1.0f, x_469);
  let x_473 : bool = u_xlatb2.z;
  u_xlat2.z = select(-0.0f, -1.0f, x_473);
  let x_476 : vec4<f32> = u_xlat2;
  let x_478 : vec4<f32> = u_xlat3;
  let x_480 : vec3<f32> = (vec3<f32>(x_476.x, x_476.y, x_476.z) + vec3<f32>(x_478.y, x_478.z, x_478.w));
  let x_481 : vec4<f32> = u_xlat2;
  u_xlat2 = vec4<f32>(x_480.x, x_480.y, x_480.z, x_481.w);
  let x_483 : vec4<f32> = u_xlat2;
  let x_486 : vec3<f32> = max(vec3<f32>(x_483.x, x_483.y, x_483.z), vec3<f32>(0.0f, 0.0f, 0.0f));
  let x_487 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_487.x, x_486.x, x_486.y, x_486.z);
  let x_489 : vec4<f32> = u_xlat3;
  u_xlat0.x = dot(x_489, vec4<f32>(4.0f, 3.0f, 2.0f, 1.0f));
  let x_496 : f32 = u_xlat0.x;
  u_xlat0.x = (-(x_496) + 4.0f);
  let x_502 : f32 = u_xlat0.x;
  u_xlatu0 = u32(x_502);
  let x_505 : u32 = u_xlatu0;
  u_xlati0 = (bitcast<i32>(x_505) << bitcast<u32>(2i));
  let x_508 : vec3<f32> = vs_INTERP0;
  let x_510 : i32 = u_xlati0;
  let x_513 : i32 = u_xlati0;
  let x_517 : vec4<f32> = x_381.x_MainLightWorldToShadow[((x_510 + 1i) / 4i)][((x_513 + 1i) % 4i)];
  let x_519 : vec3<f32> = (vec3<f32>(x_508.y, x_508.y, x_508.y) * vec3<f32>(x_517.x, x_517.y, x_517.z));
  let x_520 : vec4<f32> = u_xlat2;
  u_xlat2 = vec4<f32>(x_519.x, x_519.y, x_519.z, x_520.w);
  let x_522 : i32 = u_xlati0;
  let x_524 : i32 = u_xlati0;
  let x_527 : vec4<f32> = x_381.x_MainLightWorldToShadow[(x_522 / 4i)][(x_524 % 4i)];
  let x_529 : vec3<f32> = vs_INTERP0;
  let x_532 : vec4<f32> = u_xlat2;
  let x_534 : vec3<f32> = ((vec3<f32>(x_527.x, x_527.y, x_527.z) * vec3<f32>(x_529.x, x_529.x, x_529.x)) + vec3<f32>(x_532.x, x_532.y, x_532.z));
  let x_535 : vec4<f32> = u_xlat2;
  u_xlat2 = vec4<f32>(x_534.x, x_534.y, x_534.z, x_535.w);
  let x_537 : i32 = u_xlati0;
  let x_540 : i32 = u_xlati0;
  let x_544 : vec4<f32> = x_381.x_MainLightWorldToShadow[((x_537 + 2i) / 4i)][((x_540 + 2i) % 4i)];
  let x_546 : vec3<f32> = vs_INTERP0;
  let x_549 : vec4<f32> = u_xlat2;
  let x_551 : vec3<f32> = ((vec3<f32>(x_544.x, x_544.y, x_544.z) * vec3<f32>(x_546.z, x_546.z, x_546.z)) + vec3<f32>(x_549.x, x_549.y, x_549.z));
  let x_552 : vec4<f32> = u_xlat2;
  u_xlat2 = vec4<f32>(x_551.x, x_551.y, x_551.z, x_552.w);
  let x_554 : vec4<f32> = u_xlat2;
  let x_556 : i32 = u_xlati0;
  let x_559 : i32 = u_xlati0;
  let x_563 : vec4<f32> = x_381.x_MainLightWorldToShadow[((x_556 + 3i) / 4i)][((x_559 + 3i) % 4i)];
  let x_565 : vec3<f32> = (vec3<f32>(x_554.x, x_554.y, x_554.z) + vec3<f32>(x_563.x, x_563.y, x_563.z));
  let x_566 : vec4<f32> = u_xlat2;
  u_xlat2 = vec4<f32>(x_565.x, x_565.y, x_565.z, x_566.w);
  let x_570 : f32 = x_381.x_MainLightShadowParams.y;
  u_xlatb0 = (0.0f < x_570);
  let x_572 : bool = u_xlatb0;
  if (x_572) {
    let x_577 : f32 = x_381.x_MainLightShadowParams.y;
    u_xlatb67 = (x_577 == 1.0f);
    let x_579 : bool = u_xlatb67;
    if (x_579) {
      let x_582 : vec4<f32> = u_xlat2;
      let x_586 : vec4<f32> = x_381.x_MainLightShadowOffset0;
      u_xlat3 = (vec4<f32>(x_582.x, x_582.y, x_582.x, x_582.y) + x_586);
      let x_589 : vec4<f32> = u_xlat3;
      let x_590 : vec2<f32> = vec2<f32>(x_589.x, x_589.y);
      let x_592 : f32 = u_xlat2.z;
      txVec0 = vec3<f32>(x_590.x, x_590.y, x_592);
      let x_604 : vec3<f32> = txVec0;
      let x_606 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_604.xy, x_604.z);
      u_xlat9.x = x_606;
      let x_609 : vec4<f32> = u_xlat3;
      let x_610 : vec2<f32> = vec2<f32>(x_609.z, x_609.w);
      let x_612 : f32 = u_xlat2.z;
      txVec1 = vec3<f32>(x_610.x, x_610.y, x_612);
      let x_619 : vec3<f32> = txVec1;
      let x_621 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_619.xy, x_619.z);
      u_xlat9.y = x_621;
      let x_623 : vec4<f32> = u_xlat2;
      let x_626 : vec4<f32> = x_381.x_MainLightShadowOffset1;
      u_xlat3 = (vec4<f32>(x_623.x, x_623.y, x_623.x, x_623.y) + x_626);
      let x_629 : vec4<f32> = u_xlat3;
      let x_630 : vec2<f32> = vec2<f32>(x_629.x, x_629.y);
      let x_632 : f32 = u_xlat2.z;
      txVec2 = vec3<f32>(x_630.x, x_630.y, x_632);
      let x_639 : vec3<f32> = txVec2;
      let x_641 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_639.xy, x_639.z);
      u_xlat9.z = x_641;
      let x_644 : vec4<f32> = u_xlat3;
      let x_645 : vec2<f32> = vec2<f32>(x_644.z, x_644.w);
      let x_647 : f32 = u_xlat2.z;
      txVec3 = vec3<f32>(x_645.x, x_645.y, x_647);
      let x_654 : vec3<f32> = txVec3;
      let x_656 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_654.xy, x_654.z);
      u_xlat9.w = x_656;
      let x_658 : vec4<f32> = u_xlat9;
      u_xlat67 = dot(x_658, vec4<f32>(0.25f, 0.25f, 0.25f, 0.25f));
    } else {
      let x_665 : f32 = x_381.x_MainLightShadowParams.y;
      u_xlatb68 = (x_665 == 2.0f);
      let x_667 : bool = u_xlatb68;
      if (x_667) {
        let x_670 : vec4<f32> = u_xlat2;
        let x_673 : vec4<f32> = x_381.x_MainLightShadowmapSize;
        let x_678 : vec2<f32> = ((vec2<f32>(x_670.x, x_670.y) * vec2<f32>(x_673.z, x_673.w)) + vec2<f32>(0.5f, 0.5f));
        let x_679 : vec4<f32> = u_xlat3;
        u_xlat3 = vec4<f32>(x_678.x, x_678.y, x_679.z, x_679.w);
        let x_681 : vec4<f32> = u_xlat3;
        let x_683 : vec2<f32> = floor(vec2<f32>(x_681.x, x_681.y));
        let x_684 : vec4<f32> = u_xlat3;
        u_xlat3 = vec4<f32>(x_683.x, x_683.y, x_684.z, x_684.w);
        let x_688 : vec4<f32> = u_xlat2;
        let x_691 : vec4<f32> = x_381.x_MainLightShadowmapSize;
        let x_694 : vec4<f32> = u_xlat3;
        u_xlat47 = ((vec2<f32>(x_688.x, x_688.y) * vec2<f32>(x_691.z, x_691.w)) + -(vec2<f32>(x_694.x, x_694.y)));
        let x_698 : vec2<f32> = u_xlat47;
        u_xlat9 = (vec4<f32>(x_698.x, x_698.x, x_698.y, x_698.y) + vec4<f32>(0.5f, 1.0f, 0.5f, 1.0f));
        let x_702 : vec4<f32> = u_xlat9;
        let x_704 : vec4<f32> = u_xlat9;
        u_xlat10 = (vec4<f32>(x_702.x, x_702.x, x_702.z, x_702.z) * vec4<f32>(x_704.x, x_704.x, x_704.z, x_704.z));
        let x_707 : vec4<f32> = u_xlat10;
        let x_711 : vec2<f32> = (vec2<f32>(x_707.y, x_707.w) * vec2<f32>(0.079999998f, 0.079999998f));
        let x_712 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_711.x, x_712.y, x_711.y, x_712.w);
        let x_714 : vec4<f32> = u_xlat10;
        let x_717 : vec2<f32> = u_xlat47;
        let x_719 : vec2<f32> = ((vec2<f32>(x_714.x, x_714.z) * vec2<f32>(0.5f, 0.5f)) + -(x_717));
        let x_720 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_719.x, x_719.y, x_720.z, x_720.w);
        let x_723 : vec2<f32> = u_xlat47;
        u_xlat54 = (-(x_723) + vec2<f32>(1.0f, 1.0f));
        let x_728 : vec2<f32> = u_xlat47;
        let x_730 : vec2<f32> = min(x_728, vec2<f32>(0.0f, 0.0f));
        let x_731 : vec4<f32> = u_xlat11;
        u_xlat11 = vec4<f32>(x_730.x, x_730.y, x_731.z, x_731.w);
        let x_733 : vec4<f32> = u_xlat11;
        let x_736 : vec4<f32> = u_xlat11;
        let x_739 : vec2<f32> = u_xlat54;
        let x_740 : vec2<f32> = ((-(vec2<f32>(x_733.x, x_733.y)) * vec2<f32>(x_736.x, x_736.y)) + x_739);
        let x_741 : vec4<f32> = u_xlat11;
        u_xlat11 = vec4<f32>(x_740.x, x_740.y, x_741.z, x_741.w);
        let x_743 : vec2<f32> = u_xlat47;
        u_xlat47 = max(x_743, vec2<f32>(0.0f, 0.0f));
        let x_745 : vec2<f32> = u_xlat47;
        let x_747 : vec2<f32> = u_xlat47;
        let x_749 : vec4<f32> = u_xlat9;
        u_xlat47 = ((-(x_745) * x_747) + vec2<f32>(x_749.y, x_749.w));
        let x_752 : vec4<f32> = u_xlat11;
        let x_754 : vec2<f32> = (vec2<f32>(x_752.x, x_752.y) + vec2<f32>(1.0f, 1.0f));
        let x_755 : vec4<f32> = u_xlat11;
        u_xlat11 = vec4<f32>(x_754.x, x_754.y, x_755.z, x_755.w);
        let x_757 : vec2<f32> = u_xlat47;
        u_xlat47 = (x_757 + vec2<f32>(1.0f, 1.0f));
        let x_760 : vec4<f32> = u_xlat10;
        let x_764 : vec2<f32> = (vec2<f32>(x_760.x, x_760.y) * vec2<f32>(0.159999996f, 0.159999996f));
        let x_765 : vec4<f32> = u_xlat12;
        u_xlat12 = vec4<f32>(x_764.x, x_764.y, x_765.z, x_765.w);
        let x_767 : vec2<f32> = u_xlat54;
        let x_768 : vec2<f32> = (x_767 * vec2<f32>(0.159999996f, 0.159999996f));
        let x_769 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_768.x, x_768.y, x_769.z, x_769.w);
        let x_771 : vec4<f32> = u_xlat11;
        let x_773 : vec2<f32> = (vec2<f32>(x_771.x, x_771.y) * vec2<f32>(0.159999996f, 0.159999996f));
        let x_774 : vec4<f32> = u_xlat11;
        u_xlat11 = vec4<f32>(x_773.x, x_773.y, x_774.z, x_774.w);
        let x_777 : vec2<f32> = u_xlat47;
        let x_778 : vec2<f32> = (x_777 * vec2<f32>(0.159999996f, 0.159999996f));
        let x_779 : vec4<f32> = u_xlat13;
        u_xlat13 = vec4<f32>(x_778.x, x_778.y, x_779.z, x_779.w);
        let x_781 : vec4<f32> = u_xlat9;
        u_xlat47 = (vec2<f32>(x_781.y, x_781.w) * vec2<f32>(0.159999996f, 0.159999996f));
        let x_785 : f32 = u_xlat11.x;
        u_xlat12.z = x_785;
        let x_788 : f32 = u_xlat47.x;
        u_xlat12.w = x_788;
        let x_791 : f32 = u_xlat13.x;
        u_xlat10.z = x_791;
        let x_794 : f32 = u_xlat9.x;
        u_xlat10.w = x_794;
        let x_797 : vec4<f32> = u_xlat10;
        let x_799 : vec4<f32> = u_xlat12;
        u_xlat14 = (vec4<f32>(x_797.z, x_797.w, x_797.x, x_797.z) + vec4<f32>(x_799.z, x_799.w, x_799.x, x_799.z));
        let x_803 : f32 = u_xlat12.y;
        u_xlat11.z = x_803;
        let x_806 : f32 = u_xlat47.y;
        u_xlat11.w = x_806;
        let x_809 : f32 = u_xlat10.y;
        u_xlat13.z = x_809;
        let x_812 : f32 = u_xlat9.z;
        u_xlat13.w = x_812;
        let x_814 : vec4<f32> = u_xlat11;
        let x_816 : vec4<f32> = u_xlat13;
        let x_818 : vec3<f32> = (vec3<f32>(x_814.z, x_814.y, x_814.w) + vec3<f32>(x_816.z, x_816.y, x_816.w));
        let x_819 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_818.x, x_818.y, x_818.z, x_819.w);
        let x_821 : vec4<f32> = u_xlat10;
        let x_823 : vec4<f32> = u_xlat14;
        let x_825 : vec3<f32> = (vec3<f32>(x_821.x, x_821.z, x_821.w) / vec3<f32>(x_823.z, x_823.w, x_823.y));
        let x_826 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_825.x, x_825.y, x_825.z, x_826.w);
        let x_828 : vec4<f32> = u_xlat10;
        let x_834 : vec3<f32> = (vec3<f32>(x_828.x, x_828.y, x_828.z) + vec3<f32>(-2.5f, -0.5f, 1.5f));
        let x_835 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_834.x, x_834.y, x_834.z, x_835.w);
        let x_837 : vec4<f32> = u_xlat13;
        let x_839 : vec4<f32> = u_xlat9;
        let x_841 : vec3<f32> = (vec3<f32>(x_837.z, x_837.y, x_837.w) / vec3<f32>(x_839.x, x_839.y, x_839.z));
        let x_842 : vec4<f32> = u_xlat11;
        u_xlat11 = vec4<f32>(x_841.x, x_841.y, x_841.z, x_842.w);
        let x_844 : vec4<f32> = u_xlat11;
        let x_846 : vec3<f32> = (vec3<f32>(x_844.x, x_844.y, x_844.z) + vec3<f32>(-2.5f, -0.5f, 1.5f));
        let x_847 : vec4<f32> = u_xlat11;
        u_xlat11 = vec4<f32>(x_846.x, x_846.y, x_846.z, x_847.w);
        let x_849 : vec4<f32> = u_xlat10;
        let x_852 : vec4<f32> = x_381.x_MainLightShadowmapSize;
        let x_854 : vec3<f32> = (vec3<f32>(x_849.y, x_849.x, x_849.z) * vec3<f32>(x_852.x, x_852.x, x_852.x));
        let x_855 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_854.x, x_854.y, x_854.z, x_855.w);
        let x_857 : vec4<f32> = u_xlat11;
        let x_860 : vec4<f32> = x_381.x_MainLightShadowmapSize;
        let x_862 : vec3<f32> = (vec3<f32>(x_857.x, x_857.y, x_857.z) * vec3<f32>(x_860.y, x_860.y, x_860.y));
        let x_863 : vec4<f32> = u_xlat11;
        u_xlat11 = vec4<f32>(x_862.x, x_862.y, x_862.z, x_863.w);
        let x_866 : f32 = u_xlat11.x;
        u_xlat10.w = x_866;
        let x_868 : vec4<f32> = u_xlat3;
        let x_871 : vec4<f32> = x_381.x_MainLightShadowmapSize;
        let x_874 : vec4<f32> = u_xlat10;
        u_xlat12 = ((vec4<f32>(x_868.x, x_868.y, x_868.x, x_868.y) * vec4<f32>(x_871.x, x_871.y, x_871.x, x_871.y)) + vec4<f32>(x_874.y, x_874.w, x_874.x, x_874.w));
        let x_877 : vec4<f32> = u_xlat3;
        let x_880 : vec4<f32> = x_381.x_MainLightShadowmapSize;
        let x_883 : vec4<f32> = u_xlat10;
        u_xlat47 = ((vec2<f32>(x_877.x, x_877.y) * vec2<f32>(x_880.x, x_880.y)) + vec2<f32>(x_883.z, x_883.w));
        let x_887 : f32 = u_xlat10.y;
        u_xlat11.w = x_887;
        let x_889 : vec4<f32> = u_xlat11;
        let x_890 : vec2<f32> = vec2<f32>(x_889.y, x_889.z);
        let x_891 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_891.x, x_890.x, x_891.z, x_890.y);
        let x_893 : vec4<f32> = u_xlat3;
        let x_896 : vec4<f32> = x_381.x_MainLightShadowmapSize;
        let x_899 : vec4<f32> = u_xlat10;
        u_xlat13 = ((vec4<f32>(x_893.x, x_893.y, x_893.x, x_893.y) * vec4<f32>(x_896.x, x_896.y, x_896.x, x_896.y)) + vec4<f32>(x_899.x, x_899.y, x_899.z, x_899.y));
        let x_902 : vec4<f32> = u_xlat3;
        let x_905 : vec4<f32> = x_381.x_MainLightShadowmapSize;
        let x_908 : vec4<f32> = u_xlat11;
        u_xlat11 = ((vec4<f32>(x_902.x, x_902.y, x_902.x, x_902.y) * vec4<f32>(x_905.x, x_905.y, x_905.x, x_905.y)) + vec4<f32>(x_908.w, x_908.y, x_908.w, x_908.z));
        let x_911 : vec4<f32> = u_xlat3;
        let x_914 : vec4<f32> = x_381.x_MainLightShadowmapSize;
        let x_917 : vec4<f32> = u_xlat10;
        u_xlat10 = ((vec4<f32>(x_911.x, x_911.y, x_911.x, x_911.y) * vec4<f32>(x_914.x, x_914.y, x_914.x, x_914.y)) + vec4<f32>(x_917.x, x_917.w, x_917.z, x_917.w));
        let x_921 : vec4<f32> = u_xlat9;
        let x_923 : vec4<f32> = u_xlat14;
        u_xlat15 = (vec4<f32>(x_921.x, x_921.x, x_921.x, x_921.y) * vec4<f32>(x_923.z, x_923.w, x_923.y, x_923.z));
        let x_927 : vec4<f32> = u_xlat9;
        let x_929 : vec4<f32> = u_xlat14;
        u_xlat16 = (vec4<f32>(x_927.y, x_927.y, x_927.z, x_927.z) * x_929);
        let x_933 : f32 = u_xlat9.z;
        let x_935 : f32 = u_xlat14.y;
        u_xlat68 = (x_933 * x_935);
        let x_938 : vec4<f32> = u_xlat12;
        let x_939 : vec2<f32> = vec2<f32>(x_938.x, x_938.y);
        let x_941 : f32 = u_xlat2.z;
        txVec4 = vec3<f32>(x_939.x, x_939.y, x_941);
        let x_948 : vec3<f32> = txVec4;
        let x_950 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_948.xy, x_948.z);
        u_xlat3.x = x_950;
        let x_953 : vec4<f32> = u_xlat12;
        let x_954 : vec2<f32> = vec2<f32>(x_953.z, x_953.w);
        let x_956 : f32 = u_xlat2.z;
        txVec5 = vec3<f32>(x_954.x, x_954.y, x_956);
        let x_964 : vec3<f32> = txVec5;
        let x_966 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_964.xy, x_964.z);
        u_xlat25 = x_966;
        let x_967 : f32 = u_xlat25;
        let x_969 : f32 = u_xlat15.y;
        u_xlat25 = (x_967 * x_969);
        let x_972 : f32 = u_xlat15.x;
        let x_974 : f32 = u_xlat3.x;
        let x_976 : f32 = u_xlat25;
        u_xlat3.x = ((x_972 * x_974) + x_976);
        let x_980 : vec2<f32> = u_xlat47;
        let x_982 : f32 = u_xlat2.z;
        txVec6 = vec3<f32>(x_980.x, x_980.y, x_982);
        let x_989 : vec3<f32> = txVec6;
        let x_991 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_989.xy, x_989.z);
        u_xlat25 = x_991;
        let x_993 : f32 = u_xlat15.z;
        let x_994 : f32 = u_xlat25;
        let x_997 : f32 = u_xlat3.x;
        u_xlat3.x = ((x_993 * x_994) + x_997);
        let x_1001 : vec4<f32> = u_xlat11;
        let x_1002 : vec2<f32> = vec2<f32>(x_1001.x, x_1001.y);
        let x_1004 : f32 = u_xlat2.z;
        txVec7 = vec3<f32>(x_1002.x, x_1002.y, x_1004);
        let x_1011 : vec3<f32> = txVec7;
        let x_1013 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1011.xy, x_1011.z);
        u_xlat25 = x_1013;
        let x_1015 : f32 = u_xlat15.w;
        let x_1016 : f32 = u_xlat25;
        let x_1019 : f32 = u_xlat3.x;
        u_xlat3.x = ((x_1015 * x_1016) + x_1019);
        let x_1023 : vec4<f32> = u_xlat13;
        let x_1024 : vec2<f32> = vec2<f32>(x_1023.x, x_1023.y);
        let x_1026 : f32 = u_xlat2.z;
        txVec8 = vec3<f32>(x_1024.x, x_1024.y, x_1026);
        let x_1033 : vec3<f32> = txVec8;
        let x_1035 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1033.xy, x_1033.z);
        u_xlat25 = x_1035;
        let x_1037 : f32 = u_xlat16.x;
        let x_1038 : f32 = u_xlat25;
        let x_1041 : f32 = u_xlat3.x;
        u_xlat3.x = ((x_1037 * x_1038) + x_1041);
        let x_1045 : vec4<f32> = u_xlat13;
        let x_1046 : vec2<f32> = vec2<f32>(x_1045.z, x_1045.w);
        let x_1048 : f32 = u_xlat2.z;
        txVec9 = vec3<f32>(x_1046.x, x_1046.y, x_1048);
        let x_1055 : vec3<f32> = txVec9;
        let x_1057 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1055.xy, x_1055.z);
        u_xlat25 = x_1057;
        let x_1059 : f32 = u_xlat16.y;
        let x_1060 : f32 = u_xlat25;
        let x_1063 : f32 = u_xlat3.x;
        u_xlat3.x = ((x_1059 * x_1060) + x_1063);
        let x_1067 : vec4<f32> = u_xlat11;
        let x_1068 : vec2<f32> = vec2<f32>(x_1067.z, x_1067.w);
        let x_1070 : f32 = u_xlat2.z;
        txVec10 = vec3<f32>(x_1068.x, x_1068.y, x_1070);
        let x_1077 : vec3<f32> = txVec10;
        let x_1079 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1077.xy, x_1077.z);
        u_xlat25 = x_1079;
        let x_1081 : f32 = u_xlat16.z;
        let x_1082 : f32 = u_xlat25;
        let x_1085 : f32 = u_xlat3.x;
        u_xlat3.x = ((x_1081 * x_1082) + x_1085);
        let x_1089 : vec4<f32> = u_xlat10;
        let x_1090 : vec2<f32> = vec2<f32>(x_1089.x, x_1089.y);
        let x_1092 : f32 = u_xlat2.z;
        txVec11 = vec3<f32>(x_1090.x, x_1090.y, x_1092);
        let x_1099 : vec3<f32> = txVec11;
        let x_1101 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1099.xy, x_1099.z);
        u_xlat25 = x_1101;
        let x_1103 : f32 = u_xlat16.w;
        let x_1104 : f32 = u_xlat25;
        let x_1107 : f32 = u_xlat3.x;
        u_xlat3.x = ((x_1103 * x_1104) + x_1107);
        let x_1111 : vec4<f32> = u_xlat10;
        let x_1112 : vec2<f32> = vec2<f32>(x_1111.z, x_1111.w);
        let x_1114 : f32 = u_xlat2.z;
        txVec12 = vec3<f32>(x_1112.x, x_1112.y, x_1114);
        let x_1121 : vec3<f32> = txVec12;
        let x_1123 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1121.xy, x_1121.z);
        u_xlat25 = x_1123;
        let x_1124 : f32 = u_xlat68;
        let x_1125 : f32 = u_xlat25;
        let x_1128 : f32 = u_xlat3.x;
        u_xlat67 = ((x_1124 * x_1125) + x_1128);
      } else {
        let x_1131 : vec4<f32> = u_xlat2;
        let x_1134 : vec4<f32> = x_381.x_MainLightShadowmapSize;
        let x_1137 : vec2<f32> = ((vec2<f32>(x_1131.x, x_1131.y) * vec2<f32>(x_1134.z, x_1134.w)) + vec2<f32>(0.5f, 0.5f));
        let x_1138 : vec4<f32> = u_xlat3;
        u_xlat3 = vec4<f32>(x_1137.x, x_1137.y, x_1138.z, x_1138.w);
        let x_1140 : vec4<f32> = u_xlat3;
        let x_1142 : vec2<f32> = floor(vec2<f32>(x_1140.x, x_1140.y));
        let x_1143 : vec4<f32> = u_xlat3;
        u_xlat3 = vec4<f32>(x_1142.x, x_1142.y, x_1143.z, x_1143.w);
        let x_1145 : vec4<f32> = u_xlat2;
        let x_1148 : vec4<f32> = x_381.x_MainLightShadowmapSize;
        let x_1151 : vec4<f32> = u_xlat3;
        u_xlat47 = ((vec2<f32>(x_1145.x, x_1145.y) * vec2<f32>(x_1148.z, x_1148.w)) + -(vec2<f32>(x_1151.x, x_1151.y)));
        let x_1155 : vec2<f32> = u_xlat47;
        u_xlat9 = (vec4<f32>(x_1155.x, x_1155.x, x_1155.y, x_1155.y) + vec4<f32>(0.5f, 1.0f, 0.5f, 1.0f));
        let x_1158 : vec4<f32> = u_xlat9;
        let x_1160 : vec4<f32> = u_xlat9;
        u_xlat10 = (vec4<f32>(x_1158.x, x_1158.x, x_1158.z, x_1158.z) * vec4<f32>(x_1160.x, x_1160.x, x_1160.z, x_1160.z));
        let x_1163 : vec4<f32> = u_xlat10;
        let x_1167 : vec2<f32> = (vec2<f32>(x_1163.y, x_1163.w) * vec2<f32>(0.040816002f, 0.040816002f));
        let x_1168 : vec4<f32> = u_xlat11;
        u_xlat11 = vec4<f32>(x_1168.x, x_1167.x, x_1168.z, x_1167.y);
        let x_1170 : vec4<f32> = u_xlat10;
        let x_1173 : vec2<f32> = u_xlat47;
        let x_1175 : vec2<f32> = ((vec2<f32>(x_1170.x, x_1170.z) * vec2<f32>(0.5f, 0.5f)) + -(x_1173));
        let x_1176 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_1175.x, x_1176.y, x_1175.y, x_1176.w);
        let x_1178 : vec2<f32> = u_xlat47;
        let x_1180 : vec2<f32> = (-(x_1178) + vec2<f32>(1.0f, 1.0f));
        let x_1181 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_1180.x, x_1180.y, x_1181.z, x_1181.w);
        let x_1183 : vec2<f32> = u_xlat47;
        u_xlat54 = min(x_1183, vec2<f32>(0.0f, 0.0f));
        let x_1185 : vec2<f32> = u_xlat54;
        let x_1187 : vec2<f32> = u_xlat54;
        let x_1189 : vec4<f32> = u_xlat10;
        let x_1191 : vec2<f32> = ((-(x_1185) * x_1187) + vec2<f32>(x_1189.x, x_1189.y));
        let x_1192 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_1191.x, x_1191.y, x_1192.z, x_1192.w);
        let x_1194 : vec2<f32> = u_xlat47;
        u_xlat54 = max(x_1194, vec2<f32>(0.0f, 0.0f));
        let x_1197 : vec2<f32> = u_xlat54;
        let x_1199 : vec2<f32> = u_xlat54;
        let x_1201 : vec4<f32> = u_xlat9;
        let x_1203 : vec2<f32> = ((-(x_1197) * x_1199) + vec2<f32>(x_1201.y, x_1201.w));
        let x_1204 : vec3<f32> = u_xlat31;
        u_xlat31 = vec3<f32>(x_1203.x, x_1204.y, x_1203.y);
        let x_1206 : vec4<f32> = u_xlat10;
        let x_1209 : vec2<f32> = (vec2<f32>(x_1206.x, x_1206.y) + vec2<f32>(2.0f, 2.0f));
        let x_1210 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_1209.x, x_1209.y, x_1210.z, x_1210.w);
        let x_1212 : vec3<f32> = u_xlat31;
        let x_1214 : vec2<f32> = (vec2<f32>(x_1212.x, x_1212.z) + vec2<f32>(2.0f, 2.0f));
        let x_1215 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_1215.x, x_1214.x, x_1215.z, x_1214.y);
        let x_1218 : f32 = u_xlat9.y;
        u_xlat12.z = (x_1218 * 0.081632003f);
        let x_1222 : vec4<f32> = u_xlat9;
        let x_1225 : vec3<f32> = (vec3<f32>(x_1222.z, x_1222.x, x_1222.w) * vec3<f32>(0.081632003f, 0.081632003f, 0.081632003f));
        let x_1226 : vec4<f32> = u_xlat13;
        u_xlat13 = vec4<f32>(x_1225.x, x_1225.y, x_1225.z, x_1226.w);
        let x_1228 : vec4<f32> = u_xlat10;
        let x_1231 : vec2<f32> = (vec2<f32>(x_1228.x, x_1228.y) * vec2<f32>(0.081632003f, 0.081632003f));
        let x_1232 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_1231.x, x_1231.y, x_1232.z, x_1232.w);
        let x_1235 : f32 = u_xlat13.y;
        u_xlat12.x = x_1235;
        let x_1237 : vec2<f32> = u_xlat47;
        let x_1244 : vec2<f32> = ((vec2<f32>(x_1237.x, x_1237.x) * vec2<f32>(-0.081632003f, 0.081632003f)) + vec2<f32>(0.163264006f, 0.081632003f));
        let x_1245 : vec4<f32> = u_xlat12;
        u_xlat12 = vec4<f32>(x_1245.x, x_1244.x, x_1245.z, x_1244.y);
        let x_1247 : vec2<f32> = u_xlat47;
        let x_1251 : vec2<f32> = ((vec2<f32>(x_1247.x, x_1247.x) * vec2<f32>(-0.081632003f, 0.081632003f)) + vec2<f32>(0.081632003f, 0.163264006f));
        let x_1252 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_1251.x, x_1252.y, x_1251.y, x_1252.w);
        let x_1255 : f32 = u_xlat9.x;
        u_xlat10.y = x_1255;
        let x_1258 : f32 = u_xlat11.y;
        u_xlat10.w = x_1258;
        let x_1260 : vec4<f32> = u_xlat10;
        let x_1261 : vec4<f32> = u_xlat12;
        u_xlat12 = (x_1260 + x_1261);
        let x_1263 : vec2<f32> = u_xlat47;
        let x_1266 : vec2<f32> = ((vec2<f32>(x_1263.y, x_1263.y) * vec2<f32>(-0.081632003f, 0.081632003f)) + vec2<f32>(0.163264006f, 0.081632003f));
        let x_1267 : vec4<f32> = u_xlat13;
        u_xlat13 = vec4<f32>(x_1267.x, x_1266.x, x_1267.z, x_1266.y);
        let x_1269 : vec2<f32> = u_xlat47;
        let x_1272 : vec2<f32> = ((vec2<f32>(x_1269.y, x_1269.y) * vec2<f32>(-0.081632003f, 0.081632003f)) + vec2<f32>(0.081632003f, 0.163264006f));
        let x_1273 : vec4<f32> = u_xlat11;
        u_xlat11 = vec4<f32>(x_1272.x, x_1273.y, x_1272.y, x_1273.w);
        let x_1276 : f32 = u_xlat9.y;
        u_xlat11.y = x_1276;
        let x_1278 : vec4<f32> = u_xlat11;
        let x_1279 : vec4<f32> = u_xlat13;
        u_xlat9 = (x_1278 + x_1279);
        let x_1281 : vec4<f32> = u_xlat10;
        let x_1282 : vec4<f32> = u_xlat12;
        u_xlat10 = (x_1281 / x_1282);
        let x_1284 : vec4<f32> = u_xlat10;
        u_xlat10 = (x_1284 + vec4<f32>(-3.5f, -1.5f, 0.5f, 2.5f));
        let x_1290 : vec4<f32> = u_xlat11;
        let x_1291 : vec4<f32> = u_xlat9;
        u_xlat11 = (x_1290 / x_1291);
        let x_1293 : vec4<f32> = u_xlat11;
        u_xlat11 = (x_1293 + vec4<f32>(-3.5f, -1.5f, 0.5f, 2.5f));
        let x_1295 : vec4<f32> = u_xlat10;
        let x_1298 : vec4<f32> = x_381.x_MainLightShadowmapSize;
        u_xlat10 = (vec4<f32>(x_1295.w, x_1295.x, x_1295.y, x_1295.z) * vec4<f32>(x_1298.x, x_1298.x, x_1298.x, x_1298.x));
        let x_1301 : vec4<f32> = u_xlat11;
        let x_1304 : vec4<f32> = x_381.x_MainLightShadowmapSize;
        u_xlat11 = (vec4<f32>(x_1301.x, x_1301.w, x_1301.y, x_1301.z) * vec4<f32>(x_1304.y, x_1304.y, x_1304.y, x_1304.y));
        let x_1307 : vec4<f32> = u_xlat10;
        let x_1308 : vec3<f32> = vec3<f32>(x_1307.y, x_1307.z, x_1307.w);
        let x_1309 : vec4<f32> = u_xlat13;
        u_xlat13 = vec4<f32>(x_1308.x, x_1309.y, x_1308.y, x_1308.z);
        let x_1312 : f32 = u_xlat11.x;
        u_xlat13.y = x_1312;
        let x_1314 : vec4<f32> = u_xlat3;
        let x_1317 : vec4<f32> = x_381.x_MainLightShadowmapSize;
        let x_1320 : vec4<f32> = u_xlat13;
        u_xlat14 = ((vec4<f32>(x_1314.x, x_1314.y, x_1314.x, x_1314.y) * vec4<f32>(x_1317.x, x_1317.y, x_1317.x, x_1317.y)) + vec4<f32>(x_1320.x, x_1320.y, x_1320.z, x_1320.y));
        let x_1323 : vec4<f32> = u_xlat3;
        let x_1326 : vec4<f32> = x_381.x_MainLightShadowmapSize;
        let x_1329 : vec4<f32> = u_xlat13;
        u_xlat47 = ((vec2<f32>(x_1323.x, x_1323.y) * vec2<f32>(x_1326.x, x_1326.y)) + vec2<f32>(x_1329.w, x_1329.y));
        let x_1333 : f32 = u_xlat13.y;
        u_xlat10.y = x_1333;
        let x_1336 : f32 = u_xlat11.z;
        u_xlat13.y = x_1336;
        let x_1338 : vec4<f32> = u_xlat3;
        let x_1341 : vec4<f32> = x_381.x_MainLightShadowmapSize;
        let x_1344 : vec4<f32> = u_xlat13;
        u_xlat15 = ((vec4<f32>(x_1338.x, x_1338.y, x_1338.x, x_1338.y) * vec4<f32>(x_1341.x, x_1341.y, x_1341.x, x_1341.y)) + vec4<f32>(x_1344.x, x_1344.y, x_1344.z, x_1344.y));
        let x_1347 : vec4<f32> = u_xlat3;
        let x_1350 : vec4<f32> = x_381.x_MainLightShadowmapSize;
        let x_1353 : vec4<f32> = u_xlat13;
        let x_1355 : vec2<f32> = ((vec2<f32>(x_1347.x, x_1347.y) * vec2<f32>(x_1350.x, x_1350.y)) + vec2<f32>(x_1353.w, x_1353.y));
        let x_1356 : vec4<f32> = u_xlat16;
        u_xlat16 = vec4<f32>(x_1355.x, x_1355.y, x_1356.z, x_1356.w);
        let x_1359 : f32 = u_xlat13.y;
        u_xlat10.z = x_1359;
        let x_1362 : vec4<f32> = u_xlat3;
        let x_1365 : vec4<f32> = x_381.x_MainLightShadowmapSize;
        let x_1368 : vec4<f32> = u_xlat10;
        u_xlat17 = ((vec4<f32>(x_1362.x, x_1362.y, x_1362.x, x_1362.y) * vec4<f32>(x_1365.x, x_1365.y, x_1365.x, x_1365.y)) + vec4<f32>(x_1368.x, x_1368.y, x_1368.x, x_1368.z));
        let x_1372 : f32 = u_xlat11.w;
        u_xlat13.y = x_1372;
        let x_1375 : vec4<f32> = u_xlat3;
        let x_1378 : vec4<f32> = x_381.x_MainLightShadowmapSize;
        let x_1381 : vec4<f32> = u_xlat13;
        u_xlat18 = ((vec4<f32>(x_1375.x, x_1375.y, x_1375.x, x_1375.y) * vec4<f32>(x_1378.x, x_1378.y, x_1378.x, x_1378.y)) + vec4<f32>(x_1381.x, x_1381.y, x_1381.z, x_1381.y));
        let x_1385 : vec4<f32> = u_xlat3;
        let x_1388 : vec4<f32> = x_381.x_MainLightShadowmapSize;
        let x_1391 : vec4<f32> = u_xlat13;
        u_xlat32 = ((vec2<f32>(x_1385.x, x_1385.y) * vec2<f32>(x_1388.x, x_1388.y)) + vec2<f32>(x_1391.w, x_1391.y));
        let x_1395 : f32 = u_xlat13.y;
        u_xlat10.w = x_1395;
        let x_1398 : vec4<f32> = u_xlat3;
        let x_1401 : vec4<f32> = x_381.x_MainLightShadowmapSize;
        let x_1404 : vec4<f32> = u_xlat10;
        u_xlat60 = ((vec2<f32>(x_1398.x, x_1398.y) * vec2<f32>(x_1401.x, x_1401.y)) + vec2<f32>(x_1404.x, x_1404.w));
        let x_1407 : vec4<f32> = u_xlat13;
        let x_1408 : vec3<f32> = vec3<f32>(x_1407.x, x_1407.z, x_1407.w);
        let x_1409 : vec4<f32> = u_xlat11;
        u_xlat11 = vec4<f32>(x_1408.x, x_1409.y, x_1408.y, x_1408.z);
        let x_1411 : vec4<f32> = u_xlat3;
        let x_1414 : vec4<f32> = x_381.x_MainLightShadowmapSize;
        let x_1417 : vec4<f32> = u_xlat11;
        u_xlat13 = ((vec4<f32>(x_1411.x, x_1411.y, x_1411.x, x_1411.y) * vec4<f32>(x_1414.x, x_1414.y, x_1414.x, x_1414.y)) + vec4<f32>(x_1417.x, x_1417.y, x_1417.z, x_1417.y));
        let x_1421 : vec4<f32> = u_xlat3;
        let x_1424 : vec4<f32> = x_381.x_MainLightShadowmapSize;
        let x_1427 : vec4<f32> = u_xlat11;
        u_xlat55 = ((vec2<f32>(x_1421.x, x_1421.y) * vec2<f32>(x_1424.x, x_1424.y)) + vec2<f32>(x_1427.w, x_1427.y));
        let x_1431 : f32 = u_xlat10.x;
        u_xlat11.x = x_1431;
        let x_1433 : vec4<f32> = u_xlat3;
        let x_1436 : vec4<f32> = x_381.x_MainLightShadowmapSize;
        let x_1439 : vec4<f32> = u_xlat11;
        let x_1441 : vec2<f32> = ((vec2<f32>(x_1433.x, x_1433.y) * vec2<f32>(x_1436.x, x_1436.y)) + vec2<f32>(x_1439.x, x_1439.y));
        let x_1442 : vec4<f32> = u_xlat3;
        u_xlat3 = vec4<f32>(x_1441.x, x_1441.y, x_1442.z, x_1442.w);
        let x_1445 : vec4<f32> = u_xlat9;
        let x_1447 : vec4<f32> = u_xlat12;
        u_xlat19 = (vec4<f32>(x_1445.x, x_1445.x, x_1445.x, x_1445.x) * x_1447);
        let x_1450 : vec4<f32> = u_xlat9;
        let x_1452 : vec4<f32> = u_xlat12;
        u_xlat20 = (vec4<f32>(x_1450.y, x_1450.y, x_1450.y, x_1450.y) * x_1452);
        let x_1455 : vec4<f32> = u_xlat9;
        let x_1457 : vec4<f32> = u_xlat12;
        u_xlat21 = (vec4<f32>(x_1455.z, x_1455.z, x_1455.z, x_1455.z) * x_1457);
        let x_1459 : vec4<f32> = u_xlat9;
        let x_1461 : vec4<f32> = u_xlat12;
        u_xlat9 = (vec4<f32>(x_1459.w, x_1459.w, x_1459.w, x_1459.w) * x_1461);
        let x_1464 : vec4<f32> = u_xlat14;
        let x_1465 : vec2<f32> = vec2<f32>(x_1464.x, x_1464.y);
        let x_1467 : f32 = u_xlat2.z;
        txVec13 = vec3<f32>(x_1465.x, x_1465.y, x_1467);
        let x_1474 : vec3<f32> = txVec13;
        let x_1476 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1474.xy, x_1474.z);
        u_xlat68 = x_1476;
        let x_1478 : vec4<f32> = u_xlat14;
        let x_1479 : vec2<f32> = vec2<f32>(x_1478.z, x_1478.w);
        let x_1481 : f32 = u_xlat2.z;
        txVec14 = vec3<f32>(x_1479.x, x_1479.y, x_1481);
        let x_1489 : vec3<f32> = txVec14;
        let x_1491 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1489.xy, x_1489.z);
        u_xlat70 = x_1491;
        let x_1492 : f32 = u_xlat70;
        let x_1494 : f32 = u_xlat19.y;
        u_xlat70 = (x_1492 * x_1494);
        let x_1497 : f32 = u_xlat19.x;
        let x_1498 : f32 = u_xlat68;
        let x_1500 : f32 = u_xlat70;
        u_xlat68 = ((x_1497 * x_1498) + x_1500);
        let x_1503 : vec2<f32> = u_xlat47;
        let x_1505 : f32 = u_xlat2.z;
        txVec15 = vec3<f32>(x_1503.x, x_1503.y, x_1505);
        let x_1512 : vec3<f32> = txVec15;
        let x_1514 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1512.xy, x_1512.z);
        u_xlat47.x = x_1514;
        let x_1517 : f32 = u_xlat19.z;
        let x_1519 : f32 = u_xlat47.x;
        let x_1521 : f32 = u_xlat68;
        u_xlat68 = ((x_1517 * x_1519) + x_1521);
        let x_1524 : vec4<f32> = u_xlat17;
        let x_1525 : vec2<f32> = vec2<f32>(x_1524.x, x_1524.y);
        let x_1527 : f32 = u_xlat2.z;
        txVec16 = vec3<f32>(x_1525.x, x_1525.y, x_1527);
        let x_1534 : vec3<f32> = txVec16;
        let x_1536 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1534.xy, x_1534.z);
        u_xlat47.x = x_1536;
        let x_1539 : f32 = u_xlat19.w;
        let x_1541 : f32 = u_xlat47.x;
        let x_1543 : f32 = u_xlat68;
        u_xlat68 = ((x_1539 * x_1541) + x_1543);
        let x_1546 : vec4<f32> = u_xlat15;
        let x_1547 : vec2<f32> = vec2<f32>(x_1546.x, x_1546.y);
        let x_1549 : f32 = u_xlat2.z;
        txVec17 = vec3<f32>(x_1547.x, x_1547.y, x_1549);
        let x_1556 : vec3<f32> = txVec17;
        let x_1558 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1556.xy, x_1556.z);
        u_xlat47.x = x_1558;
        let x_1561 : f32 = u_xlat20.x;
        let x_1563 : f32 = u_xlat47.x;
        let x_1565 : f32 = u_xlat68;
        u_xlat68 = ((x_1561 * x_1563) + x_1565);
        let x_1568 : vec4<f32> = u_xlat15;
        let x_1569 : vec2<f32> = vec2<f32>(x_1568.z, x_1568.w);
        let x_1571 : f32 = u_xlat2.z;
        txVec18 = vec3<f32>(x_1569.x, x_1569.y, x_1571);
        let x_1578 : vec3<f32> = txVec18;
        let x_1580 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1578.xy, x_1578.z);
        u_xlat47.x = x_1580;
        let x_1583 : f32 = u_xlat20.y;
        let x_1585 : f32 = u_xlat47.x;
        let x_1587 : f32 = u_xlat68;
        u_xlat68 = ((x_1583 * x_1585) + x_1587);
        let x_1590 : vec4<f32> = u_xlat16;
        let x_1591 : vec2<f32> = vec2<f32>(x_1590.x, x_1590.y);
        let x_1593 : f32 = u_xlat2.z;
        txVec19 = vec3<f32>(x_1591.x, x_1591.y, x_1593);
        let x_1600 : vec3<f32> = txVec19;
        let x_1602 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1600.xy, x_1600.z);
        u_xlat47.x = x_1602;
        let x_1605 : f32 = u_xlat20.z;
        let x_1607 : f32 = u_xlat47.x;
        let x_1609 : f32 = u_xlat68;
        u_xlat68 = ((x_1605 * x_1607) + x_1609);
        let x_1612 : vec4<f32> = u_xlat17;
        let x_1613 : vec2<f32> = vec2<f32>(x_1612.z, x_1612.w);
        let x_1615 : f32 = u_xlat2.z;
        txVec20 = vec3<f32>(x_1613.x, x_1613.y, x_1615);
        let x_1622 : vec3<f32> = txVec20;
        let x_1624 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1622.xy, x_1622.z);
        u_xlat47.x = x_1624;
        let x_1627 : f32 = u_xlat20.w;
        let x_1629 : f32 = u_xlat47.x;
        let x_1631 : f32 = u_xlat68;
        u_xlat68 = ((x_1627 * x_1629) + x_1631);
        let x_1634 : vec4<f32> = u_xlat18;
        let x_1635 : vec2<f32> = vec2<f32>(x_1634.x, x_1634.y);
        let x_1637 : f32 = u_xlat2.z;
        txVec21 = vec3<f32>(x_1635.x, x_1635.y, x_1637);
        let x_1644 : vec3<f32> = txVec21;
        let x_1646 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1644.xy, x_1644.z);
        u_xlat47.x = x_1646;
        let x_1649 : f32 = u_xlat21.x;
        let x_1651 : f32 = u_xlat47.x;
        let x_1653 : f32 = u_xlat68;
        u_xlat68 = ((x_1649 * x_1651) + x_1653);
        let x_1656 : vec4<f32> = u_xlat18;
        let x_1657 : vec2<f32> = vec2<f32>(x_1656.z, x_1656.w);
        let x_1659 : f32 = u_xlat2.z;
        txVec22 = vec3<f32>(x_1657.x, x_1657.y, x_1659);
        let x_1666 : vec3<f32> = txVec22;
        let x_1668 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1666.xy, x_1666.z);
        u_xlat47.x = x_1668;
        let x_1671 : f32 = u_xlat21.y;
        let x_1673 : f32 = u_xlat47.x;
        let x_1675 : f32 = u_xlat68;
        u_xlat68 = ((x_1671 * x_1673) + x_1675);
        let x_1678 : vec2<f32> = u_xlat32;
        let x_1680 : f32 = u_xlat2.z;
        txVec23 = vec3<f32>(x_1678.x, x_1678.y, x_1680);
        let x_1687 : vec3<f32> = txVec23;
        let x_1689 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1687.xy, x_1687.z);
        u_xlat47.x = x_1689;
        let x_1692 : f32 = u_xlat21.z;
        let x_1694 : f32 = u_xlat47.x;
        let x_1696 : f32 = u_xlat68;
        u_xlat68 = ((x_1692 * x_1694) + x_1696);
        let x_1699 : vec2<f32> = u_xlat60;
        let x_1701 : f32 = u_xlat2.z;
        txVec24 = vec3<f32>(x_1699.x, x_1699.y, x_1701);
        let x_1708 : vec3<f32> = txVec24;
        let x_1710 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1708.xy, x_1708.z);
        u_xlat47.x = x_1710;
        let x_1713 : f32 = u_xlat21.w;
        let x_1715 : f32 = u_xlat47.x;
        let x_1717 : f32 = u_xlat68;
        u_xlat68 = ((x_1713 * x_1715) + x_1717);
        let x_1720 : vec4<f32> = u_xlat13;
        let x_1721 : vec2<f32> = vec2<f32>(x_1720.x, x_1720.y);
        let x_1723 : f32 = u_xlat2.z;
        txVec25 = vec3<f32>(x_1721.x, x_1721.y, x_1723);
        let x_1730 : vec3<f32> = txVec25;
        let x_1732 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1730.xy, x_1730.z);
        u_xlat47.x = x_1732;
        let x_1735 : f32 = u_xlat9.x;
        let x_1737 : f32 = u_xlat47.x;
        let x_1739 : f32 = u_xlat68;
        u_xlat68 = ((x_1735 * x_1737) + x_1739);
        let x_1742 : vec4<f32> = u_xlat13;
        let x_1743 : vec2<f32> = vec2<f32>(x_1742.z, x_1742.w);
        let x_1745 : f32 = u_xlat2.z;
        txVec26 = vec3<f32>(x_1743.x, x_1743.y, x_1745);
        let x_1752 : vec3<f32> = txVec26;
        let x_1754 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1752.xy, x_1752.z);
        u_xlat47.x = x_1754;
        let x_1757 : f32 = u_xlat9.y;
        let x_1759 : f32 = u_xlat47.x;
        let x_1761 : f32 = u_xlat68;
        u_xlat68 = ((x_1757 * x_1759) + x_1761);
        let x_1764 : vec2<f32> = u_xlat55;
        let x_1766 : f32 = u_xlat2.z;
        txVec27 = vec3<f32>(x_1764.x, x_1764.y, x_1766);
        let x_1773 : vec3<f32> = txVec27;
        let x_1775 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1773.xy, x_1773.z);
        u_xlat47.x = x_1775;
        let x_1778 : f32 = u_xlat9.z;
        let x_1780 : f32 = u_xlat47.x;
        let x_1782 : f32 = u_xlat68;
        u_xlat68 = ((x_1778 * x_1780) + x_1782);
        let x_1785 : vec4<f32> = u_xlat3;
        let x_1786 : vec2<f32> = vec2<f32>(x_1785.x, x_1785.y);
        let x_1788 : f32 = u_xlat2.z;
        txVec28 = vec3<f32>(x_1786.x, x_1786.y, x_1788);
        let x_1795 : vec3<f32> = txVec28;
        let x_1797 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1795.xy, x_1795.z);
        u_xlat3.x = x_1797;
        let x_1800 : f32 = u_xlat9.w;
        let x_1802 : f32 = u_xlat3.x;
        let x_1804 : f32 = u_xlat68;
        u_xlat67 = ((x_1800 * x_1802) + x_1804);
      }
    }
  } else {
    let x_1808 : vec4<f32> = u_xlat2;
    let x_1809 : vec2<f32> = vec2<f32>(x_1808.x, x_1808.y);
    let x_1811 : f32 = u_xlat2.z;
    txVec29 = vec3<f32>(x_1809.x, x_1809.y, x_1811);
    let x_1818 : vec3<f32> = txVec29;
    let x_1820 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1818.xy, x_1818.z);
    u_xlat67 = x_1820;
  }
  let x_1822 : f32 = x_381.x_MainLightShadowParams.x;
  u_xlat68 = (-(x_1822) + 1.0f);
  let x_1825 : f32 = u_xlat67;
  let x_1827 : f32 = x_381.x_MainLightShadowParams.x;
  let x_1829 : f32 = u_xlat68;
  u_xlat67 = ((x_1825 * x_1827) + x_1829);
  let x_1833 : f32 = u_xlat2.z;
  u_xlatb3 = (0.0f >= x_1833);
  let x_1837 : f32 = u_xlat2.z;
  u_xlatb25 = (x_1837 >= 1.0f);
  let x_1839 : bool = u_xlatb25;
  let x_1840 : bool = u_xlatb3;
  u_xlatb3 = (x_1839 | x_1840);
  let x_1842 : bool = u_xlatb3;
  let x_1843 : f32 = u_xlat67;
  u_xlat67 = select(x_1843, 1.0f, x_1842);
  let x_1845 : vec3<f32> = u_xlat1;
  let x_1847 : vec4<f32> = x_160.x_MainLightPosition;
  u_xlat1.x = dot(x_1845, -(vec3<f32>(x_1847.x, x_1847.y, x_1847.z)));
  let x_1853 : f32 = u_xlat1.x;
  u_xlat1.x = clamp(x_1853, 0.0f, 1.0f);
  let x_1857 : f32 = u_xlat67;
  let x_1860 : vec4<f32> = x_160.x_MainLightColor;
  u_xlat23 = (vec3<f32>(x_1857, x_1857, x_1857) * vec3<f32>(x_1860.x, x_1860.y, x_1860.z));
  let x_1863 : vec3<f32> = u_xlat23;
  let x_1864 : vec3<f32> = u_xlat1;
  u_xlat1 = (x_1863 * vec3<f32>(x_1864.x, x_1864.x, x_1864.x));
  let x_1867 : vec3<f32> = u_xlat1;
  let x_1868 : vec4<f32> = u_xlat6;
  u_xlat1 = (x_1867 * vec3<f32>(x_1868.x, x_1868.y, x_1868.z));
  let x_1872 : f32 = x_95.unity_LODFade.x;
  u_xlatb67 = (x_1872 < 0.0f);
  let x_1875 : f32 = x_95.unity_LODFade.x;
  u_xlat25 = (x_1875 + 1.0f);
  let x_1877 : bool = u_xlatb67;
  if (x_1877) {
    let x_1881 : f32 = u_xlat25;
    x_1878 = x_1881;
  } else {
    let x_1884 : f32 = x_95.unity_LODFade.x;
    x_1878 = x_1884;
  }
  let x_1885 : f32 = x_1878;
  u_xlat67 = x_1885;
  let x_1886 : f32 = u_xlat67;
  u_xlatb25 = (0.5f >= x_1886);
  let x_1888 : vec3<f32> = u_xlat4;
  let x_1891 : vec4<f32> = x_160.x_ScreenParams;
  u_xlat4 = (abs(x_1888) * vec3<f32>(x_1891.x, x_1891.y, x_1891.x));
  let x_1897 : vec3<f32> = u_xlat4;
  u_xlatu4 = vec3<u32>(x_1897);
  let x_1901 : u32 = u_xlatu4.z;
  u_xlatu47 = (x_1901 * 1025u);
  let x_1905 : u32 = u_xlatu47;
  u_xlatu69 = (x_1905 >> 6u);
  let x_1909 : u32 = u_xlatu69;
  let x_1910 : u32 = u_xlatu47;
  u_xlati47 = bitcast<i32>((x_1909 ^ x_1910));
  let x_1913 : i32 = u_xlati47;
  u_xlatu47 = (bitcast<u32>(x_1913) * 9u);
  let x_1917 : u32 = u_xlatu47;
  u_xlatu69 = (x_1917 >> 11u);
  let x_1920 : u32 = u_xlatu69;
  let x_1921 : u32 = u_xlatu47;
  u_xlati47 = bitcast<i32>((x_1920 ^ x_1921));
  let x_1924 : i32 = u_xlati47;
  u_xlati47 = (x_1924 * 32769i);
  let x_1927 : i32 = u_xlati47;
  let x_1930 : u32 = u_xlatu4.y;
  u_xlati47 = bitcast<i32>((bitcast<u32>(x_1927) ^ x_1930));
  let x_1933 : i32 = u_xlati47;
  u_xlatu47 = (bitcast<u32>(x_1933) * 1025u);
  let x_1936 : u32 = u_xlatu47;
  u_xlatu69 = (x_1936 >> 6u);
  let x_1938 : u32 = u_xlatu69;
  let x_1939 : u32 = u_xlatu47;
  u_xlati47 = bitcast<i32>((x_1938 ^ x_1939));
  let x_1942 : i32 = u_xlati47;
  u_xlatu47 = (bitcast<u32>(x_1942) * 9u);
  let x_1945 : u32 = u_xlatu47;
  u_xlatu69 = (x_1945 >> 11u);
  let x_1947 : u32 = u_xlatu69;
  let x_1948 : u32 = u_xlatu47;
  u_xlati47 = bitcast<i32>((x_1947 ^ x_1948));
  let x_1951 : i32 = u_xlati47;
  u_xlati47 = (x_1951 * 32769i);
  let x_1953 : i32 = u_xlati47;
  let x_1956 : u32 = u_xlatu4.x;
  u_xlati47 = bitcast<i32>((bitcast<u32>(x_1953) ^ x_1956));
  let x_1959 : i32 = u_xlati47;
  u_xlatu47 = (bitcast<u32>(x_1959) * 1025u);
  let x_1962 : u32 = u_xlatu47;
  u_xlatu69 = (x_1962 >> 6u);
  let x_1964 : u32 = u_xlatu69;
  let x_1965 : u32 = u_xlatu47;
  u_xlati47 = bitcast<i32>((x_1964 ^ x_1965));
  let x_1968 : i32 = u_xlati47;
  u_xlatu47 = (bitcast<u32>(x_1968) * 9u);
  let x_1971 : u32 = u_xlatu47;
  u_xlatu69 = (x_1971 >> 11u);
  let x_1973 : u32 = u_xlatu69;
  let x_1974 : u32 = u_xlatu47;
  u_xlati47 = bitcast<i32>((x_1973 ^ x_1974));
  let x_1977 : i32 = u_xlati47;
  u_xlati47 = (x_1977 * 32769i);
  param = 1065353216i;
  let x_1983 : i32 = u_xlati47;
  param_1 = x_1983;
  param_2 = 0i;
  param_3 = 23i;
  let x_1986 : i32 = int_bitfieldInsert_i1_i1_i1_i1_(&(param), &(param_1), &(param_2), &(param_3));
  u_xlat47.x = bitcast<f32>(x_1986);
  let x_1990 : f32 = u_xlat47.x;
  u_xlat47.x = (x_1990 + -1.0f);
  let x_1995 : f32 = u_xlat47.x;
  u_xlat69 = (-(x_1995) + 1.0f);
  let x_1998 : bool = u_xlatb25;
  if (x_1998) {
    let x_2003 : f32 = u_xlat47.x;
    x_1999 = x_2003;
  } else {
    let x_2005 : f32 = u_xlat69;
    x_1999 = x_2005;
  }
  let x_2006 : f32 = x_1999;
  u_xlat25 = x_2006;
  let x_2007 : f32 = u_xlat67;
  let x_2009 : f32 = u_xlat25;
  u_xlat67 = ((x_2007 * 2.0f) + -(x_2009));
  let x_2012 : f32 = u_xlat67;
  let x_2014 : f32 = u_xlat6.w;
  u_xlat25 = (x_2012 * x_2014);
  let x_2017 : f32 = u_xlat25;
  u_xlatb47.x = (x_2017 >= 0.400000006f);
  let x_2022 : bool = u_xlatb47.x;
  let x_2023 : f32 = u_xlat25;
  u_xlat47.x = select(0.0f, x_2023, x_2022);
  let x_2027 : f32 = u_xlat6.w;
  let x_2028 : f32 = u_xlat67;
  u_xlat67 = ((x_2027 * x_2028) + -0.400000006f);
  let x_2032 : f32 = u_xlat25;
  u_xlat69 = dpdxCoarse(x_2032);
  let x_2034 : f32 = u_xlat25;
  u_xlat25 = dpdyCoarse(x_2034);
  let x_2036 : f32 = u_xlat25;
  let x_2038 : f32 = u_xlat69;
  u_xlat25 = (abs(x_2036) + abs(x_2038));
  let x_2041 : f32 = u_xlat25;
  u_xlat25 = max(x_2041, 0.0001f);
  let x_2044 : f32 = u_xlat67;
  let x_2045 : f32 = u_xlat25;
  u_xlat67 = (x_2044 / x_2045);
  let x_2047 : f32 = u_xlat67;
  u_xlat67 = (x_2047 + 0.5f);
  let x_2049 : f32 = u_xlat67;
  u_xlat67 = clamp(x_2049, 0.0f, 1.0f);
  let x_2052 : f32 = x_160.x_AlphaToMaskAvailable;
  u_xlatb25 = !((x_2052 == 0.0f));
  let x_2054 : bool = u_xlatb25;
  if (x_2054) {
    let x_2058 : f32 = u_xlat67;
    x_2055 = x_2058;
  } else {
    let x_2061 : f32 = u_xlat47.x;
    x_2055 = x_2061;
  }
  let x_2062 : f32 = x_2055;
  u_xlat67 = x_2062;
  let x_2063 : f32 = u_xlat67;
  u_xlat47.x = (x_2063 + -0.0001f);
  let x_2068 : f32 = u_xlat47.x;
  u_xlatb47.x = (x_2068 < 0.0f);
  let x_2072 : bool = u_xlatb47.x;
  if (((select(0i, 1i, x_2072) * -1i) != 0i)) {
    discard;
  }
  let x_2080 : vec3<f32> = u_xlat22;
  let x_2081 : vec3<f32> = u_xlat30;
  u_xlat22 = (x_2080 * vec3<f32>(x_2081.y, x_2081.y, x_2081.y));
  let x_2084 : vec3<f32> = u_xlat30;
  let x_2086 : vec4<f32> = vs_INTERP2;
  let x_2089 : vec3<f32> = u_xlat22;
  u_xlat22 = ((vec3<f32>(x_2084.x, x_2084.x, x_2084.x) * vec3<f32>(x_2086.x, x_2086.y, x_2086.z)) + x_2089);
  let x_2091 : vec3<f32> = u_xlat30;
  let x_2093 : vec3<f32> = vs_INTERP1;
  let x_2095 : vec3<f32> = u_xlat22;
  u_xlat22 = ((vec3<f32>(x_2091.z, x_2091.z, x_2091.z) * x_2093) + x_2095);
  let x_2097 : vec3<f32> = u_xlat22;
  let x_2098 : vec3<f32> = u_xlat22;
  u_xlat47.x = dot(x_2097, x_2098);
  let x_2102 : f32 = u_xlat47.x;
  u_xlat47.x = inverseSqrt(x_2102);
  let x_2105 : vec3<f32> = u_xlat22;
  let x_2106 : vec2<f32> = u_xlat47;
  u_xlat22 = (x_2105 * vec3<f32>(x_2106.x, x_2106.x, x_2106.x));
  let x_2116 : vec2<f32> = vs_INTERP5;
  let x_2118 : f32 = x_160.x_GlobalMipBias.x;
  let x_2119 : vec4<f32> = textureSampleBias(unity_Lightmap, samplerunity_Lightmap, x_2116, x_2118);
  u_xlat4 = vec3<f32>(x_2119.x, x_2119.y, x_2119.z);
  let x_2122 : vec4<f32> = x_160.x_ScaledScreenParams;
  let x_2123 : vec2<f32> = vec2<f32>(x_2122.x, x_2122.y);
  u_xlat47 = (vec2<f32>(1.0f, 1.0f) / vec2<f32>(x_2123.x, x_2123.y));
  let x_2128 : vec2<f32> = u_xlat47;
  let x_2129 : vec4<f32> = hlslcc_FragCoord;
  let x_2131 : vec2<f32> = (x_2128 * vec2<f32>(x_2129.x, x_2129.y));
  let x_2132 : vec4<f32> = u_xlat6;
  u_xlat6 = vec4<f32>(x_2131.x, x_2131.y, x_2132.z, x_2132.w);
  let x_2135 : f32 = u_xlat6.y;
  let x_2138 : f32 = x_160.x_ScaleBiasRt.x;
  let x_2141 : f32 = x_160.x_ScaleBiasRt.y;
  u_xlat47.x = ((x_2135 * x_2138) + x_2141);
  let x_2145 : f32 = u_xlat47.x;
  u_xlat6.z = (-(x_2145) + 1.0f);
  let x_2150 : f32 = u_xlat8.x;
  u_xlat8.x = x_2150;
  let x_2153 : f32 = u_xlat8.x;
  u_xlat8.x = clamp(x_2153, 0.0f, 1.0f);
  let x_2156 : f32 = u_xlat67;
  u_xlat67 = x_2156;
  let x_2157 : f32 = u_xlat67;
  u_xlat67 = clamp(x_2157, 0.0f, 1.0f);
  let x_2159 : vec3<f32> = u_xlat7;
  u_xlat7 = (x_2159 * vec3<f32>(0.959999979f, 0.959999979f, 0.959999979f));
  let x_2164 : f32 = u_xlat8.x;
  u_xlat47.x = (-(x_2164) + 1.0f);
  let x_2169 : f32 = u_xlat47.x;
  let x_2171 : f32 = u_xlat47.x;
  u_xlat69 = (x_2169 * x_2171);
  let x_2173 : f32 = u_xlat69;
  u_xlat69 = max(x_2173, 0.0078125f);
  let x_2176 : f32 = u_xlat69;
  let x_2177 : f32 = u_xlat69;
  u_xlat70 = (x_2176 * x_2177);
  let x_2181 : f32 = u_xlat8.x;
  u_xlat71 = (x_2181 + 0.040000021f);
  let x_2184 : f32 = u_xlat71;
  u_xlat71 = min(x_2184, 1.0f);
  let x_2187 : f32 = u_xlat69;
  u_xlat28 = ((x_2187 * 4.0f) + 2.0f);
  let x_2195 : vec4<f32> = u_xlat6;
  let x_2198 : f32 = x_160.x_GlobalMipBias.x;
  let x_2199 : vec4<f32> = textureSampleBias(x_ScreenSpaceOcclusionTexture, sampler_ScreenSpaceOcclusionTexture, vec2<f32>(x_2195.x, x_2195.z), x_2198);
  u_xlat6.x = x_2199.x;
  let x_2204 : f32 = u_xlat6.x;
  u_xlat50 = (x_2204 + -1.0f);
  let x_2207 : f32 = x_160.x_AmbientOcclusionParam.w;
  let x_2208 : f32 = u_xlat50;
  u_xlat50 = ((x_2207 * x_2208) + 1.0f);
  let x_2212 : f32 = u_xlat6.x;
  let x_2214 : f32 = vs_INTERP4.w;
  u_xlat6.x = min(x_2212, x_2214);
  let x_2217 : bool = u_xlatb0;
  if (x_2217) {
    let x_2221 : f32 = x_381.x_MainLightShadowParams.y;
    u_xlatb0 = (x_2221 == 1.0f);
    let x_2223 : bool = u_xlatb0;
    if (x_2223) {
      let x_2226 : vec4<f32> = u_xlat2;
      let x_2229 : vec4<f32> = x_381.x_MainLightShadowOffset0;
      u_xlat8 = (vec4<f32>(x_2226.x, x_2226.y, x_2226.x, x_2226.y) + x_2229);
      let x_2232 : vec4<f32> = u_xlat8;
      let x_2233 : vec2<f32> = vec2<f32>(x_2232.x, x_2232.y);
      let x_2235 : f32 = u_xlat2.z;
      txVec30 = vec3<f32>(x_2233.x, x_2233.y, x_2235);
      let x_2242 : vec3<f32> = txVec30;
      let x_2244 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2242.xy, x_2242.z);
      u_xlat9.x = x_2244;
      let x_2247 : vec4<f32> = u_xlat8;
      let x_2248 : vec2<f32> = vec2<f32>(x_2247.z, x_2247.w);
      let x_2250 : f32 = u_xlat2.z;
      txVec31 = vec3<f32>(x_2248.x, x_2248.y, x_2250);
      let x_2257 : vec3<f32> = txVec31;
      let x_2259 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2257.xy, x_2257.z);
      u_xlat9.y = x_2259;
      let x_2261 : vec4<f32> = u_xlat2;
      let x_2264 : vec4<f32> = x_381.x_MainLightShadowOffset1;
      u_xlat8 = (vec4<f32>(x_2261.x, x_2261.y, x_2261.x, x_2261.y) + x_2264);
      let x_2267 : vec4<f32> = u_xlat8;
      let x_2268 : vec2<f32> = vec2<f32>(x_2267.x, x_2267.y);
      let x_2270 : f32 = u_xlat2.z;
      txVec32 = vec3<f32>(x_2268.x, x_2268.y, x_2270);
      let x_2277 : vec3<f32> = txVec32;
      let x_2279 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2277.xy, x_2277.z);
      u_xlat9.z = x_2279;
      let x_2282 : vec4<f32> = u_xlat8;
      let x_2283 : vec2<f32> = vec2<f32>(x_2282.z, x_2282.w);
      let x_2285 : f32 = u_xlat2.z;
      txVec33 = vec3<f32>(x_2283.x, x_2283.y, x_2285);
      let x_2292 : vec3<f32> = txVec33;
      let x_2294 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2292.xy, x_2292.z);
      u_xlat9.w = x_2294;
      let x_2296 : vec4<f32> = u_xlat9;
      u_xlat0.x = dot(x_2296, vec4<f32>(0.25f, 0.25f, 0.25f, 0.25f));
    } else {
      let x_2302 : f32 = x_381.x_MainLightShadowParams.y;
      u_xlatb72 = (x_2302 == 2.0f);
      let x_2304 : bool = u_xlatb72;
      if (x_2304) {
        let x_2307 : vec4<f32> = u_xlat2;
        let x_2310 : vec4<f32> = x_381.x_MainLightShadowmapSize;
        let x_2313 : vec2<f32> = ((vec2<f32>(x_2307.x, x_2307.y) * vec2<f32>(x_2310.z, x_2310.w)) + vec2<f32>(0.5f, 0.5f));
        let x_2314 : vec4<f32> = u_xlat8;
        u_xlat8 = vec4<f32>(x_2313.x, x_2313.y, x_2314.z, x_2314.w);
        let x_2316 : vec4<f32> = u_xlat8;
        let x_2318 : vec2<f32> = floor(vec2<f32>(x_2316.x, x_2316.y));
        let x_2319 : vec4<f32> = u_xlat8;
        u_xlat8 = vec4<f32>(x_2318.x, x_2318.y, x_2319.z, x_2319.w);
        let x_2322 : vec4<f32> = u_xlat2;
        let x_2325 : vec4<f32> = x_381.x_MainLightShadowmapSize;
        let x_2328 : vec4<f32> = u_xlat8;
        u_xlat52 = ((vec2<f32>(x_2322.x, x_2322.y) * vec2<f32>(x_2325.z, x_2325.w)) + -(vec2<f32>(x_2328.x, x_2328.y)));
        let x_2332 : vec2<f32> = u_xlat52;
        u_xlat9 = (vec4<f32>(x_2332.x, x_2332.x, x_2332.y, x_2332.y) + vec4<f32>(0.5f, 1.0f, 0.5f, 1.0f));
        let x_2335 : vec4<f32> = u_xlat9;
        let x_2337 : vec4<f32> = u_xlat9;
        u_xlat10 = (vec4<f32>(x_2335.x, x_2335.x, x_2335.z, x_2335.z) * vec4<f32>(x_2337.x, x_2337.x, x_2337.z, x_2337.z));
        let x_2340 : vec4<f32> = u_xlat10;
        let x_2342 : vec2<f32> = (vec2<f32>(x_2340.y, x_2340.w) * vec2<f32>(0.079999998f, 0.079999998f));
        let x_2343 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_2342.x, x_2343.y, x_2342.y, x_2343.w);
        let x_2345 : vec4<f32> = u_xlat10;
        let x_2348 : vec2<f32> = u_xlat52;
        let x_2350 : vec2<f32> = ((vec2<f32>(x_2345.x, x_2345.z) * vec2<f32>(0.5f, 0.5f)) + -(x_2348));
        let x_2351 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_2350.x, x_2350.y, x_2351.z, x_2351.w);
        let x_2353 : vec2<f32> = u_xlat52;
        u_xlat54 = (-(x_2353) + vec2<f32>(1.0f, 1.0f));
        let x_2356 : vec2<f32> = u_xlat52;
        let x_2357 : vec2<f32> = min(x_2356, vec2<f32>(0.0f, 0.0f));
        let x_2358 : vec4<f32> = u_xlat11;
        u_xlat11 = vec4<f32>(x_2357.x, x_2357.y, x_2358.z, x_2358.w);
        let x_2360 : vec4<f32> = u_xlat11;
        let x_2363 : vec4<f32> = u_xlat11;
        let x_2366 : vec2<f32> = u_xlat54;
        let x_2367 : vec2<f32> = ((-(vec2<f32>(x_2360.x, x_2360.y)) * vec2<f32>(x_2363.x, x_2363.y)) + x_2366);
        let x_2368 : vec4<f32> = u_xlat11;
        u_xlat11 = vec4<f32>(x_2367.x, x_2367.y, x_2368.z, x_2368.w);
        let x_2370 : vec2<f32> = u_xlat52;
        u_xlat52 = max(x_2370, vec2<f32>(0.0f, 0.0f));
        let x_2372 : vec2<f32> = u_xlat52;
        let x_2374 : vec2<f32> = u_xlat52;
        let x_2376 : vec4<f32> = u_xlat9;
        u_xlat52 = ((-(x_2372) * x_2374) + vec2<f32>(x_2376.y, x_2376.w));
        let x_2379 : vec4<f32> = u_xlat11;
        let x_2381 : vec2<f32> = (vec2<f32>(x_2379.x, x_2379.y) + vec2<f32>(1.0f, 1.0f));
        let x_2382 : vec4<f32> = u_xlat11;
        u_xlat11 = vec4<f32>(x_2381.x, x_2381.y, x_2382.z, x_2382.w);
        let x_2384 : vec2<f32> = u_xlat52;
        u_xlat52 = (x_2384 + vec2<f32>(1.0f, 1.0f));
        let x_2386 : vec4<f32> = u_xlat10;
        let x_2388 : vec2<f32> = (vec2<f32>(x_2386.x, x_2386.y) * vec2<f32>(0.159999996f, 0.159999996f));
        let x_2389 : vec4<f32> = u_xlat12;
        u_xlat12 = vec4<f32>(x_2388.x, x_2388.y, x_2389.z, x_2389.w);
        let x_2391 : vec2<f32> = u_xlat54;
        let x_2392 : vec2<f32> = (x_2391 * vec2<f32>(0.159999996f, 0.159999996f));
        let x_2393 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_2392.x, x_2392.y, x_2393.z, x_2393.w);
        let x_2395 : vec4<f32> = u_xlat11;
        let x_2397 : vec2<f32> = (vec2<f32>(x_2395.x, x_2395.y) * vec2<f32>(0.159999996f, 0.159999996f));
        let x_2398 : vec4<f32> = u_xlat11;
        u_xlat11 = vec4<f32>(x_2397.x, x_2397.y, x_2398.z, x_2398.w);
        let x_2400 : vec2<f32> = u_xlat52;
        let x_2401 : vec2<f32> = (x_2400 * vec2<f32>(0.159999996f, 0.159999996f));
        let x_2402 : vec4<f32> = u_xlat13;
        u_xlat13 = vec4<f32>(x_2401.x, x_2401.y, x_2402.z, x_2402.w);
        let x_2404 : vec4<f32> = u_xlat9;
        u_xlat52 = (vec2<f32>(x_2404.y, x_2404.w) * vec2<f32>(0.159999996f, 0.159999996f));
        let x_2408 : f32 = u_xlat11.x;
        u_xlat12.z = x_2408;
        let x_2411 : f32 = u_xlat52.x;
        u_xlat12.w = x_2411;
        let x_2414 : f32 = u_xlat13.x;
        u_xlat10.z = x_2414;
        let x_2417 : f32 = u_xlat9.x;
        u_xlat10.w = x_2417;
        let x_2419 : vec4<f32> = u_xlat10;
        let x_2421 : vec4<f32> = u_xlat12;
        u_xlat14 = (vec4<f32>(x_2419.z, x_2419.w, x_2419.x, x_2419.z) + vec4<f32>(x_2421.z, x_2421.w, x_2421.x, x_2421.z));
        let x_2425 : f32 = u_xlat12.y;
        u_xlat11.z = x_2425;
        let x_2428 : f32 = u_xlat52.y;
        u_xlat11.w = x_2428;
        let x_2431 : f32 = u_xlat10.y;
        u_xlat13.z = x_2431;
        let x_2434 : f32 = u_xlat9.z;
        u_xlat13.w = x_2434;
        let x_2436 : vec4<f32> = u_xlat11;
        let x_2438 : vec4<f32> = u_xlat13;
        let x_2440 : vec3<f32> = (vec3<f32>(x_2436.z, x_2436.y, x_2436.w) + vec3<f32>(x_2438.z, x_2438.y, x_2438.w));
        let x_2441 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_2440.x, x_2440.y, x_2440.z, x_2441.w);
        let x_2443 : vec4<f32> = u_xlat10;
        let x_2445 : vec4<f32> = u_xlat14;
        let x_2447 : vec3<f32> = (vec3<f32>(x_2443.x, x_2443.z, x_2443.w) / vec3<f32>(x_2445.z, x_2445.w, x_2445.y));
        let x_2448 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_2447.x, x_2447.y, x_2447.z, x_2448.w);
        let x_2450 : vec4<f32> = u_xlat10;
        let x_2452 : vec3<f32> = (vec3<f32>(x_2450.x, x_2450.y, x_2450.z) + vec3<f32>(-2.5f, -0.5f, 1.5f));
        let x_2453 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_2452.x, x_2452.y, x_2452.z, x_2453.w);
        let x_2455 : vec4<f32> = u_xlat13;
        let x_2457 : vec4<f32> = u_xlat9;
        let x_2459 : vec3<f32> = (vec3<f32>(x_2455.z, x_2455.y, x_2455.w) / vec3<f32>(x_2457.x, x_2457.y, x_2457.z));
        let x_2460 : vec4<f32> = u_xlat11;
        u_xlat11 = vec4<f32>(x_2459.x, x_2459.y, x_2459.z, x_2460.w);
        let x_2462 : vec4<f32> = u_xlat11;
        let x_2464 : vec3<f32> = (vec3<f32>(x_2462.x, x_2462.y, x_2462.z) + vec3<f32>(-2.5f, -0.5f, 1.5f));
        let x_2465 : vec4<f32> = u_xlat11;
        u_xlat11 = vec4<f32>(x_2464.x, x_2464.y, x_2464.z, x_2465.w);
        let x_2467 : vec4<f32> = u_xlat10;
        let x_2470 : vec4<f32> = x_381.x_MainLightShadowmapSize;
        let x_2472 : vec3<f32> = (vec3<f32>(x_2467.y, x_2467.x, x_2467.z) * vec3<f32>(x_2470.x, x_2470.x, x_2470.x));
        let x_2473 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_2472.x, x_2472.y, x_2472.z, x_2473.w);
        let x_2475 : vec4<f32> = u_xlat11;
        let x_2478 : vec4<f32> = x_381.x_MainLightShadowmapSize;
        let x_2480 : vec3<f32> = (vec3<f32>(x_2475.x, x_2475.y, x_2475.z) * vec3<f32>(x_2478.y, x_2478.y, x_2478.y));
        let x_2481 : vec4<f32> = u_xlat11;
        u_xlat11 = vec4<f32>(x_2480.x, x_2480.y, x_2480.z, x_2481.w);
        let x_2484 : f32 = u_xlat11.x;
        u_xlat10.w = x_2484;
        let x_2486 : vec4<f32> = u_xlat8;
        let x_2489 : vec4<f32> = x_381.x_MainLightShadowmapSize;
        let x_2492 : vec4<f32> = u_xlat10;
        u_xlat12 = ((vec4<f32>(x_2486.x, x_2486.y, x_2486.x, x_2486.y) * vec4<f32>(x_2489.x, x_2489.y, x_2489.x, x_2489.y)) + vec4<f32>(x_2492.y, x_2492.w, x_2492.x, x_2492.w));
        let x_2495 : vec4<f32> = u_xlat8;
        let x_2498 : vec4<f32> = x_381.x_MainLightShadowmapSize;
        let x_2501 : vec4<f32> = u_xlat10;
        u_xlat52 = ((vec2<f32>(x_2495.x, x_2495.y) * vec2<f32>(x_2498.x, x_2498.y)) + vec2<f32>(x_2501.z, x_2501.w));
        let x_2505 : f32 = u_xlat10.y;
        u_xlat11.w = x_2505;
        let x_2507 : vec4<f32> = u_xlat11;
        let x_2508 : vec2<f32> = vec2<f32>(x_2507.y, x_2507.z);
        let x_2509 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_2509.x, x_2508.x, x_2509.z, x_2508.y);
        let x_2511 : vec4<f32> = u_xlat8;
        let x_2514 : vec4<f32> = x_381.x_MainLightShadowmapSize;
        let x_2517 : vec4<f32> = u_xlat10;
        u_xlat13 = ((vec4<f32>(x_2511.x, x_2511.y, x_2511.x, x_2511.y) * vec4<f32>(x_2514.x, x_2514.y, x_2514.x, x_2514.y)) + vec4<f32>(x_2517.x, x_2517.y, x_2517.z, x_2517.y));
        let x_2520 : vec4<f32> = u_xlat8;
        let x_2523 : vec4<f32> = x_381.x_MainLightShadowmapSize;
        let x_2526 : vec4<f32> = u_xlat11;
        u_xlat11 = ((vec4<f32>(x_2520.x, x_2520.y, x_2520.x, x_2520.y) * vec4<f32>(x_2523.x, x_2523.y, x_2523.x, x_2523.y)) + vec4<f32>(x_2526.w, x_2526.y, x_2526.w, x_2526.z));
        let x_2529 : vec4<f32> = u_xlat8;
        let x_2532 : vec4<f32> = x_381.x_MainLightShadowmapSize;
        let x_2535 : vec4<f32> = u_xlat10;
        u_xlat10 = ((vec4<f32>(x_2529.x, x_2529.y, x_2529.x, x_2529.y) * vec4<f32>(x_2532.x, x_2532.y, x_2532.x, x_2532.y)) + vec4<f32>(x_2535.x, x_2535.w, x_2535.z, x_2535.w));
        let x_2538 : vec4<f32> = u_xlat9;
        let x_2540 : vec4<f32> = u_xlat14;
        u_xlat15 = (vec4<f32>(x_2538.x, x_2538.x, x_2538.x, x_2538.y) * vec4<f32>(x_2540.z, x_2540.w, x_2540.y, x_2540.z));
        let x_2543 : vec4<f32> = u_xlat9;
        let x_2545 : vec4<f32> = u_xlat14;
        u_xlat16 = (vec4<f32>(x_2543.y, x_2543.y, x_2543.z, x_2543.z) * x_2545);
        let x_2549 : f32 = u_xlat9.z;
        let x_2551 : f32 = u_xlat14.y;
        u_xlat72 = (x_2549 * x_2551);
        let x_2554 : vec4<f32> = u_xlat12;
        let x_2555 : vec2<f32> = vec2<f32>(x_2554.x, x_2554.y);
        let x_2557 : f32 = u_xlat2.z;
        txVec34 = vec3<f32>(x_2555.x, x_2555.y, x_2557);
        let x_2565 : vec3<f32> = txVec34;
        let x_2567 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2565.xy, x_2565.z);
        u_xlat73 = x_2567;
        let x_2569 : vec4<f32> = u_xlat12;
        let x_2570 : vec2<f32> = vec2<f32>(x_2569.z, x_2569.w);
        let x_2572 : f32 = u_xlat2.z;
        txVec35 = vec3<f32>(x_2570.x, x_2570.y, x_2572);
        let x_2579 : vec3<f32> = txVec35;
        let x_2581 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2579.xy, x_2579.z);
        u_xlat8.x = x_2581;
        let x_2584 : f32 = u_xlat8.x;
        let x_2586 : f32 = u_xlat15.y;
        u_xlat8.x = (x_2584 * x_2586);
        let x_2590 : f32 = u_xlat15.x;
        let x_2591 : f32 = u_xlat73;
        let x_2594 : f32 = u_xlat8.x;
        u_xlat73 = ((x_2590 * x_2591) + x_2594);
        let x_2597 : vec2<f32> = u_xlat52;
        let x_2599 : f32 = u_xlat2.z;
        txVec36 = vec3<f32>(x_2597.x, x_2597.y, x_2599);
        let x_2606 : vec3<f32> = txVec36;
        let x_2608 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2606.xy, x_2606.z);
        u_xlat8.x = x_2608;
        let x_2611 : f32 = u_xlat15.z;
        let x_2613 : f32 = u_xlat8.x;
        let x_2615 : f32 = u_xlat73;
        u_xlat73 = ((x_2611 * x_2613) + x_2615);
        let x_2618 : vec4<f32> = u_xlat11;
        let x_2619 : vec2<f32> = vec2<f32>(x_2618.x, x_2618.y);
        let x_2621 : f32 = u_xlat2.z;
        txVec37 = vec3<f32>(x_2619.x, x_2619.y, x_2621);
        let x_2628 : vec3<f32> = txVec37;
        let x_2630 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2628.xy, x_2628.z);
        u_xlat8.x = x_2630;
        let x_2633 : f32 = u_xlat15.w;
        let x_2635 : f32 = u_xlat8.x;
        let x_2637 : f32 = u_xlat73;
        u_xlat73 = ((x_2633 * x_2635) + x_2637);
        let x_2640 : vec4<f32> = u_xlat13;
        let x_2641 : vec2<f32> = vec2<f32>(x_2640.x, x_2640.y);
        let x_2643 : f32 = u_xlat2.z;
        txVec38 = vec3<f32>(x_2641.x, x_2641.y, x_2643);
        let x_2650 : vec3<f32> = txVec38;
        let x_2652 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2650.xy, x_2650.z);
        u_xlat8.x = x_2652;
        let x_2655 : f32 = u_xlat16.x;
        let x_2657 : f32 = u_xlat8.x;
        let x_2659 : f32 = u_xlat73;
        u_xlat73 = ((x_2655 * x_2657) + x_2659);
        let x_2662 : vec4<f32> = u_xlat13;
        let x_2663 : vec2<f32> = vec2<f32>(x_2662.z, x_2662.w);
        let x_2665 : f32 = u_xlat2.z;
        txVec39 = vec3<f32>(x_2663.x, x_2663.y, x_2665);
        let x_2672 : vec3<f32> = txVec39;
        let x_2674 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2672.xy, x_2672.z);
        u_xlat8.x = x_2674;
        let x_2677 : f32 = u_xlat16.y;
        let x_2679 : f32 = u_xlat8.x;
        let x_2681 : f32 = u_xlat73;
        u_xlat73 = ((x_2677 * x_2679) + x_2681);
        let x_2684 : vec4<f32> = u_xlat11;
        let x_2685 : vec2<f32> = vec2<f32>(x_2684.z, x_2684.w);
        let x_2687 : f32 = u_xlat2.z;
        txVec40 = vec3<f32>(x_2685.x, x_2685.y, x_2687);
        let x_2694 : vec3<f32> = txVec40;
        let x_2696 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2694.xy, x_2694.z);
        u_xlat8.x = x_2696;
        let x_2699 : f32 = u_xlat16.z;
        let x_2701 : f32 = u_xlat8.x;
        let x_2703 : f32 = u_xlat73;
        u_xlat73 = ((x_2699 * x_2701) + x_2703);
        let x_2706 : vec4<f32> = u_xlat10;
        let x_2707 : vec2<f32> = vec2<f32>(x_2706.x, x_2706.y);
        let x_2709 : f32 = u_xlat2.z;
        txVec41 = vec3<f32>(x_2707.x, x_2707.y, x_2709);
        let x_2716 : vec3<f32> = txVec41;
        let x_2718 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2716.xy, x_2716.z);
        u_xlat8.x = x_2718;
        let x_2721 : f32 = u_xlat16.w;
        let x_2723 : f32 = u_xlat8.x;
        let x_2725 : f32 = u_xlat73;
        u_xlat73 = ((x_2721 * x_2723) + x_2725);
        let x_2728 : vec4<f32> = u_xlat10;
        let x_2729 : vec2<f32> = vec2<f32>(x_2728.z, x_2728.w);
        let x_2731 : f32 = u_xlat2.z;
        txVec42 = vec3<f32>(x_2729.x, x_2729.y, x_2731);
        let x_2738 : vec3<f32> = txVec42;
        let x_2740 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2738.xy, x_2738.z);
        u_xlat8.x = x_2740;
        let x_2742 : f32 = u_xlat72;
        let x_2744 : f32 = u_xlat8.x;
        let x_2746 : f32 = u_xlat73;
        u_xlat0.x = ((x_2742 * x_2744) + x_2746);
      } else {
        let x_2750 : vec4<f32> = u_xlat2;
        let x_2753 : vec4<f32> = x_381.x_MainLightShadowmapSize;
        let x_2756 : vec2<f32> = ((vec2<f32>(x_2750.x, x_2750.y) * vec2<f32>(x_2753.z, x_2753.w)) + vec2<f32>(0.5f, 0.5f));
        let x_2757 : vec4<f32> = u_xlat8;
        u_xlat8 = vec4<f32>(x_2756.x, x_2756.y, x_2757.z, x_2757.w);
        let x_2759 : vec4<f32> = u_xlat8;
        let x_2761 : vec2<f32> = floor(vec2<f32>(x_2759.x, x_2759.y));
        let x_2762 : vec4<f32> = u_xlat8;
        u_xlat8 = vec4<f32>(x_2761.x, x_2761.y, x_2762.z, x_2762.w);
        let x_2764 : vec4<f32> = u_xlat2;
        let x_2767 : vec4<f32> = x_381.x_MainLightShadowmapSize;
        let x_2770 : vec4<f32> = u_xlat8;
        u_xlat52 = ((vec2<f32>(x_2764.x, x_2764.y) * vec2<f32>(x_2767.z, x_2767.w)) + -(vec2<f32>(x_2770.x, x_2770.y)));
        let x_2774 : vec2<f32> = u_xlat52;
        u_xlat9 = (vec4<f32>(x_2774.x, x_2774.x, x_2774.y, x_2774.y) + vec4<f32>(0.5f, 1.0f, 0.5f, 1.0f));
        let x_2777 : vec4<f32> = u_xlat9;
        let x_2779 : vec4<f32> = u_xlat9;
        u_xlat10 = (vec4<f32>(x_2777.x, x_2777.x, x_2777.z, x_2777.z) * vec4<f32>(x_2779.x, x_2779.x, x_2779.z, x_2779.z));
        let x_2782 : vec4<f32> = u_xlat10;
        let x_2784 : vec2<f32> = (vec2<f32>(x_2782.y, x_2782.w) * vec2<f32>(0.040816002f, 0.040816002f));
        let x_2785 : vec4<f32> = u_xlat11;
        u_xlat11 = vec4<f32>(x_2785.x, x_2784.x, x_2785.z, x_2784.y);
        let x_2787 : vec4<f32> = u_xlat10;
        let x_2790 : vec2<f32> = u_xlat52;
        let x_2792 : vec2<f32> = ((vec2<f32>(x_2787.x, x_2787.z) * vec2<f32>(0.5f, 0.5f)) + -(x_2790));
        let x_2793 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_2792.x, x_2793.y, x_2792.y, x_2793.w);
        let x_2795 : vec2<f32> = u_xlat52;
        let x_2797 : vec2<f32> = (-(x_2795) + vec2<f32>(1.0f, 1.0f));
        let x_2798 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_2797.x, x_2797.y, x_2798.z, x_2798.w);
        let x_2800 : vec2<f32> = u_xlat52;
        u_xlat54 = min(x_2800, vec2<f32>(0.0f, 0.0f));
        let x_2802 : vec2<f32> = u_xlat54;
        let x_2804 : vec2<f32> = u_xlat54;
        let x_2806 : vec4<f32> = u_xlat10;
        let x_2808 : vec2<f32> = ((-(x_2802) * x_2804) + vec2<f32>(x_2806.x, x_2806.y));
        let x_2809 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_2808.x, x_2808.y, x_2809.z, x_2809.w);
        let x_2811 : vec2<f32> = u_xlat52;
        u_xlat54 = max(x_2811, vec2<f32>(0.0f, 0.0f));
        let x_2813 : vec2<f32> = u_xlat54;
        let x_2815 : vec2<f32> = u_xlat54;
        let x_2817 : vec4<f32> = u_xlat9;
        let x_2819 : vec2<f32> = ((-(x_2813) * x_2815) + vec2<f32>(x_2817.y, x_2817.w));
        let x_2820 : vec3<f32> = u_xlat31;
        u_xlat31 = vec3<f32>(x_2819.x, x_2820.y, x_2819.y);
        let x_2822 : vec4<f32> = u_xlat10;
        let x_2824 : vec2<f32> = (vec2<f32>(x_2822.x, x_2822.y) + vec2<f32>(2.0f, 2.0f));
        let x_2825 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_2824.x, x_2824.y, x_2825.z, x_2825.w);
        let x_2827 : vec3<f32> = u_xlat31;
        let x_2829 : vec2<f32> = (vec2<f32>(x_2827.x, x_2827.z) + vec2<f32>(2.0f, 2.0f));
        let x_2830 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_2830.x, x_2829.x, x_2830.z, x_2829.y);
        let x_2833 : f32 = u_xlat9.y;
        u_xlat12.z = (x_2833 * 0.081632003f);
        let x_2836 : vec4<f32> = u_xlat9;
        let x_2838 : vec3<f32> = (vec3<f32>(x_2836.z, x_2836.x, x_2836.w) * vec3<f32>(0.081632003f, 0.081632003f, 0.081632003f));
        let x_2839 : vec4<f32> = u_xlat13;
        u_xlat13 = vec4<f32>(x_2838.x, x_2838.y, x_2838.z, x_2839.w);
        let x_2841 : vec4<f32> = u_xlat10;
        let x_2843 : vec2<f32> = (vec2<f32>(x_2841.x, x_2841.y) * vec2<f32>(0.081632003f, 0.081632003f));
        let x_2844 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_2843.x, x_2843.y, x_2844.z, x_2844.w);
        let x_2847 : f32 = u_xlat13.y;
        u_xlat12.x = x_2847;
        let x_2849 : vec2<f32> = u_xlat52;
        let x_2852 : vec2<f32> = ((vec2<f32>(x_2849.x, x_2849.x) * vec2<f32>(-0.081632003f, 0.081632003f)) + vec2<f32>(0.163264006f, 0.081632003f));
        let x_2853 : vec4<f32> = u_xlat12;
        u_xlat12 = vec4<f32>(x_2853.x, x_2852.x, x_2853.z, x_2852.y);
        let x_2855 : vec2<f32> = u_xlat52;
        let x_2858 : vec2<f32> = ((vec2<f32>(x_2855.x, x_2855.x) * vec2<f32>(-0.081632003f, 0.081632003f)) + vec2<f32>(0.081632003f, 0.163264006f));
        let x_2859 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_2858.x, x_2859.y, x_2858.y, x_2859.w);
        let x_2862 : f32 = u_xlat9.x;
        u_xlat10.y = x_2862;
        let x_2865 : f32 = u_xlat11.y;
        u_xlat10.w = x_2865;
        let x_2867 : vec4<f32> = u_xlat10;
        let x_2868 : vec4<f32> = u_xlat12;
        u_xlat12 = (x_2867 + x_2868);
        let x_2870 : vec2<f32> = u_xlat52;
        let x_2873 : vec2<f32> = ((vec2<f32>(x_2870.y, x_2870.y) * vec2<f32>(-0.081632003f, 0.081632003f)) + vec2<f32>(0.163264006f, 0.081632003f));
        let x_2874 : vec4<f32> = u_xlat13;
        u_xlat13 = vec4<f32>(x_2874.x, x_2873.x, x_2874.z, x_2873.y);
        let x_2876 : vec2<f32> = u_xlat52;
        let x_2879 : vec2<f32> = ((vec2<f32>(x_2876.y, x_2876.y) * vec2<f32>(-0.081632003f, 0.081632003f)) + vec2<f32>(0.081632003f, 0.163264006f));
        let x_2880 : vec4<f32> = u_xlat11;
        u_xlat11 = vec4<f32>(x_2879.x, x_2880.y, x_2879.y, x_2880.w);
        let x_2883 : f32 = u_xlat9.y;
        u_xlat11.y = x_2883;
        let x_2885 : vec4<f32> = u_xlat11;
        let x_2886 : vec4<f32> = u_xlat13;
        u_xlat9 = (x_2885 + x_2886);
        let x_2888 : vec4<f32> = u_xlat10;
        let x_2889 : vec4<f32> = u_xlat12;
        u_xlat10 = (x_2888 / x_2889);
        let x_2891 : vec4<f32> = u_xlat10;
        u_xlat10 = (x_2891 + vec4<f32>(-3.5f, -1.5f, 0.5f, 2.5f));
        let x_2893 : vec4<f32> = u_xlat11;
        let x_2894 : vec4<f32> = u_xlat9;
        u_xlat11 = (x_2893 / x_2894);
        let x_2896 : vec4<f32> = u_xlat11;
        u_xlat11 = (x_2896 + vec4<f32>(-3.5f, -1.5f, 0.5f, 2.5f));
        let x_2898 : vec4<f32> = u_xlat10;
        let x_2901 : vec4<f32> = x_381.x_MainLightShadowmapSize;
        u_xlat10 = (vec4<f32>(x_2898.w, x_2898.x, x_2898.y, x_2898.z) * vec4<f32>(x_2901.x, x_2901.x, x_2901.x, x_2901.x));
        let x_2904 : vec4<f32> = u_xlat11;
        let x_2907 : vec4<f32> = x_381.x_MainLightShadowmapSize;
        u_xlat11 = (vec4<f32>(x_2904.x, x_2904.w, x_2904.y, x_2904.z) * vec4<f32>(x_2907.y, x_2907.y, x_2907.y, x_2907.y));
        let x_2910 : vec4<f32> = u_xlat10;
        let x_2911 : vec3<f32> = vec3<f32>(x_2910.y, x_2910.z, x_2910.w);
        let x_2912 : vec4<f32> = u_xlat13;
        u_xlat13 = vec4<f32>(x_2911.x, x_2912.y, x_2911.y, x_2911.z);
        let x_2915 : f32 = u_xlat11.x;
        u_xlat13.y = x_2915;
        let x_2917 : vec4<f32> = u_xlat8;
        let x_2920 : vec4<f32> = x_381.x_MainLightShadowmapSize;
        let x_2923 : vec4<f32> = u_xlat13;
        u_xlat14 = ((vec4<f32>(x_2917.x, x_2917.y, x_2917.x, x_2917.y) * vec4<f32>(x_2920.x, x_2920.y, x_2920.x, x_2920.y)) + vec4<f32>(x_2923.x, x_2923.y, x_2923.z, x_2923.y));
        let x_2926 : vec4<f32> = u_xlat8;
        let x_2929 : vec4<f32> = x_381.x_MainLightShadowmapSize;
        let x_2932 : vec4<f32> = u_xlat13;
        u_xlat52 = ((vec2<f32>(x_2926.x, x_2926.y) * vec2<f32>(x_2929.x, x_2929.y)) + vec2<f32>(x_2932.w, x_2932.y));
        let x_2936 : f32 = u_xlat13.y;
        u_xlat10.y = x_2936;
        let x_2939 : f32 = u_xlat11.z;
        u_xlat13.y = x_2939;
        let x_2941 : vec4<f32> = u_xlat8;
        let x_2944 : vec4<f32> = x_381.x_MainLightShadowmapSize;
        let x_2947 : vec4<f32> = u_xlat13;
        u_xlat15 = ((vec4<f32>(x_2941.x, x_2941.y, x_2941.x, x_2941.y) * vec4<f32>(x_2944.x, x_2944.y, x_2944.x, x_2944.y)) + vec4<f32>(x_2947.x, x_2947.y, x_2947.z, x_2947.y));
        let x_2950 : vec4<f32> = u_xlat8;
        let x_2953 : vec4<f32> = x_381.x_MainLightShadowmapSize;
        let x_2956 : vec4<f32> = u_xlat13;
        let x_2958 : vec2<f32> = ((vec2<f32>(x_2950.x, x_2950.y) * vec2<f32>(x_2953.x, x_2953.y)) + vec2<f32>(x_2956.w, x_2956.y));
        let x_2959 : vec4<f32> = u_xlat16;
        u_xlat16 = vec4<f32>(x_2958.x, x_2958.y, x_2959.z, x_2959.w);
        let x_2962 : f32 = u_xlat13.y;
        u_xlat10.z = x_2962;
        let x_2964 : vec4<f32> = u_xlat8;
        let x_2967 : vec4<f32> = x_381.x_MainLightShadowmapSize;
        let x_2970 : vec4<f32> = u_xlat10;
        u_xlat17 = ((vec4<f32>(x_2964.x, x_2964.y, x_2964.x, x_2964.y) * vec4<f32>(x_2967.x, x_2967.y, x_2967.x, x_2967.y)) + vec4<f32>(x_2970.x, x_2970.y, x_2970.x, x_2970.z));
        let x_2974 : f32 = u_xlat11.w;
        u_xlat13.y = x_2974;
        let x_2976 : vec4<f32> = u_xlat8;
        let x_2979 : vec4<f32> = x_381.x_MainLightShadowmapSize;
        let x_2982 : vec4<f32> = u_xlat13;
        u_xlat18 = ((vec4<f32>(x_2976.x, x_2976.y, x_2976.x, x_2976.y) * vec4<f32>(x_2979.x, x_2979.y, x_2979.x, x_2979.y)) + vec4<f32>(x_2982.x, x_2982.y, x_2982.z, x_2982.y));
        let x_2985 : vec4<f32> = u_xlat8;
        let x_2988 : vec4<f32> = x_381.x_MainLightShadowmapSize;
        let x_2991 : vec4<f32> = u_xlat13;
        u_xlat32 = ((vec2<f32>(x_2985.x, x_2985.y) * vec2<f32>(x_2988.x, x_2988.y)) + vec2<f32>(x_2991.w, x_2991.y));
        let x_2995 : f32 = u_xlat13.y;
        u_xlat10.w = x_2995;
        let x_2997 : vec4<f32> = u_xlat8;
        let x_3000 : vec4<f32> = x_381.x_MainLightShadowmapSize;
        let x_3003 : vec4<f32> = u_xlat10;
        u_xlat60 = ((vec2<f32>(x_2997.x, x_2997.y) * vec2<f32>(x_3000.x, x_3000.y)) + vec2<f32>(x_3003.x, x_3003.w));
        let x_3006 : vec4<f32> = u_xlat13;
        let x_3007 : vec3<f32> = vec3<f32>(x_3006.x, x_3006.z, x_3006.w);
        let x_3008 : vec4<f32> = u_xlat11;
        u_xlat11 = vec4<f32>(x_3007.x, x_3008.y, x_3007.y, x_3007.z);
        let x_3010 : vec4<f32> = u_xlat8;
        let x_3013 : vec4<f32> = x_381.x_MainLightShadowmapSize;
        let x_3016 : vec4<f32> = u_xlat11;
        u_xlat13 = ((vec4<f32>(x_3010.x, x_3010.y, x_3010.x, x_3010.y) * vec4<f32>(x_3013.x, x_3013.y, x_3013.x, x_3013.y)) + vec4<f32>(x_3016.x, x_3016.y, x_3016.z, x_3016.y));
        let x_3019 : vec4<f32> = u_xlat8;
        let x_3022 : vec4<f32> = x_381.x_MainLightShadowmapSize;
        let x_3025 : vec4<f32> = u_xlat11;
        u_xlat55 = ((vec2<f32>(x_3019.x, x_3019.y) * vec2<f32>(x_3022.x, x_3022.y)) + vec2<f32>(x_3025.w, x_3025.y));
        let x_3029 : f32 = u_xlat10.x;
        u_xlat11.x = x_3029;
        let x_3031 : vec4<f32> = u_xlat8;
        let x_3034 : vec4<f32> = x_381.x_MainLightShadowmapSize;
        let x_3037 : vec4<f32> = u_xlat11;
        let x_3039 : vec2<f32> = ((vec2<f32>(x_3031.x, x_3031.y) * vec2<f32>(x_3034.x, x_3034.y)) + vec2<f32>(x_3037.x, x_3037.y));
        let x_3040 : vec4<f32> = u_xlat8;
        u_xlat8 = vec4<f32>(x_3039.x, x_3039.y, x_3040.z, x_3040.w);
        let x_3042 : vec4<f32> = u_xlat9;
        let x_3044 : vec4<f32> = u_xlat12;
        u_xlat19 = (vec4<f32>(x_3042.x, x_3042.x, x_3042.x, x_3042.x) * x_3044);
        let x_3046 : vec4<f32> = u_xlat9;
        let x_3048 : vec4<f32> = u_xlat12;
        u_xlat20 = (vec4<f32>(x_3046.y, x_3046.y, x_3046.y, x_3046.y) * x_3048);
        let x_3050 : vec4<f32> = u_xlat9;
        let x_3052 : vec4<f32> = u_xlat12;
        u_xlat21 = (vec4<f32>(x_3050.z, x_3050.z, x_3050.z, x_3050.z) * x_3052);
        let x_3054 : vec4<f32> = u_xlat9;
        let x_3056 : vec4<f32> = u_xlat12;
        u_xlat9 = (vec4<f32>(x_3054.w, x_3054.w, x_3054.w, x_3054.w) * x_3056);
        let x_3059 : vec4<f32> = u_xlat14;
        let x_3060 : vec2<f32> = vec2<f32>(x_3059.x, x_3059.y);
        let x_3062 : f32 = u_xlat2.z;
        txVec43 = vec3<f32>(x_3060.x, x_3060.y, x_3062);
        let x_3069 : vec3<f32> = txVec43;
        let x_3071 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_3069.xy, x_3069.z);
        u_xlat72 = x_3071;
        let x_3073 : vec4<f32> = u_xlat14;
        let x_3074 : vec2<f32> = vec2<f32>(x_3073.z, x_3073.w);
        let x_3076 : f32 = u_xlat2.z;
        txVec44 = vec3<f32>(x_3074.x, x_3074.y, x_3076);
        let x_3083 : vec3<f32> = txVec44;
        let x_3085 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_3083.xy, x_3083.z);
        u_xlat73 = x_3085;
        let x_3086 : f32 = u_xlat73;
        let x_3088 : f32 = u_xlat19.y;
        u_xlat73 = (x_3086 * x_3088);
        let x_3091 : f32 = u_xlat19.x;
        let x_3092 : f32 = u_xlat72;
        let x_3094 : f32 = u_xlat73;
        u_xlat72 = ((x_3091 * x_3092) + x_3094);
        let x_3097 : vec2<f32> = u_xlat52;
        let x_3099 : f32 = u_xlat2.z;
        txVec45 = vec3<f32>(x_3097.x, x_3097.y, x_3099);
        let x_3106 : vec3<f32> = txVec45;
        let x_3108 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_3106.xy, x_3106.z);
        u_xlat73 = x_3108;
        let x_3110 : f32 = u_xlat19.z;
        let x_3111 : f32 = u_xlat73;
        let x_3113 : f32 = u_xlat72;
        u_xlat72 = ((x_3110 * x_3111) + x_3113);
        let x_3116 : vec4<f32> = u_xlat17;
        let x_3117 : vec2<f32> = vec2<f32>(x_3116.x, x_3116.y);
        let x_3119 : f32 = u_xlat2.z;
        txVec46 = vec3<f32>(x_3117.x, x_3117.y, x_3119);
        let x_3126 : vec3<f32> = txVec46;
        let x_3128 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_3126.xy, x_3126.z);
        u_xlat73 = x_3128;
        let x_3130 : f32 = u_xlat19.w;
        let x_3131 : f32 = u_xlat73;
        let x_3133 : f32 = u_xlat72;
        u_xlat72 = ((x_3130 * x_3131) + x_3133);
        let x_3136 : vec4<f32> = u_xlat15;
        let x_3137 : vec2<f32> = vec2<f32>(x_3136.x, x_3136.y);
        let x_3139 : f32 = u_xlat2.z;
        txVec47 = vec3<f32>(x_3137.x, x_3137.y, x_3139);
        let x_3146 : vec3<f32> = txVec47;
        let x_3148 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_3146.xy, x_3146.z);
        u_xlat73 = x_3148;
        let x_3150 : f32 = u_xlat20.x;
        let x_3151 : f32 = u_xlat73;
        let x_3153 : f32 = u_xlat72;
        u_xlat72 = ((x_3150 * x_3151) + x_3153);
        let x_3156 : vec4<f32> = u_xlat15;
        let x_3157 : vec2<f32> = vec2<f32>(x_3156.z, x_3156.w);
        let x_3159 : f32 = u_xlat2.z;
        txVec48 = vec3<f32>(x_3157.x, x_3157.y, x_3159);
        let x_3166 : vec3<f32> = txVec48;
        let x_3168 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_3166.xy, x_3166.z);
        u_xlat73 = x_3168;
        let x_3170 : f32 = u_xlat20.y;
        let x_3171 : f32 = u_xlat73;
        let x_3173 : f32 = u_xlat72;
        u_xlat72 = ((x_3170 * x_3171) + x_3173);
        let x_3176 : vec4<f32> = u_xlat16;
        let x_3177 : vec2<f32> = vec2<f32>(x_3176.x, x_3176.y);
        let x_3179 : f32 = u_xlat2.z;
        txVec49 = vec3<f32>(x_3177.x, x_3177.y, x_3179);
        let x_3186 : vec3<f32> = txVec49;
        let x_3188 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_3186.xy, x_3186.z);
        u_xlat73 = x_3188;
        let x_3190 : f32 = u_xlat20.z;
        let x_3191 : f32 = u_xlat73;
        let x_3193 : f32 = u_xlat72;
        u_xlat72 = ((x_3190 * x_3191) + x_3193);
        let x_3196 : vec4<f32> = u_xlat17;
        let x_3197 : vec2<f32> = vec2<f32>(x_3196.z, x_3196.w);
        let x_3199 : f32 = u_xlat2.z;
        txVec50 = vec3<f32>(x_3197.x, x_3197.y, x_3199);
        let x_3206 : vec3<f32> = txVec50;
        let x_3208 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_3206.xy, x_3206.z);
        u_xlat73 = x_3208;
        let x_3210 : f32 = u_xlat20.w;
        let x_3211 : f32 = u_xlat73;
        let x_3213 : f32 = u_xlat72;
        u_xlat72 = ((x_3210 * x_3211) + x_3213);
        let x_3216 : vec4<f32> = u_xlat18;
        let x_3217 : vec2<f32> = vec2<f32>(x_3216.x, x_3216.y);
        let x_3219 : f32 = u_xlat2.z;
        txVec51 = vec3<f32>(x_3217.x, x_3217.y, x_3219);
        let x_3226 : vec3<f32> = txVec51;
        let x_3228 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_3226.xy, x_3226.z);
        u_xlat73 = x_3228;
        let x_3230 : f32 = u_xlat21.x;
        let x_3231 : f32 = u_xlat73;
        let x_3233 : f32 = u_xlat72;
        u_xlat72 = ((x_3230 * x_3231) + x_3233);
        let x_3236 : vec4<f32> = u_xlat18;
        let x_3237 : vec2<f32> = vec2<f32>(x_3236.z, x_3236.w);
        let x_3239 : f32 = u_xlat2.z;
        txVec52 = vec3<f32>(x_3237.x, x_3237.y, x_3239);
        let x_3246 : vec3<f32> = txVec52;
        let x_3248 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_3246.xy, x_3246.z);
        u_xlat73 = x_3248;
        let x_3250 : f32 = u_xlat21.y;
        let x_3251 : f32 = u_xlat73;
        let x_3253 : f32 = u_xlat72;
        u_xlat72 = ((x_3250 * x_3251) + x_3253);
        let x_3256 : vec2<f32> = u_xlat32;
        let x_3258 : f32 = u_xlat2.z;
        txVec53 = vec3<f32>(x_3256.x, x_3256.y, x_3258);
        let x_3265 : vec3<f32> = txVec53;
        let x_3267 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_3265.xy, x_3265.z);
        u_xlat73 = x_3267;
        let x_3269 : f32 = u_xlat21.z;
        let x_3270 : f32 = u_xlat73;
        let x_3272 : f32 = u_xlat72;
        u_xlat72 = ((x_3269 * x_3270) + x_3272);
        let x_3275 : vec2<f32> = u_xlat60;
        let x_3277 : f32 = u_xlat2.z;
        txVec54 = vec3<f32>(x_3275.x, x_3275.y, x_3277);
        let x_3284 : vec3<f32> = txVec54;
        let x_3286 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_3284.xy, x_3284.z);
        u_xlat73 = x_3286;
        let x_3288 : f32 = u_xlat21.w;
        let x_3289 : f32 = u_xlat73;
        let x_3291 : f32 = u_xlat72;
        u_xlat72 = ((x_3288 * x_3289) + x_3291);
        let x_3294 : vec4<f32> = u_xlat13;
        let x_3295 : vec2<f32> = vec2<f32>(x_3294.x, x_3294.y);
        let x_3297 : f32 = u_xlat2.z;
        txVec55 = vec3<f32>(x_3295.x, x_3295.y, x_3297);
        let x_3304 : vec3<f32> = txVec55;
        let x_3306 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_3304.xy, x_3304.z);
        u_xlat73 = x_3306;
        let x_3308 : f32 = u_xlat9.x;
        let x_3309 : f32 = u_xlat73;
        let x_3311 : f32 = u_xlat72;
        u_xlat72 = ((x_3308 * x_3309) + x_3311);
        let x_3314 : vec4<f32> = u_xlat13;
        let x_3315 : vec2<f32> = vec2<f32>(x_3314.z, x_3314.w);
        let x_3317 : f32 = u_xlat2.z;
        txVec56 = vec3<f32>(x_3315.x, x_3315.y, x_3317);
        let x_3324 : vec3<f32> = txVec56;
        let x_3326 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_3324.xy, x_3324.z);
        u_xlat73 = x_3326;
        let x_3328 : f32 = u_xlat9.y;
        let x_3329 : f32 = u_xlat73;
        let x_3331 : f32 = u_xlat72;
        u_xlat72 = ((x_3328 * x_3329) + x_3331);
        let x_3334 : vec2<f32> = u_xlat55;
        let x_3336 : f32 = u_xlat2.z;
        txVec57 = vec3<f32>(x_3334.x, x_3334.y, x_3336);
        let x_3343 : vec3<f32> = txVec57;
        let x_3345 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_3343.xy, x_3343.z);
        u_xlat73 = x_3345;
        let x_3347 : f32 = u_xlat9.z;
        let x_3348 : f32 = u_xlat73;
        let x_3350 : f32 = u_xlat72;
        u_xlat72 = ((x_3347 * x_3348) + x_3350);
        let x_3353 : vec4<f32> = u_xlat8;
        let x_3354 : vec2<f32> = vec2<f32>(x_3353.x, x_3353.y);
        let x_3356 : f32 = u_xlat2.z;
        txVec58 = vec3<f32>(x_3354.x, x_3354.y, x_3356);
        let x_3363 : vec3<f32> = txVec58;
        let x_3365 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_3363.xy, x_3363.z);
        u_xlat73 = x_3365;
        let x_3367 : f32 = u_xlat9.w;
        let x_3368 : f32 = u_xlat73;
        let x_3370 : f32 = u_xlat72;
        u_xlat0.x = ((x_3367 * x_3368) + x_3370);
      }
    }
  } else {
    let x_3375 : vec4<f32> = u_xlat2;
    let x_3376 : vec2<f32> = vec2<f32>(x_3375.x, x_3375.y);
    let x_3378 : f32 = u_xlat2.z;
    txVec59 = vec3<f32>(x_3376.x, x_3376.y, x_3378);
    let x_3385 : vec3<f32> = txVec59;
    let x_3387 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_3385.xy, x_3385.z);
    u_xlat0.x = x_3387;
  }
  let x_3390 : f32 = u_xlat0.x;
  let x_3392 : f32 = x_381.x_MainLightShadowParams.x;
  let x_3394 : f32 = u_xlat68;
  u_xlat0.x = ((x_3390 * x_3392) + x_3394);
  let x_3397 : bool = u_xlatb3;
  if (x_3397) {
    x_3398 = 1.0f;
  } else {
    let x_3403 : f32 = u_xlat0.x;
    x_3398 = x_3403;
  }
  let x_3404 : f32 = x_3398;
  u_xlat0.x = x_3404;
  let x_3406 : vec3<f32> = vs_INTERP0;
  let x_3408 : vec3<f32> = x_160.x_WorldSpaceCameraPos;
  let x_3410 : vec3<f32> = (x_3406 + -(x_3408));
  let x_3411 : vec4<f32> = u_xlat2;
  u_xlat2 = vec4<f32>(x_3410.x, x_3410.y, x_3410.z, x_3411.w);
  let x_3413 : vec4<f32> = u_xlat2;
  let x_3415 : vec4<f32> = u_xlat2;
  u_xlat2.x = dot(vec3<f32>(x_3413.x, x_3413.y, x_3413.z), vec3<f32>(x_3415.x, x_3415.y, x_3415.z));
  let x_3420 : f32 = u_xlat2.x;
  let x_3422 : f32 = x_381.x_MainLightShadowParams.z;
  let x_3425 : f32 = x_381.x_MainLightShadowParams.w;
  u_xlat2.x = ((x_3420 * x_3422) + x_3425);
  let x_3429 : f32 = u_xlat2.x;
  u_xlat2.x = clamp(x_3429, 0.0f, 1.0f);
  let x_3434 : f32 = u_xlat0.x;
  u_xlat24 = (-(x_3434) + 1.0f);
  let x_3438 : f32 = u_xlat2.x;
  let x_3439 : f32 = u_xlat24;
  let x_3442 : f32 = u_xlat0.x;
  u_xlat0.x = ((x_3438 * x_3439) + x_3442);
  let x_3451 : f32 = x_3449.x_MainLightCookieTextureFormat;
  u_xlatb2.x = !((x_3451 == -1.0f));
  let x_3455 : bool = u_xlatb2.x;
  if (x_3455) {
    let x_3458 : vec3<f32> = vs_INTERP0;
    let x_3461 : vec4<f32> = x_3449.x_MainLightWorldToLight[1i];
    let x_3463 : vec2<f32> = (vec2<f32>(x_3458.y, x_3458.y) * vec2<f32>(x_3461.x, x_3461.y));
    let x_3464 : vec4<f32> = u_xlat2;
    u_xlat2 = vec4<f32>(x_3463.x, x_3463.y, x_3464.z, x_3464.w);
    let x_3467 : vec4<f32> = x_3449.x_MainLightWorldToLight[0i];
    let x_3469 : vec3<f32> = vs_INTERP0;
    let x_3472 : vec4<f32> = u_xlat2;
    let x_3474 : vec2<f32> = ((vec2<f32>(x_3467.x, x_3467.y) * vec2<f32>(x_3469.x, x_3469.x)) + vec2<f32>(x_3472.x, x_3472.y));
    let x_3475 : vec4<f32> = u_xlat2;
    u_xlat2 = vec4<f32>(x_3474.x, x_3474.y, x_3475.z, x_3475.w);
    let x_3478 : vec4<f32> = x_3449.x_MainLightWorldToLight[2i];
    let x_3480 : vec3<f32> = vs_INTERP0;
    let x_3483 : vec4<f32> = u_xlat2;
    let x_3485 : vec2<f32> = ((vec2<f32>(x_3478.x, x_3478.y) * vec2<f32>(x_3480.z, x_3480.z)) + vec2<f32>(x_3483.x, x_3483.y));
    let x_3486 : vec4<f32> = u_xlat2;
    u_xlat2 = vec4<f32>(x_3485.x, x_3485.y, x_3486.z, x_3486.w);
    let x_3488 : vec4<f32> = u_xlat2;
    let x_3491 : vec4<f32> = x_3449.x_MainLightWorldToLight[3i];
    let x_3493 : vec2<f32> = (vec2<f32>(x_3488.x, x_3488.y) + vec2<f32>(x_3491.x, x_3491.y));
    let x_3494 : vec4<f32> = u_xlat2;
    u_xlat2 = vec4<f32>(x_3493.x, x_3493.y, x_3494.z, x_3494.w);
    let x_3496 : vec4<f32> = u_xlat2;
    let x_3499 : vec2<f32> = ((vec2<f32>(x_3496.x, x_3496.y) * vec2<f32>(0.5f, 0.5f)) + vec2<f32>(0.5f, 0.5f));
    let x_3500 : vec4<f32> = u_xlat2;
    u_xlat2 = vec4<f32>(x_3499.x, x_3499.y, x_3500.z, x_3500.w);
    let x_3507 : vec4<f32> = u_xlat2;
    let x_3510 : f32 = x_160.x_GlobalMipBias.x;
    let x_3511 : vec4<f32> = textureSampleBias(x_MainLightCookieTexture, sampler_MainLightCookieTexture, vec2<f32>(x_3507.x, x_3507.y), x_3510);
    u_xlat2 = x_3511;
    let x_3514 : f32 = x_3449.x_MainLightCookieTextureFormat;
    let x_3516 : f32 = x_3449.x_MainLightCookieTextureFormat;
    let x_3518 : f32 = x_3449.x_MainLightCookieTextureFormat;
    let x_3520 : f32 = x_3449.x_MainLightCookieTextureFormat;
    let x_3521 : vec4<f32> = vec4<f32>(x_3514, x_3516, x_3518, x_3520);
    let x_3528 : vec4<bool> = (vec4<f32>(x_3521.x, x_3521.y, x_3521.z, x_3521.w) == vec4<f32>(0.0f, 1.0f, 0.0f, 0.0f));
    u_xlatb8 = vec2<bool>(x_3528.x, x_3528.y);
    let x_3531 : bool = u_xlatb8.y;
    if (x_3531) {
      let x_3536 : f32 = u_xlat2.w;
      x_3532 = x_3536;
    } else {
      let x_3539 : f32 = u_xlat2.x;
      x_3532 = x_3539;
    }
    let x_3540 : f32 = x_3532;
    u_xlat68 = x_3540;
    let x_3542 : bool = u_xlatb8.x;
    if (x_3542) {
      let x_3546 : vec4<f32> = u_xlat2;
      x_3543 = vec3<f32>(x_3546.x, x_3546.y, x_3546.z);
    } else {
      let x_3549 : f32 = u_xlat68;
      x_3543 = vec3<f32>(x_3549, x_3549, x_3549);
    }
    let x_3551 : vec3<f32> = x_3543;
    let x_3552 : vec4<f32> = u_xlat2;
    u_xlat2 = vec4<f32>(x_3551.x, x_3551.y, x_3551.z, x_3552.w);
  } else {
    u_xlat2.x = 1.0f;
    u_xlat2.y = 1.0f;
    u_xlat2.z = 1.0f;
  }
  let x_3558 : vec4<f32> = u_xlat2;
  let x_3561 : vec4<f32> = x_160.x_MainLightColor;
  let x_3563 : vec3<f32> = (vec3<f32>(x_3558.x, x_3558.y, x_3558.z) * vec3<f32>(x_3561.x, x_3561.y, x_3561.z));
  let x_3564 : vec4<f32> = u_xlat2;
  u_xlat2 = vec4<f32>(x_3563.x, x_3563.y, x_3563.z, x_3564.w);
  let x_3566 : f32 = u_xlat50;
  let x_3568 : vec4<f32> = u_xlat2;
  let x_3570 : vec3<f32> = (vec3<f32>(x_3566, x_3566, x_3566) * vec3<f32>(x_3568.x, x_3568.y, x_3568.z));
  let x_3571 : vec4<f32> = u_xlat2;
  u_xlat2 = vec4<f32>(x_3570.x, x_3570.y, x_3570.z, x_3571.w);
  let x_3573 : vec3<f32> = u_xlat5;
  let x_3575 : vec3<f32> = u_xlat22;
  u_xlat68 = dot(-(x_3573), x_3575);
  let x_3577 : f32 = u_xlat68;
  let x_3578 : f32 = u_xlat68;
  u_xlat68 = (x_3577 + x_3578);
  let x_3580 : vec3<f32> = u_xlat22;
  let x_3581 : f32 = u_xlat68;
  let x_3585 : vec3<f32> = u_xlat5;
  let x_3587 : vec3<f32> = ((x_3580 * -(vec3<f32>(x_3581, x_3581, x_3581))) + -(x_3585));
  let x_3588 : vec4<f32> = u_xlat8;
  u_xlat8 = vec4<f32>(x_3587.x, x_3587.y, x_3587.z, x_3588.w);
  let x_3590 : vec3<f32> = u_xlat22;
  let x_3591 : vec3<f32> = u_xlat5;
  u_xlat68 = dot(x_3590, x_3591);
  let x_3593 : f32 = u_xlat68;
  u_xlat68 = clamp(x_3593, 0.0f, 1.0f);
  let x_3595 : f32 = u_xlat68;
  u_xlat68 = (-(x_3595) + 1.0f);
  let x_3598 : f32 = u_xlat68;
  let x_3599 : f32 = u_xlat68;
  u_xlat68 = (x_3598 * x_3599);
  let x_3601 : f32 = u_xlat68;
  let x_3602 : f32 = u_xlat68;
  u_xlat68 = (x_3601 * x_3602);
  let x_3605 : f32 = u_xlat47.x;
  u_xlat3.x = ((-(x_3605) * 0.699999988f) + 1.700000048f);
  let x_3613 : f32 = u_xlat3.x;
  let x_3615 : f32 = u_xlat47.x;
  u_xlat3.x = (x_3613 * x_3615);
  let x_3619 : f32 = u_xlat3.x;
  u_xlat3.x = (x_3619 * 6.0f);
  let x_3631 : vec4<f32> = u_xlat8;
  let x_3634 : f32 = u_xlat3.x;
  let x_3635 : vec4<f32> = textureSampleLevel(unity_SpecCube0, samplerunity_SpecCube0, vec3<f32>(x_3631.x, x_3631.y, x_3631.z), x_3634);
  u_xlat8 = x_3635;
  let x_3637 : f32 = u_xlat8.w;
  u_xlat3.x = (x_3637 + -1.0f);
  let x_3641 : f32 = x_95.unity_SpecCube0_HDR.w;
  let x_3643 : f32 = u_xlat3.x;
  u_xlat3.x = ((x_3641 * x_3643) + 1.0f);
  let x_3648 : f32 = u_xlat3.x;
  u_xlat3.x = max(x_3648, 0.0f);
  let x_3652 : f32 = u_xlat3.x;
  u_xlat3.x = log2(x_3652);
  let x_3656 : f32 = u_xlat3.x;
  let x_3658 : f32 = x_95.unity_SpecCube0_HDR.y;
  u_xlat3.x = (x_3656 * x_3658);
  let x_3662 : f32 = u_xlat3.x;
  u_xlat3.x = exp2(x_3662);
  let x_3666 : f32 = u_xlat3.x;
  let x_3668 : f32 = x_95.unity_SpecCube0_HDR.x;
  u_xlat3.x = (x_3666 * x_3668);
  let x_3671 : vec4<f32> = u_xlat8;
  let x_3673 : vec4<f32> = u_xlat3;
  let x_3675 : vec3<f32> = (vec3<f32>(x_3671.x, x_3671.y, x_3671.z) * vec3<f32>(x_3673.x, x_3673.x, x_3673.x));
  let x_3676 : vec4<f32> = u_xlat8;
  u_xlat8 = vec4<f32>(x_3675.x, x_3675.y, x_3675.z, x_3676.w);
  let x_3678 : f32 = u_xlat69;
  let x_3680 : f32 = u_xlat69;
  let x_3684 : vec2<f32> = ((vec2<f32>(x_3678, x_3678) * vec2<f32>(x_3680, x_3680)) + vec2<f32>(-1.0f, 1.0f));
  let x_3685 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_3684.x, x_3685.y, x_3684.y, x_3685.w);
  let x_3688 : f32 = u_xlat3.z;
  u_xlat47.x = (1.0f / x_3688);
  let x_3691 : f32 = u_xlat71;
  u_xlat69 = (x_3691 + -0.039999999f);
  let x_3694 : f32 = u_xlat68;
  let x_3695 : f32 = u_xlat69;
  u_xlat68 = ((x_3694 * x_3695) + 0.039999999f);
  let x_3699 : f32 = u_xlat68;
  let x_3701 : f32 = u_xlat47.x;
  u_xlat68 = (x_3699 * x_3701);
  let x_3703 : f32 = u_xlat68;
  let x_3705 : vec4<f32> = u_xlat8;
  let x_3707 : vec3<f32> = (vec3<f32>(x_3703, x_3703, x_3703) * vec3<f32>(x_3705.x, x_3705.y, x_3705.z));
  let x_3708 : vec4<f32> = u_xlat8;
  u_xlat8 = vec4<f32>(x_3707.x, x_3707.y, x_3707.z, x_3708.w);
  let x_3710 : vec3<f32> = u_xlat4;
  let x_3711 : vec3<f32> = u_xlat7;
  let x_3713 : vec4<f32> = u_xlat8;
  u_xlat4 = ((x_3710 * x_3711) + vec3<f32>(x_3713.x, x_3713.y, x_3713.z));
  let x_3717 : f32 = u_xlat0.x;
  let x_3719 : f32 = x_95.unity_LightData.z;
  u_xlat0.x = (x_3717 * x_3719);
  let x_3722 : vec3<f32> = u_xlat22;
  let x_3724 : vec4<f32> = x_160.x_MainLightPosition;
  u_xlat68 = dot(x_3722, vec3<f32>(x_3724.x, x_3724.y, x_3724.z));
  let x_3727 : f32 = u_xlat68;
  u_xlat68 = clamp(x_3727, 0.0f, 1.0f);
  let x_3730 : f32 = u_xlat0.x;
  let x_3731 : f32 = u_xlat68;
  u_xlat0.x = (x_3730 * x_3731);
  let x_3734 : vec3<f32> = u_xlat0;
  let x_3736 : vec4<f32> = u_xlat2;
  let x_3738 : vec3<f32> = (vec3<f32>(x_3734.x, x_3734.x, x_3734.x) * vec3<f32>(x_3736.x, x_3736.y, x_3736.z));
  let x_3739 : vec4<f32> = u_xlat2;
  u_xlat2 = vec4<f32>(x_3738.x, x_3738.y, x_3738.z, x_3739.w);
  let x_3741 : vec3<f32> = u_xlat5;
  let x_3743 : vec4<f32> = x_160.x_MainLightPosition;
  let x_3745 : vec3<f32> = (x_3741 + vec3<f32>(x_3743.x, x_3743.y, x_3743.z));
  let x_3746 : vec4<f32> = u_xlat8;
  u_xlat8 = vec4<f32>(x_3745.x, x_3745.y, x_3745.z, x_3746.w);
  let x_3748 : vec4<f32> = u_xlat8;
  let x_3750 : vec4<f32> = u_xlat8;
  u_xlat0.x = dot(vec3<f32>(x_3748.x, x_3748.y, x_3748.z), vec3<f32>(x_3750.x, x_3750.y, x_3750.z));
  let x_3755 : f32 = u_xlat0.x;
  u_xlat0.x = max(x_3755, 1.17549435e-37f);
  let x_3759 : f32 = u_xlat0.x;
  u_xlat0.x = inverseSqrt(x_3759);
  let x_3762 : vec3<f32> = u_xlat0;
  let x_3764 : vec4<f32> = u_xlat8;
  let x_3766 : vec3<f32> = (vec3<f32>(x_3762.x, x_3762.x, x_3762.x) * vec3<f32>(x_3764.x, x_3764.y, x_3764.z));
  let x_3767 : vec4<f32> = u_xlat8;
  u_xlat8 = vec4<f32>(x_3766.x, x_3766.y, x_3766.z, x_3767.w);
  let x_3769 : vec3<f32> = u_xlat22;
  let x_3770 : vec4<f32> = u_xlat8;
  u_xlat0.x = dot(x_3769, vec3<f32>(x_3770.x, x_3770.y, x_3770.z));
  let x_3775 : f32 = u_xlat0.x;
  u_xlat0.x = clamp(x_3775, 0.0f, 1.0f);
  let x_3779 : vec4<f32> = x_160.x_MainLightPosition;
  let x_3781 : vec4<f32> = u_xlat8;
  u_xlat68 = dot(vec3<f32>(x_3779.x, x_3779.y, x_3779.z), vec3<f32>(x_3781.x, x_3781.y, x_3781.z));
  let x_3784 : f32 = u_xlat68;
  u_xlat68 = clamp(x_3784, 0.0f, 1.0f);
  let x_3787 : f32 = u_xlat0.x;
  let x_3789 : f32 = u_xlat0.x;
  u_xlat0.x = (x_3787 * x_3789);
  let x_3793 : f32 = u_xlat0.x;
  let x_3795 : f32 = u_xlat3.x;
  u_xlat0.x = ((x_3793 * x_3795) + 1.000010014f);
  let x_3800 : f32 = u_xlat68;
  let x_3801 : f32 = u_xlat68;
  u_xlat68 = (x_3800 * x_3801);
  let x_3804 : f32 = u_xlat0.x;
  let x_3806 : f32 = u_xlat0.x;
  u_xlat0.x = (x_3804 * x_3806);
  let x_3809 : f32 = u_xlat68;
  u_xlat68 = max(x_3809, 0.100000001f);
  let x_3813 : f32 = u_xlat0.x;
  let x_3814 : f32 = u_xlat68;
  u_xlat0.x = (x_3813 * x_3814);
  let x_3817 : f32 = u_xlat28;
  let x_3819 : f32 = u_xlat0.x;
  u_xlat0.x = (x_3817 * x_3819);
  let x_3822 : f32 = u_xlat70;
  let x_3824 : f32 = u_xlat0.x;
  u_xlat0.x = (x_3822 / x_3824);
  let x_3827 : vec3<f32> = u_xlat0;
  let x_3831 : vec3<f32> = u_xlat7;
  let x_3832 : vec3<f32> = ((vec3<f32>(x_3827.x, x_3827.x, x_3827.x) * vec3<f32>(0.039999999f, 0.039999999f, 0.039999999f)) + x_3831);
  let x_3833 : vec4<f32> = u_xlat8;
  u_xlat8 = vec4<f32>(x_3832.x, x_3832.y, x_3832.z, x_3833.w);
  let x_3835 : vec4<f32> = u_xlat2;
  let x_3837 : vec4<f32> = u_xlat8;
  let x_3839 : vec3<f32> = (vec3<f32>(x_3835.x, x_3835.y, x_3835.z) * vec3<f32>(x_3837.x, x_3837.y, x_3837.z));
  let x_3840 : vec4<f32> = u_xlat2;
  u_xlat2 = vec4<f32>(x_3839.x, x_3839.y, x_3839.z, x_3840.w);
  let x_3843 : f32 = x_160.x_AdditionalLightsCount.x;
  let x_3845 : f32 = x_95.unity_LightData.y;
  u_xlat0.x = min(x_3843, x_3845);
  let x_3849 : f32 = u_xlat0.x;
  u_xlatu0 = bitcast<u32>(i32(x_3849));
  let x_3853 : f32 = x_3449.x_AdditionalLightsCookieAtlasTextureFormat;
  let x_3855 : f32 = x_3449.x_AdditionalLightsCookieAtlasTextureFormat;
  let x_3857 : f32 = x_3449.x_AdditionalLightsCookieAtlasTextureFormat;
  let x_3859 : f32 = x_3449.x_AdditionalLightsCookieAtlasTextureFormat;
  let x_3860 : vec4<f32> = vec4<f32>(x_3853, x_3855, x_3857, x_3859);
  let x_3867 : vec4<bool> = (vec4<f32>(x_3860.x, x_3860.y, x_3860.z, x_3860.w) == vec4<f32>(0.0f, 1.0f, 0.0f, 1.0f));
  u_xlatb47 = vec2<bool>(x_3867.x, x_3867.y);
  u_xlat8.x = 0.0f;
  u_xlat8.y = 0.0f;
  u_xlat8.z = 0.0f;
  u_xlatu_loop_1 = 0u;
  loop {
    let x_3878 : u32 = u_xlatu_loop_1;
    let x_3879 : u32 = u_xlatu0;
    if ((x_3878 < x_3879)) {
    } else {
      break;
    }
    let x_3882 : u32 = u_xlatu_loop_1;
    u_xlatu71 = (x_3882 >> 2u);
    let x_3885 : u32 = u_xlatu_loop_1;
    u_xlati72 = bitcast<i32>((x_3885 & 3u));
    let x_3888 : u32 = u_xlatu71;
    let x_3891 : vec4<f32> = x_95.unity_LightIndices[bitcast<i32>(x_3888)];
    let x_3901 : i32 = u_xlati72;
    indexable = array<vec4<u32>, 4u>(vec4<u32>(1065353216u, 0u, 0u, 0u), vec4<u32>(0u, 1065353216u, 0u, 0u), vec4<u32>(0u, 0u, 1065353216u, 0u), vec4<u32>(0u, 0u, 0u, 1065353216u));
    let x_3906 : vec4<u32> = indexable[x_3901];
    u_xlat71 = dot(x_3891, bitcast<vec4<f32>>(x_3906));
    let x_3909 : f32 = u_xlat71;
    u_xlatu71 = bitcast<u32>(i32(x_3909));
    let x_3912 : vec3<f32> = vs_INTERP0;
    let x_3924 : u32 = u_xlatu71;
    let x_3927 : vec4<f32> = x_3923.x_AdditionalLightsPosition[bitcast<i32>(x_3924)];
    let x_3930 : u32 = u_xlatu71;
    let x_3933 : vec4<f32> = x_3923.x_AdditionalLightsPosition[bitcast<i32>(x_3930)];
    let x_3935 : vec3<f32> = ((-(x_3912) * vec3<f32>(x_3927.w, x_3927.w, x_3927.w)) + vec3<f32>(x_3933.x, x_3933.y, x_3933.z));
    let x_3936 : vec4<f32> = u_xlat9;
    u_xlat9 = vec4<f32>(x_3935.x, x_3935.y, x_3935.z, x_3936.w);
    let x_3938 : vec4<f32> = u_xlat9;
    let x_3940 : vec4<f32> = u_xlat9;
    u_xlat72 = dot(vec3<f32>(x_3938.x, x_3938.y, x_3938.z), vec3<f32>(x_3940.x, x_3940.y, x_3940.z));
    let x_3943 : f32 = u_xlat72;
    u_xlat72 = max(x_3943, 6.10351562e-05f);
    let x_3946 : f32 = u_xlat72;
    u_xlat73 = inverseSqrt(x_3946);
    let x_3948 : f32 = u_xlat73;
    let x_3950 : vec4<f32> = u_xlat9;
    let x_3952 : vec3<f32> = (vec3<f32>(x_3948, x_3948, x_3948) * vec3<f32>(x_3950.x, x_3950.y, x_3950.z));
    let x_3953 : vec4<f32> = u_xlat10;
    u_xlat10 = vec4<f32>(x_3952.x, x_3952.y, x_3952.z, x_3953.w);
    let x_3956 : f32 = u_xlat72;
    u_xlat74 = (1.0f / x_3956);
    let x_3958 : f32 = u_xlat72;
    let x_3959 : u32 = u_xlatu71;
    let x_3962 : f32 = x_3923.x_AdditionalLightsAttenuation[bitcast<i32>(x_3959)].x;
    u_xlat72 = (x_3958 * x_3962);
    let x_3964 : f32 = u_xlat72;
    let x_3966 : f32 = u_xlat72;
    u_xlat72 = ((-(x_3964) * x_3966) + 1.0f);
    let x_3969 : f32 = u_xlat72;
    u_xlat72 = max(x_3969, 0.0f);
    let x_3971 : f32 = u_xlat72;
    let x_3972 : f32 = u_xlat72;
    u_xlat72 = (x_3971 * x_3972);
    let x_3974 : f32 = u_xlat72;
    let x_3975 : f32 = u_xlat74;
    u_xlat72 = (x_3974 * x_3975);
    let x_3977 : u32 = u_xlatu71;
    let x_3980 : vec4<f32> = x_3923.x_AdditionalLightsSpotDir[bitcast<i32>(x_3977)];
    let x_3982 : vec4<f32> = u_xlat10;
    u_xlat74 = dot(vec3<f32>(x_3980.x, x_3980.y, x_3980.z), vec3<f32>(x_3982.x, x_3982.y, x_3982.z));
    let x_3985 : f32 = u_xlat74;
    let x_3986 : u32 = u_xlatu71;
    let x_3989 : f32 = x_3923.x_AdditionalLightsAttenuation[bitcast<i32>(x_3986)].z;
    let x_3991 : u32 = u_xlatu71;
    let x_3994 : f32 = x_3923.x_AdditionalLightsAttenuation[bitcast<i32>(x_3991)].w;
    u_xlat74 = ((x_3985 * x_3989) + x_3994);
    let x_3996 : f32 = u_xlat74;
    u_xlat74 = clamp(x_3996, 0.0f, 1.0f);
    let x_3998 : f32 = u_xlat74;
    let x_3999 : f32 = u_xlat74;
    u_xlat74 = (x_3998 * x_3999);
    let x_4001 : f32 = u_xlat72;
    let x_4002 : f32 = u_xlat74;
    u_xlat72 = (x_4001 * x_4002);
    let x_4005 : u32 = u_xlatu71;
    u_xlatu74 = (x_4005 >> 5u);
    let x_4008 : u32 = u_xlatu71;
    u_xlati75 = (1i << bitcast<u32>((bitcast<i32>(x_4008) & 31i)));
    let x_4014 : i32 = u_xlati75;
    let x_4016 : u32 = u_xlatu74;
    let x_4019 : f32 = x_3449.x_AdditionalLightsCookieEnableBits[bitcast<i32>(x_4016)].el;
    u_xlati74 = bitcast<i32>((bitcast<u32>(x_4014) & bitcast<u32>(x_4019)));
    let x_4023 : i32 = u_xlati74;
    if ((x_4023 != 0i)) {
      let x_4033 : u32 = u_xlatu71;
      let x_4036 : f32 = x_4032.x_AdditionalLightsLightTypes[bitcast<i32>(x_4033)].el;
      u_xlati74 = i32(x_4036);
      let x_4038 : i32 = u_xlati74;
      u_xlati75 = select(1i, 0i, (x_4038 != 0i));
      let x_4042 : u32 = u_xlatu71;
      u_xlati76 = (bitcast<i32>(x_4042) << bitcast<u32>(2i));
      let x_4045 : i32 = u_xlati75;
      if ((x_4045 != 0i)) {
        let x_4049 : vec3<f32> = vs_INTERP0;
        let x_4051 : i32 = u_xlati76;
        let x_4054 : i32 = u_xlati76;
        let x_4058 : vec4<f32> = x_4032.x_AdditionalLightsWorldToLights[((x_4051 + 1i) / 4i)][((x_4054 + 1i) % 4i)];
        let x_4060 : vec3<f32> = (vec3<f32>(x_4049.y, x_4049.y, x_4049.y) * vec3<f32>(x_4058.x, x_4058.y, x_4058.w));
        let x_4061 : vec4<f32> = u_xlat11;
        u_xlat11 = vec4<f32>(x_4060.x, x_4060.y, x_4060.z, x_4061.w);
        let x_4063 : i32 = u_xlati76;
        let x_4065 : i32 = u_xlati76;
        let x_4068 : vec4<f32> = x_4032.x_AdditionalLightsWorldToLights[(x_4063 / 4i)][(x_4065 % 4i)];
        let x_4070 : vec3<f32> = vs_INTERP0;
        let x_4073 : vec4<f32> = u_xlat11;
        let x_4075 : vec3<f32> = ((vec3<f32>(x_4068.x, x_4068.y, x_4068.w) * vec3<f32>(x_4070.x, x_4070.x, x_4070.x)) + vec3<f32>(x_4073.x, x_4073.y, x_4073.z));
        let x_4076 : vec4<f32> = u_xlat11;
        u_xlat11 = vec4<f32>(x_4075.x, x_4075.y, x_4075.z, x_4076.w);
        let x_4078 : i32 = u_xlati76;
        let x_4081 : i32 = u_xlati76;
        let x_4085 : vec4<f32> = x_4032.x_AdditionalLightsWorldToLights[((x_4078 + 2i) / 4i)][((x_4081 + 2i) % 4i)];
        let x_4087 : vec3<f32> = vs_INTERP0;
        let x_4090 : vec4<f32> = u_xlat11;
        let x_4092 : vec3<f32> = ((vec3<f32>(x_4085.x, x_4085.y, x_4085.w) * vec3<f32>(x_4087.z, x_4087.z, x_4087.z)) + vec3<f32>(x_4090.x, x_4090.y, x_4090.z));
        let x_4093 : vec4<f32> = u_xlat11;
        u_xlat11 = vec4<f32>(x_4092.x, x_4092.y, x_4092.z, x_4093.w);
        let x_4095 : vec4<f32> = u_xlat11;
        let x_4097 : i32 = u_xlati76;
        let x_4100 : i32 = u_xlati76;
        let x_4104 : vec4<f32> = x_4032.x_AdditionalLightsWorldToLights[((x_4097 + 3i) / 4i)][((x_4100 + 3i) % 4i)];
        let x_4106 : vec3<f32> = (vec3<f32>(x_4095.x, x_4095.y, x_4095.z) + vec3<f32>(x_4104.x, x_4104.y, x_4104.w));
        let x_4107 : vec4<f32> = u_xlat11;
        u_xlat11 = vec4<f32>(x_4106.x, x_4106.y, x_4106.z, x_4107.w);
        let x_4109 : vec4<f32> = u_xlat11;
        let x_4111 : vec4<f32> = u_xlat11;
        let x_4113 : vec2<f32> = (vec2<f32>(x_4109.x, x_4109.y) / vec2<f32>(x_4111.z, x_4111.z));
        let x_4114 : vec4<f32> = u_xlat11;
        u_xlat11 = vec4<f32>(x_4113.x, x_4113.y, x_4114.z, x_4114.w);
        let x_4116 : vec4<f32> = u_xlat11;
        let x_4119 : vec2<f32> = ((vec2<f32>(x_4116.x, x_4116.y) * vec2<f32>(0.5f, 0.5f)) + vec2<f32>(0.5f, 0.5f));
        let x_4120 : vec4<f32> = u_xlat11;
        u_xlat11 = vec4<f32>(x_4119.x, x_4119.y, x_4120.z, x_4120.w);
        let x_4122 : vec4<f32> = u_xlat11;
        let x_4126 : vec2<f32> = clamp(vec2<f32>(x_4122.x, x_4122.y), vec2<f32>(0.0f, 0.0f), vec2<f32>(1.0f, 1.0f));
        let x_4127 : vec4<f32> = u_xlat11;
        u_xlat11 = vec4<f32>(x_4126.x, x_4126.y, x_4127.z, x_4127.w);
        let x_4129 : u32 = u_xlatu71;
        let x_4132 : vec4<f32> = x_4032.x_AdditionalLightsCookieAtlasUVRects[bitcast<i32>(x_4129)];
        let x_4134 : vec4<f32> = u_xlat11;
        let x_4137 : u32 = u_xlatu71;
        let x_4140 : vec4<f32> = x_4032.x_AdditionalLightsCookieAtlasUVRects[bitcast<i32>(x_4137)];
        let x_4142 : vec2<f32> = ((vec2<f32>(x_4132.x, x_4132.y) * vec2<f32>(x_4134.x, x_4134.y)) + vec2<f32>(x_4140.z, x_4140.w));
        let x_4143 : vec4<f32> = u_xlat11;
        u_xlat11 = vec4<f32>(x_4142.x, x_4142.y, x_4143.z, x_4143.w);
      } else {
        let x_4147 : i32 = u_xlati74;
        u_xlatb74 = (x_4147 == 1i);
        let x_4149 : bool = u_xlatb74;
        u_xlati74 = select(0i, 1i, x_4149);
        let x_4151 : i32 = u_xlati74;
        if ((x_4151 != 0i)) {
          let x_4155 : vec3<f32> = vs_INTERP0;
          let x_4157 : i32 = u_xlati76;
          let x_4160 : i32 = u_xlati76;
          let x_4164 : vec4<f32> = x_4032.x_AdditionalLightsWorldToLights[((x_4157 + 1i) / 4i)][((x_4160 + 1i) % 4i)];
          u_xlat55 = (vec2<f32>(x_4155.y, x_4155.y) * vec2<f32>(x_4164.x, x_4164.y));
          let x_4167 : i32 = u_xlati76;
          let x_4169 : i32 = u_xlati76;
          let x_4172 : vec4<f32> = x_4032.x_AdditionalLightsWorldToLights[(x_4167 / 4i)][(x_4169 % 4i)];
          let x_4174 : vec3<f32> = vs_INTERP0;
          let x_4177 : vec2<f32> = u_xlat55;
          u_xlat55 = ((vec2<f32>(x_4172.x, x_4172.y) * vec2<f32>(x_4174.x, x_4174.x)) + x_4177);
          let x_4179 : i32 = u_xlati76;
          let x_4182 : i32 = u_xlati76;
          let x_4186 : vec4<f32> = x_4032.x_AdditionalLightsWorldToLights[((x_4179 + 2i) / 4i)][((x_4182 + 2i) % 4i)];
          let x_4188 : vec3<f32> = vs_INTERP0;
          let x_4191 : vec2<f32> = u_xlat55;
          u_xlat55 = ((vec2<f32>(x_4186.x, x_4186.y) * vec2<f32>(x_4188.z, x_4188.z)) + x_4191);
          let x_4193 : vec2<f32> = u_xlat55;
          let x_4194 : i32 = u_xlati76;
          let x_4197 : i32 = u_xlati76;
          let x_4201 : vec4<f32> = x_4032.x_AdditionalLightsWorldToLights[((x_4194 + 3i) / 4i)][((x_4197 + 3i) % 4i)];
          u_xlat55 = (x_4193 + vec2<f32>(x_4201.x, x_4201.y));
          let x_4204 : vec2<f32> = u_xlat55;
          u_xlat55 = ((x_4204 * vec2<f32>(0.5f, 0.5f)) + vec2<f32>(0.5f, 0.5f));
          let x_4207 : vec2<f32> = u_xlat55;
          u_xlat55 = fract(x_4207);
          let x_4209 : u32 = u_xlatu71;
          let x_4212 : vec4<f32> = x_4032.x_AdditionalLightsCookieAtlasUVRects[bitcast<i32>(x_4209)];
          let x_4214 : vec2<f32> = u_xlat55;
          let x_4216 : u32 = u_xlatu71;
          let x_4219 : vec4<f32> = x_4032.x_AdditionalLightsCookieAtlasUVRects[bitcast<i32>(x_4216)];
          let x_4221 : vec2<f32> = ((vec2<f32>(x_4212.x, x_4212.y) * x_4214) + vec2<f32>(x_4219.z, x_4219.w));
          let x_4222 : vec4<f32> = u_xlat11;
          u_xlat11 = vec4<f32>(x_4221.x, x_4221.y, x_4222.z, x_4222.w);
        } else {
          let x_4225 : vec3<f32> = vs_INTERP0;
          let x_4227 : i32 = u_xlati76;
          let x_4230 : i32 = u_xlati76;
          let x_4234 : vec4<f32> = x_4032.x_AdditionalLightsWorldToLights[((x_4227 + 1i) / 4i)][((x_4230 + 1i) % 4i)];
          u_xlat12 = (vec4<f32>(x_4225.y, x_4225.y, x_4225.y, x_4225.y) * x_4234);
          let x_4236 : i32 = u_xlati76;
          let x_4238 : i32 = u_xlati76;
          let x_4241 : vec4<f32> = x_4032.x_AdditionalLightsWorldToLights[(x_4236 / 4i)][(x_4238 % 4i)];
          let x_4242 : vec3<f32> = vs_INTERP0;
          let x_4245 : vec4<f32> = u_xlat12;
          u_xlat12 = ((x_4241 * vec4<f32>(x_4242.x, x_4242.x, x_4242.x, x_4242.x)) + x_4245);
          let x_4247 : i32 = u_xlati76;
          let x_4250 : i32 = u_xlati76;
          let x_4254 : vec4<f32> = x_4032.x_AdditionalLightsWorldToLights[((x_4247 + 2i) / 4i)][((x_4250 + 2i) % 4i)];
          let x_4255 : vec3<f32> = vs_INTERP0;
          let x_4258 : vec4<f32> = u_xlat12;
          u_xlat12 = ((x_4254 * vec4<f32>(x_4255.z, x_4255.z, x_4255.z, x_4255.z)) + x_4258);
          let x_4260 : vec4<f32> = u_xlat12;
          let x_4261 : i32 = u_xlati76;
          let x_4264 : i32 = u_xlati76;
          let x_4268 : vec4<f32> = x_4032.x_AdditionalLightsWorldToLights[((x_4261 + 3i) / 4i)][((x_4264 + 3i) % 4i)];
          u_xlat12 = (x_4260 + x_4268);
          let x_4270 : vec4<f32> = u_xlat12;
          let x_4272 : vec4<f32> = u_xlat12;
          let x_4274 : vec3<f32> = (vec3<f32>(x_4270.x, x_4270.y, x_4270.z) / vec3<f32>(x_4272.w, x_4272.w, x_4272.w));
          let x_4275 : vec4<f32> = u_xlat12;
          u_xlat12 = vec4<f32>(x_4274.x, x_4274.y, x_4274.z, x_4275.w);
          let x_4277 : vec4<f32> = u_xlat12;
          let x_4279 : vec4<f32> = u_xlat12;
          u_xlat74 = dot(vec3<f32>(x_4277.x, x_4277.y, x_4277.z), vec3<f32>(x_4279.x, x_4279.y, x_4279.z));
          let x_4282 : f32 = u_xlat74;
          u_xlat74 = inverseSqrt(x_4282);
          let x_4284 : f32 = u_xlat74;
          let x_4286 : vec4<f32> = u_xlat12;
          let x_4288 : vec3<f32> = (vec3<f32>(x_4284, x_4284, x_4284) * vec3<f32>(x_4286.x, x_4286.y, x_4286.z));
          let x_4289 : vec4<f32> = u_xlat12;
          u_xlat12 = vec4<f32>(x_4288.x, x_4288.y, x_4288.z, x_4289.w);
          let x_4291 : vec4<f32> = u_xlat12;
          u_xlat74 = dot(abs(vec3<f32>(x_4291.x, x_4291.y, x_4291.z)), vec3<f32>(1.0f, 1.0f, 1.0f));
          let x_4296 : f32 = u_xlat74;
          u_xlat74 = max(x_4296, 0.000001f);
          let x_4299 : f32 = u_xlat74;
          u_xlat74 = (1.0f / x_4299);
          let x_4301 : f32 = u_xlat74;
          let x_4303 : vec4<f32> = u_xlat12;
          let x_4305 : vec3<f32> = (vec3<f32>(x_4301, x_4301, x_4301) * vec3<f32>(x_4303.z, x_4303.x, x_4303.y));
          let x_4306 : vec4<f32> = u_xlat13;
          u_xlat13 = vec4<f32>(x_4305.x, x_4305.y, x_4305.z, x_4306.w);
          let x_4309 : f32 = u_xlat13.x;
          u_xlat13.x = -(x_4309);
          let x_4313 : f32 = u_xlat13.x;
          u_xlat13.x = clamp(x_4313, 0.0f, 1.0f);
          let x_4317 : vec4<f32> = u_xlat13;
          let x_4320 : vec4<bool> = (vec4<f32>(x_4317.y, x_4317.z, x_4317.y, x_4317.z) >= vec4<f32>(0.0f, 0.0f, 0.0f, 0.0f));
          u_xlatb55 = vec2<bool>(x_4320.x, x_4320.y);
          let x_4323 : bool = u_xlatb55.x;
          if (x_4323) {
            let x_4328 : f32 = u_xlat13.x;
            x_4324 = x_4328;
          } else {
            let x_4331 : f32 = u_xlat13.x;
            x_4324 = -(x_4331);
          }
          let x_4333 : f32 = x_4324;
          u_xlat55.x = x_4333;
          let x_4336 : bool = u_xlatb55.y;
          if (x_4336) {
            let x_4341 : f32 = u_xlat13.x;
            x_4337 = x_4341;
          } else {
            let x_4344 : f32 = u_xlat13.x;
            x_4337 = -(x_4344);
          }
          let x_4346 : f32 = x_4337;
          u_xlat55.y = x_4346;
          let x_4348 : vec4<f32> = u_xlat12;
          let x_4350 : f32 = u_xlat74;
          let x_4353 : vec2<f32> = u_xlat55;
          u_xlat55 = ((vec2<f32>(x_4348.x, x_4348.y) * vec2<f32>(x_4350, x_4350)) + x_4353);
          let x_4355 : vec2<f32> = u_xlat55;
          u_xlat55 = ((x_4355 * vec2<f32>(0.5f, 0.5f)) + vec2<f32>(0.5f, 0.5f));
          let x_4358 : vec2<f32> = u_xlat55;
          u_xlat55 = clamp(x_4358, vec2<f32>(0.0f, 0.0f), vec2<f32>(1.0f, 1.0f));
          let x_4362 : u32 = u_xlatu71;
          let x_4365 : vec4<f32> = x_4032.x_AdditionalLightsCookieAtlasUVRects[bitcast<i32>(x_4362)];
          let x_4367 : vec2<f32> = u_xlat55;
          let x_4369 : u32 = u_xlatu71;
          let x_4372 : vec4<f32> = x_4032.x_AdditionalLightsCookieAtlasUVRects[bitcast<i32>(x_4369)];
          let x_4374 : vec2<f32> = ((vec2<f32>(x_4365.x, x_4365.y) * x_4367) + vec2<f32>(x_4372.z, x_4372.w));
          let x_4375 : vec4<f32> = u_xlat11;
          u_xlat11 = vec4<f32>(x_4374.x, x_4374.y, x_4375.z, x_4375.w);
        }
      }
      let x_4382 : vec4<f32> = u_xlat11;
      let x_4385 : f32 = x_160.x_GlobalMipBias.x;
      let x_4386 : vec4<f32> = textureSampleBias(x_AdditionalLightsCookieAtlasTexture, sampler_AdditionalLightsCookieAtlasTexture, vec2<f32>(x_4382.x, x_4382.y), x_4385);
      u_xlat11 = x_4386;
      let x_4388 : bool = u_xlatb47.y;
      if (x_4388) {
        let x_4393 : f32 = u_xlat11.w;
        x_4389 = x_4393;
      } else {
        let x_4396 : f32 = u_xlat11.x;
        x_4389 = x_4396;
      }
      let x_4397 : f32 = x_4389;
      u_xlat74 = x_4397;
      let x_4399 : bool = u_xlatb47.x;
      if (x_4399) {
        let x_4403 : vec4<f32> = u_xlat11;
        x_4400 = vec3<f32>(x_4403.x, x_4403.y, x_4403.z);
      } else {
        let x_4406 : f32 = u_xlat74;
        x_4400 = vec3<f32>(x_4406, x_4406, x_4406);
      }
      let x_4408 : vec3<f32> = x_4400;
      let x_4409 : vec4<f32> = u_xlat11;
      u_xlat11 = vec4<f32>(x_4408.x, x_4408.y, x_4408.z, x_4409.w);
    } else {
      u_xlat11.x = 1.0f;
      u_xlat11.y = 1.0f;
      u_xlat11.z = 1.0f;
    }
    let x_4415 : vec4<f32> = u_xlat11;
    let x_4417 : u32 = u_xlatu71;
    let x_4420 : vec4<f32> = x_3923.x_AdditionalLightsColor[bitcast<i32>(x_4417)];
    let x_4422 : vec3<f32> = (vec3<f32>(x_4415.x, x_4415.y, x_4415.z) * vec3<f32>(x_4420.x, x_4420.y, x_4420.z));
    let x_4423 : vec4<f32> = u_xlat11;
    u_xlat11 = vec4<f32>(x_4422.x, x_4422.y, x_4422.z, x_4423.w);
    let x_4425 : f32 = u_xlat50;
    let x_4427 : vec4<f32> = u_xlat11;
    let x_4429 : vec3<f32> = (vec3<f32>(x_4425, x_4425, x_4425) * vec3<f32>(x_4427.x, x_4427.y, x_4427.z));
    let x_4430 : vec4<f32> = u_xlat11;
    u_xlat11 = vec4<f32>(x_4429.x, x_4429.y, x_4429.z, x_4430.w);
    let x_4432 : vec3<f32> = u_xlat22;
    let x_4433 : vec4<f32> = u_xlat10;
    u_xlat71 = dot(x_4432, vec3<f32>(x_4433.x, x_4433.y, x_4433.z));
    let x_4436 : f32 = u_xlat71;
    u_xlat71 = clamp(x_4436, 0.0f, 1.0f);
    let x_4438 : f32 = u_xlat71;
    let x_4439 : f32 = u_xlat72;
    u_xlat71 = (x_4438 * x_4439);
    let x_4441 : f32 = u_xlat71;
    let x_4443 : vec4<f32> = u_xlat11;
    let x_4445 : vec3<f32> = (vec3<f32>(x_4441, x_4441, x_4441) * vec3<f32>(x_4443.x, x_4443.y, x_4443.z));
    let x_4446 : vec4<f32> = u_xlat11;
    u_xlat11 = vec4<f32>(x_4445.x, x_4445.y, x_4445.z, x_4446.w);
    let x_4448 : vec4<f32> = u_xlat9;
    let x_4450 : f32 = u_xlat73;
    let x_4453 : vec3<f32> = u_xlat5;
    let x_4454 : vec3<f32> = ((vec3<f32>(x_4448.x, x_4448.y, x_4448.z) * vec3<f32>(x_4450, x_4450, x_4450)) + x_4453);
    let x_4455 : vec4<f32> = u_xlat9;
    u_xlat9 = vec4<f32>(x_4454.x, x_4454.y, x_4454.z, x_4455.w);
    let x_4457 : vec4<f32> = u_xlat9;
    let x_4459 : vec4<f32> = u_xlat9;
    u_xlat71 = dot(vec3<f32>(x_4457.x, x_4457.y, x_4457.z), vec3<f32>(x_4459.x, x_4459.y, x_4459.z));
    let x_4462 : f32 = u_xlat71;
    u_xlat71 = max(x_4462, 1.17549435e-37f);
    let x_4464 : f32 = u_xlat71;
    u_xlat71 = inverseSqrt(x_4464);
    let x_4466 : f32 = u_xlat71;
    let x_4468 : vec4<f32> = u_xlat9;
    let x_4470 : vec3<f32> = (vec3<f32>(x_4466, x_4466, x_4466) * vec3<f32>(x_4468.x, x_4468.y, x_4468.z));
    let x_4471 : vec4<f32> = u_xlat9;
    u_xlat9 = vec4<f32>(x_4470.x, x_4470.y, x_4470.z, x_4471.w);
    let x_4473 : vec3<f32> = u_xlat22;
    let x_4474 : vec4<f32> = u_xlat9;
    u_xlat71 = dot(x_4473, vec3<f32>(x_4474.x, x_4474.y, x_4474.z));
    let x_4477 : f32 = u_xlat71;
    u_xlat71 = clamp(x_4477, 0.0f, 1.0f);
    let x_4479 : vec4<f32> = u_xlat10;
    let x_4481 : vec4<f32> = u_xlat9;
    u_xlat72 = dot(vec3<f32>(x_4479.x, x_4479.y, x_4479.z), vec3<f32>(x_4481.x, x_4481.y, x_4481.z));
    let x_4484 : f32 = u_xlat72;
    u_xlat72 = clamp(x_4484, 0.0f, 1.0f);
    let x_4486 : f32 = u_xlat71;
    let x_4487 : f32 = u_xlat71;
    u_xlat71 = (x_4486 * x_4487);
    let x_4489 : f32 = u_xlat71;
    let x_4491 : f32 = u_xlat3.x;
    u_xlat71 = ((x_4489 * x_4491) + 1.000010014f);
    let x_4494 : f32 = u_xlat72;
    let x_4495 : f32 = u_xlat72;
    u_xlat72 = (x_4494 * x_4495);
    let x_4497 : f32 = u_xlat71;
    let x_4498 : f32 = u_xlat71;
    u_xlat71 = (x_4497 * x_4498);
    let x_4500 : f32 = u_xlat72;
    u_xlat72 = max(x_4500, 0.100000001f);
    let x_4502 : f32 = u_xlat71;
    let x_4503 : f32 = u_xlat72;
    u_xlat71 = (x_4502 * x_4503);
    let x_4505 : f32 = u_xlat28;
    let x_4506 : f32 = u_xlat71;
    u_xlat71 = (x_4505 * x_4506);
    let x_4508 : f32 = u_xlat70;
    let x_4509 : f32 = u_xlat71;
    u_xlat71 = (x_4508 / x_4509);
    let x_4511 : f32 = u_xlat71;
    let x_4514 : vec3<f32> = u_xlat7;
    let x_4515 : vec3<f32> = ((vec3<f32>(x_4511, x_4511, x_4511) * vec3<f32>(0.039999999f, 0.039999999f, 0.039999999f)) + x_4514);
    let x_4516 : vec4<f32> = u_xlat9;
    u_xlat9 = vec4<f32>(x_4515.x, x_4515.y, x_4515.z, x_4516.w);
    let x_4518 : vec4<f32> = u_xlat9;
    let x_4520 : vec4<f32> = u_xlat11;
    let x_4523 : vec4<f32> = u_xlat8;
    let x_4525 : vec3<f32> = ((vec3<f32>(x_4518.x, x_4518.y, x_4518.z) * vec3<f32>(x_4520.x, x_4520.y, x_4520.z)) + vec3<f32>(x_4523.x, x_4523.y, x_4523.z));
    let x_4526 : vec4<f32> = u_xlat8;
    u_xlat8 = vec4<f32>(x_4525.x, x_4525.y, x_4525.z, x_4526.w);

    continuing {
      let x_4528 : u32 = u_xlatu_loop_1;
      u_xlatu_loop_1 = (x_4528 + bitcast<u32>(1i));
    }
  }
  let x_4530 : vec3<f32> = u_xlat4;
  let x_4531 : vec4<f32> = u_xlat6;
  let x_4534 : vec4<f32> = u_xlat2;
  u_xlat0 = ((x_4530 * vec3<f32>(x_4531.x, x_4531.x, x_4531.x)) + vec3<f32>(x_4534.x, x_4534.y, x_4534.z));
  let x_4537 : vec4<f32> = u_xlat8;
  let x_4539 : vec3<f32> = u_xlat0;
  u_xlat0 = (vec3<f32>(x_4537.x, x_4537.y, x_4537.z) + x_4539);
  let x_4543 : vec4<f32> = vs_INTERP4;
  let x_4545 : vec3<f32> = u_xlat1;
  let x_4547 : vec3<f32> = u_xlat0;
  let x_4548 : vec3<f32> = ((vec3<f32>(x_4543.w, x_4543.w, x_4543.w) * x_4545) + x_4547);
  let x_4549 : vec4<f32> = SV_Target0;
  SV_Target0 = vec4<f32>(x_4548.x, x_4548.y, x_4548.z, x_4549.w);
  let x_4551 : bool = u_xlatb25;
  let x_4552 : f32 = u_xlat67;
  SV_Target0.w = select(1.0f, x_4552, x_4551);
  return;
}

struct main_out {
  @location(0)
  SV_Target0_1 : vec4<f32>,
}

@fragment
fn main(@builtin(position) gl_FragCoord_param : vec4<f32>, @location(1) vs_INTERP1_param : vec3<f32>, @location(2) vs_INTERP2_param : vec4<f32>, @location(0) vs_INTERP0_param : vec3<f32>, @location(3) vs_INTERP3_param : vec4<f32>, @location(4) vs_INTERP4_param : vec4<f32>, @location(5) vs_INTERP5_param : vec2<f32>) -> main_out {
  gl_FragCoord = gl_FragCoord_param;
  vs_INTERP1 = vs_INTERP1_param;
  vs_INTERP2 = vs_INTERP2_param;
  vs_INTERP0 = vs_INTERP0_param;
  vs_INTERP3 = vs_INTERP3_param;
  vs_INTERP4 = vs_INTERP4_param;
  vs_INTERP5 = vs_INTERP5_param;
  main_1();
  return main_out(SV_Target0);
}

