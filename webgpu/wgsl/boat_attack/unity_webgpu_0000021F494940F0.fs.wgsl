struct PGlobals {
  x_ScaledScreenParams : vec4<f32>,
  x_GlobalMipBias : vec2<f32>,
  x_AlphaToMaskAvailable : f32,
  @size(4)
  padding : u32,
  x_MainLightPosition : vec4<f32>,
  x_MainLightColor : vec4<f32>,
  x_AmbientOcclusionParam : vec4<f32>,
  x_AdditionalLightsCount : vec4<f32>,
  x_WorldSpaceCameraPos : vec3<f32>,
  @size(4)
  padding_1 : u32,
  x_ScreenParams : vec4<f32>,
  unity_OrthoParams : vec4<f32>,
  x_ScaleBiasRt : vec4<f32>,
  unity_MatrixV : mat4x4<f32>,
}

type Arr = array<vec4<f32>, 2u>;

struct UnityPerDraw {
  unity_ObjectToWorld : mat4x4<f32>,
  unity_WorldToObject : mat4x4<f32>,
  unity_LODFade : vec4<f32>,
  unity_WorldTransformParams : vec4<f32>,
  unity_RenderingLayer : vec4<f32>,
  unity_LightData : vec4<f32>,
  unity_LightIndices : Arr,
  unity_ProbesOcclusion : vec4<f32>,
  unity_SpecCube0_HDR : vec4<f32>,
  unity_SpecCube1_HDR : vec4<f32>,
  unity_SpecCube0_BoxMax : vec4<f32>,
  unity_SpecCube0_BoxMin : vec4<f32>,
  unity_SpecCube0_ProbePosition : vec4<f32>,
  unity_SpecCube1_BoxMax : vec4<f32>,
  unity_SpecCube1_BoxMin : vec4<f32>,
  unity_SpecCube1_ProbePosition : vec4<f32>,
  unity_LightmapST : vec4<f32>,
  unity_DynamicLightmapST : vec4<f32>,
  unity_SHAr : vec4<f32>,
  unity_SHAg : vec4<f32>,
  unity_SHAb : vec4<f32>,
  unity_SHBr : vec4<f32>,
  unity_SHBg : vec4<f32>,
  unity_SHBb : vec4<f32>,
  unity_SHC : vec4<f32>,
  unity_RendererBounds_Min : vec4<f32>,
  unity_RendererBounds_Max : vec4<f32>,
  unity_MatrixPreviousM : mat4x4<f32>,
  unity_MatrixPreviousMI : mat4x4<f32>,
  unity_MotionVectorsParams : vec4<f32>,
  unity_SpriteColor : vec4<f32>,
  unity_SpriteProps : vec4<f32>,
}

struct UnityPerMaterial {
  Texture2D_B222E8F_TexelSize : vec4<f32>,
  Color_C30C7CA3 : vec4<f32>,
  Texture2D_D9BFD5F1_TexelSize : vec4<f32>,
}

type Arr_1 = array<mat4x4<f32>, 5u>;

struct MainLightShadows {
  x_MainLightWorldToShadow : Arr_1,
  x_CascadeShadowSplitSpheres0 : vec4<f32>,
  x_CascadeShadowSplitSpheres1 : vec4<f32>,
  x_CascadeShadowSplitSpheres2 : vec4<f32>,
  x_CascadeShadowSplitSpheres3 : vec4<f32>,
  x_CascadeShadowSplitSphereRadii : vec4<f32>,
  x_MainLightShadowOffset0 : vec4<f32>,
  x_MainLightShadowOffset1 : vec4<f32>,
  x_MainLightShadowParams : vec4<f32>,
  x_MainLightShadowmapSize : vec4<f32>,
}

struct strided_arr {
  @size(16)
  el : f32,
}

type Arr_2 = array<strided_arr, 8u>;

struct LightCookies {
  x_MainLightWorldToLight : mat4x4<f32>,
  x_AdditionalLightsCookieEnableBits : Arr_2,
  x_MainLightCookieTextureFormat : f32,
  x_AdditionalLightsCookieAtlasTextureFormat : f32,
}

type Arr_3 = array<vec4<f32>, 256u>;

type Arr_4 = array<vec4<f32>, 256u>;

type Arr_5 = array<vec4<f32>, 256u>;

type Arr_6 = array<vec4<f32>, 256u>;

type Arr_7 = array<vec4<f32>, 256u>;

struct strided_arr_1 {
  @size(16)
  el : f32,
}

type Arr_8 = array<strided_arr_1, 256u>;

type Arr_9 = array<vec4<f32>, 256u>;

type Arr_10 = array<strided_arr_1, 256u>;

struct AdditionalLights {
  x_AdditionalLightsPosition : Arr_9,
  x_AdditionalLightsColor : Arr_9,
  x_AdditionalLightsAttenuation : Arr_9,
  x_AdditionalLightsSpotDir : Arr_9,
  x_AdditionalLightsOcclusionProbes : Arr_9,
  x_AdditionalLightsLayerMasks : Arr_10,
}

type Arr_11 = array<mat4x4<f32>, 256u>;

struct AdditionalLightsCookies {
  x_AdditionalLightsWorldToLights : Arr_11,
  x_AdditionalLightsCookieAtlasUVRects : Arr_9,
  x_AdditionalLightsLightTypes : Arr_10,
}

var<private> gl_FragCoord : vec4<f32>;

var<private> vs_INTERP1 : vec3<f32>;

@group(1) @binding(0) var<uniform> x_90 : PGlobals;

var<private> vs_INTERP0 : vec3<f32>;

@group(1) @binding(2) var<uniform> x_161 : UnityPerDraw;

@group(0) @binding(6) var Texture2D_B222E8F : texture_2d<f32>;

@group(0) @binding(14) var samplerTexture2D_B222E8F : sampler;

var<private> vs_INTERP3 : vec4<f32>;

@group(1) @binding(6) var<uniform> x_215 : UnityPerMaterial;

@group(0) @binding(7) var Texture2D_D9BFD5F1 : texture_2d<f32>;

@group(0) @binding(15) var samplerTexture2D_D9BFD5F1 : sampler;

var<private> vs_INTERP4 : vec4<f32>;

@group(1) @binding(3) var<uniform> x_272 : MainLightShadows;

@group(0) @binding(3) var x_MainLightShadowmapTexture : texture_depth_2d;

@group(0) @binding(11) var sampler_MainLightShadowmapTexture : sampler_comparison;

var<private> vs_INTERP2 : vec4<f32>;

@group(0) @binding(1) var unity_Lightmap : texture_2d<f32>;

@group(0) @binding(9) var samplerunity_Lightmap : sampler;

var<private> vs_INTERP5 : vec2<f32>;

@group(0) @binding(2) var x_ScreenSpaceOcclusionTexture : texture_2d<f32>;

@group(0) @binding(10) var sampler_ScreenSpaceOcclusionTexture : sampler;

var<private> vs_INTERP9 : vec4<f32>;

@group(1) @binding(4) var<uniform> x_3292 : LightCookies;

@group(0) @binding(4) var x_MainLightCookieTexture : texture_2d<f32>;

@group(0) @binding(12) var sampler_MainLightCookieTexture : sampler;

@group(0) @binding(0) var unity_SpecCube0 : texture_cube<f32>;

@group(0) @binding(8) var samplerunity_SpecCube0 : sampler;

@group(1) @binding(1) var<uniform> x_3724 : AdditionalLights;

@group(1) @binding(5) var<uniform> x_3833 : AdditionalLightsCookies;

@group(0) @binding(5) var x_AdditionalLightsCookieAtlasTexture : texture_2d<f32>;

@group(0) @binding(13) var sampler_AdditionalLightsCookieAtlasTexture : sampler;

var<private> SV_Target0 : vec4<f32>;

fn int_bitfieldInsert_i1_i1_i1_i1_(base : ptr<function, i32>, insert : ptr<function, i32>, offset_1 : ptr<function, i32>, bits : ptr<function, i32>) -> i32 {
  var mask : u32;
  let x_19 : i32 = *(bits);
  let x_23 : i32 = *(offset_1);
  mask = (~((4294967295u << bitcast<u32>(x_19))) << bitcast<u32>(x_23));
  let x_26 : i32 = *(base);
  let x_28 : u32 = mask;
  let x_31 : i32 = *(insert);
  let x_33 : i32 = *(offset_1);
  let x_36 : u32 = mask;
  return bitcast<i32>(((bitcast<u32>(x_26) & ~(x_28)) | ((bitcast<u32>(x_31) << bitcast<u32>(x_33)) & x_36)));
}

fn main_1() {
  var hlslcc_FragCoord : vec4<f32>;
  var u_xlat0 : vec3<f32>;
  var u_xlatb63 : bool;
  var u_xlat1 : vec3<f32>;
  var u_xlat64 : f32;
  var u_xlat2 : vec3<f32>;
  var x_118 : f32;
  var x_132 : f32;
  var x_145 : f32;
  var u_xlat63 : f32;
  var u_xlat3 : vec4<f32>;
  var u_xlat4 : vec3<f32>;
  var u_xlat5 : vec4<f32>;
  var u_xlat6 : vec4<f32>;
  var u_xlat26 : vec3<f32>;
  var u_xlatb64 : bool;
  var u_xlat7 : vec4<f32>;
  var txVec0 : vec3<f32>;
  var u_xlat8 : vec4<f32>;
  var txVec1 : vec3<f32>;
  var txVec2 : vec3<f32>;
  var txVec3 : vec3<f32>;
  var u_xlatb65 : bool;
  var u_xlat49 : vec2<f32>;
  var u_xlat9 : vec4<f32>;
  var u_xlat51 : vec2<f32>;
  var u_xlat10 : vec4<f32>;
  var u_xlat11 : vec4<f32>;
  var u_xlat12 : vec4<f32>;
  var u_xlat13 : vec4<f32>;
  var u_xlat14 : vec4<f32>;
  var u_xlat15 : vec4<f32>;
  var u_xlat65 : f32;
  var txVec4 : vec3<f32>;
  var u_xlat67 : f32;
  var txVec5 : vec3<f32>;
  var u_xlat69 : f32;
  var txVec6 : vec3<f32>;
  var txVec7 : vec3<f32>;
  var txVec8 : vec3<f32>;
  var txVec9 : vec3<f32>;
  var txVec10 : vec3<f32>;
  var txVec11 : vec3<f32>;
  var txVec12 : vec3<f32>;
  var u_xlat29 : vec3<f32>;
  var u_xlat16 : vec4<f32>;
  var u_xlat17 : vec4<f32>;
  var u_xlat30 : vec2<f32>;
  var u_xlat57 : vec2<f32>;
  var u_xlat52 : vec2<f32>;
  var u_xlat18 : vec4<f32>;
  var u_xlat19 : vec4<f32>;
  var u_xlat20 : vec4<f32>;
  var txVec13 : vec3<f32>;
  var txVec14 : vec3<f32>;
  var txVec15 : vec3<f32>;
  var txVec16 : vec3<f32>;
  var txVec17 : vec3<f32>;
  var txVec18 : vec3<f32>;
  var txVec19 : vec3<f32>;
  var txVec20 : vec3<f32>;
  var txVec21 : vec3<f32>;
  var txVec22 : vec3<f32>;
  var txVec23 : vec3<f32>;
  var txVec24 : vec3<f32>;
  var txVec25 : vec3<f32>;
  var txVec26 : vec3<f32>;
  var txVec27 : vec3<f32>;
  var txVec28 : vec3<f32>;
  var txVec29 : vec3<f32>;
  var u_xlatb67 : bool;
  var u_xlatb6 : bool;
  var x_1583 : f32;
  var u_xlatb3 : bool;
  var u_xlatu1 : vec3<u32>;
  var u_xlatu43 : u32;
  var u_xlatu24 : u32;
  var u_xlati43 : i32;
  var u_xlati22 : i32;
  var u_xlatu22 : u32;
  var u_xlati1 : i32;
  var param : i32;
  var param_1 : i32;
  var param_2 : i32;
  var param_3 : i32;
  var u_xlat22 : f32;
  var x_1715 : f32;
  var u_xlatb43 : vec2<bool>;
  var u_xlat43 : vec2<f32>;
  var u_xlatb22 : bool;
  var x_1787 : f32;
  var u_xlat66 : f32;
  var u_xlat27 : f32;
  var txVec30 : vec3<f32>;
  var txVec31 : vec3<f32>;
  var txVec32 : vec3<f32>;
  var txVec33 : vec3<f32>;
  var u_xlatb48 : vec2<bool>;
  var u_xlat48 : vec2<f32>;
  var txVec34 : vec3<f32>;
  var txVec35 : vec3<f32>;
  var txVec36 : vec3<f32>;
  var txVec37 : vec3<f32>;
  var txVec38 : vec3<f32>;
  var txVec39 : vec3<f32>;
  var txVec40 : vec3<f32>;
  var txVec41 : vec3<f32>;
  var txVec42 : vec3<f32>;
  var u_xlat55 : vec2<f32>;
  var txVec43 : vec3<f32>;
  var txVec44 : vec3<f32>;
  var u_xlat71 : f32;
  var txVec45 : vec3<f32>;
  var txVec46 : vec3<f32>;
  var txVec47 : vec3<f32>;
  var txVec48 : vec3<f32>;
  var txVec49 : vec3<f32>;
  var txVec50 : vec3<f32>;
  var txVec51 : vec3<f32>;
  var txVec52 : vec3<f32>;
  var txVec53 : vec3<f32>;
  var txVec54 : vec3<f32>;
  var txVec55 : vec3<f32>;
  var txVec56 : vec3<f32>;
  var txVec57 : vec3<f32>;
  var u_xlat28 : f32;
  var txVec58 : vec3<f32>;
  var txVec59 : vec3<f32>;
  var x_3358 : f32;
  var x_3369 : vec3<f32>;
  var u_xlatu63 : u32;
  var u_xlatu_loop_1 : u32;
  var u_xlatu65 : u32;
  var u_xlati67 : i32;
  var indexable : array<vec4<u32>, 4u>;
  var u_xlat70 : f32;
  var u_xlatu71 : u32;
  var u_xlati72 : i32;
  var u_xlati71 : i32;
  var u_xlati73 : i32;
  var u_xlatb71 : bool;
  var u_xlat53 : vec2<f32>;
  var u_xlatb53 : vec2<bool>;
  var x_4126 : f32;
  var x_4139 : f32;
  var x_4191 : f32;
  var x_4202 : vec3<f32>;
  var x_4357 : f32;
  var u_xlat_precise_vec4 : vec4<f32>;
  var u_xlat_precise_ivec4 : vec4<i32>;
  var u_xlat_precise_bvec4 : vec4<bool>;
  var u_xlat_precise_uvec4 : vec4<u32>;
  let x_49 : vec4<f32> = gl_FragCoord;
  let x_50 : vec3<f32> = vec3<f32>(x_49.x, x_49.y, x_49.z);
  let x_55 : f32 = gl_FragCoord.w;
  hlslcc_FragCoord = vec4<f32>(x_50.x, x_50.y, x_50.z, (1.0f / x_55));
  let x_65 : vec3<f32> = vs_INTERP1;
  let x_66 : vec3<f32> = vs_INTERP1;
  u_xlat0.x = dot(x_65, x_66);
  let x_72 : f32 = u_xlat0.x;
  u_xlat0.x = sqrt(x_72);
  let x_76 : f32 = u_xlat0.x;
  u_xlat0.x = (1.0f / x_76);
  let x_79 : vec3<f32> = u_xlat0;
  let x_81 : vec3<f32> = vs_INTERP1;
  u_xlat0 = (vec3<f32>(x_79.x, x_79.x, x_79.x) * x_81);
  let x_94 : f32 = x_90.unity_OrthoParams.w;
  u_xlatb63 = (x_94 == 0.0f);
  let x_99 : vec3<f32> = vs_INTERP0;
  let x_104 : vec3<f32> = x_90.x_WorldSpaceCameraPos;
  u_xlat1 = (-(x_99) + x_104);
  let x_107 : vec3<f32> = u_xlat1;
  let x_108 : vec3<f32> = u_xlat1;
  u_xlat64 = dot(x_107, x_108);
  let x_110 : f32 = u_xlat64;
  u_xlat64 = inverseSqrt(x_110);
  let x_112 : f32 = u_xlat64;
  let x_114 : vec3<f32> = u_xlat1;
  u_xlat1 = (vec3<f32>(x_112, x_112, x_112) * x_114);
  let x_117 : bool = u_xlatb63;
  if (x_117) {
    let x_122 : f32 = u_xlat1.x;
    x_118 = x_122;
  } else {
    let x_128 : f32 = x_90.unity_MatrixV[0i].z;
    x_118 = x_128;
  }
  let x_129 : f32 = x_118;
  u_xlat2.x = x_129;
  let x_131 : bool = u_xlatb63;
  if (x_131) {
    let x_137 : f32 = u_xlat1.y;
    x_132 = x_137;
  } else {
    let x_141 : f32 = x_90.unity_MatrixV[1i].z;
    x_132 = x_141;
  }
  let x_142 : f32 = x_132;
  u_xlat2.y = x_142;
  let x_144 : bool = u_xlatb63;
  if (x_144) {
    let x_149 : f32 = u_xlat1.z;
    x_145 = x_149;
  } else {
    let x_153 : f32 = x_90.unity_MatrixV[2i].z;
    x_145 = x_153;
  }
  let x_154 : f32 = x_145;
  u_xlat2.z = x_154;
  let x_156 : vec3<f32> = u_xlat2;
  let x_164 : vec4<f32> = x_161.unity_WorldToObject[1i];
  u_xlat1 = (vec3<f32>(x_156.y, x_156.y, x_156.y) * vec3<f32>(x_164.x, x_164.y, x_164.z));
  let x_168 : vec4<f32> = x_161.unity_WorldToObject[0i];
  let x_170 : vec3<f32> = u_xlat2;
  let x_173 : vec3<f32> = u_xlat1;
  u_xlat1 = ((vec3<f32>(x_168.x, x_168.y, x_168.z) * vec3<f32>(x_170.x, x_170.x, x_170.x)) + x_173);
  let x_176 : vec4<f32> = x_161.unity_WorldToObject[2i];
  let x_178 : vec3<f32> = u_xlat2;
  let x_181 : vec3<f32> = u_xlat1;
  u_xlat1 = ((vec3<f32>(x_176.x, x_176.y, x_176.z) * vec3<f32>(x_178.z, x_178.z, x_178.z)) + x_181);
  let x_184 : vec3<f32> = u_xlat1;
  let x_185 : vec3<f32> = u_xlat1;
  u_xlat63 = dot(x_184, x_185);
  let x_187 : f32 = u_xlat63;
  u_xlat63 = inverseSqrt(x_187);
  let x_189 : f32 = u_xlat63;
  let x_191 : vec3<f32> = u_xlat1;
  u_xlat1 = (vec3<f32>(x_189, x_189, x_189) * x_191);
  let x_205 : vec4<f32> = vs_INTERP3;
  let x_208 : f32 = x_90.x_GlobalMipBias.x;
  let x_209 : vec4<f32> = textureSampleBias(Texture2D_B222E8F, samplerTexture2D_B222E8F, vec2<f32>(x_205.x, x_205.y), x_208);
  u_xlat3 = x_209;
  let x_211 : vec4<f32> = u_xlat3;
  let x_217 : vec4<f32> = x_215.Color_C30C7CA3;
  u_xlat4 = (vec3<f32>(x_211.x, x_211.y, x_211.z) * vec3<f32>(x_217.x, x_217.y, x_217.z));
  let x_226 : vec4<f32> = vs_INTERP3;
  let x_229 : f32 = x_90.x_GlobalMipBias.x;
  let x_230 : vec4<f32> = textureSampleBias(Texture2D_D9BFD5F1, samplerTexture2D_D9BFD5F1, vec2<f32>(x_226.x, x_226.y), x_229);
  u_xlat5 = vec4<f32>(x_230.w, x_230.x, x_230.y, x_230.z);
  let x_233 : vec4<f32> = u_xlat5;
  u_xlat6 = ((vec4<f32>(x_233.y, x_233.z, x_233.w, x_233.x) * vec4<f32>(2.0f, 2.0f, 2.0f, 2.0f)) + vec4<f32>(-1.0f, -1.0f, -1.0f, -1.0f));
  let x_241 : vec4<f32> = u_xlat6;
  let x_242 : vec4<f32> = u_xlat6;
  u_xlat63 = dot(x_241, x_242);
  let x_244 : f32 = u_xlat63;
  u_xlat63 = inverseSqrt(x_244);
  let x_247 : f32 = u_xlat63;
  let x_249 : vec4<f32> = u_xlat6;
  u_xlat26 = (vec3<f32>(x_247, x_247, x_247) * vec3<f32>(x_249.x, x_249.y, x_249.z));
  let x_254 : f32 = vs_INTERP4.y;
  u_xlat63 = (x_254 * 200.0f);
  let x_257 : f32 = u_xlat63;
  u_xlat63 = min(x_257, 1.0f);
  let x_259 : f32 = u_xlat63;
  let x_261 : vec4<f32> = u_xlat3;
  let x_263 : vec3<f32> = (vec3<f32>(x_259, x_259, x_259) * vec3<f32>(x_261.x, x_261.y, x_261.z));
  let x_264 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_263.x, x_263.y, x_263.z, x_264.w);
  let x_266 : vec3<f32> = vs_INTERP0;
  let x_274 : vec4<f32> = x_272.x_MainLightWorldToShadow[0i][1i];
  let x_276 : vec3<f32> = (vec3<f32>(x_266.y, x_266.y, x_266.y) * vec3<f32>(x_274.x, x_274.y, x_274.z));
  let x_277 : vec4<f32> = u_xlat6;
  u_xlat6 = vec4<f32>(x_276.x, x_276.y, x_276.z, x_277.w);
  let x_280 : vec4<f32> = x_272.x_MainLightWorldToShadow[0i][0i];
  let x_282 : vec3<f32> = vs_INTERP0;
  let x_285 : vec4<f32> = u_xlat6;
  let x_287 : vec3<f32> = ((vec3<f32>(x_280.x, x_280.y, x_280.z) * vec3<f32>(x_282.x, x_282.x, x_282.x)) + vec3<f32>(x_285.x, x_285.y, x_285.z));
  let x_288 : vec4<f32> = u_xlat6;
  u_xlat6 = vec4<f32>(x_287.x, x_287.y, x_287.z, x_288.w);
  let x_291 : vec4<f32> = x_272.x_MainLightWorldToShadow[0i][2i];
  let x_293 : vec3<f32> = vs_INTERP0;
  let x_296 : vec4<f32> = u_xlat6;
  let x_298 : vec3<f32> = ((vec3<f32>(x_291.x, x_291.y, x_291.z) * vec3<f32>(x_293.z, x_293.z, x_293.z)) + vec3<f32>(x_296.x, x_296.y, x_296.z));
  let x_299 : vec4<f32> = u_xlat6;
  u_xlat6 = vec4<f32>(x_298.x, x_298.y, x_298.z, x_299.w);
  let x_301 : vec4<f32> = u_xlat6;
  let x_305 : vec4<f32> = x_272.x_MainLightWorldToShadow[0i][3i];
  let x_307 : vec3<f32> = (vec3<f32>(x_301.x, x_301.y, x_301.z) + vec3<f32>(x_305.x, x_305.y, x_305.z));
  let x_308 : vec4<f32> = u_xlat6;
  u_xlat6 = vec4<f32>(x_307.x, x_307.y, x_307.z, x_308.w);
  let x_312 : f32 = x_272.x_MainLightShadowParams.y;
  u_xlatb63 = (0.0f < x_312);
  let x_314 : bool = u_xlatb63;
  if (x_314) {
    let x_319 : f32 = x_272.x_MainLightShadowParams.y;
    u_xlatb64 = (x_319 == 1.0f);
    let x_321 : bool = u_xlatb64;
    if (x_321) {
      let x_325 : vec4<f32> = u_xlat6;
      let x_329 : vec4<f32> = x_272.x_MainLightShadowOffset0;
      u_xlat7 = (vec4<f32>(x_325.x, x_325.y, x_325.x, x_325.y) + x_329);
      let x_332 : vec4<f32> = u_xlat7;
      let x_333 : vec2<f32> = vec2<f32>(x_332.x, x_332.y);
      let x_335 : f32 = u_xlat6.z;
      txVec0 = vec3<f32>(x_333.x, x_333.y, x_335);
      let x_348 : vec3<f32> = txVec0;
      let x_350 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_348.xy, x_348.z);
      u_xlat8.x = x_350;
      let x_353 : vec4<f32> = u_xlat7;
      let x_354 : vec2<f32> = vec2<f32>(x_353.z, x_353.w);
      let x_356 : f32 = u_xlat6.z;
      txVec1 = vec3<f32>(x_354.x, x_354.y, x_356);
      let x_363 : vec3<f32> = txVec1;
      let x_365 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_363.xy, x_363.z);
      u_xlat8.y = x_365;
      let x_367 : vec4<f32> = u_xlat6;
      let x_370 : vec4<f32> = x_272.x_MainLightShadowOffset1;
      u_xlat7 = (vec4<f32>(x_367.x, x_367.y, x_367.x, x_367.y) + x_370);
      let x_373 : vec4<f32> = u_xlat7;
      let x_374 : vec2<f32> = vec2<f32>(x_373.x, x_373.y);
      let x_376 : f32 = u_xlat6.z;
      txVec2 = vec3<f32>(x_374.x, x_374.y, x_376);
      let x_383 : vec3<f32> = txVec2;
      let x_385 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_383.xy, x_383.z);
      u_xlat8.z = x_385;
      let x_388 : vec4<f32> = u_xlat7;
      let x_389 : vec2<f32> = vec2<f32>(x_388.z, x_388.w);
      let x_391 : f32 = u_xlat6.z;
      txVec3 = vec3<f32>(x_389.x, x_389.y, x_391);
      let x_398 : vec3<f32> = txVec3;
      let x_400 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_398.xy, x_398.z);
      u_xlat8.w = x_400;
      let x_402 : vec4<f32> = u_xlat8;
      u_xlat64 = dot(x_402, vec4<f32>(0.25f, 0.25f, 0.25f, 0.25f));
    } else {
      let x_409 : f32 = x_272.x_MainLightShadowParams.y;
      u_xlatb65 = (x_409 == 2.0f);
      let x_411 : bool = u_xlatb65;
      if (x_411) {
        let x_414 : vec4<f32> = u_xlat6;
        let x_417 : vec4<f32> = x_272.x_MainLightShadowmapSize;
        let x_422 : vec2<f32> = ((vec2<f32>(x_414.x, x_414.y) * vec2<f32>(x_417.z, x_417.w)) + vec2<f32>(0.5f, 0.5f));
        let x_423 : vec4<f32> = u_xlat7;
        u_xlat7 = vec4<f32>(x_422.x, x_422.y, x_423.z, x_423.w);
        let x_425 : vec4<f32> = u_xlat7;
        let x_427 : vec2<f32> = floor(vec2<f32>(x_425.x, x_425.y));
        let x_428 : vec4<f32> = u_xlat7;
        u_xlat7 = vec4<f32>(x_427.x, x_427.y, x_428.z, x_428.w);
        let x_432 : vec4<f32> = u_xlat6;
        let x_435 : vec4<f32> = x_272.x_MainLightShadowmapSize;
        let x_438 : vec4<f32> = u_xlat7;
        u_xlat49 = ((vec2<f32>(x_432.x, x_432.y) * vec2<f32>(x_435.z, x_435.w)) + -(vec2<f32>(x_438.x, x_438.y)));
        let x_442 : vec2<f32> = u_xlat49;
        u_xlat8 = (vec4<f32>(x_442.x, x_442.x, x_442.y, x_442.y) + vec4<f32>(0.5f, 1.0f, 0.5f, 1.0f));
        let x_447 : vec4<f32> = u_xlat8;
        let x_449 : vec4<f32> = u_xlat8;
        u_xlat9 = (vec4<f32>(x_447.x, x_447.x, x_447.z, x_447.z) * vec4<f32>(x_449.x, x_449.x, x_449.z, x_449.z));
        let x_452 : vec4<f32> = u_xlat9;
        let x_456 : vec2<f32> = (vec2<f32>(x_452.y, x_452.w) * vec2<f32>(0.079999998f, 0.079999998f));
        let x_457 : vec4<f32> = u_xlat8;
        u_xlat8 = vec4<f32>(x_456.x, x_457.y, x_456.y, x_457.w);
        let x_459 : vec4<f32> = u_xlat9;
        let x_462 : vec2<f32> = u_xlat49;
        let x_464 : vec2<f32> = ((vec2<f32>(x_459.x, x_459.z) * vec2<f32>(0.5f, 0.5f)) + -(x_462));
        let x_465 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_464.x, x_464.y, x_465.z, x_465.w);
        let x_468 : vec2<f32> = u_xlat49;
        u_xlat51 = (-(x_468) + vec2<f32>(1.0f, 1.0f));
        let x_473 : vec2<f32> = u_xlat49;
        let x_475 : vec2<f32> = min(x_473, vec2<f32>(0.0f, 0.0f));
        let x_476 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_475.x, x_475.y, x_476.z, x_476.w);
        let x_478 : vec4<f32> = u_xlat10;
        let x_481 : vec4<f32> = u_xlat10;
        let x_484 : vec2<f32> = u_xlat51;
        let x_485 : vec2<f32> = ((-(vec2<f32>(x_478.x, x_478.y)) * vec2<f32>(x_481.x, x_481.y)) + x_484);
        let x_486 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_485.x, x_485.y, x_486.z, x_486.w);
        let x_488 : vec2<f32> = u_xlat49;
        u_xlat49 = max(x_488, vec2<f32>(0.0f, 0.0f));
        let x_490 : vec2<f32> = u_xlat49;
        let x_492 : vec2<f32> = u_xlat49;
        let x_494 : vec4<f32> = u_xlat8;
        u_xlat49 = ((-(x_490) * x_492) + vec2<f32>(x_494.y, x_494.w));
        let x_497 : vec4<f32> = u_xlat10;
        let x_499 : vec2<f32> = (vec2<f32>(x_497.x, x_497.y) + vec2<f32>(1.0f, 1.0f));
        let x_500 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_499.x, x_499.y, x_500.z, x_500.w);
        let x_502 : vec2<f32> = u_xlat49;
        u_xlat49 = (x_502 + vec2<f32>(1.0f, 1.0f));
        let x_505 : vec4<f32> = u_xlat9;
        let x_509 : vec2<f32> = (vec2<f32>(x_505.x, x_505.y) * vec2<f32>(0.159999996f, 0.159999996f));
        let x_510 : vec4<f32> = u_xlat11;
        u_xlat11 = vec4<f32>(x_509.x, x_509.y, x_510.z, x_510.w);
        let x_512 : vec2<f32> = u_xlat51;
        let x_513 : vec2<f32> = (x_512 * vec2<f32>(0.159999996f, 0.159999996f));
        let x_514 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_513.x, x_513.y, x_514.z, x_514.w);
        let x_516 : vec4<f32> = u_xlat10;
        let x_518 : vec2<f32> = (vec2<f32>(x_516.x, x_516.y) * vec2<f32>(0.159999996f, 0.159999996f));
        let x_519 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_518.x, x_518.y, x_519.z, x_519.w);
        let x_522 : vec2<f32> = u_xlat49;
        let x_523 : vec2<f32> = (x_522 * vec2<f32>(0.159999996f, 0.159999996f));
        let x_524 : vec4<f32> = u_xlat12;
        u_xlat12 = vec4<f32>(x_523.x, x_523.y, x_524.z, x_524.w);
        let x_526 : vec4<f32> = u_xlat8;
        u_xlat49 = (vec2<f32>(x_526.y, x_526.w) * vec2<f32>(0.159999996f, 0.159999996f));
        let x_530 : f32 = u_xlat10.x;
        u_xlat11.z = x_530;
        let x_533 : f32 = u_xlat49.x;
        u_xlat11.w = x_533;
        let x_536 : f32 = u_xlat12.x;
        u_xlat9.z = x_536;
        let x_539 : f32 = u_xlat8.x;
        u_xlat9.w = x_539;
        let x_542 : vec4<f32> = u_xlat9;
        let x_544 : vec4<f32> = u_xlat11;
        u_xlat13 = (vec4<f32>(x_542.z, x_542.w, x_542.x, x_542.z) + vec4<f32>(x_544.z, x_544.w, x_544.x, x_544.z));
        let x_548 : f32 = u_xlat11.y;
        u_xlat10.z = x_548;
        let x_551 : f32 = u_xlat49.y;
        u_xlat10.w = x_551;
        let x_554 : f32 = u_xlat9.y;
        u_xlat12.z = x_554;
        let x_557 : f32 = u_xlat8.z;
        u_xlat12.w = x_557;
        let x_559 : vec4<f32> = u_xlat10;
        let x_561 : vec4<f32> = u_xlat12;
        let x_563 : vec3<f32> = (vec3<f32>(x_559.z, x_559.y, x_559.w) + vec3<f32>(x_561.z, x_561.y, x_561.w));
        let x_564 : vec4<f32> = u_xlat8;
        u_xlat8 = vec4<f32>(x_563.x, x_563.y, x_563.z, x_564.w);
        let x_566 : vec4<f32> = u_xlat9;
        let x_568 : vec4<f32> = u_xlat13;
        let x_570 : vec3<f32> = (vec3<f32>(x_566.x, x_566.z, x_566.w) / vec3<f32>(x_568.z, x_568.w, x_568.y));
        let x_571 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_570.x, x_570.y, x_570.z, x_571.w);
        let x_573 : vec4<f32> = u_xlat9;
        let x_579 : vec3<f32> = (vec3<f32>(x_573.x, x_573.y, x_573.z) + vec3<f32>(-2.5f, -0.5f, 1.5f));
        let x_580 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_579.x, x_579.y, x_579.z, x_580.w);
        let x_582 : vec4<f32> = u_xlat12;
        let x_584 : vec4<f32> = u_xlat8;
        let x_586 : vec3<f32> = (vec3<f32>(x_582.z, x_582.y, x_582.w) / vec3<f32>(x_584.x, x_584.y, x_584.z));
        let x_587 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_586.x, x_586.y, x_586.z, x_587.w);
        let x_589 : vec4<f32> = u_xlat10;
        let x_591 : vec3<f32> = (vec3<f32>(x_589.x, x_589.y, x_589.z) + vec3<f32>(-2.5f, -0.5f, 1.5f));
        let x_592 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_591.x, x_591.y, x_591.z, x_592.w);
        let x_594 : vec4<f32> = u_xlat9;
        let x_597 : vec4<f32> = x_272.x_MainLightShadowmapSize;
        let x_599 : vec3<f32> = (vec3<f32>(x_594.y, x_594.x, x_594.z) * vec3<f32>(x_597.x, x_597.x, x_597.x));
        let x_600 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_599.x, x_599.y, x_599.z, x_600.w);
        let x_602 : vec4<f32> = u_xlat10;
        let x_605 : vec4<f32> = x_272.x_MainLightShadowmapSize;
        let x_607 : vec3<f32> = (vec3<f32>(x_602.x, x_602.y, x_602.z) * vec3<f32>(x_605.y, x_605.y, x_605.y));
        let x_608 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_607.x, x_607.y, x_607.z, x_608.w);
        let x_611 : f32 = u_xlat10.x;
        u_xlat9.w = x_611;
        let x_613 : vec4<f32> = u_xlat7;
        let x_616 : vec4<f32> = x_272.x_MainLightShadowmapSize;
        let x_619 : vec4<f32> = u_xlat9;
        u_xlat11 = ((vec4<f32>(x_613.x, x_613.y, x_613.x, x_613.y) * vec4<f32>(x_616.x, x_616.y, x_616.x, x_616.y)) + vec4<f32>(x_619.y, x_619.w, x_619.x, x_619.w));
        let x_622 : vec4<f32> = u_xlat7;
        let x_625 : vec4<f32> = x_272.x_MainLightShadowmapSize;
        let x_628 : vec4<f32> = u_xlat9;
        u_xlat49 = ((vec2<f32>(x_622.x, x_622.y) * vec2<f32>(x_625.x, x_625.y)) + vec2<f32>(x_628.z, x_628.w));
        let x_632 : f32 = u_xlat9.y;
        u_xlat10.w = x_632;
        let x_634 : vec4<f32> = u_xlat10;
        let x_635 : vec2<f32> = vec2<f32>(x_634.y, x_634.z);
        let x_636 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_636.x, x_635.x, x_636.z, x_635.y);
        let x_638 : vec4<f32> = u_xlat7;
        let x_641 : vec4<f32> = x_272.x_MainLightShadowmapSize;
        let x_644 : vec4<f32> = u_xlat9;
        u_xlat12 = ((vec4<f32>(x_638.x, x_638.y, x_638.x, x_638.y) * vec4<f32>(x_641.x, x_641.y, x_641.x, x_641.y)) + vec4<f32>(x_644.x, x_644.y, x_644.z, x_644.y));
        let x_647 : vec4<f32> = u_xlat7;
        let x_650 : vec4<f32> = x_272.x_MainLightShadowmapSize;
        let x_653 : vec4<f32> = u_xlat10;
        u_xlat10 = ((vec4<f32>(x_647.x, x_647.y, x_647.x, x_647.y) * vec4<f32>(x_650.x, x_650.y, x_650.x, x_650.y)) + vec4<f32>(x_653.w, x_653.y, x_653.w, x_653.z));
        let x_656 : vec4<f32> = u_xlat7;
        let x_659 : vec4<f32> = x_272.x_MainLightShadowmapSize;
        let x_662 : vec4<f32> = u_xlat9;
        u_xlat9 = ((vec4<f32>(x_656.x, x_656.y, x_656.x, x_656.y) * vec4<f32>(x_659.x, x_659.y, x_659.x, x_659.y)) + vec4<f32>(x_662.x, x_662.w, x_662.z, x_662.w));
        let x_666 : vec4<f32> = u_xlat8;
        let x_668 : vec4<f32> = u_xlat13;
        u_xlat14 = (vec4<f32>(x_666.x, x_666.x, x_666.x, x_666.y) * vec4<f32>(x_668.z, x_668.w, x_668.y, x_668.z));
        let x_672 : vec4<f32> = u_xlat8;
        let x_674 : vec4<f32> = u_xlat13;
        u_xlat15 = (vec4<f32>(x_672.y, x_672.y, x_672.z, x_672.z) * x_674);
        let x_678 : f32 = u_xlat8.z;
        let x_680 : f32 = u_xlat13.y;
        u_xlat65 = (x_678 * x_680);
        let x_683 : vec4<f32> = u_xlat11;
        let x_684 : vec2<f32> = vec2<f32>(x_683.x, x_683.y);
        let x_686 : f32 = u_xlat6.z;
        txVec4 = vec3<f32>(x_684.x, x_684.y, x_686);
        let x_694 : vec3<f32> = txVec4;
        let x_696 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_694.xy, x_694.z);
        u_xlat67 = x_696;
        let x_698 : vec4<f32> = u_xlat11;
        let x_699 : vec2<f32> = vec2<f32>(x_698.z, x_698.w);
        let x_701 : f32 = u_xlat6.z;
        txVec5 = vec3<f32>(x_699.x, x_699.y, x_701);
        let x_709 : vec3<f32> = txVec5;
        let x_711 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_709.xy, x_709.z);
        u_xlat69 = x_711;
        let x_712 : f32 = u_xlat69;
        let x_714 : f32 = u_xlat14.y;
        u_xlat69 = (x_712 * x_714);
        let x_717 : f32 = u_xlat14.x;
        let x_718 : f32 = u_xlat67;
        let x_720 : f32 = u_xlat69;
        u_xlat67 = ((x_717 * x_718) + x_720);
        let x_723 : vec2<f32> = u_xlat49;
        let x_725 : f32 = u_xlat6.z;
        txVec6 = vec3<f32>(x_723.x, x_723.y, x_725);
        let x_732 : vec3<f32> = txVec6;
        let x_734 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_732.xy, x_732.z);
        u_xlat69 = x_734;
        let x_736 : f32 = u_xlat14.z;
        let x_737 : f32 = u_xlat69;
        let x_739 : f32 = u_xlat67;
        u_xlat67 = ((x_736 * x_737) + x_739);
        let x_742 : vec4<f32> = u_xlat10;
        let x_743 : vec2<f32> = vec2<f32>(x_742.x, x_742.y);
        let x_745 : f32 = u_xlat6.z;
        txVec7 = vec3<f32>(x_743.x, x_743.y, x_745);
        let x_752 : vec3<f32> = txVec7;
        let x_754 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_752.xy, x_752.z);
        u_xlat69 = x_754;
        let x_756 : f32 = u_xlat14.w;
        let x_757 : f32 = u_xlat69;
        let x_759 : f32 = u_xlat67;
        u_xlat67 = ((x_756 * x_757) + x_759);
        let x_762 : vec4<f32> = u_xlat12;
        let x_763 : vec2<f32> = vec2<f32>(x_762.x, x_762.y);
        let x_765 : f32 = u_xlat6.z;
        txVec8 = vec3<f32>(x_763.x, x_763.y, x_765);
        let x_772 : vec3<f32> = txVec8;
        let x_774 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_772.xy, x_772.z);
        u_xlat69 = x_774;
        let x_776 : f32 = u_xlat15.x;
        let x_777 : f32 = u_xlat69;
        let x_779 : f32 = u_xlat67;
        u_xlat67 = ((x_776 * x_777) + x_779);
        let x_782 : vec4<f32> = u_xlat12;
        let x_783 : vec2<f32> = vec2<f32>(x_782.z, x_782.w);
        let x_785 : f32 = u_xlat6.z;
        txVec9 = vec3<f32>(x_783.x, x_783.y, x_785);
        let x_792 : vec3<f32> = txVec9;
        let x_794 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_792.xy, x_792.z);
        u_xlat69 = x_794;
        let x_796 : f32 = u_xlat15.y;
        let x_797 : f32 = u_xlat69;
        let x_799 : f32 = u_xlat67;
        u_xlat67 = ((x_796 * x_797) + x_799);
        let x_802 : vec4<f32> = u_xlat10;
        let x_803 : vec2<f32> = vec2<f32>(x_802.z, x_802.w);
        let x_805 : f32 = u_xlat6.z;
        txVec10 = vec3<f32>(x_803.x, x_803.y, x_805);
        let x_812 : vec3<f32> = txVec10;
        let x_814 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_812.xy, x_812.z);
        u_xlat69 = x_814;
        let x_816 : f32 = u_xlat15.z;
        let x_817 : f32 = u_xlat69;
        let x_819 : f32 = u_xlat67;
        u_xlat67 = ((x_816 * x_817) + x_819);
        let x_822 : vec4<f32> = u_xlat9;
        let x_823 : vec2<f32> = vec2<f32>(x_822.x, x_822.y);
        let x_825 : f32 = u_xlat6.z;
        txVec11 = vec3<f32>(x_823.x, x_823.y, x_825);
        let x_832 : vec3<f32> = txVec11;
        let x_834 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_832.xy, x_832.z);
        u_xlat69 = x_834;
        let x_836 : f32 = u_xlat15.w;
        let x_837 : f32 = u_xlat69;
        let x_839 : f32 = u_xlat67;
        u_xlat67 = ((x_836 * x_837) + x_839);
        let x_842 : vec4<f32> = u_xlat9;
        let x_843 : vec2<f32> = vec2<f32>(x_842.z, x_842.w);
        let x_845 : f32 = u_xlat6.z;
        txVec12 = vec3<f32>(x_843.x, x_843.y, x_845);
        let x_852 : vec3<f32> = txVec12;
        let x_854 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_852.xy, x_852.z);
        u_xlat69 = x_854;
        let x_855 : f32 = u_xlat65;
        let x_856 : f32 = u_xlat69;
        let x_858 : f32 = u_xlat67;
        u_xlat64 = ((x_855 * x_856) + x_858);
      } else {
        let x_861 : vec4<f32> = u_xlat6;
        let x_864 : vec4<f32> = x_272.x_MainLightShadowmapSize;
        let x_867 : vec2<f32> = ((vec2<f32>(x_861.x, x_861.y) * vec2<f32>(x_864.z, x_864.w)) + vec2<f32>(0.5f, 0.5f));
        let x_868 : vec4<f32> = u_xlat7;
        u_xlat7 = vec4<f32>(x_867.x, x_867.y, x_868.z, x_868.w);
        let x_870 : vec4<f32> = u_xlat7;
        let x_872 : vec2<f32> = floor(vec2<f32>(x_870.x, x_870.y));
        let x_873 : vec4<f32> = u_xlat7;
        u_xlat7 = vec4<f32>(x_872.x, x_872.y, x_873.z, x_873.w);
        let x_875 : vec4<f32> = u_xlat6;
        let x_878 : vec4<f32> = x_272.x_MainLightShadowmapSize;
        let x_881 : vec4<f32> = u_xlat7;
        u_xlat49 = ((vec2<f32>(x_875.x, x_875.y) * vec2<f32>(x_878.z, x_878.w)) + -(vec2<f32>(x_881.x, x_881.y)));
        let x_885 : vec2<f32> = u_xlat49;
        u_xlat8 = (vec4<f32>(x_885.x, x_885.x, x_885.y, x_885.y) + vec4<f32>(0.5f, 1.0f, 0.5f, 1.0f));
        let x_888 : vec4<f32> = u_xlat8;
        let x_890 : vec4<f32> = u_xlat8;
        u_xlat9 = (vec4<f32>(x_888.x, x_888.x, x_888.z, x_888.z) * vec4<f32>(x_890.x, x_890.x, x_890.z, x_890.z));
        let x_893 : vec4<f32> = u_xlat9;
        let x_897 : vec2<f32> = (vec2<f32>(x_893.y, x_893.w) * vec2<f32>(0.040816002f, 0.040816002f));
        let x_898 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_898.x, x_897.x, x_898.z, x_897.y);
        let x_900 : vec4<f32> = u_xlat9;
        let x_903 : vec2<f32> = u_xlat49;
        let x_905 : vec2<f32> = ((vec2<f32>(x_900.x, x_900.z) * vec2<f32>(0.5f, 0.5f)) + -(x_903));
        let x_906 : vec4<f32> = u_xlat8;
        u_xlat8 = vec4<f32>(x_905.x, x_906.y, x_905.y, x_906.w);
        let x_908 : vec2<f32> = u_xlat49;
        let x_910 : vec2<f32> = (-(x_908) + vec2<f32>(1.0f, 1.0f));
        let x_911 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_910.x, x_910.y, x_911.z, x_911.w);
        let x_913 : vec2<f32> = u_xlat49;
        u_xlat51 = min(x_913, vec2<f32>(0.0f, 0.0f));
        let x_915 : vec2<f32> = u_xlat51;
        let x_917 : vec2<f32> = u_xlat51;
        let x_919 : vec4<f32> = u_xlat9;
        let x_921 : vec2<f32> = ((-(x_915) * x_917) + vec2<f32>(x_919.x, x_919.y));
        let x_922 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_921.x, x_921.y, x_922.z, x_922.w);
        let x_924 : vec2<f32> = u_xlat49;
        u_xlat51 = max(x_924, vec2<f32>(0.0f, 0.0f));
        let x_927 : vec2<f32> = u_xlat51;
        let x_929 : vec2<f32> = u_xlat51;
        let x_931 : vec4<f32> = u_xlat8;
        let x_933 : vec2<f32> = ((-(x_927) * x_929) + vec2<f32>(x_931.y, x_931.w));
        let x_934 : vec3<f32> = u_xlat29;
        u_xlat29 = vec3<f32>(x_933.x, x_934.y, x_933.y);
        let x_936 : vec4<f32> = u_xlat9;
        let x_939 : vec2<f32> = (vec2<f32>(x_936.x, x_936.y) + vec2<f32>(2.0f, 2.0f));
        let x_940 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_939.x, x_939.y, x_940.z, x_940.w);
        let x_942 : vec3<f32> = u_xlat29;
        let x_944 : vec2<f32> = (vec2<f32>(x_942.x, x_942.z) + vec2<f32>(2.0f, 2.0f));
        let x_945 : vec4<f32> = u_xlat8;
        u_xlat8 = vec4<f32>(x_945.x, x_944.x, x_945.z, x_944.y);
        let x_948 : f32 = u_xlat8.y;
        u_xlat11.z = (x_948 * 0.081632003f);
        let x_952 : vec4<f32> = u_xlat8;
        let x_955 : vec3<f32> = (vec3<f32>(x_952.z, x_952.x, x_952.w) * vec3<f32>(0.081632003f, 0.081632003f, 0.081632003f));
        let x_956 : vec4<f32> = u_xlat12;
        u_xlat12 = vec4<f32>(x_955.x, x_955.y, x_955.z, x_956.w);
        let x_958 : vec4<f32> = u_xlat9;
        let x_961 : vec2<f32> = (vec2<f32>(x_958.x, x_958.y) * vec2<f32>(0.081632003f, 0.081632003f));
        let x_962 : vec4<f32> = u_xlat8;
        u_xlat8 = vec4<f32>(x_961.x, x_961.y, x_962.z, x_962.w);
        let x_965 : f32 = u_xlat12.y;
        u_xlat11.x = x_965;
        let x_967 : vec2<f32> = u_xlat49;
        let x_974 : vec2<f32> = ((vec2<f32>(x_967.x, x_967.x) * vec2<f32>(-0.081632003f, 0.081632003f)) + vec2<f32>(0.163264006f, 0.081632003f));
        let x_975 : vec4<f32> = u_xlat11;
        u_xlat11 = vec4<f32>(x_975.x, x_974.x, x_975.z, x_974.y);
        let x_977 : vec2<f32> = u_xlat49;
        let x_981 : vec2<f32> = ((vec2<f32>(x_977.x, x_977.x) * vec2<f32>(-0.081632003f, 0.081632003f)) + vec2<f32>(0.081632003f, 0.163264006f));
        let x_982 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_981.x, x_982.y, x_981.y, x_982.w);
        let x_985 : f32 = u_xlat8.x;
        u_xlat9.y = x_985;
        let x_988 : f32 = u_xlat10.y;
        u_xlat9.w = x_988;
        let x_990 : vec4<f32> = u_xlat9;
        let x_991 : vec4<f32> = u_xlat11;
        u_xlat11 = (x_990 + x_991);
        let x_993 : vec2<f32> = u_xlat49;
        let x_996 : vec2<f32> = ((vec2<f32>(x_993.y, x_993.y) * vec2<f32>(-0.081632003f, 0.081632003f)) + vec2<f32>(0.163264006f, 0.081632003f));
        let x_997 : vec4<f32> = u_xlat12;
        u_xlat12 = vec4<f32>(x_997.x, x_996.x, x_997.z, x_996.y);
        let x_999 : vec2<f32> = u_xlat49;
        let x_1002 : vec2<f32> = ((vec2<f32>(x_999.y, x_999.y) * vec2<f32>(-0.081632003f, 0.081632003f)) + vec2<f32>(0.081632003f, 0.163264006f));
        let x_1003 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_1002.x, x_1003.y, x_1002.y, x_1003.w);
        let x_1006 : f32 = u_xlat8.y;
        u_xlat10.y = x_1006;
        let x_1008 : vec4<f32> = u_xlat10;
        let x_1009 : vec4<f32> = u_xlat12;
        u_xlat8 = (x_1008 + x_1009);
        let x_1011 : vec4<f32> = u_xlat9;
        let x_1012 : vec4<f32> = u_xlat11;
        u_xlat9 = (x_1011 / x_1012);
        let x_1014 : vec4<f32> = u_xlat9;
        u_xlat9 = (x_1014 + vec4<f32>(-3.5f, -1.5f, 0.5f, 2.5f));
        let x_1020 : vec4<f32> = u_xlat10;
        let x_1021 : vec4<f32> = u_xlat8;
        u_xlat10 = (x_1020 / x_1021);
        let x_1023 : vec4<f32> = u_xlat10;
        u_xlat10 = (x_1023 + vec4<f32>(-3.5f, -1.5f, 0.5f, 2.5f));
        let x_1025 : vec4<f32> = u_xlat9;
        let x_1028 : vec4<f32> = x_272.x_MainLightShadowmapSize;
        u_xlat9 = (vec4<f32>(x_1025.w, x_1025.x, x_1025.y, x_1025.z) * vec4<f32>(x_1028.x, x_1028.x, x_1028.x, x_1028.x));
        let x_1031 : vec4<f32> = u_xlat10;
        let x_1034 : vec4<f32> = x_272.x_MainLightShadowmapSize;
        u_xlat10 = (vec4<f32>(x_1031.x, x_1031.w, x_1031.y, x_1031.z) * vec4<f32>(x_1034.y, x_1034.y, x_1034.y, x_1034.y));
        let x_1037 : vec4<f32> = u_xlat9;
        let x_1038 : vec3<f32> = vec3<f32>(x_1037.y, x_1037.z, x_1037.w);
        let x_1039 : vec4<f32> = u_xlat12;
        u_xlat12 = vec4<f32>(x_1038.x, x_1039.y, x_1038.y, x_1038.z);
        let x_1042 : f32 = u_xlat10.x;
        u_xlat12.y = x_1042;
        let x_1044 : vec4<f32> = u_xlat7;
        let x_1047 : vec4<f32> = x_272.x_MainLightShadowmapSize;
        let x_1050 : vec4<f32> = u_xlat12;
        u_xlat13 = ((vec4<f32>(x_1044.x, x_1044.y, x_1044.x, x_1044.y) * vec4<f32>(x_1047.x, x_1047.y, x_1047.x, x_1047.y)) + vec4<f32>(x_1050.x, x_1050.y, x_1050.z, x_1050.y));
        let x_1053 : vec4<f32> = u_xlat7;
        let x_1056 : vec4<f32> = x_272.x_MainLightShadowmapSize;
        let x_1059 : vec4<f32> = u_xlat12;
        u_xlat49 = ((vec2<f32>(x_1053.x, x_1053.y) * vec2<f32>(x_1056.x, x_1056.y)) + vec2<f32>(x_1059.w, x_1059.y));
        let x_1063 : f32 = u_xlat12.y;
        u_xlat9.y = x_1063;
        let x_1066 : f32 = u_xlat10.z;
        u_xlat12.y = x_1066;
        let x_1068 : vec4<f32> = u_xlat7;
        let x_1071 : vec4<f32> = x_272.x_MainLightShadowmapSize;
        let x_1074 : vec4<f32> = u_xlat12;
        u_xlat14 = ((vec4<f32>(x_1068.x, x_1068.y, x_1068.x, x_1068.y) * vec4<f32>(x_1071.x, x_1071.y, x_1071.x, x_1071.y)) + vec4<f32>(x_1074.x, x_1074.y, x_1074.z, x_1074.y));
        let x_1077 : vec4<f32> = u_xlat7;
        let x_1080 : vec4<f32> = x_272.x_MainLightShadowmapSize;
        let x_1083 : vec4<f32> = u_xlat12;
        let x_1085 : vec2<f32> = ((vec2<f32>(x_1077.x, x_1077.y) * vec2<f32>(x_1080.x, x_1080.y)) + vec2<f32>(x_1083.w, x_1083.y));
        let x_1086 : vec4<f32> = u_xlat15;
        u_xlat15 = vec4<f32>(x_1085.x, x_1085.y, x_1086.z, x_1086.w);
        let x_1089 : f32 = u_xlat12.y;
        u_xlat9.z = x_1089;
        let x_1092 : vec4<f32> = u_xlat7;
        let x_1095 : vec4<f32> = x_272.x_MainLightShadowmapSize;
        let x_1098 : vec4<f32> = u_xlat9;
        u_xlat16 = ((vec4<f32>(x_1092.x, x_1092.y, x_1092.x, x_1092.y) * vec4<f32>(x_1095.x, x_1095.y, x_1095.x, x_1095.y)) + vec4<f32>(x_1098.x, x_1098.y, x_1098.x, x_1098.z));
        let x_1102 : f32 = u_xlat10.w;
        u_xlat12.y = x_1102;
        let x_1105 : vec4<f32> = u_xlat7;
        let x_1108 : vec4<f32> = x_272.x_MainLightShadowmapSize;
        let x_1111 : vec4<f32> = u_xlat12;
        u_xlat17 = ((vec4<f32>(x_1105.x, x_1105.y, x_1105.x, x_1105.y) * vec4<f32>(x_1108.x, x_1108.y, x_1108.x, x_1108.y)) + vec4<f32>(x_1111.x, x_1111.y, x_1111.z, x_1111.y));
        let x_1115 : vec4<f32> = u_xlat7;
        let x_1118 : vec4<f32> = x_272.x_MainLightShadowmapSize;
        let x_1121 : vec4<f32> = u_xlat12;
        u_xlat30 = ((vec2<f32>(x_1115.x, x_1115.y) * vec2<f32>(x_1118.x, x_1118.y)) + vec2<f32>(x_1121.w, x_1121.y));
        let x_1125 : f32 = u_xlat12.y;
        u_xlat9.w = x_1125;
        let x_1128 : vec4<f32> = u_xlat7;
        let x_1131 : vec4<f32> = x_272.x_MainLightShadowmapSize;
        let x_1134 : vec4<f32> = u_xlat9;
        u_xlat57 = ((vec2<f32>(x_1128.x, x_1128.y) * vec2<f32>(x_1131.x, x_1131.y)) + vec2<f32>(x_1134.x, x_1134.w));
        let x_1137 : vec4<f32> = u_xlat12;
        let x_1138 : vec3<f32> = vec3<f32>(x_1137.x, x_1137.z, x_1137.w);
        let x_1139 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_1138.x, x_1139.y, x_1138.y, x_1138.z);
        let x_1141 : vec4<f32> = u_xlat7;
        let x_1144 : vec4<f32> = x_272.x_MainLightShadowmapSize;
        let x_1147 : vec4<f32> = u_xlat10;
        u_xlat12 = ((vec4<f32>(x_1141.x, x_1141.y, x_1141.x, x_1141.y) * vec4<f32>(x_1144.x, x_1144.y, x_1144.x, x_1144.y)) + vec4<f32>(x_1147.x, x_1147.y, x_1147.z, x_1147.y));
        let x_1151 : vec4<f32> = u_xlat7;
        let x_1154 : vec4<f32> = x_272.x_MainLightShadowmapSize;
        let x_1157 : vec4<f32> = u_xlat10;
        u_xlat52 = ((vec2<f32>(x_1151.x, x_1151.y) * vec2<f32>(x_1154.x, x_1154.y)) + vec2<f32>(x_1157.w, x_1157.y));
        let x_1161 : f32 = u_xlat9.x;
        u_xlat10.x = x_1161;
        let x_1163 : vec4<f32> = u_xlat7;
        let x_1166 : vec4<f32> = x_272.x_MainLightShadowmapSize;
        let x_1169 : vec4<f32> = u_xlat10;
        let x_1171 : vec2<f32> = ((vec2<f32>(x_1163.x, x_1163.y) * vec2<f32>(x_1166.x, x_1166.y)) + vec2<f32>(x_1169.x, x_1169.y));
        let x_1172 : vec4<f32> = u_xlat7;
        u_xlat7 = vec4<f32>(x_1171.x, x_1171.y, x_1172.z, x_1172.w);
        let x_1175 : vec4<f32> = u_xlat8;
        let x_1177 : vec4<f32> = u_xlat11;
        u_xlat18 = (vec4<f32>(x_1175.x, x_1175.x, x_1175.x, x_1175.x) * x_1177);
        let x_1180 : vec4<f32> = u_xlat8;
        let x_1182 : vec4<f32> = u_xlat11;
        u_xlat19 = (vec4<f32>(x_1180.y, x_1180.y, x_1180.y, x_1180.y) * x_1182);
        let x_1185 : vec4<f32> = u_xlat8;
        let x_1187 : vec4<f32> = u_xlat11;
        u_xlat20 = (vec4<f32>(x_1185.z, x_1185.z, x_1185.z, x_1185.z) * x_1187);
        let x_1189 : vec4<f32> = u_xlat8;
        let x_1191 : vec4<f32> = u_xlat11;
        u_xlat8 = (vec4<f32>(x_1189.w, x_1189.w, x_1189.w, x_1189.w) * x_1191);
        let x_1194 : vec4<f32> = u_xlat13;
        let x_1195 : vec2<f32> = vec2<f32>(x_1194.x, x_1194.y);
        let x_1197 : f32 = u_xlat6.z;
        txVec13 = vec3<f32>(x_1195.x, x_1195.y, x_1197);
        let x_1204 : vec3<f32> = txVec13;
        let x_1206 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1204.xy, x_1204.z);
        u_xlat65 = x_1206;
        let x_1208 : vec4<f32> = u_xlat13;
        let x_1209 : vec2<f32> = vec2<f32>(x_1208.z, x_1208.w);
        let x_1211 : f32 = u_xlat6.z;
        txVec14 = vec3<f32>(x_1209.x, x_1209.y, x_1211);
        let x_1218 : vec3<f32> = txVec14;
        let x_1220 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1218.xy, x_1218.z);
        u_xlat67 = x_1220;
        let x_1221 : f32 = u_xlat67;
        let x_1223 : f32 = u_xlat18.y;
        u_xlat67 = (x_1221 * x_1223);
        let x_1226 : f32 = u_xlat18.x;
        let x_1227 : f32 = u_xlat65;
        let x_1229 : f32 = u_xlat67;
        u_xlat65 = ((x_1226 * x_1227) + x_1229);
        let x_1232 : vec2<f32> = u_xlat49;
        let x_1234 : f32 = u_xlat6.z;
        txVec15 = vec3<f32>(x_1232.x, x_1232.y, x_1234);
        let x_1241 : vec3<f32> = txVec15;
        let x_1243 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1241.xy, x_1241.z);
        u_xlat67 = x_1243;
        let x_1245 : f32 = u_xlat18.z;
        let x_1246 : f32 = u_xlat67;
        let x_1248 : f32 = u_xlat65;
        u_xlat65 = ((x_1245 * x_1246) + x_1248);
        let x_1251 : vec4<f32> = u_xlat16;
        let x_1252 : vec2<f32> = vec2<f32>(x_1251.x, x_1251.y);
        let x_1254 : f32 = u_xlat6.z;
        txVec16 = vec3<f32>(x_1252.x, x_1252.y, x_1254);
        let x_1261 : vec3<f32> = txVec16;
        let x_1263 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1261.xy, x_1261.z);
        u_xlat67 = x_1263;
        let x_1265 : f32 = u_xlat18.w;
        let x_1266 : f32 = u_xlat67;
        let x_1268 : f32 = u_xlat65;
        u_xlat65 = ((x_1265 * x_1266) + x_1268);
        let x_1271 : vec4<f32> = u_xlat14;
        let x_1272 : vec2<f32> = vec2<f32>(x_1271.x, x_1271.y);
        let x_1274 : f32 = u_xlat6.z;
        txVec17 = vec3<f32>(x_1272.x, x_1272.y, x_1274);
        let x_1281 : vec3<f32> = txVec17;
        let x_1283 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1281.xy, x_1281.z);
        u_xlat67 = x_1283;
        let x_1285 : f32 = u_xlat19.x;
        let x_1286 : f32 = u_xlat67;
        let x_1288 : f32 = u_xlat65;
        u_xlat65 = ((x_1285 * x_1286) + x_1288);
        let x_1291 : vec4<f32> = u_xlat14;
        let x_1292 : vec2<f32> = vec2<f32>(x_1291.z, x_1291.w);
        let x_1294 : f32 = u_xlat6.z;
        txVec18 = vec3<f32>(x_1292.x, x_1292.y, x_1294);
        let x_1301 : vec3<f32> = txVec18;
        let x_1303 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1301.xy, x_1301.z);
        u_xlat67 = x_1303;
        let x_1305 : f32 = u_xlat19.y;
        let x_1306 : f32 = u_xlat67;
        let x_1308 : f32 = u_xlat65;
        u_xlat65 = ((x_1305 * x_1306) + x_1308);
        let x_1311 : vec4<f32> = u_xlat15;
        let x_1312 : vec2<f32> = vec2<f32>(x_1311.x, x_1311.y);
        let x_1314 : f32 = u_xlat6.z;
        txVec19 = vec3<f32>(x_1312.x, x_1312.y, x_1314);
        let x_1321 : vec3<f32> = txVec19;
        let x_1323 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1321.xy, x_1321.z);
        u_xlat67 = x_1323;
        let x_1325 : f32 = u_xlat19.z;
        let x_1326 : f32 = u_xlat67;
        let x_1328 : f32 = u_xlat65;
        u_xlat65 = ((x_1325 * x_1326) + x_1328);
        let x_1331 : vec4<f32> = u_xlat16;
        let x_1332 : vec2<f32> = vec2<f32>(x_1331.z, x_1331.w);
        let x_1334 : f32 = u_xlat6.z;
        txVec20 = vec3<f32>(x_1332.x, x_1332.y, x_1334);
        let x_1341 : vec3<f32> = txVec20;
        let x_1343 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1341.xy, x_1341.z);
        u_xlat67 = x_1343;
        let x_1345 : f32 = u_xlat19.w;
        let x_1346 : f32 = u_xlat67;
        let x_1348 : f32 = u_xlat65;
        u_xlat65 = ((x_1345 * x_1346) + x_1348);
        let x_1351 : vec4<f32> = u_xlat17;
        let x_1352 : vec2<f32> = vec2<f32>(x_1351.x, x_1351.y);
        let x_1354 : f32 = u_xlat6.z;
        txVec21 = vec3<f32>(x_1352.x, x_1352.y, x_1354);
        let x_1361 : vec3<f32> = txVec21;
        let x_1363 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1361.xy, x_1361.z);
        u_xlat67 = x_1363;
        let x_1365 : f32 = u_xlat20.x;
        let x_1366 : f32 = u_xlat67;
        let x_1368 : f32 = u_xlat65;
        u_xlat65 = ((x_1365 * x_1366) + x_1368);
        let x_1371 : vec4<f32> = u_xlat17;
        let x_1372 : vec2<f32> = vec2<f32>(x_1371.z, x_1371.w);
        let x_1374 : f32 = u_xlat6.z;
        txVec22 = vec3<f32>(x_1372.x, x_1372.y, x_1374);
        let x_1381 : vec3<f32> = txVec22;
        let x_1383 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1381.xy, x_1381.z);
        u_xlat67 = x_1383;
        let x_1385 : f32 = u_xlat20.y;
        let x_1386 : f32 = u_xlat67;
        let x_1388 : f32 = u_xlat65;
        u_xlat65 = ((x_1385 * x_1386) + x_1388);
        let x_1391 : vec2<f32> = u_xlat30;
        let x_1393 : f32 = u_xlat6.z;
        txVec23 = vec3<f32>(x_1391.x, x_1391.y, x_1393);
        let x_1400 : vec3<f32> = txVec23;
        let x_1402 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1400.xy, x_1400.z);
        u_xlat67 = x_1402;
        let x_1404 : f32 = u_xlat20.z;
        let x_1405 : f32 = u_xlat67;
        let x_1407 : f32 = u_xlat65;
        u_xlat65 = ((x_1404 * x_1405) + x_1407);
        let x_1410 : vec2<f32> = u_xlat57;
        let x_1412 : f32 = u_xlat6.z;
        txVec24 = vec3<f32>(x_1410.x, x_1410.y, x_1412);
        let x_1419 : vec3<f32> = txVec24;
        let x_1421 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1419.xy, x_1419.z);
        u_xlat67 = x_1421;
        let x_1423 : f32 = u_xlat20.w;
        let x_1424 : f32 = u_xlat67;
        let x_1426 : f32 = u_xlat65;
        u_xlat65 = ((x_1423 * x_1424) + x_1426);
        let x_1429 : vec4<f32> = u_xlat12;
        let x_1430 : vec2<f32> = vec2<f32>(x_1429.x, x_1429.y);
        let x_1432 : f32 = u_xlat6.z;
        txVec25 = vec3<f32>(x_1430.x, x_1430.y, x_1432);
        let x_1439 : vec3<f32> = txVec25;
        let x_1441 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1439.xy, x_1439.z);
        u_xlat67 = x_1441;
        let x_1443 : f32 = u_xlat8.x;
        let x_1444 : f32 = u_xlat67;
        let x_1446 : f32 = u_xlat65;
        u_xlat65 = ((x_1443 * x_1444) + x_1446);
        let x_1449 : vec4<f32> = u_xlat12;
        let x_1450 : vec2<f32> = vec2<f32>(x_1449.z, x_1449.w);
        let x_1452 : f32 = u_xlat6.z;
        txVec26 = vec3<f32>(x_1450.x, x_1450.y, x_1452);
        let x_1459 : vec3<f32> = txVec26;
        let x_1461 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1459.xy, x_1459.z);
        u_xlat67 = x_1461;
        let x_1463 : f32 = u_xlat8.y;
        let x_1464 : f32 = u_xlat67;
        let x_1466 : f32 = u_xlat65;
        u_xlat65 = ((x_1463 * x_1464) + x_1466);
        let x_1469 : vec2<f32> = u_xlat52;
        let x_1471 : f32 = u_xlat6.z;
        txVec27 = vec3<f32>(x_1469.x, x_1469.y, x_1471);
        let x_1478 : vec3<f32> = txVec27;
        let x_1480 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1478.xy, x_1478.z);
        u_xlat67 = x_1480;
        let x_1482 : f32 = u_xlat8.z;
        let x_1483 : f32 = u_xlat67;
        let x_1485 : f32 = u_xlat65;
        u_xlat65 = ((x_1482 * x_1483) + x_1485);
        let x_1488 : vec4<f32> = u_xlat7;
        let x_1489 : vec2<f32> = vec2<f32>(x_1488.x, x_1488.y);
        let x_1491 : f32 = u_xlat6.z;
        txVec28 = vec3<f32>(x_1489.x, x_1489.y, x_1491);
        let x_1498 : vec3<f32> = txVec28;
        let x_1500 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1498.xy, x_1498.z);
        u_xlat67 = x_1500;
        let x_1502 : f32 = u_xlat8.w;
        let x_1503 : f32 = u_xlat67;
        let x_1505 : f32 = u_xlat65;
        u_xlat64 = ((x_1502 * x_1503) + x_1505);
      }
    }
  } else {
    let x_1509 : vec4<f32> = u_xlat6;
    let x_1510 : vec2<f32> = vec2<f32>(x_1509.x, x_1509.y);
    let x_1512 : f32 = u_xlat6.z;
    txVec29 = vec3<f32>(x_1510.x, x_1510.y, x_1512);
    let x_1519 : vec3<f32> = txVec29;
    let x_1521 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1519.xy, x_1519.z);
    u_xlat64 = x_1521;
  }
  let x_1523 : f32 = x_272.x_MainLightShadowParams.x;
  u_xlat65 = (-(x_1523) + 1.0f);
  let x_1526 : f32 = u_xlat64;
  let x_1528 : f32 = x_272.x_MainLightShadowParams.x;
  let x_1530 : f32 = u_xlat65;
  u_xlat64 = ((x_1526 * x_1528) + x_1530);
  let x_1534 : f32 = u_xlat6.z;
  u_xlatb67 = (0.0f >= x_1534);
  let x_1538 : f32 = u_xlat6.z;
  u_xlatb6 = (x_1538 >= 1.0f);
  let x_1540 : bool = u_xlatb67;
  let x_1541 : bool = u_xlatb6;
  u_xlatb67 = (x_1540 | x_1541);
  let x_1543 : bool = u_xlatb67;
  let x_1544 : f32 = u_xlat64;
  u_xlat64 = select(x_1544, 1.0f, x_1543);
  let x_1546 : vec3<f32> = u_xlat0;
  let x_1548 : vec4<f32> = x_90.x_MainLightPosition;
  u_xlat0.x = dot(x_1546, -(vec3<f32>(x_1548.x, x_1548.y, x_1548.z)));
  let x_1554 : f32 = u_xlat0.x;
  u_xlat0.x = clamp(x_1554, 0.0f, 1.0f);
  let x_1557 : f32 = u_xlat64;
  let x_1561 : vec4<f32> = x_90.x_MainLightColor;
  let x_1563 : vec3<f32> = (vec3<f32>(x_1557, x_1557, x_1557) * vec3<f32>(x_1561.x, x_1561.y, x_1561.z));
  let x_1564 : vec4<f32> = u_xlat6;
  u_xlat6 = vec4<f32>(x_1563.x, x_1563.y, x_1563.z, x_1564.w);
  let x_1566 : vec3<f32> = u_xlat0;
  let x_1568 : vec4<f32> = u_xlat6;
  u_xlat0 = (vec3<f32>(x_1566.x, x_1566.x, x_1566.x) * vec3<f32>(x_1568.x, x_1568.y, x_1568.z));
  let x_1571 : vec3<f32> = u_xlat0;
  let x_1572 : vec4<f32> = u_xlat3;
  u_xlat0 = (x_1571 * vec3<f32>(x_1572.x, x_1572.y, x_1572.z));
  let x_1576 : f32 = x_161.unity_LODFade.x;
  u_xlatb64 = (x_1576 < 0.0f);
  let x_1579 : f32 = x_161.unity_LODFade.x;
  u_xlat3.x = (x_1579 + 1.0f);
  let x_1582 : bool = u_xlatb64;
  if (x_1582) {
    let x_1587 : f32 = u_xlat3.x;
    x_1583 = x_1587;
  } else {
    let x_1590 : f32 = x_161.unity_LODFade.x;
    x_1583 = x_1590;
  }
  let x_1591 : f32 = x_1583;
  u_xlat64 = x_1591;
  let x_1593 : f32 = u_xlat64;
  u_xlatb3 = (0.5f >= x_1593);
  let x_1595 : vec3<f32> = u_xlat1;
  let x_1598 : vec4<f32> = x_90.x_ScreenParams;
  u_xlat1 = (abs(x_1595) * vec3<f32>(x_1598.x, x_1598.y, x_1598.x));
  let x_1604 : vec3<f32> = u_xlat1;
  u_xlatu1 = vec3<u32>(x_1604);
  let x_1608 : u32 = u_xlatu1.z;
  u_xlatu43 = (x_1608 * 1025u);
  let x_1612 : u32 = u_xlatu43;
  u_xlatu24 = (x_1612 >> 6u);
  let x_1616 : u32 = u_xlatu43;
  let x_1617 : u32 = u_xlatu24;
  u_xlati43 = bitcast<i32>((x_1616 ^ x_1617));
  let x_1620 : i32 = u_xlati43;
  u_xlatu43 = (bitcast<u32>(x_1620) * 9u);
  let x_1624 : u32 = u_xlatu43;
  u_xlatu24 = (x_1624 >> 11u);
  let x_1627 : u32 = u_xlatu43;
  let x_1628 : u32 = u_xlatu24;
  u_xlati43 = bitcast<i32>((x_1627 ^ x_1628));
  let x_1631 : i32 = u_xlati43;
  u_xlati43 = (x_1631 * 32769i);
  let x_1635 : i32 = u_xlati43;
  let x_1638 : u32 = u_xlatu1.y;
  u_xlati22 = bitcast<i32>((bitcast<u32>(x_1635) ^ x_1638));
  let x_1642 : i32 = u_xlati22;
  u_xlatu22 = (bitcast<u32>(x_1642) * 1025u);
  let x_1645 : u32 = u_xlatu22;
  u_xlatu43 = (x_1645 >> 6u);
  let x_1647 : u32 = u_xlatu43;
  let x_1648 : u32 = u_xlatu22;
  u_xlati22 = bitcast<i32>((x_1647 ^ x_1648));
  let x_1651 : i32 = u_xlati22;
  u_xlatu22 = (bitcast<u32>(x_1651) * 9u);
  let x_1654 : u32 = u_xlatu22;
  u_xlatu43 = (x_1654 >> 11u);
  let x_1656 : u32 = u_xlatu43;
  let x_1657 : u32 = u_xlatu22;
  u_xlati22 = bitcast<i32>((x_1656 ^ x_1657));
  let x_1660 : i32 = u_xlati22;
  u_xlati22 = (x_1660 * 32769i);
  let x_1663 : i32 = u_xlati22;
  let x_1666 : u32 = u_xlatu1.x;
  u_xlati1 = bitcast<i32>((bitcast<u32>(x_1663) ^ x_1666));
  let x_1669 : i32 = u_xlati1;
  u_xlatu1.x = (bitcast<u32>(x_1669) * 1025u);
  let x_1674 : u32 = u_xlatu1.x;
  u_xlatu22 = (x_1674 >> 6u);
  let x_1676 : u32 = u_xlatu22;
  let x_1678 : u32 = u_xlatu1.x;
  u_xlati1 = bitcast<i32>((x_1676 ^ x_1678));
  let x_1681 : i32 = u_xlati1;
  u_xlatu1.x = (bitcast<u32>(x_1681) * 9u);
  let x_1686 : u32 = u_xlatu1.x;
  u_xlatu22 = (x_1686 >> 11u);
  let x_1688 : u32 = u_xlatu22;
  let x_1690 : u32 = u_xlatu1.x;
  u_xlati1 = bitcast<i32>((x_1688 ^ x_1690));
  let x_1693 : i32 = u_xlati1;
  u_xlati1 = (x_1693 * 32769i);
  param = 1065353216i;
  let x_1699 : i32 = u_xlati1;
  param_1 = x_1699;
  param_2 = 0i;
  param_3 = 23i;
  let x_1702 : i32 = int_bitfieldInsert_i1_i1_i1_i1_(&(param), &(param_1), &(param_2), &(param_3));
  u_xlat1.x = bitcast<f32>(x_1702);
  let x_1706 : f32 = u_xlat1.x;
  u_xlat1.x = (x_1706 + -1.0f);
  let x_1711 : f32 = u_xlat1.x;
  u_xlat22 = (-(x_1711) + 1.0f);
  let x_1714 : bool = u_xlatb3;
  if (x_1714) {
    let x_1719 : f32 = u_xlat1.x;
    x_1715 = x_1719;
  } else {
    let x_1721 : f32 = u_xlat22;
    x_1715 = x_1721;
  }
  let x_1722 : f32 = x_1715;
  u_xlat1.x = x_1722;
  let x_1724 : f32 = u_xlat64;
  let x_1727 : f32 = u_xlat1.x;
  u_xlat1.x = ((x_1724 * 2.0f) + -(x_1727));
  let x_1732 : f32 = u_xlat1.x;
  let x_1734 : f32 = u_xlat3.w;
  u_xlat22 = (x_1732 * x_1734);
  let x_1739 : f32 = u_xlat22;
  u_xlatb43.x = (x_1739 >= 0.400000006f);
  let x_1745 : bool = u_xlatb43.x;
  let x_1746 : f32 = u_xlat22;
  u_xlat43.x = select(0.0f, x_1746, x_1745);
  let x_1750 : f32 = u_xlat3.w;
  let x_1752 : f32 = u_xlat1.x;
  u_xlat1.x = ((x_1750 * x_1752) + -0.400000006f);
  let x_1757 : f32 = u_xlat22;
  u_xlat64 = dpdxCoarse(x_1757);
  let x_1759 : f32 = u_xlat22;
  u_xlat22 = dpdyCoarse(x_1759);
  let x_1761 : f32 = u_xlat22;
  let x_1763 : f32 = u_xlat64;
  u_xlat22 = (abs(x_1761) + abs(x_1763));
  let x_1766 : f32 = u_xlat22;
  u_xlat22 = max(x_1766, 0.0001f);
  let x_1770 : f32 = u_xlat1.x;
  let x_1771 : f32 = u_xlat22;
  u_xlat1.x = (x_1770 / x_1771);
  let x_1775 : f32 = u_xlat1.x;
  u_xlat1.x = (x_1775 + 0.5f);
  let x_1779 : f32 = u_xlat1.x;
  u_xlat1.x = clamp(x_1779, 0.0f, 1.0f);
  let x_1784 : f32 = x_90.x_AlphaToMaskAvailable;
  u_xlatb22 = !((x_1784 == 0.0f));
  let x_1786 : bool = u_xlatb22;
  if (x_1786) {
    let x_1791 : f32 = u_xlat1.x;
    x_1787 = x_1791;
  } else {
    let x_1794 : f32 = u_xlat43.x;
    x_1787 = x_1794;
  }
  let x_1795 : f32 = x_1787;
  u_xlat1.x = x_1795;
  let x_1798 : f32 = u_xlat1.x;
  u_xlat43.x = (x_1798 + -0.0001f);
  let x_1803 : f32 = u_xlat43.x;
  u_xlatb43.x = (x_1803 < 0.0f);
  let x_1807 : bool = u_xlatb43.x;
  if (((select(0i, 1i, x_1807) * -1i) != 0i)) {
    discard;
  }
  let x_1817 : f32 = vs_INTERP2.w;
  u_xlatb43.x = (0.0f < x_1817);
  let x_1821 : f32 = x_161.unity_WorldTransformParams.w;
  u_xlatb43.y = (x_1821 >= 0.0f);
  let x_1825 : bool = u_xlatb43.x;
  u_xlat43.x = select(-1.0f, 1.0f, x_1825);
  let x_1829 : bool = u_xlatb43.y;
  u_xlat43.y = select(-1.0f, 1.0f, x_1829);
  let x_1833 : f32 = u_xlat43.y;
  let x_1835 : f32 = u_xlat43.x;
  u_xlat43.x = (x_1833 * x_1835);
  let x_1838 : vec3<f32> = vs_INTERP1;
  let x_1840 : vec4<f32> = vs_INTERP2;
  let x_1842 : vec3<f32> = (vec3<f32>(x_1838.z, x_1838.x, x_1838.y) * vec3<f32>(x_1840.y, x_1840.z, x_1840.x));
  let x_1843 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_1842.x, x_1842.y, x_1842.z, x_1843.w);
  let x_1845 : vec3<f32> = vs_INTERP1;
  let x_1847 : vec4<f32> = vs_INTERP2;
  let x_1850 : vec4<f32> = u_xlat3;
  let x_1853 : vec3<f32> = ((vec3<f32>(x_1845.y, x_1845.z, x_1845.x) * vec3<f32>(x_1847.z, x_1847.x, x_1847.y)) + -(vec3<f32>(x_1850.x, x_1850.y, x_1850.z)));
  let x_1854 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_1853.x, x_1853.y, x_1853.z, x_1854.w);
  let x_1856 : vec2<f32> = u_xlat43;
  let x_1858 : vec4<f32> = u_xlat3;
  let x_1860 : vec3<f32> = (vec3<f32>(x_1856.x, x_1856.x, x_1856.x) * vec3<f32>(x_1858.x, x_1858.y, x_1858.z));
  let x_1861 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_1860.x, x_1860.y, x_1860.z, x_1861.w);
  let x_1863 : vec4<f32> = u_xlat3;
  let x_1865 : vec3<f32> = u_xlat26;
  let x_1867 : vec3<f32> = (vec3<f32>(x_1863.x, x_1863.y, x_1863.z) * vec3<f32>(x_1865.y, x_1865.y, x_1865.y));
  let x_1868 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_1867.x, x_1867.y, x_1867.z, x_1868.w);
  let x_1870 : vec3<f32> = u_xlat26;
  let x_1872 : vec4<f32> = vs_INTERP2;
  let x_1875 : vec4<f32> = u_xlat3;
  let x_1877 : vec3<f32> = ((vec3<f32>(x_1870.x, x_1870.x, x_1870.x) * vec3<f32>(x_1872.x, x_1872.y, x_1872.z)) + vec3<f32>(x_1875.x, x_1875.y, x_1875.z));
  let x_1878 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_1877.x, x_1877.y, x_1877.z, x_1878.w);
  let x_1880 : vec3<f32> = u_xlat26;
  let x_1882 : vec3<f32> = vs_INTERP1;
  let x_1884 : vec4<f32> = u_xlat3;
  let x_1886 : vec3<f32> = ((vec3<f32>(x_1880.z, x_1880.z, x_1880.z) * x_1882) + vec3<f32>(x_1884.x, x_1884.y, x_1884.z));
  let x_1887 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_1886.x, x_1886.y, x_1886.z, x_1887.w);
  let x_1889 : vec4<f32> = u_xlat3;
  let x_1891 : vec4<f32> = u_xlat3;
  u_xlat43.x = dot(vec3<f32>(x_1889.x, x_1889.y, x_1889.z), vec3<f32>(x_1891.x, x_1891.y, x_1891.z));
  let x_1896 : f32 = u_xlat43.x;
  u_xlat43.x = inverseSqrt(x_1896);
  let x_1899 : vec2<f32> = u_xlat43;
  let x_1901 : vec4<f32> = u_xlat3;
  let x_1903 : vec3<f32> = (vec3<f32>(x_1899.x, x_1899.x, x_1899.x) * vec3<f32>(x_1901.x, x_1901.y, x_1901.z));
  let x_1904 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_1903.x, x_1903.y, x_1903.z, x_1904.w);
  let x_1913 : vec2<f32> = vs_INTERP5;
  let x_1915 : f32 = x_90.x_GlobalMipBias.x;
  let x_1916 : vec4<f32> = textureSampleBias(unity_Lightmap, samplerunity_Lightmap, x_1913, x_1915);
  u_xlat26 = vec3<f32>(x_1916.x, x_1916.y, x_1916.z);
  let x_1919 : vec4<f32> = x_90.x_ScaledScreenParams;
  let x_1920 : vec2<f32> = vec2<f32>(x_1919.x, x_1919.y);
  u_xlat43 = (vec2<f32>(1.0f, 1.0f) / vec2<f32>(x_1920.x, x_1920.y));
  let x_1925 : vec2<f32> = u_xlat43;
  let x_1926 : vec4<f32> = hlslcc_FragCoord;
  let x_1928 : vec2<f32> = (x_1925 * vec2<f32>(x_1926.x, x_1926.y));
  let x_1929 : vec4<f32> = u_xlat6;
  u_xlat6 = vec4<f32>(x_1928.x, x_1928.y, x_1929.z, x_1929.w);
  let x_1932 : f32 = u_xlat6.y;
  let x_1935 : f32 = x_90.x_ScaleBiasRt.x;
  let x_1938 : f32 = x_90.x_ScaleBiasRt.y;
  u_xlat43.x = ((x_1932 * x_1935) + x_1938);
  let x_1942 : f32 = u_xlat43.x;
  u_xlat6.z = (-(x_1942) + 1.0f);
  let x_1947 : f32 = u_xlat5.x;
  u_xlat5.x = x_1947;
  let x_1950 : f32 = u_xlat5.x;
  u_xlat5.x = clamp(x_1950, 0.0f, 1.0f);
  let x_1954 : f32 = u_xlat1.x;
  u_xlat1.x = x_1954;
  let x_1957 : f32 = u_xlat1.x;
  u_xlat1.x = clamp(x_1957, 0.0f, 1.0f);
  let x_1960 : vec3<f32> = u_xlat4;
  u_xlat4 = (x_1960 * vec3<f32>(0.959999979f, 0.959999979f, 0.959999979f));
  let x_1965 : f32 = u_xlat5.x;
  u_xlat43.x = (-(x_1965) + 1.0f);
  let x_1970 : f32 = u_xlat43.x;
  let x_1972 : f32 = u_xlat43.x;
  u_xlat64 = (x_1970 * x_1972);
  let x_1974 : f32 = u_xlat64;
  u_xlat64 = max(x_1974, 0.0078125f);
  let x_1978 : f32 = u_xlat64;
  let x_1979 : f32 = u_xlat64;
  u_xlat66 = (x_1978 * x_1979);
  let x_1982 : f32 = u_xlat5.x;
  u_xlat67 = (x_1982 + 0.040000021f);
  let x_1985 : f32 = u_xlat67;
  u_xlat67 = min(x_1985, 1.0f);
  let x_1987 : f32 = u_xlat64;
  u_xlat5.x = ((x_1987 * 4.0f) + 2.0f);
  let x_1997 : vec4<f32> = u_xlat6;
  let x_2000 : f32 = x_90.x_GlobalMipBias.x;
  let x_2001 : vec4<f32> = textureSampleBias(x_ScreenSpaceOcclusionTexture, sampler_ScreenSpaceOcclusionTexture, vec2<f32>(x_1997.x, x_1997.z), x_2000);
  u_xlat6.x = x_2001.x;
  let x_2006 : f32 = u_xlat6.x;
  u_xlat27 = (x_2006 + -1.0f);
  let x_2010 : f32 = x_90.x_AmbientOcclusionParam.w;
  let x_2011 : f32 = u_xlat27;
  u_xlat27 = ((x_2010 * x_2011) + 1.0f);
  let x_2015 : f32 = u_xlat6.x;
  let x_2017 : f32 = vs_INTERP4.w;
  u_xlat6.x = min(x_2015, x_2017);
  let x_2020 : bool = u_xlatb63;
  if (x_2020) {
    let x_2024 : f32 = x_272.x_MainLightShadowParams.y;
    u_xlatb63 = (x_2024 == 1.0f);
    let x_2026 : bool = u_xlatb63;
    if (x_2026) {
      let x_2030 : vec4<f32> = vs_INTERP9;
      let x_2033 : vec4<f32> = x_272.x_MainLightShadowOffset0;
      u_xlat7 = (vec4<f32>(x_2030.x, x_2030.y, x_2030.x, x_2030.y) + x_2033);
      let x_2036 : vec4<f32> = u_xlat7;
      let x_2037 : vec2<f32> = vec2<f32>(x_2036.x, x_2036.y);
      let x_2039 : f32 = vs_INTERP9.z;
      txVec30 = vec3<f32>(x_2037.x, x_2037.y, x_2039);
      let x_2046 : vec3<f32> = txVec30;
      let x_2048 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2046.xy, x_2046.z);
      u_xlat8.x = x_2048;
      let x_2051 : vec4<f32> = u_xlat7;
      let x_2052 : vec2<f32> = vec2<f32>(x_2051.z, x_2051.w);
      let x_2054 : f32 = vs_INTERP9.z;
      txVec31 = vec3<f32>(x_2052.x, x_2052.y, x_2054);
      let x_2061 : vec3<f32> = txVec31;
      let x_2063 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2061.xy, x_2061.z);
      u_xlat8.y = x_2063;
      let x_2065 : vec4<f32> = vs_INTERP9;
      let x_2068 : vec4<f32> = x_272.x_MainLightShadowOffset1;
      u_xlat7 = (vec4<f32>(x_2065.x, x_2065.y, x_2065.x, x_2065.y) + x_2068);
      let x_2071 : vec4<f32> = u_xlat7;
      let x_2072 : vec2<f32> = vec2<f32>(x_2071.x, x_2071.y);
      let x_2074 : f32 = vs_INTERP9.z;
      txVec32 = vec3<f32>(x_2072.x, x_2072.y, x_2074);
      let x_2081 : vec3<f32> = txVec32;
      let x_2083 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2081.xy, x_2081.z);
      u_xlat8.z = x_2083;
      let x_2086 : vec4<f32> = u_xlat7;
      let x_2087 : vec2<f32> = vec2<f32>(x_2086.z, x_2086.w);
      let x_2089 : f32 = vs_INTERP9.z;
      txVec33 = vec3<f32>(x_2087.x, x_2087.y, x_2089);
      let x_2096 : vec3<f32> = txVec33;
      let x_2098 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2096.xy, x_2096.z);
      u_xlat8.w = x_2098;
      let x_2100 : vec4<f32> = u_xlat8;
      u_xlat63 = dot(x_2100, vec4<f32>(0.25f, 0.25f, 0.25f, 0.25f));
    } else {
      let x_2105 : f32 = x_272.x_MainLightShadowParams.y;
      u_xlatb48.x = (x_2105 == 2.0f);
      let x_2109 : bool = u_xlatb48.x;
      if (x_2109) {
        let x_2113 : vec4<f32> = vs_INTERP9;
        let x_2116 : vec4<f32> = x_272.x_MainLightShadowmapSize;
        u_xlat48 = ((vec2<f32>(x_2113.x, x_2113.y) * vec2<f32>(x_2116.z, x_2116.w)) + vec2<f32>(0.5f, 0.5f));
        let x_2120 : vec2<f32> = u_xlat48;
        u_xlat48 = floor(x_2120);
        let x_2122 : vec4<f32> = vs_INTERP9;
        let x_2125 : vec4<f32> = x_272.x_MainLightShadowmapSize;
        let x_2128 : vec2<f32> = u_xlat48;
        let x_2130 : vec2<f32> = ((vec2<f32>(x_2122.x, x_2122.y) * vec2<f32>(x_2125.z, x_2125.w)) + -(x_2128));
        let x_2131 : vec4<f32> = u_xlat7;
        u_xlat7 = vec4<f32>(x_2130.x, x_2130.y, x_2131.z, x_2131.w);
        let x_2133 : vec4<f32> = u_xlat7;
        u_xlat8 = (vec4<f32>(x_2133.x, x_2133.x, x_2133.y, x_2133.y) + vec4<f32>(0.5f, 1.0f, 0.5f, 1.0f));
        let x_2136 : vec4<f32> = u_xlat8;
        let x_2138 : vec4<f32> = u_xlat8;
        u_xlat9 = (vec4<f32>(x_2136.x, x_2136.x, x_2136.z, x_2136.z) * vec4<f32>(x_2138.x, x_2138.x, x_2138.z, x_2138.z));
        let x_2141 : vec4<f32> = u_xlat9;
        u_xlat49 = (vec2<f32>(x_2141.y, x_2141.w) * vec2<f32>(0.079999998f, 0.079999998f));
        let x_2144 : vec4<f32> = u_xlat9;
        let x_2147 : vec4<f32> = u_xlat7;
        let x_2150 : vec2<f32> = ((vec2<f32>(x_2144.x, x_2144.z) * vec2<f32>(0.5f, 0.5f)) + -(vec2<f32>(x_2147.x, x_2147.y)));
        let x_2151 : vec4<f32> = u_xlat8;
        u_xlat8 = vec4<f32>(x_2150.x, x_2151.y, x_2150.y, x_2151.w);
        let x_2153 : vec4<f32> = u_xlat7;
        let x_2156 : vec2<f32> = (-(vec2<f32>(x_2153.x, x_2153.y)) + vec2<f32>(1.0f, 1.0f));
        let x_2157 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_2156.x, x_2156.y, x_2157.z, x_2157.w);
        let x_2159 : vec4<f32> = u_xlat7;
        u_xlat51 = min(vec2<f32>(x_2159.x, x_2159.y), vec2<f32>(0.0f, 0.0f));
        let x_2162 : vec2<f32> = u_xlat51;
        let x_2164 : vec2<f32> = u_xlat51;
        let x_2166 : vec4<f32> = u_xlat9;
        u_xlat51 = ((-(x_2162) * x_2164) + vec2<f32>(x_2166.x, x_2166.y));
        let x_2169 : vec4<f32> = u_xlat7;
        let x_2171 : vec2<f32> = max(vec2<f32>(x_2169.x, x_2169.y), vec2<f32>(0.0f, 0.0f));
        let x_2172 : vec4<f32> = u_xlat7;
        u_xlat7 = vec4<f32>(x_2171.x, x_2171.y, x_2172.z, x_2172.w);
        let x_2174 : vec4<f32> = u_xlat7;
        let x_2177 : vec4<f32> = u_xlat7;
        let x_2180 : vec4<f32> = u_xlat8;
        let x_2182 : vec2<f32> = ((-(vec2<f32>(x_2174.x, x_2174.y)) * vec2<f32>(x_2177.x, x_2177.y)) + vec2<f32>(x_2180.y, x_2180.w));
        let x_2183 : vec4<f32> = u_xlat7;
        u_xlat7 = vec4<f32>(x_2182.x, x_2182.y, x_2183.z, x_2183.w);
        let x_2185 : vec2<f32> = u_xlat51;
        u_xlat51 = (x_2185 + vec2<f32>(1.0f, 1.0f));
        let x_2187 : vec4<f32> = u_xlat7;
        let x_2189 : vec2<f32> = (vec2<f32>(x_2187.x, x_2187.y) + vec2<f32>(1.0f, 1.0f));
        let x_2190 : vec4<f32> = u_xlat7;
        u_xlat7 = vec4<f32>(x_2189.x, x_2189.y, x_2190.z, x_2190.w);
        let x_2192 : vec4<f32> = u_xlat8;
        let x_2194 : vec2<f32> = (vec2<f32>(x_2192.x, x_2192.z) * vec2<f32>(0.159999996f, 0.159999996f));
        let x_2195 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_2194.x, x_2194.y, x_2195.z, x_2195.w);
        let x_2197 : vec4<f32> = u_xlat9;
        let x_2199 : vec2<f32> = (vec2<f32>(x_2197.x, x_2197.y) * vec2<f32>(0.159999996f, 0.159999996f));
        let x_2200 : vec4<f32> = u_xlat11;
        u_xlat11 = vec4<f32>(x_2199.x, x_2199.y, x_2200.z, x_2200.w);
        let x_2202 : vec2<f32> = u_xlat51;
        let x_2203 : vec2<f32> = (x_2202 * vec2<f32>(0.159999996f, 0.159999996f));
        let x_2204 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_2203.x, x_2203.y, x_2204.z, x_2204.w);
        let x_2206 : vec4<f32> = u_xlat7;
        let x_2208 : vec2<f32> = (vec2<f32>(x_2206.x, x_2206.y) * vec2<f32>(0.159999996f, 0.159999996f));
        let x_2209 : vec4<f32> = u_xlat12;
        u_xlat12 = vec4<f32>(x_2208.x, x_2208.y, x_2209.z, x_2209.w);
        let x_2211 : vec4<f32> = u_xlat8;
        let x_2213 : vec2<f32> = (vec2<f32>(x_2211.y, x_2211.w) * vec2<f32>(0.159999996f, 0.159999996f));
        let x_2214 : vec4<f32> = u_xlat7;
        u_xlat7 = vec4<f32>(x_2213.x, x_2213.y, x_2214.z, x_2214.w);
        let x_2217 : f32 = u_xlat9.x;
        u_xlat10.z = x_2217;
        let x_2220 : f32 = u_xlat7.x;
        u_xlat10.w = x_2220;
        let x_2223 : f32 = u_xlat12.x;
        u_xlat11.z = x_2223;
        let x_2226 : f32 = u_xlat49.x;
        u_xlat11.w = x_2226;
        let x_2228 : vec4<f32> = u_xlat10;
        let x_2230 : vec4<f32> = u_xlat11;
        u_xlat8 = (vec4<f32>(x_2228.z, x_2228.w, x_2228.x, x_2228.z) + vec4<f32>(x_2230.z, x_2230.w, x_2230.x, x_2230.z));
        let x_2234 : f32 = u_xlat10.y;
        u_xlat9.z = x_2234;
        let x_2237 : f32 = u_xlat7.y;
        u_xlat9.w = x_2237;
        let x_2240 : f32 = u_xlat11.y;
        u_xlat12.z = x_2240;
        let x_2243 : f32 = u_xlat49.y;
        u_xlat12.w = x_2243;
        let x_2245 : vec4<f32> = u_xlat9;
        let x_2247 : vec4<f32> = u_xlat12;
        let x_2249 : vec3<f32> = (vec3<f32>(x_2245.z, x_2245.y, x_2245.w) + vec3<f32>(x_2247.z, x_2247.y, x_2247.w));
        let x_2250 : vec4<f32> = u_xlat7;
        u_xlat7 = vec4<f32>(x_2249.x, x_2249.y, x_2249.z, x_2250.w);
        let x_2252 : vec4<f32> = u_xlat11;
        let x_2254 : vec4<f32> = u_xlat8;
        let x_2256 : vec3<f32> = (vec3<f32>(x_2252.x, x_2252.z, x_2252.w) / vec3<f32>(x_2254.z, x_2254.w, x_2254.y));
        let x_2257 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_2256.x, x_2256.y, x_2256.z, x_2257.w);
        let x_2259 : vec4<f32> = u_xlat9;
        let x_2261 : vec3<f32> = (vec3<f32>(x_2259.x, x_2259.y, x_2259.z) + vec3<f32>(-2.5f, -0.5f, 1.5f));
        let x_2262 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_2261.x, x_2261.y, x_2261.z, x_2262.w);
        let x_2264 : vec4<f32> = u_xlat12;
        let x_2266 : vec4<f32> = u_xlat7;
        let x_2268 : vec3<f32> = (vec3<f32>(x_2264.z, x_2264.y, x_2264.w) / vec3<f32>(x_2266.x, x_2266.y, x_2266.z));
        let x_2269 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_2268.x, x_2268.y, x_2268.z, x_2269.w);
        let x_2271 : vec4<f32> = u_xlat10;
        let x_2273 : vec3<f32> = (vec3<f32>(x_2271.x, x_2271.y, x_2271.z) + vec3<f32>(-2.5f, -0.5f, 1.5f));
        let x_2274 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_2273.x, x_2273.y, x_2273.z, x_2274.w);
        let x_2276 : vec4<f32> = u_xlat9;
        let x_2279 : vec4<f32> = x_272.x_MainLightShadowmapSize;
        let x_2281 : vec3<f32> = (vec3<f32>(x_2276.y, x_2276.x, x_2276.z) * vec3<f32>(x_2279.x, x_2279.x, x_2279.x));
        let x_2282 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_2281.x, x_2281.y, x_2281.z, x_2282.w);
        let x_2284 : vec4<f32> = u_xlat10;
        let x_2287 : vec4<f32> = x_272.x_MainLightShadowmapSize;
        let x_2289 : vec3<f32> = (vec3<f32>(x_2284.x, x_2284.y, x_2284.z) * vec3<f32>(x_2287.y, x_2287.y, x_2287.y));
        let x_2290 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_2289.x, x_2289.y, x_2289.z, x_2290.w);
        let x_2293 : f32 = u_xlat10.x;
        u_xlat9.w = x_2293;
        let x_2295 : vec2<f32> = u_xlat48;
        let x_2298 : vec4<f32> = x_272.x_MainLightShadowmapSize;
        let x_2301 : vec4<f32> = u_xlat9;
        u_xlat11 = ((vec4<f32>(x_2295.x, x_2295.y, x_2295.x, x_2295.y) * vec4<f32>(x_2298.x, x_2298.y, x_2298.x, x_2298.y)) + vec4<f32>(x_2301.y, x_2301.w, x_2301.x, x_2301.w));
        let x_2304 : vec2<f32> = u_xlat48;
        let x_2306 : vec4<f32> = x_272.x_MainLightShadowmapSize;
        let x_2309 : vec4<f32> = u_xlat9;
        let x_2311 : vec2<f32> = ((x_2304 * vec2<f32>(x_2306.x, x_2306.y)) + vec2<f32>(x_2309.z, x_2309.w));
        let x_2312 : vec4<f32> = u_xlat12;
        u_xlat12 = vec4<f32>(x_2311.x, x_2311.y, x_2312.z, x_2312.w);
        let x_2315 : f32 = u_xlat9.y;
        u_xlat10.w = x_2315;
        let x_2317 : vec4<f32> = u_xlat10;
        let x_2318 : vec2<f32> = vec2<f32>(x_2317.y, x_2317.z);
        let x_2319 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_2319.x, x_2318.x, x_2319.z, x_2318.y);
        let x_2321 : vec2<f32> = u_xlat48;
        let x_2324 : vec4<f32> = x_272.x_MainLightShadowmapSize;
        let x_2327 : vec4<f32> = u_xlat9;
        u_xlat13 = ((vec4<f32>(x_2321.x, x_2321.y, x_2321.x, x_2321.y) * vec4<f32>(x_2324.x, x_2324.y, x_2324.x, x_2324.y)) + vec4<f32>(x_2327.x, x_2327.y, x_2327.z, x_2327.y));
        let x_2330 : vec2<f32> = u_xlat48;
        let x_2333 : vec4<f32> = x_272.x_MainLightShadowmapSize;
        let x_2336 : vec4<f32> = u_xlat10;
        u_xlat10 = ((vec4<f32>(x_2330.x, x_2330.y, x_2330.x, x_2330.y) * vec4<f32>(x_2333.x, x_2333.y, x_2333.x, x_2333.y)) + vec4<f32>(x_2336.w, x_2336.y, x_2336.w, x_2336.z));
        let x_2339 : vec2<f32> = u_xlat48;
        let x_2342 : vec4<f32> = x_272.x_MainLightShadowmapSize;
        let x_2345 : vec4<f32> = u_xlat9;
        u_xlat9 = ((vec4<f32>(x_2339.x, x_2339.y, x_2339.x, x_2339.y) * vec4<f32>(x_2342.x, x_2342.y, x_2342.x, x_2342.y)) + vec4<f32>(x_2345.x, x_2345.w, x_2345.z, x_2345.w));
        let x_2348 : vec4<f32> = u_xlat7;
        let x_2350 : vec4<f32> = u_xlat8;
        u_xlat14 = (vec4<f32>(x_2348.x, x_2348.x, x_2348.x, x_2348.y) * vec4<f32>(x_2350.z, x_2350.w, x_2350.y, x_2350.z));
        let x_2353 : vec4<f32> = u_xlat7;
        let x_2355 : vec4<f32> = u_xlat8;
        u_xlat15 = (vec4<f32>(x_2353.y, x_2353.y, x_2353.z, x_2353.z) * x_2355);
        let x_2358 : f32 = u_xlat7.z;
        let x_2360 : f32 = u_xlat8.y;
        u_xlat48.x = (x_2358 * x_2360);
        let x_2364 : vec4<f32> = u_xlat11;
        let x_2365 : vec2<f32> = vec2<f32>(x_2364.x, x_2364.y);
        let x_2367 : f32 = vs_INTERP9.z;
        txVec34 = vec3<f32>(x_2365.x, x_2365.y, x_2367);
        let x_2374 : vec3<f32> = txVec34;
        let x_2376 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2374.xy, x_2374.z);
        u_xlat69 = x_2376;
        let x_2378 : vec4<f32> = u_xlat11;
        let x_2379 : vec2<f32> = vec2<f32>(x_2378.z, x_2378.w);
        let x_2381 : f32 = vs_INTERP9.z;
        txVec35 = vec3<f32>(x_2379.x, x_2379.y, x_2381);
        let x_2388 : vec3<f32> = txVec35;
        let x_2390 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2388.xy, x_2388.z);
        u_xlat7.x = x_2390;
        let x_2393 : f32 = u_xlat7.x;
        let x_2395 : f32 = u_xlat14.y;
        u_xlat7.x = (x_2393 * x_2395);
        let x_2399 : f32 = u_xlat14.x;
        let x_2400 : f32 = u_xlat69;
        let x_2403 : f32 = u_xlat7.x;
        u_xlat69 = ((x_2399 * x_2400) + x_2403);
        let x_2406 : vec4<f32> = u_xlat12;
        let x_2407 : vec2<f32> = vec2<f32>(x_2406.x, x_2406.y);
        let x_2409 : f32 = vs_INTERP9.z;
        txVec36 = vec3<f32>(x_2407.x, x_2407.y, x_2409);
        let x_2416 : vec3<f32> = txVec36;
        let x_2418 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2416.xy, x_2416.z);
        u_xlat7.x = x_2418;
        let x_2421 : f32 = u_xlat14.z;
        let x_2423 : f32 = u_xlat7.x;
        let x_2425 : f32 = u_xlat69;
        u_xlat69 = ((x_2421 * x_2423) + x_2425);
        let x_2428 : vec4<f32> = u_xlat10;
        let x_2429 : vec2<f32> = vec2<f32>(x_2428.x, x_2428.y);
        let x_2431 : f32 = vs_INTERP9.z;
        txVec37 = vec3<f32>(x_2429.x, x_2429.y, x_2431);
        let x_2438 : vec3<f32> = txVec37;
        let x_2440 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2438.xy, x_2438.z);
        u_xlat7.x = x_2440;
        let x_2443 : f32 = u_xlat14.w;
        let x_2445 : f32 = u_xlat7.x;
        let x_2447 : f32 = u_xlat69;
        u_xlat69 = ((x_2443 * x_2445) + x_2447);
        let x_2450 : vec4<f32> = u_xlat13;
        let x_2451 : vec2<f32> = vec2<f32>(x_2450.x, x_2450.y);
        let x_2453 : f32 = vs_INTERP9.z;
        txVec38 = vec3<f32>(x_2451.x, x_2451.y, x_2453);
        let x_2460 : vec3<f32> = txVec38;
        let x_2462 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2460.xy, x_2460.z);
        u_xlat7.x = x_2462;
        let x_2465 : f32 = u_xlat15.x;
        let x_2467 : f32 = u_xlat7.x;
        let x_2469 : f32 = u_xlat69;
        u_xlat69 = ((x_2465 * x_2467) + x_2469);
        let x_2472 : vec4<f32> = u_xlat13;
        let x_2473 : vec2<f32> = vec2<f32>(x_2472.z, x_2472.w);
        let x_2475 : f32 = vs_INTERP9.z;
        txVec39 = vec3<f32>(x_2473.x, x_2473.y, x_2475);
        let x_2482 : vec3<f32> = txVec39;
        let x_2484 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2482.xy, x_2482.z);
        u_xlat7.x = x_2484;
        let x_2487 : f32 = u_xlat15.y;
        let x_2489 : f32 = u_xlat7.x;
        let x_2491 : f32 = u_xlat69;
        u_xlat69 = ((x_2487 * x_2489) + x_2491);
        let x_2494 : vec4<f32> = u_xlat10;
        let x_2495 : vec2<f32> = vec2<f32>(x_2494.z, x_2494.w);
        let x_2497 : f32 = vs_INTERP9.z;
        txVec40 = vec3<f32>(x_2495.x, x_2495.y, x_2497);
        let x_2504 : vec3<f32> = txVec40;
        let x_2506 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2504.xy, x_2504.z);
        u_xlat7.x = x_2506;
        let x_2509 : f32 = u_xlat15.z;
        let x_2511 : f32 = u_xlat7.x;
        let x_2513 : f32 = u_xlat69;
        u_xlat69 = ((x_2509 * x_2511) + x_2513);
        let x_2516 : vec4<f32> = u_xlat9;
        let x_2517 : vec2<f32> = vec2<f32>(x_2516.x, x_2516.y);
        let x_2519 : f32 = vs_INTERP9.z;
        txVec41 = vec3<f32>(x_2517.x, x_2517.y, x_2519);
        let x_2526 : vec3<f32> = txVec41;
        let x_2528 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2526.xy, x_2526.z);
        u_xlat7.x = x_2528;
        let x_2531 : f32 = u_xlat15.w;
        let x_2533 : f32 = u_xlat7.x;
        let x_2535 : f32 = u_xlat69;
        u_xlat69 = ((x_2531 * x_2533) + x_2535);
        let x_2538 : vec4<f32> = u_xlat9;
        let x_2539 : vec2<f32> = vec2<f32>(x_2538.z, x_2538.w);
        let x_2541 : f32 = vs_INTERP9.z;
        txVec42 = vec3<f32>(x_2539.x, x_2539.y, x_2541);
        let x_2548 : vec3<f32> = txVec42;
        let x_2550 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2548.xy, x_2548.z);
        u_xlat7.x = x_2550;
        let x_2553 : f32 = u_xlat48.x;
        let x_2555 : f32 = u_xlat7.x;
        let x_2557 : f32 = u_xlat69;
        u_xlat63 = ((x_2553 * x_2555) + x_2557);
      } else {
        let x_2560 : vec4<f32> = vs_INTERP9;
        let x_2563 : vec4<f32> = x_272.x_MainLightShadowmapSize;
        u_xlat48 = ((vec2<f32>(x_2560.x, x_2560.y) * vec2<f32>(x_2563.z, x_2563.w)) + vec2<f32>(0.5f, 0.5f));
        let x_2567 : vec2<f32> = u_xlat48;
        u_xlat48 = floor(x_2567);
        let x_2569 : vec4<f32> = vs_INTERP9;
        let x_2572 : vec4<f32> = x_272.x_MainLightShadowmapSize;
        let x_2575 : vec2<f32> = u_xlat48;
        let x_2577 : vec2<f32> = ((vec2<f32>(x_2569.x, x_2569.y) * vec2<f32>(x_2572.z, x_2572.w)) + -(x_2575));
        let x_2578 : vec4<f32> = u_xlat7;
        u_xlat7 = vec4<f32>(x_2577.x, x_2577.y, x_2578.z, x_2578.w);
        let x_2580 : vec4<f32> = u_xlat7;
        u_xlat8 = (vec4<f32>(x_2580.x, x_2580.x, x_2580.y, x_2580.y) + vec4<f32>(0.5f, 1.0f, 0.5f, 1.0f));
        let x_2583 : vec4<f32> = u_xlat8;
        let x_2585 : vec4<f32> = u_xlat8;
        u_xlat9 = (vec4<f32>(x_2583.x, x_2583.x, x_2583.z, x_2583.z) * vec4<f32>(x_2585.x, x_2585.x, x_2585.z, x_2585.z));
        let x_2588 : vec4<f32> = u_xlat9;
        let x_2590 : vec2<f32> = (vec2<f32>(x_2588.y, x_2588.w) * vec2<f32>(0.040816002f, 0.040816002f));
        let x_2591 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_2591.x, x_2590.x, x_2591.z, x_2590.y);
        let x_2593 : vec4<f32> = u_xlat9;
        let x_2596 : vec4<f32> = u_xlat7;
        u_xlat49 = ((vec2<f32>(x_2593.x, x_2593.z) * vec2<f32>(0.5f, 0.5f)) + -(vec2<f32>(x_2596.x, x_2596.y)));
        let x_2600 : vec4<f32> = u_xlat7;
        let x_2603 : vec2<f32> = (-(vec2<f32>(x_2600.x, x_2600.y)) + vec2<f32>(1.0f, 1.0f));
        let x_2604 : vec4<f32> = u_xlat8;
        u_xlat8 = vec4<f32>(x_2603.x, x_2604.y, x_2603.y, x_2604.w);
        let x_2606 : vec4<f32> = u_xlat7;
        let x_2608 : vec2<f32> = min(vec2<f32>(x_2606.x, x_2606.y), vec2<f32>(0.0f, 0.0f));
        let x_2609 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_2608.x, x_2608.y, x_2609.z, x_2609.w);
        let x_2611 : vec4<f32> = u_xlat9;
        let x_2614 : vec4<f32> = u_xlat9;
        let x_2617 : vec4<f32> = u_xlat8;
        let x_2619 : vec2<f32> = ((-(vec2<f32>(x_2611.x, x_2611.y)) * vec2<f32>(x_2614.x, x_2614.y)) + vec2<f32>(x_2617.x, x_2617.z));
        let x_2620 : vec4<f32> = u_xlat8;
        u_xlat8 = vec4<f32>(x_2619.x, x_2620.y, x_2619.y, x_2620.w);
        let x_2622 : vec4<f32> = u_xlat7;
        let x_2624 : vec2<f32> = max(vec2<f32>(x_2622.x, x_2622.y), vec2<f32>(0.0f, 0.0f));
        let x_2625 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_2624.x, x_2624.y, x_2625.z, x_2625.w);
        let x_2627 : vec4<f32> = u_xlat9;
        let x_2630 : vec4<f32> = u_xlat9;
        let x_2633 : vec4<f32> = u_xlat8;
        let x_2635 : vec2<f32> = ((-(vec2<f32>(x_2627.x, x_2627.y)) * vec2<f32>(x_2630.x, x_2630.y)) + vec2<f32>(x_2633.y, x_2633.w));
        let x_2636 : vec4<f32> = u_xlat8;
        u_xlat8 = vec4<f32>(x_2636.x, x_2635.x, x_2636.z, x_2635.y);
        let x_2638 : vec4<f32> = u_xlat8;
        u_xlat8 = (x_2638 + vec4<f32>(2.0f, 2.0f, 2.0f, 2.0f));
        let x_2641 : f32 = u_xlat8.y;
        u_xlat9.z = (x_2641 * 0.081632003f);
        let x_2644 : vec2<f32> = u_xlat49;
        let x_2646 : vec2<f32> = (vec2<f32>(x_2644.y, x_2644.x) * vec2<f32>(0.081632003f, 0.081632003f));
        let x_2647 : vec4<f32> = u_xlat11;
        u_xlat11 = vec4<f32>(x_2646.x, x_2646.y, x_2647.z, x_2647.w);
        let x_2649 : vec4<f32> = u_xlat8;
        u_xlat49 = (vec2<f32>(x_2649.x, x_2649.z) * vec2<f32>(0.081632003f, 0.081632003f));
        let x_2653 : f32 = u_xlat8.w;
        u_xlat11.z = (x_2653 * 0.081632003f);
        let x_2657 : f32 = u_xlat11.y;
        u_xlat9.x = x_2657;
        let x_2659 : vec4<f32> = u_xlat7;
        let x_2662 : vec2<f32> = ((vec2<f32>(x_2659.x, x_2659.x) * vec2<f32>(-0.081632003f, 0.081632003f)) + vec2<f32>(0.163264006f, 0.081632003f));
        let x_2663 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_2663.x, x_2662.x, x_2663.z, x_2662.y);
        let x_2665 : vec4<f32> = u_xlat7;
        let x_2668 : vec2<f32> = ((vec2<f32>(x_2665.x, x_2665.x) * vec2<f32>(-0.081632003f, 0.081632003f)) + vec2<f32>(0.081632003f, 0.163264006f));
        let x_2669 : vec4<f32> = u_xlat8;
        u_xlat8 = vec4<f32>(x_2668.x, x_2669.y, x_2668.y, x_2669.w);
        let x_2672 : f32 = u_xlat49.x;
        u_xlat8.y = x_2672;
        let x_2675 : f32 = u_xlat10.y;
        u_xlat8.w = x_2675;
        let x_2677 : vec4<f32> = u_xlat8;
        let x_2678 : vec4<f32> = u_xlat9;
        u_xlat9 = (x_2677 + x_2678);
        let x_2680 : vec4<f32> = u_xlat7;
        let x_2683 : vec2<f32> = ((vec2<f32>(x_2680.y, x_2680.y) * vec2<f32>(-0.081632003f, 0.081632003f)) + vec2<f32>(0.163264006f, 0.081632003f));
        let x_2684 : vec4<f32> = u_xlat11;
        u_xlat11 = vec4<f32>(x_2684.x, x_2683.x, x_2684.z, x_2683.y);
        let x_2686 : vec4<f32> = u_xlat7;
        let x_2689 : vec2<f32> = ((vec2<f32>(x_2686.y, x_2686.y) * vec2<f32>(-0.081632003f, 0.081632003f)) + vec2<f32>(0.081632003f, 0.163264006f));
        let x_2690 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_2689.x, x_2690.y, x_2689.y, x_2690.w);
        let x_2693 : f32 = u_xlat49.y;
        u_xlat10.y = x_2693;
        let x_2695 : vec4<f32> = u_xlat10;
        let x_2696 : vec4<f32> = u_xlat11;
        u_xlat7 = (x_2695 + x_2696);
        let x_2698 : vec4<f32> = u_xlat8;
        let x_2699 : vec4<f32> = u_xlat9;
        u_xlat8 = (x_2698 / x_2699);
        let x_2701 : vec4<f32> = u_xlat8;
        u_xlat8 = (x_2701 + vec4<f32>(-3.5f, -1.5f, 0.5f, 2.5f));
        let x_2703 : vec4<f32> = u_xlat10;
        let x_2704 : vec4<f32> = u_xlat7;
        u_xlat10 = (x_2703 / x_2704);
        let x_2706 : vec4<f32> = u_xlat10;
        u_xlat10 = (x_2706 + vec4<f32>(-3.5f, -1.5f, 0.5f, 2.5f));
        let x_2708 : vec4<f32> = u_xlat8;
        let x_2711 : vec4<f32> = x_272.x_MainLightShadowmapSize;
        u_xlat8 = (vec4<f32>(x_2708.w, x_2708.x, x_2708.y, x_2708.z) * vec4<f32>(x_2711.x, x_2711.x, x_2711.x, x_2711.x));
        let x_2714 : vec4<f32> = u_xlat10;
        let x_2717 : vec4<f32> = x_272.x_MainLightShadowmapSize;
        u_xlat10 = (vec4<f32>(x_2714.x, x_2714.w, x_2714.y, x_2714.z) * vec4<f32>(x_2717.y, x_2717.y, x_2717.y, x_2717.y));
        let x_2720 : vec4<f32> = u_xlat8;
        let x_2721 : vec3<f32> = vec3<f32>(x_2720.y, x_2720.z, x_2720.w);
        let x_2722 : vec4<f32> = u_xlat11;
        u_xlat11 = vec4<f32>(x_2721.x, x_2722.y, x_2721.y, x_2721.z);
        let x_2725 : f32 = u_xlat10.x;
        u_xlat11.y = x_2725;
        let x_2727 : vec2<f32> = u_xlat48;
        let x_2730 : vec4<f32> = x_272.x_MainLightShadowmapSize;
        let x_2733 : vec4<f32> = u_xlat11;
        u_xlat12 = ((vec4<f32>(x_2727.x, x_2727.y, x_2727.x, x_2727.y) * vec4<f32>(x_2730.x, x_2730.y, x_2730.x, x_2730.y)) + vec4<f32>(x_2733.x, x_2733.y, x_2733.z, x_2733.y));
        let x_2736 : vec2<f32> = u_xlat48;
        let x_2738 : vec4<f32> = x_272.x_MainLightShadowmapSize;
        let x_2741 : vec4<f32> = u_xlat11;
        let x_2743 : vec2<f32> = ((x_2736 * vec2<f32>(x_2738.x, x_2738.y)) + vec2<f32>(x_2741.w, x_2741.y));
        let x_2744 : vec4<f32> = u_xlat13;
        u_xlat13 = vec4<f32>(x_2743.x, x_2743.y, x_2744.z, x_2744.w);
        let x_2747 : f32 = u_xlat11.y;
        u_xlat8.y = x_2747;
        let x_2750 : f32 = u_xlat10.z;
        u_xlat11.y = x_2750;
        let x_2752 : vec2<f32> = u_xlat48;
        let x_2755 : vec4<f32> = x_272.x_MainLightShadowmapSize;
        let x_2758 : vec4<f32> = u_xlat11;
        u_xlat14 = ((vec4<f32>(x_2752.x, x_2752.y, x_2752.x, x_2752.y) * vec4<f32>(x_2755.x, x_2755.y, x_2755.x, x_2755.y)) + vec4<f32>(x_2758.x, x_2758.y, x_2758.z, x_2758.y));
        let x_2762 : vec2<f32> = u_xlat48;
        let x_2764 : vec4<f32> = x_272.x_MainLightShadowmapSize;
        let x_2767 : vec4<f32> = u_xlat11;
        u_xlat55 = ((x_2762 * vec2<f32>(x_2764.x, x_2764.y)) + vec2<f32>(x_2767.w, x_2767.y));
        let x_2771 : f32 = u_xlat11.y;
        u_xlat8.z = x_2771;
        let x_2773 : vec2<f32> = u_xlat48;
        let x_2776 : vec4<f32> = x_272.x_MainLightShadowmapSize;
        let x_2779 : vec4<f32> = u_xlat8;
        u_xlat15 = ((vec4<f32>(x_2773.x, x_2773.y, x_2773.x, x_2773.y) * vec4<f32>(x_2776.x, x_2776.y, x_2776.x, x_2776.y)) + vec4<f32>(x_2779.x, x_2779.y, x_2779.x, x_2779.z));
        let x_2783 : f32 = u_xlat10.w;
        u_xlat11.y = x_2783;
        let x_2785 : vec2<f32> = u_xlat48;
        let x_2788 : vec4<f32> = x_272.x_MainLightShadowmapSize;
        let x_2791 : vec4<f32> = u_xlat11;
        u_xlat16 = ((vec4<f32>(x_2785.x, x_2785.y, x_2785.x, x_2785.y) * vec4<f32>(x_2788.x, x_2788.y, x_2788.x, x_2788.y)) + vec4<f32>(x_2791.x, x_2791.y, x_2791.z, x_2791.y));
        let x_2794 : vec2<f32> = u_xlat48;
        let x_2796 : vec4<f32> = x_272.x_MainLightShadowmapSize;
        let x_2799 : vec4<f32> = u_xlat11;
        let x_2801 : vec2<f32> = ((x_2794 * vec2<f32>(x_2796.x, x_2796.y)) + vec2<f32>(x_2799.w, x_2799.y));
        let x_2802 : vec3<f32> = u_xlat29;
        u_xlat29 = vec3<f32>(x_2801.x, x_2801.y, x_2802.z);
        let x_2805 : f32 = u_xlat11.y;
        u_xlat8.w = x_2805;
        let x_2807 : vec2<f32> = u_xlat48;
        let x_2809 : vec4<f32> = x_272.x_MainLightShadowmapSize;
        let x_2812 : vec4<f32> = u_xlat8;
        let x_2814 : vec2<f32> = ((x_2807 * vec2<f32>(x_2809.x, x_2809.y)) + vec2<f32>(x_2812.x, x_2812.w));
        let x_2815 : vec4<f32> = u_xlat17;
        u_xlat17 = vec4<f32>(x_2814.x, x_2814.y, x_2815.z, x_2815.w);
        let x_2817 : vec4<f32> = u_xlat11;
        let x_2818 : vec3<f32> = vec3<f32>(x_2817.x, x_2817.z, x_2817.w);
        let x_2819 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_2818.x, x_2819.y, x_2818.y, x_2818.z);
        let x_2821 : vec2<f32> = u_xlat48;
        let x_2824 : vec4<f32> = x_272.x_MainLightShadowmapSize;
        let x_2827 : vec4<f32> = u_xlat10;
        u_xlat11 = ((vec4<f32>(x_2821.x, x_2821.y, x_2821.x, x_2821.y) * vec4<f32>(x_2824.x, x_2824.y, x_2824.x, x_2824.y)) + vec4<f32>(x_2827.x, x_2827.y, x_2827.z, x_2827.y));
        let x_2830 : vec2<f32> = u_xlat48;
        let x_2832 : vec4<f32> = x_272.x_MainLightShadowmapSize;
        let x_2835 : vec4<f32> = u_xlat10;
        u_xlat52 = ((x_2830 * vec2<f32>(x_2832.x, x_2832.y)) + vec2<f32>(x_2835.w, x_2835.y));
        let x_2839 : f32 = u_xlat8.x;
        u_xlat10.x = x_2839;
        let x_2841 : vec2<f32> = u_xlat48;
        let x_2843 : vec4<f32> = x_272.x_MainLightShadowmapSize;
        let x_2846 : vec4<f32> = u_xlat10;
        u_xlat48 = ((x_2841 * vec2<f32>(x_2843.x, x_2843.y)) + vec2<f32>(x_2846.x, x_2846.y));
        let x_2849 : vec4<f32> = u_xlat7;
        let x_2851 : vec4<f32> = u_xlat9;
        u_xlat18 = (vec4<f32>(x_2849.x, x_2849.x, x_2849.x, x_2849.x) * x_2851);
        let x_2853 : vec4<f32> = u_xlat7;
        let x_2855 : vec4<f32> = u_xlat9;
        u_xlat19 = (vec4<f32>(x_2853.y, x_2853.y, x_2853.y, x_2853.y) * x_2855);
        let x_2857 : vec4<f32> = u_xlat7;
        let x_2859 : vec4<f32> = u_xlat9;
        u_xlat20 = (vec4<f32>(x_2857.z, x_2857.z, x_2857.z, x_2857.z) * x_2859);
        let x_2861 : vec4<f32> = u_xlat7;
        let x_2863 : vec4<f32> = u_xlat9;
        u_xlat7 = (vec4<f32>(x_2861.w, x_2861.w, x_2861.w, x_2861.w) * x_2863);
        let x_2866 : vec4<f32> = u_xlat12;
        let x_2867 : vec2<f32> = vec2<f32>(x_2866.x, x_2866.y);
        let x_2869 : f32 = vs_INTERP9.z;
        txVec43 = vec3<f32>(x_2867.x, x_2867.y, x_2869);
        let x_2876 : vec3<f32> = txVec43;
        let x_2878 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2876.xy, x_2876.z);
        u_xlat8.x = x_2878;
        let x_2881 : vec4<f32> = u_xlat12;
        let x_2882 : vec2<f32> = vec2<f32>(x_2881.z, x_2881.w);
        let x_2884 : f32 = vs_INTERP9.z;
        txVec44 = vec3<f32>(x_2882.x, x_2882.y, x_2884);
        let x_2892 : vec3<f32> = txVec44;
        let x_2894 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2892.xy, x_2892.z);
        u_xlat71 = x_2894;
        let x_2895 : f32 = u_xlat71;
        let x_2897 : f32 = u_xlat18.y;
        u_xlat71 = (x_2895 * x_2897);
        let x_2900 : f32 = u_xlat18.x;
        let x_2902 : f32 = u_xlat8.x;
        let x_2904 : f32 = u_xlat71;
        u_xlat8.x = ((x_2900 * x_2902) + x_2904);
        let x_2908 : vec4<f32> = u_xlat13;
        let x_2909 : vec2<f32> = vec2<f32>(x_2908.x, x_2908.y);
        let x_2911 : f32 = vs_INTERP9.z;
        txVec45 = vec3<f32>(x_2909.x, x_2909.y, x_2911);
        let x_2918 : vec3<f32> = txVec45;
        let x_2920 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2918.xy, x_2918.z);
        u_xlat71 = x_2920;
        let x_2922 : f32 = u_xlat18.z;
        let x_2923 : f32 = u_xlat71;
        let x_2926 : f32 = u_xlat8.x;
        u_xlat8.x = ((x_2922 * x_2923) + x_2926);
        let x_2930 : vec4<f32> = u_xlat15;
        let x_2931 : vec2<f32> = vec2<f32>(x_2930.x, x_2930.y);
        let x_2933 : f32 = vs_INTERP9.z;
        txVec46 = vec3<f32>(x_2931.x, x_2931.y, x_2933);
        let x_2940 : vec3<f32> = txVec46;
        let x_2942 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2940.xy, x_2940.z);
        u_xlat71 = x_2942;
        let x_2944 : f32 = u_xlat18.w;
        let x_2945 : f32 = u_xlat71;
        let x_2948 : f32 = u_xlat8.x;
        u_xlat8.x = ((x_2944 * x_2945) + x_2948);
        let x_2952 : vec4<f32> = u_xlat14;
        let x_2953 : vec2<f32> = vec2<f32>(x_2952.x, x_2952.y);
        let x_2955 : f32 = vs_INTERP9.z;
        txVec47 = vec3<f32>(x_2953.x, x_2953.y, x_2955);
        let x_2962 : vec3<f32> = txVec47;
        let x_2964 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2962.xy, x_2962.z);
        u_xlat71 = x_2964;
        let x_2966 : f32 = u_xlat19.x;
        let x_2967 : f32 = u_xlat71;
        let x_2970 : f32 = u_xlat8.x;
        u_xlat8.x = ((x_2966 * x_2967) + x_2970);
        let x_2974 : vec4<f32> = u_xlat14;
        let x_2975 : vec2<f32> = vec2<f32>(x_2974.z, x_2974.w);
        let x_2977 : f32 = vs_INTERP9.z;
        txVec48 = vec3<f32>(x_2975.x, x_2975.y, x_2977);
        let x_2984 : vec3<f32> = txVec48;
        let x_2986 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2984.xy, x_2984.z);
        u_xlat71 = x_2986;
        let x_2988 : f32 = u_xlat19.y;
        let x_2989 : f32 = u_xlat71;
        let x_2992 : f32 = u_xlat8.x;
        u_xlat8.x = ((x_2988 * x_2989) + x_2992);
        let x_2996 : vec2<f32> = u_xlat55;
        let x_2998 : f32 = vs_INTERP9.z;
        txVec49 = vec3<f32>(x_2996.x, x_2996.y, x_2998);
        let x_3005 : vec3<f32> = txVec49;
        let x_3007 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_3005.xy, x_3005.z);
        u_xlat71 = x_3007;
        let x_3009 : f32 = u_xlat19.z;
        let x_3010 : f32 = u_xlat71;
        let x_3013 : f32 = u_xlat8.x;
        u_xlat8.x = ((x_3009 * x_3010) + x_3013);
        let x_3017 : vec4<f32> = u_xlat15;
        let x_3018 : vec2<f32> = vec2<f32>(x_3017.z, x_3017.w);
        let x_3020 : f32 = vs_INTERP9.z;
        txVec50 = vec3<f32>(x_3018.x, x_3018.y, x_3020);
        let x_3027 : vec3<f32> = txVec50;
        let x_3029 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_3027.xy, x_3027.z);
        u_xlat71 = x_3029;
        let x_3031 : f32 = u_xlat19.w;
        let x_3032 : f32 = u_xlat71;
        let x_3035 : f32 = u_xlat8.x;
        u_xlat8.x = ((x_3031 * x_3032) + x_3035);
        let x_3039 : vec4<f32> = u_xlat16;
        let x_3040 : vec2<f32> = vec2<f32>(x_3039.x, x_3039.y);
        let x_3042 : f32 = vs_INTERP9.z;
        txVec51 = vec3<f32>(x_3040.x, x_3040.y, x_3042);
        let x_3049 : vec3<f32> = txVec51;
        let x_3051 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_3049.xy, x_3049.z);
        u_xlat71 = x_3051;
        let x_3053 : f32 = u_xlat20.x;
        let x_3054 : f32 = u_xlat71;
        let x_3057 : f32 = u_xlat8.x;
        u_xlat8.x = ((x_3053 * x_3054) + x_3057);
        let x_3061 : vec4<f32> = u_xlat16;
        let x_3062 : vec2<f32> = vec2<f32>(x_3061.z, x_3061.w);
        let x_3064 : f32 = vs_INTERP9.z;
        txVec52 = vec3<f32>(x_3062.x, x_3062.y, x_3064);
        let x_3071 : vec3<f32> = txVec52;
        let x_3073 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_3071.xy, x_3071.z);
        u_xlat71 = x_3073;
        let x_3075 : f32 = u_xlat20.y;
        let x_3076 : f32 = u_xlat71;
        let x_3079 : f32 = u_xlat8.x;
        u_xlat8.x = ((x_3075 * x_3076) + x_3079);
        let x_3083 : vec3<f32> = u_xlat29;
        let x_3084 : vec2<f32> = vec2<f32>(x_3083.x, x_3083.y);
        let x_3086 : f32 = vs_INTERP9.z;
        txVec53 = vec3<f32>(x_3084.x, x_3084.y, x_3086);
        let x_3093 : vec3<f32> = txVec53;
        let x_3095 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_3093.xy, x_3093.z);
        u_xlat29.x = x_3095;
        let x_3098 : f32 = u_xlat20.z;
        let x_3100 : f32 = u_xlat29.x;
        let x_3103 : f32 = u_xlat8.x;
        u_xlat8.x = ((x_3098 * x_3100) + x_3103);
        let x_3107 : vec4<f32> = u_xlat17;
        let x_3108 : vec2<f32> = vec2<f32>(x_3107.x, x_3107.y);
        let x_3110 : f32 = vs_INTERP9.z;
        txVec54 = vec3<f32>(x_3108.x, x_3108.y, x_3110);
        let x_3117 : vec3<f32> = txVec54;
        let x_3119 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_3117.xy, x_3117.z);
        u_xlat29.x = x_3119;
        let x_3122 : f32 = u_xlat20.w;
        let x_3124 : f32 = u_xlat29.x;
        let x_3127 : f32 = u_xlat8.x;
        u_xlat8.x = ((x_3122 * x_3124) + x_3127);
        let x_3131 : vec4<f32> = u_xlat11;
        let x_3132 : vec2<f32> = vec2<f32>(x_3131.x, x_3131.y);
        let x_3134 : f32 = vs_INTERP9.z;
        txVec55 = vec3<f32>(x_3132.x, x_3132.y, x_3134);
        let x_3141 : vec3<f32> = txVec55;
        let x_3143 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_3141.xy, x_3141.z);
        u_xlat29.x = x_3143;
        let x_3146 : f32 = u_xlat7.x;
        let x_3148 : f32 = u_xlat29.x;
        let x_3151 : f32 = u_xlat8.x;
        u_xlat7.x = ((x_3146 * x_3148) + x_3151);
        let x_3155 : vec4<f32> = u_xlat11;
        let x_3156 : vec2<f32> = vec2<f32>(x_3155.z, x_3155.w);
        let x_3158 : f32 = vs_INTERP9.z;
        txVec56 = vec3<f32>(x_3156.x, x_3156.y, x_3158);
        let x_3165 : vec3<f32> = txVec56;
        let x_3167 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_3165.xy, x_3165.z);
        u_xlat8.x = x_3167;
        let x_3170 : f32 = u_xlat7.y;
        let x_3172 : f32 = u_xlat8.x;
        let x_3175 : f32 = u_xlat7.x;
        u_xlat7.x = ((x_3170 * x_3172) + x_3175);
        let x_3179 : vec2<f32> = u_xlat52;
        let x_3181 : f32 = vs_INTERP9.z;
        txVec57 = vec3<f32>(x_3179.x, x_3179.y, x_3181);
        let x_3189 : vec3<f32> = txVec57;
        let x_3191 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_3189.xy, x_3189.z);
        u_xlat28 = x_3191;
        let x_3193 : f32 = u_xlat7.z;
        let x_3194 : f32 = u_xlat28;
        let x_3197 : f32 = u_xlat7.x;
        u_xlat7.x = ((x_3193 * x_3194) + x_3197);
        let x_3201 : vec2<f32> = u_xlat48;
        let x_3203 : f32 = vs_INTERP9.z;
        txVec58 = vec3<f32>(x_3201.x, x_3201.y, x_3203);
        let x_3210 : vec3<f32> = txVec58;
        let x_3212 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_3210.xy, x_3210.z);
        u_xlat48.x = x_3212;
        let x_3215 : f32 = u_xlat7.w;
        let x_3217 : f32 = u_xlat48.x;
        let x_3220 : f32 = u_xlat7.x;
        u_xlat63 = ((x_3215 * x_3217) + x_3220);
      }
    }
  } else {
    let x_3224 : vec4<f32> = vs_INTERP9;
    let x_3225 : vec2<f32> = vec2<f32>(x_3224.x, x_3224.y);
    let x_3227 : f32 = vs_INTERP9.z;
    txVec59 = vec3<f32>(x_3225.x, x_3225.y, x_3227);
    let x_3234 : vec3<f32> = txVec59;
    let x_3236 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_3234.xy, x_3234.z);
    u_xlat63 = x_3236;
  }
  let x_3237 : f32 = u_xlat63;
  let x_3239 : f32 = x_272.x_MainLightShadowParams.x;
  let x_3241 : f32 = u_xlat65;
  u_xlat63 = ((x_3237 * x_3239) + x_3241);
  let x_3244 : f32 = vs_INTERP9.z;
  u_xlatb65 = (0.0f >= x_3244);
  let x_3247 : f32 = vs_INTERP9.z;
  u_xlatb48.x = (x_3247 >= 1.0f);
  let x_3250 : bool = u_xlatb65;
  let x_3252 : bool = u_xlatb48.x;
  u_xlatb65 = (x_3250 | x_3252);
  let x_3254 : bool = u_xlatb65;
  let x_3255 : f32 = u_xlat63;
  u_xlat63 = select(x_3255, 1.0f, x_3254);
  let x_3257 : vec3<f32> = vs_INTERP0;
  let x_3259 : vec3<f32> = x_90.x_WorldSpaceCameraPos;
  let x_3261 : vec3<f32> = (x_3257 + -(x_3259));
  let x_3262 : vec4<f32> = u_xlat7;
  u_xlat7 = vec4<f32>(x_3261.x, x_3261.y, x_3261.z, x_3262.w);
  let x_3264 : vec4<f32> = u_xlat7;
  let x_3266 : vec4<f32> = u_xlat7;
  u_xlat65 = dot(vec3<f32>(x_3264.x, x_3264.y, x_3264.z), vec3<f32>(x_3266.x, x_3266.y, x_3266.z));
  let x_3269 : f32 = u_xlat65;
  let x_3271 : f32 = x_272.x_MainLightShadowParams.z;
  let x_3274 : f32 = x_272.x_MainLightShadowParams.w;
  u_xlat65 = ((x_3269 * x_3271) + x_3274);
  let x_3276 : f32 = u_xlat65;
  u_xlat65 = clamp(x_3276, 0.0f, 1.0f);
  let x_3278 : f32 = u_xlat63;
  u_xlat48.x = (-(x_3278) + 1.0f);
  let x_3282 : f32 = u_xlat65;
  let x_3284 : f32 = u_xlat48.x;
  let x_3286 : f32 = u_xlat63;
  u_xlat63 = ((x_3282 * x_3284) + x_3286);
  let x_3294 : f32 = x_3292.x_MainLightCookieTextureFormat;
  u_xlatb65 = !((x_3294 == -1.0f));
  let x_3296 : bool = u_xlatb65;
  if (x_3296) {
    let x_3299 : vec3<f32> = vs_INTERP0;
    let x_3302 : vec4<f32> = x_3292.x_MainLightWorldToLight[1i];
    u_xlat48 = (vec2<f32>(x_3299.y, x_3299.y) * vec2<f32>(x_3302.x, x_3302.y));
    let x_3306 : vec4<f32> = x_3292.x_MainLightWorldToLight[0i];
    let x_3308 : vec3<f32> = vs_INTERP0;
    let x_3311 : vec2<f32> = u_xlat48;
    u_xlat48 = ((vec2<f32>(x_3306.x, x_3306.y) * vec2<f32>(x_3308.x, x_3308.x)) + x_3311);
    let x_3314 : vec4<f32> = x_3292.x_MainLightWorldToLight[2i];
    let x_3316 : vec3<f32> = vs_INTERP0;
    let x_3319 : vec2<f32> = u_xlat48;
    u_xlat48 = ((vec2<f32>(x_3314.x, x_3314.y) * vec2<f32>(x_3316.z, x_3316.z)) + x_3319);
    let x_3321 : vec2<f32> = u_xlat48;
    let x_3323 : vec4<f32> = x_3292.x_MainLightWorldToLight[3i];
    u_xlat48 = (x_3321 + vec2<f32>(x_3323.x, x_3323.y));
    let x_3326 : vec2<f32> = u_xlat48;
    u_xlat48 = ((x_3326 * vec2<f32>(0.5f, 0.5f)) + vec2<f32>(0.5f, 0.5f));
    let x_3334 : vec2<f32> = u_xlat48;
    let x_3336 : f32 = x_90.x_GlobalMipBias.x;
    let x_3337 : vec4<f32> = textureSampleBias(x_MainLightCookieTexture, sampler_MainLightCookieTexture, x_3334, x_3336);
    u_xlat7 = x_3337;
    let x_3339 : f32 = x_3292.x_MainLightCookieTextureFormat;
    let x_3341 : f32 = x_3292.x_MainLightCookieTextureFormat;
    let x_3343 : f32 = x_3292.x_MainLightCookieTextureFormat;
    let x_3345 : f32 = x_3292.x_MainLightCookieTextureFormat;
    let x_3346 : vec4<f32> = vec4<f32>(x_3339, x_3341, x_3343, x_3345);
    let x_3354 : vec4<bool> = (vec4<f32>(x_3346.x, x_3346.y, x_3346.z, x_3346.w) == vec4<f32>(0.0f, 1.0f, 0.0f, 1.0f));
    u_xlatb48 = vec2<bool>(x_3354.x, x_3354.y);
    let x_3357 : bool = u_xlatb48.y;
    if (x_3357) {
      let x_3362 : f32 = u_xlat7.w;
      x_3358 = x_3362;
    } else {
      let x_3365 : f32 = u_xlat7.x;
      x_3358 = x_3365;
    }
    let x_3366 : f32 = x_3358;
    u_xlat65 = x_3366;
    let x_3368 : bool = u_xlatb48.x;
    if (x_3368) {
      let x_3372 : vec4<f32> = u_xlat7;
      x_3369 = vec3<f32>(x_3372.x, x_3372.y, x_3372.z);
    } else {
      let x_3375 : f32 = u_xlat65;
      x_3369 = vec3<f32>(x_3375, x_3375, x_3375);
    }
    let x_3377 : vec3<f32> = x_3369;
    let x_3378 : vec4<f32> = u_xlat7;
    u_xlat7 = vec4<f32>(x_3377.x, x_3377.y, x_3377.z, x_3378.w);
  } else {
    u_xlat7.x = 1.0f;
    u_xlat7.y = 1.0f;
    u_xlat7.z = 1.0f;
  }
  let x_3384 : vec4<f32> = u_xlat7;
  let x_3387 : vec4<f32> = x_90.x_MainLightColor;
  let x_3389 : vec3<f32> = (vec3<f32>(x_3384.x, x_3384.y, x_3384.z) * vec3<f32>(x_3387.x, x_3387.y, x_3387.z));
  let x_3390 : vec4<f32> = u_xlat7;
  u_xlat7 = vec4<f32>(x_3389.x, x_3389.y, x_3389.z, x_3390.w);
  let x_3392 : f32 = u_xlat27;
  let x_3394 : vec4<f32> = u_xlat7;
  let x_3396 : vec3<f32> = (vec3<f32>(x_3392, x_3392, x_3392) * vec3<f32>(x_3394.x, x_3394.y, x_3394.z));
  let x_3397 : vec4<f32> = u_xlat7;
  u_xlat7 = vec4<f32>(x_3396.x, x_3396.y, x_3396.z, x_3397.w);
  let x_3399 : vec3<f32> = u_xlat2;
  let x_3401 : vec4<f32> = u_xlat3;
  u_xlat65 = dot(-(x_3399), vec3<f32>(x_3401.x, x_3401.y, x_3401.z));
  let x_3404 : f32 = u_xlat65;
  let x_3405 : f32 = u_xlat65;
  u_xlat65 = (x_3404 + x_3405);
  let x_3407 : vec4<f32> = u_xlat3;
  let x_3409 : f32 = u_xlat65;
  let x_3413 : vec3<f32> = u_xlat2;
  let x_3415 : vec3<f32> = ((vec3<f32>(x_3407.x, x_3407.y, x_3407.z) * -(vec3<f32>(x_3409, x_3409, x_3409))) + -(x_3413));
  let x_3416 : vec4<f32> = u_xlat8;
  u_xlat8 = vec4<f32>(x_3415.x, x_3415.y, x_3415.z, x_3416.w);
  let x_3418 : vec4<f32> = u_xlat3;
  let x_3420 : vec3<f32> = u_xlat2;
  u_xlat65 = dot(vec3<f32>(x_3418.x, x_3418.y, x_3418.z), x_3420);
  let x_3422 : f32 = u_xlat65;
  u_xlat65 = clamp(x_3422, 0.0f, 1.0f);
  let x_3424 : f32 = u_xlat65;
  u_xlat65 = (-(x_3424) + 1.0f);
  let x_3427 : f32 = u_xlat65;
  let x_3428 : f32 = u_xlat65;
  u_xlat65 = (x_3427 * x_3428);
  let x_3430 : f32 = u_xlat65;
  let x_3431 : f32 = u_xlat65;
  u_xlat65 = (x_3430 * x_3431);
  let x_3434 : f32 = u_xlat43.x;
  u_xlat48.x = ((-(x_3434) * 0.699999988f) + 1.700000048f);
  let x_3442 : f32 = u_xlat43.x;
  let x_3444 : f32 = u_xlat48.x;
  u_xlat43.x = (x_3442 * x_3444);
  let x_3448 : f32 = u_xlat43.x;
  u_xlat43.x = (x_3448 * 6.0f);
  let x_3460 : vec4<f32> = u_xlat8;
  let x_3463 : f32 = u_xlat43.x;
  let x_3464 : vec4<f32> = textureSampleLevel(unity_SpecCube0, samplerunity_SpecCube0, vec3<f32>(x_3460.x, x_3460.y, x_3460.z), x_3463);
  u_xlat8 = x_3464;
  let x_3466 : f32 = u_xlat8.w;
  u_xlat43.x = (x_3466 + -1.0f);
  let x_3470 : f32 = x_161.unity_SpecCube0_HDR.w;
  let x_3472 : f32 = u_xlat43.x;
  u_xlat43.x = ((x_3470 * x_3472) + 1.0f);
  let x_3477 : f32 = u_xlat43.x;
  u_xlat43.x = max(x_3477, 0.0f);
  let x_3481 : f32 = u_xlat43.x;
  u_xlat43.x = log2(x_3481);
  let x_3485 : f32 = u_xlat43.x;
  let x_3487 : f32 = x_161.unity_SpecCube0_HDR.y;
  u_xlat43.x = (x_3485 * x_3487);
  let x_3491 : f32 = u_xlat43.x;
  u_xlat43.x = exp2(x_3491);
  let x_3495 : f32 = u_xlat43.x;
  let x_3497 : f32 = x_161.unity_SpecCube0_HDR.x;
  u_xlat43.x = (x_3495 * x_3497);
  let x_3500 : vec4<f32> = u_xlat8;
  let x_3502 : vec2<f32> = u_xlat43;
  let x_3504 : vec3<f32> = (vec3<f32>(x_3500.x, x_3500.y, x_3500.z) * vec3<f32>(x_3502.x, x_3502.x, x_3502.x));
  let x_3505 : vec4<f32> = u_xlat8;
  u_xlat8 = vec4<f32>(x_3504.x, x_3504.y, x_3504.z, x_3505.w);
  let x_3507 : f32 = u_xlat64;
  let x_3509 : f32 = u_xlat64;
  u_xlat43 = ((vec2<f32>(x_3507, x_3507) * vec2<f32>(x_3509, x_3509)) + vec2<f32>(-1.0f, 1.0f));
  let x_3515 : f32 = u_xlat43.y;
  u_xlat64 = (1.0f / x_3515);
  let x_3517 : f32 = u_xlat67;
  u_xlat67 = (x_3517 + -0.039999999f);
  let x_3520 : f32 = u_xlat65;
  let x_3521 : f32 = u_xlat67;
  u_xlat65 = ((x_3520 * x_3521) + 0.039999999f);
  let x_3525 : f32 = u_xlat64;
  let x_3526 : f32 = u_xlat65;
  u_xlat64 = (x_3525 * x_3526);
  let x_3528 : f32 = u_xlat64;
  let x_3530 : vec4<f32> = u_xlat8;
  let x_3532 : vec3<f32> = (vec3<f32>(x_3528, x_3528, x_3528) * vec3<f32>(x_3530.x, x_3530.y, x_3530.z));
  let x_3533 : vec4<f32> = u_xlat8;
  u_xlat8 = vec4<f32>(x_3532.x, x_3532.y, x_3532.z, x_3533.w);
  let x_3535 : vec3<f32> = u_xlat26;
  let x_3536 : vec3<f32> = u_xlat4;
  let x_3538 : vec4<f32> = u_xlat8;
  u_xlat26 = ((x_3535 * x_3536) + vec3<f32>(x_3538.x, x_3538.y, x_3538.z));
  let x_3541 : f32 = u_xlat63;
  let x_3543 : f32 = x_161.unity_LightData.z;
  u_xlat63 = (x_3541 * x_3543);
  let x_3545 : vec4<f32> = u_xlat3;
  let x_3548 : vec4<f32> = x_90.x_MainLightPosition;
  u_xlat64 = dot(vec3<f32>(x_3545.x, x_3545.y, x_3545.z), vec3<f32>(x_3548.x, x_3548.y, x_3548.z));
  let x_3551 : f32 = u_xlat64;
  u_xlat64 = clamp(x_3551, 0.0f, 1.0f);
  let x_3553 : f32 = u_xlat63;
  let x_3554 : f32 = u_xlat64;
  u_xlat63 = (x_3553 * x_3554);
  let x_3556 : f32 = u_xlat63;
  let x_3558 : vec4<f32> = u_xlat7;
  let x_3560 : vec3<f32> = (vec3<f32>(x_3556, x_3556, x_3556) * vec3<f32>(x_3558.x, x_3558.y, x_3558.z));
  let x_3561 : vec4<f32> = u_xlat7;
  u_xlat7 = vec4<f32>(x_3560.x, x_3560.y, x_3560.z, x_3561.w);
  let x_3563 : vec3<f32> = u_xlat2;
  let x_3565 : vec4<f32> = x_90.x_MainLightPosition;
  let x_3567 : vec3<f32> = (x_3563 + vec3<f32>(x_3565.x, x_3565.y, x_3565.z));
  let x_3568 : vec4<f32> = u_xlat8;
  u_xlat8 = vec4<f32>(x_3567.x, x_3567.y, x_3567.z, x_3568.w);
  let x_3570 : vec4<f32> = u_xlat8;
  let x_3572 : vec4<f32> = u_xlat8;
  u_xlat63 = dot(vec3<f32>(x_3570.x, x_3570.y, x_3570.z), vec3<f32>(x_3572.x, x_3572.y, x_3572.z));
  let x_3575 : f32 = u_xlat63;
  u_xlat63 = max(x_3575, 1.17549435e-37f);
  let x_3578 : f32 = u_xlat63;
  u_xlat63 = inverseSqrt(x_3578);
  let x_3580 : f32 = u_xlat63;
  let x_3582 : vec4<f32> = u_xlat8;
  let x_3584 : vec3<f32> = (vec3<f32>(x_3580, x_3580, x_3580) * vec3<f32>(x_3582.x, x_3582.y, x_3582.z));
  let x_3585 : vec4<f32> = u_xlat8;
  u_xlat8 = vec4<f32>(x_3584.x, x_3584.y, x_3584.z, x_3585.w);
  let x_3587 : vec4<f32> = u_xlat3;
  let x_3589 : vec4<f32> = u_xlat8;
  u_xlat63 = dot(vec3<f32>(x_3587.x, x_3587.y, x_3587.z), vec3<f32>(x_3589.x, x_3589.y, x_3589.z));
  let x_3592 : f32 = u_xlat63;
  u_xlat63 = clamp(x_3592, 0.0f, 1.0f);
  let x_3595 : vec4<f32> = x_90.x_MainLightPosition;
  let x_3597 : vec4<f32> = u_xlat8;
  u_xlat64 = dot(vec3<f32>(x_3595.x, x_3595.y, x_3595.z), vec3<f32>(x_3597.x, x_3597.y, x_3597.z));
  let x_3600 : f32 = u_xlat64;
  u_xlat64 = clamp(x_3600, 0.0f, 1.0f);
  let x_3602 : f32 = u_xlat63;
  let x_3603 : f32 = u_xlat63;
  u_xlat63 = (x_3602 * x_3603);
  let x_3605 : f32 = u_xlat63;
  let x_3607 : f32 = u_xlat43.x;
  u_xlat63 = ((x_3605 * x_3607) + 1.000010014f);
  let x_3611 : f32 = u_xlat64;
  let x_3612 : f32 = u_xlat64;
  u_xlat64 = (x_3611 * x_3612);
  let x_3614 : f32 = u_xlat63;
  let x_3615 : f32 = u_xlat63;
  u_xlat63 = (x_3614 * x_3615);
  let x_3617 : f32 = u_xlat64;
  u_xlat64 = max(x_3617, 0.100000001f);
  let x_3620 : f32 = u_xlat63;
  let x_3621 : f32 = u_xlat64;
  u_xlat63 = (x_3620 * x_3621);
  let x_3624 : f32 = u_xlat5.x;
  let x_3625 : f32 = u_xlat63;
  u_xlat63 = (x_3624 * x_3625);
  let x_3627 : f32 = u_xlat66;
  let x_3628 : f32 = u_xlat63;
  u_xlat63 = (x_3627 / x_3628);
  let x_3630 : f32 = u_xlat63;
  let x_3634 : vec3<f32> = u_xlat4;
  let x_3635 : vec3<f32> = ((vec3<f32>(x_3630, x_3630, x_3630) * vec3<f32>(0.039999999f, 0.039999999f, 0.039999999f)) + x_3634);
  let x_3636 : vec4<f32> = u_xlat8;
  u_xlat8 = vec4<f32>(x_3635.x, x_3635.y, x_3635.z, x_3636.w);
  let x_3638 : vec4<f32> = u_xlat7;
  let x_3640 : vec4<f32> = u_xlat8;
  let x_3642 : vec3<f32> = (vec3<f32>(x_3638.x, x_3638.y, x_3638.z) * vec3<f32>(x_3640.x, x_3640.y, x_3640.z));
  let x_3643 : vec4<f32> = u_xlat7;
  u_xlat7 = vec4<f32>(x_3642.x, x_3642.y, x_3642.z, x_3643.w);
  let x_3646 : f32 = x_90.x_AdditionalLightsCount.x;
  let x_3648 : f32 = x_161.unity_LightData.y;
  u_xlat63 = min(x_3646, x_3648);
  let x_3651 : f32 = u_xlat63;
  u_xlatu63 = bitcast<u32>(i32(x_3651));
  let x_3655 : f32 = x_3292.x_AdditionalLightsCookieAtlasTextureFormat;
  let x_3657 : f32 = x_3292.x_AdditionalLightsCookieAtlasTextureFormat;
  let x_3659 : f32 = x_3292.x_AdditionalLightsCookieAtlasTextureFormat;
  let x_3661 : f32 = x_3292.x_AdditionalLightsCookieAtlasTextureFormat;
  let x_3662 : vec4<f32> = vec4<f32>(x_3655, x_3657, x_3659, x_3661);
  let x_3668 : vec4<bool> = (vec4<f32>(x_3662.x, x_3662.y, x_3662.z, x_3662.w) == vec4<f32>(0.0f, 1.0f, 0.0f, 1.0f));
  u_xlatb48 = vec2<bool>(x_3668.x, x_3668.y);
  u_xlat8.x = 0.0f;
  u_xlat8.y = 0.0f;
  u_xlat8.z = 0.0f;
  u_xlatu_loop_1 = 0u;
  loop {
    let x_3679 : u32 = u_xlatu_loop_1;
    let x_3680 : u32 = u_xlatu63;
    if ((x_3679 < x_3680)) {
    } else {
      break;
    }
    let x_3683 : u32 = u_xlatu_loop_1;
    u_xlatu65 = (x_3683 >> 2u);
    let x_3686 : u32 = u_xlatu_loop_1;
    u_xlati67 = bitcast<i32>((x_3686 & 3u));
    let x_3689 : u32 = u_xlatu65;
    let x_3692 : vec4<f32> = x_161.unity_LightIndices[bitcast<i32>(x_3689)];
    let x_3702 : i32 = u_xlati67;
    indexable = array<vec4<u32>, 4u>(vec4<u32>(1065353216u, 0u, 0u, 0u), vec4<u32>(0u, 1065353216u, 0u, 0u), vec4<u32>(0u, 0u, 1065353216u, 0u), vec4<u32>(0u, 0u, 0u, 1065353216u));
    let x_3707 : vec4<u32> = indexable[x_3702];
    u_xlat65 = dot(x_3692, bitcast<vec4<f32>>(x_3707));
    let x_3710 : f32 = u_xlat65;
    u_xlatu65 = bitcast<u32>(i32(x_3710));
    let x_3713 : vec3<f32> = vs_INTERP0;
    let x_3725 : u32 = u_xlatu65;
    let x_3728 : vec4<f32> = x_3724.x_AdditionalLightsPosition[bitcast<i32>(x_3725)];
    let x_3731 : u32 = u_xlatu65;
    let x_3734 : vec4<f32> = x_3724.x_AdditionalLightsPosition[bitcast<i32>(x_3731)];
    let x_3736 : vec3<f32> = ((-(x_3713) * vec3<f32>(x_3728.w, x_3728.w, x_3728.w)) + vec3<f32>(x_3734.x, x_3734.y, x_3734.z));
    let x_3737 : vec4<f32> = u_xlat9;
    u_xlat9 = vec4<f32>(x_3736.x, x_3736.y, x_3736.z, x_3737.w);
    let x_3739 : vec4<f32> = u_xlat9;
    let x_3741 : vec4<f32> = u_xlat9;
    u_xlat67 = dot(vec3<f32>(x_3739.x, x_3739.y, x_3739.z), vec3<f32>(x_3741.x, x_3741.y, x_3741.z));
    let x_3744 : f32 = u_xlat67;
    u_xlat67 = max(x_3744, 6.10351562e-05f);
    let x_3748 : f32 = u_xlat67;
    u_xlat70 = inverseSqrt(x_3748);
    let x_3750 : f32 = u_xlat70;
    let x_3752 : vec4<f32> = u_xlat9;
    let x_3754 : vec3<f32> = (vec3<f32>(x_3750, x_3750, x_3750) * vec3<f32>(x_3752.x, x_3752.y, x_3752.z));
    let x_3755 : vec4<f32> = u_xlat10;
    u_xlat10 = vec4<f32>(x_3754.x, x_3754.y, x_3754.z, x_3755.w);
    let x_3757 : f32 = u_xlat67;
    u_xlat71 = (1.0f / x_3757);
    let x_3759 : f32 = u_xlat67;
    let x_3760 : u32 = u_xlatu65;
    let x_3763 : f32 = x_3724.x_AdditionalLightsAttenuation[bitcast<i32>(x_3760)].x;
    u_xlat67 = (x_3759 * x_3763);
    let x_3765 : f32 = u_xlat67;
    let x_3767 : f32 = u_xlat67;
    u_xlat67 = ((-(x_3765) * x_3767) + 1.0f);
    let x_3770 : f32 = u_xlat67;
    u_xlat67 = max(x_3770, 0.0f);
    let x_3772 : f32 = u_xlat67;
    let x_3773 : f32 = u_xlat67;
    u_xlat67 = (x_3772 * x_3773);
    let x_3775 : f32 = u_xlat67;
    let x_3776 : f32 = u_xlat71;
    u_xlat67 = (x_3775 * x_3776);
    let x_3778 : u32 = u_xlatu65;
    let x_3781 : vec4<f32> = x_3724.x_AdditionalLightsSpotDir[bitcast<i32>(x_3778)];
    let x_3783 : vec4<f32> = u_xlat10;
    u_xlat71 = dot(vec3<f32>(x_3781.x, x_3781.y, x_3781.z), vec3<f32>(x_3783.x, x_3783.y, x_3783.z));
    let x_3786 : f32 = u_xlat71;
    let x_3787 : u32 = u_xlatu65;
    let x_3790 : f32 = x_3724.x_AdditionalLightsAttenuation[bitcast<i32>(x_3787)].z;
    let x_3792 : u32 = u_xlatu65;
    let x_3795 : f32 = x_3724.x_AdditionalLightsAttenuation[bitcast<i32>(x_3792)].w;
    u_xlat71 = ((x_3786 * x_3790) + x_3795);
    let x_3797 : f32 = u_xlat71;
    u_xlat71 = clamp(x_3797, 0.0f, 1.0f);
    let x_3799 : f32 = u_xlat71;
    let x_3800 : f32 = u_xlat71;
    u_xlat71 = (x_3799 * x_3800);
    let x_3802 : f32 = u_xlat67;
    let x_3803 : f32 = u_xlat71;
    u_xlat67 = (x_3802 * x_3803);
    let x_3806 : u32 = u_xlatu65;
    u_xlatu71 = (x_3806 >> 5u);
    let x_3809 : u32 = u_xlatu65;
    u_xlati72 = (1i << bitcast<u32>((bitcast<i32>(x_3809) & 31i)));
    let x_3815 : i32 = u_xlati72;
    let x_3817 : u32 = u_xlatu71;
    let x_3820 : f32 = x_3292.x_AdditionalLightsCookieEnableBits[bitcast<i32>(x_3817)].el;
    u_xlati71 = bitcast<i32>((bitcast<u32>(x_3815) & bitcast<u32>(x_3820)));
    let x_3824 : i32 = u_xlati71;
    if ((x_3824 != 0i)) {
      let x_3834 : u32 = u_xlatu65;
      let x_3837 : f32 = x_3833.x_AdditionalLightsLightTypes[bitcast<i32>(x_3834)].el;
      u_xlati71 = i32(x_3837);
      let x_3839 : i32 = u_xlati71;
      u_xlati72 = select(1i, 0i, (x_3839 != 0i));
      let x_3843 : u32 = u_xlatu65;
      u_xlati73 = (bitcast<i32>(x_3843) << bitcast<u32>(2i));
      let x_3846 : i32 = u_xlati72;
      if ((x_3846 != 0i)) {
        let x_3850 : vec3<f32> = vs_INTERP0;
        let x_3852 : i32 = u_xlati73;
        let x_3855 : i32 = u_xlati73;
        let x_3859 : vec4<f32> = x_3833.x_AdditionalLightsWorldToLights[((x_3852 + 1i) / 4i)][((x_3855 + 1i) % 4i)];
        let x_3861 : vec3<f32> = (vec3<f32>(x_3850.y, x_3850.y, x_3850.y) * vec3<f32>(x_3859.x, x_3859.y, x_3859.w));
        let x_3862 : vec4<f32> = u_xlat11;
        u_xlat11 = vec4<f32>(x_3861.x, x_3861.y, x_3861.z, x_3862.w);
        let x_3864 : i32 = u_xlati73;
        let x_3866 : i32 = u_xlati73;
        let x_3869 : vec4<f32> = x_3833.x_AdditionalLightsWorldToLights[(x_3864 / 4i)][(x_3866 % 4i)];
        let x_3871 : vec3<f32> = vs_INTERP0;
        let x_3874 : vec4<f32> = u_xlat11;
        let x_3876 : vec3<f32> = ((vec3<f32>(x_3869.x, x_3869.y, x_3869.w) * vec3<f32>(x_3871.x, x_3871.x, x_3871.x)) + vec3<f32>(x_3874.x, x_3874.y, x_3874.z));
        let x_3877 : vec4<f32> = u_xlat11;
        u_xlat11 = vec4<f32>(x_3876.x, x_3876.y, x_3876.z, x_3877.w);
        let x_3879 : i32 = u_xlati73;
        let x_3882 : i32 = u_xlati73;
        let x_3886 : vec4<f32> = x_3833.x_AdditionalLightsWorldToLights[((x_3879 + 2i) / 4i)][((x_3882 + 2i) % 4i)];
        let x_3888 : vec3<f32> = vs_INTERP0;
        let x_3891 : vec4<f32> = u_xlat11;
        let x_3893 : vec3<f32> = ((vec3<f32>(x_3886.x, x_3886.y, x_3886.w) * vec3<f32>(x_3888.z, x_3888.z, x_3888.z)) + vec3<f32>(x_3891.x, x_3891.y, x_3891.z));
        let x_3894 : vec4<f32> = u_xlat11;
        u_xlat11 = vec4<f32>(x_3893.x, x_3893.y, x_3893.z, x_3894.w);
        let x_3896 : vec4<f32> = u_xlat11;
        let x_3898 : i32 = u_xlati73;
        let x_3901 : i32 = u_xlati73;
        let x_3905 : vec4<f32> = x_3833.x_AdditionalLightsWorldToLights[((x_3898 + 3i) / 4i)][((x_3901 + 3i) % 4i)];
        let x_3907 : vec3<f32> = (vec3<f32>(x_3896.x, x_3896.y, x_3896.z) + vec3<f32>(x_3905.x, x_3905.y, x_3905.w));
        let x_3908 : vec4<f32> = u_xlat11;
        u_xlat11 = vec4<f32>(x_3907.x, x_3907.y, x_3907.z, x_3908.w);
        let x_3910 : vec4<f32> = u_xlat11;
        let x_3912 : vec4<f32> = u_xlat11;
        let x_3914 : vec2<f32> = (vec2<f32>(x_3910.x, x_3910.y) / vec2<f32>(x_3912.z, x_3912.z));
        let x_3915 : vec4<f32> = u_xlat11;
        u_xlat11 = vec4<f32>(x_3914.x, x_3914.y, x_3915.z, x_3915.w);
        let x_3917 : vec4<f32> = u_xlat11;
        let x_3920 : vec2<f32> = ((vec2<f32>(x_3917.x, x_3917.y) * vec2<f32>(0.5f, 0.5f)) + vec2<f32>(0.5f, 0.5f));
        let x_3921 : vec4<f32> = u_xlat11;
        u_xlat11 = vec4<f32>(x_3920.x, x_3920.y, x_3921.z, x_3921.w);
        let x_3923 : vec4<f32> = u_xlat11;
        let x_3927 : vec2<f32> = clamp(vec2<f32>(x_3923.x, x_3923.y), vec2<f32>(0.0f, 0.0f), vec2<f32>(1.0f, 1.0f));
        let x_3928 : vec4<f32> = u_xlat11;
        u_xlat11 = vec4<f32>(x_3927.x, x_3927.y, x_3928.z, x_3928.w);
        let x_3930 : u32 = u_xlatu65;
        let x_3933 : vec4<f32> = x_3833.x_AdditionalLightsCookieAtlasUVRects[bitcast<i32>(x_3930)];
        let x_3935 : vec4<f32> = u_xlat11;
        let x_3938 : u32 = u_xlatu65;
        let x_3941 : vec4<f32> = x_3833.x_AdditionalLightsCookieAtlasUVRects[bitcast<i32>(x_3938)];
        let x_3943 : vec2<f32> = ((vec2<f32>(x_3933.x, x_3933.y) * vec2<f32>(x_3935.x, x_3935.y)) + vec2<f32>(x_3941.z, x_3941.w));
        let x_3944 : vec4<f32> = u_xlat11;
        u_xlat11 = vec4<f32>(x_3943.x, x_3943.y, x_3944.z, x_3944.w);
      } else {
        let x_3948 : i32 = u_xlati71;
        u_xlatb71 = (x_3948 == 1i);
        let x_3950 : bool = u_xlatb71;
        u_xlati71 = select(0i, 1i, x_3950);
        let x_3952 : i32 = u_xlati71;
        if ((x_3952 != 0i)) {
          let x_3957 : vec3<f32> = vs_INTERP0;
          let x_3959 : i32 = u_xlati73;
          let x_3962 : i32 = u_xlati73;
          let x_3966 : vec4<f32> = x_3833.x_AdditionalLightsWorldToLights[((x_3959 + 1i) / 4i)][((x_3962 + 1i) % 4i)];
          u_xlat53 = (vec2<f32>(x_3957.y, x_3957.y) * vec2<f32>(x_3966.x, x_3966.y));
          let x_3969 : i32 = u_xlati73;
          let x_3971 : i32 = u_xlati73;
          let x_3974 : vec4<f32> = x_3833.x_AdditionalLightsWorldToLights[(x_3969 / 4i)][(x_3971 % 4i)];
          let x_3976 : vec3<f32> = vs_INTERP0;
          let x_3979 : vec2<f32> = u_xlat53;
          u_xlat53 = ((vec2<f32>(x_3974.x, x_3974.y) * vec2<f32>(x_3976.x, x_3976.x)) + x_3979);
          let x_3981 : i32 = u_xlati73;
          let x_3984 : i32 = u_xlati73;
          let x_3988 : vec4<f32> = x_3833.x_AdditionalLightsWorldToLights[((x_3981 + 2i) / 4i)][((x_3984 + 2i) % 4i)];
          let x_3990 : vec3<f32> = vs_INTERP0;
          let x_3993 : vec2<f32> = u_xlat53;
          u_xlat53 = ((vec2<f32>(x_3988.x, x_3988.y) * vec2<f32>(x_3990.z, x_3990.z)) + x_3993);
          let x_3995 : vec2<f32> = u_xlat53;
          let x_3996 : i32 = u_xlati73;
          let x_3999 : i32 = u_xlati73;
          let x_4003 : vec4<f32> = x_3833.x_AdditionalLightsWorldToLights[((x_3996 + 3i) / 4i)][((x_3999 + 3i) % 4i)];
          u_xlat53 = (x_3995 + vec2<f32>(x_4003.x, x_4003.y));
          let x_4006 : vec2<f32> = u_xlat53;
          u_xlat53 = ((x_4006 * vec2<f32>(0.5f, 0.5f)) + vec2<f32>(0.5f, 0.5f));
          let x_4009 : vec2<f32> = u_xlat53;
          u_xlat53 = fract(x_4009);
          let x_4011 : u32 = u_xlatu65;
          let x_4014 : vec4<f32> = x_3833.x_AdditionalLightsCookieAtlasUVRects[bitcast<i32>(x_4011)];
          let x_4016 : vec2<f32> = u_xlat53;
          let x_4018 : u32 = u_xlatu65;
          let x_4021 : vec4<f32> = x_3833.x_AdditionalLightsCookieAtlasUVRects[bitcast<i32>(x_4018)];
          let x_4023 : vec2<f32> = ((vec2<f32>(x_4014.x, x_4014.y) * x_4016) + vec2<f32>(x_4021.z, x_4021.w));
          let x_4024 : vec4<f32> = u_xlat11;
          u_xlat11 = vec4<f32>(x_4023.x, x_4023.y, x_4024.z, x_4024.w);
        } else {
          let x_4027 : vec3<f32> = vs_INTERP0;
          let x_4029 : i32 = u_xlati73;
          let x_4032 : i32 = u_xlati73;
          let x_4036 : vec4<f32> = x_3833.x_AdditionalLightsWorldToLights[((x_4029 + 1i) / 4i)][((x_4032 + 1i) % 4i)];
          u_xlat12 = (vec4<f32>(x_4027.y, x_4027.y, x_4027.y, x_4027.y) * x_4036);
          let x_4038 : i32 = u_xlati73;
          let x_4040 : i32 = u_xlati73;
          let x_4043 : vec4<f32> = x_3833.x_AdditionalLightsWorldToLights[(x_4038 / 4i)][(x_4040 % 4i)];
          let x_4044 : vec3<f32> = vs_INTERP0;
          let x_4047 : vec4<f32> = u_xlat12;
          u_xlat12 = ((x_4043 * vec4<f32>(x_4044.x, x_4044.x, x_4044.x, x_4044.x)) + x_4047);
          let x_4049 : i32 = u_xlati73;
          let x_4052 : i32 = u_xlati73;
          let x_4056 : vec4<f32> = x_3833.x_AdditionalLightsWorldToLights[((x_4049 + 2i) / 4i)][((x_4052 + 2i) % 4i)];
          let x_4057 : vec3<f32> = vs_INTERP0;
          let x_4060 : vec4<f32> = u_xlat12;
          u_xlat12 = ((x_4056 * vec4<f32>(x_4057.z, x_4057.z, x_4057.z, x_4057.z)) + x_4060);
          let x_4062 : vec4<f32> = u_xlat12;
          let x_4063 : i32 = u_xlati73;
          let x_4066 : i32 = u_xlati73;
          let x_4070 : vec4<f32> = x_3833.x_AdditionalLightsWorldToLights[((x_4063 + 3i) / 4i)][((x_4066 + 3i) % 4i)];
          u_xlat12 = (x_4062 + x_4070);
          let x_4072 : vec4<f32> = u_xlat12;
          let x_4074 : vec4<f32> = u_xlat12;
          let x_4076 : vec3<f32> = (vec3<f32>(x_4072.x, x_4072.y, x_4072.z) / vec3<f32>(x_4074.w, x_4074.w, x_4074.w));
          let x_4077 : vec4<f32> = u_xlat12;
          u_xlat12 = vec4<f32>(x_4076.x, x_4076.y, x_4076.z, x_4077.w);
          let x_4079 : vec4<f32> = u_xlat12;
          let x_4081 : vec4<f32> = u_xlat12;
          u_xlat71 = dot(vec3<f32>(x_4079.x, x_4079.y, x_4079.z), vec3<f32>(x_4081.x, x_4081.y, x_4081.z));
          let x_4084 : f32 = u_xlat71;
          u_xlat71 = inverseSqrt(x_4084);
          let x_4086 : f32 = u_xlat71;
          let x_4088 : vec4<f32> = u_xlat12;
          let x_4090 : vec3<f32> = (vec3<f32>(x_4086, x_4086, x_4086) * vec3<f32>(x_4088.x, x_4088.y, x_4088.z));
          let x_4091 : vec4<f32> = u_xlat12;
          u_xlat12 = vec4<f32>(x_4090.x, x_4090.y, x_4090.z, x_4091.w);
          let x_4093 : vec4<f32> = u_xlat12;
          u_xlat71 = dot(abs(vec3<f32>(x_4093.x, x_4093.y, x_4093.z)), vec3<f32>(1.0f, 1.0f, 1.0f));
          let x_4098 : f32 = u_xlat71;
          u_xlat71 = max(x_4098, 0.000001f);
          let x_4101 : f32 = u_xlat71;
          u_xlat71 = (1.0f / x_4101);
          let x_4103 : f32 = u_xlat71;
          let x_4105 : vec4<f32> = u_xlat12;
          let x_4107 : vec3<f32> = (vec3<f32>(x_4103, x_4103, x_4103) * vec3<f32>(x_4105.z, x_4105.x, x_4105.y));
          let x_4108 : vec4<f32> = u_xlat13;
          u_xlat13 = vec4<f32>(x_4107.x, x_4107.y, x_4107.z, x_4108.w);
          let x_4111 : f32 = u_xlat13.x;
          u_xlat13.x = -(x_4111);
          let x_4115 : f32 = u_xlat13.x;
          u_xlat13.x = clamp(x_4115, 0.0f, 1.0f);
          let x_4119 : vec4<f32> = u_xlat13;
          let x_4122 : vec4<bool> = (vec4<f32>(x_4119.y, x_4119.z, x_4119.y, x_4119.z) >= vec4<f32>(0.0f, 0.0f, 0.0f, 0.0f));
          u_xlatb53 = vec2<bool>(x_4122.x, x_4122.y);
          let x_4125 : bool = u_xlatb53.x;
          if (x_4125) {
            let x_4130 : f32 = u_xlat13.x;
            x_4126 = x_4130;
          } else {
            let x_4133 : f32 = u_xlat13.x;
            x_4126 = -(x_4133);
          }
          let x_4135 : f32 = x_4126;
          u_xlat53.x = x_4135;
          let x_4138 : bool = u_xlatb53.y;
          if (x_4138) {
            let x_4143 : f32 = u_xlat13.x;
            x_4139 = x_4143;
          } else {
            let x_4146 : f32 = u_xlat13.x;
            x_4139 = -(x_4146);
          }
          let x_4148 : f32 = x_4139;
          u_xlat53.y = x_4148;
          let x_4150 : vec4<f32> = u_xlat12;
          let x_4152 : f32 = u_xlat71;
          let x_4155 : vec2<f32> = u_xlat53;
          u_xlat53 = ((vec2<f32>(x_4150.x, x_4150.y) * vec2<f32>(x_4152, x_4152)) + x_4155);
          let x_4157 : vec2<f32> = u_xlat53;
          u_xlat53 = ((x_4157 * vec2<f32>(0.5f, 0.5f)) + vec2<f32>(0.5f, 0.5f));
          let x_4160 : vec2<f32> = u_xlat53;
          u_xlat53 = clamp(x_4160, vec2<f32>(0.0f, 0.0f), vec2<f32>(1.0f, 1.0f));
          let x_4164 : u32 = u_xlatu65;
          let x_4167 : vec4<f32> = x_3833.x_AdditionalLightsCookieAtlasUVRects[bitcast<i32>(x_4164)];
          let x_4169 : vec2<f32> = u_xlat53;
          let x_4171 : u32 = u_xlatu65;
          let x_4174 : vec4<f32> = x_3833.x_AdditionalLightsCookieAtlasUVRects[bitcast<i32>(x_4171)];
          let x_4176 : vec2<f32> = ((vec2<f32>(x_4167.x, x_4167.y) * x_4169) + vec2<f32>(x_4174.z, x_4174.w));
          let x_4177 : vec4<f32> = u_xlat11;
          u_xlat11 = vec4<f32>(x_4176.x, x_4176.y, x_4177.z, x_4177.w);
        }
      }
      let x_4184 : vec4<f32> = u_xlat11;
      let x_4187 : f32 = x_90.x_GlobalMipBias.x;
      let x_4188 : vec4<f32> = textureSampleBias(x_AdditionalLightsCookieAtlasTexture, sampler_AdditionalLightsCookieAtlasTexture, vec2<f32>(x_4184.x, x_4184.y), x_4187);
      u_xlat11 = x_4188;
      let x_4190 : bool = u_xlatb48.y;
      if (x_4190) {
        let x_4195 : f32 = u_xlat11.w;
        x_4191 = x_4195;
      } else {
        let x_4198 : f32 = u_xlat11.x;
        x_4191 = x_4198;
      }
      let x_4199 : f32 = x_4191;
      u_xlat71 = x_4199;
      let x_4201 : bool = u_xlatb48.x;
      if (x_4201) {
        let x_4205 : vec4<f32> = u_xlat11;
        x_4202 = vec3<f32>(x_4205.x, x_4205.y, x_4205.z);
      } else {
        let x_4208 : f32 = u_xlat71;
        x_4202 = vec3<f32>(x_4208, x_4208, x_4208);
      }
      let x_4210 : vec3<f32> = x_4202;
      let x_4211 : vec4<f32> = u_xlat11;
      u_xlat11 = vec4<f32>(x_4210.x, x_4210.y, x_4210.z, x_4211.w);
    } else {
      u_xlat11.x = 1.0f;
      u_xlat11.y = 1.0f;
      u_xlat11.z = 1.0f;
    }
    let x_4217 : vec4<f32> = u_xlat11;
    let x_4219 : u32 = u_xlatu65;
    let x_4222 : vec4<f32> = x_3724.x_AdditionalLightsColor[bitcast<i32>(x_4219)];
    let x_4224 : vec3<f32> = (vec3<f32>(x_4217.x, x_4217.y, x_4217.z) * vec3<f32>(x_4222.x, x_4222.y, x_4222.z));
    let x_4225 : vec4<f32> = u_xlat11;
    u_xlat11 = vec4<f32>(x_4224.x, x_4224.y, x_4224.z, x_4225.w);
    let x_4227 : f32 = u_xlat27;
    let x_4229 : vec4<f32> = u_xlat11;
    let x_4231 : vec3<f32> = (vec3<f32>(x_4227, x_4227, x_4227) * vec3<f32>(x_4229.x, x_4229.y, x_4229.z));
    let x_4232 : vec4<f32> = u_xlat11;
    u_xlat11 = vec4<f32>(x_4231.x, x_4231.y, x_4231.z, x_4232.w);
    let x_4234 : vec4<f32> = u_xlat3;
    let x_4236 : vec4<f32> = u_xlat10;
    u_xlat65 = dot(vec3<f32>(x_4234.x, x_4234.y, x_4234.z), vec3<f32>(x_4236.x, x_4236.y, x_4236.z));
    let x_4239 : f32 = u_xlat65;
    u_xlat65 = clamp(x_4239, 0.0f, 1.0f);
    let x_4241 : f32 = u_xlat65;
    let x_4242 : f32 = u_xlat67;
    u_xlat65 = (x_4241 * x_4242);
    let x_4244 : f32 = u_xlat65;
    let x_4246 : vec4<f32> = u_xlat11;
    let x_4248 : vec3<f32> = (vec3<f32>(x_4244, x_4244, x_4244) * vec3<f32>(x_4246.x, x_4246.y, x_4246.z));
    let x_4249 : vec4<f32> = u_xlat11;
    u_xlat11 = vec4<f32>(x_4248.x, x_4248.y, x_4248.z, x_4249.w);
    let x_4251 : vec4<f32> = u_xlat9;
    let x_4253 : f32 = u_xlat70;
    let x_4256 : vec3<f32> = u_xlat2;
    let x_4257 : vec3<f32> = ((vec3<f32>(x_4251.x, x_4251.y, x_4251.z) * vec3<f32>(x_4253, x_4253, x_4253)) + x_4256);
    let x_4258 : vec4<f32> = u_xlat9;
    u_xlat9 = vec4<f32>(x_4257.x, x_4257.y, x_4257.z, x_4258.w);
    let x_4260 : vec4<f32> = u_xlat9;
    let x_4262 : vec4<f32> = u_xlat9;
    u_xlat65 = dot(vec3<f32>(x_4260.x, x_4260.y, x_4260.z), vec3<f32>(x_4262.x, x_4262.y, x_4262.z));
    let x_4265 : f32 = u_xlat65;
    u_xlat65 = max(x_4265, 1.17549435e-37f);
    let x_4267 : f32 = u_xlat65;
    u_xlat65 = inverseSqrt(x_4267);
    let x_4269 : f32 = u_xlat65;
    let x_4271 : vec4<f32> = u_xlat9;
    let x_4273 : vec3<f32> = (vec3<f32>(x_4269, x_4269, x_4269) * vec3<f32>(x_4271.x, x_4271.y, x_4271.z));
    let x_4274 : vec4<f32> = u_xlat9;
    u_xlat9 = vec4<f32>(x_4273.x, x_4273.y, x_4273.z, x_4274.w);
    let x_4276 : vec4<f32> = u_xlat3;
    let x_4278 : vec4<f32> = u_xlat9;
    u_xlat65 = dot(vec3<f32>(x_4276.x, x_4276.y, x_4276.z), vec3<f32>(x_4278.x, x_4278.y, x_4278.z));
    let x_4281 : f32 = u_xlat65;
    u_xlat65 = clamp(x_4281, 0.0f, 1.0f);
    let x_4283 : vec4<f32> = u_xlat10;
    let x_4285 : vec4<f32> = u_xlat9;
    u_xlat67 = dot(vec3<f32>(x_4283.x, x_4283.y, x_4283.z), vec3<f32>(x_4285.x, x_4285.y, x_4285.z));
    let x_4288 : f32 = u_xlat67;
    u_xlat67 = clamp(x_4288, 0.0f, 1.0f);
    let x_4290 : f32 = u_xlat65;
    let x_4291 : f32 = u_xlat65;
    u_xlat65 = (x_4290 * x_4291);
    let x_4293 : f32 = u_xlat65;
    let x_4295 : f32 = u_xlat43.x;
    u_xlat65 = ((x_4293 * x_4295) + 1.000010014f);
    let x_4298 : f32 = u_xlat67;
    let x_4299 : f32 = u_xlat67;
    u_xlat67 = (x_4298 * x_4299);
    let x_4301 : f32 = u_xlat65;
    let x_4302 : f32 = u_xlat65;
    u_xlat65 = (x_4301 * x_4302);
    let x_4304 : f32 = u_xlat67;
    u_xlat67 = max(x_4304, 0.100000001f);
    let x_4306 : f32 = u_xlat65;
    let x_4307 : f32 = u_xlat67;
    u_xlat65 = (x_4306 * x_4307);
    let x_4310 : f32 = u_xlat5.x;
    let x_4311 : f32 = u_xlat65;
    u_xlat65 = (x_4310 * x_4311);
    let x_4313 : f32 = u_xlat66;
    let x_4314 : f32 = u_xlat65;
    u_xlat65 = (x_4313 / x_4314);
    let x_4316 : f32 = u_xlat65;
    let x_4319 : vec3<f32> = u_xlat4;
    let x_4320 : vec3<f32> = ((vec3<f32>(x_4316, x_4316, x_4316) * vec3<f32>(0.039999999f, 0.039999999f, 0.039999999f)) + x_4319);
    let x_4321 : vec4<f32> = u_xlat9;
    u_xlat9 = vec4<f32>(x_4320.x, x_4320.y, x_4320.z, x_4321.w);
    let x_4323 : vec4<f32> = u_xlat9;
    let x_4325 : vec4<f32> = u_xlat11;
    let x_4328 : vec4<f32> = u_xlat8;
    let x_4330 : vec3<f32> = ((vec3<f32>(x_4323.x, x_4323.y, x_4323.z) * vec3<f32>(x_4325.x, x_4325.y, x_4325.z)) + vec3<f32>(x_4328.x, x_4328.y, x_4328.z));
    let x_4331 : vec4<f32> = u_xlat8;
    u_xlat8 = vec4<f32>(x_4330.x, x_4330.y, x_4330.z, x_4331.w);

    continuing {
      let x_4333 : u32 = u_xlatu_loop_1;
      u_xlatu_loop_1 = (x_4333 + bitcast<u32>(1i));
    }
  }
  let x_4335 : vec3<f32> = u_xlat26;
  let x_4336 : vec4<f32> = u_xlat6;
  let x_4339 : vec4<f32> = u_xlat7;
  u_xlat2 = ((x_4335 * vec3<f32>(x_4336.x, x_4336.x, x_4336.x)) + vec3<f32>(x_4339.x, x_4339.y, x_4339.z));
  let x_4342 : vec4<f32> = u_xlat8;
  let x_4344 : vec3<f32> = u_xlat2;
  u_xlat2 = (vec3<f32>(x_4342.x, x_4342.y, x_4342.z) + x_4344);
  let x_4348 : vec4<f32> = vs_INTERP4;
  let x_4350 : vec3<f32> = u_xlat0;
  let x_4352 : vec3<f32> = u_xlat2;
  let x_4353 : vec3<f32> = ((vec3<f32>(x_4348.w, x_4348.w, x_4348.w) * x_4350) + x_4352);
  let x_4354 : vec4<f32> = SV_Target0;
  SV_Target0 = vec4<f32>(x_4353.x, x_4353.y, x_4353.z, x_4354.w);
  let x_4356 : bool = u_xlatb22;
  if (x_4356) {
    let x_4361 : f32 = u_xlat1.x;
    x_4357 = x_4361;
  } else {
    x_4357 = 1.0f;
  }
  let x_4363 : f32 = x_4357;
  SV_Target0.w = x_4363;
  return;
}

struct main_out {
  @location(0)
  SV_Target0_1 : vec4<f32>,
}

@fragment
fn main(@builtin(position) gl_FragCoord_param : vec4<f32>, @location(1) vs_INTERP1_param : vec3<f32>, @location(0) vs_INTERP0_param : vec3<f32>, @location(3) vs_INTERP3_param : vec4<f32>, @location(4) vs_INTERP4_param : vec4<f32>, @location(2) vs_INTERP2_param : vec4<f32>, @location(5) vs_INTERP5_param : vec2<f32>, @location(6) vs_INTERP9_param : vec4<f32>) -> main_out {
  gl_FragCoord = gl_FragCoord_param;
  vs_INTERP1 = vs_INTERP1_param;
  vs_INTERP0 = vs_INTERP0_param;
  vs_INTERP3 = vs_INTERP3_param;
  vs_INTERP4 = vs_INTERP4_param;
  vs_INTERP2 = vs_INTERP2_param;
  vs_INTERP5 = vs_INTERP5_param;
  vs_INTERP9 = vs_INTERP9_param;
  main_1();
  return main_out(SV_Target0);
}

