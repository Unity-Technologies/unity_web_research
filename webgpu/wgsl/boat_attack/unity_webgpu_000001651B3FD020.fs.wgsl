struct PGlobals {
  x_ScaledScreenParams : vec4<f32>,
  x_GlobalMipBias : vec2<f32>,
  x_AlphaToMaskAvailable : f32,
  @size(4)
  padding : u32,
  x_MainLightPosition : vec4<f32>,
  x_MainLightColor : vec4<f32>,
  x_AmbientOcclusionParam : vec4<f32>,
  x_AdditionalLightsCount : vec4<f32>,
  x_WorldSpaceCameraPos : vec3<f32>,
  @size(4)
  padding_1 : u32,
  unity_OrthoParams : vec4<f32>,
  x_ScaleBiasRt : vec4<f32>,
  unity_MatrixV : mat4x4<f32>,
}

struct UnityPerMaterial {
  Texture2D_B222E8F_TexelSize : vec4<f32>,
  Color_C30C7CA3 : vec4<f32>,
  Texture2D_D9BFD5F1_TexelSize : vec4<f32>,
}

type Arr = array<mat4x4<f32>, 5u>;

struct MainLightShadows {
  x_MainLightWorldToShadow : Arr,
  x_CascadeShadowSplitSpheres0 : vec4<f32>,
  x_CascadeShadowSplitSpheres1 : vec4<f32>,
  x_CascadeShadowSplitSpheres2 : vec4<f32>,
  x_CascadeShadowSplitSpheres3 : vec4<f32>,
  x_CascadeShadowSplitSphereRadii : vec4<f32>,
  x_MainLightShadowOffset0 : vec4<f32>,
  x_MainLightShadowOffset1 : vec4<f32>,
  x_MainLightShadowParams : vec4<f32>,
  x_MainLightShadowmapSize : vec4<f32>,
}

type Arr_1 = array<vec4<f32>, 2u>;

struct UnityPerDraw {
  unity_ObjectToWorld : mat4x4<f32>,
  unity_WorldToObject : mat4x4<f32>,
  unity_LODFade : vec4<f32>,
  unity_WorldTransformParams : vec4<f32>,
  unity_RenderingLayer : vec4<f32>,
  unity_LightData : vec4<f32>,
  unity_LightIndices : Arr_1,
  unity_ProbesOcclusion : vec4<f32>,
  unity_SpecCube0_HDR : vec4<f32>,
  unity_SpecCube1_HDR : vec4<f32>,
  unity_SpecCube0_BoxMax : vec4<f32>,
  unity_SpecCube0_BoxMin : vec4<f32>,
  unity_SpecCube0_ProbePosition : vec4<f32>,
  unity_SpecCube1_BoxMax : vec4<f32>,
  unity_SpecCube1_BoxMin : vec4<f32>,
  unity_SpecCube1_ProbePosition : vec4<f32>,
  unity_LightmapST : vec4<f32>,
  unity_DynamicLightmapST : vec4<f32>,
  unity_SHAr : vec4<f32>,
  unity_SHAg : vec4<f32>,
  unity_SHAb : vec4<f32>,
  unity_SHBr : vec4<f32>,
  unity_SHBg : vec4<f32>,
  unity_SHBb : vec4<f32>,
  unity_SHC : vec4<f32>,
  unity_RendererBounds_Min : vec4<f32>,
  unity_RendererBounds_Max : vec4<f32>,
  unity_MatrixPreviousM : mat4x4<f32>,
  unity_MatrixPreviousMI : mat4x4<f32>,
  unity_MotionVectorsParams : vec4<f32>,
  unity_SpriteColor : vec4<f32>,
  unity_SpriteProps : vec4<f32>,
}

struct strided_arr {
  @size(16)
  el : f32,
}

type Arr_2 = array<strided_arr, 8u>;

struct LightCookies {
  x_MainLightWorldToLight : mat4x4<f32>,
  x_AdditionalLightsCookieEnableBits : Arr_2,
  x_MainLightCookieTextureFormat : f32,
  x_AdditionalLightsCookieAtlasTextureFormat : f32,
}

type Arr_3 = array<vec4<f32>, 256u>;

type Arr_4 = array<vec4<f32>, 256u>;

type Arr_5 = array<vec4<f32>, 256u>;

type Arr_6 = array<vec4<f32>, 256u>;

type Arr_7 = array<vec4<f32>, 256u>;

struct strided_arr_1 {
  @size(16)
  el : f32,
}

type Arr_8 = array<strided_arr_1, 256u>;

type Arr_9 = array<vec4<f32>, 256u>;

type Arr_10 = array<strided_arr_1, 256u>;

struct AdditionalLights {
  x_AdditionalLightsPosition : Arr_9,
  x_AdditionalLightsColor : Arr_9,
  x_AdditionalLightsAttenuation : Arr_9,
  x_AdditionalLightsSpotDir : Arr_9,
  x_AdditionalLightsOcclusionProbes : Arr_9,
  x_AdditionalLightsLayerMasks : Arr_10,
}

type Arr_11 = array<mat4x4<f32>, 256u>;

struct AdditionalLightsCookies {
  x_AdditionalLightsWorldToLights : Arr_11,
  x_AdditionalLightsCookieAtlasUVRects : Arr_9,
  x_AdditionalLightsLightTypes : Arr_10,
}

var<private> gl_FragCoord : vec4<f32>;

var<private> vs_INTERP1 : vec3<f32>;

@group(0) @binding(7) var Texture2D_B222E8F : texture_2d<f32>;

@group(0) @binding(15) var samplerTexture2D_B222E8F : sampler;

var<private> vs_INTERP3 : vec4<f32>;

@group(1) @binding(0) var<uniform> x_66 : PGlobals;

@group(1) @binding(6) var<uniform> x_78 : UnityPerMaterial;

@group(0) @binding(8) var Texture2D_D9BFD5F1 : texture_2d<f32>;

@group(0) @binding(16) var samplerTexture2D_D9BFD5F1 : sampler;

var<private> vs_INTERP4 : vec4<f32>;

var<private> vs_INTERP0 : vec3<f32>;

@group(1) @binding(3) var<uniform> x_138 : MainLightShadows;

@group(0) @binding(4) var x_MainLightShadowmapTexture : texture_depth_2d;

@group(0) @binding(12) var sampler_MainLightShadowmapTexture : sampler_comparison;

var<private> vs_INTERP2 : vec4<f32>;

@group(1) @binding(2) var<uniform> x_1752 : UnityPerDraw;

@group(0) @binding(2) var unity_LightmapInd : texture_2d<f32>;

@group(0) @binding(10) var samplerunity_Lightmap : sampler;

var<private> vs_INTERP5 : vec2<f32>;

@group(0) @binding(1) var unity_Lightmap : texture_2d<f32>;

@group(0) @binding(3) var x_ScreenSpaceOcclusionTexture : texture_2d<f32>;

@group(0) @binding(11) var sampler_ScreenSpaceOcclusionTexture : sampler;

@group(1) @binding(4) var<uniform> x_3293 : LightCookies;

@group(0) @binding(5) var x_MainLightCookieTexture : texture_2d<f32>;

@group(0) @binding(13) var sampler_MainLightCookieTexture : sampler;

@group(0) @binding(0) var unity_SpecCube0 : texture_cube<f32>;

@group(0) @binding(9) var samplerunity_SpecCube0 : sampler;

@group(1) @binding(1) var<uniform> x_3749 : AdditionalLights;

@group(1) @binding(5) var<uniform> x_3859 : AdditionalLightsCookies;

@group(0) @binding(6) var x_AdditionalLightsCookieAtlasTexture : texture_2d<f32>;

@group(0) @binding(14) var sampler_AdditionalLightsCookieAtlasTexture : sampler;

var<private> SV_Target0 : vec4<f32>;

fn main_1() {
  var hlslcc_FragCoord : vec4<f32>;
  var u_xlat0 : vec3<f32>;
  var u_xlat1 : vec4<f32>;
  var u_xlat2 : vec3<f32>;
  var u_xlat3 : vec4<f32>;
  var u_xlat4 : vec4<f32>;
  var u_xlat66 : f32;
  var u_xlat25 : vec3<f32>;
  var u_xlat5 : vec4<f32>;
  var u_xlat6 : vec4<f32>;
  var u_xlat7 : vec4<f32>;
  var u_xlatb4 : vec4<bool>;
  var u_xlatu66 : u32;
  var u_xlati66 : i32;
  var u_xlatb66 : bool;
  var u_xlatb68 : bool;
  var txVec0 : vec3<f32>;
  var txVec1 : vec3<f32>;
  var txVec2 : vec3<f32>;
  var txVec3 : vec3<f32>;
  var u_xlat68 : f32;
  var u_xlatb70 : bool;
  var u_xlat49 : vec2<f32>;
  var u_xlat51 : vec2<f32>;
  var u_xlat8 : vec4<f32>;
  var u_xlat9 : vec4<f32>;
  var u_xlat10 : vec4<f32>;
  var u_xlat11 : vec4<f32>;
  var u_xlat12 : vec4<f32>;
  var u_xlat13 : vec4<f32>;
  var u_xlat70 : f32;
  var txVec4 : vec3<f32>;
  var txVec5 : vec3<f32>;
  var u_xlat27 : vec3<f32>;
  var txVec6 : vec3<f32>;
  var txVec7 : vec3<f32>;
  var txVec8 : vec3<f32>;
  var txVec9 : vec3<f32>;
  var txVec10 : vec3<f32>;
  var txVec11 : vec3<f32>;
  var txVec12 : vec3<f32>;
  var u_xlat28 : vec3<f32>;
  var u_xlat14 : vec4<f32>;
  var u_xlat15 : vec4<f32>;
  var u_xlat29 : vec2<f32>;
  var u_xlat57 : vec2<f32>;
  var u_xlat52 : vec2<f32>;
  var u_xlat16 : vec4<f32>;
  var u_xlat17 : vec4<f32>;
  var u_xlat18 : vec4<f32>;
  var txVec13 : vec3<f32>;
  var txVec14 : vec3<f32>;
  var txVec15 : vec3<f32>;
  var txVec16 : vec3<f32>;
  var txVec17 : vec3<f32>;
  var txVec18 : vec3<f32>;
  var txVec19 : vec3<f32>;
  var txVec20 : vec3<f32>;
  var txVec21 : vec3<f32>;
  var txVec22 : vec3<f32>;
  var txVec23 : vec3<f32>;
  var txVec24 : vec3<f32>;
  var txVec25 : vec3<f32>;
  var txVec26 : vec3<f32>;
  var txVec27 : vec3<f32>;
  var txVec28 : vec3<f32>;
  var txVec29 : vec3<f32>;
  var u_xlatb5 : bool;
  var u_xlatb27 : bool;
  var u_xlatb1 : bool;
  var x_1665 : f32;
  var u_xlat23 : vec3<f32>;
  var u_xlat45 : f32;
  var u_xlat67 : f32;
  var u_xlatb45 : bool;
  var x_1713 : f32;
  var u_xlatb23 : vec3<bool>;
  var x_1838 : f32;
  var x_1851 : f32;
  var x_1863 : f32;
  var u_xlat72 : f32;
  var txVec30 : vec3<f32>;
  var txVec31 : vec3<f32>;
  var txVec32 : vec3<f32>;
  var txVec33 : vec3<f32>;
  var u_xlatb51 : vec2<bool>;
  var u_xlat54 : vec2<f32>;
  var txVec34 : vec3<f32>;
  var u_xlat73 : f32;
  var txVec35 : vec3<f32>;
  var txVec36 : vec3<f32>;
  var txVec37 : vec3<f32>;
  var txVec38 : vec3<f32>;
  var txVec39 : vec3<f32>;
  var txVec40 : vec3<f32>;
  var txVec41 : vec3<f32>;
  var txVec42 : vec3<f32>;
  var u_xlat58 : vec2<f32>;
  var u_xlat31 : vec2<f32>;
  var u_xlat55 : vec2<f32>;
  var u_xlat19 : vec4<f32>;
  var u_xlat20 : vec4<f32>;
  var u_xlat21 : vec4<f32>;
  var txVec43 : vec3<f32>;
  var txVec44 : vec3<f32>;
  var u_xlat75 : f32;
  var txVec45 : vec3<f32>;
  var txVec46 : vec3<f32>;
  var txVec47 : vec3<f32>;
  var txVec48 : vec3<f32>;
  var txVec49 : vec3<f32>;
  var txVec50 : vec3<f32>;
  var txVec51 : vec3<f32>;
  var txVec52 : vec3<f32>;
  var txVec53 : vec3<f32>;
  var txVec54 : vec3<f32>;
  var txVec55 : vec3<f32>;
  var txVec56 : vec3<f32>;
  var txVec57 : vec3<f32>;
  var u_xlat30 : f32;
  var txVec58 : vec3<f32>;
  var txVec59 : vec3<f32>;
  var u_xlat26 : f32;
  var x_3375 : f32;
  var x_3386 : vec3<f32>;
  var u_xlatu_loop_1 : u32;
  var u_xlatu3 : u32;
  var u_xlati70 : i32;
  var indexable : array<vec4<u32>, 4u>;
  var u_xlat71 : f32;
  var u_xlat74 : f32;
  var u_xlatu74 : u32;
  var u_xlati75 : i32;
  var u_xlati74 : i32;
  var u_xlati76 : i32;
  var u_xlatb74 : bool;
  var u_xlatb55 : vec2<bool>;
  var x_4151 : f32;
  var x_4164 : f32;
  var x_4216 : f32;
  var x_4227 : vec3<f32>;
  var x_4408 : f32;
  var u_xlat_precise_vec4 : vec4<f32>;
  var u_xlat_precise_ivec4 : vec4<i32>;
  var u_xlat_precise_bvec4 : vec4<bool>;
  var u_xlat_precise_uvec4 : vec4<u32>;
  let x_13 : vec4<f32> = gl_FragCoord;
  let x_14 : vec3<f32> = vec3<f32>(x_13.x, x_13.y, x_13.z);
  let x_20 : f32 = gl_FragCoord.w;
  hlslcc_FragCoord = vec4<f32>(x_14.x, x_14.y, x_14.z, (1.0f / x_20));
  let x_30 : vec3<f32> = vs_INTERP1;
  let x_31 : vec3<f32> = vs_INTERP1;
  u_xlat0.x = dot(x_30, x_31);
  let x_37 : f32 = u_xlat0.x;
  u_xlat0.x = sqrt(x_37);
  let x_41 : f32 = u_xlat0.x;
  u_xlat0.x = (1.0f / x_41);
  let x_44 : vec3<f32> = u_xlat0;
  let x_46 : vec3<f32> = vs_INTERP1;
  u_xlat0 = (vec3<f32>(x_44.x, x_44.x, x_44.x) * x_46);
  let x_61 : vec4<f32> = vs_INTERP3;
  let x_71 : f32 = x_66.x_GlobalMipBias.x;
  let x_72 : vec4<f32> = textureSampleBias(Texture2D_B222E8F, samplerTexture2D_B222E8F, vec2<f32>(x_61.x, x_61.y), x_71);
  u_xlat1 = x_72;
  let x_74 : vec4<f32> = u_xlat1;
  let x_81 : vec4<f32> = x_78.Color_C30C7CA3;
  u_xlat2 = (vec3<f32>(x_74.x, x_74.y, x_74.z) * vec3<f32>(x_81.x, x_81.y, x_81.z));
  let x_90 : vec4<f32> = vs_INTERP3;
  let x_93 : f32 = x_66.x_GlobalMipBias.x;
  let x_94 : vec4<f32> = textureSampleBias(Texture2D_D9BFD5F1, samplerTexture2D_D9BFD5F1, vec2<f32>(x_90.x, x_90.y), x_93);
  u_xlat3 = vec4<f32>(x_94.w, x_94.x, x_94.y, x_94.z);
  let x_97 : vec4<f32> = u_xlat3;
  u_xlat4 = ((vec4<f32>(x_97.y, x_97.z, x_97.w, x_97.x) * vec4<f32>(2.0f, 2.0f, 2.0f, 2.0f)) + vec4<f32>(-1.0f, -1.0f, -1.0f, -1.0f));
  let x_106 : vec4<f32> = u_xlat4;
  let x_107 : vec4<f32> = u_xlat4;
  u_xlat66 = dot(x_106, x_107);
  let x_109 : f32 = u_xlat66;
  u_xlat66 = inverseSqrt(x_109);
  let x_112 : f32 = u_xlat66;
  let x_114 : vec4<f32> = u_xlat4;
  u_xlat25 = (vec3<f32>(x_112, x_112, x_112) * vec3<f32>(x_114.x, x_114.y, x_114.z));
  let x_120 : f32 = vs_INTERP4.y;
  u_xlat66 = (x_120 * 200.0f);
  let x_123 : f32 = u_xlat66;
  u_xlat66 = min(x_123, 1.0f);
  let x_125 : f32 = u_xlat66;
  let x_127 : vec4<f32> = u_xlat1;
  let x_129 : vec3<f32> = (vec3<f32>(x_125, x_125, x_125) * vec3<f32>(x_127.x, x_127.y, x_127.z));
  let x_130 : vec4<f32> = u_xlat1;
  u_xlat1 = vec4<f32>(x_129.x, x_129.y, x_129.z, x_130.w);
  let x_133 : vec3<f32> = vs_INTERP0;
  let x_140 : vec4<f32> = x_138.x_CascadeShadowSplitSpheres0;
  let x_143 : vec3<f32> = (x_133 + -(vec3<f32>(x_140.x, x_140.y, x_140.z)));
  let x_144 : vec4<f32> = u_xlat4;
  u_xlat4 = vec4<f32>(x_143.x, x_143.y, x_143.z, x_144.w);
  let x_147 : vec3<f32> = vs_INTERP0;
  let x_150 : vec4<f32> = x_138.x_CascadeShadowSplitSpheres1;
  let x_153 : vec3<f32> = (x_147 + -(vec3<f32>(x_150.x, x_150.y, x_150.z)));
  let x_154 : vec4<f32> = u_xlat5;
  u_xlat5 = vec4<f32>(x_153.x, x_153.y, x_153.z, x_154.w);
  let x_157 : vec3<f32> = vs_INTERP0;
  let x_160 : vec4<f32> = x_138.x_CascadeShadowSplitSpheres2;
  let x_163 : vec3<f32> = (x_157 + -(vec3<f32>(x_160.x, x_160.y, x_160.z)));
  let x_164 : vec4<f32> = u_xlat6;
  u_xlat6 = vec4<f32>(x_163.x, x_163.y, x_163.z, x_164.w);
  let x_167 : vec3<f32> = vs_INTERP0;
  let x_170 : vec4<f32> = x_138.x_CascadeShadowSplitSpheres3;
  let x_173 : vec3<f32> = (x_167 + -(vec3<f32>(x_170.x, x_170.y, x_170.z)));
  let x_174 : vec4<f32> = u_xlat7;
  u_xlat7 = vec4<f32>(x_173.x, x_173.y, x_173.z, x_174.w);
  let x_176 : vec4<f32> = u_xlat4;
  let x_178 : vec4<f32> = u_xlat4;
  u_xlat4.x = dot(vec3<f32>(x_176.x, x_176.y, x_176.z), vec3<f32>(x_178.x, x_178.y, x_178.z));
  let x_182 : vec4<f32> = u_xlat5;
  let x_184 : vec4<f32> = u_xlat5;
  u_xlat4.y = dot(vec3<f32>(x_182.x, x_182.y, x_182.z), vec3<f32>(x_184.x, x_184.y, x_184.z));
  let x_188 : vec4<f32> = u_xlat6;
  let x_190 : vec4<f32> = u_xlat6;
  u_xlat4.z = dot(vec3<f32>(x_188.x, x_188.y, x_188.z), vec3<f32>(x_190.x, x_190.y, x_190.z));
  let x_195 : vec4<f32> = u_xlat7;
  let x_197 : vec4<f32> = u_xlat7;
  u_xlat4.w = dot(vec3<f32>(x_195.x, x_195.y, x_195.z), vec3<f32>(x_197.x, x_197.y, x_197.z));
  let x_205 : vec4<f32> = u_xlat4;
  let x_208 : vec4<f32> = x_138.x_CascadeShadowSplitSphereRadii;
  u_xlatb4 = (x_205 < x_208);
  let x_212 : bool = u_xlatb4.x;
  u_xlat5.x = select(0.0f, 1.0f, x_212);
  let x_217 : bool = u_xlatb4.y;
  u_xlat5.y = select(0.0f, 1.0f, x_217);
  let x_221 : bool = u_xlatb4.z;
  u_xlat5.z = select(0.0f, 1.0f, x_221);
  let x_225 : bool = u_xlatb4.w;
  u_xlat5.w = select(0.0f, 1.0f, x_225);
  let x_229 : bool = u_xlatb4.x;
  u_xlat4.x = select(-0.0f, -1.0f, x_229);
  let x_234 : bool = u_xlatb4.y;
  u_xlat4.y = select(-0.0f, -1.0f, x_234);
  let x_238 : bool = u_xlatb4.z;
  u_xlat4.z = select(-0.0f, -1.0f, x_238);
  let x_241 : vec4<f32> = u_xlat4;
  let x_243 : vec4<f32> = u_xlat5;
  let x_245 : vec3<f32> = (vec3<f32>(x_241.x, x_241.y, x_241.z) + vec3<f32>(x_243.y, x_243.z, x_243.w));
  let x_246 : vec4<f32> = u_xlat4;
  u_xlat4 = vec4<f32>(x_245.x, x_245.y, x_245.z, x_246.w);
  let x_248 : vec4<f32> = u_xlat4;
  let x_251 : vec3<f32> = max(vec3<f32>(x_248.x, x_248.y, x_248.z), vec3<f32>(0.0f, 0.0f, 0.0f));
  let x_252 : vec4<f32> = u_xlat5;
  u_xlat5 = vec4<f32>(x_252.x, x_251.x, x_251.y, x_251.z);
  let x_254 : vec4<f32> = u_xlat5;
  u_xlat66 = dot(x_254, vec4<f32>(4.0f, 3.0f, 2.0f, 1.0f));
  let x_259 : f32 = u_xlat66;
  u_xlat66 = (-(x_259) + 4.0f);
  let x_264 : f32 = u_xlat66;
  u_xlatu66 = u32(x_264);
  let x_268 : u32 = u_xlatu66;
  u_xlati66 = (bitcast<i32>(x_268) << bitcast<u32>(2i));
  let x_271 : vec3<f32> = vs_INTERP0;
  let x_274 : i32 = u_xlati66;
  let x_277 : i32 = u_xlati66;
  let x_281 : vec4<f32> = x_138.x_MainLightWorldToShadow[((x_274 + 1i) / 4i)][((x_277 + 1i) % 4i)];
  let x_283 : vec3<f32> = (vec3<f32>(x_271.y, x_271.y, x_271.y) * vec3<f32>(x_281.x, x_281.y, x_281.z));
  let x_284 : vec4<f32> = u_xlat4;
  u_xlat4 = vec4<f32>(x_283.x, x_283.y, x_283.z, x_284.w);
  let x_286 : i32 = u_xlati66;
  let x_288 : i32 = u_xlati66;
  let x_291 : vec4<f32> = x_138.x_MainLightWorldToShadow[(x_286 / 4i)][(x_288 % 4i)];
  let x_293 : vec3<f32> = vs_INTERP0;
  let x_296 : vec4<f32> = u_xlat4;
  let x_298 : vec3<f32> = ((vec3<f32>(x_291.x, x_291.y, x_291.z) * vec3<f32>(x_293.x, x_293.x, x_293.x)) + vec3<f32>(x_296.x, x_296.y, x_296.z));
  let x_299 : vec4<f32> = u_xlat4;
  u_xlat4 = vec4<f32>(x_298.x, x_298.y, x_298.z, x_299.w);
  let x_301 : i32 = u_xlati66;
  let x_304 : i32 = u_xlati66;
  let x_308 : vec4<f32> = x_138.x_MainLightWorldToShadow[((x_301 + 2i) / 4i)][((x_304 + 2i) % 4i)];
  let x_310 : vec3<f32> = vs_INTERP0;
  let x_313 : vec4<f32> = u_xlat4;
  let x_315 : vec3<f32> = ((vec3<f32>(x_308.x, x_308.y, x_308.z) * vec3<f32>(x_310.z, x_310.z, x_310.z)) + vec3<f32>(x_313.x, x_313.y, x_313.z));
  let x_316 : vec4<f32> = u_xlat4;
  u_xlat4 = vec4<f32>(x_315.x, x_315.y, x_315.z, x_316.w);
  let x_318 : vec4<f32> = u_xlat4;
  let x_320 : i32 = u_xlati66;
  let x_323 : i32 = u_xlati66;
  let x_327 : vec4<f32> = x_138.x_MainLightWorldToShadow[((x_320 + 3i) / 4i)][((x_323 + 3i) % 4i)];
  let x_329 : vec3<f32> = (vec3<f32>(x_318.x, x_318.y, x_318.z) + vec3<f32>(x_327.x, x_327.y, x_327.z));
  let x_330 : vec4<f32> = u_xlat4;
  u_xlat4 = vec4<f32>(x_329.x, x_329.y, x_329.z, x_330.w);
  let x_335 : f32 = x_138.x_MainLightShadowParams.y;
  u_xlatb66 = (0.0f < x_335);
  let x_337 : bool = u_xlatb66;
  if (x_337) {
    let x_342 : f32 = x_138.x_MainLightShadowParams.y;
    u_xlatb68 = (x_342 == 1.0f);
    let x_344 : bool = u_xlatb68;
    if (x_344) {
      let x_347 : vec4<f32> = u_xlat4;
      let x_351 : vec4<f32> = x_138.x_MainLightShadowOffset0;
      u_xlat5 = (vec4<f32>(x_347.x, x_347.y, x_347.x, x_347.y) + x_351);
      let x_354 : vec4<f32> = u_xlat5;
      let x_355 : vec2<f32> = vec2<f32>(x_354.x, x_354.y);
      let x_357 : f32 = u_xlat4.z;
      txVec0 = vec3<f32>(x_355.x, x_355.y, x_357);
      let x_369 : vec3<f32> = txVec0;
      let x_371 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_369.xy, x_369.z);
      u_xlat6.x = x_371;
      let x_374 : vec4<f32> = u_xlat5;
      let x_375 : vec2<f32> = vec2<f32>(x_374.z, x_374.w);
      let x_377 : f32 = u_xlat4.z;
      txVec1 = vec3<f32>(x_375.x, x_375.y, x_377);
      let x_384 : vec3<f32> = txVec1;
      let x_386 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_384.xy, x_384.z);
      u_xlat6.y = x_386;
      let x_388 : vec4<f32> = u_xlat4;
      let x_392 : vec4<f32> = x_138.x_MainLightShadowOffset1;
      u_xlat5 = (vec4<f32>(x_388.x, x_388.y, x_388.x, x_388.y) + x_392);
      let x_395 : vec4<f32> = u_xlat5;
      let x_396 : vec2<f32> = vec2<f32>(x_395.x, x_395.y);
      let x_398 : f32 = u_xlat4.z;
      txVec2 = vec3<f32>(x_396.x, x_396.y, x_398);
      let x_405 : vec3<f32> = txVec2;
      let x_407 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_405.xy, x_405.z);
      u_xlat6.z = x_407;
      let x_410 : vec4<f32> = u_xlat5;
      let x_411 : vec2<f32> = vec2<f32>(x_410.z, x_410.w);
      let x_413 : f32 = u_xlat4.z;
      txVec3 = vec3<f32>(x_411.x, x_411.y, x_413);
      let x_420 : vec3<f32> = txVec3;
      let x_422 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_420.xy, x_420.z);
      u_xlat6.w = x_422;
      let x_425 : vec4<f32> = u_xlat6;
      u_xlat68 = dot(x_425, vec4<f32>(0.25f, 0.25f, 0.25f, 0.25f));
    } else {
      let x_432 : f32 = x_138.x_MainLightShadowParams.y;
      u_xlatb70 = (x_432 == 2.0f);
      let x_434 : bool = u_xlatb70;
      if (x_434) {
        let x_437 : vec4<f32> = u_xlat4;
        let x_441 : vec4<f32> = x_138.x_MainLightShadowmapSize;
        let x_446 : vec2<f32> = ((vec2<f32>(x_437.x, x_437.y) * vec2<f32>(x_441.z, x_441.w)) + vec2<f32>(0.5f, 0.5f));
        let x_447 : vec4<f32> = u_xlat5;
        u_xlat5 = vec4<f32>(x_446.x, x_446.y, x_447.z, x_447.w);
        let x_449 : vec4<f32> = u_xlat5;
        let x_451 : vec2<f32> = floor(vec2<f32>(x_449.x, x_449.y));
        let x_452 : vec4<f32> = u_xlat5;
        u_xlat5 = vec4<f32>(x_451.x, x_451.y, x_452.z, x_452.w);
        let x_456 : vec4<f32> = u_xlat4;
        let x_459 : vec4<f32> = x_138.x_MainLightShadowmapSize;
        let x_462 : vec4<f32> = u_xlat5;
        u_xlat49 = ((vec2<f32>(x_456.x, x_456.y) * vec2<f32>(x_459.z, x_459.w)) + -(vec2<f32>(x_462.x, x_462.y)));
        let x_466 : vec2<f32> = u_xlat49;
        u_xlat6 = (vec4<f32>(x_466.x, x_466.x, x_466.y, x_466.y) + vec4<f32>(0.5f, 1.0f, 0.5f, 1.0f));
        let x_470 : vec4<f32> = u_xlat6;
        let x_472 : vec4<f32> = u_xlat6;
        u_xlat7 = (vec4<f32>(x_470.x, x_470.x, x_470.z, x_470.z) * vec4<f32>(x_472.x, x_472.x, x_472.z, x_472.z));
        let x_475 : vec4<f32> = u_xlat7;
        let x_479 : vec2<f32> = (vec2<f32>(x_475.y, x_475.w) * vec2<f32>(0.079999998f, 0.079999998f));
        let x_480 : vec4<f32> = u_xlat6;
        u_xlat6 = vec4<f32>(x_479.x, x_480.y, x_479.y, x_480.w);
        let x_482 : vec4<f32> = u_xlat7;
        let x_485 : vec2<f32> = u_xlat49;
        let x_487 : vec2<f32> = ((vec2<f32>(x_482.x, x_482.z) * vec2<f32>(0.5f, 0.5f)) + -(x_485));
        let x_488 : vec4<f32> = u_xlat7;
        u_xlat7 = vec4<f32>(x_487.x, x_487.y, x_488.z, x_488.w);
        let x_491 : vec2<f32> = u_xlat49;
        u_xlat51 = (-(x_491) + vec2<f32>(1.0f, 1.0f));
        let x_496 : vec2<f32> = u_xlat49;
        let x_498 : vec2<f32> = min(x_496, vec2<f32>(0.0f, 0.0f));
        let x_499 : vec4<f32> = u_xlat8;
        u_xlat8 = vec4<f32>(x_498.x, x_498.y, x_499.z, x_499.w);
        let x_501 : vec4<f32> = u_xlat8;
        let x_504 : vec4<f32> = u_xlat8;
        let x_507 : vec2<f32> = u_xlat51;
        let x_508 : vec2<f32> = ((-(vec2<f32>(x_501.x, x_501.y)) * vec2<f32>(x_504.x, x_504.y)) + x_507);
        let x_509 : vec4<f32> = u_xlat8;
        u_xlat8 = vec4<f32>(x_508.x, x_508.y, x_509.z, x_509.w);
        let x_511 : vec2<f32> = u_xlat49;
        u_xlat49 = max(x_511, vec2<f32>(0.0f, 0.0f));
        let x_513 : vec2<f32> = u_xlat49;
        let x_515 : vec2<f32> = u_xlat49;
        let x_517 : vec4<f32> = u_xlat6;
        u_xlat49 = ((-(x_513) * x_515) + vec2<f32>(x_517.y, x_517.w));
        let x_520 : vec4<f32> = u_xlat8;
        let x_522 : vec2<f32> = (vec2<f32>(x_520.x, x_520.y) + vec2<f32>(1.0f, 1.0f));
        let x_523 : vec4<f32> = u_xlat8;
        u_xlat8 = vec4<f32>(x_522.x, x_522.y, x_523.z, x_523.w);
        let x_525 : vec2<f32> = u_xlat49;
        u_xlat49 = (x_525 + vec2<f32>(1.0f, 1.0f));
        let x_528 : vec4<f32> = u_xlat7;
        let x_532 : vec2<f32> = (vec2<f32>(x_528.x, x_528.y) * vec2<f32>(0.159999996f, 0.159999996f));
        let x_533 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_532.x, x_532.y, x_533.z, x_533.w);
        let x_535 : vec2<f32> = u_xlat51;
        let x_536 : vec2<f32> = (x_535 * vec2<f32>(0.159999996f, 0.159999996f));
        let x_537 : vec4<f32> = u_xlat7;
        u_xlat7 = vec4<f32>(x_536.x, x_536.y, x_537.z, x_537.w);
        let x_539 : vec4<f32> = u_xlat8;
        let x_541 : vec2<f32> = (vec2<f32>(x_539.x, x_539.y) * vec2<f32>(0.159999996f, 0.159999996f));
        let x_542 : vec4<f32> = u_xlat8;
        u_xlat8 = vec4<f32>(x_541.x, x_541.y, x_542.z, x_542.w);
        let x_545 : vec2<f32> = u_xlat49;
        let x_546 : vec2<f32> = (x_545 * vec2<f32>(0.159999996f, 0.159999996f));
        let x_547 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_546.x, x_546.y, x_547.z, x_547.w);
        let x_549 : vec4<f32> = u_xlat6;
        u_xlat49 = (vec2<f32>(x_549.y, x_549.w) * vec2<f32>(0.159999996f, 0.159999996f));
        let x_553 : f32 = u_xlat8.x;
        u_xlat9.z = x_553;
        let x_556 : f32 = u_xlat49.x;
        u_xlat9.w = x_556;
        let x_559 : f32 = u_xlat10.x;
        u_xlat7.z = x_559;
        let x_562 : f32 = u_xlat6.x;
        u_xlat7.w = x_562;
        let x_565 : vec4<f32> = u_xlat7;
        let x_567 : vec4<f32> = u_xlat9;
        u_xlat11 = (vec4<f32>(x_565.z, x_565.w, x_565.x, x_565.z) + vec4<f32>(x_567.z, x_567.w, x_567.x, x_567.z));
        let x_571 : f32 = u_xlat9.y;
        u_xlat8.z = x_571;
        let x_574 : f32 = u_xlat49.y;
        u_xlat8.w = x_574;
        let x_577 : f32 = u_xlat7.y;
        u_xlat10.z = x_577;
        let x_580 : f32 = u_xlat6.z;
        u_xlat10.w = x_580;
        let x_582 : vec4<f32> = u_xlat8;
        let x_584 : vec4<f32> = u_xlat10;
        let x_586 : vec3<f32> = (vec3<f32>(x_582.z, x_582.y, x_582.w) + vec3<f32>(x_584.z, x_584.y, x_584.w));
        let x_587 : vec4<f32> = u_xlat6;
        u_xlat6 = vec4<f32>(x_586.x, x_586.y, x_586.z, x_587.w);
        let x_589 : vec4<f32> = u_xlat7;
        let x_591 : vec4<f32> = u_xlat11;
        let x_593 : vec3<f32> = (vec3<f32>(x_589.x, x_589.z, x_589.w) / vec3<f32>(x_591.z, x_591.w, x_591.y));
        let x_594 : vec4<f32> = u_xlat7;
        u_xlat7 = vec4<f32>(x_593.x, x_593.y, x_593.z, x_594.w);
        let x_596 : vec4<f32> = u_xlat7;
        let x_602 : vec3<f32> = (vec3<f32>(x_596.x, x_596.y, x_596.z) + vec3<f32>(-2.5f, -0.5f, 1.5f));
        let x_603 : vec4<f32> = u_xlat7;
        u_xlat7 = vec4<f32>(x_602.x, x_602.y, x_602.z, x_603.w);
        let x_605 : vec4<f32> = u_xlat10;
        let x_607 : vec4<f32> = u_xlat6;
        let x_609 : vec3<f32> = (vec3<f32>(x_605.z, x_605.y, x_605.w) / vec3<f32>(x_607.x, x_607.y, x_607.z));
        let x_610 : vec4<f32> = u_xlat8;
        u_xlat8 = vec4<f32>(x_609.x, x_609.y, x_609.z, x_610.w);
        let x_612 : vec4<f32> = u_xlat8;
        let x_614 : vec3<f32> = (vec3<f32>(x_612.x, x_612.y, x_612.z) + vec3<f32>(-2.5f, -0.5f, 1.5f));
        let x_615 : vec4<f32> = u_xlat8;
        u_xlat8 = vec4<f32>(x_614.x, x_614.y, x_614.z, x_615.w);
        let x_617 : vec4<f32> = u_xlat7;
        let x_620 : vec4<f32> = x_138.x_MainLightShadowmapSize;
        let x_622 : vec3<f32> = (vec3<f32>(x_617.y, x_617.x, x_617.z) * vec3<f32>(x_620.x, x_620.x, x_620.x));
        let x_623 : vec4<f32> = u_xlat7;
        u_xlat7 = vec4<f32>(x_622.x, x_622.y, x_622.z, x_623.w);
        let x_625 : vec4<f32> = u_xlat8;
        let x_628 : vec4<f32> = x_138.x_MainLightShadowmapSize;
        let x_630 : vec3<f32> = (vec3<f32>(x_625.x, x_625.y, x_625.z) * vec3<f32>(x_628.y, x_628.y, x_628.y));
        let x_631 : vec4<f32> = u_xlat8;
        u_xlat8 = vec4<f32>(x_630.x, x_630.y, x_630.z, x_631.w);
        let x_634 : f32 = u_xlat8.x;
        u_xlat7.w = x_634;
        let x_636 : vec4<f32> = u_xlat5;
        let x_639 : vec4<f32> = x_138.x_MainLightShadowmapSize;
        let x_642 : vec4<f32> = u_xlat7;
        u_xlat9 = ((vec4<f32>(x_636.x, x_636.y, x_636.x, x_636.y) * vec4<f32>(x_639.x, x_639.y, x_639.x, x_639.y)) + vec4<f32>(x_642.y, x_642.w, x_642.x, x_642.w));
        let x_645 : vec4<f32> = u_xlat5;
        let x_648 : vec4<f32> = x_138.x_MainLightShadowmapSize;
        let x_651 : vec4<f32> = u_xlat7;
        u_xlat49 = ((vec2<f32>(x_645.x, x_645.y) * vec2<f32>(x_648.x, x_648.y)) + vec2<f32>(x_651.z, x_651.w));
        let x_655 : f32 = u_xlat7.y;
        u_xlat8.w = x_655;
        let x_657 : vec4<f32> = u_xlat8;
        let x_658 : vec2<f32> = vec2<f32>(x_657.y, x_657.z);
        let x_659 : vec4<f32> = u_xlat7;
        u_xlat7 = vec4<f32>(x_659.x, x_658.x, x_659.z, x_658.y);
        let x_661 : vec4<f32> = u_xlat5;
        let x_664 : vec4<f32> = x_138.x_MainLightShadowmapSize;
        let x_667 : vec4<f32> = u_xlat7;
        u_xlat10 = ((vec4<f32>(x_661.x, x_661.y, x_661.x, x_661.y) * vec4<f32>(x_664.x, x_664.y, x_664.x, x_664.y)) + vec4<f32>(x_667.x, x_667.y, x_667.z, x_667.y));
        let x_670 : vec4<f32> = u_xlat5;
        let x_673 : vec4<f32> = x_138.x_MainLightShadowmapSize;
        let x_676 : vec4<f32> = u_xlat8;
        u_xlat8 = ((vec4<f32>(x_670.x, x_670.y, x_670.x, x_670.y) * vec4<f32>(x_673.x, x_673.y, x_673.x, x_673.y)) + vec4<f32>(x_676.w, x_676.y, x_676.w, x_676.z));
        let x_679 : vec4<f32> = u_xlat5;
        let x_682 : vec4<f32> = x_138.x_MainLightShadowmapSize;
        let x_685 : vec4<f32> = u_xlat7;
        u_xlat7 = ((vec4<f32>(x_679.x, x_679.y, x_679.x, x_679.y) * vec4<f32>(x_682.x, x_682.y, x_682.x, x_682.y)) + vec4<f32>(x_685.x, x_685.w, x_685.z, x_685.w));
        let x_689 : vec4<f32> = u_xlat6;
        let x_691 : vec4<f32> = u_xlat11;
        u_xlat12 = (vec4<f32>(x_689.x, x_689.x, x_689.x, x_689.y) * vec4<f32>(x_691.z, x_691.w, x_691.y, x_691.z));
        let x_695 : vec4<f32> = u_xlat6;
        let x_697 : vec4<f32> = u_xlat11;
        u_xlat13 = (vec4<f32>(x_695.y, x_695.y, x_695.z, x_695.z) * x_697);
        let x_701 : f32 = u_xlat6.z;
        let x_703 : f32 = u_xlat11.y;
        u_xlat70 = (x_701 * x_703);
        let x_706 : vec4<f32> = u_xlat9;
        let x_707 : vec2<f32> = vec2<f32>(x_706.x, x_706.y);
        let x_709 : f32 = u_xlat4.z;
        txVec4 = vec3<f32>(x_707.x, x_707.y, x_709);
        let x_716 : vec3<f32> = txVec4;
        let x_718 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_716.xy, x_716.z);
        u_xlat5.x = x_718;
        let x_721 : vec4<f32> = u_xlat9;
        let x_722 : vec2<f32> = vec2<f32>(x_721.z, x_721.w);
        let x_724 : f32 = u_xlat4.z;
        txVec5 = vec3<f32>(x_722.x, x_722.y, x_724);
        let x_732 : vec3<f32> = txVec5;
        let x_734 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_732.xy, x_732.z);
        u_xlat27.x = x_734;
        let x_737 : f32 = u_xlat27.x;
        let x_739 : f32 = u_xlat12.y;
        u_xlat27.x = (x_737 * x_739);
        let x_743 : f32 = u_xlat12.x;
        let x_745 : f32 = u_xlat5.x;
        let x_748 : f32 = u_xlat27.x;
        u_xlat5.x = ((x_743 * x_745) + x_748);
        let x_752 : vec2<f32> = u_xlat49;
        let x_754 : f32 = u_xlat4.z;
        txVec6 = vec3<f32>(x_752.x, x_752.y, x_754);
        let x_761 : vec3<f32> = txVec6;
        let x_763 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_761.xy, x_761.z);
        u_xlat27.x = x_763;
        let x_766 : f32 = u_xlat12.z;
        let x_768 : f32 = u_xlat27.x;
        let x_771 : f32 = u_xlat5.x;
        u_xlat5.x = ((x_766 * x_768) + x_771);
        let x_775 : vec4<f32> = u_xlat8;
        let x_776 : vec2<f32> = vec2<f32>(x_775.x, x_775.y);
        let x_778 : f32 = u_xlat4.z;
        txVec7 = vec3<f32>(x_776.x, x_776.y, x_778);
        let x_785 : vec3<f32> = txVec7;
        let x_787 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_785.xy, x_785.z);
        u_xlat27.x = x_787;
        let x_790 : f32 = u_xlat12.w;
        let x_792 : f32 = u_xlat27.x;
        let x_795 : f32 = u_xlat5.x;
        u_xlat5.x = ((x_790 * x_792) + x_795);
        let x_799 : vec4<f32> = u_xlat10;
        let x_800 : vec2<f32> = vec2<f32>(x_799.x, x_799.y);
        let x_802 : f32 = u_xlat4.z;
        txVec8 = vec3<f32>(x_800.x, x_800.y, x_802);
        let x_809 : vec3<f32> = txVec8;
        let x_811 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_809.xy, x_809.z);
        u_xlat27.x = x_811;
        let x_814 : f32 = u_xlat13.x;
        let x_816 : f32 = u_xlat27.x;
        let x_819 : f32 = u_xlat5.x;
        u_xlat5.x = ((x_814 * x_816) + x_819);
        let x_823 : vec4<f32> = u_xlat10;
        let x_824 : vec2<f32> = vec2<f32>(x_823.z, x_823.w);
        let x_826 : f32 = u_xlat4.z;
        txVec9 = vec3<f32>(x_824.x, x_824.y, x_826);
        let x_833 : vec3<f32> = txVec9;
        let x_835 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_833.xy, x_833.z);
        u_xlat27.x = x_835;
        let x_838 : f32 = u_xlat13.y;
        let x_840 : f32 = u_xlat27.x;
        let x_843 : f32 = u_xlat5.x;
        u_xlat5.x = ((x_838 * x_840) + x_843);
        let x_847 : vec4<f32> = u_xlat8;
        let x_848 : vec2<f32> = vec2<f32>(x_847.z, x_847.w);
        let x_850 : f32 = u_xlat4.z;
        txVec10 = vec3<f32>(x_848.x, x_848.y, x_850);
        let x_857 : vec3<f32> = txVec10;
        let x_859 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_857.xy, x_857.z);
        u_xlat27.x = x_859;
        let x_862 : f32 = u_xlat13.z;
        let x_864 : f32 = u_xlat27.x;
        let x_867 : f32 = u_xlat5.x;
        u_xlat5.x = ((x_862 * x_864) + x_867);
        let x_871 : vec4<f32> = u_xlat7;
        let x_872 : vec2<f32> = vec2<f32>(x_871.x, x_871.y);
        let x_874 : f32 = u_xlat4.z;
        txVec11 = vec3<f32>(x_872.x, x_872.y, x_874);
        let x_881 : vec3<f32> = txVec11;
        let x_883 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_881.xy, x_881.z);
        u_xlat27.x = x_883;
        let x_886 : f32 = u_xlat13.w;
        let x_888 : f32 = u_xlat27.x;
        let x_891 : f32 = u_xlat5.x;
        u_xlat5.x = ((x_886 * x_888) + x_891);
        let x_895 : vec4<f32> = u_xlat7;
        let x_896 : vec2<f32> = vec2<f32>(x_895.z, x_895.w);
        let x_898 : f32 = u_xlat4.z;
        txVec12 = vec3<f32>(x_896.x, x_896.y, x_898);
        let x_905 : vec3<f32> = txVec12;
        let x_907 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_905.xy, x_905.z);
        u_xlat27.x = x_907;
        let x_909 : f32 = u_xlat70;
        let x_911 : f32 = u_xlat27.x;
        let x_914 : f32 = u_xlat5.x;
        u_xlat68 = ((x_909 * x_911) + x_914);
      } else {
        let x_917 : vec4<f32> = u_xlat4;
        let x_920 : vec4<f32> = x_138.x_MainLightShadowmapSize;
        let x_923 : vec2<f32> = ((vec2<f32>(x_917.x, x_917.y) * vec2<f32>(x_920.z, x_920.w)) + vec2<f32>(0.5f, 0.5f));
        let x_924 : vec4<f32> = u_xlat5;
        u_xlat5 = vec4<f32>(x_923.x, x_923.y, x_924.z, x_924.w);
        let x_926 : vec4<f32> = u_xlat5;
        let x_928 : vec2<f32> = floor(vec2<f32>(x_926.x, x_926.y));
        let x_929 : vec4<f32> = u_xlat5;
        u_xlat5 = vec4<f32>(x_928.x, x_928.y, x_929.z, x_929.w);
        let x_931 : vec4<f32> = u_xlat4;
        let x_934 : vec4<f32> = x_138.x_MainLightShadowmapSize;
        let x_937 : vec4<f32> = u_xlat5;
        u_xlat49 = ((vec2<f32>(x_931.x, x_931.y) * vec2<f32>(x_934.z, x_934.w)) + -(vec2<f32>(x_937.x, x_937.y)));
        let x_941 : vec2<f32> = u_xlat49;
        u_xlat6 = (vec4<f32>(x_941.x, x_941.x, x_941.y, x_941.y) + vec4<f32>(0.5f, 1.0f, 0.5f, 1.0f));
        let x_944 : vec4<f32> = u_xlat6;
        let x_946 : vec4<f32> = u_xlat6;
        u_xlat7 = (vec4<f32>(x_944.x, x_944.x, x_944.z, x_944.z) * vec4<f32>(x_946.x, x_946.x, x_946.z, x_946.z));
        let x_949 : vec4<f32> = u_xlat7;
        let x_953 : vec2<f32> = (vec2<f32>(x_949.y, x_949.w) * vec2<f32>(0.040816002f, 0.040816002f));
        let x_954 : vec4<f32> = u_xlat8;
        u_xlat8 = vec4<f32>(x_954.x, x_953.x, x_954.z, x_953.y);
        let x_956 : vec4<f32> = u_xlat7;
        let x_959 : vec2<f32> = u_xlat49;
        let x_961 : vec2<f32> = ((vec2<f32>(x_956.x, x_956.z) * vec2<f32>(0.5f, 0.5f)) + -(x_959));
        let x_962 : vec4<f32> = u_xlat6;
        u_xlat6 = vec4<f32>(x_961.x, x_962.y, x_961.y, x_962.w);
        let x_964 : vec2<f32> = u_xlat49;
        let x_966 : vec2<f32> = (-(x_964) + vec2<f32>(1.0f, 1.0f));
        let x_967 : vec4<f32> = u_xlat7;
        u_xlat7 = vec4<f32>(x_966.x, x_966.y, x_967.z, x_967.w);
        let x_969 : vec2<f32> = u_xlat49;
        u_xlat51 = min(x_969, vec2<f32>(0.0f, 0.0f));
        let x_971 : vec2<f32> = u_xlat51;
        let x_973 : vec2<f32> = u_xlat51;
        let x_975 : vec4<f32> = u_xlat7;
        let x_977 : vec2<f32> = ((-(x_971) * x_973) + vec2<f32>(x_975.x, x_975.y));
        let x_978 : vec4<f32> = u_xlat7;
        u_xlat7 = vec4<f32>(x_977.x, x_977.y, x_978.z, x_978.w);
        let x_980 : vec2<f32> = u_xlat49;
        u_xlat51 = max(x_980, vec2<f32>(0.0f, 0.0f));
        let x_983 : vec2<f32> = u_xlat51;
        let x_985 : vec2<f32> = u_xlat51;
        let x_987 : vec4<f32> = u_xlat6;
        let x_989 : vec2<f32> = ((-(x_983) * x_985) + vec2<f32>(x_987.y, x_987.w));
        let x_990 : vec3<f32> = u_xlat28;
        u_xlat28 = vec3<f32>(x_989.x, x_990.y, x_989.y);
        let x_992 : vec4<f32> = u_xlat7;
        let x_995 : vec2<f32> = (vec2<f32>(x_992.x, x_992.y) + vec2<f32>(2.0f, 2.0f));
        let x_996 : vec4<f32> = u_xlat7;
        u_xlat7 = vec4<f32>(x_995.x, x_995.y, x_996.z, x_996.w);
        let x_998 : vec3<f32> = u_xlat28;
        let x_1000 : vec2<f32> = (vec2<f32>(x_998.x, x_998.z) + vec2<f32>(2.0f, 2.0f));
        let x_1001 : vec4<f32> = u_xlat6;
        u_xlat6 = vec4<f32>(x_1001.x, x_1000.x, x_1001.z, x_1000.y);
        let x_1004 : f32 = u_xlat6.y;
        u_xlat9.z = (x_1004 * 0.081632003f);
        let x_1008 : vec4<f32> = u_xlat6;
        let x_1011 : vec3<f32> = (vec3<f32>(x_1008.z, x_1008.x, x_1008.w) * vec3<f32>(0.081632003f, 0.081632003f, 0.081632003f));
        let x_1012 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_1011.x, x_1011.y, x_1011.z, x_1012.w);
        let x_1014 : vec4<f32> = u_xlat7;
        let x_1017 : vec2<f32> = (vec2<f32>(x_1014.x, x_1014.y) * vec2<f32>(0.081632003f, 0.081632003f));
        let x_1018 : vec4<f32> = u_xlat6;
        u_xlat6 = vec4<f32>(x_1017.x, x_1017.y, x_1018.z, x_1018.w);
        let x_1021 : f32 = u_xlat10.y;
        u_xlat9.x = x_1021;
        let x_1023 : vec2<f32> = u_xlat49;
        let x_1030 : vec2<f32> = ((vec2<f32>(x_1023.x, x_1023.x) * vec2<f32>(-0.081632003f, 0.081632003f)) + vec2<f32>(0.163264006f, 0.081632003f));
        let x_1031 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_1031.x, x_1030.x, x_1031.z, x_1030.y);
        let x_1033 : vec2<f32> = u_xlat49;
        let x_1037 : vec2<f32> = ((vec2<f32>(x_1033.x, x_1033.x) * vec2<f32>(-0.081632003f, 0.081632003f)) + vec2<f32>(0.081632003f, 0.163264006f));
        let x_1038 : vec4<f32> = u_xlat7;
        u_xlat7 = vec4<f32>(x_1037.x, x_1038.y, x_1037.y, x_1038.w);
        let x_1041 : f32 = u_xlat6.x;
        u_xlat7.y = x_1041;
        let x_1044 : f32 = u_xlat8.y;
        u_xlat7.w = x_1044;
        let x_1046 : vec4<f32> = u_xlat7;
        let x_1047 : vec4<f32> = u_xlat9;
        u_xlat9 = (x_1046 + x_1047);
        let x_1049 : vec2<f32> = u_xlat49;
        let x_1052 : vec2<f32> = ((vec2<f32>(x_1049.y, x_1049.y) * vec2<f32>(-0.081632003f, 0.081632003f)) + vec2<f32>(0.163264006f, 0.081632003f));
        let x_1053 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_1053.x, x_1052.x, x_1053.z, x_1052.y);
        let x_1055 : vec2<f32> = u_xlat49;
        let x_1058 : vec2<f32> = ((vec2<f32>(x_1055.y, x_1055.y) * vec2<f32>(-0.081632003f, 0.081632003f)) + vec2<f32>(0.081632003f, 0.163264006f));
        let x_1059 : vec4<f32> = u_xlat8;
        u_xlat8 = vec4<f32>(x_1058.x, x_1059.y, x_1058.y, x_1059.w);
        let x_1062 : f32 = u_xlat6.y;
        u_xlat8.y = x_1062;
        let x_1064 : vec4<f32> = u_xlat8;
        let x_1065 : vec4<f32> = u_xlat10;
        u_xlat6 = (x_1064 + x_1065);
        let x_1067 : vec4<f32> = u_xlat7;
        let x_1068 : vec4<f32> = u_xlat9;
        u_xlat7 = (x_1067 / x_1068);
        let x_1070 : vec4<f32> = u_xlat7;
        u_xlat7 = (x_1070 + vec4<f32>(-3.5f, -1.5f, 0.5f, 2.5f));
        let x_1076 : vec4<f32> = u_xlat8;
        let x_1077 : vec4<f32> = u_xlat6;
        u_xlat8 = (x_1076 / x_1077);
        let x_1079 : vec4<f32> = u_xlat8;
        u_xlat8 = (x_1079 + vec4<f32>(-3.5f, -1.5f, 0.5f, 2.5f));
        let x_1081 : vec4<f32> = u_xlat7;
        let x_1084 : vec4<f32> = x_138.x_MainLightShadowmapSize;
        u_xlat7 = (vec4<f32>(x_1081.w, x_1081.x, x_1081.y, x_1081.z) * vec4<f32>(x_1084.x, x_1084.x, x_1084.x, x_1084.x));
        let x_1087 : vec4<f32> = u_xlat8;
        let x_1090 : vec4<f32> = x_138.x_MainLightShadowmapSize;
        u_xlat8 = (vec4<f32>(x_1087.x, x_1087.w, x_1087.y, x_1087.z) * vec4<f32>(x_1090.y, x_1090.y, x_1090.y, x_1090.y));
        let x_1093 : vec4<f32> = u_xlat7;
        let x_1094 : vec3<f32> = vec3<f32>(x_1093.y, x_1093.z, x_1093.w);
        let x_1095 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_1094.x, x_1095.y, x_1094.y, x_1094.z);
        let x_1098 : f32 = u_xlat8.x;
        u_xlat10.y = x_1098;
        let x_1100 : vec4<f32> = u_xlat5;
        let x_1103 : vec4<f32> = x_138.x_MainLightShadowmapSize;
        let x_1106 : vec4<f32> = u_xlat10;
        u_xlat11 = ((vec4<f32>(x_1100.x, x_1100.y, x_1100.x, x_1100.y) * vec4<f32>(x_1103.x, x_1103.y, x_1103.x, x_1103.y)) + vec4<f32>(x_1106.x, x_1106.y, x_1106.z, x_1106.y));
        let x_1109 : vec4<f32> = u_xlat5;
        let x_1112 : vec4<f32> = x_138.x_MainLightShadowmapSize;
        let x_1115 : vec4<f32> = u_xlat10;
        u_xlat49 = ((vec2<f32>(x_1109.x, x_1109.y) * vec2<f32>(x_1112.x, x_1112.y)) + vec2<f32>(x_1115.w, x_1115.y));
        let x_1119 : f32 = u_xlat10.y;
        u_xlat7.y = x_1119;
        let x_1122 : f32 = u_xlat8.z;
        u_xlat10.y = x_1122;
        let x_1124 : vec4<f32> = u_xlat5;
        let x_1127 : vec4<f32> = x_138.x_MainLightShadowmapSize;
        let x_1130 : vec4<f32> = u_xlat10;
        u_xlat12 = ((vec4<f32>(x_1124.x, x_1124.y, x_1124.x, x_1124.y) * vec4<f32>(x_1127.x, x_1127.y, x_1127.x, x_1127.y)) + vec4<f32>(x_1130.x, x_1130.y, x_1130.z, x_1130.y));
        let x_1133 : vec4<f32> = u_xlat5;
        let x_1136 : vec4<f32> = x_138.x_MainLightShadowmapSize;
        let x_1139 : vec4<f32> = u_xlat10;
        let x_1141 : vec2<f32> = ((vec2<f32>(x_1133.x, x_1133.y) * vec2<f32>(x_1136.x, x_1136.y)) + vec2<f32>(x_1139.w, x_1139.y));
        let x_1142 : vec4<f32> = u_xlat13;
        u_xlat13 = vec4<f32>(x_1141.x, x_1141.y, x_1142.z, x_1142.w);
        let x_1145 : f32 = u_xlat10.y;
        u_xlat7.z = x_1145;
        let x_1148 : vec4<f32> = u_xlat5;
        let x_1151 : vec4<f32> = x_138.x_MainLightShadowmapSize;
        let x_1154 : vec4<f32> = u_xlat7;
        u_xlat14 = ((vec4<f32>(x_1148.x, x_1148.y, x_1148.x, x_1148.y) * vec4<f32>(x_1151.x, x_1151.y, x_1151.x, x_1151.y)) + vec4<f32>(x_1154.x, x_1154.y, x_1154.x, x_1154.z));
        let x_1158 : f32 = u_xlat8.w;
        u_xlat10.y = x_1158;
        let x_1161 : vec4<f32> = u_xlat5;
        let x_1164 : vec4<f32> = x_138.x_MainLightShadowmapSize;
        let x_1167 : vec4<f32> = u_xlat10;
        u_xlat15 = ((vec4<f32>(x_1161.x, x_1161.y, x_1161.x, x_1161.y) * vec4<f32>(x_1164.x, x_1164.y, x_1164.x, x_1164.y)) + vec4<f32>(x_1167.x, x_1167.y, x_1167.z, x_1167.y));
        let x_1171 : vec4<f32> = u_xlat5;
        let x_1174 : vec4<f32> = x_138.x_MainLightShadowmapSize;
        let x_1177 : vec4<f32> = u_xlat10;
        u_xlat29 = ((vec2<f32>(x_1171.x, x_1171.y) * vec2<f32>(x_1174.x, x_1174.y)) + vec2<f32>(x_1177.w, x_1177.y));
        let x_1181 : f32 = u_xlat10.y;
        u_xlat7.w = x_1181;
        let x_1184 : vec4<f32> = u_xlat5;
        let x_1187 : vec4<f32> = x_138.x_MainLightShadowmapSize;
        let x_1190 : vec4<f32> = u_xlat7;
        u_xlat57 = ((vec2<f32>(x_1184.x, x_1184.y) * vec2<f32>(x_1187.x, x_1187.y)) + vec2<f32>(x_1190.x, x_1190.w));
        let x_1193 : vec4<f32> = u_xlat10;
        let x_1194 : vec3<f32> = vec3<f32>(x_1193.x, x_1193.z, x_1193.w);
        let x_1195 : vec4<f32> = u_xlat8;
        u_xlat8 = vec4<f32>(x_1194.x, x_1195.y, x_1194.y, x_1194.z);
        let x_1197 : vec4<f32> = u_xlat5;
        let x_1200 : vec4<f32> = x_138.x_MainLightShadowmapSize;
        let x_1203 : vec4<f32> = u_xlat8;
        u_xlat10 = ((vec4<f32>(x_1197.x, x_1197.y, x_1197.x, x_1197.y) * vec4<f32>(x_1200.x, x_1200.y, x_1200.x, x_1200.y)) + vec4<f32>(x_1203.x, x_1203.y, x_1203.z, x_1203.y));
        let x_1207 : vec4<f32> = u_xlat5;
        let x_1210 : vec4<f32> = x_138.x_MainLightShadowmapSize;
        let x_1213 : vec4<f32> = u_xlat8;
        u_xlat52 = ((vec2<f32>(x_1207.x, x_1207.y) * vec2<f32>(x_1210.x, x_1210.y)) + vec2<f32>(x_1213.w, x_1213.y));
        let x_1217 : f32 = u_xlat7.x;
        u_xlat8.x = x_1217;
        let x_1219 : vec4<f32> = u_xlat5;
        let x_1222 : vec4<f32> = x_138.x_MainLightShadowmapSize;
        let x_1225 : vec4<f32> = u_xlat8;
        let x_1227 : vec2<f32> = ((vec2<f32>(x_1219.x, x_1219.y) * vec2<f32>(x_1222.x, x_1222.y)) + vec2<f32>(x_1225.x, x_1225.y));
        let x_1228 : vec4<f32> = u_xlat5;
        u_xlat5 = vec4<f32>(x_1227.x, x_1227.y, x_1228.z, x_1228.w);
        let x_1231 : vec4<f32> = u_xlat6;
        let x_1233 : vec4<f32> = u_xlat9;
        u_xlat16 = (vec4<f32>(x_1231.x, x_1231.x, x_1231.x, x_1231.x) * x_1233);
        let x_1236 : vec4<f32> = u_xlat6;
        let x_1238 : vec4<f32> = u_xlat9;
        u_xlat17 = (vec4<f32>(x_1236.y, x_1236.y, x_1236.y, x_1236.y) * x_1238);
        let x_1241 : vec4<f32> = u_xlat6;
        let x_1243 : vec4<f32> = u_xlat9;
        u_xlat18 = (vec4<f32>(x_1241.z, x_1241.z, x_1241.z, x_1241.z) * x_1243);
        let x_1245 : vec4<f32> = u_xlat6;
        let x_1247 : vec4<f32> = u_xlat9;
        u_xlat6 = (vec4<f32>(x_1245.w, x_1245.w, x_1245.w, x_1245.w) * x_1247);
        let x_1250 : vec4<f32> = u_xlat11;
        let x_1251 : vec2<f32> = vec2<f32>(x_1250.x, x_1250.y);
        let x_1253 : f32 = u_xlat4.z;
        txVec13 = vec3<f32>(x_1251.x, x_1251.y, x_1253);
        let x_1260 : vec3<f32> = txVec13;
        let x_1262 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1260.xy, x_1260.z);
        u_xlat70 = x_1262;
        let x_1264 : vec4<f32> = u_xlat11;
        let x_1265 : vec2<f32> = vec2<f32>(x_1264.z, x_1264.w);
        let x_1267 : f32 = u_xlat4.z;
        txVec14 = vec3<f32>(x_1265.x, x_1265.y, x_1267);
        let x_1274 : vec3<f32> = txVec14;
        let x_1276 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1274.xy, x_1274.z);
        u_xlat7.x = x_1276;
        let x_1279 : f32 = u_xlat7.x;
        let x_1281 : f32 = u_xlat16.y;
        u_xlat7.x = (x_1279 * x_1281);
        let x_1285 : f32 = u_xlat16.x;
        let x_1286 : f32 = u_xlat70;
        let x_1289 : f32 = u_xlat7.x;
        u_xlat70 = ((x_1285 * x_1286) + x_1289);
        let x_1292 : vec2<f32> = u_xlat49;
        let x_1294 : f32 = u_xlat4.z;
        txVec15 = vec3<f32>(x_1292.x, x_1292.y, x_1294);
        let x_1301 : vec3<f32> = txVec15;
        let x_1303 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1301.xy, x_1301.z);
        u_xlat49.x = x_1303;
        let x_1306 : f32 = u_xlat16.z;
        let x_1308 : f32 = u_xlat49.x;
        let x_1310 : f32 = u_xlat70;
        u_xlat70 = ((x_1306 * x_1308) + x_1310);
        let x_1313 : vec4<f32> = u_xlat14;
        let x_1314 : vec2<f32> = vec2<f32>(x_1313.x, x_1313.y);
        let x_1316 : f32 = u_xlat4.z;
        txVec16 = vec3<f32>(x_1314.x, x_1314.y, x_1316);
        let x_1323 : vec3<f32> = txVec16;
        let x_1325 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1323.xy, x_1323.z);
        u_xlat49.x = x_1325;
        let x_1328 : f32 = u_xlat16.w;
        let x_1330 : f32 = u_xlat49.x;
        let x_1332 : f32 = u_xlat70;
        u_xlat70 = ((x_1328 * x_1330) + x_1332);
        let x_1335 : vec4<f32> = u_xlat12;
        let x_1336 : vec2<f32> = vec2<f32>(x_1335.x, x_1335.y);
        let x_1338 : f32 = u_xlat4.z;
        txVec17 = vec3<f32>(x_1336.x, x_1336.y, x_1338);
        let x_1345 : vec3<f32> = txVec17;
        let x_1347 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1345.xy, x_1345.z);
        u_xlat49.x = x_1347;
        let x_1350 : f32 = u_xlat17.x;
        let x_1352 : f32 = u_xlat49.x;
        let x_1354 : f32 = u_xlat70;
        u_xlat70 = ((x_1350 * x_1352) + x_1354);
        let x_1357 : vec4<f32> = u_xlat12;
        let x_1358 : vec2<f32> = vec2<f32>(x_1357.z, x_1357.w);
        let x_1360 : f32 = u_xlat4.z;
        txVec18 = vec3<f32>(x_1358.x, x_1358.y, x_1360);
        let x_1367 : vec3<f32> = txVec18;
        let x_1369 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1367.xy, x_1367.z);
        u_xlat49.x = x_1369;
        let x_1372 : f32 = u_xlat17.y;
        let x_1374 : f32 = u_xlat49.x;
        let x_1376 : f32 = u_xlat70;
        u_xlat70 = ((x_1372 * x_1374) + x_1376);
        let x_1379 : vec4<f32> = u_xlat13;
        let x_1380 : vec2<f32> = vec2<f32>(x_1379.x, x_1379.y);
        let x_1382 : f32 = u_xlat4.z;
        txVec19 = vec3<f32>(x_1380.x, x_1380.y, x_1382);
        let x_1389 : vec3<f32> = txVec19;
        let x_1391 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1389.xy, x_1389.z);
        u_xlat49.x = x_1391;
        let x_1394 : f32 = u_xlat17.z;
        let x_1396 : f32 = u_xlat49.x;
        let x_1398 : f32 = u_xlat70;
        u_xlat70 = ((x_1394 * x_1396) + x_1398);
        let x_1401 : vec4<f32> = u_xlat14;
        let x_1402 : vec2<f32> = vec2<f32>(x_1401.z, x_1401.w);
        let x_1404 : f32 = u_xlat4.z;
        txVec20 = vec3<f32>(x_1402.x, x_1402.y, x_1404);
        let x_1411 : vec3<f32> = txVec20;
        let x_1413 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1411.xy, x_1411.z);
        u_xlat49.x = x_1413;
        let x_1416 : f32 = u_xlat17.w;
        let x_1418 : f32 = u_xlat49.x;
        let x_1420 : f32 = u_xlat70;
        u_xlat70 = ((x_1416 * x_1418) + x_1420);
        let x_1423 : vec4<f32> = u_xlat15;
        let x_1424 : vec2<f32> = vec2<f32>(x_1423.x, x_1423.y);
        let x_1426 : f32 = u_xlat4.z;
        txVec21 = vec3<f32>(x_1424.x, x_1424.y, x_1426);
        let x_1433 : vec3<f32> = txVec21;
        let x_1435 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1433.xy, x_1433.z);
        u_xlat49.x = x_1435;
        let x_1438 : f32 = u_xlat18.x;
        let x_1440 : f32 = u_xlat49.x;
        let x_1442 : f32 = u_xlat70;
        u_xlat70 = ((x_1438 * x_1440) + x_1442);
        let x_1445 : vec4<f32> = u_xlat15;
        let x_1446 : vec2<f32> = vec2<f32>(x_1445.z, x_1445.w);
        let x_1448 : f32 = u_xlat4.z;
        txVec22 = vec3<f32>(x_1446.x, x_1446.y, x_1448);
        let x_1455 : vec3<f32> = txVec22;
        let x_1457 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1455.xy, x_1455.z);
        u_xlat49.x = x_1457;
        let x_1460 : f32 = u_xlat18.y;
        let x_1462 : f32 = u_xlat49.x;
        let x_1464 : f32 = u_xlat70;
        u_xlat70 = ((x_1460 * x_1462) + x_1464);
        let x_1467 : vec2<f32> = u_xlat29;
        let x_1469 : f32 = u_xlat4.z;
        txVec23 = vec3<f32>(x_1467.x, x_1467.y, x_1469);
        let x_1476 : vec3<f32> = txVec23;
        let x_1478 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1476.xy, x_1476.z);
        u_xlat49.x = x_1478;
        let x_1481 : f32 = u_xlat18.z;
        let x_1483 : f32 = u_xlat49.x;
        let x_1485 : f32 = u_xlat70;
        u_xlat70 = ((x_1481 * x_1483) + x_1485);
        let x_1488 : vec2<f32> = u_xlat57;
        let x_1490 : f32 = u_xlat4.z;
        txVec24 = vec3<f32>(x_1488.x, x_1488.y, x_1490);
        let x_1497 : vec3<f32> = txVec24;
        let x_1499 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1497.xy, x_1497.z);
        u_xlat49.x = x_1499;
        let x_1502 : f32 = u_xlat18.w;
        let x_1504 : f32 = u_xlat49.x;
        let x_1506 : f32 = u_xlat70;
        u_xlat70 = ((x_1502 * x_1504) + x_1506);
        let x_1509 : vec4<f32> = u_xlat10;
        let x_1510 : vec2<f32> = vec2<f32>(x_1509.x, x_1509.y);
        let x_1512 : f32 = u_xlat4.z;
        txVec25 = vec3<f32>(x_1510.x, x_1510.y, x_1512);
        let x_1519 : vec3<f32> = txVec25;
        let x_1521 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1519.xy, x_1519.z);
        u_xlat49.x = x_1521;
        let x_1524 : f32 = u_xlat6.x;
        let x_1526 : f32 = u_xlat49.x;
        let x_1528 : f32 = u_xlat70;
        u_xlat70 = ((x_1524 * x_1526) + x_1528);
        let x_1531 : vec4<f32> = u_xlat10;
        let x_1532 : vec2<f32> = vec2<f32>(x_1531.z, x_1531.w);
        let x_1534 : f32 = u_xlat4.z;
        txVec26 = vec3<f32>(x_1532.x, x_1532.y, x_1534);
        let x_1541 : vec3<f32> = txVec26;
        let x_1543 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1541.xy, x_1541.z);
        u_xlat49.x = x_1543;
        let x_1546 : f32 = u_xlat6.y;
        let x_1548 : f32 = u_xlat49.x;
        let x_1550 : f32 = u_xlat70;
        u_xlat70 = ((x_1546 * x_1548) + x_1550);
        let x_1553 : vec2<f32> = u_xlat52;
        let x_1555 : f32 = u_xlat4.z;
        txVec27 = vec3<f32>(x_1553.x, x_1553.y, x_1555);
        let x_1562 : vec3<f32> = txVec27;
        let x_1564 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1562.xy, x_1562.z);
        u_xlat49.x = x_1564;
        let x_1567 : f32 = u_xlat6.z;
        let x_1569 : f32 = u_xlat49.x;
        let x_1571 : f32 = u_xlat70;
        u_xlat70 = ((x_1567 * x_1569) + x_1571);
        let x_1574 : vec4<f32> = u_xlat5;
        let x_1575 : vec2<f32> = vec2<f32>(x_1574.x, x_1574.y);
        let x_1577 : f32 = u_xlat4.z;
        txVec28 = vec3<f32>(x_1575.x, x_1575.y, x_1577);
        let x_1584 : vec3<f32> = txVec28;
        let x_1586 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1584.xy, x_1584.z);
        u_xlat5.x = x_1586;
        let x_1589 : f32 = u_xlat6.w;
        let x_1591 : f32 = u_xlat5.x;
        let x_1593 : f32 = u_xlat70;
        u_xlat68 = ((x_1589 * x_1591) + x_1593);
      }
    }
  } else {
    let x_1597 : vec4<f32> = u_xlat4;
    let x_1598 : vec2<f32> = vec2<f32>(x_1597.x, x_1597.y);
    let x_1600 : f32 = u_xlat4.z;
    txVec29 = vec3<f32>(x_1598.x, x_1598.y, x_1600);
    let x_1607 : vec3<f32> = txVec29;
    let x_1609 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1607.xy, x_1607.z);
    u_xlat68 = x_1609;
  }
  let x_1611 : f32 = x_138.x_MainLightShadowParams.x;
  u_xlat70 = (-(x_1611) + 1.0f);
  let x_1614 : f32 = u_xlat68;
  let x_1616 : f32 = x_138.x_MainLightShadowParams.x;
  let x_1618 : f32 = u_xlat70;
  u_xlat68 = ((x_1614 * x_1616) + x_1618);
  let x_1622 : f32 = u_xlat4.z;
  u_xlatb5 = (0.0f >= x_1622);
  let x_1626 : f32 = u_xlat4.z;
  u_xlatb27 = (x_1626 >= 1.0f);
  let x_1628 : bool = u_xlatb27;
  let x_1629 : bool = u_xlatb5;
  u_xlatb5 = (x_1628 | x_1629);
  let x_1631 : bool = u_xlatb5;
  let x_1632 : f32 = u_xlat68;
  u_xlat68 = select(x_1632, 1.0f, x_1631);
  let x_1634 : vec3<f32> = u_xlat0;
  let x_1636 : vec4<f32> = x_66.x_MainLightPosition;
  u_xlat0.x = dot(x_1634, -(vec3<f32>(x_1636.x, x_1636.y, x_1636.z)));
  let x_1642 : f32 = u_xlat0.x;
  u_xlat0.x = clamp(x_1642, 0.0f, 1.0f);
  let x_1645 : f32 = u_xlat68;
  let x_1648 : vec4<f32> = x_66.x_MainLightColor;
  u_xlat27 = (vec3<f32>(x_1645, x_1645, x_1645) * vec3<f32>(x_1648.x, x_1648.y, x_1648.z));
  let x_1651 : vec3<f32> = u_xlat0;
  let x_1653 : vec3<f32> = u_xlat27;
  u_xlat0 = (vec3<f32>(x_1651.x, x_1651.x, x_1651.x) * x_1653);
  let x_1655 : vec3<f32> = u_xlat0;
  let x_1656 : vec4<f32> = u_xlat1;
  u_xlat0 = (x_1655 * vec3<f32>(x_1656.x, x_1656.y, x_1656.z));
  let x_1661 : f32 = u_xlat1.w;
  u_xlatb1 = (x_1661 >= 0.400000006f);
  let x_1664 : bool = u_xlatb1;
  if (x_1664) {
    let x_1669 : f32 = u_xlat1.w;
    x_1665 = x_1669;
  } else {
    x_1665 = 0.0f;
  }
  let x_1671 : f32 = x_1665;
  u_xlat1.x = x_1671;
  let x_1675 : f32 = u_xlat1.w;
  u_xlat23.x = (x_1675 + -0.400000006f);
  let x_1681 : f32 = u_xlat1.w;
  u_xlat45 = dpdxCoarse(x_1681);
  let x_1685 : f32 = u_xlat1.w;
  u_xlat67 = dpdyCoarse(x_1685);
  let x_1687 : f32 = u_xlat67;
  let x_1689 : f32 = u_xlat45;
  u_xlat45 = (abs(x_1687) + abs(x_1689));
  let x_1692 : f32 = u_xlat45;
  u_xlat45 = max(x_1692, 0.0001f);
  let x_1696 : f32 = u_xlat23.x;
  let x_1697 : f32 = u_xlat45;
  u_xlat23.x = (x_1696 / x_1697);
  let x_1701 : f32 = u_xlat23.x;
  u_xlat23.x = (x_1701 + 0.5f);
  let x_1705 : f32 = u_xlat23.x;
  u_xlat23.x = clamp(x_1705, 0.0f, 1.0f);
  let x_1710 : f32 = x_66.x_AlphaToMaskAvailable;
  u_xlatb45 = !((x_1710 == 0.0f));
  let x_1712 : bool = u_xlatb45;
  if (x_1712) {
    let x_1717 : f32 = u_xlat23.x;
    x_1713 = x_1717;
  } else {
    let x_1720 : f32 = u_xlat1.x;
    x_1713 = x_1720;
  }
  let x_1721 : f32 = x_1713;
  u_xlat1.x = x_1721;
  let x_1724 : f32 = u_xlat1.x;
  u_xlat23.x = (x_1724 + -0.0001f);
  let x_1732 : f32 = u_xlat23.x;
  u_xlatb23.x = (x_1732 < 0.0f);
  let x_1736 : bool = u_xlatb23.x;
  if (((select(0i, 1i, x_1736) * -1i) != 0i)) {
    discard;
  }
  let x_1746 : f32 = vs_INTERP2.w;
  u_xlatb23.x = (0.0f < x_1746);
  let x_1754 : f32 = x_1752.unity_WorldTransformParams.w;
  u_xlatb23.z = (x_1754 >= 0.0f);
  let x_1758 : bool = u_xlatb23.x;
  u_xlat23.x = select(-1.0f, 1.0f, x_1758);
  let x_1762 : bool = u_xlatb23.z;
  u_xlat23.z = select(-1.0f, 1.0f, x_1762);
  let x_1766 : f32 = u_xlat23.z;
  let x_1768 : f32 = u_xlat23.x;
  u_xlat23.x = (x_1766 * x_1768);
  let x_1771 : vec3<f32> = vs_INTERP1;
  let x_1773 : vec4<f32> = vs_INTERP2;
  u_xlat27 = (vec3<f32>(x_1771.z, x_1771.x, x_1771.y) * vec3<f32>(x_1773.y, x_1773.z, x_1773.x));
  let x_1776 : vec3<f32> = vs_INTERP1;
  let x_1778 : vec4<f32> = vs_INTERP2;
  let x_1781 : vec3<f32> = u_xlat27;
  u_xlat27 = ((vec3<f32>(x_1776.y, x_1776.z, x_1776.x) * vec3<f32>(x_1778.z, x_1778.x, x_1778.y)) + -(x_1781));
  let x_1784 : vec3<f32> = u_xlat23;
  let x_1786 : vec3<f32> = u_xlat27;
  u_xlat27 = (vec3<f32>(x_1784.x, x_1784.x, x_1784.x) * x_1786);
  let x_1788 : vec3<f32> = u_xlat25;
  let x_1790 : vec3<f32> = u_xlat27;
  u_xlat27 = (vec3<f32>(x_1788.y, x_1788.y, x_1788.y) * x_1790);
  let x_1792 : vec3<f32> = u_xlat25;
  let x_1794 : vec4<f32> = vs_INTERP2;
  let x_1797 : vec3<f32> = u_xlat27;
  u_xlat27 = ((vec3<f32>(x_1792.x, x_1792.x, x_1792.x) * vec3<f32>(x_1794.x, x_1794.y, x_1794.z)) + x_1797);
  let x_1799 : vec3<f32> = u_xlat25;
  let x_1801 : vec3<f32> = vs_INTERP1;
  let x_1803 : vec3<f32> = u_xlat27;
  u_xlat25 = ((vec3<f32>(x_1799.z, x_1799.z, x_1799.z) * x_1801) + x_1803);
  let x_1805 : vec3<f32> = u_xlat25;
  let x_1806 : vec3<f32> = u_xlat25;
  u_xlat23.x = dot(x_1805, x_1806);
  let x_1810 : f32 = u_xlat23.x;
  u_xlat23.x = inverseSqrt(x_1810);
  let x_1813 : vec3<f32> = u_xlat23;
  let x_1815 : vec3<f32> = u_xlat25;
  u_xlat25 = (vec3<f32>(x_1813.x, x_1813.x, x_1813.x) * x_1815);
  let x_1818 : f32 = x_66.unity_OrthoParams.w;
  u_xlatb23.x = (x_1818 == 0.0f);
  let x_1821 : vec3<f32> = vs_INTERP0;
  let x_1825 : vec3<f32> = x_66.x_WorldSpaceCameraPos;
  u_xlat27 = (-(x_1821) + x_1825);
  let x_1827 : vec3<f32> = u_xlat27;
  let x_1828 : vec3<f32> = u_xlat27;
  u_xlat67 = dot(x_1827, x_1828);
  let x_1830 : f32 = u_xlat67;
  u_xlat67 = inverseSqrt(x_1830);
  let x_1832 : f32 = u_xlat67;
  let x_1834 : vec3<f32> = u_xlat27;
  u_xlat27 = (vec3<f32>(x_1832, x_1832, x_1832) * x_1834);
  let x_1837 : bool = u_xlatb23.x;
  if (x_1837) {
    let x_1842 : f32 = u_xlat27.x;
    x_1838 = x_1842;
  } else {
    let x_1846 : f32 = x_66.unity_MatrixV[0i].z;
    x_1838 = x_1846;
  }
  let x_1847 : f32 = x_1838;
  u_xlat6.x = x_1847;
  let x_1850 : bool = u_xlatb23.x;
  if (x_1850) {
    let x_1855 : f32 = u_xlat27.y;
    x_1851 = x_1855;
  } else {
    let x_1858 : f32 = x_66.unity_MatrixV[1i].z;
    x_1851 = x_1858;
  }
  let x_1859 : f32 = x_1851;
  u_xlat6.y = x_1859;
  let x_1862 : bool = u_xlatb23.x;
  if (x_1862) {
    let x_1867 : f32 = u_xlat27.z;
    x_1863 = x_1867;
  } else {
    let x_1870 : f32 = x_66.unity_MatrixV[2i].z;
    x_1863 = x_1870;
  }
  let x_1871 : f32 = x_1863;
  u_xlat6.z = x_1871;
  let x_1880 : vec2<f32> = vs_INTERP5;
  let x_1882 : f32 = x_66.x_GlobalMipBias.x;
  let x_1883 : vec4<f32> = textureSampleBias(unity_LightmapInd, samplerunity_Lightmap, x_1880, x_1882);
  u_xlat7 = x_1883;
  let x_1888 : vec2<f32> = vs_INTERP5;
  let x_1890 : f32 = x_66.x_GlobalMipBias.x;
  let x_1891 : vec4<f32> = textureSampleBias(unity_Lightmap, samplerunity_Lightmap, x_1888, x_1890);
  u_xlat27 = vec3<f32>(x_1891.x, x_1891.y, x_1891.z);
  let x_1893 : vec4<f32> = u_xlat7;
  let x_1896 : vec3<f32> = (vec3<f32>(x_1893.x, x_1893.y, x_1893.z) + vec3<f32>(-0.5f, -0.5f, -0.5f));
  let x_1897 : vec4<f32> = u_xlat7;
  u_xlat7 = vec4<f32>(x_1896.x, x_1896.y, x_1896.z, x_1897.w);
  let x_1899 : vec3<f32> = u_xlat25;
  let x_1900 : vec4<f32> = u_xlat7;
  u_xlat23.x = dot(x_1899, vec3<f32>(x_1900.x, x_1900.y, x_1900.z));
  let x_1905 : f32 = u_xlat23.x;
  u_xlat23.x = (x_1905 + 0.5f);
  let x_1908 : vec3<f32> = u_xlat23;
  let x_1910 : vec3<f32> = u_xlat27;
  u_xlat27 = (vec3<f32>(x_1908.x, x_1908.x, x_1908.x) * x_1910);
  let x_1913 : f32 = u_xlat7.w;
  u_xlat23.x = max(x_1913, 0.0001f);
  let x_1916 : vec3<f32> = u_xlat27;
  let x_1917 : vec3<f32> = u_xlat23;
  u_xlat27 = (x_1916 / vec3<f32>(x_1917.x, x_1917.x, x_1917.x));
  let x_1921 : vec4<f32> = x_66.x_ScaledScreenParams;
  let x_1922 : vec2<f32> = vec2<f32>(x_1921.x, x_1921.y);
  let x_1926 : vec2<f32> = (vec2<f32>(1.0f, 1.0f) / vec2<f32>(x_1922.x, x_1922.y));
  let x_1927 : vec3<f32> = u_xlat23;
  u_xlat23 = vec3<f32>(x_1926.x, x_1927.y, x_1926.y);
  let x_1929 : vec3<f32> = u_xlat23;
  let x_1931 : vec4<f32> = hlslcc_FragCoord;
  let x_1933 : vec2<f32> = (vec2<f32>(x_1929.x, x_1929.z) * vec2<f32>(x_1931.x, x_1931.y));
  let x_1934 : vec4<f32> = u_xlat7;
  u_xlat7 = vec4<f32>(x_1933.x, x_1933.y, x_1934.z, x_1934.w);
  let x_1937 : f32 = u_xlat7.y;
  let x_1939 : f32 = x_66.x_ScaleBiasRt.x;
  let x_1942 : f32 = x_66.x_ScaleBiasRt.y;
  u_xlat23.x = ((x_1937 * x_1939) + x_1942);
  let x_1946 : f32 = u_xlat23.x;
  u_xlat7.z = (-(x_1946) + 1.0f);
  let x_1951 : f32 = u_xlat3.x;
  u_xlat3.x = x_1951;
  let x_1954 : f32 = u_xlat3.x;
  u_xlat3.x = clamp(x_1954, 0.0f, 1.0f);
  let x_1958 : f32 = u_xlat1.x;
  u_xlat1.x = min(x_1958, 1.0f);
  let x_1961 : vec3<f32> = u_xlat2;
  u_xlat2 = (x_1961 * vec3<f32>(0.959999979f, 0.959999979f, 0.959999979f));
  let x_1966 : f32 = u_xlat3.x;
  u_xlat23.x = (-(x_1966) + 1.0f);
  let x_1971 : f32 = u_xlat23.x;
  let x_1973 : f32 = u_xlat23.x;
  u_xlat67 = (x_1971 * x_1973);
  let x_1975 : f32 = u_xlat67;
  u_xlat67 = max(x_1975, 0.0078125f);
  let x_1978 : f32 = u_xlat67;
  let x_1979 : f32 = u_xlat67;
  u_xlat68 = (x_1978 * x_1979);
  let x_1982 : f32 = u_xlat3.x;
  u_xlat3.x = (x_1982 + 0.040000021f);
  let x_1987 : f32 = u_xlat3.x;
  u_xlat3.x = min(x_1987, 1.0f);
  let x_1991 : f32 = u_xlat67;
  u_xlat72 = ((x_1991 * 4.0f) + 2.0f);
  let x_1999 : vec4<f32> = u_xlat7;
  let x_2002 : f32 = x_66.x_GlobalMipBias.x;
  let x_2003 : vec4<f32> = textureSampleBias(x_ScreenSpaceOcclusionTexture, sampler_ScreenSpaceOcclusionTexture, vec2<f32>(x_1999.x, x_1999.z), x_2002);
  u_xlat7.x = x_2003.x;
  let x_2007 : f32 = u_xlat7.x;
  u_xlat29.x = (x_2007 + -1.0f);
  let x_2011 : f32 = x_66.x_AmbientOcclusionParam.w;
  let x_2013 : f32 = u_xlat29.x;
  u_xlat29.x = ((x_2011 * x_2013) + 1.0f);
  let x_2018 : f32 = u_xlat7.x;
  let x_2020 : f32 = vs_INTERP4.w;
  u_xlat7.x = min(x_2018, x_2020);
  let x_2023 : bool = u_xlatb66;
  if (x_2023) {
    let x_2027 : f32 = x_138.x_MainLightShadowParams.y;
    u_xlatb66 = (x_2027 == 1.0f);
    let x_2029 : bool = u_xlatb66;
    if (x_2029) {
      let x_2032 : vec4<f32> = u_xlat4;
      let x_2035 : vec4<f32> = x_138.x_MainLightShadowOffset0;
      u_xlat8 = (vec4<f32>(x_2032.x, x_2032.y, x_2032.x, x_2032.y) + x_2035);
      let x_2038 : vec4<f32> = u_xlat8;
      let x_2039 : vec2<f32> = vec2<f32>(x_2038.x, x_2038.y);
      let x_2041 : f32 = u_xlat4.z;
      txVec30 = vec3<f32>(x_2039.x, x_2039.y, x_2041);
      let x_2048 : vec3<f32> = txVec30;
      let x_2050 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2048.xy, x_2048.z);
      u_xlat9.x = x_2050;
      let x_2053 : vec4<f32> = u_xlat8;
      let x_2054 : vec2<f32> = vec2<f32>(x_2053.z, x_2053.w);
      let x_2056 : f32 = u_xlat4.z;
      txVec31 = vec3<f32>(x_2054.x, x_2054.y, x_2056);
      let x_2063 : vec3<f32> = txVec31;
      let x_2065 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2063.xy, x_2063.z);
      u_xlat9.y = x_2065;
      let x_2067 : vec4<f32> = u_xlat4;
      let x_2070 : vec4<f32> = x_138.x_MainLightShadowOffset1;
      u_xlat8 = (vec4<f32>(x_2067.x, x_2067.y, x_2067.x, x_2067.y) + x_2070);
      let x_2073 : vec4<f32> = u_xlat8;
      let x_2074 : vec2<f32> = vec2<f32>(x_2073.x, x_2073.y);
      let x_2076 : f32 = u_xlat4.z;
      txVec32 = vec3<f32>(x_2074.x, x_2074.y, x_2076);
      let x_2083 : vec3<f32> = txVec32;
      let x_2085 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2083.xy, x_2083.z);
      u_xlat9.z = x_2085;
      let x_2088 : vec4<f32> = u_xlat8;
      let x_2089 : vec2<f32> = vec2<f32>(x_2088.z, x_2088.w);
      let x_2091 : f32 = u_xlat4.z;
      txVec33 = vec3<f32>(x_2089.x, x_2089.y, x_2091);
      let x_2098 : vec3<f32> = txVec33;
      let x_2100 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2098.xy, x_2098.z);
      u_xlat9.w = x_2100;
      let x_2102 : vec4<f32> = u_xlat9;
      u_xlat66 = dot(x_2102, vec4<f32>(0.25f, 0.25f, 0.25f, 0.25f));
    } else {
      let x_2109 : f32 = x_138.x_MainLightShadowParams.y;
      u_xlatb51.x = (x_2109 == 2.0f);
      let x_2113 : bool = u_xlatb51.x;
      if (x_2113) {
        let x_2116 : vec4<f32> = u_xlat4;
        let x_2119 : vec4<f32> = x_138.x_MainLightShadowmapSize;
        u_xlat51 = ((vec2<f32>(x_2116.x, x_2116.y) * vec2<f32>(x_2119.z, x_2119.w)) + vec2<f32>(0.5f, 0.5f));
        let x_2123 : vec2<f32> = u_xlat51;
        u_xlat51 = floor(x_2123);
        let x_2125 : vec4<f32> = u_xlat4;
        let x_2128 : vec4<f32> = x_138.x_MainLightShadowmapSize;
        let x_2131 : vec2<f32> = u_xlat51;
        let x_2133 : vec2<f32> = ((vec2<f32>(x_2125.x, x_2125.y) * vec2<f32>(x_2128.z, x_2128.w)) + -(x_2131));
        let x_2134 : vec4<f32> = u_xlat8;
        u_xlat8 = vec4<f32>(x_2133.x, x_2133.y, x_2134.z, x_2134.w);
        let x_2136 : vec4<f32> = u_xlat8;
        u_xlat9 = (vec4<f32>(x_2136.x, x_2136.x, x_2136.y, x_2136.y) + vec4<f32>(0.5f, 1.0f, 0.5f, 1.0f));
        let x_2139 : vec4<f32> = u_xlat9;
        let x_2141 : vec4<f32> = u_xlat9;
        u_xlat10 = (vec4<f32>(x_2139.x, x_2139.x, x_2139.z, x_2139.z) * vec4<f32>(x_2141.x, x_2141.x, x_2141.z, x_2141.z));
        let x_2144 : vec4<f32> = u_xlat10;
        u_xlat52 = (vec2<f32>(x_2144.y, x_2144.w) * vec2<f32>(0.079999998f, 0.079999998f));
        let x_2147 : vec4<f32> = u_xlat10;
        let x_2150 : vec4<f32> = u_xlat8;
        let x_2153 : vec2<f32> = ((vec2<f32>(x_2147.x, x_2147.z) * vec2<f32>(0.5f, 0.5f)) + -(vec2<f32>(x_2150.x, x_2150.y)));
        let x_2154 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_2153.x, x_2154.y, x_2153.y, x_2154.w);
        let x_2156 : vec4<f32> = u_xlat8;
        let x_2159 : vec2<f32> = (-(vec2<f32>(x_2156.x, x_2156.y)) + vec2<f32>(1.0f, 1.0f));
        let x_2160 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_2159.x, x_2159.y, x_2160.z, x_2160.w);
        let x_2163 : vec4<f32> = u_xlat8;
        u_xlat54 = min(vec2<f32>(x_2163.x, x_2163.y), vec2<f32>(0.0f, 0.0f));
        let x_2166 : vec2<f32> = u_xlat54;
        let x_2168 : vec2<f32> = u_xlat54;
        let x_2170 : vec4<f32> = u_xlat10;
        u_xlat54 = ((-(x_2166) * x_2168) + vec2<f32>(x_2170.x, x_2170.y));
        let x_2173 : vec4<f32> = u_xlat8;
        let x_2175 : vec2<f32> = max(vec2<f32>(x_2173.x, x_2173.y), vec2<f32>(0.0f, 0.0f));
        let x_2176 : vec4<f32> = u_xlat8;
        u_xlat8 = vec4<f32>(x_2175.x, x_2175.y, x_2176.z, x_2176.w);
        let x_2178 : vec4<f32> = u_xlat8;
        let x_2181 : vec4<f32> = u_xlat8;
        let x_2184 : vec4<f32> = u_xlat9;
        let x_2186 : vec2<f32> = ((-(vec2<f32>(x_2178.x, x_2178.y)) * vec2<f32>(x_2181.x, x_2181.y)) + vec2<f32>(x_2184.y, x_2184.w));
        let x_2187 : vec4<f32> = u_xlat8;
        u_xlat8 = vec4<f32>(x_2186.x, x_2186.y, x_2187.z, x_2187.w);
        let x_2189 : vec2<f32> = u_xlat54;
        u_xlat54 = (x_2189 + vec2<f32>(1.0f, 1.0f));
        let x_2191 : vec4<f32> = u_xlat8;
        let x_2193 : vec2<f32> = (vec2<f32>(x_2191.x, x_2191.y) + vec2<f32>(1.0f, 1.0f));
        let x_2194 : vec4<f32> = u_xlat8;
        u_xlat8 = vec4<f32>(x_2193.x, x_2193.y, x_2194.z, x_2194.w);
        let x_2196 : vec4<f32> = u_xlat9;
        let x_2198 : vec2<f32> = (vec2<f32>(x_2196.x, x_2196.z) * vec2<f32>(0.159999996f, 0.159999996f));
        let x_2199 : vec4<f32> = u_xlat11;
        u_xlat11 = vec4<f32>(x_2198.x, x_2198.y, x_2199.z, x_2199.w);
        let x_2201 : vec4<f32> = u_xlat10;
        let x_2203 : vec2<f32> = (vec2<f32>(x_2201.x, x_2201.y) * vec2<f32>(0.159999996f, 0.159999996f));
        let x_2204 : vec4<f32> = u_xlat12;
        u_xlat12 = vec4<f32>(x_2203.x, x_2203.y, x_2204.z, x_2204.w);
        let x_2206 : vec2<f32> = u_xlat54;
        let x_2207 : vec2<f32> = (x_2206 * vec2<f32>(0.159999996f, 0.159999996f));
        let x_2208 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_2207.x, x_2207.y, x_2208.z, x_2208.w);
        let x_2210 : vec4<f32> = u_xlat8;
        let x_2212 : vec2<f32> = (vec2<f32>(x_2210.x, x_2210.y) * vec2<f32>(0.159999996f, 0.159999996f));
        let x_2213 : vec4<f32> = u_xlat13;
        u_xlat13 = vec4<f32>(x_2212.x, x_2212.y, x_2213.z, x_2213.w);
        let x_2215 : vec4<f32> = u_xlat9;
        let x_2217 : vec2<f32> = (vec2<f32>(x_2215.y, x_2215.w) * vec2<f32>(0.159999996f, 0.159999996f));
        let x_2218 : vec4<f32> = u_xlat8;
        u_xlat8 = vec4<f32>(x_2217.x, x_2217.y, x_2218.z, x_2218.w);
        let x_2221 : f32 = u_xlat10.x;
        u_xlat11.z = x_2221;
        let x_2224 : f32 = u_xlat8.x;
        u_xlat11.w = x_2224;
        let x_2227 : f32 = u_xlat13.x;
        u_xlat12.z = x_2227;
        let x_2230 : f32 = u_xlat52.x;
        u_xlat12.w = x_2230;
        let x_2232 : vec4<f32> = u_xlat11;
        let x_2234 : vec4<f32> = u_xlat12;
        u_xlat9 = (vec4<f32>(x_2232.z, x_2232.w, x_2232.x, x_2232.z) + vec4<f32>(x_2234.z, x_2234.w, x_2234.x, x_2234.z));
        let x_2238 : f32 = u_xlat11.y;
        u_xlat10.z = x_2238;
        let x_2241 : f32 = u_xlat8.y;
        u_xlat10.w = x_2241;
        let x_2244 : f32 = u_xlat12.y;
        u_xlat13.z = x_2244;
        let x_2247 : f32 = u_xlat52.y;
        u_xlat13.w = x_2247;
        let x_2249 : vec4<f32> = u_xlat10;
        let x_2251 : vec4<f32> = u_xlat13;
        let x_2253 : vec3<f32> = (vec3<f32>(x_2249.z, x_2249.y, x_2249.w) + vec3<f32>(x_2251.z, x_2251.y, x_2251.w));
        let x_2254 : vec4<f32> = u_xlat8;
        u_xlat8 = vec4<f32>(x_2253.x, x_2253.y, x_2253.z, x_2254.w);
        let x_2256 : vec4<f32> = u_xlat12;
        let x_2258 : vec4<f32> = u_xlat9;
        let x_2260 : vec3<f32> = (vec3<f32>(x_2256.x, x_2256.z, x_2256.w) / vec3<f32>(x_2258.z, x_2258.w, x_2258.y));
        let x_2261 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_2260.x, x_2260.y, x_2260.z, x_2261.w);
        let x_2263 : vec4<f32> = u_xlat10;
        let x_2265 : vec3<f32> = (vec3<f32>(x_2263.x, x_2263.y, x_2263.z) + vec3<f32>(-2.5f, -0.5f, 1.5f));
        let x_2266 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_2265.x, x_2265.y, x_2265.z, x_2266.w);
        let x_2268 : vec4<f32> = u_xlat13;
        let x_2270 : vec4<f32> = u_xlat8;
        let x_2272 : vec3<f32> = (vec3<f32>(x_2268.z, x_2268.y, x_2268.w) / vec3<f32>(x_2270.x, x_2270.y, x_2270.z));
        let x_2273 : vec4<f32> = u_xlat11;
        u_xlat11 = vec4<f32>(x_2272.x, x_2272.y, x_2272.z, x_2273.w);
        let x_2275 : vec4<f32> = u_xlat11;
        let x_2277 : vec3<f32> = (vec3<f32>(x_2275.x, x_2275.y, x_2275.z) + vec3<f32>(-2.5f, -0.5f, 1.5f));
        let x_2278 : vec4<f32> = u_xlat11;
        u_xlat11 = vec4<f32>(x_2277.x, x_2277.y, x_2277.z, x_2278.w);
        let x_2280 : vec4<f32> = u_xlat10;
        let x_2283 : vec4<f32> = x_138.x_MainLightShadowmapSize;
        let x_2285 : vec3<f32> = (vec3<f32>(x_2280.y, x_2280.x, x_2280.z) * vec3<f32>(x_2283.x, x_2283.x, x_2283.x));
        let x_2286 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_2285.x, x_2285.y, x_2285.z, x_2286.w);
        let x_2288 : vec4<f32> = u_xlat11;
        let x_2291 : vec4<f32> = x_138.x_MainLightShadowmapSize;
        let x_2293 : vec3<f32> = (vec3<f32>(x_2288.x, x_2288.y, x_2288.z) * vec3<f32>(x_2291.y, x_2291.y, x_2291.y));
        let x_2294 : vec4<f32> = u_xlat11;
        u_xlat11 = vec4<f32>(x_2293.x, x_2293.y, x_2293.z, x_2294.w);
        let x_2297 : f32 = u_xlat11.x;
        u_xlat10.w = x_2297;
        let x_2299 : vec2<f32> = u_xlat51;
        let x_2302 : vec4<f32> = x_138.x_MainLightShadowmapSize;
        let x_2305 : vec4<f32> = u_xlat10;
        u_xlat12 = ((vec4<f32>(x_2299.x, x_2299.y, x_2299.x, x_2299.y) * vec4<f32>(x_2302.x, x_2302.y, x_2302.x, x_2302.y)) + vec4<f32>(x_2305.y, x_2305.w, x_2305.x, x_2305.w));
        let x_2308 : vec2<f32> = u_xlat51;
        let x_2310 : vec4<f32> = x_138.x_MainLightShadowmapSize;
        let x_2313 : vec4<f32> = u_xlat10;
        let x_2315 : vec2<f32> = ((x_2308 * vec2<f32>(x_2310.x, x_2310.y)) + vec2<f32>(x_2313.z, x_2313.w));
        let x_2316 : vec4<f32> = u_xlat13;
        u_xlat13 = vec4<f32>(x_2315.x, x_2315.y, x_2316.z, x_2316.w);
        let x_2319 : f32 = u_xlat10.y;
        u_xlat11.w = x_2319;
        let x_2321 : vec4<f32> = u_xlat11;
        let x_2322 : vec2<f32> = vec2<f32>(x_2321.y, x_2321.z);
        let x_2323 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_2323.x, x_2322.x, x_2323.z, x_2322.y);
        let x_2325 : vec2<f32> = u_xlat51;
        let x_2328 : vec4<f32> = x_138.x_MainLightShadowmapSize;
        let x_2331 : vec4<f32> = u_xlat10;
        u_xlat14 = ((vec4<f32>(x_2325.x, x_2325.y, x_2325.x, x_2325.y) * vec4<f32>(x_2328.x, x_2328.y, x_2328.x, x_2328.y)) + vec4<f32>(x_2331.x, x_2331.y, x_2331.z, x_2331.y));
        let x_2334 : vec2<f32> = u_xlat51;
        let x_2337 : vec4<f32> = x_138.x_MainLightShadowmapSize;
        let x_2340 : vec4<f32> = u_xlat11;
        u_xlat11 = ((vec4<f32>(x_2334.x, x_2334.y, x_2334.x, x_2334.y) * vec4<f32>(x_2337.x, x_2337.y, x_2337.x, x_2337.y)) + vec4<f32>(x_2340.w, x_2340.y, x_2340.w, x_2340.z));
        let x_2343 : vec2<f32> = u_xlat51;
        let x_2346 : vec4<f32> = x_138.x_MainLightShadowmapSize;
        let x_2349 : vec4<f32> = u_xlat10;
        u_xlat10 = ((vec4<f32>(x_2343.x, x_2343.y, x_2343.x, x_2343.y) * vec4<f32>(x_2346.x, x_2346.y, x_2346.x, x_2346.y)) + vec4<f32>(x_2349.x, x_2349.w, x_2349.z, x_2349.w));
        let x_2352 : vec4<f32> = u_xlat8;
        let x_2354 : vec4<f32> = u_xlat9;
        u_xlat15 = (vec4<f32>(x_2352.x, x_2352.x, x_2352.x, x_2352.y) * vec4<f32>(x_2354.z, x_2354.w, x_2354.y, x_2354.z));
        let x_2357 : vec4<f32> = u_xlat8;
        let x_2359 : vec4<f32> = u_xlat9;
        u_xlat16 = (vec4<f32>(x_2357.y, x_2357.y, x_2357.z, x_2357.z) * x_2359);
        let x_2362 : f32 = u_xlat8.z;
        let x_2364 : f32 = u_xlat9.y;
        u_xlat51.x = (x_2362 * x_2364);
        let x_2368 : vec4<f32> = u_xlat12;
        let x_2369 : vec2<f32> = vec2<f32>(x_2368.x, x_2368.y);
        let x_2371 : f32 = u_xlat4.z;
        txVec34 = vec3<f32>(x_2369.x, x_2369.y, x_2371);
        let x_2379 : vec3<f32> = txVec34;
        let x_2381 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2379.xy, x_2379.z);
        u_xlat73 = x_2381;
        let x_2383 : vec4<f32> = u_xlat12;
        let x_2384 : vec2<f32> = vec2<f32>(x_2383.z, x_2383.w);
        let x_2386 : f32 = u_xlat4.z;
        txVec35 = vec3<f32>(x_2384.x, x_2384.y, x_2386);
        let x_2393 : vec3<f32> = txVec35;
        let x_2395 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2393.xy, x_2393.z);
        u_xlat8.x = x_2395;
        let x_2398 : f32 = u_xlat8.x;
        let x_2400 : f32 = u_xlat15.y;
        u_xlat8.x = (x_2398 * x_2400);
        let x_2404 : f32 = u_xlat15.x;
        let x_2405 : f32 = u_xlat73;
        let x_2408 : f32 = u_xlat8.x;
        u_xlat73 = ((x_2404 * x_2405) + x_2408);
        let x_2411 : vec4<f32> = u_xlat13;
        let x_2412 : vec2<f32> = vec2<f32>(x_2411.x, x_2411.y);
        let x_2414 : f32 = u_xlat4.z;
        txVec36 = vec3<f32>(x_2412.x, x_2412.y, x_2414);
        let x_2421 : vec3<f32> = txVec36;
        let x_2423 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2421.xy, x_2421.z);
        u_xlat8.x = x_2423;
        let x_2426 : f32 = u_xlat15.z;
        let x_2428 : f32 = u_xlat8.x;
        let x_2430 : f32 = u_xlat73;
        u_xlat73 = ((x_2426 * x_2428) + x_2430);
        let x_2433 : vec4<f32> = u_xlat11;
        let x_2434 : vec2<f32> = vec2<f32>(x_2433.x, x_2433.y);
        let x_2436 : f32 = u_xlat4.z;
        txVec37 = vec3<f32>(x_2434.x, x_2434.y, x_2436);
        let x_2443 : vec3<f32> = txVec37;
        let x_2445 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2443.xy, x_2443.z);
        u_xlat8.x = x_2445;
        let x_2448 : f32 = u_xlat15.w;
        let x_2450 : f32 = u_xlat8.x;
        let x_2452 : f32 = u_xlat73;
        u_xlat73 = ((x_2448 * x_2450) + x_2452);
        let x_2455 : vec4<f32> = u_xlat14;
        let x_2456 : vec2<f32> = vec2<f32>(x_2455.x, x_2455.y);
        let x_2458 : f32 = u_xlat4.z;
        txVec38 = vec3<f32>(x_2456.x, x_2456.y, x_2458);
        let x_2465 : vec3<f32> = txVec38;
        let x_2467 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2465.xy, x_2465.z);
        u_xlat8.x = x_2467;
        let x_2470 : f32 = u_xlat16.x;
        let x_2472 : f32 = u_xlat8.x;
        let x_2474 : f32 = u_xlat73;
        u_xlat73 = ((x_2470 * x_2472) + x_2474);
        let x_2477 : vec4<f32> = u_xlat14;
        let x_2478 : vec2<f32> = vec2<f32>(x_2477.z, x_2477.w);
        let x_2480 : f32 = u_xlat4.z;
        txVec39 = vec3<f32>(x_2478.x, x_2478.y, x_2480);
        let x_2487 : vec3<f32> = txVec39;
        let x_2489 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2487.xy, x_2487.z);
        u_xlat8.x = x_2489;
        let x_2492 : f32 = u_xlat16.y;
        let x_2494 : f32 = u_xlat8.x;
        let x_2496 : f32 = u_xlat73;
        u_xlat73 = ((x_2492 * x_2494) + x_2496);
        let x_2499 : vec4<f32> = u_xlat11;
        let x_2500 : vec2<f32> = vec2<f32>(x_2499.z, x_2499.w);
        let x_2502 : f32 = u_xlat4.z;
        txVec40 = vec3<f32>(x_2500.x, x_2500.y, x_2502);
        let x_2509 : vec3<f32> = txVec40;
        let x_2511 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2509.xy, x_2509.z);
        u_xlat8.x = x_2511;
        let x_2514 : f32 = u_xlat16.z;
        let x_2516 : f32 = u_xlat8.x;
        let x_2518 : f32 = u_xlat73;
        u_xlat73 = ((x_2514 * x_2516) + x_2518);
        let x_2521 : vec4<f32> = u_xlat10;
        let x_2522 : vec2<f32> = vec2<f32>(x_2521.x, x_2521.y);
        let x_2524 : f32 = u_xlat4.z;
        txVec41 = vec3<f32>(x_2522.x, x_2522.y, x_2524);
        let x_2531 : vec3<f32> = txVec41;
        let x_2533 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2531.xy, x_2531.z);
        u_xlat8.x = x_2533;
        let x_2536 : f32 = u_xlat16.w;
        let x_2538 : f32 = u_xlat8.x;
        let x_2540 : f32 = u_xlat73;
        u_xlat73 = ((x_2536 * x_2538) + x_2540);
        let x_2543 : vec4<f32> = u_xlat10;
        let x_2544 : vec2<f32> = vec2<f32>(x_2543.z, x_2543.w);
        let x_2546 : f32 = u_xlat4.z;
        txVec42 = vec3<f32>(x_2544.x, x_2544.y, x_2546);
        let x_2553 : vec3<f32> = txVec42;
        let x_2555 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2553.xy, x_2553.z);
        u_xlat8.x = x_2555;
        let x_2558 : f32 = u_xlat51.x;
        let x_2560 : f32 = u_xlat8.x;
        let x_2562 : f32 = u_xlat73;
        u_xlat66 = ((x_2558 * x_2560) + x_2562);
      } else {
        let x_2565 : vec4<f32> = u_xlat4;
        let x_2568 : vec4<f32> = x_138.x_MainLightShadowmapSize;
        u_xlat51 = ((vec2<f32>(x_2565.x, x_2565.y) * vec2<f32>(x_2568.z, x_2568.w)) + vec2<f32>(0.5f, 0.5f));
        let x_2572 : vec2<f32> = u_xlat51;
        u_xlat51 = floor(x_2572);
        let x_2574 : vec4<f32> = u_xlat4;
        let x_2577 : vec4<f32> = x_138.x_MainLightShadowmapSize;
        let x_2580 : vec2<f32> = u_xlat51;
        let x_2582 : vec2<f32> = ((vec2<f32>(x_2574.x, x_2574.y) * vec2<f32>(x_2577.z, x_2577.w)) + -(x_2580));
        let x_2583 : vec4<f32> = u_xlat8;
        u_xlat8 = vec4<f32>(x_2582.x, x_2582.y, x_2583.z, x_2583.w);
        let x_2585 : vec4<f32> = u_xlat8;
        u_xlat9 = (vec4<f32>(x_2585.x, x_2585.x, x_2585.y, x_2585.y) + vec4<f32>(0.5f, 1.0f, 0.5f, 1.0f));
        let x_2588 : vec4<f32> = u_xlat9;
        let x_2590 : vec4<f32> = u_xlat9;
        u_xlat10 = (vec4<f32>(x_2588.x, x_2588.x, x_2588.z, x_2588.z) * vec4<f32>(x_2590.x, x_2590.x, x_2590.z, x_2590.z));
        let x_2593 : vec4<f32> = u_xlat10;
        let x_2595 : vec2<f32> = (vec2<f32>(x_2593.y, x_2593.w) * vec2<f32>(0.040816002f, 0.040816002f));
        let x_2596 : vec4<f32> = u_xlat11;
        u_xlat11 = vec4<f32>(x_2596.x, x_2595.x, x_2596.z, x_2595.y);
        let x_2598 : vec4<f32> = u_xlat10;
        let x_2601 : vec4<f32> = u_xlat8;
        u_xlat52 = ((vec2<f32>(x_2598.x, x_2598.z) * vec2<f32>(0.5f, 0.5f)) + -(vec2<f32>(x_2601.x, x_2601.y)));
        let x_2605 : vec4<f32> = u_xlat8;
        let x_2608 : vec2<f32> = (-(vec2<f32>(x_2605.x, x_2605.y)) + vec2<f32>(1.0f, 1.0f));
        let x_2609 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_2608.x, x_2609.y, x_2608.y, x_2609.w);
        let x_2611 : vec4<f32> = u_xlat8;
        let x_2613 : vec2<f32> = min(vec2<f32>(x_2611.x, x_2611.y), vec2<f32>(0.0f, 0.0f));
        let x_2614 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_2613.x, x_2613.y, x_2614.z, x_2614.w);
        let x_2616 : vec4<f32> = u_xlat10;
        let x_2619 : vec4<f32> = u_xlat10;
        let x_2622 : vec4<f32> = u_xlat9;
        let x_2624 : vec2<f32> = ((-(vec2<f32>(x_2616.x, x_2616.y)) * vec2<f32>(x_2619.x, x_2619.y)) + vec2<f32>(x_2622.x, x_2622.z));
        let x_2625 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_2624.x, x_2625.y, x_2624.y, x_2625.w);
        let x_2627 : vec4<f32> = u_xlat8;
        let x_2629 : vec2<f32> = max(vec2<f32>(x_2627.x, x_2627.y), vec2<f32>(0.0f, 0.0f));
        let x_2630 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_2629.x, x_2629.y, x_2630.z, x_2630.w);
        let x_2632 : vec4<f32> = u_xlat10;
        let x_2635 : vec4<f32> = u_xlat10;
        let x_2638 : vec4<f32> = u_xlat9;
        let x_2640 : vec2<f32> = ((-(vec2<f32>(x_2632.x, x_2632.y)) * vec2<f32>(x_2635.x, x_2635.y)) + vec2<f32>(x_2638.y, x_2638.w));
        let x_2641 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_2641.x, x_2640.x, x_2641.z, x_2640.y);
        let x_2643 : vec4<f32> = u_xlat9;
        u_xlat9 = (x_2643 + vec4<f32>(2.0f, 2.0f, 2.0f, 2.0f));
        let x_2646 : f32 = u_xlat9.y;
        u_xlat10.z = (x_2646 * 0.081632003f);
        let x_2649 : vec2<f32> = u_xlat52;
        let x_2651 : vec2<f32> = (vec2<f32>(x_2649.y, x_2649.x) * vec2<f32>(0.081632003f, 0.081632003f));
        let x_2652 : vec4<f32> = u_xlat12;
        u_xlat12 = vec4<f32>(x_2651.x, x_2651.y, x_2652.z, x_2652.w);
        let x_2654 : vec4<f32> = u_xlat9;
        u_xlat52 = (vec2<f32>(x_2654.x, x_2654.z) * vec2<f32>(0.081632003f, 0.081632003f));
        let x_2658 : f32 = u_xlat9.w;
        u_xlat12.z = (x_2658 * 0.081632003f);
        let x_2662 : f32 = u_xlat12.y;
        u_xlat10.x = x_2662;
        let x_2664 : vec4<f32> = u_xlat8;
        let x_2667 : vec2<f32> = ((vec2<f32>(x_2664.x, x_2664.x) * vec2<f32>(-0.081632003f, 0.081632003f)) + vec2<f32>(0.163264006f, 0.081632003f));
        let x_2668 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_2668.x, x_2667.x, x_2668.z, x_2667.y);
        let x_2670 : vec4<f32> = u_xlat8;
        let x_2673 : vec2<f32> = ((vec2<f32>(x_2670.x, x_2670.x) * vec2<f32>(-0.081632003f, 0.081632003f)) + vec2<f32>(0.081632003f, 0.163264006f));
        let x_2674 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_2673.x, x_2674.y, x_2673.y, x_2674.w);
        let x_2677 : f32 = u_xlat52.x;
        u_xlat9.y = x_2677;
        let x_2680 : f32 = u_xlat11.y;
        u_xlat9.w = x_2680;
        let x_2682 : vec4<f32> = u_xlat9;
        let x_2683 : vec4<f32> = u_xlat10;
        u_xlat10 = (x_2682 + x_2683);
        let x_2685 : vec4<f32> = u_xlat8;
        let x_2688 : vec2<f32> = ((vec2<f32>(x_2685.y, x_2685.y) * vec2<f32>(-0.081632003f, 0.081632003f)) + vec2<f32>(0.163264006f, 0.081632003f));
        let x_2689 : vec4<f32> = u_xlat12;
        u_xlat12 = vec4<f32>(x_2689.x, x_2688.x, x_2689.z, x_2688.y);
        let x_2691 : vec4<f32> = u_xlat8;
        let x_2694 : vec2<f32> = ((vec2<f32>(x_2691.y, x_2691.y) * vec2<f32>(-0.081632003f, 0.081632003f)) + vec2<f32>(0.081632003f, 0.163264006f));
        let x_2695 : vec4<f32> = u_xlat11;
        u_xlat11 = vec4<f32>(x_2694.x, x_2695.y, x_2694.y, x_2695.w);
        let x_2698 : f32 = u_xlat52.y;
        u_xlat11.y = x_2698;
        let x_2700 : vec4<f32> = u_xlat11;
        let x_2701 : vec4<f32> = u_xlat12;
        u_xlat8 = (x_2700 + x_2701);
        let x_2703 : vec4<f32> = u_xlat9;
        let x_2704 : vec4<f32> = u_xlat10;
        u_xlat9 = (x_2703 / x_2704);
        let x_2706 : vec4<f32> = u_xlat9;
        u_xlat9 = (x_2706 + vec4<f32>(-3.5f, -1.5f, 0.5f, 2.5f));
        let x_2708 : vec4<f32> = u_xlat11;
        let x_2709 : vec4<f32> = u_xlat8;
        u_xlat11 = (x_2708 / x_2709);
        let x_2711 : vec4<f32> = u_xlat11;
        u_xlat11 = (x_2711 + vec4<f32>(-3.5f, -1.5f, 0.5f, 2.5f));
        let x_2713 : vec4<f32> = u_xlat9;
        let x_2716 : vec4<f32> = x_138.x_MainLightShadowmapSize;
        u_xlat9 = (vec4<f32>(x_2713.w, x_2713.x, x_2713.y, x_2713.z) * vec4<f32>(x_2716.x, x_2716.x, x_2716.x, x_2716.x));
        let x_2719 : vec4<f32> = u_xlat11;
        let x_2722 : vec4<f32> = x_138.x_MainLightShadowmapSize;
        u_xlat11 = (vec4<f32>(x_2719.x, x_2719.w, x_2719.y, x_2719.z) * vec4<f32>(x_2722.y, x_2722.y, x_2722.y, x_2722.y));
        let x_2725 : vec4<f32> = u_xlat9;
        let x_2726 : vec3<f32> = vec3<f32>(x_2725.y, x_2725.z, x_2725.w);
        let x_2727 : vec4<f32> = u_xlat12;
        u_xlat12 = vec4<f32>(x_2726.x, x_2727.y, x_2726.y, x_2726.z);
        let x_2730 : f32 = u_xlat11.x;
        u_xlat12.y = x_2730;
        let x_2732 : vec2<f32> = u_xlat51;
        let x_2735 : vec4<f32> = x_138.x_MainLightShadowmapSize;
        let x_2738 : vec4<f32> = u_xlat12;
        u_xlat13 = ((vec4<f32>(x_2732.x, x_2732.y, x_2732.x, x_2732.y) * vec4<f32>(x_2735.x, x_2735.y, x_2735.x, x_2735.y)) + vec4<f32>(x_2738.x, x_2738.y, x_2738.z, x_2738.y));
        let x_2741 : vec2<f32> = u_xlat51;
        let x_2743 : vec4<f32> = x_138.x_MainLightShadowmapSize;
        let x_2746 : vec4<f32> = u_xlat12;
        let x_2748 : vec2<f32> = ((x_2741 * vec2<f32>(x_2743.x, x_2743.y)) + vec2<f32>(x_2746.w, x_2746.y));
        let x_2749 : vec4<f32> = u_xlat14;
        u_xlat14 = vec4<f32>(x_2748.x, x_2748.y, x_2749.z, x_2749.w);
        let x_2752 : f32 = u_xlat12.y;
        u_xlat9.y = x_2752;
        let x_2755 : f32 = u_xlat11.z;
        u_xlat12.y = x_2755;
        let x_2757 : vec2<f32> = u_xlat51;
        let x_2760 : vec4<f32> = x_138.x_MainLightShadowmapSize;
        let x_2763 : vec4<f32> = u_xlat12;
        u_xlat15 = ((vec4<f32>(x_2757.x, x_2757.y, x_2757.x, x_2757.y) * vec4<f32>(x_2760.x, x_2760.y, x_2760.x, x_2760.y)) + vec4<f32>(x_2763.x, x_2763.y, x_2763.z, x_2763.y));
        let x_2767 : vec2<f32> = u_xlat51;
        let x_2769 : vec4<f32> = x_138.x_MainLightShadowmapSize;
        let x_2772 : vec4<f32> = u_xlat12;
        u_xlat58 = ((x_2767 * vec2<f32>(x_2769.x, x_2769.y)) + vec2<f32>(x_2772.w, x_2772.y));
        let x_2776 : f32 = u_xlat12.y;
        u_xlat9.z = x_2776;
        let x_2778 : vec2<f32> = u_xlat51;
        let x_2781 : vec4<f32> = x_138.x_MainLightShadowmapSize;
        let x_2784 : vec4<f32> = u_xlat9;
        u_xlat16 = ((vec4<f32>(x_2778.x, x_2778.y, x_2778.x, x_2778.y) * vec4<f32>(x_2781.x, x_2781.y, x_2781.x, x_2781.y)) + vec4<f32>(x_2784.x, x_2784.y, x_2784.x, x_2784.z));
        let x_2788 : f32 = u_xlat11.w;
        u_xlat12.y = x_2788;
        let x_2790 : vec2<f32> = u_xlat51;
        let x_2793 : vec4<f32> = x_138.x_MainLightShadowmapSize;
        let x_2796 : vec4<f32> = u_xlat12;
        u_xlat17 = ((vec4<f32>(x_2790.x, x_2790.y, x_2790.x, x_2790.y) * vec4<f32>(x_2793.x, x_2793.y, x_2793.x, x_2793.y)) + vec4<f32>(x_2796.x, x_2796.y, x_2796.z, x_2796.y));
        let x_2800 : vec2<f32> = u_xlat51;
        let x_2802 : vec4<f32> = x_138.x_MainLightShadowmapSize;
        let x_2805 : vec4<f32> = u_xlat12;
        u_xlat31 = ((x_2800 * vec2<f32>(x_2802.x, x_2802.y)) + vec2<f32>(x_2805.w, x_2805.y));
        let x_2809 : f32 = u_xlat12.y;
        u_xlat9.w = x_2809;
        let x_2811 : vec2<f32> = u_xlat51;
        let x_2813 : vec4<f32> = x_138.x_MainLightShadowmapSize;
        let x_2816 : vec4<f32> = u_xlat9;
        let x_2818 : vec2<f32> = ((x_2811 * vec2<f32>(x_2813.x, x_2813.y)) + vec2<f32>(x_2816.x, x_2816.w));
        let x_2819 : vec4<f32> = u_xlat18;
        u_xlat18 = vec4<f32>(x_2818.x, x_2818.y, x_2819.z, x_2819.w);
        let x_2821 : vec4<f32> = u_xlat12;
        let x_2822 : vec3<f32> = vec3<f32>(x_2821.x, x_2821.z, x_2821.w);
        let x_2823 : vec4<f32> = u_xlat11;
        u_xlat11 = vec4<f32>(x_2822.x, x_2823.y, x_2822.y, x_2822.z);
        let x_2825 : vec2<f32> = u_xlat51;
        let x_2828 : vec4<f32> = x_138.x_MainLightShadowmapSize;
        let x_2831 : vec4<f32> = u_xlat11;
        u_xlat12 = ((vec4<f32>(x_2825.x, x_2825.y, x_2825.x, x_2825.y) * vec4<f32>(x_2828.x, x_2828.y, x_2828.x, x_2828.y)) + vec4<f32>(x_2831.x, x_2831.y, x_2831.z, x_2831.y));
        let x_2835 : vec2<f32> = u_xlat51;
        let x_2837 : vec4<f32> = x_138.x_MainLightShadowmapSize;
        let x_2840 : vec4<f32> = u_xlat11;
        u_xlat55 = ((x_2835 * vec2<f32>(x_2837.x, x_2837.y)) + vec2<f32>(x_2840.w, x_2840.y));
        let x_2844 : f32 = u_xlat9.x;
        u_xlat11.x = x_2844;
        let x_2846 : vec2<f32> = u_xlat51;
        let x_2848 : vec4<f32> = x_138.x_MainLightShadowmapSize;
        let x_2851 : vec4<f32> = u_xlat11;
        u_xlat51 = ((x_2846 * vec2<f32>(x_2848.x, x_2848.y)) + vec2<f32>(x_2851.x, x_2851.y));
        let x_2855 : vec4<f32> = u_xlat8;
        let x_2857 : vec4<f32> = u_xlat10;
        u_xlat19 = (vec4<f32>(x_2855.x, x_2855.x, x_2855.x, x_2855.x) * x_2857);
        let x_2860 : vec4<f32> = u_xlat8;
        let x_2862 : vec4<f32> = u_xlat10;
        u_xlat20 = (vec4<f32>(x_2860.y, x_2860.y, x_2860.y, x_2860.y) * x_2862);
        let x_2865 : vec4<f32> = u_xlat8;
        let x_2867 : vec4<f32> = u_xlat10;
        u_xlat21 = (vec4<f32>(x_2865.z, x_2865.z, x_2865.z, x_2865.z) * x_2867);
        let x_2869 : vec4<f32> = u_xlat8;
        let x_2871 : vec4<f32> = u_xlat10;
        u_xlat8 = (vec4<f32>(x_2869.w, x_2869.w, x_2869.w, x_2869.w) * x_2871);
        let x_2874 : vec4<f32> = u_xlat13;
        let x_2875 : vec2<f32> = vec2<f32>(x_2874.x, x_2874.y);
        let x_2877 : f32 = u_xlat4.z;
        txVec43 = vec3<f32>(x_2875.x, x_2875.y, x_2877);
        let x_2884 : vec3<f32> = txVec43;
        let x_2886 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2884.xy, x_2884.z);
        u_xlat9.x = x_2886;
        let x_2889 : vec4<f32> = u_xlat13;
        let x_2890 : vec2<f32> = vec2<f32>(x_2889.z, x_2889.w);
        let x_2892 : f32 = u_xlat4.z;
        txVec44 = vec3<f32>(x_2890.x, x_2890.y, x_2892);
        let x_2900 : vec3<f32> = txVec44;
        let x_2902 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2900.xy, x_2900.z);
        u_xlat75 = x_2902;
        let x_2903 : f32 = u_xlat75;
        let x_2905 : f32 = u_xlat19.y;
        u_xlat75 = (x_2903 * x_2905);
        let x_2908 : f32 = u_xlat19.x;
        let x_2910 : f32 = u_xlat9.x;
        let x_2912 : f32 = u_xlat75;
        u_xlat9.x = ((x_2908 * x_2910) + x_2912);
        let x_2916 : vec4<f32> = u_xlat14;
        let x_2917 : vec2<f32> = vec2<f32>(x_2916.x, x_2916.y);
        let x_2919 : f32 = u_xlat4.z;
        txVec45 = vec3<f32>(x_2917.x, x_2917.y, x_2919);
        let x_2926 : vec3<f32> = txVec45;
        let x_2928 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2926.xy, x_2926.z);
        u_xlat75 = x_2928;
        let x_2930 : f32 = u_xlat19.z;
        let x_2931 : f32 = u_xlat75;
        let x_2934 : f32 = u_xlat9.x;
        u_xlat9.x = ((x_2930 * x_2931) + x_2934);
        let x_2938 : vec4<f32> = u_xlat16;
        let x_2939 : vec2<f32> = vec2<f32>(x_2938.x, x_2938.y);
        let x_2941 : f32 = u_xlat4.z;
        txVec46 = vec3<f32>(x_2939.x, x_2939.y, x_2941);
        let x_2948 : vec3<f32> = txVec46;
        let x_2950 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2948.xy, x_2948.z);
        u_xlat75 = x_2950;
        let x_2952 : f32 = u_xlat19.w;
        let x_2953 : f32 = u_xlat75;
        let x_2956 : f32 = u_xlat9.x;
        u_xlat9.x = ((x_2952 * x_2953) + x_2956);
        let x_2960 : vec4<f32> = u_xlat15;
        let x_2961 : vec2<f32> = vec2<f32>(x_2960.x, x_2960.y);
        let x_2963 : f32 = u_xlat4.z;
        txVec47 = vec3<f32>(x_2961.x, x_2961.y, x_2963);
        let x_2970 : vec3<f32> = txVec47;
        let x_2972 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2970.xy, x_2970.z);
        u_xlat75 = x_2972;
        let x_2974 : f32 = u_xlat20.x;
        let x_2975 : f32 = u_xlat75;
        let x_2978 : f32 = u_xlat9.x;
        u_xlat9.x = ((x_2974 * x_2975) + x_2978);
        let x_2982 : vec4<f32> = u_xlat15;
        let x_2983 : vec2<f32> = vec2<f32>(x_2982.z, x_2982.w);
        let x_2985 : f32 = u_xlat4.z;
        txVec48 = vec3<f32>(x_2983.x, x_2983.y, x_2985);
        let x_2992 : vec3<f32> = txVec48;
        let x_2994 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2992.xy, x_2992.z);
        u_xlat75 = x_2994;
        let x_2996 : f32 = u_xlat20.y;
        let x_2997 : f32 = u_xlat75;
        let x_3000 : f32 = u_xlat9.x;
        u_xlat9.x = ((x_2996 * x_2997) + x_3000);
        let x_3004 : vec2<f32> = u_xlat58;
        let x_3006 : f32 = u_xlat4.z;
        txVec49 = vec3<f32>(x_3004.x, x_3004.y, x_3006);
        let x_3013 : vec3<f32> = txVec49;
        let x_3015 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_3013.xy, x_3013.z);
        u_xlat75 = x_3015;
        let x_3017 : f32 = u_xlat20.z;
        let x_3018 : f32 = u_xlat75;
        let x_3021 : f32 = u_xlat9.x;
        u_xlat9.x = ((x_3017 * x_3018) + x_3021);
        let x_3025 : vec4<f32> = u_xlat16;
        let x_3026 : vec2<f32> = vec2<f32>(x_3025.z, x_3025.w);
        let x_3028 : f32 = u_xlat4.z;
        txVec50 = vec3<f32>(x_3026.x, x_3026.y, x_3028);
        let x_3035 : vec3<f32> = txVec50;
        let x_3037 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_3035.xy, x_3035.z);
        u_xlat75 = x_3037;
        let x_3039 : f32 = u_xlat20.w;
        let x_3040 : f32 = u_xlat75;
        let x_3043 : f32 = u_xlat9.x;
        u_xlat9.x = ((x_3039 * x_3040) + x_3043);
        let x_3047 : vec4<f32> = u_xlat17;
        let x_3048 : vec2<f32> = vec2<f32>(x_3047.x, x_3047.y);
        let x_3050 : f32 = u_xlat4.z;
        txVec51 = vec3<f32>(x_3048.x, x_3048.y, x_3050);
        let x_3057 : vec3<f32> = txVec51;
        let x_3059 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_3057.xy, x_3057.z);
        u_xlat75 = x_3059;
        let x_3061 : f32 = u_xlat21.x;
        let x_3062 : f32 = u_xlat75;
        let x_3065 : f32 = u_xlat9.x;
        u_xlat9.x = ((x_3061 * x_3062) + x_3065);
        let x_3069 : vec4<f32> = u_xlat17;
        let x_3070 : vec2<f32> = vec2<f32>(x_3069.z, x_3069.w);
        let x_3072 : f32 = u_xlat4.z;
        txVec52 = vec3<f32>(x_3070.x, x_3070.y, x_3072);
        let x_3079 : vec3<f32> = txVec52;
        let x_3081 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_3079.xy, x_3079.z);
        u_xlat75 = x_3081;
        let x_3083 : f32 = u_xlat21.y;
        let x_3084 : f32 = u_xlat75;
        let x_3087 : f32 = u_xlat9.x;
        u_xlat9.x = ((x_3083 * x_3084) + x_3087);
        let x_3091 : vec2<f32> = u_xlat31;
        let x_3093 : f32 = u_xlat4.z;
        txVec53 = vec3<f32>(x_3091.x, x_3091.y, x_3093);
        let x_3100 : vec3<f32> = txVec53;
        let x_3102 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_3100.xy, x_3100.z);
        u_xlat31.x = x_3102;
        let x_3105 : f32 = u_xlat21.z;
        let x_3107 : f32 = u_xlat31.x;
        let x_3110 : f32 = u_xlat9.x;
        u_xlat9.x = ((x_3105 * x_3107) + x_3110);
        let x_3114 : vec4<f32> = u_xlat18;
        let x_3115 : vec2<f32> = vec2<f32>(x_3114.x, x_3114.y);
        let x_3117 : f32 = u_xlat4.z;
        txVec54 = vec3<f32>(x_3115.x, x_3115.y, x_3117);
        let x_3124 : vec3<f32> = txVec54;
        let x_3126 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_3124.xy, x_3124.z);
        u_xlat31.x = x_3126;
        let x_3129 : f32 = u_xlat21.w;
        let x_3131 : f32 = u_xlat31.x;
        let x_3134 : f32 = u_xlat9.x;
        u_xlat9.x = ((x_3129 * x_3131) + x_3134);
        let x_3138 : vec4<f32> = u_xlat12;
        let x_3139 : vec2<f32> = vec2<f32>(x_3138.x, x_3138.y);
        let x_3141 : f32 = u_xlat4.z;
        txVec55 = vec3<f32>(x_3139.x, x_3139.y, x_3141);
        let x_3148 : vec3<f32> = txVec55;
        let x_3150 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_3148.xy, x_3148.z);
        u_xlat31.x = x_3150;
        let x_3153 : f32 = u_xlat8.x;
        let x_3155 : f32 = u_xlat31.x;
        let x_3158 : f32 = u_xlat9.x;
        u_xlat8.x = ((x_3153 * x_3155) + x_3158);
        let x_3162 : vec4<f32> = u_xlat12;
        let x_3163 : vec2<f32> = vec2<f32>(x_3162.z, x_3162.w);
        let x_3165 : f32 = u_xlat4.z;
        txVec56 = vec3<f32>(x_3163.x, x_3163.y, x_3165);
        let x_3172 : vec3<f32> = txVec56;
        let x_3174 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_3172.xy, x_3172.z);
        u_xlat9.x = x_3174;
        let x_3177 : f32 = u_xlat8.y;
        let x_3179 : f32 = u_xlat9.x;
        let x_3182 : f32 = u_xlat8.x;
        u_xlat8.x = ((x_3177 * x_3179) + x_3182);
        let x_3186 : vec2<f32> = u_xlat55;
        let x_3188 : f32 = u_xlat4.z;
        txVec57 = vec3<f32>(x_3186.x, x_3186.y, x_3188);
        let x_3196 : vec3<f32> = txVec57;
        let x_3198 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_3196.xy, x_3196.z);
        u_xlat30 = x_3198;
        let x_3200 : f32 = u_xlat8.z;
        let x_3201 : f32 = u_xlat30;
        let x_3204 : f32 = u_xlat8.x;
        u_xlat8.x = ((x_3200 * x_3201) + x_3204);
        let x_3208 : vec2<f32> = u_xlat51;
        let x_3210 : f32 = u_xlat4.z;
        txVec58 = vec3<f32>(x_3208.x, x_3208.y, x_3210);
        let x_3217 : vec3<f32> = txVec58;
        let x_3219 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_3217.xy, x_3217.z);
        u_xlat51.x = x_3219;
        let x_3222 : f32 = u_xlat8.w;
        let x_3224 : f32 = u_xlat51.x;
        let x_3227 : f32 = u_xlat8.x;
        u_xlat66 = ((x_3222 * x_3224) + x_3227);
      }
    }
  } else {
    let x_3231 : vec4<f32> = u_xlat4;
    let x_3232 : vec2<f32> = vec2<f32>(x_3231.x, x_3231.y);
    let x_3234 : f32 = u_xlat4.z;
    txVec59 = vec3<f32>(x_3232.x, x_3232.y, x_3234);
    let x_3241 : vec3<f32> = txVec59;
    let x_3243 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_3241.xy, x_3241.z);
    u_xlat66 = x_3243;
  }
  let x_3244 : f32 = u_xlat66;
  let x_3246 : f32 = x_138.x_MainLightShadowParams.x;
  let x_3248 : f32 = u_xlat70;
  u_xlat66 = ((x_3244 * x_3246) + x_3248);
  let x_3250 : bool = u_xlatb5;
  let x_3251 : f32 = u_xlat66;
  u_xlat66 = select(x_3251, 1.0f, x_3250);
  let x_3253 : vec3<f32> = vs_INTERP0;
  let x_3255 : vec3<f32> = x_66.x_WorldSpaceCameraPos;
  let x_3257 : vec3<f32> = (x_3253 + -(x_3255));
  let x_3258 : vec4<f32> = u_xlat4;
  u_xlat4 = vec4<f32>(x_3257.x, x_3257.y, x_3257.z, x_3258.w);
  let x_3260 : vec4<f32> = u_xlat4;
  let x_3262 : vec4<f32> = u_xlat4;
  u_xlat4.x = dot(vec3<f32>(x_3260.x, x_3260.y, x_3260.z), vec3<f32>(x_3262.x, x_3262.y, x_3262.z));
  let x_3267 : f32 = u_xlat4.x;
  let x_3269 : f32 = x_138.x_MainLightShadowParams.z;
  let x_3272 : f32 = x_138.x_MainLightShadowParams.w;
  u_xlat4.x = ((x_3267 * x_3269) + x_3272);
  let x_3276 : f32 = u_xlat4.x;
  u_xlat4.x = clamp(x_3276, 0.0f, 1.0f);
  let x_3280 : f32 = u_xlat66;
  u_xlat26 = (-(x_3280) + 1.0f);
  let x_3284 : f32 = u_xlat4.x;
  let x_3285 : f32 = u_xlat26;
  let x_3287 : f32 = u_xlat66;
  u_xlat66 = ((x_3284 * x_3285) + x_3287);
  let x_3295 : f32 = x_3293.x_MainLightCookieTextureFormat;
  u_xlatb4.x = !((x_3295 == -1.0f));
  let x_3299 : bool = u_xlatb4.x;
  if (x_3299) {
    let x_3302 : vec3<f32> = vs_INTERP0;
    let x_3305 : vec4<f32> = x_3293.x_MainLightWorldToLight[1i];
    let x_3307 : vec2<f32> = (vec2<f32>(x_3302.y, x_3302.y) * vec2<f32>(x_3305.x, x_3305.y));
    let x_3308 : vec4<f32> = u_xlat4;
    u_xlat4 = vec4<f32>(x_3307.x, x_3307.y, x_3308.z, x_3308.w);
    let x_3311 : vec4<f32> = x_3293.x_MainLightWorldToLight[0i];
    let x_3313 : vec3<f32> = vs_INTERP0;
    let x_3316 : vec4<f32> = u_xlat4;
    let x_3318 : vec2<f32> = ((vec2<f32>(x_3311.x, x_3311.y) * vec2<f32>(x_3313.x, x_3313.x)) + vec2<f32>(x_3316.x, x_3316.y));
    let x_3319 : vec4<f32> = u_xlat4;
    u_xlat4 = vec4<f32>(x_3318.x, x_3318.y, x_3319.z, x_3319.w);
    let x_3322 : vec4<f32> = x_3293.x_MainLightWorldToLight[2i];
    let x_3324 : vec3<f32> = vs_INTERP0;
    let x_3327 : vec4<f32> = u_xlat4;
    let x_3329 : vec2<f32> = ((vec2<f32>(x_3322.x, x_3322.y) * vec2<f32>(x_3324.z, x_3324.z)) + vec2<f32>(x_3327.x, x_3327.y));
    let x_3330 : vec4<f32> = u_xlat4;
    u_xlat4 = vec4<f32>(x_3329.x, x_3329.y, x_3330.z, x_3330.w);
    let x_3332 : vec4<f32> = u_xlat4;
    let x_3335 : vec4<f32> = x_3293.x_MainLightWorldToLight[3i];
    let x_3337 : vec2<f32> = (vec2<f32>(x_3332.x, x_3332.y) + vec2<f32>(x_3335.x, x_3335.y));
    let x_3338 : vec4<f32> = u_xlat4;
    u_xlat4 = vec4<f32>(x_3337.x, x_3337.y, x_3338.z, x_3338.w);
    let x_3340 : vec4<f32> = u_xlat4;
    let x_3343 : vec2<f32> = ((vec2<f32>(x_3340.x, x_3340.y) * vec2<f32>(0.5f, 0.5f)) + vec2<f32>(0.5f, 0.5f));
    let x_3344 : vec4<f32> = u_xlat4;
    u_xlat4 = vec4<f32>(x_3343.x, x_3343.y, x_3344.z, x_3344.w);
    let x_3351 : vec4<f32> = u_xlat4;
    let x_3354 : f32 = x_66.x_GlobalMipBias.x;
    let x_3355 : vec4<f32> = textureSampleBias(x_MainLightCookieTexture, sampler_MainLightCookieTexture, vec2<f32>(x_3351.x, x_3351.y), x_3354);
    u_xlat4 = x_3355;
    let x_3357 : f32 = x_3293.x_MainLightCookieTextureFormat;
    let x_3359 : f32 = x_3293.x_MainLightCookieTextureFormat;
    let x_3361 : f32 = x_3293.x_MainLightCookieTextureFormat;
    let x_3363 : f32 = x_3293.x_MainLightCookieTextureFormat;
    let x_3364 : vec4<f32> = vec4<f32>(x_3357, x_3359, x_3361, x_3363);
    let x_3371 : vec4<bool> = (vec4<f32>(x_3364.x, x_3364.y, x_3364.z, x_3364.w) == vec4<f32>(0.0f, 1.0f, 0.0f, 1.0f));
    u_xlatb51 = vec2<bool>(x_3371.x, x_3371.y);
    let x_3374 : bool = u_xlatb51.y;
    if (x_3374) {
      let x_3379 : f32 = u_xlat4.w;
      x_3375 = x_3379;
    } else {
      let x_3382 : f32 = u_xlat4.x;
      x_3375 = x_3382;
    }
    let x_3383 : f32 = x_3375;
    u_xlat70 = x_3383;
    let x_3385 : bool = u_xlatb51.x;
    if (x_3385) {
      let x_3389 : vec4<f32> = u_xlat4;
      x_3386 = vec3<f32>(x_3389.x, x_3389.y, x_3389.z);
    } else {
      let x_3392 : f32 = u_xlat70;
      x_3386 = vec3<f32>(x_3392, x_3392, x_3392);
    }
    let x_3394 : vec3<f32> = x_3386;
    let x_3395 : vec4<f32> = u_xlat4;
    u_xlat4 = vec4<f32>(x_3394.x, x_3394.y, x_3394.z, x_3395.w);
  } else {
    u_xlat4.x = 1.0f;
    u_xlat4.y = 1.0f;
    u_xlat4.z = 1.0f;
  }
  let x_3401 : vec4<f32> = u_xlat4;
  let x_3404 : vec4<f32> = x_66.x_MainLightColor;
  let x_3406 : vec3<f32> = (vec3<f32>(x_3401.x, x_3401.y, x_3401.z) * vec3<f32>(x_3404.x, x_3404.y, x_3404.z));
  let x_3407 : vec4<f32> = u_xlat4;
  u_xlat4 = vec4<f32>(x_3406.x, x_3406.y, x_3406.z, x_3407.w);
  let x_3409 : vec2<f32> = u_xlat29;
  let x_3411 : vec4<f32> = u_xlat4;
  let x_3413 : vec3<f32> = (vec3<f32>(x_3409.x, x_3409.x, x_3409.x) * vec3<f32>(x_3411.x, x_3411.y, x_3411.z));
  let x_3414 : vec4<f32> = u_xlat4;
  u_xlat4 = vec4<f32>(x_3413.x, x_3413.y, x_3413.z, x_3414.w);
  let x_3416 : vec4<f32> = u_xlat6;
  let x_3419 : vec3<f32> = u_xlat25;
  u_xlat70 = dot(-(vec3<f32>(x_3416.x, x_3416.y, x_3416.z)), x_3419);
  let x_3421 : f32 = u_xlat70;
  let x_3422 : f32 = u_xlat70;
  u_xlat70 = (x_3421 + x_3422);
  let x_3424 : vec3<f32> = u_xlat25;
  let x_3425 : f32 = u_xlat70;
  let x_3429 : vec4<f32> = u_xlat6;
  let x_3432 : vec3<f32> = ((x_3424 * -(vec3<f32>(x_3425, x_3425, x_3425))) + -(vec3<f32>(x_3429.x, x_3429.y, x_3429.z)));
  let x_3433 : vec4<f32> = u_xlat8;
  u_xlat8 = vec4<f32>(x_3432.x, x_3432.y, x_3432.z, x_3433.w);
  let x_3435 : vec3<f32> = u_xlat25;
  let x_3436 : vec4<f32> = u_xlat6;
  u_xlat70 = dot(x_3435, vec3<f32>(x_3436.x, x_3436.y, x_3436.z));
  let x_3439 : f32 = u_xlat70;
  u_xlat70 = clamp(x_3439, 0.0f, 1.0f);
  let x_3441 : f32 = u_xlat70;
  u_xlat70 = (-(x_3441) + 1.0f);
  let x_3444 : f32 = u_xlat70;
  let x_3445 : f32 = u_xlat70;
  u_xlat70 = (x_3444 * x_3445);
  let x_3447 : f32 = u_xlat70;
  let x_3448 : f32 = u_xlat70;
  u_xlat70 = (x_3447 * x_3448);
  let x_3451 : f32 = u_xlat23.x;
  u_xlat5.x = ((-(x_3451) * 0.699999988f) + 1.700000048f);
  let x_3459 : f32 = u_xlat23.x;
  let x_3461 : f32 = u_xlat5.x;
  u_xlat23.x = (x_3459 * x_3461);
  let x_3465 : f32 = u_xlat23.x;
  u_xlat23.x = (x_3465 * 6.0f);
  let x_3477 : vec4<f32> = u_xlat8;
  let x_3480 : f32 = u_xlat23.x;
  let x_3481 : vec4<f32> = textureSampleLevel(unity_SpecCube0, samplerunity_SpecCube0, vec3<f32>(x_3477.x, x_3477.y, x_3477.z), x_3480);
  u_xlat8 = x_3481;
  let x_3483 : f32 = u_xlat8.w;
  u_xlat23.x = (x_3483 + -1.0f);
  let x_3487 : f32 = x_1752.unity_SpecCube0_HDR.w;
  let x_3489 : f32 = u_xlat23.x;
  u_xlat23.x = ((x_3487 * x_3489) + 1.0f);
  let x_3494 : f32 = u_xlat23.x;
  u_xlat23.x = max(x_3494, 0.0f);
  let x_3498 : f32 = u_xlat23.x;
  u_xlat23.x = log2(x_3498);
  let x_3502 : f32 = u_xlat23.x;
  let x_3504 : f32 = x_1752.unity_SpecCube0_HDR.y;
  u_xlat23.x = (x_3502 * x_3504);
  let x_3508 : f32 = u_xlat23.x;
  u_xlat23.x = exp2(x_3508);
  let x_3512 : f32 = u_xlat23.x;
  let x_3514 : f32 = x_1752.unity_SpecCube0_HDR.x;
  u_xlat23.x = (x_3512 * x_3514);
  let x_3517 : vec4<f32> = u_xlat8;
  let x_3519 : vec3<f32> = u_xlat23;
  let x_3521 : vec3<f32> = (vec3<f32>(x_3517.x, x_3517.y, x_3517.z) * vec3<f32>(x_3519.x, x_3519.x, x_3519.x));
  let x_3522 : vec4<f32> = u_xlat8;
  u_xlat8 = vec4<f32>(x_3521.x, x_3521.y, x_3521.z, x_3522.w);
  let x_3524 : f32 = u_xlat67;
  let x_3526 : f32 = u_xlat67;
  let x_3530 : vec2<f32> = ((vec2<f32>(x_3524, x_3524) * vec2<f32>(x_3526, x_3526)) + vec2<f32>(-1.0f, 1.0f));
  let x_3531 : vec3<f32> = u_xlat23;
  u_xlat23 = vec3<f32>(x_3530.x, x_3531.y, x_3530.y);
  let x_3534 : f32 = u_xlat23.z;
  u_xlat67 = (1.0f / x_3534);
  let x_3537 : f32 = u_xlat3.x;
  u_xlat3.x = (x_3537 + -0.039999999f);
  let x_3541 : f32 = u_xlat70;
  let x_3543 : f32 = u_xlat3.x;
  u_xlat3.x = ((x_3541 * x_3543) + 0.039999999f);
  let x_3548 : f32 = u_xlat67;
  let x_3550 : f32 = u_xlat3.x;
  u_xlat67 = (x_3548 * x_3550);
  let x_3552 : f32 = u_xlat67;
  let x_3554 : vec4<f32> = u_xlat8;
  let x_3556 : vec3<f32> = (vec3<f32>(x_3552, x_3552, x_3552) * vec3<f32>(x_3554.x, x_3554.y, x_3554.z));
  let x_3557 : vec4<f32> = u_xlat8;
  u_xlat8 = vec4<f32>(x_3556.x, x_3556.y, x_3556.z, x_3557.w);
  let x_3559 : vec3<f32> = u_xlat27;
  let x_3560 : vec3<f32> = u_xlat2;
  let x_3562 : vec4<f32> = u_xlat8;
  let x_3564 : vec3<f32> = ((x_3559 * x_3560) + vec3<f32>(x_3562.x, x_3562.y, x_3562.z));
  let x_3565 : vec4<f32> = u_xlat5;
  u_xlat5 = vec4<f32>(x_3564.x, x_3564.y, x_3564.z, x_3565.w);
  let x_3567 : f32 = u_xlat66;
  let x_3569 : f32 = x_1752.unity_LightData.z;
  u_xlat66 = (x_3567 * x_3569);
  let x_3571 : vec3<f32> = u_xlat25;
  let x_3573 : vec4<f32> = x_66.x_MainLightPosition;
  u_xlat67 = dot(x_3571, vec3<f32>(x_3573.x, x_3573.y, x_3573.z));
  let x_3576 : f32 = u_xlat67;
  u_xlat67 = clamp(x_3576, 0.0f, 1.0f);
  let x_3578 : f32 = u_xlat66;
  let x_3579 : f32 = u_xlat67;
  u_xlat66 = (x_3578 * x_3579);
  let x_3581 : f32 = u_xlat66;
  let x_3583 : vec4<f32> = u_xlat4;
  let x_3585 : vec3<f32> = (vec3<f32>(x_3581, x_3581, x_3581) * vec3<f32>(x_3583.x, x_3583.y, x_3583.z));
  let x_3586 : vec4<f32> = u_xlat4;
  u_xlat4 = vec4<f32>(x_3585.x, x_3585.y, x_3585.z, x_3586.w);
  let x_3588 : vec4<f32> = u_xlat6;
  let x_3591 : vec4<f32> = x_66.x_MainLightPosition;
  let x_3593 : vec3<f32> = (vec3<f32>(x_3588.x, x_3588.y, x_3588.z) + vec3<f32>(x_3591.x, x_3591.y, x_3591.z));
  let x_3594 : vec4<f32> = u_xlat8;
  u_xlat8 = vec4<f32>(x_3593.x, x_3593.y, x_3593.z, x_3594.w);
  let x_3596 : vec4<f32> = u_xlat8;
  let x_3598 : vec4<f32> = u_xlat8;
  u_xlat66 = dot(vec3<f32>(x_3596.x, x_3596.y, x_3596.z), vec3<f32>(x_3598.x, x_3598.y, x_3598.z));
  let x_3601 : f32 = u_xlat66;
  u_xlat66 = max(x_3601, 1.17549435e-37f);
  let x_3604 : f32 = u_xlat66;
  u_xlat66 = inverseSqrt(x_3604);
  let x_3606 : f32 = u_xlat66;
  let x_3608 : vec4<f32> = u_xlat8;
  let x_3610 : vec3<f32> = (vec3<f32>(x_3606, x_3606, x_3606) * vec3<f32>(x_3608.x, x_3608.y, x_3608.z));
  let x_3611 : vec4<f32> = u_xlat8;
  u_xlat8 = vec4<f32>(x_3610.x, x_3610.y, x_3610.z, x_3611.w);
  let x_3613 : vec3<f32> = u_xlat25;
  let x_3614 : vec4<f32> = u_xlat8;
  u_xlat66 = dot(x_3613, vec3<f32>(x_3614.x, x_3614.y, x_3614.z));
  let x_3617 : f32 = u_xlat66;
  u_xlat66 = clamp(x_3617, 0.0f, 1.0f);
  let x_3620 : vec4<f32> = x_66.x_MainLightPosition;
  let x_3622 : vec4<f32> = u_xlat8;
  u_xlat67 = dot(vec3<f32>(x_3620.x, x_3620.y, x_3620.z), vec3<f32>(x_3622.x, x_3622.y, x_3622.z));
  let x_3625 : f32 = u_xlat67;
  u_xlat67 = clamp(x_3625, 0.0f, 1.0f);
  let x_3627 : f32 = u_xlat66;
  let x_3628 : f32 = u_xlat66;
  u_xlat66 = (x_3627 * x_3628);
  let x_3630 : f32 = u_xlat66;
  let x_3632 : f32 = u_xlat23.x;
  u_xlat66 = ((x_3630 * x_3632) + 1.000010014f);
  let x_3636 : f32 = u_xlat67;
  let x_3637 : f32 = u_xlat67;
  u_xlat67 = (x_3636 * x_3637);
  let x_3639 : f32 = u_xlat66;
  let x_3640 : f32 = u_xlat66;
  u_xlat66 = (x_3639 * x_3640);
  let x_3642 : f32 = u_xlat67;
  u_xlat67 = max(x_3642, 0.100000001f);
  let x_3645 : f32 = u_xlat66;
  let x_3646 : f32 = u_xlat67;
  u_xlat66 = (x_3645 * x_3646);
  let x_3648 : f32 = u_xlat72;
  let x_3649 : f32 = u_xlat66;
  u_xlat66 = (x_3648 * x_3649);
  let x_3651 : f32 = u_xlat68;
  let x_3652 : f32 = u_xlat66;
  u_xlat66 = (x_3651 / x_3652);
  let x_3654 : f32 = u_xlat66;
  let x_3658 : vec3<f32> = u_xlat2;
  let x_3659 : vec3<f32> = ((vec3<f32>(x_3654, x_3654, x_3654) * vec3<f32>(0.039999999f, 0.039999999f, 0.039999999f)) + x_3658);
  let x_3660 : vec4<f32> = u_xlat8;
  u_xlat8 = vec4<f32>(x_3659.x, x_3659.y, x_3659.z, x_3660.w);
  let x_3662 : vec4<f32> = u_xlat4;
  let x_3664 : vec4<f32> = u_xlat8;
  let x_3666 : vec3<f32> = (vec3<f32>(x_3662.x, x_3662.y, x_3662.z) * vec3<f32>(x_3664.x, x_3664.y, x_3664.z));
  let x_3667 : vec4<f32> = u_xlat4;
  u_xlat4 = vec4<f32>(x_3666.x, x_3666.y, x_3666.z, x_3667.w);
  let x_3670 : f32 = x_66.x_AdditionalLightsCount.x;
  let x_3672 : f32 = x_1752.unity_LightData.y;
  u_xlat66 = min(x_3670, x_3672);
  let x_3674 : f32 = u_xlat66;
  u_xlatu66 = bitcast<u32>(i32(x_3674));
  let x_3678 : f32 = x_3293.x_AdditionalLightsCookieAtlasTextureFormat;
  let x_3680 : f32 = x_3293.x_AdditionalLightsCookieAtlasTextureFormat;
  let x_3682 : f32 = x_3293.x_AdditionalLightsCookieAtlasTextureFormat;
  let x_3684 : f32 = x_3293.x_AdditionalLightsCookieAtlasTextureFormat;
  let x_3685 : vec4<f32> = vec4<f32>(x_3678, x_3680, x_3682, x_3684);
  let x_3691 : vec4<bool> = (vec4<f32>(x_3685.x, x_3685.y, x_3685.z, x_3685.w) == vec4<f32>(0.0f, 1.0f, 0.0f, 1.0f));
  u_xlatb51 = vec2<bool>(x_3691.x, x_3691.y);
  u_xlat8.x = 0.0f;
  u_xlat8.y = 0.0f;
  u_xlat8.z = 0.0f;
  u_xlatu_loop_1 = 0u;
  loop {
    let x_3702 : u32 = u_xlatu_loop_1;
    let x_3703 : u32 = u_xlatu66;
    if ((x_3702 < x_3703)) {
    } else {
      break;
    }
    let x_3706 : u32 = u_xlatu_loop_1;
    u_xlatu3 = (x_3706 >> 2u);
    let x_3709 : u32 = u_xlatu_loop_1;
    u_xlati70 = bitcast<i32>((x_3709 & 3u));
    let x_3712 : u32 = u_xlatu3;
    let x_3715 : vec4<f32> = x_1752.unity_LightIndices[bitcast<i32>(x_3712)];
    let x_3725 : i32 = u_xlati70;
    indexable = array<vec4<u32>, 4u>(vec4<u32>(1065353216u, 0u, 0u, 0u), vec4<u32>(0u, 1065353216u, 0u, 0u), vec4<u32>(0u, 0u, 1065353216u, 0u), vec4<u32>(0u, 0u, 0u, 1065353216u));
    let x_3730 : vec4<u32> = indexable[x_3725];
    u_xlat3.x = dot(x_3715, bitcast<vec4<f32>>(x_3730));
    let x_3735 : f32 = u_xlat3.x;
    u_xlatu3 = bitcast<u32>(i32(x_3735));
    let x_3738 : vec3<f32> = vs_INTERP0;
    let x_3750 : u32 = u_xlatu3;
    let x_3753 : vec4<f32> = x_3749.x_AdditionalLightsPosition[bitcast<i32>(x_3750)];
    let x_3756 : u32 = u_xlatu3;
    let x_3759 : vec4<f32> = x_3749.x_AdditionalLightsPosition[bitcast<i32>(x_3756)];
    let x_3761 : vec3<f32> = ((-(x_3738) * vec3<f32>(x_3753.w, x_3753.w, x_3753.w)) + vec3<f32>(x_3759.x, x_3759.y, x_3759.z));
    let x_3762 : vec4<f32> = u_xlat9;
    u_xlat9 = vec4<f32>(x_3761.x, x_3761.y, x_3761.z, x_3762.w);
    let x_3764 : vec4<f32> = u_xlat9;
    let x_3766 : vec4<f32> = u_xlat9;
    u_xlat70 = dot(vec3<f32>(x_3764.x, x_3764.y, x_3764.z), vec3<f32>(x_3766.x, x_3766.y, x_3766.z));
    let x_3769 : f32 = u_xlat70;
    u_xlat70 = max(x_3769, 6.10351562e-05f);
    let x_3773 : f32 = u_xlat70;
    u_xlat71 = inverseSqrt(x_3773);
    let x_3775 : f32 = u_xlat71;
    let x_3777 : vec4<f32> = u_xlat9;
    let x_3779 : vec3<f32> = (vec3<f32>(x_3775, x_3775, x_3775) * vec3<f32>(x_3777.x, x_3777.y, x_3777.z));
    let x_3780 : vec4<f32> = u_xlat10;
    u_xlat10 = vec4<f32>(x_3779.x, x_3779.y, x_3779.z, x_3780.w);
    let x_3783 : f32 = u_xlat70;
    u_xlat74 = (1.0f / x_3783);
    let x_3785 : f32 = u_xlat70;
    let x_3786 : u32 = u_xlatu3;
    let x_3789 : f32 = x_3749.x_AdditionalLightsAttenuation[bitcast<i32>(x_3786)].x;
    u_xlat70 = (x_3785 * x_3789);
    let x_3791 : f32 = u_xlat70;
    let x_3793 : f32 = u_xlat70;
    u_xlat70 = ((-(x_3791) * x_3793) + 1.0f);
    let x_3796 : f32 = u_xlat70;
    u_xlat70 = max(x_3796, 0.0f);
    let x_3798 : f32 = u_xlat70;
    let x_3799 : f32 = u_xlat70;
    u_xlat70 = (x_3798 * x_3799);
    let x_3801 : f32 = u_xlat70;
    let x_3802 : f32 = u_xlat74;
    u_xlat70 = (x_3801 * x_3802);
    let x_3804 : u32 = u_xlatu3;
    let x_3807 : vec4<f32> = x_3749.x_AdditionalLightsSpotDir[bitcast<i32>(x_3804)];
    let x_3809 : vec4<f32> = u_xlat10;
    u_xlat74 = dot(vec3<f32>(x_3807.x, x_3807.y, x_3807.z), vec3<f32>(x_3809.x, x_3809.y, x_3809.z));
    let x_3812 : f32 = u_xlat74;
    let x_3813 : u32 = u_xlatu3;
    let x_3816 : f32 = x_3749.x_AdditionalLightsAttenuation[bitcast<i32>(x_3813)].z;
    let x_3818 : u32 = u_xlatu3;
    let x_3821 : f32 = x_3749.x_AdditionalLightsAttenuation[bitcast<i32>(x_3818)].w;
    u_xlat74 = ((x_3812 * x_3816) + x_3821);
    let x_3823 : f32 = u_xlat74;
    u_xlat74 = clamp(x_3823, 0.0f, 1.0f);
    let x_3825 : f32 = u_xlat74;
    let x_3826 : f32 = u_xlat74;
    u_xlat74 = (x_3825 * x_3826);
    let x_3828 : f32 = u_xlat70;
    let x_3829 : f32 = u_xlat74;
    u_xlat70 = (x_3828 * x_3829);
    let x_3832 : u32 = u_xlatu3;
    u_xlatu74 = (x_3832 >> 5u);
    let x_3835 : u32 = u_xlatu3;
    u_xlati75 = (1i << bitcast<u32>((bitcast<i32>(x_3835) & 31i)));
    let x_3841 : i32 = u_xlati75;
    let x_3843 : u32 = u_xlatu74;
    let x_3846 : f32 = x_3293.x_AdditionalLightsCookieEnableBits[bitcast<i32>(x_3843)].el;
    u_xlati74 = bitcast<i32>((bitcast<u32>(x_3841) & bitcast<u32>(x_3846)));
    let x_3850 : i32 = u_xlati74;
    if ((x_3850 != 0i)) {
      let x_3860 : u32 = u_xlatu3;
      let x_3863 : f32 = x_3859.x_AdditionalLightsLightTypes[bitcast<i32>(x_3860)].el;
      u_xlati74 = i32(x_3863);
      let x_3865 : i32 = u_xlati74;
      u_xlati75 = select(1i, 0i, (x_3865 != 0i));
      let x_3869 : u32 = u_xlatu3;
      u_xlati76 = (bitcast<i32>(x_3869) << bitcast<u32>(2i));
      let x_3872 : i32 = u_xlati75;
      if ((x_3872 != 0i)) {
        let x_3876 : vec3<f32> = vs_INTERP0;
        let x_3878 : i32 = u_xlati76;
        let x_3881 : i32 = u_xlati76;
        let x_3885 : vec4<f32> = x_3859.x_AdditionalLightsWorldToLights[((x_3878 + 1i) / 4i)][((x_3881 + 1i) % 4i)];
        let x_3887 : vec3<f32> = (vec3<f32>(x_3876.y, x_3876.y, x_3876.y) * vec3<f32>(x_3885.x, x_3885.y, x_3885.w));
        let x_3888 : vec4<f32> = u_xlat11;
        u_xlat11 = vec4<f32>(x_3887.x, x_3887.y, x_3887.z, x_3888.w);
        let x_3890 : i32 = u_xlati76;
        let x_3892 : i32 = u_xlati76;
        let x_3895 : vec4<f32> = x_3859.x_AdditionalLightsWorldToLights[(x_3890 / 4i)][(x_3892 % 4i)];
        let x_3897 : vec3<f32> = vs_INTERP0;
        let x_3900 : vec4<f32> = u_xlat11;
        let x_3902 : vec3<f32> = ((vec3<f32>(x_3895.x, x_3895.y, x_3895.w) * vec3<f32>(x_3897.x, x_3897.x, x_3897.x)) + vec3<f32>(x_3900.x, x_3900.y, x_3900.z));
        let x_3903 : vec4<f32> = u_xlat11;
        u_xlat11 = vec4<f32>(x_3902.x, x_3902.y, x_3902.z, x_3903.w);
        let x_3905 : i32 = u_xlati76;
        let x_3908 : i32 = u_xlati76;
        let x_3912 : vec4<f32> = x_3859.x_AdditionalLightsWorldToLights[((x_3905 + 2i) / 4i)][((x_3908 + 2i) % 4i)];
        let x_3914 : vec3<f32> = vs_INTERP0;
        let x_3917 : vec4<f32> = u_xlat11;
        let x_3919 : vec3<f32> = ((vec3<f32>(x_3912.x, x_3912.y, x_3912.w) * vec3<f32>(x_3914.z, x_3914.z, x_3914.z)) + vec3<f32>(x_3917.x, x_3917.y, x_3917.z));
        let x_3920 : vec4<f32> = u_xlat11;
        u_xlat11 = vec4<f32>(x_3919.x, x_3919.y, x_3919.z, x_3920.w);
        let x_3922 : vec4<f32> = u_xlat11;
        let x_3924 : i32 = u_xlati76;
        let x_3927 : i32 = u_xlati76;
        let x_3931 : vec4<f32> = x_3859.x_AdditionalLightsWorldToLights[((x_3924 + 3i) / 4i)][((x_3927 + 3i) % 4i)];
        let x_3933 : vec3<f32> = (vec3<f32>(x_3922.x, x_3922.y, x_3922.z) + vec3<f32>(x_3931.x, x_3931.y, x_3931.w));
        let x_3934 : vec4<f32> = u_xlat11;
        u_xlat11 = vec4<f32>(x_3933.x, x_3933.y, x_3933.z, x_3934.w);
        let x_3936 : vec4<f32> = u_xlat11;
        let x_3938 : vec4<f32> = u_xlat11;
        let x_3940 : vec2<f32> = (vec2<f32>(x_3936.x, x_3936.y) / vec2<f32>(x_3938.z, x_3938.z));
        let x_3941 : vec4<f32> = u_xlat11;
        u_xlat11 = vec4<f32>(x_3940.x, x_3940.y, x_3941.z, x_3941.w);
        let x_3943 : vec4<f32> = u_xlat11;
        let x_3946 : vec2<f32> = ((vec2<f32>(x_3943.x, x_3943.y) * vec2<f32>(0.5f, 0.5f)) + vec2<f32>(0.5f, 0.5f));
        let x_3947 : vec4<f32> = u_xlat11;
        u_xlat11 = vec4<f32>(x_3946.x, x_3946.y, x_3947.z, x_3947.w);
        let x_3949 : vec4<f32> = u_xlat11;
        let x_3953 : vec2<f32> = clamp(vec2<f32>(x_3949.x, x_3949.y), vec2<f32>(0.0f, 0.0f), vec2<f32>(1.0f, 1.0f));
        let x_3954 : vec4<f32> = u_xlat11;
        u_xlat11 = vec4<f32>(x_3953.x, x_3953.y, x_3954.z, x_3954.w);
        let x_3956 : u32 = u_xlatu3;
        let x_3959 : vec4<f32> = x_3859.x_AdditionalLightsCookieAtlasUVRects[bitcast<i32>(x_3956)];
        let x_3961 : vec4<f32> = u_xlat11;
        let x_3964 : u32 = u_xlatu3;
        let x_3967 : vec4<f32> = x_3859.x_AdditionalLightsCookieAtlasUVRects[bitcast<i32>(x_3964)];
        let x_3969 : vec2<f32> = ((vec2<f32>(x_3959.x, x_3959.y) * vec2<f32>(x_3961.x, x_3961.y)) + vec2<f32>(x_3967.z, x_3967.w));
        let x_3970 : vec4<f32> = u_xlat11;
        u_xlat11 = vec4<f32>(x_3969.x, x_3969.y, x_3970.z, x_3970.w);
      } else {
        let x_3974 : i32 = u_xlati74;
        u_xlatb74 = (x_3974 == 1i);
        let x_3976 : bool = u_xlatb74;
        u_xlati74 = select(0i, 1i, x_3976);
        let x_3978 : i32 = u_xlati74;
        if ((x_3978 != 0i)) {
          let x_3982 : vec3<f32> = vs_INTERP0;
          let x_3984 : i32 = u_xlati76;
          let x_3987 : i32 = u_xlati76;
          let x_3991 : vec4<f32> = x_3859.x_AdditionalLightsWorldToLights[((x_3984 + 1i) / 4i)][((x_3987 + 1i) % 4i)];
          u_xlat55 = (vec2<f32>(x_3982.y, x_3982.y) * vec2<f32>(x_3991.x, x_3991.y));
          let x_3994 : i32 = u_xlati76;
          let x_3996 : i32 = u_xlati76;
          let x_3999 : vec4<f32> = x_3859.x_AdditionalLightsWorldToLights[(x_3994 / 4i)][(x_3996 % 4i)];
          let x_4001 : vec3<f32> = vs_INTERP0;
          let x_4004 : vec2<f32> = u_xlat55;
          u_xlat55 = ((vec2<f32>(x_3999.x, x_3999.y) * vec2<f32>(x_4001.x, x_4001.x)) + x_4004);
          let x_4006 : i32 = u_xlati76;
          let x_4009 : i32 = u_xlati76;
          let x_4013 : vec4<f32> = x_3859.x_AdditionalLightsWorldToLights[((x_4006 + 2i) / 4i)][((x_4009 + 2i) % 4i)];
          let x_4015 : vec3<f32> = vs_INTERP0;
          let x_4018 : vec2<f32> = u_xlat55;
          u_xlat55 = ((vec2<f32>(x_4013.x, x_4013.y) * vec2<f32>(x_4015.z, x_4015.z)) + x_4018);
          let x_4020 : vec2<f32> = u_xlat55;
          let x_4021 : i32 = u_xlati76;
          let x_4024 : i32 = u_xlati76;
          let x_4028 : vec4<f32> = x_3859.x_AdditionalLightsWorldToLights[((x_4021 + 3i) / 4i)][((x_4024 + 3i) % 4i)];
          u_xlat55 = (x_4020 + vec2<f32>(x_4028.x, x_4028.y));
          let x_4031 : vec2<f32> = u_xlat55;
          u_xlat55 = ((x_4031 * vec2<f32>(0.5f, 0.5f)) + vec2<f32>(0.5f, 0.5f));
          let x_4034 : vec2<f32> = u_xlat55;
          u_xlat55 = fract(x_4034);
          let x_4036 : u32 = u_xlatu3;
          let x_4039 : vec4<f32> = x_3859.x_AdditionalLightsCookieAtlasUVRects[bitcast<i32>(x_4036)];
          let x_4041 : vec2<f32> = u_xlat55;
          let x_4043 : u32 = u_xlatu3;
          let x_4046 : vec4<f32> = x_3859.x_AdditionalLightsCookieAtlasUVRects[bitcast<i32>(x_4043)];
          let x_4048 : vec2<f32> = ((vec2<f32>(x_4039.x, x_4039.y) * x_4041) + vec2<f32>(x_4046.z, x_4046.w));
          let x_4049 : vec4<f32> = u_xlat11;
          u_xlat11 = vec4<f32>(x_4048.x, x_4048.y, x_4049.z, x_4049.w);
        } else {
          let x_4052 : vec3<f32> = vs_INTERP0;
          let x_4054 : i32 = u_xlati76;
          let x_4057 : i32 = u_xlati76;
          let x_4061 : vec4<f32> = x_3859.x_AdditionalLightsWorldToLights[((x_4054 + 1i) / 4i)][((x_4057 + 1i) % 4i)];
          u_xlat12 = (vec4<f32>(x_4052.y, x_4052.y, x_4052.y, x_4052.y) * x_4061);
          let x_4063 : i32 = u_xlati76;
          let x_4065 : i32 = u_xlati76;
          let x_4068 : vec4<f32> = x_3859.x_AdditionalLightsWorldToLights[(x_4063 / 4i)][(x_4065 % 4i)];
          let x_4069 : vec3<f32> = vs_INTERP0;
          let x_4072 : vec4<f32> = u_xlat12;
          u_xlat12 = ((x_4068 * vec4<f32>(x_4069.x, x_4069.x, x_4069.x, x_4069.x)) + x_4072);
          let x_4074 : i32 = u_xlati76;
          let x_4077 : i32 = u_xlati76;
          let x_4081 : vec4<f32> = x_3859.x_AdditionalLightsWorldToLights[((x_4074 + 2i) / 4i)][((x_4077 + 2i) % 4i)];
          let x_4082 : vec3<f32> = vs_INTERP0;
          let x_4085 : vec4<f32> = u_xlat12;
          u_xlat12 = ((x_4081 * vec4<f32>(x_4082.z, x_4082.z, x_4082.z, x_4082.z)) + x_4085);
          let x_4087 : vec4<f32> = u_xlat12;
          let x_4088 : i32 = u_xlati76;
          let x_4091 : i32 = u_xlati76;
          let x_4095 : vec4<f32> = x_3859.x_AdditionalLightsWorldToLights[((x_4088 + 3i) / 4i)][((x_4091 + 3i) % 4i)];
          u_xlat12 = (x_4087 + x_4095);
          let x_4097 : vec4<f32> = u_xlat12;
          let x_4099 : vec4<f32> = u_xlat12;
          let x_4101 : vec3<f32> = (vec3<f32>(x_4097.x, x_4097.y, x_4097.z) / vec3<f32>(x_4099.w, x_4099.w, x_4099.w));
          let x_4102 : vec4<f32> = u_xlat12;
          u_xlat12 = vec4<f32>(x_4101.x, x_4101.y, x_4101.z, x_4102.w);
          let x_4104 : vec4<f32> = u_xlat12;
          let x_4106 : vec4<f32> = u_xlat12;
          u_xlat74 = dot(vec3<f32>(x_4104.x, x_4104.y, x_4104.z), vec3<f32>(x_4106.x, x_4106.y, x_4106.z));
          let x_4109 : f32 = u_xlat74;
          u_xlat74 = inverseSqrt(x_4109);
          let x_4111 : f32 = u_xlat74;
          let x_4113 : vec4<f32> = u_xlat12;
          let x_4115 : vec3<f32> = (vec3<f32>(x_4111, x_4111, x_4111) * vec3<f32>(x_4113.x, x_4113.y, x_4113.z));
          let x_4116 : vec4<f32> = u_xlat12;
          u_xlat12 = vec4<f32>(x_4115.x, x_4115.y, x_4115.z, x_4116.w);
          let x_4118 : vec4<f32> = u_xlat12;
          u_xlat74 = dot(abs(vec3<f32>(x_4118.x, x_4118.y, x_4118.z)), vec3<f32>(1.0f, 1.0f, 1.0f));
          let x_4123 : f32 = u_xlat74;
          u_xlat74 = max(x_4123, 0.000001f);
          let x_4126 : f32 = u_xlat74;
          u_xlat74 = (1.0f / x_4126);
          let x_4128 : f32 = u_xlat74;
          let x_4130 : vec4<f32> = u_xlat12;
          let x_4132 : vec3<f32> = (vec3<f32>(x_4128, x_4128, x_4128) * vec3<f32>(x_4130.z, x_4130.x, x_4130.y));
          let x_4133 : vec4<f32> = u_xlat13;
          u_xlat13 = vec4<f32>(x_4132.x, x_4132.y, x_4132.z, x_4133.w);
          let x_4136 : f32 = u_xlat13.x;
          u_xlat13.x = -(x_4136);
          let x_4140 : f32 = u_xlat13.x;
          u_xlat13.x = clamp(x_4140, 0.0f, 1.0f);
          let x_4144 : vec4<f32> = u_xlat13;
          let x_4147 : vec4<bool> = (vec4<f32>(x_4144.y, x_4144.z, x_4144.y, x_4144.z) >= vec4<f32>(0.0f, 0.0f, 0.0f, 0.0f));
          u_xlatb55 = vec2<bool>(x_4147.x, x_4147.y);
          let x_4150 : bool = u_xlatb55.x;
          if (x_4150) {
            let x_4155 : f32 = u_xlat13.x;
            x_4151 = x_4155;
          } else {
            let x_4158 : f32 = u_xlat13.x;
            x_4151 = -(x_4158);
          }
          let x_4160 : f32 = x_4151;
          u_xlat55.x = x_4160;
          let x_4163 : bool = u_xlatb55.y;
          if (x_4163) {
            let x_4168 : f32 = u_xlat13.x;
            x_4164 = x_4168;
          } else {
            let x_4171 : f32 = u_xlat13.x;
            x_4164 = -(x_4171);
          }
          let x_4173 : f32 = x_4164;
          u_xlat55.y = x_4173;
          let x_4175 : vec4<f32> = u_xlat12;
          let x_4177 : f32 = u_xlat74;
          let x_4180 : vec2<f32> = u_xlat55;
          u_xlat55 = ((vec2<f32>(x_4175.x, x_4175.y) * vec2<f32>(x_4177, x_4177)) + x_4180);
          let x_4182 : vec2<f32> = u_xlat55;
          u_xlat55 = ((x_4182 * vec2<f32>(0.5f, 0.5f)) + vec2<f32>(0.5f, 0.5f));
          let x_4185 : vec2<f32> = u_xlat55;
          u_xlat55 = clamp(x_4185, vec2<f32>(0.0f, 0.0f), vec2<f32>(1.0f, 1.0f));
          let x_4189 : u32 = u_xlatu3;
          let x_4192 : vec4<f32> = x_3859.x_AdditionalLightsCookieAtlasUVRects[bitcast<i32>(x_4189)];
          let x_4194 : vec2<f32> = u_xlat55;
          let x_4196 : u32 = u_xlatu3;
          let x_4199 : vec4<f32> = x_3859.x_AdditionalLightsCookieAtlasUVRects[bitcast<i32>(x_4196)];
          let x_4201 : vec2<f32> = ((vec2<f32>(x_4192.x, x_4192.y) * x_4194) + vec2<f32>(x_4199.z, x_4199.w));
          let x_4202 : vec4<f32> = u_xlat11;
          u_xlat11 = vec4<f32>(x_4201.x, x_4201.y, x_4202.z, x_4202.w);
        }
      }
      let x_4209 : vec4<f32> = u_xlat11;
      let x_4212 : f32 = x_66.x_GlobalMipBias.x;
      let x_4213 : vec4<f32> = textureSampleBias(x_AdditionalLightsCookieAtlasTexture, sampler_AdditionalLightsCookieAtlasTexture, vec2<f32>(x_4209.x, x_4209.y), x_4212);
      u_xlat11 = x_4213;
      let x_4215 : bool = u_xlatb51.y;
      if (x_4215) {
        let x_4220 : f32 = u_xlat11.w;
        x_4216 = x_4220;
      } else {
        let x_4223 : f32 = u_xlat11.x;
        x_4216 = x_4223;
      }
      let x_4224 : f32 = x_4216;
      u_xlat74 = x_4224;
      let x_4226 : bool = u_xlatb51.x;
      if (x_4226) {
        let x_4230 : vec4<f32> = u_xlat11;
        x_4227 = vec3<f32>(x_4230.x, x_4230.y, x_4230.z);
      } else {
        let x_4233 : f32 = u_xlat74;
        x_4227 = vec3<f32>(x_4233, x_4233, x_4233);
      }
      let x_4235 : vec3<f32> = x_4227;
      let x_4236 : vec4<f32> = u_xlat11;
      u_xlat11 = vec4<f32>(x_4235.x, x_4235.y, x_4235.z, x_4236.w);
    } else {
      u_xlat11.x = 1.0f;
      u_xlat11.y = 1.0f;
      u_xlat11.z = 1.0f;
    }
    let x_4242 : vec4<f32> = u_xlat11;
    let x_4244 : u32 = u_xlatu3;
    let x_4247 : vec4<f32> = x_3749.x_AdditionalLightsColor[bitcast<i32>(x_4244)];
    let x_4249 : vec3<f32> = (vec3<f32>(x_4242.x, x_4242.y, x_4242.z) * vec3<f32>(x_4247.x, x_4247.y, x_4247.z));
    let x_4250 : vec4<f32> = u_xlat11;
    u_xlat11 = vec4<f32>(x_4249.x, x_4249.y, x_4249.z, x_4250.w);
    let x_4252 : vec2<f32> = u_xlat29;
    let x_4254 : vec4<f32> = u_xlat11;
    let x_4256 : vec3<f32> = (vec3<f32>(x_4252.x, x_4252.x, x_4252.x) * vec3<f32>(x_4254.x, x_4254.y, x_4254.z));
    let x_4257 : vec4<f32> = u_xlat11;
    u_xlat11 = vec4<f32>(x_4256.x, x_4256.y, x_4256.z, x_4257.w);
    let x_4259 : vec3<f32> = u_xlat25;
    let x_4260 : vec4<f32> = u_xlat10;
    u_xlat3.x = dot(x_4259, vec3<f32>(x_4260.x, x_4260.y, x_4260.z));
    let x_4265 : f32 = u_xlat3.x;
    u_xlat3.x = clamp(x_4265, 0.0f, 1.0f);
    let x_4269 : f32 = u_xlat3.x;
    let x_4270 : f32 = u_xlat70;
    u_xlat3.x = (x_4269 * x_4270);
    let x_4273 : vec4<f32> = u_xlat3;
    let x_4275 : vec4<f32> = u_xlat11;
    let x_4277 : vec3<f32> = (vec3<f32>(x_4273.x, x_4273.x, x_4273.x) * vec3<f32>(x_4275.x, x_4275.y, x_4275.z));
    let x_4278 : vec4<f32> = u_xlat11;
    u_xlat11 = vec4<f32>(x_4277.x, x_4277.y, x_4277.z, x_4278.w);
    let x_4280 : vec4<f32> = u_xlat9;
    let x_4282 : f32 = u_xlat71;
    let x_4285 : vec4<f32> = u_xlat6;
    let x_4287 : vec3<f32> = ((vec3<f32>(x_4280.x, x_4280.y, x_4280.z) * vec3<f32>(x_4282, x_4282, x_4282)) + vec3<f32>(x_4285.x, x_4285.y, x_4285.z));
    let x_4288 : vec4<f32> = u_xlat9;
    u_xlat9 = vec4<f32>(x_4287.x, x_4287.y, x_4287.z, x_4288.w);
    let x_4290 : vec4<f32> = u_xlat9;
    let x_4292 : vec4<f32> = u_xlat9;
    u_xlat3.x = dot(vec3<f32>(x_4290.x, x_4290.y, x_4290.z), vec3<f32>(x_4292.x, x_4292.y, x_4292.z));
    let x_4297 : f32 = u_xlat3.x;
    u_xlat3.x = max(x_4297, 1.17549435e-37f);
    let x_4301 : f32 = u_xlat3.x;
    u_xlat3.x = inverseSqrt(x_4301);
    let x_4304 : vec4<f32> = u_xlat3;
    let x_4306 : vec4<f32> = u_xlat9;
    let x_4308 : vec3<f32> = (vec3<f32>(x_4304.x, x_4304.x, x_4304.x) * vec3<f32>(x_4306.x, x_4306.y, x_4306.z));
    let x_4309 : vec4<f32> = u_xlat9;
    u_xlat9 = vec4<f32>(x_4308.x, x_4308.y, x_4308.z, x_4309.w);
    let x_4311 : vec3<f32> = u_xlat25;
    let x_4312 : vec4<f32> = u_xlat9;
    u_xlat3.x = dot(x_4311, vec3<f32>(x_4312.x, x_4312.y, x_4312.z));
    let x_4317 : f32 = u_xlat3.x;
    u_xlat3.x = clamp(x_4317, 0.0f, 1.0f);
    let x_4320 : vec4<f32> = u_xlat10;
    let x_4322 : vec4<f32> = u_xlat9;
    u_xlat70 = dot(vec3<f32>(x_4320.x, x_4320.y, x_4320.z), vec3<f32>(x_4322.x, x_4322.y, x_4322.z));
    let x_4325 : f32 = u_xlat70;
    u_xlat70 = clamp(x_4325, 0.0f, 1.0f);
    let x_4328 : f32 = u_xlat3.x;
    let x_4330 : f32 = u_xlat3.x;
    u_xlat3.x = (x_4328 * x_4330);
    let x_4334 : f32 = u_xlat3.x;
    let x_4336 : f32 = u_xlat23.x;
    u_xlat3.x = ((x_4334 * x_4336) + 1.000010014f);
    let x_4340 : f32 = u_xlat70;
    let x_4341 : f32 = u_xlat70;
    u_xlat70 = (x_4340 * x_4341);
    let x_4344 : f32 = u_xlat3.x;
    let x_4346 : f32 = u_xlat3.x;
    u_xlat3.x = (x_4344 * x_4346);
    let x_4349 : f32 = u_xlat70;
    u_xlat70 = max(x_4349, 0.100000001f);
    let x_4352 : f32 = u_xlat3.x;
    let x_4353 : f32 = u_xlat70;
    u_xlat3.x = (x_4352 * x_4353);
    let x_4356 : f32 = u_xlat72;
    let x_4358 : f32 = u_xlat3.x;
    u_xlat3.x = (x_4356 * x_4358);
    let x_4361 : f32 = u_xlat68;
    let x_4363 : f32 = u_xlat3.x;
    u_xlat3.x = (x_4361 / x_4363);
    let x_4366 : vec4<f32> = u_xlat3;
    let x_4369 : vec3<f32> = u_xlat2;
    let x_4370 : vec3<f32> = ((vec3<f32>(x_4366.x, x_4366.x, x_4366.x) * vec3<f32>(0.039999999f, 0.039999999f, 0.039999999f)) + x_4369);
    let x_4371 : vec4<f32> = u_xlat9;
    u_xlat9 = vec4<f32>(x_4370.x, x_4370.y, x_4370.z, x_4371.w);
    let x_4373 : vec4<f32> = u_xlat9;
    let x_4375 : vec4<f32> = u_xlat11;
    let x_4378 : vec4<f32> = u_xlat8;
    let x_4380 : vec3<f32> = ((vec3<f32>(x_4373.x, x_4373.y, x_4373.z) * vec3<f32>(x_4375.x, x_4375.y, x_4375.z)) + vec3<f32>(x_4378.x, x_4378.y, x_4378.z));
    let x_4381 : vec4<f32> = u_xlat8;
    u_xlat8 = vec4<f32>(x_4380.x, x_4380.y, x_4380.z, x_4381.w);

    continuing {
      let x_4383 : u32 = u_xlatu_loop_1;
      u_xlatu_loop_1 = (x_4383 + bitcast<u32>(1i));
    }
  }
  let x_4385 : vec4<f32> = u_xlat5;
  let x_4387 : vec4<f32> = u_xlat7;
  let x_4390 : vec4<f32> = u_xlat4;
  u_xlat2 = ((vec3<f32>(x_4385.x, x_4385.y, x_4385.z) * vec3<f32>(x_4387.x, x_4387.x, x_4387.x)) + vec3<f32>(x_4390.x, x_4390.y, x_4390.z));
  let x_4393 : vec4<f32> = u_xlat8;
  let x_4395 : vec3<f32> = u_xlat2;
  u_xlat2 = (vec3<f32>(x_4393.x, x_4393.y, x_4393.z) + x_4395);
  let x_4399 : vec4<f32> = vs_INTERP4;
  let x_4401 : vec3<f32> = u_xlat0;
  let x_4403 : vec3<f32> = u_xlat2;
  let x_4404 : vec3<f32> = ((vec3<f32>(x_4399.w, x_4399.w, x_4399.w) * x_4401) + x_4403);
  let x_4405 : vec4<f32> = SV_Target0;
  SV_Target0 = vec4<f32>(x_4404.x, x_4404.y, x_4404.z, x_4405.w);
  let x_4407 : bool = u_xlatb45;
  if (x_4407) {
    let x_4412 : f32 = u_xlat1.x;
    x_4408 = x_4412;
  } else {
    x_4408 = 1.0f;
  }
  let x_4414 : f32 = x_4408;
  SV_Target0.w = x_4414;
  return;
}

struct main_out {
  @location(0)
  SV_Target0_1 : vec4<f32>,
}

@fragment
fn main(@builtin(position) gl_FragCoord_param : vec4<f32>, @location(1) vs_INTERP1_param : vec3<f32>, @location(3) vs_INTERP3_param : vec4<f32>, @location(4) vs_INTERP4_param : vec4<f32>, @location(0) vs_INTERP0_param : vec3<f32>, @location(2) vs_INTERP2_param : vec4<f32>, @location(5) vs_INTERP5_param : vec2<f32>) -> main_out {
  gl_FragCoord = gl_FragCoord_param;
  vs_INTERP1 = vs_INTERP1_param;
  vs_INTERP3 = vs_INTERP3_param;
  vs_INTERP4 = vs_INTERP4_param;
  vs_INTERP0 = vs_INTERP0_param;
  vs_INTERP2 = vs_INTERP2_param;
  vs_INTERP5 = vs_INTERP5_param;
  main_1();
  return main_out(SV_Target0);
}

