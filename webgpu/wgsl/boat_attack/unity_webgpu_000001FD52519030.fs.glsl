#version 440
#extension GL_ARB_explicit_attrib_location : require
#extension GL_ARB_shading_language_420pack : require

layout(origin_upper_left) in vec4 gl_FragCoord;
#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
precise vec4 u_xlat_precise_vec4;
precise ivec4 u_xlat_precise_ivec4;
precise bvec4 u_xlat_precise_bvec4;
precise uvec4 u_xlat_precise_uvec4;
const uvec4 ImmCB_0[] = uvec4[4] (
	uvec4(0x3F800000, 0x0, 0x0, 0x0),
	uvec4(0x0, 0x3F800000, 0x0, 0x0),
	uvec4(0x0, 0x0, 0x3F800000, 0x0),
	uvec4(0x0, 0x0, 0x0, 0x3F800000));
layout(set = 1, binding = 0, std140) uniform PGlobals {
	vec2 _GlobalMipBias;
	vec4 _MainLightPosition;
	vec4 _MainLightColor;
	vec4 _AdditionalLightsCount;
	vec3 _WorldSpaceCameraPos;
	vec4 unity_OrthoParams;
	mat4x4 unity_MatrixV;
	float _DitheringTextureInvSize;
};
layout(set = 1, binding = 1, std140) uniform AdditionalLights {
	vec4 _AdditionalLightsPosition[32];
	vec4 _AdditionalLightsColor[32];
	vec4 _AdditionalLightsAttenuation[32];
	vec4 _AdditionalLightsSpotDir[32];
	vec4 _AdditionalLightsOcclusionProbes[32];
	float _AdditionalLightsLayerMasks[32];
};
layout(set = 1, binding = 2, std140) uniform UnityPerDraw {
	mat4x4 unity_ObjectToWorld;
	mat4x4 unity_WorldToObject;
	vec4 unity_LODFade;
	vec4 unity_WorldTransformParams;
	vec4 unity_RenderingLayer;
	vec4 unity_LightData;
	vec4 unity_LightIndices[2];
	vec4 unity_ProbesOcclusion;
	vec4 unity_SpecCube0_HDR;
	vec4 unity_SpecCube1_HDR;
	vec4 unity_SpecCube0_BoxMax;
	vec4 unity_SpecCube0_BoxMin;
	vec4 unity_SpecCube0_ProbePosition;
	vec4 unity_SpecCube1_BoxMax;
	vec4 unity_SpecCube1_BoxMin;
	vec4 unity_SpecCube1_ProbePosition;
	vec4 unity_LightmapST;
	vec4 unity_DynamicLightmapST;
	vec4 unity_SHAr;
	vec4 unity_SHAg;
	vec4 unity_SHAb;
	vec4 unity_SHBr;
	vec4 unity_SHBg;
	vec4 unity_SHBb;
	vec4 unity_SHC;
	vec4 unity_RendererBounds_Min;
	vec4 unity_RendererBounds_Max;
	mat4x4 unity_MatrixPreviousM;
	mat4x4 unity_MatrixPreviousMI;
	vec4 unity_MotionVectorsParams;
	vec4 unity_SpriteColor;
	vec4 unity_SpriteProps;
};
layout(set = 1, binding = 3, std140) uniform UnityPerMaterial {
	vec4 _BaseMap_ST;
	vec4 _DetailAlbedoMap_ST;
	vec4 _BaseColor;
	vec4 _SpecColor;
	vec4 _EmissionColor;
	float _Cutoff;
	float _Smoothness;
	float _Metallic;
	float _BumpScale;
	float _Parallax;
	float _OcclusionStrength;
	float _ClearCoatMask;
	float _ClearCoatSmoothness;
	float _DetailAlbedoMapScale;
	float _DetailNormalMapScale;
	float _Surface;
};
layout(set = 1, binding = 4, std140) uniform LightShadows {
	mat4x4 _MainLightWorldToShadow[5];
	vec4 _CascadeShadowSplitSpheres0;
	vec4 _CascadeShadowSplitSpheres1;
	vec4 _CascadeShadowSplitSpheres2;
	vec4 _CascadeShadowSplitSpheres3;
	vec4 _CascadeShadowSplitSphereRadii;
	vec4 _MainLightShadowOffset0;
	vec4 _MainLightShadowOffset1;
	vec4 _MainLightShadowParams;
	vec4 _MainLightShadowmapSize;
	vec4 _AdditionalShadowOffset0;
	vec4 _AdditionalShadowOffset1;
	vec4 _AdditionalShadowFadeParams;
	vec4 _AdditionalShadowmapSize;
	vec4 _AdditionalShadowParams[32];
	mat4x4 _AdditionalLightsWorldToShadow[32];
};
layout(set = 0, binding = 0) uniform mediump textureCube unity_SpecCube0;
layout(set = 0, binding = 1) uniform mediump texture2D _BaseMap;
layout(set = 0, binding = 2) uniform mediump texture2D _BumpMap;
layout(set = 0, binding = 3) uniform mediump texture2D _OcclusionMap;
layout(set = 0, binding = 4) uniform mediump texture2D _MetallicGlossMap;
layout(set = 0, binding = 5) uniform mediump texture2D _MainLightShadowmapTexture;
layout(set = 0, binding = 6) uniform mediump texture2D _AdditionalLightsShadowmapTexture;
layout(set = 0, binding = 7) uniform mediump texture2D _DitheringTexture;
layout(location = 0) in highp  vec2 vs_TEXCOORD0;
layout(location = 1) in highp  vec3 vs_TEXCOORD1;
layout(location = 2) in highp  vec3 vs_TEXCOORD2;
layout(location = 3) in highp  vec4 vs_TEXCOORD3;
layout(location = 0) out highp vec4 SV_Target0;
vec4 u_xlat0;
bool u_xlatb0;
vec2 u_xlat1;
vec4 u_xlat2;
vec3 u_xlat3;
vec4 u_xlat4;
vec3 u_xlat5;
vec3 u_xlat6;
bvec4 u_xlatb6;
vec4 u_xlat7;
vec4 u_xlat8;
vec4 u_xlat9;
vec4 u_xlat10;
bvec4 u_xlatb10;
vec4 u_xlat11;
vec4 u_xlat12;
vec4 u_xlat13;
vec4 u_xlat14;
vec4 u_xlat15;
vec4 u_xlat16;
vec4 u_xlat17;
vec4 u_xlat18;
vec4 u_xlat19;
vec4 u_xlat20;
vec4 u_xlat21;
vec4 u_xlat22;
vec4 u_xlat23;
vec4 u_xlat24;
float u_xlat26;
uint u_xlatu26;
vec3 u_xlat27;
vec3 u_xlat28;
bool u_xlatb28;
vec3 u_xlat33;
vec2 u_xlat34;
float u_xlat35;
vec3 u_xlat37;
vec2 u_xlat38;
vec2 u_xlat51;
float u_xlat53;
bool u_xlatb53;
vec2 u_xlat57;
vec2 u_xlat59;
vec2 u_xlat60;
vec2 u_xlat61;
vec2 u_xlat63;
vec2 u_xlat64;
vec2 u_xlat65;
vec2 u_xlat69;
float u_xlat75;
int u_xlati75;
uint u_xlatu75;
float u_xlat76;
float u_xlat78;
bool u_xlatb78;
float u_xlat79;
int u_xlati79;
uint u_xlatu79;
bool u_xlatb79;
float u_xlat80;
int u_xlati80;
bool u_xlatb80;
float u_xlat81;
float u_xlat82;
int u_xlati82;
bool u_xlatb82;
float u_xlat84;
bool u_xlatb84;
float u_xlat85;
layout(set = 0, binding = 8) uniform mediump  sampler samplerunity_SpecCube0;
layout(set = 0, binding = 9) uniform mediump  sampler sampler_BaseMap;
layout(set = 0, binding = 10) uniform mediump  sampler sampler_BumpMap;
layout(set = 0, binding = 11) uniform mediump  sampler sampler_OcclusionMap;
layout(set = 0, binding = 12) uniform mediump  sampler sampler_MetallicGlossMap;
layout(set = 0, binding = 13) uniform mediump  sampler sampler_PointRepeat;
layout(set = 0, binding = 14) uniform mediump  samplerShadow sampler_LinearClampCompare;
void main()
{
vec4 hlslcc_FragCoord = vec4(gl_FragCoord.xyz, 1.0/gl_FragCoord.w);
    u_xlat0 = texture(sampler2D(_BaseMap, sampler_BaseMap), vs_TEXCOORD0.xy, _GlobalMipBias.x);
    u_xlat1.xy = texture(sampler2D(_MetallicGlossMap, sampler_MetallicGlossMap), vs_TEXCOORD0.xy, _GlobalMipBias.x).xw;
    u_xlat2 = u_xlat0.wxyz * _BaseColor.wxyz;
    u_xlat3.xyz = texture(sampler2D(_BumpMap, sampler_BumpMap), vs_TEXCOORD0.xy, _GlobalMipBias.x).xyw;
    u_xlat3.x = u_xlat3.x * u_xlat3.z;
    u_xlat51.xy = u_xlat3.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
    u_xlat75 = dot(u_xlat51.xy, u_xlat51.xy);
    u_xlat75 = min(u_xlat75, 1.0);
    u_xlat75 = (-u_xlat75) + 1.0;
    u_xlat75 = sqrt(u_xlat75);
    u_xlat75 = max(u_xlat75, 1.00000002e-16);
    u_xlat51.xy = u_xlat51.xy * vec2(vec2(_BumpScale, _BumpScale));
    u_xlat3.x = texture(sampler2D(_OcclusionMap, sampler_OcclusionMap), vs_TEXCOORD0.xy, _GlobalMipBias.x).y;
    u_xlat28.x = (-_OcclusionStrength) + 1.0;
    u_xlat3.x = u_xlat3.x * _OcclusionStrength + u_xlat28.x;
    u_xlat28.xy = hlslcc_FragCoord.xy * vec2(_DitheringTextureInvSize);
    u_xlat28.x = texture(sampler2D(_DitheringTexture, sampler_PointRepeat), u_xlat28.xy, _GlobalMipBias.x).w;
    u_xlatb53 = unity_LODFade.x>=0.0;
    u_xlat28.x = (u_xlatb53) ? abs(u_xlat28.x) : -abs(u_xlat28.x);
    u_xlat28.x = (-u_xlat28.x) + unity_LODFade.x;
    u_xlatb28 = u_xlat28.x<0.0;
    if(((int(u_xlatb28) * int(0xffffffffu)))!=0){discard;}
    u_xlatb28 = unity_OrthoParams.w==0.0;
    u_xlat4.xyz = (-vs_TEXCOORD1.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat53 = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat53 = inversesqrt(u_xlat53);
    u_xlat4.xyz = vec3(u_xlat53) * u_xlat4.xyz;
    u_xlat5.x = (u_xlatb28) ? u_xlat4.x : unity_MatrixV[0].z;
    u_xlat5.y = (u_xlatb28) ? u_xlat4.y : unity_MatrixV[1].z;
    u_xlat5.z = (u_xlatb28) ? u_xlat4.z : unity_MatrixV[2].z;
    u_xlat28.xyz = vs_TEXCOORD2.zxy * vs_TEXCOORD3.yzx;
    u_xlat28.xyz = vs_TEXCOORD2.yzx * vs_TEXCOORD3.zxy + (-u_xlat28.xyz);
    u_xlat28.xyz = u_xlat28.xyz * vs_TEXCOORD3.www;
    u_xlat28.xyz = u_xlat51.yyy * u_xlat28.xyz;
    u_xlat28.xyz = u_xlat51.xxx * vs_TEXCOORD3.xyz + u_xlat28.xyz;
    u_xlat28.xyz = vec3(u_xlat75) * vs_TEXCOORD2.xyz + u_xlat28.xyz;
    u_xlat75 = dot(u_xlat28.xyz, u_xlat28.xyz);
    u_xlat75 = inversesqrt(u_xlat75);
    u_xlat4.xyz = vec3(u_xlat75) * u_xlat28.xyz;
    u_xlat28.xyz = vs_TEXCOORD1.xyz + (-_CascadeShadowSplitSpheres0.xyz);
    u_xlat6.xyz = vs_TEXCOORD1.xyz + (-_CascadeShadowSplitSpheres1.xyz);
    u_xlat7.xyz = vs_TEXCOORD1.xyz + (-_CascadeShadowSplitSpheres2.xyz);
    u_xlat8.xyz = vs_TEXCOORD1.xyz + (-_CascadeShadowSplitSpheres3.xyz);
    u_xlat9.x = dot(u_xlat28.xyz, u_xlat28.xyz);
    u_xlat9.y = dot(u_xlat6.xyz, u_xlat6.xyz);
    u_xlat9.z = dot(u_xlat7.xyz, u_xlat7.xyz);
    u_xlat9.w = dot(u_xlat8.xyz, u_xlat8.xyz);
    u_xlatb6 = lessThan(u_xlat9, _CascadeShadowSplitSphereRadii);
    u_xlat7.x = u_xlatb6.x ? float(1.0) : 0.0;
    u_xlat7.y = u_xlatb6.y ? float(1.0) : 0.0;
    u_xlat7.z = u_xlatb6.z ? float(1.0) : 0.0;
    u_xlat7.w = u_xlatb6.w ? float(1.0) : 0.0;
;
    u_xlat28.x = (u_xlatb6.x) ? float(-1.0) : float(-0.0);
    u_xlat28.y = (u_xlatb6.y) ? float(-1.0) : float(-0.0);
    u_xlat28.z = (u_xlatb6.z) ? float(-1.0) : float(-0.0);
    u_xlat28.xyz = u_xlat28.xyz + u_xlat7.yzw;
    u_xlat7.yzw = max(u_xlat28.xyz, vec3(0.0, 0.0, 0.0));
    u_xlat75 = dot(u_xlat7, vec4(4.0, 3.0, 2.0, 1.0));
    u_xlat75 = (-u_xlat75) + 4.0;
    u_xlatu75 = uint(u_xlat75);
    u_xlati75 = int(u_xlatu75) << (2 & int(0x1F));
    u_xlat28.xyz = vs_TEXCOORD1.yyy * _MainLightWorldToShadow[(u_xlati75 + 1) / 4][(u_xlati75 + 1) % 4].xyz;
    u_xlat28.xyz = _MainLightWorldToShadow[u_xlati75 / 4][u_xlati75 % 4].xyz * vs_TEXCOORD1.xxx + u_xlat28.xyz;
    u_xlat28.xyz = _MainLightWorldToShadow[(u_xlati75 + 2) / 4][(u_xlati75 + 2) % 4].xyz * vs_TEXCOORD1.zzz + u_xlat28.xyz;
    u_xlat28.xyz = u_xlat28.xyz + _MainLightWorldToShadow[(u_xlati75 + 3) / 4][(u_xlati75 + 3) % 4].xyz;
    u_xlat4.w = 1.0;
    u_xlat6.x = dot(unity_SHAr, u_xlat4);
    u_xlat6.y = dot(unity_SHAg, u_xlat4);
    u_xlat6.z = dot(unity_SHAb, u_xlat4);
    u_xlat7 = u_xlat4.yzzx * u_xlat4.xyzz;
    u_xlat8.x = dot(unity_SHBr, u_xlat7);
    u_xlat8.y = dot(unity_SHBg, u_xlat7);
    u_xlat8.z = dot(unity_SHBb, u_xlat7);
    u_xlat75 = u_xlat4.y * u_xlat4.y;
    u_xlat75 = u_xlat4.x * u_xlat4.x + (-u_xlat75);
    u_xlat7.xyz = unity_SHC.xyz * vec3(u_xlat75) + u_xlat8.xyz;
    u_xlat6.xyz = u_xlat6.xyz + u_xlat7.xyz;
    u_xlat6.xyz = max(u_xlat6.xyz, vec3(0.0, 0.0, 0.0));
    u_xlat75 = (-u_xlat1.x) * 0.959999979 + 0.959999979;
    u_xlat51.x = (-u_xlat75) + 1.0;
    u_xlat27.xyz = vec3(u_xlat75) * u_xlat2.yzw;
    u_xlat0.xyz = u_xlat0.xyz * _BaseColor.xyz + vec3(-0.0399999991, -0.0399999991, -0.0399999991);
    u_xlat0.xyz = u_xlat1.xxx * u_xlat0.xyz + vec3(0.0399999991, 0.0399999991, 0.0399999991);
    u_xlat75 = (-u_xlat1.y) * _Smoothness + 1.0;
    u_xlat1.x = u_xlat75 * u_xlat75;
    u_xlat1.x = max(u_xlat1.x, 0.0078125);
    u_xlat76 = u_xlat1.x * u_xlat1.x;
    u_xlat26 = u_xlat1.y * _Smoothness + u_xlat51.x;
    u_xlat26 = clamp(u_xlat26, 0.0, 1.0);
    u_xlat51.x = u_xlat1.x * 4.0 + 2.0;
    u_xlat3.x = min(u_xlat3.x, 1.0);
    u_xlatb79 = 0.0<_MainLightShadowParams.y;
    if(u_xlatb79){
        u_xlatb79 = _MainLightShadowParams.y==1.0;
        if(u_xlatb79){
            u_xlat7 = u_xlat28.xyxy + _MainLightShadowOffset0;
            vec3 txVec0 = vec3(u_xlat7.xy,u_xlat28.z);
            u_xlat8.x = textureLod(sampler2DShadow(_MainLightShadowmapTexture, sampler_LinearClampCompare), txVec0, 0.0);
            vec3 txVec1 = vec3(u_xlat7.zw,u_xlat28.z);
            u_xlat8.y = textureLod(sampler2DShadow(_MainLightShadowmapTexture, sampler_LinearClampCompare), txVec1, 0.0);
            u_xlat7 = u_xlat28.xyxy + _MainLightShadowOffset1;
            vec3 txVec2 = vec3(u_xlat7.xy,u_xlat28.z);
            u_xlat8.z = textureLod(sampler2DShadow(_MainLightShadowmapTexture, sampler_LinearClampCompare), txVec2, 0.0);
            vec3 txVec3 = vec3(u_xlat7.zw,u_xlat28.z);
            u_xlat8.w = textureLod(sampler2DShadow(_MainLightShadowmapTexture, sampler_LinearClampCompare), txVec3, 0.0);
            u_xlat79 = dot(u_xlat8, vec4(0.25, 0.25, 0.25, 0.25));
        } else {
            u_xlatb80 = _MainLightShadowParams.y==2.0;
            if(u_xlatb80){
                u_xlat7.xy = u_xlat28.xy * _MainLightShadowmapSize.zw + vec2(0.5, 0.5);
                u_xlat7.xy = floor(u_xlat7.xy);
                u_xlat57.xy = u_xlat28.xy * _MainLightShadowmapSize.zw + (-u_xlat7.xy);
                u_xlat8 = u_xlat57.xxyy + vec4(0.5, 1.0, 0.5, 1.0);
                u_xlat9 = u_xlat8.xxzz * u_xlat8.xxzz;
                u_xlat8.xz = u_xlat9.yw * vec2(0.0799999982, 0.0799999982);
                u_xlat9.xy = u_xlat9.xz * vec2(0.5, 0.5) + (-u_xlat57.xy);
                u_xlat59.xy = (-u_xlat57.xy) + vec2(1.0, 1.0);
                u_xlat10.xy = min(u_xlat57.xy, vec2(0.0, 0.0));
                u_xlat10.xy = (-u_xlat10.xy) * u_xlat10.xy + u_xlat59.xy;
                u_xlat57.xy = max(u_xlat57.xy, vec2(0.0, 0.0));
                u_xlat57.xy = (-u_xlat57.xy) * u_xlat57.xy + u_xlat8.yw;
                u_xlat10.xy = u_xlat10.xy + vec2(1.0, 1.0);
                u_xlat57.xy = u_xlat57.xy + vec2(1.0, 1.0);
                u_xlat11.xy = u_xlat9.xy * vec2(0.159999996, 0.159999996);
                u_xlat9.xy = u_xlat59.xy * vec2(0.159999996, 0.159999996);
                u_xlat10.xy = u_xlat10.xy * vec2(0.159999996, 0.159999996);
                u_xlat12.xy = u_xlat57.xy * vec2(0.159999996, 0.159999996);
                u_xlat57.xy = u_xlat8.yw * vec2(0.159999996, 0.159999996);
                u_xlat11.z = u_xlat10.x;
                u_xlat11.w = u_xlat57.x;
                u_xlat9.z = u_xlat12.x;
                u_xlat9.w = u_xlat8.x;
                u_xlat13 = u_xlat9.zwxz + u_xlat11.zwxz;
                u_xlat10.z = u_xlat11.y;
                u_xlat10.w = u_xlat57.y;
                u_xlat12.z = u_xlat9.y;
                u_xlat12.w = u_xlat8.z;
                u_xlat8.xyz = u_xlat10.zyw + u_xlat12.zyw;
                u_xlat9.xyz = u_xlat9.xzw / u_xlat13.zwy;
                u_xlat9.xyz = u_xlat9.xyz + vec3(-2.5, -0.5, 1.5);
                u_xlat10.xyz = u_xlat12.zyw / u_xlat8.xyz;
                u_xlat10.xyz = u_xlat10.xyz + vec3(-2.5, -0.5, 1.5);
                u_xlat9.xyz = u_xlat9.yxz * _MainLightShadowmapSize.xxx;
                u_xlat10.xyz = u_xlat10.xyz * _MainLightShadowmapSize.yyy;
                u_xlat9.w = u_xlat10.x;
                u_xlat11 = u_xlat7.xyxy * _MainLightShadowmapSize.xyxy + u_xlat9.ywxw;
                u_xlat57.xy = u_xlat7.xy * _MainLightShadowmapSize.xy + u_xlat9.zw;
                u_xlat10.w = u_xlat9.y;
                u_xlat9.yw = u_xlat10.yz;
                u_xlat12 = u_xlat7.xyxy * _MainLightShadowmapSize.xyxy + u_xlat9.xyzy;
                u_xlat10 = u_xlat7.xyxy * _MainLightShadowmapSize.xyxy + u_xlat10.wywz;
                u_xlat9 = u_xlat7.xyxy * _MainLightShadowmapSize.xyxy + u_xlat9.xwzw;
                u_xlat14 = u_xlat8.xxxy * u_xlat13.zwyz;
                u_xlat15 = u_xlat8.yyzz * u_xlat13;
                u_xlat80 = u_xlat8.z * u_xlat13.y;
                vec3 txVec4 = vec3(u_xlat11.xy,u_xlat28.z);
                u_xlat81 = textureLod(sampler2DShadow(_MainLightShadowmapTexture, sampler_LinearClampCompare), txVec4, 0.0);
                vec3 txVec5 = vec3(u_xlat11.zw,u_xlat28.z);
                u_xlat7.x = textureLod(sampler2DShadow(_MainLightShadowmapTexture, sampler_LinearClampCompare), txVec5, 0.0);
                u_xlat7.x = u_xlat7.x * u_xlat14.y;
                u_xlat81 = u_xlat14.x * u_xlat81 + u_xlat7.x;
                vec3 txVec6 = vec3(u_xlat57.xy,u_xlat28.z);
                u_xlat7.x = textureLod(sampler2DShadow(_MainLightShadowmapTexture, sampler_LinearClampCompare), txVec6, 0.0);
                u_xlat81 = u_xlat14.z * u_xlat7.x + u_xlat81;
                vec3 txVec7 = vec3(u_xlat10.xy,u_xlat28.z);
                u_xlat7.x = textureLod(sampler2DShadow(_MainLightShadowmapTexture, sampler_LinearClampCompare), txVec7, 0.0);
                u_xlat81 = u_xlat14.w * u_xlat7.x + u_xlat81;
                vec3 txVec8 = vec3(u_xlat12.xy,u_xlat28.z);
                u_xlat7.x = textureLod(sampler2DShadow(_MainLightShadowmapTexture, sampler_LinearClampCompare), txVec8, 0.0);
                u_xlat81 = u_xlat15.x * u_xlat7.x + u_xlat81;
                vec3 txVec9 = vec3(u_xlat12.zw,u_xlat28.z);
                u_xlat7.x = textureLod(sampler2DShadow(_MainLightShadowmapTexture, sampler_LinearClampCompare), txVec9, 0.0);
                u_xlat81 = u_xlat15.y * u_xlat7.x + u_xlat81;
                vec3 txVec10 = vec3(u_xlat10.zw,u_xlat28.z);
                u_xlat7.x = textureLod(sampler2DShadow(_MainLightShadowmapTexture, sampler_LinearClampCompare), txVec10, 0.0);
                u_xlat81 = u_xlat15.z * u_xlat7.x + u_xlat81;
                vec3 txVec11 = vec3(u_xlat9.xy,u_xlat28.z);
                u_xlat7.x = textureLod(sampler2DShadow(_MainLightShadowmapTexture, sampler_LinearClampCompare), txVec11, 0.0);
                u_xlat81 = u_xlat15.w * u_xlat7.x + u_xlat81;
                vec3 txVec12 = vec3(u_xlat9.zw,u_xlat28.z);
                u_xlat7.x = textureLod(sampler2DShadow(_MainLightShadowmapTexture, sampler_LinearClampCompare), txVec12, 0.0);
                u_xlat79 = u_xlat80 * u_xlat7.x + u_xlat81;
            } else {
                u_xlat7.xy = u_xlat28.xy * _MainLightShadowmapSize.zw + vec2(0.5, 0.5);
                u_xlat7.xy = floor(u_xlat7.xy);
                u_xlat57.xy = u_xlat28.xy * _MainLightShadowmapSize.zw + (-u_xlat7.xy);
                u_xlat8 = u_xlat57.xxyy + vec4(0.5, 1.0, 0.5, 1.0);
                u_xlat9 = u_xlat8.xxzz * u_xlat8.xxzz;
                u_xlat10.yw = u_xlat9.yw * vec2(0.0408160016, 0.0408160016);
                u_xlat8.xz = u_xlat9.xz * vec2(0.5, 0.5) + (-u_xlat57.xy);
                u_xlat9.xy = (-u_xlat57.xy) + vec2(1.0, 1.0);
                u_xlat59.xy = min(u_xlat57.xy, vec2(0.0, 0.0));
                u_xlat9.xy = (-u_xlat59.xy) * u_xlat59.xy + u_xlat9.xy;
                u_xlat59.xy = max(u_xlat57.xy, vec2(0.0, 0.0));
                u_xlat33.xz = (-u_xlat59.xy) * u_xlat59.xy + u_xlat8.yw;
                u_xlat9.xy = u_xlat9.xy + vec2(2.0, 2.0);
                u_xlat8.yw = u_xlat33.xz + vec2(2.0, 2.0);
                u_xlat11.z = u_xlat8.y * 0.0816320032;
                u_xlat12.xyz = u_xlat8.zxw * vec3(0.0816320032, 0.0816320032, 0.0816320032);
                u_xlat8.xy = u_xlat9.xy * vec2(0.0816320032, 0.0816320032);
                u_xlat11.x = u_xlat12.y;
                u_xlat11.yw = u_xlat57.xx * vec2(-0.0816320032, 0.0816320032) + vec2(0.163264006, 0.0816320032);
                u_xlat9.xz = u_xlat57.xx * vec2(-0.0816320032, 0.0816320032) + vec2(0.0816320032, 0.163264006);
                u_xlat9.y = u_xlat8.x;
                u_xlat9.w = u_xlat10.y;
                u_xlat11 = u_xlat9 + u_xlat11;
                u_xlat12.yw = u_xlat57.yy * vec2(-0.0816320032, 0.0816320032) + vec2(0.163264006, 0.0816320032);
                u_xlat10.xz = u_xlat57.yy * vec2(-0.0816320032, 0.0816320032) + vec2(0.0816320032, 0.163264006);
                u_xlat10.y = u_xlat8.y;
                u_xlat8 = u_xlat10 + u_xlat12;
                u_xlat9 = u_xlat9 / u_xlat11;
                u_xlat9 = u_xlat9 + vec4(-3.5, -1.5, 0.5, 2.5);
                u_xlat10 = u_xlat10 / u_xlat8;
                u_xlat10 = u_xlat10 + vec4(-3.5, -1.5, 0.5, 2.5);
                u_xlat9 = u_xlat9.wxyz * _MainLightShadowmapSize.xxxx;
                u_xlat10 = u_xlat10.xwyz * _MainLightShadowmapSize.yyyy;
                u_xlat12.xzw = u_xlat9.yzw;
                u_xlat12.y = u_xlat10.x;
                u_xlat13 = u_xlat7.xyxy * _MainLightShadowmapSize.xyxy + u_xlat12.xyzy;
                u_xlat57.xy = u_xlat7.xy * _MainLightShadowmapSize.xy + u_xlat12.wy;
                u_xlat9.y = u_xlat12.y;
                u_xlat12.y = u_xlat10.z;
                u_xlat14 = u_xlat7.xyxy * _MainLightShadowmapSize.xyxy + u_xlat12.xyzy;
                u_xlat15.xy = u_xlat7.xy * _MainLightShadowmapSize.xy + u_xlat12.wy;
                u_xlat9.z = u_xlat12.y;
                u_xlat16 = u_xlat7.xyxy * _MainLightShadowmapSize.xyxy + u_xlat9.xyxz;
                u_xlat12.y = u_xlat10.w;
                u_xlat17 = u_xlat7.xyxy * _MainLightShadowmapSize.xyxy + u_xlat12.xyzy;
                u_xlat34.xy = u_xlat7.xy * _MainLightShadowmapSize.xy + u_xlat12.wy;
                u_xlat9.w = u_xlat12.y;
                u_xlat65.xy = u_xlat7.xy * _MainLightShadowmapSize.xy + u_xlat9.xw;
                u_xlat10.xzw = u_xlat12.xzw;
                u_xlat12 = u_xlat7.xyxy * _MainLightShadowmapSize.xyxy + u_xlat10.xyzy;
                u_xlat60.xy = u_xlat7.xy * _MainLightShadowmapSize.xy + u_xlat10.wy;
                u_xlat10.x = u_xlat9.x;
                u_xlat7.xy = u_xlat7.xy * _MainLightShadowmapSize.xy + u_xlat10.xy;
                u_xlat18 = u_xlat8.xxxx * u_xlat11;
                u_xlat19 = u_xlat8.yyyy * u_xlat11;
                u_xlat20 = u_xlat8.zzzz * u_xlat11;
                u_xlat8 = u_xlat8.wwww * u_xlat11;
                vec3 txVec13 = vec3(u_xlat13.xy,u_xlat28.z);
                u_xlat80 = textureLod(sampler2DShadow(_MainLightShadowmapTexture, sampler_LinearClampCompare), txVec13, 0.0);
                vec3 txVec14 = vec3(u_xlat13.zw,u_xlat28.z);
                u_xlat81 = textureLod(sampler2DShadow(_MainLightShadowmapTexture, sampler_LinearClampCompare), txVec14, 0.0);
                u_xlat81 = u_xlat81 * u_xlat18.y;
                u_xlat80 = u_xlat18.x * u_xlat80 + u_xlat81;
                vec3 txVec15 = vec3(u_xlat57.xy,u_xlat28.z);
                u_xlat81 = textureLod(sampler2DShadow(_MainLightShadowmapTexture, sampler_LinearClampCompare), txVec15, 0.0);
                u_xlat80 = u_xlat18.z * u_xlat81 + u_xlat80;
                vec3 txVec16 = vec3(u_xlat16.xy,u_xlat28.z);
                u_xlat81 = textureLod(sampler2DShadow(_MainLightShadowmapTexture, sampler_LinearClampCompare), txVec16, 0.0);
                u_xlat80 = u_xlat18.w * u_xlat81 + u_xlat80;
                vec3 txVec17 = vec3(u_xlat14.xy,u_xlat28.z);
                u_xlat81 = textureLod(sampler2DShadow(_MainLightShadowmapTexture, sampler_LinearClampCompare), txVec17, 0.0);
                u_xlat80 = u_xlat19.x * u_xlat81 + u_xlat80;
                vec3 txVec18 = vec3(u_xlat14.zw,u_xlat28.z);
                u_xlat81 = textureLod(sampler2DShadow(_MainLightShadowmapTexture, sampler_LinearClampCompare), txVec18, 0.0);
                u_xlat80 = u_xlat19.y * u_xlat81 + u_xlat80;
                vec3 txVec19 = vec3(u_xlat15.xy,u_xlat28.z);
                u_xlat81 = textureLod(sampler2DShadow(_MainLightShadowmapTexture, sampler_LinearClampCompare), txVec19, 0.0);
                u_xlat80 = u_xlat19.z * u_xlat81 + u_xlat80;
                vec3 txVec20 = vec3(u_xlat16.zw,u_xlat28.z);
                u_xlat81 = textureLod(sampler2DShadow(_MainLightShadowmapTexture, sampler_LinearClampCompare), txVec20, 0.0);
                u_xlat80 = u_xlat19.w * u_xlat81 + u_xlat80;
                vec3 txVec21 = vec3(u_xlat17.xy,u_xlat28.z);
                u_xlat81 = textureLod(sampler2DShadow(_MainLightShadowmapTexture, sampler_LinearClampCompare), txVec21, 0.0);
                u_xlat80 = u_xlat20.x * u_xlat81 + u_xlat80;
                vec3 txVec22 = vec3(u_xlat17.zw,u_xlat28.z);
                u_xlat81 = textureLod(sampler2DShadow(_MainLightShadowmapTexture, sampler_LinearClampCompare), txVec22, 0.0);
                u_xlat80 = u_xlat20.y * u_xlat81 + u_xlat80;
                vec3 txVec23 = vec3(u_xlat34.xy,u_xlat28.z);
                u_xlat81 = textureLod(sampler2DShadow(_MainLightShadowmapTexture, sampler_LinearClampCompare), txVec23, 0.0);
                u_xlat80 = u_xlat20.z * u_xlat81 + u_xlat80;
                vec3 txVec24 = vec3(u_xlat65.xy,u_xlat28.z);
                u_xlat81 = textureLod(sampler2DShadow(_MainLightShadowmapTexture, sampler_LinearClampCompare), txVec24, 0.0);
                u_xlat80 = u_xlat20.w * u_xlat81 + u_xlat80;
                vec3 txVec25 = vec3(u_xlat12.xy,u_xlat28.z);
                u_xlat81 = textureLod(sampler2DShadow(_MainLightShadowmapTexture, sampler_LinearClampCompare), txVec25, 0.0);
                u_xlat80 = u_xlat8.x * u_xlat81 + u_xlat80;
                vec3 txVec26 = vec3(u_xlat12.zw,u_xlat28.z);
                u_xlat81 = textureLod(sampler2DShadow(_MainLightShadowmapTexture, sampler_LinearClampCompare), txVec26, 0.0);
                u_xlat80 = u_xlat8.y * u_xlat81 + u_xlat80;
                vec3 txVec27 = vec3(u_xlat60.xy,u_xlat28.z);
                u_xlat81 = textureLod(sampler2DShadow(_MainLightShadowmapTexture, sampler_LinearClampCompare), txVec27, 0.0);
                u_xlat80 = u_xlat8.z * u_xlat81 + u_xlat80;
                vec3 txVec28 = vec3(u_xlat7.xy,u_xlat28.z);
                u_xlat81 = textureLod(sampler2DShadow(_MainLightShadowmapTexture, sampler_LinearClampCompare), txVec28, 0.0);
                u_xlat79 = u_xlat8.w * u_xlat81 + u_xlat80;
            }
        }
    } else {
        vec3 txVec29 = vec3(u_xlat28.xy,u_xlat28.z);
        u_xlat79 = textureLod(sampler2DShadow(_MainLightShadowmapTexture, sampler_LinearClampCompare), txVec29, 0.0);
    }
    u_xlat28.x = (-_MainLightShadowParams.x) + 1.0;
    u_xlat28.x = u_xlat79 * _MainLightShadowParams.x + u_xlat28.x;
    u_xlatb53 = 0.0>=u_xlat28.z;
    u_xlatb78 = u_xlat28.z>=1.0;
    u_xlatb53 = u_xlatb78 || u_xlatb53;
    u_xlat28.x = (u_xlatb53) ? 1.0 : u_xlat28.x;
    u_xlat7.xyz = vs_TEXCOORD1.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat53 = dot(u_xlat7.xyz, u_xlat7.xyz);
    u_xlat78 = u_xlat53 * _MainLightShadowParams.z + _MainLightShadowParams.w;
    u_xlat78 = clamp(u_xlat78, 0.0, 1.0);
    u_xlat79 = (-u_xlat28.x) + 1.0;
    u_xlat28.x = u_xlat78 * u_xlat79 + u_xlat28.x;
    u_xlat78 = dot((-u_xlat5.xyz), u_xlat4.xyz);
    u_xlat78 = u_xlat78 + u_xlat78;
    u_xlat7.xyz = u_xlat4.xyz * (-vec3(u_xlat78)) + (-u_xlat5.xyz);
    u_xlat78 = dot(u_xlat4.xyz, u_xlat5.xyz);
    u_xlat78 = clamp(u_xlat78, 0.0, 1.0);
    u_xlat78 = (-u_xlat78) + 1.0;
    u_xlat78 = u_xlat78 * u_xlat78;
    u_xlat78 = u_xlat78 * u_xlat78;
    u_xlat79 = (-u_xlat75) * 0.699999988 + 1.70000005;
    u_xlat75 = u_xlat75 * u_xlat79;
    u_xlat75 = u_xlat75 * 6.0;
    u_xlat7 = textureLod(samplerCube(unity_SpecCube0, samplerunity_SpecCube0), u_xlat7.xyz, u_xlat75);
    u_xlat75 = u_xlat7.w + -1.0;
    u_xlat75 = unity_SpecCube0_HDR.w * u_xlat75 + 1.0;
    u_xlat75 = max(u_xlat75, 0.0);
    u_xlat75 = log2(u_xlat75);
    u_xlat75 = u_xlat75 * unity_SpecCube0_HDR.y;
    u_xlat75 = exp2(u_xlat75);
    u_xlat75 = u_xlat75 * unity_SpecCube0_HDR.x;
    u_xlat7.xyz = u_xlat7.xyz * vec3(u_xlat75);
    u_xlat8.xy = u_xlat1.xx * u_xlat1.xx + vec2(-1.0, 1.0);
    u_xlat75 = float(1.0) / u_xlat8.y;
    u_xlat33.xyz = (-u_xlat0.xyz) + vec3(u_xlat26);
    u_xlat33.xyz = vec3(u_xlat78) * u_xlat33.xyz + u_xlat0.xyz;
    u_xlat33.xyz = vec3(u_xlat75) * u_xlat33.xyz;
    u_xlat7.xyz = u_xlat7.xyz * u_xlat33.xyz;
    u_xlat6.xyz = u_xlat6.xyz * u_xlat27.xyz + u_xlat7.xyz;
    u_xlat75 = u_xlat28.x * unity_LightData.z;
    u_xlat1.x = dot(u_xlat4.xyz, _MainLightPosition.xyz);
    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
    u_xlat75 = u_xlat75 * u_xlat1.x;
    u_xlat7.xyz = vec3(u_xlat75) * _MainLightColor.xyz;
    u_xlat33.xyz = u_xlat5.xyz + _MainLightPosition.xyz;
    u_xlat75 = dot(u_xlat33.xyz, u_xlat33.xyz);
    u_xlat75 = max(u_xlat75, 1.17549435e-38);
    u_xlat75 = inversesqrt(u_xlat75);
    u_xlat33.xyz = vec3(u_xlat75) * u_xlat33.xyz;
    u_xlat75 = dot(u_xlat4.xyz, u_xlat33.xyz);
    u_xlat75 = clamp(u_xlat75, 0.0, 1.0);
    u_xlat1.x = dot(_MainLightPosition.xyz, u_xlat33.xyz);
    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
    u_xlat75 = u_xlat75 * u_xlat75;
    u_xlat75 = u_xlat75 * u_xlat8.x + 1.00001001;
    u_xlat1.x = u_xlat1.x * u_xlat1.x;
    u_xlat75 = u_xlat75 * u_xlat75;
    u_xlat1.x = max(u_xlat1.x, 0.100000001);
    u_xlat75 = u_xlat75 * u_xlat1.x;
    u_xlat75 = u_xlat51.x * u_xlat75;
    u_xlat75 = u_xlat76 / u_xlat75;
    u_xlat33.xyz = u_xlat0.xyz * vec3(u_xlat75) + u_xlat27.xyz;
    u_xlat7.xyz = u_xlat7.xyz * u_xlat33.xyz;
    u_xlat75 = min(_AdditionalLightsCount.x, unity_LightData.y);
    u_xlatu75 =  uint(int(u_xlat75));
    u_xlat1.x = u_xlat53 * _AdditionalShadowFadeParams.x + _AdditionalShadowFadeParams.y;
    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
    u_xlat28.x = float(0.0);
    u_xlat28.y = float(0.0);
    u_xlat28.z = float(0.0);
    for(uint u_xlatu_loop_1 = 0u ; u_xlatu_loop_1<u_xlatu75 ; u_xlatu_loop_1++)
    {
        u_xlatu79 = u_xlatu_loop_1 >> (2u & uint(0x1F));
        u_xlati80 = int(u_xlatu_loop_1 & 3u);
        u_xlat79 = dot(unity_LightIndices[int(u_xlatu79)], uintBitsToFloat(ImmCB_0[u_xlati80]));
        u_xlati79 = int(u_xlat79);
        u_xlat33.xyz = (-vs_TEXCOORD1.xyz) * _AdditionalLightsPosition[u_xlati79].www + _AdditionalLightsPosition[u_xlati79].xyz;
        u_xlat80 = dot(u_xlat33.xyz, u_xlat33.xyz);
        u_xlat80 = max(u_xlat80, 6.10351562e-05);
        u_xlat81 = inversesqrt(u_xlat80);
        u_xlat9.xyz = vec3(u_xlat81) * u_xlat33.xyz;
        u_xlat82 = float(1.0) / float(u_xlat80);
        u_xlat80 = u_xlat80 * _AdditionalLightsAttenuation[u_xlati79].x;
        u_xlat80 = (-u_xlat80) * u_xlat80 + 1.0;
        u_xlat80 = max(u_xlat80, 0.0);
        u_xlat80 = u_xlat80 * u_xlat80;
        u_xlat80 = u_xlat80 * u_xlat82;
        u_xlat82 = dot(_AdditionalLightsSpotDir[u_xlati79].xyz, u_xlat9.xyz);
        u_xlat82 = u_xlat82 * _AdditionalLightsAttenuation[u_xlati79].z + _AdditionalLightsAttenuation[u_xlati79].w;
        u_xlat82 = clamp(u_xlat82, 0.0, 1.0);
        u_xlat82 = u_xlat82 * u_xlat82;
        u_xlat80 = u_xlat80 * u_xlat82;
        u_xlati82 = int(_AdditionalShadowParams[u_xlati79].w);
        u_xlatb84 = u_xlati82>=0;
        if(u_xlatb84){
            u_xlatb84 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_AdditionalShadowParams[u_xlati79].z);
            if(u_xlatb84){
                u_xlatb10.xyz = greaterThanEqual(abs(u_xlat9.zzyz), abs(u_xlat9.xyxx)).xyz;
                u_xlatb84 = u_xlatb10.y && u_xlatb10.x;
                u_xlatb10.xyw = lessThan((-u_xlat9.zyzx), vec4(0.0, 0.0, 0.0, 0.0)).xyw;
                u_xlat10.x = (u_xlatb10.x) ? float(5.0) : float(4.0);
                u_xlat10.y = (u_xlatb10.y) ? float(3.0) : float(2.0);
                u_xlat85 = u_xlatb10.w ? 1.0 : float(0.0);
                u_xlat35 = (u_xlatb10.z) ? u_xlat10.y : u_xlat85;
                u_xlat84 = (u_xlatb84) ? u_xlat10.x : u_xlat35;
                u_xlat10.x = trunc(_AdditionalShadowParams[u_xlati79].w);
                u_xlat84 = u_xlat84 + u_xlat10.x;
                u_xlati82 = int(u_xlat84);
            }
            u_xlati82 = u_xlati82 << (2 & int(0x1F));
            u_xlat10 = vs_TEXCOORD1.yyyy * _AdditionalLightsWorldToShadow[(u_xlati82 + 1) / 4][(u_xlati82 + 1) % 4];
            u_xlat10 = _AdditionalLightsWorldToShadow[u_xlati82 / 4][u_xlati82 % 4] * vs_TEXCOORD1.xxxx + u_xlat10;
            u_xlat10 = _AdditionalLightsWorldToShadow[(u_xlati82 + 2) / 4][(u_xlati82 + 2) % 4] * vs_TEXCOORD1.zzzz + u_xlat10;
            u_xlat10 = u_xlat10 + _AdditionalLightsWorldToShadow[(u_xlati82 + 3) / 4][(u_xlati82 + 3) % 4];
            u_xlat10.xyz = u_xlat10.xyz / u_xlat10.www;
            u_xlatb82 = 0.0<_AdditionalShadowParams[u_xlati79].y;
            if(u_xlatb82){
                u_xlatb82 = 1.0==_AdditionalShadowParams[u_xlati79].y;
                if(u_xlatb82){
                    u_xlat11 = u_xlat10.xyxy + _AdditionalShadowOffset0;
                    vec3 txVec30 = vec3(u_xlat11.xy,u_xlat10.z);
                    u_xlat12.x = textureLod(sampler2DShadow(_AdditionalLightsShadowmapTexture, sampler_LinearClampCompare), txVec30, 0.0);
                    vec3 txVec31 = vec3(u_xlat11.zw,u_xlat10.z);
                    u_xlat12.y = textureLod(sampler2DShadow(_AdditionalLightsShadowmapTexture, sampler_LinearClampCompare), txVec31, 0.0);
                    u_xlat11 = u_xlat10.xyxy + _AdditionalShadowOffset1;
                    vec3 txVec32 = vec3(u_xlat11.xy,u_xlat10.z);
                    u_xlat12.z = textureLod(sampler2DShadow(_AdditionalLightsShadowmapTexture, sampler_LinearClampCompare), txVec32, 0.0);
                    vec3 txVec33 = vec3(u_xlat11.zw,u_xlat10.z);
                    u_xlat12.w = textureLod(sampler2DShadow(_AdditionalLightsShadowmapTexture, sampler_LinearClampCompare), txVec33, 0.0);
                    u_xlat82 = dot(u_xlat12, vec4(0.25, 0.25, 0.25, 0.25));
                } else {
                    u_xlatb84 = 2.0==_AdditionalShadowParams[u_xlati79].y;
                    if(u_xlatb84){
                        u_xlat11.xy = u_xlat10.xy * _AdditionalShadowmapSize.zw + vec2(0.5, 0.5);
                        u_xlat11.xy = floor(u_xlat11.xy);
                        u_xlat61.xy = u_xlat10.xy * _AdditionalShadowmapSize.zw + (-u_xlat11.xy);
                        u_xlat12 = u_xlat61.xxyy + vec4(0.5, 1.0, 0.5, 1.0);
                        u_xlat13 = u_xlat12.xxzz * u_xlat12.xxzz;
                        u_xlat12.xz = u_xlat13.yw * vec2(0.0799999982, 0.0799999982);
                        u_xlat13.xy = u_xlat13.xz * vec2(0.5, 0.5) + (-u_xlat61.xy);
                        u_xlat63.xy = (-u_xlat61.xy) + vec2(1.0, 1.0);
                        u_xlat14.xy = min(u_xlat61.xy, vec2(0.0, 0.0));
                        u_xlat14.xy = (-u_xlat14.xy) * u_xlat14.xy + u_xlat63.xy;
                        u_xlat61.xy = max(u_xlat61.xy, vec2(0.0, 0.0));
                        u_xlat61.xy = (-u_xlat61.xy) * u_xlat61.xy + u_xlat12.yw;
                        u_xlat14.xy = u_xlat14.xy + vec2(1.0, 1.0);
                        u_xlat61.xy = u_xlat61.xy + vec2(1.0, 1.0);
                        u_xlat15.xy = u_xlat13.xy * vec2(0.159999996, 0.159999996);
                        u_xlat13.xy = u_xlat63.xy * vec2(0.159999996, 0.159999996);
                        u_xlat14.xy = u_xlat14.xy * vec2(0.159999996, 0.159999996);
                        u_xlat16.xy = u_xlat61.xy * vec2(0.159999996, 0.159999996);
                        u_xlat61.xy = u_xlat12.yw * vec2(0.159999996, 0.159999996);
                        u_xlat15.z = u_xlat14.x;
                        u_xlat15.w = u_xlat61.x;
                        u_xlat13.z = u_xlat16.x;
                        u_xlat13.w = u_xlat12.x;
                        u_xlat17 = u_xlat13.zwxz + u_xlat15.zwxz;
                        u_xlat14.z = u_xlat15.y;
                        u_xlat14.w = u_xlat61.y;
                        u_xlat16.z = u_xlat13.y;
                        u_xlat16.w = u_xlat12.z;
                        u_xlat12.xyz = u_xlat14.zyw + u_xlat16.zyw;
                        u_xlat13.xyz = u_xlat13.xzw / u_xlat17.zwy;
                        u_xlat13.xyz = u_xlat13.xyz + vec3(-2.5, -0.5, 1.5);
                        u_xlat14.xyz = u_xlat16.zyw / u_xlat12.xyz;
                        u_xlat14.xyz = u_xlat14.xyz + vec3(-2.5, -0.5, 1.5);
                        u_xlat13.xyz = u_xlat13.yxz * _AdditionalShadowmapSize.xxx;
                        u_xlat14.xyz = u_xlat14.xyz * _AdditionalShadowmapSize.yyy;
                        u_xlat13.w = u_xlat14.x;
                        u_xlat15 = u_xlat11.xyxy * _AdditionalShadowmapSize.xyxy + u_xlat13.ywxw;
                        u_xlat61.xy = u_xlat11.xy * _AdditionalShadowmapSize.xy + u_xlat13.zw;
                        u_xlat14.w = u_xlat13.y;
                        u_xlat13.yw = u_xlat14.yz;
                        u_xlat16 = u_xlat11.xyxy * _AdditionalShadowmapSize.xyxy + u_xlat13.xyzy;
                        u_xlat14 = u_xlat11.xyxy * _AdditionalShadowmapSize.xyxy + u_xlat14.wywz;
                        u_xlat13 = u_xlat11.xyxy * _AdditionalShadowmapSize.xyxy + u_xlat13.xwzw;
                        u_xlat18 = u_xlat12.xxxy * u_xlat17.zwyz;
                        u_xlat19 = u_xlat12.yyzz * u_xlat17;
                        u_xlat84 = u_xlat12.z * u_xlat17.y;
                        vec3 txVec34 = vec3(u_xlat15.xy,u_xlat10.z);
                        u_xlat85 = textureLod(sampler2DShadow(_AdditionalLightsShadowmapTexture, sampler_LinearClampCompare), txVec34, 0.0);
                        vec3 txVec35 = vec3(u_xlat15.zw,u_xlat10.z);
                        u_xlat11.x = textureLod(sampler2DShadow(_AdditionalLightsShadowmapTexture, sampler_LinearClampCompare), txVec35, 0.0);
                        u_xlat11.x = u_xlat11.x * u_xlat18.y;
                        u_xlat85 = u_xlat18.x * u_xlat85 + u_xlat11.x;
                        vec3 txVec36 = vec3(u_xlat61.xy,u_xlat10.z);
                        u_xlat11.x = textureLod(sampler2DShadow(_AdditionalLightsShadowmapTexture, sampler_LinearClampCompare), txVec36, 0.0);
                        u_xlat85 = u_xlat18.z * u_xlat11.x + u_xlat85;
                        vec3 txVec37 = vec3(u_xlat14.xy,u_xlat10.z);
                        u_xlat11.x = textureLod(sampler2DShadow(_AdditionalLightsShadowmapTexture, sampler_LinearClampCompare), txVec37, 0.0);
                        u_xlat85 = u_xlat18.w * u_xlat11.x + u_xlat85;
                        vec3 txVec38 = vec3(u_xlat16.xy,u_xlat10.z);
                        u_xlat11.x = textureLod(sampler2DShadow(_AdditionalLightsShadowmapTexture, sampler_LinearClampCompare), txVec38, 0.0);
                        u_xlat85 = u_xlat19.x * u_xlat11.x + u_xlat85;
                        vec3 txVec39 = vec3(u_xlat16.zw,u_xlat10.z);
                        u_xlat11.x = textureLod(sampler2DShadow(_AdditionalLightsShadowmapTexture, sampler_LinearClampCompare), txVec39, 0.0);
                        u_xlat85 = u_xlat19.y * u_xlat11.x + u_xlat85;
                        vec3 txVec40 = vec3(u_xlat14.zw,u_xlat10.z);
                        u_xlat11.x = textureLod(sampler2DShadow(_AdditionalLightsShadowmapTexture, sampler_LinearClampCompare), txVec40, 0.0);
                        u_xlat85 = u_xlat19.z * u_xlat11.x + u_xlat85;
                        vec3 txVec41 = vec3(u_xlat13.xy,u_xlat10.z);
                        u_xlat11.x = textureLod(sampler2DShadow(_AdditionalLightsShadowmapTexture, sampler_LinearClampCompare), txVec41, 0.0);
                        u_xlat85 = u_xlat19.w * u_xlat11.x + u_xlat85;
                        vec3 txVec42 = vec3(u_xlat13.zw,u_xlat10.z);
                        u_xlat11.x = textureLod(sampler2DShadow(_AdditionalLightsShadowmapTexture, sampler_LinearClampCompare), txVec42, 0.0);
                        u_xlat82 = u_xlat84 * u_xlat11.x + u_xlat85;
                    } else {
                        u_xlat11.xy = u_xlat10.xy * _AdditionalShadowmapSize.zw + vec2(0.5, 0.5);
                        u_xlat11.xy = floor(u_xlat11.xy);
                        u_xlat61.xy = u_xlat10.xy * _AdditionalShadowmapSize.zw + (-u_xlat11.xy);
                        u_xlat12 = u_xlat61.xxyy + vec4(0.5, 1.0, 0.5, 1.0);
                        u_xlat13 = u_xlat12.xxzz * u_xlat12.xxzz;
                        u_xlat14.yw = u_xlat13.yw * vec2(0.0408160016, 0.0408160016);
                        u_xlat12.xz = u_xlat13.xz * vec2(0.5, 0.5) + (-u_xlat61.xy);
                        u_xlat13.xy = (-u_xlat61.xy) + vec2(1.0, 1.0);
                        u_xlat63.xy = min(u_xlat61.xy, vec2(0.0, 0.0));
                        u_xlat13.xy = (-u_xlat63.xy) * u_xlat63.xy + u_xlat13.xy;
                        u_xlat63.xy = max(u_xlat61.xy, vec2(0.0, 0.0));
                        u_xlat37.xz = (-u_xlat63.xy) * u_xlat63.xy + u_xlat12.yw;
                        u_xlat13.xy = u_xlat13.xy + vec2(2.0, 2.0);
                        u_xlat12.yw = u_xlat37.xz + vec2(2.0, 2.0);
                        u_xlat15.z = u_xlat12.y * 0.0816320032;
                        u_xlat16.xyz = u_xlat12.zxw * vec3(0.0816320032, 0.0816320032, 0.0816320032);
                        u_xlat12.xy = u_xlat13.xy * vec2(0.0816320032, 0.0816320032);
                        u_xlat15.x = u_xlat16.y;
                        u_xlat15.yw = u_xlat61.xx * vec2(-0.0816320032, 0.0816320032) + vec2(0.163264006, 0.0816320032);
                        u_xlat13.xz = u_xlat61.xx * vec2(-0.0816320032, 0.0816320032) + vec2(0.0816320032, 0.163264006);
                        u_xlat13.y = u_xlat12.x;
                        u_xlat13.w = u_xlat14.y;
                        u_xlat15 = u_xlat13 + u_xlat15;
                        u_xlat16.yw = u_xlat61.yy * vec2(-0.0816320032, 0.0816320032) + vec2(0.163264006, 0.0816320032);
                        u_xlat14.xz = u_xlat61.yy * vec2(-0.0816320032, 0.0816320032) + vec2(0.0816320032, 0.163264006);
                        u_xlat14.y = u_xlat12.y;
                        u_xlat12 = u_xlat14 + u_xlat16;
                        u_xlat13 = u_xlat13 / u_xlat15;
                        u_xlat13 = u_xlat13 + vec4(-3.5, -1.5, 0.5, 2.5);
                        u_xlat14 = u_xlat14 / u_xlat12;
                        u_xlat14 = u_xlat14 + vec4(-3.5, -1.5, 0.5, 2.5);
                        u_xlat13 = u_xlat13.wxyz * _AdditionalShadowmapSize.xxxx;
                        u_xlat14 = u_xlat14.xwyz * _AdditionalShadowmapSize.yyyy;
                        u_xlat16.xzw = u_xlat13.yzw;
                        u_xlat16.y = u_xlat14.x;
                        u_xlat17 = u_xlat11.xyxy * _AdditionalShadowmapSize.xyxy + u_xlat16.xyzy;
                        u_xlat61.xy = u_xlat11.xy * _AdditionalShadowmapSize.xy + u_xlat16.wy;
                        u_xlat13.y = u_xlat16.y;
                        u_xlat16.y = u_xlat14.z;
                        u_xlat18 = u_xlat11.xyxy * _AdditionalShadowmapSize.xyxy + u_xlat16.xyzy;
                        u_xlat19.xy = u_xlat11.xy * _AdditionalShadowmapSize.xy + u_xlat16.wy;
                        u_xlat13.z = u_xlat16.y;
                        u_xlat20 = u_xlat11.xyxy * _AdditionalShadowmapSize.xyxy + u_xlat13.xyxz;
                        u_xlat16.y = u_xlat14.w;
                        u_xlat21 = u_xlat11.xyxy * _AdditionalShadowmapSize.xyxy + u_xlat16.xyzy;
                        u_xlat38.xy = u_xlat11.xy * _AdditionalShadowmapSize.xy + u_xlat16.wy;
                        u_xlat13.w = u_xlat16.y;
                        u_xlat69.xy = u_xlat11.xy * _AdditionalShadowmapSize.xy + u_xlat13.xw;
                        u_xlat14.xzw = u_xlat16.xzw;
                        u_xlat16 = u_xlat11.xyxy * _AdditionalShadowmapSize.xyxy + u_xlat14.xyzy;
                        u_xlat64.xy = u_xlat11.xy * _AdditionalShadowmapSize.xy + u_xlat14.wy;
                        u_xlat14.x = u_xlat13.x;
                        u_xlat11.xy = u_xlat11.xy * _AdditionalShadowmapSize.xy + u_xlat14.xy;
                        u_xlat22 = u_xlat12.xxxx * u_xlat15;
                        u_xlat23 = u_xlat12.yyyy * u_xlat15;
                        u_xlat24 = u_xlat12.zzzz * u_xlat15;
                        u_xlat12 = u_xlat12.wwww * u_xlat15;
                        vec3 txVec43 = vec3(u_xlat17.xy,u_xlat10.z);
                        u_xlat84 = textureLod(sampler2DShadow(_AdditionalLightsShadowmapTexture, sampler_LinearClampCompare), txVec43, 0.0);
                        vec3 txVec44 = vec3(u_xlat17.zw,u_xlat10.z);
                        u_xlat85 = textureLod(sampler2DShadow(_AdditionalLightsShadowmapTexture, sampler_LinearClampCompare), txVec44, 0.0);
                        u_xlat85 = u_xlat85 * u_xlat22.y;
                        u_xlat84 = u_xlat22.x * u_xlat84 + u_xlat85;
                        vec3 txVec45 = vec3(u_xlat61.xy,u_xlat10.z);
                        u_xlat85 = textureLod(sampler2DShadow(_AdditionalLightsShadowmapTexture, sampler_LinearClampCompare), txVec45, 0.0);
                        u_xlat84 = u_xlat22.z * u_xlat85 + u_xlat84;
                        vec3 txVec46 = vec3(u_xlat20.xy,u_xlat10.z);
                        u_xlat85 = textureLod(sampler2DShadow(_AdditionalLightsShadowmapTexture, sampler_LinearClampCompare), txVec46, 0.0);
                        u_xlat84 = u_xlat22.w * u_xlat85 + u_xlat84;
                        vec3 txVec47 = vec3(u_xlat18.xy,u_xlat10.z);
                        u_xlat85 = textureLod(sampler2DShadow(_AdditionalLightsShadowmapTexture, sampler_LinearClampCompare), txVec47, 0.0);
                        u_xlat84 = u_xlat23.x * u_xlat85 + u_xlat84;
                        vec3 txVec48 = vec3(u_xlat18.zw,u_xlat10.z);
                        u_xlat85 = textureLod(sampler2DShadow(_AdditionalLightsShadowmapTexture, sampler_LinearClampCompare), txVec48, 0.0);
                        u_xlat84 = u_xlat23.y * u_xlat85 + u_xlat84;
                        vec3 txVec49 = vec3(u_xlat19.xy,u_xlat10.z);
                        u_xlat85 = textureLod(sampler2DShadow(_AdditionalLightsShadowmapTexture, sampler_LinearClampCompare), txVec49, 0.0);
                        u_xlat84 = u_xlat23.z * u_xlat85 + u_xlat84;
                        vec3 txVec50 = vec3(u_xlat20.zw,u_xlat10.z);
                        u_xlat85 = textureLod(sampler2DShadow(_AdditionalLightsShadowmapTexture, sampler_LinearClampCompare), txVec50, 0.0);
                        u_xlat84 = u_xlat23.w * u_xlat85 + u_xlat84;
                        vec3 txVec51 = vec3(u_xlat21.xy,u_xlat10.z);
                        u_xlat85 = textureLod(sampler2DShadow(_AdditionalLightsShadowmapTexture, sampler_LinearClampCompare), txVec51, 0.0);
                        u_xlat84 = u_xlat24.x * u_xlat85 + u_xlat84;
                        vec3 txVec52 = vec3(u_xlat21.zw,u_xlat10.z);
                        u_xlat85 = textureLod(sampler2DShadow(_AdditionalLightsShadowmapTexture, sampler_LinearClampCompare), txVec52, 0.0);
                        u_xlat84 = u_xlat24.y * u_xlat85 + u_xlat84;
                        vec3 txVec53 = vec3(u_xlat38.xy,u_xlat10.z);
                        u_xlat85 = textureLod(sampler2DShadow(_AdditionalLightsShadowmapTexture, sampler_LinearClampCompare), txVec53, 0.0);
                        u_xlat84 = u_xlat24.z * u_xlat85 + u_xlat84;
                        vec3 txVec54 = vec3(u_xlat69.xy,u_xlat10.z);
                        u_xlat85 = textureLod(sampler2DShadow(_AdditionalLightsShadowmapTexture, sampler_LinearClampCompare), txVec54, 0.0);
                        u_xlat84 = u_xlat24.w * u_xlat85 + u_xlat84;
                        vec3 txVec55 = vec3(u_xlat16.xy,u_xlat10.z);
                        u_xlat85 = textureLod(sampler2DShadow(_AdditionalLightsShadowmapTexture, sampler_LinearClampCompare), txVec55, 0.0);
                        u_xlat84 = u_xlat12.x * u_xlat85 + u_xlat84;
                        vec3 txVec56 = vec3(u_xlat16.zw,u_xlat10.z);
                        u_xlat85 = textureLod(sampler2DShadow(_AdditionalLightsShadowmapTexture, sampler_LinearClampCompare), txVec56, 0.0);
                        u_xlat84 = u_xlat12.y * u_xlat85 + u_xlat84;
                        vec3 txVec57 = vec3(u_xlat64.xy,u_xlat10.z);
                        u_xlat85 = textureLod(sampler2DShadow(_AdditionalLightsShadowmapTexture, sampler_LinearClampCompare), txVec57, 0.0);
                        u_xlat84 = u_xlat12.z * u_xlat85 + u_xlat84;
                        vec3 txVec58 = vec3(u_xlat11.xy,u_xlat10.z);
                        u_xlat85 = textureLod(sampler2DShadow(_AdditionalLightsShadowmapTexture, sampler_LinearClampCompare), txVec58, 0.0);
                        u_xlat82 = u_xlat12.w * u_xlat85 + u_xlat84;
                    }
                }
            } else {
                vec3 txVec59 = vec3(u_xlat10.xy,u_xlat10.z);
                u_xlat82 = textureLod(sampler2DShadow(_AdditionalLightsShadowmapTexture, sampler_LinearClampCompare), txVec59, 0.0);
            }
            u_xlat84 = 1.0 + (-_AdditionalShadowParams[u_xlati79].x);
            u_xlat82 = u_xlat82 * _AdditionalShadowParams[u_xlati79].x + u_xlat84;
            u_xlatb84 = 0.0>=u_xlat10.z;
            u_xlatb10.x = u_xlat10.z>=1.0;
            u_xlatb84 = u_xlatb84 || u_xlatb10.x;
            u_xlat82 = (u_xlatb84) ? 1.0 : u_xlat82;
        } else {
            u_xlat82 = 1.0;
        }
        u_xlat84 = (-u_xlat82) + 1.0;
        u_xlat82 = u_xlat1.x * u_xlat84 + u_xlat82;
        u_xlat80 = u_xlat80 * u_xlat82;
        u_xlat82 = dot(u_xlat4.xyz, u_xlat9.xyz);
        u_xlat82 = clamp(u_xlat82, 0.0, 1.0);
        u_xlat80 = u_xlat80 * u_xlat82;
        u_xlat10.xyz = vec3(u_xlat80) * _AdditionalLightsColor[u_xlati79].xyz;
        u_xlat33.xyz = u_xlat33.xyz * vec3(u_xlat81) + u_xlat5.xyz;
        u_xlat79 = dot(u_xlat33.xyz, u_xlat33.xyz);
        u_xlat79 = max(u_xlat79, 1.17549435e-38);
        u_xlat79 = inversesqrt(u_xlat79);
        u_xlat33.xyz = vec3(u_xlat79) * u_xlat33.xyz;
        u_xlat79 = dot(u_xlat4.xyz, u_xlat33.xyz);
        u_xlat79 = clamp(u_xlat79, 0.0, 1.0);
        u_xlat80 = dot(u_xlat9.xyz, u_xlat33.xyz);
        u_xlat80 = clamp(u_xlat80, 0.0, 1.0);
        u_xlat79 = u_xlat79 * u_xlat79;
        u_xlat79 = u_xlat79 * u_xlat8.x + 1.00001001;
        u_xlat80 = u_xlat80 * u_xlat80;
        u_xlat79 = u_xlat79 * u_xlat79;
        u_xlat80 = max(u_xlat80, 0.100000001);
        u_xlat79 = u_xlat79 * u_xlat80;
        u_xlat79 = u_xlat51.x * u_xlat79;
        u_xlat79 = u_xlat76 / u_xlat79;
        u_xlat33.xyz = u_xlat0.xyz * vec3(u_xlat79) + u_xlat27.xyz;
        u_xlat28.xyz = u_xlat33.xyz * u_xlat10.xyz + u_xlat28.xyz;
    }
    u_xlat0.xyz = u_xlat6.xyz * u_xlat3.xxx + u_xlat7.xyz;
    SV_Target0.xyz = u_xlat28.xyz + u_xlat0.xyz;
    u_xlatb0 = _Surface==1.0;
    SV_Target0.w = (u_xlatb0) ? u_xlat2.x : 1.0;
    return;
}

