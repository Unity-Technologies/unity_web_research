type Arr = array<vec4<f32>, 2u>;

struct UnityPerDraw {
  unity_ObjectToWorld : mat4x4<f32>,
  unity_WorldToObject : mat4x4<f32>,
  unity_LODFade : vec4<f32>,
  unity_WorldTransformParams : vec4<f32>,
  unity_RenderingLayer : vec4<f32>,
  unity_LightData : vec4<f32>,
  unity_LightIndices : Arr,
  unity_ProbesOcclusion : vec4<f32>,
  unity_SpecCube0_HDR : vec4<f32>,
  unity_SpecCube1_HDR : vec4<f32>,
  unity_SpecCube0_BoxMax : vec4<f32>,
  unity_SpecCube0_BoxMin : vec4<f32>,
  unity_SpecCube0_ProbePosition : vec4<f32>,
  unity_SpecCube1_BoxMax : vec4<f32>,
  unity_SpecCube1_BoxMin : vec4<f32>,
  unity_SpecCube1_ProbePosition : vec4<f32>,
  unity_LightmapST : vec4<f32>,
  unity_DynamicLightmapST : vec4<f32>,
  unity_SHAr : vec4<f32>,
  unity_SHAg : vec4<f32>,
  unity_SHAb : vec4<f32>,
  unity_SHBr : vec4<f32>,
  unity_SHBg : vec4<f32>,
  unity_SHBb : vec4<f32>,
  unity_SHC : vec4<f32>,
  unity_RendererBounds_Min : vec4<f32>,
  unity_RendererBounds_Max : vec4<f32>,
  unity_MatrixPreviousM : mat4x4<f32>,
  unity_MatrixPreviousMI : mat4x4<f32>,
  unity_MotionVectorsParams : vec4<f32>,
  unity_SpriteColor : vec4<f32>,
  unity_SpriteProps : vec4<f32>,
}

struct PGlobals {
  x_ScaledScreenParams : vec4<f32>,
  x_GlobalMipBias : vec2<f32>,
  @size(8)
  padding : u32,
  x_MainLightPosition : vec4<f32>,
  x_MainLightColor : vec4<f32>,
  x_AmbientOcclusionParam : vec4<f32>,
  x_AdditionalLightsCount : vec4<f32>,
  x_WorldSpaceCameraPos : vec3<f32>,
  @size(4)
  padding_1 : u32,
  unity_OrthoParams : vec4<f32>,
  x_ScaleBiasRt : vec4<f32>,
  unity_MatrixV : mat4x4<f32>,
}

struct UnityPerMaterial {
  x_SampleTexture2D_a490b3241735d68e9ee2d1f1bbfed8dc_Texture_1_TexelSize : vec4<f32>,
  x_MainTex_TexelSize : vec4<f32>,
  Texture2D_DE8BF47E_TexelSize : vec4<f32>,
  Vector1_6E11FCEA : f32,
  Vector1_A492C01C : f32,
  Vector1_8B35DE98 : f32,
  @size(4)
  padding_2 : u32,
  Texture2D_C005B064_TexelSize : vec4<f32>,
  Texture2D_D7D66558_TexelSize : vec4<f32>,
  Vector1_90E376AD : f32,
}

type Arr_1 = array<mat4x4<f32>, 5u>;

struct MainLightShadows {
  x_MainLightWorldToShadow : Arr_1,
  x_CascadeShadowSplitSpheres0 : vec4<f32>,
  x_CascadeShadowSplitSpheres1 : vec4<f32>,
  x_CascadeShadowSplitSpheres2 : vec4<f32>,
  x_CascadeShadowSplitSpheres3 : vec4<f32>,
  x_CascadeShadowSplitSphereRadii : vec4<f32>,
  x_MainLightShadowOffset0 : vec4<f32>,
  x_MainLightShadowOffset1 : vec4<f32>,
  x_MainLightShadowParams : vec4<f32>,
  x_MainLightShadowmapSize : vec4<f32>,
}

type Arr_2 = array<vec4<f32>, 256u>;

type Arr_3 = array<vec4<f32>, 256u>;

type Arr_4 = array<vec4<f32>, 256u>;

type Arr_5 = array<vec4<f32>, 256u>;

type Arr_6 = array<vec4<f32>, 256u>;

struct strided_arr {
  @size(16)
  el : f32,
}

type Arr_7 = array<strided_arr, 256u>;

struct AdditionalLights {
  x_AdditionalLightsPosition : Arr_6,
  x_AdditionalLightsColor : Arr_6,
  x_AdditionalLightsAttenuation : Arr_6,
  x_AdditionalLightsSpotDir : Arr_6,
  x_AdditionalLightsOcclusionProbes : Arr_6,
  x_AdditionalLightsLayerMasks : Arr_7,
}

var<private> gl_FragCoord : vec4<f32>;

var<private> vs_INTERP1 : vec3<f32>;

var<private> vs_INTERP2 : vec4<f32>;

@group(1) @binding(2) var<uniform> x_59 : UnityPerDraw;

@group(0) @binding(5) var x_MainTex : texture_2d<f32>;

@group(0) @binding(14) var sampler_MainTex : sampler;

var<private> vs_INTERP3 : vec4<f32>;

@group(1) @binding(0) var<uniform> x_146 : PGlobals;

var<private> vs_INTERP0 : vec3<f32>;

@group(0) @binding(8) var Texture2D_D7D66558 : texture_2d<f32>;

@group(0) @binding(17) var samplerTexture2D_D7D66558 : sampler;

@group(1) @binding(4) var<uniform> x_206 : UnityPerMaterial;

@group(0) @binding(6) var Texture2D_DE8BF47E : texture_2d<f32>;

@group(0) @binding(15) var samplerTexture2D_DE8BF47E : sampler;

@group(0) @binding(7) var Texture2D_C005B064 : texture_2d<f32>;

@group(0) @binding(16) var samplerTexture2D_C005B064 : sampler;

@group(0) @binding(4) var x_SampleTexture2D_a490b3241735d68e9ee2d1f1bbfed8dc_Texture_1 : texture_2d<f32>;

@group(0) @binding(13) var sampler_SampleTexture2D_a490b3241735d68e9ee2d1f1bbfed8dc_Texture_1 : sampler;

@group(1) @binding(3) var<uniform> x_694 : MainLightShadows;

@group(0) @binding(1) var unity_Lightmap : texture_2d<f32>;

@group(0) @binding(10) var samplerunity_Lightmap : sampler;

var<private> vs_INTERP4 : vec2<f32>;

@group(0) @binding(2) var x_ScreenSpaceOcclusionTexture : texture_2d<f32>;

@group(0) @binding(11) var sampler_ScreenSpaceOcclusionTexture : sampler;

@group(0) @binding(3) var x_MainLightShadowmapTexture : texture_depth_2d;

@group(0) @binding(12) var sampler_MainLightShadowmapTexture : sampler_comparison;

@group(0) @binding(0) var unity_SpecCube0 : texture_cube<f32>;

@group(0) @binding(9) var samplerunity_SpecCube0 : sampler;

@group(1) @binding(1) var<uniform> x_2680 : AdditionalLights;

var<private> SV_Target0 : vec4<f32>;

fn main_1() {
  var hlslcc_FragCoord : vec4<f32>;
  var u_xlat0 : vec4<f32>;
  var u_xlatb21 : vec2<bool>;
  var u_xlat21 : vec3<f32>;
  var u_xlat1 : vec4<f32>;
  var u_xlat2 : vec3<f32>;
  var u_xlat3 : vec3<f32>;
  var u_xlat4 : vec4<f32>;
  var u_xlat64 : f32;
  var u_xlat65 : f32;
  var u_xlat5 : vec3<f32>;
  var u_xlat6 : vec4<f32>;
  var u_xlat66 : f32;
  var u_xlat67 : f32;
  var u_xlat7 : vec4<f32>;
  var u_xlat28 : vec3<f32>;
  var u_xlat22 : vec3<f32>;
  var u_xlat25 : vec3<f32>;
  var u_xlatb1 : bool;
  var x_656 : f32;
  var x_668 : f32;
  var x_679 : f32;
  var u_xlat8 : vec4<f32>;
  var u_xlatb4 : vec4<bool>;
  var u_xlatu1 : u32;
  var u_xlati1 : i32;
  var u_xlat68 : f32;
  var u_xlatb27 : bool;
  var txVec0 : vec3<f32>;
  var txVec1 : vec3<f32>;
  var txVec2 : vec3<f32>;
  var txVec3 : vec3<f32>;
  var u_xlat27 : vec3<f32>;
  var u_xlatb48 : bool;
  var u_xlat48 : vec2<f32>;
  var u_xlat9 : vec4<f32>;
  var u_xlat49 : vec2<f32>;
  var u_xlat51 : vec2<f32>;
  var u_xlat10 : vec4<f32>;
  var u_xlat11 : vec4<f32>;
  var u_xlat12 : vec4<f32>;
  var u_xlat13 : vec4<f32>;
  var u_xlat14 : vec4<f32>;
  var u_xlat15 : vec4<f32>;
  var txVec4 : vec3<f32>;
  var u_xlat69 : f32;
  var txVec5 : vec3<f32>;
  var txVec6 : vec3<f32>;
  var txVec7 : vec3<f32>;
  var txVec8 : vec3<f32>;
  var txVec9 : vec3<f32>;
  var txVec10 : vec3<f32>;
  var txVec11 : vec3<f32>;
  var txVec12 : vec3<f32>;
  var u_xlat55 : vec2<f32>;
  var u_xlat16 : vec4<f32>;
  var u_xlat29 : vec2<f32>;
  var u_xlat17 : vec2<f32>;
  var u_xlat52 : vec2<f32>;
  var u_xlat18 : vec4<f32>;
  var u_xlat19 : vec4<f32>;
  var u_xlat20 : vec4<f32>;
  var txVec13 : vec3<f32>;
  var txVec14 : vec3<f32>;
  var u_xlat71 : f32;
  var txVec15 : vec3<f32>;
  var txVec16 : vec3<f32>;
  var txVec17 : vec3<f32>;
  var txVec18 : vec3<f32>;
  var txVec19 : vec3<f32>;
  var txVec20 : vec3<f32>;
  var txVec21 : vec3<f32>;
  var txVec22 : vec3<f32>;
  var txVec23 : vec3<f32>;
  var txVec24 : vec3<f32>;
  var txVec25 : vec3<f32>;
  var txVec26 : vec3<f32>;
  var txVec27 : vec3<f32>;
  var txVec28 : vec3<f32>;
  var txVec29 : vec3<f32>;
  var u_xlatb22 : bool;
  var u_xlatb43 : bool;
  var x_2282 : f32;
  var u_xlat43 : vec2<f32>;
  var u_xlatu0 : u32;
  var u_xlatu_loop_1 : u32;
  var u_xlatu7 : u32;
  var u_xlati28 : i32;
  var indexable : array<vec4<u32>, 4u>;
  var u_xlati7 : i32;
  var u_xlat50 : f32;
  var u_xlat70 : f32;
  var u_xlat_precise_vec4 : vec4<f32>;
  var u_xlat_precise_ivec4 : vec4<i32>;
  var u_xlat_precise_bvec4 : vec4<bool>;
  var u_xlat_precise_uvec4 : vec4<u32>;
  let x_13 : vec4<f32> = gl_FragCoord;
  let x_14 : vec3<f32> = vec3<f32>(x_13.x, x_13.y, x_13.z);
  let x_20 : f32 = gl_FragCoord.w;
  hlslcc_FragCoord = vec4<f32>(x_14.x, x_14.y, x_14.z, (1.0f / x_20));
  let x_29 : vec3<f32> = vs_INTERP1;
  let x_30 : vec3<f32> = vs_INTERP1;
  u_xlat0.x = dot(x_29, x_30);
  let x_36 : f32 = u_xlat0.x;
  u_xlat0.x = sqrt(x_36);
  let x_40 : f32 = u_xlat0.x;
  u_xlat0.x = (1.0f / x_40);
  let x_50 : f32 = vs_INTERP2.w;
  u_xlatb21.x = (0.0f < x_50);
  let x_64 : f32 = x_59.unity_WorldTransformParams.w;
  u_xlatb21.y = (x_64 >= 0.0f);
  let x_71 : bool = u_xlatb21.x;
  u_xlat21.x = select(-1.0f, 1.0f, x_71);
  let x_76 : bool = u_xlatb21.y;
  u_xlat21.y = select(-1.0f, 1.0f, x_76);
  let x_80 : f32 = u_xlat21.y;
  let x_82 : f32 = u_xlat21.x;
  u_xlat21.x = (x_80 * x_82);
  let x_86 : vec3<f32> = vs_INTERP1;
  let x_88 : vec4<f32> = vs_INTERP2;
  let x_90 : vec3<f32> = (vec3<f32>(x_86.z, x_86.x, x_86.y) * vec3<f32>(x_88.y, x_88.z, x_88.x));
  let x_91 : vec4<f32> = u_xlat1;
  u_xlat1 = vec4<f32>(x_90.x, x_90.y, x_90.z, x_91.w);
  let x_93 : vec3<f32> = vs_INTERP1;
  let x_95 : vec4<f32> = vs_INTERP2;
  let x_98 : vec4<f32> = u_xlat1;
  let x_101 : vec3<f32> = ((vec3<f32>(x_93.y, x_93.z, x_93.x) * vec3<f32>(x_95.z, x_95.x, x_95.y)) + -(vec3<f32>(x_98.x, x_98.y, x_98.z)));
  let x_102 : vec4<f32> = u_xlat1;
  u_xlat1 = vec4<f32>(x_101.x, x_101.y, x_101.z, x_102.w);
  let x_104 : vec3<f32> = u_xlat21;
  let x_106 : vec4<f32> = u_xlat1;
  let x_108 : vec3<f32> = (vec3<f32>(x_104.x, x_104.x, x_104.x) * vec3<f32>(x_106.x, x_106.y, x_106.z));
  let x_109 : vec4<f32> = u_xlat0;
  u_xlat0 = vec4<f32>(x_109.x, x_108.x, x_108.y, x_108.z);
  let x_111 : vec4<f32> = u_xlat0;
  let x_113 : vec3<f32> = vs_INTERP1;
  let x_114 : vec3<f32> = (vec3<f32>(x_111.x, x_111.x, x_111.x) * x_113);
  let x_115 : vec4<f32> = u_xlat1;
  u_xlat1 = vec4<f32>(x_114.x, x_114.y, x_114.z, x_115.w);
  let x_118 : vec4<f32> = u_xlat0;
  let x_120 : vec4<f32> = vs_INTERP2;
  u_xlat2 = (vec3<f32>(x_118.x, x_118.x, x_118.x) * vec3<f32>(x_120.x, x_120.y, x_120.z));
  let x_124 : vec4<f32> = u_xlat0;
  let x_126 : vec4<f32> = u_xlat0;
  u_xlat3 = (vec3<f32>(x_124.y, x_124.z, x_124.w) * vec3<f32>(x_126.x, x_126.x, x_126.x));
  let x_142 : vec4<f32> = vs_INTERP3;
  let x_149 : f32 = x_146.x_GlobalMipBias.x;
  let x_150 : vec4<f32> = textureSampleBias(x_MainTex, sampler_MainTex, vec2<f32>(x_142.x, x_142.y), x_149);
  u_xlat4 = x_150;
  let x_152 : f32 = u_xlat4.w;
  u_xlat0.x = (x_152 + -0.5f);
  let x_158 : f32 = u_xlat0.x;
  let x_163 : f32 = vs_INTERP0.y;
  u_xlat64 = ((x_158 * 4.0f) + x_163);
  let x_165 : f32 = u_xlat64;
  u_xlat64 = (x_165 * 0.330000013f);
  let x_170 : f32 = vs_INTERP0.y;
  u_xlat65 = (x_170 + 1.0f);
  let x_172 : f32 = u_xlat65;
  u_xlat65 = ((x_172 * -1.333333373f) + 1.0f);
  let x_176 : f32 = u_xlat64;
  let x_177 : f32 = u_xlat65;
  u_xlat64 = max(x_176, x_177);
  let x_179 : f32 = u_xlat64;
  u_xlat1.w = max(x_179, 0.100000001f);
  let x_184 : vec4<f32> = vs_INTERP3;
  let x_187 : vec2<f32> = (vec2<f32>(x_184.x, x_184.y) * vec2<f32>(4.0f, 4.0f));
  let x_188 : vec3<f32> = u_xlat5;
  u_xlat5 = vec3<f32>(x_187.x, x_187.y, x_188.z);
  let x_196 : vec3<f32> = u_xlat5;
  let x_199 : f32 = x_146.x_GlobalMipBias.x;
  let x_200 : vec4<f32> = textureSampleBias(Texture2D_D7D66558, samplerTexture2D_D7D66558, vec2<f32>(x_196.x, x_196.y), x_199);
  let x_201 : vec3<f32> = vec3<f32>(x_200.x, x_200.y, x_200.z);
  let x_202 : vec4<f32> = u_xlat6;
  u_xlat6 = vec4<f32>(x_201.x, x_201.y, x_201.z, x_202.w);
  let x_209 : f32 = x_206.Vector1_8B35DE98;
  u_xlat65 = ((-(x_209) * 0.011111f) + 0.949999988f);
  let x_218 : f32 = x_206.Vector1_A492C01C;
  u_xlat66 = (x_218 + -10.0f);
  let x_221 : f32 = u_xlat66;
  let x_224 : f32 = vs_INTERP0.y;
  u_xlat66 = (-(x_221) + x_224);
  let x_226 : f32 = u_xlat66;
  u_xlat66 = (x_226 * 0.050000001f);
  let x_229 : f32 = u_xlat66;
  u_xlat66 = clamp(x_229, 0.0f, 1.0f);
  let x_232 : f32 = u_xlat66;
  u_xlat67 = ((x_232 * -2.0f) + 3.0f);
  let x_237 : f32 = u_xlat66;
  let x_238 : f32 = u_xlat66;
  u_xlat66 = (x_237 * x_238);
  let x_240 : f32 = u_xlat66;
  let x_241 : f32 = u_xlat67;
  u_xlat66 = (x_240 * x_241);
  let x_249 : vec4<f32> = vs_INTERP3;
  let x_252 : f32 = x_146.x_GlobalMipBias.x;
  let x_253 : vec4<f32> = textureSampleBias(Texture2D_DE8BF47E, samplerTexture2D_DE8BF47E, vec2<f32>(x_249.x, x_249.y), x_252);
  u_xlat7 = x_253;
  let x_255 : vec4<f32> = u_xlat7;
  u_xlat28 = ((vec3<f32>(x_255.w, x_255.y, x_255.z) * vec3<f32>(2.0f, 2.0f, 2.0f)) + vec3<f32>(-1.0f, -1.0f, -1.0f));
  let x_262 : vec3<f32> = u_xlat3;
  let x_263 : vec3<f32> = u_xlat28;
  u_xlat3 = (x_262 * vec3<f32>(x_263.y, x_263.y, x_263.y));
  let x_266 : vec3<f32> = u_xlat28;
  let x_268 : vec3<f32> = u_xlat2;
  let x_270 : vec3<f32> = u_xlat3;
  u_xlat2 = ((vec3<f32>(x_266.x, x_266.x, x_266.x) * x_268) + x_270);
  let x_272 : vec3<f32> = u_xlat28;
  let x_274 : vec4<f32> = u_xlat1;
  let x_277 : vec3<f32> = u_xlat2;
  let x_278 : vec3<f32> = ((vec3<f32>(x_272.z, x_272.z, x_272.z) * vec3<f32>(x_274.x, x_274.y, x_274.z)) + x_277);
  let x_279 : vec4<f32> = u_xlat1;
  u_xlat1 = vec4<f32>(x_278.x, x_278.y, x_278.z, x_279.w);
  let x_281 : vec4<f32> = u_xlat1;
  let x_283 : vec4<f32> = u_xlat1;
  u_xlat1.x = dot(vec3<f32>(x_281.x, x_281.y, x_281.z), vec3<f32>(x_283.x, x_283.y, x_283.z));
  let x_288 : f32 = u_xlat1.x;
  u_xlat1.x = max(x_288, 1.17549435e-37f);
  let x_293 : f32 = u_xlat1.x;
  u_xlat1.x = inverseSqrt(x_293);
  let x_297 : f32 = u_xlat1.x;
  let x_299 : f32 = u_xlat1.y;
  u_xlat1.x = (x_297 * x_299);
  let x_302 : f32 = u_xlat66;
  let x_304 : f32 = u_xlat1.x;
  let x_306 : f32 = u_xlat65;
  u_xlat1.x = ((x_302 * x_304) + -(x_306));
  let x_311 : f32 = u_xlat1.x;
  u_xlat1.x = (x_311 * 10.0f);
  let x_316 : f32 = u_xlat1.x;
  u_xlat1.x = clamp(x_316, 0.0f, 1.0f);
  let x_321 : f32 = u_xlat1.x;
  u_xlat22.x = ((x_321 * -2.0f) + 3.0f);
  let x_326 : f32 = u_xlat1.x;
  let x_328 : f32 = u_xlat1.x;
  u_xlat1.x = (x_326 * x_328);
  let x_332 : f32 = u_xlat1.x;
  let x_334 : f32 = u_xlat22.x;
  u_xlat1.x = (x_332 * x_334);
  let x_337 : vec4<f32> = u_xlat1;
  let x_340 : vec2<f32> = min(vec2<f32>(x_337.x, x_337.w), vec2<f32>(1.0f, 1.0f));
  let x_341 : vec4<f32> = u_xlat1;
  u_xlat1 = vec4<f32>(x_340.x, x_341.y, x_341.z, x_340.y);
  let x_344 : f32 = u_xlat1.x;
  u_xlat1.x = (-(x_344) + 1.0f);
  let x_348 : vec4<f32> = u_xlat4;
  let x_350 : vec4<f32> = u_xlat6;
  u_xlat2 = (vec3<f32>(x_348.x, x_348.y, x_348.z) + -(vec3<f32>(x_350.x, x_350.y, x_350.z)));
  let x_354 : vec4<f32> = u_xlat1;
  let x_356 : vec3<f32> = u_xlat2;
  let x_358 : vec4<f32> = u_xlat6;
  u_xlat2 = ((vec3<f32>(x_354.x, x_354.x, x_354.x) * x_356) + vec3<f32>(x_358.x, x_358.y, x_358.z));
  let x_361 : vec4<f32> = u_xlat1;
  let x_363 : vec3<f32> = u_xlat2;
  u_xlat3 = (vec3<f32>(x_361.w, x_361.w, x_361.w) * x_363);
  let x_371 : vec3<f32> = u_xlat5;
  let x_374 : f32 = x_146.x_GlobalMipBias.x;
  let x_375 : vec4<f32> = textureSampleBias(Texture2D_C005B064, samplerTexture2D_C005B064, vec2<f32>(x_371.x, x_371.y), x_374);
  u_xlat25 = vec3<f32>(x_375.x, x_375.y, x_375.w);
  let x_378 : f32 = u_xlat25.x;
  let x_380 : f32 = u_xlat25.z;
  u_xlat25.x = (x_378 * x_380);
  let x_383 : vec3<f32> = u_xlat25;
  let x_388 : vec2<f32> = ((vec2<f32>(x_383.x, x_383.y) * vec2<f32>(2.0f, 2.0f)) + vec2<f32>(-1.0f, -1.0f));
  let x_389 : vec3<f32> = u_xlat5;
  u_xlat5 = vec3<f32>(x_388.x, x_388.y, x_389.z);
  let x_391 : vec3<f32> = u_xlat5;
  let x_393 : vec3<f32> = u_xlat5;
  u_xlat22.x = dot(vec2<f32>(x_391.x, x_391.y), vec2<f32>(x_393.x, x_393.y));
  let x_398 : f32 = u_xlat22.x;
  u_xlat22.x = min(x_398, 1.0f);
  let x_402 : f32 = u_xlat22.x;
  u_xlat22.x = (-(x_402) + 1.0f);
  let x_407 : f32 = u_xlat22.x;
  u_xlat22.x = sqrt(x_407);
  let x_411 : f32 = u_xlat22.x;
  u_xlat5.z = max(x_411, 1.00000002e-16f);
  let x_418 : vec4<f32> = x_59.unity_ObjectToWorld[0i];
  let x_421 : vec4<f32> = x_59.unity_ObjectToWorld[0i];
  u_xlat22.x = dot(vec3<f32>(x_418.x, x_418.y, x_418.z), vec3<f32>(x_421.x, x_421.y, x_421.z));
  let x_426 : f32 = u_xlat22.x;
  u_xlat6.x = sqrt(x_426);
  let x_430 : vec4<f32> = x_59.unity_ObjectToWorld[1i];
  let x_433 : vec4<f32> = x_59.unity_ObjectToWorld[1i];
  u_xlat22.x = dot(vec3<f32>(x_430.x, x_430.y, x_430.z), vec3<f32>(x_433.x, x_433.y, x_433.z));
  let x_438 : f32 = u_xlat22.x;
  u_xlat6.y = sqrt(x_438);
  let x_443 : vec4<f32> = x_59.unity_ObjectToWorld[2i];
  let x_446 : vec4<f32> = x_59.unity_ObjectToWorld[2i];
  u_xlat22.x = dot(vec3<f32>(x_443.x, x_443.y, x_443.z), vec3<f32>(x_446.x, x_446.y, x_446.z));
  let x_451 : f32 = u_xlat22.x;
  u_xlat6.z = sqrt(x_451);
  let x_454 : vec4<f32> = u_xlat6;
  let x_456 : vec4<f32> = u_xlat6;
  u_xlat22.x = dot(vec3<f32>(x_454.x, x_454.y, x_454.z), vec3<f32>(x_456.x, x_456.y, x_456.z));
  let x_461 : f32 = u_xlat22.x;
  u_xlat22.x = sqrt(x_461);
  let x_465 : f32 = u_xlat22.x;
  let x_468 : f32 = x_206.Vector1_90E376AD;
  u_xlat22.x = (x_465 * x_468);
  let x_472 : f32 = u_xlat22.x;
  u_xlat22.x = (x_472 * 30.0f);
  let x_476 : vec3<f32> = u_xlat22;
  let x_478 : vec4<f32> = vs_INTERP3;
  let x_480 : vec2<f32> = (vec2<f32>(x_476.x, x_476.x) * vec2<f32>(x_478.x, x_478.y));
  let x_481 : vec3<f32> = u_xlat22;
  u_xlat22 = vec3<f32>(x_480.x, x_480.y, x_481.z);
  let x_488 : vec3<f32> = u_xlat22;
  let x_491 : f32 = x_146.x_GlobalMipBias.x;
  let x_492 : vec4<f32> = textureSampleBias(x_SampleTexture2D_a490b3241735d68e9ee2d1f1bbfed8dc_Texture_1, sampler_SampleTexture2D_a490b3241735d68e9ee2d1f1bbfed8dc_Texture_1, vec2<f32>(x_488.x, x_488.y), x_491);
  u_xlat25 = vec3<f32>(x_492.x, x_492.y, x_492.w);
  let x_495 : f32 = u_xlat25.x;
  let x_497 : f32 = u_xlat25.z;
  u_xlat25.x = (x_495 * x_497);
  let x_500 : vec3<f32> = u_xlat25;
  let x_503 : vec2<f32> = ((vec2<f32>(x_500.x, x_500.y) * vec2<f32>(2.0f, 2.0f)) + vec2<f32>(-1.0f, -1.0f));
  let x_504 : vec3<f32> = u_xlat22;
  u_xlat22 = vec3<f32>(x_503.x, x_503.y, x_504.z);
  let x_506 : vec3<f32> = u_xlat22;
  let x_508 : vec3<f32> = u_xlat22;
  u_xlat65 = dot(vec2<f32>(x_506.x, x_506.y), vec2<f32>(x_508.x, x_508.y));
  let x_511 : f32 = u_xlat65;
  u_xlat65 = min(x_511, 1.0f);
  let x_513 : f32 = u_xlat65;
  u_xlat65 = (-(x_513) + 1.0f);
  let x_516 : f32 = u_xlat65;
  u_xlat65 = sqrt(x_516);
  let x_518 : f32 = u_xlat65;
  u_xlat65 = max(x_518, 1.00000002e-16f);
  let x_520 : vec3<f32> = u_xlat22;
  let x_522 : vec3<f32> = u_xlat28;
  let x_524 : vec2<f32> = (vec2<f32>(x_520.x, x_520.y) + vec2<f32>(x_522.x, x_522.y));
  let x_525 : vec4<f32> = u_xlat6;
  u_xlat6 = vec4<f32>(x_524.x, x_524.y, x_525.z, x_525.w);
  let x_527 : f32 = u_xlat65;
  let x_529 : f32 = u_xlat28.z;
  u_xlat6.z = (x_527 * x_529);
  let x_532 : vec4<f32> = u_xlat6;
  let x_534 : vec4<f32> = u_xlat6;
  u_xlat22.x = dot(vec3<f32>(x_532.x, x_532.y, x_532.z), vec3<f32>(x_534.x, x_534.y, x_534.z));
  let x_539 : f32 = u_xlat22.x;
  u_xlat22.x = max(x_539, 1.17549435e-37f);
  let x_543 : f32 = u_xlat22.x;
  u_xlat22.x = inverseSqrt(x_543);
  let x_546 : vec4<f32> = u_xlat6;
  let x_548 : vec3<f32> = u_xlat22;
  let x_551 : vec3<f32> = u_xlat5;
  u_xlat25 = ((vec3<f32>(x_546.x, x_546.y, x_546.z) * vec3<f32>(x_548.x, x_548.x, x_548.x)) + -(x_551));
  let x_554 : vec4<f32> = u_xlat1;
  let x_556 : vec3<f32> = u_xlat25;
  let x_558 : vec3<f32> = u_xlat5;
  let x_559 : vec3<f32> = ((vec3<f32>(x_554.x, x_554.x, x_554.x) * x_556) + x_558);
  let x_560 : vec4<f32> = u_xlat4;
  u_xlat4 = vec4<f32>(x_560.x, x_559.x, x_559.y, x_559.z);
  let x_563 : f32 = u_xlat0.x;
  u_xlat0.x = (-(abs(x_563)) + 1.0f);
  let x_568 : vec4<f32> = u_xlat0;
  let x_569 : vec4<f32> = u_xlat4;
  u_xlat0 = (x_568 * vec4<f32>(x_569.x, x_569.z, x_569.z, x_569.z));
  let x_573 : f32 = u_xlat0.x;
  let x_575 : f32 = x_206.Vector1_6E11FCEA;
  u_xlat0.x = (x_573 * x_575);
  let x_579 : f32 = u_xlat1.x;
  let x_581 : f32 = u_xlat0.x;
  u_xlat0.x = ((x_579 * x_581) + -0.850000024f);
  let x_587 : f32 = u_xlat1.w;
  let x_589 : f32 = u_xlat0.x;
  u_xlat0.x = ((x_587 * x_589) + 0.850000024f);
  let x_595 : f32 = u_xlat0.x;
  u_xlat0.x = clamp(x_595, 0.0f, 1.0f);
  let x_598 : vec4<f32> = u_xlat4;
  let x_600 : vec4<f32> = vs_INTERP2;
  let x_603 : vec4<f32> = u_xlat0;
  u_xlat21 = ((vec3<f32>(x_598.y, x_598.y, x_598.y) * vec3<f32>(x_600.x, x_600.y, x_600.z)) + vec3<f32>(x_603.y, x_603.z, x_603.w));
  let x_606 : vec4<f32> = u_xlat4;
  let x_608 : vec3<f32> = vs_INTERP1;
  let x_610 : vec3<f32> = u_xlat21;
  u_xlat21 = ((vec3<f32>(x_606.w, x_606.w, x_606.w) * x_608) + x_610);
  let x_612 : vec3<f32> = u_xlat21;
  let x_613 : vec3<f32> = u_xlat21;
  u_xlat1.x = dot(x_612, x_613);
  let x_617 : f32 = u_xlat1.x;
  u_xlat1.x = inverseSqrt(x_617);
  let x_620 : vec3<f32> = u_xlat21;
  let x_621 : vec4<f32> = u_xlat1;
  u_xlat21 = (x_620 * vec3<f32>(x_621.x, x_621.x, x_621.x));
  let x_627 : f32 = x_146.unity_OrthoParams.w;
  u_xlatb1 = (x_627 == 0.0f);
  let x_629 : vec3<f32> = vs_INTERP0;
  let x_634 : vec3<f32> = x_146.x_WorldSpaceCameraPos;
  let x_635 : vec3<f32> = (-(x_629) + x_634);
  let x_636 : vec4<f32> = u_xlat4;
  u_xlat4 = vec4<f32>(x_635.x, x_635.y, x_635.z, x_636.w);
  let x_638 : vec4<f32> = u_xlat4;
  let x_640 : vec4<f32> = u_xlat4;
  u_xlat22.x = dot(vec3<f32>(x_638.x, x_638.y, x_638.z), vec3<f32>(x_640.x, x_640.y, x_640.z));
  let x_645 : f32 = u_xlat22.x;
  u_xlat22.x = inverseSqrt(x_645);
  let x_648 : vec3<f32> = u_xlat22;
  let x_650 : vec4<f32> = u_xlat4;
  let x_652 : vec3<f32> = (vec3<f32>(x_648.x, x_648.x, x_648.x) * vec3<f32>(x_650.x, x_650.y, x_650.z));
  let x_653 : vec4<f32> = u_xlat4;
  u_xlat4 = vec4<f32>(x_652.x, x_652.y, x_652.z, x_653.w);
  let x_655 : bool = u_xlatb1;
  if (x_655) {
    let x_660 : f32 = u_xlat4.x;
    x_656 = x_660;
  } else {
    let x_664 : f32 = x_146.unity_MatrixV[0i].z;
    x_656 = x_664;
  }
  let x_665 : f32 = x_656;
  u_xlat5.x = x_665;
  let x_667 : bool = u_xlatb1;
  if (x_667) {
    let x_672 : f32 = u_xlat4.y;
    x_668 = x_672;
  } else {
    let x_675 : f32 = x_146.unity_MatrixV[1i].z;
    x_668 = x_675;
  }
  let x_676 : f32 = x_668;
  u_xlat5.y = x_676;
  let x_678 : bool = u_xlatb1;
  if (x_678) {
    let x_683 : f32 = u_xlat4.z;
    x_679 = x_683;
  } else {
    let x_686 : f32 = x_146.unity_MatrixV[2i].z;
    x_679 = x_686;
  }
  let x_687 : f32 = x_679;
  u_xlat5.z = x_687;
  let x_689 : vec3<f32> = vs_INTERP0;
  let x_696 : vec4<f32> = x_694.x_CascadeShadowSplitSpheres0;
  let x_699 : vec3<f32> = (x_689 + -(vec3<f32>(x_696.x, x_696.y, x_696.z)));
  let x_700 : vec4<f32> = u_xlat1;
  u_xlat1 = vec4<f32>(x_699.x, x_699.y, x_699.z, x_700.w);
  let x_702 : vec3<f32> = vs_INTERP0;
  let x_704 : vec4<f32> = x_694.x_CascadeShadowSplitSpheres1;
  let x_707 : vec3<f32> = (x_702 + -(vec3<f32>(x_704.x, x_704.y, x_704.z)));
  let x_708 : vec4<f32> = u_xlat4;
  u_xlat4 = vec4<f32>(x_707.x, x_707.y, x_707.z, x_708.w);
  let x_710 : vec3<f32> = vs_INTERP0;
  let x_712 : vec4<f32> = x_694.x_CascadeShadowSplitSpheres2;
  let x_715 : vec3<f32> = (x_710 + -(vec3<f32>(x_712.x, x_712.y, x_712.z)));
  let x_716 : vec4<f32> = u_xlat6;
  u_xlat6 = vec4<f32>(x_715.x, x_715.y, x_715.z, x_716.w);
  let x_718 : vec3<f32> = vs_INTERP0;
  let x_720 : vec4<f32> = x_694.x_CascadeShadowSplitSpheres3;
  u_xlat28 = (x_718 + -(vec3<f32>(x_720.x, x_720.y, x_720.z)));
  let x_725 : vec4<f32> = u_xlat1;
  let x_727 : vec4<f32> = u_xlat1;
  u_xlat8.x = dot(vec3<f32>(x_725.x, x_725.y, x_725.z), vec3<f32>(x_727.x, x_727.y, x_727.z));
  let x_731 : vec4<f32> = u_xlat4;
  let x_733 : vec4<f32> = u_xlat4;
  u_xlat8.y = dot(vec3<f32>(x_731.x, x_731.y, x_731.z), vec3<f32>(x_733.x, x_733.y, x_733.z));
  let x_737 : vec4<f32> = u_xlat6;
  let x_739 : vec4<f32> = u_xlat6;
  u_xlat8.z = dot(vec3<f32>(x_737.x, x_737.y, x_737.z), vec3<f32>(x_739.x, x_739.y, x_739.z));
  let x_743 : vec3<f32> = u_xlat28;
  let x_744 : vec3<f32> = u_xlat28;
  u_xlat8.w = dot(x_743, x_744);
  let x_750 : vec4<f32> = u_xlat8;
  let x_752 : vec4<f32> = x_694.x_CascadeShadowSplitSphereRadii;
  u_xlatb4 = (x_750 < x_752);
  let x_755 : bool = u_xlatb4.x;
  u_xlat6.x = select(0.0f, 1.0f, x_755);
  let x_759 : bool = u_xlatb4.y;
  u_xlat6.y = select(0.0f, 1.0f, x_759);
  let x_763 : bool = u_xlatb4.z;
  u_xlat6.z = select(0.0f, 1.0f, x_763);
  let x_767 : bool = u_xlatb4.w;
  u_xlat6.w = select(0.0f, 1.0f, x_767);
  let x_771 : bool = u_xlatb4.x;
  u_xlat1.x = select(-0.0f, -1.0f, x_771);
  let x_776 : bool = u_xlatb4.y;
  u_xlat1.y = select(-0.0f, -1.0f, x_776);
  let x_780 : bool = u_xlatb4.z;
  u_xlat1.z = select(-0.0f, -1.0f, x_780);
  let x_783 : vec4<f32> = u_xlat1;
  let x_785 : vec4<f32> = u_xlat6;
  let x_787 : vec3<f32> = (vec3<f32>(x_783.x, x_783.y, x_783.z) + vec3<f32>(x_785.y, x_785.z, x_785.w));
  let x_788 : vec4<f32> = u_xlat1;
  u_xlat1 = vec4<f32>(x_787.x, x_787.y, x_787.z, x_788.w);
  let x_790 : vec4<f32> = u_xlat1;
  let x_793 : vec3<f32> = max(vec3<f32>(x_790.x, x_790.y, x_790.z), vec3<f32>(0.0f, 0.0f, 0.0f));
  let x_794 : vec4<f32> = u_xlat6;
  u_xlat6 = vec4<f32>(x_794.x, x_793.x, x_793.y, x_793.z);
  let x_796 : vec4<f32> = u_xlat6;
  u_xlat1.x = dot(x_796, vec4<f32>(4.0f, 3.0f, 2.0f, 1.0f));
  let x_801 : f32 = u_xlat1.x;
  u_xlat1.x = (-(x_801) + 4.0f);
  let x_808 : f32 = u_xlat1.x;
  u_xlatu1 = u32(x_808);
  let x_812 : u32 = u_xlatu1;
  u_xlati1 = (bitcast<i32>(x_812) << bitcast<u32>(2i));
  let x_815 : vec3<f32> = vs_INTERP0;
  let x_817 : i32 = u_xlati1;
  let x_820 : i32 = u_xlati1;
  let x_824 : vec4<f32> = x_694.x_MainLightWorldToShadow[((x_817 + 1i) / 4i)][((x_820 + 1i) % 4i)];
  let x_826 : vec3<f32> = (vec3<f32>(x_815.y, x_815.y, x_815.y) * vec3<f32>(x_824.x, x_824.y, x_824.z));
  let x_827 : vec4<f32> = u_xlat4;
  u_xlat4 = vec4<f32>(x_826.x, x_826.y, x_826.z, x_827.w);
  let x_829 : i32 = u_xlati1;
  let x_831 : i32 = u_xlati1;
  let x_834 : vec4<f32> = x_694.x_MainLightWorldToShadow[(x_829 / 4i)][(x_831 % 4i)];
  let x_836 : vec3<f32> = vs_INTERP0;
  let x_839 : vec4<f32> = u_xlat4;
  let x_841 : vec3<f32> = ((vec3<f32>(x_834.x, x_834.y, x_834.z) * vec3<f32>(x_836.x, x_836.x, x_836.x)) + vec3<f32>(x_839.x, x_839.y, x_839.z));
  let x_842 : vec4<f32> = u_xlat4;
  u_xlat4 = vec4<f32>(x_841.x, x_841.y, x_841.z, x_842.w);
  let x_844 : i32 = u_xlati1;
  let x_847 : i32 = u_xlati1;
  let x_851 : vec4<f32> = x_694.x_MainLightWorldToShadow[((x_844 + 2i) / 4i)][((x_847 + 2i) % 4i)];
  let x_853 : vec3<f32> = vs_INTERP0;
  let x_856 : vec4<f32> = u_xlat4;
  let x_858 : vec3<f32> = ((vec3<f32>(x_851.x, x_851.y, x_851.z) * vec3<f32>(x_853.z, x_853.z, x_853.z)) + vec3<f32>(x_856.x, x_856.y, x_856.z));
  let x_859 : vec4<f32> = u_xlat4;
  u_xlat4 = vec4<f32>(x_858.x, x_858.y, x_858.z, x_859.w);
  let x_861 : vec4<f32> = u_xlat4;
  let x_863 : i32 = u_xlati1;
  let x_866 : i32 = u_xlati1;
  let x_870 : vec4<f32> = x_694.x_MainLightWorldToShadow[((x_863 + 3i) / 4i)][((x_866 + 3i) % 4i)];
  let x_872 : vec3<f32> = (vec3<f32>(x_861.x, x_861.y, x_861.z) + vec3<f32>(x_870.x, x_870.y, x_870.z));
  let x_873 : vec4<f32> = u_xlat1;
  u_xlat1 = vec4<f32>(x_872.x, x_872.y, x_872.z, x_873.w);
  let x_882 : vec2<f32> = vs_INTERP4;
  let x_884 : f32 = x_146.x_GlobalMipBias.x;
  let x_885 : vec4<f32> = textureSampleBias(unity_Lightmap, samplerunity_Lightmap, x_882, x_884);
  let x_886 : vec3<f32> = vec3<f32>(x_885.x, x_885.y, x_885.z);
  let x_887 : vec4<f32> = u_xlat4;
  u_xlat4 = vec4<f32>(x_886.x, x_886.y, x_886.z, x_887.w);
  let x_890 : vec4<f32> = x_146.x_ScaledScreenParams;
  let x_891 : vec2<f32> = vec2<f32>(x_890.x, x_890.y);
  let x_895 : vec2<f32> = (vec2<f32>(1.0f, 1.0f) / vec2<f32>(x_891.x, x_891.y));
  let x_896 : vec4<f32> = u_xlat6;
  u_xlat6 = vec4<f32>(x_895.x, x_895.y, x_896.z, x_896.w);
  let x_898 : vec4<f32> = u_xlat6;
  let x_900 : vec4<f32> = hlslcc_FragCoord;
  let x_902 : vec2<f32> = (vec2<f32>(x_898.x, x_898.y) * vec2<f32>(x_900.x, x_900.y));
  let x_903 : vec4<f32> = u_xlat6;
  u_xlat6 = vec4<f32>(x_902.x, x_902.y, x_903.z, x_903.w);
  let x_906 : f32 = u_xlat6.y;
  let x_908 : f32 = x_146.x_ScaleBiasRt.x;
  let x_911 : f32 = x_146.x_ScaleBiasRt.y;
  u_xlat65 = ((x_906 * x_908) + x_911);
  let x_913 : f32 = u_xlat65;
  u_xlat6.z = (-(x_913) + 1.0f);
  let x_917 : vec3<f32> = u_xlat3;
  u_xlat3 = (x_917 * vec3<f32>(0.863999963f, 0.863999963f, 0.863999963f));
  let x_921 : vec4<f32> = u_xlat1;
  let x_923 : vec3<f32> = u_xlat2;
  u_xlat2 = ((vec3<f32>(x_921.w, x_921.w, x_921.w) * x_923) + vec3<f32>(-0.039999999f, -0.039999999f, -0.039999999f));
  let x_928 : vec3<f32> = u_xlat2;
  u_xlat2 = ((x_928 * vec3<f32>(0.100000001f, 0.100000001f, 0.100000001f)) + vec3<f32>(0.039999999f, 0.039999999f, 0.039999999f));
  let x_935 : f32 = u_xlat0.x;
  u_xlat22.z = (-(x_935) + 1.0f);
  let x_940 : f32 = u_xlat22.z;
  let x_942 : f32 = u_xlat22.z;
  u_xlat65 = (x_940 * x_942);
  let x_944 : f32 = u_xlat65;
  u_xlat65 = max(x_944, 0.0078125f);
  let x_947 : f32 = u_xlat65;
  let x_948 : f32 = u_xlat65;
  u_xlat66 = (x_947 * x_948);
  let x_951 : f32 = u_xlat0.x;
  u_xlat0.x = (x_951 + 0.136000037f);
  let x_956 : f32 = u_xlat0.x;
  u_xlat0.x = min(x_956, 1.0f);
  let x_959 : f32 = u_xlat65;
  u_xlat67 = ((x_959 * 4.0f) + 2.0f);
  let x_968 : vec4<f32> = u_xlat6;
  let x_971 : f32 = x_146.x_GlobalMipBias.x;
  let x_972 : vec4<f32> = textureSampleBias(x_ScreenSpaceOcclusionTexture, sampler_ScreenSpaceOcclusionTexture, vec2<f32>(x_968.x, x_968.z), x_971);
  u_xlat68 = x_972.x;
  let x_974 : f32 = u_xlat68;
  u_xlat6.x = (x_974 + -1.0f);
  let x_978 : f32 = x_146.x_AmbientOcclusionParam.w;
  let x_980 : f32 = u_xlat6.x;
  u_xlat6.x = ((x_978 * x_980) + 1.0f);
  let x_985 : f32 = u_xlat7.x;
  let x_986 : f32 = u_xlat68;
  u_xlat68 = min(x_985, x_986);
  let x_990 : f32 = x_694.x_MainLightShadowParams.y;
  u_xlatb27 = (0.0f < x_990);
  let x_992 : bool = u_xlatb27;
  if (x_992) {
    let x_996 : f32 = x_694.x_MainLightShadowParams.y;
    u_xlatb27 = (x_996 == 1.0f);
    let x_998 : bool = u_xlatb27;
    if (x_998) {
      let x_1001 : vec4<f32> = u_xlat1;
      let x_1004 : vec4<f32> = x_694.x_MainLightShadowOffset0;
      u_xlat7 = (vec4<f32>(x_1001.x, x_1001.y, x_1001.x, x_1001.y) + x_1004);
      let x_1007 : vec4<f32> = u_xlat7;
      let x_1008 : vec2<f32> = vec2<f32>(x_1007.x, x_1007.y);
      let x_1010 : f32 = u_xlat1.z;
      txVec0 = vec3<f32>(x_1008.x, x_1008.y, x_1010);
      let x_1022 : vec3<f32> = txVec0;
      let x_1024 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1022.xy, x_1022.z);
      u_xlat8.x = x_1024;
      let x_1027 : vec4<f32> = u_xlat7;
      let x_1028 : vec2<f32> = vec2<f32>(x_1027.z, x_1027.w);
      let x_1030 : f32 = u_xlat1.z;
      txVec1 = vec3<f32>(x_1028.x, x_1028.y, x_1030);
      let x_1037 : vec3<f32> = txVec1;
      let x_1039 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1037.xy, x_1037.z);
      u_xlat8.y = x_1039;
      let x_1041 : vec4<f32> = u_xlat1;
      let x_1044 : vec4<f32> = x_694.x_MainLightShadowOffset1;
      u_xlat7 = (vec4<f32>(x_1041.x, x_1041.y, x_1041.x, x_1041.y) + x_1044);
      let x_1047 : vec4<f32> = u_xlat7;
      let x_1048 : vec2<f32> = vec2<f32>(x_1047.x, x_1047.y);
      let x_1050 : f32 = u_xlat1.z;
      txVec2 = vec3<f32>(x_1048.x, x_1048.y, x_1050);
      let x_1057 : vec3<f32> = txVec2;
      let x_1059 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1057.xy, x_1057.z);
      u_xlat8.z = x_1059;
      let x_1062 : vec4<f32> = u_xlat7;
      let x_1063 : vec2<f32> = vec2<f32>(x_1062.z, x_1062.w);
      let x_1065 : f32 = u_xlat1.z;
      txVec3 = vec3<f32>(x_1063.x, x_1063.y, x_1065);
      let x_1072 : vec3<f32> = txVec3;
      let x_1074 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1072.xy, x_1072.z);
      u_xlat8.w = x_1074;
      let x_1077 : vec4<f32> = u_xlat8;
      u_xlat27.x = dot(x_1077, vec4<f32>(0.25f, 0.25f, 0.25f, 0.25f));
    } else {
      let x_1085 : f32 = x_694.x_MainLightShadowParams.y;
      u_xlatb48 = (x_1085 == 2.0f);
      let x_1087 : bool = u_xlatb48;
      if (x_1087) {
        let x_1092 : vec4<f32> = u_xlat1;
        let x_1095 : vec4<f32> = x_694.x_MainLightShadowmapSize;
        u_xlat48 = ((vec2<f32>(x_1092.x, x_1092.y) * vec2<f32>(x_1095.z, x_1095.w)) + vec2<f32>(0.5f, 0.5f));
        let x_1101 : vec2<f32> = u_xlat48;
        u_xlat48 = floor(x_1101);
        let x_1103 : vec4<f32> = u_xlat1;
        let x_1106 : vec4<f32> = x_694.x_MainLightShadowmapSize;
        let x_1109 : vec2<f32> = u_xlat48;
        let x_1111 : vec2<f32> = ((vec2<f32>(x_1103.x, x_1103.y) * vec2<f32>(x_1106.z, x_1106.w)) + -(x_1109));
        let x_1112 : vec4<f32> = u_xlat7;
        u_xlat7 = vec4<f32>(x_1111.x, x_1111.y, x_1112.z, x_1112.w);
        let x_1114 : vec4<f32> = u_xlat7;
        u_xlat8 = (vec4<f32>(x_1114.x, x_1114.x, x_1114.y, x_1114.y) + vec4<f32>(0.5f, 1.0f, 0.5f, 1.0f));
        let x_1119 : vec4<f32> = u_xlat8;
        let x_1121 : vec4<f32> = u_xlat8;
        u_xlat9 = (vec4<f32>(x_1119.x, x_1119.x, x_1119.z, x_1119.z) * vec4<f32>(x_1121.x, x_1121.x, x_1121.z, x_1121.z));
        let x_1125 : vec4<f32> = u_xlat9;
        u_xlat49 = (vec2<f32>(x_1125.y, x_1125.w) * vec2<f32>(0.079999998f, 0.079999998f));
        let x_1130 : vec4<f32> = u_xlat9;
        let x_1133 : vec4<f32> = u_xlat7;
        let x_1136 : vec2<f32> = ((vec2<f32>(x_1130.x, x_1130.z) * vec2<f32>(0.5f, 0.5f)) + -(vec2<f32>(x_1133.x, x_1133.y)));
        let x_1137 : vec4<f32> = u_xlat8;
        u_xlat8 = vec4<f32>(x_1136.x, x_1137.y, x_1136.y, x_1137.w);
        let x_1139 : vec4<f32> = u_xlat7;
        let x_1142 : vec2<f32> = (-(vec2<f32>(x_1139.x, x_1139.y)) + vec2<f32>(1.0f, 1.0f));
        let x_1143 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_1142.x, x_1142.y, x_1143.z, x_1143.w);
        let x_1146 : vec4<f32> = u_xlat7;
        u_xlat51 = min(vec2<f32>(x_1146.x, x_1146.y), vec2<f32>(0.0f, 0.0f));
        let x_1150 : vec2<f32> = u_xlat51;
        let x_1152 : vec2<f32> = u_xlat51;
        let x_1154 : vec4<f32> = u_xlat9;
        u_xlat51 = ((-(x_1150) * x_1152) + vec2<f32>(x_1154.x, x_1154.y));
        let x_1157 : vec4<f32> = u_xlat7;
        let x_1159 : vec2<f32> = max(vec2<f32>(x_1157.x, x_1157.y), vec2<f32>(0.0f, 0.0f));
        let x_1160 : vec4<f32> = u_xlat7;
        u_xlat7 = vec4<f32>(x_1159.x, x_1159.y, x_1160.z, x_1160.w);
        let x_1162 : vec4<f32> = u_xlat7;
        let x_1165 : vec4<f32> = u_xlat7;
        let x_1168 : vec4<f32> = u_xlat8;
        let x_1170 : vec2<f32> = ((-(vec2<f32>(x_1162.x, x_1162.y)) * vec2<f32>(x_1165.x, x_1165.y)) + vec2<f32>(x_1168.y, x_1168.w));
        let x_1171 : vec4<f32> = u_xlat7;
        u_xlat7 = vec4<f32>(x_1170.x, x_1170.y, x_1171.z, x_1171.w);
        let x_1173 : vec2<f32> = u_xlat51;
        u_xlat51 = (x_1173 + vec2<f32>(1.0f, 1.0f));
        let x_1175 : vec4<f32> = u_xlat7;
        let x_1177 : vec2<f32> = (vec2<f32>(x_1175.x, x_1175.y) + vec2<f32>(1.0f, 1.0f));
        let x_1178 : vec4<f32> = u_xlat7;
        u_xlat7 = vec4<f32>(x_1177.x, x_1177.y, x_1178.z, x_1178.w);
        let x_1181 : vec4<f32> = u_xlat8;
        let x_1185 : vec2<f32> = (vec2<f32>(x_1181.x, x_1181.z) * vec2<f32>(0.159999996f, 0.159999996f));
        let x_1186 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_1185.x, x_1185.y, x_1186.z, x_1186.w);
        let x_1189 : vec4<f32> = u_xlat9;
        let x_1191 : vec2<f32> = (vec2<f32>(x_1189.x, x_1189.y) * vec2<f32>(0.159999996f, 0.159999996f));
        let x_1192 : vec4<f32> = u_xlat11;
        u_xlat11 = vec4<f32>(x_1191.x, x_1191.y, x_1192.z, x_1192.w);
        let x_1194 : vec2<f32> = u_xlat51;
        let x_1195 : vec2<f32> = (x_1194 * vec2<f32>(0.159999996f, 0.159999996f));
        let x_1196 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_1195.x, x_1195.y, x_1196.z, x_1196.w);
        let x_1199 : vec4<f32> = u_xlat7;
        let x_1201 : vec2<f32> = (vec2<f32>(x_1199.x, x_1199.y) * vec2<f32>(0.159999996f, 0.159999996f));
        let x_1202 : vec4<f32> = u_xlat12;
        u_xlat12 = vec4<f32>(x_1201.x, x_1201.y, x_1202.z, x_1202.w);
        let x_1204 : vec4<f32> = u_xlat8;
        let x_1206 : vec2<f32> = (vec2<f32>(x_1204.y, x_1204.w) * vec2<f32>(0.159999996f, 0.159999996f));
        let x_1207 : vec4<f32> = u_xlat7;
        u_xlat7 = vec4<f32>(x_1206.x, x_1206.y, x_1207.z, x_1207.w);
        let x_1210 : f32 = u_xlat9.x;
        u_xlat10.z = x_1210;
        let x_1213 : f32 = u_xlat7.x;
        u_xlat10.w = x_1213;
        let x_1216 : f32 = u_xlat12.x;
        u_xlat11.z = x_1216;
        let x_1219 : f32 = u_xlat49.x;
        u_xlat11.w = x_1219;
        let x_1221 : vec4<f32> = u_xlat10;
        let x_1223 : vec4<f32> = u_xlat11;
        u_xlat8 = (vec4<f32>(x_1221.z, x_1221.w, x_1221.x, x_1221.z) + vec4<f32>(x_1223.z, x_1223.w, x_1223.x, x_1223.z));
        let x_1227 : f32 = u_xlat10.y;
        u_xlat9.z = x_1227;
        let x_1230 : f32 = u_xlat7.y;
        u_xlat9.w = x_1230;
        let x_1233 : f32 = u_xlat11.y;
        u_xlat12.z = x_1233;
        let x_1236 : f32 = u_xlat49.y;
        u_xlat12.w = x_1236;
        let x_1238 : vec4<f32> = u_xlat9;
        let x_1240 : vec4<f32> = u_xlat12;
        let x_1242 : vec3<f32> = (vec3<f32>(x_1238.z, x_1238.y, x_1238.w) + vec3<f32>(x_1240.z, x_1240.y, x_1240.w));
        let x_1243 : vec4<f32> = u_xlat7;
        u_xlat7 = vec4<f32>(x_1242.x, x_1242.y, x_1242.z, x_1243.w);
        let x_1245 : vec4<f32> = u_xlat11;
        let x_1247 : vec4<f32> = u_xlat8;
        let x_1249 : vec3<f32> = (vec3<f32>(x_1245.x, x_1245.z, x_1245.w) / vec3<f32>(x_1247.z, x_1247.w, x_1247.y));
        let x_1250 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_1249.x, x_1249.y, x_1249.z, x_1250.w);
        let x_1252 : vec4<f32> = u_xlat9;
        let x_1257 : vec3<f32> = (vec3<f32>(x_1252.x, x_1252.y, x_1252.z) + vec3<f32>(-2.5f, -0.5f, 1.5f));
        let x_1258 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_1257.x, x_1257.y, x_1257.z, x_1258.w);
        let x_1260 : vec4<f32> = u_xlat12;
        let x_1262 : vec4<f32> = u_xlat7;
        let x_1264 : vec3<f32> = (vec3<f32>(x_1260.z, x_1260.y, x_1260.w) / vec3<f32>(x_1262.x, x_1262.y, x_1262.z));
        let x_1265 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_1264.x, x_1264.y, x_1264.z, x_1265.w);
        let x_1267 : vec4<f32> = u_xlat10;
        let x_1269 : vec3<f32> = (vec3<f32>(x_1267.x, x_1267.y, x_1267.z) + vec3<f32>(-2.5f, -0.5f, 1.5f));
        let x_1270 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_1269.x, x_1269.y, x_1269.z, x_1270.w);
        let x_1272 : vec4<f32> = u_xlat9;
        let x_1275 : vec4<f32> = x_694.x_MainLightShadowmapSize;
        let x_1277 : vec3<f32> = (vec3<f32>(x_1272.y, x_1272.x, x_1272.z) * vec3<f32>(x_1275.x, x_1275.x, x_1275.x));
        let x_1278 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_1277.x, x_1277.y, x_1277.z, x_1278.w);
        let x_1280 : vec4<f32> = u_xlat10;
        let x_1283 : vec4<f32> = x_694.x_MainLightShadowmapSize;
        let x_1285 : vec3<f32> = (vec3<f32>(x_1280.x, x_1280.y, x_1280.z) * vec3<f32>(x_1283.y, x_1283.y, x_1283.y));
        let x_1286 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_1285.x, x_1285.y, x_1285.z, x_1286.w);
        let x_1289 : f32 = u_xlat10.x;
        u_xlat9.w = x_1289;
        let x_1291 : vec2<f32> = u_xlat48;
        let x_1294 : vec4<f32> = x_694.x_MainLightShadowmapSize;
        let x_1297 : vec4<f32> = u_xlat9;
        u_xlat11 = ((vec4<f32>(x_1291.x, x_1291.y, x_1291.x, x_1291.y) * vec4<f32>(x_1294.x, x_1294.y, x_1294.x, x_1294.y)) + vec4<f32>(x_1297.y, x_1297.w, x_1297.x, x_1297.w));
        let x_1300 : vec2<f32> = u_xlat48;
        let x_1302 : vec4<f32> = x_694.x_MainLightShadowmapSize;
        let x_1305 : vec4<f32> = u_xlat9;
        let x_1307 : vec2<f32> = ((x_1300 * vec2<f32>(x_1302.x, x_1302.y)) + vec2<f32>(x_1305.z, x_1305.w));
        let x_1308 : vec4<f32> = u_xlat12;
        u_xlat12 = vec4<f32>(x_1307.x, x_1307.y, x_1308.z, x_1308.w);
        let x_1311 : f32 = u_xlat9.y;
        u_xlat10.w = x_1311;
        let x_1313 : vec4<f32> = u_xlat10;
        let x_1314 : vec2<f32> = vec2<f32>(x_1313.y, x_1313.z);
        let x_1315 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_1315.x, x_1314.x, x_1315.z, x_1314.y);
        let x_1318 : vec2<f32> = u_xlat48;
        let x_1321 : vec4<f32> = x_694.x_MainLightShadowmapSize;
        let x_1324 : vec4<f32> = u_xlat9;
        u_xlat13 = ((vec4<f32>(x_1318.x, x_1318.y, x_1318.x, x_1318.y) * vec4<f32>(x_1321.x, x_1321.y, x_1321.x, x_1321.y)) + vec4<f32>(x_1324.x, x_1324.y, x_1324.z, x_1324.y));
        let x_1327 : vec2<f32> = u_xlat48;
        let x_1330 : vec4<f32> = x_694.x_MainLightShadowmapSize;
        let x_1333 : vec4<f32> = u_xlat10;
        u_xlat10 = ((vec4<f32>(x_1327.x, x_1327.y, x_1327.x, x_1327.y) * vec4<f32>(x_1330.x, x_1330.y, x_1330.x, x_1330.y)) + vec4<f32>(x_1333.w, x_1333.y, x_1333.w, x_1333.z));
        let x_1336 : vec2<f32> = u_xlat48;
        let x_1339 : vec4<f32> = x_694.x_MainLightShadowmapSize;
        let x_1342 : vec4<f32> = u_xlat9;
        u_xlat9 = ((vec4<f32>(x_1336.x, x_1336.y, x_1336.x, x_1336.y) * vec4<f32>(x_1339.x, x_1339.y, x_1339.x, x_1339.y)) + vec4<f32>(x_1342.x, x_1342.w, x_1342.z, x_1342.w));
        let x_1346 : vec4<f32> = u_xlat7;
        let x_1348 : vec4<f32> = u_xlat8;
        u_xlat14 = (vec4<f32>(x_1346.x, x_1346.x, x_1346.x, x_1346.y) * vec4<f32>(x_1348.z, x_1348.w, x_1348.y, x_1348.z));
        let x_1352 : vec4<f32> = u_xlat7;
        let x_1354 : vec4<f32> = u_xlat8;
        u_xlat15 = (vec4<f32>(x_1352.y, x_1352.y, x_1352.z, x_1352.z) * x_1354);
        let x_1357 : f32 = u_xlat7.z;
        let x_1359 : f32 = u_xlat8.y;
        u_xlat48.x = (x_1357 * x_1359);
        let x_1363 : vec4<f32> = u_xlat11;
        let x_1364 : vec2<f32> = vec2<f32>(x_1363.x, x_1363.y);
        let x_1366 : f32 = u_xlat1.z;
        txVec4 = vec3<f32>(x_1364.x, x_1364.y, x_1366);
        let x_1374 : vec3<f32> = txVec4;
        let x_1376 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1374.xy, x_1374.z);
        u_xlat69 = x_1376;
        let x_1378 : vec4<f32> = u_xlat11;
        let x_1379 : vec2<f32> = vec2<f32>(x_1378.z, x_1378.w);
        let x_1381 : f32 = u_xlat1.z;
        txVec5 = vec3<f32>(x_1379.x, x_1379.y, x_1381);
        let x_1388 : vec3<f32> = txVec5;
        let x_1390 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1388.xy, x_1388.z);
        u_xlat7.x = x_1390;
        let x_1393 : f32 = u_xlat7.x;
        let x_1395 : f32 = u_xlat14.y;
        u_xlat7.x = (x_1393 * x_1395);
        let x_1399 : f32 = u_xlat14.x;
        let x_1400 : f32 = u_xlat69;
        let x_1403 : f32 = u_xlat7.x;
        u_xlat69 = ((x_1399 * x_1400) + x_1403);
        let x_1406 : vec4<f32> = u_xlat12;
        let x_1407 : vec2<f32> = vec2<f32>(x_1406.x, x_1406.y);
        let x_1409 : f32 = u_xlat1.z;
        txVec6 = vec3<f32>(x_1407.x, x_1407.y, x_1409);
        let x_1416 : vec3<f32> = txVec6;
        let x_1418 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1416.xy, x_1416.z);
        u_xlat7.x = x_1418;
        let x_1421 : f32 = u_xlat14.z;
        let x_1423 : f32 = u_xlat7.x;
        let x_1425 : f32 = u_xlat69;
        u_xlat69 = ((x_1421 * x_1423) + x_1425);
        let x_1428 : vec4<f32> = u_xlat10;
        let x_1429 : vec2<f32> = vec2<f32>(x_1428.x, x_1428.y);
        let x_1431 : f32 = u_xlat1.z;
        txVec7 = vec3<f32>(x_1429.x, x_1429.y, x_1431);
        let x_1438 : vec3<f32> = txVec7;
        let x_1440 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1438.xy, x_1438.z);
        u_xlat7.x = x_1440;
        let x_1443 : f32 = u_xlat14.w;
        let x_1445 : f32 = u_xlat7.x;
        let x_1447 : f32 = u_xlat69;
        u_xlat69 = ((x_1443 * x_1445) + x_1447);
        let x_1450 : vec4<f32> = u_xlat13;
        let x_1451 : vec2<f32> = vec2<f32>(x_1450.x, x_1450.y);
        let x_1453 : f32 = u_xlat1.z;
        txVec8 = vec3<f32>(x_1451.x, x_1451.y, x_1453);
        let x_1460 : vec3<f32> = txVec8;
        let x_1462 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1460.xy, x_1460.z);
        u_xlat7.x = x_1462;
        let x_1465 : f32 = u_xlat15.x;
        let x_1467 : f32 = u_xlat7.x;
        let x_1469 : f32 = u_xlat69;
        u_xlat69 = ((x_1465 * x_1467) + x_1469);
        let x_1472 : vec4<f32> = u_xlat13;
        let x_1473 : vec2<f32> = vec2<f32>(x_1472.z, x_1472.w);
        let x_1475 : f32 = u_xlat1.z;
        txVec9 = vec3<f32>(x_1473.x, x_1473.y, x_1475);
        let x_1482 : vec3<f32> = txVec9;
        let x_1484 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1482.xy, x_1482.z);
        u_xlat7.x = x_1484;
        let x_1487 : f32 = u_xlat15.y;
        let x_1489 : f32 = u_xlat7.x;
        let x_1491 : f32 = u_xlat69;
        u_xlat69 = ((x_1487 * x_1489) + x_1491);
        let x_1494 : vec4<f32> = u_xlat10;
        let x_1495 : vec2<f32> = vec2<f32>(x_1494.z, x_1494.w);
        let x_1497 : f32 = u_xlat1.z;
        txVec10 = vec3<f32>(x_1495.x, x_1495.y, x_1497);
        let x_1504 : vec3<f32> = txVec10;
        let x_1506 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1504.xy, x_1504.z);
        u_xlat7.x = x_1506;
        let x_1509 : f32 = u_xlat15.z;
        let x_1511 : f32 = u_xlat7.x;
        let x_1513 : f32 = u_xlat69;
        u_xlat69 = ((x_1509 * x_1511) + x_1513);
        let x_1516 : vec4<f32> = u_xlat9;
        let x_1517 : vec2<f32> = vec2<f32>(x_1516.x, x_1516.y);
        let x_1519 : f32 = u_xlat1.z;
        txVec11 = vec3<f32>(x_1517.x, x_1517.y, x_1519);
        let x_1526 : vec3<f32> = txVec11;
        let x_1528 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1526.xy, x_1526.z);
        u_xlat7.x = x_1528;
        let x_1531 : f32 = u_xlat15.w;
        let x_1533 : f32 = u_xlat7.x;
        let x_1535 : f32 = u_xlat69;
        u_xlat69 = ((x_1531 * x_1533) + x_1535);
        let x_1538 : vec4<f32> = u_xlat9;
        let x_1539 : vec2<f32> = vec2<f32>(x_1538.z, x_1538.w);
        let x_1541 : f32 = u_xlat1.z;
        txVec12 = vec3<f32>(x_1539.x, x_1539.y, x_1541);
        let x_1548 : vec3<f32> = txVec12;
        let x_1550 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1548.xy, x_1548.z);
        u_xlat7.x = x_1550;
        let x_1553 : f32 = u_xlat48.x;
        let x_1555 : f32 = u_xlat7.x;
        let x_1557 : f32 = u_xlat69;
        u_xlat27.x = ((x_1553 * x_1555) + x_1557);
      } else {
        let x_1561 : vec4<f32> = u_xlat1;
        let x_1564 : vec4<f32> = x_694.x_MainLightShadowmapSize;
        u_xlat48 = ((vec2<f32>(x_1561.x, x_1561.y) * vec2<f32>(x_1564.z, x_1564.w)) + vec2<f32>(0.5f, 0.5f));
        let x_1568 : vec2<f32> = u_xlat48;
        u_xlat48 = floor(x_1568);
        let x_1570 : vec4<f32> = u_xlat1;
        let x_1573 : vec4<f32> = x_694.x_MainLightShadowmapSize;
        let x_1576 : vec2<f32> = u_xlat48;
        let x_1578 : vec2<f32> = ((vec2<f32>(x_1570.x, x_1570.y) * vec2<f32>(x_1573.z, x_1573.w)) + -(x_1576));
        let x_1579 : vec4<f32> = u_xlat7;
        u_xlat7 = vec4<f32>(x_1578.x, x_1578.y, x_1579.z, x_1579.w);
        let x_1581 : vec4<f32> = u_xlat7;
        u_xlat8 = (vec4<f32>(x_1581.x, x_1581.x, x_1581.y, x_1581.y) + vec4<f32>(0.5f, 1.0f, 0.5f, 1.0f));
        let x_1584 : vec4<f32> = u_xlat8;
        let x_1586 : vec4<f32> = u_xlat8;
        u_xlat9 = (vec4<f32>(x_1584.x, x_1584.x, x_1584.z, x_1584.z) * vec4<f32>(x_1586.x, x_1586.x, x_1586.z, x_1586.z));
        let x_1589 : vec4<f32> = u_xlat9;
        let x_1593 : vec2<f32> = (vec2<f32>(x_1589.y, x_1589.w) * vec2<f32>(0.040816002f, 0.040816002f));
        let x_1594 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_1594.x, x_1593.x, x_1594.z, x_1593.y);
        let x_1596 : vec4<f32> = u_xlat9;
        let x_1599 : vec4<f32> = u_xlat7;
        u_xlat49 = ((vec2<f32>(x_1596.x, x_1596.z) * vec2<f32>(0.5f, 0.5f)) + -(vec2<f32>(x_1599.x, x_1599.y)));
        let x_1603 : vec4<f32> = u_xlat7;
        let x_1606 : vec2<f32> = (-(vec2<f32>(x_1603.x, x_1603.y)) + vec2<f32>(1.0f, 1.0f));
        let x_1607 : vec4<f32> = u_xlat8;
        u_xlat8 = vec4<f32>(x_1606.x, x_1607.y, x_1606.y, x_1607.w);
        let x_1609 : vec4<f32> = u_xlat7;
        let x_1611 : vec2<f32> = min(vec2<f32>(x_1609.x, x_1609.y), vec2<f32>(0.0f, 0.0f));
        let x_1612 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_1611.x, x_1611.y, x_1612.z, x_1612.w);
        let x_1614 : vec4<f32> = u_xlat9;
        let x_1617 : vec4<f32> = u_xlat9;
        let x_1620 : vec4<f32> = u_xlat8;
        let x_1622 : vec2<f32> = ((-(vec2<f32>(x_1614.x, x_1614.y)) * vec2<f32>(x_1617.x, x_1617.y)) + vec2<f32>(x_1620.x, x_1620.z));
        let x_1623 : vec4<f32> = u_xlat8;
        u_xlat8 = vec4<f32>(x_1622.x, x_1623.y, x_1622.y, x_1623.w);
        let x_1625 : vec4<f32> = u_xlat7;
        let x_1627 : vec2<f32> = max(vec2<f32>(x_1625.x, x_1625.y), vec2<f32>(0.0f, 0.0f));
        let x_1628 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_1627.x, x_1627.y, x_1628.z, x_1628.w);
        let x_1630 : vec4<f32> = u_xlat9;
        let x_1633 : vec4<f32> = u_xlat9;
        let x_1636 : vec4<f32> = u_xlat8;
        let x_1638 : vec2<f32> = ((-(vec2<f32>(x_1630.x, x_1630.y)) * vec2<f32>(x_1633.x, x_1633.y)) + vec2<f32>(x_1636.y, x_1636.w));
        let x_1639 : vec4<f32> = u_xlat8;
        u_xlat8 = vec4<f32>(x_1639.x, x_1638.x, x_1639.z, x_1638.y);
        let x_1641 : vec4<f32> = u_xlat8;
        u_xlat8 = (x_1641 + vec4<f32>(2.0f, 2.0f, 2.0f, 2.0f));
        let x_1645 : f32 = u_xlat8.y;
        u_xlat9.z = (x_1645 * 0.081632003f);
        let x_1649 : vec2<f32> = u_xlat49;
        let x_1652 : vec2<f32> = (vec2<f32>(x_1649.y, x_1649.x) * vec2<f32>(0.081632003f, 0.081632003f));
        let x_1653 : vec4<f32> = u_xlat11;
        u_xlat11 = vec4<f32>(x_1652.x, x_1652.y, x_1653.z, x_1653.w);
        let x_1655 : vec4<f32> = u_xlat8;
        u_xlat49 = (vec2<f32>(x_1655.x, x_1655.z) * vec2<f32>(0.081632003f, 0.081632003f));
        let x_1659 : f32 = u_xlat8.w;
        u_xlat11.z = (x_1659 * 0.081632003f);
        let x_1663 : f32 = u_xlat11.y;
        u_xlat9.x = x_1663;
        let x_1665 : vec4<f32> = u_xlat7;
        let x_1672 : vec2<f32> = ((vec2<f32>(x_1665.x, x_1665.x) * vec2<f32>(-0.081632003f, 0.081632003f)) + vec2<f32>(0.163264006f, 0.081632003f));
        let x_1673 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_1673.x, x_1672.x, x_1673.z, x_1672.y);
        let x_1675 : vec4<f32> = u_xlat7;
        let x_1679 : vec2<f32> = ((vec2<f32>(x_1675.x, x_1675.x) * vec2<f32>(-0.081632003f, 0.081632003f)) + vec2<f32>(0.081632003f, 0.163264006f));
        let x_1680 : vec4<f32> = u_xlat8;
        u_xlat8 = vec4<f32>(x_1679.x, x_1680.y, x_1679.y, x_1680.w);
        let x_1683 : f32 = u_xlat49.x;
        u_xlat8.y = x_1683;
        let x_1686 : f32 = u_xlat10.y;
        u_xlat8.w = x_1686;
        let x_1688 : vec4<f32> = u_xlat8;
        let x_1689 : vec4<f32> = u_xlat9;
        u_xlat9 = (x_1688 + x_1689);
        let x_1691 : vec4<f32> = u_xlat7;
        let x_1694 : vec2<f32> = ((vec2<f32>(x_1691.y, x_1691.y) * vec2<f32>(-0.081632003f, 0.081632003f)) + vec2<f32>(0.163264006f, 0.081632003f));
        let x_1695 : vec4<f32> = u_xlat11;
        u_xlat11 = vec4<f32>(x_1695.x, x_1694.x, x_1695.z, x_1694.y);
        let x_1697 : vec4<f32> = u_xlat7;
        let x_1700 : vec2<f32> = ((vec2<f32>(x_1697.y, x_1697.y) * vec2<f32>(-0.081632003f, 0.081632003f)) + vec2<f32>(0.081632003f, 0.163264006f));
        let x_1701 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_1700.x, x_1701.y, x_1700.y, x_1701.w);
        let x_1704 : f32 = u_xlat49.y;
        u_xlat10.y = x_1704;
        let x_1706 : vec4<f32> = u_xlat10;
        let x_1707 : vec4<f32> = u_xlat11;
        u_xlat7 = (x_1706 + x_1707);
        let x_1709 : vec4<f32> = u_xlat8;
        let x_1710 : vec4<f32> = u_xlat9;
        u_xlat8 = (x_1709 / x_1710);
        let x_1712 : vec4<f32> = u_xlat8;
        u_xlat8 = (x_1712 + vec4<f32>(-3.5f, -1.5f, 0.5f, 2.5f));
        let x_1718 : vec4<f32> = u_xlat10;
        let x_1719 : vec4<f32> = u_xlat7;
        u_xlat10 = (x_1718 / x_1719);
        let x_1721 : vec4<f32> = u_xlat10;
        u_xlat10 = (x_1721 + vec4<f32>(-3.5f, -1.5f, 0.5f, 2.5f));
        let x_1723 : vec4<f32> = u_xlat8;
        let x_1726 : vec4<f32> = x_694.x_MainLightShadowmapSize;
        u_xlat8 = (vec4<f32>(x_1723.w, x_1723.x, x_1723.y, x_1723.z) * vec4<f32>(x_1726.x, x_1726.x, x_1726.x, x_1726.x));
        let x_1729 : vec4<f32> = u_xlat10;
        let x_1732 : vec4<f32> = x_694.x_MainLightShadowmapSize;
        u_xlat10 = (vec4<f32>(x_1729.x, x_1729.w, x_1729.y, x_1729.z) * vec4<f32>(x_1732.y, x_1732.y, x_1732.y, x_1732.y));
        let x_1735 : vec4<f32> = u_xlat8;
        let x_1736 : vec3<f32> = vec3<f32>(x_1735.y, x_1735.z, x_1735.w);
        let x_1737 : vec4<f32> = u_xlat11;
        u_xlat11 = vec4<f32>(x_1736.x, x_1737.y, x_1736.y, x_1736.z);
        let x_1740 : f32 = u_xlat10.x;
        u_xlat11.y = x_1740;
        let x_1742 : vec2<f32> = u_xlat48;
        let x_1745 : vec4<f32> = x_694.x_MainLightShadowmapSize;
        let x_1748 : vec4<f32> = u_xlat11;
        u_xlat12 = ((vec4<f32>(x_1742.x, x_1742.y, x_1742.x, x_1742.y) * vec4<f32>(x_1745.x, x_1745.y, x_1745.x, x_1745.y)) + vec4<f32>(x_1748.x, x_1748.y, x_1748.z, x_1748.y));
        let x_1751 : vec2<f32> = u_xlat48;
        let x_1753 : vec4<f32> = x_694.x_MainLightShadowmapSize;
        let x_1756 : vec4<f32> = u_xlat11;
        let x_1758 : vec2<f32> = ((x_1751 * vec2<f32>(x_1753.x, x_1753.y)) + vec2<f32>(x_1756.w, x_1756.y));
        let x_1759 : vec4<f32> = u_xlat13;
        u_xlat13 = vec4<f32>(x_1758.x, x_1758.y, x_1759.z, x_1759.w);
        let x_1762 : f32 = u_xlat11.y;
        u_xlat8.y = x_1762;
        let x_1765 : f32 = u_xlat10.z;
        u_xlat11.y = x_1765;
        let x_1767 : vec2<f32> = u_xlat48;
        let x_1770 : vec4<f32> = x_694.x_MainLightShadowmapSize;
        let x_1773 : vec4<f32> = u_xlat11;
        u_xlat14 = ((vec4<f32>(x_1767.x, x_1767.y, x_1767.x, x_1767.y) * vec4<f32>(x_1770.x, x_1770.y, x_1770.x, x_1770.y)) + vec4<f32>(x_1773.x, x_1773.y, x_1773.z, x_1773.y));
        let x_1777 : vec2<f32> = u_xlat48;
        let x_1779 : vec4<f32> = x_694.x_MainLightShadowmapSize;
        let x_1782 : vec4<f32> = u_xlat11;
        u_xlat55 = ((x_1777 * vec2<f32>(x_1779.x, x_1779.y)) + vec2<f32>(x_1782.w, x_1782.y));
        let x_1786 : f32 = u_xlat11.y;
        u_xlat8.z = x_1786;
        let x_1788 : vec2<f32> = u_xlat48;
        let x_1791 : vec4<f32> = x_694.x_MainLightShadowmapSize;
        let x_1794 : vec4<f32> = u_xlat8;
        u_xlat15 = ((vec4<f32>(x_1788.x, x_1788.y, x_1788.x, x_1788.y) * vec4<f32>(x_1791.x, x_1791.y, x_1791.x, x_1791.y)) + vec4<f32>(x_1794.x, x_1794.y, x_1794.x, x_1794.z));
        let x_1798 : f32 = u_xlat10.w;
        u_xlat11.y = x_1798;
        let x_1801 : vec2<f32> = u_xlat48;
        let x_1804 : vec4<f32> = x_694.x_MainLightShadowmapSize;
        let x_1807 : vec4<f32> = u_xlat11;
        u_xlat16 = ((vec4<f32>(x_1801.x, x_1801.y, x_1801.x, x_1801.y) * vec4<f32>(x_1804.x, x_1804.y, x_1804.x, x_1804.y)) + vec4<f32>(x_1807.x, x_1807.y, x_1807.z, x_1807.y));
        let x_1811 : vec2<f32> = u_xlat48;
        let x_1813 : vec4<f32> = x_694.x_MainLightShadowmapSize;
        let x_1816 : vec4<f32> = u_xlat11;
        u_xlat29 = ((x_1811 * vec2<f32>(x_1813.x, x_1813.y)) + vec2<f32>(x_1816.w, x_1816.y));
        let x_1820 : f32 = u_xlat11.y;
        u_xlat8.w = x_1820;
        let x_1823 : vec2<f32> = u_xlat48;
        let x_1825 : vec4<f32> = x_694.x_MainLightShadowmapSize;
        let x_1828 : vec4<f32> = u_xlat8;
        u_xlat17 = ((x_1823 * vec2<f32>(x_1825.x, x_1825.y)) + vec2<f32>(x_1828.x, x_1828.w));
        let x_1831 : vec4<f32> = u_xlat11;
        let x_1832 : vec3<f32> = vec3<f32>(x_1831.x, x_1831.z, x_1831.w);
        let x_1833 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_1832.x, x_1833.y, x_1832.y, x_1832.z);
        let x_1835 : vec2<f32> = u_xlat48;
        let x_1838 : vec4<f32> = x_694.x_MainLightShadowmapSize;
        let x_1841 : vec4<f32> = u_xlat10;
        u_xlat11 = ((vec4<f32>(x_1835.x, x_1835.y, x_1835.x, x_1835.y) * vec4<f32>(x_1838.x, x_1838.y, x_1838.x, x_1838.y)) + vec4<f32>(x_1841.x, x_1841.y, x_1841.z, x_1841.y));
        let x_1845 : vec2<f32> = u_xlat48;
        let x_1847 : vec4<f32> = x_694.x_MainLightShadowmapSize;
        let x_1850 : vec4<f32> = u_xlat10;
        u_xlat52 = ((x_1845 * vec2<f32>(x_1847.x, x_1847.y)) + vec2<f32>(x_1850.w, x_1850.y));
        let x_1854 : f32 = u_xlat8.x;
        u_xlat10.x = x_1854;
        let x_1856 : vec2<f32> = u_xlat48;
        let x_1858 : vec4<f32> = x_694.x_MainLightShadowmapSize;
        let x_1861 : vec4<f32> = u_xlat10;
        u_xlat48 = ((x_1856 * vec2<f32>(x_1858.x, x_1858.y)) + vec2<f32>(x_1861.x, x_1861.y));
        let x_1865 : vec4<f32> = u_xlat7;
        let x_1867 : vec4<f32> = u_xlat9;
        u_xlat18 = (vec4<f32>(x_1865.x, x_1865.x, x_1865.x, x_1865.x) * x_1867);
        let x_1870 : vec4<f32> = u_xlat7;
        let x_1872 : vec4<f32> = u_xlat9;
        u_xlat19 = (vec4<f32>(x_1870.y, x_1870.y, x_1870.y, x_1870.y) * x_1872);
        let x_1875 : vec4<f32> = u_xlat7;
        let x_1877 : vec4<f32> = u_xlat9;
        u_xlat20 = (vec4<f32>(x_1875.z, x_1875.z, x_1875.z, x_1875.z) * x_1877);
        let x_1879 : vec4<f32> = u_xlat7;
        let x_1881 : vec4<f32> = u_xlat9;
        u_xlat7 = (vec4<f32>(x_1879.w, x_1879.w, x_1879.w, x_1879.w) * x_1881);
        let x_1884 : vec4<f32> = u_xlat12;
        let x_1885 : vec2<f32> = vec2<f32>(x_1884.x, x_1884.y);
        let x_1887 : f32 = u_xlat1.z;
        txVec13 = vec3<f32>(x_1885.x, x_1885.y, x_1887);
        let x_1894 : vec3<f32> = txVec13;
        let x_1896 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1894.xy, x_1894.z);
        u_xlat8.x = x_1896;
        let x_1899 : vec4<f32> = u_xlat12;
        let x_1900 : vec2<f32> = vec2<f32>(x_1899.z, x_1899.w);
        let x_1902 : f32 = u_xlat1.z;
        txVec14 = vec3<f32>(x_1900.x, x_1900.y, x_1902);
        let x_1910 : vec3<f32> = txVec14;
        let x_1912 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1910.xy, x_1910.z);
        u_xlat71 = x_1912;
        let x_1913 : f32 = u_xlat71;
        let x_1915 : f32 = u_xlat18.y;
        u_xlat71 = (x_1913 * x_1915);
        let x_1918 : f32 = u_xlat18.x;
        let x_1920 : f32 = u_xlat8.x;
        let x_1922 : f32 = u_xlat71;
        u_xlat8.x = ((x_1918 * x_1920) + x_1922);
        let x_1926 : vec4<f32> = u_xlat13;
        let x_1927 : vec2<f32> = vec2<f32>(x_1926.x, x_1926.y);
        let x_1929 : f32 = u_xlat1.z;
        txVec15 = vec3<f32>(x_1927.x, x_1927.y, x_1929);
        let x_1936 : vec3<f32> = txVec15;
        let x_1938 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1936.xy, x_1936.z);
        u_xlat71 = x_1938;
        let x_1940 : f32 = u_xlat18.z;
        let x_1941 : f32 = u_xlat71;
        let x_1944 : f32 = u_xlat8.x;
        u_xlat8.x = ((x_1940 * x_1941) + x_1944);
        let x_1948 : vec4<f32> = u_xlat15;
        let x_1949 : vec2<f32> = vec2<f32>(x_1948.x, x_1948.y);
        let x_1951 : f32 = u_xlat1.z;
        txVec16 = vec3<f32>(x_1949.x, x_1949.y, x_1951);
        let x_1958 : vec3<f32> = txVec16;
        let x_1960 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1958.xy, x_1958.z);
        u_xlat71 = x_1960;
        let x_1962 : f32 = u_xlat18.w;
        let x_1963 : f32 = u_xlat71;
        let x_1966 : f32 = u_xlat8.x;
        u_xlat8.x = ((x_1962 * x_1963) + x_1966);
        let x_1970 : vec4<f32> = u_xlat14;
        let x_1971 : vec2<f32> = vec2<f32>(x_1970.x, x_1970.y);
        let x_1973 : f32 = u_xlat1.z;
        txVec17 = vec3<f32>(x_1971.x, x_1971.y, x_1973);
        let x_1980 : vec3<f32> = txVec17;
        let x_1982 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1980.xy, x_1980.z);
        u_xlat71 = x_1982;
        let x_1984 : f32 = u_xlat19.x;
        let x_1985 : f32 = u_xlat71;
        let x_1988 : f32 = u_xlat8.x;
        u_xlat8.x = ((x_1984 * x_1985) + x_1988);
        let x_1992 : vec4<f32> = u_xlat14;
        let x_1993 : vec2<f32> = vec2<f32>(x_1992.z, x_1992.w);
        let x_1995 : f32 = u_xlat1.z;
        txVec18 = vec3<f32>(x_1993.x, x_1993.y, x_1995);
        let x_2002 : vec3<f32> = txVec18;
        let x_2004 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2002.xy, x_2002.z);
        u_xlat71 = x_2004;
        let x_2006 : f32 = u_xlat19.y;
        let x_2007 : f32 = u_xlat71;
        let x_2010 : f32 = u_xlat8.x;
        u_xlat8.x = ((x_2006 * x_2007) + x_2010);
        let x_2014 : vec2<f32> = u_xlat55;
        let x_2016 : f32 = u_xlat1.z;
        txVec19 = vec3<f32>(x_2014.x, x_2014.y, x_2016);
        let x_2023 : vec3<f32> = txVec19;
        let x_2025 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2023.xy, x_2023.z);
        u_xlat71 = x_2025;
        let x_2027 : f32 = u_xlat19.z;
        let x_2028 : f32 = u_xlat71;
        let x_2031 : f32 = u_xlat8.x;
        u_xlat8.x = ((x_2027 * x_2028) + x_2031);
        let x_2035 : vec4<f32> = u_xlat15;
        let x_2036 : vec2<f32> = vec2<f32>(x_2035.z, x_2035.w);
        let x_2038 : f32 = u_xlat1.z;
        txVec20 = vec3<f32>(x_2036.x, x_2036.y, x_2038);
        let x_2045 : vec3<f32> = txVec20;
        let x_2047 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2045.xy, x_2045.z);
        u_xlat71 = x_2047;
        let x_2049 : f32 = u_xlat19.w;
        let x_2050 : f32 = u_xlat71;
        let x_2053 : f32 = u_xlat8.x;
        u_xlat8.x = ((x_2049 * x_2050) + x_2053);
        let x_2057 : vec4<f32> = u_xlat16;
        let x_2058 : vec2<f32> = vec2<f32>(x_2057.x, x_2057.y);
        let x_2060 : f32 = u_xlat1.z;
        txVec21 = vec3<f32>(x_2058.x, x_2058.y, x_2060);
        let x_2067 : vec3<f32> = txVec21;
        let x_2069 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2067.xy, x_2067.z);
        u_xlat71 = x_2069;
        let x_2071 : f32 = u_xlat20.x;
        let x_2072 : f32 = u_xlat71;
        let x_2075 : f32 = u_xlat8.x;
        u_xlat8.x = ((x_2071 * x_2072) + x_2075);
        let x_2079 : vec4<f32> = u_xlat16;
        let x_2080 : vec2<f32> = vec2<f32>(x_2079.z, x_2079.w);
        let x_2082 : f32 = u_xlat1.z;
        txVec22 = vec3<f32>(x_2080.x, x_2080.y, x_2082);
        let x_2089 : vec3<f32> = txVec22;
        let x_2091 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2089.xy, x_2089.z);
        u_xlat71 = x_2091;
        let x_2093 : f32 = u_xlat20.y;
        let x_2094 : f32 = u_xlat71;
        let x_2097 : f32 = u_xlat8.x;
        u_xlat8.x = ((x_2093 * x_2094) + x_2097);
        let x_2101 : vec2<f32> = u_xlat29;
        let x_2103 : f32 = u_xlat1.z;
        txVec23 = vec3<f32>(x_2101.x, x_2101.y, x_2103);
        let x_2110 : vec3<f32> = txVec23;
        let x_2112 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2110.xy, x_2110.z);
        u_xlat29.x = x_2112;
        let x_2115 : f32 = u_xlat20.z;
        let x_2117 : f32 = u_xlat29.x;
        let x_2120 : f32 = u_xlat8.x;
        u_xlat8.x = ((x_2115 * x_2117) + x_2120);
        let x_2124 : vec2<f32> = u_xlat17;
        let x_2126 : f32 = u_xlat1.z;
        txVec24 = vec3<f32>(x_2124.x, x_2124.y, x_2126);
        let x_2133 : vec3<f32> = txVec24;
        let x_2135 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2133.xy, x_2133.z);
        u_xlat29.x = x_2135;
        let x_2138 : f32 = u_xlat20.w;
        let x_2140 : f32 = u_xlat29.x;
        let x_2143 : f32 = u_xlat8.x;
        u_xlat8.x = ((x_2138 * x_2140) + x_2143);
        let x_2147 : vec4<f32> = u_xlat11;
        let x_2148 : vec2<f32> = vec2<f32>(x_2147.x, x_2147.y);
        let x_2150 : f32 = u_xlat1.z;
        txVec25 = vec3<f32>(x_2148.x, x_2148.y, x_2150);
        let x_2157 : vec3<f32> = txVec25;
        let x_2159 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2157.xy, x_2157.z);
        u_xlat29.x = x_2159;
        let x_2162 : f32 = u_xlat7.x;
        let x_2164 : f32 = u_xlat29.x;
        let x_2167 : f32 = u_xlat8.x;
        u_xlat7.x = ((x_2162 * x_2164) + x_2167);
        let x_2171 : vec4<f32> = u_xlat11;
        let x_2172 : vec2<f32> = vec2<f32>(x_2171.z, x_2171.w);
        let x_2174 : f32 = u_xlat1.z;
        txVec26 = vec3<f32>(x_2172.x, x_2172.y, x_2174);
        let x_2181 : vec3<f32> = txVec26;
        let x_2183 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2181.xy, x_2181.z);
        u_xlat8.x = x_2183;
        let x_2186 : f32 = u_xlat7.y;
        let x_2188 : f32 = u_xlat8.x;
        let x_2191 : f32 = u_xlat7.x;
        u_xlat7.x = ((x_2186 * x_2188) + x_2191);
        let x_2195 : vec2<f32> = u_xlat52;
        let x_2197 : f32 = u_xlat1.z;
        txVec27 = vec3<f32>(x_2195.x, x_2195.y, x_2197);
        let x_2204 : vec3<f32> = txVec27;
        let x_2206 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2204.xy, x_2204.z);
        u_xlat28.x = x_2206;
        let x_2209 : f32 = u_xlat7.z;
        let x_2211 : f32 = u_xlat28.x;
        let x_2214 : f32 = u_xlat7.x;
        u_xlat7.x = ((x_2209 * x_2211) + x_2214);
        let x_2218 : vec2<f32> = u_xlat48;
        let x_2220 : f32 = u_xlat1.z;
        txVec28 = vec3<f32>(x_2218.x, x_2218.y, x_2220);
        let x_2227 : vec3<f32> = txVec28;
        let x_2229 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2227.xy, x_2227.z);
        u_xlat48.x = x_2229;
        let x_2232 : f32 = u_xlat7.w;
        let x_2234 : f32 = u_xlat48.x;
        let x_2237 : f32 = u_xlat7.x;
        u_xlat27.x = ((x_2232 * x_2234) + x_2237);
      }
    }
  } else {
    let x_2242 : vec4<f32> = u_xlat1;
    let x_2243 : vec2<f32> = vec2<f32>(x_2242.x, x_2242.y);
    let x_2245 : f32 = u_xlat1.z;
    txVec29 = vec3<f32>(x_2243.x, x_2243.y, x_2245);
    let x_2252 : vec3<f32> = txVec29;
    let x_2254 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2252.xy, x_2252.z);
    u_xlat27.x = x_2254;
  }
  let x_2257 : f32 = x_694.x_MainLightShadowParams.x;
  u_xlat1.x = (-(x_2257) + 1.0f);
  let x_2262 : f32 = u_xlat27.x;
  let x_2264 : f32 = x_694.x_MainLightShadowParams.x;
  let x_2267 : f32 = u_xlat1.x;
  u_xlat1.x = ((x_2262 * x_2264) + x_2267);
  let x_2272 : f32 = u_xlat1.z;
  u_xlatb22 = (0.0f >= x_2272);
  let x_2276 : f32 = u_xlat1.z;
  u_xlatb43 = (x_2276 >= 1.0f);
  let x_2278 : bool = u_xlatb43;
  let x_2279 : bool = u_xlatb22;
  u_xlatb22 = (x_2278 | x_2279);
  let x_2281 : bool = u_xlatb22;
  if (x_2281) {
    x_2282 = 1.0f;
  } else {
    let x_2287 : f32 = u_xlat1.x;
    x_2282 = x_2287;
  }
  let x_2288 : f32 = x_2282;
  u_xlat1.x = x_2288;
  let x_2290 : vec3<f32> = vs_INTERP0;
  let x_2292 : vec3<f32> = x_146.x_WorldSpaceCameraPos;
  u_xlat27 = (x_2290 + -(x_2292));
  let x_2295 : vec3<f32> = u_xlat27;
  let x_2296 : vec3<f32> = u_xlat27;
  u_xlat22.x = dot(x_2295, x_2296);
  let x_2300 : f32 = u_xlat22.x;
  let x_2302 : f32 = x_694.x_MainLightShadowParams.z;
  let x_2305 : f32 = x_694.x_MainLightShadowParams.w;
  u_xlat22.x = ((x_2300 * x_2302) + x_2305);
  let x_2309 : f32 = u_xlat22.x;
  u_xlat22.x = clamp(x_2309, 0.0f, 1.0f);
  let x_2314 : f32 = u_xlat1.x;
  u_xlat43.x = (-(x_2314) + 1.0f);
  let x_2319 : f32 = u_xlat22.x;
  let x_2321 : f32 = u_xlat43.x;
  let x_2324 : f32 = u_xlat1.x;
  u_xlat1.x = ((x_2319 * x_2321) + x_2324);
  let x_2327 : vec4<f32> = u_xlat6;
  let x_2330 : vec4<f32> = x_146.x_MainLightColor;
  u_xlat27 = (vec3<f32>(x_2327.x, x_2327.x, x_2327.x) * vec3<f32>(x_2330.x, x_2330.y, x_2330.z));
  let x_2333 : vec3<f32> = u_xlat5;
  let x_2335 : vec3<f32> = u_xlat21;
  u_xlat22.x = dot(-(x_2333), x_2335);
  let x_2339 : f32 = u_xlat22.x;
  let x_2341 : f32 = u_xlat22.x;
  u_xlat22.x = (x_2339 + x_2341);
  let x_2344 : vec3<f32> = u_xlat21;
  let x_2345 : vec3<f32> = u_xlat22;
  let x_2349 : vec3<f32> = u_xlat5;
  let x_2351 : vec3<f32> = ((x_2344 * -(vec3<f32>(x_2345.x, x_2345.x, x_2345.x))) + -(x_2349));
  let x_2352 : vec4<f32> = u_xlat7;
  u_xlat7 = vec4<f32>(x_2351.x, x_2351.y, x_2351.z, x_2352.w);
  let x_2354 : vec3<f32> = u_xlat21;
  let x_2355 : vec3<f32> = u_xlat5;
  u_xlat22.x = dot(x_2354, x_2355);
  let x_2359 : f32 = u_xlat22.x;
  u_xlat22.x = clamp(x_2359, 0.0f, 1.0f);
  let x_2363 : f32 = u_xlat22.x;
  u_xlat22.x = (-(x_2363) + 1.0f);
  let x_2368 : f32 = u_xlat22.x;
  let x_2370 : f32 = u_xlat22.x;
  u_xlat22.x = (x_2368 * x_2370);
  let x_2374 : f32 = u_xlat22.z;
  u_xlat22.y = ((-(x_2374) * 0.699999988f) + 1.700000048f);
  let x_2381 : vec3<f32> = u_xlat22;
  let x_2383 : vec3<f32> = u_xlat22;
  let x_2385 : vec2<f32> = (vec2<f32>(x_2381.x, x_2381.y) * vec2<f32>(x_2383.x, x_2383.z));
  let x_2386 : vec3<f32> = u_xlat22;
  u_xlat22 = vec3<f32>(x_2385.x, x_2385.y, x_2386.z);
  let x_2389 : f32 = u_xlat22.y;
  u_xlat43.x = (x_2389 * 6.0f);
  let x_2401 : vec4<f32> = u_xlat7;
  let x_2404 : f32 = u_xlat43.x;
  let x_2405 : vec4<f32> = textureSampleLevel(unity_SpecCube0, samplerunity_SpecCube0, vec3<f32>(x_2401.x, x_2401.y, x_2401.z), x_2404);
  u_xlat7 = x_2405;
  let x_2407 : f32 = u_xlat7.w;
  u_xlat43.x = (x_2407 + -1.0f);
  let x_2411 : f32 = x_59.unity_SpecCube0_HDR.w;
  let x_2413 : f32 = u_xlat43.x;
  u_xlat43.x = ((x_2411 * x_2413) + 1.0f);
  let x_2418 : f32 = u_xlat43.x;
  u_xlat43.x = max(x_2418, 0.0f);
  let x_2422 : f32 = u_xlat43.x;
  u_xlat43.x = log2(x_2422);
  let x_2426 : f32 = u_xlat43.x;
  let x_2428 : f32 = x_59.unity_SpecCube0_HDR.y;
  u_xlat43.x = (x_2426 * x_2428);
  let x_2432 : f32 = u_xlat43.x;
  u_xlat43.x = exp2(x_2432);
  let x_2436 : f32 = u_xlat43.x;
  let x_2438 : f32 = x_59.unity_SpecCube0_HDR.x;
  u_xlat43.x = (x_2436 * x_2438);
  let x_2441 : vec4<f32> = u_xlat7;
  let x_2443 : vec2<f32> = u_xlat43;
  let x_2445 : vec3<f32> = (vec3<f32>(x_2441.x, x_2441.y, x_2441.z) * vec3<f32>(x_2443.x, x_2443.x, x_2443.x));
  let x_2446 : vec4<f32> = u_xlat7;
  u_xlat7 = vec4<f32>(x_2445.x, x_2445.y, x_2445.z, x_2446.w);
  let x_2448 : f32 = u_xlat65;
  let x_2450 : f32 = u_xlat65;
  u_xlat43 = ((vec2<f32>(x_2448, x_2448) * vec2<f32>(x_2450, x_2450)) + vec2<f32>(-1.0f, 1.0f));
  let x_2456 : f32 = u_xlat43.y;
  u_xlat64 = (1.0f / x_2456);
  let x_2458 : vec3<f32> = u_xlat2;
  let x_2460 : vec4<f32> = u_xlat0;
  let x_2462 : vec3<f32> = (-(x_2458) + vec3<f32>(x_2460.x, x_2460.x, x_2460.x));
  let x_2463 : vec4<f32> = u_xlat8;
  u_xlat8 = vec4<f32>(x_2462.x, x_2462.y, x_2462.z, x_2463.w);
  let x_2465 : vec3<f32> = u_xlat22;
  let x_2467 : vec4<f32> = u_xlat8;
  let x_2470 : vec3<f32> = u_xlat2;
  let x_2471 : vec3<f32> = ((vec3<f32>(x_2465.x, x_2465.x, x_2465.x) * vec3<f32>(x_2467.x, x_2467.y, x_2467.z)) + x_2470);
  let x_2472 : vec4<f32> = u_xlat8;
  u_xlat8 = vec4<f32>(x_2471.x, x_2471.y, x_2471.z, x_2472.w);
  let x_2474 : f32 = u_xlat64;
  let x_2476 : vec4<f32> = u_xlat8;
  let x_2478 : vec3<f32> = (vec3<f32>(x_2474, x_2474, x_2474) * vec3<f32>(x_2476.x, x_2476.y, x_2476.z));
  let x_2479 : vec4<f32> = u_xlat8;
  u_xlat8 = vec4<f32>(x_2478.x, x_2478.y, x_2478.z, x_2479.w);
  let x_2481 : vec4<f32> = u_xlat7;
  let x_2483 : vec4<f32> = u_xlat8;
  let x_2485 : vec3<f32> = (vec3<f32>(x_2481.x, x_2481.y, x_2481.z) * vec3<f32>(x_2483.x, x_2483.y, x_2483.z));
  let x_2486 : vec4<f32> = u_xlat7;
  u_xlat7 = vec4<f32>(x_2485.x, x_2485.y, x_2485.z, x_2486.w);
  let x_2488 : vec4<f32> = u_xlat4;
  let x_2490 : vec3<f32> = u_xlat3;
  let x_2492 : vec4<f32> = u_xlat7;
  let x_2494 : vec3<f32> = ((vec3<f32>(x_2488.x, x_2488.y, x_2488.z) * x_2490) + vec3<f32>(x_2492.x, x_2492.y, x_2492.z));
  let x_2495 : vec4<f32> = u_xlat4;
  u_xlat4 = vec4<f32>(x_2494.x, x_2494.y, x_2494.z, x_2495.w);
  let x_2498 : f32 = u_xlat1.x;
  let x_2500 : f32 = x_59.unity_LightData.z;
  u_xlat0.x = (x_2498 * x_2500);
  let x_2503 : vec3<f32> = u_xlat21;
  let x_2505 : vec4<f32> = x_146.x_MainLightPosition;
  u_xlat1.x = dot(x_2503, vec3<f32>(x_2505.x, x_2505.y, x_2505.z));
  let x_2510 : f32 = u_xlat1.x;
  u_xlat1.x = clamp(x_2510, 0.0f, 1.0f);
  let x_2514 : f32 = u_xlat0.x;
  let x_2516 : f32 = u_xlat1.x;
  u_xlat0.x = (x_2514 * x_2516);
  let x_2519 : vec4<f32> = u_xlat0;
  let x_2521 : vec3<f32> = u_xlat27;
  let x_2522 : vec3<f32> = (vec3<f32>(x_2519.x, x_2519.x, x_2519.x) * x_2521);
  let x_2523 : vec4<f32> = u_xlat1;
  u_xlat1 = vec4<f32>(x_2522.x, x_2522.y, x_2523.z, x_2522.z);
  let x_2525 : vec3<f32> = u_xlat5;
  let x_2527 : vec4<f32> = x_146.x_MainLightPosition;
  u_xlat27 = (x_2525 + vec3<f32>(x_2527.x, x_2527.y, x_2527.z));
  let x_2530 : vec3<f32> = u_xlat27;
  let x_2531 : vec3<f32> = u_xlat27;
  u_xlat0.x = dot(x_2530, x_2531);
  let x_2535 : f32 = u_xlat0.x;
  u_xlat0.x = max(x_2535, 1.17549435e-37f);
  let x_2539 : f32 = u_xlat0.x;
  u_xlat0.x = inverseSqrt(x_2539);
  let x_2542 : vec4<f32> = u_xlat0;
  let x_2544 : vec3<f32> = u_xlat27;
  u_xlat27 = (vec3<f32>(x_2542.x, x_2542.x, x_2542.x) * x_2544);
  let x_2546 : vec3<f32> = u_xlat21;
  let x_2547 : vec3<f32> = u_xlat27;
  u_xlat0.x = dot(x_2546, x_2547);
  let x_2551 : f32 = u_xlat0.x;
  u_xlat0.x = clamp(x_2551, 0.0f, 1.0f);
  let x_2555 : vec4<f32> = x_146.x_MainLightPosition;
  let x_2557 : vec3<f32> = u_xlat27;
  u_xlat65 = dot(vec3<f32>(x_2555.x, x_2555.y, x_2555.z), x_2557);
  let x_2559 : f32 = u_xlat65;
  u_xlat65 = clamp(x_2559, 0.0f, 1.0f);
  let x_2562 : f32 = u_xlat0.x;
  let x_2564 : f32 = u_xlat0.x;
  u_xlat0.x = (x_2562 * x_2564);
  let x_2568 : f32 = u_xlat0.x;
  let x_2570 : f32 = u_xlat43.x;
  u_xlat0.x = ((x_2568 * x_2570) + 1.000010014f);
  let x_2575 : f32 = u_xlat65;
  let x_2576 : f32 = u_xlat65;
  u_xlat65 = (x_2575 * x_2576);
  let x_2579 : f32 = u_xlat0.x;
  let x_2581 : f32 = u_xlat0.x;
  u_xlat0.x = (x_2579 * x_2581);
  let x_2584 : f32 = u_xlat65;
  u_xlat65 = max(x_2584, 0.100000001f);
  let x_2587 : f32 = u_xlat0.x;
  let x_2588 : f32 = u_xlat65;
  u_xlat0.x = (x_2587 * x_2588);
  let x_2591 : f32 = u_xlat67;
  let x_2593 : f32 = u_xlat0.x;
  u_xlat0.x = (x_2591 * x_2593);
  let x_2596 : f32 = u_xlat66;
  let x_2598 : f32 = u_xlat0.x;
  u_xlat0.x = (x_2596 / x_2598);
  let x_2601 : vec3<f32> = u_xlat2;
  let x_2602 : vec4<f32> = u_xlat0;
  let x_2605 : vec3<f32> = u_xlat3;
  u_xlat27 = ((x_2601 * vec3<f32>(x_2602.x, x_2602.x, x_2602.x)) + x_2605);
  let x_2607 : vec4<f32> = u_xlat1;
  let x_2609 : vec3<f32> = u_xlat27;
  let x_2610 : vec3<f32> = (vec3<f32>(x_2607.x, x_2607.y, x_2607.w) * x_2609);
  let x_2611 : vec4<f32> = u_xlat1;
  u_xlat1 = vec4<f32>(x_2610.x, x_2610.y, x_2611.z, x_2610.z);
  let x_2614 : f32 = x_146.x_AdditionalLightsCount.x;
  let x_2616 : f32 = x_59.unity_LightData.y;
  u_xlat0.x = min(x_2614, x_2616);
  let x_2621 : f32 = u_xlat0.x;
  u_xlatu0 = bitcast<u32>(i32(x_2621));
  u_xlat27.x = 0.0f;
  u_xlat27.y = 0.0f;
  u_xlat27.z = 0.0f;
  u_xlatu_loop_1 = 0u;
  loop {
    let x_2633 : u32 = u_xlatu_loop_1;
    let x_2634 : u32 = u_xlatu0;
    if ((x_2633 < x_2634)) {
    } else {
      break;
    }
    let x_2637 : u32 = u_xlatu_loop_1;
    u_xlatu7 = (x_2637 >> 2u);
    let x_2640 : u32 = u_xlatu_loop_1;
    u_xlati28 = bitcast<i32>((x_2640 & 3u));
    let x_2643 : u32 = u_xlatu7;
    let x_2646 : vec4<f32> = x_59.unity_LightIndices[bitcast<i32>(x_2643)];
    let x_2656 : i32 = u_xlati28;
    indexable = array<vec4<u32>, 4u>(vec4<u32>(1065353216u, 0u, 0u, 0u), vec4<u32>(0u, 1065353216u, 0u, 0u), vec4<u32>(0u, 0u, 1065353216u, 0u), vec4<u32>(0u, 0u, 0u, 1065353216u));
    let x_2661 : vec4<u32> = indexable[x_2656];
    u_xlat7.x = dot(x_2646, bitcast<vec4<f32>>(x_2661));
    let x_2667 : f32 = u_xlat7.x;
    u_xlati7 = i32(x_2667);
    let x_2669 : vec3<f32> = vs_INTERP0;
    let x_2681 : i32 = u_xlati7;
    let x_2683 : vec4<f32> = x_2680.x_AdditionalLightsPosition[x_2681];
    let x_2686 : i32 = u_xlati7;
    let x_2688 : vec4<f32> = x_2680.x_AdditionalLightsPosition[x_2686];
    u_xlat28 = ((-(x_2669) * vec3<f32>(x_2683.w, x_2683.w, x_2683.w)) + vec3<f32>(x_2688.x, x_2688.y, x_2688.z));
    let x_2691 : vec3<f32> = u_xlat28;
    let x_2692 : vec3<f32> = u_xlat28;
    u_xlat8.x = dot(x_2691, x_2692);
    let x_2696 : f32 = u_xlat8.x;
    u_xlat8.x = max(x_2696, 6.10351562e-05f);
    let x_2701 : f32 = u_xlat8.x;
    u_xlat29.x = inverseSqrt(x_2701);
    let x_2704 : vec3<f32> = u_xlat28;
    let x_2705 : vec2<f32> = u_xlat29;
    let x_2707 : vec3<f32> = (x_2704 * vec3<f32>(x_2705.x, x_2705.x, x_2705.x));
    let x_2708 : vec4<f32> = u_xlat9;
    u_xlat9 = vec4<f32>(x_2707.x, x_2707.y, x_2707.z, x_2708.w);
    let x_2712 : f32 = u_xlat8.x;
    u_xlat50 = (1.0f / x_2712);
    let x_2715 : f32 = u_xlat8.x;
    let x_2716 : i32 = u_xlati7;
    let x_2718 : f32 = x_2680.x_AdditionalLightsAttenuation[x_2716].x;
    u_xlat8.x = (x_2715 * x_2718);
    let x_2722 : f32 = u_xlat8.x;
    let x_2725 : f32 = u_xlat8.x;
    u_xlat8.x = ((-(x_2722) * x_2725) + 1.0f);
    let x_2730 : f32 = u_xlat8.x;
    u_xlat8.x = max(x_2730, 0.0f);
    let x_2734 : f32 = u_xlat8.x;
    let x_2736 : f32 = u_xlat8.x;
    u_xlat8.x = (x_2734 * x_2736);
    let x_2740 : f32 = u_xlat8.x;
    let x_2741 : f32 = u_xlat50;
    u_xlat8.x = (x_2740 * x_2741);
    let x_2744 : i32 = u_xlati7;
    let x_2746 : vec4<f32> = x_2680.x_AdditionalLightsSpotDir[x_2744];
    let x_2748 : vec4<f32> = u_xlat9;
    u_xlat50 = dot(vec3<f32>(x_2746.x, x_2746.y, x_2746.z), vec3<f32>(x_2748.x, x_2748.y, x_2748.z));
    let x_2751 : f32 = u_xlat50;
    let x_2752 : i32 = u_xlati7;
    let x_2754 : f32 = x_2680.x_AdditionalLightsAttenuation[x_2752].z;
    let x_2756 : i32 = u_xlati7;
    let x_2758 : f32 = x_2680.x_AdditionalLightsAttenuation[x_2756].w;
    u_xlat50 = ((x_2751 * x_2754) + x_2758);
    let x_2760 : f32 = u_xlat50;
    u_xlat50 = clamp(x_2760, 0.0f, 1.0f);
    let x_2762 : f32 = u_xlat50;
    let x_2763 : f32 = u_xlat50;
    u_xlat50 = (x_2762 * x_2763);
    let x_2765 : f32 = u_xlat50;
    let x_2767 : f32 = u_xlat8.x;
    u_xlat8.x = (x_2765 * x_2767);
    let x_2770 : vec4<f32> = u_xlat6;
    let x_2772 : i32 = u_xlati7;
    let x_2774 : vec4<f32> = x_2680.x_AdditionalLightsColor[x_2772];
    let x_2776 : vec3<f32> = (vec3<f32>(x_2770.x, x_2770.x, x_2770.x) * vec3<f32>(x_2774.x, x_2774.y, x_2774.z));
    let x_2777 : vec4<f32> = u_xlat10;
    u_xlat10 = vec4<f32>(x_2776.x, x_2776.y, x_2776.z, x_2777.w);
    let x_2779 : vec3<f32> = u_xlat21;
    let x_2780 : vec4<f32> = u_xlat9;
    u_xlat7.x = dot(x_2779, vec3<f32>(x_2780.x, x_2780.y, x_2780.z));
    let x_2785 : f32 = u_xlat7.x;
    u_xlat7.x = clamp(x_2785, 0.0f, 1.0f);
    let x_2789 : f32 = u_xlat7.x;
    let x_2791 : f32 = u_xlat8.x;
    u_xlat7.x = (x_2789 * x_2791);
    let x_2794 : vec4<f32> = u_xlat7;
    let x_2796 : vec4<f32> = u_xlat10;
    let x_2798 : vec3<f32> = (vec3<f32>(x_2794.x, x_2794.x, x_2794.x) * vec3<f32>(x_2796.x, x_2796.y, x_2796.z));
    let x_2799 : vec4<f32> = u_xlat8;
    u_xlat8 = vec4<f32>(x_2798.x, x_2799.y, x_2798.y, x_2798.z);
    let x_2801 : vec3<f32> = u_xlat28;
    let x_2802 : vec2<f32> = u_xlat29;
    let x_2805 : vec3<f32> = u_xlat5;
    let x_2806 : vec3<f32> = ((x_2801 * vec3<f32>(x_2802.x, x_2802.x, x_2802.x)) + x_2805);
    let x_2807 : vec4<f32> = u_xlat7;
    u_xlat7 = vec4<f32>(x_2806.x, x_2806.y, x_2806.z, x_2807.w);
    let x_2810 : vec4<f32> = u_xlat7;
    let x_2812 : vec4<f32> = u_xlat7;
    u_xlat70 = dot(vec3<f32>(x_2810.x, x_2810.y, x_2810.z), vec3<f32>(x_2812.x, x_2812.y, x_2812.z));
    let x_2815 : f32 = u_xlat70;
    u_xlat70 = max(x_2815, 1.17549435e-37f);
    let x_2817 : f32 = u_xlat70;
    u_xlat70 = inverseSqrt(x_2817);
    let x_2819 : f32 = u_xlat70;
    let x_2821 : vec4<f32> = u_xlat7;
    let x_2823 : vec3<f32> = (vec3<f32>(x_2819, x_2819, x_2819) * vec3<f32>(x_2821.x, x_2821.y, x_2821.z));
    let x_2824 : vec4<f32> = u_xlat7;
    u_xlat7 = vec4<f32>(x_2823.x, x_2823.y, x_2823.z, x_2824.w);
    let x_2826 : vec3<f32> = u_xlat21;
    let x_2827 : vec4<f32> = u_xlat7;
    u_xlat7.w = dot(x_2826, vec3<f32>(x_2827.x, x_2827.y, x_2827.z));
    let x_2832 : f32 = u_xlat7.w;
    u_xlat7.w = clamp(x_2832, 0.0f, 1.0f);
    let x_2835 : vec4<f32> = u_xlat9;
    let x_2837 : vec4<f32> = u_xlat7;
    u_xlat7.x = dot(vec3<f32>(x_2835.x, x_2835.y, x_2835.z), vec3<f32>(x_2837.x, x_2837.y, x_2837.z));
    let x_2842 : f32 = u_xlat7.x;
    u_xlat7.x = clamp(x_2842, 0.0f, 1.0f);
    let x_2845 : vec4<f32> = u_xlat7;
    let x_2847 : vec4<f32> = u_xlat7;
    let x_2849 : vec2<f32> = (vec2<f32>(x_2845.x, x_2845.w) * vec2<f32>(x_2847.x, x_2847.w));
    let x_2850 : vec4<f32> = u_xlat7;
    u_xlat7 = vec4<f32>(x_2849.x, x_2849.y, x_2850.z, x_2850.w);
    let x_2853 : f32 = u_xlat7.y;
    let x_2855 : f32 = u_xlat43.x;
    u_xlat28.x = ((x_2853 * x_2855) + 1.000010014f);
    let x_2860 : f32 = u_xlat28.x;
    let x_2862 : f32 = u_xlat28.x;
    u_xlat28.x = (x_2860 * x_2862);
    let x_2866 : f32 = u_xlat7.x;
    u_xlat7.x = max(x_2866, 0.100000001f);
    let x_2870 : f32 = u_xlat7.x;
    let x_2872 : f32 = u_xlat28.x;
    u_xlat7.x = (x_2870 * x_2872);
    let x_2875 : f32 = u_xlat67;
    let x_2877 : f32 = u_xlat7.x;
    u_xlat7.x = (x_2875 * x_2877);
    let x_2880 : f32 = u_xlat66;
    let x_2882 : f32 = u_xlat7.x;
    u_xlat7.x = (x_2880 / x_2882);
    let x_2885 : vec3<f32> = u_xlat2;
    let x_2886 : vec4<f32> = u_xlat7;
    let x_2889 : vec3<f32> = u_xlat3;
    let x_2890 : vec3<f32> = ((x_2885 * vec3<f32>(x_2886.x, x_2886.x, x_2886.x)) + x_2889);
    let x_2891 : vec4<f32> = u_xlat7;
    u_xlat7 = vec4<f32>(x_2890.x, x_2890.y, x_2890.z, x_2891.w);
    let x_2893 : vec4<f32> = u_xlat7;
    let x_2895 : vec4<f32> = u_xlat8;
    let x_2898 : vec3<f32> = u_xlat27;
    u_xlat27 = ((vec3<f32>(x_2893.x, x_2893.y, x_2893.z) * vec3<f32>(x_2895.x, x_2895.z, x_2895.w)) + x_2898);

    continuing {
      let x_2900 : u32 = u_xlatu_loop_1;
      u_xlatu_loop_1 = (x_2900 + bitcast<u32>(1i));
    }
  }
  let x_2902 : vec4<f32> = u_xlat4;
  let x_2904 : f32 = u_xlat68;
  let x_2907 : vec4<f32> = u_xlat1;
  let x_2909 : vec3<f32> = ((vec3<f32>(x_2902.x, x_2902.y, x_2902.z) * vec3<f32>(x_2904, x_2904, x_2904)) + vec3<f32>(x_2907.x, x_2907.y, x_2907.w));
  let x_2910 : vec4<f32> = u_xlat0;
  u_xlat0 = vec4<f32>(x_2909.x, x_2909.y, x_2909.z, x_2910.w);
  let x_2914 : vec3<f32> = u_xlat27;
  let x_2915 : vec4<f32> = u_xlat0;
  let x_2917 : vec3<f32> = (x_2914 + vec3<f32>(x_2915.x, x_2915.y, x_2915.z));
  let x_2918 : vec4<f32> = SV_Target0;
  SV_Target0 = vec4<f32>(x_2917.x, x_2917.y, x_2917.z, x_2918.w);
  SV_Target0.w = 1.0f;
  return;
}

struct main_out {
  @location(0)
  SV_Target0_1 : vec4<f32>,
}

@fragment
fn main(@builtin(position) gl_FragCoord_param : vec4<f32>, @location(1) vs_INTERP1_param : vec3<f32>, @location(2) vs_INTERP2_param : vec4<f32>, @location(3) vs_INTERP3_param : vec4<f32>, @location(0) vs_INTERP0_param : vec3<f32>, @location(4) vs_INTERP4_param : vec2<f32>) -> main_out {
  gl_FragCoord = gl_FragCoord_param;
  vs_INTERP1 = vs_INTERP1_param;
  vs_INTERP2 = vs_INTERP2_param;
  vs_INTERP3 = vs_INTERP3_param;
  vs_INTERP0 = vs_INTERP0_param;
  vs_INTERP4 = vs_INTERP4_param;
  main_1();
  return main_out(SV_Target0);
}

