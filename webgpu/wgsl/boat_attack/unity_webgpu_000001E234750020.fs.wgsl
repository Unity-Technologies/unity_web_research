struct PGlobals {
  x_ScaledScreenParams : vec4<f32>,
  x_GlobalMipBias : vec2<f32>,
  @size(8)
  padding : u32,
  x_MainLightPosition : vec4<f32>,
  x_MainLightColor : vec4<f32>,
  x_AmbientOcclusionParam : vec4<f32>,
  x_AdditionalLightsCount : vec4<f32>,
  x_RenderingLayerMaxInt : u32,
  x_RenderingLayerRcpMaxInt : f32,
  @size(8)
  padding_1 : u32,
  x_WorldSpaceCameraPos : vec3<f32>,
  @size(4)
  padding_2 : u32,
  x_ProjectionParams : vec4<f32>,
  unity_OrthoParams : vec4<f32>,
  x_ScaleBiasRt : vec4<f32>,
  unity_FogParams : vec4<f32>,
  unity_FogColor : vec4<f32>,
  unity_MatrixV : mat4x4<f32>,
}

struct UnityPerMaterial {
  x_MainTex_TexelSize : vec4<f32>,
  x_MRLL_TexelSize : vec4<f32>,
  x_BumpMap_TexelSize : vec4<f32>,
  x_Color1 : vec4<f32>,
  x_Color2 : vec4<f32>,
}

type Arr = array<vec4<f32>, 2u>;

struct UnityPerDraw {
  unity_ObjectToWorld : mat4x4<f32>,
  unity_WorldToObject : mat4x4<f32>,
  unity_LODFade : vec4<f32>,
  unity_WorldTransformParams : vec4<f32>,
  unity_RenderingLayer : vec4<f32>,
  unity_LightData : vec4<f32>,
  unity_LightIndices : Arr,
  unity_ProbesOcclusion : vec4<f32>,
  unity_SpecCube0_HDR : vec4<f32>,
  unity_SpecCube1_HDR : vec4<f32>,
  unity_SpecCube0_BoxMax : vec4<f32>,
  unity_SpecCube0_BoxMin : vec4<f32>,
  unity_SpecCube0_ProbePosition : vec4<f32>,
  unity_SpecCube1_BoxMax : vec4<f32>,
  unity_SpecCube1_BoxMin : vec4<f32>,
  unity_SpecCube1_ProbePosition : vec4<f32>,
  unity_LightmapST : vec4<f32>,
  unity_DynamicLightmapST : vec4<f32>,
  unity_SHAr : vec4<f32>,
  unity_SHAg : vec4<f32>,
  unity_SHAb : vec4<f32>,
  unity_SHBr : vec4<f32>,
  unity_SHBg : vec4<f32>,
  unity_SHBb : vec4<f32>,
  unity_SHC : vec4<f32>,
  unity_RendererBounds_Min : vec4<f32>,
  unity_RendererBounds_Max : vec4<f32>,
  unity_MatrixPreviousM : mat4x4<f32>,
  unity_MatrixPreviousMI : mat4x4<f32>,
  unity_MotionVectorsParams : vec4<f32>,
  unity_SpriteColor : vec4<f32>,
  unity_SpriteProps : vec4<f32>,
}

type Arr_1 = array<mat4x4<f32>, 5u>;

struct MainLightShadows {
  x_MainLightWorldToShadow : Arr_1,
  x_CascadeShadowSplitSpheres0 : vec4<f32>,
  x_CascadeShadowSplitSpheres1 : vec4<f32>,
  x_CascadeShadowSplitSpheres2 : vec4<f32>,
  x_CascadeShadowSplitSpheres3 : vec4<f32>,
  x_CascadeShadowSplitSphereRadii : vec4<f32>,
  x_MainLightShadowOffset0 : vec4<f32>,
  x_MainLightShadowOffset1 : vec4<f32>,
  x_MainLightShadowParams : vec4<f32>,
  x_MainLightShadowmapSize : vec4<f32>,
}

type Arr_2 = array<vec4<f32>, 256u>;

type Arr_3 = array<vec4<f32>, 256u>;

type Arr_4 = array<vec4<f32>, 256u>;

type Arr_5 = array<vec4<f32>, 256u>;

type Arr_6 = array<vec4<f32>, 256u>;

struct strided_arr {
  @size(16)
  el : f32,
}

type Arr_7 = array<strided_arr, 256u>;

struct AdditionalLights {
  x_AdditionalLightsPosition : Arr_6,
  x_AdditionalLightsColor : Arr_6,
  x_AdditionalLightsAttenuation : Arr_6,
  x_AdditionalLightsSpotDir : Arr_6,
  x_AdditionalLightsOcclusionProbes : Arr_6,
  x_AdditionalLightsLayerMasks : Arr_7,
}

var<private> gl_FragCoord : vec4<f32>;

@group(0) @binding(3) var x_MainTex : texture_2d<f32>;

@group(0) @binding(9) var samplerSamplerState_Trilinear_Clamp : sampler;

var<private> vs_INTERP3 : vec4<f32>;

@group(1) @binding(0) var<uniform> x_44 : PGlobals;

@group(0) @binding(4) var x_MRLL : texture_2d<f32>;

@group(1) @binding(4) var<uniform> x_68 : UnityPerMaterial;

@group(0) @binding(5) var x_BumpMap : texture_2d<f32>;

var<private> vs_INTERP2 : vec4<f32>;

@group(1) @binding(2) var<uniform> x_283 : UnityPerDraw;

var<private> vs_INTERP1 : vec3<f32>;

var<private> vs_INTERP0 : vec3<f32>;

@group(0) @binding(1) var x_ScreenSpaceOcclusionTexture : texture_2d<f32>;

@group(0) @binding(7) var sampler_ScreenSpaceOcclusionTexture : sampler;

@group(1) @binding(3) var<uniform> x_647 : MainLightShadows;

var<private> vs_INTERP8 : vec4<f32>;

@group(0) @binding(2) var x_MainLightShadowmapTexture : texture_depth_2d;

@group(0) @binding(8) var sampler_MainLightShadowmapTexture : sampler_comparison;

@group(0) @binding(0) var unity_SpecCube0 : texture_cube<f32>;

@group(0) @binding(6) var samplerunity_SpecCube0 : sampler;

@group(1) @binding(1) var<uniform> x_2260 : AdditionalLights;

var<private> SV_Target0 : vec4<f32>;

var<private> SV_Target1 : vec4<f32>;

fn main_1() {
  var hlslcc_FragCoord : vec4<f32>;
  var u_xlat0 : vec4<f32>;
  var u_xlat1 : vec4<f32>;
  var u_xlat2 : vec3<f32>;
  var u_xlat43 : f32;
  var u_xlat3 : vec4<f32>;
  var u_xlat4 : vec3<f32>;
  var u_xlatb4 : vec3<bool>;
  var u_xlat5 : vec4<f32>;
  var u_xlat21 : vec2<f32>;
  var u_xlatb22 : vec3<bool>;
  var u_xlat22 : vec3<f32>;
  var u_xlatb21 : bool;
  var u_xlat42 : f32;
  var x_404 : vec3<f32>;
  var u_xlat6 : vec3<f32>;
  var u_xlat65 : f32;
  var u_xlat66 : f32;
  var u_xlat67 : f32;
  var u_xlat63 : f32;
  var u_xlatb67 : bool;
  var u_xlat7 : vec4<f32>;
  var txVec0 : vec3<f32>;
  var u_xlat8 : vec4<f32>;
  var txVec1 : vec3<f32>;
  var txVec2 : vec3<f32>;
  var txVec3 : vec3<f32>;
  var u_xlatb26 : bool;
  var u_xlat26 : vec3<f32>;
  var u_xlat9 : vec4<f32>;
  var u_xlat49 : vec2<f32>;
  var u_xlat51 : vec2<f32>;
  var u_xlat10 : vec4<f32>;
  var u_xlat11 : vec4<f32>;
  var u_xlat12 : vec4<f32>;
  var u_xlat13 : vec4<f32>;
  var u_xlat14 : vec4<f32>;
  var u_xlat15 : vec4<f32>;
  var txVec4 : vec3<f32>;
  var u_xlat47 : f32;
  var txVec5 : vec3<f32>;
  var u_xlat68 : f32;
  var txVec6 : vec3<f32>;
  var txVec7 : vec3<f32>;
  var txVec8 : vec3<f32>;
  var txVec9 : vec3<f32>;
  var txVec10 : vec3<f32>;
  var txVec11 : vec3<f32>;
  var txVec12 : vec3<f32>;
  var u_xlat55 : vec2<f32>;
  var u_xlat16 : vec4<f32>;
  var u_xlat29 : vec2<f32>;
  var u_xlat17 : vec2<f32>;
  var u_xlat52 : vec2<f32>;
  var u_xlat18 : vec4<f32>;
  var u_xlat19 : vec4<f32>;
  var u_xlat20 : vec4<f32>;
  var txVec13 : vec3<f32>;
  var txVec14 : vec3<f32>;
  var u_xlat69 : f32;
  var txVec15 : vec3<f32>;
  var txVec16 : vec3<f32>;
  var txVec17 : vec3<f32>;
  var txVec18 : vec3<f32>;
  var txVec19 : vec3<f32>;
  var txVec20 : vec3<f32>;
  var txVec21 : vec3<f32>;
  var txVec22 : vec3<f32>;
  var txVec23 : vec3<f32>;
  var txVec24 : vec3<f32>;
  var txVec25 : vec3<f32>;
  var txVec26 : vec3<f32>;
  var txVec27 : vec3<f32>;
  var txVec28 : vec3<f32>;
  var txVec29 : vec3<f32>;
  var u_xlatb47 : bool;
  var u_xlat70 : f32;
  var u_xlatu42 : u32;
  var u_xlatu_loop_1 : u32;
  var u_xlatu67 : u32;
  var u_xlati69 : i32;
  var indexable : array<vec4<u32>, 4u>;
  var u_xlati67 : i32;
  var u_xlat71 : f32;
  var u_xlatu0 : u32;
  var u_xlat_precise_vec4 : vec4<f32>;
  var u_xlat_precise_ivec4 : vec4<i32>;
  var u_xlat_precise_bvec4 : vec4<bool>;
  var u_xlat_precise_uvec4 : vec4<u32>;
  let x_13 : vec4<f32> = gl_FragCoord;
  let x_14 : vec3<f32> = vec3<f32>(x_13.x, x_13.y, x_13.z);
  let x_20 : f32 = gl_FragCoord.w;
  hlslcc_FragCoord = vec4<f32>(x_14.x, x_14.y, x_14.z, (1.0f / x_20));
  let x_39 : vec4<f32> = vs_INTERP3;
  let x_50 : f32 = x_44.x_GlobalMipBias.x;
  let x_51 : vec4<f32> = textureSampleBias(x_MainTex, samplerSamplerState_Trilinear_Clamp, vec2<f32>(x_39.x, x_39.y), x_50);
  u_xlat0 = x_51;
  let x_57 : vec4<f32> = vs_INTERP3;
  let x_60 : f32 = x_44.x_GlobalMipBias.x;
  let x_61 : vec4<f32> = textureSampleBias(x_MRLL, samplerSamplerState_Trilinear_Clamp, vec2<f32>(x_57.x, x_57.y), x_60);
  u_xlat1 = x_61;
  let x_64 : vec4<f32> = u_xlat1;
  let x_72 : vec4<f32> = x_68.x_Color2;
  u_xlat2 = (vec3<f32>(x_64.w, x_64.w, x_64.w) * vec3<f32>(x_72.x, x_72.y, x_72.z));
  let x_77 : vec4<f32> = x_68.x_Color1;
  let x_79 : vec4<f32> = u_xlat1;
  let x_82 : vec3<f32> = u_xlat2;
  u_xlat2 = ((vec3<f32>(x_77.x, x_77.y, x_77.z) * vec3<f32>(x_79.z, x_79.z, x_79.z)) + x_82);
  let x_87 : f32 = u_xlat1.w;
  let x_90 : f32 = u_xlat1.z;
  u_xlat43 = (x_87 + x_90);
  let x_92 : f32 = u_xlat43;
  u_xlat43 = clamp(x_92, 0.0f, 1.0f);
  let x_96 : vec4<f32> = u_xlat0;
  let x_100 : vec3<f32> = (-(vec3<f32>(x_96.x, x_96.y, x_96.z)) + vec3<f32>(1.0f, 1.0f, 1.0f));
  let x_101 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_100.x, x_100.y, x_100.z, x_101.w);
  let x_103 : vec4<f32> = u_xlat3;
  let x_105 : vec4<f32> = u_xlat3;
  let x_107 : vec3<f32> = (vec3<f32>(x_103.x, x_103.y, x_103.z) + vec3<f32>(x_105.x, x_105.y, x_105.z));
  let x_108 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_107.x, x_107.y, x_107.z, x_108.w);
  let x_111 : vec3<f32> = u_xlat2;
  u_xlat4 = (-(x_111) + vec3<f32>(1.0f, 1.0f, 1.0f));
  let x_114 : vec4<f32> = u_xlat3;
  let x_117 : vec3<f32> = u_xlat4;
  let x_119 : vec3<f32> = ((-(vec3<f32>(x_114.x, x_114.y, x_114.z)) * x_117) + vec3<f32>(1.0f, 1.0f, 1.0f));
  let x_120 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_119.x, x_119.y, x_119.z, x_120.w);
  let x_122 : vec4<f32> = u_xlat0;
  let x_124 : vec4<f32> = u_xlat0;
  u_xlat4 = (vec3<f32>(x_122.x, x_122.y, x_122.z) + vec3<f32>(x_124.x, x_124.y, x_124.z));
  let x_127 : vec3<f32> = u_xlat2;
  let x_128 : vec3<f32> = u_xlat4;
  u_xlat2 = (x_127 * x_128);
  let x_136 : vec4<f32> = u_xlat0;
  let x_139 : vec4<bool> = (vec4<f32>(0.5f, 0.5f, 0.5f, 0.0f) >= vec4<f32>(x_136.x, x_136.y, x_136.z, x_136.x));
  u_xlatb4 = vec3<bool>(x_139.x, x_139.y, x_139.z);
  let x_144 : bool = u_xlatb4.x;
  u_xlat5.x = select(0.0f, 1.0f, x_144);
  let x_149 : bool = u_xlatb4.y;
  u_xlat5.y = select(0.0f, 1.0f, x_149);
  let x_153 : bool = u_xlatb4.z;
  u_xlat5.z = select(0.0f, 1.0f, x_153);
  let x_157 : bool = u_xlatb4.x;
  u_xlat4.x = select(1.0f, 0.0f, x_157);
  let x_161 : bool = u_xlatb4.y;
  u_xlat4.y = select(1.0f, 0.0f, x_161);
  let x_165 : bool = u_xlatb4.z;
  u_xlat4.z = select(1.0f, 0.0f, x_165);
  let x_168 : vec4<f32> = u_xlat3;
  let x_170 : vec3<f32> = u_xlat4;
  let x_171 : vec3<f32> = (vec3<f32>(x_168.x, x_168.y, x_168.z) * x_170);
  let x_172 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_171.x, x_171.y, x_171.z, x_172.w);
  let x_174 : vec3<f32> = u_xlat2;
  let x_175 : vec4<f32> = u_xlat5;
  let x_178 : vec4<f32> = u_xlat3;
  u_xlat2 = ((x_174 * vec3<f32>(x_175.x, x_175.y, x_175.z)) + vec3<f32>(x_178.x, x_178.y, x_178.z));
  let x_181 : vec4<f32> = u_xlat0;
  let x_184 : vec3<f32> = u_xlat2;
  u_xlat2 = (-(vec3<f32>(x_181.x, x_181.y, x_181.z)) + x_184);
  let x_186 : f32 = u_xlat43;
  let x_188 : vec3<f32> = u_xlat2;
  let x_190 : vec4<f32> = u_xlat0;
  u_xlat2 = ((vec3<f32>(x_186, x_186, x_186) * x_188) + vec3<f32>(x_190.x, x_190.y, x_190.z));
  let x_194 : f32 = u_xlat0.x;
  u_xlat0.x = (x_194 + -0.150000006f);
  let x_199 : f32 = u_xlat0.x;
  u_xlat0.x = ceil(x_199);
  let x_203 : f32 = u_xlat0.x;
  u_xlat0.x = (-(x_203) + 1.0f);
  let x_207 : vec4<f32> = u_xlat0;
  let x_212 : vec3<f32> = u_xlat2;
  u_xlat2 = ((vec3<f32>(x_207.x, x_207.x, x_207.x) * vec3<f32>(0.400000006f, 0.400000006f, 0.400000006f)) + x_212);
  let x_218 : vec4<f32> = vs_INTERP3;
  let x_221 : f32 = x_44.x_GlobalMipBias.x;
  let x_222 : vec4<f32> = textureSampleBias(x_BumpMap, samplerSamplerState_Trilinear_Clamp, vec2<f32>(x_218.x, x_218.y), x_221);
  let x_223 : vec3<f32> = vec3<f32>(x_222.x, x_222.y, x_222.w);
  let x_224 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_223.x, x_223.y, x_223.z, x_224.w);
  let x_227 : f32 = u_xlat3.x;
  let x_229 : f32 = u_xlat3.z;
  u_xlat3.x = (x_227 * x_229);
  let x_234 : vec4<f32> = u_xlat3;
  u_xlat21 = ((vec2<f32>(x_234.x, x_234.y) * vec2<f32>(2.0f, 2.0f)) + vec2<f32>(-1.0f, -1.0f));
  let x_242 : vec2<f32> = u_xlat21;
  let x_243 : vec2<f32> = u_xlat21;
  u_xlat43 = dot(x_242, x_243);
  let x_245 : f32 = u_xlat43;
  u_xlat43 = min(x_245, 1.0f);
  let x_247 : f32 = u_xlat43;
  u_xlat43 = (-(x_247) + 1.0f);
  let x_250 : f32 = u_xlat43;
  u_xlat43 = sqrt(x_250);
  let x_252 : f32 = u_xlat43;
  u_xlat43 = max(x_252, 1.00000002e-16f);
  let x_256 : f32 = u_xlat1.x;
  let x_258 : f32 = u_xlat0.x;
  u_xlat0.x = (x_256 + x_258);
  let x_262 : f32 = u_xlat0.x;
  u_xlat0.x = clamp(x_262, 0.0f, 1.0f);
  let x_266 : f32 = u_xlat1.y;
  u_xlat1.x = max(x_266, 0.0f);
  let x_270 : f32 = u_xlat1.x;
  u_xlat1.x = min(x_270, 0.850000024f);
  let x_277 : f32 = vs_INTERP2.w;
  u_xlatb22.x = (0.0f < x_277);
  let x_285 : f32 = x_283.unity_WorldTransformParams.w;
  u_xlatb22.z = (x_285 >= 0.0f);
  let x_290 : bool = u_xlatb22.x;
  u_xlat22.x = select(-1.0f, 1.0f, x_290);
  let x_294 : bool = u_xlatb22.z;
  u_xlat22.z = select(-1.0f, 1.0f, x_294);
  let x_298 : f32 = u_xlat22.z;
  let x_300 : f32 = u_xlat22.x;
  u_xlat22.x = (x_298 * x_300);
  let x_305 : vec3<f32> = vs_INTERP1;
  let x_307 : vec4<f32> = vs_INTERP2;
  let x_309 : vec3<f32> = (vec3<f32>(x_305.z, x_305.x, x_305.y) * vec3<f32>(x_307.y, x_307.z, x_307.x));
  let x_310 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_309.x, x_309.y, x_309.z, x_310.w);
  let x_312 : vec3<f32> = vs_INTERP1;
  let x_314 : vec4<f32> = vs_INTERP2;
  let x_317 : vec4<f32> = u_xlat3;
  let x_320 : vec3<f32> = ((vec3<f32>(x_312.y, x_312.z, x_312.x) * vec3<f32>(x_314.z, x_314.x, x_314.y)) + -(vec3<f32>(x_317.x, x_317.y, x_317.z)));
  let x_321 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_320.x, x_320.y, x_320.z, x_321.w);
  let x_323 : vec3<f32> = u_xlat22;
  let x_325 : vec4<f32> = u_xlat3;
  let x_327 : vec3<f32> = (vec3<f32>(x_323.x, x_323.x, x_323.x) * vec3<f32>(x_325.x, x_325.y, x_325.z));
  let x_328 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_327.x, x_327.y, x_327.z, x_328.w);
  let x_330 : vec2<f32> = u_xlat21;
  let x_332 : vec4<f32> = u_xlat3;
  let x_334 : vec3<f32> = (vec3<f32>(x_330.y, x_330.y, x_330.y) * vec3<f32>(x_332.x, x_332.y, x_332.z));
  let x_335 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_334.x, x_334.y, x_334.z, x_335.w);
  let x_337 : vec2<f32> = u_xlat21;
  let x_339 : vec4<f32> = vs_INTERP2;
  let x_342 : vec4<f32> = u_xlat3;
  let x_344 : vec3<f32> = ((vec3<f32>(x_337.x, x_337.x, x_337.x) * vec3<f32>(x_339.x, x_339.y, x_339.z)) + vec3<f32>(x_342.x, x_342.y, x_342.z));
  let x_345 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_344.x, x_344.y, x_344.z, x_345.w);
  let x_347 : f32 = u_xlat43;
  let x_349 : vec3<f32> = vs_INTERP1;
  let x_351 : vec4<f32> = u_xlat3;
  u_xlat22 = ((vec3<f32>(x_347, x_347, x_347) * x_349) + vec3<f32>(x_351.x, x_351.y, x_351.z));
  let x_354 : vec3<f32> = u_xlat22;
  let x_355 : vec3<f32> = u_xlat22;
  u_xlat21.x = dot(x_354, x_355);
  let x_359 : f32 = u_xlat21.x;
  u_xlat21.x = inverseSqrt(x_359);
  let x_362 : vec2<f32> = u_xlat21;
  let x_364 : vec3<f32> = u_xlat22;
  let x_365 : vec3<f32> = (vec3<f32>(x_362.x, x_362.x, x_362.x) * x_364);
  let x_366 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_365.x, x_365.y, x_365.z, x_366.w);
  let x_371 : f32 = x_44.unity_OrthoParams.w;
  u_xlatb21 = (x_371 == 0.0f);
  let x_374 : vec3<f32> = vs_INTERP0;
  let x_379 : vec3<f32> = x_44.x_WorldSpaceCameraPos;
  u_xlat22 = (-(x_374) + x_379);
  let x_382 : vec3<f32> = u_xlat22;
  let x_383 : vec3<f32> = u_xlat22;
  u_xlat42 = dot(x_382, x_383);
  let x_385 : f32 = u_xlat42;
  u_xlat42 = inverseSqrt(x_385);
  let x_387 : f32 = u_xlat42;
  let x_389 : vec3<f32> = u_xlat22;
  u_xlat22 = (vec3<f32>(x_387, x_387, x_387) * x_389);
  let x_394 : f32 = x_44.unity_MatrixV[0i].z;
  u_xlat4.x = x_394;
  let x_397 : f32 = x_44.unity_MatrixV[1i].z;
  u_xlat4.y = x_397;
  let x_401 : f32 = x_44.unity_MatrixV[2i].z;
  u_xlat4.z = x_401;
  let x_403 : bool = u_xlatb21;
  if (x_403) {
    let x_407 : vec3<f32> = u_xlat22;
    x_404 = x_407;
  } else {
    let x_409 : vec3<f32> = u_xlat4;
    x_404 = x_409;
  }
  let x_410 : vec3<f32> = x_404;
  u_xlat22 = x_410;
  let x_412 : f32 = vs_INTERP0.y;
  let x_414 : f32 = x_44.unity_MatrixV[1i].z;
  u_xlat21.x = (x_412 * x_414);
  let x_418 : f32 = x_44.unity_MatrixV[0i].z;
  let x_420 : f32 = vs_INTERP0.x;
  let x_423 : f32 = u_xlat21.x;
  u_xlat21.x = ((x_418 * x_420) + x_423);
  let x_427 : f32 = x_44.unity_MatrixV[2i].z;
  let x_429 : f32 = vs_INTERP0.z;
  let x_432 : f32 = u_xlat21.x;
  u_xlat21.x = ((x_427 * x_429) + x_432);
  let x_436 : f32 = u_xlat21.x;
  let x_438 : f32 = x_44.unity_MatrixV[3i].z;
  u_xlat21.x = (x_436 + x_438);
  let x_442 : f32 = u_xlat21.x;
  let x_446 : f32 = x_44.x_ProjectionParams.y;
  u_xlat21.x = (-(x_442) + -(x_446));
  let x_451 : f32 = u_xlat21.x;
  u_xlat21.x = max(x_451, 0.0f);
  let x_455 : f32 = u_xlat21.x;
  let x_458 : f32 = x_44.unity_FogParams.x;
  u_xlat21.x = (x_455 * x_458);
  u_xlat3.w = 1.0f;
  let x_464 : vec4<f32> = x_283.unity_SHAr;
  let x_465 : vec4<f32> = u_xlat3;
  u_xlat4.x = dot(x_464, x_465);
  let x_470 : vec4<f32> = x_283.unity_SHAg;
  let x_471 : vec4<f32> = u_xlat3;
  u_xlat4.y = dot(x_470, x_471);
  let x_476 : vec4<f32> = x_283.unity_SHAb;
  let x_477 : vec4<f32> = u_xlat3;
  u_xlat4.z = dot(x_476, x_477);
  let x_480 : vec4<f32> = u_xlat3;
  let x_482 : vec4<f32> = u_xlat3;
  u_xlat5 = (vec4<f32>(x_480.y, x_480.z, x_480.z, x_480.x) * vec4<f32>(x_482.x, x_482.y, x_482.z, x_482.z));
  let x_488 : vec4<f32> = x_283.unity_SHBr;
  let x_489 : vec4<f32> = u_xlat5;
  u_xlat6.x = dot(x_488, x_489);
  let x_494 : vec4<f32> = x_283.unity_SHBg;
  let x_495 : vec4<f32> = u_xlat5;
  u_xlat6.y = dot(x_494, x_495);
  let x_500 : vec4<f32> = x_283.unity_SHBb;
  let x_501 : vec4<f32> = u_xlat5;
  u_xlat6.z = dot(x_500, x_501);
  let x_505 : f32 = u_xlat3.y;
  let x_507 : f32 = u_xlat3.y;
  u_xlat42 = (x_505 * x_507);
  let x_510 : f32 = u_xlat3.x;
  let x_512 : f32 = u_xlat3.x;
  let x_514 : f32 = u_xlat42;
  u_xlat42 = ((x_510 * x_512) + -(x_514));
  let x_519 : vec4<f32> = x_283.unity_SHC;
  let x_521 : f32 = u_xlat42;
  let x_524 : vec3<f32> = u_xlat6;
  let x_525 : vec3<f32> = ((vec3<f32>(x_519.x, x_519.y, x_519.z) * vec3<f32>(x_521, x_521, x_521)) + x_524);
  let x_526 : vec4<f32> = u_xlat5;
  u_xlat5 = vec4<f32>(x_525.x, x_525.y, x_525.z, x_526.w);
  let x_528 : vec3<f32> = u_xlat4;
  let x_529 : vec4<f32> = u_xlat5;
  u_xlat4 = (x_528 + vec3<f32>(x_529.x, x_529.y, x_529.z));
  let x_532 : vec3<f32> = u_xlat4;
  u_xlat4 = max(x_532, vec3<f32>(0.0f, 0.0f, 0.0f));
  let x_537 : vec4<f32> = x_44.x_ScaledScreenParams;
  let x_538 : vec2<f32> = vec2<f32>(x_537.x, x_537.y);
  let x_542 : vec2<f32> = (vec2<f32>(1.0f, 1.0f) / vec2<f32>(x_538.x, x_538.y));
  let x_543 : vec4<f32> = u_xlat5;
  u_xlat5 = vec4<f32>(x_542.x, x_542.y, x_543.z, x_543.w);
  let x_545 : vec4<f32> = u_xlat5;
  let x_547 : vec4<f32> = hlslcc_FragCoord;
  let x_549 : vec2<f32> = (vec2<f32>(x_545.x, x_545.y) * vec2<f32>(x_547.x, x_547.y));
  let x_550 : vec4<f32> = u_xlat5;
  u_xlat5 = vec4<f32>(x_549.x, x_549.y, x_550.z, x_550.w);
  let x_553 : f32 = u_xlat5.y;
  let x_556 : f32 = x_44.x_ScaleBiasRt.x;
  let x_559 : f32 = x_44.x_ScaleBiasRt.y;
  u_xlat42 = ((x_553 * x_556) + x_559);
  let x_561 : f32 = u_xlat42;
  u_xlat5.z = (-(x_561) + 1.0f);
  let x_566 : f32 = u_xlat0.x;
  u_xlat42 = ((-(x_566) * 0.959999979f) + 0.959999979f);
  let x_572 : f32 = u_xlat42;
  let x_575 : f32 = u_xlat1.x;
  u_xlat65 = (-(x_572) + x_575);
  let x_577 : f32 = u_xlat42;
  let x_579 : vec3<f32> = u_xlat2;
  u_xlat6 = (vec3<f32>(x_577, x_577, x_577) * x_579);
  let x_581 : vec3<f32> = u_xlat2;
  u_xlat2 = (x_581 + vec3<f32>(-0.039999999f, -0.039999999f, -0.039999999f));
  let x_585 : vec4<f32> = u_xlat0;
  let x_587 : vec3<f32> = u_xlat2;
  u_xlat2 = ((vec3<f32>(x_585.x, x_585.x, x_585.x) * x_587) + vec3<f32>(0.039999999f, 0.039999999f, 0.039999999f));
  let x_593 : f32 = u_xlat1.x;
  u_xlat0.x = (-(x_593) + 1.0f);
  let x_598 : f32 = u_xlat0.x;
  let x_600 : f32 = u_xlat0.x;
  u_xlat42 = (x_598 * x_600);
  let x_602 : f32 = u_xlat42;
  let x_603 : f32 = u_xlat42;
  u_xlat1.x = (x_602 * x_603);
  let x_606 : f32 = u_xlat65;
  u_xlat65 = (x_606 + 1.0f);
  let x_608 : f32 = u_xlat65;
  u_xlat65 = min(x_608, 1.0f);
  let x_611 : f32 = u_xlat42;
  u_xlat66 = ((x_611 * 4.0f) + 2.0f);
  let x_621 : vec4<f32> = u_xlat5;
  let x_624 : f32 = x_44.x_GlobalMipBias.x;
  let x_625 : vec4<f32> = textureSampleBias(x_ScreenSpaceOcclusionTexture, sampler_ScreenSpaceOcclusionTexture, vec2<f32>(x_621.x, x_621.z), x_624);
  u_xlat67 = x_625.x;
  let x_627 : f32 = u_xlat67;
  u_xlat5.x = (x_627 + -1.0f);
  let x_631 : f32 = x_44.x_AmbientOcclusionParam.w;
  let x_633 : f32 = u_xlat5.x;
  u_xlat5.x = ((x_631 * x_633) + 1.0f);
  let x_639 : f32 = u_xlat0.w;
  let x_640 : f32 = u_xlat67;
  u_xlat63 = min(x_639, x_640);
  let x_649 : f32 = x_647.x_MainLightShadowParams.y;
  u_xlatb67 = (0.0f < x_649);
  let x_651 : bool = u_xlatb67;
  if (x_651) {
    let x_655 : f32 = x_647.x_MainLightShadowParams.y;
    u_xlatb67 = (x_655 == 1.0f);
    let x_657 : bool = u_xlatb67;
    if (x_657) {
      let x_662 : vec4<f32> = vs_INTERP8;
      let x_666 : vec4<f32> = x_647.x_MainLightShadowOffset0;
      u_xlat7 = (vec4<f32>(x_662.x, x_662.y, x_662.x, x_662.y) + x_666);
      let x_669 : vec4<f32> = u_xlat7;
      let x_670 : vec2<f32> = vec2<f32>(x_669.x, x_669.y);
      let x_672 : f32 = vs_INTERP8.z;
      txVec0 = vec3<f32>(x_670.x, x_670.y, x_672);
      let x_685 : vec3<f32> = txVec0;
      let x_687 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_685.xy, x_685.z);
      u_xlat8.x = x_687;
      let x_690 : vec4<f32> = u_xlat7;
      let x_691 : vec2<f32> = vec2<f32>(x_690.z, x_690.w);
      let x_693 : f32 = vs_INTERP8.z;
      txVec1 = vec3<f32>(x_691.x, x_691.y, x_693);
      let x_700 : vec3<f32> = txVec1;
      let x_702 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_700.xy, x_700.z);
      u_xlat8.y = x_702;
      let x_704 : vec4<f32> = vs_INTERP8;
      let x_708 : vec4<f32> = x_647.x_MainLightShadowOffset1;
      u_xlat7 = (vec4<f32>(x_704.x, x_704.y, x_704.x, x_704.y) + x_708);
      let x_711 : vec4<f32> = u_xlat7;
      let x_712 : vec2<f32> = vec2<f32>(x_711.x, x_711.y);
      let x_714 : f32 = vs_INTERP8.z;
      txVec2 = vec3<f32>(x_712.x, x_712.y, x_714);
      let x_721 : vec3<f32> = txVec2;
      let x_723 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_721.xy, x_721.z);
      u_xlat8.z = x_723;
      let x_726 : vec4<f32> = u_xlat7;
      let x_727 : vec2<f32> = vec2<f32>(x_726.z, x_726.w);
      let x_729 : f32 = vs_INTERP8.z;
      txVec3 = vec3<f32>(x_727.x, x_727.y, x_729);
      let x_736 : vec3<f32> = txVec3;
      let x_738 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_736.xy, x_736.z);
      u_xlat8.w = x_738;
      let x_740 : vec4<f32> = u_xlat8;
      u_xlat67 = dot(x_740, vec4<f32>(0.25f, 0.25f, 0.25f, 0.25f));
    } else {
      let x_747 : f32 = x_647.x_MainLightShadowParams.y;
      u_xlatb26 = (x_747 == 2.0f);
      let x_749 : bool = u_xlatb26;
      if (x_749) {
        let x_753 : vec4<f32> = vs_INTERP8;
        let x_756 : vec4<f32> = x_647.x_MainLightShadowmapSize;
        let x_760 : vec2<f32> = ((vec2<f32>(x_753.x, x_753.y) * vec2<f32>(x_756.z, x_756.w)) + vec2<f32>(0.5f, 0.5f));
        let x_761 : vec3<f32> = u_xlat26;
        u_xlat26 = vec3<f32>(x_760.x, x_760.y, x_761.z);
        let x_763 : vec3<f32> = u_xlat26;
        let x_765 : vec2<f32> = floor(vec2<f32>(x_763.x, x_763.y));
        let x_766 : vec3<f32> = u_xlat26;
        u_xlat26 = vec3<f32>(x_765.x, x_765.y, x_766.z);
        let x_768 : vec4<f32> = vs_INTERP8;
        let x_771 : vec4<f32> = x_647.x_MainLightShadowmapSize;
        let x_774 : vec3<f32> = u_xlat26;
        let x_777 : vec2<f32> = ((vec2<f32>(x_768.x, x_768.y) * vec2<f32>(x_771.z, x_771.w)) + -(vec2<f32>(x_774.x, x_774.y)));
        let x_778 : vec4<f32> = u_xlat7;
        u_xlat7 = vec4<f32>(x_777.x, x_777.y, x_778.z, x_778.w);
        let x_780 : vec4<f32> = u_xlat7;
        u_xlat8 = (vec4<f32>(x_780.x, x_780.x, x_780.y, x_780.y) + vec4<f32>(0.5f, 1.0f, 0.5f, 1.0f));
        let x_785 : vec4<f32> = u_xlat8;
        let x_787 : vec4<f32> = u_xlat8;
        u_xlat9 = (vec4<f32>(x_785.x, x_785.x, x_785.z, x_785.z) * vec4<f32>(x_787.x, x_787.x, x_787.z, x_787.z));
        let x_791 : vec4<f32> = u_xlat9;
        u_xlat49 = (vec2<f32>(x_791.y, x_791.w) * vec2<f32>(0.079999998f, 0.079999998f));
        let x_796 : vec4<f32> = u_xlat9;
        let x_799 : vec4<f32> = u_xlat7;
        let x_802 : vec2<f32> = ((vec2<f32>(x_796.x, x_796.z) * vec2<f32>(0.5f, 0.5f)) + -(vec2<f32>(x_799.x, x_799.y)));
        let x_803 : vec4<f32> = u_xlat8;
        u_xlat8 = vec4<f32>(x_802.x, x_803.y, x_802.y, x_803.w);
        let x_805 : vec4<f32> = u_xlat7;
        let x_808 : vec2<f32> = (-(vec2<f32>(x_805.x, x_805.y)) + vec2<f32>(1.0f, 1.0f));
        let x_809 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_808.x, x_808.y, x_809.z, x_809.w);
        let x_812 : vec4<f32> = u_xlat7;
        u_xlat51 = min(vec2<f32>(x_812.x, x_812.y), vec2<f32>(0.0f, 0.0f));
        let x_816 : vec2<f32> = u_xlat51;
        let x_818 : vec2<f32> = u_xlat51;
        let x_820 : vec4<f32> = u_xlat9;
        u_xlat51 = ((-(x_816) * x_818) + vec2<f32>(x_820.x, x_820.y));
        let x_823 : vec4<f32> = u_xlat7;
        let x_825 : vec2<f32> = max(vec2<f32>(x_823.x, x_823.y), vec2<f32>(0.0f, 0.0f));
        let x_826 : vec4<f32> = u_xlat7;
        u_xlat7 = vec4<f32>(x_825.x, x_825.y, x_826.z, x_826.w);
        let x_828 : vec4<f32> = u_xlat7;
        let x_831 : vec4<f32> = u_xlat7;
        let x_834 : vec4<f32> = u_xlat8;
        let x_836 : vec2<f32> = ((-(vec2<f32>(x_828.x, x_828.y)) * vec2<f32>(x_831.x, x_831.y)) + vec2<f32>(x_834.y, x_834.w));
        let x_837 : vec4<f32> = u_xlat7;
        u_xlat7 = vec4<f32>(x_836.x, x_836.y, x_837.z, x_837.w);
        let x_839 : vec2<f32> = u_xlat51;
        u_xlat51 = (x_839 + vec2<f32>(1.0f, 1.0f));
        let x_841 : vec4<f32> = u_xlat7;
        let x_843 : vec2<f32> = (vec2<f32>(x_841.x, x_841.y) + vec2<f32>(1.0f, 1.0f));
        let x_844 : vec4<f32> = u_xlat7;
        u_xlat7 = vec4<f32>(x_843.x, x_843.y, x_844.z, x_844.w);
        let x_847 : vec4<f32> = u_xlat8;
        let x_851 : vec2<f32> = (vec2<f32>(x_847.x, x_847.z) * vec2<f32>(0.159999996f, 0.159999996f));
        let x_852 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_851.x, x_851.y, x_852.z, x_852.w);
        let x_855 : vec4<f32> = u_xlat9;
        let x_857 : vec2<f32> = (vec2<f32>(x_855.x, x_855.y) * vec2<f32>(0.159999996f, 0.159999996f));
        let x_858 : vec4<f32> = u_xlat11;
        u_xlat11 = vec4<f32>(x_857.x, x_857.y, x_858.z, x_858.w);
        let x_860 : vec2<f32> = u_xlat51;
        let x_861 : vec2<f32> = (x_860 * vec2<f32>(0.159999996f, 0.159999996f));
        let x_862 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_861.x, x_861.y, x_862.z, x_862.w);
        let x_865 : vec4<f32> = u_xlat7;
        let x_867 : vec2<f32> = (vec2<f32>(x_865.x, x_865.y) * vec2<f32>(0.159999996f, 0.159999996f));
        let x_868 : vec4<f32> = u_xlat12;
        u_xlat12 = vec4<f32>(x_867.x, x_867.y, x_868.z, x_868.w);
        let x_870 : vec4<f32> = u_xlat8;
        let x_872 : vec2<f32> = (vec2<f32>(x_870.y, x_870.w) * vec2<f32>(0.159999996f, 0.159999996f));
        let x_873 : vec4<f32> = u_xlat7;
        u_xlat7 = vec4<f32>(x_872.x, x_872.y, x_873.z, x_873.w);
        let x_876 : f32 = u_xlat9.x;
        u_xlat10.z = x_876;
        let x_879 : f32 = u_xlat7.x;
        u_xlat10.w = x_879;
        let x_882 : f32 = u_xlat12.x;
        u_xlat11.z = x_882;
        let x_885 : f32 = u_xlat49.x;
        u_xlat11.w = x_885;
        let x_887 : vec4<f32> = u_xlat10;
        let x_889 : vec4<f32> = u_xlat11;
        u_xlat8 = (vec4<f32>(x_887.z, x_887.w, x_887.x, x_887.z) + vec4<f32>(x_889.z, x_889.w, x_889.x, x_889.z));
        let x_893 : f32 = u_xlat10.y;
        u_xlat9.z = x_893;
        let x_896 : f32 = u_xlat7.y;
        u_xlat9.w = x_896;
        let x_899 : f32 = u_xlat11.y;
        u_xlat12.z = x_899;
        let x_902 : f32 = u_xlat49.y;
        u_xlat12.w = x_902;
        let x_904 : vec4<f32> = u_xlat9;
        let x_906 : vec4<f32> = u_xlat12;
        let x_908 : vec3<f32> = (vec3<f32>(x_904.z, x_904.y, x_904.w) + vec3<f32>(x_906.z, x_906.y, x_906.w));
        let x_909 : vec4<f32> = u_xlat7;
        u_xlat7 = vec4<f32>(x_908.x, x_908.y, x_908.z, x_909.w);
        let x_911 : vec4<f32> = u_xlat11;
        let x_913 : vec4<f32> = u_xlat8;
        let x_915 : vec3<f32> = (vec3<f32>(x_911.x, x_911.z, x_911.w) / vec3<f32>(x_913.z, x_913.w, x_913.y));
        let x_916 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_915.x, x_915.y, x_915.z, x_916.w);
        let x_918 : vec4<f32> = u_xlat9;
        let x_924 : vec3<f32> = (vec3<f32>(x_918.x, x_918.y, x_918.z) + vec3<f32>(-2.5f, -0.5f, 1.5f));
        let x_925 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_924.x, x_924.y, x_924.z, x_925.w);
        let x_927 : vec4<f32> = u_xlat12;
        let x_929 : vec4<f32> = u_xlat7;
        let x_931 : vec3<f32> = (vec3<f32>(x_927.z, x_927.y, x_927.w) / vec3<f32>(x_929.x, x_929.y, x_929.z));
        let x_932 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_931.x, x_931.y, x_931.z, x_932.w);
        let x_934 : vec4<f32> = u_xlat10;
        let x_936 : vec3<f32> = (vec3<f32>(x_934.x, x_934.y, x_934.z) + vec3<f32>(-2.5f, -0.5f, 1.5f));
        let x_937 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_936.x, x_936.y, x_936.z, x_937.w);
        let x_939 : vec4<f32> = u_xlat9;
        let x_942 : vec4<f32> = x_647.x_MainLightShadowmapSize;
        let x_944 : vec3<f32> = (vec3<f32>(x_939.y, x_939.x, x_939.z) * vec3<f32>(x_942.x, x_942.x, x_942.x));
        let x_945 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_944.x, x_944.y, x_944.z, x_945.w);
        let x_947 : vec4<f32> = u_xlat10;
        let x_950 : vec4<f32> = x_647.x_MainLightShadowmapSize;
        let x_952 : vec3<f32> = (vec3<f32>(x_947.x, x_947.y, x_947.z) * vec3<f32>(x_950.y, x_950.y, x_950.y));
        let x_953 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_952.x, x_952.y, x_952.z, x_953.w);
        let x_956 : f32 = u_xlat10.x;
        u_xlat9.w = x_956;
        let x_958 : vec3<f32> = u_xlat26;
        let x_961 : vec4<f32> = x_647.x_MainLightShadowmapSize;
        let x_964 : vec4<f32> = u_xlat9;
        u_xlat11 = ((vec4<f32>(x_958.x, x_958.y, x_958.x, x_958.y) * vec4<f32>(x_961.x, x_961.y, x_961.x, x_961.y)) + vec4<f32>(x_964.y, x_964.w, x_964.x, x_964.w));
        let x_967 : vec3<f32> = u_xlat26;
        let x_970 : vec4<f32> = x_647.x_MainLightShadowmapSize;
        let x_973 : vec4<f32> = u_xlat9;
        let x_975 : vec2<f32> = ((vec2<f32>(x_967.x, x_967.y) * vec2<f32>(x_970.x, x_970.y)) + vec2<f32>(x_973.z, x_973.w));
        let x_976 : vec4<f32> = u_xlat12;
        u_xlat12 = vec4<f32>(x_975.x, x_975.y, x_976.z, x_976.w);
        let x_979 : f32 = u_xlat9.y;
        u_xlat10.w = x_979;
        let x_981 : vec4<f32> = u_xlat10;
        let x_982 : vec2<f32> = vec2<f32>(x_981.y, x_981.z);
        let x_983 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_983.x, x_982.x, x_983.z, x_982.y);
        let x_986 : vec3<f32> = u_xlat26;
        let x_989 : vec4<f32> = x_647.x_MainLightShadowmapSize;
        let x_992 : vec4<f32> = u_xlat9;
        u_xlat13 = ((vec4<f32>(x_986.x, x_986.y, x_986.x, x_986.y) * vec4<f32>(x_989.x, x_989.y, x_989.x, x_989.y)) + vec4<f32>(x_992.x, x_992.y, x_992.z, x_992.y));
        let x_995 : vec3<f32> = u_xlat26;
        let x_998 : vec4<f32> = x_647.x_MainLightShadowmapSize;
        let x_1001 : vec4<f32> = u_xlat10;
        u_xlat10 = ((vec4<f32>(x_995.x, x_995.y, x_995.x, x_995.y) * vec4<f32>(x_998.x, x_998.y, x_998.x, x_998.y)) + vec4<f32>(x_1001.w, x_1001.y, x_1001.w, x_1001.z));
        let x_1004 : vec3<f32> = u_xlat26;
        let x_1007 : vec4<f32> = x_647.x_MainLightShadowmapSize;
        let x_1010 : vec4<f32> = u_xlat9;
        u_xlat9 = ((vec4<f32>(x_1004.x, x_1004.y, x_1004.x, x_1004.y) * vec4<f32>(x_1007.x, x_1007.y, x_1007.x, x_1007.y)) + vec4<f32>(x_1010.x, x_1010.w, x_1010.z, x_1010.w));
        let x_1014 : vec4<f32> = u_xlat7;
        let x_1016 : vec4<f32> = u_xlat8;
        u_xlat14 = (vec4<f32>(x_1014.x, x_1014.x, x_1014.x, x_1014.y) * vec4<f32>(x_1016.z, x_1016.w, x_1016.y, x_1016.z));
        let x_1020 : vec4<f32> = u_xlat7;
        let x_1022 : vec4<f32> = u_xlat8;
        u_xlat15 = (vec4<f32>(x_1020.y, x_1020.y, x_1020.z, x_1020.z) * x_1022);
        let x_1025 : f32 = u_xlat7.z;
        let x_1027 : f32 = u_xlat8.y;
        u_xlat26.x = (x_1025 * x_1027);
        let x_1031 : vec4<f32> = u_xlat11;
        let x_1032 : vec2<f32> = vec2<f32>(x_1031.x, x_1031.y);
        let x_1034 : f32 = vs_INTERP8.z;
        txVec4 = vec3<f32>(x_1032.x, x_1032.y, x_1034);
        let x_1042 : vec3<f32> = txVec4;
        let x_1044 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1042.xy, x_1042.z);
        u_xlat47 = x_1044;
        let x_1046 : vec4<f32> = u_xlat11;
        let x_1047 : vec2<f32> = vec2<f32>(x_1046.z, x_1046.w);
        let x_1049 : f32 = vs_INTERP8.z;
        txVec5 = vec3<f32>(x_1047.x, x_1047.y, x_1049);
        let x_1057 : vec3<f32> = txVec5;
        let x_1059 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1057.xy, x_1057.z);
        u_xlat68 = x_1059;
        let x_1060 : f32 = u_xlat68;
        let x_1062 : f32 = u_xlat14.y;
        u_xlat68 = (x_1060 * x_1062);
        let x_1065 : f32 = u_xlat14.x;
        let x_1066 : f32 = u_xlat47;
        let x_1068 : f32 = u_xlat68;
        u_xlat47 = ((x_1065 * x_1066) + x_1068);
        let x_1071 : vec4<f32> = u_xlat12;
        let x_1072 : vec2<f32> = vec2<f32>(x_1071.x, x_1071.y);
        let x_1074 : f32 = vs_INTERP8.z;
        txVec6 = vec3<f32>(x_1072.x, x_1072.y, x_1074);
        let x_1081 : vec3<f32> = txVec6;
        let x_1083 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1081.xy, x_1081.z);
        u_xlat68 = x_1083;
        let x_1085 : f32 = u_xlat14.z;
        let x_1086 : f32 = u_xlat68;
        let x_1088 : f32 = u_xlat47;
        u_xlat47 = ((x_1085 * x_1086) + x_1088);
        let x_1091 : vec4<f32> = u_xlat10;
        let x_1092 : vec2<f32> = vec2<f32>(x_1091.x, x_1091.y);
        let x_1094 : f32 = vs_INTERP8.z;
        txVec7 = vec3<f32>(x_1092.x, x_1092.y, x_1094);
        let x_1101 : vec3<f32> = txVec7;
        let x_1103 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1101.xy, x_1101.z);
        u_xlat68 = x_1103;
        let x_1105 : f32 = u_xlat14.w;
        let x_1106 : f32 = u_xlat68;
        let x_1108 : f32 = u_xlat47;
        u_xlat47 = ((x_1105 * x_1106) + x_1108);
        let x_1111 : vec4<f32> = u_xlat13;
        let x_1112 : vec2<f32> = vec2<f32>(x_1111.x, x_1111.y);
        let x_1114 : f32 = vs_INTERP8.z;
        txVec8 = vec3<f32>(x_1112.x, x_1112.y, x_1114);
        let x_1121 : vec3<f32> = txVec8;
        let x_1123 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1121.xy, x_1121.z);
        u_xlat68 = x_1123;
        let x_1125 : f32 = u_xlat15.x;
        let x_1126 : f32 = u_xlat68;
        let x_1128 : f32 = u_xlat47;
        u_xlat47 = ((x_1125 * x_1126) + x_1128);
        let x_1131 : vec4<f32> = u_xlat13;
        let x_1132 : vec2<f32> = vec2<f32>(x_1131.z, x_1131.w);
        let x_1134 : f32 = vs_INTERP8.z;
        txVec9 = vec3<f32>(x_1132.x, x_1132.y, x_1134);
        let x_1141 : vec3<f32> = txVec9;
        let x_1143 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1141.xy, x_1141.z);
        u_xlat68 = x_1143;
        let x_1145 : f32 = u_xlat15.y;
        let x_1146 : f32 = u_xlat68;
        let x_1148 : f32 = u_xlat47;
        u_xlat47 = ((x_1145 * x_1146) + x_1148);
        let x_1151 : vec4<f32> = u_xlat10;
        let x_1152 : vec2<f32> = vec2<f32>(x_1151.z, x_1151.w);
        let x_1154 : f32 = vs_INTERP8.z;
        txVec10 = vec3<f32>(x_1152.x, x_1152.y, x_1154);
        let x_1161 : vec3<f32> = txVec10;
        let x_1163 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1161.xy, x_1161.z);
        u_xlat68 = x_1163;
        let x_1165 : f32 = u_xlat15.z;
        let x_1166 : f32 = u_xlat68;
        let x_1168 : f32 = u_xlat47;
        u_xlat47 = ((x_1165 * x_1166) + x_1168);
        let x_1171 : vec4<f32> = u_xlat9;
        let x_1172 : vec2<f32> = vec2<f32>(x_1171.x, x_1171.y);
        let x_1174 : f32 = vs_INTERP8.z;
        txVec11 = vec3<f32>(x_1172.x, x_1172.y, x_1174);
        let x_1181 : vec3<f32> = txVec11;
        let x_1183 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1181.xy, x_1181.z);
        u_xlat68 = x_1183;
        let x_1185 : f32 = u_xlat15.w;
        let x_1186 : f32 = u_xlat68;
        let x_1188 : f32 = u_xlat47;
        u_xlat47 = ((x_1185 * x_1186) + x_1188);
        let x_1191 : vec4<f32> = u_xlat9;
        let x_1192 : vec2<f32> = vec2<f32>(x_1191.z, x_1191.w);
        let x_1194 : f32 = vs_INTERP8.z;
        txVec12 = vec3<f32>(x_1192.x, x_1192.y, x_1194);
        let x_1201 : vec3<f32> = txVec12;
        let x_1203 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1201.xy, x_1201.z);
        u_xlat68 = x_1203;
        let x_1205 : f32 = u_xlat26.x;
        let x_1206 : f32 = u_xlat68;
        let x_1208 : f32 = u_xlat47;
        u_xlat67 = ((x_1205 * x_1206) + x_1208);
      } else {
        let x_1211 : vec4<f32> = vs_INTERP8;
        let x_1214 : vec4<f32> = x_647.x_MainLightShadowmapSize;
        let x_1217 : vec2<f32> = ((vec2<f32>(x_1211.x, x_1211.y) * vec2<f32>(x_1214.z, x_1214.w)) + vec2<f32>(0.5f, 0.5f));
        let x_1218 : vec3<f32> = u_xlat26;
        u_xlat26 = vec3<f32>(x_1217.x, x_1217.y, x_1218.z);
        let x_1220 : vec3<f32> = u_xlat26;
        let x_1222 : vec2<f32> = floor(vec2<f32>(x_1220.x, x_1220.y));
        let x_1223 : vec3<f32> = u_xlat26;
        u_xlat26 = vec3<f32>(x_1222.x, x_1222.y, x_1223.z);
        let x_1225 : vec4<f32> = vs_INTERP8;
        let x_1228 : vec4<f32> = x_647.x_MainLightShadowmapSize;
        let x_1231 : vec3<f32> = u_xlat26;
        let x_1234 : vec2<f32> = ((vec2<f32>(x_1225.x, x_1225.y) * vec2<f32>(x_1228.z, x_1228.w)) + -(vec2<f32>(x_1231.x, x_1231.y)));
        let x_1235 : vec4<f32> = u_xlat7;
        u_xlat7 = vec4<f32>(x_1234.x, x_1234.y, x_1235.z, x_1235.w);
        let x_1237 : vec4<f32> = u_xlat7;
        u_xlat8 = (vec4<f32>(x_1237.x, x_1237.x, x_1237.y, x_1237.y) + vec4<f32>(0.5f, 1.0f, 0.5f, 1.0f));
        let x_1240 : vec4<f32> = u_xlat8;
        let x_1242 : vec4<f32> = u_xlat8;
        u_xlat9 = (vec4<f32>(x_1240.x, x_1240.x, x_1240.z, x_1240.z) * vec4<f32>(x_1242.x, x_1242.x, x_1242.z, x_1242.z));
        let x_1245 : vec4<f32> = u_xlat9;
        let x_1249 : vec2<f32> = (vec2<f32>(x_1245.y, x_1245.w) * vec2<f32>(0.040816002f, 0.040816002f));
        let x_1250 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_1250.x, x_1249.x, x_1250.z, x_1249.y);
        let x_1252 : vec4<f32> = u_xlat9;
        let x_1255 : vec4<f32> = u_xlat7;
        u_xlat49 = ((vec2<f32>(x_1252.x, x_1252.z) * vec2<f32>(0.5f, 0.5f)) + -(vec2<f32>(x_1255.x, x_1255.y)));
        let x_1259 : vec4<f32> = u_xlat7;
        let x_1262 : vec2<f32> = (-(vec2<f32>(x_1259.x, x_1259.y)) + vec2<f32>(1.0f, 1.0f));
        let x_1263 : vec4<f32> = u_xlat8;
        u_xlat8 = vec4<f32>(x_1262.x, x_1263.y, x_1262.y, x_1263.w);
        let x_1265 : vec4<f32> = u_xlat7;
        let x_1267 : vec2<f32> = min(vec2<f32>(x_1265.x, x_1265.y), vec2<f32>(0.0f, 0.0f));
        let x_1268 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_1267.x, x_1267.y, x_1268.z, x_1268.w);
        let x_1270 : vec4<f32> = u_xlat9;
        let x_1273 : vec4<f32> = u_xlat9;
        let x_1276 : vec4<f32> = u_xlat8;
        let x_1278 : vec2<f32> = ((-(vec2<f32>(x_1270.x, x_1270.y)) * vec2<f32>(x_1273.x, x_1273.y)) + vec2<f32>(x_1276.x, x_1276.z));
        let x_1279 : vec4<f32> = u_xlat8;
        u_xlat8 = vec4<f32>(x_1278.x, x_1279.y, x_1278.y, x_1279.w);
        let x_1281 : vec4<f32> = u_xlat7;
        let x_1283 : vec2<f32> = max(vec2<f32>(x_1281.x, x_1281.y), vec2<f32>(0.0f, 0.0f));
        let x_1284 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_1283.x, x_1283.y, x_1284.z, x_1284.w);
        let x_1286 : vec4<f32> = u_xlat9;
        let x_1289 : vec4<f32> = u_xlat9;
        let x_1292 : vec4<f32> = u_xlat8;
        let x_1294 : vec2<f32> = ((-(vec2<f32>(x_1286.x, x_1286.y)) * vec2<f32>(x_1289.x, x_1289.y)) + vec2<f32>(x_1292.y, x_1292.w));
        let x_1295 : vec4<f32> = u_xlat8;
        u_xlat8 = vec4<f32>(x_1295.x, x_1294.x, x_1295.z, x_1294.y);
        let x_1297 : vec4<f32> = u_xlat8;
        u_xlat8 = (x_1297 + vec4<f32>(2.0f, 2.0f, 2.0f, 2.0f));
        let x_1301 : f32 = u_xlat8.y;
        u_xlat9.z = (x_1301 * 0.081632003f);
        let x_1305 : vec2<f32> = u_xlat49;
        let x_1308 : vec2<f32> = (vec2<f32>(x_1305.y, x_1305.x) * vec2<f32>(0.081632003f, 0.081632003f));
        let x_1309 : vec4<f32> = u_xlat11;
        u_xlat11 = vec4<f32>(x_1308.x, x_1308.y, x_1309.z, x_1309.w);
        let x_1311 : vec4<f32> = u_xlat8;
        u_xlat49 = (vec2<f32>(x_1311.x, x_1311.z) * vec2<f32>(0.081632003f, 0.081632003f));
        let x_1315 : f32 = u_xlat8.w;
        u_xlat11.z = (x_1315 * 0.081632003f);
        let x_1319 : f32 = u_xlat11.y;
        u_xlat9.x = x_1319;
        let x_1321 : vec4<f32> = u_xlat7;
        let x_1328 : vec2<f32> = ((vec2<f32>(x_1321.x, x_1321.x) * vec2<f32>(-0.081632003f, 0.081632003f)) + vec2<f32>(0.163264006f, 0.081632003f));
        let x_1329 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_1329.x, x_1328.x, x_1329.z, x_1328.y);
        let x_1331 : vec4<f32> = u_xlat7;
        let x_1335 : vec2<f32> = ((vec2<f32>(x_1331.x, x_1331.x) * vec2<f32>(-0.081632003f, 0.081632003f)) + vec2<f32>(0.081632003f, 0.163264006f));
        let x_1336 : vec4<f32> = u_xlat8;
        u_xlat8 = vec4<f32>(x_1335.x, x_1336.y, x_1335.y, x_1336.w);
        let x_1339 : f32 = u_xlat49.x;
        u_xlat8.y = x_1339;
        let x_1342 : f32 = u_xlat10.y;
        u_xlat8.w = x_1342;
        let x_1344 : vec4<f32> = u_xlat8;
        let x_1345 : vec4<f32> = u_xlat9;
        u_xlat9 = (x_1344 + x_1345);
        let x_1347 : vec4<f32> = u_xlat7;
        let x_1350 : vec2<f32> = ((vec2<f32>(x_1347.y, x_1347.y) * vec2<f32>(-0.081632003f, 0.081632003f)) + vec2<f32>(0.163264006f, 0.081632003f));
        let x_1351 : vec4<f32> = u_xlat11;
        u_xlat11 = vec4<f32>(x_1351.x, x_1350.x, x_1351.z, x_1350.y);
        let x_1353 : vec4<f32> = u_xlat7;
        let x_1356 : vec2<f32> = ((vec2<f32>(x_1353.y, x_1353.y) * vec2<f32>(-0.081632003f, 0.081632003f)) + vec2<f32>(0.081632003f, 0.163264006f));
        let x_1357 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_1356.x, x_1357.y, x_1356.y, x_1357.w);
        let x_1360 : f32 = u_xlat49.y;
        u_xlat10.y = x_1360;
        let x_1362 : vec4<f32> = u_xlat10;
        let x_1363 : vec4<f32> = u_xlat11;
        u_xlat7 = (x_1362 + x_1363);
        let x_1365 : vec4<f32> = u_xlat8;
        let x_1366 : vec4<f32> = u_xlat9;
        u_xlat8 = (x_1365 / x_1366);
        let x_1368 : vec4<f32> = u_xlat8;
        u_xlat8 = (x_1368 + vec4<f32>(-3.5f, -1.5f, 0.5f, 2.5f));
        let x_1374 : vec4<f32> = u_xlat10;
        let x_1375 : vec4<f32> = u_xlat7;
        u_xlat10 = (x_1374 / x_1375);
        let x_1377 : vec4<f32> = u_xlat10;
        u_xlat10 = (x_1377 + vec4<f32>(-3.5f, -1.5f, 0.5f, 2.5f));
        let x_1379 : vec4<f32> = u_xlat8;
        let x_1382 : vec4<f32> = x_647.x_MainLightShadowmapSize;
        u_xlat8 = (vec4<f32>(x_1379.w, x_1379.x, x_1379.y, x_1379.z) * vec4<f32>(x_1382.x, x_1382.x, x_1382.x, x_1382.x));
        let x_1385 : vec4<f32> = u_xlat10;
        let x_1388 : vec4<f32> = x_647.x_MainLightShadowmapSize;
        u_xlat10 = (vec4<f32>(x_1385.x, x_1385.w, x_1385.y, x_1385.z) * vec4<f32>(x_1388.y, x_1388.y, x_1388.y, x_1388.y));
        let x_1391 : vec4<f32> = u_xlat8;
        let x_1392 : vec3<f32> = vec3<f32>(x_1391.y, x_1391.z, x_1391.w);
        let x_1393 : vec4<f32> = u_xlat11;
        u_xlat11 = vec4<f32>(x_1392.x, x_1393.y, x_1392.y, x_1392.z);
        let x_1396 : f32 = u_xlat10.x;
        u_xlat11.y = x_1396;
        let x_1398 : vec3<f32> = u_xlat26;
        let x_1401 : vec4<f32> = x_647.x_MainLightShadowmapSize;
        let x_1404 : vec4<f32> = u_xlat11;
        u_xlat12 = ((vec4<f32>(x_1398.x, x_1398.y, x_1398.x, x_1398.y) * vec4<f32>(x_1401.x, x_1401.y, x_1401.x, x_1401.y)) + vec4<f32>(x_1404.x, x_1404.y, x_1404.z, x_1404.y));
        let x_1407 : vec3<f32> = u_xlat26;
        let x_1410 : vec4<f32> = x_647.x_MainLightShadowmapSize;
        let x_1413 : vec4<f32> = u_xlat11;
        let x_1415 : vec2<f32> = ((vec2<f32>(x_1407.x, x_1407.y) * vec2<f32>(x_1410.x, x_1410.y)) + vec2<f32>(x_1413.w, x_1413.y));
        let x_1416 : vec4<f32> = u_xlat13;
        u_xlat13 = vec4<f32>(x_1415.x, x_1415.y, x_1416.z, x_1416.w);
        let x_1419 : f32 = u_xlat11.y;
        u_xlat8.y = x_1419;
        let x_1422 : f32 = u_xlat10.z;
        u_xlat11.y = x_1422;
        let x_1424 : vec3<f32> = u_xlat26;
        let x_1427 : vec4<f32> = x_647.x_MainLightShadowmapSize;
        let x_1430 : vec4<f32> = u_xlat11;
        u_xlat14 = ((vec4<f32>(x_1424.x, x_1424.y, x_1424.x, x_1424.y) * vec4<f32>(x_1427.x, x_1427.y, x_1427.x, x_1427.y)) + vec4<f32>(x_1430.x, x_1430.y, x_1430.z, x_1430.y));
        let x_1434 : vec3<f32> = u_xlat26;
        let x_1437 : vec4<f32> = x_647.x_MainLightShadowmapSize;
        let x_1440 : vec4<f32> = u_xlat11;
        u_xlat55 = ((vec2<f32>(x_1434.x, x_1434.y) * vec2<f32>(x_1437.x, x_1437.y)) + vec2<f32>(x_1440.w, x_1440.y));
        let x_1444 : f32 = u_xlat11.y;
        u_xlat8.z = x_1444;
        let x_1446 : vec3<f32> = u_xlat26;
        let x_1449 : vec4<f32> = x_647.x_MainLightShadowmapSize;
        let x_1452 : vec4<f32> = u_xlat8;
        u_xlat15 = ((vec4<f32>(x_1446.x, x_1446.y, x_1446.x, x_1446.y) * vec4<f32>(x_1449.x, x_1449.y, x_1449.x, x_1449.y)) + vec4<f32>(x_1452.x, x_1452.y, x_1452.x, x_1452.z));
        let x_1456 : f32 = u_xlat10.w;
        u_xlat11.y = x_1456;
        let x_1459 : vec3<f32> = u_xlat26;
        let x_1462 : vec4<f32> = x_647.x_MainLightShadowmapSize;
        let x_1465 : vec4<f32> = u_xlat11;
        u_xlat16 = ((vec4<f32>(x_1459.x, x_1459.y, x_1459.x, x_1459.y) * vec4<f32>(x_1462.x, x_1462.y, x_1462.x, x_1462.y)) + vec4<f32>(x_1465.x, x_1465.y, x_1465.z, x_1465.y));
        let x_1469 : vec3<f32> = u_xlat26;
        let x_1472 : vec4<f32> = x_647.x_MainLightShadowmapSize;
        let x_1475 : vec4<f32> = u_xlat11;
        u_xlat29 = ((vec2<f32>(x_1469.x, x_1469.y) * vec2<f32>(x_1472.x, x_1472.y)) + vec2<f32>(x_1475.w, x_1475.y));
        let x_1479 : f32 = u_xlat11.y;
        u_xlat8.w = x_1479;
        let x_1482 : vec3<f32> = u_xlat26;
        let x_1485 : vec4<f32> = x_647.x_MainLightShadowmapSize;
        let x_1488 : vec4<f32> = u_xlat8;
        u_xlat17 = ((vec2<f32>(x_1482.x, x_1482.y) * vec2<f32>(x_1485.x, x_1485.y)) + vec2<f32>(x_1488.x, x_1488.w));
        let x_1491 : vec4<f32> = u_xlat11;
        let x_1492 : vec3<f32> = vec3<f32>(x_1491.x, x_1491.z, x_1491.w);
        let x_1493 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_1492.x, x_1493.y, x_1492.y, x_1492.z);
        let x_1495 : vec3<f32> = u_xlat26;
        let x_1498 : vec4<f32> = x_647.x_MainLightShadowmapSize;
        let x_1501 : vec4<f32> = u_xlat10;
        u_xlat11 = ((vec4<f32>(x_1495.x, x_1495.y, x_1495.x, x_1495.y) * vec4<f32>(x_1498.x, x_1498.y, x_1498.x, x_1498.y)) + vec4<f32>(x_1501.x, x_1501.y, x_1501.z, x_1501.y));
        let x_1505 : vec3<f32> = u_xlat26;
        let x_1508 : vec4<f32> = x_647.x_MainLightShadowmapSize;
        let x_1511 : vec4<f32> = u_xlat10;
        u_xlat52 = ((vec2<f32>(x_1505.x, x_1505.y) * vec2<f32>(x_1508.x, x_1508.y)) + vec2<f32>(x_1511.w, x_1511.y));
        let x_1515 : f32 = u_xlat8.x;
        u_xlat10.x = x_1515;
        let x_1517 : vec3<f32> = u_xlat26;
        let x_1520 : vec4<f32> = x_647.x_MainLightShadowmapSize;
        let x_1523 : vec4<f32> = u_xlat10;
        let x_1525 : vec2<f32> = ((vec2<f32>(x_1517.x, x_1517.y) * vec2<f32>(x_1520.x, x_1520.y)) + vec2<f32>(x_1523.x, x_1523.y));
        let x_1526 : vec3<f32> = u_xlat26;
        u_xlat26 = vec3<f32>(x_1525.x, x_1525.y, x_1526.z);
        let x_1529 : vec4<f32> = u_xlat7;
        let x_1531 : vec4<f32> = u_xlat9;
        u_xlat18 = (vec4<f32>(x_1529.x, x_1529.x, x_1529.x, x_1529.x) * x_1531);
        let x_1534 : vec4<f32> = u_xlat7;
        let x_1536 : vec4<f32> = u_xlat9;
        u_xlat19 = (vec4<f32>(x_1534.y, x_1534.y, x_1534.y, x_1534.y) * x_1536);
        let x_1539 : vec4<f32> = u_xlat7;
        let x_1541 : vec4<f32> = u_xlat9;
        u_xlat20 = (vec4<f32>(x_1539.z, x_1539.z, x_1539.z, x_1539.z) * x_1541);
        let x_1543 : vec4<f32> = u_xlat7;
        let x_1545 : vec4<f32> = u_xlat9;
        u_xlat7 = (vec4<f32>(x_1543.w, x_1543.w, x_1543.w, x_1543.w) * x_1545);
        let x_1548 : vec4<f32> = u_xlat12;
        let x_1549 : vec2<f32> = vec2<f32>(x_1548.x, x_1548.y);
        let x_1551 : f32 = vs_INTERP8.z;
        txVec13 = vec3<f32>(x_1549.x, x_1549.y, x_1551);
        let x_1558 : vec3<f32> = txVec13;
        let x_1560 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1558.xy, x_1558.z);
        u_xlat68 = x_1560;
        let x_1562 : vec4<f32> = u_xlat12;
        let x_1563 : vec2<f32> = vec2<f32>(x_1562.z, x_1562.w);
        let x_1565 : f32 = vs_INTERP8.z;
        txVec14 = vec3<f32>(x_1563.x, x_1563.y, x_1565);
        let x_1573 : vec3<f32> = txVec14;
        let x_1575 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1573.xy, x_1573.z);
        u_xlat69 = x_1575;
        let x_1576 : f32 = u_xlat69;
        let x_1578 : f32 = u_xlat18.y;
        u_xlat69 = (x_1576 * x_1578);
        let x_1581 : f32 = u_xlat18.x;
        let x_1582 : f32 = u_xlat68;
        let x_1584 : f32 = u_xlat69;
        u_xlat68 = ((x_1581 * x_1582) + x_1584);
        let x_1587 : vec4<f32> = u_xlat13;
        let x_1588 : vec2<f32> = vec2<f32>(x_1587.x, x_1587.y);
        let x_1590 : f32 = vs_INTERP8.z;
        txVec15 = vec3<f32>(x_1588.x, x_1588.y, x_1590);
        let x_1597 : vec3<f32> = txVec15;
        let x_1599 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1597.xy, x_1597.z);
        u_xlat69 = x_1599;
        let x_1601 : f32 = u_xlat18.z;
        let x_1602 : f32 = u_xlat69;
        let x_1604 : f32 = u_xlat68;
        u_xlat68 = ((x_1601 * x_1602) + x_1604);
        let x_1607 : vec4<f32> = u_xlat15;
        let x_1608 : vec2<f32> = vec2<f32>(x_1607.x, x_1607.y);
        let x_1610 : f32 = vs_INTERP8.z;
        txVec16 = vec3<f32>(x_1608.x, x_1608.y, x_1610);
        let x_1617 : vec3<f32> = txVec16;
        let x_1619 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1617.xy, x_1617.z);
        u_xlat69 = x_1619;
        let x_1621 : f32 = u_xlat18.w;
        let x_1622 : f32 = u_xlat69;
        let x_1624 : f32 = u_xlat68;
        u_xlat68 = ((x_1621 * x_1622) + x_1624);
        let x_1627 : vec4<f32> = u_xlat14;
        let x_1628 : vec2<f32> = vec2<f32>(x_1627.x, x_1627.y);
        let x_1630 : f32 = vs_INTERP8.z;
        txVec17 = vec3<f32>(x_1628.x, x_1628.y, x_1630);
        let x_1637 : vec3<f32> = txVec17;
        let x_1639 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1637.xy, x_1637.z);
        u_xlat69 = x_1639;
        let x_1641 : f32 = u_xlat19.x;
        let x_1642 : f32 = u_xlat69;
        let x_1644 : f32 = u_xlat68;
        u_xlat68 = ((x_1641 * x_1642) + x_1644);
        let x_1647 : vec4<f32> = u_xlat14;
        let x_1648 : vec2<f32> = vec2<f32>(x_1647.z, x_1647.w);
        let x_1650 : f32 = vs_INTERP8.z;
        txVec18 = vec3<f32>(x_1648.x, x_1648.y, x_1650);
        let x_1657 : vec3<f32> = txVec18;
        let x_1659 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1657.xy, x_1657.z);
        u_xlat69 = x_1659;
        let x_1661 : f32 = u_xlat19.y;
        let x_1662 : f32 = u_xlat69;
        let x_1664 : f32 = u_xlat68;
        u_xlat68 = ((x_1661 * x_1662) + x_1664);
        let x_1667 : vec2<f32> = u_xlat55;
        let x_1669 : f32 = vs_INTERP8.z;
        txVec19 = vec3<f32>(x_1667.x, x_1667.y, x_1669);
        let x_1676 : vec3<f32> = txVec19;
        let x_1678 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1676.xy, x_1676.z);
        u_xlat69 = x_1678;
        let x_1680 : f32 = u_xlat19.z;
        let x_1681 : f32 = u_xlat69;
        let x_1683 : f32 = u_xlat68;
        u_xlat68 = ((x_1680 * x_1681) + x_1683);
        let x_1686 : vec4<f32> = u_xlat15;
        let x_1687 : vec2<f32> = vec2<f32>(x_1686.z, x_1686.w);
        let x_1689 : f32 = vs_INTERP8.z;
        txVec20 = vec3<f32>(x_1687.x, x_1687.y, x_1689);
        let x_1696 : vec3<f32> = txVec20;
        let x_1698 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1696.xy, x_1696.z);
        u_xlat69 = x_1698;
        let x_1700 : f32 = u_xlat19.w;
        let x_1701 : f32 = u_xlat69;
        let x_1703 : f32 = u_xlat68;
        u_xlat68 = ((x_1700 * x_1701) + x_1703);
        let x_1706 : vec4<f32> = u_xlat16;
        let x_1707 : vec2<f32> = vec2<f32>(x_1706.x, x_1706.y);
        let x_1709 : f32 = vs_INTERP8.z;
        txVec21 = vec3<f32>(x_1707.x, x_1707.y, x_1709);
        let x_1716 : vec3<f32> = txVec21;
        let x_1718 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1716.xy, x_1716.z);
        u_xlat69 = x_1718;
        let x_1720 : f32 = u_xlat20.x;
        let x_1721 : f32 = u_xlat69;
        let x_1723 : f32 = u_xlat68;
        u_xlat68 = ((x_1720 * x_1721) + x_1723);
        let x_1726 : vec4<f32> = u_xlat16;
        let x_1727 : vec2<f32> = vec2<f32>(x_1726.z, x_1726.w);
        let x_1729 : f32 = vs_INTERP8.z;
        txVec22 = vec3<f32>(x_1727.x, x_1727.y, x_1729);
        let x_1736 : vec3<f32> = txVec22;
        let x_1738 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1736.xy, x_1736.z);
        u_xlat69 = x_1738;
        let x_1740 : f32 = u_xlat20.y;
        let x_1741 : f32 = u_xlat69;
        let x_1743 : f32 = u_xlat68;
        u_xlat68 = ((x_1740 * x_1741) + x_1743);
        let x_1746 : vec2<f32> = u_xlat29;
        let x_1748 : f32 = vs_INTERP8.z;
        txVec23 = vec3<f32>(x_1746.x, x_1746.y, x_1748);
        let x_1755 : vec3<f32> = txVec23;
        let x_1757 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1755.xy, x_1755.z);
        u_xlat69 = x_1757;
        let x_1759 : f32 = u_xlat20.z;
        let x_1760 : f32 = u_xlat69;
        let x_1762 : f32 = u_xlat68;
        u_xlat68 = ((x_1759 * x_1760) + x_1762);
        let x_1765 : vec2<f32> = u_xlat17;
        let x_1767 : f32 = vs_INTERP8.z;
        txVec24 = vec3<f32>(x_1765.x, x_1765.y, x_1767);
        let x_1774 : vec3<f32> = txVec24;
        let x_1776 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1774.xy, x_1774.z);
        u_xlat69 = x_1776;
        let x_1778 : f32 = u_xlat20.w;
        let x_1779 : f32 = u_xlat69;
        let x_1781 : f32 = u_xlat68;
        u_xlat68 = ((x_1778 * x_1779) + x_1781);
        let x_1784 : vec4<f32> = u_xlat11;
        let x_1785 : vec2<f32> = vec2<f32>(x_1784.x, x_1784.y);
        let x_1787 : f32 = vs_INTERP8.z;
        txVec25 = vec3<f32>(x_1785.x, x_1785.y, x_1787);
        let x_1794 : vec3<f32> = txVec25;
        let x_1796 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1794.xy, x_1794.z);
        u_xlat69 = x_1796;
        let x_1798 : f32 = u_xlat7.x;
        let x_1799 : f32 = u_xlat69;
        let x_1801 : f32 = u_xlat68;
        u_xlat68 = ((x_1798 * x_1799) + x_1801);
        let x_1804 : vec4<f32> = u_xlat11;
        let x_1805 : vec2<f32> = vec2<f32>(x_1804.z, x_1804.w);
        let x_1807 : f32 = vs_INTERP8.z;
        txVec26 = vec3<f32>(x_1805.x, x_1805.y, x_1807);
        let x_1814 : vec3<f32> = txVec26;
        let x_1816 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1814.xy, x_1814.z);
        u_xlat69 = x_1816;
        let x_1818 : f32 = u_xlat7.y;
        let x_1819 : f32 = u_xlat69;
        let x_1821 : f32 = u_xlat68;
        u_xlat68 = ((x_1818 * x_1819) + x_1821);
        let x_1824 : vec2<f32> = u_xlat52;
        let x_1826 : f32 = vs_INTERP8.z;
        txVec27 = vec3<f32>(x_1824.x, x_1824.y, x_1826);
        let x_1833 : vec3<f32> = txVec27;
        let x_1835 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1833.xy, x_1833.z);
        u_xlat69 = x_1835;
        let x_1837 : f32 = u_xlat7.z;
        let x_1838 : f32 = u_xlat69;
        let x_1840 : f32 = u_xlat68;
        u_xlat68 = ((x_1837 * x_1838) + x_1840);
        let x_1843 : vec3<f32> = u_xlat26;
        let x_1844 : vec2<f32> = vec2<f32>(x_1843.x, x_1843.y);
        let x_1846 : f32 = vs_INTERP8.z;
        txVec28 = vec3<f32>(x_1844.x, x_1844.y, x_1846);
        let x_1853 : vec3<f32> = txVec28;
        let x_1855 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1853.xy, x_1853.z);
        u_xlat26.x = x_1855;
        let x_1858 : f32 = u_xlat7.w;
        let x_1860 : f32 = u_xlat26.x;
        let x_1862 : f32 = u_xlat68;
        u_xlat67 = ((x_1858 * x_1860) + x_1862);
      }
    }
  } else {
    let x_1866 : vec4<f32> = vs_INTERP8;
    let x_1867 : vec2<f32> = vec2<f32>(x_1866.x, x_1866.y);
    let x_1869 : f32 = vs_INTERP8.z;
    txVec29 = vec3<f32>(x_1867.x, x_1867.y, x_1869);
    let x_1876 : vec3<f32> = txVec29;
    let x_1878 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1876.xy, x_1876.z);
    u_xlat67 = x_1878;
  }
  let x_1880 : f32 = x_647.x_MainLightShadowParams.x;
  u_xlat26.x = (-(x_1880) + 1.0f);
  let x_1884 : f32 = u_xlat67;
  let x_1886 : f32 = x_647.x_MainLightShadowParams.x;
  let x_1889 : f32 = u_xlat26.x;
  u_xlat67 = ((x_1884 * x_1886) + x_1889);
  let x_1892 : f32 = vs_INTERP8.z;
  u_xlatb26 = (0.0f >= x_1892);
  let x_1896 : f32 = vs_INTERP8.z;
  u_xlatb47 = (x_1896 >= 1.0f);
  let x_1898 : bool = u_xlatb47;
  let x_1899 : bool = u_xlatb26;
  u_xlatb26 = (x_1898 | x_1899);
  let x_1901 : bool = u_xlatb26;
  let x_1902 : f32 = u_xlat67;
  u_xlat67 = select(x_1902, 1.0f, x_1901);
  let x_1904 : vec3<f32> = vs_INTERP0;
  let x_1906 : vec3<f32> = x_44.x_WorldSpaceCameraPos;
  u_xlat26 = (x_1904 + -(x_1906));
  let x_1909 : vec3<f32> = u_xlat26;
  let x_1910 : vec3<f32> = u_xlat26;
  u_xlat26.x = dot(x_1909, x_1910);
  let x_1914 : f32 = u_xlat26.x;
  let x_1916 : f32 = x_647.x_MainLightShadowParams.z;
  let x_1919 : f32 = x_647.x_MainLightShadowParams.w;
  u_xlat26.x = ((x_1914 * x_1916) + x_1919);
  let x_1923 : f32 = u_xlat26.x;
  u_xlat26.x = clamp(x_1923, 0.0f, 1.0f);
  let x_1926 : f32 = u_xlat67;
  u_xlat47 = (-(x_1926) + 1.0f);
  let x_1930 : f32 = u_xlat26.x;
  let x_1931 : f32 = u_xlat47;
  let x_1933 : f32 = u_xlat67;
  u_xlat67 = ((x_1930 * x_1931) + x_1933);
  let x_1935 : vec4<f32> = u_xlat5;
  let x_1938 : vec4<f32> = x_44.x_MainLightColor;
  u_xlat26 = (vec3<f32>(x_1935.x, x_1935.x, x_1935.x) * vec3<f32>(x_1938.x, x_1938.y, x_1938.z));
  let x_1941 : vec3<f32> = u_xlat22;
  let x_1943 : vec4<f32> = u_xlat3;
  u_xlat69 = dot(-(x_1941), vec3<f32>(x_1943.x, x_1943.y, x_1943.z));
  let x_1946 : f32 = u_xlat69;
  let x_1947 : f32 = u_xlat69;
  u_xlat69 = (x_1946 + x_1947);
  let x_1949 : vec4<f32> = u_xlat3;
  let x_1951 : f32 = u_xlat69;
  let x_1955 : vec3<f32> = u_xlat22;
  let x_1957 : vec3<f32> = ((vec3<f32>(x_1949.x, x_1949.y, x_1949.z) * -(vec3<f32>(x_1951, x_1951, x_1951))) + -(x_1955));
  let x_1958 : vec4<f32> = u_xlat7;
  u_xlat7 = vec4<f32>(x_1957.x, x_1957.y, x_1957.z, x_1958.w);
  let x_1960 : vec4<f32> = u_xlat3;
  let x_1962 : vec3<f32> = u_xlat22;
  u_xlat69 = dot(vec3<f32>(x_1960.x, x_1960.y, x_1960.z), x_1962);
  let x_1964 : f32 = u_xlat69;
  u_xlat69 = clamp(x_1964, 0.0f, 1.0f);
  let x_1966 : f32 = u_xlat69;
  u_xlat69 = (-(x_1966) + 1.0f);
  let x_1969 : f32 = u_xlat69;
  let x_1970 : f32 = u_xlat69;
  u_xlat69 = (x_1969 * x_1970);
  let x_1972 : f32 = u_xlat69;
  let x_1973 : f32 = u_xlat69;
  u_xlat69 = (x_1972 * x_1973);
  let x_1977 : f32 = u_xlat0.x;
  u_xlat70 = ((-(x_1977) * 0.699999988f) + 1.700000048f);
  let x_1984 : f32 = u_xlat0.x;
  let x_1985 : f32 = u_xlat70;
  u_xlat0.x = (x_1984 * x_1985);
  let x_1989 : f32 = u_xlat0.x;
  u_xlat0.x = (x_1989 * 6.0f);
  let x_2001 : vec4<f32> = u_xlat7;
  let x_2004 : f32 = u_xlat0.x;
  let x_2005 : vec4<f32> = textureSampleLevel(unity_SpecCube0, samplerunity_SpecCube0, vec3<f32>(x_2001.x, x_2001.y, x_2001.z), x_2004);
  u_xlat7 = x_2005;
  let x_2007 : f32 = u_xlat7.w;
  u_xlat0.x = (x_2007 + -1.0f);
  let x_2011 : f32 = x_283.unity_SpecCube0_HDR.w;
  let x_2013 : f32 = u_xlat0.x;
  u_xlat0.x = ((x_2011 * x_2013) + 1.0f);
  let x_2018 : f32 = u_xlat0.x;
  u_xlat0.x = max(x_2018, 0.0f);
  let x_2022 : f32 = u_xlat0.x;
  u_xlat0.x = log2(x_2022);
  let x_2026 : f32 = u_xlat0.x;
  let x_2028 : f32 = x_283.unity_SpecCube0_HDR.y;
  u_xlat0.x = (x_2026 * x_2028);
  let x_2032 : f32 = u_xlat0.x;
  u_xlat0.x = exp2(x_2032);
  let x_2036 : f32 = u_xlat0.x;
  let x_2038 : f32 = x_283.unity_SpecCube0_HDR.x;
  u_xlat0.x = (x_2036 * x_2038);
  let x_2041 : vec4<f32> = u_xlat7;
  let x_2043 : vec4<f32> = u_xlat0;
  let x_2045 : vec3<f32> = (vec3<f32>(x_2041.x, x_2041.y, x_2041.z) * vec3<f32>(x_2043.x, x_2043.x, x_2043.x));
  let x_2046 : vec4<f32> = u_xlat7;
  u_xlat7 = vec4<f32>(x_2045.x, x_2045.y, x_2045.z, x_2046.w);
  let x_2048 : f32 = u_xlat42;
  let x_2050 : f32 = u_xlat42;
  let x_2054 : vec2<f32> = ((vec2<f32>(x_2048, x_2048) * vec2<f32>(x_2050, x_2050)) + vec2<f32>(-1.0f, 1.0f));
  let x_2055 : vec4<f32> = u_xlat0;
  u_xlat0 = vec4<f32>(x_2054.x, x_2055.y, x_2054.y, x_2055.w);
  let x_2058 : f32 = u_xlat0.z;
  u_xlat42 = (1.0f / x_2058);
  let x_2060 : vec3<f32> = u_xlat2;
  let x_2062 : f32 = u_xlat65;
  let x_2064 : vec3<f32> = (-(x_2060) + vec3<f32>(x_2062, x_2062, x_2062));
  let x_2065 : vec4<f32> = u_xlat8;
  u_xlat8 = vec4<f32>(x_2064.x, x_2064.y, x_2064.z, x_2065.w);
  let x_2067 : f32 = u_xlat69;
  let x_2069 : vec4<f32> = u_xlat8;
  let x_2072 : vec3<f32> = u_xlat2;
  let x_2073 : vec3<f32> = ((vec3<f32>(x_2067, x_2067, x_2067) * vec3<f32>(x_2069.x, x_2069.y, x_2069.z)) + x_2072);
  let x_2074 : vec4<f32> = u_xlat8;
  u_xlat8 = vec4<f32>(x_2073.x, x_2073.y, x_2073.z, x_2074.w);
  let x_2076 : f32 = u_xlat42;
  let x_2078 : vec4<f32> = u_xlat8;
  let x_2080 : vec3<f32> = (vec3<f32>(x_2076, x_2076, x_2076) * vec3<f32>(x_2078.x, x_2078.y, x_2078.z));
  let x_2081 : vec4<f32> = u_xlat8;
  u_xlat8 = vec4<f32>(x_2080.x, x_2080.y, x_2080.z, x_2081.w);
  let x_2083 : vec4<f32> = u_xlat7;
  let x_2085 : vec4<f32> = u_xlat8;
  let x_2087 : vec3<f32> = (vec3<f32>(x_2083.x, x_2083.y, x_2083.z) * vec3<f32>(x_2085.x, x_2085.y, x_2085.z));
  let x_2088 : vec4<f32> = u_xlat7;
  u_xlat7 = vec4<f32>(x_2087.x, x_2087.y, x_2087.z, x_2088.w);
  let x_2090 : vec3<f32> = u_xlat4;
  let x_2091 : vec3<f32> = u_xlat6;
  let x_2093 : vec4<f32> = u_xlat7;
  u_xlat4 = ((x_2090 * x_2091) + vec3<f32>(x_2093.x, x_2093.y, x_2093.z));
  let x_2096 : f32 = u_xlat67;
  let x_2099 : f32 = x_283.unity_LightData.z;
  u_xlat42 = (x_2096 * x_2099);
  let x_2101 : vec4<f32> = u_xlat3;
  let x_2104 : vec4<f32> = x_44.x_MainLightPosition;
  u_xlat65 = dot(vec3<f32>(x_2101.x, x_2101.y, x_2101.z), vec3<f32>(x_2104.x, x_2104.y, x_2104.z));
  let x_2107 : f32 = u_xlat65;
  u_xlat65 = clamp(x_2107, 0.0f, 1.0f);
  let x_2109 : f32 = u_xlat42;
  let x_2110 : f32 = u_xlat65;
  u_xlat42 = (x_2109 * x_2110);
  let x_2112 : f32 = u_xlat42;
  let x_2114 : vec3<f32> = u_xlat26;
  u_xlat26 = (vec3<f32>(x_2112, x_2112, x_2112) * x_2114);
  let x_2116 : vec3<f32> = u_xlat22;
  let x_2118 : vec4<f32> = x_44.x_MainLightPosition;
  let x_2120 : vec3<f32> = (x_2116 + vec3<f32>(x_2118.x, x_2118.y, x_2118.z));
  let x_2121 : vec4<f32> = u_xlat7;
  u_xlat7 = vec4<f32>(x_2120.x, x_2120.y, x_2120.z, x_2121.w);
  let x_2123 : vec4<f32> = u_xlat7;
  let x_2125 : vec4<f32> = u_xlat7;
  u_xlat42 = dot(vec3<f32>(x_2123.x, x_2123.y, x_2123.z), vec3<f32>(x_2125.x, x_2125.y, x_2125.z));
  let x_2128 : f32 = u_xlat42;
  u_xlat42 = max(x_2128, 1.17549435e-37f);
  let x_2131 : f32 = u_xlat42;
  u_xlat42 = inverseSqrt(x_2131);
  let x_2133 : f32 = u_xlat42;
  let x_2135 : vec4<f32> = u_xlat7;
  let x_2137 : vec3<f32> = (vec3<f32>(x_2133, x_2133, x_2133) * vec3<f32>(x_2135.x, x_2135.y, x_2135.z));
  let x_2138 : vec4<f32> = u_xlat7;
  u_xlat7 = vec4<f32>(x_2137.x, x_2137.y, x_2137.z, x_2138.w);
  let x_2140 : vec4<f32> = u_xlat3;
  let x_2142 : vec4<f32> = u_xlat7;
  u_xlat42 = dot(vec3<f32>(x_2140.x, x_2140.y, x_2140.z), vec3<f32>(x_2142.x, x_2142.y, x_2142.z));
  let x_2145 : f32 = u_xlat42;
  u_xlat42 = clamp(x_2145, 0.0f, 1.0f);
  let x_2148 : vec4<f32> = x_44.x_MainLightPosition;
  let x_2150 : vec4<f32> = u_xlat7;
  u_xlat65 = dot(vec3<f32>(x_2148.x, x_2148.y, x_2148.z), vec3<f32>(x_2150.x, x_2150.y, x_2150.z));
  let x_2153 : f32 = u_xlat65;
  u_xlat65 = clamp(x_2153, 0.0f, 1.0f);
  let x_2155 : f32 = u_xlat42;
  let x_2156 : f32 = u_xlat42;
  u_xlat42 = (x_2155 * x_2156);
  let x_2158 : f32 = u_xlat42;
  let x_2160 : f32 = u_xlat0.x;
  u_xlat42 = ((x_2158 * x_2160) + 1.000010014f);
  let x_2164 : f32 = u_xlat65;
  let x_2165 : f32 = u_xlat65;
  u_xlat65 = (x_2164 * x_2165);
  let x_2167 : f32 = u_xlat42;
  let x_2168 : f32 = u_xlat42;
  u_xlat42 = (x_2167 * x_2168);
  let x_2170 : f32 = u_xlat65;
  u_xlat65 = max(x_2170, 0.100000001f);
  let x_2173 : f32 = u_xlat42;
  let x_2174 : f32 = u_xlat65;
  u_xlat42 = (x_2173 * x_2174);
  let x_2176 : f32 = u_xlat66;
  let x_2177 : f32 = u_xlat42;
  u_xlat42 = (x_2176 * x_2177);
  let x_2180 : f32 = u_xlat1.x;
  let x_2181 : f32 = u_xlat42;
  u_xlat42 = (x_2180 / x_2181);
  let x_2183 : vec3<f32> = u_xlat2;
  let x_2184 : f32 = u_xlat42;
  let x_2187 : vec3<f32> = u_xlat6;
  let x_2188 : vec3<f32> = ((x_2183 * vec3<f32>(x_2184, x_2184, x_2184)) + x_2187);
  let x_2189 : vec4<f32> = u_xlat7;
  u_xlat7 = vec4<f32>(x_2188.x, x_2188.y, x_2188.z, x_2189.w);
  let x_2191 : vec3<f32> = u_xlat26;
  let x_2192 : vec4<f32> = u_xlat7;
  u_xlat26 = (x_2191 * vec3<f32>(x_2192.x, x_2192.y, x_2192.z));
  let x_2196 : f32 = x_44.x_AdditionalLightsCount.x;
  let x_2198 : f32 = x_283.unity_LightData.y;
  u_xlat42 = min(x_2196, x_2198);
  let x_2202 : f32 = u_xlat42;
  u_xlatu42 = bitcast<u32>(i32(x_2202));
  u_xlat7.x = 0.0f;
  u_xlat7.y = 0.0f;
  u_xlat7.z = 0.0f;
  u_xlatu_loop_1 = 0u;
  loop {
    let x_2214 : u32 = u_xlatu_loop_1;
    let x_2215 : u32 = u_xlatu42;
    if ((x_2214 < x_2215)) {
    } else {
      break;
    }
    let x_2218 : u32 = u_xlatu_loop_1;
    u_xlatu67 = (x_2218 >> 2u);
    let x_2222 : u32 = u_xlatu_loop_1;
    u_xlati69 = bitcast<i32>((x_2222 & 3u));
    let x_2225 : u32 = u_xlatu67;
    let x_2228 : vec4<f32> = x_283.unity_LightIndices[bitcast<i32>(x_2225)];
    let x_2238 : i32 = u_xlati69;
    indexable = array<vec4<u32>, 4u>(vec4<u32>(1065353216u, 0u, 0u, 0u), vec4<u32>(0u, 1065353216u, 0u, 0u), vec4<u32>(0u, 0u, 1065353216u, 0u), vec4<u32>(0u, 0u, 0u, 1065353216u));
    let x_2243 : vec4<u32> = indexable[x_2238];
    u_xlat67 = dot(x_2228, bitcast<vec4<f32>>(x_2243));
    let x_2247 : f32 = u_xlat67;
    u_xlati67 = i32(x_2247);
    let x_2249 : vec3<f32> = vs_INTERP0;
    let x_2261 : i32 = u_xlati67;
    let x_2263 : vec4<f32> = x_2260.x_AdditionalLightsPosition[x_2261];
    let x_2266 : i32 = u_xlati67;
    let x_2268 : vec4<f32> = x_2260.x_AdditionalLightsPosition[x_2266];
    let x_2270 : vec3<f32> = ((-(x_2249) * vec3<f32>(x_2263.w, x_2263.w, x_2263.w)) + vec3<f32>(x_2268.x, x_2268.y, x_2268.z));
    let x_2271 : vec4<f32> = u_xlat8;
    u_xlat8 = vec4<f32>(x_2270.x, x_2270.y, x_2270.z, x_2271.w);
    let x_2273 : vec4<f32> = u_xlat8;
    let x_2275 : vec4<f32> = u_xlat8;
    u_xlat69 = dot(vec3<f32>(x_2273.x, x_2273.y, x_2273.z), vec3<f32>(x_2275.x, x_2275.y, x_2275.z));
    let x_2278 : f32 = u_xlat69;
    u_xlat69 = max(x_2278, 6.10351562e-05f);
    let x_2281 : f32 = u_xlat69;
    u_xlat70 = inverseSqrt(x_2281);
    let x_2283 : f32 = u_xlat70;
    let x_2285 : vec4<f32> = u_xlat8;
    let x_2287 : vec3<f32> = (vec3<f32>(x_2283, x_2283, x_2283) * vec3<f32>(x_2285.x, x_2285.y, x_2285.z));
    let x_2288 : vec4<f32> = u_xlat9;
    u_xlat9 = vec4<f32>(x_2287.x, x_2287.y, x_2287.z, x_2288.w);
    let x_2291 : f32 = u_xlat69;
    u_xlat71 = (1.0f / x_2291);
    let x_2293 : f32 = u_xlat69;
    let x_2294 : i32 = u_xlati67;
    let x_2296 : f32 = x_2260.x_AdditionalLightsAttenuation[x_2294].x;
    u_xlat69 = (x_2293 * x_2296);
    let x_2298 : f32 = u_xlat69;
    let x_2300 : f32 = u_xlat69;
    u_xlat69 = ((-(x_2298) * x_2300) + 1.0f);
    let x_2303 : f32 = u_xlat69;
    u_xlat69 = max(x_2303, 0.0f);
    let x_2305 : f32 = u_xlat69;
    let x_2306 : f32 = u_xlat69;
    u_xlat69 = (x_2305 * x_2306);
    let x_2308 : f32 = u_xlat69;
    let x_2309 : f32 = u_xlat71;
    u_xlat69 = (x_2308 * x_2309);
    let x_2311 : i32 = u_xlati67;
    let x_2313 : vec4<f32> = x_2260.x_AdditionalLightsSpotDir[x_2311];
    let x_2315 : vec4<f32> = u_xlat9;
    u_xlat71 = dot(vec3<f32>(x_2313.x, x_2313.y, x_2313.z), vec3<f32>(x_2315.x, x_2315.y, x_2315.z));
    let x_2318 : f32 = u_xlat71;
    let x_2319 : i32 = u_xlati67;
    let x_2321 : f32 = x_2260.x_AdditionalLightsAttenuation[x_2319].z;
    let x_2323 : i32 = u_xlati67;
    let x_2325 : f32 = x_2260.x_AdditionalLightsAttenuation[x_2323].w;
    u_xlat71 = ((x_2318 * x_2321) + x_2325);
    let x_2327 : f32 = u_xlat71;
    u_xlat71 = clamp(x_2327, 0.0f, 1.0f);
    let x_2329 : f32 = u_xlat71;
    let x_2330 : f32 = u_xlat71;
    u_xlat71 = (x_2329 * x_2330);
    let x_2332 : f32 = u_xlat69;
    let x_2333 : f32 = u_xlat71;
    u_xlat69 = (x_2332 * x_2333);
    let x_2335 : vec4<f32> = u_xlat5;
    let x_2337 : i32 = u_xlati67;
    let x_2339 : vec4<f32> = x_2260.x_AdditionalLightsColor[x_2337];
    let x_2341 : vec3<f32> = (vec3<f32>(x_2335.x, x_2335.x, x_2335.x) * vec3<f32>(x_2339.x, x_2339.y, x_2339.z));
    let x_2342 : vec4<f32> = u_xlat10;
    u_xlat10 = vec4<f32>(x_2341.x, x_2341.y, x_2341.z, x_2342.w);
    let x_2344 : vec4<f32> = u_xlat3;
    let x_2346 : vec4<f32> = u_xlat9;
    u_xlat67 = dot(vec3<f32>(x_2344.x, x_2344.y, x_2344.z), vec3<f32>(x_2346.x, x_2346.y, x_2346.z));
    let x_2349 : f32 = u_xlat67;
    u_xlat67 = clamp(x_2349, 0.0f, 1.0f);
    let x_2351 : f32 = u_xlat67;
    let x_2352 : f32 = u_xlat69;
    u_xlat67 = (x_2351 * x_2352);
    let x_2354 : f32 = u_xlat67;
    let x_2356 : vec4<f32> = u_xlat10;
    let x_2358 : vec3<f32> = (vec3<f32>(x_2354, x_2354, x_2354) * vec3<f32>(x_2356.x, x_2356.y, x_2356.z));
    let x_2359 : vec4<f32> = u_xlat10;
    u_xlat10 = vec4<f32>(x_2358.x, x_2358.y, x_2358.z, x_2359.w);
    let x_2361 : vec4<f32> = u_xlat8;
    let x_2363 : f32 = u_xlat70;
    let x_2366 : vec3<f32> = u_xlat22;
    let x_2367 : vec3<f32> = ((vec3<f32>(x_2361.x, x_2361.y, x_2361.z) * vec3<f32>(x_2363, x_2363, x_2363)) + x_2366);
    let x_2368 : vec4<f32> = u_xlat8;
    u_xlat8 = vec4<f32>(x_2367.x, x_2367.y, x_2367.z, x_2368.w);
    let x_2370 : vec4<f32> = u_xlat8;
    let x_2372 : vec4<f32> = u_xlat8;
    u_xlat67 = dot(vec3<f32>(x_2370.x, x_2370.y, x_2370.z), vec3<f32>(x_2372.x, x_2372.y, x_2372.z));
    let x_2375 : f32 = u_xlat67;
    u_xlat67 = max(x_2375, 1.17549435e-37f);
    let x_2377 : f32 = u_xlat67;
    u_xlat67 = inverseSqrt(x_2377);
    let x_2379 : f32 = u_xlat67;
    let x_2381 : vec4<f32> = u_xlat8;
    let x_2383 : vec3<f32> = (vec3<f32>(x_2379, x_2379, x_2379) * vec3<f32>(x_2381.x, x_2381.y, x_2381.z));
    let x_2384 : vec4<f32> = u_xlat8;
    u_xlat8 = vec4<f32>(x_2383.x, x_2383.y, x_2383.z, x_2384.w);
    let x_2386 : vec4<f32> = u_xlat3;
    let x_2388 : vec4<f32> = u_xlat8;
    u_xlat67 = dot(vec3<f32>(x_2386.x, x_2386.y, x_2386.z), vec3<f32>(x_2388.x, x_2388.y, x_2388.z));
    let x_2391 : f32 = u_xlat67;
    u_xlat67 = clamp(x_2391, 0.0f, 1.0f);
    let x_2393 : vec4<f32> = u_xlat9;
    let x_2395 : vec4<f32> = u_xlat8;
    u_xlat69 = dot(vec3<f32>(x_2393.x, x_2393.y, x_2393.z), vec3<f32>(x_2395.x, x_2395.y, x_2395.z));
    let x_2398 : f32 = u_xlat69;
    u_xlat69 = clamp(x_2398, 0.0f, 1.0f);
    let x_2400 : f32 = u_xlat67;
    let x_2401 : f32 = u_xlat67;
    u_xlat67 = (x_2400 * x_2401);
    let x_2403 : f32 = u_xlat67;
    let x_2405 : f32 = u_xlat0.x;
    u_xlat67 = ((x_2403 * x_2405) + 1.000010014f);
    let x_2408 : f32 = u_xlat69;
    let x_2409 : f32 = u_xlat69;
    u_xlat69 = (x_2408 * x_2409);
    let x_2411 : f32 = u_xlat67;
    let x_2412 : f32 = u_xlat67;
    u_xlat67 = (x_2411 * x_2412);
    let x_2414 : f32 = u_xlat69;
    u_xlat69 = max(x_2414, 0.100000001f);
    let x_2416 : f32 = u_xlat67;
    let x_2417 : f32 = u_xlat69;
    u_xlat67 = (x_2416 * x_2417);
    let x_2419 : f32 = u_xlat66;
    let x_2420 : f32 = u_xlat67;
    u_xlat67 = (x_2419 * x_2420);
    let x_2423 : f32 = u_xlat1.x;
    let x_2424 : f32 = u_xlat67;
    u_xlat67 = (x_2423 / x_2424);
    let x_2426 : vec3<f32> = u_xlat2;
    let x_2427 : f32 = u_xlat67;
    let x_2430 : vec3<f32> = u_xlat6;
    let x_2431 : vec3<f32> = ((x_2426 * vec3<f32>(x_2427, x_2427, x_2427)) + x_2430);
    let x_2432 : vec4<f32> = u_xlat8;
    u_xlat8 = vec4<f32>(x_2431.x, x_2431.y, x_2431.z, x_2432.w);
    let x_2434 : vec4<f32> = u_xlat8;
    let x_2436 : vec4<f32> = u_xlat10;
    let x_2439 : vec4<f32> = u_xlat7;
    let x_2441 : vec3<f32> = ((vec3<f32>(x_2434.x, x_2434.y, x_2434.z) * vec3<f32>(x_2436.x, x_2436.y, x_2436.z)) + vec3<f32>(x_2439.x, x_2439.y, x_2439.z));
    let x_2442 : vec4<f32> = u_xlat7;
    u_xlat7 = vec4<f32>(x_2441.x, x_2441.y, x_2441.z, x_2442.w);

    continuing {
      let x_2444 : u32 = u_xlatu_loop_1;
      u_xlatu_loop_1 = (x_2444 + bitcast<u32>(1i));
    }
  }
  let x_2446 : vec3<f32> = u_xlat4;
  let x_2447 : f32 = u_xlat63;
  let x_2450 : vec3<f32> = u_xlat26;
  let x_2451 : vec3<f32> = ((x_2446 * vec3<f32>(x_2447, x_2447, x_2447)) + x_2450);
  let x_2452 : vec4<f32> = u_xlat0;
  u_xlat0 = vec4<f32>(x_2451.x, x_2452.y, x_2451.y, x_2451.z);
  let x_2454 : vec4<f32> = u_xlat7;
  let x_2456 : vec4<f32> = u_xlat0;
  let x_2458 : vec3<f32> = (vec3<f32>(x_2454.x, x_2454.y, x_2454.z) + vec3<f32>(x_2456.x, x_2456.z, x_2456.w));
  let x_2459 : vec4<f32> = u_xlat0;
  u_xlat0 = vec4<f32>(x_2458.x, x_2459.y, x_2458.y, x_2458.z);
  let x_2462 : f32 = u_xlat21.x;
  let x_2464 : f32 = u_xlat21.x;
  u_xlat21.x = (x_2462 * -(x_2464));
  let x_2469 : f32 = u_xlat21.x;
  u_xlat21.x = exp2(x_2469);
  let x_2472 : vec4<f32> = u_xlat0;
  let x_2476 : vec4<f32> = x_44.unity_FogColor;
  let x_2479 : vec3<f32> = (vec3<f32>(x_2472.x, x_2472.z, x_2472.w) + -(vec3<f32>(x_2476.x, x_2476.y, x_2476.z)));
  let x_2480 : vec4<f32> = u_xlat0;
  u_xlat0 = vec4<f32>(x_2479.x, x_2480.y, x_2479.y, x_2479.z);
  let x_2484 : vec2<f32> = u_xlat21;
  let x_2486 : vec4<f32> = u_xlat0;
  let x_2490 : vec4<f32> = x_44.unity_FogColor;
  let x_2492 : vec3<f32> = ((vec3<f32>(x_2484.x, x_2484.x, x_2484.x) * vec3<f32>(x_2486.x, x_2486.z, x_2486.w)) + vec3<f32>(x_2490.x, x_2490.y, x_2490.z));
  let x_2493 : vec4<f32> = SV_Target0;
  SV_Target0 = vec4<f32>(x_2492.x, x_2492.y, x_2492.z, x_2493.w);
  let x_2498 : u32 = x_44.x_RenderingLayerMaxInt;
  let x_2500 : f32 = x_283.unity_RenderingLayer.x;
  u_xlatu0 = (x_2498 & bitcast<u32>(x_2500));
  let x_2503 : u32 = u_xlatu0;
  u_xlat0.x = f32(x_2503);
  let x_2508 : f32 = u_xlat0.x;
  let x_2510 : f32 = x_44.x_RenderingLayerRcpMaxInt;
  SV_Target1.x = (x_2508 * x_2510);
  let x_2515 : f32 = SV_Target1.x;
  SV_Target1.x = clamp(x_2515, 0.0f, 1.0f);
  SV_Target0.w = 1.0f;
  let x_2519 : vec4<f32> = SV_Target1;
  SV_Target1 = vec4<f32>(x_2519.x, vec3<f32>(0.0f, 0.0f, 0.0f).x, vec3<f32>(0.0f, 0.0f, 0.0f).y, vec3<f32>(0.0f, 0.0f, 0.0f).z);
  return;
}

struct main_out {
  @location(0)
  SV_Target0_1 : vec4<f32>,
  @location(1)
  SV_Target1_1 : vec4<f32>,
}

@fragment
fn main(@builtin(position) gl_FragCoord_param : vec4<f32>, @location(3) vs_INTERP3_param : vec4<f32>, @location(2) vs_INTERP2_param : vec4<f32>, @location(1) vs_INTERP1_param : vec3<f32>, @location(0) vs_INTERP0_param : vec3<f32>, @location(4) vs_INTERP8_param : vec4<f32>) -> main_out {
  gl_FragCoord = gl_FragCoord_param;
  vs_INTERP3 = vs_INTERP3_param;
  vs_INTERP2 = vs_INTERP2_param;
  vs_INTERP1 = vs_INTERP1_param;
  vs_INTERP0 = vs_INTERP0_param;
  vs_INTERP8 = vs_INTERP8_param;
  main_1();
  return main_out(SV_Target0, SV_Target1);
}

