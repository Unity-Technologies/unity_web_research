type Arr = array<vec4<f32>, 2u>;

struct UnityPerDraw {
  unity_ObjectToWorld : mat4x4<f32>,
  unity_WorldToObject : mat4x4<f32>,
  unity_LODFade : vec4<f32>,
  unity_WorldTransformParams : vec4<f32>,
  unity_RenderingLayer : vec4<f32>,
  unity_LightData : vec4<f32>,
  unity_LightIndices : Arr,
  unity_ProbesOcclusion : vec4<f32>,
  unity_SpecCube0_HDR : vec4<f32>,
  unity_SpecCube1_HDR : vec4<f32>,
  unity_SpecCube0_BoxMax : vec4<f32>,
  unity_SpecCube0_BoxMin : vec4<f32>,
  unity_SpecCube0_ProbePosition : vec4<f32>,
  unity_SpecCube1_BoxMax : vec4<f32>,
  unity_SpecCube1_BoxMin : vec4<f32>,
  unity_SpecCube1_ProbePosition : vec4<f32>,
  unity_LightmapST : vec4<f32>,
  unity_DynamicLightmapST : vec4<f32>,
  unity_SHAr : vec4<f32>,
  unity_SHAg : vec4<f32>,
  unity_SHAb : vec4<f32>,
  unity_SHBr : vec4<f32>,
  unity_SHBg : vec4<f32>,
  unity_SHBb : vec4<f32>,
  unity_SHC : vec4<f32>,
  unity_RendererBounds_Min : vec4<f32>,
  unity_RendererBounds_Max : vec4<f32>,
  unity_MatrixPreviousM : mat4x4<f32>,
  unity_MatrixPreviousMI : mat4x4<f32>,
  unity_MotionVectorsParams : vec4<f32>,
  unity_SpriteColor : vec4<f32>,
  unity_SpriteProps : vec4<f32>,
}

struct PGlobals {
  x_ScaledScreenParams : vec4<f32>,
  x_GlobalMipBias : vec2<f32>,
  x_AlphaToMaskAvailable : f32,
  @size(4)
  padding : u32,
  x_MainLightPosition : vec4<f32>,
  x_MainLightColor : vec4<f32>,
  x_AmbientOcclusionParam : vec4<f32>,
  x_AdditionalLightsCount : vec4<f32>,
  x_WorldSpaceCameraPos : vec3<f32>,
  @size(4)
  padding_1 : u32,
  x_ScreenParams : vec4<f32>,
  unity_OrthoParams : vec4<f32>,
  x_ScaleBiasRt : vec4<f32>,
  unity_MatrixV : mat4x4<f32>,
}

struct UnityPerMaterial {
  Texture2D_B222E8F_TexelSize : vec4<f32>,
  Color_C30C7CA3 : vec4<f32>,
  Texture2D_D9BFD5F1_TexelSize : vec4<f32>,
}

type Arr_1 = array<mat4x4<f32>, 5u>;

struct MainLightShadows {
  x_MainLightWorldToShadow : Arr_1,
  x_CascadeShadowSplitSpheres0 : vec4<f32>,
  x_CascadeShadowSplitSpheres1 : vec4<f32>,
  x_CascadeShadowSplitSpheres2 : vec4<f32>,
  x_CascadeShadowSplitSpheres3 : vec4<f32>,
  x_CascadeShadowSplitSphereRadii : vec4<f32>,
  x_MainLightShadowOffset0 : vec4<f32>,
  x_MainLightShadowOffset1 : vec4<f32>,
  x_MainLightShadowParams : vec4<f32>,
  x_MainLightShadowmapSize : vec4<f32>,
}

type Arr_2 = array<vec4<f32>, 256u>;

type Arr_3 = array<vec4<f32>, 256u>;

type Arr_4 = array<vec4<f32>, 256u>;

type Arr_5 = array<vec4<f32>, 256u>;

type Arr_6 = array<vec4<f32>, 256u>;

struct strided_arr {
  @size(16)
  el : f32,
}

type Arr_7 = array<strided_arr, 256u>;

struct AdditionalLights {
  x_AdditionalLightsPosition : Arr_6,
  x_AdditionalLightsColor : Arr_6,
  x_AdditionalLightsAttenuation : Arr_6,
  x_AdditionalLightsSpotDir : Arr_6,
  x_AdditionalLightsOcclusionProbes : Arr_6,
  x_AdditionalLightsLayerMasks : Arr_7,
}

var<private> gl_FragCoord : vec4<f32>;

var<private> vs_INTERP1 : vec3<f32>;

var<private> vs_INTERP2 : vec4<f32>;

@group(1) @binding(2) var<uniform> x_95 : UnityPerDraw;

@group(1) @binding(0) var<uniform> x_160 : PGlobals;

var<private> vs_INTERP0 : vec3<f32>;

@group(0) @binding(3) var Texture2D_B222E8F : texture_2d<f32>;

@group(0) @binding(8) var samplerTexture2D_B222E8F : sampler;

var<private> vs_INTERP3 : vec4<f32>;

@group(1) @binding(4) var<uniform> x_299 : UnityPerMaterial;

@group(0) @binding(4) var Texture2D_D9BFD5F1 : texture_2d<f32>;

@group(0) @binding(9) var samplerTexture2D_D9BFD5F1 : sampler;

var<private> vs_INTERP4 : vec4<f32>;

@group(1) @binding(3) var<uniform> x_401 : MainLightShadows;

@group(0) @binding(2) var x_MainLightShadowmapTexture : texture_depth_2d;

@group(0) @binding(7) var sampler_MainLightShadowmapTexture : sampler_comparison;

@group(0) @binding(1) var x_ScreenSpaceOcclusionTexture : texture_2d<f32>;

@group(0) @binding(6) var sampler_ScreenSpaceOcclusionTexture : sampler;

@group(0) @binding(0) var unity_SpecCube0 : texture_cube<f32>;

@group(0) @binding(5) var samplerunity_SpecCube0 : sampler;

@group(1) @binding(1) var<uniform> x_3874 : AdditionalLights;

var<private> SV_Target0 : vec4<f32>;

fn int_bitfieldInsert_i1_i1_i1_i1_(base : ptr<function, i32>, insert : ptr<function, i32>, offset_1 : ptr<function, i32>, bits : ptr<function, i32>) -> i32 {
  var mask : u32;
  let x_19 : i32 = *(bits);
  let x_23 : i32 = *(offset_1);
  mask = (~((4294967295u << bitcast<u32>(x_19))) << bitcast<u32>(x_23));
  let x_26 : i32 = *(base);
  let x_28 : u32 = mask;
  let x_31 : i32 = *(insert);
  let x_33 : i32 = *(offset_1);
  let x_36 : u32 = mask;
  return bitcast<i32>(((bitcast<u32>(x_26) & ~(x_28)) | ((bitcast<u32>(x_31) << bitcast<u32>(x_33)) & x_36)));
}

fn main_1() {
  var hlslcc_FragCoord : vec4<f32>;
  var u_xlat0 : vec3<f32>;
  var u_xlatb22 : vec2<bool>;
  var u_xlat22 : vec3<f32>;
  var u_xlat1 : vec3<f32>;
  var u_xlat2 : vec4<f32>;
  var u_xlat3 : vec4<f32>;
  var u_xlatb0 : bool;
  var u_xlat4 : vec4<f32>;
  var u_xlat67 : f32;
  var u_xlat5 : vec3<f32>;
  var x_193 : f32;
  var x_206 : f32;
  var x_218 : f32;
  var u_xlat6 : vec4<f32>;
  var u_xlat7 : vec3<f32>;
  var u_xlat8 : vec4<f32>;
  var u_xlat9 : vec4<f32>;
  var u_xlat30 : vec3<f32>;
  var u_xlat10 : vec4<f32>;
  var u_xlatb2 : vec4<bool>;
  var u_xlatu0 : u32;
  var u_xlati0 : i32;
  var u_xlatb67 : bool;
  var txVec0 : vec3<f32>;
  var txVec1 : vec3<f32>;
  var txVec2 : vec3<f32>;
  var txVec3 : vec3<f32>;
  var u_xlatb68 : bool;
  var u_xlat47 : vec2<f32>;
  var u_xlat54 : vec2<f32>;
  var u_xlat11 : vec4<f32>;
  var u_xlat12 : vec4<f32>;
  var u_xlat13 : vec4<f32>;
  var u_xlat14 : vec4<f32>;
  var u_xlat15 : vec4<f32>;
  var u_xlat16 : vec4<f32>;
  var u_xlat68 : f32;
  var txVec4 : vec3<f32>;
  var txVec5 : vec3<f32>;
  var u_xlat25 : f32;
  var txVec6 : vec3<f32>;
  var txVec7 : vec3<f32>;
  var txVec8 : vec3<f32>;
  var txVec9 : vec3<f32>;
  var txVec10 : vec3<f32>;
  var txVec11 : vec3<f32>;
  var txVec12 : vec3<f32>;
  var u_xlat31 : vec3<f32>;
  var u_xlat17 : vec4<f32>;
  var u_xlat18 : vec4<f32>;
  var u_xlat32 : vec2<f32>;
  var u_xlat60 : vec2<f32>;
  var u_xlat55 : vec2<f32>;
  var u_xlat19 : vec4<f32>;
  var u_xlat20 : vec4<f32>;
  var u_xlat21 : vec4<f32>;
  var txVec13 : vec3<f32>;
  var txVec14 : vec3<f32>;
  var u_xlat70 : f32;
  var txVec15 : vec3<f32>;
  var txVec16 : vec3<f32>;
  var txVec17 : vec3<f32>;
  var txVec18 : vec3<f32>;
  var txVec19 : vec3<f32>;
  var txVec20 : vec3<f32>;
  var txVec21 : vec3<f32>;
  var txVec22 : vec3<f32>;
  var txVec23 : vec3<f32>;
  var txVec24 : vec3<f32>;
  var txVec25 : vec3<f32>;
  var txVec26 : vec3<f32>;
  var txVec27 : vec3<f32>;
  var txVec28 : vec3<f32>;
  var txVec29 : vec3<f32>;
  var u_xlatb3 : bool;
  var u_xlatb25 : bool;
  var u_xlat23 : vec3<f32>;
  var x_1898 : f32;
  var u_xlatu4 : vec3<u32>;
  var u_xlatu47 : u32;
  var u_xlatu69 : u32;
  var u_xlati47 : i32;
  var param : i32;
  var param_1 : i32;
  var param_2 : i32;
  var param_3 : i32;
  var u_xlat69 : f32;
  var x_2023 : f32;
  var u_xlatb47 : bool;
  var x_2077 : f32;
  var u_xlat71 : f32;
  var u_xlat28 : f32;
  var u_xlat50 : f32;
  var txVec30 : vec3<f32>;
  var txVec31 : vec3<f32>;
  var txVec32 : vec3<f32>;
  var txVec33 : vec3<f32>;
  var u_xlatb72 : bool;
  var u_xlat52 : vec2<f32>;
  var u_xlat72 : f32;
  var txVec34 : vec3<f32>;
  var u_xlat73 : f32;
  var txVec35 : vec3<f32>;
  var txVec36 : vec3<f32>;
  var txVec37 : vec3<f32>;
  var txVec38 : vec3<f32>;
  var txVec39 : vec3<f32>;
  var txVec40 : vec3<f32>;
  var txVec41 : vec3<f32>;
  var txVec42 : vec3<f32>;
  var txVec43 : vec3<f32>;
  var txVec44 : vec3<f32>;
  var txVec45 : vec3<f32>;
  var txVec46 : vec3<f32>;
  var txVec47 : vec3<f32>;
  var txVec48 : vec3<f32>;
  var txVec49 : vec3<f32>;
  var txVec50 : vec3<f32>;
  var txVec51 : vec3<f32>;
  var txVec52 : vec3<f32>;
  var txVec53 : vec3<f32>;
  var txVec54 : vec3<f32>;
  var txVec55 : vec3<f32>;
  var txVec56 : vec3<f32>;
  var txVec57 : vec3<f32>;
  var txVec58 : vec3<f32>;
  var txVec59 : vec3<f32>;
  var x_3481 : f32;
  var u_xlat24 : f32;
  var u_xlatu_loop_1 : u32;
  var u_xlati69 : i32;
  var indexable : array<vec4<u32>, 4u>;
  var u_xlat_precise_vec4 : vec4<f32>;
  var u_xlat_precise_ivec4 : vec4<i32>;
  var u_xlat_precise_bvec4 : vec4<bool>;
  var u_xlat_precise_uvec4 : vec4<u32>;
  let x_49 : vec4<f32> = gl_FragCoord;
  let x_50 : vec3<f32> = vec3<f32>(x_49.x, x_49.y, x_49.z);
  let x_55 : f32 = gl_FragCoord.w;
  hlslcc_FragCoord = vec4<f32>(x_50.x, x_50.y, x_50.z, (1.0f / x_55));
  let x_65 : vec3<f32> = vs_INTERP1;
  let x_66 : vec3<f32> = vs_INTERP1;
  u_xlat0.x = dot(x_65, x_66);
  let x_72 : f32 = u_xlat0.x;
  u_xlat0.x = sqrt(x_72);
  let x_76 : f32 = u_xlat0.x;
  u_xlat0.x = (1.0f / x_76);
  let x_86 : f32 = vs_INTERP2.w;
  u_xlatb22.x = (0.0f < x_86);
  let x_99 : f32 = x_95.unity_WorldTransformParams.w;
  u_xlatb22.y = (x_99 >= 0.0f);
  let x_105 : bool = u_xlatb22.x;
  u_xlat22.x = select(-1.0f, 1.0f, x_105);
  let x_110 : bool = u_xlatb22.y;
  u_xlat22.y = select(-1.0f, 1.0f, x_110);
  let x_114 : f32 = u_xlat22.y;
  let x_116 : f32 = u_xlat22.x;
  u_xlat22.x = (x_114 * x_116);
  let x_120 : vec3<f32> = vs_INTERP1;
  let x_122 : vec4<f32> = vs_INTERP2;
  u_xlat1 = (vec3<f32>(x_120.z, x_120.x, x_120.y) * vec3<f32>(x_122.y, x_122.z, x_122.x));
  let x_125 : vec3<f32> = vs_INTERP1;
  let x_127 : vec4<f32> = vs_INTERP2;
  let x_130 : vec3<f32> = u_xlat1;
  u_xlat1 = ((vec3<f32>(x_125.y, x_125.z, x_125.x) * vec3<f32>(x_127.z, x_127.x, x_127.y)) + -(x_130));
  let x_133 : vec3<f32> = u_xlat22;
  let x_135 : vec3<f32> = u_xlat1;
  u_xlat22 = (vec3<f32>(x_133.x, x_133.x, x_133.x) * x_135);
  let x_137 : vec3<f32> = u_xlat0;
  let x_139 : vec3<f32> = vs_INTERP1;
  u_xlat1 = (vec3<f32>(x_137.x, x_137.x, x_137.x) * x_139);
  let x_142 : vec3<f32> = u_xlat0;
  let x_144 : vec4<f32> = vs_INTERP2;
  let x_146 : vec3<f32> = (vec3<f32>(x_142.x, x_142.x, x_142.x) * vec3<f32>(x_144.x, x_144.y, x_144.z));
  let x_147 : vec4<f32> = u_xlat2;
  u_xlat2 = vec4<f32>(x_146.x, x_146.y, x_146.z, x_147.w);
  let x_150 : vec3<f32> = u_xlat22;
  let x_151 : vec3<f32> = u_xlat0;
  let x_153 : vec3<f32> = (x_150 * vec3<f32>(x_151.x, x_151.x, x_151.x));
  let x_154 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_153.x, x_153.y, x_153.z, x_154.w);
  let x_163 : f32 = x_160.unity_OrthoParams.w;
  u_xlatb0 = (x_163 == 0.0f);
  let x_167 : vec3<f32> = vs_INTERP0;
  let x_172 : vec3<f32> = x_160.x_WorldSpaceCameraPos;
  let x_173 : vec3<f32> = (-(x_167) + x_172);
  let x_174 : vec4<f32> = u_xlat4;
  u_xlat4 = vec4<f32>(x_173.x, x_173.y, x_173.z, x_174.w);
  let x_177 : vec4<f32> = u_xlat4;
  let x_179 : vec4<f32> = u_xlat4;
  u_xlat67 = dot(vec3<f32>(x_177.x, x_177.y, x_177.z), vec3<f32>(x_179.x, x_179.y, x_179.z));
  let x_182 : f32 = u_xlat67;
  u_xlat67 = inverseSqrt(x_182);
  let x_184 : f32 = u_xlat67;
  let x_186 : vec4<f32> = u_xlat4;
  let x_188 : vec3<f32> = (vec3<f32>(x_184, x_184, x_184) * vec3<f32>(x_186.x, x_186.y, x_186.z));
  let x_189 : vec4<f32> = u_xlat4;
  u_xlat4 = vec4<f32>(x_188.x, x_188.y, x_188.z, x_189.w);
  let x_192 : bool = u_xlatb0;
  if (x_192) {
    let x_197 : f32 = u_xlat4.x;
    x_193 = x_197;
  } else {
    let x_202 : f32 = x_160.unity_MatrixV[0i].z;
    x_193 = x_202;
  }
  let x_203 : f32 = x_193;
  u_xlat5.x = x_203;
  let x_205 : bool = u_xlatb0;
  if (x_205) {
    let x_210 : f32 = u_xlat4.y;
    x_206 = x_210;
  } else {
    let x_214 : f32 = x_160.unity_MatrixV[1i].z;
    x_206 = x_214;
  }
  let x_215 : f32 = x_206;
  u_xlat5.y = x_215;
  let x_217 : bool = u_xlatb0;
  if (x_217) {
    let x_222 : f32 = u_xlat4.z;
    x_218 = x_222;
  } else {
    let x_226 : f32 = x_160.unity_MatrixV[2i].z;
    x_218 = x_226;
  }
  let x_227 : f32 = x_218;
  u_xlat5.z = x_227;
  let x_229 : vec3<f32> = u_xlat5;
  let x_233 : vec4<f32> = x_95.unity_WorldToObject[1i];
  let x_235 : vec3<f32> = (vec3<f32>(x_229.y, x_229.y, x_229.y) * vec3<f32>(x_233.x, x_233.y, x_233.z));
  let x_236 : vec4<f32> = u_xlat4;
  u_xlat4 = vec4<f32>(x_235.x, x_235.y, x_235.z, x_236.w);
  let x_239 : vec4<f32> = x_95.unity_WorldToObject[0i];
  let x_241 : vec3<f32> = u_xlat5;
  let x_244 : vec4<f32> = u_xlat4;
  let x_246 : vec3<f32> = ((vec3<f32>(x_239.x, x_239.y, x_239.z) * vec3<f32>(x_241.x, x_241.x, x_241.x)) + vec3<f32>(x_244.x, x_244.y, x_244.z));
  let x_247 : vec4<f32> = u_xlat4;
  u_xlat4 = vec4<f32>(x_246.x, x_246.y, x_246.z, x_247.w);
  let x_250 : vec4<f32> = x_95.unity_WorldToObject[2i];
  let x_252 : vec3<f32> = u_xlat5;
  let x_255 : vec4<f32> = u_xlat4;
  let x_257 : vec3<f32> = ((vec3<f32>(x_250.x, x_250.y, x_250.z) * vec3<f32>(x_252.z, x_252.z, x_252.z)) + vec3<f32>(x_255.x, x_255.y, x_255.z));
  let x_258 : vec4<f32> = u_xlat4;
  u_xlat4 = vec4<f32>(x_257.x, x_257.y, x_257.z, x_258.w);
  let x_260 : vec4<f32> = u_xlat4;
  let x_262 : vec4<f32> = u_xlat4;
  u_xlat0.x = dot(vec3<f32>(x_260.x, x_260.y, x_260.z), vec3<f32>(x_262.x, x_262.y, x_262.z));
  let x_267 : f32 = u_xlat0.x;
  u_xlat0.x = inverseSqrt(x_267);
  let x_270 : vec3<f32> = u_xlat0;
  let x_272 : vec4<f32> = u_xlat4;
  let x_274 : vec3<f32> = (vec3<f32>(x_270.x, x_270.x, x_270.x) * vec3<f32>(x_272.x, x_272.y, x_272.z));
  let x_275 : vec4<f32> = u_xlat4;
  u_xlat4 = vec4<f32>(x_274.x, x_274.y, x_274.z, x_275.w);
  let x_289 : vec4<f32> = vs_INTERP3;
  let x_292 : f32 = x_160.x_GlobalMipBias.x;
  let x_293 : vec4<f32> = textureSampleBias(Texture2D_B222E8F, samplerTexture2D_B222E8F, vec2<f32>(x_289.x, x_289.y), x_292);
  u_xlat6 = x_293;
  let x_295 : vec4<f32> = u_xlat6;
  let x_301 : vec4<f32> = x_299.Color_C30C7CA3;
  u_xlat7 = (vec3<f32>(x_295.x, x_295.y, x_295.z) * vec3<f32>(x_301.x, x_301.y, x_301.z));
  let x_310 : vec4<f32> = vs_INTERP3;
  let x_313 : f32 = x_160.x_GlobalMipBias.x;
  let x_314 : vec4<f32> = textureSampleBias(Texture2D_D9BFD5F1, samplerTexture2D_D9BFD5F1, vec2<f32>(x_310.x, x_310.y), x_313);
  u_xlat8 = vec4<f32>(x_314.w, x_314.x, x_314.y, x_314.z);
  let x_317 : vec4<f32> = u_xlat8;
  u_xlat9 = ((vec4<f32>(x_317.y, x_317.z, x_317.w, x_317.x) * vec4<f32>(2.0f, 2.0f, 2.0f, 2.0f)) + vec4<f32>(-1.0f, -1.0f, -1.0f, -1.0f));
  let x_324 : vec4<f32> = u_xlat9;
  let x_325 : vec4<f32> = u_xlat9;
  u_xlat0.x = dot(x_324, x_325);
  let x_329 : f32 = u_xlat0.x;
  u_xlat0.x = inverseSqrt(x_329);
  let x_333 : vec3<f32> = u_xlat0;
  let x_335 : vec4<f32> = u_xlat9;
  u_xlat30 = (vec3<f32>(x_333.x, x_333.x, x_333.x) * vec3<f32>(x_335.x, x_335.y, x_335.z));
  let x_340 : f32 = vs_INTERP4.y;
  u_xlat0.x = (x_340 * 200.0f);
  let x_345 : f32 = u_xlat0.x;
  u_xlat0.x = min(x_345, 1.0f);
  let x_348 : vec3<f32> = u_xlat0;
  let x_350 : vec4<f32> = u_xlat6;
  let x_352 : vec3<f32> = (vec3<f32>(x_348.x, x_348.x, x_348.x) * vec3<f32>(x_350.x, x_350.y, x_350.z));
  let x_353 : vec4<f32> = u_xlat6;
  u_xlat6 = vec4<f32>(x_352.x, x_352.y, x_352.z, x_353.w);
  let x_355 : vec4<f32> = u_xlat3;
  let x_357 : vec3<f32> = u_xlat30;
  let x_359 : vec3<f32> = (vec3<f32>(x_355.x, x_355.y, x_355.z) * vec3<f32>(x_357.y, x_357.y, x_357.y));
  let x_360 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_359.x, x_359.y, x_359.z, x_360.w);
  let x_362 : vec3<f32> = u_xlat30;
  let x_364 : vec4<f32> = u_xlat2;
  let x_367 : vec4<f32> = u_xlat3;
  let x_369 : vec3<f32> = ((vec3<f32>(x_362.x, x_362.x, x_362.x) * vec3<f32>(x_364.x, x_364.y, x_364.z)) + vec3<f32>(x_367.x, x_367.y, x_367.z));
  let x_370 : vec4<f32> = u_xlat2;
  u_xlat2 = vec4<f32>(x_369.x, x_369.y, x_369.z, x_370.w);
  let x_372 : vec3<f32> = u_xlat30;
  let x_374 : vec3<f32> = u_xlat1;
  let x_376 : vec4<f32> = u_xlat2;
  u_xlat1 = ((vec3<f32>(x_372.z, x_372.z, x_372.z) * x_374) + vec3<f32>(x_376.x, x_376.y, x_376.z));
  let x_379 : vec3<f32> = u_xlat1;
  let x_380 : vec3<f32> = u_xlat1;
  u_xlat0.x = dot(x_379, x_380);
  let x_384 : f32 = u_xlat0.x;
  u_xlat0.x = max(x_384, 1.17549435e-37f);
  let x_389 : f32 = u_xlat0.x;
  u_xlat0.x = inverseSqrt(x_389);
  let x_392 : vec3<f32> = u_xlat0;
  let x_394 : vec3<f32> = u_xlat1;
  u_xlat1 = (vec3<f32>(x_392.x, x_392.x, x_392.x) * x_394);
  let x_396 : vec3<f32> = vs_INTERP0;
  let x_403 : vec4<f32> = x_401.x_CascadeShadowSplitSpheres0;
  let x_406 : vec3<f32> = (x_396 + -(vec3<f32>(x_403.x, x_403.y, x_403.z)));
  let x_407 : vec4<f32> = u_xlat2;
  u_xlat2 = vec4<f32>(x_406.x, x_406.y, x_406.z, x_407.w);
  let x_409 : vec3<f32> = vs_INTERP0;
  let x_411 : vec4<f32> = x_401.x_CascadeShadowSplitSpheres1;
  let x_414 : vec3<f32> = (x_409 + -(vec3<f32>(x_411.x, x_411.y, x_411.z)));
  let x_415 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_414.x, x_414.y, x_414.z, x_415.w);
  let x_417 : vec3<f32> = vs_INTERP0;
  let x_419 : vec4<f32> = x_401.x_CascadeShadowSplitSpheres2;
  let x_422 : vec3<f32> = (x_417 + -(vec3<f32>(x_419.x, x_419.y, x_419.z)));
  let x_423 : vec4<f32> = u_xlat9;
  u_xlat9 = vec4<f32>(x_422.x, x_422.y, x_422.z, x_423.w);
  let x_426 : vec3<f32> = vs_INTERP0;
  let x_429 : vec4<f32> = x_401.x_CascadeShadowSplitSpheres3;
  let x_432 : vec3<f32> = (x_426 + -(vec3<f32>(x_429.x, x_429.y, x_429.z)));
  let x_433 : vec4<f32> = u_xlat10;
  u_xlat10 = vec4<f32>(x_432.x, x_432.y, x_432.z, x_433.w);
  let x_435 : vec4<f32> = u_xlat2;
  let x_437 : vec4<f32> = u_xlat2;
  u_xlat2.x = dot(vec3<f32>(x_435.x, x_435.y, x_435.z), vec3<f32>(x_437.x, x_437.y, x_437.z));
  let x_441 : vec4<f32> = u_xlat3;
  let x_443 : vec4<f32> = u_xlat3;
  u_xlat2.y = dot(vec3<f32>(x_441.x, x_441.y, x_441.z), vec3<f32>(x_443.x, x_443.y, x_443.z));
  let x_447 : vec4<f32> = u_xlat9;
  let x_449 : vec4<f32> = u_xlat9;
  u_xlat2.z = dot(vec3<f32>(x_447.x, x_447.y, x_447.z), vec3<f32>(x_449.x, x_449.y, x_449.z));
  let x_453 : vec4<f32> = u_xlat10;
  let x_455 : vec4<f32> = u_xlat10;
  u_xlat2.w = dot(vec3<f32>(x_453.x, x_453.y, x_453.z), vec3<f32>(x_455.x, x_455.y, x_455.z));
  let x_462 : vec4<f32> = u_xlat2;
  let x_465 : vec4<f32> = x_401.x_CascadeShadowSplitSphereRadii;
  u_xlatb2 = (x_462 < x_465);
  let x_468 : bool = u_xlatb2.x;
  u_xlat3.x = select(0.0f, 1.0f, x_468);
  let x_472 : bool = u_xlatb2.y;
  u_xlat3.y = select(0.0f, 1.0f, x_472);
  let x_476 : bool = u_xlatb2.z;
  u_xlat3.z = select(0.0f, 1.0f, x_476);
  let x_480 : bool = u_xlatb2.w;
  u_xlat3.w = select(0.0f, 1.0f, x_480);
  let x_484 : bool = u_xlatb2.x;
  u_xlat2.x = select(-0.0f, -1.0f, x_484);
  let x_489 : bool = u_xlatb2.y;
  u_xlat2.y = select(-0.0f, -1.0f, x_489);
  let x_493 : bool = u_xlatb2.z;
  u_xlat2.z = select(-0.0f, -1.0f, x_493);
  let x_496 : vec4<f32> = u_xlat2;
  let x_498 : vec4<f32> = u_xlat3;
  let x_500 : vec3<f32> = (vec3<f32>(x_496.x, x_496.y, x_496.z) + vec3<f32>(x_498.y, x_498.z, x_498.w));
  let x_501 : vec4<f32> = u_xlat2;
  u_xlat2 = vec4<f32>(x_500.x, x_500.y, x_500.z, x_501.w);
  let x_503 : vec4<f32> = u_xlat2;
  let x_506 : vec3<f32> = max(vec3<f32>(x_503.x, x_503.y, x_503.z), vec3<f32>(0.0f, 0.0f, 0.0f));
  let x_507 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_507.x, x_506.x, x_506.y, x_506.z);
  let x_509 : vec4<f32> = u_xlat3;
  u_xlat0.x = dot(x_509, vec4<f32>(4.0f, 3.0f, 2.0f, 1.0f));
  let x_516 : f32 = u_xlat0.x;
  u_xlat0.x = (-(x_516) + 4.0f);
  let x_522 : f32 = u_xlat0.x;
  u_xlatu0 = u32(x_522);
  let x_525 : u32 = u_xlatu0;
  u_xlati0 = (bitcast<i32>(x_525) << bitcast<u32>(2i));
  let x_528 : vec3<f32> = vs_INTERP0;
  let x_530 : i32 = u_xlati0;
  let x_533 : i32 = u_xlati0;
  let x_537 : vec4<f32> = x_401.x_MainLightWorldToShadow[((x_530 + 1i) / 4i)][((x_533 + 1i) % 4i)];
  let x_539 : vec3<f32> = (vec3<f32>(x_528.y, x_528.y, x_528.y) * vec3<f32>(x_537.x, x_537.y, x_537.z));
  let x_540 : vec4<f32> = u_xlat2;
  u_xlat2 = vec4<f32>(x_539.x, x_539.y, x_539.z, x_540.w);
  let x_542 : i32 = u_xlati0;
  let x_544 : i32 = u_xlati0;
  let x_547 : vec4<f32> = x_401.x_MainLightWorldToShadow[(x_542 / 4i)][(x_544 % 4i)];
  let x_549 : vec3<f32> = vs_INTERP0;
  let x_552 : vec4<f32> = u_xlat2;
  let x_554 : vec3<f32> = ((vec3<f32>(x_547.x, x_547.y, x_547.z) * vec3<f32>(x_549.x, x_549.x, x_549.x)) + vec3<f32>(x_552.x, x_552.y, x_552.z));
  let x_555 : vec4<f32> = u_xlat2;
  u_xlat2 = vec4<f32>(x_554.x, x_554.y, x_554.z, x_555.w);
  let x_557 : i32 = u_xlati0;
  let x_560 : i32 = u_xlati0;
  let x_564 : vec4<f32> = x_401.x_MainLightWorldToShadow[((x_557 + 2i) / 4i)][((x_560 + 2i) % 4i)];
  let x_566 : vec3<f32> = vs_INTERP0;
  let x_569 : vec4<f32> = u_xlat2;
  let x_571 : vec3<f32> = ((vec3<f32>(x_564.x, x_564.y, x_564.z) * vec3<f32>(x_566.z, x_566.z, x_566.z)) + vec3<f32>(x_569.x, x_569.y, x_569.z));
  let x_572 : vec4<f32> = u_xlat2;
  u_xlat2 = vec4<f32>(x_571.x, x_571.y, x_571.z, x_572.w);
  let x_574 : vec4<f32> = u_xlat2;
  let x_576 : i32 = u_xlati0;
  let x_579 : i32 = u_xlati0;
  let x_583 : vec4<f32> = x_401.x_MainLightWorldToShadow[((x_576 + 3i) / 4i)][((x_579 + 3i) % 4i)];
  let x_585 : vec3<f32> = (vec3<f32>(x_574.x, x_574.y, x_574.z) + vec3<f32>(x_583.x, x_583.y, x_583.z));
  let x_586 : vec4<f32> = u_xlat2;
  u_xlat2 = vec4<f32>(x_585.x, x_585.y, x_585.z, x_586.w);
  let x_590 : f32 = x_401.x_MainLightShadowParams.y;
  u_xlatb0 = (0.0f < x_590);
  let x_592 : bool = u_xlatb0;
  if (x_592) {
    let x_597 : f32 = x_401.x_MainLightShadowParams.y;
    u_xlatb67 = (x_597 == 1.0f);
    let x_599 : bool = u_xlatb67;
    if (x_599) {
      let x_602 : vec4<f32> = u_xlat2;
      let x_606 : vec4<f32> = x_401.x_MainLightShadowOffset0;
      u_xlat3 = (vec4<f32>(x_602.x, x_602.y, x_602.x, x_602.y) + x_606);
      let x_609 : vec4<f32> = u_xlat3;
      let x_610 : vec2<f32> = vec2<f32>(x_609.x, x_609.y);
      let x_612 : f32 = u_xlat2.z;
      txVec0 = vec3<f32>(x_610.x, x_610.y, x_612);
      let x_624 : vec3<f32> = txVec0;
      let x_626 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_624.xy, x_624.z);
      u_xlat9.x = x_626;
      let x_629 : vec4<f32> = u_xlat3;
      let x_630 : vec2<f32> = vec2<f32>(x_629.z, x_629.w);
      let x_632 : f32 = u_xlat2.z;
      txVec1 = vec3<f32>(x_630.x, x_630.y, x_632);
      let x_639 : vec3<f32> = txVec1;
      let x_641 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_639.xy, x_639.z);
      u_xlat9.y = x_641;
      let x_643 : vec4<f32> = u_xlat2;
      let x_646 : vec4<f32> = x_401.x_MainLightShadowOffset1;
      u_xlat3 = (vec4<f32>(x_643.x, x_643.y, x_643.x, x_643.y) + x_646);
      let x_649 : vec4<f32> = u_xlat3;
      let x_650 : vec2<f32> = vec2<f32>(x_649.x, x_649.y);
      let x_652 : f32 = u_xlat2.z;
      txVec2 = vec3<f32>(x_650.x, x_650.y, x_652);
      let x_659 : vec3<f32> = txVec2;
      let x_661 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_659.xy, x_659.z);
      u_xlat9.z = x_661;
      let x_664 : vec4<f32> = u_xlat3;
      let x_665 : vec2<f32> = vec2<f32>(x_664.z, x_664.w);
      let x_667 : f32 = u_xlat2.z;
      txVec3 = vec3<f32>(x_665.x, x_665.y, x_667);
      let x_674 : vec3<f32> = txVec3;
      let x_676 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_674.xy, x_674.z);
      u_xlat9.w = x_676;
      let x_678 : vec4<f32> = u_xlat9;
      u_xlat67 = dot(x_678, vec4<f32>(0.25f, 0.25f, 0.25f, 0.25f));
    } else {
      let x_685 : f32 = x_401.x_MainLightShadowParams.y;
      u_xlatb68 = (x_685 == 2.0f);
      let x_687 : bool = u_xlatb68;
      if (x_687) {
        let x_690 : vec4<f32> = u_xlat2;
        let x_693 : vec4<f32> = x_401.x_MainLightShadowmapSize;
        let x_698 : vec2<f32> = ((vec2<f32>(x_690.x, x_690.y) * vec2<f32>(x_693.z, x_693.w)) + vec2<f32>(0.5f, 0.5f));
        let x_699 : vec4<f32> = u_xlat3;
        u_xlat3 = vec4<f32>(x_698.x, x_698.y, x_699.z, x_699.w);
        let x_701 : vec4<f32> = u_xlat3;
        let x_703 : vec2<f32> = floor(vec2<f32>(x_701.x, x_701.y));
        let x_704 : vec4<f32> = u_xlat3;
        u_xlat3 = vec4<f32>(x_703.x, x_703.y, x_704.z, x_704.w);
        let x_708 : vec4<f32> = u_xlat2;
        let x_711 : vec4<f32> = x_401.x_MainLightShadowmapSize;
        let x_714 : vec4<f32> = u_xlat3;
        u_xlat47 = ((vec2<f32>(x_708.x, x_708.y) * vec2<f32>(x_711.z, x_711.w)) + -(vec2<f32>(x_714.x, x_714.y)));
        let x_718 : vec2<f32> = u_xlat47;
        u_xlat9 = (vec4<f32>(x_718.x, x_718.x, x_718.y, x_718.y) + vec4<f32>(0.5f, 1.0f, 0.5f, 1.0f));
        let x_722 : vec4<f32> = u_xlat9;
        let x_724 : vec4<f32> = u_xlat9;
        u_xlat10 = (vec4<f32>(x_722.x, x_722.x, x_722.z, x_722.z) * vec4<f32>(x_724.x, x_724.x, x_724.z, x_724.z));
        let x_727 : vec4<f32> = u_xlat10;
        let x_731 : vec2<f32> = (vec2<f32>(x_727.y, x_727.w) * vec2<f32>(0.079999998f, 0.079999998f));
        let x_732 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_731.x, x_732.y, x_731.y, x_732.w);
        let x_734 : vec4<f32> = u_xlat10;
        let x_737 : vec2<f32> = u_xlat47;
        let x_739 : vec2<f32> = ((vec2<f32>(x_734.x, x_734.z) * vec2<f32>(0.5f, 0.5f)) + -(x_737));
        let x_740 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_739.x, x_739.y, x_740.z, x_740.w);
        let x_743 : vec2<f32> = u_xlat47;
        u_xlat54 = (-(x_743) + vec2<f32>(1.0f, 1.0f));
        let x_748 : vec2<f32> = u_xlat47;
        let x_750 : vec2<f32> = min(x_748, vec2<f32>(0.0f, 0.0f));
        let x_751 : vec4<f32> = u_xlat11;
        u_xlat11 = vec4<f32>(x_750.x, x_750.y, x_751.z, x_751.w);
        let x_753 : vec4<f32> = u_xlat11;
        let x_756 : vec4<f32> = u_xlat11;
        let x_759 : vec2<f32> = u_xlat54;
        let x_760 : vec2<f32> = ((-(vec2<f32>(x_753.x, x_753.y)) * vec2<f32>(x_756.x, x_756.y)) + x_759);
        let x_761 : vec4<f32> = u_xlat11;
        u_xlat11 = vec4<f32>(x_760.x, x_760.y, x_761.z, x_761.w);
        let x_763 : vec2<f32> = u_xlat47;
        u_xlat47 = max(x_763, vec2<f32>(0.0f, 0.0f));
        let x_765 : vec2<f32> = u_xlat47;
        let x_767 : vec2<f32> = u_xlat47;
        let x_769 : vec4<f32> = u_xlat9;
        u_xlat47 = ((-(x_765) * x_767) + vec2<f32>(x_769.y, x_769.w));
        let x_772 : vec4<f32> = u_xlat11;
        let x_774 : vec2<f32> = (vec2<f32>(x_772.x, x_772.y) + vec2<f32>(1.0f, 1.0f));
        let x_775 : vec4<f32> = u_xlat11;
        u_xlat11 = vec4<f32>(x_774.x, x_774.y, x_775.z, x_775.w);
        let x_777 : vec2<f32> = u_xlat47;
        u_xlat47 = (x_777 + vec2<f32>(1.0f, 1.0f));
        let x_780 : vec4<f32> = u_xlat10;
        let x_784 : vec2<f32> = (vec2<f32>(x_780.x, x_780.y) * vec2<f32>(0.159999996f, 0.159999996f));
        let x_785 : vec4<f32> = u_xlat12;
        u_xlat12 = vec4<f32>(x_784.x, x_784.y, x_785.z, x_785.w);
        let x_787 : vec2<f32> = u_xlat54;
        let x_788 : vec2<f32> = (x_787 * vec2<f32>(0.159999996f, 0.159999996f));
        let x_789 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_788.x, x_788.y, x_789.z, x_789.w);
        let x_791 : vec4<f32> = u_xlat11;
        let x_793 : vec2<f32> = (vec2<f32>(x_791.x, x_791.y) * vec2<f32>(0.159999996f, 0.159999996f));
        let x_794 : vec4<f32> = u_xlat11;
        u_xlat11 = vec4<f32>(x_793.x, x_793.y, x_794.z, x_794.w);
        let x_797 : vec2<f32> = u_xlat47;
        let x_798 : vec2<f32> = (x_797 * vec2<f32>(0.159999996f, 0.159999996f));
        let x_799 : vec4<f32> = u_xlat13;
        u_xlat13 = vec4<f32>(x_798.x, x_798.y, x_799.z, x_799.w);
        let x_801 : vec4<f32> = u_xlat9;
        u_xlat47 = (vec2<f32>(x_801.y, x_801.w) * vec2<f32>(0.159999996f, 0.159999996f));
        let x_805 : f32 = u_xlat11.x;
        u_xlat12.z = x_805;
        let x_808 : f32 = u_xlat47.x;
        u_xlat12.w = x_808;
        let x_811 : f32 = u_xlat13.x;
        u_xlat10.z = x_811;
        let x_814 : f32 = u_xlat9.x;
        u_xlat10.w = x_814;
        let x_817 : vec4<f32> = u_xlat10;
        let x_819 : vec4<f32> = u_xlat12;
        u_xlat14 = (vec4<f32>(x_817.z, x_817.w, x_817.x, x_817.z) + vec4<f32>(x_819.z, x_819.w, x_819.x, x_819.z));
        let x_823 : f32 = u_xlat12.y;
        u_xlat11.z = x_823;
        let x_826 : f32 = u_xlat47.y;
        u_xlat11.w = x_826;
        let x_829 : f32 = u_xlat10.y;
        u_xlat13.z = x_829;
        let x_832 : f32 = u_xlat9.z;
        u_xlat13.w = x_832;
        let x_834 : vec4<f32> = u_xlat11;
        let x_836 : vec4<f32> = u_xlat13;
        let x_838 : vec3<f32> = (vec3<f32>(x_834.z, x_834.y, x_834.w) + vec3<f32>(x_836.z, x_836.y, x_836.w));
        let x_839 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_838.x, x_838.y, x_838.z, x_839.w);
        let x_841 : vec4<f32> = u_xlat10;
        let x_843 : vec4<f32> = u_xlat14;
        let x_845 : vec3<f32> = (vec3<f32>(x_841.x, x_841.z, x_841.w) / vec3<f32>(x_843.z, x_843.w, x_843.y));
        let x_846 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_845.x, x_845.y, x_845.z, x_846.w);
        let x_848 : vec4<f32> = u_xlat10;
        let x_854 : vec3<f32> = (vec3<f32>(x_848.x, x_848.y, x_848.z) + vec3<f32>(-2.5f, -0.5f, 1.5f));
        let x_855 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_854.x, x_854.y, x_854.z, x_855.w);
        let x_857 : vec4<f32> = u_xlat13;
        let x_859 : vec4<f32> = u_xlat9;
        let x_861 : vec3<f32> = (vec3<f32>(x_857.z, x_857.y, x_857.w) / vec3<f32>(x_859.x, x_859.y, x_859.z));
        let x_862 : vec4<f32> = u_xlat11;
        u_xlat11 = vec4<f32>(x_861.x, x_861.y, x_861.z, x_862.w);
        let x_864 : vec4<f32> = u_xlat11;
        let x_866 : vec3<f32> = (vec3<f32>(x_864.x, x_864.y, x_864.z) + vec3<f32>(-2.5f, -0.5f, 1.5f));
        let x_867 : vec4<f32> = u_xlat11;
        u_xlat11 = vec4<f32>(x_866.x, x_866.y, x_866.z, x_867.w);
        let x_869 : vec4<f32> = u_xlat10;
        let x_872 : vec4<f32> = x_401.x_MainLightShadowmapSize;
        let x_874 : vec3<f32> = (vec3<f32>(x_869.y, x_869.x, x_869.z) * vec3<f32>(x_872.x, x_872.x, x_872.x));
        let x_875 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_874.x, x_874.y, x_874.z, x_875.w);
        let x_877 : vec4<f32> = u_xlat11;
        let x_880 : vec4<f32> = x_401.x_MainLightShadowmapSize;
        let x_882 : vec3<f32> = (vec3<f32>(x_877.x, x_877.y, x_877.z) * vec3<f32>(x_880.y, x_880.y, x_880.y));
        let x_883 : vec4<f32> = u_xlat11;
        u_xlat11 = vec4<f32>(x_882.x, x_882.y, x_882.z, x_883.w);
        let x_886 : f32 = u_xlat11.x;
        u_xlat10.w = x_886;
        let x_888 : vec4<f32> = u_xlat3;
        let x_891 : vec4<f32> = x_401.x_MainLightShadowmapSize;
        let x_894 : vec4<f32> = u_xlat10;
        u_xlat12 = ((vec4<f32>(x_888.x, x_888.y, x_888.x, x_888.y) * vec4<f32>(x_891.x, x_891.y, x_891.x, x_891.y)) + vec4<f32>(x_894.y, x_894.w, x_894.x, x_894.w));
        let x_897 : vec4<f32> = u_xlat3;
        let x_900 : vec4<f32> = x_401.x_MainLightShadowmapSize;
        let x_903 : vec4<f32> = u_xlat10;
        u_xlat47 = ((vec2<f32>(x_897.x, x_897.y) * vec2<f32>(x_900.x, x_900.y)) + vec2<f32>(x_903.z, x_903.w));
        let x_907 : f32 = u_xlat10.y;
        u_xlat11.w = x_907;
        let x_909 : vec4<f32> = u_xlat11;
        let x_910 : vec2<f32> = vec2<f32>(x_909.y, x_909.z);
        let x_911 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_911.x, x_910.x, x_911.z, x_910.y);
        let x_913 : vec4<f32> = u_xlat3;
        let x_916 : vec4<f32> = x_401.x_MainLightShadowmapSize;
        let x_919 : vec4<f32> = u_xlat10;
        u_xlat13 = ((vec4<f32>(x_913.x, x_913.y, x_913.x, x_913.y) * vec4<f32>(x_916.x, x_916.y, x_916.x, x_916.y)) + vec4<f32>(x_919.x, x_919.y, x_919.z, x_919.y));
        let x_922 : vec4<f32> = u_xlat3;
        let x_925 : vec4<f32> = x_401.x_MainLightShadowmapSize;
        let x_928 : vec4<f32> = u_xlat11;
        u_xlat11 = ((vec4<f32>(x_922.x, x_922.y, x_922.x, x_922.y) * vec4<f32>(x_925.x, x_925.y, x_925.x, x_925.y)) + vec4<f32>(x_928.w, x_928.y, x_928.w, x_928.z));
        let x_931 : vec4<f32> = u_xlat3;
        let x_934 : vec4<f32> = x_401.x_MainLightShadowmapSize;
        let x_937 : vec4<f32> = u_xlat10;
        u_xlat10 = ((vec4<f32>(x_931.x, x_931.y, x_931.x, x_931.y) * vec4<f32>(x_934.x, x_934.y, x_934.x, x_934.y)) + vec4<f32>(x_937.x, x_937.w, x_937.z, x_937.w));
        let x_941 : vec4<f32> = u_xlat9;
        let x_943 : vec4<f32> = u_xlat14;
        u_xlat15 = (vec4<f32>(x_941.x, x_941.x, x_941.x, x_941.y) * vec4<f32>(x_943.z, x_943.w, x_943.y, x_943.z));
        let x_947 : vec4<f32> = u_xlat9;
        let x_949 : vec4<f32> = u_xlat14;
        u_xlat16 = (vec4<f32>(x_947.y, x_947.y, x_947.z, x_947.z) * x_949);
        let x_953 : f32 = u_xlat9.z;
        let x_955 : f32 = u_xlat14.y;
        u_xlat68 = (x_953 * x_955);
        let x_958 : vec4<f32> = u_xlat12;
        let x_959 : vec2<f32> = vec2<f32>(x_958.x, x_958.y);
        let x_961 : f32 = u_xlat2.z;
        txVec4 = vec3<f32>(x_959.x, x_959.y, x_961);
        let x_968 : vec3<f32> = txVec4;
        let x_970 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_968.xy, x_968.z);
        u_xlat3.x = x_970;
        let x_973 : vec4<f32> = u_xlat12;
        let x_974 : vec2<f32> = vec2<f32>(x_973.z, x_973.w);
        let x_976 : f32 = u_xlat2.z;
        txVec5 = vec3<f32>(x_974.x, x_974.y, x_976);
        let x_984 : vec3<f32> = txVec5;
        let x_986 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_984.xy, x_984.z);
        u_xlat25 = x_986;
        let x_987 : f32 = u_xlat25;
        let x_989 : f32 = u_xlat15.y;
        u_xlat25 = (x_987 * x_989);
        let x_992 : f32 = u_xlat15.x;
        let x_994 : f32 = u_xlat3.x;
        let x_996 : f32 = u_xlat25;
        u_xlat3.x = ((x_992 * x_994) + x_996);
        let x_1000 : vec2<f32> = u_xlat47;
        let x_1002 : f32 = u_xlat2.z;
        txVec6 = vec3<f32>(x_1000.x, x_1000.y, x_1002);
        let x_1009 : vec3<f32> = txVec6;
        let x_1011 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1009.xy, x_1009.z);
        u_xlat25 = x_1011;
        let x_1013 : f32 = u_xlat15.z;
        let x_1014 : f32 = u_xlat25;
        let x_1017 : f32 = u_xlat3.x;
        u_xlat3.x = ((x_1013 * x_1014) + x_1017);
        let x_1021 : vec4<f32> = u_xlat11;
        let x_1022 : vec2<f32> = vec2<f32>(x_1021.x, x_1021.y);
        let x_1024 : f32 = u_xlat2.z;
        txVec7 = vec3<f32>(x_1022.x, x_1022.y, x_1024);
        let x_1031 : vec3<f32> = txVec7;
        let x_1033 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1031.xy, x_1031.z);
        u_xlat25 = x_1033;
        let x_1035 : f32 = u_xlat15.w;
        let x_1036 : f32 = u_xlat25;
        let x_1039 : f32 = u_xlat3.x;
        u_xlat3.x = ((x_1035 * x_1036) + x_1039);
        let x_1043 : vec4<f32> = u_xlat13;
        let x_1044 : vec2<f32> = vec2<f32>(x_1043.x, x_1043.y);
        let x_1046 : f32 = u_xlat2.z;
        txVec8 = vec3<f32>(x_1044.x, x_1044.y, x_1046);
        let x_1053 : vec3<f32> = txVec8;
        let x_1055 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1053.xy, x_1053.z);
        u_xlat25 = x_1055;
        let x_1057 : f32 = u_xlat16.x;
        let x_1058 : f32 = u_xlat25;
        let x_1061 : f32 = u_xlat3.x;
        u_xlat3.x = ((x_1057 * x_1058) + x_1061);
        let x_1065 : vec4<f32> = u_xlat13;
        let x_1066 : vec2<f32> = vec2<f32>(x_1065.z, x_1065.w);
        let x_1068 : f32 = u_xlat2.z;
        txVec9 = vec3<f32>(x_1066.x, x_1066.y, x_1068);
        let x_1075 : vec3<f32> = txVec9;
        let x_1077 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1075.xy, x_1075.z);
        u_xlat25 = x_1077;
        let x_1079 : f32 = u_xlat16.y;
        let x_1080 : f32 = u_xlat25;
        let x_1083 : f32 = u_xlat3.x;
        u_xlat3.x = ((x_1079 * x_1080) + x_1083);
        let x_1087 : vec4<f32> = u_xlat11;
        let x_1088 : vec2<f32> = vec2<f32>(x_1087.z, x_1087.w);
        let x_1090 : f32 = u_xlat2.z;
        txVec10 = vec3<f32>(x_1088.x, x_1088.y, x_1090);
        let x_1097 : vec3<f32> = txVec10;
        let x_1099 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1097.xy, x_1097.z);
        u_xlat25 = x_1099;
        let x_1101 : f32 = u_xlat16.z;
        let x_1102 : f32 = u_xlat25;
        let x_1105 : f32 = u_xlat3.x;
        u_xlat3.x = ((x_1101 * x_1102) + x_1105);
        let x_1109 : vec4<f32> = u_xlat10;
        let x_1110 : vec2<f32> = vec2<f32>(x_1109.x, x_1109.y);
        let x_1112 : f32 = u_xlat2.z;
        txVec11 = vec3<f32>(x_1110.x, x_1110.y, x_1112);
        let x_1119 : vec3<f32> = txVec11;
        let x_1121 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1119.xy, x_1119.z);
        u_xlat25 = x_1121;
        let x_1123 : f32 = u_xlat16.w;
        let x_1124 : f32 = u_xlat25;
        let x_1127 : f32 = u_xlat3.x;
        u_xlat3.x = ((x_1123 * x_1124) + x_1127);
        let x_1131 : vec4<f32> = u_xlat10;
        let x_1132 : vec2<f32> = vec2<f32>(x_1131.z, x_1131.w);
        let x_1134 : f32 = u_xlat2.z;
        txVec12 = vec3<f32>(x_1132.x, x_1132.y, x_1134);
        let x_1141 : vec3<f32> = txVec12;
        let x_1143 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1141.xy, x_1141.z);
        u_xlat25 = x_1143;
        let x_1144 : f32 = u_xlat68;
        let x_1145 : f32 = u_xlat25;
        let x_1148 : f32 = u_xlat3.x;
        u_xlat67 = ((x_1144 * x_1145) + x_1148);
      } else {
        let x_1151 : vec4<f32> = u_xlat2;
        let x_1154 : vec4<f32> = x_401.x_MainLightShadowmapSize;
        let x_1157 : vec2<f32> = ((vec2<f32>(x_1151.x, x_1151.y) * vec2<f32>(x_1154.z, x_1154.w)) + vec2<f32>(0.5f, 0.5f));
        let x_1158 : vec4<f32> = u_xlat3;
        u_xlat3 = vec4<f32>(x_1157.x, x_1157.y, x_1158.z, x_1158.w);
        let x_1160 : vec4<f32> = u_xlat3;
        let x_1162 : vec2<f32> = floor(vec2<f32>(x_1160.x, x_1160.y));
        let x_1163 : vec4<f32> = u_xlat3;
        u_xlat3 = vec4<f32>(x_1162.x, x_1162.y, x_1163.z, x_1163.w);
        let x_1165 : vec4<f32> = u_xlat2;
        let x_1168 : vec4<f32> = x_401.x_MainLightShadowmapSize;
        let x_1171 : vec4<f32> = u_xlat3;
        u_xlat47 = ((vec2<f32>(x_1165.x, x_1165.y) * vec2<f32>(x_1168.z, x_1168.w)) + -(vec2<f32>(x_1171.x, x_1171.y)));
        let x_1175 : vec2<f32> = u_xlat47;
        u_xlat9 = (vec4<f32>(x_1175.x, x_1175.x, x_1175.y, x_1175.y) + vec4<f32>(0.5f, 1.0f, 0.5f, 1.0f));
        let x_1178 : vec4<f32> = u_xlat9;
        let x_1180 : vec4<f32> = u_xlat9;
        u_xlat10 = (vec4<f32>(x_1178.x, x_1178.x, x_1178.z, x_1178.z) * vec4<f32>(x_1180.x, x_1180.x, x_1180.z, x_1180.z));
        let x_1183 : vec4<f32> = u_xlat10;
        let x_1187 : vec2<f32> = (vec2<f32>(x_1183.y, x_1183.w) * vec2<f32>(0.040816002f, 0.040816002f));
        let x_1188 : vec4<f32> = u_xlat11;
        u_xlat11 = vec4<f32>(x_1188.x, x_1187.x, x_1188.z, x_1187.y);
        let x_1190 : vec4<f32> = u_xlat10;
        let x_1193 : vec2<f32> = u_xlat47;
        let x_1195 : vec2<f32> = ((vec2<f32>(x_1190.x, x_1190.z) * vec2<f32>(0.5f, 0.5f)) + -(x_1193));
        let x_1196 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_1195.x, x_1196.y, x_1195.y, x_1196.w);
        let x_1198 : vec2<f32> = u_xlat47;
        let x_1200 : vec2<f32> = (-(x_1198) + vec2<f32>(1.0f, 1.0f));
        let x_1201 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_1200.x, x_1200.y, x_1201.z, x_1201.w);
        let x_1203 : vec2<f32> = u_xlat47;
        u_xlat54 = min(x_1203, vec2<f32>(0.0f, 0.0f));
        let x_1205 : vec2<f32> = u_xlat54;
        let x_1207 : vec2<f32> = u_xlat54;
        let x_1209 : vec4<f32> = u_xlat10;
        let x_1211 : vec2<f32> = ((-(x_1205) * x_1207) + vec2<f32>(x_1209.x, x_1209.y));
        let x_1212 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_1211.x, x_1211.y, x_1212.z, x_1212.w);
        let x_1214 : vec2<f32> = u_xlat47;
        u_xlat54 = max(x_1214, vec2<f32>(0.0f, 0.0f));
        let x_1217 : vec2<f32> = u_xlat54;
        let x_1219 : vec2<f32> = u_xlat54;
        let x_1221 : vec4<f32> = u_xlat9;
        let x_1223 : vec2<f32> = ((-(x_1217) * x_1219) + vec2<f32>(x_1221.y, x_1221.w));
        let x_1224 : vec3<f32> = u_xlat31;
        u_xlat31 = vec3<f32>(x_1223.x, x_1224.y, x_1223.y);
        let x_1226 : vec4<f32> = u_xlat10;
        let x_1229 : vec2<f32> = (vec2<f32>(x_1226.x, x_1226.y) + vec2<f32>(2.0f, 2.0f));
        let x_1230 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_1229.x, x_1229.y, x_1230.z, x_1230.w);
        let x_1232 : vec3<f32> = u_xlat31;
        let x_1234 : vec2<f32> = (vec2<f32>(x_1232.x, x_1232.z) + vec2<f32>(2.0f, 2.0f));
        let x_1235 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_1235.x, x_1234.x, x_1235.z, x_1234.y);
        let x_1238 : f32 = u_xlat9.y;
        u_xlat12.z = (x_1238 * 0.081632003f);
        let x_1242 : vec4<f32> = u_xlat9;
        let x_1245 : vec3<f32> = (vec3<f32>(x_1242.z, x_1242.x, x_1242.w) * vec3<f32>(0.081632003f, 0.081632003f, 0.081632003f));
        let x_1246 : vec4<f32> = u_xlat13;
        u_xlat13 = vec4<f32>(x_1245.x, x_1245.y, x_1245.z, x_1246.w);
        let x_1248 : vec4<f32> = u_xlat10;
        let x_1251 : vec2<f32> = (vec2<f32>(x_1248.x, x_1248.y) * vec2<f32>(0.081632003f, 0.081632003f));
        let x_1252 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_1251.x, x_1251.y, x_1252.z, x_1252.w);
        let x_1255 : f32 = u_xlat13.y;
        u_xlat12.x = x_1255;
        let x_1257 : vec2<f32> = u_xlat47;
        let x_1264 : vec2<f32> = ((vec2<f32>(x_1257.x, x_1257.x) * vec2<f32>(-0.081632003f, 0.081632003f)) + vec2<f32>(0.163264006f, 0.081632003f));
        let x_1265 : vec4<f32> = u_xlat12;
        u_xlat12 = vec4<f32>(x_1265.x, x_1264.x, x_1265.z, x_1264.y);
        let x_1267 : vec2<f32> = u_xlat47;
        let x_1271 : vec2<f32> = ((vec2<f32>(x_1267.x, x_1267.x) * vec2<f32>(-0.081632003f, 0.081632003f)) + vec2<f32>(0.081632003f, 0.163264006f));
        let x_1272 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_1271.x, x_1272.y, x_1271.y, x_1272.w);
        let x_1275 : f32 = u_xlat9.x;
        u_xlat10.y = x_1275;
        let x_1278 : f32 = u_xlat11.y;
        u_xlat10.w = x_1278;
        let x_1280 : vec4<f32> = u_xlat10;
        let x_1281 : vec4<f32> = u_xlat12;
        u_xlat12 = (x_1280 + x_1281);
        let x_1283 : vec2<f32> = u_xlat47;
        let x_1286 : vec2<f32> = ((vec2<f32>(x_1283.y, x_1283.y) * vec2<f32>(-0.081632003f, 0.081632003f)) + vec2<f32>(0.163264006f, 0.081632003f));
        let x_1287 : vec4<f32> = u_xlat13;
        u_xlat13 = vec4<f32>(x_1287.x, x_1286.x, x_1287.z, x_1286.y);
        let x_1289 : vec2<f32> = u_xlat47;
        let x_1292 : vec2<f32> = ((vec2<f32>(x_1289.y, x_1289.y) * vec2<f32>(-0.081632003f, 0.081632003f)) + vec2<f32>(0.081632003f, 0.163264006f));
        let x_1293 : vec4<f32> = u_xlat11;
        u_xlat11 = vec4<f32>(x_1292.x, x_1293.y, x_1292.y, x_1293.w);
        let x_1296 : f32 = u_xlat9.y;
        u_xlat11.y = x_1296;
        let x_1298 : vec4<f32> = u_xlat11;
        let x_1299 : vec4<f32> = u_xlat13;
        u_xlat9 = (x_1298 + x_1299);
        let x_1301 : vec4<f32> = u_xlat10;
        let x_1302 : vec4<f32> = u_xlat12;
        u_xlat10 = (x_1301 / x_1302);
        let x_1304 : vec4<f32> = u_xlat10;
        u_xlat10 = (x_1304 + vec4<f32>(-3.5f, -1.5f, 0.5f, 2.5f));
        let x_1310 : vec4<f32> = u_xlat11;
        let x_1311 : vec4<f32> = u_xlat9;
        u_xlat11 = (x_1310 / x_1311);
        let x_1313 : vec4<f32> = u_xlat11;
        u_xlat11 = (x_1313 + vec4<f32>(-3.5f, -1.5f, 0.5f, 2.5f));
        let x_1315 : vec4<f32> = u_xlat10;
        let x_1318 : vec4<f32> = x_401.x_MainLightShadowmapSize;
        u_xlat10 = (vec4<f32>(x_1315.w, x_1315.x, x_1315.y, x_1315.z) * vec4<f32>(x_1318.x, x_1318.x, x_1318.x, x_1318.x));
        let x_1321 : vec4<f32> = u_xlat11;
        let x_1324 : vec4<f32> = x_401.x_MainLightShadowmapSize;
        u_xlat11 = (vec4<f32>(x_1321.x, x_1321.w, x_1321.y, x_1321.z) * vec4<f32>(x_1324.y, x_1324.y, x_1324.y, x_1324.y));
        let x_1327 : vec4<f32> = u_xlat10;
        let x_1328 : vec3<f32> = vec3<f32>(x_1327.y, x_1327.z, x_1327.w);
        let x_1329 : vec4<f32> = u_xlat13;
        u_xlat13 = vec4<f32>(x_1328.x, x_1329.y, x_1328.y, x_1328.z);
        let x_1332 : f32 = u_xlat11.x;
        u_xlat13.y = x_1332;
        let x_1334 : vec4<f32> = u_xlat3;
        let x_1337 : vec4<f32> = x_401.x_MainLightShadowmapSize;
        let x_1340 : vec4<f32> = u_xlat13;
        u_xlat14 = ((vec4<f32>(x_1334.x, x_1334.y, x_1334.x, x_1334.y) * vec4<f32>(x_1337.x, x_1337.y, x_1337.x, x_1337.y)) + vec4<f32>(x_1340.x, x_1340.y, x_1340.z, x_1340.y));
        let x_1343 : vec4<f32> = u_xlat3;
        let x_1346 : vec4<f32> = x_401.x_MainLightShadowmapSize;
        let x_1349 : vec4<f32> = u_xlat13;
        u_xlat47 = ((vec2<f32>(x_1343.x, x_1343.y) * vec2<f32>(x_1346.x, x_1346.y)) + vec2<f32>(x_1349.w, x_1349.y));
        let x_1353 : f32 = u_xlat13.y;
        u_xlat10.y = x_1353;
        let x_1356 : f32 = u_xlat11.z;
        u_xlat13.y = x_1356;
        let x_1358 : vec4<f32> = u_xlat3;
        let x_1361 : vec4<f32> = x_401.x_MainLightShadowmapSize;
        let x_1364 : vec4<f32> = u_xlat13;
        u_xlat15 = ((vec4<f32>(x_1358.x, x_1358.y, x_1358.x, x_1358.y) * vec4<f32>(x_1361.x, x_1361.y, x_1361.x, x_1361.y)) + vec4<f32>(x_1364.x, x_1364.y, x_1364.z, x_1364.y));
        let x_1367 : vec4<f32> = u_xlat3;
        let x_1370 : vec4<f32> = x_401.x_MainLightShadowmapSize;
        let x_1373 : vec4<f32> = u_xlat13;
        let x_1375 : vec2<f32> = ((vec2<f32>(x_1367.x, x_1367.y) * vec2<f32>(x_1370.x, x_1370.y)) + vec2<f32>(x_1373.w, x_1373.y));
        let x_1376 : vec4<f32> = u_xlat16;
        u_xlat16 = vec4<f32>(x_1375.x, x_1375.y, x_1376.z, x_1376.w);
        let x_1379 : f32 = u_xlat13.y;
        u_xlat10.z = x_1379;
        let x_1382 : vec4<f32> = u_xlat3;
        let x_1385 : vec4<f32> = x_401.x_MainLightShadowmapSize;
        let x_1388 : vec4<f32> = u_xlat10;
        u_xlat17 = ((vec4<f32>(x_1382.x, x_1382.y, x_1382.x, x_1382.y) * vec4<f32>(x_1385.x, x_1385.y, x_1385.x, x_1385.y)) + vec4<f32>(x_1388.x, x_1388.y, x_1388.x, x_1388.z));
        let x_1392 : f32 = u_xlat11.w;
        u_xlat13.y = x_1392;
        let x_1395 : vec4<f32> = u_xlat3;
        let x_1398 : vec4<f32> = x_401.x_MainLightShadowmapSize;
        let x_1401 : vec4<f32> = u_xlat13;
        u_xlat18 = ((vec4<f32>(x_1395.x, x_1395.y, x_1395.x, x_1395.y) * vec4<f32>(x_1398.x, x_1398.y, x_1398.x, x_1398.y)) + vec4<f32>(x_1401.x, x_1401.y, x_1401.z, x_1401.y));
        let x_1405 : vec4<f32> = u_xlat3;
        let x_1408 : vec4<f32> = x_401.x_MainLightShadowmapSize;
        let x_1411 : vec4<f32> = u_xlat13;
        u_xlat32 = ((vec2<f32>(x_1405.x, x_1405.y) * vec2<f32>(x_1408.x, x_1408.y)) + vec2<f32>(x_1411.w, x_1411.y));
        let x_1415 : f32 = u_xlat13.y;
        u_xlat10.w = x_1415;
        let x_1418 : vec4<f32> = u_xlat3;
        let x_1421 : vec4<f32> = x_401.x_MainLightShadowmapSize;
        let x_1424 : vec4<f32> = u_xlat10;
        u_xlat60 = ((vec2<f32>(x_1418.x, x_1418.y) * vec2<f32>(x_1421.x, x_1421.y)) + vec2<f32>(x_1424.x, x_1424.w));
        let x_1427 : vec4<f32> = u_xlat13;
        let x_1428 : vec3<f32> = vec3<f32>(x_1427.x, x_1427.z, x_1427.w);
        let x_1429 : vec4<f32> = u_xlat11;
        u_xlat11 = vec4<f32>(x_1428.x, x_1429.y, x_1428.y, x_1428.z);
        let x_1431 : vec4<f32> = u_xlat3;
        let x_1434 : vec4<f32> = x_401.x_MainLightShadowmapSize;
        let x_1437 : vec4<f32> = u_xlat11;
        u_xlat13 = ((vec4<f32>(x_1431.x, x_1431.y, x_1431.x, x_1431.y) * vec4<f32>(x_1434.x, x_1434.y, x_1434.x, x_1434.y)) + vec4<f32>(x_1437.x, x_1437.y, x_1437.z, x_1437.y));
        let x_1441 : vec4<f32> = u_xlat3;
        let x_1444 : vec4<f32> = x_401.x_MainLightShadowmapSize;
        let x_1447 : vec4<f32> = u_xlat11;
        u_xlat55 = ((vec2<f32>(x_1441.x, x_1441.y) * vec2<f32>(x_1444.x, x_1444.y)) + vec2<f32>(x_1447.w, x_1447.y));
        let x_1451 : f32 = u_xlat10.x;
        u_xlat11.x = x_1451;
        let x_1453 : vec4<f32> = u_xlat3;
        let x_1456 : vec4<f32> = x_401.x_MainLightShadowmapSize;
        let x_1459 : vec4<f32> = u_xlat11;
        let x_1461 : vec2<f32> = ((vec2<f32>(x_1453.x, x_1453.y) * vec2<f32>(x_1456.x, x_1456.y)) + vec2<f32>(x_1459.x, x_1459.y));
        let x_1462 : vec4<f32> = u_xlat3;
        u_xlat3 = vec4<f32>(x_1461.x, x_1461.y, x_1462.z, x_1462.w);
        let x_1465 : vec4<f32> = u_xlat9;
        let x_1467 : vec4<f32> = u_xlat12;
        u_xlat19 = (vec4<f32>(x_1465.x, x_1465.x, x_1465.x, x_1465.x) * x_1467);
        let x_1470 : vec4<f32> = u_xlat9;
        let x_1472 : vec4<f32> = u_xlat12;
        u_xlat20 = (vec4<f32>(x_1470.y, x_1470.y, x_1470.y, x_1470.y) * x_1472);
        let x_1475 : vec4<f32> = u_xlat9;
        let x_1477 : vec4<f32> = u_xlat12;
        u_xlat21 = (vec4<f32>(x_1475.z, x_1475.z, x_1475.z, x_1475.z) * x_1477);
        let x_1479 : vec4<f32> = u_xlat9;
        let x_1481 : vec4<f32> = u_xlat12;
        u_xlat9 = (vec4<f32>(x_1479.w, x_1479.w, x_1479.w, x_1479.w) * x_1481);
        let x_1484 : vec4<f32> = u_xlat14;
        let x_1485 : vec2<f32> = vec2<f32>(x_1484.x, x_1484.y);
        let x_1487 : f32 = u_xlat2.z;
        txVec13 = vec3<f32>(x_1485.x, x_1485.y, x_1487);
        let x_1494 : vec3<f32> = txVec13;
        let x_1496 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1494.xy, x_1494.z);
        u_xlat68 = x_1496;
        let x_1498 : vec4<f32> = u_xlat14;
        let x_1499 : vec2<f32> = vec2<f32>(x_1498.z, x_1498.w);
        let x_1501 : f32 = u_xlat2.z;
        txVec14 = vec3<f32>(x_1499.x, x_1499.y, x_1501);
        let x_1509 : vec3<f32> = txVec14;
        let x_1511 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1509.xy, x_1509.z);
        u_xlat70 = x_1511;
        let x_1512 : f32 = u_xlat70;
        let x_1514 : f32 = u_xlat19.y;
        u_xlat70 = (x_1512 * x_1514);
        let x_1517 : f32 = u_xlat19.x;
        let x_1518 : f32 = u_xlat68;
        let x_1520 : f32 = u_xlat70;
        u_xlat68 = ((x_1517 * x_1518) + x_1520);
        let x_1523 : vec2<f32> = u_xlat47;
        let x_1525 : f32 = u_xlat2.z;
        txVec15 = vec3<f32>(x_1523.x, x_1523.y, x_1525);
        let x_1532 : vec3<f32> = txVec15;
        let x_1534 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1532.xy, x_1532.z);
        u_xlat47.x = x_1534;
        let x_1537 : f32 = u_xlat19.z;
        let x_1539 : f32 = u_xlat47.x;
        let x_1541 : f32 = u_xlat68;
        u_xlat68 = ((x_1537 * x_1539) + x_1541);
        let x_1544 : vec4<f32> = u_xlat17;
        let x_1545 : vec2<f32> = vec2<f32>(x_1544.x, x_1544.y);
        let x_1547 : f32 = u_xlat2.z;
        txVec16 = vec3<f32>(x_1545.x, x_1545.y, x_1547);
        let x_1554 : vec3<f32> = txVec16;
        let x_1556 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1554.xy, x_1554.z);
        u_xlat47.x = x_1556;
        let x_1559 : f32 = u_xlat19.w;
        let x_1561 : f32 = u_xlat47.x;
        let x_1563 : f32 = u_xlat68;
        u_xlat68 = ((x_1559 * x_1561) + x_1563);
        let x_1566 : vec4<f32> = u_xlat15;
        let x_1567 : vec2<f32> = vec2<f32>(x_1566.x, x_1566.y);
        let x_1569 : f32 = u_xlat2.z;
        txVec17 = vec3<f32>(x_1567.x, x_1567.y, x_1569);
        let x_1576 : vec3<f32> = txVec17;
        let x_1578 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1576.xy, x_1576.z);
        u_xlat47.x = x_1578;
        let x_1581 : f32 = u_xlat20.x;
        let x_1583 : f32 = u_xlat47.x;
        let x_1585 : f32 = u_xlat68;
        u_xlat68 = ((x_1581 * x_1583) + x_1585);
        let x_1588 : vec4<f32> = u_xlat15;
        let x_1589 : vec2<f32> = vec2<f32>(x_1588.z, x_1588.w);
        let x_1591 : f32 = u_xlat2.z;
        txVec18 = vec3<f32>(x_1589.x, x_1589.y, x_1591);
        let x_1598 : vec3<f32> = txVec18;
        let x_1600 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1598.xy, x_1598.z);
        u_xlat47.x = x_1600;
        let x_1603 : f32 = u_xlat20.y;
        let x_1605 : f32 = u_xlat47.x;
        let x_1607 : f32 = u_xlat68;
        u_xlat68 = ((x_1603 * x_1605) + x_1607);
        let x_1610 : vec4<f32> = u_xlat16;
        let x_1611 : vec2<f32> = vec2<f32>(x_1610.x, x_1610.y);
        let x_1613 : f32 = u_xlat2.z;
        txVec19 = vec3<f32>(x_1611.x, x_1611.y, x_1613);
        let x_1620 : vec3<f32> = txVec19;
        let x_1622 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1620.xy, x_1620.z);
        u_xlat47.x = x_1622;
        let x_1625 : f32 = u_xlat20.z;
        let x_1627 : f32 = u_xlat47.x;
        let x_1629 : f32 = u_xlat68;
        u_xlat68 = ((x_1625 * x_1627) + x_1629);
        let x_1632 : vec4<f32> = u_xlat17;
        let x_1633 : vec2<f32> = vec2<f32>(x_1632.z, x_1632.w);
        let x_1635 : f32 = u_xlat2.z;
        txVec20 = vec3<f32>(x_1633.x, x_1633.y, x_1635);
        let x_1642 : vec3<f32> = txVec20;
        let x_1644 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1642.xy, x_1642.z);
        u_xlat47.x = x_1644;
        let x_1647 : f32 = u_xlat20.w;
        let x_1649 : f32 = u_xlat47.x;
        let x_1651 : f32 = u_xlat68;
        u_xlat68 = ((x_1647 * x_1649) + x_1651);
        let x_1654 : vec4<f32> = u_xlat18;
        let x_1655 : vec2<f32> = vec2<f32>(x_1654.x, x_1654.y);
        let x_1657 : f32 = u_xlat2.z;
        txVec21 = vec3<f32>(x_1655.x, x_1655.y, x_1657);
        let x_1664 : vec3<f32> = txVec21;
        let x_1666 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1664.xy, x_1664.z);
        u_xlat47.x = x_1666;
        let x_1669 : f32 = u_xlat21.x;
        let x_1671 : f32 = u_xlat47.x;
        let x_1673 : f32 = u_xlat68;
        u_xlat68 = ((x_1669 * x_1671) + x_1673);
        let x_1676 : vec4<f32> = u_xlat18;
        let x_1677 : vec2<f32> = vec2<f32>(x_1676.z, x_1676.w);
        let x_1679 : f32 = u_xlat2.z;
        txVec22 = vec3<f32>(x_1677.x, x_1677.y, x_1679);
        let x_1686 : vec3<f32> = txVec22;
        let x_1688 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1686.xy, x_1686.z);
        u_xlat47.x = x_1688;
        let x_1691 : f32 = u_xlat21.y;
        let x_1693 : f32 = u_xlat47.x;
        let x_1695 : f32 = u_xlat68;
        u_xlat68 = ((x_1691 * x_1693) + x_1695);
        let x_1698 : vec2<f32> = u_xlat32;
        let x_1700 : f32 = u_xlat2.z;
        txVec23 = vec3<f32>(x_1698.x, x_1698.y, x_1700);
        let x_1707 : vec3<f32> = txVec23;
        let x_1709 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1707.xy, x_1707.z);
        u_xlat47.x = x_1709;
        let x_1712 : f32 = u_xlat21.z;
        let x_1714 : f32 = u_xlat47.x;
        let x_1716 : f32 = u_xlat68;
        u_xlat68 = ((x_1712 * x_1714) + x_1716);
        let x_1719 : vec2<f32> = u_xlat60;
        let x_1721 : f32 = u_xlat2.z;
        txVec24 = vec3<f32>(x_1719.x, x_1719.y, x_1721);
        let x_1728 : vec3<f32> = txVec24;
        let x_1730 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1728.xy, x_1728.z);
        u_xlat47.x = x_1730;
        let x_1733 : f32 = u_xlat21.w;
        let x_1735 : f32 = u_xlat47.x;
        let x_1737 : f32 = u_xlat68;
        u_xlat68 = ((x_1733 * x_1735) + x_1737);
        let x_1740 : vec4<f32> = u_xlat13;
        let x_1741 : vec2<f32> = vec2<f32>(x_1740.x, x_1740.y);
        let x_1743 : f32 = u_xlat2.z;
        txVec25 = vec3<f32>(x_1741.x, x_1741.y, x_1743);
        let x_1750 : vec3<f32> = txVec25;
        let x_1752 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1750.xy, x_1750.z);
        u_xlat47.x = x_1752;
        let x_1755 : f32 = u_xlat9.x;
        let x_1757 : f32 = u_xlat47.x;
        let x_1759 : f32 = u_xlat68;
        u_xlat68 = ((x_1755 * x_1757) + x_1759);
        let x_1762 : vec4<f32> = u_xlat13;
        let x_1763 : vec2<f32> = vec2<f32>(x_1762.z, x_1762.w);
        let x_1765 : f32 = u_xlat2.z;
        txVec26 = vec3<f32>(x_1763.x, x_1763.y, x_1765);
        let x_1772 : vec3<f32> = txVec26;
        let x_1774 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1772.xy, x_1772.z);
        u_xlat47.x = x_1774;
        let x_1777 : f32 = u_xlat9.y;
        let x_1779 : f32 = u_xlat47.x;
        let x_1781 : f32 = u_xlat68;
        u_xlat68 = ((x_1777 * x_1779) + x_1781);
        let x_1784 : vec2<f32> = u_xlat55;
        let x_1786 : f32 = u_xlat2.z;
        txVec27 = vec3<f32>(x_1784.x, x_1784.y, x_1786);
        let x_1793 : vec3<f32> = txVec27;
        let x_1795 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1793.xy, x_1793.z);
        u_xlat47.x = x_1795;
        let x_1798 : f32 = u_xlat9.z;
        let x_1800 : f32 = u_xlat47.x;
        let x_1802 : f32 = u_xlat68;
        u_xlat68 = ((x_1798 * x_1800) + x_1802);
        let x_1805 : vec4<f32> = u_xlat3;
        let x_1806 : vec2<f32> = vec2<f32>(x_1805.x, x_1805.y);
        let x_1808 : f32 = u_xlat2.z;
        txVec28 = vec3<f32>(x_1806.x, x_1806.y, x_1808);
        let x_1815 : vec3<f32> = txVec28;
        let x_1817 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1815.xy, x_1815.z);
        u_xlat3.x = x_1817;
        let x_1820 : f32 = u_xlat9.w;
        let x_1822 : f32 = u_xlat3.x;
        let x_1824 : f32 = u_xlat68;
        u_xlat67 = ((x_1820 * x_1822) + x_1824);
      }
    }
  } else {
    let x_1828 : vec4<f32> = u_xlat2;
    let x_1829 : vec2<f32> = vec2<f32>(x_1828.x, x_1828.y);
    let x_1831 : f32 = u_xlat2.z;
    txVec29 = vec3<f32>(x_1829.x, x_1829.y, x_1831);
    let x_1838 : vec3<f32> = txVec29;
    let x_1840 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1838.xy, x_1838.z);
    u_xlat67 = x_1840;
  }
  let x_1842 : f32 = x_401.x_MainLightShadowParams.x;
  u_xlat68 = (-(x_1842) + 1.0f);
  let x_1845 : f32 = u_xlat67;
  let x_1847 : f32 = x_401.x_MainLightShadowParams.x;
  let x_1849 : f32 = u_xlat68;
  u_xlat67 = ((x_1845 * x_1847) + x_1849);
  let x_1853 : f32 = u_xlat2.z;
  u_xlatb3 = (0.0f >= x_1853);
  let x_1857 : f32 = u_xlat2.z;
  u_xlatb25 = (x_1857 >= 1.0f);
  let x_1859 : bool = u_xlatb25;
  let x_1860 : bool = u_xlatb3;
  u_xlatb3 = (x_1859 | x_1860);
  let x_1862 : bool = u_xlatb3;
  let x_1863 : f32 = u_xlat67;
  u_xlat67 = select(x_1863, 1.0f, x_1862);
  let x_1865 : vec3<f32> = u_xlat1;
  let x_1867 : vec4<f32> = x_160.x_MainLightPosition;
  u_xlat1.x = dot(x_1865, -(vec3<f32>(x_1867.x, x_1867.y, x_1867.z)));
  let x_1873 : f32 = u_xlat1.x;
  u_xlat1.x = clamp(x_1873, 0.0f, 1.0f);
  let x_1877 : f32 = u_xlat67;
  let x_1880 : vec4<f32> = x_160.x_MainLightColor;
  u_xlat23 = (vec3<f32>(x_1877, x_1877, x_1877) * vec3<f32>(x_1880.x, x_1880.y, x_1880.z));
  let x_1883 : vec3<f32> = u_xlat23;
  let x_1884 : vec3<f32> = u_xlat1;
  u_xlat1 = (x_1883 * vec3<f32>(x_1884.x, x_1884.x, x_1884.x));
  let x_1887 : vec3<f32> = u_xlat1;
  let x_1888 : vec4<f32> = u_xlat6;
  u_xlat1 = (x_1887 * vec3<f32>(x_1888.x, x_1888.y, x_1888.z));
  let x_1892 : f32 = x_95.unity_LODFade.x;
  u_xlatb67 = (x_1892 < 0.0f);
  let x_1895 : f32 = x_95.unity_LODFade.x;
  u_xlat25 = (x_1895 + 1.0f);
  let x_1897 : bool = u_xlatb67;
  if (x_1897) {
    let x_1901 : f32 = u_xlat25;
    x_1898 = x_1901;
  } else {
    let x_1904 : f32 = x_95.unity_LODFade.x;
    x_1898 = x_1904;
  }
  let x_1905 : f32 = x_1898;
  u_xlat67 = x_1905;
  let x_1906 : f32 = u_xlat67;
  u_xlatb25 = (0.5f >= x_1906);
  let x_1908 : vec4<f32> = u_xlat4;
  let x_1912 : vec4<f32> = x_160.x_ScreenParams;
  let x_1914 : vec3<f32> = (abs(vec3<f32>(x_1908.x, x_1908.y, x_1908.z)) * vec3<f32>(x_1912.x, x_1912.y, x_1912.x));
  let x_1915 : vec4<f32> = u_xlat4;
  u_xlat4 = vec4<f32>(x_1914.x, x_1914.y, x_1914.z, x_1915.w);
  let x_1920 : vec4<f32> = u_xlat4;
  u_xlatu4 = vec3<u32>(vec3<f32>(x_1920.x, x_1920.y, x_1920.z));
  let x_1925 : u32 = u_xlatu4.z;
  u_xlatu47 = (x_1925 * 1025u);
  let x_1929 : u32 = u_xlatu47;
  u_xlatu69 = (x_1929 >> 6u);
  let x_1933 : u32 = u_xlatu69;
  let x_1934 : u32 = u_xlatu47;
  u_xlati47 = bitcast<i32>((x_1933 ^ x_1934));
  let x_1937 : i32 = u_xlati47;
  u_xlatu47 = (bitcast<u32>(x_1937) * 9u);
  let x_1941 : u32 = u_xlatu47;
  u_xlatu69 = (x_1941 >> 11u);
  let x_1944 : u32 = u_xlatu69;
  let x_1945 : u32 = u_xlatu47;
  u_xlati47 = bitcast<i32>((x_1944 ^ x_1945));
  let x_1948 : i32 = u_xlati47;
  u_xlati47 = (x_1948 * 32769i);
  let x_1951 : i32 = u_xlati47;
  let x_1954 : u32 = u_xlatu4.y;
  u_xlati47 = bitcast<i32>((bitcast<u32>(x_1951) ^ x_1954));
  let x_1957 : i32 = u_xlati47;
  u_xlatu47 = (bitcast<u32>(x_1957) * 1025u);
  let x_1960 : u32 = u_xlatu47;
  u_xlatu69 = (x_1960 >> 6u);
  let x_1962 : u32 = u_xlatu69;
  let x_1963 : u32 = u_xlatu47;
  u_xlati47 = bitcast<i32>((x_1962 ^ x_1963));
  let x_1966 : i32 = u_xlati47;
  u_xlatu47 = (bitcast<u32>(x_1966) * 9u);
  let x_1969 : u32 = u_xlatu47;
  u_xlatu69 = (x_1969 >> 11u);
  let x_1971 : u32 = u_xlatu69;
  let x_1972 : u32 = u_xlatu47;
  u_xlati47 = bitcast<i32>((x_1971 ^ x_1972));
  let x_1975 : i32 = u_xlati47;
  u_xlati47 = (x_1975 * 32769i);
  let x_1977 : i32 = u_xlati47;
  let x_1980 : u32 = u_xlatu4.x;
  u_xlati47 = bitcast<i32>((bitcast<u32>(x_1977) ^ x_1980));
  let x_1983 : i32 = u_xlati47;
  u_xlatu47 = (bitcast<u32>(x_1983) * 1025u);
  let x_1986 : u32 = u_xlatu47;
  u_xlatu69 = (x_1986 >> 6u);
  let x_1988 : u32 = u_xlatu69;
  let x_1989 : u32 = u_xlatu47;
  u_xlati47 = bitcast<i32>((x_1988 ^ x_1989));
  let x_1992 : i32 = u_xlati47;
  u_xlatu47 = (bitcast<u32>(x_1992) * 9u);
  let x_1995 : u32 = u_xlatu47;
  u_xlatu69 = (x_1995 >> 11u);
  let x_1997 : u32 = u_xlatu69;
  let x_1998 : u32 = u_xlatu47;
  u_xlati47 = bitcast<i32>((x_1997 ^ x_1998));
  let x_2001 : i32 = u_xlati47;
  u_xlati47 = (x_2001 * 32769i);
  param = 1065353216i;
  let x_2007 : i32 = u_xlati47;
  param_1 = x_2007;
  param_2 = 0i;
  param_3 = 23i;
  let x_2010 : i32 = int_bitfieldInsert_i1_i1_i1_i1_(&(param), &(param_1), &(param_2), &(param_3));
  u_xlat47.x = bitcast<f32>(x_2010);
  let x_2014 : f32 = u_xlat47.x;
  u_xlat47.x = (x_2014 + -1.0f);
  let x_2019 : f32 = u_xlat47.x;
  u_xlat69 = (-(x_2019) + 1.0f);
  let x_2022 : bool = u_xlatb25;
  if (x_2022) {
    let x_2027 : f32 = u_xlat47.x;
    x_2023 = x_2027;
  } else {
    let x_2029 : f32 = u_xlat69;
    x_2023 = x_2029;
  }
  let x_2030 : f32 = x_2023;
  u_xlat25 = x_2030;
  let x_2031 : f32 = u_xlat67;
  let x_2033 : f32 = u_xlat25;
  u_xlat67 = ((x_2031 * 2.0f) + -(x_2033));
  let x_2036 : f32 = u_xlat67;
  let x_2038 : f32 = u_xlat6.w;
  u_xlat25 = (x_2036 * x_2038);
  let x_2041 : f32 = u_xlat25;
  u_xlatb47 = (x_2041 >= 0.400000006f);
  let x_2044 : bool = u_xlatb47;
  let x_2045 : f32 = u_xlat25;
  u_xlat47.x = select(0.0f, x_2045, x_2044);
  let x_2049 : f32 = u_xlat6.w;
  let x_2050 : f32 = u_xlat67;
  u_xlat67 = ((x_2049 * x_2050) + -0.400000006f);
  let x_2054 : f32 = u_xlat25;
  u_xlat69 = dpdxCoarse(x_2054);
  let x_2056 : f32 = u_xlat25;
  u_xlat25 = dpdyCoarse(x_2056);
  let x_2058 : f32 = u_xlat25;
  let x_2060 : f32 = u_xlat69;
  u_xlat25 = (abs(x_2058) + abs(x_2060));
  let x_2063 : f32 = u_xlat25;
  u_xlat25 = max(x_2063, 0.0001f);
  let x_2066 : f32 = u_xlat67;
  let x_2067 : f32 = u_xlat25;
  u_xlat67 = (x_2066 / x_2067);
  let x_2069 : f32 = u_xlat67;
  u_xlat67 = (x_2069 + 0.5f);
  let x_2071 : f32 = u_xlat67;
  u_xlat67 = clamp(x_2071, 0.0f, 1.0f);
  let x_2074 : f32 = x_160.x_AlphaToMaskAvailable;
  u_xlatb25 = !((x_2074 == 0.0f));
  let x_2076 : bool = u_xlatb25;
  if (x_2076) {
    let x_2080 : f32 = u_xlat67;
    x_2077 = x_2080;
  } else {
    let x_2083 : f32 = u_xlat47.x;
    x_2077 = x_2083;
  }
  let x_2084 : f32 = x_2077;
  u_xlat67 = x_2084;
  let x_2085 : f32 = u_xlat67;
  u_xlat47.x = (x_2085 + -0.0001f);
  let x_2090 : f32 = u_xlat47.x;
  u_xlatb47 = (x_2090 < 0.0f);
  let x_2092 : bool = u_xlatb47;
  if (((select(0i, 1i, x_2092) * -1i) != 0i)) {
    discard;
  }
  let x_2100 : vec3<f32> = u_xlat22;
  let x_2101 : vec3<f32> = u_xlat30;
  u_xlat22 = (x_2100 * vec3<f32>(x_2101.y, x_2101.y, x_2101.y));
  let x_2104 : vec3<f32> = u_xlat30;
  let x_2106 : vec4<f32> = vs_INTERP2;
  let x_2109 : vec3<f32> = u_xlat22;
  u_xlat22 = ((vec3<f32>(x_2104.x, x_2104.x, x_2104.x) * vec3<f32>(x_2106.x, x_2106.y, x_2106.z)) + x_2109);
  let x_2111 : vec3<f32> = u_xlat30;
  let x_2113 : vec3<f32> = vs_INTERP1;
  let x_2115 : vec3<f32> = u_xlat22;
  u_xlat22 = ((vec3<f32>(x_2111.z, x_2111.z, x_2111.z) * x_2113) + x_2115);
  let x_2117 : vec3<f32> = u_xlat22;
  let x_2118 : vec3<f32> = u_xlat22;
  u_xlat47.x = dot(x_2117, x_2118);
  let x_2122 : f32 = u_xlat47.x;
  u_xlat47.x = inverseSqrt(x_2122);
  let x_2125 : vec3<f32> = u_xlat22;
  let x_2126 : vec2<f32> = u_xlat47;
  let x_2128 : vec3<f32> = (x_2125 * vec3<f32>(x_2126.x, x_2126.x, x_2126.x));
  let x_2129 : vec4<f32> = u_xlat4;
  u_xlat4 = vec4<f32>(x_2128.x, x_2128.y, x_2128.z, x_2129.w);
  u_xlat4.w = 1.0f;
  let x_2134 : vec4<f32> = x_95.unity_SHAr;
  let x_2135 : vec4<f32> = u_xlat4;
  u_xlat6.x = dot(x_2134, x_2135);
  let x_2140 : vec4<f32> = x_95.unity_SHAg;
  let x_2141 : vec4<f32> = u_xlat4;
  u_xlat6.y = dot(x_2140, x_2141);
  let x_2146 : vec4<f32> = x_95.unity_SHAb;
  let x_2147 : vec4<f32> = u_xlat4;
  u_xlat6.z = dot(x_2146, x_2147);
  let x_2150 : vec4<f32> = u_xlat4;
  let x_2152 : vec4<f32> = u_xlat4;
  u_xlat9 = (vec4<f32>(x_2150.y, x_2150.z, x_2150.z, x_2150.x) * vec4<f32>(x_2152.x, x_2152.y, x_2152.z, x_2152.z));
  let x_2157 : vec4<f32> = x_95.unity_SHBr;
  let x_2158 : vec4<f32> = u_xlat9;
  u_xlat10.x = dot(x_2157, x_2158);
  let x_2163 : vec4<f32> = x_95.unity_SHBg;
  let x_2164 : vec4<f32> = u_xlat9;
  u_xlat10.y = dot(x_2163, x_2164);
  let x_2168 : vec4<f32> = x_95.unity_SHBb;
  let x_2169 : vec4<f32> = u_xlat9;
  u_xlat10.z = dot(x_2168, x_2169);
  let x_2173 : f32 = u_xlat4.y;
  let x_2175 : f32 = u_xlat4.y;
  u_xlat22.x = (x_2173 * x_2175);
  let x_2179 : f32 = u_xlat4.x;
  let x_2181 : f32 = u_xlat4.x;
  let x_2184 : f32 = u_xlat22.x;
  u_xlat22.x = ((x_2179 * x_2181) + -(x_2184));
  let x_2190 : vec4<f32> = x_95.unity_SHC;
  let x_2192 : vec3<f32> = u_xlat22;
  let x_2195 : vec4<f32> = u_xlat10;
  u_xlat22 = ((vec3<f32>(x_2190.x, x_2190.y, x_2190.z) * vec3<f32>(x_2192.x, x_2192.x, x_2192.x)) + vec3<f32>(x_2195.x, x_2195.y, x_2195.z));
  let x_2198 : vec3<f32> = u_xlat22;
  let x_2199 : vec4<f32> = u_xlat6;
  u_xlat22 = (x_2198 + vec3<f32>(x_2199.x, x_2199.y, x_2199.z));
  let x_2202 : vec3<f32> = u_xlat22;
  u_xlat22 = max(x_2202, vec3<f32>(0.0f, 0.0f, 0.0f));
  let x_2205 : vec4<f32> = x_160.x_ScaledScreenParams;
  let x_2206 : vec2<f32> = vec2<f32>(x_2205.x, x_2205.y);
  u_xlat47 = (vec2<f32>(1.0f, 1.0f) / vec2<f32>(x_2206.x, x_2206.y));
  let x_2211 : vec2<f32> = u_xlat47;
  let x_2212 : vec4<f32> = hlslcc_FragCoord;
  let x_2214 : vec2<f32> = (x_2211 * vec2<f32>(x_2212.x, x_2212.y));
  let x_2215 : vec4<f32> = u_xlat6;
  u_xlat6 = vec4<f32>(x_2214.x, x_2214.y, x_2215.z, x_2215.w);
  let x_2218 : f32 = u_xlat6.y;
  let x_2221 : f32 = x_160.x_ScaleBiasRt.x;
  let x_2224 : f32 = x_160.x_ScaleBiasRt.y;
  u_xlat47.x = ((x_2218 * x_2221) + x_2224);
  let x_2228 : f32 = u_xlat47.x;
  u_xlat6.z = (-(x_2228) + 1.0f);
  let x_2233 : f32 = u_xlat8.x;
  u_xlat8.x = x_2233;
  let x_2236 : f32 = u_xlat8.x;
  u_xlat8.x = clamp(x_2236, 0.0f, 1.0f);
  let x_2239 : f32 = u_xlat67;
  u_xlat67 = x_2239;
  let x_2240 : f32 = u_xlat67;
  u_xlat67 = clamp(x_2240, 0.0f, 1.0f);
  let x_2242 : vec3<f32> = u_xlat7;
  u_xlat7 = (x_2242 * vec3<f32>(0.959999979f, 0.959999979f, 0.959999979f));
  let x_2247 : f32 = u_xlat8.x;
  u_xlat47.x = (-(x_2247) + 1.0f);
  let x_2252 : f32 = u_xlat47.x;
  let x_2254 : f32 = u_xlat47.x;
  u_xlat69 = (x_2252 * x_2254);
  let x_2256 : f32 = u_xlat69;
  u_xlat69 = max(x_2256, 0.0078125f);
  let x_2259 : f32 = u_xlat69;
  let x_2260 : f32 = u_xlat69;
  u_xlat70 = (x_2259 * x_2260);
  let x_2264 : f32 = u_xlat8.x;
  u_xlat71 = (x_2264 + 0.040000021f);
  let x_2267 : f32 = u_xlat71;
  u_xlat71 = min(x_2267, 1.0f);
  let x_2270 : f32 = u_xlat69;
  u_xlat28 = ((x_2270 * 4.0f) + 2.0f);
  let x_2278 : vec4<f32> = u_xlat6;
  let x_2281 : f32 = x_160.x_GlobalMipBias.x;
  let x_2282 : vec4<f32> = textureSampleBias(x_ScreenSpaceOcclusionTexture, sampler_ScreenSpaceOcclusionTexture, vec2<f32>(x_2278.x, x_2278.z), x_2281);
  u_xlat6.x = x_2282.x;
  let x_2287 : f32 = u_xlat6.x;
  u_xlat50 = (x_2287 + -1.0f);
  let x_2290 : f32 = x_160.x_AmbientOcclusionParam.w;
  let x_2291 : f32 = u_xlat50;
  u_xlat50 = ((x_2290 * x_2291) + 1.0f);
  let x_2295 : f32 = u_xlat6.x;
  let x_2297 : f32 = vs_INTERP4.w;
  u_xlat6.x = min(x_2295, x_2297);
  let x_2300 : bool = u_xlatb0;
  if (x_2300) {
    let x_2304 : f32 = x_401.x_MainLightShadowParams.y;
    u_xlatb0 = (x_2304 == 1.0f);
    let x_2306 : bool = u_xlatb0;
    if (x_2306) {
      let x_2309 : vec4<f32> = u_xlat2;
      let x_2312 : vec4<f32> = x_401.x_MainLightShadowOffset0;
      u_xlat8 = (vec4<f32>(x_2309.x, x_2309.y, x_2309.x, x_2309.y) + x_2312);
      let x_2315 : vec4<f32> = u_xlat8;
      let x_2316 : vec2<f32> = vec2<f32>(x_2315.x, x_2315.y);
      let x_2318 : f32 = u_xlat2.z;
      txVec30 = vec3<f32>(x_2316.x, x_2316.y, x_2318);
      let x_2325 : vec3<f32> = txVec30;
      let x_2327 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2325.xy, x_2325.z);
      u_xlat9.x = x_2327;
      let x_2330 : vec4<f32> = u_xlat8;
      let x_2331 : vec2<f32> = vec2<f32>(x_2330.z, x_2330.w);
      let x_2333 : f32 = u_xlat2.z;
      txVec31 = vec3<f32>(x_2331.x, x_2331.y, x_2333);
      let x_2340 : vec3<f32> = txVec31;
      let x_2342 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2340.xy, x_2340.z);
      u_xlat9.y = x_2342;
      let x_2344 : vec4<f32> = u_xlat2;
      let x_2347 : vec4<f32> = x_401.x_MainLightShadowOffset1;
      u_xlat8 = (vec4<f32>(x_2344.x, x_2344.y, x_2344.x, x_2344.y) + x_2347);
      let x_2350 : vec4<f32> = u_xlat8;
      let x_2351 : vec2<f32> = vec2<f32>(x_2350.x, x_2350.y);
      let x_2353 : f32 = u_xlat2.z;
      txVec32 = vec3<f32>(x_2351.x, x_2351.y, x_2353);
      let x_2360 : vec3<f32> = txVec32;
      let x_2362 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2360.xy, x_2360.z);
      u_xlat9.z = x_2362;
      let x_2365 : vec4<f32> = u_xlat8;
      let x_2366 : vec2<f32> = vec2<f32>(x_2365.z, x_2365.w);
      let x_2368 : f32 = u_xlat2.z;
      txVec33 = vec3<f32>(x_2366.x, x_2366.y, x_2368);
      let x_2375 : vec3<f32> = txVec33;
      let x_2377 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2375.xy, x_2375.z);
      u_xlat9.w = x_2377;
      let x_2379 : vec4<f32> = u_xlat9;
      u_xlat0.x = dot(x_2379, vec4<f32>(0.25f, 0.25f, 0.25f, 0.25f));
    } else {
      let x_2385 : f32 = x_401.x_MainLightShadowParams.y;
      u_xlatb72 = (x_2385 == 2.0f);
      let x_2387 : bool = u_xlatb72;
      if (x_2387) {
        let x_2390 : vec4<f32> = u_xlat2;
        let x_2393 : vec4<f32> = x_401.x_MainLightShadowmapSize;
        let x_2396 : vec2<f32> = ((vec2<f32>(x_2390.x, x_2390.y) * vec2<f32>(x_2393.z, x_2393.w)) + vec2<f32>(0.5f, 0.5f));
        let x_2397 : vec4<f32> = u_xlat8;
        u_xlat8 = vec4<f32>(x_2396.x, x_2396.y, x_2397.z, x_2397.w);
        let x_2399 : vec4<f32> = u_xlat8;
        let x_2401 : vec2<f32> = floor(vec2<f32>(x_2399.x, x_2399.y));
        let x_2402 : vec4<f32> = u_xlat8;
        u_xlat8 = vec4<f32>(x_2401.x, x_2401.y, x_2402.z, x_2402.w);
        let x_2405 : vec4<f32> = u_xlat2;
        let x_2408 : vec4<f32> = x_401.x_MainLightShadowmapSize;
        let x_2411 : vec4<f32> = u_xlat8;
        u_xlat52 = ((vec2<f32>(x_2405.x, x_2405.y) * vec2<f32>(x_2408.z, x_2408.w)) + -(vec2<f32>(x_2411.x, x_2411.y)));
        let x_2415 : vec2<f32> = u_xlat52;
        u_xlat9 = (vec4<f32>(x_2415.x, x_2415.x, x_2415.y, x_2415.y) + vec4<f32>(0.5f, 1.0f, 0.5f, 1.0f));
        let x_2418 : vec4<f32> = u_xlat9;
        let x_2420 : vec4<f32> = u_xlat9;
        u_xlat10 = (vec4<f32>(x_2418.x, x_2418.x, x_2418.z, x_2418.z) * vec4<f32>(x_2420.x, x_2420.x, x_2420.z, x_2420.z));
        let x_2423 : vec4<f32> = u_xlat10;
        let x_2425 : vec2<f32> = (vec2<f32>(x_2423.y, x_2423.w) * vec2<f32>(0.079999998f, 0.079999998f));
        let x_2426 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_2425.x, x_2426.y, x_2425.y, x_2426.w);
        let x_2428 : vec4<f32> = u_xlat10;
        let x_2431 : vec2<f32> = u_xlat52;
        let x_2433 : vec2<f32> = ((vec2<f32>(x_2428.x, x_2428.z) * vec2<f32>(0.5f, 0.5f)) + -(x_2431));
        let x_2434 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_2433.x, x_2433.y, x_2434.z, x_2434.w);
        let x_2436 : vec2<f32> = u_xlat52;
        u_xlat54 = (-(x_2436) + vec2<f32>(1.0f, 1.0f));
        let x_2439 : vec2<f32> = u_xlat52;
        let x_2440 : vec2<f32> = min(x_2439, vec2<f32>(0.0f, 0.0f));
        let x_2441 : vec4<f32> = u_xlat11;
        u_xlat11 = vec4<f32>(x_2440.x, x_2440.y, x_2441.z, x_2441.w);
        let x_2443 : vec4<f32> = u_xlat11;
        let x_2446 : vec4<f32> = u_xlat11;
        let x_2449 : vec2<f32> = u_xlat54;
        let x_2450 : vec2<f32> = ((-(vec2<f32>(x_2443.x, x_2443.y)) * vec2<f32>(x_2446.x, x_2446.y)) + x_2449);
        let x_2451 : vec4<f32> = u_xlat11;
        u_xlat11 = vec4<f32>(x_2450.x, x_2450.y, x_2451.z, x_2451.w);
        let x_2453 : vec2<f32> = u_xlat52;
        u_xlat52 = max(x_2453, vec2<f32>(0.0f, 0.0f));
        let x_2455 : vec2<f32> = u_xlat52;
        let x_2457 : vec2<f32> = u_xlat52;
        let x_2459 : vec4<f32> = u_xlat9;
        u_xlat52 = ((-(x_2455) * x_2457) + vec2<f32>(x_2459.y, x_2459.w));
        let x_2462 : vec4<f32> = u_xlat11;
        let x_2464 : vec2<f32> = (vec2<f32>(x_2462.x, x_2462.y) + vec2<f32>(1.0f, 1.0f));
        let x_2465 : vec4<f32> = u_xlat11;
        u_xlat11 = vec4<f32>(x_2464.x, x_2464.y, x_2465.z, x_2465.w);
        let x_2467 : vec2<f32> = u_xlat52;
        u_xlat52 = (x_2467 + vec2<f32>(1.0f, 1.0f));
        let x_2469 : vec4<f32> = u_xlat10;
        let x_2471 : vec2<f32> = (vec2<f32>(x_2469.x, x_2469.y) * vec2<f32>(0.159999996f, 0.159999996f));
        let x_2472 : vec4<f32> = u_xlat12;
        u_xlat12 = vec4<f32>(x_2471.x, x_2471.y, x_2472.z, x_2472.w);
        let x_2474 : vec2<f32> = u_xlat54;
        let x_2475 : vec2<f32> = (x_2474 * vec2<f32>(0.159999996f, 0.159999996f));
        let x_2476 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_2475.x, x_2475.y, x_2476.z, x_2476.w);
        let x_2478 : vec4<f32> = u_xlat11;
        let x_2480 : vec2<f32> = (vec2<f32>(x_2478.x, x_2478.y) * vec2<f32>(0.159999996f, 0.159999996f));
        let x_2481 : vec4<f32> = u_xlat11;
        u_xlat11 = vec4<f32>(x_2480.x, x_2480.y, x_2481.z, x_2481.w);
        let x_2483 : vec2<f32> = u_xlat52;
        let x_2484 : vec2<f32> = (x_2483 * vec2<f32>(0.159999996f, 0.159999996f));
        let x_2485 : vec4<f32> = u_xlat13;
        u_xlat13 = vec4<f32>(x_2484.x, x_2484.y, x_2485.z, x_2485.w);
        let x_2487 : vec4<f32> = u_xlat9;
        u_xlat52 = (vec2<f32>(x_2487.y, x_2487.w) * vec2<f32>(0.159999996f, 0.159999996f));
        let x_2491 : f32 = u_xlat11.x;
        u_xlat12.z = x_2491;
        let x_2494 : f32 = u_xlat52.x;
        u_xlat12.w = x_2494;
        let x_2497 : f32 = u_xlat13.x;
        u_xlat10.z = x_2497;
        let x_2500 : f32 = u_xlat9.x;
        u_xlat10.w = x_2500;
        let x_2502 : vec4<f32> = u_xlat10;
        let x_2504 : vec4<f32> = u_xlat12;
        u_xlat14 = (vec4<f32>(x_2502.z, x_2502.w, x_2502.x, x_2502.z) + vec4<f32>(x_2504.z, x_2504.w, x_2504.x, x_2504.z));
        let x_2508 : f32 = u_xlat12.y;
        u_xlat11.z = x_2508;
        let x_2511 : f32 = u_xlat52.y;
        u_xlat11.w = x_2511;
        let x_2514 : f32 = u_xlat10.y;
        u_xlat13.z = x_2514;
        let x_2517 : f32 = u_xlat9.z;
        u_xlat13.w = x_2517;
        let x_2519 : vec4<f32> = u_xlat11;
        let x_2521 : vec4<f32> = u_xlat13;
        let x_2523 : vec3<f32> = (vec3<f32>(x_2519.z, x_2519.y, x_2519.w) + vec3<f32>(x_2521.z, x_2521.y, x_2521.w));
        let x_2524 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_2523.x, x_2523.y, x_2523.z, x_2524.w);
        let x_2526 : vec4<f32> = u_xlat10;
        let x_2528 : vec4<f32> = u_xlat14;
        let x_2530 : vec3<f32> = (vec3<f32>(x_2526.x, x_2526.z, x_2526.w) / vec3<f32>(x_2528.z, x_2528.w, x_2528.y));
        let x_2531 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_2530.x, x_2530.y, x_2530.z, x_2531.w);
        let x_2533 : vec4<f32> = u_xlat10;
        let x_2535 : vec3<f32> = (vec3<f32>(x_2533.x, x_2533.y, x_2533.z) + vec3<f32>(-2.5f, -0.5f, 1.5f));
        let x_2536 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_2535.x, x_2535.y, x_2535.z, x_2536.w);
        let x_2538 : vec4<f32> = u_xlat13;
        let x_2540 : vec4<f32> = u_xlat9;
        let x_2542 : vec3<f32> = (vec3<f32>(x_2538.z, x_2538.y, x_2538.w) / vec3<f32>(x_2540.x, x_2540.y, x_2540.z));
        let x_2543 : vec4<f32> = u_xlat11;
        u_xlat11 = vec4<f32>(x_2542.x, x_2542.y, x_2542.z, x_2543.w);
        let x_2545 : vec4<f32> = u_xlat11;
        let x_2547 : vec3<f32> = (vec3<f32>(x_2545.x, x_2545.y, x_2545.z) + vec3<f32>(-2.5f, -0.5f, 1.5f));
        let x_2548 : vec4<f32> = u_xlat11;
        u_xlat11 = vec4<f32>(x_2547.x, x_2547.y, x_2547.z, x_2548.w);
        let x_2550 : vec4<f32> = u_xlat10;
        let x_2553 : vec4<f32> = x_401.x_MainLightShadowmapSize;
        let x_2555 : vec3<f32> = (vec3<f32>(x_2550.y, x_2550.x, x_2550.z) * vec3<f32>(x_2553.x, x_2553.x, x_2553.x));
        let x_2556 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_2555.x, x_2555.y, x_2555.z, x_2556.w);
        let x_2558 : vec4<f32> = u_xlat11;
        let x_2561 : vec4<f32> = x_401.x_MainLightShadowmapSize;
        let x_2563 : vec3<f32> = (vec3<f32>(x_2558.x, x_2558.y, x_2558.z) * vec3<f32>(x_2561.y, x_2561.y, x_2561.y));
        let x_2564 : vec4<f32> = u_xlat11;
        u_xlat11 = vec4<f32>(x_2563.x, x_2563.y, x_2563.z, x_2564.w);
        let x_2567 : f32 = u_xlat11.x;
        u_xlat10.w = x_2567;
        let x_2569 : vec4<f32> = u_xlat8;
        let x_2572 : vec4<f32> = x_401.x_MainLightShadowmapSize;
        let x_2575 : vec4<f32> = u_xlat10;
        u_xlat12 = ((vec4<f32>(x_2569.x, x_2569.y, x_2569.x, x_2569.y) * vec4<f32>(x_2572.x, x_2572.y, x_2572.x, x_2572.y)) + vec4<f32>(x_2575.y, x_2575.w, x_2575.x, x_2575.w));
        let x_2578 : vec4<f32> = u_xlat8;
        let x_2581 : vec4<f32> = x_401.x_MainLightShadowmapSize;
        let x_2584 : vec4<f32> = u_xlat10;
        u_xlat52 = ((vec2<f32>(x_2578.x, x_2578.y) * vec2<f32>(x_2581.x, x_2581.y)) + vec2<f32>(x_2584.z, x_2584.w));
        let x_2588 : f32 = u_xlat10.y;
        u_xlat11.w = x_2588;
        let x_2590 : vec4<f32> = u_xlat11;
        let x_2591 : vec2<f32> = vec2<f32>(x_2590.y, x_2590.z);
        let x_2592 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_2592.x, x_2591.x, x_2592.z, x_2591.y);
        let x_2594 : vec4<f32> = u_xlat8;
        let x_2597 : vec4<f32> = x_401.x_MainLightShadowmapSize;
        let x_2600 : vec4<f32> = u_xlat10;
        u_xlat13 = ((vec4<f32>(x_2594.x, x_2594.y, x_2594.x, x_2594.y) * vec4<f32>(x_2597.x, x_2597.y, x_2597.x, x_2597.y)) + vec4<f32>(x_2600.x, x_2600.y, x_2600.z, x_2600.y));
        let x_2603 : vec4<f32> = u_xlat8;
        let x_2606 : vec4<f32> = x_401.x_MainLightShadowmapSize;
        let x_2609 : vec4<f32> = u_xlat11;
        u_xlat11 = ((vec4<f32>(x_2603.x, x_2603.y, x_2603.x, x_2603.y) * vec4<f32>(x_2606.x, x_2606.y, x_2606.x, x_2606.y)) + vec4<f32>(x_2609.w, x_2609.y, x_2609.w, x_2609.z));
        let x_2612 : vec4<f32> = u_xlat8;
        let x_2615 : vec4<f32> = x_401.x_MainLightShadowmapSize;
        let x_2618 : vec4<f32> = u_xlat10;
        u_xlat10 = ((vec4<f32>(x_2612.x, x_2612.y, x_2612.x, x_2612.y) * vec4<f32>(x_2615.x, x_2615.y, x_2615.x, x_2615.y)) + vec4<f32>(x_2618.x, x_2618.w, x_2618.z, x_2618.w));
        let x_2621 : vec4<f32> = u_xlat9;
        let x_2623 : vec4<f32> = u_xlat14;
        u_xlat15 = (vec4<f32>(x_2621.x, x_2621.x, x_2621.x, x_2621.y) * vec4<f32>(x_2623.z, x_2623.w, x_2623.y, x_2623.z));
        let x_2626 : vec4<f32> = u_xlat9;
        let x_2628 : vec4<f32> = u_xlat14;
        u_xlat16 = (vec4<f32>(x_2626.y, x_2626.y, x_2626.z, x_2626.z) * x_2628);
        let x_2632 : f32 = u_xlat9.z;
        let x_2634 : f32 = u_xlat14.y;
        u_xlat72 = (x_2632 * x_2634);
        let x_2637 : vec4<f32> = u_xlat12;
        let x_2638 : vec2<f32> = vec2<f32>(x_2637.x, x_2637.y);
        let x_2640 : f32 = u_xlat2.z;
        txVec34 = vec3<f32>(x_2638.x, x_2638.y, x_2640);
        let x_2648 : vec3<f32> = txVec34;
        let x_2650 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2648.xy, x_2648.z);
        u_xlat73 = x_2650;
        let x_2652 : vec4<f32> = u_xlat12;
        let x_2653 : vec2<f32> = vec2<f32>(x_2652.z, x_2652.w);
        let x_2655 : f32 = u_xlat2.z;
        txVec35 = vec3<f32>(x_2653.x, x_2653.y, x_2655);
        let x_2662 : vec3<f32> = txVec35;
        let x_2664 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2662.xy, x_2662.z);
        u_xlat8.x = x_2664;
        let x_2667 : f32 = u_xlat8.x;
        let x_2669 : f32 = u_xlat15.y;
        u_xlat8.x = (x_2667 * x_2669);
        let x_2673 : f32 = u_xlat15.x;
        let x_2674 : f32 = u_xlat73;
        let x_2677 : f32 = u_xlat8.x;
        u_xlat73 = ((x_2673 * x_2674) + x_2677);
        let x_2680 : vec2<f32> = u_xlat52;
        let x_2682 : f32 = u_xlat2.z;
        txVec36 = vec3<f32>(x_2680.x, x_2680.y, x_2682);
        let x_2689 : vec3<f32> = txVec36;
        let x_2691 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2689.xy, x_2689.z);
        u_xlat8.x = x_2691;
        let x_2694 : f32 = u_xlat15.z;
        let x_2696 : f32 = u_xlat8.x;
        let x_2698 : f32 = u_xlat73;
        u_xlat73 = ((x_2694 * x_2696) + x_2698);
        let x_2701 : vec4<f32> = u_xlat11;
        let x_2702 : vec2<f32> = vec2<f32>(x_2701.x, x_2701.y);
        let x_2704 : f32 = u_xlat2.z;
        txVec37 = vec3<f32>(x_2702.x, x_2702.y, x_2704);
        let x_2711 : vec3<f32> = txVec37;
        let x_2713 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2711.xy, x_2711.z);
        u_xlat8.x = x_2713;
        let x_2716 : f32 = u_xlat15.w;
        let x_2718 : f32 = u_xlat8.x;
        let x_2720 : f32 = u_xlat73;
        u_xlat73 = ((x_2716 * x_2718) + x_2720);
        let x_2723 : vec4<f32> = u_xlat13;
        let x_2724 : vec2<f32> = vec2<f32>(x_2723.x, x_2723.y);
        let x_2726 : f32 = u_xlat2.z;
        txVec38 = vec3<f32>(x_2724.x, x_2724.y, x_2726);
        let x_2733 : vec3<f32> = txVec38;
        let x_2735 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2733.xy, x_2733.z);
        u_xlat8.x = x_2735;
        let x_2738 : f32 = u_xlat16.x;
        let x_2740 : f32 = u_xlat8.x;
        let x_2742 : f32 = u_xlat73;
        u_xlat73 = ((x_2738 * x_2740) + x_2742);
        let x_2745 : vec4<f32> = u_xlat13;
        let x_2746 : vec2<f32> = vec2<f32>(x_2745.z, x_2745.w);
        let x_2748 : f32 = u_xlat2.z;
        txVec39 = vec3<f32>(x_2746.x, x_2746.y, x_2748);
        let x_2755 : vec3<f32> = txVec39;
        let x_2757 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2755.xy, x_2755.z);
        u_xlat8.x = x_2757;
        let x_2760 : f32 = u_xlat16.y;
        let x_2762 : f32 = u_xlat8.x;
        let x_2764 : f32 = u_xlat73;
        u_xlat73 = ((x_2760 * x_2762) + x_2764);
        let x_2767 : vec4<f32> = u_xlat11;
        let x_2768 : vec2<f32> = vec2<f32>(x_2767.z, x_2767.w);
        let x_2770 : f32 = u_xlat2.z;
        txVec40 = vec3<f32>(x_2768.x, x_2768.y, x_2770);
        let x_2777 : vec3<f32> = txVec40;
        let x_2779 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2777.xy, x_2777.z);
        u_xlat8.x = x_2779;
        let x_2782 : f32 = u_xlat16.z;
        let x_2784 : f32 = u_xlat8.x;
        let x_2786 : f32 = u_xlat73;
        u_xlat73 = ((x_2782 * x_2784) + x_2786);
        let x_2789 : vec4<f32> = u_xlat10;
        let x_2790 : vec2<f32> = vec2<f32>(x_2789.x, x_2789.y);
        let x_2792 : f32 = u_xlat2.z;
        txVec41 = vec3<f32>(x_2790.x, x_2790.y, x_2792);
        let x_2799 : vec3<f32> = txVec41;
        let x_2801 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2799.xy, x_2799.z);
        u_xlat8.x = x_2801;
        let x_2804 : f32 = u_xlat16.w;
        let x_2806 : f32 = u_xlat8.x;
        let x_2808 : f32 = u_xlat73;
        u_xlat73 = ((x_2804 * x_2806) + x_2808);
        let x_2811 : vec4<f32> = u_xlat10;
        let x_2812 : vec2<f32> = vec2<f32>(x_2811.z, x_2811.w);
        let x_2814 : f32 = u_xlat2.z;
        txVec42 = vec3<f32>(x_2812.x, x_2812.y, x_2814);
        let x_2821 : vec3<f32> = txVec42;
        let x_2823 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2821.xy, x_2821.z);
        u_xlat8.x = x_2823;
        let x_2825 : f32 = u_xlat72;
        let x_2827 : f32 = u_xlat8.x;
        let x_2829 : f32 = u_xlat73;
        u_xlat0.x = ((x_2825 * x_2827) + x_2829);
      } else {
        let x_2833 : vec4<f32> = u_xlat2;
        let x_2836 : vec4<f32> = x_401.x_MainLightShadowmapSize;
        let x_2839 : vec2<f32> = ((vec2<f32>(x_2833.x, x_2833.y) * vec2<f32>(x_2836.z, x_2836.w)) + vec2<f32>(0.5f, 0.5f));
        let x_2840 : vec4<f32> = u_xlat8;
        u_xlat8 = vec4<f32>(x_2839.x, x_2839.y, x_2840.z, x_2840.w);
        let x_2842 : vec4<f32> = u_xlat8;
        let x_2844 : vec2<f32> = floor(vec2<f32>(x_2842.x, x_2842.y));
        let x_2845 : vec4<f32> = u_xlat8;
        u_xlat8 = vec4<f32>(x_2844.x, x_2844.y, x_2845.z, x_2845.w);
        let x_2847 : vec4<f32> = u_xlat2;
        let x_2850 : vec4<f32> = x_401.x_MainLightShadowmapSize;
        let x_2853 : vec4<f32> = u_xlat8;
        u_xlat52 = ((vec2<f32>(x_2847.x, x_2847.y) * vec2<f32>(x_2850.z, x_2850.w)) + -(vec2<f32>(x_2853.x, x_2853.y)));
        let x_2857 : vec2<f32> = u_xlat52;
        u_xlat9 = (vec4<f32>(x_2857.x, x_2857.x, x_2857.y, x_2857.y) + vec4<f32>(0.5f, 1.0f, 0.5f, 1.0f));
        let x_2860 : vec4<f32> = u_xlat9;
        let x_2862 : vec4<f32> = u_xlat9;
        u_xlat10 = (vec4<f32>(x_2860.x, x_2860.x, x_2860.z, x_2860.z) * vec4<f32>(x_2862.x, x_2862.x, x_2862.z, x_2862.z));
        let x_2865 : vec4<f32> = u_xlat10;
        let x_2867 : vec2<f32> = (vec2<f32>(x_2865.y, x_2865.w) * vec2<f32>(0.040816002f, 0.040816002f));
        let x_2868 : vec4<f32> = u_xlat11;
        u_xlat11 = vec4<f32>(x_2868.x, x_2867.x, x_2868.z, x_2867.y);
        let x_2870 : vec4<f32> = u_xlat10;
        let x_2873 : vec2<f32> = u_xlat52;
        let x_2875 : vec2<f32> = ((vec2<f32>(x_2870.x, x_2870.z) * vec2<f32>(0.5f, 0.5f)) + -(x_2873));
        let x_2876 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_2875.x, x_2876.y, x_2875.y, x_2876.w);
        let x_2878 : vec2<f32> = u_xlat52;
        let x_2880 : vec2<f32> = (-(x_2878) + vec2<f32>(1.0f, 1.0f));
        let x_2881 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_2880.x, x_2880.y, x_2881.z, x_2881.w);
        let x_2883 : vec2<f32> = u_xlat52;
        u_xlat54 = min(x_2883, vec2<f32>(0.0f, 0.0f));
        let x_2885 : vec2<f32> = u_xlat54;
        let x_2887 : vec2<f32> = u_xlat54;
        let x_2889 : vec4<f32> = u_xlat10;
        let x_2891 : vec2<f32> = ((-(x_2885) * x_2887) + vec2<f32>(x_2889.x, x_2889.y));
        let x_2892 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_2891.x, x_2891.y, x_2892.z, x_2892.w);
        let x_2894 : vec2<f32> = u_xlat52;
        u_xlat54 = max(x_2894, vec2<f32>(0.0f, 0.0f));
        let x_2896 : vec2<f32> = u_xlat54;
        let x_2898 : vec2<f32> = u_xlat54;
        let x_2900 : vec4<f32> = u_xlat9;
        let x_2902 : vec2<f32> = ((-(x_2896) * x_2898) + vec2<f32>(x_2900.y, x_2900.w));
        let x_2903 : vec3<f32> = u_xlat31;
        u_xlat31 = vec3<f32>(x_2902.x, x_2903.y, x_2902.y);
        let x_2905 : vec4<f32> = u_xlat10;
        let x_2907 : vec2<f32> = (vec2<f32>(x_2905.x, x_2905.y) + vec2<f32>(2.0f, 2.0f));
        let x_2908 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_2907.x, x_2907.y, x_2908.z, x_2908.w);
        let x_2910 : vec3<f32> = u_xlat31;
        let x_2912 : vec2<f32> = (vec2<f32>(x_2910.x, x_2910.z) + vec2<f32>(2.0f, 2.0f));
        let x_2913 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_2913.x, x_2912.x, x_2913.z, x_2912.y);
        let x_2916 : f32 = u_xlat9.y;
        u_xlat12.z = (x_2916 * 0.081632003f);
        let x_2919 : vec4<f32> = u_xlat9;
        let x_2921 : vec3<f32> = (vec3<f32>(x_2919.z, x_2919.x, x_2919.w) * vec3<f32>(0.081632003f, 0.081632003f, 0.081632003f));
        let x_2922 : vec4<f32> = u_xlat13;
        u_xlat13 = vec4<f32>(x_2921.x, x_2921.y, x_2921.z, x_2922.w);
        let x_2924 : vec4<f32> = u_xlat10;
        let x_2926 : vec2<f32> = (vec2<f32>(x_2924.x, x_2924.y) * vec2<f32>(0.081632003f, 0.081632003f));
        let x_2927 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_2926.x, x_2926.y, x_2927.z, x_2927.w);
        let x_2930 : f32 = u_xlat13.y;
        u_xlat12.x = x_2930;
        let x_2932 : vec2<f32> = u_xlat52;
        let x_2935 : vec2<f32> = ((vec2<f32>(x_2932.x, x_2932.x) * vec2<f32>(-0.081632003f, 0.081632003f)) + vec2<f32>(0.163264006f, 0.081632003f));
        let x_2936 : vec4<f32> = u_xlat12;
        u_xlat12 = vec4<f32>(x_2936.x, x_2935.x, x_2936.z, x_2935.y);
        let x_2938 : vec2<f32> = u_xlat52;
        let x_2941 : vec2<f32> = ((vec2<f32>(x_2938.x, x_2938.x) * vec2<f32>(-0.081632003f, 0.081632003f)) + vec2<f32>(0.081632003f, 0.163264006f));
        let x_2942 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_2941.x, x_2942.y, x_2941.y, x_2942.w);
        let x_2945 : f32 = u_xlat9.x;
        u_xlat10.y = x_2945;
        let x_2948 : f32 = u_xlat11.y;
        u_xlat10.w = x_2948;
        let x_2950 : vec4<f32> = u_xlat10;
        let x_2951 : vec4<f32> = u_xlat12;
        u_xlat12 = (x_2950 + x_2951);
        let x_2953 : vec2<f32> = u_xlat52;
        let x_2956 : vec2<f32> = ((vec2<f32>(x_2953.y, x_2953.y) * vec2<f32>(-0.081632003f, 0.081632003f)) + vec2<f32>(0.163264006f, 0.081632003f));
        let x_2957 : vec4<f32> = u_xlat13;
        u_xlat13 = vec4<f32>(x_2957.x, x_2956.x, x_2957.z, x_2956.y);
        let x_2959 : vec2<f32> = u_xlat52;
        let x_2962 : vec2<f32> = ((vec2<f32>(x_2959.y, x_2959.y) * vec2<f32>(-0.081632003f, 0.081632003f)) + vec2<f32>(0.081632003f, 0.163264006f));
        let x_2963 : vec4<f32> = u_xlat11;
        u_xlat11 = vec4<f32>(x_2962.x, x_2963.y, x_2962.y, x_2963.w);
        let x_2966 : f32 = u_xlat9.y;
        u_xlat11.y = x_2966;
        let x_2968 : vec4<f32> = u_xlat11;
        let x_2969 : vec4<f32> = u_xlat13;
        u_xlat9 = (x_2968 + x_2969);
        let x_2971 : vec4<f32> = u_xlat10;
        let x_2972 : vec4<f32> = u_xlat12;
        u_xlat10 = (x_2971 / x_2972);
        let x_2974 : vec4<f32> = u_xlat10;
        u_xlat10 = (x_2974 + vec4<f32>(-3.5f, -1.5f, 0.5f, 2.5f));
        let x_2976 : vec4<f32> = u_xlat11;
        let x_2977 : vec4<f32> = u_xlat9;
        u_xlat11 = (x_2976 / x_2977);
        let x_2979 : vec4<f32> = u_xlat11;
        u_xlat11 = (x_2979 + vec4<f32>(-3.5f, -1.5f, 0.5f, 2.5f));
        let x_2981 : vec4<f32> = u_xlat10;
        let x_2984 : vec4<f32> = x_401.x_MainLightShadowmapSize;
        u_xlat10 = (vec4<f32>(x_2981.w, x_2981.x, x_2981.y, x_2981.z) * vec4<f32>(x_2984.x, x_2984.x, x_2984.x, x_2984.x));
        let x_2987 : vec4<f32> = u_xlat11;
        let x_2990 : vec4<f32> = x_401.x_MainLightShadowmapSize;
        u_xlat11 = (vec4<f32>(x_2987.x, x_2987.w, x_2987.y, x_2987.z) * vec4<f32>(x_2990.y, x_2990.y, x_2990.y, x_2990.y));
        let x_2993 : vec4<f32> = u_xlat10;
        let x_2994 : vec3<f32> = vec3<f32>(x_2993.y, x_2993.z, x_2993.w);
        let x_2995 : vec4<f32> = u_xlat13;
        u_xlat13 = vec4<f32>(x_2994.x, x_2995.y, x_2994.y, x_2994.z);
        let x_2998 : f32 = u_xlat11.x;
        u_xlat13.y = x_2998;
        let x_3000 : vec4<f32> = u_xlat8;
        let x_3003 : vec4<f32> = x_401.x_MainLightShadowmapSize;
        let x_3006 : vec4<f32> = u_xlat13;
        u_xlat14 = ((vec4<f32>(x_3000.x, x_3000.y, x_3000.x, x_3000.y) * vec4<f32>(x_3003.x, x_3003.y, x_3003.x, x_3003.y)) + vec4<f32>(x_3006.x, x_3006.y, x_3006.z, x_3006.y));
        let x_3009 : vec4<f32> = u_xlat8;
        let x_3012 : vec4<f32> = x_401.x_MainLightShadowmapSize;
        let x_3015 : vec4<f32> = u_xlat13;
        u_xlat52 = ((vec2<f32>(x_3009.x, x_3009.y) * vec2<f32>(x_3012.x, x_3012.y)) + vec2<f32>(x_3015.w, x_3015.y));
        let x_3019 : f32 = u_xlat13.y;
        u_xlat10.y = x_3019;
        let x_3022 : f32 = u_xlat11.z;
        u_xlat13.y = x_3022;
        let x_3024 : vec4<f32> = u_xlat8;
        let x_3027 : vec4<f32> = x_401.x_MainLightShadowmapSize;
        let x_3030 : vec4<f32> = u_xlat13;
        u_xlat15 = ((vec4<f32>(x_3024.x, x_3024.y, x_3024.x, x_3024.y) * vec4<f32>(x_3027.x, x_3027.y, x_3027.x, x_3027.y)) + vec4<f32>(x_3030.x, x_3030.y, x_3030.z, x_3030.y));
        let x_3033 : vec4<f32> = u_xlat8;
        let x_3036 : vec4<f32> = x_401.x_MainLightShadowmapSize;
        let x_3039 : vec4<f32> = u_xlat13;
        let x_3041 : vec2<f32> = ((vec2<f32>(x_3033.x, x_3033.y) * vec2<f32>(x_3036.x, x_3036.y)) + vec2<f32>(x_3039.w, x_3039.y));
        let x_3042 : vec4<f32> = u_xlat16;
        u_xlat16 = vec4<f32>(x_3041.x, x_3041.y, x_3042.z, x_3042.w);
        let x_3045 : f32 = u_xlat13.y;
        u_xlat10.z = x_3045;
        let x_3047 : vec4<f32> = u_xlat8;
        let x_3050 : vec4<f32> = x_401.x_MainLightShadowmapSize;
        let x_3053 : vec4<f32> = u_xlat10;
        u_xlat17 = ((vec4<f32>(x_3047.x, x_3047.y, x_3047.x, x_3047.y) * vec4<f32>(x_3050.x, x_3050.y, x_3050.x, x_3050.y)) + vec4<f32>(x_3053.x, x_3053.y, x_3053.x, x_3053.z));
        let x_3057 : f32 = u_xlat11.w;
        u_xlat13.y = x_3057;
        let x_3059 : vec4<f32> = u_xlat8;
        let x_3062 : vec4<f32> = x_401.x_MainLightShadowmapSize;
        let x_3065 : vec4<f32> = u_xlat13;
        u_xlat18 = ((vec4<f32>(x_3059.x, x_3059.y, x_3059.x, x_3059.y) * vec4<f32>(x_3062.x, x_3062.y, x_3062.x, x_3062.y)) + vec4<f32>(x_3065.x, x_3065.y, x_3065.z, x_3065.y));
        let x_3068 : vec4<f32> = u_xlat8;
        let x_3071 : vec4<f32> = x_401.x_MainLightShadowmapSize;
        let x_3074 : vec4<f32> = u_xlat13;
        u_xlat32 = ((vec2<f32>(x_3068.x, x_3068.y) * vec2<f32>(x_3071.x, x_3071.y)) + vec2<f32>(x_3074.w, x_3074.y));
        let x_3078 : f32 = u_xlat13.y;
        u_xlat10.w = x_3078;
        let x_3080 : vec4<f32> = u_xlat8;
        let x_3083 : vec4<f32> = x_401.x_MainLightShadowmapSize;
        let x_3086 : vec4<f32> = u_xlat10;
        u_xlat60 = ((vec2<f32>(x_3080.x, x_3080.y) * vec2<f32>(x_3083.x, x_3083.y)) + vec2<f32>(x_3086.x, x_3086.w));
        let x_3089 : vec4<f32> = u_xlat13;
        let x_3090 : vec3<f32> = vec3<f32>(x_3089.x, x_3089.z, x_3089.w);
        let x_3091 : vec4<f32> = u_xlat11;
        u_xlat11 = vec4<f32>(x_3090.x, x_3091.y, x_3090.y, x_3090.z);
        let x_3093 : vec4<f32> = u_xlat8;
        let x_3096 : vec4<f32> = x_401.x_MainLightShadowmapSize;
        let x_3099 : vec4<f32> = u_xlat11;
        u_xlat13 = ((vec4<f32>(x_3093.x, x_3093.y, x_3093.x, x_3093.y) * vec4<f32>(x_3096.x, x_3096.y, x_3096.x, x_3096.y)) + vec4<f32>(x_3099.x, x_3099.y, x_3099.z, x_3099.y));
        let x_3102 : vec4<f32> = u_xlat8;
        let x_3105 : vec4<f32> = x_401.x_MainLightShadowmapSize;
        let x_3108 : vec4<f32> = u_xlat11;
        u_xlat55 = ((vec2<f32>(x_3102.x, x_3102.y) * vec2<f32>(x_3105.x, x_3105.y)) + vec2<f32>(x_3108.w, x_3108.y));
        let x_3112 : f32 = u_xlat10.x;
        u_xlat11.x = x_3112;
        let x_3114 : vec4<f32> = u_xlat8;
        let x_3117 : vec4<f32> = x_401.x_MainLightShadowmapSize;
        let x_3120 : vec4<f32> = u_xlat11;
        let x_3122 : vec2<f32> = ((vec2<f32>(x_3114.x, x_3114.y) * vec2<f32>(x_3117.x, x_3117.y)) + vec2<f32>(x_3120.x, x_3120.y));
        let x_3123 : vec4<f32> = u_xlat8;
        u_xlat8 = vec4<f32>(x_3122.x, x_3122.y, x_3123.z, x_3123.w);
        let x_3125 : vec4<f32> = u_xlat9;
        let x_3127 : vec4<f32> = u_xlat12;
        u_xlat19 = (vec4<f32>(x_3125.x, x_3125.x, x_3125.x, x_3125.x) * x_3127);
        let x_3129 : vec4<f32> = u_xlat9;
        let x_3131 : vec4<f32> = u_xlat12;
        u_xlat20 = (vec4<f32>(x_3129.y, x_3129.y, x_3129.y, x_3129.y) * x_3131);
        let x_3133 : vec4<f32> = u_xlat9;
        let x_3135 : vec4<f32> = u_xlat12;
        u_xlat21 = (vec4<f32>(x_3133.z, x_3133.z, x_3133.z, x_3133.z) * x_3135);
        let x_3137 : vec4<f32> = u_xlat9;
        let x_3139 : vec4<f32> = u_xlat12;
        u_xlat9 = (vec4<f32>(x_3137.w, x_3137.w, x_3137.w, x_3137.w) * x_3139);
        let x_3142 : vec4<f32> = u_xlat14;
        let x_3143 : vec2<f32> = vec2<f32>(x_3142.x, x_3142.y);
        let x_3145 : f32 = u_xlat2.z;
        txVec43 = vec3<f32>(x_3143.x, x_3143.y, x_3145);
        let x_3152 : vec3<f32> = txVec43;
        let x_3154 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_3152.xy, x_3152.z);
        u_xlat72 = x_3154;
        let x_3156 : vec4<f32> = u_xlat14;
        let x_3157 : vec2<f32> = vec2<f32>(x_3156.z, x_3156.w);
        let x_3159 : f32 = u_xlat2.z;
        txVec44 = vec3<f32>(x_3157.x, x_3157.y, x_3159);
        let x_3166 : vec3<f32> = txVec44;
        let x_3168 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_3166.xy, x_3166.z);
        u_xlat73 = x_3168;
        let x_3169 : f32 = u_xlat73;
        let x_3171 : f32 = u_xlat19.y;
        u_xlat73 = (x_3169 * x_3171);
        let x_3174 : f32 = u_xlat19.x;
        let x_3175 : f32 = u_xlat72;
        let x_3177 : f32 = u_xlat73;
        u_xlat72 = ((x_3174 * x_3175) + x_3177);
        let x_3180 : vec2<f32> = u_xlat52;
        let x_3182 : f32 = u_xlat2.z;
        txVec45 = vec3<f32>(x_3180.x, x_3180.y, x_3182);
        let x_3189 : vec3<f32> = txVec45;
        let x_3191 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_3189.xy, x_3189.z);
        u_xlat73 = x_3191;
        let x_3193 : f32 = u_xlat19.z;
        let x_3194 : f32 = u_xlat73;
        let x_3196 : f32 = u_xlat72;
        u_xlat72 = ((x_3193 * x_3194) + x_3196);
        let x_3199 : vec4<f32> = u_xlat17;
        let x_3200 : vec2<f32> = vec2<f32>(x_3199.x, x_3199.y);
        let x_3202 : f32 = u_xlat2.z;
        txVec46 = vec3<f32>(x_3200.x, x_3200.y, x_3202);
        let x_3209 : vec3<f32> = txVec46;
        let x_3211 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_3209.xy, x_3209.z);
        u_xlat73 = x_3211;
        let x_3213 : f32 = u_xlat19.w;
        let x_3214 : f32 = u_xlat73;
        let x_3216 : f32 = u_xlat72;
        u_xlat72 = ((x_3213 * x_3214) + x_3216);
        let x_3219 : vec4<f32> = u_xlat15;
        let x_3220 : vec2<f32> = vec2<f32>(x_3219.x, x_3219.y);
        let x_3222 : f32 = u_xlat2.z;
        txVec47 = vec3<f32>(x_3220.x, x_3220.y, x_3222);
        let x_3229 : vec3<f32> = txVec47;
        let x_3231 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_3229.xy, x_3229.z);
        u_xlat73 = x_3231;
        let x_3233 : f32 = u_xlat20.x;
        let x_3234 : f32 = u_xlat73;
        let x_3236 : f32 = u_xlat72;
        u_xlat72 = ((x_3233 * x_3234) + x_3236);
        let x_3239 : vec4<f32> = u_xlat15;
        let x_3240 : vec2<f32> = vec2<f32>(x_3239.z, x_3239.w);
        let x_3242 : f32 = u_xlat2.z;
        txVec48 = vec3<f32>(x_3240.x, x_3240.y, x_3242);
        let x_3249 : vec3<f32> = txVec48;
        let x_3251 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_3249.xy, x_3249.z);
        u_xlat73 = x_3251;
        let x_3253 : f32 = u_xlat20.y;
        let x_3254 : f32 = u_xlat73;
        let x_3256 : f32 = u_xlat72;
        u_xlat72 = ((x_3253 * x_3254) + x_3256);
        let x_3259 : vec4<f32> = u_xlat16;
        let x_3260 : vec2<f32> = vec2<f32>(x_3259.x, x_3259.y);
        let x_3262 : f32 = u_xlat2.z;
        txVec49 = vec3<f32>(x_3260.x, x_3260.y, x_3262);
        let x_3269 : vec3<f32> = txVec49;
        let x_3271 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_3269.xy, x_3269.z);
        u_xlat73 = x_3271;
        let x_3273 : f32 = u_xlat20.z;
        let x_3274 : f32 = u_xlat73;
        let x_3276 : f32 = u_xlat72;
        u_xlat72 = ((x_3273 * x_3274) + x_3276);
        let x_3279 : vec4<f32> = u_xlat17;
        let x_3280 : vec2<f32> = vec2<f32>(x_3279.z, x_3279.w);
        let x_3282 : f32 = u_xlat2.z;
        txVec50 = vec3<f32>(x_3280.x, x_3280.y, x_3282);
        let x_3289 : vec3<f32> = txVec50;
        let x_3291 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_3289.xy, x_3289.z);
        u_xlat73 = x_3291;
        let x_3293 : f32 = u_xlat20.w;
        let x_3294 : f32 = u_xlat73;
        let x_3296 : f32 = u_xlat72;
        u_xlat72 = ((x_3293 * x_3294) + x_3296);
        let x_3299 : vec4<f32> = u_xlat18;
        let x_3300 : vec2<f32> = vec2<f32>(x_3299.x, x_3299.y);
        let x_3302 : f32 = u_xlat2.z;
        txVec51 = vec3<f32>(x_3300.x, x_3300.y, x_3302);
        let x_3309 : vec3<f32> = txVec51;
        let x_3311 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_3309.xy, x_3309.z);
        u_xlat73 = x_3311;
        let x_3313 : f32 = u_xlat21.x;
        let x_3314 : f32 = u_xlat73;
        let x_3316 : f32 = u_xlat72;
        u_xlat72 = ((x_3313 * x_3314) + x_3316);
        let x_3319 : vec4<f32> = u_xlat18;
        let x_3320 : vec2<f32> = vec2<f32>(x_3319.z, x_3319.w);
        let x_3322 : f32 = u_xlat2.z;
        txVec52 = vec3<f32>(x_3320.x, x_3320.y, x_3322);
        let x_3329 : vec3<f32> = txVec52;
        let x_3331 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_3329.xy, x_3329.z);
        u_xlat73 = x_3331;
        let x_3333 : f32 = u_xlat21.y;
        let x_3334 : f32 = u_xlat73;
        let x_3336 : f32 = u_xlat72;
        u_xlat72 = ((x_3333 * x_3334) + x_3336);
        let x_3339 : vec2<f32> = u_xlat32;
        let x_3341 : f32 = u_xlat2.z;
        txVec53 = vec3<f32>(x_3339.x, x_3339.y, x_3341);
        let x_3348 : vec3<f32> = txVec53;
        let x_3350 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_3348.xy, x_3348.z);
        u_xlat73 = x_3350;
        let x_3352 : f32 = u_xlat21.z;
        let x_3353 : f32 = u_xlat73;
        let x_3355 : f32 = u_xlat72;
        u_xlat72 = ((x_3352 * x_3353) + x_3355);
        let x_3358 : vec2<f32> = u_xlat60;
        let x_3360 : f32 = u_xlat2.z;
        txVec54 = vec3<f32>(x_3358.x, x_3358.y, x_3360);
        let x_3367 : vec3<f32> = txVec54;
        let x_3369 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_3367.xy, x_3367.z);
        u_xlat73 = x_3369;
        let x_3371 : f32 = u_xlat21.w;
        let x_3372 : f32 = u_xlat73;
        let x_3374 : f32 = u_xlat72;
        u_xlat72 = ((x_3371 * x_3372) + x_3374);
        let x_3377 : vec4<f32> = u_xlat13;
        let x_3378 : vec2<f32> = vec2<f32>(x_3377.x, x_3377.y);
        let x_3380 : f32 = u_xlat2.z;
        txVec55 = vec3<f32>(x_3378.x, x_3378.y, x_3380);
        let x_3387 : vec3<f32> = txVec55;
        let x_3389 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_3387.xy, x_3387.z);
        u_xlat73 = x_3389;
        let x_3391 : f32 = u_xlat9.x;
        let x_3392 : f32 = u_xlat73;
        let x_3394 : f32 = u_xlat72;
        u_xlat72 = ((x_3391 * x_3392) + x_3394);
        let x_3397 : vec4<f32> = u_xlat13;
        let x_3398 : vec2<f32> = vec2<f32>(x_3397.z, x_3397.w);
        let x_3400 : f32 = u_xlat2.z;
        txVec56 = vec3<f32>(x_3398.x, x_3398.y, x_3400);
        let x_3407 : vec3<f32> = txVec56;
        let x_3409 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_3407.xy, x_3407.z);
        u_xlat73 = x_3409;
        let x_3411 : f32 = u_xlat9.y;
        let x_3412 : f32 = u_xlat73;
        let x_3414 : f32 = u_xlat72;
        u_xlat72 = ((x_3411 * x_3412) + x_3414);
        let x_3417 : vec2<f32> = u_xlat55;
        let x_3419 : f32 = u_xlat2.z;
        txVec57 = vec3<f32>(x_3417.x, x_3417.y, x_3419);
        let x_3426 : vec3<f32> = txVec57;
        let x_3428 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_3426.xy, x_3426.z);
        u_xlat73 = x_3428;
        let x_3430 : f32 = u_xlat9.z;
        let x_3431 : f32 = u_xlat73;
        let x_3433 : f32 = u_xlat72;
        u_xlat72 = ((x_3430 * x_3431) + x_3433);
        let x_3436 : vec4<f32> = u_xlat8;
        let x_3437 : vec2<f32> = vec2<f32>(x_3436.x, x_3436.y);
        let x_3439 : f32 = u_xlat2.z;
        txVec58 = vec3<f32>(x_3437.x, x_3437.y, x_3439);
        let x_3446 : vec3<f32> = txVec58;
        let x_3448 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_3446.xy, x_3446.z);
        u_xlat73 = x_3448;
        let x_3450 : f32 = u_xlat9.w;
        let x_3451 : f32 = u_xlat73;
        let x_3453 : f32 = u_xlat72;
        u_xlat0.x = ((x_3450 * x_3451) + x_3453);
      }
    }
  } else {
    let x_3458 : vec4<f32> = u_xlat2;
    let x_3459 : vec2<f32> = vec2<f32>(x_3458.x, x_3458.y);
    let x_3461 : f32 = u_xlat2.z;
    txVec59 = vec3<f32>(x_3459.x, x_3459.y, x_3461);
    let x_3468 : vec3<f32> = txVec59;
    let x_3470 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_3468.xy, x_3468.z);
    u_xlat0.x = x_3470;
  }
  let x_3473 : f32 = u_xlat0.x;
  let x_3475 : f32 = x_401.x_MainLightShadowParams.x;
  let x_3477 : f32 = u_xlat68;
  u_xlat0.x = ((x_3473 * x_3475) + x_3477);
  let x_3480 : bool = u_xlatb3;
  if (x_3480) {
    x_3481 = 1.0f;
  } else {
    let x_3486 : f32 = u_xlat0.x;
    x_3481 = x_3486;
  }
  let x_3487 : f32 = x_3481;
  u_xlat0.x = x_3487;
  let x_3489 : vec3<f32> = vs_INTERP0;
  let x_3491 : vec3<f32> = x_160.x_WorldSpaceCameraPos;
  let x_3493 : vec3<f32> = (x_3489 + -(x_3491));
  let x_3494 : vec4<f32> = u_xlat2;
  u_xlat2 = vec4<f32>(x_3493.x, x_3493.y, x_3493.z, x_3494.w);
  let x_3496 : vec4<f32> = u_xlat2;
  let x_3498 : vec4<f32> = u_xlat2;
  u_xlat2.x = dot(vec3<f32>(x_3496.x, x_3496.y, x_3496.z), vec3<f32>(x_3498.x, x_3498.y, x_3498.z));
  let x_3503 : f32 = u_xlat2.x;
  let x_3505 : f32 = x_401.x_MainLightShadowParams.z;
  let x_3508 : f32 = x_401.x_MainLightShadowParams.w;
  u_xlat2.x = ((x_3503 * x_3505) + x_3508);
  let x_3512 : f32 = u_xlat2.x;
  u_xlat2.x = clamp(x_3512, 0.0f, 1.0f);
  let x_3517 : f32 = u_xlat0.x;
  u_xlat24 = (-(x_3517) + 1.0f);
  let x_3521 : f32 = u_xlat2.x;
  let x_3522 : f32 = u_xlat24;
  let x_3525 : f32 = u_xlat0.x;
  u_xlat0.x = ((x_3521 * x_3522) + x_3525);
  let x_3528 : f32 = u_xlat50;
  let x_3531 : vec4<f32> = x_160.x_MainLightColor;
  let x_3533 : vec3<f32> = (vec3<f32>(x_3528, x_3528, x_3528) * vec3<f32>(x_3531.x, x_3531.y, x_3531.z));
  let x_3534 : vec4<f32> = u_xlat2;
  u_xlat2 = vec4<f32>(x_3533.x, x_3533.y, x_3533.z, x_3534.w);
  let x_3536 : vec3<f32> = u_xlat5;
  let x_3538 : vec4<f32> = u_xlat4;
  u_xlat68 = dot(-(x_3536), vec3<f32>(x_3538.x, x_3538.y, x_3538.z));
  let x_3541 : f32 = u_xlat68;
  let x_3542 : f32 = u_xlat68;
  u_xlat68 = (x_3541 + x_3542);
  let x_3544 : vec4<f32> = u_xlat4;
  let x_3546 : f32 = u_xlat68;
  let x_3550 : vec3<f32> = u_xlat5;
  let x_3552 : vec3<f32> = ((vec3<f32>(x_3544.x, x_3544.y, x_3544.z) * -(vec3<f32>(x_3546, x_3546, x_3546))) + -(x_3550));
  let x_3553 : vec4<f32> = u_xlat8;
  u_xlat8 = vec4<f32>(x_3552.x, x_3552.y, x_3552.z, x_3553.w);
  let x_3555 : vec4<f32> = u_xlat4;
  let x_3557 : vec3<f32> = u_xlat5;
  u_xlat68 = dot(vec3<f32>(x_3555.x, x_3555.y, x_3555.z), x_3557);
  let x_3559 : f32 = u_xlat68;
  u_xlat68 = clamp(x_3559, 0.0f, 1.0f);
  let x_3561 : f32 = u_xlat68;
  u_xlat68 = (-(x_3561) + 1.0f);
  let x_3564 : f32 = u_xlat68;
  let x_3565 : f32 = u_xlat68;
  u_xlat68 = (x_3564 * x_3565);
  let x_3567 : f32 = u_xlat68;
  let x_3568 : f32 = u_xlat68;
  u_xlat68 = (x_3567 * x_3568);
  let x_3571 : f32 = u_xlat47.x;
  u_xlat3.x = ((-(x_3571) * 0.699999988f) + 1.700000048f);
  let x_3579 : f32 = u_xlat3.x;
  let x_3581 : f32 = u_xlat47.x;
  u_xlat3.x = (x_3579 * x_3581);
  let x_3585 : f32 = u_xlat3.x;
  u_xlat3.x = (x_3585 * 6.0f);
  let x_3597 : vec4<f32> = u_xlat8;
  let x_3600 : f32 = u_xlat3.x;
  let x_3601 : vec4<f32> = textureSampleLevel(unity_SpecCube0, samplerunity_SpecCube0, vec3<f32>(x_3597.x, x_3597.y, x_3597.z), x_3600);
  u_xlat8 = x_3601;
  let x_3603 : f32 = u_xlat8.w;
  u_xlat3.x = (x_3603 + -1.0f);
  let x_3607 : f32 = x_95.unity_SpecCube0_HDR.w;
  let x_3609 : f32 = u_xlat3.x;
  u_xlat3.x = ((x_3607 * x_3609) + 1.0f);
  let x_3614 : f32 = u_xlat3.x;
  u_xlat3.x = max(x_3614, 0.0f);
  let x_3618 : f32 = u_xlat3.x;
  u_xlat3.x = log2(x_3618);
  let x_3622 : f32 = u_xlat3.x;
  let x_3624 : f32 = x_95.unity_SpecCube0_HDR.y;
  u_xlat3.x = (x_3622 * x_3624);
  let x_3628 : f32 = u_xlat3.x;
  u_xlat3.x = exp2(x_3628);
  let x_3632 : f32 = u_xlat3.x;
  let x_3634 : f32 = x_95.unity_SpecCube0_HDR.x;
  u_xlat3.x = (x_3632 * x_3634);
  let x_3637 : vec4<f32> = u_xlat8;
  let x_3639 : vec4<f32> = u_xlat3;
  let x_3641 : vec3<f32> = (vec3<f32>(x_3637.x, x_3637.y, x_3637.z) * vec3<f32>(x_3639.x, x_3639.x, x_3639.x));
  let x_3642 : vec4<f32> = u_xlat8;
  u_xlat8 = vec4<f32>(x_3641.x, x_3641.y, x_3641.z, x_3642.w);
  let x_3644 : f32 = u_xlat69;
  let x_3646 : f32 = u_xlat69;
  let x_3650 : vec2<f32> = ((vec2<f32>(x_3644, x_3644) * vec2<f32>(x_3646, x_3646)) + vec2<f32>(-1.0f, 1.0f));
  let x_3651 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_3650.x, x_3651.y, x_3650.y, x_3651.w);
  let x_3654 : f32 = u_xlat3.z;
  u_xlat47.x = (1.0f / x_3654);
  let x_3657 : f32 = u_xlat71;
  u_xlat69 = (x_3657 + -0.039999999f);
  let x_3660 : f32 = u_xlat68;
  let x_3661 : f32 = u_xlat69;
  u_xlat68 = ((x_3660 * x_3661) + 0.039999999f);
  let x_3665 : f32 = u_xlat68;
  let x_3667 : f32 = u_xlat47.x;
  u_xlat68 = (x_3665 * x_3667);
  let x_3669 : f32 = u_xlat68;
  let x_3671 : vec4<f32> = u_xlat8;
  let x_3673 : vec3<f32> = (vec3<f32>(x_3669, x_3669, x_3669) * vec3<f32>(x_3671.x, x_3671.y, x_3671.z));
  let x_3674 : vec4<f32> = u_xlat8;
  u_xlat8 = vec4<f32>(x_3673.x, x_3673.y, x_3673.z, x_3674.w);
  let x_3676 : vec3<f32> = u_xlat22;
  let x_3677 : vec3<f32> = u_xlat7;
  let x_3679 : vec4<f32> = u_xlat8;
  u_xlat22 = ((x_3676 * x_3677) + vec3<f32>(x_3679.x, x_3679.y, x_3679.z));
  let x_3683 : f32 = u_xlat0.x;
  let x_3685 : f32 = x_95.unity_LightData.z;
  u_xlat0.x = (x_3683 * x_3685);
  let x_3688 : vec4<f32> = u_xlat4;
  let x_3691 : vec4<f32> = x_160.x_MainLightPosition;
  u_xlat68 = dot(vec3<f32>(x_3688.x, x_3688.y, x_3688.z), vec3<f32>(x_3691.x, x_3691.y, x_3691.z));
  let x_3694 : f32 = u_xlat68;
  u_xlat68 = clamp(x_3694, 0.0f, 1.0f);
  let x_3697 : f32 = u_xlat0.x;
  let x_3698 : f32 = u_xlat68;
  u_xlat0.x = (x_3697 * x_3698);
  let x_3701 : vec3<f32> = u_xlat0;
  let x_3703 : vec4<f32> = u_xlat2;
  let x_3705 : vec3<f32> = (vec3<f32>(x_3701.x, x_3701.x, x_3701.x) * vec3<f32>(x_3703.x, x_3703.y, x_3703.z));
  let x_3706 : vec4<f32> = u_xlat2;
  u_xlat2 = vec4<f32>(x_3705.x, x_3705.y, x_3705.z, x_3706.w);
  let x_3708 : vec3<f32> = u_xlat5;
  let x_3710 : vec4<f32> = x_160.x_MainLightPosition;
  let x_3712 : vec3<f32> = (x_3708 + vec3<f32>(x_3710.x, x_3710.y, x_3710.z));
  let x_3713 : vec4<f32> = u_xlat8;
  u_xlat8 = vec4<f32>(x_3712.x, x_3712.y, x_3712.z, x_3713.w);
  let x_3715 : vec4<f32> = u_xlat8;
  let x_3717 : vec4<f32> = u_xlat8;
  u_xlat0.x = dot(vec3<f32>(x_3715.x, x_3715.y, x_3715.z), vec3<f32>(x_3717.x, x_3717.y, x_3717.z));
  let x_3722 : f32 = u_xlat0.x;
  u_xlat0.x = max(x_3722, 1.17549435e-37f);
  let x_3726 : f32 = u_xlat0.x;
  u_xlat0.x = inverseSqrt(x_3726);
  let x_3729 : vec3<f32> = u_xlat0;
  let x_3731 : vec4<f32> = u_xlat8;
  let x_3733 : vec3<f32> = (vec3<f32>(x_3729.x, x_3729.x, x_3729.x) * vec3<f32>(x_3731.x, x_3731.y, x_3731.z));
  let x_3734 : vec4<f32> = u_xlat8;
  u_xlat8 = vec4<f32>(x_3733.x, x_3733.y, x_3733.z, x_3734.w);
  let x_3736 : vec4<f32> = u_xlat4;
  let x_3738 : vec4<f32> = u_xlat8;
  u_xlat0.x = dot(vec3<f32>(x_3736.x, x_3736.y, x_3736.z), vec3<f32>(x_3738.x, x_3738.y, x_3738.z));
  let x_3743 : f32 = u_xlat0.x;
  u_xlat0.x = clamp(x_3743, 0.0f, 1.0f);
  let x_3747 : vec4<f32> = x_160.x_MainLightPosition;
  let x_3749 : vec4<f32> = u_xlat8;
  u_xlat68 = dot(vec3<f32>(x_3747.x, x_3747.y, x_3747.z), vec3<f32>(x_3749.x, x_3749.y, x_3749.z));
  let x_3752 : f32 = u_xlat68;
  u_xlat68 = clamp(x_3752, 0.0f, 1.0f);
  let x_3755 : f32 = u_xlat0.x;
  let x_3757 : f32 = u_xlat0.x;
  u_xlat0.x = (x_3755 * x_3757);
  let x_3761 : f32 = u_xlat0.x;
  let x_3763 : f32 = u_xlat3.x;
  u_xlat0.x = ((x_3761 * x_3763) + 1.000010014f);
  let x_3768 : f32 = u_xlat68;
  let x_3769 : f32 = u_xlat68;
  u_xlat68 = (x_3768 * x_3769);
  let x_3772 : f32 = u_xlat0.x;
  let x_3774 : f32 = u_xlat0.x;
  u_xlat0.x = (x_3772 * x_3774);
  let x_3777 : f32 = u_xlat68;
  u_xlat68 = max(x_3777, 0.100000001f);
  let x_3781 : f32 = u_xlat0.x;
  let x_3782 : f32 = u_xlat68;
  u_xlat0.x = (x_3781 * x_3782);
  let x_3785 : f32 = u_xlat28;
  let x_3787 : f32 = u_xlat0.x;
  u_xlat0.x = (x_3785 * x_3787);
  let x_3790 : f32 = u_xlat70;
  let x_3792 : f32 = u_xlat0.x;
  u_xlat0.x = (x_3790 / x_3792);
  let x_3795 : vec3<f32> = u_xlat0;
  let x_3799 : vec3<f32> = u_xlat7;
  let x_3800 : vec3<f32> = ((vec3<f32>(x_3795.x, x_3795.x, x_3795.x) * vec3<f32>(0.039999999f, 0.039999999f, 0.039999999f)) + x_3799);
  let x_3801 : vec4<f32> = u_xlat8;
  u_xlat8 = vec4<f32>(x_3800.x, x_3800.y, x_3800.z, x_3801.w);
  let x_3803 : vec4<f32> = u_xlat2;
  let x_3805 : vec4<f32> = u_xlat8;
  let x_3807 : vec3<f32> = (vec3<f32>(x_3803.x, x_3803.y, x_3803.z) * vec3<f32>(x_3805.x, x_3805.y, x_3805.z));
  let x_3808 : vec4<f32> = u_xlat2;
  u_xlat2 = vec4<f32>(x_3807.x, x_3807.y, x_3807.z, x_3808.w);
  let x_3811 : f32 = x_160.x_AdditionalLightsCount.x;
  let x_3813 : f32 = x_95.unity_LightData.y;
  u_xlat0.x = min(x_3811, x_3813);
  let x_3817 : f32 = u_xlat0.x;
  u_xlatu0 = bitcast<u32>(i32(x_3817));
  u_xlat8.x = 0.0f;
  u_xlat8.y = 0.0f;
  u_xlat8.z = 0.0f;
  u_xlatu_loop_1 = 0u;
  loop {
    let x_3829 : u32 = u_xlatu_loop_1;
    let x_3830 : u32 = u_xlatu0;
    if ((x_3829 < x_3830)) {
    } else {
      break;
    }
    let x_3832 : u32 = u_xlatu_loop_1;
    u_xlatu47 = (x_3832 >> 2u);
    let x_3835 : u32 = u_xlatu_loop_1;
    u_xlati69 = bitcast<i32>((x_3835 & 3u));
    let x_3838 : u32 = u_xlatu47;
    let x_3841 : vec4<f32> = x_95.unity_LightIndices[bitcast<i32>(x_3838)];
    let x_3851 : i32 = u_xlati69;
    indexable = array<vec4<u32>, 4u>(vec4<u32>(1065353216u, 0u, 0u, 0u), vec4<u32>(0u, 1065353216u, 0u, 0u), vec4<u32>(0u, 0u, 1065353216u, 0u), vec4<u32>(0u, 0u, 0u, 1065353216u));
    let x_3856 : vec4<u32> = indexable[x_3851];
    u_xlat47.x = dot(x_3841, bitcast<vec4<f32>>(x_3856));
    let x_3861 : f32 = u_xlat47.x;
    u_xlati47 = i32(x_3861);
    let x_3863 : vec3<f32> = vs_INTERP0;
    let x_3875 : i32 = u_xlati47;
    let x_3877 : vec4<f32> = x_3874.x_AdditionalLightsPosition[x_3875];
    let x_3880 : i32 = u_xlati47;
    let x_3882 : vec4<f32> = x_3874.x_AdditionalLightsPosition[x_3880];
    let x_3884 : vec3<f32> = ((-(x_3863) * vec3<f32>(x_3877.w, x_3877.w, x_3877.w)) + vec3<f32>(x_3882.x, x_3882.y, x_3882.z));
    let x_3885 : vec4<f32> = u_xlat9;
    u_xlat9 = vec4<f32>(x_3884.x, x_3884.y, x_3884.z, x_3885.w);
    let x_3887 : vec4<f32> = u_xlat9;
    let x_3889 : vec4<f32> = u_xlat9;
    u_xlat69 = dot(vec3<f32>(x_3887.x, x_3887.y, x_3887.z), vec3<f32>(x_3889.x, x_3889.y, x_3889.z));
    let x_3892 : f32 = u_xlat69;
    u_xlat69 = max(x_3892, 6.10351562e-05f);
    let x_3895 : f32 = u_xlat69;
    u_xlat71 = inverseSqrt(x_3895);
    let x_3897 : f32 = u_xlat71;
    let x_3899 : vec4<f32> = u_xlat9;
    let x_3901 : vec3<f32> = (vec3<f32>(x_3897, x_3897, x_3897) * vec3<f32>(x_3899.x, x_3899.y, x_3899.z));
    let x_3902 : vec4<f32> = u_xlat10;
    u_xlat10 = vec4<f32>(x_3901.x, x_3901.y, x_3901.z, x_3902.w);
    let x_3904 : f32 = u_xlat69;
    u_xlat72 = (1.0f / x_3904);
    let x_3906 : f32 = u_xlat69;
    let x_3907 : i32 = u_xlati47;
    let x_3909 : f32 = x_3874.x_AdditionalLightsAttenuation[x_3907].x;
    u_xlat69 = (x_3906 * x_3909);
    let x_3911 : f32 = u_xlat69;
    let x_3913 : f32 = u_xlat69;
    u_xlat69 = ((-(x_3911) * x_3913) + 1.0f);
    let x_3916 : f32 = u_xlat69;
    u_xlat69 = max(x_3916, 0.0f);
    let x_3918 : f32 = u_xlat69;
    let x_3919 : f32 = u_xlat69;
    u_xlat69 = (x_3918 * x_3919);
    let x_3921 : f32 = u_xlat69;
    let x_3922 : f32 = u_xlat72;
    u_xlat69 = (x_3921 * x_3922);
    let x_3924 : i32 = u_xlati47;
    let x_3926 : vec4<f32> = x_3874.x_AdditionalLightsSpotDir[x_3924];
    let x_3928 : vec4<f32> = u_xlat10;
    u_xlat72 = dot(vec3<f32>(x_3926.x, x_3926.y, x_3926.z), vec3<f32>(x_3928.x, x_3928.y, x_3928.z));
    let x_3931 : f32 = u_xlat72;
    let x_3932 : i32 = u_xlati47;
    let x_3934 : f32 = x_3874.x_AdditionalLightsAttenuation[x_3932].z;
    let x_3936 : i32 = u_xlati47;
    let x_3938 : f32 = x_3874.x_AdditionalLightsAttenuation[x_3936].w;
    u_xlat72 = ((x_3931 * x_3934) + x_3938);
    let x_3940 : f32 = u_xlat72;
    u_xlat72 = clamp(x_3940, 0.0f, 1.0f);
    let x_3942 : f32 = u_xlat72;
    let x_3943 : f32 = u_xlat72;
    u_xlat72 = (x_3942 * x_3943);
    let x_3945 : f32 = u_xlat69;
    let x_3946 : f32 = u_xlat72;
    u_xlat69 = (x_3945 * x_3946);
    let x_3948 : f32 = u_xlat50;
    let x_3950 : i32 = u_xlati47;
    let x_3952 : vec4<f32> = x_3874.x_AdditionalLightsColor[x_3950];
    let x_3954 : vec3<f32> = (vec3<f32>(x_3948, x_3948, x_3948) * vec3<f32>(x_3952.x, x_3952.y, x_3952.z));
    let x_3955 : vec4<f32> = u_xlat11;
    u_xlat11 = vec4<f32>(x_3954.x, x_3954.y, x_3954.z, x_3955.w);
    let x_3957 : vec4<f32> = u_xlat4;
    let x_3959 : vec4<f32> = u_xlat10;
    u_xlat47.x = dot(vec3<f32>(x_3957.x, x_3957.y, x_3957.z), vec3<f32>(x_3959.x, x_3959.y, x_3959.z));
    let x_3964 : f32 = u_xlat47.x;
    u_xlat47.x = clamp(x_3964, 0.0f, 1.0f);
    let x_3968 : f32 = u_xlat47.x;
    let x_3969 : f32 = u_xlat69;
    u_xlat47.x = (x_3968 * x_3969);
    let x_3972 : vec2<f32> = u_xlat47;
    let x_3974 : vec4<f32> = u_xlat11;
    let x_3976 : vec3<f32> = (vec3<f32>(x_3972.x, x_3972.x, x_3972.x) * vec3<f32>(x_3974.x, x_3974.y, x_3974.z));
    let x_3977 : vec4<f32> = u_xlat11;
    u_xlat11 = vec4<f32>(x_3976.x, x_3976.y, x_3976.z, x_3977.w);
    let x_3979 : vec4<f32> = u_xlat9;
    let x_3981 : f32 = u_xlat71;
    let x_3984 : vec3<f32> = u_xlat5;
    let x_3985 : vec3<f32> = ((vec3<f32>(x_3979.x, x_3979.y, x_3979.z) * vec3<f32>(x_3981, x_3981, x_3981)) + x_3984);
    let x_3986 : vec4<f32> = u_xlat9;
    u_xlat9 = vec4<f32>(x_3985.x, x_3985.y, x_3985.z, x_3986.w);
    let x_3988 : vec4<f32> = u_xlat9;
    let x_3990 : vec4<f32> = u_xlat9;
    u_xlat47.x = dot(vec3<f32>(x_3988.x, x_3988.y, x_3988.z), vec3<f32>(x_3990.x, x_3990.y, x_3990.z));
    let x_3995 : f32 = u_xlat47.x;
    u_xlat47.x = max(x_3995, 1.17549435e-37f);
    let x_3999 : f32 = u_xlat47.x;
    u_xlat47.x = inverseSqrt(x_3999);
    let x_4002 : vec2<f32> = u_xlat47;
    let x_4004 : vec4<f32> = u_xlat9;
    let x_4006 : vec3<f32> = (vec3<f32>(x_4002.x, x_4002.x, x_4002.x) * vec3<f32>(x_4004.x, x_4004.y, x_4004.z));
    let x_4007 : vec4<f32> = u_xlat9;
    u_xlat9 = vec4<f32>(x_4006.x, x_4006.y, x_4006.z, x_4007.w);
    let x_4009 : vec4<f32> = u_xlat4;
    let x_4011 : vec4<f32> = u_xlat9;
    u_xlat47.x = dot(vec3<f32>(x_4009.x, x_4009.y, x_4009.z), vec3<f32>(x_4011.x, x_4011.y, x_4011.z));
    let x_4016 : f32 = u_xlat47.x;
    u_xlat47.x = clamp(x_4016, 0.0f, 1.0f);
    let x_4019 : vec4<f32> = u_xlat10;
    let x_4021 : vec4<f32> = u_xlat9;
    u_xlat47.y = dot(vec3<f32>(x_4019.x, x_4019.y, x_4019.z), vec3<f32>(x_4021.x, x_4021.y, x_4021.z));
    let x_4026 : f32 = u_xlat47.y;
    u_xlat47.y = clamp(x_4026, 0.0f, 1.0f);
    let x_4029 : vec2<f32> = u_xlat47;
    let x_4030 : vec2<f32> = u_xlat47;
    u_xlat47 = (x_4029 * x_4030);
    let x_4033 : f32 = u_xlat47.x;
    let x_4035 : f32 = u_xlat3.x;
    u_xlat47.x = ((x_4033 * x_4035) + 1.000010014f);
    let x_4040 : f32 = u_xlat47.x;
    let x_4042 : f32 = u_xlat47.x;
    u_xlat47.x = (x_4040 * x_4042);
    let x_4046 : f32 = u_xlat47.y;
    u_xlat69 = max(x_4046, 0.100000001f);
    let x_4048 : f32 = u_xlat69;
    let x_4050 : f32 = u_xlat47.x;
    u_xlat47.x = (x_4048 * x_4050);
    let x_4053 : f32 = u_xlat28;
    let x_4055 : f32 = u_xlat47.x;
    u_xlat47.x = (x_4053 * x_4055);
    let x_4058 : f32 = u_xlat70;
    let x_4060 : f32 = u_xlat47.x;
    u_xlat47.x = (x_4058 / x_4060);
    let x_4063 : vec2<f32> = u_xlat47;
    let x_4066 : vec3<f32> = u_xlat7;
    let x_4067 : vec3<f32> = ((vec3<f32>(x_4063.x, x_4063.x, x_4063.x) * vec3<f32>(0.039999999f, 0.039999999f, 0.039999999f)) + x_4066);
    let x_4068 : vec4<f32> = u_xlat9;
    u_xlat9 = vec4<f32>(x_4067.x, x_4067.y, x_4067.z, x_4068.w);
    let x_4070 : vec4<f32> = u_xlat9;
    let x_4072 : vec4<f32> = u_xlat11;
    let x_4075 : vec4<f32> = u_xlat8;
    let x_4077 : vec3<f32> = ((vec3<f32>(x_4070.x, x_4070.y, x_4070.z) * vec3<f32>(x_4072.x, x_4072.y, x_4072.z)) + vec3<f32>(x_4075.x, x_4075.y, x_4075.z));
    let x_4078 : vec4<f32> = u_xlat8;
    u_xlat8 = vec4<f32>(x_4077.x, x_4077.y, x_4077.z, x_4078.w);

    continuing {
      let x_4080 : u32 = u_xlatu_loop_1;
      u_xlatu_loop_1 = (x_4080 + bitcast<u32>(1i));
    }
  }
  let x_4082 : vec3<f32> = u_xlat22;
  let x_4083 : vec4<f32> = u_xlat6;
  let x_4086 : vec4<f32> = u_xlat2;
  u_xlat0 = ((x_4082 * vec3<f32>(x_4083.x, x_4083.x, x_4083.x)) + vec3<f32>(x_4086.x, x_4086.y, x_4086.z));
  let x_4089 : vec4<f32> = u_xlat8;
  let x_4091 : vec3<f32> = u_xlat0;
  u_xlat0 = (vec3<f32>(x_4089.x, x_4089.y, x_4089.z) + x_4091);
  let x_4095 : vec4<f32> = vs_INTERP4;
  let x_4097 : vec3<f32> = u_xlat1;
  let x_4099 : vec3<f32> = u_xlat0;
  let x_4100 : vec3<f32> = ((vec3<f32>(x_4095.w, x_4095.w, x_4095.w) * x_4097) + x_4099);
  let x_4101 : vec4<f32> = SV_Target0;
  SV_Target0 = vec4<f32>(x_4100.x, x_4100.y, x_4100.z, x_4101.w);
  let x_4103 : bool = u_xlatb25;
  let x_4104 : f32 = u_xlat67;
  SV_Target0.w = select(1.0f, x_4104, x_4103);
  return;
}

struct main_out {
  @location(0)
  SV_Target0_1 : vec4<f32>,
}

@fragment
fn main(@builtin(position) gl_FragCoord_param : vec4<f32>, @location(1) vs_INTERP1_param : vec3<f32>, @location(2) vs_INTERP2_param : vec4<f32>, @location(0) vs_INTERP0_param : vec3<f32>, @location(3) vs_INTERP3_param : vec4<f32>, @location(4) vs_INTERP4_param : vec4<f32>) -> main_out {
  gl_FragCoord = gl_FragCoord_param;
  vs_INTERP1 = vs_INTERP1_param;
  vs_INTERP2 = vs_INTERP2_param;
  vs_INTERP0 = vs_INTERP0_param;
  vs_INTERP3 = vs_INTERP3_param;
  vs_INTERP4 = vs_INTERP4_param;
  main_1();
  return main_out(SV_Target0);
}

