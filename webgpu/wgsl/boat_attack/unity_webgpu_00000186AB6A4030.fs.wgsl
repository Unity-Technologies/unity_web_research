struct PGlobals {
  x_ScaledScreenParams : vec4<f32>,
  x_GlobalMipBias : vec2<f32>,
  x_AlphaToMaskAvailable : f32,
  @size(4)
  padding : u32,
  x_MainLightPosition : vec4<f32>,
  x_MainLightColor : vec4<f32>,
  x_AmbientOcclusionParam : vec4<f32>,
  x_AdditionalLightsCount : vec4<f32>,
  x_WorldSpaceCameraPos : vec3<f32>,
  @size(4)
  padding_1 : u32,
  x_ScreenParams : vec4<f32>,
  unity_OrthoParams : vec4<f32>,
  x_ScaleBiasRt : vec4<f32>,
  unity_MatrixV : mat4x4<f32>,
}

type Arr = array<vec4<f32>, 2u>;

struct UnityPerDraw {
  unity_ObjectToWorld : mat4x4<f32>,
  unity_WorldToObject : mat4x4<f32>,
  unity_LODFade : vec4<f32>,
  unity_WorldTransformParams : vec4<f32>,
  unity_RenderingLayer : vec4<f32>,
  unity_LightData : vec4<f32>,
  unity_LightIndices : Arr,
  unity_ProbesOcclusion : vec4<f32>,
  unity_SpecCube0_HDR : vec4<f32>,
  unity_SpecCube1_HDR : vec4<f32>,
  unity_SpecCube0_BoxMax : vec4<f32>,
  unity_SpecCube0_BoxMin : vec4<f32>,
  unity_SpecCube0_ProbePosition : vec4<f32>,
  unity_SpecCube1_BoxMax : vec4<f32>,
  unity_SpecCube1_BoxMin : vec4<f32>,
  unity_SpecCube1_ProbePosition : vec4<f32>,
  unity_LightmapST : vec4<f32>,
  unity_DynamicLightmapST : vec4<f32>,
  unity_SHAr : vec4<f32>,
  unity_SHAg : vec4<f32>,
  unity_SHAb : vec4<f32>,
  unity_SHBr : vec4<f32>,
  unity_SHBg : vec4<f32>,
  unity_SHBb : vec4<f32>,
  unity_SHC : vec4<f32>,
  unity_RendererBounds_Min : vec4<f32>,
  unity_RendererBounds_Max : vec4<f32>,
  unity_MatrixPreviousM : mat4x4<f32>,
  unity_MatrixPreviousMI : mat4x4<f32>,
  unity_MotionVectorsParams : vec4<f32>,
  unity_SpriteColor : vec4<f32>,
  unity_SpriteProps : vec4<f32>,
}

struct UnityPerMaterial {
  Texture2D_B222E8F_TexelSize : vec4<f32>,
  Color_C30C7CA3 : vec4<f32>,
  Texture2D_D9BFD5F1_TexelSize : vec4<f32>,
}

type Arr_1 = array<mat4x4<f32>, 5u>;

struct MainLightShadows {
  x_MainLightWorldToShadow : Arr_1,
  x_CascadeShadowSplitSpheres0 : vec4<f32>,
  x_CascadeShadowSplitSpheres1 : vec4<f32>,
  x_CascadeShadowSplitSpheres2 : vec4<f32>,
  x_CascadeShadowSplitSpheres3 : vec4<f32>,
  x_CascadeShadowSplitSphereRadii : vec4<f32>,
  x_MainLightShadowOffset0 : vec4<f32>,
  x_MainLightShadowOffset1 : vec4<f32>,
  x_MainLightShadowParams : vec4<f32>,
  x_MainLightShadowmapSize : vec4<f32>,
}

struct strided_arr {
  @size(16)
  el : f32,
}

type Arr_2 = array<strided_arr, 8u>;

struct LightCookies {
  x_MainLightWorldToLight : mat4x4<f32>,
  x_AdditionalLightsCookieEnableBits : Arr_2,
  x_MainLightCookieTextureFormat : f32,
  x_AdditionalLightsCookieAtlasTextureFormat : f32,
}

type Arr_3 = array<vec4<f32>, 256u>;

type Arr_4 = array<vec4<f32>, 256u>;

type Arr_5 = array<vec4<f32>, 256u>;

type Arr_6 = array<vec4<f32>, 256u>;

type Arr_7 = array<vec4<f32>, 256u>;

struct strided_arr_1 {
  @size(16)
  el : f32,
}

type Arr_8 = array<strided_arr_1, 256u>;

type Arr_9 = array<vec4<f32>, 256u>;

type Arr_10 = array<strided_arr_1, 256u>;

struct AdditionalLights {
  x_AdditionalLightsPosition : Arr_9,
  x_AdditionalLightsColor : Arr_9,
  x_AdditionalLightsAttenuation : Arr_9,
  x_AdditionalLightsSpotDir : Arr_9,
  x_AdditionalLightsOcclusionProbes : Arr_9,
  x_AdditionalLightsLayerMasks : Arr_10,
}

type Arr_11 = array<mat4x4<f32>, 256u>;

struct AdditionalLightsCookies {
  x_AdditionalLightsWorldToLights : Arr_11,
  x_AdditionalLightsCookieAtlasUVRects : Arr_9,
  x_AdditionalLightsLightTypes : Arr_10,
}

var<private> gl_FragCoord : vec4<f32>;

var<private> vs_INTERP1 : vec3<f32>;

@group(1) @binding(0) var<uniform> x_90 : PGlobals;

var<private> vs_INTERP0 : vec3<f32>;

@group(1) @binding(2) var<uniform> x_161 : UnityPerDraw;

@group(0) @binding(5) var Texture2D_B222E8F : texture_2d<f32>;

@group(0) @binding(12) var samplerTexture2D_B222E8F : sampler;

var<private> vs_INTERP3 : vec4<f32>;

@group(1) @binding(6) var<uniform> x_215 : UnityPerMaterial;

@group(0) @binding(6) var Texture2D_D9BFD5F1 : texture_2d<f32>;

@group(0) @binding(13) var samplerTexture2D_D9BFD5F1 : sampler;

var<private> vs_INTERP4 : vec4<f32>;

@group(1) @binding(3) var<uniform> x_272 : MainLightShadows;

@group(0) @binding(2) var x_MainLightShadowmapTexture : texture_depth_2d;

@group(0) @binding(9) var sampler_MainLightShadowmapTexture : sampler_comparison;

var<private> vs_INTERP2 : vec4<f32>;

@group(0) @binding(1) var x_ScreenSpaceOcclusionTexture : texture_2d<f32>;

@group(0) @binding(8) var sampler_ScreenSpaceOcclusionTexture : sampler;

var<private> vs_INTERP9 : vec4<f32>;

@group(1) @binding(4) var<uniform> x_3354 : LightCookies;

@group(0) @binding(3) var x_MainLightCookieTexture : texture_2d<f32>;

@group(0) @binding(10) var sampler_MainLightCookieTexture : sampler;

@group(0) @binding(0) var unity_SpecCube0 : texture_cube<f32>;

@group(0) @binding(7) var samplerunity_SpecCube0 : sampler;

@group(1) @binding(1) var<uniform> x_3786 : AdditionalLights;

@group(1) @binding(5) var<uniform> x_3895 : AdditionalLightsCookies;

@group(0) @binding(4) var x_AdditionalLightsCookieAtlasTexture : texture_2d<f32>;

@group(0) @binding(11) var sampler_AdditionalLightsCookieAtlasTexture : sampler;

var<private> SV_Target0 : vec4<f32>;

fn int_bitfieldInsert_i1_i1_i1_i1_(base : ptr<function, i32>, insert : ptr<function, i32>, offset_1 : ptr<function, i32>, bits : ptr<function, i32>) -> i32 {
  var mask : u32;
  let x_19 : i32 = *(bits);
  let x_23 : i32 = *(offset_1);
  mask = (~((4294967295u << bitcast<u32>(x_19))) << bitcast<u32>(x_23));
  let x_26 : i32 = *(base);
  let x_28 : u32 = mask;
  let x_31 : i32 = *(insert);
  let x_33 : i32 = *(offset_1);
  let x_36 : u32 = mask;
  return bitcast<i32>(((bitcast<u32>(x_26) & ~(x_28)) | ((bitcast<u32>(x_31) << bitcast<u32>(x_33)) & x_36)));
}

fn main_1() {
  var hlslcc_FragCoord : vec4<f32>;
  var u_xlat0 : vec3<f32>;
  var u_xlatb63 : bool;
  var u_xlat1 : vec3<f32>;
  var u_xlat64 : f32;
  var u_xlat2 : vec3<f32>;
  var x_118 : f32;
  var x_132 : f32;
  var x_145 : f32;
  var u_xlat63 : f32;
  var u_xlat3 : vec4<f32>;
  var u_xlat4 : vec3<f32>;
  var u_xlat5 : vec4<f32>;
  var u_xlat6 : vec4<f32>;
  var u_xlat26 : vec3<f32>;
  var u_xlatb64 : bool;
  var u_xlat7 : vec4<f32>;
  var txVec0 : vec3<f32>;
  var u_xlat8 : vec4<f32>;
  var txVec1 : vec3<f32>;
  var txVec2 : vec3<f32>;
  var txVec3 : vec3<f32>;
  var u_xlatb65 : bool;
  var u_xlat49 : vec2<f32>;
  var u_xlat9 : vec4<f32>;
  var u_xlat51 : vec2<f32>;
  var u_xlat10 : vec4<f32>;
  var u_xlat11 : vec4<f32>;
  var u_xlat12 : vec4<f32>;
  var u_xlat13 : vec4<f32>;
  var u_xlat14 : vec4<f32>;
  var u_xlat15 : vec4<f32>;
  var u_xlat65 : f32;
  var txVec4 : vec3<f32>;
  var u_xlat67 : f32;
  var txVec5 : vec3<f32>;
  var u_xlat69 : f32;
  var txVec6 : vec3<f32>;
  var txVec7 : vec3<f32>;
  var txVec8 : vec3<f32>;
  var txVec9 : vec3<f32>;
  var txVec10 : vec3<f32>;
  var txVec11 : vec3<f32>;
  var txVec12 : vec3<f32>;
  var u_xlat29 : vec3<f32>;
  var u_xlat16 : vec4<f32>;
  var u_xlat17 : vec4<f32>;
  var u_xlat30 : vec2<f32>;
  var u_xlat57 : vec2<f32>;
  var u_xlat52 : vec2<f32>;
  var u_xlat18 : vec4<f32>;
  var u_xlat19 : vec4<f32>;
  var u_xlat20 : vec4<f32>;
  var txVec13 : vec3<f32>;
  var txVec14 : vec3<f32>;
  var txVec15 : vec3<f32>;
  var txVec16 : vec3<f32>;
  var txVec17 : vec3<f32>;
  var txVec18 : vec3<f32>;
  var txVec19 : vec3<f32>;
  var txVec20 : vec3<f32>;
  var txVec21 : vec3<f32>;
  var txVec22 : vec3<f32>;
  var txVec23 : vec3<f32>;
  var txVec24 : vec3<f32>;
  var txVec25 : vec3<f32>;
  var txVec26 : vec3<f32>;
  var txVec27 : vec3<f32>;
  var txVec28 : vec3<f32>;
  var txVec29 : vec3<f32>;
  var u_xlatb67 : bool;
  var u_xlatb6 : bool;
  var x_1583 : f32;
  var u_xlatb3 : bool;
  var u_xlatu1 : vec3<u32>;
  var u_xlatu43 : u32;
  var u_xlatu24 : u32;
  var u_xlati43 : i32;
  var u_xlati22 : i32;
  var u_xlatu22 : u32;
  var u_xlati1 : i32;
  var param : i32;
  var param_1 : i32;
  var param_2 : i32;
  var param_3 : i32;
  var u_xlat22 : f32;
  var x_1715 : f32;
  var u_xlatb43 : vec2<bool>;
  var u_xlat43 : vec2<f32>;
  var u_xlatb22 : bool;
  var x_1787 : f32;
  var u_xlat66 : f32;
  var u_xlat27 : f32;
  var txVec30 : vec3<f32>;
  var txVec31 : vec3<f32>;
  var txVec32 : vec3<f32>;
  var txVec33 : vec3<f32>;
  var u_xlatb48 : vec2<bool>;
  var u_xlat48 : vec2<f32>;
  var txVec34 : vec3<f32>;
  var txVec35 : vec3<f32>;
  var txVec36 : vec3<f32>;
  var txVec37 : vec3<f32>;
  var txVec38 : vec3<f32>;
  var txVec39 : vec3<f32>;
  var txVec40 : vec3<f32>;
  var txVec41 : vec3<f32>;
  var txVec42 : vec3<f32>;
  var u_xlat55 : vec2<f32>;
  var txVec43 : vec3<f32>;
  var txVec44 : vec3<f32>;
  var u_xlat71 : f32;
  var txVec45 : vec3<f32>;
  var txVec46 : vec3<f32>;
  var txVec47 : vec3<f32>;
  var txVec48 : vec3<f32>;
  var txVec49 : vec3<f32>;
  var txVec50 : vec3<f32>;
  var txVec51 : vec3<f32>;
  var txVec52 : vec3<f32>;
  var txVec53 : vec3<f32>;
  var txVec54 : vec3<f32>;
  var txVec55 : vec3<f32>;
  var txVec56 : vec3<f32>;
  var txVec57 : vec3<f32>;
  var u_xlat28 : f32;
  var txVec58 : vec3<f32>;
  var txVec59 : vec3<f32>;
  var x_3420 : f32;
  var x_3431 : vec3<f32>;
  var u_xlatu63 : u32;
  var u_xlatu_loop_1 : u32;
  var u_xlatu65 : u32;
  var u_xlati67 : i32;
  var indexable : array<vec4<u32>, 4u>;
  var u_xlat70 : f32;
  var u_xlatu71 : u32;
  var u_xlati72 : i32;
  var u_xlati71 : i32;
  var u_xlati73 : i32;
  var u_xlatb71 : bool;
  var u_xlat53 : vec2<f32>;
  var u_xlatb53 : vec2<bool>;
  var x_4188 : f32;
  var x_4201 : f32;
  var x_4253 : f32;
  var x_4264 : vec3<f32>;
  var x_4419 : f32;
  var u_xlat_precise_vec4 : vec4<f32>;
  var u_xlat_precise_ivec4 : vec4<i32>;
  var u_xlat_precise_bvec4 : vec4<bool>;
  var u_xlat_precise_uvec4 : vec4<u32>;
  let x_49 : vec4<f32> = gl_FragCoord;
  let x_50 : vec3<f32> = vec3<f32>(x_49.x, x_49.y, x_49.z);
  let x_55 : f32 = gl_FragCoord.w;
  hlslcc_FragCoord = vec4<f32>(x_50.x, x_50.y, x_50.z, (1.0f / x_55));
  let x_65 : vec3<f32> = vs_INTERP1;
  let x_66 : vec3<f32> = vs_INTERP1;
  u_xlat0.x = dot(x_65, x_66);
  let x_72 : f32 = u_xlat0.x;
  u_xlat0.x = sqrt(x_72);
  let x_76 : f32 = u_xlat0.x;
  u_xlat0.x = (1.0f / x_76);
  let x_79 : vec3<f32> = u_xlat0;
  let x_81 : vec3<f32> = vs_INTERP1;
  u_xlat0 = (vec3<f32>(x_79.x, x_79.x, x_79.x) * x_81);
  let x_94 : f32 = x_90.unity_OrthoParams.w;
  u_xlatb63 = (x_94 == 0.0f);
  let x_99 : vec3<f32> = vs_INTERP0;
  let x_104 : vec3<f32> = x_90.x_WorldSpaceCameraPos;
  u_xlat1 = (-(x_99) + x_104);
  let x_107 : vec3<f32> = u_xlat1;
  let x_108 : vec3<f32> = u_xlat1;
  u_xlat64 = dot(x_107, x_108);
  let x_110 : f32 = u_xlat64;
  u_xlat64 = inverseSqrt(x_110);
  let x_112 : f32 = u_xlat64;
  let x_114 : vec3<f32> = u_xlat1;
  u_xlat1 = (vec3<f32>(x_112, x_112, x_112) * x_114);
  let x_117 : bool = u_xlatb63;
  if (x_117) {
    let x_122 : f32 = u_xlat1.x;
    x_118 = x_122;
  } else {
    let x_128 : f32 = x_90.unity_MatrixV[0i].z;
    x_118 = x_128;
  }
  let x_129 : f32 = x_118;
  u_xlat2.x = x_129;
  let x_131 : bool = u_xlatb63;
  if (x_131) {
    let x_137 : f32 = u_xlat1.y;
    x_132 = x_137;
  } else {
    let x_141 : f32 = x_90.unity_MatrixV[1i].z;
    x_132 = x_141;
  }
  let x_142 : f32 = x_132;
  u_xlat2.y = x_142;
  let x_144 : bool = u_xlatb63;
  if (x_144) {
    let x_149 : f32 = u_xlat1.z;
    x_145 = x_149;
  } else {
    let x_153 : f32 = x_90.unity_MatrixV[2i].z;
    x_145 = x_153;
  }
  let x_154 : f32 = x_145;
  u_xlat2.z = x_154;
  let x_156 : vec3<f32> = u_xlat2;
  let x_164 : vec4<f32> = x_161.unity_WorldToObject[1i];
  u_xlat1 = (vec3<f32>(x_156.y, x_156.y, x_156.y) * vec3<f32>(x_164.x, x_164.y, x_164.z));
  let x_168 : vec4<f32> = x_161.unity_WorldToObject[0i];
  let x_170 : vec3<f32> = u_xlat2;
  let x_173 : vec3<f32> = u_xlat1;
  u_xlat1 = ((vec3<f32>(x_168.x, x_168.y, x_168.z) * vec3<f32>(x_170.x, x_170.x, x_170.x)) + x_173);
  let x_176 : vec4<f32> = x_161.unity_WorldToObject[2i];
  let x_178 : vec3<f32> = u_xlat2;
  let x_181 : vec3<f32> = u_xlat1;
  u_xlat1 = ((vec3<f32>(x_176.x, x_176.y, x_176.z) * vec3<f32>(x_178.z, x_178.z, x_178.z)) + x_181);
  let x_184 : vec3<f32> = u_xlat1;
  let x_185 : vec3<f32> = u_xlat1;
  u_xlat63 = dot(x_184, x_185);
  let x_187 : f32 = u_xlat63;
  u_xlat63 = inverseSqrt(x_187);
  let x_189 : f32 = u_xlat63;
  let x_191 : vec3<f32> = u_xlat1;
  u_xlat1 = (vec3<f32>(x_189, x_189, x_189) * x_191);
  let x_205 : vec4<f32> = vs_INTERP3;
  let x_208 : f32 = x_90.x_GlobalMipBias.x;
  let x_209 : vec4<f32> = textureSampleBias(Texture2D_B222E8F, samplerTexture2D_B222E8F, vec2<f32>(x_205.x, x_205.y), x_208);
  u_xlat3 = x_209;
  let x_211 : vec4<f32> = u_xlat3;
  let x_217 : vec4<f32> = x_215.Color_C30C7CA3;
  u_xlat4 = (vec3<f32>(x_211.x, x_211.y, x_211.z) * vec3<f32>(x_217.x, x_217.y, x_217.z));
  let x_226 : vec4<f32> = vs_INTERP3;
  let x_229 : f32 = x_90.x_GlobalMipBias.x;
  let x_230 : vec4<f32> = textureSampleBias(Texture2D_D9BFD5F1, samplerTexture2D_D9BFD5F1, vec2<f32>(x_226.x, x_226.y), x_229);
  u_xlat5 = vec4<f32>(x_230.w, x_230.x, x_230.y, x_230.z);
  let x_233 : vec4<f32> = u_xlat5;
  u_xlat6 = ((vec4<f32>(x_233.y, x_233.z, x_233.w, x_233.x) * vec4<f32>(2.0f, 2.0f, 2.0f, 2.0f)) + vec4<f32>(-1.0f, -1.0f, -1.0f, -1.0f));
  let x_241 : vec4<f32> = u_xlat6;
  let x_242 : vec4<f32> = u_xlat6;
  u_xlat63 = dot(x_241, x_242);
  let x_244 : f32 = u_xlat63;
  u_xlat63 = inverseSqrt(x_244);
  let x_247 : f32 = u_xlat63;
  let x_249 : vec4<f32> = u_xlat6;
  u_xlat26 = (vec3<f32>(x_247, x_247, x_247) * vec3<f32>(x_249.x, x_249.y, x_249.z));
  let x_254 : f32 = vs_INTERP4.y;
  u_xlat63 = (x_254 * 200.0f);
  let x_257 : f32 = u_xlat63;
  u_xlat63 = min(x_257, 1.0f);
  let x_259 : f32 = u_xlat63;
  let x_261 : vec4<f32> = u_xlat3;
  let x_263 : vec3<f32> = (vec3<f32>(x_259, x_259, x_259) * vec3<f32>(x_261.x, x_261.y, x_261.z));
  let x_264 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_263.x, x_263.y, x_263.z, x_264.w);
  let x_266 : vec3<f32> = vs_INTERP0;
  let x_274 : vec4<f32> = x_272.x_MainLightWorldToShadow[0i][1i];
  let x_276 : vec3<f32> = (vec3<f32>(x_266.y, x_266.y, x_266.y) * vec3<f32>(x_274.x, x_274.y, x_274.z));
  let x_277 : vec4<f32> = u_xlat6;
  u_xlat6 = vec4<f32>(x_276.x, x_276.y, x_276.z, x_277.w);
  let x_280 : vec4<f32> = x_272.x_MainLightWorldToShadow[0i][0i];
  let x_282 : vec3<f32> = vs_INTERP0;
  let x_285 : vec4<f32> = u_xlat6;
  let x_287 : vec3<f32> = ((vec3<f32>(x_280.x, x_280.y, x_280.z) * vec3<f32>(x_282.x, x_282.x, x_282.x)) + vec3<f32>(x_285.x, x_285.y, x_285.z));
  let x_288 : vec4<f32> = u_xlat6;
  u_xlat6 = vec4<f32>(x_287.x, x_287.y, x_287.z, x_288.w);
  let x_291 : vec4<f32> = x_272.x_MainLightWorldToShadow[0i][2i];
  let x_293 : vec3<f32> = vs_INTERP0;
  let x_296 : vec4<f32> = u_xlat6;
  let x_298 : vec3<f32> = ((vec3<f32>(x_291.x, x_291.y, x_291.z) * vec3<f32>(x_293.z, x_293.z, x_293.z)) + vec3<f32>(x_296.x, x_296.y, x_296.z));
  let x_299 : vec4<f32> = u_xlat6;
  u_xlat6 = vec4<f32>(x_298.x, x_298.y, x_298.z, x_299.w);
  let x_301 : vec4<f32> = u_xlat6;
  let x_305 : vec4<f32> = x_272.x_MainLightWorldToShadow[0i][3i];
  let x_307 : vec3<f32> = (vec3<f32>(x_301.x, x_301.y, x_301.z) + vec3<f32>(x_305.x, x_305.y, x_305.z));
  let x_308 : vec4<f32> = u_xlat6;
  u_xlat6 = vec4<f32>(x_307.x, x_307.y, x_307.z, x_308.w);
  let x_312 : f32 = x_272.x_MainLightShadowParams.y;
  u_xlatb63 = (0.0f < x_312);
  let x_314 : bool = u_xlatb63;
  if (x_314) {
    let x_319 : f32 = x_272.x_MainLightShadowParams.y;
    u_xlatb64 = (x_319 == 1.0f);
    let x_321 : bool = u_xlatb64;
    if (x_321) {
      let x_325 : vec4<f32> = u_xlat6;
      let x_329 : vec4<f32> = x_272.x_MainLightShadowOffset0;
      u_xlat7 = (vec4<f32>(x_325.x, x_325.y, x_325.x, x_325.y) + x_329);
      let x_332 : vec4<f32> = u_xlat7;
      let x_333 : vec2<f32> = vec2<f32>(x_332.x, x_332.y);
      let x_335 : f32 = u_xlat6.z;
      txVec0 = vec3<f32>(x_333.x, x_333.y, x_335);
      let x_348 : vec3<f32> = txVec0;
      let x_350 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_348.xy, x_348.z);
      u_xlat8.x = x_350;
      let x_353 : vec4<f32> = u_xlat7;
      let x_354 : vec2<f32> = vec2<f32>(x_353.z, x_353.w);
      let x_356 : f32 = u_xlat6.z;
      txVec1 = vec3<f32>(x_354.x, x_354.y, x_356);
      let x_363 : vec3<f32> = txVec1;
      let x_365 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_363.xy, x_363.z);
      u_xlat8.y = x_365;
      let x_367 : vec4<f32> = u_xlat6;
      let x_370 : vec4<f32> = x_272.x_MainLightShadowOffset1;
      u_xlat7 = (vec4<f32>(x_367.x, x_367.y, x_367.x, x_367.y) + x_370);
      let x_373 : vec4<f32> = u_xlat7;
      let x_374 : vec2<f32> = vec2<f32>(x_373.x, x_373.y);
      let x_376 : f32 = u_xlat6.z;
      txVec2 = vec3<f32>(x_374.x, x_374.y, x_376);
      let x_383 : vec3<f32> = txVec2;
      let x_385 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_383.xy, x_383.z);
      u_xlat8.z = x_385;
      let x_388 : vec4<f32> = u_xlat7;
      let x_389 : vec2<f32> = vec2<f32>(x_388.z, x_388.w);
      let x_391 : f32 = u_xlat6.z;
      txVec3 = vec3<f32>(x_389.x, x_389.y, x_391);
      let x_398 : vec3<f32> = txVec3;
      let x_400 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_398.xy, x_398.z);
      u_xlat8.w = x_400;
      let x_402 : vec4<f32> = u_xlat8;
      u_xlat64 = dot(x_402, vec4<f32>(0.25f, 0.25f, 0.25f, 0.25f));
    } else {
      let x_409 : f32 = x_272.x_MainLightShadowParams.y;
      u_xlatb65 = (x_409 == 2.0f);
      let x_411 : bool = u_xlatb65;
      if (x_411) {
        let x_414 : vec4<f32> = u_xlat6;
        let x_417 : vec4<f32> = x_272.x_MainLightShadowmapSize;
        let x_422 : vec2<f32> = ((vec2<f32>(x_414.x, x_414.y) * vec2<f32>(x_417.z, x_417.w)) + vec2<f32>(0.5f, 0.5f));
        let x_423 : vec4<f32> = u_xlat7;
        u_xlat7 = vec4<f32>(x_422.x, x_422.y, x_423.z, x_423.w);
        let x_425 : vec4<f32> = u_xlat7;
        let x_427 : vec2<f32> = floor(vec2<f32>(x_425.x, x_425.y));
        let x_428 : vec4<f32> = u_xlat7;
        u_xlat7 = vec4<f32>(x_427.x, x_427.y, x_428.z, x_428.w);
        let x_432 : vec4<f32> = u_xlat6;
        let x_435 : vec4<f32> = x_272.x_MainLightShadowmapSize;
        let x_438 : vec4<f32> = u_xlat7;
        u_xlat49 = ((vec2<f32>(x_432.x, x_432.y) * vec2<f32>(x_435.z, x_435.w)) + -(vec2<f32>(x_438.x, x_438.y)));
        let x_442 : vec2<f32> = u_xlat49;
        u_xlat8 = (vec4<f32>(x_442.x, x_442.x, x_442.y, x_442.y) + vec4<f32>(0.5f, 1.0f, 0.5f, 1.0f));
        let x_447 : vec4<f32> = u_xlat8;
        let x_449 : vec4<f32> = u_xlat8;
        u_xlat9 = (vec4<f32>(x_447.x, x_447.x, x_447.z, x_447.z) * vec4<f32>(x_449.x, x_449.x, x_449.z, x_449.z));
        let x_452 : vec4<f32> = u_xlat9;
        let x_456 : vec2<f32> = (vec2<f32>(x_452.y, x_452.w) * vec2<f32>(0.079999998f, 0.079999998f));
        let x_457 : vec4<f32> = u_xlat8;
        u_xlat8 = vec4<f32>(x_456.x, x_457.y, x_456.y, x_457.w);
        let x_459 : vec4<f32> = u_xlat9;
        let x_462 : vec2<f32> = u_xlat49;
        let x_464 : vec2<f32> = ((vec2<f32>(x_459.x, x_459.z) * vec2<f32>(0.5f, 0.5f)) + -(x_462));
        let x_465 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_464.x, x_464.y, x_465.z, x_465.w);
        let x_468 : vec2<f32> = u_xlat49;
        u_xlat51 = (-(x_468) + vec2<f32>(1.0f, 1.0f));
        let x_473 : vec2<f32> = u_xlat49;
        let x_475 : vec2<f32> = min(x_473, vec2<f32>(0.0f, 0.0f));
        let x_476 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_475.x, x_475.y, x_476.z, x_476.w);
        let x_478 : vec4<f32> = u_xlat10;
        let x_481 : vec4<f32> = u_xlat10;
        let x_484 : vec2<f32> = u_xlat51;
        let x_485 : vec2<f32> = ((-(vec2<f32>(x_478.x, x_478.y)) * vec2<f32>(x_481.x, x_481.y)) + x_484);
        let x_486 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_485.x, x_485.y, x_486.z, x_486.w);
        let x_488 : vec2<f32> = u_xlat49;
        u_xlat49 = max(x_488, vec2<f32>(0.0f, 0.0f));
        let x_490 : vec2<f32> = u_xlat49;
        let x_492 : vec2<f32> = u_xlat49;
        let x_494 : vec4<f32> = u_xlat8;
        u_xlat49 = ((-(x_490) * x_492) + vec2<f32>(x_494.y, x_494.w));
        let x_497 : vec4<f32> = u_xlat10;
        let x_499 : vec2<f32> = (vec2<f32>(x_497.x, x_497.y) + vec2<f32>(1.0f, 1.0f));
        let x_500 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_499.x, x_499.y, x_500.z, x_500.w);
        let x_502 : vec2<f32> = u_xlat49;
        u_xlat49 = (x_502 + vec2<f32>(1.0f, 1.0f));
        let x_505 : vec4<f32> = u_xlat9;
        let x_509 : vec2<f32> = (vec2<f32>(x_505.x, x_505.y) * vec2<f32>(0.159999996f, 0.159999996f));
        let x_510 : vec4<f32> = u_xlat11;
        u_xlat11 = vec4<f32>(x_509.x, x_509.y, x_510.z, x_510.w);
        let x_512 : vec2<f32> = u_xlat51;
        let x_513 : vec2<f32> = (x_512 * vec2<f32>(0.159999996f, 0.159999996f));
        let x_514 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_513.x, x_513.y, x_514.z, x_514.w);
        let x_516 : vec4<f32> = u_xlat10;
        let x_518 : vec2<f32> = (vec2<f32>(x_516.x, x_516.y) * vec2<f32>(0.159999996f, 0.159999996f));
        let x_519 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_518.x, x_518.y, x_519.z, x_519.w);
        let x_522 : vec2<f32> = u_xlat49;
        let x_523 : vec2<f32> = (x_522 * vec2<f32>(0.159999996f, 0.159999996f));
        let x_524 : vec4<f32> = u_xlat12;
        u_xlat12 = vec4<f32>(x_523.x, x_523.y, x_524.z, x_524.w);
        let x_526 : vec4<f32> = u_xlat8;
        u_xlat49 = (vec2<f32>(x_526.y, x_526.w) * vec2<f32>(0.159999996f, 0.159999996f));
        let x_530 : f32 = u_xlat10.x;
        u_xlat11.z = x_530;
        let x_533 : f32 = u_xlat49.x;
        u_xlat11.w = x_533;
        let x_536 : f32 = u_xlat12.x;
        u_xlat9.z = x_536;
        let x_539 : f32 = u_xlat8.x;
        u_xlat9.w = x_539;
        let x_542 : vec4<f32> = u_xlat9;
        let x_544 : vec4<f32> = u_xlat11;
        u_xlat13 = (vec4<f32>(x_542.z, x_542.w, x_542.x, x_542.z) + vec4<f32>(x_544.z, x_544.w, x_544.x, x_544.z));
        let x_548 : f32 = u_xlat11.y;
        u_xlat10.z = x_548;
        let x_551 : f32 = u_xlat49.y;
        u_xlat10.w = x_551;
        let x_554 : f32 = u_xlat9.y;
        u_xlat12.z = x_554;
        let x_557 : f32 = u_xlat8.z;
        u_xlat12.w = x_557;
        let x_559 : vec4<f32> = u_xlat10;
        let x_561 : vec4<f32> = u_xlat12;
        let x_563 : vec3<f32> = (vec3<f32>(x_559.z, x_559.y, x_559.w) + vec3<f32>(x_561.z, x_561.y, x_561.w));
        let x_564 : vec4<f32> = u_xlat8;
        u_xlat8 = vec4<f32>(x_563.x, x_563.y, x_563.z, x_564.w);
        let x_566 : vec4<f32> = u_xlat9;
        let x_568 : vec4<f32> = u_xlat13;
        let x_570 : vec3<f32> = (vec3<f32>(x_566.x, x_566.z, x_566.w) / vec3<f32>(x_568.z, x_568.w, x_568.y));
        let x_571 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_570.x, x_570.y, x_570.z, x_571.w);
        let x_573 : vec4<f32> = u_xlat9;
        let x_579 : vec3<f32> = (vec3<f32>(x_573.x, x_573.y, x_573.z) + vec3<f32>(-2.5f, -0.5f, 1.5f));
        let x_580 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_579.x, x_579.y, x_579.z, x_580.w);
        let x_582 : vec4<f32> = u_xlat12;
        let x_584 : vec4<f32> = u_xlat8;
        let x_586 : vec3<f32> = (vec3<f32>(x_582.z, x_582.y, x_582.w) / vec3<f32>(x_584.x, x_584.y, x_584.z));
        let x_587 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_586.x, x_586.y, x_586.z, x_587.w);
        let x_589 : vec4<f32> = u_xlat10;
        let x_591 : vec3<f32> = (vec3<f32>(x_589.x, x_589.y, x_589.z) + vec3<f32>(-2.5f, -0.5f, 1.5f));
        let x_592 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_591.x, x_591.y, x_591.z, x_592.w);
        let x_594 : vec4<f32> = u_xlat9;
        let x_597 : vec4<f32> = x_272.x_MainLightShadowmapSize;
        let x_599 : vec3<f32> = (vec3<f32>(x_594.y, x_594.x, x_594.z) * vec3<f32>(x_597.x, x_597.x, x_597.x));
        let x_600 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_599.x, x_599.y, x_599.z, x_600.w);
        let x_602 : vec4<f32> = u_xlat10;
        let x_605 : vec4<f32> = x_272.x_MainLightShadowmapSize;
        let x_607 : vec3<f32> = (vec3<f32>(x_602.x, x_602.y, x_602.z) * vec3<f32>(x_605.y, x_605.y, x_605.y));
        let x_608 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_607.x, x_607.y, x_607.z, x_608.w);
        let x_611 : f32 = u_xlat10.x;
        u_xlat9.w = x_611;
        let x_613 : vec4<f32> = u_xlat7;
        let x_616 : vec4<f32> = x_272.x_MainLightShadowmapSize;
        let x_619 : vec4<f32> = u_xlat9;
        u_xlat11 = ((vec4<f32>(x_613.x, x_613.y, x_613.x, x_613.y) * vec4<f32>(x_616.x, x_616.y, x_616.x, x_616.y)) + vec4<f32>(x_619.y, x_619.w, x_619.x, x_619.w));
        let x_622 : vec4<f32> = u_xlat7;
        let x_625 : vec4<f32> = x_272.x_MainLightShadowmapSize;
        let x_628 : vec4<f32> = u_xlat9;
        u_xlat49 = ((vec2<f32>(x_622.x, x_622.y) * vec2<f32>(x_625.x, x_625.y)) + vec2<f32>(x_628.z, x_628.w));
        let x_632 : f32 = u_xlat9.y;
        u_xlat10.w = x_632;
        let x_634 : vec4<f32> = u_xlat10;
        let x_635 : vec2<f32> = vec2<f32>(x_634.y, x_634.z);
        let x_636 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_636.x, x_635.x, x_636.z, x_635.y);
        let x_638 : vec4<f32> = u_xlat7;
        let x_641 : vec4<f32> = x_272.x_MainLightShadowmapSize;
        let x_644 : vec4<f32> = u_xlat9;
        u_xlat12 = ((vec4<f32>(x_638.x, x_638.y, x_638.x, x_638.y) * vec4<f32>(x_641.x, x_641.y, x_641.x, x_641.y)) + vec4<f32>(x_644.x, x_644.y, x_644.z, x_644.y));
        let x_647 : vec4<f32> = u_xlat7;
        let x_650 : vec4<f32> = x_272.x_MainLightShadowmapSize;
        let x_653 : vec4<f32> = u_xlat10;
        u_xlat10 = ((vec4<f32>(x_647.x, x_647.y, x_647.x, x_647.y) * vec4<f32>(x_650.x, x_650.y, x_650.x, x_650.y)) + vec4<f32>(x_653.w, x_653.y, x_653.w, x_653.z));
        let x_656 : vec4<f32> = u_xlat7;
        let x_659 : vec4<f32> = x_272.x_MainLightShadowmapSize;
        let x_662 : vec4<f32> = u_xlat9;
        u_xlat9 = ((vec4<f32>(x_656.x, x_656.y, x_656.x, x_656.y) * vec4<f32>(x_659.x, x_659.y, x_659.x, x_659.y)) + vec4<f32>(x_662.x, x_662.w, x_662.z, x_662.w));
        let x_666 : vec4<f32> = u_xlat8;
        let x_668 : vec4<f32> = u_xlat13;
        u_xlat14 = (vec4<f32>(x_666.x, x_666.x, x_666.x, x_666.y) * vec4<f32>(x_668.z, x_668.w, x_668.y, x_668.z));
        let x_672 : vec4<f32> = u_xlat8;
        let x_674 : vec4<f32> = u_xlat13;
        u_xlat15 = (vec4<f32>(x_672.y, x_672.y, x_672.z, x_672.z) * x_674);
        let x_678 : f32 = u_xlat8.z;
        let x_680 : f32 = u_xlat13.y;
        u_xlat65 = (x_678 * x_680);
        let x_683 : vec4<f32> = u_xlat11;
        let x_684 : vec2<f32> = vec2<f32>(x_683.x, x_683.y);
        let x_686 : f32 = u_xlat6.z;
        txVec4 = vec3<f32>(x_684.x, x_684.y, x_686);
        let x_694 : vec3<f32> = txVec4;
        let x_696 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_694.xy, x_694.z);
        u_xlat67 = x_696;
        let x_698 : vec4<f32> = u_xlat11;
        let x_699 : vec2<f32> = vec2<f32>(x_698.z, x_698.w);
        let x_701 : f32 = u_xlat6.z;
        txVec5 = vec3<f32>(x_699.x, x_699.y, x_701);
        let x_709 : vec3<f32> = txVec5;
        let x_711 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_709.xy, x_709.z);
        u_xlat69 = x_711;
        let x_712 : f32 = u_xlat69;
        let x_714 : f32 = u_xlat14.y;
        u_xlat69 = (x_712 * x_714);
        let x_717 : f32 = u_xlat14.x;
        let x_718 : f32 = u_xlat67;
        let x_720 : f32 = u_xlat69;
        u_xlat67 = ((x_717 * x_718) + x_720);
        let x_723 : vec2<f32> = u_xlat49;
        let x_725 : f32 = u_xlat6.z;
        txVec6 = vec3<f32>(x_723.x, x_723.y, x_725);
        let x_732 : vec3<f32> = txVec6;
        let x_734 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_732.xy, x_732.z);
        u_xlat69 = x_734;
        let x_736 : f32 = u_xlat14.z;
        let x_737 : f32 = u_xlat69;
        let x_739 : f32 = u_xlat67;
        u_xlat67 = ((x_736 * x_737) + x_739);
        let x_742 : vec4<f32> = u_xlat10;
        let x_743 : vec2<f32> = vec2<f32>(x_742.x, x_742.y);
        let x_745 : f32 = u_xlat6.z;
        txVec7 = vec3<f32>(x_743.x, x_743.y, x_745);
        let x_752 : vec3<f32> = txVec7;
        let x_754 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_752.xy, x_752.z);
        u_xlat69 = x_754;
        let x_756 : f32 = u_xlat14.w;
        let x_757 : f32 = u_xlat69;
        let x_759 : f32 = u_xlat67;
        u_xlat67 = ((x_756 * x_757) + x_759);
        let x_762 : vec4<f32> = u_xlat12;
        let x_763 : vec2<f32> = vec2<f32>(x_762.x, x_762.y);
        let x_765 : f32 = u_xlat6.z;
        txVec8 = vec3<f32>(x_763.x, x_763.y, x_765);
        let x_772 : vec3<f32> = txVec8;
        let x_774 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_772.xy, x_772.z);
        u_xlat69 = x_774;
        let x_776 : f32 = u_xlat15.x;
        let x_777 : f32 = u_xlat69;
        let x_779 : f32 = u_xlat67;
        u_xlat67 = ((x_776 * x_777) + x_779);
        let x_782 : vec4<f32> = u_xlat12;
        let x_783 : vec2<f32> = vec2<f32>(x_782.z, x_782.w);
        let x_785 : f32 = u_xlat6.z;
        txVec9 = vec3<f32>(x_783.x, x_783.y, x_785);
        let x_792 : vec3<f32> = txVec9;
        let x_794 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_792.xy, x_792.z);
        u_xlat69 = x_794;
        let x_796 : f32 = u_xlat15.y;
        let x_797 : f32 = u_xlat69;
        let x_799 : f32 = u_xlat67;
        u_xlat67 = ((x_796 * x_797) + x_799);
        let x_802 : vec4<f32> = u_xlat10;
        let x_803 : vec2<f32> = vec2<f32>(x_802.z, x_802.w);
        let x_805 : f32 = u_xlat6.z;
        txVec10 = vec3<f32>(x_803.x, x_803.y, x_805);
        let x_812 : vec3<f32> = txVec10;
        let x_814 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_812.xy, x_812.z);
        u_xlat69 = x_814;
        let x_816 : f32 = u_xlat15.z;
        let x_817 : f32 = u_xlat69;
        let x_819 : f32 = u_xlat67;
        u_xlat67 = ((x_816 * x_817) + x_819);
        let x_822 : vec4<f32> = u_xlat9;
        let x_823 : vec2<f32> = vec2<f32>(x_822.x, x_822.y);
        let x_825 : f32 = u_xlat6.z;
        txVec11 = vec3<f32>(x_823.x, x_823.y, x_825);
        let x_832 : vec3<f32> = txVec11;
        let x_834 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_832.xy, x_832.z);
        u_xlat69 = x_834;
        let x_836 : f32 = u_xlat15.w;
        let x_837 : f32 = u_xlat69;
        let x_839 : f32 = u_xlat67;
        u_xlat67 = ((x_836 * x_837) + x_839);
        let x_842 : vec4<f32> = u_xlat9;
        let x_843 : vec2<f32> = vec2<f32>(x_842.z, x_842.w);
        let x_845 : f32 = u_xlat6.z;
        txVec12 = vec3<f32>(x_843.x, x_843.y, x_845);
        let x_852 : vec3<f32> = txVec12;
        let x_854 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_852.xy, x_852.z);
        u_xlat69 = x_854;
        let x_855 : f32 = u_xlat65;
        let x_856 : f32 = u_xlat69;
        let x_858 : f32 = u_xlat67;
        u_xlat64 = ((x_855 * x_856) + x_858);
      } else {
        let x_861 : vec4<f32> = u_xlat6;
        let x_864 : vec4<f32> = x_272.x_MainLightShadowmapSize;
        let x_867 : vec2<f32> = ((vec2<f32>(x_861.x, x_861.y) * vec2<f32>(x_864.z, x_864.w)) + vec2<f32>(0.5f, 0.5f));
        let x_868 : vec4<f32> = u_xlat7;
        u_xlat7 = vec4<f32>(x_867.x, x_867.y, x_868.z, x_868.w);
        let x_870 : vec4<f32> = u_xlat7;
        let x_872 : vec2<f32> = floor(vec2<f32>(x_870.x, x_870.y));
        let x_873 : vec4<f32> = u_xlat7;
        u_xlat7 = vec4<f32>(x_872.x, x_872.y, x_873.z, x_873.w);
        let x_875 : vec4<f32> = u_xlat6;
        let x_878 : vec4<f32> = x_272.x_MainLightShadowmapSize;
        let x_881 : vec4<f32> = u_xlat7;
        u_xlat49 = ((vec2<f32>(x_875.x, x_875.y) * vec2<f32>(x_878.z, x_878.w)) + -(vec2<f32>(x_881.x, x_881.y)));
        let x_885 : vec2<f32> = u_xlat49;
        u_xlat8 = (vec4<f32>(x_885.x, x_885.x, x_885.y, x_885.y) + vec4<f32>(0.5f, 1.0f, 0.5f, 1.0f));
        let x_888 : vec4<f32> = u_xlat8;
        let x_890 : vec4<f32> = u_xlat8;
        u_xlat9 = (vec4<f32>(x_888.x, x_888.x, x_888.z, x_888.z) * vec4<f32>(x_890.x, x_890.x, x_890.z, x_890.z));
        let x_893 : vec4<f32> = u_xlat9;
        let x_897 : vec2<f32> = (vec2<f32>(x_893.y, x_893.w) * vec2<f32>(0.040816002f, 0.040816002f));
        let x_898 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_898.x, x_897.x, x_898.z, x_897.y);
        let x_900 : vec4<f32> = u_xlat9;
        let x_903 : vec2<f32> = u_xlat49;
        let x_905 : vec2<f32> = ((vec2<f32>(x_900.x, x_900.z) * vec2<f32>(0.5f, 0.5f)) + -(x_903));
        let x_906 : vec4<f32> = u_xlat8;
        u_xlat8 = vec4<f32>(x_905.x, x_906.y, x_905.y, x_906.w);
        let x_908 : vec2<f32> = u_xlat49;
        let x_910 : vec2<f32> = (-(x_908) + vec2<f32>(1.0f, 1.0f));
        let x_911 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_910.x, x_910.y, x_911.z, x_911.w);
        let x_913 : vec2<f32> = u_xlat49;
        u_xlat51 = min(x_913, vec2<f32>(0.0f, 0.0f));
        let x_915 : vec2<f32> = u_xlat51;
        let x_917 : vec2<f32> = u_xlat51;
        let x_919 : vec4<f32> = u_xlat9;
        let x_921 : vec2<f32> = ((-(x_915) * x_917) + vec2<f32>(x_919.x, x_919.y));
        let x_922 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_921.x, x_921.y, x_922.z, x_922.w);
        let x_924 : vec2<f32> = u_xlat49;
        u_xlat51 = max(x_924, vec2<f32>(0.0f, 0.0f));
        let x_927 : vec2<f32> = u_xlat51;
        let x_929 : vec2<f32> = u_xlat51;
        let x_931 : vec4<f32> = u_xlat8;
        let x_933 : vec2<f32> = ((-(x_927) * x_929) + vec2<f32>(x_931.y, x_931.w));
        let x_934 : vec3<f32> = u_xlat29;
        u_xlat29 = vec3<f32>(x_933.x, x_934.y, x_933.y);
        let x_936 : vec4<f32> = u_xlat9;
        let x_939 : vec2<f32> = (vec2<f32>(x_936.x, x_936.y) + vec2<f32>(2.0f, 2.0f));
        let x_940 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_939.x, x_939.y, x_940.z, x_940.w);
        let x_942 : vec3<f32> = u_xlat29;
        let x_944 : vec2<f32> = (vec2<f32>(x_942.x, x_942.z) + vec2<f32>(2.0f, 2.0f));
        let x_945 : vec4<f32> = u_xlat8;
        u_xlat8 = vec4<f32>(x_945.x, x_944.x, x_945.z, x_944.y);
        let x_948 : f32 = u_xlat8.y;
        u_xlat11.z = (x_948 * 0.081632003f);
        let x_952 : vec4<f32> = u_xlat8;
        let x_955 : vec3<f32> = (vec3<f32>(x_952.z, x_952.x, x_952.w) * vec3<f32>(0.081632003f, 0.081632003f, 0.081632003f));
        let x_956 : vec4<f32> = u_xlat12;
        u_xlat12 = vec4<f32>(x_955.x, x_955.y, x_955.z, x_956.w);
        let x_958 : vec4<f32> = u_xlat9;
        let x_961 : vec2<f32> = (vec2<f32>(x_958.x, x_958.y) * vec2<f32>(0.081632003f, 0.081632003f));
        let x_962 : vec4<f32> = u_xlat8;
        u_xlat8 = vec4<f32>(x_961.x, x_961.y, x_962.z, x_962.w);
        let x_965 : f32 = u_xlat12.y;
        u_xlat11.x = x_965;
        let x_967 : vec2<f32> = u_xlat49;
        let x_974 : vec2<f32> = ((vec2<f32>(x_967.x, x_967.x) * vec2<f32>(-0.081632003f, 0.081632003f)) + vec2<f32>(0.163264006f, 0.081632003f));
        let x_975 : vec4<f32> = u_xlat11;
        u_xlat11 = vec4<f32>(x_975.x, x_974.x, x_975.z, x_974.y);
        let x_977 : vec2<f32> = u_xlat49;
        let x_981 : vec2<f32> = ((vec2<f32>(x_977.x, x_977.x) * vec2<f32>(-0.081632003f, 0.081632003f)) + vec2<f32>(0.081632003f, 0.163264006f));
        let x_982 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_981.x, x_982.y, x_981.y, x_982.w);
        let x_985 : f32 = u_xlat8.x;
        u_xlat9.y = x_985;
        let x_988 : f32 = u_xlat10.y;
        u_xlat9.w = x_988;
        let x_990 : vec4<f32> = u_xlat9;
        let x_991 : vec4<f32> = u_xlat11;
        u_xlat11 = (x_990 + x_991);
        let x_993 : vec2<f32> = u_xlat49;
        let x_996 : vec2<f32> = ((vec2<f32>(x_993.y, x_993.y) * vec2<f32>(-0.081632003f, 0.081632003f)) + vec2<f32>(0.163264006f, 0.081632003f));
        let x_997 : vec4<f32> = u_xlat12;
        u_xlat12 = vec4<f32>(x_997.x, x_996.x, x_997.z, x_996.y);
        let x_999 : vec2<f32> = u_xlat49;
        let x_1002 : vec2<f32> = ((vec2<f32>(x_999.y, x_999.y) * vec2<f32>(-0.081632003f, 0.081632003f)) + vec2<f32>(0.081632003f, 0.163264006f));
        let x_1003 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_1002.x, x_1003.y, x_1002.y, x_1003.w);
        let x_1006 : f32 = u_xlat8.y;
        u_xlat10.y = x_1006;
        let x_1008 : vec4<f32> = u_xlat10;
        let x_1009 : vec4<f32> = u_xlat12;
        u_xlat8 = (x_1008 + x_1009);
        let x_1011 : vec4<f32> = u_xlat9;
        let x_1012 : vec4<f32> = u_xlat11;
        u_xlat9 = (x_1011 / x_1012);
        let x_1014 : vec4<f32> = u_xlat9;
        u_xlat9 = (x_1014 + vec4<f32>(-3.5f, -1.5f, 0.5f, 2.5f));
        let x_1020 : vec4<f32> = u_xlat10;
        let x_1021 : vec4<f32> = u_xlat8;
        u_xlat10 = (x_1020 / x_1021);
        let x_1023 : vec4<f32> = u_xlat10;
        u_xlat10 = (x_1023 + vec4<f32>(-3.5f, -1.5f, 0.5f, 2.5f));
        let x_1025 : vec4<f32> = u_xlat9;
        let x_1028 : vec4<f32> = x_272.x_MainLightShadowmapSize;
        u_xlat9 = (vec4<f32>(x_1025.w, x_1025.x, x_1025.y, x_1025.z) * vec4<f32>(x_1028.x, x_1028.x, x_1028.x, x_1028.x));
        let x_1031 : vec4<f32> = u_xlat10;
        let x_1034 : vec4<f32> = x_272.x_MainLightShadowmapSize;
        u_xlat10 = (vec4<f32>(x_1031.x, x_1031.w, x_1031.y, x_1031.z) * vec4<f32>(x_1034.y, x_1034.y, x_1034.y, x_1034.y));
        let x_1037 : vec4<f32> = u_xlat9;
        let x_1038 : vec3<f32> = vec3<f32>(x_1037.y, x_1037.z, x_1037.w);
        let x_1039 : vec4<f32> = u_xlat12;
        u_xlat12 = vec4<f32>(x_1038.x, x_1039.y, x_1038.y, x_1038.z);
        let x_1042 : f32 = u_xlat10.x;
        u_xlat12.y = x_1042;
        let x_1044 : vec4<f32> = u_xlat7;
        let x_1047 : vec4<f32> = x_272.x_MainLightShadowmapSize;
        let x_1050 : vec4<f32> = u_xlat12;
        u_xlat13 = ((vec4<f32>(x_1044.x, x_1044.y, x_1044.x, x_1044.y) * vec4<f32>(x_1047.x, x_1047.y, x_1047.x, x_1047.y)) + vec4<f32>(x_1050.x, x_1050.y, x_1050.z, x_1050.y));
        let x_1053 : vec4<f32> = u_xlat7;
        let x_1056 : vec4<f32> = x_272.x_MainLightShadowmapSize;
        let x_1059 : vec4<f32> = u_xlat12;
        u_xlat49 = ((vec2<f32>(x_1053.x, x_1053.y) * vec2<f32>(x_1056.x, x_1056.y)) + vec2<f32>(x_1059.w, x_1059.y));
        let x_1063 : f32 = u_xlat12.y;
        u_xlat9.y = x_1063;
        let x_1066 : f32 = u_xlat10.z;
        u_xlat12.y = x_1066;
        let x_1068 : vec4<f32> = u_xlat7;
        let x_1071 : vec4<f32> = x_272.x_MainLightShadowmapSize;
        let x_1074 : vec4<f32> = u_xlat12;
        u_xlat14 = ((vec4<f32>(x_1068.x, x_1068.y, x_1068.x, x_1068.y) * vec4<f32>(x_1071.x, x_1071.y, x_1071.x, x_1071.y)) + vec4<f32>(x_1074.x, x_1074.y, x_1074.z, x_1074.y));
        let x_1077 : vec4<f32> = u_xlat7;
        let x_1080 : vec4<f32> = x_272.x_MainLightShadowmapSize;
        let x_1083 : vec4<f32> = u_xlat12;
        let x_1085 : vec2<f32> = ((vec2<f32>(x_1077.x, x_1077.y) * vec2<f32>(x_1080.x, x_1080.y)) + vec2<f32>(x_1083.w, x_1083.y));
        let x_1086 : vec4<f32> = u_xlat15;
        u_xlat15 = vec4<f32>(x_1085.x, x_1085.y, x_1086.z, x_1086.w);
        let x_1089 : f32 = u_xlat12.y;
        u_xlat9.z = x_1089;
        let x_1092 : vec4<f32> = u_xlat7;
        let x_1095 : vec4<f32> = x_272.x_MainLightShadowmapSize;
        let x_1098 : vec4<f32> = u_xlat9;
        u_xlat16 = ((vec4<f32>(x_1092.x, x_1092.y, x_1092.x, x_1092.y) * vec4<f32>(x_1095.x, x_1095.y, x_1095.x, x_1095.y)) + vec4<f32>(x_1098.x, x_1098.y, x_1098.x, x_1098.z));
        let x_1102 : f32 = u_xlat10.w;
        u_xlat12.y = x_1102;
        let x_1105 : vec4<f32> = u_xlat7;
        let x_1108 : vec4<f32> = x_272.x_MainLightShadowmapSize;
        let x_1111 : vec4<f32> = u_xlat12;
        u_xlat17 = ((vec4<f32>(x_1105.x, x_1105.y, x_1105.x, x_1105.y) * vec4<f32>(x_1108.x, x_1108.y, x_1108.x, x_1108.y)) + vec4<f32>(x_1111.x, x_1111.y, x_1111.z, x_1111.y));
        let x_1115 : vec4<f32> = u_xlat7;
        let x_1118 : vec4<f32> = x_272.x_MainLightShadowmapSize;
        let x_1121 : vec4<f32> = u_xlat12;
        u_xlat30 = ((vec2<f32>(x_1115.x, x_1115.y) * vec2<f32>(x_1118.x, x_1118.y)) + vec2<f32>(x_1121.w, x_1121.y));
        let x_1125 : f32 = u_xlat12.y;
        u_xlat9.w = x_1125;
        let x_1128 : vec4<f32> = u_xlat7;
        let x_1131 : vec4<f32> = x_272.x_MainLightShadowmapSize;
        let x_1134 : vec4<f32> = u_xlat9;
        u_xlat57 = ((vec2<f32>(x_1128.x, x_1128.y) * vec2<f32>(x_1131.x, x_1131.y)) + vec2<f32>(x_1134.x, x_1134.w));
        let x_1137 : vec4<f32> = u_xlat12;
        let x_1138 : vec3<f32> = vec3<f32>(x_1137.x, x_1137.z, x_1137.w);
        let x_1139 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_1138.x, x_1139.y, x_1138.y, x_1138.z);
        let x_1141 : vec4<f32> = u_xlat7;
        let x_1144 : vec4<f32> = x_272.x_MainLightShadowmapSize;
        let x_1147 : vec4<f32> = u_xlat10;
        u_xlat12 = ((vec4<f32>(x_1141.x, x_1141.y, x_1141.x, x_1141.y) * vec4<f32>(x_1144.x, x_1144.y, x_1144.x, x_1144.y)) + vec4<f32>(x_1147.x, x_1147.y, x_1147.z, x_1147.y));
        let x_1151 : vec4<f32> = u_xlat7;
        let x_1154 : vec4<f32> = x_272.x_MainLightShadowmapSize;
        let x_1157 : vec4<f32> = u_xlat10;
        u_xlat52 = ((vec2<f32>(x_1151.x, x_1151.y) * vec2<f32>(x_1154.x, x_1154.y)) + vec2<f32>(x_1157.w, x_1157.y));
        let x_1161 : f32 = u_xlat9.x;
        u_xlat10.x = x_1161;
        let x_1163 : vec4<f32> = u_xlat7;
        let x_1166 : vec4<f32> = x_272.x_MainLightShadowmapSize;
        let x_1169 : vec4<f32> = u_xlat10;
        let x_1171 : vec2<f32> = ((vec2<f32>(x_1163.x, x_1163.y) * vec2<f32>(x_1166.x, x_1166.y)) + vec2<f32>(x_1169.x, x_1169.y));
        let x_1172 : vec4<f32> = u_xlat7;
        u_xlat7 = vec4<f32>(x_1171.x, x_1171.y, x_1172.z, x_1172.w);
        let x_1175 : vec4<f32> = u_xlat8;
        let x_1177 : vec4<f32> = u_xlat11;
        u_xlat18 = (vec4<f32>(x_1175.x, x_1175.x, x_1175.x, x_1175.x) * x_1177);
        let x_1180 : vec4<f32> = u_xlat8;
        let x_1182 : vec4<f32> = u_xlat11;
        u_xlat19 = (vec4<f32>(x_1180.y, x_1180.y, x_1180.y, x_1180.y) * x_1182);
        let x_1185 : vec4<f32> = u_xlat8;
        let x_1187 : vec4<f32> = u_xlat11;
        u_xlat20 = (vec4<f32>(x_1185.z, x_1185.z, x_1185.z, x_1185.z) * x_1187);
        let x_1189 : vec4<f32> = u_xlat8;
        let x_1191 : vec4<f32> = u_xlat11;
        u_xlat8 = (vec4<f32>(x_1189.w, x_1189.w, x_1189.w, x_1189.w) * x_1191);
        let x_1194 : vec4<f32> = u_xlat13;
        let x_1195 : vec2<f32> = vec2<f32>(x_1194.x, x_1194.y);
        let x_1197 : f32 = u_xlat6.z;
        txVec13 = vec3<f32>(x_1195.x, x_1195.y, x_1197);
        let x_1204 : vec3<f32> = txVec13;
        let x_1206 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1204.xy, x_1204.z);
        u_xlat65 = x_1206;
        let x_1208 : vec4<f32> = u_xlat13;
        let x_1209 : vec2<f32> = vec2<f32>(x_1208.z, x_1208.w);
        let x_1211 : f32 = u_xlat6.z;
        txVec14 = vec3<f32>(x_1209.x, x_1209.y, x_1211);
        let x_1218 : vec3<f32> = txVec14;
        let x_1220 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1218.xy, x_1218.z);
        u_xlat67 = x_1220;
        let x_1221 : f32 = u_xlat67;
        let x_1223 : f32 = u_xlat18.y;
        u_xlat67 = (x_1221 * x_1223);
        let x_1226 : f32 = u_xlat18.x;
        let x_1227 : f32 = u_xlat65;
        let x_1229 : f32 = u_xlat67;
        u_xlat65 = ((x_1226 * x_1227) + x_1229);
        let x_1232 : vec2<f32> = u_xlat49;
        let x_1234 : f32 = u_xlat6.z;
        txVec15 = vec3<f32>(x_1232.x, x_1232.y, x_1234);
        let x_1241 : vec3<f32> = txVec15;
        let x_1243 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1241.xy, x_1241.z);
        u_xlat67 = x_1243;
        let x_1245 : f32 = u_xlat18.z;
        let x_1246 : f32 = u_xlat67;
        let x_1248 : f32 = u_xlat65;
        u_xlat65 = ((x_1245 * x_1246) + x_1248);
        let x_1251 : vec4<f32> = u_xlat16;
        let x_1252 : vec2<f32> = vec2<f32>(x_1251.x, x_1251.y);
        let x_1254 : f32 = u_xlat6.z;
        txVec16 = vec3<f32>(x_1252.x, x_1252.y, x_1254);
        let x_1261 : vec3<f32> = txVec16;
        let x_1263 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1261.xy, x_1261.z);
        u_xlat67 = x_1263;
        let x_1265 : f32 = u_xlat18.w;
        let x_1266 : f32 = u_xlat67;
        let x_1268 : f32 = u_xlat65;
        u_xlat65 = ((x_1265 * x_1266) + x_1268);
        let x_1271 : vec4<f32> = u_xlat14;
        let x_1272 : vec2<f32> = vec2<f32>(x_1271.x, x_1271.y);
        let x_1274 : f32 = u_xlat6.z;
        txVec17 = vec3<f32>(x_1272.x, x_1272.y, x_1274);
        let x_1281 : vec3<f32> = txVec17;
        let x_1283 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1281.xy, x_1281.z);
        u_xlat67 = x_1283;
        let x_1285 : f32 = u_xlat19.x;
        let x_1286 : f32 = u_xlat67;
        let x_1288 : f32 = u_xlat65;
        u_xlat65 = ((x_1285 * x_1286) + x_1288);
        let x_1291 : vec4<f32> = u_xlat14;
        let x_1292 : vec2<f32> = vec2<f32>(x_1291.z, x_1291.w);
        let x_1294 : f32 = u_xlat6.z;
        txVec18 = vec3<f32>(x_1292.x, x_1292.y, x_1294);
        let x_1301 : vec3<f32> = txVec18;
        let x_1303 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1301.xy, x_1301.z);
        u_xlat67 = x_1303;
        let x_1305 : f32 = u_xlat19.y;
        let x_1306 : f32 = u_xlat67;
        let x_1308 : f32 = u_xlat65;
        u_xlat65 = ((x_1305 * x_1306) + x_1308);
        let x_1311 : vec4<f32> = u_xlat15;
        let x_1312 : vec2<f32> = vec2<f32>(x_1311.x, x_1311.y);
        let x_1314 : f32 = u_xlat6.z;
        txVec19 = vec3<f32>(x_1312.x, x_1312.y, x_1314);
        let x_1321 : vec3<f32> = txVec19;
        let x_1323 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1321.xy, x_1321.z);
        u_xlat67 = x_1323;
        let x_1325 : f32 = u_xlat19.z;
        let x_1326 : f32 = u_xlat67;
        let x_1328 : f32 = u_xlat65;
        u_xlat65 = ((x_1325 * x_1326) + x_1328);
        let x_1331 : vec4<f32> = u_xlat16;
        let x_1332 : vec2<f32> = vec2<f32>(x_1331.z, x_1331.w);
        let x_1334 : f32 = u_xlat6.z;
        txVec20 = vec3<f32>(x_1332.x, x_1332.y, x_1334);
        let x_1341 : vec3<f32> = txVec20;
        let x_1343 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1341.xy, x_1341.z);
        u_xlat67 = x_1343;
        let x_1345 : f32 = u_xlat19.w;
        let x_1346 : f32 = u_xlat67;
        let x_1348 : f32 = u_xlat65;
        u_xlat65 = ((x_1345 * x_1346) + x_1348);
        let x_1351 : vec4<f32> = u_xlat17;
        let x_1352 : vec2<f32> = vec2<f32>(x_1351.x, x_1351.y);
        let x_1354 : f32 = u_xlat6.z;
        txVec21 = vec3<f32>(x_1352.x, x_1352.y, x_1354);
        let x_1361 : vec3<f32> = txVec21;
        let x_1363 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1361.xy, x_1361.z);
        u_xlat67 = x_1363;
        let x_1365 : f32 = u_xlat20.x;
        let x_1366 : f32 = u_xlat67;
        let x_1368 : f32 = u_xlat65;
        u_xlat65 = ((x_1365 * x_1366) + x_1368);
        let x_1371 : vec4<f32> = u_xlat17;
        let x_1372 : vec2<f32> = vec2<f32>(x_1371.z, x_1371.w);
        let x_1374 : f32 = u_xlat6.z;
        txVec22 = vec3<f32>(x_1372.x, x_1372.y, x_1374);
        let x_1381 : vec3<f32> = txVec22;
        let x_1383 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1381.xy, x_1381.z);
        u_xlat67 = x_1383;
        let x_1385 : f32 = u_xlat20.y;
        let x_1386 : f32 = u_xlat67;
        let x_1388 : f32 = u_xlat65;
        u_xlat65 = ((x_1385 * x_1386) + x_1388);
        let x_1391 : vec2<f32> = u_xlat30;
        let x_1393 : f32 = u_xlat6.z;
        txVec23 = vec3<f32>(x_1391.x, x_1391.y, x_1393);
        let x_1400 : vec3<f32> = txVec23;
        let x_1402 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1400.xy, x_1400.z);
        u_xlat67 = x_1402;
        let x_1404 : f32 = u_xlat20.z;
        let x_1405 : f32 = u_xlat67;
        let x_1407 : f32 = u_xlat65;
        u_xlat65 = ((x_1404 * x_1405) + x_1407);
        let x_1410 : vec2<f32> = u_xlat57;
        let x_1412 : f32 = u_xlat6.z;
        txVec24 = vec3<f32>(x_1410.x, x_1410.y, x_1412);
        let x_1419 : vec3<f32> = txVec24;
        let x_1421 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1419.xy, x_1419.z);
        u_xlat67 = x_1421;
        let x_1423 : f32 = u_xlat20.w;
        let x_1424 : f32 = u_xlat67;
        let x_1426 : f32 = u_xlat65;
        u_xlat65 = ((x_1423 * x_1424) + x_1426);
        let x_1429 : vec4<f32> = u_xlat12;
        let x_1430 : vec2<f32> = vec2<f32>(x_1429.x, x_1429.y);
        let x_1432 : f32 = u_xlat6.z;
        txVec25 = vec3<f32>(x_1430.x, x_1430.y, x_1432);
        let x_1439 : vec3<f32> = txVec25;
        let x_1441 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1439.xy, x_1439.z);
        u_xlat67 = x_1441;
        let x_1443 : f32 = u_xlat8.x;
        let x_1444 : f32 = u_xlat67;
        let x_1446 : f32 = u_xlat65;
        u_xlat65 = ((x_1443 * x_1444) + x_1446);
        let x_1449 : vec4<f32> = u_xlat12;
        let x_1450 : vec2<f32> = vec2<f32>(x_1449.z, x_1449.w);
        let x_1452 : f32 = u_xlat6.z;
        txVec26 = vec3<f32>(x_1450.x, x_1450.y, x_1452);
        let x_1459 : vec3<f32> = txVec26;
        let x_1461 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1459.xy, x_1459.z);
        u_xlat67 = x_1461;
        let x_1463 : f32 = u_xlat8.y;
        let x_1464 : f32 = u_xlat67;
        let x_1466 : f32 = u_xlat65;
        u_xlat65 = ((x_1463 * x_1464) + x_1466);
        let x_1469 : vec2<f32> = u_xlat52;
        let x_1471 : f32 = u_xlat6.z;
        txVec27 = vec3<f32>(x_1469.x, x_1469.y, x_1471);
        let x_1478 : vec3<f32> = txVec27;
        let x_1480 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1478.xy, x_1478.z);
        u_xlat67 = x_1480;
        let x_1482 : f32 = u_xlat8.z;
        let x_1483 : f32 = u_xlat67;
        let x_1485 : f32 = u_xlat65;
        u_xlat65 = ((x_1482 * x_1483) + x_1485);
        let x_1488 : vec4<f32> = u_xlat7;
        let x_1489 : vec2<f32> = vec2<f32>(x_1488.x, x_1488.y);
        let x_1491 : f32 = u_xlat6.z;
        txVec28 = vec3<f32>(x_1489.x, x_1489.y, x_1491);
        let x_1498 : vec3<f32> = txVec28;
        let x_1500 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1498.xy, x_1498.z);
        u_xlat67 = x_1500;
        let x_1502 : f32 = u_xlat8.w;
        let x_1503 : f32 = u_xlat67;
        let x_1505 : f32 = u_xlat65;
        u_xlat64 = ((x_1502 * x_1503) + x_1505);
      }
    }
  } else {
    let x_1509 : vec4<f32> = u_xlat6;
    let x_1510 : vec2<f32> = vec2<f32>(x_1509.x, x_1509.y);
    let x_1512 : f32 = u_xlat6.z;
    txVec29 = vec3<f32>(x_1510.x, x_1510.y, x_1512);
    let x_1519 : vec3<f32> = txVec29;
    let x_1521 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1519.xy, x_1519.z);
    u_xlat64 = x_1521;
  }
  let x_1523 : f32 = x_272.x_MainLightShadowParams.x;
  u_xlat65 = (-(x_1523) + 1.0f);
  let x_1526 : f32 = u_xlat64;
  let x_1528 : f32 = x_272.x_MainLightShadowParams.x;
  let x_1530 : f32 = u_xlat65;
  u_xlat64 = ((x_1526 * x_1528) + x_1530);
  let x_1534 : f32 = u_xlat6.z;
  u_xlatb67 = (0.0f >= x_1534);
  let x_1538 : f32 = u_xlat6.z;
  u_xlatb6 = (x_1538 >= 1.0f);
  let x_1540 : bool = u_xlatb67;
  let x_1541 : bool = u_xlatb6;
  u_xlatb67 = (x_1540 | x_1541);
  let x_1543 : bool = u_xlatb67;
  let x_1544 : f32 = u_xlat64;
  u_xlat64 = select(x_1544, 1.0f, x_1543);
  let x_1546 : vec3<f32> = u_xlat0;
  let x_1548 : vec4<f32> = x_90.x_MainLightPosition;
  u_xlat0.x = dot(x_1546, -(vec3<f32>(x_1548.x, x_1548.y, x_1548.z)));
  let x_1554 : f32 = u_xlat0.x;
  u_xlat0.x = clamp(x_1554, 0.0f, 1.0f);
  let x_1557 : f32 = u_xlat64;
  let x_1561 : vec4<f32> = x_90.x_MainLightColor;
  let x_1563 : vec3<f32> = (vec3<f32>(x_1557, x_1557, x_1557) * vec3<f32>(x_1561.x, x_1561.y, x_1561.z));
  let x_1564 : vec4<f32> = u_xlat6;
  u_xlat6 = vec4<f32>(x_1563.x, x_1563.y, x_1563.z, x_1564.w);
  let x_1566 : vec3<f32> = u_xlat0;
  let x_1568 : vec4<f32> = u_xlat6;
  u_xlat0 = (vec3<f32>(x_1566.x, x_1566.x, x_1566.x) * vec3<f32>(x_1568.x, x_1568.y, x_1568.z));
  let x_1571 : vec3<f32> = u_xlat0;
  let x_1572 : vec4<f32> = u_xlat3;
  u_xlat0 = (x_1571 * vec3<f32>(x_1572.x, x_1572.y, x_1572.z));
  let x_1576 : f32 = x_161.unity_LODFade.x;
  u_xlatb64 = (x_1576 < 0.0f);
  let x_1579 : f32 = x_161.unity_LODFade.x;
  u_xlat3.x = (x_1579 + 1.0f);
  let x_1582 : bool = u_xlatb64;
  if (x_1582) {
    let x_1587 : f32 = u_xlat3.x;
    x_1583 = x_1587;
  } else {
    let x_1590 : f32 = x_161.unity_LODFade.x;
    x_1583 = x_1590;
  }
  let x_1591 : f32 = x_1583;
  u_xlat64 = x_1591;
  let x_1593 : f32 = u_xlat64;
  u_xlatb3 = (0.5f >= x_1593);
  let x_1595 : vec3<f32> = u_xlat1;
  let x_1598 : vec4<f32> = x_90.x_ScreenParams;
  u_xlat1 = (abs(x_1595) * vec3<f32>(x_1598.x, x_1598.y, x_1598.x));
  let x_1604 : vec3<f32> = u_xlat1;
  u_xlatu1 = vec3<u32>(x_1604);
  let x_1608 : u32 = u_xlatu1.z;
  u_xlatu43 = (x_1608 * 1025u);
  let x_1612 : u32 = u_xlatu43;
  u_xlatu24 = (x_1612 >> 6u);
  let x_1616 : u32 = u_xlatu43;
  let x_1617 : u32 = u_xlatu24;
  u_xlati43 = bitcast<i32>((x_1616 ^ x_1617));
  let x_1620 : i32 = u_xlati43;
  u_xlatu43 = (bitcast<u32>(x_1620) * 9u);
  let x_1624 : u32 = u_xlatu43;
  u_xlatu24 = (x_1624 >> 11u);
  let x_1627 : u32 = u_xlatu43;
  let x_1628 : u32 = u_xlatu24;
  u_xlati43 = bitcast<i32>((x_1627 ^ x_1628));
  let x_1631 : i32 = u_xlati43;
  u_xlati43 = (x_1631 * 32769i);
  let x_1635 : i32 = u_xlati43;
  let x_1638 : u32 = u_xlatu1.y;
  u_xlati22 = bitcast<i32>((bitcast<u32>(x_1635) ^ x_1638));
  let x_1642 : i32 = u_xlati22;
  u_xlatu22 = (bitcast<u32>(x_1642) * 1025u);
  let x_1645 : u32 = u_xlatu22;
  u_xlatu43 = (x_1645 >> 6u);
  let x_1647 : u32 = u_xlatu43;
  let x_1648 : u32 = u_xlatu22;
  u_xlati22 = bitcast<i32>((x_1647 ^ x_1648));
  let x_1651 : i32 = u_xlati22;
  u_xlatu22 = (bitcast<u32>(x_1651) * 9u);
  let x_1654 : u32 = u_xlatu22;
  u_xlatu43 = (x_1654 >> 11u);
  let x_1656 : u32 = u_xlatu43;
  let x_1657 : u32 = u_xlatu22;
  u_xlati22 = bitcast<i32>((x_1656 ^ x_1657));
  let x_1660 : i32 = u_xlati22;
  u_xlati22 = (x_1660 * 32769i);
  let x_1663 : i32 = u_xlati22;
  let x_1666 : u32 = u_xlatu1.x;
  u_xlati1 = bitcast<i32>((bitcast<u32>(x_1663) ^ x_1666));
  let x_1669 : i32 = u_xlati1;
  u_xlatu1.x = (bitcast<u32>(x_1669) * 1025u);
  let x_1674 : u32 = u_xlatu1.x;
  u_xlatu22 = (x_1674 >> 6u);
  let x_1676 : u32 = u_xlatu22;
  let x_1678 : u32 = u_xlatu1.x;
  u_xlati1 = bitcast<i32>((x_1676 ^ x_1678));
  let x_1681 : i32 = u_xlati1;
  u_xlatu1.x = (bitcast<u32>(x_1681) * 9u);
  let x_1686 : u32 = u_xlatu1.x;
  u_xlatu22 = (x_1686 >> 11u);
  let x_1688 : u32 = u_xlatu22;
  let x_1690 : u32 = u_xlatu1.x;
  u_xlati1 = bitcast<i32>((x_1688 ^ x_1690));
  let x_1693 : i32 = u_xlati1;
  u_xlati1 = (x_1693 * 32769i);
  param = 1065353216i;
  let x_1699 : i32 = u_xlati1;
  param_1 = x_1699;
  param_2 = 0i;
  param_3 = 23i;
  let x_1702 : i32 = int_bitfieldInsert_i1_i1_i1_i1_(&(param), &(param_1), &(param_2), &(param_3));
  u_xlat1.x = bitcast<f32>(x_1702);
  let x_1706 : f32 = u_xlat1.x;
  u_xlat1.x = (x_1706 + -1.0f);
  let x_1711 : f32 = u_xlat1.x;
  u_xlat22 = (-(x_1711) + 1.0f);
  let x_1714 : bool = u_xlatb3;
  if (x_1714) {
    let x_1719 : f32 = u_xlat1.x;
    x_1715 = x_1719;
  } else {
    let x_1721 : f32 = u_xlat22;
    x_1715 = x_1721;
  }
  let x_1722 : f32 = x_1715;
  u_xlat1.x = x_1722;
  let x_1724 : f32 = u_xlat64;
  let x_1727 : f32 = u_xlat1.x;
  u_xlat1.x = ((x_1724 * 2.0f) + -(x_1727));
  let x_1732 : f32 = u_xlat1.x;
  let x_1734 : f32 = u_xlat3.w;
  u_xlat22 = (x_1732 * x_1734);
  let x_1739 : f32 = u_xlat22;
  u_xlatb43.x = (x_1739 >= 0.400000006f);
  let x_1745 : bool = u_xlatb43.x;
  let x_1746 : f32 = u_xlat22;
  u_xlat43.x = select(0.0f, x_1746, x_1745);
  let x_1750 : f32 = u_xlat3.w;
  let x_1752 : f32 = u_xlat1.x;
  u_xlat1.x = ((x_1750 * x_1752) + -0.400000006f);
  let x_1757 : f32 = u_xlat22;
  u_xlat64 = dpdxCoarse(x_1757);
  let x_1759 : f32 = u_xlat22;
  u_xlat22 = dpdyCoarse(x_1759);
  let x_1761 : f32 = u_xlat22;
  let x_1763 : f32 = u_xlat64;
  u_xlat22 = (abs(x_1761) + abs(x_1763));
  let x_1766 : f32 = u_xlat22;
  u_xlat22 = max(x_1766, 0.0001f);
  let x_1770 : f32 = u_xlat1.x;
  let x_1771 : f32 = u_xlat22;
  u_xlat1.x = (x_1770 / x_1771);
  let x_1775 : f32 = u_xlat1.x;
  u_xlat1.x = (x_1775 + 0.5f);
  let x_1779 : f32 = u_xlat1.x;
  u_xlat1.x = clamp(x_1779, 0.0f, 1.0f);
  let x_1784 : f32 = x_90.x_AlphaToMaskAvailable;
  u_xlatb22 = !((x_1784 == 0.0f));
  let x_1786 : bool = u_xlatb22;
  if (x_1786) {
    let x_1791 : f32 = u_xlat1.x;
    x_1787 = x_1791;
  } else {
    let x_1794 : f32 = u_xlat43.x;
    x_1787 = x_1794;
  }
  let x_1795 : f32 = x_1787;
  u_xlat1.x = x_1795;
  let x_1798 : f32 = u_xlat1.x;
  u_xlat43.x = (x_1798 + -0.0001f);
  let x_1803 : f32 = u_xlat43.x;
  u_xlatb43.x = (x_1803 < 0.0f);
  let x_1807 : bool = u_xlatb43.x;
  if (((select(0i, 1i, x_1807) * -1i) != 0i)) {
    discard;
  }
  let x_1817 : f32 = vs_INTERP2.w;
  u_xlatb43.x = (0.0f < x_1817);
  let x_1821 : f32 = x_161.unity_WorldTransformParams.w;
  u_xlatb43.y = (x_1821 >= 0.0f);
  let x_1825 : bool = u_xlatb43.x;
  u_xlat43.x = select(-1.0f, 1.0f, x_1825);
  let x_1829 : bool = u_xlatb43.y;
  u_xlat43.y = select(-1.0f, 1.0f, x_1829);
  let x_1833 : f32 = u_xlat43.y;
  let x_1835 : f32 = u_xlat43.x;
  u_xlat43.x = (x_1833 * x_1835);
  let x_1838 : vec3<f32> = vs_INTERP1;
  let x_1840 : vec4<f32> = vs_INTERP2;
  let x_1842 : vec3<f32> = (vec3<f32>(x_1838.z, x_1838.x, x_1838.y) * vec3<f32>(x_1840.y, x_1840.z, x_1840.x));
  let x_1843 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_1842.x, x_1842.y, x_1842.z, x_1843.w);
  let x_1845 : vec3<f32> = vs_INTERP1;
  let x_1847 : vec4<f32> = vs_INTERP2;
  let x_1850 : vec4<f32> = u_xlat3;
  let x_1853 : vec3<f32> = ((vec3<f32>(x_1845.y, x_1845.z, x_1845.x) * vec3<f32>(x_1847.z, x_1847.x, x_1847.y)) + -(vec3<f32>(x_1850.x, x_1850.y, x_1850.z)));
  let x_1854 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_1853.x, x_1853.y, x_1853.z, x_1854.w);
  let x_1856 : vec2<f32> = u_xlat43;
  let x_1858 : vec4<f32> = u_xlat3;
  let x_1860 : vec3<f32> = (vec3<f32>(x_1856.x, x_1856.x, x_1856.x) * vec3<f32>(x_1858.x, x_1858.y, x_1858.z));
  let x_1861 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_1860.x, x_1860.y, x_1860.z, x_1861.w);
  let x_1863 : vec4<f32> = u_xlat3;
  let x_1865 : vec3<f32> = u_xlat26;
  let x_1867 : vec3<f32> = (vec3<f32>(x_1863.x, x_1863.y, x_1863.z) * vec3<f32>(x_1865.y, x_1865.y, x_1865.y));
  let x_1868 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_1867.x, x_1867.y, x_1867.z, x_1868.w);
  let x_1870 : vec3<f32> = u_xlat26;
  let x_1872 : vec4<f32> = vs_INTERP2;
  let x_1875 : vec4<f32> = u_xlat3;
  let x_1877 : vec3<f32> = ((vec3<f32>(x_1870.x, x_1870.x, x_1870.x) * vec3<f32>(x_1872.x, x_1872.y, x_1872.z)) + vec3<f32>(x_1875.x, x_1875.y, x_1875.z));
  let x_1878 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_1877.x, x_1877.y, x_1877.z, x_1878.w);
  let x_1880 : vec3<f32> = u_xlat26;
  let x_1882 : vec3<f32> = vs_INTERP1;
  let x_1884 : vec4<f32> = u_xlat3;
  let x_1886 : vec3<f32> = ((vec3<f32>(x_1880.z, x_1880.z, x_1880.z) * x_1882) + vec3<f32>(x_1884.x, x_1884.y, x_1884.z));
  let x_1887 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_1886.x, x_1886.y, x_1886.z, x_1887.w);
  let x_1889 : vec4<f32> = u_xlat3;
  let x_1891 : vec4<f32> = u_xlat3;
  u_xlat43.x = dot(vec3<f32>(x_1889.x, x_1889.y, x_1889.z), vec3<f32>(x_1891.x, x_1891.y, x_1891.z));
  let x_1896 : f32 = u_xlat43.x;
  u_xlat43.x = inverseSqrt(x_1896);
  let x_1899 : vec2<f32> = u_xlat43;
  let x_1901 : vec4<f32> = u_xlat3;
  let x_1903 : vec3<f32> = (vec3<f32>(x_1899.x, x_1899.x, x_1899.x) * vec3<f32>(x_1901.x, x_1901.y, x_1901.z));
  let x_1904 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_1903.x, x_1903.y, x_1903.z, x_1904.w);
  u_xlat3.w = 1.0f;
  let x_1909 : vec4<f32> = x_161.unity_SHAr;
  let x_1910 : vec4<f32> = u_xlat3;
  u_xlat6.x = dot(x_1909, x_1910);
  let x_1915 : vec4<f32> = x_161.unity_SHAg;
  let x_1916 : vec4<f32> = u_xlat3;
  u_xlat6.y = dot(x_1915, x_1916);
  let x_1921 : vec4<f32> = x_161.unity_SHAb;
  let x_1922 : vec4<f32> = u_xlat3;
  u_xlat6.z = dot(x_1921, x_1922);
  let x_1925 : vec4<f32> = u_xlat3;
  let x_1927 : vec4<f32> = u_xlat3;
  u_xlat7 = (vec4<f32>(x_1925.y, x_1925.z, x_1925.z, x_1925.x) * vec4<f32>(x_1927.x, x_1927.y, x_1927.z, x_1927.z));
  let x_1932 : vec4<f32> = x_161.unity_SHBr;
  let x_1933 : vec4<f32> = u_xlat7;
  u_xlat8.x = dot(x_1932, x_1933);
  let x_1938 : vec4<f32> = x_161.unity_SHBg;
  let x_1939 : vec4<f32> = u_xlat7;
  u_xlat8.y = dot(x_1938, x_1939);
  let x_1943 : vec4<f32> = x_161.unity_SHBb;
  let x_1944 : vec4<f32> = u_xlat7;
  u_xlat8.z = dot(x_1943, x_1944);
  let x_1948 : f32 = u_xlat3.y;
  let x_1950 : f32 = u_xlat3.y;
  u_xlat43.x = (x_1948 * x_1950);
  let x_1954 : f32 = u_xlat3.x;
  let x_1956 : f32 = u_xlat3.x;
  let x_1959 : f32 = u_xlat43.x;
  u_xlat43.x = ((x_1954 * x_1956) + -(x_1959));
  let x_1965 : vec4<f32> = x_161.unity_SHC;
  let x_1967 : vec2<f32> = u_xlat43;
  let x_1970 : vec4<f32> = u_xlat8;
  u_xlat26 = ((vec3<f32>(x_1965.x, x_1965.y, x_1965.z) * vec3<f32>(x_1967.x, x_1967.x, x_1967.x)) + vec3<f32>(x_1970.x, x_1970.y, x_1970.z));
  let x_1973 : vec3<f32> = u_xlat26;
  let x_1974 : vec4<f32> = u_xlat6;
  u_xlat26 = (x_1973 + vec3<f32>(x_1974.x, x_1974.y, x_1974.z));
  let x_1977 : vec3<f32> = u_xlat26;
  u_xlat26 = max(x_1977, vec3<f32>(0.0f, 0.0f, 0.0f));
  let x_1981 : vec4<f32> = x_90.x_ScaledScreenParams;
  let x_1982 : vec2<f32> = vec2<f32>(x_1981.x, x_1981.y);
  u_xlat43 = (vec2<f32>(1.0f, 1.0f) / vec2<f32>(x_1982.x, x_1982.y));
  let x_1987 : vec2<f32> = u_xlat43;
  let x_1988 : vec4<f32> = hlslcc_FragCoord;
  let x_1990 : vec2<f32> = (x_1987 * vec2<f32>(x_1988.x, x_1988.y));
  let x_1991 : vec4<f32> = u_xlat6;
  u_xlat6 = vec4<f32>(x_1990.x, x_1990.y, x_1991.z, x_1991.w);
  let x_1994 : f32 = u_xlat6.y;
  let x_1997 : f32 = x_90.x_ScaleBiasRt.x;
  let x_2000 : f32 = x_90.x_ScaleBiasRt.y;
  u_xlat43.x = ((x_1994 * x_1997) + x_2000);
  let x_2004 : f32 = u_xlat43.x;
  u_xlat6.z = (-(x_2004) + 1.0f);
  let x_2009 : f32 = u_xlat5.x;
  u_xlat5.x = x_2009;
  let x_2012 : f32 = u_xlat5.x;
  u_xlat5.x = clamp(x_2012, 0.0f, 1.0f);
  let x_2016 : f32 = u_xlat1.x;
  u_xlat1.x = x_2016;
  let x_2019 : f32 = u_xlat1.x;
  u_xlat1.x = clamp(x_2019, 0.0f, 1.0f);
  let x_2022 : vec3<f32> = u_xlat4;
  u_xlat4 = (x_2022 * vec3<f32>(0.959999979f, 0.959999979f, 0.959999979f));
  let x_2027 : f32 = u_xlat5.x;
  u_xlat43.x = (-(x_2027) + 1.0f);
  let x_2032 : f32 = u_xlat43.x;
  let x_2034 : f32 = u_xlat43.x;
  u_xlat64 = (x_2032 * x_2034);
  let x_2036 : f32 = u_xlat64;
  u_xlat64 = max(x_2036, 0.0078125f);
  let x_2040 : f32 = u_xlat64;
  let x_2041 : f32 = u_xlat64;
  u_xlat66 = (x_2040 * x_2041);
  let x_2044 : f32 = u_xlat5.x;
  u_xlat67 = (x_2044 + 0.040000021f);
  let x_2047 : f32 = u_xlat67;
  u_xlat67 = min(x_2047, 1.0f);
  let x_2049 : f32 = u_xlat64;
  u_xlat5.x = ((x_2049 * 4.0f) + 2.0f);
  let x_2059 : vec4<f32> = u_xlat6;
  let x_2062 : f32 = x_90.x_GlobalMipBias.x;
  let x_2063 : vec4<f32> = textureSampleBias(x_ScreenSpaceOcclusionTexture, sampler_ScreenSpaceOcclusionTexture, vec2<f32>(x_2059.x, x_2059.z), x_2062);
  u_xlat6.x = x_2063.x;
  let x_2068 : f32 = u_xlat6.x;
  u_xlat27 = (x_2068 + -1.0f);
  let x_2072 : f32 = x_90.x_AmbientOcclusionParam.w;
  let x_2073 : f32 = u_xlat27;
  u_xlat27 = ((x_2072 * x_2073) + 1.0f);
  let x_2077 : f32 = u_xlat6.x;
  let x_2079 : f32 = vs_INTERP4.w;
  u_xlat6.x = min(x_2077, x_2079);
  let x_2082 : bool = u_xlatb63;
  if (x_2082) {
    let x_2086 : f32 = x_272.x_MainLightShadowParams.y;
    u_xlatb63 = (x_2086 == 1.0f);
    let x_2088 : bool = u_xlatb63;
    if (x_2088) {
      let x_2092 : vec4<f32> = vs_INTERP9;
      let x_2095 : vec4<f32> = x_272.x_MainLightShadowOffset0;
      u_xlat7 = (vec4<f32>(x_2092.x, x_2092.y, x_2092.x, x_2092.y) + x_2095);
      let x_2098 : vec4<f32> = u_xlat7;
      let x_2099 : vec2<f32> = vec2<f32>(x_2098.x, x_2098.y);
      let x_2101 : f32 = vs_INTERP9.z;
      txVec30 = vec3<f32>(x_2099.x, x_2099.y, x_2101);
      let x_2108 : vec3<f32> = txVec30;
      let x_2110 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2108.xy, x_2108.z);
      u_xlat8.x = x_2110;
      let x_2113 : vec4<f32> = u_xlat7;
      let x_2114 : vec2<f32> = vec2<f32>(x_2113.z, x_2113.w);
      let x_2116 : f32 = vs_INTERP9.z;
      txVec31 = vec3<f32>(x_2114.x, x_2114.y, x_2116);
      let x_2123 : vec3<f32> = txVec31;
      let x_2125 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2123.xy, x_2123.z);
      u_xlat8.y = x_2125;
      let x_2127 : vec4<f32> = vs_INTERP9;
      let x_2130 : vec4<f32> = x_272.x_MainLightShadowOffset1;
      u_xlat7 = (vec4<f32>(x_2127.x, x_2127.y, x_2127.x, x_2127.y) + x_2130);
      let x_2133 : vec4<f32> = u_xlat7;
      let x_2134 : vec2<f32> = vec2<f32>(x_2133.x, x_2133.y);
      let x_2136 : f32 = vs_INTERP9.z;
      txVec32 = vec3<f32>(x_2134.x, x_2134.y, x_2136);
      let x_2143 : vec3<f32> = txVec32;
      let x_2145 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2143.xy, x_2143.z);
      u_xlat8.z = x_2145;
      let x_2148 : vec4<f32> = u_xlat7;
      let x_2149 : vec2<f32> = vec2<f32>(x_2148.z, x_2148.w);
      let x_2151 : f32 = vs_INTERP9.z;
      txVec33 = vec3<f32>(x_2149.x, x_2149.y, x_2151);
      let x_2158 : vec3<f32> = txVec33;
      let x_2160 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2158.xy, x_2158.z);
      u_xlat8.w = x_2160;
      let x_2162 : vec4<f32> = u_xlat8;
      u_xlat63 = dot(x_2162, vec4<f32>(0.25f, 0.25f, 0.25f, 0.25f));
    } else {
      let x_2167 : f32 = x_272.x_MainLightShadowParams.y;
      u_xlatb48.x = (x_2167 == 2.0f);
      let x_2171 : bool = u_xlatb48.x;
      if (x_2171) {
        let x_2175 : vec4<f32> = vs_INTERP9;
        let x_2178 : vec4<f32> = x_272.x_MainLightShadowmapSize;
        u_xlat48 = ((vec2<f32>(x_2175.x, x_2175.y) * vec2<f32>(x_2178.z, x_2178.w)) + vec2<f32>(0.5f, 0.5f));
        let x_2182 : vec2<f32> = u_xlat48;
        u_xlat48 = floor(x_2182);
        let x_2184 : vec4<f32> = vs_INTERP9;
        let x_2187 : vec4<f32> = x_272.x_MainLightShadowmapSize;
        let x_2190 : vec2<f32> = u_xlat48;
        let x_2192 : vec2<f32> = ((vec2<f32>(x_2184.x, x_2184.y) * vec2<f32>(x_2187.z, x_2187.w)) + -(x_2190));
        let x_2193 : vec4<f32> = u_xlat7;
        u_xlat7 = vec4<f32>(x_2192.x, x_2192.y, x_2193.z, x_2193.w);
        let x_2195 : vec4<f32> = u_xlat7;
        u_xlat8 = (vec4<f32>(x_2195.x, x_2195.x, x_2195.y, x_2195.y) + vec4<f32>(0.5f, 1.0f, 0.5f, 1.0f));
        let x_2198 : vec4<f32> = u_xlat8;
        let x_2200 : vec4<f32> = u_xlat8;
        u_xlat9 = (vec4<f32>(x_2198.x, x_2198.x, x_2198.z, x_2198.z) * vec4<f32>(x_2200.x, x_2200.x, x_2200.z, x_2200.z));
        let x_2203 : vec4<f32> = u_xlat9;
        u_xlat49 = (vec2<f32>(x_2203.y, x_2203.w) * vec2<f32>(0.079999998f, 0.079999998f));
        let x_2206 : vec4<f32> = u_xlat9;
        let x_2209 : vec4<f32> = u_xlat7;
        let x_2212 : vec2<f32> = ((vec2<f32>(x_2206.x, x_2206.z) * vec2<f32>(0.5f, 0.5f)) + -(vec2<f32>(x_2209.x, x_2209.y)));
        let x_2213 : vec4<f32> = u_xlat8;
        u_xlat8 = vec4<f32>(x_2212.x, x_2213.y, x_2212.y, x_2213.w);
        let x_2215 : vec4<f32> = u_xlat7;
        let x_2218 : vec2<f32> = (-(vec2<f32>(x_2215.x, x_2215.y)) + vec2<f32>(1.0f, 1.0f));
        let x_2219 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_2218.x, x_2218.y, x_2219.z, x_2219.w);
        let x_2221 : vec4<f32> = u_xlat7;
        u_xlat51 = min(vec2<f32>(x_2221.x, x_2221.y), vec2<f32>(0.0f, 0.0f));
        let x_2224 : vec2<f32> = u_xlat51;
        let x_2226 : vec2<f32> = u_xlat51;
        let x_2228 : vec4<f32> = u_xlat9;
        u_xlat51 = ((-(x_2224) * x_2226) + vec2<f32>(x_2228.x, x_2228.y));
        let x_2231 : vec4<f32> = u_xlat7;
        let x_2233 : vec2<f32> = max(vec2<f32>(x_2231.x, x_2231.y), vec2<f32>(0.0f, 0.0f));
        let x_2234 : vec4<f32> = u_xlat7;
        u_xlat7 = vec4<f32>(x_2233.x, x_2233.y, x_2234.z, x_2234.w);
        let x_2236 : vec4<f32> = u_xlat7;
        let x_2239 : vec4<f32> = u_xlat7;
        let x_2242 : vec4<f32> = u_xlat8;
        let x_2244 : vec2<f32> = ((-(vec2<f32>(x_2236.x, x_2236.y)) * vec2<f32>(x_2239.x, x_2239.y)) + vec2<f32>(x_2242.y, x_2242.w));
        let x_2245 : vec4<f32> = u_xlat7;
        u_xlat7 = vec4<f32>(x_2244.x, x_2244.y, x_2245.z, x_2245.w);
        let x_2247 : vec2<f32> = u_xlat51;
        u_xlat51 = (x_2247 + vec2<f32>(1.0f, 1.0f));
        let x_2249 : vec4<f32> = u_xlat7;
        let x_2251 : vec2<f32> = (vec2<f32>(x_2249.x, x_2249.y) + vec2<f32>(1.0f, 1.0f));
        let x_2252 : vec4<f32> = u_xlat7;
        u_xlat7 = vec4<f32>(x_2251.x, x_2251.y, x_2252.z, x_2252.w);
        let x_2254 : vec4<f32> = u_xlat8;
        let x_2256 : vec2<f32> = (vec2<f32>(x_2254.x, x_2254.z) * vec2<f32>(0.159999996f, 0.159999996f));
        let x_2257 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_2256.x, x_2256.y, x_2257.z, x_2257.w);
        let x_2259 : vec4<f32> = u_xlat9;
        let x_2261 : vec2<f32> = (vec2<f32>(x_2259.x, x_2259.y) * vec2<f32>(0.159999996f, 0.159999996f));
        let x_2262 : vec4<f32> = u_xlat11;
        u_xlat11 = vec4<f32>(x_2261.x, x_2261.y, x_2262.z, x_2262.w);
        let x_2264 : vec2<f32> = u_xlat51;
        let x_2265 : vec2<f32> = (x_2264 * vec2<f32>(0.159999996f, 0.159999996f));
        let x_2266 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_2265.x, x_2265.y, x_2266.z, x_2266.w);
        let x_2268 : vec4<f32> = u_xlat7;
        let x_2270 : vec2<f32> = (vec2<f32>(x_2268.x, x_2268.y) * vec2<f32>(0.159999996f, 0.159999996f));
        let x_2271 : vec4<f32> = u_xlat12;
        u_xlat12 = vec4<f32>(x_2270.x, x_2270.y, x_2271.z, x_2271.w);
        let x_2273 : vec4<f32> = u_xlat8;
        let x_2275 : vec2<f32> = (vec2<f32>(x_2273.y, x_2273.w) * vec2<f32>(0.159999996f, 0.159999996f));
        let x_2276 : vec4<f32> = u_xlat7;
        u_xlat7 = vec4<f32>(x_2275.x, x_2275.y, x_2276.z, x_2276.w);
        let x_2279 : f32 = u_xlat9.x;
        u_xlat10.z = x_2279;
        let x_2282 : f32 = u_xlat7.x;
        u_xlat10.w = x_2282;
        let x_2285 : f32 = u_xlat12.x;
        u_xlat11.z = x_2285;
        let x_2288 : f32 = u_xlat49.x;
        u_xlat11.w = x_2288;
        let x_2290 : vec4<f32> = u_xlat10;
        let x_2292 : vec4<f32> = u_xlat11;
        u_xlat8 = (vec4<f32>(x_2290.z, x_2290.w, x_2290.x, x_2290.z) + vec4<f32>(x_2292.z, x_2292.w, x_2292.x, x_2292.z));
        let x_2296 : f32 = u_xlat10.y;
        u_xlat9.z = x_2296;
        let x_2299 : f32 = u_xlat7.y;
        u_xlat9.w = x_2299;
        let x_2302 : f32 = u_xlat11.y;
        u_xlat12.z = x_2302;
        let x_2305 : f32 = u_xlat49.y;
        u_xlat12.w = x_2305;
        let x_2307 : vec4<f32> = u_xlat9;
        let x_2309 : vec4<f32> = u_xlat12;
        let x_2311 : vec3<f32> = (vec3<f32>(x_2307.z, x_2307.y, x_2307.w) + vec3<f32>(x_2309.z, x_2309.y, x_2309.w));
        let x_2312 : vec4<f32> = u_xlat7;
        u_xlat7 = vec4<f32>(x_2311.x, x_2311.y, x_2311.z, x_2312.w);
        let x_2314 : vec4<f32> = u_xlat11;
        let x_2316 : vec4<f32> = u_xlat8;
        let x_2318 : vec3<f32> = (vec3<f32>(x_2314.x, x_2314.z, x_2314.w) / vec3<f32>(x_2316.z, x_2316.w, x_2316.y));
        let x_2319 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_2318.x, x_2318.y, x_2318.z, x_2319.w);
        let x_2321 : vec4<f32> = u_xlat9;
        let x_2323 : vec3<f32> = (vec3<f32>(x_2321.x, x_2321.y, x_2321.z) + vec3<f32>(-2.5f, -0.5f, 1.5f));
        let x_2324 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_2323.x, x_2323.y, x_2323.z, x_2324.w);
        let x_2326 : vec4<f32> = u_xlat12;
        let x_2328 : vec4<f32> = u_xlat7;
        let x_2330 : vec3<f32> = (vec3<f32>(x_2326.z, x_2326.y, x_2326.w) / vec3<f32>(x_2328.x, x_2328.y, x_2328.z));
        let x_2331 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_2330.x, x_2330.y, x_2330.z, x_2331.w);
        let x_2333 : vec4<f32> = u_xlat10;
        let x_2335 : vec3<f32> = (vec3<f32>(x_2333.x, x_2333.y, x_2333.z) + vec3<f32>(-2.5f, -0.5f, 1.5f));
        let x_2336 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_2335.x, x_2335.y, x_2335.z, x_2336.w);
        let x_2338 : vec4<f32> = u_xlat9;
        let x_2341 : vec4<f32> = x_272.x_MainLightShadowmapSize;
        let x_2343 : vec3<f32> = (vec3<f32>(x_2338.y, x_2338.x, x_2338.z) * vec3<f32>(x_2341.x, x_2341.x, x_2341.x));
        let x_2344 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_2343.x, x_2343.y, x_2343.z, x_2344.w);
        let x_2346 : vec4<f32> = u_xlat10;
        let x_2349 : vec4<f32> = x_272.x_MainLightShadowmapSize;
        let x_2351 : vec3<f32> = (vec3<f32>(x_2346.x, x_2346.y, x_2346.z) * vec3<f32>(x_2349.y, x_2349.y, x_2349.y));
        let x_2352 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_2351.x, x_2351.y, x_2351.z, x_2352.w);
        let x_2355 : f32 = u_xlat10.x;
        u_xlat9.w = x_2355;
        let x_2357 : vec2<f32> = u_xlat48;
        let x_2360 : vec4<f32> = x_272.x_MainLightShadowmapSize;
        let x_2363 : vec4<f32> = u_xlat9;
        u_xlat11 = ((vec4<f32>(x_2357.x, x_2357.y, x_2357.x, x_2357.y) * vec4<f32>(x_2360.x, x_2360.y, x_2360.x, x_2360.y)) + vec4<f32>(x_2363.y, x_2363.w, x_2363.x, x_2363.w));
        let x_2366 : vec2<f32> = u_xlat48;
        let x_2368 : vec4<f32> = x_272.x_MainLightShadowmapSize;
        let x_2371 : vec4<f32> = u_xlat9;
        let x_2373 : vec2<f32> = ((x_2366 * vec2<f32>(x_2368.x, x_2368.y)) + vec2<f32>(x_2371.z, x_2371.w));
        let x_2374 : vec4<f32> = u_xlat12;
        u_xlat12 = vec4<f32>(x_2373.x, x_2373.y, x_2374.z, x_2374.w);
        let x_2377 : f32 = u_xlat9.y;
        u_xlat10.w = x_2377;
        let x_2379 : vec4<f32> = u_xlat10;
        let x_2380 : vec2<f32> = vec2<f32>(x_2379.y, x_2379.z);
        let x_2381 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_2381.x, x_2380.x, x_2381.z, x_2380.y);
        let x_2383 : vec2<f32> = u_xlat48;
        let x_2386 : vec4<f32> = x_272.x_MainLightShadowmapSize;
        let x_2389 : vec4<f32> = u_xlat9;
        u_xlat13 = ((vec4<f32>(x_2383.x, x_2383.y, x_2383.x, x_2383.y) * vec4<f32>(x_2386.x, x_2386.y, x_2386.x, x_2386.y)) + vec4<f32>(x_2389.x, x_2389.y, x_2389.z, x_2389.y));
        let x_2392 : vec2<f32> = u_xlat48;
        let x_2395 : vec4<f32> = x_272.x_MainLightShadowmapSize;
        let x_2398 : vec4<f32> = u_xlat10;
        u_xlat10 = ((vec4<f32>(x_2392.x, x_2392.y, x_2392.x, x_2392.y) * vec4<f32>(x_2395.x, x_2395.y, x_2395.x, x_2395.y)) + vec4<f32>(x_2398.w, x_2398.y, x_2398.w, x_2398.z));
        let x_2401 : vec2<f32> = u_xlat48;
        let x_2404 : vec4<f32> = x_272.x_MainLightShadowmapSize;
        let x_2407 : vec4<f32> = u_xlat9;
        u_xlat9 = ((vec4<f32>(x_2401.x, x_2401.y, x_2401.x, x_2401.y) * vec4<f32>(x_2404.x, x_2404.y, x_2404.x, x_2404.y)) + vec4<f32>(x_2407.x, x_2407.w, x_2407.z, x_2407.w));
        let x_2410 : vec4<f32> = u_xlat7;
        let x_2412 : vec4<f32> = u_xlat8;
        u_xlat14 = (vec4<f32>(x_2410.x, x_2410.x, x_2410.x, x_2410.y) * vec4<f32>(x_2412.z, x_2412.w, x_2412.y, x_2412.z));
        let x_2415 : vec4<f32> = u_xlat7;
        let x_2417 : vec4<f32> = u_xlat8;
        u_xlat15 = (vec4<f32>(x_2415.y, x_2415.y, x_2415.z, x_2415.z) * x_2417);
        let x_2420 : f32 = u_xlat7.z;
        let x_2422 : f32 = u_xlat8.y;
        u_xlat48.x = (x_2420 * x_2422);
        let x_2426 : vec4<f32> = u_xlat11;
        let x_2427 : vec2<f32> = vec2<f32>(x_2426.x, x_2426.y);
        let x_2429 : f32 = vs_INTERP9.z;
        txVec34 = vec3<f32>(x_2427.x, x_2427.y, x_2429);
        let x_2436 : vec3<f32> = txVec34;
        let x_2438 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2436.xy, x_2436.z);
        u_xlat69 = x_2438;
        let x_2440 : vec4<f32> = u_xlat11;
        let x_2441 : vec2<f32> = vec2<f32>(x_2440.z, x_2440.w);
        let x_2443 : f32 = vs_INTERP9.z;
        txVec35 = vec3<f32>(x_2441.x, x_2441.y, x_2443);
        let x_2450 : vec3<f32> = txVec35;
        let x_2452 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2450.xy, x_2450.z);
        u_xlat7.x = x_2452;
        let x_2455 : f32 = u_xlat7.x;
        let x_2457 : f32 = u_xlat14.y;
        u_xlat7.x = (x_2455 * x_2457);
        let x_2461 : f32 = u_xlat14.x;
        let x_2462 : f32 = u_xlat69;
        let x_2465 : f32 = u_xlat7.x;
        u_xlat69 = ((x_2461 * x_2462) + x_2465);
        let x_2468 : vec4<f32> = u_xlat12;
        let x_2469 : vec2<f32> = vec2<f32>(x_2468.x, x_2468.y);
        let x_2471 : f32 = vs_INTERP9.z;
        txVec36 = vec3<f32>(x_2469.x, x_2469.y, x_2471);
        let x_2478 : vec3<f32> = txVec36;
        let x_2480 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2478.xy, x_2478.z);
        u_xlat7.x = x_2480;
        let x_2483 : f32 = u_xlat14.z;
        let x_2485 : f32 = u_xlat7.x;
        let x_2487 : f32 = u_xlat69;
        u_xlat69 = ((x_2483 * x_2485) + x_2487);
        let x_2490 : vec4<f32> = u_xlat10;
        let x_2491 : vec2<f32> = vec2<f32>(x_2490.x, x_2490.y);
        let x_2493 : f32 = vs_INTERP9.z;
        txVec37 = vec3<f32>(x_2491.x, x_2491.y, x_2493);
        let x_2500 : vec3<f32> = txVec37;
        let x_2502 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2500.xy, x_2500.z);
        u_xlat7.x = x_2502;
        let x_2505 : f32 = u_xlat14.w;
        let x_2507 : f32 = u_xlat7.x;
        let x_2509 : f32 = u_xlat69;
        u_xlat69 = ((x_2505 * x_2507) + x_2509);
        let x_2512 : vec4<f32> = u_xlat13;
        let x_2513 : vec2<f32> = vec2<f32>(x_2512.x, x_2512.y);
        let x_2515 : f32 = vs_INTERP9.z;
        txVec38 = vec3<f32>(x_2513.x, x_2513.y, x_2515);
        let x_2522 : vec3<f32> = txVec38;
        let x_2524 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2522.xy, x_2522.z);
        u_xlat7.x = x_2524;
        let x_2527 : f32 = u_xlat15.x;
        let x_2529 : f32 = u_xlat7.x;
        let x_2531 : f32 = u_xlat69;
        u_xlat69 = ((x_2527 * x_2529) + x_2531);
        let x_2534 : vec4<f32> = u_xlat13;
        let x_2535 : vec2<f32> = vec2<f32>(x_2534.z, x_2534.w);
        let x_2537 : f32 = vs_INTERP9.z;
        txVec39 = vec3<f32>(x_2535.x, x_2535.y, x_2537);
        let x_2544 : vec3<f32> = txVec39;
        let x_2546 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2544.xy, x_2544.z);
        u_xlat7.x = x_2546;
        let x_2549 : f32 = u_xlat15.y;
        let x_2551 : f32 = u_xlat7.x;
        let x_2553 : f32 = u_xlat69;
        u_xlat69 = ((x_2549 * x_2551) + x_2553);
        let x_2556 : vec4<f32> = u_xlat10;
        let x_2557 : vec2<f32> = vec2<f32>(x_2556.z, x_2556.w);
        let x_2559 : f32 = vs_INTERP9.z;
        txVec40 = vec3<f32>(x_2557.x, x_2557.y, x_2559);
        let x_2566 : vec3<f32> = txVec40;
        let x_2568 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2566.xy, x_2566.z);
        u_xlat7.x = x_2568;
        let x_2571 : f32 = u_xlat15.z;
        let x_2573 : f32 = u_xlat7.x;
        let x_2575 : f32 = u_xlat69;
        u_xlat69 = ((x_2571 * x_2573) + x_2575);
        let x_2578 : vec4<f32> = u_xlat9;
        let x_2579 : vec2<f32> = vec2<f32>(x_2578.x, x_2578.y);
        let x_2581 : f32 = vs_INTERP9.z;
        txVec41 = vec3<f32>(x_2579.x, x_2579.y, x_2581);
        let x_2588 : vec3<f32> = txVec41;
        let x_2590 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2588.xy, x_2588.z);
        u_xlat7.x = x_2590;
        let x_2593 : f32 = u_xlat15.w;
        let x_2595 : f32 = u_xlat7.x;
        let x_2597 : f32 = u_xlat69;
        u_xlat69 = ((x_2593 * x_2595) + x_2597);
        let x_2600 : vec4<f32> = u_xlat9;
        let x_2601 : vec2<f32> = vec2<f32>(x_2600.z, x_2600.w);
        let x_2603 : f32 = vs_INTERP9.z;
        txVec42 = vec3<f32>(x_2601.x, x_2601.y, x_2603);
        let x_2610 : vec3<f32> = txVec42;
        let x_2612 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2610.xy, x_2610.z);
        u_xlat7.x = x_2612;
        let x_2615 : f32 = u_xlat48.x;
        let x_2617 : f32 = u_xlat7.x;
        let x_2619 : f32 = u_xlat69;
        u_xlat63 = ((x_2615 * x_2617) + x_2619);
      } else {
        let x_2622 : vec4<f32> = vs_INTERP9;
        let x_2625 : vec4<f32> = x_272.x_MainLightShadowmapSize;
        u_xlat48 = ((vec2<f32>(x_2622.x, x_2622.y) * vec2<f32>(x_2625.z, x_2625.w)) + vec2<f32>(0.5f, 0.5f));
        let x_2629 : vec2<f32> = u_xlat48;
        u_xlat48 = floor(x_2629);
        let x_2631 : vec4<f32> = vs_INTERP9;
        let x_2634 : vec4<f32> = x_272.x_MainLightShadowmapSize;
        let x_2637 : vec2<f32> = u_xlat48;
        let x_2639 : vec2<f32> = ((vec2<f32>(x_2631.x, x_2631.y) * vec2<f32>(x_2634.z, x_2634.w)) + -(x_2637));
        let x_2640 : vec4<f32> = u_xlat7;
        u_xlat7 = vec4<f32>(x_2639.x, x_2639.y, x_2640.z, x_2640.w);
        let x_2642 : vec4<f32> = u_xlat7;
        u_xlat8 = (vec4<f32>(x_2642.x, x_2642.x, x_2642.y, x_2642.y) + vec4<f32>(0.5f, 1.0f, 0.5f, 1.0f));
        let x_2645 : vec4<f32> = u_xlat8;
        let x_2647 : vec4<f32> = u_xlat8;
        u_xlat9 = (vec4<f32>(x_2645.x, x_2645.x, x_2645.z, x_2645.z) * vec4<f32>(x_2647.x, x_2647.x, x_2647.z, x_2647.z));
        let x_2650 : vec4<f32> = u_xlat9;
        let x_2652 : vec2<f32> = (vec2<f32>(x_2650.y, x_2650.w) * vec2<f32>(0.040816002f, 0.040816002f));
        let x_2653 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_2653.x, x_2652.x, x_2653.z, x_2652.y);
        let x_2655 : vec4<f32> = u_xlat9;
        let x_2658 : vec4<f32> = u_xlat7;
        u_xlat49 = ((vec2<f32>(x_2655.x, x_2655.z) * vec2<f32>(0.5f, 0.5f)) + -(vec2<f32>(x_2658.x, x_2658.y)));
        let x_2662 : vec4<f32> = u_xlat7;
        let x_2665 : vec2<f32> = (-(vec2<f32>(x_2662.x, x_2662.y)) + vec2<f32>(1.0f, 1.0f));
        let x_2666 : vec4<f32> = u_xlat8;
        u_xlat8 = vec4<f32>(x_2665.x, x_2666.y, x_2665.y, x_2666.w);
        let x_2668 : vec4<f32> = u_xlat7;
        let x_2670 : vec2<f32> = min(vec2<f32>(x_2668.x, x_2668.y), vec2<f32>(0.0f, 0.0f));
        let x_2671 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_2670.x, x_2670.y, x_2671.z, x_2671.w);
        let x_2673 : vec4<f32> = u_xlat9;
        let x_2676 : vec4<f32> = u_xlat9;
        let x_2679 : vec4<f32> = u_xlat8;
        let x_2681 : vec2<f32> = ((-(vec2<f32>(x_2673.x, x_2673.y)) * vec2<f32>(x_2676.x, x_2676.y)) + vec2<f32>(x_2679.x, x_2679.z));
        let x_2682 : vec4<f32> = u_xlat8;
        u_xlat8 = vec4<f32>(x_2681.x, x_2682.y, x_2681.y, x_2682.w);
        let x_2684 : vec4<f32> = u_xlat7;
        let x_2686 : vec2<f32> = max(vec2<f32>(x_2684.x, x_2684.y), vec2<f32>(0.0f, 0.0f));
        let x_2687 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_2686.x, x_2686.y, x_2687.z, x_2687.w);
        let x_2689 : vec4<f32> = u_xlat9;
        let x_2692 : vec4<f32> = u_xlat9;
        let x_2695 : vec4<f32> = u_xlat8;
        let x_2697 : vec2<f32> = ((-(vec2<f32>(x_2689.x, x_2689.y)) * vec2<f32>(x_2692.x, x_2692.y)) + vec2<f32>(x_2695.y, x_2695.w));
        let x_2698 : vec4<f32> = u_xlat8;
        u_xlat8 = vec4<f32>(x_2698.x, x_2697.x, x_2698.z, x_2697.y);
        let x_2700 : vec4<f32> = u_xlat8;
        u_xlat8 = (x_2700 + vec4<f32>(2.0f, 2.0f, 2.0f, 2.0f));
        let x_2703 : f32 = u_xlat8.y;
        u_xlat9.z = (x_2703 * 0.081632003f);
        let x_2706 : vec2<f32> = u_xlat49;
        let x_2708 : vec2<f32> = (vec2<f32>(x_2706.y, x_2706.x) * vec2<f32>(0.081632003f, 0.081632003f));
        let x_2709 : vec4<f32> = u_xlat11;
        u_xlat11 = vec4<f32>(x_2708.x, x_2708.y, x_2709.z, x_2709.w);
        let x_2711 : vec4<f32> = u_xlat8;
        u_xlat49 = (vec2<f32>(x_2711.x, x_2711.z) * vec2<f32>(0.081632003f, 0.081632003f));
        let x_2715 : f32 = u_xlat8.w;
        u_xlat11.z = (x_2715 * 0.081632003f);
        let x_2719 : f32 = u_xlat11.y;
        u_xlat9.x = x_2719;
        let x_2721 : vec4<f32> = u_xlat7;
        let x_2724 : vec2<f32> = ((vec2<f32>(x_2721.x, x_2721.x) * vec2<f32>(-0.081632003f, 0.081632003f)) + vec2<f32>(0.163264006f, 0.081632003f));
        let x_2725 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_2725.x, x_2724.x, x_2725.z, x_2724.y);
        let x_2727 : vec4<f32> = u_xlat7;
        let x_2730 : vec2<f32> = ((vec2<f32>(x_2727.x, x_2727.x) * vec2<f32>(-0.081632003f, 0.081632003f)) + vec2<f32>(0.081632003f, 0.163264006f));
        let x_2731 : vec4<f32> = u_xlat8;
        u_xlat8 = vec4<f32>(x_2730.x, x_2731.y, x_2730.y, x_2731.w);
        let x_2734 : f32 = u_xlat49.x;
        u_xlat8.y = x_2734;
        let x_2737 : f32 = u_xlat10.y;
        u_xlat8.w = x_2737;
        let x_2739 : vec4<f32> = u_xlat8;
        let x_2740 : vec4<f32> = u_xlat9;
        u_xlat9 = (x_2739 + x_2740);
        let x_2742 : vec4<f32> = u_xlat7;
        let x_2745 : vec2<f32> = ((vec2<f32>(x_2742.y, x_2742.y) * vec2<f32>(-0.081632003f, 0.081632003f)) + vec2<f32>(0.163264006f, 0.081632003f));
        let x_2746 : vec4<f32> = u_xlat11;
        u_xlat11 = vec4<f32>(x_2746.x, x_2745.x, x_2746.z, x_2745.y);
        let x_2748 : vec4<f32> = u_xlat7;
        let x_2751 : vec2<f32> = ((vec2<f32>(x_2748.y, x_2748.y) * vec2<f32>(-0.081632003f, 0.081632003f)) + vec2<f32>(0.081632003f, 0.163264006f));
        let x_2752 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_2751.x, x_2752.y, x_2751.y, x_2752.w);
        let x_2755 : f32 = u_xlat49.y;
        u_xlat10.y = x_2755;
        let x_2757 : vec4<f32> = u_xlat10;
        let x_2758 : vec4<f32> = u_xlat11;
        u_xlat7 = (x_2757 + x_2758);
        let x_2760 : vec4<f32> = u_xlat8;
        let x_2761 : vec4<f32> = u_xlat9;
        u_xlat8 = (x_2760 / x_2761);
        let x_2763 : vec4<f32> = u_xlat8;
        u_xlat8 = (x_2763 + vec4<f32>(-3.5f, -1.5f, 0.5f, 2.5f));
        let x_2765 : vec4<f32> = u_xlat10;
        let x_2766 : vec4<f32> = u_xlat7;
        u_xlat10 = (x_2765 / x_2766);
        let x_2768 : vec4<f32> = u_xlat10;
        u_xlat10 = (x_2768 + vec4<f32>(-3.5f, -1.5f, 0.5f, 2.5f));
        let x_2770 : vec4<f32> = u_xlat8;
        let x_2773 : vec4<f32> = x_272.x_MainLightShadowmapSize;
        u_xlat8 = (vec4<f32>(x_2770.w, x_2770.x, x_2770.y, x_2770.z) * vec4<f32>(x_2773.x, x_2773.x, x_2773.x, x_2773.x));
        let x_2776 : vec4<f32> = u_xlat10;
        let x_2779 : vec4<f32> = x_272.x_MainLightShadowmapSize;
        u_xlat10 = (vec4<f32>(x_2776.x, x_2776.w, x_2776.y, x_2776.z) * vec4<f32>(x_2779.y, x_2779.y, x_2779.y, x_2779.y));
        let x_2782 : vec4<f32> = u_xlat8;
        let x_2783 : vec3<f32> = vec3<f32>(x_2782.y, x_2782.z, x_2782.w);
        let x_2784 : vec4<f32> = u_xlat11;
        u_xlat11 = vec4<f32>(x_2783.x, x_2784.y, x_2783.y, x_2783.z);
        let x_2787 : f32 = u_xlat10.x;
        u_xlat11.y = x_2787;
        let x_2789 : vec2<f32> = u_xlat48;
        let x_2792 : vec4<f32> = x_272.x_MainLightShadowmapSize;
        let x_2795 : vec4<f32> = u_xlat11;
        u_xlat12 = ((vec4<f32>(x_2789.x, x_2789.y, x_2789.x, x_2789.y) * vec4<f32>(x_2792.x, x_2792.y, x_2792.x, x_2792.y)) + vec4<f32>(x_2795.x, x_2795.y, x_2795.z, x_2795.y));
        let x_2798 : vec2<f32> = u_xlat48;
        let x_2800 : vec4<f32> = x_272.x_MainLightShadowmapSize;
        let x_2803 : vec4<f32> = u_xlat11;
        let x_2805 : vec2<f32> = ((x_2798 * vec2<f32>(x_2800.x, x_2800.y)) + vec2<f32>(x_2803.w, x_2803.y));
        let x_2806 : vec4<f32> = u_xlat13;
        u_xlat13 = vec4<f32>(x_2805.x, x_2805.y, x_2806.z, x_2806.w);
        let x_2809 : f32 = u_xlat11.y;
        u_xlat8.y = x_2809;
        let x_2812 : f32 = u_xlat10.z;
        u_xlat11.y = x_2812;
        let x_2814 : vec2<f32> = u_xlat48;
        let x_2817 : vec4<f32> = x_272.x_MainLightShadowmapSize;
        let x_2820 : vec4<f32> = u_xlat11;
        u_xlat14 = ((vec4<f32>(x_2814.x, x_2814.y, x_2814.x, x_2814.y) * vec4<f32>(x_2817.x, x_2817.y, x_2817.x, x_2817.y)) + vec4<f32>(x_2820.x, x_2820.y, x_2820.z, x_2820.y));
        let x_2824 : vec2<f32> = u_xlat48;
        let x_2826 : vec4<f32> = x_272.x_MainLightShadowmapSize;
        let x_2829 : vec4<f32> = u_xlat11;
        u_xlat55 = ((x_2824 * vec2<f32>(x_2826.x, x_2826.y)) + vec2<f32>(x_2829.w, x_2829.y));
        let x_2833 : f32 = u_xlat11.y;
        u_xlat8.z = x_2833;
        let x_2835 : vec2<f32> = u_xlat48;
        let x_2838 : vec4<f32> = x_272.x_MainLightShadowmapSize;
        let x_2841 : vec4<f32> = u_xlat8;
        u_xlat15 = ((vec4<f32>(x_2835.x, x_2835.y, x_2835.x, x_2835.y) * vec4<f32>(x_2838.x, x_2838.y, x_2838.x, x_2838.y)) + vec4<f32>(x_2841.x, x_2841.y, x_2841.x, x_2841.z));
        let x_2845 : f32 = u_xlat10.w;
        u_xlat11.y = x_2845;
        let x_2847 : vec2<f32> = u_xlat48;
        let x_2850 : vec4<f32> = x_272.x_MainLightShadowmapSize;
        let x_2853 : vec4<f32> = u_xlat11;
        u_xlat16 = ((vec4<f32>(x_2847.x, x_2847.y, x_2847.x, x_2847.y) * vec4<f32>(x_2850.x, x_2850.y, x_2850.x, x_2850.y)) + vec4<f32>(x_2853.x, x_2853.y, x_2853.z, x_2853.y));
        let x_2856 : vec2<f32> = u_xlat48;
        let x_2858 : vec4<f32> = x_272.x_MainLightShadowmapSize;
        let x_2861 : vec4<f32> = u_xlat11;
        let x_2863 : vec2<f32> = ((x_2856 * vec2<f32>(x_2858.x, x_2858.y)) + vec2<f32>(x_2861.w, x_2861.y));
        let x_2864 : vec3<f32> = u_xlat29;
        u_xlat29 = vec3<f32>(x_2863.x, x_2863.y, x_2864.z);
        let x_2867 : f32 = u_xlat11.y;
        u_xlat8.w = x_2867;
        let x_2869 : vec2<f32> = u_xlat48;
        let x_2871 : vec4<f32> = x_272.x_MainLightShadowmapSize;
        let x_2874 : vec4<f32> = u_xlat8;
        let x_2876 : vec2<f32> = ((x_2869 * vec2<f32>(x_2871.x, x_2871.y)) + vec2<f32>(x_2874.x, x_2874.w));
        let x_2877 : vec4<f32> = u_xlat17;
        u_xlat17 = vec4<f32>(x_2876.x, x_2876.y, x_2877.z, x_2877.w);
        let x_2879 : vec4<f32> = u_xlat11;
        let x_2880 : vec3<f32> = vec3<f32>(x_2879.x, x_2879.z, x_2879.w);
        let x_2881 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_2880.x, x_2881.y, x_2880.y, x_2880.z);
        let x_2883 : vec2<f32> = u_xlat48;
        let x_2886 : vec4<f32> = x_272.x_MainLightShadowmapSize;
        let x_2889 : vec4<f32> = u_xlat10;
        u_xlat11 = ((vec4<f32>(x_2883.x, x_2883.y, x_2883.x, x_2883.y) * vec4<f32>(x_2886.x, x_2886.y, x_2886.x, x_2886.y)) + vec4<f32>(x_2889.x, x_2889.y, x_2889.z, x_2889.y));
        let x_2892 : vec2<f32> = u_xlat48;
        let x_2894 : vec4<f32> = x_272.x_MainLightShadowmapSize;
        let x_2897 : vec4<f32> = u_xlat10;
        u_xlat52 = ((x_2892 * vec2<f32>(x_2894.x, x_2894.y)) + vec2<f32>(x_2897.w, x_2897.y));
        let x_2901 : f32 = u_xlat8.x;
        u_xlat10.x = x_2901;
        let x_2903 : vec2<f32> = u_xlat48;
        let x_2905 : vec4<f32> = x_272.x_MainLightShadowmapSize;
        let x_2908 : vec4<f32> = u_xlat10;
        u_xlat48 = ((x_2903 * vec2<f32>(x_2905.x, x_2905.y)) + vec2<f32>(x_2908.x, x_2908.y));
        let x_2911 : vec4<f32> = u_xlat7;
        let x_2913 : vec4<f32> = u_xlat9;
        u_xlat18 = (vec4<f32>(x_2911.x, x_2911.x, x_2911.x, x_2911.x) * x_2913);
        let x_2915 : vec4<f32> = u_xlat7;
        let x_2917 : vec4<f32> = u_xlat9;
        u_xlat19 = (vec4<f32>(x_2915.y, x_2915.y, x_2915.y, x_2915.y) * x_2917);
        let x_2919 : vec4<f32> = u_xlat7;
        let x_2921 : vec4<f32> = u_xlat9;
        u_xlat20 = (vec4<f32>(x_2919.z, x_2919.z, x_2919.z, x_2919.z) * x_2921);
        let x_2923 : vec4<f32> = u_xlat7;
        let x_2925 : vec4<f32> = u_xlat9;
        u_xlat7 = (vec4<f32>(x_2923.w, x_2923.w, x_2923.w, x_2923.w) * x_2925);
        let x_2928 : vec4<f32> = u_xlat12;
        let x_2929 : vec2<f32> = vec2<f32>(x_2928.x, x_2928.y);
        let x_2931 : f32 = vs_INTERP9.z;
        txVec43 = vec3<f32>(x_2929.x, x_2929.y, x_2931);
        let x_2938 : vec3<f32> = txVec43;
        let x_2940 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2938.xy, x_2938.z);
        u_xlat8.x = x_2940;
        let x_2943 : vec4<f32> = u_xlat12;
        let x_2944 : vec2<f32> = vec2<f32>(x_2943.z, x_2943.w);
        let x_2946 : f32 = vs_INTERP9.z;
        txVec44 = vec3<f32>(x_2944.x, x_2944.y, x_2946);
        let x_2954 : vec3<f32> = txVec44;
        let x_2956 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2954.xy, x_2954.z);
        u_xlat71 = x_2956;
        let x_2957 : f32 = u_xlat71;
        let x_2959 : f32 = u_xlat18.y;
        u_xlat71 = (x_2957 * x_2959);
        let x_2962 : f32 = u_xlat18.x;
        let x_2964 : f32 = u_xlat8.x;
        let x_2966 : f32 = u_xlat71;
        u_xlat8.x = ((x_2962 * x_2964) + x_2966);
        let x_2970 : vec4<f32> = u_xlat13;
        let x_2971 : vec2<f32> = vec2<f32>(x_2970.x, x_2970.y);
        let x_2973 : f32 = vs_INTERP9.z;
        txVec45 = vec3<f32>(x_2971.x, x_2971.y, x_2973);
        let x_2980 : vec3<f32> = txVec45;
        let x_2982 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2980.xy, x_2980.z);
        u_xlat71 = x_2982;
        let x_2984 : f32 = u_xlat18.z;
        let x_2985 : f32 = u_xlat71;
        let x_2988 : f32 = u_xlat8.x;
        u_xlat8.x = ((x_2984 * x_2985) + x_2988);
        let x_2992 : vec4<f32> = u_xlat15;
        let x_2993 : vec2<f32> = vec2<f32>(x_2992.x, x_2992.y);
        let x_2995 : f32 = vs_INTERP9.z;
        txVec46 = vec3<f32>(x_2993.x, x_2993.y, x_2995);
        let x_3002 : vec3<f32> = txVec46;
        let x_3004 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_3002.xy, x_3002.z);
        u_xlat71 = x_3004;
        let x_3006 : f32 = u_xlat18.w;
        let x_3007 : f32 = u_xlat71;
        let x_3010 : f32 = u_xlat8.x;
        u_xlat8.x = ((x_3006 * x_3007) + x_3010);
        let x_3014 : vec4<f32> = u_xlat14;
        let x_3015 : vec2<f32> = vec2<f32>(x_3014.x, x_3014.y);
        let x_3017 : f32 = vs_INTERP9.z;
        txVec47 = vec3<f32>(x_3015.x, x_3015.y, x_3017);
        let x_3024 : vec3<f32> = txVec47;
        let x_3026 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_3024.xy, x_3024.z);
        u_xlat71 = x_3026;
        let x_3028 : f32 = u_xlat19.x;
        let x_3029 : f32 = u_xlat71;
        let x_3032 : f32 = u_xlat8.x;
        u_xlat8.x = ((x_3028 * x_3029) + x_3032);
        let x_3036 : vec4<f32> = u_xlat14;
        let x_3037 : vec2<f32> = vec2<f32>(x_3036.z, x_3036.w);
        let x_3039 : f32 = vs_INTERP9.z;
        txVec48 = vec3<f32>(x_3037.x, x_3037.y, x_3039);
        let x_3046 : vec3<f32> = txVec48;
        let x_3048 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_3046.xy, x_3046.z);
        u_xlat71 = x_3048;
        let x_3050 : f32 = u_xlat19.y;
        let x_3051 : f32 = u_xlat71;
        let x_3054 : f32 = u_xlat8.x;
        u_xlat8.x = ((x_3050 * x_3051) + x_3054);
        let x_3058 : vec2<f32> = u_xlat55;
        let x_3060 : f32 = vs_INTERP9.z;
        txVec49 = vec3<f32>(x_3058.x, x_3058.y, x_3060);
        let x_3067 : vec3<f32> = txVec49;
        let x_3069 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_3067.xy, x_3067.z);
        u_xlat71 = x_3069;
        let x_3071 : f32 = u_xlat19.z;
        let x_3072 : f32 = u_xlat71;
        let x_3075 : f32 = u_xlat8.x;
        u_xlat8.x = ((x_3071 * x_3072) + x_3075);
        let x_3079 : vec4<f32> = u_xlat15;
        let x_3080 : vec2<f32> = vec2<f32>(x_3079.z, x_3079.w);
        let x_3082 : f32 = vs_INTERP9.z;
        txVec50 = vec3<f32>(x_3080.x, x_3080.y, x_3082);
        let x_3089 : vec3<f32> = txVec50;
        let x_3091 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_3089.xy, x_3089.z);
        u_xlat71 = x_3091;
        let x_3093 : f32 = u_xlat19.w;
        let x_3094 : f32 = u_xlat71;
        let x_3097 : f32 = u_xlat8.x;
        u_xlat8.x = ((x_3093 * x_3094) + x_3097);
        let x_3101 : vec4<f32> = u_xlat16;
        let x_3102 : vec2<f32> = vec2<f32>(x_3101.x, x_3101.y);
        let x_3104 : f32 = vs_INTERP9.z;
        txVec51 = vec3<f32>(x_3102.x, x_3102.y, x_3104);
        let x_3111 : vec3<f32> = txVec51;
        let x_3113 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_3111.xy, x_3111.z);
        u_xlat71 = x_3113;
        let x_3115 : f32 = u_xlat20.x;
        let x_3116 : f32 = u_xlat71;
        let x_3119 : f32 = u_xlat8.x;
        u_xlat8.x = ((x_3115 * x_3116) + x_3119);
        let x_3123 : vec4<f32> = u_xlat16;
        let x_3124 : vec2<f32> = vec2<f32>(x_3123.z, x_3123.w);
        let x_3126 : f32 = vs_INTERP9.z;
        txVec52 = vec3<f32>(x_3124.x, x_3124.y, x_3126);
        let x_3133 : vec3<f32> = txVec52;
        let x_3135 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_3133.xy, x_3133.z);
        u_xlat71 = x_3135;
        let x_3137 : f32 = u_xlat20.y;
        let x_3138 : f32 = u_xlat71;
        let x_3141 : f32 = u_xlat8.x;
        u_xlat8.x = ((x_3137 * x_3138) + x_3141);
        let x_3145 : vec3<f32> = u_xlat29;
        let x_3146 : vec2<f32> = vec2<f32>(x_3145.x, x_3145.y);
        let x_3148 : f32 = vs_INTERP9.z;
        txVec53 = vec3<f32>(x_3146.x, x_3146.y, x_3148);
        let x_3155 : vec3<f32> = txVec53;
        let x_3157 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_3155.xy, x_3155.z);
        u_xlat29.x = x_3157;
        let x_3160 : f32 = u_xlat20.z;
        let x_3162 : f32 = u_xlat29.x;
        let x_3165 : f32 = u_xlat8.x;
        u_xlat8.x = ((x_3160 * x_3162) + x_3165);
        let x_3169 : vec4<f32> = u_xlat17;
        let x_3170 : vec2<f32> = vec2<f32>(x_3169.x, x_3169.y);
        let x_3172 : f32 = vs_INTERP9.z;
        txVec54 = vec3<f32>(x_3170.x, x_3170.y, x_3172);
        let x_3179 : vec3<f32> = txVec54;
        let x_3181 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_3179.xy, x_3179.z);
        u_xlat29.x = x_3181;
        let x_3184 : f32 = u_xlat20.w;
        let x_3186 : f32 = u_xlat29.x;
        let x_3189 : f32 = u_xlat8.x;
        u_xlat8.x = ((x_3184 * x_3186) + x_3189);
        let x_3193 : vec4<f32> = u_xlat11;
        let x_3194 : vec2<f32> = vec2<f32>(x_3193.x, x_3193.y);
        let x_3196 : f32 = vs_INTERP9.z;
        txVec55 = vec3<f32>(x_3194.x, x_3194.y, x_3196);
        let x_3203 : vec3<f32> = txVec55;
        let x_3205 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_3203.xy, x_3203.z);
        u_xlat29.x = x_3205;
        let x_3208 : f32 = u_xlat7.x;
        let x_3210 : f32 = u_xlat29.x;
        let x_3213 : f32 = u_xlat8.x;
        u_xlat7.x = ((x_3208 * x_3210) + x_3213);
        let x_3217 : vec4<f32> = u_xlat11;
        let x_3218 : vec2<f32> = vec2<f32>(x_3217.z, x_3217.w);
        let x_3220 : f32 = vs_INTERP9.z;
        txVec56 = vec3<f32>(x_3218.x, x_3218.y, x_3220);
        let x_3227 : vec3<f32> = txVec56;
        let x_3229 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_3227.xy, x_3227.z);
        u_xlat8.x = x_3229;
        let x_3232 : f32 = u_xlat7.y;
        let x_3234 : f32 = u_xlat8.x;
        let x_3237 : f32 = u_xlat7.x;
        u_xlat7.x = ((x_3232 * x_3234) + x_3237);
        let x_3241 : vec2<f32> = u_xlat52;
        let x_3243 : f32 = vs_INTERP9.z;
        txVec57 = vec3<f32>(x_3241.x, x_3241.y, x_3243);
        let x_3251 : vec3<f32> = txVec57;
        let x_3253 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_3251.xy, x_3251.z);
        u_xlat28 = x_3253;
        let x_3255 : f32 = u_xlat7.z;
        let x_3256 : f32 = u_xlat28;
        let x_3259 : f32 = u_xlat7.x;
        u_xlat7.x = ((x_3255 * x_3256) + x_3259);
        let x_3263 : vec2<f32> = u_xlat48;
        let x_3265 : f32 = vs_INTERP9.z;
        txVec58 = vec3<f32>(x_3263.x, x_3263.y, x_3265);
        let x_3272 : vec3<f32> = txVec58;
        let x_3274 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_3272.xy, x_3272.z);
        u_xlat48.x = x_3274;
        let x_3277 : f32 = u_xlat7.w;
        let x_3279 : f32 = u_xlat48.x;
        let x_3282 : f32 = u_xlat7.x;
        u_xlat63 = ((x_3277 * x_3279) + x_3282);
      }
    }
  } else {
    let x_3286 : vec4<f32> = vs_INTERP9;
    let x_3287 : vec2<f32> = vec2<f32>(x_3286.x, x_3286.y);
    let x_3289 : f32 = vs_INTERP9.z;
    txVec59 = vec3<f32>(x_3287.x, x_3287.y, x_3289);
    let x_3296 : vec3<f32> = txVec59;
    let x_3298 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_3296.xy, x_3296.z);
    u_xlat63 = x_3298;
  }
  let x_3299 : f32 = u_xlat63;
  let x_3301 : f32 = x_272.x_MainLightShadowParams.x;
  let x_3303 : f32 = u_xlat65;
  u_xlat63 = ((x_3299 * x_3301) + x_3303);
  let x_3306 : f32 = vs_INTERP9.z;
  u_xlatb65 = (0.0f >= x_3306);
  let x_3309 : f32 = vs_INTERP9.z;
  u_xlatb48.x = (x_3309 >= 1.0f);
  let x_3312 : bool = u_xlatb65;
  let x_3314 : bool = u_xlatb48.x;
  u_xlatb65 = (x_3312 | x_3314);
  let x_3316 : bool = u_xlatb65;
  let x_3317 : f32 = u_xlat63;
  u_xlat63 = select(x_3317, 1.0f, x_3316);
  let x_3319 : vec3<f32> = vs_INTERP0;
  let x_3321 : vec3<f32> = x_90.x_WorldSpaceCameraPos;
  let x_3323 : vec3<f32> = (x_3319 + -(x_3321));
  let x_3324 : vec4<f32> = u_xlat7;
  u_xlat7 = vec4<f32>(x_3323.x, x_3323.y, x_3323.z, x_3324.w);
  let x_3326 : vec4<f32> = u_xlat7;
  let x_3328 : vec4<f32> = u_xlat7;
  u_xlat65 = dot(vec3<f32>(x_3326.x, x_3326.y, x_3326.z), vec3<f32>(x_3328.x, x_3328.y, x_3328.z));
  let x_3331 : f32 = u_xlat65;
  let x_3333 : f32 = x_272.x_MainLightShadowParams.z;
  let x_3336 : f32 = x_272.x_MainLightShadowParams.w;
  u_xlat65 = ((x_3331 * x_3333) + x_3336);
  let x_3338 : f32 = u_xlat65;
  u_xlat65 = clamp(x_3338, 0.0f, 1.0f);
  let x_3340 : f32 = u_xlat63;
  u_xlat48.x = (-(x_3340) + 1.0f);
  let x_3344 : f32 = u_xlat65;
  let x_3346 : f32 = u_xlat48.x;
  let x_3348 : f32 = u_xlat63;
  u_xlat63 = ((x_3344 * x_3346) + x_3348);
  let x_3356 : f32 = x_3354.x_MainLightCookieTextureFormat;
  u_xlatb65 = !((x_3356 == -1.0f));
  let x_3358 : bool = u_xlatb65;
  if (x_3358) {
    let x_3361 : vec3<f32> = vs_INTERP0;
    let x_3364 : vec4<f32> = x_3354.x_MainLightWorldToLight[1i];
    u_xlat48 = (vec2<f32>(x_3361.y, x_3361.y) * vec2<f32>(x_3364.x, x_3364.y));
    let x_3368 : vec4<f32> = x_3354.x_MainLightWorldToLight[0i];
    let x_3370 : vec3<f32> = vs_INTERP0;
    let x_3373 : vec2<f32> = u_xlat48;
    u_xlat48 = ((vec2<f32>(x_3368.x, x_3368.y) * vec2<f32>(x_3370.x, x_3370.x)) + x_3373);
    let x_3376 : vec4<f32> = x_3354.x_MainLightWorldToLight[2i];
    let x_3378 : vec3<f32> = vs_INTERP0;
    let x_3381 : vec2<f32> = u_xlat48;
    u_xlat48 = ((vec2<f32>(x_3376.x, x_3376.y) * vec2<f32>(x_3378.z, x_3378.z)) + x_3381);
    let x_3383 : vec2<f32> = u_xlat48;
    let x_3385 : vec4<f32> = x_3354.x_MainLightWorldToLight[3i];
    u_xlat48 = (x_3383 + vec2<f32>(x_3385.x, x_3385.y));
    let x_3388 : vec2<f32> = u_xlat48;
    u_xlat48 = ((x_3388 * vec2<f32>(0.5f, 0.5f)) + vec2<f32>(0.5f, 0.5f));
    let x_3396 : vec2<f32> = u_xlat48;
    let x_3398 : f32 = x_90.x_GlobalMipBias.x;
    let x_3399 : vec4<f32> = textureSampleBias(x_MainLightCookieTexture, sampler_MainLightCookieTexture, x_3396, x_3398);
    u_xlat7 = x_3399;
    let x_3401 : f32 = x_3354.x_MainLightCookieTextureFormat;
    let x_3403 : f32 = x_3354.x_MainLightCookieTextureFormat;
    let x_3405 : f32 = x_3354.x_MainLightCookieTextureFormat;
    let x_3407 : f32 = x_3354.x_MainLightCookieTextureFormat;
    let x_3408 : vec4<f32> = vec4<f32>(x_3401, x_3403, x_3405, x_3407);
    let x_3416 : vec4<bool> = (vec4<f32>(x_3408.x, x_3408.y, x_3408.z, x_3408.w) == vec4<f32>(0.0f, 1.0f, 0.0f, 1.0f));
    u_xlatb48 = vec2<bool>(x_3416.x, x_3416.y);
    let x_3419 : bool = u_xlatb48.y;
    if (x_3419) {
      let x_3424 : f32 = u_xlat7.w;
      x_3420 = x_3424;
    } else {
      let x_3427 : f32 = u_xlat7.x;
      x_3420 = x_3427;
    }
    let x_3428 : f32 = x_3420;
    u_xlat65 = x_3428;
    let x_3430 : bool = u_xlatb48.x;
    if (x_3430) {
      let x_3434 : vec4<f32> = u_xlat7;
      x_3431 = vec3<f32>(x_3434.x, x_3434.y, x_3434.z);
    } else {
      let x_3437 : f32 = u_xlat65;
      x_3431 = vec3<f32>(x_3437, x_3437, x_3437);
    }
    let x_3439 : vec3<f32> = x_3431;
    let x_3440 : vec4<f32> = u_xlat7;
    u_xlat7 = vec4<f32>(x_3439.x, x_3439.y, x_3439.z, x_3440.w);
  } else {
    u_xlat7.x = 1.0f;
    u_xlat7.y = 1.0f;
    u_xlat7.z = 1.0f;
  }
  let x_3446 : vec4<f32> = u_xlat7;
  let x_3449 : vec4<f32> = x_90.x_MainLightColor;
  let x_3451 : vec3<f32> = (vec3<f32>(x_3446.x, x_3446.y, x_3446.z) * vec3<f32>(x_3449.x, x_3449.y, x_3449.z));
  let x_3452 : vec4<f32> = u_xlat7;
  u_xlat7 = vec4<f32>(x_3451.x, x_3451.y, x_3451.z, x_3452.w);
  let x_3454 : f32 = u_xlat27;
  let x_3456 : vec4<f32> = u_xlat7;
  let x_3458 : vec3<f32> = (vec3<f32>(x_3454, x_3454, x_3454) * vec3<f32>(x_3456.x, x_3456.y, x_3456.z));
  let x_3459 : vec4<f32> = u_xlat7;
  u_xlat7 = vec4<f32>(x_3458.x, x_3458.y, x_3458.z, x_3459.w);
  let x_3461 : vec3<f32> = u_xlat2;
  let x_3463 : vec4<f32> = u_xlat3;
  u_xlat65 = dot(-(x_3461), vec3<f32>(x_3463.x, x_3463.y, x_3463.z));
  let x_3466 : f32 = u_xlat65;
  let x_3467 : f32 = u_xlat65;
  u_xlat65 = (x_3466 + x_3467);
  let x_3469 : vec4<f32> = u_xlat3;
  let x_3471 : f32 = u_xlat65;
  let x_3475 : vec3<f32> = u_xlat2;
  let x_3477 : vec3<f32> = ((vec3<f32>(x_3469.x, x_3469.y, x_3469.z) * -(vec3<f32>(x_3471, x_3471, x_3471))) + -(x_3475));
  let x_3478 : vec4<f32> = u_xlat8;
  u_xlat8 = vec4<f32>(x_3477.x, x_3477.y, x_3477.z, x_3478.w);
  let x_3480 : vec4<f32> = u_xlat3;
  let x_3482 : vec3<f32> = u_xlat2;
  u_xlat65 = dot(vec3<f32>(x_3480.x, x_3480.y, x_3480.z), x_3482);
  let x_3484 : f32 = u_xlat65;
  u_xlat65 = clamp(x_3484, 0.0f, 1.0f);
  let x_3486 : f32 = u_xlat65;
  u_xlat65 = (-(x_3486) + 1.0f);
  let x_3489 : f32 = u_xlat65;
  let x_3490 : f32 = u_xlat65;
  u_xlat65 = (x_3489 * x_3490);
  let x_3492 : f32 = u_xlat65;
  let x_3493 : f32 = u_xlat65;
  u_xlat65 = (x_3492 * x_3493);
  let x_3496 : f32 = u_xlat43.x;
  u_xlat48.x = ((-(x_3496) * 0.699999988f) + 1.700000048f);
  let x_3504 : f32 = u_xlat43.x;
  let x_3506 : f32 = u_xlat48.x;
  u_xlat43.x = (x_3504 * x_3506);
  let x_3510 : f32 = u_xlat43.x;
  u_xlat43.x = (x_3510 * 6.0f);
  let x_3522 : vec4<f32> = u_xlat8;
  let x_3525 : f32 = u_xlat43.x;
  let x_3526 : vec4<f32> = textureSampleLevel(unity_SpecCube0, samplerunity_SpecCube0, vec3<f32>(x_3522.x, x_3522.y, x_3522.z), x_3525);
  u_xlat8 = x_3526;
  let x_3528 : f32 = u_xlat8.w;
  u_xlat43.x = (x_3528 + -1.0f);
  let x_3532 : f32 = x_161.unity_SpecCube0_HDR.w;
  let x_3534 : f32 = u_xlat43.x;
  u_xlat43.x = ((x_3532 * x_3534) + 1.0f);
  let x_3539 : f32 = u_xlat43.x;
  u_xlat43.x = max(x_3539, 0.0f);
  let x_3543 : f32 = u_xlat43.x;
  u_xlat43.x = log2(x_3543);
  let x_3547 : f32 = u_xlat43.x;
  let x_3549 : f32 = x_161.unity_SpecCube0_HDR.y;
  u_xlat43.x = (x_3547 * x_3549);
  let x_3553 : f32 = u_xlat43.x;
  u_xlat43.x = exp2(x_3553);
  let x_3557 : f32 = u_xlat43.x;
  let x_3559 : f32 = x_161.unity_SpecCube0_HDR.x;
  u_xlat43.x = (x_3557 * x_3559);
  let x_3562 : vec4<f32> = u_xlat8;
  let x_3564 : vec2<f32> = u_xlat43;
  let x_3566 : vec3<f32> = (vec3<f32>(x_3562.x, x_3562.y, x_3562.z) * vec3<f32>(x_3564.x, x_3564.x, x_3564.x));
  let x_3567 : vec4<f32> = u_xlat8;
  u_xlat8 = vec4<f32>(x_3566.x, x_3566.y, x_3566.z, x_3567.w);
  let x_3569 : f32 = u_xlat64;
  let x_3571 : f32 = u_xlat64;
  u_xlat43 = ((vec2<f32>(x_3569, x_3569) * vec2<f32>(x_3571, x_3571)) + vec2<f32>(-1.0f, 1.0f));
  let x_3577 : f32 = u_xlat43.y;
  u_xlat64 = (1.0f / x_3577);
  let x_3579 : f32 = u_xlat67;
  u_xlat67 = (x_3579 + -0.039999999f);
  let x_3582 : f32 = u_xlat65;
  let x_3583 : f32 = u_xlat67;
  u_xlat65 = ((x_3582 * x_3583) + 0.039999999f);
  let x_3587 : f32 = u_xlat64;
  let x_3588 : f32 = u_xlat65;
  u_xlat64 = (x_3587 * x_3588);
  let x_3590 : f32 = u_xlat64;
  let x_3592 : vec4<f32> = u_xlat8;
  let x_3594 : vec3<f32> = (vec3<f32>(x_3590, x_3590, x_3590) * vec3<f32>(x_3592.x, x_3592.y, x_3592.z));
  let x_3595 : vec4<f32> = u_xlat8;
  u_xlat8 = vec4<f32>(x_3594.x, x_3594.y, x_3594.z, x_3595.w);
  let x_3597 : vec3<f32> = u_xlat26;
  let x_3598 : vec3<f32> = u_xlat4;
  let x_3600 : vec4<f32> = u_xlat8;
  u_xlat26 = ((x_3597 * x_3598) + vec3<f32>(x_3600.x, x_3600.y, x_3600.z));
  let x_3603 : f32 = u_xlat63;
  let x_3605 : f32 = x_161.unity_LightData.z;
  u_xlat63 = (x_3603 * x_3605);
  let x_3607 : vec4<f32> = u_xlat3;
  let x_3610 : vec4<f32> = x_90.x_MainLightPosition;
  u_xlat64 = dot(vec3<f32>(x_3607.x, x_3607.y, x_3607.z), vec3<f32>(x_3610.x, x_3610.y, x_3610.z));
  let x_3613 : f32 = u_xlat64;
  u_xlat64 = clamp(x_3613, 0.0f, 1.0f);
  let x_3615 : f32 = u_xlat63;
  let x_3616 : f32 = u_xlat64;
  u_xlat63 = (x_3615 * x_3616);
  let x_3618 : f32 = u_xlat63;
  let x_3620 : vec4<f32> = u_xlat7;
  let x_3622 : vec3<f32> = (vec3<f32>(x_3618, x_3618, x_3618) * vec3<f32>(x_3620.x, x_3620.y, x_3620.z));
  let x_3623 : vec4<f32> = u_xlat7;
  u_xlat7 = vec4<f32>(x_3622.x, x_3622.y, x_3622.z, x_3623.w);
  let x_3625 : vec3<f32> = u_xlat2;
  let x_3627 : vec4<f32> = x_90.x_MainLightPosition;
  let x_3629 : vec3<f32> = (x_3625 + vec3<f32>(x_3627.x, x_3627.y, x_3627.z));
  let x_3630 : vec4<f32> = u_xlat8;
  u_xlat8 = vec4<f32>(x_3629.x, x_3629.y, x_3629.z, x_3630.w);
  let x_3632 : vec4<f32> = u_xlat8;
  let x_3634 : vec4<f32> = u_xlat8;
  u_xlat63 = dot(vec3<f32>(x_3632.x, x_3632.y, x_3632.z), vec3<f32>(x_3634.x, x_3634.y, x_3634.z));
  let x_3637 : f32 = u_xlat63;
  u_xlat63 = max(x_3637, 1.17549435e-37f);
  let x_3640 : f32 = u_xlat63;
  u_xlat63 = inverseSqrt(x_3640);
  let x_3642 : f32 = u_xlat63;
  let x_3644 : vec4<f32> = u_xlat8;
  let x_3646 : vec3<f32> = (vec3<f32>(x_3642, x_3642, x_3642) * vec3<f32>(x_3644.x, x_3644.y, x_3644.z));
  let x_3647 : vec4<f32> = u_xlat8;
  u_xlat8 = vec4<f32>(x_3646.x, x_3646.y, x_3646.z, x_3647.w);
  let x_3649 : vec4<f32> = u_xlat3;
  let x_3651 : vec4<f32> = u_xlat8;
  u_xlat63 = dot(vec3<f32>(x_3649.x, x_3649.y, x_3649.z), vec3<f32>(x_3651.x, x_3651.y, x_3651.z));
  let x_3654 : f32 = u_xlat63;
  u_xlat63 = clamp(x_3654, 0.0f, 1.0f);
  let x_3657 : vec4<f32> = x_90.x_MainLightPosition;
  let x_3659 : vec4<f32> = u_xlat8;
  u_xlat64 = dot(vec3<f32>(x_3657.x, x_3657.y, x_3657.z), vec3<f32>(x_3659.x, x_3659.y, x_3659.z));
  let x_3662 : f32 = u_xlat64;
  u_xlat64 = clamp(x_3662, 0.0f, 1.0f);
  let x_3664 : f32 = u_xlat63;
  let x_3665 : f32 = u_xlat63;
  u_xlat63 = (x_3664 * x_3665);
  let x_3667 : f32 = u_xlat63;
  let x_3669 : f32 = u_xlat43.x;
  u_xlat63 = ((x_3667 * x_3669) + 1.000010014f);
  let x_3673 : f32 = u_xlat64;
  let x_3674 : f32 = u_xlat64;
  u_xlat64 = (x_3673 * x_3674);
  let x_3676 : f32 = u_xlat63;
  let x_3677 : f32 = u_xlat63;
  u_xlat63 = (x_3676 * x_3677);
  let x_3679 : f32 = u_xlat64;
  u_xlat64 = max(x_3679, 0.100000001f);
  let x_3682 : f32 = u_xlat63;
  let x_3683 : f32 = u_xlat64;
  u_xlat63 = (x_3682 * x_3683);
  let x_3686 : f32 = u_xlat5.x;
  let x_3687 : f32 = u_xlat63;
  u_xlat63 = (x_3686 * x_3687);
  let x_3689 : f32 = u_xlat66;
  let x_3690 : f32 = u_xlat63;
  u_xlat63 = (x_3689 / x_3690);
  let x_3692 : f32 = u_xlat63;
  let x_3696 : vec3<f32> = u_xlat4;
  let x_3697 : vec3<f32> = ((vec3<f32>(x_3692, x_3692, x_3692) * vec3<f32>(0.039999999f, 0.039999999f, 0.039999999f)) + x_3696);
  let x_3698 : vec4<f32> = u_xlat8;
  u_xlat8 = vec4<f32>(x_3697.x, x_3697.y, x_3697.z, x_3698.w);
  let x_3700 : vec4<f32> = u_xlat7;
  let x_3702 : vec4<f32> = u_xlat8;
  let x_3704 : vec3<f32> = (vec3<f32>(x_3700.x, x_3700.y, x_3700.z) * vec3<f32>(x_3702.x, x_3702.y, x_3702.z));
  let x_3705 : vec4<f32> = u_xlat7;
  u_xlat7 = vec4<f32>(x_3704.x, x_3704.y, x_3704.z, x_3705.w);
  let x_3708 : f32 = x_90.x_AdditionalLightsCount.x;
  let x_3710 : f32 = x_161.unity_LightData.y;
  u_xlat63 = min(x_3708, x_3710);
  let x_3713 : f32 = u_xlat63;
  u_xlatu63 = bitcast<u32>(i32(x_3713));
  let x_3717 : f32 = x_3354.x_AdditionalLightsCookieAtlasTextureFormat;
  let x_3719 : f32 = x_3354.x_AdditionalLightsCookieAtlasTextureFormat;
  let x_3721 : f32 = x_3354.x_AdditionalLightsCookieAtlasTextureFormat;
  let x_3723 : f32 = x_3354.x_AdditionalLightsCookieAtlasTextureFormat;
  let x_3724 : vec4<f32> = vec4<f32>(x_3717, x_3719, x_3721, x_3723);
  let x_3730 : vec4<bool> = (vec4<f32>(x_3724.x, x_3724.y, x_3724.z, x_3724.w) == vec4<f32>(0.0f, 1.0f, 0.0f, 1.0f));
  u_xlatb48 = vec2<bool>(x_3730.x, x_3730.y);
  u_xlat8.x = 0.0f;
  u_xlat8.y = 0.0f;
  u_xlat8.z = 0.0f;
  u_xlatu_loop_1 = 0u;
  loop {
    let x_3741 : u32 = u_xlatu_loop_1;
    let x_3742 : u32 = u_xlatu63;
    if ((x_3741 < x_3742)) {
    } else {
      break;
    }
    let x_3745 : u32 = u_xlatu_loop_1;
    u_xlatu65 = (x_3745 >> 2u);
    let x_3748 : u32 = u_xlatu_loop_1;
    u_xlati67 = bitcast<i32>((x_3748 & 3u));
    let x_3751 : u32 = u_xlatu65;
    let x_3754 : vec4<f32> = x_161.unity_LightIndices[bitcast<i32>(x_3751)];
    let x_3764 : i32 = u_xlati67;
    indexable = array<vec4<u32>, 4u>(vec4<u32>(1065353216u, 0u, 0u, 0u), vec4<u32>(0u, 1065353216u, 0u, 0u), vec4<u32>(0u, 0u, 1065353216u, 0u), vec4<u32>(0u, 0u, 0u, 1065353216u));
    let x_3769 : vec4<u32> = indexable[x_3764];
    u_xlat65 = dot(x_3754, bitcast<vec4<f32>>(x_3769));
    let x_3772 : f32 = u_xlat65;
    u_xlatu65 = bitcast<u32>(i32(x_3772));
    let x_3775 : vec3<f32> = vs_INTERP0;
    let x_3787 : u32 = u_xlatu65;
    let x_3790 : vec4<f32> = x_3786.x_AdditionalLightsPosition[bitcast<i32>(x_3787)];
    let x_3793 : u32 = u_xlatu65;
    let x_3796 : vec4<f32> = x_3786.x_AdditionalLightsPosition[bitcast<i32>(x_3793)];
    let x_3798 : vec3<f32> = ((-(x_3775) * vec3<f32>(x_3790.w, x_3790.w, x_3790.w)) + vec3<f32>(x_3796.x, x_3796.y, x_3796.z));
    let x_3799 : vec4<f32> = u_xlat9;
    u_xlat9 = vec4<f32>(x_3798.x, x_3798.y, x_3798.z, x_3799.w);
    let x_3801 : vec4<f32> = u_xlat9;
    let x_3803 : vec4<f32> = u_xlat9;
    u_xlat67 = dot(vec3<f32>(x_3801.x, x_3801.y, x_3801.z), vec3<f32>(x_3803.x, x_3803.y, x_3803.z));
    let x_3806 : f32 = u_xlat67;
    u_xlat67 = max(x_3806, 6.10351562e-05f);
    let x_3810 : f32 = u_xlat67;
    u_xlat70 = inverseSqrt(x_3810);
    let x_3812 : f32 = u_xlat70;
    let x_3814 : vec4<f32> = u_xlat9;
    let x_3816 : vec3<f32> = (vec3<f32>(x_3812, x_3812, x_3812) * vec3<f32>(x_3814.x, x_3814.y, x_3814.z));
    let x_3817 : vec4<f32> = u_xlat10;
    u_xlat10 = vec4<f32>(x_3816.x, x_3816.y, x_3816.z, x_3817.w);
    let x_3819 : f32 = u_xlat67;
    u_xlat71 = (1.0f / x_3819);
    let x_3821 : f32 = u_xlat67;
    let x_3822 : u32 = u_xlatu65;
    let x_3825 : f32 = x_3786.x_AdditionalLightsAttenuation[bitcast<i32>(x_3822)].x;
    u_xlat67 = (x_3821 * x_3825);
    let x_3827 : f32 = u_xlat67;
    let x_3829 : f32 = u_xlat67;
    u_xlat67 = ((-(x_3827) * x_3829) + 1.0f);
    let x_3832 : f32 = u_xlat67;
    u_xlat67 = max(x_3832, 0.0f);
    let x_3834 : f32 = u_xlat67;
    let x_3835 : f32 = u_xlat67;
    u_xlat67 = (x_3834 * x_3835);
    let x_3837 : f32 = u_xlat67;
    let x_3838 : f32 = u_xlat71;
    u_xlat67 = (x_3837 * x_3838);
    let x_3840 : u32 = u_xlatu65;
    let x_3843 : vec4<f32> = x_3786.x_AdditionalLightsSpotDir[bitcast<i32>(x_3840)];
    let x_3845 : vec4<f32> = u_xlat10;
    u_xlat71 = dot(vec3<f32>(x_3843.x, x_3843.y, x_3843.z), vec3<f32>(x_3845.x, x_3845.y, x_3845.z));
    let x_3848 : f32 = u_xlat71;
    let x_3849 : u32 = u_xlatu65;
    let x_3852 : f32 = x_3786.x_AdditionalLightsAttenuation[bitcast<i32>(x_3849)].z;
    let x_3854 : u32 = u_xlatu65;
    let x_3857 : f32 = x_3786.x_AdditionalLightsAttenuation[bitcast<i32>(x_3854)].w;
    u_xlat71 = ((x_3848 * x_3852) + x_3857);
    let x_3859 : f32 = u_xlat71;
    u_xlat71 = clamp(x_3859, 0.0f, 1.0f);
    let x_3861 : f32 = u_xlat71;
    let x_3862 : f32 = u_xlat71;
    u_xlat71 = (x_3861 * x_3862);
    let x_3864 : f32 = u_xlat67;
    let x_3865 : f32 = u_xlat71;
    u_xlat67 = (x_3864 * x_3865);
    let x_3868 : u32 = u_xlatu65;
    u_xlatu71 = (x_3868 >> 5u);
    let x_3871 : u32 = u_xlatu65;
    u_xlati72 = (1i << bitcast<u32>((bitcast<i32>(x_3871) & 31i)));
    let x_3877 : i32 = u_xlati72;
    let x_3879 : u32 = u_xlatu71;
    let x_3882 : f32 = x_3354.x_AdditionalLightsCookieEnableBits[bitcast<i32>(x_3879)].el;
    u_xlati71 = bitcast<i32>((bitcast<u32>(x_3877) & bitcast<u32>(x_3882)));
    let x_3886 : i32 = u_xlati71;
    if ((x_3886 != 0i)) {
      let x_3896 : u32 = u_xlatu65;
      let x_3899 : f32 = x_3895.x_AdditionalLightsLightTypes[bitcast<i32>(x_3896)].el;
      u_xlati71 = i32(x_3899);
      let x_3901 : i32 = u_xlati71;
      u_xlati72 = select(1i, 0i, (x_3901 != 0i));
      let x_3905 : u32 = u_xlatu65;
      u_xlati73 = (bitcast<i32>(x_3905) << bitcast<u32>(2i));
      let x_3908 : i32 = u_xlati72;
      if ((x_3908 != 0i)) {
        let x_3912 : vec3<f32> = vs_INTERP0;
        let x_3914 : i32 = u_xlati73;
        let x_3917 : i32 = u_xlati73;
        let x_3921 : vec4<f32> = x_3895.x_AdditionalLightsWorldToLights[((x_3914 + 1i) / 4i)][((x_3917 + 1i) % 4i)];
        let x_3923 : vec3<f32> = (vec3<f32>(x_3912.y, x_3912.y, x_3912.y) * vec3<f32>(x_3921.x, x_3921.y, x_3921.w));
        let x_3924 : vec4<f32> = u_xlat11;
        u_xlat11 = vec4<f32>(x_3923.x, x_3923.y, x_3923.z, x_3924.w);
        let x_3926 : i32 = u_xlati73;
        let x_3928 : i32 = u_xlati73;
        let x_3931 : vec4<f32> = x_3895.x_AdditionalLightsWorldToLights[(x_3926 / 4i)][(x_3928 % 4i)];
        let x_3933 : vec3<f32> = vs_INTERP0;
        let x_3936 : vec4<f32> = u_xlat11;
        let x_3938 : vec3<f32> = ((vec3<f32>(x_3931.x, x_3931.y, x_3931.w) * vec3<f32>(x_3933.x, x_3933.x, x_3933.x)) + vec3<f32>(x_3936.x, x_3936.y, x_3936.z));
        let x_3939 : vec4<f32> = u_xlat11;
        u_xlat11 = vec4<f32>(x_3938.x, x_3938.y, x_3938.z, x_3939.w);
        let x_3941 : i32 = u_xlati73;
        let x_3944 : i32 = u_xlati73;
        let x_3948 : vec4<f32> = x_3895.x_AdditionalLightsWorldToLights[((x_3941 + 2i) / 4i)][((x_3944 + 2i) % 4i)];
        let x_3950 : vec3<f32> = vs_INTERP0;
        let x_3953 : vec4<f32> = u_xlat11;
        let x_3955 : vec3<f32> = ((vec3<f32>(x_3948.x, x_3948.y, x_3948.w) * vec3<f32>(x_3950.z, x_3950.z, x_3950.z)) + vec3<f32>(x_3953.x, x_3953.y, x_3953.z));
        let x_3956 : vec4<f32> = u_xlat11;
        u_xlat11 = vec4<f32>(x_3955.x, x_3955.y, x_3955.z, x_3956.w);
        let x_3958 : vec4<f32> = u_xlat11;
        let x_3960 : i32 = u_xlati73;
        let x_3963 : i32 = u_xlati73;
        let x_3967 : vec4<f32> = x_3895.x_AdditionalLightsWorldToLights[((x_3960 + 3i) / 4i)][((x_3963 + 3i) % 4i)];
        let x_3969 : vec3<f32> = (vec3<f32>(x_3958.x, x_3958.y, x_3958.z) + vec3<f32>(x_3967.x, x_3967.y, x_3967.w));
        let x_3970 : vec4<f32> = u_xlat11;
        u_xlat11 = vec4<f32>(x_3969.x, x_3969.y, x_3969.z, x_3970.w);
        let x_3972 : vec4<f32> = u_xlat11;
        let x_3974 : vec4<f32> = u_xlat11;
        let x_3976 : vec2<f32> = (vec2<f32>(x_3972.x, x_3972.y) / vec2<f32>(x_3974.z, x_3974.z));
        let x_3977 : vec4<f32> = u_xlat11;
        u_xlat11 = vec4<f32>(x_3976.x, x_3976.y, x_3977.z, x_3977.w);
        let x_3979 : vec4<f32> = u_xlat11;
        let x_3982 : vec2<f32> = ((vec2<f32>(x_3979.x, x_3979.y) * vec2<f32>(0.5f, 0.5f)) + vec2<f32>(0.5f, 0.5f));
        let x_3983 : vec4<f32> = u_xlat11;
        u_xlat11 = vec4<f32>(x_3982.x, x_3982.y, x_3983.z, x_3983.w);
        let x_3985 : vec4<f32> = u_xlat11;
        let x_3989 : vec2<f32> = clamp(vec2<f32>(x_3985.x, x_3985.y), vec2<f32>(0.0f, 0.0f), vec2<f32>(1.0f, 1.0f));
        let x_3990 : vec4<f32> = u_xlat11;
        u_xlat11 = vec4<f32>(x_3989.x, x_3989.y, x_3990.z, x_3990.w);
        let x_3992 : u32 = u_xlatu65;
        let x_3995 : vec4<f32> = x_3895.x_AdditionalLightsCookieAtlasUVRects[bitcast<i32>(x_3992)];
        let x_3997 : vec4<f32> = u_xlat11;
        let x_4000 : u32 = u_xlatu65;
        let x_4003 : vec4<f32> = x_3895.x_AdditionalLightsCookieAtlasUVRects[bitcast<i32>(x_4000)];
        let x_4005 : vec2<f32> = ((vec2<f32>(x_3995.x, x_3995.y) * vec2<f32>(x_3997.x, x_3997.y)) + vec2<f32>(x_4003.z, x_4003.w));
        let x_4006 : vec4<f32> = u_xlat11;
        u_xlat11 = vec4<f32>(x_4005.x, x_4005.y, x_4006.z, x_4006.w);
      } else {
        let x_4010 : i32 = u_xlati71;
        u_xlatb71 = (x_4010 == 1i);
        let x_4012 : bool = u_xlatb71;
        u_xlati71 = select(0i, 1i, x_4012);
        let x_4014 : i32 = u_xlati71;
        if ((x_4014 != 0i)) {
          let x_4019 : vec3<f32> = vs_INTERP0;
          let x_4021 : i32 = u_xlati73;
          let x_4024 : i32 = u_xlati73;
          let x_4028 : vec4<f32> = x_3895.x_AdditionalLightsWorldToLights[((x_4021 + 1i) / 4i)][((x_4024 + 1i) % 4i)];
          u_xlat53 = (vec2<f32>(x_4019.y, x_4019.y) * vec2<f32>(x_4028.x, x_4028.y));
          let x_4031 : i32 = u_xlati73;
          let x_4033 : i32 = u_xlati73;
          let x_4036 : vec4<f32> = x_3895.x_AdditionalLightsWorldToLights[(x_4031 / 4i)][(x_4033 % 4i)];
          let x_4038 : vec3<f32> = vs_INTERP0;
          let x_4041 : vec2<f32> = u_xlat53;
          u_xlat53 = ((vec2<f32>(x_4036.x, x_4036.y) * vec2<f32>(x_4038.x, x_4038.x)) + x_4041);
          let x_4043 : i32 = u_xlati73;
          let x_4046 : i32 = u_xlati73;
          let x_4050 : vec4<f32> = x_3895.x_AdditionalLightsWorldToLights[((x_4043 + 2i) / 4i)][((x_4046 + 2i) % 4i)];
          let x_4052 : vec3<f32> = vs_INTERP0;
          let x_4055 : vec2<f32> = u_xlat53;
          u_xlat53 = ((vec2<f32>(x_4050.x, x_4050.y) * vec2<f32>(x_4052.z, x_4052.z)) + x_4055);
          let x_4057 : vec2<f32> = u_xlat53;
          let x_4058 : i32 = u_xlati73;
          let x_4061 : i32 = u_xlati73;
          let x_4065 : vec4<f32> = x_3895.x_AdditionalLightsWorldToLights[((x_4058 + 3i) / 4i)][((x_4061 + 3i) % 4i)];
          u_xlat53 = (x_4057 + vec2<f32>(x_4065.x, x_4065.y));
          let x_4068 : vec2<f32> = u_xlat53;
          u_xlat53 = ((x_4068 * vec2<f32>(0.5f, 0.5f)) + vec2<f32>(0.5f, 0.5f));
          let x_4071 : vec2<f32> = u_xlat53;
          u_xlat53 = fract(x_4071);
          let x_4073 : u32 = u_xlatu65;
          let x_4076 : vec4<f32> = x_3895.x_AdditionalLightsCookieAtlasUVRects[bitcast<i32>(x_4073)];
          let x_4078 : vec2<f32> = u_xlat53;
          let x_4080 : u32 = u_xlatu65;
          let x_4083 : vec4<f32> = x_3895.x_AdditionalLightsCookieAtlasUVRects[bitcast<i32>(x_4080)];
          let x_4085 : vec2<f32> = ((vec2<f32>(x_4076.x, x_4076.y) * x_4078) + vec2<f32>(x_4083.z, x_4083.w));
          let x_4086 : vec4<f32> = u_xlat11;
          u_xlat11 = vec4<f32>(x_4085.x, x_4085.y, x_4086.z, x_4086.w);
        } else {
          let x_4089 : vec3<f32> = vs_INTERP0;
          let x_4091 : i32 = u_xlati73;
          let x_4094 : i32 = u_xlati73;
          let x_4098 : vec4<f32> = x_3895.x_AdditionalLightsWorldToLights[((x_4091 + 1i) / 4i)][((x_4094 + 1i) % 4i)];
          u_xlat12 = (vec4<f32>(x_4089.y, x_4089.y, x_4089.y, x_4089.y) * x_4098);
          let x_4100 : i32 = u_xlati73;
          let x_4102 : i32 = u_xlati73;
          let x_4105 : vec4<f32> = x_3895.x_AdditionalLightsWorldToLights[(x_4100 / 4i)][(x_4102 % 4i)];
          let x_4106 : vec3<f32> = vs_INTERP0;
          let x_4109 : vec4<f32> = u_xlat12;
          u_xlat12 = ((x_4105 * vec4<f32>(x_4106.x, x_4106.x, x_4106.x, x_4106.x)) + x_4109);
          let x_4111 : i32 = u_xlati73;
          let x_4114 : i32 = u_xlati73;
          let x_4118 : vec4<f32> = x_3895.x_AdditionalLightsWorldToLights[((x_4111 + 2i) / 4i)][((x_4114 + 2i) % 4i)];
          let x_4119 : vec3<f32> = vs_INTERP0;
          let x_4122 : vec4<f32> = u_xlat12;
          u_xlat12 = ((x_4118 * vec4<f32>(x_4119.z, x_4119.z, x_4119.z, x_4119.z)) + x_4122);
          let x_4124 : vec4<f32> = u_xlat12;
          let x_4125 : i32 = u_xlati73;
          let x_4128 : i32 = u_xlati73;
          let x_4132 : vec4<f32> = x_3895.x_AdditionalLightsWorldToLights[((x_4125 + 3i) / 4i)][((x_4128 + 3i) % 4i)];
          u_xlat12 = (x_4124 + x_4132);
          let x_4134 : vec4<f32> = u_xlat12;
          let x_4136 : vec4<f32> = u_xlat12;
          let x_4138 : vec3<f32> = (vec3<f32>(x_4134.x, x_4134.y, x_4134.z) / vec3<f32>(x_4136.w, x_4136.w, x_4136.w));
          let x_4139 : vec4<f32> = u_xlat12;
          u_xlat12 = vec4<f32>(x_4138.x, x_4138.y, x_4138.z, x_4139.w);
          let x_4141 : vec4<f32> = u_xlat12;
          let x_4143 : vec4<f32> = u_xlat12;
          u_xlat71 = dot(vec3<f32>(x_4141.x, x_4141.y, x_4141.z), vec3<f32>(x_4143.x, x_4143.y, x_4143.z));
          let x_4146 : f32 = u_xlat71;
          u_xlat71 = inverseSqrt(x_4146);
          let x_4148 : f32 = u_xlat71;
          let x_4150 : vec4<f32> = u_xlat12;
          let x_4152 : vec3<f32> = (vec3<f32>(x_4148, x_4148, x_4148) * vec3<f32>(x_4150.x, x_4150.y, x_4150.z));
          let x_4153 : vec4<f32> = u_xlat12;
          u_xlat12 = vec4<f32>(x_4152.x, x_4152.y, x_4152.z, x_4153.w);
          let x_4155 : vec4<f32> = u_xlat12;
          u_xlat71 = dot(abs(vec3<f32>(x_4155.x, x_4155.y, x_4155.z)), vec3<f32>(1.0f, 1.0f, 1.0f));
          let x_4160 : f32 = u_xlat71;
          u_xlat71 = max(x_4160, 0.000001f);
          let x_4163 : f32 = u_xlat71;
          u_xlat71 = (1.0f / x_4163);
          let x_4165 : f32 = u_xlat71;
          let x_4167 : vec4<f32> = u_xlat12;
          let x_4169 : vec3<f32> = (vec3<f32>(x_4165, x_4165, x_4165) * vec3<f32>(x_4167.z, x_4167.x, x_4167.y));
          let x_4170 : vec4<f32> = u_xlat13;
          u_xlat13 = vec4<f32>(x_4169.x, x_4169.y, x_4169.z, x_4170.w);
          let x_4173 : f32 = u_xlat13.x;
          u_xlat13.x = -(x_4173);
          let x_4177 : f32 = u_xlat13.x;
          u_xlat13.x = clamp(x_4177, 0.0f, 1.0f);
          let x_4181 : vec4<f32> = u_xlat13;
          let x_4184 : vec4<bool> = (vec4<f32>(x_4181.y, x_4181.z, x_4181.y, x_4181.z) >= vec4<f32>(0.0f, 0.0f, 0.0f, 0.0f));
          u_xlatb53 = vec2<bool>(x_4184.x, x_4184.y);
          let x_4187 : bool = u_xlatb53.x;
          if (x_4187) {
            let x_4192 : f32 = u_xlat13.x;
            x_4188 = x_4192;
          } else {
            let x_4195 : f32 = u_xlat13.x;
            x_4188 = -(x_4195);
          }
          let x_4197 : f32 = x_4188;
          u_xlat53.x = x_4197;
          let x_4200 : bool = u_xlatb53.y;
          if (x_4200) {
            let x_4205 : f32 = u_xlat13.x;
            x_4201 = x_4205;
          } else {
            let x_4208 : f32 = u_xlat13.x;
            x_4201 = -(x_4208);
          }
          let x_4210 : f32 = x_4201;
          u_xlat53.y = x_4210;
          let x_4212 : vec4<f32> = u_xlat12;
          let x_4214 : f32 = u_xlat71;
          let x_4217 : vec2<f32> = u_xlat53;
          u_xlat53 = ((vec2<f32>(x_4212.x, x_4212.y) * vec2<f32>(x_4214, x_4214)) + x_4217);
          let x_4219 : vec2<f32> = u_xlat53;
          u_xlat53 = ((x_4219 * vec2<f32>(0.5f, 0.5f)) + vec2<f32>(0.5f, 0.5f));
          let x_4222 : vec2<f32> = u_xlat53;
          u_xlat53 = clamp(x_4222, vec2<f32>(0.0f, 0.0f), vec2<f32>(1.0f, 1.0f));
          let x_4226 : u32 = u_xlatu65;
          let x_4229 : vec4<f32> = x_3895.x_AdditionalLightsCookieAtlasUVRects[bitcast<i32>(x_4226)];
          let x_4231 : vec2<f32> = u_xlat53;
          let x_4233 : u32 = u_xlatu65;
          let x_4236 : vec4<f32> = x_3895.x_AdditionalLightsCookieAtlasUVRects[bitcast<i32>(x_4233)];
          let x_4238 : vec2<f32> = ((vec2<f32>(x_4229.x, x_4229.y) * x_4231) + vec2<f32>(x_4236.z, x_4236.w));
          let x_4239 : vec4<f32> = u_xlat11;
          u_xlat11 = vec4<f32>(x_4238.x, x_4238.y, x_4239.z, x_4239.w);
        }
      }
      let x_4246 : vec4<f32> = u_xlat11;
      let x_4249 : f32 = x_90.x_GlobalMipBias.x;
      let x_4250 : vec4<f32> = textureSampleBias(x_AdditionalLightsCookieAtlasTexture, sampler_AdditionalLightsCookieAtlasTexture, vec2<f32>(x_4246.x, x_4246.y), x_4249);
      u_xlat11 = x_4250;
      let x_4252 : bool = u_xlatb48.y;
      if (x_4252) {
        let x_4257 : f32 = u_xlat11.w;
        x_4253 = x_4257;
      } else {
        let x_4260 : f32 = u_xlat11.x;
        x_4253 = x_4260;
      }
      let x_4261 : f32 = x_4253;
      u_xlat71 = x_4261;
      let x_4263 : bool = u_xlatb48.x;
      if (x_4263) {
        let x_4267 : vec4<f32> = u_xlat11;
        x_4264 = vec3<f32>(x_4267.x, x_4267.y, x_4267.z);
      } else {
        let x_4270 : f32 = u_xlat71;
        x_4264 = vec3<f32>(x_4270, x_4270, x_4270);
      }
      let x_4272 : vec3<f32> = x_4264;
      let x_4273 : vec4<f32> = u_xlat11;
      u_xlat11 = vec4<f32>(x_4272.x, x_4272.y, x_4272.z, x_4273.w);
    } else {
      u_xlat11.x = 1.0f;
      u_xlat11.y = 1.0f;
      u_xlat11.z = 1.0f;
    }
    let x_4279 : vec4<f32> = u_xlat11;
    let x_4281 : u32 = u_xlatu65;
    let x_4284 : vec4<f32> = x_3786.x_AdditionalLightsColor[bitcast<i32>(x_4281)];
    let x_4286 : vec3<f32> = (vec3<f32>(x_4279.x, x_4279.y, x_4279.z) * vec3<f32>(x_4284.x, x_4284.y, x_4284.z));
    let x_4287 : vec4<f32> = u_xlat11;
    u_xlat11 = vec4<f32>(x_4286.x, x_4286.y, x_4286.z, x_4287.w);
    let x_4289 : f32 = u_xlat27;
    let x_4291 : vec4<f32> = u_xlat11;
    let x_4293 : vec3<f32> = (vec3<f32>(x_4289, x_4289, x_4289) * vec3<f32>(x_4291.x, x_4291.y, x_4291.z));
    let x_4294 : vec4<f32> = u_xlat11;
    u_xlat11 = vec4<f32>(x_4293.x, x_4293.y, x_4293.z, x_4294.w);
    let x_4296 : vec4<f32> = u_xlat3;
    let x_4298 : vec4<f32> = u_xlat10;
    u_xlat65 = dot(vec3<f32>(x_4296.x, x_4296.y, x_4296.z), vec3<f32>(x_4298.x, x_4298.y, x_4298.z));
    let x_4301 : f32 = u_xlat65;
    u_xlat65 = clamp(x_4301, 0.0f, 1.0f);
    let x_4303 : f32 = u_xlat65;
    let x_4304 : f32 = u_xlat67;
    u_xlat65 = (x_4303 * x_4304);
    let x_4306 : f32 = u_xlat65;
    let x_4308 : vec4<f32> = u_xlat11;
    let x_4310 : vec3<f32> = (vec3<f32>(x_4306, x_4306, x_4306) * vec3<f32>(x_4308.x, x_4308.y, x_4308.z));
    let x_4311 : vec4<f32> = u_xlat11;
    u_xlat11 = vec4<f32>(x_4310.x, x_4310.y, x_4310.z, x_4311.w);
    let x_4313 : vec4<f32> = u_xlat9;
    let x_4315 : f32 = u_xlat70;
    let x_4318 : vec3<f32> = u_xlat2;
    let x_4319 : vec3<f32> = ((vec3<f32>(x_4313.x, x_4313.y, x_4313.z) * vec3<f32>(x_4315, x_4315, x_4315)) + x_4318);
    let x_4320 : vec4<f32> = u_xlat9;
    u_xlat9 = vec4<f32>(x_4319.x, x_4319.y, x_4319.z, x_4320.w);
    let x_4322 : vec4<f32> = u_xlat9;
    let x_4324 : vec4<f32> = u_xlat9;
    u_xlat65 = dot(vec3<f32>(x_4322.x, x_4322.y, x_4322.z), vec3<f32>(x_4324.x, x_4324.y, x_4324.z));
    let x_4327 : f32 = u_xlat65;
    u_xlat65 = max(x_4327, 1.17549435e-37f);
    let x_4329 : f32 = u_xlat65;
    u_xlat65 = inverseSqrt(x_4329);
    let x_4331 : f32 = u_xlat65;
    let x_4333 : vec4<f32> = u_xlat9;
    let x_4335 : vec3<f32> = (vec3<f32>(x_4331, x_4331, x_4331) * vec3<f32>(x_4333.x, x_4333.y, x_4333.z));
    let x_4336 : vec4<f32> = u_xlat9;
    u_xlat9 = vec4<f32>(x_4335.x, x_4335.y, x_4335.z, x_4336.w);
    let x_4338 : vec4<f32> = u_xlat3;
    let x_4340 : vec4<f32> = u_xlat9;
    u_xlat65 = dot(vec3<f32>(x_4338.x, x_4338.y, x_4338.z), vec3<f32>(x_4340.x, x_4340.y, x_4340.z));
    let x_4343 : f32 = u_xlat65;
    u_xlat65 = clamp(x_4343, 0.0f, 1.0f);
    let x_4345 : vec4<f32> = u_xlat10;
    let x_4347 : vec4<f32> = u_xlat9;
    u_xlat67 = dot(vec3<f32>(x_4345.x, x_4345.y, x_4345.z), vec3<f32>(x_4347.x, x_4347.y, x_4347.z));
    let x_4350 : f32 = u_xlat67;
    u_xlat67 = clamp(x_4350, 0.0f, 1.0f);
    let x_4352 : f32 = u_xlat65;
    let x_4353 : f32 = u_xlat65;
    u_xlat65 = (x_4352 * x_4353);
    let x_4355 : f32 = u_xlat65;
    let x_4357 : f32 = u_xlat43.x;
    u_xlat65 = ((x_4355 * x_4357) + 1.000010014f);
    let x_4360 : f32 = u_xlat67;
    let x_4361 : f32 = u_xlat67;
    u_xlat67 = (x_4360 * x_4361);
    let x_4363 : f32 = u_xlat65;
    let x_4364 : f32 = u_xlat65;
    u_xlat65 = (x_4363 * x_4364);
    let x_4366 : f32 = u_xlat67;
    u_xlat67 = max(x_4366, 0.100000001f);
    let x_4368 : f32 = u_xlat65;
    let x_4369 : f32 = u_xlat67;
    u_xlat65 = (x_4368 * x_4369);
    let x_4372 : f32 = u_xlat5.x;
    let x_4373 : f32 = u_xlat65;
    u_xlat65 = (x_4372 * x_4373);
    let x_4375 : f32 = u_xlat66;
    let x_4376 : f32 = u_xlat65;
    u_xlat65 = (x_4375 / x_4376);
    let x_4378 : f32 = u_xlat65;
    let x_4381 : vec3<f32> = u_xlat4;
    let x_4382 : vec3<f32> = ((vec3<f32>(x_4378, x_4378, x_4378) * vec3<f32>(0.039999999f, 0.039999999f, 0.039999999f)) + x_4381);
    let x_4383 : vec4<f32> = u_xlat9;
    u_xlat9 = vec4<f32>(x_4382.x, x_4382.y, x_4382.z, x_4383.w);
    let x_4385 : vec4<f32> = u_xlat9;
    let x_4387 : vec4<f32> = u_xlat11;
    let x_4390 : vec4<f32> = u_xlat8;
    let x_4392 : vec3<f32> = ((vec3<f32>(x_4385.x, x_4385.y, x_4385.z) * vec3<f32>(x_4387.x, x_4387.y, x_4387.z)) + vec3<f32>(x_4390.x, x_4390.y, x_4390.z));
    let x_4393 : vec4<f32> = u_xlat8;
    u_xlat8 = vec4<f32>(x_4392.x, x_4392.y, x_4392.z, x_4393.w);

    continuing {
      let x_4395 : u32 = u_xlatu_loop_1;
      u_xlatu_loop_1 = (x_4395 + bitcast<u32>(1i));
    }
  }
  let x_4397 : vec3<f32> = u_xlat26;
  let x_4398 : vec4<f32> = u_xlat6;
  let x_4401 : vec4<f32> = u_xlat7;
  u_xlat2 = ((x_4397 * vec3<f32>(x_4398.x, x_4398.x, x_4398.x)) + vec3<f32>(x_4401.x, x_4401.y, x_4401.z));
  let x_4404 : vec4<f32> = u_xlat8;
  let x_4406 : vec3<f32> = u_xlat2;
  u_xlat2 = (vec3<f32>(x_4404.x, x_4404.y, x_4404.z) + x_4406);
  let x_4410 : vec4<f32> = vs_INTERP4;
  let x_4412 : vec3<f32> = u_xlat0;
  let x_4414 : vec3<f32> = u_xlat2;
  let x_4415 : vec3<f32> = ((vec3<f32>(x_4410.w, x_4410.w, x_4410.w) * x_4412) + x_4414);
  let x_4416 : vec4<f32> = SV_Target0;
  SV_Target0 = vec4<f32>(x_4415.x, x_4415.y, x_4415.z, x_4416.w);
  let x_4418 : bool = u_xlatb22;
  if (x_4418) {
    let x_4423 : f32 = u_xlat1.x;
    x_4419 = x_4423;
  } else {
    x_4419 = 1.0f;
  }
  let x_4425 : f32 = x_4419;
  SV_Target0.w = x_4425;
  return;
}

struct main_out {
  @location(0)
  SV_Target0_1 : vec4<f32>,
}

@fragment
fn main(@builtin(position) gl_FragCoord_param : vec4<f32>, @location(1) vs_INTERP1_param : vec3<f32>, @location(0) vs_INTERP0_param : vec3<f32>, @location(3) vs_INTERP3_param : vec4<f32>, @location(4) vs_INTERP4_param : vec4<f32>, @location(2) vs_INTERP2_param : vec4<f32>, @location(5) vs_INTERP9_param : vec4<f32>) -> main_out {
  gl_FragCoord = gl_FragCoord_param;
  vs_INTERP1 = vs_INTERP1_param;
  vs_INTERP0 = vs_INTERP0_param;
  vs_INTERP3 = vs_INTERP3_param;
  vs_INTERP4 = vs_INTERP4_param;
  vs_INTERP2 = vs_INTERP2_param;
  vs_INTERP9 = vs_INTERP9_param;
  main_1();
  return main_out(SV_Target0);
}

