#version 440
#extension GL_ARB_explicit_attrib_location : require
#extension GL_ARB_shading_language_420pack : require

layout(origin_upper_left) in vec4 gl_FragCoord;
#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
precise vec4 u_xlat_precise_vec4;
precise ivec4 u_xlat_precise_ivec4;
precise bvec4 u_xlat_precise_bvec4;
precise uvec4 u_xlat_precise_uvec4;
const uvec4 ImmCB_0[] = uvec4[4] (
	uvec4(0x3F800000, 0x0, 0x0, 0x0),
	uvec4(0x0, 0x3F800000, 0x0, 0x0),
	uvec4(0x0, 0x0, 0x3F800000, 0x0),
	uvec4(0x0, 0x0, 0x0, 0x3F800000));
layout(set = 1, binding = 0, std140) uniform PGlobals {
	vec2 _GlobalMipBias;
	vec4 _MainLightPosition;
	vec4 _MainLightColor;
	vec4 _AdditionalLightsCount;
	vec3 _WorldSpaceCameraPos;
	vec4 unity_OrthoParams;
	mat4x4 unity_MatrixV;
};
layout(set = 1, binding = 1, std140) uniform AdditionalLights {
	vec4 _AdditionalLightsPosition[32];
	vec4 _AdditionalLightsColor[32];
	vec4 _AdditionalLightsAttenuation[32];
	vec4 _AdditionalLightsSpotDir[32];
	vec4 _AdditionalLightsOcclusionProbes[32];
	float _AdditionalLightsLayerMasks[32];
};
layout(set = 1, binding = 2, std140) uniform UnityPerDraw {
	mat4x4 unity_ObjectToWorld;
	mat4x4 unity_WorldToObject;
	vec4 unity_LODFade;
	vec4 unity_WorldTransformParams;
	vec4 unity_RenderingLayer;
	vec4 unity_LightData;
	vec4 unity_LightIndices[2];
	vec4 unity_ProbesOcclusion;
	vec4 unity_SpecCube0_HDR;
	vec4 unity_SpecCube1_HDR;
	vec4 unity_SpecCube0_BoxMax;
	vec4 unity_SpecCube0_BoxMin;
	vec4 unity_SpecCube0_ProbePosition;
	vec4 unity_SpecCube1_BoxMax;
	vec4 unity_SpecCube1_BoxMin;
	vec4 unity_SpecCube1_ProbePosition;
	vec4 unity_LightmapST;
	vec4 unity_DynamicLightmapST;
	vec4 unity_SHAr;
	vec4 unity_SHAg;
	vec4 unity_SHAb;
	vec4 unity_SHBr;
	vec4 unity_SHBg;
	vec4 unity_SHBb;
	vec4 unity_SHC;
	vec4 unity_RendererBounds_Min;
	vec4 unity_RendererBounds_Max;
	mat4x4 unity_MatrixPreviousM;
	mat4x4 unity_MatrixPreviousMI;
	vec4 unity_MotionVectorsParams;
	vec4 unity_SpriteColor;
	vec4 unity_SpriteProps;
};
layout(set = 1, binding = 3, std140) uniform UnityPerMaterial {
	vec4 _BaseMap_ST;
	vec4 _BaseColor;
	vec4 _SpecColor;
	vec4 _EmissionColor;
	float _Cutoff;
	float _Surface;
};
layout(set = 1, binding = 4, std140) uniform LightShadows {
	mat4x4 _MainLightWorldToShadow[5];
	vec4 _CascadeShadowSplitSpheres0;
	vec4 _CascadeShadowSplitSpheres1;
	vec4 _CascadeShadowSplitSpheres2;
	vec4 _CascadeShadowSplitSpheres3;
	vec4 _CascadeShadowSplitSphereRadii;
	vec4 _MainLightShadowOffset0;
	vec4 _MainLightShadowOffset1;
	vec4 _MainLightShadowParams;
	vec4 _MainLightShadowmapSize;
	vec4 _AdditionalShadowOffset0;
	vec4 _AdditionalShadowOffset1;
	vec4 _AdditionalShadowFadeParams;
	vec4 _AdditionalShadowmapSize;
	vec4 _AdditionalShadowParams[32];
	mat4x4 _AdditionalLightsWorldToShadow[32];
};
layout(set = 1, binding = 5, std140) uniform LightCookies {
	mat4x4 _MainLightWorldToLight;
	float _AdditionalLightsCookieEnableBits;
	float _MainLightCookieTextureFormat;
	float _AdditionalLightsCookieAtlasTextureFormat;
	mat4x4 _AdditionalLightsWorldToLights[32];
	vec4 _AdditionalLightsCookieAtlasUVRects[32];
	float _AdditionalLightsLightTypes[32];
};
layout(set = 0, binding = 0) uniform mediump texture2D _BaseMap;
layout(set = 0, binding = 1) uniform mediump texture2D _MainLightShadowmapTexture;
layout(set = 0, binding = 2) uniform mediump texture2D _AdditionalLightsShadowmapTexture;
layout(set = 0, binding = 3) uniform mediump texture2D _MainLightCookieTexture;
layout(set = 0, binding = 4) uniform mediump texture2D _AdditionalLightsCookieAtlasTexture;
layout(location = 0) in highp  vec2 vs_TEXCOORD0;
layout(location = 1) in highp  vec3 vs_TEXCOORD1;
layout(location = 2) in highp  vec3 vs_TEXCOORD2;
layout(location = 0) out highp vec4 SV_Target0;
vec4 u_xlat0;
vec4 u_xlat1;
bool u_xlatb1;
vec3 u_xlat2;
vec4 u_xlat3;
int u_xlati3;
uint u_xlatu3;
bvec4 u_xlatb3;
vec4 u_xlat4;
vec4 u_xlat5;
bvec2 u_xlatb5;
vec4 u_xlat6;
vec4 u_xlat7;
vec4 u_xlat8;
int u_xlati8;
bvec3 u_xlatb8;
vec4 u_xlat9;
bvec3 u_xlatb9;
vec4 u_xlat10;
vec4 u_xlat11;
vec4 u_xlat12;
vec4 u_xlat13;
vec4 u_xlat14;
vec4 u_xlat15;
vec4 u_xlat16;
vec4 u_xlat17;
vec4 u_xlat18;
vec4 u_xlat19;
vec4 u_xlat20;
vec4 u_xlat21;
vec4 u_xlat22;
vec3 u_xlat23;
bool u_xlatb23;
vec3 u_xlat24;
vec3 u_xlat26;
bvec2 u_xlatb26;
vec3 u_xlat29;
vec2 u_xlat30;
vec3 u_xlat31;
int u_xlati31;
bool u_xlatb31;
float u_xlat32;
vec3 u_xlat33;
vec2 u_xlat34;
float u_xlat49;
vec2 u_xlat51;
uint u_xlatu51;
vec2 u_xlat53;
vec2 u_xlat54;
int u_xlati54;
vec2 u_xlat55;
bvec2 u_xlatb55;
vec2 u_xlat57;
vec2 u_xlat58;
vec2 u_xlat59;
vec2 u_xlat63;
float u_xlat70;
bool u_xlatb70;
float u_xlat71;
float u_xlat72;
bool u_xlatb72;
float u_xlat73;
uint u_xlatu73;
float u_xlat74;
int u_xlati74;
uint u_xlatu74;
bool u_xlatb74;
float u_xlat75;
int u_xlati75;
float u_xlat76;
int u_xlati76;
bool u_xlatb76;
float u_xlat77;
bool u_xlatb77;
layout(set = 0, binding = 5) uniform mediump  sampler sampler_BaseMap;
layout(set = 0, binding = 6) uniform mediump  sampler sampler_LinearClamp;
layout(set = 0, binding = 7) uniform mediump  samplerShadow sampler_LinearClampCompare;
layout(set = 0, binding = 8) uniform mediump  sampler sampler_MainLightCookieTexture;
void main()
{
    u_xlat0 = texture(sampler2D(_BaseMap, sampler_BaseMap), vs_TEXCOORD0.xy, _GlobalMipBias.x);
    u_xlat0 = u_xlat0.wxyz * _BaseColor.wxyz;
    u_xlatb1 = unity_OrthoParams.w==0.0;
    u_xlat24.xyz = (-vs_TEXCOORD1.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat2.x = dot(u_xlat24.xyz, u_xlat24.xyz);
    u_xlat2.x = inversesqrt(u_xlat2.x);
    u_xlat24.xyz = u_xlat24.xyz * u_xlat2.xxx;
    u_xlat2.x = (u_xlatb1) ? u_xlat24.x : unity_MatrixV[0].z;
    u_xlat2.y = (u_xlatb1) ? u_xlat24.y : unity_MatrixV[1].z;
    u_xlat2.z = (u_xlatb1) ? u_xlat24.z : unity_MatrixV[2].z;
    u_xlat1.x = dot(vs_TEXCOORD2.xyz, vs_TEXCOORD2.xyz);
    u_xlat1.x = inversesqrt(u_xlat1.x);
    u_xlat1.xyz = u_xlat1.xxx * vs_TEXCOORD2.xyz;
    u_xlat71 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat71 = max(u_xlat71, 6.10351562e-05);
    u_xlat71 = inversesqrt(u_xlat71);
    u_xlat3.xyz = vs_TEXCOORD1.xyz + (-_CascadeShadowSplitSpheres0.xyz);
    u_xlat4.xyz = vs_TEXCOORD1.xyz + (-_CascadeShadowSplitSpheres1.xyz);
    u_xlat5.xyz = vs_TEXCOORD1.xyz + (-_CascadeShadowSplitSpheres2.xyz);
    u_xlat6.xyz = vs_TEXCOORD1.xyz + (-_CascadeShadowSplitSpheres3.xyz);
    u_xlat3.x = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat3.y = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat3.z = dot(u_xlat5.xyz, u_xlat5.xyz);
    u_xlat3.w = dot(u_xlat6.xyz, u_xlat6.xyz);
    u_xlatb3 = lessThan(u_xlat3, _CascadeShadowSplitSphereRadii);
    u_xlat4.x = u_xlatb3.x ? float(1.0) : 0.0;
    u_xlat4.y = u_xlatb3.y ? float(1.0) : 0.0;
    u_xlat4.z = u_xlatb3.z ? float(1.0) : 0.0;
    u_xlat4.w = u_xlatb3.w ? float(1.0) : 0.0;
;
    u_xlat3.x = (u_xlatb3.x) ? float(-1.0) : float(-0.0);
    u_xlat3.y = (u_xlatb3.y) ? float(-1.0) : float(-0.0);
    u_xlat3.z = (u_xlatb3.z) ? float(-1.0) : float(-0.0);
    u_xlat3.xyz = u_xlat3.xyz + u_xlat4.yzw;
    u_xlat4.yzw = max(u_xlat3.xyz, vec3(0.0, 0.0, 0.0));
    u_xlat3.x = dot(u_xlat4, vec4(4.0, 3.0, 2.0, 1.0));
    u_xlat3.x = (-u_xlat3.x) + 4.0;
    u_xlatu3 = uint(u_xlat3.x);
    u_xlati3 = int(u_xlatu3) << (2 & int(0x1F));
    u_xlat26.xyz = vs_TEXCOORD1.yyy * _MainLightWorldToShadow[(u_xlati3 + 1) / 4][(u_xlati3 + 1) % 4].xyz;
    u_xlat26.xyz = _MainLightWorldToShadow[u_xlati3 / 4][u_xlati3 % 4].xyz * vs_TEXCOORD1.xxx + u_xlat26.xyz;
    u_xlat26.xyz = _MainLightWorldToShadow[(u_xlati3 + 2) / 4][(u_xlati3 + 2) % 4].xyz * vs_TEXCOORD1.zzz + u_xlat26.xyz;
    u_xlat3.xyz = u_xlat26.xyz + _MainLightWorldToShadow[(u_xlati3 + 3) / 4][(u_xlati3 + 3) % 4].xyz;
    u_xlat1.w = 1.0;
    u_xlat4.x = dot(unity_SHAr, u_xlat1);
    u_xlat4.y = dot(unity_SHAg, u_xlat1);
    u_xlat4.z = dot(unity_SHAb, u_xlat1);
    u_xlat5 = u_xlat1.yzzx * u_xlat1.xyzz;
    u_xlat6.x = dot(unity_SHBr, u_xlat5);
    u_xlat6.y = dot(unity_SHBg, u_xlat5);
    u_xlat6.z = dot(unity_SHBb, u_xlat5);
    u_xlat70 = u_xlat1.y * u_xlat1.y;
    u_xlat70 = u_xlat1.x * u_xlat1.x + (-u_xlat70);
    u_xlat5.xyz = unity_SHC.xyz * vec3(u_xlat70) + u_xlat6.xyz;
    u_xlat4.xyz = u_xlat4.xyz + u_xlat5.xyz;
    u_xlatb70 = 0.0<_MainLightShadowParams.y;
    if(u_xlatb70){
        u_xlatb70 = _MainLightShadowParams.y==1.0;
        if(u_xlatb70){
            u_xlat5 = u_xlat3.xyxy + _MainLightShadowOffset0;
            vec3 txVec0 = vec3(u_xlat5.xy,u_xlat3.z);
            u_xlat6.x = textureLod(sampler2DShadow(_MainLightShadowmapTexture, sampler_LinearClampCompare), txVec0, 0.0);
            vec3 txVec1 = vec3(u_xlat5.zw,u_xlat3.z);
            u_xlat6.y = textureLod(sampler2DShadow(_MainLightShadowmapTexture, sampler_LinearClampCompare), txVec1, 0.0);
            u_xlat5 = u_xlat3.xyxy + _MainLightShadowOffset1;
            vec3 txVec2 = vec3(u_xlat5.xy,u_xlat3.z);
            u_xlat6.z = textureLod(sampler2DShadow(_MainLightShadowmapTexture, sampler_LinearClampCompare), txVec2, 0.0);
            vec3 txVec3 = vec3(u_xlat5.zw,u_xlat3.z);
            u_xlat6.w = textureLod(sampler2DShadow(_MainLightShadowmapTexture, sampler_LinearClampCompare), txVec3, 0.0);
            u_xlat70 = dot(u_xlat6, vec4(0.25, 0.25, 0.25, 0.25));
        } else {
            u_xlatb72 = _MainLightShadowParams.y==2.0;
            if(u_xlatb72){
                u_xlat5.xy = u_xlat3.xy * _MainLightShadowmapSize.zw + vec2(0.5, 0.5);
                u_xlat5.xy = floor(u_xlat5.xy);
                u_xlat51.xy = u_xlat3.xy * _MainLightShadowmapSize.zw + (-u_xlat5.xy);
                u_xlat6 = u_xlat51.xxyy + vec4(0.5, 1.0, 0.5, 1.0);
                u_xlat7 = u_xlat6.xxzz * u_xlat6.xxzz;
                u_xlat6.xz = u_xlat7.yw * vec2(0.0799999982, 0.0799999982);
                u_xlat7.xy = u_xlat7.xz * vec2(0.5, 0.5) + (-u_xlat51.xy);
                u_xlat53.xy = (-u_xlat51.xy) + vec2(1.0, 1.0);
                u_xlat8.xy = min(u_xlat51.xy, vec2(0.0, 0.0));
                u_xlat8.xy = (-u_xlat8.xy) * u_xlat8.xy + u_xlat53.xy;
                u_xlat51.xy = max(u_xlat51.xy, vec2(0.0, 0.0));
                u_xlat51.xy = (-u_xlat51.xy) * u_xlat51.xy + u_xlat6.yw;
                u_xlat8.xy = u_xlat8.xy + vec2(1.0, 1.0);
                u_xlat51.xy = u_xlat51.xy + vec2(1.0, 1.0);
                u_xlat9.xy = u_xlat7.xy * vec2(0.159999996, 0.159999996);
                u_xlat7.xy = u_xlat53.xy * vec2(0.159999996, 0.159999996);
                u_xlat8.xy = u_xlat8.xy * vec2(0.159999996, 0.159999996);
                u_xlat10.xy = u_xlat51.xy * vec2(0.159999996, 0.159999996);
                u_xlat51.xy = u_xlat6.yw * vec2(0.159999996, 0.159999996);
                u_xlat9.z = u_xlat8.x;
                u_xlat9.w = u_xlat51.x;
                u_xlat7.z = u_xlat10.x;
                u_xlat7.w = u_xlat6.x;
                u_xlat11 = u_xlat7.zwxz + u_xlat9.zwxz;
                u_xlat8.z = u_xlat9.y;
                u_xlat8.w = u_xlat51.y;
                u_xlat10.z = u_xlat7.y;
                u_xlat10.w = u_xlat6.z;
                u_xlat6.xyz = u_xlat8.zyw + u_xlat10.zyw;
                u_xlat7.xyz = u_xlat7.xzw / u_xlat11.zwy;
                u_xlat7.xyz = u_xlat7.xyz + vec3(-2.5, -0.5, 1.5);
                u_xlat8.xyz = u_xlat10.zyw / u_xlat6.xyz;
                u_xlat8.xyz = u_xlat8.xyz + vec3(-2.5, -0.5, 1.5);
                u_xlat7.xyz = u_xlat7.yxz * _MainLightShadowmapSize.xxx;
                u_xlat8.xyz = u_xlat8.xyz * _MainLightShadowmapSize.yyy;
                u_xlat7.w = u_xlat8.x;
                u_xlat9 = u_xlat5.xyxy * _MainLightShadowmapSize.xyxy + u_xlat7.ywxw;
                u_xlat51.xy = u_xlat5.xy * _MainLightShadowmapSize.xy + u_xlat7.zw;
                u_xlat8.w = u_xlat7.y;
                u_xlat7.yw = u_xlat8.yz;
                u_xlat10 = u_xlat5.xyxy * _MainLightShadowmapSize.xyxy + u_xlat7.xyzy;
                u_xlat8 = u_xlat5.xyxy * _MainLightShadowmapSize.xyxy + u_xlat8.wywz;
                u_xlat7 = u_xlat5.xyxy * _MainLightShadowmapSize.xyxy + u_xlat7.xwzw;
                u_xlat12 = u_xlat6.xxxy * u_xlat11.zwyz;
                u_xlat13 = u_xlat6.yyzz * u_xlat11;
                u_xlat72 = u_xlat6.z * u_xlat11.y;
                vec3 txVec4 = vec3(u_xlat9.xy,u_xlat3.z);
                u_xlat73 = textureLod(sampler2DShadow(_MainLightShadowmapTexture, sampler_LinearClampCompare), txVec4, 0.0);
                vec3 txVec5 = vec3(u_xlat9.zw,u_xlat3.z);
                u_xlat5.x = textureLod(sampler2DShadow(_MainLightShadowmapTexture, sampler_LinearClampCompare), txVec5, 0.0);
                u_xlat5.x = u_xlat5.x * u_xlat12.y;
                u_xlat73 = u_xlat12.x * u_xlat73 + u_xlat5.x;
                vec3 txVec6 = vec3(u_xlat51.xy,u_xlat3.z);
                u_xlat5.x = textureLod(sampler2DShadow(_MainLightShadowmapTexture, sampler_LinearClampCompare), txVec6, 0.0);
                u_xlat73 = u_xlat12.z * u_xlat5.x + u_xlat73;
                vec3 txVec7 = vec3(u_xlat8.xy,u_xlat3.z);
                u_xlat5.x = textureLod(sampler2DShadow(_MainLightShadowmapTexture, sampler_LinearClampCompare), txVec7, 0.0);
                u_xlat73 = u_xlat12.w * u_xlat5.x + u_xlat73;
                vec3 txVec8 = vec3(u_xlat10.xy,u_xlat3.z);
                u_xlat5.x = textureLod(sampler2DShadow(_MainLightShadowmapTexture, sampler_LinearClampCompare), txVec8, 0.0);
                u_xlat73 = u_xlat13.x * u_xlat5.x + u_xlat73;
                vec3 txVec9 = vec3(u_xlat10.zw,u_xlat3.z);
                u_xlat5.x = textureLod(sampler2DShadow(_MainLightShadowmapTexture, sampler_LinearClampCompare), txVec9, 0.0);
                u_xlat73 = u_xlat13.y * u_xlat5.x + u_xlat73;
                vec3 txVec10 = vec3(u_xlat8.zw,u_xlat3.z);
                u_xlat5.x = textureLod(sampler2DShadow(_MainLightShadowmapTexture, sampler_LinearClampCompare), txVec10, 0.0);
                u_xlat73 = u_xlat13.z * u_xlat5.x + u_xlat73;
                vec3 txVec11 = vec3(u_xlat7.xy,u_xlat3.z);
                u_xlat5.x = textureLod(sampler2DShadow(_MainLightShadowmapTexture, sampler_LinearClampCompare), txVec11, 0.0);
                u_xlat73 = u_xlat13.w * u_xlat5.x + u_xlat73;
                vec3 txVec12 = vec3(u_xlat7.zw,u_xlat3.z);
                u_xlat5.x = textureLod(sampler2DShadow(_MainLightShadowmapTexture, sampler_LinearClampCompare), txVec12, 0.0);
                u_xlat70 = u_xlat72 * u_xlat5.x + u_xlat73;
            } else {
                u_xlat5.xy = u_xlat3.xy * _MainLightShadowmapSize.zw + vec2(0.5, 0.5);
                u_xlat5.xy = floor(u_xlat5.xy);
                u_xlat51.xy = u_xlat3.xy * _MainLightShadowmapSize.zw + (-u_xlat5.xy);
                u_xlat6 = u_xlat51.xxyy + vec4(0.5, 1.0, 0.5, 1.0);
                u_xlat7 = u_xlat6.xxzz * u_xlat6.xxzz;
                u_xlat8.yw = u_xlat7.yw * vec2(0.0408160016, 0.0408160016);
                u_xlat6.xz = u_xlat7.xz * vec2(0.5, 0.5) + (-u_xlat51.xy);
                u_xlat7.xy = (-u_xlat51.xy) + vec2(1.0, 1.0);
                u_xlat53.xy = min(u_xlat51.xy, vec2(0.0, 0.0));
                u_xlat7.xy = (-u_xlat53.xy) * u_xlat53.xy + u_xlat7.xy;
                u_xlat53.xy = max(u_xlat51.xy, vec2(0.0, 0.0));
                u_xlat29.xz = (-u_xlat53.xy) * u_xlat53.xy + u_xlat6.yw;
                u_xlat7.xy = u_xlat7.xy + vec2(2.0, 2.0);
                u_xlat6.yw = u_xlat29.xz + vec2(2.0, 2.0);
                u_xlat9.z = u_xlat6.y * 0.0816320032;
                u_xlat10.xyz = u_xlat6.zxw * vec3(0.0816320032, 0.0816320032, 0.0816320032);
                u_xlat6.xy = u_xlat7.xy * vec2(0.0816320032, 0.0816320032);
                u_xlat9.x = u_xlat10.y;
                u_xlat9.yw = u_xlat51.xx * vec2(-0.0816320032, 0.0816320032) + vec2(0.163264006, 0.0816320032);
                u_xlat7.xz = u_xlat51.xx * vec2(-0.0816320032, 0.0816320032) + vec2(0.0816320032, 0.163264006);
                u_xlat7.y = u_xlat6.x;
                u_xlat7.w = u_xlat8.y;
                u_xlat9 = u_xlat7 + u_xlat9;
                u_xlat10.yw = u_xlat51.yy * vec2(-0.0816320032, 0.0816320032) + vec2(0.163264006, 0.0816320032);
                u_xlat8.xz = u_xlat51.yy * vec2(-0.0816320032, 0.0816320032) + vec2(0.0816320032, 0.163264006);
                u_xlat8.y = u_xlat6.y;
                u_xlat6 = u_xlat8 + u_xlat10;
                u_xlat7 = u_xlat7 / u_xlat9;
                u_xlat7 = u_xlat7 + vec4(-3.5, -1.5, 0.5, 2.5);
                u_xlat8 = u_xlat8 / u_xlat6;
                u_xlat8 = u_xlat8 + vec4(-3.5, -1.5, 0.5, 2.5);
                u_xlat7 = u_xlat7.wxyz * _MainLightShadowmapSize.xxxx;
                u_xlat8 = u_xlat8.xwyz * _MainLightShadowmapSize.yyyy;
                u_xlat10.xzw = u_xlat7.yzw;
                u_xlat10.y = u_xlat8.x;
                u_xlat11 = u_xlat5.xyxy * _MainLightShadowmapSize.xyxy + u_xlat10.xyzy;
                u_xlat51.xy = u_xlat5.xy * _MainLightShadowmapSize.xy + u_xlat10.wy;
                u_xlat7.y = u_xlat10.y;
                u_xlat10.y = u_xlat8.z;
                u_xlat12 = u_xlat5.xyxy * _MainLightShadowmapSize.xyxy + u_xlat10.xyzy;
                u_xlat13.xy = u_xlat5.xy * _MainLightShadowmapSize.xy + u_xlat10.wy;
                u_xlat7.z = u_xlat10.y;
                u_xlat14 = u_xlat5.xyxy * _MainLightShadowmapSize.xyxy + u_xlat7.xyxz;
                u_xlat10.y = u_xlat8.w;
                u_xlat15 = u_xlat5.xyxy * _MainLightShadowmapSize.xyxy + u_xlat10.xyzy;
                u_xlat30.xy = u_xlat5.xy * _MainLightShadowmapSize.xy + u_xlat10.wy;
                u_xlat7.w = u_xlat10.y;
                u_xlat59.xy = u_xlat5.xy * _MainLightShadowmapSize.xy + u_xlat7.xw;
                u_xlat8.xzw = u_xlat10.xzw;
                u_xlat10 = u_xlat5.xyxy * _MainLightShadowmapSize.xyxy + u_xlat8.xyzy;
                u_xlat54.xy = u_xlat5.xy * _MainLightShadowmapSize.xy + u_xlat8.wy;
                u_xlat8.x = u_xlat7.x;
                u_xlat5.xy = u_xlat5.xy * _MainLightShadowmapSize.xy + u_xlat8.xy;
                u_xlat16 = u_xlat6.xxxx * u_xlat9;
                u_xlat17 = u_xlat6.yyyy * u_xlat9;
                u_xlat18 = u_xlat6.zzzz * u_xlat9;
                u_xlat6 = u_xlat6.wwww * u_xlat9;
                vec3 txVec13 = vec3(u_xlat11.xy,u_xlat3.z);
                u_xlat72 = textureLod(sampler2DShadow(_MainLightShadowmapTexture, sampler_LinearClampCompare), txVec13, 0.0);
                vec3 txVec14 = vec3(u_xlat11.zw,u_xlat3.z);
                u_xlat73 = textureLod(sampler2DShadow(_MainLightShadowmapTexture, sampler_LinearClampCompare), txVec14, 0.0);
                u_xlat73 = u_xlat73 * u_xlat16.y;
                u_xlat72 = u_xlat16.x * u_xlat72 + u_xlat73;
                vec3 txVec15 = vec3(u_xlat51.xy,u_xlat3.z);
                u_xlat73 = textureLod(sampler2DShadow(_MainLightShadowmapTexture, sampler_LinearClampCompare), txVec15, 0.0);
                u_xlat72 = u_xlat16.z * u_xlat73 + u_xlat72;
                vec3 txVec16 = vec3(u_xlat14.xy,u_xlat3.z);
                u_xlat73 = textureLod(sampler2DShadow(_MainLightShadowmapTexture, sampler_LinearClampCompare), txVec16, 0.0);
                u_xlat72 = u_xlat16.w * u_xlat73 + u_xlat72;
                vec3 txVec17 = vec3(u_xlat12.xy,u_xlat3.z);
                u_xlat73 = textureLod(sampler2DShadow(_MainLightShadowmapTexture, sampler_LinearClampCompare), txVec17, 0.0);
                u_xlat72 = u_xlat17.x * u_xlat73 + u_xlat72;
                vec3 txVec18 = vec3(u_xlat12.zw,u_xlat3.z);
                u_xlat73 = textureLod(sampler2DShadow(_MainLightShadowmapTexture, sampler_LinearClampCompare), txVec18, 0.0);
                u_xlat72 = u_xlat17.y * u_xlat73 + u_xlat72;
                vec3 txVec19 = vec3(u_xlat13.xy,u_xlat3.z);
                u_xlat73 = textureLod(sampler2DShadow(_MainLightShadowmapTexture, sampler_LinearClampCompare), txVec19, 0.0);
                u_xlat72 = u_xlat17.z * u_xlat73 + u_xlat72;
                vec3 txVec20 = vec3(u_xlat14.zw,u_xlat3.z);
                u_xlat73 = textureLod(sampler2DShadow(_MainLightShadowmapTexture, sampler_LinearClampCompare), txVec20, 0.0);
                u_xlat72 = u_xlat17.w * u_xlat73 + u_xlat72;
                vec3 txVec21 = vec3(u_xlat15.xy,u_xlat3.z);
                u_xlat73 = textureLod(sampler2DShadow(_MainLightShadowmapTexture, sampler_LinearClampCompare), txVec21, 0.0);
                u_xlat72 = u_xlat18.x * u_xlat73 + u_xlat72;
                vec3 txVec22 = vec3(u_xlat15.zw,u_xlat3.z);
                u_xlat73 = textureLod(sampler2DShadow(_MainLightShadowmapTexture, sampler_LinearClampCompare), txVec22, 0.0);
                u_xlat72 = u_xlat18.y * u_xlat73 + u_xlat72;
                vec3 txVec23 = vec3(u_xlat30.xy,u_xlat3.z);
                u_xlat73 = textureLod(sampler2DShadow(_MainLightShadowmapTexture, sampler_LinearClampCompare), txVec23, 0.0);
                u_xlat72 = u_xlat18.z * u_xlat73 + u_xlat72;
                vec3 txVec24 = vec3(u_xlat59.xy,u_xlat3.z);
                u_xlat73 = textureLod(sampler2DShadow(_MainLightShadowmapTexture, sampler_LinearClampCompare), txVec24, 0.0);
                u_xlat72 = u_xlat18.w * u_xlat73 + u_xlat72;
                vec3 txVec25 = vec3(u_xlat10.xy,u_xlat3.z);
                u_xlat73 = textureLod(sampler2DShadow(_MainLightShadowmapTexture, sampler_LinearClampCompare), txVec25, 0.0);
                u_xlat72 = u_xlat6.x * u_xlat73 + u_xlat72;
                vec3 txVec26 = vec3(u_xlat10.zw,u_xlat3.z);
                u_xlat73 = textureLod(sampler2DShadow(_MainLightShadowmapTexture, sampler_LinearClampCompare), txVec26, 0.0);
                u_xlat72 = u_xlat6.y * u_xlat73 + u_xlat72;
                vec3 txVec27 = vec3(u_xlat54.xy,u_xlat3.z);
                u_xlat73 = textureLod(sampler2DShadow(_MainLightShadowmapTexture, sampler_LinearClampCompare), txVec27, 0.0);
                u_xlat72 = u_xlat6.z * u_xlat73 + u_xlat72;
                vec3 txVec28 = vec3(u_xlat5.xy,u_xlat3.z);
                u_xlat73 = textureLod(sampler2DShadow(_MainLightShadowmapTexture, sampler_LinearClampCompare), txVec28, 0.0);
                u_xlat70 = u_xlat6.w * u_xlat73 + u_xlat72;
            }
        }
    } else {
        vec3 txVec29 = vec3(u_xlat3.xy,u_xlat3.z);
        u_xlat70 = textureLod(sampler2DShadow(_MainLightShadowmapTexture, sampler_LinearClampCompare), txVec29, 0.0);
    }
    u_xlat3.x = (-_MainLightShadowParams.x) + 1.0;
    u_xlat70 = u_xlat70 * _MainLightShadowParams.x + u_xlat3.x;
    u_xlatb3.x = 0.0>=u_xlat3.z;
    u_xlatb26.x = u_xlat3.z>=1.0;
    u_xlatb3.x = u_xlatb26.x || u_xlatb3.x;
    u_xlat70 = (u_xlatb3.x) ? 1.0 : u_xlat70;
    u_xlat3.xyz = vs_TEXCOORD1.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat3.x = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat26.x = u_xlat3.x * _MainLightShadowParams.z + _MainLightShadowParams.w;
    u_xlat26.x = clamp(u_xlat26.x, 0.0, 1.0);
    u_xlat49 = (-u_xlat70) + 1.0;
    u_xlat70 = u_xlat26.x * u_xlat49 + u_xlat70;
    u_xlatb26.x = _MainLightCookieTextureFormat!=-1.0;
    if(u_xlatb26.x){
        u_xlat26.xy = vs_TEXCOORD1.yy * _MainLightWorldToLight[1].xy;
        u_xlat26.xy = _MainLightWorldToLight[0].xy * vs_TEXCOORD1.xx + u_xlat26.xy;
        u_xlat26.xy = _MainLightWorldToLight[2].xy * vs_TEXCOORD1.zz + u_xlat26.xy;
        u_xlat26.xy = u_xlat26.xy + _MainLightWorldToLight[3].xy;
        u_xlat26.xy = u_xlat26.xy * vec2(0.5, 0.5) + vec2(0.5, 0.5);
        u_xlat5 = texture(sampler2D(_MainLightCookieTexture, sampler_MainLightCookieTexture), u_xlat26.xy, _GlobalMipBias.x);
        u_xlatb26.xy = equal(vec4(vec4(_MainLightCookieTextureFormat, _MainLightCookieTextureFormat, _MainLightCookieTextureFormat, _MainLightCookieTextureFormat)), vec4(0.0, 1.0, 0.0, 0.0)).xy;
        u_xlat49 = (u_xlatb26.y) ? u_xlat5.w : u_xlat5.x;
        u_xlat26.xyz = (u_xlatb26.x) ? u_xlat5.xyz : vec3(u_xlat49);
    } else {
        u_xlat26.x = float(1.0);
        u_xlat26.y = float(1.0);
        u_xlat26.z = float(1.0);
    }
    u_xlat26.xyz = u_xlat26.xyz * _MainLightColor.xyz;
    u_xlat70 = u_xlat70 * unity_LightData.z;
    u_xlat26.xyz = vec3(u_xlat70) * u_xlat26.xyz;
    u_xlat70 = dot(u_xlat1.xyz, _MainLightPosition.xyz);
    u_xlat70 = clamp(u_xlat70, 0.0, 1.0);
    u_xlat5.xyz = vec3(u_xlat70) * u_xlat26.xyz;
    u_xlat70 = u_xlat0.x * 10.0 + 1.0;
    u_xlat70 = exp2(u_xlat70);
    u_xlat6.xyz = u_xlat2.xyz * vec3(u_xlat71) + _MainLightPosition.xyz;
    u_xlat4.w = dot(u_xlat6.xyz, u_xlat6.xyz);
    u_xlat4 = max(u_xlat4, vec4(0.0, 0.0, 0.0, 1.17549435e-38));
    u_xlat73 = inversesqrt(u_xlat4.w);
    u_xlat6.xyz = vec3(u_xlat73) * u_xlat6.xyz;
    u_xlat73 = dot(u_xlat1.xyz, u_xlat6.xyz);
    u_xlat73 = clamp(u_xlat73, 0.0, 1.0);
    u_xlat73 = log2(u_xlat73);
    u_xlat73 = u_xlat70 * u_xlat73;
    u_xlat73 = exp2(u_xlat73);
    u_xlat6.xyz = vec3(u_xlat73) * _SpecColor.xyz;
    u_xlat26.xyz = u_xlat26.xyz * u_xlat6.xyz;
    u_xlat26.xyz = u_xlat5.xyz * u_xlat0.yzw + u_xlat26.xyz;
    u_xlat73 = min(_AdditionalLightsCount.x, unity_LightData.y);
    u_xlatu73 =  uint(int(u_xlat73));
    u_xlat3.x = u_xlat3.x * _AdditionalShadowFadeParams.x + _AdditionalShadowFadeParams.y;
    u_xlat3.x = clamp(u_xlat3.x, 0.0, 1.0);
    u_xlatb5.xy = equal(vec4(vec4(_AdditionalLightsCookieAtlasTextureFormat, _AdditionalLightsCookieAtlasTextureFormat, _AdditionalLightsCookieAtlasTextureFormat, _AdditionalLightsCookieAtlasTextureFormat)), vec4(0.0, 1.0, 0.0, 0.0)).xy;
    u_xlat6.x = float(0.0);
    u_xlat6.y = float(0.0);
    u_xlat6.z = float(0.0);
    for(uint u_xlatu_loop_1 = 0u ; u_xlatu_loop_1<u_xlatu73 ; u_xlatu_loop_1++)
    {
        u_xlatu74 = u_xlatu_loop_1 >> (2u & uint(0x1F));
        u_xlati75 = int(u_xlatu_loop_1 & 3u);
        u_xlat74 = dot(unity_LightIndices[int(u_xlatu74)], uintBitsToFloat(ImmCB_0[u_xlati75]));
        u_xlati74 = int(u_xlat74);
        u_xlat7.xyz = (-vs_TEXCOORD1.xyz) * _AdditionalLightsPosition[u_xlati74].www + _AdditionalLightsPosition[u_xlati74].xyz;
        u_xlat75 = dot(u_xlat7.xyz, u_xlat7.xyz);
        u_xlat75 = max(u_xlat75, 6.10351562e-05);
        u_xlat76 = inversesqrt(u_xlat75);
        u_xlat7.xyz = vec3(u_xlat76) * u_xlat7.xyz;
        u_xlat76 = float(1.0) / float(u_xlat75);
        u_xlat75 = u_xlat75 * _AdditionalLightsAttenuation[u_xlati74].x;
        u_xlat75 = (-u_xlat75) * u_xlat75 + 1.0;
        u_xlat75 = max(u_xlat75, 0.0);
        u_xlat75 = u_xlat75 * u_xlat75;
        u_xlat75 = u_xlat75 * u_xlat76;
        u_xlat76 = dot(_AdditionalLightsSpotDir[u_xlati74].xyz, u_xlat7.xyz);
        u_xlat76 = u_xlat76 * _AdditionalLightsAttenuation[u_xlati74].z + _AdditionalLightsAttenuation[u_xlati74].w;
        u_xlat76 = clamp(u_xlat76, 0.0, 1.0);
        u_xlat76 = u_xlat76 * u_xlat76;
        u_xlat75 = u_xlat75 * u_xlat76;
        u_xlati76 = int(_AdditionalShadowParams[u_xlati74].w);
        u_xlatb8.x = u_xlati76>=0;
        if(u_xlatb8.x){
            u_xlatb8.x = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_AdditionalShadowParams[u_xlati74].z);
            if(u_xlatb8.x){
                u_xlatb8.xyz = greaterThanEqual(abs(u_xlat7.zzyz), abs(u_xlat7.xyxx)).xyz;
                u_xlatb8.x = u_xlatb8.y && u_xlatb8.x;
                u_xlatb9.xyz = lessThan((-u_xlat7.zyxz), vec4(0.0, 0.0, 0.0, 0.0)).xyz;
                u_xlat31.x = (u_xlatb9.x) ? float(5.0) : float(4.0);
                u_xlat31.z = (u_xlatb9.y) ? float(3.0) : float(2.0);
                u_xlat9.x = u_xlatb9.z ? 1.0 : float(0.0);
                u_xlat54.x = (u_xlatb8.z) ? u_xlat31.z : u_xlat9.x;
                u_xlat8.x = (u_xlatb8.x) ? u_xlat31.x : u_xlat54.x;
                u_xlat31.x = trunc(_AdditionalShadowParams[u_xlati74].w);
                u_xlat8.x = u_xlat8.x + u_xlat31.x;
                u_xlati76 = int(u_xlat8.x);
            }
            u_xlati76 = u_xlati76 << (2 & int(0x1F));
            u_xlat8 = vs_TEXCOORD1.yyyy * _AdditionalLightsWorldToShadow[(u_xlati76 + 1) / 4][(u_xlati76 + 1) % 4];
            u_xlat8 = _AdditionalLightsWorldToShadow[u_xlati76 / 4][u_xlati76 % 4] * vs_TEXCOORD1.xxxx + u_xlat8;
            u_xlat8 = _AdditionalLightsWorldToShadow[(u_xlati76 + 2) / 4][(u_xlati76 + 2) % 4] * vs_TEXCOORD1.zzzz + u_xlat8;
            u_xlat8 = u_xlat8 + _AdditionalLightsWorldToShadow[(u_xlati76 + 3) / 4][(u_xlati76 + 3) % 4];
            u_xlat8.xyz = u_xlat8.xyz / u_xlat8.www;
            u_xlatb76 = 0.0<_AdditionalShadowParams[u_xlati74].y;
            if(u_xlatb76){
                u_xlatb76 = 1.0==_AdditionalShadowParams[u_xlati74].y;
                if(u_xlatb76){
                    u_xlat9 = u_xlat8.xyxy + _AdditionalShadowOffset0;
                    vec3 txVec30 = vec3(u_xlat9.xy,u_xlat8.z);
                    u_xlat10.x = textureLod(sampler2DShadow(_AdditionalLightsShadowmapTexture, sampler_LinearClampCompare), txVec30, 0.0);
                    vec3 txVec31 = vec3(u_xlat9.zw,u_xlat8.z);
                    u_xlat10.y = textureLod(sampler2DShadow(_AdditionalLightsShadowmapTexture, sampler_LinearClampCompare), txVec31, 0.0);
                    u_xlat9 = u_xlat8.xyxy + _AdditionalShadowOffset1;
                    vec3 txVec32 = vec3(u_xlat9.xy,u_xlat8.z);
                    u_xlat10.z = textureLod(sampler2DShadow(_AdditionalLightsShadowmapTexture, sampler_LinearClampCompare), txVec32, 0.0);
                    vec3 txVec33 = vec3(u_xlat9.zw,u_xlat8.z);
                    u_xlat10.w = textureLod(sampler2DShadow(_AdditionalLightsShadowmapTexture, sampler_LinearClampCompare), txVec33, 0.0);
                    u_xlat76 = dot(u_xlat10, vec4(0.25, 0.25, 0.25, 0.25));
                } else {
                    u_xlatb77 = 2.0==_AdditionalShadowParams[u_xlati74].y;
                    if(u_xlatb77){
                        u_xlat9.xy = u_xlat8.xy * _AdditionalShadowmapSize.zw + vec2(0.5, 0.5);
                        u_xlat9.xy = floor(u_xlat9.xy);
                        u_xlat55.xy = u_xlat8.xy * _AdditionalShadowmapSize.zw + (-u_xlat9.xy);
                        u_xlat10 = u_xlat55.xxyy + vec4(0.5, 1.0, 0.5, 1.0);
                        u_xlat11 = u_xlat10.xxzz * u_xlat10.xxzz;
                        u_xlat10.xz = u_xlat11.yw * vec2(0.0799999982, 0.0799999982);
                        u_xlat11.xy = u_xlat11.xz * vec2(0.5, 0.5) + (-u_xlat55.xy);
                        u_xlat57.xy = (-u_xlat55.xy) + vec2(1.0, 1.0);
                        u_xlat12.xy = min(u_xlat55.xy, vec2(0.0, 0.0));
                        u_xlat12.xy = (-u_xlat12.xy) * u_xlat12.xy + u_xlat57.xy;
                        u_xlat55.xy = max(u_xlat55.xy, vec2(0.0, 0.0));
                        u_xlat55.xy = (-u_xlat55.xy) * u_xlat55.xy + u_xlat10.yw;
                        u_xlat12.xy = u_xlat12.xy + vec2(1.0, 1.0);
                        u_xlat55.xy = u_xlat55.xy + vec2(1.0, 1.0);
                        u_xlat13.xy = u_xlat11.xy * vec2(0.159999996, 0.159999996);
                        u_xlat11.xy = u_xlat57.xy * vec2(0.159999996, 0.159999996);
                        u_xlat12.xy = u_xlat12.xy * vec2(0.159999996, 0.159999996);
                        u_xlat14.xy = u_xlat55.xy * vec2(0.159999996, 0.159999996);
                        u_xlat55.xy = u_xlat10.yw * vec2(0.159999996, 0.159999996);
                        u_xlat13.z = u_xlat12.x;
                        u_xlat13.w = u_xlat55.x;
                        u_xlat11.z = u_xlat14.x;
                        u_xlat11.w = u_xlat10.x;
                        u_xlat15 = u_xlat11.zwxz + u_xlat13.zwxz;
                        u_xlat12.z = u_xlat13.y;
                        u_xlat12.w = u_xlat55.y;
                        u_xlat14.z = u_xlat11.y;
                        u_xlat14.w = u_xlat10.z;
                        u_xlat10.xyz = u_xlat12.zyw + u_xlat14.zyw;
                        u_xlat11.xyz = u_xlat11.xzw / u_xlat15.zwy;
                        u_xlat11.xyz = u_xlat11.xyz + vec3(-2.5, -0.5, 1.5);
                        u_xlat12.xyz = u_xlat14.zyw / u_xlat10.xyz;
                        u_xlat12.xyz = u_xlat12.xyz + vec3(-2.5, -0.5, 1.5);
                        u_xlat11.xyz = u_xlat11.yxz * _AdditionalShadowmapSize.xxx;
                        u_xlat12.xyz = u_xlat12.xyz * _AdditionalShadowmapSize.yyy;
                        u_xlat11.w = u_xlat12.x;
                        u_xlat13 = u_xlat9.xyxy * _AdditionalShadowmapSize.xyxy + u_xlat11.ywxw;
                        u_xlat55.xy = u_xlat9.xy * _AdditionalShadowmapSize.xy + u_xlat11.zw;
                        u_xlat12.w = u_xlat11.y;
                        u_xlat11.yw = u_xlat12.yz;
                        u_xlat14 = u_xlat9.xyxy * _AdditionalShadowmapSize.xyxy + u_xlat11.xyzy;
                        u_xlat12 = u_xlat9.xyxy * _AdditionalShadowmapSize.xyxy + u_xlat12.wywz;
                        u_xlat11 = u_xlat9.xyxy * _AdditionalShadowmapSize.xyxy + u_xlat11.xwzw;
                        u_xlat16 = u_xlat10.xxxy * u_xlat15.zwyz;
                        u_xlat17 = u_xlat10.yyzz * u_xlat15;
                        u_xlat77 = u_xlat10.z * u_xlat15.y;
                        vec3 txVec34 = vec3(u_xlat13.xy,u_xlat8.z);
                        u_xlat9.x = textureLod(sampler2DShadow(_AdditionalLightsShadowmapTexture, sampler_LinearClampCompare), txVec34, 0.0);
                        vec3 txVec35 = vec3(u_xlat13.zw,u_xlat8.z);
                        u_xlat32 = textureLod(sampler2DShadow(_AdditionalLightsShadowmapTexture, sampler_LinearClampCompare), txVec35, 0.0);
                        u_xlat32 = u_xlat32 * u_xlat16.y;
                        u_xlat9.x = u_xlat16.x * u_xlat9.x + u_xlat32;
                        vec3 txVec36 = vec3(u_xlat55.xy,u_xlat8.z);
                        u_xlat32 = textureLod(sampler2DShadow(_AdditionalLightsShadowmapTexture, sampler_LinearClampCompare), txVec36, 0.0);
                        u_xlat9.x = u_xlat16.z * u_xlat32 + u_xlat9.x;
                        vec3 txVec37 = vec3(u_xlat12.xy,u_xlat8.z);
                        u_xlat32 = textureLod(sampler2DShadow(_AdditionalLightsShadowmapTexture, sampler_LinearClampCompare), txVec37, 0.0);
                        u_xlat9.x = u_xlat16.w * u_xlat32 + u_xlat9.x;
                        vec3 txVec38 = vec3(u_xlat14.xy,u_xlat8.z);
                        u_xlat32 = textureLod(sampler2DShadow(_AdditionalLightsShadowmapTexture, sampler_LinearClampCompare), txVec38, 0.0);
                        u_xlat9.x = u_xlat17.x * u_xlat32 + u_xlat9.x;
                        vec3 txVec39 = vec3(u_xlat14.zw,u_xlat8.z);
                        u_xlat32 = textureLod(sampler2DShadow(_AdditionalLightsShadowmapTexture, sampler_LinearClampCompare), txVec39, 0.0);
                        u_xlat9.x = u_xlat17.y * u_xlat32 + u_xlat9.x;
                        vec3 txVec40 = vec3(u_xlat12.zw,u_xlat8.z);
                        u_xlat32 = textureLod(sampler2DShadow(_AdditionalLightsShadowmapTexture, sampler_LinearClampCompare), txVec40, 0.0);
                        u_xlat9.x = u_xlat17.z * u_xlat32 + u_xlat9.x;
                        vec3 txVec41 = vec3(u_xlat11.xy,u_xlat8.z);
                        u_xlat32 = textureLod(sampler2DShadow(_AdditionalLightsShadowmapTexture, sampler_LinearClampCompare), txVec41, 0.0);
                        u_xlat9.x = u_xlat17.w * u_xlat32 + u_xlat9.x;
                        vec3 txVec42 = vec3(u_xlat11.zw,u_xlat8.z);
                        u_xlat32 = textureLod(sampler2DShadow(_AdditionalLightsShadowmapTexture, sampler_LinearClampCompare), txVec42, 0.0);
                        u_xlat76 = u_xlat77 * u_xlat32 + u_xlat9.x;
                    } else {
                        u_xlat9.xy = u_xlat8.xy * _AdditionalShadowmapSize.zw + vec2(0.5, 0.5);
                        u_xlat9.xy = floor(u_xlat9.xy);
                        u_xlat55.xy = u_xlat8.xy * _AdditionalShadowmapSize.zw + (-u_xlat9.xy);
                        u_xlat10 = u_xlat55.xxyy + vec4(0.5, 1.0, 0.5, 1.0);
                        u_xlat11 = u_xlat10.xxzz * u_xlat10.xxzz;
                        u_xlat12.yw = u_xlat11.yw * vec2(0.0408160016, 0.0408160016);
                        u_xlat10.xz = u_xlat11.xz * vec2(0.5, 0.5) + (-u_xlat55.xy);
                        u_xlat11.xy = (-u_xlat55.xy) + vec2(1.0, 1.0);
                        u_xlat57.xy = min(u_xlat55.xy, vec2(0.0, 0.0));
                        u_xlat11.xy = (-u_xlat57.xy) * u_xlat57.xy + u_xlat11.xy;
                        u_xlat57.xy = max(u_xlat55.xy, vec2(0.0, 0.0));
                        u_xlat33.xz = (-u_xlat57.xy) * u_xlat57.xy + u_xlat10.yw;
                        u_xlat11.xy = u_xlat11.xy + vec2(2.0, 2.0);
                        u_xlat10.yw = u_xlat33.xz + vec2(2.0, 2.0);
                        u_xlat13.z = u_xlat10.y * 0.0816320032;
                        u_xlat14.xyz = u_xlat10.zxw * vec3(0.0816320032, 0.0816320032, 0.0816320032);
                        u_xlat10.xy = u_xlat11.xy * vec2(0.0816320032, 0.0816320032);
                        u_xlat13.x = u_xlat14.y;
                        u_xlat13.yw = u_xlat55.xx * vec2(-0.0816320032, 0.0816320032) + vec2(0.163264006, 0.0816320032);
                        u_xlat11.xz = u_xlat55.xx * vec2(-0.0816320032, 0.0816320032) + vec2(0.0816320032, 0.163264006);
                        u_xlat11.y = u_xlat10.x;
                        u_xlat11.w = u_xlat12.y;
                        u_xlat13 = u_xlat11 + u_xlat13;
                        u_xlat14.yw = u_xlat55.yy * vec2(-0.0816320032, 0.0816320032) + vec2(0.163264006, 0.0816320032);
                        u_xlat12.xz = u_xlat55.yy * vec2(-0.0816320032, 0.0816320032) + vec2(0.0816320032, 0.163264006);
                        u_xlat12.y = u_xlat10.y;
                        u_xlat10 = u_xlat12 + u_xlat14;
                        u_xlat11 = u_xlat11 / u_xlat13;
                        u_xlat11 = u_xlat11 + vec4(-3.5, -1.5, 0.5, 2.5);
                        u_xlat12 = u_xlat12 / u_xlat10;
                        u_xlat12 = u_xlat12 + vec4(-3.5, -1.5, 0.5, 2.5);
                        u_xlat11 = u_xlat11.wxyz * _AdditionalShadowmapSize.xxxx;
                        u_xlat12 = u_xlat12.xwyz * _AdditionalShadowmapSize.yyyy;
                        u_xlat14.xzw = u_xlat11.yzw;
                        u_xlat14.y = u_xlat12.x;
                        u_xlat15 = u_xlat9.xyxy * _AdditionalShadowmapSize.xyxy + u_xlat14.xyzy;
                        u_xlat55.xy = u_xlat9.xy * _AdditionalShadowmapSize.xy + u_xlat14.wy;
                        u_xlat11.y = u_xlat14.y;
                        u_xlat14.y = u_xlat12.z;
                        u_xlat16 = u_xlat9.xyxy * _AdditionalShadowmapSize.xyxy + u_xlat14.xyzy;
                        u_xlat17.xy = u_xlat9.xy * _AdditionalShadowmapSize.xy + u_xlat14.wy;
                        u_xlat11.z = u_xlat14.y;
                        u_xlat18 = u_xlat9.xyxy * _AdditionalShadowmapSize.xyxy + u_xlat11.xyxz;
                        u_xlat14.y = u_xlat12.w;
                        u_xlat19 = u_xlat9.xyxy * _AdditionalShadowmapSize.xyxy + u_xlat14.xyzy;
                        u_xlat34.xy = u_xlat9.xy * _AdditionalShadowmapSize.xy + u_xlat14.wy;
                        u_xlat11.w = u_xlat14.y;
                        u_xlat63.xy = u_xlat9.xy * _AdditionalShadowmapSize.xy + u_xlat11.xw;
                        u_xlat12.xzw = u_xlat14.xzw;
                        u_xlat14 = u_xlat9.xyxy * _AdditionalShadowmapSize.xyxy + u_xlat12.xyzy;
                        u_xlat58.xy = u_xlat9.xy * _AdditionalShadowmapSize.xy + u_xlat12.wy;
                        u_xlat12.x = u_xlat11.x;
                        u_xlat9.xy = u_xlat9.xy * _AdditionalShadowmapSize.xy + u_xlat12.xy;
                        u_xlat20 = u_xlat10.xxxx * u_xlat13;
                        u_xlat21 = u_xlat10.yyyy * u_xlat13;
                        u_xlat22 = u_xlat10.zzzz * u_xlat13;
                        u_xlat10 = u_xlat10.wwww * u_xlat13;
                        vec3 txVec43 = vec3(u_xlat15.xy,u_xlat8.z);
                        u_xlat77 = textureLod(sampler2DShadow(_AdditionalLightsShadowmapTexture, sampler_LinearClampCompare), txVec43, 0.0);
                        vec3 txVec44 = vec3(u_xlat15.zw,u_xlat8.z);
                        u_xlat11.x = textureLod(sampler2DShadow(_AdditionalLightsShadowmapTexture, sampler_LinearClampCompare), txVec44, 0.0);
                        u_xlat11.x = u_xlat11.x * u_xlat20.y;
                        u_xlat77 = u_xlat20.x * u_xlat77 + u_xlat11.x;
                        vec3 txVec45 = vec3(u_xlat55.xy,u_xlat8.z);
                        u_xlat55.x = textureLod(sampler2DShadow(_AdditionalLightsShadowmapTexture, sampler_LinearClampCompare), txVec45, 0.0);
                        u_xlat77 = u_xlat20.z * u_xlat55.x + u_xlat77;
                        vec3 txVec46 = vec3(u_xlat18.xy,u_xlat8.z);
                        u_xlat55.x = textureLod(sampler2DShadow(_AdditionalLightsShadowmapTexture, sampler_LinearClampCompare), txVec46, 0.0);
                        u_xlat77 = u_xlat20.w * u_xlat55.x + u_xlat77;
                        vec3 txVec47 = vec3(u_xlat16.xy,u_xlat8.z);
                        u_xlat55.x = textureLod(sampler2DShadow(_AdditionalLightsShadowmapTexture, sampler_LinearClampCompare), txVec47, 0.0);
                        u_xlat77 = u_xlat21.x * u_xlat55.x + u_xlat77;
                        vec3 txVec48 = vec3(u_xlat16.zw,u_xlat8.z);
                        u_xlat55.x = textureLod(sampler2DShadow(_AdditionalLightsShadowmapTexture, sampler_LinearClampCompare), txVec48, 0.0);
                        u_xlat77 = u_xlat21.y * u_xlat55.x + u_xlat77;
                        vec3 txVec49 = vec3(u_xlat17.xy,u_xlat8.z);
                        u_xlat55.x = textureLod(sampler2DShadow(_AdditionalLightsShadowmapTexture, sampler_LinearClampCompare), txVec49, 0.0);
                        u_xlat77 = u_xlat21.z * u_xlat55.x + u_xlat77;
                        vec3 txVec50 = vec3(u_xlat18.zw,u_xlat8.z);
                        u_xlat55.x = textureLod(sampler2DShadow(_AdditionalLightsShadowmapTexture, sampler_LinearClampCompare), txVec50, 0.0);
                        u_xlat77 = u_xlat21.w * u_xlat55.x + u_xlat77;
                        vec3 txVec51 = vec3(u_xlat19.xy,u_xlat8.z);
                        u_xlat55.x = textureLod(sampler2DShadow(_AdditionalLightsShadowmapTexture, sampler_LinearClampCompare), txVec51, 0.0);
                        u_xlat77 = u_xlat22.x * u_xlat55.x + u_xlat77;
                        vec3 txVec52 = vec3(u_xlat19.zw,u_xlat8.z);
                        u_xlat55.x = textureLod(sampler2DShadow(_AdditionalLightsShadowmapTexture, sampler_LinearClampCompare), txVec52, 0.0);
                        u_xlat77 = u_xlat22.y * u_xlat55.x + u_xlat77;
                        vec3 txVec53 = vec3(u_xlat34.xy,u_xlat8.z);
                        u_xlat55.x = textureLod(sampler2DShadow(_AdditionalLightsShadowmapTexture, sampler_LinearClampCompare), txVec53, 0.0);
                        u_xlat77 = u_xlat22.z * u_xlat55.x + u_xlat77;
                        vec3 txVec54 = vec3(u_xlat63.xy,u_xlat8.z);
                        u_xlat55.x = textureLod(sampler2DShadow(_AdditionalLightsShadowmapTexture, sampler_LinearClampCompare), txVec54, 0.0);
                        u_xlat77 = u_xlat22.w * u_xlat55.x + u_xlat77;
                        vec3 txVec55 = vec3(u_xlat14.xy,u_xlat8.z);
                        u_xlat55.x = textureLod(sampler2DShadow(_AdditionalLightsShadowmapTexture, sampler_LinearClampCompare), txVec55, 0.0);
                        u_xlat77 = u_xlat10.x * u_xlat55.x + u_xlat77;
                        vec3 txVec56 = vec3(u_xlat14.zw,u_xlat8.z);
                        u_xlat55.x = textureLod(sampler2DShadow(_AdditionalLightsShadowmapTexture, sampler_LinearClampCompare), txVec56, 0.0);
                        u_xlat77 = u_xlat10.y * u_xlat55.x + u_xlat77;
                        vec3 txVec57 = vec3(u_xlat58.xy,u_xlat8.z);
                        u_xlat55.x = textureLod(sampler2DShadow(_AdditionalLightsShadowmapTexture, sampler_LinearClampCompare), txVec57, 0.0);
                        u_xlat77 = u_xlat10.z * u_xlat55.x + u_xlat77;
                        vec3 txVec58 = vec3(u_xlat9.xy,u_xlat8.z);
                        u_xlat9.x = textureLod(sampler2DShadow(_AdditionalLightsShadowmapTexture, sampler_LinearClampCompare), txVec58, 0.0);
                        u_xlat76 = u_xlat10.w * u_xlat9.x + u_xlat77;
                    }
                }
            } else {
                vec3 txVec59 = vec3(u_xlat8.xy,u_xlat8.z);
                u_xlat76 = textureLod(sampler2DShadow(_AdditionalLightsShadowmapTexture, sampler_LinearClampCompare), txVec59, 0.0);
            }
            u_xlat8.x = 1.0 + (-_AdditionalShadowParams[u_xlati74].x);
            u_xlat76 = u_xlat76 * _AdditionalShadowParams[u_xlati74].x + u_xlat8.x;
            u_xlatb8.x = 0.0>=u_xlat8.z;
            u_xlatb31 = u_xlat8.z>=1.0;
            u_xlatb8.x = u_xlatb31 || u_xlatb8.x;
            u_xlat76 = (u_xlatb8.x) ? 1.0 : u_xlat76;
        } else {
            u_xlat76 = 1.0;
        }
        u_xlat8.x = (-u_xlat76) + 1.0;
        u_xlat76 = u_xlat3.x * u_xlat8.x + u_xlat76;
        u_xlati8 = 1 << (u_xlati74 & int(0x1F));
        u_xlati8 = int(uint(u_xlati8) & floatBitsToUint(_AdditionalLightsCookieEnableBits));
        if(u_xlati8 != 0) {
            u_xlati8 = int(_AdditionalLightsLightTypes[u_xlati74]);
            u_xlati31 = (u_xlati8 != 0) ? 0 : 1;
            u_xlati54 = u_xlati74 << (2 & int(0x1F));
            if(u_xlati31 != 0) {
                u_xlat9.xyz = vs_TEXCOORD1.yyy * _AdditionalLightsWorldToLights[(u_xlati54 + 1) / 4][(u_xlati54 + 1) % 4].xyw;
                u_xlat9.xyz = _AdditionalLightsWorldToLights[u_xlati54 / 4][u_xlati54 % 4].xyw * vs_TEXCOORD1.xxx + u_xlat9.xyz;
                u_xlat9.xyz = _AdditionalLightsWorldToLights[(u_xlati54 + 2) / 4][(u_xlati54 + 2) % 4].xyw * vs_TEXCOORD1.zzz + u_xlat9.xyz;
                u_xlat9.xyz = u_xlat9.xyz + _AdditionalLightsWorldToLights[(u_xlati54 + 3) / 4][(u_xlati54 + 3) % 4].xyw;
                u_xlat31.xz = u_xlat9.xy / u_xlat9.zz;
                u_xlat31.xz = u_xlat31.xz * vec2(0.5, 0.5) + vec2(0.5, 0.5);
                u_xlat31.xz = clamp(u_xlat31.xz, 0.0, 1.0);
                u_xlat31.xz = _AdditionalLightsCookieAtlasUVRects[u_xlati74].xy * u_xlat31.xz + _AdditionalLightsCookieAtlasUVRects[u_xlati74].zw;
            } else {
                u_xlatb8.x = u_xlati8==1;
                u_xlati8 = u_xlatb8.x ? 1 : int(0);
                if(u_xlati8 != 0) {
                    u_xlat9.xy = vs_TEXCOORD1.yy * _AdditionalLightsWorldToLights[(u_xlati54 + 1) / 4][(u_xlati54 + 1) % 4].xy;
                    u_xlat9.xy = _AdditionalLightsWorldToLights[u_xlati54 / 4][u_xlati54 % 4].xy * vs_TEXCOORD1.xx + u_xlat9.xy;
                    u_xlat9.xy = _AdditionalLightsWorldToLights[(u_xlati54 + 2) / 4][(u_xlati54 + 2) % 4].xy * vs_TEXCOORD1.zz + u_xlat9.xy;
                    u_xlat9.xy = u_xlat9.xy + _AdditionalLightsWorldToLights[(u_xlati54 + 3) / 4][(u_xlati54 + 3) % 4].xy;
                    u_xlat9.xy = u_xlat9.xy * vec2(0.5, 0.5) + vec2(0.5, 0.5);
                    u_xlat9.xy = fract(u_xlat9.xy);
                    u_xlat31.xz = _AdditionalLightsCookieAtlasUVRects[u_xlati74].xy * u_xlat9.xy + _AdditionalLightsCookieAtlasUVRects[u_xlati74].zw;
                } else {
                    u_xlat9 = vs_TEXCOORD1.yyyy * _AdditionalLightsWorldToLights[(u_xlati54 + 1) / 4][(u_xlati54 + 1) % 4];
                    u_xlat9 = _AdditionalLightsWorldToLights[u_xlati54 / 4][u_xlati54 % 4] * vs_TEXCOORD1.xxxx + u_xlat9;
                    u_xlat9 = _AdditionalLightsWorldToLights[(u_xlati54 + 2) / 4][(u_xlati54 + 2) % 4] * vs_TEXCOORD1.zzzz + u_xlat9;
                    u_xlat9 = u_xlat9 + _AdditionalLightsWorldToLights[(u_xlati54 + 3) / 4][(u_xlati54 + 3) % 4];
                    u_xlat9.xyz = u_xlat9.xyz / u_xlat9.www;
                    u_xlat8.x = dot(u_xlat9.xyz, u_xlat9.xyz);
                    u_xlat8.x = inversesqrt(u_xlat8.x);
                    u_xlat9.xyz = u_xlat8.xxx * u_xlat9.xyz;
                    u_xlat8.x = dot(abs(u_xlat9.xyz), vec3(1.0, 1.0, 1.0));
                    u_xlat8.x = max(u_xlat8.x, 9.99999997e-07);
                    u_xlat8.x = float(1.0) / float(u_xlat8.x);
                    u_xlat10.xyz = u_xlat8.xxx * u_xlat9.zxy;
                    u_xlat10.x = (-u_xlat10.x);
                    u_xlat10.x = clamp(u_xlat10.x, 0.0, 1.0);
                    u_xlatb55.xy = greaterThanEqual(u_xlat10.yzyz, vec4(0.0, 0.0, 0.0, 0.0)).xy;
                    u_xlat55.x = (u_xlatb55.x) ? u_xlat10.x : (-u_xlat10.x);
                    u_xlat55.y = (u_xlatb55.y) ? u_xlat10.x : (-u_xlat10.x);
                    u_xlat8.xz = u_xlat9.xy * u_xlat8.xx + u_xlat55.xy;
                    u_xlat8.xz = u_xlat8.xz * vec2(0.5, 0.5) + vec2(0.5, 0.5);
                    u_xlat8.xz = clamp(u_xlat8.xz, 0.0, 1.0);
                    u_xlat31.xz = _AdditionalLightsCookieAtlasUVRects[u_xlati74].xy * u_xlat8.xz + _AdditionalLightsCookieAtlasUVRects[u_xlati74].zw;
                }
            }
            u_xlat8 = textureLod(sampler2D(_AdditionalLightsCookieAtlasTexture, sampler_LinearClamp), u_xlat31.xz, 0.0);
            u_xlat77 = (u_xlatb5.y) ? u_xlat8.w : u_xlat8.x;
            u_xlat8.xyz = (u_xlatb5.x) ? u_xlat8.xyz : vec3(u_xlat77);
        } else {
            u_xlat8.x = float(1.0);
            u_xlat8.y = float(1.0);
            u_xlat8.z = float(1.0);
        }
        u_xlat8.xyz = u_xlat8.xyz * _AdditionalLightsColor[u_xlati74].xyz;
        u_xlat74 = u_xlat75 * u_xlat76;
        u_xlat8.xyz = vec3(u_xlat74) * u_xlat8.xyz;
        u_xlat74 = dot(u_xlat1.xyz, u_xlat7.xyz);
        u_xlat74 = clamp(u_xlat74, 0.0, 1.0);
        u_xlat9.xyz = vec3(u_xlat74) * u_xlat8.xyz;
        u_xlat7.xyz = u_xlat2.xyz * vec3(u_xlat71) + u_xlat7.xyz;
        u_xlat74 = dot(u_xlat7.xyz, u_xlat7.xyz);
        u_xlat74 = max(u_xlat74, 1.17549435e-38);
        u_xlat74 = inversesqrt(u_xlat74);
        u_xlat7.xyz = vec3(u_xlat74) * u_xlat7.xyz;
        u_xlat74 = dot(u_xlat1.xyz, u_xlat7.xyz);
        u_xlat74 = clamp(u_xlat74, 0.0, 1.0);
        u_xlat74 = log2(u_xlat74);
        u_xlat74 = u_xlat70 * u_xlat74;
        u_xlat74 = exp2(u_xlat74);
        u_xlat7.xyz = vec3(u_xlat74) * _SpecColor.xyz;
        u_xlat7.xyz = u_xlat7.xyz * u_xlat8.xyz;
        u_xlat7.xyz = u_xlat9.xyz * u_xlat0.yzw + u_xlat7.xyz;
        u_xlat6.xyz = u_xlat6.xyz + u_xlat7.xyz;
    }
    u_xlat23.xyz = u_xlat4.xyz * u_xlat0.yzw + u_xlat26.xyz;
    SV_Target0.xyz = u_xlat6.xyz + u_xlat23.xyz;
    u_xlatb23 = _Surface==1.0;
    SV_Target0.w = (u_xlatb23) ? u_xlat0.x : 1.0;
    return;
}

