struct PGlobals {
  x_GlobalMipBias : vec2<f32>,
  @size(8)
  padding : u32,
  x_MainLightPosition : vec4<f32>,
  x_MainLightColor : vec4<f32>,
  x_AdditionalLightsCount : vec4<f32>,
  x_Time : vec4<f32>,
  x_ScreenParams : vec4<f32>,
  x_ZBufferParams : vec4<f32>,
  unity_MatrixVP : mat4x4<f32>,
  x_MaxDepth : f32,
  @size(12)
  padding_1 : u32,
  x_VeraslWater_DepthCamParams : vec4<f32>,
}

struct UnityPerMaterial {
  x_BumpScale : f32,
  @size(12)
  padding_2 : u32,
  x_DitherPattern_TexelSize : vec4<f32>,
}

type Arr = array<mat4x4<f32>, 5u>;

struct MainLightShadows {
  x_MainLightWorldToShadow : Arr,
  x_CascadeShadowSplitSpheres0 : vec4<f32>,
  x_CascadeShadowSplitSpheres1 : vec4<f32>,
  x_CascadeShadowSplitSpheres2 : vec4<f32>,
  x_CascadeShadowSplitSpheres3 : vec4<f32>,
  x_CascadeShadowSplitSphereRadii : vec4<f32>,
  x_MainLightShadowOffset0 : vec4<f32>,
  x_MainLightShadowOffset1 : vec4<f32>,
  x_MainLightShadowParams : vec4<f32>,
  x_MainLightShadowmapSize : vec4<f32>,
}

type Arr_1 = array<vec4<f32>, 2u>;

struct UnityPerDraw {
  unity_ObjectToWorld : mat4x4<f32>,
  unity_WorldToObject : mat4x4<f32>,
  unity_LODFade : vec4<f32>,
  unity_WorldTransformParams : vec4<f32>,
  unity_RenderingLayer : vec4<f32>,
  unity_LightData : vec4<f32>,
  unity_LightIndices : Arr_1,
  unity_ProbesOcclusion : vec4<f32>,
  unity_SpecCube0_HDR : vec4<f32>,
  unity_SpecCube1_HDR : vec4<f32>,
  unity_SpecCube0_BoxMax : vec4<f32>,
  unity_SpecCube0_BoxMin : vec4<f32>,
  unity_SpecCube0_ProbePosition : vec4<f32>,
  unity_SpecCube1_BoxMax : vec4<f32>,
  unity_SpecCube1_BoxMin : vec4<f32>,
  unity_SpecCube1_ProbePosition : vec4<f32>,
  unity_LightmapST : vec4<f32>,
  unity_DynamicLightmapST : vec4<f32>,
  unity_SHAr : vec4<f32>,
  unity_SHAg : vec4<f32>,
  unity_SHAb : vec4<f32>,
  unity_SHBr : vec4<f32>,
  unity_SHBg : vec4<f32>,
  unity_SHBb : vec4<f32>,
  unity_SHC : vec4<f32>,
  unity_RendererBounds_Min : vec4<f32>,
  unity_RendererBounds_Max : vec4<f32>,
  unity_MatrixPreviousM : mat4x4<f32>,
  unity_MatrixPreviousMI : mat4x4<f32>,
  unity_MotionVectorsParams : vec4<f32>,
  unity_SpriteColor : vec4<f32>,
  unity_SpriteProps : vec4<f32>,
}

type Arr_2 = array<vec4<f32>, 256u>;

type Arr_3 = array<vec4<f32>, 256u>;

type Arr_4 = array<vec4<f32>, 256u>;

type Arr_5 = array<vec4<f32>, 256u>;

type Arr_6 = array<vec4<f32>, 256u>;

struct strided_arr {
  @size(16)
  el : f32,
}

type Arr_7 = array<strided_arr, 256u>;

struct AdditionalLights {
  x_AdditionalLightsPosition : Arr_6,
  x_AdditionalLightsColor : Arr_6,
  x_AdditionalLightsAttenuation : Arr_6,
  x_AdditionalLightsSpotDir : Arr_6,
  x_AdditionalLightsOcclusionProbes : Arr_6,
  x_AdditionalLightsLayerMasks : Arr_7,
}

var<private> vs_TEXCOORD6 : vec4<f32>;

@group(0) @binding(1) var x_WaterFXMap : texture_2d<f32>;

@group(0) @binding(10) var sampler_ScreenTextures_linear_clamp : sampler;

var<private> vs_TEXCOORD3 : vec3<f32>;

@group(1) @binding(0) var<uniform> x_39 : PGlobals;

@group(0) @binding(2) var x_CameraDepthTexture : texture_2d<f32>;

var<private> vs_TEXCOORD5 : vec4<f32>;

var<private> vs_TEXCOORD1 : vec3<f32>;

@group(0) @binding(4) var x_WaterDepthMap : texture_2d<f32>;

@group(0) @binding(12) var sampler_WaterDepthMap_linear_clamp : sampler;

@group(0) @binding(6) var x_SurfaceMap : texture_2d<f32>;

@group(0) @binding(14) var sampler_SurfaceMap : sampler;

var<private> vs_TEXCOORD0 : vec4<f32>;

@group(1) @binding(3) var<uniform> x_203 : UnityPerMaterial;

var<private> vs_NORMAL0 : vec3<f32>;

var<private> vs_TEXCOORD2 : vec3<f32>;

@group(1) @binding(4) var<uniform> x_364 : MainLightShadows;

@group(0) @binding(9) var x_MainLightShadowmapTexture : texture_depth_2d;

@group(0) @binding(17) var sampler_MainLightShadowmapTexture : sampler_comparison;

@group(0) @binding(8) var x_DitherPattern : texture_2d<f32>;

@group(0) @binding(16) var sampler_DitherPattern : sampler;

@group(1) @binding(2) var<uniform> x_2344 : UnityPerDraw;

@group(0) @binding(7) var x_FoamMap : texture_2d<f32>;

@group(0) @binding(15) var sampler_FoamMap : sampler;

@group(0) @binding(5) var x_AbsorptionScatteringRamp : texture_2d<f32>;

@group(0) @binding(13) var sampler_AbsorptionScatteringRamp : sampler;

@group(1) @binding(1) var<uniform> x_2755 : AdditionalLights;

@group(0) @binding(0) var x_PlanarReflectionTexture : texture_2d<f32>;

@group(0) @binding(3) var x_CameraOpaqueTexture : texture_2d<f32>;

@group(0) @binding(11) var sampler_CameraOpaqueTexture_linear_clamp : sampler;

var<private> SV_Target0 : vec4<f32>;

var<private> gl_FragCoord : vec4<f32>;

fn main_1() {
  var u_xlat0 : vec3<f32>;
  var u_xlat1 : vec3<f32>;
  var u_xlat38 : f32;
  var u_xlat2 : vec4<f32>;
  var u_xlat57 : f32;
  var u_xlat58 : f32;
  var u_xlat40 : vec2<f32>;
  var u_xlat3 : f32;
  var u_xlat4 : vec4<f32>;
  var u_xlat20 : vec2<f32>;
  var u_xlatb22 : bool;
  var x_322 : vec2<f32>;
  var u_xlat22 : vec3<f32>;
  var u_xlat5 : vec4<f32>;
  var u_xlat6 : vec4<f32>;
  var u_xlat7 : vec4<f32>;
  var u_xlatb4 : vec4<bool>;
  var u_xlatu22 : u32;
  var u_xlati22 : i32;
  var txVec0 : vec3<f32>;
  var txVec1 : vec3<f32>;
  var txVec2 : vec3<f32>;
  var txVec3 : vec3<f32>;
  var u_xlatb23 : bool;
  var u_xlat23 : vec2<f32>;
  var u_xlat43 : vec2<f32>;
  var u_xlat45 : vec2<f32>;
  var u_xlat8 : vec4<f32>;
  var u_xlat9 : vec4<f32>;
  var u_xlat10 : vec4<f32>;
  var u_xlat11 : vec4<f32>;
  var u_xlat12 : vec4<f32>;
  var u_xlat13 : vec4<f32>;
  var txVec4 : vec3<f32>;
  var u_xlat42 : vec2<f32>;
  var txVec5 : vec3<f32>;
  var u_xlat61 : f32;
  var txVec6 : vec3<f32>;
  var txVec7 : vec3<f32>;
  var txVec8 : vec3<f32>;
  var txVec9 : vec3<f32>;
  var txVec10 : vec3<f32>;
  var txVec11 : vec3<f32>;
  var txVec12 : vec3<f32>;
  var u_xlat49 : vec2<f32>;
  var u_xlat14 : vec4<f32>;
  var u_xlat25 : vec2<f32>;
  var u_xlat15 : vec2<f32>;
  var u_xlat46 : vec2<f32>;
  var u_xlat16 : vec4<f32>;
  var u_xlat17 : vec4<f32>;
  var u_xlat18 : vec4<f32>;
  var txVec13 : vec3<f32>;
  var txVec14 : vec3<f32>;
  var txVec15 : vec3<f32>;
  var txVec16 : vec3<f32>;
  var txVec17 : vec3<f32>;
  var txVec18 : vec3<f32>;
  var txVec19 : vec3<f32>;
  var txVec20 : vec3<f32>;
  var txVec21 : vec3<f32>;
  var txVec22 : vec3<f32>;
  var txVec23 : vec3<f32>;
  var txVec24 : vec3<f32>;
  var txVec25 : vec3<f32>;
  var txVec26 : vec3<f32>;
  var txVec27 : vec3<f32>;
  var txVec28 : vec3<f32>;
  var txVec29 : vec3<f32>;
  var u_xlatb41 : bool;
  var u_xlatb60 : bool;
  var x_1827 : f32;
  var u_xlat41 : vec2<f32>;
  var u_xlat62 : f32;
  var u_xlatu_loop_1 : u32;
  var u_xlat63 : f32;
  var u_xlatb8 : vec4<bool>;
  var u_xlatu63 : u32;
  var u_xlati63 : i32;
  var txVec30 : vec3<f32>;
  var u_xlatb6 : vec4<bool>;
  var u_xlatu41 : u32;
  var u_xlati41 : i32;
  var u_xlat60 : f32;
  var u_xlat59 : f32;
  var u_xlatu1 : u32;
  var u_xlatu_loop_2 : u32;
  var u_xlatu62 : u32;
  var indexable : array<vec4<u32>, 4u>;
  var u_xlati62 : i32;
  var u_xlat64 : f32;
  var u_xlat65 : f32;
  var u_xlat_precise_vec4 : vec4<f32>;
  var u_xlat_precise_ivec4 : vec4<i32>;
  var u_xlat_precise_bvec4 : vec4<bool>;
  var u_xlat_precise_uvec4 : vec4<u32>;
  let x_14 : vec4<f32> = vs_TEXCOORD6;
  let x_16 : vec4<f32> = vs_TEXCOORD6;
  let x_18 : vec2<f32> = (vec2<f32>(x_14.x, x_14.y) / vec2<f32>(x_16.w, x_16.w));
  let x_19 : vec3<f32> = u_xlat0;
  u_xlat0 = vec3<f32>(x_18.x, x_18.y, x_19.z);
  let x_34 : vec3<f32> = vs_TEXCOORD3;
  let x_46 : f32 = x_39.x_GlobalMipBias.x;
  let x_47 : vec4<f32> = textureSampleBias(x_WaterFXMap, sampler_ScreenTextures_linear_clamp, vec2<f32>(x_34.x, x_34.y), x_46);
  u_xlat1 = vec3<f32>(x_47.x, x_47.y, x_47.z);
  let x_55 : vec3<f32> = u_xlat0;
  let x_58 : f32 = x_39.x_GlobalMipBias.x;
  let x_59 : vec4<f32> = textureSampleBias(x_CameraDepthTexture, sampler_ScreenTextures_linear_clamp, vec2<f32>(x_55.x, x_55.y), x_58);
  u_xlat38 = x_59.x;
  let x_64 : f32 = x_39.x_ZBufferParams.z;
  let x_65 : f32 = u_xlat38;
  let x_69 : f32 = x_39.x_ZBufferParams.w;
  u_xlat38 = ((x_64 * x_65) + x_69);
  let x_72 : f32 = u_xlat38;
  u_xlat38 = (1.0f / x_72);
  let x_74 : f32 = u_xlat38;
  let x_78 : f32 = vs_TEXCOORD5.x;
  let x_82 : f32 = vs_TEXCOORD5.y;
  u_xlat38 = ((x_74 * x_78) + -(x_82));
  let x_88 : vec3<f32> = vs_TEXCOORD1;
  let x_95 : vec2<f32> = ((vec2<f32>(x_88.x, x_88.z) * vec2<f32>(0.002f, 0.002f)) + vec2<f32>(0.5f, 0.5f));
  let x_96 : vec4<f32> = u_xlat2;
  u_xlat2 = vec4<f32>(x_95.x, x_95.y, x_96.z, x_96.w);
  let x_104 : vec4<f32> = u_xlat2;
  let x_106 : vec4<f32> = textureSampleLevel(x_WaterDepthMap, sampler_WaterDepthMap_linear_clamp, vec2<f32>(x_104.x, x_104.y), 1.0f);
  u_xlat57 = x_106.x;
  let x_108 : f32 = u_xlat57;
  u_xlat57 = (-(x_108) + 1.0f);
  let x_114 : f32 = x_39.x_MaxDepth;
  let x_117 : f32 = x_39.x_VeraslWater_DepthCamParams.x;
  u_xlat58 = (x_114 + x_117);
  let x_119 : f32 = u_xlat57;
  let x_120 : f32 = u_xlat58;
  let x_123 : f32 = x_39.x_VeraslWater_DepthCamParams.x;
  u_xlat57 = ((x_119 * x_120) + -(x_123));
  let x_126 : f32 = u_xlat57;
  let x_128 : f32 = vs_TEXCOORD1.y;
  u_xlat57 = (x_126 + x_128);
  let x_131 : f32 = x_39.x_MaxDepth;
  u_xlat58 = (1.0f / x_131);
  let x_139 : vec4<f32> = vs_TEXCOORD0;
  let x_142 : f32 = x_39.x_GlobalMipBias.x;
  let x_143 : vec4<f32> = textureSampleBias(x_SurfaceMap, sampler_SurfaceMap, vec2<f32>(x_139.z, x_139.w), x_142);
  let x_144 : vec2<f32> = vec2<f32>(x_143.x, x_143.y);
  let x_145 : vec4<f32> = u_xlat2;
  u_xlat2 = vec4<f32>(x_144.x, x_144.y, x_145.z, x_145.w);
  let x_147 : vec4<f32> = u_xlat2;
  let x_154 : vec2<f32> = ((vec2<f32>(x_147.x, x_147.y) * vec2<f32>(2.0f, 2.0f)) + vec2<f32>(-1.0f, -1.0f));
  let x_155 : vec4<f32> = u_xlat2;
  u_xlat2 = vec4<f32>(x_154.x, x_154.y, x_155.z, x_155.w);
  let x_162 : vec4<f32> = vs_TEXCOORD0;
  let x_165 : f32 = x_39.x_GlobalMipBias.x;
  let x_166 : vec4<f32> = textureSampleBias(x_SurfaceMap, sampler_SurfaceMap, vec2<f32>(x_162.x, x_162.y), x_165);
  u_xlat40 = vec2<f32>(x_166.x, x_166.y);
  let x_168 : vec2<f32> = u_xlat40;
  u_xlat40 = ((x_168 * vec2<f32>(2.0f, 2.0f)) + vec2<f32>(-1.0f, -1.0f));
  let x_171 : vec2<f32> = u_xlat40;
  let x_173 : vec4<f32> = u_xlat2;
  let x_175 : vec2<f32> = ((x_171 * vec2<f32>(0.5f, 0.5f)) + vec2<f32>(x_173.x, x_173.y));
  let x_176 : vec4<f32> = u_xlat2;
  u_xlat2 = vec4<f32>(x_175.x, x_175.y, x_176.z, x_176.w);
  let x_179 : f32 = u_xlat38;
  u_xlat3 = (x_179 * 0.005f);
  let x_182 : f32 = u_xlat38;
  u_xlat40.x = ((x_182 * 0.25f) + 0.25f);
  let x_188 : f32 = u_xlat40.x;
  u_xlat40.x = clamp(x_188, 0.0f, 1.0f);
  let x_192 : vec2<f32> = u_xlat40;
  let x_194 : vec4<f32> = u_xlat2;
  let x_196 : vec2<f32> = (vec2<f32>(x_192.x, x_192.x) * vec2<f32>(x_194.x, x_194.y));
  let x_197 : vec4<f32> = u_xlat2;
  u_xlat2 = vec4<f32>(x_196.x, x_196.y, x_197.z, x_197.w);
  let x_199 : vec4<f32> = u_xlat2;
  let x_205 : f32 = x_203.x_BumpScale;
  let x_207 : vec2<f32> = (vec2<f32>(x_199.x, x_199.y) * vec2<f32>(x_205, x_205));
  let x_208 : vec4<f32> = u_xlat2;
  u_xlat2 = vec4<f32>(x_207.x, x_208.y, x_207.y, x_208.w);
  u_xlat2.y = 0.0f;
  u_xlat2.w = 1.0f;
  let x_212 : vec4<f32> = u_xlat2;
  let x_215 : vec3<f32> = vs_NORMAL0;
  let x_216 : vec3<f32> = (vec3<f32>(x_212.x, x_212.y, x_212.z) + x_215);
  let x_217 : vec4<f32> = u_xlat2;
  u_xlat2 = vec4<f32>(x_216.x, x_216.y, x_216.z, x_217.w);
  let x_220 : vec3<f32> = u_xlat1;
  let x_223 : vec2<f32> = (-(vec2<f32>(x_220.y, x_220.z)) + vec2<f32>(0.5f, 0.5f));
  let x_224 : vec4<f32> = u_xlat4;
  u_xlat4 = vec4<f32>(x_223.x, x_224.y, x_223.y, x_224.w);
  u_xlat4.y = 0.0f;
  let x_227 : vec4<f32> = u_xlat2;
  let x_229 : vec4<f32> = u_xlat4;
  let x_231 : vec3<f32> = (vec3<f32>(x_227.x, x_227.y, x_227.z) + vec3<f32>(x_229.x, x_229.y, x_229.z));
  let x_232 : vec4<f32> = u_xlat2;
  u_xlat2 = vec4<f32>(x_231.x, x_231.y, x_231.z, x_232.w);
  let x_235 : vec4<f32> = u_xlat2;
  let x_237 : vec4<f32> = u_xlat2;
  u_xlat20.x = dot(vec3<f32>(x_235.x, x_235.y, x_235.z), vec3<f32>(x_237.x, x_237.y, x_237.z));
  let x_242 : f32 = u_xlat20.x;
  u_xlat20.x = inverseSqrt(x_242);
  let x_245 : vec2<f32> = u_xlat20;
  let x_247 : vec4<f32> = u_xlat2;
  let x_249 : vec3<f32> = (vec3<f32>(x_245.x, x_245.x, x_245.x) * vec3<f32>(x_247.x, x_247.y, x_247.z));
  let x_250 : vec4<f32> = u_xlat2;
  u_xlat2 = vec4<f32>(x_249.x, x_249.y, x_249.z, x_250.w);
  let x_252 : vec4<f32> = u_xlat2;
  let x_259 : vec4<f32> = x_39.unity_MatrixVP[1i];
  u_xlat20 = (-(vec2<f32>(x_252.y, x_252.y)) * vec2<f32>(x_259.x, x_259.z));
  let x_263 : vec4<f32> = x_39.unity_MatrixVP[0i];
  let x_265 : vec4<f32> = u_xlat2;
  let x_269 : vec2<f32> = u_xlat20;
  u_xlat20 = ((vec2<f32>(x_263.x, x_263.z) * -(vec2<f32>(x_265.x, x_265.x))) + x_269);
  let x_273 : vec4<f32> = x_39.unity_MatrixVP[2i];
  let x_275 : vec4<f32> = u_xlat2;
  let x_279 : vec2<f32> = u_xlat20;
  u_xlat20 = ((vec2<f32>(x_273.x, x_273.z) * -(vec2<f32>(x_275.z, x_275.z))) + x_279);
  let x_281 : f32 = u_xlat3;
  u_xlat3 = x_281;
  let x_282 : f32 = u_xlat3;
  u_xlat3 = clamp(x_282, 0.0f, 1.0f);
  let x_284 : vec2<f32> = u_xlat20;
  let x_285 : f32 = u_xlat3;
  let x_288 : vec3<f32> = u_xlat0;
  u_xlat20 = ((x_284 * vec2<f32>(x_285, x_285)) + vec2<f32>(x_288.x, x_288.y));
  let x_294 : vec2<f32> = u_xlat20;
  let x_296 : f32 = x_39.x_GlobalMipBias.x;
  let x_297 : vec4<f32> = textureSampleBias(x_CameraDepthTexture, sampler_ScreenTextures_linear_clamp, x_294, x_296);
  u_xlat3 = x_297.x;
  let x_300 : f32 = x_39.x_ZBufferParams.z;
  let x_301 : f32 = u_xlat3;
  let x_304 : f32 = x_39.x_ZBufferParams.w;
  u_xlat3 = ((x_300 * x_301) + x_304);
  let x_306 : f32 = u_xlat3;
  u_xlat3 = (1.0f / x_306);
  let x_308 : f32 = u_xlat3;
  let x_310 : f32 = vs_TEXCOORD5.x;
  let x_313 : f32 = vs_TEXCOORD5.y;
  u_xlat3 = ((x_308 * x_310) + -(x_313));
  let x_319 : f32 = u_xlat3;
  u_xlatb22 = (x_319 < 0.0f);
  let x_321 : bool = u_xlatb22;
  if (x_321) {
    let x_325 : vec3<f32> = u_xlat0;
    x_322 = vec2<f32>(x_325.x, x_325.y);
  } else {
    let x_328 : vec2<f32> = u_xlat20;
    x_322 = x_328;
  }
  let x_329 : vec2<f32> = x_322;
  u_xlat20 = x_329;
  let x_330 : bool = u_xlatb22;
  let x_331 : f32 = u_xlat38;
  let x_332 : f32 = u_xlat3;
  u_xlat38 = select(x_332, x_331, x_330);
  let x_334 : vec4<f32> = u_xlat2;
  let x_337 : vec3<f32> = vs_TEXCOORD2;
  u_xlat3 = dot(vec3<f32>(x_334.x, x_334.y, x_334.z), x_337);
  let x_339 : f32 = u_xlat3;
  u_xlat3 = (-(x_339) + 1.0f);
  let x_343 : f32 = u_xlat3;
  let x_344 : f32 = u_xlat3;
  u_xlat22.x = (x_343 * x_344);
  let x_348 : f32 = u_xlat22.x;
  let x_350 : f32 = u_xlat22.x;
  u_xlat22.x = (x_348 * x_350);
  let x_354 : f32 = u_xlat22.x;
  let x_355 : f32 = u_xlat3;
  u_xlat3 = (x_354 * x_355);
  let x_357 : f32 = u_xlat3;
  u_xlat3 = clamp(x_357, 0.0f, 1.0f);
  let x_359 : vec3<f32> = vs_TEXCOORD1;
  let x_366 : vec4<f32> = x_364.x_CascadeShadowSplitSpheres0;
  u_xlat22 = (x_359 + -(vec3<f32>(x_366.x, x_366.y, x_366.z)));
  let x_370 : vec3<f32> = vs_TEXCOORD1;
  let x_372 : vec4<f32> = x_364.x_CascadeShadowSplitSpheres1;
  let x_375 : vec3<f32> = (x_370 + -(vec3<f32>(x_372.x, x_372.y, x_372.z)));
  let x_376 : vec4<f32> = u_xlat4;
  u_xlat4 = vec4<f32>(x_375.x, x_375.y, x_375.z, x_376.w);
  let x_379 : vec3<f32> = vs_TEXCOORD1;
  let x_382 : vec4<f32> = x_364.x_CascadeShadowSplitSpheres2;
  let x_385 : vec3<f32> = (x_379 + -(vec3<f32>(x_382.x, x_382.y, x_382.z)));
  let x_386 : vec4<f32> = u_xlat5;
  u_xlat5 = vec4<f32>(x_385.x, x_385.y, x_385.z, x_386.w);
  let x_389 : vec3<f32> = vs_TEXCOORD1;
  let x_392 : vec4<f32> = x_364.x_CascadeShadowSplitSpheres3;
  let x_395 : vec3<f32> = (x_389 + -(vec3<f32>(x_392.x, x_392.y, x_392.z)));
  let x_396 : vec4<f32> = u_xlat6;
  u_xlat6 = vec4<f32>(x_395.x, x_395.y, x_395.z, x_396.w);
  let x_399 : vec3<f32> = u_xlat22;
  let x_400 : vec3<f32> = u_xlat22;
  u_xlat7.x = dot(x_399, x_400);
  let x_403 : vec4<f32> = u_xlat4;
  let x_405 : vec4<f32> = u_xlat4;
  u_xlat7.y = dot(vec3<f32>(x_403.x, x_403.y, x_403.z), vec3<f32>(x_405.x, x_405.y, x_405.z));
  let x_409 : vec4<f32> = u_xlat5;
  let x_411 : vec4<f32> = u_xlat5;
  u_xlat7.z = dot(vec3<f32>(x_409.x, x_409.y, x_409.z), vec3<f32>(x_411.x, x_411.y, x_411.z));
  let x_415 : vec4<f32> = u_xlat6;
  let x_417 : vec4<f32> = u_xlat6;
  u_xlat7.w = dot(vec3<f32>(x_415.x, x_415.y, x_415.z), vec3<f32>(x_417.x, x_417.y, x_417.z));
  let x_424 : vec4<f32> = u_xlat7;
  let x_427 : vec4<f32> = x_364.x_CascadeShadowSplitSphereRadii;
  u_xlatb4 = (x_424 < x_427);
  let x_430 : bool = u_xlatb4.x;
  u_xlat5.x = select(0.0f, 1.0f, x_430);
  let x_434 : bool = u_xlatb4.y;
  u_xlat5.y = select(0.0f, 1.0f, x_434);
  let x_438 : bool = u_xlatb4.z;
  u_xlat5.z = select(0.0f, 1.0f, x_438);
  let x_442 : bool = u_xlatb4.w;
  u_xlat5.w = select(0.0f, 1.0f, x_442);
  let x_446 : bool = u_xlatb4.x;
  u_xlat22.x = select(-0.0f, -1.0f, x_446);
  let x_451 : bool = u_xlatb4.y;
  u_xlat22.y = select(-0.0f, -1.0f, x_451);
  let x_455 : bool = u_xlatb4.z;
  u_xlat22.z = select(-0.0f, -1.0f, x_455);
  let x_458 : vec3<f32> = u_xlat22;
  let x_459 : vec4<f32> = u_xlat5;
  u_xlat22 = (x_458 + vec3<f32>(x_459.y, x_459.z, x_459.w));
  let x_462 : vec3<f32> = u_xlat22;
  let x_464 : vec3<f32> = max(x_462, vec3<f32>(0.0f, 0.0f, 0.0f));
  let x_465 : vec4<f32> = u_xlat5;
  u_xlat5 = vec4<f32>(x_465.x, x_464.x, x_464.y, x_464.z);
  let x_467 : vec4<f32> = u_xlat5;
  u_xlat22.x = dot(x_467, vec4<f32>(4.0f, 3.0f, 2.0f, 1.0f));
  let x_474 : f32 = u_xlat22.x;
  u_xlat22.x = (-(x_474) + 4.0f);
  let x_481 : f32 = u_xlat22.x;
  u_xlatu22 = u32(x_481);
  let x_485 : u32 = u_xlatu22;
  u_xlati22 = (bitcast<i32>(x_485) << bitcast<u32>(2i));
  let x_488 : vec3<f32> = vs_TEXCOORD1;
  let x_490 : i32 = u_xlati22;
  let x_493 : i32 = u_xlati22;
  let x_497 : vec4<f32> = x_364.x_MainLightWorldToShadow[((x_490 + 1i) / 4i)][((x_493 + 1i) % 4i)];
  let x_499 : vec3<f32> = (vec3<f32>(x_488.y, x_488.y, x_488.y) * vec3<f32>(x_497.x, x_497.y, x_497.z));
  let x_500 : vec4<f32> = u_xlat4;
  u_xlat4 = vec4<f32>(x_499.x, x_499.y, x_499.z, x_500.w);
  let x_502 : i32 = u_xlati22;
  let x_504 : i32 = u_xlati22;
  let x_507 : vec4<f32> = x_364.x_MainLightWorldToShadow[(x_502 / 4i)][(x_504 % 4i)];
  let x_509 : vec3<f32> = vs_TEXCOORD1;
  let x_512 : vec4<f32> = u_xlat4;
  let x_514 : vec3<f32> = ((vec3<f32>(x_507.x, x_507.y, x_507.z) * vec3<f32>(x_509.x, x_509.x, x_509.x)) + vec3<f32>(x_512.x, x_512.y, x_512.z));
  let x_515 : vec4<f32> = u_xlat4;
  u_xlat4 = vec4<f32>(x_514.x, x_514.y, x_514.z, x_515.w);
  let x_517 : i32 = u_xlati22;
  let x_520 : i32 = u_xlati22;
  let x_524 : vec4<f32> = x_364.x_MainLightWorldToShadow[((x_517 + 2i) / 4i)][((x_520 + 2i) % 4i)];
  let x_526 : vec3<f32> = vs_TEXCOORD1;
  let x_529 : vec4<f32> = u_xlat4;
  let x_531 : vec3<f32> = ((vec3<f32>(x_524.x, x_524.y, x_524.z) * vec3<f32>(x_526.z, x_526.z, x_526.z)) + vec3<f32>(x_529.x, x_529.y, x_529.z));
  let x_532 : vec4<f32> = u_xlat4;
  u_xlat4 = vec4<f32>(x_531.x, x_531.y, x_531.z, x_532.w);
  let x_534 : vec4<f32> = u_xlat4;
  let x_536 : i32 = u_xlati22;
  let x_539 : i32 = u_xlati22;
  let x_543 : vec4<f32> = x_364.x_MainLightWorldToShadow[((x_536 + 3i) / 4i)][((x_539 + 3i) % 4i)];
  u_xlat22 = (vec3<f32>(x_534.x, x_534.y, x_534.z) + vec3<f32>(x_543.x, x_543.y, x_543.z));
  let x_547 : f32 = x_364.x_MainLightShadowParams.y;
  u_xlatb4.x = (0.0f < x_547);
  let x_551 : bool = u_xlatb4.x;
  if (x_551) {
    let x_555 : f32 = x_364.x_MainLightShadowParams.y;
    u_xlatb4.x = (x_555 == 1.0f);
    let x_559 : bool = u_xlatb4.x;
    if (x_559) {
      let x_562 : vec3<f32> = u_xlat22;
      let x_565 : vec4<f32> = x_364.x_MainLightShadowOffset0;
      u_xlat4 = (vec4<f32>(x_562.x, x_562.y, x_562.x, x_562.y) + x_565);
      let x_568 : vec4<f32> = u_xlat4;
      let x_569 : vec2<f32> = vec2<f32>(x_568.x, x_568.y);
      let x_571 : f32 = u_xlat22.z;
      txVec0 = vec3<f32>(x_569.x, x_569.y, x_571);
      let x_583 : vec3<f32> = txVec0;
      let x_585 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_583.xy, x_583.z);
      u_xlat5.x = x_585;
      let x_588 : vec4<f32> = u_xlat4;
      let x_589 : vec2<f32> = vec2<f32>(x_588.z, x_588.w);
      let x_591 : f32 = u_xlat22.z;
      txVec1 = vec3<f32>(x_589.x, x_589.y, x_591);
      let x_598 : vec3<f32> = txVec1;
      let x_600 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_598.xy, x_598.z);
      u_xlat5.y = x_600;
      let x_602 : vec3<f32> = u_xlat22;
      let x_605 : vec4<f32> = x_364.x_MainLightShadowOffset1;
      u_xlat4 = (vec4<f32>(x_602.x, x_602.y, x_602.x, x_602.y) + x_605);
      let x_608 : vec4<f32> = u_xlat4;
      let x_609 : vec2<f32> = vec2<f32>(x_608.x, x_608.y);
      let x_611 : f32 = u_xlat22.z;
      txVec2 = vec3<f32>(x_609.x, x_609.y, x_611);
      let x_618 : vec3<f32> = txVec2;
      let x_620 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_618.xy, x_618.z);
      u_xlat5.z = x_620;
      let x_623 : vec4<f32> = u_xlat4;
      let x_624 : vec2<f32> = vec2<f32>(x_623.z, x_623.w);
      let x_626 : f32 = u_xlat22.z;
      txVec3 = vec3<f32>(x_624.x, x_624.y, x_626);
      let x_633 : vec3<f32> = txVec3;
      let x_635 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_633.xy, x_633.z);
      u_xlat5.w = x_635;
      let x_637 : vec4<f32> = u_xlat5;
      u_xlat4.x = dot(x_637, vec4<f32>(0.25f, 0.25f, 0.25f, 0.25f));
    } else {
      let x_644 : f32 = x_364.x_MainLightShadowParams.y;
      u_xlatb23 = (x_644 == 2.0f);
      let x_646 : bool = u_xlatb23;
      if (x_646) {
        let x_650 : vec3<f32> = u_xlat22;
        let x_653 : vec4<f32> = x_364.x_MainLightShadowmapSize;
        u_xlat23 = ((vec2<f32>(x_650.x, x_650.y) * vec2<f32>(x_653.z, x_653.w)) + vec2<f32>(0.5f, 0.5f));
        let x_657 : vec2<f32> = u_xlat23;
        u_xlat23 = floor(x_657);
        let x_659 : vec3<f32> = u_xlat22;
        let x_662 : vec4<f32> = x_364.x_MainLightShadowmapSize;
        let x_665 : vec2<f32> = u_xlat23;
        let x_667 : vec2<f32> = ((vec2<f32>(x_659.x, x_659.y) * vec2<f32>(x_662.z, x_662.w)) + -(x_665));
        let x_668 : vec4<f32> = u_xlat5;
        u_xlat5 = vec4<f32>(x_667.x, x_667.y, x_668.z, x_668.w);
        let x_670 : vec4<f32> = u_xlat5;
        u_xlat6 = (vec4<f32>(x_670.x, x_670.x, x_670.y, x_670.y) + vec4<f32>(0.5f, 1.0f, 0.5f, 1.0f));
        let x_674 : vec4<f32> = u_xlat6;
        let x_676 : vec4<f32> = u_xlat6;
        u_xlat7 = (vec4<f32>(x_674.x, x_674.x, x_674.z, x_674.z) * vec4<f32>(x_676.x, x_676.x, x_676.z, x_676.z));
        let x_680 : vec4<f32> = u_xlat7;
        u_xlat43 = (vec2<f32>(x_680.y, x_680.w) * vec2<f32>(0.079999998f, 0.079999998f));
        let x_685 : vec4<f32> = u_xlat7;
        let x_688 : vec4<f32> = u_xlat5;
        let x_691 : vec2<f32> = ((vec2<f32>(x_685.x, x_685.z) * vec2<f32>(0.5f, 0.5f)) + -(vec2<f32>(x_688.x, x_688.y)));
        let x_692 : vec4<f32> = u_xlat6;
        u_xlat6 = vec4<f32>(x_691.x, x_692.y, x_691.y, x_692.w);
        let x_694 : vec4<f32> = u_xlat5;
        let x_698 : vec2<f32> = (-(vec2<f32>(x_694.x, x_694.y)) + vec2<f32>(1.0f, 1.0f));
        let x_699 : vec4<f32> = u_xlat7;
        u_xlat7 = vec4<f32>(x_698.x, x_698.y, x_699.z, x_699.w);
        let x_702 : vec4<f32> = u_xlat5;
        u_xlat45 = min(vec2<f32>(x_702.x, x_702.y), vec2<f32>(0.0f, 0.0f));
        let x_706 : vec2<f32> = u_xlat45;
        let x_708 : vec2<f32> = u_xlat45;
        let x_710 : vec4<f32> = u_xlat7;
        u_xlat45 = ((-(x_706) * x_708) + vec2<f32>(x_710.x, x_710.y));
        let x_713 : vec4<f32> = u_xlat5;
        let x_715 : vec2<f32> = max(vec2<f32>(x_713.x, x_713.y), vec2<f32>(0.0f, 0.0f));
        let x_716 : vec4<f32> = u_xlat5;
        u_xlat5 = vec4<f32>(x_715.x, x_715.y, x_716.z, x_716.w);
        let x_718 : vec4<f32> = u_xlat5;
        let x_721 : vec4<f32> = u_xlat5;
        let x_724 : vec4<f32> = u_xlat6;
        let x_726 : vec2<f32> = ((-(vec2<f32>(x_718.x, x_718.y)) * vec2<f32>(x_721.x, x_721.y)) + vec2<f32>(x_724.y, x_724.w));
        let x_727 : vec4<f32> = u_xlat5;
        u_xlat5 = vec4<f32>(x_726.x, x_726.y, x_727.z, x_727.w);
        let x_729 : vec2<f32> = u_xlat45;
        u_xlat45 = (x_729 + vec2<f32>(1.0f, 1.0f));
        let x_731 : vec4<f32> = u_xlat5;
        let x_733 : vec2<f32> = (vec2<f32>(x_731.x, x_731.y) + vec2<f32>(1.0f, 1.0f));
        let x_734 : vec4<f32> = u_xlat5;
        u_xlat5 = vec4<f32>(x_733.x, x_733.y, x_734.z, x_734.w);
        let x_737 : vec4<f32> = u_xlat6;
        let x_741 : vec2<f32> = (vec2<f32>(x_737.x, x_737.z) * vec2<f32>(0.159999996f, 0.159999996f));
        let x_742 : vec4<f32> = u_xlat8;
        u_xlat8 = vec4<f32>(x_741.x, x_741.y, x_742.z, x_742.w);
        let x_745 : vec4<f32> = u_xlat7;
        let x_747 : vec2<f32> = (vec2<f32>(x_745.x, x_745.y) * vec2<f32>(0.159999996f, 0.159999996f));
        let x_748 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_747.x, x_747.y, x_748.z, x_748.w);
        let x_750 : vec2<f32> = u_xlat45;
        let x_751 : vec2<f32> = (x_750 * vec2<f32>(0.159999996f, 0.159999996f));
        let x_752 : vec4<f32> = u_xlat7;
        u_xlat7 = vec4<f32>(x_751.x, x_751.y, x_752.z, x_752.w);
        let x_755 : vec4<f32> = u_xlat5;
        let x_757 : vec2<f32> = (vec2<f32>(x_755.x, x_755.y) * vec2<f32>(0.159999996f, 0.159999996f));
        let x_758 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_757.x, x_757.y, x_758.z, x_758.w);
        let x_760 : vec4<f32> = u_xlat6;
        let x_762 : vec2<f32> = (vec2<f32>(x_760.y, x_760.w) * vec2<f32>(0.159999996f, 0.159999996f));
        let x_763 : vec4<f32> = u_xlat5;
        u_xlat5 = vec4<f32>(x_762.x, x_762.y, x_763.z, x_763.w);
        let x_766 : f32 = u_xlat7.x;
        u_xlat8.z = x_766;
        let x_769 : f32 = u_xlat5.x;
        u_xlat8.w = x_769;
        let x_772 : f32 = u_xlat10.x;
        u_xlat9.z = x_772;
        let x_775 : f32 = u_xlat43.x;
        u_xlat9.w = x_775;
        let x_777 : vec4<f32> = u_xlat8;
        let x_779 : vec4<f32> = u_xlat9;
        u_xlat6 = (vec4<f32>(x_777.z, x_777.w, x_777.x, x_777.z) + vec4<f32>(x_779.z, x_779.w, x_779.x, x_779.z));
        let x_783 : f32 = u_xlat8.y;
        u_xlat7.z = x_783;
        let x_786 : f32 = u_xlat5.y;
        u_xlat7.w = x_786;
        let x_789 : f32 = u_xlat9.y;
        u_xlat10.z = x_789;
        let x_792 : f32 = u_xlat43.y;
        u_xlat10.w = x_792;
        let x_794 : vec4<f32> = u_xlat7;
        let x_796 : vec4<f32> = u_xlat10;
        let x_798 : vec3<f32> = (vec3<f32>(x_794.z, x_794.y, x_794.w) + vec3<f32>(x_796.z, x_796.y, x_796.w));
        let x_799 : vec4<f32> = u_xlat5;
        u_xlat5 = vec4<f32>(x_798.x, x_798.y, x_798.z, x_799.w);
        let x_801 : vec4<f32> = u_xlat9;
        let x_803 : vec4<f32> = u_xlat6;
        let x_805 : vec3<f32> = (vec3<f32>(x_801.x, x_801.z, x_801.w) / vec3<f32>(x_803.z, x_803.w, x_803.y));
        let x_806 : vec4<f32> = u_xlat7;
        u_xlat7 = vec4<f32>(x_805.x, x_805.y, x_805.z, x_806.w);
        let x_808 : vec4<f32> = u_xlat7;
        let x_814 : vec3<f32> = (vec3<f32>(x_808.x, x_808.y, x_808.z) + vec3<f32>(-2.5f, -0.5f, 1.5f));
        let x_815 : vec4<f32> = u_xlat7;
        u_xlat7 = vec4<f32>(x_814.x, x_814.y, x_814.z, x_815.w);
        let x_817 : vec4<f32> = u_xlat10;
        let x_819 : vec4<f32> = u_xlat5;
        let x_821 : vec3<f32> = (vec3<f32>(x_817.z, x_817.y, x_817.w) / vec3<f32>(x_819.x, x_819.y, x_819.z));
        let x_822 : vec4<f32> = u_xlat8;
        u_xlat8 = vec4<f32>(x_821.x, x_821.y, x_821.z, x_822.w);
        let x_824 : vec4<f32> = u_xlat8;
        let x_826 : vec3<f32> = (vec3<f32>(x_824.x, x_824.y, x_824.z) + vec3<f32>(-2.5f, -0.5f, 1.5f));
        let x_827 : vec4<f32> = u_xlat8;
        u_xlat8 = vec4<f32>(x_826.x, x_826.y, x_826.z, x_827.w);
        let x_829 : vec4<f32> = u_xlat7;
        let x_832 : vec4<f32> = x_364.x_MainLightShadowmapSize;
        let x_834 : vec3<f32> = (vec3<f32>(x_829.y, x_829.x, x_829.z) * vec3<f32>(x_832.x, x_832.x, x_832.x));
        let x_835 : vec4<f32> = u_xlat7;
        u_xlat7 = vec4<f32>(x_834.x, x_834.y, x_834.z, x_835.w);
        let x_837 : vec4<f32> = u_xlat8;
        let x_840 : vec4<f32> = x_364.x_MainLightShadowmapSize;
        let x_842 : vec3<f32> = (vec3<f32>(x_837.x, x_837.y, x_837.z) * vec3<f32>(x_840.y, x_840.y, x_840.y));
        let x_843 : vec4<f32> = u_xlat8;
        u_xlat8 = vec4<f32>(x_842.x, x_842.y, x_842.z, x_843.w);
        let x_846 : f32 = u_xlat8.x;
        u_xlat7.w = x_846;
        let x_848 : vec2<f32> = u_xlat23;
        let x_851 : vec4<f32> = x_364.x_MainLightShadowmapSize;
        let x_854 : vec4<f32> = u_xlat7;
        u_xlat9 = ((vec4<f32>(x_848.x, x_848.y, x_848.x, x_848.y) * vec4<f32>(x_851.x, x_851.y, x_851.x, x_851.y)) + vec4<f32>(x_854.y, x_854.w, x_854.x, x_854.w));
        let x_857 : vec2<f32> = u_xlat23;
        let x_859 : vec4<f32> = x_364.x_MainLightShadowmapSize;
        let x_862 : vec4<f32> = u_xlat7;
        let x_864 : vec2<f32> = ((x_857 * vec2<f32>(x_859.x, x_859.y)) + vec2<f32>(x_862.z, x_862.w));
        let x_865 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_864.x, x_864.y, x_865.z, x_865.w);
        let x_868 : f32 = u_xlat7.y;
        u_xlat8.w = x_868;
        let x_870 : vec4<f32> = u_xlat8;
        let x_871 : vec2<f32> = vec2<f32>(x_870.y, x_870.z);
        let x_872 : vec4<f32> = u_xlat7;
        u_xlat7 = vec4<f32>(x_872.x, x_871.x, x_872.z, x_871.y);
        let x_875 : vec2<f32> = u_xlat23;
        let x_878 : vec4<f32> = x_364.x_MainLightShadowmapSize;
        let x_881 : vec4<f32> = u_xlat7;
        u_xlat11 = ((vec4<f32>(x_875.x, x_875.y, x_875.x, x_875.y) * vec4<f32>(x_878.x, x_878.y, x_878.x, x_878.y)) + vec4<f32>(x_881.x, x_881.y, x_881.z, x_881.y));
        let x_884 : vec2<f32> = u_xlat23;
        let x_887 : vec4<f32> = x_364.x_MainLightShadowmapSize;
        let x_890 : vec4<f32> = u_xlat8;
        u_xlat8 = ((vec4<f32>(x_884.x, x_884.y, x_884.x, x_884.y) * vec4<f32>(x_887.x, x_887.y, x_887.x, x_887.y)) + vec4<f32>(x_890.w, x_890.y, x_890.w, x_890.z));
        let x_893 : vec2<f32> = u_xlat23;
        let x_896 : vec4<f32> = x_364.x_MainLightShadowmapSize;
        let x_899 : vec4<f32> = u_xlat7;
        u_xlat7 = ((vec4<f32>(x_893.x, x_893.y, x_893.x, x_893.y) * vec4<f32>(x_896.x, x_896.y, x_896.x, x_896.y)) + vec4<f32>(x_899.x, x_899.w, x_899.z, x_899.w));
        let x_903 : vec4<f32> = u_xlat5;
        let x_905 : vec4<f32> = u_xlat6;
        u_xlat12 = (vec4<f32>(x_903.x, x_903.x, x_903.x, x_903.y) * vec4<f32>(x_905.z, x_905.w, x_905.y, x_905.z));
        let x_909 : vec4<f32> = u_xlat5;
        let x_911 : vec4<f32> = u_xlat6;
        u_xlat13 = (vec4<f32>(x_909.y, x_909.y, x_909.z, x_909.z) * x_911);
        let x_914 : f32 = u_xlat5.z;
        let x_916 : f32 = u_xlat6.y;
        u_xlat23.x = (x_914 * x_916);
        let x_920 : vec4<f32> = u_xlat9;
        let x_921 : vec2<f32> = vec2<f32>(x_920.x, x_920.y);
        let x_923 : f32 = u_xlat22.z;
        txVec4 = vec3<f32>(x_921.x, x_921.y, x_923);
        let x_931 : vec3<f32> = txVec4;
        let x_933 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_931.xy, x_931.z);
        u_xlat42.x = x_933;
        let x_936 : vec4<f32> = u_xlat9;
        let x_937 : vec2<f32> = vec2<f32>(x_936.z, x_936.w);
        let x_939 : f32 = u_xlat22.z;
        txVec5 = vec3<f32>(x_937.x, x_937.y, x_939);
        let x_947 : vec3<f32> = txVec5;
        let x_949 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_947.xy, x_947.z);
        u_xlat61 = x_949;
        let x_950 : f32 = u_xlat61;
        let x_952 : f32 = u_xlat12.y;
        u_xlat61 = (x_950 * x_952);
        let x_955 : f32 = u_xlat12.x;
        let x_957 : f32 = u_xlat42.x;
        let x_959 : f32 = u_xlat61;
        u_xlat42.x = ((x_955 * x_957) + x_959);
        let x_963 : vec4<f32> = u_xlat10;
        let x_964 : vec2<f32> = vec2<f32>(x_963.x, x_963.y);
        let x_966 : f32 = u_xlat22.z;
        txVec6 = vec3<f32>(x_964.x, x_964.y, x_966);
        let x_973 : vec3<f32> = txVec6;
        let x_975 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_973.xy, x_973.z);
        u_xlat61 = x_975;
        let x_977 : f32 = u_xlat12.z;
        let x_978 : f32 = u_xlat61;
        let x_981 : f32 = u_xlat42.x;
        u_xlat42.x = ((x_977 * x_978) + x_981);
        let x_985 : vec4<f32> = u_xlat8;
        let x_986 : vec2<f32> = vec2<f32>(x_985.x, x_985.y);
        let x_988 : f32 = u_xlat22.z;
        txVec7 = vec3<f32>(x_986.x, x_986.y, x_988);
        let x_995 : vec3<f32> = txVec7;
        let x_997 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_995.xy, x_995.z);
        u_xlat61 = x_997;
        let x_999 : f32 = u_xlat12.w;
        let x_1000 : f32 = u_xlat61;
        let x_1003 : f32 = u_xlat42.x;
        u_xlat42.x = ((x_999 * x_1000) + x_1003);
        let x_1007 : vec4<f32> = u_xlat11;
        let x_1008 : vec2<f32> = vec2<f32>(x_1007.x, x_1007.y);
        let x_1010 : f32 = u_xlat22.z;
        txVec8 = vec3<f32>(x_1008.x, x_1008.y, x_1010);
        let x_1017 : vec3<f32> = txVec8;
        let x_1019 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1017.xy, x_1017.z);
        u_xlat61 = x_1019;
        let x_1021 : f32 = u_xlat13.x;
        let x_1022 : f32 = u_xlat61;
        let x_1025 : f32 = u_xlat42.x;
        u_xlat42.x = ((x_1021 * x_1022) + x_1025);
        let x_1029 : vec4<f32> = u_xlat11;
        let x_1030 : vec2<f32> = vec2<f32>(x_1029.z, x_1029.w);
        let x_1032 : f32 = u_xlat22.z;
        txVec9 = vec3<f32>(x_1030.x, x_1030.y, x_1032);
        let x_1039 : vec3<f32> = txVec9;
        let x_1041 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1039.xy, x_1039.z);
        u_xlat61 = x_1041;
        let x_1043 : f32 = u_xlat13.y;
        let x_1044 : f32 = u_xlat61;
        let x_1047 : f32 = u_xlat42.x;
        u_xlat42.x = ((x_1043 * x_1044) + x_1047);
        let x_1051 : vec4<f32> = u_xlat8;
        let x_1052 : vec2<f32> = vec2<f32>(x_1051.z, x_1051.w);
        let x_1054 : f32 = u_xlat22.z;
        txVec10 = vec3<f32>(x_1052.x, x_1052.y, x_1054);
        let x_1061 : vec3<f32> = txVec10;
        let x_1063 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1061.xy, x_1061.z);
        u_xlat61 = x_1063;
        let x_1065 : f32 = u_xlat13.z;
        let x_1066 : f32 = u_xlat61;
        let x_1069 : f32 = u_xlat42.x;
        u_xlat42.x = ((x_1065 * x_1066) + x_1069);
        let x_1073 : vec4<f32> = u_xlat7;
        let x_1074 : vec2<f32> = vec2<f32>(x_1073.x, x_1073.y);
        let x_1076 : f32 = u_xlat22.z;
        txVec11 = vec3<f32>(x_1074.x, x_1074.y, x_1076);
        let x_1083 : vec3<f32> = txVec11;
        let x_1085 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1083.xy, x_1083.z);
        u_xlat61 = x_1085;
        let x_1087 : f32 = u_xlat13.w;
        let x_1088 : f32 = u_xlat61;
        let x_1091 : f32 = u_xlat42.x;
        u_xlat42.x = ((x_1087 * x_1088) + x_1091);
        let x_1095 : vec4<f32> = u_xlat7;
        let x_1096 : vec2<f32> = vec2<f32>(x_1095.z, x_1095.w);
        let x_1098 : f32 = u_xlat22.z;
        txVec12 = vec3<f32>(x_1096.x, x_1096.y, x_1098);
        let x_1105 : vec3<f32> = txVec12;
        let x_1107 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1105.xy, x_1105.z);
        u_xlat61 = x_1107;
        let x_1109 : f32 = u_xlat23.x;
        let x_1110 : f32 = u_xlat61;
        let x_1113 : f32 = u_xlat42.x;
        u_xlat4.x = ((x_1109 * x_1110) + x_1113);
      } else {
        let x_1117 : vec3<f32> = u_xlat22;
        let x_1120 : vec4<f32> = x_364.x_MainLightShadowmapSize;
        u_xlat23 = ((vec2<f32>(x_1117.x, x_1117.y) * vec2<f32>(x_1120.z, x_1120.w)) + vec2<f32>(0.5f, 0.5f));
        let x_1124 : vec2<f32> = u_xlat23;
        u_xlat23 = floor(x_1124);
        let x_1126 : vec3<f32> = u_xlat22;
        let x_1129 : vec4<f32> = x_364.x_MainLightShadowmapSize;
        let x_1132 : vec2<f32> = u_xlat23;
        let x_1134 : vec2<f32> = ((vec2<f32>(x_1126.x, x_1126.y) * vec2<f32>(x_1129.z, x_1129.w)) + -(x_1132));
        let x_1135 : vec4<f32> = u_xlat5;
        u_xlat5 = vec4<f32>(x_1134.x, x_1134.y, x_1135.z, x_1135.w);
        let x_1137 : vec4<f32> = u_xlat5;
        u_xlat6 = (vec4<f32>(x_1137.x, x_1137.x, x_1137.y, x_1137.y) + vec4<f32>(0.5f, 1.0f, 0.5f, 1.0f));
        let x_1140 : vec4<f32> = u_xlat6;
        let x_1142 : vec4<f32> = u_xlat6;
        u_xlat7 = (vec4<f32>(x_1140.x, x_1140.x, x_1140.z, x_1140.z) * vec4<f32>(x_1142.x, x_1142.x, x_1142.z, x_1142.z));
        let x_1145 : vec4<f32> = u_xlat7;
        let x_1149 : vec2<f32> = (vec2<f32>(x_1145.y, x_1145.w) * vec2<f32>(0.040816002f, 0.040816002f));
        let x_1150 : vec4<f32> = u_xlat8;
        u_xlat8 = vec4<f32>(x_1150.x, x_1149.x, x_1150.z, x_1149.y);
        let x_1152 : vec4<f32> = u_xlat7;
        let x_1155 : vec4<f32> = u_xlat5;
        u_xlat43 = ((vec2<f32>(x_1152.x, x_1152.z) * vec2<f32>(0.5f, 0.5f)) + -(vec2<f32>(x_1155.x, x_1155.y)));
        let x_1159 : vec4<f32> = u_xlat5;
        let x_1162 : vec2<f32> = (-(vec2<f32>(x_1159.x, x_1159.y)) + vec2<f32>(1.0f, 1.0f));
        let x_1163 : vec4<f32> = u_xlat6;
        u_xlat6 = vec4<f32>(x_1162.x, x_1163.y, x_1162.y, x_1163.w);
        let x_1165 : vec4<f32> = u_xlat5;
        let x_1167 : vec2<f32> = min(vec2<f32>(x_1165.x, x_1165.y), vec2<f32>(0.0f, 0.0f));
        let x_1168 : vec4<f32> = u_xlat7;
        u_xlat7 = vec4<f32>(x_1167.x, x_1167.y, x_1168.z, x_1168.w);
        let x_1170 : vec4<f32> = u_xlat7;
        let x_1173 : vec4<f32> = u_xlat7;
        let x_1176 : vec4<f32> = u_xlat6;
        let x_1178 : vec2<f32> = ((-(vec2<f32>(x_1170.x, x_1170.y)) * vec2<f32>(x_1173.x, x_1173.y)) + vec2<f32>(x_1176.x, x_1176.z));
        let x_1179 : vec4<f32> = u_xlat6;
        u_xlat6 = vec4<f32>(x_1178.x, x_1179.y, x_1178.y, x_1179.w);
        let x_1181 : vec4<f32> = u_xlat5;
        let x_1183 : vec2<f32> = max(vec2<f32>(x_1181.x, x_1181.y), vec2<f32>(0.0f, 0.0f));
        let x_1184 : vec4<f32> = u_xlat7;
        u_xlat7 = vec4<f32>(x_1183.x, x_1183.y, x_1184.z, x_1184.w);
        let x_1186 : vec4<f32> = u_xlat7;
        let x_1189 : vec4<f32> = u_xlat7;
        let x_1192 : vec4<f32> = u_xlat6;
        let x_1194 : vec2<f32> = ((-(vec2<f32>(x_1186.x, x_1186.y)) * vec2<f32>(x_1189.x, x_1189.y)) + vec2<f32>(x_1192.y, x_1192.w));
        let x_1195 : vec4<f32> = u_xlat6;
        u_xlat6 = vec4<f32>(x_1195.x, x_1194.x, x_1195.z, x_1194.y);
        let x_1197 : vec4<f32> = u_xlat6;
        u_xlat6 = (x_1197 + vec4<f32>(2.0f, 2.0f, 2.0f, 2.0f));
        let x_1201 : f32 = u_xlat6.y;
        u_xlat7.z = (x_1201 * 0.081632003f);
        let x_1205 : vec2<f32> = u_xlat43;
        let x_1208 : vec2<f32> = (vec2<f32>(x_1205.y, x_1205.x) * vec2<f32>(0.081632003f, 0.081632003f));
        let x_1209 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_1208.x, x_1208.y, x_1209.z, x_1209.w);
        let x_1211 : vec4<f32> = u_xlat6;
        u_xlat43 = (vec2<f32>(x_1211.x, x_1211.z) * vec2<f32>(0.081632003f, 0.081632003f));
        let x_1215 : f32 = u_xlat6.w;
        u_xlat9.z = (x_1215 * 0.081632003f);
        let x_1219 : f32 = u_xlat9.y;
        u_xlat7.x = x_1219;
        let x_1221 : vec4<f32> = u_xlat5;
        let x_1228 : vec2<f32> = ((vec2<f32>(x_1221.x, x_1221.x) * vec2<f32>(-0.081632003f, 0.081632003f)) + vec2<f32>(0.163264006f, 0.081632003f));
        let x_1229 : vec4<f32> = u_xlat7;
        u_xlat7 = vec4<f32>(x_1229.x, x_1228.x, x_1229.z, x_1228.y);
        let x_1231 : vec4<f32> = u_xlat5;
        let x_1235 : vec2<f32> = ((vec2<f32>(x_1231.x, x_1231.x) * vec2<f32>(-0.081632003f, 0.081632003f)) + vec2<f32>(0.081632003f, 0.163264006f));
        let x_1236 : vec4<f32> = u_xlat6;
        u_xlat6 = vec4<f32>(x_1235.x, x_1236.y, x_1235.y, x_1236.w);
        let x_1239 : f32 = u_xlat43.x;
        u_xlat6.y = x_1239;
        let x_1242 : f32 = u_xlat8.y;
        u_xlat6.w = x_1242;
        let x_1244 : vec4<f32> = u_xlat6;
        let x_1245 : vec4<f32> = u_xlat7;
        u_xlat7 = (x_1244 + x_1245);
        let x_1247 : vec4<f32> = u_xlat5;
        let x_1250 : vec2<f32> = ((vec2<f32>(x_1247.y, x_1247.y) * vec2<f32>(-0.081632003f, 0.081632003f)) + vec2<f32>(0.163264006f, 0.081632003f));
        let x_1251 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_1251.x, x_1250.x, x_1251.z, x_1250.y);
        let x_1253 : vec4<f32> = u_xlat5;
        let x_1256 : vec2<f32> = ((vec2<f32>(x_1253.y, x_1253.y) * vec2<f32>(-0.081632003f, 0.081632003f)) + vec2<f32>(0.081632003f, 0.163264006f));
        let x_1257 : vec4<f32> = u_xlat8;
        u_xlat8 = vec4<f32>(x_1256.x, x_1257.y, x_1256.y, x_1257.w);
        let x_1260 : f32 = u_xlat43.y;
        u_xlat8.y = x_1260;
        let x_1262 : vec4<f32> = u_xlat8;
        let x_1263 : vec4<f32> = u_xlat9;
        u_xlat5 = (x_1262 + x_1263);
        let x_1265 : vec4<f32> = u_xlat6;
        let x_1266 : vec4<f32> = u_xlat7;
        u_xlat6 = (x_1265 / x_1266);
        let x_1268 : vec4<f32> = u_xlat6;
        u_xlat6 = (x_1268 + vec4<f32>(-3.5f, -1.5f, 0.5f, 2.5f));
        let x_1274 : vec4<f32> = u_xlat8;
        let x_1275 : vec4<f32> = u_xlat5;
        u_xlat8 = (x_1274 / x_1275);
        let x_1277 : vec4<f32> = u_xlat8;
        u_xlat8 = (x_1277 + vec4<f32>(-3.5f, -1.5f, 0.5f, 2.5f));
        let x_1279 : vec4<f32> = u_xlat6;
        let x_1282 : vec4<f32> = x_364.x_MainLightShadowmapSize;
        u_xlat6 = (vec4<f32>(x_1279.w, x_1279.x, x_1279.y, x_1279.z) * vec4<f32>(x_1282.x, x_1282.x, x_1282.x, x_1282.x));
        let x_1285 : vec4<f32> = u_xlat8;
        let x_1288 : vec4<f32> = x_364.x_MainLightShadowmapSize;
        u_xlat8 = (vec4<f32>(x_1285.x, x_1285.w, x_1285.y, x_1285.z) * vec4<f32>(x_1288.y, x_1288.y, x_1288.y, x_1288.y));
        let x_1291 : vec4<f32> = u_xlat6;
        let x_1292 : vec3<f32> = vec3<f32>(x_1291.y, x_1291.z, x_1291.w);
        let x_1293 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_1292.x, x_1293.y, x_1292.y, x_1292.z);
        let x_1296 : f32 = u_xlat8.x;
        u_xlat9.y = x_1296;
        let x_1298 : vec2<f32> = u_xlat23;
        let x_1301 : vec4<f32> = x_364.x_MainLightShadowmapSize;
        let x_1304 : vec4<f32> = u_xlat9;
        u_xlat10 = ((vec4<f32>(x_1298.x, x_1298.y, x_1298.x, x_1298.y) * vec4<f32>(x_1301.x, x_1301.y, x_1301.x, x_1301.y)) + vec4<f32>(x_1304.x, x_1304.y, x_1304.z, x_1304.y));
        let x_1307 : vec2<f32> = u_xlat23;
        let x_1309 : vec4<f32> = x_364.x_MainLightShadowmapSize;
        let x_1312 : vec4<f32> = u_xlat9;
        let x_1314 : vec2<f32> = ((x_1307 * vec2<f32>(x_1309.x, x_1309.y)) + vec2<f32>(x_1312.w, x_1312.y));
        let x_1315 : vec4<f32> = u_xlat11;
        u_xlat11 = vec4<f32>(x_1314.x, x_1314.y, x_1315.z, x_1315.w);
        let x_1318 : f32 = u_xlat9.y;
        u_xlat6.y = x_1318;
        let x_1321 : f32 = u_xlat8.z;
        u_xlat9.y = x_1321;
        let x_1323 : vec2<f32> = u_xlat23;
        let x_1326 : vec4<f32> = x_364.x_MainLightShadowmapSize;
        let x_1329 : vec4<f32> = u_xlat9;
        u_xlat12 = ((vec4<f32>(x_1323.x, x_1323.y, x_1323.x, x_1323.y) * vec4<f32>(x_1326.x, x_1326.y, x_1326.x, x_1326.y)) + vec4<f32>(x_1329.x, x_1329.y, x_1329.z, x_1329.y));
        let x_1333 : vec2<f32> = u_xlat23;
        let x_1335 : vec4<f32> = x_364.x_MainLightShadowmapSize;
        let x_1338 : vec4<f32> = u_xlat9;
        u_xlat49 = ((x_1333 * vec2<f32>(x_1335.x, x_1335.y)) + vec2<f32>(x_1338.w, x_1338.y));
        let x_1342 : f32 = u_xlat9.y;
        u_xlat6.z = x_1342;
        let x_1344 : vec2<f32> = u_xlat23;
        let x_1347 : vec4<f32> = x_364.x_MainLightShadowmapSize;
        let x_1350 : vec4<f32> = u_xlat6;
        u_xlat13 = ((vec4<f32>(x_1344.x, x_1344.y, x_1344.x, x_1344.y) * vec4<f32>(x_1347.x, x_1347.y, x_1347.x, x_1347.y)) + vec4<f32>(x_1350.x, x_1350.y, x_1350.x, x_1350.z));
        let x_1354 : f32 = u_xlat8.w;
        u_xlat9.y = x_1354;
        let x_1357 : vec2<f32> = u_xlat23;
        let x_1360 : vec4<f32> = x_364.x_MainLightShadowmapSize;
        let x_1363 : vec4<f32> = u_xlat9;
        u_xlat14 = ((vec4<f32>(x_1357.x, x_1357.y, x_1357.x, x_1357.y) * vec4<f32>(x_1360.x, x_1360.y, x_1360.x, x_1360.y)) + vec4<f32>(x_1363.x, x_1363.y, x_1363.z, x_1363.y));
        let x_1367 : vec2<f32> = u_xlat23;
        let x_1369 : vec4<f32> = x_364.x_MainLightShadowmapSize;
        let x_1372 : vec4<f32> = u_xlat9;
        u_xlat25 = ((x_1367 * vec2<f32>(x_1369.x, x_1369.y)) + vec2<f32>(x_1372.w, x_1372.y));
        let x_1376 : f32 = u_xlat9.y;
        u_xlat6.w = x_1376;
        let x_1379 : vec2<f32> = u_xlat23;
        let x_1381 : vec4<f32> = x_364.x_MainLightShadowmapSize;
        let x_1384 : vec4<f32> = u_xlat6;
        u_xlat15 = ((x_1379 * vec2<f32>(x_1381.x, x_1381.y)) + vec2<f32>(x_1384.x, x_1384.w));
        let x_1387 : vec4<f32> = u_xlat9;
        let x_1388 : vec3<f32> = vec3<f32>(x_1387.x, x_1387.z, x_1387.w);
        let x_1389 : vec4<f32> = u_xlat8;
        u_xlat8 = vec4<f32>(x_1388.x, x_1389.y, x_1388.y, x_1388.z);
        let x_1391 : vec2<f32> = u_xlat23;
        let x_1394 : vec4<f32> = x_364.x_MainLightShadowmapSize;
        let x_1397 : vec4<f32> = u_xlat8;
        u_xlat9 = ((vec4<f32>(x_1391.x, x_1391.y, x_1391.x, x_1391.y) * vec4<f32>(x_1394.x, x_1394.y, x_1394.x, x_1394.y)) + vec4<f32>(x_1397.x, x_1397.y, x_1397.z, x_1397.y));
        let x_1401 : vec2<f32> = u_xlat23;
        let x_1403 : vec4<f32> = x_364.x_MainLightShadowmapSize;
        let x_1406 : vec4<f32> = u_xlat8;
        u_xlat46 = ((x_1401 * vec2<f32>(x_1403.x, x_1403.y)) + vec2<f32>(x_1406.w, x_1406.y));
        let x_1410 : f32 = u_xlat6.x;
        u_xlat8.x = x_1410;
        let x_1412 : vec2<f32> = u_xlat23;
        let x_1414 : vec4<f32> = x_364.x_MainLightShadowmapSize;
        let x_1417 : vec4<f32> = u_xlat8;
        u_xlat23 = ((x_1412 * vec2<f32>(x_1414.x, x_1414.y)) + vec2<f32>(x_1417.x, x_1417.y));
        let x_1421 : vec4<f32> = u_xlat5;
        let x_1423 : vec4<f32> = u_xlat7;
        u_xlat16 = (vec4<f32>(x_1421.x, x_1421.x, x_1421.x, x_1421.x) * x_1423);
        let x_1426 : vec4<f32> = u_xlat5;
        let x_1428 : vec4<f32> = u_xlat7;
        u_xlat17 = (vec4<f32>(x_1426.y, x_1426.y, x_1426.y, x_1426.y) * x_1428);
        let x_1431 : vec4<f32> = u_xlat5;
        let x_1433 : vec4<f32> = u_xlat7;
        u_xlat18 = (vec4<f32>(x_1431.z, x_1431.z, x_1431.z, x_1431.z) * x_1433);
        let x_1435 : vec4<f32> = u_xlat5;
        let x_1437 : vec4<f32> = u_xlat7;
        u_xlat5 = (vec4<f32>(x_1435.w, x_1435.w, x_1435.w, x_1435.w) * x_1437);
        let x_1440 : vec4<f32> = u_xlat10;
        let x_1441 : vec2<f32> = vec2<f32>(x_1440.x, x_1440.y);
        let x_1443 : f32 = u_xlat22.z;
        txVec13 = vec3<f32>(x_1441.x, x_1441.y, x_1443);
        let x_1450 : vec3<f32> = txVec13;
        let x_1452 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1450.xy, x_1450.z);
        u_xlat61 = x_1452;
        let x_1454 : vec4<f32> = u_xlat10;
        let x_1455 : vec2<f32> = vec2<f32>(x_1454.z, x_1454.w);
        let x_1457 : f32 = u_xlat22.z;
        txVec14 = vec3<f32>(x_1455.x, x_1455.y, x_1457);
        let x_1464 : vec3<f32> = txVec14;
        let x_1466 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1464.xy, x_1464.z);
        u_xlat6.x = x_1466;
        let x_1469 : f32 = u_xlat6.x;
        let x_1471 : f32 = u_xlat16.y;
        u_xlat6.x = (x_1469 * x_1471);
        let x_1475 : f32 = u_xlat16.x;
        let x_1476 : f32 = u_xlat61;
        let x_1479 : f32 = u_xlat6.x;
        u_xlat61 = ((x_1475 * x_1476) + x_1479);
        let x_1482 : vec4<f32> = u_xlat11;
        let x_1483 : vec2<f32> = vec2<f32>(x_1482.x, x_1482.y);
        let x_1485 : f32 = u_xlat22.z;
        txVec15 = vec3<f32>(x_1483.x, x_1483.y, x_1485);
        let x_1492 : vec3<f32> = txVec15;
        let x_1494 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1492.xy, x_1492.z);
        u_xlat6.x = x_1494;
        let x_1497 : f32 = u_xlat16.z;
        let x_1499 : f32 = u_xlat6.x;
        let x_1501 : f32 = u_xlat61;
        u_xlat61 = ((x_1497 * x_1499) + x_1501);
        let x_1504 : vec4<f32> = u_xlat13;
        let x_1505 : vec2<f32> = vec2<f32>(x_1504.x, x_1504.y);
        let x_1507 : f32 = u_xlat22.z;
        txVec16 = vec3<f32>(x_1505.x, x_1505.y, x_1507);
        let x_1514 : vec3<f32> = txVec16;
        let x_1516 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1514.xy, x_1514.z);
        u_xlat6.x = x_1516;
        let x_1519 : f32 = u_xlat16.w;
        let x_1521 : f32 = u_xlat6.x;
        let x_1523 : f32 = u_xlat61;
        u_xlat61 = ((x_1519 * x_1521) + x_1523);
        let x_1526 : vec4<f32> = u_xlat12;
        let x_1527 : vec2<f32> = vec2<f32>(x_1526.x, x_1526.y);
        let x_1529 : f32 = u_xlat22.z;
        txVec17 = vec3<f32>(x_1527.x, x_1527.y, x_1529);
        let x_1536 : vec3<f32> = txVec17;
        let x_1538 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1536.xy, x_1536.z);
        u_xlat6.x = x_1538;
        let x_1541 : f32 = u_xlat17.x;
        let x_1543 : f32 = u_xlat6.x;
        let x_1545 : f32 = u_xlat61;
        u_xlat61 = ((x_1541 * x_1543) + x_1545);
        let x_1548 : vec4<f32> = u_xlat12;
        let x_1549 : vec2<f32> = vec2<f32>(x_1548.z, x_1548.w);
        let x_1551 : f32 = u_xlat22.z;
        txVec18 = vec3<f32>(x_1549.x, x_1549.y, x_1551);
        let x_1558 : vec3<f32> = txVec18;
        let x_1560 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1558.xy, x_1558.z);
        u_xlat6.x = x_1560;
        let x_1563 : f32 = u_xlat17.y;
        let x_1565 : f32 = u_xlat6.x;
        let x_1567 : f32 = u_xlat61;
        u_xlat61 = ((x_1563 * x_1565) + x_1567);
        let x_1570 : vec2<f32> = u_xlat49;
        let x_1572 : f32 = u_xlat22.z;
        txVec19 = vec3<f32>(x_1570.x, x_1570.y, x_1572);
        let x_1579 : vec3<f32> = txVec19;
        let x_1581 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1579.xy, x_1579.z);
        u_xlat6.x = x_1581;
        let x_1584 : f32 = u_xlat17.z;
        let x_1586 : f32 = u_xlat6.x;
        let x_1588 : f32 = u_xlat61;
        u_xlat61 = ((x_1584 * x_1586) + x_1588);
        let x_1591 : vec4<f32> = u_xlat13;
        let x_1592 : vec2<f32> = vec2<f32>(x_1591.z, x_1591.w);
        let x_1594 : f32 = u_xlat22.z;
        txVec20 = vec3<f32>(x_1592.x, x_1592.y, x_1594);
        let x_1601 : vec3<f32> = txVec20;
        let x_1603 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1601.xy, x_1601.z);
        u_xlat6.x = x_1603;
        let x_1606 : f32 = u_xlat17.w;
        let x_1608 : f32 = u_xlat6.x;
        let x_1610 : f32 = u_xlat61;
        u_xlat61 = ((x_1606 * x_1608) + x_1610);
        let x_1613 : vec4<f32> = u_xlat14;
        let x_1614 : vec2<f32> = vec2<f32>(x_1613.x, x_1613.y);
        let x_1616 : f32 = u_xlat22.z;
        txVec21 = vec3<f32>(x_1614.x, x_1614.y, x_1616);
        let x_1623 : vec3<f32> = txVec21;
        let x_1625 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1623.xy, x_1623.z);
        u_xlat6.x = x_1625;
        let x_1628 : f32 = u_xlat18.x;
        let x_1630 : f32 = u_xlat6.x;
        let x_1632 : f32 = u_xlat61;
        u_xlat61 = ((x_1628 * x_1630) + x_1632);
        let x_1635 : vec4<f32> = u_xlat14;
        let x_1636 : vec2<f32> = vec2<f32>(x_1635.z, x_1635.w);
        let x_1638 : f32 = u_xlat22.z;
        txVec22 = vec3<f32>(x_1636.x, x_1636.y, x_1638);
        let x_1645 : vec3<f32> = txVec22;
        let x_1647 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1645.xy, x_1645.z);
        u_xlat6.x = x_1647;
        let x_1650 : f32 = u_xlat18.y;
        let x_1652 : f32 = u_xlat6.x;
        let x_1654 : f32 = u_xlat61;
        u_xlat61 = ((x_1650 * x_1652) + x_1654);
        let x_1657 : vec2<f32> = u_xlat25;
        let x_1659 : f32 = u_xlat22.z;
        txVec23 = vec3<f32>(x_1657.x, x_1657.y, x_1659);
        let x_1666 : vec3<f32> = txVec23;
        let x_1668 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1666.xy, x_1666.z);
        u_xlat6.x = x_1668;
        let x_1671 : f32 = u_xlat18.z;
        let x_1673 : f32 = u_xlat6.x;
        let x_1675 : f32 = u_xlat61;
        u_xlat61 = ((x_1671 * x_1673) + x_1675);
        let x_1678 : vec2<f32> = u_xlat15;
        let x_1680 : f32 = u_xlat22.z;
        txVec24 = vec3<f32>(x_1678.x, x_1678.y, x_1680);
        let x_1687 : vec3<f32> = txVec24;
        let x_1689 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1687.xy, x_1687.z);
        u_xlat6.x = x_1689;
        let x_1692 : f32 = u_xlat18.w;
        let x_1694 : f32 = u_xlat6.x;
        let x_1696 : f32 = u_xlat61;
        u_xlat61 = ((x_1692 * x_1694) + x_1696);
        let x_1699 : vec4<f32> = u_xlat9;
        let x_1700 : vec2<f32> = vec2<f32>(x_1699.x, x_1699.y);
        let x_1702 : f32 = u_xlat22.z;
        txVec25 = vec3<f32>(x_1700.x, x_1700.y, x_1702);
        let x_1709 : vec3<f32> = txVec25;
        let x_1711 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1709.xy, x_1709.z);
        u_xlat6.x = x_1711;
        let x_1714 : f32 = u_xlat5.x;
        let x_1716 : f32 = u_xlat6.x;
        let x_1718 : f32 = u_xlat61;
        u_xlat61 = ((x_1714 * x_1716) + x_1718);
        let x_1721 : vec4<f32> = u_xlat9;
        let x_1722 : vec2<f32> = vec2<f32>(x_1721.z, x_1721.w);
        let x_1724 : f32 = u_xlat22.z;
        txVec26 = vec3<f32>(x_1722.x, x_1722.y, x_1724);
        let x_1731 : vec3<f32> = txVec26;
        let x_1733 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1731.xy, x_1731.z);
        u_xlat5.x = x_1733;
        let x_1736 : f32 = u_xlat5.y;
        let x_1738 : f32 = u_xlat5.x;
        let x_1740 : f32 = u_xlat61;
        u_xlat61 = ((x_1736 * x_1738) + x_1740);
        let x_1743 : vec2<f32> = u_xlat46;
        let x_1745 : f32 = u_xlat22.z;
        txVec27 = vec3<f32>(x_1743.x, x_1743.y, x_1745);
        let x_1752 : vec3<f32> = txVec27;
        let x_1754 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1752.xy, x_1752.z);
        u_xlat5.x = x_1754;
        let x_1757 : f32 = u_xlat5.z;
        let x_1759 : f32 = u_xlat5.x;
        let x_1761 : f32 = u_xlat61;
        u_xlat61 = ((x_1757 * x_1759) + x_1761);
        let x_1764 : vec2<f32> = u_xlat23;
        let x_1766 : f32 = u_xlat22.z;
        txVec28 = vec3<f32>(x_1764.x, x_1764.y, x_1766);
        let x_1773 : vec3<f32> = txVec28;
        let x_1775 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1773.xy, x_1773.z);
        u_xlat23.x = x_1775;
        let x_1778 : f32 = u_xlat5.w;
        let x_1780 : f32 = u_xlat23.x;
        let x_1782 : f32 = u_xlat61;
        u_xlat4.x = ((x_1778 * x_1780) + x_1782);
      }
    }
  } else {
    let x_1787 : vec3<f32> = u_xlat22;
    let x_1788 : vec2<f32> = vec2<f32>(x_1787.x, x_1787.y);
    let x_1790 : f32 = u_xlat22.z;
    txVec29 = vec3<f32>(x_1788.x, x_1788.y, x_1790);
    let x_1797 : vec3<f32> = txVec29;
    let x_1799 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1797.xy, x_1797.z);
    u_xlat4.x = x_1799;
  }
  let x_1802 : f32 = x_364.x_MainLightShadowParams.x;
  u_xlat22.x = (-(x_1802) + 1.0f);
  let x_1807 : f32 = u_xlat4.x;
  let x_1809 : f32 = x_364.x_MainLightShadowParams.x;
  let x_1812 : f32 = u_xlat22.x;
  u_xlat22.x = ((x_1807 * x_1809) + x_1812);
  let x_1817 : f32 = u_xlat22.z;
  u_xlatb41 = (0.0f >= x_1817);
  let x_1821 : f32 = u_xlat22.z;
  u_xlatb60 = (x_1821 >= 1.0f);
  let x_1823 : bool = u_xlatb60;
  let x_1824 : bool = u_xlatb41;
  u_xlatb41 = (x_1823 | x_1824);
  let x_1826 : bool = u_xlatb41;
  if (x_1826) {
    x_1827 = 1.0f;
  } else {
    let x_1832 : f32 = u_xlat22.x;
    x_1827 = x_1832;
  }
  let x_1833 : f32 = x_1827;
  u_xlat22.x = x_1833;
  let x_1836 : vec3<f32> = u_xlat0;
  let x_1839 : vec4<f32> = x_39.x_ScreenParams;
  u_xlat41 = (vec2<f32>(x_1836.x, x_1836.y) * vec2<f32>(x_1839.x, x_1839.y));
  let x_1842 : vec2<f32> = u_xlat41;
  let x_1844 : vec4<f32> = x_203.x_DitherPattern_TexelSize;
  u_xlat41 = (x_1842 * vec2<f32>(x_1844.x, x_1844.y));
  let x_1847 : f32 = u_xlat38;
  let x_1851 : vec2<f32> = (vec2<f32>(x_1847, x_1847) * vec2<f32>(20.0f, 0.25f));
  let x_1852 : vec4<f32> = u_xlat4;
  u_xlat4 = vec4<f32>(x_1851.x, x_1851.y, x_1852.z, x_1852.w);
  let x_1854 : vec4<f32> = u_xlat4;
  let x_1856 : vec3<f32> = vs_TEXCOORD2;
  let x_1858 : vec3<f32> = (vec3<f32>(x_1854.y, x_1854.y, x_1854.y) * -(x_1856));
  let x_1859 : vec4<f32> = u_xlat5;
  u_xlat5 = vec4<f32>(x_1858.x, x_1858.y, x_1858.z, x_1859.w);
  let x_1862 : f32 = x_39.x_Time.x;
  u_xlat6.x = fract(x_1862);
  let x_1866 : f32 = x_39.x_Time.z;
  u_xlat6.y = fract(-(x_1866));
  let x_1870 : vec2<f32> = u_xlat41;
  u_xlat42 = x_1870;
  u_xlat62 = 0.0f;
  u_xlatu_loop_1 = 0u;
  loop {
    let x_1878 : u32 = u_xlatu_loop_1;
    if ((x_1878 < 4u)) {
    } else {
      break;
    }
    let x_1881 : vec4<f32> = u_xlat6;
    let x_1883 : vec2<f32> = u_xlat42;
    u_xlat42 = (vec2<f32>(x_1881.x, x_1881.y) + x_1883);
    let x_1886 : u32 = u_xlatu_loop_1;
    u_xlat63 = f32(x_1886);
    let x_1888 : f32 = u_xlat63;
    let x_1891 : vec4<f32> = x_39.x_ScreenParams;
    let x_1894 : vec2<f32> = u_xlat42;
    let x_1895 : vec2<f32> = ((vec2<f32>(x_1888, x_1888) * vec2<f32>(x_1891.x, x_1891.y)) + x_1894);
    let x_1896 : vec4<f32> = u_xlat7;
    u_xlat7 = vec4<f32>(x_1895.x, x_1895.y, x_1896.z, x_1896.w);
    let x_1903 : vec4<f32> = u_xlat7;
    let x_1906 : f32 = x_39.x_GlobalMipBias.x;
    let x_1907 : vec4<f32> = textureSampleBias(x_DitherPattern, sampler_DitherPattern, vec2<f32>(x_1903.x, x_1903.y), x_1906);
    let x_1908 : vec3<f32> = vec3<f32>(x_1907.x, x_1907.y, x_1907.z);
    let x_1909 : vec4<f32> = u_xlat7;
    u_xlat7 = vec4<f32>(x_1908.x, x_1908.y, x_1908.z, x_1909.w);
    let x_1911 : vec4<f32> = u_xlat7;
    let x_1916 : vec3<f32> = ((vec3<f32>(x_1911.x, x_1911.z, x_1911.y) * vec3<f32>(2.0f, 2.0f, 2.0f)) + vec3<f32>(-1.0f, -1.0f, -1.0f));
    let x_1917 : vec4<f32> = u_xlat7;
    u_xlat7 = vec4<f32>(x_1916.x, x_1916.y, x_1916.z, x_1917.w);
    let x_1919 : vec4<f32> = u_xlat4;
    let x_1921 : vec4<f32> = u_xlat7;
    let x_1923 : vec3<f32> = (vec3<f32>(x_1919.y, x_1919.y, x_1919.y) * vec3<f32>(x_1921.x, x_1921.y, x_1921.z));
    let x_1924 : vec4<f32> = u_xlat7;
    u_xlat7 = vec4<f32>(x_1923.x, x_1923.y, x_1924.z, x_1923.z);
    let x_1926 : f32 = u_xlat63;
    let x_1928 : vec4<f32> = u_xlat7;
    let x_1930 : vec3<f32> = (vec3<f32>(x_1926, x_1926, x_1926) * vec3<f32>(x_1928.x, x_1928.y, x_1928.w));
    let x_1931 : vec4<f32> = u_xlat7;
    u_xlat7 = vec4<f32>(x_1930.x, x_1930.y, x_1931.z, x_1930.z);
    let x_1933 : vec4<f32> = u_xlat7;
    let x_1938 : vec3<f32> = vs_TEXCOORD1;
    let x_1939 : vec3<f32> = ((vec3<f32>(x_1933.x, x_1933.y, x_1933.w) * vec3<f32>(0.100000001f, 0.100000001f, 0.100000001f)) + x_1938);
    let x_1940 : vec4<f32> = u_xlat7;
    u_xlat7 = vec4<f32>(x_1939.x, x_1939.y, x_1940.z, x_1939.z);
    let x_1942 : f32 = u_xlat63;
    let x_1944 : f32 = u_xlat7.z;
    u_xlat63 = (x_1942 + x_1944);
    let x_1946 : vec4<f32> = u_xlat5;
    let x_1948 : f32 = u_xlat63;
    let x_1951 : vec4<f32> = u_xlat7;
    let x_1953 : vec3<f32> = ((vec3<f32>(x_1946.x, x_1946.y, x_1946.z) * vec3<f32>(x_1948, x_1948, x_1948)) + vec3<f32>(x_1951.x, x_1951.y, x_1951.w));
    let x_1954 : vec4<f32> = u_xlat7;
    u_xlat7 = vec4<f32>(x_1953.x, x_1953.y, x_1953.z, x_1954.w);
    let x_1956 : vec4<f32> = u_xlat7;
    let x_1959 : vec4<f32> = x_364.x_CascadeShadowSplitSpheres0;
    let x_1962 : vec3<f32> = (vec3<f32>(x_1956.x, x_1956.y, x_1956.z) + -(vec3<f32>(x_1959.x, x_1959.y, x_1959.z)));
    let x_1963 : vec4<f32> = u_xlat8;
    u_xlat8 = vec4<f32>(x_1962.x, x_1962.y, x_1962.z, x_1963.w);
    let x_1965 : vec4<f32> = u_xlat7;
    let x_1968 : vec4<f32> = x_364.x_CascadeShadowSplitSpheres1;
    let x_1971 : vec3<f32> = (vec3<f32>(x_1965.x, x_1965.y, x_1965.z) + -(vec3<f32>(x_1968.x, x_1968.y, x_1968.z)));
    let x_1972 : vec4<f32> = u_xlat9;
    u_xlat9 = vec4<f32>(x_1971.x, x_1971.y, x_1971.z, x_1972.w);
    let x_1974 : vec4<f32> = u_xlat7;
    let x_1977 : vec4<f32> = x_364.x_CascadeShadowSplitSpheres2;
    let x_1980 : vec3<f32> = (vec3<f32>(x_1974.x, x_1974.y, x_1974.z) + -(vec3<f32>(x_1977.x, x_1977.y, x_1977.z)));
    let x_1981 : vec4<f32> = u_xlat10;
    u_xlat10 = vec4<f32>(x_1980.x, x_1980.y, x_1980.z, x_1981.w);
    let x_1983 : vec4<f32> = u_xlat7;
    let x_1986 : vec4<f32> = x_364.x_CascadeShadowSplitSpheres3;
    let x_1989 : vec3<f32> = (vec3<f32>(x_1983.x, x_1983.y, x_1983.z) + -(vec3<f32>(x_1986.x, x_1986.y, x_1986.z)));
    let x_1990 : vec4<f32> = u_xlat11;
    u_xlat11 = vec4<f32>(x_1989.x, x_1989.y, x_1989.z, x_1990.w);
    let x_1992 : vec4<f32> = u_xlat8;
    let x_1994 : vec4<f32> = u_xlat8;
    u_xlat8.x = dot(vec3<f32>(x_1992.x, x_1992.y, x_1992.z), vec3<f32>(x_1994.x, x_1994.y, x_1994.z));
    let x_1998 : vec4<f32> = u_xlat9;
    let x_2000 : vec4<f32> = u_xlat9;
    u_xlat8.y = dot(vec3<f32>(x_1998.x, x_1998.y, x_1998.z), vec3<f32>(x_2000.x, x_2000.y, x_2000.z));
    let x_2004 : vec4<f32> = u_xlat10;
    let x_2006 : vec4<f32> = u_xlat10;
    u_xlat8.z = dot(vec3<f32>(x_2004.x, x_2004.y, x_2004.z), vec3<f32>(x_2006.x, x_2006.y, x_2006.z));
    let x_2010 : vec4<f32> = u_xlat11;
    let x_2012 : vec4<f32> = u_xlat11;
    u_xlat8.w = dot(vec3<f32>(x_2010.x, x_2010.y, x_2010.z), vec3<f32>(x_2012.x, x_2012.y, x_2012.z));
    let x_2017 : vec4<f32> = u_xlat8;
    let x_2019 : vec4<f32> = x_364.x_CascadeShadowSplitSphereRadii;
    u_xlatb8 = (x_2017 < x_2019);
    let x_2022 : bool = u_xlatb8.x;
    u_xlat9.x = select(0.0f, 1.0f, x_2022);
    let x_2026 : bool = u_xlatb8.y;
    u_xlat9.y = select(0.0f, 1.0f, x_2026);
    let x_2030 : bool = u_xlatb8.z;
    u_xlat9.z = select(0.0f, 1.0f, x_2030);
    let x_2034 : bool = u_xlatb8.w;
    u_xlat9.w = select(0.0f, 1.0f, x_2034);
    let x_2038 : bool = u_xlatb8.x;
    u_xlat8.x = select(-0.0f, -1.0f, x_2038);
    let x_2042 : bool = u_xlatb8.y;
    u_xlat8.y = select(-0.0f, -1.0f, x_2042);
    let x_2046 : bool = u_xlatb8.z;
    u_xlat8.z = select(-0.0f, -1.0f, x_2046);
    let x_2049 : vec4<f32> = u_xlat8;
    let x_2051 : vec4<f32> = u_xlat9;
    let x_2053 : vec3<f32> = (vec3<f32>(x_2049.x, x_2049.y, x_2049.z) + vec3<f32>(x_2051.y, x_2051.z, x_2051.w));
    let x_2054 : vec4<f32> = u_xlat8;
    u_xlat8 = vec4<f32>(x_2053.x, x_2053.y, x_2053.z, x_2054.w);
    let x_2056 : vec4<f32> = u_xlat8;
    let x_2058 : vec3<f32> = max(vec3<f32>(x_2056.x, x_2056.y, x_2056.z), vec3<f32>(0.0f, 0.0f, 0.0f));
    let x_2059 : vec4<f32> = u_xlat9;
    u_xlat9 = vec4<f32>(x_2059.x, x_2058.x, x_2058.y, x_2058.z);
    let x_2061 : vec4<f32> = u_xlat9;
    u_xlat63 = dot(x_2061, vec4<f32>(4.0f, 3.0f, 2.0f, 1.0f));
    let x_2063 : f32 = u_xlat63;
    u_xlat63 = (-(x_2063) + 4.0f);
    let x_2067 : f32 = u_xlat63;
    u_xlatu63 = u32(x_2067);
    let x_2070 : u32 = u_xlatu63;
    u_xlati63 = (bitcast<i32>(x_2070) << bitcast<u32>(2i));
    let x_2073 : vec4<f32> = u_xlat7;
    let x_2075 : i32 = u_xlati63;
    let x_2078 : i32 = u_xlati63;
    let x_2082 : vec4<f32> = x_364.x_MainLightWorldToShadow[((x_2075 + 1i) / 4i)][((x_2078 + 1i) % 4i)];
    let x_2084 : vec3<f32> = (vec3<f32>(x_2073.y, x_2073.y, x_2073.y) * vec3<f32>(x_2082.x, x_2082.y, x_2082.z));
    let x_2085 : vec4<f32> = u_xlat8;
    u_xlat8 = vec4<f32>(x_2084.x, x_2084.y, x_2084.z, x_2085.w);
    let x_2087 : i32 = u_xlati63;
    let x_2089 : i32 = u_xlati63;
    let x_2092 : vec4<f32> = x_364.x_MainLightWorldToShadow[(x_2087 / 4i)][(x_2089 % 4i)];
    let x_2094 : vec4<f32> = u_xlat7;
    let x_2097 : vec4<f32> = u_xlat8;
    let x_2099 : vec3<f32> = ((vec3<f32>(x_2092.x, x_2092.y, x_2092.z) * vec3<f32>(x_2094.x, x_2094.x, x_2094.x)) + vec3<f32>(x_2097.x, x_2097.y, x_2097.z));
    let x_2100 : vec4<f32> = u_xlat7;
    u_xlat7 = vec4<f32>(x_2099.x, x_2099.y, x_2100.z, x_2099.z);
    let x_2102 : i32 = u_xlati63;
    let x_2105 : i32 = u_xlati63;
    let x_2109 : vec4<f32> = x_364.x_MainLightWorldToShadow[((x_2102 + 2i) / 4i)][((x_2105 + 2i) % 4i)];
    let x_2111 : vec4<f32> = u_xlat7;
    let x_2114 : vec4<f32> = u_xlat7;
    let x_2116 : vec3<f32> = ((vec3<f32>(x_2109.x, x_2109.y, x_2109.z) * vec3<f32>(x_2111.z, x_2111.z, x_2111.z)) + vec3<f32>(x_2114.x, x_2114.y, x_2114.w));
    let x_2117 : vec4<f32> = u_xlat7;
    u_xlat7 = vec4<f32>(x_2116.x, x_2116.y, x_2116.z, x_2117.w);
    let x_2119 : vec4<f32> = u_xlat7;
    let x_2121 : i32 = u_xlati63;
    let x_2124 : i32 = u_xlati63;
    let x_2128 : vec4<f32> = x_364.x_MainLightWorldToShadow[((x_2121 + 3i) / 4i)][((x_2124 + 3i) % 4i)];
    let x_2130 : vec3<f32> = (vec3<f32>(x_2119.x, x_2119.y, x_2119.z) + vec3<f32>(x_2128.x, x_2128.y, x_2128.z));
    let x_2131 : vec4<f32> = u_xlat7;
    u_xlat7 = vec4<f32>(x_2130.x, x_2130.y, x_2130.z, x_2131.w);
    let x_2134 : vec4<f32> = u_xlat7;
    let x_2135 : vec2<f32> = vec2<f32>(x_2134.x, x_2134.y);
    let x_2137 : f32 = u_xlat7.z;
    txVec30 = vec3<f32>(x_2135.x, x_2135.y, x_2137);
    let x_2144 : vec3<f32> = txVec30;
    let x_2146 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2144.xy, x_2144.z);
    u_xlat63 = x_2146;
    let x_2147 : f32 = u_xlat62;
    let x_2148 : f32 = u_xlat63;
    u_xlat62 = (x_2147 + x_2148);

    continuing {
      let x_2150 : u32 = u_xlatu_loop_1;
      u_xlatu_loop_1 = (x_2150 + bitcast<u32>(1i));
    }
  }
  let x_2152 : vec3<f32> = vs_TEXCOORD1;
  let x_2155 : vec3<f32> = (x_2152 * vec3<f32>(1.100000024f, 1.100000024f, 1.100000024f));
  let x_2156 : vec4<f32> = u_xlat5;
  u_xlat5 = vec4<f32>(x_2155.x, x_2155.y, x_2155.z, x_2156.w);
  let x_2158 : vec3<f32> = vs_TEXCOORD1;
  let x_2161 : vec4<f32> = x_364.x_CascadeShadowSplitSpheres0;
  let x_2164 : vec3<f32> = ((x_2158 * vec3<f32>(1.100000024f, 1.100000024f, 1.100000024f)) + -(vec3<f32>(x_2161.x, x_2161.y, x_2161.z)));
  let x_2165 : vec4<f32> = u_xlat6;
  u_xlat6 = vec4<f32>(x_2164.x, x_2164.y, x_2164.z, x_2165.w);
  let x_2167 : vec3<f32> = vs_TEXCOORD1;
  let x_2170 : vec4<f32> = x_364.x_CascadeShadowSplitSpheres1;
  let x_2173 : vec3<f32> = ((x_2167 * vec3<f32>(1.100000024f, 1.100000024f, 1.100000024f)) + -(vec3<f32>(x_2170.x, x_2170.y, x_2170.z)));
  let x_2174 : vec4<f32> = u_xlat7;
  u_xlat7 = vec4<f32>(x_2173.x, x_2173.y, x_2173.z, x_2174.w);
  let x_2176 : vec3<f32> = vs_TEXCOORD1;
  let x_2179 : vec4<f32> = x_364.x_CascadeShadowSplitSpheres2;
  let x_2182 : vec3<f32> = ((x_2176 * vec3<f32>(1.100000024f, 1.100000024f, 1.100000024f)) + -(vec3<f32>(x_2179.x, x_2179.y, x_2179.z)));
  let x_2183 : vec4<f32> = u_xlat8;
  u_xlat8 = vec4<f32>(x_2182.x, x_2182.y, x_2182.z, x_2183.w);
  let x_2185 : vec3<f32> = vs_TEXCOORD1;
  let x_2188 : vec4<f32> = x_364.x_CascadeShadowSplitSpheres3;
  let x_2191 : vec3<f32> = ((x_2185 * vec3<f32>(1.100000024f, 1.100000024f, 1.100000024f)) + -(vec3<f32>(x_2188.x, x_2188.y, x_2188.z)));
  let x_2192 : vec4<f32> = u_xlat9;
  u_xlat9 = vec4<f32>(x_2191.x, x_2191.y, x_2191.z, x_2192.w);
  let x_2194 : vec4<f32> = u_xlat6;
  let x_2196 : vec4<f32> = u_xlat6;
  u_xlat6.x = dot(vec3<f32>(x_2194.x, x_2194.y, x_2194.z), vec3<f32>(x_2196.x, x_2196.y, x_2196.z));
  let x_2200 : vec4<f32> = u_xlat7;
  let x_2202 : vec4<f32> = u_xlat7;
  u_xlat6.y = dot(vec3<f32>(x_2200.x, x_2200.y, x_2200.z), vec3<f32>(x_2202.x, x_2202.y, x_2202.z));
  let x_2206 : vec4<f32> = u_xlat8;
  let x_2208 : vec4<f32> = u_xlat8;
  u_xlat6.z = dot(vec3<f32>(x_2206.x, x_2206.y, x_2206.z), vec3<f32>(x_2208.x, x_2208.y, x_2208.z));
  let x_2212 : vec4<f32> = u_xlat9;
  let x_2214 : vec4<f32> = u_xlat9;
  u_xlat6.w = dot(vec3<f32>(x_2212.x, x_2212.y, x_2212.z), vec3<f32>(x_2214.x, x_2214.y, x_2214.z));
  let x_2219 : vec4<f32> = u_xlat6;
  let x_2221 : vec4<f32> = x_364.x_CascadeShadowSplitSphereRadii;
  u_xlatb6 = (x_2219 < x_2221);
  let x_2224 : bool = u_xlatb6.x;
  u_xlat7.x = select(0.0f, 1.0f, x_2224);
  let x_2228 : bool = u_xlatb6.y;
  u_xlat7.y = select(0.0f, 1.0f, x_2228);
  let x_2232 : bool = u_xlatb6.z;
  u_xlat7.z = select(0.0f, 1.0f, x_2232);
  let x_2236 : bool = u_xlatb6.w;
  u_xlat7.w = select(0.0f, 1.0f, x_2236);
  let x_2240 : bool = u_xlatb6.x;
  u_xlat6.x = select(-0.0f, -1.0f, x_2240);
  let x_2244 : bool = u_xlatb6.y;
  u_xlat6.y = select(-0.0f, -1.0f, x_2244);
  let x_2248 : bool = u_xlatb6.z;
  u_xlat6.z = select(-0.0f, -1.0f, x_2248);
  let x_2251 : vec4<f32> = u_xlat6;
  let x_2253 : vec4<f32> = u_xlat7;
  let x_2255 : vec3<f32> = (vec3<f32>(x_2251.x, x_2251.y, x_2251.z) + vec3<f32>(x_2253.y, x_2253.z, x_2253.w));
  let x_2256 : vec4<f32> = u_xlat6;
  u_xlat6 = vec4<f32>(x_2255.x, x_2255.y, x_2255.z, x_2256.w);
  let x_2258 : vec4<f32> = u_xlat6;
  let x_2260 : vec3<f32> = max(vec3<f32>(x_2258.x, x_2258.y, x_2258.z), vec3<f32>(0.0f, 0.0f, 0.0f));
  let x_2261 : vec4<f32> = u_xlat7;
  u_xlat7 = vec4<f32>(x_2261.x, x_2260.x, x_2260.y, x_2260.z);
  let x_2263 : vec4<f32> = u_xlat7;
  u_xlat41.x = dot(x_2263, vec4<f32>(4.0f, 3.0f, 2.0f, 1.0f));
  let x_2267 : f32 = u_xlat41.x;
  u_xlat41.x = (-(x_2267) + 4.0f);
  let x_2273 : f32 = u_xlat41.x;
  u_xlatu41 = u32(x_2273);
  let x_2276 : u32 = u_xlatu41;
  u_xlati41 = (bitcast<i32>(x_2276) << bitcast<u32>(2i));
  let x_2281 : f32 = u_xlat5.y;
  let x_2282 : i32 = u_xlati41;
  let x_2285 : i32 = u_xlati41;
  let x_2289 : f32 = x_364.x_MainLightWorldToShadow[((x_2282 + 1i) / 4i)][((x_2285 + 1i) % 4i)].z;
  u_xlat60 = (x_2281 * x_2289);
  let x_2291 : i32 = u_xlati41;
  let x_2293 : i32 = u_xlati41;
  let x_2296 : f32 = x_364.x_MainLightWorldToShadow[(x_2291 / 4i)][(x_2293 % 4i)].z;
  let x_2298 : f32 = u_xlat5.x;
  let x_2300 : f32 = u_xlat60;
  u_xlat60 = ((x_2296 * x_2298) + x_2300);
  let x_2302 : i32 = u_xlati41;
  let x_2305 : i32 = u_xlati41;
  let x_2309 : f32 = x_364.x_MainLightWorldToShadow[((x_2302 + 2i) / 4i)][((x_2305 + 2i) % 4i)].z;
  let x_2311 : f32 = u_xlat5.z;
  let x_2313 : f32 = u_xlat60;
  u_xlat60 = ((x_2309 * x_2311) + x_2313);
  let x_2315 : f32 = u_xlat60;
  let x_2316 : i32 = u_xlati41;
  let x_2319 : i32 = u_xlati41;
  let x_2323 : f32 = x_364.x_MainLightWorldToShadow[((x_2316 + 3i) / 4i)][((x_2319 + 3i) % 4i)].z;
  u_xlat41.x = (x_2315 + x_2323);
  let x_2327 : f32 = u_xlat41.x;
  u_xlatb60 = (0.0f >= x_2327);
  let x_2330 : f32 = u_xlat41.x;
  u_xlatb41 = (x_2330 >= 1.0f);
  let x_2332 : bool = u_xlatb41;
  let x_2333 : bool = u_xlatb60;
  u_xlatb41 = (x_2332 | x_2333);
  let x_2335 : f32 = u_xlat62;
  u_xlat60 = (x_2335 * 0.25f);
  let x_2337 : bool = u_xlatb41;
  let x_2338 : f32 = u_xlat60;
  u_xlat41.x = select(x_2338, 1.0f, x_2337);
  let x_2347 : vec4<f32> = x_2344.unity_SHAr;
  let x_2348 : vec4<f32> = u_xlat2;
  u_xlat5.x = dot(x_2347, x_2348);
  let x_2353 : vec4<f32> = x_2344.unity_SHAg;
  let x_2354 : vec4<f32> = u_xlat2;
  u_xlat5.y = dot(x_2353, x_2354);
  let x_2359 : vec4<f32> = x_2344.unity_SHAb;
  let x_2360 : vec4<f32> = u_xlat2;
  u_xlat5.z = dot(x_2359, x_2360);
  let x_2363 : vec4<f32> = u_xlat2;
  let x_2365 : vec4<f32> = u_xlat2;
  u_xlat6 = (vec4<f32>(x_2363.y, x_2363.z, x_2363.z, x_2363.x) * vec4<f32>(x_2365.x, x_2365.y, x_2365.z, x_2365.z));
  let x_2370 : vec4<f32> = x_2344.unity_SHBr;
  let x_2371 : vec4<f32> = u_xlat6;
  u_xlat7.x = dot(x_2370, x_2371);
  let x_2376 : vec4<f32> = x_2344.unity_SHBg;
  let x_2377 : vec4<f32> = u_xlat6;
  u_xlat7.y = dot(x_2376, x_2377);
  let x_2382 : vec4<f32> = x_2344.unity_SHBb;
  let x_2383 : vec4<f32> = u_xlat6;
  u_xlat7.z = dot(x_2382, x_2383);
  let x_2388 : f32 = u_xlat2.y;
  let x_2390 : f32 = u_xlat2.y;
  u_xlat59 = (x_2388 * x_2390);
  let x_2393 : f32 = u_xlat2.x;
  let x_2395 : f32 = u_xlat2.x;
  let x_2397 : f32 = u_xlat59;
  u_xlat59 = ((x_2393 * x_2395) + -(x_2397));
  let x_2402 : vec4<f32> = x_2344.unity_SHC;
  let x_2404 : f32 = u_xlat59;
  let x_2407 : vec4<f32> = u_xlat7;
  let x_2409 : vec3<f32> = ((vec3<f32>(x_2402.x, x_2402.y, x_2402.z) * vec3<f32>(x_2404, x_2404, x_2404)) + vec3<f32>(x_2407.x, x_2407.y, x_2407.z));
  let x_2410 : vec4<f32> = u_xlat6;
  u_xlat6 = vec4<f32>(x_2409.x, x_2409.y, x_2409.z, x_2410.w);
  let x_2412 : vec4<f32> = u_xlat5;
  let x_2414 : vec4<f32> = u_xlat6;
  let x_2416 : vec3<f32> = (vec3<f32>(x_2412.x, x_2412.y, x_2412.z) + vec3<f32>(x_2414.x, x_2414.y, x_2414.z));
  let x_2417 : vec4<f32> = u_xlat5;
  u_xlat5 = vec4<f32>(x_2416.x, x_2416.y, x_2416.z, x_2417.w);
  let x_2419 : vec4<f32> = u_xlat5;
  let x_2421 : vec3<f32> = max(vec3<f32>(x_2419.x, x_2419.y, x_2419.z), vec3<f32>(0.0f, 0.0f, 0.0f));
  let x_2422 : vec4<f32> = u_xlat5;
  u_xlat5 = vec4<f32>(x_2421.x, x_2421.y, x_2421.z, x_2422.w);
  let x_2424 : vec3<f32> = vs_TEXCOORD2;
  let x_2426 : vec4<f32> = x_39.x_MainLightPosition;
  u_xlat59 = dot(x_2424, -(vec3<f32>(x_2426.x, x_2426.y, x_2426.z)));
  let x_2430 : f32 = u_xlat59;
  let x_2432 : f32 = vs_TEXCOORD5.z;
  u_xlat59 = (x_2430 * x_2432);
  let x_2434 : f32 = u_xlat59;
  let x_2435 : f32 = u_xlat59;
  u_xlat60 = (x_2434 * x_2435);
  let x_2437 : f32 = u_xlat59;
  let x_2438 : f32 = u_xlat60;
  u_xlat59 = (x_2437 * x_2438);
  let x_2440 : f32 = u_xlat59;
  u_xlat59 = clamp(x_2440, 0.0f, 1.0f);
  let x_2442 : f32 = u_xlat59;
  u_xlat59 = (x_2442 * 5.0f);
  let x_2445 : f32 = u_xlat59;
  let x_2448 : vec4<f32> = x_39.x_MainLightColor;
  let x_2450 : vec3<f32> = (vec3<f32>(x_2445, x_2445, x_2445) * vec3<f32>(x_2448.x, x_2448.y, x_2448.z));
  let x_2451 : vec4<f32> = u_xlat6;
  u_xlat6 = vec4<f32>(x_2450.x, x_2450.y, x_2450.z, x_2451.w);
  let x_2454 : vec4<f32> = x_39.x_MainLightPosition;
  let x_2457 : vec4<f32> = x_39.x_MainLightColor;
  let x_2460 : vec4<f32> = u_xlat6;
  let x_2462 : vec3<f32> = ((vec3<f32>(x_2454.y, x_2454.y, x_2454.y) * vec3<f32>(x_2457.x, x_2457.y, x_2457.z)) + vec3<f32>(x_2460.x, x_2460.y, x_2460.z));
  let x_2463 : vec4<f32> = u_xlat6;
  u_xlat6 = vec4<f32>(x_2462.x, x_2462.y, x_2462.z, x_2463.w);
  let x_2465 : vec4<f32> = u_xlat6;
  let x_2467 : vec2<f32> = u_xlat41;
  let x_2470 : vec4<f32> = u_xlat5;
  let x_2472 : vec3<f32> = ((vec3<f32>(x_2465.x, x_2465.y, x_2465.z) * vec3<f32>(x_2467.x, x_2467.x, x_2467.x)) + vec3<f32>(x_2470.x, x_2470.y, x_2470.z));
  let x_2473 : vec4<f32> = u_xlat6;
  u_xlat6 = vec4<f32>(x_2472.x, x_2472.y, x_2472.z, x_2473.w);
  let x_2480 : vec4<f32> = vs_TEXCOORD0;
  let x_2483 : f32 = x_39.x_GlobalMipBias.x;
  let x_2484 : vec4<f32> = textureSampleBias(x_FoamMap, sampler_FoamMap, vec2<f32>(x_2480.z, x_2480.w), x_2483);
  let x_2485 : vec3<f32> = vec3<f32>(x_2484.x, x_2484.y, x_2484.z);
  let x_2486 : vec4<f32> = u_xlat7;
  u_xlat7 = vec4<f32>(x_2485.x, x_2485.y, x_2485.z, x_2486.w);
  let x_2489 : f32 = u_xlat4.x;
  u_xlat4.x = x_2489;
  let x_2492 : f32 = u_xlat4.x;
  u_xlat4.x = clamp(x_2492, 0.0f, 1.0f);
  let x_2496 : f32 = vs_TEXCOORD5.z;
  u_xlat59 = (x_2496 + -0.375f);
  let x_2499 : f32 = u_xlat59;
  u_xlat59 = clamp(x_2499, 0.0f, 1.0f);
  let x_2501 : f32 = u_xlat38;
  u_xlat60 = ((-(x_2501) * 4.0f) + 1.0f);
  let x_2505 : f32 = u_xlat60;
  u_xlat60 = clamp(x_2505, 0.0f, 1.0f);
  let x_2507 : f32 = u_xlat57;
  let x_2508 : f32 = u_xlat38;
  u_xlat57 = min(x_2507, x_2508);
  let x_2510 : f32 = u_xlat57;
  u_xlat57 = ((-(x_2510) * 0.5f) + 0.75f);
  let x_2515 : f32 = u_xlat60;
  let x_2517 : f32 = u_xlat57;
  u_xlat57 = ((x_2515 * 0.5f) + x_2517);
  let x_2519 : f32 = u_xlat57;
  u_xlat57 = clamp(x_2519, 0.0f, 1.0f);
  let x_2522 : f32 = u_xlat4.x;
  let x_2523 : f32 = u_xlat57;
  u_xlat57 = (x_2522 * x_2523);
  let x_2525 : f32 = u_xlat57;
  let x_2526 : f32 = u_xlat59;
  u_xlat57 = max(x_2525, x_2526);
  let x_2529 : f32 = u_xlat1.x;
  let x_2531 : f32 = u_xlat1.x;
  u_xlat1.x = (x_2529 + x_2531);
  let x_2534 : f32 = u_xlat57;
  let x_2536 : f32 = u_xlat1.x;
  u_xlat8.x = max(x_2534, x_2536);
  u_xlat8.y = 0.660000026f;
  let x_2546 : vec4<f32> = u_xlat8;
  let x_2549 : f32 = x_39.x_GlobalMipBias.x;
  let x_2550 : vec4<f32> = textureSampleBias(x_AbsorptionScatteringRamp, sampler_AbsorptionScatteringRamp, vec2<f32>(x_2546.x, x_2546.y), x_2549);
  let x_2551 : vec3<f32> = vec3<f32>(x_2550.x, x_2550.y, x_2550.z);
  let x_2552 : vec4<f32> = u_xlat4;
  u_xlat4 = vec4<f32>(x_2551.x, x_2552.y, x_2551.y, x_2551.z);
  let x_2554 : vec4<f32> = u_xlat4;
  let x_2556 : vec4<f32> = u_xlat7;
  let x_2558 : vec3<f32> = (vec3<f32>(x_2554.x, x_2554.z, x_2554.w) * vec3<f32>(x_2556.x, x_2556.y, x_2556.z));
  let x_2559 : vec4<f32> = u_xlat4;
  u_xlat4 = vec4<f32>(x_2558.x, x_2559.y, x_2558.y, x_2558.z);
  let x_2561 : vec4<f32> = u_xlat4;
  let x_2563 : vec4<f32> = u_xlat4;
  u_xlat57 = dot(vec3<f32>(x_2561.x, x_2561.z, x_2561.w), vec3<f32>(x_2563.x, x_2563.z, x_2563.w));
  let x_2566 : f32 = u_xlat57;
  u_xlat57 = sqrt(x_2566);
  let x_2568 : f32 = u_xlat57;
  u_xlat57 = ((x_2568 * 1.5f) + -0.100000001f);
  let x_2572 : f32 = u_xlat57;
  u_xlat57 = clamp(x_2572, 0.0f, 1.0f);
  let x_2574 : vec3<f32> = u_xlat22;
  let x_2577 : vec4<f32> = x_39.x_MainLightColor;
  let x_2580 : vec4<f32> = u_xlat5;
  let x_2582 : vec3<f32> = ((vec3<f32>(x_2574.x, x_2574.x, x_2574.x) * vec3<f32>(x_2577.x, x_2577.y, x_2577.z)) + vec3<f32>(x_2580.x, x_2580.y, x_2580.z));
  let x_2583 : vec4<f32> = u_xlat4;
  u_xlat4 = vec4<f32>(x_2582.x, x_2583.y, x_2582.y, x_2582.z);
  let x_2585 : vec3<f32> = vs_TEXCOORD2;
  let x_2587 : vec4<f32> = x_39.x_MainLightPosition;
  let x_2589 : vec3<f32> = (x_2585 + vec3<f32>(x_2587.x, x_2587.y, x_2587.z));
  let x_2590 : vec4<f32> = u_xlat5;
  u_xlat5 = vec4<f32>(x_2589.x, x_2589.y, x_2589.z, x_2590.w);
  let x_2592 : vec4<f32> = u_xlat5;
  let x_2594 : vec4<f32> = u_xlat5;
  u_xlat1.x = dot(vec3<f32>(x_2592.x, x_2592.y, x_2592.z), vec3<f32>(x_2594.x, x_2594.y, x_2594.z));
  let x_2599 : f32 = u_xlat1.x;
  u_xlat1.x = max(x_2599, 1.17549435e-37f);
  let x_2604 : f32 = u_xlat1.x;
  u_xlat1.x = inverseSqrt(x_2604);
  let x_2607 : vec3<f32> = u_xlat1;
  let x_2609 : vec4<f32> = u_xlat5;
  let x_2611 : vec3<f32> = (vec3<f32>(x_2607.x, x_2607.x, x_2607.x) * vec3<f32>(x_2609.x, x_2609.y, x_2609.z));
  let x_2612 : vec4<f32> = u_xlat5;
  u_xlat5 = vec4<f32>(x_2611.x, x_2611.y, x_2611.z, x_2612.w);
  let x_2614 : vec4<f32> = u_xlat2;
  let x_2616 : vec4<f32> = u_xlat5;
  u_xlat1.x = dot(vec3<f32>(x_2614.x, x_2614.y, x_2614.z), vec3<f32>(x_2616.x, x_2616.y, x_2616.z));
  let x_2621 : f32 = u_xlat1.x;
  u_xlat1.x = clamp(x_2621, 0.0f, 1.0f);
  let x_2625 : vec4<f32> = x_39.x_MainLightPosition;
  let x_2627 : vec4<f32> = u_xlat5;
  u_xlat59 = dot(vec3<f32>(x_2625.x, x_2625.y, x_2625.z), vec3<f32>(x_2627.x, x_2627.y, x_2627.z));
  let x_2630 : f32 = u_xlat59;
  u_xlat59 = clamp(x_2630, 0.0f, 1.0f);
  let x_2633 : f32 = u_xlat1.x;
  let x_2635 : f32 = u_xlat1.x;
  u_xlat1.x = (x_2633 * x_2635);
  let x_2639 : f32 = u_xlat1.x;
  u_xlat1.x = ((x_2639 * -0.999938965f) + 1.000010014f);
  let x_2645 : f32 = u_xlat59;
  let x_2646 : f32 = u_xlat59;
  u_xlat59 = (x_2645 * x_2646);
  let x_2649 : f32 = u_xlat1.x;
  let x_2651 : f32 = u_xlat1.x;
  u_xlat1.x = (x_2649 * x_2651);
  let x_2654 : f32 = u_xlat59;
  u_xlat59 = max(x_2654, 0.100000001f);
  let x_2657 : f32 = u_xlat1.x;
  let x_2658 : f32 = u_xlat59;
  u_xlat1.x = (x_2657 * x_2658);
  let x_2662 : f32 = u_xlat1.x;
  u_xlat1.x = (x_2662 * 2.03125f);
  let x_2668 : f32 = u_xlat1.x;
  u_xlat1.x = (6.10351562e-05f / x_2668);
  let x_2672 : f32 = u_xlat41.x;
  let x_2674 : f32 = u_xlat1.x;
  u_xlat1.x = (x_2672 * x_2674);
  let x_2678 : f32 = u_xlat1.x;
  u_xlat1.x = (x_2678 * 0.039999999f);
  let x_2682 : vec3<f32> = u_xlat1;
  let x_2685 : vec4<f32> = x_39.x_MainLightColor;
  u_xlat22 = (vec3<f32>(x_2682.x, x_2682.x, x_2682.x) * vec3<f32>(x_2685.x, x_2685.y, x_2685.z));
  let x_2689 : f32 = x_39.x_AdditionalLightsCount.x;
  let x_2691 : f32 = x_2344.unity_LightData.y;
  u_xlat1.x = min(x_2689, x_2691);
  let x_2696 : f32 = u_xlat1.x;
  u_xlatu1 = bitcast<u32>(i32(x_2696));
  let x_2699 : vec4<f32> = u_xlat6;
  let x_2700 : vec3<f32> = vec3<f32>(x_2699.x, x_2699.y, x_2699.z);
  let x_2701 : vec4<f32> = u_xlat5;
  u_xlat5 = vec4<f32>(x_2700.x, x_2700.y, x_2700.z, x_2701.w);
  let x_2703 : vec3<f32> = u_xlat22;
  let x_2704 : vec4<f32> = u_xlat7;
  u_xlat7 = vec4<f32>(x_2703.x, x_2703.y, x_2703.z, x_2704.w);
  u_xlatu_loop_2 = 0u;
  loop {
    let x_2712 : u32 = u_xlatu_loop_2;
    let x_2713 : u32 = u_xlatu1;
    if ((x_2712 < x_2713)) {
    } else {
      break;
    }
    let x_2716 : u32 = u_xlatu_loop_2;
    u_xlatu62 = (x_2716 >> 2u);
    let x_2718 : u32 = u_xlatu_loop_2;
    u_xlati63 = bitcast<i32>((x_2718 & 3u));
    let x_2721 : u32 = u_xlatu62;
    let x_2724 : vec4<f32> = x_2344.unity_LightIndices[bitcast<i32>(x_2721)];
    let x_2733 : i32 = u_xlati63;
    indexable = array<vec4<u32>, 4u>(vec4<u32>(1065353216u, 0u, 0u, 0u), vec4<u32>(0u, 1065353216u, 0u, 0u), vec4<u32>(0u, 0u, 1065353216u, 0u), vec4<u32>(0u, 0u, 0u, 1065353216u));
    let x_2738 : vec4<u32> = indexable[x_2733];
    u_xlat62 = dot(x_2724, bitcast<vec4<f32>>(x_2738));
    let x_2742 : f32 = u_xlat62;
    u_xlati62 = i32(x_2742);
    let x_2744 : vec3<f32> = vs_TEXCOORD1;
    let x_2756 : i32 = u_xlati62;
    let x_2758 : vec4<f32> = x_2755.x_AdditionalLightsPosition[x_2756];
    let x_2761 : i32 = u_xlati62;
    let x_2763 : vec4<f32> = x_2755.x_AdditionalLightsPosition[x_2761];
    let x_2765 : vec3<f32> = ((-(x_2744) * vec3<f32>(x_2758.w, x_2758.w, x_2758.w)) + vec3<f32>(x_2763.x, x_2763.y, x_2763.z));
    let x_2766 : vec4<f32> = u_xlat8;
    u_xlat8 = vec4<f32>(x_2765.x, x_2765.y, x_2765.z, x_2766.w);
    let x_2768 : vec4<f32> = u_xlat8;
    let x_2770 : vec4<f32> = u_xlat8;
    u_xlat63 = dot(vec3<f32>(x_2768.x, x_2768.y, x_2768.z), vec3<f32>(x_2770.x, x_2770.y, x_2770.z));
    let x_2773 : f32 = u_xlat63;
    u_xlat63 = max(x_2773, 6.10351562e-05f);
    let x_2776 : f32 = u_xlat63;
    u_xlat64 = inverseSqrt(x_2776);
    let x_2778 : f32 = u_xlat64;
    let x_2780 : vec4<f32> = u_xlat8;
    let x_2782 : vec3<f32> = (vec3<f32>(x_2778, x_2778, x_2778) * vec3<f32>(x_2780.x, x_2780.y, x_2780.z));
    let x_2783 : vec4<f32> = u_xlat9;
    u_xlat9 = vec4<f32>(x_2782.x, x_2782.y, x_2782.z, x_2783.w);
    let x_2786 : f32 = u_xlat63;
    u_xlat65 = (1.0f / x_2786);
    let x_2788 : f32 = u_xlat63;
    let x_2789 : i32 = u_xlati62;
    let x_2791 : f32 = x_2755.x_AdditionalLightsAttenuation[x_2789].x;
    u_xlat63 = (x_2788 * x_2791);
    let x_2793 : f32 = u_xlat63;
    let x_2795 : f32 = u_xlat63;
    u_xlat63 = ((-(x_2793) * x_2795) + 1.0f);
    let x_2798 : f32 = u_xlat63;
    u_xlat63 = max(x_2798, 0.0f);
    let x_2800 : f32 = u_xlat63;
    let x_2801 : f32 = u_xlat63;
    u_xlat63 = (x_2800 * x_2801);
    let x_2803 : f32 = u_xlat63;
    let x_2804 : f32 = u_xlat65;
    u_xlat63 = (x_2803 * x_2804);
    let x_2806 : i32 = u_xlati62;
    let x_2808 : vec4<f32> = x_2755.x_AdditionalLightsSpotDir[x_2806];
    let x_2810 : vec4<f32> = u_xlat9;
    u_xlat65 = dot(vec3<f32>(x_2808.x, x_2808.y, x_2808.z), vec3<f32>(x_2810.x, x_2810.y, x_2810.z));
    let x_2813 : f32 = u_xlat65;
    let x_2814 : i32 = u_xlati62;
    let x_2816 : f32 = x_2755.x_AdditionalLightsAttenuation[x_2814].z;
    let x_2818 : i32 = u_xlati62;
    let x_2820 : f32 = x_2755.x_AdditionalLightsAttenuation[x_2818].w;
    u_xlat65 = ((x_2813 * x_2816) + x_2820);
    let x_2822 : f32 = u_xlat65;
    u_xlat65 = clamp(x_2822, 0.0f, 1.0f);
    let x_2824 : f32 = u_xlat65;
    let x_2825 : f32 = u_xlat65;
    u_xlat65 = (x_2824 * x_2825);
    let x_2827 : f32 = u_xlat63;
    let x_2828 : f32 = u_xlat65;
    u_xlat63 = (x_2827 * x_2828);
    let x_2830 : vec4<f32> = u_xlat2;
    let x_2832 : vec4<f32> = u_xlat9;
    u_xlat65 = dot(vec3<f32>(x_2830.x, x_2830.y, x_2830.z), vec3<f32>(x_2832.x, x_2832.y, x_2832.z));
    let x_2835 : f32 = u_xlat65;
    u_xlat65 = clamp(x_2835, 0.0f, 1.0f);
    let x_2837 : f32 = u_xlat63;
    let x_2838 : f32 = u_xlat65;
    u_xlat65 = (x_2837 * x_2838);
    let x_2840 : f32 = u_xlat65;
    let x_2842 : i32 = u_xlati62;
    let x_2844 : vec4<f32> = x_2755.x_AdditionalLightsColor[x_2842];
    let x_2846 : vec3<f32> = (vec3<f32>(x_2840, x_2840, x_2840) * vec3<f32>(x_2844.x, x_2844.y, x_2844.z));
    let x_2847 : vec4<f32> = u_xlat10;
    u_xlat10 = vec4<f32>(x_2846.x, x_2846.y, x_2846.z, x_2847.w);
    let x_2849 : vec4<f32> = u_xlat8;
    let x_2851 : f32 = u_xlat64;
    let x_2854 : vec3<f32> = vs_TEXCOORD2;
    let x_2855 : vec3<f32> = ((vec3<f32>(x_2849.x, x_2849.y, x_2849.z) * vec3<f32>(x_2851, x_2851, x_2851)) + x_2854);
    let x_2856 : vec4<f32> = u_xlat8;
    u_xlat8 = vec4<f32>(x_2855.x, x_2855.y, x_2855.z, x_2856.w);
    let x_2858 : vec4<f32> = u_xlat8;
    let x_2860 : vec4<f32> = u_xlat8;
    u_xlat64 = dot(vec3<f32>(x_2858.x, x_2858.y, x_2858.z), vec3<f32>(x_2860.x, x_2860.y, x_2860.z));
    let x_2863 : f32 = u_xlat64;
    u_xlat64 = max(x_2863, 1.17549435e-37f);
    let x_2865 : f32 = u_xlat64;
    u_xlat64 = inverseSqrt(x_2865);
    let x_2867 : f32 = u_xlat64;
    let x_2869 : vec4<f32> = u_xlat8;
    let x_2871 : vec3<f32> = (vec3<f32>(x_2867, x_2867, x_2867) * vec3<f32>(x_2869.x, x_2869.y, x_2869.z));
    let x_2872 : vec4<f32> = u_xlat8;
    u_xlat8 = vec4<f32>(x_2871.x, x_2871.y, x_2871.z, x_2872.w);
    let x_2874 : vec4<f32> = u_xlat2;
    let x_2876 : vec4<f32> = u_xlat8;
    u_xlat64 = dot(vec3<f32>(x_2874.x, x_2874.y, x_2874.z), vec3<f32>(x_2876.x, x_2876.y, x_2876.z));
    let x_2879 : f32 = u_xlat64;
    u_xlat64 = clamp(x_2879, 0.0f, 1.0f);
    let x_2881 : vec4<f32> = u_xlat9;
    let x_2883 : vec4<f32> = u_xlat8;
    u_xlat8.x = dot(vec3<f32>(x_2881.x, x_2881.y, x_2881.z), vec3<f32>(x_2883.x, x_2883.y, x_2883.z));
    let x_2888 : f32 = u_xlat8.x;
    u_xlat8.x = clamp(x_2888, 0.0f, 1.0f);
    let x_2891 : f32 = u_xlat64;
    let x_2892 : f32 = u_xlat64;
    u_xlat64 = (x_2891 * x_2892);
    let x_2894 : f32 = u_xlat64;
    u_xlat64 = ((x_2894 * -0.999938965f) + 1.000010014f);
    let x_2898 : f32 = u_xlat8.x;
    let x_2900 : f32 = u_xlat8.x;
    u_xlat8.x = (x_2898 * x_2900);
    let x_2903 : f32 = u_xlat64;
    let x_2904 : f32 = u_xlat64;
    u_xlat64 = (x_2903 * x_2904);
    let x_2907 : f32 = u_xlat8.x;
    u_xlat8.x = max(x_2907, 0.100000001f);
    let x_2910 : f32 = u_xlat64;
    let x_2912 : f32 = u_xlat8.x;
    u_xlat64 = (x_2910 * x_2912);
    let x_2914 : f32 = u_xlat64;
    u_xlat64 = (x_2914 * 2.03125f);
    let x_2916 : f32 = u_xlat64;
    u_xlat64 = (6.10351562e-05f / x_2916);
    let x_2918 : f32 = u_xlat64;
    u_xlat64 = (x_2918 * 0.039999999f);
    let x_2920 : f32 = u_xlat64;
    let x_2922 : vec4<f32> = u_xlat10;
    let x_2925 : vec4<f32> = u_xlat7;
    let x_2927 : vec3<f32> = ((vec3<f32>(x_2920, x_2920, x_2920) * vec3<f32>(x_2922.x, x_2922.y, x_2922.z)) + vec3<f32>(x_2925.x, x_2925.y, x_2925.z));
    let x_2928 : vec4<f32> = u_xlat7;
    u_xlat7 = vec4<f32>(x_2927.x, x_2927.y, x_2927.z, x_2928.w);
    let x_2930 : f32 = u_xlat63;
    let x_2932 : i32 = u_xlati62;
    let x_2934 : vec4<f32> = x_2755.x_AdditionalLightsColor[x_2932];
    let x_2937 : vec4<f32> = u_xlat5;
    let x_2939 : vec3<f32> = ((vec3<f32>(x_2930, x_2930, x_2930) * vec3<f32>(x_2934.x, x_2934.y, x_2934.z)) + vec3<f32>(x_2937.x, x_2937.y, x_2937.z));
    let x_2940 : vec4<f32> = u_xlat5;
    u_xlat5 = vec4<f32>(x_2939.x, x_2939.y, x_2939.z, x_2940.w);

    continuing {
      let x_2942 : u32 = u_xlatu_loop_2;
      u_xlatu_loop_2 = (x_2942 + bitcast<u32>(1i));
    }
  }
  let x_2944 : f32 = u_xlat58;
  let x_2945 : f32 = u_xlat38;
  u_xlat6.x = (x_2944 * x_2945);
  u_xlat6.y = 0.375f;
  u_xlat6.z = 0.0f;
  let x_2954 : vec4<f32> = u_xlat6;
  let x_2957 : f32 = x_39.x_GlobalMipBias.x;
  let x_2958 : vec4<f32> = textureSampleBias(x_AbsorptionScatteringRamp, sampler_AbsorptionScatteringRamp, vec2<f32>(x_2954.x, x_2954.y), x_2957);
  u_xlat22 = vec3<f32>(x_2958.x, x_2958.y, x_2958.z);
  let x_2960 : vec4<f32> = u_xlat2;
  let x_2966 : vec3<f32> = u_xlat0;
  let x_2968 : vec2<f32> = ((vec2<f32>(x_2960.z, x_2960.x) * vec2<f32>(0.02f, 0.150000006f)) + vec2<f32>(x_2966.x, x_2966.y));
  let x_2969 : vec3<f32> = u_xlat0;
  u_xlat0 = vec3<f32>(x_2968.x, x_2968.y, x_2969.z);
  let x_2975 : vec3<f32> = u_xlat0;
  let x_2977 : vec4<f32> = textureSampleLevel(x_PlanarReflectionTexture, sampler_ScreenTextures_linear_clamp, vec2<f32>(x_2975.x, x_2975.y), 0.0f);
  u_xlat0 = vec3<f32>(x_2977.x, x_2977.y, x_2977.z);
  let x_2984 : vec2<f32> = u_xlat20;
  let x_2986 : f32 = u_xlat4.y;
  let x_2987 : vec4<f32> = textureSampleLevel(x_CameraOpaqueTexture, sampler_CameraOpaqueTexture_linear_clamp, x_2984, x_2986);
  u_xlat1 = vec3<f32>(x_2987.x, x_2987.y, x_2987.z);
  let x_2992 : vec4<f32> = u_xlat6;
  let x_2995 : f32 = x_39.x_GlobalMipBias.x;
  let x_2996 : vec4<f32> = textureSampleBias(x_AbsorptionScatteringRamp, sampler_AbsorptionScatteringRamp, vec2<f32>(x_2992.x, x_2992.z), x_2995);
  let x_2997 : vec3<f32> = vec3<f32>(x_2996.x, x_2996.y, x_2996.z);
  let x_2998 : vec4<f32> = u_xlat2;
  u_xlat2 = vec4<f32>(x_2997.x, x_2997.y, x_2997.z, x_2998.w);
  let x_3000 : vec3<f32> = u_xlat1;
  let x_3001 : vec4<f32> = u_xlat2;
  let x_3003 : vec3<f32> = (x_3000 * vec3<f32>(x_3001.x, x_3001.y, x_3001.z));
  let x_3004 : vec4<f32> = u_xlat6;
  u_xlat6 = vec4<f32>(x_3003.x, x_3003.y, x_3003.z, x_3004.w);
  let x_3006 : vec3<f32> = u_xlat1;
  let x_3008 : vec4<f32> = u_xlat2;
  let x_3011 : vec3<f32> = u_xlat0;
  u_xlat0 = ((-(x_3006) * vec3<f32>(x_3008.x, x_3008.y, x_3008.z)) + x_3011);
  let x_3013 : f32 = u_xlat3;
  let x_3015 : vec3<f32> = u_xlat0;
  let x_3017 : vec4<f32> = u_xlat6;
  u_xlat0 = ((vec3<f32>(x_3013, x_3013, x_3013) * x_3015) + vec3<f32>(x_3017.x, x_3017.y, x_3017.z));
  let x_3020 : vec4<f32> = u_xlat5;
  let x_3022 : vec3<f32> = u_xlat22;
  let x_3024 : vec3<f32> = u_xlat0;
  u_xlat0 = ((vec3<f32>(x_3020.x, x_3020.y, x_3020.z) * x_3022) + x_3024);
  let x_3026 : vec4<f32> = u_xlat7;
  let x_3028 : vec3<f32> = u_xlat0;
  u_xlat0 = (vec3<f32>(x_3026.x, x_3026.y, x_3026.z) + x_3028);
  let x_3030 : f32 = u_xlat57;
  let x_3032 : vec4<f32> = u_xlat4;
  let x_3035 : vec3<f32> = u_xlat0;
  u_xlat1 = ((vec3<f32>(x_3030, x_3030, x_3030) * vec3<f32>(x_3032.x, x_3032.z, x_3032.w)) + -(x_3035));
  let x_3040 : f32 = u_xlat57;
  let x_3042 : vec3<f32> = u_xlat1;
  let x_3044 : vec3<f32> = u_xlat0;
  let x_3045 : vec3<f32> = ((vec3<f32>(x_3040, x_3040, x_3040) * x_3042) + x_3044);
  let x_3046 : vec4<f32> = SV_Target0;
  SV_Target0 = vec4<f32>(x_3045.x, x_3045.y, x_3045.z, x_3046.w);
  SV_Target0.w = 1.0f;
  return;
}

struct main_out {
  @location(0)
  SV_Target0_1 : vec4<f32>,
}

@fragment
fn main(@location(6) vs_TEXCOORD6_param : vec4<f32>, @location(4) vs_TEXCOORD3_param : vec3<f32>, @location(5) vs_TEXCOORD5_param : vec4<f32>, @location(1) vs_TEXCOORD1_param : vec3<f32>, @location(0) vs_TEXCOORD0_param : vec4<f32>, @location(2) vs_NORMAL0_param : vec3<f32>, @location(3) vs_TEXCOORD2_param : vec3<f32>, @builtin(position) gl_FragCoord_param : vec4<f32>) -> main_out {
  vs_TEXCOORD6 = vs_TEXCOORD6_param;
  vs_TEXCOORD3 = vs_TEXCOORD3_param;
  vs_TEXCOORD5 = vs_TEXCOORD5_param;
  vs_TEXCOORD1 = vs_TEXCOORD1_param;
  vs_TEXCOORD0 = vs_TEXCOORD0_param;
  vs_NORMAL0 = vs_NORMAL0_param;
  vs_TEXCOORD2 = vs_TEXCOORD2_param;
  gl_FragCoord = gl_FragCoord_param;
  main_1();
  return main_out(SV_Target0);
}

