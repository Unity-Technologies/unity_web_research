struct PGlobals {
  x_ScaledScreenParams : vec4<f32>,
  x_GlobalMipBias : vec2<f32>,
  x_AlphaToMaskAvailable : f32,
  @size(4)
  padding : u32,
  x_MainLightPosition : vec4<f32>,
  x_MainLightColor : vec4<f32>,
  x_AmbientOcclusionParam : vec4<f32>,
  x_AdditionalLightsCount : vec4<f32>,
  x_WorldSpaceCameraPos : vec3<f32>,
  @size(4)
  padding_1 : u32,
  x_ProjectionParams : vec4<f32>,
  unity_OrthoParams : vec4<f32>,
  x_ScaleBiasRt : vec4<f32>,
  unity_FogParams : vec4<f32>,
  unity_FogColor : vec4<f32>,
  unity_MatrixV : mat4x4<f32>,
}

struct UnityPerMaterial {
  Texture2D_B222E8F_TexelSize : vec4<f32>,
  Color_C30C7CA3 : vec4<f32>,
  Texture2D_D9BFD5F1_TexelSize : vec4<f32>,
}

type Arr = array<mat4x4<f32>, 5u>;

struct MainLightShadows {
  x_MainLightWorldToShadow : Arr,
  x_CascadeShadowSplitSpheres0 : vec4<f32>,
  x_CascadeShadowSplitSpheres1 : vec4<f32>,
  x_CascadeShadowSplitSpheres2 : vec4<f32>,
  x_CascadeShadowSplitSpheres3 : vec4<f32>,
  x_CascadeShadowSplitSphereRadii : vec4<f32>,
  x_MainLightShadowOffset0 : vec4<f32>,
  x_MainLightShadowOffset1 : vec4<f32>,
  x_MainLightShadowParams : vec4<f32>,
  x_MainLightShadowmapSize : vec4<f32>,
}

type Arr_1 = array<vec4<f32>, 2u>;

struct UnityPerDraw {
  unity_ObjectToWorld : mat4x4<f32>,
  unity_WorldToObject : mat4x4<f32>,
  unity_LODFade : vec4<f32>,
  unity_WorldTransformParams : vec4<f32>,
  unity_RenderingLayer : vec4<f32>,
  unity_LightData : vec4<f32>,
  unity_LightIndices : Arr_1,
  unity_ProbesOcclusion : vec4<f32>,
  unity_SpecCube0_HDR : vec4<f32>,
  unity_SpecCube1_HDR : vec4<f32>,
  unity_SpecCube0_BoxMax : vec4<f32>,
  unity_SpecCube0_BoxMin : vec4<f32>,
  unity_SpecCube0_ProbePosition : vec4<f32>,
  unity_SpecCube1_BoxMax : vec4<f32>,
  unity_SpecCube1_BoxMin : vec4<f32>,
  unity_SpecCube1_ProbePosition : vec4<f32>,
  unity_LightmapST : vec4<f32>,
  unity_DynamicLightmapST : vec4<f32>,
  unity_SHAr : vec4<f32>,
  unity_SHAg : vec4<f32>,
  unity_SHAb : vec4<f32>,
  unity_SHBr : vec4<f32>,
  unity_SHBg : vec4<f32>,
  unity_SHBb : vec4<f32>,
  unity_SHC : vec4<f32>,
  unity_RendererBounds_Min : vec4<f32>,
  unity_RendererBounds_Max : vec4<f32>,
  unity_MatrixPreviousM : mat4x4<f32>,
  unity_MatrixPreviousMI : mat4x4<f32>,
  unity_MotionVectorsParams : vec4<f32>,
  unity_SpriteColor : vec4<f32>,
  unity_SpriteProps : vec4<f32>,
}

type Arr_2 = array<vec4<f32>, 256u>;

type Arr_3 = array<vec4<f32>, 256u>;

type Arr_4 = array<vec4<f32>, 256u>;

type Arr_5 = array<vec4<f32>, 256u>;

type Arr_6 = array<vec4<f32>, 256u>;

struct strided_arr {
  @size(16)
  el : f32,
}

type Arr_7 = array<strided_arr, 256u>;

struct AdditionalLights {
  x_AdditionalLightsPosition : Arr_6,
  x_AdditionalLightsColor : Arr_6,
  x_AdditionalLightsAttenuation : Arr_6,
  x_AdditionalLightsSpotDir : Arr_6,
  x_AdditionalLightsOcclusionProbes : Arr_6,
  x_AdditionalLightsLayerMasks : Arr_7,
}

var<private> gl_FragCoord : vec4<f32>;

var<private> vs_INTERP1 : vec3<f32>;

@group(0) @binding(5) var Texture2D_B222E8F : texture_2d<f32>;

@group(0) @binding(11) var samplerTexture2D_B222E8F : sampler;

var<private> vs_INTERP3 : vec4<f32>;

@group(1) @binding(0) var<uniform> x_66 : PGlobals;

@group(1) @binding(4) var<uniform> x_78 : UnityPerMaterial;

@group(0) @binding(6) var Texture2D_D9BFD5F1 : texture_2d<f32>;

@group(0) @binding(12) var samplerTexture2D_D9BFD5F1 : sampler;

var<private> vs_INTERP4 : vec4<f32>;

var<private> vs_INTERP0 : vec3<f32>;

@group(1) @binding(3) var<uniform> x_138 : MainLightShadows;

@group(0) @binding(4) var x_MainLightShadowmapTexture : texture_depth_2d;

@group(0) @binding(10) var sampler_MainLightShadowmapTexture : sampler_comparison;

var<private> vs_INTERP2 : vec4<f32>;

@group(1) @binding(2) var<uniform> x_1752 : UnityPerDraw;

@group(0) @binding(2) var unity_LightmapInd : texture_2d<f32>;

@group(0) @binding(8) var samplerunity_Lightmap : sampler;

var<private> vs_INTERP5 : vec2<f32>;

@group(0) @binding(1) var unity_Lightmap : texture_2d<f32>;

@group(0) @binding(3) var x_ScreenSpaceOcclusionTexture : texture_2d<f32>;

@group(0) @binding(9) var sampler_ScreenSpaceOcclusionTexture : sampler;

@group(0) @binding(0) var unity_SpecCube0 : texture_cube<f32>;

@group(0) @binding(7) var samplerunity_SpecCube0 : sampler;

@group(1) @binding(1) var<uniform> x_3604 : AdditionalLights;

var<private> SV_Target0 : vec4<f32>;

fn main_1() {
  var hlslcc_FragCoord : vec4<f32>;
  var u_xlat0 : vec3<f32>;
  var u_xlat1 : vec4<f32>;
  var u_xlat2 : vec3<f32>;
  var u_xlat3 : vec4<f32>;
  var u_xlat4 : vec4<f32>;
  var u_xlat66 : f32;
  var u_xlat25 : vec3<f32>;
  var u_xlat5 : vec4<f32>;
  var u_xlat6 : vec4<f32>;
  var u_xlat7 : vec4<f32>;
  var u_xlatb4 : vec4<bool>;
  var u_xlatu66 : u32;
  var u_xlati66 : i32;
  var u_xlatb66 : bool;
  var u_xlatb68 : bool;
  var txVec0 : vec3<f32>;
  var txVec1 : vec3<f32>;
  var txVec2 : vec3<f32>;
  var txVec3 : vec3<f32>;
  var u_xlat68 : f32;
  var u_xlatb70 : bool;
  var u_xlat49 : vec2<f32>;
  var u_xlat51 : vec2<f32>;
  var u_xlat8 : vec4<f32>;
  var u_xlat9 : vec4<f32>;
  var u_xlat10 : vec4<f32>;
  var u_xlat11 : vec4<f32>;
  var u_xlat12 : vec4<f32>;
  var u_xlat13 : vec4<f32>;
  var u_xlat70 : f32;
  var txVec4 : vec3<f32>;
  var txVec5 : vec3<f32>;
  var u_xlat27 : vec3<f32>;
  var txVec6 : vec3<f32>;
  var txVec7 : vec3<f32>;
  var txVec8 : vec3<f32>;
  var txVec9 : vec3<f32>;
  var txVec10 : vec3<f32>;
  var txVec11 : vec3<f32>;
  var txVec12 : vec3<f32>;
  var u_xlat28 : vec3<f32>;
  var u_xlat14 : vec4<f32>;
  var u_xlat15 : vec4<f32>;
  var u_xlat29 : vec2<f32>;
  var u_xlat57 : vec2<f32>;
  var u_xlat52 : vec2<f32>;
  var u_xlat16 : vec4<f32>;
  var u_xlat17 : vec4<f32>;
  var u_xlat18 : vec4<f32>;
  var txVec13 : vec3<f32>;
  var txVec14 : vec3<f32>;
  var txVec15 : vec3<f32>;
  var txVec16 : vec3<f32>;
  var txVec17 : vec3<f32>;
  var txVec18 : vec3<f32>;
  var txVec19 : vec3<f32>;
  var txVec20 : vec3<f32>;
  var txVec21 : vec3<f32>;
  var txVec22 : vec3<f32>;
  var txVec23 : vec3<f32>;
  var txVec24 : vec3<f32>;
  var txVec25 : vec3<f32>;
  var txVec26 : vec3<f32>;
  var txVec27 : vec3<f32>;
  var txVec28 : vec3<f32>;
  var txVec29 : vec3<f32>;
  var u_xlatb5 : bool;
  var u_xlatb27 : bool;
  var u_xlatb1 : bool;
  var x_1665 : f32;
  var u_xlat23 : vec3<f32>;
  var u_xlat45 : f32;
  var u_xlat67 : f32;
  var u_xlatb45 : bool;
  var x_1713 : f32;
  var u_xlatb23 : vec3<bool>;
  var x_1848 : vec3<f32>;
  var u_xlat72 : f32;
  var txVec30 : vec3<f32>;
  var txVec31 : vec3<f32>;
  var txVec32 : vec3<f32>;
  var txVec33 : vec3<f32>;
  var u_xlatb73 : bool;
  var u_xlat54 : vec2<f32>;
  var u_xlat73 : f32;
  var txVec34 : vec3<f32>;
  var txVec35 : vec3<f32>;
  var u_xlat30 : f32;
  var txVec36 : vec3<f32>;
  var txVec37 : vec3<f32>;
  var txVec38 : vec3<f32>;
  var txVec39 : vec3<f32>;
  var txVec40 : vec3<f32>;
  var txVec41 : vec3<f32>;
  var txVec42 : vec3<f32>;
  var u_xlat31 : vec3<f32>;
  var u_xlat32 : vec2<f32>;
  var u_xlat60 : vec2<f32>;
  var u_xlat55 : vec2<f32>;
  var u_xlat19 : vec4<f32>;
  var u_xlat20 : vec4<f32>;
  var u_xlat21 : vec4<f32>;
  var txVec43 : vec3<f32>;
  var txVec44 : vec3<f32>;
  var txVec45 : vec3<f32>;
  var txVec46 : vec3<f32>;
  var txVec47 : vec3<f32>;
  var txVec48 : vec3<f32>;
  var txVec49 : vec3<f32>;
  var txVec50 : vec3<f32>;
  var txVec51 : vec3<f32>;
  var txVec52 : vec3<f32>;
  var txVec53 : vec3<f32>;
  var txVec54 : vec3<f32>;
  var txVec55 : vec3<f32>;
  var txVec56 : vec3<f32>;
  var txVec57 : vec3<f32>;
  var txVec58 : vec3<f32>;
  var txVec59 : vec3<f32>;
  var u_xlat26 : f32;
  var u_xlatu_loop_1 : u32;
  var u_xlatu68 : u32;
  var u_xlati3 : i32;
  var indexable : array<vec4<u32>, 4u>;
  var u_xlati68 : i32;
  var x_3854 : f32;
  var u_xlat_precise_vec4 : vec4<f32>;
  var u_xlat_precise_ivec4 : vec4<i32>;
  var u_xlat_precise_bvec4 : vec4<bool>;
  var u_xlat_precise_uvec4 : vec4<u32>;
  let x_13 : vec4<f32> = gl_FragCoord;
  let x_14 : vec3<f32> = vec3<f32>(x_13.x, x_13.y, x_13.z);
  let x_20 : f32 = gl_FragCoord.w;
  hlslcc_FragCoord = vec4<f32>(x_14.x, x_14.y, x_14.z, (1.0f / x_20));
  let x_30 : vec3<f32> = vs_INTERP1;
  let x_31 : vec3<f32> = vs_INTERP1;
  u_xlat0.x = dot(x_30, x_31);
  let x_37 : f32 = u_xlat0.x;
  u_xlat0.x = sqrt(x_37);
  let x_41 : f32 = u_xlat0.x;
  u_xlat0.x = (1.0f / x_41);
  let x_44 : vec3<f32> = u_xlat0;
  let x_46 : vec3<f32> = vs_INTERP1;
  u_xlat0 = (vec3<f32>(x_44.x, x_44.x, x_44.x) * x_46);
  let x_61 : vec4<f32> = vs_INTERP3;
  let x_71 : f32 = x_66.x_GlobalMipBias.x;
  let x_72 : vec4<f32> = textureSampleBias(Texture2D_B222E8F, samplerTexture2D_B222E8F, vec2<f32>(x_61.x, x_61.y), x_71);
  u_xlat1 = x_72;
  let x_74 : vec4<f32> = u_xlat1;
  let x_81 : vec4<f32> = x_78.Color_C30C7CA3;
  u_xlat2 = (vec3<f32>(x_74.x, x_74.y, x_74.z) * vec3<f32>(x_81.x, x_81.y, x_81.z));
  let x_90 : vec4<f32> = vs_INTERP3;
  let x_93 : f32 = x_66.x_GlobalMipBias.x;
  let x_94 : vec4<f32> = textureSampleBias(Texture2D_D9BFD5F1, samplerTexture2D_D9BFD5F1, vec2<f32>(x_90.x, x_90.y), x_93);
  u_xlat3 = vec4<f32>(x_94.w, x_94.x, x_94.y, x_94.z);
  let x_97 : vec4<f32> = u_xlat3;
  u_xlat4 = ((vec4<f32>(x_97.y, x_97.z, x_97.w, x_97.x) * vec4<f32>(2.0f, 2.0f, 2.0f, 2.0f)) + vec4<f32>(-1.0f, -1.0f, -1.0f, -1.0f));
  let x_106 : vec4<f32> = u_xlat4;
  let x_107 : vec4<f32> = u_xlat4;
  u_xlat66 = dot(x_106, x_107);
  let x_109 : f32 = u_xlat66;
  u_xlat66 = inverseSqrt(x_109);
  let x_112 : f32 = u_xlat66;
  let x_114 : vec4<f32> = u_xlat4;
  u_xlat25 = (vec3<f32>(x_112, x_112, x_112) * vec3<f32>(x_114.x, x_114.y, x_114.z));
  let x_120 : f32 = vs_INTERP4.y;
  u_xlat66 = (x_120 * 200.0f);
  let x_123 : f32 = u_xlat66;
  u_xlat66 = min(x_123, 1.0f);
  let x_125 : f32 = u_xlat66;
  let x_127 : vec4<f32> = u_xlat1;
  let x_129 : vec3<f32> = (vec3<f32>(x_125, x_125, x_125) * vec3<f32>(x_127.x, x_127.y, x_127.z));
  let x_130 : vec4<f32> = u_xlat1;
  u_xlat1 = vec4<f32>(x_129.x, x_129.y, x_129.z, x_130.w);
  let x_133 : vec3<f32> = vs_INTERP0;
  let x_140 : vec4<f32> = x_138.x_CascadeShadowSplitSpheres0;
  let x_143 : vec3<f32> = (x_133 + -(vec3<f32>(x_140.x, x_140.y, x_140.z)));
  let x_144 : vec4<f32> = u_xlat4;
  u_xlat4 = vec4<f32>(x_143.x, x_143.y, x_143.z, x_144.w);
  let x_147 : vec3<f32> = vs_INTERP0;
  let x_150 : vec4<f32> = x_138.x_CascadeShadowSplitSpheres1;
  let x_153 : vec3<f32> = (x_147 + -(vec3<f32>(x_150.x, x_150.y, x_150.z)));
  let x_154 : vec4<f32> = u_xlat5;
  u_xlat5 = vec4<f32>(x_153.x, x_153.y, x_153.z, x_154.w);
  let x_157 : vec3<f32> = vs_INTERP0;
  let x_160 : vec4<f32> = x_138.x_CascadeShadowSplitSpheres2;
  let x_163 : vec3<f32> = (x_157 + -(vec3<f32>(x_160.x, x_160.y, x_160.z)));
  let x_164 : vec4<f32> = u_xlat6;
  u_xlat6 = vec4<f32>(x_163.x, x_163.y, x_163.z, x_164.w);
  let x_167 : vec3<f32> = vs_INTERP0;
  let x_170 : vec4<f32> = x_138.x_CascadeShadowSplitSpheres3;
  let x_173 : vec3<f32> = (x_167 + -(vec3<f32>(x_170.x, x_170.y, x_170.z)));
  let x_174 : vec4<f32> = u_xlat7;
  u_xlat7 = vec4<f32>(x_173.x, x_173.y, x_173.z, x_174.w);
  let x_176 : vec4<f32> = u_xlat4;
  let x_178 : vec4<f32> = u_xlat4;
  u_xlat4.x = dot(vec3<f32>(x_176.x, x_176.y, x_176.z), vec3<f32>(x_178.x, x_178.y, x_178.z));
  let x_182 : vec4<f32> = u_xlat5;
  let x_184 : vec4<f32> = u_xlat5;
  u_xlat4.y = dot(vec3<f32>(x_182.x, x_182.y, x_182.z), vec3<f32>(x_184.x, x_184.y, x_184.z));
  let x_188 : vec4<f32> = u_xlat6;
  let x_190 : vec4<f32> = u_xlat6;
  u_xlat4.z = dot(vec3<f32>(x_188.x, x_188.y, x_188.z), vec3<f32>(x_190.x, x_190.y, x_190.z));
  let x_195 : vec4<f32> = u_xlat7;
  let x_197 : vec4<f32> = u_xlat7;
  u_xlat4.w = dot(vec3<f32>(x_195.x, x_195.y, x_195.z), vec3<f32>(x_197.x, x_197.y, x_197.z));
  let x_205 : vec4<f32> = u_xlat4;
  let x_208 : vec4<f32> = x_138.x_CascadeShadowSplitSphereRadii;
  u_xlatb4 = (x_205 < x_208);
  let x_212 : bool = u_xlatb4.x;
  u_xlat5.x = select(0.0f, 1.0f, x_212);
  let x_217 : bool = u_xlatb4.y;
  u_xlat5.y = select(0.0f, 1.0f, x_217);
  let x_221 : bool = u_xlatb4.z;
  u_xlat5.z = select(0.0f, 1.0f, x_221);
  let x_225 : bool = u_xlatb4.w;
  u_xlat5.w = select(0.0f, 1.0f, x_225);
  let x_229 : bool = u_xlatb4.x;
  u_xlat4.x = select(-0.0f, -1.0f, x_229);
  let x_234 : bool = u_xlatb4.y;
  u_xlat4.y = select(-0.0f, -1.0f, x_234);
  let x_238 : bool = u_xlatb4.z;
  u_xlat4.z = select(-0.0f, -1.0f, x_238);
  let x_241 : vec4<f32> = u_xlat4;
  let x_243 : vec4<f32> = u_xlat5;
  let x_245 : vec3<f32> = (vec3<f32>(x_241.x, x_241.y, x_241.z) + vec3<f32>(x_243.y, x_243.z, x_243.w));
  let x_246 : vec4<f32> = u_xlat4;
  u_xlat4 = vec4<f32>(x_245.x, x_245.y, x_245.z, x_246.w);
  let x_248 : vec4<f32> = u_xlat4;
  let x_251 : vec3<f32> = max(vec3<f32>(x_248.x, x_248.y, x_248.z), vec3<f32>(0.0f, 0.0f, 0.0f));
  let x_252 : vec4<f32> = u_xlat5;
  u_xlat5 = vec4<f32>(x_252.x, x_251.x, x_251.y, x_251.z);
  let x_254 : vec4<f32> = u_xlat5;
  u_xlat66 = dot(x_254, vec4<f32>(4.0f, 3.0f, 2.0f, 1.0f));
  let x_259 : f32 = u_xlat66;
  u_xlat66 = (-(x_259) + 4.0f);
  let x_264 : f32 = u_xlat66;
  u_xlatu66 = u32(x_264);
  let x_268 : u32 = u_xlatu66;
  u_xlati66 = (bitcast<i32>(x_268) << bitcast<u32>(2i));
  let x_271 : vec3<f32> = vs_INTERP0;
  let x_274 : i32 = u_xlati66;
  let x_277 : i32 = u_xlati66;
  let x_281 : vec4<f32> = x_138.x_MainLightWorldToShadow[((x_274 + 1i) / 4i)][((x_277 + 1i) % 4i)];
  let x_283 : vec3<f32> = (vec3<f32>(x_271.y, x_271.y, x_271.y) * vec3<f32>(x_281.x, x_281.y, x_281.z));
  let x_284 : vec4<f32> = u_xlat4;
  u_xlat4 = vec4<f32>(x_283.x, x_283.y, x_283.z, x_284.w);
  let x_286 : i32 = u_xlati66;
  let x_288 : i32 = u_xlati66;
  let x_291 : vec4<f32> = x_138.x_MainLightWorldToShadow[(x_286 / 4i)][(x_288 % 4i)];
  let x_293 : vec3<f32> = vs_INTERP0;
  let x_296 : vec4<f32> = u_xlat4;
  let x_298 : vec3<f32> = ((vec3<f32>(x_291.x, x_291.y, x_291.z) * vec3<f32>(x_293.x, x_293.x, x_293.x)) + vec3<f32>(x_296.x, x_296.y, x_296.z));
  let x_299 : vec4<f32> = u_xlat4;
  u_xlat4 = vec4<f32>(x_298.x, x_298.y, x_298.z, x_299.w);
  let x_301 : i32 = u_xlati66;
  let x_304 : i32 = u_xlati66;
  let x_308 : vec4<f32> = x_138.x_MainLightWorldToShadow[((x_301 + 2i) / 4i)][((x_304 + 2i) % 4i)];
  let x_310 : vec3<f32> = vs_INTERP0;
  let x_313 : vec4<f32> = u_xlat4;
  let x_315 : vec3<f32> = ((vec3<f32>(x_308.x, x_308.y, x_308.z) * vec3<f32>(x_310.z, x_310.z, x_310.z)) + vec3<f32>(x_313.x, x_313.y, x_313.z));
  let x_316 : vec4<f32> = u_xlat4;
  u_xlat4 = vec4<f32>(x_315.x, x_315.y, x_315.z, x_316.w);
  let x_318 : vec4<f32> = u_xlat4;
  let x_320 : i32 = u_xlati66;
  let x_323 : i32 = u_xlati66;
  let x_327 : vec4<f32> = x_138.x_MainLightWorldToShadow[((x_320 + 3i) / 4i)][((x_323 + 3i) % 4i)];
  let x_329 : vec3<f32> = (vec3<f32>(x_318.x, x_318.y, x_318.z) + vec3<f32>(x_327.x, x_327.y, x_327.z));
  let x_330 : vec4<f32> = u_xlat4;
  u_xlat4 = vec4<f32>(x_329.x, x_329.y, x_329.z, x_330.w);
  let x_335 : f32 = x_138.x_MainLightShadowParams.y;
  u_xlatb66 = (0.0f < x_335);
  let x_337 : bool = u_xlatb66;
  if (x_337) {
    let x_342 : f32 = x_138.x_MainLightShadowParams.y;
    u_xlatb68 = (x_342 == 1.0f);
    let x_344 : bool = u_xlatb68;
    if (x_344) {
      let x_347 : vec4<f32> = u_xlat4;
      let x_351 : vec4<f32> = x_138.x_MainLightShadowOffset0;
      u_xlat5 = (vec4<f32>(x_347.x, x_347.y, x_347.x, x_347.y) + x_351);
      let x_354 : vec4<f32> = u_xlat5;
      let x_355 : vec2<f32> = vec2<f32>(x_354.x, x_354.y);
      let x_357 : f32 = u_xlat4.z;
      txVec0 = vec3<f32>(x_355.x, x_355.y, x_357);
      let x_369 : vec3<f32> = txVec0;
      let x_371 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_369.xy, x_369.z);
      u_xlat6.x = x_371;
      let x_374 : vec4<f32> = u_xlat5;
      let x_375 : vec2<f32> = vec2<f32>(x_374.z, x_374.w);
      let x_377 : f32 = u_xlat4.z;
      txVec1 = vec3<f32>(x_375.x, x_375.y, x_377);
      let x_384 : vec3<f32> = txVec1;
      let x_386 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_384.xy, x_384.z);
      u_xlat6.y = x_386;
      let x_388 : vec4<f32> = u_xlat4;
      let x_392 : vec4<f32> = x_138.x_MainLightShadowOffset1;
      u_xlat5 = (vec4<f32>(x_388.x, x_388.y, x_388.x, x_388.y) + x_392);
      let x_395 : vec4<f32> = u_xlat5;
      let x_396 : vec2<f32> = vec2<f32>(x_395.x, x_395.y);
      let x_398 : f32 = u_xlat4.z;
      txVec2 = vec3<f32>(x_396.x, x_396.y, x_398);
      let x_405 : vec3<f32> = txVec2;
      let x_407 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_405.xy, x_405.z);
      u_xlat6.z = x_407;
      let x_410 : vec4<f32> = u_xlat5;
      let x_411 : vec2<f32> = vec2<f32>(x_410.z, x_410.w);
      let x_413 : f32 = u_xlat4.z;
      txVec3 = vec3<f32>(x_411.x, x_411.y, x_413);
      let x_420 : vec3<f32> = txVec3;
      let x_422 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_420.xy, x_420.z);
      u_xlat6.w = x_422;
      let x_425 : vec4<f32> = u_xlat6;
      u_xlat68 = dot(x_425, vec4<f32>(0.25f, 0.25f, 0.25f, 0.25f));
    } else {
      let x_432 : f32 = x_138.x_MainLightShadowParams.y;
      u_xlatb70 = (x_432 == 2.0f);
      let x_434 : bool = u_xlatb70;
      if (x_434) {
        let x_437 : vec4<f32> = u_xlat4;
        let x_441 : vec4<f32> = x_138.x_MainLightShadowmapSize;
        let x_446 : vec2<f32> = ((vec2<f32>(x_437.x, x_437.y) * vec2<f32>(x_441.z, x_441.w)) + vec2<f32>(0.5f, 0.5f));
        let x_447 : vec4<f32> = u_xlat5;
        u_xlat5 = vec4<f32>(x_446.x, x_446.y, x_447.z, x_447.w);
        let x_449 : vec4<f32> = u_xlat5;
        let x_451 : vec2<f32> = floor(vec2<f32>(x_449.x, x_449.y));
        let x_452 : vec4<f32> = u_xlat5;
        u_xlat5 = vec4<f32>(x_451.x, x_451.y, x_452.z, x_452.w);
        let x_456 : vec4<f32> = u_xlat4;
        let x_459 : vec4<f32> = x_138.x_MainLightShadowmapSize;
        let x_462 : vec4<f32> = u_xlat5;
        u_xlat49 = ((vec2<f32>(x_456.x, x_456.y) * vec2<f32>(x_459.z, x_459.w)) + -(vec2<f32>(x_462.x, x_462.y)));
        let x_466 : vec2<f32> = u_xlat49;
        u_xlat6 = (vec4<f32>(x_466.x, x_466.x, x_466.y, x_466.y) + vec4<f32>(0.5f, 1.0f, 0.5f, 1.0f));
        let x_470 : vec4<f32> = u_xlat6;
        let x_472 : vec4<f32> = u_xlat6;
        u_xlat7 = (vec4<f32>(x_470.x, x_470.x, x_470.z, x_470.z) * vec4<f32>(x_472.x, x_472.x, x_472.z, x_472.z));
        let x_475 : vec4<f32> = u_xlat7;
        let x_479 : vec2<f32> = (vec2<f32>(x_475.y, x_475.w) * vec2<f32>(0.079999998f, 0.079999998f));
        let x_480 : vec4<f32> = u_xlat6;
        u_xlat6 = vec4<f32>(x_479.x, x_480.y, x_479.y, x_480.w);
        let x_482 : vec4<f32> = u_xlat7;
        let x_485 : vec2<f32> = u_xlat49;
        let x_487 : vec2<f32> = ((vec2<f32>(x_482.x, x_482.z) * vec2<f32>(0.5f, 0.5f)) + -(x_485));
        let x_488 : vec4<f32> = u_xlat7;
        u_xlat7 = vec4<f32>(x_487.x, x_487.y, x_488.z, x_488.w);
        let x_491 : vec2<f32> = u_xlat49;
        u_xlat51 = (-(x_491) + vec2<f32>(1.0f, 1.0f));
        let x_496 : vec2<f32> = u_xlat49;
        let x_498 : vec2<f32> = min(x_496, vec2<f32>(0.0f, 0.0f));
        let x_499 : vec4<f32> = u_xlat8;
        u_xlat8 = vec4<f32>(x_498.x, x_498.y, x_499.z, x_499.w);
        let x_501 : vec4<f32> = u_xlat8;
        let x_504 : vec4<f32> = u_xlat8;
        let x_507 : vec2<f32> = u_xlat51;
        let x_508 : vec2<f32> = ((-(vec2<f32>(x_501.x, x_501.y)) * vec2<f32>(x_504.x, x_504.y)) + x_507);
        let x_509 : vec4<f32> = u_xlat8;
        u_xlat8 = vec4<f32>(x_508.x, x_508.y, x_509.z, x_509.w);
        let x_511 : vec2<f32> = u_xlat49;
        u_xlat49 = max(x_511, vec2<f32>(0.0f, 0.0f));
        let x_513 : vec2<f32> = u_xlat49;
        let x_515 : vec2<f32> = u_xlat49;
        let x_517 : vec4<f32> = u_xlat6;
        u_xlat49 = ((-(x_513) * x_515) + vec2<f32>(x_517.y, x_517.w));
        let x_520 : vec4<f32> = u_xlat8;
        let x_522 : vec2<f32> = (vec2<f32>(x_520.x, x_520.y) + vec2<f32>(1.0f, 1.0f));
        let x_523 : vec4<f32> = u_xlat8;
        u_xlat8 = vec4<f32>(x_522.x, x_522.y, x_523.z, x_523.w);
        let x_525 : vec2<f32> = u_xlat49;
        u_xlat49 = (x_525 + vec2<f32>(1.0f, 1.0f));
        let x_528 : vec4<f32> = u_xlat7;
        let x_532 : vec2<f32> = (vec2<f32>(x_528.x, x_528.y) * vec2<f32>(0.159999996f, 0.159999996f));
        let x_533 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_532.x, x_532.y, x_533.z, x_533.w);
        let x_535 : vec2<f32> = u_xlat51;
        let x_536 : vec2<f32> = (x_535 * vec2<f32>(0.159999996f, 0.159999996f));
        let x_537 : vec4<f32> = u_xlat7;
        u_xlat7 = vec4<f32>(x_536.x, x_536.y, x_537.z, x_537.w);
        let x_539 : vec4<f32> = u_xlat8;
        let x_541 : vec2<f32> = (vec2<f32>(x_539.x, x_539.y) * vec2<f32>(0.159999996f, 0.159999996f));
        let x_542 : vec4<f32> = u_xlat8;
        u_xlat8 = vec4<f32>(x_541.x, x_541.y, x_542.z, x_542.w);
        let x_545 : vec2<f32> = u_xlat49;
        let x_546 : vec2<f32> = (x_545 * vec2<f32>(0.159999996f, 0.159999996f));
        let x_547 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_546.x, x_546.y, x_547.z, x_547.w);
        let x_549 : vec4<f32> = u_xlat6;
        u_xlat49 = (vec2<f32>(x_549.y, x_549.w) * vec2<f32>(0.159999996f, 0.159999996f));
        let x_553 : f32 = u_xlat8.x;
        u_xlat9.z = x_553;
        let x_556 : f32 = u_xlat49.x;
        u_xlat9.w = x_556;
        let x_559 : f32 = u_xlat10.x;
        u_xlat7.z = x_559;
        let x_562 : f32 = u_xlat6.x;
        u_xlat7.w = x_562;
        let x_565 : vec4<f32> = u_xlat7;
        let x_567 : vec4<f32> = u_xlat9;
        u_xlat11 = (vec4<f32>(x_565.z, x_565.w, x_565.x, x_565.z) + vec4<f32>(x_567.z, x_567.w, x_567.x, x_567.z));
        let x_571 : f32 = u_xlat9.y;
        u_xlat8.z = x_571;
        let x_574 : f32 = u_xlat49.y;
        u_xlat8.w = x_574;
        let x_577 : f32 = u_xlat7.y;
        u_xlat10.z = x_577;
        let x_580 : f32 = u_xlat6.z;
        u_xlat10.w = x_580;
        let x_582 : vec4<f32> = u_xlat8;
        let x_584 : vec4<f32> = u_xlat10;
        let x_586 : vec3<f32> = (vec3<f32>(x_582.z, x_582.y, x_582.w) + vec3<f32>(x_584.z, x_584.y, x_584.w));
        let x_587 : vec4<f32> = u_xlat6;
        u_xlat6 = vec4<f32>(x_586.x, x_586.y, x_586.z, x_587.w);
        let x_589 : vec4<f32> = u_xlat7;
        let x_591 : vec4<f32> = u_xlat11;
        let x_593 : vec3<f32> = (vec3<f32>(x_589.x, x_589.z, x_589.w) / vec3<f32>(x_591.z, x_591.w, x_591.y));
        let x_594 : vec4<f32> = u_xlat7;
        u_xlat7 = vec4<f32>(x_593.x, x_593.y, x_593.z, x_594.w);
        let x_596 : vec4<f32> = u_xlat7;
        let x_602 : vec3<f32> = (vec3<f32>(x_596.x, x_596.y, x_596.z) + vec3<f32>(-2.5f, -0.5f, 1.5f));
        let x_603 : vec4<f32> = u_xlat7;
        u_xlat7 = vec4<f32>(x_602.x, x_602.y, x_602.z, x_603.w);
        let x_605 : vec4<f32> = u_xlat10;
        let x_607 : vec4<f32> = u_xlat6;
        let x_609 : vec3<f32> = (vec3<f32>(x_605.z, x_605.y, x_605.w) / vec3<f32>(x_607.x, x_607.y, x_607.z));
        let x_610 : vec4<f32> = u_xlat8;
        u_xlat8 = vec4<f32>(x_609.x, x_609.y, x_609.z, x_610.w);
        let x_612 : vec4<f32> = u_xlat8;
        let x_614 : vec3<f32> = (vec3<f32>(x_612.x, x_612.y, x_612.z) + vec3<f32>(-2.5f, -0.5f, 1.5f));
        let x_615 : vec4<f32> = u_xlat8;
        u_xlat8 = vec4<f32>(x_614.x, x_614.y, x_614.z, x_615.w);
        let x_617 : vec4<f32> = u_xlat7;
        let x_620 : vec4<f32> = x_138.x_MainLightShadowmapSize;
        let x_622 : vec3<f32> = (vec3<f32>(x_617.y, x_617.x, x_617.z) * vec3<f32>(x_620.x, x_620.x, x_620.x));
        let x_623 : vec4<f32> = u_xlat7;
        u_xlat7 = vec4<f32>(x_622.x, x_622.y, x_622.z, x_623.w);
        let x_625 : vec4<f32> = u_xlat8;
        let x_628 : vec4<f32> = x_138.x_MainLightShadowmapSize;
        let x_630 : vec3<f32> = (vec3<f32>(x_625.x, x_625.y, x_625.z) * vec3<f32>(x_628.y, x_628.y, x_628.y));
        let x_631 : vec4<f32> = u_xlat8;
        u_xlat8 = vec4<f32>(x_630.x, x_630.y, x_630.z, x_631.w);
        let x_634 : f32 = u_xlat8.x;
        u_xlat7.w = x_634;
        let x_636 : vec4<f32> = u_xlat5;
        let x_639 : vec4<f32> = x_138.x_MainLightShadowmapSize;
        let x_642 : vec4<f32> = u_xlat7;
        u_xlat9 = ((vec4<f32>(x_636.x, x_636.y, x_636.x, x_636.y) * vec4<f32>(x_639.x, x_639.y, x_639.x, x_639.y)) + vec4<f32>(x_642.y, x_642.w, x_642.x, x_642.w));
        let x_645 : vec4<f32> = u_xlat5;
        let x_648 : vec4<f32> = x_138.x_MainLightShadowmapSize;
        let x_651 : vec4<f32> = u_xlat7;
        u_xlat49 = ((vec2<f32>(x_645.x, x_645.y) * vec2<f32>(x_648.x, x_648.y)) + vec2<f32>(x_651.z, x_651.w));
        let x_655 : f32 = u_xlat7.y;
        u_xlat8.w = x_655;
        let x_657 : vec4<f32> = u_xlat8;
        let x_658 : vec2<f32> = vec2<f32>(x_657.y, x_657.z);
        let x_659 : vec4<f32> = u_xlat7;
        u_xlat7 = vec4<f32>(x_659.x, x_658.x, x_659.z, x_658.y);
        let x_661 : vec4<f32> = u_xlat5;
        let x_664 : vec4<f32> = x_138.x_MainLightShadowmapSize;
        let x_667 : vec4<f32> = u_xlat7;
        u_xlat10 = ((vec4<f32>(x_661.x, x_661.y, x_661.x, x_661.y) * vec4<f32>(x_664.x, x_664.y, x_664.x, x_664.y)) + vec4<f32>(x_667.x, x_667.y, x_667.z, x_667.y));
        let x_670 : vec4<f32> = u_xlat5;
        let x_673 : vec4<f32> = x_138.x_MainLightShadowmapSize;
        let x_676 : vec4<f32> = u_xlat8;
        u_xlat8 = ((vec4<f32>(x_670.x, x_670.y, x_670.x, x_670.y) * vec4<f32>(x_673.x, x_673.y, x_673.x, x_673.y)) + vec4<f32>(x_676.w, x_676.y, x_676.w, x_676.z));
        let x_679 : vec4<f32> = u_xlat5;
        let x_682 : vec4<f32> = x_138.x_MainLightShadowmapSize;
        let x_685 : vec4<f32> = u_xlat7;
        u_xlat7 = ((vec4<f32>(x_679.x, x_679.y, x_679.x, x_679.y) * vec4<f32>(x_682.x, x_682.y, x_682.x, x_682.y)) + vec4<f32>(x_685.x, x_685.w, x_685.z, x_685.w));
        let x_689 : vec4<f32> = u_xlat6;
        let x_691 : vec4<f32> = u_xlat11;
        u_xlat12 = (vec4<f32>(x_689.x, x_689.x, x_689.x, x_689.y) * vec4<f32>(x_691.z, x_691.w, x_691.y, x_691.z));
        let x_695 : vec4<f32> = u_xlat6;
        let x_697 : vec4<f32> = u_xlat11;
        u_xlat13 = (vec4<f32>(x_695.y, x_695.y, x_695.z, x_695.z) * x_697);
        let x_701 : f32 = u_xlat6.z;
        let x_703 : f32 = u_xlat11.y;
        u_xlat70 = (x_701 * x_703);
        let x_706 : vec4<f32> = u_xlat9;
        let x_707 : vec2<f32> = vec2<f32>(x_706.x, x_706.y);
        let x_709 : f32 = u_xlat4.z;
        txVec4 = vec3<f32>(x_707.x, x_707.y, x_709);
        let x_716 : vec3<f32> = txVec4;
        let x_718 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_716.xy, x_716.z);
        u_xlat5.x = x_718;
        let x_721 : vec4<f32> = u_xlat9;
        let x_722 : vec2<f32> = vec2<f32>(x_721.z, x_721.w);
        let x_724 : f32 = u_xlat4.z;
        txVec5 = vec3<f32>(x_722.x, x_722.y, x_724);
        let x_732 : vec3<f32> = txVec5;
        let x_734 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_732.xy, x_732.z);
        u_xlat27.x = x_734;
        let x_737 : f32 = u_xlat27.x;
        let x_739 : f32 = u_xlat12.y;
        u_xlat27.x = (x_737 * x_739);
        let x_743 : f32 = u_xlat12.x;
        let x_745 : f32 = u_xlat5.x;
        let x_748 : f32 = u_xlat27.x;
        u_xlat5.x = ((x_743 * x_745) + x_748);
        let x_752 : vec2<f32> = u_xlat49;
        let x_754 : f32 = u_xlat4.z;
        txVec6 = vec3<f32>(x_752.x, x_752.y, x_754);
        let x_761 : vec3<f32> = txVec6;
        let x_763 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_761.xy, x_761.z);
        u_xlat27.x = x_763;
        let x_766 : f32 = u_xlat12.z;
        let x_768 : f32 = u_xlat27.x;
        let x_771 : f32 = u_xlat5.x;
        u_xlat5.x = ((x_766 * x_768) + x_771);
        let x_775 : vec4<f32> = u_xlat8;
        let x_776 : vec2<f32> = vec2<f32>(x_775.x, x_775.y);
        let x_778 : f32 = u_xlat4.z;
        txVec7 = vec3<f32>(x_776.x, x_776.y, x_778);
        let x_785 : vec3<f32> = txVec7;
        let x_787 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_785.xy, x_785.z);
        u_xlat27.x = x_787;
        let x_790 : f32 = u_xlat12.w;
        let x_792 : f32 = u_xlat27.x;
        let x_795 : f32 = u_xlat5.x;
        u_xlat5.x = ((x_790 * x_792) + x_795);
        let x_799 : vec4<f32> = u_xlat10;
        let x_800 : vec2<f32> = vec2<f32>(x_799.x, x_799.y);
        let x_802 : f32 = u_xlat4.z;
        txVec8 = vec3<f32>(x_800.x, x_800.y, x_802);
        let x_809 : vec3<f32> = txVec8;
        let x_811 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_809.xy, x_809.z);
        u_xlat27.x = x_811;
        let x_814 : f32 = u_xlat13.x;
        let x_816 : f32 = u_xlat27.x;
        let x_819 : f32 = u_xlat5.x;
        u_xlat5.x = ((x_814 * x_816) + x_819);
        let x_823 : vec4<f32> = u_xlat10;
        let x_824 : vec2<f32> = vec2<f32>(x_823.z, x_823.w);
        let x_826 : f32 = u_xlat4.z;
        txVec9 = vec3<f32>(x_824.x, x_824.y, x_826);
        let x_833 : vec3<f32> = txVec9;
        let x_835 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_833.xy, x_833.z);
        u_xlat27.x = x_835;
        let x_838 : f32 = u_xlat13.y;
        let x_840 : f32 = u_xlat27.x;
        let x_843 : f32 = u_xlat5.x;
        u_xlat5.x = ((x_838 * x_840) + x_843);
        let x_847 : vec4<f32> = u_xlat8;
        let x_848 : vec2<f32> = vec2<f32>(x_847.z, x_847.w);
        let x_850 : f32 = u_xlat4.z;
        txVec10 = vec3<f32>(x_848.x, x_848.y, x_850);
        let x_857 : vec3<f32> = txVec10;
        let x_859 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_857.xy, x_857.z);
        u_xlat27.x = x_859;
        let x_862 : f32 = u_xlat13.z;
        let x_864 : f32 = u_xlat27.x;
        let x_867 : f32 = u_xlat5.x;
        u_xlat5.x = ((x_862 * x_864) + x_867);
        let x_871 : vec4<f32> = u_xlat7;
        let x_872 : vec2<f32> = vec2<f32>(x_871.x, x_871.y);
        let x_874 : f32 = u_xlat4.z;
        txVec11 = vec3<f32>(x_872.x, x_872.y, x_874);
        let x_881 : vec3<f32> = txVec11;
        let x_883 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_881.xy, x_881.z);
        u_xlat27.x = x_883;
        let x_886 : f32 = u_xlat13.w;
        let x_888 : f32 = u_xlat27.x;
        let x_891 : f32 = u_xlat5.x;
        u_xlat5.x = ((x_886 * x_888) + x_891);
        let x_895 : vec4<f32> = u_xlat7;
        let x_896 : vec2<f32> = vec2<f32>(x_895.z, x_895.w);
        let x_898 : f32 = u_xlat4.z;
        txVec12 = vec3<f32>(x_896.x, x_896.y, x_898);
        let x_905 : vec3<f32> = txVec12;
        let x_907 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_905.xy, x_905.z);
        u_xlat27.x = x_907;
        let x_909 : f32 = u_xlat70;
        let x_911 : f32 = u_xlat27.x;
        let x_914 : f32 = u_xlat5.x;
        u_xlat68 = ((x_909 * x_911) + x_914);
      } else {
        let x_917 : vec4<f32> = u_xlat4;
        let x_920 : vec4<f32> = x_138.x_MainLightShadowmapSize;
        let x_923 : vec2<f32> = ((vec2<f32>(x_917.x, x_917.y) * vec2<f32>(x_920.z, x_920.w)) + vec2<f32>(0.5f, 0.5f));
        let x_924 : vec4<f32> = u_xlat5;
        u_xlat5 = vec4<f32>(x_923.x, x_923.y, x_924.z, x_924.w);
        let x_926 : vec4<f32> = u_xlat5;
        let x_928 : vec2<f32> = floor(vec2<f32>(x_926.x, x_926.y));
        let x_929 : vec4<f32> = u_xlat5;
        u_xlat5 = vec4<f32>(x_928.x, x_928.y, x_929.z, x_929.w);
        let x_931 : vec4<f32> = u_xlat4;
        let x_934 : vec4<f32> = x_138.x_MainLightShadowmapSize;
        let x_937 : vec4<f32> = u_xlat5;
        u_xlat49 = ((vec2<f32>(x_931.x, x_931.y) * vec2<f32>(x_934.z, x_934.w)) + -(vec2<f32>(x_937.x, x_937.y)));
        let x_941 : vec2<f32> = u_xlat49;
        u_xlat6 = (vec4<f32>(x_941.x, x_941.x, x_941.y, x_941.y) + vec4<f32>(0.5f, 1.0f, 0.5f, 1.0f));
        let x_944 : vec4<f32> = u_xlat6;
        let x_946 : vec4<f32> = u_xlat6;
        u_xlat7 = (vec4<f32>(x_944.x, x_944.x, x_944.z, x_944.z) * vec4<f32>(x_946.x, x_946.x, x_946.z, x_946.z));
        let x_949 : vec4<f32> = u_xlat7;
        let x_953 : vec2<f32> = (vec2<f32>(x_949.y, x_949.w) * vec2<f32>(0.040816002f, 0.040816002f));
        let x_954 : vec4<f32> = u_xlat8;
        u_xlat8 = vec4<f32>(x_954.x, x_953.x, x_954.z, x_953.y);
        let x_956 : vec4<f32> = u_xlat7;
        let x_959 : vec2<f32> = u_xlat49;
        let x_961 : vec2<f32> = ((vec2<f32>(x_956.x, x_956.z) * vec2<f32>(0.5f, 0.5f)) + -(x_959));
        let x_962 : vec4<f32> = u_xlat6;
        u_xlat6 = vec4<f32>(x_961.x, x_962.y, x_961.y, x_962.w);
        let x_964 : vec2<f32> = u_xlat49;
        let x_966 : vec2<f32> = (-(x_964) + vec2<f32>(1.0f, 1.0f));
        let x_967 : vec4<f32> = u_xlat7;
        u_xlat7 = vec4<f32>(x_966.x, x_966.y, x_967.z, x_967.w);
        let x_969 : vec2<f32> = u_xlat49;
        u_xlat51 = min(x_969, vec2<f32>(0.0f, 0.0f));
        let x_971 : vec2<f32> = u_xlat51;
        let x_973 : vec2<f32> = u_xlat51;
        let x_975 : vec4<f32> = u_xlat7;
        let x_977 : vec2<f32> = ((-(x_971) * x_973) + vec2<f32>(x_975.x, x_975.y));
        let x_978 : vec4<f32> = u_xlat7;
        u_xlat7 = vec4<f32>(x_977.x, x_977.y, x_978.z, x_978.w);
        let x_980 : vec2<f32> = u_xlat49;
        u_xlat51 = max(x_980, vec2<f32>(0.0f, 0.0f));
        let x_983 : vec2<f32> = u_xlat51;
        let x_985 : vec2<f32> = u_xlat51;
        let x_987 : vec4<f32> = u_xlat6;
        let x_989 : vec2<f32> = ((-(x_983) * x_985) + vec2<f32>(x_987.y, x_987.w));
        let x_990 : vec3<f32> = u_xlat28;
        u_xlat28 = vec3<f32>(x_989.x, x_990.y, x_989.y);
        let x_992 : vec4<f32> = u_xlat7;
        let x_995 : vec2<f32> = (vec2<f32>(x_992.x, x_992.y) + vec2<f32>(2.0f, 2.0f));
        let x_996 : vec4<f32> = u_xlat7;
        u_xlat7 = vec4<f32>(x_995.x, x_995.y, x_996.z, x_996.w);
        let x_998 : vec3<f32> = u_xlat28;
        let x_1000 : vec2<f32> = (vec2<f32>(x_998.x, x_998.z) + vec2<f32>(2.0f, 2.0f));
        let x_1001 : vec4<f32> = u_xlat6;
        u_xlat6 = vec4<f32>(x_1001.x, x_1000.x, x_1001.z, x_1000.y);
        let x_1004 : f32 = u_xlat6.y;
        u_xlat9.z = (x_1004 * 0.081632003f);
        let x_1008 : vec4<f32> = u_xlat6;
        let x_1011 : vec3<f32> = (vec3<f32>(x_1008.z, x_1008.x, x_1008.w) * vec3<f32>(0.081632003f, 0.081632003f, 0.081632003f));
        let x_1012 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_1011.x, x_1011.y, x_1011.z, x_1012.w);
        let x_1014 : vec4<f32> = u_xlat7;
        let x_1017 : vec2<f32> = (vec2<f32>(x_1014.x, x_1014.y) * vec2<f32>(0.081632003f, 0.081632003f));
        let x_1018 : vec4<f32> = u_xlat6;
        u_xlat6 = vec4<f32>(x_1017.x, x_1017.y, x_1018.z, x_1018.w);
        let x_1021 : f32 = u_xlat10.y;
        u_xlat9.x = x_1021;
        let x_1023 : vec2<f32> = u_xlat49;
        let x_1030 : vec2<f32> = ((vec2<f32>(x_1023.x, x_1023.x) * vec2<f32>(-0.081632003f, 0.081632003f)) + vec2<f32>(0.163264006f, 0.081632003f));
        let x_1031 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_1031.x, x_1030.x, x_1031.z, x_1030.y);
        let x_1033 : vec2<f32> = u_xlat49;
        let x_1037 : vec2<f32> = ((vec2<f32>(x_1033.x, x_1033.x) * vec2<f32>(-0.081632003f, 0.081632003f)) + vec2<f32>(0.081632003f, 0.163264006f));
        let x_1038 : vec4<f32> = u_xlat7;
        u_xlat7 = vec4<f32>(x_1037.x, x_1038.y, x_1037.y, x_1038.w);
        let x_1041 : f32 = u_xlat6.x;
        u_xlat7.y = x_1041;
        let x_1044 : f32 = u_xlat8.y;
        u_xlat7.w = x_1044;
        let x_1046 : vec4<f32> = u_xlat7;
        let x_1047 : vec4<f32> = u_xlat9;
        u_xlat9 = (x_1046 + x_1047);
        let x_1049 : vec2<f32> = u_xlat49;
        let x_1052 : vec2<f32> = ((vec2<f32>(x_1049.y, x_1049.y) * vec2<f32>(-0.081632003f, 0.081632003f)) + vec2<f32>(0.163264006f, 0.081632003f));
        let x_1053 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_1053.x, x_1052.x, x_1053.z, x_1052.y);
        let x_1055 : vec2<f32> = u_xlat49;
        let x_1058 : vec2<f32> = ((vec2<f32>(x_1055.y, x_1055.y) * vec2<f32>(-0.081632003f, 0.081632003f)) + vec2<f32>(0.081632003f, 0.163264006f));
        let x_1059 : vec4<f32> = u_xlat8;
        u_xlat8 = vec4<f32>(x_1058.x, x_1059.y, x_1058.y, x_1059.w);
        let x_1062 : f32 = u_xlat6.y;
        u_xlat8.y = x_1062;
        let x_1064 : vec4<f32> = u_xlat8;
        let x_1065 : vec4<f32> = u_xlat10;
        u_xlat6 = (x_1064 + x_1065);
        let x_1067 : vec4<f32> = u_xlat7;
        let x_1068 : vec4<f32> = u_xlat9;
        u_xlat7 = (x_1067 / x_1068);
        let x_1070 : vec4<f32> = u_xlat7;
        u_xlat7 = (x_1070 + vec4<f32>(-3.5f, -1.5f, 0.5f, 2.5f));
        let x_1076 : vec4<f32> = u_xlat8;
        let x_1077 : vec4<f32> = u_xlat6;
        u_xlat8 = (x_1076 / x_1077);
        let x_1079 : vec4<f32> = u_xlat8;
        u_xlat8 = (x_1079 + vec4<f32>(-3.5f, -1.5f, 0.5f, 2.5f));
        let x_1081 : vec4<f32> = u_xlat7;
        let x_1084 : vec4<f32> = x_138.x_MainLightShadowmapSize;
        u_xlat7 = (vec4<f32>(x_1081.w, x_1081.x, x_1081.y, x_1081.z) * vec4<f32>(x_1084.x, x_1084.x, x_1084.x, x_1084.x));
        let x_1087 : vec4<f32> = u_xlat8;
        let x_1090 : vec4<f32> = x_138.x_MainLightShadowmapSize;
        u_xlat8 = (vec4<f32>(x_1087.x, x_1087.w, x_1087.y, x_1087.z) * vec4<f32>(x_1090.y, x_1090.y, x_1090.y, x_1090.y));
        let x_1093 : vec4<f32> = u_xlat7;
        let x_1094 : vec3<f32> = vec3<f32>(x_1093.y, x_1093.z, x_1093.w);
        let x_1095 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_1094.x, x_1095.y, x_1094.y, x_1094.z);
        let x_1098 : f32 = u_xlat8.x;
        u_xlat10.y = x_1098;
        let x_1100 : vec4<f32> = u_xlat5;
        let x_1103 : vec4<f32> = x_138.x_MainLightShadowmapSize;
        let x_1106 : vec4<f32> = u_xlat10;
        u_xlat11 = ((vec4<f32>(x_1100.x, x_1100.y, x_1100.x, x_1100.y) * vec4<f32>(x_1103.x, x_1103.y, x_1103.x, x_1103.y)) + vec4<f32>(x_1106.x, x_1106.y, x_1106.z, x_1106.y));
        let x_1109 : vec4<f32> = u_xlat5;
        let x_1112 : vec4<f32> = x_138.x_MainLightShadowmapSize;
        let x_1115 : vec4<f32> = u_xlat10;
        u_xlat49 = ((vec2<f32>(x_1109.x, x_1109.y) * vec2<f32>(x_1112.x, x_1112.y)) + vec2<f32>(x_1115.w, x_1115.y));
        let x_1119 : f32 = u_xlat10.y;
        u_xlat7.y = x_1119;
        let x_1122 : f32 = u_xlat8.z;
        u_xlat10.y = x_1122;
        let x_1124 : vec4<f32> = u_xlat5;
        let x_1127 : vec4<f32> = x_138.x_MainLightShadowmapSize;
        let x_1130 : vec4<f32> = u_xlat10;
        u_xlat12 = ((vec4<f32>(x_1124.x, x_1124.y, x_1124.x, x_1124.y) * vec4<f32>(x_1127.x, x_1127.y, x_1127.x, x_1127.y)) + vec4<f32>(x_1130.x, x_1130.y, x_1130.z, x_1130.y));
        let x_1133 : vec4<f32> = u_xlat5;
        let x_1136 : vec4<f32> = x_138.x_MainLightShadowmapSize;
        let x_1139 : vec4<f32> = u_xlat10;
        let x_1141 : vec2<f32> = ((vec2<f32>(x_1133.x, x_1133.y) * vec2<f32>(x_1136.x, x_1136.y)) + vec2<f32>(x_1139.w, x_1139.y));
        let x_1142 : vec4<f32> = u_xlat13;
        u_xlat13 = vec4<f32>(x_1141.x, x_1141.y, x_1142.z, x_1142.w);
        let x_1145 : f32 = u_xlat10.y;
        u_xlat7.z = x_1145;
        let x_1148 : vec4<f32> = u_xlat5;
        let x_1151 : vec4<f32> = x_138.x_MainLightShadowmapSize;
        let x_1154 : vec4<f32> = u_xlat7;
        u_xlat14 = ((vec4<f32>(x_1148.x, x_1148.y, x_1148.x, x_1148.y) * vec4<f32>(x_1151.x, x_1151.y, x_1151.x, x_1151.y)) + vec4<f32>(x_1154.x, x_1154.y, x_1154.x, x_1154.z));
        let x_1158 : f32 = u_xlat8.w;
        u_xlat10.y = x_1158;
        let x_1161 : vec4<f32> = u_xlat5;
        let x_1164 : vec4<f32> = x_138.x_MainLightShadowmapSize;
        let x_1167 : vec4<f32> = u_xlat10;
        u_xlat15 = ((vec4<f32>(x_1161.x, x_1161.y, x_1161.x, x_1161.y) * vec4<f32>(x_1164.x, x_1164.y, x_1164.x, x_1164.y)) + vec4<f32>(x_1167.x, x_1167.y, x_1167.z, x_1167.y));
        let x_1171 : vec4<f32> = u_xlat5;
        let x_1174 : vec4<f32> = x_138.x_MainLightShadowmapSize;
        let x_1177 : vec4<f32> = u_xlat10;
        u_xlat29 = ((vec2<f32>(x_1171.x, x_1171.y) * vec2<f32>(x_1174.x, x_1174.y)) + vec2<f32>(x_1177.w, x_1177.y));
        let x_1181 : f32 = u_xlat10.y;
        u_xlat7.w = x_1181;
        let x_1184 : vec4<f32> = u_xlat5;
        let x_1187 : vec4<f32> = x_138.x_MainLightShadowmapSize;
        let x_1190 : vec4<f32> = u_xlat7;
        u_xlat57 = ((vec2<f32>(x_1184.x, x_1184.y) * vec2<f32>(x_1187.x, x_1187.y)) + vec2<f32>(x_1190.x, x_1190.w));
        let x_1193 : vec4<f32> = u_xlat10;
        let x_1194 : vec3<f32> = vec3<f32>(x_1193.x, x_1193.z, x_1193.w);
        let x_1195 : vec4<f32> = u_xlat8;
        u_xlat8 = vec4<f32>(x_1194.x, x_1195.y, x_1194.y, x_1194.z);
        let x_1197 : vec4<f32> = u_xlat5;
        let x_1200 : vec4<f32> = x_138.x_MainLightShadowmapSize;
        let x_1203 : vec4<f32> = u_xlat8;
        u_xlat10 = ((vec4<f32>(x_1197.x, x_1197.y, x_1197.x, x_1197.y) * vec4<f32>(x_1200.x, x_1200.y, x_1200.x, x_1200.y)) + vec4<f32>(x_1203.x, x_1203.y, x_1203.z, x_1203.y));
        let x_1207 : vec4<f32> = u_xlat5;
        let x_1210 : vec4<f32> = x_138.x_MainLightShadowmapSize;
        let x_1213 : vec4<f32> = u_xlat8;
        u_xlat52 = ((vec2<f32>(x_1207.x, x_1207.y) * vec2<f32>(x_1210.x, x_1210.y)) + vec2<f32>(x_1213.w, x_1213.y));
        let x_1217 : f32 = u_xlat7.x;
        u_xlat8.x = x_1217;
        let x_1219 : vec4<f32> = u_xlat5;
        let x_1222 : vec4<f32> = x_138.x_MainLightShadowmapSize;
        let x_1225 : vec4<f32> = u_xlat8;
        let x_1227 : vec2<f32> = ((vec2<f32>(x_1219.x, x_1219.y) * vec2<f32>(x_1222.x, x_1222.y)) + vec2<f32>(x_1225.x, x_1225.y));
        let x_1228 : vec4<f32> = u_xlat5;
        u_xlat5 = vec4<f32>(x_1227.x, x_1227.y, x_1228.z, x_1228.w);
        let x_1231 : vec4<f32> = u_xlat6;
        let x_1233 : vec4<f32> = u_xlat9;
        u_xlat16 = (vec4<f32>(x_1231.x, x_1231.x, x_1231.x, x_1231.x) * x_1233);
        let x_1236 : vec4<f32> = u_xlat6;
        let x_1238 : vec4<f32> = u_xlat9;
        u_xlat17 = (vec4<f32>(x_1236.y, x_1236.y, x_1236.y, x_1236.y) * x_1238);
        let x_1241 : vec4<f32> = u_xlat6;
        let x_1243 : vec4<f32> = u_xlat9;
        u_xlat18 = (vec4<f32>(x_1241.z, x_1241.z, x_1241.z, x_1241.z) * x_1243);
        let x_1245 : vec4<f32> = u_xlat6;
        let x_1247 : vec4<f32> = u_xlat9;
        u_xlat6 = (vec4<f32>(x_1245.w, x_1245.w, x_1245.w, x_1245.w) * x_1247);
        let x_1250 : vec4<f32> = u_xlat11;
        let x_1251 : vec2<f32> = vec2<f32>(x_1250.x, x_1250.y);
        let x_1253 : f32 = u_xlat4.z;
        txVec13 = vec3<f32>(x_1251.x, x_1251.y, x_1253);
        let x_1260 : vec3<f32> = txVec13;
        let x_1262 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1260.xy, x_1260.z);
        u_xlat70 = x_1262;
        let x_1264 : vec4<f32> = u_xlat11;
        let x_1265 : vec2<f32> = vec2<f32>(x_1264.z, x_1264.w);
        let x_1267 : f32 = u_xlat4.z;
        txVec14 = vec3<f32>(x_1265.x, x_1265.y, x_1267);
        let x_1274 : vec3<f32> = txVec14;
        let x_1276 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1274.xy, x_1274.z);
        u_xlat7.x = x_1276;
        let x_1279 : f32 = u_xlat7.x;
        let x_1281 : f32 = u_xlat16.y;
        u_xlat7.x = (x_1279 * x_1281);
        let x_1285 : f32 = u_xlat16.x;
        let x_1286 : f32 = u_xlat70;
        let x_1289 : f32 = u_xlat7.x;
        u_xlat70 = ((x_1285 * x_1286) + x_1289);
        let x_1292 : vec2<f32> = u_xlat49;
        let x_1294 : f32 = u_xlat4.z;
        txVec15 = vec3<f32>(x_1292.x, x_1292.y, x_1294);
        let x_1301 : vec3<f32> = txVec15;
        let x_1303 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1301.xy, x_1301.z);
        u_xlat49.x = x_1303;
        let x_1306 : f32 = u_xlat16.z;
        let x_1308 : f32 = u_xlat49.x;
        let x_1310 : f32 = u_xlat70;
        u_xlat70 = ((x_1306 * x_1308) + x_1310);
        let x_1313 : vec4<f32> = u_xlat14;
        let x_1314 : vec2<f32> = vec2<f32>(x_1313.x, x_1313.y);
        let x_1316 : f32 = u_xlat4.z;
        txVec16 = vec3<f32>(x_1314.x, x_1314.y, x_1316);
        let x_1323 : vec3<f32> = txVec16;
        let x_1325 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1323.xy, x_1323.z);
        u_xlat49.x = x_1325;
        let x_1328 : f32 = u_xlat16.w;
        let x_1330 : f32 = u_xlat49.x;
        let x_1332 : f32 = u_xlat70;
        u_xlat70 = ((x_1328 * x_1330) + x_1332);
        let x_1335 : vec4<f32> = u_xlat12;
        let x_1336 : vec2<f32> = vec2<f32>(x_1335.x, x_1335.y);
        let x_1338 : f32 = u_xlat4.z;
        txVec17 = vec3<f32>(x_1336.x, x_1336.y, x_1338);
        let x_1345 : vec3<f32> = txVec17;
        let x_1347 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1345.xy, x_1345.z);
        u_xlat49.x = x_1347;
        let x_1350 : f32 = u_xlat17.x;
        let x_1352 : f32 = u_xlat49.x;
        let x_1354 : f32 = u_xlat70;
        u_xlat70 = ((x_1350 * x_1352) + x_1354);
        let x_1357 : vec4<f32> = u_xlat12;
        let x_1358 : vec2<f32> = vec2<f32>(x_1357.z, x_1357.w);
        let x_1360 : f32 = u_xlat4.z;
        txVec18 = vec3<f32>(x_1358.x, x_1358.y, x_1360);
        let x_1367 : vec3<f32> = txVec18;
        let x_1369 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1367.xy, x_1367.z);
        u_xlat49.x = x_1369;
        let x_1372 : f32 = u_xlat17.y;
        let x_1374 : f32 = u_xlat49.x;
        let x_1376 : f32 = u_xlat70;
        u_xlat70 = ((x_1372 * x_1374) + x_1376);
        let x_1379 : vec4<f32> = u_xlat13;
        let x_1380 : vec2<f32> = vec2<f32>(x_1379.x, x_1379.y);
        let x_1382 : f32 = u_xlat4.z;
        txVec19 = vec3<f32>(x_1380.x, x_1380.y, x_1382);
        let x_1389 : vec3<f32> = txVec19;
        let x_1391 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1389.xy, x_1389.z);
        u_xlat49.x = x_1391;
        let x_1394 : f32 = u_xlat17.z;
        let x_1396 : f32 = u_xlat49.x;
        let x_1398 : f32 = u_xlat70;
        u_xlat70 = ((x_1394 * x_1396) + x_1398);
        let x_1401 : vec4<f32> = u_xlat14;
        let x_1402 : vec2<f32> = vec2<f32>(x_1401.z, x_1401.w);
        let x_1404 : f32 = u_xlat4.z;
        txVec20 = vec3<f32>(x_1402.x, x_1402.y, x_1404);
        let x_1411 : vec3<f32> = txVec20;
        let x_1413 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1411.xy, x_1411.z);
        u_xlat49.x = x_1413;
        let x_1416 : f32 = u_xlat17.w;
        let x_1418 : f32 = u_xlat49.x;
        let x_1420 : f32 = u_xlat70;
        u_xlat70 = ((x_1416 * x_1418) + x_1420);
        let x_1423 : vec4<f32> = u_xlat15;
        let x_1424 : vec2<f32> = vec2<f32>(x_1423.x, x_1423.y);
        let x_1426 : f32 = u_xlat4.z;
        txVec21 = vec3<f32>(x_1424.x, x_1424.y, x_1426);
        let x_1433 : vec3<f32> = txVec21;
        let x_1435 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1433.xy, x_1433.z);
        u_xlat49.x = x_1435;
        let x_1438 : f32 = u_xlat18.x;
        let x_1440 : f32 = u_xlat49.x;
        let x_1442 : f32 = u_xlat70;
        u_xlat70 = ((x_1438 * x_1440) + x_1442);
        let x_1445 : vec4<f32> = u_xlat15;
        let x_1446 : vec2<f32> = vec2<f32>(x_1445.z, x_1445.w);
        let x_1448 : f32 = u_xlat4.z;
        txVec22 = vec3<f32>(x_1446.x, x_1446.y, x_1448);
        let x_1455 : vec3<f32> = txVec22;
        let x_1457 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1455.xy, x_1455.z);
        u_xlat49.x = x_1457;
        let x_1460 : f32 = u_xlat18.y;
        let x_1462 : f32 = u_xlat49.x;
        let x_1464 : f32 = u_xlat70;
        u_xlat70 = ((x_1460 * x_1462) + x_1464);
        let x_1467 : vec2<f32> = u_xlat29;
        let x_1469 : f32 = u_xlat4.z;
        txVec23 = vec3<f32>(x_1467.x, x_1467.y, x_1469);
        let x_1476 : vec3<f32> = txVec23;
        let x_1478 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1476.xy, x_1476.z);
        u_xlat49.x = x_1478;
        let x_1481 : f32 = u_xlat18.z;
        let x_1483 : f32 = u_xlat49.x;
        let x_1485 : f32 = u_xlat70;
        u_xlat70 = ((x_1481 * x_1483) + x_1485);
        let x_1488 : vec2<f32> = u_xlat57;
        let x_1490 : f32 = u_xlat4.z;
        txVec24 = vec3<f32>(x_1488.x, x_1488.y, x_1490);
        let x_1497 : vec3<f32> = txVec24;
        let x_1499 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1497.xy, x_1497.z);
        u_xlat49.x = x_1499;
        let x_1502 : f32 = u_xlat18.w;
        let x_1504 : f32 = u_xlat49.x;
        let x_1506 : f32 = u_xlat70;
        u_xlat70 = ((x_1502 * x_1504) + x_1506);
        let x_1509 : vec4<f32> = u_xlat10;
        let x_1510 : vec2<f32> = vec2<f32>(x_1509.x, x_1509.y);
        let x_1512 : f32 = u_xlat4.z;
        txVec25 = vec3<f32>(x_1510.x, x_1510.y, x_1512);
        let x_1519 : vec3<f32> = txVec25;
        let x_1521 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1519.xy, x_1519.z);
        u_xlat49.x = x_1521;
        let x_1524 : f32 = u_xlat6.x;
        let x_1526 : f32 = u_xlat49.x;
        let x_1528 : f32 = u_xlat70;
        u_xlat70 = ((x_1524 * x_1526) + x_1528);
        let x_1531 : vec4<f32> = u_xlat10;
        let x_1532 : vec2<f32> = vec2<f32>(x_1531.z, x_1531.w);
        let x_1534 : f32 = u_xlat4.z;
        txVec26 = vec3<f32>(x_1532.x, x_1532.y, x_1534);
        let x_1541 : vec3<f32> = txVec26;
        let x_1543 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1541.xy, x_1541.z);
        u_xlat49.x = x_1543;
        let x_1546 : f32 = u_xlat6.y;
        let x_1548 : f32 = u_xlat49.x;
        let x_1550 : f32 = u_xlat70;
        u_xlat70 = ((x_1546 * x_1548) + x_1550);
        let x_1553 : vec2<f32> = u_xlat52;
        let x_1555 : f32 = u_xlat4.z;
        txVec27 = vec3<f32>(x_1553.x, x_1553.y, x_1555);
        let x_1562 : vec3<f32> = txVec27;
        let x_1564 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1562.xy, x_1562.z);
        u_xlat49.x = x_1564;
        let x_1567 : f32 = u_xlat6.z;
        let x_1569 : f32 = u_xlat49.x;
        let x_1571 : f32 = u_xlat70;
        u_xlat70 = ((x_1567 * x_1569) + x_1571);
        let x_1574 : vec4<f32> = u_xlat5;
        let x_1575 : vec2<f32> = vec2<f32>(x_1574.x, x_1574.y);
        let x_1577 : f32 = u_xlat4.z;
        txVec28 = vec3<f32>(x_1575.x, x_1575.y, x_1577);
        let x_1584 : vec3<f32> = txVec28;
        let x_1586 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1584.xy, x_1584.z);
        u_xlat5.x = x_1586;
        let x_1589 : f32 = u_xlat6.w;
        let x_1591 : f32 = u_xlat5.x;
        let x_1593 : f32 = u_xlat70;
        u_xlat68 = ((x_1589 * x_1591) + x_1593);
      }
    }
  } else {
    let x_1597 : vec4<f32> = u_xlat4;
    let x_1598 : vec2<f32> = vec2<f32>(x_1597.x, x_1597.y);
    let x_1600 : f32 = u_xlat4.z;
    txVec29 = vec3<f32>(x_1598.x, x_1598.y, x_1600);
    let x_1607 : vec3<f32> = txVec29;
    let x_1609 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1607.xy, x_1607.z);
    u_xlat68 = x_1609;
  }
  let x_1611 : f32 = x_138.x_MainLightShadowParams.x;
  u_xlat70 = (-(x_1611) + 1.0f);
  let x_1614 : f32 = u_xlat68;
  let x_1616 : f32 = x_138.x_MainLightShadowParams.x;
  let x_1618 : f32 = u_xlat70;
  u_xlat68 = ((x_1614 * x_1616) + x_1618);
  let x_1622 : f32 = u_xlat4.z;
  u_xlatb5 = (0.0f >= x_1622);
  let x_1626 : f32 = u_xlat4.z;
  u_xlatb27 = (x_1626 >= 1.0f);
  let x_1628 : bool = u_xlatb27;
  let x_1629 : bool = u_xlatb5;
  u_xlatb5 = (x_1628 | x_1629);
  let x_1631 : bool = u_xlatb5;
  let x_1632 : f32 = u_xlat68;
  u_xlat68 = select(x_1632, 1.0f, x_1631);
  let x_1634 : vec3<f32> = u_xlat0;
  let x_1636 : vec4<f32> = x_66.x_MainLightPosition;
  u_xlat0.x = dot(x_1634, -(vec3<f32>(x_1636.x, x_1636.y, x_1636.z)));
  let x_1642 : f32 = u_xlat0.x;
  u_xlat0.x = clamp(x_1642, 0.0f, 1.0f);
  let x_1645 : f32 = u_xlat68;
  let x_1648 : vec4<f32> = x_66.x_MainLightColor;
  u_xlat27 = (vec3<f32>(x_1645, x_1645, x_1645) * vec3<f32>(x_1648.x, x_1648.y, x_1648.z));
  let x_1651 : vec3<f32> = u_xlat0;
  let x_1653 : vec3<f32> = u_xlat27;
  u_xlat0 = (vec3<f32>(x_1651.x, x_1651.x, x_1651.x) * x_1653);
  let x_1655 : vec3<f32> = u_xlat0;
  let x_1656 : vec4<f32> = u_xlat1;
  u_xlat0 = (x_1655 * vec3<f32>(x_1656.x, x_1656.y, x_1656.z));
  let x_1661 : f32 = u_xlat1.w;
  u_xlatb1 = (x_1661 >= 0.400000006f);
  let x_1664 : bool = u_xlatb1;
  if (x_1664) {
    let x_1669 : f32 = u_xlat1.w;
    x_1665 = x_1669;
  } else {
    x_1665 = 0.0f;
  }
  let x_1671 : f32 = x_1665;
  u_xlat1.x = x_1671;
  let x_1675 : f32 = u_xlat1.w;
  u_xlat23.x = (x_1675 + -0.400000006f);
  let x_1681 : f32 = u_xlat1.w;
  u_xlat45 = dpdxCoarse(x_1681);
  let x_1685 : f32 = u_xlat1.w;
  u_xlat67 = dpdyCoarse(x_1685);
  let x_1687 : f32 = u_xlat67;
  let x_1689 : f32 = u_xlat45;
  u_xlat45 = (abs(x_1687) + abs(x_1689));
  let x_1692 : f32 = u_xlat45;
  u_xlat45 = max(x_1692, 0.0001f);
  let x_1696 : f32 = u_xlat23.x;
  let x_1697 : f32 = u_xlat45;
  u_xlat23.x = (x_1696 / x_1697);
  let x_1701 : f32 = u_xlat23.x;
  u_xlat23.x = (x_1701 + 0.5f);
  let x_1705 : f32 = u_xlat23.x;
  u_xlat23.x = clamp(x_1705, 0.0f, 1.0f);
  let x_1710 : f32 = x_66.x_AlphaToMaskAvailable;
  u_xlatb45 = !((x_1710 == 0.0f));
  let x_1712 : bool = u_xlatb45;
  if (x_1712) {
    let x_1717 : f32 = u_xlat23.x;
    x_1713 = x_1717;
  } else {
    let x_1720 : f32 = u_xlat1.x;
    x_1713 = x_1720;
  }
  let x_1721 : f32 = x_1713;
  u_xlat1.x = x_1721;
  let x_1724 : f32 = u_xlat1.x;
  u_xlat23.x = (x_1724 + -0.0001f);
  let x_1732 : f32 = u_xlat23.x;
  u_xlatb23.x = (x_1732 < 0.0f);
  let x_1736 : bool = u_xlatb23.x;
  if (((select(0i, 1i, x_1736) * -1i) != 0i)) {
    discard;
  }
  let x_1746 : f32 = vs_INTERP2.w;
  u_xlatb23.x = (0.0f < x_1746);
  let x_1754 : f32 = x_1752.unity_WorldTransformParams.w;
  u_xlatb23.z = (x_1754 >= 0.0f);
  let x_1758 : bool = u_xlatb23.x;
  u_xlat23.x = select(-1.0f, 1.0f, x_1758);
  let x_1762 : bool = u_xlatb23.z;
  u_xlat23.z = select(-1.0f, 1.0f, x_1762);
  let x_1766 : f32 = u_xlat23.z;
  let x_1768 : f32 = u_xlat23.x;
  u_xlat23.x = (x_1766 * x_1768);
  let x_1771 : vec3<f32> = vs_INTERP1;
  let x_1773 : vec4<f32> = vs_INTERP2;
  u_xlat27 = (vec3<f32>(x_1771.z, x_1771.x, x_1771.y) * vec3<f32>(x_1773.y, x_1773.z, x_1773.x));
  let x_1776 : vec3<f32> = vs_INTERP1;
  let x_1778 : vec4<f32> = vs_INTERP2;
  let x_1781 : vec3<f32> = u_xlat27;
  u_xlat27 = ((vec3<f32>(x_1776.y, x_1776.z, x_1776.x) * vec3<f32>(x_1778.z, x_1778.x, x_1778.y)) + -(x_1781));
  let x_1784 : vec3<f32> = u_xlat23;
  let x_1786 : vec3<f32> = u_xlat27;
  u_xlat27 = (vec3<f32>(x_1784.x, x_1784.x, x_1784.x) * x_1786);
  let x_1788 : vec3<f32> = u_xlat25;
  let x_1790 : vec3<f32> = u_xlat27;
  u_xlat27 = (vec3<f32>(x_1788.y, x_1788.y, x_1788.y) * x_1790);
  let x_1792 : vec3<f32> = u_xlat25;
  let x_1794 : vec4<f32> = vs_INTERP2;
  let x_1797 : vec3<f32> = u_xlat27;
  u_xlat27 = ((vec3<f32>(x_1792.x, x_1792.x, x_1792.x) * vec3<f32>(x_1794.x, x_1794.y, x_1794.z)) + x_1797);
  let x_1799 : vec3<f32> = u_xlat25;
  let x_1801 : vec3<f32> = vs_INTERP1;
  let x_1803 : vec3<f32> = u_xlat27;
  u_xlat25 = ((vec3<f32>(x_1799.z, x_1799.z, x_1799.z) * x_1801) + x_1803);
  let x_1805 : vec3<f32> = u_xlat25;
  let x_1806 : vec3<f32> = u_xlat25;
  u_xlat23.x = dot(x_1805, x_1806);
  let x_1810 : f32 = u_xlat23.x;
  u_xlat23.x = inverseSqrt(x_1810);
  let x_1813 : vec3<f32> = u_xlat23;
  let x_1815 : vec3<f32> = u_xlat25;
  u_xlat25 = (vec3<f32>(x_1813.x, x_1813.x, x_1813.x) * x_1815);
  let x_1818 : f32 = x_66.unity_OrthoParams.w;
  u_xlatb23.x = (x_1818 == 0.0f);
  let x_1821 : vec3<f32> = vs_INTERP0;
  let x_1825 : vec3<f32> = x_66.x_WorldSpaceCameraPos;
  u_xlat27 = (-(x_1821) + x_1825);
  let x_1827 : vec3<f32> = u_xlat27;
  let x_1828 : vec3<f32> = u_xlat27;
  u_xlat67 = dot(x_1827, x_1828);
  let x_1830 : f32 = u_xlat67;
  u_xlat67 = inverseSqrt(x_1830);
  let x_1832 : f32 = u_xlat67;
  let x_1834 : vec3<f32> = u_xlat27;
  u_xlat27 = (vec3<f32>(x_1832, x_1832, x_1832) * x_1834);
  let x_1838 : f32 = x_66.unity_MatrixV[0i].z;
  u_xlat6.x = x_1838;
  let x_1841 : f32 = x_66.unity_MatrixV[1i].z;
  u_xlat6.y = x_1841;
  let x_1844 : f32 = x_66.unity_MatrixV[2i].z;
  u_xlat6.z = x_1844;
  let x_1847 : bool = u_xlatb23.x;
  if (x_1847) {
    let x_1851 : vec3<f32> = u_xlat27;
    x_1848 = x_1851;
  } else {
    let x_1853 : vec4<f32> = u_xlat6;
    x_1848 = vec3<f32>(x_1853.x, x_1853.y, x_1853.z);
  }
  let x_1855 : vec3<f32> = x_1848;
  u_xlat27 = x_1855;
  let x_1857 : f32 = vs_INTERP0.y;
  let x_1859 : f32 = x_66.unity_MatrixV[1i].z;
  u_xlat23.x = (x_1857 * x_1859);
  let x_1863 : f32 = x_66.unity_MatrixV[0i].z;
  let x_1865 : f32 = vs_INTERP0.x;
  let x_1868 : f32 = u_xlat23.x;
  u_xlat23.x = ((x_1863 * x_1865) + x_1868);
  let x_1872 : f32 = x_66.unity_MatrixV[2i].z;
  let x_1874 : f32 = vs_INTERP0.z;
  let x_1877 : f32 = u_xlat23.x;
  u_xlat23.x = ((x_1872 * x_1874) + x_1877);
  let x_1881 : f32 = u_xlat23.x;
  let x_1883 : f32 = x_66.unity_MatrixV[3i].z;
  u_xlat23.x = (x_1881 + x_1883);
  let x_1887 : f32 = u_xlat23.x;
  let x_1890 : f32 = x_66.x_ProjectionParams.y;
  u_xlat23.x = (-(x_1887) + -(x_1890));
  let x_1895 : f32 = u_xlat23.x;
  u_xlat23.x = max(x_1895, 0.0f);
  let x_1899 : f32 = u_xlat23.x;
  let x_1902 : f32 = x_66.unity_FogParams.x;
  u_xlat23.x = (x_1899 * x_1902);
  let x_1912 : vec2<f32> = vs_INTERP5;
  let x_1914 : f32 = x_66.x_GlobalMipBias.x;
  let x_1915 : vec4<f32> = textureSampleBias(unity_LightmapInd, samplerunity_Lightmap, x_1912, x_1914);
  u_xlat6 = x_1915;
  let x_1920 : vec2<f32> = vs_INTERP5;
  let x_1922 : f32 = x_66.x_GlobalMipBias.x;
  let x_1923 : vec4<f32> = textureSampleBias(unity_Lightmap, samplerunity_Lightmap, x_1920, x_1922);
  let x_1924 : vec3<f32> = vec3<f32>(x_1923.x, x_1923.y, x_1923.z);
  let x_1925 : vec4<f32> = u_xlat7;
  u_xlat7 = vec4<f32>(x_1924.x, x_1924.y, x_1924.z, x_1925.w);
  let x_1927 : vec4<f32> = u_xlat6;
  let x_1930 : vec3<f32> = (vec3<f32>(x_1927.x, x_1927.y, x_1927.z) + vec3<f32>(-0.5f, -0.5f, -0.5f));
  let x_1931 : vec4<f32> = u_xlat6;
  u_xlat6 = vec4<f32>(x_1930.x, x_1930.y, x_1930.z, x_1931.w);
  let x_1933 : vec3<f32> = u_xlat25;
  let x_1934 : vec4<f32> = u_xlat6;
  u_xlat67 = dot(x_1933, vec3<f32>(x_1934.x, x_1934.y, x_1934.z));
  let x_1937 : f32 = u_xlat67;
  u_xlat67 = (x_1937 + 0.5f);
  let x_1939 : f32 = u_xlat67;
  let x_1941 : vec4<f32> = u_xlat7;
  let x_1943 : vec3<f32> = (vec3<f32>(x_1939, x_1939, x_1939) * vec3<f32>(x_1941.x, x_1941.y, x_1941.z));
  let x_1944 : vec4<f32> = u_xlat6;
  u_xlat6 = vec4<f32>(x_1943.x, x_1943.y, x_1943.z, x_1944.w);
  let x_1947 : f32 = u_xlat6.w;
  u_xlat67 = max(x_1947, 0.0001f);
  let x_1949 : vec4<f32> = u_xlat6;
  let x_1951 : f32 = u_xlat67;
  let x_1953 : vec3<f32> = (vec3<f32>(x_1949.x, x_1949.y, x_1949.z) / vec3<f32>(x_1951, x_1951, x_1951));
  let x_1954 : vec4<f32> = u_xlat6;
  u_xlat6 = vec4<f32>(x_1953.x, x_1953.y, x_1953.z, x_1954.w);
  let x_1957 : vec4<f32> = x_66.x_ScaledScreenParams;
  let x_1958 : vec2<f32> = vec2<f32>(x_1957.x, x_1957.y);
  let x_1962 : vec2<f32> = (vec2<f32>(1.0f, 1.0f) / vec2<f32>(x_1958.x, x_1958.y));
  let x_1963 : vec4<f32> = u_xlat7;
  u_xlat7 = vec4<f32>(x_1962.x, x_1962.y, x_1963.z, x_1963.w);
  let x_1965 : vec4<f32> = u_xlat7;
  let x_1967 : vec4<f32> = hlslcc_FragCoord;
  let x_1969 : vec2<f32> = (vec2<f32>(x_1965.x, x_1965.y) * vec2<f32>(x_1967.x, x_1967.y));
  let x_1970 : vec4<f32> = u_xlat7;
  u_xlat7 = vec4<f32>(x_1969.x, x_1969.y, x_1970.z, x_1970.w);
  let x_1973 : f32 = u_xlat7.y;
  let x_1976 : f32 = x_66.x_ScaleBiasRt.x;
  let x_1979 : f32 = x_66.x_ScaleBiasRt.y;
  u_xlat67 = ((x_1973 * x_1976) + x_1979);
  let x_1981 : f32 = u_xlat67;
  u_xlat7.z = (-(x_1981) + 1.0f);
  let x_1986 : f32 = u_xlat3.x;
  u_xlat3.x = x_1986;
  let x_1989 : f32 = u_xlat3.x;
  u_xlat3.x = clamp(x_1989, 0.0f, 1.0f);
  let x_1993 : f32 = u_xlat1.x;
  u_xlat1.x = min(x_1993, 1.0f);
  let x_1996 : vec3<f32> = u_xlat2;
  u_xlat2 = (x_1996 * vec3<f32>(0.959999979f, 0.959999979f, 0.959999979f));
  let x_2001 : f32 = u_xlat3.x;
  u_xlat67 = (-(x_2001) + 1.0f);
  let x_2004 : f32 = u_xlat67;
  let x_2005 : f32 = u_xlat67;
  u_xlat68 = (x_2004 * x_2005);
  let x_2007 : f32 = u_xlat68;
  u_xlat68 = max(x_2007, 0.0078125f);
  let x_2011 : f32 = u_xlat68;
  let x_2012 : f32 = u_xlat68;
  u_xlat72 = (x_2011 * x_2012);
  let x_2015 : f32 = u_xlat3.x;
  u_xlat3.x = (x_2015 + 0.040000021f);
  let x_2020 : f32 = u_xlat3.x;
  u_xlat3.x = min(x_2020, 1.0f);
  let x_2023 : f32 = u_xlat68;
  u_xlat29.x = ((x_2023 * 4.0f) + 2.0f);
  let x_2032 : vec4<f32> = u_xlat7;
  let x_2035 : f32 = x_66.x_GlobalMipBias.x;
  let x_2036 : vec4<f32> = textureSampleBias(x_ScreenSpaceOcclusionTexture, sampler_ScreenSpaceOcclusionTexture, vec2<f32>(x_2032.x, x_2032.z), x_2035);
  u_xlat7.x = x_2036.x;
  let x_2040 : f32 = u_xlat7.x;
  u_xlat51.x = (x_2040 + -1.0f);
  let x_2044 : f32 = x_66.x_AmbientOcclusionParam.w;
  let x_2046 : f32 = u_xlat51.x;
  u_xlat51.x = ((x_2044 * x_2046) + 1.0f);
  let x_2051 : f32 = u_xlat7.x;
  let x_2053 : f32 = vs_INTERP4.w;
  u_xlat7.x = min(x_2051, x_2053);
  let x_2056 : bool = u_xlatb66;
  if (x_2056) {
    let x_2060 : f32 = x_138.x_MainLightShadowParams.y;
    u_xlatb66 = (x_2060 == 1.0f);
    let x_2062 : bool = u_xlatb66;
    if (x_2062) {
      let x_2065 : vec4<f32> = u_xlat4;
      let x_2068 : vec4<f32> = x_138.x_MainLightShadowOffset0;
      u_xlat8 = (vec4<f32>(x_2065.x, x_2065.y, x_2065.x, x_2065.y) + x_2068);
      let x_2071 : vec4<f32> = u_xlat8;
      let x_2072 : vec2<f32> = vec2<f32>(x_2071.x, x_2071.y);
      let x_2074 : f32 = u_xlat4.z;
      txVec30 = vec3<f32>(x_2072.x, x_2072.y, x_2074);
      let x_2081 : vec3<f32> = txVec30;
      let x_2083 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2081.xy, x_2081.z);
      u_xlat9.x = x_2083;
      let x_2086 : vec4<f32> = u_xlat8;
      let x_2087 : vec2<f32> = vec2<f32>(x_2086.z, x_2086.w);
      let x_2089 : f32 = u_xlat4.z;
      txVec31 = vec3<f32>(x_2087.x, x_2087.y, x_2089);
      let x_2096 : vec3<f32> = txVec31;
      let x_2098 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2096.xy, x_2096.z);
      u_xlat9.y = x_2098;
      let x_2100 : vec4<f32> = u_xlat4;
      let x_2103 : vec4<f32> = x_138.x_MainLightShadowOffset1;
      u_xlat8 = (vec4<f32>(x_2100.x, x_2100.y, x_2100.x, x_2100.y) + x_2103);
      let x_2106 : vec4<f32> = u_xlat8;
      let x_2107 : vec2<f32> = vec2<f32>(x_2106.x, x_2106.y);
      let x_2109 : f32 = u_xlat4.z;
      txVec32 = vec3<f32>(x_2107.x, x_2107.y, x_2109);
      let x_2116 : vec3<f32> = txVec32;
      let x_2118 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2116.xy, x_2116.z);
      u_xlat9.z = x_2118;
      let x_2121 : vec4<f32> = u_xlat8;
      let x_2122 : vec2<f32> = vec2<f32>(x_2121.z, x_2121.w);
      let x_2124 : f32 = u_xlat4.z;
      txVec33 = vec3<f32>(x_2122.x, x_2122.y, x_2124);
      let x_2131 : vec3<f32> = txVec33;
      let x_2133 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2131.xy, x_2131.z);
      u_xlat9.w = x_2133;
      let x_2135 : vec4<f32> = u_xlat9;
      u_xlat66 = dot(x_2135, vec4<f32>(0.25f, 0.25f, 0.25f, 0.25f));
    } else {
      let x_2140 : f32 = x_138.x_MainLightShadowParams.y;
      u_xlatb73 = (x_2140 == 2.0f);
      let x_2142 : bool = u_xlatb73;
      if (x_2142) {
        let x_2145 : vec4<f32> = u_xlat4;
        let x_2148 : vec4<f32> = x_138.x_MainLightShadowmapSize;
        let x_2151 : vec2<f32> = ((vec2<f32>(x_2145.x, x_2145.y) * vec2<f32>(x_2148.z, x_2148.w)) + vec2<f32>(0.5f, 0.5f));
        let x_2152 : vec4<f32> = u_xlat8;
        u_xlat8 = vec4<f32>(x_2151.x, x_2151.y, x_2152.z, x_2152.w);
        let x_2154 : vec4<f32> = u_xlat8;
        let x_2156 : vec2<f32> = floor(vec2<f32>(x_2154.x, x_2154.y));
        let x_2157 : vec4<f32> = u_xlat8;
        u_xlat8 = vec4<f32>(x_2156.x, x_2156.y, x_2157.z, x_2157.w);
        let x_2159 : vec4<f32> = u_xlat4;
        let x_2162 : vec4<f32> = x_138.x_MainLightShadowmapSize;
        let x_2165 : vec4<f32> = u_xlat8;
        u_xlat52 = ((vec2<f32>(x_2159.x, x_2159.y) * vec2<f32>(x_2162.z, x_2162.w)) + -(vec2<f32>(x_2165.x, x_2165.y)));
        let x_2169 : vec2<f32> = u_xlat52;
        u_xlat9 = (vec4<f32>(x_2169.x, x_2169.x, x_2169.y, x_2169.y) + vec4<f32>(0.5f, 1.0f, 0.5f, 1.0f));
        let x_2172 : vec4<f32> = u_xlat9;
        let x_2174 : vec4<f32> = u_xlat9;
        u_xlat10 = (vec4<f32>(x_2172.x, x_2172.x, x_2172.z, x_2172.z) * vec4<f32>(x_2174.x, x_2174.x, x_2174.z, x_2174.z));
        let x_2177 : vec4<f32> = u_xlat10;
        let x_2179 : vec2<f32> = (vec2<f32>(x_2177.y, x_2177.w) * vec2<f32>(0.079999998f, 0.079999998f));
        let x_2180 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_2179.x, x_2180.y, x_2179.y, x_2180.w);
        let x_2182 : vec4<f32> = u_xlat10;
        let x_2185 : vec2<f32> = u_xlat52;
        let x_2187 : vec2<f32> = ((vec2<f32>(x_2182.x, x_2182.z) * vec2<f32>(0.5f, 0.5f)) + -(x_2185));
        let x_2188 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_2187.x, x_2187.y, x_2188.z, x_2188.w);
        let x_2191 : vec2<f32> = u_xlat52;
        u_xlat54 = (-(x_2191) + vec2<f32>(1.0f, 1.0f));
        let x_2194 : vec2<f32> = u_xlat52;
        let x_2195 : vec2<f32> = min(x_2194, vec2<f32>(0.0f, 0.0f));
        let x_2196 : vec4<f32> = u_xlat11;
        u_xlat11 = vec4<f32>(x_2195.x, x_2195.y, x_2196.z, x_2196.w);
        let x_2198 : vec4<f32> = u_xlat11;
        let x_2201 : vec4<f32> = u_xlat11;
        let x_2204 : vec2<f32> = u_xlat54;
        let x_2205 : vec2<f32> = ((-(vec2<f32>(x_2198.x, x_2198.y)) * vec2<f32>(x_2201.x, x_2201.y)) + x_2204);
        let x_2206 : vec4<f32> = u_xlat11;
        u_xlat11 = vec4<f32>(x_2205.x, x_2205.y, x_2206.z, x_2206.w);
        let x_2208 : vec2<f32> = u_xlat52;
        u_xlat52 = max(x_2208, vec2<f32>(0.0f, 0.0f));
        let x_2210 : vec2<f32> = u_xlat52;
        let x_2212 : vec2<f32> = u_xlat52;
        let x_2214 : vec4<f32> = u_xlat9;
        u_xlat52 = ((-(x_2210) * x_2212) + vec2<f32>(x_2214.y, x_2214.w));
        let x_2217 : vec4<f32> = u_xlat11;
        let x_2219 : vec2<f32> = (vec2<f32>(x_2217.x, x_2217.y) + vec2<f32>(1.0f, 1.0f));
        let x_2220 : vec4<f32> = u_xlat11;
        u_xlat11 = vec4<f32>(x_2219.x, x_2219.y, x_2220.z, x_2220.w);
        let x_2222 : vec2<f32> = u_xlat52;
        u_xlat52 = (x_2222 + vec2<f32>(1.0f, 1.0f));
        let x_2224 : vec4<f32> = u_xlat10;
        let x_2226 : vec2<f32> = (vec2<f32>(x_2224.x, x_2224.y) * vec2<f32>(0.159999996f, 0.159999996f));
        let x_2227 : vec4<f32> = u_xlat12;
        u_xlat12 = vec4<f32>(x_2226.x, x_2226.y, x_2227.z, x_2227.w);
        let x_2229 : vec2<f32> = u_xlat54;
        let x_2230 : vec2<f32> = (x_2229 * vec2<f32>(0.159999996f, 0.159999996f));
        let x_2231 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_2230.x, x_2230.y, x_2231.z, x_2231.w);
        let x_2233 : vec4<f32> = u_xlat11;
        let x_2235 : vec2<f32> = (vec2<f32>(x_2233.x, x_2233.y) * vec2<f32>(0.159999996f, 0.159999996f));
        let x_2236 : vec4<f32> = u_xlat11;
        u_xlat11 = vec4<f32>(x_2235.x, x_2235.y, x_2236.z, x_2236.w);
        let x_2238 : vec2<f32> = u_xlat52;
        let x_2239 : vec2<f32> = (x_2238 * vec2<f32>(0.159999996f, 0.159999996f));
        let x_2240 : vec4<f32> = u_xlat13;
        u_xlat13 = vec4<f32>(x_2239.x, x_2239.y, x_2240.z, x_2240.w);
        let x_2242 : vec4<f32> = u_xlat9;
        u_xlat52 = (vec2<f32>(x_2242.y, x_2242.w) * vec2<f32>(0.159999996f, 0.159999996f));
        let x_2246 : f32 = u_xlat11.x;
        u_xlat12.z = x_2246;
        let x_2249 : f32 = u_xlat52.x;
        u_xlat12.w = x_2249;
        let x_2252 : f32 = u_xlat13.x;
        u_xlat10.z = x_2252;
        let x_2255 : f32 = u_xlat9.x;
        u_xlat10.w = x_2255;
        let x_2257 : vec4<f32> = u_xlat10;
        let x_2259 : vec4<f32> = u_xlat12;
        u_xlat14 = (vec4<f32>(x_2257.z, x_2257.w, x_2257.x, x_2257.z) + vec4<f32>(x_2259.z, x_2259.w, x_2259.x, x_2259.z));
        let x_2263 : f32 = u_xlat12.y;
        u_xlat11.z = x_2263;
        let x_2266 : f32 = u_xlat52.y;
        u_xlat11.w = x_2266;
        let x_2269 : f32 = u_xlat10.y;
        u_xlat13.z = x_2269;
        let x_2272 : f32 = u_xlat9.z;
        u_xlat13.w = x_2272;
        let x_2274 : vec4<f32> = u_xlat11;
        let x_2276 : vec4<f32> = u_xlat13;
        let x_2278 : vec3<f32> = (vec3<f32>(x_2274.z, x_2274.y, x_2274.w) + vec3<f32>(x_2276.z, x_2276.y, x_2276.w));
        let x_2279 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_2278.x, x_2278.y, x_2278.z, x_2279.w);
        let x_2281 : vec4<f32> = u_xlat10;
        let x_2283 : vec4<f32> = u_xlat14;
        let x_2285 : vec3<f32> = (vec3<f32>(x_2281.x, x_2281.z, x_2281.w) / vec3<f32>(x_2283.z, x_2283.w, x_2283.y));
        let x_2286 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_2285.x, x_2285.y, x_2285.z, x_2286.w);
        let x_2288 : vec4<f32> = u_xlat10;
        let x_2290 : vec3<f32> = (vec3<f32>(x_2288.x, x_2288.y, x_2288.z) + vec3<f32>(-2.5f, -0.5f, 1.5f));
        let x_2291 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_2290.x, x_2290.y, x_2290.z, x_2291.w);
        let x_2293 : vec4<f32> = u_xlat13;
        let x_2295 : vec4<f32> = u_xlat9;
        let x_2297 : vec3<f32> = (vec3<f32>(x_2293.z, x_2293.y, x_2293.w) / vec3<f32>(x_2295.x, x_2295.y, x_2295.z));
        let x_2298 : vec4<f32> = u_xlat11;
        u_xlat11 = vec4<f32>(x_2297.x, x_2297.y, x_2297.z, x_2298.w);
        let x_2300 : vec4<f32> = u_xlat11;
        let x_2302 : vec3<f32> = (vec3<f32>(x_2300.x, x_2300.y, x_2300.z) + vec3<f32>(-2.5f, -0.5f, 1.5f));
        let x_2303 : vec4<f32> = u_xlat11;
        u_xlat11 = vec4<f32>(x_2302.x, x_2302.y, x_2302.z, x_2303.w);
        let x_2305 : vec4<f32> = u_xlat10;
        let x_2308 : vec4<f32> = x_138.x_MainLightShadowmapSize;
        let x_2310 : vec3<f32> = (vec3<f32>(x_2305.y, x_2305.x, x_2305.z) * vec3<f32>(x_2308.x, x_2308.x, x_2308.x));
        let x_2311 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_2310.x, x_2310.y, x_2310.z, x_2311.w);
        let x_2313 : vec4<f32> = u_xlat11;
        let x_2316 : vec4<f32> = x_138.x_MainLightShadowmapSize;
        let x_2318 : vec3<f32> = (vec3<f32>(x_2313.x, x_2313.y, x_2313.z) * vec3<f32>(x_2316.y, x_2316.y, x_2316.y));
        let x_2319 : vec4<f32> = u_xlat11;
        u_xlat11 = vec4<f32>(x_2318.x, x_2318.y, x_2318.z, x_2319.w);
        let x_2322 : f32 = u_xlat11.x;
        u_xlat10.w = x_2322;
        let x_2324 : vec4<f32> = u_xlat8;
        let x_2327 : vec4<f32> = x_138.x_MainLightShadowmapSize;
        let x_2330 : vec4<f32> = u_xlat10;
        u_xlat12 = ((vec4<f32>(x_2324.x, x_2324.y, x_2324.x, x_2324.y) * vec4<f32>(x_2327.x, x_2327.y, x_2327.x, x_2327.y)) + vec4<f32>(x_2330.y, x_2330.w, x_2330.x, x_2330.w));
        let x_2333 : vec4<f32> = u_xlat8;
        let x_2336 : vec4<f32> = x_138.x_MainLightShadowmapSize;
        let x_2339 : vec4<f32> = u_xlat10;
        u_xlat52 = ((vec2<f32>(x_2333.x, x_2333.y) * vec2<f32>(x_2336.x, x_2336.y)) + vec2<f32>(x_2339.z, x_2339.w));
        let x_2343 : f32 = u_xlat10.y;
        u_xlat11.w = x_2343;
        let x_2345 : vec4<f32> = u_xlat11;
        let x_2346 : vec2<f32> = vec2<f32>(x_2345.y, x_2345.z);
        let x_2347 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_2347.x, x_2346.x, x_2347.z, x_2346.y);
        let x_2349 : vec4<f32> = u_xlat8;
        let x_2352 : vec4<f32> = x_138.x_MainLightShadowmapSize;
        let x_2355 : vec4<f32> = u_xlat10;
        u_xlat13 = ((vec4<f32>(x_2349.x, x_2349.y, x_2349.x, x_2349.y) * vec4<f32>(x_2352.x, x_2352.y, x_2352.x, x_2352.y)) + vec4<f32>(x_2355.x, x_2355.y, x_2355.z, x_2355.y));
        let x_2358 : vec4<f32> = u_xlat8;
        let x_2361 : vec4<f32> = x_138.x_MainLightShadowmapSize;
        let x_2364 : vec4<f32> = u_xlat11;
        u_xlat11 = ((vec4<f32>(x_2358.x, x_2358.y, x_2358.x, x_2358.y) * vec4<f32>(x_2361.x, x_2361.y, x_2361.x, x_2361.y)) + vec4<f32>(x_2364.w, x_2364.y, x_2364.w, x_2364.z));
        let x_2367 : vec4<f32> = u_xlat8;
        let x_2370 : vec4<f32> = x_138.x_MainLightShadowmapSize;
        let x_2373 : vec4<f32> = u_xlat10;
        u_xlat10 = ((vec4<f32>(x_2367.x, x_2367.y, x_2367.x, x_2367.y) * vec4<f32>(x_2370.x, x_2370.y, x_2370.x, x_2370.y)) + vec4<f32>(x_2373.x, x_2373.w, x_2373.z, x_2373.w));
        let x_2376 : vec4<f32> = u_xlat9;
        let x_2378 : vec4<f32> = u_xlat14;
        u_xlat15 = (vec4<f32>(x_2376.x, x_2376.x, x_2376.x, x_2376.y) * vec4<f32>(x_2378.z, x_2378.w, x_2378.y, x_2378.z));
        let x_2381 : vec4<f32> = u_xlat9;
        let x_2383 : vec4<f32> = u_xlat14;
        u_xlat16 = (vec4<f32>(x_2381.y, x_2381.y, x_2381.z, x_2381.z) * x_2383);
        let x_2387 : f32 = u_xlat9.z;
        let x_2389 : f32 = u_xlat14.y;
        u_xlat73 = (x_2387 * x_2389);
        let x_2392 : vec4<f32> = u_xlat12;
        let x_2393 : vec2<f32> = vec2<f32>(x_2392.x, x_2392.y);
        let x_2395 : f32 = u_xlat4.z;
        txVec34 = vec3<f32>(x_2393.x, x_2393.y, x_2395);
        let x_2402 : vec3<f32> = txVec34;
        let x_2404 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2402.xy, x_2402.z);
        u_xlat8.x = x_2404;
        let x_2407 : vec4<f32> = u_xlat12;
        let x_2408 : vec2<f32> = vec2<f32>(x_2407.z, x_2407.w);
        let x_2410 : f32 = u_xlat4.z;
        txVec35 = vec3<f32>(x_2408.x, x_2408.y, x_2410);
        let x_2418 : vec3<f32> = txVec35;
        let x_2420 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2418.xy, x_2418.z);
        u_xlat30 = x_2420;
        let x_2421 : f32 = u_xlat30;
        let x_2423 : f32 = u_xlat15.y;
        u_xlat30 = (x_2421 * x_2423);
        let x_2426 : f32 = u_xlat15.x;
        let x_2428 : f32 = u_xlat8.x;
        let x_2430 : f32 = u_xlat30;
        u_xlat8.x = ((x_2426 * x_2428) + x_2430);
        let x_2434 : vec2<f32> = u_xlat52;
        let x_2436 : f32 = u_xlat4.z;
        txVec36 = vec3<f32>(x_2434.x, x_2434.y, x_2436);
        let x_2443 : vec3<f32> = txVec36;
        let x_2445 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2443.xy, x_2443.z);
        u_xlat30 = x_2445;
        let x_2447 : f32 = u_xlat15.z;
        let x_2448 : f32 = u_xlat30;
        let x_2451 : f32 = u_xlat8.x;
        u_xlat8.x = ((x_2447 * x_2448) + x_2451);
        let x_2455 : vec4<f32> = u_xlat11;
        let x_2456 : vec2<f32> = vec2<f32>(x_2455.x, x_2455.y);
        let x_2458 : f32 = u_xlat4.z;
        txVec37 = vec3<f32>(x_2456.x, x_2456.y, x_2458);
        let x_2465 : vec3<f32> = txVec37;
        let x_2467 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2465.xy, x_2465.z);
        u_xlat30 = x_2467;
        let x_2469 : f32 = u_xlat15.w;
        let x_2470 : f32 = u_xlat30;
        let x_2473 : f32 = u_xlat8.x;
        u_xlat8.x = ((x_2469 * x_2470) + x_2473);
        let x_2477 : vec4<f32> = u_xlat13;
        let x_2478 : vec2<f32> = vec2<f32>(x_2477.x, x_2477.y);
        let x_2480 : f32 = u_xlat4.z;
        txVec38 = vec3<f32>(x_2478.x, x_2478.y, x_2480);
        let x_2487 : vec3<f32> = txVec38;
        let x_2489 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2487.xy, x_2487.z);
        u_xlat30 = x_2489;
        let x_2491 : f32 = u_xlat16.x;
        let x_2492 : f32 = u_xlat30;
        let x_2495 : f32 = u_xlat8.x;
        u_xlat8.x = ((x_2491 * x_2492) + x_2495);
        let x_2499 : vec4<f32> = u_xlat13;
        let x_2500 : vec2<f32> = vec2<f32>(x_2499.z, x_2499.w);
        let x_2502 : f32 = u_xlat4.z;
        txVec39 = vec3<f32>(x_2500.x, x_2500.y, x_2502);
        let x_2509 : vec3<f32> = txVec39;
        let x_2511 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2509.xy, x_2509.z);
        u_xlat30 = x_2511;
        let x_2513 : f32 = u_xlat16.y;
        let x_2514 : f32 = u_xlat30;
        let x_2517 : f32 = u_xlat8.x;
        u_xlat8.x = ((x_2513 * x_2514) + x_2517);
        let x_2521 : vec4<f32> = u_xlat11;
        let x_2522 : vec2<f32> = vec2<f32>(x_2521.z, x_2521.w);
        let x_2524 : f32 = u_xlat4.z;
        txVec40 = vec3<f32>(x_2522.x, x_2522.y, x_2524);
        let x_2531 : vec3<f32> = txVec40;
        let x_2533 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2531.xy, x_2531.z);
        u_xlat30 = x_2533;
        let x_2535 : f32 = u_xlat16.z;
        let x_2536 : f32 = u_xlat30;
        let x_2539 : f32 = u_xlat8.x;
        u_xlat8.x = ((x_2535 * x_2536) + x_2539);
        let x_2543 : vec4<f32> = u_xlat10;
        let x_2544 : vec2<f32> = vec2<f32>(x_2543.x, x_2543.y);
        let x_2546 : f32 = u_xlat4.z;
        txVec41 = vec3<f32>(x_2544.x, x_2544.y, x_2546);
        let x_2553 : vec3<f32> = txVec41;
        let x_2555 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2553.xy, x_2553.z);
        u_xlat30 = x_2555;
        let x_2557 : f32 = u_xlat16.w;
        let x_2558 : f32 = u_xlat30;
        let x_2561 : f32 = u_xlat8.x;
        u_xlat8.x = ((x_2557 * x_2558) + x_2561);
        let x_2565 : vec4<f32> = u_xlat10;
        let x_2566 : vec2<f32> = vec2<f32>(x_2565.z, x_2565.w);
        let x_2568 : f32 = u_xlat4.z;
        txVec42 = vec3<f32>(x_2566.x, x_2566.y, x_2568);
        let x_2575 : vec3<f32> = txVec42;
        let x_2577 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2575.xy, x_2575.z);
        u_xlat30 = x_2577;
        let x_2578 : f32 = u_xlat73;
        let x_2579 : f32 = u_xlat30;
        let x_2582 : f32 = u_xlat8.x;
        u_xlat66 = ((x_2578 * x_2579) + x_2582);
      } else {
        let x_2585 : vec4<f32> = u_xlat4;
        let x_2588 : vec4<f32> = x_138.x_MainLightShadowmapSize;
        let x_2591 : vec2<f32> = ((vec2<f32>(x_2585.x, x_2585.y) * vec2<f32>(x_2588.z, x_2588.w)) + vec2<f32>(0.5f, 0.5f));
        let x_2592 : vec4<f32> = u_xlat8;
        u_xlat8 = vec4<f32>(x_2591.x, x_2591.y, x_2592.z, x_2592.w);
        let x_2594 : vec4<f32> = u_xlat8;
        let x_2596 : vec2<f32> = floor(vec2<f32>(x_2594.x, x_2594.y));
        let x_2597 : vec4<f32> = u_xlat8;
        u_xlat8 = vec4<f32>(x_2596.x, x_2596.y, x_2597.z, x_2597.w);
        let x_2599 : vec4<f32> = u_xlat4;
        let x_2602 : vec4<f32> = x_138.x_MainLightShadowmapSize;
        let x_2605 : vec4<f32> = u_xlat8;
        u_xlat52 = ((vec2<f32>(x_2599.x, x_2599.y) * vec2<f32>(x_2602.z, x_2602.w)) + -(vec2<f32>(x_2605.x, x_2605.y)));
        let x_2609 : vec2<f32> = u_xlat52;
        u_xlat9 = (vec4<f32>(x_2609.x, x_2609.x, x_2609.y, x_2609.y) + vec4<f32>(0.5f, 1.0f, 0.5f, 1.0f));
        let x_2612 : vec4<f32> = u_xlat9;
        let x_2614 : vec4<f32> = u_xlat9;
        u_xlat10 = (vec4<f32>(x_2612.x, x_2612.x, x_2612.z, x_2612.z) * vec4<f32>(x_2614.x, x_2614.x, x_2614.z, x_2614.z));
        let x_2617 : vec4<f32> = u_xlat10;
        let x_2619 : vec2<f32> = (vec2<f32>(x_2617.y, x_2617.w) * vec2<f32>(0.040816002f, 0.040816002f));
        let x_2620 : vec4<f32> = u_xlat11;
        u_xlat11 = vec4<f32>(x_2620.x, x_2619.x, x_2620.z, x_2619.y);
        let x_2622 : vec4<f32> = u_xlat10;
        let x_2625 : vec2<f32> = u_xlat52;
        let x_2627 : vec2<f32> = ((vec2<f32>(x_2622.x, x_2622.z) * vec2<f32>(0.5f, 0.5f)) + -(x_2625));
        let x_2628 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_2627.x, x_2628.y, x_2627.y, x_2628.w);
        let x_2630 : vec2<f32> = u_xlat52;
        let x_2632 : vec2<f32> = (-(x_2630) + vec2<f32>(1.0f, 1.0f));
        let x_2633 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_2632.x, x_2632.y, x_2633.z, x_2633.w);
        let x_2635 : vec2<f32> = u_xlat52;
        u_xlat54 = min(x_2635, vec2<f32>(0.0f, 0.0f));
        let x_2637 : vec2<f32> = u_xlat54;
        let x_2639 : vec2<f32> = u_xlat54;
        let x_2641 : vec4<f32> = u_xlat10;
        let x_2643 : vec2<f32> = ((-(x_2637) * x_2639) + vec2<f32>(x_2641.x, x_2641.y));
        let x_2644 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_2643.x, x_2643.y, x_2644.z, x_2644.w);
        let x_2646 : vec2<f32> = u_xlat52;
        u_xlat54 = max(x_2646, vec2<f32>(0.0f, 0.0f));
        let x_2649 : vec2<f32> = u_xlat54;
        let x_2651 : vec2<f32> = u_xlat54;
        let x_2653 : vec4<f32> = u_xlat9;
        let x_2655 : vec2<f32> = ((-(x_2649) * x_2651) + vec2<f32>(x_2653.y, x_2653.w));
        let x_2656 : vec3<f32> = u_xlat31;
        u_xlat31 = vec3<f32>(x_2655.x, x_2656.y, x_2655.y);
        let x_2658 : vec4<f32> = u_xlat10;
        let x_2660 : vec2<f32> = (vec2<f32>(x_2658.x, x_2658.y) + vec2<f32>(2.0f, 2.0f));
        let x_2661 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_2660.x, x_2660.y, x_2661.z, x_2661.w);
        let x_2663 : vec3<f32> = u_xlat31;
        let x_2665 : vec2<f32> = (vec2<f32>(x_2663.x, x_2663.z) + vec2<f32>(2.0f, 2.0f));
        let x_2666 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_2666.x, x_2665.x, x_2666.z, x_2665.y);
        let x_2669 : f32 = u_xlat9.y;
        u_xlat12.z = (x_2669 * 0.081632003f);
        let x_2672 : vec4<f32> = u_xlat9;
        let x_2674 : vec3<f32> = (vec3<f32>(x_2672.z, x_2672.x, x_2672.w) * vec3<f32>(0.081632003f, 0.081632003f, 0.081632003f));
        let x_2675 : vec4<f32> = u_xlat13;
        u_xlat13 = vec4<f32>(x_2674.x, x_2674.y, x_2674.z, x_2675.w);
        let x_2677 : vec4<f32> = u_xlat10;
        let x_2679 : vec2<f32> = (vec2<f32>(x_2677.x, x_2677.y) * vec2<f32>(0.081632003f, 0.081632003f));
        let x_2680 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_2679.x, x_2679.y, x_2680.z, x_2680.w);
        let x_2683 : f32 = u_xlat13.y;
        u_xlat12.x = x_2683;
        let x_2685 : vec2<f32> = u_xlat52;
        let x_2688 : vec2<f32> = ((vec2<f32>(x_2685.x, x_2685.x) * vec2<f32>(-0.081632003f, 0.081632003f)) + vec2<f32>(0.163264006f, 0.081632003f));
        let x_2689 : vec4<f32> = u_xlat12;
        u_xlat12 = vec4<f32>(x_2689.x, x_2688.x, x_2689.z, x_2688.y);
        let x_2691 : vec2<f32> = u_xlat52;
        let x_2694 : vec2<f32> = ((vec2<f32>(x_2691.x, x_2691.x) * vec2<f32>(-0.081632003f, 0.081632003f)) + vec2<f32>(0.081632003f, 0.163264006f));
        let x_2695 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_2694.x, x_2695.y, x_2694.y, x_2695.w);
        let x_2698 : f32 = u_xlat9.x;
        u_xlat10.y = x_2698;
        let x_2701 : f32 = u_xlat11.y;
        u_xlat10.w = x_2701;
        let x_2703 : vec4<f32> = u_xlat10;
        let x_2704 : vec4<f32> = u_xlat12;
        u_xlat12 = (x_2703 + x_2704);
        let x_2706 : vec2<f32> = u_xlat52;
        let x_2709 : vec2<f32> = ((vec2<f32>(x_2706.y, x_2706.y) * vec2<f32>(-0.081632003f, 0.081632003f)) + vec2<f32>(0.163264006f, 0.081632003f));
        let x_2710 : vec4<f32> = u_xlat13;
        u_xlat13 = vec4<f32>(x_2710.x, x_2709.x, x_2710.z, x_2709.y);
        let x_2712 : vec2<f32> = u_xlat52;
        let x_2715 : vec2<f32> = ((vec2<f32>(x_2712.y, x_2712.y) * vec2<f32>(-0.081632003f, 0.081632003f)) + vec2<f32>(0.081632003f, 0.163264006f));
        let x_2716 : vec4<f32> = u_xlat11;
        u_xlat11 = vec4<f32>(x_2715.x, x_2716.y, x_2715.y, x_2716.w);
        let x_2719 : f32 = u_xlat9.y;
        u_xlat11.y = x_2719;
        let x_2721 : vec4<f32> = u_xlat11;
        let x_2722 : vec4<f32> = u_xlat13;
        u_xlat9 = (x_2721 + x_2722);
        let x_2724 : vec4<f32> = u_xlat10;
        let x_2725 : vec4<f32> = u_xlat12;
        u_xlat10 = (x_2724 / x_2725);
        let x_2727 : vec4<f32> = u_xlat10;
        u_xlat10 = (x_2727 + vec4<f32>(-3.5f, -1.5f, 0.5f, 2.5f));
        let x_2729 : vec4<f32> = u_xlat11;
        let x_2730 : vec4<f32> = u_xlat9;
        u_xlat11 = (x_2729 / x_2730);
        let x_2732 : vec4<f32> = u_xlat11;
        u_xlat11 = (x_2732 + vec4<f32>(-3.5f, -1.5f, 0.5f, 2.5f));
        let x_2734 : vec4<f32> = u_xlat10;
        let x_2737 : vec4<f32> = x_138.x_MainLightShadowmapSize;
        u_xlat10 = (vec4<f32>(x_2734.w, x_2734.x, x_2734.y, x_2734.z) * vec4<f32>(x_2737.x, x_2737.x, x_2737.x, x_2737.x));
        let x_2740 : vec4<f32> = u_xlat11;
        let x_2743 : vec4<f32> = x_138.x_MainLightShadowmapSize;
        u_xlat11 = (vec4<f32>(x_2740.x, x_2740.w, x_2740.y, x_2740.z) * vec4<f32>(x_2743.y, x_2743.y, x_2743.y, x_2743.y));
        let x_2746 : vec4<f32> = u_xlat10;
        let x_2747 : vec3<f32> = vec3<f32>(x_2746.y, x_2746.z, x_2746.w);
        let x_2748 : vec4<f32> = u_xlat13;
        u_xlat13 = vec4<f32>(x_2747.x, x_2748.y, x_2747.y, x_2747.z);
        let x_2751 : f32 = u_xlat11.x;
        u_xlat13.y = x_2751;
        let x_2753 : vec4<f32> = u_xlat8;
        let x_2756 : vec4<f32> = x_138.x_MainLightShadowmapSize;
        let x_2759 : vec4<f32> = u_xlat13;
        u_xlat14 = ((vec4<f32>(x_2753.x, x_2753.y, x_2753.x, x_2753.y) * vec4<f32>(x_2756.x, x_2756.y, x_2756.x, x_2756.y)) + vec4<f32>(x_2759.x, x_2759.y, x_2759.z, x_2759.y));
        let x_2762 : vec4<f32> = u_xlat8;
        let x_2765 : vec4<f32> = x_138.x_MainLightShadowmapSize;
        let x_2768 : vec4<f32> = u_xlat13;
        u_xlat52 = ((vec2<f32>(x_2762.x, x_2762.y) * vec2<f32>(x_2765.x, x_2765.y)) + vec2<f32>(x_2768.w, x_2768.y));
        let x_2772 : f32 = u_xlat13.y;
        u_xlat10.y = x_2772;
        let x_2775 : f32 = u_xlat11.z;
        u_xlat13.y = x_2775;
        let x_2777 : vec4<f32> = u_xlat8;
        let x_2780 : vec4<f32> = x_138.x_MainLightShadowmapSize;
        let x_2783 : vec4<f32> = u_xlat13;
        u_xlat15 = ((vec4<f32>(x_2777.x, x_2777.y, x_2777.x, x_2777.y) * vec4<f32>(x_2780.x, x_2780.y, x_2780.x, x_2780.y)) + vec4<f32>(x_2783.x, x_2783.y, x_2783.z, x_2783.y));
        let x_2786 : vec4<f32> = u_xlat8;
        let x_2789 : vec4<f32> = x_138.x_MainLightShadowmapSize;
        let x_2792 : vec4<f32> = u_xlat13;
        let x_2794 : vec2<f32> = ((vec2<f32>(x_2786.x, x_2786.y) * vec2<f32>(x_2789.x, x_2789.y)) + vec2<f32>(x_2792.w, x_2792.y));
        let x_2795 : vec4<f32> = u_xlat16;
        u_xlat16 = vec4<f32>(x_2794.x, x_2794.y, x_2795.z, x_2795.w);
        let x_2798 : f32 = u_xlat13.y;
        u_xlat10.z = x_2798;
        let x_2800 : vec4<f32> = u_xlat8;
        let x_2803 : vec4<f32> = x_138.x_MainLightShadowmapSize;
        let x_2806 : vec4<f32> = u_xlat10;
        u_xlat17 = ((vec4<f32>(x_2800.x, x_2800.y, x_2800.x, x_2800.y) * vec4<f32>(x_2803.x, x_2803.y, x_2803.x, x_2803.y)) + vec4<f32>(x_2806.x, x_2806.y, x_2806.x, x_2806.z));
        let x_2810 : f32 = u_xlat11.w;
        u_xlat13.y = x_2810;
        let x_2812 : vec4<f32> = u_xlat8;
        let x_2815 : vec4<f32> = x_138.x_MainLightShadowmapSize;
        let x_2818 : vec4<f32> = u_xlat13;
        u_xlat18 = ((vec4<f32>(x_2812.x, x_2812.y, x_2812.x, x_2812.y) * vec4<f32>(x_2815.x, x_2815.y, x_2815.x, x_2815.y)) + vec4<f32>(x_2818.x, x_2818.y, x_2818.z, x_2818.y));
        let x_2822 : vec4<f32> = u_xlat8;
        let x_2825 : vec4<f32> = x_138.x_MainLightShadowmapSize;
        let x_2828 : vec4<f32> = u_xlat13;
        u_xlat32 = ((vec2<f32>(x_2822.x, x_2822.y) * vec2<f32>(x_2825.x, x_2825.y)) + vec2<f32>(x_2828.w, x_2828.y));
        let x_2832 : f32 = u_xlat13.y;
        u_xlat10.w = x_2832;
        let x_2835 : vec4<f32> = u_xlat8;
        let x_2838 : vec4<f32> = x_138.x_MainLightShadowmapSize;
        let x_2841 : vec4<f32> = u_xlat10;
        u_xlat60 = ((vec2<f32>(x_2835.x, x_2835.y) * vec2<f32>(x_2838.x, x_2838.y)) + vec2<f32>(x_2841.x, x_2841.w));
        let x_2844 : vec4<f32> = u_xlat13;
        let x_2845 : vec3<f32> = vec3<f32>(x_2844.x, x_2844.z, x_2844.w);
        let x_2846 : vec4<f32> = u_xlat11;
        u_xlat11 = vec4<f32>(x_2845.x, x_2846.y, x_2845.y, x_2845.z);
        let x_2848 : vec4<f32> = u_xlat8;
        let x_2851 : vec4<f32> = x_138.x_MainLightShadowmapSize;
        let x_2854 : vec4<f32> = u_xlat11;
        u_xlat13 = ((vec4<f32>(x_2848.x, x_2848.y, x_2848.x, x_2848.y) * vec4<f32>(x_2851.x, x_2851.y, x_2851.x, x_2851.y)) + vec4<f32>(x_2854.x, x_2854.y, x_2854.z, x_2854.y));
        let x_2858 : vec4<f32> = u_xlat8;
        let x_2861 : vec4<f32> = x_138.x_MainLightShadowmapSize;
        let x_2864 : vec4<f32> = u_xlat11;
        u_xlat55 = ((vec2<f32>(x_2858.x, x_2858.y) * vec2<f32>(x_2861.x, x_2861.y)) + vec2<f32>(x_2864.w, x_2864.y));
        let x_2868 : f32 = u_xlat10.x;
        u_xlat11.x = x_2868;
        let x_2870 : vec4<f32> = u_xlat8;
        let x_2873 : vec4<f32> = x_138.x_MainLightShadowmapSize;
        let x_2876 : vec4<f32> = u_xlat11;
        let x_2878 : vec2<f32> = ((vec2<f32>(x_2870.x, x_2870.y) * vec2<f32>(x_2873.x, x_2873.y)) + vec2<f32>(x_2876.x, x_2876.y));
        let x_2879 : vec4<f32> = u_xlat8;
        u_xlat8 = vec4<f32>(x_2878.x, x_2878.y, x_2879.z, x_2879.w);
        let x_2882 : vec4<f32> = u_xlat9;
        let x_2884 : vec4<f32> = u_xlat12;
        u_xlat19 = (vec4<f32>(x_2882.x, x_2882.x, x_2882.x, x_2882.x) * x_2884);
        let x_2887 : vec4<f32> = u_xlat9;
        let x_2889 : vec4<f32> = u_xlat12;
        u_xlat20 = (vec4<f32>(x_2887.y, x_2887.y, x_2887.y, x_2887.y) * x_2889);
        let x_2892 : vec4<f32> = u_xlat9;
        let x_2894 : vec4<f32> = u_xlat12;
        u_xlat21 = (vec4<f32>(x_2892.z, x_2892.z, x_2892.z, x_2892.z) * x_2894);
        let x_2896 : vec4<f32> = u_xlat9;
        let x_2898 : vec4<f32> = u_xlat12;
        u_xlat9 = (vec4<f32>(x_2896.w, x_2896.w, x_2896.w, x_2896.w) * x_2898);
        let x_2901 : vec4<f32> = u_xlat14;
        let x_2902 : vec2<f32> = vec2<f32>(x_2901.x, x_2901.y);
        let x_2904 : f32 = u_xlat4.z;
        txVec43 = vec3<f32>(x_2902.x, x_2902.y, x_2904);
        let x_2911 : vec3<f32> = txVec43;
        let x_2913 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2911.xy, x_2911.z);
        u_xlat73 = x_2913;
        let x_2915 : vec4<f32> = u_xlat14;
        let x_2916 : vec2<f32> = vec2<f32>(x_2915.z, x_2915.w);
        let x_2918 : f32 = u_xlat4.z;
        txVec44 = vec3<f32>(x_2916.x, x_2916.y, x_2918);
        let x_2925 : vec3<f32> = txVec44;
        let x_2927 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2925.xy, x_2925.z);
        u_xlat10.x = x_2927;
        let x_2930 : f32 = u_xlat10.x;
        let x_2932 : f32 = u_xlat19.y;
        u_xlat10.x = (x_2930 * x_2932);
        let x_2936 : f32 = u_xlat19.x;
        let x_2937 : f32 = u_xlat73;
        let x_2940 : f32 = u_xlat10.x;
        u_xlat73 = ((x_2936 * x_2937) + x_2940);
        let x_2943 : vec2<f32> = u_xlat52;
        let x_2945 : f32 = u_xlat4.z;
        txVec45 = vec3<f32>(x_2943.x, x_2943.y, x_2945);
        let x_2952 : vec3<f32> = txVec45;
        let x_2954 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2952.xy, x_2952.z);
        u_xlat52.x = x_2954;
        let x_2957 : f32 = u_xlat19.z;
        let x_2959 : f32 = u_xlat52.x;
        let x_2961 : f32 = u_xlat73;
        u_xlat73 = ((x_2957 * x_2959) + x_2961);
        let x_2964 : vec4<f32> = u_xlat17;
        let x_2965 : vec2<f32> = vec2<f32>(x_2964.x, x_2964.y);
        let x_2967 : f32 = u_xlat4.z;
        txVec46 = vec3<f32>(x_2965.x, x_2965.y, x_2967);
        let x_2974 : vec3<f32> = txVec46;
        let x_2976 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2974.xy, x_2974.z);
        u_xlat52.x = x_2976;
        let x_2979 : f32 = u_xlat19.w;
        let x_2981 : f32 = u_xlat52.x;
        let x_2983 : f32 = u_xlat73;
        u_xlat73 = ((x_2979 * x_2981) + x_2983);
        let x_2986 : vec4<f32> = u_xlat15;
        let x_2987 : vec2<f32> = vec2<f32>(x_2986.x, x_2986.y);
        let x_2989 : f32 = u_xlat4.z;
        txVec47 = vec3<f32>(x_2987.x, x_2987.y, x_2989);
        let x_2996 : vec3<f32> = txVec47;
        let x_2998 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2996.xy, x_2996.z);
        u_xlat52.x = x_2998;
        let x_3001 : f32 = u_xlat20.x;
        let x_3003 : f32 = u_xlat52.x;
        let x_3005 : f32 = u_xlat73;
        u_xlat73 = ((x_3001 * x_3003) + x_3005);
        let x_3008 : vec4<f32> = u_xlat15;
        let x_3009 : vec2<f32> = vec2<f32>(x_3008.z, x_3008.w);
        let x_3011 : f32 = u_xlat4.z;
        txVec48 = vec3<f32>(x_3009.x, x_3009.y, x_3011);
        let x_3018 : vec3<f32> = txVec48;
        let x_3020 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_3018.xy, x_3018.z);
        u_xlat52.x = x_3020;
        let x_3023 : f32 = u_xlat20.y;
        let x_3025 : f32 = u_xlat52.x;
        let x_3027 : f32 = u_xlat73;
        u_xlat73 = ((x_3023 * x_3025) + x_3027);
        let x_3030 : vec4<f32> = u_xlat16;
        let x_3031 : vec2<f32> = vec2<f32>(x_3030.x, x_3030.y);
        let x_3033 : f32 = u_xlat4.z;
        txVec49 = vec3<f32>(x_3031.x, x_3031.y, x_3033);
        let x_3040 : vec3<f32> = txVec49;
        let x_3042 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_3040.xy, x_3040.z);
        u_xlat52.x = x_3042;
        let x_3045 : f32 = u_xlat20.z;
        let x_3047 : f32 = u_xlat52.x;
        let x_3049 : f32 = u_xlat73;
        u_xlat73 = ((x_3045 * x_3047) + x_3049);
        let x_3052 : vec4<f32> = u_xlat17;
        let x_3053 : vec2<f32> = vec2<f32>(x_3052.z, x_3052.w);
        let x_3055 : f32 = u_xlat4.z;
        txVec50 = vec3<f32>(x_3053.x, x_3053.y, x_3055);
        let x_3062 : vec3<f32> = txVec50;
        let x_3064 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_3062.xy, x_3062.z);
        u_xlat52.x = x_3064;
        let x_3067 : f32 = u_xlat20.w;
        let x_3069 : f32 = u_xlat52.x;
        let x_3071 : f32 = u_xlat73;
        u_xlat73 = ((x_3067 * x_3069) + x_3071);
        let x_3074 : vec4<f32> = u_xlat18;
        let x_3075 : vec2<f32> = vec2<f32>(x_3074.x, x_3074.y);
        let x_3077 : f32 = u_xlat4.z;
        txVec51 = vec3<f32>(x_3075.x, x_3075.y, x_3077);
        let x_3084 : vec3<f32> = txVec51;
        let x_3086 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_3084.xy, x_3084.z);
        u_xlat52.x = x_3086;
        let x_3089 : f32 = u_xlat21.x;
        let x_3091 : f32 = u_xlat52.x;
        let x_3093 : f32 = u_xlat73;
        u_xlat73 = ((x_3089 * x_3091) + x_3093);
        let x_3096 : vec4<f32> = u_xlat18;
        let x_3097 : vec2<f32> = vec2<f32>(x_3096.z, x_3096.w);
        let x_3099 : f32 = u_xlat4.z;
        txVec52 = vec3<f32>(x_3097.x, x_3097.y, x_3099);
        let x_3106 : vec3<f32> = txVec52;
        let x_3108 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_3106.xy, x_3106.z);
        u_xlat52.x = x_3108;
        let x_3111 : f32 = u_xlat21.y;
        let x_3113 : f32 = u_xlat52.x;
        let x_3115 : f32 = u_xlat73;
        u_xlat73 = ((x_3111 * x_3113) + x_3115);
        let x_3118 : vec2<f32> = u_xlat32;
        let x_3120 : f32 = u_xlat4.z;
        txVec53 = vec3<f32>(x_3118.x, x_3118.y, x_3120);
        let x_3127 : vec3<f32> = txVec53;
        let x_3129 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_3127.xy, x_3127.z);
        u_xlat52.x = x_3129;
        let x_3132 : f32 = u_xlat21.z;
        let x_3134 : f32 = u_xlat52.x;
        let x_3136 : f32 = u_xlat73;
        u_xlat73 = ((x_3132 * x_3134) + x_3136);
        let x_3139 : vec2<f32> = u_xlat60;
        let x_3141 : f32 = u_xlat4.z;
        txVec54 = vec3<f32>(x_3139.x, x_3139.y, x_3141);
        let x_3148 : vec3<f32> = txVec54;
        let x_3150 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_3148.xy, x_3148.z);
        u_xlat52.x = x_3150;
        let x_3153 : f32 = u_xlat21.w;
        let x_3155 : f32 = u_xlat52.x;
        let x_3157 : f32 = u_xlat73;
        u_xlat73 = ((x_3153 * x_3155) + x_3157);
        let x_3160 : vec4<f32> = u_xlat13;
        let x_3161 : vec2<f32> = vec2<f32>(x_3160.x, x_3160.y);
        let x_3163 : f32 = u_xlat4.z;
        txVec55 = vec3<f32>(x_3161.x, x_3161.y, x_3163);
        let x_3170 : vec3<f32> = txVec55;
        let x_3172 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_3170.xy, x_3170.z);
        u_xlat52.x = x_3172;
        let x_3175 : f32 = u_xlat9.x;
        let x_3177 : f32 = u_xlat52.x;
        let x_3179 : f32 = u_xlat73;
        u_xlat73 = ((x_3175 * x_3177) + x_3179);
        let x_3182 : vec4<f32> = u_xlat13;
        let x_3183 : vec2<f32> = vec2<f32>(x_3182.z, x_3182.w);
        let x_3185 : f32 = u_xlat4.z;
        txVec56 = vec3<f32>(x_3183.x, x_3183.y, x_3185);
        let x_3192 : vec3<f32> = txVec56;
        let x_3194 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_3192.xy, x_3192.z);
        u_xlat52.x = x_3194;
        let x_3197 : f32 = u_xlat9.y;
        let x_3199 : f32 = u_xlat52.x;
        let x_3201 : f32 = u_xlat73;
        u_xlat73 = ((x_3197 * x_3199) + x_3201);
        let x_3204 : vec2<f32> = u_xlat55;
        let x_3206 : f32 = u_xlat4.z;
        txVec57 = vec3<f32>(x_3204.x, x_3204.y, x_3206);
        let x_3213 : vec3<f32> = txVec57;
        let x_3215 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_3213.xy, x_3213.z);
        u_xlat52.x = x_3215;
        let x_3218 : f32 = u_xlat9.z;
        let x_3220 : f32 = u_xlat52.x;
        let x_3222 : f32 = u_xlat73;
        u_xlat73 = ((x_3218 * x_3220) + x_3222);
        let x_3225 : vec4<f32> = u_xlat8;
        let x_3226 : vec2<f32> = vec2<f32>(x_3225.x, x_3225.y);
        let x_3228 : f32 = u_xlat4.z;
        txVec58 = vec3<f32>(x_3226.x, x_3226.y, x_3228);
        let x_3235 : vec3<f32> = txVec58;
        let x_3237 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_3235.xy, x_3235.z);
        u_xlat8.x = x_3237;
        let x_3240 : f32 = u_xlat9.w;
        let x_3242 : f32 = u_xlat8.x;
        let x_3244 : f32 = u_xlat73;
        u_xlat66 = ((x_3240 * x_3242) + x_3244);
      }
    }
  } else {
    let x_3248 : vec4<f32> = u_xlat4;
    let x_3249 : vec2<f32> = vec2<f32>(x_3248.x, x_3248.y);
    let x_3251 : f32 = u_xlat4.z;
    txVec59 = vec3<f32>(x_3249.x, x_3249.y, x_3251);
    let x_3258 : vec3<f32> = txVec59;
    let x_3260 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_3258.xy, x_3258.z);
    u_xlat66 = x_3260;
  }
  let x_3261 : f32 = u_xlat66;
  let x_3263 : f32 = x_138.x_MainLightShadowParams.x;
  let x_3265 : f32 = u_xlat70;
  u_xlat66 = ((x_3261 * x_3263) + x_3265);
  let x_3267 : bool = u_xlatb5;
  let x_3268 : f32 = u_xlat66;
  u_xlat66 = select(x_3268, 1.0f, x_3267);
  let x_3270 : vec3<f32> = vs_INTERP0;
  let x_3272 : vec3<f32> = x_66.x_WorldSpaceCameraPos;
  let x_3274 : vec3<f32> = (x_3270 + -(x_3272));
  let x_3275 : vec4<f32> = u_xlat4;
  u_xlat4 = vec4<f32>(x_3274.x, x_3274.y, x_3274.z, x_3275.w);
  let x_3277 : vec4<f32> = u_xlat4;
  let x_3279 : vec4<f32> = u_xlat4;
  u_xlat4.x = dot(vec3<f32>(x_3277.x, x_3277.y, x_3277.z), vec3<f32>(x_3279.x, x_3279.y, x_3279.z));
  let x_3284 : f32 = u_xlat4.x;
  let x_3286 : f32 = x_138.x_MainLightShadowParams.z;
  let x_3289 : f32 = x_138.x_MainLightShadowParams.w;
  u_xlat4.x = ((x_3284 * x_3286) + x_3289);
  let x_3293 : f32 = u_xlat4.x;
  u_xlat4.x = clamp(x_3293, 0.0f, 1.0f);
  let x_3297 : f32 = u_xlat66;
  u_xlat26 = (-(x_3297) + 1.0f);
  let x_3301 : f32 = u_xlat4.x;
  let x_3302 : f32 = u_xlat26;
  let x_3304 : f32 = u_xlat66;
  u_xlat66 = ((x_3301 * x_3302) + x_3304);
  let x_3306 : vec2<f32> = u_xlat51;
  let x_3309 : vec4<f32> = x_66.x_MainLightColor;
  let x_3311 : vec3<f32> = (vec3<f32>(x_3306.x, x_3306.x, x_3306.x) * vec3<f32>(x_3309.x, x_3309.y, x_3309.z));
  let x_3312 : vec4<f32> = u_xlat4;
  u_xlat4 = vec4<f32>(x_3311.x, x_3311.y, x_3311.z, x_3312.w);
  let x_3314 : vec3<f32> = u_xlat27;
  let x_3316 : vec3<f32> = u_xlat25;
  u_xlat70 = dot(-(x_3314), x_3316);
  let x_3318 : f32 = u_xlat70;
  let x_3319 : f32 = u_xlat70;
  u_xlat70 = (x_3318 + x_3319);
  let x_3321 : vec3<f32> = u_xlat25;
  let x_3322 : f32 = u_xlat70;
  let x_3326 : vec3<f32> = u_xlat27;
  let x_3328 : vec3<f32> = ((x_3321 * -(vec3<f32>(x_3322, x_3322, x_3322))) + -(x_3326));
  let x_3329 : vec4<f32> = u_xlat8;
  u_xlat8 = vec4<f32>(x_3328.x, x_3328.y, x_3328.z, x_3329.w);
  let x_3331 : vec3<f32> = u_xlat25;
  let x_3332 : vec3<f32> = u_xlat27;
  u_xlat70 = dot(x_3331, x_3332);
  let x_3334 : f32 = u_xlat70;
  u_xlat70 = clamp(x_3334, 0.0f, 1.0f);
  let x_3336 : f32 = u_xlat70;
  u_xlat70 = (-(x_3336) + 1.0f);
  let x_3339 : f32 = u_xlat70;
  let x_3340 : f32 = u_xlat70;
  u_xlat70 = (x_3339 * x_3340);
  let x_3342 : f32 = u_xlat70;
  let x_3343 : f32 = u_xlat70;
  u_xlat70 = (x_3342 * x_3343);
  let x_3345 : f32 = u_xlat67;
  u_xlat5.x = ((-(x_3345) * 0.699999988f) + 1.700000048f);
  let x_3352 : f32 = u_xlat67;
  let x_3354 : f32 = u_xlat5.x;
  u_xlat67 = (x_3352 * x_3354);
  let x_3356 : f32 = u_xlat67;
  u_xlat67 = (x_3356 * 6.0f);
  let x_3367 : vec4<f32> = u_xlat8;
  let x_3369 : f32 = u_xlat67;
  let x_3370 : vec4<f32> = textureSampleLevel(unity_SpecCube0, samplerunity_SpecCube0, vec3<f32>(x_3367.x, x_3367.y, x_3367.z), x_3369);
  u_xlat8 = x_3370;
  let x_3372 : f32 = u_xlat8.w;
  u_xlat67 = (x_3372 + -1.0f);
  let x_3375 : f32 = x_1752.unity_SpecCube0_HDR.w;
  let x_3376 : f32 = u_xlat67;
  u_xlat67 = ((x_3375 * x_3376) + 1.0f);
  let x_3379 : f32 = u_xlat67;
  u_xlat67 = max(x_3379, 0.0f);
  let x_3381 : f32 = u_xlat67;
  u_xlat67 = log2(x_3381);
  let x_3383 : f32 = u_xlat67;
  let x_3385 : f32 = x_1752.unity_SpecCube0_HDR.y;
  u_xlat67 = (x_3383 * x_3385);
  let x_3387 : f32 = u_xlat67;
  u_xlat67 = exp2(x_3387);
  let x_3389 : f32 = u_xlat67;
  let x_3391 : f32 = x_1752.unity_SpecCube0_HDR.x;
  u_xlat67 = (x_3389 * x_3391);
  let x_3393 : vec4<f32> = u_xlat8;
  let x_3395 : f32 = u_xlat67;
  let x_3397 : vec3<f32> = (vec3<f32>(x_3393.x, x_3393.y, x_3393.z) * vec3<f32>(x_3395, x_3395, x_3395));
  let x_3398 : vec4<f32> = u_xlat8;
  u_xlat8 = vec4<f32>(x_3397.x, x_3397.y, x_3397.z, x_3398.w);
  let x_3400 : f32 = u_xlat68;
  let x_3402 : f32 = u_xlat68;
  let x_3406 : vec2<f32> = ((vec2<f32>(x_3400, x_3400) * vec2<f32>(x_3402, x_3402)) + vec2<f32>(-1.0f, 1.0f));
  let x_3407 : vec4<f32> = u_xlat9;
  u_xlat9 = vec4<f32>(x_3406.x, x_3406.y, x_3407.z, x_3407.w);
  let x_3410 : f32 = u_xlat9.y;
  u_xlat67 = (1.0f / x_3410);
  let x_3413 : f32 = u_xlat3.x;
  u_xlat68 = (x_3413 + -0.039999999f);
  let x_3416 : f32 = u_xlat70;
  let x_3417 : f32 = u_xlat68;
  u_xlat68 = ((x_3416 * x_3417) + 0.039999999f);
  let x_3421 : f32 = u_xlat67;
  let x_3422 : f32 = u_xlat68;
  u_xlat67 = (x_3421 * x_3422);
  let x_3424 : f32 = u_xlat67;
  let x_3426 : vec4<f32> = u_xlat8;
  let x_3428 : vec3<f32> = (vec3<f32>(x_3424, x_3424, x_3424) * vec3<f32>(x_3426.x, x_3426.y, x_3426.z));
  let x_3429 : vec4<f32> = u_xlat8;
  u_xlat8 = vec4<f32>(x_3428.x, x_3428.y, x_3428.z, x_3429.w);
  let x_3431 : vec4<f32> = u_xlat6;
  let x_3433 : vec3<f32> = u_xlat2;
  let x_3435 : vec4<f32> = u_xlat8;
  let x_3437 : vec3<f32> = ((vec3<f32>(x_3431.x, x_3431.y, x_3431.z) * x_3433) + vec3<f32>(x_3435.x, x_3435.y, x_3435.z));
  let x_3438 : vec4<f32> = u_xlat6;
  u_xlat6 = vec4<f32>(x_3437.x, x_3437.y, x_3437.z, x_3438.w);
  let x_3440 : f32 = u_xlat66;
  let x_3442 : f32 = x_1752.unity_LightData.z;
  u_xlat66 = (x_3440 * x_3442);
  let x_3444 : vec3<f32> = u_xlat25;
  let x_3446 : vec4<f32> = x_66.x_MainLightPosition;
  u_xlat67 = dot(x_3444, vec3<f32>(x_3446.x, x_3446.y, x_3446.z));
  let x_3449 : f32 = u_xlat67;
  u_xlat67 = clamp(x_3449, 0.0f, 1.0f);
  let x_3451 : f32 = u_xlat66;
  let x_3452 : f32 = u_xlat67;
  u_xlat66 = (x_3451 * x_3452);
  let x_3454 : f32 = u_xlat66;
  let x_3456 : vec4<f32> = u_xlat4;
  let x_3458 : vec3<f32> = (vec3<f32>(x_3454, x_3454, x_3454) * vec3<f32>(x_3456.x, x_3456.y, x_3456.z));
  let x_3459 : vec4<f32> = u_xlat4;
  u_xlat4 = vec4<f32>(x_3458.x, x_3458.y, x_3458.z, x_3459.w);
  let x_3461 : vec3<f32> = u_xlat27;
  let x_3463 : vec4<f32> = x_66.x_MainLightPosition;
  let x_3465 : vec3<f32> = (x_3461 + vec3<f32>(x_3463.x, x_3463.y, x_3463.z));
  let x_3466 : vec4<f32> = u_xlat8;
  u_xlat8 = vec4<f32>(x_3465.x, x_3465.y, x_3465.z, x_3466.w);
  let x_3468 : vec4<f32> = u_xlat8;
  let x_3470 : vec4<f32> = u_xlat8;
  u_xlat66 = dot(vec3<f32>(x_3468.x, x_3468.y, x_3468.z), vec3<f32>(x_3470.x, x_3470.y, x_3470.z));
  let x_3473 : f32 = u_xlat66;
  u_xlat66 = max(x_3473, 1.17549435e-37f);
  let x_3476 : f32 = u_xlat66;
  u_xlat66 = inverseSqrt(x_3476);
  let x_3478 : f32 = u_xlat66;
  let x_3480 : vec4<f32> = u_xlat8;
  let x_3482 : vec3<f32> = (vec3<f32>(x_3478, x_3478, x_3478) * vec3<f32>(x_3480.x, x_3480.y, x_3480.z));
  let x_3483 : vec4<f32> = u_xlat8;
  u_xlat8 = vec4<f32>(x_3482.x, x_3482.y, x_3482.z, x_3483.w);
  let x_3485 : vec3<f32> = u_xlat25;
  let x_3486 : vec4<f32> = u_xlat8;
  u_xlat66 = dot(x_3485, vec3<f32>(x_3486.x, x_3486.y, x_3486.z));
  let x_3489 : f32 = u_xlat66;
  u_xlat66 = clamp(x_3489, 0.0f, 1.0f);
  let x_3492 : vec4<f32> = x_66.x_MainLightPosition;
  let x_3494 : vec4<f32> = u_xlat8;
  u_xlat67 = dot(vec3<f32>(x_3492.x, x_3492.y, x_3492.z), vec3<f32>(x_3494.x, x_3494.y, x_3494.z));
  let x_3497 : f32 = u_xlat67;
  u_xlat67 = clamp(x_3497, 0.0f, 1.0f);
  let x_3499 : f32 = u_xlat66;
  let x_3500 : f32 = u_xlat66;
  u_xlat66 = (x_3499 * x_3500);
  let x_3502 : f32 = u_xlat66;
  let x_3504 : f32 = u_xlat9.x;
  u_xlat66 = ((x_3502 * x_3504) + 1.000010014f);
  let x_3508 : f32 = u_xlat67;
  let x_3509 : f32 = u_xlat67;
  u_xlat67 = (x_3508 * x_3509);
  let x_3511 : f32 = u_xlat66;
  let x_3512 : f32 = u_xlat66;
  u_xlat66 = (x_3511 * x_3512);
  let x_3514 : f32 = u_xlat67;
  u_xlat67 = max(x_3514, 0.100000001f);
  let x_3517 : f32 = u_xlat66;
  let x_3518 : f32 = u_xlat67;
  u_xlat66 = (x_3517 * x_3518);
  let x_3521 : f32 = u_xlat29.x;
  let x_3522 : f32 = u_xlat66;
  u_xlat66 = (x_3521 * x_3522);
  let x_3524 : f32 = u_xlat72;
  let x_3525 : f32 = u_xlat66;
  u_xlat66 = (x_3524 / x_3525);
  let x_3527 : f32 = u_xlat66;
  let x_3531 : vec3<f32> = u_xlat2;
  let x_3532 : vec3<f32> = ((vec3<f32>(x_3527, x_3527, x_3527) * vec3<f32>(0.039999999f, 0.039999999f, 0.039999999f)) + x_3531);
  let x_3533 : vec4<f32> = u_xlat8;
  u_xlat8 = vec4<f32>(x_3532.x, x_3532.y, x_3532.z, x_3533.w);
  let x_3535 : vec4<f32> = u_xlat4;
  let x_3537 : vec4<f32> = u_xlat8;
  let x_3539 : vec3<f32> = (vec3<f32>(x_3535.x, x_3535.y, x_3535.z) * vec3<f32>(x_3537.x, x_3537.y, x_3537.z));
  let x_3540 : vec4<f32> = u_xlat4;
  u_xlat4 = vec4<f32>(x_3539.x, x_3539.y, x_3539.z, x_3540.w);
  let x_3543 : f32 = x_66.x_AdditionalLightsCount.x;
  let x_3545 : f32 = x_1752.unity_LightData.y;
  u_xlat66 = min(x_3543, x_3545);
  let x_3547 : f32 = u_xlat66;
  u_xlatu66 = bitcast<u32>(i32(x_3547));
  u_xlat8.x = 0.0f;
  u_xlat8.y = 0.0f;
  u_xlat8.z = 0.0f;
  u_xlatu_loop_1 = 0u;
  loop {
    let x_3559 : u32 = u_xlatu_loop_1;
    let x_3560 : u32 = u_xlatu66;
    if ((x_3559 < x_3560)) {
    } else {
      break;
    }
    let x_3563 : u32 = u_xlatu_loop_1;
    u_xlatu68 = (x_3563 >> 2u);
    let x_3566 : u32 = u_xlatu_loop_1;
    u_xlati3 = bitcast<i32>((x_3566 & 3u));
    let x_3569 : u32 = u_xlatu68;
    let x_3572 : vec4<f32> = x_1752.unity_LightIndices[bitcast<i32>(x_3569)];
    let x_3582 : i32 = u_xlati3;
    indexable = array<vec4<u32>, 4u>(vec4<u32>(1065353216u, 0u, 0u, 0u), vec4<u32>(0u, 1065353216u, 0u, 0u), vec4<u32>(0u, 0u, 1065353216u, 0u), vec4<u32>(0u, 0u, 0u, 1065353216u));
    let x_3587 : vec4<u32> = indexable[x_3582];
    u_xlat68 = dot(x_3572, bitcast<vec4<f32>>(x_3587));
    let x_3591 : f32 = u_xlat68;
    u_xlati68 = i32(x_3591);
    let x_3593 : vec3<f32> = vs_INTERP0;
    let x_3605 : i32 = u_xlati68;
    let x_3607 : vec4<f32> = x_3604.x_AdditionalLightsPosition[x_3605];
    let x_3610 : i32 = u_xlati68;
    let x_3612 : vec4<f32> = x_3604.x_AdditionalLightsPosition[x_3610];
    u_xlat31 = ((-(x_3593) * vec3<f32>(x_3607.w, x_3607.w, x_3607.w)) + vec3<f32>(x_3612.x, x_3612.y, x_3612.z));
    let x_3615 : vec3<f32> = u_xlat31;
    let x_3616 : vec3<f32> = u_xlat31;
    u_xlat3.x = dot(x_3615, x_3616);
    let x_3620 : f32 = u_xlat3.x;
    u_xlat3.x = max(x_3620, 6.10351562e-05f);
    let x_3625 : f32 = u_xlat3.x;
    u_xlat70 = inverseSqrt(x_3625);
    let x_3627 : f32 = u_xlat70;
    let x_3629 : vec3<f32> = u_xlat31;
    let x_3630 : vec3<f32> = (vec3<f32>(x_3627, x_3627, x_3627) * x_3629);
    let x_3631 : vec4<f32> = u_xlat10;
    u_xlat10 = vec4<f32>(x_3630.x, x_3630.y, x_3630.z, x_3631.w);
    let x_3634 : f32 = u_xlat3.x;
    u_xlat5.x = (1.0f / x_3634);
    let x_3638 : f32 = u_xlat3.x;
    let x_3639 : i32 = u_xlati68;
    let x_3641 : f32 = x_3604.x_AdditionalLightsAttenuation[x_3639].x;
    u_xlat3.x = (x_3638 * x_3641);
    let x_3645 : f32 = u_xlat3.x;
    let x_3648 : f32 = u_xlat3.x;
    u_xlat3.x = ((-(x_3645) * x_3648) + 1.0f);
    let x_3653 : f32 = u_xlat3.x;
    u_xlat3.x = max(x_3653, 0.0f);
    let x_3657 : f32 = u_xlat3.x;
    let x_3659 : f32 = u_xlat3.x;
    u_xlat3.x = (x_3657 * x_3659);
    let x_3663 : f32 = u_xlat3.x;
    let x_3665 : f32 = u_xlat5.x;
    u_xlat3.x = (x_3663 * x_3665);
    let x_3668 : i32 = u_xlati68;
    let x_3670 : vec4<f32> = x_3604.x_AdditionalLightsSpotDir[x_3668];
    let x_3672 : vec4<f32> = u_xlat10;
    u_xlat5.x = dot(vec3<f32>(x_3670.x, x_3670.y, x_3670.z), vec3<f32>(x_3672.x, x_3672.y, x_3672.z));
    let x_3677 : f32 = u_xlat5.x;
    let x_3678 : i32 = u_xlati68;
    let x_3680 : f32 = x_3604.x_AdditionalLightsAttenuation[x_3678].z;
    let x_3682 : i32 = u_xlati68;
    let x_3684 : f32 = x_3604.x_AdditionalLightsAttenuation[x_3682].w;
    u_xlat5.x = ((x_3677 * x_3680) + x_3684);
    let x_3688 : f32 = u_xlat5.x;
    u_xlat5.x = clamp(x_3688, 0.0f, 1.0f);
    let x_3692 : f32 = u_xlat5.x;
    let x_3694 : f32 = u_xlat5.x;
    u_xlat5.x = (x_3692 * x_3694);
    let x_3698 : f32 = u_xlat3.x;
    let x_3700 : f32 = u_xlat5.x;
    u_xlat3.x = (x_3698 * x_3700);
    let x_3703 : vec2<f32> = u_xlat51;
    let x_3705 : i32 = u_xlati68;
    let x_3707 : vec4<f32> = x_3604.x_AdditionalLightsColor[x_3705];
    let x_3709 : vec3<f32> = (vec3<f32>(x_3703.x, x_3703.x, x_3703.x) * vec3<f32>(x_3707.x, x_3707.y, x_3707.z));
    let x_3710 : vec4<f32> = u_xlat11;
    u_xlat11 = vec4<f32>(x_3709.x, x_3709.y, x_3709.z, x_3710.w);
    let x_3712 : vec3<f32> = u_xlat25;
    let x_3713 : vec4<f32> = u_xlat10;
    u_xlat68 = dot(x_3712, vec3<f32>(x_3713.x, x_3713.y, x_3713.z));
    let x_3716 : f32 = u_xlat68;
    u_xlat68 = clamp(x_3716, 0.0f, 1.0f);
    let x_3718 : f32 = u_xlat68;
    let x_3720 : f32 = u_xlat3.x;
    u_xlat68 = (x_3718 * x_3720);
    let x_3722 : f32 = u_xlat68;
    let x_3724 : vec4<f32> = u_xlat11;
    let x_3726 : vec3<f32> = (vec3<f32>(x_3722, x_3722, x_3722) * vec3<f32>(x_3724.x, x_3724.y, x_3724.z));
    let x_3727 : vec4<f32> = u_xlat11;
    u_xlat11 = vec4<f32>(x_3726.x, x_3726.y, x_3726.z, x_3727.w);
    let x_3729 : vec3<f32> = u_xlat31;
    let x_3730 : f32 = u_xlat70;
    let x_3733 : vec3<f32> = u_xlat27;
    u_xlat31 = ((x_3729 * vec3<f32>(x_3730, x_3730, x_3730)) + x_3733);
    let x_3735 : vec3<f32> = u_xlat31;
    let x_3736 : vec3<f32> = u_xlat31;
    u_xlat68 = dot(x_3735, x_3736);
    let x_3738 : f32 = u_xlat68;
    u_xlat68 = max(x_3738, 1.17549435e-37f);
    let x_3740 : f32 = u_xlat68;
    u_xlat68 = inverseSqrt(x_3740);
    let x_3742 : f32 = u_xlat68;
    let x_3744 : vec3<f32> = u_xlat31;
    u_xlat31 = (vec3<f32>(x_3742, x_3742, x_3742) * x_3744);
    let x_3746 : vec3<f32> = u_xlat25;
    let x_3747 : vec3<f32> = u_xlat31;
    u_xlat68 = dot(x_3746, x_3747);
    let x_3749 : f32 = u_xlat68;
    u_xlat68 = clamp(x_3749, 0.0f, 1.0f);
    let x_3751 : vec4<f32> = u_xlat10;
    let x_3753 : vec3<f32> = u_xlat31;
    u_xlat3.x = dot(vec3<f32>(x_3751.x, x_3751.y, x_3751.z), x_3753);
    let x_3757 : f32 = u_xlat3.x;
    u_xlat3.x = clamp(x_3757, 0.0f, 1.0f);
    let x_3760 : f32 = u_xlat68;
    let x_3761 : f32 = u_xlat68;
    u_xlat68 = (x_3760 * x_3761);
    let x_3763 : f32 = u_xlat68;
    let x_3765 : f32 = u_xlat9.x;
    u_xlat68 = ((x_3763 * x_3765) + 1.000010014f);
    let x_3769 : f32 = u_xlat3.x;
    let x_3771 : f32 = u_xlat3.x;
    u_xlat3.x = (x_3769 * x_3771);
    let x_3774 : f32 = u_xlat68;
    let x_3775 : f32 = u_xlat68;
    u_xlat68 = (x_3774 * x_3775);
    let x_3778 : f32 = u_xlat3.x;
    u_xlat3.x = max(x_3778, 0.100000001f);
    let x_3781 : f32 = u_xlat68;
    let x_3783 : f32 = u_xlat3.x;
    u_xlat68 = (x_3781 * x_3783);
    let x_3786 : f32 = u_xlat29.x;
    let x_3787 : f32 = u_xlat68;
    u_xlat68 = (x_3786 * x_3787);
    let x_3789 : f32 = u_xlat72;
    let x_3790 : f32 = u_xlat68;
    u_xlat68 = (x_3789 / x_3790);
    let x_3792 : f32 = u_xlat68;
    let x_3795 : vec3<f32> = u_xlat2;
    u_xlat31 = ((vec3<f32>(x_3792, x_3792, x_3792) * vec3<f32>(0.039999999f, 0.039999999f, 0.039999999f)) + x_3795);
    let x_3797 : vec3<f32> = u_xlat31;
    let x_3798 : vec4<f32> = u_xlat11;
    let x_3801 : vec4<f32> = u_xlat8;
    let x_3803 : vec3<f32> = ((x_3797 * vec3<f32>(x_3798.x, x_3798.y, x_3798.z)) + vec3<f32>(x_3801.x, x_3801.y, x_3801.z));
    let x_3804 : vec4<f32> = u_xlat8;
    u_xlat8 = vec4<f32>(x_3803.x, x_3803.y, x_3803.z, x_3804.w);

    continuing {
      let x_3806 : u32 = u_xlatu_loop_1;
      u_xlatu_loop_1 = (x_3806 + bitcast<u32>(1i));
    }
  }
  let x_3808 : vec4<f32> = u_xlat6;
  let x_3810 : vec4<f32> = u_xlat7;
  let x_3813 : vec4<f32> = u_xlat4;
  u_xlat2 = ((vec3<f32>(x_3808.x, x_3808.y, x_3808.z) * vec3<f32>(x_3810.x, x_3810.x, x_3810.x)) + vec3<f32>(x_3813.x, x_3813.y, x_3813.z));
  let x_3816 : vec4<f32> = u_xlat8;
  let x_3818 : vec3<f32> = u_xlat2;
  u_xlat2 = (vec3<f32>(x_3816.x, x_3816.y, x_3816.z) + x_3818);
  let x_3820 : vec4<f32> = vs_INTERP4;
  let x_3822 : vec3<f32> = u_xlat0;
  let x_3824 : vec3<f32> = u_xlat2;
  u_xlat0 = ((vec3<f32>(x_3820.w, x_3820.w, x_3820.w) * x_3822) + x_3824);
  let x_3827 : f32 = u_xlat23.x;
  let x_3829 : f32 = u_xlat23.x;
  u_xlat66 = (x_3827 * -(x_3829));
  let x_3832 : f32 = u_xlat66;
  u_xlat66 = exp2(x_3832);
  let x_3834 : vec3<f32> = u_xlat0;
  let x_3837 : vec4<f32> = x_66.unity_FogColor;
  u_xlat0 = (x_3834 + -(vec3<f32>(x_3837.x, x_3837.y, x_3837.z)));
  let x_3843 : f32 = u_xlat66;
  let x_3845 : vec3<f32> = u_xlat0;
  let x_3848 : vec4<f32> = x_66.unity_FogColor;
  let x_3850 : vec3<f32> = ((vec3<f32>(x_3843, x_3843, x_3843) * x_3845) + vec3<f32>(x_3848.x, x_3848.y, x_3848.z));
  let x_3851 : vec4<f32> = SV_Target0;
  SV_Target0 = vec4<f32>(x_3850.x, x_3850.y, x_3850.z, x_3851.w);
  let x_3853 : bool = u_xlatb45;
  if (x_3853) {
    let x_3858 : f32 = u_xlat1.x;
    x_3854 = x_3858;
  } else {
    x_3854 = 1.0f;
  }
  let x_3860 : f32 = x_3854;
  SV_Target0.w = x_3860;
  return;
}

struct main_out {
  @location(0)
  SV_Target0_1 : vec4<f32>,
}

@fragment
fn main(@builtin(position) gl_FragCoord_param : vec4<f32>, @location(1) vs_INTERP1_param : vec3<f32>, @location(3) vs_INTERP3_param : vec4<f32>, @location(4) vs_INTERP4_param : vec4<f32>, @location(0) vs_INTERP0_param : vec3<f32>, @location(2) vs_INTERP2_param : vec4<f32>, @location(5) vs_INTERP5_param : vec2<f32>) -> main_out {
  gl_FragCoord = gl_FragCoord_param;
  vs_INTERP1 = vs_INTERP1_param;
  vs_INTERP3 = vs_INTERP3_param;
  vs_INTERP4 = vs_INTERP4_param;
  vs_INTERP0 = vs_INTERP0_param;
  vs_INTERP2 = vs_INTERP2_param;
  vs_INTERP5 = vs_INTERP5_param;
  main_1();
  return main_out(SV_Target0);
}

