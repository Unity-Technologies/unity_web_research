#version 440
#extension GL_ARB_explicit_attrib_location : require
#extension GL_ARB_shading_language_420pack : require

layout(origin_upper_left) in vec4 gl_FragCoord;
#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
precise vec4 u_xlat_precise_vec4;
precise ivec4 u_xlat_precise_ivec4;
precise bvec4 u_xlat_precise_bvec4;
precise uvec4 u_xlat_precise_uvec4;
const uvec4 ImmCB_0[] = uvec4[4] (
	uvec4(0x3F800000, 0x0, 0x0, 0x0),
	uvec4(0x0, 0x3F800000, 0x0, 0x0),
	uvec4(0x0, 0x0, 0x3F800000, 0x0),
	uvec4(0x0, 0x0, 0x0, 0x3F800000));
layout(set = 1, binding = 0, std140) uniform PGlobals {
	vec4 _ScaledScreenParams;
	vec2 _GlobalMipBias;
	vec4 _MainLightPosition;
	vec4 _MainLightColor;
	vec4 _AmbientOcclusionParam;
	vec4 _AdditionalLightsCount;
	vec3 _WorldSpaceCameraPos;
	vec4 _ProjectionParams;
	vec4 unity_OrthoParams;
	vec4 _ScaleBiasRt;
	vec4 unity_FogParams;
	vec4 unity_FogColor;
	mat4x4 unity_MatrixV;
	float _DitheringTextureInvSize;
};
layout(set = 1, binding = 1, std140) uniform AdditionalLights {
	vec4 _AdditionalLightsPosition[256];
	vec4 _AdditionalLightsColor[256];
	vec4 _AdditionalLightsAttenuation[256];
	vec4 _AdditionalLightsSpotDir[256];
	vec4 _AdditionalLightsOcclusionProbes[256];
	float _AdditionalLightsLayerMasks[256];
};
layout(set = 1, binding = 2, std140) uniform UnityPerDraw {
	mat4x4 unity_ObjectToWorld;
	mat4x4 unity_WorldToObject;
	vec4 unity_LODFade;
	vec4 unity_WorldTransformParams;
	vec4 unity_RenderingLayer;
	vec4 unity_LightData;
	vec4 unity_LightIndices[2];
	vec4 unity_ProbesOcclusion;
	vec4 unity_SpecCube0_HDR;
	vec4 unity_SpecCube1_HDR;
	vec4 unity_SpecCube0_BoxMax;
	vec4 unity_SpecCube0_BoxMin;
	vec4 unity_SpecCube0_ProbePosition;
	vec4 unity_SpecCube1_BoxMax;
	vec4 unity_SpecCube1_BoxMin;
	vec4 unity_SpecCube1_ProbePosition;
	vec4 unity_LightmapST;
	vec4 unity_DynamicLightmapST;
	vec4 unity_SHAr;
	vec4 unity_SHAg;
	vec4 unity_SHAb;
	vec4 unity_SHBr;
	vec4 unity_SHBg;
	vec4 unity_SHBb;
	vec4 unity_SHC;
	vec4 unity_RendererBounds_Min;
	vec4 unity_RendererBounds_Max;
	mat4x4 unity_MatrixPreviousM;
	mat4x4 unity_MatrixPreviousMI;
	vec4 unity_MotionVectorsParams;
	vec4 unity_SpriteColor;
	vec4 unity_SpriteProps;
};
layout(set = 1, binding = 3, std140) uniform UnityPerMaterial {
	vec4 _BaseMap_ST;
	vec4 _BaseColor;
	vec4 _SpecColor;
	vec4 _EmissionColor;
	float _Cutoff;
	float _Surface;
};
layout(set = 1, binding = 4, std140) uniform MainLightShadows {
	mat4x4 _MainLightWorldToShadow[5];
	vec4 _CascadeShadowSplitSpheres0;
	vec4 _CascadeShadowSplitSpheres1;
	vec4 _CascadeShadowSplitSpheres2;
	vec4 _CascadeShadowSplitSpheres3;
	vec4 _CascadeShadowSplitSphereRadii;
	vec4 _MainLightShadowOffset0;
	vec4 _MainLightShadowOffset1;
	vec4 _MainLightShadowParams;
	vec4 _MainLightShadowmapSize;
};
layout(set = 0, binding = 0) uniform mediump texture2D _BaseMap;
layout(set = 0, binding = 1) uniform mediump texture2D _ScreenSpaceOcclusionTexture;
layout(set = 0, binding = 2) uniform mediump texture2D _MainLightShadowmapTexture;
layout(set = 0, binding = 3) uniform mediump texture2D _DitheringTexture;
layout(location = 0) in highp vec2 vs_TEXCOORD0;
layout(location = 1) in highp vec3 vs_TEXCOORD1;
layout(location = 2) in highp vec3 vs_TEXCOORD2;
layout(location = 0) out highp vec4 SV_Target0;
layout(set = 0, binding = 4) uniform mediump  sampler sampler_BaseMap;
layout(set = 0, binding = 5) uniform mediump  sampler sampler_ScreenSpaceOcclusionTexture;
layout(set = 0, binding = 6) uniform mediump  samplerShadow sampler_MainLightShadowmapTexture;
layout(set = 0, binding = 7) uniform mediump  sampler sampler_DitheringTexture;
void main()
{
vec4 u_xlat0;
vec3 u_xlat1;
bool u_xlatb1;
vec4 u_xlat2;
vec4 u_xlat3;
int u_xlati3;
uint u_xlatu3;
bvec4 u_xlatb3;
vec4 u_xlat4;
vec4 u_xlat5;
uint u_xlatu5;
bool u_xlatb5;
vec4 u_xlat6;
uint u_xlatu6;
vec4 u_xlat7;
vec4 u_xlat8;
vec4 u_xlat9;
vec4 u_xlat10;
vec4 u_xlat11;
vec4 u_xlat12;
vec4 u_xlat13;
vec4 u_xlat14;
vec4 u_xlat15;
vec2 u_xlat16;
vec4 u_xlat17;
vec4 u_xlat18;
vec4 u_xlat19;
vec3 u_xlat20;
bool u_xlatb20;
vec3 u_xlat21;
bool u_xlatb21;
vec3 u_xlat23;
bool u_xlatb23;
vec3 u_xlat25;
bool u_xlatb25;
vec3 u_xlat26;
int u_xlati26;
uint u_xlatu26;
bool u_xlatb26;
vec2 u_xlat27;
float u_xlat43;
bool u_xlatb43;
float u_xlat45;
vec2 u_xlat46;
int u_xlati46;
vec2 u_xlat48;
vec2 u_xlat49;
vec2 u_xlat52;
float u_xlat61;
float u_xlat62;
float u_xlat63;
float u_xlat64;
float u_xlat65;
float u_xlat66;
float u_xlat67;
vec4 hlslcc_FragCoord = vec4(gl_FragCoord.xyz, 1.0/gl_FragCoord.w);
    u_xlat0 = texture(sampler2D(_BaseMap, sampler_BaseMap), vs_TEXCOORD0.xy, _GlobalMipBias.x);
    u_xlat0 = u_xlat0.wxyz * _BaseColor.wxyz;
    u_xlat1.xy = hlslcc_FragCoord.xy * vec2(_DitheringTextureInvSize);
    u_xlat1.x = texture(sampler2D(_DitheringTexture, sampler_DitheringTexture), u_xlat1.xy, _GlobalMipBias.x).w;
    u_xlatb21 = unity_LODFade.x>=0.0;
    u_xlat1.x = (u_xlatb21) ? abs(u_xlat1.x) : -abs(u_xlat1.x);
    u_xlat1.x = (-u_xlat1.x) + unity_LODFade.x;
    u_xlatb1 = u_xlat1.x<0.0;
    if(((int(u_xlatb1) * int(0xffffffffu)))!=0){discard;}
    u_xlatb1 = unity_OrthoParams.w==0.0;
    u_xlat21.xyz = (-vs_TEXCOORD1.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat2.x = dot(u_xlat21.xyz, u_xlat21.xyz);
    u_xlat2.x = inversesqrt(u_xlat2.x);
    u_xlat21.xyz = u_xlat21.xyz * u_xlat2.xxx;
    u_xlat2.x = unity_MatrixV[0].z;
    u_xlat2.y = unity_MatrixV[1].z;
    u_xlat2.z = unity_MatrixV[2].z;
    u_xlat1.xyz = (bool(u_xlatb1)) ? u_xlat21.xyz : u_xlat2.xyz;
    u_xlat61 = dot(vs_TEXCOORD2.xyz, vs_TEXCOORD2.xyz);
    u_xlat61 = inversesqrt(u_xlat61);
    u_xlat2.xyz = vec3(u_xlat61) * vs_TEXCOORD2.xyz;
    u_xlat61 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat61 = max(u_xlat61, 1.17549435e-37);
    u_xlat61 = inversesqrt(u_xlat61);
    u_xlat3.xyz = vs_TEXCOORD1.xyz + (-_CascadeShadowSplitSpheres0.xyz);
    u_xlat4.xyz = vs_TEXCOORD1.xyz + (-_CascadeShadowSplitSpheres1.xyz);
    u_xlat5.xyz = vs_TEXCOORD1.xyz + (-_CascadeShadowSplitSpheres2.xyz);
    u_xlat6.xyz = vs_TEXCOORD1.xyz + (-_CascadeShadowSplitSpheres3.xyz);
    u_xlat3.x = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat3.y = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat3.z = dot(u_xlat5.xyz, u_xlat5.xyz);
    u_xlat3.w = dot(u_xlat6.xyz, u_xlat6.xyz);
    u_xlatb3 = lessThan(u_xlat3, _CascadeShadowSplitSphereRadii);
    u_xlat4.x = u_xlatb3.x ? float(1.0) : 0.0;
    u_xlat4.y = u_xlatb3.y ? float(1.0) : 0.0;
    u_xlat4.z = u_xlatb3.z ? float(1.0) : 0.0;
    u_xlat4.w = u_xlatb3.w ? float(1.0) : 0.0;
;
    u_xlat3.x = (u_xlatb3.x) ? float(-1.0) : float(-0.0);
    u_xlat3.y = (u_xlatb3.y) ? float(-1.0) : float(-0.0);
    u_xlat3.z = (u_xlatb3.z) ? float(-1.0) : float(-0.0);
    u_xlat3.xyz = u_xlat3.xyz + u_xlat4.yzw;
    u_xlat4.yzw = max(u_xlat3.xyz, vec3(0.0, 0.0, 0.0));
    u_xlat3.x = dot(u_xlat4, vec4(4.0, 3.0, 2.0, 1.0));
    u_xlat3.x = (-u_xlat3.x) + 4.0;
    u_xlatu3 = uint(u_xlat3.x);
    u_xlati3 = int(u_xlatu3) << (2 & int(0x1F));
    u_xlat23.xyz = vs_TEXCOORD1.yyy * _MainLightWorldToShadow[(u_xlati3 + 1) / 4][(u_xlati3 + 1) % 4].xyz;
    u_xlat23.xyz = _MainLightWorldToShadow[u_xlati3 / 4][u_xlati3 % 4].xyz * vs_TEXCOORD1.xxx + u_xlat23.xyz;
    u_xlat23.xyz = _MainLightWorldToShadow[(u_xlati3 + 2) / 4][(u_xlati3 + 2) % 4].xyz * vs_TEXCOORD1.zzz + u_xlat23.xyz;
    u_xlat3.xyz = u_xlat23.xyz + _MainLightWorldToShadow[(u_xlati3 + 3) / 4][(u_xlati3 + 3) % 4].xyz;
    u_xlat63 = vs_TEXCOORD1.y * unity_MatrixV[1].z;
    u_xlat63 = unity_MatrixV[0].z * vs_TEXCOORD1.x + u_xlat63;
    u_xlat63 = unity_MatrixV[2].z * vs_TEXCOORD1.z + u_xlat63;
    u_xlat63 = u_xlat63 + unity_MatrixV[3].z;
    u_xlat63 = (-u_xlat63) + (-_ProjectionParams.y);
    u_xlat63 = max(u_xlat63, 0.0);
    u_xlat63 = u_xlat63 * unity_FogParams.x;
    u_xlat2.w = 1.0;
    u_xlat4.x = dot(unity_SHAr, u_xlat2);
    u_xlat4.y = dot(unity_SHAg, u_xlat2);
    u_xlat4.z = dot(unity_SHAb, u_xlat2);
    u_xlat5 = u_xlat2.yzzx * u_xlat2.xyzz;
    u_xlat6.x = dot(unity_SHBr, u_xlat5);
    u_xlat6.y = dot(unity_SHBg, u_xlat5);
    u_xlat6.z = dot(unity_SHBb, u_xlat5);
    u_xlat62 = u_xlat2.y * u_xlat2.y;
    u_xlat62 = u_xlat2.x * u_xlat2.x + (-u_xlat62);
    u_xlat5.xyz = unity_SHC.xyz * vec3(u_xlat62) + u_xlat6.xyz;
    u_xlat4.xyz = u_xlat4.xyz + u_xlat5.xyz;
    u_xlat4.xyz = max(u_xlat4.xyz, vec3(0.0, 0.0, 0.0));
    u_xlat5.xy = vec2(1.0) / vec2(_ScaledScreenParams.xy);
    u_xlat5.xy = u_xlat5.xy * hlslcc_FragCoord.xy;
    u_xlat62 = u_xlat5.y * _ScaleBiasRt.x + _ScaleBiasRt.y;
    u_xlat5.z = (-u_xlat62) + 1.0;
    u_xlat62 = texture(sampler2D(_ScreenSpaceOcclusionTexture, sampler_ScreenSpaceOcclusionTexture), u_xlat5.xz, _GlobalMipBias.x).x;
    u_xlat64 = u_xlat62 + -1.0;
    u_xlat64 = _AmbientOcclusionParam.w * u_xlat64 + 1.0;
    u_xlat62 = min(u_xlat62, 1.0);
    u_xlatb5 = 0.0<_MainLightShadowParams.y;
    if(u_xlatb5){
        u_xlatb5 = _MainLightShadowParams.y==1.0;
        if(u_xlatb5){
            u_xlat5 = u_xlat3.xyxy + _MainLightShadowOffset0;
            vec3 txVec0 = vec3(u_xlat5.xy,u_xlat3.z);
            u_xlat6.x = textureLod(sampler2DShadow(_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture), txVec0, 0.0);
            vec3 txVec1 = vec3(u_xlat5.zw,u_xlat3.z);
            u_xlat6.y = textureLod(sampler2DShadow(_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture), txVec1, 0.0);
            u_xlat5 = u_xlat3.xyxy + _MainLightShadowOffset1;
            vec3 txVec2 = vec3(u_xlat5.xy,u_xlat3.z);
            u_xlat6.z = textureLod(sampler2DShadow(_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture), txVec2, 0.0);
            vec3 txVec3 = vec3(u_xlat5.zw,u_xlat3.z);
            u_xlat6.w = textureLod(sampler2DShadow(_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture), txVec3, 0.0);
            u_xlat5.x = dot(u_xlat6, vec4(0.25, 0.25, 0.25, 0.25));
        } else {
            u_xlatb25 = _MainLightShadowParams.y==2.0;
            if(u_xlatb25){
                u_xlat25.xy = u_xlat3.xy * _MainLightShadowmapSize.zw + vec2(0.5, 0.5);
                u_xlat25.xy = floor(u_xlat25.xy);
                u_xlat6.xy = u_xlat3.xy * _MainLightShadowmapSize.zw + (-u_xlat25.xy);
                u_xlat7 = u_xlat6.xxyy + vec4(0.5, 1.0, 0.5, 1.0);
                u_xlat8 = u_xlat7.xxzz * u_xlat7.xxzz;
                u_xlat46.xy = u_xlat8.yw * vec2(0.0799999982, 0.0799999982);
                u_xlat7.xz = u_xlat8.xz * vec2(0.5, 0.5) + (-u_xlat6.xy);
                u_xlat8.xy = (-u_xlat6.xy) + vec2(1.0, 1.0);
                u_xlat48.xy = min(u_xlat6.xy, vec2(0.0, 0.0));
                u_xlat48.xy = (-u_xlat48.xy) * u_xlat48.xy + u_xlat8.xy;
                u_xlat6.xy = max(u_xlat6.xy, vec2(0.0, 0.0));
                u_xlat6.xy = (-u_xlat6.xy) * u_xlat6.xy + u_xlat7.yw;
                u_xlat48.xy = u_xlat48.xy + vec2(1.0, 1.0);
                u_xlat6.xy = u_xlat6.xy + vec2(1.0, 1.0);
                u_xlat9.xy = u_xlat7.xz * vec2(0.159999996, 0.159999996);
                u_xlat10.xy = u_xlat8.xy * vec2(0.159999996, 0.159999996);
                u_xlat8.xy = u_xlat48.xy * vec2(0.159999996, 0.159999996);
                u_xlat11.xy = u_xlat6.xy * vec2(0.159999996, 0.159999996);
                u_xlat6.xy = u_xlat7.yw * vec2(0.159999996, 0.159999996);
                u_xlat9.z = u_xlat8.x;
                u_xlat9.w = u_xlat6.x;
                u_xlat10.z = u_xlat11.x;
                u_xlat10.w = u_xlat46.x;
                u_xlat7 = u_xlat9.zwxz + u_xlat10.zwxz;
                u_xlat8.z = u_xlat9.y;
                u_xlat8.w = u_xlat6.y;
                u_xlat11.z = u_xlat10.y;
                u_xlat11.w = u_xlat46.y;
                u_xlat6.xyz = u_xlat8.zyw + u_xlat11.zyw;
                u_xlat8.xyz = u_xlat10.xzw / u_xlat7.zwy;
                u_xlat8.xyz = u_xlat8.xyz + vec3(-2.5, -0.5, 1.5);
                u_xlat9.xyz = u_xlat11.zyw / u_xlat6.xyz;
                u_xlat9.xyz = u_xlat9.xyz + vec3(-2.5, -0.5, 1.5);
                u_xlat8.xyz = u_xlat8.yxz * _MainLightShadowmapSize.xxx;
                u_xlat9.xyz = u_xlat9.xyz * _MainLightShadowmapSize.yyy;
                u_xlat8.w = u_xlat9.x;
                u_xlat10 = u_xlat25.xyxy * _MainLightShadowmapSize.xyxy + u_xlat8.ywxw;
                u_xlat11.xy = u_xlat25.xy * _MainLightShadowmapSize.xy + u_xlat8.zw;
                u_xlat9.w = u_xlat8.y;
                u_xlat8.yw = u_xlat9.yz;
                u_xlat12 = u_xlat25.xyxy * _MainLightShadowmapSize.xyxy + u_xlat8.xyzy;
                u_xlat9 = u_xlat25.xyxy * _MainLightShadowmapSize.xyxy + u_xlat9.wywz;
                u_xlat8 = u_xlat25.xyxy * _MainLightShadowmapSize.xyxy + u_xlat8.xwzw;
                u_xlat13 = u_xlat6.xxxy * u_xlat7.zwyz;
                u_xlat14 = u_xlat6.yyzz * u_xlat7;
                u_xlat25.x = u_xlat6.z * u_xlat7.y;
                vec3 txVec4 = vec3(u_xlat10.xy,u_xlat3.z);
                u_xlat45 = textureLod(sampler2DShadow(_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture), txVec4, 0.0);
                vec3 txVec5 = vec3(u_xlat10.zw,u_xlat3.z);
                u_xlat65 = textureLod(sampler2DShadow(_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture), txVec5, 0.0);
                u_xlat65 = u_xlat65 * u_xlat13.y;
                u_xlat45 = u_xlat13.x * u_xlat45 + u_xlat65;
                vec3 txVec6 = vec3(u_xlat11.xy,u_xlat3.z);
                u_xlat65 = textureLod(sampler2DShadow(_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture), txVec6, 0.0);
                u_xlat45 = u_xlat13.z * u_xlat65 + u_xlat45;
                vec3 txVec7 = vec3(u_xlat9.xy,u_xlat3.z);
                u_xlat65 = textureLod(sampler2DShadow(_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture), txVec7, 0.0);
                u_xlat45 = u_xlat13.w * u_xlat65 + u_xlat45;
                vec3 txVec8 = vec3(u_xlat12.xy,u_xlat3.z);
                u_xlat65 = textureLod(sampler2DShadow(_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture), txVec8, 0.0);
                u_xlat45 = u_xlat14.x * u_xlat65 + u_xlat45;
                vec3 txVec9 = vec3(u_xlat12.zw,u_xlat3.z);
                u_xlat65 = textureLod(sampler2DShadow(_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture), txVec9, 0.0);
                u_xlat45 = u_xlat14.y * u_xlat65 + u_xlat45;
                vec3 txVec10 = vec3(u_xlat9.zw,u_xlat3.z);
                u_xlat65 = textureLod(sampler2DShadow(_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture), txVec10, 0.0);
                u_xlat45 = u_xlat14.z * u_xlat65 + u_xlat45;
                vec3 txVec11 = vec3(u_xlat8.xy,u_xlat3.z);
                u_xlat65 = textureLod(sampler2DShadow(_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture), txVec11, 0.0);
                u_xlat45 = u_xlat14.w * u_xlat65 + u_xlat45;
                vec3 txVec12 = vec3(u_xlat8.zw,u_xlat3.z);
                u_xlat65 = textureLod(sampler2DShadow(_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture), txVec12, 0.0);
                u_xlat5.x = u_xlat25.x * u_xlat65 + u_xlat45;
            } else {
                u_xlat25.xy = u_xlat3.xy * _MainLightShadowmapSize.zw + vec2(0.5, 0.5);
                u_xlat25.xy = floor(u_xlat25.xy);
                u_xlat6.xy = u_xlat3.xy * _MainLightShadowmapSize.zw + (-u_xlat25.xy);
                u_xlat7 = u_xlat6.xxyy + vec4(0.5, 1.0, 0.5, 1.0);
                u_xlat8 = u_xlat7.xxzz * u_xlat7.xxzz;
                u_xlat9.yw = u_xlat8.yw * vec2(0.0408160016, 0.0408160016);
                u_xlat46.xy = u_xlat8.xz * vec2(0.5, 0.5) + (-u_xlat6.xy);
                u_xlat7.xz = (-u_xlat6.xy) + vec2(1.0, 1.0);
                u_xlat8.xy = min(u_xlat6.xy, vec2(0.0, 0.0));
                u_xlat7.xz = (-u_xlat8.xy) * u_xlat8.xy + u_xlat7.xz;
                u_xlat8.xy = max(u_xlat6.xy, vec2(0.0, 0.0));
                u_xlat7.yw = (-u_xlat8.xy) * u_xlat8.xy + u_xlat7.yw;
                u_xlat7 = u_xlat7 + vec4(2.0, 2.0, 2.0, 2.0);
                u_xlat8.z = u_xlat7.y * 0.0816320032;
                u_xlat10.xy = u_xlat46.yx * vec2(0.0816320032, 0.0816320032);
                u_xlat46.xy = u_xlat7.xz * vec2(0.0816320032, 0.0816320032);
                u_xlat10.z = u_xlat7.w * 0.0816320032;
                u_xlat8.x = u_xlat10.y;
                u_xlat8.yw = u_xlat6.xx * vec2(-0.0816320032, 0.0816320032) + vec2(0.163264006, 0.0816320032);
                u_xlat7.xz = u_xlat6.xx * vec2(-0.0816320032, 0.0816320032) + vec2(0.0816320032, 0.163264006);
                u_xlat7.y = u_xlat46.x;
                u_xlat7.w = u_xlat9.y;
                u_xlat8 = u_xlat7 + u_xlat8;
                u_xlat10.yw = u_xlat6.yy * vec2(-0.0816320032, 0.0816320032) + vec2(0.163264006, 0.0816320032);
                u_xlat9.xz = u_xlat6.yy * vec2(-0.0816320032, 0.0816320032) + vec2(0.0816320032, 0.163264006);
                u_xlat9.y = u_xlat46.y;
                u_xlat6 = u_xlat9 + u_xlat10;
                u_xlat7 = u_xlat7 / u_xlat8;
                u_xlat7 = u_xlat7 + vec4(-3.5, -1.5, 0.5, 2.5);
                u_xlat9 = u_xlat9 / u_xlat6;
                u_xlat9 = u_xlat9 + vec4(-3.5, -1.5, 0.5, 2.5);
                u_xlat7 = u_xlat7.wxyz * _MainLightShadowmapSize.xxxx;
                u_xlat9 = u_xlat9.xwyz * _MainLightShadowmapSize.yyyy;
                u_xlat10.xzw = u_xlat7.yzw;
                u_xlat10.y = u_xlat9.x;
                u_xlat11 = u_xlat25.xyxy * _MainLightShadowmapSize.xyxy + u_xlat10.xyzy;
                u_xlat12.xy = u_xlat25.xy * _MainLightShadowmapSize.xy + u_xlat10.wy;
                u_xlat7.y = u_xlat10.y;
                u_xlat10.y = u_xlat9.z;
                u_xlat13 = u_xlat25.xyxy * _MainLightShadowmapSize.xyxy + u_xlat10.xyzy;
                u_xlat52.xy = u_xlat25.xy * _MainLightShadowmapSize.xy + u_xlat10.wy;
                u_xlat7.z = u_xlat10.y;
                u_xlat14 = u_xlat25.xyxy * _MainLightShadowmapSize.xyxy + u_xlat7.xyxz;
                u_xlat10.y = u_xlat9.w;
                u_xlat15 = u_xlat25.xyxy * _MainLightShadowmapSize.xyxy + u_xlat10.xyzy;
                u_xlat27.xy = u_xlat25.xy * _MainLightShadowmapSize.xy + u_xlat10.wy;
                u_xlat7.w = u_xlat10.y;
                u_xlat16.xy = u_xlat25.xy * _MainLightShadowmapSize.xy + u_xlat7.xw;
                u_xlat9.xzw = u_xlat10.xzw;
                u_xlat10 = u_xlat25.xyxy * _MainLightShadowmapSize.xyxy + u_xlat9.xyzy;
                u_xlat49.xy = u_xlat25.xy * _MainLightShadowmapSize.xy + u_xlat9.wy;
                u_xlat9.x = u_xlat7.x;
                u_xlat25.xy = u_xlat25.xy * _MainLightShadowmapSize.xy + u_xlat9.xy;
                u_xlat17 = u_xlat6.xxxx * u_xlat8;
                u_xlat18 = u_xlat6.yyyy * u_xlat8;
                u_xlat19 = u_xlat6.zzzz * u_xlat8;
                u_xlat6 = u_xlat6.wwww * u_xlat8;
                vec3 txVec13 = vec3(u_xlat11.xy,u_xlat3.z);
                u_xlat65 = textureLod(sampler2DShadow(_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture), txVec13, 0.0);
                vec3 txVec14 = vec3(u_xlat11.zw,u_xlat3.z);
                u_xlat7.x = textureLod(sampler2DShadow(_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture), txVec14, 0.0);
                u_xlat7.x = u_xlat7.x * u_xlat17.y;
                u_xlat65 = u_xlat17.x * u_xlat65 + u_xlat7.x;
                vec3 txVec15 = vec3(u_xlat12.xy,u_xlat3.z);
                u_xlat7.x = textureLod(sampler2DShadow(_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture), txVec15, 0.0);
                u_xlat65 = u_xlat17.z * u_xlat7.x + u_xlat65;
                vec3 txVec16 = vec3(u_xlat14.xy,u_xlat3.z);
                u_xlat7.x = textureLod(sampler2DShadow(_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture), txVec16, 0.0);
                u_xlat65 = u_xlat17.w * u_xlat7.x + u_xlat65;
                vec3 txVec17 = vec3(u_xlat13.xy,u_xlat3.z);
                u_xlat7.x = textureLod(sampler2DShadow(_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture), txVec17, 0.0);
                u_xlat65 = u_xlat18.x * u_xlat7.x + u_xlat65;
                vec3 txVec18 = vec3(u_xlat13.zw,u_xlat3.z);
                u_xlat7.x = textureLod(sampler2DShadow(_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture), txVec18, 0.0);
                u_xlat65 = u_xlat18.y * u_xlat7.x + u_xlat65;
                vec3 txVec19 = vec3(u_xlat52.xy,u_xlat3.z);
                u_xlat7.x = textureLod(sampler2DShadow(_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture), txVec19, 0.0);
                u_xlat65 = u_xlat18.z * u_xlat7.x + u_xlat65;
                vec3 txVec20 = vec3(u_xlat14.zw,u_xlat3.z);
                u_xlat7.x = textureLod(sampler2DShadow(_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture), txVec20, 0.0);
                u_xlat65 = u_xlat18.w * u_xlat7.x + u_xlat65;
                vec3 txVec21 = vec3(u_xlat15.xy,u_xlat3.z);
                u_xlat7.x = textureLod(sampler2DShadow(_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture), txVec21, 0.0);
                u_xlat65 = u_xlat19.x * u_xlat7.x + u_xlat65;
                vec3 txVec22 = vec3(u_xlat15.zw,u_xlat3.z);
                u_xlat7.x = textureLod(sampler2DShadow(_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture), txVec22, 0.0);
                u_xlat65 = u_xlat19.y * u_xlat7.x + u_xlat65;
                vec3 txVec23 = vec3(u_xlat27.xy,u_xlat3.z);
                u_xlat7.x = textureLod(sampler2DShadow(_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture), txVec23, 0.0);
                u_xlat65 = u_xlat19.z * u_xlat7.x + u_xlat65;
                vec3 txVec24 = vec3(u_xlat16.xy,u_xlat3.z);
                u_xlat7.x = textureLod(sampler2DShadow(_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture), txVec24, 0.0);
                u_xlat65 = u_xlat19.w * u_xlat7.x + u_xlat65;
                vec3 txVec25 = vec3(u_xlat10.xy,u_xlat3.z);
                u_xlat7.x = textureLod(sampler2DShadow(_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture), txVec25, 0.0);
                u_xlat65 = u_xlat6.x * u_xlat7.x + u_xlat65;
                vec3 txVec26 = vec3(u_xlat10.zw,u_xlat3.z);
                u_xlat6.x = textureLod(sampler2DShadow(_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture), txVec26, 0.0);
                u_xlat65 = u_xlat6.y * u_xlat6.x + u_xlat65;
                vec3 txVec27 = vec3(u_xlat49.xy,u_xlat3.z);
                u_xlat6.x = textureLod(sampler2DShadow(_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture), txVec27, 0.0);
                u_xlat65 = u_xlat6.z * u_xlat6.x + u_xlat65;
                vec3 txVec28 = vec3(u_xlat25.xy,u_xlat3.z);
                u_xlat25.x = textureLod(sampler2DShadow(_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture), txVec28, 0.0);
                u_xlat5.x = u_xlat6.w * u_xlat25.x + u_xlat65;
            }
        }
    } else {
        vec3 txVec29 = vec3(u_xlat3.xy,u_xlat3.z);
        u_xlat5.x = textureLod(sampler2DShadow(_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture), txVec29, 0.0);
    }
    u_xlat3.x = (-_MainLightShadowParams.x) + 1.0;
    u_xlat3.x = u_xlat5.x * _MainLightShadowParams.x + u_xlat3.x;
    u_xlatb23 = 0.0>=u_xlat3.z;
    u_xlatb43 = u_xlat3.z>=1.0;
    u_xlatb23 = u_xlatb43 || u_xlatb23;
    u_xlat3.x = (u_xlatb23) ? 1.0 : u_xlat3.x;
    u_xlat5.xyz = vs_TEXCOORD1.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat23.x = dot(u_xlat5.xyz, u_xlat5.xyz);
    u_xlat23.x = u_xlat23.x * _MainLightShadowParams.z + _MainLightShadowParams.w;
    u_xlat23.x = clamp(u_xlat23.x, 0.0, 1.0);
    u_xlat43 = (-u_xlat3.x) + 1.0;
    u_xlat3.x = u_xlat23.x * u_xlat43 + u_xlat3.x;
    u_xlat5.xyz = vec3(u_xlat64) * _MainLightColor.xyz;
    u_xlat4.xyz = vec3(u_xlat62) * u_xlat4.xyz;
    u_xlat62 = u_xlat3.x * unity_LightData.z;
    u_xlat3.xyz = vec3(u_xlat62) * u_xlat5.xyz;
    u_xlat62 = dot(u_xlat2.xyz, _MainLightPosition.xyz);
    u_xlat62 = clamp(u_xlat62, 0.0, 1.0);
    u_xlat5.xyz = vec3(u_xlat62) * u_xlat3.xyz;
    u_xlat62 = u_xlat0.x * 10.0 + 1.0;
    u_xlat62 = exp2(u_xlat62);
    u_xlat6.xyz = u_xlat1.xyz * vec3(u_xlat61) + _MainLightPosition.xyz;
    u_xlat65 = dot(u_xlat6.xyz, u_xlat6.xyz);
    u_xlat65 = max(u_xlat65, 1.17549435e-37);
    u_xlat65 = inversesqrt(u_xlat65);
    u_xlat6.xyz = vec3(u_xlat65) * u_xlat6.xyz;
    u_xlat65 = dot(u_xlat2.xyz, u_xlat6.xyz);
    u_xlat65 = clamp(u_xlat65, 0.0, 1.0);
    u_xlat65 = log2(u_xlat65);
    u_xlat65 = u_xlat62 * u_xlat65;
    u_xlat65 = exp2(u_xlat65);
    u_xlat6.xyz = vec3(u_xlat65) * _SpecColor.xyz;
    u_xlat3.xyz = u_xlat3.xyz * u_xlat6.xyz;
    u_xlat3.xyz = u_xlat5.xyz * u_xlat0.yzw + u_xlat3.xyz;
    u_xlat5.x = min(_AdditionalLightsCount.x, unity_LightData.y);
    u_xlatu5 =  uint(int(u_xlat5.x));
    u_xlat25.x = float(0.0);
    u_xlat25.y = float(0.0);
    u_xlat25.z = float(0.0);
    for(uint u_xlatu_loop_1 = 0u ; u_xlatu_loop_1<u_xlatu5 ; u_xlatu_loop_1++)
    {
        u_xlatu26 = u_xlatu_loop_1 >> (2u & uint(0x1F));
        u_xlati46 = int(u_xlatu_loop_1 & 3u);
        u_xlat26.x = dot(unity_LightIndices[int(u_xlatu26)], uintBitsToFloat(ImmCB_0[u_xlati46]));
        u_xlati26 = int(u_xlat26.x);
        u_xlat7.xyz = (-vs_TEXCOORD1.xyz) * _AdditionalLightsPosition[u_xlati26].www + _AdditionalLightsPosition[u_xlati26].xyz;
        u_xlat46.x = dot(u_xlat7.xyz, u_xlat7.xyz);
        u_xlat46.x = max(u_xlat46.x, 6.10351562e-05);
        u_xlat66 = inversesqrt(u_xlat46.x);
        u_xlat7.xyz = vec3(u_xlat66) * u_xlat7.xyz;
        u_xlat66 = float(1.0) / float(u_xlat46.x);
        u_xlat46.x = u_xlat46.x * _AdditionalLightsAttenuation[u_xlati26].x;
        u_xlat46.x = (-u_xlat46.x) * u_xlat46.x + 1.0;
        u_xlat46.x = max(u_xlat46.x, 0.0);
        u_xlat46.x = u_xlat46.x * u_xlat46.x;
        u_xlat46.x = u_xlat46.x * u_xlat66;
        u_xlat66 = dot(_AdditionalLightsSpotDir[u_xlati26].xyz, u_xlat7.xyz);
        u_xlat66 = u_xlat66 * _AdditionalLightsAttenuation[u_xlati26].z + _AdditionalLightsAttenuation[u_xlati26].w;
        u_xlat66 = clamp(u_xlat66, 0.0, 1.0);
        u_xlat66 = u_xlat66 * u_xlat66;
        u_xlat46.x = u_xlat66 * u_xlat46.x;
        u_xlat8.xyz = vec3(u_xlat64) * _AdditionalLightsColor[u_xlati26].xyz;
        u_xlat26.xyz = u_xlat46.xxx * u_xlat8.xyz;
        u_xlat67 = dot(u_xlat2.xyz, u_xlat7.xyz);
        u_xlat67 = clamp(u_xlat67, 0.0, 1.0);
        u_xlat8.xyz = u_xlat26.xyz * vec3(u_xlat67);
        u_xlat7.xyz = u_xlat1.xyz * vec3(u_xlat61) + u_xlat7.xyz;
        u_xlat67 = dot(u_xlat7.xyz, u_xlat7.xyz);
        u_xlat67 = max(u_xlat67, 1.17549435e-37);
        u_xlat67 = inversesqrt(u_xlat67);
        u_xlat7.xyz = vec3(u_xlat67) * u_xlat7.xyz;
        u_xlat7.x = dot(u_xlat2.xyz, u_xlat7.xyz);
        u_xlat7.x = clamp(u_xlat7.x, 0.0, 1.0);
        u_xlat7.x = log2(u_xlat7.x);
        u_xlat7.x = u_xlat62 * u_xlat7.x;
        u_xlat7.x = exp2(u_xlat7.x);
        u_xlat7.xyz = u_xlat7.xxx * _SpecColor.xyz;
        u_xlat26.xyz = u_xlat26.xyz * u_xlat7.xyz;
        u_xlat26.xyz = u_xlat8.xyz * u_xlat0.yzw + u_xlat26.xyz;
        u_xlat25.xyz = u_xlat25.xyz + u_xlat26.xyz;
    }
    u_xlat20.xyz = u_xlat4.xyz * u_xlat0.yzw + u_xlat3.xyz;
    u_xlat20.xyz = u_xlat25.xyz + u_xlat20.xyz;
    u_xlat1.x = u_xlat63 * (-u_xlat63);
    u_xlat1.x = exp2(u_xlat1.x);
    u_xlat20.xyz = u_xlat20.xyz + (-unity_FogColor.xyz);
    SV_Target0.xyz = u_xlat1.xxx * u_xlat20.xyz + unity_FogColor.xyz;
    u_xlatb20 = _Surface==1.0;
    SV_Target0.w = (u_xlatb20) ? u_xlat0.x : 1.0;
    return;
}

