struct PGlobals {
  x_GlobalMipBias : vec2<f32>,
  @size(8)
  padding : u32,
  x_Lut_Params : vec4<f32>,
  x_UserLut_Params : vec4<f32>,
  x_Bloom_Params : vec4<f32>,
  x_Bloom_RGBM : f32,
  @size(12)
  padding_1 : u32,
  x_Distortion_Params1 : vec4<f32>,
  x_Distortion_Params2 : vec4<f32>,
  x_Chroma_Params : f32,
  @size(12)
  padding_2 : u32,
  x_Vignette_Params1 : vec4<f32>,
  x_Vignette_Params2 : vec4<f32>,
  x_Grain_Params : vec2<f32>,
  @size(8)
  padding_3 : u32,
  x_Grain_TilingParams : vec4<f32>,
  x_Bloom_Texture_TexelSize : vec4<f32>,
  x_Dithering_Params : vec4<f32>,
}

var<private> vs_TEXCOORD0 : vec2<f32>;

@group(1) @binding(0) var<uniform> x_25 : PGlobals;

@group(0) @binding(0) var x_BlitTexture : texture_2d<f32>;

@group(0) @binding(6) var sampler_LinearClamp : sampler;

@group(0) @binding(1) var x_Bloom_Texture : texture_2d<f32>;

@group(0) @binding(4) var x_UserLut : texture_2d<f32>;

@group(0) @binding(3) var x_InternalLut : texture_2d<f32>;

@group(0) @binding(2) var x_Grain_Texture : texture_2d<f32>;

@group(0) @binding(8) var sampler_LinearRepeat : sampler;

@group(0) @binding(5) var x_BlueNoise_Texture : texture_2d<f32>;

@group(0) @binding(7) var sampler_PointRepeat : sampler;

var<private> SV_Target0 : vec4<f32>;

var<private> gl_FragCoord : vec4<f32>;

fn main_1() {
  var u_xlat0 : vec4<f32>;
  var u_xlat14 : vec2<f32>;
  var u_xlat1 : vec4<f32>;
  var u_xlatb8 : bool;
  var u_xlat15 : vec2<f32>;
  var u_xlat2 : vec4<f32>;
  var u_xlat3 : vec4<f32>;
  var u_xlat22 : f32;
  var u_xlat9 : f32;
  var u_xlat16 : f32;
  var u_xlat23 : f32;
  var u_xlatb3 : vec3<bool>;
  var u_xlatb1 : bool;
  var x_220 : f32;
  var u_xlat4 : vec4<f32>;
  var u_xlat5 : vec4<f32>;
  var u_xlat18 : f32;
  var u_xlat25 : f32;
  var u_xlatb12 : bool;
  var x_439 : f32;
  var x_464 : f32;
  var u_xlat7 : vec3<f32>;
  var u_xlat10 : f32;
  var u_xlatb4 : bool;
  var u_xlatb0 : vec3<bool>;
  var x_652 : f32;
  var u_xlat17 : vec2<f32>;
  var u_xlat6 : vec4<f32>;
  var u_xlatb21 : bool;
  var u_xlat21 : f32;
  var u_xlat8 : vec3<f32>;
  var u_xlatb7 : bool;
  var x_1221 : f32;
  var x_1230 : f32;
  var u_xlatb14 : vec2<bool>;
  var u_xlatb10 : bool;
  var x_1360 : f32;
  var u_xlatb22 : bool;
  var x_1411 : f32;
  var x_1438 : f32;
  var x_1462 : f32;
  var x_1473 : f32;
  var hlslcc_movcTemp : vec4<f32>;
  var x_1895 : f32;
  var x_1907 : f32;
  var x_1919 : f32;
  var x_2088 : f32;
  var x_2100 : f32;
  var x_2112 : f32;
  var x_2364 : f32;
  var x_2376 : f32;
  var x_2388 : f32;
  var x_2445 : f32;
  var x_2457 : f32;
  var x_2469 : f32;
  var u_xlat_precise_vec4 : vec4<f32>;
  var u_xlat_precise_ivec4 : vec4<i32>;
  var u_xlat_precise_bvec4 : vec4<bool>;
  var u_xlat_precise_uvec4 : vec4<u32>;
  let x_13 : vec2<f32> = vs_TEXCOORD0;
  let x_16 : vec2<f32> = (x_13 + vec2<f32>(-0.5f, -0.5f));
  let x_17 : vec4<f32> = u_xlat0;
  u_xlat0 = vec4<f32>(x_16.x, x_16.y, x_17.z, x_17.w);
  let x_21 : vec4<f32> = u_xlat0;
  let x_30 : vec4<f32> = x_25.x_Distortion_Params2;
  u_xlat14 = ((vec2<f32>(x_21.x, x_21.y) * vec2<f32>(x_30.z, x_30.z)) + vec2<f32>(0.5f, 0.5f));
  let x_36 : vec4<f32> = u_xlat0;
  let x_39 : vec4<f32> = x_25.x_Distortion_Params2;
  let x_44 : vec4<f32> = x_25.x_Distortion_Params1;
  let x_47 : vec2<f32> = ((vec2<f32>(x_36.x, x_36.y) * vec2<f32>(x_39.z, x_39.z)) + -(vec2<f32>(x_44.x, x_44.y)));
  let x_48 : vec4<f32> = u_xlat0;
  u_xlat0 = vec4<f32>(x_47.x, x_47.y, x_48.z, x_48.w);
  let x_50 : vec4<f32> = u_xlat0;
  let x_53 : vec4<f32> = x_25.x_Distortion_Params1;
  let x_55 : vec2<f32> = (vec2<f32>(x_50.x, x_50.y) * vec2<f32>(x_53.z, x_53.w));
  let x_56 : vec4<f32> = u_xlat0;
  u_xlat0 = vec4<f32>(x_55.x, x_55.y, x_56.z, x_56.w);
  let x_59 : vec4<f32> = u_xlat0;
  let x_61 : vec4<f32> = u_xlat0;
  u_xlat1.x = dot(vec2<f32>(x_59.x, x_59.y), vec2<f32>(x_61.x, x_61.y));
  let x_69 : f32 = u_xlat1.x;
  u_xlat1.x = sqrt(x_69);
  let x_79 : f32 = x_25.x_Distortion_Params2.w;
  u_xlatb8 = (0.0f < x_79);
  let x_81 : bool = u_xlatb8;
  if (x_81) {
    let x_85 : vec4<f32> = u_xlat1;
    let x_88 : vec4<f32> = x_25.x_Distortion_Params2;
    u_xlat15 = (vec2<f32>(x_85.x, x_85.x) * vec2<f32>(x_88.x, x_88.y));
    let x_93 : f32 = u_xlat15.x;
    u_xlat2.x = sin(x_93);
    let x_98 : f32 = u_xlat15.x;
    u_xlat3.x = cos(x_98);
    let x_102 : f32 = u_xlat2.x;
    let x_104 : f32 = u_xlat3.x;
    u_xlat15.x = (x_102 / x_104);
    let x_111 : f32 = u_xlat15.y;
    u_xlat22 = (1.0f / x_111);
    let x_114 : f32 = u_xlat15.x;
    let x_115 : f32 = u_xlat22;
    u_xlat15.x = ((x_114 * x_115) + -1.0f);
    let x_120 : vec4<f32> = u_xlat0;
    let x_122 : vec2<f32> = u_xlat15;
    let x_125 : vec2<f32> = u_xlat14;
    u_xlat15 = ((vec2<f32>(x_120.x, x_120.y) * vec2<f32>(x_122.x, x_122.x)) + x_125);
  } else {
    let x_129 : f32 = u_xlat1.x;
    u_xlat2.x = (1.0f / x_129);
    let x_133 : f32 = u_xlat2.x;
    let x_135 : f32 = x_25.x_Distortion_Params2.x;
    u_xlat2.x = (x_133 * x_135);
    let x_139 : f32 = u_xlat1.x;
    let x_141 : f32 = x_25.x_Distortion_Params2.y;
    u_xlat1.x = (x_139 * x_141);
    let x_146 : f32 = u_xlat1.x;
    u_xlat9 = min(abs(x_146), 1.0f);
    let x_151 : f32 = u_xlat1.x;
    u_xlat16 = max(abs(x_151), 1.0f);
    let x_154 : f32 = u_xlat16;
    u_xlat16 = (1.0f / x_154);
    let x_156 : f32 = u_xlat16;
    let x_157 : f32 = u_xlat9;
    u_xlat9 = (x_156 * x_157);
    let x_159 : f32 = u_xlat9;
    let x_160 : f32 = u_xlat9;
    u_xlat16 = (x_159 * x_160);
    let x_163 : f32 = u_xlat16;
    u_xlat23 = ((x_163 * 0.0208351f) + -0.085133001f);
    let x_168 : f32 = u_xlat16;
    let x_169 : f32 = u_xlat23;
    u_xlat23 = ((x_168 * x_169) + 0.180141002f);
    let x_173 : f32 = u_xlat16;
    let x_174 : f32 = u_xlat23;
    u_xlat23 = ((x_173 * x_174) + -0.330299497f);
    let x_178 : f32 = u_xlat16;
    let x_179 : f32 = u_xlat23;
    u_xlat16 = ((x_178 * x_179) + 0.999866009f);
    let x_183 : f32 = u_xlat16;
    let x_184 : f32 = u_xlat9;
    u_xlat23 = (x_183 * x_184);
    let x_190 : f32 = u_xlat1.x;
    u_xlatb3.x = (1.0f < abs(x_190));
    let x_194 : f32 = u_xlat23;
    u_xlat23 = ((x_194 * -2.0f) + 1.570796371f);
    let x_200 : bool = u_xlatb3.x;
    let x_201 : f32 = u_xlat23;
    u_xlat23 = select(0.0f, x_201, x_200);
    let x_203 : f32 = u_xlat9;
    let x_204 : f32 = u_xlat16;
    let x_206 : f32 = u_xlat23;
    u_xlat9 = ((x_203 * x_204) + x_206);
    let x_209 : f32 = u_xlat1.x;
    u_xlat1.x = min(x_209, 1.0f);
    let x_214 : f32 = u_xlat1.x;
    let x_216 : f32 = u_xlat1.x;
    u_xlatb1 = (x_214 < -(x_216));
    let x_219 : bool = u_xlatb1;
    if (x_219) {
      let x_223 : f32 = u_xlat9;
      x_220 = -(x_223);
    } else {
      let x_226 : f32 = u_xlat9;
      x_220 = x_226;
    }
    let x_227 : f32 = x_220;
    u_xlat1.x = x_227;
    let x_230 : f32 = u_xlat2.x;
    let x_232 : f32 = u_xlat1.x;
    u_xlat1.x = ((x_230 * x_232) + -1.0f);
    let x_236 : vec4<f32> = u_xlat0;
    let x_238 : vec4<f32> = u_xlat1;
    let x_241 : vec2<f32> = u_xlat14;
    u_xlat15 = ((vec2<f32>(x_236.x, x_236.y) * vec2<f32>(x_238.x, x_238.x)) + x_241);
  }
  let x_243 : vec2<f32> = vs_TEXCOORD0;
  u_xlat0 = ((vec4<f32>(x_243.x, x_243.y, x_243.x, x_243.y) * vec4<f32>(2.0f, 2.0f, 2.0f, 2.0f)) + vec4<f32>(-1.0f, -1.0f, -1.0f, -1.0f));
  let x_250 : vec4<f32> = u_xlat0;
  let x_252 : vec4<f32> = u_xlat0;
  u_xlat1.x = dot(vec2<f32>(x_250.z, x_250.w), vec2<f32>(x_252.z, x_252.w));
  let x_256 : vec4<f32> = u_xlat0;
  let x_257 : vec4<f32> = u_xlat1;
  u_xlat0 = (x_256 * vec4<f32>(x_257.x, x_257.x, x_257.x, x_257.x));
  let x_260 : vec4<f32> = u_xlat0;
  let x_263 : f32 = x_25.x_Chroma_Params;
  u_xlat0 = (x_260 * vec4<f32>(x_263, x_263, x_263, x_263));
  let x_276 : vec2<f32> = u_xlat15;
  let x_279 : f32 = x_25.x_GlobalMipBias.x;
  let x_280 : vec4<f32> = textureSampleBias(x_BlitTexture, sampler_LinearClamp, x_276, x_279);
  u_xlat2.x = x_280.x;
  let x_283 : vec4<f32> = u_xlat0;
  let x_288 : vec2<f32> = vs_TEXCOORD0;
  u_xlat0 = ((x_283 * vec4<f32>(-0.333333343f, -0.333333343f, -0.666666687f, -0.666666687f)) + vec4<f32>(x_288.x, x_288.y, x_288.x, x_288.y));
  let x_291 : vec4<f32> = u_xlat0;
  u_xlat0 = (x_291 + vec4<f32>(-0.5f, -0.5f, -0.5f, -0.5f));
  let x_294 : vec4<f32> = u_xlat0;
  let x_296 : vec4<f32> = x_25.x_Distortion_Params2;
  u_xlat3 = ((x_294 * vec4<f32>(x_296.z, x_296.z, x_296.z, x_296.z)) + vec4<f32>(0.5f, 0.5f, 0.5f, 0.5f));
  let x_301 : vec4<f32> = u_xlat0;
  let x_303 : vec4<f32> = x_25.x_Distortion_Params2;
  let x_307 : vec4<f32> = x_25.x_Distortion_Params1;
  u_xlat0 = ((x_301 * vec4<f32>(x_303.z, x_303.z, x_303.z, x_303.z)) + -(vec4<f32>(x_307.x, x_307.y, x_307.x, x_307.y)));
  let x_311 : vec4<f32> = u_xlat0;
  let x_313 : vec4<f32> = x_25.x_Distortion_Params1;
  u_xlat0 = (x_311 * vec4<f32>(x_313.z, x_313.w, x_313.z, x_313.w));
  let x_316 : vec4<f32> = u_xlat0;
  let x_318 : vec4<f32> = u_xlat0;
  u_xlat1.x = dot(vec2<f32>(x_316.x, x_316.y), vec2<f32>(x_318.x, x_318.y));
  let x_323 : f32 = u_xlat1.x;
  u_xlat1.x = sqrt(x_323);
  let x_326 : bool = u_xlatb8;
  if (x_326) {
    let x_330 : vec4<f32> = u_xlat1;
    let x_333 : vec4<f32> = x_25.x_Distortion_Params2;
    let x_335 : vec2<f32> = (vec2<f32>(x_330.x, x_330.x) * vec2<f32>(x_333.x, x_333.y));
    let x_336 : vec4<f32> = u_xlat4;
    u_xlat4 = vec4<f32>(x_335.x, x_335.y, x_336.z, x_336.w);
    let x_340 : f32 = u_xlat4.x;
    u_xlat5.x = cos(x_340);
    let x_344 : f32 = u_xlat4.x;
    u_xlat4.x = sin(x_344);
    let x_348 : f32 = u_xlat4.x;
    let x_350 : f32 = u_xlat5.x;
    u_xlat23 = (x_348 / x_350);
    let x_353 : f32 = u_xlat4.y;
    u_xlat4.x = (1.0f / x_353);
    let x_356 : f32 = u_xlat23;
    let x_358 : f32 = u_xlat4.x;
    u_xlat23 = ((x_356 * x_358) + -1.0f);
    let x_361 : vec4<f32> = u_xlat0;
    let x_363 : f32 = u_xlat23;
    let x_366 : vec4<f32> = u_xlat3;
    let x_368 : vec2<f32> = ((vec2<f32>(x_361.x, x_361.y) * vec2<f32>(x_363, x_363)) + vec2<f32>(x_366.x, x_366.y));
    let x_369 : vec4<f32> = u_xlat4;
    u_xlat4 = vec4<f32>(x_368.x, x_368.y, x_369.z, x_369.w);
  } else {
    let x_373 : f32 = u_xlat1.x;
    u_xlat23 = (1.0f / x_373);
    let x_375 : f32 = u_xlat23;
    let x_377 : f32 = x_25.x_Distortion_Params2.x;
    u_xlat23 = (x_375 * x_377);
    let x_380 : f32 = u_xlat1.x;
    let x_382 : f32 = x_25.x_Distortion_Params2.y;
    u_xlat1.x = (x_380 * x_382);
    let x_387 : f32 = u_xlat1.x;
    u_xlat18 = min(abs(x_387), 1.0f);
    let x_392 : f32 = u_xlat1.x;
    u_xlat25 = max(abs(x_392), 1.0f);
    let x_395 : f32 = u_xlat25;
    u_xlat25 = (1.0f / x_395);
    let x_397 : f32 = u_xlat25;
    let x_398 : f32 = u_xlat18;
    u_xlat18 = (x_397 * x_398);
    let x_400 : f32 = u_xlat18;
    let x_401 : f32 = u_xlat18;
    u_xlat25 = (x_400 * x_401);
    let x_403 : f32 = u_xlat25;
    u_xlat5.x = ((x_403 * 0.0208351f) + -0.085133001f);
    let x_407 : f32 = u_xlat25;
    let x_409 : f32 = u_xlat5.x;
    u_xlat5.x = ((x_407 * x_409) + 0.180141002f);
    let x_413 : f32 = u_xlat25;
    let x_415 : f32 = u_xlat5.x;
    u_xlat5.x = ((x_413 * x_415) + -0.330299497f);
    let x_419 : f32 = u_xlat25;
    let x_421 : f32 = u_xlat5.x;
    u_xlat25 = ((x_419 * x_421) + 0.999866009f);
    let x_424 : f32 = u_xlat25;
    let x_425 : f32 = u_xlat18;
    u_xlat5.x = (x_424 * x_425);
    let x_430 : f32 = u_xlat1.x;
    u_xlatb12 = (1.0f < abs(x_430));
    let x_434 : f32 = u_xlat5.x;
    u_xlat5.x = ((x_434 * -2.0f) + 1.570796371f);
    let x_438 : bool = u_xlatb12;
    if (x_438) {
      let x_443 : f32 = u_xlat5.x;
      x_439 = x_443;
    } else {
      x_439 = 0.0f;
    }
    let x_445 : f32 = x_439;
    u_xlat5.x = x_445;
    let x_447 : f32 = u_xlat18;
    let x_448 : f32 = u_xlat25;
    let x_451 : f32 = u_xlat5.x;
    u_xlat18 = ((x_447 * x_448) + x_451);
    let x_454 : f32 = u_xlat1.x;
    u_xlat1.x = min(x_454, 1.0f);
    let x_458 : f32 = u_xlat1.x;
    let x_460 : f32 = u_xlat1.x;
    u_xlatb1 = (x_458 < -(x_460));
    let x_463 : bool = u_xlatb1;
    if (x_463) {
      let x_467 : f32 = u_xlat18;
      x_464 = -(x_467);
    } else {
      let x_470 : f32 = u_xlat18;
      x_464 = x_470;
    }
    let x_471 : f32 = x_464;
    u_xlat1.x = x_471;
    let x_473 : f32 = u_xlat23;
    let x_475 : f32 = u_xlat1.x;
    u_xlat1.x = ((x_473 * x_475) + -1.0f);
    let x_479 : vec4<f32> = u_xlat0;
    let x_481 : vec4<f32> = u_xlat1;
    let x_484 : vec4<f32> = u_xlat3;
    let x_486 : vec2<f32> = ((vec2<f32>(x_479.x, x_479.y) * vec2<f32>(x_481.x, x_481.x)) + vec2<f32>(x_484.x, x_484.y));
    let x_487 : vec4<f32> = u_xlat4;
    u_xlat4 = vec4<f32>(x_486.x, x_486.y, x_487.z, x_487.w);
  }
  let x_492 : vec4<f32> = u_xlat4;
  let x_495 : f32 = x_25.x_GlobalMipBias.x;
  let x_496 : vec4<f32> = textureSampleBias(x_BlitTexture, sampler_LinearClamp, vec2<f32>(x_492.x, x_492.y), x_495);
  u_xlat2.y = x_496.y;
  let x_499 : vec4<f32> = u_xlat0;
  let x_501 : vec4<f32> = u_xlat0;
  u_xlat0.x = dot(vec2<f32>(x_499.z, x_499.w), vec2<f32>(x_501.z, x_501.w));
  let x_506 : f32 = u_xlat0.x;
  u_xlat0.x = sqrt(x_506);
  let x_509 : bool = u_xlatb8;
  if (x_509) {
    let x_512 : vec4<f32> = u_xlat0;
    let x_515 : vec4<f32> = x_25.x_Distortion_Params2;
    let x_517 : vec2<f32> = (vec2<f32>(x_512.x, x_512.x) * vec2<f32>(x_515.x, x_515.y));
    let x_518 : vec4<f32> = u_xlat1;
    u_xlat1 = vec4<f32>(x_517.x, x_517.y, x_518.z, x_518.w);
    let x_521 : f32 = u_xlat1.x;
    u_xlat3.x = cos(x_521);
    let x_525 : f32 = u_xlat1.x;
    u_xlat1.x = sin(x_525);
    let x_532 : f32 = u_xlat1.x;
    let x_534 : f32 = u_xlat3.x;
    u_xlat7.x = (x_532 / x_534);
    let x_538 : f32 = u_xlat1.y;
    u_xlat1.x = (1.0f / x_538);
    let x_542 : f32 = u_xlat7.x;
    let x_544 : f32 = u_xlat1.x;
    u_xlat7.x = ((x_542 * x_544) + -1.0f);
    let x_548 : vec4<f32> = u_xlat0;
    let x_550 : vec3<f32> = u_xlat7;
    let x_553 : vec4<f32> = u_xlat3;
    let x_555 : vec2<f32> = ((vec2<f32>(x_548.z, x_548.w) * vec2<f32>(x_550.x, x_550.x)) + vec2<f32>(x_553.z, x_553.w));
    let x_556 : vec4<f32> = u_xlat1;
    u_xlat1 = vec4<f32>(x_555.x, x_555.y, x_556.z, x_556.w);
  } else {
    let x_560 : f32 = u_xlat0.x;
    u_xlat7.x = (1.0f / x_560);
    let x_564 : f32 = u_xlat7.x;
    let x_566 : f32 = x_25.x_Distortion_Params2.x;
    u_xlat7.x = (x_564 * x_566);
    let x_570 : f32 = u_xlat0.x;
    let x_572 : f32 = x_25.x_Distortion_Params2.y;
    u_xlat0.x = (x_570 * x_572);
    let x_576 : f32 = u_xlat0.x;
    u_xlat23 = min(abs(x_576), 1.0f);
    let x_580 : f32 = u_xlat0.x;
    u_xlat3.x = max(abs(x_580), 1.0f);
    let x_585 : f32 = u_xlat3.x;
    u_xlat3.x = (1.0f / x_585);
    let x_588 : f32 = u_xlat23;
    let x_590 : f32 = u_xlat3.x;
    u_xlat23 = (x_588 * x_590);
    let x_592 : f32 = u_xlat23;
    let x_593 : f32 = u_xlat23;
    u_xlat3.x = (x_592 * x_593);
    let x_598 : f32 = u_xlat3.x;
    u_xlat10 = ((x_598 * 0.0208351f) + -0.085133001f);
    let x_602 : f32 = u_xlat3.x;
    let x_603 : f32 = u_xlat10;
    u_xlat10 = ((x_602 * x_603) + 0.180141002f);
    let x_607 : f32 = u_xlat3.x;
    let x_608 : f32 = u_xlat10;
    u_xlat10 = ((x_607 * x_608) + -0.330299497f);
    let x_612 : f32 = u_xlat3.x;
    let x_613 : f32 = u_xlat10;
    u_xlat3.x = ((x_612 * x_613) + 0.999866009f);
    let x_617 : f32 = u_xlat23;
    let x_619 : f32 = u_xlat3.x;
    u_xlat10 = (x_617 * x_619);
    let x_623 : f32 = u_xlat0.x;
    u_xlatb4 = (1.0f < abs(x_623));
    let x_626 : f32 = u_xlat10;
    u_xlat10 = ((x_626 * -2.0f) + 1.570796371f);
    let x_629 : bool = u_xlatb4;
    let x_630 : f32 = u_xlat10;
    u_xlat10 = select(0.0f, x_630, x_629);
    let x_632 : f32 = u_xlat23;
    let x_634 : f32 = u_xlat3.x;
    let x_636 : f32 = u_xlat10;
    u_xlat23 = ((x_632 * x_634) + x_636);
    let x_639 : f32 = u_xlat0.x;
    u_xlat0.x = min(x_639, 1.0f);
    let x_644 : f32 = u_xlat0.x;
    let x_646 : f32 = u_xlat0.x;
    u_xlatb0.x = (x_644 < -(x_646));
    let x_651 : bool = u_xlatb0.x;
    if (x_651) {
      let x_655 : f32 = u_xlat23;
      x_652 = -(x_655);
    } else {
      let x_658 : f32 = u_xlat23;
      x_652 = x_658;
    }
    let x_659 : f32 = x_652;
    u_xlat0.x = x_659;
    let x_662 : f32 = u_xlat7.x;
    let x_664 : f32 = u_xlat0.x;
    u_xlat0.x = ((x_662 * x_664) + -1.0f);
    let x_668 : vec4<f32> = u_xlat0;
    let x_670 : vec4<f32> = u_xlat0;
    let x_673 : vec4<f32> = u_xlat3;
    let x_675 : vec2<f32> = ((vec2<f32>(x_668.z, x_668.w) * vec2<f32>(x_670.x, x_670.x)) + vec2<f32>(x_673.z, x_673.w));
    let x_676 : vec4<f32> = u_xlat1;
    u_xlat1 = vec4<f32>(x_675.x, x_675.y, x_676.z, x_676.w);
  }
  let x_681 : vec4<f32> = u_xlat1;
  let x_684 : f32 = x_25.x_GlobalMipBias.x;
  let x_685 : vec4<f32> = textureSampleBias(x_BlitTexture, sampler_LinearClamp, vec2<f32>(x_681.x, x_681.y), x_684);
  u_xlat2.z = x_685.z;
  let x_689 : vec2<f32> = u_xlat15;
  let x_692 : vec4<f32> = x_25.x_Bloom_Texture_TexelSize;
  let x_695 : vec2<f32> = ((x_689 * vec2<f32>(x_692.z, x_692.w)) + vec2<f32>(0.5f, 0.5f));
  let x_696 : vec4<f32> = u_xlat0;
  u_xlat0 = vec4<f32>(x_695.x, x_695.y, x_696.z, x_696.w);
  let x_698 : vec4<f32> = u_xlat0;
  u_xlat14 = floor(vec2<f32>(x_698.x, x_698.y));
  let x_701 : vec4<f32> = u_xlat0;
  let x_703 : vec2<f32> = fract(vec2<f32>(x_701.x, x_701.y));
  let x_704 : vec4<f32> = u_xlat0;
  u_xlat0 = vec4<f32>(x_703.x, x_703.y, x_704.z, x_704.w);
  let x_706 : vec4<f32> = u_xlat0;
  u_xlat3 = ((-(vec4<f32>(x_706.x, x_706.y, x_706.x, x_706.y)) * vec4<f32>(0.5f, 0.5f, 0.166666672f, 0.166666672f)) + vec4<f32>(0.5f, 0.5f, 0.5f, 0.5f));
  let x_713 : vec4<f32> = u_xlat0;
  let x_715 : vec4<f32> = u_xlat3;
  u_xlat3 = ((vec4<f32>(x_713.x, x_713.y, x_713.x, x_713.y) * x_715) + vec4<f32>(0.5f, 0.5f, -0.5f, -0.5f));
  let x_719 : vec4<f32> = u_xlat0;
  let x_723 : vec2<f32> = ((vec2<f32>(x_719.x, x_719.y) * vec2<f32>(0.5f, 0.5f)) + vec2<f32>(-1.0f, -1.0f));
  let x_724 : vec4<f32> = u_xlat1;
  u_xlat1 = vec4<f32>(x_723.x, x_723.y, x_724.z, x_724.w);
  let x_726 : vec4<f32> = u_xlat0;
  let x_728 : vec4<f32> = u_xlat0;
  let x_730 : vec2<f32> = (vec2<f32>(x_726.x, x_726.y) * vec2<f32>(x_728.x, x_728.y));
  let x_731 : vec4<f32> = u_xlat4;
  u_xlat4 = vec4<f32>(x_730.x, x_730.y, x_731.z, x_731.w);
  let x_733 : vec4<f32> = u_xlat4;
  let x_735 : vec4<f32> = u_xlat1;
  let x_740 : vec2<f32> = ((vec2<f32>(x_733.x, x_733.y) * vec2<f32>(x_735.x, x_735.y)) + vec2<f32>(0.666666687f, 0.666666687f));
  let x_741 : vec4<f32> = u_xlat1;
  u_xlat1 = vec4<f32>(x_740.x, x_740.y, x_741.z, x_741.w);
  let x_743 : vec4<f32> = u_xlat0;
  let x_745 : vec4<f32> = u_xlat3;
  u_xlat3 = ((vec4<f32>(x_743.x, x_743.y, x_743.x, x_743.y) * x_745) + vec4<f32>(0.166666672f, 0.166666672f, 0.166666672f, 0.166666672f));
  let x_749 : vec4<f32> = u_xlat1;
  let x_753 : vec2<f32> = (-(vec2<f32>(x_749.x, x_749.y)) + vec2<f32>(1.0f, 1.0f));
  let x_754 : vec4<f32> = u_xlat0;
  u_xlat0 = vec4<f32>(x_753.x, x_753.y, x_754.z, x_754.w);
  let x_756 : vec4<f32> = u_xlat3;
  let x_759 : vec4<f32> = u_xlat0;
  let x_761 : vec2<f32> = (-(vec2<f32>(x_756.x, x_756.y)) + vec2<f32>(x_759.x, x_759.y));
  let x_762 : vec4<f32> = u_xlat0;
  u_xlat0 = vec4<f32>(x_761.x, x_761.y, x_762.z, x_762.w);
  let x_764 : vec4<f32> = u_xlat3;
  let x_767 : vec4<f32> = u_xlat0;
  let x_769 : vec2<f32> = (-(vec2<f32>(x_764.z, x_764.w)) + vec2<f32>(x_767.x, x_767.y));
  let x_770 : vec4<f32> = u_xlat0;
  u_xlat0 = vec4<f32>(x_769.x, x_769.y, x_770.z, x_770.w);
  let x_773 : vec4<f32> = u_xlat1;
  let x_775 : vec4<f32> = u_xlat3;
  u_xlat17 = (vec2<f32>(x_773.x, x_773.y) + vec2<f32>(x_775.z, x_775.w));
  let x_778 : vec4<f32> = u_xlat0;
  let x_780 : vec4<f32> = u_xlat3;
  let x_782 : vec2<f32> = (vec2<f32>(x_778.x, x_778.y) + vec2<f32>(x_780.x, x_780.y));
  let x_783 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_782.x, x_782.y, x_783.z, x_783.w);
  let x_785 : vec2<f32> = u_xlat17;
  let x_789 : vec2<f32> = (vec2<f32>(1.0f, 1.0f) / vec2<f32>(x_785.x, x_785.y));
  let x_790 : vec4<f32> = u_xlat4;
  u_xlat4 = vec4<f32>(x_789.x, x_789.y, x_790.z, x_790.w);
  let x_792 : vec4<f32> = u_xlat1;
  let x_794 : vec4<f32> = u_xlat4;
  let x_797 : vec2<f32> = ((vec2<f32>(x_792.x, x_792.y) * vec2<f32>(x_794.x, x_794.y)) + vec2<f32>(-1.0f, -1.0f));
  let x_798 : vec4<f32> = u_xlat4;
  u_xlat4 = vec4<f32>(x_798.x, x_798.y, x_797.x, x_797.y);
  let x_800 : vec4<f32> = u_xlat3;
  let x_801 : vec2<f32> = vec2<f32>(x_800.x, x_800.y);
  let x_805 : vec2<f32> = (vec2<f32>(1.0f, 1.0f) / vec2<f32>(x_801.x, x_801.y));
  let x_806 : vec4<f32> = u_xlat1;
  u_xlat1 = vec4<f32>(x_805.x, x_805.y, x_806.z, x_806.w);
  let x_808 : vec4<f32> = u_xlat0;
  let x_810 : vec4<f32> = u_xlat1;
  let x_813 : vec2<f32> = ((vec2<f32>(x_808.x, x_808.y) * vec2<f32>(x_810.x, x_810.y)) + vec2<f32>(1.0f, 1.0f));
  let x_814 : vec4<f32> = u_xlat4;
  u_xlat4 = vec4<f32>(x_813.x, x_813.y, x_814.z, x_814.w);
  let x_816 : vec2<f32> = u_xlat14;
  let x_818 : vec4<f32> = u_xlat4;
  u_xlat5 = (vec4<f32>(x_816.x, x_816.y, x_816.x, x_816.y) + vec4<f32>(x_818.z, x_818.w, x_818.x, x_818.w));
  let x_821 : vec4<f32> = u_xlat5;
  u_xlat5 = (x_821 + vec4<f32>(-0.5f, -0.5f, -0.5f, -0.5f));
  let x_823 : vec4<f32> = u_xlat5;
  let x_825 : vec4<f32> = x_25.x_Bloom_Texture_TexelSize;
  u_xlat5 = (x_823 * vec4<f32>(x_825.x, x_825.y, x_825.x, x_825.y));
  let x_828 : vec4<f32> = u_xlat5;
  u_xlat5 = min(x_828, vec4<f32>(1.0f, 1.0f, 1.0f, 1.0f));
  let x_836 : vec4<f32> = u_xlat5;
  let x_838 : vec4<f32> = textureSampleLevel(x_Bloom_Texture, sampler_LinearClamp, vec2<f32>(x_836.x, x_836.y), 0.0f);
  u_xlat6 = x_838;
  let x_842 : vec4<f32> = u_xlat5;
  let x_844 : vec4<f32> = textureSampleLevel(x_Bloom_Texture, sampler_LinearClamp, vec2<f32>(x_842.z, x_842.w), 0.0f);
  u_xlat5 = x_844;
  let x_845 : vec4<f32> = u_xlat3;
  let x_847 : vec4<f32> = u_xlat5;
  u_xlat5 = (vec4<f32>(x_845.x, x_845.x, x_845.x, x_845.x) * x_847);
  let x_849 : vec2<f32> = u_xlat17;
  let x_851 : vec4<f32> = u_xlat6;
  let x_853 : vec4<f32> = u_xlat5;
  u_xlat5 = ((vec4<f32>(x_849.x, x_849.x, x_849.x, x_849.x) * x_851) + x_853);
  let x_855 : vec2<f32> = u_xlat14;
  let x_857 : vec4<f32> = u_xlat4;
  u_xlat0 = (vec4<f32>(x_855.x, x_855.y, x_855.x, x_855.y) + vec4<f32>(x_857.z, x_857.y, x_857.x, x_857.y));
  let x_860 : vec4<f32> = u_xlat0;
  u_xlat0 = (x_860 + vec4<f32>(-0.5f, -0.5f, -0.5f, -0.5f));
  let x_862 : vec4<f32> = u_xlat0;
  let x_864 : vec4<f32> = x_25.x_Bloom_Texture_TexelSize;
  u_xlat0 = (x_862 * vec4<f32>(x_864.x, x_864.y, x_864.x, x_864.y));
  let x_867 : vec4<f32> = u_xlat0;
  u_xlat0 = min(x_867, vec4<f32>(1.0f, 1.0f, 1.0f, 1.0f));
  let x_872 : vec4<f32> = u_xlat0;
  let x_874 : vec4<f32> = textureSampleLevel(x_Bloom_Texture, sampler_LinearClamp, vec2<f32>(x_872.x, x_872.y), 0.0f);
  u_xlat4 = x_874;
  let x_878 : vec4<f32> = u_xlat0;
  let x_880 : vec4<f32> = textureSampleLevel(x_Bloom_Texture, sampler_LinearClamp, vec2<f32>(x_878.z, x_878.w), 0.0f);
  u_xlat0 = x_880;
  let x_881 : vec4<f32> = u_xlat0;
  let x_882 : vec4<f32> = u_xlat3;
  u_xlat0 = (x_881 * vec4<f32>(x_882.x, x_882.x, x_882.x, x_882.x));
  let x_885 : vec2<f32> = u_xlat17;
  let x_887 : vec4<f32> = u_xlat4;
  let x_889 : vec4<f32> = u_xlat0;
  u_xlat0 = ((vec4<f32>(x_885.x, x_885.x, x_885.x, x_885.x) * x_887) + x_889);
  let x_891 : vec4<f32> = u_xlat0;
  let x_892 : vec4<f32> = u_xlat3;
  u_xlat0 = (x_891 * vec4<f32>(x_892.y, x_892.y, x_892.y, x_892.y));
  let x_895 : vec2<f32> = u_xlat17;
  let x_897 : vec4<f32> = u_xlat5;
  let x_899 : vec4<f32> = u_xlat0;
  u_xlat0 = ((vec4<f32>(x_895.y, x_895.y, x_895.y, x_895.y) * x_897) + x_899);
  let x_903 : f32 = x_25.x_Bloom_RGBM;
  u_xlatb1 = (0.0f < x_903);
  let x_905 : bool = u_xlatb1;
  if (x_905) {
    let x_908 : vec4<f32> = u_xlat0;
    let x_910 : vec4<f32> = u_xlat0;
    let x_912 : vec3<f32> = (vec3<f32>(x_908.w, x_908.w, x_908.w) * vec3<f32>(x_910.x, x_910.y, x_910.z));
    let x_913 : vec4<f32> = u_xlat3;
    u_xlat3 = vec4<f32>(x_912.x, x_912.y, x_912.z, x_913.w);
    let x_915 : vec4<f32> = u_xlat3;
    let x_919 : vec3<f32> = (vec3<f32>(x_915.x, x_915.y, x_915.z) * vec3<f32>(8.0f, 8.0f, 8.0f));
    let x_920 : vec4<f32> = u_xlat0;
    u_xlat0 = vec4<f32>(x_919.x, x_919.y, x_919.z, x_920.w);
  }
  let x_922 : vec4<f32> = u_xlat0;
  let x_926 : vec4<f32> = x_25.x_Bloom_Params;
  let x_928 : vec3<f32> = (vec3<f32>(x_922.x, x_922.y, x_922.z) * vec3<f32>(x_926.x, x_926.x, x_926.x));
  let x_929 : vec4<f32> = u_xlat0;
  u_xlat0 = vec4<f32>(x_928.x, x_928.y, x_928.z, x_929.w);
  let x_931 : vec4<f32> = u_xlat0;
  let x_934 : vec4<f32> = x_25.x_Bloom_Params;
  let x_937 : vec4<f32> = u_xlat2;
  let x_939 : vec3<f32> = ((vec3<f32>(x_931.x, x_931.y, x_931.z) * vec3<f32>(x_934.y, x_934.z, x_934.w)) + vec3<f32>(x_937.x, x_937.y, x_937.z));
  let x_940 : vec4<f32> = u_xlat0;
  u_xlat0 = vec4<f32>(x_939.x, x_939.y, x_939.z, x_940.w);
  let x_945 : f32 = x_25.x_Vignette_Params2.z;
  u_xlatb21 = (0.0f < x_945);
  let x_947 : bool = u_xlatb21;
  if (x_947) {
    let x_950 : vec2<f32> = u_xlat15;
    let x_952 : vec4<f32> = x_25.x_Vignette_Params2;
    let x_955 : vec2<f32> = (x_950 + -(vec2<f32>(x_952.x, x_952.y)));
    let x_956 : vec4<f32> = u_xlat1;
    u_xlat1 = vec4<f32>(x_955.x, x_955.y, x_956.z, x_956.w);
    let x_958 : vec4<f32> = u_xlat1;
    let x_962 : vec4<f32> = x_25.x_Vignette_Params2;
    let x_964 : vec2<f32> = (abs(vec2<f32>(x_958.x, x_958.y)) * vec2<f32>(x_962.z, x_962.z));
    let x_965 : vec4<f32> = u_xlat1;
    u_xlat1 = vec4<f32>(x_965.x, x_964.x, x_964.y, x_965.w);
    let x_968 : f32 = u_xlat1.y;
    let x_971 : f32 = x_25.x_Vignette_Params1.w;
    u_xlat1.x = (x_968 * x_971);
    let x_975 : vec4<f32> = u_xlat1;
    let x_977 : vec4<f32> = u_xlat1;
    u_xlat21 = dot(vec2<f32>(x_975.x, x_975.z), vec2<f32>(x_977.x, x_977.z));
    let x_980 : f32 = u_xlat21;
    u_xlat21 = (-(x_980) + 1.0f);
    let x_983 : f32 = u_xlat21;
    u_xlat21 = max(x_983, 0.0f);
    let x_985 : f32 = u_xlat21;
    u_xlat21 = log2(x_985);
    let x_987 : f32 = u_xlat21;
    let x_989 : f32 = x_25.x_Vignette_Params2.w;
    u_xlat21 = (x_987 * x_989);
    let x_991 : f32 = u_xlat21;
    u_xlat21 = exp2(x_991);
    let x_994 : vec4<f32> = x_25.x_Vignette_Params1;
    let x_998 : vec3<f32> = (-(vec3<f32>(x_994.x, x_994.y, x_994.z)) + vec3<f32>(1.0f, 1.0f, 1.0f));
    let x_999 : vec4<f32> = u_xlat1;
    u_xlat1 = vec4<f32>(x_998.x, x_998.y, x_998.z, x_999.w);
    let x_1001 : f32 = u_xlat21;
    let x_1003 : vec4<f32> = u_xlat1;
    let x_1007 : vec4<f32> = x_25.x_Vignette_Params1;
    let x_1009 : vec3<f32> = ((vec3<f32>(x_1001, x_1001, x_1001) * vec3<f32>(x_1003.x, x_1003.y, x_1003.z)) + vec3<f32>(x_1007.x, x_1007.y, x_1007.z));
    let x_1010 : vec4<f32> = u_xlat1;
    u_xlat1 = vec4<f32>(x_1009.x, x_1009.y, x_1009.z, x_1010.w);
    let x_1012 : vec4<f32> = u_xlat0;
    let x_1014 : vec4<f32> = u_xlat1;
    let x_1016 : vec3<f32> = (vec3<f32>(x_1012.x, x_1012.y, x_1012.z) * vec3<f32>(x_1014.x, x_1014.y, x_1014.z));
    let x_1017 : vec4<f32> = u_xlat0;
    u_xlat0 = vec4<f32>(x_1016.x, x_1016.y, x_1016.z, x_1017.w);
  }
  let x_1019 : vec4<f32> = u_xlat0;
  let x_1023 : vec4<f32> = x_25.x_Lut_Params;
  let x_1025 : vec3<f32> = (vec3<f32>(x_1019.x, x_1019.y, x_1019.z) * vec3<f32>(x_1023.w, x_1023.w, x_1023.w));
  let x_1026 : vec4<f32> = u_xlat0;
  u_xlat0 = vec4<f32>(x_1025.x, x_1025.y, x_1025.z, x_1026.w);
  let x_1033 : vec4<f32> = u_xlat0;
  u_xlat8.x = dot(vec3<f32>(0.439700991f, 0.382977992f, 0.177334994f), vec3<f32>(x_1033.x, x_1033.y, x_1033.z));
  let x_1041 : vec4<f32> = u_xlat0;
  u_xlat8.y = dot(vec3<f32>(0.089792296f, 0.813422978f, 0.096761599f), vec3<f32>(x_1041.x, x_1041.y, x_1041.z));
  let x_1049 : vec4<f32> = u_xlat0;
  u_xlat8.z = dot(vec3<f32>(0.017543999f, 0.111543998f, 0.870703995f), vec3<f32>(x_1049.x, x_1049.y, x_1049.z));
  let x_1054 : f32 = u_xlat8.y;
  let x_1056 : f32 = u_xlat8.x;
  u_xlat0.x = min(x_1054, x_1056);
  let x_1060 : f32 = u_xlat8.z;
  let x_1062 : f32 = u_xlat0.x;
  u_xlat0.x = min(x_1060, x_1062);
  let x_1066 : f32 = u_xlat8.y;
  let x_1068 : f32 = u_xlat8.x;
  u_xlat7.x = max(x_1066, x_1068);
  let x_1072 : f32 = u_xlat8.z;
  let x_1074 : f32 = u_xlat7.x;
  u_xlat0.y = max(x_1072, x_1074);
  let x_1077 : vec4<f32> = u_xlat0;
  let x_1082 : vec3<f32> = max(vec3<f32>(x_1077.x, x_1077.y, x_1077.y), vec3<f32>(0.0001f, 0.0001f, 0.01f));
  let x_1083 : vec4<f32> = u_xlat0;
  u_xlat0 = vec4<f32>(x_1082.x, x_1082.y, x_1082.z, x_1083.w);
  let x_1086 : f32 = u_xlat0.x;
  let x_1089 : f32 = u_xlat0.y;
  u_xlat0.x = (-(x_1086) + x_1089);
  let x_1093 : f32 = u_xlat0.x;
  let x_1095 : f32 = u_xlat0.z;
  u_xlat0.x = (x_1093 / x_1095);
  let x_1098 : vec3<f32> = u_xlat8;
  let x_1101 : vec3<f32> = u_xlat8;
  u_xlat7 = (-(vec3<f32>(x_1098.y, x_1098.x, x_1098.z)) + vec3<f32>(x_1101.z, x_1101.y, x_1101.x));
  let x_1104 : vec3<f32> = u_xlat7;
  let x_1106 : vec3<f32> = u_xlat8;
  let x_1108 : vec2<f32> = (vec2<f32>(x_1104.x, x_1104.y) * vec2<f32>(x_1106.z, x_1106.y));
  let x_1109 : vec3<f32> = u_xlat7;
  u_xlat7 = vec3<f32>(x_1108.x, x_1108.y, x_1109.z);
  let x_1112 : f32 = u_xlat7.y;
  let x_1114 : f32 = u_xlat7.x;
  u_xlat7.x = (x_1112 + x_1114);
  let x_1118 : f32 = u_xlat8.x;
  let x_1120 : f32 = u_xlat7.z;
  let x_1123 : f32 = u_xlat7.x;
  u_xlat7.x = ((x_1118 * x_1120) + x_1123);
  let x_1127 : f32 = u_xlat7.x;
  u_xlat7.x = max(x_1127, 0.0f);
  let x_1131 : f32 = u_xlat7.x;
  u_xlat7.x = sqrt(x_1131);
  let x_1135 : f32 = u_xlat8.y;
  let x_1137 : f32 = u_xlat8.z;
  u_xlat14.x = (x_1135 + x_1137);
  let x_1141 : f32 = u_xlat8.x;
  let x_1143 : f32 = u_xlat14.x;
  u_xlat14.x = (x_1141 + x_1143);
  let x_1147 : f32 = u_xlat7.x;
  let x_1151 : f32 = u_xlat14.x;
  u_xlat7.x = ((x_1147 * 1.75f) + x_1151);
  let x_1155 : f32 = u_xlat0.x;
  u_xlat21 = (x_1155 + -0.400000006f);
  let x_1158 : f32 = u_xlat21;
  u_xlat1.x = (x_1158 * 2.5f);
  let x_1163 : f32 = u_xlat1.x;
  u_xlat1.x = (-(abs(x_1163)) + 1.0f);
  let x_1169 : f32 = u_xlat1.x;
  u_xlat1.x = max(x_1169, 0.0f);
  let x_1172 : f32 = u_xlat21;
  u_xlatb21 = (x_1172 >= 0.0f);
  let x_1174 : bool = u_xlatb21;
  u_xlat21 = select(-1.0f, 1.0f, x_1174);
  let x_1177 : f32 = u_xlat1.x;
  let x_1180 : f32 = u_xlat1.x;
  u_xlat1.x = ((-(x_1177) * x_1180) + 1.0f);
  let x_1184 : f32 = u_xlat21;
  let x_1186 : f32 = u_xlat1.x;
  u_xlat7.z = ((x_1184 * x_1186) + 1.0f);
  let x_1190 : vec3<f32> = u_xlat7;
  u_xlat14 = (vec2<f32>(x_1190.x, x_1190.z) * vec2<f32>(0.333333343f, 0.025f));
  let x_1198 : f32 = u_xlat7.x;
  u_xlatb1 = (0.159999996f >= x_1198);
  let x_1202 : f32 = u_xlat7.x;
  u_xlatb7 = (x_1202 >= 0.479999989f);
  let x_1207 : f32 = u_xlat14.x;
  u_xlat14.x = (0.079999998f / x_1207);
  let x_1211 : f32 = u_xlat14.x;
  u_xlat14.x = (x_1211 + -0.5f);
  let x_1215 : f32 = u_xlat14.x;
  let x_1217 : f32 = u_xlat14.y;
  u_xlat14.x = (x_1215 * x_1217);
  let x_1220 : bool = u_xlatb7;
  if (x_1220) {
    x_1221 = 0.0f;
  } else {
    let x_1226 : f32 = u_xlat14.x;
    x_1221 = x_1226;
  }
  let x_1227 : f32 = x_1221;
  u_xlat7.x = x_1227;
  let x_1229 : bool = u_xlatb1;
  if (x_1229) {
    let x_1234 : f32 = u_xlat14.y;
    x_1230 = x_1234;
  } else {
    let x_1237 : f32 = u_xlat7.x;
    x_1230 = x_1237;
  }
  let x_1238 : f32 = x_1230;
  u_xlat7.x = x_1238;
  let x_1241 : f32 = u_xlat7.x;
  u_xlat7.x = (x_1241 + 1.0f);
  let x_1244 : vec3<f32> = u_xlat7;
  let x_1246 : vec3<f32> = u_xlat8;
  let x_1247 : vec3<f32> = (vec3<f32>(x_1244.x, x_1244.x, x_1244.x) * x_1246);
  let x_1248 : vec4<f32> = u_xlat2;
  u_xlat2 = vec4<f32>(x_1248.x, x_1247.x, x_1247.y, x_1247.z);
  let x_1253 : vec4<f32> = u_xlat2;
  let x_1255 : vec4<f32> = u_xlat2;
  let x_1258 : vec4<bool> = (vec4<f32>(x_1253.z, x_1253.w, x_1253.z, x_1253.w) == vec4<f32>(x_1255.y, x_1255.z, x_1255.y, x_1255.z));
  u_xlatb14 = vec2<bool>(x_1258.x, x_1258.y);
  let x_1261 : bool = u_xlatb14.y;
  let x_1263 : bool = u_xlatb14.x;
  u_xlatb14.x = (x_1261 & x_1263);
  let x_1267 : f32 = u_xlat8.y;
  let x_1269 : f32 = u_xlat7.x;
  let x_1272 : f32 = u_xlat2.w;
  u_xlat21 = ((x_1267 * x_1269) + -(x_1272));
  let x_1275 : f32 = u_xlat21;
  u_xlat21 = (x_1275 * 1.732050776f);
  let x_1279 : f32 = u_xlat2.y;
  let x_1282 : f32 = u_xlat2.z;
  u_xlat1.x = ((x_1279 * 2.0f) + -(x_1282));
  let x_1287 : f32 = u_xlat8.z;
  let x_1290 : f32 = u_xlat7.x;
  let x_1293 : f32 = u_xlat1.x;
  u_xlat1.x = ((-(x_1287) * x_1290) + x_1293);
  let x_1296 : f32 = u_xlat21;
  let x_1299 : f32 = u_xlat1.x;
  u_xlat15.x = min(abs(x_1296), abs(x_1299));
  let x_1303 : f32 = u_xlat21;
  let x_1306 : f32 = u_xlat1.x;
  u_xlat22 = max(abs(x_1303), abs(x_1306));
  let x_1309 : f32 = u_xlat22;
  u_xlat22 = (1.0f / x_1309);
  let x_1311 : f32 = u_xlat22;
  let x_1313 : f32 = u_xlat15.x;
  u_xlat15.x = (x_1311 * x_1313);
  let x_1317 : f32 = u_xlat15.x;
  let x_1319 : f32 = u_xlat15.x;
  u_xlat22 = (x_1317 * x_1319);
  let x_1321 : f32 = u_xlat22;
  u_xlat3.x = ((x_1321 * 0.0208351f) + -0.085133001f);
  let x_1325 : f32 = u_xlat22;
  let x_1327 : f32 = u_xlat3.x;
  u_xlat3.x = ((x_1325 * x_1327) + 0.180141002f);
  let x_1331 : f32 = u_xlat22;
  let x_1333 : f32 = u_xlat3.x;
  u_xlat3.x = ((x_1331 * x_1333) + -0.330299497f);
  let x_1337 : f32 = u_xlat22;
  let x_1339 : f32 = u_xlat3.x;
  u_xlat22 = ((x_1337 * x_1339) + 0.999866009f);
  let x_1342 : f32 = u_xlat22;
  let x_1344 : f32 = u_xlat15.x;
  u_xlat3.x = (x_1342 * x_1344);
  let x_1349 : f32 = u_xlat1.x;
  let x_1351 : f32 = u_xlat21;
  u_xlatb10 = (abs(x_1349) < abs(x_1351));
  let x_1355 : f32 = u_xlat3.x;
  u_xlat3.x = ((x_1355 * -2.0f) + 1.570796371f);
  let x_1359 : bool = u_xlatb10;
  if (x_1359) {
    let x_1364 : f32 = u_xlat3.x;
    x_1360 = x_1364;
  } else {
    x_1360 = 0.0f;
  }
  let x_1366 : f32 = x_1360;
  u_xlat3.x = x_1366;
  let x_1369 : f32 = u_xlat15.x;
  let x_1370 : f32 = u_xlat22;
  let x_1373 : f32 = u_xlat3.x;
  u_xlat15.x = ((x_1369 * x_1370) + x_1373);
  let x_1378 : f32 = u_xlat1.x;
  let x_1380 : f32 = u_xlat1.x;
  u_xlatb22 = (x_1378 < -(x_1380));
  let x_1383 : bool = u_xlatb22;
  u_xlat22 = select(0.0f, -3.141592741f, x_1383);
  let x_1386 : f32 = u_xlat22;
  let x_1388 : f32 = u_xlat15.x;
  u_xlat15.x = (x_1386 + x_1388);
  let x_1391 : f32 = u_xlat21;
  let x_1393 : f32 = u_xlat1.x;
  u_xlat22 = min(x_1391, x_1393);
  let x_1395 : f32 = u_xlat21;
  let x_1397 : f32 = u_xlat1.x;
  u_xlat21 = max(x_1395, x_1397);
  let x_1399 : f32 = u_xlat22;
  let x_1400 : f32 = u_xlat22;
  u_xlatb1 = (x_1399 < -(x_1400));
  let x_1403 : f32 = u_xlat21;
  let x_1404 : f32 = u_xlat21;
  u_xlatb21 = (x_1403 >= -(x_1404));
  let x_1407 : bool = u_xlatb21;
  let x_1408 : bool = u_xlatb1;
  u_xlatb21 = (x_1407 & x_1408);
  let x_1410 : bool = u_xlatb21;
  if (x_1410) {
    let x_1415 : f32 = u_xlat15.x;
    x_1411 = -(x_1415);
  } else {
    let x_1419 : f32 = u_xlat15.x;
    x_1411 = x_1419;
  }
  let x_1420 : f32 = x_1411;
  u_xlat21 = x_1420;
  let x_1421 : f32 = u_xlat21;
  u_xlat21 = (x_1421 * 57.295780182f);
  let x_1425 : bool = u_xlatb14.x;
  let x_1426 : f32 = u_xlat21;
  u_xlat14.x = select(x_1426, 0.0f, x_1425);
  let x_1430 : f32 = u_xlat14.x;
  u_xlatb21 = (x_1430 < 0.0f);
  let x_1433 : f32 = u_xlat14.x;
  u_xlat1.x = (x_1433 + 360.0f);
  let x_1437 : bool = u_xlatb21;
  if (x_1437) {
    let x_1442 : f32 = u_xlat1.x;
    x_1438 = x_1442;
  } else {
    let x_1445 : f32 = u_xlat14.x;
    x_1438 = x_1445;
  }
  let x_1446 : f32 = x_1438;
  u_xlat14.x = x_1446;
  let x_1449 : f32 = u_xlat14.x;
  u_xlatb21 = (x_1449 < -180.0f);
  let x_1454 : f32 = u_xlat14.x;
  u_xlatb1 = (180.0f < x_1454);
  let x_1456 : vec2<f32> = u_xlat14;
  u_xlat15 = (vec2<f32>(x_1456.x, x_1456.x) + vec2<f32>(360.0f, -360.0f));
  let x_1461 : bool = u_xlatb1;
  if (x_1461) {
    let x_1466 : f32 = u_xlat15.y;
    x_1462 = x_1466;
  } else {
    let x_1469 : f32 = u_xlat14.x;
    x_1462 = x_1469;
  }
  let x_1470 : f32 = x_1462;
  u_xlat14.x = x_1470;
  let x_1472 : bool = u_xlatb21;
  if (x_1472) {
    let x_1477 : f32 = u_xlat15.x;
    x_1473 = x_1477;
  } else {
    let x_1480 : f32 = u_xlat14.x;
    x_1473 = x_1480;
  }
  let x_1481 : f32 = x_1473;
  u_xlat14.x = x_1481;
  let x_1484 : f32 = u_xlat14.x;
  u_xlat14.x = (x_1484 * 0.014814815f);
  let x_1489 : f32 = u_xlat14.x;
  u_xlat14.x = (-(abs(x_1489)) + 1.0f);
  let x_1495 : f32 = u_xlat14.x;
  u_xlat14.x = max(x_1495, 0.0f);
  let x_1499 : f32 = u_xlat14.x;
  u_xlat21 = ((x_1499 * -2.0f) + 3.0f);
  let x_1504 : f32 = u_xlat14.x;
  let x_1506 : f32 = u_xlat14.x;
  u_xlat14.x = (x_1504 * x_1506);
  let x_1510 : f32 = u_xlat14.x;
  let x_1511 : f32 = u_xlat21;
  u_xlat14.x = (x_1510 * x_1511);
  let x_1515 : f32 = u_xlat14.x;
  let x_1517 : f32 = u_xlat14.x;
  u_xlat14.x = (x_1515 * x_1517);
  let x_1521 : f32 = u_xlat0.x;
  let x_1523 : f32 = u_xlat14.x;
  u_xlat0.x = (x_1521 * x_1523);
  let x_1527 : f32 = u_xlat8.x;
  let x_1530 : f32 = u_xlat7.x;
  u_xlat7.x = ((-(x_1527) * x_1530) + 0.029999999f);
  let x_1536 : f32 = u_xlat7.x;
  let x_1538 : f32 = u_xlat0.x;
  u_xlat0.x = (x_1536 * x_1538);
  let x_1542 : f32 = u_xlat0.x;
  let x_1546 : f32 = u_xlat2.y;
  u_xlat2.x = ((x_1542 * 0.180000007f) + x_1546);
  let x_1553 : vec4<f32> = u_xlat2;
  u_xlat0.x = dot(vec3<f32>(1.451439261f, -0.236510754f, -0.214928567f), vec3<f32>(x_1553.x, x_1553.z, x_1553.w));
  let x_1561 : vec4<f32> = u_xlat2;
  u_xlat0.y = dot(vec3<f32>(-0.076553777f, 1.176229715f, -0.099675924f), vec3<f32>(x_1561.x, x_1561.z, x_1561.w));
  let x_1569 : vec4<f32> = u_xlat2;
  u_xlat0.z = dot(vec3<f32>(0.008316148f, -0.00603244966f, 0.997716308f), vec3<f32>(x_1569.x, x_1569.z, x_1569.w));
  let x_1573 : vec4<f32> = u_xlat0;
  let x_1576 : vec3<f32> = max(vec3<f32>(x_1573.x, x_1573.y, x_1573.z), vec3<f32>(0.0f, 0.0f, 0.0f));
  let x_1577 : vec4<f32> = u_xlat0;
  u_xlat0 = vec4<f32>(x_1576.x, x_1576.y, x_1576.z, x_1577.w);
  let x_1579 : vec4<f32> = u_xlat0;
  u_xlat21 = dot(vec3<f32>(x_1579.x, x_1579.y, x_1579.z), vec3<f32>(0.272228986f, 0.674081981f, 0.053689498f));
  let x_1586 : f32 = u_xlat21;
  let x_1589 : vec4<f32> = u_xlat0;
  let x_1591 : vec3<f32> = (-(vec3<f32>(x_1586, x_1586, x_1586)) + vec3<f32>(x_1589.x, x_1589.y, x_1589.z));
  let x_1592 : vec4<f32> = u_xlat0;
  u_xlat0 = vec4<f32>(x_1591.x, x_1591.y, x_1591.z, x_1592.w);
  let x_1594 : vec4<f32> = u_xlat0;
  let x_1599 : f32 = u_xlat21;
  let x_1601 : vec3<f32> = ((vec3<f32>(x_1594.x, x_1594.y, x_1594.z) * vec3<f32>(0.959999979f, 0.959999979f, 0.959999979f)) + vec3<f32>(x_1599, x_1599, x_1599));
  let x_1602 : vec4<f32> = u_xlat0;
  u_xlat0 = vec4<f32>(x_1601.x, x_1601.y, x_1601.z, x_1602.w);
  let x_1604 : vec4<f32> = u_xlat0;
  let x_1608 : vec3<f32> = (vec3<f32>(x_1604.x, x_1604.y, x_1604.z) + vec3<f32>(0.024578599f, 0.024578599f, 0.024578599f));
  let x_1609 : vec4<f32> = u_xlat1;
  u_xlat1 = vec4<f32>(x_1608.x, x_1608.y, x_1608.z, x_1609.w);
  let x_1611 : vec4<f32> = u_xlat0;
  let x_1613 : vec4<f32> = u_xlat1;
  let x_1618 : vec3<f32> = ((vec3<f32>(x_1611.x, x_1611.y, x_1611.z) * vec3<f32>(x_1613.x, x_1613.y, x_1613.z)) + vec3<f32>(-0.000090537f, -0.000090537f, -0.000090537f));
  let x_1619 : vec4<f32> = u_xlat1;
  u_xlat1 = vec4<f32>(x_1618.x, x_1618.y, x_1618.z, x_1619.w);
  let x_1621 : vec4<f32> = u_xlat0;
  let x_1628 : vec3<f32> = ((vec3<f32>(x_1621.x, x_1621.y, x_1621.z) * vec3<f32>(0.983729005f, 0.983729005f, 0.983729005f)) + vec3<f32>(0.432951003f, 0.432951003f, 0.432951003f));
  let x_1629 : vec4<f32> = u_xlat2;
  u_xlat2 = vec4<f32>(x_1628.x, x_1628.y, x_1628.z, x_1629.w);
  let x_1631 : vec4<f32> = u_xlat0;
  let x_1633 : vec4<f32> = u_xlat2;
  let x_1638 : vec3<f32> = ((vec3<f32>(x_1631.x, x_1631.y, x_1631.z) * vec3<f32>(x_1633.x, x_1633.y, x_1633.z)) + vec3<f32>(0.238080993f, 0.238080993f, 0.238080993f));
  let x_1639 : vec4<f32> = u_xlat0;
  u_xlat0 = vec4<f32>(x_1638.x, x_1638.y, x_1638.z, x_1639.w);
  let x_1641 : vec4<f32> = u_xlat1;
  let x_1643 : vec4<f32> = u_xlat0;
  let x_1645 : vec3<f32> = (vec3<f32>(x_1641.x, x_1641.y, x_1641.z) / vec3<f32>(x_1643.x, x_1643.y, x_1643.z));
  let x_1646 : vec4<f32> = u_xlat0;
  u_xlat0 = vec4<f32>(x_1645.x, x_1645.y, x_1645.z, x_1646.w);
  let x_1652 : vec4<f32> = u_xlat0;
  u_xlat1.x = dot(vec3<f32>(0.662454188f, 0.134004205f, 0.156187683f), vec3<f32>(x_1652.x, x_1652.y, x_1652.z));
  let x_1660 : vec4<f32> = u_xlat0;
  u_xlat1.y = dot(vec3<f32>(0.272228718f, 0.674081743f, 0.053689517f), vec3<f32>(x_1660.x, x_1660.y, x_1660.z));
  let x_1668 : vec4<f32> = u_xlat0;
  u_xlat1.z = dot(vec3<f32>(-0.00557464967f, 0.0040607336f, 1.010339141f), vec3<f32>(x_1668.x, x_1668.y, x_1668.z));
  let x_1672 : vec4<f32> = u_xlat1;
  u_xlat0.x = dot(vec3<f32>(x_1672.x, x_1672.y, x_1672.z), vec3<f32>(1.0f, 1.0f, 1.0f));
  let x_1677 : f32 = u_xlat0.x;
  u_xlat0.x = max(x_1677, 0.0001f);
  let x_1680 : vec4<f32> = u_xlat1;
  let x_1682 : vec4<f32> = u_xlat0;
  let x_1684 : vec2<f32> = (vec2<f32>(x_1680.x, x_1680.y) / vec2<f32>(x_1682.x, x_1682.x));
  let x_1685 : vec4<f32> = u_xlat0;
  u_xlat0 = vec4<f32>(x_1684.x, x_1684.y, x_1685.z, x_1685.w);
  let x_1688 : f32 = u_xlat1.y;
  u_xlat21 = max(x_1688, 0.0f);
  let x_1690 : f32 = u_xlat21;
  u_xlat21 = min(x_1690, 65504.0f);
  let x_1693 : f32 = u_xlat21;
  u_xlat21 = log2(x_1693);
  let x_1695 : f32 = u_xlat21;
  u_xlat21 = (x_1695 * 0.981100023f);
  let x_1698 : f32 = u_xlat21;
  u_xlat1.y = exp2(x_1698);
  let x_1702 : f32 = u_xlat0.y;
  u_xlat21 = max(x_1702, 0.0001f);
  let x_1705 : f32 = u_xlat1.y;
  let x_1706 : f32 = u_xlat21;
  u_xlat21 = (x_1705 / x_1706);
  let x_1709 : f32 = u_xlat0.x;
  u_xlat22 = (-(x_1709) + 1.0f);
  let x_1713 : f32 = u_xlat0.y;
  let x_1715 : f32 = u_xlat22;
  u_xlat0.z = (-(x_1713) + x_1715);
  let x_1718 : f32 = u_xlat21;
  let x_1720 : vec4<f32> = u_xlat0;
  let x_1722 : vec2<f32> = (vec2<f32>(x_1718, x_1718) * vec2<f32>(x_1720.x, x_1720.z));
  let x_1723 : vec4<f32> = u_xlat1;
  u_xlat1 = vec4<f32>(x_1722.x, x_1723.y, x_1722.y, x_1723.w);
  let x_1729 : vec4<f32> = u_xlat1;
  u_xlat0.x = dot(vec3<f32>(1.641023397f, -0.324803293f, -0.236424699f), vec3<f32>(x_1729.x, x_1729.y, x_1729.z));
  let x_1737 : vec4<f32> = u_xlat1;
  u_xlat0.y = dot(vec3<f32>(-0.663662851f, 1.61533165f, 0.016756348f), vec3<f32>(x_1737.x, x_1737.y, x_1737.z));
  let x_1745 : vec4<f32> = u_xlat1;
  u_xlat0.z = dot(vec3<f32>(0.011721894f, -0.008284442f, 0.988394856f), vec3<f32>(x_1745.x, x_1745.y, x_1745.z));
  let x_1749 : vec4<f32> = u_xlat0;
  u_xlat21 = dot(vec3<f32>(x_1749.x, x_1749.y, x_1749.z), vec3<f32>(0.272228986f, 0.674081981f, 0.053689498f));
  let x_1752 : f32 = u_xlat21;
  let x_1755 : vec4<f32> = u_xlat0;
  let x_1757 : vec3<f32> = (-(vec3<f32>(x_1752, x_1752, x_1752)) + vec3<f32>(x_1755.x, x_1755.y, x_1755.z));
  let x_1758 : vec4<f32> = u_xlat0;
  u_xlat0 = vec4<f32>(x_1757.x, x_1757.y, x_1757.z, x_1758.w);
  let x_1760 : vec4<f32> = u_xlat0;
  let x_1765 : f32 = u_xlat21;
  let x_1767 : vec3<f32> = ((vec3<f32>(x_1760.x, x_1760.y, x_1760.z) * vec3<f32>(0.930000007f, 0.930000007f, 0.930000007f)) + vec3<f32>(x_1765, x_1765, x_1765));
  let x_1768 : vec4<f32> = u_xlat0;
  u_xlat0 = vec4<f32>(x_1767.x, x_1767.y, x_1767.z, x_1768.w);
  let x_1770 : vec4<f32> = u_xlat0;
  u_xlat1.x = dot(vec3<f32>(0.662454188f, 0.134004205f, 0.156187683f), vec3<f32>(x_1770.x, x_1770.y, x_1770.z));
  let x_1774 : vec4<f32> = u_xlat0;
  u_xlat1.y = dot(vec3<f32>(0.272228718f, 0.674081743f, 0.053689517f), vec3<f32>(x_1774.x, x_1774.y, x_1774.z));
  let x_1778 : vec4<f32> = u_xlat0;
  u_xlat1.z = dot(vec3<f32>(-0.00557464967f, 0.0040607336f, 1.010339141f), vec3<f32>(x_1778.x, x_1778.y, x_1778.z));
  let x_1786 : vec4<f32> = u_xlat1;
  u_xlat0.x = dot(vec3<f32>(0.987223983f, -0.00611327f, 0.015953301f), vec3<f32>(x_1786.x, x_1786.y, x_1786.z));
  let x_1794 : vec4<f32> = u_xlat1;
  u_xlat0.y = dot(vec3<f32>(-0.00759836f, 1.001860023f, 0.0053302f), vec3<f32>(x_1794.x, x_1794.y, x_1794.z));
  let x_1802 : vec4<f32> = u_xlat1;
  u_xlat0.z = dot(vec3<f32>(0.00307257f, -0.00509595f, 1.081680059f), vec3<f32>(x_1802.x, x_1802.y, x_1802.z));
  let x_1810 : vec4<f32> = u_xlat0;
  u_xlat1.x = dot(vec3<f32>(3.240969896f, -1.537383199f, -0.498610765f), vec3<f32>(x_1810.x, x_1810.y, x_1810.z));
  let x_1815 : f32 = u_xlat1.x;
  u_xlat1.x = clamp(x_1815, 0.0f, 1.0f);
  let x_1822 : vec4<f32> = u_xlat0;
  u_xlat1.y = dot(vec3<f32>(-0.969243646f, 1.875967503f, 0.041555058f), vec3<f32>(x_1822.x, x_1822.y, x_1822.z));
  let x_1827 : f32 = u_xlat1.y;
  u_xlat1.y = clamp(x_1827, 0.0f, 1.0f);
  let x_1834 : vec4<f32> = u_xlat0;
  u_xlat1.z = dot(vec3<f32>(0.05563008f, -0.203976959f, 1.05697155f), vec3<f32>(x_1834.x, x_1834.y, x_1834.z));
  let x_1839 : f32 = u_xlat1.z;
  u_xlat1.z = clamp(x_1839, 0.0f, 1.0f);
  let x_1844 : f32 = x_25.x_UserLut_Params.w;
  u_xlatb0.x = (0.0f < x_1844);
  let x_1848 : bool = u_xlatb0.x;
  if (x_1848) {
    let x_1851 : vec4<f32> = u_xlat1;
    let x_1855 : vec3<f32> = (vec3<f32>(x_1851.x, x_1851.y, x_1851.z) * vec3<f32>(12.920000076f, 12.920000076f, 12.920000076f));
    let x_1856 : vec4<f32> = u_xlat0;
    u_xlat0 = vec4<f32>(x_1855.x, x_1855.y, x_1855.z, x_1856.w);
    let x_1858 : vec4<f32> = u_xlat1;
    let x_1860 : vec3<f32> = log2(vec3<f32>(x_1858.x, x_1858.y, x_1858.z));
    let x_1861 : vec4<f32> = u_xlat2;
    u_xlat2 = vec4<f32>(x_1860.x, x_1860.y, x_1860.z, x_1861.w);
    let x_1863 : vec4<f32> = u_xlat2;
    let x_1867 : vec3<f32> = (vec3<f32>(x_1863.x, x_1863.y, x_1863.z) * vec3<f32>(0.416666657f, 0.416666657f, 0.416666657f));
    let x_1868 : vec4<f32> = u_xlat2;
    u_xlat2 = vec4<f32>(x_1867.x, x_1867.y, x_1867.z, x_1868.w);
    let x_1870 : vec4<f32> = u_xlat2;
    let x_1872 : vec3<f32> = exp2(vec3<f32>(x_1870.x, x_1870.y, x_1870.z));
    let x_1873 : vec4<f32> = u_xlat2;
    u_xlat2 = vec4<f32>(x_1872.x, x_1872.y, x_1872.z, x_1873.w);
    let x_1875 : vec4<f32> = u_xlat2;
    let x_1882 : vec3<f32> = ((vec3<f32>(x_1875.x, x_1875.y, x_1875.z) * vec3<f32>(1.054999948f, 1.054999948f, 1.054999948f)) + vec3<f32>(-0.055f, -0.055f, -0.055f));
    let x_1883 : vec4<f32> = u_xlat2;
    u_xlat2 = vec4<f32>(x_1882.x, x_1882.y, x_1882.z, x_1883.w);
    let x_1887 : vec4<f32> = u_xlat1;
    let x_1889 : vec4<bool> = (vec4<f32>(0.0031308f, 0.0031308f, 0.0031308f, 0.0f) >= vec4<f32>(x_1887.x, x_1887.y, x_1887.z, x_1887.x));
    u_xlatb3 = vec3<bool>(x_1889.x, x_1889.y, x_1889.z);
    let x_1892 : vec4<f32> = u_xlat0;
    hlslcc_movcTemp = x_1892;
    let x_1894 : bool = u_xlatb3.x;
    if (x_1894) {
      let x_1899 : f32 = u_xlat0.x;
      x_1895 = x_1899;
    } else {
      let x_1902 : f32 = u_xlat2.x;
      x_1895 = x_1902;
    }
    let x_1903 : f32 = x_1895;
    hlslcc_movcTemp.x = x_1903;
    let x_1906 : bool = u_xlatb3.y;
    if (x_1906) {
      let x_1911 : f32 = u_xlat0.y;
      x_1907 = x_1911;
    } else {
      let x_1914 : f32 = u_xlat2.y;
      x_1907 = x_1914;
    }
    let x_1915 : f32 = x_1907;
    hlslcc_movcTemp.y = x_1915;
    let x_1918 : bool = u_xlatb3.z;
    if (x_1918) {
      let x_1923 : f32 = u_xlat0.z;
      x_1919 = x_1923;
    } else {
      let x_1926 : f32 = u_xlat2.z;
      x_1919 = x_1926;
    }
    let x_1927 : f32 = x_1919;
    hlslcc_movcTemp.z = x_1927;
    let x_1929 : vec4<f32> = hlslcc_movcTemp;
    u_xlat0 = x_1929;
    let x_1930 : vec4<f32> = u_xlat0;
    let x_1933 : vec4<f32> = x_25.x_UserLut_Params;
    let x_1935 : vec3<f32> = (vec3<f32>(x_1930.z, x_1930.x, x_1930.y) * vec3<f32>(x_1933.z, x_1933.z, x_1933.z));
    let x_1936 : vec4<f32> = u_xlat2;
    u_xlat2 = vec4<f32>(x_1935.x, x_1935.y, x_1935.z, x_1936.w);
    let x_1939 : f32 = u_xlat2.x;
    u_xlat21 = floor(x_1939);
    let x_1942 : vec4<f32> = x_25.x_UserLut_Params;
    let x_1944 : vec2<f32> = (vec2<f32>(x_1942.x, x_1942.y) * vec2<f32>(0.5f, 0.5f));
    let x_1945 : vec4<f32> = u_xlat2;
    u_xlat2 = vec4<f32>(x_1944.x, x_1945.y, x_1945.z, x_1944.y);
    let x_1947 : vec4<f32> = u_xlat2;
    let x_1950 : vec4<f32> = x_25.x_UserLut_Params;
    let x_1953 : vec4<f32> = u_xlat2;
    let x_1955 : vec2<f32> = ((vec2<f32>(x_1947.y, x_1947.z) * vec2<f32>(x_1950.x, x_1950.y)) + vec2<f32>(x_1953.x, x_1953.w));
    let x_1956 : vec4<f32> = u_xlat2;
    u_xlat2 = vec4<f32>(x_1956.x, x_1955.x, x_1955.y, x_1956.w);
    let x_1958 : f32 = u_xlat21;
    let x_1960 : f32 = x_25.x_UserLut_Params.y;
    let x_1963 : f32 = u_xlat2.y;
    u_xlat2.x = ((x_1958 * x_1960) + x_1963);
    let x_1970 : vec4<f32> = u_xlat2;
    let x_1972 : vec4<f32> = textureSampleLevel(x_UserLut, sampler_LinearClamp, vec2<f32>(x_1970.x, x_1970.z), 0.0f);
    let x_1973 : vec3<f32> = vec3<f32>(x_1972.x, x_1972.y, x_1972.z);
    let x_1974 : vec4<f32> = u_xlat3;
    u_xlat3 = vec4<f32>(x_1973.x, x_1973.y, x_1973.z, x_1974.w);
    let x_1977 : f32 = x_25.x_UserLut_Params.y;
    u_xlat4.x = x_1977;
    u_xlat4.y = 0.0f;
    let x_1980 : vec4<f32> = u_xlat2;
    let x_1982 : vec4<f32> = u_xlat4;
    let x_1984 : vec2<f32> = (vec2<f32>(x_1980.x, x_1980.z) + vec2<f32>(x_1982.x, x_1982.y));
    let x_1985 : vec4<f32> = u_xlat2;
    u_xlat2 = vec4<f32>(x_1984.x, x_1984.y, x_1985.z, x_1985.w);
    let x_1990 : vec4<f32> = u_xlat2;
    let x_1992 : vec4<f32> = textureSampleLevel(x_UserLut, sampler_LinearClamp, vec2<f32>(x_1990.x, x_1990.y), 0.0f);
    let x_1993 : vec3<f32> = vec3<f32>(x_1992.x, x_1992.y, x_1992.z);
    let x_1994 : vec4<f32> = u_xlat2;
    u_xlat2 = vec4<f32>(x_1993.x, x_1993.y, x_1993.z, x_1994.w);
    let x_1997 : f32 = u_xlat0.z;
    let x_1999 : f32 = x_25.x_UserLut_Params.z;
    let x_2001 : f32 = u_xlat21;
    u_xlat21 = ((x_1997 * x_1999) + -(x_2001));
    let x_2004 : vec4<f32> = u_xlat3;
    let x_2007 : vec4<f32> = u_xlat2;
    let x_2009 : vec3<f32> = (-(vec3<f32>(x_2004.x, x_2004.y, x_2004.z)) + vec3<f32>(x_2007.x, x_2007.y, x_2007.z));
    let x_2010 : vec4<f32> = u_xlat2;
    u_xlat2 = vec4<f32>(x_2009.x, x_2009.y, x_2009.z, x_2010.w);
    let x_2012 : f32 = u_xlat21;
    let x_2014 : vec4<f32> = u_xlat2;
    let x_2017 : vec4<f32> = u_xlat3;
    let x_2019 : vec3<f32> = ((vec3<f32>(x_2012, x_2012, x_2012) * vec3<f32>(x_2014.x, x_2014.y, x_2014.z)) + vec3<f32>(x_2017.x, x_2017.y, x_2017.z));
    let x_2020 : vec4<f32> = u_xlat2;
    u_xlat2 = vec4<f32>(x_2019.x, x_2019.y, x_2019.z, x_2020.w);
    let x_2022 : vec4<f32> = u_xlat0;
    let x_2025 : vec4<f32> = u_xlat2;
    let x_2027 : vec3<f32> = (-(vec3<f32>(x_2022.x, x_2022.y, x_2022.z)) + vec3<f32>(x_2025.x, x_2025.y, x_2025.z));
    let x_2028 : vec4<f32> = u_xlat2;
    u_xlat2 = vec4<f32>(x_2027.x, x_2027.y, x_2027.z, x_2028.w);
    let x_2031 : vec4<f32> = x_25.x_UserLut_Params;
    let x_2033 : vec4<f32> = u_xlat2;
    let x_2036 : vec4<f32> = u_xlat0;
    let x_2038 : vec3<f32> = ((vec3<f32>(x_2031.w, x_2031.w, x_2031.w) * vec3<f32>(x_2033.x, x_2033.y, x_2033.z)) + vec3<f32>(x_2036.x, x_2036.y, x_2036.z));
    let x_2039 : vec4<f32> = u_xlat0;
    u_xlat0 = vec4<f32>(x_2038.x, x_2038.y, x_2038.z, x_2039.w);
    let x_2041 : vec4<f32> = u_xlat0;
    let x_2045 : vec3<f32> = (vec3<f32>(x_2041.x, x_2041.y, x_2041.z) * vec3<f32>(0.077399381f, 0.077399381f, 0.077399381f));
    let x_2046 : vec4<f32> = u_xlat2;
    u_xlat2 = vec4<f32>(x_2045.x, x_2045.y, x_2045.z, x_2046.w);
    let x_2048 : vec4<f32> = u_xlat0;
    let x_2052 : vec3<f32> = (vec3<f32>(x_2048.x, x_2048.y, x_2048.z) + vec3<f32>(0.055f, 0.055f, 0.055f));
    let x_2053 : vec4<f32> = u_xlat3;
    u_xlat3 = vec4<f32>(x_2052.x, x_2052.y, x_2052.z, x_2053.w);
    let x_2055 : vec4<f32> = u_xlat3;
    let x_2059 : vec3<f32> = (vec3<f32>(x_2055.x, x_2055.y, x_2055.z) * vec3<f32>(0.947867334f, 0.947867334f, 0.947867334f));
    let x_2060 : vec4<f32> = u_xlat3;
    u_xlat3 = vec4<f32>(x_2059.x, x_2059.y, x_2059.z, x_2060.w);
    let x_2062 : vec4<f32> = u_xlat3;
    let x_2065 : vec3<f32> = log2(abs(vec3<f32>(x_2062.x, x_2062.y, x_2062.z)));
    let x_2066 : vec4<f32> = u_xlat3;
    u_xlat3 = vec4<f32>(x_2065.x, x_2065.y, x_2065.z, x_2066.w);
    let x_2068 : vec4<f32> = u_xlat3;
    let x_2072 : vec3<f32> = (vec3<f32>(x_2068.x, x_2068.y, x_2068.z) * vec3<f32>(2.400000095f, 2.400000095f, 2.400000095f));
    let x_2073 : vec4<f32> = u_xlat3;
    u_xlat3 = vec4<f32>(x_2072.x, x_2072.y, x_2072.z, x_2073.w);
    let x_2075 : vec4<f32> = u_xlat3;
    let x_2077 : vec3<f32> = exp2(vec3<f32>(x_2075.x, x_2075.y, x_2075.z));
    let x_2078 : vec4<f32> = u_xlat3;
    u_xlat3 = vec4<f32>(x_2077.x, x_2077.y, x_2077.z, x_2078.w);
    let x_2082 : vec4<f32> = u_xlat0;
    let x_2084 : vec4<bool> = (vec4<f32>(0.040449999f, 0.040449999f, 0.040449999f, 0.0f) >= vec4<f32>(x_2082.x, x_2082.y, x_2082.z, x_2082.x));
    u_xlatb0 = vec3<bool>(x_2084.x, x_2084.y, x_2084.z);
    let x_2087 : bool = u_xlatb0.x;
    if (x_2087) {
      let x_2092 : f32 = u_xlat2.x;
      x_2088 = x_2092;
    } else {
      let x_2095 : f32 = u_xlat3.x;
      x_2088 = x_2095;
    }
    let x_2096 : f32 = x_2088;
    u_xlat1.x = x_2096;
    let x_2099 : bool = u_xlatb0.y;
    if (x_2099) {
      let x_2104 : f32 = u_xlat2.y;
      x_2100 = x_2104;
    } else {
      let x_2107 : f32 = u_xlat3.y;
      x_2100 = x_2107;
    }
    let x_2108 : f32 = x_2100;
    u_xlat1.y = x_2108;
    let x_2111 : bool = u_xlatb0.z;
    if (x_2111) {
      let x_2116 : f32 = u_xlat2.z;
      x_2112 = x_2116;
    } else {
      let x_2119 : f32 = u_xlat3.z;
      x_2112 = x_2119;
    }
    let x_2120 : f32 = x_2112;
    u_xlat1.z = x_2120;
  }
  let x_2122 : vec4<f32> = u_xlat1;
  let x_2125 : vec4<f32> = x_25.x_Lut_Params;
  let x_2127 : vec3<f32> = (vec3<f32>(x_2122.z, x_2122.x, x_2122.y) * vec3<f32>(x_2125.z, x_2125.z, x_2125.z));
  let x_2128 : vec4<f32> = u_xlat0;
  u_xlat0 = vec4<f32>(x_2127.x, x_2127.y, x_2127.z, x_2128.w);
  let x_2131 : f32 = u_xlat0.x;
  u_xlat0.x = floor(x_2131);
  let x_2135 : vec4<f32> = x_25.x_Lut_Params;
  let x_2137 : vec2<f32> = (vec2<f32>(x_2135.x, x_2135.y) * vec2<f32>(0.5f, 0.5f));
  let x_2138 : vec4<f32> = u_xlat1;
  u_xlat1 = vec4<f32>(x_2137.x, x_2137.y, x_2138.z, x_2138.w);
  let x_2140 : vec4<f32> = u_xlat0;
  let x_2143 : vec4<f32> = x_25.x_Lut_Params;
  let x_2146 : vec4<f32> = u_xlat1;
  let x_2148 : vec2<f32> = ((vec2<f32>(x_2140.y, x_2140.z) * vec2<f32>(x_2143.x, x_2143.y)) + vec2<f32>(x_2146.x, x_2146.y));
  let x_2149 : vec4<f32> = u_xlat2;
  u_xlat2 = vec4<f32>(x_2149.x, x_2148.x, x_2148.y, x_2149.w);
  let x_2152 : f32 = u_xlat0.x;
  let x_2154 : f32 = x_25.x_Lut_Params.y;
  let x_2157 : f32 = u_xlat2.y;
  u_xlat2.x = ((x_2152 * x_2154) + x_2157);
  let x_2164 : vec4<f32> = u_xlat2;
  let x_2166 : vec4<f32> = textureSampleLevel(x_InternalLut, sampler_LinearClamp, vec2<f32>(x_2164.x, x_2164.z), 0.0f);
  u_xlat7 = vec3<f32>(x_2166.x, x_2166.y, x_2166.z);
  let x_2169 : f32 = x_25.x_Lut_Params.y;
  u_xlat1.x = x_2169;
  u_xlat1.y = 0.0f;
  let x_2172 : vec4<f32> = u_xlat1;
  let x_2174 : vec4<f32> = u_xlat2;
  let x_2176 : vec2<f32> = (vec2<f32>(x_2172.x, x_2172.y) + vec2<f32>(x_2174.x, x_2174.z));
  let x_2177 : vec4<f32> = u_xlat1;
  u_xlat1 = vec4<f32>(x_2176.x, x_2176.y, x_2177.z, x_2177.w);
  let x_2182 : vec4<f32> = u_xlat1;
  let x_2184 : vec4<f32> = textureSampleLevel(x_InternalLut, sampler_LinearClamp, vec2<f32>(x_2182.x, x_2182.y), 0.0f);
  let x_2185 : vec3<f32> = vec3<f32>(x_2184.x, x_2184.y, x_2184.z);
  let x_2186 : vec4<f32> = u_xlat1;
  u_xlat1 = vec4<f32>(x_2185.x, x_2185.y, x_2186.z, x_2185.z);
  let x_2189 : f32 = u_xlat1.z;
  let x_2191 : f32 = x_25.x_Lut_Params.z;
  let x_2194 : f32 = u_xlat0.x;
  u_xlat0.x = ((x_2189 * x_2191) + -(x_2194));
  let x_2198 : vec3<f32> = u_xlat7;
  let x_2200 : vec4<f32> = u_xlat1;
  let x_2202 : vec3<f32> = (-(x_2198) + vec3<f32>(x_2200.x, x_2200.y, x_2200.w));
  let x_2203 : vec4<f32> = u_xlat1;
  u_xlat1 = vec4<f32>(x_2202.x, x_2202.y, x_2202.z, x_2203.w);
  let x_2205 : vec4<f32> = u_xlat0;
  let x_2207 : vec4<f32> = u_xlat1;
  let x_2210 : vec3<f32> = u_xlat7;
  let x_2211 : vec3<f32> = ((vec3<f32>(x_2205.x, x_2205.x, x_2205.x) * vec3<f32>(x_2207.x, x_2207.y, x_2207.z)) + x_2210);
  let x_2212 : vec4<f32> = u_xlat0;
  u_xlat0 = vec4<f32>(x_2211.x, x_2211.y, x_2211.z, x_2212.w);
  let x_2214 : vec2<f32> = vs_TEXCOORD0;
  let x_2217 : vec4<f32> = x_25.x_Grain_TilingParams;
  let x_2221 : vec4<f32> = x_25.x_Grain_TilingParams;
  let x_2223 : vec2<f32> = ((x_2214 * vec2<f32>(x_2217.x, x_2217.y)) + vec2<f32>(x_2221.z, x_2221.w));
  let x_2224 : vec4<f32> = u_xlat1;
  u_xlat1 = vec4<f32>(x_2223.x, x_2223.y, x_2224.z, x_2224.w);
  let x_2231 : vec4<f32> = u_xlat1;
  let x_2234 : f32 = x_25.x_GlobalMipBias.x;
  let x_2235 : vec4<f32> = textureSampleBias(x_Grain_Texture, sampler_LinearRepeat, vec2<f32>(x_2231.x, x_2231.y), x_2234);
  u_xlat21 = x_2235.w;
  let x_2237 : f32 = u_xlat21;
  u_xlat21 = (x_2237 + -0.5f);
  let x_2239 : f32 = u_xlat21;
  let x_2240 : f32 = u_xlat21;
  u_xlat21 = (x_2239 + x_2240);
  let x_2242 : vec4<f32> = u_xlat0;
  u_xlat1.x = dot(vec3<f32>(x_2242.x, x_2242.y, x_2242.z), vec3<f32>(0.212672904f, 0.715152204f, 0.072175004f));
  let x_2251 : f32 = u_xlat1.x;
  u_xlat1.x = sqrt(x_2251);
  let x_2256 : f32 = x_25.x_Grain_Params.y;
  let x_2258 : f32 = u_xlat1.x;
  u_xlat1.x = ((x_2256 * -(x_2258)) + 1.0f);
  let x_2263 : f32 = u_xlat21;
  let x_2265 : vec4<f32> = u_xlat0;
  u_xlat8 = (vec3<f32>(x_2263, x_2263, x_2263) * vec3<f32>(x_2265.x, x_2265.y, x_2265.z));
  let x_2268 : vec3<f32> = u_xlat8;
  let x_2271 : vec2<f32> = x_25.x_Grain_Params;
  u_xlat8 = (x_2268 * vec3<f32>(x_2271.x, x_2271.x, x_2271.x));
  let x_2274 : vec3<f32> = u_xlat8;
  let x_2275 : vec4<f32> = u_xlat1;
  let x_2278 : vec4<f32> = u_xlat0;
  let x_2280 : vec3<f32> = ((x_2274 * vec3<f32>(x_2275.x, x_2275.x, x_2275.x)) + vec3<f32>(x_2278.x, x_2278.y, x_2278.z));
  let x_2281 : vec4<f32> = u_xlat0;
  u_xlat0 = vec4<f32>(x_2280.x, x_2280.y, x_2280.z, x_2281.w);
  let x_2283 : vec4<f32> = u_xlat0;
  let x_2285 : vec3<f32> = sqrt(vec3<f32>(x_2283.x, x_2283.y, x_2283.z));
  let x_2286 : vec4<f32> = u_xlat0;
  u_xlat0 = vec4<f32>(x_2285.x, x_2285.y, x_2285.z, x_2286.w);
  let x_2288 : vec2<f32> = vs_TEXCOORD0;
  let x_2291 : vec4<f32> = x_25.x_Dithering_Params;
  let x_2295 : vec4<f32> = x_25.x_Dithering_Params;
  let x_2297 : vec2<f32> = ((x_2288 * vec2<f32>(x_2291.x, x_2291.y)) + vec2<f32>(x_2295.z, x_2295.w));
  let x_2298 : vec4<f32> = u_xlat1;
  u_xlat1 = vec4<f32>(x_2297.x, x_2297.y, x_2298.z, x_2298.w);
  let x_2305 : vec4<f32> = u_xlat1;
  let x_2308 : f32 = x_25.x_GlobalMipBias.x;
  let x_2309 : vec4<f32> = textureSampleBias(x_BlueNoise_Texture, sampler_PointRepeat, vec2<f32>(x_2305.x, x_2305.y), x_2308);
  u_xlat21 = x_2309.w;
  let x_2311 : f32 = u_xlat21;
  u_xlat21 = ((x_2311 * 2.0f) + -1.0f);
  let x_2314 : f32 = u_xlat21;
  u_xlatb1 = (x_2314 >= 0.0f);
  let x_2316 : bool = u_xlatb1;
  u_xlat1.x = select(-1.0f, 1.0f, x_2316);
  let x_2319 : f32 = u_xlat21;
  u_xlat21 = (-(abs(x_2319)) + 1.0f);
  let x_2323 : f32 = u_xlat21;
  u_xlat21 = sqrt(x_2323);
  let x_2325 : f32 = u_xlat21;
  u_xlat21 = (-(x_2325) + 1.0f);
  let x_2328 : f32 = u_xlat21;
  let x_2330 : f32 = u_xlat1.x;
  u_xlat21 = (x_2328 * x_2330);
  let x_2332 : vec4<f32> = u_xlat0;
  let x_2334 : vec3<f32> = (vec3<f32>(x_2332.x, x_2332.y, x_2332.z) * vec3<f32>(12.920000076f, 12.920000076f, 12.920000076f));
  let x_2335 : vec4<f32> = u_xlat1;
  u_xlat1 = vec4<f32>(x_2334.x, x_2334.y, x_2334.z, x_2335.w);
  let x_2337 : vec4<f32> = u_xlat0;
  let x_2339 : vec3<f32> = log2(vec3<f32>(x_2337.x, x_2337.y, x_2337.z));
  let x_2340 : vec4<f32> = u_xlat2;
  u_xlat2 = vec4<f32>(x_2339.x, x_2339.y, x_2339.z, x_2340.w);
  let x_2342 : vec4<f32> = u_xlat2;
  let x_2344 : vec3<f32> = (vec3<f32>(x_2342.x, x_2342.y, x_2342.z) * vec3<f32>(0.416666657f, 0.416666657f, 0.416666657f));
  let x_2345 : vec4<f32> = u_xlat2;
  u_xlat2 = vec4<f32>(x_2344.x, x_2344.y, x_2344.z, x_2345.w);
  let x_2347 : vec4<f32> = u_xlat2;
  let x_2349 : vec3<f32> = exp2(vec3<f32>(x_2347.x, x_2347.y, x_2347.z));
  let x_2350 : vec4<f32> = u_xlat2;
  u_xlat2 = vec4<f32>(x_2349.x, x_2349.y, x_2349.z, x_2350.w);
  let x_2352 : vec4<f32> = u_xlat2;
  let x_2355 : vec3<f32> = ((vec3<f32>(x_2352.x, x_2352.y, x_2352.z) * vec3<f32>(1.054999948f, 1.054999948f, 1.054999948f)) + vec3<f32>(-0.055f, -0.055f, -0.055f));
  let x_2356 : vec4<f32> = u_xlat2;
  u_xlat2 = vec4<f32>(x_2355.x, x_2355.y, x_2355.z, x_2356.w);
  let x_2358 : vec4<f32> = u_xlat0;
  let x_2360 : vec4<bool> = (vec4<f32>(0.0031308f, 0.0031308f, 0.0031308f, 0.0f) >= vec4<f32>(x_2358.x, x_2358.y, x_2358.z, x_2358.x));
  u_xlatb0 = vec3<bool>(x_2360.x, x_2360.y, x_2360.z);
  let x_2363 : bool = u_xlatb0.x;
  if (x_2363) {
    let x_2368 : f32 = u_xlat1.x;
    x_2364 = x_2368;
  } else {
    let x_2371 : f32 = u_xlat2.x;
    x_2364 = x_2371;
  }
  let x_2372 : f32 = x_2364;
  u_xlat0.x = x_2372;
  let x_2375 : bool = u_xlatb0.y;
  if (x_2375) {
    let x_2380 : f32 = u_xlat1.y;
    x_2376 = x_2380;
  } else {
    let x_2383 : f32 = u_xlat2.y;
    x_2376 = x_2383;
  }
  let x_2384 : f32 = x_2376;
  u_xlat0.y = x_2384;
  let x_2387 : bool = u_xlatb0.z;
  if (x_2387) {
    let x_2392 : f32 = u_xlat1.z;
    x_2388 = x_2392;
  } else {
    let x_2395 : f32 = u_xlat2.z;
    x_2388 = x_2395;
  }
  let x_2396 : f32 = x_2388;
  u_xlat0.z = x_2396;
  let x_2398 : f32 = u_xlat21;
  let x_2403 : vec4<f32> = u_xlat0;
  let x_2405 : vec3<f32> = ((vec3<f32>(x_2398, x_2398, x_2398) * vec3<f32>(0.003921569f, 0.003921569f, 0.003921569f)) + vec3<f32>(x_2403.x, x_2403.y, x_2403.z));
  let x_2406 : vec4<f32> = u_xlat0;
  u_xlat0 = vec4<f32>(x_2405.x, x_2405.y, x_2405.z, x_2406.w);
  let x_2408 : vec4<f32> = u_xlat0;
  let x_2410 : vec3<f32> = (vec3<f32>(x_2408.x, x_2408.y, x_2408.z) * vec3<f32>(0.077399381f, 0.077399381f, 0.077399381f));
  let x_2411 : vec4<f32> = u_xlat1;
  u_xlat1 = vec4<f32>(x_2410.x, x_2410.y, x_2410.z, x_2411.w);
  let x_2413 : vec4<f32> = u_xlat0;
  let x_2415 : vec3<f32> = (vec3<f32>(x_2413.x, x_2413.y, x_2413.z) + vec3<f32>(0.055f, 0.055f, 0.055f));
  let x_2416 : vec4<f32> = u_xlat2;
  u_xlat2 = vec4<f32>(x_2415.x, x_2415.y, x_2415.z, x_2416.w);
  let x_2418 : vec4<f32> = u_xlat2;
  let x_2420 : vec3<f32> = (vec3<f32>(x_2418.x, x_2418.y, x_2418.z) * vec3<f32>(0.947867334f, 0.947867334f, 0.947867334f));
  let x_2421 : vec4<f32> = u_xlat2;
  u_xlat2 = vec4<f32>(x_2420.x, x_2420.y, x_2420.z, x_2421.w);
  let x_2423 : vec4<f32> = u_xlat2;
  let x_2426 : vec3<f32> = log2(abs(vec3<f32>(x_2423.x, x_2423.y, x_2423.z)));
  let x_2427 : vec4<f32> = u_xlat2;
  u_xlat2 = vec4<f32>(x_2426.x, x_2426.y, x_2426.z, x_2427.w);
  let x_2429 : vec4<f32> = u_xlat2;
  let x_2431 : vec3<f32> = (vec3<f32>(x_2429.x, x_2429.y, x_2429.z) * vec3<f32>(2.400000095f, 2.400000095f, 2.400000095f));
  let x_2432 : vec4<f32> = u_xlat2;
  u_xlat2 = vec4<f32>(x_2431.x, x_2431.y, x_2431.z, x_2432.w);
  let x_2434 : vec4<f32> = u_xlat2;
  let x_2436 : vec3<f32> = exp2(vec3<f32>(x_2434.x, x_2434.y, x_2434.z));
  let x_2437 : vec4<f32> = u_xlat2;
  u_xlat2 = vec4<f32>(x_2436.x, x_2436.y, x_2436.z, x_2437.w);
  let x_2439 : vec4<f32> = u_xlat0;
  let x_2441 : vec4<bool> = (vec4<f32>(0.040449999f, 0.040449999f, 0.040449999f, 0.0f) >= vec4<f32>(x_2439.x, x_2439.y, x_2439.z, x_2439.x));
  u_xlatb0 = vec3<bool>(x_2441.x, x_2441.y, x_2441.z);
  let x_2444 : bool = u_xlatb0.x;
  if (x_2444) {
    let x_2449 : f32 = u_xlat1.x;
    x_2445 = x_2449;
  } else {
    let x_2452 : f32 = u_xlat2.x;
    x_2445 = x_2452;
  }
  let x_2453 : f32 = x_2445;
  u_xlat0.x = x_2453;
  let x_2456 : bool = u_xlatb0.y;
  if (x_2456) {
    let x_2461 : f32 = u_xlat1.y;
    x_2457 = x_2461;
  } else {
    let x_2464 : f32 = u_xlat2.y;
    x_2457 = x_2464;
  }
  let x_2465 : f32 = x_2457;
  u_xlat0.y = x_2465;
  let x_2468 : bool = u_xlatb0.z;
  if (x_2468) {
    let x_2473 : f32 = u_xlat1.z;
    x_2469 = x_2473;
  } else {
    let x_2476 : f32 = u_xlat2.z;
    x_2469 = x_2476;
  }
  let x_2477 : f32 = x_2469;
  u_xlat0.z = x_2477;
  let x_2481 : vec4<f32> = u_xlat0;
  let x_2483 : vec3<f32> = max(vec3<f32>(x_2481.x, x_2481.y, x_2481.z), vec3<f32>(0.0f, 0.0f, 0.0f));
  let x_2484 : vec4<f32> = SV_Target0;
  SV_Target0 = vec4<f32>(x_2483.x, x_2483.y, x_2483.z, x_2484.w);
  SV_Target0.w = 1.0f;
  return;
}

struct main_out {
  @location(0)
  SV_Target0_1 : vec4<f32>,
}

@fragment
fn main(@location(0) vs_TEXCOORD0_param : vec2<f32>, @builtin(position) gl_FragCoord_param : vec4<f32>) -> main_out {
  vs_TEXCOORD0 = vs_TEXCOORD0_param;
  gl_FragCoord = gl_FragCoord_param;
  main_1();
  return main_out(SV_Target0);
}

