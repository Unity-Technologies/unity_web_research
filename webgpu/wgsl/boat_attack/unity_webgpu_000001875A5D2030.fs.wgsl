type Arr = array<vec4<f32>, 2u>;

struct UnityPerDraw {
  unity_ObjectToWorld : mat4x4<f32>,
  unity_WorldToObject : mat4x4<f32>,
  unity_LODFade : vec4<f32>,
  unity_WorldTransformParams : vec4<f32>,
  unity_RenderingLayer : vec4<f32>,
  unity_LightData : vec4<f32>,
  unity_LightIndices : Arr,
  unity_ProbesOcclusion : vec4<f32>,
  unity_SpecCube0_HDR : vec4<f32>,
  unity_SpecCube1_HDR : vec4<f32>,
  unity_SpecCube0_BoxMax : vec4<f32>,
  unity_SpecCube0_BoxMin : vec4<f32>,
  unity_SpecCube0_ProbePosition : vec4<f32>,
  unity_SpecCube1_BoxMax : vec4<f32>,
  unity_SpecCube1_BoxMin : vec4<f32>,
  unity_SpecCube1_ProbePosition : vec4<f32>,
  unity_LightmapST : vec4<f32>,
  unity_DynamicLightmapST : vec4<f32>,
  unity_SHAr : vec4<f32>,
  unity_SHAg : vec4<f32>,
  unity_SHAb : vec4<f32>,
  unity_SHBr : vec4<f32>,
  unity_SHBg : vec4<f32>,
  unity_SHBb : vec4<f32>,
  unity_SHC : vec4<f32>,
  unity_RendererBounds_Min : vec4<f32>,
  unity_RendererBounds_Max : vec4<f32>,
  unity_MatrixPreviousM : mat4x4<f32>,
  unity_MatrixPreviousMI : mat4x4<f32>,
  unity_MotionVectorsParams : vec4<f32>,
  unity_SpriteColor : vec4<f32>,
  unity_SpriteProps : vec4<f32>,
}

struct PGlobals {
  x_ScaledScreenParams : vec4<f32>,
  x_GlobalMipBias : vec2<f32>,
  x_AlphaToMaskAvailable : f32,
  @size(4)
  padding : u32,
  x_MainLightPosition : vec4<f32>,
  x_MainLightColor : vec4<f32>,
  x_AmbientOcclusionParam : vec4<f32>,
  x_AdditionalLightsCount : vec4<f32>,
  x_RenderingLayerMaxInt : u32,
  x_RenderingLayerRcpMaxInt : f32,
  @size(8)
  padding_1 : u32,
  x_WorldSpaceCameraPos : vec3<f32>,
  @size(4)
  padding_2 : u32,
  x_ProjectionParams : vec4<f32>,
  x_ScreenParams : vec4<f32>,
  unity_OrthoParams : vec4<f32>,
  x_ScaleBiasRt : vec4<f32>,
  unity_FogParams : vec4<f32>,
  unity_FogColor : vec4<f32>,
  unity_MatrixV : mat4x4<f32>,
}

struct UnityPerMaterial {
  Texture2D_B222E8F_TexelSize : vec4<f32>,
  Color_C30C7CA3 : vec4<f32>,
  Texture2D_D9BFD5F1_TexelSize : vec4<f32>,
}

type Arr_1 = array<mat4x4<f32>, 5u>;

struct MainLightShadows {
  x_MainLightWorldToShadow : Arr_1,
  x_CascadeShadowSplitSpheres0 : vec4<f32>,
  x_CascadeShadowSplitSpheres1 : vec4<f32>,
  x_CascadeShadowSplitSpheres2 : vec4<f32>,
  x_CascadeShadowSplitSpheres3 : vec4<f32>,
  x_CascadeShadowSplitSphereRadii : vec4<f32>,
  x_MainLightShadowOffset0 : vec4<f32>,
  x_MainLightShadowOffset1 : vec4<f32>,
  x_MainLightShadowParams : vec4<f32>,
  x_MainLightShadowmapSize : vec4<f32>,
}

type Arr_2 = array<vec4<f32>, 256u>;

type Arr_3 = array<vec4<f32>, 256u>;

type Arr_4 = array<vec4<f32>, 256u>;

type Arr_5 = array<vec4<f32>, 256u>;

type Arr_6 = array<vec4<f32>, 256u>;

struct strided_arr {
  @size(16)
  el : f32,
}

type Arr_7 = array<strided_arr, 256u>;

struct AdditionalLights {
  x_AdditionalLightsPosition : Arr_6,
  x_AdditionalLightsColor : Arr_6,
  x_AdditionalLightsAttenuation : Arr_6,
  x_AdditionalLightsSpotDir : Arr_6,
  x_AdditionalLightsOcclusionProbes : Arr_6,
  x_AdditionalLightsLayerMasks : Arr_7,
}

var<private> gl_FragCoord : vec4<f32>;

var<private> vs_INTERP1 : vec3<f32>;

var<private> vs_INTERP2 : vec4<f32>;

@group(1) @binding(2) var<uniform> x_95 : UnityPerDraw;

@group(1) @binding(0) var<uniform> x_158 : PGlobals;

var<private> vs_INTERP0 : vec3<f32>;

@group(0) @binding(4) var Texture2D_B222E8F : texture_2d<f32>;

@group(0) @binding(10) var samplerTexture2D_B222E8F : sampler;

var<private> vs_INTERP3 : vec4<f32>;

@group(1) @binding(4) var<uniform> x_261 : UnityPerMaterial;

@group(0) @binding(5) var Texture2D_D9BFD5F1 : texture_2d<f32>;

@group(0) @binding(11) var samplerTexture2D_D9BFD5F1 : sampler;

var<private> vs_INTERP4 : vec4<f32>;

@group(1) @binding(3) var<uniform> x_362 : MainLightShadows;

@group(0) @binding(3) var x_MainLightShadowmapTexture : texture_depth_2d;

@group(0) @binding(9) var sampler_MainLightShadowmapTexture : sampler_comparison;

@group(0) @binding(1) var unity_Lightmap : texture_2d<f32>;

@group(0) @binding(7) var samplerunity_Lightmap : sampler;

var<private> vs_INTERP5 : vec2<f32>;

@group(0) @binding(2) var x_ScreenSpaceOcclusionTexture : texture_2d<f32>;

@group(0) @binding(8) var sampler_ScreenSpaceOcclusionTexture : sampler;

var<private> vs_INTERP9 : vec4<f32>;

@group(0) @binding(0) var unity_SpecCube0 : texture_cube<f32>;

@group(0) @binding(6) var samplerunity_SpecCube0 : sampler;

@group(1) @binding(1) var<uniform> x_3694 : AdditionalLights;

var<private> SV_Target0 : vec4<f32>;

var<private> SV_Target1 : vec4<f32>;

fn int_bitfieldInsert_i1_i1_i1_i1_(base : ptr<function, i32>, insert : ptr<function, i32>, offset_1 : ptr<function, i32>, bits : ptr<function, i32>) -> i32 {
  var mask : u32;
  let x_19 : i32 = *(bits);
  let x_23 : i32 = *(offset_1);
  mask = (~((4294967295u << bitcast<u32>(x_19))) << bitcast<u32>(x_23));
  let x_26 : i32 = *(base);
  let x_28 : u32 = mask;
  let x_31 : i32 = *(insert);
  let x_33 : i32 = *(offset_1);
  let x_36 : u32 = mask;
  return bitcast<i32>(((bitcast<u32>(x_26) & ~(x_28)) | ((bitcast<u32>(x_31) << bitcast<u32>(x_33)) & x_36)));
}

fn main_1() {
  var hlslcc_FragCoord : vec4<f32>;
  var u_xlat0 : vec3<f32>;
  var u_xlatb22 : vec2<bool>;
  var u_xlat22 : vec3<f32>;
  var u_xlat1 : vec3<f32>;
  var u_xlat2 : vec3<f32>;
  var u_xlat3 : vec4<f32>;
  var u_xlatb0 : bool;
  var u_xlat4 : vec3<f32>;
  var u_xlat67 : f32;
  var u_xlat5 : vec3<f32>;
  var x_197 : vec3<f32>;
  var u_xlat6 : vec4<f32>;
  var u_xlat7 : vec4<f32>;
  var u_xlat8 : vec4<f32>;
  var u_xlat9 : vec4<f32>;
  var u_xlat30 : vec3<f32>;
  var u_xlatb67 : bool;
  var txVec0 : vec3<f32>;
  var txVec1 : vec3<f32>;
  var txVec2 : vec3<f32>;
  var txVec3 : vec3<f32>;
  var u_xlatb68 : bool;
  var u_xlat47 : vec2<f32>;
  var u_xlat10 : vec4<f32>;
  var u_xlat54 : vec2<f32>;
  var u_xlat11 : vec4<f32>;
  var u_xlat12 : vec4<f32>;
  var u_xlat13 : vec4<f32>;
  var u_xlat14 : vec4<f32>;
  var u_xlat15 : vec4<f32>;
  var u_xlat16 : vec4<f32>;
  var u_xlat68 : f32;
  var txVec4 : vec3<f32>;
  var txVec5 : vec3<f32>;
  var u_xlat25 : f32;
  var txVec6 : vec3<f32>;
  var txVec7 : vec3<f32>;
  var txVec8 : vec3<f32>;
  var txVec9 : vec3<f32>;
  var txVec10 : vec3<f32>;
  var txVec11 : vec3<f32>;
  var txVec12 : vec3<f32>;
  var u_xlat31 : vec3<f32>;
  var u_xlat17 : vec4<f32>;
  var u_xlat18 : vec4<f32>;
  var u_xlat32 : vec2<f32>;
  var u_xlat60 : vec2<f32>;
  var u_xlat55 : vec2<f32>;
  var u_xlat19 : vec4<f32>;
  var u_xlat20 : vec4<f32>;
  var u_xlat21 : vec4<f32>;
  var txVec13 : vec3<f32>;
  var txVec14 : vec3<f32>;
  var u_xlat70 : f32;
  var txVec15 : vec3<f32>;
  var txVec16 : vec3<f32>;
  var txVec17 : vec3<f32>;
  var txVec18 : vec3<f32>;
  var txVec19 : vec3<f32>;
  var txVec20 : vec3<f32>;
  var txVec21 : vec3<f32>;
  var txVec22 : vec3<f32>;
  var txVec23 : vec3<f32>;
  var txVec24 : vec3<f32>;
  var txVec25 : vec3<f32>;
  var txVec26 : vec3<f32>;
  var txVec27 : vec3<f32>;
  var txVec28 : vec3<f32>;
  var txVec29 : vec3<f32>;
  var u_xlatb24 : bool;
  var u_xlatb46 : bool;
  var u_xlat23 : vec3<f32>;
  var u_xlat24 : f32;
  var x_1704 : f32;
  var u_xlatu3 : vec3<u32>;
  var u_xlatu46 : u32;
  var u_xlatu68 : u32;
  var u_xlati46 : i32;
  var u_xlat46 : f32;
  var param : i32;
  var param_1 : i32;
  var param_2 : i32;
  var param_3 : i32;
  var u_xlat69 : f32;
  var u_xlat27 : f32;
  var u_xlat71 : f32;
  var u_xlat49 : f32;
  var txVec30 : vec3<f32>;
  var txVec31 : vec3<f32>;
  var txVec32 : vec3<f32>;
  var txVec33 : vec3<f32>;
  var u_xlatb72 : bool;
  var u_xlat51 : vec2<f32>;
  var u_xlat53 : vec2<f32>;
  var u_xlat72 : f32;
  var txVec34 : vec3<f32>;
  var txVec35 : vec3<f32>;
  var u_xlat29 : f32;
  var txVec36 : vec3<f32>;
  var txVec37 : vec3<f32>;
  var txVec38 : vec3<f32>;
  var txVec39 : vec3<f32>;
  var txVec40 : vec3<f32>;
  var txVec41 : vec3<f32>;
  var txVec42 : vec3<f32>;
  var u_xlat59 : vec2<f32>;
  var txVec43 : vec3<f32>;
  var txVec44 : vec3<f32>;
  var txVec45 : vec3<f32>;
  var txVec46 : vec3<f32>;
  var txVec47 : vec3<f32>;
  var txVec48 : vec3<f32>;
  var txVec49 : vec3<f32>;
  var txVec50 : vec3<f32>;
  var txVec51 : vec3<f32>;
  var txVec52 : vec3<f32>;
  var txVec53 : vec3<f32>;
  var txVec54 : vec3<f32>;
  var txVec55 : vec3<f32>;
  var txVec56 : vec3<f32>;
  var txVec57 : vec3<f32>;
  var txVec58 : vec3<f32>;
  var txVec59 : vec3<f32>;
  var u_xlatb2 : bool;
  var x_3293 : f32;
  var u_xlatu0 : u32;
  var u_xlatu_loop_1 : u32;
  var u_xlati69 : i32;
  var indexable : array<vec4<u32>, 4u>;
  var u_xlati68 : i32;
  var u_xlat66 : f32;
  var u_xlat_precise_vec4 : vec4<f32>;
  var u_xlat_precise_ivec4 : vec4<i32>;
  var u_xlat_precise_bvec4 : vec4<bool>;
  var u_xlat_precise_uvec4 : vec4<u32>;
  let x_49 : vec4<f32> = gl_FragCoord;
  let x_50 : vec3<f32> = vec3<f32>(x_49.x, x_49.y, x_49.z);
  let x_55 : f32 = gl_FragCoord.w;
  hlslcc_FragCoord = vec4<f32>(x_50.x, x_50.y, x_50.z, (1.0f / x_55));
  let x_65 : vec3<f32> = vs_INTERP1;
  let x_66 : vec3<f32> = vs_INTERP1;
  u_xlat0.x = dot(x_65, x_66);
  let x_72 : f32 = u_xlat0.x;
  u_xlat0.x = sqrt(x_72);
  let x_76 : f32 = u_xlat0.x;
  u_xlat0.x = (1.0f / x_76);
  let x_86 : f32 = vs_INTERP2.w;
  u_xlatb22.x = (0.0f < x_86);
  let x_99 : f32 = x_95.unity_WorldTransformParams.w;
  u_xlatb22.y = (x_99 >= 0.0f);
  let x_105 : bool = u_xlatb22.x;
  u_xlat22.x = select(-1.0f, 1.0f, x_105);
  let x_110 : bool = u_xlatb22.y;
  u_xlat22.y = select(-1.0f, 1.0f, x_110);
  let x_114 : f32 = u_xlat22.y;
  let x_116 : f32 = u_xlat22.x;
  u_xlat22.x = (x_114 * x_116);
  let x_120 : vec3<f32> = vs_INTERP1;
  let x_122 : vec4<f32> = vs_INTERP2;
  u_xlat1 = (vec3<f32>(x_120.z, x_120.x, x_120.y) * vec3<f32>(x_122.y, x_122.z, x_122.x));
  let x_125 : vec3<f32> = vs_INTERP1;
  let x_127 : vec4<f32> = vs_INTERP2;
  let x_130 : vec3<f32> = u_xlat1;
  u_xlat1 = ((vec3<f32>(x_125.y, x_125.z, x_125.x) * vec3<f32>(x_127.z, x_127.x, x_127.y)) + -(x_130));
  let x_133 : vec3<f32> = u_xlat22;
  let x_135 : vec3<f32> = u_xlat1;
  u_xlat22 = (vec3<f32>(x_133.x, x_133.x, x_133.x) * x_135);
  let x_137 : vec3<f32> = u_xlat0;
  let x_139 : vec3<f32> = vs_INTERP1;
  u_xlat1 = (vec3<f32>(x_137.x, x_137.x, x_137.x) * x_139);
  let x_142 : vec3<f32> = u_xlat0;
  let x_144 : vec4<f32> = vs_INTERP2;
  u_xlat2 = (vec3<f32>(x_142.x, x_142.x, x_142.x) * vec3<f32>(x_144.x, x_144.y, x_144.z));
  let x_148 : vec3<f32> = u_xlat22;
  let x_149 : vec3<f32> = u_xlat0;
  let x_151 : vec3<f32> = (x_148 * vec3<f32>(x_149.x, x_149.x, x_149.x));
  let x_152 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_151.x, x_151.y, x_151.z, x_152.w);
  let x_161 : f32 = x_158.unity_OrthoParams.w;
  u_xlatb0 = (x_161 == 0.0f);
  let x_165 : vec3<f32> = vs_INTERP0;
  let x_170 : vec3<f32> = x_158.x_WorldSpaceCameraPos;
  u_xlat4 = (-(x_165) + x_170);
  let x_173 : vec3<f32> = u_xlat4;
  let x_174 : vec3<f32> = u_xlat4;
  u_xlat67 = dot(x_173, x_174);
  let x_176 : f32 = u_xlat67;
  u_xlat67 = inverseSqrt(x_176);
  let x_178 : f32 = u_xlat67;
  let x_180 : vec3<f32> = u_xlat4;
  u_xlat4 = (vec3<f32>(x_178, x_178, x_178) * x_180);
  let x_186 : f32 = x_158.unity_MatrixV[0i].z;
  u_xlat5.x = x_186;
  let x_190 : f32 = x_158.unity_MatrixV[1i].z;
  u_xlat5.y = x_190;
  let x_194 : f32 = x_158.unity_MatrixV[2i].z;
  u_xlat5.z = x_194;
  let x_196 : bool = u_xlatb0;
  if (x_196) {
    let x_200 : vec3<f32> = u_xlat4;
    x_197 = x_200;
  } else {
    let x_202 : vec3<f32> = u_xlat5;
    x_197 = x_202;
  }
  let x_203 : vec3<f32> = x_197;
  u_xlat4 = x_203;
  let x_204 : vec3<f32> = u_xlat4;
  let x_208 : vec4<f32> = x_95.unity_WorldToObject[1i];
  u_xlat5 = (vec3<f32>(x_204.y, x_204.y, x_204.y) * vec3<f32>(x_208.x, x_208.y, x_208.z));
  let x_212 : vec4<f32> = x_95.unity_WorldToObject[0i];
  let x_214 : vec3<f32> = u_xlat4;
  let x_217 : vec3<f32> = u_xlat5;
  u_xlat5 = ((vec3<f32>(x_212.x, x_212.y, x_212.z) * vec3<f32>(x_214.x, x_214.x, x_214.x)) + x_217);
  let x_220 : vec4<f32> = x_95.unity_WorldToObject[2i];
  let x_222 : vec3<f32> = u_xlat4;
  let x_225 : vec3<f32> = u_xlat5;
  u_xlat5 = ((vec3<f32>(x_220.x, x_220.y, x_220.z) * vec3<f32>(x_222.z, x_222.z, x_222.z)) + x_225);
  let x_227 : vec3<f32> = u_xlat5;
  let x_228 : vec3<f32> = u_xlat5;
  u_xlat0.x = dot(x_227, x_228);
  let x_232 : f32 = u_xlat0.x;
  u_xlat0.x = inverseSqrt(x_232);
  let x_235 : vec3<f32> = u_xlat0;
  let x_237 : vec3<f32> = u_xlat5;
  u_xlat5 = (vec3<f32>(x_235.x, x_235.x, x_235.x) * x_237);
  let x_251 : vec4<f32> = vs_INTERP3;
  let x_254 : f32 = x_158.x_GlobalMipBias.x;
  let x_255 : vec4<f32> = textureSampleBias(Texture2D_B222E8F, samplerTexture2D_B222E8F, vec2<f32>(x_251.x, x_251.y), x_254);
  u_xlat6 = x_255;
  let x_257 : vec4<f32> = u_xlat6;
  let x_263 : vec4<f32> = x_261.Color_C30C7CA3;
  let x_265 : vec3<f32> = (vec3<f32>(x_257.x, x_257.y, x_257.z) * vec3<f32>(x_263.x, x_263.y, x_263.z));
  let x_266 : vec4<f32> = u_xlat7;
  u_xlat7 = vec4<f32>(x_265.x, x_265.y, x_265.z, x_266.w);
  let x_274 : vec4<f32> = vs_INTERP3;
  let x_277 : f32 = x_158.x_GlobalMipBias.x;
  let x_278 : vec4<f32> = textureSampleBias(Texture2D_D9BFD5F1, samplerTexture2D_D9BFD5F1, vec2<f32>(x_274.x, x_274.y), x_277);
  u_xlat8 = vec4<f32>(x_278.w, x_278.x, x_278.y, x_278.z);
  let x_281 : vec4<f32> = u_xlat8;
  u_xlat9 = ((vec4<f32>(x_281.y, x_281.z, x_281.w, x_281.x) * vec4<f32>(2.0f, 2.0f, 2.0f, 2.0f)) + vec4<f32>(-1.0f, -1.0f, -1.0f, -1.0f));
  let x_288 : vec4<f32> = u_xlat9;
  let x_289 : vec4<f32> = u_xlat9;
  u_xlat0.x = dot(x_288, x_289);
  let x_293 : f32 = u_xlat0.x;
  u_xlat0.x = inverseSqrt(x_293);
  let x_297 : vec3<f32> = u_xlat0;
  let x_299 : vec4<f32> = u_xlat9;
  u_xlat30 = (vec3<f32>(x_297.x, x_297.x, x_297.x) * vec3<f32>(x_299.x, x_299.y, x_299.z));
  let x_304 : f32 = vs_INTERP4.y;
  u_xlat0.x = (x_304 * 200.0f);
  let x_309 : f32 = u_xlat0.x;
  u_xlat0.x = min(x_309, 1.0f);
  let x_312 : vec3<f32> = u_xlat0;
  let x_314 : vec4<f32> = u_xlat6;
  let x_316 : vec3<f32> = (vec3<f32>(x_312.x, x_312.x, x_312.x) * vec3<f32>(x_314.x, x_314.y, x_314.z));
  let x_317 : vec4<f32> = u_xlat6;
  u_xlat6 = vec4<f32>(x_316.x, x_316.y, x_316.z, x_317.w);
  let x_319 : vec4<f32> = u_xlat3;
  let x_321 : vec3<f32> = u_xlat30;
  let x_323 : vec3<f32> = (vec3<f32>(x_319.x, x_319.y, x_319.z) * vec3<f32>(x_321.y, x_321.y, x_321.y));
  let x_324 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_323.x, x_323.y, x_323.z, x_324.w);
  let x_326 : vec3<f32> = u_xlat30;
  let x_328 : vec3<f32> = u_xlat2;
  let x_330 : vec4<f32> = u_xlat3;
  u_xlat2 = ((vec3<f32>(x_326.x, x_326.x, x_326.x) * x_328) + vec3<f32>(x_330.x, x_330.y, x_330.z));
  let x_333 : vec3<f32> = u_xlat30;
  let x_335 : vec3<f32> = u_xlat1;
  let x_337 : vec3<f32> = u_xlat2;
  u_xlat1 = ((vec3<f32>(x_333.z, x_333.z, x_333.z) * x_335) + x_337);
  let x_339 : vec3<f32> = u_xlat1;
  let x_340 : vec3<f32> = u_xlat1;
  u_xlat0.x = dot(x_339, x_340);
  let x_344 : f32 = u_xlat0.x;
  u_xlat0.x = max(x_344, 1.17549435e-37f);
  let x_349 : f32 = u_xlat0.x;
  u_xlat0.x = inverseSqrt(x_349);
  let x_352 : vec3<f32> = u_xlat0;
  let x_354 : vec3<f32> = u_xlat1;
  u_xlat1 = (vec3<f32>(x_352.x, x_352.x, x_352.x) * x_354);
  let x_356 : vec3<f32> = vs_INTERP0;
  let x_364 : vec4<f32> = x_362.x_MainLightWorldToShadow[0i][1i];
  u_xlat2 = (vec3<f32>(x_356.y, x_356.y, x_356.y) * vec3<f32>(x_364.x, x_364.y, x_364.z));
  let x_368 : vec4<f32> = x_362.x_MainLightWorldToShadow[0i][0i];
  let x_370 : vec3<f32> = vs_INTERP0;
  let x_373 : vec3<f32> = u_xlat2;
  u_xlat2 = ((vec3<f32>(x_368.x, x_368.y, x_368.z) * vec3<f32>(x_370.x, x_370.x, x_370.x)) + x_373);
  let x_376 : vec4<f32> = x_362.x_MainLightWorldToShadow[0i][2i];
  let x_378 : vec3<f32> = vs_INTERP0;
  let x_381 : vec3<f32> = u_xlat2;
  u_xlat2 = ((vec3<f32>(x_376.x, x_376.y, x_376.z) * vec3<f32>(x_378.z, x_378.z, x_378.z)) + x_381);
  let x_383 : vec3<f32> = u_xlat2;
  let x_385 : vec4<f32> = x_362.x_MainLightWorldToShadow[0i][3i];
  u_xlat2 = (x_383 + vec3<f32>(x_385.x, x_385.y, x_385.z));
  let x_390 : f32 = x_362.x_MainLightShadowParams.y;
  u_xlatb0 = (0.0f < x_390);
  let x_392 : bool = u_xlatb0;
  if (x_392) {
    let x_397 : f32 = x_362.x_MainLightShadowParams.y;
    u_xlatb67 = (x_397 == 1.0f);
    let x_399 : bool = u_xlatb67;
    if (x_399) {
      let x_402 : vec3<f32> = u_xlat2;
      let x_406 : vec4<f32> = x_362.x_MainLightShadowOffset0;
      u_xlat3 = (vec4<f32>(x_402.x, x_402.y, x_402.x, x_402.y) + x_406);
      let x_409 : vec4<f32> = u_xlat3;
      let x_410 : vec2<f32> = vec2<f32>(x_409.x, x_409.y);
      let x_412 : f32 = u_xlat2.z;
      txVec0 = vec3<f32>(x_410.x, x_410.y, x_412);
      let x_424 : vec3<f32> = txVec0;
      let x_426 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_424.xy, x_424.z);
      u_xlat9.x = x_426;
      let x_429 : vec4<f32> = u_xlat3;
      let x_430 : vec2<f32> = vec2<f32>(x_429.z, x_429.w);
      let x_432 : f32 = u_xlat2.z;
      txVec1 = vec3<f32>(x_430.x, x_430.y, x_432);
      let x_439 : vec3<f32> = txVec1;
      let x_441 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_439.xy, x_439.z);
      u_xlat9.y = x_441;
      let x_443 : vec3<f32> = u_xlat2;
      let x_447 : vec4<f32> = x_362.x_MainLightShadowOffset1;
      u_xlat3 = (vec4<f32>(x_443.x, x_443.y, x_443.x, x_443.y) + x_447);
      let x_450 : vec4<f32> = u_xlat3;
      let x_451 : vec2<f32> = vec2<f32>(x_450.x, x_450.y);
      let x_453 : f32 = u_xlat2.z;
      txVec2 = vec3<f32>(x_451.x, x_451.y, x_453);
      let x_460 : vec3<f32> = txVec2;
      let x_462 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_460.xy, x_460.z);
      u_xlat9.z = x_462;
      let x_465 : vec4<f32> = u_xlat3;
      let x_466 : vec2<f32> = vec2<f32>(x_465.z, x_465.w);
      let x_468 : f32 = u_xlat2.z;
      txVec3 = vec3<f32>(x_466.x, x_466.y, x_468);
      let x_475 : vec3<f32> = txVec3;
      let x_477 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_475.xy, x_475.z);
      u_xlat9.w = x_477;
      let x_479 : vec4<f32> = u_xlat9;
      u_xlat67 = dot(x_479, vec4<f32>(0.25f, 0.25f, 0.25f, 0.25f));
    } else {
      let x_486 : f32 = x_362.x_MainLightShadowParams.y;
      u_xlatb68 = (x_486 == 2.0f);
      let x_488 : bool = u_xlatb68;
      if (x_488) {
        let x_491 : vec3<f32> = u_xlat2;
        let x_494 : vec4<f32> = x_362.x_MainLightShadowmapSize;
        let x_499 : vec2<f32> = ((vec2<f32>(x_491.x, x_491.y) * vec2<f32>(x_494.z, x_494.w)) + vec2<f32>(0.5f, 0.5f));
        let x_500 : vec4<f32> = u_xlat3;
        u_xlat3 = vec4<f32>(x_499.x, x_499.y, x_500.z, x_500.w);
        let x_502 : vec4<f32> = u_xlat3;
        let x_504 : vec2<f32> = floor(vec2<f32>(x_502.x, x_502.y));
        let x_505 : vec4<f32> = u_xlat3;
        u_xlat3 = vec4<f32>(x_504.x, x_504.y, x_505.z, x_505.w);
        let x_509 : vec3<f32> = u_xlat2;
        let x_512 : vec4<f32> = x_362.x_MainLightShadowmapSize;
        let x_515 : vec4<f32> = u_xlat3;
        u_xlat47 = ((vec2<f32>(x_509.x, x_509.y) * vec2<f32>(x_512.z, x_512.w)) + -(vec2<f32>(x_515.x, x_515.y)));
        let x_519 : vec2<f32> = u_xlat47;
        u_xlat9 = (vec4<f32>(x_519.x, x_519.x, x_519.y, x_519.y) + vec4<f32>(0.5f, 1.0f, 0.5f, 1.0f));
        let x_524 : vec4<f32> = u_xlat9;
        let x_526 : vec4<f32> = u_xlat9;
        u_xlat10 = (vec4<f32>(x_524.x, x_524.x, x_524.z, x_524.z) * vec4<f32>(x_526.x, x_526.x, x_526.z, x_526.z));
        let x_529 : vec4<f32> = u_xlat10;
        let x_533 : vec2<f32> = (vec2<f32>(x_529.y, x_529.w) * vec2<f32>(0.079999998f, 0.079999998f));
        let x_534 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_533.x, x_534.y, x_533.y, x_534.w);
        let x_536 : vec4<f32> = u_xlat10;
        let x_539 : vec2<f32> = u_xlat47;
        let x_541 : vec2<f32> = ((vec2<f32>(x_536.x, x_536.z) * vec2<f32>(0.5f, 0.5f)) + -(x_539));
        let x_542 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_541.x, x_541.y, x_542.z, x_542.w);
        let x_545 : vec2<f32> = u_xlat47;
        u_xlat54 = (-(x_545) + vec2<f32>(1.0f, 1.0f));
        let x_550 : vec2<f32> = u_xlat47;
        let x_552 : vec2<f32> = min(x_550, vec2<f32>(0.0f, 0.0f));
        let x_553 : vec4<f32> = u_xlat11;
        u_xlat11 = vec4<f32>(x_552.x, x_552.y, x_553.z, x_553.w);
        let x_555 : vec4<f32> = u_xlat11;
        let x_558 : vec4<f32> = u_xlat11;
        let x_561 : vec2<f32> = u_xlat54;
        let x_562 : vec2<f32> = ((-(vec2<f32>(x_555.x, x_555.y)) * vec2<f32>(x_558.x, x_558.y)) + x_561);
        let x_563 : vec4<f32> = u_xlat11;
        u_xlat11 = vec4<f32>(x_562.x, x_562.y, x_563.z, x_563.w);
        let x_565 : vec2<f32> = u_xlat47;
        u_xlat47 = max(x_565, vec2<f32>(0.0f, 0.0f));
        let x_567 : vec2<f32> = u_xlat47;
        let x_569 : vec2<f32> = u_xlat47;
        let x_571 : vec4<f32> = u_xlat9;
        u_xlat47 = ((-(x_567) * x_569) + vec2<f32>(x_571.y, x_571.w));
        let x_574 : vec4<f32> = u_xlat11;
        let x_576 : vec2<f32> = (vec2<f32>(x_574.x, x_574.y) + vec2<f32>(1.0f, 1.0f));
        let x_577 : vec4<f32> = u_xlat11;
        u_xlat11 = vec4<f32>(x_576.x, x_576.y, x_577.z, x_577.w);
        let x_579 : vec2<f32> = u_xlat47;
        u_xlat47 = (x_579 + vec2<f32>(1.0f, 1.0f));
        let x_582 : vec4<f32> = u_xlat10;
        let x_586 : vec2<f32> = (vec2<f32>(x_582.x, x_582.y) * vec2<f32>(0.159999996f, 0.159999996f));
        let x_587 : vec4<f32> = u_xlat12;
        u_xlat12 = vec4<f32>(x_586.x, x_586.y, x_587.z, x_587.w);
        let x_589 : vec2<f32> = u_xlat54;
        let x_590 : vec2<f32> = (x_589 * vec2<f32>(0.159999996f, 0.159999996f));
        let x_591 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_590.x, x_590.y, x_591.z, x_591.w);
        let x_593 : vec4<f32> = u_xlat11;
        let x_595 : vec2<f32> = (vec2<f32>(x_593.x, x_593.y) * vec2<f32>(0.159999996f, 0.159999996f));
        let x_596 : vec4<f32> = u_xlat11;
        u_xlat11 = vec4<f32>(x_595.x, x_595.y, x_596.z, x_596.w);
        let x_599 : vec2<f32> = u_xlat47;
        let x_600 : vec2<f32> = (x_599 * vec2<f32>(0.159999996f, 0.159999996f));
        let x_601 : vec4<f32> = u_xlat13;
        u_xlat13 = vec4<f32>(x_600.x, x_600.y, x_601.z, x_601.w);
        let x_603 : vec4<f32> = u_xlat9;
        u_xlat47 = (vec2<f32>(x_603.y, x_603.w) * vec2<f32>(0.159999996f, 0.159999996f));
        let x_607 : f32 = u_xlat11.x;
        u_xlat12.z = x_607;
        let x_610 : f32 = u_xlat47.x;
        u_xlat12.w = x_610;
        let x_613 : f32 = u_xlat13.x;
        u_xlat10.z = x_613;
        let x_616 : f32 = u_xlat9.x;
        u_xlat10.w = x_616;
        let x_619 : vec4<f32> = u_xlat10;
        let x_621 : vec4<f32> = u_xlat12;
        u_xlat14 = (vec4<f32>(x_619.z, x_619.w, x_619.x, x_619.z) + vec4<f32>(x_621.z, x_621.w, x_621.x, x_621.z));
        let x_625 : f32 = u_xlat12.y;
        u_xlat11.z = x_625;
        let x_628 : f32 = u_xlat47.y;
        u_xlat11.w = x_628;
        let x_631 : f32 = u_xlat10.y;
        u_xlat13.z = x_631;
        let x_634 : f32 = u_xlat9.z;
        u_xlat13.w = x_634;
        let x_636 : vec4<f32> = u_xlat11;
        let x_638 : vec4<f32> = u_xlat13;
        let x_640 : vec3<f32> = (vec3<f32>(x_636.z, x_636.y, x_636.w) + vec3<f32>(x_638.z, x_638.y, x_638.w));
        let x_641 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_640.x, x_640.y, x_640.z, x_641.w);
        let x_643 : vec4<f32> = u_xlat10;
        let x_645 : vec4<f32> = u_xlat14;
        let x_647 : vec3<f32> = (vec3<f32>(x_643.x, x_643.z, x_643.w) / vec3<f32>(x_645.z, x_645.w, x_645.y));
        let x_648 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_647.x, x_647.y, x_647.z, x_648.w);
        let x_650 : vec4<f32> = u_xlat10;
        let x_656 : vec3<f32> = (vec3<f32>(x_650.x, x_650.y, x_650.z) + vec3<f32>(-2.5f, -0.5f, 1.5f));
        let x_657 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_656.x, x_656.y, x_656.z, x_657.w);
        let x_659 : vec4<f32> = u_xlat13;
        let x_661 : vec4<f32> = u_xlat9;
        let x_663 : vec3<f32> = (vec3<f32>(x_659.z, x_659.y, x_659.w) / vec3<f32>(x_661.x, x_661.y, x_661.z));
        let x_664 : vec4<f32> = u_xlat11;
        u_xlat11 = vec4<f32>(x_663.x, x_663.y, x_663.z, x_664.w);
        let x_666 : vec4<f32> = u_xlat11;
        let x_668 : vec3<f32> = (vec3<f32>(x_666.x, x_666.y, x_666.z) + vec3<f32>(-2.5f, -0.5f, 1.5f));
        let x_669 : vec4<f32> = u_xlat11;
        u_xlat11 = vec4<f32>(x_668.x, x_668.y, x_668.z, x_669.w);
        let x_671 : vec4<f32> = u_xlat10;
        let x_674 : vec4<f32> = x_362.x_MainLightShadowmapSize;
        let x_676 : vec3<f32> = (vec3<f32>(x_671.y, x_671.x, x_671.z) * vec3<f32>(x_674.x, x_674.x, x_674.x));
        let x_677 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_676.x, x_676.y, x_676.z, x_677.w);
        let x_679 : vec4<f32> = u_xlat11;
        let x_682 : vec4<f32> = x_362.x_MainLightShadowmapSize;
        let x_684 : vec3<f32> = (vec3<f32>(x_679.x, x_679.y, x_679.z) * vec3<f32>(x_682.y, x_682.y, x_682.y));
        let x_685 : vec4<f32> = u_xlat11;
        u_xlat11 = vec4<f32>(x_684.x, x_684.y, x_684.z, x_685.w);
        let x_688 : f32 = u_xlat11.x;
        u_xlat10.w = x_688;
        let x_690 : vec4<f32> = u_xlat3;
        let x_693 : vec4<f32> = x_362.x_MainLightShadowmapSize;
        let x_696 : vec4<f32> = u_xlat10;
        u_xlat12 = ((vec4<f32>(x_690.x, x_690.y, x_690.x, x_690.y) * vec4<f32>(x_693.x, x_693.y, x_693.x, x_693.y)) + vec4<f32>(x_696.y, x_696.w, x_696.x, x_696.w));
        let x_699 : vec4<f32> = u_xlat3;
        let x_702 : vec4<f32> = x_362.x_MainLightShadowmapSize;
        let x_705 : vec4<f32> = u_xlat10;
        u_xlat47 = ((vec2<f32>(x_699.x, x_699.y) * vec2<f32>(x_702.x, x_702.y)) + vec2<f32>(x_705.z, x_705.w));
        let x_709 : f32 = u_xlat10.y;
        u_xlat11.w = x_709;
        let x_711 : vec4<f32> = u_xlat11;
        let x_712 : vec2<f32> = vec2<f32>(x_711.y, x_711.z);
        let x_713 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_713.x, x_712.x, x_713.z, x_712.y);
        let x_715 : vec4<f32> = u_xlat3;
        let x_718 : vec4<f32> = x_362.x_MainLightShadowmapSize;
        let x_721 : vec4<f32> = u_xlat10;
        u_xlat13 = ((vec4<f32>(x_715.x, x_715.y, x_715.x, x_715.y) * vec4<f32>(x_718.x, x_718.y, x_718.x, x_718.y)) + vec4<f32>(x_721.x, x_721.y, x_721.z, x_721.y));
        let x_724 : vec4<f32> = u_xlat3;
        let x_727 : vec4<f32> = x_362.x_MainLightShadowmapSize;
        let x_730 : vec4<f32> = u_xlat11;
        u_xlat11 = ((vec4<f32>(x_724.x, x_724.y, x_724.x, x_724.y) * vec4<f32>(x_727.x, x_727.y, x_727.x, x_727.y)) + vec4<f32>(x_730.w, x_730.y, x_730.w, x_730.z));
        let x_733 : vec4<f32> = u_xlat3;
        let x_736 : vec4<f32> = x_362.x_MainLightShadowmapSize;
        let x_739 : vec4<f32> = u_xlat10;
        u_xlat10 = ((vec4<f32>(x_733.x, x_733.y, x_733.x, x_733.y) * vec4<f32>(x_736.x, x_736.y, x_736.x, x_736.y)) + vec4<f32>(x_739.x, x_739.w, x_739.z, x_739.w));
        let x_743 : vec4<f32> = u_xlat9;
        let x_745 : vec4<f32> = u_xlat14;
        u_xlat15 = (vec4<f32>(x_743.x, x_743.x, x_743.x, x_743.y) * vec4<f32>(x_745.z, x_745.w, x_745.y, x_745.z));
        let x_749 : vec4<f32> = u_xlat9;
        let x_751 : vec4<f32> = u_xlat14;
        u_xlat16 = (vec4<f32>(x_749.y, x_749.y, x_749.z, x_749.z) * x_751);
        let x_755 : f32 = u_xlat9.z;
        let x_757 : f32 = u_xlat14.y;
        u_xlat68 = (x_755 * x_757);
        let x_760 : vec4<f32> = u_xlat12;
        let x_761 : vec2<f32> = vec2<f32>(x_760.x, x_760.y);
        let x_763 : f32 = u_xlat2.z;
        txVec4 = vec3<f32>(x_761.x, x_761.y, x_763);
        let x_770 : vec3<f32> = txVec4;
        let x_772 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_770.xy, x_770.z);
        u_xlat3.x = x_772;
        let x_775 : vec4<f32> = u_xlat12;
        let x_776 : vec2<f32> = vec2<f32>(x_775.z, x_775.w);
        let x_778 : f32 = u_xlat2.z;
        txVec5 = vec3<f32>(x_776.x, x_776.y, x_778);
        let x_786 : vec3<f32> = txVec5;
        let x_788 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_786.xy, x_786.z);
        u_xlat25 = x_788;
        let x_789 : f32 = u_xlat25;
        let x_791 : f32 = u_xlat15.y;
        u_xlat25 = (x_789 * x_791);
        let x_794 : f32 = u_xlat15.x;
        let x_796 : f32 = u_xlat3.x;
        let x_798 : f32 = u_xlat25;
        u_xlat3.x = ((x_794 * x_796) + x_798);
        let x_802 : vec2<f32> = u_xlat47;
        let x_804 : f32 = u_xlat2.z;
        txVec6 = vec3<f32>(x_802.x, x_802.y, x_804);
        let x_811 : vec3<f32> = txVec6;
        let x_813 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_811.xy, x_811.z);
        u_xlat25 = x_813;
        let x_815 : f32 = u_xlat15.z;
        let x_816 : f32 = u_xlat25;
        let x_819 : f32 = u_xlat3.x;
        u_xlat3.x = ((x_815 * x_816) + x_819);
        let x_823 : vec4<f32> = u_xlat11;
        let x_824 : vec2<f32> = vec2<f32>(x_823.x, x_823.y);
        let x_826 : f32 = u_xlat2.z;
        txVec7 = vec3<f32>(x_824.x, x_824.y, x_826);
        let x_833 : vec3<f32> = txVec7;
        let x_835 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_833.xy, x_833.z);
        u_xlat25 = x_835;
        let x_837 : f32 = u_xlat15.w;
        let x_838 : f32 = u_xlat25;
        let x_841 : f32 = u_xlat3.x;
        u_xlat3.x = ((x_837 * x_838) + x_841);
        let x_845 : vec4<f32> = u_xlat13;
        let x_846 : vec2<f32> = vec2<f32>(x_845.x, x_845.y);
        let x_848 : f32 = u_xlat2.z;
        txVec8 = vec3<f32>(x_846.x, x_846.y, x_848);
        let x_855 : vec3<f32> = txVec8;
        let x_857 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_855.xy, x_855.z);
        u_xlat25 = x_857;
        let x_859 : f32 = u_xlat16.x;
        let x_860 : f32 = u_xlat25;
        let x_863 : f32 = u_xlat3.x;
        u_xlat3.x = ((x_859 * x_860) + x_863);
        let x_867 : vec4<f32> = u_xlat13;
        let x_868 : vec2<f32> = vec2<f32>(x_867.z, x_867.w);
        let x_870 : f32 = u_xlat2.z;
        txVec9 = vec3<f32>(x_868.x, x_868.y, x_870);
        let x_877 : vec3<f32> = txVec9;
        let x_879 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_877.xy, x_877.z);
        u_xlat25 = x_879;
        let x_881 : f32 = u_xlat16.y;
        let x_882 : f32 = u_xlat25;
        let x_885 : f32 = u_xlat3.x;
        u_xlat3.x = ((x_881 * x_882) + x_885);
        let x_889 : vec4<f32> = u_xlat11;
        let x_890 : vec2<f32> = vec2<f32>(x_889.z, x_889.w);
        let x_892 : f32 = u_xlat2.z;
        txVec10 = vec3<f32>(x_890.x, x_890.y, x_892);
        let x_899 : vec3<f32> = txVec10;
        let x_901 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_899.xy, x_899.z);
        u_xlat25 = x_901;
        let x_903 : f32 = u_xlat16.z;
        let x_904 : f32 = u_xlat25;
        let x_907 : f32 = u_xlat3.x;
        u_xlat3.x = ((x_903 * x_904) + x_907);
        let x_911 : vec4<f32> = u_xlat10;
        let x_912 : vec2<f32> = vec2<f32>(x_911.x, x_911.y);
        let x_914 : f32 = u_xlat2.z;
        txVec11 = vec3<f32>(x_912.x, x_912.y, x_914);
        let x_921 : vec3<f32> = txVec11;
        let x_923 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_921.xy, x_921.z);
        u_xlat25 = x_923;
        let x_925 : f32 = u_xlat16.w;
        let x_926 : f32 = u_xlat25;
        let x_929 : f32 = u_xlat3.x;
        u_xlat3.x = ((x_925 * x_926) + x_929);
        let x_933 : vec4<f32> = u_xlat10;
        let x_934 : vec2<f32> = vec2<f32>(x_933.z, x_933.w);
        let x_936 : f32 = u_xlat2.z;
        txVec12 = vec3<f32>(x_934.x, x_934.y, x_936);
        let x_943 : vec3<f32> = txVec12;
        let x_945 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_943.xy, x_943.z);
        u_xlat25 = x_945;
        let x_946 : f32 = u_xlat68;
        let x_947 : f32 = u_xlat25;
        let x_950 : f32 = u_xlat3.x;
        u_xlat67 = ((x_946 * x_947) + x_950);
      } else {
        let x_953 : vec3<f32> = u_xlat2;
        let x_956 : vec4<f32> = x_362.x_MainLightShadowmapSize;
        let x_959 : vec2<f32> = ((vec2<f32>(x_953.x, x_953.y) * vec2<f32>(x_956.z, x_956.w)) + vec2<f32>(0.5f, 0.5f));
        let x_960 : vec4<f32> = u_xlat3;
        u_xlat3 = vec4<f32>(x_959.x, x_959.y, x_960.z, x_960.w);
        let x_962 : vec4<f32> = u_xlat3;
        let x_964 : vec2<f32> = floor(vec2<f32>(x_962.x, x_962.y));
        let x_965 : vec4<f32> = u_xlat3;
        u_xlat3 = vec4<f32>(x_964.x, x_964.y, x_965.z, x_965.w);
        let x_967 : vec3<f32> = u_xlat2;
        let x_970 : vec4<f32> = x_362.x_MainLightShadowmapSize;
        let x_973 : vec4<f32> = u_xlat3;
        u_xlat47 = ((vec2<f32>(x_967.x, x_967.y) * vec2<f32>(x_970.z, x_970.w)) + -(vec2<f32>(x_973.x, x_973.y)));
        let x_977 : vec2<f32> = u_xlat47;
        u_xlat9 = (vec4<f32>(x_977.x, x_977.x, x_977.y, x_977.y) + vec4<f32>(0.5f, 1.0f, 0.5f, 1.0f));
        let x_980 : vec4<f32> = u_xlat9;
        let x_982 : vec4<f32> = u_xlat9;
        u_xlat10 = (vec4<f32>(x_980.x, x_980.x, x_980.z, x_980.z) * vec4<f32>(x_982.x, x_982.x, x_982.z, x_982.z));
        let x_985 : vec4<f32> = u_xlat10;
        let x_989 : vec2<f32> = (vec2<f32>(x_985.y, x_985.w) * vec2<f32>(0.040816002f, 0.040816002f));
        let x_990 : vec4<f32> = u_xlat11;
        u_xlat11 = vec4<f32>(x_990.x, x_989.x, x_990.z, x_989.y);
        let x_992 : vec4<f32> = u_xlat10;
        let x_995 : vec2<f32> = u_xlat47;
        let x_997 : vec2<f32> = ((vec2<f32>(x_992.x, x_992.z) * vec2<f32>(0.5f, 0.5f)) + -(x_995));
        let x_998 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_997.x, x_998.y, x_997.y, x_998.w);
        let x_1000 : vec2<f32> = u_xlat47;
        let x_1002 : vec2<f32> = (-(x_1000) + vec2<f32>(1.0f, 1.0f));
        let x_1003 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_1002.x, x_1002.y, x_1003.z, x_1003.w);
        let x_1005 : vec2<f32> = u_xlat47;
        u_xlat54 = min(x_1005, vec2<f32>(0.0f, 0.0f));
        let x_1007 : vec2<f32> = u_xlat54;
        let x_1009 : vec2<f32> = u_xlat54;
        let x_1011 : vec4<f32> = u_xlat10;
        let x_1013 : vec2<f32> = ((-(x_1007) * x_1009) + vec2<f32>(x_1011.x, x_1011.y));
        let x_1014 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_1013.x, x_1013.y, x_1014.z, x_1014.w);
        let x_1016 : vec2<f32> = u_xlat47;
        u_xlat54 = max(x_1016, vec2<f32>(0.0f, 0.0f));
        let x_1019 : vec2<f32> = u_xlat54;
        let x_1021 : vec2<f32> = u_xlat54;
        let x_1023 : vec4<f32> = u_xlat9;
        let x_1025 : vec2<f32> = ((-(x_1019) * x_1021) + vec2<f32>(x_1023.y, x_1023.w));
        let x_1026 : vec3<f32> = u_xlat31;
        u_xlat31 = vec3<f32>(x_1025.x, x_1026.y, x_1025.y);
        let x_1028 : vec4<f32> = u_xlat10;
        let x_1031 : vec2<f32> = (vec2<f32>(x_1028.x, x_1028.y) + vec2<f32>(2.0f, 2.0f));
        let x_1032 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_1031.x, x_1031.y, x_1032.z, x_1032.w);
        let x_1034 : vec3<f32> = u_xlat31;
        let x_1036 : vec2<f32> = (vec2<f32>(x_1034.x, x_1034.z) + vec2<f32>(2.0f, 2.0f));
        let x_1037 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_1037.x, x_1036.x, x_1037.z, x_1036.y);
        let x_1040 : f32 = u_xlat9.y;
        u_xlat12.z = (x_1040 * 0.081632003f);
        let x_1044 : vec4<f32> = u_xlat9;
        let x_1047 : vec3<f32> = (vec3<f32>(x_1044.z, x_1044.x, x_1044.w) * vec3<f32>(0.081632003f, 0.081632003f, 0.081632003f));
        let x_1048 : vec4<f32> = u_xlat13;
        u_xlat13 = vec4<f32>(x_1047.x, x_1047.y, x_1047.z, x_1048.w);
        let x_1050 : vec4<f32> = u_xlat10;
        let x_1053 : vec2<f32> = (vec2<f32>(x_1050.x, x_1050.y) * vec2<f32>(0.081632003f, 0.081632003f));
        let x_1054 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_1053.x, x_1053.y, x_1054.z, x_1054.w);
        let x_1057 : f32 = u_xlat13.y;
        u_xlat12.x = x_1057;
        let x_1059 : vec2<f32> = u_xlat47;
        let x_1066 : vec2<f32> = ((vec2<f32>(x_1059.x, x_1059.x) * vec2<f32>(-0.081632003f, 0.081632003f)) + vec2<f32>(0.163264006f, 0.081632003f));
        let x_1067 : vec4<f32> = u_xlat12;
        u_xlat12 = vec4<f32>(x_1067.x, x_1066.x, x_1067.z, x_1066.y);
        let x_1069 : vec2<f32> = u_xlat47;
        let x_1073 : vec2<f32> = ((vec2<f32>(x_1069.x, x_1069.x) * vec2<f32>(-0.081632003f, 0.081632003f)) + vec2<f32>(0.081632003f, 0.163264006f));
        let x_1074 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_1073.x, x_1074.y, x_1073.y, x_1074.w);
        let x_1077 : f32 = u_xlat9.x;
        u_xlat10.y = x_1077;
        let x_1080 : f32 = u_xlat11.y;
        u_xlat10.w = x_1080;
        let x_1082 : vec4<f32> = u_xlat10;
        let x_1083 : vec4<f32> = u_xlat12;
        u_xlat12 = (x_1082 + x_1083);
        let x_1085 : vec2<f32> = u_xlat47;
        let x_1088 : vec2<f32> = ((vec2<f32>(x_1085.y, x_1085.y) * vec2<f32>(-0.081632003f, 0.081632003f)) + vec2<f32>(0.163264006f, 0.081632003f));
        let x_1089 : vec4<f32> = u_xlat13;
        u_xlat13 = vec4<f32>(x_1089.x, x_1088.x, x_1089.z, x_1088.y);
        let x_1091 : vec2<f32> = u_xlat47;
        let x_1094 : vec2<f32> = ((vec2<f32>(x_1091.y, x_1091.y) * vec2<f32>(-0.081632003f, 0.081632003f)) + vec2<f32>(0.081632003f, 0.163264006f));
        let x_1095 : vec4<f32> = u_xlat11;
        u_xlat11 = vec4<f32>(x_1094.x, x_1095.y, x_1094.y, x_1095.w);
        let x_1098 : f32 = u_xlat9.y;
        u_xlat11.y = x_1098;
        let x_1100 : vec4<f32> = u_xlat11;
        let x_1101 : vec4<f32> = u_xlat13;
        u_xlat9 = (x_1100 + x_1101);
        let x_1103 : vec4<f32> = u_xlat10;
        let x_1104 : vec4<f32> = u_xlat12;
        u_xlat10 = (x_1103 / x_1104);
        let x_1106 : vec4<f32> = u_xlat10;
        u_xlat10 = (x_1106 + vec4<f32>(-3.5f, -1.5f, 0.5f, 2.5f));
        let x_1112 : vec4<f32> = u_xlat11;
        let x_1113 : vec4<f32> = u_xlat9;
        u_xlat11 = (x_1112 / x_1113);
        let x_1115 : vec4<f32> = u_xlat11;
        u_xlat11 = (x_1115 + vec4<f32>(-3.5f, -1.5f, 0.5f, 2.5f));
        let x_1117 : vec4<f32> = u_xlat10;
        let x_1120 : vec4<f32> = x_362.x_MainLightShadowmapSize;
        u_xlat10 = (vec4<f32>(x_1117.w, x_1117.x, x_1117.y, x_1117.z) * vec4<f32>(x_1120.x, x_1120.x, x_1120.x, x_1120.x));
        let x_1123 : vec4<f32> = u_xlat11;
        let x_1126 : vec4<f32> = x_362.x_MainLightShadowmapSize;
        u_xlat11 = (vec4<f32>(x_1123.x, x_1123.w, x_1123.y, x_1123.z) * vec4<f32>(x_1126.y, x_1126.y, x_1126.y, x_1126.y));
        let x_1129 : vec4<f32> = u_xlat10;
        let x_1130 : vec3<f32> = vec3<f32>(x_1129.y, x_1129.z, x_1129.w);
        let x_1131 : vec4<f32> = u_xlat13;
        u_xlat13 = vec4<f32>(x_1130.x, x_1131.y, x_1130.y, x_1130.z);
        let x_1134 : f32 = u_xlat11.x;
        u_xlat13.y = x_1134;
        let x_1136 : vec4<f32> = u_xlat3;
        let x_1139 : vec4<f32> = x_362.x_MainLightShadowmapSize;
        let x_1142 : vec4<f32> = u_xlat13;
        u_xlat14 = ((vec4<f32>(x_1136.x, x_1136.y, x_1136.x, x_1136.y) * vec4<f32>(x_1139.x, x_1139.y, x_1139.x, x_1139.y)) + vec4<f32>(x_1142.x, x_1142.y, x_1142.z, x_1142.y));
        let x_1145 : vec4<f32> = u_xlat3;
        let x_1148 : vec4<f32> = x_362.x_MainLightShadowmapSize;
        let x_1151 : vec4<f32> = u_xlat13;
        u_xlat47 = ((vec2<f32>(x_1145.x, x_1145.y) * vec2<f32>(x_1148.x, x_1148.y)) + vec2<f32>(x_1151.w, x_1151.y));
        let x_1155 : f32 = u_xlat13.y;
        u_xlat10.y = x_1155;
        let x_1158 : f32 = u_xlat11.z;
        u_xlat13.y = x_1158;
        let x_1160 : vec4<f32> = u_xlat3;
        let x_1163 : vec4<f32> = x_362.x_MainLightShadowmapSize;
        let x_1166 : vec4<f32> = u_xlat13;
        u_xlat15 = ((vec4<f32>(x_1160.x, x_1160.y, x_1160.x, x_1160.y) * vec4<f32>(x_1163.x, x_1163.y, x_1163.x, x_1163.y)) + vec4<f32>(x_1166.x, x_1166.y, x_1166.z, x_1166.y));
        let x_1169 : vec4<f32> = u_xlat3;
        let x_1172 : vec4<f32> = x_362.x_MainLightShadowmapSize;
        let x_1175 : vec4<f32> = u_xlat13;
        let x_1177 : vec2<f32> = ((vec2<f32>(x_1169.x, x_1169.y) * vec2<f32>(x_1172.x, x_1172.y)) + vec2<f32>(x_1175.w, x_1175.y));
        let x_1178 : vec4<f32> = u_xlat16;
        u_xlat16 = vec4<f32>(x_1177.x, x_1177.y, x_1178.z, x_1178.w);
        let x_1181 : f32 = u_xlat13.y;
        u_xlat10.z = x_1181;
        let x_1184 : vec4<f32> = u_xlat3;
        let x_1187 : vec4<f32> = x_362.x_MainLightShadowmapSize;
        let x_1190 : vec4<f32> = u_xlat10;
        u_xlat17 = ((vec4<f32>(x_1184.x, x_1184.y, x_1184.x, x_1184.y) * vec4<f32>(x_1187.x, x_1187.y, x_1187.x, x_1187.y)) + vec4<f32>(x_1190.x, x_1190.y, x_1190.x, x_1190.z));
        let x_1194 : f32 = u_xlat11.w;
        u_xlat13.y = x_1194;
        let x_1197 : vec4<f32> = u_xlat3;
        let x_1200 : vec4<f32> = x_362.x_MainLightShadowmapSize;
        let x_1203 : vec4<f32> = u_xlat13;
        u_xlat18 = ((vec4<f32>(x_1197.x, x_1197.y, x_1197.x, x_1197.y) * vec4<f32>(x_1200.x, x_1200.y, x_1200.x, x_1200.y)) + vec4<f32>(x_1203.x, x_1203.y, x_1203.z, x_1203.y));
        let x_1207 : vec4<f32> = u_xlat3;
        let x_1210 : vec4<f32> = x_362.x_MainLightShadowmapSize;
        let x_1213 : vec4<f32> = u_xlat13;
        u_xlat32 = ((vec2<f32>(x_1207.x, x_1207.y) * vec2<f32>(x_1210.x, x_1210.y)) + vec2<f32>(x_1213.w, x_1213.y));
        let x_1217 : f32 = u_xlat13.y;
        u_xlat10.w = x_1217;
        let x_1220 : vec4<f32> = u_xlat3;
        let x_1223 : vec4<f32> = x_362.x_MainLightShadowmapSize;
        let x_1226 : vec4<f32> = u_xlat10;
        u_xlat60 = ((vec2<f32>(x_1220.x, x_1220.y) * vec2<f32>(x_1223.x, x_1223.y)) + vec2<f32>(x_1226.x, x_1226.w));
        let x_1229 : vec4<f32> = u_xlat13;
        let x_1230 : vec3<f32> = vec3<f32>(x_1229.x, x_1229.z, x_1229.w);
        let x_1231 : vec4<f32> = u_xlat11;
        u_xlat11 = vec4<f32>(x_1230.x, x_1231.y, x_1230.y, x_1230.z);
        let x_1233 : vec4<f32> = u_xlat3;
        let x_1236 : vec4<f32> = x_362.x_MainLightShadowmapSize;
        let x_1239 : vec4<f32> = u_xlat11;
        u_xlat13 = ((vec4<f32>(x_1233.x, x_1233.y, x_1233.x, x_1233.y) * vec4<f32>(x_1236.x, x_1236.y, x_1236.x, x_1236.y)) + vec4<f32>(x_1239.x, x_1239.y, x_1239.z, x_1239.y));
        let x_1243 : vec4<f32> = u_xlat3;
        let x_1246 : vec4<f32> = x_362.x_MainLightShadowmapSize;
        let x_1249 : vec4<f32> = u_xlat11;
        u_xlat55 = ((vec2<f32>(x_1243.x, x_1243.y) * vec2<f32>(x_1246.x, x_1246.y)) + vec2<f32>(x_1249.w, x_1249.y));
        let x_1253 : f32 = u_xlat10.x;
        u_xlat11.x = x_1253;
        let x_1255 : vec4<f32> = u_xlat3;
        let x_1258 : vec4<f32> = x_362.x_MainLightShadowmapSize;
        let x_1261 : vec4<f32> = u_xlat11;
        let x_1263 : vec2<f32> = ((vec2<f32>(x_1255.x, x_1255.y) * vec2<f32>(x_1258.x, x_1258.y)) + vec2<f32>(x_1261.x, x_1261.y));
        let x_1264 : vec4<f32> = u_xlat3;
        u_xlat3 = vec4<f32>(x_1263.x, x_1263.y, x_1264.z, x_1264.w);
        let x_1267 : vec4<f32> = u_xlat9;
        let x_1269 : vec4<f32> = u_xlat12;
        u_xlat19 = (vec4<f32>(x_1267.x, x_1267.x, x_1267.x, x_1267.x) * x_1269);
        let x_1272 : vec4<f32> = u_xlat9;
        let x_1274 : vec4<f32> = u_xlat12;
        u_xlat20 = (vec4<f32>(x_1272.y, x_1272.y, x_1272.y, x_1272.y) * x_1274);
        let x_1277 : vec4<f32> = u_xlat9;
        let x_1279 : vec4<f32> = u_xlat12;
        u_xlat21 = (vec4<f32>(x_1277.z, x_1277.z, x_1277.z, x_1277.z) * x_1279);
        let x_1281 : vec4<f32> = u_xlat9;
        let x_1283 : vec4<f32> = u_xlat12;
        u_xlat9 = (vec4<f32>(x_1281.w, x_1281.w, x_1281.w, x_1281.w) * x_1283);
        let x_1286 : vec4<f32> = u_xlat14;
        let x_1287 : vec2<f32> = vec2<f32>(x_1286.x, x_1286.y);
        let x_1289 : f32 = u_xlat2.z;
        txVec13 = vec3<f32>(x_1287.x, x_1287.y, x_1289);
        let x_1296 : vec3<f32> = txVec13;
        let x_1298 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1296.xy, x_1296.z);
        u_xlat68 = x_1298;
        let x_1300 : vec4<f32> = u_xlat14;
        let x_1301 : vec2<f32> = vec2<f32>(x_1300.z, x_1300.w);
        let x_1303 : f32 = u_xlat2.z;
        txVec14 = vec3<f32>(x_1301.x, x_1301.y, x_1303);
        let x_1311 : vec3<f32> = txVec14;
        let x_1313 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1311.xy, x_1311.z);
        u_xlat70 = x_1313;
        let x_1314 : f32 = u_xlat70;
        let x_1316 : f32 = u_xlat19.y;
        u_xlat70 = (x_1314 * x_1316);
        let x_1319 : f32 = u_xlat19.x;
        let x_1320 : f32 = u_xlat68;
        let x_1322 : f32 = u_xlat70;
        u_xlat68 = ((x_1319 * x_1320) + x_1322);
        let x_1325 : vec2<f32> = u_xlat47;
        let x_1327 : f32 = u_xlat2.z;
        txVec15 = vec3<f32>(x_1325.x, x_1325.y, x_1327);
        let x_1334 : vec3<f32> = txVec15;
        let x_1336 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1334.xy, x_1334.z);
        u_xlat47.x = x_1336;
        let x_1339 : f32 = u_xlat19.z;
        let x_1341 : f32 = u_xlat47.x;
        let x_1343 : f32 = u_xlat68;
        u_xlat68 = ((x_1339 * x_1341) + x_1343);
        let x_1346 : vec4<f32> = u_xlat17;
        let x_1347 : vec2<f32> = vec2<f32>(x_1346.x, x_1346.y);
        let x_1349 : f32 = u_xlat2.z;
        txVec16 = vec3<f32>(x_1347.x, x_1347.y, x_1349);
        let x_1356 : vec3<f32> = txVec16;
        let x_1358 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1356.xy, x_1356.z);
        u_xlat47.x = x_1358;
        let x_1361 : f32 = u_xlat19.w;
        let x_1363 : f32 = u_xlat47.x;
        let x_1365 : f32 = u_xlat68;
        u_xlat68 = ((x_1361 * x_1363) + x_1365);
        let x_1368 : vec4<f32> = u_xlat15;
        let x_1369 : vec2<f32> = vec2<f32>(x_1368.x, x_1368.y);
        let x_1371 : f32 = u_xlat2.z;
        txVec17 = vec3<f32>(x_1369.x, x_1369.y, x_1371);
        let x_1378 : vec3<f32> = txVec17;
        let x_1380 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1378.xy, x_1378.z);
        u_xlat47.x = x_1380;
        let x_1383 : f32 = u_xlat20.x;
        let x_1385 : f32 = u_xlat47.x;
        let x_1387 : f32 = u_xlat68;
        u_xlat68 = ((x_1383 * x_1385) + x_1387);
        let x_1390 : vec4<f32> = u_xlat15;
        let x_1391 : vec2<f32> = vec2<f32>(x_1390.z, x_1390.w);
        let x_1393 : f32 = u_xlat2.z;
        txVec18 = vec3<f32>(x_1391.x, x_1391.y, x_1393);
        let x_1400 : vec3<f32> = txVec18;
        let x_1402 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1400.xy, x_1400.z);
        u_xlat47.x = x_1402;
        let x_1405 : f32 = u_xlat20.y;
        let x_1407 : f32 = u_xlat47.x;
        let x_1409 : f32 = u_xlat68;
        u_xlat68 = ((x_1405 * x_1407) + x_1409);
        let x_1412 : vec4<f32> = u_xlat16;
        let x_1413 : vec2<f32> = vec2<f32>(x_1412.x, x_1412.y);
        let x_1415 : f32 = u_xlat2.z;
        txVec19 = vec3<f32>(x_1413.x, x_1413.y, x_1415);
        let x_1422 : vec3<f32> = txVec19;
        let x_1424 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1422.xy, x_1422.z);
        u_xlat47.x = x_1424;
        let x_1427 : f32 = u_xlat20.z;
        let x_1429 : f32 = u_xlat47.x;
        let x_1431 : f32 = u_xlat68;
        u_xlat68 = ((x_1427 * x_1429) + x_1431);
        let x_1434 : vec4<f32> = u_xlat17;
        let x_1435 : vec2<f32> = vec2<f32>(x_1434.z, x_1434.w);
        let x_1437 : f32 = u_xlat2.z;
        txVec20 = vec3<f32>(x_1435.x, x_1435.y, x_1437);
        let x_1444 : vec3<f32> = txVec20;
        let x_1446 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1444.xy, x_1444.z);
        u_xlat47.x = x_1446;
        let x_1449 : f32 = u_xlat20.w;
        let x_1451 : f32 = u_xlat47.x;
        let x_1453 : f32 = u_xlat68;
        u_xlat68 = ((x_1449 * x_1451) + x_1453);
        let x_1456 : vec4<f32> = u_xlat18;
        let x_1457 : vec2<f32> = vec2<f32>(x_1456.x, x_1456.y);
        let x_1459 : f32 = u_xlat2.z;
        txVec21 = vec3<f32>(x_1457.x, x_1457.y, x_1459);
        let x_1466 : vec3<f32> = txVec21;
        let x_1468 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1466.xy, x_1466.z);
        u_xlat47.x = x_1468;
        let x_1471 : f32 = u_xlat21.x;
        let x_1473 : f32 = u_xlat47.x;
        let x_1475 : f32 = u_xlat68;
        u_xlat68 = ((x_1471 * x_1473) + x_1475);
        let x_1478 : vec4<f32> = u_xlat18;
        let x_1479 : vec2<f32> = vec2<f32>(x_1478.z, x_1478.w);
        let x_1481 : f32 = u_xlat2.z;
        txVec22 = vec3<f32>(x_1479.x, x_1479.y, x_1481);
        let x_1488 : vec3<f32> = txVec22;
        let x_1490 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1488.xy, x_1488.z);
        u_xlat47.x = x_1490;
        let x_1493 : f32 = u_xlat21.y;
        let x_1495 : f32 = u_xlat47.x;
        let x_1497 : f32 = u_xlat68;
        u_xlat68 = ((x_1493 * x_1495) + x_1497);
        let x_1500 : vec2<f32> = u_xlat32;
        let x_1502 : f32 = u_xlat2.z;
        txVec23 = vec3<f32>(x_1500.x, x_1500.y, x_1502);
        let x_1509 : vec3<f32> = txVec23;
        let x_1511 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1509.xy, x_1509.z);
        u_xlat47.x = x_1511;
        let x_1514 : f32 = u_xlat21.z;
        let x_1516 : f32 = u_xlat47.x;
        let x_1518 : f32 = u_xlat68;
        u_xlat68 = ((x_1514 * x_1516) + x_1518);
        let x_1521 : vec2<f32> = u_xlat60;
        let x_1523 : f32 = u_xlat2.z;
        txVec24 = vec3<f32>(x_1521.x, x_1521.y, x_1523);
        let x_1530 : vec3<f32> = txVec24;
        let x_1532 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1530.xy, x_1530.z);
        u_xlat47.x = x_1532;
        let x_1535 : f32 = u_xlat21.w;
        let x_1537 : f32 = u_xlat47.x;
        let x_1539 : f32 = u_xlat68;
        u_xlat68 = ((x_1535 * x_1537) + x_1539);
        let x_1542 : vec4<f32> = u_xlat13;
        let x_1543 : vec2<f32> = vec2<f32>(x_1542.x, x_1542.y);
        let x_1545 : f32 = u_xlat2.z;
        txVec25 = vec3<f32>(x_1543.x, x_1543.y, x_1545);
        let x_1552 : vec3<f32> = txVec25;
        let x_1554 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1552.xy, x_1552.z);
        u_xlat47.x = x_1554;
        let x_1557 : f32 = u_xlat9.x;
        let x_1559 : f32 = u_xlat47.x;
        let x_1561 : f32 = u_xlat68;
        u_xlat68 = ((x_1557 * x_1559) + x_1561);
        let x_1564 : vec4<f32> = u_xlat13;
        let x_1565 : vec2<f32> = vec2<f32>(x_1564.z, x_1564.w);
        let x_1567 : f32 = u_xlat2.z;
        txVec26 = vec3<f32>(x_1565.x, x_1565.y, x_1567);
        let x_1574 : vec3<f32> = txVec26;
        let x_1576 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1574.xy, x_1574.z);
        u_xlat47.x = x_1576;
        let x_1579 : f32 = u_xlat9.y;
        let x_1581 : f32 = u_xlat47.x;
        let x_1583 : f32 = u_xlat68;
        u_xlat68 = ((x_1579 * x_1581) + x_1583);
        let x_1586 : vec2<f32> = u_xlat55;
        let x_1588 : f32 = u_xlat2.z;
        txVec27 = vec3<f32>(x_1586.x, x_1586.y, x_1588);
        let x_1595 : vec3<f32> = txVec27;
        let x_1597 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1595.xy, x_1595.z);
        u_xlat47.x = x_1597;
        let x_1600 : f32 = u_xlat9.z;
        let x_1602 : f32 = u_xlat47.x;
        let x_1604 : f32 = u_xlat68;
        u_xlat68 = ((x_1600 * x_1602) + x_1604);
        let x_1607 : vec4<f32> = u_xlat3;
        let x_1608 : vec2<f32> = vec2<f32>(x_1607.x, x_1607.y);
        let x_1610 : f32 = u_xlat2.z;
        txVec28 = vec3<f32>(x_1608.x, x_1608.y, x_1610);
        let x_1617 : vec3<f32> = txVec28;
        let x_1619 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1617.xy, x_1617.z);
        u_xlat3.x = x_1619;
        let x_1622 : f32 = u_xlat9.w;
        let x_1624 : f32 = u_xlat3.x;
        let x_1626 : f32 = u_xlat68;
        u_xlat67 = ((x_1622 * x_1624) + x_1626);
      }
    }
  } else {
    let x_1630 : vec3<f32> = u_xlat2;
    let x_1631 : vec2<f32> = vec2<f32>(x_1630.x, x_1630.y);
    let x_1633 : f32 = u_xlat2.z;
    txVec29 = vec3<f32>(x_1631.x, x_1631.y, x_1633);
    let x_1640 : vec3<f32> = txVec29;
    let x_1642 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1640.xy, x_1640.z);
    u_xlat67 = x_1642;
  }
  let x_1644 : f32 = x_362.x_MainLightShadowParams.x;
  u_xlat2.x = (-(x_1644) + 1.0f);
  let x_1648 : f32 = u_xlat67;
  let x_1650 : f32 = x_362.x_MainLightShadowParams.x;
  let x_1653 : f32 = u_xlat2.x;
  u_xlat67 = ((x_1648 * x_1650) + x_1653);
  let x_1657 : f32 = u_xlat2.z;
  u_xlatb24 = (0.0f >= x_1657);
  let x_1661 : f32 = u_xlat2.z;
  u_xlatb46 = (x_1661 >= 1.0f);
  let x_1663 : bool = u_xlatb46;
  let x_1664 : bool = u_xlatb24;
  u_xlatb24 = (x_1663 | x_1664);
  let x_1666 : bool = u_xlatb24;
  let x_1667 : f32 = u_xlat67;
  u_xlat67 = select(x_1667, 1.0f, x_1666);
  let x_1669 : vec3<f32> = u_xlat1;
  let x_1671 : vec4<f32> = x_158.x_MainLightPosition;
  u_xlat1.x = dot(x_1669, -(vec3<f32>(x_1671.x, x_1671.y, x_1671.z)));
  let x_1677 : f32 = u_xlat1.x;
  u_xlat1.x = clamp(x_1677, 0.0f, 1.0f);
  let x_1681 : f32 = u_xlat67;
  let x_1685 : vec4<f32> = x_158.x_MainLightColor;
  u_xlat23 = (vec3<f32>(x_1681, x_1681, x_1681) * vec3<f32>(x_1685.x, x_1685.y, x_1685.z));
  let x_1688 : vec3<f32> = u_xlat23;
  let x_1689 : vec3<f32> = u_xlat1;
  u_xlat1 = (x_1688 * vec3<f32>(x_1689.x, x_1689.x, x_1689.x));
  let x_1692 : vec3<f32> = u_xlat1;
  let x_1693 : vec4<f32> = u_xlat6;
  u_xlat1 = (x_1692 * vec3<f32>(x_1693.x, x_1693.y, x_1693.z));
  let x_1697 : f32 = x_95.unity_LODFade.x;
  u_xlatb67 = (x_1697 < 0.0f);
  let x_1701 : f32 = x_95.unity_LODFade.x;
  u_xlat24 = (x_1701 + 1.0f);
  let x_1703 : bool = u_xlatb67;
  if (x_1703) {
    let x_1707 : f32 = u_xlat24;
    x_1704 = x_1707;
  } else {
    let x_1710 : f32 = x_95.unity_LODFade.x;
    x_1704 = x_1710;
  }
  let x_1711 : f32 = x_1704;
  u_xlat67 = x_1711;
  let x_1712 : f32 = u_xlat67;
  u_xlatb24 = (0.5f >= x_1712);
  let x_1714 : vec3<f32> = u_xlat5;
  let x_1718 : vec4<f32> = x_158.x_ScreenParams;
  let x_1720 : vec3<f32> = (abs(x_1714) * vec3<f32>(x_1718.x, x_1718.y, x_1718.x));
  let x_1721 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_1720.x, x_1720.y, x_1720.z, x_1721.w);
  let x_1726 : vec4<f32> = u_xlat3;
  u_xlatu3 = vec3<u32>(vec3<f32>(x_1726.x, x_1726.y, x_1726.z));
  let x_1731 : u32 = u_xlatu3.z;
  u_xlatu46 = (x_1731 * 1025u);
  let x_1735 : u32 = u_xlatu46;
  u_xlatu68 = (x_1735 >> 6u);
  let x_1739 : u32 = u_xlatu68;
  let x_1740 : u32 = u_xlatu46;
  u_xlati46 = bitcast<i32>((x_1739 ^ x_1740));
  let x_1743 : i32 = u_xlati46;
  u_xlatu46 = (bitcast<u32>(x_1743) * 9u);
  let x_1747 : u32 = u_xlatu46;
  u_xlatu68 = (x_1747 >> 11u);
  let x_1750 : u32 = u_xlatu68;
  let x_1751 : u32 = u_xlatu46;
  u_xlati46 = bitcast<i32>((x_1750 ^ x_1751));
  let x_1754 : i32 = u_xlati46;
  u_xlati46 = (x_1754 * 32769i);
  let x_1757 : i32 = u_xlati46;
  let x_1760 : u32 = u_xlatu3.y;
  u_xlati46 = bitcast<i32>((bitcast<u32>(x_1757) ^ x_1760));
  let x_1763 : i32 = u_xlati46;
  u_xlatu46 = (bitcast<u32>(x_1763) * 1025u);
  let x_1766 : u32 = u_xlatu46;
  u_xlatu68 = (x_1766 >> 6u);
  let x_1768 : u32 = u_xlatu68;
  let x_1769 : u32 = u_xlatu46;
  u_xlati46 = bitcast<i32>((x_1768 ^ x_1769));
  let x_1772 : i32 = u_xlati46;
  u_xlatu46 = (bitcast<u32>(x_1772) * 9u);
  let x_1775 : u32 = u_xlatu46;
  u_xlatu68 = (x_1775 >> 11u);
  let x_1777 : u32 = u_xlatu68;
  let x_1778 : u32 = u_xlatu46;
  u_xlati46 = bitcast<i32>((x_1777 ^ x_1778));
  let x_1781 : i32 = u_xlati46;
  u_xlati46 = (x_1781 * 32769i);
  let x_1783 : i32 = u_xlati46;
  let x_1786 : u32 = u_xlatu3.x;
  u_xlati46 = bitcast<i32>((bitcast<u32>(x_1783) ^ x_1786));
  let x_1789 : i32 = u_xlati46;
  u_xlatu46 = (bitcast<u32>(x_1789) * 1025u);
  let x_1792 : u32 = u_xlatu46;
  u_xlatu68 = (x_1792 >> 6u);
  let x_1794 : u32 = u_xlatu68;
  let x_1795 : u32 = u_xlatu46;
  u_xlati46 = bitcast<i32>((x_1794 ^ x_1795));
  let x_1798 : i32 = u_xlati46;
  u_xlatu46 = (bitcast<u32>(x_1798) * 9u);
  let x_1801 : u32 = u_xlatu46;
  u_xlatu68 = (x_1801 >> 11u);
  let x_1803 : u32 = u_xlatu68;
  let x_1804 : u32 = u_xlatu46;
  u_xlati46 = bitcast<i32>((x_1803 ^ x_1804));
  let x_1807 : i32 = u_xlati46;
  u_xlati46 = (x_1807 * 32769i);
  param = 1065353216i;
  let x_1814 : i32 = u_xlati46;
  param_1 = x_1814;
  param_2 = 0i;
  param_3 = 23i;
  let x_1817 : i32 = int_bitfieldInsert_i1_i1_i1_i1_(&(param), &(param_1), &(param_2), &(param_3));
  u_xlat46 = bitcast<f32>(x_1817);
  let x_1819 : f32 = u_xlat46;
  u_xlat46 = (x_1819 + -1.0f);
  let x_1821 : f32 = u_xlat46;
  u_xlat68 = (-(x_1821) + 1.0f);
  let x_1824 : bool = u_xlatb24;
  let x_1825 : f32 = u_xlat46;
  let x_1826 : f32 = u_xlat68;
  u_xlat24 = select(x_1826, x_1825, x_1824);
  let x_1828 : f32 = u_xlat67;
  let x_1830 : f32 = u_xlat24;
  u_xlat67 = ((x_1828 * 2.0f) + -(x_1830));
  let x_1833 : f32 = u_xlat67;
  let x_1835 : f32 = u_xlat6.w;
  u_xlat24 = (x_1833 * x_1835);
  let x_1837 : f32 = u_xlat24;
  u_xlatb46 = (x_1837 >= 0.400000006f);
  let x_1840 : bool = u_xlatb46;
  let x_1841 : f32 = u_xlat24;
  u_xlat46 = select(0.0f, x_1841, x_1840);
  let x_1844 : f32 = u_xlat6.w;
  let x_1845 : f32 = u_xlat67;
  u_xlat67 = ((x_1844 * x_1845) + -0.400000006f);
  let x_1849 : f32 = u_xlat24;
  u_xlat68 = dpdxCoarse(x_1849);
  let x_1851 : f32 = u_xlat24;
  u_xlat24 = dpdyCoarse(x_1851);
  let x_1853 : f32 = u_xlat24;
  let x_1855 : f32 = u_xlat68;
  u_xlat24 = (abs(x_1853) + abs(x_1855));
  let x_1858 : f32 = u_xlat24;
  u_xlat24 = max(x_1858, 0.0001f);
  let x_1861 : f32 = u_xlat67;
  let x_1862 : f32 = u_xlat24;
  u_xlat67 = (x_1861 / x_1862);
  let x_1864 : f32 = u_xlat67;
  u_xlat67 = (x_1864 + 0.5f);
  let x_1866 : f32 = u_xlat67;
  u_xlat67 = clamp(x_1866, 0.0f, 1.0f);
  let x_1869 : f32 = x_158.x_AlphaToMaskAvailable;
  u_xlatb24 = !((x_1869 == 0.0f));
  let x_1871 : bool = u_xlatb24;
  let x_1872 : f32 = u_xlat67;
  let x_1873 : f32 = u_xlat46;
  u_xlat67 = select(x_1873, x_1872, x_1871);
  let x_1875 : f32 = u_xlat67;
  u_xlat46 = (x_1875 + -0.0001f);
  let x_1878 : f32 = u_xlat46;
  u_xlatb46 = (x_1878 < 0.0f);
  let x_1880 : bool = u_xlatb46;
  if (((select(0i, 1i, x_1880) * -1i) != 0i)) {
    discard;
  }
  let x_1888 : vec3<f32> = u_xlat22;
  let x_1889 : vec3<f32> = u_xlat30;
  u_xlat22 = (x_1888 * vec3<f32>(x_1889.y, x_1889.y, x_1889.y));
  let x_1892 : vec3<f32> = u_xlat30;
  let x_1894 : vec4<f32> = vs_INTERP2;
  let x_1897 : vec3<f32> = u_xlat22;
  u_xlat22 = ((vec3<f32>(x_1892.x, x_1892.x, x_1892.x) * vec3<f32>(x_1894.x, x_1894.y, x_1894.z)) + x_1897);
  let x_1899 : vec3<f32> = u_xlat30;
  let x_1901 : vec3<f32> = vs_INTERP1;
  let x_1903 : vec3<f32> = u_xlat22;
  u_xlat22 = ((vec3<f32>(x_1899.z, x_1899.z, x_1899.z) * x_1901) + x_1903);
  let x_1905 : vec3<f32> = u_xlat22;
  let x_1906 : vec3<f32> = u_xlat22;
  u_xlat46 = dot(x_1905, x_1906);
  let x_1908 : f32 = u_xlat46;
  u_xlat46 = inverseSqrt(x_1908);
  let x_1910 : vec3<f32> = u_xlat22;
  let x_1911 : f32 = u_xlat46;
  u_xlat22 = (x_1910 * vec3<f32>(x_1911, x_1911, x_1911));
  let x_1915 : f32 = vs_INTERP0.y;
  let x_1917 : f32 = x_158.unity_MatrixV[1i].z;
  u_xlat46 = (x_1915 * x_1917);
  let x_1920 : f32 = x_158.unity_MatrixV[0i].z;
  let x_1922 : f32 = vs_INTERP0.x;
  let x_1924 : f32 = u_xlat46;
  u_xlat46 = ((x_1920 * x_1922) + x_1924);
  let x_1927 : f32 = x_158.unity_MatrixV[2i].z;
  let x_1929 : f32 = vs_INTERP0.z;
  let x_1931 : f32 = u_xlat46;
  u_xlat46 = ((x_1927 * x_1929) + x_1931);
  let x_1933 : f32 = u_xlat46;
  let x_1935 : f32 = x_158.unity_MatrixV[3i].z;
  u_xlat46 = (x_1933 + x_1935);
  let x_1937 : f32 = u_xlat46;
  let x_1941 : f32 = x_158.x_ProjectionParams.y;
  u_xlat46 = (-(x_1937) + -(x_1941));
  let x_1944 : f32 = u_xlat46;
  u_xlat46 = max(x_1944, 0.0f);
  let x_1946 : f32 = u_xlat46;
  let x_1949 : f32 = x_158.unity_FogParams.x;
  u_xlat46 = (x_1946 * x_1949);
  let x_1958 : vec2<f32> = vs_INTERP5;
  let x_1960 : f32 = x_158.x_GlobalMipBias.x;
  let x_1961 : vec4<f32> = textureSampleBias(unity_Lightmap, samplerunity_Lightmap, x_1958, x_1960);
  let x_1962 : vec3<f32> = vec3<f32>(x_1961.x, x_1961.y, x_1961.z);
  let x_1963 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_1962.x, x_1962.y, x_1962.z, x_1963.w);
  let x_1966 : vec4<f32> = x_158.x_ScaledScreenParams;
  let x_1967 : vec2<f32> = vec2<f32>(x_1966.x, x_1966.y);
  let x_1971 : vec2<f32> = (vec2<f32>(1.0f, 1.0f) / vec2<f32>(x_1967.x, x_1967.y));
  let x_1972 : vec3<f32> = u_xlat5;
  u_xlat5 = vec3<f32>(x_1971.x, x_1971.y, x_1972.z);
  let x_1974 : vec3<f32> = u_xlat5;
  let x_1976 : vec4<f32> = hlslcc_FragCoord;
  let x_1978 : vec2<f32> = (vec2<f32>(x_1974.x, x_1974.y) * vec2<f32>(x_1976.x, x_1976.y));
  let x_1979 : vec3<f32> = u_xlat5;
  u_xlat5 = vec3<f32>(x_1978.x, x_1978.y, x_1979.z);
  let x_1982 : f32 = u_xlat5.y;
  let x_1985 : f32 = x_158.x_ScaleBiasRt.x;
  let x_1988 : f32 = x_158.x_ScaleBiasRt.y;
  u_xlat68 = ((x_1982 * x_1985) + x_1988);
  let x_1990 : f32 = u_xlat68;
  u_xlat5.z = (-(x_1990) + 1.0f);
  let x_1995 : f32 = u_xlat8.x;
  u_xlat8.x = x_1995;
  let x_1998 : f32 = u_xlat8.x;
  u_xlat8.x = clamp(x_1998, 0.0f, 1.0f);
  let x_2001 : f32 = u_xlat67;
  u_xlat67 = x_2001;
  let x_2002 : f32 = u_xlat67;
  u_xlat67 = clamp(x_2002, 0.0f, 1.0f);
  let x_2004 : vec4<f32> = u_xlat7;
  let x_2008 : vec3<f32> = (vec3<f32>(x_2004.x, x_2004.y, x_2004.z) * vec3<f32>(0.959999979f, 0.959999979f, 0.959999979f));
  let x_2009 : vec4<f32> = u_xlat6;
  u_xlat6 = vec4<f32>(x_2008.x, x_2008.y, x_2008.z, x_2009.w);
  let x_2012 : f32 = u_xlat8.x;
  u_xlat68 = (-(x_2012) + 1.0f);
  let x_2016 : f32 = u_xlat68;
  let x_2017 : f32 = u_xlat68;
  u_xlat69 = (x_2016 * x_2017);
  let x_2019 : f32 = u_xlat69;
  u_xlat69 = max(x_2019, 0.0078125f);
  let x_2022 : f32 = u_xlat69;
  let x_2023 : f32 = u_xlat69;
  u_xlat70 = (x_2022 * x_2023);
  let x_2027 : f32 = u_xlat8.x;
  u_xlat27 = (x_2027 + 0.040000021f);
  let x_2030 : f32 = u_xlat27;
  u_xlat27 = min(x_2030, 1.0f);
  let x_2033 : f32 = u_xlat69;
  u_xlat71 = ((x_2033 * 4.0f) + 2.0f);
  let x_2042 : vec3<f32> = u_xlat5;
  let x_2045 : f32 = x_158.x_GlobalMipBias.x;
  let x_2046 : vec4<f32> = textureSampleBias(x_ScreenSpaceOcclusionTexture, sampler_ScreenSpaceOcclusionTexture, vec2<f32>(x_2042.x, x_2042.z), x_2045);
  u_xlat5.x = x_2046.x;
  let x_2051 : f32 = u_xlat5.x;
  u_xlat49 = (x_2051 + -1.0f);
  let x_2055 : f32 = x_158.x_AmbientOcclusionParam.w;
  let x_2056 : f32 = u_xlat49;
  u_xlat49 = ((x_2055 * x_2056) + 1.0f);
  let x_2060 : f32 = u_xlat5.x;
  let x_2062 : f32 = vs_INTERP4.w;
  u_xlat5.x = min(x_2060, x_2062);
  let x_2065 : bool = u_xlatb0;
  if (x_2065) {
    let x_2069 : f32 = x_362.x_MainLightShadowParams.y;
    u_xlatb0 = (x_2069 == 1.0f);
    let x_2071 : bool = u_xlatb0;
    if (x_2071) {
      let x_2075 : vec4<f32> = vs_INTERP9;
      let x_2078 : vec4<f32> = x_362.x_MainLightShadowOffset0;
      u_xlat7 = (vec4<f32>(x_2075.x, x_2075.y, x_2075.x, x_2075.y) + x_2078);
      let x_2081 : vec4<f32> = u_xlat7;
      let x_2082 : vec2<f32> = vec2<f32>(x_2081.x, x_2081.y);
      let x_2084 : f32 = vs_INTERP9.z;
      txVec30 = vec3<f32>(x_2082.x, x_2082.y, x_2084);
      let x_2091 : vec3<f32> = txVec30;
      let x_2093 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2091.xy, x_2091.z);
      u_xlat8.x = x_2093;
      let x_2096 : vec4<f32> = u_xlat7;
      let x_2097 : vec2<f32> = vec2<f32>(x_2096.z, x_2096.w);
      let x_2099 : f32 = vs_INTERP9.z;
      txVec31 = vec3<f32>(x_2097.x, x_2097.y, x_2099);
      let x_2106 : vec3<f32> = txVec31;
      let x_2108 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2106.xy, x_2106.z);
      u_xlat8.y = x_2108;
      let x_2110 : vec4<f32> = vs_INTERP9;
      let x_2113 : vec4<f32> = x_362.x_MainLightShadowOffset1;
      u_xlat7 = (vec4<f32>(x_2110.x, x_2110.y, x_2110.x, x_2110.y) + x_2113);
      let x_2116 : vec4<f32> = u_xlat7;
      let x_2117 : vec2<f32> = vec2<f32>(x_2116.x, x_2116.y);
      let x_2119 : f32 = vs_INTERP9.z;
      txVec32 = vec3<f32>(x_2117.x, x_2117.y, x_2119);
      let x_2126 : vec3<f32> = txVec32;
      let x_2128 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2126.xy, x_2126.z);
      u_xlat8.z = x_2128;
      let x_2131 : vec4<f32> = u_xlat7;
      let x_2132 : vec2<f32> = vec2<f32>(x_2131.z, x_2131.w);
      let x_2134 : f32 = vs_INTERP9.z;
      txVec33 = vec3<f32>(x_2132.x, x_2132.y, x_2134);
      let x_2141 : vec3<f32> = txVec33;
      let x_2143 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2141.xy, x_2141.z);
      u_xlat8.w = x_2143;
      let x_2145 : vec4<f32> = u_xlat8;
      u_xlat0.x = dot(x_2145, vec4<f32>(0.25f, 0.25f, 0.25f, 0.25f));
    } else {
      let x_2151 : f32 = x_362.x_MainLightShadowParams.y;
      u_xlatb72 = (x_2151 == 2.0f);
      let x_2153 : bool = u_xlatb72;
      if (x_2153) {
        let x_2156 : vec4<f32> = vs_INTERP9;
        let x_2159 : vec4<f32> = x_362.x_MainLightShadowmapSize;
        let x_2162 : vec2<f32> = ((vec2<f32>(x_2156.x, x_2156.y) * vec2<f32>(x_2159.z, x_2159.w)) + vec2<f32>(0.5f, 0.5f));
        let x_2163 : vec4<f32> = u_xlat7;
        u_xlat7 = vec4<f32>(x_2162.x, x_2162.y, x_2163.z, x_2163.w);
        let x_2165 : vec4<f32> = u_xlat7;
        let x_2167 : vec2<f32> = floor(vec2<f32>(x_2165.x, x_2165.y));
        let x_2168 : vec4<f32> = u_xlat7;
        u_xlat7 = vec4<f32>(x_2167.x, x_2167.y, x_2168.z, x_2168.w);
        let x_2171 : vec4<f32> = vs_INTERP9;
        let x_2174 : vec4<f32> = x_362.x_MainLightShadowmapSize;
        let x_2177 : vec4<f32> = u_xlat7;
        u_xlat51 = ((vec2<f32>(x_2171.x, x_2171.y) * vec2<f32>(x_2174.z, x_2174.w)) + -(vec2<f32>(x_2177.x, x_2177.y)));
        let x_2181 : vec2<f32> = u_xlat51;
        u_xlat8 = (vec4<f32>(x_2181.x, x_2181.x, x_2181.y, x_2181.y) + vec4<f32>(0.5f, 1.0f, 0.5f, 1.0f));
        let x_2184 : vec4<f32> = u_xlat8;
        let x_2186 : vec4<f32> = u_xlat8;
        u_xlat9 = (vec4<f32>(x_2184.x, x_2184.x, x_2184.z, x_2184.z) * vec4<f32>(x_2186.x, x_2186.x, x_2186.z, x_2186.z));
        let x_2189 : vec4<f32> = u_xlat9;
        let x_2191 : vec2<f32> = (vec2<f32>(x_2189.y, x_2189.w) * vec2<f32>(0.079999998f, 0.079999998f));
        let x_2192 : vec4<f32> = u_xlat8;
        u_xlat8 = vec4<f32>(x_2191.x, x_2192.y, x_2191.y, x_2192.w);
        let x_2194 : vec4<f32> = u_xlat9;
        let x_2197 : vec2<f32> = u_xlat51;
        let x_2199 : vec2<f32> = ((vec2<f32>(x_2194.x, x_2194.z) * vec2<f32>(0.5f, 0.5f)) + -(x_2197));
        let x_2200 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_2199.x, x_2199.y, x_2200.z, x_2200.w);
        let x_2203 : vec2<f32> = u_xlat51;
        u_xlat53 = (-(x_2203) + vec2<f32>(1.0f, 1.0f));
        let x_2206 : vec2<f32> = u_xlat51;
        let x_2207 : vec2<f32> = min(x_2206, vec2<f32>(0.0f, 0.0f));
        let x_2208 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_2207.x, x_2207.y, x_2208.z, x_2208.w);
        let x_2210 : vec4<f32> = u_xlat10;
        let x_2213 : vec4<f32> = u_xlat10;
        let x_2216 : vec2<f32> = u_xlat53;
        let x_2217 : vec2<f32> = ((-(vec2<f32>(x_2210.x, x_2210.y)) * vec2<f32>(x_2213.x, x_2213.y)) + x_2216);
        let x_2218 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_2217.x, x_2217.y, x_2218.z, x_2218.w);
        let x_2220 : vec2<f32> = u_xlat51;
        u_xlat51 = max(x_2220, vec2<f32>(0.0f, 0.0f));
        let x_2222 : vec2<f32> = u_xlat51;
        let x_2224 : vec2<f32> = u_xlat51;
        let x_2226 : vec4<f32> = u_xlat8;
        u_xlat51 = ((-(x_2222) * x_2224) + vec2<f32>(x_2226.y, x_2226.w));
        let x_2229 : vec4<f32> = u_xlat10;
        let x_2231 : vec2<f32> = (vec2<f32>(x_2229.x, x_2229.y) + vec2<f32>(1.0f, 1.0f));
        let x_2232 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_2231.x, x_2231.y, x_2232.z, x_2232.w);
        let x_2234 : vec2<f32> = u_xlat51;
        u_xlat51 = (x_2234 + vec2<f32>(1.0f, 1.0f));
        let x_2236 : vec4<f32> = u_xlat9;
        let x_2238 : vec2<f32> = (vec2<f32>(x_2236.x, x_2236.y) * vec2<f32>(0.159999996f, 0.159999996f));
        let x_2239 : vec4<f32> = u_xlat11;
        u_xlat11 = vec4<f32>(x_2238.x, x_2238.y, x_2239.z, x_2239.w);
        let x_2241 : vec2<f32> = u_xlat53;
        let x_2242 : vec2<f32> = (x_2241 * vec2<f32>(0.159999996f, 0.159999996f));
        let x_2243 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_2242.x, x_2242.y, x_2243.z, x_2243.w);
        let x_2245 : vec4<f32> = u_xlat10;
        let x_2247 : vec2<f32> = (vec2<f32>(x_2245.x, x_2245.y) * vec2<f32>(0.159999996f, 0.159999996f));
        let x_2248 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_2247.x, x_2247.y, x_2248.z, x_2248.w);
        let x_2250 : vec2<f32> = u_xlat51;
        let x_2251 : vec2<f32> = (x_2250 * vec2<f32>(0.159999996f, 0.159999996f));
        let x_2252 : vec4<f32> = u_xlat12;
        u_xlat12 = vec4<f32>(x_2251.x, x_2251.y, x_2252.z, x_2252.w);
        let x_2254 : vec4<f32> = u_xlat8;
        u_xlat51 = (vec2<f32>(x_2254.y, x_2254.w) * vec2<f32>(0.159999996f, 0.159999996f));
        let x_2258 : f32 = u_xlat10.x;
        u_xlat11.z = x_2258;
        let x_2261 : f32 = u_xlat51.x;
        u_xlat11.w = x_2261;
        let x_2264 : f32 = u_xlat12.x;
        u_xlat9.z = x_2264;
        let x_2267 : f32 = u_xlat8.x;
        u_xlat9.w = x_2267;
        let x_2269 : vec4<f32> = u_xlat9;
        let x_2271 : vec4<f32> = u_xlat11;
        u_xlat13 = (vec4<f32>(x_2269.z, x_2269.w, x_2269.x, x_2269.z) + vec4<f32>(x_2271.z, x_2271.w, x_2271.x, x_2271.z));
        let x_2275 : f32 = u_xlat11.y;
        u_xlat10.z = x_2275;
        let x_2278 : f32 = u_xlat51.y;
        u_xlat10.w = x_2278;
        let x_2281 : f32 = u_xlat9.y;
        u_xlat12.z = x_2281;
        let x_2284 : f32 = u_xlat8.z;
        u_xlat12.w = x_2284;
        let x_2286 : vec4<f32> = u_xlat10;
        let x_2288 : vec4<f32> = u_xlat12;
        let x_2290 : vec3<f32> = (vec3<f32>(x_2286.z, x_2286.y, x_2286.w) + vec3<f32>(x_2288.z, x_2288.y, x_2288.w));
        let x_2291 : vec4<f32> = u_xlat8;
        u_xlat8 = vec4<f32>(x_2290.x, x_2290.y, x_2290.z, x_2291.w);
        let x_2293 : vec4<f32> = u_xlat9;
        let x_2295 : vec4<f32> = u_xlat13;
        let x_2297 : vec3<f32> = (vec3<f32>(x_2293.x, x_2293.z, x_2293.w) / vec3<f32>(x_2295.z, x_2295.w, x_2295.y));
        let x_2298 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_2297.x, x_2297.y, x_2297.z, x_2298.w);
        let x_2300 : vec4<f32> = u_xlat9;
        let x_2302 : vec3<f32> = (vec3<f32>(x_2300.x, x_2300.y, x_2300.z) + vec3<f32>(-2.5f, -0.5f, 1.5f));
        let x_2303 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_2302.x, x_2302.y, x_2302.z, x_2303.w);
        let x_2305 : vec4<f32> = u_xlat12;
        let x_2307 : vec4<f32> = u_xlat8;
        let x_2309 : vec3<f32> = (vec3<f32>(x_2305.z, x_2305.y, x_2305.w) / vec3<f32>(x_2307.x, x_2307.y, x_2307.z));
        let x_2310 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_2309.x, x_2309.y, x_2309.z, x_2310.w);
        let x_2312 : vec4<f32> = u_xlat10;
        let x_2314 : vec3<f32> = (vec3<f32>(x_2312.x, x_2312.y, x_2312.z) + vec3<f32>(-2.5f, -0.5f, 1.5f));
        let x_2315 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_2314.x, x_2314.y, x_2314.z, x_2315.w);
        let x_2317 : vec4<f32> = u_xlat9;
        let x_2320 : vec4<f32> = x_362.x_MainLightShadowmapSize;
        let x_2322 : vec3<f32> = (vec3<f32>(x_2317.y, x_2317.x, x_2317.z) * vec3<f32>(x_2320.x, x_2320.x, x_2320.x));
        let x_2323 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_2322.x, x_2322.y, x_2322.z, x_2323.w);
        let x_2325 : vec4<f32> = u_xlat10;
        let x_2328 : vec4<f32> = x_362.x_MainLightShadowmapSize;
        let x_2330 : vec3<f32> = (vec3<f32>(x_2325.x, x_2325.y, x_2325.z) * vec3<f32>(x_2328.y, x_2328.y, x_2328.y));
        let x_2331 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_2330.x, x_2330.y, x_2330.z, x_2331.w);
        let x_2334 : f32 = u_xlat10.x;
        u_xlat9.w = x_2334;
        let x_2336 : vec4<f32> = u_xlat7;
        let x_2339 : vec4<f32> = x_362.x_MainLightShadowmapSize;
        let x_2342 : vec4<f32> = u_xlat9;
        u_xlat11 = ((vec4<f32>(x_2336.x, x_2336.y, x_2336.x, x_2336.y) * vec4<f32>(x_2339.x, x_2339.y, x_2339.x, x_2339.y)) + vec4<f32>(x_2342.y, x_2342.w, x_2342.x, x_2342.w));
        let x_2345 : vec4<f32> = u_xlat7;
        let x_2348 : vec4<f32> = x_362.x_MainLightShadowmapSize;
        let x_2351 : vec4<f32> = u_xlat9;
        u_xlat51 = ((vec2<f32>(x_2345.x, x_2345.y) * vec2<f32>(x_2348.x, x_2348.y)) + vec2<f32>(x_2351.z, x_2351.w));
        let x_2355 : f32 = u_xlat9.y;
        u_xlat10.w = x_2355;
        let x_2357 : vec4<f32> = u_xlat10;
        let x_2358 : vec2<f32> = vec2<f32>(x_2357.y, x_2357.z);
        let x_2359 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_2359.x, x_2358.x, x_2359.z, x_2358.y);
        let x_2361 : vec4<f32> = u_xlat7;
        let x_2364 : vec4<f32> = x_362.x_MainLightShadowmapSize;
        let x_2367 : vec4<f32> = u_xlat9;
        u_xlat12 = ((vec4<f32>(x_2361.x, x_2361.y, x_2361.x, x_2361.y) * vec4<f32>(x_2364.x, x_2364.y, x_2364.x, x_2364.y)) + vec4<f32>(x_2367.x, x_2367.y, x_2367.z, x_2367.y));
        let x_2370 : vec4<f32> = u_xlat7;
        let x_2373 : vec4<f32> = x_362.x_MainLightShadowmapSize;
        let x_2376 : vec4<f32> = u_xlat10;
        u_xlat10 = ((vec4<f32>(x_2370.x, x_2370.y, x_2370.x, x_2370.y) * vec4<f32>(x_2373.x, x_2373.y, x_2373.x, x_2373.y)) + vec4<f32>(x_2376.w, x_2376.y, x_2376.w, x_2376.z));
        let x_2379 : vec4<f32> = u_xlat7;
        let x_2382 : vec4<f32> = x_362.x_MainLightShadowmapSize;
        let x_2385 : vec4<f32> = u_xlat9;
        u_xlat9 = ((vec4<f32>(x_2379.x, x_2379.y, x_2379.x, x_2379.y) * vec4<f32>(x_2382.x, x_2382.y, x_2382.x, x_2382.y)) + vec4<f32>(x_2385.x, x_2385.w, x_2385.z, x_2385.w));
        let x_2388 : vec4<f32> = u_xlat8;
        let x_2390 : vec4<f32> = u_xlat13;
        u_xlat14 = (vec4<f32>(x_2388.x, x_2388.x, x_2388.x, x_2388.y) * vec4<f32>(x_2390.z, x_2390.w, x_2390.y, x_2390.z));
        let x_2393 : vec4<f32> = u_xlat8;
        let x_2395 : vec4<f32> = u_xlat13;
        u_xlat15 = (vec4<f32>(x_2393.y, x_2393.y, x_2393.z, x_2393.z) * x_2395);
        let x_2399 : f32 = u_xlat8.z;
        let x_2401 : f32 = u_xlat13.y;
        u_xlat72 = (x_2399 * x_2401);
        let x_2404 : vec4<f32> = u_xlat11;
        let x_2405 : vec2<f32> = vec2<f32>(x_2404.x, x_2404.y);
        let x_2407 : f32 = vs_INTERP9.z;
        txVec34 = vec3<f32>(x_2405.x, x_2405.y, x_2407);
        let x_2414 : vec3<f32> = txVec34;
        let x_2416 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2414.xy, x_2414.z);
        u_xlat7.x = x_2416;
        let x_2419 : vec4<f32> = u_xlat11;
        let x_2420 : vec2<f32> = vec2<f32>(x_2419.z, x_2419.w);
        let x_2422 : f32 = vs_INTERP9.z;
        txVec35 = vec3<f32>(x_2420.x, x_2420.y, x_2422);
        let x_2430 : vec3<f32> = txVec35;
        let x_2432 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2430.xy, x_2430.z);
        u_xlat29 = x_2432;
        let x_2433 : f32 = u_xlat29;
        let x_2435 : f32 = u_xlat14.y;
        u_xlat29 = (x_2433 * x_2435);
        let x_2438 : f32 = u_xlat14.x;
        let x_2440 : f32 = u_xlat7.x;
        let x_2442 : f32 = u_xlat29;
        u_xlat7.x = ((x_2438 * x_2440) + x_2442);
        let x_2446 : vec2<f32> = u_xlat51;
        let x_2448 : f32 = vs_INTERP9.z;
        txVec36 = vec3<f32>(x_2446.x, x_2446.y, x_2448);
        let x_2455 : vec3<f32> = txVec36;
        let x_2457 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2455.xy, x_2455.z);
        u_xlat29 = x_2457;
        let x_2459 : f32 = u_xlat14.z;
        let x_2460 : f32 = u_xlat29;
        let x_2463 : f32 = u_xlat7.x;
        u_xlat7.x = ((x_2459 * x_2460) + x_2463);
        let x_2467 : vec4<f32> = u_xlat10;
        let x_2468 : vec2<f32> = vec2<f32>(x_2467.x, x_2467.y);
        let x_2470 : f32 = vs_INTERP9.z;
        txVec37 = vec3<f32>(x_2468.x, x_2468.y, x_2470);
        let x_2477 : vec3<f32> = txVec37;
        let x_2479 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2477.xy, x_2477.z);
        u_xlat29 = x_2479;
        let x_2481 : f32 = u_xlat14.w;
        let x_2482 : f32 = u_xlat29;
        let x_2485 : f32 = u_xlat7.x;
        u_xlat7.x = ((x_2481 * x_2482) + x_2485);
        let x_2489 : vec4<f32> = u_xlat12;
        let x_2490 : vec2<f32> = vec2<f32>(x_2489.x, x_2489.y);
        let x_2492 : f32 = vs_INTERP9.z;
        txVec38 = vec3<f32>(x_2490.x, x_2490.y, x_2492);
        let x_2499 : vec3<f32> = txVec38;
        let x_2501 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2499.xy, x_2499.z);
        u_xlat29 = x_2501;
        let x_2503 : f32 = u_xlat15.x;
        let x_2504 : f32 = u_xlat29;
        let x_2507 : f32 = u_xlat7.x;
        u_xlat7.x = ((x_2503 * x_2504) + x_2507);
        let x_2511 : vec4<f32> = u_xlat12;
        let x_2512 : vec2<f32> = vec2<f32>(x_2511.z, x_2511.w);
        let x_2514 : f32 = vs_INTERP9.z;
        txVec39 = vec3<f32>(x_2512.x, x_2512.y, x_2514);
        let x_2521 : vec3<f32> = txVec39;
        let x_2523 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2521.xy, x_2521.z);
        u_xlat29 = x_2523;
        let x_2525 : f32 = u_xlat15.y;
        let x_2526 : f32 = u_xlat29;
        let x_2529 : f32 = u_xlat7.x;
        u_xlat7.x = ((x_2525 * x_2526) + x_2529);
        let x_2533 : vec4<f32> = u_xlat10;
        let x_2534 : vec2<f32> = vec2<f32>(x_2533.z, x_2533.w);
        let x_2536 : f32 = vs_INTERP9.z;
        txVec40 = vec3<f32>(x_2534.x, x_2534.y, x_2536);
        let x_2543 : vec3<f32> = txVec40;
        let x_2545 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2543.xy, x_2543.z);
        u_xlat29 = x_2545;
        let x_2547 : f32 = u_xlat15.z;
        let x_2548 : f32 = u_xlat29;
        let x_2551 : f32 = u_xlat7.x;
        u_xlat7.x = ((x_2547 * x_2548) + x_2551);
        let x_2555 : vec4<f32> = u_xlat9;
        let x_2556 : vec2<f32> = vec2<f32>(x_2555.x, x_2555.y);
        let x_2558 : f32 = vs_INTERP9.z;
        txVec41 = vec3<f32>(x_2556.x, x_2556.y, x_2558);
        let x_2565 : vec3<f32> = txVec41;
        let x_2567 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2565.xy, x_2565.z);
        u_xlat29 = x_2567;
        let x_2569 : f32 = u_xlat15.w;
        let x_2570 : f32 = u_xlat29;
        let x_2573 : f32 = u_xlat7.x;
        u_xlat7.x = ((x_2569 * x_2570) + x_2573);
        let x_2577 : vec4<f32> = u_xlat9;
        let x_2578 : vec2<f32> = vec2<f32>(x_2577.z, x_2577.w);
        let x_2580 : f32 = vs_INTERP9.z;
        txVec42 = vec3<f32>(x_2578.x, x_2578.y, x_2580);
        let x_2587 : vec3<f32> = txVec42;
        let x_2589 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2587.xy, x_2587.z);
        u_xlat29 = x_2589;
        let x_2590 : f32 = u_xlat72;
        let x_2591 : f32 = u_xlat29;
        let x_2594 : f32 = u_xlat7.x;
        u_xlat0.x = ((x_2590 * x_2591) + x_2594);
      } else {
        let x_2598 : vec4<f32> = vs_INTERP9;
        let x_2601 : vec4<f32> = x_362.x_MainLightShadowmapSize;
        let x_2604 : vec2<f32> = ((vec2<f32>(x_2598.x, x_2598.y) * vec2<f32>(x_2601.z, x_2601.w)) + vec2<f32>(0.5f, 0.5f));
        let x_2605 : vec4<f32> = u_xlat7;
        u_xlat7 = vec4<f32>(x_2604.x, x_2604.y, x_2605.z, x_2605.w);
        let x_2607 : vec4<f32> = u_xlat7;
        let x_2609 : vec2<f32> = floor(vec2<f32>(x_2607.x, x_2607.y));
        let x_2610 : vec4<f32> = u_xlat7;
        u_xlat7 = vec4<f32>(x_2609.x, x_2609.y, x_2610.z, x_2610.w);
        let x_2612 : vec4<f32> = vs_INTERP9;
        let x_2615 : vec4<f32> = x_362.x_MainLightShadowmapSize;
        let x_2618 : vec4<f32> = u_xlat7;
        u_xlat51 = ((vec2<f32>(x_2612.x, x_2612.y) * vec2<f32>(x_2615.z, x_2615.w)) + -(vec2<f32>(x_2618.x, x_2618.y)));
        let x_2622 : vec2<f32> = u_xlat51;
        u_xlat8 = (vec4<f32>(x_2622.x, x_2622.x, x_2622.y, x_2622.y) + vec4<f32>(0.5f, 1.0f, 0.5f, 1.0f));
        let x_2625 : vec4<f32> = u_xlat8;
        let x_2627 : vec4<f32> = u_xlat8;
        u_xlat9 = (vec4<f32>(x_2625.x, x_2625.x, x_2625.z, x_2625.z) * vec4<f32>(x_2627.x, x_2627.x, x_2627.z, x_2627.z));
        let x_2630 : vec4<f32> = u_xlat9;
        let x_2632 : vec2<f32> = (vec2<f32>(x_2630.y, x_2630.w) * vec2<f32>(0.040816002f, 0.040816002f));
        let x_2633 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_2633.x, x_2632.x, x_2633.z, x_2632.y);
        let x_2635 : vec4<f32> = u_xlat9;
        let x_2638 : vec2<f32> = u_xlat51;
        let x_2640 : vec2<f32> = ((vec2<f32>(x_2635.x, x_2635.z) * vec2<f32>(0.5f, 0.5f)) + -(x_2638));
        let x_2641 : vec4<f32> = u_xlat8;
        u_xlat8 = vec4<f32>(x_2640.x, x_2641.y, x_2640.y, x_2641.w);
        let x_2643 : vec2<f32> = u_xlat51;
        let x_2645 : vec2<f32> = (-(x_2643) + vec2<f32>(1.0f, 1.0f));
        let x_2646 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_2645.x, x_2645.y, x_2646.z, x_2646.w);
        let x_2648 : vec2<f32> = u_xlat51;
        u_xlat53 = min(x_2648, vec2<f32>(0.0f, 0.0f));
        let x_2650 : vec2<f32> = u_xlat53;
        let x_2652 : vec2<f32> = u_xlat53;
        let x_2654 : vec4<f32> = u_xlat9;
        let x_2656 : vec2<f32> = ((-(x_2650) * x_2652) + vec2<f32>(x_2654.x, x_2654.y));
        let x_2657 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_2656.x, x_2656.y, x_2657.z, x_2657.w);
        let x_2659 : vec2<f32> = u_xlat51;
        u_xlat53 = max(x_2659, vec2<f32>(0.0f, 0.0f));
        let x_2661 : vec2<f32> = u_xlat53;
        let x_2663 : vec2<f32> = u_xlat53;
        let x_2665 : vec4<f32> = u_xlat8;
        let x_2667 : vec2<f32> = ((-(x_2661) * x_2663) + vec2<f32>(x_2665.y, x_2665.w));
        let x_2668 : vec3<f32> = u_xlat30;
        u_xlat30 = vec3<f32>(x_2667.x, x_2668.y, x_2667.y);
        let x_2670 : vec4<f32> = u_xlat9;
        let x_2672 : vec2<f32> = (vec2<f32>(x_2670.x, x_2670.y) + vec2<f32>(2.0f, 2.0f));
        let x_2673 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_2672.x, x_2672.y, x_2673.z, x_2673.w);
        let x_2675 : vec3<f32> = u_xlat30;
        let x_2677 : vec2<f32> = (vec2<f32>(x_2675.x, x_2675.z) + vec2<f32>(2.0f, 2.0f));
        let x_2678 : vec4<f32> = u_xlat8;
        u_xlat8 = vec4<f32>(x_2678.x, x_2677.x, x_2678.z, x_2677.y);
        let x_2681 : f32 = u_xlat8.y;
        u_xlat11.z = (x_2681 * 0.081632003f);
        let x_2684 : vec4<f32> = u_xlat8;
        let x_2686 : vec3<f32> = (vec3<f32>(x_2684.z, x_2684.x, x_2684.w) * vec3<f32>(0.081632003f, 0.081632003f, 0.081632003f));
        let x_2687 : vec4<f32> = u_xlat12;
        u_xlat12 = vec4<f32>(x_2686.x, x_2686.y, x_2686.z, x_2687.w);
        let x_2689 : vec4<f32> = u_xlat9;
        let x_2691 : vec2<f32> = (vec2<f32>(x_2689.x, x_2689.y) * vec2<f32>(0.081632003f, 0.081632003f));
        let x_2692 : vec4<f32> = u_xlat8;
        u_xlat8 = vec4<f32>(x_2691.x, x_2691.y, x_2692.z, x_2692.w);
        let x_2695 : f32 = u_xlat12.y;
        u_xlat11.x = x_2695;
        let x_2697 : vec2<f32> = u_xlat51;
        let x_2700 : vec2<f32> = ((vec2<f32>(x_2697.x, x_2697.x) * vec2<f32>(-0.081632003f, 0.081632003f)) + vec2<f32>(0.163264006f, 0.081632003f));
        let x_2701 : vec4<f32> = u_xlat11;
        u_xlat11 = vec4<f32>(x_2701.x, x_2700.x, x_2701.z, x_2700.y);
        let x_2703 : vec2<f32> = u_xlat51;
        let x_2706 : vec2<f32> = ((vec2<f32>(x_2703.x, x_2703.x) * vec2<f32>(-0.081632003f, 0.081632003f)) + vec2<f32>(0.081632003f, 0.163264006f));
        let x_2707 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_2706.x, x_2707.y, x_2706.y, x_2707.w);
        let x_2710 : f32 = u_xlat8.x;
        u_xlat9.y = x_2710;
        let x_2713 : f32 = u_xlat10.y;
        u_xlat9.w = x_2713;
        let x_2715 : vec4<f32> = u_xlat9;
        let x_2716 : vec4<f32> = u_xlat11;
        u_xlat11 = (x_2715 + x_2716);
        let x_2718 : vec2<f32> = u_xlat51;
        let x_2721 : vec2<f32> = ((vec2<f32>(x_2718.y, x_2718.y) * vec2<f32>(-0.081632003f, 0.081632003f)) + vec2<f32>(0.163264006f, 0.081632003f));
        let x_2722 : vec4<f32> = u_xlat12;
        u_xlat12 = vec4<f32>(x_2722.x, x_2721.x, x_2722.z, x_2721.y);
        let x_2724 : vec2<f32> = u_xlat51;
        let x_2727 : vec2<f32> = ((vec2<f32>(x_2724.y, x_2724.y) * vec2<f32>(-0.081632003f, 0.081632003f)) + vec2<f32>(0.081632003f, 0.163264006f));
        let x_2728 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_2727.x, x_2728.y, x_2727.y, x_2728.w);
        let x_2731 : f32 = u_xlat8.y;
        u_xlat10.y = x_2731;
        let x_2733 : vec4<f32> = u_xlat10;
        let x_2734 : vec4<f32> = u_xlat12;
        u_xlat8 = (x_2733 + x_2734);
        let x_2736 : vec4<f32> = u_xlat9;
        let x_2737 : vec4<f32> = u_xlat11;
        u_xlat9 = (x_2736 / x_2737);
        let x_2739 : vec4<f32> = u_xlat9;
        u_xlat9 = (x_2739 + vec4<f32>(-3.5f, -1.5f, 0.5f, 2.5f));
        let x_2741 : vec4<f32> = u_xlat10;
        let x_2742 : vec4<f32> = u_xlat8;
        u_xlat10 = (x_2741 / x_2742);
        let x_2744 : vec4<f32> = u_xlat10;
        u_xlat10 = (x_2744 + vec4<f32>(-3.5f, -1.5f, 0.5f, 2.5f));
        let x_2746 : vec4<f32> = u_xlat9;
        let x_2749 : vec4<f32> = x_362.x_MainLightShadowmapSize;
        u_xlat9 = (vec4<f32>(x_2746.w, x_2746.x, x_2746.y, x_2746.z) * vec4<f32>(x_2749.x, x_2749.x, x_2749.x, x_2749.x));
        let x_2752 : vec4<f32> = u_xlat10;
        let x_2755 : vec4<f32> = x_362.x_MainLightShadowmapSize;
        u_xlat10 = (vec4<f32>(x_2752.x, x_2752.w, x_2752.y, x_2752.z) * vec4<f32>(x_2755.y, x_2755.y, x_2755.y, x_2755.y));
        let x_2758 : vec4<f32> = u_xlat9;
        let x_2759 : vec3<f32> = vec3<f32>(x_2758.y, x_2758.z, x_2758.w);
        let x_2760 : vec4<f32> = u_xlat12;
        u_xlat12 = vec4<f32>(x_2759.x, x_2760.y, x_2759.y, x_2759.z);
        let x_2763 : f32 = u_xlat10.x;
        u_xlat12.y = x_2763;
        let x_2765 : vec4<f32> = u_xlat7;
        let x_2768 : vec4<f32> = x_362.x_MainLightShadowmapSize;
        let x_2771 : vec4<f32> = u_xlat12;
        u_xlat13 = ((vec4<f32>(x_2765.x, x_2765.y, x_2765.x, x_2765.y) * vec4<f32>(x_2768.x, x_2768.y, x_2768.x, x_2768.y)) + vec4<f32>(x_2771.x, x_2771.y, x_2771.z, x_2771.y));
        let x_2774 : vec4<f32> = u_xlat7;
        let x_2777 : vec4<f32> = x_362.x_MainLightShadowmapSize;
        let x_2780 : vec4<f32> = u_xlat12;
        u_xlat51 = ((vec2<f32>(x_2774.x, x_2774.y) * vec2<f32>(x_2777.x, x_2777.y)) + vec2<f32>(x_2780.w, x_2780.y));
        let x_2784 : f32 = u_xlat12.y;
        u_xlat9.y = x_2784;
        let x_2787 : f32 = u_xlat10.z;
        u_xlat12.y = x_2787;
        let x_2789 : vec4<f32> = u_xlat7;
        let x_2792 : vec4<f32> = x_362.x_MainLightShadowmapSize;
        let x_2795 : vec4<f32> = u_xlat12;
        u_xlat14 = ((vec4<f32>(x_2789.x, x_2789.y, x_2789.x, x_2789.y) * vec4<f32>(x_2792.x, x_2792.y, x_2792.x, x_2792.y)) + vec4<f32>(x_2795.x, x_2795.y, x_2795.z, x_2795.y));
        let x_2798 : vec4<f32> = u_xlat7;
        let x_2801 : vec4<f32> = x_362.x_MainLightShadowmapSize;
        let x_2804 : vec4<f32> = u_xlat12;
        let x_2806 : vec2<f32> = ((vec2<f32>(x_2798.x, x_2798.y) * vec2<f32>(x_2801.x, x_2801.y)) + vec2<f32>(x_2804.w, x_2804.y));
        let x_2807 : vec4<f32> = u_xlat15;
        u_xlat15 = vec4<f32>(x_2806.x, x_2806.y, x_2807.z, x_2807.w);
        let x_2810 : f32 = u_xlat12.y;
        u_xlat9.z = x_2810;
        let x_2812 : vec4<f32> = u_xlat7;
        let x_2815 : vec4<f32> = x_362.x_MainLightShadowmapSize;
        let x_2818 : vec4<f32> = u_xlat9;
        u_xlat16 = ((vec4<f32>(x_2812.x, x_2812.y, x_2812.x, x_2812.y) * vec4<f32>(x_2815.x, x_2815.y, x_2815.x, x_2815.y)) + vec4<f32>(x_2818.x, x_2818.y, x_2818.x, x_2818.z));
        let x_2822 : f32 = u_xlat10.w;
        u_xlat12.y = x_2822;
        let x_2824 : vec4<f32> = u_xlat7;
        let x_2827 : vec4<f32> = x_362.x_MainLightShadowmapSize;
        let x_2830 : vec4<f32> = u_xlat12;
        u_xlat17 = ((vec4<f32>(x_2824.x, x_2824.y, x_2824.x, x_2824.y) * vec4<f32>(x_2827.x, x_2827.y, x_2827.x, x_2827.y)) + vec4<f32>(x_2830.x, x_2830.y, x_2830.z, x_2830.y));
        let x_2833 : vec4<f32> = u_xlat7;
        let x_2836 : vec4<f32> = x_362.x_MainLightShadowmapSize;
        let x_2839 : vec4<f32> = u_xlat12;
        let x_2841 : vec2<f32> = ((vec2<f32>(x_2833.x, x_2833.y) * vec2<f32>(x_2836.x, x_2836.y)) + vec2<f32>(x_2839.w, x_2839.y));
        let x_2842 : vec3<f32> = u_xlat31;
        u_xlat31 = vec3<f32>(x_2841.x, x_2841.y, x_2842.z);
        let x_2845 : f32 = u_xlat12.y;
        u_xlat9.w = x_2845;
        let x_2848 : vec4<f32> = u_xlat7;
        let x_2851 : vec4<f32> = x_362.x_MainLightShadowmapSize;
        let x_2854 : vec4<f32> = u_xlat9;
        u_xlat59 = ((vec2<f32>(x_2848.x, x_2848.y) * vec2<f32>(x_2851.x, x_2851.y)) + vec2<f32>(x_2854.x, x_2854.w));
        let x_2857 : vec4<f32> = u_xlat12;
        let x_2858 : vec3<f32> = vec3<f32>(x_2857.x, x_2857.z, x_2857.w);
        let x_2859 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_2858.x, x_2859.y, x_2858.y, x_2858.z);
        let x_2861 : vec4<f32> = u_xlat7;
        let x_2864 : vec4<f32> = x_362.x_MainLightShadowmapSize;
        let x_2867 : vec4<f32> = u_xlat10;
        u_xlat12 = ((vec4<f32>(x_2861.x, x_2861.y, x_2861.x, x_2861.y) * vec4<f32>(x_2864.x, x_2864.y, x_2864.x, x_2864.y)) + vec4<f32>(x_2867.x, x_2867.y, x_2867.z, x_2867.y));
        let x_2870 : vec4<f32> = u_xlat7;
        let x_2873 : vec4<f32> = x_362.x_MainLightShadowmapSize;
        let x_2876 : vec4<f32> = u_xlat10;
        u_xlat54 = ((vec2<f32>(x_2870.x, x_2870.y) * vec2<f32>(x_2873.x, x_2873.y)) + vec2<f32>(x_2876.w, x_2876.y));
        let x_2880 : f32 = u_xlat9.x;
        u_xlat10.x = x_2880;
        let x_2882 : vec4<f32> = u_xlat7;
        let x_2885 : vec4<f32> = x_362.x_MainLightShadowmapSize;
        let x_2888 : vec4<f32> = u_xlat10;
        let x_2890 : vec2<f32> = ((vec2<f32>(x_2882.x, x_2882.y) * vec2<f32>(x_2885.x, x_2885.y)) + vec2<f32>(x_2888.x, x_2888.y));
        let x_2891 : vec4<f32> = u_xlat7;
        u_xlat7 = vec4<f32>(x_2890.x, x_2890.y, x_2891.z, x_2891.w);
        let x_2893 : vec4<f32> = u_xlat8;
        let x_2895 : vec4<f32> = u_xlat11;
        u_xlat18 = (vec4<f32>(x_2893.x, x_2893.x, x_2893.x, x_2893.x) * x_2895);
        let x_2897 : vec4<f32> = u_xlat8;
        let x_2899 : vec4<f32> = u_xlat11;
        u_xlat19 = (vec4<f32>(x_2897.y, x_2897.y, x_2897.y, x_2897.y) * x_2899);
        let x_2901 : vec4<f32> = u_xlat8;
        let x_2903 : vec4<f32> = u_xlat11;
        u_xlat20 = (vec4<f32>(x_2901.z, x_2901.z, x_2901.z, x_2901.z) * x_2903);
        let x_2905 : vec4<f32> = u_xlat8;
        let x_2907 : vec4<f32> = u_xlat11;
        u_xlat8 = (vec4<f32>(x_2905.w, x_2905.w, x_2905.w, x_2905.w) * x_2907);
        let x_2910 : vec4<f32> = u_xlat13;
        let x_2911 : vec2<f32> = vec2<f32>(x_2910.x, x_2910.y);
        let x_2913 : f32 = vs_INTERP9.z;
        txVec43 = vec3<f32>(x_2911.x, x_2911.y, x_2913);
        let x_2920 : vec3<f32> = txVec43;
        let x_2922 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2920.xy, x_2920.z);
        u_xlat72 = x_2922;
        let x_2924 : vec4<f32> = u_xlat13;
        let x_2925 : vec2<f32> = vec2<f32>(x_2924.z, x_2924.w);
        let x_2927 : f32 = vs_INTERP9.z;
        txVec44 = vec3<f32>(x_2925.x, x_2925.y, x_2927);
        let x_2934 : vec3<f32> = txVec44;
        let x_2936 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2934.xy, x_2934.z);
        u_xlat9.x = x_2936;
        let x_2939 : f32 = u_xlat9.x;
        let x_2941 : f32 = u_xlat18.y;
        u_xlat9.x = (x_2939 * x_2941);
        let x_2945 : f32 = u_xlat18.x;
        let x_2946 : f32 = u_xlat72;
        let x_2949 : f32 = u_xlat9.x;
        u_xlat72 = ((x_2945 * x_2946) + x_2949);
        let x_2952 : vec2<f32> = u_xlat51;
        let x_2954 : f32 = vs_INTERP9.z;
        txVec45 = vec3<f32>(x_2952.x, x_2952.y, x_2954);
        let x_2961 : vec3<f32> = txVec45;
        let x_2963 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2961.xy, x_2961.z);
        u_xlat51.x = x_2963;
        let x_2966 : f32 = u_xlat18.z;
        let x_2968 : f32 = u_xlat51.x;
        let x_2970 : f32 = u_xlat72;
        u_xlat72 = ((x_2966 * x_2968) + x_2970);
        let x_2973 : vec4<f32> = u_xlat16;
        let x_2974 : vec2<f32> = vec2<f32>(x_2973.x, x_2973.y);
        let x_2976 : f32 = vs_INTERP9.z;
        txVec46 = vec3<f32>(x_2974.x, x_2974.y, x_2976);
        let x_2983 : vec3<f32> = txVec46;
        let x_2985 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2983.xy, x_2983.z);
        u_xlat51.x = x_2985;
        let x_2988 : f32 = u_xlat18.w;
        let x_2990 : f32 = u_xlat51.x;
        let x_2992 : f32 = u_xlat72;
        u_xlat72 = ((x_2988 * x_2990) + x_2992);
        let x_2995 : vec4<f32> = u_xlat14;
        let x_2996 : vec2<f32> = vec2<f32>(x_2995.x, x_2995.y);
        let x_2998 : f32 = vs_INTERP9.z;
        txVec47 = vec3<f32>(x_2996.x, x_2996.y, x_2998);
        let x_3005 : vec3<f32> = txVec47;
        let x_3007 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_3005.xy, x_3005.z);
        u_xlat51.x = x_3007;
        let x_3010 : f32 = u_xlat19.x;
        let x_3012 : f32 = u_xlat51.x;
        let x_3014 : f32 = u_xlat72;
        u_xlat72 = ((x_3010 * x_3012) + x_3014);
        let x_3017 : vec4<f32> = u_xlat14;
        let x_3018 : vec2<f32> = vec2<f32>(x_3017.z, x_3017.w);
        let x_3020 : f32 = vs_INTERP9.z;
        txVec48 = vec3<f32>(x_3018.x, x_3018.y, x_3020);
        let x_3027 : vec3<f32> = txVec48;
        let x_3029 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_3027.xy, x_3027.z);
        u_xlat51.x = x_3029;
        let x_3032 : f32 = u_xlat19.y;
        let x_3034 : f32 = u_xlat51.x;
        let x_3036 : f32 = u_xlat72;
        u_xlat72 = ((x_3032 * x_3034) + x_3036);
        let x_3039 : vec4<f32> = u_xlat15;
        let x_3040 : vec2<f32> = vec2<f32>(x_3039.x, x_3039.y);
        let x_3042 : f32 = vs_INTERP9.z;
        txVec49 = vec3<f32>(x_3040.x, x_3040.y, x_3042);
        let x_3049 : vec3<f32> = txVec49;
        let x_3051 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_3049.xy, x_3049.z);
        u_xlat51.x = x_3051;
        let x_3054 : f32 = u_xlat19.z;
        let x_3056 : f32 = u_xlat51.x;
        let x_3058 : f32 = u_xlat72;
        u_xlat72 = ((x_3054 * x_3056) + x_3058);
        let x_3061 : vec4<f32> = u_xlat16;
        let x_3062 : vec2<f32> = vec2<f32>(x_3061.z, x_3061.w);
        let x_3064 : f32 = vs_INTERP9.z;
        txVec50 = vec3<f32>(x_3062.x, x_3062.y, x_3064);
        let x_3071 : vec3<f32> = txVec50;
        let x_3073 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_3071.xy, x_3071.z);
        u_xlat51.x = x_3073;
        let x_3076 : f32 = u_xlat19.w;
        let x_3078 : f32 = u_xlat51.x;
        let x_3080 : f32 = u_xlat72;
        u_xlat72 = ((x_3076 * x_3078) + x_3080);
        let x_3083 : vec4<f32> = u_xlat17;
        let x_3084 : vec2<f32> = vec2<f32>(x_3083.x, x_3083.y);
        let x_3086 : f32 = vs_INTERP9.z;
        txVec51 = vec3<f32>(x_3084.x, x_3084.y, x_3086);
        let x_3093 : vec3<f32> = txVec51;
        let x_3095 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_3093.xy, x_3093.z);
        u_xlat51.x = x_3095;
        let x_3098 : f32 = u_xlat20.x;
        let x_3100 : f32 = u_xlat51.x;
        let x_3102 : f32 = u_xlat72;
        u_xlat72 = ((x_3098 * x_3100) + x_3102);
        let x_3105 : vec4<f32> = u_xlat17;
        let x_3106 : vec2<f32> = vec2<f32>(x_3105.z, x_3105.w);
        let x_3108 : f32 = vs_INTERP9.z;
        txVec52 = vec3<f32>(x_3106.x, x_3106.y, x_3108);
        let x_3115 : vec3<f32> = txVec52;
        let x_3117 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_3115.xy, x_3115.z);
        u_xlat51.x = x_3117;
        let x_3120 : f32 = u_xlat20.y;
        let x_3122 : f32 = u_xlat51.x;
        let x_3124 : f32 = u_xlat72;
        u_xlat72 = ((x_3120 * x_3122) + x_3124);
        let x_3127 : vec3<f32> = u_xlat31;
        let x_3128 : vec2<f32> = vec2<f32>(x_3127.x, x_3127.y);
        let x_3130 : f32 = vs_INTERP9.z;
        txVec53 = vec3<f32>(x_3128.x, x_3128.y, x_3130);
        let x_3137 : vec3<f32> = txVec53;
        let x_3139 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_3137.xy, x_3137.z);
        u_xlat51.x = x_3139;
        let x_3142 : f32 = u_xlat20.z;
        let x_3144 : f32 = u_xlat51.x;
        let x_3146 : f32 = u_xlat72;
        u_xlat72 = ((x_3142 * x_3144) + x_3146);
        let x_3149 : vec2<f32> = u_xlat59;
        let x_3151 : f32 = vs_INTERP9.z;
        txVec54 = vec3<f32>(x_3149.x, x_3149.y, x_3151);
        let x_3158 : vec3<f32> = txVec54;
        let x_3160 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_3158.xy, x_3158.z);
        u_xlat51.x = x_3160;
        let x_3163 : f32 = u_xlat20.w;
        let x_3165 : f32 = u_xlat51.x;
        let x_3167 : f32 = u_xlat72;
        u_xlat72 = ((x_3163 * x_3165) + x_3167);
        let x_3170 : vec4<f32> = u_xlat12;
        let x_3171 : vec2<f32> = vec2<f32>(x_3170.x, x_3170.y);
        let x_3173 : f32 = vs_INTERP9.z;
        txVec55 = vec3<f32>(x_3171.x, x_3171.y, x_3173);
        let x_3180 : vec3<f32> = txVec55;
        let x_3182 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_3180.xy, x_3180.z);
        u_xlat51.x = x_3182;
        let x_3185 : f32 = u_xlat8.x;
        let x_3187 : f32 = u_xlat51.x;
        let x_3189 : f32 = u_xlat72;
        u_xlat72 = ((x_3185 * x_3187) + x_3189);
        let x_3192 : vec4<f32> = u_xlat12;
        let x_3193 : vec2<f32> = vec2<f32>(x_3192.z, x_3192.w);
        let x_3195 : f32 = vs_INTERP9.z;
        txVec56 = vec3<f32>(x_3193.x, x_3193.y, x_3195);
        let x_3202 : vec3<f32> = txVec56;
        let x_3204 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_3202.xy, x_3202.z);
        u_xlat51.x = x_3204;
        let x_3207 : f32 = u_xlat8.y;
        let x_3209 : f32 = u_xlat51.x;
        let x_3211 : f32 = u_xlat72;
        u_xlat72 = ((x_3207 * x_3209) + x_3211);
        let x_3214 : vec2<f32> = u_xlat54;
        let x_3216 : f32 = vs_INTERP9.z;
        txVec57 = vec3<f32>(x_3214.x, x_3214.y, x_3216);
        let x_3223 : vec3<f32> = txVec57;
        let x_3225 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_3223.xy, x_3223.z);
        u_xlat51.x = x_3225;
        let x_3228 : f32 = u_xlat8.z;
        let x_3230 : f32 = u_xlat51.x;
        let x_3232 : f32 = u_xlat72;
        u_xlat72 = ((x_3228 * x_3230) + x_3232);
        let x_3235 : vec4<f32> = u_xlat7;
        let x_3236 : vec2<f32> = vec2<f32>(x_3235.x, x_3235.y);
        let x_3238 : f32 = vs_INTERP9.z;
        txVec58 = vec3<f32>(x_3236.x, x_3236.y, x_3238);
        let x_3245 : vec3<f32> = txVec58;
        let x_3247 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_3245.xy, x_3245.z);
        u_xlat7.x = x_3247;
        let x_3250 : f32 = u_xlat8.w;
        let x_3252 : f32 = u_xlat7.x;
        let x_3254 : f32 = u_xlat72;
        u_xlat0.x = ((x_3250 * x_3252) + x_3254);
      }
    }
  } else {
    let x_3259 : vec4<f32> = vs_INTERP9;
    let x_3260 : vec2<f32> = vec2<f32>(x_3259.x, x_3259.y);
    let x_3262 : f32 = vs_INTERP9.z;
    txVec59 = vec3<f32>(x_3260.x, x_3260.y, x_3262);
    let x_3269 : vec3<f32> = txVec59;
    let x_3271 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_3269.xy, x_3269.z);
    u_xlat0.x = x_3271;
  }
  let x_3274 : f32 = u_xlat0.x;
  let x_3276 : f32 = x_362.x_MainLightShadowParams.x;
  let x_3279 : f32 = u_xlat2.x;
  u_xlat0.x = ((x_3274 * x_3276) + x_3279);
  let x_3284 : f32 = vs_INTERP9.z;
  u_xlatb2 = (0.0f >= x_3284);
  let x_3287 : f32 = vs_INTERP9.z;
  u_xlatb72 = (x_3287 >= 1.0f);
  let x_3289 : bool = u_xlatb2;
  let x_3290 : bool = u_xlatb72;
  u_xlatb2 = (x_3289 | x_3290);
  let x_3292 : bool = u_xlatb2;
  if (x_3292) {
    x_3293 = 1.0f;
  } else {
    let x_3298 : f32 = u_xlat0.x;
    x_3293 = x_3298;
  }
  let x_3299 : f32 = x_3293;
  u_xlat0.x = x_3299;
  let x_3301 : vec3<f32> = vs_INTERP0;
  let x_3303 : vec3<f32> = x_158.x_WorldSpaceCameraPos;
  let x_3305 : vec3<f32> = (x_3301 + -(x_3303));
  let x_3306 : vec4<f32> = u_xlat7;
  u_xlat7 = vec4<f32>(x_3305.x, x_3305.y, x_3305.z, x_3306.w);
  let x_3308 : vec4<f32> = u_xlat7;
  let x_3310 : vec4<f32> = u_xlat7;
  u_xlat2.x = dot(vec3<f32>(x_3308.x, x_3308.y, x_3308.z), vec3<f32>(x_3310.x, x_3310.y, x_3310.z));
  let x_3315 : f32 = u_xlat2.x;
  let x_3317 : f32 = x_362.x_MainLightShadowParams.z;
  let x_3320 : f32 = x_362.x_MainLightShadowParams.w;
  u_xlat2.x = ((x_3315 * x_3317) + x_3320);
  let x_3324 : f32 = u_xlat2.x;
  u_xlat2.x = clamp(x_3324, 0.0f, 1.0f);
  let x_3328 : f32 = u_xlat0.x;
  u_xlat72 = (-(x_3328) + 1.0f);
  let x_3332 : f32 = u_xlat2.x;
  let x_3333 : f32 = u_xlat72;
  let x_3336 : f32 = u_xlat0.x;
  u_xlat0.x = ((x_3332 * x_3333) + x_3336);
  let x_3339 : f32 = u_xlat49;
  let x_3342 : vec4<f32> = x_158.x_MainLightColor;
  let x_3344 : vec3<f32> = (vec3<f32>(x_3339, x_3339, x_3339) * vec3<f32>(x_3342.x, x_3342.y, x_3342.z));
  let x_3345 : vec4<f32> = u_xlat7;
  u_xlat7 = vec4<f32>(x_3344.x, x_3344.y, x_3344.z, x_3345.w);
  let x_3347 : vec3<f32> = u_xlat4;
  let x_3349 : vec3<f32> = u_xlat22;
  u_xlat2.x = dot(-(x_3347), x_3349);
  let x_3353 : f32 = u_xlat2.x;
  let x_3355 : f32 = u_xlat2.x;
  u_xlat2.x = (x_3353 + x_3355);
  let x_3358 : vec3<f32> = u_xlat22;
  let x_3359 : vec3<f32> = u_xlat2;
  let x_3363 : vec3<f32> = u_xlat4;
  let x_3365 : vec3<f32> = ((x_3358 * -(vec3<f32>(x_3359.x, x_3359.x, x_3359.x))) + -(x_3363));
  let x_3366 : vec4<f32> = u_xlat8;
  u_xlat8 = vec4<f32>(x_3365.x, x_3365.y, x_3365.z, x_3366.w);
  let x_3368 : vec3<f32> = u_xlat22;
  let x_3369 : vec3<f32> = u_xlat4;
  u_xlat2.x = dot(x_3368, x_3369);
  let x_3373 : f32 = u_xlat2.x;
  u_xlat2.x = clamp(x_3373, 0.0f, 1.0f);
  let x_3377 : f32 = u_xlat2.x;
  u_xlat2.x = (-(x_3377) + 1.0f);
  let x_3382 : f32 = u_xlat2.x;
  let x_3384 : f32 = u_xlat2.x;
  u_xlat2.x = (x_3382 * x_3384);
  let x_3388 : f32 = u_xlat2.x;
  let x_3390 : f32 = u_xlat2.x;
  u_xlat2.x = (x_3388 * x_3390);
  let x_3393 : f32 = u_xlat68;
  u_xlat72 = ((-(x_3393) * 0.699999988f) + 1.700000048f);
  let x_3399 : f32 = u_xlat68;
  let x_3400 : f32 = u_xlat72;
  u_xlat68 = (x_3399 * x_3400);
  let x_3402 : f32 = u_xlat68;
  u_xlat68 = (x_3402 * 6.0f);
  let x_3413 : vec4<f32> = u_xlat8;
  let x_3415 : f32 = u_xlat68;
  let x_3416 : vec4<f32> = textureSampleLevel(unity_SpecCube0, samplerunity_SpecCube0, vec3<f32>(x_3413.x, x_3413.y, x_3413.z), x_3415);
  u_xlat8 = x_3416;
  let x_3418 : f32 = u_xlat8.w;
  u_xlat68 = (x_3418 + -1.0f);
  let x_3421 : f32 = x_95.unity_SpecCube0_HDR.w;
  let x_3422 : f32 = u_xlat68;
  u_xlat68 = ((x_3421 * x_3422) + 1.0f);
  let x_3425 : f32 = u_xlat68;
  u_xlat68 = max(x_3425, 0.0f);
  let x_3427 : f32 = u_xlat68;
  u_xlat68 = log2(x_3427);
  let x_3429 : f32 = u_xlat68;
  let x_3431 : f32 = x_95.unity_SpecCube0_HDR.y;
  u_xlat68 = (x_3429 * x_3431);
  let x_3433 : f32 = u_xlat68;
  u_xlat68 = exp2(x_3433);
  let x_3435 : f32 = u_xlat68;
  let x_3437 : f32 = x_95.unity_SpecCube0_HDR.x;
  u_xlat68 = (x_3435 * x_3437);
  let x_3439 : vec4<f32> = u_xlat8;
  let x_3441 : f32 = u_xlat68;
  let x_3443 : vec3<f32> = (vec3<f32>(x_3439.x, x_3439.y, x_3439.z) * vec3<f32>(x_3441, x_3441, x_3441));
  let x_3444 : vec4<f32> = u_xlat8;
  u_xlat8 = vec4<f32>(x_3443.x, x_3443.y, x_3443.z, x_3444.w);
  let x_3446 : f32 = u_xlat69;
  let x_3448 : f32 = u_xlat69;
  let x_3452 : vec2<f32> = ((vec2<f32>(x_3446, x_3446) * vec2<f32>(x_3448, x_3448)) + vec2<f32>(-1.0f, 1.0f));
  let x_3453 : vec4<f32> = u_xlat9;
  u_xlat9 = vec4<f32>(x_3452.x, x_3452.y, x_3453.z, x_3453.w);
  let x_3456 : f32 = u_xlat9.y;
  u_xlat68 = (1.0f / x_3456);
  let x_3458 : f32 = u_xlat27;
  u_xlat69 = (x_3458 + -0.039999999f);
  let x_3462 : f32 = u_xlat2.x;
  let x_3463 : f32 = u_xlat69;
  u_xlat2.x = ((x_3462 * x_3463) + 0.039999999f);
  let x_3469 : f32 = u_xlat2.x;
  let x_3470 : f32 = u_xlat68;
  u_xlat2.x = (x_3469 * x_3470);
  let x_3473 : vec3<f32> = u_xlat2;
  let x_3475 : vec4<f32> = u_xlat8;
  let x_3477 : vec3<f32> = (vec3<f32>(x_3473.x, x_3473.x, x_3473.x) * vec3<f32>(x_3475.x, x_3475.y, x_3475.z));
  let x_3478 : vec4<f32> = u_xlat8;
  u_xlat8 = vec4<f32>(x_3477.x, x_3477.y, x_3477.z, x_3478.w);
  let x_3480 : vec4<f32> = u_xlat3;
  let x_3482 : vec4<f32> = u_xlat6;
  let x_3485 : vec4<f32> = u_xlat8;
  let x_3487 : vec3<f32> = ((vec3<f32>(x_3480.x, x_3480.y, x_3480.z) * vec3<f32>(x_3482.x, x_3482.y, x_3482.z)) + vec3<f32>(x_3485.x, x_3485.y, x_3485.z));
  let x_3488 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_3487.x, x_3487.y, x_3487.z, x_3488.w);
  let x_3491 : f32 = u_xlat0.x;
  let x_3493 : f32 = x_95.unity_LightData.z;
  u_xlat0.x = (x_3491 * x_3493);
  let x_3496 : vec3<f32> = u_xlat22;
  let x_3498 : vec4<f32> = x_158.x_MainLightPosition;
  u_xlat2.x = dot(x_3496, vec3<f32>(x_3498.x, x_3498.y, x_3498.z));
  let x_3503 : f32 = u_xlat2.x;
  u_xlat2.x = clamp(x_3503, 0.0f, 1.0f);
  let x_3507 : f32 = u_xlat0.x;
  let x_3509 : f32 = u_xlat2.x;
  u_xlat0.x = (x_3507 * x_3509);
  let x_3512 : vec3<f32> = u_xlat0;
  let x_3514 : vec4<f32> = u_xlat7;
  let x_3516 : vec3<f32> = (vec3<f32>(x_3512.x, x_3512.x, x_3512.x) * vec3<f32>(x_3514.x, x_3514.y, x_3514.z));
  let x_3517 : vec4<f32> = u_xlat7;
  u_xlat7 = vec4<f32>(x_3516.x, x_3516.y, x_3516.z, x_3517.w);
  let x_3519 : vec3<f32> = u_xlat4;
  let x_3521 : vec4<f32> = x_158.x_MainLightPosition;
  let x_3523 : vec3<f32> = (x_3519 + vec3<f32>(x_3521.x, x_3521.y, x_3521.z));
  let x_3524 : vec4<f32> = u_xlat8;
  u_xlat8 = vec4<f32>(x_3523.x, x_3523.y, x_3523.z, x_3524.w);
  let x_3526 : vec4<f32> = u_xlat8;
  let x_3528 : vec4<f32> = u_xlat8;
  u_xlat0.x = dot(vec3<f32>(x_3526.x, x_3526.y, x_3526.z), vec3<f32>(x_3528.x, x_3528.y, x_3528.z));
  let x_3533 : f32 = u_xlat0.x;
  u_xlat0.x = max(x_3533, 1.17549435e-37f);
  let x_3537 : f32 = u_xlat0.x;
  u_xlat0.x = inverseSqrt(x_3537);
  let x_3540 : vec3<f32> = u_xlat0;
  let x_3542 : vec4<f32> = u_xlat8;
  let x_3544 : vec3<f32> = (vec3<f32>(x_3540.x, x_3540.x, x_3540.x) * vec3<f32>(x_3542.x, x_3542.y, x_3542.z));
  let x_3545 : vec4<f32> = u_xlat8;
  u_xlat8 = vec4<f32>(x_3544.x, x_3544.y, x_3544.z, x_3545.w);
  let x_3547 : vec3<f32> = u_xlat22;
  let x_3548 : vec4<f32> = u_xlat8;
  u_xlat0.x = dot(x_3547, vec3<f32>(x_3548.x, x_3548.y, x_3548.z));
  let x_3553 : f32 = u_xlat0.x;
  u_xlat0.x = clamp(x_3553, 0.0f, 1.0f);
  let x_3557 : vec4<f32> = x_158.x_MainLightPosition;
  let x_3559 : vec4<f32> = u_xlat8;
  u_xlat2.x = dot(vec3<f32>(x_3557.x, x_3557.y, x_3557.z), vec3<f32>(x_3559.x, x_3559.y, x_3559.z));
  let x_3564 : f32 = u_xlat2.x;
  u_xlat2.x = clamp(x_3564, 0.0f, 1.0f);
  let x_3568 : f32 = u_xlat0.x;
  let x_3570 : f32 = u_xlat0.x;
  u_xlat0.x = (x_3568 * x_3570);
  let x_3574 : f32 = u_xlat0.x;
  let x_3576 : f32 = u_xlat9.x;
  u_xlat0.x = ((x_3574 * x_3576) + 1.000010014f);
  let x_3582 : f32 = u_xlat2.x;
  let x_3584 : f32 = u_xlat2.x;
  u_xlat2.x = (x_3582 * x_3584);
  let x_3588 : f32 = u_xlat0.x;
  let x_3590 : f32 = u_xlat0.x;
  u_xlat0.x = (x_3588 * x_3590);
  let x_3594 : f32 = u_xlat2.x;
  u_xlat2.x = max(x_3594, 0.100000001f);
  let x_3599 : f32 = u_xlat0.x;
  let x_3601 : f32 = u_xlat2.x;
  u_xlat0.x = (x_3599 * x_3601);
  let x_3604 : f32 = u_xlat71;
  let x_3606 : f32 = u_xlat0.x;
  u_xlat0.x = (x_3604 * x_3606);
  let x_3609 : f32 = u_xlat70;
  let x_3611 : f32 = u_xlat0.x;
  u_xlat0.x = (x_3609 / x_3611);
  let x_3614 : vec3<f32> = u_xlat0;
  let x_3618 : vec4<f32> = u_xlat6;
  let x_3620 : vec3<f32> = ((vec3<f32>(x_3614.x, x_3614.x, x_3614.x) * vec3<f32>(0.039999999f, 0.039999999f, 0.039999999f)) + vec3<f32>(x_3618.x, x_3618.y, x_3618.z));
  let x_3621 : vec4<f32> = u_xlat8;
  u_xlat8 = vec4<f32>(x_3620.x, x_3620.y, x_3620.z, x_3621.w);
  let x_3623 : vec4<f32> = u_xlat7;
  let x_3625 : vec4<f32> = u_xlat8;
  let x_3627 : vec3<f32> = (vec3<f32>(x_3623.x, x_3623.y, x_3623.z) * vec3<f32>(x_3625.x, x_3625.y, x_3625.z));
  let x_3628 : vec4<f32> = u_xlat7;
  u_xlat7 = vec4<f32>(x_3627.x, x_3627.y, x_3627.z, x_3628.w);
  let x_3631 : f32 = x_158.x_AdditionalLightsCount.x;
  let x_3633 : f32 = x_95.unity_LightData.y;
  u_xlat0.x = min(x_3631, x_3633);
  let x_3638 : f32 = u_xlat0.x;
  u_xlatu0 = bitcast<u32>(i32(x_3638));
  u_xlat8.x = 0.0f;
  u_xlat8.y = 0.0f;
  u_xlat8.z = 0.0f;
  u_xlatu_loop_1 = 0u;
  loop {
    let x_3650 : u32 = u_xlatu_loop_1;
    let x_3651 : u32 = u_xlatu0;
    if ((x_3650 < x_3651)) {
    } else {
      break;
    }
    let x_3653 : u32 = u_xlatu_loop_1;
    u_xlatu68 = (x_3653 >> 2u);
    let x_3656 : u32 = u_xlatu_loop_1;
    u_xlati69 = bitcast<i32>((x_3656 & 3u));
    let x_3659 : u32 = u_xlatu68;
    let x_3662 : vec4<f32> = x_95.unity_LightIndices[bitcast<i32>(x_3659)];
    let x_3672 : i32 = u_xlati69;
    indexable = array<vec4<u32>, 4u>(vec4<u32>(1065353216u, 0u, 0u, 0u), vec4<u32>(0u, 1065353216u, 0u, 0u), vec4<u32>(0u, 0u, 1065353216u, 0u), vec4<u32>(0u, 0u, 0u, 1065353216u));
    let x_3677 : vec4<u32> = indexable[x_3672];
    u_xlat68 = dot(x_3662, bitcast<vec4<f32>>(x_3677));
    let x_3681 : f32 = u_xlat68;
    u_xlati68 = i32(x_3681);
    let x_3683 : vec3<f32> = vs_INTERP0;
    let x_3695 : i32 = u_xlati68;
    let x_3697 : vec4<f32> = x_3694.x_AdditionalLightsPosition[x_3695];
    let x_3700 : i32 = u_xlati68;
    let x_3702 : vec4<f32> = x_3694.x_AdditionalLightsPosition[x_3700];
    u_xlat31 = ((-(x_3683) * vec3<f32>(x_3697.w, x_3697.w, x_3697.w)) + vec3<f32>(x_3702.x, x_3702.y, x_3702.z));
    let x_3705 : vec3<f32> = u_xlat31;
    let x_3706 : vec3<f32> = u_xlat31;
    u_xlat69 = dot(x_3705, x_3706);
    let x_3708 : f32 = u_xlat69;
    u_xlat69 = max(x_3708, 6.10351562e-05f);
    let x_3711 : f32 = u_xlat69;
    u_xlat27 = inverseSqrt(x_3711);
    let x_3713 : f32 = u_xlat27;
    let x_3715 : vec3<f32> = u_xlat31;
    let x_3716 : vec3<f32> = (vec3<f32>(x_3713, x_3713, x_3713) * x_3715);
    let x_3717 : vec4<f32> = u_xlat10;
    u_xlat10 = vec4<f32>(x_3716.x, x_3716.y, x_3716.z, x_3717.w);
    let x_3719 : f32 = u_xlat69;
    u_xlat72 = (1.0f / x_3719);
    let x_3721 : f32 = u_xlat69;
    let x_3722 : i32 = u_xlati68;
    let x_3724 : f32 = x_3694.x_AdditionalLightsAttenuation[x_3722].x;
    u_xlat69 = (x_3721 * x_3724);
    let x_3726 : f32 = u_xlat69;
    let x_3728 : f32 = u_xlat69;
    u_xlat69 = ((-(x_3726) * x_3728) + 1.0f);
    let x_3731 : f32 = u_xlat69;
    u_xlat69 = max(x_3731, 0.0f);
    let x_3733 : f32 = u_xlat69;
    let x_3734 : f32 = u_xlat69;
    u_xlat69 = (x_3733 * x_3734);
    let x_3736 : f32 = u_xlat69;
    let x_3737 : f32 = u_xlat72;
    u_xlat69 = (x_3736 * x_3737);
    let x_3739 : i32 = u_xlati68;
    let x_3741 : vec4<f32> = x_3694.x_AdditionalLightsSpotDir[x_3739];
    let x_3743 : vec4<f32> = u_xlat10;
    u_xlat72 = dot(vec3<f32>(x_3741.x, x_3741.y, x_3741.z), vec3<f32>(x_3743.x, x_3743.y, x_3743.z));
    let x_3746 : f32 = u_xlat72;
    let x_3747 : i32 = u_xlati68;
    let x_3749 : f32 = x_3694.x_AdditionalLightsAttenuation[x_3747].z;
    let x_3751 : i32 = u_xlati68;
    let x_3753 : f32 = x_3694.x_AdditionalLightsAttenuation[x_3751].w;
    u_xlat72 = ((x_3746 * x_3749) + x_3753);
    let x_3755 : f32 = u_xlat72;
    u_xlat72 = clamp(x_3755, 0.0f, 1.0f);
    let x_3757 : f32 = u_xlat72;
    let x_3758 : f32 = u_xlat72;
    u_xlat72 = (x_3757 * x_3758);
    let x_3760 : f32 = u_xlat69;
    let x_3761 : f32 = u_xlat72;
    u_xlat69 = (x_3760 * x_3761);
    let x_3763 : f32 = u_xlat49;
    let x_3765 : i32 = u_xlati68;
    let x_3767 : vec4<f32> = x_3694.x_AdditionalLightsColor[x_3765];
    let x_3769 : vec3<f32> = (vec3<f32>(x_3763, x_3763, x_3763) * vec3<f32>(x_3767.x, x_3767.y, x_3767.z));
    let x_3770 : vec4<f32> = u_xlat11;
    u_xlat11 = vec4<f32>(x_3769.x, x_3769.y, x_3769.z, x_3770.w);
    let x_3772 : vec3<f32> = u_xlat22;
    let x_3773 : vec4<f32> = u_xlat10;
    u_xlat68 = dot(x_3772, vec3<f32>(x_3773.x, x_3773.y, x_3773.z));
    let x_3776 : f32 = u_xlat68;
    u_xlat68 = clamp(x_3776, 0.0f, 1.0f);
    let x_3778 : f32 = u_xlat68;
    let x_3779 : f32 = u_xlat69;
    u_xlat68 = (x_3778 * x_3779);
    let x_3781 : f32 = u_xlat68;
    let x_3783 : vec4<f32> = u_xlat11;
    let x_3785 : vec3<f32> = (vec3<f32>(x_3781, x_3781, x_3781) * vec3<f32>(x_3783.x, x_3783.y, x_3783.z));
    let x_3786 : vec4<f32> = u_xlat11;
    u_xlat11 = vec4<f32>(x_3785.x, x_3785.y, x_3785.z, x_3786.w);
    let x_3788 : vec3<f32> = u_xlat31;
    let x_3789 : f32 = u_xlat27;
    let x_3792 : vec3<f32> = u_xlat4;
    u_xlat31 = ((x_3788 * vec3<f32>(x_3789, x_3789, x_3789)) + x_3792);
    let x_3794 : vec3<f32> = u_xlat31;
    let x_3795 : vec3<f32> = u_xlat31;
    u_xlat68 = dot(x_3794, x_3795);
    let x_3797 : f32 = u_xlat68;
    u_xlat68 = max(x_3797, 1.17549435e-37f);
    let x_3799 : f32 = u_xlat68;
    u_xlat68 = inverseSqrt(x_3799);
    let x_3801 : f32 = u_xlat68;
    let x_3803 : vec3<f32> = u_xlat31;
    u_xlat31 = (vec3<f32>(x_3801, x_3801, x_3801) * x_3803);
    let x_3805 : vec3<f32> = u_xlat22;
    let x_3806 : vec3<f32> = u_xlat31;
    u_xlat68 = dot(x_3805, x_3806);
    let x_3808 : f32 = u_xlat68;
    u_xlat68 = clamp(x_3808, 0.0f, 1.0f);
    let x_3810 : vec4<f32> = u_xlat10;
    let x_3812 : vec3<f32> = u_xlat31;
    u_xlat69 = dot(vec3<f32>(x_3810.x, x_3810.y, x_3810.z), x_3812);
    let x_3814 : f32 = u_xlat69;
    u_xlat69 = clamp(x_3814, 0.0f, 1.0f);
    let x_3816 : f32 = u_xlat68;
    let x_3817 : f32 = u_xlat68;
    u_xlat68 = (x_3816 * x_3817);
    let x_3819 : f32 = u_xlat68;
    let x_3821 : f32 = u_xlat9.x;
    u_xlat68 = ((x_3819 * x_3821) + 1.000010014f);
    let x_3824 : f32 = u_xlat69;
    let x_3825 : f32 = u_xlat69;
    u_xlat69 = (x_3824 * x_3825);
    let x_3827 : f32 = u_xlat68;
    let x_3828 : f32 = u_xlat68;
    u_xlat68 = (x_3827 * x_3828);
    let x_3830 : f32 = u_xlat69;
    u_xlat69 = max(x_3830, 0.100000001f);
    let x_3832 : f32 = u_xlat68;
    let x_3833 : f32 = u_xlat69;
    u_xlat68 = (x_3832 * x_3833);
    let x_3835 : f32 = u_xlat71;
    let x_3836 : f32 = u_xlat68;
    u_xlat68 = (x_3835 * x_3836);
    let x_3838 : f32 = u_xlat70;
    let x_3839 : f32 = u_xlat68;
    u_xlat68 = (x_3838 / x_3839);
    let x_3841 : f32 = u_xlat68;
    let x_3844 : vec4<f32> = u_xlat6;
    u_xlat31 = ((vec3<f32>(x_3841, x_3841, x_3841) * vec3<f32>(0.039999999f, 0.039999999f, 0.039999999f)) + vec3<f32>(x_3844.x, x_3844.y, x_3844.z));
    let x_3847 : vec3<f32> = u_xlat31;
    let x_3848 : vec4<f32> = u_xlat11;
    let x_3851 : vec4<f32> = u_xlat8;
    let x_3853 : vec3<f32> = ((x_3847 * vec3<f32>(x_3848.x, x_3848.y, x_3848.z)) + vec3<f32>(x_3851.x, x_3851.y, x_3851.z));
    let x_3854 : vec4<f32> = u_xlat8;
    u_xlat8 = vec4<f32>(x_3853.x, x_3853.y, x_3853.z, x_3854.w);

    continuing {
      let x_3856 : u32 = u_xlatu_loop_1;
      u_xlatu_loop_1 = (x_3856 + bitcast<u32>(1i));
    }
  }
  let x_3858 : vec4<f32> = u_xlat3;
  let x_3860 : vec3<f32> = u_xlat5;
  let x_3863 : vec4<f32> = u_xlat7;
  u_xlat0 = ((vec3<f32>(x_3858.x, x_3858.y, x_3858.z) * vec3<f32>(x_3860.x, x_3860.x, x_3860.x)) + vec3<f32>(x_3863.x, x_3863.y, x_3863.z));
  let x_3866 : vec4<f32> = u_xlat8;
  let x_3868 : vec3<f32> = u_xlat0;
  u_xlat0 = (vec3<f32>(x_3866.x, x_3866.y, x_3866.z) + x_3868);
  let x_3870 : vec4<f32> = vs_INTERP4;
  let x_3872 : vec3<f32> = u_xlat1;
  let x_3874 : vec3<f32> = u_xlat0;
  u_xlat0 = ((vec3<f32>(x_3870.w, x_3870.w, x_3870.w) * x_3872) + x_3874);
  let x_3877 : f32 = u_xlat46;
  let x_3878 : f32 = u_xlat46;
  u_xlat66 = (x_3877 * -(x_3878));
  let x_3881 : f32 = u_xlat66;
  u_xlat66 = exp2(x_3881);
  let x_3883 : vec3<f32> = u_xlat0;
  let x_3886 : vec4<f32> = x_158.unity_FogColor;
  u_xlat0 = (x_3883 + -(vec3<f32>(x_3886.x, x_3886.y, x_3886.z)));
  let x_3892 : f32 = u_xlat66;
  let x_3894 : vec3<f32> = u_xlat0;
  let x_3897 : vec4<f32> = x_158.unity_FogColor;
  let x_3899 : vec3<f32> = ((vec3<f32>(x_3892, x_3892, x_3892) * x_3894) + vec3<f32>(x_3897.x, x_3897.y, x_3897.z));
  let x_3900 : vec4<f32> = SV_Target0;
  SV_Target0 = vec4<f32>(x_3899.x, x_3899.y, x_3899.z, x_3900.w);
  let x_3902 : bool = u_xlatb24;
  let x_3903 : f32 = u_xlat67;
  SV_Target0.w = select(1.0f, x_3903, x_3902);
  let x_3909 : u32 = x_158.x_RenderingLayerMaxInt;
  let x_3911 : f32 = x_95.unity_RenderingLayer.x;
  u_xlatu0 = (x_3909 & bitcast<u32>(x_3911));
  let x_3914 : u32 = u_xlatu0;
  u_xlat0.x = f32(x_3914);
  let x_3919 : f32 = u_xlat0.x;
  let x_3921 : f32 = x_158.x_RenderingLayerRcpMaxInt;
  SV_Target1.x = (x_3919 * x_3921);
  let x_3925 : f32 = SV_Target1.x;
  SV_Target1.x = clamp(x_3925, 0.0f, 1.0f);
  let x_3929 : vec4<f32> = SV_Target1;
  SV_Target1 = vec4<f32>(x_3929.x, vec3<f32>(0.0f, 0.0f, 0.0f).x, vec3<f32>(0.0f, 0.0f, 0.0f).y, vec3<f32>(0.0f, 0.0f, 0.0f).z);
  return;
}

struct main_out {
  @location(0)
  SV_Target0_1 : vec4<f32>,
  @location(1)
  SV_Target1_1 : vec4<f32>,
}

@fragment
fn main(@builtin(position) gl_FragCoord_param : vec4<f32>, @location(1) vs_INTERP1_param : vec3<f32>, @location(2) vs_INTERP2_param : vec4<f32>, @location(0) vs_INTERP0_param : vec3<f32>, @location(3) vs_INTERP3_param : vec4<f32>, @location(4) vs_INTERP4_param : vec4<f32>, @location(5) vs_INTERP5_param : vec2<f32>, @location(6) vs_INTERP9_param : vec4<f32>) -> main_out {
  gl_FragCoord = gl_FragCoord_param;
  vs_INTERP1 = vs_INTERP1_param;
  vs_INTERP2 = vs_INTERP2_param;
  vs_INTERP0 = vs_INTERP0_param;
  vs_INTERP3 = vs_INTERP3_param;
  vs_INTERP4 = vs_INTERP4_param;
  vs_INTERP5 = vs_INTERP5_param;
  vs_INTERP9 = vs_INTERP9_param;
  main_1();
  return main_out(SV_Target0, SV_Target1);
}

