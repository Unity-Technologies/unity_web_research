struct PGlobals {
  x_ScaledScreenParams : vec4<f32>,
  x_GlobalMipBias : vec2<f32>,
  @size(8)
  padding : u32,
  x_MainLightPosition : vec4<f32>,
  x_MainLightColor : vec4<f32>,
  x_AmbientOcclusionParam : vec4<f32>,
  x_AdditionalLightsCount : vec4<f32>,
  x_RenderingLayerMaxInt : u32,
  x_RenderingLayerRcpMaxInt : f32,
  @size(8)
  padding_1 : u32,
  x_WorldSpaceCameraPos : vec3<f32>,
  @size(4)
  padding_2 : u32,
  x_ProjectionParams : vec4<f32>,
  unity_OrthoParams : vec4<f32>,
  x_ScaleBiasRt : vec4<f32>,
  unity_FogParams : vec4<f32>,
  unity_FogColor : vec4<f32>,
  unity_MatrixV : mat4x4<f32>,
}

struct UnityPerMaterial {
  x_MainTex_TexelSize : vec4<f32>,
  x_MRLL_TexelSize : vec4<f32>,
  x_BumpMap_TexelSize : vec4<f32>,
  x_Color1 : vec4<f32>,
  x_Color2 : vec4<f32>,
}

type Arr = array<vec4<f32>, 2u>;

struct UnityPerDraw {
  unity_ObjectToWorld : mat4x4<f32>,
  unity_WorldToObject : mat4x4<f32>,
  unity_LODFade : vec4<f32>,
  unity_WorldTransformParams : vec4<f32>,
  unity_RenderingLayer : vec4<f32>,
  unity_LightData : vec4<f32>,
  unity_LightIndices : Arr,
  unity_ProbesOcclusion : vec4<f32>,
  unity_SpecCube0_HDR : vec4<f32>,
  unity_SpecCube1_HDR : vec4<f32>,
  unity_SpecCube0_BoxMax : vec4<f32>,
  unity_SpecCube0_BoxMin : vec4<f32>,
  unity_SpecCube0_ProbePosition : vec4<f32>,
  unity_SpecCube1_BoxMax : vec4<f32>,
  unity_SpecCube1_BoxMin : vec4<f32>,
  unity_SpecCube1_ProbePosition : vec4<f32>,
  unity_LightmapST : vec4<f32>,
  unity_DynamicLightmapST : vec4<f32>,
  unity_SHAr : vec4<f32>,
  unity_SHAg : vec4<f32>,
  unity_SHAb : vec4<f32>,
  unity_SHBr : vec4<f32>,
  unity_SHBg : vec4<f32>,
  unity_SHBb : vec4<f32>,
  unity_SHC : vec4<f32>,
  unity_RendererBounds_Min : vec4<f32>,
  unity_RendererBounds_Max : vec4<f32>,
  unity_MatrixPreviousM : mat4x4<f32>,
  unity_MatrixPreviousMI : mat4x4<f32>,
  unity_MotionVectorsParams : vec4<f32>,
  unity_SpriteColor : vec4<f32>,
  unity_SpriteProps : vec4<f32>,
}

type Arr_1 = array<mat4x4<f32>, 5u>;

struct MainLightShadows {
  x_MainLightWorldToShadow : Arr_1,
  x_CascadeShadowSplitSpheres0 : vec4<f32>,
  x_CascadeShadowSplitSpheres1 : vec4<f32>,
  x_CascadeShadowSplitSpheres2 : vec4<f32>,
  x_CascadeShadowSplitSpheres3 : vec4<f32>,
  x_CascadeShadowSplitSphereRadii : vec4<f32>,
  x_MainLightShadowOffset0 : vec4<f32>,
  x_MainLightShadowOffset1 : vec4<f32>,
  x_MainLightShadowParams : vec4<f32>,
  x_MainLightShadowmapSize : vec4<f32>,
}

type Arr_2 = array<vec4<f32>, 256u>;

type Arr_3 = array<vec4<f32>, 256u>;

type Arr_4 = array<vec4<f32>, 256u>;

type Arr_5 = array<vec4<f32>, 256u>;

type Arr_6 = array<vec4<f32>, 256u>;

struct strided_arr {
  @size(16)
  el : f32,
}

type Arr_7 = array<strided_arr, 256u>;

struct AdditionalLights {
  x_AdditionalLightsPosition : Arr_6,
  x_AdditionalLightsColor : Arr_6,
  x_AdditionalLightsAttenuation : Arr_6,
  x_AdditionalLightsSpotDir : Arr_6,
  x_AdditionalLightsOcclusionProbes : Arr_6,
  x_AdditionalLightsLayerMasks : Arr_7,
}

var<private> gl_FragCoord : vec4<f32>;

@group(0) @binding(5) var x_MainTex : texture_2d<f32>;

@group(0) @binding(12) var samplerSamplerState_Trilinear_Clamp : sampler;

var<private> vs_INTERP3 : vec4<f32>;

@group(1) @binding(0) var<uniform> x_44 : PGlobals;

@group(0) @binding(6) var x_MRLL : texture_2d<f32>;

@group(1) @binding(4) var<uniform> x_68 : UnityPerMaterial;

@group(0) @binding(7) var x_BumpMap : texture_2d<f32>;

var<private> vs_INTERP2 : vec4<f32>;

@group(1) @binding(2) var<uniform> x_274 : UnityPerDraw;

var<private> vs_INTERP1 : vec3<f32>;

var<private> vs_INTERP0 : vec3<f32>;

@group(1) @binding(3) var<uniform> x_391 : MainLightShadows;

@group(0) @binding(2) var unity_LightmapInd : texture_2d<f32>;

@group(0) @binding(9) var samplerunity_Lightmap : sampler;

var<private> vs_INTERP4 : vec2<f32>;

@group(0) @binding(1) var unity_Lightmap : texture_2d<f32>;

@group(0) @binding(3) var x_ScreenSpaceOcclusionTexture : texture_2d<f32>;

@group(0) @binding(10) var sampler_ScreenSpaceOcclusionTexture : sampler;

@group(0) @binding(4) var x_MainLightShadowmapTexture : texture_depth_2d;

@group(0) @binding(11) var sampler_MainLightShadowmapTexture : sampler_comparison;

@group(0) @binding(0) var unity_SpecCube0 : texture_cube<f32>;

@group(0) @binding(8) var samplerunity_SpecCube0 : sampler;

@group(1) @binding(1) var<uniform> x_2434 : AdditionalLights;

var<private> SV_Target0 : vec4<f32>;

var<private> SV_Target1 : vec4<f32>;

fn main_1() {
  var hlslcc_FragCoord : vec4<f32>;
  var u_xlat0 : vec4<f32>;
  var u_xlat1 : vec4<f32>;
  var u_xlat2 : vec3<f32>;
  var u_xlat43 : f32;
  var u_xlat3 : vec3<f32>;
  var u_xlat4 : vec4<f32>;
  var u_xlatb4 : vec4<bool>;
  var u_xlat5 : vec4<f32>;
  var u_xlat21 : vec2<f32>;
  var u_xlatb22 : vec3<bool>;
  var u_xlat22 : vec3<f32>;
  var u_xlatb21 : bool;
  var u_xlat42 : f32;
  var x_378 : vec3<f32>;
  var u_xlat6 : vec4<f32>;
  var u_xlat7 : vec3<f32>;
  var u_xlatu21 : u32;
  var u_xlati21 : i32;
  var u_xlat65 : f32;
  var u_xlat66 : f32;
  var u_xlat67 : f32;
  var u_xlat68 : f32;
  var u_xlat63 : f32;
  var u_xlatb67 : bool;
  var txVec0 : vec3<f32>;
  var u_xlat8 : vec4<f32>;
  var txVec1 : vec3<f32>;
  var txVec2 : vec3<f32>;
  var txVec3 : vec3<f32>;
  var u_xlatb6 : bool;
  var u_xlat48 : vec2<f32>;
  var u_xlat9 : vec4<f32>;
  var u_xlat51 : vec2<f32>;
  var u_xlat10 : vec4<f32>;
  var u_xlat11 : vec4<f32>;
  var u_xlat12 : vec4<f32>;
  var u_xlat13 : vec4<f32>;
  var u_xlat14 : vec4<f32>;
  var u_xlat15 : vec4<f32>;
  var txVec4 : vec3<f32>;
  var u_xlat27 : f32;
  var txVec5 : vec3<f32>;
  var u_xlat70 : f32;
  var txVec6 : vec3<f32>;
  var txVec7 : vec3<f32>;
  var txVec8 : vec3<f32>;
  var txVec9 : vec3<f32>;
  var txVec10 : vec3<f32>;
  var txVec11 : vec3<f32>;
  var txVec12 : vec3<f32>;
  var u_xlat29 : vec3<f32>;
  var u_xlat16 : vec4<f32>;
  var u_xlat17 : vec4<f32>;
  var u_xlat30 : vec2<f32>;
  var u_xlat57 : vec2<f32>;
  var u_xlat52 : vec2<f32>;
  var u_xlat18 : vec4<f32>;
  var u_xlat19 : vec4<f32>;
  var u_xlat20 : vec4<f32>;
  var txVec13 : vec3<f32>;
  var txVec14 : vec3<f32>;
  var txVec15 : vec3<f32>;
  var txVec16 : vec3<f32>;
  var u_xlat69 : f32;
  var txVec17 : vec3<f32>;
  var txVec18 : vec3<f32>;
  var txVec19 : vec3<f32>;
  var txVec20 : vec3<f32>;
  var txVec21 : vec3<f32>;
  var txVec22 : vec3<f32>;
  var txVec23 : vec3<f32>;
  var txVec24 : vec3<f32>;
  var txVec25 : vec3<f32>;
  var txVec26 : vec3<f32>;
  var txVec27 : vec3<f32>;
  var txVec28 : vec3<f32>;
  var txVec29 : vec3<f32>;
  var u_xlatb25 : bool;
  var u_xlatb46 : bool;
  var x_2061 : f32;
  var u_xlat25 : vec3<f32>;
  var u_xlat46 : f32;
  var u_xlatu42 : u32;
  var u_xlatu_loop_1 : u32;
  var u_xlatu67 : u32;
  var u_xlati69 : i32;
  var indexable : array<vec4<u32>, 4u>;
  var u_xlati67 : i32;
  var u_xlat71 : f32;
  var u_xlatu0 : u32;
  var u_xlat_precise_vec4 : vec4<f32>;
  var u_xlat_precise_ivec4 : vec4<i32>;
  var u_xlat_precise_bvec4 : vec4<bool>;
  var u_xlat_precise_uvec4 : vec4<u32>;
  let x_13 : vec4<f32> = gl_FragCoord;
  let x_14 : vec3<f32> = vec3<f32>(x_13.x, x_13.y, x_13.z);
  let x_20 : f32 = gl_FragCoord.w;
  hlslcc_FragCoord = vec4<f32>(x_14.x, x_14.y, x_14.z, (1.0f / x_20));
  let x_39 : vec4<f32> = vs_INTERP3;
  let x_50 : f32 = x_44.x_GlobalMipBias.x;
  let x_51 : vec4<f32> = textureSampleBias(x_MainTex, samplerSamplerState_Trilinear_Clamp, vec2<f32>(x_39.x, x_39.y), x_50);
  u_xlat0 = x_51;
  let x_57 : vec4<f32> = vs_INTERP3;
  let x_60 : f32 = x_44.x_GlobalMipBias.x;
  let x_61 : vec4<f32> = textureSampleBias(x_MRLL, samplerSamplerState_Trilinear_Clamp, vec2<f32>(x_57.x, x_57.y), x_60);
  u_xlat1 = x_61;
  let x_64 : vec4<f32> = u_xlat1;
  let x_72 : vec4<f32> = x_68.x_Color2;
  u_xlat2 = (vec3<f32>(x_64.w, x_64.w, x_64.w) * vec3<f32>(x_72.x, x_72.y, x_72.z));
  let x_77 : vec4<f32> = x_68.x_Color1;
  let x_79 : vec4<f32> = u_xlat1;
  let x_82 : vec3<f32> = u_xlat2;
  u_xlat2 = ((vec3<f32>(x_77.x, x_77.y, x_77.z) * vec3<f32>(x_79.z, x_79.z, x_79.z)) + x_82);
  let x_87 : f32 = u_xlat1.w;
  let x_90 : f32 = u_xlat1.z;
  u_xlat43 = (x_87 + x_90);
  let x_92 : f32 = u_xlat43;
  u_xlat43 = clamp(x_92, 0.0f, 1.0f);
  let x_96 : vec4<f32> = u_xlat0;
  u_xlat3 = (-(vec3<f32>(x_96.x, x_96.y, x_96.z)) + vec3<f32>(1.0f, 1.0f, 1.0f));
  let x_101 : vec3<f32> = u_xlat3;
  let x_102 : vec3<f32> = u_xlat3;
  u_xlat3 = (x_101 + x_102);
  let x_105 : vec3<f32> = u_xlat2;
  let x_107 : vec3<f32> = (-(x_105) + vec3<f32>(1.0f, 1.0f, 1.0f));
  let x_108 : vec4<f32> = u_xlat4;
  u_xlat4 = vec4<f32>(x_107.x, x_107.y, x_107.z, x_108.w);
  let x_110 : vec3<f32> = u_xlat3;
  let x_112 : vec4<f32> = u_xlat4;
  u_xlat3 = ((-(x_110) * vec3<f32>(x_112.x, x_112.y, x_112.z)) + vec3<f32>(1.0f, 1.0f, 1.0f));
  let x_116 : vec4<f32> = u_xlat0;
  let x_118 : vec3<f32> = u_xlat2;
  u_xlat2 = (vec3<f32>(x_116.x, x_116.y, x_116.z) * x_118);
  let x_120 : vec3<f32> = u_xlat2;
  let x_121 : vec3<f32> = u_xlat2;
  u_xlat2 = (x_120 + x_121);
  let x_129 : vec4<f32> = u_xlat0;
  let x_131 : vec4<bool> = (vec4<f32>(0.5f, 0.5f, 0.5f, 0.0f) >= vec4<f32>(x_129.x, x_129.y, x_129.z, x_129.x));
  let x_133 : vec3<bool> = vec3<bool>(x_131.x, x_131.y, x_131.z);
  let x_134 : vec4<bool> = u_xlatb4;
  u_xlatb4 = vec4<bool>(x_133.x, x_133.y, x_133.z, x_134.w);
  let x_139 : bool = u_xlatb4.x;
  u_xlat5.x = select(0.0f, 1.0f, x_139);
  let x_144 : bool = u_xlatb4.y;
  u_xlat5.y = select(0.0f, 1.0f, x_144);
  let x_148 : bool = u_xlatb4.z;
  u_xlat5.z = select(0.0f, 1.0f, x_148);
  let x_152 : bool = u_xlatb4.x;
  u_xlat4.x = select(1.0f, 0.0f, x_152);
  let x_156 : bool = u_xlatb4.y;
  u_xlat4.y = select(1.0f, 0.0f, x_156);
  let x_160 : bool = u_xlatb4.z;
  u_xlat4.z = select(1.0f, 0.0f, x_160);
  let x_163 : vec3<f32> = u_xlat3;
  let x_164 : vec4<f32> = u_xlat4;
  u_xlat3 = (x_163 * vec3<f32>(x_164.x, x_164.y, x_164.z));
  let x_167 : vec3<f32> = u_xlat2;
  let x_168 : vec4<f32> = u_xlat5;
  let x_171 : vec3<f32> = u_xlat3;
  u_xlat2 = ((x_167 * vec3<f32>(x_168.x, x_168.y, x_168.z)) + x_171);
  let x_173 : vec4<f32> = u_xlat0;
  let x_176 : vec3<f32> = u_xlat2;
  u_xlat2 = (-(vec3<f32>(x_173.x, x_173.y, x_173.z)) + x_176);
  let x_178 : f32 = u_xlat43;
  let x_180 : vec3<f32> = u_xlat2;
  let x_182 : vec4<f32> = u_xlat0;
  u_xlat2 = ((vec3<f32>(x_178, x_178, x_178) * x_180) + vec3<f32>(x_182.x, x_182.y, x_182.z));
  let x_186 : f32 = u_xlat0.x;
  u_xlat0.x = (x_186 + -0.150000006f);
  let x_191 : f32 = u_xlat0.x;
  u_xlat0.x = ceil(x_191);
  let x_195 : f32 = u_xlat0.x;
  u_xlat0.x = (-(x_195) + 1.0f);
  let x_199 : vec4<f32> = u_xlat0;
  let x_204 : vec3<f32> = u_xlat2;
  u_xlat2 = ((vec3<f32>(x_199.x, x_199.x, x_199.x) * vec3<f32>(0.400000006f, 0.400000006f, 0.400000006f)) + x_204);
  let x_210 : vec4<f32> = vs_INTERP3;
  let x_213 : f32 = x_44.x_GlobalMipBias.x;
  let x_214 : vec4<f32> = textureSampleBias(x_BumpMap, samplerSamplerState_Trilinear_Clamp, vec2<f32>(x_210.x, x_210.y), x_213);
  u_xlat3 = vec3<f32>(x_214.x, x_214.y, x_214.w);
  let x_217 : f32 = u_xlat3.x;
  let x_219 : f32 = u_xlat3.z;
  u_xlat3.x = (x_217 * x_219);
  let x_224 : vec3<f32> = u_xlat3;
  u_xlat21 = ((vec2<f32>(x_224.x, x_224.y) * vec2<f32>(2.0f, 2.0f)) + vec2<f32>(-1.0f, -1.0f));
  let x_232 : vec2<f32> = u_xlat21;
  let x_233 : vec2<f32> = u_xlat21;
  u_xlat43 = dot(x_232, x_233);
  let x_235 : f32 = u_xlat43;
  u_xlat43 = min(x_235, 1.0f);
  let x_237 : f32 = u_xlat43;
  u_xlat43 = (-(x_237) + 1.0f);
  let x_240 : f32 = u_xlat43;
  u_xlat43 = sqrt(x_240);
  let x_242 : f32 = u_xlat43;
  u_xlat43 = max(x_242, 1.00000002e-16f);
  let x_246 : f32 = u_xlat1.x;
  let x_248 : f32 = u_xlat0.x;
  u_xlat0.x = (x_246 + x_248);
  let x_252 : f32 = u_xlat0.x;
  u_xlat0.x = clamp(x_252, 0.0f, 1.0f);
  let x_256 : f32 = u_xlat1.y;
  u_xlat1.x = max(x_256, 0.0f);
  let x_260 : f32 = u_xlat1.x;
  u_xlat1.x = min(x_260, 0.850000024f);
  let x_268 : f32 = vs_INTERP2.w;
  u_xlatb22.x = (0.0f < x_268);
  let x_276 : f32 = x_274.unity_WorldTransformParams.w;
  u_xlatb22.z = (x_276 >= 0.0f);
  let x_281 : bool = u_xlatb22.x;
  u_xlat22.x = select(-1.0f, 1.0f, x_281);
  let x_285 : bool = u_xlatb22.z;
  u_xlat22.z = select(-1.0f, 1.0f, x_285);
  let x_289 : f32 = u_xlat22.z;
  let x_291 : f32 = u_xlat22.x;
  u_xlat22.x = (x_289 * x_291);
  let x_296 : vec3<f32> = vs_INTERP1;
  let x_298 : vec4<f32> = vs_INTERP2;
  u_xlat3 = (vec3<f32>(x_296.z, x_296.x, x_296.y) * vec3<f32>(x_298.y, x_298.z, x_298.x));
  let x_301 : vec3<f32> = vs_INTERP1;
  let x_303 : vec4<f32> = vs_INTERP2;
  let x_306 : vec3<f32> = u_xlat3;
  u_xlat3 = ((vec3<f32>(x_301.y, x_301.z, x_301.x) * vec3<f32>(x_303.z, x_303.x, x_303.y)) + -(x_306));
  let x_309 : vec3<f32> = u_xlat22;
  let x_311 : vec3<f32> = u_xlat3;
  u_xlat3 = (vec3<f32>(x_309.x, x_309.x, x_309.x) * x_311);
  let x_313 : vec2<f32> = u_xlat21;
  let x_315 : vec3<f32> = u_xlat3;
  u_xlat3 = (vec3<f32>(x_313.y, x_313.y, x_313.y) * x_315);
  let x_317 : vec2<f32> = u_xlat21;
  let x_319 : vec4<f32> = vs_INTERP2;
  let x_322 : vec3<f32> = u_xlat3;
  u_xlat3 = ((vec3<f32>(x_317.x, x_317.x, x_317.x) * vec3<f32>(x_319.x, x_319.y, x_319.z)) + x_322);
  let x_324 : f32 = u_xlat43;
  let x_326 : vec3<f32> = vs_INTERP1;
  let x_328 : vec3<f32> = u_xlat3;
  u_xlat22 = ((vec3<f32>(x_324, x_324, x_324) * x_326) + x_328);
  let x_330 : vec3<f32> = u_xlat22;
  let x_331 : vec3<f32> = u_xlat22;
  u_xlat21.x = dot(x_330, x_331);
  let x_335 : f32 = u_xlat21.x;
  u_xlat21.x = inverseSqrt(x_335);
  let x_338 : vec2<f32> = u_xlat21;
  let x_340 : vec3<f32> = u_xlat22;
  u_xlat22 = (vec3<f32>(x_338.x, x_338.x, x_338.x) * x_340);
  let x_345 : f32 = x_44.unity_OrthoParams.w;
  u_xlatb21 = (x_345 == 0.0f);
  let x_348 : vec3<f32> = vs_INTERP0;
  let x_353 : vec3<f32> = x_44.x_WorldSpaceCameraPos;
  u_xlat3 = (-(x_348) + x_353);
  let x_356 : vec3<f32> = u_xlat3;
  let x_357 : vec3<f32> = u_xlat3;
  u_xlat42 = dot(x_356, x_357);
  let x_359 : f32 = u_xlat42;
  u_xlat42 = inverseSqrt(x_359);
  let x_361 : f32 = u_xlat42;
  let x_363 : vec3<f32> = u_xlat3;
  u_xlat3 = (vec3<f32>(x_361, x_361, x_361) * x_363);
  let x_368 : f32 = x_44.unity_MatrixV[0i].z;
  u_xlat4.x = x_368;
  let x_371 : f32 = x_44.unity_MatrixV[1i].z;
  u_xlat4.y = x_371;
  let x_375 : f32 = x_44.unity_MatrixV[2i].z;
  u_xlat4.z = x_375;
  let x_377 : bool = u_xlatb21;
  if (x_377) {
    let x_381 : vec3<f32> = u_xlat3;
    x_378 = x_381;
  } else {
    let x_383 : vec4<f32> = u_xlat4;
    x_378 = vec3<f32>(x_383.x, x_383.y, x_383.z);
  }
  let x_385 : vec3<f32> = x_378;
  u_xlat3 = x_385;
  let x_386 : vec3<f32> = vs_INTERP0;
  let x_393 : vec4<f32> = x_391.x_CascadeShadowSplitSpheres0;
  let x_396 : vec3<f32> = (x_386 + -(vec3<f32>(x_393.x, x_393.y, x_393.z)));
  let x_397 : vec4<f32> = u_xlat4;
  u_xlat4 = vec4<f32>(x_396.x, x_396.y, x_396.z, x_397.w);
  let x_399 : vec3<f32> = vs_INTERP0;
  let x_401 : vec4<f32> = x_391.x_CascadeShadowSplitSpheres1;
  let x_404 : vec3<f32> = (x_399 + -(vec3<f32>(x_401.x, x_401.y, x_401.z)));
  let x_405 : vec4<f32> = u_xlat5;
  u_xlat5 = vec4<f32>(x_404.x, x_404.y, x_404.z, x_405.w);
  let x_408 : vec3<f32> = vs_INTERP0;
  let x_410 : vec4<f32> = x_391.x_CascadeShadowSplitSpheres2;
  let x_413 : vec3<f32> = (x_408 + -(vec3<f32>(x_410.x, x_410.y, x_410.z)));
  let x_414 : vec4<f32> = u_xlat6;
  u_xlat6 = vec4<f32>(x_413.x, x_413.y, x_413.z, x_414.w);
  let x_417 : vec3<f32> = vs_INTERP0;
  let x_419 : vec4<f32> = x_391.x_CascadeShadowSplitSpheres3;
  u_xlat7 = (x_417 + -(vec3<f32>(x_419.x, x_419.y, x_419.z)));
  let x_423 : vec4<f32> = u_xlat4;
  let x_425 : vec4<f32> = u_xlat4;
  u_xlat4.x = dot(vec3<f32>(x_423.x, x_423.y, x_423.z), vec3<f32>(x_425.x, x_425.y, x_425.z));
  let x_429 : vec4<f32> = u_xlat5;
  let x_431 : vec4<f32> = u_xlat5;
  u_xlat4.y = dot(vec3<f32>(x_429.x, x_429.y, x_429.z), vec3<f32>(x_431.x, x_431.y, x_431.z));
  let x_435 : vec4<f32> = u_xlat6;
  let x_437 : vec4<f32> = u_xlat6;
  u_xlat4.z = dot(vec3<f32>(x_435.x, x_435.y, x_435.z), vec3<f32>(x_437.x, x_437.y, x_437.z));
  let x_441 : vec3<f32> = u_xlat7;
  let x_442 : vec3<f32> = u_xlat7;
  u_xlat4.w = dot(x_441, x_442);
  let x_445 : vec4<f32> = u_xlat4;
  let x_448 : vec4<f32> = x_391.x_CascadeShadowSplitSphereRadii;
  u_xlatb4 = (x_445 < x_448);
  let x_451 : bool = u_xlatb4.x;
  u_xlat5.x = select(0.0f, 1.0f, x_451);
  let x_455 : bool = u_xlatb4.y;
  u_xlat5.y = select(0.0f, 1.0f, x_455);
  let x_459 : bool = u_xlatb4.z;
  u_xlat5.z = select(0.0f, 1.0f, x_459);
  let x_463 : bool = u_xlatb4.w;
  u_xlat5.w = select(0.0f, 1.0f, x_463);
  let x_467 : bool = u_xlatb4.x;
  u_xlat4.x = select(-0.0f, -1.0f, x_467);
  let x_472 : bool = u_xlatb4.y;
  u_xlat4.y = select(-0.0f, -1.0f, x_472);
  let x_476 : bool = u_xlatb4.z;
  u_xlat4.z = select(-0.0f, -1.0f, x_476);
  let x_479 : vec4<f32> = u_xlat4;
  let x_481 : vec4<f32> = u_xlat5;
  let x_483 : vec3<f32> = (vec3<f32>(x_479.x, x_479.y, x_479.z) + vec3<f32>(x_481.y, x_481.z, x_481.w));
  let x_484 : vec4<f32> = u_xlat4;
  u_xlat4 = vec4<f32>(x_483.x, x_483.y, x_483.z, x_484.w);
  let x_486 : vec4<f32> = u_xlat4;
  let x_489 : vec3<f32> = max(vec3<f32>(x_486.x, x_486.y, x_486.z), vec3<f32>(0.0f, 0.0f, 0.0f));
  let x_490 : vec4<f32> = u_xlat5;
  u_xlat5 = vec4<f32>(x_490.x, x_489.x, x_489.y, x_489.z);
  let x_492 : vec4<f32> = u_xlat5;
  u_xlat21.x = dot(x_492, vec4<f32>(4.0f, 3.0f, 2.0f, 1.0f));
  let x_499 : f32 = u_xlat21.x;
  u_xlat21.x = (-(x_499) + 4.0f);
  let x_506 : f32 = u_xlat21.x;
  u_xlatu21 = u32(x_506);
  let x_510 : u32 = u_xlatu21;
  u_xlati21 = (bitcast<i32>(x_510) << bitcast<u32>(2i));
  let x_513 : vec3<f32> = vs_INTERP0;
  let x_515 : i32 = u_xlati21;
  let x_518 : i32 = u_xlati21;
  let x_522 : vec4<f32> = x_391.x_MainLightWorldToShadow[((x_515 + 1i) / 4i)][((x_518 + 1i) % 4i)];
  let x_524 : vec3<f32> = (vec3<f32>(x_513.y, x_513.y, x_513.y) * vec3<f32>(x_522.x, x_522.y, x_522.z));
  let x_525 : vec4<f32> = u_xlat4;
  u_xlat4 = vec4<f32>(x_524.x, x_524.y, x_524.z, x_525.w);
  let x_527 : i32 = u_xlati21;
  let x_529 : i32 = u_xlati21;
  let x_532 : vec4<f32> = x_391.x_MainLightWorldToShadow[(x_527 / 4i)][(x_529 % 4i)];
  let x_534 : vec3<f32> = vs_INTERP0;
  let x_537 : vec4<f32> = u_xlat4;
  let x_539 : vec3<f32> = ((vec3<f32>(x_532.x, x_532.y, x_532.z) * vec3<f32>(x_534.x, x_534.x, x_534.x)) + vec3<f32>(x_537.x, x_537.y, x_537.z));
  let x_540 : vec4<f32> = u_xlat4;
  u_xlat4 = vec4<f32>(x_539.x, x_539.y, x_539.z, x_540.w);
  let x_542 : i32 = u_xlati21;
  let x_545 : i32 = u_xlati21;
  let x_549 : vec4<f32> = x_391.x_MainLightWorldToShadow[((x_542 + 2i) / 4i)][((x_545 + 2i) % 4i)];
  let x_551 : vec3<f32> = vs_INTERP0;
  let x_554 : vec4<f32> = u_xlat4;
  let x_556 : vec3<f32> = ((vec3<f32>(x_549.x, x_549.y, x_549.z) * vec3<f32>(x_551.z, x_551.z, x_551.z)) + vec3<f32>(x_554.x, x_554.y, x_554.z));
  let x_557 : vec4<f32> = u_xlat4;
  u_xlat4 = vec4<f32>(x_556.x, x_556.y, x_556.z, x_557.w);
  let x_559 : vec4<f32> = u_xlat4;
  let x_561 : i32 = u_xlati21;
  let x_564 : i32 = u_xlati21;
  let x_568 : vec4<f32> = x_391.x_MainLightWorldToShadow[((x_561 + 3i) / 4i)][((x_564 + 3i) % 4i)];
  let x_570 : vec3<f32> = (vec3<f32>(x_559.x, x_559.y, x_559.z) + vec3<f32>(x_568.x, x_568.y, x_568.z));
  let x_571 : vec4<f32> = u_xlat4;
  u_xlat4 = vec4<f32>(x_570.x, x_570.y, x_570.z, x_571.w);
  let x_574 : f32 = vs_INTERP0.y;
  let x_576 : f32 = x_44.unity_MatrixV[1i].z;
  u_xlat21.x = (x_574 * x_576);
  let x_580 : f32 = x_44.unity_MatrixV[0i].z;
  let x_582 : f32 = vs_INTERP0.x;
  let x_585 : f32 = u_xlat21.x;
  u_xlat21.x = ((x_580 * x_582) + x_585);
  let x_589 : f32 = x_44.unity_MatrixV[2i].z;
  let x_591 : f32 = vs_INTERP0.z;
  let x_594 : f32 = u_xlat21.x;
  u_xlat21.x = ((x_589 * x_591) + x_594);
  let x_598 : f32 = u_xlat21.x;
  let x_600 : f32 = x_44.unity_MatrixV[3i].z;
  u_xlat21.x = (x_598 + x_600);
  let x_604 : f32 = u_xlat21.x;
  let x_608 : f32 = x_44.x_ProjectionParams.y;
  u_xlat21.x = (-(x_604) + -(x_608));
  let x_613 : f32 = u_xlat21.x;
  u_xlat21.x = max(x_613, 0.0f);
  let x_617 : f32 = u_xlat21.x;
  let x_620 : f32 = x_44.unity_FogParams.x;
  u_xlat21.x = (x_617 * x_620);
  let x_630 : vec2<f32> = vs_INTERP4;
  let x_632 : f32 = x_44.x_GlobalMipBias.x;
  let x_633 : vec4<f32> = textureSampleBias(unity_LightmapInd, samplerunity_Lightmap, x_630, x_632);
  u_xlat5 = x_633;
  let x_638 : vec2<f32> = vs_INTERP4;
  let x_640 : f32 = x_44.x_GlobalMipBias.x;
  let x_641 : vec4<f32> = textureSampleBias(unity_Lightmap, samplerunity_Lightmap, x_638, x_640);
  let x_642 : vec3<f32> = vec3<f32>(x_641.x, x_641.y, x_641.z);
  let x_643 : vec4<f32> = u_xlat6;
  u_xlat6 = vec4<f32>(x_642.x, x_642.y, x_642.z, x_643.w);
  let x_645 : vec4<f32> = u_xlat5;
  let x_649 : vec3<f32> = (vec3<f32>(x_645.x, x_645.y, x_645.z) + vec3<f32>(-0.5f, -0.5f, -0.5f));
  let x_650 : vec4<f32> = u_xlat5;
  u_xlat5 = vec4<f32>(x_649.x, x_649.y, x_649.z, x_650.w);
  let x_652 : vec3<f32> = u_xlat22;
  let x_653 : vec4<f32> = u_xlat5;
  u_xlat42 = dot(x_652, vec3<f32>(x_653.x, x_653.y, x_653.z));
  let x_656 : f32 = u_xlat42;
  u_xlat42 = (x_656 + 0.5f);
  let x_658 : f32 = u_xlat42;
  let x_660 : vec4<f32> = u_xlat6;
  let x_662 : vec3<f32> = (vec3<f32>(x_658, x_658, x_658) * vec3<f32>(x_660.x, x_660.y, x_660.z));
  let x_663 : vec4<f32> = u_xlat5;
  u_xlat5 = vec4<f32>(x_662.x, x_662.y, x_662.z, x_663.w);
  let x_666 : f32 = u_xlat5.w;
  u_xlat42 = max(x_666, 0.0001f);
  let x_669 : vec4<f32> = u_xlat5;
  let x_671 : f32 = u_xlat42;
  let x_673 : vec3<f32> = (vec3<f32>(x_669.x, x_669.y, x_669.z) / vec3<f32>(x_671, x_671, x_671));
  let x_674 : vec4<f32> = u_xlat5;
  u_xlat5 = vec4<f32>(x_673.x, x_673.y, x_673.z, x_674.w);
  let x_678 : vec4<f32> = x_44.x_ScaledScreenParams;
  let x_679 : vec2<f32> = vec2<f32>(x_678.x, x_678.y);
  let x_683 : vec2<f32> = (vec2<f32>(1.0f, 1.0f) / vec2<f32>(x_679.x, x_679.y));
  let x_684 : vec4<f32> = u_xlat6;
  u_xlat6 = vec4<f32>(x_683.x, x_683.y, x_684.z, x_684.w);
  let x_686 : vec4<f32> = u_xlat6;
  let x_688 : vec4<f32> = hlslcc_FragCoord;
  let x_690 : vec2<f32> = (vec2<f32>(x_686.x, x_686.y) * vec2<f32>(x_688.x, x_688.y));
  let x_691 : vec4<f32> = u_xlat6;
  u_xlat6 = vec4<f32>(x_690.x, x_690.y, x_691.z, x_691.w);
  let x_694 : f32 = u_xlat6.y;
  let x_697 : f32 = x_44.x_ScaleBiasRt.x;
  let x_700 : f32 = x_44.x_ScaleBiasRt.y;
  u_xlat42 = ((x_694 * x_697) + x_700);
  let x_702 : f32 = u_xlat42;
  u_xlat6.z = (-(x_702) + 1.0f);
  let x_707 : f32 = u_xlat0.x;
  u_xlat42 = ((-(x_707) * 0.959999979f) + 0.959999979f);
  let x_713 : f32 = u_xlat42;
  let x_716 : f32 = u_xlat1.x;
  u_xlat65 = (-(x_713) + x_716);
  let x_718 : f32 = u_xlat42;
  let x_720 : vec3<f32> = u_xlat2;
  u_xlat7 = (vec3<f32>(x_718, x_718, x_718) * x_720);
  let x_722 : vec3<f32> = u_xlat2;
  u_xlat2 = (x_722 + vec3<f32>(-0.039999999f, -0.039999999f, -0.039999999f));
  let x_726 : vec4<f32> = u_xlat0;
  let x_728 : vec3<f32> = u_xlat2;
  u_xlat2 = ((vec3<f32>(x_726.x, x_726.x, x_726.x) * x_728) + vec3<f32>(0.039999999f, 0.039999999f, 0.039999999f));
  let x_734 : f32 = u_xlat1.x;
  u_xlat0.x = (-(x_734) + 1.0f);
  let x_739 : f32 = u_xlat0.x;
  let x_741 : f32 = u_xlat0.x;
  u_xlat42 = (x_739 * x_741);
  let x_743 : f32 = u_xlat42;
  let x_744 : f32 = u_xlat42;
  u_xlat1.x = (x_743 * x_744);
  let x_747 : f32 = u_xlat65;
  u_xlat65 = (x_747 + 1.0f);
  let x_749 : f32 = u_xlat65;
  u_xlat65 = min(x_749, 1.0f);
  let x_752 : f32 = u_xlat42;
  u_xlat66 = ((x_752 * 4.0f) + 2.0f);
  let x_761 : vec4<f32> = u_xlat6;
  let x_764 : f32 = x_44.x_GlobalMipBias.x;
  let x_765 : vec4<f32> = textureSampleBias(x_ScreenSpaceOcclusionTexture, sampler_ScreenSpaceOcclusionTexture, vec2<f32>(x_761.x, x_761.z), x_764);
  u_xlat67 = x_765.x;
  let x_768 : f32 = u_xlat67;
  u_xlat68 = (x_768 + -1.0f);
  let x_771 : f32 = x_44.x_AmbientOcclusionParam.w;
  let x_772 : f32 = u_xlat68;
  u_xlat68 = ((x_771 * x_772) + 1.0f);
  let x_777 : f32 = u_xlat0.w;
  let x_778 : f32 = u_xlat67;
  u_xlat63 = min(x_777, x_778);
  let x_782 : f32 = x_391.x_MainLightShadowParams.y;
  u_xlatb67 = (0.0f < x_782);
  let x_784 : bool = u_xlatb67;
  if (x_784) {
    let x_788 : f32 = x_391.x_MainLightShadowParams.y;
    u_xlatb67 = (x_788 == 1.0f);
    let x_790 : bool = u_xlatb67;
    if (x_790) {
      let x_793 : vec4<f32> = u_xlat4;
      let x_797 : vec4<f32> = x_391.x_MainLightShadowOffset0;
      u_xlat6 = (vec4<f32>(x_793.x, x_793.y, x_793.x, x_793.y) + x_797);
      let x_800 : vec4<f32> = u_xlat6;
      let x_801 : vec2<f32> = vec2<f32>(x_800.x, x_800.y);
      let x_803 : f32 = u_xlat4.z;
      txVec0 = vec3<f32>(x_801.x, x_801.y, x_803);
      let x_816 : vec3<f32> = txVec0;
      let x_818 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_816.xy, x_816.z);
      u_xlat8.x = x_818;
      let x_821 : vec4<f32> = u_xlat6;
      let x_822 : vec2<f32> = vec2<f32>(x_821.z, x_821.w);
      let x_824 : f32 = u_xlat4.z;
      txVec1 = vec3<f32>(x_822.x, x_822.y, x_824);
      let x_831 : vec3<f32> = txVec1;
      let x_833 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_831.xy, x_831.z);
      u_xlat8.y = x_833;
      let x_835 : vec4<f32> = u_xlat4;
      let x_839 : vec4<f32> = x_391.x_MainLightShadowOffset1;
      u_xlat6 = (vec4<f32>(x_835.x, x_835.y, x_835.x, x_835.y) + x_839);
      let x_842 : vec4<f32> = u_xlat6;
      let x_843 : vec2<f32> = vec2<f32>(x_842.x, x_842.y);
      let x_845 : f32 = u_xlat4.z;
      txVec2 = vec3<f32>(x_843.x, x_843.y, x_845);
      let x_852 : vec3<f32> = txVec2;
      let x_854 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_852.xy, x_852.z);
      u_xlat8.z = x_854;
      let x_857 : vec4<f32> = u_xlat6;
      let x_858 : vec2<f32> = vec2<f32>(x_857.z, x_857.w);
      let x_860 : f32 = u_xlat4.z;
      txVec3 = vec3<f32>(x_858.x, x_858.y, x_860);
      let x_867 : vec3<f32> = txVec3;
      let x_869 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_867.xy, x_867.z);
      u_xlat8.w = x_869;
      let x_871 : vec4<f32> = u_xlat8;
      u_xlat67 = dot(x_871, vec4<f32>(0.25f, 0.25f, 0.25f, 0.25f));
    } else {
      let x_878 : f32 = x_391.x_MainLightShadowParams.y;
      u_xlatb6 = (x_878 == 2.0f);
      let x_880 : bool = u_xlatb6;
      if (x_880) {
        let x_883 : vec4<f32> = u_xlat4;
        let x_886 : vec4<f32> = x_391.x_MainLightShadowmapSize;
        let x_890 : vec2<f32> = ((vec2<f32>(x_883.x, x_883.y) * vec2<f32>(x_886.z, x_886.w)) + vec2<f32>(0.5f, 0.5f));
        let x_891 : vec4<f32> = u_xlat6;
        u_xlat6 = vec4<f32>(x_890.x, x_890.y, x_891.z, x_891.w);
        let x_893 : vec4<f32> = u_xlat6;
        let x_895 : vec2<f32> = floor(vec2<f32>(x_893.x, x_893.y));
        let x_896 : vec4<f32> = u_xlat6;
        u_xlat6 = vec4<f32>(x_895.x, x_895.y, x_896.z, x_896.w);
        let x_899 : vec4<f32> = u_xlat4;
        let x_902 : vec4<f32> = x_391.x_MainLightShadowmapSize;
        let x_905 : vec4<f32> = u_xlat6;
        u_xlat48 = ((vec2<f32>(x_899.x, x_899.y) * vec2<f32>(x_902.z, x_902.w)) + -(vec2<f32>(x_905.x, x_905.y)));
        let x_909 : vec2<f32> = u_xlat48;
        u_xlat8 = (vec4<f32>(x_909.x, x_909.x, x_909.y, x_909.y) + vec4<f32>(0.5f, 1.0f, 0.5f, 1.0f));
        let x_914 : vec4<f32> = u_xlat8;
        let x_916 : vec4<f32> = u_xlat8;
        u_xlat9 = (vec4<f32>(x_914.x, x_914.x, x_914.z, x_914.z) * vec4<f32>(x_916.x, x_916.x, x_916.z, x_916.z));
        let x_919 : vec4<f32> = u_xlat9;
        let x_923 : vec2<f32> = (vec2<f32>(x_919.y, x_919.w) * vec2<f32>(0.079999998f, 0.079999998f));
        let x_924 : vec4<f32> = u_xlat8;
        u_xlat8 = vec4<f32>(x_923.x, x_924.y, x_923.y, x_924.w);
        let x_926 : vec4<f32> = u_xlat9;
        let x_929 : vec2<f32> = u_xlat48;
        let x_931 : vec2<f32> = ((vec2<f32>(x_926.x, x_926.z) * vec2<f32>(0.5f, 0.5f)) + -(x_929));
        let x_932 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_931.x, x_931.y, x_932.z, x_932.w);
        let x_935 : vec2<f32> = u_xlat48;
        u_xlat51 = (-(x_935) + vec2<f32>(1.0f, 1.0f));
        let x_939 : vec2<f32> = u_xlat48;
        let x_941 : vec2<f32> = min(x_939, vec2<f32>(0.0f, 0.0f));
        let x_942 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_941.x, x_941.y, x_942.z, x_942.w);
        let x_944 : vec4<f32> = u_xlat10;
        let x_947 : vec4<f32> = u_xlat10;
        let x_950 : vec2<f32> = u_xlat51;
        let x_951 : vec2<f32> = ((-(vec2<f32>(x_944.x, x_944.y)) * vec2<f32>(x_947.x, x_947.y)) + x_950);
        let x_952 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_951.x, x_951.y, x_952.z, x_952.w);
        let x_954 : vec2<f32> = u_xlat48;
        u_xlat48 = max(x_954, vec2<f32>(0.0f, 0.0f));
        let x_956 : vec2<f32> = u_xlat48;
        let x_958 : vec2<f32> = u_xlat48;
        let x_960 : vec4<f32> = u_xlat8;
        u_xlat48 = ((-(x_956) * x_958) + vec2<f32>(x_960.y, x_960.w));
        let x_963 : vec4<f32> = u_xlat10;
        let x_965 : vec2<f32> = (vec2<f32>(x_963.x, x_963.y) + vec2<f32>(1.0f, 1.0f));
        let x_966 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_965.x, x_965.y, x_966.z, x_966.w);
        let x_968 : vec2<f32> = u_xlat48;
        u_xlat48 = (x_968 + vec2<f32>(1.0f, 1.0f));
        let x_971 : vec4<f32> = u_xlat9;
        let x_975 : vec2<f32> = (vec2<f32>(x_971.x, x_971.y) * vec2<f32>(0.159999996f, 0.159999996f));
        let x_976 : vec4<f32> = u_xlat11;
        u_xlat11 = vec4<f32>(x_975.x, x_975.y, x_976.z, x_976.w);
        let x_978 : vec2<f32> = u_xlat51;
        let x_979 : vec2<f32> = (x_978 * vec2<f32>(0.159999996f, 0.159999996f));
        let x_980 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_979.x, x_979.y, x_980.z, x_980.w);
        let x_982 : vec4<f32> = u_xlat10;
        let x_984 : vec2<f32> = (vec2<f32>(x_982.x, x_982.y) * vec2<f32>(0.159999996f, 0.159999996f));
        let x_985 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_984.x, x_984.y, x_985.z, x_985.w);
        let x_988 : vec2<f32> = u_xlat48;
        let x_989 : vec2<f32> = (x_988 * vec2<f32>(0.159999996f, 0.159999996f));
        let x_990 : vec4<f32> = u_xlat12;
        u_xlat12 = vec4<f32>(x_989.x, x_989.y, x_990.z, x_990.w);
        let x_992 : vec4<f32> = u_xlat8;
        u_xlat48 = (vec2<f32>(x_992.y, x_992.w) * vec2<f32>(0.159999996f, 0.159999996f));
        let x_996 : f32 = u_xlat10.x;
        u_xlat11.z = x_996;
        let x_999 : f32 = u_xlat48.x;
        u_xlat11.w = x_999;
        let x_1002 : f32 = u_xlat12.x;
        u_xlat9.z = x_1002;
        let x_1005 : f32 = u_xlat8.x;
        u_xlat9.w = x_1005;
        let x_1008 : vec4<f32> = u_xlat9;
        let x_1010 : vec4<f32> = u_xlat11;
        u_xlat13 = (vec4<f32>(x_1008.z, x_1008.w, x_1008.x, x_1008.z) + vec4<f32>(x_1010.z, x_1010.w, x_1010.x, x_1010.z));
        let x_1014 : f32 = u_xlat11.y;
        u_xlat10.z = x_1014;
        let x_1017 : f32 = u_xlat48.y;
        u_xlat10.w = x_1017;
        let x_1020 : f32 = u_xlat9.y;
        u_xlat12.z = x_1020;
        let x_1023 : f32 = u_xlat8.z;
        u_xlat12.w = x_1023;
        let x_1025 : vec4<f32> = u_xlat10;
        let x_1027 : vec4<f32> = u_xlat12;
        let x_1029 : vec3<f32> = (vec3<f32>(x_1025.z, x_1025.y, x_1025.w) + vec3<f32>(x_1027.z, x_1027.y, x_1027.w));
        let x_1030 : vec4<f32> = u_xlat8;
        u_xlat8 = vec4<f32>(x_1029.x, x_1029.y, x_1029.z, x_1030.w);
        let x_1032 : vec4<f32> = u_xlat9;
        let x_1034 : vec4<f32> = u_xlat13;
        let x_1036 : vec3<f32> = (vec3<f32>(x_1032.x, x_1032.z, x_1032.w) / vec3<f32>(x_1034.z, x_1034.w, x_1034.y));
        let x_1037 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_1036.x, x_1036.y, x_1036.z, x_1037.w);
        let x_1039 : vec4<f32> = u_xlat9;
        let x_1044 : vec3<f32> = (vec3<f32>(x_1039.x, x_1039.y, x_1039.z) + vec3<f32>(-2.5f, -0.5f, 1.5f));
        let x_1045 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_1044.x, x_1044.y, x_1044.z, x_1045.w);
        let x_1047 : vec4<f32> = u_xlat12;
        let x_1049 : vec4<f32> = u_xlat8;
        let x_1051 : vec3<f32> = (vec3<f32>(x_1047.z, x_1047.y, x_1047.w) / vec3<f32>(x_1049.x, x_1049.y, x_1049.z));
        let x_1052 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_1051.x, x_1051.y, x_1051.z, x_1052.w);
        let x_1054 : vec4<f32> = u_xlat10;
        let x_1056 : vec3<f32> = (vec3<f32>(x_1054.x, x_1054.y, x_1054.z) + vec3<f32>(-2.5f, -0.5f, 1.5f));
        let x_1057 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_1056.x, x_1056.y, x_1056.z, x_1057.w);
        let x_1059 : vec4<f32> = u_xlat9;
        let x_1062 : vec4<f32> = x_391.x_MainLightShadowmapSize;
        let x_1064 : vec3<f32> = (vec3<f32>(x_1059.y, x_1059.x, x_1059.z) * vec3<f32>(x_1062.x, x_1062.x, x_1062.x));
        let x_1065 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_1064.x, x_1064.y, x_1064.z, x_1065.w);
        let x_1067 : vec4<f32> = u_xlat10;
        let x_1070 : vec4<f32> = x_391.x_MainLightShadowmapSize;
        let x_1072 : vec3<f32> = (vec3<f32>(x_1067.x, x_1067.y, x_1067.z) * vec3<f32>(x_1070.y, x_1070.y, x_1070.y));
        let x_1073 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_1072.x, x_1072.y, x_1072.z, x_1073.w);
        let x_1076 : f32 = u_xlat10.x;
        u_xlat9.w = x_1076;
        let x_1078 : vec4<f32> = u_xlat6;
        let x_1081 : vec4<f32> = x_391.x_MainLightShadowmapSize;
        let x_1084 : vec4<f32> = u_xlat9;
        u_xlat11 = ((vec4<f32>(x_1078.x, x_1078.y, x_1078.x, x_1078.y) * vec4<f32>(x_1081.x, x_1081.y, x_1081.x, x_1081.y)) + vec4<f32>(x_1084.y, x_1084.w, x_1084.x, x_1084.w));
        let x_1087 : vec4<f32> = u_xlat6;
        let x_1090 : vec4<f32> = x_391.x_MainLightShadowmapSize;
        let x_1093 : vec4<f32> = u_xlat9;
        u_xlat48 = ((vec2<f32>(x_1087.x, x_1087.y) * vec2<f32>(x_1090.x, x_1090.y)) + vec2<f32>(x_1093.z, x_1093.w));
        let x_1097 : f32 = u_xlat9.y;
        u_xlat10.w = x_1097;
        let x_1099 : vec4<f32> = u_xlat10;
        let x_1100 : vec2<f32> = vec2<f32>(x_1099.y, x_1099.z);
        let x_1101 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_1101.x, x_1100.x, x_1101.z, x_1100.y);
        let x_1103 : vec4<f32> = u_xlat6;
        let x_1106 : vec4<f32> = x_391.x_MainLightShadowmapSize;
        let x_1109 : vec4<f32> = u_xlat9;
        u_xlat12 = ((vec4<f32>(x_1103.x, x_1103.y, x_1103.x, x_1103.y) * vec4<f32>(x_1106.x, x_1106.y, x_1106.x, x_1106.y)) + vec4<f32>(x_1109.x, x_1109.y, x_1109.z, x_1109.y));
        let x_1112 : vec4<f32> = u_xlat6;
        let x_1115 : vec4<f32> = x_391.x_MainLightShadowmapSize;
        let x_1118 : vec4<f32> = u_xlat10;
        u_xlat10 = ((vec4<f32>(x_1112.x, x_1112.y, x_1112.x, x_1112.y) * vec4<f32>(x_1115.x, x_1115.y, x_1115.x, x_1115.y)) + vec4<f32>(x_1118.w, x_1118.y, x_1118.w, x_1118.z));
        let x_1121 : vec4<f32> = u_xlat6;
        let x_1124 : vec4<f32> = x_391.x_MainLightShadowmapSize;
        let x_1127 : vec4<f32> = u_xlat9;
        u_xlat9 = ((vec4<f32>(x_1121.x, x_1121.y, x_1121.x, x_1121.y) * vec4<f32>(x_1124.x, x_1124.y, x_1124.x, x_1124.y)) + vec4<f32>(x_1127.x, x_1127.w, x_1127.z, x_1127.w));
        let x_1131 : vec4<f32> = u_xlat8;
        let x_1133 : vec4<f32> = u_xlat13;
        u_xlat14 = (vec4<f32>(x_1131.x, x_1131.x, x_1131.x, x_1131.y) * vec4<f32>(x_1133.z, x_1133.w, x_1133.y, x_1133.z));
        let x_1137 : vec4<f32> = u_xlat8;
        let x_1139 : vec4<f32> = u_xlat13;
        u_xlat15 = (vec4<f32>(x_1137.y, x_1137.y, x_1137.z, x_1137.z) * x_1139);
        let x_1142 : f32 = u_xlat8.z;
        let x_1144 : f32 = u_xlat13.y;
        u_xlat6.x = (x_1142 * x_1144);
        let x_1148 : vec4<f32> = u_xlat11;
        let x_1149 : vec2<f32> = vec2<f32>(x_1148.x, x_1148.y);
        let x_1151 : f32 = u_xlat4.z;
        txVec4 = vec3<f32>(x_1149.x, x_1149.y, x_1151);
        let x_1159 : vec3<f32> = txVec4;
        let x_1161 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1159.xy, x_1159.z);
        u_xlat27 = x_1161;
        let x_1163 : vec4<f32> = u_xlat11;
        let x_1164 : vec2<f32> = vec2<f32>(x_1163.z, x_1163.w);
        let x_1166 : f32 = u_xlat4.z;
        txVec5 = vec3<f32>(x_1164.x, x_1164.y, x_1166);
        let x_1174 : vec3<f32> = txVec5;
        let x_1176 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1174.xy, x_1174.z);
        u_xlat70 = x_1176;
        let x_1177 : f32 = u_xlat70;
        let x_1179 : f32 = u_xlat14.y;
        u_xlat70 = (x_1177 * x_1179);
        let x_1182 : f32 = u_xlat14.x;
        let x_1183 : f32 = u_xlat27;
        let x_1185 : f32 = u_xlat70;
        u_xlat27 = ((x_1182 * x_1183) + x_1185);
        let x_1188 : vec2<f32> = u_xlat48;
        let x_1190 : f32 = u_xlat4.z;
        txVec6 = vec3<f32>(x_1188.x, x_1188.y, x_1190);
        let x_1197 : vec3<f32> = txVec6;
        let x_1199 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1197.xy, x_1197.z);
        u_xlat48.x = x_1199;
        let x_1202 : f32 = u_xlat14.z;
        let x_1204 : f32 = u_xlat48.x;
        let x_1206 : f32 = u_xlat27;
        u_xlat27 = ((x_1202 * x_1204) + x_1206);
        let x_1209 : vec4<f32> = u_xlat10;
        let x_1210 : vec2<f32> = vec2<f32>(x_1209.x, x_1209.y);
        let x_1212 : f32 = u_xlat4.z;
        txVec7 = vec3<f32>(x_1210.x, x_1210.y, x_1212);
        let x_1219 : vec3<f32> = txVec7;
        let x_1221 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1219.xy, x_1219.z);
        u_xlat48.x = x_1221;
        let x_1224 : f32 = u_xlat14.w;
        let x_1226 : f32 = u_xlat48.x;
        let x_1228 : f32 = u_xlat27;
        u_xlat27 = ((x_1224 * x_1226) + x_1228);
        let x_1231 : vec4<f32> = u_xlat12;
        let x_1232 : vec2<f32> = vec2<f32>(x_1231.x, x_1231.y);
        let x_1234 : f32 = u_xlat4.z;
        txVec8 = vec3<f32>(x_1232.x, x_1232.y, x_1234);
        let x_1241 : vec3<f32> = txVec8;
        let x_1243 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1241.xy, x_1241.z);
        u_xlat48.x = x_1243;
        let x_1246 : f32 = u_xlat15.x;
        let x_1248 : f32 = u_xlat48.x;
        let x_1250 : f32 = u_xlat27;
        u_xlat27 = ((x_1246 * x_1248) + x_1250);
        let x_1253 : vec4<f32> = u_xlat12;
        let x_1254 : vec2<f32> = vec2<f32>(x_1253.z, x_1253.w);
        let x_1256 : f32 = u_xlat4.z;
        txVec9 = vec3<f32>(x_1254.x, x_1254.y, x_1256);
        let x_1263 : vec3<f32> = txVec9;
        let x_1265 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1263.xy, x_1263.z);
        u_xlat48.x = x_1265;
        let x_1268 : f32 = u_xlat15.y;
        let x_1270 : f32 = u_xlat48.x;
        let x_1272 : f32 = u_xlat27;
        u_xlat27 = ((x_1268 * x_1270) + x_1272);
        let x_1275 : vec4<f32> = u_xlat10;
        let x_1276 : vec2<f32> = vec2<f32>(x_1275.z, x_1275.w);
        let x_1278 : f32 = u_xlat4.z;
        txVec10 = vec3<f32>(x_1276.x, x_1276.y, x_1278);
        let x_1285 : vec3<f32> = txVec10;
        let x_1287 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1285.xy, x_1285.z);
        u_xlat48.x = x_1287;
        let x_1290 : f32 = u_xlat15.z;
        let x_1292 : f32 = u_xlat48.x;
        let x_1294 : f32 = u_xlat27;
        u_xlat27 = ((x_1290 * x_1292) + x_1294);
        let x_1297 : vec4<f32> = u_xlat9;
        let x_1298 : vec2<f32> = vec2<f32>(x_1297.x, x_1297.y);
        let x_1300 : f32 = u_xlat4.z;
        txVec11 = vec3<f32>(x_1298.x, x_1298.y, x_1300);
        let x_1307 : vec3<f32> = txVec11;
        let x_1309 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1307.xy, x_1307.z);
        u_xlat48.x = x_1309;
        let x_1312 : f32 = u_xlat15.w;
        let x_1314 : f32 = u_xlat48.x;
        let x_1316 : f32 = u_xlat27;
        u_xlat27 = ((x_1312 * x_1314) + x_1316);
        let x_1319 : vec4<f32> = u_xlat9;
        let x_1320 : vec2<f32> = vec2<f32>(x_1319.z, x_1319.w);
        let x_1322 : f32 = u_xlat4.z;
        txVec12 = vec3<f32>(x_1320.x, x_1320.y, x_1322);
        let x_1329 : vec3<f32> = txVec12;
        let x_1331 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1329.xy, x_1329.z);
        u_xlat48.x = x_1331;
        let x_1334 : f32 = u_xlat6.x;
        let x_1336 : f32 = u_xlat48.x;
        let x_1338 : f32 = u_xlat27;
        u_xlat67 = ((x_1334 * x_1336) + x_1338);
      } else {
        let x_1341 : vec4<f32> = u_xlat4;
        let x_1344 : vec4<f32> = x_391.x_MainLightShadowmapSize;
        let x_1347 : vec2<f32> = ((vec2<f32>(x_1341.x, x_1341.y) * vec2<f32>(x_1344.z, x_1344.w)) + vec2<f32>(0.5f, 0.5f));
        let x_1348 : vec4<f32> = u_xlat6;
        u_xlat6 = vec4<f32>(x_1347.x, x_1347.y, x_1348.z, x_1348.w);
        let x_1350 : vec4<f32> = u_xlat6;
        let x_1352 : vec2<f32> = floor(vec2<f32>(x_1350.x, x_1350.y));
        let x_1353 : vec4<f32> = u_xlat6;
        u_xlat6 = vec4<f32>(x_1352.x, x_1352.y, x_1353.z, x_1353.w);
        let x_1355 : vec4<f32> = u_xlat4;
        let x_1358 : vec4<f32> = x_391.x_MainLightShadowmapSize;
        let x_1361 : vec4<f32> = u_xlat6;
        u_xlat48 = ((vec2<f32>(x_1355.x, x_1355.y) * vec2<f32>(x_1358.z, x_1358.w)) + -(vec2<f32>(x_1361.x, x_1361.y)));
        let x_1365 : vec2<f32> = u_xlat48;
        u_xlat8 = (vec4<f32>(x_1365.x, x_1365.x, x_1365.y, x_1365.y) + vec4<f32>(0.5f, 1.0f, 0.5f, 1.0f));
        let x_1368 : vec4<f32> = u_xlat8;
        let x_1370 : vec4<f32> = u_xlat8;
        u_xlat9 = (vec4<f32>(x_1368.x, x_1368.x, x_1368.z, x_1368.z) * vec4<f32>(x_1370.x, x_1370.x, x_1370.z, x_1370.z));
        let x_1373 : vec4<f32> = u_xlat9;
        let x_1377 : vec2<f32> = (vec2<f32>(x_1373.y, x_1373.w) * vec2<f32>(0.040816002f, 0.040816002f));
        let x_1378 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_1378.x, x_1377.x, x_1378.z, x_1377.y);
        let x_1380 : vec4<f32> = u_xlat9;
        let x_1383 : vec2<f32> = u_xlat48;
        let x_1385 : vec2<f32> = ((vec2<f32>(x_1380.x, x_1380.z) * vec2<f32>(0.5f, 0.5f)) + -(x_1383));
        let x_1386 : vec4<f32> = u_xlat8;
        u_xlat8 = vec4<f32>(x_1385.x, x_1386.y, x_1385.y, x_1386.w);
        let x_1388 : vec2<f32> = u_xlat48;
        let x_1390 : vec2<f32> = (-(x_1388) + vec2<f32>(1.0f, 1.0f));
        let x_1391 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_1390.x, x_1390.y, x_1391.z, x_1391.w);
        let x_1393 : vec2<f32> = u_xlat48;
        u_xlat51 = min(x_1393, vec2<f32>(0.0f, 0.0f));
        let x_1395 : vec2<f32> = u_xlat51;
        let x_1397 : vec2<f32> = u_xlat51;
        let x_1399 : vec4<f32> = u_xlat9;
        let x_1401 : vec2<f32> = ((-(x_1395) * x_1397) + vec2<f32>(x_1399.x, x_1399.y));
        let x_1402 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_1401.x, x_1401.y, x_1402.z, x_1402.w);
        let x_1404 : vec2<f32> = u_xlat48;
        u_xlat51 = max(x_1404, vec2<f32>(0.0f, 0.0f));
        let x_1407 : vec2<f32> = u_xlat51;
        let x_1409 : vec2<f32> = u_xlat51;
        let x_1411 : vec4<f32> = u_xlat8;
        let x_1413 : vec2<f32> = ((-(x_1407) * x_1409) + vec2<f32>(x_1411.y, x_1411.w));
        let x_1414 : vec3<f32> = u_xlat29;
        u_xlat29 = vec3<f32>(x_1413.x, x_1414.y, x_1413.y);
        let x_1416 : vec4<f32> = u_xlat9;
        let x_1418 : vec2<f32> = (vec2<f32>(x_1416.x, x_1416.y) + vec2<f32>(2.0f, 2.0f));
        let x_1419 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_1418.x, x_1418.y, x_1419.z, x_1419.w);
        let x_1421 : vec3<f32> = u_xlat29;
        let x_1423 : vec2<f32> = (vec2<f32>(x_1421.x, x_1421.z) + vec2<f32>(2.0f, 2.0f));
        let x_1424 : vec4<f32> = u_xlat8;
        u_xlat8 = vec4<f32>(x_1424.x, x_1423.x, x_1424.z, x_1423.y);
        let x_1427 : f32 = u_xlat8.y;
        u_xlat11.z = (x_1427 * 0.081632003f);
        let x_1431 : vec4<f32> = u_xlat8;
        let x_1434 : vec3<f32> = (vec3<f32>(x_1431.z, x_1431.x, x_1431.w) * vec3<f32>(0.081632003f, 0.081632003f, 0.081632003f));
        let x_1435 : vec4<f32> = u_xlat12;
        u_xlat12 = vec4<f32>(x_1434.x, x_1434.y, x_1434.z, x_1435.w);
        let x_1437 : vec4<f32> = u_xlat9;
        let x_1440 : vec2<f32> = (vec2<f32>(x_1437.x, x_1437.y) * vec2<f32>(0.081632003f, 0.081632003f));
        let x_1441 : vec4<f32> = u_xlat8;
        u_xlat8 = vec4<f32>(x_1440.x, x_1440.y, x_1441.z, x_1441.w);
        let x_1444 : f32 = u_xlat12.y;
        u_xlat11.x = x_1444;
        let x_1446 : vec2<f32> = u_xlat48;
        let x_1453 : vec2<f32> = ((vec2<f32>(x_1446.x, x_1446.x) * vec2<f32>(-0.081632003f, 0.081632003f)) + vec2<f32>(0.163264006f, 0.081632003f));
        let x_1454 : vec4<f32> = u_xlat11;
        u_xlat11 = vec4<f32>(x_1454.x, x_1453.x, x_1454.z, x_1453.y);
        let x_1456 : vec2<f32> = u_xlat48;
        let x_1460 : vec2<f32> = ((vec2<f32>(x_1456.x, x_1456.x) * vec2<f32>(-0.081632003f, 0.081632003f)) + vec2<f32>(0.081632003f, 0.163264006f));
        let x_1461 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_1460.x, x_1461.y, x_1460.y, x_1461.w);
        let x_1464 : f32 = u_xlat8.x;
        u_xlat9.y = x_1464;
        let x_1467 : f32 = u_xlat10.y;
        u_xlat9.w = x_1467;
        let x_1469 : vec4<f32> = u_xlat9;
        let x_1470 : vec4<f32> = u_xlat11;
        u_xlat11 = (x_1469 + x_1470);
        let x_1472 : vec2<f32> = u_xlat48;
        let x_1475 : vec2<f32> = ((vec2<f32>(x_1472.y, x_1472.y) * vec2<f32>(-0.081632003f, 0.081632003f)) + vec2<f32>(0.163264006f, 0.081632003f));
        let x_1476 : vec4<f32> = u_xlat12;
        u_xlat12 = vec4<f32>(x_1476.x, x_1475.x, x_1476.z, x_1475.y);
        let x_1478 : vec2<f32> = u_xlat48;
        let x_1481 : vec2<f32> = ((vec2<f32>(x_1478.y, x_1478.y) * vec2<f32>(-0.081632003f, 0.081632003f)) + vec2<f32>(0.081632003f, 0.163264006f));
        let x_1482 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_1481.x, x_1482.y, x_1481.y, x_1482.w);
        let x_1485 : f32 = u_xlat8.y;
        u_xlat10.y = x_1485;
        let x_1487 : vec4<f32> = u_xlat10;
        let x_1488 : vec4<f32> = u_xlat12;
        u_xlat8 = (x_1487 + x_1488);
        let x_1490 : vec4<f32> = u_xlat9;
        let x_1491 : vec4<f32> = u_xlat11;
        u_xlat9 = (x_1490 / x_1491);
        let x_1493 : vec4<f32> = u_xlat9;
        u_xlat9 = (x_1493 + vec4<f32>(-3.5f, -1.5f, 0.5f, 2.5f));
        let x_1499 : vec4<f32> = u_xlat10;
        let x_1500 : vec4<f32> = u_xlat8;
        u_xlat10 = (x_1499 / x_1500);
        let x_1502 : vec4<f32> = u_xlat10;
        u_xlat10 = (x_1502 + vec4<f32>(-3.5f, -1.5f, 0.5f, 2.5f));
        let x_1504 : vec4<f32> = u_xlat9;
        let x_1507 : vec4<f32> = x_391.x_MainLightShadowmapSize;
        u_xlat9 = (vec4<f32>(x_1504.w, x_1504.x, x_1504.y, x_1504.z) * vec4<f32>(x_1507.x, x_1507.x, x_1507.x, x_1507.x));
        let x_1510 : vec4<f32> = u_xlat10;
        let x_1513 : vec4<f32> = x_391.x_MainLightShadowmapSize;
        u_xlat10 = (vec4<f32>(x_1510.x, x_1510.w, x_1510.y, x_1510.z) * vec4<f32>(x_1513.y, x_1513.y, x_1513.y, x_1513.y));
        let x_1516 : vec4<f32> = u_xlat9;
        let x_1517 : vec3<f32> = vec3<f32>(x_1516.y, x_1516.z, x_1516.w);
        let x_1518 : vec4<f32> = u_xlat12;
        u_xlat12 = vec4<f32>(x_1517.x, x_1518.y, x_1517.y, x_1517.z);
        let x_1521 : f32 = u_xlat10.x;
        u_xlat12.y = x_1521;
        let x_1523 : vec4<f32> = u_xlat6;
        let x_1526 : vec4<f32> = x_391.x_MainLightShadowmapSize;
        let x_1529 : vec4<f32> = u_xlat12;
        u_xlat13 = ((vec4<f32>(x_1523.x, x_1523.y, x_1523.x, x_1523.y) * vec4<f32>(x_1526.x, x_1526.y, x_1526.x, x_1526.y)) + vec4<f32>(x_1529.x, x_1529.y, x_1529.z, x_1529.y));
        let x_1532 : vec4<f32> = u_xlat6;
        let x_1535 : vec4<f32> = x_391.x_MainLightShadowmapSize;
        let x_1538 : vec4<f32> = u_xlat12;
        u_xlat48 = ((vec2<f32>(x_1532.x, x_1532.y) * vec2<f32>(x_1535.x, x_1535.y)) + vec2<f32>(x_1538.w, x_1538.y));
        let x_1542 : f32 = u_xlat12.y;
        u_xlat9.y = x_1542;
        let x_1545 : f32 = u_xlat10.z;
        u_xlat12.y = x_1545;
        let x_1547 : vec4<f32> = u_xlat6;
        let x_1550 : vec4<f32> = x_391.x_MainLightShadowmapSize;
        let x_1553 : vec4<f32> = u_xlat12;
        u_xlat14 = ((vec4<f32>(x_1547.x, x_1547.y, x_1547.x, x_1547.y) * vec4<f32>(x_1550.x, x_1550.y, x_1550.x, x_1550.y)) + vec4<f32>(x_1553.x, x_1553.y, x_1553.z, x_1553.y));
        let x_1556 : vec4<f32> = u_xlat6;
        let x_1559 : vec4<f32> = x_391.x_MainLightShadowmapSize;
        let x_1562 : vec4<f32> = u_xlat12;
        let x_1564 : vec2<f32> = ((vec2<f32>(x_1556.x, x_1556.y) * vec2<f32>(x_1559.x, x_1559.y)) + vec2<f32>(x_1562.w, x_1562.y));
        let x_1565 : vec4<f32> = u_xlat15;
        u_xlat15 = vec4<f32>(x_1564.x, x_1564.y, x_1565.z, x_1565.w);
        let x_1568 : f32 = u_xlat12.y;
        u_xlat9.z = x_1568;
        let x_1571 : vec4<f32> = u_xlat6;
        let x_1574 : vec4<f32> = x_391.x_MainLightShadowmapSize;
        let x_1577 : vec4<f32> = u_xlat9;
        u_xlat16 = ((vec4<f32>(x_1571.x, x_1571.y, x_1571.x, x_1571.y) * vec4<f32>(x_1574.x, x_1574.y, x_1574.x, x_1574.y)) + vec4<f32>(x_1577.x, x_1577.y, x_1577.x, x_1577.z));
        let x_1581 : f32 = u_xlat10.w;
        u_xlat12.y = x_1581;
        let x_1584 : vec4<f32> = u_xlat6;
        let x_1587 : vec4<f32> = x_391.x_MainLightShadowmapSize;
        let x_1590 : vec4<f32> = u_xlat12;
        u_xlat17 = ((vec4<f32>(x_1584.x, x_1584.y, x_1584.x, x_1584.y) * vec4<f32>(x_1587.x, x_1587.y, x_1587.x, x_1587.y)) + vec4<f32>(x_1590.x, x_1590.y, x_1590.z, x_1590.y));
        let x_1594 : vec4<f32> = u_xlat6;
        let x_1597 : vec4<f32> = x_391.x_MainLightShadowmapSize;
        let x_1600 : vec4<f32> = u_xlat12;
        u_xlat30 = ((vec2<f32>(x_1594.x, x_1594.y) * vec2<f32>(x_1597.x, x_1597.y)) + vec2<f32>(x_1600.w, x_1600.y));
        let x_1604 : f32 = u_xlat12.y;
        u_xlat9.w = x_1604;
        let x_1607 : vec4<f32> = u_xlat6;
        let x_1610 : vec4<f32> = x_391.x_MainLightShadowmapSize;
        let x_1613 : vec4<f32> = u_xlat9;
        u_xlat57 = ((vec2<f32>(x_1607.x, x_1607.y) * vec2<f32>(x_1610.x, x_1610.y)) + vec2<f32>(x_1613.x, x_1613.w));
        let x_1616 : vec4<f32> = u_xlat12;
        let x_1617 : vec3<f32> = vec3<f32>(x_1616.x, x_1616.z, x_1616.w);
        let x_1618 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_1617.x, x_1618.y, x_1617.y, x_1617.z);
        let x_1620 : vec4<f32> = u_xlat6;
        let x_1623 : vec4<f32> = x_391.x_MainLightShadowmapSize;
        let x_1626 : vec4<f32> = u_xlat10;
        u_xlat12 = ((vec4<f32>(x_1620.x, x_1620.y, x_1620.x, x_1620.y) * vec4<f32>(x_1623.x, x_1623.y, x_1623.x, x_1623.y)) + vec4<f32>(x_1626.x, x_1626.y, x_1626.z, x_1626.y));
        let x_1630 : vec4<f32> = u_xlat6;
        let x_1633 : vec4<f32> = x_391.x_MainLightShadowmapSize;
        let x_1636 : vec4<f32> = u_xlat10;
        u_xlat52 = ((vec2<f32>(x_1630.x, x_1630.y) * vec2<f32>(x_1633.x, x_1633.y)) + vec2<f32>(x_1636.w, x_1636.y));
        let x_1640 : f32 = u_xlat9.x;
        u_xlat10.x = x_1640;
        let x_1642 : vec4<f32> = u_xlat6;
        let x_1645 : vec4<f32> = x_391.x_MainLightShadowmapSize;
        let x_1648 : vec4<f32> = u_xlat10;
        let x_1650 : vec2<f32> = ((vec2<f32>(x_1642.x, x_1642.y) * vec2<f32>(x_1645.x, x_1645.y)) + vec2<f32>(x_1648.x, x_1648.y));
        let x_1651 : vec4<f32> = u_xlat6;
        u_xlat6 = vec4<f32>(x_1650.x, x_1650.y, x_1651.z, x_1651.w);
        let x_1654 : vec4<f32> = u_xlat8;
        let x_1656 : vec4<f32> = u_xlat11;
        u_xlat18 = (vec4<f32>(x_1654.x, x_1654.x, x_1654.x, x_1654.x) * x_1656);
        let x_1659 : vec4<f32> = u_xlat8;
        let x_1661 : vec4<f32> = u_xlat11;
        u_xlat19 = (vec4<f32>(x_1659.y, x_1659.y, x_1659.y, x_1659.y) * x_1661);
        let x_1664 : vec4<f32> = u_xlat8;
        let x_1666 : vec4<f32> = u_xlat11;
        u_xlat20 = (vec4<f32>(x_1664.z, x_1664.z, x_1664.z, x_1664.z) * x_1666);
        let x_1668 : vec4<f32> = u_xlat8;
        let x_1670 : vec4<f32> = u_xlat11;
        u_xlat8 = (vec4<f32>(x_1668.w, x_1668.w, x_1668.w, x_1668.w) * x_1670);
        let x_1673 : vec4<f32> = u_xlat13;
        let x_1674 : vec2<f32> = vec2<f32>(x_1673.x, x_1673.y);
        let x_1676 : f32 = u_xlat4.z;
        txVec13 = vec3<f32>(x_1674.x, x_1674.y, x_1676);
        let x_1683 : vec3<f32> = txVec13;
        let x_1685 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1683.xy, x_1683.z);
        u_xlat70 = x_1685;
        let x_1687 : vec4<f32> = u_xlat13;
        let x_1688 : vec2<f32> = vec2<f32>(x_1687.z, x_1687.w);
        let x_1690 : f32 = u_xlat4.z;
        txVec14 = vec3<f32>(x_1688.x, x_1688.y, x_1690);
        let x_1697 : vec3<f32> = txVec14;
        let x_1699 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1697.xy, x_1697.z);
        u_xlat9.x = x_1699;
        let x_1702 : f32 = u_xlat9.x;
        let x_1704 : f32 = u_xlat18.y;
        u_xlat9.x = (x_1702 * x_1704);
        let x_1708 : f32 = u_xlat18.x;
        let x_1709 : f32 = u_xlat70;
        let x_1712 : f32 = u_xlat9.x;
        u_xlat70 = ((x_1708 * x_1709) + x_1712);
        let x_1715 : vec2<f32> = u_xlat48;
        let x_1717 : f32 = u_xlat4.z;
        txVec15 = vec3<f32>(x_1715.x, x_1715.y, x_1717);
        let x_1724 : vec3<f32> = txVec15;
        let x_1726 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1724.xy, x_1724.z);
        u_xlat48.x = x_1726;
        let x_1729 : f32 = u_xlat18.z;
        let x_1731 : f32 = u_xlat48.x;
        let x_1733 : f32 = u_xlat70;
        u_xlat48.x = ((x_1729 * x_1731) + x_1733);
        let x_1737 : vec4<f32> = u_xlat16;
        let x_1738 : vec2<f32> = vec2<f32>(x_1737.x, x_1737.y);
        let x_1740 : f32 = u_xlat4.z;
        txVec16 = vec3<f32>(x_1738.x, x_1738.y, x_1740);
        let x_1748 : vec3<f32> = txVec16;
        let x_1750 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1748.xy, x_1748.z);
        u_xlat69 = x_1750;
        let x_1752 : f32 = u_xlat18.w;
        let x_1753 : f32 = u_xlat69;
        let x_1756 : f32 = u_xlat48.x;
        u_xlat48.x = ((x_1752 * x_1753) + x_1756);
        let x_1760 : vec4<f32> = u_xlat14;
        let x_1761 : vec2<f32> = vec2<f32>(x_1760.x, x_1760.y);
        let x_1763 : f32 = u_xlat4.z;
        txVec17 = vec3<f32>(x_1761.x, x_1761.y, x_1763);
        let x_1770 : vec3<f32> = txVec17;
        let x_1772 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1770.xy, x_1770.z);
        u_xlat69 = x_1772;
        let x_1774 : f32 = u_xlat19.x;
        let x_1775 : f32 = u_xlat69;
        let x_1778 : f32 = u_xlat48.x;
        u_xlat48.x = ((x_1774 * x_1775) + x_1778);
        let x_1782 : vec4<f32> = u_xlat14;
        let x_1783 : vec2<f32> = vec2<f32>(x_1782.z, x_1782.w);
        let x_1785 : f32 = u_xlat4.z;
        txVec18 = vec3<f32>(x_1783.x, x_1783.y, x_1785);
        let x_1792 : vec3<f32> = txVec18;
        let x_1794 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1792.xy, x_1792.z);
        u_xlat69 = x_1794;
        let x_1796 : f32 = u_xlat19.y;
        let x_1797 : f32 = u_xlat69;
        let x_1800 : f32 = u_xlat48.x;
        u_xlat48.x = ((x_1796 * x_1797) + x_1800);
        let x_1804 : vec4<f32> = u_xlat15;
        let x_1805 : vec2<f32> = vec2<f32>(x_1804.x, x_1804.y);
        let x_1807 : f32 = u_xlat4.z;
        txVec19 = vec3<f32>(x_1805.x, x_1805.y, x_1807);
        let x_1814 : vec3<f32> = txVec19;
        let x_1816 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1814.xy, x_1814.z);
        u_xlat69 = x_1816;
        let x_1818 : f32 = u_xlat19.z;
        let x_1819 : f32 = u_xlat69;
        let x_1822 : f32 = u_xlat48.x;
        u_xlat48.x = ((x_1818 * x_1819) + x_1822);
        let x_1826 : vec4<f32> = u_xlat16;
        let x_1827 : vec2<f32> = vec2<f32>(x_1826.z, x_1826.w);
        let x_1829 : f32 = u_xlat4.z;
        txVec20 = vec3<f32>(x_1827.x, x_1827.y, x_1829);
        let x_1836 : vec3<f32> = txVec20;
        let x_1838 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1836.xy, x_1836.z);
        u_xlat69 = x_1838;
        let x_1840 : f32 = u_xlat19.w;
        let x_1841 : f32 = u_xlat69;
        let x_1844 : f32 = u_xlat48.x;
        u_xlat48.x = ((x_1840 * x_1841) + x_1844);
        let x_1848 : vec4<f32> = u_xlat17;
        let x_1849 : vec2<f32> = vec2<f32>(x_1848.x, x_1848.y);
        let x_1851 : f32 = u_xlat4.z;
        txVec21 = vec3<f32>(x_1849.x, x_1849.y, x_1851);
        let x_1858 : vec3<f32> = txVec21;
        let x_1860 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1858.xy, x_1858.z);
        u_xlat69 = x_1860;
        let x_1862 : f32 = u_xlat20.x;
        let x_1863 : f32 = u_xlat69;
        let x_1866 : f32 = u_xlat48.x;
        u_xlat48.x = ((x_1862 * x_1863) + x_1866);
        let x_1870 : vec4<f32> = u_xlat17;
        let x_1871 : vec2<f32> = vec2<f32>(x_1870.z, x_1870.w);
        let x_1873 : f32 = u_xlat4.z;
        txVec22 = vec3<f32>(x_1871.x, x_1871.y, x_1873);
        let x_1880 : vec3<f32> = txVec22;
        let x_1882 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1880.xy, x_1880.z);
        u_xlat69 = x_1882;
        let x_1884 : f32 = u_xlat20.y;
        let x_1885 : f32 = u_xlat69;
        let x_1888 : f32 = u_xlat48.x;
        u_xlat48.x = ((x_1884 * x_1885) + x_1888);
        let x_1892 : vec2<f32> = u_xlat30;
        let x_1894 : f32 = u_xlat4.z;
        txVec23 = vec3<f32>(x_1892.x, x_1892.y, x_1894);
        let x_1901 : vec3<f32> = txVec23;
        let x_1903 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1901.xy, x_1901.z);
        u_xlat69 = x_1903;
        let x_1905 : f32 = u_xlat20.z;
        let x_1906 : f32 = u_xlat69;
        let x_1909 : f32 = u_xlat48.x;
        u_xlat48.x = ((x_1905 * x_1906) + x_1909);
        let x_1913 : vec2<f32> = u_xlat57;
        let x_1915 : f32 = u_xlat4.z;
        txVec24 = vec3<f32>(x_1913.x, x_1913.y, x_1915);
        let x_1922 : vec3<f32> = txVec24;
        let x_1924 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1922.xy, x_1922.z);
        u_xlat69 = x_1924;
        let x_1926 : f32 = u_xlat20.w;
        let x_1927 : f32 = u_xlat69;
        let x_1930 : f32 = u_xlat48.x;
        u_xlat48.x = ((x_1926 * x_1927) + x_1930);
        let x_1934 : vec4<f32> = u_xlat12;
        let x_1935 : vec2<f32> = vec2<f32>(x_1934.x, x_1934.y);
        let x_1937 : f32 = u_xlat4.z;
        txVec25 = vec3<f32>(x_1935.x, x_1935.y, x_1937);
        let x_1944 : vec3<f32> = txVec25;
        let x_1946 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1944.xy, x_1944.z);
        u_xlat69 = x_1946;
        let x_1948 : f32 = u_xlat8.x;
        let x_1949 : f32 = u_xlat69;
        let x_1952 : f32 = u_xlat48.x;
        u_xlat48.x = ((x_1948 * x_1949) + x_1952);
        let x_1956 : vec4<f32> = u_xlat12;
        let x_1957 : vec2<f32> = vec2<f32>(x_1956.z, x_1956.w);
        let x_1959 : f32 = u_xlat4.z;
        txVec26 = vec3<f32>(x_1957.x, x_1957.y, x_1959);
        let x_1966 : vec3<f32> = txVec26;
        let x_1968 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1966.xy, x_1966.z);
        u_xlat69 = x_1968;
        let x_1970 : f32 = u_xlat8.y;
        let x_1971 : f32 = u_xlat69;
        let x_1974 : f32 = u_xlat48.x;
        u_xlat48.x = ((x_1970 * x_1971) + x_1974);
        let x_1978 : vec2<f32> = u_xlat52;
        let x_1980 : f32 = u_xlat4.z;
        txVec27 = vec3<f32>(x_1978.x, x_1978.y, x_1980);
        let x_1987 : vec3<f32> = txVec27;
        let x_1989 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1987.xy, x_1987.z);
        u_xlat69 = x_1989;
        let x_1991 : f32 = u_xlat8.z;
        let x_1992 : f32 = u_xlat69;
        let x_1995 : f32 = u_xlat48.x;
        u_xlat48.x = ((x_1991 * x_1992) + x_1995);
        let x_1999 : vec4<f32> = u_xlat6;
        let x_2000 : vec2<f32> = vec2<f32>(x_1999.x, x_1999.y);
        let x_2002 : f32 = u_xlat4.z;
        txVec28 = vec3<f32>(x_2000.x, x_2000.y, x_2002);
        let x_2009 : vec3<f32> = txVec28;
        let x_2011 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2009.xy, x_2009.z);
        u_xlat6.x = x_2011;
        let x_2014 : f32 = u_xlat8.w;
        let x_2016 : f32 = u_xlat6.x;
        let x_2019 : f32 = u_xlat48.x;
        u_xlat67 = ((x_2014 * x_2016) + x_2019);
      }
    }
  } else {
    let x_2023 : vec4<f32> = u_xlat4;
    let x_2024 : vec2<f32> = vec2<f32>(x_2023.x, x_2023.y);
    let x_2026 : f32 = u_xlat4.z;
    txVec29 = vec3<f32>(x_2024.x, x_2024.y, x_2026);
    let x_2033 : vec3<f32> = txVec29;
    let x_2035 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2033.xy, x_2033.z);
    u_xlat67 = x_2035;
  }
  let x_2037 : f32 = x_391.x_MainLightShadowParams.x;
  u_xlat4.x = (-(x_2037) + 1.0f);
  let x_2041 : f32 = u_xlat67;
  let x_2043 : f32 = x_391.x_MainLightShadowParams.x;
  let x_2046 : f32 = u_xlat4.x;
  u_xlat4.x = ((x_2041 * x_2043) + x_2046);
  let x_2051 : f32 = u_xlat4.z;
  u_xlatb25 = (0.0f >= x_2051);
  let x_2055 : f32 = u_xlat4.z;
  u_xlatb46 = (x_2055 >= 1.0f);
  let x_2057 : bool = u_xlatb46;
  let x_2058 : bool = u_xlatb25;
  u_xlatb25 = (x_2057 | x_2058);
  let x_2060 : bool = u_xlatb25;
  if (x_2060) {
    x_2061 = 1.0f;
  } else {
    let x_2066 : f32 = u_xlat4.x;
    x_2061 = x_2066;
  }
  let x_2067 : f32 = x_2061;
  u_xlat4.x = x_2067;
  let x_2070 : vec3<f32> = vs_INTERP0;
  let x_2072 : vec3<f32> = x_44.x_WorldSpaceCameraPos;
  u_xlat25 = (x_2070 + -(x_2072));
  let x_2075 : vec3<f32> = u_xlat25;
  let x_2076 : vec3<f32> = u_xlat25;
  u_xlat25.x = dot(x_2075, x_2076);
  let x_2080 : f32 = u_xlat25.x;
  let x_2082 : f32 = x_391.x_MainLightShadowParams.z;
  let x_2085 : f32 = x_391.x_MainLightShadowParams.w;
  u_xlat25.x = ((x_2080 * x_2082) + x_2085);
  let x_2089 : f32 = u_xlat25.x;
  u_xlat25.x = clamp(x_2089, 0.0f, 1.0f);
  let x_2094 : f32 = u_xlat4.x;
  u_xlat46 = (-(x_2094) + 1.0f);
  let x_2098 : f32 = u_xlat25.x;
  let x_2099 : f32 = u_xlat46;
  let x_2102 : f32 = u_xlat4.x;
  u_xlat4.x = ((x_2098 * x_2099) + x_2102);
  let x_2105 : f32 = u_xlat68;
  let x_2108 : vec4<f32> = x_44.x_MainLightColor;
  u_xlat25 = (vec3<f32>(x_2105, x_2105, x_2105) * vec3<f32>(x_2108.x, x_2108.y, x_2108.z));
  let x_2111 : vec3<f32> = u_xlat3;
  let x_2113 : vec3<f32> = u_xlat22;
  u_xlat6.x = dot(-(x_2111), x_2113);
  let x_2117 : f32 = u_xlat6.x;
  let x_2119 : f32 = u_xlat6.x;
  u_xlat6.x = (x_2117 + x_2119);
  let x_2122 : vec3<f32> = u_xlat22;
  let x_2123 : vec4<f32> = u_xlat6;
  let x_2127 : vec3<f32> = u_xlat3;
  let x_2129 : vec3<f32> = ((x_2122 * -(vec3<f32>(x_2123.x, x_2123.x, x_2123.x))) + -(x_2127));
  let x_2130 : vec4<f32> = u_xlat6;
  u_xlat6 = vec4<f32>(x_2129.x, x_2129.y, x_2129.z, x_2130.w);
  let x_2132 : vec3<f32> = u_xlat22;
  let x_2133 : vec3<f32> = u_xlat3;
  u_xlat69 = dot(x_2132, x_2133);
  let x_2135 : f32 = u_xlat69;
  u_xlat69 = clamp(x_2135, 0.0f, 1.0f);
  let x_2137 : f32 = u_xlat69;
  u_xlat69 = (-(x_2137) + 1.0f);
  let x_2140 : f32 = u_xlat69;
  let x_2141 : f32 = u_xlat69;
  u_xlat69 = (x_2140 * x_2141);
  let x_2143 : f32 = u_xlat69;
  let x_2144 : f32 = u_xlat69;
  u_xlat69 = (x_2143 * x_2144);
  let x_2147 : f32 = u_xlat0.x;
  u_xlat70 = ((-(x_2147) * 0.699999988f) + 1.700000048f);
  let x_2154 : f32 = u_xlat0.x;
  let x_2155 : f32 = u_xlat70;
  u_xlat0.x = (x_2154 * x_2155);
  let x_2159 : f32 = u_xlat0.x;
  u_xlat0.x = (x_2159 * 6.0f);
  let x_2171 : vec4<f32> = u_xlat6;
  let x_2174 : f32 = u_xlat0.x;
  let x_2175 : vec4<f32> = textureSampleLevel(unity_SpecCube0, samplerunity_SpecCube0, vec3<f32>(x_2171.x, x_2171.y, x_2171.z), x_2174);
  u_xlat8 = x_2175;
  let x_2177 : f32 = u_xlat8.w;
  u_xlat0.x = (x_2177 + -1.0f);
  let x_2181 : f32 = x_274.unity_SpecCube0_HDR.w;
  let x_2183 : f32 = u_xlat0.x;
  u_xlat0.x = ((x_2181 * x_2183) + 1.0f);
  let x_2188 : f32 = u_xlat0.x;
  u_xlat0.x = max(x_2188, 0.0f);
  let x_2192 : f32 = u_xlat0.x;
  u_xlat0.x = log2(x_2192);
  let x_2196 : f32 = u_xlat0.x;
  let x_2198 : f32 = x_274.unity_SpecCube0_HDR.y;
  u_xlat0.x = (x_2196 * x_2198);
  let x_2202 : f32 = u_xlat0.x;
  u_xlat0.x = exp2(x_2202);
  let x_2206 : f32 = u_xlat0.x;
  let x_2208 : f32 = x_274.unity_SpecCube0_HDR.x;
  u_xlat0.x = (x_2206 * x_2208);
  let x_2211 : vec4<f32> = u_xlat8;
  let x_2213 : vec4<f32> = u_xlat0;
  let x_2215 : vec3<f32> = (vec3<f32>(x_2211.x, x_2211.y, x_2211.z) * vec3<f32>(x_2213.x, x_2213.x, x_2213.x));
  let x_2216 : vec4<f32> = u_xlat6;
  u_xlat6 = vec4<f32>(x_2215.x, x_2215.y, x_2215.z, x_2216.w);
  let x_2218 : f32 = u_xlat42;
  let x_2220 : f32 = u_xlat42;
  let x_2224 : vec2<f32> = ((vec2<f32>(x_2218, x_2218) * vec2<f32>(x_2220, x_2220)) + vec2<f32>(-1.0f, 1.0f));
  let x_2225 : vec4<f32> = u_xlat0;
  u_xlat0 = vec4<f32>(x_2224.x, x_2225.y, x_2224.y, x_2225.w);
  let x_2228 : f32 = u_xlat0.z;
  u_xlat42 = (1.0f / x_2228);
  let x_2230 : vec3<f32> = u_xlat2;
  let x_2232 : f32 = u_xlat65;
  let x_2234 : vec3<f32> = (-(x_2230) + vec3<f32>(x_2232, x_2232, x_2232));
  let x_2235 : vec4<f32> = u_xlat8;
  u_xlat8 = vec4<f32>(x_2234.x, x_2234.y, x_2234.z, x_2235.w);
  let x_2237 : f32 = u_xlat69;
  let x_2239 : vec4<f32> = u_xlat8;
  let x_2242 : vec3<f32> = u_xlat2;
  let x_2243 : vec3<f32> = ((vec3<f32>(x_2237, x_2237, x_2237) * vec3<f32>(x_2239.x, x_2239.y, x_2239.z)) + x_2242);
  let x_2244 : vec4<f32> = u_xlat8;
  u_xlat8 = vec4<f32>(x_2243.x, x_2243.y, x_2243.z, x_2244.w);
  let x_2246 : f32 = u_xlat42;
  let x_2248 : vec4<f32> = u_xlat8;
  let x_2250 : vec3<f32> = (vec3<f32>(x_2246, x_2246, x_2246) * vec3<f32>(x_2248.x, x_2248.y, x_2248.z));
  let x_2251 : vec4<f32> = u_xlat8;
  u_xlat8 = vec4<f32>(x_2250.x, x_2250.y, x_2250.z, x_2251.w);
  let x_2253 : vec4<f32> = u_xlat6;
  let x_2255 : vec4<f32> = u_xlat8;
  let x_2257 : vec3<f32> = (vec3<f32>(x_2253.x, x_2253.y, x_2253.z) * vec3<f32>(x_2255.x, x_2255.y, x_2255.z));
  let x_2258 : vec4<f32> = u_xlat6;
  u_xlat6 = vec4<f32>(x_2257.x, x_2257.y, x_2257.z, x_2258.w);
  let x_2260 : vec4<f32> = u_xlat5;
  let x_2262 : vec3<f32> = u_xlat7;
  let x_2264 : vec4<f32> = u_xlat6;
  let x_2266 : vec3<f32> = ((vec3<f32>(x_2260.x, x_2260.y, x_2260.z) * x_2262) + vec3<f32>(x_2264.x, x_2264.y, x_2264.z));
  let x_2267 : vec4<f32> = u_xlat5;
  u_xlat5 = vec4<f32>(x_2266.x, x_2266.y, x_2266.z, x_2267.w);
  let x_2270 : f32 = u_xlat4.x;
  let x_2272 : f32 = x_274.unity_LightData.z;
  u_xlat42 = (x_2270 * x_2272);
  let x_2274 : vec3<f32> = u_xlat22;
  let x_2276 : vec4<f32> = x_44.x_MainLightPosition;
  u_xlat65 = dot(x_2274, vec3<f32>(x_2276.x, x_2276.y, x_2276.z));
  let x_2279 : f32 = u_xlat65;
  u_xlat65 = clamp(x_2279, 0.0f, 1.0f);
  let x_2281 : f32 = u_xlat42;
  let x_2282 : f32 = u_xlat65;
  u_xlat42 = (x_2281 * x_2282);
  let x_2284 : f32 = u_xlat42;
  let x_2286 : vec3<f32> = u_xlat25;
  let x_2287 : vec3<f32> = (vec3<f32>(x_2284, x_2284, x_2284) * x_2286);
  let x_2288 : vec4<f32> = u_xlat4;
  u_xlat4 = vec4<f32>(x_2287.x, x_2287.y, x_2287.z, x_2288.w);
  let x_2290 : vec3<f32> = u_xlat3;
  let x_2292 : vec4<f32> = x_44.x_MainLightPosition;
  let x_2294 : vec3<f32> = (x_2290 + vec3<f32>(x_2292.x, x_2292.y, x_2292.z));
  let x_2295 : vec4<f32> = u_xlat6;
  u_xlat6 = vec4<f32>(x_2294.x, x_2294.y, x_2294.z, x_2295.w);
  let x_2297 : vec4<f32> = u_xlat6;
  let x_2299 : vec4<f32> = u_xlat6;
  u_xlat42 = dot(vec3<f32>(x_2297.x, x_2297.y, x_2297.z), vec3<f32>(x_2299.x, x_2299.y, x_2299.z));
  let x_2302 : f32 = u_xlat42;
  u_xlat42 = max(x_2302, 1.17549435e-37f);
  let x_2305 : f32 = u_xlat42;
  u_xlat42 = inverseSqrt(x_2305);
  let x_2307 : f32 = u_xlat42;
  let x_2309 : vec4<f32> = u_xlat6;
  let x_2311 : vec3<f32> = (vec3<f32>(x_2307, x_2307, x_2307) * vec3<f32>(x_2309.x, x_2309.y, x_2309.z));
  let x_2312 : vec4<f32> = u_xlat6;
  u_xlat6 = vec4<f32>(x_2311.x, x_2311.y, x_2311.z, x_2312.w);
  let x_2314 : vec3<f32> = u_xlat22;
  let x_2315 : vec4<f32> = u_xlat6;
  u_xlat42 = dot(x_2314, vec3<f32>(x_2315.x, x_2315.y, x_2315.z));
  let x_2318 : f32 = u_xlat42;
  u_xlat42 = clamp(x_2318, 0.0f, 1.0f);
  let x_2321 : vec4<f32> = x_44.x_MainLightPosition;
  let x_2323 : vec4<f32> = u_xlat6;
  u_xlat65 = dot(vec3<f32>(x_2321.x, x_2321.y, x_2321.z), vec3<f32>(x_2323.x, x_2323.y, x_2323.z));
  let x_2326 : f32 = u_xlat65;
  u_xlat65 = clamp(x_2326, 0.0f, 1.0f);
  let x_2328 : f32 = u_xlat42;
  let x_2329 : f32 = u_xlat42;
  u_xlat42 = (x_2328 * x_2329);
  let x_2331 : f32 = u_xlat42;
  let x_2333 : f32 = u_xlat0.x;
  u_xlat42 = ((x_2331 * x_2333) + 1.000010014f);
  let x_2337 : f32 = u_xlat65;
  let x_2338 : f32 = u_xlat65;
  u_xlat65 = (x_2337 * x_2338);
  let x_2340 : f32 = u_xlat42;
  let x_2341 : f32 = u_xlat42;
  u_xlat42 = (x_2340 * x_2341);
  let x_2343 : f32 = u_xlat65;
  u_xlat65 = max(x_2343, 0.100000001f);
  let x_2346 : f32 = u_xlat42;
  let x_2347 : f32 = u_xlat65;
  u_xlat42 = (x_2346 * x_2347);
  let x_2349 : f32 = u_xlat66;
  let x_2350 : f32 = u_xlat42;
  u_xlat42 = (x_2349 * x_2350);
  let x_2353 : f32 = u_xlat1.x;
  let x_2354 : f32 = u_xlat42;
  u_xlat42 = (x_2353 / x_2354);
  let x_2356 : vec3<f32> = u_xlat2;
  let x_2357 : f32 = u_xlat42;
  let x_2360 : vec3<f32> = u_xlat7;
  let x_2361 : vec3<f32> = ((x_2356 * vec3<f32>(x_2357, x_2357, x_2357)) + x_2360);
  let x_2362 : vec4<f32> = u_xlat6;
  u_xlat6 = vec4<f32>(x_2361.x, x_2361.y, x_2361.z, x_2362.w);
  let x_2364 : vec4<f32> = u_xlat4;
  let x_2366 : vec4<f32> = u_xlat6;
  let x_2368 : vec3<f32> = (vec3<f32>(x_2364.x, x_2364.y, x_2364.z) * vec3<f32>(x_2366.x, x_2366.y, x_2366.z));
  let x_2369 : vec4<f32> = u_xlat4;
  u_xlat4 = vec4<f32>(x_2368.x, x_2368.y, x_2368.z, x_2369.w);
  let x_2372 : f32 = x_44.x_AdditionalLightsCount.x;
  let x_2374 : f32 = x_274.unity_LightData.y;
  u_xlat42 = min(x_2372, x_2374);
  let x_2377 : f32 = u_xlat42;
  u_xlatu42 = bitcast<u32>(i32(x_2377));
  u_xlat6.x = 0.0f;
  u_xlat6.y = 0.0f;
  u_xlat6.z = 0.0f;
  u_xlatu_loop_1 = 0u;
  loop {
    let x_2389 : u32 = u_xlatu_loop_1;
    let x_2390 : u32 = u_xlatu42;
    if ((x_2389 < x_2390)) {
    } else {
      break;
    }
    let x_2393 : u32 = u_xlatu_loop_1;
    u_xlatu67 = (x_2393 >> 2u);
    let x_2396 : u32 = u_xlatu_loop_1;
    u_xlati69 = bitcast<i32>((x_2396 & 3u));
    let x_2399 : u32 = u_xlatu67;
    let x_2402 : vec4<f32> = x_274.unity_LightIndices[bitcast<i32>(x_2399)];
    let x_2412 : i32 = u_xlati69;
    indexable = array<vec4<u32>, 4u>(vec4<u32>(1065353216u, 0u, 0u, 0u), vec4<u32>(0u, 1065353216u, 0u, 0u), vec4<u32>(0u, 0u, 1065353216u, 0u), vec4<u32>(0u, 0u, 0u, 1065353216u));
    let x_2417 : vec4<u32> = indexable[x_2412];
    u_xlat67 = dot(x_2402, bitcast<vec4<f32>>(x_2417));
    let x_2421 : f32 = u_xlat67;
    u_xlati67 = i32(x_2421);
    let x_2423 : vec3<f32> = vs_INTERP0;
    let x_2435 : i32 = u_xlati67;
    let x_2437 : vec4<f32> = x_2434.x_AdditionalLightsPosition[x_2435];
    let x_2440 : i32 = u_xlati67;
    let x_2442 : vec4<f32> = x_2434.x_AdditionalLightsPosition[x_2440];
    let x_2444 : vec3<f32> = ((-(x_2423) * vec3<f32>(x_2437.w, x_2437.w, x_2437.w)) + vec3<f32>(x_2442.x, x_2442.y, x_2442.z));
    let x_2445 : vec4<f32> = u_xlat8;
    u_xlat8 = vec4<f32>(x_2444.x, x_2444.y, x_2444.z, x_2445.w);
    let x_2447 : vec4<f32> = u_xlat8;
    let x_2449 : vec4<f32> = u_xlat8;
    u_xlat69 = dot(vec3<f32>(x_2447.x, x_2447.y, x_2447.z), vec3<f32>(x_2449.x, x_2449.y, x_2449.z));
    let x_2452 : f32 = u_xlat69;
    u_xlat69 = max(x_2452, 6.10351562e-05f);
    let x_2455 : f32 = u_xlat69;
    u_xlat70 = inverseSqrt(x_2455);
    let x_2457 : f32 = u_xlat70;
    let x_2459 : vec4<f32> = u_xlat8;
    let x_2461 : vec3<f32> = (vec3<f32>(x_2457, x_2457, x_2457) * vec3<f32>(x_2459.x, x_2459.y, x_2459.z));
    let x_2462 : vec4<f32> = u_xlat9;
    u_xlat9 = vec4<f32>(x_2461.x, x_2461.y, x_2461.z, x_2462.w);
    let x_2465 : f32 = u_xlat69;
    u_xlat71 = (1.0f / x_2465);
    let x_2467 : f32 = u_xlat69;
    let x_2468 : i32 = u_xlati67;
    let x_2470 : f32 = x_2434.x_AdditionalLightsAttenuation[x_2468].x;
    u_xlat69 = (x_2467 * x_2470);
    let x_2472 : f32 = u_xlat69;
    let x_2474 : f32 = u_xlat69;
    u_xlat69 = ((-(x_2472) * x_2474) + 1.0f);
    let x_2477 : f32 = u_xlat69;
    u_xlat69 = max(x_2477, 0.0f);
    let x_2479 : f32 = u_xlat69;
    let x_2480 : f32 = u_xlat69;
    u_xlat69 = (x_2479 * x_2480);
    let x_2482 : f32 = u_xlat69;
    let x_2483 : f32 = u_xlat71;
    u_xlat69 = (x_2482 * x_2483);
    let x_2485 : i32 = u_xlati67;
    let x_2487 : vec4<f32> = x_2434.x_AdditionalLightsSpotDir[x_2485];
    let x_2489 : vec4<f32> = u_xlat9;
    u_xlat71 = dot(vec3<f32>(x_2487.x, x_2487.y, x_2487.z), vec3<f32>(x_2489.x, x_2489.y, x_2489.z));
    let x_2492 : f32 = u_xlat71;
    let x_2493 : i32 = u_xlati67;
    let x_2495 : f32 = x_2434.x_AdditionalLightsAttenuation[x_2493].z;
    let x_2497 : i32 = u_xlati67;
    let x_2499 : f32 = x_2434.x_AdditionalLightsAttenuation[x_2497].w;
    u_xlat71 = ((x_2492 * x_2495) + x_2499);
    let x_2501 : f32 = u_xlat71;
    u_xlat71 = clamp(x_2501, 0.0f, 1.0f);
    let x_2503 : f32 = u_xlat71;
    let x_2504 : f32 = u_xlat71;
    u_xlat71 = (x_2503 * x_2504);
    let x_2506 : f32 = u_xlat69;
    let x_2507 : f32 = u_xlat71;
    u_xlat69 = (x_2506 * x_2507);
    let x_2509 : f32 = u_xlat68;
    let x_2511 : i32 = u_xlati67;
    let x_2513 : vec4<f32> = x_2434.x_AdditionalLightsColor[x_2511];
    let x_2515 : vec3<f32> = (vec3<f32>(x_2509, x_2509, x_2509) * vec3<f32>(x_2513.x, x_2513.y, x_2513.z));
    let x_2516 : vec4<f32> = u_xlat10;
    u_xlat10 = vec4<f32>(x_2515.x, x_2515.y, x_2515.z, x_2516.w);
    let x_2518 : vec3<f32> = u_xlat22;
    let x_2519 : vec4<f32> = u_xlat9;
    u_xlat67 = dot(x_2518, vec3<f32>(x_2519.x, x_2519.y, x_2519.z));
    let x_2522 : f32 = u_xlat67;
    u_xlat67 = clamp(x_2522, 0.0f, 1.0f);
    let x_2524 : f32 = u_xlat67;
    let x_2525 : f32 = u_xlat69;
    u_xlat67 = (x_2524 * x_2525);
    let x_2527 : f32 = u_xlat67;
    let x_2529 : vec4<f32> = u_xlat10;
    let x_2531 : vec3<f32> = (vec3<f32>(x_2527, x_2527, x_2527) * vec3<f32>(x_2529.x, x_2529.y, x_2529.z));
    let x_2532 : vec4<f32> = u_xlat10;
    u_xlat10 = vec4<f32>(x_2531.x, x_2531.y, x_2531.z, x_2532.w);
    let x_2534 : vec4<f32> = u_xlat8;
    let x_2536 : f32 = u_xlat70;
    let x_2539 : vec3<f32> = u_xlat3;
    let x_2540 : vec3<f32> = ((vec3<f32>(x_2534.x, x_2534.y, x_2534.z) * vec3<f32>(x_2536, x_2536, x_2536)) + x_2539);
    let x_2541 : vec4<f32> = u_xlat8;
    u_xlat8 = vec4<f32>(x_2540.x, x_2540.y, x_2540.z, x_2541.w);
    let x_2543 : vec4<f32> = u_xlat8;
    let x_2545 : vec4<f32> = u_xlat8;
    u_xlat67 = dot(vec3<f32>(x_2543.x, x_2543.y, x_2543.z), vec3<f32>(x_2545.x, x_2545.y, x_2545.z));
    let x_2548 : f32 = u_xlat67;
    u_xlat67 = max(x_2548, 1.17549435e-37f);
    let x_2550 : f32 = u_xlat67;
    u_xlat67 = inverseSqrt(x_2550);
    let x_2552 : f32 = u_xlat67;
    let x_2554 : vec4<f32> = u_xlat8;
    let x_2556 : vec3<f32> = (vec3<f32>(x_2552, x_2552, x_2552) * vec3<f32>(x_2554.x, x_2554.y, x_2554.z));
    let x_2557 : vec4<f32> = u_xlat8;
    u_xlat8 = vec4<f32>(x_2556.x, x_2556.y, x_2556.z, x_2557.w);
    let x_2559 : vec3<f32> = u_xlat22;
    let x_2560 : vec4<f32> = u_xlat8;
    u_xlat67 = dot(x_2559, vec3<f32>(x_2560.x, x_2560.y, x_2560.z));
    let x_2563 : f32 = u_xlat67;
    u_xlat67 = clamp(x_2563, 0.0f, 1.0f);
    let x_2565 : vec4<f32> = u_xlat9;
    let x_2567 : vec4<f32> = u_xlat8;
    u_xlat69 = dot(vec3<f32>(x_2565.x, x_2565.y, x_2565.z), vec3<f32>(x_2567.x, x_2567.y, x_2567.z));
    let x_2570 : f32 = u_xlat69;
    u_xlat69 = clamp(x_2570, 0.0f, 1.0f);
    let x_2572 : f32 = u_xlat67;
    let x_2573 : f32 = u_xlat67;
    u_xlat67 = (x_2572 * x_2573);
    let x_2575 : f32 = u_xlat67;
    let x_2577 : f32 = u_xlat0.x;
    u_xlat67 = ((x_2575 * x_2577) + 1.000010014f);
    let x_2580 : f32 = u_xlat69;
    let x_2581 : f32 = u_xlat69;
    u_xlat69 = (x_2580 * x_2581);
    let x_2583 : f32 = u_xlat67;
    let x_2584 : f32 = u_xlat67;
    u_xlat67 = (x_2583 * x_2584);
    let x_2586 : f32 = u_xlat69;
    u_xlat69 = max(x_2586, 0.100000001f);
    let x_2588 : f32 = u_xlat67;
    let x_2589 : f32 = u_xlat69;
    u_xlat67 = (x_2588 * x_2589);
    let x_2591 : f32 = u_xlat66;
    let x_2592 : f32 = u_xlat67;
    u_xlat67 = (x_2591 * x_2592);
    let x_2595 : f32 = u_xlat1.x;
    let x_2596 : f32 = u_xlat67;
    u_xlat67 = (x_2595 / x_2596);
    let x_2598 : vec3<f32> = u_xlat2;
    let x_2599 : f32 = u_xlat67;
    let x_2602 : vec3<f32> = u_xlat7;
    let x_2603 : vec3<f32> = ((x_2598 * vec3<f32>(x_2599, x_2599, x_2599)) + x_2602);
    let x_2604 : vec4<f32> = u_xlat8;
    u_xlat8 = vec4<f32>(x_2603.x, x_2603.y, x_2603.z, x_2604.w);
    let x_2606 : vec4<f32> = u_xlat8;
    let x_2608 : vec4<f32> = u_xlat10;
    let x_2611 : vec4<f32> = u_xlat6;
    let x_2613 : vec3<f32> = ((vec3<f32>(x_2606.x, x_2606.y, x_2606.z) * vec3<f32>(x_2608.x, x_2608.y, x_2608.z)) + vec3<f32>(x_2611.x, x_2611.y, x_2611.z));
    let x_2614 : vec4<f32> = u_xlat6;
    u_xlat6 = vec4<f32>(x_2613.x, x_2613.y, x_2613.z, x_2614.w);

    continuing {
      let x_2616 : u32 = u_xlatu_loop_1;
      u_xlatu_loop_1 = (x_2616 + bitcast<u32>(1i));
    }
  }
  let x_2618 : vec4<f32> = u_xlat5;
  let x_2620 : f32 = u_xlat63;
  let x_2623 : vec4<f32> = u_xlat4;
  let x_2625 : vec3<f32> = ((vec3<f32>(x_2618.x, x_2618.y, x_2618.z) * vec3<f32>(x_2620, x_2620, x_2620)) + vec3<f32>(x_2623.x, x_2623.y, x_2623.z));
  let x_2626 : vec4<f32> = u_xlat0;
  u_xlat0 = vec4<f32>(x_2625.x, x_2626.y, x_2625.y, x_2625.z);
  let x_2628 : vec4<f32> = u_xlat6;
  let x_2630 : vec4<f32> = u_xlat0;
  let x_2632 : vec3<f32> = (vec3<f32>(x_2628.x, x_2628.y, x_2628.z) + vec3<f32>(x_2630.x, x_2630.z, x_2630.w));
  let x_2633 : vec4<f32> = u_xlat0;
  u_xlat0 = vec4<f32>(x_2632.x, x_2633.y, x_2632.y, x_2632.z);
  let x_2636 : f32 = u_xlat21.x;
  let x_2638 : f32 = u_xlat21.x;
  u_xlat21.x = (x_2636 * -(x_2638));
  let x_2643 : f32 = u_xlat21.x;
  u_xlat21.x = exp2(x_2643);
  let x_2646 : vec4<f32> = u_xlat0;
  let x_2650 : vec4<f32> = x_44.unity_FogColor;
  let x_2653 : vec3<f32> = (vec3<f32>(x_2646.x, x_2646.z, x_2646.w) + -(vec3<f32>(x_2650.x, x_2650.y, x_2650.z)));
  let x_2654 : vec4<f32> = u_xlat0;
  u_xlat0 = vec4<f32>(x_2653.x, x_2654.y, x_2653.y, x_2653.z);
  let x_2658 : vec2<f32> = u_xlat21;
  let x_2660 : vec4<f32> = u_xlat0;
  let x_2664 : vec4<f32> = x_44.unity_FogColor;
  let x_2666 : vec3<f32> = ((vec3<f32>(x_2658.x, x_2658.x, x_2658.x) * vec3<f32>(x_2660.x, x_2660.z, x_2660.w)) + vec3<f32>(x_2664.x, x_2664.y, x_2664.z));
  let x_2667 : vec4<f32> = SV_Target0;
  SV_Target0 = vec4<f32>(x_2666.x, x_2666.y, x_2666.z, x_2667.w);
  let x_2672 : u32 = x_44.x_RenderingLayerMaxInt;
  let x_2674 : f32 = x_274.unity_RenderingLayer.x;
  u_xlatu0 = (x_2672 & bitcast<u32>(x_2674));
  let x_2677 : u32 = u_xlatu0;
  u_xlat0.x = f32(x_2677);
  let x_2682 : f32 = u_xlat0.x;
  let x_2684 : f32 = x_44.x_RenderingLayerRcpMaxInt;
  SV_Target1.x = (x_2682 * x_2684);
  let x_2689 : f32 = SV_Target1.x;
  SV_Target1.x = clamp(x_2689, 0.0f, 1.0f);
  SV_Target0.w = 1.0f;
  let x_2693 : vec4<f32> = SV_Target1;
  SV_Target1 = vec4<f32>(x_2693.x, vec3<f32>(0.0f, 0.0f, 0.0f).x, vec3<f32>(0.0f, 0.0f, 0.0f).y, vec3<f32>(0.0f, 0.0f, 0.0f).z);
  return;
}

struct main_out {
  @location(0)
  SV_Target0_1 : vec4<f32>,
  @location(1)
  SV_Target1_1 : vec4<f32>,
}

@fragment
fn main(@builtin(position) gl_FragCoord_param : vec4<f32>, @location(3) vs_INTERP3_param : vec4<f32>, @location(2) vs_INTERP2_param : vec4<f32>, @location(1) vs_INTERP1_param : vec3<f32>, @location(0) vs_INTERP0_param : vec3<f32>, @location(4) vs_INTERP4_param : vec2<f32>) -> main_out {
  gl_FragCoord = gl_FragCoord_param;
  vs_INTERP3 = vs_INTERP3_param;
  vs_INTERP2 = vs_INTERP2_param;
  vs_INTERP1 = vs_INTERP1_param;
  vs_INTERP0 = vs_INTERP0_param;
  vs_INTERP4 = vs_INTERP4_param;
  main_1();
  return main_out(SV_Target0, SV_Target1);
}

