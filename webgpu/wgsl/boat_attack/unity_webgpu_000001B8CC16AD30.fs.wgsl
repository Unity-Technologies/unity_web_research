type Arr = array<vec4<f32>, 2u>;

type Arr_1 = array<mat4x4<f32>, 2u>;

type Arr_2 = array<vec4<f32>, 2u>;

type Arr_3 = array<vec4<f32>, 2u>;

struct PGlobals {
  x_GlobalMipBias : vec2<f32>,
  @size(8)
  padding : u32,
  x_ZBufferParams : vec4<f32>,
  unity_MatrixV : mat4x4<f32>,
  x_SSAOParams : vec4<f32>,
  x_CameraViewTopLeftCorner : Arr_3,
  x_CameraViewProjections : Arr_1,
  x_ProjectionParams2 : vec4<f32>,
  x_CameraViewXExtent : Arr_3,
  x_CameraViewYExtent : Arr_3,
  x_SSAOBlueNoiseParams : vec4<f32>,
}

@group(0) @binding(0) var x_CameraDepthTexture : texture_2d<f32>;

@group(0) @binding(4) var sampler_CameraDepthTexture : sampler;

var<private> vs_TEXCOORD0 : vec2<f32>;

@group(1) @binding(0) var<uniform> x_33 : PGlobals;

var<private> SV_Target0 : vec4<f32>;

@group(0) @binding(1) var x_CameraNormalsTexture : texture_2d<f32>;

@group(0) @binding(5) var sampler_CameraNormalsTexture : sampler;

@group(0) @binding(2) var x_BlueNoiseTexture : texture_2d<f32>;

@group(0) @binding(3) var sampler_PointRepeat : sampler;

var<private> gl_FragCoord : vec4<f32>;

fn main_1() {
  var u_xlat0 : f32;
  var u_xlatb8 : bool;
  var u_xlat8 : vec3<f32>;
  var u_xlat1 : vec4<f32>;
  var u_xlat9 : f32;
  var u_xlat2 : vec4<f32>;
  var u_xlat18 : vec2<f32>;
  var u_xlat25 : f32;
  var u_xlat3 : vec4<f32>;
  var u_xlat4 : vec3<f32>;
  var u_xlat5 : vec3<f32>;
  var u_xlatb25 : bool;
  var u_xlat11 : vec3<f32>;
  var u_xlatb3 : vec2<bool>;
  var u_xlat26 : f32;
  var u_xlat6 : f32;
  var u_xlat7 : f32;
  var u_xlatb26 : bool;
  var u_xlat28 : f32;
  var u_xlatb28 : bool;
  var u_xlatb18 : bool;
  var u_xlat19 : f32;
  var u_xlat10 : vec2<f32>;
  var u_xlatb2 : vec4<bool>;
  var u_xlat_precise_vec4 : vec4<f32>;
  var u_xlat_precise_ivec4 : vec4<i32>;
  var u_xlat_precise_bvec4 : vec4<bool>;
  var u_xlat_precise_uvec4 : vec4<u32>;
  let x_22 : vec2<f32> = vs_TEXCOORD0;
  let x_39 : f32 = x_33.x_GlobalMipBias.x;
  let x_40 : vec4<f32> = textureSampleBias(x_CameraDepthTexture, sampler_CameraDepthTexture, x_22, x_39);
  u_xlat0 = x_40.x;
  let x_45 : f32 = u_xlat0;
  u_xlatb8 = (x_45 < 0.00001f);
  let x_48 : bool = u_xlatb8;
  if (x_48) {
    SV_Target0 = vec4<f32>(0.0f, 0.5f, 0.5f, 0.5f);
    return;
  }
  let x_59 : f32 = x_33.x_ZBufferParams.z;
  let x_60 : f32 = u_xlat0;
  let x_64 : f32 = x_33.x_ZBufferParams.w;
  u_xlat0 = ((x_59 * x_60) + x_64);
  let x_67 : f32 = u_xlat0;
  u_xlat0 = (1.0f / x_67);
  let x_71 : f32 = x_33.x_SSAOParams.w;
  let x_72 : f32 = u_xlat0;
  u_xlatb8 = (x_71 < x_72);
  let x_74 : bool = u_xlatb8;
  if (x_74) {
    SV_Target0 = vec4<f32>(0.0f, 0.5f, 0.5f, 0.5f);
    return;
  }
  let x_86 : vec2<f32> = vs_TEXCOORD0;
  let x_88 : f32 = x_33.x_GlobalMipBias.x;
  let x_89 : vec4<f32> = textureSampleBias(x_CameraNormalsTexture, sampler_CameraNormalsTexture, x_86, x_88);
  u_xlat8 = vec3<f32>(x_89.x, x_89.y, x_89.z);
  let x_96 : f32 = vs_TEXCOORD0.y;
  u_xlat1.x = (-(x_96) + 1.0f);
  let x_101 : f32 = u_xlat0;
  let x_104 : f32 = x_33.x_ProjectionParams2.x;
  u_xlat9 = (x_101 * x_104);
  let x_110 : vec4<f32> = x_33.x_CameraViewXExtent[0i];
  let x_112 : vec2<f32> = vs_TEXCOORD0;
  let x_117 : vec4<f32> = x_33.x_CameraViewTopLeftCorner[0i];
  let x_119 : vec3<f32> = ((vec3<f32>(x_110.x, x_110.y, x_110.z) * vec3<f32>(x_112.x, x_112.x, x_112.x)) + vec3<f32>(x_117.x, x_117.y, x_117.z));
  let x_120 : vec4<f32> = u_xlat2;
  u_xlat2 = vec4<f32>(x_119.x, x_119.y, x_119.z, x_120.w);
  let x_124 : vec4<f32> = x_33.x_CameraViewYExtent[0i];
  let x_126 : vec4<f32> = u_xlat1;
  let x_129 : vec4<f32> = u_xlat2;
  let x_131 : vec3<f32> = ((vec3<f32>(x_124.x, x_124.y, x_124.z) * vec3<f32>(x_126.x, x_126.x, x_126.x)) + vec3<f32>(x_129.x, x_129.y, x_129.z));
  let x_132 : vec4<f32> = u_xlat1;
  u_xlat1 = vec4<f32>(x_131.x, x_132.y, x_131.y, x_131.z);
  let x_134 : f32 = u_xlat9;
  let x_136 : vec4<f32> = u_xlat1;
  let x_138 : vec3<f32> = (vec3<f32>(x_134, x_134, x_134) * vec3<f32>(x_136.x, x_136.z, x_136.w));
  let x_139 : vec4<f32> = u_xlat1;
  u_xlat1 = vec4<f32>(x_138.x, x_138.y, x_138.z, x_139.w);
  let x_141 : vec2<f32> = vs_TEXCOORD0;
  let x_144 : vec4<f32> = x_33.x_SSAOBlueNoiseParams;
  let x_146 : vec2<f32> = (x_141 + vec2<f32>(x_144.z, x_144.w));
  let x_147 : vec4<f32> = u_xlat2;
  u_xlat2 = vec4<f32>(x_146.x, x_146.y, x_147.z, x_147.w);
  let x_151 : vec4<f32> = u_xlat2;
  let x_154 : vec4<f32> = x_33.x_SSAOBlueNoiseParams;
  u_xlat18 = (vec2<f32>(x_151.x, x_151.y) * vec2<f32>(x_154.x, x_154.y));
  let x_163 : vec2<f32> = u_xlat18;
  let x_165 : f32 = x_33.x_GlobalMipBias.x;
  let x_166 : vec4<f32> = textureSampleBias(x_BlueNoiseTexture, sampler_PointRepeat, x_163, x_165);
  u_xlat25 = x_166.w;
  let x_168 : f32 = u_xlat25;
  u_xlat18.x = fract(x_168);
  let x_173 : f32 = u_xlat18.x;
  u_xlat3.z = ((x_173 * 2.0f) + -1.0f);
  let x_179 : f32 = u_xlat25;
  u_xlat25 = (x_179 + 0.9296875f);
  let x_182 : f32 = u_xlat25;
  u_xlat25 = (x_182 * 628.31854248f);
  let x_186 : f32 = u_xlat3.z;
  let x_189 : f32 = u_xlat3.z;
  u_xlat18.x = ((-(x_186) * x_189) + 1.0f);
  let x_194 : f32 = u_xlat18.x;
  u_xlat18.x = sqrt(x_194);
  let x_198 : f32 = u_xlat25;
  u_xlat4.x = sin(x_198);
  let x_202 : f32 = u_xlat25;
  u_xlat5.x = cos(x_202);
  let x_206 : f32 = u_xlat18.x;
  let x_208 : f32 = u_xlat5.x;
  u_xlat3.x = (x_206 * x_208);
  let x_212 : f32 = u_xlat18.x;
  let x_214 : f32 = u_xlat4.x;
  u_xlat3.y = (x_212 * x_214);
  let x_217 : vec3<f32> = u_xlat8;
  let x_218 : vec4<f32> = u_xlat3;
  u_xlat25 = dot(x_217, vec3<f32>(x_218.x, x_218.y, x_218.z));
  let x_222 : f32 = u_xlat25;
  u_xlatb25 = (x_222 >= 0.0f);
  let x_224 : bool = u_xlatb25;
  u_xlat25 = select(-1.0f, 1.0f, x_224);
  let x_226 : f32 = u_xlat25;
  let x_228 : vec4<f32> = u_xlat3;
  let x_230 : vec3<f32> = (vec3<f32>(x_226, x_226, x_226) * vec3<f32>(x_228.x, x_228.y, x_228.z));
  let x_231 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_230.x, x_230.y, x_230.z, x_231.w);
  let x_233 : vec4<f32> = u_xlat3;
  let x_236 : vec4<f32> = x_33.x_SSAOParams;
  let x_238 : vec3<f32> = (vec3<f32>(x_233.x, x_233.y, x_233.z) * vec3<f32>(x_236.y, x_236.y, x_236.y));
  let x_239 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_238.x, x_238.y, x_238.z, x_239.w);
  let x_241 : vec4<f32> = u_xlat3;
  let x_246 : vec4<f32> = u_xlat1;
  let x_248 : vec3<f32> = ((vec3<f32>(x_241.x, x_241.y, x_241.z) * vec3<f32>(0.100000001f, 0.100000001f, 0.100000001f)) + vec3<f32>(x_246.x, x_246.y, x_246.z));
  let x_249 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_248.x, x_248.y, x_248.z, x_249.w);
  let x_251 : vec4<f32> = u_xlat3;
  let x_255 : vec4<f32> = x_33.x_CameraViewProjections[0i][1i];
  u_xlat18 = (vec2<f32>(x_251.y, x_251.y) * vec2<f32>(x_255.x, x_255.y));
  let x_259 : vec4<f32> = x_33.x_CameraViewProjections[0i][0i];
  let x_261 : vec4<f32> = u_xlat3;
  let x_264 : vec2<f32> = u_xlat18;
  u_xlat18 = ((vec2<f32>(x_259.x, x_259.y) * vec2<f32>(x_261.x, x_261.x)) + x_264);
  let x_268 : vec4<f32> = x_33.x_CameraViewProjections[0i][2i];
  let x_270 : vec4<f32> = u_xlat3;
  let x_273 : vec2<f32> = u_xlat18;
  u_xlat18 = ((vec2<f32>(x_268.x, x_268.y) * vec2<f32>(x_270.z, x_270.z)) + x_273);
  let x_276 : f32 = x_33.unity_MatrixV[0i].z;
  u_xlat4.x = x_276;
  let x_279 : f32 = x_33.unity_MatrixV[1i].z;
  u_xlat4.y = x_279;
  let x_282 : f32 = x_33.unity_MatrixV[2i].z;
  u_xlat4.z = x_282;
  let x_284 : vec3<f32> = u_xlat4;
  let x_285 : vec4<f32> = u_xlat3;
  u_xlat25 = dot(x_284, vec3<f32>(x_285.x, x_285.y, x_285.z));
  let x_288 : f32 = u_xlat25;
  u_xlat3.x = (1.0f / -(x_288));
  let x_292 : vec2<f32> = u_xlat18;
  let x_293 : vec4<f32> = u_xlat3;
  u_xlat18 = ((x_292 * vec2<f32>(x_293.x, x_293.x)) + vec2<f32>(1.0f, 1.0f));
  let x_298 : vec2<f32> = u_xlat18;
  u_xlat18 = (x_298 * vec2<f32>(0.5f, 0.5f));
  let x_301 : vec2<f32> = u_xlat18;
  u_xlat18 = clamp(x_301, vec2<f32>(0.0f, 0.0f), vec2<f32>(1.0f, 1.0f));
  let x_308 : vec2<f32> = u_xlat18;
  let x_310 : f32 = x_33.x_GlobalMipBias.x;
  let x_311 : vec4<f32> = textureSampleBias(x_CameraDepthTexture, sampler_CameraDepthTexture, x_308, x_310);
  u_xlat3.x = x_311.x;
  let x_316 : f32 = x_33.x_ZBufferParams.z;
  let x_318 : f32 = u_xlat3.x;
  let x_321 : f32 = x_33.x_ZBufferParams.w;
  u_xlat11.x = ((x_316 * x_318) + x_321);
  let x_325 : f32 = u_xlat11.x;
  u_xlat11.x = (1.0f / x_325);
  let x_328 : f32 = u_xlat25;
  let x_331 : f32 = u_xlat11.x;
  u_xlat25 = (-(x_328) + -(x_331));
  let x_334 : f32 = u_xlat25;
  let x_337 : f32 = x_33.x_SSAOParams.y;
  u_xlatb25 = (abs(x_334) < x_337);
  let x_339 : bool = u_xlatb25;
  u_xlat25 = select(0.0f, 1.0f, x_339);
  let x_345 : f32 = u_xlat3.x;
  u_xlatb3.x = (0.00001f < x_345);
  let x_349 : bool = u_xlatb3.x;
  u_xlat3.x = select(0.0f, 1.0f, x_349);
  let x_352 : f32 = u_xlat25;
  let x_354 : f32 = u_xlat3.x;
  u_xlat25 = (x_352 * x_354);
  let x_358 : f32 = u_xlat18.y;
  u_xlat26 = (-(x_358) + 1.0f);
  let x_362 : f32 = u_xlat11.x;
  let x_364 : f32 = x_33.x_ProjectionParams2.x;
  u_xlat3.x = (x_362 * x_364);
  let x_368 : vec4<f32> = x_33.x_CameraViewXExtent[0i];
  let x_370 : vec2<f32> = u_xlat18;
  let x_374 : vec4<f32> = x_33.x_CameraViewTopLeftCorner[0i];
  u_xlat11 = ((vec3<f32>(x_368.x, x_368.y, x_368.z) * vec3<f32>(x_370.x, x_370.x, x_370.x)) + vec3<f32>(x_374.x, x_374.y, x_374.z));
  let x_378 : vec4<f32> = x_33.x_CameraViewYExtent[0i];
  let x_380 : f32 = u_xlat26;
  let x_383 : vec3<f32> = u_xlat11;
  u_xlat11 = ((vec3<f32>(x_378.x, x_378.y, x_378.z) * vec3<f32>(x_380, x_380, x_380)) + x_383);
  let x_385 : vec3<f32> = u_xlat11;
  let x_386 : vec4<f32> = u_xlat3;
  let x_389 : vec4<f32> = u_xlat1;
  let x_392 : vec3<f32> = ((x_385 * vec3<f32>(x_386.x, x_386.x, x_386.x)) + -(vec3<f32>(x_389.x, x_389.y, x_389.z)));
  let x_393 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_392.x, x_392.y, x_392.z, x_393.w);
  let x_395 : vec4<f32> = u_xlat3;
  let x_397 : vec3<f32> = u_xlat8;
  u_xlat18.x = dot(vec3<f32>(x_395.x, x_395.y, x_395.z), x_397);
  let x_400 : f32 = u_xlat0;
  let x_405 : f32 = u_xlat18.x;
  u_xlat18.x = ((-(x_400) * 0.004f) + x_405);
  let x_409 : f32 = u_xlat18.x;
  u_xlat18.x = max(x_409, 0.0f);
  let x_412 : vec4<f32> = u_xlat3;
  let x_414 : vec4<f32> = u_xlat3;
  u_xlat26 = dot(vec3<f32>(x_412.x, x_412.y, x_412.z), vec3<f32>(x_414.x, x_414.y, x_414.z));
  let x_417 : f32 = u_xlat26;
  u_xlat26 = (x_417 + 0.0001f);
  let x_420 : f32 = u_xlat26;
  u_xlat26 = (1.0f / x_420);
  let x_422 : f32 = u_xlat26;
  let x_424 : f32 = u_xlat18.x;
  u_xlat18.x = (x_422 * x_424);
  let x_427 : vec4<f32> = u_xlat2;
  let x_430 : vec4<f32> = x_33.x_SSAOBlueNoiseParams;
  u_xlat3 = ((vec4<f32>(x_427.x, x_427.y, x_427.x, x_427.y) * vec4<f32>(x_430.x, x_430.y, x_430.x, x_430.y)) + vec4<f32>(0.25f, 0.25f, 0.5f, 0.5f));
  let x_439 : vec4<f32> = u_xlat3;
  let x_442 : f32 = x_33.x_GlobalMipBias.x;
  let x_443 : vec4<f32> = textureSampleBias(x_BlueNoiseTexture, sampler_PointRepeat, vec2<f32>(x_439.x, x_439.y), x_442);
  u_xlat26 = x_443.w;
  let x_445 : f32 = u_xlat26;
  let x_450 : vec2<f32> = (vec2<f32>(x_445, x_445) + vec2<f32>(0.33984375f, 0.76171875f));
  let x_451 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_450.x, x_450.y, x_451.z, x_451.w);
  let x_454 : f32 = u_xlat3.x;
  u_xlat26 = fract(x_454);
  let x_456 : f32 = u_xlat26;
  u_xlat5.z = ((x_456 * 2.0f) + -1.0f);
  let x_461 : f32 = u_xlat3.y;
  u_xlat26 = (x_461 * 628.31854248f);
  let x_464 : f32 = u_xlat5.z;
  let x_467 : f32 = u_xlat5.z;
  u_xlat3.x = ((-(x_464) * x_467) + 1.0f);
  let x_472 : f32 = u_xlat3.x;
  u_xlat3.x = sqrt(x_472);
  let x_476 : f32 = u_xlat26;
  u_xlat6 = sin(x_476);
  let x_479 : f32 = u_xlat26;
  u_xlat7 = cos(x_479);
  let x_482 : f32 = u_xlat3.x;
  let x_483 : f32 = u_xlat7;
  u_xlat5.x = (x_482 * x_483);
  let x_487 : f32 = u_xlat3.x;
  let x_488 : f32 = u_xlat6;
  u_xlat5.y = (x_487 * x_488);
  let x_491 : vec3<f32> = u_xlat8;
  let x_492 : vec3<f32> = u_xlat5;
  u_xlat26 = dot(x_491, x_492);
  let x_495 : f32 = u_xlat26;
  u_xlatb26 = (x_495 >= 0.0f);
  let x_497 : bool = u_xlatb26;
  u_xlat26 = select(-1.0f, 1.0f, x_497);
  let x_499 : f32 = u_xlat26;
  let x_501 : vec3<f32> = u_xlat5;
  u_xlat5 = (vec3<f32>(x_499, x_499, x_499) * x_501);
  let x_503 : vec3<f32> = u_xlat5;
  let x_505 : vec4<f32> = x_33.x_SSAOParams;
  u_xlat5 = (x_503 * vec3<f32>(x_505.y, x_505.y, x_505.y));
  let x_508 : vec3<f32> = u_xlat5;
  let x_512 : vec4<f32> = u_xlat1;
  u_xlat5 = ((x_508 * vec3<f32>(0.15625f, 0.15625f, 0.15625f)) + vec3<f32>(x_512.x, x_512.y, x_512.z));
  let x_515 : vec3<f32> = u_xlat5;
  let x_518 : vec4<f32> = x_33.x_CameraViewProjections[0i][1i];
  let x_520 : vec2<f32> = (vec2<f32>(x_515.y, x_515.y) * vec2<f32>(x_518.x, x_518.y));
  let x_521 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_520.x, x_520.y, x_521.z, x_521.w);
  let x_524 : vec4<f32> = x_33.x_CameraViewProjections[0i][0i];
  let x_526 : vec3<f32> = u_xlat5;
  let x_529 : vec4<f32> = u_xlat3;
  let x_531 : vec2<f32> = ((vec2<f32>(x_524.x, x_524.y) * vec2<f32>(x_526.x, x_526.x)) + vec2<f32>(x_529.x, x_529.y));
  let x_532 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_531.x, x_531.y, x_532.z, x_532.w);
  let x_535 : vec4<f32> = x_33.x_CameraViewProjections[0i][2i];
  let x_537 : vec3<f32> = u_xlat5;
  let x_540 : vec4<f32> = u_xlat3;
  let x_542 : vec2<f32> = ((vec2<f32>(x_535.x, x_535.y) * vec2<f32>(x_537.z, x_537.z)) + vec2<f32>(x_540.x, x_540.y));
  let x_543 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_542.x, x_542.y, x_543.z, x_543.w);
  let x_545 : vec3<f32> = u_xlat4;
  let x_546 : vec3<f32> = u_xlat5;
  u_xlat26 = dot(x_545, x_546);
  let x_549 : f32 = u_xlat26;
  u_xlat28 = (1.0f / -(x_549));
  let x_552 : vec4<f32> = u_xlat3;
  let x_554 : f32 = u_xlat28;
  let x_557 : vec2<f32> = ((vec2<f32>(x_552.x, x_552.y) * vec2<f32>(x_554, x_554)) + vec2<f32>(1.0f, 1.0f));
  let x_558 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_557.x, x_557.y, x_558.z, x_558.w);
  let x_560 : vec4<f32> = u_xlat3;
  let x_562 : vec2<f32> = (vec2<f32>(x_560.x, x_560.y) * vec2<f32>(0.5f, 0.5f));
  let x_563 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_562.x, x_562.y, x_563.z, x_563.w);
  let x_565 : vec4<f32> = u_xlat3;
  let x_569 : vec2<f32> = clamp(vec2<f32>(x_565.x, x_565.y), vec2<f32>(0.0f, 0.0f), vec2<f32>(1.0f, 1.0f));
  let x_570 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_569.x, x_569.y, x_570.z, x_570.w);
  let x_575 : vec4<f32> = u_xlat3;
  let x_578 : f32 = x_33.x_GlobalMipBias.x;
  let x_579 : vec4<f32> = textureSampleBias(x_CameraDepthTexture, sampler_CameraDepthTexture, vec2<f32>(x_575.x, x_575.y), x_578);
  u_xlat28 = x_579.x;
  let x_582 : f32 = x_33.x_ZBufferParams.z;
  let x_583 : f32 = u_xlat28;
  let x_586 : f32 = x_33.x_ZBufferParams.w;
  u_xlat5.x = ((x_582 * x_583) + x_586);
  let x_590 : f32 = u_xlat5.x;
  u_xlat5.x = (1.0f / x_590);
  let x_593 : f32 = u_xlat26;
  let x_596 : f32 = u_xlat5.x;
  u_xlat26 = (-(x_593) + -(x_596));
  let x_599 : f32 = u_xlat26;
  let x_602 : f32 = x_33.x_SSAOParams.y;
  u_xlatb26 = (abs(x_599) < x_602);
  let x_604 : bool = u_xlatb26;
  u_xlat26 = select(0.0f, 1.0f, x_604);
  let x_607 : f32 = u_xlat28;
  u_xlatb28 = (0.00001f < x_607);
  let x_609 : bool = u_xlatb28;
  u_xlat28 = select(0.0f, 1.0f, x_609);
  let x_611 : f32 = u_xlat26;
  let x_612 : f32 = u_xlat28;
  u_xlat26 = (x_611 * x_612);
  let x_615 : f32 = u_xlat3.y;
  u_xlat11.x = (-(x_615) + 1.0f);
  let x_620 : f32 = u_xlat5.x;
  let x_622 : f32 = x_33.x_ProjectionParams2.x;
  u_xlat28 = (x_620 * x_622);
  let x_625 : vec4<f32> = x_33.x_CameraViewXExtent[0i];
  let x_627 : vec4<f32> = u_xlat3;
  let x_631 : vec4<f32> = x_33.x_CameraViewTopLeftCorner[0i];
  u_xlat5 = ((vec3<f32>(x_625.x, x_625.y, x_625.z) * vec3<f32>(x_627.x, x_627.x, x_627.x)) + vec3<f32>(x_631.x, x_631.y, x_631.z));
  let x_635 : vec4<f32> = x_33.x_CameraViewYExtent[0i];
  let x_637 : vec3<f32> = u_xlat11;
  let x_640 : vec3<f32> = u_xlat5;
  u_xlat5 = ((vec3<f32>(x_635.x, x_635.y, x_635.z) * vec3<f32>(x_637.x, x_637.x, x_637.x)) + x_640);
  let x_642 : vec3<f32> = u_xlat5;
  let x_643 : f32 = u_xlat28;
  let x_646 : vec4<f32> = u_xlat1;
  u_xlat5 = ((x_642 * vec3<f32>(x_643, x_643, x_643)) + -(vec3<f32>(x_646.x, x_646.y, x_646.z)));
  let x_650 : vec3<f32> = u_xlat5;
  let x_651 : vec3<f32> = u_xlat8;
  u_xlat3.x = dot(x_650, x_651);
  let x_654 : f32 = u_xlat0;
  let x_658 : f32 = u_xlat3.x;
  u_xlat3.x = ((-(x_654) * 0.004f) + x_658);
  let x_662 : f32 = u_xlat3.x;
  u_xlat3.x = max(x_662, 0.0f);
  let x_665 : vec3<f32> = u_xlat5;
  let x_666 : vec3<f32> = u_xlat5;
  u_xlat11.x = dot(x_665, x_666);
  let x_670 : f32 = u_xlat11.x;
  u_xlat11.x = (x_670 + 0.0001f);
  let x_674 : f32 = u_xlat11.x;
  u_xlat11.x = (1.0f / x_674);
  let x_678 : f32 = u_xlat11.x;
  let x_680 : f32 = u_xlat3.x;
  u_xlat3.x = (x_678 * x_680);
  let x_683 : f32 = u_xlat26;
  let x_685 : f32 = u_xlat3.x;
  u_xlat26 = (x_683 * x_685);
  let x_688 : f32 = u_xlat18.x;
  let x_689 : f32 = u_xlat25;
  let x_691 : f32 = u_xlat26;
  u_xlat25 = ((x_688 * x_689) + x_691);
  let x_696 : vec4<f32> = u_xlat3;
  let x_699 : f32 = x_33.x_GlobalMipBias.x;
  let x_700 : vec4<f32> = textureSampleBias(x_BlueNoiseTexture, sampler_PointRepeat, vec2<f32>(x_696.z, x_696.w), x_699);
  u_xlat18.x = x_700.w;
  let x_703 : vec2<f32> = u_xlat18;
  u_xlat18 = (vec2<f32>(x_703.x, x_703.x) + vec2<f32>(0.75390625f, 0.133333296f));
  let x_710 : f32 = u_xlat18.x;
  u_xlat18.x = fract(x_710);
  let x_714 : f32 = u_xlat18.x;
  u_xlat3.z = ((x_714 * 2.0f) + -1.0f);
  let x_719 : f32 = u_xlat18.y;
  u_xlat18.x = (x_719 * 628.31854248f);
  let x_723 : f32 = u_xlat3.z;
  let x_726 : f32 = u_xlat3.z;
  u_xlat26 = ((-(x_723) * x_726) + 1.0f);
  let x_729 : f32 = u_xlat26;
  u_xlat26 = sqrt(x_729);
  let x_732 : f32 = u_xlat18.x;
  u_xlat5.x = sin(x_732);
  let x_736 : f32 = u_xlat18.x;
  u_xlat6 = cos(x_736);
  let x_738 : f32 = u_xlat26;
  let x_739 : f32 = u_xlat6;
  u_xlat3.x = (x_738 * x_739);
  let x_742 : f32 = u_xlat26;
  let x_744 : f32 = u_xlat5.x;
  u_xlat3.y = (x_742 * x_744);
  let x_747 : vec3<f32> = u_xlat8;
  let x_748 : vec4<f32> = u_xlat3;
  u_xlat18.x = dot(x_747, vec3<f32>(x_748.x, x_748.y, x_748.z));
  let x_754 : f32 = u_xlat18.x;
  u_xlatb18 = (x_754 >= 0.0f);
  let x_756 : bool = u_xlatb18;
  u_xlat18.x = select(-1.0f, 1.0f, x_756);
  let x_759 : vec2<f32> = u_xlat18;
  let x_761 : vec4<f32> = u_xlat3;
  let x_763 : vec3<f32> = (vec3<f32>(x_759.x, x_759.x, x_759.x) * vec3<f32>(x_761.x, x_761.y, x_761.z));
  let x_764 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_763.x, x_763.y, x_763.z, x_764.w);
  let x_766 : vec4<f32> = u_xlat3;
  let x_769 : vec4<f32> = x_33.x_SSAOParams;
  let x_771 : vec3<f32> = (vec3<f32>(x_766.x, x_766.y, x_766.z) * vec3<f32>(x_769.y, x_769.y, x_769.y));
  let x_772 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_771.x, x_771.y, x_771.z, x_772.w);
  let x_774 : vec4<f32> = u_xlat3;
  let x_779 : vec4<f32> = u_xlat1;
  let x_781 : vec3<f32> = ((vec3<f32>(x_774.x, x_774.y, x_774.z) * vec3<f32>(0.324999988f, 0.324999988f, 0.324999988f)) + vec3<f32>(x_779.x, x_779.y, x_779.z));
  let x_782 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_781.x, x_781.y, x_781.z, x_782.w);
  let x_784 : vec4<f32> = u_xlat3;
  let x_787 : vec4<f32> = x_33.x_CameraViewProjections[0i][1i];
  u_xlat18 = (vec2<f32>(x_784.y, x_784.y) * vec2<f32>(x_787.x, x_787.y));
  let x_791 : vec4<f32> = x_33.x_CameraViewProjections[0i][0i];
  let x_793 : vec4<f32> = u_xlat3;
  let x_796 : vec2<f32> = u_xlat18;
  u_xlat18 = ((vec2<f32>(x_791.x, x_791.y) * vec2<f32>(x_793.x, x_793.x)) + x_796);
  let x_799 : vec4<f32> = x_33.x_CameraViewProjections[0i][2i];
  let x_801 : vec4<f32> = u_xlat3;
  let x_804 : vec2<f32> = u_xlat18;
  u_xlat18 = ((vec2<f32>(x_799.x, x_799.y) * vec2<f32>(x_801.z, x_801.z)) + x_804);
  let x_806 : vec3<f32> = u_xlat4;
  let x_807 : vec4<f32> = u_xlat3;
  u_xlat3.x = dot(x_806, vec3<f32>(x_807.x, x_807.y, x_807.z));
  let x_812 : f32 = u_xlat3.x;
  u_xlat11.x = (1.0f / -(x_812));
  let x_816 : vec2<f32> = u_xlat18;
  let x_817 : vec3<f32> = u_xlat11;
  u_xlat18 = ((x_816 * vec2<f32>(x_817.x, x_817.x)) + vec2<f32>(1.0f, 1.0f));
  let x_821 : vec2<f32> = u_xlat18;
  u_xlat18 = (x_821 * vec2<f32>(0.5f, 0.5f));
  let x_823 : vec2<f32> = u_xlat18;
  u_xlat18 = clamp(x_823, vec2<f32>(0.0f, 0.0f), vec2<f32>(1.0f, 1.0f));
  let x_830 : vec2<f32> = u_xlat18;
  let x_832 : f32 = x_33.x_GlobalMipBias.x;
  let x_833 : vec4<f32> = textureSampleBias(x_CameraDepthTexture, sampler_CameraDepthTexture, x_830, x_832);
  u_xlat11.x = x_833.x;
  let x_838 : f32 = x_33.x_ZBufferParams.z;
  let x_840 : f32 = u_xlat11.x;
  let x_843 : f32 = x_33.x_ZBufferParams.w;
  u_xlat19 = ((x_838 * x_840) + x_843);
  let x_845 : f32 = u_xlat19;
  u_xlat19 = (1.0f / x_845);
  let x_847 : f32 = u_xlat19;
  let x_850 : f32 = u_xlat3.x;
  u_xlat3.x = (-(x_847) + -(x_850));
  let x_855 : f32 = u_xlat3.x;
  let x_858 : f32 = x_33.x_SSAOParams.y;
  u_xlatb3.x = (abs(x_855) < x_858);
  let x_862 : f32 = u_xlat11.x;
  u_xlatb3.y = (0.00001f < x_862);
  let x_866 : bool = u_xlatb3.x;
  u_xlat3.x = select(0.0f, 1.0f, x_866);
  let x_870 : bool = u_xlatb3.y;
  u_xlat3.y = select(0.0f, 1.0f, x_870);
  let x_874 : f32 = u_xlat3.y;
  let x_876 : f32 = u_xlat3.x;
  u_xlat3.x = (x_874 * x_876);
  let x_880 : f32 = u_xlat18.y;
  u_xlat26 = (-(x_880) + 1.0f);
  let x_883 : f32 = u_xlat19;
  let x_885 : f32 = x_33.x_ProjectionParams2.x;
  u_xlat11.x = (x_883 * x_885);
  let x_889 : vec4<f32> = x_33.x_CameraViewXExtent[0i];
  let x_891 : vec2<f32> = u_xlat18;
  let x_895 : vec4<f32> = x_33.x_CameraViewTopLeftCorner[0i];
  u_xlat5 = ((vec3<f32>(x_889.x, x_889.y, x_889.z) * vec3<f32>(x_891.x, x_891.x, x_891.x)) + vec3<f32>(x_895.x, x_895.y, x_895.z));
  let x_899 : vec4<f32> = x_33.x_CameraViewYExtent[0i];
  let x_901 : f32 = u_xlat26;
  let x_904 : vec3<f32> = u_xlat5;
  u_xlat5 = ((vec3<f32>(x_899.x, x_899.y, x_899.z) * vec3<f32>(x_901, x_901, x_901)) + x_904);
  let x_906 : vec3<f32> = u_xlat5;
  let x_907 : vec3<f32> = u_xlat11;
  let x_910 : vec4<f32> = u_xlat1;
  u_xlat11 = ((x_906 * vec3<f32>(x_907.x, x_907.x, x_907.x)) + -(vec3<f32>(x_910.x, x_910.y, x_910.z)));
  let x_914 : vec3<f32> = u_xlat11;
  let x_915 : vec3<f32> = u_xlat8;
  u_xlat18.x = dot(x_914, x_915);
  let x_918 : f32 = u_xlat0;
  let x_922 : f32 = u_xlat18.x;
  u_xlat18.x = ((-(x_918) * 0.004f) + x_922);
  let x_926 : f32 = u_xlat18.x;
  u_xlat18.x = max(x_926, 0.0f);
  let x_929 : vec3<f32> = u_xlat11;
  let x_930 : vec3<f32> = u_xlat11;
  u_xlat26 = dot(x_929, x_930);
  let x_932 : f32 = u_xlat26;
  u_xlat26 = (x_932 + 0.0001f);
  let x_934 : f32 = u_xlat26;
  u_xlat26 = (1.0f / x_934);
  let x_936 : f32 = u_xlat26;
  let x_938 : f32 = u_xlat18.x;
  u_xlat18.x = (x_936 * x_938);
  let x_942 : f32 = u_xlat18.x;
  let x_944 : f32 = u_xlat3.x;
  let x_946 : f32 = u_xlat25;
  u_xlat25 = ((x_942 * x_944) + x_946);
  let x_948 : vec4<f32> = u_xlat2;
  let x_951 : vec4<f32> = x_33.x_SSAOBlueNoiseParams;
  let x_956 : vec2<f32> = ((vec2<f32>(x_948.x, x_948.y) * vec2<f32>(x_951.x, x_951.y)) + vec2<f32>(0.75f, 0.75f));
  let x_957 : vec4<f32> = u_xlat2;
  u_xlat2 = vec4<f32>(x_956.x, x_956.y, x_957.z, x_957.w);
  let x_962 : vec4<f32> = u_xlat2;
  let x_965 : f32 = x_33.x_GlobalMipBias.x;
  let x_966 : vec4<f32> = textureSampleBias(x_BlueNoiseTexture, sampler_PointRepeat, vec2<f32>(x_962.x, x_962.y), x_965);
  u_xlat2.x = x_966.w;
  let x_969 : vec4<f32> = u_xlat2;
  let x_974 : vec2<f32> = (vec2<f32>(x_969.x, x_969.x) + vec2<f32>(0.56640625f, 0.015625f));
  let x_975 : vec4<f32> = u_xlat2;
  u_xlat2 = vec4<f32>(x_974.x, x_974.y, x_975.z, x_975.w);
  let x_978 : f32 = u_xlat2.x;
  u_xlat2.x = fract(x_978);
  let x_982 : f32 = u_xlat2.x;
  u_xlat3.z = ((x_982 * 2.0f) + -1.0f);
  let x_987 : f32 = u_xlat2.y;
  u_xlat2.x = (x_987 * 628.31854248f);
  let x_992 : f32 = u_xlat3.z;
  let x_995 : f32 = u_xlat3.z;
  u_xlat10.x = ((-(x_992) * x_995) + 1.0f);
  let x_1000 : f32 = u_xlat10.x;
  u_xlat10.x = sqrt(x_1000);
  let x_1004 : f32 = u_xlat2.x;
  u_xlat5.x = cos(x_1004);
  let x_1008 : f32 = u_xlat2.x;
  u_xlat2.x = sin(x_1008);
  let x_1012 : f32 = u_xlat10.x;
  let x_1014 : f32 = u_xlat5.x;
  u_xlat3.x = (x_1012 * x_1014);
  let x_1018 : f32 = u_xlat2.x;
  let x_1020 : f32 = u_xlat10.x;
  u_xlat3.y = (x_1018 * x_1020);
  let x_1023 : vec3<f32> = u_xlat8;
  let x_1024 : vec4<f32> = u_xlat3;
  u_xlat2.x = dot(x_1023, vec3<f32>(x_1024.x, x_1024.y, x_1024.z));
  let x_1032 : f32 = u_xlat2.x;
  u_xlatb2.x = (x_1032 >= 0.0f);
  let x_1036 : bool = u_xlatb2.x;
  u_xlat2.x = select(-1.0f, 1.0f, x_1036);
  let x_1039 : vec4<f32> = u_xlat2;
  let x_1041 : vec4<f32> = u_xlat3;
  let x_1043 : vec3<f32> = (vec3<f32>(x_1039.x, x_1039.x, x_1039.x) * vec3<f32>(x_1041.x, x_1041.y, x_1041.z));
  let x_1044 : vec4<f32> = u_xlat2;
  u_xlat2 = vec4<f32>(x_1043.x, x_1043.y, x_1043.z, x_1044.w);
  let x_1046 : vec4<f32> = u_xlat2;
  let x_1049 : vec4<f32> = x_33.x_SSAOParams;
  let x_1051 : vec3<f32> = (vec3<f32>(x_1046.x, x_1046.y, x_1046.z) * vec3<f32>(x_1049.y, x_1049.y, x_1049.y));
  let x_1052 : vec4<f32> = u_xlat2;
  u_xlat2 = vec4<f32>(x_1051.x, x_1051.y, x_1051.z, x_1052.w);
  let x_1054 : vec4<f32> = u_xlat2;
  let x_1059 : vec4<f32> = u_xlat1;
  let x_1061 : vec3<f32> = ((vec3<f32>(x_1054.x, x_1054.y, x_1054.z) * vec3<f32>(0.606249988f, 0.606249988f, 0.606249988f)) + vec3<f32>(x_1059.x, x_1059.y, x_1059.z));
  let x_1062 : vec4<f32> = u_xlat2;
  u_xlat2 = vec4<f32>(x_1061.x, x_1061.y, x_1061.z, x_1062.w);
  let x_1064 : vec4<f32> = u_xlat2;
  let x_1067 : vec4<f32> = x_33.x_CameraViewProjections[0i][1i];
  let x_1069 : vec2<f32> = (vec2<f32>(x_1064.y, x_1064.y) * vec2<f32>(x_1067.x, x_1067.y));
  let x_1070 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_1069.x, x_1069.y, x_1070.z, x_1070.w);
  let x_1073 : vec4<f32> = x_33.x_CameraViewProjections[0i][0i];
  let x_1075 : vec4<f32> = u_xlat2;
  let x_1078 : vec4<f32> = u_xlat3;
  let x_1080 : vec2<f32> = ((vec2<f32>(x_1073.x, x_1073.y) * vec2<f32>(x_1075.x, x_1075.x)) + vec2<f32>(x_1078.x, x_1078.y));
  let x_1081 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_1080.x, x_1080.y, x_1081.z, x_1081.w);
  let x_1084 : vec4<f32> = x_33.x_CameraViewProjections[0i][2i];
  let x_1086 : vec4<f32> = u_xlat2;
  let x_1089 : vec4<f32> = u_xlat3;
  let x_1091 : vec2<f32> = ((vec2<f32>(x_1084.x, x_1084.y) * vec2<f32>(x_1086.z, x_1086.z)) + vec2<f32>(x_1089.x, x_1089.y));
  let x_1092 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_1091.x, x_1091.y, x_1092.z, x_1092.w);
  let x_1094 : vec3<f32> = u_xlat4;
  let x_1095 : vec4<f32> = u_xlat2;
  u_xlat2.x = dot(x_1094, vec3<f32>(x_1095.x, x_1095.y, x_1095.z));
  let x_1100 : f32 = u_xlat2.x;
  u_xlat10.x = (1.0f / -(x_1100));
  let x_1104 : vec4<f32> = u_xlat3;
  let x_1106 : vec2<f32> = u_xlat10;
  u_xlat10 = ((vec2<f32>(x_1104.x, x_1104.y) * vec2<f32>(x_1106.x, x_1106.x)) + vec2<f32>(1.0f, 1.0f));
  let x_1110 : vec2<f32> = u_xlat10;
  u_xlat10 = (x_1110 * vec2<f32>(0.5f, 0.5f));
  let x_1112 : vec2<f32> = u_xlat10;
  u_xlat10 = clamp(x_1112, vec2<f32>(0.0f, 0.0f), vec2<f32>(1.0f, 1.0f));
  let x_1119 : vec2<f32> = u_xlat10;
  let x_1121 : f32 = x_33.x_GlobalMipBias.x;
  let x_1122 : vec4<f32> = textureSampleBias(x_CameraDepthTexture, sampler_CameraDepthTexture, x_1119, x_1121);
  u_xlat26 = x_1122.x;
  let x_1125 : f32 = x_33.x_ZBufferParams.z;
  let x_1126 : f32 = u_xlat26;
  let x_1129 : f32 = x_33.x_ZBufferParams.w;
  u_xlat3.x = ((x_1125 * x_1126) + x_1129);
  let x_1133 : f32 = u_xlat3.x;
  u_xlat3.x = (1.0f / x_1133);
  let x_1137 : f32 = u_xlat2.x;
  let x_1140 : f32 = u_xlat3.x;
  u_xlat2.x = (-(x_1137) + -(x_1140));
  let x_1145 : f32 = u_xlat2.x;
  let x_1148 : f32 = x_33.x_SSAOParams.y;
  u_xlatb2.x = (abs(x_1145) < x_1148);
  let x_1151 : f32 = u_xlat26;
  u_xlatb2.w = (0.00001f < x_1151);
  let x_1155 : bool = u_xlatb2.x;
  u_xlat2.x = select(0.0f, 1.0f, x_1155);
  let x_1159 : bool = u_xlatb2.w;
  u_xlat2.w = select(0.0f, 1.0f, x_1159);
  let x_1163 : f32 = u_xlat2.w;
  let x_1165 : f32 = u_xlat2.x;
  u_xlat2.x = (x_1163 * x_1165);
  let x_1169 : f32 = u_xlat10.y;
  u_xlat18.x = (-(x_1169) + 1.0f);
  let x_1174 : f32 = u_xlat3.x;
  let x_1176 : f32 = x_33.x_ProjectionParams2.x;
  u_xlat26 = (x_1174 * x_1176);
  let x_1179 : vec4<f32> = x_33.x_CameraViewXExtent[0i];
  let x_1181 : vec2<f32> = u_xlat10;
  let x_1185 : vec4<f32> = x_33.x_CameraViewTopLeftCorner[0i];
  let x_1187 : vec3<f32> = ((vec3<f32>(x_1179.x, x_1179.y, x_1179.z) * vec3<f32>(x_1181.x, x_1181.x, x_1181.x)) + vec3<f32>(x_1185.x, x_1185.y, x_1185.z));
  let x_1188 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_1187.x, x_1187.y, x_1187.z, x_1188.w);
  let x_1191 : vec4<f32> = x_33.x_CameraViewYExtent[0i];
  let x_1193 : vec2<f32> = u_xlat18;
  let x_1196 : vec4<f32> = u_xlat3;
  let x_1198 : vec3<f32> = ((vec3<f32>(x_1191.x, x_1191.y, x_1191.z) * vec3<f32>(x_1193.x, x_1193.x, x_1193.x)) + vec3<f32>(x_1196.x, x_1196.y, x_1196.z));
  let x_1199 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_1198.x, x_1198.y, x_1198.z, x_1199.w);
  let x_1201 : vec4<f32> = u_xlat3;
  let x_1203 : f32 = u_xlat26;
  let x_1206 : vec4<f32> = u_xlat1;
  let x_1209 : vec3<f32> = ((vec3<f32>(x_1201.x, x_1201.y, x_1201.z) * vec3<f32>(x_1203, x_1203, x_1203)) + -(vec3<f32>(x_1206.x, x_1206.y, x_1206.z)));
  let x_1210 : vec4<f32> = u_xlat1;
  u_xlat1 = vec4<f32>(x_1209.x, x_1209.y, x_1209.z, x_1210.w);
  let x_1212 : vec4<f32> = u_xlat1;
  let x_1214 : vec3<f32> = u_xlat8;
  u_xlat10.x = dot(vec3<f32>(x_1212.x, x_1212.y, x_1212.z), x_1214);
  let x_1217 : f32 = u_xlat0;
  let x_1221 : f32 = u_xlat10.x;
  u_xlat10.x = ((-(x_1217) * 0.004f) + x_1221);
  let x_1225 : f32 = u_xlat10.x;
  u_xlat10.x = max(x_1225, 0.0f);
  let x_1228 : vec4<f32> = u_xlat1;
  let x_1230 : vec4<f32> = u_xlat1;
  u_xlat1.x = dot(vec3<f32>(x_1228.x, x_1228.y, x_1228.z), vec3<f32>(x_1230.x, x_1230.y, x_1230.z));
  let x_1235 : f32 = u_xlat1.x;
  u_xlat1.x = (x_1235 + 0.0001f);
  let x_1239 : f32 = u_xlat1.x;
  u_xlat1.x = (1.0f / x_1239);
  let x_1243 : f32 = u_xlat1.x;
  let x_1245 : f32 = u_xlat10.x;
  u_xlat1.x = (x_1243 * x_1245);
  let x_1249 : f32 = u_xlat1.x;
  let x_1251 : f32 = u_xlat2.x;
  let x_1253 : f32 = u_xlat25;
  u_xlat1.x = ((x_1249 * x_1251) + x_1253);
  let x_1257 : f32 = u_xlat1.x;
  let x_1259 : f32 = x_33.x_SSAOParams.y;
  u_xlat1.x = (x_1257 * x_1259);
  let x_1263 : f32 = x_33.x_SSAOParams.w;
  u_xlat9 = (1.0f / x_1263);
  let x_1265 : f32 = u_xlat0;
  let x_1267 : f32 = u_xlat9;
  u_xlat0 = ((-(x_1265) * x_1267) + 1.0f);
  let x_1270 : f32 = u_xlat0;
  let x_1271 : f32 = u_xlat0;
  u_xlat0 = (x_1270 * x_1271);
  let x_1274 : f32 = u_xlat1.x;
  let x_1276 : f32 = x_33.x_SSAOParams.x;
  u_xlat1.x = (x_1274 * x_1276);
  let x_1279 : f32 = u_xlat0;
  let x_1281 : f32 = u_xlat1.x;
  u_xlat0 = (x_1279 * x_1281);
  let x_1283 : f32 = u_xlat0;
  u_xlat0 = (x_1283 * 0.25f);
  let x_1285 : f32 = u_xlat0;
  u_xlat0 = clamp(x_1285, 0.0f, 1.0f);
  let x_1287 : f32 = u_xlat0;
  u_xlat0 = log2(x_1287);
  let x_1289 : f32 = u_xlat0;
  u_xlat0 = (x_1289 * 0.600000024f);
  let x_1292 : f32 = u_xlat0;
  SV_Target0.x = exp2(x_1292);
  let x_1296 : vec3<f32> = u_xlat8;
  let x_1299 : vec3<f32> = ((x_1296 * vec3<f32>(0.5f, 0.5f, 0.5f)) + vec3<f32>(0.5f, 0.5f, 0.5f));
  let x_1300 : vec4<f32> = SV_Target0;
  SV_Target0 = vec4<f32>(x_1300.x, x_1299.x, x_1299.y, x_1299.z);
  return;
}

struct main_out {
  @location(0)
  SV_Target0_1 : vec4<f32>,
}

@fragment
fn main(@location(0) vs_TEXCOORD0_param : vec2<f32>, @builtin(position) gl_FragCoord_param : vec4<f32>) -> main_out {
  vs_TEXCOORD0 = vs_TEXCOORD0_param;
  gl_FragCoord = gl_FragCoord_param;
  main_1();
  return main_out(SV_Target0);
}

