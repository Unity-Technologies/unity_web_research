struct PGlobals {
  x_ScaledScreenParams : vec4<f32>,
  x_GlobalMipBias : vec2<f32>,
  x_AlphaToMaskAvailable : f32,
  @size(4)
  padding : u32,
  x_MainLightPosition : vec4<f32>,
  x_MainLightColor : vec4<f32>,
  x_AmbientOcclusionParam : vec4<f32>,
  x_AdditionalLightsCount : vec4<f32>,
  x_RenderingLayerMaxInt : u32,
  x_RenderingLayerRcpMaxInt : f32,
  @size(8)
  padding_1 : u32,
  x_WorldSpaceCameraPos : vec3<f32>,
  @size(4)
  padding_2 : u32,
  x_ProjectionParams : vec4<f32>,
  x_ScreenParams : vec4<f32>,
  unity_OrthoParams : vec4<f32>,
  x_ScaleBiasRt : vec4<f32>,
  unity_FogParams : vec4<f32>,
  unity_FogColor : vec4<f32>,
  unity_MatrixV : mat4x4<f32>,
}

type Arr = array<vec4<f32>, 2u>;

struct UnityPerDraw {
  unity_ObjectToWorld : mat4x4<f32>,
  unity_WorldToObject : mat4x4<f32>,
  unity_LODFade : vec4<f32>,
  unity_WorldTransformParams : vec4<f32>,
  unity_RenderingLayer : vec4<f32>,
  unity_LightData : vec4<f32>,
  unity_LightIndices : Arr,
  unity_ProbesOcclusion : vec4<f32>,
  unity_SpecCube0_HDR : vec4<f32>,
  unity_SpecCube1_HDR : vec4<f32>,
  unity_SpecCube0_BoxMax : vec4<f32>,
  unity_SpecCube0_BoxMin : vec4<f32>,
  unity_SpecCube0_ProbePosition : vec4<f32>,
  unity_SpecCube1_BoxMax : vec4<f32>,
  unity_SpecCube1_BoxMin : vec4<f32>,
  unity_SpecCube1_ProbePosition : vec4<f32>,
  unity_LightmapST : vec4<f32>,
  unity_DynamicLightmapST : vec4<f32>,
  unity_SHAr : vec4<f32>,
  unity_SHAg : vec4<f32>,
  unity_SHAb : vec4<f32>,
  unity_SHBr : vec4<f32>,
  unity_SHBg : vec4<f32>,
  unity_SHBb : vec4<f32>,
  unity_SHC : vec4<f32>,
  unity_RendererBounds_Min : vec4<f32>,
  unity_RendererBounds_Max : vec4<f32>,
  unity_MatrixPreviousM : mat4x4<f32>,
  unity_MatrixPreviousMI : mat4x4<f32>,
  unity_MotionVectorsParams : vec4<f32>,
  unity_SpriteColor : vec4<f32>,
  unity_SpriteProps : vec4<f32>,
}

struct UnityPerMaterial {
  Texture2D_B222E8F_TexelSize : vec4<f32>,
  Color_C30C7CA3 : vec4<f32>,
  Texture2D_D9BFD5F1_TexelSize : vec4<f32>,
}

type Arr_1 = array<mat4x4<f32>, 5u>;

struct MainLightShadows {
  x_MainLightWorldToShadow : Arr_1,
  x_CascadeShadowSplitSpheres0 : vec4<f32>,
  x_CascadeShadowSplitSpheres1 : vec4<f32>,
  x_CascadeShadowSplitSpheres2 : vec4<f32>,
  x_CascadeShadowSplitSpheres3 : vec4<f32>,
  x_CascadeShadowSplitSphereRadii : vec4<f32>,
  x_MainLightShadowOffset0 : vec4<f32>,
  x_MainLightShadowOffset1 : vec4<f32>,
  x_MainLightShadowParams : vec4<f32>,
  x_MainLightShadowmapSize : vec4<f32>,
}

type Arr_2 = array<vec4<f32>, 256u>;

type Arr_3 = array<vec4<f32>, 256u>;

type Arr_4 = array<vec4<f32>, 256u>;

type Arr_5 = array<vec4<f32>, 256u>;

type Arr_6 = array<vec4<f32>, 256u>;

struct strided_arr {
  @size(16)
  el : f32,
}

type Arr_7 = array<strided_arr, 256u>;

struct AdditionalLights {
  x_AdditionalLightsPosition : Arr_6,
  x_AdditionalLightsColor : Arr_6,
  x_AdditionalLightsAttenuation : Arr_6,
  x_AdditionalLightsSpotDir : Arr_6,
  x_AdditionalLightsOcclusionProbes : Arr_6,
  x_AdditionalLightsLayerMasks : Arr_7,
}

var<private> gl_FragCoord : vec4<f32>;

var<private> vs_INTERP1 : vec3<f32>;

@group(1) @binding(0) var<uniform> x_90 : PGlobals;

var<private> vs_INTERP0 : vec3<f32>;

@group(1) @binding(2) var<uniform> x_145 : UnityPerDraw;

@group(0) @binding(3) var Texture2D_B222E8F : texture_2d<f32>;

@group(0) @binding(8) var samplerTexture2D_B222E8F : sampler;

var<private> vs_INTERP3 : vec4<f32>;

@group(1) @binding(4) var<uniform> x_199 : UnityPerMaterial;

@group(0) @binding(4) var Texture2D_D9BFD5F1 : texture_2d<f32>;

@group(0) @binding(9) var samplerTexture2D_D9BFD5F1 : sampler;

var<private> vs_INTERP4 : vec4<f32>;

@group(1) @binding(3) var<uniform> x_255 : MainLightShadows;

@group(0) @binding(2) var x_MainLightShadowmapTexture : texture_depth_2d;

@group(0) @binding(7) var sampler_MainLightShadowmapTexture : sampler_comparison;

var<private> vs_INTERP2 : vec4<f32>;

@group(0) @binding(1) var x_ScreenSpaceOcclusionTexture : texture_2d<f32>;

@group(0) @binding(6) var sampler_ScreenSpaceOcclusionTexture : sampler;

@group(0) @binding(0) var unity_SpecCube0 : texture_cube<f32>;

@group(0) @binding(5) var samplerunity_SpecCube0 : sampler;

@group(1) @binding(1) var<uniform> x_3817 : AdditionalLights;

var<private> SV_Target0 : vec4<f32>;

var<private> SV_Target1 : vec4<f32>;

fn int_bitfieldInsert_i1_i1_i1_i1_(base : ptr<function, i32>, insert : ptr<function, i32>, offset_1 : ptr<function, i32>, bits : ptr<function, i32>) -> i32 {
  var mask : u32;
  let x_19 : i32 = *(bits);
  let x_23 : i32 = *(offset_1);
  mask = (~((4294967295u << bitcast<u32>(x_19))) << bitcast<u32>(x_23));
  let x_26 : i32 = *(base);
  let x_28 : u32 = mask;
  let x_31 : i32 = *(insert);
  let x_33 : i32 = *(offset_1);
  let x_36 : u32 = mask;
  return bitcast<i32>(((bitcast<u32>(x_26) & ~(x_28)) | ((bitcast<u32>(x_31) << bitcast<u32>(x_33)) & x_36)));
}

fn main_1() {
  var hlslcc_FragCoord : vec4<f32>;
  var u_xlat0 : vec3<f32>;
  var u_xlatb66 : bool;
  var u_xlat1 : vec3<f32>;
  var u_xlat67 : f32;
  var u_xlat2 : vec3<f32>;
  var x_133 : vec3<f32>;
  var u_xlat66 : f32;
  var u_xlat3 : vec4<f32>;
  var u_xlat4 : vec3<f32>;
  var u_xlat5 : vec4<f32>;
  var u_xlat6 : vec4<f32>;
  var u_xlat27 : vec3<f32>;
  var u_xlat7 : vec4<f32>;
  var u_xlat8 : vec4<f32>;
  var u_xlat9 : vec4<f32>;
  var u_xlatb6 : vec4<bool>;
  var u_xlatu66 : u32;
  var u_xlati66 : i32;
  var u_xlatb67 : bool;
  var txVec0 : vec3<f32>;
  var txVec1 : vec3<f32>;
  var txVec2 : vec3<f32>;
  var txVec3 : vec3<f32>;
  var u_xlatb68 : bool;
  var u_xlat51 : vec2<f32>;
  var u_xlat53 : vec2<f32>;
  var u_xlat10 : vec4<f32>;
  var u_xlat11 : vec4<f32>;
  var u_xlat12 : vec4<f32>;
  var u_xlat13 : vec4<f32>;
  var u_xlat14 : vec4<f32>;
  var u_xlat15 : vec4<f32>;
  var u_xlat68 : f32;
  var txVec4 : vec3<f32>;
  var u_xlat70 : f32;
  var txVec5 : vec3<f32>;
  var u_xlat72 : f32;
  var txVec6 : vec3<f32>;
  var txVec7 : vec3<f32>;
  var txVec8 : vec3<f32>;
  var txVec9 : vec3<f32>;
  var txVec10 : vec3<f32>;
  var txVec11 : vec3<f32>;
  var txVec12 : vec3<f32>;
  var u_xlat30 : vec3<f32>;
  var u_xlat16 : vec4<f32>;
  var u_xlat17 : vec4<f32>;
  var u_xlat31 : vec3<f32>;
  var u_xlat59 : vec2<f32>;
  var u_xlat54 : vec2<f32>;
  var u_xlat18 : vec4<f32>;
  var u_xlat19 : vec4<f32>;
  var u_xlat20 : vec4<f32>;
  var txVec13 : vec3<f32>;
  var txVec14 : vec3<f32>;
  var txVec15 : vec3<f32>;
  var txVec16 : vec3<f32>;
  var txVec17 : vec3<f32>;
  var txVec18 : vec3<f32>;
  var txVec19 : vec3<f32>;
  var txVec20 : vec3<f32>;
  var txVec21 : vec3<f32>;
  var txVec22 : vec3<f32>;
  var txVec23 : vec3<f32>;
  var txVec24 : vec3<f32>;
  var txVec25 : vec3<f32>;
  var txVec26 : vec3<f32>;
  var txVec27 : vec3<f32>;
  var txVec28 : vec3<f32>;
  var txVec29 : vec3<f32>;
  var u_xlatb70 : bool;
  var u_xlatb72 : bool;
  var x_1714 : f32;
  var u_xlatb3 : bool;
  var u_xlatu2 : vec3<u32>;
  var u_xlatu46 : u32;
  var u_xlatu25 : u32;
  var u_xlati46 : i32;
  var u_xlati24 : i32;
  var u_xlatu24 : u32;
  var u_xlati2 : i32;
  var param : i32;
  var param_1 : i32;
  var param_2 : i32;
  var param_3 : i32;
  var u_xlat24 : vec2<f32>;
  var x_1848 : f32;
  var u_xlatb24 : vec2<bool>;
  var x_1879 : f32;
  var u_xlat46 : f32;
  var u_xlatb2 : bool;
  var x_1926 : f32;
  var u_xlat69 : f32;
  var u_xlat29 : f32;
  var txVec30 : vec3<f32>;
  var txVec31 : vec3<f32>;
  var txVec32 : vec3<f32>;
  var txVec33 : vec3<f32>;
  var u_xlatb73 : bool;
  var u_xlat52 : vec2<f32>;
  var u_xlat73 : f32;
  var txVec34 : vec3<f32>;
  var txVec35 : vec3<f32>;
  var txVec36 : vec3<f32>;
  var txVec37 : vec3<f32>;
  var txVec38 : vec3<f32>;
  var txVec39 : vec3<f32>;
  var txVec40 : vec3<f32>;
  var txVec41 : vec3<f32>;
  var txVec42 : vec3<f32>;
  var u_xlat32 : vec2<f32>;
  var u_xlat60 : vec2<f32>;
  var u_xlat55 : vec2<f32>;
  var u_xlat21 : vec4<f32>;
  var txVec43 : vec3<f32>;
  var txVec44 : vec3<f32>;
  var txVec45 : vec3<f32>;
  var txVec46 : vec3<f32>;
  var txVec47 : vec3<f32>;
  var txVec48 : vec3<f32>;
  var txVec49 : vec3<f32>;
  var txVec50 : vec3<f32>;
  var txVec51 : vec3<f32>;
  var txVec52 : vec3<f32>;
  var txVec53 : vec3<f32>;
  var txVec54 : vec3<f32>;
  var txVec55 : vec3<f32>;
  var txVec56 : vec3<f32>;
  var txVec57 : vec3<f32>;
  var txVec58 : vec3<f32>;
  var txVec59 : vec3<f32>;
  var u_xlatu_loop_1 : u32;
  var u_xlatu68 : u32;
  var u_xlati69 : i32;
  var indexable : array<vec4<u32>, 4u>;
  var u_xlati68 : i32;
  var u_xlat71 : f32;
  var u_xlatu0 : u32;
  var u_xlat_precise_vec4 : vec4<f32>;
  var u_xlat_precise_ivec4 : vec4<i32>;
  var u_xlat_precise_bvec4 : vec4<bool>;
  var u_xlat_precise_uvec4 : vec4<u32>;
  let x_49 : vec4<f32> = gl_FragCoord;
  let x_50 : vec3<f32> = vec3<f32>(x_49.x, x_49.y, x_49.z);
  let x_55 : f32 = gl_FragCoord.w;
  hlslcc_FragCoord = vec4<f32>(x_50.x, x_50.y, x_50.z, (1.0f / x_55));
  let x_65 : vec3<f32> = vs_INTERP1;
  let x_66 : vec3<f32> = vs_INTERP1;
  u_xlat0.x = dot(x_65, x_66);
  let x_72 : f32 = u_xlat0.x;
  u_xlat0.x = sqrt(x_72);
  let x_76 : f32 = u_xlat0.x;
  u_xlat0.x = (1.0f / x_76);
  let x_79 : vec3<f32> = u_xlat0;
  let x_81 : vec3<f32> = vs_INTERP1;
  u_xlat0 = (vec3<f32>(x_79.x, x_79.x, x_79.x) * x_81);
  let x_94 : f32 = x_90.unity_OrthoParams.w;
  u_xlatb66 = (x_94 == 0.0f);
  let x_99 : vec3<f32> = vs_INTERP0;
  let x_104 : vec3<f32> = x_90.x_WorldSpaceCameraPos;
  u_xlat1 = (-(x_99) + x_104);
  let x_107 : vec3<f32> = u_xlat1;
  let x_108 : vec3<f32> = u_xlat1;
  u_xlat67 = dot(x_107, x_108);
  let x_110 : f32 = u_xlat67;
  u_xlat67 = inverseSqrt(x_110);
  let x_112 : f32 = u_xlat67;
  let x_114 : vec3<f32> = u_xlat1;
  u_xlat1 = (vec3<f32>(x_112, x_112, x_112) * x_114);
  let x_121 : f32 = x_90.unity_MatrixV[0i].z;
  u_xlat2.x = x_121;
  let x_125 : f32 = x_90.unity_MatrixV[1i].z;
  u_xlat2.y = x_125;
  let x_130 : f32 = x_90.unity_MatrixV[2i].z;
  u_xlat2.z = x_130;
  let x_132 : bool = u_xlatb66;
  if (x_132) {
    let x_136 : vec3<f32> = u_xlat1;
    x_133 = x_136;
  } else {
    let x_138 : vec3<f32> = u_xlat2;
    x_133 = x_138;
  }
  let x_139 : vec3<f32> = x_133;
  u_xlat1 = x_139;
  let x_140 : vec3<f32> = u_xlat1;
  let x_148 : vec4<f32> = x_145.unity_WorldToObject[1i];
  u_xlat2 = (vec3<f32>(x_140.y, x_140.y, x_140.y) * vec3<f32>(x_148.x, x_148.y, x_148.z));
  let x_152 : vec4<f32> = x_145.unity_WorldToObject[0i];
  let x_154 : vec3<f32> = u_xlat1;
  let x_157 : vec3<f32> = u_xlat2;
  u_xlat2 = ((vec3<f32>(x_152.x, x_152.y, x_152.z) * vec3<f32>(x_154.x, x_154.x, x_154.x)) + x_157);
  let x_160 : vec4<f32> = x_145.unity_WorldToObject[2i];
  let x_162 : vec3<f32> = u_xlat1;
  let x_165 : vec3<f32> = u_xlat2;
  u_xlat2 = ((vec3<f32>(x_160.x, x_160.y, x_160.z) * vec3<f32>(x_162.z, x_162.z, x_162.z)) + x_165);
  let x_168 : vec3<f32> = u_xlat2;
  let x_169 : vec3<f32> = u_xlat2;
  u_xlat66 = dot(x_168, x_169);
  let x_171 : f32 = u_xlat66;
  u_xlat66 = inverseSqrt(x_171);
  let x_173 : f32 = u_xlat66;
  let x_175 : vec3<f32> = u_xlat2;
  u_xlat2 = (vec3<f32>(x_173, x_173, x_173) * x_175);
  let x_189 : vec4<f32> = vs_INTERP3;
  let x_192 : f32 = x_90.x_GlobalMipBias.x;
  let x_193 : vec4<f32> = textureSampleBias(Texture2D_B222E8F, samplerTexture2D_B222E8F, vec2<f32>(x_189.x, x_189.y), x_192);
  u_xlat3 = x_193;
  let x_195 : vec4<f32> = u_xlat3;
  let x_201 : vec4<f32> = x_199.Color_C30C7CA3;
  u_xlat4 = (vec3<f32>(x_195.x, x_195.y, x_195.z) * vec3<f32>(x_201.x, x_201.y, x_201.z));
  let x_210 : vec4<f32> = vs_INTERP3;
  let x_213 : f32 = x_90.x_GlobalMipBias.x;
  let x_214 : vec4<f32> = textureSampleBias(Texture2D_D9BFD5F1, samplerTexture2D_D9BFD5F1, vec2<f32>(x_210.x, x_210.y), x_213);
  u_xlat5 = vec4<f32>(x_214.w, x_214.x, x_214.y, x_214.z);
  let x_217 : vec4<f32> = u_xlat5;
  u_xlat6 = ((vec4<f32>(x_217.y, x_217.z, x_217.w, x_217.x) * vec4<f32>(2.0f, 2.0f, 2.0f, 2.0f)) + vec4<f32>(-1.0f, -1.0f, -1.0f, -1.0f));
  let x_225 : vec4<f32> = u_xlat6;
  let x_226 : vec4<f32> = u_xlat6;
  u_xlat66 = dot(x_225, x_226);
  let x_228 : f32 = u_xlat66;
  u_xlat66 = inverseSqrt(x_228);
  let x_231 : f32 = u_xlat66;
  let x_233 : vec4<f32> = u_xlat6;
  u_xlat27 = (vec3<f32>(x_231, x_231, x_231) * vec3<f32>(x_233.x, x_233.y, x_233.z));
  let x_238 : f32 = vs_INTERP4.y;
  u_xlat66 = (x_238 * 200.0f);
  let x_241 : f32 = u_xlat66;
  u_xlat66 = min(x_241, 1.0f);
  let x_243 : f32 = u_xlat66;
  let x_245 : vec4<f32> = u_xlat3;
  let x_247 : vec3<f32> = (vec3<f32>(x_243, x_243, x_243) * vec3<f32>(x_245.x, x_245.y, x_245.z));
  let x_248 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_247.x, x_247.y, x_247.z, x_248.w);
  let x_250 : vec3<f32> = vs_INTERP0;
  let x_257 : vec4<f32> = x_255.x_CascadeShadowSplitSpheres0;
  let x_260 : vec3<f32> = (x_250 + -(vec3<f32>(x_257.x, x_257.y, x_257.z)));
  let x_261 : vec4<f32> = u_xlat6;
  u_xlat6 = vec4<f32>(x_260.x, x_260.y, x_260.z, x_261.w);
  let x_264 : vec3<f32> = vs_INTERP0;
  let x_266 : vec4<f32> = x_255.x_CascadeShadowSplitSpheres1;
  let x_269 : vec3<f32> = (x_264 + -(vec3<f32>(x_266.x, x_266.y, x_266.z)));
  let x_270 : vec4<f32> = u_xlat7;
  u_xlat7 = vec4<f32>(x_269.x, x_269.y, x_269.z, x_270.w);
  let x_273 : vec3<f32> = vs_INTERP0;
  let x_276 : vec4<f32> = x_255.x_CascadeShadowSplitSpheres2;
  let x_279 : vec3<f32> = (x_273 + -(vec3<f32>(x_276.x, x_276.y, x_276.z)));
  let x_280 : vec4<f32> = u_xlat8;
  u_xlat8 = vec4<f32>(x_279.x, x_279.y, x_279.z, x_280.w);
  let x_283 : vec3<f32> = vs_INTERP0;
  let x_286 : vec4<f32> = x_255.x_CascadeShadowSplitSpheres3;
  let x_289 : vec3<f32> = (x_283 + -(vec3<f32>(x_286.x, x_286.y, x_286.z)));
  let x_290 : vec4<f32> = u_xlat9;
  u_xlat9 = vec4<f32>(x_289.x, x_289.y, x_289.z, x_290.w);
  let x_292 : vec4<f32> = u_xlat6;
  let x_294 : vec4<f32> = u_xlat6;
  u_xlat6.x = dot(vec3<f32>(x_292.x, x_292.y, x_292.z), vec3<f32>(x_294.x, x_294.y, x_294.z));
  let x_298 : vec4<f32> = u_xlat7;
  let x_300 : vec4<f32> = u_xlat7;
  u_xlat6.y = dot(vec3<f32>(x_298.x, x_298.y, x_298.z), vec3<f32>(x_300.x, x_300.y, x_300.z));
  let x_304 : vec4<f32> = u_xlat8;
  let x_306 : vec4<f32> = u_xlat8;
  u_xlat6.z = dot(vec3<f32>(x_304.x, x_304.y, x_304.z), vec3<f32>(x_306.x, x_306.y, x_306.z));
  let x_310 : vec4<f32> = u_xlat9;
  let x_312 : vec4<f32> = u_xlat9;
  u_xlat6.w = dot(vec3<f32>(x_310.x, x_310.y, x_310.z), vec3<f32>(x_312.x, x_312.y, x_312.z));
  let x_319 : vec4<f32> = u_xlat6;
  let x_322 : vec4<f32> = x_255.x_CascadeShadowSplitSphereRadii;
  u_xlatb6 = (x_319 < x_322);
  let x_325 : bool = u_xlatb6.x;
  u_xlat7.x = select(0.0f, 1.0f, x_325);
  let x_329 : bool = u_xlatb6.y;
  u_xlat7.y = select(0.0f, 1.0f, x_329);
  let x_333 : bool = u_xlatb6.z;
  u_xlat7.z = select(0.0f, 1.0f, x_333);
  let x_337 : bool = u_xlatb6.w;
  u_xlat7.w = select(0.0f, 1.0f, x_337);
  let x_341 : bool = u_xlatb6.x;
  u_xlat6.x = select(-0.0f, -1.0f, x_341);
  let x_346 : bool = u_xlatb6.y;
  u_xlat6.y = select(-0.0f, -1.0f, x_346);
  let x_350 : bool = u_xlatb6.z;
  u_xlat6.z = select(-0.0f, -1.0f, x_350);
  let x_353 : vec4<f32> = u_xlat6;
  let x_355 : vec4<f32> = u_xlat7;
  let x_357 : vec3<f32> = (vec3<f32>(x_353.x, x_353.y, x_353.z) + vec3<f32>(x_355.y, x_355.z, x_355.w));
  let x_358 : vec4<f32> = u_xlat6;
  u_xlat6 = vec4<f32>(x_357.x, x_357.y, x_357.z, x_358.w);
  let x_360 : vec4<f32> = u_xlat6;
  let x_363 : vec3<f32> = max(vec3<f32>(x_360.x, x_360.y, x_360.z), vec3<f32>(0.0f, 0.0f, 0.0f));
  let x_364 : vec4<f32> = u_xlat7;
  u_xlat7 = vec4<f32>(x_364.x, x_363.x, x_363.y, x_363.z);
  let x_366 : vec4<f32> = u_xlat7;
  u_xlat66 = dot(x_366, vec4<f32>(4.0f, 3.0f, 2.0f, 1.0f));
  let x_371 : f32 = u_xlat66;
  u_xlat66 = (-(x_371) + 4.0f);
  let x_375 : f32 = u_xlat66;
  u_xlatu66 = u32(x_375);
  let x_378 : u32 = u_xlatu66;
  u_xlati66 = (bitcast<i32>(x_378) << bitcast<u32>(2i));
  let x_381 : vec3<f32> = vs_INTERP0;
  let x_383 : i32 = u_xlati66;
  let x_386 : i32 = u_xlati66;
  let x_390 : vec4<f32> = x_255.x_MainLightWorldToShadow[((x_383 + 1i) / 4i)][((x_386 + 1i) % 4i)];
  let x_392 : vec3<f32> = (vec3<f32>(x_381.y, x_381.y, x_381.y) * vec3<f32>(x_390.x, x_390.y, x_390.z));
  let x_393 : vec4<f32> = u_xlat6;
  u_xlat6 = vec4<f32>(x_392.x, x_392.y, x_392.z, x_393.w);
  let x_395 : i32 = u_xlati66;
  let x_397 : i32 = u_xlati66;
  let x_400 : vec4<f32> = x_255.x_MainLightWorldToShadow[(x_395 / 4i)][(x_397 % 4i)];
  let x_402 : vec3<f32> = vs_INTERP0;
  let x_405 : vec4<f32> = u_xlat6;
  let x_407 : vec3<f32> = ((vec3<f32>(x_400.x, x_400.y, x_400.z) * vec3<f32>(x_402.x, x_402.x, x_402.x)) + vec3<f32>(x_405.x, x_405.y, x_405.z));
  let x_408 : vec4<f32> = u_xlat6;
  u_xlat6 = vec4<f32>(x_407.x, x_407.y, x_407.z, x_408.w);
  let x_410 : i32 = u_xlati66;
  let x_413 : i32 = u_xlati66;
  let x_417 : vec4<f32> = x_255.x_MainLightWorldToShadow[((x_410 + 2i) / 4i)][((x_413 + 2i) % 4i)];
  let x_419 : vec3<f32> = vs_INTERP0;
  let x_422 : vec4<f32> = u_xlat6;
  let x_424 : vec3<f32> = ((vec3<f32>(x_417.x, x_417.y, x_417.z) * vec3<f32>(x_419.z, x_419.z, x_419.z)) + vec3<f32>(x_422.x, x_422.y, x_422.z));
  let x_425 : vec4<f32> = u_xlat6;
  u_xlat6 = vec4<f32>(x_424.x, x_424.y, x_424.z, x_425.w);
  let x_427 : vec4<f32> = u_xlat6;
  let x_429 : i32 = u_xlati66;
  let x_432 : i32 = u_xlati66;
  let x_436 : vec4<f32> = x_255.x_MainLightWorldToShadow[((x_429 + 3i) / 4i)][((x_432 + 3i) % 4i)];
  let x_438 : vec3<f32> = (vec3<f32>(x_427.x, x_427.y, x_427.z) + vec3<f32>(x_436.x, x_436.y, x_436.z));
  let x_439 : vec4<f32> = u_xlat6;
  u_xlat6 = vec4<f32>(x_438.x, x_438.y, x_438.z, x_439.w);
  let x_443 : f32 = x_255.x_MainLightShadowParams.y;
  u_xlatb66 = (0.0f < x_443);
  let x_445 : bool = u_xlatb66;
  if (x_445) {
    let x_450 : f32 = x_255.x_MainLightShadowParams.y;
    u_xlatb67 = (x_450 == 1.0f);
    let x_452 : bool = u_xlatb67;
    if (x_452) {
      let x_455 : vec4<f32> = u_xlat6;
      let x_459 : vec4<f32> = x_255.x_MainLightShadowOffset0;
      u_xlat7 = (vec4<f32>(x_455.x, x_455.y, x_455.x, x_455.y) + x_459);
      let x_462 : vec4<f32> = u_xlat7;
      let x_463 : vec2<f32> = vec2<f32>(x_462.x, x_462.y);
      let x_465 : f32 = u_xlat6.z;
      txVec0 = vec3<f32>(x_463.x, x_463.y, x_465);
      let x_477 : vec3<f32> = txVec0;
      let x_479 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_477.xy, x_477.z);
      u_xlat8.x = x_479;
      let x_482 : vec4<f32> = u_xlat7;
      let x_483 : vec2<f32> = vec2<f32>(x_482.z, x_482.w);
      let x_485 : f32 = u_xlat6.z;
      txVec1 = vec3<f32>(x_483.x, x_483.y, x_485);
      let x_492 : vec3<f32> = txVec1;
      let x_494 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_492.xy, x_492.z);
      u_xlat8.y = x_494;
      let x_496 : vec4<f32> = u_xlat6;
      let x_500 : vec4<f32> = x_255.x_MainLightShadowOffset1;
      u_xlat7 = (vec4<f32>(x_496.x, x_496.y, x_496.x, x_496.y) + x_500);
      let x_503 : vec4<f32> = u_xlat7;
      let x_504 : vec2<f32> = vec2<f32>(x_503.x, x_503.y);
      let x_506 : f32 = u_xlat6.z;
      txVec2 = vec3<f32>(x_504.x, x_504.y, x_506);
      let x_513 : vec3<f32> = txVec2;
      let x_515 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_513.xy, x_513.z);
      u_xlat8.z = x_515;
      let x_518 : vec4<f32> = u_xlat7;
      let x_519 : vec2<f32> = vec2<f32>(x_518.z, x_518.w);
      let x_521 : f32 = u_xlat6.z;
      txVec3 = vec3<f32>(x_519.x, x_519.y, x_521);
      let x_528 : vec3<f32> = txVec3;
      let x_530 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_528.xy, x_528.z);
      u_xlat8.w = x_530;
      let x_532 : vec4<f32> = u_xlat8;
      u_xlat67 = dot(x_532, vec4<f32>(0.25f, 0.25f, 0.25f, 0.25f));
    } else {
      let x_539 : f32 = x_255.x_MainLightShadowParams.y;
      u_xlatb68 = (x_539 == 2.0f);
      let x_541 : bool = u_xlatb68;
      if (x_541) {
        let x_544 : vec4<f32> = u_xlat6;
        let x_547 : vec4<f32> = x_255.x_MainLightShadowmapSize;
        let x_552 : vec2<f32> = ((vec2<f32>(x_544.x, x_544.y) * vec2<f32>(x_547.z, x_547.w)) + vec2<f32>(0.5f, 0.5f));
        let x_553 : vec4<f32> = u_xlat7;
        u_xlat7 = vec4<f32>(x_552.x, x_552.y, x_553.z, x_553.w);
        let x_555 : vec4<f32> = u_xlat7;
        let x_557 : vec2<f32> = floor(vec2<f32>(x_555.x, x_555.y));
        let x_558 : vec4<f32> = u_xlat7;
        u_xlat7 = vec4<f32>(x_557.x, x_557.y, x_558.z, x_558.w);
        let x_562 : vec4<f32> = u_xlat6;
        let x_565 : vec4<f32> = x_255.x_MainLightShadowmapSize;
        let x_568 : vec4<f32> = u_xlat7;
        u_xlat51 = ((vec2<f32>(x_562.x, x_562.y) * vec2<f32>(x_565.z, x_565.w)) + -(vec2<f32>(x_568.x, x_568.y)));
        let x_572 : vec2<f32> = u_xlat51;
        u_xlat8 = (vec4<f32>(x_572.x, x_572.x, x_572.y, x_572.y) + vec4<f32>(0.5f, 1.0f, 0.5f, 1.0f));
        let x_576 : vec4<f32> = u_xlat8;
        let x_578 : vec4<f32> = u_xlat8;
        u_xlat9 = (vec4<f32>(x_576.x, x_576.x, x_576.z, x_576.z) * vec4<f32>(x_578.x, x_578.x, x_578.z, x_578.z));
        let x_581 : vec4<f32> = u_xlat9;
        let x_585 : vec2<f32> = (vec2<f32>(x_581.y, x_581.w) * vec2<f32>(0.079999998f, 0.079999998f));
        let x_586 : vec4<f32> = u_xlat8;
        u_xlat8 = vec4<f32>(x_585.x, x_586.y, x_585.y, x_586.w);
        let x_588 : vec4<f32> = u_xlat9;
        let x_591 : vec2<f32> = u_xlat51;
        let x_593 : vec2<f32> = ((vec2<f32>(x_588.x, x_588.z) * vec2<f32>(0.5f, 0.5f)) + -(x_591));
        let x_594 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_593.x, x_593.y, x_594.z, x_594.w);
        let x_597 : vec2<f32> = u_xlat51;
        u_xlat53 = (-(x_597) + vec2<f32>(1.0f, 1.0f));
        let x_602 : vec2<f32> = u_xlat51;
        let x_604 : vec2<f32> = min(x_602, vec2<f32>(0.0f, 0.0f));
        let x_605 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_604.x, x_604.y, x_605.z, x_605.w);
        let x_607 : vec4<f32> = u_xlat10;
        let x_610 : vec4<f32> = u_xlat10;
        let x_613 : vec2<f32> = u_xlat53;
        let x_614 : vec2<f32> = ((-(vec2<f32>(x_607.x, x_607.y)) * vec2<f32>(x_610.x, x_610.y)) + x_613);
        let x_615 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_614.x, x_614.y, x_615.z, x_615.w);
        let x_617 : vec2<f32> = u_xlat51;
        u_xlat51 = max(x_617, vec2<f32>(0.0f, 0.0f));
        let x_619 : vec2<f32> = u_xlat51;
        let x_621 : vec2<f32> = u_xlat51;
        let x_623 : vec4<f32> = u_xlat8;
        u_xlat51 = ((-(x_619) * x_621) + vec2<f32>(x_623.y, x_623.w));
        let x_626 : vec4<f32> = u_xlat10;
        let x_628 : vec2<f32> = (vec2<f32>(x_626.x, x_626.y) + vec2<f32>(1.0f, 1.0f));
        let x_629 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_628.x, x_628.y, x_629.z, x_629.w);
        let x_631 : vec2<f32> = u_xlat51;
        u_xlat51 = (x_631 + vec2<f32>(1.0f, 1.0f));
        let x_634 : vec4<f32> = u_xlat9;
        let x_638 : vec2<f32> = (vec2<f32>(x_634.x, x_634.y) * vec2<f32>(0.159999996f, 0.159999996f));
        let x_639 : vec4<f32> = u_xlat11;
        u_xlat11 = vec4<f32>(x_638.x, x_638.y, x_639.z, x_639.w);
        let x_641 : vec2<f32> = u_xlat53;
        let x_642 : vec2<f32> = (x_641 * vec2<f32>(0.159999996f, 0.159999996f));
        let x_643 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_642.x, x_642.y, x_643.z, x_643.w);
        let x_645 : vec4<f32> = u_xlat10;
        let x_647 : vec2<f32> = (vec2<f32>(x_645.x, x_645.y) * vec2<f32>(0.159999996f, 0.159999996f));
        let x_648 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_647.x, x_647.y, x_648.z, x_648.w);
        let x_651 : vec2<f32> = u_xlat51;
        let x_652 : vec2<f32> = (x_651 * vec2<f32>(0.159999996f, 0.159999996f));
        let x_653 : vec4<f32> = u_xlat12;
        u_xlat12 = vec4<f32>(x_652.x, x_652.y, x_653.z, x_653.w);
        let x_655 : vec4<f32> = u_xlat8;
        u_xlat51 = (vec2<f32>(x_655.y, x_655.w) * vec2<f32>(0.159999996f, 0.159999996f));
        let x_659 : f32 = u_xlat10.x;
        u_xlat11.z = x_659;
        let x_662 : f32 = u_xlat51.x;
        u_xlat11.w = x_662;
        let x_665 : f32 = u_xlat12.x;
        u_xlat9.z = x_665;
        let x_668 : f32 = u_xlat8.x;
        u_xlat9.w = x_668;
        let x_671 : vec4<f32> = u_xlat9;
        let x_673 : vec4<f32> = u_xlat11;
        u_xlat13 = (vec4<f32>(x_671.z, x_671.w, x_671.x, x_671.z) + vec4<f32>(x_673.z, x_673.w, x_673.x, x_673.z));
        let x_677 : f32 = u_xlat11.y;
        u_xlat10.z = x_677;
        let x_680 : f32 = u_xlat51.y;
        u_xlat10.w = x_680;
        let x_683 : f32 = u_xlat9.y;
        u_xlat12.z = x_683;
        let x_686 : f32 = u_xlat8.z;
        u_xlat12.w = x_686;
        let x_688 : vec4<f32> = u_xlat10;
        let x_690 : vec4<f32> = u_xlat12;
        let x_692 : vec3<f32> = (vec3<f32>(x_688.z, x_688.y, x_688.w) + vec3<f32>(x_690.z, x_690.y, x_690.w));
        let x_693 : vec4<f32> = u_xlat8;
        u_xlat8 = vec4<f32>(x_692.x, x_692.y, x_692.z, x_693.w);
        let x_695 : vec4<f32> = u_xlat9;
        let x_697 : vec4<f32> = u_xlat13;
        let x_699 : vec3<f32> = (vec3<f32>(x_695.x, x_695.z, x_695.w) / vec3<f32>(x_697.z, x_697.w, x_697.y));
        let x_700 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_699.x, x_699.y, x_699.z, x_700.w);
        let x_702 : vec4<f32> = u_xlat9;
        let x_708 : vec3<f32> = (vec3<f32>(x_702.x, x_702.y, x_702.z) + vec3<f32>(-2.5f, -0.5f, 1.5f));
        let x_709 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_708.x, x_708.y, x_708.z, x_709.w);
        let x_711 : vec4<f32> = u_xlat12;
        let x_713 : vec4<f32> = u_xlat8;
        let x_715 : vec3<f32> = (vec3<f32>(x_711.z, x_711.y, x_711.w) / vec3<f32>(x_713.x, x_713.y, x_713.z));
        let x_716 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_715.x, x_715.y, x_715.z, x_716.w);
        let x_718 : vec4<f32> = u_xlat10;
        let x_720 : vec3<f32> = (vec3<f32>(x_718.x, x_718.y, x_718.z) + vec3<f32>(-2.5f, -0.5f, 1.5f));
        let x_721 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_720.x, x_720.y, x_720.z, x_721.w);
        let x_723 : vec4<f32> = u_xlat9;
        let x_726 : vec4<f32> = x_255.x_MainLightShadowmapSize;
        let x_728 : vec3<f32> = (vec3<f32>(x_723.y, x_723.x, x_723.z) * vec3<f32>(x_726.x, x_726.x, x_726.x));
        let x_729 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_728.x, x_728.y, x_728.z, x_729.w);
        let x_731 : vec4<f32> = u_xlat10;
        let x_734 : vec4<f32> = x_255.x_MainLightShadowmapSize;
        let x_736 : vec3<f32> = (vec3<f32>(x_731.x, x_731.y, x_731.z) * vec3<f32>(x_734.y, x_734.y, x_734.y));
        let x_737 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_736.x, x_736.y, x_736.z, x_737.w);
        let x_740 : f32 = u_xlat10.x;
        u_xlat9.w = x_740;
        let x_742 : vec4<f32> = u_xlat7;
        let x_745 : vec4<f32> = x_255.x_MainLightShadowmapSize;
        let x_748 : vec4<f32> = u_xlat9;
        u_xlat11 = ((vec4<f32>(x_742.x, x_742.y, x_742.x, x_742.y) * vec4<f32>(x_745.x, x_745.y, x_745.x, x_745.y)) + vec4<f32>(x_748.y, x_748.w, x_748.x, x_748.w));
        let x_751 : vec4<f32> = u_xlat7;
        let x_754 : vec4<f32> = x_255.x_MainLightShadowmapSize;
        let x_757 : vec4<f32> = u_xlat9;
        u_xlat51 = ((vec2<f32>(x_751.x, x_751.y) * vec2<f32>(x_754.x, x_754.y)) + vec2<f32>(x_757.z, x_757.w));
        let x_761 : f32 = u_xlat9.y;
        u_xlat10.w = x_761;
        let x_763 : vec4<f32> = u_xlat10;
        let x_764 : vec2<f32> = vec2<f32>(x_763.y, x_763.z);
        let x_765 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_765.x, x_764.x, x_765.z, x_764.y);
        let x_767 : vec4<f32> = u_xlat7;
        let x_770 : vec4<f32> = x_255.x_MainLightShadowmapSize;
        let x_773 : vec4<f32> = u_xlat9;
        u_xlat12 = ((vec4<f32>(x_767.x, x_767.y, x_767.x, x_767.y) * vec4<f32>(x_770.x, x_770.y, x_770.x, x_770.y)) + vec4<f32>(x_773.x, x_773.y, x_773.z, x_773.y));
        let x_776 : vec4<f32> = u_xlat7;
        let x_779 : vec4<f32> = x_255.x_MainLightShadowmapSize;
        let x_782 : vec4<f32> = u_xlat10;
        u_xlat10 = ((vec4<f32>(x_776.x, x_776.y, x_776.x, x_776.y) * vec4<f32>(x_779.x, x_779.y, x_779.x, x_779.y)) + vec4<f32>(x_782.w, x_782.y, x_782.w, x_782.z));
        let x_785 : vec4<f32> = u_xlat7;
        let x_788 : vec4<f32> = x_255.x_MainLightShadowmapSize;
        let x_791 : vec4<f32> = u_xlat9;
        u_xlat9 = ((vec4<f32>(x_785.x, x_785.y, x_785.x, x_785.y) * vec4<f32>(x_788.x, x_788.y, x_788.x, x_788.y)) + vec4<f32>(x_791.x, x_791.w, x_791.z, x_791.w));
        let x_795 : vec4<f32> = u_xlat8;
        let x_797 : vec4<f32> = u_xlat13;
        u_xlat14 = (vec4<f32>(x_795.x, x_795.x, x_795.x, x_795.y) * vec4<f32>(x_797.z, x_797.w, x_797.y, x_797.z));
        let x_801 : vec4<f32> = u_xlat8;
        let x_803 : vec4<f32> = u_xlat13;
        u_xlat15 = (vec4<f32>(x_801.y, x_801.y, x_801.z, x_801.z) * x_803);
        let x_807 : f32 = u_xlat8.z;
        let x_809 : f32 = u_xlat13.y;
        u_xlat68 = (x_807 * x_809);
        let x_812 : vec4<f32> = u_xlat11;
        let x_813 : vec2<f32> = vec2<f32>(x_812.x, x_812.y);
        let x_815 : f32 = u_xlat6.z;
        txVec4 = vec3<f32>(x_813.x, x_813.y, x_815);
        let x_823 : vec3<f32> = txVec4;
        let x_825 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_823.xy, x_823.z);
        u_xlat70 = x_825;
        let x_827 : vec4<f32> = u_xlat11;
        let x_828 : vec2<f32> = vec2<f32>(x_827.z, x_827.w);
        let x_830 : f32 = u_xlat6.z;
        txVec5 = vec3<f32>(x_828.x, x_828.y, x_830);
        let x_838 : vec3<f32> = txVec5;
        let x_840 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_838.xy, x_838.z);
        u_xlat72 = x_840;
        let x_841 : f32 = u_xlat72;
        let x_843 : f32 = u_xlat14.y;
        u_xlat72 = (x_841 * x_843);
        let x_846 : f32 = u_xlat14.x;
        let x_847 : f32 = u_xlat70;
        let x_849 : f32 = u_xlat72;
        u_xlat70 = ((x_846 * x_847) + x_849);
        let x_852 : vec2<f32> = u_xlat51;
        let x_854 : f32 = u_xlat6.z;
        txVec6 = vec3<f32>(x_852.x, x_852.y, x_854);
        let x_861 : vec3<f32> = txVec6;
        let x_863 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_861.xy, x_861.z);
        u_xlat72 = x_863;
        let x_865 : f32 = u_xlat14.z;
        let x_866 : f32 = u_xlat72;
        let x_868 : f32 = u_xlat70;
        u_xlat70 = ((x_865 * x_866) + x_868);
        let x_871 : vec4<f32> = u_xlat10;
        let x_872 : vec2<f32> = vec2<f32>(x_871.x, x_871.y);
        let x_874 : f32 = u_xlat6.z;
        txVec7 = vec3<f32>(x_872.x, x_872.y, x_874);
        let x_881 : vec3<f32> = txVec7;
        let x_883 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_881.xy, x_881.z);
        u_xlat72 = x_883;
        let x_885 : f32 = u_xlat14.w;
        let x_886 : f32 = u_xlat72;
        let x_888 : f32 = u_xlat70;
        u_xlat70 = ((x_885 * x_886) + x_888);
        let x_891 : vec4<f32> = u_xlat12;
        let x_892 : vec2<f32> = vec2<f32>(x_891.x, x_891.y);
        let x_894 : f32 = u_xlat6.z;
        txVec8 = vec3<f32>(x_892.x, x_892.y, x_894);
        let x_901 : vec3<f32> = txVec8;
        let x_903 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_901.xy, x_901.z);
        u_xlat72 = x_903;
        let x_905 : f32 = u_xlat15.x;
        let x_906 : f32 = u_xlat72;
        let x_908 : f32 = u_xlat70;
        u_xlat70 = ((x_905 * x_906) + x_908);
        let x_911 : vec4<f32> = u_xlat12;
        let x_912 : vec2<f32> = vec2<f32>(x_911.z, x_911.w);
        let x_914 : f32 = u_xlat6.z;
        txVec9 = vec3<f32>(x_912.x, x_912.y, x_914);
        let x_921 : vec3<f32> = txVec9;
        let x_923 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_921.xy, x_921.z);
        u_xlat72 = x_923;
        let x_925 : f32 = u_xlat15.y;
        let x_926 : f32 = u_xlat72;
        let x_928 : f32 = u_xlat70;
        u_xlat70 = ((x_925 * x_926) + x_928);
        let x_931 : vec4<f32> = u_xlat10;
        let x_932 : vec2<f32> = vec2<f32>(x_931.z, x_931.w);
        let x_934 : f32 = u_xlat6.z;
        txVec10 = vec3<f32>(x_932.x, x_932.y, x_934);
        let x_941 : vec3<f32> = txVec10;
        let x_943 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_941.xy, x_941.z);
        u_xlat72 = x_943;
        let x_945 : f32 = u_xlat15.z;
        let x_946 : f32 = u_xlat72;
        let x_948 : f32 = u_xlat70;
        u_xlat70 = ((x_945 * x_946) + x_948);
        let x_951 : vec4<f32> = u_xlat9;
        let x_952 : vec2<f32> = vec2<f32>(x_951.x, x_951.y);
        let x_954 : f32 = u_xlat6.z;
        txVec11 = vec3<f32>(x_952.x, x_952.y, x_954);
        let x_961 : vec3<f32> = txVec11;
        let x_963 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_961.xy, x_961.z);
        u_xlat72 = x_963;
        let x_965 : f32 = u_xlat15.w;
        let x_966 : f32 = u_xlat72;
        let x_968 : f32 = u_xlat70;
        u_xlat70 = ((x_965 * x_966) + x_968);
        let x_971 : vec4<f32> = u_xlat9;
        let x_972 : vec2<f32> = vec2<f32>(x_971.z, x_971.w);
        let x_974 : f32 = u_xlat6.z;
        txVec12 = vec3<f32>(x_972.x, x_972.y, x_974);
        let x_981 : vec3<f32> = txVec12;
        let x_983 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_981.xy, x_981.z);
        u_xlat72 = x_983;
        let x_984 : f32 = u_xlat68;
        let x_985 : f32 = u_xlat72;
        let x_987 : f32 = u_xlat70;
        u_xlat67 = ((x_984 * x_985) + x_987);
      } else {
        let x_990 : vec4<f32> = u_xlat6;
        let x_993 : vec4<f32> = x_255.x_MainLightShadowmapSize;
        let x_996 : vec2<f32> = ((vec2<f32>(x_990.x, x_990.y) * vec2<f32>(x_993.z, x_993.w)) + vec2<f32>(0.5f, 0.5f));
        let x_997 : vec4<f32> = u_xlat7;
        u_xlat7 = vec4<f32>(x_996.x, x_996.y, x_997.z, x_997.w);
        let x_999 : vec4<f32> = u_xlat7;
        let x_1001 : vec2<f32> = floor(vec2<f32>(x_999.x, x_999.y));
        let x_1002 : vec4<f32> = u_xlat7;
        u_xlat7 = vec4<f32>(x_1001.x, x_1001.y, x_1002.z, x_1002.w);
        let x_1004 : vec4<f32> = u_xlat6;
        let x_1007 : vec4<f32> = x_255.x_MainLightShadowmapSize;
        let x_1010 : vec4<f32> = u_xlat7;
        u_xlat51 = ((vec2<f32>(x_1004.x, x_1004.y) * vec2<f32>(x_1007.z, x_1007.w)) + -(vec2<f32>(x_1010.x, x_1010.y)));
        let x_1014 : vec2<f32> = u_xlat51;
        u_xlat8 = (vec4<f32>(x_1014.x, x_1014.x, x_1014.y, x_1014.y) + vec4<f32>(0.5f, 1.0f, 0.5f, 1.0f));
        let x_1017 : vec4<f32> = u_xlat8;
        let x_1019 : vec4<f32> = u_xlat8;
        u_xlat9 = (vec4<f32>(x_1017.x, x_1017.x, x_1017.z, x_1017.z) * vec4<f32>(x_1019.x, x_1019.x, x_1019.z, x_1019.z));
        let x_1022 : vec4<f32> = u_xlat9;
        let x_1026 : vec2<f32> = (vec2<f32>(x_1022.y, x_1022.w) * vec2<f32>(0.040816002f, 0.040816002f));
        let x_1027 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_1027.x, x_1026.x, x_1027.z, x_1026.y);
        let x_1029 : vec4<f32> = u_xlat9;
        let x_1032 : vec2<f32> = u_xlat51;
        let x_1034 : vec2<f32> = ((vec2<f32>(x_1029.x, x_1029.z) * vec2<f32>(0.5f, 0.5f)) + -(x_1032));
        let x_1035 : vec4<f32> = u_xlat8;
        u_xlat8 = vec4<f32>(x_1034.x, x_1035.y, x_1034.y, x_1035.w);
        let x_1037 : vec2<f32> = u_xlat51;
        let x_1039 : vec2<f32> = (-(x_1037) + vec2<f32>(1.0f, 1.0f));
        let x_1040 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_1039.x, x_1039.y, x_1040.z, x_1040.w);
        let x_1042 : vec2<f32> = u_xlat51;
        u_xlat53 = min(x_1042, vec2<f32>(0.0f, 0.0f));
        let x_1044 : vec2<f32> = u_xlat53;
        let x_1046 : vec2<f32> = u_xlat53;
        let x_1048 : vec4<f32> = u_xlat9;
        let x_1050 : vec2<f32> = ((-(x_1044) * x_1046) + vec2<f32>(x_1048.x, x_1048.y));
        let x_1051 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_1050.x, x_1050.y, x_1051.z, x_1051.w);
        let x_1053 : vec2<f32> = u_xlat51;
        u_xlat53 = max(x_1053, vec2<f32>(0.0f, 0.0f));
        let x_1056 : vec2<f32> = u_xlat53;
        let x_1058 : vec2<f32> = u_xlat53;
        let x_1060 : vec4<f32> = u_xlat8;
        let x_1062 : vec2<f32> = ((-(x_1056) * x_1058) + vec2<f32>(x_1060.y, x_1060.w));
        let x_1063 : vec3<f32> = u_xlat30;
        u_xlat30 = vec3<f32>(x_1062.x, x_1063.y, x_1062.y);
        let x_1065 : vec4<f32> = u_xlat9;
        let x_1068 : vec2<f32> = (vec2<f32>(x_1065.x, x_1065.y) + vec2<f32>(2.0f, 2.0f));
        let x_1069 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_1068.x, x_1068.y, x_1069.z, x_1069.w);
        let x_1071 : vec3<f32> = u_xlat30;
        let x_1073 : vec2<f32> = (vec2<f32>(x_1071.x, x_1071.z) + vec2<f32>(2.0f, 2.0f));
        let x_1074 : vec4<f32> = u_xlat8;
        u_xlat8 = vec4<f32>(x_1074.x, x_1073.x, x_1074.z, x_1073.y);
        let x_1077 : f32 = u_xlat8.y;
        u_xlat11.z = (x_1077 * 0.081632003f);
        let x_1081 : vec4<f32> = u_xlat8;
        let x_1084 : vec3<f32> = (vec3<f32>(x_1081.z, x_1081.x, x_1081.w) * vec3<f32>(0.081632003f, 0.081632003f, 0.081632003f));
        let x_1085 : vec4<f32> = u_xlat12;
        u_xlat12 = vec4<f32>(x_1084.x, x_1084.y, x_1084.z, x_1085.w);
        let x_1087 : vec4<f32> = u_xlat9;
        let x_1090 : vec2<f32> = (vec2<f32>(x_1087.x, x_1087.y) * vec2<f32>(0.081632003f, 0.081632003f));
        let x_1091 : vec4<f32> = u_xlat8;
        u_xlat8 = vec4<f32>(x_1090.x, x_1090.y, x_1091.z, x_1091.w);
        let x_1094 : f32 = u_xlat12.y;
        u_xlat11.x = x_1094;
        let x_1096 : vec2<f32> = u_xlat51;
        let x_1103 : vec2<f32> = ((vec2<f32>(x_1096.x, x_1096.x) * vec2<f32>(-0.081632003f, 0.081632003f)) + vec2<f32>(0.163264006f, 0.081632003f));
        let x_1104 : vec4<f32> = u_xlat11;
        u_xlat11 = vec4<f32>(x_1104.x, x_1103.x, x_1104.z, x_1103.y);
        let x_1106 : vec2<f32> = u_xlat51;
        let x_1110 : vec2<f32> = ((vec2<f32>(x_1106.x, x_1106.x) * vec2<f32>(-0.081632003f, 0.081632003f)) + vec2<f32>(0.081632003f, 0.163264006f));
        let x_1111 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_1110.x, x_1111.y, x_1110.y, x_1111.w);
        let x_1114 : f32 = u_xlat8.x;
        u_xlat9.y = x_1114;
        let x_1117 : f32 = u_xlat10.y;
        u_xlat9.w = x_1117;
        let x_1119 : vec4<f32> = u_xlat9;
        let x_1120 : vec4<f32> = u_xlat11;
        u_xlat11 = (x_1119 + x_1120);
        let x_1122 : vec2<f32> = u_xlat51;
        let x_1125 : vec2<f32> = ((vec2<f32>(x_1122.y, x_1122.y) * vec2<f32>(-0.081632003f, 0.081632003f)) + vec2<f32>(0.163264006f, 0.081632003f));
        let x_1126 : vec4<f32> = u_xlat12;
        u_xlat12 = vec4<f32>(x_1126.x, x_1125.x, x_1126.z, x_1125.y);
        let x_1128 : vec2<f32> = u_xlat51;
        let x_1131 : vec2<f32> = ((vec2<f32>(x_1128.y, x_1128.y) * vec2<f32>(-0.081632003f, 0.081632003f)) + vec2<f32>(0.081632003f, 0.163264006f));
        let x_1132 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_1131.x, x_1132.y, x_1131.y, x_1132.w);
        let x_1135 : f32 = u_xlat8.y;
        u_xlat10.y = x_1135;
        let x_1137 : vec4<f32> = u_xlat10;
        let x_1138 : vec4<f32> = u_xlat12;
        u_xlat8 = (x_1137 + x_1138);
        let x_1140 : vec4<f32> = u_xlat9;
        let x_1141 : vec4<f32> = u_xlat11;
        u_xlat9 = (x_1140 / x_1141);
        let x_1143 : vec4<f32> = u_xlat9;
        u_xlat9 = (x_1143 + vec4<f32>(-3.5f, -1.5f, 0.5f, 2.5f));
        let x_1149 : vec4<f32> = u_xlat10;
        let x_1150 : vec4<f32> = u_xlat8;
        u_xlat10 = (x_1149 / x_1150);
        let x_1152 : vec4<f32> = u_xlat10;
        u_xlat10 = (x_1152 + vec4<f32>(-3.5f, -1.5f, 0.5f, 2.5f));
        let x_1154 : vec4<f32> = u_xlat9;
        let x_1157 : vec4<f32> = x_255.x_MainLightShadowmapSize;
        u_xlat9 = (vec4<f32>(x_1154.w, x_1154.x, x_1154.y, x_1154.z) * vec4<f32>(x_1157.x, x_1157.x, x_1157.x, x_1157.x));
        let x_1160 : vec4<f32> = u_xlat10;
        let x_1163 : vec4<f32> = x_255.x_MainLightShadowmapSize;
        u_xlat10 = (vec4<f32>(x_1160.x, x_1160.w, x_1160.y, x_1160.z) * vec4<f32>(x_1163.y, x_1163.y, x_1163.y, x_1163.y));
        let x_1166 : vec4<f32> = u_xlat9;
        let x_1167 : vec3<f32> = vec3<f32>(x_1166.y, x_1166.z, x_1166.w);
        let x_1168 : vec4<f32> = u_xlat12;
        u_xlat12 = vec4<f32>(x_1167.x, x_1168.y, x_1167.y, x_1167.z);
        let x_1171 : f32 = u_xlat10.x;
        u_xlat12.y = x_1171;
        let x_1173 : vec4<f32> = u_xlat7;
        let x_1176 : vec4<f32> = x_255.x_MainLightShadowmapSize;
        let x_1179 : vec4<f32> = u_xlat12;
        u_xlat13 = ((vec4<f32>(x_1173.x, x_1173.y, x_1173.x, x_1173.y) * vec4<f32>(x_1176.x, x_1176.y, x_1176.x, x_1176.y)) + vec4<f32>(x_1179.x, x_1179.y, x_1179.z, x_1179.y));
        let x_1182 : vec4<f32> = u_xlat7;
        let x_1185 : vec4<f32> = x_255.x_MainLightShadowmapSize;
        let x_1188 : vec4<f32> = u_xlat12;
        u_xlat51 = ((vec2<f32>(x_1182.x, x_1182.y) * vec2<f32>(x_1185.x, x_1185.y)) + vec2<f32>(x_1188.w, x_1188.y));
        let x_1192 : f32 = u_xlat12.y;
        u_xlat9.y = x_1192;
        let x_1195 : f32 = u_xlat10.z;
        u_xlat12.y = x_1195;
        let x_1197 : vec4<f32> = u_xlat7;
        let x_1200 : vec4<f32> = x_255.x_MainLightShadowmapSize;
        let x_1203 : vec4<f32> = u_xlat12;
        u_xlat14 = ((vec4<f32>(x_1197.x, x_1197.y, x_1197.x, x_1197.y) * vec4<f32>(x_1200.x, x_1200.y, x_1200.x, x_1200.y)) + vec4<f32>(x_1203.x, x_1203.y, x_1203.z, x_1203.y));
        let x_1206 : vec4<f32> = u_xlat7;
        let x_1209 : vec4<f32> = x_255.x_MainLightShadowmapSize;
        let x_1212 : vec4<f32> = u_xlat12;
        let x_1214 : vec2<f32> = ((vec2<f32>(x_1206.x, x_1206.y) * vec2<f32>(x_1209.x, x_1209.y)) + vec2<f32>(x_1212.w, x_1212.y));
        let x_1215 : vec4<f32> = u_xlat15;
        u_xlat15 = vec4<f32>(x_1214.x, x_1214.y, x_1215.z, x_1215.w);
        let x_1218 : f32 = u_xlat12.y;
        u_xlat9.z = x_1218;
        let x_1221 : vec4<f32> = u_xlat7;
        let x_1224 : vec4<f32> = x_255.x_MainLightShadowmapSize;
        let x_1227 : vec4<f32> = u_xlat9;
        u_xlat16 = ((vec4<f32>(x_1221.x, x_1221.y, x_1221.x, x_1221.y) * vec4<f32>(x_1224.x, x_1224.y, x_1224.x, x_1224.y)) + vec4<f32>(x_1227.x, x_1227.y, x_1227.x, x_1227.z));
        let x_1231 : f32 = u_xlat10.w;
        u_xlat12.y = x_1231;
        let x_1234 : vec4<f32> = u_xlat7;
        let x_1237 : vec4<f32> = x_255.x_MainLightShadowmapSize;
        let x_1240 : vec4<f32> = u_xlat12;
        u_xlat17 = ((vec4<f32>(x_1234.x, x_1234.y, x_1234.x, x_1234.y) * vec4<f32>(x_1237.x, x_1237.y, x_1237.x, x_1237.y)) + vec4<f32>(x_1240.x, x_1240.y, x_1240.z, x_1240.y));
        let x_1244 : vec4<f32> = u_xlat7;
        let x_1247 : vec4<f32> = x_255.x_MainLightShadowmapSize;
        let x_1250 : vec4<f32> = u_xlat12;
        let x_1252 : vec2<f32> = ((vec2<f32>(x_1244.x, x_1244.y) * vec2<f32>(x_1247.x, x_1247.y)) + vec2<f32>(x_1250.w, x_1250.y));
        let x_1253 : vec3<f32> = u_xlat31;
        u_xlat31 = vec3<f32>(x_1252.x, x_1252.y, x_1253.z);
        let x_1256 : f32 = u_xlat12.y;
        u_xlat9.w = x_1256;
        let x_1259 : vec4<f32> = u_xlat7;
        let x_1262 : vec4<f32> = x_255.x_MainLightShadowmapSize;
        let x_1265 : vec4<f32> = u_xlat9;
        u_xlat59 = ((vec2<f32>(x_1259.x, x_1259.y) * vec2<f32>(x_1262.x, x_1262.y)) + vec2<f32>(x_1265.x, x_1265.w));
        let x_1268 : vec4<f32> = u_xlat12;
        let x_1269 : vec3<f32> = vec3<f32>(x_1268.x, x_1268.z, x_1268.w);
        let x_1270 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_1269.x, x_1270.y, x_1269.y, x_1269.z);
        let x_1272 : vec4<f32> = u_xlat7;
        let x_1275 : vec4<f32> = x_255.x_MainLightShadowmapSize;
        let x_1278 : vec4<f32> = u_xlat10;
        u_xlat12 = ((vec4<f32>(x_1272.x, x_1272.y, x_1272.x, x_1272.y) * vec4<f32>(x_1275.x, x_1275.y, x_1275.x, x_1275.y)) + vec4<f32>(x_1278.x, x_1278.y, x_1278.z, x_1278.y));
        let x_1282 : vec4<f32> = u_xlat7;
        let x_1285 : vec4<f32> = x_255.x_MainLightShadowmapSize;
        let x_1288 : vec4<f32> = u_xlat10;
        u_xlat54 = ((vec2<f32>(x_1282.x, x_1282.y) * vec2<f32>(x_1285.x, x_1285.y)) + vec2<f32>(x_1288.w, x_1288.y));
        let x_1292 : f32 = u_xlat9.x;
        u_xlat10.x = x_1292;
        let x_1294 : vec4<f32> = u_xlat7;
        let x_1297 : vec4<f32> = x_255.x_MainLightShadowmapSize;
        let x_1300 : vec4<f32> = u_xlat10;
        let x_1302 : vec2<f32> = ((vec2<f32>(x_1294.x, x_1294.y) * vec2<f32>(x_1297.x, x_1297.y)) + vec2<f32>(x_1300.x, x_1300.y));
        let x_1303 : vec4<f32> = u_xlat7;
        u_xlat7 = vec4<f32>(x_1302.x, x_1302.y, x_1303.z, x_1303.w);
        let x_1306 : vec4<f32> = u_xlat8;
        let x_1308 : vec4<f32> = u_xlat11;
        u_xlat18 = (vec4<f32>(x_1306.x, x_1306.x, x_1306.x, x_1306.x) * x_1308);
        let x_1311 : vec4<f32> = u_xlat8;
        let x_1313 : vec4<f32> = u_xlat11;
        u_xlat19 = (vec4<f32>(x_1311.y, x_1311.y, x_1311.y, x_1311.y) * x_1313);
        let x_1316 : vec4<f32> = u_xlat8;
        let x_1318 : vec4<f32> = u_xlat11;
        u_xlat20 = (vec4<f32>(x_1316.z, x_1316.z, x_1316.z, x_1316.z) * x_1318);
        let x_1320 : vec4<f32> = u_xlat8;
        let x_1322 : vec4<f32> = u_xlat11;
        u_xlat8 = (vec4<f32>(x_1320.w, x_1320.w, x_1320.w, x_1320.w) * x_1322);
        let x_1325 : vec4<f32> = u_xlat13;
        let x_1326 : vec2<f32> = vec2<f32>(x_1325.x, x_1325.y);
        let x_1328 : f32 = u_xlat6.z;
        txVec13 = vec3<f32>(x_1326.x, x_1326.y, x_1328);
        let x_1335 : vec3<f32> = txVec13;
        let x_1337 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1335.xy, x_1335.z);
        u_xlat68 = x_1337;
        let x_1339 : vec4<f32> = u_xlat13;
        let x_1340 : vec2<f32> = vec2<f32>(x_1339.z, x_1339.w);
        let x_1342 : f32 = u_xlat6.z;
        txVec14 = vec3<f32>(x_1340.x, x_1340.y, x_1342);
        let x_1349 : vec3<f32> = txVec14;
        let x_1351 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1349.xy, x_1349.z);
        u_xlat70 = x_1351;
        let x_1352 : f32 = u_xlat70;
        let x_1354 : f32 = u_xlat18.y;
        u_xlat70 = (x_1352 * x_1354);
        let x_1357 : f32 = u_xlat18.x;
        let x_1358 : f32 = u_xlat68;
        let x_1360 : f32 = u_xlat70;
        u_xlat68 = ((x_1357 * x_1358) + x_1360);
        let x_1363 : vec2<f32> = u_xlat51;
        let x_1365 : f32 = u_xlat6.z;
        txVec15 = vec3<f32>(x_1363.x, x_1363.y, x_1365);
        let x_1372 : vec3<f32> = txVec15;
        let x_1374 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1372.xy, x_1372.z);
        u_xlat70 = x_1374;
        let x_1376 : f32 = u_xlat18.z;
        let x_1377 : f32 = u_xlat70;
        let x_1379 : f32 = u_xlat68;
        u_xlat68 = ((x_1376 * x_1377) + x_1379);
        let x_1382 : vec4<f32> = u_xlat16;
        let x_1383 : vec2<f32> = vec2<f32>(x_1382.x, x_1382.y);
        let x_1385 : f32 = u_xlat6.z;
        txVec16 = vec3<f32>(x_1383.x, x_1383.y, x_1385);
        let x_1392 : vec3<f32> = txVec16;
        let x_1394 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1392.xy, x_1392.z);
        u_xlat70 = x_1394;
        let x_1396 : f32 = u_xlat18.w;
        let x_1397 : f32 = u_xlat70;
        let x_1399 : f32 = u_xlat68;
        u_xlat68 = ((x_1396 * x_1397) + x_1399);
        let x_1402 : vec4<f32> = u_xlat14;
        let x_1403 : vec2<f32> = vec2<f32>(x_1402.x, x_1402.y);
        let x_1405 : f32 = u_xlat6.z;
        txVec17 = vec3<f32>(x_1403.x, x_1403.y, x_1405);
        let x_1412 : vec3<f32> = txVec17;
        let x_1414 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1412.xy, x_1412.z);
        u_xlat70 = x_1414;
        let x_1416 : f32 = u_xlat19.x;
        let x_1417 : f32 = u_xlat70;
        let x_1419 : f32 = u_xlat68;
        u_xlat68 = ((x_1416 * x_1417) + x_1419);
        let x_1422 : vec4<f32> = u_xlat14;
        let x_1423 : vec2<f32> = vec2<f32>(x_1422.z, x_1422.w);
        let x_1425 : f32 = u_xlat6.z;
        txVec18 = vec3<f32>(x_1423.x, x_1423.y, x_1425);
        let x_1432 : vec3<f32> = txVec18;
        let x_1434 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1432.xy, x_1432.z);
        u_xlat70 = x_1434;
        let x_1436 : f32 = u_xlat19.y;
        let x_1437 : f32 = u_xlat70;
        let x_1439 : f32 = u_xlat68;
        u_xlat68 = ((x_1436 * x_1437) + x_1439);
        let x_1442 : vec4<f32> = u_xlat15;
        let x_1443 : vec2<f32> = vec2<f32>(x_1442.x, x_1442.y);
        let x_1445 : f32 = u_xlat6.z;
        txVec19 = vec3<f32>(x_1443.x, x_1443.y, x_1445);
        let x_1452 : vec3<f32> = txVec19;
        let x_1454 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1452.xy, x_1452.z);
        u_xlat70 = x_1454;
        let x_1456 : f32 = u_xlat19.z;
        let x_1457 : f32 = u_xlat70;
        let x_1459 : f32 = u_xlat68;
        u_xlat68 = ((x_1456 * x_1457) + x_1459);
        let x_1462 : vec4<f32> = u_xlat16;
        let x_1463 : vec2<f32> = vec2<f32>(x_1462.z, x_1462.w);
        let x_1465 : f32 = u_xlat6.z;
        txVec20 = vec3<f32>(x_1463.x, x_1463.y, x_1465);
        let x_1472 : vec3<f32> = txVec20;
        let x_1474 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1472.xy, x_1472.z);
        u_xlat70 = x_1474;
        let x_1476 : f32 = u_xlat19.w;
        let x_1477 : f32 = u_xlat70;
        let x_1479 : f32 = u_xlat68;
        u_xlat68 = ((x_1476 * x_1477) + x_1479);
        let x_1482 : vec4<f32> = u_xlat17;
        let x_1483 : vec2<f32> = vec2<f32>(x_1482.x, x_1482.y);
        let x_1485 : f32 = u_xlat6.z;
        txVec21 = vec3<f32>(x_1483.x, x_1483.y, x_1485);
        let x_1492 : vec3<f32> = txVec21;
        let x_1494 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1492.xy, x_1492.z);
        u_xlat70 = x_1494;
        let x_1496 : f32 = u_xlat20.x;
        let x_1497 : f32 = u_xlat70;
        let x_1499 : f32 = u_xlat68;
        u_xlat68 = ((x_1496 * x_1497) + x_1499);
        let x_1502 : vec4<f32> = u_xlat17;
        let x_1503 : vec2<f32> = vec2<f32>(x_1502.z, x_1502.w);
        let x_1505 : f32 = u_xlat6.z;
        txVec22 = vec3<f32>(x_1503.x, x_1503.y, x_1505);
        let x_1512 : vec3<f32> = txVec22;
        let x_1514 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1512.xy, x_1512.z);
        u_xlat70 = x_1514;
        let x_1516 : f32 = u_xlat20.y;
        let x_1517 : f32 = u_xlat70;
        let x_1519 : f32 = u_xlat68;
        u_xlat68 = ((x_1516 * x_1517) + x_1519);
        let x_1522 : vec3<f32> = u_xlat31;
        let x_1523 : vec2<f32> = vec2<f32>(x_1522.x, x_1522.y);
        let x_1525 : f32 = u_xlat6.z;
        txVec23 = vec3<f32>(x_1523.x, x_1523.y, x_1525);
        let x_1532 : vec3<f32> = txVec23;
        let x_1534 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1532.xy, x_1532.z);
        u_xlat70 = x_1534;
        let x_1536 : f32 = u_xlat20.z;
        let x_1537 : f32 = u_xlat70;
        let x_1539 : f32 = u_xlat68;
        u_xlat68 = ((x_1536 * x_1537) + x_1539);
        let x_1542 : vec2<f32> = u_xlat59;
        let x_1544 : f32 = u_xlat6.z;
        txVec24 = vec3<f32>(x_1542.x, x_1542.y, x_1544);
        let x_1551 : vec3<f32> = txVec24;
        let x_1553 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1551.xy, x_1551.z);
        u_xlat70 = x_1553;
        let x_1555 : f32 = u_xlat20.w;
        let x_1556 : f32 = u_xlat70;
        let x_1558 : f32 = u_xlat68;
        u_xlat68 = ((x_1555 * x_1556) + x_1558);
        let x_1561 : vec4<f32> = u_xlat12;
        let x_1562 : vec2<f32> = vec2<f32>(x_1561.x, x_1561.y);
        let x_1564 : f32 = u_xlat6.z;
        txVec25 = vec3<f32>(x_1562.x, x_1562.y, x_1564);
        let x_1571 : vec3<f32> = txVec25;
        let x_1573 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1571.xy, x_1571.z);
        u_xlat70 = x_1573;
        let x_1575 : f32 = u_xlat8.x;
        let x_1576 : f32 = u_xlat70;
        let x_1578 : f32 = u_xlat68;
        u_xlat68 = ((x_1575 * x_1576) + x_1578);
        let x_1581 : vec4<f32> = u_xlat12;
        let x_1582 : vec2<f32> = vec2<f32>(x_1581.z, x_1581.w);
        let x_1584 : f32 = u_xlat6.z;
        txVec26 = vec3<f32>(x_1582.x, x_1582.y, x_1584);
        let x_1591 : vec3<f32> = txVec26;
        let x_1593 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1591.xy, x_1591.z);
        u_xlat70 = x_1593;
        let x_1595 : f32 = u_xlat8.y;
        let x_1596 : f32 = u_xlat70;
        let x_1598 : f32 = u_xlat68;
        u_xlat68 = ((x_1595 * x_1596) + x_1598);
        let x_1601 : vec2<f32> = u_xlat54;
        let x_1603 : f32 = u_xlat6.z;
        txVec27 = vec3<f32>(x_1601.x, x_1601.y, x_1603);
        let x_1610 : vec3<f32> = txVec27;
        let x_1612 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1610.xy, x_1610.z);
        u_xlat70 = x_1612;
        let x_1614 : f32 = u_xlat8.z;
        let x_1615 : f32 = u_xlat70;
        let x_1617 : f32 = u_xlat68;
        u_xlat68 = ((x_1614 * x_1615) + x_1617);
        let x_1620 : vec4<f32> = u_xlat7;
        let x_1621 : vec2<f32> = vec2<f32>(x_1620.x, x_1620.y);
        let x_1623 : f32 = u_xlat6.z;
        txVec28 = vec3<f32>(x_1621.x, x_1621.y, x_1623);
        let x_1630 : vec3<f32> = txVec28;
        let x_1632 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1630.xy, x_1630.z);
        u_xlat70 = x_1632;
        let x_1634 : f32 = u_xlat8.w;
        let x_1635 : f32 = u_xlat70;
        let x_1637 : f32 = u_xlat68;
        u_xlat67 = ((x_1634 * x_1635) + x_1637);
      }
    }
  } else {
    let x_1641 : vec4<f32> = u_xlat6;
    let x_1642 : vec2<f32> = vec2<f32>(x_1641.x, x_1641.y);
    let x_1644 : f32 = u_xlat6.z;
    txVec29 = vec3<f32>(x_1642.x, x_1642.y, x_1644);
    let x_1651 : vec3<f32> = txVec29;
    let x_1653 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1651.xy, x_1651.z);
    u_xlat67 = x_1653;
  }
  let x_1655 : f32 = x_255.x_MainLightShadowParams.x;
  u_xlat68 = (-(x_1655) + 1.0f);
  let x_1658 : f32 = u_xlat67;
  let x_1660 : f32 = x_255.x_MainLightShadowParams.x;
  let x_1662 : f32 = u_xlat68;
  u_xlat67 = ((x_1658 * x_1660) + x_1662);
  let x_1666 : f32 = u_xlat6.z;
  u_xlatb70 = (0.0f >= x_1666);
  let x_1670 : f32 = u_xlat6.z;
  u_xlatb72 = (x_1670 >= 1.0f);
  let x_1672 : bool = u_xlatb70;
  let x_1673 : bool = u_xlatb72;
  u_xlatb70 = (x_1672 | x_1673);
  let x_1675 : bool = u_xlatb70;
  let x_1676 : f32 = u_xlat67;
  u_xlat67 = select(x_1676, 1.0f, x_1675);
  let x_1678 : vec3<f32> = u_xlat0;
  let x_1680 : vec4<f32> = x_90.x_MainLightPosition;
  u_xlat0.x = dot(x_1678, -(vec3<f32>(x_1680.x, x_1680.y, x_1680.z)));
  let x_1686 : f32 = u_xlat0.x;
  u_xlat0.x = clamp(x_1686, 0.0f, 1.0f);
  let x_1689 : f32 = u_xlat67;
  let x_1692 : vec4<f32> = x_90.x_MainLightColor;
  let x_1694 : vec3<f32> = (vec3<f32>(x_1689, x_1689, x_1689) * vec3<f32>(x_1692.x, x_1692.y, x_1692.z));
  let x_1695 : vec4<f32> = u_xlat7;
  u_xlat7 = vec4<f32>(x_1694.x, x_1694.y, x_1694.z, x_1695.w);
  let x_1697 : vec3<f32> = u_xlat0;
  let x_1699 : vec4<f32> = u_xlat7;
  u_xlat0 = (vec3<f32>(x_1697.x, x_1697.x, x_1697.x) * vec3<f32>(x_1699.x, x_1699.y, x_1699.z));
  let x_1702 : vec3<f32> = u_xlat0;
  let x_1703 : vec4<f32> = u_xlat3;
  u_xlat0 = (x_1702 * vec3<f32>(x_1703.x, x_1703.y, x_1703.z));
  let x_1707 : f32 = x_145.unity_LODFade.x;
  u_xlatb67 = (x_1707 < 0.0f);
  let x_1710 : f32 = x_145.unity_LODFade.x;
  u_xlat3.x = (x_1710 + 1.0f);
  let x_1713 : bool = u_xlatb67;
  if (x_1713) {
    let x_1718 : f32 = u_xlat3.x;
    x_1714 = x_1718;
  } else {
    let x_1721 : f32 = x_145.unity_LODFade.x;
    x_1714 = x_1721;
  }
  let x_1722 : f32 = x_1714;
  u_xlat67 = x_1722;
  let x_1724 : f32 = u_xlat67;
  u_xlatb3 = (0.5f >= x_1724);
  let x_1726 : vec3<f32> = u_xlat2;
  let x_1730 : vec4<f32> = x_90.x_ScreenParams;
  u_xlat2 = (abs(x_1726) * vec3<f32>(x_1730.x, x_1730.y, x_1730.x));
  let x_1736 : vec3<f32> = u_xlat2;
  u_xlatu2 = vec3<u32>(x_1736);
  let x_1740 : u32 = u_xlatu2.z;
  u_xlatu46 = (x_1740 * 1025u);
  let x_1744 : u32 = u_xlatu46;
  u_xlatu25 = (x_1744 >> 6u);
  let x_1748 : u32 = u_xlatu46;
  let x_1749 : u32 = u_xlatu25;
  u_xlati46 = bitcast<i32>((x_1748 ^ x_1749));
  let x_1752 : i32 = u_xlati46;
  u_xlatu46 = (bitcast<u32>(x_1752) * 9u);
  let x_1756 : u32 = u_xlatu46;
  u_xlatu25 = (x_1756 >> 11u);
  let x_1759 : u32 = u_xlatu46;
  let x_1760 : u32 = u_xlatu25;
  u_xlati46 = bitcast<i32>((x_1759 ^ x_1760));
  let x_1763 : i32 = u_xlati46;
  u_xlati46 = (x_1763 * 32769i);
  let x_1767 : i32 = u_xlati46;
  let x_1770 : u32 = u_xlatu2.y;
  u_xlati24 = bitcast<i32>((bitcast<u32>(x_1767) ^ x_1770));
  let x_1774 : i32 = u_xlati24;
  u_xlatu24 = (bitcast<u32>(x_1774) * 1025u);
  let x_1777 : u32 = u_xlatu24;
  u_xlatu46 = (x_1777 >> 6u);
  let x_1779 : u32 = u_xlatu46;
  let x_1780 : u32 = u_xlatu24;
  u_xlati24 = bitcast<i32>((x_1779 ^ x_1780));
  let x_1783 : i32 = u_xlati24;
  u_xlatu24 = (bitcast<u32>(x_1783) * 9u);
  let x_1786 : u32 = u_xlatu24;
  u_xlatu46 = (x_1786 >> 11u);
  let x_1788 : u32 = u_xlatu46;
  let x_1789 : u32 = u_xlatu24;
  u_xlati24 = bitcast<i32>((x_1788 ^ x_1789));
  let x_1792 : i32 = u_xlati24;
  u_xlati24 = (x_1792 * 32769i);
  let x_1795 : i32 = u_xlati24;
  let x_1798 : u32 = u_xlatu2.x;
  u_xlati2 = bitcast<i32>((bitcast<u32>(x_1795) ^ x_1798));
  let x_1801 : i32 = u_xlati2;
  u_xlatu2.x = (bitcast<u32>(x_1801) * 1025u);
  let x_1806 : u32 = u_xlatu2.x;
  u_xlatu24 = (x_1806 >> 6u);
  let x_1808 : u32 = u_xlatu24;
  let x_1810 : u32 = u_xlatu2.x;
  u_xlati2 = bitcast<i32>((x_1808 ^ x_1810));
  let x_1813 : i32 = u_xlati2;
  u_xlatu2.x = (bitcast<u32>(x_1813) * 9u);
  let x_1818 : u32 = u_xlatu2.x;
  u_xlatu24 = (x_1818 >> 11u);
  let x_1820 : u32 = u_xlatu24;
  let x_1822 : u32 = u_xlatu2.x;
  u_xlati2 = bitcast<i32>((x_1820 ^ x_1822));
  let x_1825 : i32 = u_xlati2;
  u_xlati2 = (x_1825 * 32769i);
  param = 1065353216i;
  let x_1831 : i32 = u_xlati2;
  param_1 = x_1831;
  param_2 = 0i;
  param_3 = 23i;
  let x_1834 : i32 = int_bitfieldInsert_i1_i1_i1_i1_(&(param), &(param_1), &(param_2), &(param_3));
  u_xlat2.x = bitcast<f32>(x_1834);
  let x_1838 : f32 = u_xlat2.x;
  u_xlat2.x = (x_1838 + -1.0f);
  let x_1843 : f32 = u_xlat2.x;
  u_xlat24.x = (-(x_1843) + 1.0f);
  let x_1847 : bool = u_xlatb3;
  if (x_1847) {
    let x_1852 : f32 = u_xlat2.x;
    x_1848 = x_1852;
  } else {
    let x_1855 : f32 = u_xlat24.x;
    x_1848 = x_1855;
  }
  let x_1856 : f32 = x_1848;
  u_xlat2.x = x_1856;
  let x_1858 : f32 = u_xlat67;
  let x_1861 : f32 = u_xlat2.x;
  u_xlat67 = ((x_1858 * 2.0f) + -(x_1861));
  let x_1864 : f32 = u_xlat67;
  let x_1866 : f32 = u_xlat3.w;
  u_xlat2.x = (x_1864 * x_1866);
  let x_1873 : f32 = u_xlat2.x;
  u_xlatb24.x = (x_1873 >= 0.400000006f);
  let x_1878 : bool = u_xlatb24.x;
  if (x_1878) {
    let x_1883 : f32 = u_xlat2.x;
    x_1879 = x_1883;
  } else {
    x_1879 = 0.0f;
  }
  let x_1885 : f32 = x_1879;
  u_xlat24.x = x_1885;
  let x_1888 : f32 = u_xlat3.w;
  let x_1889 : f32 = u_xlat67;
  u_xlat67 = ((x_1888 * x_1889) + -0.400000006f);
  let x_1895 : f32 = u_xlat2.x;
  u_xlat46 = dpdxCoarse(x_1895);
  let x_1898 : f32 = u_xlat2.x;
  u_xlat2.x = dpdyCoarse(x_1898);
  let x_1902 : f32 = u_xlat2.x;
  let x_1904 : f32 = u_xlat46;
  u_xlat2.x = (abs(x_1902) + abs(x_1904));
  let x_1909 : f32 = u_xlat2.x;
  u_xlat2.x = max(x_1909, 0.0001f);
  let x_1913 : f32 = u_xlat67;
  let x_1915 : f32 = u_xlat2.x;
  u_xlat67 = (x_1913 / x_1915);
  let x_1917 : f32 = u_xlat67;
  u_xlat67 = (x_1917 + 0.5f);
  let x_1919 : f32 = u_xlat67;
  u_xlat67 = clamp(x_1919, 0.0f, 1.0f);
  let x_1923 : f32 = x_90.x_AlphaToMaskAvailable;
  u_xlatb2 = !((x_1923 == 0.0f));
  let x_1925 : bool = u_xlatb2;
  if (x_1925) {
    let x_1929 : f32 = u_xlat67;
    x_1926 = x_1929;
  } else {
    let x_1932 : f32 = u_xlat24.x;
    x_1926 = x_1932;
  }
  let x_1933 : f32 = x_1926;
  u_xlat67 = x_1933;
  let x_1934 : f32 = u_xlat67;
  u_xlat24.x = (x_1934 + -0.0001f);
  let x_1939 : f32 = u_xlat24.x;
  u_xlatb24.x = (x_1939 < 0.0f);
  let x_1943 : bool = u_xlatb24.x;
  if (((select(0i, 1i, x_1943) * -1i) != 0i)) {
    discard;
  }
  let x_1953 : f32 = vs_INTERP2.w;
  u_xlatb24.x = (0.0f < x_1953);
  let x_1957 : f32 = x_145.unity_WorldTransformParams.w;
  u_xlatb24.y = (x_1957 >= 0.0f);
  let x_1961 : bool = u_xlatb24.x;
  u_xlat24.x = select(-1.0f, 1.0f, x_1961);
  let x_1965 : bool = u_xlatb24.y;
  u_xlat24.y = select(-1.0f, 1.0f, x_1965);
  let x_1969 : f32 = u_xlat24.y;
  let x_1971 : f32 = u_xlat24.x;
  u_xlat24.x = (x_1969 * x_1971);
  let x_1974 : vec3<f32> = vs_INTERP1;
  let x_1976 : vec4<f32> = vs_INTERP2;
  let x_1978 : vec3<f32> = (vec3<f32>(x_1974.z, x_1974.x, x_1974.y) * vec3<f32>(x_1976.y, x_1976.z, x_1976.x));
  let x_1979 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_1978.x, x_1978.y, x_1978.z, x_1979.w);
  let x_1981 : vec3<f32> = vs_INTERP1;
  let x_1983 : vec4<f32> = vs_INTERP2;
  let x_1986 : vec4<f32> = u_xlat3;
  let x_1989 : vec3<f32> = ((vec3<f32>(x_1981.y, x_1981.z, x_1981.x) * vec3<f32>(x_1983.z, x_1983.x, x_1983.y)) + -(vec3<f32>(x_1986.x, x_1986.y, x_1986.z)));
  let x_1990 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_1989.x, x_1989.y, x_1989.z, x_1990.w);
  let x_1992 : vec2<f32> = u_xlat24;
  let x_1994 : vec4<f32> = u_xlat3;
  let x_1996 : vec3<f32> = (vec3<f32>(x_1992.x, x_1992.x, x_1992.x) * vec3<f32>(x_1994.x, x_1994.y, x_1994.z));
  let x_1997 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_1996.x, x_1996.y, x_1996.z, x_1997.w);
  let x_1999 : vec4<f32> = u_xlat3;
  let x_2001 : vec3<f32> = u_xlat27;
  let x_2003 : vec3<f32> = (vec3<f32>(x_1999.x, x_1999.y, x_1999.z) * vec3<f32>(x_2001.y, x_2001.y, x_2001.y));
  let x_2004 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_2003.x, x_2003.y, x_2003.z, x_2004.w);
  let x_2006 : vec3<f32> = u_xlat27;
  let x_2008 : vec4<f32> = vs_INTERP2;
  let x_2011 : vec4<f32> = u_xlat3;
  let x_2013 : vec3<f32> = ((vec3<f32>(x_2006.x, x_2006.x, x_2006.x) * vec3<f32>(x_2008.x, x_2008.y, x_2008.z)) + vec3<f32>(x_2011.x, x_2011.y, x_2011.z));
  let x_2014 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_2013.x, x_2013.y, x_2013.z, x_2014.w);
  let x_2016 : vec3<f32> = u_xlat27;
  let x_2018 : vec3<f32> = vs_INTERP1;
  let x_2020 : vec4<f32> = u_xlat3;
  let x_2022 : vec3<f32> = ((vec3<f32>(x_2016.z, x_2016.z, x_2016.z) * x_2018) + vec3<f32>(x_2020.x, x_2020.y, x_2020.z));
  let x_2023 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_2022.x, x_2022.y, x_2022.z, x_2023.w);
  let x_2025 : vec4<f32> = u_xlat3;
  let x_2027 : vec4<f32> = u_xlat3;
  u_xlat24.x = dot(vec3<f32>(x_2025.x, x_2025.y, x_2025.z), vec3<f32>(x_2027.x, x_2027.y, x_2027.z));
  let x_2032 : f32 = u_xlat24.x;
  u_xlat24.x = inverseSqrt(x_2032);
  let x_2035 : vec2<f32> = u_xlat24;
  let x_2037 : vec4<f32> = u_xlat3;
  let x_2039 : vec3<f32> = (vec3<f32>(x_2035.x, x_2035.x, x_2035.x) * vec3<f32>(x_2037.x, x_2037.y, x_2037.z));
  let x_2040 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_2039.x, x_2039.y, x_2039.z, x_2040.w);
  let x_2043 : f32 = vs_INTERP0.y;
  let x_2045 : f32 = x_90.unity_MatrixV[1i].z;
  u_xlat24.x = (x_2043 * x_2045);
  let x_2049 : f32 = x_90.unity_MatrixV[0i].z;
  let x_2051 : f32 = vs_INTERP0.x;
  let x_2054 : f32 = u_xlat24.x;
  u_xlat24.x = ((x_2049 * x_2051) + x_2054);
  let x_2058 : f32 = x_90.unity_MatrixV[2i].z;
  let x_2060 : f32 = vs_INTERP0.z;
  let x_2063 : f32 = u_xlat24.x;
  u_xlat24.x = ((x_2058 * x_2060) + x_2063);
  let x_2067 : f32 = u_xlat24.x;
  let x_2069 : f32 = x_90.unity_MatrixV[3i].z;
  u_xlat24.x = (x_2067 + x_2069);
  let x_2073 : f32 = u_xlat24.x;
  let x_2077 : f32 = x_90.x_ProjectionParams.y;
  u_xlat24.x = (-(x_2073) + -(x_2077));
  let x_2082 : f32 = u_xlat24.x;
  u_xlat24.x = max(x_2082, 0.0f);
  let x_2086 : f32 = u_xlat24.x;
  let x_2089 : f32 = x_90.unity_FogParams.x;
  u_xlat24.x = (x_2086 * x_2089);
  u_xlat3.w = 1.0f;
  let x_2095 : vec4<f32> = x_145.unity_SHAr;
  let x_2096 : vec4<f32> = u_xlat3;
  u_xlat7.x = dot(x_2095, x_2096);
  let x_2101 : vec4<f32> = x_145.unity_SHAg;
  let x_2102 : vec4<f32> = u_xlat3;
  u_xlat7.y = dot(x_2101, x_2102);
  let x_2107 : vec4<f32> = x_145.unity_SHAb;
  let x_2108 : vec4<f32> = u_xlat3;
  u_xlat7.z = dot(x_2107, x_2108);
  let x_2111 : vec4<f32> = u_xlat3;
  let x_2113 : vec4<f32> = u_xlat3;
  u_xlat8 = (vec4<f32>(x_2111.y, x_2111.z, x_2111.z, x_2111.x) * vec4<f32>(x_2113.x, x_2113.y, x_2113.z, x_2113.z));
  let x_2118 : vec4<f32> = x_145.unity_SHBr;
  let x_2119 : vec4<f32> = u_xlat8;
  u_xlat9.x = dot(x_2118, x_2119);
  let x_2124 : vec4<f32> = x_145.unity_SHBg;
  let x_2125 : vec4<f32> = u_xlat8;
  u_xlat9.y = dot(x_2124, x_2125);
  let x_2129 : vec4<f32> = x_145.unity_SHBb;
  let x_2130 : vec4<f32> = u_xlat8;
  u_xlat9.z = dot(x_2129, x_2130);
  let x_2134 : f32 = u_xlat3.y;
  let x_2136 : f32 = u_xlat3.y;
  u_xlat46 = (x_2134 * x_2136);
  let x_2139 : f32 = u_xlat3.x;
  let x_2141 : f32 = u_xlat3.x;
  let x_2143 : f32 = u_xlat46;
  u_xlat46 = ((x_2139 * x_2141) + -(x_2143));
  let x_2148 : vec4<f32> = x_145.unity_SHC;
  let x_2150 : f32 = u_xlat46;
  let x_2153 : vec4<f32> = u_xlat9;
  u_xlat27 = ((vec3<f32>(x_2148.x, x_2148.y, x_2148.z) * vec3<f32>(x_2150, x_2150, x_2150)) + vec3<f32>(x_2153.x, x_2153.y, x_2153.z));
  let x_2156 : vec3<f32> = u_xlat27;
  let x_2157 : vec4<f32> = u_xlat7;
  u_xlat27 = (x_2156 + vec3<f32>(x_2157.x, x_2157.y, x_2157.z));
  let x_2160 : vec3<f32> = u_xlat27;
  u_xlat27 = max(x_2160, vec3<f32>(0.0f, 0.0f, 0.0f));
  let x_2163 : vec4<f32> = x_90.x_ScaledScreenParams;
  let x_2164 : vec2<f32> = vec2<f32>(x_2163.x, x_2163.y);
  let x_2168 : vec2<f32> = (vec2<f32>(1.0f, 1.0f) / vec2<f32>(x_2164.x, x_2164.y));
  let x_2169 : vec4<f32> = u_xlat7;
  u_xlat7 = vec4<f32>(x_2168.x, x_2168.y, x_2169.z, x_2169.w);
  let x_2171 : vec4<f32> = u_xlat7;
  let x_2173 : vec4<f32> = hlslcc_FragCoord;
  let x_2175 : vec2<f32> = (vec2<f32>(x_2171.x, x_2171.y) * vec2<f32>(x_2173.x, x_2173.y));
  let x_2176 : vec4<f32> = u_xlat7;
  u_xlat7 = vec4<f32>(x_2175.x, x_2175.y, x_2176.z, x_2176.w);
  let x_2179 : f32 = u_xlat7.y;
  let x_2182 : f32 = x_90.x_ScaleBiasRt.x;
  let x_2185 : f32 = x_90.x_ScaleBiasRt.y;
  u_xlat46 = ((x_2179 * x_2182) + x_2185);
  let x_2187 : f32 = u_xlat46;
  u_xlat7.z = (-(x_2187) + 1.0f);
  let x_2192 : f32 = u_xlat5.x;
  u_xlat5.x = x_2192;
  let x_2195 : f32 = u_xlat5.x;
  u_xlat5.x = clamp(x_2195, 0.0f, 1.0f);
  let x_2198 : f32 = u_xlat67;
  u_xlat67 = x_2198;
  let x_2199 : f32 = u_xlat67;
  u_xlat67 = clamp(x_2199, 0.0f, 1.0f);
  let x_2201 : vec3<f32> = u_xlat4;
  u_xlat4 = (x_2201 * vec3<f32>(0.959999979f, 0.959999979f, 0.959999979f));
  let x_2206 : f32 = u_xlat5.x;
  u_xlat46 = (-(x_2206) + 1.0f);
  let x_2210 : f32 = u_xlat46;
  let x_2211 : f32 = u_xlat46;
  u_xlat69 = (x_2210 * x_2211);
  let x_2213 : f32 = u_xlat69;
  u_xlat69 = max(x_2213, 0.0078125f);
  let x_2216 : f32 = u_xlat69;
  let x_2217 : f32 = u_xlat69;
  u_xlat72 = (x_2216 * x_2217);
  let x_2220 : f32 = u_xlat5.x;
  u_xlat5.x = (x_2220 + 0.040000021f);
  let x_2225 : f32 = u_xlat5.x;
  u_xlat5.x = min(x_2225, 1.0f);
  let x_2229 : f32 = u_xlat69;
  u_xlat29 = ((x_2229 * 4.0f) + 2.0f);
  let x_2237 : vec4<f32> = u_xlat7;
  let x_2240 : f32 = x_90.x_GlobalMipBias.x;
  let x_2241 : vec4<f32> = textureSampleBias(x_ScreenSpaceOcclusionTexture, sampler_ScreenSpaceOcclusionTexture, vec2<f32>(x_2237.x, x_2237.z), x_2240);
  u_xlat7.x = x_2241.x;
  let x_2245 : f32 = u_xlat7.x;
  u_xlat51.x = (x_2245 + -1.0f);
  let x_2249 : f32 = x_90.x_AmbientOcclusionParam.w;
  let x_2251 : f32 = u_xlat51.x;
  u_xlat51.x = ((x_2249 * x_2251) + 1.0f);
  let x_2256 : f32 = u_xlat7.x;
  let x_2258 : f32 = vs_INTERP4.w;
  u_xlat7.x = min(x_2256, x_2258);
  let x_2261 : bool = u_xlatb66;
  if (x_2261) {
    let x_2265 : f32 = x_255.x_MainLightShadowParams.y;
    u_xlatb66 = (x_2265 == 1.0f);
    let x_2267 : bool = u_xlatb66;
    if (x_2267) {
      let x_2270 : vec4<f32> = u_xlat6;
      let x_2273 : vec4<f32> = x_255.x_MainLightShadowOffset0;
      u_xlat8 = (vec4<f32>(x_2270.x, x_2270.y, x_2270.x, x_2270.y) + x_2273);
      let x_2276 : vec4<f32> = u_xlat8;
      let x_2277 : vec2<f32> = vec2<f32>(x_2276.x, x_2276.y);
      let x_2279 : f32 = u_xlat6.z;
      txVec30 = vec3<f32>(x_2277.x, x_2277.y, x_2279);
      let x_2286 : vec3<f32> = txVec30;
      let x_2288 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2286.xy, x_2286.z);
      u_xlat9.x = x_2288;
      let x_2291 : vec4<f32> = u_xlat8;
      let x_2292 : vec2<f32> = vec2<f32>(x_2291.z, x_2291.w);
      let x_2294 : f32 = u_xlat6.z;
      txVec31 = vec3<f32>(x_2292.x, x_2292.y, x_2294);
      let x_2301 : vec3<f32> = txVec31;
      let x_2303 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2301.xy, x_2301.z);
      u_xlat9.y = x_2303;
      let x_2305 : vec4<f32> = u_xlat6;
      let x_2308 : vec4<f32> = x_255.x_MainLightShadowOffset1;
      u_xlat8 = (vec4<f32>(x_2305.x, x_2305.y, x_2305.x, x_2305.y) + x_2308);
      let x_2311 : vec4<f32> = u_xlat8;
      let x_2312 : vec2<f32> = vec2<f32>(x_2311.x, x_2311.y);
      let x_2314 : f32 = u_xlat6.z;
      txVec32 = vec3<f32>(x_2312.x, x_2312.y, x_2314);
      let x_2321 : vec3<f32> = txVec32;
      let x_2323 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2321.xy, x_2321.z);
      u_xlat9.z = x_2323;
      let x_2326 : vec4<f32> = u_xlat8;
      let x_2327 : vec2<f32> = vec2<f32>(x_2326.z, x_2326.w);
      let x_2329 : f32 = u_xlat6.z;
      txVec33 = vec3<f32>(x_2327.x, x_2327.y, x_2329);
      let x_2336 : vec3<f32> = txVec33;
      let x_2338 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2336.xy, x_2336.z);
      u_xlat9.w = x_2338;
      let x_2340 : vec4<f32> = u_xlat9;
      u_xlat66 = dot(x_2340, vec4<f32>(0.25f, 0.25f, 0.25f, 0.25f));
    } else {
      let x_2345 : f32 = x_255.x_MainLightShadowParams.y;
      u_xlatb73 = (x_2345 == 2.0f);
      let x_2347 : bool = u_xlatb73;
      if (x_2347) {
        let x_2350 : vec4<f32> = u_xlat6;
        let x_2353 : vec4<f32> = x_255.x_MainLightShadowmapSize;
        let x_2356 : vec2<f32> = ((vec2<f32>(x_2350.x, x_2350.y) * vec2<f32>(x_2353.z, x_2353.w)) + vec2<f32>(0.5f, 0.5f));
        let x_2357 : vec4<f32> = u_xlat8;
        u_xlat8 = vec4<f32>(x_2356.x, x_2356.y, x_2357.z, x_2357.w);
        let x_2359 : vec4<f32> = u_xlat8;
        let x_2361 : vec2<f32> = floor(vec2<f32>(x_2359.x, x_2359.y));
        let x_2362 : vec4<f32> = u_xlat8;
        u_xlat8 = vec4<f32>(x_2361.x, x_2361.y, x_2362.z, x_2362.w);
        let x_2365 : vec4<f32> = u_xlat6;
        let x_2368 : vec4<f32> = x_255.x_MainLightShadowmapSize;
        let x_2371 : vec4<f32> = u_xlat8;
        u_xlat52 = ((vec2<f32>(x_2365.x, x_2365.y) * vec2<f32>(x_2368.z, x_2368.w)) + -(vec2<f32>(x_2371.x, x_2371.y)));
        let x_2375 : vec2<f32> = u_xlat52;
        u_xlat9 = (vec4<f32>(x_2375.x, x_2375.x, x_2375.y, x_2375.y) + vec4<f32>(0.5f, 1.0f, 0.5f, 1.0f));
        let x_2378 : vec4<f32> = u_xlat9;
        let x_2380 : vec4<f32> = u_xlat9;
        u_xlat10 = (vec4<f32>(x_2378.x, x_2378.x, x_2378.z, x_2378.z) * vec4<f32>(x_2380.x, x_2380.x, x_2380.z, x_2380.z));
        let x_2383 : vec4<f32> = u_xlat10;
        let x_2385 : vec2<f32> = (vec2<f32>(x_2383.y, x_2383.w) * vec2<f32>(0.079999998f, 0.079999998f));
        let x_2386 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_2385.x, x_2386.y, x_2385.y, x_2386.w);
        let x_2388 : vec4<f32> = u_xlat10;
        let x_2391 : vec2<f32> = u_xlat52;
        let x_2393 : vec2<f32> = ((vec2<f32>(x_2388.x, x_2388.z) * vec2<f32>(0.5f, 0.5f)) + -(x_2391));
        let x_2394 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_2393.x, x_2393.y, x_2394.z, x_2394.w);
        let x_2396 : vec2<f32> = u_xlat52;
        u_xlat54 = (-(x_2396) + vec2<f32>(1.0f, 1.0f));
        let x_2399 : vec2<f32> = u_xlat52;
        let x_2400 : vec2<f32> = min(x_2399, vec2<f32>(0.0f, 0.0f));
        let x_2401 : vec4<f32> = u_xlat11;
        u_xlat11 = vec4<f32>(x_2400.x, x_2400.y, x_2401.z, x_2401.w);
        let x_2403 : vec4<f32> = u_xlat11;
        let x_2406 : vec4<f32> = u_xlat11;
        let x_2409 : vec2<f32> = u_xlat54;
        let x_2410 : vec2<f32> = ((-(vec2<f32>(x_2403.x, x_2403.y)) * vec2<f32>(x_2406.x, x_2406.y)) + x_2409);
        let x_2411 : vec4<f32> = u_xlat11;
        u_xlat11 = vec4<f32>(x_2410.x, x_2410.y, x_2411.z, x_2411.w);
        let x_2413 : vec2<f32> = u_xlat52;
        u_xlat52 = max(x_2413, vec2<f32>(0.0f, 0.0f));
        let x_2415 : vec2<f32> = u_xlat52;
        let x_2417 : vec2<f32> = u_xlat52;
        let x_2419 : vec4<f32> = u_xlat9;
        u_xlat52 = ((-(x_2415) * x_2417) + vec2<f32>(x_2419.y, x_2419.w));
        let x_2422 : vec4<f32> = u_xlat11;
        let x_2424 : vec2<f32> = (vec2<f32>(x_2422.x, x_2422.y) + vec2<f32>(1.0f, 1.0f));
        let x_2425 : vec4<f32> = u_xlat11;
        u_xlat11 = vec4<f32>(x_2424.x, x_2424.y, x_2425.z, x_2425.w);
        let x_2427 : vec2<f32> = u_xlat52;
        u_xlat52 = (x_2427 + vec2<f32>(1.0f, 1.0f));
        let x_2429 : vec4<f32> = u_xlat10;
        let x_2431 : vec2<f32> = (vec2<f32>(x_2429.x, x_2429.y) * vec2<f32>(0.159999996f, 0.159999996f));
        let x_2432 : vec4<f32> = u_xlat12;
        u_xlat12 = vec4<f32>(x_2431.x, x_2431.y, x_2432.z, x_2432.w);
        let x_2434 : vec2<f32> = u_xlat54;
        let x_2435 : vec2<f32> = (x_2434 * vec2<f32>(0.159999996f, 0.159999996f));
        let x_2436 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_2435.x, x_2435.y, x_2436.z, x_2436.w);
        let x_2438 : vec4<f32> = u_xlat11;
        let x_2440 : vec2<f32> = (vec2<f32>(x_2438.x, x_2438.y) * vec2<f32>(0.159999996f, 0.159999996f));
        let x_2441 : vec4<f32> = u_xlat11;
        u_xlat11 = vec4<f32>(x_2440.x, x_2440.y, x_2441.z, x_2441.w);
        let x_2443 : vec2<f32> = u_xlat52;
        let x_2444 : vec2<f32> = (x_2443 * vec2<f32>(0.159999996f, 0.159999996f));
        let x_2445 : vec4<f32> = u_xlat13;
        u_xlat13 = vec4<f32>(x_2444.x, x_2444.y, x_2445.z, x_2445.w);
        let x_2447 : vec4<f32> = u_xlat9;
        u_xlat52 = (vec2<f32>(x_2447.y, x_2447.w) * vec2<f32>(0.159999996f, 0.159999996f));
        let x_2451 : f32 = u_xlat11.x;
        u_xlat12.z = x_2451;
        let x_2454 : f32 = u_xlat52.x;
        u_xlat12.w = x_2454;
        let x_2457 : f32 = u_xlat13.x;
        u_xlat10.z = x_2457;
        let x_2460 : f32 = u_xlat9.x;
        u_xlat10.w = x_2460;
        let x_2462 : vec4<f32> = u_xlat10;
        let x_2464 : vec4<f32> = u_xlat12;
        u_xlat14 = (vec4<f32>(x_2462.z, x_2462.w, x_2462.x, x_2462.z) + vec4<f32>(x_2464.z, x_2464.w, x_2464.x, x_2464.z));
        let x_2468 : f32 = u_xlat12.y;
        u_xlat11.z = x_2468;
        let x_2471 : f32 = u_xlat52.y;
        u_xlat11.w = x_2471;
        let x_2474 : f32 = u_xlat10.y;
        u_xlat13.z = x_2474;
        let x_2477 : f32 = u_xlat9.z;
        u_xlat13.w = x_2477;
        let x_2479 : vec4<f32> = u_xlat11;
        let x_2481 : vec4<f32> = u_xlat13;
        let x_2483 : vec3<f32> = (vec3<f32>(x_2479.z, x_2479.y, x_2479.w) + vec3<f32>(x_2481.z, x_2481.y, x_2481.w));
        let x_2484 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_2483.x, x_2483.y, x_2483.z, x_2484.w);
        let x_2486 : vec4<f32> = u_xlat10;
        let x_2488 : vec4<f32> = u_xlat14;
        let x_2490 : vec3<f32> = (vec3<f32>(x_2486.x, x_2486.z, x_2486.w) / vec3<f32>(x_2488.z, x_2488.w, x_2488.y));
        let x_2491 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_2490.x, x_2490.y, x_2490.z, x_2491.w);
        let x_2493 : vec4<f32> = u_xlat10;
        let x_2495 : vec3<f32> = (vec3<f32>(x_2493.x, x_2493.y, x_2493.z) + vec3<f32>(-2.5f, -0.5f, 1.5f));
        let x_2496 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_2495.x, x_2495.y, x_2495.z, x_2496.w);
        let x_2498 : vec4<f32> = u_xlat13;
        let x_2500 : vec4<f32> = u_xlat9;
        let x_2502 : vec3<f32> = (vec3<f32>(x_2498.z, x_2498.y, x_2498.w) / vec3<f32>(x_2500.x, x_2500.y, x_2500.z));
        let x_2503 : vec4<f32> = u_xlat11;
        u_xlat11 = vec4<f32>(x_2502.x, x_2502.y, x_2502.z, x_2503.w);
        let x_2505 : vec4<f32> = u_xlat11;
        let x_2507 : vec3<f32> = (vec3<f32>(x_2505.x, x_2505.y, x_2505.z) + vec3<f32>(-2.5f, -0.5f, 1.5f));
        let x_2508 : vec4<f32> = u_xlat11;
        u_xlat11 = vec4<f32>(x_2507.x, x_2507.y, x_2507.z, x_2508.w);
        let x_2510 : vec4<f32> = u_xlat10;
        let x_2513 : vec4<f32> = x_255.x_MainLightShadowmapSize;
        let x_2515 : vec3<f32> = (vec3<f32>(x_2510.y, x_2510.x, x_2510.z) * vec3<f32>(x_2513.x, x_2513.x, x_2513.x));
        let x_2516 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_2515.x, x_2515.y, x_2515.z, x_2516.w);
        let x_2518 : vec4<f32> = u_xlat11;
        let x_2521 : vec4<f32> = x_255.x_MainLightShadowmapSize;
        let x_2523 : vec3<f32> = (vec3<f32>(x_2518.x, x_2518.y, x_2518.z) * vec3<f32>(x_2521.y, x_2521.y, x_2521.y));
        let x_2524 : vec4<f32> = u_xlat11;
        u_xlat11 = vec4<f32>(x_2523.x, x_2523.y, x_2523.z, x_2524.w);
        let x_2527 : f32 = u_xlat11.x;
        u_xlat10.w = x_2527;
        let x_2529 : vec4<f32> = u_xlat8;
        let x_2532 : vec4<f32> = x_255.x_MainLightShadowmapSize;
        let x_2535 : vec4<f32> = u_xlat10;
        u_xlat12 = ((vec4<f32>(x_2529.x, x_2529.y, x_2529.x, x_2529.y) * vec4<f32>(x_2532.x, x_2532.y, x_2532.x, x_2532.y)) + vec4<f32>(x_2535.y, x_2535.w, x_2535.x, x_2535.w));
        let x_2538 : vec4<f32> = u_xlat8;
        let x_2541 : vec4<f32> = x_255.x_MainLightShadowmapSize;
        let x_2544 : vec4<f32> = u_xlat10;
        u_xlat52 = ((vec2<f32>(x_2538.x, x_2538.y) * vec2<f32>(x_2541.x, x_2541.y)) + vec2<f32>(x_2544.z, x_2544.w));
        let x_2548 : f32 = u_xlat10.y;
        u_xlat11.w = x_2548;
        let x_2550 : vec4<f32> = u_xlat11;
        let x_2551 : vec2<f32> = vec2<f32>(x_2550.y, x_2550.z);
        let x_2552 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_2552.x, x_2551.x, x_2552.z, x_2551.y);
        let x_2554 : vec4<f32> = u_xlat8;
        let x_2557 : vec4<f32> = x_255.x_MainLightShadowmapSize;
        let x_2560 : vec4<f32> = u_xlat10;
        u_xlat13 = ((vec4<f32>(x_2554.x, x_2554.y, x_2554.x, x_2554.y) * vec4<f32>(x_2557.x, x_2557.y, x_2557.x, x_2557.y)) + vec4<f32>(x_2560.x, x_2560.y, x_2560.z, x_2560.y));
        let x_2563 : vec4<f32> = u_xlat8;
        let x_2566 : vec4<f32> = x_255.x_MainLightShadowmapSize;
        let x_2569 : vec4<f32> = u_xlat11;
        u_xlat11 = ((vec4<f32>(x_2563.x, x_2563.y, x_2563.x, x_2563.y) * vec4<f32>(x_2566.x, x_2566.y, x_2566.x, x_2566.y)) + vec4<f32>(x_2569.w, x_2569.y, x_2569.w, x_2569.z));
        let x_2572 : vec4<f32> = u_xlat8;
        let x_2575 : vec4<f32> = x_255.x_MainLightShadowmapSize;
        let x_2578 : vec4<f32> = u_xlat10;
        u_xlat10 = ((vec4<f32>(x_2572.x, x_2572.y, x_2572.x, x_2572.y) * vec4<f32>(x_2575.x, x_2575.y, x_2575.x, x_2575.y)) + vec4<f32>(x_2578.x, x_2578.w, x_2578.z, x_2578.w));
        let x_2581 : vec4<f32> = u_xlat9;
        let x_2583 : vec4<f32> = u_xlat14;
        u_xlat15 = (vec4<f32>(x_2581.x, x_2581.x, x_2581.x, x_2581.y) * vec4<f32>(x_2583.z, x_2583.w, x_2583.y, x_2583.z));
        let x_2586 : vec4<f32> = u_xlat9;
        let x_2588 : vec4<f32> = u_xlat14;
        u_xlat16 = (vec4<f32>(x_2586.y, x_2586.y, x_2586.z, x_2586.z) * x_2588);
        let x_2592 : f32 = u_xlat9.z;
        let x_2594 : f32 = u_xlat14.y;
        u_xlat73 = (x_2592 * x_2594);
        let x_2597 : vec4<f32> = u_xlat12;
        let x_2598 : vec2<f32> = vec2<f32>(x_2597.x, x_2597.y);
        let x_2600 : f32 = u_xlat6.z;
        txVec34 = vec3<f32>(x_2598.x, x_2598.y, x_2600);
        let x_2607 : vec3<f32> = txVec34;
        let x_2609 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2607.xy, x_2607.z);
        u_xlat8.x = x_2609;
        let x_2612 : vec4<f32> = u_xlat12;
        let x_2613 : vec2<f32> = vec2<f32>(x_2612.z, x_2612.w);
        let x_2615 : f32 = u_xlat6.z;
        txVec35 = vec3<f32>(x_2613.x, x_2613.y, x_2615);
        let x_2622 : vec3<f32> = txVec35;
        let x_2624 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2622.xy, x_2622.z);
        u_xlat30.x = x_2624;
        let x_2627 : f32 = u_xlat30.x;
        let x_2629 : f32 = u_xlat15.y;
        u_xlat30.x = (x_2627 * x_2629);
        let x_2633 : f32 = u_xlat15.x;
        let x_2635 : f32 = u_xlat8.x;
        let x_2638 : f32 = u_xlat30.x;
        u_xlat8.x = ((x_2633 * x_2635) + x_2638);
        let x_2642 : vec2<f32> = u_xlat52;
        let x_2644 : f32 = u_xlat6.z;
        txVec36 = vec3<f32>(x_2642.x, x_2642.y, x_2644);
        let x_2651 : vec3<f32> = txVec36;
        let x_2653 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2651.xy, x_2651.z);
        u_xlat30.x = x_2653;
        let x_2656 : f32 = u_xlat15.z;
        let x_2658 : f32 = u_xlat30.x;
        let x_2661 : f32 = u_xlat8.x;
        u_xlat8.x = ((x_2656 * x_2658) + x_2661);
        let x_2665 : vec4<f32> = u_xlat11;
        let x_2666 : vec2<f32> = vec2<f32>(x_2665.x, x_2665.y);
        let x_2668 : f32 = u_xlat6.z;
        txVec37 = vec3<f32>(x_2666.x, x_2666.y, x_2668);
        let x_2675 : vec3<f32> = txVec37;
        let x_2677 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2675.xy, x_2675.z);
        u_xlat30.x = x_2677;
        let x_2680 : f32 = u_xlat15.w;
        let x_2682 : f32 = u_xlat30.x;
        let x_2685 : f32 = u_xlat8.x;
        u_xlat8.x = ((x_2680 * x_2682) + x_2685);
        let x_2689 : vec4<f32> = u_xlat13;
        let x_2690 : vec2<f32> = vec2<f32>(x_2689.x, x_2689.y);
        let x_2692 : f32 = u_xlat6.z;
        txVec38 = vec3<f32>(x_2690.x, x_2690.y, x_2692);
        let x_2699 : vec3<f32> = txVec38;
        let x_2701 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2699.xy, x_2699.z);
        u_xlat30.x = x_2701;
        let x_2704 : f32 = u_xlat16.x;
        let x_2706 : f32 = u_xlat30.x;
        let x_2709 : f32 = u_xlat8.x;
        u_xlat8.x = ((x_2704 * x_2706) + x_2709);
        let x_2713 : vec4<f32> = u_xlat13;
        let x_2714 : vec2<f32> = vec2<f32>(x_2713.z, x_2713.w);
        let x_2716 : f32 = u_xlat6.z;
        txVec39 = vec3<f32>(x_2714.x, x_2714.y, x_2716);
        let x_2723 : vec3<f32> = txVec39;
        let x_2725 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2723.xy, x_2723.z);
        u_xlat30.x = x_2725;
        let x_2728 : f32 = u_xlat16.y;
        let x_2730 : f32 = u_xlat30.x;
        let x_2733 : f32 = u_xlat8.x;
        u_xlat8.x = ((x_2728 * x_2730) + x_2733);
        let x_2737 : vec4<f32> = u_xlat11;
        let x_2738 : vec2<f32> = vec2<f32>(x_2737.z, x_2737.w);
        let x_2740 : f32 = u_xlat6.z;
        txVec40 = vec3<f32>(x_2738.x, x_2738.y, x_2740);
        let x_2747 : vec3<f32> = txVec40;
        let x_2749 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2747.xy, x_2747.z);
        u_xlat30.x = x_2749;
        let x_2752 : f32 = u_xlat16.z;
        let x_2754 : f32 = u_xlat30.x;
        let x_2757 : f32 = u_xlat8.x;
        u_xlat8.x = ((x_2752 * x_2754) + x_2757);
        let x_2761 : vec4<f32> = u_xlat10;
        let x_2762 : vec2<f32> = vec2<f32>(x_2761.x, x_2761.y);
        let x_2764 : f32 = u_xlat6.z;
        txVec41 = vec3<f32>(x_2762.x, x_2762.y, x_2764);
        let x_2771 : vec3<f32> = txVec41;
        let x_2773 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2771.xy, x_2771.z);
        u_xlat30.x = x_2773;
        let x_2776 : f32 = u_xlat16.w;
        let x_2778 : f32 = u_xlat30.x;
        let x_2781 : f32 = u_xlat8.x;
        u_xlat8.x = ((x_2776 * x_2778) + x_2781);
        let x_2785 : vec4<f32> = u_xlat10;
        let x_2786 : vec2<f32> = vec2<f32>(x_2785.z, x_2785.w);
        let x_2788 : f32 = u_xlat6.z;
        txVec42 = vec3<f32>(x_2786.x, x_2786.y, x_2788);
        let x_2795 : vec3<f32> = txVec42;
        let x_2797 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2795.xy, x_2795.z);
        u_xlat30.x = x_2797;
        let x_2799 : f32 = u_xlat73;
        let x_2801 : f32 = u_xlat30.x;
        let x_2804 : f32 = u_xlat8.x;
        u_xlat66 = ((x_2799 * x_2801) + x_2804);
      } else {
        let x_2807 : vec4<f32> = u_xlat6;
        let x_2810 : vec4<f32> = x_255.x_MainLightShadowmapSize;
        let x_2813 : vec2<f32> = ((vec2<f32>(x_2807.x, x_2807.y) * vec2<f32>(x_2810.z, x_2810.w)) + vec2<f32>(0.5f, 0.5f));
        let x_2814 : vec4<f32> = u_xlat8;
        u_xlat8 = vec4<f32>(x_2813.x, x_2813.y, x_2814.z, x_2814.w);
        let x_2816 : vec4<f32> = u_xlat8;
        let x_2818 : vec2<f32> = floor(vec2<f32>(x_2816.x, x_2816.y));
        let x_2819 : vec4<f32> = u_xlat8;
        u_xlat8 = vec4<f32>(x_2818.x, x_2818.y, x_2819.z, x_2819.w);
        let x_2821 : vec4<f32> = u_xlat6;
        let x_2824 : vec4<f32> = x_255.x_MainLightShadowmapSize;
        let x_2827 : vec4<f32> = u_xlat8;
        u_xlat52 = ((vec2<f32>(x_2821.x, x_2821.y) * vec2<f32>(x_2824.z, x_2824.w)) + -(vec2<f32>(x_2827.x, x_2827.y)));
        let x_2831 : vec2<f32> = u_xlat52;
        u_xlat9 = (vec4<f32>(x_2831.x, x_2831.x, x_2831.y, x_2831.y) + vec4<f32>(0.5f, 1.0f, 0.5f, 1.0f));
        let x_2834 : vec4<f32> = u_xlat9;
        let x_2836 : vec4<f32> = u_xlat9;
        u_xlat10 = (vec4<f32>(x_2834.x, x_2834.x, x_2834.z, x_2834.z) * vec4<f32>(x_2836.x, x_2836.x, x_2836.z, x_2836.z));
        let x_2839 : vec4<f32> = u_xlat10;
        let x_2841 : vec2<f32> = (vec2<f32>(x_2839.y, x_2839.w) * vec2<f32>(0.040816002f, 0.040816002f));
        let x_2842 : vec4<f32> = u_xlat11;
        u_xlat11 = vec4<f32>(x_2842.x, x_2841.x, x_2842.z, x_2841.y);
        let x_2844 : vec4<f32> = u_xlat10;
        let x_2847 : vec2<f32> = u_xlat52;
        let x_2849 : vec2<f32> = ((vec2<f32>(x_2844.x, x_2844.z) * vec2<f32>(0.5f, 0.5f)) + -(x_2847));
        let x_2850 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_2849.x, x_2850.y, x_2849.y, x_2850.w);
        let x_2852 : vec2<f32> = u_xlat52;
        let x_2854 : vec2<f32> = (-(x_2852) + vec2<f32>(1.0f, 1.0f));
        let x_2855 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_2854.x, x_2854.y, x_2855.z, x_2855.w);
        let x_2857 : vec2<f32> = u_xlat52;
        u_xlat54 = min(x_2857, vec2<f32>(0.0f, 0.0f));
        let x_2859 : vec2<f32> = u_xlat54;
        let x_2861 : vec2<f32> = u_xlat54;
        let x_2863 : vec4<f32> = u_xlat10;
        let x_2865 : vec2<f32> = ((-(x_2859) * x_2861) + vec2<f32>(x_2863.x, x_2863.y));
        let x_2866 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_2865.x, x_2865.y, x_2866.z, x_2866.w);
        let x_2868 : vec2<f32> = u_xlat52;
        u_xlat54 = max(x_2868, vec2<f32>(0.0f, 0.0f));
        let x_2870 : vec2<f32> = u_xlat54;
        let x_2872 : vec2<f32> = u_xlat54;
        let x_2874 : vec4<f32> = u_xlat9;
        let x_2876 : vec2<f32> = ((-(x_2870) * x_2872) + vec2<f32>(x_2874.y, x_2874.w));
        let x_2877 : vec3<f32> = u_xlat31;
        u_xlat31 = vec3<f32>(x_2876.x, x_2877.y, x_2876.y);
        let x_2879 : vec4<f32> = u_xlat10;
        let x_2881 : vec2<f32> = (vec2<f32>(x_2879.x, x_2879.y) + vec2<f32>(2.0f, 2.0f));
        let x_2882 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_2881.x, x_2881.y, x_2882.z, x_2882.w);
        let x_2884 : vec3<f32> = u_xlat31;
        let x_2886 : vec2<f32> = (vec2<f32>(x_2884.x, x_2884.z) + vec2<f32>(2.0f, 2.0f));
        let x_2887 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_2887.x, x_2886.x, x_2887.z, x_2886.y);
        let x_2890 : f32 = u_xlat9.y;
        u_xlat12.z = (x_2890 * 0.081632003f);
        let x_2893 : vec4<f32> = u_xlat9;
        let x_2895 : vec3<f32> = (vec3<f32>(x_2893.z, x_2893.x, x_2893.w) * vec3<f32>(0.081632003f, 0.081632003f, 0.081632003f));
        let x_2896 : vec4<f32> = u_xlat13;
        u_xlat13 = vec4<f32>(x_2895.x, x_2895.y, x_2895.z, x_2896.w);
        let x_2898 : vec4<f32> = u_xlat10;
        let x_2900 : vec2<f32> = (vec2<f32>(x_2898.x, x_2898.y) * vec2<f32>(0.081632003f, 0.081632003f));
        let x_2901 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_2900.x, x_2900.y, x_2901.z, x_2901.w);
        let x_2904 : f32 = u_xlat13.y;
        u_xlat12.x = x_2904;
        let x_2906 : vec2<f32> = u_xlat52;
        let x_2909 : vec2<f32> = ((vec2<f32>(x_2906.x, x_2906.x) * vec2<f32>(-0.081632003f, 0.081632003f)) + vec2<f32>(0.163264006f, 0.081632003f));
        let x_2910 : vec4<f32> = u_xlat12;
        u_xlat12 = vec4<f32>(x_2910.x, x_2909.x, x_2910.z, x_2909.y);
        let x_2912 : vec2<f32> = u_xlat52;
        let x_2915 : vec2<f32> = ((vec2<f32>(x_2912.x, x_2912.x) * vec2<f32>(-0.081632003f, 0.081632003f)) + vec2<f32>(0.081632003f, 0.163264006f));
        let x_2916 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_2915.x, x_2916.y, x_2915.y, x_2916.w);
        let x_2919 : f32 = u_xlat9.x;
        u_xlat10.y = x_2919;
        let x_2922 : f32 = u_xlat11.y;
        u_xlat10.w = x_2922;
        let x_2924 : vec4<f32> = u_xlat10;
        let x_2925 : vec4<f32> = u_xlat12;
        u_xlat12 = (x_2924 + x_2925);
        let x_2927 : vec2<f32> = u_xlat52;
        let x_2930 : vec2<f32> = ((vec2<f32>(x_2927.y, x_2927.y) * vec2<f32>(-0.081632003f, 0.081632003f)) + vec2<f32>(0.163264006f, 0.081632003f));
        let x_2931 : vec4<f32> = u_xlat13;
        u_xlat13 = vec4<f32>(x_2931.x, x_2930.x, x_2931.z, x_2930.y);
        let x_2933 : vec2<f32> = u_xlat52;
        let x_2936 : vec2<f32> = ((vec2<f32>(x_2933.y, x_2933.y) * vec2<f32>(-0.081632003f, 0.081632003f)) + vec2<f32>(0.081632003f, 0.163264006f));
        let x_2937 : vec4<f32> = u_xlat11;
        u_xlat11 = vec4<f32>(x_2936.x, x_2937.y, x_2936.y, x_2937.w);
        let x_2940 : f32 = u_xlat9.y;
        u_xlat11.y = x_2940;
        let x_2942 : vec4<f32> = u_xlat11;
        let x_2943 : vec4<f32> = u_xlat13;
        u_xlat9 = (x_2942 + x_2943);
        let x_2945 : vec4<f32> = u_xlat10;
        let x_2946 : vec4<f32> = u_xlat12;
        u_xlat10 = (x_2945 / x_2946);
        let x_2948 : vec4<f32> = u_xlat10;
        u_xlat10 = (x_2948 + vec4<f32>(-3.5f, -1.5f, 0.5f, 2.5f));
        let x_2950 : vec4<f32> = u_xlat11;
        let x_2951 : vec4<f32> = u_xlat9;
        u_xlat11 = (x_2950 / x_2951);
        let x_2953 : vec4<f32> = u_xlat11;
        u_xlat11 = (x_2953 + vec4<f32>(-3.5f, -1.5f, 0.5f, 2.5f));
        let x_2955 : vec4<f32> = u_xlat10;
        let x_2958 : vec4<f32> = x_255.x_MainLightShadowmapSize;
        u_xlat10 = (vec4<f32>(x_2955.w, x_2955.x, x_2955.y, x_2955.z) * vec4<f32>(x_2958.x, x_2958.x, x_2958.x, x_2958.x));
        let x_2961 : vec4<f32> = u_xlat11;
        let x_2964 : vec4<f32> = x_255.x_MainLightShadowmapSize;
        u_xlat11 = (vec4<f32>(x_2961.x, x_2961.w, x_2961.y, x_2961.z) * vec4<f32>(x_2964.y, x_2964.y, x_2964.y, x_2964.y));
        let x_2967 : vec4<f32> = u_xlat10;
        let x_2968 : vec3<f32> = vec3<f32>(x_2967.y, x_2967.z, x_2967.w);
        let x_2969 : vec4<f32> = u_xlat13;
        u_xlat13 = vec4<f32>(x_2968.x, x_2969.y, x_2968.y, x_2968.z);
        let x_2972 : f32 = u_xlat11.x;
        u_xlat13.y = x_2972;
        let x_2974 : vec4<f32> = u_xlat8;
        let x_2977 : vec4<f32> = x_255.x_MainLightShadowmapSize;
        let x_2980 : vec4<f32> = u_xlat13;
        u_xlat14 = ((vec4<f32>(x_2974.x, x_2974.y, x_2974.x, x_2974.y) * vec4<f32>(x_2977.x, x_2977.y, x_2977.x, x_2977.y)) + vec4<f32>(x_2980.x, x_2980.y, x_2980.z, x_2980.y));
        let x_2983 : vec4<f32> = u_xlat8;
        let x_2986 : vec4<f32> = x_255.x_MainLightShadowmapSize;
        let x_2989 : vec4<f32> = u_xlat13;
        u_xlat52 = ((vec2<f32>(x_2983.x, x_2983.y) * vec2<f32>(x_2986.x, x_2986.y)) + vec2<f32>(x_2989.w, x_2989.y));
        let x_2993 : f32 = u_xlat13.y;
        u_xlat10.y = x_2993;
        let x_2996 : f32 = u_xlat11.z;
        u_xlat13.y = x_2996;
        let x_2998 : vec4<f32> = u_xlat8;
        let x_3001 : vec4<f32> = x_255.x_MainLightShadowmapSize;
        let x_3004 : vec4<f32> = u_xlat13;
        u_xlat15 = ((vec4<f32>(x_2998.x, x_2998.y, x_2998.x, x_2998.y) * vec4<f32>(x_3001.x, x_3001.y, x_3001.x, x_3001.y)) + vec4<f32>(x_3004.x, x_3004.y, x_3004.z, x_3004.y));
        let x_3007 : vec4<f32> = u_xlat8;
        let x_3010 : vec4<f32> = x_255.x_MainLightShadowmapSize;
        let x_3013 : vec4<f32> = u_xlat13;
        let x_3015 : vec2<f32> = ((vec2<f32>(x_3007.x, x_3007.y) * vec2<f32>(x_3010.x, x_3010.y)) + vec2<f32>(x_3013.w, x_3013.y));
        let x_3016 : vec4<f32> = u_xlat16;
        u_xlat16 = vec4<f32>(x_3015.x, x_3015.y, x_3016.z, x_3016.w);
        let x_3019 : f32 = u_xlat13.y;
        u_xlat10.z = x_3019;
        let x_3021 : vec4<f32> = u_xlat8;
        let x_3024 : vec4<f32> = x_255.x_MainLightShadowmapSize;
        let x_3027 : vec4<f32> = u_xlat10;
        u_xlat17 = ((vec4<f32>(x_3021.x, x_3021.y, x_3021.x, x_3021.y) * vec4<f32>(x_3024.x, x_3024.y, x_3024.x, x_3024.y)) + vec4<f32>(x_3027.x, x_3027.y, x_3027.x, x_3027.z));
        let x_3031 : f32 = u_xlat11.w;
        u_xlat13.y = x_3031;
        let x_3033 : vec4<f32> = u_xlat8;
        let x_3036 : vec4<f32> = x_255.x_MainLightShadowmapSize;
        let x_3039 : vec4<f32> = u_xlat13;
        u_xlat18 = ((vec4<f32>(x_3033.x, x_3033.y, x_3033.x, x_3033.y) * vec4<f32>(x_3036.x, x_3036.y, x_3036.x, x_3036.y)) + vec4<f32>(x_3039.x, x_3039.y, x_3039.z, x_3039.y));
        let x_3043 : vec4<f32> = u_xlat8;
        let x_3046 : vec4<f32> = x_255.x_MainLightShadowmapSize;
        let x_3049 : vec4<f32> = u_xlat13;
        u_xlat32 = ((vec2<f32>(x_3043.x, x_3043.y) * vec2<f32>(x_3046.x, x_3046.y)) + vec2<f32>(x_3049.w, x_3049.y));
        let x_3053 : f32 = u_xlat13.y;
        u_xlat10.w = x_3053;
        let x_3056 : vec4<f32> = u_xlat8;
        let x_3059 : vec4<f32> = x_255.x_MainLightShadowmapSize;
        let x_3062 : vec4<f32> = u_xlat10;
        u_xlat60 = ((vec2<f32>(x_3056.x, x_3056.y) * vec2<f32>(x_3059.x, x_3059.y)) + vec2<f32>(x_3062.x, x_3062.w));
        let x_3065 : vec4<f32> = u_xlat13;
        let x_3066 : vec3<f32> = vec3<f32>(x_3065.x, x_3065.z, x_3065.w);
        let x_3067 : vec4<f32> = u_xlat11;
        u_xlat11 = vec4<f32>(x_3066.x, x_3067.y, x_3066.y, x_3066.z);
        let x_3069 : vec4<f32> = u_xlat8;
        let x_3072 : vec4<f32> = x_255.x_MainLightShadowmapSize;
        let x_3075 : vec4<f32> = u_xlat11;
        u_xlat13 = ((vec4<f32>(x_3069.x, x_3069.y, x_3069.x, x_3069.y) * vec4<f32>(x_3072.x, x_3072.y, x_3072.x, x_3072.y)) + vec4<f32>(x_3075.x, x_3075.y, x_3075.z, x_3075.y));
        let x_3079 : vec4<f32> = u_xlat8;
        let x_3082 : vec4<f32> = x_255.x_MainLightShadowmapSize;
        let x_3085 : vec4<f32> = u_xlat11;
        u_xlat55 = ((vec2<f32>(x_3079.x, x_3079.y) * vec2<f32>(x_3082.x, x_3082.y)) + vec2<f32>(x_3085.w, x_3085.y));
        let x_3089 : f32 = u_xlat10.x;
        u_xlat11.x = x_3089;
        let x_3091 : vec4<f32> = u_xlat8;
        let x_3094 : vec4<f32> = x_255.x_MainLightShadowmapSize;
        let x_3097 : vec4<f32> = u_xlat11;
        let x_3099 : vec2<f32> = ((vec2<f32>(x_3091.x, x_3091.y) * vec2<f32>(x_3094.x, x_3094.y)) + vec2<f32>(x_3097.x, x_3097.y));
        let x_3100 : vec4<f32> = u_xlat8;
        u_xlat8 = vec4<f32>(x_3099.x, x_3099.y, x_3100.z, x_3100.w);
        let x_3102 : vec4<f32> = u_xlat9;
        let x_3104 : vec4<f32> = u_xlat12;
        u_xlat19 = (vec4<f32>(x_3102.x, x_3102.x, x_3102.x, x_3102.x) * x_3104);
        let x_3106 : vec4<f32> = u_xlat9;
        let x_3108 : vec4<f32> = u_xlat12;
        u_xlat20 = (vec4<f32>(x_3106.y, x_3106.y, x_3106.y, x_3106.y) * x_3108);
        let x_3111 : vec4<f32> = u_xlat9;
        let x_3113 : vec4<f32> = u_xlat12;
        u_xlat21 = (vec4<f32>(x_3111.z, x_3111.z, x_3111.z, x_3111.z) * x_3113);
        let x_3115 : vec4<f32> = u_xlat9;
        let x_3117 : vec4<f32> = u_xlat12;
        u_xlat9 = (vec4<f32>(x_3115.w, x_3115.w, x_3115.w, x_3115.w) * x_3117);
        let x_3120 : vec4<f32> = u_xlat14;
        let x_3121 : vec2<f32> = vec2<f32>(x_3120.x, x_3120.y);
        let x_3123 : f32 = u_xlat6.z;
        txVec43 = vec3<f32>(x_3121.x, x_3121.y, x_3123);
        let x_3130 : vec3<f32> = txVec43;
        let x_3132 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_3130.xy, x_3130.z);
        u_xlat73 = x_3132;
        let x_3134 : vec4<f32> = u_xlat14;
        let x_3135 : vec2<f32> = vec2<f32>(x_3134.z, x_3134.w);
        let x_3137 : f32 = u_xlat6.z;
        txVec44 = vec3<f32>(x_3135.x, x_3135.y, x_3137);
        let x_3144 : vec3<f32> = txVec44;
        let x_3146 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_3144.xy, x_3144.z);
        u_xlat10.x = x_3146;
        let x_3149 : f32 = u_xlat10.x;
        let x_3151 : f32 = u_xlat19.y;
        u_xlat10.x = (x_3149 * x_3151);
        let x_3155 : f32 = u_xlat19.x;
        let x_3156 : f32 = u_xlat73;
        let x_3159 : f32 = u_xlat10.x;
        u_xlat73 = ((x_3155 * x_3156) + x_3159);
        let x_3162 : vec2<f32> = u_xlat52;
        let x_3164 : f32 = u_xlat6.z;
        txVec45 = vec3<f32>(x_3162.x, x_3162.y, x_3164);
        let x_3171 : vec3<f32> = txVec45;
        let x_3173 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_3171.xy, x_3171.z);
        u_xlat52.x = x_3173;
        let x_3176 : f32 = u_xlat19.z;
        let x_3178 : f32 = u_xlat52.x;
        let x_3180 : f32 = u_xlat73;
        u_xlat73 = ((x_3176 * x_3178) + x_3180);
        let x_3183 : vec4<f32> = u_xlat17;
        let x_3184 : vec2<f32> = vec2<f32>(x_3183.x, x_3183.y);
        let x_3186 : f32 = u_xlat6.z;
        txVec46 = vec3<f32>(x_3184.x, x_3184.y, x_3186);
        let x_3193 : vec3<f32> = txVec46;
        let x_3195 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_3193.xy, x_3193.z);
        u_xlat52.x = x_3195;
        let x_3198 : f32 = u_xlat19.w;
        let x_3200 : f32 = u_xlat52.x;
        let x_3202 : f32 = u_xlat73;
        u_xlat73 = ((x_3198 * x_3200) + x_3202);
        let x_3205 : vec4<f32> = u_xlat15;
        let x_3206 : vec2<f32> = vec2<f32>(x_3205.x, x_3205.y);
        let x_3208 : f32 = u_xlat6.z;
        txVec47 = vec3<f32>(x_3206.x, x_3206.y, x_3208);
        let x_3215 : vec3<f32> = txVec47;
        let x_3217 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_3215.xy, x_3215.z);
        u_xlat52.x = x_3217;
        let x_3220 : f32 = u_xlat20.x;
        let x_3222 : f32 = u_xlat52.x;
        let x_3224 : f32 = u_xlat73;
        u_xlat73 = ((x_3220 * x_3222) + x_3224);
        let x_3227 : vec4<f32> = u_xlat15;
        let x_3228 : vec2<f32> = vec2<f32>(x_3227.z, x_3227.w);
        let x_3230 : f32 = u_xlat6.z;
        txVec48 = vec3<f32>(x_3228.x, x_3228.y, x_3230);
        let x_3237 : vec3<f32> = txVec48;
        let x_3239 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_3237.xy, x_3237.z);
        u_xlat52.x = x_3239;
        let x_3242 : f32 = u_xlat20.y;
        let x_3244 : f32 = u_xlat52.x;
        let x_3246 : f32 = u_xlat73;
        u_xlat73 = ((x_3242 * x_3244) + x_3246);
        let x_3249 : vec4<f32> = u_xlat16;
        let x_3250 : vec2<f32> = vec2<f32>(x_3249.x, x_3249.y);
        let x_3252 : f32 = u_xlat6.z;
        txVec49 = vec3<f32>(x_3250.x, x_3250.y, x_3252);
        let x_3259 : vec3<f32> = txVec49;
        let x_3261 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_3259.xy, x_3259.z);
        u_xlat52.x = x_3261;
        let x_3264 : f32 = u_xlat20.z;
        let x_3266 : f32 = u_xlat52.x;
        let x_3268 : f32 = u_xlat73;
        u_xlat73 = ((x_3264 * x_3266) + x_3268);
        let x_3271 : vec4<f32> = u_xlat17;
        let x_3272 : vec2<f32> = vec2<f32>(x_3271.z, x_3271.w);
        let x_3274 : f32 = u_xlat6.z;
        txVec50 = vec3<f32>(x_3272.x, x_3272.y, x_3274);
        let x_3281 : vec3<f32> = txVec50;
        let x_3283 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_3281.xy, x_3281.z);
        u_xlat52.x = x_3283;
        let x_3286 : f32 = u_xlat20.w;
        let x_3288 : f32 = u_xlat52.x;
        let x_3290 : f32 = u_xlat73;
        u_xlat73 = ((x_3286 * x_3288) + x_3290);
        let x_3293 : vec4<f32> = u_xlat18;
        let x_3294 : vec2<f32> = vec2<f32>(x_3293.x, x_3293.y);
        let x_3296 : f32 = u_xlat6.z;
        txVec51 = vec3<f32>(x_3294.x, x_3294.y, x_3296);
        let x_3303 : vec3<f32> = txVec51;
        let x_3305 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_3303.xy, x_3303.z);
        u_xlat52.x = x_3305;
        let x_3308 : f32 = u_xlat21.x;
        let x_3310 : f32 = u_xlat52.x;
        let x_3312 : f32 = u_xlat73;
        u_xlat73 = ((x_3308 * x_3310) + x_3312);
        let x_3315 : vec4<f32> = u_xlat18;
        let x_3316 : vec2<f32> = vec2<f32>(x_3315.z, x_3315.w);
        let x_3318 : f32 = u_xlat6.z;
        txVec52 = vec3<f32>(x_3316.x, x_3316.y, x_3318);
        let x_3325 : vec3<f32> = txVec52;
        let x_3327 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_3325.xy, x_3325.z);
        u_xlat52.x = x_3327;
        let x_3330 : f32 = u_xlat21.y;
        let x_3332 : f32 = u_xlat52.x;
        let x_3334 : f32 = u_xlat73;
        u_xlat73 = ((x_3330 * x_3332) + x_3334);
        let x_3337 : vec2<f32> = u_xlat32;
        let x_3339 : f32 = u_xlat6.z;
        txVec53 = vec3<f32>(x_3337.x, x_3337.y, x_3339);
        let x_3346 : vec3<f32> = txVec53;
        let x_3348 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_3346.xy, x_3346.z);
        u_xlat52.x = x_3348;
        let x_3351 : f32 = u_xlat21.z;
        let x_3353 : f32 = u_xlat52.x;
        let x_3355 : f32 = u_xlat73;
        u_xlat73 = ((x_3351 * x_3353) + x_3355);
        let x_3358 : vec2<f32> = u_xlat60;
        let x_3360 : f32 = u_xlat6.z;
        txVec54 = vec3<f32>(x_3358.x, x_3358.y, x_3360);
        let x_3367 : vec3<f32> = txVec54;
        let x_3369 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_3367.xy, x_3367.z);
        u_xlat52.x = x_3369;
        let x_3372 : f32 = u_xlat21.w;
        let x_3374 : f32 = u_xlat52.x;
        let x_3376 : f32 = u_xlat73;
        u_xlat73 = ((x_3372 * x_3374) + x_3376);
        let x_3379 : vec4<f32> = u_xlat13;
        let x_3380 : vec2<f32> = vec2<f32>(x_3379.x, x_3379.y);
        let x_3382 : f32 = u_xlat6.z;
        txVec55 = vec3<f32>(x_3380.x, x_3380.y, x_3382);
        let x_3389 : vec3<f32> = txVec55;
        let x_3391 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_3389.xy, x_3389.z);
        u_xlat52.x = x_3391;
        let x_3394 : f32 = u_xlat9.x;
        let x_3396 : f32 = u_xlat52.x;
        let x_3398 : f32 = u_xlat73;
        u_xlat73 = ((x_3394 * x_3396) + x_3398);
        let x_3401 : vec4<f32> = u_xlat13;
        let x_3402 : vec2<f32> = vec2<f32>(x_3401.z, x_3401.w);
        let x_3404 : f32 = u_xlat6.z;
        txVec56 = vec3<f32>(x_3402.x, x_3402.y, x_3404);
        let x_3411 : vec3<f32> = txVec56;
        let x_3413 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_3411.xy, x_3411.z);
        u_xlat52.x = x_3413;
        let x_3416 : f32 = u_xlat9.y;
        let x_3418 : f32 = u_xlat52.x;
        let x_3420 : f32 = u_xlat73;
        u_xlat73 = ((x_3416 * x_3418) + x_3420);
        let x_3423 : vec2<f32> = u_xlat55;
        let x_3425 : f32 = u_xlat6.z;
        txVec57 = vec3<f32>(x_3423.x, x_3423.y, x_3425);
        let x_3432 : vec3<f32> = txVec57;
        let x_3434 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_3432.xy, x_3432.z);
        u_xlat52.x = x_3434;
        let x_3437 : f32 = u_xlat9.z;
        let x_3439 : f32 = u_xlat52.x;
        let x_3441 : f32 = u_xlat73;
        u_xlat73 = ((x_3437 * x_3439) + x_3441);
        let x_3444 : vec4<f32> = u_xlat8;
        let x_3445 : vec2<f32> = vec2<f32>(x_3444.x, x_3444.y);
        let x_3447 : f32 = u_xlat6.z;
        txVec58 = vec3<f32>(x_3445.x, x_3445.y, x_3447);
        let x_3454 : vec3<f32> = txVec58;
        let x_3456 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_3454.xy, x_3454.z);
        u_xlat8.x = x_3456;
        let x_3459 : f32 = u_xlat9.w;
        let x_3461 : f32 = u_xlat8.x;
        let x_3463 : f32 = u_xlat73;
        u_xlat66 = ((x_3459 * x_3461) + x_3463);
      }
    }
  } else {
    let x_3467 : vec4<f32> = u_xlat6;
    let x_3468 : vec2<f32> = vec2<f32>(x_3467.x, x_3467.y);
    let x_3470 : f32 = u_xlat6.z;
    txVec59 = vec3<f32>(x_3468.x, x_3468.y, x_3470);
    let x_3477 : vec3<f32> = txVec59;
    let x_3479 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_3477.xy, x_3477.z);
    u_xlat66 = x_3479;
  }
  let x_3480 : f32 = u_xlat66;
  let x_3482 : f32 = x_255.x_MainLightShadowParams.x;
  let x_3484 : f32 = u_xlat68;
  u_xlat66 = ((x_3480 * x_3482) + x_3484);
  let x_3486 : bool = u_xlatb70;
  let x_3487 : f32 = u_xlat66;
  u_xlat66 = select(x_3487, 1.0f, x_3486);
  let x_3489 : vec3<f32> = vs_INTERP0;
  let x_3491 : vec3<f32> = x_90.x_WorldSpaceCameraPos;
  let x_3493 : vec3<f32> = (x_3489 + -(x_3491));
  let x_3494 : vec4<f32> = u_xlat6;
  u_xlat6 = vec4<f32>(x_3493.x, x_3493.y, x_3493.z, x_3494.w);
  let x_3496 : vec4<f32> = u_xlat6;
  let x_3498 : vec4<f32> = u_xlat6;
  u_xlat68 = dot(vec3<f32>(x_3496.x, x_3496.y, x_3496.z), vec3<f32>(x_3498.x, x_3498.y, x_3498.z));
  let x_3501 : f32 = u_xlat68;
  let x_3503 : f32 = x_255.x_MainLightShadowParams.z;
  let x_3506 : f32 = x_255.x_MainLightShadowParams.w;
  u_xlat68 = ((x_3501 * x_3503) + x_3506);
  let x_3508 : f32 = u_xlat68;
  u_xlat68 = clamp(x_3508, 0.0f, 1.0f);
  let x_3510 : f32 = u_xlat66;
  u_xlat70 = (-(x_3510) + 1.0f);
  let x_3513 : f32 = u_xlat68;
  let x_3514 : f32 = u_xlat70;
  let x_3516 : f32 = u_xlat66;
  u_xlat66 = ((x_3513 * x_3514) + x_3516);
  let x_3518 : vec2<f32> = u_xlat51;
  let x_3521 : vec4<f32> = x_90.x_MainLightColor;
  let x_3523 : vec3<f32> = (vec3<f32>(x_3518.x, x_3518.x, x_3518.x) * vec3<f32>(x_3521.x, x_3521.y, x_3521.z));
  let x_3524 : vec4<f32> = u_xlat6;
  u_xlat6 = vec4<f32>(x_3523.x, x_3523.y, x_3523.z, x_3524.w);
  let x_3526 : vec3<f32> = u_xlat1;
  let x_3528 : vec4<f32> = u_xlat3;
  u_xlat68 = dot(-(x_3526), vec3<f32>(x_3528.x, x_3528.y, x_3528.z));
  let x_3531 : f32 = u_xlat68;
  let x_3532 : f32 = u_xlat68;
  u_xlat68 = (x_3531 + x_3532);
  let x_3534 : vec4<f32> = u_xlat3;
  let x_3536 : f32 = u_xlat68;
  let x_3540 : vec3<f32> = u_xlat1;
  let x_3542 : vec3<f32> = ((vec3<f32>(x_3534.x, x_3534.y, x_3534.z) * -(vec3<f32>(x_3536, x_3536, x_3536))) + -(x_3540));
  let x_3543 : vec4<f32> = u_xlat8;
  u_xlat8 = vec4<f32>(x_3542.x, x_3542.y, x_3542.z, x_3543.w);
  let x_3545 : vec4<f32> = u_xlat3;
  let x_3547 : vec3<f32> = u_xlat1;
  u_xlat68 = dot(vec3<f32>(x_3545.x, x_3545.y, x_3545.z), x_3547);
  let x_3549 : f32 = u_xlat68;
  u_xlat68 = clamp(x_3549, 0.0f, 1.0f);
  let x_3551 : f32 = u_xlat68;
  u_xlat68 = (-(x_3551) + 1.0f);
  let x_3554 : f32 = u_xlat68;
  let x_3555 : f32 = u_xlat68;
  u_xlat68 = (x_3554 * x_3555);
  let x_3557 : f32 = u_xlat68;
  let x_3558 : f32 = u_xlat68;
  u_xlat68 = (x_3557 * x_3558);
  let x_3560 : f32 = u_xlat46;
  u_xlat70 = ((-(x_3560) * 0.699999988f) + 1.700000048f);
  let x_3566 : f32 = u_xlat46;
  let x_3567 : f32 = u_xlat70;
  u_xlat46 = (x_3566 * x_3567);
  let x_3569 : f32 = u_xlat46;
  u_xlat46 = (x_3569 * 6.0f);
  let x_3580 : vec4<f32> = u_xlat8;
  let x_3582 : f32 = u_xlat46;
  let x_3583 : vec4<f32> = textureSampleLevel(unity_SpecCube0, samplerunity_SpecCube0, vec3<f32>(x_3580.x, x_3580.y, x_3580.z), x_3582);
  u_xlat8 = x_3583;
  let x_3585 : f32 = u_xlat8.w;
  u_xlat46 = (x_3585 + -1.0f);
  let x_3588 : f32 = x_145.unity_SpecCube0_HDR.w;
  let x_3589 : f32 = u_xlat46;
  u_xlat46 = ((x_3588 * x_3589) + 1.0f);
  let x_3592 : f32 = u_xlat46;
  u_xlat46 = max(x_3592, 0.0f);
  let x_3594 : f32 = u_xlat46;
  u_xlat46 = log2(x_3594);
  let x_3596 : f32 = u_xlat46;
  let x_3598 : f32 = x_145.unity_SpecCube0_HDR.y;
  u_xlat46 = (x_3596 * x_3598);
  let x_3600 : f32 = u_xlat46;
  u_xlat46 = exp2(x_3600);
  let x_3602 : f32 = u_xlat46;
  let x_3604 : f32 = x_145.unity_SpecCube0_HDR.x;
  u_xlat46 = (x_3602 * x_3604);
  let x_3606 : vec4<f32> = u_xlat8;
  let x_3608 : f32 = u_xlat46;
  let x_3610 : vec3<f32> = (vec3<f32>(x_3606.x, x_3606.y, x_3606.z) * vec3<f32>(x_3608, x_3608, x_3608));
  let x_3611 : vec4<f32> = u_xlat8;
  u_xlat8 = vec4<f32>(x_3610.x, x_3610.y, x_3610.z, x_3611.w);
  let x_3613 : f32 = u_xlat69;
  let x_3615 : f32 = u_xlat69;
  let x_3619 : vec2<f32> = ((vec2<f32>(x_3613, x_3613) * vec2<f32>(x_3615, x_3615)) + vec2<f32>(-1.0f, 1.0f));
  let x_3620 : vec4<f32> = u_xlat9;
  u_xlat9 = vec4<f32>(x_3619.x, x_3619.y, x_3620.z, x_3620.w);
  let x_3623 : f32 = u_xlat9.y;
  u_xlat46 = (1.0f / x_3623);
  let x_3626 : f32 = u_xlat5.x;
  u_xlat69 = (x_3626 + -0.039999999f);
  let x_3629 : f32 = u_xlat68;
  let x_3630 : f32 = u_xlat69;
  u_xlat68 = ((x_3629 * x_3630) + 0.039999999f);
  let x_3634 : f32 = u_xlat68;
  let x_3635 : f32 = u_xlat46;
  u_xlat46 = (x_3634 * x_3635);
  let x_3637 : f32 = u_xlat46;
  let x_3639 : vec4<f32> = u_xlat8;
  let x_3641 : vec3<f32> = (vec3<f32>(x_3637, x_3637, x_3637) * vec3<f32>(x_3639.x, x_3639.y, x_3639.z));
  let x_3642 : vec4<f32> = u_xlat8;
  u_xlat8 = vec4<f32>(x_3641.x, x_3641.y, x_3641.z, x_3642.w);
  let x_3644 : vec3<f32> = u_xlat27;
  let x_3645 : vec3<f32> = u_xlat4;
  let x_3647 : vec4<f32> = u_xlat8;
  let x_3649 : vec3<f32> = ((x_3644 * x_3645) + vec3<f32>(x_3647.x, x_3647.y, x_3647.z));
  let x_3650 : vec4<f32> = u_xlat5;
  u_xlat5 = vec4<f32>(x_3649.x, x_3649.y, x_3649.z, x_3650.w);
  let x_3652 : f32 = u_xlat66;
  let x_3654 : f32 = x_145.unity_LightData.z;
  u_xlat66 = (x_3652 * x_3654);
  let x_3656 : vec4<f32> = u_xlat3;
  let x_3659 : vec4<f32> = x_90.x_MainLightPosition;
  u_xlat46 = dot(vec3<f32>(x_3656.x, x_3656.y, x_3656.z), vec3<f32>(x_3659.x, x_3659.y, x_3659.z));
  let x_3662 : f32 = u_xlat46;
  u_xlat46 = clamp(x_3662, 0.0f, 1.0f);
  let x_3664 : f32 = u_xlat66;
  let x_3665 : f32 = u_xlat46;
  u_xlat66 = (x_3664 * x_3665);
  let x_3667 : f32 = u_xlat66;
  let x_3669 : vec4<f32> = u_xlat6;
  let x_3671 : vec3<f32> = (vec3<f32>(x_3667, x_3667, x_3667) * vec3<f32>(x_3669.x, x_3669.y, x_3669.z));
  let x_3672 : vec4<f32> = u_xlat6;
  u_xlat6 = vec4<f32>(x_3671.x, x_3671.y, x_3671.z, x_3672.w);
  let x_3674 : vec3<f32> = u_xlat1;
  let x_3676 : vec4<f32> = x_90.x_MainLightPosition;
  let x_3678 : vec3<f32> = (x_3674 + vec3<f32>(x_3676.x, x_3676.y, x_3676.z));
  let x_3679 : vec4<f32> = u_xlat8;
  u_xlat8 = vec4<f32>(x_3678.x, x_3678.y, x_3678.z, x_3679.w);
  let x_3681 : vec4<f32> = u_xlat8;
  let x_3683 : vec4<f32> = u_xlat8;
  u_xlat66 = dot(vec3<f32>(x_3681.x, x_3681.y, x_3681.z), vec3<f32>(x_3683.x, x_3683.y, x_3683.z));
  let x_3686 : f32 = u_xlat66;
  u_xlat66 = max(x_3686, 1.17549435e-37f);
  let x_3689 : f32 = u_xlat66;
  u_xlat66 = inverseSqrt(x_3689);
  let x_3691 : f32 = u_xlat66;
  let x_3693 : vec4<f32> = u_xlat8;
  let x_3695 : vec3<f32> = (vec3<f32>(x_3691, x_3691, x_3691) * vec3<f32>(x_3693.x, x_3693.y, x_3693.z));
  let x_3696 : vec4<f32> = u_xlat8;
  u_xlat8 = vec4<f32>(x_3695.x, x_3695.y, x_3695.z, x_3696.w);
  let x_3698 : vec4<f32> = u_xlat3;
  let x_3700 : vec4<f32> = u_xlat8;
  u_xlat66 = dot(vec3<f32>(x_3698.x, x_3698.y, x_3698.z), vec3<f32>(x_3700.x, x_3700.y, x_3700.z));
  let x_3703 : f32 = u_xlat66;
  u_xlat66 = clamp(x_3703, 0.0f, 1.0f);
  let x_3706 : vec4<f32> = x_90.x_MainLightPosition;
  let x_3708 : vec4<f32> = u_xlat8;
  u_xlat46 = dot(vec3<f32>(x_3706.x, x_3706.y, x_3706.z), vec3<f32>(x_3708.x, x_3708.y, x_3708.z));
  let x_3711 : f32 = u_xlat46;
  u_xlat46 = clamp(x_3711, 0.0f, 1.0f);
  let x_3713 : f32 = u_xlat66;
  let x_3714 : f32 = u_xlat66;
  u_xlat66 = (x_3713 * x_3714);
  let x_3716 : f32 = u_xlat66;
  let x_3718 : f32 = u_xlat9.x;
  u_xlat66 = ((x_3716 * x_3718) + 1.000010014f);
  let x_3722 : f32 = u_xlat46;
  let x_3723 : f32 = u_xlat46;
  u_xlat46 = (x_3722 * x_3723);
  let x_3725 : f32 = u_xlat66;
  let x_3726 : f32 = u_xlat66;
  u_xlat66 = (x_3725 * x_3726);
  let x_3728 : f32 = u_xlat46;
  u_xlat46 = max(x_3728, 0.100000001f);
  let x_3731 : f32 = u_xlat66;
  let x_3732 : f32 = u_xlat46;
  u_xlat66 = (x_3731 * x_3732);
  let x_3734 : f32 = u_xlat29;
  let x_3735 : f32 = u_xlat66;
  u_xlat66 = (x_3734 * x_3735);
  let x_3737 : f32 = u_xlat72;
  let x_3738 : f32 = u_xlat66;
  u_xlat66 = (x_3737 / x_3738);
  let x_3740 : f32 = u_xlat66;
  let x_3744 : vec3<f32> = u_xlat4;
  let x_3745 : vec3<f32> = ((vec3<f32>(x_3740, x_3740, x_3740) * vec3<f32>(0.039999999f, 0.039999999f, 0.039999999f)) + x_3744);
  let x_3746 : vec4<f32> = u_xlat8;
  u_xlat8 = vec4<f32>(x_3745.x, x_3745.y, x_3745.z, x_3746.w);
  let x_3748 : vec4<f32> = u_xlat6;
  let x_3750 : vec4<f32> = u_xlat8;
  let x_3752 : vec3<f32> = (vec3<f32>(x_3748.x, x_3748.y, x_3748.z) * vec3<f32>(x_3750.x, x_3750.y, x_3750.z));
  let x_3753 : vec4<f32> = u_xlat6;
  u_xlat6 = vec4<f32>(x_3752.x, x_3752.y, x_3752.z, x_3753.w);
  let x_3756 : f32 = x_90.x_AdditionalLightsCount.x;
  let x_3758 : f32 = x_145.unity_LightData.y;
  u_xlat66 = min(x_3756, x_3758);
  let x_3760 : f32 = u_xlat66;
  u_xlatu66 = bitcast<u32>(i32(x_3760));
  u_xlat8.x = 0.0f;
  u_xlat8.y = 0.0f;
  u_xlat8.z = 0.0f;
  u_xlatu_loop_1 = 0u;
  loop {
    let x_3772 : u32 = u_xlatu_loop_1;
    let x_3773 : u32 = u_xlatu66;
    if ((x_3772 < x_3773)) {
    } else {
      break;
    }
    let x_3776 : u32 = u_xlatu_loop_1;
    u_xlatu68 = (x_3776 >> 2u);
    let x_3779 : u32 = u_xlatu_loop_1;
    u_xlati69 = bitcast<i32>((x_3779 & 3u));
    let x_3782 : u32 = u_xlatu68;
    let x_3785 : vec4<f32> = x_145.unity_LightIndices[bitcast<i32>(x_3782)];
    let x_3795 : i32 = u_xlati69;
    indexable = array<vec4<u32>, 4u>(vec4<u32>(1065353216u, 0u, 0u, 0u), vec4<u32>(0u, 1065353216u, 0u, 0u), vec4<u32>(0u, 0u, 1065353216u, 0u), vec4<u32>(0u, 0u, 0u, 1065353216u));
    let x_3800 : vec4<u32> = indexable[x_3795];
    u_xlat68 = dot(x_3785, bitcast<vec4<f32>>(x_3800));
    let x_3804 : f32 = u_xlat68;
    u_xlati68 = i32(x_3804);
    let x_3806 : vec3<f32> = vs_INTERP0;
    let x_3818 : i32 = u_xlati68;
    let x_3820 : vec4<f32> = x_3817.x_AdditionalLightsPosition[x_3818];
    let x_3823 : i32 = u_xlati68;
    let x_3825 : vec4<f32> = x_3817.x_AdditionalLightsPosition[x_3823];
    u_xlat31 = ((-(x_3806) * vec3<f32>(x_3820.w, x_3820.w, x_3820.w)) + vec3<f32>(x_3825.x, x_3825.y, x_3825.z));
    let x_3828 : vec3<f32> = u_xlat31;
    let x_3829 : vec3<f32> = u_xlat31;
    u_xlat69 = dot(x_3828, x_3829);
    let x_3831 : f32 = u_xlat69;
    u_xlat69 = max(x_3831, 6.10351562e-05f);
    let x_3834 : f32 = u_xlat69;
    u_xlat70 = inverseSqrt(x_3834);
    let x_3836 : f32 = u_xlat70;
    let x_3838 : vec3<f32> = u_xlat31;
    let x_3839 : vec3<f32> = (vec3<f32>(x_3836, x_3836, x_3836) * x_3838);
    let x_3840 : vec4<f32> = u_xlat10;
    u_xlat10 = vec4<f32>(x_3839.x, x_3839.y, x_3839.z, x_3840.w);
    let x_3843 : f32 = u_xlat69;
    u_xlat71 = (1.0f / x_3843);
    let x_3845 : f32 = u_xlat69;
    let x_3846 : i32 = u_xlati68;
    let x_3848 : f32 = x_3817.x_AdditionalLightsAttenuation[x_3846].x;
    u_xlat69 = (x_3845 * x_3848);
    let x_3850 : f32 = u_xlat69;
    let x_3852 : f32 = u_xlat69;
    u_xlat69 = ((-(x_3850) * x_3852) + 1.0f);
    let x_3855 : f32 = u_xlat69;
    u_xlat69 = max(x_3855, 0.0f);
    let x_3857 : f32 = u_xlat69;
    let x_3858 : f32 = u_xlat69;
    u_xlat69 = (x_3857 * x_3858);
    let x_3860 : f32 = u_xlat69;
    let x_3861 : f32 = u_xlat71;
    u_xlat69 = (x_3860 * x_3861);
    let x_3863 : i32 = u_xlati68;
    let x_3865 : vec4<f32> = x_3817.x_AdditionalLightsSpotDir[x_3863];
    let x_3867 : vec4<f32> = u_xlat10;
    u_xlat71 = dot(vec3<f32>(x_3865.x, x_3865.y, x_3865.z), vec3<f32>(x_3867.x, x_3867.y, x_3867.z));
    let x_3870 : f32 = u_xlat71;
    let x_3871 : i32 = u_xlati68;
    let x_3873 : f32 = x_3817.x_AdditionalLightsAttenuation[x_3871].z;
    let x_3875 : i32 = u_xlati68;
    let x_3877 : f32 = x_3817.x_AdditionalLightsAttenuation[x_3875].w;
    u_xlat71 = ((x_3870 * x_3873) + x_3877);
    let x_3879 : f32 = u_xlat71;
    u_xlat71 = clamp(x_3879, 0.0f, 1.0f);
    let x_3881 : f32 = u_xlat71;
    let x_3882 : f32 = u_xlat71;
    u_xlat71 = (x_3881 * x_3882);
    let x_3884 : f32 = u_xlat69;
    let x_3885 : f32 = u_xlat71;
    u_xlat69 = (x_3884 * x_3885);
    let x_3887 : vec2<f32> = u_xlat51;
    let x_3889 : i32 = u_xlati68;
    let x_3891 : vec4<f32> = x_3817.x_AdditionalLightsColor[x_3889];
    let x_3893 : vec3<f32> = (vec3<f32>(x_3887.x, x_3887.x, x_3887.x) * vec3<f32>(x_3891.x, x_3891.y, x_3891.z));
    let x_3894 : vec4<f32> = u_xlat11;
    u_xlat11 = vec4<f32>(x_3893.x, x_3893.y, x_3893.z, x_3894.w);
    let x_3896 : vec4<f32> = u_xlat3;
    let x_3898 : vec4<f32> = u_xlat10;
    u_xlat68 = dot(vec3<f32>(x_3896.x, x_3896.y, x_3896.z), vec3<f32>(x_3898.x, x_3898.y, x_3898.z));
    let x_3901 : f32 = u_xlat68;
    u_xlat68 = clamp(x_3901, 0.0f, 1.0f);
    let x_3903 : f32 = u_xlat68;
    let x_3904 : f32 = u_xlat69;
    u_xlat68 = (x_3903 * x_3904);
    let x_3906 : f32 = u_xlat68;
    let x_3908 : vec4<f32> = u_xlat11;
    let x_3910 : vec3<f32> = (vec3<f32>(x_3906, x_3906, x_3906) * vec3<f32>(x_3908.x, x_3908.y, x_3908.z));
    let x_3911 : vec4<f32> = u_xlat11;
    u_xlat11 = vec4<f32>(x_3910.x, x_3910.y, x_3910.z, x_3911.w);
    let x_3913 : vec3<f32> = u_xlat31;
    let x_3914 : f32 = u_xlat70;
    let x_3917 : vec3<f32> = u_xlat1;
    u_xlat31 = ((x_3913 * vec3<f32>(x_3914, x_3914, x_3914)) + x_3917);
    let x_3919 : vec3<f32> = u_xlat31;
    let x_3920 : vec3<f32> = u_xlat31;
    u_xlat68 = dot(x_3919, x_3920);
    let x_3922 : f32 = u_xlat68;
    u_xlat68 = max(x_3922, 1.17549435e-37f);
    let x_3924 : f32 = u_xlat68;
    u_xlat68 = inverseSqrt(x_3924);
    let x_3926 : f32 = u_xlat68;
    let x_3928 : vec3<f32> = u_xlat31;
    u_xlat31 = (vec3<f32>(x_3926, x_3926, x_3926) * x_3928);
    let x_3930 : vec4<f32> = u_xlat3;
    let x_3932 : vec3<f32> = u_xlat31;
    u_xlat68 = dot(vec3<f32>(x_3930.x, x_3930.y, x_3930.z), x_3932);
    let x_3934 : f32 = u_xlat68;
    u_xlat68 = clamp(x_3934, 0.0f, 1.0f);
    let x_3936 : vec4<f32> = u_xlat10;
    let x_3938 : vec3<f32> = u_xlat31;
    u_xlat69 = dot(vec3<f32>(x_3936.x, x_3936.y, x_3936.z), x_3938);
    let x_3940 : f32 = u_xlat69;
    u_xlat69 = clamp(x_3940, 0.0f, 1.0f);
    let x_3942 : f32 = u_xlat68;
    let x_3943 : f32 = u_xlat68;
    u_xlat68 = (x_3942 * x_3943);
    let x_3945 : f32 = u_xlat68;
    let x_3947 : f32 = u_xlat9.x;
    u_xlat68 = ((x_3945 * x_3947) + 1.000010014f);
    let x_3950 : f32 = u_xlat69;
    let x_3951 : f32 = u_xlat69;
    u_xlat69 = (x_3950 * x_3951);
    let x_3953 : f32 = u_xlat68;
    let x_3954 : f32 = u_xlat68;
    u_xlat68 = (x_3953 * x_3954);
    let x_3956 : f32 = u_xlat69;
    u_xlat69 = max(x_3956, 0.100000001f);
    let x_3958 : f32 = u_xlat68;
    let x_3959 : f32 = u_xlat69;
    u_xlat68 = (x_3958 * x_3959);
    let x_3961 : f32 = u_xlat29;
    let x_3962 : f32 = u_xlat68;
    u_xlat68 = (x_3961 * x_3962);
    let x_3964 : f32 = u_xlat72;
    let x_3965 : f32 = u_xlat68;
    u_xlat68 = (x_3964 / x_3965);
    let x_3967 : f32 = u_xlat68;
    let x_3970 : vec3<f32> = u_xlat4;
    u_xlat31 = ((vec3<f32>(x_3967, x_3967, x_3967) * vec3<f32>(0.039999999f, 0.039999999f, 0.039999999f)) + x_3970);
    let x_3972 : vec3<f32> = u_xlat31;
    let x_3973 : vec4<f32> = u_xlat11;
    let x_3976 : vec4<f32> = u_xlat8;
    let x_3978 : vec3<f32> = ((x_3972 * vec3<f32>(x_3973.x, x_3973.y, x_3973.z)) + vec3<f32>(x_3976.x, x_3976.y, x_3976.z));
    let x_3979 : vec4<f32> = u_xlat8;
    u_xlat8 = vec4<f32>(x_3978.x, x_3978.y, x_3978.z, x_3979.w);

    continuing {
      let x_3981 : u32 = u_xlatu_loop_1;
      u_xlatu_loop_1 = (x_3981 + bitcast<u32>(1i));
    }
  }
  let x_3983 : vec4<f32> = u_xlat5;
  let x_3985 : vec4<f32> = u_xlat7;
  let x_3988 : vec4<f32> = u_xlat6;
  u_xlat1 = ((vec3<f32>(x_3983.x, x_3983.y, x_3983.z) * vec3<f32>(x_3985.x, x_3985.x, x_3985.x)) + vec3<f32>(x_3988.x, x_3988.y, x_3988.z));
  let x_3991 : vec4<f32> = u_xlat8;
  let x_3993 : vec3<f32> = u_xlat1;
  u_xlat1 = (vec3<f32>(x_3991.x, x_3991.y, x_3991.z) + x_3993);
  let x_3995 : vec4<f32> = vs_INTERP4;
  let x_3997 : vec3<f32> = u_xlat0;
  let x_3999 : vec3<f32> = u_xlat1;
  u_xlat0 = ((vec3<f32>(x_3995.w, x_3995.w, x_3995.w) * x_3997) + x_3999);
  let x_4002 : f32 = u_xlat24.x;
  let x_4004 : f32 = u_xlat24.x;
  u_xlat66 = (x_4002 * -(x_4004));
  let x_4007 : f32 = u_xlat66;
  u_xlat66 = exp2(x_4007);
  let x_4009 : vec3<f32> = u_xlat0;
  let x_4012 : vec4<f32> = x_90.unity_FogColor;
  u_xlat0 = (x_4009 + -(vec3<f32>(x_4012.x, x_4012.y, x_4012.z)));
  let x_4018 : f32 = u_xlat66;
  let x_4020 : vec3<f32> = u_xlat0;
  let x_4023 : vec4<f32> = x_90.unity_FogColor;
  let x_4025 : vec3<f32> = ((vec3<f32>(x_4018, x_4018, x_4018) * x_4020) + vec3<f32>(x_4023.x, x_4023.y, x_4023.z));
  let x_4026 : vec4<f32> = SV_Target0;
  SV_Target0 = vec4<f32>(x_4025.x, x_4025.y, x_4025.z, x_4026.w);
  let x_4028 : bool = u_xlatb2;
  let x_4029 : f32 = u_xlat67;
  SV_Target0.w = select(1.0f, x_4029, x_4028);
  let x_4036 : u32 = x_90.x_RenderingLayerMaxInt;
  let x_4038 : f32 = x_145.unity_RenderingLayer.x;
  u_xlatu0 = (x_4036 & bitcast<u32>(x_4038));
  let x_4041 : u32 = u_xlatu0;
  u_xlat0.x = f32(x_4041);
  let x_4046 : f32 = u_xlat0.x;
  let x_4048 : f32 = x_90.x_RenderingLayerRcpMaxInt;
  SV_Target1.x = (x_4046 * x_4048);
  let x_4052 : f32 = SV_Target1.x;
  SV_Target1.x = clamp(x_4052, 0.0f, 1.0f);
  let x_4055 : vec4<f32> = SV_Target1;
  SV_Target1 = vec4<f32>(x_4055.x, vec3<f32>(0.0f, 0.0f, 0.0f).x, vec3<f32>(0.0f, 0.0f, 0.0f).y, vec3<f32>(0.0f, 0.0f, 0.0f).z);
  return;
}

struct main_out {
  @location(0)
  SV_Target0_1 : vec4<f32>,
  @location(1)
  SV_Target1_1 : vec4<f32>,
}

@fragment
fn main(@builtin(position) gl_FragCoord_param : vec4<f32>, @location(1) vs_INTERP1_param : vec3<f32>, @location(0) vs_INTERP0_param : vec3<f32>, @location(3) vs_INTERP3_param : vec4<f32>, @location(4) vs_INTERP4_param : vec4<f32>, @location(2) vs_INTERP2_param : vec4<f32>) -> main_out {
  gl_FragCoord = gl_FragCoord_param;
  vs_INTERP1 = vs_INTERP1_param;
  vs_INTERP0 = vs_INTERP0_param;
  vs_INTERP3 = vs_INTERP3_param;
  vs_INTERP4 = vs_INTERP4_param;
  vs_INTERP2 = vs_INTERP2_param;
  main_1();
  return main_out(SV_Target0, SV_Target1);
}

