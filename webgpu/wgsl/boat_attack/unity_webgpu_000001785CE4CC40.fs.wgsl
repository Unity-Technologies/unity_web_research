struct PGlobals {
  x_GlobalMipBias : vec2<f32>,
  @size(8)
  padding : u32,
  x_Lut_Params : vec4<f32>,
  x_UserLut_Params : vec4<f32>,
  x_Distortion_Params1 : vec4<f32>,
  x_Distortion_Params2 : vec4<f32>,
  x_Chroma_Params : f32,
  @size(12)
  padding_1 : u32,
  x_Vignette_Params1 : vec4<f32>,
  x_Vignette_Params2 : vec4<f32>,
  x_Grain_Params : vec2<f32>,
  @size(8)
  padding_2 : u32,
  x_Grain_TilingParams : vec4<f32>,
}

var<private> vs_TEXCOORD0 : vec2<f32>;

@group(1) @binding(0) var<uniform> x_25 : PGlobals;

@group(0) @binding(0) var x_BlitTexture : texture_2d<f32>;

@group(0) @binding(4) var sampler_LinearClamp : sampler;

@group(0) @binding(3) var x_UserLut : texture_2d<f32>;

@group(0) @binding(2) var x_InternalLut : texture_2d<f32>;

@group(0) @binding(1) var x_Grain_Texture : texture_2d<f32>;

@group(0) @binding(5) var sampler_LinearRepeat : sampler;

var<private> SV_Target0 : vec4<f32>;

var<private> gl_FragCoord : vec4<f32>;

fn main_1() {
  var u_xlat0 : vec4<f32>;
  var u_xlat12 : vec2<f32>;
  var u_xlat1 : vec4<f32>;
  var u_xlatb7 : bool;
  var u_xlat13 : vec2<f32>;
  var u_xlat2 : vec4<f32>;
  var u_xlat3 : vec4<f32>;
  var u_xlat19 : f32;
  var u_xlat8 : f32;
  var u_xlat14 : f32;
  var u_xlat20 : f32;
  var u_xlatb3 : vec3<bool>;
  var u_xlatb1 : bool;
  var x_220 : f32;
  var u_xlat4 : vec2<f32>;
  var u_xlat5 : f32;
  var u_xlat16 : f32;
  var u_xlat22 : f32;
  var u_xlatb11 : bool;
  var x_442 : f32;
  var u_xlat6 : vec3<f32>;
  var u_xlat9 : f32;
  var u_xlatb4 : bool;
  var u_xlatb0 : vec3<bool>;
  var x_627 : f32;
  var u_xlat7 : vec3<f32>;
  var u_xlat18 : f32;
  var u_xlatb18 : bool;
  var u_xlatb6 : bool;
  var x_953 : f32;
  var x_962 : f32;
  var u_xlatb12 : vec2<bool>;
  var u_xlatb9 : bool;
  var x_1092 : f32;
  var u_xlatb19 : bool;
  var x_1143 : f32;
  var x_1170 : f32;
  var x_1194 : f32;
  var x_1205 : f32;
  var hlslcc_movcTemp : vec4<f32>;
  var x_1627 : f32;
  var x_1639 : f32;
  var x_1651 : f32;
  var x_1819 : f32;
  var x_1831 : f32;
  var x_1843 : f32;
  var u_xlat_precise_vec4 : vec4<f32>;
  var u_xlat_precise_ivec4 : vec4<i32>;
  var u_xlat_precise_bvec4 : vec4<bool>;
  var u_xlat_precise_uvec4 : vec4<u32>;
  let x_13 : vec2<f32> = vs_TEXCOORD0;
  let x_16 : vec2<f32> = (x_13 + vec2<f32>(-0.5f, -0.5f));
  let x_17 : vec4<f32> = u_xlat0;
  u_xlat0 = vec4<f32>(x_16.x, x_16.y, x_17.z, x_17.w);
  let x_21 : vec4<f32> = u_xlat0;
  let x_30 : vec4<f32> = x_25.x_Distortion_Params2;
  u_xlat12 = ((vec2<f32>(x_21.x, x_21.y) * vec2<f32>(x_30.z, x_30.z)) + vec2<f32>(0.5f, 0.5f));
  let x_36 : vec4<f32> = u_xlat0;
  let x_39 : vec4<f32> = x_25.x_Distortion_Params2;
  let x_44 : vec4<f32> = x_25.x_Distortion_Params1;
  let x_47 : vec2<f32> = ((vec2<f32>(x_36.x, x_36.y) * vec2<f32>(x_39.z, x_39.z)) + -(vec2<f32>(x_44.x, x_44.y)));
  let x_48 : vec4<f32> = u_xlat0;
  u_xlat0 = vec4<f32>(x_47.x, x_47.y, x_48.z, x_48.w);
  let x_50 : vec4<f32> = u_xlat0;
  let x_53 : vec4<f32> = x_25.x_Distortion_Params1;
  let x_55 : vec2<f32> = (vec2<f32>(x_50.x, x_50.y) * vec2<f32>(x_53.z, x_53.w));
  let x_56 : vec4<f32> = u_xlat0;
  u_xlat0 = vec4<f32>(x_55.x, x_55.y, x_56.z, x_56.w);
  let x_59 : vec4<f32> = u_xlat0;
  let x_61 : vec4<f32> = u_xlat0;
  u_xlat1.x = dot(vec2<f32>(x_59.x, x_59.y), vec2<f32>(x_61.x, x_61.y));
  let x_69 : f32 = u_xlat1.x;
  u_xlat1.x = sqrt(x_69);
  let x_79 : f32 = x_25.x_Distortion_Params2.w;
  u_xlatb7 = (0.0f < x_79);
  let x_81 : bool = u_xlatb7;
  if (x_81) {
    let x_85 : vec4<f32> = u_xlat1;
    let x_88 : vec4<f32> = x_25.x_Distortion_Params2;
    u_xlat13 = (vec2<f32>(x_85.x, x_85.x) * vec2<f32>(x_88.x, x_88.y));
    let x_93 : f32 = u_xlat13.x;
    u_xlat2.x = sin(x_93);
    let x_98 : f32 = u_xlat13.x;
    u_xlat3.x = cos(x_98);
    let x_102 : f32 = u_xlat2.x;
    let x_104 : f32 = u_xlat3.x;
    u_xlat13.x = (x_102 / x_104);
    let x_111 : f32 = u_xlat13.y;
    u_xlat19 = (1.0f / x_111);
    let x_114 : f32 = u_xlat13.x;
    let x_115 : f32 = u_xlat19;
    u_xlat13.x = ((x_114 * x_115) + -1.0f);
    let x_120 : vec4<f32> = u_xlat0;
    let x_122 : vec2<f32> = u_xlat13;
    let x_125 : vec2<f32> = u_xlat12;
    u_xlat13 = ((vec2<f32>(x_120.x, x_120.y) * vec2<f32>(x_122.x, x_122.x)) + x_125);
  } else {
    let x_129 : f32 = u_xlat1.x;
    u_xlat2.x = (1.0f / x_129);
    let x_133 : f32 = u_xlat2.x;
    let x_135 : f32 = x_25.x_Distortion_Params2.x;
    u_xlat2.x = (x_133 * x_135);
    let x_139 : f32 = u_xlat1.x;
    let x_141 : f32 = x_25.x_Distortion_Params2.y;
    u_xlat1.x = (x_139 * x_141);
    let x_146 : f32 = u_xlat1.x;
    u_xlat8 = min(abs(x_146), 1.0f);
    let x_151 : f32 = u_xlat1.x;
    u_xlat14 = max(abs(x_151), 1.0f);
    let x_154 : f32 = u_xlat14;
    u_xlat14 = (1.0f / x_154);
    let x_156 : f32 = u_xlat14;
    let x_157 : f32 = u_xlat8;
    u_xlat8 = (x_156 * x_157);
    let x_159 : f32 = u_xlat8;
    let x_160 : f32 = u_xlat8;
    u_xlat14 = (x_159 * x_160);
    let x_163 : f32 = u_xlat14;
    u_xlat20 = ((x_163 * 0.0208351f) + -0.085133001f);
    let x_168 : f32 = u_xlat14;
    let x_169 : f32 = u_xlat20;
    u_xlat20 = ((x_168 * x_169) + 0.180141002f);
    let x_173 : f32 = u_xlat14;
    let x_174 : f32 = u_xlat20;
    u_xlat20 = ((x_173 * x_174) + -0.330299497f);
    let x_178 : f32 = u_xlat14;
    let x_179 : f32 = u_xlat20;
    u_xlat14 = ((x_178 * x_179) + 0.999866009f);
    let x_183 : f32 = u_xlat14;
    let x_184 : f32 = u_xlat8;
    u_xlat20 = (x_183 * x_184);
    let x_190 : f32 = u_xlat1.x;
    u_xlatb3.x = (1.0f < abs(x_190));
    let x_194 : f32 = u_xlat20;
    u_xlat20 = ((x_194 * -2.0f) + 1.570796371f);
    let x_200 : bool = u_xlatb3.x;
    let x_201 : f32 = u_xlat20;
    u_xlat20 = select(0.0f, x_201, x_200);
    let x_203 : f32 = u_xlat8;
    let x_204 : f32 = u_xlat14;
    let x_206 : f32 = u_xlat20;
    u_xlat8 = ((x_203 * x_204) + x_206);
    let x_209 : f32 = u_xlat1.x;
    u_xlat1.x = min(x_209, 1.0f);
    let x_214 : f32 = u_xlat1.x;
    let x_216 : f32 = u_xlat1.x;
    u_xlatb1 = (x_214 < -(x_216));
    let x_219 : bool = u_xlatb1;
    if (x_219) {
      let x_223 : f32 = u_xlat8;
      x_220 = -(x_223);
    } else {
      let x_226 : f32 = u_xlat8;
      x_220 = x_226;
    }
    let x_227 : f32 = x_220;
    u_xlat1.x = x_227;
    let x_230 : f32 = u_xlat2.x;
    let x_232 : f32 = u_xlat1.x;
    u_xlat1.x = ((x_230 * x_232) + -1.0f);
    let x_236 : vec4<f32> = u_xlat0;
    let x_238 : vec4<f32> = u_xlat1;
    let x_241 : vec2<f32> = u_xlat12;
    u_xlat13 = ((vec2<f32>(x_236.x, x_236.y) * vec2<f32>(x_238.x, x_238.x)) + x_241);
  }
  let x_243 : vec2<f32> = vs_TEXCOORD0;
  u_xlat0 = ((vec4<f32>(x_243.x, x_243.y, x_243.x, x_243.y) * vec4<f32>(2.0f, 2.0f, 2.0f, 2.0f)) + vec4<f32>(-1.0f, -1.0f, -1.0f, -1.0f));
  let x_250 : vec4<f32> = u_xlat0;
  let x_252 : vec4<f32> = u_xlat0;
  u_xlat1.x = dot(vec2<f32>(x_250.z, x_250.w), vec2<f32>(x_252.z, x_252.w));
  let x_256 : vec4<f32> = u_xlat0;
  let x_257 : vec4<f32> = u_xlat1;
  u_xlat0 = (x_256 * vec4<f32>(x_257.x, x_257.x, x_257.x, x_257.x));
  let x_260 : vec4<f32> = u_xlat0;
  let x_263 : f32 = x_25.x_Chroma_Params;
  u_xlat0 = (x_260 * vec4<f32>(x_263, x_263, x_263, x_263));
  let x_276 : vec2<f32> = u_xlat13;
  let x_279 : f32 = x_25.x_GlobalMipBias.x;
  let x_280 : vec4<f32> = textureSampleBias(x_BlitTexture, sampler_LinearClamp, x_276, x_279);
  u_xlat2.x = x_280.x;
  let x_283 : vec4<f32> = u_xlat0;
  let x_288 : vec2<f32> = vs_TEXCOORD0;
  u_xlat0 = ((x_283 * vec4<f32>(-0.333333343f, -0.333333343f, -0.666666687f, -0.666666687f)) + vec4<f32>(x_288.x, x_288.y, x_288.x, x_288.y));
  let x_291 : vec4<f32> = u_xlat0;
  u_xlat0 = (x_291 + vec4<f32>(-0.5f, -0.5f, -0.5f, -0.5f));
  let x_294 : vec4<f32> = u_xlat0;
  let x_296 : vec4<f32> = x_25.x_Distortion_Params2;
  u_xlat3 = ((x_294 * vec4<f32>(x_296.z, x_296.z, x_296.z, x_296.z)) + vec4<f32>(0.5f, 0.5f, 0.5f, 0.5f));
  let x_301 : vec4<f32> = u_xlat0;
  let x_303 : vec4<f32> = x_25.x_Distortion_Params2;
  let x_307 : vec4<f32> = x_25.x_Distortion_Params1;
  u_xlat0 = ((x_301 * vec4<f32>(x_303.z, x_303.z, x_303.z, x_303.z)) + -(vec4<f32>(x_307.x, x_307.y, x_307.x, x_307.y)));
  let x_311 : vec4<f32> = u_xlat0;
  let x_313 : vec4<f32> = x_25.x_Distortion_Params1;
  u_xlat0 = (x_311 * vec4<f32>(x_313.z, x_313.w, x_313.z, x_313.w));
  let x_316 : vec4<f32> = u_xlat0;
  let x_318 : vec4<f32> = u_xlat0;
  u_xlat1.x = dot(vec2<f32>(x_316.x, x_316.y), vec2<f32>(x_318.x, x_318.y));
  let x_323 : f32 = u_xlat1.x;
  u_xlat1.x = sqrt(x_323);
  let x_326 : bool = u_xlatb7;
  if (x_326) {
    let x_330 : vec4<f32> = u_xlat1;
    let x_333 : vec4<f32> = x_25.x_Distortion_Params2;
    u_xlat4 = (vec2<f32>(x_330.x, x_330.x) * vec2<f32>(x_333.x, x_333.y));
    let x_338 : f32 = u_xlat4.x;
    u_xlat5 = cos(x_338);
    let x_341 : f32 = u_xlat4.x;
    u_xlat4.x = sin(x_341);
    let x_345 : f32 = u_xlat4.x;
    let x_346 : f32 = u_xlat5;
    u_xlat20 = (x_345 / x_346);
    let x_349 : f32 = u_xlat4.y;
    u_xlat4.x = (1.0f / x_349);
    let x_352 : f32 = u_xlat20;
    let x_354 : f32 = u_xlat4.x;
    u_xlat20 = ((x_352 * x_354) + -1.0f);
    let x_357 : vec4<f32> = u_xlat0;
    let x_359 : f32 = u_xlat20;
    let x_362 : vec4<f32> = u_xlat3;
    u_xlat4 = ((vec2<f32>(x_357.x, x_357.y) * vec2<f32>(x_359, x_359)) + vec2<f32>(x_362.x, x_362.y));
  } else {
    let x_367 : f32 = u_xlat1.x;
    u_xlat20 = (1.0f / x_367);
    let x_369 : f32 = u_xlat20;
    let x_371 : f32 = x_25.x_Distortion_Params2.x;
    u_xlat20 = (x_369 * x_371);
    let x_374 : f32 = u_xlat1.x;
    let x_376 : f32 = x_25.x_Distortion_Params2.y;
    u_xlat1.x = (x_374 * x_376);
    let x_381 : f32 = u_xlat1.x;
    u_xlat16 = min(abs(x_381), 1.0f);
    let x_386 : f32 = u_xlat1.x;
    u_xlat22 = max(abs(x_386), 1.0f);
    let x_389 : f32 = u_xlat22;
    u_xlat22 = (1.0f / x_389);
    let x_391 : f32 = u_xlat22;
    let x_392 : f32 = u_xlat16;
    u_xlat16 = (x_391 * x_392);
    let x_394 : f32 = u_xlat16;
    let x_395 : f32 = u_xlat16;
    u_xlat22 = (x_394 * x_395);
    let x_397 : f32 = u_xlat22;
    u_xlat5 = ((x_397 * 0.0208351f) + -0.085133001f);
    let x_400 : f32 = u_xlat22;
    let x_401 : f32 = u_xlat5;
    u_xlat5 = ((x_400 * x_401) + 0.180141002f);
    let x_404 : f32 = u_xlat22;
    let x_405 : f32 = u_xlat5;
    u_xlat5 = ((x_404 * x_405) + -0.330299497f);
    let x_408 : f32 = u_xlat22;
    let x_409 : f32 = u_xlat5;
    u_xlat22 = ((x_408 * x_409) + 0.999866009f);
    let x_412 : f32 = u_xlat22;
    let x_413 : f32 = u_xlat16;
    u_xlat5 = (x_412 * x_413);
    let x_417 : f32 = u_xlat1.x;
    u_xlatb11 = (1.0f < abs(x_417));
    let x_420 : f32 = u_xlat5;
    u_xlat5 = ((x_420 * -2.0f) + 1.570796371f);
    let x_423 : bool = u_xlatb11;
    let x_424 : f32 = u_xlat5;
    u_xlat5 = select(0.0f, x_424, x_423);
    let x_426 : f32 = u_xlat16;
    let x_427 : f32 = u_xlat22;
    let x_429 : f32 = u_xlat5;
    u_xlat16 = ((x_426 * x_427) + x_429);
    let x_432 : f32 = u_xlat1.x;
    u_xlat1.x = min(x_432, 1.0f);
    let x_436 : f32 = u_xlat1.x;
    let x_438 : f32 = u_xlat1.x;
    u_xlatb1 = (x_436 < -(x_438));
    let x_441 : bool = u_xlatb1;
    if (x_441) {
      let x_445 : f32 = u_xlat16;
      x_442 = -(x_445);
    } else {
      let x_448 : f32 = u_xlat16;
      x_442 = x_448;
    }
    let x_449 : f32 = x_442;
    u_xlat1.x = x_449;
    let x_451 : f32 = u_xlat20;
    let x_453 : f32 = u_xlat1.x;
    u_xlat1.x = ((x_451 * x_453) + -1.0f);
    let x_457 : vec4<f32> = u_xlat0;
    let x_459 : vec4<f32> = u_xlat1;
    let x_462 : vec4<f32> = u_xlat3;
    u_xlat4 = ((vec2<f32>(x_457.x, x_457.y) * vec2<f32>(x_459.x, x_459.x)) + vec2<f32>(x_462.x, x_462.y));
  }
  let x_468 : vec2<f32> = u_xlat4;
  let x_470 : f32 = x_25.x_GlobalMipBias.x;
  let x_471 : vec4<f32> = textureSampleBias(x_BlitTexture, sampler_LinearClamp, x_468, x_470);
  u_xlat2.y = x_471.y;
  let x_474 : vec4<f32> = u_xlat0;
  let x_476 : vec4<f32> = u_xlat0;
  u_xlat0.x = dot(vec2<f32>(x_474.z, x_474.w), vec2<f32>(x_476.z, x_476.w));
  let x_481 : f32 = u_xlat0.x;
  u_xlat0.x = sqrt(x_481);
  let x_484 : bool = u_xlatb7;
  if (x_484) {
    let x_487 : vec4<f32> = u_xlat0;
    let x_490 : vec4<f32> = x_25.x_Distortion_Params2;
    let x_492 : vec2<f32> = (vec2<f32>(x_487.x, x_487.x) * vec2<f32>(x_490.x, x_490.y));
    let x_493 : vec4<f32> = u_xlat1;
    u_xlat1 = vec4<f32>(x_492.x, x_492.y, x_493.z, x_493.w);
    let x_496 : f32 = u_xlat1.x;
    u_xlat3.x = cos(x_496);
    let x_500 : f32 = u_xlat1.x;
    u_xlat1.x = sin(x_500);
    let x_507 : f32 = u_xlat1.x;
    let x_509 : f32 = u_xlat3.x;
    u_xlat6.x = (x_507 / x_509);
    let x_513 : f32 = u_xlat1.y;
    u_xlat1.x = (1.0f / x_513);
    let x_517 : f32 = u_xlat6.x;
    let x_519 : f32 = u_xlat1.x;
    u_xlat6.x = ((x_517 * x_519) + -1.0f);
    let x_523 : vec4<f32> = u_xlat0;
    let x_525 : vec3<f32> = u_xlat6;
    let x_528 : vec4<f32> = u_xlat3;
    let x_530 : vec2<f32> = ((vec2<f32>(x_523.z, x_523.w) * vec2<f32>(x_525.x, x_525.x)) + vec2<f32>(x_528.z, x_528.w));
    let x_531 : vec4<f32> = u_xlat1;
    u_xlat1 = vec4<f32>(x_530.x, x_530.y, x_531.z, x_531.w);
  } else {
    let x_535 : f32 = u_xlat0.x;
    u_xlat6.x = (1.0f / x_535);
    let x_539 : f32 = u_xlat6.x;
    let x_541 : f32 = x_25.x_Distortion_Params2.x;
    u_xlat6.x = (x_539 * x_541);
    let x_545 : f32 = u_xlat0.x;
    let x_547 : f32 = x_25.x_Distortion_Params2.y;
    u_xlat0.x = (x_545 * x_547);
    let x_551 : f32 = u_xlat0.x;
    u_xlat20 = min(abs(x_551), 1.0f);
    let x_555 : f32 = u_xlat0.x;
    u_xlat3.x = max(abs(x_555), 1.0f);
    let x_560 : f32 = u_xlat3.x;
    u_xlat3.x = (1.0f / x_560);
    let x_563 : f32 = u_xlat20;
    let x_565 : f32 = u_xlat3.x;
    u_xlat20 = (x_563 * x_565);
    let x_567 : f32 = u_xlat20;
    let x_568 : f32 = u_xlat20;
    u_xlat3.x = (x_567 * x_568);
    let x_573 : f32 = u_xlat3.x;
    u_xlat9 = ((x_573 * 0.0208351f) + -0.085133001f);
    let x_577 : f32 = u_xlat3.x;
    let x_578 : f32 = u_xlat9;
    u_xlat9 = ((x_577 * x_578) + 0.180141002f);
    let x_582 : f32 = u_xlat3.x;
    let x_583 : f32 = u_xlat9;
    u_xlat9 = ((x_582 * x_583) + -0.330299497f);
    let x_587 : f32 = u_xlat3.x;
    let x_588 : f32 = u_xlat9;
    u_xlat3.x = ((x_587 * x_588) + 0.999866009f);
    let x_592 : f32 = u_xlat20;
    let x_594 : f32 = u_xlat3.x;
    u_xlat9 = (x_592 * x_594);
    let x_598 : f32 = u_xlat0.x;
    u_xlatb4 = (1.0f < abs(x_598));
    let x_601 : f32 = u_xlat9;
    u_xlat9 = ((x_601 * -2.0f) + 1.570796371f);
    let x_604 : bool = u_xlatb4;
    let x_605 : f32 = u_xlat9;
    u_xlat9 = select(0.0f, x_605, x_604);
    let x_607 : f32 = u_xlat20;
    let x_609 : f32 = u_xlat3.x;
    let x_611 : f32 = u_xlat9;
    u_xlat20 = ((x_607 * x_609) + x_611);
    let x_614 : f32 = u_xlat0.x;
    u_xlat0.x = min(x_614, 1.0f);
    let x_619 : f32 = u_xlat0.x;
    let x_621 : f32 = u_xlat0.x;
    u_xlatb0.x = (x_619 < -(x_621));
    let x_626 : bool = u_xlatb0.x;
    if (x_626) {
      let x_630 : f32 = u_xlat20;
      x_627 = -(x_630);
    } else {
      let x_633 : f32 = u_xlat20;
      x_627 = x_633;
    }
    let x_634 : f32 = x_627;
    u_xlat0.x = x_634;
    let x_637 : f32 = u_xlat6.x;
    let x_639 : f32 = u_xlat0.x;
    u_xlat0.x = ((x_637 * x_639) + -1.0f);
    let x_643 : vec4<f32> = u_xlat0;
    let x_645 : vec4<f32> = u_xlat0;
    let x_648 : vec4<f32> = u_xlat3;
    let x_650 : vec2<f32> = ((vec2<f32>(x_643.z, x_643.w) * vec2<f32>(x_645.x, x_645.x)) + vec2<f32>(x_648.z, x_648.w));
    let x_651 : vec4<f32> = u_xlat1;
    u_xlat1 = vec4<f32>(x_650.x, x_650.y, x_651.z, x_651.w);
  }
  let x_656 : vec4<f32> = u_xlat1;
  let x_659 : f32 = x_25.x_GlobalMipBias.x;
  let x_660 : vec4<f32> = textureSampleBias(x_BlitTexture, sampler_LinearClamp, vec2<f32>(x_656.x, x_656.y), x_659);
  u_xlat2.z = x_660.z;
  let x_666 : f32 = x_25.x_Vignette_Params2.z;
  u_xlatb0.x = (0.0f < x_666);
  let x_670 : bool = u_xlatb0.x;
  if (x_670) {
    let x_673 : vec2<f32> = u_xlat13;
    let x_675 : vec4<f32> = x_25.x_Vignette_Params2;
    let x_678 : vec2<f32> = (x_673 + -(vec2<f32>(x_675.x, x_675.y)));
    let x_679 : vec4<f32> = u_xlat0;
    u_xlat0 = vec4<f32>(x_678.x, x_678.y, x_679.z, x_679.w);
    let x_681 : vec4<f32> = u_xlat0;
    let x_685 : vec4<f32> = x_25.x_Vignette_Params2;
    let x_687 : vec2<f32> = (abs(vec2<f32>(x_681.x, x_681.y)) * vec2<f32>(x_685.z, x_685.z));
    let x_688 : vec4<f32> = u_xlat0;
    u_xlat0 = vec4<f32>(x_688.x, x_687.x, x_687.y, x_688.w);
    let x_691 : f32 = u_xlat0.y;
    let x_694 : f32 = x_25.x_Vignette_Params1.w;
    u_xlat0.x = (x_691 * x_694);
    let x_697 : vec4<f32> = u_xlat0;
    let x_699 : vec4<f32> = u_xlat0;
    u_xlat0.x = dot(vec2<f32>(x_697.x, x_697.z), vec2<f32>(x_699.x, x_699.z));
    let x_704 : f32 = u_xlat0.x;
    u_xlat0.x = (-(x_704) + 1.0f);
    let x_709 : f32 = u_xlat0.x;
    u_xlat0.x = max(x_709, 0.0f);
    let x_713 : f32 = u_xlat0.x;
    u_xlat0.x = log2(x_713);
    let x_717 : f32 = u_xlat0.x;
    let x_719 : f32 = x_25.x_Vignette_Params2.w;
    u_xlat0.x = (x_717 * x_719);
    let x_723 : f32 = u_xlat0.x;
    u_xlat0.x = exp2(x_723);
    let x_727 : vec4<f32> = x_25.x_Vignette_Params1;
    u_xlat6 = (-(vec3<f32>(x_727.x, x_727.y, x_727.z)) + vec3<f32>(1.0f, 1.0f, 1.0f));
    let x_732 : vec4<f32> = u_xlat0;
    let x_734 : vec3<f32> = u_xlat6;
    let x_737 : vec4<f32> = x_25.x_Vignette_Params1;
    let x_739 : vec3<f32> = ((vec3<f32>(x_732.x, x_732.x, x_732.x) * x_734) + vec3<f32>(x_737.x, x_737.y, x_737.z));
    let x_740 : vec4<f32> = u_xlat0;
    u_xlat0 = vec4<f32>(x_739.x, x_739.y, x_739.z, x_740.w);
    let x_742 : vec4<f32> = u_xlat0;
    let x_744 : vec4<f32> = u_xlat2;
    let x_746 : vec3<f32> = (vec3<f32>(x_742.x, x_742.y, x_742.z) * vec3<f32>(x_744.x, x_744.y, x_744.z));
    let x_747 : vec4<f32> = u_xlat2;
    u_xlat2 = vec4<f32>(x_746.x, x_746.y, x_746.z, x_747.w);
  }
  let x_749 : vec4<f32> = u_xlat2;
  let x_753 : vec4<f32> = x_25.x_Lut_Params;
  let x_755 : vec3<f32> = (vec3<f32>(x_749.x, x_749.y, x_749.z) * vec3<f32>(x_753.w, x_753.w, x_753.w));
  let x_756 : vec4<f32> = u_xlat0;
  u_xlat0 = vec4<f32>(x_755.x, x_755.y, x_755.z, x_756.w);
  let x_763 : vec4<f32> = u_xlat0;
  u_xlat7.x = dot(vec3<f32>(0.439700991f, 0.382977992f, 0.177334994f), vec3<f32>(x_763.x, x_763.y, x_763.z));
  let x_771 : vec4<f32> = u_xlat0;
  u_xlat7.y = dot(vec3<f32>(0.089792296f, 0.813422978f, 0.096761599f), vec3<f32>(x_771.x, x_771.y, x_771.z));
  let x_779 : vec4<f32> = u_xlat0;
  u_xlat7.z = dot(vec3<f32>(0.017543999f, 0.111543998f, 0.870703995f), vec3<f32>(x_779.x, x_779.y, x_779.z));
  let x_784 : f32 = u_xlat7.y;
  let x_786 : f32 = u_xlat7.x;
  u_xlat0.x = min(x_784, x_786);
  let x_790 : f32 = u_xlat7.z;
  let x_792 : f32 = u_xlat0.x;
  u_xlat0.x = min(x_790, x_792);
  let x_796 : f32 = u_xlat7.y;
  let x_798 : f32 = u_xlat7.x;
  u_xlat6.x = max(x_796, x_798);
  let x_802 : f32 = u_xlat7.z;
  let x_804 : f32 = u_xlat6.x;
  u_xlat0.y = max(x_802, x_804);
  let x_807 : vec4<f32> = u_xlat0;
  let x_812 : vec3<f32> = max(vec3<f32>(x_807.x, x_807.y, x_807.y), vec3<f32>(0.0001f, 0.0001f, 0.01f));
  let x_813 : vec4<f32> = u_xlat0;
  u_xlat0 = vec4<f32>(x_812.x, x_812.y, x_812.z, x_813.w);
  let x_816 : f32 = u_xlat0.x;
  let x_819 : f32 = u_xlat0.y;
  u_xlat0.x = (-(x_816) + x_819);
  let x_823 : f32 = u_xlat0.x;
  let x_825 : f32 = u_xlat0.z;
  u_xlat0.x = (x_823 / x_825);
  let x_828 : vec3<f32> = u_xlat7;
  let x_831 : vec3<f32> = u_xlat7;
  u_xlat6 = (-(vec3<f32>(x_828.y, x_828.x, x_828.z)) + vec3<f32>(x_831.z, x_831.y, x_831.x));
  let x_834 : vec3<f32> = u_xlat6;
  let x_836 : vec3<f32> = u_xlat7;
  let x_838 : vec2<f32> = (vec2<f32>(x_834.x, x_834.y) * vec2<f32>(x_836.z, x_836.y));
  let x_839 : vec3<f32> = u_xlat6;
  u_xlat6 = vec3<f32>(x_838.x, x_838.y, x_839.z);
  let x_842 : f32 = u_xlat6.y;
  let x_844 : f32 = u_xlat6.x;
  u_xlat6.x = (x_842 + x_844);
  let x_848 : f32 = u_xlat7.x;
  let x_850 : f32 = u_xlat6.z;
  let x_853 : f32 = u_xlat6.x;
  u_xlat6.x = ((x_848 * x_850) + x_853);
  let x_857 : f32 = u_xlat6.x;
  u_xlat6.x = max(x_857, 0.0f);
  let x_861 : f32 = u_xlat6.x;
  u_xlat6.x = sqrt(x_861);
  let x_865 : f32 = u_xlat7.y;
  let x_867 : f32 = u_xlat7.z;
  u_xlat12.x = (x_865 + x_867);
  let x_871 : f32 = u_xlat7.x;
  let x_873 : f32 = u_xlat12.x;
  u_xlat12.x = (x_871 + x_873);
  let x_877 : f32 = u_xlat6.x;
  let x_881 : f32 = u_xlat12.x;
  u_xlat6.x = ((x_877 * 1.75f) + x_881);
  let x_886 : f32 = u_xlat0.x;
  u_xlat18 = (x_886 + -0.400000006f);
  let x_889 : f32 = u_xlat18;
  u_xlat1.x = (x_889 * 2.5f);
  let x_894 : f32 = u_xlat1.x;
  u_xlat1.x = (-(abs(x_894)) + 1.0f);
  let x_900 : f32 = u_xlat1.x;
  u_xlat1.x = max(x_900, 0.0f);
  let x_904 : f32 = u_xlat18;
  u_xlatb18 = (x_904 >= 0.0f);
  let x_906 : bool = u_xlatb18;
  u_xlat18 = select(-1.0f, 1.0f, x_906);
  let x_909 : f32 = u_xlat1.x;
  let x_912 : f32 = u_xlat1.x;
  u_xlat1.x = ((-(x_909) * x_912) + 1.0f);
  let x_916 : f32 = u_xlat18;
  let x_918 : f32 = u_xlat1.x;
  u_xlat6.z = ((x_916 * x_918) + 1.0f);
  let x_922 : vec3<f32> = u_xlat6;
  u_xlat12 = (vec2<f32>(x_922.x, x_922.z) * vec2<f32>(0.333333343f, 0.025f));
  let x_930 : f32 = u_xlat6.x;
  u_xlatb1 = (0.159999996f >= x_930);
  let x_934 : f32 = u_xlat6.x;
  u_xlatb6 = (x_934 >= 0.479999989f);
  let x_939 : f32 = u_xlat12.x;
  u_xlat12.x = (0.079999998f / x_939);
  let x_943 : f32 = u_xlat12.x;
  u_xlat12.x = (x_943 + -0.5f);
  let x_947 : f32 = u_xlat12.x;
  let x_949 : f32 = u_xlat12.y;
  u_xlat12.x = (x_947 * x_949);
  let x_952 : bool = u_xlatb6;
  if (x_952) {
    x_953 = 0.0f;
  } else {
    let x_958 : f32 = u_xlat12.x;
    x_953 = x_958;
  }
  let x_959 : f32 = x_953;
  u_xlat6.x = x_959;
  let x_961 : bool = u_xlatb1;
  if (x_961) {
    let x_966 : f32 = u_xlat12.y;
    x_962 = x_966;
  } else {
    let x_969 : f32 = u_xlat6.x;
    x_962 = x_969;
  }
  let x_970 : f32 = x_962;
  u_xlat6.x = x_970;
  let x_973 : f32 = u_xlat6.x;
  u_xlat6.x = (x_973 + 1.0f);
  let x_976 : vec3<f32> = u_xlat6;
  let x_978 : vec3<f32> = u_xlat7;
  let x_979 : vec3<f32> = (vec3<f32>(x_976.x, x_976.x, x_976.x) * x_978);
  let x_980 : vec4<f32> = u_xlat2;
  u_xlat2 = vec4<f32>(x_980.x, x_979.x, x_979.y, x_979.z);
  let x_985 : vec4<f32> = u_xlat2;
  let x_987 : vec4<f32> = u_xlat2;
  let x_990 : vec4<bool> = (vec4<f32>(x_985.z, x_985.w, x_985.z, x_985.w) == vec4<f32>(x_987.y, x_987.z, x_987.y, x_987.z));
  u_xlatb12 = vec2<bool>(x_990.x, x_990.y);
  let x_993 : bool = u_xlatb12.y;
  let x_995 : bool = u_xlatb12.x;
  u_xlatb12.x = (x_993 & x_995);
  let x_999 : f32 = u_xlat7.y;
  let x_1001 : f32 = u_xlat6.x;
  let x_1004 : f32 = u_xlat2.w;
  u_xlat18 = ((x_999 * x_1001) + -(x_1004));
  let x_1007 : f32 = u_xlat18;
  u_xlat18 = (x_1007 * 1.732050776f);
  let x_1011 : f32 = u_xlat2.y;
  let x_1014 : f32 = u_xlat2.z;
  u_xlat1.x = ((x_1011 * 2.0f) + -(x_1014));
  let x_1019 : f32 = u_xlat7.z;
  let x_1022 : f32 = u_xlat6.x;
  let x_1025 : f32 = u_xlat1.x;
  u_xlat1.x = ((-(x_1019) * x_1022) + x_1025);
  let x_1028 : f32 = u_xlat18;
  let x_1031 : f32 = u_xlat1.x;
  u_xlat13.x = min(abs(x_1028), abs(x_1031));
  let x_1035 : f32 = u_xlat18;
  let x_1038 : f32 = u_xlat1.x;
  u_xlat19 = max(abs(x_1035), abs(x_1038));
  let x_1041 : f32 = u_xlat19;
  u_xlat19 = (1.0f / x_1041);
  let x_1043 : f32 = u_xlat19;
  let x_1045 : f32 = u_xlat13.x;
  u_xlat13.x = (x_1043 * x_1045);
  let x_1049 : f32 = u_xlat13.x;
  let x_1051 : f32 = u_xlat13.x;
  u_xlat19 = (x_1049 * x_1051);
  let x_1053 : f32 = u_xlat19;
  u_xlat3.x = ((x_1053 * 0.0208351f) + -0.085133001f);
  let x_1057 : f32 = u_xlat19;
  let x_1059 : f32 = u_xlat3.x;
  u_xlat3.x = ((x_1057 * x_1059) + 0.180141002f);
  let x_1063 : f32 = u_xlat19;
  let x_1065 : f32 = u_xlat3.x;
  u_xlat3.x = ((x_1063 * x_1065) + -0.330299497f);
  let x_1069 : f32 = u_xlat19;
  let x_1071 : f32 = u_xlat3.x;
  u_xlat19 = ((x_1069 * x_1071) + 0.999866009f);
  let x_1074 : f32 = u_xlat19;
  let x_1076 : f32 = u_xlat13.x;
  u_xlat3.x = (x_1074 * x_1076);
  let x_1081 : f32 = u_xlat1.x;
  let x_1083 : f32 = u_xlat18;
  u_xlatb9 = (abs(x_1081) < abs(x_1083));
  let x_1087 : f32 = u_xlat3.x;
  u_xlat3.x = ((x_1087 * -2.0f) + 1.570796371f);
  let x_1091 : bool = u_xlatb9;
  if (x_1091) {
    let x_1096 : f32 = u_xlat3.x;
    x_1092 = x_1096;
  } else {
    x_1092 = 0.0f;
  }
  let x_1098 : f32 = x_1092;
  u_xlat3.x = x_1098;
  let x_1101 : f32 = u_xlat13.x;
  let x_1102 : f32 = u_xlat19;
  let x_1105 : f32 = u_xlat3.x;
  u_xlat13.x = ((x_1101 * x_1102) + x_1105);
  let x_1110 : f32 = u_xlat1.x;
  let x_1112 : f32 = u_xlat1.x;
  u_xlatb19 = (x_1110 < -(x_1112));
  let x_1115 : bool = u_xlatb19;
  u_xlat19 = select(0.0f, -3.141592741f, x_1115);
  let x_1118 : f32 = u_xlat19;
  let x_1120 : f32 = u_xlat13.x;
  u_xlat13.x = (x_1118 + x_1120);
  let x_1123 : f32 = u_xlat18;
  let x_1125 : f32 = u_xlat1.x;
  u_xlat19 = min(x_1123, x_1125);
  let x_1127 : f32 = u_xlat18;
  let x_1129 : f32 = u_xlat1.x;
  u_xlat18 = max(x_1127, x_1129);
  let x_1131 : f32 = u_xlat19;
  let x_1132 : f32 = u_xlat19;
  u_xlatb1 = (x_1131 < -(x_1132));
  let x_1135 : f32 = u_xlat18;
  let x_1136 : f32 = u_xlat18;
  u_xlatb18 = (x_1135 >= -(x_1136));
  let x_1139 : bool = u_xlatb18;
  let x_1140 : bool = u_xlatb1;
  u_xlatb18 = (x_1139 & x_1140);
  let x_1142 : bool = u_xlatb18;
  if (x_1142) {
    let x_1147 : f32 = u_xlat13.x;
    x_1143 = -(x_1147);
  } else {
    let x_1151 : f32 = u_xlat13.x;
    x_1143 = x_1151;
  }
  let x_1152 : f32 = x_1143;
  u_xlat18 = x_1152;
  let x_1153 : f32 = u_xlat18;
  u_xlat18 = (x_1153 * 57.295780182f);
  let x_1157 : bool = u_xlatb12.x;
  let x_1158 : f32 = u_xlat18;
  u_xlat12.x = select(x_1158, 0.0f, x_1157);
  let x_1162 : f32 = u_xlat12.x;
  u_xlatb18 = (x_1162 < 0.0f);
  let x_1165 : f32 = u_xlat12.x;
  u_xlat1.x = (x_1165 + 360.0f);
  let x_1169 : bool = u_xlatb18;
  if (x_1169) {
    let x_1174 : f32 = u_xlat1.x;
    x_1170 = x_1174;
  } else {
    let x_1177 : f32 = u_xlat12.x;
    x_1170 = x_1177;
  }
  let x_1178 : f32 = x_1170;
  u_xlat12.x = x_1178;
  let x_1181 : f32 = u_xlat12.x;
  u_xlatb18 = (x_1181 < -180.0f);
  let x_1186 : f32 = u_xlat12.x;
  u_xlatb1 = (180.0f < x_1186);
  let x_1188 : vec2<f32> = u_xlat12;
  u_xlat13 = (vec2<f32>(x_1188.x, x_1188.x) + vec2<f32>(360.0f, -360.0f));
  let x_1193 : bool = u_xlatb1;
  if (x_1193) {
    let x_1198 : f32 = u_xlat13.y;
    x_1194 = x_1198;
  } else {
    let x_1201 : f32 = u_xlat12.x;
    x_1194 = x_1201;
  }
  let x_1202 : f32 = x_1194;
  u_xlat12.x = x_1202;
  let x_1204 : bool = u_xlatb18;
  if (x_1204) {
    let x_1209 : f32 = u_xlat13.x;
    x_1205 = x_1209;
  } else {
    let x_1212 : f32 = u_xlat12.x;
    x_1205 = x_1212;
  }
  let x_1213 : f32 = x_1205;
  u_xlat12.x = x_1213;
  let x_1216 : f32 = u_xlat12.x;
  u_xlat12.x = (x_1216 * 0.014814815f);
  let x_1221 : f32 = u_xlat12.x;
  u_xlat12.x = (-(abs(x_1221)) + 1.0f);
  let x_1227 : f32 = u_xlat12.x;
  u_xlat12.x = max(x_1227, 0.0f);
  let x_1231 : f32 = u_xlat12.x;
  u_xlat18 = ((x_1231 * -2.0f) + 3.0f);
  let x_1236 : f32 = u_xlat12.x;
  let x_1238 : f32 = u_xlat12.x;
  u_xlat12.x = (x_1236 * x_1238);
  let x_1242 : f32 = u_xlat12.x;
  let x_1243 : f32 = u_xlat18;
  u_xlat12.x = (x_1242 * x_1243);
  let x_1247 : f32 = u_xlat12.x;
  let x_1249 : f32 = u_xlat12.x;
  u_xlat12.x = (x_1247 * x_1249);
  let x_1253 : f32 = u_xlat0.x;
  let x_1255 : f32 = u_xlat12.x;
  u_xlat0.x = (x_1253 * x_1255);
  let x_1259 : f32 = u_xlat7.x;
  let x_1262 : f32 = u_xlat6.x;
  u_xlat6.x = ((-(x_1259) * x_1262) + 0.029999999f);
  let x_1268 : f32 = u_xlat6.x;
  let x_1270 : f32 = u_xlat0.x;
  u_xlat0.x = (x_1268 * x_1270);
  let x_1274 : f32 = u_xlat0.x;
  let x_1278 : f32 = u_xlat2.y;
  u_xlat2.x = ((x_1274 * 0.180000007f) + x_1278);
  let x_1285 : vec4<f32> = u_xlat2;
  u_xlat0.x = dot(vec3<f32>(1.451439261f, -0.236510754f, -0.214928567f), vec3<f32>(x_1285.x, x_1285.z, x_1285.w));
  let x_1293 : vec4<f32> = u_xlat2;
  u_xlat0.y = dot(vec3<f32>(-0.076553777f, 1.176229715f, -0.099675924f), vec3<f32>(x_1293.x, x_1293.z, x_1293.w));
  let x_1301 : vec4<f32> = u_xlat2;
  u_xlat0.z = dot(vec3<f32>(0.008316148f, -0.00603244966f, 0.997716308f), vec3<f32>(x_1301.x, x_1301.z, x_1301.w));
  let x_1305 : vec4<f32> = u_xlat0;
  let x_1308 : vec3<f32> = max(vec3<f32>(x_1305.x, x_1305.y, x_1305.z), vec3<f32>(0.0f, 0.0f, 0.0f));
  let x_1309 : vec4<f32> = u_xlat0;
  u_xlat0 = vec4<f32>(x_1308.x, x_1308.y, x_1308.z, x_1309.w);
  let x_1311 : vec4<f32> = u_xlat0;
  u_xlat18 = dot(vec3<f32>(x_1311.x, x_1311.y, x_1311.z), vec3<f32>(0.272228986f, 0.674081981f, 0.053689498f));
  let x_1318 : f32 = u_xlat18;
  let x_1321 : vec4<f32> = u_xlat0;
  let x_1323 : vec3<f32> = (-(vec3<f32>(x_1318, x_1318, x_1318)) + vec3<f32>(x_1321.x, x_1321.y, x_1321.z));
  let x_1324 : vec4<f32> = u_xlat0;
  u_xlat0 = vec4<f32>(x_1323.x, x_1323.y, x_1323.z, x_1324.w);
  let x_1326 : vec4<f32> = u_xlat0;
  let x_1331 : f32 = u_xlat18;
  let x_1333 : vec3<f32> = ((vec3<f32>(x_1326.x, x_1326.y, x_1326.z) * vec3<f32>(0.959999979f, 0.959999979f, 0.959999979f)) + vec3<f32>(x_1331, x_1331, x_1331));
  let x_1334 : vec4<f32> = u_xlat0;
  u_xlat0 = vec4<f32>(x_1333.x, x_1333.y, x_1333.z, x_1334.w);
  let x_1336 : vec4<f32> = u_xlat0;
  let x_1340 : vec3<f32> = (vec3<f32>(x_1336.x, x_1336.y, x_1336.z) + vec3<f32>(0.024578599f, 0.024578599f, 0.024578599f));
  let x_1341 : vec4<f32> = u_xlat1;
  u_xlat1 = vec4<f32>(x_1340.x, x_1340.y, x_1340.z, x_1341.w);
  let x_1343 : vec4<f32> = u_xlat0;
  let x_1345 : vec4<f32> = u_xlat1;
  let x_1350 : vec3<f32> = ((vec3<f32>(x_1343.x, x_1343.y, x_1343.z) * vec3<f32>(x_1345.x, x_1345.y, x_1345.z)) + vec3<f32>(-0.000090537f, -0.000090537f, -0.000090537f));
  let x_1351 : vec4<f32> = u_xlat1;
  u_xlat1 = vec4<f32>(x_1350.x, x_1350.y, x_1350.z, x_1351.w);
  let x_1353 : vec4<f32> = u_xlat0;
  let x_1360 : vec3<f32> = ((vec3<f32>(x_1353.x, x_1353.y, x_1353.z) * vec3<f32>(0.983729005f, 0.983729005f, 0.983729005f)) + vec3<f32>(0.432951003f, 0.432951003f, 0.432951003f));
  let x_1361 : vec4<f32> = u_xlat2;
  u_xlat2 = vec4<f32>(x_1360.x, x_1360.y, x_1360.z, x_1361.w);
  let x_1363 : vec4<f32> = u_xlat0;
  let x_1365 : vec4<f32> = u_xlat2;
  let x_1370 : vec3<f32> = ((vec3<f32>(x_1363.x, x_1363.y, x_1363.z) * vec3<f32>(x_1365.x, x_1365.y, x_1365.z)) + vec3<f32>(0.238080993f, 0.238080993f, 0.238080993f));
  let x_1371 : vec4<f32> = u_xlat0;
  u_xlat0 = vec4<f32>(x_1370.x, x_1370.y, x_1370.z, x_1371.w);
  let x_1373 : vec4<f32> = u_xlat1;
  let x_1375 : vec4<f32> = u_xlat0;
  let x_1377 : vec3<f32> = (vec3<f32>(x_1373.x, x_1373.y, x_1373.z) / vec3<f32>(x_1375.x, x_1375.y, x_1375.z));
  let x_1378 : vec4<f32> = u_xlat0;
  u_xlat0 = vec4<f32>(x_1377.x, x_1377.y, x_1377.z, x_1378.w);
  let x_1384 : vec4<f32> = u_xlat0;
  u_xlat1.x = dot(vec3<f32>(0.662454188f, 0.134004205f, 0.156187683f), vec3<f32>(x_1384.x, x_1384.y, x_1384.z));
  let x_1392 : vec4<f32> = u_xlat0;
  u_xlat1.y = dot(vec3<f32>(0.272228718f, 0.674081743f, 0.053689517f), vec3<f32>(x_1392.x, x_1392.y, x_1392.z));
  let x_1400 : vec4<f32> = u_xlat0;
  u_xlat1.z = dot(vec3<f32>(-0.00557464967f, 0.0040607336f, 1.010339141f), vec3<f32>(x_1400.x, x_1400.y, x_1400.z));
  let x_1404 : vec4<f32> = u_xlat1;
  u_xlat0.x = dot(vec3<f32>(x_1404.x, x_1404.y, x_1404.z), vec3<f32>(1.0f, 1.0f, 1.0f));
  let x_1409 : f32 = u_xlat0.x;
  u_xlat0.x = max(x_1409, 0.0001f);
  let x_1412 : vec4<f32> = u_xlat1;
  let x_1414 : vec4<f32> = u_xlat0;
  let x_1416 : vec2<f32> = (vec2<f32>(x_1412.x, x_1412.y) / vec2<f32>(x_1414.x, x_1414.x));
  let x_1417 : vec4<f32> = u_xlat0;
  u_xlat0 = vec4<f32>(x_1416.x, x_1416.y, x_1417.z, x_1417.w);
  let x_1420 : f32 = u_xlat1.y;
  u_xlat18 = max(x_1420, 0.0f);
  let x_1422 : f32 = u_xlat18;
  u_xlat18 = min(x_1422, 65504.0f);
  let x_1425 : f32 = u_xlat18;
  u_xlat18 = log2(x_1425);
  let x_1427 : f32 = u_xlat18;
  u_xlat18 = (x_1427 * 0.981100023f);
  let x_1430 : f32 = u_xlat18;
  u_xlat1.y = exp2(x_1430);
  let x_1434 : f32 = u_xlat0.y;
  u_xlat18 = max(x_1434, 0.0001f);
  let x_1437 : f32 = u_xlat1.y;
  let x_1438 : f32 = u_xlat18;
  u_xlat18 = (x_1437 / x_1438);
  let x_1441 : f32 = u_xlat0.x;
  u_xlat19 = (-(x_1441) + 1.0f);
  let x_1445 : f32 = u_xlat0.y;
  let x_1447 : f32 = u_xlat19;
  u_xlat0.z = (-(x_1445) + x_1447);
  let x_1450 : f32 = u_xlat18;
  let x_1452 : vec4<f32> = u_xlat0;
  let x_1454 : vec2<f32> = (vec2<f32>(x_1450, x_1450) * vec2<f32>(x_1452.x, x_1452.z));
  let x_1455 : vec4<f32> = u_xlat1;
  u_xlat1 = vec4<f32>(x_1454.x, x_1455.y, x_1454.y, x_1455.w);
  let x_1461 : vec4<f32> = u_xlat1;
  u_xlat0.x = dot(vec3<f32>(1.641023397f, -0.324803293f, -0.236424699f), vec3<f32>(x_1461.x, x_1461.y, x_1461.z));
  let x_1469 : vec4<f32> = u_xlat1;
  u_xlat0.y = dot(vec3<f32>(-0.663662851f, 1.61533165f, 0.016756348f), vec3<f32>(x_1469.x, x_1469.y, x_1469.z));
  let x_1477 : vec4<f32> = u_xlat1;
  u_xlat0.z = dot(vec3<f32>(0.011721894f, -0.008284442f, 0.988394856f), vec3<f32>(x_1477.x, x_1477.y, x_1477.z));
  let x_1481 : vec4<f32> = u_xlat0;
  u_xlat18 = dot(vec3<f32>(x_1481.x, x_1481.y, x_1481.z), vec3<f32>(0.272228986f, 0.674081981f, 0.053689498f));
  let x_1484 : f32 = u_xlat18;
  let x_1487 : vec4<f32> = u_xlat0;
  let x_1489 : vec3<f32> = (-(vec3<f32>(x_1484, x_1484, x_1484)) + vec3<f32>(x_1487.x, x_1487.y, x_1487.z));
  let x_1490 : vec4<f32> = u_xlat0;
  u_xlat0 = vec4<f32>(x_1489.x, x_1489.y, x_1489.z, x_1490.w);
  let x_1492 : vec4<f32> = u_xlat0;
  let x_1497 : f32 = u_xlat18;
  let x_1499 : vec3<f32> = ((vec3<f32>(x_1492.x, x_1492.y, x_1492.z) * vec3<f32>(0.930000007f, 0.930000007f, 0.930000007f)) + vec3<f32>(x_1497, x_1497, x_1497));
  let x_1500 : vec4<f32> = u_xlat0;
  u_xlat0 = vec4<f32>(x_1499.x, x_1499.y, x_1499.z, x_1500.w);
  let x_1502 : vec4<f32> = u_xlat0;
  u_xlat1.x = dot(vec3<f32>(0.662454188f, 0.134004205f, 0.156187683f), vec3<f32>(x_1502.x, x_1502.y, x_1502.z));
  let x_1506 : vec4<f32> = u_xlat0;
  u_xlat1.y = dot(vec3<f32>(0.272228718f, 0.674081743f, 0.053689517f), vec3<f32>(x_1506.x, x_1506.y, x_1506.z));
  let x_1510 : vec4<f32> = u_xlat0;
  u_xlat1.z = dot(vec3<f32>(-0.00557464967f, 0.0040607336f, 1.010339141f), vec3<f32>(x_1510.x, x_1510.y, x_1510.z));
  let x_1518 : vec4<f32> = u_xlat1;
  u_xlat0.x = dot(vec3<f32>(0.987223983f, -0.00611327f, 0.015953301f), vec3<f32>(x_1518.x, x_1518.y, x_1518.z));
  let x_1526 : vec4<f32> = u_xlat1;
  u_xlat0.y = dot(vec3<f32>(-0.00759836f, 1.001860023f, 0.0053302f), vec3<f32>(x_1526.x, x_1526.y, x_1526.z));
  let x_1534 : vec4<f32> = u_xlat1;
  u_xlat0.z = dot(vec3<f32>(0.00307257f, -0.00509595f, 1.081680059f), vec3<f32>(x_1534.x, x_1534.y, x_1534.z));
  let x_1542 : vec4<f32> = u_xlat0;
  u_xlat1.x = dot(vec3<f32>(3.240969896f, -1.537383199f, -0.498610765f), vec3<f32>(x_1542.x, x_1542.y, x_1542.z));
  let x_1547 : f32 = u_xlat1.x;
  u_xlat1.x = clamp(x_1547, 0.0f, 1.0f);
  let x_1554 : vec4<f32> = u_xlat0;
  u_xlat1.y = dot(vec3<f32>(-0.969243646f, 1.875967503f, 0.041555058f), vec3<f32>(x_1554.x, x_1554.y, x_1554.z));
  let x_1559 : f32 = u_xlat1.y;
  u_xlat1.y = clamp(x_1559, 0.0f, 1.0f);
  let x_1566 : vec4<f32> = u_xlat0;
  u_xlat1.z = dot(vec3<f32>(0.05563008f, -0.203976959f, 1.05697155f), vec3<f32>(x_1566.x, x_1566.y, x_1566.z));
  let x_1571 : f32 = u_xlat1.z;
  u_xlat1.z = clamp(x_1571, 0.0f, 1.0f);
  let x_1576 : f32 = x_25.x_UserLut_Params.w;
  u_xlatb0.x = (0.0f < x_1576);
  let x_1580 : bool = u_xlatb0.x;
  if (x_1580) {
    let x_1583 : vec4<f32> = u_xlat1;
    let x_1587 : vec3<f32> = (vec3<f32>(x_1583.x, x_1583.y, x_1583.z) * vec3<f32>(12.920000076f, 12.920000076f, 12.920000076f));
    let x_1588 : vec4<f32> = u_xlat0;
    u_xlat0 = vec4<f32>(x_1587.x, x_1587.y, x_1587.z, x_1588.w);
    let x_1590 : vec4<f32> = u_xlat1;
    let x_1592 : vec3<f32> = log2(vec3<f32>(x_1590.x, x_1590.y, x_1590.z));
    let x_1593 : vec4<f32> = u_xlat2;
    u_xlat2 = vec4<f32>(x_1592.x, x_1592.y, x_1592.z, x_1593.w);
    let x_1595 : vec4<f32> = u_xlat2;
    let x_1599 : vec3<f32> = (vec3<f32>(x_1595.x, x_1595.y, x_1595.z) * vec3<f32>(0.416666657f, 0.416666657f, 0.416666657f));
    let x_1600 : vec4<f32> = u_xlat2;
    u_xlat2 = vec4<f32>(x_1599.x, x_1599.y, x_1599.z, x_1600.w);
    let x_1602 : vec4<f32> = u_xlat2;
    let x_1604 : vec3<f32> = exp2(vec3<f32>(x_1602.x, x_1602.y, x_1602.z));
    let x_1605 : vec4<f32> = u_xlat2;
    u_xlat2 = vec4<f32>(x_1604.x, x_1604.y, x_1604.z, x_1605.w);
    let x_1607 : vec4<f32> = u_xlat2;
    let x_1614 : vec3<f32> = ((vec3<f32>(x_1607.x, x_1607.y, x_1607.z) * vec3<f32>(1.054999948f, 1.054999948f, 1.054999948f)) + vec3<f32>(-0.055f, -0.055f, -0.055f));
    let x_1615 : vec4<f32> = u_xlat2;
    u_xlat2 = vec4<f32>(x_1614.x, x_1614.y, x_1614.z, x_1615.w);
    let x_1619 : vec4<f32> = u_xlat1;
    let x_1621 : vec4<bool> = (vec4<f32>(0.0031308f, 0.0031308f, 0.0031308f, 0.0f) >= vec4<f32>(x_1619.x, x_1619.y, x_1619.z, x_1619.x));
    u_xlatb3 = vec3<bool>(x_1621.x, x_1621.y, x_1621.z);
    let x_1624 : vec4<f32> = u_xlat0;
    hlslcc_movcTemp = x_1624;
    let x_1626 : bool = u_xlatb3.x;
    if (x_1626) {
      let x_1631 : f32 = u_xlat0.x;
      x_1627 = x_1631;
    } else {
      let x_1634 : f32 = u_xlat2.x;
      x_1627 = x_1634;
    }
    let x_1635 : f32 = x_1627;
    hlslcc_movcTemp.x = x_1635;
    let x_1638 : bool = u_xlatb3.y;
    if (x_1638) {
      let x_1643 : f32 = u_xlat0.y;
      x_1639 = x_1643;
    } else {
      let x_1646 : f32 = u_xlat2.y;
      x_1639 = x_1646;
    }
    let x_1647 : f32 = x_1639;
    hlslcc_movcTemp.y = x_1647;
    let x_1650 : bool = u_xlatb3.z;
    if (x_1650) {
      let x_1655 : f32 = u_xlat0.z;
      x_1651 = x_1655;
    } else {
      let x_1658 : f32 = u_xlat2.z;
      x_1651 = x_1658;
    }
    let x_1659 : f32 = x_1651;
    hlslcc_movcTemp.z = x_1659;
    let x_1661 : vec4<f32> = hlslcc_movcTemp;
    u_xlat0 = x_1661;
    let x_1662 : vec4<f32> = u_xlat0;
    let x_1665 : vec4<f32> = x_25.x_UserLut_Params;
    let x_1667 : vec3<f32> = (vec3<f32>(x_1662.z, x_1662.x, x_1662.y) * vec3<f32>(x_1665.z, x_1665.z, x_1665.z));
    let x_1668 : vec4<f32> = u_xlat2;
    u_xlat2 = vec4<f32>(x_1667.x, x_1667.y, x_1667.z, x_1668.w);
    let x_1671 : f32 = u_xlat2.x;
    u_xlat18 = floor(x_1671);
    let x_1674 : vec4<f32> = x_25.x_UserLut_Params;
    let x_1676 : vec2<f32> = (vec2<f32>(x_1674.x, x_1674.y) * vec2<f32>(0.5f, 0.5f));
    let x_1677 : vec4<f32> = u_xlat2;
    u_xlat2 = vec4<f32>(x_1676.x, x_1677.y, x_1677.z, x_1676.y);
    let x_1679 : vec4<f32> = u_xlat2;
    let x_1682 : vec4<f32> = x_25.x_UserLut_Params;
    let x_1685 : vec4<f32> = u_xlat2;
    let x_1687 : vec2<f32> = ((vec2<f32>(x_1679.y, x_1679.z) * vec2<f32>(x_1682.x, x_1682.y)) + vec2<f32>(x_1685.x, x_1685.w));
    let x_1688 : vec4<f32> = u_xlat2;
    u_xlat2 = vec4<f32>(x_1688.x, x_1687.x, x_1687.y, x_1688.w);
    let x_1690 : f32 = u_xlat18;
    let x_1692 : f32 = x_25.x_UserLut_Params.y;
    let x_1695 : f32 = u_xlat2.y;
    u_xlat2.x = ((x_1690 * x_1692) + x_1695);
    let x_1702 : vec4<f32> = u_xlat2;
    let x_1704 : vec4<f32> = textureSampleLevel(x_UserLut, sampler_LinearClamp, vec2<f32>(x_1702.x, x_1702.z), 0.0f);
    let x_1705 : vec3<f32> = vec3<f32>(x_1704.x, x_1704.y, x_1704.z);
    let x_1706 : vec4<f32> = u_xlat3;
    u_xlat3 = vec4<f32>(x_1705.x, x_1705.y, x_1705.z, x_1706.w);
    let x_1709 : f32 = x_25.x_UserLut_Params.y;
    u_xlat4.x = x_1709;
    u_xlat4.y = 0.0f;
    let x_1712 : vec4<f32> = u_xlat2;
    let x_1714 : vec2<f32> = u_xlat4;
    let x_1715 : vec2<f32> = (vec2<f32>(x_1712.x, x_1712.z) + x_1714);
    let x_1716 : vec4<f32> = u_xlat2;
    u_xlat2 = vec4<f32>(x_1715.x, x_1715.y, x_1716.z, x_1716.w);
    let x_1721 : vec4<f32> = u_xlat2;
    let x_1723 : vec4<f32> = textureSampleLevel(x_UserLut, sampler_LinearClamp, vec2<f32>(x_1721.x, x_1721.y), 0.0f);
    let x_1724 : vec3<f32> = vec3<f32>(x_1723.x, x_1723.y, x_1723.z);
    let x_1725 : vec4<f32> = u_xlat2;
    u_xlat2 = vec4<f32>(x_1724.x, x_1724.y, x_1724.z, x_1725.w);
    let x_1728 : f32 = u_xlat0.z;
    let x_1730 : f32 = x_25.x_UserLut_Params.z;
    let x_1732 : f32 = u_xlat18;
    u_xlat18 = ((x_1728 * x_1730) + -(x_1732));
    let x_1735 : vec4<f32> = u_xlat3;
    let x_1738 : vec4<f32> = u_xlat2;
    let x_1740 : vec3<f32> = (-(vec3<f32>(x_1735.x, x_1735.y, x_1735.z)) + vec3<f32>(x_1738.x, x_1738.y, x_1738.z));
    let x_1741 : vec4<f32> = u_xlat2;
    u_xlat2 = vec4<f32>(x_1740.x, x_1740.y, x_1740.z, x_1741.w);
    let x_1743 : f32 = u_xlat18;
    let x_1745 : vec4<f32> = u_xlat2;
    let x_1748 : vec4<f32> = u_xlat3;
    let x_1750 : vec3<f32> = ((vec3<f32>(x_1743, x_1743, x_1743) * vec3<f32>(x_1745.x, x_1745.y, x_1745.z)) + vec3<f32>(x_1748.x, x_1748.y, x_1748.z));
    let x_1751 : vec4<f32> = u_xlat2;
    u_xlat2 = vec4<f32>(x_1750.x, x_1750.y, x_1750.z, x_1751.w);
    let x_1753 : vec4<f32> = u_xlat0;
    let x_1756 : vec4<f32> = u_xlat2;
    let x_1758 : vec3<f32> = (-(vec3<f32>(x_1753.x, x_1753.y, x_1753.z)) + vec3<f32>(x_1756.x, x_1756.y, x_1756.z));
    let x_1759 : vec4<f32> = u_xlat2;
    u_xlat2 = vec4<f32>(x_1758.x, x_1758.y, x_1758.z, x_1759.w);
    let x_1762 : vec4<f32> = x_25.x_UserLut_Params;
    let x_1764 : vec4<f32> = u_xlat2;
    let x_1767 : vec4<f32> = u_xlat0;
    let x_1769 : vec3<f32> = ((vec3<f32>(x_1762.w, x_1762.w, x_1762.w) * vec3<f32>(x_1764.x, x_1764.y, x_1764.z)) + vec3<f32>(x_1767.x, x_1767.y, x_1767.z));
    let x_1770 : vec4<f32> = u_xlat0;
    u_xlat0 = vec4<f32>(x_1769.x, x_1769.y, x_1769.z, x_1770.w);
    let x_1772 : vec4<f32> = u_xlat0;
    let x_1776 : vec3<f32> = (vec3<f32>(x_1772.x, x_1772.y, x_1772.z) * vec3<f32>(0.077399381f, 0.077399381f, 0.077399381f));
    let x_1777 : vec4<f32> = u_xlat2;
    u_xlat2 = vec4<f32>(x_1776.x, x_1776.y, x_1776.z, x_1777.w);
    let x_1779 : vec4<f32> = u_xlat0;
    let x_1783 : vec3<f32> = (vec3<f32>(x_1779.x, x_1779.y, x_1779.z) + vec3<f32>(0.055f, 0.055f, 0.055f));
    let x_1784 : vec4<f32> = u_xlat3;
    u_xlat3 = vec4<f32>(x_1783.x, x_1783.y, x_1783.z, x_1784.w);
    let x_1786 : vec4<f32> = u_xlat3;
    let x_1790 : vec3<f32> = (vec3<f32>(x_1786.x, x_1786.y, x_1786.z) * vec3<f32>(0.947867334f, 0.947867334f, 0.947867334f));
    let x_1791 : vec4<f32> = u_xlat3;
    u_xlat3 = vec4<f32>(x_1790.x, x_1790.y, x_1790.z, x_1791.w);
    let x_1793 : vec4<f32> = u_xlat3;
    let x_1796 : vec3<f32> = log2(abs(vec3<f32>(x_1793.x, x_1793.y, x_1793.z)));
    let x_1797 : vec4<f32> = u_xlat3;
    u_xlat3 = vec4<f32>(x_1796.x, x_1796.y, x_1796.z, x_1797.w);
    let x_1799 : vec4<f32> = u_xlat3;
    let x_1803 : vec3<f32> = (vec3<f32>(x_1799.x, x_1799.y, x_1799.z) * vec3<f32>(2.400000095f, 2.400000095f, 2.400000095f));
    let x_1804 : vec4<f32> = u_xlat3;
    u_xlat3 = vec4<f32>(x_1803.x, x_1803.y, x_1803.z, x_1804.w);
    let x_1806 : vec4<f32> = u_xlat3;
    let x_1808 : vec3<f32> = exp2(vec3<f32>(x_1806.x, x_1806.y, x_1806.z));
    let x_1809 : vec4<f32> = u_xlat3;
    u_xlat3 = vec4<f32>(x_1808.x, x_1808.y, x_1808.z, x_1809.w);
    let x_1813 : vec4<f32> = u_xlat0;
    let x_1815 : vec4<bool> = (vec4<f32>(0.040449999f, 0.040449999f, 0.040449999f, 0.0f) >= vec4<f32>(x_1813.x, x_1813.y, x_1813.z, x_1813.x));
    u_xlatb0 = vec3<bool>(x_1815.x, x_1815.y, x_1815.z);
    let x_1818 : bool = u_xlatb0.x;
    if (x_1818) {
      let x_1823 : f32 = u_xlat2.x;
      x_1819 = x_1823;
    } else {
      let x_1826 : f32 = u_xlat3.x;
      x_1819 = x_1826;
    }
    let x_1827 : f32 = x_1819;
    u_xlat1.x = x_1827;
    let x_1830 : bool = u_xlatb0.y;
    if (x_1830) {
      let x_1835 : f32 = u_xlat2.y;
      x_1831 = x_1835;
    } else {
      let x_1838 : f32 = u_xlat3.y;
      x_1831 = x_1838;
    }
    let x_1839 : f32 = x_1831;
    u_xlat1.y = x_1839;
    let x_1842 : bool = u_xlatb0.z;
    if (x_1842) {
      let x_1847 : f32 = u_xlat2.z;
      x_1843 = x_1847;
    } else {
      let x_1850 : f32 = u_xlat3.z;
      x_1843 = x_1850;
    }
    let x_1851 : f32 = x_1843;
    u_xlat1.z = x_1851;
  }
  let x_1853 : vec4<f32> = u_xlat1;
  let x_1856 : vec4<f32> = x_25.x_Lut_Params;
  let x_1858 : vec3<f32> = (vec3<f32>(x_1853.z, x_1853.x, x_1853.y) * vec3<f32>(x_1856.z, x_1856.z, x_1856.z));
  let x_1859 : vec4<f32> = u_xlat0;
  u_xlat0 = vec4<f32>(x_1858.x, x_1858.y, x_1858.z, x_1859.w);
  let x_1862 : f32 = u_xlat0.x;
  u_xlat0.x = floor(x_1862);
  let x_1866 : vec4<f32> = x_25.x_Lut_Params;
  let x_1868 : vec2<f32> = (vec2<f32>(x_1866.x, x_1866.y) * vec2<f32>(0.5f, 0.5f));
  let x_1869 : vec4<f32> = u_xlat1;
  u_xlat1 = vec4<f32>(x_1868.x, x_1868.y, x_1869.z, x_1869.w);
  let x_1871 : vec4<f32> = u_xlat0;
  let x_1874 : vec4<f32> = x_25.x_Lut_Params;
  let x_1877 : vec4<f32> = u_xlat1;
  let x_1879 : vec2<f32> = ((vec2<f32>(x_1871.y, x_1871.z) * vec2<f32>(x_1874.x, x_1874.y)) + vec2<f32>(x_1877.x, x_1877.y));
  let x_1880 : vec4<f32> = u_xlat2;
  u_xlat2 = vec4<f32>(x_1880.x, x_1879.x, x_1879.y, x_1880.w);
  let x_1883 : f32 = u_xlat0.x;
  let x_1885 : f32 = x_25.x_Lut_Params.y;
  let x_1888 : f32 = u_xlat2.y;
  u_xlat2.x = ((x_1883 * x_1885) + x_1888);
  let x_1895 : vec4<f32> = u_xlat2;
  let x_1897 : vec4<f32> = textureSampleLevel(x_InternalLut, sampler_LinearClamp, vec2<f32>(x_1895.x, x_1895.z), 0.0f);
  u_xlat6 = vec3<f32>(x_1897.x, x_1897.y, x_1897.z);
  let x_1900 : f32 = x_25.x_Lut_Params.y;
  u_xlat1.x = x_1900;
  u_xlat1.y = 0.0f;
  let x_1903 : vec4<f32> = u_xlat1;
  let x_1905 : vec4<f32> = u_xlat2;
  let x_1907 : vec2<f32> = (vec2<f32>(x_1903.x, x_1903.y) + vec2<f32>(x_1905.x, x_1905.z));
  let x_1908 : vec4<f32> = u_xlat1;
  u_xlat1 = vec4<f32>(x_1907.x, x_1907.y, x_1908.z, x_1908.w);
  let x_1913 : vec4<f32> = u_xlat1;
  let x_1915 : vec4<f32> = textureSampleLevel(x_InternalLut, sampler_LinearClamp, vec2<f32>(x_1913.x, x_1913.y), 0.0f);
  let x_1916 : vec3<f32> = vec3<f32>(x_1915.x, x_1915.y, x_1915.z);
  let x_1917 : vec4<f32> = u_xlat1;
  u_xlat1 = vec4<f32>(x_1916.x, x_1916.y, x_1917.z, x_1916.z);
  let x_1920 : f32 = u_xlat1.z;
  let x_1922 : f32 = x_25.x_Lut_Params.z;
  let x_1925 : f32 = u_xlat0.x;
  u_xlat0.x = ((x_1920 * x_1922) + -(x_1925));
  let x_1929 : vec3<f32> = u_xlat6;
  let x_1931 : vec4<f32> = u_xlat1;
  let x_1933 : vec3<f32> = (-(x_1929) + vec3<f32>(x_1931.x, x_1931.y, x_1931.w));
  let x_1934 : vec4<f32> = u_xlat1;
  u_xlat1 = vec4<f32>(x_1933.x, x_1933.y, x_1933.z, x_1934.w);
  let x_1936 : vec4<f32> = u_xlat0;
  let x_1938 : vec4<f32> = u_xlat1;
  let x_1941 : vec3<f32> = u_xlat6;
  let x_1942 : vec3<f32> = ((vec3<f32>(x_1936.x, x_1936.x, x_1936.x) * vec3<f32>(x_1938.x, x_1938.y, x_1938.z)) + x_1941);
  let x_1943 : vec4<f32> = u_xlat0;
  u_xlat0 = vec4<f32>(x_1942.x, x_1942.y, x_1942.z, x_1943.w);
  let x_1945 : vec2<f32> = vs_TEXCOORD0;
  let x_1948 : vec4<f32> = x_25.x_Grain_TilingParams;
  let x_1952 : vec4<f32> = x_25.x_Grain_TilingParams;
  let x_1954 : vec2<f32> = ((x_1945 * vec2<f32>(x_1948.x, x_1948.y)) + vec2<f32>(x_1952.z, x_1952.w));
  let x_1955 : vec4<f32> = u_xlat1;
  u_xlat1 = vec4<f32>(x_1954.x, x_1954.y, x_1955.z, x_1955.w);
  let x_1962 : vec4<f32> = u_xlat1;
  let x_1965 : f32 = x_25.x_GlobalMipBias.x;
  let x_1966 : vec4<f32> = textureSampleBias(x_Grain_Texture, sampler_LinearRepeat, vec2<f32>(x_1962.x, x_1962.y), x_1965);
  u_xlat18 = x_1966.w;
  let x_1968 : f32 = u_xlat18;
  u_xlat18 = (x_1968 + -0.5f);
  let x_1970 : f32 = u_xlat18;
  let x_1971 : f32 = u_xlat18;
  u_xlat18 = (x_1970 + x_1971);
  let x_1973 : vec4<f32> = u_xlat0;
  u_xlat1.x = dot(vec3<f32>(x_1973.x, x_1973.y, x_1973.z), vec3<f32>(0.212672904f, 0.715152204f, 0.072175004f));
  let x_1982 : f32 = u_xlat1.x;
  u_xlat1.x = sqrt(x_1982);
  let x_1987 : f32 = x_25.x_Grain_Params.y;
  let x_1989 : f32 = u_xlat1.x;
  u_xlat1.x = ((x_1987 * -(x_1989)) + 1.0f);
  let x_1994 : f32 = u_xlat18;
  let x_1996 : vec4<f32> = u_xlat0;
  u_xlat7 = (vec3<f32>(x_1994, x_1994, x_1994) * vec3<f32>(x_1996.x, x_1996.y, x_1996.z));
  let x_1999 : vec3<f32> = u_xlat7;
  let x_2002 : vec2<f32> = x_25.x_Grain_Params;
  u_xlat7 = (x_1999 * vec3<f32>(x_2002.x, x_2002.x, x_2002.x));
  let x_2005 : vec3<f32> = u_xlat7;
  let x_2006 : vec4<f32> = u_xlat1;
  let x_2009 : vec4<f32> = u_xlat0;
  let x_2011 : vec3<f32> = ((x_2005 * vec3<f32>(x_2006.x, x_2006.x, x_2006.x)) + vec3<f32>(x_2009.x, x_2009.y, x_2009.z));
  let x_2012 : vec4<f32> = u_xlat0;
  u_xlat0 = vec4<f32>(x_2011.x, x_2011.y, x_2011.z, x_2012.w);
  let x_2016 : vec4<f32> = u_xlat0;
  let x_2018 : vec3<f32> = sqrt(vec3<f32>(x_2016.x, x_2016.y, x_2016.z));
  let x_2019 : vec4<f32> = SV_Target0;
  SV_Target0 = vec4<f32>(x_2018.x, x_2018.y, x_2018.z, x_2019.w);
  SV_Target0.w = 1.0f;
  return;
}

struct main_out {
  @location(0)
  SV_Target0_1 : vec4<f32>,
}

@fragment
fn main(@location(0) vs_TEXCOORD0_param : vec2<f32>, @builtin(position) gl_FragCoord_param : vec4<f32>) -> main_out {
  vs_TEXCOORD0 = vs_TEXCOORD0_param;
  gl_FragCoord = gl_FragCoord_param;
  main_1();
  return main_out(SV_Target0);
}

