struct PGlobals {
  x_ScaledScreenParams : vec4<f32>,
  x_GlobalMipBias : vec2<f32>,
  @size(8)
  padding : u32,
  x_MainLightPosition : vec4<f32>,
  x_MainLightColor : vec4<f32>,
  x_AmbientOcclusionParam : vec4<f32>,
  x_AdditionalLightsCount : vec4<f32>,
  x_WorldSpaceCameraPos : vec3<f32>,
  @size(4)
  padding_1 : u32,
  x_ProjectionParams : vec4<f32>,
  x_ScaleBiasRt : vec4<f32>,
  unity_FogParams : vec4<f32>,
  unity_FogColor : vec4<f32>,
  unity_MatrixV : mat4x4<f32>,
}

type Arr = array<mat4x4<f32>, 5u>;

struct MainLightShadows {
  x_MainLightWorldToShadow : Arr,
  x_CascadeShadowSplitSpheres0 : vec4<f32>,
  x_CascadeShadowSplitSpheres1 : vec4<f32>,
  x_CascadeShadowSplitSpheres2 : vec4<f32>,
  x_CascadeShadowSplitSpheres3 : vec4<f32>,
  x_CascadeShadowSplitSphereRadii : vec4<f32>,
  x_MainLightShadowOffset0 : vec4<f32>,
  x_MainLightShadowOffset1 : vec4<f32>,
  x_MainLightShadowParams : vec4<f32>,
  x_MainLightShadowmapSize : vec4<f32>,
}

type Arr_1 = array<vec4<f32>, 2u>;

struct UnityPerDraw {
  unity_ObjectToWorld : mat4x4<f32>,
  unity_WorldToObject : mat4x4<f32>,
  unity_LODFade : vec4<f32>,
  unity_WorldTransformParams : vec4<f32>,
  unity_RenderingLayer : vec4<f32>,
  unity_LightData : vec4<f32>,
  unity_LightIndices : Arr_1,
  unity_ProbesOcclusion : vec4<f32>,
  unity_SpecCube0_HDR : vec4<f32>,
  unity_SpecCube1_HDR : vec4<f32>,
  unity_SpecCube0_BoxMax : vec4<f32>,
  unity_SpecCube0_BoxMin : vec4<f32>,
  unity_SpecCube0_ProbePosition : vec4<f32>,
  unity_SpecCube1_BoxMax : vec4<f32>,
  unity_SpecCube1_BoxMin : vec4<f32>,
  unity_SpecCube1_ProbePosition : vec4<f32>,
  unity_LightmapST : vec4<f32>,
  unity_DynamicLightmapST : vec4<f32>,
  unity_SHAr : vec4<f32>,
  unity_SHAg : vec4<f32>,
  unity_SHAb : vec4<f32>,
  unity_SHBr : vec4<f32>,
  unity_SHBg : vec4<f32>,
  unity_SHBb : vec4<f32>,
  unity_SHC : vec4<f32>,
  unity_RendererBounds_Min : vec4<f32>,
  unity_RendererBounds_Max : vec4<f32>,
  unity_MatrixPreviousM : mat4x4<f32>,
  unity_MatrixPreviousMI : mat4x4<f32>,
  unity_MotionVectorsParams : vec4<f32>,
  unity_SpriteColor : vec4<f32>,
  unity_SpriteProps : vec4<f32>,
}

type Arr_2 = array<vec4<f32>, 256u>;

type Arr_3 = array<vec4<f32>, 256u>;

type Arr_4 = array<vec4<f32>, 256u>;

type Arr_5 = array<vec4<f32>, 256u>;

type Arr_6 = array<vec4<f32>, 256u>;

struct strided_arr {
  @size(16)
  el : f32,
}

type Arr_7 = array<strided_arr, 256u>;

struct AdditionalLights {
  x_AdditionalLightsPosition : Arr_6,
  x_AdditionalLightsColor : Arr_6,
  x_AdditionalLightsAttenuation : Arr_6,
  x_AdditionalLightsSpotDir : Arr_6,
  x_AdditionalLightsOcclusionProbes : Arr_6,
  x_AdditionalLightsLayerMasks : Arr_7,
}

var<private> gl_FragCoord : vec4<f32>;

@group(0) @binding(3) var x_MainTex : texture_2d<f32>;

@group(0) @binding(9) var sampler_MainTex : sampler;

var<private> vs_TEXCOORD0 : vec4<f32>;

@group(1) @binding(0) var<uniform> x_44 : PGlobals;

@group(0) @binding(4) var x_MetallicTex : texture_2d<f32>;

@group(0) @binding(10) var sampler_MetallicTex : sampler;

var<private> vs_TEXCOORD3 : vec4<f32>;

var<private> vs_TEXCOORD7 : vec3<f32>;

@group(1) @binding(3) var<uniform> x_91 : MainLightShadows;

@group(0) @binding(2) var unity_LightmapInd : texture_2d<f32>;

@group(0) @binding(8) var samplerunity_Lightmap : sampler;

@group(0) @binding(1) var unity_Lightmap : texture_2d<f32>;

@group(0) @binding(5) var x_ScreenSpaceOcclusionTexture : texture_2d<f32>;

@group(0) @binding(11) var sampler_ScreenSpaceOcclusionTexture : sampler;

@group(0) @binding(6) var x_MainLightShadowmapTexture : texture_depth_2d;

@group(0) @binding(12) var sampler_MainLightShadowmapTexture : sampler_comparison;

var<private> vs_TEXCOORD4 : vec4<f32>;

var<private> vs_TEXCOORD5 : vec4<f32>;

@group(0) @binding(0) var unity_SpecCube0 : texture_cube<f32>;

@group(0) @binding(7) var samplerunity_SpecCube0 : sampler;

@group(1) @binding(2) var<uniform> x_1915 : UnityPerDraw;

@group(1) @binding(1) var<uniform> x_2154 : AdditionalLights;

var<private> SV_Target0 : vec4<f32>;

fn main_1() {
  var hlslcc_FragCoord : vec4<f32>;
  var u_xlat0 : vec4<f32>;
  var u_xlat1 : f32;
  var u_xlat21 : vec3<f32>;
  var u_xlat2 : vec4<f32>;
  var u_xlat3 : vec4<f32>;
  var u_xlat4 : vec3<f32>;
  var u_xlat5 : vec3<f32>;
  var u_xlatb2 : vec4<bool>;
  var u_xlatu2 : u32;
  var u_xlati2 : i32;
  var u_xlat22 : vec3<f32>;
  var u_xlat62 : f32;
  var u_xlat63 : f32;
  var u_xlat24 : f32;
  var u_xlat64 : f32;
  var u_xlat60 : f32;
  var u_xlat44 : f32;
  var u_xlatb65 : bool;
  var u_xlat6 : vec4<f32>;
  var txVec0 : vec3<f32>;
  var u_xlat7 : vec4<f32>;
  var txVec1 : vec3<f32>;
  var txVec2 : vec3<f32>;
  var txVec3 : vec3<f32>;
  var u_xlat65 : f32;
  var u_xlatb6 : bool;
  var u_xlat46 : vec2<f32>;
  var u_xlat8 : vec4<f32>;
  var u_xlat48 : vec2<f32>;
  var u_xlat9 : vec4<f32>;
  var u_xlat10 : vec4<f32>;
  var u_xlat11 : vec4<f32>;
  var u_xlat12 : vec4<f32>;
  var u_xlat13 : vec4<f32>;
  var u_xlat14 : vec4<f32>;
  var txVec4 : vec3<f32>;
  var u_xlat26 : f32;
  var txVec5 : vec3<f32>;
  var txVec6 : vec3<f32>;
  var txVec7 : vec3<f32>;
  var txVec8 : vec3<f32>;
  var txVec9 : vec3<f32>;
  var txVec10 : vec3<f32>;
  var txVec11 : vec3<f32>;
  var txVec12 : vec3<f32>;
  var u_xlat27 : vec3<f32>;
  var u_xlat15 : vec4<f32>;
  var u_xlat16 : vec4<f32>;
  var u_xlat28 : vec2<f32>;
  var u_xlat54 : vec2<f32>;
  var u_xlat49 : vec2<f32>;
  var u_xlat17 : vec4<f32>;
  var u_xlat18 : vec4<f32>;
  var u_xlat19 : vec4<f32>;
  var txVec13 : vec3<f32>;
  var txVec14 : vec3<f32>;
  var u_xlat68 : f32;
  var txVec15 : vec3<f32>;
  var txVec16 : vec3<f32>;
  var u_xlat66 : f32;
  var txVec17 : vec3<f32>;
  var txVec18 : vec3<f32>;
  var txVec19 : vec3<f32>;
  var txVec20 : vec3<f32>;
  var txVec21 : vec3<f32>;
  var txVec22 : vec3<f32>;
  var txVec23 : vec3<f32>;
  var txVec24 : vec3<f32>;
  var txVec25 : vec3<f32>;
  var txVec26 : vec3<f32>;
  var txVec27 : vec3<f32>;
  var txVec28 : vec3<f32>;
  var txVec29 : vec3<f32>;
  var u_xlatb22 : bool;
  var u_xlatb42 : bool;
  var x_1769 : f32;
  var u_xlat42 : f32;
  var u_xlat29 : vec3<f32>;
  var u_xlatu60 : u32;
  var u_xlatu_loop_1 : u32;
  var u_xlatu63 : u32;
  var u_xlati65 : i32;
  var indexable : array<vec4<u32>, 4u>;
  var u_xlati63 : i32;
  var u_xlat67 : f32;
  var u_xlat_precise_vec4 : vec4<f32>;
  var u_xlat_precise_ivec4 : vec4<i32>;
  var u_xlat_precise_bvec4 : vec4<bool>;
  var u_xlat_precise_uvec4 : vec4<u32>;
  let x_13 : vec4<f32> = gl_FragCoord;
  let x_14 : vec3<f32> = vec3<f32>(x_13.x, x_13.y, x_13.z);
  let x_20 : f32 = gl_FragCoord.w;
  hlslcc_FragCoord = vec4<f32>(x_14.x, x_14.y, x_14.z, (1.0f / x_20));
  let x_39 : vec4<f32> = vs_TEXCOORD0;
  let x_50 : f32 = x_44.x_GlobalMipBias.x;
  let x_51 : vec4<f32> = textureSampleBias(x_MainTex, sampler_MainTex, vec2<f32>(x_39.x, x_39.y), x_50);
  u_xlat0 = x_51;
  let x_59 : vec4<f32> = vs_TEXCOORD0;
  let x_62 : f32 = x_44.x_GlobalMipBias.x;
  let x_63 : vec4<f32> = textureSampleBias(x_MetallicTex, sampler_MetallicTex, vec2<f32>(x_59.x, x_59.y), x_62);
  u_xlat1 = x_63.x;
  let x_68 : vec4<f32> = vs_TEXCOORD3;
  let x_70 : vec4<f32> = vs_TEXCOORD3;
  u_xlat21.x = dot(vec3<f32>(x_68.x, x_68.y, x_68.z), vec3<f32>(x_70.x, x_70.y, x_70.z));
  let x_75 : f32 = u_xlat21.x;
  u_xlat21.x = inverseSqrt(x_75);
  let x_78 : vec3<f32> = u_xlat21;
  let x_80 : vec4<f32> = vs_TEXCOORD3;
  u_xlat21 = (vec3<f32>(x_78.x, x_78.x, x_78.x) * vec3<f32>(x_80.x, x_80.y, x_80.z));
  let x_86 : vec3<f32> = vs_TEXCOORD7;
  let x_94 : vec4<f32> = x_91.x_CascadeShadowSplitSpheres0;
  let x_97 : vec3<f32> = (x_86 + -(vec3<f32>(x_94.x, x_94.y, x_94.z)));
  let x_98 : vec4<f32> = u_xlat2;
  u_xlat2 = vec4<f32>(x_97.x, x_97.y, x_97.z, x_98.w);
  let x_101 : vec3<f32> = vs_TEXCOORD7;
  let x_104 : vec4<f32> = x_91.x_CascadeShadowSplitSpheres1;
  let x_107 : vec3<f32> = (x_101 + -(vec3<f32>(x_104.x, x_104.y, x_104.z)));
  let x_108 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_107.x, x_107.y, x_107.z, x_108.w);
  let x_111 : vec3<f32> = vs_TEXCOORD7;
  let x_114 : vec4<f32> = x_91.x_CascadeShadowSplitSpheres2;
  u_xlat4 = (x_111 + -(vec3<f32>(x_114.x, x_114.y, x_114.z)));
  let x_119 : vec3<f32> = vs_TEXCOORD7;
  let x_122 : vec4<f32> = x_91.x_CascadeShadowSplitSpheres3;
  u_xlat5 = (x_119 + -(vec3<f32>(x_122.x, x_122.y, x_122.z)));
  let x_126 : vec4<f32> = u_xlat2;
  let x_128 : vec4<f32> = u_xlat2;
  u_xlat2.x = dot(vec3<f32>(x_126.x, x_126.y, x_126.z), vec3<f32>(x_128.x, x_128.y, x_128.z));
  let x_132 : vec4<f32> = u_xlat3;
  let x_134 : vec4<f32> = u_xlat3;
  u_xlat2.y = dot(vec3<f32>(x_132.x, x_132.y, x_132.z), vec3<f32>(x_134.x, x_134.y, x_134.z));
  let x_139 : vec3<f32> = u_xlat4;
  let x_140 : vec3<f32> = u_xlat4;
  u_xlat2.z = dot(x_139, x_140);
  let x_144 : vec3<f32> = u_xlat5;
  let x_145 : vec3<f32> = u_xlat5;
  u_xlat2.w = dot(x_144, x_145);
  let x_152 : vec4<f32> = u_xlat2;
  let x_155 : vec4<f32> = x_91.x_CascadeShadowSplitSphereRadii;
  u_xlatb2 = (x_152 < x_155);
  let x_159 : bool = u_xlatb2.x;
  u_xlat3.x = select(0.0f, 1.0f, x_159);
  let x_164 : bool = u_xlatb2.y;
  u_xlat3.y = select(0.0f, 1.0f, x_164);
  let x_168 : bool = u_xlatb2.z;
  u_xlat3.z = select(0.0f, 1.0f, x_168);
  let x_172 : bool = u_xlatb2.w;
  u_xlat3.w = select(0.0f, 1.0f, x_172);
  let x_176 : bool = u_xlatb2.x;
  u_xlat2.x = select(-0.0f, -1.0f, x_176);
  let x_182 : bool = u_xlatb2.y;
  u_xlat2.y = select(-0.0f, -1.0f, x_182);
  let x_186 : bool = u_xlatb2.z;
  u_xlat2.z = select(-0.0f, -1.0f, x_186);
  let x_189 : vec4<f32> = u_xlat2;
  let x_191 : vec4<f32> = u_xlat3;
  let x_193 : vec3<f32> = (vec3<f32>(x_189.x, x_189.y, x_189.z) + vec3<f32>(x_191.y, x_191.z, x_191.w));
  let x_194 : vec4<f32> = u_xlat2;
  u_xlat2 = vec4<f32>(x_193.x, x_193.y, x_193.z, x_194.w);
  let x_196 : vec4<f32> = u_xlat2;
  let x_199 : vec3<f32> = max(vec3<f32>(x_196.x, x_196.y, x_196.z), vec3<f32>(0.0f, 0.0f, 0.0f));
  let x_200 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_200.x, x_199.x, x_199.y, x_199.z);
  let x_202 : vec4<f32> = u_xlat3;
  u_xlat2.x = dot(x_202, vec4<f32>(4.0f, 3.0f, 2.0f, 1.0f));
  let x_210 : f32 = u_xlat2.x;
  u_xlat2.x = (-(x_210) + 4.0f);
  let x_217 : f32 = u_xlat2.x;
  u_xlatu2 = u32(x_217);
  let x_221 : u32 = u_xlatu2;
  u_xlati2 = (bitcast<i32>(x_221) << bitcast<u32>(2i));
  let x_225 : vec3<f32> = vs_TEXCOORD7;
  let x_228 : i32 = u_xlati2;
  let x_231 : i32 = u_xlati2;
  let x_235 : vec4<f32> = x_91.x_MainLightWorldToShadow[((x_228 + 1i) / 4i)][((x_231 + 1i) % 4i)];
  u_xlat22 = (vec3<f32>(x_225.y, x_225.y, x_225.y) * vec3<f32>(x_235.x, x_235.y, x_235.z));
  let x_238 : i32 = u_xlati2;
  let x_240 : i32 = u_xlati2;
  let x_243 : vec4<f32> = x_91.x_MainLightWorldToShadow[(x_238 / 4i)][(x_240 % 4i)];
  let x_245 : vec3<f32> = vs_TEXCOORD7;
  let x_248 : vec3<f32> = u_xlat22;
  u_xlat22 = ((vec3<f32>(x_243.x, x_243.y, x_243.z) * vec3<f32>(x_245.x, x_245.x, x_245.x)) + x_248);
  let x_250 : i32 = u_xlati2;
  let x_253 : i32 = u_xlati2;
  let x_257 : vec4<f32> = x_91.x_MainLightWorldToShadow[((x_250 + 2i) / 4i)][((x_253 + 2i) % 4i)];
  let x_259 : vec3<f32> = vs_TEXCOORD7;
  let x_262 : vec3<f32> = u_xlat22;
  u_xlat22 = ((vec3<f32>(x_257.x, x_257.y, x_257.z) * vec3<f32>(x_259.z, x_259.z, x_259.z)) + x_262);
  let x_264 : vec3<f32> = u_xlat22;
  let x_265 : i32 = u_xlati2;
  let x_268 : i32 = u_xlati2;
  let x_272 : vec4<f32> = x_91.x_MainLightWorldToShadow[((x_265 + 3i) / 4i)][((x_268 + 3i) % 4i)];
  let x_274 : vec3<f32> = (x_264 + vec3<f32>(x_272.x, x_272.y, x_272.z));
  let x_275 : vec4<f32> = u_xlat2;
  u_xlat2 = vec4<f32>(x_274.x, x_274.y, x_274.z, x_275.w);
  let x_279 : f32 = vs_TEXCOORD7.y;
  let x_282 : f32 = x_44.unity_MatrixV[1i].z;
  u_xlat62 = (x_279 * x_282);
  let x_285 : f32 = x_44.unity_MatrixV[0i].z;
  let x_287 : f32 = vs_TEXCOORD7.x;
  let x_289 : f32 = u_xlat62;
  u_xlat62 = ((x_285 * x_287) + x_289);
  let x_292 : f32 = x_44.unity_MatrixV[2i].z;
  let x_294 : f32 = vs_TEXCOORD7.z;
  let x_296 : f32 = u_xlat62;
  u_xlat62 = ((x_292 * x_294) + x_296);
  let x_298 : f32 = u_xlat62;
  let x_300 : f32 = x_44.unity_MatrixV[3i].z;
  u_xlat62 = (x_298 + x_300);
  let x_302 : f32 = u_xlat62;
  let x_306 : f32 = x_44.x_ProjectionParams.y;
  u_xlat62 = (-(x_302) + -(x_306));
  let x_309 : f32 = u_xlat62;
  u_xlat62 = max(x_309, 0.0f);
  let x_311 : f32 = u_xlat62;
  let x_314 : f32 = x_44.unity_FogParams.x;
  u_xlat62 = (x_311 * x_314);
  let x_321 : vec4<f32> = vs_TEXCOORD0;
  let x_324 : f32 = x_44.x_GlobalMipBias.x;
  let x_325 : vec4<f32> = textureSampleBias(unity_LightmapInd, samplerunity_Lightmap, vec2<f32>(x_321.z, x_321.w), x_324);
  u_xlat3 = x_325;
  let x_330 : vec4<f32> = vs_TEXCOORD0;
  let x_333 : f32 = x_44.x_GlobalMipBias.x;
  let x_334 : vec4<f32> = textureSampleBias(unity_Lightmap, samplerunity_Lightmap, vec2<f32>(x_330.z, x_330.w), x_333);
  u_xlat4 = vec3<f32>(x_334.x, x_334.y, x_334.z);
  let x_336 : vec4<f32> = u_xlat3;
  let x_340 : vec3<f32> = (vec3<f32>(x_336.x, x_336.y, x_336.z) + vec3<f32>(-0.5f, -0.5f, -0.5f));
  let x_341 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_340.x, x_340.y, x_340.z, x_341.w);
  let x_343 : vec3<f32> = u_xlat21;
  let x_344 : vec4<f32> = u_xlat3;
  u_xlat3.x = dot(x_343, vec3<f32>(x_344.x, x_344.y, x_344.z));
  let x_349 : f32 = u_xlat3.x;
  u_xlat3.x = (x_349 + 0.5f);
  let x_353 : vec4<f32> = u_xlat3;
  let x_355 : vec3<f32> = u_xlat4;
  let x_356 : vec3<f32> = (vec3<f32>(x_353.x, x_353.x, x_353.x) * x_355);
  let x_357 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_356.x, x_356.y, x_356.z, x_357.w);
  let x_361 : f32 = u_xlat3.w;
  u_xlat63 = max(x_361, 0.0001f);
  let x_364 : vec4<f32> = u_xlat3;
  let x_366 : f32 = u_xlat63;
  let x_368 : vec3<f32> = (vec3<f32>(x_364.x, x_364.y, x_364.z) / vec3<f32>(x_366, x_366, x_366));
  let x_369 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_368.x, x_368.y, x_368.z, x_369.w);
  let x_373 : vec4<f32> = x_44.x_ScaledScreenParams;
  let x_374 : vec2<f32> = vec2<f32>(x_373.x, x_373.y);
  let x_378 : vec2<f32> = (vec2<f32>(1.0f, 1.0f) / vec2<f32>(x_374.x, x_374.y));
  let x_379 : vec3<f32> = u_xlat4;
  u_xlat4 = vec3<f32>(x_378.x, x_378.y, x_379.z);
  let x_381 : vec3<f32> = u_xlat4;
  let x_383 : vec4<f32> = hlslcc_FragCoord;
  let x_385 : vec2<f32> = (vec2<f32>(x_381.x, x_381.y) * vec2<f32>(x_383.x, x_383.y));
  let x_386 : vec3<f32> = u_xlat4;
  u_xlat4 = vec3<f32>(x_385.x, x_385.y, x_386.z);
  let x_389 : f32 = u_xlat4.y;
  let x_392 : f32 = x_44.x_ScaleBiasRt.x;
  let x_395 : f32 = x_44.x_ScaleBiasRt.y;
  u_xlat63 = ((x_389 * x_392) + x_395);
  let x_397 : f32 = u_xlat63;
  u_xlat4.z = (-(x_397) + 1.0f);
  let x_401 : f32 = u_xlat1;
  u_xlat63 = ((-(x_401) * 0.959999979f) + 0.959999979f);
  let x_407 : f32 = u_xlat63;
  u_xlat24 = (-(x_407) + 1.0f);
  let x_410 : vec4<f32> = u_xlat0;
  let x_412 : f32 = u_xlat63;
  u_xlat5 = (vec3<f32>(x_410.x, x_410.y, x_410.z) * vec3<f32>(x_412, x_412, x_412));
  let x_415 : vec4<f32> = u_xlat0;
  let x_419 : vec3<f32> = (vec3<f32>(x_415.x, x_415.y, x_415.z) + vec3<f32>(-0.039999999f, -0.039999999f, -0.039999999f));
  let x_420 : vec4<f32> = u_xlat0;
  u_xlat0 = vec4<f32>(x_419.x, x_419.y, x_419.z, x_420.w);
  let x_422 : f32 = u_xlat1;
  let x_424 : vec4<f32> = u_xlat0;
  let x_429 : vec3<f32> = ((vec3<f32>(x_422, x_422, x_422) * vec3<f32>(x_424.x, x_424.y, x_424.z)) + vec3<f32>(0.039999999f, 0.039999999f, 0.039999999f));
  let x_430 : vec4<f32> = u_xlat0;
  u_xlat0 = vec4<f32>(x_429.x, x_429.y, x_429.z, x_430.w);
  let x_433 : f32 = u_xlat0.w;
  u_xlat1 = (-(x_433) + 1.0f);
  let x_436 : f32 = u_xlat1;
  let x_437 : f32 = u_xlat1;
  u_xlat63 = (x_436 * x_437);
  let x_439 : f32 = u_xlat63;
  u_xlat63 = max(x_439, 0.0078125f);
  let x_443 : f32 = u_xlat63;
  let x_444 : f32 = u_xlat63;
  u_xlat64 = (x_443 * x_444);
  let x_448 : f32 = u_xlat0.w;
  let x_449 : f32 = u_xlat24;
  u_xlat60 = (x_448 + x_449);
  let x_451 : f32 = u_xlat60;
  u_xlat60 = clamp(x_451, 0.0f, 1.0f);
  let x_453 : f32 = u_xlat63;
  u_xlat24 = ((x_453 * 4.0f) + 2.0f);
  let x_461 : vec3<f32> = u_xlat4;
  let x_464 : f32 = x_44.x_GlobalMipBias.x;
  let x_465 : vec4<f32> = textureSampleBias(x_ScreenSpaceOcclusionTexture, sampler_ScreenSpaceOcclusionTexture, vec2<f32>(x_461.x, x_461.z), x_464);
  u_xlat4.x = x_465.x;
  let x_470 : f32 = u_xlat4.x;
  u_xlat44 = (x_470 + -1.0f);
  let x_473 : f32 = x_44.x_AmbientOcclusionParam.w;
  let x_474 : f32 = u_xlat44;
  u_xlat44 = ((x_473 * x_474) + 1.0f);
  let x_478 : f32 = u_xlat4.x;
  u_xlat4.x = min(x_478, 1.0f);
  let x_483 : f32 = x_91.x_MainLightShadowParams.y;
  u_xlatb65 = (0.0f < x_483);
  let x_485 : bool = u_xlatb65;
  if (x_485) {
    let x_489 : f32 = x_91.x_MainLightShadowParams.y;
    u_xlatb65 = (x_489 == 1.0f);
    let x_491 : bool = u_xlatb65;
    if (x_491) {
      let x_495 : vec4<f32> = u_xlat2;
      let x_499 : vec4<f32> = x_91.x_MainLightShadowOffset0;
      u_xlat6 = (vec4<f32>(x_495.x, x_495.y, x_495.x, x_495.y) + x_499);
      let x_502 : vec4<f32> = u_xlat6;
      let x_503 : vec2<f32> = vec2<f32>(x_502.x, x_502.y);
      let x_505 : f32 = u_xlat2.z;
      txVec0 = vec3<f32>(x_503.x, x_503.y, x_505);
      let x_518 : vec3<f32> = txVec0;
      let x_520 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_518.xy, x_518.z);
      u_xlat7.x = x_520;
      let x_523 : vec4<f32> = u_xlat6;
      let x_524 : vec2<f32> = vec2<f32>(x_523.z, x_523.w);
      let x_526 : f32 = u_xlat2.z;
      txVec1 = vec3<f32>(x_524.x, x_524.y, x_526);
      let x_533 : vec3<f32> = txVec1;
      let x_535 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_533.xy, x_533.z);
      u_xlat7.y = x_535;
      let x_537 : vec4<f32> = u_xlat2;
      let x_540 : vec4<f32> = x_91.x_MainLightShadowOffset1;
      u_xlat6 = (vec4<f32>(x_537.x, x_537.y, x_537.x, x_537.y) + x_540);
      let x_543 : vec4<f32> = u_xlat6;
      let x_544 : vec2<f32> = vec2<f32>(x_543.x, x_543.y);
      let x_546 : f32 = u_xlat2.z;
      txVec2 = vec3<f32>(x_544.x, x_544.y, x_546);
      let x_553 : vec3<f32> = txVec2;
      let x_555 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_553.xy, x_553.z);
      u_xlat7.z = x_555;
      let x_558 : vec4<f32> = u_xlat6;
      let x_559 : vec2<f32> = vec2<f32>(x_558.z, x_558.w);
      let x_561 : f32 = u_xlat2.z;
      txVec3 = vec3<f32>(x_559.x, x_559.y, x_561);
      let x_568 : vec3<f32> = txVec3;
      let x_570 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_568.xy, x_568.z);
      u_xlat7.w = x_570;
      let x_573 : vec4<f32> = u_xlat7;
      u_xlat65 = dot(x_573, vec4<f32>(0.25f, 0.25f, 0.25f, 0.25f));
    } else {
      let x_580 : f32 = x_91.x_MainLightShadowParams.y;
      u_xlatb6 = (x_580 == 2.0f);
      let x_582 : bool = u_xlatb6;
      if (x_582) {
        let x_585 : vec4<f32> = u_xlat2;
        let x_588 : vec4<f32> = x_91.x_MainLightShadowmapSize;
        let x_592 : vec2<f32> = ((vec2<f32>(x_585.x, x_585.y) * vec2<f32>(x_588.z, x_588.w)) + vec2<f32>(0.5f, 0.5f));
        let x_593 : vec4<f32> = u_xlat6;
        u_xlat6 = vec4<f32>(x_592.x, x_592.y, x_593.z, x_593.w);
        let x_595 : vec4<f32> = u_xlat6;
        let x_597 : vec2<f32> = floor(vec2<f32>(x_595.x, x_595.y));
        let x_598 : vec4<f32> = u_xlat6;
        u_xlat6 = vec4<f32>(x_597.x, x_597.y, x_598.z, x_598.w);
        let x_602 : vec4<f32> = u_xlat2;
        let x_605 : vec4<f32> = x_91.x_MainLightShadowmapSize;
        let x_608 : vec4<f32> = u_xlat6;
        u_xlat46 = ((vec2<f32>(x_602.x, x_602.y) * vec2<f32>(x_605.z, x_605.w)) + -(vec2<f32>(x_608.x, x_608.y)));
        let x_612 : vec2<f32> = u_xlat46;
        u_xlat7 = (vec4<f32>(x_612.x, x_612.x, x_612.y, x_612.y) + vec4<f32>(0.5f, 1.0f, 0.5f, 1.0f));
        let x_617 : vec4<f32> = u_xlat7;
        let x_619 : vec4<f32> = u_xlat7;
        u_xlat8 = (vec4<f32>(x_617.x, x_617.x, x_617.z, x_617.z) * vec4<f32>(x_619.x, x_619.x, x_619.z, x_619.z));
        let x_622 : vec4<f32> = u_xlat8;
        let x_626 : vec2<f32> = (vec2<f32>(x_622.y, x_622.w) * vec2<f32>(0.079999998f, 0.079999998f));
        let x_627 : vec4<f32> = u_xlat7;
        u_xlat7 = vec4<f32>(x_626.x, x_627.y, x_626.y, x_627.w);
        let x_629 : vec4<f32> = u_xlat8;
        let x_632 : vec2<f32> = u_xlat46;
        let x_634 : vec2<f32> = ((vec2<f32>(x_629.x, x_629.z) * vec2<f32>(0.5f, 0.5f)) + -(x_632));
        let x_635 : vec4<f32> = u_xlat8;
        u_xlat8 = vec4<f32>(x_634.x, x_634.y, x_635.z, x_635.w);
        let x_638 : vec2<f32> = u_xlat46;
        u_xlat48 = (-(x_638) + vec2<f32>(1.0f, 1.0f));
        let x_642 : vec2<f32> = u_xlat46;
        let x_644 : vec2<f32> = min(x_642, vec2<f32>(0.0f, 0.0f));
        let x_645 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_644.x, x_644.y, x_645.z, x_645.w);
        let x_647 : vec4<f32> = u_xlat9;
        let x_650 : vec4<f32> = u_xlat9;
        let x_653 : vec2<f32> = u_xlat48;
        let x_654 : vec2<f32> = ((-(vec2<f32>(x_647.x, x_647.y)) * vec2<f32>(x_650.x, x_650.y)) + x_653);
        let x_655 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_654.x, x_654.y, x_655.z, x_655.w);
        let x_657 : vec2<f32> = u_xlat46;
        u_xlat46 = max(x_657, vec2<f32>(0.0f, 0.0f));
        let x_659 : vec2<f32> = u_xlat46;
        let x_661 : vec2<f32> = u_xlat46;
        let x_663 : vec4<f32> = u_xlat7;
        u_xlat46 = ((-(x_659) * x_661) + vec2<f32>(x_663.y, x_663.w));
        let x_666 : vec4<f32> = u_xlat9;
        let x_668 : vec2<f32> = (vec2<f32>(x_666.x, x_666.y) + vec2<f32>(1.0f, 1.0f));
        let x_669 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_668.x, x_668.y, x_669.z, x_669.w);
        let x_671 : vec2<f32> = u_xlat46;
        u_xlat46 = (x_671 + vec2<f32>(1.0f, 1.0f));
        let x_674 : vec4<f32> = u_xlat8;
        let x_678 : vec2<f32> = (vec2<f32>(x_674.x, x_674.y) * vec2<f32>(0.159999996f, 0.159999996f));
        let x_679 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_678.x, x_678.y, x_679.z, x_679.w);
        let x_681 : vec2<f32> = u_xlat48;
        let x_682 : vec2<f32> = (x_681 * vec2<f32>(0.159999996f, 0.159999996f));
        let x_683 : vec4<f32> = u_xlat8;
        u_xlat8 = vec4<f32>(x_682.x, x_682.y, x_683.z, x_683.w);
        let x_685 : vec4<f32> = u_xlat9;
        let x_687 : vec2<f32> = (vec2<f32>(x_685.x, x_685.y) * vec2<f32>(0.159999996f, 0.159999996f));
        let x_688 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_687.x, x_687.y, x_688.z, x_688.w);
        let x_691 : vec2<f32> = u_xlat46;
        let x_692 : vec2<f32> = (x_691 * vec2<f32>(0.159999996f, 0.159999996f));
        let x_693 : vec4<f32> = u_xlat11;
        u_xlat11 = vec4<f32>(x_692.x, x_692.y, x_693.z, x_693.w);
        let x_695 : vec4<f32> = u_xlat7;
        u_xlat46 = (vec2<f32>(x_695.y, x_695.w) * vec2<f32>(0.159999996f, 0.159999996f));
        let x_699 : f32 = u_xlat9.x;
        u_xlat10.z = x_699;
        let x_702 : f32 = u_xlat46.x;
        u_xlat10.w = x_702;
        let x_705 : f32 = u_xlat11.x;
        u_xlat8.z = x_705;
        let x_708 : f32 = u_xlat7.x;
        u_xlat8.w = x_708;
        let x_711 : vec4<f32> = u_xlat8;
        let x_713 : vec4<f32> = u_xlat10;
        u_xlat12 = (vec4<f32>(x_711.z, x_711.w, x_711.x, x_711.z) + vec4<f32>(x_713.z, x_713.w, x_713.x, x_713.z));
        let x_717 : f32 = u_xlat10.y;
        u_xlat9.z = x_717;
        let x_720 : f32 = u_xlat46.y;
        u_xlat9.w = x_720;
        let x_723 : f32 = u_xlat8.y;
        u_xlat11.z = x_723;
        let x_726 : f32 = u_xlat7.z;
        u_xlat11.w = x_726;
        let x_728 : vec4<f32> = u_xlat9;
        let x_730 : vec4<f32> = u_xlat11;
        let x_732 : vec3<f32> = (vec3<f32>(x_728.z, x_728.y, x_728.w) + vec3<f32>(x_730.z, x_730.y, x_730.w));
        let x_733 : vec4<f32> = u_xlat7;
        u_xlat7 = vec4<f32>(x_732.x, x_732.y, x_732.z, x_733.w);
        let x_735 : vec4<f32> = u_xlat8;
        let x_737 : vec4<f32> = u_xlat12;
        let x_739 : vec3<f32> = (vec3<f32>(x_735.x, x_735.z, x_735.w) / vec3<f32>(x_737.z, x_737.w, x_737.y));
        let x_740 : vec4<f32> = u_xlat8;
        u_xlat8 = vec4<f32>(x_739.x, x_739.y, x_739.z, x_740.w);
        let x_742 : vec4<f32> = u_xlat8;
        let x_747 : vec3<f32> = (vec3<f32>(x_742.x, x_742.y, x_742.z) + vec3<f32>(-2.5f, -0.5f, 1.5f));
        let x_748 : vec4<f32> = u_xlat8;
        u_xlat8 = vec4<f32>(x_747.x, x_747.y, x_747.z, x_748.w);
        let x_750 : vec4<f32> = u_xlat11;
        let x_752 : vec4<f32> = u_xlat7;
        let x_754 : vec3<f32> = (vec3<f32>(x_750.z, x_750.y, x_750.w) / vec3<f32>(x_752.x, x_752.y, x_752.z));
        let x_755 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_754.x, x_754.y, x_754.z, x_755.w);
        let x_757 : vec4<f32> = u_xlat9;
        let x_759 : vec3<f32> = (vec3<f32>(x_757.x, x_757.y, x_757.z) + vec3<f32>(-2.5f, -0.5f, 1.5f));
        let x_760 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_759.x, x_759.y, x_759.z, x_760.w);
        let x_762 : vec4<f32> = u_xlat8;
        let x_765 : vec4<f32> = x_91.x_MainLightShadowmapSize;
        let x_767 : vec3<f32> = (vec3<f32>(x_762.y, x_762.x, x_762.z) * vec3<f32>(x_765.x, x_765.x, x_765.x));
        let x_768 : vec4<f32> = u_xlat8;
        u_xlat8 = vec4<f32>(x_767.x, x_767.y, x_767.z, x_768.w);
        let x_770 : vec4<f32> = u_xlat9;
        let x_773 : vec4<f32> = x_91.x_MainLightShadowmapSize;
        let x_775 : vec3<f32> = (vec3<f32>(x_770.x, x_770.y, x_770.z) * vec3<f32>(x_773.y, x_773.y, x_773.y));
        let x_776 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_775.x, x_775.y, x_775.z, x_776.w);
        let x_779 : f32 = u_xlat9.x;
        u_xlat8.w = x_779;
        let x_781 : vec4<f32> = u_xlat6;
        let x_784 : vec4<f32> = x_91.x_MainLightShadowmapSize;
        let x_787 : vec4<f32> = u_xlat8;
        u_xlat10 = ((vec4<f32>(x_781.x, x_781.y, x_781.x, x_781.y) * vec4<f32>(x_784.x, x_784.y, x_784.x, x_784.y)) + vec4<f32>(x_787.y, x_787.w, x_787.x, x_787.w));
        let x_790 : vec4<f32> = u_xlat6;
        let x_793 : vec4<f32> = x_91.x_MainLightShadowmapSize;
        let x_796 : vec4<f32> = u_xlat8;
        u_xlat46 = ((vec2<f32>(x_790.x, x_790.y) * vec2<f32>(x_793.x, x_793.y)) + vec2<f32>(x_796.z, x_796.w));
        let x_800 : f32 = u_xlat8.y;
        u_xlat9.w = x_800;
        let x_802 : vec4<f32> = u_xlat9;
        let x_803 : vec2<f32> = vec2<f32>(x_802.y, x_802.z);
        let x_804 : vec4<f32> = u_xlat8;
        u_xlat8 = vec4<f32>(x_804.x, x_803.x, x_804.z, x_803.y);
        let x_806 : vec4<f32> = u_xlat6;
        let x_809 : vec4<f32> = x_91.x_MainLightShadowmapSize;
        let x_812 : vec4<f32> = u_xlat8;
        u_xlat11 = ((vec4<f32>(x_806.x, x_806.y, x_806.x, x_806.y) * vec4<f32>(x_809.x, x_809.y, x_809.x, x_809.y)) + vec4<f32>(x_812.x, x_812.y, x_812.z, x_812.y));
        let x_815 : vec4<f32> = u_xlat6;
        let x_818 : vec4<f32> = x_91.x_MainLightShadowmapSize;
        let x_821 : vec4<f32> = u_xlat9;
        u_xlat9 = ((vec4<f32>(x_815.x, x_815.y, x_815.x, x_815.y) * vec4<f32>(x_818.x, x_818.y, x_818.x, x_818.y)) + vec4<f32>(x_821.w, x_821.y, x_821.w, x_821.z));
        let x_824 : vec4<f32> = u_xlat6;
        let x_827 : vec4<f32> = x_91.x_MainLightShadowmapSize;
        let x_830 : vec4<f32> = u_xlat8;
        u_xlat8 = ((vec4<f32>(x_824.x, x_824.y, x_824.x, x_824.y) * vec4<f32>(x_827.x, x_827.y, x_827.x, x_827.y)) + vec4<f32>(x_830.x, x_830.w, x_830.z, x_830.w));
        let x_834 : vec4<f32> = u_xlat7;
        let x_836 : vec4<f32> = u_xlat12;
        u_xlat13 = (vec4<f32>(x_834.x, x_834.x, x_834.x, x_834.y) * vec4<f32>(x_836.z, x_836.w, x_836.y, x_836.z));
        let x_840 : vec4<f32> = u_xlat7;
        let x_842 : vec4<f32> = u_xlat12;
        u_xlat14 = (vec4<f32>(x_840.y, x_840.y, x_840.z, x_840.z) * x_842);
        let x_845 : f32 = u_xlat7.z;
        let x_847 : f32 = u_xlat12.y;
        u_xlat6.x = (x_845 * x_847);
        let x_851 : vec4<f32> = u_xlat10;
        let x_852 : vec2<f32> = vec2<f32>(x_851.x, x_851.y);
        let x_854 : f32 = u_xlat2.z;
        txVec4 = vec3<f32>(x_852.x, x_852.y, x_854);
        let x_862 : vec3<f32> = txVec4;
        let x_864 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_862.xy, x_862.z);
        u_xlat26 = x_864;
        let x_866 : vec4<f32> = u_xlat10;
        let x_867 : vec2<f32> = vec2<f32>(x_866.z, x_866.w);
        let x_869 : f32 = u_xlat2.z;
        txVec5 = vec3<f32>(x_867.x, x_867.y, x_869);
        let x_876 : vec3<f32> = txVec5;
        let x_878 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_876.xy, x_876.z);
        u_xlat7.x = x_878;
        let x_881 : f32 = u_xlat7.x;
        let x_883 : f32 = u_xlat13.y;
        u_xlat7.x = (x_881 * x_883);
        let x_887 : f32 = u_xlat13.x;
        let x_888 : f32 = u_xlat26;
        let x_891 : f32 = u_xlat7.x;
        u_xlat26 = ((x_887 * x_888) + x_891);
        let x_894 : vec2<f32> = u_xlat46;
        let x_896 : f32 = u_xlat2.z;
        txVec6 = vec3<f32>(x_894.x, x_894.y, x_896);
        let x_903 : vec3<f32> = txVec6;
        let x_905 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_903.xy, x_903.z);
        u_xlat46.x = x_905;
        let x_908 : f32 = u_xlat13.z;
        let x_910 : f32 = u_xlat46.x;
        let x_912 : f32 = u_xlat26;
        u_xlat26 = ((x_908 * x_910) + x_912);
        let x_915 : vec4<f32> = u_xlat9;
        let x_916 : vec2<f32> = vec2<f32>(x_915.x, x_915.y);
        let x_918 : f32 = u_xlat2.z;
        txVec7 = vec3<f32>(x_916.x, x_916.y, x_918);
        let x_925 : vec3<f32> = txVec7;
        let x_927 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_925.xy, x_925.z);
        u_xlat46.x = x_927;
        let x_930 : f32 = u_xlat13.w;
        let x_932 : f32 = u_xlat46.x;
        let x_934 : f32 = u_xlat26;
        u_xlat26 = ((x_930 * x_932) + x_934);
        let x_937 : vec4<f32> = u_xlat11;
        let x_938 : vec2<f32> = vec2<f32>(x_937.x, x_937.y);
        let x_940 : f32 = u_xlat2.z;
        txVec8 = vec3<f32>(x_938.x, x_938.y, x_940);
        let x_947 : vec3<f32> = txVec8;
        let x_949 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_947.xy, x_947.z);
        u_xlat46.x = x_949;
        let x_952 : f32 = u_xlat14.x;
        let x_954 : f32 = u_xlat46.x;
        let x_956 : f32 = u_xlat26;
        u_xlat26 = ((x_952 * x_954) + x_956);
        let x_959 : vec4<f32> = u_xlat11;
        let x_960 : vec2<f32> = vec2<f32>(x_959.z, x_959.w);
        let x_962 : f32 = u_xlat2.z;
        txVec9 = vec3<f32>(x_960.x, x_960.y, x_962);
        let x_969 : vec3<f32> = txVec9;
        let x_971 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_969.xy, x_969.z);
        u_xlat46.x = x_971;
        let x_974 : f32 = u_xlat14.y;
        let x_976 : f32 = u_xlat46.x;
        let x_978 : f32 = u_xlat26;
        u_xlat26 = ((x_974 * x_976) + x_978);
        let x_981 : vec4<f32> = u_xlat9;
        let x_982 : vec2<f32> = vec2<f32>(x_981.z, x_981.w);
        let x_984 : f32 = u_xlat2.z;
        txVec10 = vec3<f32>(x_982.x, x_982.y, x_984);
        let x_991 : vec3<f32> = txVec10;
        let x_993 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_991.xy, x_991.z);
        u_xlat46.x = x_993;
        let x_996 : f32 = u_xlat14.z;
        let x_998 : f32 = u_xlat46.x;
        let x_1000 : f32 = u_xlat26;
        u_xlat26 = ((x_996 * x_998) + x_1000);
        let x_1003 : vec4<f32> = u_xlat8;
        let x_1004 : vec2<f32> = vec2<f32>(x_1003.x, x_1003.y);
        let x_1006 : f32 = u_xlat2.z;
        txVec11 = vec3<f32>(x_1004.x, x_1004.y, x_1006);
        let x_1013 : vec3<f32> = txVec11;
        let x_1015 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1013.xy, x_1013.z);
        u_xlat46.x = x_1015;
        let x_1018 : f32 = u_xlat14.w;
        let x_1020 : f32 = u_xlat46.x;
        let x_1022 : f32 = u_xlat26;
        u_xlat26 = ((x_1018 * x_1020) + x_1022);
        let x_1025 : vec4<f32> = u_xlat8;
        let x_1026 : vec2<f32> = vec2<f32>(x_1025.z, x_1025.w);
        let x_1028 : f32 = u_xlat2.z;
        txVec12 = vec3<f32>(x_1026.x, x_1026.y, x_1028);
        let x_1035 : vec3<f32> = txVec12;
        let x_1037 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1035.xy, x_1035.z);
        u_xlat46.x = x_1037;
        let x_1040 : f32 = u_xlat6.x;
        let x_1042 : f32 = u_xlat46.x;
        let x_1044 : f32 = u_xlat26;
        u_xlat65 = ((x_1040 * x_1042) + x_1044);
      } else {
        let x_1047 : vec4<f32> = u_xlat2;
        let x_1050 : vec4<f32> = x_91.x_MainLightShadowmapSize;
        let x_1053 : vec2<f32> = ((vec2<f32>(x_1047.x, x_1047.y) * vec2<f32>(x_1050.z, x_1050.w)) + vec2<f32>(0.5f, 0.5f));
        let x_1054 : vec4<f32> = u_xlat6;
        u_xlat6 = vec4<f32>(x_1053.x, x_1053.y, x_1054.z, x_1054.w);
        let x_1056 : vec4<f32> = u_xlat6;
        let x_1058 : vec2<f32> = floor(vec2<f32>(x_1056.x, x_1056.y));
        let x_1059 : vec4<f32> = u_xlat6;
        u_xlat6 = vec4<f32>(x_1058.x, x_1058.y, x_1059.z, x_1059.w);
        let x_1061 : vec4<f32> = u_xlat2;
        let x_1064 : vec4<f32> = x_91.x_MainLightShadowmapSize;
        let x_1067 : vec4<f32> = u_xlat6;
        u_xlat46 = ((vec2<f32>(x_1061.x, x_1061.y) * vec2<f32>(x_1064.z, x_1064.w)) + -(vec2<f32>(x_1067.x, x_1067.y)));
        let x_1071 : vec2<f32> = u_xlat46;
        u_xlat7 = (vec4<f32>(x_1071.x, x_1071.x, x_1071.y, x_1071.y) + vec4<f32>(0.5f, 1.0f, 0.5f, 1.0f));
        let x_1074 : vec4<f32> = u_xlat7;
        let x_1076 : vec4<f32> = u_xlat7;
        u_xlat8 = (vec4<f32>(x_1074.x, x_1074.x, x_1074.z, x_1074.z) * vec4<f32>(x_1076.x, x_1076.x, x_1076.z, x_1076.z));
        let x_1079 : vec4<f32> = u_xlat8;
        let x_1083 : vec2<f32> = (vec2<f32>(x_1079.y, x_1079.w) * vec2<f32>(0.040816002f, 0.040816002f));
        let x_1084 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_1084.x, x_1083.x, x_1084.z, x_1083.y);
        let x_1086 : vec4<f32> = u_xlat8;
        let x_1089 : vec2<f32> = u_xlat46;
        let x_1091 : vec2<f32> = ((vec2<f32>(x_1086.x, x_1086.z) * vec2<f32>(0.5f, 0.5f)) + -(x_1089));
        let x_1092 : vec4<f32> = u_xlat7;
        u_xlat7 = vec4<f32>(x_1091.x, x_1092.y, x_1091.y, x_1092.w);
        let x_1094 : vec2<f32> = u_xlat46;
        let x_1096 : vec2<f32> = (-(x_1094) + vec2<f32>(1.0f, 1.0f));
        let x_1097 : vec4<f32> = u_xlat8;
        u_xlat8 = vec4<f32>(x_1096.x, x_1096.y, x_1097.z, x_1097.w);
        let x_1099 : vec2<f32> = u_xlat46;
        u_xlat48 = min(x_1099, vec2<f32>(0.0f, 0.0f));
        let x_1101 : vec2<f32> = u_xlat48;
        let x_1103 : vec2<f32> = u_xlat48;
        let x_1105 : vec4<f32> = u_xlat8;
        let x_1107 : vec2<f32> = ((-(x_1101) * x_1103) + vec2<f32>(x_1105.x, x_1105.y));
        let x_1108 : vec4<f32> = u_xlat8;
        u_xlat8 = vec4<f32>(x_1107.x, x_1107.y, x_1108.z, x_1108.w);
        let x_1110 : vec2<f32> = u_xlat46;
        u_xlat48 = max(x_1110, vec2<f32>(0.0f, 0.0f));
        let x_1113 : vec2<f32> = u_xlat48;
        let x_1115 : vec2<f32> = u_xlat48;
        let x_1117 : vec4<f32> = u_xlat7;
        let x_1119 : vec2<f32> = ((-(x_1113) * x_1115) + vec2<f32>(x_1117.y, x_1117.w));
        let x_1120 : vec3<f32> = u_xlat27;
        u_xlat27 = vec3<f32>(x_1119.x, x_1120.y, x_1119.y);
        let x_1122 : vec4<f32> = u_xlat8;
        let x_1125 : vec2<f32> = (vec2<f32>(x_1122.x, x_1122.y) + vec2<f32>(2.0f, 2.0f));
        let x_1126 : vec4<f32> = u_xlat8;
        u_xlat8 = vec4<f32>(x_1125.x, x_1125.y, x_1126.z, x_1126.w);
        let x_1128 : vec3<f32> = u_xlat27;
        let x_1130 : vec2<f32> = (vec2<f32>(x_1128.x, x_1128.z) + vec2<f32>(2.0f, 2.0f));
        let x_1131 : vec4<f32> = u_xlat7;
        u_xlat7 = vec4<f32>(x_1131.x, x_1130.x, x_1131.z, x_1130.y);
        let x_1134 : f32 = u_xlat7.y;
        u_xlat10.z = (x_1134 * 0.081632003f);
        let x_1138 : vec4<f32> = u_xlat7;
        let x_1141 : vec3<f32> = (vec3<f32>(x_1138.z, x_1138.x, x_1138.w) * vec3<f32>(0.081632003f, 0.081632003f, 0.081632003f));
        let x_1142 : vec4<f32> = u_xlat11;
        u_xlat11 = vec4<f32>(x_1141.x, x_1141.y, x_1141.z, x_1142.w);
        let x_1144 : vec4<f32> = u_xlat8;
        let x_1147 : vec2<f32> = (vec2<f32>(x_1144.x, x_1144.y) * vec2<f32>(0.081632003f, 0.081632003f));
        let x_1148 : vec4<f32> = u_xlat7;
        u_xlat7 = vec4<f32>(x_1147.x, x_1147.y, x_1148.z, x_1148.w);
        let x_1151 : f32 = u_xlat11.y;
        u_xlat10.x = x_1151;
        let x_1153 : vec2<f32> = u_xlat46;
        let x_1160 : vec2<f32> = ((vec2<f32>(x_1153.x, x_1153.x) * vec2<f32>(-0.081632003f, 0.081632003f)) + vec2<f32>(0.163264006f, 0.081632003f));
        let x_1161 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_1161.x, x_1160.x, x_1161.z, x_1160.y);
        let x_1163 : vec2<f32> = u_xlat46;
        let x_1167 : vec2<f32> = ((vec2<f32>(x_1163.x, x_1163.x) * vec2<f32>(-0.081632003f, 0.081632003f)) + vec2<f32>(0.081632003f, 0.163264006f));
        let x_1168 : vec4<f32> = u_xlat8;
        u_xlat8 = vec4<f32>(x_1167.x, x_1168.y, x_1167.y, x_1168.w);
        let x_1171 : f32 = u_xlat7.x;
        u_xlat8.y = x_1171;
        let x_1174 : f32 = u_xlat9.y;
        u_xlat8.w = x_1174;
        let x_1176 : vec4<f32> = u_xlat8;
        let x_1177 : vec4<f32> = u_xlat10;
        u_xlat10 = (x_1176 + x_1177);
        let x_1179 : vec2<f32> = u_xlat46;
        let x_1182 : vec2<f32> = ((vec2<f32>(x_1179.y, x_1179.y) * vec2<f32>(-0.081632003f, 0.081632003f)) + vec2<f32>(0.163264006f, 0.081632003f));
        let x_1183 : vec4<f32> = u_xlat11;
        u_xlat11 = vec4<f32>(x_1183.x, x_1182.x, x_1183.z, x_1182.y);
        let x_1185 : vec2<f32> = u_xlat46;
        let x_1188 : vec2<f32> = ((vec2<f32>(x_1185.y, x_1185.y) * vec2<f32>(-0.081632003f, 0.081632003f)) + vec2<f32>(0.081632003f, 0.163264006f));
        let x_1189 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_1188.x, x_1189.y, x_1188.y, x_1189.w);
        let x_1192 : f32 = u_xlat7.y;
        u_xlat9.y = x_1192;
        let x_1194 : vec4<f32> = u_xlat9;
        let x_1195 : vec4<f32> = u_xlat11;
        u_xlat7 = (x_1194 + x_1195);
        let x_1197 : vec4<f32> = u_xlat8;
        let x_1198 : vec4<f32> = u_xlat10;
        u_xlat8 = (x_1197 / x_1198);
        let x_1200 : vec4<f32> = u_xlat8;
        u_xlat8 = (x_1200 + vec4<f32>(-3.5f, -1.5f, 0.5f, 2.5f));
        let x_1206 : vec4<f32> = u_xlat9;
        let x_1207 : vec4<f32> = u_xlat7;
        u_xlat9 = (x_1206 / x_1207);
        let x_1209 : vec4<f32> = u_xlat9;
        u_xlat9 = (x_1209 + vec4<f32>(-3.5f, -1.5f, 0.5f, 2.5f));
        let x_1211 : vec4<f32> = u_xlat8;
        let x_1214 : vec4<f32> = x_91.x_MainLightShadowmapSize;
        u_xlat8 = (vec4<f32>(x_1211.w, x_1211.x, x_1211.y, x_1211.z) * vec4<f32>(x_1214.x, x_1214.x, x_1214.x, x_1214.x));
        let x_1217 : vec4<f32> = u_xlat9;
        let x_1220 : vec4<f32> = x_91.x_MainLightShadowmapSize;
        u_xlat9 = (vec4<f32>(x_1217.x, x_1217.w, x_1217.y, x_1217.z) * vec4<f32>(x_1220.y, x_1220.y, x_1220.y, x_1220.y));
        let x_1223 : vec4<f32> = u_xlat8;
        let x_1224 : vec3<f32> = vec3<f32>(x_1223.y, x_1223.z, x_1223.w);
        let x_1225 : vec4<f32> = u_xlat11;
        u_xlat11 = vec4<f32>(x_1224.x, x_1225.y, x_1224.y, x_1224.z);
        let x_1228 : f32 = u_xlat9.x;
        u_xlat11.y = x_1228;
        let x_1230 : vec4<f32> = u_xlat6;
        let x_1233 : vec4<f32> = x_91.x_MainLightShadowmapSize;
        let x_1236 : vec4<f32> = u_xlat11;
        u_xlat12 = ((vec4<f32>(x_1230.x, x_1230.y, x_1230.x, x_1230.y) * vec4<f32>(x_1233.x, x_1233.y, x_1233.x, x_1233.y)) + vec4<f32>(x_1236.x, x_1236.y, x_1236.z, x_1236.y));
        let x_1239 : vec4<f32> = u_xlat6;
        let x_1242 : vec4<f32> = x_91.x_MainLightShadowmapSize;
        let x_1245 : vec4<f32> = u_xlat11;
        u_xlat46 = ((vec2<f32>(x_1239.x, x_1239.y) * vec2<f32>(x_1242.x, x_1242.y)) + vec2<f32>(x_1245.w, x_1245.y));
        let x_1249 : f32 = u_xlat11.y;
        u_xlat8.y = x_1249;
        let x_1252 : f32 = u_xlat9.z;
        u_xlat11.y = x_1252;
        let x_1254 : vec4<f32> = u_xlat6;
        let x_1257 : vec4<f32> = x_91.x_MainLightShadowmapSize;
        let x_1260 : vec4<f32> = u_xlat11;
        u_xlat13 = ((vec4<f32>(x_1254.x, x_1254.y, x_1254.x, x_1254.y) * vec4<f32>(x_1257.x, x_1257.y, x_1257.x, x_1257.y)) + vec4<f32>(x_1260.x, x_1260.y, x_1260.z, x_1260.y));
        let x_1263 : vec4<f32> = u_xlat6;
        let x_1266 : vec4<f32> = x_91.x_MainLightShadowmapSize;
        let x_1269 : vec4<f32> = u_xlat11;
        let x_1271 : vec2<f32> = ((vec2<f32>(x_1263.x, x_1263.y) * vec2<f32>(x_1266.x, x_1266.y)) + vec2<f32>(x_1269.w, x_1269.y));
        let x_1272 : vec4<f32> = u_xlat14;
        u_xlat14 = vec4<f32>(x_1271.x, x_1271.y, x_1272.z, x_1272.w);
        let x_1275 : f32 = u_xlat11.y;
        u_xlat8.z = x_1275;
        let x_1278 : vec4<f32> = u_xlat6;
        let x_1281 : vec4<f32> = x_91.x_MainLightShadowmapSize;
        let x_1284 : vec4<f32> = u_xlat8;
        u_xlat15 = ((vec4<f32>(x_1278.x, x_1278.y, x_1278.x, x_1278.y) * vec4<f32>(x_1281.x, x_1281.y, x_1281.x, x_1281.y)) + vec4<f32>(x_1284.x, x_1284.y, x_1284.x, x_1284.z));
        let x_1288 : f32 = u_xlat9.w;
        u_xlat11.y = x_1288;
        let x_1291 : vec4<f32> = u_xlat6;
        let x_1294 : vec4<f32> = x_91.x_MainLightShadowmapSize;
        let x_1297 : vec4<f32> = u_xlat11;
        u_xlat16 = ((vec4<f32>(x_1291.x, x_1291.y, x_1291.x, x_1291.y) * vec4<f32>(x_1294.x, x_1294.y, x_1294.x, x_1294.y)) + vec4<f32>(x_1297.x, x_1297.y, x_1297.z, x_1297.y));
        let x_1301 : vec4<f32> = u_xlat6;
        let x_1304 : vec4<f32> = x_91.x_MainLightShadowmapSize;
        let x_1307 : vec4<f32> = u_xlat11;
        u_xlat28 = ((vec2<f32>(x_1301.x, x_1301.y) * vec2<f32>(x_1304.x, x_1304.y)) + vec2<f32>(x_1307.w, x_1307.y));
        let x_1311 : f32 = u_xlat11.y;
        u_xlat8.w = x_1311;
        let x_1314 : vec4<f32> = u_xlat6;
        let x_1317 : vec4<f32> = x_91.x_MainLightShadowmapSize;
        let x_1320 : vec4<f32> = u_xlat8;
        u_xlat54 = ((vec2<f32>(x_1314.x, x_1314.y) * vec2<f32>(x_1317.x, x_1317.y)) + vec2<f32>(x_1320.x, x_1320.w));
        let x_1323 : vec4<f32> = u_xlat11;
        let x_1324 : vec3<f32> = vec3<f32>(x_1323.x, x_1323.z, x_1323.w);
        let x_1325 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_1324.x, x_1325.y, x_1324.y, x_1324.z);
        let x_1327 : vec4<f32> = u_xlat6;
        let x_1330 : vec4<f32> = x_91.x_MainLightShadowmapSize;
        let x_1333 : vec4<f32> = u_xlat9;
        u_xlat11 = ((vec4<f32>(x_1327.x, x_1327.y, x_1327.x, x_1327.y) * vec4<f32>(x_1330.x, x_1330.y, x_1330.x, x_1330.y)) + vec4<f32>(x_1333.x, x_1333.y, x_1333.z, x_1333.y));
        let x_1337 : vec4<f32> = u_xlat6;
        let x_1340 : vec4<f32> = x_91.x_MainLightShadowmapSize;
        let x_1343 : vec4<f32> = u_xlat9;
        u_xlat49 = ((vec2<f32>(x_1337.x, x_1337.y) * vec2<f32>(x_1340.x, x_1340.y)) + vec2<f32>(x_1343.w, x_1343.y));
        let x_1347 : f32 = u_xlat8.x;
        u_xlat9.x = x_1347;
        let x_1349 : vec4<f32> = u_xlat6;
        let x_1352 : vec4<f32> = x_91.x_MainLightShadowmapSize;
        let x_1355 : vec4<f32> = u_xlat9;
        let x_1357 : vec2<f32> = ((vec2<f32>(x_1349.x, x_1349.y) * vec2<f32>(x_1352.x, x_1352.y)) + vec2<f32>(x_1355.x, x_1355.y));
        let x_1358 : vec4<f32> = u_xlat6;
        u_xlat6 = vec4<f32>(x_1357.x, x_1357.y, x_1358.z, x_1358.w);
        let x_1361 : vec4<f32> = u_xlat7;
        let x_1363 : vec4<f32> = u_xlat10;
        u_xlat17 = (vec4<f32>(x_1361.x, x_1361.x, x_1361.x, x_1361.x) * x_1363);
        let x_1366 : vec4<f32> = u_xlat7;
        let x_1368 : vec4<f32> = u_xlat10;
        u_xlat18 = (vec4<f32>(x_1366.y, x_1366.y, x_1366.y, x_1366.y) * x_1368);
        let x_1371 : vec4<f32> = u_xlat7;
        let x_1373 : vec4<f32> = u_xlat10;
        u_xlat19 = (vec4<f32>(x_1371.z, x_1371.z, x_1371.z, x_1371.z) * x_1373);
        let x_1375 : vec4<f32> = u_xlat7;
        let x_1377 : vec4<f32> = u_xlat10;
        u_xlat7 = (vec4<f32>(x_1375.w, x_1375.w, x_1375.w, x_1375.w) * x_1377);
        let x_1380 : vec4<f32> = u_xlat12;
        let x_1381 : vec2<f32> = vec2<f32>(x_1380.x, x_1380.y);
        let x_1383 : f32 = u_xlat2.z;
        txVec13 = vec3<f32>(x_1381.x, x_1381.y, x_1383);
        let x_1390 : vec3<f32> = txVec13;
        let x_1392 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1390.xy, x_1390.z);
        u_xlat8.x = x_1392;
        let x_1395 : vec4<f32> = u_xlat12;
        let x_1396 : vec2<f32> = vec2<f32>(x_1395.z, x_1395.w);
        let x_1398 : f32 = u_xlat2.z;
        txVec14 = vec3<f32>(x_1396.x, x_1396.y, x_1398);
        let x_1406 : vec3<f32> = txVec14;
        let x_1408 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1406.xy, x_1406.z);
        u_xlat68 = x_1408;
        let x_1409 : f32 = u_xlat68;
        let x_1411 : f32 = u_xlat17.y;
        u_xlat68 = (x_1409 * x_1411);
        let x_1414 : f32 = u_xlat17.x;
        let x_1416 : f32 = u_xlat8.x;
        let x_1418 : f32 = u_xlat68;
        u_xlat8.x = ((x_1414 * x_1416) + x_1418);
        let x_1422 : vec2<f32> = u_xlat46;
        let x_1424 : f32 = u_xlat2.z;
        txVec15 = vec3<f32>(x_1422.x, x_1422.y, x_1424);
        let x_1431 : vec3<f32> = txVec15;
        let x_1433 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1431.xy, x_1431.z);
        u_xlat46.x = x_1433;
        let x_1436 : f32 = u_xlat17.z;
        let x_1438 : f32 = u_xlat46.x;
        let x_1441 : f32 = u_xlat8.x;
        u_xlat46.x = ((x_1436 * x_1438) + x_1441);
        let x_1445 : vec4<f32> = u_xlat15;
        let x_1446 : vec2<f32> = vec2<f32>(x_1445.x, x_1445.y);
        let x_1448 : f32 = u_xlat2.z;
        txVec16 = vec3<f32>(x_1446.x, x_1446.y, x_1448);
        let x_1456 : vec3<f32> = txVec16;
        let x_1458 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1456.xy, x_1456.z);
        u_xlat66 = x_1458;
        let x_1460 : f32 = u_xlat17.w;
        let x_1461 : f32 = u_xlat66;
        let x_1464 : f32 = u_xlat46.x;
        u_xlat46.x = ((x_1460 * x_1461) + x_1464);
        let x_1468 : vec4<f32> = u_xlat13;
        let x_1469 : vec2<f32> = vec2<f32>(x_1468.x, x_1468.y);
        let x_1471 : f32 = u_xlat2.z;
        txVec17 = vec3<f32>(x_1469.x, x_1469.y, x_1471);
        let x_1478 : vec3<f32> = txVec17;
        let x_1480 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1478.xy, x_1478.z);
        u_xlat66 = x_1480;
        let x_1482 : f32 = u_xlat18.x;
        let x_1483 : f32 = u_xlat66;
        let x_1486 : f32 = u_xlat46.x;
        u_xlat46.x = ((x_1482 * x_1483) + x_1486);
        let x_1490 : vec4<f32> = u_xlat13;
        let x_1491 : vec2<f32> = vec2<f32>(x_1490.z, x_1490.w);
        let x_1493 : f32 = u_xlat2.z;
        txVec18 = vec3<f32>(x_1491.x, x_1491.y, x_1493);
        let x_1500 : vec3<f32> = txVec18;
        let x_1502 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1500.xy, x_1500.z);
        u_xlat66 = x_1502;
        let x_1504 : f32 = u_xlat18.y;
        let x_1505 : f32 = u_xlat66;
        let x_1508 : f32 = u_xlat46.x;
        u_xlat46.x = ((x_1504 * x_1505) + x_1508);
        let x_1512 : vec4<f32> = u_xlat14;
        let x_1513 : vec2<f32> = vec2<f32>(x_1512.x, x_1512.y);
        let x_1515 : f32 = u_xlat2.z;
        txVec19 = vec3<f32>(x_1513.x, x_1513.y, x_1515);
        let x_1522 : vec3<f32> = txVec19;
        let x_1524 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1522.xy, x_1522.z);
        u_xlat66 = x_1524;
        let x_1526 : f32 = u_xlat18.z;
        let x_1527 : f32 = u_xlat66;
        let x_1530 : f32 = u_xlat46.x;
        u_xlat46.x = ((x_1526 * x_1527) + x_1530);
        let x_1534 : vec4<f32> = u_xlat15;
        let x_1535 : vec2<f32> = vec2<f32>(x_1534.z, x_1534.w);
        let x_1537 : f32 = u_xlat2.z;
        txVec20 = vec3<f32>(x_1535.x, x_1535.y, x_1537);
        let x_1544 : vec3<f32> = txVec20;
        let x_1546 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1544.xy, x_1544.z);
        u_xlat66 = x_1546;
        let x_1548 : f32 = u_xlat18.w;
        let x_1549 : f32 = u_xlat66;
        let x_1552 : f32 = u_xlat46.x;
        u_xlat46.x = ((x_1548 * x_1549) + x_1552);
        let x_1556 : vec4<f32> = u_xlat16;
        let x_1557 : vec2<f32> = vec2<f32>(x_1556.x, x_1556.y);
        let x_1559 : f32 = u_xlat2.z;
        txVec21 = vec3<f32>(x_1557.x, x_1557.y, x_1559);
        let x_1566 : vec3<f32> = txVec21;
        let x_1568 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1566.xy, x_1566.z);
        u_xlat66 = x_1568;
        let x_1570 : f32 = u_xlat19.x;
        let x_1571 : f32 = u_xlat66;
        let x_1574 : f32 = u_xlat46.x;
        u_xlat46.x = ((x_1570 * x_1571) + x_1574);
        let x_1578 : vec4<f32> = u_xlat16;
        let x_1579 : vec2<f32> = vec2<f32>(x_1578.z, x_1578.w);
        let x_1581 : f32 = u_xlat2.z;
        txVec22 = vec3<f32>(x_1579.x, x_1579.y, x_1581);
        let x_1588 : vec3<f32> = txVec22;
        let x_1590 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1588.xy, x_1588.z);
        u_xlat66 = x_1590;
        let x_1592 : f32 = u_xlat19.y;
        let x_1593 : f32 = u_xlat66;
        let x_1596 : f32 = u_xlat46.x;
        u_xlat46.x = ((x_1592 * x_1593) + x_1596);
        let x_1600 : vec2<f32> = u_xlat28;
        let x_1602 : f32 = u_xlat2.z;
        txVec23 = vec3<f32>(x_1600.x, x_1600.y, x_1602);
        let x_1609 : vec3<f32> = txVec23;
        let x_1611 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1609.xy, x_1609.z);
        u_xlat66 = x_1611;
        let x_1613 : f32 = u_xlat19.z;
        let x_1614 : f32 = u_xlat66;
        let x_1617 : f32 = u_xlat46.x;
        u_xlat46.x = ((x_1613 * x_1614) + x_1617);
        let x_1621 : vec2<f32> = u_xlat54;
        let x_1623 : f32 = u_xlat2.z;
        txVec24 = vec3<f32>(x_1621.x, x_1621.y, x_1623);
        let x_1630 : vec3<f32> = txVec24;
        let x_1632 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1630.xy, x_1630.z);
        u_xlat66 = x_1632;
        let x_1634 : f32 = u_xlat19.w;
        let x_1635 : f32 = u_xlat66;
        let x_1638 : f32 = u_xlat46.x;
        u_xlat46.x = ((x_1634 * x_1635) + x_1638);
        let x_1642 : vec4<f32> = u_xlat11;
        let x_1643 : vec2<f32> = vec2<f32>(x_1642.x, x_1642.y);
        let x_1645 : f32 = u_xlat2.z;
        txVec25 = vec3<f32>(x_1643.x, x_1643.y, x_1645);
        let x_1652 : vec3<f32> = txVec25;
        let x_1654 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1652.xy, x_1652.z);
        u_xlat66 = x_1654;
        let x_1656 : f32 = u_xlat7.x;
        let x_1657 : f32 = u_xlat66;
        let x_1660 : f32 = u_xlat46.x;
        u_xlat46.x = ((x_1656 * x_1657) + x_1660);
        let x_1664 : vec4<f32> = u_xlat11;
        let x_1665 : vec2<f32> = vec2<f32>(x_1664.z, x_1664.w);
        let x_1667 : f32 = u_xlat2.z;
        txVec26 = vec3<f32>(x_1665.x, x_1665.y, x_1667);
        let x_1674 : vec3<f32> = txVec26;
        let x_1676 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1674.xy, x_1674.z);
        u_xlat66 = x_1676;
        let x_1678 : f32 = u_xlat7.y;
        let x_1679 : f32 = u_xlat66;
        let x_1682 : f32 = u_xlat46.x;
        u_xlat46.x = ((x_1678 * x_1679) + x_1682);
        let x_1686 : vec2<f32> = u_xlat49;
        let x_1688 : f32 = u_xlat2.z;
        txVec27 = vec3<f32>(x_1686.x, x_1686.y, x_1688);
        let x_1695 : vec3<f32> = txVec27;
        let x_1697 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1695.xy, x_1695.z);
        u_xlat66 = x_1697;
        let x_1699 : f32 = u_xlat7.z;
        let x_1700 : f32 = u_xlat66;
        let x_1703 : f32 = u_xlat46.x;
        u_xlat46.x = ((x_1699 * x_1700) + x_1703);
        let x_1707 : vec4<f32> = u_xlat6;
        let x_1708 : vec2<f32> = vec2<f32>(x_1707.x, x_1707.y);
        let x_1710 : f32 = u_xlat2.z;
        txVec28 = vec3<f32>(x_1708.x, x_1708.y, x_1710);
        let x_1717 : vec3<f32> = txVec28;
        let x_1719 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1717.xy, x_1717.z);
        u_xlat6.x = x_1719;
        let x_1722 : f32 = u_xlat7.w;
        let x_1724 : f32 = u_xlat6.x;
        let x_1727 : f32 = u_xlat46.x;
        u_xlat65 = ((x_1722 * x_1724) + x_1727);
      }
    }
  } else {
    let x_1731 : vec4<f32> = u_xlat2;
    let x_1732 : vec2<f32> = vec2<f32>(x_1731.x, x_1731.y);
    let x_1734 : f32 = u_xlat2.z;
    txVec29 = vec3<f32>(x_1732.x, x_1732.y, x_1734);
    let x_1741 : vec3<f32> = txVec29;
    let x_1743 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1741.xy, x_1741.z);
    u_xlat65 = x_1743;
  }
  let x_1745 : f32 = x_91.x_MainLightShadowParams.x;
  u_xlat2.x = (-(x_1745) + 1.0f);
  let x_1749 : f32 = u_xlat65;
  let x_1751 : f32 = x_91.x_MainLightShadowParams.x;
  let x_1754 : f32 = u_xlat2.x;
  u_xlat2.x = ((x_1749 * x_1751) + x_1754);
  let x_1759 : f32 = u_xlat2.z;
  u_xlatb22 = (0.0f >= x_1759);
  let x_1763 : f32 = u_xlat2.z;
  u_xlatb42 = (x_1763 >= 1.0f);
  let x_1765 : bool = u_xlatb42;
  let x_1766 : bool = u_xlatb22;
  u_xlatb22 = (x_1765 | x_1766);
  let x_1768 : bool = u_xlatb22;
  if (x_1768) {
    x_1769 = 1.0f;
  } else {
    let x_1774 : f32 = u_xlat2.x;
    x_1769 = x_1774;
  }
  let x_1775 : f32 = x_1769;
  u_xlat2.x = x_1775;
  let x_1777 : vec3<f32> = vs_TEXCOORD7;
  let x_1780 : vec3<f32> = x_44.x_WorldSpaceCameraPos;
  let x_1782 : vec3<f32> = (x_1777 + -(x_1780));
  let x_1783 : vec4<f32> = u_xlat6;
  u_xlat6 = vec4<f32>(x_1782.x, x_1782.y, x_1782.z, x_1783.w);
  let x_1785 : vec4<f32> = u_xlat6;
  let x_1787 : vec4<f32> = u_xlat6;
  u_xlat22.x = dot(vec3<f32>(x_1785.x, x_1785.y, x_1785.z), vec3<f32>(x_1787.x, x_1787.y, x_1787.z));
  let x_1792 : f32 = u_xlat22.x;
  let x_1794 : f32 = x_91.x_MainLightShadowParams.z;
  let x_1797 : f32 = x_91.x_MainLightShadowParams.w;
  u_xlat22.x = ((x_1792 * x_1794) + x_1797);
  let x_1801 : f32 = u_xlat22.x;
  u_xlat22.x = clamp(x_1801, 0.0f, 1.0f);
  let x_1806 : f32 = u_xlat2.x;
  u_xlat42 = (-(x_1806) + 1.0f);
  let x_1810 : f32 = u_xlat22.x;
  let x_1811 : f32 = u_xlat42;
  let x_1814 : f32 = u_xlat2.x;
  u_xlat2.x = ((x_1810 * x_1811) + x_1814);
  let x_1817 : f32 = u_xlat44;
  let x_1820 : vec4<f32> = x_44.x_MainLightColor;
  let x_1822 : vec3<f32> = (vec3<f32>(x_1817, x_1817, x_1817) * vec3<f32>(x_1820.x, x_1820.y, x_1820.z));
  let x_1823 : vec4<f32> = u_xlat6;
  u_xlat6 = vec4<f32>(x_1822.x, x_1822.y, x_1822.z, x_1823.w);
  let x_1826 : f32 = vs_TEXCOORD3.w;
  u_xlat7.x = x_1826;
  let x_1830 : f32 = vs_TEXCOORD4.w;
  u_xlat7.y = x_1830;
  let x_1834 : f32 = vs_TEXCOORD5.w;
  u_xlat7.z = x_1834;
  let x_1836 : vec4<f32> = u_xlat7;
  let x_1839 : vec3<f32> = u_xlat21;
  u_xlat22.x = dot(-(vec3<f32>(x_1836.x, x_1836.y, x_1836.z)), x_1839);
  let x_1843 : f32 = u_xlat22.x;
  let x_1845 : f32 = u_xlat22.x;
  u_xlat22.x = (x_1843 + x_1845);
  let x_1848 : vec3<f32> = u_xlat21;
  let x_1849 : vec3<f32> = u_xlat22;
  let x_1853 : vec4<f32> = u_xlat7;
  let x_1856 : vec3<f32> = ((x_1848 * -(vec3<f32>(x_1849.x, x_1849.x, x_1849.x))) + -(vec3<f32>(x_1853.x, x_1853.y, x_1853.z)));
  let x_1857 : vec4<f32> = u_xlat8;
  u_xlat8 = vec4<f32>(x_1856.x, x_1856.y, x_1856.z, x_1857.w);
  let x_1859 : vec3<f32> = u_xlat21;
  let x_1860 : vec4<f32> = u_xlat7;
  u_xlat22.x = dot(x_1859, vec3<f32>(x_1860.x, x_1860.y, x_1860.z));
  let x_1865 : f32 = u_xlat22.x;
  u_xlat22.x = clamp(x_1865, 0.0f, 1.0f);
  let x_1869 : f32 = u_xlat22.x;
  u_xlat22.x = (-(x_1869) + 1.0f);
  let x_1874 : f32 = u_xlat22.x;
  let x_1876 : f32 = u_xlat22.x;
  u_xlat22.x = (x_1874 * x_1876);
  let x_1880 : f32 = u_xlat22.x;
  let x_1882 : f32 = u_xlat22.x;
  u_xlat22.x = (x_1880 * x_1882);
  let x_1885 : f32 = u_xlat1;
  u_xlat42 = ((-(x_1885) * 0.699999988f) + 1.700000048f);
  let x_1891 : f32 = u_xlat1;
  let x_1892 : f32 = u_xlat42;
  u_xlat1 = (x_1891 * x_1892);
  let x_1894 : f32 = u_xlat1;
  u_xlat1 = (x_1894 * 6.0f);
  let x_1905 : vec4<f32> = u_xlat8;
  let x_1907 : f32 = u_xlat1;
  let x_1908 : vec4<f32> = textureSampleLevel(unity_SpecCube0, samplerunity_SpecCube0, vec3<f32>(x_1905.x, x_1905.y, x_1905.z), x_1907);
  u_xlat8 = x_1908;
  let x_1910 : f32 = u_xlat8.w;
  u_xlat1 = (x_1910 + -1.0f);
  let x_1917 : f32 = x_1915.unity_SpecCube0_HDR.w;
  let x_1918 : f32 = u_xlat1;
  u_xlat1 = ((x_1917 * x_1918) + 1.0f);
  let x_1921 : f32 = u_xlat1;
  u_xlat1 = max(x_1921, 0.0f);
  let x_1923 : f32 = u_xlat1;
  u_xlat1 = log2(x_1923);
  let x_1925 : f32 = u_xlat1;
  let x_1927 : f32 = x_1915.unity_SpecCube0_HDR.y;
  u_xlat1 = (x_1925 * x_1927);
  let x_1929 : f32 = u_xlat1;
  u_xlat1 = exp2(x_1929);
  let x_1931 : f32 = u_xlat1;
  let x_1933 : f32 = x_1915.unity_SpecCube0_HDR.x;
  u_xlat1 = (x_1931 * x_1933);
  let x_1935 : vec4<f32> = u_xlat8;
  let x_1937 : f32 = u_xlat1;
  let x_1939 : vec3<f32> = (vec3<f32>(x_1935.x, x_1935.y, x_1935.z) * vec3<f32>(x_1937, x_1937, x_1937));
  let x_1940 : vec4<f32> = u_xlat8;
  u_xlat8 = vec4<f32>(x_1939.x, x_1939.y, x_1939.z, x_1940.w);
  let x_1942 : f32 = u_xlat63;
  let x_1944 : f32 = u_xlat63;
  let x_1948 : vec2<f32> = ((vec2<f32>(x_1942, x_1942) * vec2<f32>(x_1944, x_1944)) + vec2<f32>(-1.0f, 1.0f));
  let x_1949 : vec4<f32> = u_xlat9;
  u_xlat9 = vec4<f32>(x_1948.x, x_1948.y, x_1949.z, x_1949.w);
  let x_1952 : f32 = u_xlat9.y;
  u_xlat1 = (1.0f / x_1952);
  let x_1955 : vec4<f32> = u_xlat0;
  let x_1958 : f32 = u_xlat60;
  u_xlat29 = (-(vec3<f32>(x_1955.x, x_1955.y, x_1955.z)) + vec3<f32>(x_1958, x_1958, x_1958));
  let x_1961 : vec3<f32> = u_xlat22;
  let x_1963 : vec3<f32> = u_xlat29;
  let x_1965 : vec4<f32> = u_xlat0;
  u_xlat29 = ((vec3<f32>(x_1961.x, x_1961.x, x_1961.x) * x_1963) + vec3<f32>(x_1965.x, x_1965.y, x_1965.z));
  let x_1968 : f32 = u_xlat1;
  let x_1970 : vec3<f32> = u_xlat29;
  u_xlat29 = (vec3<f32>(x_1968, x_1968, x_1968) * x_1970);
  let x_1972 : vec4<f32> = u_xlat8;
  let x_1974 : vec3<f32> = u_xlat29;
  let x_1975 : vec3<f32> = (vec3<f32>(x_1972.x, x_1972.y, x_1972.z) * x_1974);
  let x_1976 : vec4<f32> = u_xlat8;
  u_xlat8 = vec4<f32>(x_1975.x, x_1975.y, x_1975.z, x_1976.w);
  let x_1978 : vec4<f32> = u_xlat3;
  let x_1980 : vec3<f32> = u_xlat5;
  let x_1982 : vec4<f32> = u_xlat8;
  let x_1984 : vec3<f32> = ((vec3<f32>(x_1978.x, x_1978.y, x_1978.z) * x_1980) + vec3<f32>(x_1982.x, x_1982.y, x_1982.z));
  let x_1985 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_1984.x, x_1984.y, x_1984.z, x_1985.w);
  let x_1988 : f32 = u_xlat2.x;
  let x_1990 : f32 = x_1915.unity_LightData.z;
  u_xlat60 = (x_1988 * x_1990);
  let x_1992 : vec3<f32> = u_xlat21;
  let x_1994 : vec4<f32> = x_44.x_MainLightPosition;
  u_xlat1 = dot(x_1992, vec3<f32>(x_1994.x, x_1994.y, x_1994.z));
  let x_1997 : f32 = u_xlat1;
  u_xlat1 = clamp(x_1997, 0.0f, 1.0f);
  let x_1999 : f32 = u_xlat60;
  let x_2000 : f32 = u_xlat1;
  u_xlat60 = (x_1999 * x_2000);
  let x_2002 : f32 = u_xlat60;
  let x_2004 : vec4<f32> = u_xlat6;
  let x_2006 : vec3<f32> = (vec3<f32>(x_2002, x_2002, x_2002) * vec3<f32>(x_2004.x, x_2004.y, x_2004.z));
  let x_2007 : vec4<f32> = u_xlat2;
  u_xlat2 = vec4<f32>(x_2006.x, x_2006.y, x_2006.z, x_2007.w);
  let x_2009 : vec4<f32> = u_xlat7;
  let x_2012 : vec4<f32> = x_44.x_MainLightPosition;
  let x_2014 : vec3<f32> = (vec3<f32>(x_2009.x, x_2009.y, x_2009.z) + vec3<f32>(x_2012.x, x_2012.y, x_2012.z));
  let x_2015 : vec4<f32> = u_xlat6;
  u_xlat6 = vec4<f32>(x_2014.x, x_2014.y, x_2014.z, x_2015.w);
  let x_2017 : vec4<f32> = u_xlat6;
  let x_2019 : vec4<f32> = u_xlat6;
  u_xlat60 = dot(vec3<f32>(x_2017.x, x_2017.y, x_2017.z), vec3<f32>(x_2019.x, x_2019.y, x_2019.z));
  let x_2022 : f32 = u_xlat60;
  u_xlat60 = max(x_2022, 1.17549435e-37f);
  let x_2025 : f32 = u_xlat60;
  u_xlat60 = inverseSqrt(x_2025);
  let x_2027 : f32 = u_xlat60;
  let x_2029 : vec4<f32> = u_xlat6;
  let x_2031 : vec3<f32> = (vec3<f32>(x_2027, x_2027, x_2027) * vec3<f32>(x_2029.x, x_2029.y, x_2029.z));
  let x_2032 : vec4<f32> = u_xlat6;
  u_xlat6 = vec4<f32>(x_2031.x, x_2031.y, x_2031.z, x_2032.w);
  let x_2034 : vec3<f32> = u_xlat21;
  let x_2035 : vec4<f32> = u_xlat6;
  u_xlat60 = dot(x_2034, vec3<f32>(x_2035.x, x_2035.y, x_2035.z));
  let x_2038 : f32 = u_xlat60;
  u_xlat60 = clamp(x_2038, 0.0f, 1.0f);
  let x_2041 : vec4<f32> = x_44.x_MainLightPosition;
  let x_2043 : vec4<f32> = u_xlat6;
  u_xlat1 = dot(vec3<f32>(x_2041.x, x_2041.y, x_2041.z), vec3<f32>(x_2043.x, x_2043.y, x_2043.z));
  let x_2046 : f32 = u_xlat1;
  u_xlat1 = clamp(x_2046, 0.0f, 1.0f);
  let x_2048 : f32 = u_xlat60;
  let x_2049 : f32 = u_xlat60;
  u_xlat60 = (x_2048 * x_2049);
  let x_2051 : f32 = u_xlat60;
  let x_2053 : f32 = u_xlat9.x;
  u_xlat60 = ((x_2051 * x_2053) + 1.000010014f);
  let x_2057 : f32 = u_xlat1;
  let x_2058 : f32 = u_xlat1;
  u_xlat1 = (x_2057 * x_2058);
  let x_2060 : f32 = u_xlat60;
  let x_2061 : f32 = u_xlat60;
  u_xlat60 = (x_2060 * x_2061);
  let x_2063 : f32 = u_xlat1;
  u_xlat1 = max(x_2063, 0.100000001f);
  let x_2066 : f32 = u_xlat60;
  let x_2067 : f32 = u_xlat1;
  u_xlat60 = (x_2066 * x_2067);
  let x_2069 : f32 = u_xlat24;
  let x_2070 : f32 = u_xlat60;
  u_xlat60 = (x_2069 * x_2070);
  let x_2072 : f32 = u_xlat64;
  let x_2073 : f32 = u_xlat60;
  u_xlat60 = (x_2072 / x_2073);
  let x_2075 : vec4<f32> = u_xlat0;
  let x_2077 : f32 = u_xlat60;
  let x_2080 : vec3<f32> = u_xlat5;
  let x_2081 : vec3<f32> = ((vec3<f32>(x_2075.x, x_2075.y, x_2075.z) * vec3<f32>(x_2077, x_2077, x_2077)) + x_2080);
  let x_2082 : vec4<f32> = u_xlat6;
  u_xlat6 = vec4<f32>(x_2081.x, x_2081.y, x_2081.z, x_2082.w);
  let x_2084 : vec4<f32> = u_xlat2;
  let x_2086 : vec4<f32> = u_xlat6;
  let x_2088 : vec3<f32> = (vec3<f32>(x_2084.x, x_2084.y, x_2084.z) * vec3<f32>(x_2086.x, x_2086.y, x_2086.z));
  let x_2089 : vec4<f32> = u_xlat2;
  u_xlat2 = vec4<f32>(x_2088.x, x_2088.y, x_2088.z, x_2089.w);
  let x_2092 : f32 = x_44.x_AdditionalLightsCount.x;
  let x_2094 : f32 = x_1915.unity_LightData.y;
  u_xlat60 = min(x_2092, x_2094);
  let x_2097 : f32 = u_xlat60;
  u_xlatu60 = bitcast<u32>(i32(x_2097));
  u_xlat6.x = 0.0f;
  u_xlat6.y = 0.0f;
  u_xlat6.z = 0.0f;
  u_xlatu_loop_1 = 0u;
  loop {
    let x_2109 : u32 = u_xlatu_loop_1;
    let x_2110 : u32 = u_xlatu60;
    if ((x_2109 < x_2110)) {
    } else {
      break;
    }
    let x_2113 : u32 = u_xlatu_loop_1;
    u_xlatu63 = (x_2113 >> 2u);
    let x_2116 : u32 = u_xlatu_loop_1;
    u_xlati65 = bitcast<i32>((x_2116 & 3u));
    let x_2119 : u32 = u_xlatu63;
    let x_2122 : vec4<f32> = x_1915.unity_LightIndices[bitcast<i32>(x_2119)];
    let x_2132 : i32 = u_xlati65;
    indexable = array<vec4<u32>, 4u>(vec4<u32>(1065353216u, 0u, 0u, 0u), vec4<u32>(0u, 1065353216u, 0u, 0u), vec4<u32>(0u, 0u, 1065353216u, 0u), vec4<u32>(0u, 0u, 0u, 1065353216u));
    let x_2137 : vec4<u32> = indexable[x_2132];
    u_xlat63 = dot(x_2122, bitcast<vec4<f32>>(x_2137));
    let x_2141 : f32 = u_xlat63;
    u_xlati63 = i32(x_2141);
    let x_2143 : vec3<f32> = vs_TEXCOORD7;
    let x_2155 : i32 = u_xlati63;
    let x_2157 : vec4<f32> = x_2154.x_AdditionalLightsPosition[x_2155];
    let x_2160 : i32 = u_xlati63;
    let x_2162 : vec4<f32> = x_2154.x_AdditionalLightsPosition[x_2160];
    let x_2164 : vec3<f32> = ((-(x_2143) * vec3<f32>(x_2157.w, x_2157.w, x_2157.w)) + vec3<f32>(x_2162.x, x_2162.y, x_2162.z));
    let x_2165 : vec4<f32> = u_xlat8;
    u_xlat8 = vec4<f32>(x_2164.x, x_2164.y, x_2164.z, x_2165.w);
    let x_2167 : vec4<f32> = u_xlat8;
    let x_2169 : vec4<f32> = u_xlat8;
    u_xlat65 = dot(vec3<f32>(x_2167.x, x_2167.y, x_2167.z), vec3<f32>(x_2169.x, x_2169.y, x_2169.z));
    let x_2172 : f32 = u_xlat65;
    u_xlat65 = max(x_2172, 6.10351562e-05f);
    let x_2175 : f32 = u_xlat65;
    u_xlat66 = inverseSqrt(x_2175);
    let x_2177 : f32 = u_xlat66;
    let x_2179 : vec4<f32> = u_xlat8;
    u_xlat29 = (vec3<f32>(x_2177, x_2177, x_2177) * vec3<f32>(x_2179.x, x_2179.y, x_2179.z));
    let x_2183 : f32 = u_xlat65;
    u_xlat67 = (1.0f / x_2183);
    let x_2185 : f32 = u_xlat65;
    let x_2186 : i32 = u_xlati63;
    let x_2188 : f32 = x_2154.x_AdditionalLightsAttenuation[x_2186].x;
    u_xlat65 = (x_2185 * x_2188);
    let x_2190 : f32 = u_xlat65;
    let x_2192 : f32 = u_xlat65;
    u_xlat65 = ((-(x_2190) * x_2192) + 1.0f);
    let x_2195 : f32 = u_xlat65;
    u_xlat65 = max(x_2195, 0.0f);
    let x_2197 : f32 = u_xlat65;
    let x_2198 : f32 = u_xlat65;
    u_xlat65 = (x_2197 * x_2198);
    let x_2200 : f32 = u_xlat65;
    let x_2201 : f32 = u_xlat67;
    u_xlat65 = (x_2200 * x_2201);
    let x_2203 : i32 = u_xlati63;
    let x_2205 : vec4<f32> = x_2154.x_AdditionalLightsSpotDir[x_2203];
    let x_2207 : vec3<f32> = u_xlat29;
    u_xlat67 = dot(vec3<f32>(x_2205.x, x_2205.y, x_2205.z), x_2207);
    let x_2209 : f32 = u_xlat67;
    let x_2210 : i32 = u_xlati63;
    let x_2212 : f32 = x_2154.x_AdditionalLightsAttenuation[x_2210].z;
    let x_2214 : i32 = u_xlati63;
    let x_2216 : f32 = x_2154.x_AdditionalLightsAttenuation[x_2214].w;
    u_xlat67 = ((x_2209 * x_2212) + x_2216);
    let x_2218 : f32 = u_xlat67;
    u_xlat67 = clamp(x_2218, 0.0f, 1.0f);
    let x_2220 : f32 = u_xlat67;
    let x_2221 : f32 = u_xlat67;
    u_xlat67 = (x_2220 * x_2221);
    let x_2223 : f32 = u_xlat65;
    let x_2224 : f32 = u_xlat67;
    u_xlat65 = (x_2223 * x_2224);
    let x_2226 : f32 = u_xlat44;
    let x_2228 : i32 = u_xlati63;
    let x_2230 : vec4<f32> = x_2154.x_AdditionalLightsColor[x_2228];
    let x_2232 : vec3<f32> = (vec3<f32>(x_2226, x_2226, x_2226) * vec3<f32>(x_2230.x, x_2230.y, x_2230.z));
    let x_2233 : vec4<f32> = u_xlat10;
    u_xlat10 = vec4<f32>(x_2232.x, x_2232.y, x_2232.z, x_2233.w);
    let x_2235 : vec3<f32> = u_xlat21;
    let x_2236 : vec3<f32> = u_xlat29;
    u_xlat63 = dot(x_2235, x_2236);
    let x_2238 : f32 = u_xlat63;
    u_xlat63 = clamp(x_2238, 0.0f, 1.0f);
    let x_2240 : f32 = u_xlat63;
    let x_2241 : f32 = u_xlat65;
    u_xlat63 = (x_2240 * x_2241);
    let x_2243 : f32 = u_xlat63;
    let x_2245 : vec4<f32> = u_xlat10;
    let x_2247 : vec3<f32> = (vec3<f32>(x_2243, x_2243, x_2243) * vec3<f32>(x_2245.x, x_2245.y, x_2245.z));
    let x_2248 : vec4<f32> = u_xlat10;
    u_xlat10 = vec4<f32>(x_2247.x, x_2247.y, x_2247.z, x_2248.w);
    let x_2250 : vec4<f32> = u_xlat8;
    let x_2252 : f32 = u_xlat66;
    let x_2255 : vec4<f32> = u_xlat7;
    let x_2257 : vec3<f32> = ((vec3<f32>(x_2250.x, x_2250.y, x_2250.z) * vec3<f32>(x_2252, x_2252, x_2252)) + vec3<f32>(x_2255.x, x_2255.y, x_2255.z));
    let x_2258 : vec4<f32> = u_xlat8;
    u_xlat8 = vec4<f32>(x_2257.x, x_2257.y, x_2257.z, x_2258.w);
    let x_2260 : vec4<f32> = u_xlat8;
    let x_2262 : vec4<f32> = u_xlat8;
    u_xlat63 = dot(vec3<f32>(x_2260.x, x_2260.y, x_2260.z), vec3<f32>(x_2262.x, x_2262.y, x_2262.z));
    let x_2265 : f32 = u_xlat63;
    u_xlat63 = max(x_2265, 1.17549435e-37f);
    let x_2267 : f32 = u_xlat63;
    u_xlat63 = inverseSqrt(x_2267);
    let x_2269 : f32 = u_xlat63;
    let x_2271 : vec4<f32> = u_xlat8;
    let x_2273 : vec3<f32> = (vec3<f32>(x_2269, x_2269, x_2269) * vec3<f32>(x_2271.x, x_2271.y, x_2271.z));
    let x_2274 : vec4<f32> = u_xlat8;
    u_xlat8 = vec4<f32>(x_2273.x, x_2273.y, x_2273.z, x_2274.w);
    let x_2276 : vec3<f32> = u_xlat21;
    let x_2277 : vec4<f32> = u_xlat8;
    u_xlat63 = dot(x_2276, vec3<f32>(x_2277.x, x_2277.y, x_2277.z));
    let x_2280 : f32 = u_xlat63;
    u_xlat63 = clamp(x_2280, 0.0f, 1.0f);
    let x_2282 : vec3<f32> = u_xlat29;
    let x_2283 : vec4<f32> = u_xlat8;
    u_xlat65 = dot(x_2282, vec3<f32>(x_2283.x, x_2283.y, x_2283.z));
    let x_2286 : f32 = u_xlat65;
    u_xlat65 = clamp(x_2286, 0.0f, 1.0f);
    let x_2288 : f32 = u_xlat63;
    let x_2289 : f32 = u_xlat63;
    u_xlat63 = (x_2288 * x_2289);
    let x_2291 : f32 = u_xlat63;
    let x_2293 : f32 = u_xlat9.x;
    u_xlat63 = ((x_2291 * x_2293) + 1.000010014f);
    let x_2296 : f32 = u_xlat65;
    let x_2297 : f32 = u_xlat65;
    u_xlat65 = (x_2296 * x_2297);
    let x_2299 : f32 = u_xlat63;
    let x_2300 : f32 = u_xlat63;
    u_xlat63 = (x_2299 * x_2300);
    let x_2302 : f32 = u_xlat65;
    u_xlat65 = max(x_2302, 0.100000001f);
    let x_2304 : f32 = u_xlat63;
    let x_2305 : f32 = u_xlat65;
    u_xlat63 = (x_2304 * x_2305);
    let x_2307 : f32 = u_xlat24;
    let x_2308 : f32 = u_xlat63;
    u_xlat63 = (x_2307 * x_2308);
    let x_2310 : f32 = u_xlat64;
    let x_2311 : f32 = u_xlat63;
    u_xlat63 = (x_2310 / x_2311);
    let x_2313 : vec4<f32> = u_xlat0;
    let x_2315 : f32 = u_xlat63;
    let x_2318 : vec3<f32> = u_xlat5;
    let x_2319 : vec3<f32> = ((vec3<f32>(x_2313.x, x_2313.y, x_2313.z) * vec3<f32>(x_2315, x_2315, x_2315)) + x_2318);
    let x_2320 : vec4<f32> = u_xlat8;
    u_xlat8 = vec4<f32>(x_2319.x, x_2319.y, x_2319.z, x_2320.w);
    let x_2322 : vec4<f32> = u_xlat8;
    let x_2324 : vec4<f32> = u_xlat10;
    let x_2327 : vec4<f32> = u_xlat6;
    let x_2329 : vec3<f32> = ((vec3<f32>(x_2322.x, x_2322.y, x_2322.z) * vec3<f32>(x_2324.x, x_2324.y, x_2324.z)) + vec3<f32>(x_2327.x, x_2327.y, x_2327.z));
    let x_2330 : vec4<f32> = u_xlat6;
    u_xlat6 = vec4<f32>(x_2329.x, x_2329.y, x_2329.z, x_2330.w);

    continuing {
      let x_2332 : u32 = u_xlatu_loop_1;
      u_xlatu_loop_1 = (x_2332 + bitcast<u32>(1i));
    }
  }
  let x_2334 : vec4<f32> = u_xlat3;
  let x_2336 : vec3<f32> = u_xlat4;
  let x_2339 : vec4<f32> = u_xlat2;
  let x_2341 : vec3<f32> = ((vec3<f32>(x_2334.x, x_2334.y, x_2334.z) * vec3<f32>(x_2336.x, x_2336.x, x_2336.x)) + vec3<f32>(x_2339.x, x_2339.y, x_2339.z));
  let x_2342 : vec4<f32> = u_xlat0;
  u_xlat0 = vec4<f32>(x_2341.x, x_2341.y, x_2341.z, x_2342.w);
  let x_2344 : vec4<f32> = u_xlat6;
  let x_2346 : vec4<f32> = u_xlat0;
  let x_2348 : vec3<f32> = (vec3<f32>(x_2344.x, x_2344.y, x_2344.z) + vec3<f32>(x_2346.x, x_2346.y, x_2346.z));
  let x_2349 : vec4<f32> = u_xlat0;
  u_xlat0 = vec4<f32>(x_2348.x, x_2348.y, x_2348.z, x_2349.w);
  let x_2351 : f32 = u_xlat62;
  let x_2352 : f32 = u_xlat62;
  u_xlat60 = (x_2351 * -(x_2352));
  let x_2355 : f32 = u_xlat60;
  u_xlat60 = exp2(x_2355);
  let x_2357 : vec4<f32> = u_xlat0;
  let x_2361 : vec4<f32> = x_44.unity_FogColor;
  let x_2364 : vec3<f32> = (vec3<f32>(x_2357.x, x_2357.y, x_2357.z) + -(vec3<f32>(x_2361.x, x_2361.y, x_2361.z)));
  let x_2365 : vec4<f32> = u_xlat0;
  u_xlat0 = vec4<f32>(x_2364.x, x_2364.y, x_2364.z, x_2365.w);
  let x_2369 : f32 = u_xlat60;
  let x_2371 : vec4<f32> = u_xlat0;
  let x_2375 : vec4<f32> = x_44.unity_FogColor;
  let x_2377 : vec3<f32> = ((vec3<f32>(x_2369, x_2369, x_2369) * vec3<f32>(x_2371.x, x_2371.y, x_2371.z)) + vec3<f32>(x_2375.x, x_2375.y, x_2375.z));
  let x_2378 : vec4<f32> = SV_Target0;
  SV_Target0 = vec4<f32>(x_2377.x, x_2377.y, x_2377.z, x_2378.w);
  SV_Target0.w = 1.0f;
  return;
}

struct main_out {
  @location(0)
  SV_Target0_1 : vec4<f32>,
}

@fragment
fn main(@builtin(position) gl_FragCoord_param : vec4<f32>, @location(0) vs_TEXCOORD0_param : vec4<f32>, @location(1) vs_TEXCOORD3_param : vec4<f32>, @location(4) vs_TEXCOORD7_param : vec3<f32>, @location(2) vs_TEXCOORD4_param : vec4<f32>, @location(3) vs_TEXCOORD5_param : vec4<f32>) -> main_out {
  gl_FragCoord = gl_FragCoord_param;
  vs_TEXCOORD0 = vs_TEXCOORD0_param;
  vs_TEXCOORD3 = vs_TEXCOORD3_param;
  vs_TEXCOORD7 = vs_TEXCOORD7_param;
  vs_TEXCOORD4 = vs_TEXCOORD4_param;
  vs_TEXCOORD5 = vs_TEXCOORD5_param;
  main_1();
  return main_out(SV_Target0);
}

