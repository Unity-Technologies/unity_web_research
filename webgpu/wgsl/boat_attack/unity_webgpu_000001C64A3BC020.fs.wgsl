struct PGlobals {
  x_ScaledScreenParams : vec4<f32>,
  x_GlobalMipBias : vec2<f32>,
  x_AlphaToMaskAvailable : f32,
  @size(4)
  padding : u32,
  x_MainLightPosition : vec4<f32>,
  x_MainLightColor : vec4<f32>,
  x_AmbientOcclusionParam : vec4<f32>,
  x_AdditionalLightsCount : vec4<f32>,
  x_RenderingLayerMaxInt : u32,
  x_RenderingLayerRcpMaxInt : f32,
  @size(8)
  padding_1 : u32,
  x_WorldSpaceCameraPos : vec3<f32>,
  @size(4)
  padding_2 : u32,
  x_ProjectionParams : vec4<f32>,
  x_ScreenParams : vec4<f32>,
  unity_OrthoParams : vec4<f32>,
  x_ScaleBiasRt : vec4<f32>,
  unity_FogParams : vec4<f32>,
  unity_FogColor : vec4<f32>,
  unity_MatrixV : mat4x4<f32>,
}

type Arr = array<vec4<f32>, 2u>;

struct UnityPerDraw {
  unity_ObjectToWorld : mat4x4<f32>,
  unity_WorldToObject : mat4x4<f32>,
  unity_LODFade : vec4<f32>,
  unity_WorldTransformParams : vec4<f32>,
  unity_RenderingLayer : vec4<f32>,
  unity_LightData : vec4<f32>,
  unity_LightIndices : Arr,
  unity_ProbesOcclusion : vec4<f32>,
  unity_SpecCube0_HDR : vec4<f32>,
  unity_SpecCube1_HDR : vec4<f32>,
  unity_SpecCube0_BoxMax : vec4<f32>,
  unity_SpecCube0_BoxMin : vec4<f32>,
  unity_SpecCube0_ProbePosition : vec4<f32>,
  unity_SpecCube1_BoxMax : vec4<f32>,
  unity_SpecCube1_BoxMin : vec4<f32>,
  unity_SpecCube1_ProbePosition : vec4<f32>,
  unity_LightmapST : vec4<f32>,
  unity_DynamicLightmapST : vec4<f32>,
  unity_SHAr : vec4<f32>,
  unity_SHAg : vec4<f32>,
  unity_SHAb : vec4<f32>,
  unity_SHBr : vec4<f32>,
  unity_SHBg : vec4<f32>,
  unity_SHBb : vec4<f32>,
  unity_SHC : vec4<f32>,
  unity_RendererBounds_Min : vec4<f32>,
  unity_RendererBounds_Max : vec4<f32>,
  unity_MatrixPreviousM : mat4x4<f32>,
  unity_MatrixPreviousMI : mat4x4<f32>,
  unity_MotionVectorsParams : vec4<f32>,
  unity_SpriteColor : vec4<f32>,
  unity_SpriteProps : vec4<f32>,
}

struct UnityPerMaterial {
  Texture2D_B222E8F_TexelSize : vec4<f32>,
  Color_C30C7CA3 : vec4<f32>,
  Texture2D_D9BFD5F1_TexelSize : vec4<f32>,
}

type Arr_1 = array<mat4x4<f32>, 5u>;

struct MainLightShadows {
  x_MainLightWorldToShadow : Arr_1,
  x_CascadeShadowSplitSpheres0 : vec4<f32>,
  x_CascadeShadowSplitSpheres1 : vec4<f32>,
  x_CascadeShadowSplitSpheres2 : vec4<f32>,
  x_CascadeShadowSplitSpheres3 : vec4<f32>,
  x_CascadeShadowSplitSphereRadii : vec4<f32>,
  x_MainLightShadowOffset0 : vec4<f32>,
  x_MainLightShadowOffset1 : vec4<f32>,
  x_MainLightShadowParams : vec4<f32>,
  x_MainLightShadowmapSize : vec4<f32>,
}

type Arr_2 = array<vec4<f32>, 256u>;

type Arr_3 = array<vec4<f32>, 256u>;

type Arr_4 = array<vec4<f32>, 256u>;

type Arr_5 = array<vec4<f32>, 256u>;

type Arr_6 = array<vec4<f32>, 256u>;

struct strided_arr {
  @size(16)
  el : f32,
}

type Arr_7 = array<strided_arr, 256u>;

struct AdditionalLights {
  x_AdditionalLightsPosition : Arr_6,
  x_AdditionalLightsColor : Arr_6,
  x_AdditionalLightsAttenuation : Arr_6,
  x_AdditionalLightsSpotDir : Arr_6,
  x_AdditionalLightsOcclusionProbes : Arr_6,
  x_AdditionalLightsLayerMasks : Arr_7,
}

var<private> gl_FragCoord : vec4<f32>;

var<private> vs_INTERP1 : vec3<f32>;

@group(1) @binding(0) var<uniform> x_90 : PGlobals;

var<private> vs_INTERP0 : vec3<f32>;

@group(1) @binding(2) var<uniform> x_145 : UnityPerDraw;

@group(0) @binding(4) var Texture2D_B222E8F : texture_2d<f32>;

@group(0) @binding(10) var samplerTexture2D_B222E8F : sampler;

var<private> vs_INTERP3 : vec4<f32>;

@group(1) @binding(4) var<uniform> x_199 : UnityPerMaterial;

@group(0) @binding(5) var Texture2D_D9BFD5F1 : texture_2d<f32>;

@group(0) @binding(11) var samplerTexture2D_D9BFD5F1 : sampler;

var<private> vs_INTERP4 : vec4<f32>;

@group(1) @binding(3) var<uniform> x_255 : MainLightShadows;

@group(0) @binding(3) var x_MainLightShadowmapTexture : texture_depth_2d;

@group(0) @binding(9) var sampler_MainLightShadowmapTexture : sampler_comparison;

var<private> vs_INTERP2 : vec4<f32>;

@group(0) @binding(1) var unity_Lightmap : texture_2d<f32>;

@group(0) @binding(7) var samplerunity_Lightmap : sampler;

var<private> vs_INTERP5 : vec2<f32>;

@group(0) @binding(2) var x_ScreenSpaceOcclusionTexture : texture_2d<f32>;

@group(0) @binding(8) var sampler_ScreenSpaceOcclusionTexture : sampler;

@group(0) @binding(0) var unity_SpecCube0 : texture_cube<f32>;

@group(0) @binding(6) var samplerunity_SpecCube0 : sampler;

@group(1) @binding(1) var<uniform> x_3759 : AdditionalLights;

var<private> SV_Target0 : vec4<f32>;

var<private> SV_Target1 : vec4<f32>;

fn int_bitfieldInsert_i1_i1_i1_i1_(base : ptr<function, i32>, insert : ptr<function, i32>, offset_1 : ptr<function, i32>, bits : ptr<function, i32>) -> i32 {
  var mask : u32;
  let x_19 : i32 = *(bits);
  let x_23 : i32 = *(offset_1);
  mask = (~((4294967295u << bitcast<u32>(x_19))) << bitcast<u32>(x_23));
  let x_26 : i32 = *(base);
  let x_28 : u32 = mask;
  let x_31 : i32 = *(insert);
  let x_33 : i32 = *(offset_1);
  let x_36 : u32 = mask;
  return bitcast<i32>(((bitcast<u32>(x_26) & ~(x_28)) | ((bitcast<u32>(x_31) << bitcast<u32>(x_33)) & x_36)));
}

fn main_1() {
  var hlslcc_FragCoord : vec4<f32>;
  var u_xlat0 : vec3<f32>;
  var u_xlatb66 : bool;
  var u_xlat1 : vec3<f32>;
  var u_xlat67 : f32;
  var u_xlat2 : vec3<f32>;
  var x_133 : vec3<f32>;
  var u_xlat66 : f32;
  var u_xlat3 : vec4<f32>;
  var u_xlat4 : vec3<f32>;
  var u_xlat5 : vec4<f32>;
  var u_xlat6 : vec4<f32>;
  var u_xlat27 : vec3<f32>;
  var u_xlat7 : vec4<f32>;
  var u_xlat8 : vec4<f32>;
  var u_xlat9 : vec4<f32>;
  var u_xlatb6 : vec4<bool>;
  var u_xlatu66 : u32;
  var u_xlati66 : i32;
  var u_xlatb67 : bool;
  var txVec0 : vec3<f32>;
  var txVec1 : vec3<f32>;
  var txVec2 : vec3<f32>;
  var txVec3 : vec3<f32>;
  var u_xlatb68 : bool;
  var u_xlat51 : vec2<f32>;
  var u_xlat53 : vec2<f32>;
  var u_xlat10 : vec4<f32>;
  var u_xlat11 : vec4<f32>;
  var u_xlat12 : vec4<f32>;
  var u_xlat13 : vec4<f32>;
  var u_xlat14 : vec4<f32>;
  var u_xlat15 : vec4<f32>;
  var u_xlat68 : f32;
  var txVec4 : vec3<f32>;
  var u_xlat70 : f32;
  var txVec5 : vec3<f32>;
  var u_xlat72 : f32;
  var txVec6 : vec3<f32>;
  var txVec7 : vec3<f32>;
  var txVec8 : vec3<f32>;
  var txVec9 : vec3<f32>;
  var txVec10 : vec3<f32>;
  var txVec11 : vec3<f32>;
  var txVec12 : vec3<f32>;
  var u_xlat30 : vec3<f32>;
  var u_xlat16 : vec4<f32>;
  var u_xlat17 : vec4<f32>;
  var u_xlat31 : vec3<f32>;
  var u_xlat59 : vec2<f32>;
  var u_xlat54 : vec2<f32>;
  var u_xlat18 : vec4<f32>;
  var u_xlat19 : vec4<f32>;
  var u_xlat20 : vec4<f32>;
  var txVec13 : vec3<f32>;
  var txVec14 : vec3<f32>;
  var txVec15 : vec3<f32>;
  var txVec16 : vec3<f32>;
  var txVec17 : vec3<f32>;
  var txVec18 : vec3<f32>;
  var txVec19 : vec3<f32>;
  var txVec20 : vec3<f32>;
  var txVec21 : vec3<f32>;
  var txVec22 : vec3<f32>;
  var txVec23 : vec3<f32>;
  var txVec24 : vec3<f32>;
  var txVec25 : vec3<f32>;
  var txVec26 : vec3<f32>;
  var txVec27 : vec3<f32>;
  var txVec28 : vec3<f32>;
  var txVec29 : vec3<f32>;
  var u_xlatb70 : bool;
  var u_xlatb72 : bool;
  var x_1714 : f32;
  var u_xlatb3 : bool;
  var u_xlatu2 : vec3<u32>;
  var u_xlatu46 : u32;
  var u_xlatu25 : u32;
  var u_xlati46 : i32;
  var u_xlati24 : i32;
  var u_xlatu24 : u32;
  var u_xlati2 : i32;
  var param : i32;
  var param_1 : i32;
  var param_2 : i32;
  var param_3 : i32;
  var u_xlat24 : vec2<f32>;
  var x_1848 : f32;
  var u_xlatb24 : vec2<bool>;
  var x_1879 : f32;
  var u_xlat46 : f32;
  var u_xlatb2 : bool;
  var x_1926 : f32;
  var u_xlat69 : f32;
  var u_xlat29 : f32;
  var txVec30 : vec3<f32>;
  var txVec31 : vec3<f32>;
  var txVec32 : vec3<f32>;
  var txVec33 : vec3<f32>;
  var u_xlatb73 : bool;
  var u_xlat52 : vec2<f32>;
  var u_xlat73 : f32;
  var txVec34 : vec3<f32>;
  var txVec35 : vec3<f32>;
  var txVec36 : vec3<f32>;
  var txVec37 : vec3<f32>;
  var txVec38 : vec3<f32>;
  var txVec39 : vec3<f32>;
  var txVec40 : vec3<f32>;
  var txVec41 : vec3<f32>;
  var txVec42 : vec3<f32>;
  var u_xlat32 : vec2<f32>;
  var u_xlat60 : vec2<f32>;
  var u_xlat55 : vec2<f32>;
  var u_xlat21 : vec4<f32>;
  var txVec43 : vec3<f32>;
  var txVec44 : vec3<f32>;
  var txVec45 : vec3<f32>;
  var txVec46 : vec3<f32>;
  var txVec47 : vec3<f32>;
  var txVec48 : vec3<f32>;
  var txVec49 : vec3<f32>;
  var txVec50 : vec3<f32>;
  var txVec51 : vec3<f32>;
  var txVec52 : vec3<f32>;
  var txVec53 : vec3<f32>;
  var txVec54 : vec3<f32>;
  var txVec55 : vec3<f32>;
  var txVec56 : vec3<f32>;
  var txVec57 : vec3<f32>;
  var txVec58 : vec3<f32>;
  var txVec59 : vec3<f32>;
  var u_xlatu_loop_1 : u32;
  var u_xlatu68 : u32;
  var u_xlati69 : i32;
  var indexable : array<vec4<u32>, 4u>;
  var u_xlati68 : i32;
  var u_xlat71 : f32;
  var u_xlatu0 : u32;
  var u_xlat_precise_vec4 : vec4<f32>;
  var u_xlat_precise_ivec4 : vec4<i32>;
  var u_xlat_precise_bvec4 : vec4<bool>;
  var u_xlat_precise_uvec4 : vec4<u32>;
  let x_49 : vec4<f32> = gl_FragCoord;
  let x_50 : vec3<f32> = vec3<f32>(x_49.x, x_49.y, x_49.z);
  let x_55 : f32 = gl_FragCoord.w;
  hlslcc_FragCoord = vec4<f32>(x_50.x, x_50.y, x_50.z, (1.0f / x_55));
  let x_65 : vec3<f32> = vs_INTERP1;
  let x_66 : vec3<f32> = vs_INTERP1;
  u_xlat0.x = dot(x_65, x_66);
  let x_72 : f32 = u_xlat0.x;
  u_xlat0.x = sqrt(x_72);
  let x_76 : f32 = u_xlat0.x;
  u_xlat0.x = (1.0f / x_76);
  let x_79 : vec3<f32> = u_xlat0;
  let x_81 : vec3<f32> = vs_INTERP1;
  u_xlat0 = (vec3<f32>(x_79.x, x_79.x, x_79.x) * x_81);
  let x_94 : f32 = x_90.unity_OrthoParams.w;
  u_xlatb66 = (x_94 == 0.0f);
  let x_99 : vec3<f32> = vs_INTERP0;
  let x_104 : vec3<f32> = x_90.x_WorldSpaceCameraPos;
  u_xlat1 = (-(x_99) + x_104);
  let x_107 : vec3<f32> = u_xlat1;
  let x_108 : vec3<f32> = u_xlat1;
  u_xlat67 = dot(x_107, x_108);
  let x_110 : f32 = u_xlat67;
  u_xlat67 = inverseSqrt(x_110);
  let x_112 : f32 = u_xlat67;
  let x_114 : vec3<f32> = u_xlat1;
  u_xlat1 = (vec3<f32>(x_112, x_112, x_112) * x_114);
  let x_121 : f32 = x_90.unity_MatrixV[0i].z;
  u_xlat2.x = x_121;
  let x_125 : f32 = x_90.unity_MatrixV[1i].z;
  u_xlat2.y = x_125;
  let x_130 : f32 = x_90.unity_MatrixV[2i].z;
  u_xlat2.z = x_130;
  let x_132 : bool = u_xlatb66;
  if (x_132) {
    let x_136 : vec3<f32> = u_xlat1;
    x_133 = x_136;
  } else {
    let x_138 : vec3<f32> = u_xlat2;
    x_133 = x_138;
  }
  let x_139 : vec3<f32> = x_133;
  u_xlat1 = x_139;
  let x_140 : vec3<f32> = u_xlat1;
  let x_148 : vec4<f32> = x_145.unity_WorldToObject[1i];
  u_xlat2 = (vec3<f32>(x_140.y, x_140.y, x_140.y) * vec3<f32>(x_148.x, x_148.y, x_148.z));
  let x_152 : vec4<f32> = x_145.unity_WorldToObject[0i];
  let x_154 : vec3<f32> = u_xlat1;
  let x_157 : vec3<f32> = u_xlat2;
  u_xlat2 = ((vec3<f32>(x_152.x, x_152.y, x_152.z) * vec3<f32>(x_154.x, x_154.x, x_154.x)) + x_157);
  let x_160 : vec4<f32> = x_145.unity_WorldToObject[2i];
  let x_162 : vec3<f32> = u_xlat1;
  let x_165 : vec3<f32> = u_xlat2;
  u_xlat2 = ((vec3<f32>(x_160.x, x_160.y, x_160.z) * vec3<f32>(x_162.z, x_162.z, x_162.z)) + x_165);
  let x_168 : vec3<f32> = u_xlat2;
  let x_169 : vec3<f32> = u_xlat2;
  u_xlat66 = dot(x_168, x_169);
  let x_171 : f32 = u_xlat66;
  u_xlat66 = inverseSqrt(x_171);
  let x_173 : f32 = u_xlat66;
  let x_175 : vec3<f32> = u_xlat2;
  u_xlat2 = (vec3<f32>(x_173, x_173, x_173) * x_175);
  let x_189 : vec4<f32> = vs_INTERP3;
  let x_192 : f32 = x_90.x_GlobalMipBias.x;
  let x_193 : vec4<f32> = textureSampleBias(Texture2D_B222E8F, samplerTexture2D_B222E8F, vec2<f32>(x_189.x, x_189.y), x_192);
  u_xlat3 = x_193;
  let x_195 : vec4<f32> = u_xlat3;
  let x_201 : vec4<f32> = x_199.Color_C30C7CA3;
  u_xlat4 = (vec3<f32>(x_195.x, x_195.y, x_195.z) * vec3<f32>(x_201.x, x_201.y, x_201.z));
  let x_210 : vec4<f32> = vs_INTERP3;
  let x_213 : f32 = x_90.x_GlobalMipBias.x;
  let x_214 : vec4<f32> = textureSampleBias(Texture2D_D9BFD5F1, samplerTexture2D_D9BFD5F1, vec2<f32>(x_210.x, x_210.y), x_213);
  u_xlat5 = vec4<f32>(x_214.w, x_214.x, x_214.y, x_214.z);
  let x_217 : vec4<f32> = u_xlat5;
  u_xlat6 = ((vec4<f32>(x_217.y, x_217.z, x_217.w, x_217.x) * vec4<f32>(2.0f, 2.0f, 2.0f, 2.0f)) + vec4<f32>(-1.0f, -1.0f, -1.0f, -1.0f));
  let x_225 : vec4<f32> = u_xlat6;
  let x_226 : vec4<f32> = u_xlat6;
  u_xlat66 = dot(x_225, x_226);
  let x_228 : f32 = u_xlat66;
  u_xlat66 = inverseSqrt(x_228);
  let x_231 : f32 = u_xlat66;
  let x_233 : vec4<f32> = u_xlat6;
  u_xlat27 = (vec3<f32>(x_231, x_231, x_231) * vec3<f32>(x_233.x, x_233.y, x_233.z));
  let x_238 : f32 = vs_INTERP4.y;
  u_xlat66 = (x_238 * 200.0f);
  let x_241 : f32 = u_xlat66;
  u_xlat66 = min(x_241, 1.0f);
  let x_243 : f32 = u_xlat66;
  let x_245 : vec4<f32> = u_xlat3;
  let x_247 : vec3<f32> = (vec3<f32>(x_243, x_243, x_243) * vec3<f32>(x_245.x, x_245.y, x_245.z));
  let x_248 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_247.x, x_247.y, x_247.z, x_248.w);
  let x_250 : vec3<f32> = vs_INTERP0;
  let x_257 : vec4<f32> = x_255.x_CascadeShadowSplitSpheres0;
  let x_260 : vec3<f32> = (x_250 + -(vec3<f32>(x_257.x, x_257.y, x_257.z)));
  let x_261 : vec4<f32> = u_xlat6;
  u_xlat6 = vec4<f32>(x_260.x, x_260.y, x_260.z, x_261.w);
  let x_264 : vec3<f32> = vs_INTERP0;
  let x_266 : vec4<f32> = x_255.x_CascadeShadowSplitSpheres1;
  let x_269 : vec3<f32> = (x_264 + -(vec3<f32>(x_266.x, x_266.y, x_266.z)));
  let x_270 : vec4<f32> = u_xlat7;
  u_xlat7 = vec4<f32>(x_269.x, x_269.y, x_269.z, x_270.w);
  let x_273 : vec3<f32> = vs_INTERP0;
  let x_276 : vec4<f32> = x_255.x_CascadeShadowSplitSpheres2;
  let x_279 : vec3<f32> = (x_273 + -(vec3<f32>(x_276.x, x_276.y, x_276.z)));
  let x_280 : vec4<f32> = u_xlat8;
  u_xlat8 = vec4<f32>(x_279.x, x_279.y, x_279.z, x_280.w);
  let x_283 : vec3<f32> = vs_INTERP0;
  let x_286 : vec4<f32> = x_255.x_CascadeShadowSplitSpheres3;
  let x_289 : vec3<f32> = (x_283 + -(vec3<f32>(x_286.x, x_286.y, x_286.z)));
  let x_290 : vec4<f32> = u_xlat9;
  u_xlat9 = vec4<f32>(x_289.x, x_289.y, x_289.z, x_290.w);
  let x_292 : vec4<f32> = u_xlat6;
  let x_294 : vec4<f32> = u_xlat6;
  u_xlat6.x = dot(vec3<f32>(x_292.x, x_292.y, x_292.z), vec3<f32>(x_294.x, x_294.y, x_294.z));
  let x_298 : vec4<f32> = u_xlat7;
  let x_300 : vec4<f32> = u_xlat7;
  u_xlat6.y = dot(vec3<f32>(x_298.x, x_298.y, x_298.z), vec3<f32>(x_300.x, x_300.y, x_300.z));
  let x_304 : vec4<f32> = u_xlat8;
  let x_306 : vec4<f32> = u_xlat8;
  u_xlat6.z = dot(vec3<f32>(x_304.x, x_304.y, x_304.z), vec3<f32>(x_306.x, x_306.y, x_306.z));
  let x_310 : vec4<f32> = u_xlat9;
  let x_312 : vec4<f32> = u_xlat9;
  u_xlat6.w = dot(vec3<f32>(x_310.x, x_310.y, x_310.z), vec3<f32>(x_312.x, x_312.y, x_312.z));
  let x_319 : vec4<f32> = u_xlat6;
  let x_322 : vec4<f32> = x_255.x_CascadeShadowSplitSphereRadii;
  u_xlatb6 = (x_319 < x_322);
  let x_325 : bool = u_xlatb6.x;
  u_xlat7.x = select(0.0f, 1.0f, x_325);
  let x_329 : bool = u_xlatb6.y;
  u_xlat7.y = select(0.0f, 1.0f, x_329);
  let x_333 : bool = u_xlatb6.z;
  u_xlat7.z = select(0.0f, 1.0f, x_333);
  let x_337 : bool = u_xlatb6.w;
  u_xlat7.w = select(0.0f, 1.0f, x_337);
  let x_341 : bool = u_xlatb6.x;
  u_xlat6.x = select(-0.0f, -1.0f, x_341);
  let x_346 : bool = u_xlatb6.y;
  u_xlat6.y = select(-0.0f, -1.0f, x_346);
  let x_350 : bool = u_xlatb6.z;
  u_xlat6.z = select(-0.0f, -1.0f, x_350);
  let x_353 : vec4<f32> = u_xlat6;
  let x_355 : vec4<f32> = u_xlat7;
  let x_357 : vec3<f32> = (vec3<f32>(x_353.x, x_353.y, x_353.z) + vec3<f32>(x_355.y, x_355.z, x_355.w));
  let x_358 : vec4<f32> = u_xlat6;
  u_xlat6 = vec4<f32>(x_357.x, x_357.y, x_357.z, x_358.w);
  let x_360 : vec4<f32> = u_xlat6;
  let x_363 : vec3<f32> = max(vec3<f32>(x_360.x, x_360.y, x_360.z), vec3<f32>(0.0f, 0.0f, 0.0f));
  let x_364 : vec4<f32> = u_xlat7;
  u_xlat7 = vec4<f32>(x_364.x, x_363.x, x_363.y, x_363.z);
  let x_366 : vec4<f32> = u_xlat7;
  u_xlat66 = dot(x_366, vec4<f32>(4.0f, 3.0f, 2.0f, 1.0f));
  let x_371 : f32 = u_xlat66;
  u_xlat66 = (-(x_371) + 4.0f);
  let x_375 : f32 = u_xlat66;
  u_xlatu66 = u32(x_375);
  let x_378 : u32 = u_xlatu66;
  u_xlati66 = (bitcast<i32>(x_378) << bitcast<u32>(2i));
  let x_381 : vec3<f32> = vs_INTERP0;
  let x_383 : i32 = u_xlati66;
  let x_386 : i32 = u_xlati66;
  let x_390 : vec4<f32> = x_255.x_MainLightWorldToShadow[((x_383 + 1i) / 4i)][((x_386 + 1i) % 4i)];
  let x_392 : vec3<f32> = (vec3<f32>(x_381.y, x_381.y, x_381.y) * vec3<f32>(x_390.x, x_390.y, x_390.z));
  let x_393 : vec4<f32> = u_xlat6;
  u_xlat6 = vec4<f32>(x_392.x, x_392.y, x_392.z, x_393.w);
  let x_395 : i32 = u_xlati66;
  let x_397 : i32 = u_xlati66;
  let x_400 : vec4<f32> = x_255.x_MainLightWorldToShadow[(x_395 / 4i)][(x_397 % 4i)];
  let x_402 : vec3<f32> = vs_INTERP0;
  let x_405 : vec4<f32> = u_xlat6;
  let x_407 : vec3<f32> = ((vec3<f32>(x_400.x, x_400.y, x_400.z) * vec3<f32>(x_402.x, x_402.x, x_402.x)) + vec3<f32>(x_405.x, x_405.y, x_405.z));
  let x_408 : vec4<f32> = u_xlat6;
  u_xlat6 = vec4<f32>(x_407.x, x_407.y, x_407.z, x_408.w);
  let x_410 : i32 = u_xlati66;
  let x_413 : i32 = u_xlati66;
  let x_417 : vec4<f32> = x_255.x_MainLightWorldToShadow[((x_410 + 2i) / 4i)][((x_413 + 2i) % 4i)];
  let x_419 : vec3<f32> = vs_INTERP0;
  let x_422 : vec4<f32> = u_xlat6;
  let x_424 : vec3<f32> = ((vec3<f32>(x_417.x, x_417.y, x_417.z) * vec3<f32>(x_419.z, x_419.z, x_419.z)) + vec3<f32>(x_422.x, x_422.y, x_422.z));
  let x_425 : vec4<f32> = u_xlat6;
  u_xlat6 = vec4<f32>(x_424.x, x_424.y, x_424.z, x_425.w);
  let x_427 : vec4<f32> = u_xlat6;
  let x_429 : i32 = u_xlati66;
  let x_432 : i32 = u_xlati66;
  let x_436 : vec4<f32> = x_255.x_MainLightWorldToShadow[((x_429 + 3i) / 4i)][((x_432 + 3i) % 4i)];
  let x_438 : vec3<f32> = (vec3<f32>(x_427.x, x_427.y, x_427.z) + vec3<f32>(x_436.x, x_436.y, x_436.z));
  let x_439 : vec4<f32> = u_xlat6;
  u_xlat6 = vec4<f32>(x_438.x, x_438.y, x_438.z, x_439.w);
  let x_443 : f32 = x_255.x_MainLightShadowParams.y;
  u_xlatb66 = (0.0f < x_443);
  let x_445 : bool = u_xlatb66;
  if (x_445) {
    let x_450 : f32 = x_255.x_MainLightShadowParams.y;
    u_xlatb67 = (x_450 == 1.0f);
    let x_452 : bool = u_xlatb67;
    if (x_452) {
      let x_455 : vec4<f32> = u_xlat6;
      let x_459 : vec4<f32> = x_255.x_MainLightShadowOffset0;
      u_xlat7 = (vec4<f32>(x_455.x, x_455.y, x_455.x, x_455.y) + x_459);
      let x_462 : vec4<f32> = u_xlat7;
      let x_463 : vec2<f32> = vec2<f32>(x_462.x, x_462.y);
      let x_465 : f32 = u_xlat6.z;
      txVec0 = vec3<f32>(x_463.x, x_463.y, x_465);
      let x_477 : vec3<f32> = txVec0;
      let x_479 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_477.xy, x_477.z);
      u_xlat8.x = x_479;
      let x_482 : vec4<f32> = u_xlat7;
      let x_483 : vec2<f32> = vec2<f32>(x_482.z, x_482.w);
      let x_485 : f32 = u_xlat6.z;
      txVec1 = vec3<f32>(x_483.x, x_483.y, x_485);
      let x_492 : vec3<f32> = txVec1;
      let x_494 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_492.xy, x_492.z);
      u_xlat8.y = x_494;
      let x_496 : vec4<f32> = u_xlat6;
      let x_500 : vec4<f32> = x_255.x_MainLightShadowOffset1;
      u_xlat7 = (vec4<f32>(x_496.x, x_496.y, x_496.x, x_496.y) + x_500);
      let x_503 : vec4<f32> = u_xlat7;
      let x_504 : vec2<f32> = vec2<f32>(x_503.x, x_503.y);
      let x_506 : f32 = u_xlat6.z;
      txVec2 = vec3<f32>(x_504.x, x_504.y, x_506);
      let x_513 : vec3<f32> = txVec2;
      let x_515 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_513.xy, x_513.z);
      u_xlat8.z = x_515;
      let x_518 : vec4<f32> = u_xlat7;
      let x_519 : vec2<f32> = vec2<f32>(x_518.z, x_518.w);
      let x_521 : f32 = u_xlat6.z;
      txVec3 = vec3<f32>(x_519.x, x_519.y, x_521);
      let x_528 : vec3<f32> = txVec3;
      let x_530 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_528.xy, x_528.z);
      u_xlat8.w = x_530;
      let x_532 : vec4<f32> = u_xlat8;
      u_xlat67 = dot(x_532, vec4<f32>(0.25f, 0.25f, 0.25f, 0.25f));
    } else {
      let x_539 : f32 = x_255.x_MainLightShadowParams.y;
      u_xlatb68 = (x_539 == 2.0f);
      let x_541 : bool = u_xlatb68;
      if (x_541) {
        let x_544 : vec4<f32> = u_xlat6;
        let x_547 : vec4<f32> = x_255.x_MainLightShadowmapSize;
        let x_552 : vec2<f32> = ((vec2<f32>(x_544.x, x_544.y) * vec2<f32>(x_547.z, x_547.w)) + vec2<f32>(0.5f, 0.5f));
        let x_553 : vec4<f32> = u_xlat7;
        u_xlat7 = vec4<f32>(x_552.x, x_552.y, x_553.z, x_553.w);
        let x_555 : vec4<f32> = u_xlat7;
        let x_557 : vec2<f32> = floor(vec2<f32>(x_555.x, x_555.y));
        let x_558 : vec4<f32> = u_xlat7;
        u_xlat7 = vec4<f32>(x_557.x, x_557.y, x_558.z, x_558.w);
        let x_562 : vec4<f32> = u_xlat6;
        let x_565 : vec4<f32> = x_255.x_MainLightShadowmapSize;
        let x_568 : vec4<f32> = u_xlat7;
        u_xlat51 = ((vec2<f32>(x_562.x, x_562.y) * vec2<f32>(x_565.z, x_565.w)) + -(vec2<f32>(x_568.x, x_568.y)));
        let x_572 : vec2<f32> = u_xlat51;
        u_xlat8 = (vec4<f32>(x_572.x, x_572.x, x_572.y, x_572.y) + vec4<f32>(0.5f, 1.0f, 0.5f, 1.0f));
        let x_576 : vec4<f32> = u_xlat8;
        let x_578 : vec4<f32> = u_xlat8;
        u_xlat9 = (vec4<f32>(x_576.x, x_576.x, x_576.z, x_576.z) * vec4<f32>(x_578.x, x_578.x, x_578.z, x_578.z));
        let x_581 : vec4<f32> = u_xlat9;
        let x_585 : vec2<f32> = (vec2<f32>(x_581.y, x_581.w) * vec2<f32>(0.079999998f, 0.079999998f));
        let x_586 : vec4<f32> = u_xlat8;
        u_xlat8 = vec4<f32>(x_585.x, x_586.y, x_585.y, x_586.w);
        let x_588 : vec4<f32> = u_xlat9;
        let x_591 : vec2<f32> = u_xlat51;
        let x_593 : vec2<f32> = ((vec2<f32>(x_588.x, x_588.z) * vec2<f32>(0.5f, 0.5f)) + -(x_591));
        let x_594 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_593.x, x_593.y, x_594.z, x_594.w);
        let x_597 : vec2<f32> = u_xlat51;
        u_xlat53 = (-(x_597) + vec2<f32>(1.0f, 1.0f));
        let x_602 : vec2<f32> = u_xlat51;
        let x_604 : vec2<f32> = min(x_602, vec2<f32>(0.0f, 0.0f));
        let x_605 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_604.x, x_604.y, x_605.z, x_605.w);
        let x_607 : vec4<f32> = u_xlat10;
        let x_610 : vec4<f32> = u_xlat10;
        let x_613 : vec2<f32> = u_xlat53;
        let x_614 : vec2<f32> = ((-(vec2<f32>(x_607.x, x_607.y)) * vec2<f32>(x_610.x, x_610.y)) + x_613);
        let x_615 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_614.x, x_614.y, x_615.z, x_615.w);
        let x_617 : vec2<f32> = u_xlat51;
        u_xlat51 = max(x_617, vec2<f32>(0.0f, 0.0f));
        let x_619 : vec2<f32> = u_xlat51;
        let x_621 : vec2<f32> = u_xlat51;
        let x_623 : vec4<f32> = u_xlat8;
        u_xlat51 = ((-(x_619) * x_621) + vec2<f32>(x_623.y, x_623.w));
        let x_626 : vec4<f32> = u_xlat10;
        let x_628 : vec2<f32> = (vec2<f32>(x_626.x, x_626.y) + vec2<f32>(1.0f, 1.0f));
        let x_629 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_628.x, x_628.y, x_629.z, x_629.w);
        let x_631 : vec2<f32> = u_xlat51;
        u_xlat51 = (x_631 + vec2<f32>(1.0f, 1.0f));
        let x_634 : vec4<f32> = u_xlat9;
        let x_638 : vec2<f32> = (vec2<f32>(x_634.x, x_634.y) * vec2<f32>(0.159999996f, 0.159999996f));
        let x_639 : vec4<f32> = u_xlat11;
        u_xlat11 = vec4<f32>(x_638.x, x_638.y, x_639.z, x_639.w);
        let x_641 : vec2<f32> = u_xlat53;
        let x_642 : vec2<f32> = (x_641 * vec2<f32>(0.159999996f, 0.159999996f));
        let x_643 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_642.x, x_642.y, x_643.z, x_643.w);
        let x_645 : vec4<f32> = u_xlat10;
        let x_647 : vec2<f32> = (vec2<f32>(x_645.x, x_645.y) * vec2<f32>(0.159999996f, 0.159999996f));
        let x_648 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_647.x, x_647.y, x_648.z, x_648.w);
        let x_651 : vec2<f32> = u_xlat51;
        let x_652 : vec2<f32> = (x_651 * vec2<f32>(0.159999996f, 0.159999996f));
        let x_653 : vec4<f32> = u_xlat12;
        u_xlat12 = vec4<f32>(x_652.x, x_652.y, x_653.z, x_653.w);
        let x_655 : vec4<f32> = u_xlat8;
        u_xlat51 = (vec2<f32>(x_655.y, x_655.w) * vec2<f32>(0.159999996f, 0.159999996f));
        let x_659 : f32 = u_xlat10.x;
        u_xlat11.z = x_659;
        let x_662 : f32 = u_xlat51.x;
        u_xlat11.w = x_662;
        let x_665 : f32 = u_xlat12.x;
        u_xlat9.z = x_665;
        let x_668 : f32 = u_xlat8.x;
        u_xlat9.w = x_668;
        let x_671 : vec4<f32> = u_xlat9;
        let x_673 : vec4<f32> = u_xlat11;
        u_xlat13 = (vec4<f32>(x_671.z, x_671.w, x_671.x, x_671.z) + vec4<f32>(x_673.z, x_673.w, x_673.x, x_673.z));
        let x_677 : f32 = u_xlat11.y;
        u_xlat10.z = x_677;
        let x_680 : f32 = u_xlat51.y;
        u_xlat10.w = x_680;
        let x_683 : f32 = u_xlat9.y;
        u_xlat12.z = x_683;
        let x_686 : f32 = u_xlat8.z;
        u_xlat12.w = x_686;
        let x_688 : vec4<f32> = u_xlat10;
        let x_690 : vec4<f32> = u_xlat12;
        let x_692 : vec3<f32> = (vec3<f32>(x_688.z, x_688.y, x_688.w) + vec3<f32>(x_690.z, x_690.y, x_690.w));
        let x_693 : vec4<f32> = u_xlat8;
        u_xlat8 = vec4<f32>(x_692.x, x_692.y, x_692.z, x_693.w);
        let x_695 : vec4<f32> = u_xlat9;
        let x_697 : vec4<f32> = u_xlat13;
        let x_699 : vec3<f32> = (vec3<f32>(x_695.x, x_695.z, x_695.w) / vec3<f32>(x_697.z, x_697.w, x_697.y));
        let x_700 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_699.x, x_699.y, x_699.z, x_700.w);
        let x_702 : vec4<f32> = u_xlat9;
        let x_708 : vec3<f32> = (vec3<f32>(x_702.x, x_702.y, x_702.z) + vec3<f32>(-2.5f, -0.5f, 1.5f));
        let x_709 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_708.x, x_708.y, x_708.z, x_709.w);
        let x_711 : vec4<f32> = u_xlat12;
        let x_713 : vec4<f32> = u_xlat8;
        let x_715 : vec3<f32> = (vec3<f32>(x_711.z, x_711.y, x_711.w) / vec3<f32>(x_713.x, x_713.y, x_713.z));
        let x_716 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_715.x, x_715.y, x_715.z, x_716.w);
        let x_718 : vec4<f32> = u_xlat10;
        let x_720 : vec3<f32> = (vec3<f32>(x_718.x, x_718.y, x_718.z) + vec3<f32>(-2.5f, -0.5f, 1.5f));
        let x_721 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_720.x, x_720.y, x_720.z, x_721.w);
        let x_723 : vec4<f32> = u_xlat9;
        let x_726 : vec4<f32> = x_255.x_MainLightShadowmapSize;
        let x_728 : vec3<f32> = (vec3<f32>(x_723.y, x_723.x, x_723.z) * vec3<f32>(x_726.x, x_726.x, x_726.x));
        let x_729 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_728.x, x_728.y, x_728.z, x_729.w);
        let x_731 : vec4<f32> = u_xlat10;
        let x_734 : vec4<f32> = x_255.x_MainLightShadowmapSize;
        let x_736 : vec3<f32> = (vec3<f32>(x_731.x, x_731.y, x_731.z) * vec3<f32>(x_734.y, x_734.y, x_734.y));
        let x_737 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_736.x, x_736.y, x_736.z, x_737.w);
        let x_740 : f32 = u_xlat10.x;
        u_xlat9.w = x_740;
        let x_742 : vec4<f32> = u_xlat7;
        let x_745 : vec4<f32> = x_255.x_MainLightShadowmapSize;
        let x_748 : vec4<f32> = u_xlat9;
        u_xlat11 = ((vec4<f32>(x_742.x, x_742.y, x_742.x, x_742.y) * vec4<f32>(x_745.x, x_745.y, x_745.x, x_745.y)) + vec4<f32>(x_748.y, x_748.w, x_748.x, x_748.w));
        let x_751 : vec4<f32> = u_xlat7;
        let x_754 : vec4<f32> = x_255.x_MainLightShadowmapSize;
        let x_757 : vec4<f32> = u_xlat9;
        u_xlat51 = ((vec2<f32>(x_751.x, x_751.y) * vec2<f32>(x_754.x, x_754.y)) + vec2<f32>(x_757.z, x_757.w));
        let x_761 : f32 = u_xlat9.y;
        u_xlat10.w = x_761;
        let x_763 : vec4<f32> = u_xlat10;
        let x_764 : vec2<f32> = vec2<f32>(x_763.y, x_763.z);
        let x_765 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_765.x, x_764.x, x_765.z, x_764.y);
        let x_767 : vec4<f32> = u_xlat7;
        let x_770 : vec4<f32> = x_255.x_MainLightShadowmapSize;
        let x_773 : vec4<f32> = u_xlat9;
        u_xlat12 = ((vec4<f32>(x_767.x, x_767.y, x_767.x, x_767.y) * vec4<f32>(x_770.x, x_770.y, x_770.x, x_770.y)) + vec4<f32>(x_773.x, x_773.y, x_773.z, x_773.y));
        let x_776 : vec4<f32> = u_xlat7;
        let x_779 : vec4<f32> = x_255.x_MainLightShadowmapSize;
        let x_782 : vec4<f32> = u_xlat10;
        u_xlat10 = ((vec4<f32>(x_776.x, x_776.y, x_776.x, x_776.y) * vec4<f32>(x_779.x, x_779.y, x_779.x, x_779.y)) + vec4<f32>(x_782.w, x_782.y, x_782.w, x_782.z));
        let x_785 : vec4<f32> = u_xlat7;
        let x_788 : vec4<f32> = x_255.x_MainLightShadowmapSize;
        let x_791 : vec4<f32> = u_xlat9;
        u_xlat9 = ((vec4<f32>(x_785.x, x_785.y, x_785.x, x_785.y) * vec4<f32>(x_788.x, x_788.y, x_788.x, x_788.y)) + vec4<f32>(x_791.x, x_791.w, x_791.z, x_791.w));
        let x_795 : vec4<f32> = u_xlat8;
        let x_797 : vec4<f32> = u_xlat13;
        u_xlat14 = (vec4<f32>(x_795.x, x_795.x, x_795.x, x_795.y) * vec4<f32>(x_797.z, x_797.w, x_797.y, x_797.z));
        let x_801 : vec4<f32> = u_xlat8;
        let x_803 : vec4<f32> = u_xlat13;
        u_xlat15 = (vec4<f32>(x_801.y, x_801.y, x_801.z, x_801.z) * x_803);
        let x_807 : f32 = u_xlat8.z;
        let x_809 : f32 = u_xlat13.y;
        u_xlat68 = (x_807 * x_809);
        let x_812 : vec4<f32> = u_xlat11;
        let x_813 : vec2<f32> = vec2<f32>(x_812.x, x_812.y);
        let x_815 : f32 = u_xlat6.z;
        txVec4 = vec3<f32>(x_813.x, x_813.y, x_815);
        let x_823 : vec3<f32> = txVec4;
        let x_825 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_823.xy, x_823.z);
        u_xlat70 = x_825;
        let x_827 : vec4<f32> = u_xlat11;
        let x_828 : vec2<f32> = vec2<f32>(x_827.z, x_827.w);
        let x_830 : f32 = u_xlat6.z;
        txVec5 = vec3<f32>(x_828.x, x_828.y, x_830);
        let x_838 : vec3<f32> = txVec5;
        let x_840 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_838.xy, x_838.z);
        u_xlat72 = x_840;
        let x_841 : f32 = u_xlat72;
        let x_843 : f32 = u_xlat14.y;
        u_xlat72 = (x_841 * x_843);
        let x_846 : f32 = u_xlat14.x;
        let x_847 : f32 = u_xlat70;
        let x_849 : f32 = u_xlat72;
        u_xlat70 = ((x_846 * x_847) + x_849);
        let x_852 : vec2<f32> = u_xlat51;
        let x_854 : f32 = u_xlat6.z;
        txVec6 = vec3<f32>(x_852.x, x_852.y, x_854);
        let x_861 : vec3<f32> = txVec6;
        let x_863 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_861.xy, x_861.z);
        u_xlat72 = x_863;
        let x_865 : f32 = u_xlat14.z;
        let x_866 : f32 = u_xlat72;
        let x_868 : f32 = u_xlat70;
        u_xlat70 = ((x_865 * x_866) + x_868);
        let x_871 : vec4<f32> = u_xlat10;
        let x_872 : vec2<f32> = vec2<f32>(x_871.x, x_871.y);
        let x_874 : f32 = u_xlat6.z;
        txVec7 = vec3<f32>(x_872.x, x_872.y, x_874);
        let x_881 : vec3<f32> = txVec7;
        let x_883 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_881.xy, x_881.z);
        u_xlat72 = x_883;
        let x_885 : f32 = u_xlat14.w;
        let x_886 : f32 = u_xlat72;
        let x_888 : f32 = u_xlat70;
        u_xlat70 = ((x_885 * x_886) + x_888);
        let x_891 : vec4<f32> = u_xlat12;
        let x_892 : vec2<f32> = vec2<f32>(x_891.x, x_891.y);
        let x_894 : f32 = u_xlat6.z;
        txVec8 = vec3<f32>(x_892.x, x_892.y, x_894);
        let x_901 : vec3<f32> = txVec8;
        let x_903 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_901.xy, x_901.z);
        u_xlat72 = x_903;
        let x_905 : f32 = u_xlat15.x;
        let x_906 : f32 = u_xlat72;
        let x_908 : f32 = u_xlat70;
        u_xlat70 = ((x_905 * x_906) + x_908);
        let x_911 : vec4<f32> = u_xlat12;
        let x_912 : vec2<f32> = vec2<f32>(x_911.z, x_911.w);
        let x_914 : f32 = u_xlat6.z;
        txVec9 = vec3<f32>(x_912.x, x_912.y, x_914);
        let x_921 : vec3<f32> = txVec9;
        let x_923 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_921.xy, x_921.z);
        u_xlat72 = x_923;
        let x_925 : f32 = u_xlat15.y;
        let x_926 : f32 = u_xlat72;
        let x_928 : f32 = u_xlat70;
        u_xlat70 = ((x_925 * x_926) + x_928);
        let x_931 : vec4<f32> = u_xlat10;
        let x_932 : vec2<f32> = vec2<f32>(x_931.z, x_931.w);
        let x_934 : f32 = u_xlat6.z;
        txVec10 = vec3<f32>(x_932.x, x_932.y, x_934);
        let x_941 : vec3<f32> = txVec10;
        let x_943 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_941.xy, x_941.z);
        u_xlat72 = x_943;
        let x_945 : f32 = u_xlat15.z;
        let x_946 : f32 = u_xlat72;
        let x_948 : f32 = u_xlat70;
        u_xlat70 = ((x_945 * x_946) + x_948);
        let x_951 : vec4<f32> = u_xlat9;
        let x_952 : vec2<f32> = vec2<f32>(x_951.x, x_951.y);
        let x_954 : f32 = u_xlat6.z;
        txVec11 = vec3<f32>(x_952.x, x_952.y, x_954);
        let x_961 : vec3<f32> = txVec11;
        let x_963 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_961.xy, x_961.z);
        u_xlat72 = x_963;
        let x_965 : f32 = u_xlat15.w;
        let x_966 : f32 = u_xlat72;
        let x_968 : f32 = u_xlat70;
        u_xlat70 = ((x_965 * x_966) + x_968);
        let x_971 : vec4<f32> = u_xlat9;
        let x_972 : vec2<f32> = vec2<f32>(x_971.z, x_971.w);
        let x_974 : f32 = u_xlat6.z;
        txVec12 = vec3<f32>(x_972.x, x_972.y, x_974);
        let x_981 : vec3<f32> = txVec12;
        let x_983 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_981.xy, x_981.z);
        u_xlat72 = x_983;
        let x_984 : f32 = u_xlat68;
        let x_985 : f32 = u_xlat72;
        let x_987 : f32 = u_xlat70;
        u_xlat67 = ((x_984 * x_985) + x_987);
      } else {
        let x_990 : vec4<f32> = u_xlat6;
        let x_993 : vec4<f32> = x_255.x_MainLightShadowmapSize;
        let x_996 : vec2<f32> = ((vec2<f32>(x_990.x, x_990.y) * vec2<f32>(x_993.z, x_993.w)) + vec2<f32>(0.5f, 0.5f));
        let x_997 : vec4<f32> = u_xlat7;
        u_xlat7 = vec4<f32>(x_996.x, x_996.y, x_997.z, x_997.w);
        let x_999 : vec4<f32> = u_xlat7;
        let x_1001 : vec2<f32> = floor(vec2<f32>(x_999.x, x_999.y));
        let x_1002 : vec4<f32> = u_xlat7;
        u_xlat7 = vec4<f32>(x_1001.x, x_1001.y, x_1002.z, x_1002.w);
        let x_1004 : vec4<f32> = u_xlat6;
        let x_1007 : vec4<f32> = x_255.x_MainLightShadowmapSize;
        let x_1010 : vec4<f32> = u_xlat7;
        u_xlat51 = ((vec2<f32>(x_1004.x, x_1004.y) * vec2<f32>(x_1007.z, x_1007.w)) + -(vec2<f32>(x_1010.x, x_1010.y)));
        let x_1014 : vec2<f32> = u_xlat51;
        u_xlat8 = (vec4<f32>(x_1014.x, x_1014.x, x_1014.y, x_1014.y) + vec4<f32>(0.5f, 1.0f, 0.5f, 1.0f));
        let x_1017 : vec4<f32> = u_xlat8;
        let x_1019 : vec4<f32> = u_xlat8;
        u_xlat9 = (vec4<f32>(x_1017.x, x_1017.x, x_1017.z, x_1017.z) * vec4<f32>(x_1019.x, x_1019.x, x_1019.z, x_1019.z));
        let x_1022 : vec4<f32> = u_xlat9;
        let x_1026 : vec2<f32> = (vec2<f32>(x_1022.y, x_1022.w) * vec2<f32>(0.040816002f, 0.040816002f));
        let x_1027 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_1027.x, x_1026.x, x_1027.z, x_1026.y);
        let x_1029 : vec4<f32> = u_xlat9;
        let x_1032 : vec2<f32> = u_xlat51;
        let x_1034 : vec2<f32> = ((vec2<f32>(x_1029.x, x_1029.z) * vec2<f32>(0.5f, 0.5f)) + -(x_1032));
        let x_1035 : vec4<f32> = u_xlat8;
        u_xlat8 = vec4<f32>(x_1034.x, x_1035.y, x_1034.y, x_1035.w);
        let x_1037 : vec2<f32> = u_xlat51;
        let x_1039 : vec2<f32> = (-(x_1037) + vec2<f32>(1.0f, 1.0f));
        let x_1040 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_1039.x, x_1039.y, x_1040.z, x_1040.w);
        let x_1042 : vec2<f32> = u_xlat51;
        u_xlat53 = min(x_1042, vec2<f32>(0.0f, 0.0f));
        let x_1044 : vec2<f32> = u_xlat53;
        let x_1046 : vec2<f32> = u_xlat53;
        let x_1048 : vec4<f32> = u_xlat9;
        let x_1050 : vec2<f32> = ((-(x_1044) * x_1046) + vec2<f32>(x_1048.x, x_1048.y));
        let x_1051 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_1050.x, x_1050.y, x_1051.z, x_1051.w);
        let x_1053 : vec2<f32> = u_xlat51;
        u_xlat53 = max(x_1053, vec2<f32>(0.0f, 0.0f));
        let x_1056 : vec2<f32> = u_xlat53;
        let x_1058 : vec2<f32> = u_xlat53;
        let x_1060 : vec4<f32> = u_xlat8;
        let x_1062 : vec2<f32> = ((-(x_1056) * x_1058) + vec2<f32>(x_1060.y, x_1060.w));
        let x_1063 : vec3<f32> = u_xlat30;
        u_xlat30 = vec3<f32>(x_1062.x, x_1063.y, x_1062.y);
        let x_1065 : vec4<f32> = u_xlat9;
        let x_1068 : vec2<f32> = (vec2<f32>(x_1065.x, x_1065.y) + vec2<f32>(2.0f, 2.0f));
        let x_1069 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_1068.x, x_1068.y, x_1069.z, x_1069.w);
        let x_1071 : vec3<f32> = u_xlat30;
        let x_1073 : vec2<f32> = (vec2<f32>(x_1071.x, x_1071.z) + vec2<f32>(2.0f, 2.0f));
        let x_1074 : vec4<f32> = u_xlat8;
        u_xlat8 = vec4<f32>(x_1074.x, x_1073.x, x_1074.z, x_1073.y);
        let x_1077 : f32 = u_xlat8.y;
        u_xlat11.z = (x_1077 * 0.081632003f);
        let x_1081 : vec4<f32> = u_xlat8;
        let x_1084 : vec3<f32> = (vec3<f32>(x_1081.z, x_1081.x, x_1081.w) * vec3<f32>(0.081632003f, 0.081632003f, 0.081632003f));
        let x_1085 : vec4<f32> = u_xlat12;
        u_xlat12 = vec4<f32>(x_1084.x, x_1084.y, x_1084.z, x_1085.w);
        let x_1087 : vec4<f32> = u_xlat9;
        let x_1090 : vec2<f32> = (vec2<f32>(x_1087.x, x_1087.y) * vec2<f32>(0.081632003f, 0.081632003f));
        let x_1091 : vec4<f32> = u_xlat8;
        u_xlat8 = vec4<f32>(x_1090.x, x_1090.y, x_1091.z, x_1091.w);
        let x_1094 : f32 = u_xlat12.y;
        u_xlat11.x = x_1094;
        let x_1096 : vec2<f32> = u_xlat51;
        let x_1103 : vec2<f32> = ((vec2<f32>(x_1096.x, x_1096.x) * vec2<f32>(-0.081632003f, 0.081632003f)) + vec2<f32>(0.163264006f, 0.081632003f));
        let x_1104 : vec4<f32> = u_xlat11;
        u_xlat11 = vec4<f32>(x_1104.x, x_1103.x, x_1104.z, x_1103.y);
        let x_1106 : vec2<f32> = u_xlat51;
        let x_1110 : vec2<f32> = ((vec2<f32>(x_1106.x, x_1106.x) * vec2<f32>(-0.081632003f, 0.081632003f)) + vec2<f32>(0.081632003f, 0.163264006f));
        let x_1111 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_1110.x, x_1111.y, x_1110.y, x_1111.w);
        let x_1114 : f32 = u_xlat8.x;
        u_xlat9.y = x_1114;
        let x_1117 : f32 = u_xlat10.y;
        u_xlat9.w = x_1117;
        let x_1119 : vec4<f32> = u_xlat9;
        let x_1120 : vec4<f32> = u_xlat11;
        u_xlat11 = (x_1119 + x_1120);
        let x_1122 : vec2<f32> = u_xlat51;
        let x_1125 : vec2<f32> = ((vec2<f32>(x_1122.y, x_1122.y) * vec2<f32>(-0.081632003f, 0.081632003f)) + vec2<f32>(0.163264006f, 0.081632003f));
        let x_1126 : vec4<f32> = u_xlat12;
        u_xlat12 = vec4<f32>(x_1126.x, x_1125.x, x_1126.z, x_1125.y);
        let x_1128 : vec2<f32> = u_xlat51;
        let x_1131 : vec2<f32> = ((vec2<f32>(x_1128.y, x_1128.y) * vec2<f32>(-0.081632003f, 0.081632003f)) + vec2<f32>(0.081632003f, 0.163264006f));
        let x_1132 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_1131.x, x_1132.y, x_1131.y, x_1132.w);
        let x_1135 : f32 = u_xlat8.y;
        u_xlat10.y = x_1135;
        let x_1137 : vec4<f32> = u_xlat10;
        let x_1138 : vec4<f32> = u_xlat12;
        u_xlat8 = (x_1137 + x_1138);
        let x_1140 : vec4<f32> = u_xlat9;
        let x_1141 : vec4<f32> = u_xlat11;
        u_xlat9 = (x_1140 / x_1141);
        let x_1143 : vec4<f32> = u_xlat9;
        u_xlat9 = (x_1143 + vec4<f32>(-3.5f, -1.5f, 0.5f, 2.5f));
        let x_1149 : vec4<f32> = u_xlat10;
        let x_1150 : vec4<f32> = u_xlat8;
        u_xlat10 = (x_1149 / x_1150);
        let x_1152 : vec4<f32> = u_xlat10;
        u_xlat10 = (x_1152 + vec4<f32>(-3.5f, -1.5f, 0.5f, 2.5f));
        let x_1154 : vec4<f32> = u_xlat9;
        let x_1157 : vec4<f32> = x_255.x_MainLightShadowmapSize;
        u_xlat9 = (vec4<f32>(x_1154.w, x_1154.x, x_1154.y, x_1154.z) * vec4<f32>(x_1157.x, x_1157.x, x_1157.x, x_1157.x));
        let x_1160 : vec4<f32> = u_xlat10;
        let x_1163 : vec4<f32> = x_255.x_MainLightShadowmapSize;
        u_xlat10 = (vec4<f32>(x_1160.x, x_1160.w, x_1160.y, x_1160.z) * vec4<f32>(x_1163.y, x_1163.y, x_1163.y, x_1163.y));
        let x_1166 : vec4<f32> = u_xlat9;
        let x_1167 : vec3<f32> = vec3<f32>(x_1166.y, x_1166.z, x_1166.w);
        let x_1168 : vec4<f32> = u_xlat12;
        u_xlat12 = vec4<f32>(x_1167.x, x_1168.y, x_1167.y, x_1167.z);
        let x_1171 : f32 = u_xlat10.x;
        u_xlat12.y = x_1171;
        let x_1173 : vec4<f32> = u_xlat7;
        let x_1176 : vec4<f32> = x_255.x_MainLightShadowmapSize;
        let x_1179 : vec4<f32> = u_xlat12;
        u_xlat13 = ((vec4<f32>(x_1173.x, x_1173.y, x_1173.x, x_1173.y) * vec4<f32>(x_1176.x, x_1176.y, x_1176.x, x_1176.y)) + vec4<f32>(x_1179.x, x_1179.y, x_1179.z, x_1179.y));
        let x_1182 : vec4<f32> = u_xlat7;
        let x_1185 : vec4<f32> = x_255.x_MainLightShadowmapSize;
        let x_1188 : vec4<f32> = u_xlat12;
        u_xlat51 = ((vec2<f32>(x_1182.x, x_1182.y) * vec2<f32>(x_1185.x, x_1185.y)) + vec2<f32>(x_1188.w, x_1188.y));
        let x_1192 : f32 = u_xlat12.y;
        u_xlat9.y = x_1192;
        let x_1195 : f32 = u_xlat10.z;
        u_xlat12.y = x_1195;
        let x_1197 : vec4<f32> = u_xlat7;
        let x_1200 : vec4<f32> = x_255.x_MainLightShadowmapSize;
        let x_1203 : vec4<f32> = u_xlat12;
        u_xlat14 = ((vec4<f32>(x_1197.x, x_1197.y, x_1197.x, x_1197.y) * vec4<f32>(x_1200.x, x_1200.y, x_1200.x, x_1200.y)) + vec4<f32>(x_1203.x, x_1203.y, x_1203.z, x_1203.y));
        let x_1206 : vec4<f32> = u_xlat7;
        let x_1209 : vec4<f32> = x_255.x_MainLightShadowmapSize;
        let x_1212 : vec4<f32> = u_xlat12;
        let x_1214 : vec2<f32> = ((vec2<f32>(x_1206.x, x_1206.y) * vec2<f32>(x_1209.x, x_1209.y)) + vec2<f32>(x_1212.w, x_1212.y));
        let x_1215 : vec4<f32> = u_xlat15;
        u_xlat15 = vec4<f32>(x_1214.x, x_1214.y, x_1215.z, x_1215.w);
        let x_1218 : f32 = u_xlat12.y;
        u_xlat9.z = x_1218;
        let x_1221 : vec4<f32> = u_xlat7;
        let x_1224 : vec4<f32> = x_255.x_MainLightShadowmapSize;
        let x_1227 : vec4<f32> = u_xlat9;
        u_xlat16 = ((vec4<f32>(x_1221.x, x_1221.y, x_1221.x, x_1221.y) * vec4<f32>(x_1224.x, x_1224.y, x_1224.x, x_1224.y)) + vec4<f32>(x_1227.x, x_1227.y, x_1227.x, x_1227.z));
        let x_1231 : f32 = u_xlat10.w;
        u_xlat12.y = x_1231;
        let x_1234 : vec4<f32> = u_xlat7;
        let x_1237 : vec4<f32> = x_255.x_MainLightShadowmapSize;
        let x_1240 : vec4<f32> = u_xlat12;
        u_xlat17 = ((vec4<f32>(x_1234.x, x_1234.y, x_1234.x, x_1234.y) * vec4<f32>(x_1237.x, x_1237.y, x_1237.x, x_1237.y)) + vec4<f32>(x_1240.x, x_1240.y, x_1240.z, x_1240.y));
        let x_1244 : vec4<f32> = u_xlat7;
        let x_1247 : vec4<f32> = x_255.x_MainLightShadowmapSize;
        let x_1250 : vec4<f32> = u_xlat12;
        let x_1252 : vec2<f32> = ((vec2<f32>(x_1244.x, x_1244.y) * vec2<f32>(x_1247.x, x_1247.y)) + vec2<f32>(x_1250.w, x_1250.y));
        let x_1253 : vec3<f32> = u_xlat31;
        u_xlat31 = vec3<f32>(x_1252.x, x_1252.y, x_1253.z);
        let x_1256 : f32 = u_xlat12.y;
        u_xlat9.w = x_1256;
        let x_1259 : vec4<f32> = u_xlat7;
        let x_1262 : vec4<f32> = x_255.x_MainLightShadowmapSize;
        let x_1265 : vec4<f32> = u_xlat9;
        u_xlat59 = ((vec2<f32>(x_1259.x, x_1259.y) * vec2<f32>(x_1262.x, x_1262.y)) + vec2<f32>(x_1265.x, x_1265.w));
        let x_1268 : vec4<f32> = u_xlat12;
        let x_1269 : vec3<f32> = vec3<f32>(x_1268.x, x_1268.z, x_1268.w);
        let x_1270 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_1269.x, x_1270.y, x_1269.y, x_1269.z);
        let x_1272 : vec4<f32> = u_xlat7;
        let x_1275 : vec4<f32> = x_255.x_MainLightShadowmapSize;
        let x_1278 : vec4<f32> = u_xlat10;
        u_xlat12 = ((vec4<f32>(x_1272.x, x_1272.y, x_1272.x, x_1272.y) * vec4<f32>(x_1275.x, x_1275.y, x_1275.x, x_1275.y)) + vec4<f32>(x_1278.x, x_1278.y, x_1278.z, x_1278.y));
        let x_1282 : vec4<f32> = u_xlat7;
        let x_1285 : vec4<f32> = x_255.x_MainLightShadowmapSize;
        let x_1288 : vec4<f32> = u_xlat10;
        u_xlat54 = ((vec2<f32>(x_1282.x, x_1282.y) * vec2<f32>(x_1285.x, x_1285.y)) + vec2<f32>(x_1288.w, x_1288.y));
        let x_1292 : f32 = u_xlat9.x;
        u_xlat10.x = x_1292;
        let x_1294 : vec4<f32> = u_xlat7;
        let x_1297 : vec4<f32> = x_255.x_MainLightShadowmapSize;
        let x_1300 : vec4<f32> = u_xlat10;
        let x_1302 : vec2<f32> = ((vec2<f32>(x_1294.x, x_1294.y) * vec2<f32>(x_1297.x, x_1297.y)) + vec2<f32>(x_1300.x, x_1300.y));
        let x_1303 : vec4<f32> = u_xlat7;
        u_xlat7 = vec4<f32>(x_1302.x, x_1302.y, x_1303.z, x_1303.w);
        let x_1306 : vec4<f32> = u_xlat8;
        let x_1308 : vec4<f32> = u_xlat11;
        u_xlat18 = (vec4<f32>(x_1306.x, x_1306.x, x_1306.x, x_1306.x) * x_1308);
        let x_1311 : vec4<f32> = u_xlat8;
        let x_1313 : vec4<f32> = u_xlat11;
        u_xlat19 = (vec4<f32>(x_1311.y, x_1311.y, x_1311.y, x_1311.y) * x_1313);
        let x_1316 : vec4<f32> = u_xlat8;
        let x_1318 : vec4<f32> = u_xlat11;
        u_xlat20 = (vec4<f32>(x_1316.z, x_1316.z, x_1316.z, x_1316.z) * x_1318);
        let x_1320 : vec4<f32> = u_xlat8;
        let x_1322 : vec4<f32> = u_xlat11;
        u_xlat8 = (vec4<f32>(x_1320.w, x_1320.w, x_1320.w, x_1320.w) * x_1322);
        let x_1325 : vec4<f32> = u_xlat13;
        let x_1326 : vec2<f32> = vec2<f32>(x_1325.x, x_1325.y);
        let x_1328 : f32 = u_xlat6.z;
        txVec13 = vec3<f32>(x_1326.x, x_1326.y, x_1328);
        let x_1335 : vec3<f32> = txVec13;
        let x_1337 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1335.xy, x_1335.z);
        u_xlat68 = x_1337;
        let x_1339 : vec4<f32> = u_xlat13;
        let x_1340 : vec2<f32> = vec2<f32>(x_1339.z, x_1339.w);
        let x_1342 : f32 = u_xlat6.z;
        txVec14 = vec3<f32>(x_1340.x, x_1340.y, x_1342);
        let x_1349 : vec3<f32> = txVec14;
        let x_1351 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1349.xy, x_1349.z);
        u_xlat70 = x_1351;
        let x_1352 : f32 = u_xlat70;
        let x_1354 : f32 = u_xlat18.y;
        u_xlat70 = (x_1352 * x_1354);
        let x_1357 : f32 = u_xlat18.x;
        let x_1358 : f32 = u_xlat68;
        let x_1360 : f32 = u_xlat70;
        u_xlat68 = ((x_1357 * x_1358) + x_1360);
        let x_1363 : vec2<f32> = u_xlat51;
        let x_1365 : f32 = u_xlat6.z;
        txVec15 = vec3<f32>(x_1363.x, x_1363.y, x_1365);
        let x_1372 : vec3<f32> = txVec15;
        let x_1374 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1372.xy, x_1372.z);
        u_xlat70 = x_1374;
        let x_1376 : f32 = u_xlat18.z;
        let x_1377 : f32 = u_xlat70;
        let x_1379 : f32 = u_xlat68;
        u_xlat68 = ((x_1376 * x_1377) + x_1379);
        let x_1382 : vec4<f32> = u_xlat16;
        let x_1383 : vec2<f32> = vec2<f32>(x_1382.x, x_1382.y);
        let x_1385 : f32 = u_xlat6.z;
        txVec16 = vec3<f32>(x_1383.x, x_1383.y, x_1385);
        let x_1392 : vec3<f32> = txVec16;
        let x_1394 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1392.xy, x_1392.z);
        u_xlat70 = x_1394;
        let x_1396 : f32 = u_xlat18.w;
        let x_1397 : f32 = u_xlat70;
        let x_1399 : f32 = u_xlat68;
        u_xlat68 = ((x_1396 * x_1397) + x_1399);
        let x_1402 : vec4<f32> = u_xlat14;
        let x_1403 : vec2<f32> = vec2<f32>(x_1402.x, x_1402.y);
        let x_1405 : f32 = u_xlat6.z;
        txVec17 = vec3<f32>(x_1403.x, x_1403.y, x_1405);
        let x_1412 : vec3<f32> = txVec17;
        let x_1414 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1412.xy, x_1412.z);
        u_xlat70 = x_1414;
        let x_1416 : f32 = u_xlat19.x;
        let x_1417 : f32 = u_xlat70;
        let x_1419 : f32 = u_xlat68;
        u_xlat68 = ((x_1416 * x_1417) + x_1419);
        let x_1422 : vec4<f32> = u_xlat14;
        let x_1423 : vec2<f32> = vec2<f32>(x_1422.z, x_1422.w);
        let x_1425 : f32 = u_xlat6.z;
        txVec18 = vec3<f32>(x_1423.x, x_1423.y, x_1425);
        let x_1432 : vec3<f32> = txVec18;
        let x_1434 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1432.xy, x_1432.z);
        u_xlat70 = x_1434;
        let x_1436 : f32 = u_xlat19.y;
        let x_1437 : f32 = u_xlat70;
        let x_1439 : f32 = u_xlat68;
        u_xlat68 = ((x_1436 * x_1437) + x_1439);
        let x_1442 : vec4<f32> = u_xlat15;
        let x_1443 : vec2<f32> = vec2<f32>(x_1442.x, x_1442.y);
        let x_1445 : f32 = u_xlat6.z;
        txVec19 = vec3<f32>(x_1443.x, x_1443.y, x_1445);
        let x_1452 : vec3<f32> = txVec19;
        let x_1454 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1452.xy, x_1452.z);
        u_xlat70 = x_1454;
        let x_1456 : f32 = u_xlat19.z;
        let x_1457 : f32 = u_xlat70;
        let x_1459 : f32 = u_xlat68;
        u_xlat68 = ((x_1456 * x_1457) + x_1459);
        let x_1462 : vec4<f32> = u_xlat16;
        let x_1463 : vec2<f32> = vec2<f32>(x_1462.z, x_1462.w);
        let x_1465 : f32 = u_xlat6.z;
        txVec20 = vec3<f32>(x_1463.x, x_1463.y, x_1465);
        let x_1472 : vec3<f32> = txVec20;
        let x_1474 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1472.xy, x_1472.z);
        u_xlat70 = x_1474;
        let x_1476 : f32 = u_xlat19.w;
        let x_1477 : f32 = u_xlat70;
        let x_1479 : f32 = u_xlat68;
        u_xlat68 = ((x_1476 * x_1477) + x_1479);
        let x_1482 : vec4<f32> = u_xlat17;
        let x_1483 : vec2<f32> = vec2<f32>(x_1482.x, x_1482.y);
        let x_1485 : f32 = u_xlat6.z;
        txVec21 = vec3<f32>(x_1483.x, x_1483.y, x_1485);
        let x_1492 : vec3<f32> = txVec21;
        let x_1494 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1492.xy, x_1492.z);
        u_xlat70 = x_1494;
        let x_1496 : f32 = u_xlat20.x;
        let x_1497 : f32 = u_xlat70;
        let x_1499 : f32 = u_xlat68;
        u_xlat68 = ((x_1496 * x_1497) + x_1499);
        let x_1502 : vec4<f32> = u_xlat17;
        let x_1503 : vec2<f32> = vec2<f32>(x_1502.z, x_1502.w);
        let x_1505 : f32 = u_xlat6.z;
        txVec22 = vec3<f32>(x_1503.x, x_1503.y, x_1505);
        let x_1512 : vec3<f32> = txVec22;
        let x_1514 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1512.xy, x_1512.z);
        u_xlat70 = x_1514;
        let x_1516 : f32 = u_xlat20.y;
        let x_1517 : f32 = u_xlat70;
        let x_1519 : f32 = u_xlat68;
        u_xlat68 = ((x_1516 * x_1517) + x_1519);
        let x_1522 : vec3<f32> = u_xlat31;
        let x_1523 : vec2<f32> = vec2<f32>(x_1522.x, x_1522.y);
        let x_1525 : f32 = u_xlat6.z;
        txVec23 = vec3<f32>(x_1523.x, x_1523.y, x_1525);
        let x_1532 : vec3<f32> = txVec23;
        let x_1534 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1532.xy, x_1532.z);
        u_xlat70 = x_1534;
        let x_1536 : f32 = u_xlat20.z;
        let x_1537 : f32 = u_xlat70;
        let x_1539 : f32 = u_xlat68;
        u_xlat68 = ((x_1536 * x_1537) + x_1539);
        let x_1542 : vec2<f32> = u_xlat59;
        let x_1544 : f32 = u_xlat6.z;
        txVec24 = vec3<f32>(x_1542.x, x_1542.y, x_1544);
        let x_1551 : vec3<f32> = txVec24;
        let x_1553 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1551.xy, x_1551.z);
        u_xlat70 = x_1553;
        let x_1555 : f32 = u_xlat20.w;
        let x_1556 : f32 = u_xlat70;
        let x_1558 : f32 = u_xlat68;
        u_xlat68 = ((x_1555 * x_1556) + x_1558);
        let x_1561 : vec4<f32> = u_xlat12;
        let x_1562 : vec2<f32> = vec2<f32>(x_1561.x, x_1561.y);
        let x_1564 : f32 = u_xlat6.z;
        txVec25 = vec3<f32>(x_1562.x, x_1562.y, x_1564);
        let x_1571 : vec3<f32> = txVec25;
        let x_1573 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1571.xy, x_1571.z);
        u_xlat70 = x_1573;
        let x_1575 : f32 = u_xlat8.x;
        let x_1576 : f32 = u_xlat70;
        let x_1578 : f32 = u_xlat68;
        u_xlat68 = ((x_1575 * x_1576) + x_1578);
        let x_1581 : vec4<f32> = u_xlat12;
        let x_1582 : vec2<f32> = vec2<f32>(x_1581.z, x_1581.w);
        let x_1584 : f32 = u_xlat6.z;
        txVec26 = vec3<f32>(x_1582.x, x_1582.y, x_1584);
        let x_1591 : vec3<f32> = txVec26;
        let x_1593 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1591.xy, x_1591.z);
        u_xlat70 = x_1593;
        let x_1595 : f32 = u_xlat8.y;
        let x_1596 : f32 = u_xlat70;
        let x_1598 : f32 = u_xlat68;
        u_xlat68 = ((x_1595 * x_1596) + x_1598);
        let x_1601 : vec2<f32> = u_xlat54;
        let x_1603 : f32 = u_xlat6.z;
        txVec27 = vec3<f32>(x_1601.x, x_1601.y, x_1603);
        let x_1610 : vec3<f32> = txVec27;
        let x_1612 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1610.xy, x_1610.z);
        u_xlat70 = x_1612;
        let x_1614 : f32 = u_xlat8.z;
        let x_1615 : f32 = u_xlat70;
        let x_1617 : f32 = u_xlat68;
        u_xlat68 = ((x_1614 * x_1615) + x_1617);
        let x_1620 : vec4<f32> = u_xlat7;
        let x_1621 : vec2<f32> = vec2<f32>(x_1620.x, x_1620.y);
        let x_1623 : f32 = u_xlat6.z;
        txVec28 = vec3<f32>(x_1621.x, x_1621.y, x_1623);
        let x_1630 : vec3<f32> = txVec28;
        let x_1632 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1630.xy, x_1630.z);
        u_xlat70 = x_1632;
        let x_1634 : f32 = u_xlat8.w;
        let x_1635 : f32 = u_xlat70;
        let x_1637 : f32 = u_xlat68;
        u_xlat67 = ((x_1634 * x_1635) + x_1637);
      }
    }
  } else {
    let x_1641 : vec4<f32> = u_xlat6;
    let x_1642 : vec2<f32> = vec2<f32>(x_1641.x, x_1641.y);
    let x_1644 : f32 = u_xlat6.z;
    txVec29 = vec3<f32>(x_1642.x, x_1642.y, x_1644);
    let x_1651 : vec3<f32> = txVec29;
    let x_1653 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1651.xy, x_1651.z);
    u_xlat67 = x_1653;
  }
  let x_1655 : f32 = x_255.x_MainLightShadowParams.x;
  u_xlat68 = (-(x_1655) + 1.0f);
  let x_1658 : f32 = u_xlat67;
  let x_1660 : f32 = x_255.x_MainLightShadowParams.x;
  let x_1662 : f32 = u_xlat68;
  u_xlat67 = ((x_1658 * x_1660) + x_1662);
  let x_1666 : f32 = u_xlat6.z;
  u_xlatb70 = (0.0f >= x_1666);
  let x_1670 : f32 = u_xlat6.z;
  u_xlatb72 = (x_1670 >= 1.0f);
  let x_1672 : bool = u_xlatb70;
  let x_1673 : bool = u_xlatb72;
  u_xlatb70 = (x_1672 | x_1673);
  let x_1675 : bool = u_xlatb70;
  let x_1676 : f32 = u_xlat67;
  u_xlat67 = select(x_1676, 1.0f, x_1675);
  let x_1678 : vec3<f32> = u_xlat0;
  let x_1680 : vec4<f32> = x_90.x_MainLightPosition;
  u_xlat0.x = dot(x_1678, -(vec3<f32>(x_1680.x, x_1680.y, x_1680.z)));
  let x_1686 : f32 = u_xlat0.x;
  u_xlat0.x = clamp(x_1686, 0.0f, 1.0f);
  let x_1689 : f32 = u_xlat67;
  let x_1692 : vec4<f32> = x_90.x_MainLightColor;
  let x_1694 : vec3<f32> = (vec3<f32>(x_1689, x_1689, x_1689) * vec3<f32>(x_1692.x, x_1692.y, x_1692.z));
  let x_1695 : vec4<f32> = u_xlat7;
  u_xlat7 = vec4<f32>(x_1694.x, x_1694.y, x_1694.z, x_1695.w);
  let x_1697 : vec3<f32> = u_xlat0;
  let x_1699 : vec4<f32> = u_xlat7;
  u_xlat0 = (vec3<f32>(x_1697.x, x_1697.x, x_1697.x) * vec3<f32>(x_1699.x, x_1699.y, x_1699.z));
  let x_1702 : vec3<f32> = u_xlat0;
  let x_1703 : vec4<f32> = u_xlat3;
  u_xlat0 = (x_1702 * vec3<f32>(x_1703.x, x_1703.y, x_1703.z));
  let x_1707 : f32 = x_145.unity_LODFade.x;
  u_xlatb67 = (x_1707 < 0.0f);
  let x_1710 : f32 = x_145.unity_LODFade.x;
  u_xlat3.x = (x_1710 + 1.0f);
  let x_1713 : bool = u_xlatb67;
  if (x_1713) {
    let x_1718 : f32 = u_xlat3.x;
    x_1714 = x_1718;
  } else {
    let x_1721 : f32 = x_145.unity_LODFade.x;
    x_1714 = x_1721;
  }
  let x_1722 : f32 = x_1714;
  u_xlat67 = x_1722;
  let x_1724 : f32 = u_xlat67;
  u_xlatb3 = (0.5f >= x_1724);
  let x_1726 : vec3<f32> = u_xlat2;
  let x_1730 : vec4<f32> = x_90.x_ScreenParams;
  u_xlat2 = (abs(x_1726) * vec3<f32>(x_1730.x, x_1730.y, x_1730.x));
  let x_1736 : vec3<f32> = u_xlat2;
  u_xlatu2 = vec3<u32>(x_1736);
  let x_1740 : u32 = u_xlatu2.z;
  u_xlatu46 = (x_1740 * 1025u);
  let x_1744 : u32 = u_xlatu46;
  u_xlatu25 = (x_1744 >> 6u);
  let x_1748 : u32 = u_xlatu46;
  let x_1749 : u32 = u_xlatu25;
  u_xlati46 = bitcast<i32>((x_1748 ^ x_1749));
  let x_1752 : i32 = u_xlati46;
  u_xlatu46 = (bitcast<u32>(x_1752) * 9u);
  let x_1756 : u32 = u_xlatu46;
  u_xlatu25 = (x_1756 >> 11u);
  let x_1759 : u32 = u_xlatu46;
  let x_1760 : u32 = u_xlatu25;
  u_xlati46 = bitcast<i32>((x_1759 ^ x_1760));
  let x_1763 : i32 = u_xlati46;
  u_xlati46 = (x_1763 * 32769i);
  let x_1767 : i32 = u_xlati46;
  let x_1770 : u32 = u_xlatu2.y;
  u_xlati24 = bitcast<i32>((bitcast<u32>(x_1767) ^ x_1770));
  let x_1774 : i32 = u_xlati24;
  u_xlatu24 = (bitcast<u32>(x_1774) * 1025u);
  let x_1777 : u32 = u_xlatu24;
  u_xlatu46 = (x_1777 >> 6u);
  let x_1779 : u32 = u_xlatu46;
  let x_1780 : u32 = u_xlatu24;
  u_xlati24 = bitcast<i32>((x_1779 ^ x_1780));
  let x_1783 : i32 = u_xlati24;
  u_xlatu24 = (bitcast<u32>(x_1783) * 9u);
  let x_1786 : u32 = u_xlatu24;
  u_xlatu46 = (x_1786 >> 11u);
  let x_1788 : u32 = u_xlatu46;
  let x_1789 : u32 = u_xlatu24;
  u_xlati24 = bitcast<i32>((x_1788 ^ x_1789));
  let x_1792 : i32 = u_xlati24;
  u_xlati24 = (x_1792 * 32769i);
  let x_1795 : i32 = u_xlati24;
  let x_1798 : u32 = u_xlatu2.x;
  u_xlati2 = bitcast<i32>((bitcast<u32>(x_1795) ^ x_1798));
  let x_1801 : i32 = u_xlati2;
  u_xlatu2.x = (bitcast<u32>(x_1801) * 1025u);
  let x_1806 : u32 = u_xlatu2.x;
  u_xlatu24 = (x_1806 >> 6u);
  let x_1808 : u32 = u_xlatu24;
  let x_1810 : u32 = u_xlatu2.x;
  u_xlati2 = bitcast<i32>((x_1808 ^ x_1810));
  let x_1813 : i32 = u_xlati2;
  u_xlatu2.x = (bitcast<u32>(x_1813) * 9u);
  let x_1818 : u32 = u_xlatu2.x;
  u_xlatu24 = (x_1818 >> 11u);
  let x_1820 : u32 = u_xlatu24;
  let x_1822 : u32 = u_xlatu2.x;
  u_xlati2 = bitcast<i32>((x_1820 ^ x_1822));
  let x_1825 : i32 = u_xlati2;
  u_xlati2 = (x_1825 * 32769i);
  param = 1065353216i;
  let x_1831 : i32 = u_xlati2;
  param_1 = x_1831;
  param_2 = 0i;
  param_3 = 23i;
  let x_1834 : i32 = int_bitfieldInsert_i1_i1_i1_i1_(&(param), &(param_1), &(param_2), &(param_3));
  u_xlat2.x = bitcast<f32>(x_1834);
  let x_1838 : f32 = u_xlat2.x;
  u_xlat2.x = (x_1838 + -1.0f);
  let x_1843 : f32 = u_xlat2.x;
  u_xlat24.x = (-(x_1843) + 1.0f);
  let x_1847 : bool = u_xlatb3;
  if (x_1847) {
    let x_1852 : f32 = u_xlat2.x;
    x_1848 = x_1852;
  } else {
    let x_1855 : f32 = u_xlat24.x;
    x_1848 = x_1855;
  }
  let x_1856 : f32 = x_1848;
  u_xlat2.x = x_1856;
  let x_1858 : f32 = u_xlat67;
  let x_1861 : f32 = u_xlat2.x;
  u_xlat67 = ((x_1858 * 2.0f) + -(x_1861));
  let x_1864 : f32 = u_xlat67;
  let x_1866 : f32 = u_xlat3.w;
  u_xlat2.x = (x_1864 * x_1866);
  let x_1873 : f32 = u_xlat2.x;
  u_xlatb24.x = (x_1873 >= 0.400000006f);
  let x_1878 : bool = u_xlatb24.x;
  if (x_1878) {
    let x_1883 : f32 = u_xlat2.x;
    x_1879 = x_1883;
  } else {
    x_1879 = 0.0f;
  }
  let x_1885 : f32 = x_1879;
  u_xlat24.x = x_1885;
  let x_1888 : f32 = u_xlat3.w;
  let x_1889 : f32 = u_xlat67;
  u_xlat67 = ((x_1888 * x_1889) + -0.400000006f);
  let x_1895 : f32 = u_xlat2.x;
  u_xlat46 = dpdxCoarse(x_1895);
  let x_1898 : f32 = u_xlat2.x;
  u_xlat2.x = dpdyCoarse(x_1898);
  let x_1902 : f32 = u_xlat2.x;
  let x_1904 : f32 = u_xlat46;
  u_xlat2.x = (abs(x_1902) + abs(x_1904));
  let x_1909 : f32 = u_xlat2.x;
  u_xlat2.x = max(x_1909, 0.0001f);
  let x_1913 : f32 = u_xlat67;
  let x_1915 : f32 = u_xlat2.x;
  u_xlat67 = (x_1913 / x_1915);
  let x_1917 : f32 = u_xlat67;
  u_xlat67 = (x_1917 + 0.5f);
  let x_1919 : f32 = u_xlat67;
  u_xlat67 = clamp(x_1919, 0.0f, 1.0f);
  let x_1923 : f32 = x_90.x_AlphaToMaskAvailable;
  u_xlatb2 = !((x_1923 == 0.0f));
  let x_1925 : bool = u_xlatb2;
  if (x_1925) {
    let x_1929 : f32 = u_xlat67;
    x_1926 = x_1929;
  } else {
    let x_1932 : f32 = u_xlat24.x;
    x_1926 = x_1932;
  }
  let x_1933 : f32 = x_1926;
  u_xlat67 = x_1933;
  let x_1934 : f32 = u_xlat67;
  u_xlat24.x = (x_1934 + -0.0001f);
  let x_1939 : f32 = u_xlat24.x;
  u_xlatb24.x = (x_1939 < 0.0f);
  let x_1943 : bool = u_xlatb24.x;
  if (((select(0i, 1i, x_1943) * -1i) != 0i)) {
    discard;
  }
  let x_1953 : f32 = vs_INTERP2.w;
  u_xlatb24.x = (0.0f < x_1953);
  let x_1957 : f32 = x_145.unity_WorldTransformParams.w;
  u_xlatb24.y = (x_1957 >= 0.0f);
  let x_1961 : bool = u_xlatb24.x;
  u_xlat24.x = select(-1.0f, 1.0f, x_1961);
  let x_1965 : bool = u_xlatb24.y;
  u_xlat24.y = select(-1.0f, 1.0f, x_1965);
  let x_1969 : f32 = u_xlat24.y;
  let x_1971 : f32 = u_xlat24.x;
  u_xlat24.x = (x_1969 * x_1971);
  let x_1974 : vec3<f32> = vs_INTERP1;
  let x_1976 : vec4<f32> = vs_INTERP2;
  let x_1978 : vec3<f32> = (vec3<f32>(x_1974.z, x_1974.x, x_1974.y) * vec3<f32>(x_1976.y, x_1976.z, x_1976.x));
  let x_1979 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_1978.x, x_1978.y, x_1978.z, x_1979.w);
  let x_1981 : vec3<f32> = vs_INTERP1;
  let x_1983 : vec4<f32> = vs_INTERP2;
  let x_1986 : vec4<f32> = u_xlat3;
  let x_1989 : vec3<f32> = ((vec3<f32>(x_1981.y, x_1981.z, x_1981.x) * vec3<f32>(x_1983.z, x_1983.x, x_1983.y)) + -(vec3<f32>(x_1986.x, x_1986.y, x_1986.z)));
  let x_1990 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_1989.x, x_1989.y, x_1989.z, x_1990.w);
  let x_1992 : vec2<f32> = u_xlat24;
  let x_1994 : vec4<f32> = u_xlat3;
  let x_1996 : vec3<f32> = (vec3<f32>(x_1992.x, x_1992.x, x_1992.x) * vec3<f32>(x_1994.x, x_1994.y, x_1994.z));
  let x_1997 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_1996.x, x_1996.y, x_1996.z, x_1997.w);
  let x_1999 : vec4<f32> = u_xlat3;
  let x_2001 : vec3<f32> = u_xlat27;
  let x_2003 : vec3<f32> = (vec3<f32>(x_1999.x, x_1999.y, x_1999.z) * vec3<f32>(x_2001.y, x_2001.y, x_2001.y));
  let x_2004 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_2003.x, x_2003.y, x_2003.z, x_2004.w);
  let x_2006 : vec3<f32> = u_xlat27;
  let x_2008 : vec4<f32> = vs_INTERP2;
  let x_2011 : vec4<f32> = u_xlat3;
  let x_2013 : vec3<f32> = ((vec3<f32>(x_2006.x, x_2006.x, x_2006.x) * vec3<f32>(x_2008.x, x_2008.y, x_2008.z)) + vec3<f32>(x_2011.x, x_2011.y, x_2011.z));
  let x_2014 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_2013.x, x_2013.y, x_2013.z, x_2014.w);
  let x_2016 : vec3<f32> = u_xlat27;
  let x_2018 : vec3<f32> = vs_INTERP1;
  let x_2020 : vec4<f32> = u_xlat3;
  let x_2022 : vec3<f32> = ((vec3<f32>(x_2016.z, x_2016.z, x_2016.z) * x_2018) + vec3<f32>(x_2020.x, x_2020.y, x_2020.z));
  let x_2023 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_2022.x, x_2022.y, x_2022.z, x_2023.w);
  let x_2025 : vec4<f32> = u_xlat3;
  let x_2027 : vec4<f32> = u_xlat3;
  u_xlat24.x = dot(vec3<f32>(x_2025.x, x_2025.y, x_2025.z), vec3<f32>(x_2027.x, x_2027.y, x_2027.z));
  let x_2032 : f32 = u_xlat24.x;
  u_xlat24.x = inverseSqrt(x_2032);
  let x_2035 : vec2<f32> = u_xlat24;
  let x_2037 : vec4<f32> = u_xlat3;
  let x_2039 : vec3<f32> = (vec3<f32>(x_2035.x, x_2035.x, x_2035.x) * vec3<f32>(x_2037.x, x_2037.y, x_2037.z));
  let x_2040 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_2039.x, x_2039.y, x_2039.z, x_2040.w);
  let x_2043 : f32 = vs_INTERP0.y;
  let x_2045 : f32 = x_90.unity_MatrixV[1i].z;
  u_xlat24.x = (x_2043 * x_2045);
  let x_2049 : f32 = x_90.unity_MatrixV[0i].z;
  let x_2051 : f32 = vs_INTERP0.x;
  let x_2054 : f32 = u_xlat24.x;
  u_xlat24.x = ((x_2049 * x_2051) + x_2054);
  let x_2058 : f32 = x_90.unity_MatrixV[2i].z;
  let x_2060 : f32 = vs_INTERP0.z;
  let x_2063 : f32 = u_xlat24.x;
  u_xlat24.x = ((x_2058 * x_2060) + x_2063);
  let x_2067 : f32 = u_xlat24.x;
  let x_2069 : f32 = x_90.unity_MatrixV[3i].z;
  u_xlat24.x = (x_2067 + x_2069);
  let x_2073 : f32 = u_xlat24.x;
  let x_2077 : f32 = x_90.x_ProjectionParams.y;
  u_xlat24.x = (-(x_2073) + -(x_2077));
  let x_2082 : f32 = u_xlat24.x;
  u_xlat24.x = max(x_2082, 0.0f);
  let x_2086 : f32 = u_xlat24.x;
  let x_2089 : f32 = x_90.unity_FogParams.x;
  u_xlat24.x = (x_2086 * x_2089);
  let x_2099 : vec2<f32> = vs_INTERP5;
  let x_2101 : f32 = x_90.x_GlobalMipBias.x;
  let x_2102 : vec4<f32> = textureSampleBias(unity_Lightmap, samplerunity_Lightmap, x_2099, x_2101);
  u_xlat27 = vec3<f32>(x_2102.x, x_2102.y, x_2102.z);
  let x_2105 : vec4<f32> = x_90.x_ScaledScreenParams;
  let x_2106 : vec2<f32> = vec2<f32>(x_2105.x, x_2105.y);
  let x_2110 : vec2<f32> = (vec2<f32>(1.0f, 1.0f) / vec2<f32>(x_2106.x, x_2106.y));
  let x_2111 : vec4<f32> = u_xlat7;
  u_xlat7 = vec4<f32>(x_2110.x, x_2110.y, x_2111.z, x_2111.w);
  let x_2113 : vec4<f32> = u_xlat7;
  let x_2115 : vec4<f32> = hlslcc_FragCoord;
  let x_2117 : vec2<f32> = (vec2<f32>(x_2113.x, x_2113.y) * vec2<f32>(x_2115.x, x_2115.y));
  let x_2118 : vec4<f32> = u_xlat7;
  u_xlat7 = vec4<f32>(x_2117.x, x_2117.y, x_2118.z, x_2118.w);
  let x_2121 : f32 = u_xlat7.y;
  let x_2124 : f32 = x_90.x_ScaleBiasRt.x;
  let x_2127 : f32 = x_90.x_ScaleBiasRt.y;
  u_xlat46 = ((x_2121 * x_2124) + x_2127);
  let x_2129 : f32 = u_xlat46;
  u_xlat7.z = (-(x_2129) + 1.0f);
  let x_2134 : f32 = u_xlat5.x;
  u_xlat5.x = x_2134;
  let x_2137 : f32 = u_xlat5.x;
  u_xlat5.x = clamp(x_2137, 0.0f, 1.0f);
  let x_2140 : f32 = u_xlat67;
  u_xlat67 = x_2140;
  let x_2141 : f32 = u_xlat67;
  u_xlat67 = clamp(x_2141, 0.0f, 1.0f);
  let x_2143 : vec3<f32> = u_xlat4;
  u_xlat4 = (x_2143 * vec3<f32>(0.959999979f, 0.959999979f, 0.959999979f));
  let x_2148 : f32 = u_xlat5.x;
  u_xlat46 = (-(x_2148) + 1.0f);
  let x_2152 : f32 = u_xlat46;
  let x_2153 : f32 = u_xlat46;
  u_xlat69 = (x_2152 * x_2153);
  let x_2155 : f32 = u_xlat69;
  u_xlat69 = max(x_2155, 0.0078125f);
  let x_2158 : f32 = u_xlat69;
  let x_2159 : f32 = u_xlat69;
  u_xlat72 = (x_2158 * x_2159);
  let x_2162 : f32 = u_xlat5.x;
  u_xlat5.x = (x_2162 + 0.040000021f);
  let x_2167 : f32 = u_xlat5.x;
  u_xlat5.x = min(x_2167, 1.0f);
  let x_2171 : f32 = u_xlat69;
  u_xlat29 = ((x_2171 * 4.0f) + 2.0f);
  let x_2179 : vec4<f32> = u_xlat7;
  let x_2182 : f32 = x_90.x_GlobalMipBias.x;
  let x_2183 : vec4<f32> = textureSampleBias(x_ScreenSpaceOcclusionTexture, sampler_ScreenSpaceOcclusionTexture, vec2<f32>(x_2179.x, x_2179.z), x_2182);
  u_xlat7.x = x_2183.x;
  let x_2187 : f32 = u_xlat7.x;
  u_xlat51.x = (x_2187 + -1.0f);
  let x_2191 : f32 = x_90.x_AmbientOcclusionParam.w;
  let x_2193 : f32 = u_xlat51.x;
  u_xlat51.x = ((x_2191 * x_2193) + 1.0f);
  let x_2198 : f32 = u_xlat7.x;
  let x_2200 : f32 = vs_INTERP4.w;
  u_xlat7.x = min(x_2198, x_2200);
  let x_2203 : bool = u_xlatb66;
  if (x_2203) {
    let x_2207 : f32 = x_255.x_MainLightShadowParams.y;
    u_xlatb66 = (x_2207 == 1.0f);
    let x_2209 : bool = u_xlatb66;
    if (x_2209) {
      let x_2212 : vec4<f32> = u_xlat6;
      let x_2215 : vec4<f32> = x_255.x_MainLightShadowOffset0;
      u_xlat8 = (vec4<f32>(x_2212.x, x_2212.y, x_2212.x, x_2212.y) + x_2215);
      let x_2218 : vec4<f32> = u_xlat8;
      let x_2219 : vec2<f32> = vec2<f32>(x_2218.x, x_2218.y);
      let x_2221 : f32 = u_xlat6.z;
      txVec30 = vec3<f32>(x_2219.x, x_2219.y, x_2221);
      let x_2228 : vec3<f32> = txVec30;
      let x_2230 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2228.xy, x_2228.z);
      u_xlat9.x = x_2230;
      let x_2233 : vec4<f32> = u_xlat8;
      let x_2234 : vec2<f32> = vec2<f32>(x_2233.z, x_2233.w);
      let x_2236 : f32 = u_xlat6.z;
      txVec31 = vec3<f32>(x_2234.x, x_2234.y, x_2236);
      let x_2243 : vec3<f32> = txVec31;
      let x_2245 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2243.xy, x_2243.z);
      u_xlat9.y = x_2245;
      let x_2247 : vec4<f32> = u_xlat6;
      let x_2250 : vec4<f32> = x_255.x_MainLightShadowOffset1;
      u_xlat8 = (vec4<f32>(x_2247.x, x_2247.y, x_2247.x, x_2247.y) + x_2250);
      let x_2253 : vec4<f32> = u_xlat8;
      let x_2254 : vec2<f32> = vec2<f32>(x_2253.x, x_2253.y);
      let x_2256 : f32 = u_xlat6.z;
      txVec32 = vec3<f32>(x_2254.x, x_2254.y, x_2256);
      let x_2263 : vec3<f32> = txVec32;
      let x_2265 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2263.xy, x_2263.z);
      u_xlat9.z = x_2265;
      let x_2268 : vec4<f32> = u_xlat8;
      let x_2269 : vec2<f32> = vec2<f32>(x_2268.z, x_2268.w);
      let x_2271 : f32 = u_xlat6.z;
      txVec33 = vec3<f32>(x_2269.x, x_2269.y, x_2271);
      let x_2278 : vec3<f32> = txVec33;
      let x_2280 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2278.xy, x_2278.z);
      u_xlat9.w = x_2280;
      let x_2282 : vec4<f32> = u_xlat9;
      u_xlat66 = dot(x_2282, vec4<f32>(0.25f, 0.25f, 0.25f, 0.25f));
    } else {
      let x_2287 : f32 = x_255.x_MainLightShadowParams.y;
      u_xlatb73 = (x_2287 == 2.0f);
      let x_2289 : bool = u_xlatb73;
      if (x_2289) {
        let x_2292 : vec4<f32> = u_xlat6;
        let x_2295 : vec4<f32> = x_255.x_MainLightShadowmapSize;
        let x_2298 : vec2<f32> = ((vec2<f32>(x_2292.x, x_2292.y) * vec2<f32>(x_2295.z, x_2295.w)) + vec2<f32>(0.5f, 0.5f));
        let x_2299 : vec4<f32> = u_xlat8;
        u_xlat8 = vec4<f32>(x_2298.x, x_2298.y, x_2299.z, x_2299.w);
        let x_2301 : vec4<f32> = u_xlat8;
        let x_2303 : vec2<f32> = floor(vec2<f32>(x_2301.x, x_2301.y));
        let x_2304 : vec4<f32> = u_xlat8;
        u_xlat8 = vec4<f32>(x_2303.x, x_2303.y, x_2304.z, x_2304.w);
        let x_2307 : vec4<f32> = u_xlat6;
        let x_2310 : vec4<f32> = x_255.x_MainLightShadowmapSize;
        let x_2313 : vec4<f32> = u_xlat8;
        u_xlat52 = ((vec2<f32>(x_2307.x, x_2307.y) * vec2<f32>(x_2310.z, x_2310.w)) + -(vec2<f32>(x_2313.x, x_2313.y)));
        let x_2317 : vec2<f32> = u_xlat52;
        u_xlat9 = (vec4<f32>(x_2317.x, x_2317.x, x_2317.y, x_2317.y) + vec4<f32>(0.5f, 1.0f, 0.5f, 1.0f));
        let x_2320 : vec4<f32> = u_xlat9;
        let x_2322 : vec4<f32> = u_xlat9;
        u_xlat10 = (vec4<f32>(x_2320.x, x_2320.x, x_2320.z, x_2320.z) * vec4<f32>(x_2322.x, x_2322.x, x_2322.z, x_2322.z));
        let x_2325 : vec4<f32> = u_xlat10;
        let x_2327 : vec2<f32> = (vec2<f32>(x_2325.y, x_2325.w) * vec2<f32>(0.079999998f, 0.079999998f));
        let x_2328 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_2327.x, x_2328.y, x_2327.y, x_2328.w);
        let x_2330 : vec4<f32> = u_xlat10;
        let x_2333 : vec2<f32> = u_xlat52;
        let x_2335 : vec2<f32> = ((vec2<f32>(x_2330.x, x_2330.z) * vec2<f32>(0.5f, 0.5f)) + -(x_2333));
        let x_2336 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_2335.x, x_2335.y, x_2336.z, x_2336.w);
        let x_2338 : vec2<f32> = u_xlat52;
        u_xlat54 = (-(x_2338) + vec2<f32>(1.0f, 1.0f));
        let x_2341 : vec2<f32> = u_xlat52;
        let x_2342 : vec2<f32> = min(x_2341, vec2<f32>(0.0f, 0.0f));
        let x_2343 : vec4<f32> = u_xlat11;
        u_xlat11 = vec4<f32>(x_2342.x, x_2342.y, x_2343.z, x_2343.w);
        let x_2345 : vec4<f32> = u_xlat11;
        let x_2348 : vec4<f32> = u_xlat11;
        let x_2351 : vec2<f32> = u_xlat54;
        let x_2352 : vec2<f32> = ((-(vec2<f32>(x_2345.x, x_2345.y)) * vec2<f32>(x_2348.x, x_2348.y)) + x_2351);
        let x_2353 : vec4<f32> = u_xlat11;
        u_xlat11 = vec4<f32>(x_2352.x, x_2352.y, x_2353.z, x_2353.w);
        let x_2355 : vec2<f32> = u_xlat52;
        u_xlat52 = max(x_2355, vec2<f32>(0.0f, 0.0f));
        let x_2357 : vec2<f32> = u_xlat52;
        let x_2359 : vec2<f32> = u_xlat52;
        let x_2361 : vec4<f32> = u_xlat9;
        u_xlat52 = ((-(x_2357) * x_2359) + vec2<f32>(x_2361.y, x_2361.w));
        let x_2364 : vec4<f32> = u_xlat11;
        let x_2366 : vec2<f32> = (vec2<f32>(x_2364.x, x_2364.y) + vec2<f32>(1.0f, 1.0f));
        let x_2367 : vec4<f32> = u_xlat11;
        u_xlat11 = vec4<f32>(x_2366.x, x_2366.y, x_2367.z, x_2367.w);
        let x_2369 : vec2<f32> = u_xlat52;
        u_xlat52 = (x_2369 + vec2<f32>(1.0f, 1.0f));
        let x_2371 : vec4<f32> = u_xlat10;
        let x_2373 : vec2<f32> = (vec2<f32>(x_2371.x, x_2371.y) * vec2<f32>(0.159999996f, 0.159999996f));
        let x_2374 : vec4<f32> = u_xlat12;
        u_xlat12 = vec4<f32>(x_2373.x, x_2373.y, x_2374.z, x_2374.w);
        let x_2376 : vec2<f32> = u_xlat54;
        let x_2377 : vec2<f32> = (x_2376 * vec2<f32>(0.159999996f, 0.159999996f));
        let x_2378 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_2377.x, x_2377.y, x_2378.z, x_2378.w);
        let x_2380 : vec4<f32> = u_xlat11;
        let x_2382 : vec2<f32> = (vec2<f32>(x_2380.x, x_2380.y) * vec2<f32>(0.159999996f, 0.159999996f));
        let x_2383 : vec4<f32> = u_xlat11;
        u_xlat11 = vec4<f32>(x_2382.x, x_2382.y, x_2383.z, x_2383.w);
        let x_2385 : vec2<f32> = u_xlat52;
        let x_2386 : vec2<f32> = (x_2385 * vec2<f32>(0.159999996f, 0.159999996f));
        let x_2387 : vec4<f32> = u_xlat13;
        u_xlat13 = vec4<f32>(x_2386.x, x_2386.y, x_2387.z, x_2387.w);
        let x_2389 : vec4<f32> = u_xlat9;
        u_xlat52 = (vec2<f32>(x_2389.y, x_2389.w) * vec2<f32>(0.159999996f, 0.159999996f));
        let x_2393 : f32 = u_xlat11.x;
        u_xlat12.z = x_2393;
        let x_2396 : f32 = u_xlat52.x;
        u_xlat12.w = x_2396;
        let x_2399 : f32 = u_xlat13.x;
        u_xlat10.z = x_2399;
        let x_2402 : f32 = u_xlat9.x;
        u_xlat10.w = x_2402;
        let x_2404 : vec4<f32> = u_xlat10;
        let x_2406 : vec4<f32> = u_xlat12;
        u_xlat14 = (vec4<f32>(x_2404.z, x_2404.w, x_2404.x, x_2404.z) + vec4<f32>(x_2406.z, x_2406.w, x_2406.x, x_2406.z));
        let x_2410 : f32 = u_xlat12.y;
        u_xlat11.z = x_2410;
        let x_2413 : f32 = u_xlat52.y;
        u_xlat11.w = x_2413;
        let x_2416 : f32 = u_xlat10.y;
        u_xlat13.z = x_2416;
        let x_2419 : f32 = u_xlat9.z;
        u_xlat13.w = x_2419;
        let x_2421 : vec4<f32> = u_xlat11;
        let x_2423 : vec4<f32> = u_xlat13;
        let x_2425 : vec3<f32> = (vec3<f32>(x_2421.z, x_2421.y, x_2421.w) + vec3<f32>(x_2423.z, x_2423.y, x_2423.w));
        let x_2426 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_2425.x, x_2425.y, x_2425.z, x_2426.w);
        let x_2428 : vec4<f32> = u_xlat10;
        let x_2430 : vec4<f32> = u_xlat14;
        let x_2432 : vec3<f32> = (vec3<f32>(x_2428.x, x_2428.z, x_2428.w) / vec3<f32>(x_2430.z, x_2430.w, x_2430.y));
        let x_2433 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_2432.x, x_2432.y, x_2432.z, x_2433.w);
        let x_2435 : vec4<f32> = u_xlat10;
        let x_2437 : vec3<f32> = (vec3<f32>(x_2435.x, x_2435.y, x_2435.z) + vec3<f32>(-2.5f, -0.5f, 1.5f));
        let x_2438 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_2437.x, x_2437.y, x_2437.z, x_2438.w);
        let x_2440 : vec4<f32> = u_xlat13;
        let x_2442 : vec4<f32> = u_xlat9;
        let x_2444 : vec3<f32> = (vec3<f32>(x_2440.z, x_2440.y, x_2440.w) / vec3<f32>(x_2442.x, x_2442.y, x_2442.z));
        let x_2445 : vec4<f32> = u_xlat11;
        u_xlat11 = vec4<f32>(x_2444.x, x_2444.y, x_2444.z, x_2445.w);
        let x_2447 : vec4<f32> = u_xlat11;
        let x_2449 : vec3<f32> = (vec3<f32>(x_2447.x, x_2447.y, x_2447.z) + vec3<f32>(-2.5f, -0.5f, 1.5f));
        let x_2450 : vec4<f32> = u_xlat11;
        u_xlat11 = vec4<f32>(x_2449.x, x_2449.y, x_2449.z, x_2450.w);
        let x_2452 : vec4<f32> = u_xlat10;
        let x_2455 : vec4<f32> = x_255.x_MainLightShadowmapSize;
        let x_2457 : vec3<f32> = (vec3<f32>(x_2452.y, x_2452.x, x_2452.z) * vec3<f32>(x_2455.x, x_2455.x, x_2455.x));
        let x_2458 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_2457.x, x_2457.y, x_2457.z, x_2458.w);
        let x_2460 : vec4<f32> = u_xlat11;
        let x_2463 : vec4<f32> = x_255.x_MainLightShadowmapSize;
        let x_2465 : vec3<f32> = (vec3<f32>(x_2460.x, x_2460.y, x_2460.z) * vec3<f32>(x_2463.y, x_2463.y, x_2463.y));
        let x_2466 : vec4<f32> = u_xlat11;
        u_xlat11 = vec4<f32>(x_2465.x, x_2465.y, x_2465.z, x_2466.w);
        let x_2469 : f32 = u_xlat11.x;
        u_xlat10.w = x_2469;
        let x_2471 : vec4<f32> = u_xlat8;
        let x_2474 : vec4<f32> = x_255.x_MainLightShadowmapSize;
        let x_2477 : vec4<f32> = u_xlat10;
        u_xlat12 = ((vec4<f32>(x_2471.x, x_2471.y, x_2471.x, x_2471.y) * vec4<f32>(x_2474.x, x_2474.y, x_2474.x, x_2474.y)) + vec4<f32>(x_2477.y, x_2477.w, x_2477.x, x_2477.w));
        let x_2480 : vec4<f32> = u_xlat8;
        let x_2483 : vec4<f32> = x_255.x_MainLightShadowmapSize;
        let x_2486 : vec4<f32> = u_xlat10;
        u_xlat52 = ((vec2<f32>(x_2480.x, x_2480.y) * vec2<f32>(x_2483.x, x_2483.y)) + vec2<f32>(x_2486.z, x_2486.w));
        let x_2490 : f32 = u_xlat10.y;
        u_xlat11.w = x_2490;
        let x_2492 : vec4<f32> = u_xlat11;
        let x_2493 : vec2<f32> = vec2<f32>(x_2492.y, x_2492.z);
        let x_2494 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_2494.x, x_2493.x, x_2494.z, x_2493.y);
        let x_2496 : vec4<f32> = u_xlat8;
        let x_2499 : vec4<f32> = x_255.x_MainLightShadowmapSize;
        let x_2502 : vec4<f32> = u_xlat10;
        u_xlat13 = ((vec4<f32>(x_2496.x, x_2496.y, x_2496.x, x_2496.y) * vec4<f32>(x_2499.x, x_2499.y, x_2499.x, x_2499.y)) + vec4<f32>(x_2502.x, x_2502.y, x_2502.z, x_2502.y));
        let x_2505 : vec4<f32> = u_xlat8;
        let x_2508 : vec4<f32> = x_255.x_MainLightShadowmapSize;
        let x_2511 : vec4<f32> = u_xlat11;
        u_xlat11 = ((vec4<f32>(x_2505.x, x_2505.y, x_2505.x, x_2505.y) * vec4<f32>(x_2508.x, x_2508.y, x_2508.x, x_2508.y)) + vec4<f32>(x_2511.w, x_2511.y, x_2511.w, x_2511.z));
        let x_2514 : vec4<f32> = u_xlat8;
        let x_2517 : vec4<f32> = x_255.x_MainLightShadowmapSize;
        let x_2520 : vec4<f32> = u_xlat10;
        u_xlat10 = ((vec4<f32>(x_2514.x, x_2514.y, x_2514.x, x_2514.y) * vec4<f32>(x_2517.x, x_2517.y, x_2517.x, x_2517.y)) + vec4<f32>(x_2520.x, x_2520.w, x_2520.z, x_2520.w));
        let x_2523 : vec4<f32> = u_xlat9;
        let x_2525 : vec4<f32> = u_xlat14;
        u_xlat15 = (vec4<f32>(x_2523.x, x_2523.x, x_2523.x, x_2523.y) * vec4<f32>(x_2525.z, x_2525.w, x_2525.y, x_2525.z));
        let x_2528 : vec4<f32> = u_xlat9;
        let x_2530 : vec4<f32> = u_xlat14;
        u_xlat16 = (vec4<f32>(x_2528.y, x_2528.y, x_2528.z, x_2528.z) * x_2530);
        let x_2534 : f32 = u_xlat9.z;
        let x_2536 : f32 = u_xlat14.y;
        u_xlat73 = (x_2534 * x_2536);
        let x_2539 : vec4<f32> = u_xlat12;
        let x_2540 : vec2<f32> = vec2<f32>(x_2539.x, x_2539.y);
        let x_2542 : f32 = u_xlat6.z;
        txVec34 = vec3<f32>(x_2540.x, x_2540.y, x_2542);
        let x_2549 : vec3<f32> = txVec34;
        let x_2551 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2549.xy, x_2549.z);
        u_xlat8.x = x_2551;
        let x_2554 : vec4<f32> = u_xlat12;
        let x_2555 : vec2<f32> = vec2<f32>(x_2554.z, x_2554.w);
        let x_2557 : f32 = u_xlat6.z;
        txVec35 = vec3<f32>(x_2555.x, x_2555.y, x_2557);
        let x_2564 : vec3<f32> = txVec35;
        let x_2566 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2564.xy, x_2564.z);
        u_xlat30.x = x_2566;
        let x_2569 : f32 = u_xlat30.x;
        let x_2571 : f32 = u_xlat15.y;
        u_xlat30.x = (x_2569 * x_2571);
        let x_2575 : f32 = u_xlat15.x;
        let x_2577 : f32 = u_xlat8.x;
        let x_2580 : f32 = u_xlat30.x;
        u_xlat8.x = ((x_2575 * x_2577) + x_2580);
        let x_2584 : vec2<f32> = u_xlat52;
        let x_2586 : f32 = u_xlat6.z;
        txVec36 = vec3<f32>(x_2584.x, x_2584.y, x_2586);
        let x_2593 : vec3<f32> = txVec36;
        let x_2595 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2593.xy, x_2593.z);
        u_xlat30.x = x_2595;
        let x_2598 : f32 = u_xlat15.z;
        let x_2600 : f32 = u_xlat30.x;
        let x_2603 : f32 = u_xlat8.x;
        u_xlat8.x = ((x_2598 * x_2600) + x_2603);
        let x_2607 : vec4<f32> = u_xlat11;
        let x_2608 : vec2<f32> = vec2<f32>(x_2607.x, x_2607.y);
        let x_2610 : f32 = u_xlat6.z;
        txVec37 = vec3<f32>(x_2608.x, x_2608.y, x_2610);
        let x_2617 : vec3<f32> = txVec37;
        let x_2619 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2617.xy, x_2617.z);
        u_xlat30.x = x_2619;
        let x_2622 : f32 = u_xlat15.w;
        let x_2624 : f32 = u_xlat30.x;
        let x_2627 : f32 = u_xlat8.x;
        u_xlat8.x = ((x_2622 * x_2624) + x_2627);
        let x_2631 : vec4<f32> = u_xlat13;
        let x_2632 : vec2<f32> = vec2<f32>(x_2631.x, x_2631.y);
        let x_2634 : f32 = u_xlat6.z;
        txVec38 = vec3<f32>(x_2632.x, x_2632.y, x_2634);
        let x_2641 : vec3<f32> = txVec38;
        let x_2643 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2641.xy, x_2641.z);
        u_xlat30.x = x_2643;
        let x_2646 : f32 = u_xlat16.x;
        let x_2648 : f32 = u_xlat30.x;
        let x_2651 : f32 = u_xlat8.x;
        u_xlat8.x = ((x_2646 * x_2648) + x_2651);
        let x_2655 : vec4<f32> = u_xlat13;
        let x_2656 : vec2<f32> = vec2<f32>(x_2655.z, x_2655.w);
        let x_2658 : f32 = u_xlat6.z;
        txVec39 = vec3<f32>(x_2656.x, x_2656.y, x_2658);
        let x_2665 : vec3<f32> = txVec39;
        let x_2667 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2665.xy, x_2665.z);
        u_xlat30.x = x_2667;
        let x_2670 : f32 = u_xlat16.y;
        let x_2672 : f32 = u_xlat30.x;
        let x_2675 : f32 = u_xlat8.x;
        u_xlat8.x = ((x_2670 * x_2672) + x_2675);
        let x_2679 : vec4<f32> = u_xlat11;
        let x_2680 : vec2<f32> = vec2<f32>(x_2679.z, x_2679.w);
        let x_2682 : f32 = u_xlat6.z;
        txVec40 = vec3<f32>(x_2680.x, x_2680.y, x_2682);
        let x_2689 : vec3<f32> = txVec40;
        let x_2691 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2689.xy, x_2689.z);
        u_xlat30.x = x_2691;
        let x_2694 : f32 = u_xlat16.z;
        let x_2696 : f32 = u_xlat30.x;
        let x_2699 : f32 = u_xlat8.x;
        u_xlat8.x = ((x_2694 * x_2696) + x_2699);
        let x_2703 : vec4<f32> = u_xlat10;
        let x_2704 : vec2<f32> = vec2<f32>(x_2703.x, x_2703.y);
        let x_2706 : f32 = u_xlat6.z;
        txVec41 = vec3<f32>(x_2704.x, x_2704.y, x_2706);
        let x_2713 : vec3<f32> = txVec41;
        let x_2715 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2713.xy, x_2713.z);
        u_xlat30.x = x_2715;
        let x_2718 : f32 = u_xlat16.w;
        let x_2720 : f32 = u_xlat30.x;
        let x_2723 : f32 = u_xlat8.x;
        u_xlat8.x = ((x_2718 * x_2720) + x_2723);
        let x_2727 : vec4<f32> = u_xlat10;
        let x_2728 : vec2<f32> = vec2<f32>(x_2727.z, x_2727.w);
        let x_2730 : f32 = u_xlat6.z;
        txVec42 = vec3<f32>(x_2728.x, x_2728.y, x_2730);
        let x_2737 : vec3<f32> = txVec42;
        let x_2739 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2737.xy, x_2737.z);
        u_xlat30.x = x_2739;
        let x_2741 : f32 = u_xlat73;
        let x_2743 : f32 = u_xlat30.x;
        let x_2746 : f32 = u_xlat8.x;
        u_xlat66 = ((x_2741 * x_2743) + x_2746);
      } else {
        let x_2749 : vec4<f32> = u_xlat6;
        let x_2752 : vec4<f32> = x_255.x_MainLightShadowmapSize;
        let x_2755 : vec2<f32> = ((vec2<f32>(x_2749.x, x_2749.y) * vec2<f32>(x_2752.z, x_2752.w)) + vec2<f32>(0.5f, 0.5f));
        let x_2756 : vec4<f32> = u_xlat8;
        u_xlat8 = vec4<f32>(x_2755.x, x_2755.y, x_2756.z, x_2756.w);
        let x_2758 : vec4<f32> = u_xlat8;
        let x_2760 : vec2<f32> = floor(vec2<f32>(x_2758.x, x_2758.y));
        let x_2761 : vec4<f32> = u_xlat8;
        u_xlat8 = vec4<f32>(x_2760.x, x_2760.y, x_2761.z, x_2761.w);
        let x_2763 : vec4<f32> = u_xlat6;
        let x_2766 : vec4<f32> = x_255.x_MainLightShadowmapSize;
        let x_2769 : vec4<f32> = u_xlat8;
        u_xlat52 = ((vec2<f32>(x_2763.x, x_2763.y) * vec2<f32>(x_2766.z, x_2766.w)) + -(vec2<f32>(x_2769.x, x_2769.y)));
        let x_2773 : vec2<f32> = u_xlat52;
        u_xlat9 = (vec4<f32>(x_2773.x, x_2773.x, x_2773.y, x_2773.y) + vec4<f32>(0.5f, 1.0f, 0.5f, 1.0f));
        let x_2776 : vec4<f32> = u_xlat9;
        let x_2778 : vec4<f32> = u_xlat9;
        u_xlat10 = (vec4<f32>(x_2776.x, x_2776.x, x_2776.z, x_2776.z) * vec4<f32>(x_2778.x, x_2778.x, x_2778.z, x_2778.z));
        let x_2781 : vec4<f32> = u_xlat10;
        let x_2783 : vec2<f32> = (vec2<f32>(x_2781.y, x_2781.w) * vec2<f32>(0.040816002f, 0.040816002f));
        let x_2784 : vec4<f32> = u_xlat11;
        u_xlat11 = vec4<f32>(x_2784.x, x_2783.x, x_2784.z, x_2783.y);
        let x_2786 : vec4<f32> = u_xlat10;
        let x_2789 : vec2<f32> = u_xlat52;
        let x_2791 : vec2<f32> = ((vec2<f32>(x_2786.x, x_2786.z) * vec2<f32>(0.5f, 0.5f)) + -(x_2789));
        let x_2792 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_2791.x, x_2792.y, x_2791.y, x_2792.w);
        let x_2794 : vec2<f32> = u_xlat52;
        let x_2796 : vec2<f32> = (-(x_2794) + vec2<f32>(1.0f, 1.0f));
        let x_2797 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_2796.x, x_2796.y, x_2797.z, x_2797.w);
        let x_2799 : vec2<f32> = u_xlat52;
        u_xlat54 = min(x_2799, vec2<f32>(0.0f, 0.0f));
        let x_2801 : vec2<f32> = u_xlat54;
        let x_2803 : vec2<f32> = u_xlat54;
        let x_2805 : vec4<f32> = u_xlat10;
        let x_2807 : vec2<f32> = ((-(x_2801) * x_2803) + vec2<f32>(x_2805.x, x_2805.y));
        let x_2808 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_2807.x, x_2807.y, x_2808.z, x_2808.w);
        let x_2810 : vec2<f32> = u_xlat52;
        u_xlat54 = max(x_2810, vec2<f32>(0.0f, 0.0f));
        let x_2812 : vec2<f32> = u_xlat54;
        let x_2814 : vec2<f32> = u_xlat54;
        let x_2816 : vec4<f32> = u_xlat9;
        let x_2818 : vec2<f32> = ((-(x_2812) * x_2814) + vec2<f32>(x_2816.y, x_2816.w));
        let x_2819 : vec3<f32> = u_xlat31;
        u_xlat31 = vec3<f32>(x_2818.x, x_2819.y, x_2818.y);
        let x_2821 : vec4<f32> = u_xlat10;
        let x_2823 : vec2<f32> = (vec2<f32>(x_2821.x, x_2821.y) + vec2<f32>(2.0f, 2.0f));
        let x_2824 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_2823.x, x_2823.y, x_2824.z, x_2824.w);
        let x_2826 : vec3<f32> = u_xlat31;
        let x_2828 : vec2<f32> = (vec2<f32>(x_2826.x, x_2826.z) + vec2<f32>(2.0f, 2.0f));
        let x_2829 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_2829.x, x_2828.x, x_2829.z, x_2828.y);
        let x_2832 : f32 = u_xlat9.y;
        u_xlat12.z = (x_2832 * 0.081632003f);
        let x_2835 : vec4<f32> = u_xlat9;
        let x_2837 : vec3<f32> = (vec3<f32>(x_2835.z, x_2835.x, x_2835.w) * vec3<f32>(0.081632003f, 0.081632003f, 0.081632003f));
        let x_2838 : vec4<f32> = u_xlat13;
        u_xlat13 = vec4<f32>(x_2837.x, x_2837.y, x_2837.z, x_2838.w);
        let x_2840 : vec4<f32> = u_xlat10;
        let x_2842 : vec2<f32> = (vec2<f32>(x_2840.x, x_2840.y) * vec2<f32>(0.081632003f, 0.081632003f));
        let x_2843 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_2842.x, x_2842.y, x_2843.z, x_2843.w);
        let x_2846 : f32 = u_xlat13.y;
        u_xlat12.x = x_2846;
        let x_2848 : vec2<f32> = u_xlat52;
        let x_2851 : vec2<f32> = ((vec2<f32>(x_2848.x, x_2848.x) * vec2<f32>(-0.081632003f, 0.081632003f)) + vec2<f32>(0.163264006f, 0.081632003f));
        let x_2852 : vec4<f32> = u_xlat12;
        u_xlat12 = vec4<f32>(x_2852.x, x_2851.x, x_2852.z, x_2851.y);
        let x_2854 : vec2<f32> = u_xlat52;
        let x_2857 : vec2<f32> = ((vec2<f32>(x_2854.x, x_2854.x) * vec2<f32>(-0.081632003f, 0.081632003f)) + vec2<f32>(0.081632003f, 0.163264006f));
        let x_2858 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_2857.x, x_2858.y, x_2857.y, x_2858.w);
        let x_2861 : f32 = u_xlat9.x;
        u_xlat10.y = x_2861;
        let x_2864 : f32 = u_xlat11.y;
        u_xlat10.w = x_2864;
        let x_2866 : vec4<f32> = u_xlat10;
        let x_2867 : vec4<f32> = u_xlat12;
        u_xlat12 = (x_2866 + x_2867);
        let x_2869 : vec2<f32> = u_xlat52;
        let x_2872 : vec2<f32> = ((vec2<f32>(x_2869.y, x_2869.y) * vec2<f32>(-0.081632003f, 0.081632003f)) + vec2<f32>(0.163264006f, 0.081632003f));
        let x_2873 : vec4<f32> = u_xlat13;
        u_xlat13 = vec4<f32>(x_2873.x, x_2872.x, x_2873.z, x_2872.y);
        let x_2875 : vec2<f32> = u_xlat52;
        let x_2878 : vec2<f32> = ((vec2<f32>(x_2875.y, x_2875.y) * vec2<f32>(-0.081632003f, 0.081632003f)) + vec2<f32>(0.081632003f, 0.163264006f));
        let x_2879 : vec4<f32> = u_xlat11;
        u_xlat11 = vec4<f32>(x_2878.x, x_2879.y, x_2878.y, x_2879.w);
        let x_2882 : f32 = u_xlat9.y;
        u_xlat11.y = x_2882;
        let x_2884 : vec4<f32> = u_xlat11;
        let x_2885 : vec4<f32> = u_xlat13;
        u_xlat9 = (x_2884 + x_2885);
        let x_2887 : vec4<f32> = u_xlat10;
        let x_2888 : vec4<f32> = u_xlat12;
        u_xlat10 = (x_2887 / x_2888);
        let x_2890 : vec4<f32> = u_xlat10;
        u_xlat10 = (x_2890 + vec4<f32>(-3.5f, -1.5f, 0.5f, 2.5f));
        let x_2892 : vec4<f32> = u_xlat11;
        let x_2893 : vec4<f32> = u_xlat9;
        u_xlat11 = (x_2892 / x_2893);
        let x_2895 : vec4<f32> = u_xlat11;
        u_xlat11 = (x_2895 + vec4<f32>(-3.5f, -1.5f, 0.5f, 2.5f));
        let x_2897 : vec4<f32> = u_xlat10;
        let x_2900 : vec4<f32> = x_255.x_MainLightShadowmapSize;
        u_xlat10 = (vec4<f32>(x_2897.w, x_2897.x, x_2897.y, x_2897.z) * vec4<f32>(x_2900.x, x_2900.x, x_2900.x, x_2900.x));
        let x_2903 : vec4<f32> = u_xlat11;
        let x_2906 : vec4<f32> = x_255.x_MainLightShadowmapSize;
        u_xlat11 = (vec4<f32>(x_2903.x, x_2903.w, x_2903.y, x_2903.z) * vec4<f32>(x_2906.y, x_2906.y, x_2906.y, x_2906.y));
        let x_2909 : vec4<f32> = u_xlat10;
        let x_2910 : vec3<f32> = vec3<f32>(x_2909.y, x_2909.z, x_2909.w);
        let x_2911 : vec4<f32> = u_xlat13;
        u_xlat13 = vec4<f32>(x_2910.x, x_2911.y, x_2910.y, x_2910.z);
        let x_2914 : f32 = u_xlat11.x;
        u_xlat13.y = x_2914;
        let x_2916 : vec4<f32> = u_xlat8;
        let x_2919 : vec4<f32> = x_255.x_MainLightShadowmapSize;
        let x_2922 : vec4<f32> = u_xlat13;
        u_xlat14 = ((vec4<f32>(x_2916.x, x_2916.y, x_2916.x, x_2916.y) * vec4<f32>(x_2919.x, x_2919.y, x_2919.x, x_2919.y)) + vec4<f32>(x_2922.x, x_2922.y, x_2922.z, x_2922.y));
        let x_2925 : vec4<f32> = u_xlat8;
        let x_2928 : vec4<f32> = x_255.x_MainLightShadowmapSize;
        let x_2931 : vec4<f32> = u_xlat13;
        u_xlat52 = ((vec2<f32>(x_2925.x, x_2925.y) * vec2<f32>(x_2928.x, x_2928.y)) + vec2<f32>(x_2931.w, x_2931.y));
        let x_2935 : f32 = u_xlat13.y;
        u_xlat10.y = x_2935;
        let x_2938 : f32 = u_xlat11.z;
        u_xlat13.y = x_2938;
        let x_2940 : vec4<f32> = u_xlat8;
        let x_2943 : vec4<f32> = x_255.x_MainLightShadowmapSize;
        let x_2946 : vec4<f32> = u_xlat13;
        u_xlat15 = ((vec4<f32>(x_2940.x, x_2940.y, x_2940.x, x_2940.y) * vec4<f32>(x_2943.x, x_2943.y, x_2943.x, x_2943.y)) + vec4<f32>(x_2946.x, x_2946.y, x_2946.z, x_2946.y));
        let x_2949 : vec4<f32> = u_xlat8;
        let x_2952 : vec4<f32> = x_255.x_MainLightShadowmapSize;
        let x_2955 : vec4<f32> = u_xlat13;
        let x_2957 : vec2<f32> = ((vec2<f32>(x_2949.x, x_2949.y) * vec2<f32>(x_2952.x, x_2952.y)) + vec2<f32>(x_2955.w, x_2955.y));
        let x_2958 : vec4<f32> = u_xlat16;
        u_xlat16 = vec4<f32>(x_2957.x, x_2957.y, x_2958.z, x_2958.w);
        let x_2961 : f32 = u_xlat13.y;
        u_xlat10.z = x_2961;
        let x_2963 : vec4<f32> = u_xlat8;
        let x_2966 : vec4<f32> = x_255.x_MainLightShadowmapSize;
        let x_2969 : vec4<f32> = u_xlat10;
        u_xlat17 = ((vec4<f32>(x_2963.x, x_2963.y, x_2963.x, x_2963.y) * vec4<f32>(x_2966.x, x_2966.y, x_2966.x, x_2966.y)) + vec4<f32>(x_2969.x, x_2969.y, x_2969.x, x_2969.z));
        let x_2973 : f32 = u_xlat11.w;
        u_xlat13.y = x_2973;
        let x_2975 : vec4<f32> = u_xlat8;
        let x_2978 : vec4<f32> = x_255.x_MainLightShadowmapSize;
        let x_2981 : vec4<f32> = u_xlat13;
        u_xlat18 = ((vec4<f32>(x_2975.x, x_2975.y, x_2975.x, x_2975.y) * vec4<f32>(x_2978.x, x_2978.y, x_2978.x, x_2978.y)) + vec4<f32>(x_2981.x, x_2981.y, x_2981.z, x_2981.y));
        let x_2985 : vec4<f32> = u_xlat8;
        let x_2988 : vec4<f32> = x_255.x_MainLightShadowmapSize;
        let x_2991 : vec4<f32> = u_xlat13;
        u_xlat32 = ((vec2<f32>(x_2985.x, x_2985.y) * vec2<f32>(x_2988.x, x_2988.y)) + vec2<f32>(x_2991.w, x_2991.y));
        let x_2995 : f32 = u_xlat13.y;
        u_xlat10.w = x_2995;
        let x_2998 : vec4<f32> = u_xlat8;
        let x_3001 : vec4<f32> = x_255.x_MainLightShadowmapSize;
        let x_3004 : vec4<f32> = u_xlat10;
        u_xlat60 = ((vec2<f32>(x_2998.x, x_2998.y) * vec2<f32>(x_3001.x, x_3001.y)) + vec2<f32>(x_3004.x, x_3004.w));
        let x_3007 : vec4<f32> = u_xlat13;
        let x_3008 : vec3<f32> = vec3<f32>(x_3007.x, x_3007.z, x_3007.w);
        let x_3009 : vec4<f32> = u_xlat11;
        u_xlat11 = vec4<f32>(x_3008.x, x_3009.y, x_3008.y, x_3008.z);
        let x_3011 : vec4<f32> = u_xlat8;
        let x_3014 : vec4<f32> = x_255.x_MainLightShadowmapSize;
        let x_3017 : vec4<f32> = u_xlat11;
        u_xlat13 = ((vec4<f32>(x_3011.x, x_3011.y, x_3011.x, x_3011.y) * vec4<f32>(x_3014.x, x_3014.y, x_3014.x, x_3014.y)) + vec4<f32>(x_3017.x, x_3017.y, x_3017.z, x_3017.y));
        let x_3021 : vec4<f32> = u_xlat8;
        let x_3024 : vec4<f32> = x_255.x_MainLightShadowmapSize;
        let x_3027 : vec4<f32> = u_xlat11;
        u_xlat55 = ((vec2<f32>(x_3021.x, x_3021.y) * vec2<f32>(x_3024.x, x_3024.y)) + vec2<f32>(x_3027.w, x_3027.y));
        let x_3031 : f32 = u_xlat10.x;
        u_xlat11.x = x_3031;
        let x_3033 : vec4<f32> = u_xlat8;
        let x_3036 : vec4<f32> = x_255.x_MainLightShadowmapSize;
        let x_3039 : vec4<f32> = u_xlat11;
        let x_3041 : vec2<f32> = ((vec2<f32>(x_3033.x, x_3033.y) * vec2<f32>(x_3036.x, x_3036.y)) + vec2<f32>(x_3039.x, x_3039.y));
        let x_3042 : vec4<f32> = u_xlat8;
        u_xlat8 = vec4<f32>(x_3041.x, x_3041.y, x_3042.z, x_3042.w);
        let x_3044 : vec4<f32> = u_xlat9;
        let x_3046 : vec4<f32> = u_xlat12;
        u_xlat19 = (vec4<f32>(x_3044.x, x_3044.x, x_3044.x, x_3044.x) * x_3046);
        let x_3048 : vec4<f32> = u_xlat9;
        let x_3050 : vec4<f32> = u_xlat12;
        u_xlat20 = (vec4<f32>(x_3048.y, x_3048.y, x_3048.y, x_3048.y) * x_3050);
        let x_3053 : vec4<f32> = u_xlat9;
        let x_3055 : vec4<f32> = u_xlat12;
        u_xlat21 = (vec4<f32>(x_3053.z, x_3053.z, x_3053.z, x_3053.z) * x_3055);
        let x_3057 : vec4<f32> = u_xlat9;
        let x_3059 : vec4<f32> = u_xlat12;
        u_xlat9 = (vec4<f32>(x_3057.w, x_3057.w, x_3057.w, x_3057.w) * x_3059);
        let x_3062 : vec4<f32> = u_xlat14;
        let x_3063 : vec2<f32> = vec2<f32>(x_3062.x, x_3062.y);
        let x_3065 : f32 = u_xlat6.z;
        txVec43 = vec3<f32>(x_3063.x, x_3063.y, x_3065);
        let x_3072 : vec3<f32> = txVec43;
        let x_3074 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_3072.xy, x_3072.z);
        u_xlat73 = x_3074;
        let x_3076 : vec4<f32> = u_xlat14;
        let x_3077 : vec2<f32> = vec2<f32>(x_3076.z, x_3076.w);
        let x_3079 : f32 = u_xlat6.z;
        txVec44 = vec3<f32>(x_3077.x, x_3077.y, x_3079);
        let x_3086 : vec3<f32> = txVec44;
        let x_3088 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_3086.xy, x_3086.z);
        u_xlat10.x = x_3088;
        let x_3091 : f32 = u_xlat10.x;
        let x_3093 : f32 = u_xlat19.y;
        u_xlat10.x = (x_3091 * x_3093);
        let x_3097 : f32 = u_xlat19.x;
        let x_3098 : f32 = u_xlat73;
        let x_3101 : f32 = u_xlat10.x;
        u_xlat73 = ((x_3097 * x_3098) + x_3101);
        let x_3104 : vec2<f32> = u_xlat52;
        let x_3106 : f32 = u_xlat6.z;
        txVec45 = vec3<f32>(x_3104.x, x_3104.y, x_3106);
        let x_3113 : vec3<f32> = txVec45;
        let x_3115 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_3113.xy, x_3113.z);
        u_xlat52.x = x_3115;
        let x_3118 : f32 = u_xlat19.z;
        let x_3120 : f32 = u_xlat52.x;
        let x_3122 : f32 = u_xlat73;
        u_xlat73 = ((x_3118 * x_3120) + x_3122);
        let x_3125 : vec4<f32> = u_xlat17;
        let x_3126 : vec2<f32> = vec2<f32>(x_3125.x, x_3125.y);
        let x_3128 : f32 = u_xlat6.z;
        txVec46 = vec3<f32>(x_3126.x, x_3126.y, x_3128);
        let x_3135 : vec3<f32> = txVec46;
        let x_3137 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_3135.xy, x_3135.z);
        u_xlat52.x = x_3137;
        let x_3140 : f32 = u_xlat19.w;
        let x_3142 : f32 = u_xlat52.x;
        let x_3144 : f32 = u_xlat73;
        u_xlat73 = ((x_3140 * x_3142) + x_3144);
        let x_3147 : vec4<f32> = u_xlat15;
        let x_3148 : vec2<f32> = vec2<f32>(x_3147.x, x_3147.y);
        let x_3150 : f32 = u_xlat6.z;
        txVec47 = vec3<f32>(x_3148.x, x_3148.y, x_3150);
        let x_3157 : vec3<f32> = txVec47;
        let x_3159 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_3157.xy, x_3157.z);
        u_xlat52.x = x_3159;
        let x_3162 : f32 = u_xlat20.x;
        let x_3164 : f32 = u_xlat52.x;
        let x_3166 : f32 = u_xlat73;
        u_xlat73 = ((x_3162 * x_3164) + x_3166);
        let x_3169 : vec4<f32> = u_xlat15;
        let x_3170 : vec2<f32> = vec2<f32>(x_3169.z, x_3169.w);
        let x_3172 : f32 = u_xlat6.z;
        txVec48 = vec3<f32>(x_3170.x, x_3170.y, x_3172);
        let x_3179 : vec3<f32> = txVec48;
        let x_3181 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_3179.xy, x_3179.z);
        u_xlat52.x = x_3181;
        let x_3184 : f32 = u_xlat20.y;
        let x_3186 : f32 = u_xlat52.x;
        let x_3188 : f32 = u_xlat73;
        u_xlat73 = ((x_3184 * x_3186) + x_3188);
        let x_3191 : vec4<f32> = u_xlat16;
        let x_3192 : vec2<f32> = vec2<f32>(x_3191.x, x_3191.y);
        let x_3194 : f32 = u_xlat6.z;
        txVec49 = vec3<f32>(x_3192.x, x_3192.y, x_3194);
        let x_3201 : vec3<f32> = txVec49;
        let x_3203 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_3201.xy, x_3201.z);
        u_xlat52.x = x_3203;
        let x_3206 : f32 = u_xlat20.z;
        let x_3208 : f32 = u_xlat52.x;
        let x_3210 : f32 = u_xlat73;
        u_xlat73 = ((x_3206 * x_3208) + x_3210);
        let x_3213 : vec4<f32> = u_xlat17;
        let x_3214 : vec2<f32> = vec2<f32>(x_3213.z, x_3213.w);
        let x_3216 : f32 = u_xlat6.z;
        txVec50 = vec3<f32>(x_3214.x, x_3214.y, x_3216);
        let x_3223 : vec3<f32> = txVec50;
        let x_3225 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_3223.xy, x_3223.z);
        u_xlat52.x = x_3225;
        let x_3228 : f32 = u_xlat20.w;
        let x_3230 : f32 = u_xlat52.x;
        let x_3232 : f32 = u_xlat73;
        u_xlat73 = ((x_3228 * x_3230) + x_3232);
        let x_3235 : vec4<f32> = u_xlat18;
        let x_3236 : vec2<f32> = vec2<f32>(x_3235.x, x_3235.y);
        let x_3238 : f32 = u_xlat6.z;
        txVec51 = vec3<f32>(x_3236.x, x_3236.y, x_3238);
        let x_3245 : vec3<f32> = txVec51;
        let x_3247 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_3245.xy, x_3245.z);
        u_xlat52.x = x_3247;
        let x_3250 : f32 = u_xlat21.x;
        let x_3252 : f32 = u_xlat52.x;
        let x_3254 : f32 = u_xlat73;
        u_xlat73 = ((x_3250 * x_3252) + x_3254);
        let x_3257 : vec4<f32> = u_xlat18;
        let x_3258 : vec2<f32> = vec2<f32>(x_3257.z, x_3257.w);
        let x_3260 : f32 = u_xlat6.z;
        txVec52 = vec3<f32>(x_3258.x, x_3258.y, x_3260);
        let x_3267 : vec3<f32> = txVec52;
        let x_3269 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_3267.xy, x_3267.z);
        u_xlat52.x = x_3269;
        let x_3272 : f32 = u_xlat21.y;
        let x_3274 : f32 = u_xlat52.x;
        let x_3276 : f32 = u_xlat73;
        u_xlat73 = ((x_3272 * x_3274) + x_3276);
        let x_3279 : vec2<f32> = u_xlat32;
        let x_3281 : f32 = u_xlat6.z;
        txVec53 = vec3<f32>(x_3279.x, x_3279.y, x_3281);
        let x_3288 : vec3<f32> = txVec53;
        let x_3290 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_3288.xy, x_3288.z);
        u_xlat52.x = x_3290;
        let x_3293 : f32 = u_xlat21.z;
        let x_3295 : f32 = u_xlat52.x;
        let x_3297 : f32 = u_xlat73;
        u_xlat73 = ((x_3293 * x_3295) + x_3297);
        let x_3300 : vec2<f32> = u_xlat60;
        let x_3302 : f32 = u_xlat6.z;
        txVec54 = vec3<f32>(x_3300.x, x_3300.y, x_3302);
        let x_3309 : vec3<f32> = txVec54;
        let x_3311 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_3309.xy, x_3309.z);
        u_xlat52.x = x_3311;
        let x_3314 : f32 = u_xlat21.w;
        let x_3316 : f32 = u_xlat52.x;
        let x_3318 : f32 = u_xlat73;
        u_xlat73 = ((x_3314 * x_3316) + x_3318);
        let x_3321 : vec4<f32> = u_xlat13;
        let x_3322 : vec2<f32> = vec2<f32>(x_3321.x, x_3321.y);
        let x_3324 : f32 = u_xlat6.z;
        txVec55 = vec3<f32>(x_3322.x, x_3322.y, x_3324);
        let x_3331 : vec3<f32> = txVec55;
        let x_3333 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_3331.xy, x_3331.z);
        u_xlat52.x = x_3333;
        let x_3336 : f32 = u_xlat9.x;
        let x_3338 : f32 = u_xlat52.x;
        let x_3340 : f32 = u_xlat73;
        u_xlat73 = ((x_3336 * x_3338) + x_3340);
        let x_3343 : vec4<f32> = u_xlat13;
        let x_3344 : vec2<f32> = vec2<f32>(x_3343.z, x_3343.w);
        let x_3346 : f32 = u_xlat6.z;
        txVec56 = vec3<f32>(x_3344.x, x_3344.y, x_3346);
        let x_3353 : vec3<f32> = txVec56;
        let x_3355 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_3353.xy, x_3353.z);
        u_xlat52.x = x_3355;
        let x_3358 : f32 = u_xlat9.y;
        let x_3360 : f32 = u_xlat52.x;
        let x_3362 : f32 = u_xlat73;
        u_xlat73 = ((x_3358 * x_3360) + x_3362);
        let x_3365 : vec2<f32> = u_xlat55;
        let x_3367 : f32 = u_xlat6.z;
        txVec57 = vec3<f32>(x_3365.x, x_3365.y, x_3367);
        let x_3374 : vec3<f32> = txVec57;
        let x_3376 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_3374.xy, x_3374.z);
        u_xlat52.x = x_3376;
        let x_3379 : f32 = u_xlat9.z;
        let x_3381 : f32 = u_xlat52.x;
        let x_3383 : f32 = u_xlat73;
        u_xlat73 = ((x_3379 * x_3381) + x_3383);
        let x_3386 : vec4<f32> = u_xlat8;
        let x_3387 : vec2<f32> = vec2<f32>(x_3386.x, x_3386.y);
        let x_3389 : f32 = u_xlat6.z;
        txVec58 = vec3<f32>(x_3387.x, x_3387.y, x_3389);
        let x_3396 : vec3<f32> = txVec58;
        let x_3398 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_3396.xy, x_3396.z);
        u_xlat8.x = x_3398;
        let x_3401 : f32 = u_xlat9.w;
        let x_3403 : f32 = u_xlat8.x;
        let x_3405 : f32 = u_xlat73;
        u_xlat66 = ((x_3401 * x_3403) + x_3405);
      }
    }
  } else {
    let x_3409 : vec4<f32> = u_xlat6;
    let x_3410 : vec2<f32> = vec2<f32>(x_3409.x, x_3409.y);
    let x_3412 : f32 = u_xlat6.z;
    txVec59 = vec3<f32>(x_3410.x, x_3410.y, x_3412);
    let x_3419 : vec3<f32> = txVec59;
    let x_3421 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_3419.xy, x_3419.z);
    u_xlat66 = x_3421;
  }
  let x_3422 : f32 = u_xlat66;
  let x_3424 : f32 = x_255.x_MainLightShadowParams.x;
  let x_3426 : f32 = u_xlat68;
  u_xlat66 = ((x_3422 * x_3424) + x_3426);
  let x_3428 : bool = u_xlatb70;
  let x_3429 : f32 = u_xlat66;
  u_xlat66 = select(x_3429, 1.0f, x_3428);
  let x_3431 : vec3<f32> = vs_INTERP0;
  let x_3433 : vec3<f32> = x_90.x_WorldSpaceCameraPos;
  let x_3435 : vec3<f32> = (x_3431 + -(x_3433));
  let x_3436 : vec4<f32> = u_xlat6;
  u_xlat6 = vec4<f32>(x_3435.x, x_3435.y, x_3435.z, x_3436.w);
  let x_3438 : vec4<f32> = u_xlat6;
  let x_3440 : vec4<f32> = u_xlat6;
  u_xlat68 = dot(vec3<f32>(x_3438.x, x_3438.y, x_3438.z), vec3<f32>(x_3440.x, x_3440.y, x_3440.z));
  let x_3443 : f32 = u_xlat68;
  let x_3445 : f32 = x_255.x_MainLightShadowParams.z;
  let x_3448 : f32 = x_255.x_MainLightShadowParams.w;
  u_xlat68 = ((x_3443 * x_3445) + x_3448);
  let x_3450 : f32 = u_xlat68;
  u_xlat68 = clamp(x_3450, 0.0f, 1.0f);
  let x_3452 : f32 = u_xlat66;
  u_xlat70 = (-(x_3452) + 1.0f);
  let x_3455 : f32 = u_xlat68;
  let x_3456 : f32 = u_xlat70;
  let x_3458 : f32 = u_xlat66;
  u_xlat66 = ((x_3455 * x_3456) + x_3458);
  let x_3460 : vec2<f32> = u_xlat51;
  let x_3463 : vec4<f32> = x_90.x_MainLightColor;
  let x_3465 : vec3<f32> = (vec3<f32>(x_3460.x, x_3460.x, x_3460.x) * vec3<f32>(x_3463.x, x_3463.y, x_3463.z));
  let x_3466 : vec4<f32> = u_xlat6;
  u_xlat6 = vec4<f32>(x_3465.x, x_3465.y, x_3465.z, x_3466.w);
  let x_3468 : vec3<f32> = u_xlat1;
  let x_3470 : vec4<f32> = u_xlat3;
  u_xlat68 = dot(-(x_3468), vec3<f32>(x_3470.x, x_3470.y, x_3470.z));
  let x_3473 : f32 = u_xlat68;
  let x_3474 : f32 = u_xlat68;
  u_xlat68 = (x_3473 + x_3474);
  let x_3476 : vec4<f32> = u_xlat3;
  let x_3478 : f32 = u_xlat68;
  let x_3482 : vec3<f32> = u_xlat1;
  let x_3484 : vec3<f32> = ((vec3<f32>(x_3476.x, x_3476.y, x_3476.z) * -(vec3<f32>(x_3478, x_3478, x_3478))) + -(x_3482));
  let x_3485 : vec4<f32> = u_xlat8;
  u_xlat8 = vec4<f32>(x_3484.x, x_3484.y, x_3484.z, x_3485.w);
  let x_3487 : vec4<f32> = u_xlat3;
  let x_3489 : vec3<f32> = u_xlat1;
  u_xlat68 = dot(vec3<f32>(x_3487.x, x_3487.y, x_3487.z), x_3489);
  let x_3491 : f32 = u_xlat68;
  u_xlat68 = clamp(x_3491, 0.0f, 1.0f);
  let x_3493 : f32 = u_xlat68;
  u_xlat68 = (-(x_3493) + 1.0f);
  let x_3496 : f32 = u_xlat68;
  let x_3497 : f32 = u_xlat68;
  u_xlat68 = (x_3496 * x_3497);
  let x_3499 : f32 = u_xlat68;
  let x_3500 : f32 = u_xlat68;
  u_xlat68 = (x_3499 * x_3500);
  let x_3502 : f32 = u_xlat46;
  u_xlat70 = ((-(x_3502) * 0.699999988f) + 1.700000048f);
  let x_3508 : f32 = u_xlat46;
  let x_3509 : f32 = u_xlat70;
  u_xlat46 = (x_3508 * x_3509);
  let x_3511 : f32 = u_xlat46;
  u_xlat46 = (x_3511 * 6.0f);
  let x_3522 : vec4<f32> = u_xlat8;
  let x_3524 : f32 = u_xlat46;
  let x_3525 : vec4<f32> = textureSampleLevel(unity_SpecCube0, samplerunity_SpecCube0, vec3<f32>(x_3522.x, x_3522.y, x_3522.z), x_3524);
  u_xlat8 = x_3525;
  let x_3527 : f32 = u_xlat8.w;
  u_xlat46 = (x_3527 + -1.0f);
  let x_3530 : f32 = x_145.unity_SpecCube0_HDR.w;
  let x_3531 : f32 = u_xlat46;
  u_xlat46 = ((x_3530 * x_3531) + 1.0f);
  let x_3534 : f32 = u_xlat46;
  u_xlat46 = max(x_3534, 0.0f);
  let x_3536 : f32 = u_xlat46;
  u_xlat46 = log2(x_3536);
  let x_3538 : f32 = u_xlat46;
  let x_3540 : f32 = x_145.unity_SpecCube0_HDR.y;
  u_xlat46 = (x_3538 * x_3540);
  let x_3542 : f32 = u_xlat46;
  u_xlat46 = exp2(x_3542);
  let x_3544 : f32 = u_xlat46;
  let x_3546 : f32 = x_145.unity_SpecCube0_HDR.x;
  u_xlat46 = (x_3544 * x_3546);
  let x_3548 : vec4<f32> = u_xlat8;
  let x_3550 : f32 = u_xlat46;
  let x_3552 : vec3<f32> = (vec3<f32>(x_3548.x, x_3548.y, x_3548.z) * vec3<f32>(x_3550, x_3550, x_3550));
  let x_3553 : vec4<f32> = u_xlat8;
  u_xlat8 = vec4<f32>(x_3552.x, x_3552.y, x_3552.z, x_3553.w);
  let x_3555 : f32 = u_xlat69;
  let x_3557 : f32 = u_xlat69;
  let x_3561 : vec2<f32> = ((vec2<f32>(x_3555, x_3555) * vec2<f32>(x_3557, x_3557)) + vec2<f32>(-1.0f, 1.0f));
  let x_3562 : vec4<f32> = u_xlat9;
  u_xlat9 = vec4<f32>(x_3561.x, x_3561.y, x_3562.z, x_3562.w);
  let x_3565 : f32 = u_xlat9.y;
  u_xlat46 = (1.0f / x_3565);
  let x_3568 : f32 = u_xlat5.x;
  u_xlat69 = (x_3568 + -0.039999999f);
  let x_3571 : f32 = u_xlat68;
  let x_3572 : f32 = u_xlat69;
  u_xlat68 = ((x_3571 * x_3572) + 0.039999999f);
  let x_3576 : f32 = u_xlat68;
  let x_3577 : f32 = u_xlat46;
  u_xlat46 = (x_3576 * x_3577);
  let x_3579 : f32 = u_xlat46;
  let x_3581 : vec4<f32> = u_xlat8;
  let x_3583 : vec3<f32> = (vec3<f32>(x_3579, x_3579, x_3579) * vec3<f32>(x_3581.x, x_3581.y, x_3581.z));
  let x_3584 : vec4<f32> = u_xlat8;
  u_xlat8 = vec4<f32>(x_3583.x, x_3583.y, x_3583.z, x_3584.w);
  let x_3586 : vec3<f32> = u_xlat27;
  let x_3587 : vec3<f32> = u_xlat4;
  let x_3589 : vec4<f32> = u_xlat8;
  let x_3591 : vec3<f32> = ((x_3586 * x_3587) + vec3<f32>(x_3589.x, x_3589.y, x_3589.z));
  let x_3592 : vec4<f32> = u_xlat5;
  u_xlat5 = vec4<f32>(x_3591.x, x_3591.y, x_3591.z, x_3592.w);
  let x_3594 : f32 = u_xlat66;
  let x_3596 : f32 = x_145.unity_LightData.z;
  u_xlat66 = (x_3594 * x_3596);
  let x_3598 : vec4<f32> = u_xlat3;
  let x_3601 : vec4<f32> = x_90.x_MainLightPosition;
  u_xlat46 = dot(vec3<f32>(x_3598.x, x_3598.y, x_3598.z), vec3<f32>(x_3601.x, x_3601.y, x_3601.z));
  let x_3604 : f32 = u_xlat46;
  u_xlat46 = clamp(x_3604, 0.0f, 1.0f);
  let x_3606 : f32 = u_xlat66;
  let x_3607 : f32 = u_xlat46;
  u_xlat66 = (x_3606 * x_3607);
  let x_3609 : f32 = u_xlat66;
  let x_3611 : vec4<f32> = u_xlat6;
  let x_3613 : vec3<f32> = (vec3<f32>(x_3609, x_3609, x_3609) * vec3<f32>(x_3611.x, x_3611.y, x_3611.z));
  let x_3614 : vec4<f32> = u_xlat6;
  u_xlat6 = vec4<f32>(x_3613.x, x_3613.y, x_3613.z, x_3614.w);
  let x_3616 : vec3<f32> = u_xlat1;
  let x_3618 : vec4<f32> = x_90.x_MainLightPosition;
  let x_3620 : vec3<f32> = (x_3616 + vec3<f32>(x_3618.x, x_3618.y, x_3618.z));
  let x_3621 : vec4<f32> = u_xlat8;
  u_xlat8 = vec4<f32>(x_3620.x, x_3620.y, x_3620.z, x_3621.w);
  let x_3623 : vec4<f32> = u_xlat8;
  let x_3625 : vec4<f32> = u_xlat8;
  u_xlat66 = dot(vec3<f32>(x_3623.x, x_3623.y, x_3623.z), vec3<f32>(x_3625.x, x_3625.y, x_3625.z));
  let x_3628 : f32 = u_xlat66;
  u_xlat66 = max(x_3628, 1.17549435e-37f);
  let x_3631 : f32 = u_xlat66;
  u_xlat66 = inverseSqrt(x_3631);
  let x_3633 : f32 = u_xlat66;
  let x_3635 : vec4<f32> = u_xlat8;
  let x_3637 : vec3<f32> = (vec3<f32>(x_3633, x_3633, x_3633) * vec3<f32>(x_3635.x, x_3635.y, x_3635.z));
  let x_3638 : vec4<f32> = u_xlat8;
  u_xlat8 = vec4<f32>(x_3637.x, x_3637.y, x_3637.z, x_3638.w);
  let x_3640 : vec4<f32> = u_xlat3;
  let x_3642 : vec4<f32> = u_xlat8;
  u_xlat66 = dot(vec3<f32>(x_3640.x, x_3640.y, x_3640.z), vec3<f32>(x_3642.x, x_3642.y, x_3642.z));
  let x_3645 : f32 = u_xlat66;
  u_xlat66 = clamp(x_3645, 0.0f, 1.0f);
  let x_3648 : vec4<f32> = x_90.x_MainLightPosition;
  let x_3650 : vec4<f32> = u_xlat8;
  u_xlat46 = dot(vec3<f32>(x_3648.x, x_3648.y, x_3648.z), vec3<f32>(x_3650.x, x_3650.y, x_3650.z));
  let x_3653 : f32 = u_xlat46;
  u_xlat46 = clamp(x_3653, 0.0f, 1.0f);
  let x_3655 : f32 = u_xlat66;
  let x_3656 : f32 = u_xlat66;
  u_xlat66 = (x_3655 * x_3656);
  let x_3658 : f32 = u_xlat66;
  let x_3660 : f32 = u_xlat9.x;
  u_xlat66 = ((x_3658 * x_3660) + 1.000010014f);
  let x_3664 : f32 = u_xlat46;
  let x_3665 : f32 = u_xlat46;
  u_xlat46 = (x_3664 * x_3665);
  let x_3667 : f32 = u_xlat66;
  let x_3668 : f32 = u_xlat66;
  u_xlat66 = (x_3667 * x_3668);
  let x_3670 : f32 = u_xlat46;
  u_xlat46 = max(x_3670, 0.100000001f);
  let x_3673 : f32 = u_xlat66;
  let x_3674 : f32 = u_xlat46;
  u_xlat66 = (x_3673 * x_3674);
  let x_3676 : f32 = u_xlat29;
  let x_3677 : f32 = u_xlat66;
  u_xlat66 = (x_3676 * x_3677);
  let x_3679 : f32 = u_xlat72;
  let x_3680 : f32 = u_xlat66;
  u_xlat66 = (x_3679 / x_3680);
  let x_3682 : f32 = u_xlat66;
  let x_3686 : vec3<f32> = u_xlat4;
  let x_3687 : vec3<f32> = ((vec3<f32>(x_3682, x_3682, x_3682) * vec3<f32>(0.039999999f, 0.039999999f, 0.039999999f)) + x_3686);
  let x_3688 : vec4<f32> = u_xlat8;
  u_xlat8 = vec4<f32>(x_3687.x, x_3687.y, x_3687.z, x_3688.w);
  let x_3690 : vec4<f32> = u_xlat6;
  let x_3692 : vec4<f32> = u_xlat8;
  let x_3694 : vec3<f32> = (vec3<f32>(x_3690.x, x_3690.y, x_3690.z) * vec3<f32>(x_3692.x, x_3692.y, x_3692.z));
  let x_3695 : vec4<f32> = u_xlat6;
  u_xlat6 = vec4<f32>(x_3694.x, x_3694.y, x_3694.z, x_3695.w);
  let x_3698 : f32 = x_90.x_AdditionalLightsCount.x;
  let x_3700 : f32 = x_145.unity_LightData.y;
  u_xlat66 = min(x_3698, x_3700);
  let x_3702 : f32 = u_xlat66;
  u_xlatu66 = bitcast<u32>(i32(x_3702));
  u_xlat8.x = 0.0f;
  u_xlat8.y = 0.0f;
  u_xlat8.z = 0.0f;
  u_xlatu_loop_1 = 0u;
  loop {
    let x_3714 : u32 = u_xlatu_loop_1;
    let x_3715 : u32 = u_xlatu66;
    if ((x_3714 < x_3715)) {
    } else {
      break;
    }
    let x_3718 : u32 = u_xlatu_loop_1;
    u_xlatu68 = (x_3718 >> 2u);
    let x_3721 : u32 = u_xlatu_loop_1;
    u_xlati69 = bitcast<i32>((x_3721 & 3u));
    let x_3724 : u32 = u_xlatu68;
    let x_3727 : vec4<f32> = x_145.unity_LightIndices[bitcast<i32>(x_3724)];
    let x_3737 : i32 = u_xlati69;
    indexable = array<vec4<u32>, 4u>(vec4<u32>(1065353216u, 0u, 0u, 0u), vec4<u32>(0u, 1065353216u, 0u, 0u), vec4<u32>(0u, 0u, 1065353216u, 0u), vec4<u32>(0u, 0u, 0u, 1065353216u));
    let x_3742 : vec4<u32> = indexable[x_3737];
    u_xlat68 = dot(x_3727, bitcast<vec4<f32>>(x_3742));
    let x_3746 : f32 = u_xlat68;
    u_xlati68 = i32(x_3746);
    let x_3748 : vec3<f32> = vs_INTERP0;
    let x_3760 : i32 = u_xlati68;
    let x_3762 : vec4<f32> = x_3759.x_AdditionalLightsPosition[x_3760];
    let x_3765 : i32 = u_xlati68;
    let x_3767 : vec4<f32> = x_3759.x_AdditionalLightsPosition[x_3765];
    u_xlat31 = ((-(x_3748) * vec3<f32>(x_3762.w, x_3762.w, x_3762.w)) + vec3<f32>(x_3767.x, x_3767.y, x_3767.z));
    let x_3770 : vec3<f32> = u_xlat31;
    let x_3771 : vec3<f32> = u_xlat31;
    u_xlat69 = dot(x_3770, x_3771);
    let x_3773 : f32 = u_xlat69;
    u_xlat69 = max(x_3773, 6.10351562e-05f);
    let x_3776 : f32 = u_xlat69;
    u_xlat70 = inverseSqrt(x_3776);
    let x_3778 : f32 = u_xlat70;
    let x_3780 : vec3<f32> = u_xlat31;
    let x_3781 : vec3<f32> = (vec3<f32>(x_3778, x_3778, x_3778) * x_3780);
    let x_3782 : vec4<f32> = u_xlat10;
    u_xlat10 = vec4<f32>(x_3781.x, x_3781.y, x_3781.z, x_3782.w);
    let x_3785 : f32 = u_xlat69;
    u_xlat71 = (1.0f / x_3785);
    let x_3787 : f32 = u_xlat69;
    let x_3788 : i32 = u_xlati68;
    let x_3790 : f32 = x_3759.x_AdditionalLightsAttenuation[x_3788].x;
    u_xlat69 = (x_3787 * x_3790);
    let x_3792 : f32 = u_xlat69;
    let x_3794 : f32 = u_xlat69;
    u_xlat69 = ((-(x_3792) * x_3794) + 1.0f);
    let x_3797 : f32 = u_xlat69;
    u_xlat69 = max(x_3797, 0.0f);
    let x_3799 : f32 = u_xlat69;
    let x_3800 : f32 = u_xlat69;
    u_xlat69 = (x_3799 * x_3800);
    let x_3802 : f32 = u_xlat69;
    let x_3803 : f32 = u_xlat71;
    u_xlat69 = (x_3802 * x_3803);
    let x_3805 : i32 = u_xlati68;
    let x_3807 : vec4<f32> = x_3759.x_AdditionalLightsSpotDir[x_3805];
    let x_3809 : vec4<f32> = u_xlat10;
    u_xlat71 = dot(vec3<f32>(x_3807.x, x_3807.y, x_3807.z), vec3<f32>(x_3809.x, x_3809.y, x_3809.z));
    let x_3812 : f32 = u_xlat71;
    let x_3813 : i32 = u_xlati68;
    let x_3815 : f32 = x_3759.x_AdditionalLightsAttenuation[x_3813].z;
    let x_3817 : i32 = u_xlati68;
    let x_3819 : f32 = x_3759.x_AdditionalLightsAttenuation[x_3817].w;
    u_xlat71 = ((x_3812 * x_3815) + x_3819);
    let x_3821 : f32 = u_xlat71;
    u_xlat71 = clamp(x_3821, 0.0f, 1.0f);
    let x_3823 : f32 = u_xlat71;
    let x_3824 : f32 = u_xlat71;
    u_xlat71 = (x_3823 * x_3824);
    let x_3826 : f32 = u_xlat69;
    let x_3827 : f32 = u_xlat71;
    u_xlat69 = (x_3826 * x_3827);
    let x_3829 : vec2<f32> = u_xlat51;
    let x_3831 : i32 = u_xlati68;
    let x_3833 : vec4<f32> = x_3759.x_AdditionalLightsColor[x_3831];
    let x_3835 : vec3<f32> = (vec3<f32>(x_3829.x, x_3829.x, x_3829.x) * vec3<f32>(x_3833.x, x_3833.y, x_3833.z));
    let x_3836 : vec4<f32> = u_xlat11;
    u_xlat11 = vec4<f32>(x_3835.x, x_3835.y, x_3835.z, x_3836.w);
    let x_3838 : vec4<f32> = u_xlat3;
    let x_3840 : vec4<f32> = u_xlat10;
    u_xlat68 = dot(vec3<f32>(x_3838.x, x_3838.y, x_3838.z), vec3<f32>(x_3840.x, x_3840.y, x_3840.z));
    let x_3843 : f32 = u_xlat68;
    u_xlat68 = clamp(x_3843, 0.0f, 1.0f);
    let x_3845 : f32 = u_xlat68;
    let x_3846 : f32 = u_xlat69;
    u_xlat68 = (x_3845 * x_3846);
    let x_3848 : f32 = u_xlat68;
    let x_3850 : vec4<f32> = u_xlat11;
    let x_3852 : vec3<f32> = (vec3<f32>(x_3848, x_3848, x_3848) * vec3<f32>(x_3850.x, x_3850.y, x_3850.z));
    let x_3853 : vec4<f32> = u_xlat11;
    u_xlat11 = vec4<f32>(x_3852.x, x_3852.y, x_3852.z, x_3853.w);
    let x_3855 : vec3<f32> = u_xlat31;
    let x_3856 : f32 = u_xlat70;
    let x_3859 : vec3<f32> = u_xlat1;
    u_xlat31 = ((x_3855 * vec3<f32>(x_3856, x_3856, x_3856)) + x_3859);
    let x_3861 : vec3<f32> = u_xlat31;
    let x_3862 : vec3<f32> = u_xlat31;
    u_xlat68 = dot(x_3861, x_3862);
    let x_3864 : f32 = u_xlat68;
    u_xlat68 = max(x_3864, 1.17549435e-37f);
    let x_3866 : f32 = u_xlat68;
    u_xlat68 = inverseSqrt(x_3866);
    let x_3868 : f32 = u_xlat68;
    let x_3870 : vec3<f32> = u_xlat31;
    u_xlat31 = (vec3<f32>(x_3868, x_3868, x_3868) * x_3870);
    let x_3872 : vec4<f32> = u_xlat3;
    let x_3874 : vec3<f32> = u_xlat31;
    u_xlat68 = dot(vec3<f32>(x_3872.x, x_3872.y, x_3872.z), x_3874);
    let x_3876 : f32 = u_xlat68;
    u_xlat68 = clamp(x_3876, 0.0f, 1.0f);
    let x_3878 : vec4<f32> = u_xlat10;
    let x_3880 : vec3<f32> = u_xlat31;
    u_xlat69 = dot(vec3<f32>(x_3878.x, x_3878.y, x_3878.z), x_3880);
    let x_3882 : f32 = u_xlat69;
    u_xlat69 = clamp(x_3882, 0.0f, 1.0f);
    let x_3884 : f32 = u_xlat68;
    let x_3885 : f32 = u_xlat68;
    u_xlat68 = (x_3884 * x_3885);
    let x_3887 : f32 = u_xlat68;
    let x_3889 : f32 = u_xlat9.x;
    u_xlat68 = ((x_3887 * x_3889) + 1.000010014f);
    let x_3892 : f32 = u_xlat69;
    let x_3893 : f32 = u_xlat69;
    u_xlat69 = (x_3892 * x_3893);
    let x_3895 : f32 = u_xlat68;
    let x_3896 : f32 = u_xlat68;
    u_xlat68 = (x_3895 * x_3896);
    let x_3898 : f32 = u_xlat69;
    u_xlat69 = max(x_3898, 0.100000001f);
    let x_3900 : f32 = u_xlat68;
    let x_3901 : f32 = u_xlat69;
    u_xlat68 = (x_3900 * x_3901);
    let x_3903 : f32 = u_xlat29;
    let x_3904 : f32 = u_xlat68;
    u_xlat68 = (x_3903 * x_3904);
    let x_3906 : f32 = u_xlat72;
    let x_3907 : f32 = u_xlat68;
    u_xlat68 = (x_3906 / x_3907);
    let x_3909 : f32 = u_xlat68;
    let x_3912 : vec3<f32> = u_xlat4;
    u_xlat31 = ((vec3<f32>(x_3909, x_3909, x_3909) * vec3<f32>(0.039999999f, 0.039999999f, 0.039999999f)) + x_3912);
    let x_3914 : vec3<f32> = u_xlat31;
    let x_3915 : vec4<f32> = u_xlat11;
    let x_3918 : vec4<f32> = u_xlat8;
    let x_3920 : vec3<f32> = ((x_3914 * vec3<f32>(x_3915.x, x_3915.y, x_3915.z)) + vec3<f32>(x_3918.x, x_3918.y, x_3918.z));
    let x_3921 : vec4<f32> = u_xlat8;
    u_xlat8 = vec4<f32>(x_3920.x, x_3920.y, x_3920.z, x_3921.w);

    continuing {
      let x_3923 : u32 = u_xlatu_loop_1;
      u_xlatu_loop_1 = (x_3923 + bitcast<u32>(1i));
    }
  }
  let x_3925 : vec4<f32> = u_xlat5;
  let x_3927 : vec4<f32> = u_xlat7;
  let x_3930 : vec4<f32> = u_xlat6;
  u_xlat1 = ((vec3<f32>(x_3925.x, x_3925.y, x_3925.z) * vec3<f32>(x_3927.x, x_3927.x, x_3927.x)) + vec3<f32>(x_3930.x, x_3930.y, x_3930.z));
  let x_3933 : vec4<f32> = u_xlat8;
  let x_3935 : vec3<f32> = u_xlat1;
  u_xlat1 = (vec3<f32>(x_3933.x, x_3933.y, x_3933.z) + x_3935);
  let x_3937 : vec4<f32> = vs_INTERP4;
  let x_3939 : vec3<f32> = u_xlat0;
  let x_3941 : vec3<f32> = u_xlat1;
  u_xlat0 = ((vec3<f32>(x_3937.w, x_3937.w, x_3937.w) * x_3939) + x_3941);
  let x_3944 : f32 = u_xlat24.x;
  let x_3946 : f32 = u_xlat24.x;
  u_xlat66 = (x_3944 * -(x_3946));
  let x_3949 : f32 = u_xlat66;
  u_xlat66 = exp2(x_3949);
  let x_3951 : vec3<f32> = u_xlat0;
  let x_3954 : vec4<f32> = x_90.unity_FogColor;
  u_xlat0 = (x_3951 + -(vec3<f32>(x_3954.x, x_3954.y, x_3954.z)));
  let x_3960 : f32 = u_xlat66;
  let x_3962 : vec3<f32> = u_xlat0;
  let x_3965 : vec4<f32> = x_90.unity_FogColor;
  let x_3967 : vec3<f32> = ((vec3<f32>(x_3960, x_3960, x_3960) * x_3962) + vec3<f32>(x_3965.x, x_3965.y, x_3965.z));
  let x_3968 : vec4<f32> = SV_Target0;
  SV_Target0 = vec4<f32>(x_3967.x, x_3967.y, x_3967.z, x_3968.w);
  let x_3970 : bool = u_xlatb2;
  let x_3971 : f32 = u_xlat67;
  SV_Target0.w = select(1.0f, x_3971, x_3970);
  let x_3978 : u32 = x_90.x_RenderingLayerMaxInt;
  let x_3980 : f32 = x_145.unity_RenderingLayer.x;
  u_xlatu0 = (x_3978 & bitcast<u32>(x_3980));
  let x_3983 : u32 = u_xlatu0;
  u_xlat0.x = f32(x_3983);
  let x_3988 : f32 = u_xlat0.x;
  let x_3990 : f32 = x_90.x_RenderingLayerRcpMaxInt;
  SV_Target1.x = (x_3988 * x_3990);
  let x_3994 : f32 = SV_Target1.x;
  SV_Target1.x = clamp(x_3994, 0.0f, 1.0f);
  let x_3997 : vec4<f32> = SV_Target1;
  SV_Target1 = vec4<f32>(x_3997.x, vec3<f32>(0.0f, 0.0f, 0.0f).x, vec3<f32>(0.0f, 0.0f, 0.0f).y, vec3<f32>(0.0f, 0.0f, 0.0f).z);
  return;
}

struct main_out {
  @location(0)
  SV_Target0_1 : vec4<f32>,
  @location(1)
  SV_Target1_1 : vec4<f32>,
}

@fragment
fn main(@builtin(position) gl_FragCoord_param : vec4<f32>, @location(1) vs_INTERP1_param : vec3<f32>, @location(0) vs_INTERP0_param : vec3<f32>, @location(3) vs_INTERP3_param : vec4<f32>, @location(4) vs_INTERP4_param : vec4<f32>, @location(2) vs_INTERP2_param : vec4<f32>, @location(5) vs_INTERP5_param : vec2<f32>) -> main_out {
  gl_FragCoord = gl_FragCoord_param;
  vs_INTERP1 = vs_INTERP1_param;
  vs_INTERP0 = vs_INTERP0_param;
  vs_INTERP3 = vs_INTERP3_param;
  vs_INTERP4 = vs_INTERP4_param;
  vs_INTERP2 = vs_INTERP2_param;
  vs_INTERP5 = vs_INTERP5_param;
  main_1();
  return main_out(SV_Target0, SV_Target1);
}

