type Arr = array<vec4<f32>, 2u>;

type Arr_1 = array<mat4x4<f32>, 2u>;

type Arr_2 = array<vec4<f32>, 2u>;

type Arr_3 = array<vec4<f32>, 2u>;

struct PGlobals {
  x_ScaledScreenParams : vec4<f32>,
  x_GlobalMipBias : vec2<f32>,
  @size(8)
  padding : u32,
  x_ZBufferParams : vec4<f32>,
  unity_MatrixV : mat4x4<f32>,
  x_SSAOParams : vec4<f32>,
  x_CameraViewTopLeftCorner : Arr_3,
  x_CameraViewProjections : Arr_1,
  x_ProjectionParams2 : vec4<f32>,
  x_CameraViewXExtent : Arr_3,
  x_CameraViewYExtent : Arr_3,
}

@group(0) @binding(0) var x_CameraDepthTexture : texture_2d<f32>;

@group(0) @binding(2) var sampler_CameraDepthTexture : sampler;

var<private> vs_TEXCOORD0 : vec2<f32>;

@group(1) @binding(0) var<uniform> x_33 : PGlobals;

var<private> SV_Target0 : vec4<f32>;

@group(0) @binding(1) var x_CameraNormalsTexture : texture_2d<f32>;

@group(0) @binding(3) var sampler_CameraNormalsTexture : sampler;

var<private> gl_FragCoord : vec4<f32>;

fn main_1() {
  var u_xlat0 : f32;
  var u_xlatb8 : bool;
  var u_xlat8 : vec3<f32>;
  var u_xlat1 : vec4<f32>;
  var u_xlat9 : f32;
  var u_xlat2 : vec4<f32>;
  var u_xlat18 : vec2<f32>;
  var u_xlat25 : f32;
  var u_xlat3 : vec4<f32>;
  var u_xlat4 : vec3<f32>;
  var u_xlat5 : vec3<f32>;
  var u_xlatb25 : bool;
  var x_234 : vec3<f32>;
  var u_xlat11 : vec3<f32>;
  var u_xlatb3 : vec2<bool>;
  var u_xlat26 : f32;
  var u_xlat6 : f32;
  var u_xlat7 : f32;
  var u_xlatb26 : bool;
  var x_512 : vec3<f32>;
  var u_xlat28 : f32;
  var u_xlatb28 : bool;
  var u_xlatb18 : bool;
  var x_784 : vec3<f32>;
  var u_xlat19 : f32;
  var u_xlat10 : vec2<f32>;
  var u_xlatb2 : vec4<bool>;
  var x_1068 : vec3<f32>;
  var u_xlat_precise_vec4 : vec4<f32>;
  var u_xlat_precise_ivec4 : vec4<i32>;
  var u_xlat_precise_bvec4 : vec4<bool>;
  var u_xlat_precise_uvec4 : vec4<u32>;
  let x_22 : vec2<f32> = vs_TEXCOORD0;
  let x_39 : f32 = x_33.x_GlobalMipBias.x;
  let x_40 : vec4<f32> = textureSampleBias(x_CameraDepthTexture, sampler_CameraDepthTexture, x_22, x_39);
  u_xlat0 = x_40.x;
  let x_45 : f32 = u_xlat0;
  u_xlatb8 = (x_45 < 0.00001f);
  let x_48 : bool = u_xlatb8;
  if (x_48) {
    SV_Target0 = vec4<f32>(0.0f, 0.5f, 0.5f, 0.5f);
    return;
  }
  let x_59 : f32 = x_33.x_ZBufferParams.z;
  let x_60 : f32 = u_xlat0;
  let x_64 : f32 = x_33.x_ZBufferParams.w;
  u_xlat0 = ((x_59 * x_60) + x_64);
  let x_67 : f32 = u_xlat0;
  u_xlat0 = (1.0f / x_67);
  let x_71 : f32 = x_33.x_SSAOParams.w;
  let x_72 : f32 = u_xlat0;
  u_xlatb8 = (x_71 < x_72);
  let x_74 : bool = u_xlatb8;
  if (x_74) {
    SV_Target0 = vec4<f32>(0.0f, 0.5f, 0.5f, 0.5f);
    return;
  }
  let x_86 : vec2<f32> = vs_TEXCOORD0;
  let x_88 : f32 = x_33.x_GlobalMipBias.x;
  let x_89 : vec4<f32> = textureSampleBias(x_CameraNormalsTexture, sampler_CameraNormalsTexture, x_86, x_88);
  u_xlat8 = vec3<f32>(x_89.x, x_89.y, x_89.z);
  let x_96 : f32 = vs_TEXCOORD0.y;
  u_xlat1.x = (-(x_96) + 1.0f);
  let x_101 : f32 = u_xlat0;
  let x_104 : f32 = x_33.x_ProjectionParams2.x;
  u_xlat9 = (x_101 * x_104);
  let x_111 : vec4<f32> = x_33.x_CameraViewXExtent[0i];
  let x_113 : vec2<f32> = vs_TEXCOORD0;
  let x_118 : vec4<f32> = x_33.x_CameraViewTopLeftCorner[0i];
  let x_120 : vec3<f32> = ((vec3<f32>(x_111.x, x_111.y, x_111.z) * vec3<f32>(x_113.x, x_113.x, x_113.x)) + vec3<f32>(x_118.x, x_118.y, x_118.z));
  let x_121 : vec4<f32> = u_xlat2;
  u_xlat2 = vec4<f32>(x_120.x, x_120.y, x_120.z, x_121.w);
  let x_125 : vec4<f32> = x_33.x_CameraViewYExtent[0i];
  let x_127 : vec4<f32> = u_xlat1;
  let x_130 : vec4<f32> = u_xlat2;
  let x_132 : vec3<f32> = ((vec3<f32>(x_125.x, x_125.y, x_125.z) * vec3<f32>(x_127.x, x_127.x, x_127.x)) + vec3<f32>(x_130.x, x_130.y, x_130.z));
  let x_133 : vec4<f32> = u_xlat1;
  u_xlat1 = vec4<f32>(x_132.x, x_133.y, x_132.y, x_132.z);
  let x_135 : f32 = u_xlat9;
  let x_137 : vec4<f32> = u_xlat1;
  let x_139 : vec3<f32> = (vec3<f32>(x_135, x_135, x_135) * vec3<f32>(x_137.x, x_137.z, x_137.w));
  let x_140 : vec4<f32> = u_xlat1;
  u_xlat1 = vec4<f32>(x_139.x, x_139.y, x_139.z, x_140.w);
  let x_142 : vec2<f32> = vs_TEXCOORD0;
  let x_144 : vec4<f32> = x_33.x_ScaledScreenParams;
  let x_146 : vec2<f32> = (x_142 * vec2<f32>(x_144.x, x_144.y));
  let x_147 : vec4<f32> = u_xlat2;
  u_xlat2 = vec4<f32>(x_146.x, x_146.y, x_147.z, x_147.w);
  let x_151 : vec4<f32> = u_xlat2;
  let x_154 : vec4<f32> = x_33.x_SSAOParams;
  u_xlat18 = (vec2<f32>(x_151.x, x_151.y) * vec2<f32>(x_154.z, x_154.z));
  let x_158 : vec2<f32> = u_xlat18;
  u_xlat25 = dot(x_158, vec2<f32>(0.067110561f, 0.00583715f));
  let x_163 : f32 = u_xlat25;
  u_xlat25 = fract(x_163);
  let x_165 : f32 = u_xlat25;
  u_xlat25 = (x_165 * 52.982917786f);
  let x_168 : f32 = u_xlat25;
  u_xlat25 = fract(x_168);
  let x_170 : f32 = u_xlat25;
  u_xlat18.x = fract(x_170);
  let x_175 : f32 = u_xlat18.x;
  u_xlat3.z = ((x_175 * 2.0f) + -1.0f);
  let x_181 : f32 = u_xlat25;
  u_xlat25 = (x_181 + 0.9296875f);
  let x_184 : f32 = u_xlat25;
  u_xlat25 = (x_184 * 6.283185482f);
  let x_188 : f32 = u_xlat3.z;
  let x_191 : f32 = u_xlat3.z;
  u_xlat18.x = ((-(x_188) * x_191) + 1.0f);
  let x_196 : f32 = u_xlat18.x;
  u_xlat18.x = sqrt(x_196);
  let x_200 : f32 = u_xlat25;
  u_xlat4.x = sin(x_200);
  let x_204 : f32 = u_xlat25;
  u_xlat5.x = cos(x_204);
  let x_208 : f32 = u_xlat18.x;
  let x_210 : f32 = u_xlat5.x;
  u_xlat3.x = (x_208 * x_210);
  let x_214 : f32 = u_xlat18.x;
  let x_216 : f32 = u_xlat4.x;
  u_xlat3.y = (x_214 * x_216);
  let x_219 : vec4<f32> = u_xlat3;
  let x_222 : vec3<f32> = (vec3<f32>(x_219.x, x_219.y, x_219.z) * vec3<f32>(0.5f, 0.5f, 0.5f));
  let x_223 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_222.x, x_222.y, x_222.z, x_223.w);
  let x_225 : vec3<f32> = u_xlat8;
  let x_227 : vec4<f32> = u_xlat3;
  u_xlat25 = dot(-(x_225), vec3<f32>(x_227.x, x_227.y, x_227.z));
  let x_231 : f32 = u_xlat25;
  u_xlatb25 = (x_231 >= 0.0f);
  let x_233 : bool = u_xlatb25;
  if (x_233) {
    let x_237 : vec4<f32> = u_xlat3;
    x_234 = -(vec3<f32>(x_237.x, x_237.y, x_237.z));
  } else {
    let x_241 : vec4<f32> = u_xlat3;
    x_234 = vec3<f32>(x_241.x, x_241.y, x_241.z);
  }
  let x_243 : vec3<f32> = x_234;
  let x_244 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_243.x, x_243.y, x_243.z, x_244.w);
  let x_246 : vec4<f32> = u_xlat3;
  let x_249 : vec4<f32> = x_33.x_SSAOParams;
  let x_252 : vec4<f32> = u_xlat1;
  let x_254 : vec3<f32> = ((vec3<f32>(x_246.x, x_246.y, x_246.z) * vec3<f32>(x_249.y, x_249.y, x_249.y)) + vec3<f32>(x_252.x, x_252.y, x_252.z));
  let x_255 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_254.x, x_254.y, x_254.z, x_255.w);
  let x_257 : vec4<f32> = u_xlat3;
  let x_261 : vec4<f32> = x_33.x_CameraViewProjections[0i][1i];
  u_xlat18 = (vec2<f32>(x_257.y, x_257.y) * vec2<f32>(x_261.x, x_261.y));
  let x_265 : vec4<f32> = x_33.x_CameraViewProjections[0i][0i];
  let x_267 : vec4<f32> = u_xlat3;
  let x_270 : vec2<f32> = u_xlat18;
  u_xlat18 = ((vec2<f32>(x_265.x, x_265.y) * vec2<f32>(x_267.x, x_267.x)) + x_270);
  let x_273 : vec4<f32> = x_33.x_CameraViewProjections[0i][2i];
  let x_275 : vec4<f32> = u_xlat3;
  let x_278 : vec2<f32> = u_xlat18;
  u_xlat18 = ((vec2<f32>(x_273.x, x_273.y) * vec2<f32>(x_275.z, x_275.z)) + x_278);
  let x_282 : f32 = x_33.unity_MatrixV[0i].z;
  u_xlat4.x = x_282;
  let x_285 : f32 = x_33.unity_MatrixV[1i].z;
  u_xlat4.y = x_285;
  let x_288 : f32 = x_33.unity_MatrixV[2i].z;
  u_xlat4.z = x_288;
  let x_290 : vec3<f32> = u_xlat4;
  let x_291 : vec4<f32> = u_xlat3;
  u_xlat25 = dot(x_290, vec3<f32>(x_291.x, x_291.y, x_291.z));
  let x_294 : f32 = u_xlat25;
  u_xlat3.x = (1.0f / -(x_294));
  let x_298 : vec2<f32> = u_xlat18;
  let x_299 : vec4<f32> = u_xlat3;
  u_xlat18 = ((x_298 * vec2<f32>(x_299.x, x_299.x)) + vec2<f32>(1.0f, 1.0f));
  let x_304 : vec2<f32> = u_xlat18;
  u_xlat18 = (x_304 * vec2<f32>(0.5f, 0.5f));
  let x_307 : vec2<f32> = u_xlat18;
  u_xlat18 = clamp(x_307, vec2<f32>(0.0f, 0.0f), vec2<f32>(1.0f, 1.0f));
  let x_314 : vec2<f32> = u_xlat18;
  let x_316 : f32 = x_33.x_GlobalMipBias.x;
  let x_317 : vec4<f32> = textureSampleBias(x_CameraDepthTexture, sampler_CameraDepthTexture, x_314, x_316);
  u_xlat3.x = x_317.x;
  let x_322 : f32 = x_33.x_ZBufferParams.z;
  let x_324 : f32 = u_xlat3.x;
  let x_327 : f32 = x_33.x_ZBufferParams.w;
  u_xlat11.x = ((x_322 * x_324) + x_327);
  let x_331 : f32 = u_xlat11.x;
  u_xlat11.x = (1.0f / x_331);
  let x_334 : f32 = u_xlat25;
  let x_337 : f32 = u_xlat11.x;
  u_xlat25 = (-(x_334) + -(x_337));
  let x_340 : f32 = u_xlat25;
  let x_343 : f32 = x_33.x_SSAOParams.y;
  u_xlatb25 = (abs(x_340) < x_343);
  let x_345 : bool = u_xlatb25;
  u_xlat25 = select(0.0f, 1.0f, x_345);
  let x_351 : f32 = u_xlat3.x;
  u_xlatb3.x = (0.00001f < x_351);
  let x_355 : bool = u_xlatb3.x;
  u_xlat3.x = select(0.0f, 1.0f, x_355);
  let x_358 : f32 = u_xlat25;
  let x_360 : f32 = u_xlat3.x;
  u_xlat25 = (x_358 * x_360);
  let x_364 : f32 = u_xlat18.y;
  u_xlat26 = (-(x_364) + 1.0f);
  let x_368 : f32 = u_xlat11.x;
  let x_370 : f32 = x_33.x_ProjectionParams2.x;
  u_xlat3.x = (x_368 * x_370);
  let x_374 : vec4<f32> = x_33.x_CameraViewXExtent[0i];
  let x_376 : vec2<f32> = u_xlat18;
  let x_380 : vec4<f32> = x_33.x_CameraViewTopLeftCorner[0i];
  u_xlat11 = ((vec3<f32>(x_374.x, x_374.y, x_374.z) * vec3<f32>(x_376.x, x_376.x, x_376.x)) + vec3<f32>(x_380.x, x_380.y, x_380.z));
  let x_384 : vec4<f32> = x_33.x_CameraViewYExtent[0i];
  let x_386 : f32 = u_xlat26;
  let x_389 : vec3<f32> = u_xlat11;
  u_xlat11 = ((vec3<f32>(x_384.x, x_384.y, x_384.z) * vec3<f32>(x_386, x_386, x_386)) + x_389);
  let x_391 : vec3<f32> = u_xlat11;
  let x_392 : vec4<f32> = u_xlat3;
  let x_395 : vec4<f32> = u_xlat1;
  let x_398 : vec3<f32> = ((x_391 * vec3<f32>(x_392.x, x_392.x, x_392.x)) + -(vec3<f32>(x_395.x, x_395.y, x_395.z)));
  let x_399 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_398.x, x_398.y, x_398.z, x_399.w);
  let x_401 : vec4<f32> = u_xlat3;
  let x_403 : vec3<f32> = u_xlat8;
  u_xlat18.x = dot(vec3<f32>(x_401.x, x_401.y, x_401.z), x_403);
  let x_406 : f32 = u_xlat0;
  let x_411 : f32 = u_xlat18.x;
  u_xlat18.x = ((-(x_406) * 0.004f) + x_411);
  let x_415 : f32 = u_xlat18.x;
  u_xlat18.x = max(x_415, 0.0f);
  let x_418 : vec4<f32> = u_xlat3;
  let x_420 : vec4<f32> = u_xlat3;
  u_xlat26 = dot(vec3<f32>(x_418.x, x_418.y, x_418.z), vec3<f32>(x_420.x, x_420.y, x_420.z));
  let x_423 : f32 = u_xlat26;
  u_xlat26 = (x_423 + 0.0001f);
  let x_426 : f32 = u_xlat26;
  u_xlat26 = (1.0f / x_426);
  let x_428 : f32 = u_xlat26;
  let x_430 : f32 = u_xlat18.x;
  u_xlat18.x = (x_428 * x_430);
  let x_433 : vec4<f32> = u_xlat2;
  let x_436 : vec4<f32> = x_33.x_SSAOParams;
  u_xlat3 = ((vec4<f32>(x_433.x, x_433.y, x_433.x, x_433.y) * vec4<f32>(x_436.z, x_436.z, x_436.z, x_436.z)) + vec4<f32>(2.082999945f, 4.867000103f, 4.165999889f, 9.734000206f));
  let x_445 : vec4<f32> = u_xlat3;
  u_xlat26 = dot(vec2<f32>(x_445.x, x_445.y), vec2<f32>(0.067110561f, 0.00583715f));
  let x_448 : f32 = u_xlat26;
  u_xlat26 = fract(x_448);
  let x_450 : f32 = u_xlat26;
  u_xlat26 = (x_450 * 52.982917786f);
  let x_452 : f32 = u_xlat26;
  u_xlat26 = fract(x_452);
  let x_454 : f32 = u_xlat26;
  let x_459 : vec2<f32> = (vec2<f32>(x_454, x_454) + vec2<f32>(0.33984375f, 0.76171875f));
  let x_460 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_459.x, x_459.y, x_460.z, x_460.w);
  let x_463 : f32 = u_xlat3.x;
  u_xlat26 = fract(x_463);
  let x_465 : f32 = u_xlat26;
  u_xlat5.z = ((x_465 * 2.0f) + -1.0f);
  let x_470 : f32 = u_xlat3.y;
  u_xlat26 = (x_470 * 6.283185482f);
  let x_473 : f32 = u_xlat5.z;
  let x_476 : f32 = u_xlat5.z;
  u_xlat3.x = ((-(x_473) * x_476) + 1.0f);
  let x_481 : f32 = u_xlat3.x;
  u_xlat3.x = sqrt(x_481);
  let x_485 : f32 = u_xlat26;
  u_xlat6 = sin(x_485);
  let x_488 : f32 = u_xlat26;
  u_xlat7 = cos(x_488);
  let x_491 : f32 = u_xlat3.x;
  let x_492 : f32 = u_xlat7;
  u_xlat5.x = (x_491 * x_492);
  let x_496 : f32 = u_xlat3.x;
  let x_497 : f32 = u_xlat6;
  u_xlat5.y = (x_496 * x_497);
  let x_500 : vec3<f32> = u_xlat5;
  u_xlat5 = (x_500 * vec3<f32>(0.707106769f, 0.707106769f, 0.707106769f));
  let x_504 : vec3<f32> = u_xlat8;
  let x_506 : vec3<f32> = u_xlat5;
  u_xlat26 = dot(-(x_504), x_506);
  let x_509 : f32 = u_xlat26;
  u_xlatb26 = (x_509 >= 0.0f);
  let x_511 : bool = u_xlatb26;
  if (x_511) {
    let x_515 : vec3<f32> = u_xlat5;
    x_512 = -(x_515);
  } else {
    let x_518 : vec3<f32> = u_xlat5;
    x_512 = x_518;
  }
  let x_519 : vec3<f32> = x_512;
  u_xlat5 = x_519;
  let x_520 : vec3<f32> = u_xlat5;
  let x_522 : vec4<f32> = x_33.x_SSAOParams;
  let x_525 : vec4<f32> = u_xlat1;
  u_xlat5 = ((x_520 * vec3<f32>(x_522.y, x_522.y, x_522.y)) + vec3<f32>(x_525.x, x_525.y, x_525.z));
  let x_528 : vec3<f32> = u_xlat5;
  let x_531 : vec4<f32> = x_33.x_CameraViewProjections[0i][1i];
  let x_533 : vec2<f32> = (vec2<f32>(x_528.y, x_528.y) * vec2<f32>(x_531.x, x_531.y));
  let x_534 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_533.x, x_533.y, x_534.z, x_534.w);
  let x_537 : vec4<f32> = x_33.x_CameraViewProjections[0i][0i];
  let x_539 : vec3<f32> = u_xlat5;
  let x_542 : vec4<f32> = u_xlat3;
  let x_544 : vec2<f32> = ((vec2<f32>(x_537.x, x_537.y) * vec2<f32>(x_539.x, x_539.x)) + vec2<f32>(x_542.x, x_542.y));
  let x_545 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_544.x, x_544.y, x_545.z, x_545.w);
  let x_548 : vec4<f32> = x_33.x_CameraViewProjections[0i][2i];
  let x_550 : vec3<f32> = u_xlat5;
  let x_553 : vec4<f32> = u_xlat3;
  let x_555 : vec2<f32> = ((vec2<f32>(x_548.x, x_548.y) * vec2<f32>(x_550.z, x_550.z)) + vec2<f32>(x_553.x, x_553.y));
  let x_556 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_555.x, x_555.y, x_556.z, x_556.w);
  let x_558 : vec3<f32> = u_xlat4;
  let x_559 : vec3<f32> = u_xlat5;
  u_xlat26 = dot(x_558, x_559);
  let x_562 : f32 = u_xlat26;
  u_xlat28 = (1.0f / -(x_562));
  let x_565 : vec4<f32> = u_xlat3;
  let x_567 : f32 = u_xlat28;
  let x_570 : vec2<f32> = ((vec2<f32>(x_565.x, x_565.y) * vec2<f32>(x_567, x_567)) + vec2<f32>(1.0f, 1.0f));
  let x_571 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_570.x, x_570.y, x_571.z, x_571.w);
  let x_573 : vec4<f32> = u_xlat3;
  let x_575 : vec2<f32> = (vec2<f32>(x_573.x, x_573.y) * vec2<f32>(0.5f, 0.5f));
  let x_576 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_575.x, x_575.y, x_576.z, x_576.w);
  let x_578 : vec4<f32> = u_xlat3;
  let x_582 : vec2<f32> = clamp(vec2<f32>(x_578.x, x_578.y), vec2<f32>(0.0f, 0.0f), vec2<f32>(1.0f, 1.0f));
  let x_583 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_582.x, x_582.y, x_583.z, x_583.w);
  let x_588 : vec4<f32> = u_xlat3;
  let x_591 : f32 = x_33.x_GlobalMipBias.x;
  let x_592 : vec4<f32> = textureSampleBias(x_CameraDepthTexture, sampler_CameraDepthTexture, vec2<f32>(x_588.x, x_588.y), x_591);
  u_xlat28 = x_592.x;
  let x_595 : f32 = x_33.x_ZBufferParams.z;
  let x_596 : f32 = u_xlat28;
  let x_599 : f32 = x_33.x_ZBufferParams.w;
  u_xlat5.x = ((x_595 * x_596) + x_599);
  let x_603 : f32 = u_xlat5.x;
  u_xlat5.x = (1.0f / x_603);
  let x_606 : f32 = u_xlat26;
  let x_609 : f32 = u_xlat5.x;
  u_xlat26 = (-(x_606) + -(x_609));
  let x_612 : f32 = u_xlat26;
  let x_615 : f32 = x_33.x_SSAOParams.y;
  u_xlatb26 = (abs(x_612) < x_615);
  let x_617 : bool = u_xlatb26;
  u_xlat26 = select(0.0f, 1.0f, x_617);
  let x_620 : f32 = u_xlat28;
  u_xlatb28 = (0.00001f < x_620);
  let x_622 : bool = u_xlatb28;
  u_xlat28 = select(0.0f, 1.0f, x_622);
  let x_624 : f32 = u_xlat26;
  let x_625 : f32 = u_xlat28;
  u_xlat26 = (x_624 * x_625);
  let x_628 : f32 = u_xlat3.y;
  u_xlat11.x = (-(x_628) + 1.0f);
  let x_633 : f32 = u_xlat5.x;
  let x_635 : f32 = x_33.x_ProjectionParams2.x;
  u_xlat28 = (x_633 * x_635);
  let x_638 : vec4<f32> = x_33.x_CameraViewXExtent[0i];
  let x_640 : vec4<f32> = u_xlat3;
  let x_644 : vec4<f32> = x_33.x_CameraViewTopLeftCorner[0i];
  u_xlat5 = ((vec3<f32>(x_638.x, x_638.y, x_638.z) * vec3<f32>(x_640.x, x_640.x, x_640.x)) + vec3<f32>(x_644.x, x_644.y, x_644.z));
  let x_648 : vec4<f32> = x_33.x_CameraViewYExtent[0i];
  let x_650 : vec3<f32> = u_xlat11;
  let x_653 : vec3<f32> = u_xlat5;
  u_xlat5 = ((vec3<f32>(x_648.x, x_648.y, x_648.z) * vec3<f32>(x_650.x, x_650.x, x_650.x)) + x_653);
  let x_655 : vec3<f32> = u_xlat5;
  let x_656 : f32 = u_xlat28;
  let x_659 : vec4<f32> = u_xlat1;
  u_xlat5 = ((x_655 * vec3<f32>(x_656, x_656, x_656)) + -(vec3<f32>(x_659.x, x_659.y, x_659.z)));
  let x_663 : vec3<f32> = u_xlat5;
  let x_664 : vec3<f32> = u_xlat8;
  u_xlat3.x = dot(x_663, x_664);
  let x_667 : f32 = u_xlat0;
  let x_671 : f32 = u_xlat3.x;
  u_xlat3.x = ((-(x_667) * 0.004f) + x_671);
  let x_675 : f32 = u_xlat3.x;
  u_xlat3.x = max(x_675, 0.0f);
  let x_678 : vec3<f32> = u_xlat5;
  let x_679 : vec3<f32> = u_xlat5;
  u_xlat11.x = dot(x_678, x_679);
  let x_683 : f32 = u_xlat11.x;
  u_xlat11.x = (x_683 + 0.0001f);
  let x_687 : f32 = u_xlat11.x;
  u_xlat11.x = (1.0f / x_687);
  let x_691 : f32 = u_xlat11.x;
  let x_693 : f32 = u_xlat3.x;
  u_xlat3.x = (x_691 * x_693);
  let x_696 : f32 = u_xlat26;
  let x_698 : f32 = u_xlat3.x;
  u_xlat26 = (x_696 * x_698);
  let x_701 : f32 = u_xlat18.x;
  let x_702 : f32 = u_xlat25;
  let x_704 : f32 = u_xlat26;
  u_xlat25 = ((x_701 * x_702) + x_704);
  let x_706 : vec4<f32> = u_xlat3;
  u_xlat18.x = dot(vec2<f32>(x_706.z, x_706.w), vec2<f32>(0.067110561f, 0.00583715f));
  let x_711 : f32 = u_xlat18.x;
  u_xlat18.x = fract(x_711);
  let x_715 : f32 = u_xlat18.x;
  u_xlat18.x = (x_715 * 52.982917786f);
  let x_719 : f32 = u_xlat18.x;
  u_xlat18.x = fract(x_719);
  let x_722 : vec2<f32> = u_xlat18;
  u_xlat18 = (vec2<f32>(x_722.x, x_722.x) + vec2<f32>(0.75390625f, 0.133333296f));
  let x_729 : f32 = u_xlat18.x;
  u_xlat18.x = fract(x_729);
  let x_733 : f32 = u_xlat18.x;
  u_xlat3.z = ((x_733 * 2.0f) + -1.0f);
  let x_738 : f32 = u_xlat18.y;
  u_xlat18.x = (x_738 * 6.283185482f);
  let x_742 : f32 = u_xlat3.z;
  let x_745 : f32 = u_xlat3.z;
  u_xlat26 = ((-(x_742) * x_745) + 1.0f);
  let x_748 : f32 = u_xlat26;
  u_xlat26 = sqrt(x_748);
  let x_751 : f32 = u_xlat18.x;
  u_xlat5.x = sin(x_751);
  let x_755 : f32 = u_xlat18.x;
  u_xlat6 = cos(x_755);
  let x_757 : f32 = u_xlat26;
  let x_758 : f32 = u_xlat6;
  u_xlat3.x = (x_757 * x_758);
  let x_761 : f32 = u_xlat26;
  let x_763 : f32 = u_xlat5.x;
  u_xlat3.y = (x_761 * x_763);
  let x_766 : vec4<f32> = u_xlat3;
  let x_770 : vec3<f32> = (vec3<f32>(x_766.x, x_766.y, x_766.z) * vec3<f32>(0.866025388f, 0.866025388f, 0.866025388f));
  let x_771 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_770.x, x_770.y, x_770.z, x_771.w);
  let x_773 : vec3<f32> = u_xlat8;
  let x_775 : vec4<f32> = u_xlat3;
  u_xlat18.x = dot(-(x_773), vec3<f32>(x_775.x, x_775.y, x_775.z));
  let x_781 : f32 = u_xlat18.x;
  u_xlatb18 = (x_781 >= 0.0f);
  let x_783 : bool = u_xlatb18;
  if (x_783) {
    let x_787 : vec4<f32> = u_xlat3;
    x_784 = -(vec3<f32>(x_787.x, x_787.y, x_787.z));
  } else {
    let x_791 : vec4<f32> = u_xlat3;
    x_784 = vec3<f32>(x_791.x, x_791.y, x_791.z);
  }
  let x_793 : vec3<f32> = x_784;
  let x_794 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_793.x, x_793.y, x_793.z, x_794.w);
  let x_796 : vec4<f32> = u_xlat3;
  let x_799 : vec4<f32> = x_33.x_SSAOParams;
  let x_802 : vec4<f32> = u_xlat1;
  let x_804 : vec3<f32> = ((vec3<f32>(x_796.x, x_796.y, x_796.z) * vec3<f32>(x_799.y, x_799.y, x_799.y)) + vec3<f32>(x_802.x, x_802.y, x_802.z));
  let x_805 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_804.x, x_804.y, x_804.z, x_805.w);
  let x_807 : vec4<f32> = u_xlat3;
  let x_810 : vec4<f32> = x_33.x_CameraViewProjections[0i][1i];
  u_xlat18 = (vec2<f32>(x_807.y, x_807.y) * vec2<f32>(x_810.x, x_810.y));
  let x_814 : vec4<f32> = x_33.x_CameraViewProjections[0i][0i];
  let x_816 : vec4<f32> = u_xlat3;
  let x_819 : vec2<f32> = u_xlat18;
  u_xlat18 = ((vec2<f32>(x_814.x, x_814.y) * vec2<f32>(x_816.x, x_816.x)) + x_819);
  let x_822 : vec4<f32> = x_33.x_CameraViewProjections[0i][2i];
  let x_824 : vec4<f32> = u_xlat3;
  let x_827 : vec2<f32> = u_xlat18;
  u_xlat18 = ((vec2<f32>(x_822.x, x_822.y) * vec2<f32>(x_824.z, x_824.z)) + x_827);
  let x_829 : vec3<f32> = u_xlat4;
  let x_830 : vec4<f32> = u_xlat3;
  u_xlat3.x = dot(x_829, vec3<f32>(x_830.x, x_830.y, x_830.z));
  let x_835 : f32 = u_xlat3.x;
  u_xlat11.x = (1.0f / -(x_835));
  let x_839 : vec2<f32> = u_xlat18;
  let x_840 : vec3<f32> = u_xlat11;
  u_xlat18 = ((x_839 * vec2<f32>(x_840.x, x_840.x)) + vec2<f32>(1.0f, 1.0f));
  let x_844 : vec2<f32> = u_xlat18;
  u_xlat18 = (x_844 * vec2<f32>(0.5f, 0.5f));
  let x_846 : vec2<f32> = u_xlat18;
  u_xlat18 = clamp(x_846, vec2<f32>(0.0f, 0.0f), vec2<f32>(1.0f, 1.0f));
  let x_853 : vec2<f32> = u_xlat18;
  let x_855 : f32 = x_33.x_GlobalMipBias.x;
  let x_856 : vec4<f32> = textureSampleBias(x_CameraDepthTexture, sampler_CameraDepthTexture, x_853, x_855);
  u_xlat11.x = x_856.x;
  let x_861 : f32 = x_33.x_ZBufferParams.z;
  let x_863 : f32 = u_xlat11.x;
  let x_866 : f32 = x_33.x_ZBufferParams.w;
  u_xlat19 = ((x_861 * x_863) + x_866);
  let x_868 : f32 = u_xlat19;
  u_xlat19 = (1.0f / x_868);
  let x_870 : f32 = u_xlat19;
  let x_873 : f32 = u_xlat3.x;
  u_xlat3.x = (-(x_870) + -(x_873));
  let x_878 : f32 = u_xlat3.x;
  let x_881 : f32 = x_33.x_SSAOParams.y;
  u_xlatb3.x = (abs(x_878) < x_881);
  let x_885 : f32 = u_xlat11.x;
  u_xlatb3.y = (0.00001f < x_885);
  let x_889 : bool = u_xlatb3.x;
  u_xlat3.x = select(0.0f, 1.0f, x_889);
  let x_893 : bool = u_xlatb3.y;
  u_xlat3.y = select(0.0f, 1.0f, x_893);
  let x_897 : f32 = u_xlat3.y;
  let x_899 : f32 = u_xlat3.x;
  u_xlat3.x = (x_897 * x_899);
  let x_903 : f32 = u_xlat18.y;
  u_xlat26 = (-(x_903) + 1.0f);
  let x_906 : f32 = u_xlat19;
  let x_908 : f32 = x_33.x_ProjectionParams2.x;
  u_xlat11.x = (x_906 * x_908);
  let x_912 : vec4<f32> = x_33.x_CameraViewXExtent[0i];
  let x_914 : vec2<f32> = u_xlat18;
  let x_918 : vec4<f32> = x_33.x_CameraViewTopLeftCorner[0i];
  u_xlat5 = ((vec3<f32>(x_912.x, x_912.y, x_912.z) * vec3<f32>(x_914.x, x_914.x, x_914.x)) + vec3<f32>(x_918.x, x_918.y, x_918.z));
  let x_922 : vec4<f32> = x_33.x_CameraViewYExtent[0i];
  let x_924 : f32 = u_xlat26;
  let x_927 : vec3<f32> = u_xlat5;
  u_xlat5 = ((vec3<f32>(x_922.x, x_922.y, x_922.z) * vec3<f32>(x_924, x_924, x_924)) + x_927);
  let x_929 : vec3<f32> = u_xlat5;
  let x_930 : vec3<f32> = u_xlat11;
  let x_933 : vec4<f32> = u_xlat1;
  u_xlat11 = ((x_929 * vec3<f32>(x_930.x, x_930.x, x_930.x)) + -(vec3<f32>(x_933.x, x_933.y, x_933.z)));
  let x_937 : vec3<f32> = u_xlat11;
  let x_938 : vec3<f32> = u_xlat8;
  u_xlat18.x = dot(x_937, x_938);
  let x_941 : f32 = u_xlat0;
  let x_945 : f32 = u_xlat18.x;
  u_xlat18.x = ((-(x_941) * 0.004f) + x_945);
  let x_949 : f32 = u_xlat18.x;
  u_xlat18.x = max(x_949, 0.0f);
  let x_952 : vec3<f32> = u_xlat11;
  let x_953 : vec3<f32> = u_xlat11;
  u_xlat26 = dot(x_952, x_953);
  let x_955 : f32 = u_xlat26;
  u_xlat26 = (x_955 + 0.0001f);
  let x_957 : f32 = u_xlat26;
  u_xlat26 = (1.0f / x_957);
  let x_959 : f32 = u_xlat26;
  let x_961 : f32 = u_xlat18.x;
  u_xlat18.x = (x_959 * x_961);
  let x_965 : f32 = u_xlat18.x;
  let x_967 : f32 = u_xlat3.x;
  let x_969 : f32 = u_xlat25;
  u_xlat25 = ((x_965 * x_967) + x_969);
  let x_971 : vec4<f32> = u_xlat2;
  let x_974 : vec4<f32> = x_33.x_SSAOParams;
  let x_980 : vec2<f32> = ((vec2<f32>(x_971.x, x_971.y) * vec2<f32>(x_974.z, x_974.z)) + vec2<f32>(6.248999596f, 14.600999832f));
  let x_981 : vec4<f32> = u_xlat2;
  u_xlat2 = vec4<f32>(x_980.x, x_980.y, x_981.z, x_981.w);
  let x_983 : vec4<f32> = u_xlat2;
  u_xlat2.x = dot(vec2<f32>(x_983.x, x_983.y), vec2<f32>(0.067110561f, 0.00583715f));
  let x_988 : f32 = u_xlat2.x;
  u_xlat2.x = fract(x_988);
  let x_992 : f32 = u_xlat2.x;
  u_xlat2.x = (x_992 * 52.982917786f);
  let x_996 : f32 = u_xlat2.x;
  u_xlat2.x = fract(x_996);
  let x_999 : vec4<f32> = u_xlat2;
  let x_1004 : vec2<f32> = (vec2<f32>(x_999.x, x_999.x) + vec2<f32>(0.56640625f, 0.015625f));
  let x_1005 : vec4<f32> = u_xlat2;
  u_xlat2 = vec4<f32>(x_1004.x, x_1004.y, x_1005.z, x_1005.w);
  let x_1008 : f32 = u_xlat2.x;
  u_xlat2.x = fract(x_1008);
  let x_1012 : f32 = u_xlat2.x;
  u_xlat3.z = ((x_1012 * 2.0f) + -1.0f);
  let x_1017 : f32 = u_xlat2.y;
  u_xlat2.x = (x_1017 * 6.283185482f);
  let x_1022 : f32 = u_xlat3.z;
  let x_1025 : f32 = u_xlat3.z;
  u_xlat10.x = ((-(x_1022) * x_1025) + 1.0f);
  let x_1030 : f32 = u_xlat10.x;
  u_xlat10.x = sqrt(x_1030);
  let x_1034 : f32 = u_xlat2.x;
  u_xlat5.x = cos(x_1034);
  let x_1038 : f32 = u_xlat2.x;
  u_xlat2.x = sin(x_1038);
  let x_1042 : f32 = u_xlat10.x;
  let x_1044 : f32 = u_xlat5.x;
  u_xlat3.x = (x_1042 * x_1044);
  let x_1048 : f32 = u_xlat2.x;
  let x_1050 : f32 = u_xlat10.x;
  u_xlat3.y = (x_1048 * x_1050);
  let x_1053 : vec3<f32> = u_xlat8;
  let x_1055 : vec4<f32> = u_xlat3;
  u_xlat2.x = dot(-(x_1053), vec3<f32>(x_1055.x, x_1055.y, x_1055.z));
  let x_1063 : f32 = u_xlat2.x;
  u_xlatb2.x = (x_1063 >= 0.0f);
  let x_1067 : bool = u_xlatb2.x;
  if (x_1067) {
    let x_1071 : vec4<f32> = u_xlat3;
    x_1068 = -(vec3<f32>(x_1071.x, x_1071.y, x_1071.z));
  } else {
    let x_1075 : vec4<f32> = u_xlat3;
    x_1068 = vec3<f32>(x_1075.x, x_1075.y, x_1075.z);
  }
  let x_1077 : vec3<f32> = x_1068;
  let x_1078 : vec4<f32> = u_xlat2;
  u_xlat2 = vec4<f32>(x_1077.x, x_1077.y, x_1077.z, x_1078.w);
  let x_1080 : vec4<f32> = u_xlat2;
  let x_1083 : vec4<f32> = x_33.x_SSAOParams;
  let x_1086 : vec4<f32> = u_xlat1;
  let x_1088 : vec3<f32> = ((vec3<f32>(x_1080.x, x_1080.y, x_1080.z) * vec3<f32>(x_1083.y, x_1083.y, x_1083.y)) + vec3<f32>(x_1086.x, x_1086.y, x_1086.z));
  let x_1089 : vec4<f32> = u_xlat2;
  u_xlat2 = vec4<f32>(x_1088.x, x_1088.y, x_1088.z, x_1089.w);
  let x_1091 : vec4<f32> = u_xlat2;
  let x_1094 : vec4<f32> = x_33.x_CameraViewProjections[0i][1i];
  let x_1096 : vec2<f32> = (vec2<f32>(x_1091.y, x_1091.y) * vec2<f32>(x_1094.x, x_1094.y));
  let x_1097 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_1096.x, x_1096.y, x_1097.z, x_1097.w);
  let x_1100 : vec4<f32> = x_33.x_CameraViewProjections[0i][0i];
  let x_1102 : vec4<f32> = u_xlat2;
  let x_1105 : vec4<f32> = u_xlat3;
  let x_1107 : vec2<f32> = ((vec2<f32>(x_1100.x, x_1100.y) * vec2<f32>(x_1102.x, x_1102.x)) + vec2<f32>(x_1105.x, x_1105.y));
  let x_1108 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_1107.x, x_1107.y, x_1108.z, x_1108.w);
  let x_1111 : vec4<f32> = x_33.x_CameraViewProjections[0i][2i];
  let x_1113 : vec4<f32> = u_xlat2;
  let x_1116 : vec4<f32> = u_xlat3;
  let x_1118 : vec2<f32> = ((vec2<f32>(x_1111.x, x_1111.y) * vec2<f32>(x_1113.z, x_1113.z)) + vec2<f32>(x_1116.x, x_1116.y));
  let x_1119 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_1118.x, x_1118.y, x_1119.z, x_1119.w);
  let x_1121 : vec3<f32> = u_xlat4;
  let x_1122 : vec4<f32> = u_xlat2;
  u_xlat2.x = dot(x_1121, vec3<f32>(x_1122.x, x_1122.y, x_1122.z));
  let x_1127 : f32 = u_xlat2.x;
  u_xlat10.x = (1.0f / -(x_1127));
  let x_1131 : vec4<f32> = u_xlat3;
  let x_1133 : vec2<f32> = u_xlat10;
  u_xlat10 = ((vec2<f32>(x_1131.x, x_1131.y) * vec2<f32>(x_1133.x, x_1133.x)) + vec2<f32>(1.0f, 1.0f));
  let x_1137 : vec2<f32> = u_xlat10;
  u_xlat10 = (x_1137 * vec2<f32>(0.5f, 0.5f));
  let x_1139 : vec2<f32> = u_xlat10;
  u_xlat10 = clamp(x_1139, vec2<f32>(0.0f, 0.0f), vec2<f32>(1.0f, 1.0f));
  let x_1146 : vec2<f32> = u_xlat10;
  let x_1148 : f32 = x_33.x_GlobalMipBias.x;
  let x_1149 : vec4<f32> = textureSampleBias(x_CameraDepthTexture, sampler_CameraDepthTexture, x_1146, x_1148);
  u_xlat26 = x_1149.x;
  let x_1152 : f32 = x_33.x_ZBufferParams.z;
  let x_1153 : f32 = u_xlat26;
  let x_1156 : f32 = x_33.x_ZBufferParams.w;
  u_xlat3.x = ((x_1152 * x_1153) + x_1156);
  let x_1160 : f32 = u_xlat3.x;
  u_xlat3.x = (1.0f / x_1160);
  let x_1164 : f32 = u_xlat2.x;
  let x_1167 : f32 = u_xlat3.x;
  u_xlat2.x = (-(x_1164) + -(x_1167));
  let x_1172 : f32 = u_xlat2.x;
  let x_1175 : f32 = x_33.x_SSAOParams.y;
  u_xlatb2.x = (abs(x_1172) < x_1175);
  let x_1178 : f32 = u_xlat26;
  u_xlatb2.w = (0.00001f < x_1178);
  let x_1182 : bool = u_xlatb2.x;
  u_xlat2.x = select(0.0f, 1.0f, x_1182);
  let x_1186 : bool = u_xlatb2.w;
  u_xlat2.w = select(0.0f, 1.0f, x_1186);
  let x_1190 : f32 = u_xlat2.w;
  let x_1192 : f32 = u_xlat2.x;
  u_xlat2.x = (x_1190 * x_1192);
  let x_1196 : f32 = u_xlat10.y;
  u_xlat18.x = (-(x_1196) + 1.0f);
  let x_1201 : f32 = u_xlat3.x;
  let x_1203 : f32 = x_33.x_ProjectionParams2.x;
  u_xlat26 = (x_1201 * x_1203);
  let x_1206 : vec4<f32> = x_33.x_CameraViewXExtent[0i];
  let x_1208 : vec2<f32> = u_xlat10;
  let x_1212 : vec4<f32> = x_33.x_CameraViewTopLeftCorner[0i];
  let x_1214 : vec3<f32> = ((vec3<f32>(x_1206.x, x_1206.y, x_1206.z) * vec3<f32>(x_1208.x, x_1208.x, x_1208.x)) + vec3<f32>(x_1212.x, x_1212.y, x_1212.z));
  let x_1215 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_1214.x, x_1214.y, x_1214.z, x_1215.w);
  let x_1218 : vec4<f32> = x_33.x_CameraViewYExtent[0i];
  let x_1220 : vec2<f32> = u_xlat18;
  let x_1223 : vec4<f32> = u_xlat3;
  let x_1225 : vec3<f32> = ((vec3<f32>(x_1218.x, x_1218.y, x_1218.z) * vec3<f32>(x_1220.x, x_1220.x, x_1220.x)) + vec3<f32>(x_1223.x, x_1223.y, x_1223.z));
  let x_1226 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_1225.x, x_1225.y, x_1225.z, x_1226.w);
  let x_1228 : vec4<f32> = u_xlat3;
  let x_1230 : f32 = u_xlat26;
  let x_1233 : vec4<f32> = u_xlat1;
  let x_1236 : vec3<f32> = ((vec3<f32>(x_1228.x, x_1228.y, x_1228.z) * vec3<f32>(x_1230, x_1230, x_1230)) + -(vec3<f32>(x_1233.x, x_1233.y, x_1233.z)));
  let x_1237 : vec4<f32> = u_xlat1;
  u_xlat1 = vec4<f32>(x_1236.x, x_1236.y, x_1236.z, x_1237.w);
  let x_1239 : vec4<f32> = u_xlat1;
  let x_1241 : vec3<f32> = u_xlat8;
  u_xlat10.x = dot(vec3<f32>(x_1239.x, x_1239.y, x_1239.z), x_1241);
  let x_1244 : f32 = u_xlat0;
  let x_1248 : f32 = u_xlat10.x;
  u_xlat10.x = ((-(x_1244) * 0.004f) + x_1248);
  let x_1252 : f32 = u_xlat10.x;
  u_xlat10.x = max(x_1252, 0.0f);
  let x_1255 : vec4<f32> = u_xlat1;
  let x_1257 : vec4<f32> = u_xlat1;
  u_xlat1.x = dot(vec3<f32>(x_1255.x, x_1255.y, x_1255.z), vec3<f32>(x_1257.x, x_1257.y, x_1257.z));
  let x_1262 : f32 = u_xlat1.x;
  u_xlat1.x = (x_1262 + 0.0001f);
  let x_1266 : f32 = u_xlat1.x;
  u_xlat1.x = (1.0f / x_1266);
  let x_1270 : f32 = u_xlat1.x;
  let x_1272 : f32 = u_xlat10.x;
  u_xlat1.x = (x_1270 * x_1272);
  let x_1276 : f32 = u_xlat1.x;
  let x_1278 : f32 = u_xlat2.x;
  let x_1280 : f32 = u_xlat25;
  u_xlat1.x = ((x_1276 * x_1278) + x_1280);
  let x_1284 : f32 = u_xlat1.x;
  let x_1286 : f32 = x_33.x_SSAOParams.y;
  u_xlat1.x = (x_1284 * x_1286);
  let x_1290 : f32 = x_33.x_SSAOParams.w;
  u_xlat9 = (1.0f / x_1290);
  let x_1292 : f32 = u_xlat0;
  let x_1294 : f32 = u_xlat9;
  u_xlat0 = ((-(x_1292) * x_1294) + 1.0f);
  let x_1297 : f32 = u_xlat0;
  let x_1298 : f32 = u_xlat0;
  u_xlat0 = (x_1297 * x_1298);
  let x_1301 : f32 = u_xlat1.x;
  let x_1303 : f32 = x_33.x_SSAOParams.x;
  u_xlat1.x = (x_1301 * x_1303);
  let x_1306 : f32 = u_xlat0;
  let x_1308 : f32 = u_xlat1.x;
  u_xlat0 = (x_1306 * x_1308);
  let x_1310 : f32 = u_xlat0;
  u_xlat0 = (x_1310 * 0.25f);
  let x_1313 : f32 = u_xlat0;
  u_xlat0 = clamp(x_1313, 0.0f, 1.0f);
  let x_1315 : f32 = u_xlat0;
  u_xlat0 = log2(x_1315);
  let x_1317 : f32 = u_xlat0;
  u_xlat0 = (x_1317 * 0.600000024f);
  let x_1320 : f32 = u_xlat0;
  SV_Target0.x = exp2(x_1320);
  let x_1324 : vec3<f32> = u_xlat8;
  let x_1326 : vec3<f32> = ((x_1324 * vec3<f32>(0.5f, 0.5f, 0.5f)) + vec3<f32>(0.5f, 0.5f, 0.5f));
  let x_1327 : vec4<f32> = SV_Target0;
  SV_Target0 = vec4<f32>(x_1327.x, x_1326.x, x_1326.y, x_1326.z);
  return;
}

struct main_out {
  @location(0)
  SV_Target0_1 : vec4<f32>,
}

@fragment
fn main(@location(0) vs_TEXCOORD0_param : vec2<f32>, @builtin(position) gl_FragCoord_param : vec4<f32>) -> main_out {
  vs_TEXCOORD0 = vs_TEXCOORD0_param;
  gl_FragCoord = gl_FragCoord_param;
  main_1();
  return main_out(SV_Target0);
}

