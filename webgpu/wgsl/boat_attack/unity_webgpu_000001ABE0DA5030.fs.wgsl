struct PGlobals {
  x_ScaledScreenParams : vec4<f32>,
  x_GlobalMipBias : vec2<f32>,
  x_AlphaToMaskAvailable : f32,
  @size(4)
  padding : u32,
  x_MainLightPosition : vec4<f32>,
  x_MainLightColor : vec4<f32>,
  x_AmbientOcclusionParam : vec4<f32>,
  x_AdditionalLightsCount : vec4<f32>,
  x_WorldSpaceCameraPos : vec3<f32>,
  @size(4)
  padding_1 : u32,
  unity_OrthoParams : vec4<f32>,
  x_ScaleBiasRt : vec4<f32>,
  unity_MatrixV : mat4x4<f32>,
}

struct UnityPerMaterial {
  Texture2D_B222E8F_TexelSize : vec4<f32>,
  Color_C30C7CA3 : vec4<f32>,
  Texture2D_D9BFD5F1_TexelSize : vec4<f32>,
}

type Arr = array<mat4x4<f32>, 5u>;

struct MainLightShadows {
  x_MainLightWorldToShadow : Arr,
  x_CascadeShadowSplitSpheres0 : vec4<f32>,
  x_CascadeShadowSplitSpheres1 : vec4<f32>,
  x_CascadeShadowSplitSpheres2 : vec4<f32>,
  x_CascadeShadowSplitSpheres3 : vec4<f32>,
  x_CascadeShadowSplitSphereRadii : vec4<f32>,
  x_MainLightShadowOffset0 : vec4<f32>,
  x_MainLightShadowOffset1 : vec4<f32>,
  x_MainLightShadowParams : vec4<f32>,
  x_MainLightShadowmapSize : vec4<f32>,
}

type Arr_1 = array<vec4<f32>, 2u>;

struct UnityPerDraw {
  unity_ObjectToWorld : mat4x4<f32>,
  unity_WorldToObject : mat4x4<f32>,
  unity_LODFade : vec4<f32>,
  unity_WorldTransformParams : vec4<f32>,
  unity_RenderingLayer : vec4<f32>,
  unity_LightData : vec4<f32>,
  unity_LightIndices : Arr_1,
  unity_ProbesOcclusion : vec4<f32>,
  unity_SpecCube0_HDR : vec4<f32>,
  unity_SpecCube1_HDR : vec4<f32>,
  unity_SpecCube0_BoxMax : vec4<f32>,
  unity_SpecCube0_BoxMin : vec4<f32>,
  unity_SpecCube0_ProbePosition : vec4<f32>,
  unity_SpecCube1_BoxMax : vec4<f32>,
  unity_SpecCube1_BoxMin : vec4<f32>,
  unity_SpecCube1_ProbePosition : vec4<f32>,
  unity_LightmapST : vec4<f32>,
  unity_DynamicLightmapST : vec4<f32>,
  unity_SHAr : vec4<f32>,
  unity_SHAg : vec4<f32>,
  unity_SHAb : vec4<f32>,
  unity_SHBr : vec4<f32>,
  unity_SHBg : vec4<f32>,
  unity_SHBb : vec4<f32>,
  unity_SHC : vec4<f32>,
  unity_RendererBounds_Min : vec4<f32>,
  unity_RendererBounds_Max : vec4<f32>,
  unity_MatrixPreviousM : mat4x4<f32>,
  unity_MatrixPreviousMI : mat4x4<f32>,
  unity_MotionVectorsParams : vec4<f32>,
  unity_SpriteColor : vec4<f32>,
  unity_SpriteProps : vec4<f32>,
}

type Arr_2 = array<vec4<f32>, 256u>;

type Arr_3 = array<vec4<f32>, 256u>;

type Arr_4 = array<vec4<f32>, 256u>;

type Arr_5 = array<vec4<f32>, 256u>;

type Arr_6 = array<vec4<f32>, 256u>;

struct strided_arr {
  @size(16)
  el : f32,
}

type Arr_7 = array<strided_arr, 256u>;

struct AdditionalLights {
  x_AdditionalLightsPosition : Arr_6,
  x_AdditionalLightsColor : Arr_6,
  x_AdditionalLightsAttenuation : Arr_6,
  x_AdditionalLightsSpotDir : Arr_6,
  x_AdditionalLightsOcclusionProbes : Arr_6,
  x_AdditionalLightsLayerMasks : Arr_7,
}

var<private> gl_FragCoord : vec4<f32>;

var<private> vs_INTERP1 : vec3<f32>;

@group(0) @binding(3) var Texture2D_B222E8F : texture_2d<f32>;

@group(0) @binding(8) var samplerTexture2D_B222E8F : sampler;

var<private> vs_INTERP3 : vec4<f32>;

@group(1) @binding(0) var<uniform> x_66 : PGlobals;

@group(1) @binding(4) var<uniform> x_78 : UnityPerMaterial;

@group(0) @binding(4) var Texture2D_D9BFD5F1 : texture_2d<f32>;

@group(0) @binding(9) var samplerTexture2D_D9BFD5F1 : sampler;

var<private> vs_INTERP4 : vec4<f32>;

var<private> vs_INTERP0 : vec3<f32>;

@group(1) @binding(3) var<uniform> x_138 : MainLightShadows;

@group(0) @binding(2) var x_MainLightShadowmapTexture : texture_depth_2d;

@group(0) @binding(7) var sampler_MainLightShadowmapTexture : sampler_comparison;

var<private> vs_INTERP2 : vec4<f32>;

@group(1) @binding(2) var<uniform> x_1752 : UnityPerDraw;

@group(0) @binding(1) var x_ScreenSpaceOcclusionTexture : texture_2d<f32>;

@group(0) @binding(6) var sampler_ScreenSpaceOcclusionTexture : sampler;

@group(0) @binding(0) var unity_SpecCube0 : texture_cube<f32>;

@group(0) @binding(5) var samplerunity_SpecCube0 : sampler;

@group(1) @binding(1) var<uniform> x_3600 : AdditionalLights;

var<private> SV_Target0 : vec4<f32>;

fn main_1() {
  var hlslcc_FragCoord : vec4<f32>;
  var u_xlat0 : vec3<f32>;
  var u_xlat1 : vec4<f32>;
  var u_xlat2 : vec3<f32>;
  var u_xlat3 : vec4<f32>;
  var u_xlat4 : vec4<f32>;
  var u_xlat66 : f32;
  var u_xlat25 : vec3<f32>;
  var u_xlat5 : vec4<f32>;
  var u_xlat6 : vec4<f32>;
  var u_xlat7 : vec4<f32>;
  var u_xlatb4 : vec4<bool>;
  var u_xlatu66 : u32;
  var u_xlati66 : i32;
  var u_xlatb66 : bool;
  var u_xlatb68 : bool;
  var txVec0 : vec3<f32>;
  var txVec1 : vec3<f32>;
  var txVec2 : vec3<f32>;
  var txVec3 : vec3<f32>;
  var u_xlat68 : f32;
  var u_xlatb70 : bool;
  var u_xlat49 : vec2<f32>;
  var u_xlat51 : vec2<f32>;
  var u_xlat8 : vec4<f32>;
  var u_xlat9 : vec4<f32>;
  var u_xlat10 : vec4<f32>;
  var u_xlat11 : vec4<f32>;
  var u_xlat12 : vec4<f32>;
  var u_xlat13 : vec4<f32>;
  var u_xlat70 : f32;
  var txVec4 : vec3<f32>;
  var txVec5 : vec3<f32>;
  var u_xlat27 : vec3<f32>;
  var txVec6 : vec3<f32>;
  var txVec7 : vec3<f32>;
  var txVec8 : vec3<f32>;
  var txVec9 : vec3<f32>;
  var txVec10 : vec3<f32>;
  var txVec11 : vec3<f32>;
  var txVec12 : vec3<f32>;
  var u_xlat28 : vec3<f32>;
  var u_xlat14 : vec4<f32>;
  var u_xlat15 : vec4<f32>;
  var u_xlat29 : vec2<f32>;
  var u_xlat57 : vec2<f32>;
  var u_xlat52 : vec2<f32>;
  var u_xlat16 : vec4<f32>;
  var u_xlat17 : vec4<f32>;
  var u_xlat18 : vec4<f32>;
  var txVec13 : vec3<f32>;
  var txVec14 : vec3<f32>;
  var txVec15 : vec3<f32>;
  var txVec16 : vec3<f32>;
  var txVec17 : vec3<f32>;
  var txVec18 : vec3<f32>;
  var txVec19 : vec3<f32>;
  var txVec20 : vec3<f32>;
  var txVec21 : vec3<f32>;
  var txVec22 : vec3<f32>;
  var txVec23 : vec3<f32>;
  var txVec24 : vec3<f32>;
  var txVec25 : vec3<f32>;
  var txVec26 : vec3<f32>;
  var txVec27 : vec3<f32>;
  var txVec28 : vec3<f32>;
  var txVec29 : vec3<f32>;
  var u_xlatb5 : bool;
  var u_xlatb27 : bool;
  var u_xlatb1 : bool;
  var x_1665 : f32;
  var u_xlat23 : vec3<f32>;
  var u_xlat45 : f32;
  var u_xlat67 : f32;
  var u_xlatb45 : bool;
  var x_1713 : f32;
  var u_xlatb23 : vec3<bool>;
  var x_1840 : f32;
  var x_1853 : f32;
  var x_1865 : f32;
  var u_xlat71 : f32;
  var txVec30 : vec3<f32>;
  var txVec31 : vec3<f32>;
  var txVec32 : vec3<f32>;
  var txVec33 : vec3<f32>;
  var u_xlatb72 : bool;
  var u_xlat54 : vec2<f32>;
  var u_xlat72 : f32;
  var txVec34 : vec3<f32>;
  var u_xlat73 : f32;
  var txVec35 : vec3<f32>;
  var txVec36 : vec3<f32>;
  var txVec37 : vec3<f32>;
  var txVec38 : vec3<f32>;
  var txVec39 : vec3<f32>;
  var txVec40 : vec3<f32>;
  var txVec41 : vec3<f32>;
  var txVec42 : vec3<f32>;
  var u_xlat31 : vec3<f32>;
  var u_xlat32 : vec2<f32>;
  var u_xlat60 : vec2<f32>;
  var u_xlat55 : vec2<f32>;
  var u_xlat19 : vec4<f32>;
  var u_xlat20 : vec4<f32>;
  var u_xlat21 : vec4<f32>;
  var txVec43 : vec3<f32>;
  var txVec44 : vec3<f32>;
  var txVec45 : vec3<f32>;
  var txVec46 : vec3<f32>;
  var txVec47 : vec3<f32>;
  var txVec48 : vec3<f32>;
  var txVec49 : vec3<f32>;
  var txVec50 : vec3<f32>;
  var txVec51 : vec3<f32>;
  var txVec52 : vec3<f32>;
  var txVec53 : vec3<f32>;
  var txVec54 : vec3<f32>;
  var txVec55 : vec3<f32>;
  var txVec56 : vec3<f32>;
  var txVec57 : vec3<f32>;
  var txVec58 : vec3<f32>;
  var txVec59 : vec3<f32>;
  var u_xlat26 : f32;
  var u_xlatu_loop_1 : u32;
  var u_xlatu69 : u32;
  var u_xlati70 : i32;
  var u_xlat69 : f32;
  var indexable : array<vec4<u32>, 4u>;
  var u_xlati69 : i32;
  var x_3809 : f32;
  var u_xlat_precise_vec4 : vec4<f32>;
  var u_xlat_precise_ivec4 : vec4<i32>;
  var u_xlat_precise_bvec4 : vec4<bool>;
  var u_xlat_precise_uvec4 : vec4<u32>;
  let x_13 : vec4<f32> = gl_FragCoord;
  let x_14 : vec3<f32> = vec3<f32>(x_13.x, x_13.y, x_13.z);
  let x_20 : f32 = gl_FragCoord.w;
  hlslcc_FragCoord = vec4<f32>(x_14.x, x_14.y, x_14.z, (1.0f / x_20));
  let x_30 : vec3<f32> = vs_INTERP1;
  let x_31 : vec3<f32> = vs_INTERP1;
  u_xlat0.x = dot(x_30, x_31);
  let x_37 : f32 = u_xlat0.x;
  u_xlat0.x = sqrt(x_37);
  let x_41 : f32 = u_xlat0.x;
  u_xlat0.x = (1.0f / x_41);
  let x_44 : vec3<f32> = u_xlat0;
  let x_46 : vec3<f32> = vs_INTERP1;
  u_xlat0 = (vec3<f32>(x_44.x, x_44.x, x_44.x) * x_46);
  let x_61 : vec4<f32> = vs_INTERP3;
  let x_71 : f32 = x_66.x_GlobalMipBias.x;
  let x_72 : vec4<f32> = textureSampleBias(Texture2D_B222E8F, samplerTexture2D_B222E8F, vec2<f32>(x_61.x, x_61.y), x_71);
  u_xlat1 = x_72;
  let x_74 : vec4<f32> = u_xlat1;
  let x_81 : vec4<f32> = x_78.Color_C30C7CA3;
  u_xlat2 = (vec3<f32>(x_74.x, x_74.y, x_74.z) * vec3<f32>(x_81.x, x_81.y, x_81.z));
  let x_90 : vec4<f32> = vs_INTERP3;
  let x_93 : f32 = x_66.x_GlobalMipBias.x;
  let x_94 : vec4<f32> = textureSampleBias(Texture2D_D9BFD5F1, samplerTexture2D_D9BFD5F1, vec2<f32>(x_90.x, x_90.y), x_93);
  u_xlat3 = vec4<f32>(x_94.w, x_94.x, x_94.y, x_94.z);
  let x_97 : vec4<f32> = u_xlat3;
  u_xlat4 = ((vec4<f32>(x_97.y, x_97.z, x_97.w, x_97.x) * vec4<f32>(2.0f, 2.0f, 2.0f, 2.0f)) + vec4<f32>(-1.0f, -1.0f, -1.0f, -1.0f));
  let x_106 : vec4<f32> = u_xlat4;
  let x_107 : vec4<f32> = u_xlat4;
  u_xlat66 = dot(x_106, x_107);
  let x_109 : f32 = u_xlat66;
  u_xlat66 = inverseSqrt(x_109);
  let x_112 : f32 = u_xlat66;
  let x_114 : vec4<f32> = u_xlat4;
  u_xlat25 = (vec3<f32>(x_112, x_112, x_112) * vec3<f32>(x_114.x, x_114.y, x_114.z));
  let x_120 : f32 = vs_INTERP4.y;
  u_xlat66 = (x_120 * 200.0f);
  let x_123 : f32 = u_xlat66;
  u_xlat66 = min(x_123, 1.0f);
  let x_125 : f32 = u_xlat66;
  let x_127 : vec4<f32> = u_xlat1;
  let x_129 : vec3<f32> = (vec3<f32>(x_125, x_125, x_125) * vec3<f32>(x_127.x, x_127.y, x_127.z));
  let x_130 : vec4<f32> = u_xlat1;
  u_xlat1 = vec4<f32>(x_129.x, x_129.y, x_129.z, x_130.w);
  let x_133 : vec3<f32> = vs_INTERP0;
  let x_140 : vec4<f32> = x_138.x_CascadeShadowSplitSpheres0;
  let x_143 : vec3<f32> = (x_133 + -(vec3<f32>(x_140.x, x_140.y, x_140.z)));
  let x_144 : vec4<f32> = u_xlat4;
  u_xlat4 = vec4<f32>(x_143.x, x_143.y, x_143.z, x_144.w);
  let x_147 : vec3<f32> = vs_INTERP0;
  let x_150 : vec4<f32> = x_138.x_CascadeShadowSplitSpheres1;
  let x_153 : vec3<f32> = (x_147 + -(vec3<f32>(x_150.x, x_150.y, x_150.z)));
  let x_154 : vec4<f32> = u_xlat5;
  u_xlat5 = vec4<f32>(x_153.x, x_153.y, x_153.z, x_154.w);
  let x_157 : vec3<f32> = vs_INTERP0;
  let x_160 : vec4<f32> = x_138.x_CascadeShadowSplitSpheres2;
  let x_163 : vec3<f32> = (x_157 + -(vec3<f32>(x_160.x, x_160.y, x_160.z)));
  let x_164 : vec4<f32> = u_xlat6;
  u_xlat6 = vec4<f32>(x_163.x, x_163.y, x_163.z, x_164.w);
  let x_167 : vec3<f32> = vs_INTERP0;
  let x_170 : vec4<f32> = x_138.x_CascadeShadowSplitSpheres3;
  let x_173 : vec3<f32> = (x_167 + -(vec3<f32>(x_170.x, x_170.y, x_170.z)));
  let x_174 : vec4<f32> = u_xlat7;
  u_xlat7 = vec4<f32>(x_173.x, x_173.y, x_173.z, x_174.w);
  let x_176 : vec4<f32> = u_xlat4;
  let x_178 : vec4<f32> = u_xlat4;
  u_xlat4.x = dot(vec3<f32>(x_176.x, x_176.y, x_176.z), vec3<f32>(x_178.x, x_178.y, x_178.z));
  let x_182 : vec4<f32> = u_xlat5;
  let x_184 : vec4<f32> = u_xlat5;
  u_xlat4.y = dot(vec3<f32>(x_182.x, x_182.y, x_182.z), vec3<f32>(x_184.x, x_184.y, x_184.z));
  let x_188 : vec4<f32> = u_xlat6;
  let x_190 : vec4<f32> = u_xlat6;
  u_xlat4.z = dot(vec3<f32>(x_188.x, x_188.y, x_188.z), vec3<f32>(x_190.x, x_190.y, x_190.z));
  let x_195 : vec4<f32> = u_xlat7;
  let x_197 : vec4<f32> = u_xlat7;
  u_xlat4.w = dot(vec3<f32>(x_195.x, x_195.y, x_195.z), vec3<f32>(x_197.x, x_197.y, x_197.z));
  let x_205 : vec4<f32> = u_xlat4;
  let x_208 : vec4<f32> = x_138.x_CascadeShadowSplitSphereRadii;
  u_xlatb4 = (x_205 < x_208);
  let x_212 : bool = u_xlatb4.x;
  u_xlat5.x = select(0.0f, 1.0f, x_212);
  let x_217 : bool = u_xlatb4.y;
  u_xlat5.y = select(0.0f, 1.0f, x_217);
  let x_221 : bool = u_xlatb4.z;
  u_xlat5.z = select(0.0f, 1.0f, x_221);
  let x_225 : bool = u_xlatb4.w;
  u_xlat5.w = select(0.0f, 1.0f, x_225);
  let x_229 : bool = u_xlatb4.x;
  u_xlat4.x = select(-0.0f, -1.0f, x_229);
  let x_234 : bool = u_xlatb4.y;
  u_xlat4.y = select(-0.0f, -1.0f, x_234);
  let x_238 : bool = u_xlatb4.z;
  u_xlat4.z = select(-0.0f, -1.0f, x_238);
  let x_241 : vec4<f32> = u_xlat4;
  let x_243 : vec4<f32> = u_xlat5;
  let x_245 : vec3<f32> = (vec3<f32>(x_241.x, x_241.y, x_241.z) + vec3<f32>(x_243.y, x_243.z, x_243.w));
  let x_246 : vec4<f32> = u_xlat4;
  u_xlat4 = vec4<f32>(x_245.x, x_245.y, x_245.z, x_246.w);
  let x_248 : vec4<f32> = u_xlat4;
  let x_251 : vec3<f32> = max(vec3<f32>(x_248.x, x_248.y, x_248.z), vec3<f32>(0.0f, 0.0f, 0.0f));
  let x_252 : vec4<f32> = u_xlat5;
  u_xlat5 = vec4<f32>(x_252.x, x_251.x, x_251.y, x_251.z);
  let x_254 : vec4<f32> = u_xlat5;
  u_xlat66 = dot(x_254, vec4<f32>(4.0f, 3.0f, 2.0f, 1.0f));
  let x_259 : f32 = u_xlat66;
  u_xlat66 = (-(x_259) + 4.0f);
  let x_264 : f32 = u_xlat66;
  u_xlatu66 = u32(x_264);
  let x_268 : u32 = u_xlatu66;
  u_xlati66 = (bitcast<i32>(x_268) << bitcast<u32>(2i));
  let x_271 : vec3<f32> = vs_INTERP0;
  let x_274 : i32 = u_xlati66;
  let x_277 : i32 = u_xlati66;
  let x_281 : vec4<f32> = x_138.x_MainLightWorldToShadow[((x_274 + 1i) / 4i)][((x_277 + 1i) % 4i)];
  let x_283 : vec3<f32> = (vec3<f32>(x_271.y, x_271.y, x_271.y) * vec3<f32>(x_281.x, x_281.y, x_281.z));
  let x_284 : vec4<f32> = u_xlat4;
  u_xlat4 = vec4<f32>(x_283.x, x_283.y, x_283.z, x_284.w);
  let x_286 : i32 = u_xlati66;
  let x_288 : i32 = u_xlati66;
  let x_291 : vec4<f32> = x_138.x_MainLightWorldToShadow[(x_286 / 4i)][(x_288 % 4i)];
  let x_293 : vec3<f32> = vs_INTERP0;
  let x_296 : vec4<f32> = u_xlat4;
  let x_298 : vec3<f32> = ((vec3<f32>(x_291.x, x_291.y, x_291.z) * vec3<f32>(x_293.x, x_293.x, x_293.x)) + vec3<f32>(x_296.x, x_296.y, x_296.z));
  let x_299 : vec4<f32> = u_xlat4;
  u_xlat4 = vec4<f32>(x_298.x, x_298.y, x_298.z, x_299.w);
  let x_301 : i32 = u_xlati66;
  let x_304 : i32 = u_xlati66;
  let x_308 : vec4<f32> = x_138.x_MainLightWorldToShadow[((x_301 + 2i) / 4i)][((x_304 + 2i) % 4i)];
  let x_310 : vec3<f32> = vs_INTERP0;
  let x_313 : vec4<f32> = u_xlat4;
  let x_315 : vec3<f32> = ((vec3<f32>(x_308.x, x_308.y, x_308.z) * vec3<f32>(x_310.z, x_310.z, x_310.z)) + vec3<f32>(x_313.x, x_313.y, x_313.z));
  let x_316 : vec4<f32> = u_xlat4;
  u_xlat4 = vec4<f32>(x_315.x, x_315.y, x_315.z, x_316.w);
  let x_318 : vec4<f32> = u_xlat4;
  let x_320 : i32 = u_xlati66;
  let x_323 : i32 = u_xlati66;
  let x_327 : vec4<f32> = x_138.x_MainLightWorldToShadow[((x_320 + 3i) / 4i)][((x_323 + 3i) % 4i)];
  let x_329 : vec3<f32> = (vec3<f32>(x_318.x, x_318.y, x_318.z) + vec3<f32>(x_327.x, x_327.y, x_327.z));
  let x_330 : vec4<f32> = u_xlat4;
  u_xlat4 = vec4<f32>(x_329.x, x_329.y, x_329.z, x_330.w);
  let x_335 : f32 = x_138.x_MainLightShadowParams.y;
  u_xlatb66 = (0.0f < x_335);
  let x_337 : bool = u_xlatb66;
  if (x_337) {
    let x_342 : f32 = x_138.x_MainLightShadowParams.y;
    u_xlatb68 = (x_342 == 1.0f);
    let x_344 : bool = u_xlatb68;
    if (x_344) {
      let x_347 : vec4<f32> = u_xlat4;
      let x_351 : vec4<f32> = x_138.x_MainLightShadowOffset0;
      u_xlat5 = (vec4<f32>(x_347.x, x_347.y, x_347.x, x_347.y) + x_351);
      let x_354 : vec4<f32> = u_xlat5;
      let x_355 : vec2<f32> = vec2<f32>(x_354.x, x_354.y);
      let x_357 : f32 = u_xlat4.z;
      txVec0 = vec3<f32>(x_355.x, x_355.y, x_357);
      let x_369 : vec3<f32> = txVec0;
      let x_371 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_369.xy, x_369.z);
      u_xlat6.x = x_371;
      let x_374 : vec4<f32> = u_xlat5;
      let x_375 : vec2<f32> = vec2<f32>(x_374.z, x_374.w);
      let x_377 : f32 = u_xlat4.z;
      txVec1 = vec3<f32>(x_375.x, x_375.y, x_377);
      let x_384 : vec3<f32> = txVec1;
      let x_386 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_384.xy, x_384.z);
      u_xlat6.y = x_386;
      let x_388 : vec4<f32> = u_xlat4;
      let x_392 : vec4<f32> = x_138.x_MainLightShadowOffset1;
      u_xlat5 = (vec4<f32>(x_388.x, x_388.y, x_388.x, x_388.y) + x_392);
      let x_395 : vec4<f32> = u_xlat5;
      let x_396 : vec2<f32> = vec2<f32>(x_395.x, x_395.y);
      let x_398 : f32 = u_xlat4.z;
      txVec2 = vec3<f32>(x_396.x, x_396.y, x_398);
      let x_405 : vec3<f32> = txVec2;
      let x_407 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_405.xy, x_405.z);
      u_xlat6.z = x_407;
      let x_410 : vec4<f32> = u_xlat5;
      let x_411 : vec2<f32> = vec2<f32>(x_410.z, x_410.w);
      let x_413 : f32 = u_xlat4.z;
      txVec3 = vec3<f32>(x_411.x, x_411.y, x_413);
      let x_420 : vec3<f32> = txVec3;
      let x_422 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_420.xy, x_420.z);
      u_xlat6.w = x_422;
      let x_425 : vec4<f32> = u_xlat6;
      u_xlat68 = dot(x_425, vec4<f32>(0.25f, 0.25f, 0.25f, 0.25f));
    } else {
      let x_432 : f32 = x_138.x_MainLightShadowParams.y;
      u_xlatb70 = (x_432 == 2.0f);
      let x_434 : bool = u_xlatb70;
      if (x_434) {
        let x_437 : vec4<f32> = u_xlat4;
        let x_441 : vec4<f32> = x_138.x_MainLightShadowmapSize;
        let x_446 : vec2<f32> = ((vec2<f32>(x_437.x, x_437.y) * vec2<f32>(x_441.z, x_441.w)) + vec2<f32>(0.5f, 0.5f));
        let x_447 : vec4<f32> = u_xlat5;
        u_xlat5 = vec4<f32>(x_446.x, x_446.y, x_447.z, x_447.w);
        let x_449 : vec4<f32> = u_xlat5;
        let x_451 : vec2<f32> = floor(vec2<f32>(x_449.x, x_449.y));
        let x_452 : vec4<f32> = u_xlat5;
        u_xlat5 = vec4<f32>(x_451.x, x_451.y, x_452.z, x_452.w);
        let x_456 : vec4<f32> = u_xlat4;
        let x_459 : vec4<f32> = x_138.x_MainLightShadowmapSize;
        let x_462 : vec4<f32> = u_xlat5;
        u_xlat49 = ((vec2<f32>(x_456.x, x_456.y) * vec2<f32>(x_459.z, x_459.w)) + -(vec2<f32>(x_462.x, x_462.y)));
        let x_466 : vec2<f32> = u_xlat49;
        u_xlat6 = (vec4<f32>(x_466.x, x_466.x, x_466.y, x_466.y) + vec4<f32>(0.5f, 1.0f, 0.5f, 1.0f));
        let x_470 : vec4<f32> = u_xlat6;
        let x_472 : vec4<f32> = u_xlat6;
        u_xlat7 = (vec4<f32>(x_470.x, x_470.x, x_470.z, x_470.z) * vec4<f32>(x_472.x, x_472.x, x_472.z, x_472.z));
        let x_475 : vec4<f32> = u_xlat7;
        let x_479 : vec2<f32> = (vec2<f32>(x_475.y, x_475.w) * vec2<f32>(0.079999998f, 0.079999998f));
        let x_480 : vec4<f32> = u_xlat6;
        u_xlat6 = vec4<f32>(x_479.x, x_480.y, x_479.y, x_480.w);
        let x_482 : vec4<f32> = u_xlat7;
        let x_485 : vec2<f32> = u_xlat49;
        let x_487 : vec2<f32> = ((vec2<f32>(x_482.x, x_482.z) * vec2<f32>(0.5f, 0.5f)) + -(x_485));
        let x_488 : vec4<f32> = u_xlat7;
        u_xlat7 = vec4<f32>(x_487.x, x_487.y, x_488.z, x_488.w);
        let x_491 : vec2<f32> = u_xlat49;
        u_xlat51 = (-(x_491) + vec2<f32>(1.0f, 1.0f));
        let x_496 : vec2<f32> = u_xlat49;
        let x_498 : vec2<f32> = min(x_496, vec2<f32>(0.0f, 0.0f));
        let x_499 : vec4<f32> = u_xlat8;
        u_xlat8 = vec4<f32>(x_498.x, x_498.y, x_499.z, x_499.w);
        let x_501 : vec4<f32> = u_xlat8;
        let x_504 : vec4<f32> = u_xlat8;
        let x_507 : vec2<f32> = u_xlat51;
        let x_508 : vec2<f32> = ((-(vec2<f32>(x_501.x, x_501.y)) * vec2<f32>(x_504.x, x_504.y)) + x_507);
        let x_509 : vec4<f32> = u_xlat8;
        u_xlat8 = vec4<f32>(x_508.x, x_508.y, x_509.z, x_509.w);
        let x_511 : vec2<f32> = u_xlat49;
        u_xlat49 = max(x_511, vec2<f32>(0.0f, 0.0f));
        let x_513 : vec2<f32> = u_xlat49;
        let x_515 : vec2<f32> = u_xlat49;
        let x_517 : vec4<f32> = u_xlat6;
        u_xlat49 = ((-(x_513) * x_515) + vec2<f32>(x_517.y, x_517.w));
        let x_520 : vec4<f32> = u_xlat8;
        let x_522 : vec2<f32> = (vec2<f32>(x_520.x, x_520.y) + vec2<f32>(1.0f, 1.0f));
        let x_523 : vec4<f32> = u_xlat8;
        u_xlat8 = vec4<f32>(x_522.x, x_522.y, x_523.z, x_523.w);
        let x_525 : vec2<f32> = u_xlat49;
        u_xlat49 = (x_525 + vec2<f32>(1.0f, 1.0f));
        let x_528 : vec4<f32> = u_xlat7;
        let x_532 : vec2<f32> = (vec2<f32>(x_528.x, x_528.y) * vec2<f32>(0.159999996f, 0.159999996f));
        let x_533 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_532.x, x_532.y, x_533.z, x_533.w);
        let x_535 : vec2<f32> = u_xlat51;
        let x_536 : vec2<f32> = (x_535 * vec2<f32>(0.159999996f, 0.159999996f));
        let x_537 : vec4<f32> = u_xlat7;
        u_xlat7 = vec4<f32>(x_536.x, x_536.y, x_537.z, x_537.w);
        let x_539 : vec4<f32> = u_xlat8;
        let x_541 : vec2<f32> = (vec2<f32>(x_539.x, x_539.y) * vec2<f32>(0.159999996f, 0.159999996f));
        let x_542 : vec4<f32> = u_xlat8;
        u_xlat8 = vec4<f32>(x_541.x, x_541.y, x_542.z, x_542.w);
        let x_545 : vec2<f32> = u_xlat49;
        let x_546 : vec2<f32> = (x_545 * vec2<f32>(0.159999996f, 0.159999996f));
        let x_547 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_546.x, x_546.y, x_547.z, x_547.w);
        let x_549 : vec4<f32> = u_xlat6;
        u_xlat49 = (vec2<f32>(x_549.y, x_549.w) * vec2<f32>(0.159999996f, 0.159999996f));
        let x_553 : f32 = u_xlat8.x;
        u_xlat9.z = x_553;
        let x_556 : f32 = u_xlat49.x;
        u_xlat9.w = x_556;
        let x_559 : f32 = u_xlat10.x;
        u_xlat7.z = x_559;
        let x_562 : f32 = u_xlat6.x;
        u_xlat7.w = x_562;
        let x_565 : vec4<f32> = u_xlat7;
        let x_567 : vec4<f32> = u_xlat9;
        u_xlat11 = (vec4<f32>(x_565.z, x_565.w, x_565.x, x_565.z) + vec4<f32>(x_567.z, x_567.w, x_567.x, x_567.z));
        let x_571 : f32 = u_xlat9.y;
        u_xlat8.z = x_571;
        let x_574 : f32 = u_xlat49.y;
        u_xlat8.w = x_574;
        let x_577 : f32 = u_xlat7.y;
        u_xlat10.z = x_577;
        let x_580 : f32 = u_xlat6.z;
        u_xlat10.w = x_580;
        let x_582 : vec4<f32> = u_xlat8;
        let x_584 : vec4<f32> = u_xlat10;
        let x_586 : vec3<f32> = (vec3<f32>(x_582.z, x_582.y, x_582.w) + vec3<f32>(x_584.z, x_584.y, x_584.w));
        let x_587 : vec4<f32> = u_xlat6;
        u_xlat6 = vec4<f32>(x_586.x, x_586.y, x_586.z, x_587.w);
        let x_589 : vec4<f32> = u_xlat7;
        let x_591 : vec4<f32> = u_xlat11;
        let x_593 : vec3<f32> = (vec3<f32>(x_589.x, x_589.z, x_589.w) / vec3<f32>(x_591.z, x_591.w, x_591.y));
        let x_594 : vec4<f32> = u_xlat7;
        u_xlat7 = vec4<f32>(x_593.x, x_593.y, x_593.z, x_594.w);
        let x_596 : vec4<f32> = u_xlat7;
        let x_602 : vec3<f32> = (vec3<f32>(x_596.x, x_596.y, x_596.z) + vec3<f32>(-2.5f, -0.5f, 1.5f));
        let x_603 : vec4<f32> = u_xlat7;
        u_xlat7 = vec4<f32>(x_602.x, x_602.y, x_602.z, x_603.w);
        let x_605 : vec4<f32> = u_xlat10;
        let x_607 : vec4<f32> = u_xlat6;
        let x_609 : vec3<f32> = (vec3<f32>(x_605.z, x_605.y, x_605.w) / vec3<f32>(x_607.x, x_607.y, x_607.z));
        let x_610 : vec4<f32> = u_xlat8;
        u_xlat8 = vec4<f32>(x_609.x, x_609.y, x_609.z, x_610.w);
        let x_612 : vec4<f32> = u_xlat8;
        let x_614 : vec3<f32> = (vec3<f32>(x_612.x, x_612.y, x_612.z) + vec3<f32>(-2.5f, -0.5f, 1.5f));
        let x_615 : vec4<f32> = u_xlat8;
        u_xlat8 = vec4<f32>(x_614.x, x_614.y, x_614.z, x_615.w);
        let x_617 : vec4<f32> = u_xlat7;
        let x_620 : vec4<f32> = x_138.x_MainLightShadowmapSize;
        let x_622 : vec3<f32> = (vec3<f32>(x_617.y, x_617.x, x_617.z) * vec3<f32>(x_620.x, x_620.x, x_620.x));
        let x_623 : vec4<f32> = u_xlat7;
        u_xlat7 = vec4<f32>(x_622.x, x_622.y, x_622.z, x_623.w);
        let x_625 : vec4<f32> = u_xlat8;
        let x_628 : vec4<f32> = x_138.x_MainLightShadowmapSize;
        let x_630 : vec3<f32> = (vec3<f32>(x_625.x, x_625.y, x_625.z) * vec3<f32>(x_628.y, x_628.y, x_628.y));
        let x_631 : vec4<f32> = u_xlat8;
        u_xlat8 = vec4<f32>(x_630.x, x_630.y, x_630.z, x_631.w);
        let x_634 : f32 = u_xlat8.x;
        u_xlat7.w = x_634;
        let x_636 : vec4<f32> = u_xlat5;
        let x_639 : vec4<f32> = x_138.x_MainLightShadowmapSize;
        let x_642 : vec4<f32> = u_xlat7;
        u_xlat9 = ((vec4<f32>(x_636.x, x_636.y, x_636.x, x_636.y) * vec4<f32>(x_639.x, x_639.y, x_639.x, x_639.y)) + vec4<f32>(x_642.y, x_642.w, x_642.x, x_642.w));
        let x_645 : vec4<f32> = u_xlat5;
        let x_648 : vec4<f32> = x_138.x_MainLightShadowmapSize;
        let x_651 : vec4<f32> = u_xlat7;
        u_xlat49 = ((vec2<f32>(x_645.x, x_645.y) * vec2<f32>(x_648.x, x_648.y)) + vec2<f32>(x_651.z, x_651.w));
        let x_655 : f32 = u_xlat7.y;
        u_xlat8.w = x_655;
        let x_657 : vec4<f32> = u_xlat8;
        let x_658 : vec2<f32> = vec2<f32>(x_657.y, x_657.z);
        let x_659 : vec4<f32> = u_xlat7;
        u_xlat7 = vec4<f32>(x_659.x, x_658.x, x_659.z, x_658.y);
        let x_661 : vec4<f32> = u_xlat5;
        let x_664 : vec4<f32> = x_138.x_MainLightShadowmapSize;
        let x_667 : vec4<f32> = u_xlat7;
        u_xlat10 = ((vec4<f32>(x_661.x, x_661.y, x_661.x, x_661.y) * vec4<f32>(x_664.x, x_664.y, x_664.x, x_664.y)) + vec4<f32>(x_667.x, x_667.y, x_667.z, x_667.y));
        let x_670 : vec4<f32> = u_xlat5;
        let x_673 : vec4<f32> = x_138.x_MainLightShadowmapSize;
        let x_676 : vec4<f32> = u_xlat8;
        u_xlat8 = ((vec4<f32>(x_670.x, x_670.y, x_670.x, x_670.y) * vec4<f32>(x_673.x, x_673.y, x_673.x, x_673.y)) + vec4<f32>(x_676.w, x_676.y, x_676.w, x_676.z));
        let x_679 : vec4<f32> = u_xlat5;
        let x_682 : vec4<f32> = x_138.x_MainLightShadowmapSize;
        let x_685 : vec4<f32> = u_xlat7;
        u_xlat7 = ((vec4<f32>(x_679.x, x_679.y, x_679.x, x_679.y) * vec4<f32>(x_682.x, x_682.y, x_682.x, x_682.y)) + vec4<f32>(x_685.x, x_685.w, x_685.z, x_685.w));
        let x_689 : vec4<f32> = u_xlat6;
        let x_691 : vec4<f32> = u_xlat11;
        u_xlat12 = (vec4<f32>(x_689.x, x_689.x, x_689.x, x_689.y) * vec4<f32>(x_691.z, x_691.w, x_691.y, x_691.z));
        let x_695 : vec4<f32> = u_xlat6;
        let x_697 : vec4<f32> = u_xlat11;
        u_xlat13 = (vec4<f32>(x_695.y, x_695.y, x_695.z, x_695.z) * x_697);
        let x_701 : f32 = u_xlat6.z;
        let x_703 : f32 = u_xlat11.y;
        u_xlat70 = (x_701 * x_703);
        let x_706 : vec4<f32> = u_xlat9;
        let x_707 : vec2<f32> = vec2<f32>(x_706.x, x_706.y);
        let x_709 : f32 = u_xlat4.z;
        txVec4 = vec3<f32>(x_707.x, x_707.y, x_709);
        let x_716 : vec3<f32> = txVec4;
        let x_718 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_716.xy, x_716.z);
        u_xlat5.x = x_718;
        let x_721 : vec4<f32> = u_xlat9;
        let x_722 : vec2<f32> = vec2<f32>(x_721.z, x_721.w);
        let x_724 : f32 = u_xlat4.z;
        txVec5 = vec3<f32>(x_722.x, x_722.y, x_724);
        let x_732 : vec3<f32> = txVec5;
        let x_734 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_732.xy, x_732.z);
        u_xlat27.x = x_734;
        let x_737 : f32 = u_xlat27.x;
        let x_739 : f32 = u_xlat12.y;
        u_xlat27.x = (x_737 * x_739);
        let x_743 : f32 = u_xlat12.x;
        let x_745 : f32 = u_xlat5.x;
        let x_748 : f32 = u_xlat27.x;
        u_xlat5.x = ((x_743 * x_745) + x_748);
        let x_752 : vec2<f32> = u_xlat49;
        let x_754 : f32 = u_xlat4.z;
        txVec6 = vec3<f32>(x_752.x, x_752.y, x_754);
        let x_761 : vec3<f32> = txVec6;
        let x_763 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_761.xy, x_761.z);
        u_xlat27.x = x_763;
        let x_766 : f32 = u_xlat12.z;
        let x_768 : f32 = u_xlat27.x;
        let x_771 : f32 = u_xlat5.x;
        u_xlat5.x = ((x_766 * x_768) + x_771);
        let x_775 : vec4<f32> = u_xlat8;
        let x_776 : vec2<f32> = vec2<f32>(x_775.x, x_775.y);
        let x_778 : f32 = u_xlat4.z;
        txVec7 = vec3<f32>(x_776.x, x_776.y, x_778);
        let x_785 : vec3<f32> = txVec7;
        let x_787 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_785.xy, x_785.z);
        u_xlat27.x = x_787;
        let x_790 : f32 = u_xlat12.w;
        let x_792 : f32 = u_xlat27.x;
        let x_795 : f32 = u_xlat5.x;
        u_xlat5.x = ((x_790 * x_792) + x_795);
        let x_799 : vec4<f32> = u_xlat10;
        let x_800 : vec2<f32> = vec2<f32>(x_799.x, x_799.y);
        let x_802 : f32 = u_xlat4.z;
        txVec8 = vec3<f32>(x_800.x, x_800.y, x_802);
        let x_809 : vec3<f32> = txVec8;
        let x_811 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_809.xy, x_809.z);
        u_xlat27.x = x_811;
        let x_814 : f32 = u_xlat13.x;
        let x_816 : f32 = u_xlat27.x;
        let x_819 : f32 = u_xlat5.x;
        u_xlat5.x = ((x_814 * x_816) + x_819);
        let x_823 : vec4<f32> = u_xlat10;
        let x_824 : vec2<f32> = vec2<f32>(x_823.z, x_823.w);
        let x_826 : f32 = u_xlat4.z;
        txVec9 = vec3<f32>(x_824.x, x_824.y, x_826);
        let x_833 : vec3<f32> = txVec9;
        let x_835 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_833.xy, x_833.z);
        u_xlat27.x = x_835;
        let x_838 : f32 = u_xlat13.y;
        let x_840 : f32 = u_xlat27.x;
        let x_843 : f32 = u_xlat5.x;
        u_xlat5.x = ((x_838 * x_840) + x_843);
        let x_847 : vec4<f32> = u_xlat8;
        let x_848 : vec2<f32> = vec2<f32>(x_847.z, x_847.w);
        let x_850 : f32 = u_xlat4.z;
        txVec10 = vec3<f32>(x_848.x, x_848.y, x_850);
        let x_857 : vec3<f32> = txVec10;
        let x_859 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_857.xy, x_857.z);
        u_xlat27.x = x_859;
        let x_862 : f32 = u_xlat13.z;
        let x_864 : f32 = u_xlat27.x;
        let x_867 : f32 = u_xlat5.x;
        u_xlat5.x = ((x_862 * x_864) + x_867);
        let x_871 : vec4<f32> = u_xlat7;
        let x_872 : vec2<f32> = vec2<f32>(x_871.x, x_871.y);
        let x_874 : f32 = u_xlat4.z;
        txVec11 = vec3<f32>(x_872.x, x_872.y, x_874);
        let x_881 : vec3<f32> = txVec11;
        let x_883 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_881.xy, x_881.z);
        u_xlat27.x = x_883;
        let x_886 : f32 = u_xlat13.w;
        let x_888 : f32 = u_xlat27.x;
        let x_891 : f32 = u_xlat5.x;
        u_xlat5.x = ((x_886 * x_888) + x_891);
        let x_895 : vec4<f32> = u_xlat7;
        let x_896 : vec2<f32> = vec2<f32>(x_895.z, x_895.w);
        let x_898 : f32 = u_xlat4.z;
        txVec12 = vec3<f32>(x_896.x, x_896.y, x_898);
        let x_905 : vec3<f32> = txVec12;
        let x_907 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_905.xy, x_905.z);
        u_xlat27.x = x_907;
        let x_909 : f32 = u_xlat70;
        let x_911 : f32 = u_xlat27.x;
        let x_914 : f32 = u_xlat5.x;
        u_xlat68 = ((x_909 * x_911) + x_914);
      } else {
        let x_917 : vec4<f32> = u_xlat4;
        let x_920 : vec4<f32> = x_138.x_MainLightShadowmapSize;
        let x_923 : vec2<f32> = ((vec2<f32>(x_917.x, x_917.y) * vec2<f32>(x_920.z, x_920.w)) + vec2<f32>(0.5f, 0.5f));
        let x_924 : vec4<f32> = u_xlat5;
        u_xlat5 = vec4<f32>(x_923.x, x_923.y, x_924.z, x_924.w);
        let x_926 : vec4<f32> = u_xlat5;
        let x_928 : vec2<f32> = floor(vec2<f32>(x_926.x, x_926.y));
        let x_929 : vec4<f32> = u_xlat5;
        u_xlat5 = vec4<f32>(x_928.x, x_928.y, x_929.z, x_929.w);
        let x_931 : vec4<f32> = u_xlat4;
        let x_934 : vec4<f32> = x_138.x_MainLightShadowmapSize;
        let x_937 : vec4<f32> = u_xlat5;
        u_xlat49 = ((vec2<f32>(x_931.x, x_931.y) * vec2<f32>(x_934.z, x_934.w)) + -(vec2<f32>(x_937.x, x_937.y)));
        let x_941 : vec2<f32> = u_xlat49;
        u_xlat6 = (vec4<f32>(x_941.x, x_941.x, x_941.y, x_941.y) + vec4<f32>(0.5f, 1.0f, 0.5f, 1.0f));
        let x_944 : vec4<f32> = u_xlat6;
        let x_946 : vec4<f32> = u_xlat6;
        u_xlat7 = (vec4<f32>(x_944.x, x_944.x, x_944.z, x_944.z) * vec4<f32>(x_946.x, x_946.x, x_946.z, x_946.z));
        let x_949 : vec4<f32> = u_xlat7;
        let x_953 : vec2<f32> = (vec2<f32>(x_949.y, x_949.w) * vec2<f32>(0.040816002f, 0.040816002f));
        let x_954 : vec4<f32> = u_xlat8;
        u_xlat8 = vec4<f32>(x_954.x, x_953.x, x_954.z, x_953.y);
        let x_956 : vec4<f32> = u_xlat7;
        let x_959 : vec2<f32> = u_xlat49;
        let x_961 : vec2<f32> = ((vec2<f32>(x_956.x, x_956.z) * vec2<f32>(0.5f, 0.5f)) + -(x_959));
        let x_962 : vec4<f32> = u_xlat6;
        u_xlat6 = vec4<f32>(x_961.x, x_962.y, x_961.y, x_962.w);
        let x_964 : vec2<f32> = u_xlat49;
        let x_966 : vec2<f32> = (-(x_964) + vec2<f32>(1.0f, 1.0f));
        let x_967 : vec4<f32> = u_xlat7;
        u_xlat7 = vec4<f32>(x_966.x, x_966.y, x_967.z, x_967.w);
        let x_969 : vec2<f32> = u_xlat49;
        u_xlat51 = min(x_969, vec2<f32>(0.0f, 0.0f));
        let x_971 : vec2<f32> = u_xlat51;
        let x_973 : vec2<f32> = u_xlat51;
        let x_975 : vec4<f32> = u_xlat7;
        let x_977 : vec2<f32> = ((-(x_971) * x_973) + vec2<f32>(x_975.x, x_975.y));
        let x_978 : vec4<f32> = u_xlat7;
        u_xlat7 = vec4<f32>(x_977.x, x_977.y, x_978.z, x_978.w);
        let x_980 : vec2<f32> = u_xlat49;
        u_xlat51 = max(x_980, vec2<f32>(0.0f, 0.0f));
        let x_983 : vec2<f32> = u_xlat51;
        let x_985 : vec2<f32> = u_xlat51;
        let x_987 : vec4<f32> = u_xlat6;
        let x_989 : vec2<f32> = ((-(x_983) * x_985) + vec2<f32>(x_987.y, x_987.w));
        let x_990 : vec3<f32> = u_xlat28;
        u_xlat28 = vec3<f32>(x_989.x, x_990.y, x_989.y);
        let x_992 : vec4<f32> = u_xlat7;
        let x_995 : vec2<f32> = (vec2<f32>(x_992.x, x_992.y) + vec2<f32>(2.0f, 2.0f));
        let x_996 : vec4<f32> = u_xlat7;
        u_xlat7 = vec4<f32>(x_995.x, x_995.y, x_996.z, x_996.w);
        let x_998 : vec3<f32> = u_xlat28;
        let x_1000 : vec2<f32> = (vec2<f32>(x_998.x, x_998.z) + vec2<f32>(2.0f, 2.0f));
        let x_1001 : vec4<f32> = u_xlat6;
        u_xlat6 = vec4<f32>(x_1001.x, x_1000.x, x_1001.z, x_1000.y);
        let x_1004 : f32 = u_xlat6.y;
        u_xlat9.z = (x_1004 * 0.081632003f);
        let x_1008 : vec4<f32> = u_xlat6;
        let x_1011 : vec3<f32> = (vec3<f32>(x_1008.z, x_1008.x, x_1008.w) * vec3<f32>(0.081632003f, 0.081632003f, 0.081632003f));
        let x_1012 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_1011.x, x_1011.y, x_1011.z, x_1012.w);
        let x_1014 : vec4<f32> = u_xlat7;
        let x_1017 : vec2<f32> = (vec2<f32>(x_1014.x, x_1014.y) * vec2<f32>(0.081632003f, 0.081632003f));
        let x_1018 : vec4<f32> = u_xlat6;
        u_xlat6 = vec4<f32>(x_1017.x, x_1017.y, x_1018.z, x_1018.w);
        let x_1021 : f32 = u_xlat10.y;
        u_xlat9.x = x_1021;
        let x_1023 : vec2<f32> = u_xlat49;
        let x_1030 : vec2<f32> = ((vec2<f32>(x_1023.x, x_1023.x) * vec2<f32>(-0.081632003f, 0.081632003f)) + vec2<f32>(0.163264006f, 0.081632003f));
        let x_1031 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_1031.x, x_1030.x, x_1031.z, x_1030.y);
        let x_1033 : vec2<f32> = u_xlat49;
        let x_1037 : vec2<f32> = ((vec2<f32>(x_1033.x, x_1033.x) * vec2<f32>(-0.081632003f, 0.081632003f)) + vec2<f32>(0.081632003f, 0.163264006f));
        let x_1038 : vec4<f32> = u_xlat7;
        u_xlat7 = vec4<f32>(x_1037.x, x_1038.y, x_1037.y, x_1038.w);
        let x_1041 : f32 = u_xlat6.x;
        u_xlat7.y = x_1041;
        let x_1044 : f32 = u_xlat8.y;
        u_xlat7.w = x_1044;
        let x_1046 : vec4<f32> = u_xlat7;
        let x_1047 : vec4<f32> = u_xlat9;
        u_xlat9 = (x_1046 + x_1047);
        let x_1049 : vec2<f32> = u_xlat49;
        let x_1052 : vec2<f32> = ((vec2<f32>(x_1049.y, x_1049.y) * vec2<f32>(-0.081632003f, 0.081632003f)) + vec2<f32>(0.163264006f, 0.081632003f));
        let x_1053 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_1053.x, x_1052.x, x_1053.z, x_1052.y);
        let x_1055 : vec2<f32> = u_xlat49;
        let x_1058 : vec2<f32> = ((vec2<f32>(x_1055.y, x_1055.y) * vec2<f32>(-0.081632003f, 0.081632003f)) + vec2<f32>(0.081632003f, 0.163264006f));
        let x_1059 : vec4<f32> = u_xlat8;
        u_xlat8 = vec4<f32>(x_1058.x, x_1059.y, x_1058.y, x_1059.w);
        let x_1062 : f32 = u_xlat6.y;
        u_xlat8.y = x_1062;
        let x_1064 : vec4<f32> = u_xlat8;
        let x_1065 : vec4<f32> = u_xlat10;
        u_xlat6 = (x_1064 + x_1065);
        let x_1067 : vec4<f32> = u_xlat7;
        let x_1068 : vec4<f32> = u_xlat9;
        u_xlat7 = (x_1067 / x_1068);
        let x_1070 : vec4<f32> = u_xlat7;
        u_xlat7 = (x_1070 + vec4<f32>(-3.5f, -1.5f, 0.5f, 2.5f));
        let x_1076 : vec4<f32> = u_xlat8;
        let x_1077 : vec4<f32> = u_xlat6;
        u_xlat8 = (x_1076 / x_1077);
        let x_1079 : vec4<f32> = u_xlat8;
        u_xlat8 = (x_1079 + vec4<f32>(-3.5f, -1.5f, 0.5f, 2.5f));
        let x_1081 : vec4<f32> = u_xlat7;
        let x_1084 : vec4<f32> = x_138.x_MainLightShadowmapSize;
        u_xlat7 = (vec4<f32>(x_1081.w, x_1081.x, x_1081.y, x_1081.z) * vec4<f32>(x_1084.x, x_1084.x, x_1084.x, x_1084.x));
        let x_1087 : vec4<f32> = u_xlat8;
        let x_1090 : vec4<f32> = x_138.x_MainLightShadowmapSize;
        u_xlat8 = (vec4<f32>(x_1087.x, x_1087.w, x_1087.y, x_1087.z) * vec4<f32>(x_1090.y, x_1090.y, x_1090.y, x_1090.y));
        let x_1093 : vec4<f32> = u_xlat7;
        let x_1094 : vec3<f32> = vec3<f32>(x_1093.y, x_1093.z, x_1093.w);
        let x_1095 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_1094.x, x_1095.y, x_1094.y, x_1094.z);
        let x_1098 : f32 = u_xlat8.x;
        u_xlat10.y = x_1098;
        let x_1100 : vec4<f32> = u_xlat5;
        let x_1103 : vec4<f32> = x_138.x_MainLightShadowmapSize;
        let x_1106 : vec4<f32> = u_xlat10;
        u_xlat11 = ((vec4<f32>(x_1100.x, x_1100.y, x_1100.x, x_1100.y) * vec4<f32>(x_1103.x, x_1103.y, x_1103.x, x_1103.y)) + vec4<f32>(x_1106.x, x_1106.y, x_1106.z, x_1106.y));
        let x_1109 : vec4<f32> = u_xlat5;
        let x_1112 : vec4<f32> = x_138.x_MainLightShadowmapSize;
        let x_1115 : vec4<f32> = u_xlat10;
        u_xlat49 = ((vec2<f32>(x_1109.x, x_1109.y) * vec2<f32>(x_1112.x, x_1112.y)) + vec2<f32>(x_1115.w, x_1115.y));
        let x_1119 : f32 = u_xlat10.y;
        u_xlat7.y = x_1119;
        let x_1122 : f32 = u_xlat8.z;
        u_xlat10.y = x_1122;
        let x_1124 : vec4<f32> = u_xlat5;
        let x_1127 : vec4<f32> = x_138.x_MainLightShadowmapSize;
        let x_1130 : vec4<f32> = u_xlat10;
        u_xlat12 = ((vec4<f32>(x_1124.x, x_1124.y, x_1124.x, x_1124.y) * vec4<f32>(x_1127.x, x_1127.y, x_1127.x, x_1127.y)) + vec4<f32>(x_1130.x, x_1130.y, x_1130.z, x_1130.y));
        let x_1133 : vec4<f32> = u_xlat5;
        let x_1136 : vec4<f32> = x_138.x_MainLightShadowmapSize;
        let x_1139 : vec4<f32> = u_xlat10;
        let x_1141 : vec2<f32> = ((vec2<f32>(x_1133.x, x_1133.y) * vec2<f32>(x_1136.x, x_1136.y)) + vec2<f32>(x_1139.w, x_1139.y));
        let x_1142 : vec4<f32> = u_xlat13;
        u_xlat13 = vec4<f32>(x_1141.x, x_1141.y, x_1142.z, x_1142.w);
        let x_1145 : f32 = u_xlat10.y;
        u_xlat7.z = x_1145;
        let x_1148 : vec4<f32> = u_xlat5;
        let x_1151 : vec4<f32> = x_138.x_MainLightShadowmapSize;
        let x_1154 : vec4<f32> = u_xlat7;
        u_xlat14 = ((vec4<f32>(x_1148.x, x_1148.y, x_1148.x, x_1148.y) * vec4<f32>(x_1151.x, x_1151.y, x_1151.x, x_1151.y)) + vec4<f32>(x_1154.x, x_1154.y, x_1154.x, x_1154.z));
        let x_1158 : f32 = u_xlat8.w;
        u_xlat10.y = x_1158;
        let x_1161 : vec4<f32> = u_xlat5;
        let x_1164 : vec4<f32> = x_138.x_MainLightShadowmapSize;
        let x_1167 : vec4<f32> = u_xlat10;
        u_xlat15 = ((vec4<f32>(x_1161.x, x_1161.y, x_1161.x, x_1161.y) * vec4<f32>(x_1164.x, x_1164.y, x_1164.x, x_1164.y)) + vec4<f32>(x_1167.x, x_1167.y, x_1167.z, x_1167.y));
        let x_1171 : vec4<f32> = u_xlat5;
        let x_1174 : vec4<f32> = x_138.x_MainLightShadowmapSize;
        let x_1177 : vec4<f32> = u_xlat10;
        u_xlat29 = ((vec2<f32>(x_1171.x, x_1171.y) * vec2<f32>(x_1174.x, x_1174.y)) + vec2<f32>(x_1177.w, x_1177.y));
        let x_1181 : f32 = u_xlat10.y;
        u_xlat7.w = x_1181;
        let x_1184 : vec4<f32> = u_xlat5;
        let x_1187 : vec4<f32> = x_138.x_MainLightShadowmapSize;
        let x_1190 : vec4<f32> = u_xlat7;
        u_xlat57 = ((vec2<f32>(x_1184.x, x_1184.y) * vec2<f32>(x_1187.x, x_1187.y)) + vec2<f32>(x_1190.x, x_1190.w));
        let x_1193 : vec4<f32> = u_xlat10;
        let x_1194 : vec3<f32> = vec3<f32>(x_1193.x, x_1193.z, x_1193.w);
        let x_1195 : vec4<f32> = u_xlat8;
        u_xlat8 = vec4<f32>(x_1194.x, x_1195.y, x_1194.y, x_1194.z);
        let x_1197 : vec4<f32> = u_xlat5;
        let x_1200 : vec4<f32> = x_138.x_MainLightShadowmapSize;
        let x_1203 : vec4<f32> = u_xlat8;
        u_xlat10 = ((vec4<f32>(x_1197.x, x_1197.y, x_1197.x, x_1197.y) * vec4<f32>(x_1200.x, x_1200.y, x_1200.x, x_1200.y)) + vec4<f32>(x_1203.x, x_1203.y, x_1203.z, x_1203.y));
        let x_1207 : vec4<f32> = u_xlat5;
        let x_1210 : vec4<f32> = x_138.x_MainLightShadowmapSize;
        let x_1213 : vec4<f32> = u_xlat8;
        u_xlat52 = ((vec2<f32>(x_1207.x, x_1207.y) * vec2<f32>(x_1210.x, x_1210.y)) + vec2<f32>(x_1213.w, x_1213.y));
        let x_1217 : f32 = u_xlat7.x;
        u_xlat8.x = x_1217;
        let x_1219 : vec4<f32> = u_xlat5;
        let x_1222 : vec4<f32> = x_138.x_MainLightShadowmapSize;
        let x_1225 : vec4<f32> = u_xlat8;
        let x_1227 : vec2<f32> = ((vec2<f32>(x_1219.x, x_1219.y) * vec2<f32>(x_1222.x, x_1222.y)) + vec2<f32>(x_1225.x, x_1225.y));
        let x_1228 : vec4<f32> = u_xlat5;
        u_xlat5 = vec4<f32>(x_1227.x, x_1227.y, x_1228.z, x_1228.w);
        let x_1231 : vec4<f32> = u_xlat6;
        let x_1233 : vec4<f32> = u_xlat9;
        u_xlat16 = (vec4<f32>(x_1231.x, x_1231.x, x_1231.x, x_1231.x) * x_1233);
        let x_1236 : vec4<f32> = u_xlat6;
        let x_1238 : vec4<f32> = u_xlat9;
        u_xlat17 = (vec4<f32>(x_1236.y, x_1236.y, x_1236.y, x_1236.y) * x_1238);
        let x_1241 : vec4<f32> = u_xlat6;
        let x_1243 : vec4<f32> = u_xlat9;
        u_xlat18 = (vec4<f32>(x_1241.z, x_1241.z, x_1241.z, x_1241.z) * x_1243);
        let x_1245 : vec4<f32> = u_xlat6;
        let x_1247 : vec4<f32> = u_xlat9;
        u_xlat6 = (vec4<f32>(x_1245.w, x_1245.w, x_1245.w, x_1245.w) * x_1247);
        let x_1250 : vec4<f32> = u_xlat11;
        let x_1251 : vec2<f32> = vec2<f32>(x_1250.x, x_1250.y);
        let x_1253 : f32 = u_xlat4.z;
        txVec13 = vec3<f32>(x_1251.x, x_1251.y, x_1253);
        let x_1260 : vec3<f32> = txVec13;
        let x_1262 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1260.xy, x_1260.z);
        u_xlat70 = x_1262;
        let x_1264 : vec4<f32> = u_xlat11;
        let x_1265 : vec2<f32> = vec2<f32>(x_1264.z, x_1264.w);
        let x_1267 : f32 = u_xlat4.z;
        txVec14 = vec3<f32>(x_1265.x, x_1265.y, x_1267);
        let x_1274 : vec3<f32> = txVec14;
        let x_1276 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1274.xy, x_1274.z);
        u_xlat7.x = x_1276;
        let x_1279 : f32 = u_xlat7.x;
        let x_1281 : f32 = u_xlat16.y;
        u_xlat7.x = (x_1279 * x_1281);
        let x_1285 : f32 = u_xlat16.x;
        let x_1286 : f32 = u_xlat70;
        let x_1289 : f32 = u_xlat7.x;
        u_xlat70 = ((x_1285 * x_1286) + x_1289);
        let x_1292 : vec2<f32> = u_xlat49;
        let x_1294 : f32 = u_xlat4.z;
        txVec15 = vec3<f32>(x_1292.x, x_1292.y, x_1294);
        let x_1301 : vec3<f32> = txVec15;
        let x_1303 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1301.xy, x_1301.z);
        u_xlat49.x = x_1303;
        let x_1306 : f32 = u_xlat16.z;
        let x_1308 : f32 = u_xlat49.x;
        let x_1310 : f32 = u_xlat70;
        u_xlat70 = ((x_1306 * x_1308) + x_1310);
        let x_1313 : vec4<f32> = u_xlat14;
        let x_1314 : vec2<f32> = vec2<f32>(x_1313.x, x_1313.y);
        let x_1316 : f32 = u_xlat4.z;
        txVec16 = vec3<f32>(x_1314.x, x_1314.y, x_1316);
        let x_1323 : vec3<f32> = txVec16;
        let x_1325 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1323.xy, x_1323.z);
        u_xlat49.x = x_1325;
        let x_1328 : f32 = u_xlat16.w;
        let x_1330 : f32 = u_xlat49.x;
        let x_1332 : f32 = u_xlat70;
        u_xlat70 = ((x_1328 * x_1330) + x_1332);
        let x_1335 : vec4<f32> = u_xlat12;
        let x_1336 : vec2<f32> = vec2<f32>(x_1335.x, x_1335.y);
        let x_1338 : f32 = u_xlat4.z;
        txVec17 = vec3<f32>(x_1336.x, x_1336.y, x_1338);
        let x_1345 : vec3<f32> = txVec17;
        let x_1347 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1345.xy, x_1345.z);
        u_xlat49.x = x_1347;
        let x_1350 : f32 = u_xlat17.x;
        let x_1352 : f32 = u_xlat49.x;
        let x_1354 : f32 = u_xlat70;
        u_xlat70 = ((x_1350 * x_1352) + x_1354);
        let x_1357 : vec4<f32> = u_xlat12;
        let x_1358 : vec2<f32> = vec2<f32>(x_1357.z, x_1357.w);
        let x_1360 : f32 = u_xlat4.z;
        txVec18 = vec3<f32>(x_1358.x, x_1358.y, x_1360);
        let x_1367 : vec3<f32> = txVec18;
        let x_1369 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1367.xy, x_1367.z);
        u_xlat49.x = x_1369;
        let x_1372 : f32 = u_xlat17.y;
        let x_1374 : f32 = u_xlat49.x;
        let x_1376 : f32 = u_xlat70;
        u_xlat70 = ((x_1372 * x_1374) + x_1376);
        let x_1379 : vec4<f32> = u_xlat13;
        let x_1380 : vec2<f32> = vec2<f32>(x_1379.x, x_1379.y);
        let x_1382 : f32 = u_xlat4.z;
        txVec19 = vec3<f32>(x_1380.x, x_1380.y, x_1382);
        let x_1389 : vec3<f32> = txVec19;
        let x_1391 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1389.xy, x_1389.z);
        u_xlat49.x = x_1391;
        let x_1394 : f32 = u_xlat17.z;
        let x_1396 : f32 = u_xlat49.x;
        let x_1398 : f32 = u_xlat70;
        u_xlat70 = ((x_1394 * x_1396) + x_1398);
        let x_1401 : vec4<f32> = u_xlat14;
        let x_1402 : vec2<f32> = vec2<f32>(x_1401.z, x_1401.w);
        let x_1404 : f32 = u_xlat4.z;
        txVec20 = vec3<f32>(x_1402.x, x_1402.y, x_1404);
        let x_1411 : vec3<f32> = txVec20;
        let x_1413 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1411.xy, x_1411.z);
        u_xlat49.x = x_1413;
        let x_1416 : f32 = u_xlat17.w;
        let x_1418 : f32 = u_xlat49.x;
        let x_1420 : f32 = u_xlat70;
        u_xlat70 = ((x_1416 * x_1418) + x_1420);
        let x_1423 : vec4<f32> = u_xlat15;
        let x_1424 : vec2<f32> = vec2<f32>(x_1423.x, x_1423.y);
        let x_1426 : f32 = u_xlat4.z;
        txVec21 = vec3<f32>(x_1424.x, x_1424.y, x_1426);
        let x_1433 : vec3<f32> = txVec21;
        let x_1435 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1433.xy, x_1433.z);
        u_xlat49.x = x_1435;
        let x_1438 : f32 = u_xlat18.x;
        let x_1440 : f32 = u_xlat49.x;
        let x_1442 : f32 = u_xlat70;
        u_xlat70 = ((x_1438 * x_1440) + x_1442);
        let x_1445 : vec4<f32> = u_xlat15;
        let x_1446 : vec2<f32> = vec2<f32>(x_1445.z, x_1445.w);
        let x_1448 : f32 = u_xlat4.z;
        txVec22 = vec3<f32>(x_1446.x, x_1446.y, x_1448);
        let x_1455 : vec3<f32> = txVec22;
        let x_1457 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1455.xy, x_1455.z);
        u_xlat49.x = x_1457;
        let x_1460 : f32 = u_xlat18.y;
        let x_1462 : f32 = u_xlat49.x;
        let x_1464 : f32 = u_xlat70;
        u_xlat70 = ((x_1460 * x_1462) + x_1464);
        let x_1467 : vec2<f32> = u_xlat29;
        let x_1469 : f32 = u_xlat4.z;
        txVec23 = vec3<f32>(x_1467.x, x_1467.y, x_1469);
        let x_1476 : vec3<f32> = txVec23;
        let x_1478 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1476.xy, x_1476.z);
        u_xlat49.x = x_1478;
        let x_1481 : f32 = u_xlat18.z;
        let x_1483 : f32 = u_xlat49.x;
        let x_1485 : f32 = u_xlat70;
        u_xlat70 = ((x_1481 * x_1483) + x_1485);
        let x_1488 : vec2<f32> = u_xlat57;
        let x_1490 : f32 = u_xlat4.z;
        txVec24 = vec3<f32>(x_1488.x, x_1488.y, x_1490);
        let x_1497 : vec3<f32> = txVec24;
        let x_1499 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1497.xy, x_1497.z);
        u_xlat49.x = x_1499;
        let x_1502 : f32 = u_xlat18.w;
        let x_1504 : f32 = u_xlat49.x;
        let x_1506 : f32 = u_xlat70;
        u_xlat70 = ((x_1502 * x_1504) + x_1506);
        let x_1509 : vec4<f32> = u_xlat10;
        let x_1510 : vec2<f32> = vec2<f32>(x_1509.x, x_1509.y);
        let x_1512 : f32 = u_xlat4.z;
        txVec25 = vec3<f32>(x_1510.x, x_1510.y, x_1512);
        let x_1519 : vec3<f32> = txVec25;
        let x_1521 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1519.xy, x_1519.z);
        u_xlat49.x = x_1521;
        let x_1524 : f32 = u_xlat6.x;
        let x_1526 : f32 = u_xlat49.x;
        let x_1528 : f32 = u_xlat70;
        u_xlat70 = ((x_1524 * x_1526) + x_1528);
        let x_1531 : vec4<f32> = u_xlat10;
        let x_1532 : vec2<f32> = vec2<f32>(x_1531.z, x_1531.w);
        let x_1534 : f32 = u_xlat4.z;
        txVec26 = vec3<f32>(x_1532.x, x_1532.y, x_1534);
        let x_1541 : vec3<f32> = txVec26;
        let x_1543 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1541.xy, x_1541.z);
        u_xlat49.x = x_1543;
        let x_1546 : f32 = u_xlat6.y;
        let x_1548 : f32 = u_xlat49.x;
        let x_1550 : f32 = u_xlat70;
        u_xlat70 = ((x_1546 * x_1548) + x_1550);
        let x_1553 : vec2<f32> = u_xlat52;
        let x_1555 : f32 = u_xlat4.z;
        txVec27 = vec3<f32>(x_1553.x, x_1553.y, x_1555);
        let x_1562 : vec3<f32> = txVec27;
        let x_1564 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1562.xy, x_1562.z);
        u_xlat49.x = x_1564;
        let x_1567 : f32 = u_xlat6.z;
        let x_1569 : f32 = u_xlat49.x;
        let x_1571 : f32 = u_xlat70;
        u_xlat70 = ((x_1567 * x_1569) + x_1571);
        let x_1574 : vec4<f32> = u_xlat5;
        let x_1575 : vec2<f32> = vec2<f32>(x_1574.x, x_1574.y);
        let x_1577 : f32 = u_xlat4.z;
        txVec28 = vec3<f32>(x_1575.x, x_1575.y, x_1577);
        let x_1584 : vec3<f32> = txVec28;
        let x_1586 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1584.xy, x_1584.z);
        u_xlat5.x = x_1586;
        let x_1589 : f32 = u_xlat6.w;
        let x_1591 : f32 = u_xlat5.x;
        let x_1593 : f32 = u_xlat70;
        u_xlat68 = ((x_1589 * x_1591) + x_1593);
      }
    }
  } else {
    let x_1597 : vec4<f32> = u_xlat4;
    let x_1598 : vec2<f32> = vec2<f32>(x_1597.x, x_1597.y);
    let x_1600 : f32 = u_xlat4.z;
    txVec29 = vec3<f32>(x_1598.x, x_1598.y, x_1600);
    let x_1607 : vec3<f32> = txVec29;
    let x_1609 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1607.xy, x_1607.z);
    u_xlat68 = x_1609;
  }
  let x_1611 : f32 = x_138.x_MainLightShadowParams.x;
  u_xlat70 = (-(x_1611) + 1.0f);
  let x_1614 : f32 = u_xlat68;
  let x_1616 : f32 = x_138.x_MainLightShadowParams.x;
  let x_1618 : f32 = u_xlat70;
  u_xlat68 = ((x_1614 * x_1616) + x_1618);
  let x_1622 : f32 = u_xlat4.z;
  u_xlatb5 = (0.0f >= x_1622);
  let x_1626 : f32 = u_xlat4.z;
  u_xlatb27 = (x_1626 >= 1.0f);
  let x_1628 : bool = u_xlatb27;
  let x_1629 : bool = u_xlatb5;
  u_xlatb5 = (x_1628 | x_1629);
  let x_1631 : bool = u_xlatb5;
  let x_1632 : f32 = u_xlat68;
  u_xlat68 = select(x_1632, 1.0f, x_1631);
  let x_1634 : vec3<f32> = u_xlat0;
  let x_1636 : vec4<f32> = x_66.x_MainLightPosition;
  u_xlat0.x = dot(x_1634, -(vec3<f32>(x_1636.x, x_1636.y, x_1636.z)));
  let x_1642 : f32 = u_xlat0.x;
  u_xlat0.x = clamp(x_1642, 0.0f, 1.0f);
  let x_1645 : f32 = u_xlat68;
  let x_1648 : vec4<f32> = x_66.x_MainLightColor;
  u_xlat27 = (vec3<f32>(x_1645, x_1645, x_1645) * vec3<f32>(x_1648.x, x_1648.y, x_1648.z));
  let x_1651 : vec3<f32> = u_xlat0;
  let x_1653 : vec3<f32> = u_xlat27;
  u_xlat0 = (vec3<f32>(x_1651.x, x_1651.x, x_1651.x) * x_1653);
  let x_1655 : vec3<f32> = u_xlat0;
  let x_1656 : vec4<f32> = u_xlat1;
  u_xlat0 = (x_1655 * vec3<f32>(x_1656.x, x_1656.y, x_1656.z));
  let x_1661 : f32 = u_xlat1.w;
  u_xlatb1 = (x_1661 >= 0.400000006f);
  let x_1664 : bool = u_xlatb1;
  if (x_1664) {
    let x_1669 : f32 = u_xlat1.w;
    x_1665 = x_1669;
  } else {
    x_1665 = 0.0f;
  }
  let x_1671 : f32 = x_1665;
  u_xlat1.x = x_1671;
  let x_1675 : f32 = u_xlat1.w;
  u_xlat23.x = (x_1675 + -0.400000006f);
  let x_1681 : f32 = u_xlat1.w;
  u_xlat45 = dpdxCoarse(x_1681);
  let x_1685 : f32 = u_xlat1.w;
  u_xlat67 = dpdyCoarse(x_1685);
  let x_1687 : f32 = u_xlat67;
  let x_1689 : f32 = u_xlat45;
  u_xlat45 = (abs(x_1687) + abs(x_1689));
  let x_1692 : f32 = u_xlat45;
  u_xlat45 = max(x_1692, 0.0001f);
  let x_1696 : f32 = u_xlat23.x;
  let x_1697 : f32 = u_xlat45;
  u_xlat23.x = (x_1696 / x_1697);
  let x_1701 : f32 = u_xlat23.x;
  u_xlat23.x = (x_1701 + 0.5f);
  let x_1705 : f32 = u_xlat23.x;
  u_xlat23.x = clamp(x_1705, 0.0f, 1.0f);
  let x_1710 : f32 = x_66.x_AlphaToMaskAvailable;
  u_xlatb45 = !((x_1710 == 0.0f));
  let x_1712 : bool = u_xlatb45;
  if (x_1712) {
    let x_1717 : f32 = u_xlat23.x;
    x_1713 = x_1717;
  } else {
    let x_1720 : f32 = u_xlat1.x;
    x_1713 = x_1720;
  }
  let x_1721 : f32 = x_1713;
  u_xlat1.x = x_1721;
  let x_1724 : f32 = u_xlat1.x;
  u_xlat23.x = (x_1724 + -0.0001f);
  let x_1732 : f32 = u_xlat23.x;
  u_xlatb23.x = (x_1732 < 0.0f);
  let x_1736 : bool = u_xlatb23.x;
  if (((select(0i, 1i, x_1736) * -1i) != 0i)) {
    discard;
  }
  let x_1746 : f32 = vs_INTERP2.w;
  u_xlatb23.x = (0.0f < x_1746);
  let x_1754 : f32 = x_1752.unity_WorldTransformParams.w;
  u_xlatb23.z = (x_1754 >= 0.0f);
  let x_1758 : bool = u_xlatb23.x;
  u_xlat23.x = select(-1.0f, 1.0f, x_1758);
  let x_1762 : bool = u_xlatb23.z;
  u_xlat23.z = select(-1.0f, 1.0f, x_1762);
  let x_1766 : f32 = u_xlat23.z;
  let x_1768 : f32 = u_xlat23.x;
  u_xlat23.x = (x_1766 * x_1768);
  let x_1771 : vec3<f32> = vs_INTERP1;
  let x_1773 : vec4<f32> = vs_INTERP2;
  u_xlat27 = (vec3<f32>(x_1771.z, x_1771.x, x_1771.y) * vec3<f32>(x_1773.y, x_1773.z, x_1773.x));
  let x_1776 : vec3<f32> = vs_INTERP1;
  let x_1778 : vec4<f32> = vs_INTERP2;
  let x_1781 : vec3<f32> = u_xlat27;
  u_xlat27 = ((vec3<f32>(x_1776.y, x_1776.z, x_1776.x) * vec3<f32>(x_1778.z, x_1778.x, x_1778.y)) + -(x_1781));
  let x_1784 : vec3<f32> = u_xlat23;
  let x_1786 : vec3<f32> = u_xlat27;
  u_xlat27 = (vec3<f32>(x_1784.x, x_1784.x, x_1784.x) * x_1786);
  let x_1788 : vec3<f32> = u_xlat25;
  let x_1790 : vec3<f32> = u_xlat27;
  u_xlat27 = (vec3<f32>(x_1788.y, x_1788.y, x_1788.y) * x_1790);
  let x_1792 : vec3<f32> = u_xlat25;
  let x_1794 : vec4<f32> = vs_INTERP2;
  let x_1797 : vec3<f32> = u_xlat27;
  u_xlat27 = ((vec3<f32>(x_1792.x, x_1792.x, x_1792.x) * vec3<f32>(x_1794.x, x_1794.y, x_1794.z)) + x_1797);
  let x_1799 : vec3<f32> = u_xlat25;
  let x_1801 : vec3<f32> = vs_INTERP1;
  let x_1803 : vec3<f32> = u_xlat27;
  u_xlat25 = ((vec3<f32>(x_1799.z, x_1799.z, x_1799.z) * x_1801) + x_1803);
  let x_1805 : vec3<f32> = u_xlat25;
  let x_1806 : vec3<f32> = u_xlat25;
  u_xlat23.x = dot(x_1805, x_1806);
  let x_1810 : f32 = u_xlat23.x;
  u_xlat23.x = inverseSqrt(x_1810);
  let x_1813 : vec3<f32> = u_xlat23;
  let x_1815 : vec3<f32> = u_xlat25;
  let x_1816 : vec3<f32> = (vec3<f32>(x_1813.x, x_1813.x, x_1813.x) * x_1815);
  let x_1817 : vec4<f32> = u_xlat6;
  u_xlat6 = vec4<f32>(x_1816.x, x_1816.y, x_1816.z, x_1817.w);
  let x_1820 : f32 = x_66.unity_OrthoParams.w;
  u_xlatb23.x = (x_1820 == 0.0f);
  let x_1823 : vec3<f32> = vs_INTERP0;
  let x_1827 : vec3<f32> = x_66.x_WorldSpaceCameraPos;
  u_xlat25 = (-(x_1823) + x_1827);
  let x_1829 : vec3<f32> = u_xlat25;
  let x_1830 : vec3<f32> = u_xlat25;
  u_xlat67 = dot(x_1829, x_1830);
  let x_1832 : f32 = u_xlat67;
  u_xlat67 = inverseSqrt(x_1832);
  let x_1834 : f32 = u_xlat67;
  let x_1836 : vec3<f32> = u_xlat25;
  u_xlat25 = (vec3<f32>(x_1834, x_1834, x_1834) * x_1836);
  let x_1839 : bool = u_xlatb23.x;
  if (x_1839) {
    let x_1844 : f32 = u_xlat25.x;
    x_1840 = x_1844;
  } else {
    let x_1848 : f32 = x_66.unity_MatrixV[0i].z;
    x_1840 = x_1848;
  }
  let x_1849 : f32 = x_1840;
  u_xlat7.x = x_1849;
  let x_1852 : bool = u_xlatb23.x;
  if (x_1852) {
    let x_1857 : f32 = u_xlat25.y;
    x_1853 = x_1857;
  } else {
    let x_1860 : f32 = x_66.unity_MatrixV[1i].z;
    x_1853 = x_1860;
  }
  let x_1861 : f32 = x_1853;
  u_xlat7.y = x_1861;
  let x_1864 : bool = u_xlatb23.x;
  if (x_1864) {
    let x_1869 : f32 = u_xlat25.z;
    x_1865 = x_1869;
  } else {
    let x_1872 : f32 = x_66.unity_MatrixV[2i].z;
    x_1865 = x_1872;
  }
  let x_1873 : f32 = x_1865;
  u_xlat7.z = x_1873;
  u_xlat6.w = 1.0f;
  let x_1878 : vec4<f32> = x_1752.unity_SHAr;
  let x_1879 : vec4<f32> = u_xlat6;
  u_xlat8.x = dot(x_1878, x_1879);
  let x_1884 : vec4<f32> = x_1752.unity_SHAg;
  let x_1885 : vec4<f32> = u_xlat6;
  u_xlat8.y = dot(x_1884, x_1885);
  let x_1890 : vec4<f32> = x_1752.unity_SHAb;
  let x_1891 : vec4<f32> = u_xlat6;
  u_xlat8.z = dot(x_1890, x_1891);
  let x_1894 : vec4<f32> = u_xlat6;
  let x_1896 : vec4<f32> = u_xlat6;
  u_xlat9 = (vec4<f32>(x_1894.y, x_1894.z, x_1894.z, x_1894.x) * vec4<f32>(x_1896.x, x_1896.y, x_1896.z, x_1896.z));
  let x_1901 : vec4<f32> = x_1752.unity_SHBr;
  let x_1902 : vec4<f32> = u_xlat9;
  u_xlat10.x = dot(x_1901, x_1902);
  let x_1907 : vec4<f32> = x_1752.unity_SHBg;
  let x_1908 : vec4<f32> = u_xlat9;
  u_xlat10.y = dot(x_1907, x_1908);
  let x_1913 : vec4<f32> = x_1752.unity_SHBb;
  let x_1914 : vec4<f32> = u_xlat9;
  u_xlat10.z = dot(x_1913, x_1914);
  let x_1918 : f32 = u_xlat6.y;
  let x_1920 : f32 = u_xlat6.y;
  u_xlat23.x = (x_1918 * x_1920);
  let x_1924 : f32 = u_xlat6.x;
  let x_1926 : f32 = u_xlat6.x;
  let x_1929 : f32 = u_xlat23.x;
  u_xlat23.x = ((x_1924 * x_1926) + -(x_1929));
  let x_1935 : vec4<f32> = x_1752.unity_SHC;
  let x_1937 : vec3<f32> = u_xlat23;
  let x_1940 : vec4<f32> = u_xlat10;
  u_xlat25 = ((vec3<f32>(x_1935.x, x_1935.y, x_1935.z) * vec3<f32>(x_1937.x, x_1937.x, x_1937.x)) + vec3<f32>(x_1940.x, x_1940.y, x_1940.z));
  let x_1943 : vec3<f32> = u_xlat25;
  let x_1944 : vec4<f32> = u_xlat8;
  u_xlat25 = (x_1943 + vec3<f32>(x_1944.x, x_1944.y, x_1944.z));
  let x_1947 : vec3<f32> = u_xlat25;
  u_xlat25 = max(x_1947, vec3<f32>(0.0f, 0.0f, 0.0f));
  let x_1950 : vec4<f32> = x_66.x_ScaledScreenParams;
  let x_1951 : vec2<f32> = vec2<f32>(x_1950.x, x_1950.y);
  let x_1955 : vec2<f32> = (vec2<f32>(1.0f, 1.0f) / vec2<f32>(x_1951.x, x_1951.y));
  let x_1956 : vec3<f32> = u_xlat23;
  u_xlat23 = vec3<f32>(x_1955.x, x_1956.y, x_1955.y);
  let x_1958 : vec3<f32> = u_xlat23;
  let x_1960 : vec4<f32> = hlslcc_FragCoord;
  let x_1962 : vec2<f32> = (vec2<f32>(x_1958.x, x_1958.z) * vec2<f32>(x_1960.x, x_1960.y));
  let x_1963 : vec4<f32> = u_xlat8;
  u_xlat8 = vec4<f32>(x_1962.x, x_1962.y, x_1963.z, x_1963.w);
  let x_1966 : f32 = u_xlat8.y;
  let x_1968 : f32 = x_66.x_ScaleBiasRt.x;
  let x_1971 : f32 = x_66.x_ScaleBiasRt.y;
  u_xlat23.x = ((x_1966 * x_1968) + x_1971);
  let x_1975 : f32 = u_xlat23.x;
  u_xlat8.z = (-(x_1975) + 1.0f);
  let x_1980 : f32 = u_xlat3.x;
  u_xlat3.x = x_1980;
  let x_1983 : f32 = u_xlat3.x;
  u_xlat3.x = clamp(x_1983, 0.0f, 1.0f);
  let x_1987 : f32 = u_xlat1.x;
  u_xlat1.x = min(x_1987, 1.0f);
  let x_1990 : vec3<f32> = u_xlat2;
  u_xlat2 = (x_1990 * vec3<f32>(0.959999979f, 0.959999979f, 0.959999979f));
  let x_1995 : f32 = u_xlat3.x;
  u_xlat23.x = (-(x_1995) + 1.0f);
  let x_2000 : f32 = u_xlat23.x;
  let x_2002 : f32 = u_xlat23.x;
  u_xlat67 = (x_2000 * x_2002);
  let x_2004 : f32 = u_xlat67;
  u_xlat67 = max(x_2004, 0.0078125f);
  let x_2007 : f32 = u_xlat67;
  let x_2008 : f32 = u_xlat67;
  u_xlat68 = (x_2007 * x_2008);
  let x_2011 : f32 = u_xlat3.x;
  u_xlat3.x = (x_2011 + 0.040000021f);
  let x_2016 : f32 = u_xlat3.x;
  u_xlat3.x = min(x_2016, 1.0f);
  let x_2019 : f32 = u_xlat67;
  u_xlat27.x = ((x_2019 * 4.0f) + 2.0f);
  let x_2028 : vec4<f32> = u_xlat8;
  let x_2031 : f32 = x_66.x_GlobalMipBias.x;
  let x_2032 : vec4<f32> = textureSampleBias(x_ScreenSpaceOcclusionTexture, sampler_ScreenSpaceOcclusionTexture, vec2<f32>(x_2028.x, x_2028.z), x_2031);
  u_xlat49.x = x_2032.x;
  let x_2037 : f32 = u_xlat49.x;
  u_xlat71 = (x_2037 + -1.0f);
  let x_2040 : f32 = x_66.x_AmbientOcclusionParam.w;
  let x_2041 : f32 = u_xlat71;
  u_xlat71 = ((x_2040 * x_2041) + 1.0f);
  let x_2045 : f32 = u_xlat49.x;
  let x_2047 : f32 = vs_INTERP4.w;
  u_xlat49.x = min(x_2045, x_2047);
  let x_2050 : bool = u_xlatb66;
  if (x_2050) {
    let x_2054 : f32 = x_138.x_MainLightShadowParams.y;
    u_xlatb66 = (x_2054 == 1.0f);
    let x_2056 : bool = u_xlatb66;
    if (x_2056) {
      let x_2059 : vec4<f32> = u_xlat4;
      let x_2062 : vec4<f32> = x_138.x_MainLightShadowOffset0;
      u_xlat8 = (vec4<f32>(x_2059.x, x_2059.y, x_2059.x, x_2059.y) + x_2062);
      let x_2065 : vec4<f32> = u_xlat8;
      let x_2066 : vec2<f32> = vec2<f32>(x_2065.x, x_2065.y);
      let x_2068 : f32 = u_xlat4.z;
      txVec30 = vec3<f32>(x_2066.x, x_2066.y, x_2068);
      let x_2075 : vec3<f32> = txVec30;
      let x_2077 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2075.xy, x_2075.z);
      u_xlat9.x = x_2077;
      let x_2080 : vec4<f32> = u_xlat8;
      let x_2081 : vec2<f32> = vec2<f32>(x_2080.z, x_2080.w);
      let x_2083 : f32 = u_xlat4.z;
      txVec31 = vec3<f32>(x_2081.x, x_2081.y, x_2083);
      let x_2090 : vec3<f32> = txVec31;
      let x_2092 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2090.xy, x_2090.z);
      u_xlat9.y = x_2092;
      let x_2094 : vec4<f32> = u_xlat4;
      let x_2097 : vec4<f32> = x_138.x_MainLightShadowOffset1;
      u_xlat8 = (vec4<f32>(x_2094.x, x_2094.y, x_2094.x, x_2094.y) + x_2097);
      let x_2100 : vec4<f32> = u_xlat8;
      let x_2101 : vec2<f32> = vec2<f32>(x_2100.x, x_2100.y);
      let x_2103 : f32 = u_xlat4.z;
      txVec32 = vec3<f32>(x_2101.x, x_2101.y, x_2103);
      let x_2110 : vec3<f32> = txVec32;
      let x_2112 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2110.xy, x_2110.z);
      u_xlat9.z = x_2112;
      let x_2115 : vec4<f32> = u_xlat8;
      let x_2116 : vec2<f32> = vec2<f32>(x_2115.z, x_2115.w);
      let x_2118 : f32 = u_xlat4.z;
      txVec33 = vec3<f32>(x_2116.x, x_2116.y, x_2118);
      let x_2125 : vec3<f32> = txVec33;
      let x_2127 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2125.xy, x_2125.z);
      u_xlat9.w = x_2127;
      let x_2129 : vec4<f32> = u_xlat9;
      u_xlat66 = dot(x_2129, vec4<f32>(0.25f, 0.25f, 0.25f, 0.25f));
    } else {
      let x_2134 : f32 = x_138.x_MainLightShadowParams.y;
      u_xlatb72 = (x_2134 == 2.0f);
      let x_2136 : bool = u_xlatb72;
      if (x_2136) {
        let x_2139 : vec4<f32> = u_xlat4;
        let x_2142 : vec4<f32> = x_138.x_MainLightShadowmapSize;
        let x_2145 : vec2<f32> = ((vec2<f32>(x_2139.x, x_2139.y) * vec2<f32>(x_2142.z, x_2142.w)) + vec2<f32>(0.5f, 0.5f));
        let x_2146 : vec4<f32> = u_xlat8;
        u_xlat8 = vec4<f32>(x_2145.x, x_2145.y, x_2146.z, x_2146.w);
        let x_2148 : vec4<f32> = u_xlat8;
        let x_2150 : vec2<f32> = floor(vec2<f32>(x_2148.x, x_2148.y));
        let x_2151 : vec4<f32> = u_xlat8;
        u_xlat8 = vec4<f32>(x_2150.x, x_2150.y, x_2151.z, x_2151.w);
        let x_2153 : vec4<f32> = u_xlat4;
        let x_2156 : vec4<f32> = x_138.x_MainLightShadowmapSize;
        let x_2159 : vec4<f32> = u_xlat8;
        u_xlat52 = ((vec2<f32>(x_2153.x, x_2153.y) * vec2<f32>(x_2156.z, x_2156.w)) + -(vec2<f32>(x_2159.x, x_2159.y)));
        let x_2163 : vec2<f32> = u_xlat52;
        u_xlat9 = (vec4<f32>(x_2163.x, x_2163.x, x_2163.y, x_2163.y) + vec4<f32>(0.5f, 1.0f, 0.5f, 1.0f));
        let x_2166 : vec4<f32> = u_xlat9;
        let x_2168 : vec4<f32> = u_xlat9;
        u_xlat10 = (vec4<f32>(x_2166.x, x_2166.x, x_2166.z, x_2166.z) * vec4<f32>(x_2168.x, x_2168.x, x_2168.z, x_2168.z));
        let x_2171 : vec4<f32> = u_xlat10;
        let x_2173 : vec2<f32> = (vec2<f32>(x_2171.y, x_2171.w) * vec2<f32>(0.079999998f, 0.079999998f));
        let x_2174 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_2173.x, x_2174.y, x_2173.y, x_2174.w);
        let x_2176 : vec4<f32> = u_xlat10;
        let x_2179 : vec2<f32> = u_xlat52;
        let x_2181 : vec2<f32> = ((vec2<f32>(x_2176.x, x_2176.z) * vec2<f32>(0.5f, 0.5f)) + -(x_2179));
        let x_2182 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_2181.x, x_2181.y, x_2182.z, x_2182.w);
        let x_2185 : vec2<f32> = u_xlat52;
        u_xlat54 = (-(x_2185) + vec2<f32>(1.0f, 1.0f));
        let x_2188 : vec2<f32> = u_xlat52;
        let x_2189 : vec2<f32> = min(x_2188, vec2<f32>(0.0f, 0.0f));
        let x_2190 : vec4<f32> = u_xlat11;
        u_xlat11 = vec4<f32>(x_2189.x, x_2189.y, x_2190.z, x_2190.w);
        let x_2192 : vec4<f32> = u_xlat11;
        let x_2195 : vec4<f32> = u_xlat11;
        let x_2198 : vec2<f32> = u_xlat54;
        let x_2199 : vec2<f32> = ((-(vec2<f32>(x_2192.x, x_2192.y)) * vec2<f32>(x_2195.x, x_2195.y)) + x_2198);
        let x_2200 : vec4<f32> = u_xlat11;
        u_xlat11 = vec4<f32>(x_2199.x, x_2199.y, x_2200.z, x_2200.w);
        let x_2202 : vec2<f32> = u_xlat52;
        u_xlat52 = max(x_2202, vec2<f32>(0.0f, 0.0f));
        let x_2204 : vec2<f32> = u_xlat52;
        let x_2206 : vec2<f32> = u_xlat52;
        let x_2208 : vec4<f32> = u_xlat9;
        u_xlat52 = ((-(x_2204) * x_2206) + vec2<f32>(x_2208.y, x_2208.w));
        let x_2211 : vec4<f32> = u_xlat11;
        let x_2213 : vec2<f32> = (vec2<f32>(x_2211.x, x_2211.y) + vec2<f32>(1.0f, 1.0f));
        let x_2214 : vec4<f32> = u_xlat11;
        u_xlat11 = vec4<f32>(x_2213.x, x_2213.y, x_2214.z, x_2214.w);
        let x_2216 : vec2<f32> = u_xlat52;
        u_xlat52 = (x_2216 + vec2<f32>(1.0f, 1.0f));
        let x_2218 : vec4<f32> = u_xlat10;
        let x_2220 : vec2<f32> = (vec2<f32>(x_2218.x, x_2218.y) * vec2<f32>(0.159999996f, 0.159999996f));
        let x_2221 : vec4<f32> = u_xlat12;
        u_xlat12 = vec4<f32>(x_2220.x, x_2220.y, x_2221.z, x_2221.w);
        let x_2223 : vec2<f32> = u_xlat54;
        let x_2224 : vec2<f32> = (x_2223 * vec2<f32>(0.159999996f, 0.159999996f));
        let x_2225 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_2224.x, x_2224.y, x_2225.z, x_2225.w);
        let x_2227 : vec4<f32> = u_xlat11;
        let x_2229 : vec2<f32> = (vec2<f32>(x_2227.x, x_2227.y) * vec2<f32>(0.159999996f, 0.159999996f));
        let x_2230 : vec4<f32> = u_xlat11;
        u_xlat11 = vec4<f32>(x_2229.x, x_2229.y, x_2230.z, x_2230.w);
        let x_2232 : vec2<f32> = u_xlat52;
        let x_2233 : vec2<f32> = (x_2232 * vec2<f32>(0.159999996f, 0.159999996f));
        let x_2234 : vec4<f32> = u_xlat13;
        u_xlat13 = vec4<f32>(x_2233.x, x_2233.y, x_2234.z, x_2234.w);
        let x_2236 : vec4<f32> = u_xlat9;
        u_xlat52 = (vec2<f32>(x_2236.y, x_2236.w) * vec2<f32>(0.159999996f, 0.159999996f));
        let x_2240 : f32 = u_xlat11.x;
        u_xlat12.z = x_2240;
        let x_2243 : f32 = u_xlat52.x;
        u_xlat12.w = x_2243;
        let x_2246 : f32 = u_xlat13.x;
        u_xlat10.z = x_2246;
        let x_2249 : f32 = u_xlat9.x;
        u_xlat10.w = x_2249;
        let x_2251 : vec4<f32> = u_xlat10;
        let x_2253 : vec4<f32> = u_xlat12;
        u_xlat14 = (vec4<f32>(x_2251.z, x_2251.w, x_2251.x, x_2251.z) + vec4<f32>(x_2253.z, x_2253.w, x_2253.x, x_2253.z));
        let x_2257 : f32 = u_xlat12.y;
        u_xlat11.z = x_2257;
        let x_2260 : f32 = u_xlat52.y;
        u_xlat11.w = x_2260;
        let x_2263 : f32 = u_xlat10.y;
        u_xlat13.z = x_2263;
        let x_2266 : f32 = u_xlat9.z;
        u_xlat13.w = x_2266;
        let x_2268 : vec4<f32> = u_xlat11;
        let x_2270 : vec4<f32> = u_xlat13;
        let x_2272 : vec3<f32> = (vec3<f32>(x_2268.z, x_2268.y, x_2268.w) + vec3<f32>(x_2270.z, x_2270.y, x_2270.w));
        let x_2273 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_2272.x, x_2272.y, x_2272.z, x_2273.w);
        let x_2275 : vec4<f32> = u_xlat10;
        let x_2277 : vec4<f32> = u_xlat14;
        let x_2279 : vec3<f32> = (vec3<f32>(x_2275.x, x_2275.z, x_2275.w) / vec3<f32>(x_2277.z, x_2277.w, x_2277.y));
        let x_2280 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_2279.x, x_2279.y, x_2279.z, x_2280.w);
        let x_2282 : vec4<f32> = u_xlat10;
        let x_2284 : vec3<f32> = (vec3<f32>(x_2282.x, x_2282.y, x_2282.z) + vec3<f32>(-2.5f, -0.5f, 1.5f));
        let x_2285 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_2284.x, x_2284.y, x_2284.z, x_2285.w);
        let x_2287 : vec4<f32> = u_xlat13;
        let x_2289 : vec4<f32> = u_xlat9;
        let x_2291 : vec3<f32> = (vec3<f32>(x_2287.z, x_2287.y, x_2287.w) / vec3<f32>(x_2289.x, x_2289.y, x_2289.z));
        let x_2292 : vec4<f32> = u_xlat11;
        u_xlat11 = vec4<f32>(x_2291.x, x_2291.y, x_2291.z, x_2292.w);
        let x_2294 : vec4<f32> = u_xlat11;
        let x_2296 : vec3<f32> = (vec3<f32>(x_2294.x, x_2294.y, x_2294.z) + vec3<f32>(-2.5f, -0.5f, 1.5f));
        let x_2297 : vec4<f32> = u_xlat11;
        u_xlat11 = vec4<f32>(x_2296.x, x_2296.y, x_2296.z, x_2297.w);
        let x_2299 : vec4<f32> = u_xlat10;
        let x_2302 : vec4<f32> = x_138.x_MainLightShadowmapSize;
        let x_2304 : vec3<f32> = (vec3<f32>(x_2299.y, x_2299.x, x_2299.z) * vec3<f32>(x_2302.x, x_2302.x, x_2302.x));
        let x_2305 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_2304.x, x_2304.y, x_2304.z, x_2305.w);
        let x_2307 : vec4<f32> = u_xlat11;
        let x_2310 : vec4<f32> = x_138.x_MainLightShadowmapSize;
        let x_2312 : vec3<f32> = (vec3<f32>(x_2307.x, x_2307.y, x_2307.z) * vec3<f32>(x_2310.y, x_2310.y, x_2310.y));
        let x_2313 : vec4<f32> = u_xlat11;
        u_xlat11 = vec4<f32>(x_2312.x, x_2312.y, x_2312.z, x_2313.w);
        let x_2316 : f32 = u_xlat11.x;
        u_xlat10.w = x_2316;
        let x_2318 : vec4<f32> = u_xlat8;
        let x_2321 : vec4<f32> = x_138.x_MainLightShadowmapSize;
        let x_2324 : vec4<f32> = u_xlat10;
        u_xlat12 = ((vec4<f32>(x_2318.x, x_2318.y, x_2318.x, x_2318.y) * vec4<f32>(x_2321.x, x_2321.y, x_2321.x, x_2321.y)) + vec4<f32>(x_2324.y, x_2324.w, x_2324.x, x_2324.w));
        let x_2327 : vec4<f32> = u_xlat8;
        let x_2330 : vec4<f32> = x_138.x_MainLightShadowmapSize;
        let x_2333 : vec4<f32> = u_xlat10;
        u_xlat52 = ((vec2<f32>(x_2327.x, x_2327.y) * vec2<f32>(x_2330.x, x_2330.y)) + vec2<f32>(x_2333.z, x_2333.w));
        let x_2337 : f32 = u_xlat10.y;
        u_xlat11.w = x_2337;
        let x_2339 : vec4<f32> = u_xlat11;
        let x_2340 : vec2<f32> = vec2<f32>(x_2339.y, x_2339.z);
        let x_2341 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_2341.x, x_2340.x, x_2341.z, x_2340.y);
        let x_2343 : vec4<f32> = u_xlat8;
        let x_2346 : vec4<f32> = x_138.x_MainLightShadowmapSize;
        let x_2349 : vec4<f32> = u_xlat10;
        u_xlat13 = ((vec4<f32>(x_2343.x, x_2343.y, x_2343.x, x_2343.y) * vec4<f32>(x_2346.x, x_2346.y, x_2346.x, x_2346.y)) + vec4<f32>(x_2349.x, x_2349.y, x_2349.z, x_2349.y));
        let x_2352 : vec4<f32> = u_xlat8;
        let x_2355 : vec4<f32> = x_138.x_MainLightShadowmapSize;
        let x_2358 : vec4<f32> = u_xlat11;
        u_xlat11 = ((vec4<f32>(x_2352.x, x_2352.y, x_2352.x, x_2352.y) * vec4<f32>(x_2355.x, x_2355.y, x_2355.x, x_2355.y)) + vec4<f32>(x_2358.w, x_2358.y, x_2358.w, x_2358.z));
        let x_2361 : vec4<f32> = u_xlat8;
        let x_2364 : vec4<f32> = x_138.x_MainLightShadowmapSize;
        let x_2367 : vec4<f32> = u_xlat10;
        u_xlat10 = ((vec4<f32>(x_2361.x, x_2361.y, x_2361.x, x_2361.y) * vec4<f32>(x_2364.x, x_2364.y, x_2364.x, x_2364.y)) + vec4<f32>(x_2367.x, x_2367.w, x_2367.z, x_2367.w));
        let x_2370 : vec4<f32> = u_xlat9;
        let x_2372 : vec4<f32> = u_xlat14;
        u_xlat15 = (vec4<f32>(x_2370.x, x_2370.x, x_2370.x, x_2370.y) * vec4<f32>(x_2372.z, x_2372.w, x_2372.y, x_2372.z));
        let x_2375 : vec4<f32> = u_xlat9;
        let x_2377 : vec4<f32> = u_xlat14;
        u_xlat16 = (vec4<f32>(x_2375.y, x_2375.y, x_2375.z, x_2375.z) * x_2377);
        let x_2381 : f32 = u_xlat9.z;
        let x_2383 : f32 = u_xlat14.y;
        u_xlat72 = (x_2381 * x_2383);
        let x_2386 : vec4<f32> = u_xlat12;
        let x_2387 : vec2<f32> = vec2<f32>(x_2386.x, x_2386.y);
        let x_2389 : f32 = u_xlat4.z;
        txVec34 = vec3<f32>(x_2387.x, x_2387.y, x_2389);
        let x_2397 : vec3<f32> = txVec34;
        let x_2399 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2397.xy, x_2397.z);
        u_xlat73 = x_2399;
        let x_2401 : vec4<f32> = u_xlat12;
        let x_2402 : vec2<f32> = vec2<f32>(x_2401.z, x_2401.w);
        let x_2404 : f32 = u_xlat4.z;
        txVec35 = vec3<f32>(x_2402.x, x_2402.y, x_2404);
        let x_2411 : vec3<f32> = txVec35;
        let x_2413 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2411.xy, x_2411.z);
        u_xlat8.x = x_2413;
        let x_2416 : f32 = u_xlat8.x;
        let x_2418 : f32 = u_xlat15.y;
        u_xlat8.x = (x_2416 * x_2418);
        let x_2422 : f32 = u_xlat15.x;
        let x_2423 : f32 = u_xlat73;
        let x_2426 : f32 = u_xlat8.x;
        u_xlat73 = ((x_2422 * x_2423) + x_2426);
        let x_2429 : vec2<f32> = u_xlat52;
        let x_2431 : f32 = u_xlat4.z;
        txVec36 = vec3<f32>(x_2429.x, x_2429.y, x_2431);
        let x_2438 : vec3<f32> = txVec36;
        let x_2440 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2438.xy, x_2438.z);
        u_xlat8.x = x_2440;
        let x_2443 : f32 = u_xlat15.z;
        let x_2445 : f32 = u_xlat8.x;
        let x_2447 : f32 = u_xlat73;
        u_xlat73 = ((x_2443 * x_2445) + x_2447);
        let x_2450 : vec4<f32> = u_xlat11;
        let x_2451 : vec2<f32> = vec2<f32>(x_2450.x, x_2450.y);
        let x_2453 : f32 = u_xlat4.z;
        txVec37 = vec3<f32>(x_2451.x, x_2451.y, x_2453);
        let x_2460 : vec3<f32> = txVec37;
        let x_2462 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2460.xy, x_2460.z);
        u_xlat8.x = x_2462;
        let x_2465 : f32 = u_xlat15.w;
        let x_2467 : f32 = u_xlat8.x;
        let x_2469 : f32 = u_xlat73;
        u_xlat73 = ((x_2465 * x_2467) + x_2469);
        let x_2472 : vec4<f32> = u_xlat13;
        let x_2473 : vec2<f32> = vec2<f32>(x_2472.x, x_2472.y);
        let x_2475 : f32 = u_xlat4.z;
        txVec38 = vec3<f32>(x_2473.x, x_2473.y, x_2475);
        let x_2482 : vec3<f32> = txVec38;
        let x_2484 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2482.xy, x_2482.z);
        u_xlat8.x = x_2484;
        let x_2487 : f32 = u_xlat16.x;
        let x_2489 : f32 = u_xlat8.x;
        let x_2491 : f32 = u_xlat73;
        u_xlat73 = ((x_2487 * x_2489) + x_2491);
        let x_2494 : vec4<f32> = u_xlat13;
        let x_2495 : vec2<f32> = vec2<f32>(x_2494.z, x_2494.w);
        let x_2497 : f32 = u_xlat4.z;
        txVec39 = vec3<f32>(x_2495.x, x_2495.y, x_2497);
        let x_2504 : vec3<f32> = txVec39;
        let x_2506 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2504.xy, x_2504.z);
        u_xlat8.x = x_2506;
        let x_2509 : f32 = u_xlat16.y;
        let x_2511 : f32 = u_xlat8.x;
        let x_2513 : f32 = u_xlat73;
        u_xlat73 = ((x_2509 * x_2511) + x_2513);
        let x_2516 : vec4<f32> = u_xlat11;
        let x_2517 : vec2<f32> = vec2<f32>(x_2516.z, x_2516.w);
        let x_2519 : f32 = u_xlat4.z;
        txVec40 = vec3<f32>(x_2517.x, x_2517.y, x_2519);
        let x_2526 : vec3<f32> = txVec40;
        let x_2528 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2526.xy, x_2526.z);
        u_xlat8.x = x_2528;
        let x_2531 : f32 = u_xlat16.z;
        let x_2533 : f32 = u_xlat8.x;
        let x_2535 : f32 = u_xlat73;
        u_xlat73 = ((x_2531 * x_2533) + x_2535);
        let x_2538 : vec4<f32> = u_xlat10;
        let x_2539 : vec2<f32> = vec2<f32>(x_2538.x, x_2538.y);
        let x_2541 : f32 = u_xlat4.z;
        txVec41 = vec3<f32>(x_2539.x, x_2539.y, x_2541);
        let x_2548 : vec3<f32> = txVec41;
        let x_2550 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2548.xy, x_2548.z);
        u_xlat8.x = x_2550;
        let x_2553 : f32 = u_xlat16.w;
        let x_2555 : f32 = u_xlat8.x;
        let x_2557 : f32 = u_xlat73;
        u_xlat73 = ((x_2553 * x_2555) + x_2557);
        let x_2560 : vec4<f32> = u_xlat10;
        let x_2561 : vec2<f32> = vec2<f32>(x_2560.z, x_2560.w);
        let x_2563 : f32 = u_xlat4.z;
        txVec42 = vec3<f32>(x_2561.x, x_2561.y, x_2563);
        let x_2570 : vec3<f32> = txVec42;
        let x_2572 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2570.xy, x_2570.z);
        u_xlat8.x = x_2572;
        let x_2574 : f32 = u_xlat72;
        let x_2576 : f32 = u_xlat8.x;
        let x_2578 : f32 = u_xlat73;
        u_xlat66 = ((x_2574 * x_2576) + x_2578);
      } else {
        let x_2581 : vec4<f32> = u_xlat4;
        let x_2584 : vec4<f32> = x_138.x_MainLightShadowmapSize;
        let x_2587 : vec2<f32> = ((vec2<f32>(x_2581.x, x_2581.y) * vec2<f32>(x_2584.z, x_2584.w)) + vec2<f32>(0.5f, 0.5f));
        let x_2588 : vec4<f32> = u_xlat8;
        u_xlat8 = vec4<f32>(x_2587.x, x_2587.y, x_2588.z, x_2588.w);
        let x_2590 : vec4<f32> = u_xlat8;
        let x_2592 : vec2<f32> = floor(vec2<f32>(x_2590.x, x_2590.y));
        let x_2593 : vec4<f32> = u_xlat8;
        u_xlat8 = vec4<f32>(x_2592.x, x_2592.y, x_2593.z, x_2593.w);
        let x_2595 : vec4<f32> = u_xlat4;
        let x_2598 : vec4<f32> = x_138.x_MainLightShadowmapSize;
        let x_2601 : vec4<f32> = u_xlat8;
        u_xlat52 = ((vec2<f32>(x_2595.x, x_2595.y) * vec2<f32>(x_2598.z, x_2598.w)) + -(vec2<f32>(x_2601.x, x_2601.y)));
        let x_2605 : vec2<f32> = u_xlat52;
        u_xlat9 = (vec4<f32>(x_2605.x, x_2605.x, x_2605.y, x_2605.y) + vec4<f32>(0.5f, 1.0f, 0.5f, 1.0f));
        let x_2608 : vec4<f32> = u_xlat9;
        let x_2610 : vec4<f32> = u_xlat9;
        u_xlat10 = (vec4<f32>(x_2608.x, x_2608.x, x_2608.z, x_2608.z) * vec4<f32>(x_2610.x, x_2610.x, x_2610.z, x_2610.z));
        let x_2613 : vec4<f32> = u_xlat10;
        let x_2615 : vec2<f32> = (vec2<f32>(x_2613.y, x_2613.w) * vec2<f32>(0.040816002f, 0.040816002f));
        let x_2616 : vec4<f32> = u_xlat11;
        u_xlat11 = vec4<f32>(x_2616.x, x_2615.x, x_2616.z, x_2615.y);
        let x_2618 : vec4<f32> = u_xlat10;
        let x_2621 : vec2<f32> = u_xlat52;
        let x_2623 : vec2<f32> = ((vec2<f32>(x_2618.x, x_2618.z) * vec2<f32>(0.5f, 0.5f)) + -(x_2621));
        let x_2624 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_2623.x, x_2624.y, x_2623.y, x_2624.w);
        let x_2626 : vec2<f32> = u_xlat52;
        let x_2628 : vec2<f32> = (-(x_2626) + vec2<f32>(1.0f, 1.0f));
        let x_2629 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_2628.x, x_2628.y, x_2629.z, x_2629.w);
        let x_2631 : vec2<f32> = u_xlat52;
        u_xlat54 = min(x_2631, vec2<f32>(0.0f, 0.0f));
        let x_2633 : vec2<f32> = u_xlat54;
        let x_2635 : vec2<f32> = u_xlat54;
        let x_2637 : vec4<f32> = u_xlat10;
        let x_2639 : vec2<f32> = ((-(x_2633) * x_2635) + vec2<f32>(x_2637.x, x_2637.y));
        let x_2640 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_2639.x, x_2639.y, x_2640.z, x_2640.w);
        let x_2642 : vec2<f32> = u_xlat52;
        u_xlat54 = max(x_2642, vec2<f32>(0.0f, 0.0f));
        let x_2645 : vec2<f32> = u_xlat54;
        let x_2647 : vec2<f32> = u_xlat54;
        let x_2649 : vec4<f32> = u_xlat9;
        let x_2651 : vec2<f32> = ((-(x_2645) * x_2647) + vec2<f32>(x_2649.y, x_2649.w));
        let x_2652 : vec3<f32> = u_xlat31;
        u_xlat31 = vec3<f32>(x_2651.x, x_2652.y, x_2651.y);
        let x_2654 : vec4<f32> = u_xlat10;
        let x_2656 : vec2<f32> = (vec2<f32>(x_2654.x, x_2654.y) + vec2<f32>(2.0f, 2.0f));
        let x_2657 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_2656.x, x_2656.y, x_2657.z, x_2657.w);
        let x_2659 : vec3<f32> = u_xlat31;
        let x_2661 : vec2<f32> = (vec2<f32>(x_2659.x, x_2659.z) + vec2<f32>(2.0f, 2.0f));
        let x_2662 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_2662.x, x_2661.x, x_2662.z, x_2661.y);
        let x_2665 : f32 = u_xlat9.y;
        u_xlat12.z = (x_2665 * 0.081632003f);
        let x_2668 : vec4<f32> = u_xlat9;
        let x_2670 : vec3<f32> = (vec3<f32>(x_2668.z, x_2668.x, x_2668.w) * vec3<f32>(0.081632003f, 0.081632003f, 0.081632003f));
        let x_2671 : vec4<f32> = u_xlat13;
        u_xlat13 = vec4<f32>(x_2670.x, x_2670.y, x_2670.z, x_2671.w);
        let x_2673 : vec4<f32> = u_xlat10;
        let x_2675 : vec2<f32> = (vec2<f32>(x_2673.x, x_2673.y) * vec2<f32>(0.081632003f, 0.081632003f));
        let x_2676 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_2675.x, x_2675.y, x_2676.z, x_2676.w);
        let x_2679 : f32 = u_xlat13.y;
        u_xlat12.x = x_2679;
        let x_2681 : vec2<f32> = u_xlat52;
        let x_2684 : vec2<f32> = ((vec2<f32>(x_2681.x, x_2681.x) * vec2<f32>(-0.081632003f, 0.081632003f)) + vec2<f32>(0.163264006f, 0.081632003f));
        let x_2685 : vec4<f32> = u_xlat12;
        u_xlat12 = vec4<f32>(x_2685.x, x_2684.x, x_2685.z, x_2684.y);
        let x_2687 : vec2<f32> = u_xlat52;
        let x_2690 : vec2<f32> = ((vec2<f32>(x_2687.x, x_2687.x) * vec2<f32>(-0.081632003f, 0.081632003f)) + vec2<f32>(0.081632003f, 0.163264006f));
        let x_2691 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_2690.x, x_2691.y, x_2690.y, x_2691.w);
        let x_2694 : f32 = u_xlat9.x;
        u_xlat10.y = x_2694;
        let x_2697 : f32 = u_xlat11.y;
        u_xlat10.w = x_2697;
        let x_2699 : vec4<f32> = u_xlat10;
        let x_2700 : vec4<f32> = u_xlat12;
        u_xlat12 = (x_2699 + x_2700);
        let x_2702 : vec2<f32> = u_xlat52;
        let x_2705 : vec2<f32> = ((vec2<f32>(x_2702.y, x_2702.y) * vec2<f32>(-0.081632003f, 0.081632003f)) + vec2<f32>(0.163264006f, 0.081632003f));
        let x_2706 : vec4<f32> = u_xlat13;
        u_xlat13 = vec4<f32>(x_2706.x, x_2705.x, x_2706.z, x_2705.y);
        let x_2708 : vec2<f32> = u_xlat52;
        let x_2711 : vec2<f32> = ((vec2<f32>(x_2708.y, x_2708.y) * vec2<f32>(-0.081632003f, 0.081632003f)) + vec2<f32>(0.081632003f, 0.163264006f));
        let x_2712 : vec4<f32> = u_xlat11;
        u_xlat11 = vec4<f32>(x_2711.x, x_2712.y, x_2711.y, x_2712.w);
        let x_2715 : f32 = u_xlat9.y;
        u_xlat11.y = x_2715;
        let x_2717 : vec4<f32> = u_xlat11;
        let x_2718 : vec4<f32> = u_xlat13;
        u_xlat9 = (x_2717 + x_2718);
        let x_2720 : vec4<f32> = u_xlat10;
        let x_2721 : vec4<f32> = u_xlat12;
        u_xlat10 = (x_2720 / x_2721);
        let x_2723 : vec4<f32> = u_xlat10;
        u_xlat10 = (x_2723 + vec4<f32>(-3.5f, -1.5f, 0.5f, 2.5f));
        let x_2725 : vec4<f32> = u_xlat11;
        let x_2726 : vec4<f32> = u_xlat9;
        u_xlat11 = (x_2725 / x_2726);
        let x_2728 : vec4<f32> = u_xlat11;
        u_xlat11 = (x_2728 + vec4<f32>(-3.5f, -1.5f, 0.5f, 2.5f));
        let x_2730 : vec4<f32> = u_xlat10;
        let x_2733 : vec4<f32> = x_138.x_MainLightShadowmapSize;
        u_xlat10 = (vec4<f32>(x_2730.w, x_2730.x, x_2730.y, x_2730.z) * vec4<f32>(x_2733.x, x_2733.x, x_2733.x, x_2733.x));
        let x_2736 : vec4<f32> = u_xlat11;
        let x_2739 : vec4<f32> = x_138.x_MainLightShadowmapSize;
        u_xlat11 = (vec4<f32>(x_2736.x, x_2736.w, x_2736.y, x_2736.z) * vec4<f32>(x_2739.y, x_2739.y, x_2739.y, x_2739.y));
        let x_2742 : vec4<f32> = u_xlat10;
        let x_2743 : vec3<f32> = vec3<f32>(x_2742.y, x_2742.z, x_2742.w);
        let x_2744 : vec4<f32> = u_xlat13;
        u_xlat13 = vec4<f32>(x_2743.x, x_2744.y, x_2743.y, x_2743.z);
        let x_2747 : f32 = u_xlat11.x;
        u_xlat13.y = x_2747;
        let x_2749 : vec4<f32> = u_xlat8;
        let x_2752 : vec4<f32> = x_138.x_MainLightShadowmapSize;
        let x_2755 : vec4<f32> = u_xlat13;
        u_xlat14 = ((vec4<f32>(x_2749.x, x_2749.y, x_2749.x, x_2749.y) * vec4<f32>(x_2752.x, x_2752.y, x_2752.x, x_2752.y)) + vec4<f32>(x_2755.x, x_2755.y, x_2755.z, x_2755.y));
        let x_2758 : vec4<f32> = u_xlat8;
        let x_2761 : vec4<f32> = x_138.x_MainLightShadowmapSize;
        let x_2764 : vec4<f32> = u_xlat13;
        u_xlat52 = ((vec2<f32>(x_2758.x, x_2758.y) * vec2<f32>(x_2761.x, x_2761.y)) + vec2<f32>(x_2764.w, x_2764.y));
        let x_2768 : f32 = u_xlat13.y;
        u_xlat10.y = x_2768;
        let x_2771 : f32 = u_xlat11.z;
        u_xlat13.y = x_2771;
        let x_2773 : vec4<f32> = u_xlat8;
        let x_2776 : vec4<f32> = x_138.x_MainLightShadowmapSize;
        let x_2779 : vec4<f32> = u_xlat13;
        u_xlat15 = ((vec4<f32>(x_2773.x, x_2773.y, x_2773.x, x_2773.y) * vec4<f32>(x_2776.x, x_2776.y, x_2776.x, x_2776.y)) + vec4<f32>(x_2779.x, x_2779.y, x_2779.z, x_2779.y));
        let x_2782 : vec4<f32> = u_xlat8;
        let x_2785 : vec4<f32> = x_138.x_MainLightShadowmapSize;
        let x_2788 : vec4<f32> = u_xlat13;
        let x_2790 : vec2<f32> = ((vec2<f32>(x_2782.x, x_2782.y) * vec2<f32>(x_2785.x, x_2785.y)) + vec2<f32>(x_2788.w, x_2788.y));
        let x_2791 : vec4<f32> = u_xlat16;
        u_xlat16 = vec4<f32>(x_2790.x, x_2790.y, x_2791.z, x_2791.w);
        let x_2794 : f32 = u_xlat13.y;
        u_xlat10.z = x_2794;
        let x_2796 : vec4<f32> = u_xlat8;
        let x_2799 : vec4<f32> = x_138.x_MainLightShadowmapSize;
        let x_2802 : vec4<f32> = u_xlat10;
        u_xlat17 = ((vec4<f32>(x_2796.x, x_2796.y, x_2796.x, x_2796.y) * vec4<f32>(x_2799.x, x_2799.y, x_2799.x, x_2799.y)) + vec4<f32>(x_2802.x, x_2802.y, x_2802.x, x_2802.z));
        let x_2806 : f32 = u_xlat11.w;
        u_xlat13.y = x_2806;
        let x_2808 : vec4<f32> = u_xlat8;
        let x_2811 : vec4<f32> = x_138.x_MainLightShadowmapSize;
        let x_2814 : vec4<f32> = u_xlat13;
        u_xlat18 = ((vec4<f32>(x_2808.x, x_2808.y, x_2808.x, x_2808.y) * vec4<f32>(x_2811.x, x_2811.y, x_2811.x, x_2811.y)) + vec4<f32>(x_2814.x, x_2814.y, x_2814.z, x_2814.y));
        let x_2818 : vec4<f32> = u_xlat8;
        let x_2821 : vec4<f32> = x_138.x_MainLightShadowmapSize;
        let x_2824 : vec4<f32> = u_xlat13;
        u_xlat32 = ((vec2<f32>(x_2818.x, x_2818.y) * vec2<f32>(x_2821.x, x_2821.y)) + vec2<f32>(x_2824.w, x_2824.y));
        let x_2828 : f32 = u_xlat13.y;
        u_xlat10.w = x_2828;
        let x_2831 : vec4<f32> = u_xlat8;
        let x_2834 : vec4<f32> = x_138.x_MainLightShadowmapSize;
        let x_2837 : vec4<f32> = u_xlat10;
        u_xlat60 = ((vec2<f32>(x_2831.x, x_2831.y) * vec2<f32>(x_2834.x, x_2834.y)) + vec2<f32>(x_2837.x, x_2837.w));
        let x_2840 : vec4<f32> = u_xlat13;
        let x_2841 : vec3<f32> = vec3<f32>(x_2840.x, x_2840.z, x_2840.w);
        let x_2842 : vec4<f32> = u_xlat11;
        u_xlat11 = vec4<f32>(x_2841.x, x_2842.y, x_2841.y, x_2841.z);
        let x_2844 : vec4<f32> = u_xlat8;
        let x_2847 : vec4<f32> = x_138.x_MainLightShadowmapSize;
        let x_2850 : vec4<f32> = u_xlat11;
        u_xlat13 = ((vec4<f32>(x_2844.x, x_2844.y, x_2844.x, x_2844.y) * vec4<f32>(x_2847.x, x_2847.y, x_2847.x, x_2847.y)) + vec4<f32>(x_2850.x, x_2850.y, x_2850.z, x_2850.y));
        let x_2854 : vec4<f32> = u_xlat8;
        let x_2857 : vec4<f32> = x_138.x_MainLightShadowmapSize;
        let x_2860 : vec4<f32> = u_xlat11;
        u_xlat55 = ((vec2<f32>(x_2854.x, x_2854.y) * vec2<f32>(x_2857.x, x_2857.y)) + vec2<f32>(x_2860.w, x_2860.y));
        let x_2864 : f32 = u_xlat10.x;
        u_xlat11.x = x_2864;
        let x_2866 : vec4<f32> = u_xlat8;
        let x_2869 : vec4<f32> = x_138.x_MainLightShadowmapSize;
        let x_2872 : vec4<f32> = u_xlat11;
        let x_2874 : vec2<f32> = ((vec2<f32>(x_2866.x, x_2866.y) * vec2<f32>(x_2869.x, x_2869.y)) + vec2<f32>(x_2872.x, x_2872.y));
        let x_2875 : vec4<f32> = u_xlat8;
        u_xlat8 = vec4<f32>(x_2874.x, x_2874.y, x_2875.z, x_2875.w);
        let x_2878 : vec4<f32> = u_xlat9;
        let x_2880 : vec4<f32> = u_xlat12;
        u_xlat19 = (vec4<f32>(x_2878.x, x_2878.x, x_2878.x, x_2878.x) * x_2880);
        let x_2883 : vec4<f32> = u_xlat9;
        let x_2885 : vec4<f32> = u_xlat12;
        u_xlat20 = (vec4<f32>(x_2883.y, x_2883.y, x_2883.y, x_2883.y) * x_2885);
        let x_2888 : vec4<f32> = u_xlat9;
        let x_2890 : vec4<f32> = u_xlat12;
        u_xlat21 = (vec4<f32>(x_2888.z, x_2888.z, x_2888.z, x_2888.z) * x_2890);
        let x_2892 : vec4<f32> = u_xlat9;
        let x_2894 : vec4<f32> = u_xlat12;
        u_xlat9 = (vec4<f32>(x_2892.w, x_2892.w, x_2892.w, x_2892.w) * x_2894);
        let x_2897 : vec4<f32> = u_xlat14;
        let x_2898 : vec2<f32> = vec2<f32>(x_2897.x, x_2897.y);
        let x_2900 : f32 = u_xlat4.z;
        txVec43 = vec3<f32>(x_2898.x, x_2898.y, x_2900);
        let x_2907 : vec3<f32> = txVec43;
        let x_2909 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2907.xy, x_2907.z);
        u_xlat72 = x_2909;
        let x_2911 : vec4<f32> = u_xlat14;
        let x_2912 : vec2<f32> = vec2<f32>(x_2911.z, x_2911.w);
        let x_2914 : f32 = u_xlat4.z;
        txVec44 = vec3<f32>(x_2912.x, x_2912.y, x_2914);
        let x_2921 : vec3<f32> = txVec44;
        let x_2923 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2921.xy, x_2921.z);
        u_xlat73 = x_2923;
        let x_2924 : f32 = u_xlat73;
        let x_2926 : f32 = u_xlat19.y;
        u_xlat73 = (x_2924 * x_2926);
        let x_2929 : f32 = u_xlat19.x;
        let x_2930 : f32 = u_xlat72;
        let x_2932 : f32 = u_xlat73;
        u_xlat72 = ((x_2929 * x_2930) + x_2932);
        let x_2935 : vec2<f32> = u_xlat52;
        let x_2937 : f32 = u_xlat4.z;
        txVec45 = vec3<f32>(x_2935.x, x_2935.y, x_2937);
        let x_2944 : vec3<f32> = txVec45;
        let x_2946 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2944.xy, x_2944.z);
        u_xlat73 = x_2946;
        let x_2948 : f32 = u_xlat19.z;
        let x_2949 : f32 = u_xlat73;
        let x_2951 : f32 = u_xlat72;
        u_xlat72 = ((x_2948 * x_2949) + x_2951);
        let x_2954 : vec4<f32> = u_xlat17;
        let x_2955 : vec2<f32> = vec2<f32>(x_2954.x, x_2954.y);
        let x_2957 : f32 = u_xlat4.z;
        txVec46 = vec3<f32>(x_2955.x, x_2955.y, x_2957);
        let x_2964 : vec3<f32> = txVec46;
        let x_2966 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2964.xy, x_2964.z);
        u_xlat73 = x_2966;
        let x_2968 : f32 = u_xlat19.w;
        let x_2969 : f32 = u_xlat73;
        let x_2971 : f32 = u_xlat72;
        u_xlat72 = ((x_2968 * x_2969) + x_2971);
        let x_2974 : vec4<f32> = u_xlat15;
        let x_2975 : vec2<f32> = vec2<f32>(x_2974.x, x_2974.y);
        let x_2977 : f32 = u_xlat4.z;
        txVec47 = vec3<f32>(x_2975.x, x_2975.y, x_2977);
        let x_2984 : vec3<f32> = txVec47;
        let x_2986 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2984.xy, x_2984.z);
        u_xlat73 = x_2986;
        let x_2988 : f32 = u_xlat20.x;
        let x_2989 : f32 = u_xlat73;
        let x_2991 : f32 = u_xlat72;
        u_xlat72 = ((x_2988 * x_2989) + x_2991);
        let x_2994 : vec4<f32> = u_xlat15;
        let x_2995 : vec2<f32> = vec2<f32>(x_2994.z, x_2994.w);
        let x_2997 : f32 = u_xlat4.z;
        txVec48 = vec3<f32>(x_2995.x, x_2995.y, x_2997);
        let x_3004 : vec3<f32> = txVec48;
        let x_3006 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_3004.xy, x_3004.z);
        u_xlat73 = x_3006;
        let x_3008 : f32 = u_xlat20.y;
        let x_3009 : f32 = u_xlat73;
        let x_3011 : f32 = u_xlat72;
        u_xlat72 = ((x_3008 * x_3009) + x_3011);
        let x_3014 : vec4<f32> = u_xlat16;
        let x_3015 : vec2<f32> = vec2<f32>(x_3014.x, x_3014.y);
        let x_3017 : f32 = u_xlat4.z;
        txVec49 = vec3<f32>(x_3015.x, x_3015.y, x_3017);
        let x_3024 : vec3<f32> = txVec49;
        let x_3026 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_3024.xy, x_3024.z);
        u_xlat73 = x_3026;
        let x_3028 : f32 = u_xlat20.z;
        let x_3029 : f32 = u_xlat73;
        let x_3031 : f32 = u_xlat72;
        u_xlat72 = ((x_3028 * x_3029) + x_3031);
        let x_3034 : vec4<f32> = u_xlat17;
        let x_3035 : vec2<f32> = vec2<f32>(x_3034.z, x_3034.w);
        let x_3037 : f32 = u_xlat4.z;
        txVec50 = vec3<f32>(x_3035.x, x_3035.y, x_3037);
        let x_3044 : vec3<f32> = txVec50;
        let x_3046 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_3044.xy, x_3044.z);
        u_xlat73 = x_3046;
        let x_3048 : f32 = u_xlat20.w;
        let x_3049 : f32 = u_xlat73;
        let x_3051 : f32 = u_xlat72;
        u_xlat72 = ((x_3048 * x_3049) + x_3051);
        let x_3054 : vec4<f32> = u_xlat18;
        let x_3055 : vec2<f32> = vec2<f32>(x_3054.x, x_3054.y);
        let x_3057 : f32 = u_xlat4.z;
        txVec51 = vec3<f32>(x_3055.x, x_3055.y, x_3057);
        let x_3064 : vec3<f32> = txVec51;
        let x_3066 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_3064.xy, x_3064.z);
        u_xlat73 = x_3066;
        let x_3068 : f32 = u_xlat21.x;
        let x_3069 : f32 = u_xlat73;
        let x_3071 : f32 = u_xlat72;
        u_xlat72 = ((x_3068 * x_3069) + x_3071);
        let x_3074 : vec4<f32> = u_xlat18;
        let x_3075 : vec2<f32> = vec2<f32>(x_3074.z, x_3074.w);
        let x_3077 : f32 = u_xlat4.z;
        txVec52 = vec3<f32>(x_3075.x, x_3075.y, x_3077);
        let x_3084 : vec3<f32> = txVec52;
        let x_3086 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_3084.xy, x_3084.z);
        u_xlat73 = x_3086;
        let x_3088 : f32 = u_xlat21.y;
        let x_3089 : f32 = u_xlat73;
        let x_3091 : f32 = u_xlat72;
        u_xlat72 = ((x_3088 * x_3089) + x_3091);
        let x_3094 : vec2<f32> = u_xlat32;
        let x_3096 : f32 = u_xlat4.z;
        txVec53 = vec3<f32>(x_3094.x, x_3094.y, x_3096);
        let x_3103 : vec3<f32> = txVec53;
        let x_3105 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_3103.xy, x_3103.z);
        u_xlat73 = x_3105;
        let x_3107 : f32 = u_xlat21.z;
        let x_3108 : f32 = u_xlat73;
        let x_3110 : f32 = u_xlat72;
        u_xlat72 = ((x_3107 * x_3108) + x_3110);
        let x_3113 : vec2<f32> = u_xlat60;
        let x_3115 : f32 = u_xlat4.z;
        txVec54 = vec3<f32>(x_3113.x, x_3113.y, x_3115);
        let x_3122 : vec3<f32> = txVec54;
        let x_3124 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_3122.xy, x_3122.z);
        u_xlat73 = x_3124;
        let x_3126 : f32 = u_xlat21.w;
        let x_3127 : f32 = u_xlat73;
        let x_3129 : f32 = u_xlat72;
        u_xlat72 = ((x_3126 * x_3127) + x_3129);
        let x_3132 : vec4<f32> = u_xlat13;
        let x_3133 : vec2<f32> = vec2<f32>(x_3132.x, x_3132.y);
        let x_3135 : f32 = u_xlat4.z;
        txVec55 = vec3<f32>(x_3133.x, x_3133.y, x_3135);
        let x_3142 : vec3<f32> = txVec55;
        let x_3144 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_3142.xy, x_3142.z);
        u_xlat73 = x_3144;
        let x_3146 : f32 = u_xlat9.x;
        let x_3147 : f32 = u_xlat73;
        let x_3149 : f32 = u_xlat72;
        u_xlat72 = ((x_3146 * x_3147) + x_3149);
        let x_3152 : vec4<f32> = u_xlat13;
        let x_3153 : vec2<f32> = vec2<f32>(x_3152.z, x_3152.w);
        let x_3155 : f32 = u_xlat4.z;
        txVec56 = vec3<f32>(x_3153.x, x_3153.y, x_3155);
        let x_3162 : vec3<f32> = txVec56;
        let x_3164 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_3162.xy, x_3162.z);
        u_xlat73 = x_3164;
        let x_3166 : f32 = u_xlat9.y;
        let x_3167 : f32 = u_xlat73;
        let x_3169 : f32 = u_xlat72;
        u_xlat72 = ((x_3166 * x_3167) + x_3169);
        let x_3172 : vec2<f32> = u_xlat55;
        let x_3174 : f32 = u_xlat4.z;
        txVec57 = vec3<f32>(x_3172.x, x_3172.y, x_3174);
        let x_3181 : vec3<f32> = txVec57;
        let x_3183 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_3181.xy, x_3181.z);
        u_xlat73 = x_3183;
        let x_3185 : f32 = u_xlat9.z;
        let x_3186 : f32 = u_xlat73;
        let x_3188 : f32 = u_xlat72;
        u_xlat72 = ((x_3185 * x_3186) + x_3188);
        let x_3191 : vec4<f32> = u_xlat8;
        let x_3192 : vec2<f32> = vec2<f32>(x_3191.x, x_3191.y);
        let x_3194 : f32 = u_xlat4.z;
        txVec58 = vec3<f32>(x_3192.x, x_3192.y, x_3194);
        let x_3201 : vec3<f32> = txVec58;
        let x_3203 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_3201.xy, x_3201.z);
        u_xlat73 = x_3203;
        let x_3205 : f32 = u_xlat9.w;
        let x_3206 : f32 = u_xlat73;
        let x_3208 : f32 = u_xlat72;
        u_xlat66 = ((x_3205 * x_3206) + x_3208);
      }
    }
  } else {
    let x_3212 : vec4<f32> = u_xlat4;
    let x_3213 : vec2<f32> = vec2<f32>(x_3212.x, x_3212.y);
    let x_3215 : f32 = u_xlat4.z;
    txVec59 = vec3<f32>(x_3213.x, x_3213.y, x_3215);
    let x_3222 : vec3<f32> = txVec59;
    let x_3224 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_3222.xy, x_3222.z);
    u_xlat66 = x_3224;
  }
  let x_3225 : f32 = u_xlat66;
  let x_3227 : f32 = x_138.x_MainLightShadowParams.x;
  let x_3229 : f32 = u_xlat70;
  u_xlat66 = ((x_3225 * x_3227) + x_3229);
  let x_3231 : bool = u_xlatb5;
  let x_3232 : f32 = u_xlat66;
  u_xlat66 = select(x_3232, 1.0f, x_3231);
  let x_3234 : vec3<f32> = vs_INTERP0;
  let x_3236 : vec3<f32> = x_66.x_WorldSpaceCameraPos;
  let x_3238 : vec3<f32> = (x_3234 + -(x_3236));
  let x_3239 : vec4<f32> = u_xlat4;
  u_xlat4 = vec4<f32>(x_3238.x, x_3238.y, x_3238.z, x_3239.w);
  let x_3241 : vec4<f32> = u_xlat4;
  let x_3243 : vec4<f32> = u_xlat4;
  u_xlat4.x = dot(vec3<f32>(x_3241.x, x_3241.y, x_3241.z), vec3<f32>(x_3243.x, x_3243.y, x_3243.z));
  let x_3248 : f32 = u_xlat4.x;
  let x_3250 : f32 = x_138.x_MainLightShadowParams.z;
  let x_3253 : f32 = x_138.x_MainLightShadowParams.w;
  u_xlat4.x = ((x_3248 * x_3250) + x_3253);
  let x_3257 : f32 = u_xlat4.x;
  u_xlat4.x = clamp(x_3257, 0.0f, 1.0f);
  let x_3261 : f32 = u_xlat66;
  u_xlat26 = (-(x_3261) + 1.0f);
  let x_3265 : f32 = u_xlat4.x;
  let x_3266 : f32 = u_xlat26;
  let x_3268 : f32 = u_xlat66;
  u_xlat66 = ((x_3265 * x_3266) + x_3268);
  let x_3270 : f32 = u_xlat71;
  let x_3273 : vec4<f32> = x_66.x_MainLightColor;
  let x_3275 : vec3<f32> = (vec3<f32>(x_3270, x_3270, x_3270) * vec3<f32>(x_3273.x, x_3273.y, x_3273.z));
  let x_3276 : vec4<f32> = u_xlat4;
  u_xlat4 = vec4<f32>(x_3275.x, x_3275.y, x_3275.z, x_3276.w);
  let x_3278 : vec4<f32> = u_xlat7;
  let x_3281 : vec4<f32> = u_xlat6;
  u_xlat70 = dot(-(vec3<f32>(x_3278.x, x_3278.y, x_3278.z)), vec3<f32>(x_3281.x, x_3281.y, x_3281.z));
  let x_3284 : f32 = u_xlat70;
  let x_3285 : f32 = u_xlat70;
  u_xlat70 = (x_3284 + x_3285);
  let x_3287 : vec4<f32> = u_xlat6;
  let x_3289 : f32 = u_xlat70;
  let x_3293 : vec4<f32> = u_xlat7;
  let x_3296 : vec3<f32> = ((vec3<f32>(x_3287.x, x_3287.y, x_3287.z) * -(vec3<f32>(x_3289, x_3289, x_3289))) + -(vec3<f32>(x_3293.x, x_3293.y, x_3293.z)));
  let x_3297 : vec4<f32> = u_xlat8;
  u_xlat8 = vec4<f32>(x_3296.x, x_3296.y, x_3296.z, x_3297.w);
  let x_3299 : vec4<f32> = u_xlat6;
  let x_3301 : vec4<f32> = u_xlat7;
  u_xlat70 = dot(vec3<f32>(x_3299.x, x_3299.y, x_3299.z), vec3<f32>(x_3301.x, x_3301.y, x_3301.z));
  let x_3304 : f32 = u_xlat70;
  u_xlat70 = clamp(x_3304, 0.0f, 1.0f);
  let x_3306 : f32 = u_xlat70;
  u_xlat70 = (-(x_3306) + 1.0f);
  let x_3309 : f32 = u_xlat70;
  let x_3310 : f32 = u_xlat70;
  u_xlat70 = (x_3309 * x_3310);
  let x_3312 : f32 = u_xlat70;
  let x_3313 : f32 = u_xlat70;
  u_xlat70 = (x_3312 * x_3313);
  let x_3316 : f32 = u_xlat23.x;
  u_xlat5.x = ((-(x_3316) * 0.699999988f) + 1.700000048f);
  let x_3324 : f32 = u_xlat23.x;
  let x_3326 : f32 = u_xlat5.x;
  u_xlat23.x = (x_3324 * x_3326);
  let x_3330 : f32 = u_xlat23.x;
  u_xlat23.x = (x_3330 * 6.0f);
  let x_3342 : vec4<f32> = u_xlat8;
  let x_3345 : f32 = u_xlat23.x;
  let x_3346 : vec4<f32> = textureSampleLevel(unity_SpecCube0, samplerunity_SpecCube0, vec3<f32>(x_3342.x, x_3342.y, x_3342.z), x_3345);
  u_xlat8 = x_3346;
  let x_3348 : f32 = u_xlat8.w;
  u_xlat23.x = (x_3348 + -1.0f);
  let x_3352 : f32 = x_1752.unity_SpecCube0_HDR.w;
  let x_3354 : f32 = u_xlat23.x;
  u_xlat23.x = ((x_3352 * x_3354) + 1.0f);
  let x_3359 : f32 = u_xlat23.x;
  u_xlat23.x = max(x_3359, 0.0f);
  let x_3363 : f32 = u_xlat23.x;
  u_xlat23.x = log2(x_3363);
  let x_3367 : f32 = u_xlat23.x;
  let x_3369 : f32 = x_1752.unity_SpecCube0_HDR.y;
  u_xlat23.x = (x_3367 * x_3369);
  let x_3373 : f32 = u_xlat23.x;
  u_xlat23.x = exp2(x_3373);
  let x_3377 : f32 = u_xlat23.x;
  let x_3379 : f32 = x_1752.unity_SpecCube0_HDR.x;
  u_xlat23.x = (x_3377 * x_3379);
  let x_3382 : vec4<f32> = u_xlat8;
  let x_3384 : vec3<f32> = u_xlat23;
  let x_3386 : vec3<f32> = (vec3<f32>(x_3382.x, x_3382.y, x_3382.z) * vec3<f32>(x_3384.x, x_3384.x, x_3384.x));
  let x_3387 : vec4<f32> = u_xlat8;
  u_xlat8 = vec4<f32>(x_3386.x, x_3386.y, x_3386.z, x_3387.w);
  let x_3389 : f32 = u_xlat67;
  let x_3391 : f32 = u_xlat67;
  let x_3395 : vec2<f32> = ((vec2<f32>(x_3389, x_3389) * vec2<f32>(x_3391, x_3391)) + vec2<f32>(-1.0f, 1.0f));
  let x_3396 : vec3<f32> = u_xlat23;
  u_xlat23 = vec3<f32>(x_3395.x, x_3396.y, x_3395.y);
  let x_3399 : f32 = u_xlat23.z;
  u_xlat67 = (1.0f / x_3399);
  let x_3402 : f32 = u_xlat3.x;
  u_xlat3.x = (x_3402 + -0.039999999f);
  let x_3406 : f32 = u_xlat70;
  let x_3408 : f32 = u_xlat3.x;
  u_xlat3.x = ((x_3406 * x_3408) + 0.039999999f);
  let x_3413 : f32 = u_xlat67;
  let x_3415 : f32 = u_xlat3.x;
  u_xlat67 = (x_3413 * x_3415);
  let x_3417 : f32 = u_xlat67;
  let x_3419 : vec4<f32> = u_xlat8;
  let x_3421 : vec3<f32> = (vec3<f32>(x_3417, x_3417, x_3417) * vec3<f32>(x_3419.x, x_3419.y, x_3419.z));
  let x_3422 : vec4<f32> = u_xlat8;
  u_xlat8 = vec4<f32>(x_3421.x, x_3421.y, x_3421.z, x_3422.w);
  let x_3424 : vec3<f32> = u_xlat25;
  let x_3425 : vec3<f32> = u_xlat2;
  let x_3427 : vec4<f32> = u_xlat8;
  let x_3429 : vec3<f32> = ((x_3424 * x_3425) + vec3<f32>(x_3427.x, x_3427.y, x_3427.z));
  let x_3430 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_3429.x, x_3429.y, x_3429.z, x_3430.w);
  let x_3432 : f32 = u_xlat66;
  let x_3434 : f32 = x_1752.unity_LightData.z;
  u_xlat66 = (x_3432 * x_3434);
  let x_3436 : vec4<f32> = u_xlat6;
  let x_3439 : vec4<f32> = x_66.x_MainLightPosition;
  u_xlat67 = dot(vec3<f32>(x_3436.x, x_3436.y, x_3436.z), vec3<f32>(x_3439.x, x_3439.y, x_3439.z));
  let x_3442 : f32 = u_xlat67;
  u_xlat67 = clamp(x_3442, 0.0f, 1.0f);
  let x_3444 : f32 = u_xlat66;
  let x_3445 : f32 = u_xlat67;
  u_xlat66 = (x_3444 * x_3445);
  let x_3447 : f32 = u_xlat66;
  let x_3449 : vec4<f32> = u_xlat4;
  let x_3451 : vec3<f32> = (vec3<f32>(x_3447, x_3447, x_3447) * vec3<f32>(x_3449.x, x_3449.y, x_3449.z));
  let x_3452 : vec4<f32> = u_xlat4;
  u_xlat4 = vec4<f32>(x_3451.x, x_3451.y, x_3451.z, x_3452.w);
  let x_3454 : vec4<f32> = u_xlat7;
  let x_3457 : vec4<f32> = x_66.x_MainLightPosition;
  let x_3459 : vec3<f32> = (vec3<f32>(x_3454.x, x_3454.y, x_3454.z) + vec3<f32>(x_3457.x, x_3457.y, x_3457.z));
  let x_3460 : vec4<f32> = u_xlat8;
  u_xlat8 = vec4<f32>(x_3459.x, x_3459.y, x_3459.z, x_3460.w);
  let x_3462 : vec4<f32> = u_xlat8;
  let x_3464 : vec4<f32> = u_xlat8;
  u_xlat66 = dot(vec3<f32>(x_3462.x, x_3462.y, x_3462.z), vec3<f32>(x_3464.x, x_3464.y, x_3464.z));
  let x_3467 : f32 = u_xlat66;
  u_xlat66 = max(x_3467, 1.17549435e-37f);
  let x_3470 : f32 = u_xlat66;
  u_xlat66 = inverseSqrt(x_3470);
  let x_3472 : f32 = u_xlat66;
  let x_3474 : vec4<f32> = u_xlat8;
  let x_3476 : vec3<f32> = (vec3<f32>(x_3472, x_3472, x_3472) * vec3<f32>(x_3474.x, x_3474.y, x_3474.z));
  let x_3477 : vec4<f32> = u_xlat8;
  u_xlat8 = vec4<f32>(x_3476.x, x_3476.y, x_3476.z, x_3477.w);
  let x_3479 : vec4<f32> = u_xlat6;
  let x_3481 : vec4<f32> = u_xlat8;
  u_xlat66 = dot(vec3<f32>(x_3479.x, x_3479.y, x_3479.z), vec3<f32>(x_3481.x, x_3481.y, x_3481.z));
  let x_3484 : f32 = u_xlat66;
  u_xlat66 = clamp(x_3484, 0.0f, 1.0f);
  let x_3487 : vec4<f32> = x_66.x_MainLightPosition;
  let x_3489 : vec4<f32> = u_xlat8;
  u_xlat67 = dot(vec3<f32>(x_3487.x, x_3487.y, x_3487.z), vec3<f32>(x_3489.x, x_3489.y, x_3489.z));
  let x_3492 : f32 = u_xlat67;
  u_xlat67 = clamp(x_3492, 0.0f, 1.0f);
  let x_3494 : f32 = u_xlat66;
  let x_3495 : f32 = u_xlat66;
  u_xlat66 = (x_3494 * x_3495);
  let x_3497 : f32 = u_xlat66;
  let x_3499 : f32 = u_xlat23.x;
  u_xlat66 = ((x_3497 * x_3499) + 1.000010014f);
  let x_3503 : f32 = u_xlat67;
  let x_3504 : f32 = u_xlat67;
  u_xlat67 = (x_3503 * x_3504);
  let x_3506 : f32 = u_xlat66;
  let x_3507 : f32 = u_xlat66;
  u_xlat66 = (x_3506 * x_3507);
  let x_3509 : f32 = u_xlat67;
  u_xlat67 = max(x_3509, 0.100000001f);
  let x_3512 : f32 = u_xlat66;
  let x_3513 : f32 = u_xlat67;
  u_xlat66 = (x_3512 * x_3513);
  let x_3516 : f32 = u_xlat27.x;
  let x_3517 : f32 = u_xlat66;
  u_xlat66 = (x_3516 * x_3517);
  let x_3519 : f32 = u_xlat68;
  let x_3520 : f32 = u_xlat66;
  u_xlat66 = (x_3519 / x_3520);
  let x_3522 : f32 = u_xlat66;
  let x_3526 : vec3<f32> = u_xlat2;
  let x_3527 : vec3<f32> = ((vec3<f32>(x_3522, x_3522, x_3522) * vec3<f32>(0.039999999f, 0.039999999f, 0.039999999f)) + x_3526);
  let x_3528 : vec4<f32> = u_xlat8;
  u_xlat8 = vec4<f32>(x_3527.x, x_3527.y, x_3527.z, x_3528.w);
  let x_3530 : vec4<f32> = u_xlat4;
  let x_3532 : vec4<f32> = u_xlat8;
  let x_3534 : vec3<f32> = (vec3<f32>(x_3530.x, x_3530.y, x_3530.z) * vec3<f32>(x_3532.x, x_3532.y, x_3532.z));
  let x_3535 : vec4<f32> = u_xlat4;
  u_xlat4 = vec4<f32>(x_3534.x, x_3534.y, x_3534.z, x_3535.w);
  let x_3538 : f32 = x_66.x_AdditionalLightsCount.x;
  let x_3540 : f32 = x_1752.unity_LightData.y;
  u_xlat66 = min(x_3538, x_3540);
  let x_3542 : f32 = u_xlat66;
  u_xlatu66 = bitcast<u32>(i32(x_3542));
  u_xlat8.x = 0.0f;
  u_xlat8.y = 0.0f;
  u_xlat8.z = 0.0f;
  u_xlatu_loop_1 = 0u;
  loop {
    let x_3554 : u32 = u_xlatu_loop_1;
    let x_3555 : u32 = u_xlatu66;
    if ((x_3554 < x_3555)) {
    } else {
      break;
    }
    let x_3558 : u32 = u_xlatu_loop_1;
    u_xlatu69 = (x_3558 >> 2u);
    let x_3561 : u32 = u_xlatu_loop_1;
    u_xlati70 = bitcast<i32>((x_3561 & 3u));
    let x_3565 : u32 = u_xlatu69;
    let x_3568 : vec4<f32> = x_1752.unity_LightIndices[bitcast<i32>(x_3565)];
    let x_3578 : i32 = u_xlati70;
    indexable = array<vec4<u32>, 4u>(vec4<u32>(1065353216u, 0u, 0u, 0u), vec4<u32>(0u, 1065353216u, 0u, 0u), vec4<u32>(0u, 0u, 1065353216u, 0u), vec4<u32>(0u, 0u, 0u, 1065353216u));
    let x_3583 : vec4<u32> = indexable[x_3578];
    u_xlat69 = dot(x_3568, bitcast<vec4<f32>>(x_3583));
    let x_3587 : f32 = u_xlat69;
    u_xlati69 = i32(x_3587);
    let x_3589 : vec3<f32> = vs_INTERP0;
    let x_3601 : i32 = u_xlati69;
    let x_3603 : vec4<f32> = x_3600.x_AdditionalLightsPosition[x_3601];
    let x_3606 : i32 = u_xlati69;
    let x_3608 : vec4<f32> = x_3600.x_AdditionalLightsPosition[x_3606];
    let x_3610 : vec3<f32> = ((-(x_3589) * vec3<f32>(x_3603.w, x_3603.w, x_3603.w)) + vec3<f32>(x_3608.x, x_3608.y, x_3608.z));
    let x_3611 : vec4<f32> = u_xlat9;
    u_xlat9 = vec4<f32>(x_3610.x, x_3610.y, x_3610.z, x_3611.w);
    let x_3613 : vec4<f32> = u_xlat9;
    let x_3615 : vec4<f32> = u_xlat9;
    u_xlat70 = dot(vec3<f32>(x_3613.x, x_3613.y, x_3613.z), vec3<f32>(x_3615.x, x_3615.y, x_3615.z));
    let x_3618 : f32 = u_xlat70;
    u_xlat70 = max(x_3618, 6.10351562e-05f);
    let x_3621 : f32 = u_xlat70;
    u_xlat5.x = inverseSqrt(x_3621);
    let x_3624 : vec4<f32> = u_xlat5;
    let x_3626 : vec4<f32> = u_xlat9;
    let x_3628 : vec3<f32> = (vec3<f32>(x_3624.x, x_3624.x, x_3624.x) * vec3<f32>(x_3626.x, x_3626.y, x_3626.z));
    let x_3629 : vec4<f32> = u_xlat10;
    u_xlat10 = vec4<f32>(x_3628.x, x_3628.y, x_3628.z, x_3629.w);
    let x_3631 : f32 = u_xlat70;
    u_xlat72 = (1.0f / x_3631);
    let x_3633 : f32 = u_xlat70;
    let x_3634 : i32 = u_xlati69;
    let x_3636 : f32 = x_3600.x_AdditionalLightsAttenuation[x_3634].x;
    u_xlat70 = (x_3633 * x_3636);
    let x_3638 : f32 = u_xlat70;
    let x_3640 : f32 = u_xlat70;
    u_xlat70 = ((-(x_3638) * x_3640) + 1.0f);
    let x_3643 : f32 = u_xlat70;
    u_xlat70 = max(x_3643, 0.0f);
    let x_3645 : f32 = u_xlat70;
    let x_3646 : f32 = u_xlat70;
    u_xlat70 = (x_3645 * x_3646);
    let x_3648 : f32 = u_xlat70;
    let x_3649 : f32 = u_xlat72;
    u_xlat70 = (x_3648 * x_3649);
    let x_3651 : i32 = u_xlati69;
    let x_3653 : vec4<f32> = x_3600.x_AdditionalLightsSpotDir[x_3651];
    let x_3655 : vec4<f32> = u_xlat10;
    u_xlat72 = dot(vec3<f32>(x_3653.x, x_3653.y, x_3653.z), vec3<f32>(x_3655.x, x_3655.y, x_3655.z));
    let x_3658 : f32 = u_xlat72;
    let x_3659 : i32 = u_xlati69;
    let x_3661 : f32 = x_3600.x_AdditionalLightsAttenuation[x_3659].z;
    let x_3663 : i32 = u_xlati69;
    let x_3665 : f32 = x_3600.x_AdditionalLightsAttenuation[x_3663].w;
    u_xlat72 = ((x_3658 * x_3661) + x_3665);
    let x_3667 : f32 = u_xlat72;
    u_xlat72 = clamp(x_3667, 0.0f, 1.0f);
    let x_3669 : f32 = u_xlat72;
    let x_3670 : f32 = u_xlat72;
    u_xlat72 = (x_3669 * x_3670);
    let x_3672 : f32 = u_xlat70;
    let x_3673 : f32 = u_xlat72;
    u_xlat70 = (x_3672 * x_3673);
    let x_3675 : f32 = u_xlat71;
    let x_3677 : i32 = u_xlati69;
    let x_3679 : vec4<f32> = x_3600.x_AdditionalLightsColor[x_3677];
    let x_3681 : vec3<f32> = (vec3<f32>(x_3675, x_3675, x_3675) * vec3<f32>(x_3679.x, x_3679.y, x_3679.z));
    let x_3682 : vec4<f32> = u_xlat11;
    u_xlat11 = vec4<f32>(x_3681.x, x_3681.y, x_3681.z, x_3682.w);
    let x_3684 : vec4<f32> = u_xlat6;
    let x_3686 : vec4<f32> = u_xlat10;
    u_xlat69 = dot(vec3<f32>(x_3684.x, x_3684.y, x_3684.z), vec3<f32>(x_3686.x, x_3686.y, x_3686.z));
    let x_3689 : f32 = u_xlat69;
    u_xlat69 = clamp(x_3689, 0.0f, 1.0f);
    let x_3691 : f32 = u_xlat69;
    let x_3692 : f32 = u_xlat70;
    u_xlat69 = (x_3691 * x_3692);
    let x_3694 : f32 = u_xlat69;
    let x_3696 : vec4<f32> = u_xlat11;
    let x_3698 : vec3<f32> = (vec3<f32>(x_3694, x_3694, x_3694) * vec3<f32>(x_3696.x, x_3696.y, x_3696.z));
    let x_3699 : vec4<f32> = u_xlat11;
    u_xlat11 = vec4<f32>(x_3698.x, x_3698.y, x_3698.z, x_3699.w);
    let x_3701 : vec4<f32> = u_xlat9;
    let x_3703 : vec4<f32> = u_xlat5;
    let x_3706 : vec4<f32> = u_xlat7;
    let x_3708 : vec3<f32> = ((vec3<f32>(x_3701.x, x_3701.y, x_3701.z) * vec3<f32>(x_3703.x, x_3703.x, x_3703.x)) + vec3<f32>(x_3706.x, x_3706.y, x_3706.z));
    let x_3709 : vec4<f32> = u_xlat9;
    u_xlat9 = vec4<f32>(x_3708.x, x_3708.y, x_3708.z, x_3709.w);
    let x_3711 : vec4<f32> = u_xlat9;
    let x_3713 : vec4<f32> = u_xlat9;
    u_xlat69 = dot(vec3<f32>(x_3711.x, x_3711.y, x_3711.z), vec3<f32>(x_3713.x, x_3713.y, x_3713.z));
    let x_3716 : f32 = u_xlat69;
    u_xlat69 = max(x_3716, 1.17549435e-37f);
    let x_3718 : f32 = u_xlat69;
    u_xlat69 = inverseSqrt(x_3718);
    let x_3720 : f32 = u_xlat69;
    let x_3722 : vec4<f32> = u_xlat9;
    let x_3724 : vec3<f32> = (vec3<f32>(x_3720, x_3720, x_3720) * vec3<f32>(x_3722.x, x_3722.y, x_3722.z));
    let x_3725 : vec4<f32> = u_xlat9;
    u_xlat9 = vec4<f32>(x_3724.x, x_3724.y, x_3724.z, x_3725.w);
    let x_3727 : vec4<f32> = u_xlat6;
    let x_3729 : vec4<f32> = u_xlat9;
    u_xlat69 = dot(vec3<f32>(x_3727.x, x_3727.y, x_3727.z), vec3<f32>(x_3729.x, x_3729.y, x_3729.z));
    let x_3732 : f32 = u_xlat69;
    u_xlat69 = clamp(x_3732, 0.0f, 1.0f);
    let x_3734 : vec4<f32> = u_xlat10;
    let x_3736 : vec4<f32> = u_xlat9;
    u_xlat70 = dot(vec3<f32>(x_3734.x, x_3734.y, x_3734.z), vec3<f32>(x_3736.x, x_3736.y, x_3736.z));
    let x_3739 : f32 = u_xlat70;
    u_xlat70 = clamp(x_3739, 0.0f, 1.0f);
    let x_3741 : f32 = u_xlat69;
    let x_3742 : f32 = u_xlat69;
    u_xlat69 = (x_3741 * x_3742);
    let x_3744 : f32 = u_xlat69;
    let x_3746 : f32 = u_xlat23.x;
    u_xlat69 = ((x_3744 * x_3746) + 1.000010014f);
    let x_3749 : f32 = u_xlat70;
    let x_3750 : f32 = u_xlat70;
    u_xlat70 = (x_3749 * x_3750);
    let x_3752 : f32 = u_xlat69;
    let x_3753 : f32 = u_xlat69;
    u_xlat69 = (x_3752 * x_3753);
    let x_3755 : f32 = u_xlat70;
    u_xlat70 = max(x_3755, 0.100000001f);
    let x_3757 : f32 = u_xlat69;
    let x_3758 : f32 = u_xlat70;
    u_xlat69 = (x_3757 * x_3758);
    let x_3761 : f32 = u_xlat27.x;
    let x_3762 : f32 = u_xlat69;
    u_xlat69 = (x_3761 * x_3762);
    let x_3764 : f32 = u_xlat68;
    let x_3765 : f32 = u_xlat69;
    u_xlat69 = (x_3764 / x_3765);
    let x_3767 : f32 = u_xlat69;
    let x_3770 : vec3<f32> = u_xlat2;
    let x_3771 : vec3<f32> = ((vec3<f32>(x_3767, x_3767, x_3767) * vec3<f32>(0.039999999f, 0.039999999f, 0.039999999f)) + x_3770);
    let x_3772 : vec4<f32> = u_xlat9;
    u_xlat9 = vec4<f32>(x_3771.x, x_3771.y, x_3771.z, x_3772.w);
    let x_3774 : vec4<f32> = u_xlat9;
    let x_3776 : vec4<f32> = u_xlat11;
    let x_3779 : vec4<f32> = u_xlat8;
    let x_3781 : vec3<f32> = ((vec3<f32>(x_3774.x, x_3774.y, x_3774.z) * vec3<f32>(x_3776.x, x_3776.y, x_3776.z)) + vec3<f32>(x_3779.x, x_3779.y, x_3779.z));
    let x_3782 : vec4<f32> = u_xlat8;
    u_xlat8 = vec4<f32>(x_3781.x, x_3781.y, x_3781.z, x_3782.w);

    continuing {
      let x_3784 : u32 = u_xlatu_loop_1;
      u_xlatu_loop_1 = (x_3784 + bitcast<u32>(1i));
    }
  }
  let x_3786 : vec4<f32> = u_xlat3;
  let x_3788 : vec2<f32> = u_xlat49;
  let x_3791 : vec4<f32> = u_xlat4;
  u_xlat2 = ((vec3<f32>(x_3786.x, x_3786.y, x_3786.z) * vec3<f32>(x_3788.x, x_3788.x, x_3788.x)) + vec3<f32>(x_3791.x, x_3791.y, x_3791.z));
  let x_3794 : vec4<f32> = u_xlat8;
  let x_3796 : vec3<f32> = u_xlat2;
  u_xlat2 = (vec3<f32>(x_3794.x, x_3794.y, x_3794.z) + x_3796);
  let x_3800 : vec4<f32> = vs_INTERP4;
  let x_3802 : vec3<f32> = u_xlat0;
  let x_3804 : vec3<f32> = u_xlat2;
  let x_3805 : vec3<f32> = ((vec3<f32>(x_3800.w, x_3800.w, x_3800.w) * x_3802) + x_3804);
  let x_3806 : vec4<f32> = SV_Target0;
  SV_Target0 = vec4<f32>(x_3805.x, x_3805.y, x_3805.z, x_3806.w);
  let x_3808 : bool = u_xlatb45;
  if (x_3808) {
    let x_3813 : f32 = u_xlat1.x;
    x_3809 = x_3813;
  } else {
    x_3809 = 1.0f;
  }
  let x_3815 : f32 = x_3809;
  SV_Target0.w = x_3815;
  return;
}

struct main_out {
  @location(0)
  SV_Target0_1 : vec4<f32>,
}

@fragment
fn main(@builtin(position) gl_FragCoord_param : vec4<f32>, @location(1) vs_INTERP1_param : vec3<f32>, @location(3) vs_INTERP3_param : vec4<f32>, @location(4) vs_INTERP4_param : vec4<f32>, @location(0) vs_INTERP0_param : vec3<f32>, @location(2) vs_INTERP2_param : vec4<f32>) -> main_out {
  gl_FragCoord = gl_FragCoord_param;
  vs_INTERP1 = vs_INTERP1_param;
  vs_INTERP3 = vs_INTERP3_param;
  vs_INTERP4 = vs_INTERP4_param;
  vs_INTERP0 = vs_INTERP0_param;
  vs_INTERP2 = vs_INTERP2_param;
  main_1();
  return main_out(SV_Target0);
}

