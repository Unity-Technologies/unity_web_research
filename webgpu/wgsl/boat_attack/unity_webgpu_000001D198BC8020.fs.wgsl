struct PGlobals {
  x_ScaledScreenParams : vec4<f32>,
  x_GlobalMipBias : vec2<f32>,
  x_AlphaToMaskAvailable : f32,
  @size(4)
  padding : u32,
  x_MainLightPosition : vec4<f32>,
  x_MainLightColor : vec4<f32>,
  x_AmbientOcclusionParam : vec4<f32>,
  x_AdditionalLightsCount : vec4<f32>,
  x_RenderingLayerMaxInt : u32,
  x_RenderingLayerRcpMaxInt : f32,
  @size(8)
  padding_1 : u32,
  x_WorldSpaceCameraPos : vec3<f32>,
  @size(4)
  padding_2 : u32,
  unity_OrthoParams : vec4<f32>,
  x_ScaleBiasRt : vec4<f32>,
  unity_MatrixV : mat4x4<f32>,
}

struct UnityPerMaterial {
  Texture2D_B222E8F_TexelSize : vec4<f32>,
  Color_C30C7CA3 : vec4<f32>,
  Texture2D_D9BFD5F1_TexelSize : vec4<f32>,
}

type Arr = array<mat4x4<f32>, 5u>;

struct MainLightShadows {
  x_MainLightWorldToShadow : Arr,
  x_CascadeShadowSplitSpheres0 : vec4<f32>,
  x_CascadeShadowSplitSpheres1 : vec4<f32>,
  x_CascadeShadowSplitSpheres2 : vec4<f32>,
  x_CascadeShadowSplitSpheres3 : vec4<f32>,
  x_CascadeShadowSplitSphereRadii : vec4<f32>,
  x_MainLightShadowOffset0 : vec4<f32>,
  x_MainLightShadowOffset1 : vec4<f32>,
  x_MainLightShadowParams : vec4<f32>,
  x_MainLightShadowmapSize : vec4<f32>,
}

type Arr_1 = array<vec4<f32>, 2u>;

struct UnityPerDraw {
  unity_ObjectToWorld : mat4x4<f32>,
  unity_WorldToObject : mat4x4<f32>,
  unity_LODFade : vec4<f32>,
  unity_WorldTransformParams : vec4<f32>,
  unity_RenderingLayer : vec4<f32>,
  unity_LightData : vec4<f32>,
  unity_LightIndices : Arr_1,
  unity_ProbesOcclusion : vec4<f32>,
  unity_SpecCube0_HDR : vec4<f32>,
  unity_SpecCube1_HDR : vec4<f32>,
  unity_SpecCube0_BoxMax : vec4<f32>,
  unity_SpecCube0_BoxMin : vec4<f32>,
  unity_SpecCube0_ProbePosition : vec4<f32>,
  unity_SpecCube1_BoxMax : vec4<f32>,
  unity_SpecCube1_BoxMin : vec4<f32>,
  unity_SpecCube1_ProbePosition : vec4<f32>,
  unity_LightmapST : vec4<f32>,
  unity_DynamicLightmapST : vec4<f32>,
  unity_SHAr : vec4<f32>,
  unity_SHAg : vec4<f32>,
  unity_SHAb : vec4<f32>,
  unity_SHBr : vec4<f32>,
  unity_SHBg : vec4<f32>,
  unity_SHBb : vec4<f32>,
  unity_SHC : vec4<f32>,
  unity_RendererBounds_Min : vec4<f32>,
  unity_RendererBounds_Max : vec4<f32>,
  unity_MatrixPreviousM : mat4x4<f32>,
  unity_MatrixPreviousMI : mat4x4<f32>,
  unity_MotionVectorsParams : vec4<f32>,
  unity_SpriteColor : vec4<f32>,
  unity_SpriteProps : vec4<f32>,
}

struct strided_arr {
  @size(16)
  el : f32,
}

type Arr_2 = array<strided_arr, 8u>;

struct LightCookies {
  x_MainLightWorldToLight : mat4x4<f32>,
  x_AdditionalLightsCookieEnableBits : Arr_2,
  x_MainLightCookieTextureFormat : f32,
  x_AdditionalLightsCookieAtlasTextureFormat : f32,
}

type Arr_3 = array<vec4<f32>, 256u>;

type Arr_4 = array<vec4<f32>, 256u>;

type Arr_5 = array<vec4<f32>, 256u>;

type Arr_6 = array<vec4<f32>, 256u>;

type Arr_7 = array<vec4<f32>, 256u>;

struct strided_arr_1 {
  @size(16)
  el : f32,
}

type Arr_8 = array<strided_arr_1, 256u>;

type Arr_9 = array<vec4<f32>, 256u>;

type Arr_10 = array<strided_arr_1, 256u>;

struct AdditionalLights {
  x_AdditionalLightsPosition : Arr_9,
  x_AdditionalLightsColor : Arr_9,
  x_AdditionalLightsAttenuation : Arr_9,
  x_AdditionalLightsSpotDir : Arr_9,
  x_AdditionalLightsOcclusionProbes : Arr_9,
  x_AdditionalLightsLayerMasks : Arr_10,
}

type Arr_11 = array<mat4x4<f32>, 256u>;

struct AdditionalLightsCookies {
  x_AdditionalLightsWorldToLights : Arr_11,
  x_AdditionalLightsCookieAtlasUVRects : Arr_9,
  x_AdditionalLightsLightTypes : Arr_10,
}

var<private> gl_FragCoord : vec4<f32>;

var<private> vs_INTERP1 : vec3<f32>;

@group(0) @binding(5) var Texture2D_B222E8F : texture_2d<f32>;

@group(0) @binding(12) var samplerTexture2D_B222E8F : sampler;

var<private> vs_INTERP3 : vec4<f32>;

@group(1) @binding(0) var<uniform> x_66 : PGlobals;

@group(1) @binding(6) var<uniform> x_78 : UnityPerMaterial;

@group(0) @binding(6) var Texture2D_D9BFD5F1 : texture_2d<f32>;

@group(0) @binding(13) var samplerTexture2D_D9BFD5F1 : sampler;

var<private> vs_INTERP4 : vec4<f32>;

var<private> vs_INTERP0 : vec3<f32>;

@group(1) @binding(3) var<uniform> x_138 : MainLightShadows;

@group(0) @binding(2) var x_MainLightShadowmapTexture : texture_depth_2d;

@group(0) @binding(9) var sampler_MainLightShadowmapTexture : sampler_comparison;

var<private> vs_INTERP2 : vec4<f32>;

@group(1) @binding(2) var<uniform> x_1752 : UnityPerDraw;

@group(0) @binding(1) var x_ScreenSpaceOcclusionTexture : texture_2d<f32>;

@group(0) @binding(8) var sampler_ScreenSpaceOcclusionTexture : sampler;

@group(1) @binding(4) var<uniform> x_3276 : LightCookies;

@group(0) @binding(3) var x_MainLightCookieTexture : texture_2d<f32>;

@group(0) @binding(10) var sampler_MainLightCookieTexture : sampler;

@group(0) @binding(0) var unity_SpecCube0 : texture_cube<f32>;

@group(0) @binding(7) var samplerunity_SpecCube0 : sampler;

@group(1) @binding(1) var<uniform> x_3740 : AdditionalLights;

@group(1) @binding(5) var<uniform> x_3849 : AdditionalLightsCookies;

@group(0) @binding(4) var x_AdditionalLightsCookieAtlasTexture : texture_2d<f32>;

@group(0) @binding(11) var sampler_AdditionalLightsCookieAtlasTexture : sampler;

var<private> SV_Target0 : vec4<f32>;

var<private> SV_Target1 : vec4<f32>;

fn main_1() {
  var hlslcc_FragCoord : vec4<f32>;
  var u_xlat0 : vec3<f32>;
  var u_xlat1 : vec4<f32>;
  var u_xlat2 : vec3<f32>;
  var u_xlat3 : vec4<f32>;
  var u_xlat4 : vec4<f32>;
  var u_xlat66 : f32;
  var u_xlat25 : vec3<f32>;
  var u_xlat5 : vec4<f32>;
  var u_xlat6 : vec4<f32>;
  var u_xlat7 : vec4<f32>;
  var u_xlatb4 : vec4<bool>;
  var u_xlatu66 : u32;
  var u_xlati66 : i32;
  var u_xlatb66 : bool;
  var u_xlatb68 : bool;
  var txVec0 : vec3<f32>;
  var txVec1 : vec3<f32>;
  var txVec2 : vec3<f32>;
  var txVec3 : vec3<f32>;
  var u_xlat68 : f32;
  var u_xlatb70 : bool;
  var u_xlat49 : vec2<f32>;
  var u_xlat51 : vec2<f32>;
  var u_xlat8 : vec4<f32>;
  var u_xlat9 : vec4<f32>;
  var u_xlat10 : vec4<f32>;
  var u_xlat11 : vec4<f32>;
  var u_xlat12 : vec4<f32>;
  var u_xlat13 : vec4<f32>;
  var u_xlat70 : f32;
  var txVec4 : vec3<f32>;
  var txVec5 : vec3<f32>;
  var u_xlat27 : vec3<f32>;
  var txVec6 : vec3<f32>;
  var txVec7 : vec3<f32>;
  var txVec8 : vec3<f32>;
  var txVec9 : vec3<f32>;
  var txVec10 : vec3<f32>;
  var txVec11 : vec3<f32>;
  var txVec12 : vec3<f32>;
  var u_xlat28 : vec3<f32>;
  var u_xlat14 : vec4<f32>;
  var u_xlat15 : vec4<f32>;
  var u_xlat29 : vec2<f32>;
  var u_xlat57 : vec2<f32>;
  var u_xlat52 : vec2<f32>;
  var u_xlat16 : vec4<f32>;
  var u_xlat17 : vec4<f32>;
  var u_xlat18 : vec4<f32>;
  var txVec13 : vec3<f32>;
  var txVec14 : vec3<f32>;
  var txVec15 : vec3<f32>;
  var txVec16 : vec3<f32>;
  var txVec17 : vec3<f32>;
  var txVec18 : vec3<f32>;
  var txVec19 : vec3<f32>;
  var txVec20 : vec3<f32>;
  var txVec21 : vec3<f32>;
  var txVec22 : vec3<f32>;
  var txVec23 : vec3<f32>;
  var txVec24 : vec3<f32>;
  var txVec25 : vec3<f32>;
  var txVec26 : vec3<f32>;
  var txVec27 : vec3<f32>;
  var txVec28 : vec3<f32>;
  var txVec29 : vec3<f32>;
  var u_xlatb5 : bool;
  var u_xlatb27 : bool;
  var u_xlatb1 : bool;
  var x_1665 : f32;
  var u_xlat23 : vec3<f32>;
  var u_xlat45 : f32;
  var u_xlat67 : f32;
  var u_xlatb45 : bool;
  var x_1713 : f32;
  var u_xlatb23 : vec3<bool>;
  var x_1841 : f32;
  var x_1854 : f32;
  var x_1866 : f32;
  var u_xlat71 : f32;
  var txVec30 : vec3<f32>;
  var txVec31 : vec3<f32>;
  var txVec32 : vec3<f32>;
  var txVec33 : vec3<f32>;
  var u_xlatb72 : bool;
  var u_xlat54 : vec2<f32>;
  var u_xlat72 : f32;
  var txVec34 : vec3<f32>;
  var u_xlat73 : f32;
  var txVec35 : vec3<f32>;
  var txVec36 : vec3<f32>;
  var txVec37 : vec3<f32>;
  var txVec38 : vec3<f32>;
  var txVec39 : vec3<f32>;
  var txVec40 : vec3<f32>;
  var txVec41 : vec3<f32>;
  var txVec42 : vec3<f32>;
  var u_xlat31 : vec3<f32>;
  var u_xlat32 : vec2<f32>;
  var u_xlat60 : vec2<f32>;
  var u_xlat55 : vec2<f32>;
  var u_xlat19 : vec4<f32>;
  var u_xlat20 : vec4<f32>;
  var u_xlat21 : vec4<f32>;
  var txVec43 : vec3<f32>;
  var txVec44 : vec3<f32>;
  var txVec45 : vec3<f32>;
  var txVec46 : vec3<f32>;
  var txVec47 : vec3<f32>;
  var txVec48 : vec3<f32>;
  var txVec49 : vec3<f32>;
  var txVec50 : vec3<f32>;
  var txVec51 : vec3<f32>;
  var txVec52 : vec3<f32>;
  var txVec53 : vec3<f32>;
  var txVec54 : vec3<f32>;
  var txVec55 : vec3<f32>;
  var txVec56 : vec3<f32>;
  var txVec57 : vec3<f32>;
  var txVec58 : vec3<f32>;
  var txVec59 : vec3<f32>;
  var u_xlat26 : f32;
  var u_xlatb8 : vec2<bool>;
  var x_3361 : f32;
  var x_3372 : vec3<f32>;
  var u_xlatu_loop_1 : u32;
  var u_xlatu69 : u32;
  var u_xlati70 : i32;
  var u_xlat69 : f32;
  var indexable : array<vec4<u32>, 4u>;
  var u_xlatu72 : u32;
  var u_xlati73 : i32;
  var u_xlati72 : i32;
  var u_xlati52 : i32;
  var u_xlat56 : vec2<f32>;
  var u_xlatb52 : vec2<bool>;
  var x_4141 : f32;
  var x_4154 : f32;
  var x_4206 : f32;
  var x_4217 : vec3<f32>;
  var x_4374 : f32;
  var u_xlatu0 : u32;
  var u_xlat_precise_vec4 : vec4<f32>;
  var u_xlat_precise_ivec4 : vec4<i32>;
  var u_xlat_precise_bvec4 : vec4<bool>;
  var u_xlat_precise_uvec4 : vec4<u32>;
  let x_13 : vec4<f32> = gl_FragCoord;
  let x_14 : vec3<f32> = vec3<f32>(x_13.x, x_13.y, x_13.z);
  let x_20 : f32 = gl_FragCoord.w;
  hlslcc_FragCoord = vec4<f32>(x_14.x, x_14.y, x_14.z, (1.0f / x_20));
  let x_30 : vec3<f32> = vs_INTERP1;
  let x_31 : vec3<f32> = vs_INTERP1;
  u_xlat0.x = dot(x_30, x_31);
  let x_37 : f32 = u_xlat0.x;
  u_xlat0.x = sqrt(x_37);
  let x_41 : f32 = u_xlat0.x;
  u_xlat0.x = (1.0f / x_41);
  let x_44 : vec3<f32> = u_xlat0;
  let x_46 : vec3<f32> = vs_INTERP1;
  u_xlat0 = (vec3<f32>(x_44.x, x_44.x, x_44.x) * x_46);
  let x_61 : vec4<f32> = vs_INTERP3;
  let x_71 : f32 = x_66.x_GlobalMipBias.x;
  let x_72 : vec4<f32> = textureSampleBias(Texture2D_B222E8F, samplerTexture2D_B222E8F, vec2<f32>(x_61.x, x_61.y), x_71);
  u_xlat1 = x_72;
  let x_74 : vec4<f32> = u_xlat1;
  let x_81 : vec4<f32> = x_78.Color_C30C7CA3;
  u_xlat2 = (vec3<f32>(x_74.x, x_74.y, x_74.z) * vec3<f32>(x_81.x, x_81.y, x_81.z));
  let x_90 : vec4<f32> = vs_INTERP3;
  let x_93 : f32 = x_66.x_GlobalMipBias.x;
  let x_94 : vec4<f32> = textureSampleBias(Texture2D_D9BFD5F1, samplerTexture2D_D9BFD5F1, vec2<f32>(x_90.x, x_90.y), x_93);
  u_xlat3 = vec4<f32>(x_94.w, x_94.x, x_94.y, x_94.z);
  let x_97 : vec4<f32> = u_xlat3;
  u_xlat4 = ((vec4<f32>(x_97.y, x_97.z, x_97.w, x_97.x) * vec4<f32>(2.0f, 2.0f, 2.0f, 2.0f)) + vec4<f32>(-1.0f, -1.0f, -1.0f, -1.0f));
  let x_106 : vec4<f32> = u_xlat4;
  let x_107 : vec4<f32> = u_xlat4;
  u_xlat66 = dot(x_106, x_107);
  let x_109 : f32 = u_xlat66;
  u_xlat66 = inverseSqrt(x_109);
  let x_112 : f32 = u_xlat66;
  let x_114 : vec4<f32> = u_xlat4;
  u_xlat25 = (vec3<f32>(x_112, x_112, x_112) * vec3<f32>(x_114.x, x_114.y, x_114.z));
  let x_120 : f32 = vs_INTERP4.y;
  u_xlat66 = (x_120 * 200.0f);
  let x_123 : f32 = u_xlat66;
  u_xlat66 = min(x_123, 1.0f);
  let x_125 : f32 = u_xlat66;
  let x_127 : vec4<f32> = u_xlat1;
  let x_129 : vec3<f32> = (vec3<f32>(x_125, x_125, x_125) * vec3<f32>(x_127.x, x_127.y, x_127.z));
  let x_130 : vec4<f32> = u_xlat1;
  u_xlat1 = vec4<f32>(x_129.x, x_129.y, x_129.z, x_130.w);
  let x_133 : vec3<f32> = vs_INTERP0;
  let x_140 : vec4<f32> = x_138.x_CascadeShadowSplitSpheres0;
  let x_143 : vec3<f32> = (x_133 + -(vec3<f32>(x_140.x, x_140.y, x_140.z)));
  let x_144 : vec4<f32> = u_xlat4;
  u_xlat4 = vec4<f32>(x_143.x, x_143.y, x_143.z, x_144.w);
  let x_147 : vec3<f32> = vs_INTERP0;
  let x_150 : vec4<f32> = x_138.x_CascadeShadowSplitSpheres1;
  let x_153 : vec3<f32> = (x_147 + -(vec3<f32>(x_150.x, x_150.y, x_150.z)));
  let x_154 : vec4<f32> = u_xlat5;
  u_xlat5 = vec4<f32>(x_153.x, x_153.y, x_153.z, x_154.w);
  let x_157 : vec3<f32> = vs_INTERP0;
  let x_160 : vec4<f32> = x_138.x_CascadeShadowSplitSpheres2;
  let x_163 : vec3<f32> = (x_157 + -(vec3<f32>(x_160.x, x_160.y, x_160.z)));
  let x_164 : vec4<f32> = u_xlat6;
  u_xlat6 = vec4<f32>(x_163.x, x_163.y, x_163.z, x_164.w);
  let x_167 : vec3<f32> = vs_INTERP0;
  let x_170 : vec4<f32> = x_138.x_CascadeShadowSplitSpheres3;
  let x_173 : vec3<f32> = (x_167 + -(vec3<f32>(x_170.x, x_170.y, x_170.z)));
  let x_174 : vec4<f32> = u_xlat7;
  u_xlat7 = vec4<f32>(x_173.x, x_173.y, x_173.z, x_174.w);
  let x_176 : vec4<f32> = u_xlat4;
  let x_178 : vec4<f32> = u_xlat4;
  u_xlat4.x = dot(vec3<f32>(x_176.x, x_176.y, x_176.z), vec3<f32>(x_178.x, x_178.y, x_178.z));
  let x_182 : vec4<f32> = u_xlat5;
  let x_184 : vec4<f32> = u_xlat5;
  u_xlat4.y = dot(vec3<f32>(x_182.x, x_182.y, x_182.z), vec3<f32>(x_184.x, x_184.y, x_184.z));
  let x_188 : vec4<f32> = u_xlat6;
  let x_190 : vec4<f32> = u_xlat6;
  u_xlat4.z = dot(vec3<f32>(x_188.x, x_188.y, x_188.z), vec3<f32>(x_190.x, x_190.y, x_190.z));
  let x_195 : vec4<f32> = u_xlat7;
  let x_197 : vec4<f32> = u_xlat7;
  u_xlat4.w = dot(vec3<f32>(x_195.x, x_195.y, x_195.z), vec3<f32>(x_197.x, x_197.y, x_197.z));
  let x_205 : vec4<f32> = u_xlat4;
  let x_208 : vec4<f32> = x_138.x_CascadeShadowSplitSphereRadii;
  u_xlatb4 = (x_205 < x_208);
  let x_212 : bool = u_xlatb4.x;
  u_xlat5.x = select(0.0f, 1.0f, x_212);
  let x_217 : bool = u_xlatb4.y;
  u_xlat5.y = select(0.0f, 1.0f, x_217);
  let x_221 : bool = u_xlatb4.z;
  u_xlat5.z = select(0.0f, 1.0f, x_221);
  let x_225 : bool = u_xlatb4.w;
  u_xlat5.w = select(0.0f, 1.0f, x_225);
  let x_229 : bool = u_xlatb4.x;
  u_xlat4.x = select(-0.0f, -1.0f, x_229);
  let x_234 : bool = u_xlatb4.y;
  u_xlat4.y = select(-0.0f, -1.0f, x_234);
  let x_238 : bool = u_xlatb4.z;
  u_xlat4.z = select(-0.0f, -1.0f, x_238);
  let x_241 : vec4<f32> = u_xlat4;
  let x_243 : vec4<f32> = u_xlat5;
  let x_245 : vec3<f32> = (vec3<f32>(x_241.x, x_241.y, x_241.z) + vec3<f32>(x_243.y, x_243.z, x_243.w));
  let x_246 : vec4<f32> = u_xlat4;
  u_xlat4 = vec4<f32>(x_245.x, x_245.y, x_245.z, x_246.w);
  let x_248 : vec4<f32> = u_xlat4;
  let x_251 : vec3<f32> = max(vec3<f32>(x_248.x, x_248.y, x_248.z), vec3<f32>(0.0f, 0.0f, 0.0f));
  let x_252 : vec4<f32> = u_xlat5;
  u_xlat5 = vec4<f32>(x_252.x, x_251.x, x_251.y, x_251.z);
  let x_254 : vec4<f32> = u_xlat5;
  u_xlat66 = dot(x_254, vec4<f32>(4.0f, 3.0f, 2.0f, 1.0f));
  let x_259 : f32 = u_xlat66;
  u_xlat66 = (-(x_259) + 4.0f);
  let x_264 : f32 = u_xlat66;
  u_xlatu66 = u32(x_264);
  let x_268 : u32 = u_xlatu66;
  u_xlati66 = (bitcast<i32>(x_268) << bitcast<u32>(2i));
  let x_271 : vec3<f32> = vs_INTERP0;
  let x_274 : i32 = u_xlati66;
  let x_277 : i32 = u_xlati66;
  let x_281 : vec4<f32> = x_138.x_MainLightWorldToShadow[((x_274 + 1i) / 4i)][((x_277 + 1i) % 4i)];
  let x_283 : vec3<f32> = (vec3<f32>(x_271.y, x_271.y, x_271.y) * vec3<f32>(x_281.x, x_281.y, x_281.z));
  let x_284 : vec4<f32> = u_xlat4;
  u_xlat4 = vec4<f32>(x_283.x, x_283.y, x_283.z, x_284.w);
  let x_286 : i32 = u_xlati66;
  let x_288 : i32 = u_xlati66;
  let x_291 : vec4<f32> = x_138.x_MainLightWorldToShadow[(x_286 / 4i)][(x_288 % 4i)];
  let x_293 : vec3<f32> = vs_INTERP0;
  let x_296 : vec4<f32> = u_xlat4;
  let x_298 : vec3<f32> = ((vec3<f32>(x_291.x, x_291.y, x_291.z) * vec3<f32>(x_293.x, x_293.x, x_293.x)) + vec3<f32>(x_296.x, x_296.y, x_296.z));
  let x_299 : vec4<f32> = u_xlat4;
  u_xlat4 = vec4<f32>(x_298.x, x_298.y, x_298.z, x_299.w);
  let x_301 : i32 = u_xlati66;
  let x_304 : i32 = u_xlati66;
  let x_308 : vec4<f32> = x_138.x_MainLightWorldToShadow[((x_301 + 2i) / 4i)][((x_304 + 2i) % 4i)];
  let x_310 : vec3<f32> = vs_INTERP0;
  let x_313 : vec4<f32> = u_xlat4;
  let x_315 : vec3<f32> = ((vec3<f32>(x_308.x, x_308.y, x_308.z) * vec3<f32>(x_310.z, x_310.z, x_310.z)) + vec3<f32>(x_313.x, x_313.y, x_313.z));
  let x_316 : vec4<f32> = u_xlat4;
  u_xlat4 = vec4<f32>(x_315.x, x_315.y, x_315.z, x_316.w);
  let x_318 : vec4<f32> = u_xlat4;
  let x_320 : i32 = u_xlati66;
  let x_323 : i32 = u_xlati66;
  let x_327 : vec4<f32> = x_138.x_MainLightWorldToShadow[((x_320 + 3i) / 4i)][((x_323 + 3i) % 4i)];
  let x_329 : vec3<f32> = (vec3<f32>(x_318.x, x_318.y, x_318.z) + vec3<f32>(x_327.x, x_327.y, x_327.z));
  let x_330 : vec4<f32> = u_xlat4;
  u_xlat4 = vec4<f32>(x_329.x, x_329.y, x_329.z, x_330.w);
  let x_335 : f32 = x_138.x_MainLightShadowParams.y;
  u_xlatb66 = (0.0f < x_335);
  let x_337 : bool = u_xlatb66;
  if (x_337) {
    let x_342 : f32 = x_138.x_MainLightShadowParams.y;
    u_xlatb68 = (x_342 == 1.0f);
    let x_344 : bool = u_xlatb68;
    if (x_344) {
      let x_347 : vec4<f32> = u_xlat4;
      let x_351 : vec4<f32> = x_138.x_MainLightShadowOffset0;
      u_xlat5 = (vec4<f32>(x_347.x, x_347.y, x_347.x, x_347.y) + x_351);
      let x_354 : vec4<f32> = u_xlat5;
      let x_355 : vec2<f32> = vec2<f32>(x_354.x, x_354.y);
      let x_357 : f32 = u_xlat4.z;
      txVec0 = vec3<f32>(x_355.x, x_355.y, x_357);
      let x_369 : vec3<f32> = txVec0;
      let x_371 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_369.xy, x_369.z);
      u_xlat6.x = x_371;
      let x_374 : vec4<f32> = u_xlat5;
      let x_375 : vec2<f32> = vec2<f32>(x_374.z, x_374.w);
      let x_377 : f32 = u_xlat4.z;
      txVec1 = vec3<f32>(x_375.x, x_375.y, x_377);
      let x_384 : vec3<f32> = txVec1;
      let x_386 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_384.xy, x_384.z);
      u_xlat6.y = x_386;
      let x_388 : vec4<f32> = u_xlat4;
      let x_392 : vec4<f32> = x_138.x_MainLightShadowOffset1;
      u_xlat5 = (vec4<f32>(x_388.x, x_388.y, x_388.x, x_388.y) + x_392);
      let x_395 : vec4<f32> = u_xlat5;
      let x_396 : vec2<f32> = vec2<f32>(x_395.x, x_395.y);
      let x_398 : f32 = u_xlat4.z;
      txVec2 = vec3<f32>(x_396.x, x_396.y, x_398);
      let x_405 : vec3<f32> = txVec2;
      let x_407 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_405.xy, x_405.z);
      u_xlat6.z = x_407;
      let x_410 : vec4<f32> = u_xlat5;
      let x_411 : vec2<f32> = vec2<f32>(x_410.z, x_410.w);
      let x_413 : f32 = u_xlat4.z;
      txVec3 = vec3<f32>(x_411.x, x_411.y, x_413);
      let x_420 : vec3<f32> = txVec3;
      let x_422 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_420.xy, x_420.z);
      u_xlat6.w = x_422;
      let x_425 : vec4<f32> = u_xlat6;
      u_xlat68 = dot(x_425, vec4<f32>(0.25f, 0.25f, 0.25f, 0.25f));
    } else {
      let x_432 : f32 = x_138.x_MainLightShadowParams.y;
      u_xlatb70 = (x_432 == 2.0f);
      let x_434 : bool = u_xlatb70;
      if (x_434) {
        let x_437 : vec4<f32> = u_xlat4;
        let x_441 : vec4<f32> = x_138.x_MainLightShadowmapSize;
        let x_446 : vec2<f32> = ((vec2<f32>(x_437.x, x_437.y) * vec2<f32>(x_441.z, x_441.w)) + vec2<f32>(0.5f, 0.5f));
        let x_447 : vec4<f32> = u_xlat5;
        u_xlat5 = vec4<f32>(x_446.x, x_446.y, x_447.z, x_447.w);
        let x_449 : vec4<f32> = u_xlat5;
        let x_451 : vec2<f32> = floor(vec2<f32>(x_449.x, x_449.y));
        let x_452 : vec4<f32> = u_xlat5;
        u_xlat5 = vec4<f32>(x_451.x, x_451.y, x_452.z, x_452.w);
        let x_456 : vec4<f32> = u_xlat4;
        let x_459 : vec4<f32> = x_138.x_MainLightShadowmapSize;
        let x_462 : vec4<f32> = u_xlat5;
        u_xlat49 = ((vec2<f32>(x_456.x, x_456.y) * vec2<f32>(x_459.z, x_459.w)) + -(vec2<f32>(x_462.x, x_462.y)));
        let x_466 : vec2<f32> = u_xlat49;
        u_xlat6 = (vec4<f32>(x_466.x, x_466.x, x_466.y, x_466.y) + vec4<f32>(0.5f, 1.0f, 0.5f, 1.0f));
        let x_470 : vec4<f32> = u_xlat6;
        let x_472 : vec4<f32> = u_xlat6;
        u_xlat7 = (vec4<f32>(x_470.x, x_470.x, x_470.z, x_470.z) * vec4<f32>(x_472.x, x_472.x, x_472.z, x_472.z));
        let x_475 : vec4<f32> = u_xlat7;
        let x_479 : vec2<f32> = (vec2<f32>(x_475.y, x_475.w) * vec2<f32>(0.079999998f, 0.079999998f));
        let x_480 : vec4<f32> = u_xlat6;
        u_xlat6 = vec4<f32>(x_479.x, x_480.y, x_479.y, x_480.w);
        let x_482 : vec4<f32> = u_xlat7;
        let x_485 : vec2<f32> = u_xlat49;
        let x_487 : vec2<f32> = ((vec2<f32>(x_482.x, x_482.z) * vec2<f32>(0.5f, 0.5f)) + -(x_485));
        let x_488 : vec4<f32> = u_xlat7;
        u_xlat7 = vec4<f32>(x_487.x, x_487.y, x_488.z, x_488.w);
        let x_491 : vec2<f32> = u_xlat49;
        u_xlat51 = (-(x_491) + vec2<f32>(1.0f, 1.0f));
        let x_496 : vec2<f32> = u_xlat49;
        let x_498 : vec2<f32> = min(x_496, vec2<f32>(0.0f, 0.0f));
        let x_499 : vec4<f32> = u_xlat8;
        u_xlat8 = vec4<f32>(x_498.x, x_498.y, x_499.z, x_499.w);
        let x_501 : vec4<f32> = u_xlat8;
        let x_504 : vec4<f32> = u_xlat8;
        let x_507 : vec2<f32> = u_xlat51;
        let x_508 : vec2<f32> = ((-(vec2<f32>(x_501.x, x_501.y)) * vec2<f32>(x_504.x, x_504.y)) + x_507);
        let x_509 : vec4<f32> = u_xlat8;
        u_xlat8 = vec4<f32>(x_508.x, x_508.y, x_509.z, x_509.w);
        let x_511 : vec2<f32> = u_xlat49;
        u_xlat49 = max(x_511, vec2<f32>(0.0f, 0.0f));
        let x_513 : vec2<f32> = u_xlat49;
        let x_515 : vec2<f32> = u_xlat49;
        let x_517 : vec4<f32> = u_xlat6;
        u_xlat49 = ((-(x_513) * x_515) + vec2<f32>(x_517.y, x_517.w));
        let x_520 : vec4<f32> = u_xlat8;
        let x_522 : vec2<f32> = (vec2<f32>(x_520.x, x_520.y) + vec2<f32>(1.0f, 1.0f));
        let x_523 : vec4<f32> = u_xlat8;
        u_xlat8 = vec4<f32>(x_522.x, x_522.y, x_523.z, x_523.w);
        let x_525 : vec2<f32> = u_xlat49;
        u_xlat49 = (x_525 + vec2<f32>(1.0f, 1.0f));
        let x_528 : vec4<f32> = u_xlat7;
        let x_532 : vec2<f32> = (vec2<f32>(x_528.x, x_528.y) * vec2<f32>(0.159999996f, 0.159999996f));
        let x_533 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_532.x, x_532.y, x_533.z, x_533.w);
        let x_535 : vec2<f32> = u_xlat51;
        let x_536 : vec2<f32> = (x_535 * vec2<f32>(0.159999996f, 0.159999996f));
        let x_537 : vec4<f32> = u_xlat7;
        u_xlat7 = vec4<f32>(x_536.x, x_536.y, x_537.z, x_537.w);
        let x_539 : vec4<f32> = u_xlat8;
        let x_541 : vec2<f32> = (vec2<f32>(x_539.x, x_539.y) * vec2<f32>(0.159999996f, 0.159999996f));
        let x_542 : vec4<f32> = u_xlat8;
        u_xlat8 = vec4<f32>(x_541.x, x_541.y, x_542.z, x_542.w);
        let x_545 : vec2<f32> = u_xlat49;
        let x_546 : vec2<f32> = (x_545 * vec2<f32>(0.159999996f, 0.159999996f));
        let x_547 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_546.x, x_546.y, x_547.z, x_547.w);
        let x_549 : vec4<f32> = u_xlat6;
        u_xlat49 = (vec2<f32>(x_549.y, x_549.w) * vec2<f32>(0.159999996f, 0.159999996f));
        let x_553 : f32 = u_xlat8.x;
        u_xlat9.z = x_553;
        let x_556 : f32 = u_xlat49.x;
        u_xlat9.w = x_556;
        let x_559 : f32 = u_xlat10.x;
        u_xlat7.z = x_559;
        let x_562 : f32 = u_xlat6.x;
        u_xlat7.w = x_562;
        let x_565 : vec4<f32> = u_xlat7;
        let x_567 : vec4<f32> = u_xlat9;
        u_xlat11 = (vec4<f32>(x_565.z, x_565.w, x_565.x, x_565.z) + vec4<f32>(x_567.z, x_567.w, x_567.x, x_567.z));
        let x_571 : f32 = u_xlat9.y;
        u_xlat8.z = x_571;
        let x_574 : f32 = u_xlat49.y;
        u_xlat8.w = x_574;
        let x_577 : f32 = u_xlat7.y;
        u_xlat10.z = x_577;
        let x_580 : f32 = u_xlat6.z;
        u_xlat10.w = x_580;
        let x_582 : vec4<f32> = u_xlat8;
        let x_584 : vec4<f32> = u_xlat10;
        let x_586 : vec3<f32> = (vec3<f32>(x_582.z, x_582.y, x_582.w) + vec3<f32>(x_584.z, x_584.y, x_584.w));
        let x_587 : vec4<f32> = u_xlat6;
        u_xlat6 = vec4<f32>(x_586.x, x_586.y, x_586.z, x_587.w);
        let x_589 : vec4<f32> = u_xlat7;
        let x_591 : vec4<f32> = u_xlat11;
        let x_593 : vec3<f32> = (vec3<f32>(x_589.x, x_589.z, x_589.w) / vec3<f32>(x_591.z, x_591.w, x_591.y));
        let x_594 : vec4<f32> = u_xlat7;
        u_xlat7 = vec4<f32>(x_593.x, x_593.y, x_593.z, x_594.w);
        let x_596 : vec4<f32> = u_xlat7;
        let x_602 : vec3<f32> = (vec3<f32>(x_596.x, x_596.y, x_596.z) + vec3<f32>(-2.5f, -0.5f, 1.5f));
        let x_603 : vec4<f32> = u_xlat7;
        u_xlat7 = vec4<f32>(x_602.x, x_602.y, x_602.z, x_603.w);
        let x_605 : vec4<f32> = u_xlat10;
        let x_607 : vec4<f32> = u_xlat6;
        let x_609 : vec3<f32> = (vec3<f32>(x_605.z, x_605.y, x_605.w) / vec3<f32>(x_607.x, x_607.y, x_607.z));
        let x_610 : vec4<f32> = u_xlat8;
        u_xlat8 = vec4<f32>(x_609.x, x_609.y, x_609.z, x_610.w);
        let x_612 : vec4<f32> = u_xlat8;
        let x_614 : vec3<f32> = (vec3<f32>(x_612.x, x_612.y, x_612.z) + vec3<f32>(-2.5f, -0.5f, 1.5f));
        let x_615 : vec4<f32> = u_xlat8;
        u_xlat8 = vec4<f32>(x_614.x, x_614.y, x_614.z, x_615.w);
        let x_617 : vec4<f32> = u_xlat7;
        let x_620 : vec4<f32> = x_138.x_MainLightShadowmapSize;
        let x_622 : vec3<f32> = (vec3<f32>(x_617.y, x_617.x, x_617.z) * vec3<f32>(x_620.x, x_620.x, x_620.x));
        let x_623 : vec4<f32> = u_xlat7;
        u_xlat7 = vec4<f32>(x_622.x, x_622.y, x_622.z, x_623.w);
        let x_625 : vec4<f32> = u_xlat8;
        let x_628 : vec4<f32> = x_138.x_MainLightShadowmapSize;
        let x_630 : vec3<f32> = (vec3<f32>(x_625.x, x_625.y, x_625.z) * vec3<f32>(x_628.y, x_628.y, x_628.y));
        let x_631 : vec4<f32> = u_xlat8;
        u_xlat8 = vec4<f32>(x_630.x, x_630.y, x_630.z, x_631.w);
        let x_634 : f32 = u_xlat8.x;
        u_xlat7.w = x_634;
        let x_636 : vec4<f32> = u_xlat5;
        let x_639 : vec4<f32> = x_138.x_MainLightShadowmapSize;
        let x_642 : vec4<f32> = u_xlat7;
        u_xlat9 = ((vec4<f32>(x_636.x, x_636.y, x_636.x, x_636.y) * vec4<f32>(x_639.x, x_639.y, x_639.x, x_639.y)) + vec4<f32>(x_642.y, x_642.w, x_642.x, x_642.w));
        let x_645 : vec4<f32> = u_xlat5;
        let x_648 : vec4<f32> = x_138.x_MainLightShadowmapSize;
        let x_651 : vec4<f32> = u_xlat7;
        u_xlat49 = ((vec2<f32>(x_645.x, x_645.y) * vec2<f32>(x_648.x, x_648.y)) + vec2<f32>(x_651.z, x_651.w));
        let x_655 : f32 = u_xlat7.y;
        u_xlat8.w = x_655;
        let x_657 : vec4<f32> = u_xlat8;
        let x_658 : vec2<f32> = vec2<f32>(x_657.y, x_657.z);
        let x_659 : vec4<f32> = u_xlat7;
        u_xlat7 = vec4<f32>(x_659.x, x_658.x, x_659.z, x_658.y);
        let x_661 : vec4<f32> = u_xlat5;
        let x_664 : vec4<f32> = x_138.x_MainLightShadowmapSize;
        let x_667 : vec4<f32> = u_xlat7;
        u_xlat10 = ((vec4<f32>(x_661.x, x_661.y, x_661.x, x_661.y) * vec4<f32>(x_664.x, x_664.y, x_664.x, x_664.y)) + vec4<f32>(x_667.x, x_667.y, x_667.z, x_667.y));
        let x_670 : vec4<f32> = u_xlat5;
        let x_673 : vec4<f32> = x_138.x_MainLightShadowmapSize;
        let x_676 : vec4<f32> = u_xlat8;
        u_xlat8 = ((vec4<f32>(x_670.x, x_670.y, x_670.x, x_670.y) * vec4<f32>(x_673.x, x_673.y, x_673.x, x_673.y)) + vec4<f32>(x_676.w, x_676.y, x_676.w, x_676.z));
        let x_679 : vec4<f32> = u_xlat5;
        let x_682 : vec4<f32> = x_138.x_MainLightShadowmapSize;
        let x_685 : vec4<f32> = u_xlat7;
        u_xlat7 = ((vec4<f32>(x_679.x, x_679.y, x_679.x, x_679.y) * vec4<f32>(x_682.x, x_682.y, x_682.x, x_682.y)) + vec4<f32>(x_685.x, x_685.w, x_685.z, x_685.w));
        let x_689 : vec4<f32> = u_xlat6;
        let x_691 : vec4<f32> = u_xlat11;
        u_xlat12 = (vec4<f32>(x_689.x, x_689.x, x_689.x, x_689.y) * vec4<f32>(x_691.z, x_691.w, x_691.y, x_691.z));
        let x_695 : vec4<f32> = u_xlat6;
        let x_697 : vec4<f32> = u_xlat11;
        u_xlat13 = (vec4<f32>(x_695.y, x_695.y, x_695.z, x_695.z) * x_697);
        let x_701 : f32 = u_xlat6.z;
        let x_703 : f32 = u_xlat11.y;
        u_xlat70 = (x_701 * x_703);
        let x_706 : vec4<f32> = u_xlat9;
        let x_707 : vec2<f32> = vec2<f32>(x_706.x, x_706.y);
        let x_709 : f32 = u_xlat4.z;
        txVec4 = vec3<f32>(x_707.x, x_707.y, x_709);
        let x_716 : vec3<f32> = txVec4;
        let x_718 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_716.xy, x_716.z);
        u_xlat5.x = x_718;
        let x_721 : vec4<f32> = u_xlat9;
        let x_722 : vec2<f32> = vec2<f32>(x_721.z, x_721.w);
        let x_724 : f32 = u_xlat4.z;
        txVec5 = vec3<f32>(x_722.x, x_722.y, x_724);
        let x_732 : vec3<f32> = txVec5;
        let x_734 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_732.xy, x_732.z);
        u_xlat27.x = x_734;
        let x_737 : f32 = u_xlat27.x;
        let x_739 : f32 = u_xlat12.y;
        u_xlat27.x = (x_737 * x_739);
        let x_743 : f32 = u_xlat12.x;
        let x_745 : f32 = u_xlat5.x;
        let x_748 : f32 = u_xlat27.x;
        u_xlat5.x = ((x_743 * x_745) + x_748);
        let x_752 : vec2<f32> = u_xlat49;
        let x_754 : f32 = u_xlat4.z;
        txVec6 = vec3<f32>(x_752.x, x_752.y, x_754);
        let x_761 : vec3<f32> = txVec6;
        let x_763 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_761.xy, x_761.z);
        u_xlat27.x = x_763;
        let x_766 : f32 = u_xlat12.z;
        let x_768 : f32 = u_xlat27.x;
        let x_771 : f32 = u_xlat5.x;
        u_xlat5.x = ((x_766 * x_768) + x_771);
        let x_775 : vec4<f32> = u_xlat8;
        let x_776 : vec2<f32> = vec2<f32>(x_775.x, x_775.y);
        let x_778 : f32 = u_xlat4.z;
        txVec7 = vec3<f32>(x_776.x, x_776.y, x_778);
        let x_785 : vec3<f32> = txVec7;
        let x_787 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_785.xy, x_785.z);
        u_xlat27.x = x_787;
        let x_790 : f32 = u_xlat12.w;
        let x_792 : f32 = u_xlat27.x;
        let x_795 : f32 = u_xlat5.x;
        u_xlat5.x = ((x_790 * x_792) + x_795);
        let x_799 : vec4<f32> = u_xlat10;
        let x_800 : vec2<f32> = vec2<f32>(x_799.x, x_799.y);
        let x_802 : f32 = u_xlat4.z;
        txVec8 = vec3<f32>(x_800.x, x_800.y, x_802);
        let x_809 : vec3<f32> = txVec8;
        let x_811 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_809.xy, x_809.z);
        u_xlat27.x = x_811;
        let x_814 : f32 = u_xlat13.x;
        let x_816 : f32 = u_xlat27.x;
        let x_819 : f32 = u_xlat5.x;
        u_xlat5.x = ((x_814 * x_816) + x_819);
        let x_823 : vec4<f32> = u_xlat10;
        let x_824 : vec2<f32> = vec2<f32>(x_823.z, x_823.w);
        let x_826 : f32 = u_xlat4.z;
        txVec9 = vec3<f32>(x_824.x, x_824.y, x_826);
        let x_833 : vec3<f32> = txVec9;
        let x_835 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_833.xy, x_833.z);
        u_xlat27.x = x_835;
        let x_838 : f32 = u_xlat13.y;
        let x_840 : f32 = u_xlat27.x;
        let x_843 : f32 = u_xlat5.x;
        u_xlat5.x = ((x_838 * x_840) + x_843);
        let x_847 : vec4<f32> = u_xlat8;
        let x_848 : vec2<f32> = vec2<f32>(x_847.z, x_847.w);
        let x_850 : f32 = u_xlat4.z;
        txVec10 = vec3<f32>(x_848.x, x_848.y, x_850);
        let x_857 : vec3<f32> = txVec10;
        let x_859 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_857.xy, x_857.z);
        u_xlat27.x = x_859;
        let x_862 : f32 = u_xlat13.z;
        let x_864 : f32 = u_xlat27.x;
        let x_867 : f32 = u_xlat5.x;
        u_xlat5.x = ((x_862 * x_864) + x_867);
        let x_871 : vec4<f32> = u_xlat7;
        let x_872 : vec2<f32> = vec2<f32>(x_871.x, x_871.y);
        let x_874 : f32 = u_xlat4.z;
        txVec11 = vec3<f32>(x_872.x, x_872.y, x_874);
        let x_881 : vec3<f32> = txVec11;
        let x_883 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_881.xy, x_881.z);
        u_xlat27.x = x_883;
        let x_886 : f32 = u_xlat13.w;
        let x_888 : f32 = u_xlat27.x;
        let x_891 : f32 = u_xlat5.x;
        u_xlat5.x = ((x_886 * x_888) + x_891);
        let x_895 : vec4<f32> = u_xlat7;
        let x_896 : vec2<f32> = vec2<f32>(x_895.z, x_895.w);
        let x_898 : f32 = u_xlat4.z;
        txVec12 = vec3<f32>(x_896.x, x_896.y, x_898);
        let x_905 : vec3<f32> = txVec12;
        let x_907 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_905.xy, x_905.z);
        u_xlat27.x = x_907;
        let x_909 : f32 = u_xlat70;
        let x_911 : f32 = u_xlat27.x;
        let x_914 : f32 = u_xlat5.x;
        u_xlat68 = ((x_909 * x_911) + x_914);
      } else {
        let x_917 : vec4<f32> = u_xlat4;
        let x_920 : vec4<f32> = x_138.x_MainLightShadowmapSize;
        let x_923 : vec2<f32> = ((vec2<f32>(x_917.x, x_917.y) * vec2<f32>(x_920.z, x_920.w)) + vec2<f32>(0.5f, 0.5f));
        let x_924 : vec4<f32> = u_xlat5;
        u_xlat5 = vec4<f32>(x_923.x, x_923.y, x_924.z, x_924.w);
        let x_926 : vec4<f32> = u_xlat5;
        let x_928 : vec2<f32> = floor(vec2<f32>(x_926.x, x_926.y));
        let x_929 : vec4<f32> = u_xlat5;
        u_xlat5 = vec4<f32>(x_928.x, x_928.y, x_929.z, x_929.w);
        let x_931 : vec4<f32> = u_xlat4;
        let x_934 : vec4<f32> = x_138.x_MainLightShadowmapSize;
        let x_937 : vec4<f32> = u_xlat5;
        u_xlat49 = ((vec2<f32>(x_931.x, x_931.y) * vec2<f32>(x_934.z, x_934.w)) + -(vec2<f32>(x_937.x, x_937.y)));
        let x_941 : vec2<f32> = u_xlat49;
        u_xlat6 = (vec4<f32>(x_941.x, x_941.x, x_941.y, x_941.y) + vec4<f32>(0.5f, 1.0f, 0.5f, 1.0f));
        let x_944 : vec4<f32> = u_xlat6;
        let x_946 : vec4<f32> = u_xlat6;
        u_xlat7 = (vec4<f32>(x_944.x, x_944.x, x_944.z, x_944.z) * vec4<f32>(x_946.x, x_946.x, x_946.z, x_946.z));
        let x_949 : vec4<f32> = u_xlat7;
        let x_953 : vec2<f32> = (vec2<f32>(x_949.y, x_949.w) * vec2<f32>(0.040816002f, 0.040816002f));
        let x_954 : vec4<f32> = u_xlat8;
        u_xlat8 = vec4<f32>(x_954.x, x_953.x, x_954.z, x_953.y);
        let x_956 : vec4<f32> = u_xlat7;
        let x_959 : vec2<f32> = u_xlat49;
        let x_961 : vec2<f32> = ((vec2<f32>(x_956.x, x_956.z) * vec2<f32>(0.5f, 0.5f)) + -(x_959));
        let x_962 : vec4<f32> = u_xlat6;
        u_xlat6 = vec4<f32>(x_961.x, x_962.y, x_961.y, x_962.w);
        let x_964 : vec2<f32> = u_xlat49;
        let x_966 : vec2<f32> = (-(x_964) + vec2<f32>(1.0f, 1.0f));
        let x_967 : vec4<f32> = u_xlat7;
        u_xlat7 = vec4<f32>(x_966.x, x_966.y, x_967.z, x_967.w);
        let x_969 : vec2<f32> = u_xlat49;
        u_xlat51 = min(x_969, vec2<f32>(0.0f, 0.0f));
        let x_971 : vec2<f32> = u_xlat51;
        let x_973 : vec2<f32> = u_xlat51;
        let x_975 : vec4<f32> = u_xlat7;
        let x_977 : vec2<f32> = ((-(x_971) * x_973) + vec2<f32>(x_975.x, x_975.y));
        let x_978 : vec4<f32> = u_xlat7;
        u_xlat7 = vec4<f32>(x_977.x, x_977.y, x_978.z, x_978.w);
        let x_980 : vec2<f32> = u_xlat49;
        u_xlat51 = max(x_980, vec2<f32>(0.0f, 0.0f));
        let x_983 : vec2<f32> = u_xlat51;
        let x_985 : vec2<f32> = u_xlat51;
        let x_987 : vec4<f32> = u_xlat6;
        let x_989 : vec2<f32> = ((-(x_983) * x_985) + vec2<f32>(x_987.y, x_987.w));
        let x_990 : vec3<f32> = u_xlat28;
        u_xlat28 = vec3<f32>(x_989.x, x_990.y, x_989.y);
        let x_992 : vec4<f32> = u_xlat7;
        let x_995 : vec2<f32> = (vec2<f32>(x_992.x, x_992.y) + vec2<f32>(2.0f, 2.0f));
        let x_996 : vec4<f32> = u_xlat7;
        u_xlat7 = vec4<f32>(x_995.x, x_995.y, x_996.z, x_996.w);
        let x_998 : vec3<f32> = u_xlat28;
        let x_1000 : vec2<f32> = (vec2<f32>(x_998.x, x_998.z) + vec2<f32>(2.0f, 2.0f));
        let x_1001 : vec4<f32> = u_xlat6;
        u_xlat6 = vec4<f32>(x_1001.x, x_1000.x, x_1001.z, x_1000.y);
        let x_1004 : f32 = u_xlat6.y;
        u_xlat9.z = (x_1004 * 0.081632003f);
        let x_1008 : vec4<f32> = u_xlat6;
        let x_1011 : vec3<f32> = (vec3<f32>(x_1008.z, x_1008.x, x_1008.w) * vec3<f32>(0.081632003f, 0.081632003f, 0.081632003f));
        let x_1012 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_1011.x, x_1011.y, x_1011.z, x_1012.w);
        let x_1014 : vec4<f32> = u_xlat7;
        let x_1017 : vec2<f32> = (vec2<f32>(x_1014.x, x_1014.y) * vec2<f32>(0.081632003f, 0.081632003f));
        let x_1018 : vec4<f32> = u_xlat6;
        u_xlat6 = vec4<f32>(x_1017.x, x_1017.y, x_1018.z, x_1018.w);
        let x_1021 : f32 = u_xlat10.y;
        u_xlat9.x = x_1021;
        let x_1023 : vec2<f32> = u_xlat49;
        let x_1030 : vec2<f32> = ((vec2<f32>(x_1023.x, x_1023.x) * vec2<f32>(-0.081632003f, 0.081632003f)) + vec2<f32>(0.163264006f, 0.081632003f));
        let x_1031 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_1031.x, x_1030.x, x_1031.z, x_1030.y);
        let x_1033 : vec2<f32> = u_xlat49;
        let x_1037 : vec2<f32> = ((vec2<f32>(x_1033.x, x_1033.x) * vec2<f32>(-0.081632003f, 0.081632003f)) + vec2<f32>(0.081632003f, 0.163264006f));
        let x_1038 : vec4<f32> = u_xlat7;
        u_xlat7 = vec4<f32>(x_1037.x, x_1038.y, x_1037.y, x_1038.w);
        let x_1041 : f32 = u_xlat6.x;
        u_xlat7.y = x_1041;
        let x_1044 : f32 = u_xlat8.y;
        u_xlat7.w = x_1044;
        let x_1046 : vec4<f32> = u_xlat7;
        let x_1047 : vec4<f32> = u_xlat9;
        u_xlat9 = (x_1046 + x_1047);
        let x_1049 : vec2<f32> = u_xlat49;
        let x_1052 : vec2<f32> = ((vec2<f32>(x_1049.y, x_1049.y) * vec2<f32>(-0.081632003f, 0.081632003f)) + vec2<f32>(0.163264006f, 0.081632003f));
        let x_1053 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_1053.x, x_1052.x, x_1053.z, x_1052.y);
        let x_1055 : vec2<f32> = u_xlat49;
        let x_1058 : vec2<f32> = ((vec2<f32>(x_1055.y, x_1055.y) * vec2<f32>(-0.081632003f, 0.081632003f)) + vec2<f32>(0.081632003f, 0.163264006f));
        let x_1059 : vec4<f32> = u_xlat8;
        u_xlat8 = vec4<f32>(x_1058.x, x_1059.y, x_1058.y, x_1059.w);
        let x_1062 : f32 = u_xlat6.y;
        u_xlat8.y = x_1062;
        let x_1064 : vec4<f32> = u_xlat8;
        let x_1065 : vec4<f32> = u_xlat10;
        u_xlat6 = (x_1064 + x_1065);
        let x_1067 : vec4<f32> = u_xlat7;
        let x_1068 : vec4<f32> = u_xlat9;
        u_xlat7 = (x_1067 / x_1068);
        let x_1070 : vec4<f32> = u_xlat7;
        u_xlat7 = (x_1070 + vec4<f32>(-3.5f, -1.5f, 0.5f, 2.5f));
        let x_1076 : vec4<f32> = u_xlat8;
        let x_1077 : vec4<f32> = u_xlat6;
        u_xlat8 = (x_1076 / x_1077);
        let x_1079 : vec4<f32> = u_xlat8;
        u_xlat8 = (x_1079 + vec4<f32>(-3.5f, -1.5f, 0.5f, 2.5f));
        let x_1081 : vec4<f32> = u_xlat7;
        let x_1084 : vec4<f32> = x_138.x_MainLightShadowmapSize;
        u_xlat7 = (vec4<f32>(x_1081.w, x_1081.x, x_1081.y, x_1081.z) * vec4<f32>(x_1084.x, x_1084.x, x_1084.x, x_1084.x));
        let x_1087 : vec4<f32> = u_xlat8;
        let x_1090 : vec4<f32> = x_138.x_MainLightShadowmapSize;
        u_xlat8 = (vec4<f32>(x_1087.x, x_1087.w, x_1087.y, x_1087.z) * vec4<f32>(x_1090.y, x_1090.y, x_1090.y, x_1090.y));
        let x_1093 : vec4<f32> = u_xlat7;
        let x_1094 : vec3<f32> = vec3<f32>(x_1093.y, x_1093.z, x_1093.w);
        let x_1095 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_1094.x, x_1095.y, x_1094.y, x_1094.z);
        let x_1098 : f32 = u_xlat8.x;
        u_xlat10.y = x_1098;
        let x_1100 : vec4<f32> = u_xlat5;
        let x_1103 : vec4<f32> = x_138.x_MainLightShadowmapSize;
        let x_1106 : vec4<f32> = u_xlat10;
        u_xlat11 = ((vec4<f32>(x_1100.x, x_1100.y, x_1100.x, x_1100.y) * vec4<f32>(x_1103.x, x_1103.y, x_1103.x, x_1103.y)) + vec4<f32>(x_1106.x, x_1106.y, x_1106.z, x_1106.y));
        let x_1109 : vec4<f32> = u_xlat5;
        let x_1112 : vec4<f32> = x_138.x_MainLightShadowmapSize;
        let x_1115 : vec4<f32> = u_xlat10;
        u_xlat49 = ((vec2<f32>(x_1109.x, x_1109.y) * vec2<f32>(x_1112.x, x_1112.y)) + vec2<f32>(x_1115.w, x_1115.y));
        let x_1119 : f32 = u_xlat10.y;
        u_xlat7.y = x_1119;
        let x_1122 : f32 = u_xlat8.z;
        u_xlat10.y = x_1122;
        let x_1124 : vec4<f32> = u_xlat5;
        let x_1127 : vec4<f32> = x_138.x_MainLightShadowmapSize;
        let x_1130 : vec4<f32> = u_xlat10;
        u_xlat12 = ((vec4<f32>(x_1124.x, x_1124.y, x_1124.x, x_1124.y) * vec4<f32>(x_1127.x, x_1127.y, x_1127.x, x_1127.y)) + vec4<f32>(x_1130.x, x_1130.y, x_1130.z, x_1130.y));
        let x_1133 : vec4<f32> = u_xlat5;
        let x_1136 : vec4<f32> = x_138.x_MainLightShadowmapSize;
        let x_1139 : vec4<f32> = u_xlat10;
        let x_1141 : vec2<f32> = ((vec2<f32>(x_1133.x, x_1133.y) * vec2<f32>(x_1136.x, x_1136.y)) + vec2<f32>(x_1139.w, x_1139.y));
        let x_1142 : vec4<f32> = u_xlat13;
        u_xlat13 = vec4<f32>(x_1141.x, x_1141.y, x_1142.z, x_1142.w);
        let x_1145 : f32 = u_xlat10.y;
        u_xlat7.z = x_1145;
        let x_1148 : vec4<f32> = u_xlat5;
        let x_1151 : vec4<f32> = x_138.x_MainLightShadowmapSize;
        let x_1154 : vec4<f32> = u_xlat7;
        u_xlat14 = ((vec4<f32>(x_1148.x, x_1148.y, x_1148.x, x_1148.y) * vec4<f32>(x_1151.x, x_1151.y, x_1151.x, x_1151.y)) + vec4<f32>(x_1154.x, x_1154.y, x_1154.x, x_1154.z));
        let x_1158 : f32 = u_xlat8.w;
        u_xlat10.y = x_1158;
        let x_1161 : vec4<f32> = u_xlat5;
        let x_1164 : vec4<f32> = x_138.x_MainLightShadowmapSize;
        let x_1167 : vec4<f32> = u_xlat10;
        u_xlat15 = ((vec4<f32>(x_1161.x, x_1161.y, x_1161.x, x_1161.y) * vec4<f32>(x_1164.x, x_1164.y, x_1164.x, x_1164.y)) + vec4<f32>(x_1167.x, x_1167.y, x_1167.z, x_1167.y));
        let x_1171 : vec4<f32> = u_xlat5;
        let x_1174 : vec4<f32> = x_138.x_MainLightShadowmapSize;
        let x_1177 : vec4<f32> = u_xlat10;
        u_xlat29 = ((vec2<f32>(x_1171.x, x_1171.y) * vec2<f32>(x_1174.x, x_1174.y)) + vec2<f32>(x_1177.w, x_1177.y));
        let x_1181 : f32 = u_xlat10.y;
        u_xlat7.w = x_1181;
        let x_1184 : vec4<f32> = u_xlat5;
        let x_1187 : vec4<f32> = x_138.x_MainLightShadowmapSize;
        let x_1190 : vec4<f32> = u_xlat7;
        u_xlat57 = ((vec2<f32>(x_1184.x, x_1184.y) * vec2<f32>(x_1187.x, x_1187.y)) + vec2<f32>(x_1190.x, x_1190.w));
        let x_1193 : vec4<f32> = u_xlat10;
        let x_1194 : vec3<f32> = vec3<f32>(x_1193.x, x_1193.z, x_1193.w);
        let x_1195 : vec4<f32> = u_xlat8;
        u_xlat8 = vec4<f32>(x_1194.x, x_1195.y, x_1194.y, x_1194.z);
        let x_1197 : vec4<f32> = u_xlat5;
        let x_1200 : vec4<f32> = x_138.x_MainLightShadowmapSize;
        let x_1203 : vec4<f32> = u_xlat8;
        u_xlat10 = ((vec4<f32>(x_1197.x, x_1197.y, x_1197.x, x_1197.y) * vec4<f32>(x_1200.x, x_1200.y, x_1200.x, x_1200.y)) + vec4<f32>(x_1203.x, x_1203.y, x_1203.z, x_1203.y));
        let x_1207 : vec4<f32> = u_xlat5;
        let x_1210 : vec4<f32> = x_138.x_MainLightShadowmapSize;
        let x_1213 : vec4<f32> = u_xlat8;
        u_xlat52 = ((vec2<f32>(x_1207.x, x_1207.y) * vec2<f32>(x_1210.x, x_1210.y)) + vec2<f32>(x_1213.w, x_1213.y));
        let x_1217 : f32 = u_xlat7.x;
        u_xlat8.x = x_1217;
        let x_1219 : vec4<f32> = u_xlat5;
        let x_1222 : vec4<f32> = x_138.x_MainLightShadowmapSize;
        let x_1225 : vec4<f32> = u_xlat8;
        let x_1227 : vec2<f32> = ((vec2<f32>(x_1219.x, x_1219.y) * vec2<f32>(x_1222.x, x_1222.y)) + vec2<f32>(x_1225.x, x_1225.y));
        let x_1228 : vec4<f32> = u_xlat5;
        u_xlat5 = vec4<f32>(x_1227.x, x_1227.y, x_1228.z, x_1228.w);
        let x_1231 : vec4<f32> = u_xlat6;
        let x_1233 : vec4<f32> = u_xlat9;
        u_xlat16 = (vec4<f32>(x_1231.x, x_1231.x, x_1231.x, x_1231.x) * x_1233);
        let x_1236 : vec4<f32> = u_xlat6;
        let x_1238 : vec4<f32> = u_xlat9;
        u_xlat17 = (vec4<f32>(x_1236.y, x_1236.y, x_1236.y, x_1236.y) * x_1238);
        let x_1241 : vec4<f32> = u_xlat6;
        let x_1243 : vec4<f32> = u_xlat9;
        u_xlat18 = (vec4<f32>(x_1241.z, x_1241.z, x_1241.z, x_1241.z) * x_1243);
        let x_1245 : vec4<f32> = u_xlat6;
        let x_1247 : vec4<f32> = u_xlat9;
        u_xlat6 = (vec4<f32>(x_1245.w, x_1245.w, x_1245.w, x_1245.w) * x_1247);
        let x_1250 : vec4<f32> = u_xlat11;
        let x_1251 : vec2<f32> = vec2<f32>(x_1250.x, x_1250.y);
        let x_1253 : f32 = u_xlat4.z;
        txVec13 = vec3<f32>(x_1251.x, x_1251.y, x_1253);
        let x_1260 : vec3<f32> = txVec13;
        let x_1262 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1260.xy, x_1260.z);
        u_xlat70 = x_1262;
        let x_1264 : vec4<f32> = u_xlat11;
        let x_1265 : vec2<f32> = vec2<f32>(x_1264.z, x_1264.w);
        let x_1267 : f32 = u_xlat4.z;
        txVec14 = vec3<f32>(x_1265.x, x_1265.y, x_1267);
        let x_1274 : vec3<f32> = txVec14;
        let x_1276 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1274.xy, x_1274.z);
        u_xlat7.x = x_1276;
        let x_1279 : f32 = u_xlat7.x;
        let x_1281 : f32 = u_xlat16.y;
        u_xlat7.x = (x_1279 * x_1281);
        let x_1285 : f32 = u_xlat16.x;
        let x_1286 : f32 = u_xlat70;
        let x_1289 : f32 = u_xlat7.x;
        u_xlat70 = ((x_1285 * x_1286) + x_1289);
        let x_1292 : vec2<f32> = u_xlat49;
        let x_1294 : f32 = u_xlat4.z;
        txVec15 = vec3<f32>(x_1292.x, x_1292.y, x_1294);
        let x_1301 : vec3<f32> = txVec15;
        let x_1303 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1301.xy, x_1301.z);
        u_xlat49.x = x_1303;
        let x_1306 : f32 = u_xlat16.z;
        let x_1308 : f32 = u_xlat49.x;
        let x_1310 : f32 = u_xlat70;
        u_xlat70 = ((x_1306 * x_1308) + x_1310);
        let x_1313 : vec4<f32> = u_xlat14;
        let x_1314 : vec2<f32> = vec2<f32>(x_1313.x, x_1313.y);
        let x_1316 : f32 = u_xlat4.z;
        txVec16 = vec3<f32>(x_1314.x, x_1314.y, x_1316);
        let x_1323 : vec3<f32> = txVec16;
        let x_1325 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1323.xy, x_1323.z);
        u_xlat49.x = x_1325;
        let x_1328 : f32 = u_xlat16.w;
        let x_1330 : f32 = u_xlat49.x;
        let x_1332 : f32 = u_xlat70;
        u_xlat70 = ((x_1328 * x_1330) + x_1332);
        let x_1335 : vec4<f32> = u_xlat12;
        let x_1336 : vec2<f32> = vec2<f32>(x_1335.x, x_1335.y);
        let x_1338 : f32 = u_xlat4.z;
        txVec17 = vec3<f32>(x_1336.x, x_1336.y, x_1338);
        let x_1345 : vec3<f32> = txVec17;
        let x_1347 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1345.xy, x_1345.z);
        u_xlat49.x = x_1347;
        let x_1350 : f32 = u_xlat17.x;
        let x_1352 : f32 = u_xlat49.x;
        let x_1354 : f32 = u_xlat70;
        u_xlat70 = ((x_1350 * x_1352) + x_1354);
        let x_1357 : vec4<f32> = u_xlat12;
        let x_1358 : vec2<f32> = vec2<f32>(x_1357.z, x_1357.w);
        let x_1360 : f32 = u_xlat4.z;
        txVec18 = vec3<f32>(x_1358.x, x_1358.y, x_1360);
        let x_1367 : vec3<f32> = txVec18;
        let x_1369 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1367.xy, x_1367.z);
        u_xlat49.x = x_1369;
        let x_1372 : f32 = u_xlat17.y;
        let x_1374 : f32 = u_xlat49.x;
        let x_1376 : f32 = u_xlat70;
        u_xlat70 = ((x_1372 * x_1374) + x_1376);
        let x_1379 : vec4<f32> = u_xlat13;
        let x_1380 : vec2<f32> = vec2<f32>(x_1379.x, x_1379.y);
        let x_1382 : f32 = u_xlat4.z;
        txVec19 = vec3<f32>(x_1380.x, x_1380.y, x_1382);
        let x_1389 : vec3<f32> = txVec19;
        let x_1391 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1389.xy, x_1389.z);
        u_xlat49.x = x_1391;
        let x_1394 : f32 = u_xlat17.z;
        let x_1396 : f32 = u_xlat49.x;
        let x_1398 : f32 = u_xlat70;
        u_xlat70 = ((x_1394 * x_1396) + x_1398);
        let x_1401 : vec4<f32> = u_xlat14;
        let x_1402 : vec2<f32> = vec2<f32>(x_1401.z, x_1401.w);
        let x_1404 : f32 = u_xlat4.z;
        txVec20 = vec3<f32>(x_1402.x, x_1402.y, x_1404);
        let x_1411 : vec3<f32> = txVec20;
        let x_1413 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1411.xy, x_1411.z);
        u_xlat49.x = x_1413;
        let x_1416 : f32 = u_xlat17.w;
        let x_1418 : f32 = u_xlat49.x;
        let x_1420 : f32 = u_xlat70;
        u_xlat70 = ((x_1416 * x_1418) + x_1420);
        let x_1423 : vec4<f32> = u_xlat15;
        let x_1424 : vec2<f32> = vec2<f32>(x_1423.x, x_1423.y);
        let x_1426 : f32 = u_xlat4.z;
        txVec21 = vec3<f32>(x_1424.x, x_1424.y, x_1426);
        let x_1433 : vec3<f32> = txVec21;
        let x_1435 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1433.xy, x_1433.z);
        u_xlat49.x = x_1435;
        let x_1438 : f32 = u_xlat18.x;
        let x_1440 : f32 = u_xlat49.x;
        let x_1442 : f32 = u_xlat70;
        u_xlat70 = ((x_1438 * x_1440) + x_1442);
        let x_1445 : vec4<f32> = u_xlat15;
        let x_1446 : vec2<f32> = vec2<f32>(x_1445.z, x_1445.w);
        let x_1448 : f32 = u_xlat4.z;
        txVec22 = vec3<f32>(x_1446.x, x_1446.y, x_1448);
        let x_1455 : vec3<f32> = txVec22;
        let x_1457 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1455.xy, x_1455.z);
        u_xlat49.x = x_1457;
        let x_1460 : f32 = u_xlat18.y;
        let x_1462 : f32 = u_xlat49.x;
        let x_1464 : f32 = u_xlat70;
        u_xlat70 = ((x_1460 * x_1462) + x_1464);
        let x_1467 : vec2<f32> = u_xlat29;
        let x_1469 : f32 = u_xlat4.z;
        txVec23 = vec3<f32>(x_1467.x, x_1467.y, x_1469);
        let x_1476 : vec3<f32> = txVec23;
        let x_1478 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1476.xy, x_1476.z);
        u_xlat49.x = x_1478;
        let x_1481 : f32 = u_xlat18.z;
        let x_1483 : f32 = u_xlat49.x;
        let x_1485 : f32 = u_xlat70;
        u_xlat70 = ((x_1481 * x_1483) + x_1485);
        let x_1488 : vec2<f32> = u_xlat57;
        let x_1490 : f32 = u_xlat4.z;
        txVec24 = vec3<f32>(x_1488.x, x_1488.y, x_1490);
        let x_1497 : vec3<f32> = txVec24;
        let x_1499 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1497.xy, x_1497.z);
        u_xlat49.x = x_1499;
        let x_1502 : f32 = u_xlat18.w;
        let x_1504 : f32 = u_xlat49.x;
        let x_1506 : f32 = u_xlat70;
        u_xlat70 = ((x_1502 * x_1504) + x_1506);
        let x_1509 : vec4<f32> = u_xlat10;
        let x_1510 : vec2<f32> = vec2<f32>(x_1509.x, x_1509.y);
        let x_1512 : f32 = u_xlat4.z;
        txVec25 = vec3<f32>(x_1510.x, x_1510.y, x_1512);
        let x_1519 : vec3<f32> = txVec25;
        let x_1521 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1519.xy, x_1519.z);
        u_xlat49.x = x_1521;
        let x_1524 : f32 = u_xlat6.x;
        let x_1526 : f32 = u_xlat49.x;
        let x_1528 : f32 = u_xlat70;
        u_xlat70 = ((x_1524 * x_1526) + x_1528);
        let x_1531 : vec4<f32> = u_xlat10;
        let x_1532 : vec2<f32> = vec2<f32>(x_1531.z, x_1531.w);
        let x_1534 : f32 = u_xlat4.z;
        txVec26 = vec3<f32>(x_1532.x, x_1532.y, x_1534);
        let x_1541 : vec3<f32> = txVec26;
        let x_1543 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1541.xy, x_1541.z);
        u_xlat49.x = x_1543;
        let x_1546 : f32 = u_xlat6.y;
        let x_1548 : f32 = u_xlat49.x;
        let x_1550 : f32 = u_xlat70;
        u_xlat70 = ((x_1546 * x_1548) + x_1550);
        let x_1553 : vec2<f32> = u_xlat52;
        let x_1555 : f32 = u_xlat4.z;
        txVec27 = vec3<f32>(x_1553.x, x_1553.y, x_1555);
        let x_1562 : vec3<f32> = txVec27;
        let x_1564 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1562.xy, x_1562.z);
        u_xlat49.x = x_1564;
        let x_1567 : f32 = u_xlat6.z;
        let x_1569 : f32 = u_xlat49.x;
        let x_1571 : f32 = u_xlat70;
        u_xlat70 = ((x_1567 * x_1569) + x_1571);
        let x_1574 : vec4<f32> = u_xlat5;
        let x_1575 : vec2<f32> = vec2<f32>(x_1574.x, x_1574.y);
        let x_1577 : f32 = u_xlat4.z;
        txVec28 = vec3<f32>(x_1575.x, x_1575.y, x_1577);
        let x_1584 : vec3<f32> = txVec28;
        let x_1586 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1584.xy, x_1584.z);
        u_xlat5.x = x_1586;
        let x_1589 : f32 = u_xlat6.w;
        let x_1591 : f32 = u_xlat5.x;
        let x_1593 : f32 = u_xlat70;
        u_xlat68 = ((x_1589 * x_1591) + x_1593);
      }
    }
  } else {
    let x_1597 : vec4<f32> = u_xlat4;
    let x_1598 : vec2<f32> = vec2<f32>(x_1597.x, x_1597.y);
    let x_1600 : f32 = u_xlat4.z;
    txVec29 = vec3<f32>(x_1598.x, x_1598.y, x_1600);
    let x_1607 : vec3<f32> = txVec29;
    let x_1609 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1607.xy, x_1607.z);
    u_xlat68 = x_1609;
  }
  let x_1611 : f32 = x_138.x_MainLightShadowParams.x;
  u_xlat70 = (-(x_1611) + 1.0f);
  let x_1614 : f32 = u_xlat68;
  let x_1616 : f32 = x_138.x_MainLightShadowParams.x;
  let x_1618 : f32 = u_xlat70;
  u_xlat68 = ((x_1614 * x_1616) + x_1618);
  let x_1622 : f32 = u_xlat4.z;
  u_xlatb5 = (0.0f >= x_1622);
  let x_1626 : f32 = u_xlat4.z;
  u_xlatb27 = (x_1626 >= 1.0f);
  let x_1628 : bool = u_xlatb27;
  let x_1629 : bool = u_xlatb5;
  u_xlatb5 = (x_1628 | x_1629);
  let x_1631 : bool = u_xlatb5;
  let x_1632 : f32 = u_xlat68;
  u_xlat68 = select(x_1632, 1.0f, x_1631);
  let x_1634 : vec3<f32> = u_xlat0;
  let x_1636 : vec4<f32> = x_66.x_MainLightPosition;
  u_xlat0.x = dot(x_1634, -(vec3<f32>(x_1636.x, x_1636.y, x_1636.z)));
  let x_1642 : f32 = u_xlat0.x;
  u_xlat0.x = clamp(x_1642, 0.0f, 1.0f);
  let x_1645 : f32 = u_xlat68;
  let x_1648 : vec4<f32> = x_66.x_MainLightColor;
  u_xlat27 = (vec3<f32>(x_1645, x_1645, x_1645) * vec3<f32>(x_1648.x, x_1648.y, x_1648.z));
  let x_1651 : vec3<f32> = u_xlat0;
  let x_1653 : vec3<f32> = u_xlat27;
  u_xlat0 = (vec3<f32>(x_1651.x, x_1651.x, x_1651.x) * x_1653);
  let x_1655 : vec3<f32> = u_xlat0;
  let x_1656 : vec4<f32> = u_xlat1;
  u_xlat0 = (x_1655 * vec3<f32>(x_1656.x, x_1656.y, x_1656.z));
  let x_1661 : f32 = u_xlat1.w;
  u_xlatb1 = (x_1661 >= 0.400000006f);
  let x_1664 : bool = u_xlatb1;
  if (x_1664) {
    let x_1669 : f32 = u_xlat1.w;
    x_1665 = x_1669;
  } else {
    x_1665 = 0.0f;
  }
  let x_1671 : f32 = x_1665;
  u_xlat1.x = x_1671;
  let x_1675 : f32 = u_xlat1.w;
  u_xlat23.x = (x_1675 + -0.400000006f);
  let x_1681 : f32 = u_xlat1.w;
  u_xlat45 = dpdxCoarse(x_1681);
  let x_1685 : f32 = u_xlat1.w;
  u_xlat67 = dpdyCoarse(x_1685);
  let x_1687 : f32 = u_xlat67;
  let x_1689 : f32 = u_xlat45;
  u_xlat45 = (abs(x_1687) + abs(x_1689));
  let x_1692 : f32 = u_xlat45;
  u_xlat45 = max(x_1692, 0.0001f);
  let x_1696 : f32 = u_xlat23.x;
  let x_1697 : f32 = u_xlat45;
  u_xlat23.x = (x_1696 / x_1697);
  let x_1701 : f32 = u_xlat23.x;
  u_xlat23.x = (x_1701 + 0.5f);
  let x_1705 : f32 = u_xlat23.x;
  u_xlat23.x = clamp(x_1705, 0.0f, 1.0f);
  let x_1710 : f32 = x_66.x_AlphaToMaskAvailable;
  u_xlatb45 = !((x_1710 == 0.0f));
  let x_1712 : bool = u_xlatb45;
  if (x_1712) {
    let x_1717 : f32 = u_xlat23.x;
    x_1713 = x_1717;
  } else {
    let x_1720 : f32 = u_xlat1.x;
    x_1713 = x_1720;
  }
  let x_1721 : f32 = x_1713;
  u_xlat1.x = x_1721;
  let x_1724 : f32 = u_xlat1.x;
  u_xlat23.x = (x_1724 + -0.0001f);
  let x_1732 : f32 = u_xlat23.x;
  u_xlatb23.x = (x_1732 < 0.0f);
  let x_1736 : bool = u_xlatb23.x;
  if (((select(0i, 1i, x_1736) * -1i) != 0i)) {
    discard;
  }
  let x_1746 : f32 = vs_INTERP2.w;
  u_xlatb23.x = (0.0f < x_1746);
  let x_1754 : f32 = x_1752.unity_WorldTransformParams.w;
  u_xlatb23.z = (x_1754 >= 0.0f);
  let x_1758 : bool = u_xlatb23.x;
  u_xlat23.x = select(-1.0f, 1.0f, x_1758);
  let x_1762 : bool = u_xlatb23.z;
  u_xlat23.z = select(-1.0f, 1.0f, x_1762);
  let x_1766 : f32 = u_xlat23.z;
  let x_1768 : f32 = u_xlat23.x;
  u_xlat23.x = (x_1766 * x_1768);
  let x_1771 : vec3<f32> = vs_INTERP1;
  let x_1773 : vec4<f32> = vs_INTERP2;
  u_xlat27 = (vec3<f32>(x_1771.z, x_1771.x, x_1771.y) * vec3<f32>(x_1773.y, x_1773.z, x_1773.x));
  let x_1776 : vec3<f32> = vs_INTERP1;
  let x_1778 : vec4<f32> = vs_INTERP2;
  let x_1781 : vec3<f32> = u_xlat27;
  u_xlat27 = ((vec3<f32>(x_1776.y, x_1776.z, x_1776.x) * vec3<f32>(x_1778.z, x_1778.x, x_1778.y)) + -(x_1781));
  let x_1784 : vec3<f32> = u_xlat23;
  let x_1786 : vec3<f32> = u_xlat27;
  u_xlat27 = (vec3<f32>(x_1784.x, x_1784.x, x_1784.x) * x_1786);
  let x_1788 : vec3<f32> = u_xlat25;
  let x_1790 : vec3<f32> = u_xlat27;
  u_xlat27 = (vec3<f32>(x_1788.y, x_1788.y, x_1788.y) * x_1790);
  let x_1792 : vec3<f32> = u_xlat25;
  let x_1794 : vec4<f32> = vs_INTERP2;
  let x_1797 : vec3<f32> = u_xlat27;
  u_xlat27 = ((vec3<f32>(x_1792.x, x_1792.x, x_1792.x) * vec3<f32>(x_1794.x, x_1794.y, x_1794.z)) + x_1797);
  let x_1799 : vec3<f32> = u_xlat25;
  let x_1801 : vec3<f32> = vs_INTERP1;
  let x_1803 : vec3<f32> = u_xlat27;
  u_xlat25 = ((vec3<f32>(x_1799.z, x_1799.z, x_1799.z) * x_1801) + x_1803);
  let x_1805 : vec3<f32> = u_xlat25;
  let x_1806 : vec3<f32> = u_xlat25;
  u_xlat23.x = dot(x_1805, x_1806);
  let x_1810 : f32 = u_xlat23.x;
  u_xlat23.x = inverseSqrt(x_1810);
  let x_1813 : vec3<f32> = u_xlat23;
  let x_1815 : vec3<f32> = u_xlat25;
  let x_1816 : vec3<f32> = (vec3<f32>(x_1813.x, x_1813.x, x_1813.x) * x_1815);
  let x_1817 : vec4<f32> = u_xlat6;
  u_xlat6 = vec4<f32>(x_1816.x, x_1816.y, x_1816.z, x_1817.w);
  let x_1821 : f32 = x_66.unity_OrthoParams.w;
  u_xlatb23.x = (x_1821 == 0.0f);
  let x_1824 : vec3<f32> = vs_INTERP0;
  let x_1828 : vec3<f32> = x_66.x_WorldSpaceCameraPos;
  u_xlat25 = (-(x_1824) + x_1828);
  let x_1830 : vec3<f32> = u_xlat25;
  let x_1831 : vec3<f32> = u_xlat25;
  u_xlat67 = dot(x_1830, x_1831);
  let x_1833 : f32 = u_xlat67;
  u_xlat67 = inverseSqrt(x_1833);
  let x_1835 : f32 = u_xlat67;
  let x_1837 : vec3<f32> = u_xlat25;
  u_xlat25 = (vec3<f32>(x_1835, x_1835, x_1835) * x_1837);
  let x_1840 : bool = u_xlatb23.x;
  if (x_1840) {
    let x_1845 : f32 = u_xlat25.x;
    x_1841 = x_1845;
  } else {
    let x_1849 : f32 = x_66.unity_MatrixV[0i].z;
    x_1841 = x_1849;
  }
  let x_1850 : f32 = x_1841;
  u_xlat7.x = x_1850;
  let x_1853 : bool = u_xlatb23.x;
  if (x_1853) {
    let x_1858 : f32 = u_xlat25.y;
    x_1854 = x_1858;
  } else {
    let x_1861 : f32 = x_66.unity_MatrixV[1i].z;
    x_1854 = x_1861;
  }
  let x_1862 : f32 = x_1854;
  u_xlat7.y = x_1862;
  let x_1865 : bool = u_xlatb23.x;
  if (x_1865) {
    let x_1870 : f32 = u_xlat25.z;
    x_1866 = x_1870;
  } else {
    let x_1873 : f32 = x_66.unity_MatrixV[2i].z;
    x_1866 = x_1873;
  }
  let x_1874 : f32 = x_1866;
  u_xlat7.z = x_1874;
  u_xlat6.w = 1.0f;
  let x_1879 : vec4<f32> = x_1752.unity_SHAr;
  let x_1880 : vec4<f32> = u_xlat6;
  u_xlat8.x = dot(x_1879, x_1880);
  let x_1885 : vec4<f32> = x_1752.unity_SHAg;
  let x_1886 : vec4<f32> = u_xlat6;
  u_xlat8.y = dot(x_1885, x_1886);
  let x_1891 : vec4<f32> = x_1752.unity_SHAb;
  let x_1892 : vec4<f32> = u_xlat6;
  u_xlat8.z = dot(x_1891, x_1892);
  let x_1895 : vec4<f32> = u_xlat6;
  let x_1897 : vec4<f32> = u_xlat6;
  u_xlat9 = (vec4<f32>(x_1895.y, x_1895.z, x_1895.z, x_1895.x) * vec4<f32>(x_1897.x, x_1897.y, x_1897.z, x_1897.z));
  let x_1902 : vec4<f32> = x_1752.unity_SHBr;
  let x_1903 : vec4<f32> = u_xlat9;
  u_xlat10.x = dot(x_1902, x_1903);
  let x_1908 : vec4<f32> = x_1752.unity_SHBg;
  let x_1909 : vec4<f32> = u_xlat9;
  u_xlat10.y = dot(x_1908, x_1909);
  let x_1914 : vec4<f32> = x_1752.unity_SHBb;
  let x_1915 : vec4<f32> = u_xlat9;
  u_xlat10.z = dot(x_1914, x_1915);
  let x_1919 : f32 = u_xlat6.y;
  let x_1921 : f32 = u_xlat6.y;
  u_xlat23.x = (x_1919 * x_1921);
  let x_1925 : f32 = u_xlat6.x;
  let x_1927 : f32 = u_xlat6.x;
  let x_1930 : f32 = u_xlat23.x;
  u_xlat23.x = ((x_1925 * x_1927) + -(x_1930));
  let x_1936 : vec4<f32> = x_1752.unity_SHC;
  let x_1938 : vec3<f32> = u_xlat23;
  let x_1941 : vec4<f32> = u_xlat10;
  u_xlat25 = ((vec3<f32>(x_1936.x, x_1936.y, x_1936.z) * vec3<f32>(x_1938.x, x_1938.x, x_1938.x)) + vec3<f32>(x_1941.x, x_1941.y, x_1941.z));
  let x_1944 : vec3<f32> = u_xlat25;
  let x_1945 : vec4<f32> = u_xlat8;
  u_xlat25 = (x_1944 + vec3<f32>(x_1945.x, x_1945.y, x_1945.z));
  let x_1948 : vec3<f32> = u_xlat25;
  u_xlat25 = max(x_1948, vec3<f32>(0.0f, 0.0f, 0.0f));
  let x_1951 : vec4<f32> = x_66.x_ScaledScreenParams;
  let x_1952 : vec2<f32> = vec2<f32>(x_1951.x, x_1951.y);
  let x_1956 : vec2<f32> = (vec2<f32>(1.0f, 1.0f) / vec2<f32>(x_1952.x, x_1952.y));
  let x_1957 : vec3<f32> = u_xlat23;
  u_xlat23 = vec3<f32>(x_1956.x, x_1957.y, x_1956.y);
  let x_1959 : vec3<f32> = u_xlat23;
  let x_1961 : vec4<f32> = hlslcc_FragCoord;
  let x_1963 : vec2<f32> = (vec2<f32>(x_1959.x, x_1959.z) * vec2<f32>(x_1961.x, x_1961.y));
  let x_1964 : vec4<f32> = u_xlat8;
  u_xlat8 = vec4<f32>(x_1963.x, x_1963.y, x_1964.z, x_1964.w);
  let x_1967 : f32 = u_xlat8.y;
  let x_1970 : f32 = x_66.x_ScaleBiasRt.x;
  let x_1973 : f32 = x_66.x_ScaleBiasRt.y;
  u_xlat23.x = ((x_1967 * x_1970) + x_1973);
  let x_1977 : f32 = u_xlat23.x;
  u_xlat8.z = (-(x_1977) + 1.0f);
  let x_1982 : f32 = u_xlat3.x;
  u_xlat3.x = x_1982;
  let x_1985 : f32 = u_xlat3.x;
  u_xlat3.x = clamp(x_1985, 0.0f, 1.0f);
  let x_1989 : f32 = u_xlat1.x;
  u_xlat1.x = min(x_1989, 1.0f);
  let x_1992 : vec3<f32> = u_xlat2;
  u_xlat2 = (x_1992 * vec3<f32>(0.959999979f, 0.959999979f, 0.959999979f));
  let x_1997 : f32 = u_xlat3.x;
  u_xlat23.x = (-(x_1997) + 1.0f);
  let x_2002 : f32 = u_xlat23.x;
  let x_2004 : f32 = u_xlat23.x;
  u_xlat67 = (x_2002 * x_2004);
  let x_2006 : f32 = u_xlat67;
  u_xlat67 = max(x_2006, 0.0078125f);
  let x_2009 : f32 = u_xlat67;
  let x_2010 : f32 = u_xlat67;
  u_xlat68 = (x_2009 * x_2010);
  let x_2013 : f32 = u_xlat3.x;
  u_xlat3.x = (x_2013 + 0.040000021f);
  let x_2018 : f32 = u_xlat3.x;
  u_xlat3.x = min(x_2018, 1.0f);
  let x_2021 : f32 = u_xlat67;
  u_xlat27.x = ((x_2021 * 4.0f) + 2.0f);
  let x_2030 : vec4<f32> = u_xlat8;
  let x_2033 : f32 = x_66.x_GlobalMipBias.x;
  let x_2034 : vec4<f32> = textureSampleBias(x_ScreenSpaceOcclusionTexture, sampler_ScreenSpaceOcclusionTexture, vec2<f32>(x_2030.x, x_2030.z), x_2033);
  u_xlat49.x = x_2034.x;
  let x_2039 : f32 = u_xlat49.x;
  u_xlat71 = (x_2039 + -1.0f);
  let x_2042 : f32 = x_66.x_AmbientOcclusionParam.w;
  let x_2043 : f32 = u_xlat71;
  u_xlat71 = ((x_2042 * x_2043) + 1.0f);
  let x_2047 : f32 = u_xlat49.x;
  let x_2049 : f32 = vs_INTERP4.w;
  u_xlat49.x = min(x_2047, x_2049);
  let x_2052 : bool = u_xlatb66;
  if (x_2052) {
    let x_2056 : f32 = x_138.x_MainLightShadowParams.y;
    u_xlatb66 = (x_2056 == 1.0f);
    let x_2058 : bool = u_xlatb66;
    if (x_2058) {
      let x_2061 : vec4<f32> = u_xlat4;
      let x_2064 : vec4<f32> = x_138.x_MainLightShadowOffset0;
      u_xlat8 = (vec4<f32>(x_2061.x, x_2061.y, x_2061.x, x_2061.y) + x_2064);
      let x_2067 : vec4<f32> = u_xlat8;
      let x_2068 : vec2<f32> = vec2<f32>(x_2067.x, x_2067.y);
      let x_2070 : f32 = u_xlat4.z;
      txVec30 = vec3<f32>(x_2068.x, x_2068.y, x_2070);
      let x_2077 : vec3<f32> = txVec30;
      let x_2079 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2077.xy, x_2077.z);
      u_xlat9.x = x_2079;
      let x_2082 : vec4<f32> = u_xlat8;
      let x_2083 : vec2<f32> = vec2<f32>(x_2082.z, x_2082.w);
      let x_2085 : f32 = u_xlat4.z;
      txVec31 = vec3<f32>(x_2083.x, x_2083.y, x_2085);
      let x_2092 : vec3<f32> = txVec31;
      let x_2094 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2092.xy, x_2092.z);
      u_xlat9.y = x_2094;
      let x_2096 : vec4<f32> = u_xlat4;
      let x_2099 : vec4<f32> = x_138.x_MainLightShadowOffset1;
      u_xlat8 = (vec4<f32>(x_2096.x, x_2096.y, x_2096.x, x_2096.y) + x_2099);
      let x_2102 : vec4<f32> = u_xlat8;
      let x_2103 : vec2<f32> = vec2<f32>(x_2102.x, x_2102.y);
      let x_2105 : f32 = u_xlat4.z;
      txVec32 = vec3<f32>(x_2103.x, x_2103.y, x_2105);
      let x_2112 : vec3<f32> = txVec32;
      let x_2114 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2112.xy, x_2112.z);
      u_xlat9.z = x_2114;
      let x_2117 : vec4<f32> = u_xlat8;
      let x_2118 : vec2<f32> = vec2<f32>(x_2117.z, x_2117.w);
      let x_2120 : f32 = u_xlat4.z;
      txVec33 = vec3<f32>(x_2118.x, x_2118.y, x_2120);
      let x_2127 : vec3<f32> = txVec33;
      let x_2129 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2127.xy, x_2127.z);
      u_xlat9.w = x_2129;
      let x_2131 : vec4<f32> = u_xlat9;
      u_xlat66 = dot(x_2131, vec4<f32>(0.25f, 0.25f, 0.25f, 0.25f));
    } else {
      let x_2136 : f32 = x_138.x_MainLightShadowParams.y;
      u_xlatb72 = (x_2136 == 2.0f);
      let x_2138 : bool = u_xlatb72;
      if (x_2138) {
        let x_2141 : vec4<f32> = u_xlat4;
        let x_2144 : vec4<f32> = x_138.x_MainLightShadowmapSize;
        let x_2147 : vec2<f32> = ((vec2<f32>(x_2141.x, x_2141.y) * vec2<f32>(x_2144.z, x_2144.w)) + vec2<f32>(0.5f, 0.5f));
        let x_2148 : vec4<f32> = u_xlat8;
        u_xlat8 = vec4<f32>(x_2147.x, x_2147.y, x_2148.z, x_2148.w);
        let x_2150 : vec4<f32> = u_xlat8;
        let x_2152 : vec2<f32> = floor(vec2<f32>(x_2150.x, x_2150.y));
        let x_2153 : vec4<f32> = u_xlat8;
        u_xlat8 = vec4<f32>(x_2152.x, x_2152.y, x_2153.z, x_2153.w);
        let x_2155 : vec4<f32> = u_xlat4;
        let x_2158 : vec4<f32> = x_138.x_MainLightShadowmapSize;
        let x_2161 : vec4<f32> = u_xlat8;
        u_xlat52 = ((vec2<f32>(x_2155.x, x_2155.y) * vec2<f32>(x_2158.z, x_2158.w)) + -(vec2<f32>(x_2161.x, x_2161.y)));
        let x_2165 : vec2<f32> = u_xlat52;
        u_xlat9 = (vec4<f32>(x_2165.x, x_2165.x, x_2165.y, x_2165.y) + vec4<f32>(0.5f, 1.0f, 0.5f, 1.0f));
        let x_2168 : vec4<f32> = u_xlat9;
        let x_2170 : vec4<f32> = u_xlat9;
        u_xlat10 = (vec4<f32>(x_2168.x, x_2168.x, x_2168.z, x_2168.z) * vec4<f32>(x_2170.x, x_2170.x, x_2170.z, x_2170.z));
        let x_2173 : vec4<f32> = u_xlat10;
        let x_2175 : vec2<f32> = (vec2<f32>(x_2173.y, x_2173.w) * vec2<f32>(0.079999998f, 0.079999998f));
        let x_2176 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_2175.x, x_2176.y, x_2175.y, x_2176.w);
        let x_2178 : vec4<f32> = u_xlat10;
        let x_2181 : vec2<f32> = u_xlat52;
        let x_2183 : vec2<f32> = ((vec2<f32>(x_2178.x, x_2178.z) * vec2<f32>(0.5f, 0.5f)) + -(x_2181));
        let x_2184 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_2183.x, x_2183.y, x_2184.z, x_2184.w);
        let x_2187 : vec2<f32> = u_xlat52;
        u_xlat54 = (-(x_2187) + vec2<f32>(1.0f, 1.0f));
        let x_2190 : vec2<f32> = u_xlat52;
        let x_2191 : vec2<f32> = min(x_2190, vec2<f32>(0.0f, 0.0f));
        let x_2192 : vec4<f32> = u_xlat11;
        u_xlat11 = vec4<f32>(x_2191.x, x_2191.y, x_2192.z, x_2192.w);
        let x_2194 : vec4<f32> = u_xlat11;
        let x_2197 : vec4<f32> = u_xlat11;
        let x_2200 : vec2<f32> = u_xlat54;
        let x_2201 : vec2<f32> = ((-(vec2<f32>(x_2194.x, x_2194.y)) * vec2<f32>(x_2197.x, x_2197.y)) + x_2200);
        let x_2202 : vec4<f32> = u_xlat11;
        u_xlat11 = vec4<f32>(x_2201.x, x_2201.y, x_2202.z, x_2202.w);
        let x_2204 : vec2<f32> = u_xlat52;
        u_xlat52 = max(x_2204, vec2<f32>(0.0f, 0.0f));
        let x_2206 : vec2<f32> = u_xlat52;
        let x_2208 : vec2<f32> = u_xlat52;
        let x_2210 : vec4<f32> = u_xlat9;
        u_xlat52 = ((-(x_2206) * x_2208) + vec2<f32>(x_2210.y, x_2210.w));
        let x_2213 : vec4<f32> = u_xlat11;
        let x_2215 : vec2<f32> = (vec2<f32>(x_2213.x, x_2213.y) + vec2<f32>(1.0f, 1.0f));
        let x_2216 : vec4<f32> = u_xlat11;
        u_xlat11 = vec4<f32>(x_2215.x, x_2215.y, x_2216.z, x_2216.w);
        let x_2218 : vec2<f32> = u_xlat52;
        u_xlat52 = (x_2218 + vec2<f32>(1.0f, 1.0f));
        let x_2220 : vec4<f32> = u_xlat10;
        let x_2222 : vec2<f32> = (vec2<f32>(x_2220.x, x_2220.y) * vec2<f32>(0.159999996f, 0.159999996f));
        let x_2223 : vec4<f32> = u_xlat12;
        u_xlat12 = vec4<f32>(x_2222.x, x_2222.y, x_2223.z, x_2223.w);
        let x_2225 : vec2<f32> = u_xlat54;
        let x_2226 : vec2<f32> = (x_2225 * vec2<f32>(0.159999996f, 0.159999996f));
        let x_2227 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_2226.x, x_2226.y, x_2227.z, x_2227.w);
        let x_2229 : vec4<f32> = u_xlat11;
        let x_2231 : vec2<f32> = (vec2<f32>(x_2229.x, x_2229.y) * vec2<f32>(0.159999996f, 0.159999996f));
        let x_2232 : vec4<f32> = u_xlat11;
        u_xlat11 = vec4<f32>(x_2231.x, x_2231.y, x_2232.z, x_2232.w);
        let x_2234 : vec2<f32> = u_xlat52;
        let x_2235 : vec2<f32> = (x_2234 * vec2<f32>(0.159999996f, 0.159999996f));
        let x_2236 : vec4<f32> = u_xlat13;
        u_xlat13 = vec4<f32>(x_2235.x, x_2235.y, x_2236.z, x_2236.w);
        let x_2238 : vec4<f32> = u_xlat9;
        u_xlat52 = (vec2<f32>(x_2238.y, x_2238.w) * vec2<f32>(0.159999996f, 0.159999996f));
        let x_2242 : f32 = u_xlat11.x;
        u_xlat12.z = x_2242;
        let x_2245 : f32 = u_xlat52.x;
        u_xlat12.w = x_2245;
        let x_2248 : f32 = u_xlat13.x;
        u_xlat10.z = x_2248;
        let x_2251 : f32 = u_xlat9.x;
        u_xlat10.w = x_2251;
        let x_2253 : vec4<f32> = u_xlat10;
        let x_2255 : vec4<f32> = u_xlat12;
        u_xlat14 = (vec4<f32>(x_2253.z, x_2253.w, x_2253.x, x_2253.z) + vec4<f32>(x_2255.z, x_2255.w, x_2255.x, x_2255.z));
        let x_2259 : f32 = u_xlat12.y;
        u_xlat11.z = x_2259;
        let x_2262 : f32 = u_xlat52.y;
        u_xlat11.w = x_2262;
        let x_2265 : f32 = u_xlat10.y;
        u_xlat13.z = x_2265;
        let x_2268 : f32 = u_xlat9.z;
        u_xlat13.w = x_2268;
        let x_2270 : vec4<f32> = u_xlat11;
        let x_2272 : vec4<f32> = u_xlat13;
        let x_2274 : vec3<f32> = (vec3<f32>(x_2270.z, x_2270.y, x_2270.w) + vec3<f32>(x_2272.z, x_2272.y, x_2272.w));
        let x_2275 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_2274.x, x_2274.y, x_2274.z, x_2275.w);
        let x_2277 : vec4<f32> = u_xlat10;
        let x_2279 : vec4<f32> = u_xlat14;
        let x_2281 : vec3<f32> = (vec3<f32>(x_2277.x, x_2277.z, x_2277.w) / vec3<f32>(x_2279.z, x_2279.w, x_2279.y));
        let x_2282 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_2281.x, x_2281.y, x_2281.z, x_2282.w);
        let x_2284 : vec4<f32> = u_xlat10;
        let x_2286 : vec3<f32> = (vec3<f32>(x_2284.x, x_2284.y, x_2284.z) + vec3<f32>(-2.5f, -0.5f, 1.5f));
        let x_2287 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_2286.x, x_2286.y, x_2286.z, x_2287.w);
        let x_2289 : vec4<f32> = u_xlat13;
        let x_2291 : vec4<f32> = u_xlat9;
        let x_2293 : vec3<f32> = (vec3<f32>(x_2289.z, x_2289.y, x_2289.w) / vec3<f32>(x_2291.x, x_2291.y, x_2291.z));
        let x_2294 : vec4<f32> = u_xlat11;
        u_xlat11 = vec4<f32>(x_2293.x, x_2293.y, x_2293.z, x_2294.w);
        let x_2296 : vec4<f32> = u_xlat11;
        let x_2298 : vec3<f32> = (vec3<f32>(x_2296.x, x_2296.y, x_2296.z) + vec3<f32>(-2.5f, -0.5f, 1.5f));
        let x_2299 : vec4<f32> = u_xlat11;
        u_xlat11 = vec4<f32>(x_2298.x, x_2298.y, x_2298.z, x_2299.w);
        let x_2301 : vec4<f32> = u_xlat10;
        let x_2304 : vec4<f32> = x_138.x_MainLightShadowmapSize;
        let x_2306 : vec3<f32> = (vec3<f32>(x_2301.y, x_2301.x, x_2301.z) * vec3<f32>(x_2304.x, x_2304.x, x_2304.x));
        let x_2307 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_2306.x, x_2306.y, x_2306.z, x_2307.w);
        let x_2309 : vec4<f32> = u_xlat11;
        let x_2312 : vec4<f32> = x_138.x_MainLightShadowmapSize;
        let x_2314 : vec3<f32> = (vec3<f32>(x_2309.x, x_2309.y, x_2309.z) * vec3<f32>(x_2312.y, x_2312.y, x_2312.y));
        let x_2315 : vec4<f32> = u_xlat11;
        u_xlat11 = vec4<f32>(x_2314.x, x_2314.y, x_2314.z, x_2315.w);
        let x_2318 : f32 = u_xlat11.x;
        u_xlat10.w = x_2318;
        let x_2320 : vec4<f32> = u_xlat8;
        let x_2323 : vec4<f32> = x_138.x_MainLightShadowmapSize;
        let x_2326 : vec4<f32> = u_xlat10;
        u_xlat12 = ((vec4<f32>(x_2320.x, x_2320.y, x_2320.x, x_2320.y) * vec4<f32>(x_2323.x, x_2323.y, x_2323.x, x_2323.y)) + vec4<f32>(x_2326.y, x_2326.w, x_2326.x, x_2326.w));
        let x_2329 : vec4<f32> = u_xlat8;
        let x_2332 : vec4<f32> = x_138.x_MainLightShadowmapSize;
        let x_2335 : vec4<f32> = u_xlat10;
        u_xlat52 = ((vec2<f32>(x_2329.x, x_2329.y) * vec2<f32>(x_2332.x, x_2332.y)) + vec2<f32>(x_2335.z, x_2335.w));
        let x_2339 : f32 = u_xlat10.y;
        u_xlat11.w = x_2339;
        let x_2341 : vec4<f32> = u_xlat11;
        let x_2342 : vec2<f32> = vec2<f32>(x_2341.y, x_2341.z);
        let x_2343 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_2343.x, x_2342.x, x_2343.z, x_2342.y);
        let x_2345 : vec4<f32> = u_xlat8;
        let x_2348 : vec4<f32> = x_138.x_MainLightShadowmapSize;
        let x_2351 : vec4<f32> = u_xlat10;
        u_xlat13 = ((vec4<f32>(x_2345.x, x_2345.y, x_2345.x, x_2345.y) * vec4<f32>(x_2348.x, x_2348.y, x_2348.x, x_2348.y)) + vec4<f32>(x_2351.x, x_2351.y, x_2351.z, x_2351.y));
        let x_2354 : vec4<f32> = u_xlat8;
        let x_2357 : vec4<f32> = x_138.x_MainLightShadowmapSize;
        let x_2360 : vec4<f32> = u_xlat11;
        u_xlat11 = ((vec4<f32>(x_2354.x, x_2354.y, x_2354.x, x_2354.y) * vec4<f32>(x_2357.x, x_2357.y, x_2357.x, x_2357.y)) + vec4<f32>(x_2360.w, x_2360.y, x_2360.w, x_2360.z));
        let x_2363 : vec4<f32> = u_xlat8;
        let x_2366 : vec4<f32> = x_138.x_MainLightShadowmapSize;
        let x_2369 : vec4<f32> = u_xlat10;
        u_xlat10 = ((vec4<f32>(x_2363.x, x_2363.y, x_2363.x, x_2363.y) * vec4<f32>(x_2366.x, x_2366.y, x_2366.x, x_2366.y)) + vec4<f32>(x_2369.x, x_2369.w, x_2369.z, x_2369.w));
        let x_2372 : vec4<f32> = u_xlat9;
        let x_2374 : vec4<f32> = u_xlat14;
        u_xlat15 = (vec4<f32>(x_2372.x, x_2372.x, x_2372.x, x_2372.y) * vec4<f32>(x_2374.z, x_2374.w, x_2374.y, x_2374.z));
        let x_2377 : vec4<f32> = u_xlat9;
        let x_2379 : vec4<f32> = u_xlat14;
        u_xlat16 = (vec4<f32>(x_2377.y, x_2377.y, x_2377.z, x_2377.z) * x_2379);
        let x_2383 : f32 = u_xlat9.z;
        let x_2385 : f32 = u_xlat14.y;
        u_xlat72 = (x_2383 * x_2385);
        let x_2388 : vec4<f32> = u_xlat12;
        let x_2389 : vec2<f32> = vec2<f32>(x_2388.x, x_2388.y);
        let x_2391 : f32 = u_xlat4.z;
        txVec34 = vec3<f32>(x_2389.x, x_2389.y, x_2391);
        let x_2399 : vec3<f32> = txVec34;
        let x_2401 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2399.xy, x_2399.z);
        u_xlat73 = x_2401;
        let x_2403 : vec4<f32> = u_xlat12;
        let x_2404 : vec2<f32> = vec2<f32>(x_2403.z, x_2403.w);
        let x_2406 : f32 = u_xlat4.z;
        txVec35 = vec3<f32>(x_2404.x, x_2404.y, x_2406);
        let x_2413 : vec3<f32> = txVec35;
        let x_2415 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2413.xy, x_2413.z);
        u_xlat8.x = x_2415;
        let x_2418 : f32 = u_xlat8.x;
        let x_2420 : f32 = u_xlat15.y;
        u_xlat8.x = (x_2418 * x_2420);
        let x_2424 : f32 = u_xlat15.x;
        let x_2425 : f32 = u_xlat73;
        let x_2428 : f32 = u_xlat8.x;
        u_xlat73 = ((x_2424 * x_2425) + x_2428);
        let x_2431 : vec2<f32> = u_xlat52;
        let x_2433 : f32 = u_xlat4.z;
        txVec36 = vec3<f32>(x_2431.x, x_2431.y, x_2433);
        let x_2440 : vec3<f32> = txVec36;
        let x_2442 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2440.xy, x_2440.z);
        u_xlat8.x = x_2442;
        let x_2445 : f32 = u_xlat15.z;
        let x_2447 : f32 = u_xlat8.x;
        let x_2449 : f32 = u_xlat73;
        u_xlat73 = ((x_2445 * x_2447) + x_2449);
        let x_2452 : vec4<f32> = u_xlat11;
        let x_2453 : vec2<f32> = vec2<f32>(x_2452.x, x_2452.y);
        let x_2455 : f32 = u_xlat4.z;
        txVec37 = vec3<f32>(x_2453.x, x_2453.y, x_2455);
        let x_2462 : vec3<f32> = txVec37;
        let x_2464 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2462.xy, x_2462.z);
        u_xlat8.x = x_2464;
        let x_2467 : f32 = u_xlat15.w;
        let x_2469 : f32 = u_xlat8.x;
        let x_2471 : f32 = u_xlat73;
        u_xlat73 = ((x_2467 * x_2469) + x_2471);
        let x_2474 : vec4<f32> = u_xlat13;
        let x_2475 : vec2<f32> = vec2<f32>(x_2474.x, x_2474.y);
        let x_2477 : f32 = u_xlat4.z;
        txVec38 = vec3<f32>(x_2475.x, x_2475.y, x_2477);
        let x_2484 : vec3<f32> = txVec38;
        let x_2486 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2484.xy, x_2484.z);
        u_xlat8.x = x_2486;
        let x_2489 : f32 = u_xlat16.x;
        let x_2491 : f32 = u_xlat8.x;
        let x_2493 : f32 = u_xlat73;
        u_xlat73 = ((x_2489 * x_2491) + x_2493);
        let x_2496 : vec4<f32> = u_xlat13;
        let x_2497 : vec2<f32> = vec2<f32>(x_2496.z, x_2496.w);
        let x_2499 : f32 = u_xlat4.z;
        txVec39 = vec3<f32>(x_2497.x, x_2497.y, x_2499);
        let x_2506 : vec3<f32> = txVec39;
        let x_2508 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2506.xy, x_2506.z);
        u_xlat8.x = x_2508;
        let x_2511 : f32 = u_xlat16.y;
        let x_2513 : f32 = u_xlat8.x;
        let x_2515 : f32 = u_xlat73;
        u_xlat73 = ((x_2511 * x_2513) + x_2515);
        let x_2518 : vec4<f32> = u_xlat11;
        let x_2519 : vec2<f32> = vec2<f32>(x_2518.z, x_2518.w);
        let x_2521 : f32 = u_xlat4.z;
        txVec40 = vec3<f32>(x_2519.x, x_2519.y, x_2521);
        let x_2528 : vec3<f32> = txVec40;
        let x_2530 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2528.xy, x_2528.z);
        u_xlat8.x = x_2530;
        let x_2533 : f32 = u_xlat16.z;
        let x_2535 : f32 = u_xlat8.x;
        let x_2537 : f32 = u_xlat73;
        u_xlat73 = ((x_2533 * x_2535) + x_2537);
        let x_2540 : vec4<f32> = u_xlat10;
        let x_2541 : vec2<f32> = vec2<f32>(x_2540.x, x_2540.y);
        let x_2543 : f32 = u_xlat4.z;
        txVec41 = vec3<f32>(x_2541.x, x_2541.y, x_2543);
        let x_2550 : vec3<f32> = txVec41;
        let x_2552 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2550.xy, x_2550.z);
        u_xlat8.x = x_2552;
        let x_2555 : f32 = u_xlat16.w;
        let x_2557 : f32 = u_xlat8.x;
        let x_2559 : f32 = u_xlat73;
        u_xlat73 = ((x_2555 * x_2557) + x_2559);
        let x_2562 : vec4<f32> = u_xlat10;
        let x_2563 : vec2<f32> = vec2<f32>(x_2562.z, x_2562.w);
        let x_2565 : f32 = u_xlat4.z;
        txVec42 = vec3<f32>(x_2563.x, x_2563.y, x_2565);
        let x_2572 : vec3<f32> = txVec42;
        let x_2574 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2572.xy, x_2572.z);
        u_xlat8.x = x_2574;
        let x_2576 : f32 = u_xlat72;
        let x_2578 : f32 = u_xlat8.x;
        let x_2580 : f32 = u_xlat73;
        u_xlat66 = ((x_2576 * x_2578) + x_2580);
      } else {
        let x_2583 : vec4<f32> = u_xlat4;
        let x_2586 : vec4<f32> = x_138.x_MainLightShadowmapSize;
        let x_2589 : vec2<f32> = ((vec2<f32>(x_2583.x, x_2583.y) * vec2<f32>(x_2586.z, x_2586.w)) + vec2<f32>(0.5f, 0.5f));
        let x_2590 : vec4<f32> = u_xlat8;
        u_xlat8 = vec4<f32>(x_2589.x, x_2589.y, x_2590.z, x_2590.w);
        let x_2592 : vec4<f32> = u_xlat8;
        let x_2594 : vec2<f32> = floor(vec2<f32>(x_2592.x, x_2592.y));
        let x_2595 : vec4<f32> = u_xlat8;
        u_xlat8 = vec4<f32>(x_2594.x, x_2594.y, x_2595.z, x_2595.w);
        let x_2597 : vec4<f32> = u_xlat4;
        let x_2600 : vec4<f32> = x_138.x_MainLightShadowmapSize;
        let x_2603 : vec4<f32> = u_xlat8;
        u_xlat52 = ((vec2<f32>(x_2597.x, x_2597.y) * vec2<f32>(x_2600.z, x_2600.w)) + -(vec2<f32>(x_2603.x, x_2603.y)));
        let x_2607 : vec2<f32> = u_xlat52;
        u_xlat9 = (vec4<f32>(x_2607.x, x_2607.x, x_2607.y, x_2607.y) + vec4<f32>(0.5f, 1.0f, 0.5f, 1.0f));
        let x_2610 : vec4<f32> = u_xlat9;
        let x_2612 : vec4<f32> = u_xlat9;
        u_xlat10 = (vec4<f32>(x_2610.x, x_2610.x, x_2610.z, x_2610.z) * vec4<f32>(x_2612.x, x_2612.x, x_2612.z, x_2612.z));
        let x_2615 : vec4<f32> = u_xlat10;
        let x_2617 : vec2<f32> = (vec2<f32>(x_2615.y, x_2615.w) * vec2<f32>(0.040816002f, 0.040816002f));
        let x_2618 : vec4<f32> = u_xlat11;
        u_xlat11 = vec4<f32>(x_2618.x, x_2617.x, x_2618.z, x_2617.y);
        let x_2620 : vec4<f32> = u_xlat10;
        let x_2623 : vec2<f32> = u_xlat52;
        let x_2625 : vec2<f32> = ((vec2<f32>(x_2620.x, x_2620.z) * vec2<f32>(0.5f, 0.5f)) + -(x_2623));
        let x_2626 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_2625.x, x_2626.y, x_2625.y, x_2626.w);
        let x_2628 : vec2<f32> = u_xlat52;
        let x_2630 : vec2<f32> = (-(x_2628) + vec2<f32>(1.0f, 1.0f));
        let x_2631 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_2630.x, x_2630.y, x_2631.z, x_2631.w);
        let x_2633 : vec2<f32> = u_xlat52;
        u_xlat54 = min(x_2633, vec2<f32>(0.0f, 0.0f));
        let x_2635 : vec2<f32> = u_xlat54;
        let x_2637 : vec2<f32> = u_xlat54;
        let x_2639 : vec4<f32> = u_xlat10;
        let x_2641 : vec2<f32> = ((-(x_2635) * x_2637) + vec2<f32>(x_2639.x, x_2639.y));
        let x_2642 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_2641.x, x_2641.y, x_2642.z, x_2642.w);
        let x_2644 : vec2<f32> = u_xlat52;
        u_xlat54 = max(x_2644, vec2<f32>(0.0f, 0.0f));
        let x_2647 : vec2<f32> = u_xlat54;
        let x_2649 : vec2<f32> = u_xlat54;
        let x_2651 : vec4<f32> = u_xlat9;
        let x_2653 : vec2<f32> = ((-(x_2647) * x_2649) + vec2<f32>(x_2651.y, x_2651.w));
        let x_2654 : vec3<f32> = u_xlat31;
        u_xlat31 = vec3<f32>(x_2653.x, x_2654.y, x_2653.y);
        let x_2656 : vec4<f32> = u_xlat10;
        let x_2658 : vec2<f32> = (vec2<f32>(x_2656.x, x_2656.y) + vec2<f32>(2.0f, 2.0f));
        let x_2659 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_2658.x, x_2658.y, x_2659.z, x_2659.w);
        let x_2661 : vec3<f32> = u_xlat31;
        let x_2663 : vec2<f32> = (vec2<f32>(x_2661.x, x_2661.z) + vec2<f32>(2.0f, 2.0f));
        let x_2664 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_2664.x, x_2663.x, x_2664.z, x_2663.y);
        let x_2667 : f32 = u_xlat9.y;
        u_xlat12.z = (x_2667 * 0.081632003f);
        let x_2670 : vec4<f32> = u_xlat9;
        let x_2672 : vec3<f32> = (vec3<f32>(x_2670.z, x_2670.x, x_2670.w) * vec3<f32>(0.081632003f, 0.081632003f, 0.081632003f));
        let x_2673 : vec4<f32> = u_xlat13;
        u_xlat13 = vec4<f32>(x_2672.x, x_2672.y, x_2672.z, x_2673.w);
        let x_2675 : vec4<f32> = u_xlat10;
        let x_2677 : vec2<f32> = (vec2<f32>(x_2675.x, x_2675.y) * vec2<f32>(0.081632003f, 0.081632003f));
        let x_2678 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_2677.x, x_2677.y, x_2678.z, x_2678.w);
        let x_2681 : f32 = u_xlat13.y;
        u_xlat12.x = x_2681;
        let x_2683 : vec2<f32> = u_xlat52;
        let x_2686 : vec2<f32> = ((vec2<f32>(x_2683.x, x_2683.x) * vec2<f32>(-0.081632003f, 0.081632003f)) + vec2<f32>(0.163264006f, 0.081632003f));
        let x_2687 : vec4<f32> = u_xlat12;
        u_xlat12 = vec4<f32>(x_2687.x, x_2686.x, x_2687.z, x_2686.y);
        let x_2689 : vec2<f32> = u_xlat52;
        let x_2692 : vec2<f32> = ((vec2<f32>(x_2689.x, x_2689.x) * vec2<f32>(-0.081632003f, 0.081632003f)) + vec2<f32>(0.081632003f, 0.163264006f));
        let x_2693 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_2692.x, x_2693.y, x_2692.y, x_2693.w);
        let x_2696 : f32 = u_xlat9.x;
        u_xlat10.y = x_2696;
        let x_2699 : f32 = u_xlat11.y;
        u_xlat10.w = x_2699;
        let x_2701 : vec4<f32> = u_xlat10;
        let x_2702 : vec4<f32> = u_xlat12;
        u_xlat12 = (x_2701 + x_2702);
        let x_2704 : vec2<f32> = u_xlat52;
        let x_2707 : vec2<f32> = ((vec2<f32>(x_2704.y, x_2704.y) * vec2<f32>(-0.081632003f, 0.081632003f)) + vec2<f32>(0.163264006f, 0.081632003f));
        let x_2708 : vec4<f32> = u_xlat13;
        u_xlat13 = vec4<f32>(x_2708.x, x_2707.x, x_2708.z, x_2707.y);
        let x_2710 : vec2<f32> = u_xlat52;
        let x_2713 : vec2<f32> = ((vec2<f32>(x_2710.y, x_2710.y) * vec2<f32>(-0.081632003f, 0.081632003f)) + vec2<f32>(0.081632003f, 0.163264006f));
        let x_2714 : vec4<f32> = u_xlat11;
        u_xlat11 = vec4<f32>(x_2713.x, x_2714.y, x_2713.y, x_2714.w);
        let x_2717 : f32 = u_xlat9.y;
        u_xlat11.y = x_2717;
        let x_2719 : vec4<f32> = u_xlat11;
        let x_2720 : vec4<f32> = u_xlat13;
        u_xlat9 = (x_2719 + x_2720);
        let x_2722 : vec4<f32> = u_xlat10;
        let x_2723 : vec4<f32> = u_xlat12;
        u_xlat10 = (x_2722 / x_2723);
        let x_2725 : vec4<f32> = u_xlat10;
        u_xlat10 = (x_2725 + vec4<f32>(-3.5f, -1.5f, 0.5f, 2.5f));
        let x_2727 : vec4<f32> = u_xlat11;
        let x_2728 : vec4<f32> = u_xlat9;
        u_xlat11 = (x_2727 / x_2728);
        let x_2730 : vec4<f32> = u_xlat11;
        u_xlat11 = (x_2730 + vec4<f32>(-3.5f, -1.5f, 0.5f, 2.5f));
        let x_2732 : vec4<f32> = u_xlat10;
        let x_2735 : vec4<f32> = x_138.x_MainLightShadowmapSize;
        u_xlat10 = (vec4<f32>(x_2732.w, x_2732.x, x_2732.y, x_2732.z) * vec4<f32>(x_2735.x, x_2735.x, x_2735.x, x_2735.x));
        let x_2738 : vec4<f32> = u_xlat11;
        let x_2741 : vec4<f32> = x_138.x_MainLightShadowmapSize;
        u_xlat11 = (vec4<f32>(x_2738.x, x_2738.w, x_2738.y, x_2738.z) * vec4<f32>(x_2741.y, x_2741.y, x_2741.y, x_2741.y));
        let x_2744 : vec4<f32> = u_xlat10;
        let x_2745 : vec3<f32> = vec3<f32>(x_2744.y, x_2744.z, x_2744.w);
        let x_2746 : vec4<f32> = u_xlat13;
        u_xlat13 = vec4<f32>(x_2745.x, x_2746.y, x_2745.y, x_2745.z);
        let x_2749 : f32 = u_xlat11.x;
        u_xlat13.y = x_2749;
        let x_2751 : vec4<f32> = u_xlat8;
        let x_2754 : vec4<f32> = x_138.x_MainLightShadowmapSize;
        let x_2757 : vec4<f32> = u_xlat13;
        u_xlat14 = ((vec4<f32>(x_2751.x, x_2751.y, x_2751.x, x_2751.y) * vec4<f32>(x_2754.x, x_2754.y, x_2754.x, x_2754.y)) + vec4<f32>(x_2757.x, x_2757.y, x_2757.z, x_2757.y));
        let x_2760 : vec4<f32> = u_xlat8;
        let x_2763 : vec4<f32> = x_138.x_MainLightShadowmapSize;
        let x_2766 : vec4<f32> = u_xlat13;
        u_xlat52 = ((vec2<f32>(x_2760.x, x_2760.y) * vec2<f32>(x_2763.x, x_2763.y)) + vec2<f32>(x_2766.w, x_2766.y));
        let x_2770 : f32 = u_xlat13.y;
        u_xlat10.y = x_2770;
        let x_2773 : f32 = u_xlat11.z;
        u_xlat13.y = x_2773;
        let x_2775 : vec4<f32> = u_xlat8;
        let x_2778 : vec4<f32> = x_138.x_MainLightShadowmapSize;
        let x_2781 : vec4<f32> = u_xlat13;
        u_xlat15 = ((vec4<f32>(x_2775.x, x_2775.y, x_2775.x, x_2775.y) * vec4<f32>(x_2778.x, x_2778.y, x_2778.x, x_2778.y)) + vec4<f32>(x_2781.x, x_2781.y, x_2781.z, x_2781.y));
        let x_2784 : vec4<f32> = u_xlat8;
        let x_2787 : vec4<f32> = x_138.x_MainLightShadowmapSize;
        let x_2790 : vec4<f32> = u_xlat13;
        let x_2792 : vec2<f32> = ((vec2<f32>(x_2784.x, x_2784.y) * vec2<f32>(x_2787.x, x_2787.y)) + vec2<f32>(x_2790.w, x_2790.y));
        let x_2793 : vec4<f32> = u_xlat16;
        u_xlat16 = vec4<f32>(x_2792.x, x_2792.y, x_2793.z, x_2793.w);
        let x_2796 : f32 = u_xlat13.y;
        u_xlat10.z = x_2796;
        let x_2798 : vec4<f32> = u_xlat8;
        let x_2801 : vec4<f32> = x_138.x_MainLightShadowmapSize;
        let x_2804 : vec4<f32> = u_xlat10;
        u_xlat17 = ((vec4<f32>(x_2798.x, x_2798.y, x_2798.x, x_2798.y) * vec4<f32>(x_2801.x, x_2801.y, x_2801.x, x_2801.y)) + vec4<f32>(x_2804.x, x_2804.y, x_2804.x, x_2804.z));
        let x_2808 : f32 = u_xlat11.w;
        u_xlat13.y = x_2808;
        let x_2810 : vec4<f32> = u_xlat8;
        let x_2813 : vec4<f32> = x_138.x_MainLightShadowmapSize;
        let x_2816 : vec4<f32> = u_xlat13;
        u_xlat18 = ((vec4<f32>(x_2810.x, x_2810.y, x_2810.x, x_2810.y) * vec4<f32>(x_2813.x, x_2813.y, x_2813.x, x_2813.y)) + vec4<f32>(x_2816.x, x_2816.y, x_2816.z, x_2816.y));
        let x_2820 : vec4<f32> = u_xlat8;
        let x_2823 : vec4<f32> = x_138.x_MainLightShadowmapSize;
        let x_2826 : vec4<f32> = u_xlat13;
        u_xlat32 = ((vec2<f32>(x_2820.x, x_2820.y) * vec2<f32>(x_2823.x, x_2823.y)) + vec2<f32>(x_2826.w, x_2826.y));
        let x_2830 : f32 = u_xlat13.y;
        u_xlat10.w = x_2830;
        let x_2833 : vec4<f32> = u_xlat8;
        let x_2836 : vec4<f32> = x_138.x_MainLightShadowmapSize;
        let x_2839 : vec4<f32> = u_xlat10;
        u_xlat60 = ((vec2<f32>(x_2833.x, x_2833.y) * vec2<f32>(x_2836.x, x_2836.y)) + vec2<f32>(x_2839.x, x_2839.w));
        let x_2842 : vec4<f32> = u_xlat13;
        let x_2843 : vec3<f32> = vec3<f32>(x_2842.x, x_2842.z, x_2842.w);
        let x_2844 : vec4<f32> = u_xlat11;
        u_xlat11 = vec4<f32>(x_2843.x, x_2844.y, x_2843.y, x_2843.z);
        let x_2846 : vec4<f32> = u_xlat8;
        let x_2849 : vec4<f32> = x_138.x_MainLightShadowmapSize;
        let x_2852 : vec4<f32> = u_xlat11;
        u_xlat13 = ((vec4<f32>(x_2846.x, x_2846.y, x_2846.x, x_2846.y) * vec4<f32>(x_2849.x, x_2849.y, x_2849.x, x_2849.y)) + vec4<f32>(x_2852.x, x_2852.y, x_2852.z, x_2852.y));
        let x_2856 : vec4<f32> = u_xlat8;
        let x_2859 : vec4<f32> = x_138.x_MainLightShadowmapSize;
        let x_2862 : vec4<f32> = u_xlat11;
        u_xlat55 = ((vec2<f32>(x_2856.x, x_2856.y) * vec2<f32>(x_2859.x, x_2859.y)) + vec2<f32>(x_2862.w, x_2862.y));
        let x_2866 : f32 = u_xlat10.x;
        u_xlat11.x = x_2866;
        let x_2868 : vec4<f32> = u_xlat8;
        let x_2871 : vec4<f32> = x_138.x_MainLightShadowmapSize;
        let x_2874 : vec4<f32> = u_xlat11;
        let x_2876 : vec2<f32> = ((vec2<f32>(x_2868.x, x_2868.y) * vec2<f32>(x_2871.x, x_2871.y)) + vec2<f32>(x_2874.x, x_2874.y));
        let x_2877 : vec4<f32> = u_xlat8;
        u_xlat8 = vec4<f32>(x_2876.x, x_2876.y, x_2877.z, x_2877.w);
        let x_2880 : vec4<f32> = u_xlat9;
        let x_2882 : vec4<f32> = u_xlat12;
        u_xlat19 = (vec4<f32>(x_2880.x, x_2880.x, x_2880.x, x_2880.x) * x_2882);
        let x_2885 : vec4<f32> = u_xlat9;
        let x_2887 : vec4<f32> = u_xlat12;
        u_xlat20 = (vec4<f32>(x_2885.y, x_2885.y, x_2885.y, x_2885.y) * x_2887);
        let x_2890 : vec4<f32> = u_xlat9;
        let x_2892 : vec4<f32> = u_xlat12;
        u_xlat21 = (vec4<f32>(x_2890.z, x_2890.z, x_2890.z, x_2890.z) * x_2892);
        let x_2894 : vec4<f32> = u_xlat9;
        let x_2896 : vec4<f32> = u_xlat12;
        u_xlat9 = (vec4<f32>(x_2894.w, x_2894.w, x_2894.w, x_2894.w) * x_2896);
        let x_2899 : vec4<f32> = u_xlat14;
        let x_2900 : vec2<f32> = vec2<f32>(x_2899.x, x_2899.y);
        let x_2902 : f32 = u_xlat4.z;
        txVec43 = vec3<f32>(x_2900.x, x_2900.y, x_2902);
        let x_2909 : vec3<f32> = txVec43;
        let x_2911 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2909.xy, x_2909.z);
        u_xlat72 = x_2911;
        let x_2913 : vec4<f32> = u_xlat14;
        let x_2914 : vec2<f32> = vec2<f32>(x_2913.z, x_2913.w);
        let x_2916 : f32 = u_xlat4.z;
        txVec44 = vec3<f32>(x_2914.x, x_2914.y, x_2916);
        let x_2923 : vec3<f32> = txVec44;
        let x_2925 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2923.xy, x_2923.z);
        u_xlat73 = x_2925;
        let x_2926 : f32 = u_xlat73;
        let x_2928 : f32 = u_xlat19.y;
        u_xlat73 = (x_2926 * x_2928);
        let x_2931 : f32 = u_xlat19.x;
        let x_2932 : f32 = u_xlat72;
        let x_2934 : f32 = u_xlat73;
        u_xlat72 = ((x_2931 * x_2932) + x_2934);
        let x_2937 : vec2<f32> = u_xlat52;
        let x_2939 : f32 = u_xlat4.z;
        txVec45 = vec3<f32>(x_2937.x, x_2937.y, x_2939);
        let x_2946 : vec3<f32> = txVec45;
        let x_2948 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2946.xy, x_2946.z);
        u_xlat73 = x_2948;
        let x_2950 : f32 = u_xlat19.z;
        let x_2951 : f32 = u_xlat73;
        let x_2953 : f32 = u_xlat72;
        u_xlat72 = ((x_2950 * x_2951) + x_2953);
        let x_2956 : vec4<f32> = u_xlat17;
        let x_2957 : vec2<f32> = vec2<f32>(x_2956.x, x_2956.y);
        let x_2959 : f32 = u_xlat4.z;
        txVec46 = vec3<f32>(x_2957.x, x_2957.y, x_2959);
        let x_2966 : vec3<f32> = txVec46;
        let x_2968 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2966.xy, x_2966.z);
        u_xlat73 = x_2968;
        let x_2970 : f32 = u_xlat19.w;
        let x_2971 : f32 = u_xlat73;
        let x_2973 : f32 = u_xlat72;
        u_xlat72 = ((x_2970 * x_2971) + x_2973);
        let x_2976 : vec4<f32> = u_xlat15;
        let x_2977 : vec2<f32> = vec2<f32>(x_2976.x, x_2976.y);
        let x_2979 : f32 = u_xlat4.z;
        txVec47 = vec3<f32>(x_2977.x, x_2977.y, x_2979);
        let x_2986 : vec3<f32> = txVec47;
        let x_2988 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2986.xy, x_2986.z);
        u_xlat73 = x_2988;
        let x_2990 : f32 = u_xlat20.x;
        let x_2991 : f32 = u_xlat73;
        let x_2993 : f32 = u_xlat72;
        u_xlat72 = ((x_2990 * x_2991) + x_2993);
        let x_2996 : vec4<f32> = u_xlat15;
        let x_2997 : vec2<f32> = vec2<f32>(x_2996.z, x_2996.w);
        let x_2999 : f32 = u_xlat4.z;
        txVec48 = vec3<f32>(x_2997.x, x_2997.y, x_2999);
        let x_3006 : vec3<f32> = txVec48;
        let x_3008 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_3006.xy, x_3006.z);
        u_xlat73 = x_3008;
        let x_3010 : f32 = u_xlat20.y;
        let x_3011 : f32 = u_xlat73;
        let x_3013 : f32 = u_xlat72;
        u_xlat72 = ((x_3010 * x_3011) + x_3013);
        let x_3016 : vec4<f32> = u_xlat16;
        let x_3017 : vec2<f32> = vec2<f32>(x_3016.x, x_3016.y);
        let x_3019 : f32 = u_xlat4.z;
        txVec49 = vec3<f32>(x_3017.x, x_3017.y, x_3019);
        let x_3026 : vec3<f32> = txVec49;
        let x_3028 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_3026.xy, x_3026.z);
        u_xlat73 = x_3028;
        let x_3030 : f32 = u_xlat20.z;
        let x_3031 : f32 = u_xlat73;
        let x_3033 : f32 = u_xlat72;
        u_xlat72 = ((x_3030 * x_3031) + x_3033);
        let x_3036 : vec4<f32> = u_xlat17;
        let x_3037 : vec2<f32> = vec2<f32>(x_3036.z, x_3036.w);
        let x_3039 : f32 = u_xlat4.z;
        txVec50 = vec3<f32>(x_3037.x, x_3037.y, x_3039);
        let x_3046 : vec3<f32> = txVec50;
        let x_3048 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_3046.xy, x_3046.z);
        u_xlat73 = x_3048;
        let x_3050 : f32 = u_xlat20.w;
        let x_3051 : f32 = u_xlat73;
        let x_3053 : f32 = u_xlat72;
        u_xlat72 = ((x_3050 * x_3051) + x_3053);
        let x_3056 : vec4<f32> = u_xlat18;
        let x_3057 : vec2<f32> = vec2<f32>(x_3056.x, x_3056.y);
        let x_3059 : f32 = u_xlat4.z;
        txVec51 = vec3<f32>(x_3057.x, x_3057.y, x_3059);
        let x_3066 : vec3<f32> = txVec51;
        let x_3068 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_3066.xy, x_3066.z);
        u_xlat73 = x_3068;
        let x_3070 : f32 = u_xlat21.x;
        let x_3071 : f32 = u_xlat73;
        let x_3073 : f32 = u_xlat72;
        u_xlat72 = ((x_3070 * x_3071) + x_3073);
        let x_3076 : vec4<f32> = u_xlat18;
        let x_3077 : vec2<f32> = vec2<f32>(x_3076.z, x_3076.w);
        let x_3079 : f32 = u_xlat4.z;
        txVec52 = vec3<f32>(x_3077.x, x_3077.y, x_3079);
        let x_3086 : vec3<f32> = txVec52;
        let x_3088 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_3086.xy, x_3086.z);
        u_xlat73 = x_3088;
        let x_3090 : f32 = u_xlat21.y;
        let x_3091 : f32 = u_xlat73;
        let x_3093 : f32 = u_xlat72;
        u_xlat72 = ((x_3090 * x_3091) + x_3093);
        let x_3096 : vec2<f32> = u_xlat32;
        let x_3098 : f32 = u_xlat4.z;
        txVec53 = vec3<f32>(x_3096.x, x_3096.y, x_3098);
        let x_3105 : vec3<f32> = txVec53;
        let x_3107 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_3105.xy, x_3105.z);
        u_xlat73 = x_3107;
        let x_3109 : f32 = u_xlat21.z;
        let x_3110 : f32 = u_xlat73;
        let x_3112 : f32 = u_xlat72;
        u_xlat72 = ((x_3109 * x_3110) + x_3112);
        let x_3115 : vec2<f32> = u_xlat60;
        let x_3117 : f32 = u_xlat4.z;
        txVec54 = vec3<f32>(x_3115.x, x_3115.y, x_3117);
        let x_3124 : vec3<f32> = txVec54;
        let x_3126 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_3124.xy, x_3124.z);
        u_xlat73 = x_3126;
        let x_3128 : f32 = u_xlat21.w;
        let x_3129 : f32 = u_xlat73;
        let x_3131 : f32 = u_xlat72;
        u_xlat72 = ((x_3128 * x_3129) + x_3131);
        let x_3134 : vec4<f32> = u_xlat13;
        let x_3135 : vec2<f32> = vec2<f32>(x_3134.x, x_3134.y);
        let x_3137 : f32 = u_xlat4.z;
        txVec55 = vec3<f32>(x_3135.x, x_3135.y, x_3137);
        let x_3144 : vec3<f32> = txVec55;
        let x_3146 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_3144.xy, x_3144.z);
        u_xlat73 = x_3146;
        let x_3148 : f32 = u_xlat9.x;
        let x_3149 : f32 = u_xlat73;
        let x_3151 : f32 = u_xlat72;
        u_xlat72 = ((x_3148 * x_3149) + x_3151);
        let x_3154 : vec4<f32> = u_xlat13;
        let x_3155 : vec2<f32> = vec2<f32>(x_3154.z, x_3154.w);
        let x_3157 : f32 = u_xlat4.z;
        txVec56 = vec3<f32>(x_3155.x, x_3155.y, x_3157);
        let x_3164 : vec3<f32> = txVec56;
        let x_3166 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_3164.xy, x_3164.z);
        u_xlat73 = x_3166;
        let x_3168 : f32 = u_xlat9.y;
        let x_3169 : f32 = u_xlat73;
        let x_3171 : f32 = u_xlat72;
        u_xlat72 = ((x_3168 * x_3169) + x_3171);
        let x_3174 : vec2<f32> = u_xlat55;
        let x_3176 : f32 = u_xlat4.z;
        txVec57 = vec3<f32>(x_3174.x, x_3174.y, x_3176);
        let x_3183 : vec3<f32> = txVec57;
        let x_3185 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_3183.xy, x_3183.z);
        u_xlat73 = x_3185;
        let x_3187 : f32 = u_xlat9.z;
        let x_3188 : f32 = u_xlat73;
        let x_3190 : f32 = u_xlat72;
        u_xlat72 = ((x_3187 * x_3188) + x_3190);
        let x_3193 : vec4<f32> = u_xlat8;
        let x_3194 : vec2<f32> = vec2<f32>(x_3193.x, x_3193.y);
        let x_3196 : f32 = u_xlat4.z;
        txVec58 = vec3<f32>(x_3194.x, x_3194.y, x_3196);
        let x_3203 : vec3<f32> = txVec58;
        let x_3205 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_3203.xy, x_3203.z);
        u_xlat73 = x_3205;
        let x_3207 : f32 = u_xlat9.w;
        let x_3208 : f32 = u_xlat73;
        let x_3210 : f32 = u_xlat72;
        u_xlat66 = ((x_3207 * x_3208) + x_3210);
      }
    }
  } else {
    let x_3214 : vec4<f32> = u_xlat4;
    let x_3215 : vec2<f32> = vec2<f32>(x_3214.x, x_3214.y);
    let x_3217 : f32 = u_xlat4.z;
    txVec59 = vec3<f32>(x_3215.x, x_3215.y, x_3217);
    let x_3224 : vec3<f32> = txVec59;
    let x_3226 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_3224.xy, x_3224.z);
    u_xlat66 = x_3226;
  }
  let x_3227 : f32 = u_xlat66;
  let x_3229 : f32 = x_138.x_MainLightShadowParams.x;
  let x_3231 : f32 = u_xlat70;
  u_xlat66 = ((x_3227 * x_3229) + x_3231);
  let x_3233 : bool = u_xlatb5;
  let x_3234 : f32 = u_xlat66;
  u_xlat66 = select(x_3234, 1.0f, x_3233);
  let x_3236 : vec3<f32> = vs_INTERP0;
  let x_3238 : vec3<f32> = x_66.x_WorldSpaceCameraPos;
  let x_3240 : vec3<f32> = (x_3236 + -(x_3238));
  let x_3241 : vec4<f32> = u_xlat4;
  u_xlat4 = vec4<f32>(x_3240.x, x_3240.y, x_3240.z, x_3241.w);
  let x_3243 : vec4<f32> = u_xlat4;
  let x_3245 : vec4<f32> = u_xlat4;
  u_xlat4.x = dot(vec3<f32>(x_3243.x, x_3243.y, x_3243.z), vec3<f32>(x_3245.x, x_3245.y, x_3245.z));
  let x_3250 : f32 = u_xlat4.x;
  let x_3252 : f32 = x_138.x_MainLightShadowParams.z;
  let x_3255 : f32 = x_138.x_MainLightShadowParams.w;
  u_xlat4.x = ((x_3250 * x_3252) + x_3255);
  let x_3259 : f32 = u_xlat4.x;
  u_xlat4.x = clamp(x_3259, 0.0f, 1.0f);
  let x_3263 : f32 = u_xlat66;
  u_xlat26 = (-(x_3263) + 1.0f);
  let x_3267 : f32 = u_xlat4.x;
  let x_3268 : f32 = u_xlat26;
  let x_3270 : f32 = u_xlat66;
  u_xlat66 = ((x_3267 * x_3268) + x_3270);
  let x_3278 : f32 = x_3276.x_MainLightCookieTextureFormat;
  u_xlatb4.x = !((x_3278 == -1.0f));
  let x_3282 : bool = u_xlatb4.x;
  if (x_3282) {
    let x_3285 : vec3<f32> = vs_INTERP0;
    let x_3288 : vec4<f32> = x_3276.x_MainLightWorldToLight[1i];
    let x_3290 : vec2<f32> = (vec2<f32>(x_3285.y, x_3285.y) * vec2<f32>(x_3288.x, x_3288.y));
    let x_3291 : vec4<f32> = u_xlat4;
    u_xlat4 = vec4<f32>(x_3290.x, x_3290.y, x_3291.z, x_3291.w);
    let x_3294 : vec4<f32> = x_3276.x_MainLightWorldToLight[0i];
    let x_3296 : vec3<f32> = vs_INTERP0;
    let x_3299 : vec4<f32> = u_xlat4;
    let x_3301 : vec2<f32> = ((vec2<f32>(x_3294.x, x_3294.y) * vec2<f32>(x_3296.x, x_3296.x)) + vec2<f32>(x_3299.x, x_3299.y));
    let x_3302 : vec4<f32> = u_xlat4;
    u_xlat4 = vec4<f32>(x_3301.x, x_3301.y, x_3302.z, x_3302.w);
    let x_3305 : vec4<f32> = x_3276.x_MainLightWorldToLight[2i];
    let x_3307 : vec3<f32> = vs_INTERP0;
    let x_3310 : vec4<f32> = u_xlat4;
    let x_3312 : vec2<f32> = ((vec2<f32>(x_3305.x, x_3305.y) * vec2<f32>(x_3307.z, x_3307.z)) + vec2<f32>(x_3310.x, x_3310.y));
    let x_3313 : vec4<f32> = u_xlat4;
    u_xlat4 = vec4<f32>(x_3312.x, x_3312.y, x_3313.z, x_3313.w);
    let x_3315 : vec4<f32> = u_xlat4;
    let x_3318 : vec4<f32> = x_3276.x_MainLightWorldToLight[3i];
    let x_3320 : vec2<f32> = (vec2<f32>(x_3315.x, x_3315.y) + vec2<f32>(x_3318.x, x_3318.y));
    let x_3321 : vec4<f32> = u_xlat4;
    u_xlat4 = vec4<f32>(x_3320.x, x_3320.y, x_3321.z, x_3321.w);
    let x_3323 : vec4<f32> = u_xlat4;
    let x_3326 : vec2<f32> = ((vec2<f32>(x_3323.x, x_3323.y) * vec2<f32>(0.5f, 0.5f)) + vec2<f32>(0.5f, 0.5f));
    let x_3327 : vec4<f32> = u_xlat4;
    u_xlat4 = vec4<f32>(x_3326.x, x_3326.y, x_3327.z, x_3327.w);
    let x_3334 : vec4<f32> = u_xlat4;
    let x_3337 : f32 = x_66.x_GlobalMipBias.x;
    let x_3338 : vec4<f32> = textureSampleBias(x_MainLightCookieTexture, sampler_MainLightCookieTexture, vec2<f32>(x_3334.x, x_3334.y), x_3337);
    u_xlat4 = x_3338;
    let x_3343 : f32 = x_3276.x_MainLightCookieTextureFormat;
    let x_3345 : f32 = x_3276.x_MainLightCookieTextureFormat;
    let x_3347 : f32 = x_3276.x_MainLightCookieTextureFormat;
    let x_3349 : f32 = x_3276.x_MainLightCookieTextureFormat;
    let x_3350 : vec4<f32> = vec4<f32>(x_3343, x_3345, x_3347, x_3349);
    let x_3357 : vec4<bool> = (vec4<f32>(x_3350.x, x_3350.y, x_3350.z, x_3350.w) == vec4<f32>(0.0f, 1.0f, 0.0f, 0.0f));
    u_xlatb8 = vec2<bool>(x_3357.x, x_3357.y);
    let x_3360 : bool = u_xlatb8.y;
    if (x_3360) {
      let x_3365 : f32 = u_xlat4.w;
      x_3361 = x_3365;
    } else {
      let x_3368 : f32 = u_xlat4.x;
      x_3361 = x_3368;
    }
    let x_3369 : f32 = x_3361;
    u_xlat70 = x_3369;
    let x_3371 : bool = u_xlatb8.x;
    if (x_3371) {
      let x_3375 : vec4<f32> = u_xlat4;
      x_3372 = vec3<f32>(x_3375.x, x_3375.y, x_3375.z);
    } else {
      let x_3378 : f32 = u_xlat70;
      x_3372 = vec3<f32>(x_3378, x_3378, x_3378);
    }
    let x_3380 : vec3<f32> = x_3372;
    let x_3381 : vec4<f32> = u_xlat4;
    u_xlat4 = vec4<f32>(x_3380.x, x_3380.y, x_3380.z, x_3381.w);
  } else {
    u_xlat4.x = 1.0f;
    u_xlat4.y = 1.0f;
    u_xlat4.z = 1.0f;
  }
  let x_3387 : vec4<f32> = u_xlat4;
  let x_3390 : vec4<f32> = x_66.x_MainLightColor;
  let x_3392 : vec3<f32> = (vec3<f32>(x_3387.x, x_3387.y, x_3387.z) * vec3<f32>(x_3390.x, x_3390.y, x_3390.z));
  let x_3393 : vec4<f32> = u_xlat4;
  u_xlat4 = vec4<f32>(x_3392.x, x_3392.y, x_3392.z, x_3393.w);
  let x_3395 : f32 = u_xlat71;
  let x_3397 : vec4<f32> = u_xlat4;
  let x_3399 : vec3<f32> = (vec3<f32>(x_3395, x_3395, x_3395) * vec3<f32>(x_3397.x, x_3397.y, x_3397.z));
  let x_3400 : vec4<f32> = u_xlat4;
  u_xlat4 = vec4<f32>(x_3399.x, x_3399.y, x_3399.z, x_3400.w);
  let x_3402 : vec4<f32> = u_xlat7;
  let x_3405 : vec4<f32> = u_xlat6;
  u_xlat70 = dot(-(vec3<f32>(x_3402.x, x_3402.y, x_3402.z)), vec3<f32>(x_3405.x, x_3405.y, x_3405.z));
  let x_3408 : f32 = u_xlat70;
  let x_3409 : f32 = u_xlat70;
  u_xlat70 = (x_3408 + x_3409);
  let x_3411 : vec4<f32> = u_xlat6;
  let x_3413 : f32 = u_xlat70;
  let x_3417 : vec4<f32> = u_xlat7;
  let x_3420 : vec3<f32> = ((vec3<f32>(x_3411.x, x_3411.y, x_3411.z) * -(vec3<f32>(x_3413, x_3413, x_3413))) + -(vec3<f32>(x_3417.x, x_3417.y, x_3417.z)));
  let x_3421 : vec4<f32> = u_xlat8;
  u_xlat8 = vec4<f32>(x_3420.x, x_3420.y, x_3420.z, x_3421.w);
  let x_3423 : vec4<f32> = u_xlat6;
  let x_3425 : vec4<f32> = u_xlat7;
  u_xlat70 = dot(vec3<f32>(x_3423.x, x_3423.y, x_3423.z), vec3<f32>(x_3425.x, x_3425.y, x_3425.z));
  let x_3428 : f32 = u_xlat70;
  u_xlat70 = clamp(x_3428, 0.0f, 1.0f);
  let x_3430 : f32 = u_xlat70;
  u_xlat70 = (-(x_3430) + 1.0f);
  let x_3433 : f32 = u_xlat70;
  let x_3434 : f32 = u_xlat70;
  u_xlat70 = (x_3433 * x_3434);
  let x_3436 : f32 = u_xlat70;
  let x_3437 : f32 = u_xlat70;
  u_xlat70 = (x_3436 * x_3437);
  let x_3440 : f32 = u_xlat23.x;
  u_xlat5.x = ((-(x_3440) * 0.699999988f) + 1.700000048f);
  let x_3448 : f32 = u_xlat23.x;
  let x_3450 : f32 = u_xlat5.x;
  u_xlat23.x = (x_3448 * x_3450);
  let x_3454 : f32 = u_xlat23.x;
  u_xlat23.x = (x_3454 * 6.0f);
  let x_3466 : vec4<f32> = u_xlat8;
  let x_3469 : f32 = u_xlat23.x;
  let x_3470 : vec4<f32> = textureSampleLevel(unity_SpecCube0, samplerunity_SpecCube0, vec3<f32>(x_3466.x, x_3466.y, x_3466.z), x_3469);
  u_xlat8 = x_3470;
  let x_3472 : f32 = u_xlat8.w;
  u_xlat23.x = (x_3472 + -1.0f);
  let x_3476 : f32 = x_1752.unity_SpecCube0_HDR.w;
  let x_3478 : f32 = u_xlat23.x;
  u_xlat23.x = ((x_3476 * x_3478) + 1.0f);
  let x_3483 : f32 = u_xlat23.x;
  u_xlat23.x = max(x_3483, 0.0f);
  let x_3487 : f32 = u_xlat23.x;
  u_xlat23.x = log2(x_3487);
  let x_3491 : f32 = u_xlat23.x;
  let x_3493 : f32 = x_1752.unity_SpecCube0_HDR.y;
  u_xlat23.x = (x_3491 * x_3493);
  let x_3497 : f32 = u_xlat23.x;
  u_xlat23.x = exp2(x_3497);
  let x_3501 : f32 = u_xlat23.x;
  let x_3503 : f32 = x_1752.unity_SpecCube0_HDR.x;
  u_xlat23.x = (x_3501 * x_3503);
  let x_3506 : vec4<f32> = u_xlat8;
  let x_3508 : vec3<f32> = u_xlat23;
  let x_3510 : vec3<f32> = (vec3<f32>(x_3506.x, x_3506.y, x_3506.z) * vec3<f32>(x_3508.x, x_3508.x, x_3508.x));
  let x_3511 : vec4<f32> = u_xlat8;
  u_xlat8 = vec4<f32>(x_3510.x, x_3510.y, x_3510.z, x_3511.w);
  let x_3513 : f32 = u_xlat67;
  let x_3515 : f32 = u_xlat67;
  let x_3519 : vec2<f32> = ((vec2<f32>(x_3513, x_3513) * vec2<f32>(x_3515, x_3515)) + vec2<f32>(-1.0f, 1.0f));
  let x_3520 : vec3<f32> = u_xlat23;
  u_xlat23 = vec3<f32>(x_3519.x, x_3520.y, x_3519.y);
  let x_3523 : f32 = u_xlat23.z;
  u_xlat67 = (1.0f / x_3523);
  let x_3526 : f32 = u_xlat3.x;
  u_xlat3.x = (x_3526 + -0.039999999f);
  let x_3530 : f32 = u_xlat70;
  let x_3532 : f32 = u_xlat3.x;
  u_xlat3.x = ((x_3530 * x_3532) + 0.039999999f);
  let x_3537 : f32 = u_xlat67;
  let x_3539 : f32 = u_xlat3.x;
  u_xlat67 = (x_3537 * x_3539);
  let x_3541 : f32 = u_xlat67;
  let x_3543 : vec4<f32> = u_xlat8;
  let x_3545 : vec3<f32> = (vec3<f32>(x_3541, x_3541, x_3541) * vec3<f32>(x_3543.x, x_3543.y, x_3543.z));
  let x_3546 : vec4<f32> = u_xlat8;
  u_xlat8 = vec4<f32>(x_3545.x, x_3545.y, x_3545.z, x_3546.w);
  let x_3548 : vec3<f32> = u_xlat25;
  let x_3549 : vec3<f32> = u_xlat2;
  let x_3551 : vec4<f32> = u_xlat8;
  let x_3553 : vec3<f32> = ((x_3548 * x_3549) + vec3<f32>(x_3551.x, x_3551.y, x_3551.z));
  let x_3554 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_3553.x, x_3553.y, x_3553.z, x_3554.w);
  let x_3556 : f32 = u_xlat66;
  let x_3558 : f32 = x_1752.unity_LightData.z;
  u_xlat66 = (x_3556 * x_3558);
  let x_3560 : vec4<f32> = u_xlat6;
  let x_3563 : vec4<f32> = x_66.x_MainLightPosition;
  u_xlat67 = dot(vec3<f32>(x_3560.x, x_3560.y, x_3560.z), vec3<f32>(x_3563.x, x_3563.y, x_3563.z));
  let x_3566 : f32 = u_xlat67;
  u_xlat67 = clamp(x_3566, 0.0f, 1.0f);
  let x_3568 : f32 = u_xlat66;
  let x_3569 : f32 = u_xlat67;
  u_xlat66 = (x_3568 * x_3569);
  let x_3571 : f32 = u_xlat66;
  let x_3573 : vec4<f32> = u_xlat4;
  let x_3575 : vec3<f32> = (vec3<f32>(x_3571, x_3571, x_3571) * vec3<f32>(x_3573.x, x_3573.y, x_3573.z));
  let x_3576 : vec4<f32> = u_xlat4;
  u_xlat4 = vec4<f32>(x_3575.x, x_3575.y, x_3575.z, x_3576.w);
  let x_3578 : vec4<f32> = u_xlat7;
  let x_3581 : vec4<f32> = x_66.x_MainLightPosition;
  let x_3583 : vec3<f32> = (vec3<f32>(x_3578.x, x_3578.y, x_3578.z) + vec3<f32>(x_3581.x, x_3581.y, x_3581.z));
  let x_3584 : vec4<f32> = u_xlat8;
  u_xlat8 = vec4<f32>(x_3583.x, x_3583.y, x_3583.z, x_3584.w);
  let x_3586 : vec4<f32> = u_xlat8;
  let x_3588 : vec4<f32> = u_xlat8;
  u_xlat66 = dot(vec3<f32>(x_3586.x, x_3586.y, x_3586.z), vec3<f32>(x_3588.x, x_3588.y, x_3588.z));
  let x_3591 : f32 = u_xlat66;
  u_xlat66 = max(x_3591, 1.17549435e-37f);
  let x_3594 : f32 = u_xlat66;
  u_xlat66 = inverseSqrt(x_3594);
  let x_3596 : f32 = u_xlat66;
  let x_3598 : vec4<f32> = u_xlat8;
  let x_3600 : vec3<f32> = (vec3<f32>(x_3596, x_3596, x_3596) * vec3<f32>(x_3598.x, x_3598.y, x_3598.z));
  let x_3601 : vec4<f32> = u_xlat8;
  u_xlat8 = vec4<f32>(x_3600.x, x_3600.y, x_3600.z, x_3601.w);
  let x_3603 : vec4<f32> = u_xlat6;
  let x_3605 : vec4<f32> = u_xlat8;
  u_xlat66 = dot(vec3<f32>(x_3603.x, x_3603.y, x_3603.z), vec3<f32>(x_3605.x, x_3605.y, x_3605.z));
  let x_3608 : f32 = u_xlat66;
  u_xlat66 = clamp(x_3608, 0.0f, 1.0f);
  let x_3611 : vec4<f32> = x_66.x_MainLightPosition;
  let x_3613 : vec4<f32> = u_xlat8;
  u_xlat67 = dot(vec3<f32>(x_3611.x, x_3611.y, x_3611.z), vec3<f32>(x_3613.x, x_3613.y, x_3613.z));
  let x_3616 : f32 = u_xlat67;
  u_xlat67 = clamp(x_3616, 0.0f, 1.0f);
  let x_3618 : f32 = u_xlat66;
  let x_3619 : f32 = u_xlat66;
  u_xlat66 = (x_3618 * x_3619);
  let x_3621 : f32 = u_xlat66;
  let x_3623 : f32 = u_xlat23.x;
  u_xlat66 = ((x_3621 * x_3623) + 1.000010014f);
  let x_3627 : f32 = u_xlat67;
  let x_3628 : f32 = u_xlat67;
  u_xlat67 = (x_3627 * x_3628);
  let x_3630 : f32 = u_xlat66;
  let x_3631 : f32 = u_xlat66;
  u_xlat66 = (x_3630 * x_3631);
  let x_3633 : f32 = u_xlat67;
  u_xlat67 = max(x_3633, 0.100000001f);
  let x_3636 : f32 = u_xlat66;
  let x_3637 : f32 = u_xlat67;
  u_xlat66 = (x_3636 * x_3637);
  let x_3640 : f32 = u_xlat27.x;
  let x_3641 : f32 = u_xlat66;
  u_xlat66 = (x_3640 * x_3641);
  let x_3643 : f32 = u_xlat68;
  let x_3644 : f32 = u_xlat66;
  u_xlat66 = (x_3643 / x_3644);
  let x_3646 : f32 = u_xlat66;
  let x_3650 : vec3<f32> = u_xlat2;
  let x_3651 : vec3<f32> = ((vec3<f32>(x_3646, x_3646, x_3646) * vec3<f32>(0.039999999f, 0.039999999f, 0.039999999f)) + x_3650);
  let x_3652 : vec4<f32> = u_xlat8;
  u_xlat8 = vec4<f32>(x_3651.x, x_3651.y, x_3651.z, x_3652.w);
  let x_3654 : vec4<f32> = u_xlat4;
  let x_3656 : vec4<f32> = u_xlat8;
  let x_3658 : vec3<f32> = (vec3<f32>(x_3654.x, x_3654.y, x_3654.z) * vec3<f32>(x_3656.x, x_3656.y, x_3656.z));
  let x_3659 : vec4<f32> = u_xlat4;
  u_xlat4 = vec4<f32>(x_3658.x, x_3658.y, x_3658.z, x_3659.w);
  let x_3662 : f32 = x_66.x_AdditionalLightsCount.x;
  let x_3664 : f32 = x_1752.unity_LightData.y;
  u_xlat66 = min(x_3662, x_3664);
  let x_3666 : f32 = u_xlat66;
  u_xlatu66 = bitcast<u32>(i32(x_3666));
  let x_3670 : f32 = x_3276.x_AdditionalLightsCookieAtlasTextureFormat;
  let x_3672 : f32 = x_3276.x_AdditionalLightsCookieAtlasTextureFormat;
  let x_3674 : f32 = x_3276.x_AdditionalLightsCookieAtlasTextureFormat;
  let x_3676 : f32 = x_3276.x_AdditionalLightsCookieAtlasTextureFormat;
  let x_3677 : vec4<f32> = vec4<f32>(x_3670, x_3672, x_3674, x_3676);
  let x_3683 : vec4<bool> = (vec4<f32>(x_3677.x, x_3677.y, x_3677.z, x_3677.w) == vec4<f32>(0.0f, 1.0f, 0.0f, 0.0f));
  u_xlatb8 = vec2<bool>(x_3683.x, x_3683.y);
  u_xlat9.x = 0.0f;
  u_xlat9.y = 0.0f;
  u_xlat9.z = 0.0f;
  u_xlatu_loop_1 = 0u;
  loop {
    let x_3694 : u32 = u_xlatu_loop_1;
    let x_3695 : u32 = u_xlatu66;
    if ((x_3694 < x_3695)) {
    } else {
      break;
    }
    let x_3698 : u32 = u_xlatu_loop_1;
    u_xlatu69 = (x_3698 >> 2u);
    let x_3701 : u32 = u_xlatu_loop_1;
    u_xlati70 = bitcast<i32>((x_3701 & 3u));
    let x_3705 : u32 = u_xlatu69;
    let x_3708 : vec4<f32> = x_1752.unity_LightIndices[bitcast<i32>(x_3705)];
    let x_3718 : i32 = u_xlati70;
    indexable = array<vec4<u32>, 4u>(vec4<u32>(1065353216u, 0u, 0u, 0u), vec4<u32>(0u, 1065353216u, 0u, 0u), vec4<u32>(0u, 0u, 1065353216u, 0u), vec4<u32>(0u, 0u, 0u, 1065353216u));
    let x_3723 : vec4<u32> = indexable[x_3718];
    u_xlat69 = dot(x_3708, bitcast<vec4<f32>>(x_3723));
    let x_3726 : f32 = u_xlat69;
    u_xlatu69 = bitcast<u32>(i32(x_3726));
    let x_3729 : vec3<f32> = vs_INTERP0;
    let x_3741 : u32 = u_xlatu69;
    let x_3744 : vec4<f32> = x_3740.x_AdditionalLightsPosition[bitcast<i32>(x_3741)];
    let x_3747 : u32 = u_xlatu69;
    let x_3750 : vec4<f32> = x_3740.x_AdditionalLightsPosition[bitcast<i32>(x_3747)];
    let x_3752 : vec3<f32> = ((-(x_3729) * vec3<f32>(x_3744.w, x_3744.w, x_3744.w)) + vec3<f32>(x_3750.x, x_3750.y, x_3750.z));
    let x_3753 : vec4<f32> = u_xlat10;
    u_xlat10 = vec4<f32>(x_3752.x, x_3752.y, x_3752.z, x_3753.w);
    let x_3755 : vec4<f32> = u_xlat10;
    let x_3757 : vec4<f32> = u_xlat10;
    u_xlat70 = dot(vec3<f32>(x_3755.x, x_3755.y, x_3755.z), vec3<f32>(x_3757.x, x_3757.y, x_3757.z));
    let x_3760 : f32 = u_xlat70;
    u_xlat70 = max(x_3760, 6.10351562e-05f);
    let x_3763 : f32 = u_xlat70;
    u_xlat5.x = inverseSqrt(x_3763);
    let x_3766 : vec4<f32> = u_xlat5;
    let x_3768 : vec4<f32> = u_xlat10;
    let x_3770 : vec3<f32> = (vec3<f32>(x_3766.x, x_3766.x, x_3766.x) * vec3<f32>(x_3768.x, x_3768.y, x_3768.z));
    let x_3771 : vec4<f32> = u_xlat11;
    u_xlat11 = vec4<f32>(x_3770.x, x_3770.y, x_3770.z, x_3771.w);
    let x_3773 : f32 = u_xlat70;
    u_xlat72 = (1.0f / x_3773);
    let x_3775 : f32 = u_xlat70;
    let x_3776 : u32 = u_xlatu69;
    let x_3779 : f32 = x_3740.x_AdditionalLightsAttenuation[bitcast<i32>(x_3776)].x;
    u_xlat70 = (x_3775 * x_3779);
    let x_3781 : f32 = u_xlat70;
    let x_3783 : f32 = u_xlat70;
    u_xlat70 = ((-(x_3781) * x_3783) + 1.0f);
    let x_3786 : f32 = u_xlat70;
    u_xlat70 = max(x_3786, 0.0f);
    let x_3788 : f32 = u_xlat70;
    let x_3789 : f32 = u_xlat70;
    u_xlat70 = (x_3788 * x_3789);
    let x_3791 : f32 = u_xlat70;
    let x_3792 : f32 = u_xlat72;
    u_xlat70 = (x_3791 * x_3792);
    let x_3794 : u32 = u_xlatu69;
    let x_3797 : vec4<f32> = x_3740.x_AdditionalLightsSpotDir[bitcast<i32>(x_3794)];
    let x_3799 : vec4<f32> = u_xlat11;
    u_xlat72 = dot(vec3<f32>(x_3797.x, x_3797.y, x_3797.z), vec3<f32>(x_3799.x, x_3799.y, x_3799.z));
    let x_3802 : f32 = u_xlat72;
    let x_3803 : u32 = u_xlatu69;
    let x_3806 : f32 = x_3740.x_AdditionalLightsAttenuation[bitcast<i32>(x_3803)].z;
    let x_3808 : u32 = u_xlatu69;
    let x_3811 : f32 = x_3740.x_AdditionalLightsAttenuation[bitcast<i32>(x_3808)].w;
    u_xlat72 = ((x_3802 * x_3806) + x_3811);
    let x_3813 : f32 = u_xlat72;
    u_xlat72 = clamp(x_3813, 0.0f, 1.0f);
    let x_3815 : f32 = u_xlat72;
    let x_3816 : f32 = u_xlat72;
    u_xlat72 = (x_3815 * x_3816);
    let x_3818 : f32 = u_xlat70;
    let x_3819 : f32 = u_xlat72;
    u_xlat70 = (x_3818 * x_3819);
    let x_3822 : u32 = u_xlatu69;
    u_xlatu72 = (x_3822 >> 5u);
    let x_3825 : u32 = u_xlatu69;
    u_xlati73 = (1i << bitcast<u32>((bitcast<i32>(x_3825) & 31i)));
    let x_3831 : i32 = u_xlati73;
    let x_3833 : u32 = u_xlatu72;
    let x_3836 : f32 = x_3276.x_AdditionalLightsCookieEnableBits[bitcast<i32>(x_3833)].el;
    u_xlati72 = bitcast<i32>((bitcast<u32>(x_3831) & bitcast<u32>(x_3836)));
    let x_3840 : i32 = u_xlati72;
    if ((x_3840 != 0i)) {
      let x_3850 : u32 = u_xlatu69;
      let x_3853 : f32 = x_3849.x_AdditionalLightsLightTypes[bitcast<i32>(x_3850)].el;
      u_xlati72 = i32(x_3853);
      let x_3855 : i32 = u_xlati72;
      u_xlati73 = select(1i, 0i, (x_3855 != 0i));
      let x_3859 : u32 = u_xlatu69;
      u_xlati52 = (bitcast<i32>(x_3859) << bitcast<u32>(2i));
      let x_3862 : i32 = u_xlati73;
      if ((x_3862 != 0i)) {
        let x_3866 : vec3<f32> = vs_INTERP0;
        let x_3868 : i32 = u_xlati52;
        let x_3871 : i32 = u_xlati52;
        let x_3875 : vec4<f32> = x_3849.x_AdditionalLightsWorldToLights[((x_3868 + 1i) / 4i)][((x_3871 + 1i) % 4i)];
        let x_3877 : vec3<f32> = (vec3<f32>(x_3866.y, x_3866.y, x_3866.y) * vec3<f32>(x_3875.x, x_3875.y, x_3875.w));
        let x_3878 : vec4<f32> = u_xlat12;
        u_xlat12 = vec4<f32>(x_3877.x, x_3877.y, x_3877.z, x_3878.w);
        let x_3880 : i32 = u_xlati52;
        let x_3882 : i32 = u_xlati52;
        let x_3885 : vec4<f32> = x_3849.x_AdditionalLightsWorldToLights[(x_3880 / 4i)][(x_3882 % 4i)];
        let x_3887 : vec3<f32> = vs_INTERP0;
        let x_3890 : vec4<f32> = u_xlat12;
        let x_3892 : vec3<f32> = ((vec3<f32>(x_3885.x, x_3885.y, x_3885.w) * vec3<f32>(x_3887.x, x_3887.x, x_3887.x)) + vec3<f32>(x_3890.x, x_3890.y, x_3890.z));
        let x_3893 : vec4<f32> = u_xlat12;
        u_xlat12 = vec4<f32>(x_3892.x, x_3892.y, x_3892.z, x_3893.w);
        let x_3895 : i32 = u_xlati52;
        let x_3898 : i32 = u_xlati52;
        let x_3902 : vec4<f32> = x_3849.x_AdditionalLightsWorldToLights[((x_3895 + 2i) / 4i)][((x_3898 + 2i) % 4i)];
        let x_3904 : vec3<f32> = vs_INTERP0;
        let x_3907 : vec4<f32> = u_xlat12;
        let x_3909 : vec3<f32> = ((vec3<f32>(x_3902.x, x_3902.y, x_3902.w) * vec3<f32>(x_3904.z, x_3904.z, x_3904.z)) + vec3<f32>(x_3907.x, x_3907.y, x_3907.z));
        let x_3910 : vec4<f32> = u_xlat12;
        u_xlat12 = vec4<f32>(x_3909.x, x_3909.y, x_3909.z, x_3910.w);
        let x_3912 : vec4<f32> = u_xlat12;
        let x_3914 : i32 = u_xlati52;
        let x_3917 : i32 = u_xlati52;
        let x_3921 : vec4<f32> = x_3849.x_AdditionalLightsWorldToLights[((x_3914 + 3i) / 4i)][((x_3917 + 3i) % 4i)];
        let x_3923 : vec3<f32> = (vec3<f32>(x_3912.x, x_3912.y, x_3912.z) + vec3<f32>(x_3921.x, x_3921.y, x_3921.w));
        let x_3924 : vec4<f32> = u_xlat12;
        u_xlat12 = vec4<f32>(x_3923.x, x_3923.y, x_3923.z, x_3924.w);
        let x_3926 : vec4<f32> = u_xlat12;
        let x_3928 : vec4<f32> = u_xlat12;
        let x_3930 : vec2<f32> = (vec2<f32>(x_3926.x, x_3926.y) / vec2<f32>(x_3928.z, x_3928.z));
        let x_3931 : vec4<f32> = u_xlat12;
        u_xlat12 = vec4<f32>(x_3930.x, x_3930.y, x_3931.z, x_3931.w);
        let x_3933 : vec4<f32> = u_xlat12;
        let x_3936 : vec2<f32> = ((vec2<f32>(x_3933.x, x_3933.y) * vec2<f32>(0.5f, 0.5f)) + vec2<f32>(0.5f, 0.5f));
        let x_3937 : vec4<f32> = u_xlat12;
        u_xlat12 = vec4<f32>(x_3936.x, x_3936.y, x_3937.z, x_3937.w);
        let x_3939 : vec4<f32> = u_xlat12;
        let x_3943 : vec2<f32> = clamp(vec2<f32>(x_3939.x, x_3939.y), vec2<f32>(0.0f, 0.0f), vec2<f32>(1.0f, 1.0f));
        let x_3944 : vec4<f32> = u_xlat12;
        u_xlat12 = vec4<f32>(x_3943.x, x_3943.y, x_3944.z, x_3944.w);
        let x_3946 : u32 = u_xlatu69;
        let x_3949 : vec4<f32> = x_3849.x_AdditionalLightsCookieAtlasUVRects[bitcast<i32>(x_3946)];
        let x_3951 : vec4<f32> = u_xlat12;
        let x_3954 : u32 = u_xlatu69;
        let x_3957 : vec4<f32> = x_3849.x_AdditionalLightsCookieAtlasUVRects[bitcast<i32>(x_3954)];
        let x_3959 : vec2<f32> = ((vec2<f32>(x_3949.x, x_3949.y) * vec2<f32>(x_3951.x, x_3951.y)) + vec2<f32>(x_3957.z, x_3957.w));
        let x_3960 : vec4<f32> = u_xlat12;
        u_xlat12 = vec4<f32>(x_3959.x, x_3959.y, x_3960.z, x_3960.w);
      } else {
        let x_3963 : i32 = u_xlati72;
        u_xlatb72 = (x_3963 == 1i);
        let x_3965 : bool = u_xlatb72;
        u_xlati72 = select(0i, 1i, x_3965);
        let x_3967 : i32 = u_xlati72;
        if ((x_3967 != 0i)) {
          let x_3972 : vec3<f32> = vs_INTERP0;
          let x_3974 : i32 = u_xlati52;
          let x_3977 : i32 = u_xlati52;
          let x_3981 : vec4<f32> = x_3849.x_AdditionalLightsWorldToLights[((x_3974 + 1i) / 4i)][((x_3977 + 1i) % 4i)];
          u_xlat56 = (vec2<f32>(x_3972.y, x_3972.y) * vec2<f32>(x_3981.x, x_3981.y));
          let x_3984 : i32 = u_xlati52;
          let x_3986 : i32 = u_xlati52;
          let x_3989 : vec4<f32> = x_3849.x_AdditionalLightsWorldToLights[(x_3984 / 4i)][(x_3986 % 4i)];
          let x_3991 : vec3<f32> = vs_INTERP0;
          let x_3994 : vec2<f32> = u_xlat56;
          u_xlat56 = ((vec2<f32>(x_3989.x, x_3989.y) * vec2<f32>(x_3991.x, x_3991.x)) + x_3994);
          let x_3996 : i32 = u_xlati52;
          let x_3999 : i32 = u_xlati52;
          let x_4003 : vec4<f32> = x_3849.x_AdditionalLightsWorldToLights[((x_3996 + 2i) / 4i)][((x_3999 + 2i) % 4i)];
          let x_4005 : vec3<f32> = vs_INTERP0;
          let x_4008 : vec2<f32> = u_xlat56;
          u_xlat56 = ((vec2<f32>(x_4003.x, x_4003.y) * vec2<f32>(x_4005.z, x_4005.z)) + x_4008);
          let x_4010 : vec2<f32> = u_xlat56;
          let x_4011 : i32 = u_xlati52;
          let x_4014 : i32 = u_xlati52;
          let x_4018 : vec4<f32> = x_3849.x_AdditionalLightsWorldToLights[((x_4011 + 3i) / 4i)][((x_4014 + 3i) % 4i)];
          u_xlat56 = (x_4010 + vec2<f32>(x_4018.x, x_4018.y));
          let x_4021 : vec2<f32> = u_xlat56;
          u_xlat56 = ((x_4021 * vec2<f32>(0.5f, 0.5f)) + vec2<f32>(0.5f, 0.5f));
          let x_4024 : vec2<f32> = u_xlat56;
          u_xlat56 = fract(x_4024);
          let x_4026 : u32 = u_xlatu69;
          let x_4029 : vec4<f32> = x_3849.x_AdditionalLightsCookieAtlasUVRects[bitcast<i32>(x_4026)];
          let x_4031 : vec2<f32> = u_xlat56;
          let x_4033 : u32 = u_xlatu69;
          let x_4036 : vec4<f32> = x_3849.x_AdditionalLightsCookieAtlasUVRects[bitcast<i32>(x_4033)];
          let x_4038 : vec2<f32> = ((vec2<f32>(x_4029.x, x_4029.y) * x_4031) + vec2<f32>(x_4036.z, x_4036.w));
          let x_4039 : vec4<f32> = u_xlat12;
          u_xlat12 = vec4<f32>(x_4038.x, x_4038.y, x_4039.z, x_4039.w);
        } else {
          let x_4042 : vec3<f32> = vs_INTERP0;
          let x_4044 : i32 = u_xlati52;
          let x_4047 : i32 = u_xlati52;
          let x_4051 : vec4<f32> = x_3849.x_AdditionalLightsWorldToLights[((x_4044 + 1i) / 4i)][((x_4047 + 1i) % 4i)];
          u_xlat13 = (vec4<f32>(x_4042.y, x_4042.y, x_4042.y, x_4042.y) * x_4051);
          let x_4053 : i32 = u_xlati52;
          let x_4055 : i32 = u_xlati52;
          let x_4058 : vec4<f32> = x_3849.x_AdditionalLightsWorldToLights[(x_4053 / 4i)][(x_4055 % 4i)];
          let x_4059 : vec3<f32> = vs_INTERP0;
          let x_4062 : vec4<f32> = u_xlat13;
          u_xlat13 = ((x_4058 * vec4<f32>(x_4059.x, x_4059.x, x_4059.x, x_4059.x)) + x_4062);
          let x_4064 : i32 = u_xlati52;
          let x_4067 : i32 = u_xlati52;
          let x_4071 : vec4<f32> = x_3849.x_AdditionalLightsWorldToLights[((x_4064 + 2i) / 4i)][((x_4067 + 2i) % 4i)];
          let x_4072 : vec3<f32> = vs_INTERP0;
          let x_4075 : vec4<f32> = u_xlat13;
          u_xlat13 = ((x_4071 * vec4<f32>(x_4072.z, x_4072.z, x_4072.z, x_4072.z)) + x_4075);
          let x_4077 : vec4<f32> = u_xlat13;
          let x_4078 : i32 = u_xlati52;
          let x_4081 : i32 = u_xlati52;
          let x_4085 : vec4<f32> = x_3849.x_AdditionalLightsWorldToLights[((x_4078 + 3i) / 4i)][((x_4081 + 3i) % 4i)];
          u_xlat13 = (x_4077 + x_4085);
          let x_4087 : vec4<f32> = u_xlat13;
          let x_4089 : vec4<f32> = u_xlat13;
          let x_4091 : vec3<f32> = (vec3<f32>(x_4087.x, x_4087.y, x_4087.z) / vec3<f32>(x_4089.w, x_4089.w, x_4089.w));
          let x_4092 : vec4<f32> = u_xlat13;
          u_xlat13 = vec4<f32>(x_4091.x, x_4091.y, x_4091.z, x_4092.w);
          let x_4094 : vec4<f32> = u_xlat13;
          let x_4096 : vec4<f32> = u_xlat13;
          u_xlat72 = dot(vec3<f32>(x_4094.x, x_4094.y, x_4094.z), vec3<f32>(x_4096.x, x_4096.y, x_4096.z));
          let x_4099 : f32 = u_xlat72;
          u_xlat72 = inverseSqrt(x_4099);
          let x_4101 : f32 = u_xlat72;
          let x_4103 : vec4<f32> = u_xlat13;
          let x_4105 : vec3<f32> = (vec3<f32>(x_4101, x_4101, x_4101) * vec3<f32>(x_4103.x, x_4103.y, x_4103.z));
          let x_4106 : vec4<f32> = u_xlat13;
          u_xlat13 = vec4<f32>(x_4105.x, x_4105.y, x_4105.z, x_4106.w);
          let x_4108 : vec4<f32> = u_xlat13;
          u_xlat72 = dot(abs(vec3<f32>(x_4108.x, x_4108.y, x_4108.z)), vec3<f32>(1.0f, 1.0f, 1.0f));
          let x_4113 : f32 = u_xlat72;
          u_xlat72 = max(x_4113, 0.000001f);
          let x_4116 : f32 = u_xlat72;
          u_xlat72 = (1.0f / x_4116);
          let x_4118 : f32 = u_xlat72;
          let x_4120 : vec4<f32> = u_xlat13;
          let x_4122 : vec3<f32> = (vec3<f32>(x_4118, x_4118, x_4118) * vec3<f32>(x_4120.z, x_4120.x, x_4120.y));
          let x_4123 : vec4<f32> = u_xlat14;
          u_xlat14 = vec4<f32>(x_4122.x, x_4122.y, x_4122.z, x_4123.w);
          let x_4126 : f32 = u_xlat14.x;
          u_xlat14.x = -(x_4126);
          let x_4130 : f32 = u_xlat14.x;
          u_xlat14.x = clamp(x_4130, 0.0f, 1.0f);
          let x_4134 : vec4<f32> = u_xlat14;
          let x_4137 : vec4<bool> = (vec4<f32>(x_4134.y, x_4134.z, x_4134.y, x_4134.z) >= vec4<f32>(0.0f, 0.0f, 0.0f, 0.0f));
          u_xlatb52 = vec2<bool>(x_4137.x, x_4137.y);
          let x_4140 : bool = u_xlatb52.x;
          if (x_4140) {
            let x_4145 : f32 = u_xlat14.x;
            x_4141 = x_4145;
          } else {
            let x_4148 : f32 = u_xlat14.x;
            x_4141 = -(x_4148);
          }
          let x_4150 : f32 = x_4141;
          u_xlat52.x = x_4150;
          let x_4153 : bool = u_xlatb52.y;
          if (x_4153) {
            let x_4158 : f32 = u_xlat14.x;
            x_4154 = x_4158;
          } else {
            let x_4161 : f32 = u_xlat14.x;
            x_4154 = -(x_4161);
          }
          let x_4163 : f32 = x_4154;
          u_xlat52.y = x_4163;
          let x_4165 : vec4<f32> = u_xlat13;
          let x_4167 : f32 = u_xlat72;
          let x_4170 : vec2<f32> = u_xlat52;
          u_xlat52 = ((vec2<f32>(x_4165.x, x_4165.y) * vec2<f32>(x_4167, x_4167)) + x_4170);
          let x_4172 : vec2<f32> = u_xlat52;
          u_xlat52 = ((x_4172 * vec2<f32>(0.5f, 0.5f)) + vec2<f32>(0.5f, 0.5f));
          let x_4175 : vec2<f32> = u_xlat52;
          u_xlat52 = clamp(x_4175, vec2<f32>(0.0f, 0.0f), vec2<f32>(1.0f, 1.0f));
          let x_4179 : u32 = u_xlatu69;
          let x_4182 : vec4<f32> = x_3849.x_AdditionalLightsCookieAtlasUVRects[bitcast<i32>(x_4179)];
          let x_4184 : vec2<f32> = u_xlat52;
          let x_4186 : u32 = u_xlatu69;
          let x_4189 : vec4<f32> = x_3849.x_AdditionalLightsCookieAtlasUVRects[bitcast<i32>(x_4186)];
          let x_4191 : vec2<f32> = ((vec2<f32>(x_4182.x, x_4182.y) * x_4184) + vec2<f32>(x_4189.z, x_4189.w));
          let x_4192 : vec4<f32> = u_xlat12;
          u_xlat12 = vec4<f32>(x_4191.x, x_4191.y, x_4192.z, x_4192.w);
        }
      }
      let x_4199 : vec4<f32> = u_xlat12;
      let x_4202 : f32 = x_66.x_GlobalMipBias.x;
      let x_4203 : vec4<f32> = textureSampleBias(x_AdditionalLightsCookieAtlasTexture, sampler_AdditionalLightsCookieAtlasTexture, vec2<f32>(x_4199.x, x_4199.y), x_4202);
      u_xlat12 = x_4203;
      let x_4205 : bool = u_xlatb8.y;
      if (x_4205) {
        let x_4210 : f32 = u_xlat12.w;
        x_4206 = x_4210;
      } else {
        let x_4213 : f32 = u_xlat12.x;
        x_4206 = x_4213;
      }
      let x_4214 : f32 = x_4206;
      u_xlat72 = x_4214;
      let x_4216 : bool = u_xlatb8.x;
      if (x_4216) {
        let x_4220 : vec4<f32> = u_xlat12;
        x_4217 = vec3<f32>(x_4220.x, x_4220.y, x_4220.z);
      } else {
        let x_4223 : f32 = u_xlat72;
        x_4217 = vec3<f32>(x_4223, x_4223, x_4223);
      }
      let x_4225 : vec3<f32> = x_4217;
      let x_4226 : vec4<f32> = u_xlat12;
      u_xlat12 = vec4<f32>(x_4225.x, x_4225.y, x_4225.z, x_4226.w);
    } else {
      u_xlat12.x = 1.0f;
      u_xlat12.y = 1.0f;
      u_xlat12.z = 1.0f;
    }
    let x_4232 : vec4<f32> = u_xlat12;
    let x_4234 : u32 = u_xlatu69;
    let x_4237 : vec4<f32> = x_3740.x_AdditionalLightsColor[bitcast<i32>(x_4234)];
    let x_4239 : vec3<f32> = (vec3<f32>(x_4232.x, x_4232.y, x_4232.z) * vec3<f32>(x_4237.x, x_4237.y, x_4237.z));
    let x_4240 : vec4<f32> = u_xlat12;
    u_xlat12 = vec4<f32>(x_4239.x, x_4239.y, x_4239.z, x_4240.w);
    let x_4242 : f32 = u_xlat71;
    let x_4244 : vec4<f32> = u_xlat12;
    let x_4246 : vec3<f32> = (vec3<f32>(x_4242, x_4242, x_4242) * vec3<f32>(x_4244.x, x_4244.y, x_4244.z));
    let x_4247 : vec4<f32> = u_xlat12;
    u_xlat12 = vec4<f32>(x_4246.x, x_4246.y, x_4246.z, x_4247.w);
    let x_4249 : vec4<f32> = u_xlat6;
    let x_4251 : vec4<f32> = u_xlat11;
    u_xlat69 = dot(vec3<f32>(x_4249.x, x_4249.y, x_4249.z), vec3<f32>(x_4251.x, x_4251.y, x_4251.z));
    let x_4254 : f32 = u_xlat69;
    u_xlat69 = clamp(x_4254, 0.0f, 1.0f);
    let x_4256 : f32 = u_xlat69;
    let x_4257 : f32 = u_xlat70;
    u_xlat69 = (x_4256 * x_4257);
    let x_4259 : f32 = u_xlat69;
    let x_4261 : vec4<f32> = u_xlat12;
    let x_4263 : vec3<f32> = (vec3<f32>(x_4259, x_4259, x_4259) * vec3<f32>(x_4261.x, x_4261.y, x_4261.z));
    let x_4264 : vec4<f32> = u_xlat12;
    u_xlat12 = vec4<f32>(x_4263.x, x_4263.y, x_4263.z, x_4264.w);
    let x_4266 : vec4<f32> = u_xlat10;
    let x_4268 : vec4<f32> = u_xlat5;
    let x_4271 : vec4<f32> = u_xlat7;
    let x_4273 : vec3<f32> = ((vec3<f32>(x_4266.x, x_4266.y, x_4266.z) * vec3<f32>(x_4268.x, x_4268.x, x_4268.x)) + vec3<f32>(x_4271.x, x_4271.y, x_4271.z));
    let x_4274 : vec4<f32> = u_xlat10;
    u_xlat10 = vec4<f32>(x_4273.x, x_4273.y, x_4273.z, x_4274.w);
    let x_4276 : vec4<f32> = u_xlat10;
    let x_4278 : vec4<f32> = u_xlat10;
    u_xlat69 = dot(vec3<f32>(x_4276.x, x_4276.y, x_4276.z), vec3<f32>(x_4278.x, x_4278.y, x_4278.z));
    let x_4281 : f32 = u_xlat69;
    u_xlat69 = max(x_4281, 1.17549435e-37f);
    let x_4283 : f32 = u_xlat69;
    u_xlat69 = inverseSqrt(x_4283);
    let x_4285 : f32 = u_xlat69;
    let x_4287 : vec4<f32> = u_xlat10;
    let x_4289 : vec3<f32> = (vec3<f32>(x_4285, x_4285, x_4285) * vec3<f32>(x_4287.x, x_4287.y, x_4287.z));
    let x_4290 : vec4<f32> = u_xlat10;
    u_xlat10 = vec4<f32>(x_4289.x, x_4289.y, x_4289.z, x_4290.w);
    let x_4292 : vec4<f32> = u_xlat6;
    let x_4294 : vec4<f32> = u_xlat10;
    u_xlat69 = dot(vec3<f32>(x_4292.x, x_4292.y, x_4292.z), vec3<f32>(x_4294.x, x_4294.y, x_4294.z));
    let x_4297 : f32 = u_xlat69;
    u_xlat69 = clamp(x_4297, 0.0f, 1.0f);
    let x_4299 : vec4<f32> = u_xlat11;
    let x_4301 : vec4<f32> = u_xlat10;
    u_xlat70 = dot(vec3<f32>(x_4299.x, x_4299.y, x_4299.z), vec3<f32>(x_4301.x, x_4301.y, x_4301.z));
    let x_4304 : f32 = u_xlat70;
    u_xlat70 = clamp(x_4304, 0.0f, 1.0f);
    let x_4306 : f32 = u_xlat69;
    let x_4307 : f32 = u_xlat69;
    u_xlat69 = (x_4306 * x_4307);
    let x_4309 : f32 = u_xlat69;
    let x_4311 : f32 = u_xlat23.x;
    u_xlat69 = ((x_4309 * x_4311) + 1.000010014f);
    let x_4314 : f32 = u_xlat70;
    let x_4315 : f32 = u_xlat70;
    u_xlat70 = (x_4314 * x_4315);
    let x_4317 : f32 = u_xlat69;
    let x_4318 : f32 = u_xlat69;
    u_xlat69 = (x_4317 * x_4318);
    let x_4320 : f32 = u_xlat70;
    u_xlat70 = max(x_4320, 0.100000001f);
    let x_4322 : f32 = u_xlat69;
    let x_4323 : f32 = u_xlat70;
    u_xlat69 = (x_4322 * x_4323);
    let x_4326 : f32 = u_xlat27.x;
    let x_4327 : f32 = u_xlat69;
    u_xlat69 = (x_4326 * x_4327);
    let x_4329 : f32 = u_xlat68;
    let x_4330 : f32 = u_xlat69;
    u_xlat69 = (x_4329 / x_4330);
    let x_4332 : f32 = u_xlat69;
    let x_4335 : vec3<f32> = u_xlat2;
    let x_4336 : vec3<f32> = ((vec3<f32>(x_4332, x_4332, x_4332) * vec3<f32>(0.039999999f, 0.039999999f, 0.039999999f)) + x_4335);
    let x_4337 : vec4<f32> = u_xlat10;
    u_xlat10 = vec4<f32>(x_4336.x, x_4336.y, x_4336.z, x_4337.w);
    let x_4339 : vec4<f32> = u_xlat10;
    let x_4341 : vec4<f32> = u_xlat12;
    let x_4344 : vec4<f32> = u_xlat9;
    let x_4346 : vec3<f32> = ((vec3<f32>(x_4339.x, x_4339.y, x_4339.z) * vec3<f32>(x_4341.x, x_4341.y, x_4341.z)) + vec3<f32>(x_4344.x, x_4344.y, x_4344.z));
    let x_4347 : vec4<f32> = u_xlat9;
    u_xlat9 = vec4<f32>(x_4346.x, x_4346.y, x_4346.z, x_4347.w);

    continuing {
      let x_4349 : u32 = u_xlatu_loop_1;
      u_xlatu_loop_1 = (x_4349 + bitcast<u32>(1i));
    }
  }
  let x_4351 : vec4<f32> = u_xlat3;
  let x_4353 : vec2<f32> = u_xlat49;
  let x_4356 : vec4<f32> = u_xlat4;
  u_xlat2 = ((vec3<f32>(x_4351.x, x_4351.y, x_4351.z) * vec3<f32>(x_4353.x, x_4353.x, x_4353.x)) + vec3<f32>(x_4356.x, x_4356.y, x_4356.z));
  let x_4359 : vec4<f32> = u_xlat9;
  let x_4361 : vec3<f32> = u_xlat2;
  u_xlat2 = (vec3<f32>(x_4359.x, x_4359.y, x_4359.z) + x_4361);
  let x_4365 : vec4<f32> = vs_INTERP4;
  let x_4367 : vec3<f32> = u_xlat0;
  let x_4369 : vec3<f32> = u_xlat2;
  let x_4370 : vec3<f32> = ((vec3<f32>(x_4365.w, x_4365.w, x_4365.w) * x_4367) + x_4369);
  let x_4371 : vec4<f32> = SV_Target0;
  SV_Target0 = vec4<f32>(x_4370.x, x_4370.y, x_4370.z, x_4371.w);
  let x_4373 : bool = u_xlatb45;
  if (x_4373) {
    let x_4378 : f32 = u_xlat1.x;
    x_4374 = x_4378;
  } else {
    x_4374 = 1.0f;
  }
  let x_4380 : f32 = x_4374;
  SV_Target0.w = x_4380;
  let x_4386 : u32 = x_66.x_RenderingLayerMaxInt;
  let x_4388 : f32 = x_1752.unity_RenderingLayer.x;
  u_xlatu0 = (x_4386 & bitcast<u32>(x_4388));
  let x_4391 : u32 = u_xlatu0;
  u_xlat0.x = f32(x_4391);
  let x_4396 : f32 = u_xlat0.x;
  let x_4398 : f32 = x_66.x_RenderingLayerRcpMaxInt;
  SV_Target1.x = (x_4396 * x_4398);
  let x_4402 : f32 = SV_Target1.x;
  SV_Target1.x = clamp(x_4402, 0.0f, 1.0f);
  let x_4405 : vec4<f32> = SV_Target1;
  SV_Target1 = vec4<f32>(x_4405.x, vec3<f32>(0.0f, 0.0f, 0.0f).x, vec3<f32>(0.0f, 0.0f, 0.0f).y, vec3<f32>(0.0f, 0.0f, 0.0f).z);
  return;
}

struct main_out {
  @location(0)
  SV_Target0_1 : vec4<f32>,
  @location(1)
  SV_Target1_1 : vec4<f32>,
}

@fragment
fn main(@builtin(position) gl_FragCoord_param : vec4<f32>, @location(1) vs_INTERP1_param : vec3<f32>, @location(3) vs_INTERP3_param : vec4<f32>, @location(4) vs_INTERP4_param : vec4<f32>, @location(0) vs_INTERP0_param : vec3<f32>, @location(2) vs_INTERP2_param : vec4<f32>) -> main_out {
  gl_FragCoord = gl_FragCoord_param;
  vs_INTERP1 = vs_INTERP1_param;
  vs_INTERP3 = vs_INTERP3_param;
  vs_INTERP4 = vs_INTERP4_param;
  vs_INTERP0 = vs_INTERP0_param;
  vs_INTERP2 = vs_INTERP2_param;
  main_1();
  return main_out(SV_Target0, SV_Target1);
}

