struct PGlobals {
  x_GlobalMipBias : vec2<f32>,
  @size(8)
  padding : u32,
  x_Lut_Params : vec4<f32>,
  x_UserLut_Params : vec4<f32>,
  x_Bloom_Params : vec4<f32>,
  x_Bloom_RGBM : f32,
  @size(12)
  padding_1 : u32,
  x_LensDirt_Params : vec4<f32>,
  x_LensDirt_Intensity : f32,
  @size(12)
  padding_2 : u32,
  x_Distortion_Params1 : vec4<f32>,
  x_Distortion_Params2 : vec4<f32>,
  x_Chroma_Params : f32,
  @size(12)
  padding_3 : u32,
  x_Vignette_Params1 : vec4<f32>,
  x_Vignette_Params2 : vec4<f32>,
  x_Grain_Params : vec2<f32>,
  @size(8)
  padding_4 : u32,
  x_Grain_TilingParams : vec4<f32>,
}

var<private> vs_TEXCOORD0 : vec2<f32>;

@group(1) @binding(0) var<uniform> x_25 : PGlobals;

@group(0) @binding(0) var x_BlitTexture : texture_2d<f32>;

@group(0) @binding(6) var sampler_LinearClamp : sampler;

@group(0) @binding(1) var x_Bloom_Texture : texture_2d<f32>;

@group(0) @binding(2) var x_LensDirt_Texture : texture_2d<f32>;

@group(0) @binding(5) var x_UserLut : texture_2d<f32>;

@group(0) @binding(4) var x_InternalLut : texture_2d<f32>;

@group(0) @binding(3) var x_Grain_Texture : texture_2d<f32>;

@group(0) @binding(7) var sampler_LinearRepeat : sampler;

var<private> SV_Target0 : vec4<f32>;

var<private> gl_FragCoord : vec4<f32>;

fn main_1() {
  var u_xlat0 : vec4<f32>;
  var u_xlat12 : vec2<f32>;
  var u_xlat1 : vec4<f32>;
  var u_xlatb7 : bool;
  var u_xlat13 : vec2<f32>;
  var u_xlat2 : vec4<f32>;
  var u_xlat3 : vec4<f32>;
  var u_xlat19 : f32;
  var u_xlat8 : f32;
  var u_xlat14 : f32;
  var u_xlat20 : f32;
  var u_xlatb3 : vec3<bool>;
  var u_xlatb1 : bool;
  var x_220 : f32;
  var u_xlat4 : vec2<f32>;
  var u_xlat5 : f32;
  var u_xlat16 : f32;
  var u_xlat22 : f32;
  var u_xlatb11 : bool;
  var x_442 : f32;
  var u_xlat6 : vec3<f32>;
  var u_xlat9 : f32;
  var u_xlatb4 : bool;
  var u_xlatb0 : vec3<bool>;
  var x_627 : f32;
  var u_xlatb18 : bool;
  var u_xlat18 : f32;
  var u_xlat7 : vec3<f32>;
  var u_xlatb6 : bool;
  var x_1035 : f32;
  var x_1044 : f32;
  var u_xlatb12 : vec2<bool>;
  var u_xlatb9 : bool;
  var x_1174 : f32;
  var u_xlatb19 : bool;
  var x_1225 : f32;
  var x_1252 : f32;
  var x_1276 : f32;
  var x_1287 : f32;
  var hlslcc_movcTemp : vec4<f32>;
  var x_1709 : f32;
  var x_1721 : f32;
  var x_1733 : f32;
  var x_1901 : f32;
  var x_1913 : f32;
  var x_1925 : f32;
  var u_xlat_precise_vec4 : vec4<f32>;
  var u_xlat_precise_ivec4 : vec4<i32>;
  var u_xlat_precise_bvec4 : vec4<bool>;
  var u_xlat_precise_uvec4 : vec4<u32>;
  let x_13 : vec2<f32> = vs_TEXCOORD0;
  let x_16 : vec2<f32> = (x_13 + vec2<f32>(-0.5f, -0.5f));
  let x_17 : vec4<f32> = u_xlat0;
  u_xlat0 = vec4<f32>(x_16.x, x_16.y, x_17.z, x_17.w);
  let x_21 : vec4<f32> = u_xlat0;
  let x_30 : vec4<f32> = x_25.x_Distortion_Params2;
  u_xlat12 = ((vec2<f32>(x_21.x, x_21.y) * vec2<f32>(x_30.z, x_30.z)) + vec2<f32>(0.5f, 0.5f));
  let x_36 : vec4<f32> = u_xlat0;
  let x_39 : vec4<f32> = x_25.x_Distortion_Params2;
  let x_44 : vec4<f32> = x_25.x_Distortion_Params1;
  let x_47 : vec2<f32> = ((vec2<f32>(x_36.x, x_36.y) * vec2<f32>(x_39.z, x_39.z)) + -(vec2<f32>(x_44.x, x_44.y)));
  let x_48 : vec4<f32> = u_xlat0;
  u_xlat0 = vec4<f32>(x_47.x, x_47.y, x_48.z, x_48.w);
  let x_50 : vec4<f32> = u_xlat0;
  let x_53 : vec4<f32> = x_25.x_Distortion_Params1;
  let x_55 : vec2<f32> = (vec2<f32>(x_50.x, x_50.y) * vec2<f32>(x_53.z, x_53.w));
  let x_56 : vec4<f32> = u_xlat0;
  u_xlat0 = vec4<f32>(x_55.x, x_55.y, x_56.z, x_56.w);
  let x_59 : vec4<f32> = u_xlat0;
  let x_61 : vec4<f32> = u_xlat0;
  u_xlat1.x = dot(vec2<f32>(x_59.x, x_59.y), vec2<f32>(x_61.x, x_61.y));
  let x_69 : f32 = u_xlat1.x;
  u_xlat1.x = sqrt(x_69);
  let x_79 : f32 = x_25.x_Distortion_Params2.w;
  u_xlatb7 = (0.0f < x_79);
  let x_81 : bool = u_xlatb7;
  if (x_81) {
    let x_85 : vec4<f32> = u_xlat1;
    let x_88 : vec4<f32> = x_25.x_Distortion_Params2;
    u_xlat13 = (vec2<f32>(x_85.x, x_85.x) * vec2<f32>(x_88.x, x_88.y));
    let x_93 : f32 = u_xlat13.x;
    u_xlat2.x = sin(x_93);
    let x_98 : f32 = u_xlat13.x;
    u_xlat3.x = cos(x_98);
    let x_102 : f32 = u_xlat2.x;
    let x_104 : f32 = u_xlat3.x;
    u_xlat13.x = (x_102 / x_104);
    let x_111 : f32 = u_xlat13.y;
    u_xlat19 = (1.0f / x_111);
    let x_114 : f32 = u_xlat13.x;
    let x_115 : f32 = u_xlat19;
    u_xlat13.x = ((x_114 * x_115) + -1.0f);
    let x_120 : vec4<f32> = u_xlat0;
    let x_122 : vec2<f32> = u_xlat13;
    let x_125 : vec2<f32> = u_xlat12;
    u_xlat13 = ((vec2<f32>(x_120.x, x_120.y) * vec2<f32>(x_122.x, x_122.x)) + x_125);
  } else {
    let x_129 : f32 = u_xlat1.x;
    u_xlat2.x = (1.0f / x_129);
    let x_133 : f32 = u_xlat2.x;
    let x_135 : f32 = x_25.x_Distortion_Params2.x;
    u_xlat2.x = (x_133 * x_135);
    let x_139 : f32 = u_xlat1.x;
    let x_141 : f32 = x_25.x_Distortion_Params2.y;
    u_xlat1.x = (x_139 * x_141);
    let x_146 : f32 = u_xlat1.x;
    u_xlat8 = min(abs(x_146), 1.0f);
    let x_151 : f32 = u_xlat1.x;
    u_xlat14 = max(abs(x_151), 1.0f);
    let x_154 : f32 = u_xlat14;
    u_xlat14 = (1.0f / x_154);
    let x_156 : f32 = u_xlat14;
    let x_157 : f32 = u_xlat8;
    u_xlat8 = (x_156 * x_157);
    let x_159 : f32 = u_xlat8;
    let x_160 : f32 = u_xlat8;
    u_xlat14 = (x_159 * x_160);
    let x_163 : f32 = u_xlat14;
    u_xlat20 = ((x_163 * 0.0208351f) + -0.085133001f);
    let x_168 : f32 = u_xlat14;
    let x_169 : f32 = u_xlat20;
    u_xlat20 = ((x_168 * x_169) + 0.180141002f);
    let x_173 : f32 = u_xlat14;
    let x_174 : f32 = u_xlat20;
    u_xlat20 = ((x_173 * x_174) + -0.330299497f);
    let x_178 : f32 = u_xlat14;
    let x_179 : f32 = u_xlat20;
    u_xlat14 = ((x_178 * x_179) + 0.999866009f);
    let x_183 : f32 = u_xlat14;
    let x_184 : f32 = u_xlat8;
    u_xlat20 = (x_183 * x_184);
    let x_190 : f32 = u_xlat1.x;
    u_xlatb3.x = (1.0f < abs(x_190));
    let x_194 : f32 = u_xlat20;
    u_xlat20 = ((x_194 * -2.0f) + 1.570796371f);
    let x_200 : bool = u_xlatb3.x;
    let x_201 : f32 = u_xlat20;
    u_xlat20 = select(0.0f, x_201, x_200);
    let x_203 : f32 = u_xlat8;
    let x_204 : f32 = u_xlat14;
    let x_206 : f32 = u_xlat20;
    u_xlat8 = ((x_203 * x_204) + x_206);
    let x_209 : f32 = u_xlat1.x;
    u_xlat1.x = min(x_209, 1.0f);
    let x_214 : f32 = u_xlat1.x;
    let x_216 : f32 = u_xlat1.x;
    u_xlatb1 = (x_214 < -(x_216));
    let x_219 : bool = u_xlatb1;
    if (x_219) {
      let x_223 : f32 = u_xlat8;
      x_220 = -(x_223);
    } else {
      let x_226 : f32 = u_xlat8;
      x_220 = x_226;
    }
    let x_227 : f32 = x_220;
    u_xlat1.x = x_227;
    let x_230 : f32 = u_xlat2.x;
    let x_232 : f32 = u_xlat1.x;
    u_xlat1.x = ((x_230 * x_232) + -1.0f);
    let x_236 : vec4<f32> = u_xlat0;
    let x_238 : vec4<f32> = u_xlat1;
    let x_241 : vec2<f32> = u_xlat12;
    u_xlat13 = ((vec2<f32>(x_236.x, x_236.y) * vec2<f32>(x_238.x, x_238.x)) + x_241);
  }
  let x_243 : vec2<f32> = vs_TEXCOORD0;
  u_xlat0 = ((vec4<f32>(x_243.x, x_243.y, x_243.x, x_243.y) * vec4<f32>(2.0f, 2.0f, 2.0f, 2.0f)) + vec4<f32>(-1.0f, -1.0f, -1.0f, -1.0f));
  let x_250 : vec4<f32> = u_xlat0;
  let x_252 : vec4<f32> = u_xlat0;
  u_xlat1.x = dot(vec2<f32>(x_250.z, x_250.w), vec2<f32>(x_252.z, x_252.w));
  let x_256 : vec4<f32> = u_xlat0;
  let x_257 : vec4<f32> = u_xlat1;
  u_xlat0 = (x_256 * vec4<f32>(x_257.x, x_257.x, x_257.x, x_257.x));
  let x_260 : vec4<f32> = u_xlat0;
  let x_263 : f32 = x_25.x_Chroma_Params;
  u_xlat0 = (x_260 * vec4<f32>(x_263, x_263, x_263, x_263));
  let x_276 : vec2<f32> = u_xlat13;
  let x_279 : f32 = x_25.x_GlobalMipBias.x;
  let x_280 : vec4<f32> = textureSampleBias(x_BlitTexture, sampler_LinearClamp, x_276, x_279);
  u_xlat2.x = x_280.x;
  let x_283 : vec4<f32> = u_xlat0;
  let x_288 : vec2<f32> = vs_TEXCOORD0;
  u_xlat0 = ((x_283 * vec4<f32>(-0.333333343f, -0.333333343f, -0.666666687f, -0.666666687f)) + vec4<f32>(x_288.x, x_288.y, x_288.x, x_288.y));
  let x_291 : vec4<f32> = u_xlat0;
  u_xlat0 = (x_291 + vec4<f32>(-0.5f, -0.5f, -0.5f, -0.5f));
  let x_294 : vec4<f32> = u_xlat0;
  let x_296 : vec4<f32> = x_25.x_Distortion_Params2;
  u_xlat3 = ((x_294 * vec4<f32>(x_296.z, x_296.z, x_296.z, x_296.z)) + vec4<f32>(0.5f, 0.5f, 0.5f, 0.5f));
  let x_301 : vec4<f32> = u_xlat0;
  let x_303 : vec4<f32> = x_25.x_Distortion_Params2;
  let x_307 : vec4<f32> = x_25.x_Distortion_Params1;
  u_xlat0 = ((x_301 * vec4<f32>(x_303.z, x_303.z, x_303.z, x_303.z)) + -(vec4<f32>(x_307.x, x_307.y, x_307.x, x_307.y)));
  let x_311 : vec4<f32> = u_xlat0;
  let x_313 : vec4<f32> = x_25.x_Distortion_Params1;
  u_xlat0 = (x_311 * vec4<f32>(x_313.z, x_313.w, x_313.z, x_313.w));
  let x_316 : vec4<f32> = u_xlat0;
  let x_318 : vec4<f32> = u_xlat0;
  u_xlat1.x = dot(vec2<f32>(x_316.x, x_316.y), vec2<f32>(x_318.x, x_318.y));
  let x_323 : f32 = u_xlat1.x;
  u_xlat1.x = sqrt(x_323);
  let x_326 : bool = u_xlatb7;
  if (x_326) {
    let x_330 : vec4<f32> = u_xlat1;
    let x_333 : vec4<f32> = x_25.x_Distortion_Params2;
    u_xlat4 = (vec2<f32>(x_330.x, x_330.x) * vec2<f32>(x_333.x, x_333.y));
    let x_338 : f32 = u_xlat4.x;
    u_xlat5 = cos(x_338);
    let x_341 : f32 = u_xlat4.x;
    u_xlat4.x = sin(x_341);
    let x_345 : f32 = u_xlat4.x;
    let x_346 : f32 = u_xlat5;
    u_xlat20 = (x_345 / x_346);
    let x_349 : f32 = u_xlat4.y;
    u_xlat4.x = (1.0f / x_349);
    let x_352 : f32 = u_xlat20;
    let x_354 : f32 = u_xlat4.x;
    u_xlat20 = ((x_352 * x_354) + -1.0f);
    let x_357 : vec4<f32> = u_xlat0;
    let x_359 : f32 = u_xlat20;
    let x_362 : vec4<f32> = u_xlat3;
    u_xlat4 = ((vec2<f32>(x_357.x, x_357.y) * vec2<f32>(x_359, x_359)) + vec2<f32>(x_362.x, x_362.y));
  } else {
    let x_367 : f32 = u_xlat1.x;
    u_xlat20 = (1.0f / x_367);
    let x_369 : f32 = u_xlat20;
    let x_371 : f32 = x_25.x_Distortion_Params2.x;
    u_xlat20 = (x_369 * x_371);
    let x_374 : f32 = u_xlat1.x;
    let x_376 : f32 = x_25.x_Distortion_Params2.y;
    u_xlat1.x = (x_374 * x_376);
    let x_381 : f32 = u_xlat1.x;
    u_xlat16 = min(abs(x_381), 1.0f);
    let x_386 : f32 = u_xlat1.x;
    u_xlat22 = max(abs(x_386), 1.0f);
    let x_389 : f32 = u_xlat22;
    u_xlat22 = (1.0f / x_389);
    let x_391 : f32 = u_xlat22;
    let x_392 : f32 = u_xlat16;
    u_xlat16 = (x_391 * x_392);
    let x_394 : f32 = u_xlat16;
    let x_395 : f32 = u_xlat16;
    u_xlat22 = (x_394 * x_395);
    let x_397 : f32 = u_xlat22;
    u_xlat5 = ((x_397 * 0.0208351f) + -0.085133001f);
    let x_400 : f32 = u_xlat22;
    let x_401 : f32 = u_xlat5;
    u_xlat5 = ((x_400 * x_401) + 0.180141002f);
    let x_404 : f32 = u_xlat22;
    let x_405 : f32 = u_xlat5;
    u_xlat5 = ((x_404 * x_405) + -0.330299497f);
    let x_408 : f32 = u_xlat22;
    let x_409 : f32 = u_xlat5;
    u_xlat22 = ((x_408 * x_409) + 0.999866009f);
    let x_412 : f32 = u_xlat22;
    let x_413 : f32 = u_xlat16;
    u_xlat5 = (x_412 * x_413);
    let x_417 : f32 = u_xlat1.x;
    u_xlatb11 = (1.0f < abs(x_417));
    let x_420 : f32 = u_xlat5;
    u_xlat5 = ((x_420 * -2.0f) + 1.570796371f);
    let x_423 : bool = u_xlatb11;
    let x_424 : f32 = u_xlat5;
    u_xlat5 = select(0.0f, x_424, x_423);
    let x_426 : f32 = u_xlat16;
    let x_427 : f32 = u_xlat22;
    let x_429 : f32 = u_xlat5;
    u_xlat16 = ((x_426 * x_427) + x_429);
    let x_432 : f32 = u_xlat1.x;
    u_xlat1.x = min(x_432, 1.0f);
    let x_436 : f32 = u_xlat1.x;
    let x_438 : f32 = u_xlat1.x;
    u_xlatb1 = (x_436 < -(x_438));
    let x_441 : bool = u_xlatb1;
    if (x_441) {
      let x_445 : f32 = u_xlat16;
      x_442 = -(x_445);
    } else {
      let x_448 : f32 = u_xlat16;
      x_442 = x_448;
    }
    let x_449 : f32 = x_442;
    u_xlat1.x = x_449;
    let x_451 : f32 = u_xlat20;
    let x_453 : f32 = u_xlat1.x;
    u_xlat1.x = ((x_451 * x_453) + -1.0f);
    let x_457 : vec4<f32> = u_xlat0;
    let x_459 : vec4<f32> = u_xlat1;
    let x_462 : vec4<f32> = u_xlat3;
    u_xlat4 = ((vec2<f32>(x_457.x, x_457.y) * vec2<f32>(x_459.x, x_459.x)) + vec2<f32>(x_462.x, x_462.y));
  }
  let x_468 : vec2<f32> = u_xlat4;
  let x_470 : f32 = x_25.x_GlobalMipBias.x;
  let x_471 : vec4<f32> = textureSampleBias(x_BlitTexture, sampler_LinearClamp, x_468, x_470);
  u_xlat2.y = x_471.y;
  let x_474 : vec4<f32> = u_xlat0;
  let x_476 : vec4<f32> = u_xlat0;
  u_xlat0.x = dot(vec2<f32>(x_474.z, x_474.w), vec2<f32>(x_476.z, x_476.w));
  let x_481 : f32 = u_xlat0.x;
  u_xlat0.x = sqrt(x_481);
  let x_484 : bool = u_xlatb7;
  if (x_484) {
    let x_487 : vec4<f32> = u_xlat0;
    let x_490 : vec4<f32> = x_25.x_Distortion_Params2;
    let x_492 : vec2<f32> = (vec2<f32>(x_487.x, x_487.x) * vec2<f32>(x_490.x, x_490.y));
    let x_493 : vec4<f32> = u_xlat1;
    u_xlat1 = vec4<f32>(x_492.x, x_492.y, x_493.z, x_493.w);
    let x_496 : f32 = u_xlat1.x;
    u_xlat3.x = cos(x_496);
    let x_500 : f32 = u_xlat1.x;
    u_xlat1.x = sin(x_500);
    let x_507 : f32 = u_xlat1.x;
    let x_509 : f32 = u_xlat3.x;
    u_xlat6.x = (x_507 / x_509);
    let x_513 : f32 = u_xlat1.y;
    u_xlat1.x = (1.0f / x_513);
    let x_517 : f32 = u_xlat6.x;
    let x_519 : f32 = u_xlat1.x;
    u_xlat6.x = ((x_517 * x_519) + -1.0f);
    let x_523 : vec4<f32> = u_xlat0;
    let x_525 : vec3<f32> = u_xlat6;
    let x_528 : vec4<f32> = u_xlat3;
    let x_530 : vec2<f32> = ((vec2<f32>(x_523.z, x_523.w) * vec2<f32>(x_525.x, x_525.x)) + vec2<f32>(x_528.z, x_528.w));
    let x_531 : vec4<f32> = u_xlat1;
    u_xlat1 = vec4<f32>(x_530.x, x_530.y, x_531.z, x_531.w);
  } else {
    let x_535 : f32 = u_xlat0.x;
    u_xlat6.x = (1.0f / x_535);
    let x_539 : f32 = u_xlat6.x;
    let x_541 : f32 = x_25.x_Distortion_Params2.x;
    u_xlat6.x = (x_539 * x_541);
    let x_545 : f32 = u_xlat0.x;
    let x_547 : f32 = x_25.x_Distortion_Params2.y;
    u_xlat0.x = (x_545 * x_547);
    let x_551 : f32 = u_xlat0.x;
    u_xlat20 = min(abs(x_551), 1.0f);
    let x_555 : f32 = u_xlat0.x;
    u_xlat3.x = max(abs(x_555), 1.0f);
    let x_560 : f32 = u_xlat3.x;
    u_xlat3.x = (1.0f / x_560);
    let x_563 : f32 = u_xlat20;
    let x_565 : f32 = u_xlat3.x;
    u_xlat20 = (x_563 * x_565);
    let x_567 : f32 = u_xlat20;
    let x_568 : f32 = u_xlat20;
    u_xlat3.x = (x_567 * x_568);
    let x_573 : f32 = u_xlat3.x;
    u_xlat9 = ((x_573 * 0.0208351f) + -0.085133001f);
    let x_577 : f32 = u_xlat3.x;
    let x_578 : f32 = u_xlat9;
    u_xlat9 = ((x_577 * x_578) + 0.180141002f);
    let x_582 : f32 = u_xlat3.x;
    let x_583 : f32 = u_xlat9;
    u_xlat9 = ((x_582 * x_583) + -0.330299497f);
    let x_587 : f32 = u_xlat3.x;
    let x_588 : f32 = u_xlat9;
    u_xlat3.x = ((x_587 * x_588) + 0.999866009f);
    let x_592 : f32 = u_xlat20;
    let x_594 : f32 = u_xlat3.x;
    u_xlat9 = (x_592 * x_594);
    let x_598 : f32 = u_xlat0.x;
    u_xlatb4 = (1.0f < abs(x_598));
    let x_601 : f32 = u_xlat9;
    u_xlat9 = ((x_601 * -2.0f) + 1.570796371f);
    let x_604 : bool = u_xlatb4;
    let x_605 : f32 = u_xlat9;
    u_xlat9 = select(0.0f, x_605, x_604);
    let x_607 : f32 = u_xlat20;
    let x_609 : f32 = u_xlat3.x;
    let x_611 : f32 = u_xlat9;
    u_xlat20 = ((x_607 * x_609) + x_611);
    let x_614 : f32 = u_xlat0.x;
    u_xlat0.x = min(x_614, 1.0f);
    let x_619 : f32 = u_xlat0.x;
    let x_621 : f32 = u_xlat0.x;
    u_xlatb0.x = (x_619 < -(x_621));
    let x_626 : bool = u_xlatb0.x;
    if (x_626) {
      let x_630 : f32 = u_xlat20;
      x_627 = -(x_630);
    } else {
      let x_633 : f32 = u_xlat20;
      x_627 = x_633;
    }
    let x_634 : f32 = x_627;
    u_xlat0.x = x_634;
    let x_637 : f32 = u_xlat6.x;
    let x_639 : f32 = u_xlat0.x;
    u_xlat0.x = ((x_637 * x_639) + -1.0f);
    let x_643 : vec4<f32> = u_xlat0;
    let x_645 : vec4<f32> = u_xlat0;
    let x_648 : vec4<f32> = u_xlat3;
    let x_650 : vec2<f32> = ((vec2<f32>(x_643.z, x_643.w) * vec2<f32>(x_645.x, x_645.x)) + vec2<f32>(x_648.z, x_648.w));
    let x_651 : vec4<f32> = u_xlat1;
    u_xlat1 = vec4<f32>(x_650.x, x_650.y, x_651.z, x_651.w);
  }
  let x_656 : vec4<f32> = u_xlat1;
  let x_659 : f32 = x_25.x_GlobalMipBias.x;
  let x_660 : vec4<f32> = textureSampleBias(x_BlitTexture, sampler_LinearClamp, vec2<f32>(x_656.x, x_656.y), x_659);
  u_xlat2.z = x_660.z;
  let x_668 : vec2<f32> = u_xlat13;
  let x_670 : f32 = x_25.x_GlobalMipBias.x;
  let x_671 : vec4<f32> = textureSampleBias(x_Bloom_Texture, sampler_LinearClamp, x_668, x_670);
  u_xlat0 = x_671;
  let x_674 : f32 = x_25.x_Bloom_RGBM;
  u_xlatb1 = (0.0f < x_674);
  let x_676 : bool = u_xlatb1;
  if (x_676) {
    let x_679 : vec4<f32> = u_xlat0;
    let x_681 : vec4<f32> = u_xlat0;
    let x_683 : vec3<f32> = (vec3<f32>(x_679.w, x_679.w, x_679.w) * vec3<f32>(x_681.x, x_681.y, x_681.z));
    let x_684 : vec4<f32> = u_xlat3;
    u_xlat3 = vec4<f32>(x_683.x, x_683.y, x_683.z, x_684.w);
    let x_686 : vec4<f32> = u_xlat3;
    let x_690 : vec3<f32> = (vec3<f32>(x_686.x, x_686.y, x_686.z) * vec3<f32>(8.0f, 8.0f, 8.0f));
    let x_691 : vec4<f32> = u_xlat0;
    u_xlat0 = vec4<f32>(x_690.x, x_690.y, x_690.z, x_691.w);
  }
  let x_693 : vec4<f32> = u_xlat0;
  let x_697 : vec4<f32> = x_25.x_Bloom_Params;
  let x_699 : vec3<f32> = (vec3<f32>(x_693.x, x_693.y, x_693.z) * vec3<f32>(x_697.x, x_697.x, x_697.x));
  let x_700 : vec4<f32> = u_xlat0;
  u_xlat0 = vec4<f32>(x_699.x, x_699.y, x_699.z, x_700.w);
  let x_702 : vec4<f32> = u_xlat0;
  let x_705 : vec4<f32> = x_25.x_Bloom_Params;
  let x_708 : vec4<f32> = u_xlat2;
  let x_710 : vec3<f32> = ((vec3<f32>(x_702.x, x_702.y, x_702.z) * vec3<f32>(x_705.y, x_705.z, x_705.w)) + vec3<f32>(x_708.x, x_708.y, x_708.z));
  let x_711 : vec4<f32> = u_xlat2;
  u_xlat2 = vec4<f32>(x_710.x, x_710.y, x_710.z, x_711.w);
  let x_713 : vec2<f32> = u_xlat13;
  let x_716 : vec4<f32> = x_25.x_LensDirt_Params;
  let x_720 : vec4<f32> = x_25.x_LensDirt_Params;
  let x_722 : vec2<f32> = ((x_713 * vec2<f32>(x_716.x, x_716.y)) + vec2<f32>(x_720.z, x_720.w));
  let x_723 : vec4<f32> = u_xlat1;
  u_xlat1 = vec4<f32>(x_722.x, x_722.y, x_723.z, x_723.w);
  let x_729 : vec4<f32> = u_xlat1;
  let x_732 : f32 = x_25.x_GlobalMipBias.x;
  let x_733 : vec4<f32> = textureSampleBias(x_LensDirt_Texture, sampler_LinearClamp, vec2<f32>(x_729.x, x_729.y), x_732);
  let x_734 : vec3<f32> = vec3<f32>(x_733.x, x_733.y, x_733.z);
  let x_735 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_734.x, x_734.y, x_734.z, x_735.w);
  let x_737 : vec4<f32> = u_xlat3;
  let x_741 : f32 = x_25.x_LensDirt_Intensity;
  let x_743 : vec3<f32> = (vec3<f32>(x_737.x, x_737.y, x_737.z) * vec3<f32>(x_741, x_741, x_741));
  let x_744 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_743.x, x_743.y, x_743.z, x_744.w);
  let x_746 : vec4<f32> = u_xlat3;
  let x_748 : vec4<f32> = u_xlat0;
  let x_751 : vec4<f32> = u_xlat2;
  let x_753 : vec3<f32> = ((vec3<f32>(x_746.x, x_746.y, x_746.z) * vec3<f32>(x_748.x, x_748.y, x_748.z)) + vec3<f32>(x_751.x, x_751.y, x_751.z));
  let x_754 : vec4<f32> = u_xlat0;
  u_xlat0 = vec4<f32>(x_753.x, x_753.y, x_753.z, x_754.w);
  let x_759 : f32 = x_25.x_Vignette_Params2.z;
  u_xlatb18 = (0.0f < x_759);
  let x_761 : bool = u_xlatb18;
  if (x_761) {
    let x_764 : vec2<f32> = u_xlat13;
    let x_766 : vec4<f32> = x_25.x_Vignette_Params2;
    let x_769 : vec2<f32> = (x_764 + -(vec2<f32>(x_766.x, x_766.y)));
    let x_770 : vec4<f32> = u_xlat1;
    u_xlat1 = vec4<f32>(x_769.x, x_769.y, x_770.z, x_770.w);
    let x_772 : vec4<f32> = u_xlat1;
    let x_776 : vec4<f32> = x_25.x_Vignette_Params2;
    let x_778 : vec2<f32> = (abs(vec2<f32>(x_772.x, x_772.y)) * vec2<f32>(x_776.z, x_776.z));
    let x_779 : vec4<f32> = u_xlat1;
    u_xlat1 = vec4<f32>(x_779.x, x_778.x, x_778.y, x_779.w);
    let x_782 : f32 = u_xlat1.y;
    let x_785 : f32 = x_25.x_Vignette_Params1.w;
    u_xlat1.x = (x_782 * x_785);
    let x_789 : vec4<f32> = u_xlat1;
    let x_791 : vec4<f32> = u_xlat1;
    u_xlat18 = dot(vec2<f32>(x_789.x, x_789.z), vec2<f32>(x_791.x, x_791.z));
    let x_794 : f32 = u_xlat18;
    u_xlat18 = (-(x_794) + 1.0f);
    let x_797 : f32 = u_xlat18;
    u_xlat18 = max(x_797, 0.0f);
    let x_799 : f32 = u_xlat18;
    u_xlat18 = log2(x_799);
    let x_801 : f32 = u_xlat18;
    let x_803 : f32 = x_25.x_Vignette_Params2.w;
    u_xlat18 = (x_801 * x_803);
    let x_805 : f32 = u_xlat18;
    u_xlat18 = exp2(x_805);
    let x_808 : vec4<f32> = x_25.x_Vignette_Params1;
    let x_812 : vec3<f32> = (-(vec3<f32>(x_808.x, x_808.y, x_808.z)) + vec3<f32>(1.0f, 1.0f, 1.0f));
    let x_813 : vec4<f32> = u_xlat1;
    u_xlat1 = vec4<f32>(x_812.x, x_812.y, x_812.z, x_813.w);
    let x_815 : f32 = u_xlat18;
    let x_817 : vec4<f32> = u_xlat1;
    let x_821 : vec4<f32> = x_25.x_Vignette_Params1;
    let x_823 : vec3<f32> = ((vec3<f32>(x_815, x_815, x_815) * vec3<f32>(x_817.x, x_817.y, x_817.z)) + vec3<f32>(x_821.x, x_821.y, x_821.z));
    let x_824 : vec4<f32> = u_xlat1;
    u_xlat1 = vec4<f32>(x_823.x, x_823.y, x_823.z, x_824.w);
    let x_826 : vec4<f32> = u_xlat0;
    let x_828 : vec4<f32> = u_xlat1;
    let x_830 : vec3<f32> = (vec3<f32>(x_826.x, x_826.y, x_826.z) * vec3<f32>(x_828.x, x_828.y, x_828.z));
    let x_831 : vec4<f32> = u_xlat0;
    u_xlat0 = vec4<f32>(x_830.x, x_830.y, x_830.z, x_831.w);
  }
  let x_833 : vec4<f32> = u_xlat0;
  let x_837 : vec4<f32> = x_25.x_Lut_Params;
  let x_839 : vec3<f32> = (vec3<f32>(x_833.x, x_833.y, x_833.z) * vec3<f32>(x_837.w, x_837.w, x_837.w));
  let x_840 : vec4<f32> = u_xlat0;
  u_xlat0 = vec4<f32>(x_839.x, x_839.y, x_839.z, x_840.w);
  let x_847 : vec4<f32> = u_xlat0;
  u_xlat7.x = dot(vec3<f32>(0.439700991f, 0.382977992f, 0.177334994f), vec3<f32>(x_847.x, x_847.y, x_847.z));
  let x_855 : vec4<f32> = u_xlat0;
  u_xlat7.y = dot(vec3<f32>(0.089792296f, 0.813422978f, 0.096761599f), vec3<f32>(x_855.x, x_855.y, x_855.z));
  let x_863 : vec4<f32> = u_xlat0;
  u_xlat7.z = dot(vec3<f32>(0.017543999f, 0.111543998f, 0.870703995f), vec3<f32>(x_863.x, x_863.y, x_863.z));
  let x_868 : f32 = u_xlat7.y;
  let x_870 : f32 = u_xlat7.x;
  u_xlat0.x = min(x_868, x_870);
  let x_874 : f32 = u_xlat7.z;
  let x_876 : f32 = u_xlat0.x;
  u_xlat0.x = min(x_874, x_876);
  let x_880 : f32 = u_xlat7.y;
  let x_882 : f32 = u_xlat7.x;
  u_xlat6.x = max(x_880, x_882);
  let x_886 : f32 = u_xlat7.z;
  let x_888 : f32 = u_xlat6.x;
  u_xlat0.y = max(x_886, x_888);
  let x_891 : vec4<f32> = u_xlat0;
  let x_896 : vec3<f32> = max(vec3<f32>(x_891.x, x_891.y, x_891.y), vec3<f32>(0.0001f, 0.0001f, 0.01f));
  let x_897 : vec4<f32> = u_xlat0;
  u_xlat0 = vec4<f32>(x_896.x, x_896.y, x_896.z, x_897.w);
  let x_900 : f32 = u_xlat0.x;
  let x_903 : f32 = u_xlat0.y;
  u_xlat0.x = (-(x_900) + x_903);
  let x_907 : f32 = u_xlat0.x;
  let x_909 : f32 = u_xlat0.z;
  u_xlat0.x = (x_907 / x_909);
  let x_912 : vec3<f32> = u_xlat7;
  let x_915 : vec3<f32> = u_xlat7;
  u_xlat6 = (-(vec3<f32>(x_912.y, x_912.x, x_912.z)) + vec3<f32>(x_915.z, x_915.y, x_915.x));
  let x_918 : vec3<f32> = u_xlat6;
  let x_920 : vec3<f32> = u_xlat7;
  let x_922 : vec2<f32> = (vec2<f32>(x_918.x, x_918.y) * vec2<f32>(x_920.z, x_920.y));
  let x_923 : vec3<f32> = u_xlat6;
  u_xlat6 = vec3<f32>(x_922.x, x_922.y, x_923.z);
  let x_926 : f32 = u_xlat6.y;
  let x_928 : f32 = u_xlat6.x;
  u_xlat6.x = (x_926 + x_928);
  let x_932 : f32 = u_xlat7.x;
  let x_934 : f32 = u_xlat6.z;
  let x_937 : f32 = u_xlat6.x;
  u_xlat6.x = ((x_932 * x_934) + x_937);
  let x_941 : f32 = u_xlat6.x;
  u_xlat6.x = max(x_941, 0.0f);
  let x_945 : f32 = u_xlat6.x;
  u_xlat6.x = sqrt(x_945);
  let x_949 : f32 = u_xlat7.y;
  let x_951 : f32 = u_xlat7.z;
  u_xlat12.x = (x_949 + x_951);
  let x_955 : f32 = u_xlat7.x;
  let x_957 : f32 = u_xlat12.x;
  u_xlat12.x = (x_955 + x_957);
  let x_961 : f32 = u_xlat6.x;
  let x_965 : f32 = u_xlat12.x;
  u_xlat6.x = ((x_961 * 1.75f) + x_965);
  let x_969 : f32 = u_xlat0.x;
  u_xlat18 = (x_969 + -0.400000006f);
  let x_972 : f32 = u_xlat18;
  u_xlat1.x = (x_972 * 2.5f);
  let x_977 : f32 = u_xlat1.x;
  u_xlat1.x = (-(abs(x_977)) + 1.0f);
  let x_983 : f32 = u_xlat1.x;
  u_xlat1.x = max(x_983, 0.0f);
  let x_986 : f32 = u_xlat18;
  u_xlatb18 = (x_986 >= 0.0f);
  let x_988 : bool = u_xlatb18;
  u_xlat18 = select(-1.0f, 1.0f, x_988);
  let x_991 : f32 = u_xlat1.x;
  let x_994 : f32 = u_xlat1.x;
  u_xlat1.x = ((-(x_991) * x_994) + 1.0f);
  let x_998 : f32 = u_xlat18;
  let x_1000 : f32 = u_xlat1.x;
  u_xlat6.z = ((x_998 * x_1000) + 1.0f);
  let x_1004 : vec3<f32> = u_xlat6;
  u_xlat12 = (vec2<f32>(x_1004.x, x_1004.z) * vec2<f32>(0.333333343f, 0.025f));
  let x_1012 : f32 = u_xlat6.x;
  u_xlatb1 = (0.159999996f >= x_1012);
  let x_1016 : f32 = u_xlat6.x;
  u_xlatb6 = (x_1016 >= 0.479999989f);
  let x_1021 : f32 = u_xlat12.x;
  u_xlat12.x = (0.079999998f / x_1021);
  let x_1025 : f32 = u_xlat12.x;
  u_xlat12.x = (x_1025 + -0.5f);
  let x_1029 : f32 = u_xlat12.x;
  let x_1031 : f32 = u_xlat12.y;
  u_xlat12.x = (x_1029 * x_1031);
  let x_1034 : bool = u_xlatb6;
  if (x_1034) {
    x_1035 = 0.0f;
  } else {
    let x_1040 : f32 = u_xlat12.x;
    x_1035 = x_1040;
  }
  let x_1041 : f32 = x_1035;
  u_xlat6.x = x_1041;
  let x_1043 : bool = u_xlatb1;
  if (x_1043) {
    let x_1048 : f32 = u_xlat12.y;
    x_1044 = x_1048;
  } else {
    let x_1051 : f32 = u_xlat6.x;
    x_1044 = x_1051;
  }
  let x_1052 : f32 = x_1044;
  u_xlat6.x = x_1052;
  let x_1055 : f32 = u_xlat6.x;
  u_xlat6.x = (x_1055 + 1.0f);
  let x_1058 : vec3<f32> = u_xlat6;
  let x_1060 : vec3<f32> = u_xlat7;
  let x_1061 : vec3<f32> = (vec3<f32>(x_1058.x, x_1058.x, x_1058.x) * x_1060);
  let x_1062 : vec4<f32> = u_xlat2;
  u_xlat2 = vec4<f32>(x_1062.x, x_1061.x, x_1061.y, x_1061.z);
  let x_1067 : vec4<f32> = u_xlat2;
  let x_1069 : vec4<f32> = u_xlat2;
  let x_1072 : vec4<bool> = (vec4<f32>(x_1067.z, x_1067.w, x_1067.z, x_1067.w) == vec4<f32>(x_1069.y, x_1069.z, x_1069.y, x_1069.z));
  u_xlatb12 = vec2<bool>(x_1072.x, x_1072.y);
  let x_1075 : bool = u_xlatb12.y;
  let x_1077 : bool = u_xlatb12.x;
  u_xlatb12.x = (x_1075 & x_1077);
  let x_1081 : f32 = u_xlat7.y;
  let x_1083 : f32 = u_xlat6.x;
  let x_1086 : f32 = u_xlat2.w;
  u_xlat18 = ((x_1081 * x_1083) + -(x_1086));
  let x_1089 : f32 = u_xlat18;
  u_xlat18 = (x_1089 * 1.732050776f);
  let x_1093 : f32 = u_xlat2.y;
  let x_1096 : f32 = u_xlat2.z;
  u_xlat1.x = ((x_1093 * 2.0f) + -(x_1096));
  let x_1101 : f32 = u_xlat7.z;
  let x_1104 : f32 = u_xlat6.x;
  let x_1107 : f32 = u_xlat1.x;
  u_xlat1.x = ((-(x_1101) * x_1104) + x_1107);
  let x_1110 : f32 = u_xlat18;
  let x_1113 : f32 = u_xlat1.x;
  u_xlat13.x = min(abs(x_1110), abs(x_1113));
  let x_1117 : f32 = u_xlat18;
  let x_1120 : f32 = u_xlat1.x;
  u_xlat19 = max(abs(x_1117), abs(x_1120));
  let x_1123 : f32 = u_xlat19;
  u_xlat19 = (1.0f / x_1123);
  let x_1125 : f32 = u_xlat19;
  let x_1127 : f32 = u_xlat13.x;
  u_xlat13.x = (x_1125 * x_1127);
  let x_1131 : f32 = u_xlat13.x;
  let x_1133 : f32 = u_xlat13.x;
  u_xlat19 = (x_1131 * x_1133);
  let x_1135 : f32 = u_xlat19;
  u_xlat3.x = ((x_1135 * 0.0208351f) + -0.085133001f);
  let x_1139 : f32 = u_xlat19;
  let x_1141 : f32 = u_xlat3.x;
  u_xlat3.x = ((x_1139 * x_1141) + 0.180141002f);
  let x_1145 : f32 = u_xlat19;
  let x_1147 : f32 = u_xlat3.x;
  u_xlat3.x = ((x_1145 * x_1147) + -0.330299497f);
  let x_1151 : f32 = u_xlat19;
  let x_1153 : f32 = u_xlat3.x;
  u_xlat19 = ((x_1151 * x_1153) + 0.999866009f);
  let x_1156 : f32 = u_xlat19;
  let x_1158 : f32 = u_xlat13.x;
  u_xlat3.x = (x_1156 * x_1158);
  let x_1163 : f32 = u_xlat1.x;
  let x_1165 : f32 = u_xlat18;
  u_xlatb9 = (abs(x_1163) < abs(x_1165));
  let x_1169 : f32 = u_xlat3.x;
  u_xlat3.x = ((x_1169 * -2.0f) + 1.570796371f);
  let x_1173 : bool = u_xlatb9;
  if (x_1173) {
    let x_1178 : f32 = u_xlat3.x;
    x_1174 = x_1178;
  } else {
    x_1174 = 0.0f;
  }
  let x_1180 : f32 = x_1174;
  u_xlat3.x = x_1180;
  let x_1183 : f32 = u_xlat13.x;
  let x_1184 : f32 = u_xlat19;
  let x_1187 : f32 = u_xlat3.x;
  u_xlat13.x = ((x_1183 * x_1184) + x_1187);
  let x_1192 : f32 = u_xlat1.x;
  let x_1194 : f32 = u_xlat1.x;
  u_xlatb19 = (x_1192 < -(x_1194));
  let x_1197 : bool = u_xlatb19;
  u_xlat19 = select(0.0f, -3.141592741f, x_1197);
  let x_1200 : f32 = u_xlat19;
  let x_1202 : f32 = u_xlat13.x;
  u_xlat13.x = (x_1200 + x_1202);
  let x_1205 : f32 = u_xlat18;
  let x_1207 : f32 = u_xlat1.x;
  u_xlat19 = min(x_1205, x_1207);
  let x_1209 : f32 = u_xlat18;
  let x_1211 : f32 = u_xlat1.x;
  u_xlat18 = max(x_1209, x_1211);
  let x_1213 : f32 = u_xlat19;
  let x_1214 : f32 = u_xlat19;
  u_xlatb1 = (x_1213 < -(x_1214));
  let x_1217 : f32 = u_xlat18;
  let x_1218 : f32 = u_xlat18;
  u_xlatb18 = (x_1217 >= -(x_1218));
  let x_1221 : bool = u_xlatb18;
  let x_1222 : bool = u_xlatb1;
  u_xlatb18 = (x_1221 & x_1222);
  let x_1224 : bool = u_xlatb18;
  if (x_1224) {
    let x_1229 : f32 = u_xlat13.x;
    x_1225 = -(x_1229);
  } else {
    let x_1233 : f32 = u_xlat13.x;
    x_1225 = x_1233;
  }
  let x_1234 : f32 = x_1225;
  u_xlat18 = x_1234;
  let x_1235 : f32 = u_xlat18;
  u_xlat18 = (x_1235 * 57.295780182f);
  let x_1239 : bool = u_xlatb12.x;
  let x_1240 : f32 = u_xlat18;
  u_xlat12.x = select(x_1240, 0.0f, x_1239);
  let x_1244 : f32 = u_xlat12.x;
  u_xlatb18 = (x_1244 < 0.0f);
  let x_1247 : f32 = u_xlat12.x;
  u_xlat1.x = (x_1247 + 360.0f);
  let x_1251 : bool = u_xlatb18;
  if (x_1251) {
    let x_1256 : f32 = u_xlat1.x;
    x_1252 = x_1256;
  } else {
    let x_1259 : f32 = u_xlat12.x;
    x_1252 = x_1259;
  }
  let x_1260 : f32 = x_1252;
  u_xlat12.x = x_1260;
  let x_1263 : f32 = u_xlat12.x;
  u_xlatb18 = (x_1263 < -180.0f);
  let x_1268 : f32 = u_xlat12.x;
  u_xlatb1 = (180.0f < x_1268);
  let x_1270 : vec2<f32> = u_xlat12;
  u_xlat13 = (vec2<f32>(x_1270.x, x_1270.x) + vec2<f32>(360.0f, -360.0f));
  let x_1275 : bool = u_xlatb1;
  if (x_1275) {
    let x_1280 : f32 = u_xlat13.y;
    x_1276 = x_1280;
  } else {
    let x_1283 : f32 = u_xlat12.x;
    x_1276 = x_1283;
  }
  let x_1284 : f32 = x_1276;
  u_xlat12.x = x_1284;
  let x_1286 : bool = u_xlatb18;
  if (x_1286) {
    let x_1291 : f32 = u_xlat13.x;
    x_1287 = x_1291;
  } else {
    let x_1294 : f32 = u_xlat12.x;
    x_1287 = x_1294;
  }
  let x_1295 : f32 = x_1287;
  u_xlat12.x = x_1295;
  let x_1298 : f32 = u_xlat12.x;
  u_xlat12.x = (x_1298 * 0.014814815f);
  let x_1303 : f32 = u_xlat12.x;
  u_xlat12.x = (-(abs(x_1303)) + 1.0f);
  let x_1309 : f32 = u_xlat12.x;
  u_xlat12.x = max(x_1309, 0.0f);
  let x_1313 : f32 = u_xlat12.x;
  u_xlat18 = ((x_1313 * -2.0f) + 3.0f);
  let x_1318 : f32 = u_xlat12.x;
  let x_1320 : f32 = u_xlat12.x;
  u_xlat12.x = (x_1318 * x_1320);
  let x_1324 : f32 = u_xlat12.x;
  let x_1325 : f32 = u_xlat18;
  u_xlat12.x = (x_1324 * x_1325);
  let x_1329 : f32 = u_xlat12.x;
  let x_1331 : f32 = u_xlat12.x;
  u_xlat12.x = (x_1329 * x_1331);
  let x_1335 : f32 = u_xlat0.x;
  let x_1337 : f32 = u_xlat12.x;
  u_xlat0.x = (x_1335 * x_1337);
  let x_1341 : f32 = u_xlat7.x;
  let x_1344 : f32 = u_xlat6.x;
  u_xlat6.x = ((-(x_1341) * x_1344) + 0.029999999f);
  let x_1350 : f32 = u_xlat6.x;
  let x_1352 : f32 = u_xlat0.x;
  u_xlat0.x = (x_1350 * x_1352);
  let x_1356 : f32 = u_xlat0.x;
  let x_1360 : f32 = u_xlat2.y;
  u_xlat2.x = ((x_1356 * 0.180000007f) + x_1360);
  let x_1367 : vec4<f32> = u_xlat2;
  u_xlat0.x = dot(vec3<f32>(1.451439261f, -0.236510754f, -0.214928567f), vec3<f32>(x_1367.x, x_1367.z, x_1367.w));
  let x_1375 : vec4<f32> = u_xlat2;
  u_xlat0.y = dot(vec3<f32>(-0.076553777f, 1.176229715f, -0.099675924f), vec3<f32>(x_1375.x, x_1375.z, x_1375.w));
  let x_1383 : vec4<f32> = u_xlat2;
  u_xlat0.z = dot(vec3<f32>(0.008316148f, -0.00603244966f, 0.997716308f), vec3<f32>(x_1383.x, x_1383.z, x_1383.w));
  let x_1387 : vec4<f32> = u_xlat0;
  let x_1390 : vec3<f32> = max(vec3<f32>(x_1387.x, x_1387.y, x_1387.z), vec3<f32>(0.0f, 0.0f, 0.0f));
  let x_1391 : vec4<f32> = u_xlat0;
  u_xlat0 = vec4<f32>(x_1390.x, x_1390.y, x_1390.z, x_1391.w);
  let x_1393 : vec4<f32> = u_xlat0;
  u_xlat18 = dot(vec3<f32>(x_1393.x, x_1393.y, x_1393.z), vec3<f32>(0.272228986f, 0.674081981f, 0.053689498f));
  let x_1400 : f32 = u_xlat18;
  let x_1403 : vec4<f32> = u_xlat0;
  let x_1405 : vec3<f32> = (-(vec3<f32>(x_1400, x_1400, x_1400)) + vec3<f32>(x_1403.x, x_1403.y, x_1403.z));
  let x_1406 : vec4<f32> = u_xlat0;
  u_xlat0 = vec4<f32>(x_1405.x, x_1405.y, x_1405.z, x_1406.w);
  let x_1408 : vec4<f32> = u_xlat0;
  let x_1413 : f32 = u_xlat18;
  let x_1415 : vec3<f32> = ((vec3<f32>(x_1408.x, x_1408.y, x_1408.z) * vec3<f32>(0.959999979f, 0.959999979f, 0.959999979f)) + vec3<f32>(x_1413, x_1413, x_1413));
  let x_1416 : vec4<f32> = u_xlat0;
  u_xlat0 = vec4<f32>(x_1415.x, x_1415.y, x_1415.z, x_1416.w);
  let x_1418 : vec4<f32> = u_xlat0;
  let x_1422 : vec3<f32> = (vec3<f32>(x_1418.x, x_1418.y, x_1418.z) + vec3<f32>(0.024578599f, 0.024578599f, 0.024578599f));
  let x_1423 : vec4<f32> = u_xlat1;
  u_xlat1 = vec4<f32>(x_1422.x, x_1422.y, x_1422.z, x_1423.w);
  let x_1425 : vec4<f32> = u_xlat0;
  let x_1427 : vec4<f32> = u_xlat1;
  let x_1432 : vec3<f32> = ((vec3<f32>(x_1425.x, x_1425.y, x_1425.z) * vec3<f32>(x_1427.x, x_1427.y, x_1427.z)) + vec3<f32>(-0.000090537f, -0.000090537f, -0.000090537f));
  let x_1433 : vec4<f32> = u_xlat1;
  u_xlat1 = vec4<f32>(x_1432.x, x_1432.y, x_1432.z, x_1433.w);
  let x_1435 : vec4<f32> = u_xlat0;
  let x_1442 : vec3<f32> = ((vec3<f32>(x_1435.x, x_1435.y, x_1435.z) * vec3<f32>(0.983729005f, 0.983729005f, 0.983729005f)) + vec3<f32>(0.432951003f, 0.432951003f, 0.432951003f));
  let x_1443 : vec4<f32> = u_xlat2;
  u_xlat2 = vec4<f32>(x_1442.x, x_1442.y, x_1442.z, x_1443.w);
  let x_1445 : vec4<f32> = u_xlat0;
  let x_1447 : vec4<f32> = u_xlat2;
  let x_1452 : vec3<f32> = ((vec3<f32>(x_1445.x, x_1445.y, x_1445.z) * vec3<f32>(x_1447.x, x_1447.y, x_1447.z)) + vec3<f32>(0.238080993f, 0.238080993f, 0.238080993f));
  let x_1453 : vec4<f32> = u_xlat0;
  u_xlat0 = vec4<f32>(x_1452.x, x_1452.y, x_1452.z, x_1453.w);
  let x_1455 : vec4<f32> = u_xlat1;
  let x_1457 : vec4<f32> = u_xlat0;
  let x_1459 : vec3<f32> = (vec3<f32>(x_1455.x, x_1455.y, x_1455.z) / vec3<f32>(x_1457.x, x_1457.y, x_1457.z));
  let x_1460 : vec4<f32> = u_xlat0;
  u_xlat0 = vec4<f32>(x_1459.x, x_1459.y, x_1459.z, x_1460.w);
  let x_1466 : vec4<f32> = u_xlat0;
  u_xlat1.x = dot(vec3<f32>(0.662454188f, 0.134004205f, 0.156187683f), vec3<f32>(x_1466.x, x_1466.y, x_1466.z));
  let x_1474 : vec4<f32> = u_xlat0;
  u_xlat1.y = dot(vec3<f32>(0.272228718f, 0.674081743f, 0.053689517f), vec3<f32>(x_1474.x, x_1474.y, x_1474.z));
  let x_1482 : vec4<f32> = u_xlat0;
  u_xlat1.z = dot(vec3<f32>(-0.00557464967f, 0.0040607336f, 1.010339141f), vec3<f32>(x_1482.x, x_1482.y, x_1482.z));
  let x_1486 : vec4<f32> = u_xlat1;
  u_xlat0.x = dot(vec3<f32>(x_1486.x, x_1486.y, x_1486.z), vec3<f32>(1.0f, 1.0f, 1.0f));
  let x_1491 : f32 = u_xlat0.x;
  u_xlat0.x = max(x_1491, 0.0001f);
  let x_1494 : vec4<f32> = u_xlat1;
  let x_1496 : vec4<f32> = u_xlat0;
  let x_1498 : vec2<f32> = (vec2<f32>(x_1494.x, x_1494.y) / vec2<f32>(x_1496.x, x_1496.x));
  let x_1499 : vec4<f32> = u_xlat0;
  u_xlat0 = vec4<f32>(x_1498.x, x_1498.y, x_1499.z, x_1499.w);
  let x_1502 : f32 = u_xlat1.y;
  u_xlat18 = max(x_1502, 0.0f);
  let x_1504 : f32 = u_xlat18;
  u_xlat18 = min(x_1504, 65504.0f);
  let x_1507 : f32 = u_xlat18;
  u_xlat18 = log2(x_1507);
  let x_1509 : f32 = u_xlat18;
  u_xlat18 = (x_1509 * 0.981100023f);
  let x_1512 : f32 = u_xlat18;
  u_xlat1.y = exp2(x_1512);
  let x_1516 : f32 = u_xlat0.y;
  u_xlat18 = max(x_1516, 0.0001f);
  let x_1519 : f32 = u_xlat1.y;
  let x_1520 : f32 = u_xlat18;
  u_xlat18 = (x_1519 / x_1520);
  let x_1523 : f32 = u_xlat0.x;
  u_xlat19 = (-(x_1523) + 1.0f);
  let x_1527 : f32 = u_xlat0.y;
  let x_1529 : f32 = u_xlat19;
  u_xlat0.z = (-(x_1527) + x_1529);
  let x_1532 : f32 = u_xlat18;
  let x_1534 : vec4<f32> = u_xlat0;
  let x_1536 : vec2<f32> = (vec2<f32>(x_1532, x_1532) * vec2<f32>(x_1534.x, x_1534.z));
  let x_1537 : vec4<f32> = u_xlat1;
  u_xlat1 = vec4<f32>(x_1536.x, x_1537.y, x_1536.y, x_1537.w);
  let x_1543 : vec4<f32> = u_xlat1;
  u_xlat0.x = dot(vec3<f32>(1.641023397f, -0.324803293f, -0.236424699f), vec3<f32>(x_1543.x, x_1543.y, x_1543.z));
  let x_1551 : vec4<f32> = u_xlat1;
  u_xlat0.y = dot(vec3<f32>(-0.663662851f, 1.61533165f, 0.016756348f), vec3<f32>(x_1551.x, x_1551.y, x_1551.z));
  let x_1559 : vec4<f32> = u_xlat1;
  u_xlat0.z = dot(vec3<f32>(0.011721894f, -0.008284442f, 0.988394856f), vec3<f32>(x_1559.x, x_1559.y, x_1559.z));
  let x_1563 : vec4<f32> = u_xlat0;
  u_xlat18 = dot(vec3<f32>(x_1563.x, x_1563.y, x_1563.z), vec3<f32>(0.272228986f, 0.674081981f, 0.053689498f));
  let x_1566 : f32 = u_xlat18;
  let x_1569 : vec4<f32> = u_xlat0;
  let x_1571 : vec3<f32> = (-(vec3<f32>(x_1566, x_1566, x_1566)) + vec3<f32>(x_1569.x, x_1569.y, x_1569.z));
  let x_1572 : vec4<f32> = u_xlat0;
  u_xlat0 = vec4<f32>(x_1571.x, x_1571.y, x_1571.z, x_1572.w);
  let x_1574 : vec4<f32> = u_xlat0;
  let x_1579 : f32 = u_xlat18;
  let x_1581 : vec3<f32> = ((vec3<f32>(x_1574.x, x_1574.y, x_1574.z) * vec3<f32>(0.930000007f, 0.930000007f, 0.930000007f)) + vec3<f32>(x_1579, x_1579, x_1579));
  let x_1582 : vec4<f32> = u_xlat0;
  u_xlat0 = vec4<f32>(x_1581.x, x_1581.y, x_1581.z, x_1582.w);
  let x_1584 : vec4<f32> = u_xlat0;
  u_xlat1.x = dot(vec3<f32>(0.662454188f, 0.134004205f, 0.156187683f), vec3<f32>(x_1584.x, x_1584.y, x_1584.z));
  let x_1588 : vec4<f32> = u_xlat0;
  u_xlat1.y = dot(vec3<f32>(0.272228718f, 0.674081743f, 0.053689517f), vec3<f32>(x_1588.x, x_1588.y, x_1588.z));
  let x_1592 : vec4<f32> = u_xlat0;
  u_xlat1.z = dot(vec3<f32>(-0.00557464967f, 0.0040607336f, 1.010339141f), vec3<f32>(x_1592.x, x_1592.y, x_1592.z));
  let x_1600 : vec4<f32> = u_xlat1;
  u_xlat0.x = dot(vec3<f32>(0.987223983f, -0.00611327f, 0.015953301f), vec3<f32>(x_1600.x, x_1600.y, x_1600.z));
  let x_1608 : vec4<f32> = u_xlat1;
  u_xlat0.y = dot(vec3<f32>(-0.00759836f, 1.001860023f, 0.0053302f), vec3<f32>(x_1608.x, x_1608.y, x_1608.z));
  let x_1616 : vec4<f32> = u_xlat1;
  u_xlat0.z = dot(vec3<f32>(0.00307257f, -0.00509595f, 1.081680059f), vec3<f32>(x_1616.x, x_1616.y, x_1616.z));
  let x_1624 : vec4<f32> = u_xlat0;
  u_xlat1.x = dot(vec3<f32>(3.240969896f, -1.537383199f, -0.498610765f), vec3<f32>(x_1624.x, x_1624.y, x_1624.z));
  let x_1629 : f32 = u_xlat1.x;
  u_xlat1.x = clamp(x_1629, 0.0f, 1.0f);
  let x_1636 : vec4<f32> = u_xlat0;
  u_xlat1.y = dot(vec3<f32>(-0.969243646f, 1.875967503f, 0.041555058f), vec3<f32>(x_1636.x, x_1636.y, x_1636.z));
  let x_1641 : f32 = u_xlat1.y;
  u_xlat1.y = clamp(x_1641, 0.0f, 1.0f);
  let x_1648 : vec4<f32> = u_xlat0;
  u_xlat1.z = dot(vec3<f32>(0.05563008f, -0.203976959f, 1.05697155f), vec3<f32>(x_1648.x, x_1648.y, x_1648.z));
  let x_1653 : f32 = u_xlat1.z;
  u_xlat1.z = clamp(x_1653, 0.0f, 1.0f);
  let x_1658 : f32 = x_25.x_UserLut_Params.w;
  u_xlatb0.x = (0.0f < x_1658);
  let x_1662 : bool = u_xlatb0.x;
  if (x_1662) {
    let x_1665 : vec4<f32> = u_xlat1;
    let x_1669 : vec3<f32> = (vec3<f32>(x_1665.x, x_1665.y, x_1665.z) * vec3<f32>(12.920000076f, 12.920000076f, 12.920000076f));
    let x_1670 : vec4<f32> = u_xlat0;
    u_xlat0 = vec4<f32>(x_1669.x, x_1669.y, x_1669.z, x_1670.w);
    let x_1672 : vec4<f32> = u_xlat1;
    let x_1674 : vec3<f32> = log2(vec3<f32>(x_1672.x, x_1672.y, x_1672.z));
    let x_1675 : vec4<f32> = u_xlat2;
    u_xlat2 = vec4<f32>(x_1674.x, x_1674.y, x_1674.z, x_1675.w);
    let x_1677 : vec4<f32> = u_xlat2;
    let x_1681 : vec3<f32> = (vec3<f32>(x_1677.x, x_1677.y, x_1677.z) * vec3<f32>(0.416666657f, 0.416666657f, 0.416666657f));
    let x_1682 : vec4<f32> = u_xlat2;
    u_xlat2 = vec4<f32>(x_1681.x, x_1681.y, x_1681.z, x_1682.w);
    let x_1684 : vec4<f32> = u_xlat2;
    let x_1686 : vec3<f32> = exp2(vec3<f32>(x_1684.x, x_1684.y, x_1684.z));
    let x_1687 : vec4<f32> = u_xlat2;
    u_xlat2 = vec4<f32>(x_1686.x, x_1686.y, x_1686.z, x_1687.w);
    let x_1689 : vec4<f32> = u_xlat2;
    let x_1696 : vec3<f32> = ((vec3<f32>(x_1689.x, x_1689.y, x_1689.z) * vec3<f32>(1.054999948f, 1.054999948f, 1.054999948f)) + vec3<f32>(-0.055f, -0.055f, -0.055f));
    let x_1697 : vec4<f32> = u_xlat2;
    u_xlat2 = vec4<f32>(x_1696.x, x_1696.y, x_1696.z, x_1697.w);
    let x_1701 : vec4<f32> = u_xlat1;
    let x_1703 : vec4<bool> = (vec4<f32>(0.0031308f, 0.0031308f, 0.0031308f, 0.0f) >= vec4<f32>(x_1701.x, x_1701.y, x_1701.z, x_1701.x));
    u_xlatb3 = vec3<bool>(x_1703.x, x_1703.y, x_1703.z);
    let x_1706 : vec4<f32> = u_xlat0;
    hlslcc_movcTemp = x_1706;
    let x_1708 : bool = u_xlatb3.x;
    if (x_1708) {
      let x_1713 : f32 = u_xlat0.x;
      x_1709 = x_1713;
    } else {
      let x_1716 : f32 = u_xlat2.x;
      x_1709 = x_1716;
    }
    let x_1717 : f32 = x_1709;
    hlslcc_movcTemp.x = x_1717;
    let x_1720 : bool = u_xlatb3.y;
    if (x_1720) {
      let x_1725 : f32 = u_xlat0.y;
      x_1721 = x_1725;
    } else {
      let x_1728 : f32 = u_xlat2.y;
      x_1721 = x_1728;
    }
    let x_1729 : f32 = x_1721;
    hlslcc_movcTemp.y = x_1729;
    let x_1732 : bool = u_xlatb3.z;
    if (x_1732) {
      let x_1737 : f32 = u_xlat0.z;
      x_1733 = x_1737;
    } else {
      let x_1740 : f32 = u_xlat2.z;
      x_1733 = x_1740;
    }
    let x_1741 : f32 = x_1733;
    hlslcc_movcTemp.z = x_1741;
    let x_1743 : vec4<f32> = hlslcc_movcTemp;
    u_xlat0 = x_1743;
    let x_1744 : vec4<f32> = u_xlat0;
    let x_1747 : vec4<f32> = x_25.x_UserLut_Params;
    let x_1749 : vec3<f32> = (vec3<f32>(x_1744.z, x_1744.x, x_1744.y) * vec3<f32>(x_1747.z, x_1747.z, x_1747.z));
    let x_1750 : vec4<f32> = u_xlat2;
    u_xlat2 = vec4<f32>(x_1749.x, x_1749.y, x_1749.z, x_1750.w);
    let x_1753 : f32 = u_xlat2.x;
    u_xlat18 = floor(x_1753);
    let x_1756 : vec4<f32> = x_25.x_UserLut_Params;
    let x_1758 : vec2<f32> = (vec2<f32>(x_1756.x, x_1756.y) * vec2<f32>(0.5f, 0.5f));
    let x_1759 : vec4<f32> = u_xlat2;
    u_xlat2 = vec4<f32>(x_1758.x, x_1759.y, x_1759.z, x_1758.y);
    let x_1761 : vec4<f32> = u_xlat2;
    let x_1764 : vec4<f32> = x_25.x_UserLut_Params;
    let x_1767 : vec4<f32> = u_xlat2;
    let x_1769 : vec2<f32> = ((vec2<f32>(x_1761.y, x_1761.z) * vec2<f32>(x_1764.x, x_1764.y)) + vec2<f32>(x_1767.x, x_1767.w));
    let x_1770 : vec4<f32> = u_xlat2;
    u_xlat2 = vec4<f32>(x_1770.x, x_1769.x, x_1769.y, x_1770.w);
    let x_1772 : f32 = u_xlat18;
    let x_1774 : f32 = x_25.x_UserLut_Params.y;
    let x_1777 : f32 = u_xlat2.y;
    u_xlat2.x = ((x_1772 * x_1774) + x_1777);
    let x_1784 : vec4<f32> = u_xlat2;
    let x_1786 : vec4<f32> = textureSampleLevel(x_UserLut, sampler_LinearClamp, vec2<f32>(x_1784.x, x_1784.z), 0.0f);
    let x_1787 : vec3<f32> = vec3<f32>(x_1786.x, x_1786.y, x_1786.z);
    let x_1788 : vec4<f32> = u_xlat3;
    u_xlat3 = vec4<f32>(x_1787.x, x_1787.y, x_1787.z, x_1788.w);
    let x_1791 : f32 = x_25.x_UserLut_Params.y;
    u_xlat4.x = x_1791;
    u_xlat4.y = 0.0f;
    let x_1794 : vec4<f32> = u_xlat2;
    let x_1796 : vec2<f32> = u_xlat4;
    let x_1797 : vec2<f32> = (vec2<f32>(x_1794.x, x_1794.z) + x_1796);
    let x_1798 : vec4<f32> = u_xlat2;
    u_xlat2 = vec4<f32>(x_1797.x, x_1797.y, x_1798.z, x_1798.w);
    let x_1803 : vec4<f32> = u_xlat2;
    let x_1805 : vec4<f32> = textureSampleLevel(x_UserLut, sampler_LinearClamp, vec2<f32>(x_1803.x, x_1803.y), 0.0f);
    let x_1806 : vec3<f32> = vec3<f32>(x_1805.x, x_1805.y, x_1805.z);
    let x_1807 : vec4<f32> = u_xlat2;
    u_xlat2 = vec4<f32>(x_1806.x, x_1806.y, x_1806.z, x_1807.w);
    let x_1810 : f32 = u_xlat0.z;
    let x_1812 : f32 = x_25.x_UserLut_Params.z;
    let x_1814 : f32 = u_xlat18;
    u_xlat18 = ((x_1810 * x_1812) + -(x_1814));
    let x_1817 : vec4<f32> = u_xlat3;
    let x_1820 : vec4<f32> = u_xlat2;
    let x_1822 : vec3<f32> = (-(vec3<f32>(x_1817.x, x_1817.y, x_1817.z)) + vec3<f32>(x_1820.x, x_1820.y, x_1820.z));
    let x_1823 : vec4<f32> = u_xlat2;
    u_xlat2 = vec4<f32>(x_1822.x, x_1822.y, x_1822.z, x_1823.w);
    let x_1825 : f32 = u_xlat18;
    let x_1827 : vec4<f32> = u_xlat2;
    let x_1830 : vec4<f32> = u_xlat3;
    let x_1832 : vec3<f32> = ((vec3<f32>(x_1825, x_1825, x_1825) * vec3<f32>(x_1827.x, x_1827.y, x_1827.z)) + vec3<f32>(x_1830.x, x_1830.y, x_1830.z));
    let x_1833 : vec4<f32> = u_xlat2;
    u_xlat2 = vec4<f32>(x_1832.x, x_1832.y, x_1832.z, x_1833.w);
    let x_1835 : vec4<f32> = u_xlat0;
    let x_1838 : vec4<f32> = u_xlat2;
    let x_1840 : vec3<f32> = (-(vec3<f32>(x_1835.x, x_1835.y, x_1835.z)) + vec3<f32>(x_1838.x, x_1838.y, x_1838.z));
    let x_1841 : vec4<f32> = u_xlat2;
    u_xlat2 = vec4<f32>(x_1840.x, x_1840.y, x_1840.z, x_1841.w);
    let x_1844 : vec4<f32> = x_25.x_UserLut_Params;
    let x_1846 : vec4<f32> = u_xlat2;
    let x_1849 : vec4<f32> = u_xlat0;
    let x_1851 : vec3<f32> = ((vec3<f32>(x_1844.w, x_1844.w, x_1844.w) * vec3<f32>(x_1846.x, x_1846.y, x_1846.z)) + vec3<f32>(x_1849.x, x_1849.y, x_1849.z));
    let x_1852 : vec4<f32> = u_xlat0;
    u_xlat0 = vec4<f32>(x_1851.x, x_1851.y, x_1851.z, x_1852.w);
    let x_1854 : vec4<f32> = u_xlat0;
    let x_1858 : vec3<f32> = (vec3<f32>(x_1854.x, x_1854.y, x_1854.z) * vec3<f32>(0.077399381f, 0.077399381f, 0.077399381f));
    let x_1859 : vec4<f32> = u_xlat2;
    u_xlat2 = vec4<f32>(x_1858.x, x_1858.y, x_1858.z, x_1859.w);
    let x_1861 : vec4<f32> = u_xlat0;
    let x_1865 : vec3<f32> = (vec3<f32>(x_1861.x, x_1861.y, x_1861.z) + vec3<f32>(0.055f, 0.055f, 0.055f));
    let x_1866 : vec4<f32> = u_xlat3;
    u_xlat3 = vec4<f32>(x_1865.x, x_1865.y, x_1865.z, x_1866.w);
    let x_1868 : vec4<f32> = u_xlat3;
    let x_1872 : vec3<f32> = (vec3<f32>(x_1868.x, x_1868.y, x_1868.z) * vec3<f32>(0.947867334f, 0.947867334f, 0.947867334f));
    let x_1873 : vec4<f32> = u_xlat3;
    u_xlat3 = vec4<f32>(x_1872.x, x_1872.y, x_1872.z, x_1873.w);
    let x_1875 : vec4<f32> = u_xlat3;
    let x_1878 : vec3<f32> = log2(abs(vec3<f32>(x_1875.x, x_1875.y, x_1875.z)));
    let x_1879 : vec4<f32> = u_xlat3;
    u_xlat3 = vec4<f32>(x_1878.x, x_1878.y, x_1878.z, x_1879.w);
    let x_1881 : vec4<f32> = u_xlat3;
    let x_1885 : vec3<f32> = (vec3<f32>(x_1881.x, x_1881.y, x_1881.z) * vec3<f32>(2.400000095f, 2.400000095f, 2.400000095f));
    let x_1886 : vec4<f32> = u_xlat3;
    u_xlat3 = vec4<f32>(x_1885.x, x_1885.y, x_1885.z, x_1886.w);
    let x_1888 : vec4<f32> = u_xlat3;
    let x_1890 : vec3<f32> = exp2(vec3<f32>(x_1888.x, x_1888.y, x_1888.z));
    let x_1891 : vec4<f32> = u_xlat3;
    u_xlat3 = vec4<f32>(x_1890.x, x_1890.y, x_1890.z, x_1891.w);
    let x_1895 : vec4<f32> = u_xlat0;
    let x_1897 : vec4<bool> = (vec4<f32>(0.040449999f, 0.040449999f, 0.040449999f, 0.0f) >= vec4<f32>(x_1895.x, x_1895.y, x_1895.z, x_1895.x));
    u_xlatb0 = vec3<bool>(x_1897.x, x_1897.y, x_1897.z);
    let x_1900 : bool = u_xlatb0.x;
    if (x_1900) {
      let x_1905 : f32 = u_xlat2.x;
      x_1901 = x_1905;
    } else {
      let x_1908 : f32 = u_xlat3.x;
      x_1901 = x_1908;
    }
    let x_1909 : f32 = x_1901;
    u_xlat1.x = x_1909;
    let x_1912 : bool = u_xlatb0.y;
    if (x_1912) {
      let x_1917 : f32 = u_xlat2.y;
      x_1913 = x_1917;
    } else {
      let x_1920 : f32 = u_xlat3.y;
      x_1913 = x_1920;
    }
    let x_1921 : f32 = x_1913;
    u_xlat1.y = x_1921;
    let x_1924 : bool = u_xlatb0.z;
    if (x_1924) {
      let x_1929 : f32 = u_xlat2.z;
      x_1925 = x_1929;
    } else {
      let x_1932 : f32 = u_xlat3.z;
      x_1925 = x_1932;
    }
    let x_1933 : f32 = x_1925;
    u_xlat1.z = x_1933;
  }
  let x_1935 : vec4<f32> = u_xlat1;
  let x_1938 : vec4<f32> = x_25.x_Lut_Params;
  let x_1940 : vec3<f32> = (vec3<f32>(x_1935.z, x_1935.x, x_1935.y) * vec3<f32>(x_1938.z, x_1938.z, x_1938.z));
  let x_1941 : vec4<f32> = u_xlat0;
  u_xlat0 = vec4<f32>(x_1940.x, x_1940.y, x_1940.z, x_1941.w);
  let x_1944 : f32 = u_xlat0.x;
  u_xlat0.x = floor(x_1944);
  let x_1948 : vec4<f32> = x_25.x_Lut_Params;
  let x_1950 : vec2<f32> = (vec2<f32>(x_1948.x, x_1948.y) * vec2<f32>(0.5f, 0.5f));
  let x_1951 : vec4<f32> = u_xlat1;
  u_xlat1 = vec4<f32>(x_1950.x, x_1950.y, x_1951.z, x_1951.w);
  let x_1953 : vec4<f32> = u_xlat0;
  let x_1956 : vec4<f32> = x_25.x_Lut_Params;
  let x_1959 : vec4<f32> = u_xlat1;
  let x_1961 : vec2<f32> = ((vec2<f32>(x_1953.y, x_1953.z) * vec2<f32>(x_1956.x, x_1956.y)) + vec2<f32>(x_1959.x, x_1959.y));
  let x_1962 : vec4<f32> = u_xlat2;
  u_xlat2 = vec4<f32>(x_1962.x, x_1961.x, x_1961.y, x_1962.w);
  let x_1965 : f32 = u_xlat0.x;
  let x_1967 : f32 = x_25.x_Lut_Params.y;
  let x_1970 : f32 = u_xlat2.y;
  u_xlat2.x = ((x_1965 * x_1967) + x_1970);
  let x_1977 : vec4<f32> = u_xlat2;
  let x_1979 : vec4<f32> = textureSampleLevel(x_InternalLut, sampler_LinearClamp, vec2<f32>(x_1977.x, x_1977.z), 0.0f);
  u_xlat6 = vec3<f32>(x_1979.x, x_1979.y, x_1979.z);
  let x_1982 : f32 = x_25.x_Lut_Params.y;
  u_xlat1.x = x_1982;
  u_xlat1.y = 0.0f;
  let x_1985 : vec4<f32> = u_xlat1;
  let x_1987 : vec4<f32> = u_xlat2;
  let x_1989 : vec2<f32> = (vec2<f32>(x_1985.x, x_1985.y) + vec2<f32>(x_1987.x, x_1987.z));
  let x_1990 : vec4<f32> = u_xlat1;
  u_xlat1 = vec4<f32>(x_1989.x, x_1989.y, x_1990.z, x_1990.w);
  let x_1995 : vec4<f32> = u_xlat1;
  let x_1997 : vec4<f32> = textureSampleLevel(x_InternalLut, sampler_LinearClamp, vec2<f32>(x_1995.x, x_1995.y), 0.0f);
  let x_1998 : vec3<f32> = vec3<f32>(x_1997.x, x_1997.y, x_1997.z);
  let x_1999 : vec4<f32> = u_xlat1;
  u_xlat1 = vec4<f32>(x_1998.x, x_1998.y, x_1999.z, x_1998.z);
  let x_2002 : f32 = u_xlat1.z;
  let x_2004 : f32 = x_25.x_Lut_Params.z;
  let x_2007 : f32 = u_xlat0.x;
  u_xlat0.x = ((x_2002 * x_2004) + -(x_2007));
  let x_2011 : vec3<f32> = u_xlat6;
  let x_2013 : vec4<f32> = u_xlat1;
  let x_2015 : vec3<f32> = (-(x_2011) + vec3<f32>(x_2013.x, x_2013.y, x_2013.w));
  let x_2016 : vec4<f32> = u_xlat1;
  u_xlat1 = vec4<f32>(x_2015.x, x_2015.y, x_2015.z, x_2016.w);
  let x_2018 : vec4<f32> = u_xlat0;
  let x_2020 : vec4<f32> = u_xlat1;
  let x_2023 : vec3<f32> = u_xlat6;
  let x_2024 : vec3<f32> = ((vec3<f32>(x_2018.x, x_2018.x, x_2018.x) * vec3<f32>(x_2020.x, x_2020.y, x_2020.z)) + x_2023);
  let x_2025 : vec4<f32> = u_xlat0;
  u_xlat0 = vec4<f32>(x_2024.x, x_2024.y, x_2024.z, x_2025.w);
  let x_2027 : vec2<f32> = vs_TEXCOORD0;
  let x_2030 : vec4<f32> = x_25.x_Grain_TilingParams;
  let x_2034 : vec4<f32> = x_25.x_Grain_TilingParams;
  let x_2036 : vec2<f32> = ((x_2027 * vec2<f32>(x_2030.x, x_2030.y)) + vec2<f32>(x_2034.z, x_2034.w));
  let x_2037 : vec4<f32> = u_xlat1;
  u_xlat1 = vec4<f32>(x_2036.x, x_2036.y, x_2037.z, x_2037.w);
  let x_2044 : vec4<f32> = u_xlat1;
  let x_2047 : f32 = x_25.x_GlobalMipBias.x;
  let x_2048 : vec4<f32> = textureSampleBias(x_Grain_Texture, sampler_LinearRepeat, vec2<f32>(x_2044.x, x_2044.y), x_2047);
  u_xlat18 = x_2048.w;
  let x_2050 : f32 = u_xlat18;
  u_xlat18 = (x_2050 + -0.5f);
  let x_2052 : f32 = u_xlat18;
  let x_2053 : f32 = u_xlat18;
  u_xlat18 = (x_2052 + x_2053);
  let x_2055 : vec4<f32> = u_xlat0;
  u_xlat1.x = dot(vec3<f32>(x_2055.x, x_2055.y, x_2055.z), vec3<f32>(0.212672904f, 0.715152204f, 0.072175004f));
  let x_2064 : f32 = u_xlat1.x;
  u_xlat1.x = sqrt(x_2064);
  let x_2069 : f32 = x_25.x_Grain_Params.y;
  let x_2071 : f32 = u_xlat1.x;
  u_xlat1.x = ((x_2069 * -(x_2071)) + 1.0f);
  let x_2076 : f32 = u_xlat18;
  let x_2078 : vec4<f32> = u_xlat0;
  u_xlat7 = (vec3<f32>(x_2076, x_2076, x_2076) * vec3<f32>(x_2078.x, x_2078.y, x_2078.z));
  let x_2081 : vec3<f32> = u_xlat7;
  let x_2084 : vec2<f32> = x_25.x_Grain_Params;
  u_xlat7 = (x_2081 * vec3<f32>(x_2084.x, x_2084.x, x_2084.x));
  let x_2087 : vec3<f32> = u_xlat7;
  let x_2088 : vec4<f32> = u_xlat1;
  let x_2091 : vec4<f32> = u_xlat0;
  let x_2093 : vec3<f32> = ((x_2087 * vec3<f32>(x_2088.x, x_2088.x, x_2088.x)) + vec3<f32>(x_2091.x, x_2091.y, x_2091.z));
  let x_2094 : vec4<f32> = u_xlat0;
  u_xlat0 = vec4<f32>(x_2093.x, x_2093.y, x_2093.z, x_2094.w);
  let x_2098 : vec4<f32> = u_xlat0;
  let x_2100 : vec3<f32> = sqrt(vec3<f32>(x_2098.x, x_2098.y, x_2098.z));
  let x_2101 : vec4<f32> = SV_Target0;
  SV_Target0 = vec4<f32>(x_2100.x, x_2100.y, x_2100.z, x_2101.w);
  SV_Target0.w = 1.0f;
  return;
}

struct main_out {
  @location(0)
  SV_Target0_1 : vec4<f32>,
}

@fragment
fn main(@location(0) vs_TEXCOORD0_param : vec2<f32>, @builtin(position) gl_FragCoord_param : vec4<f32>) -> main_out {
  vs_TEXCOORD0 = vs_TEXCOORD0_param;
  gl_FragCoord = gl_FragCoord_param;
  main_1();
  return main_out(SV_Target0);
}

