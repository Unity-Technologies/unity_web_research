type Arr = array<vec4<f32>, 2u>;

struct UnityPerDraw {
  unity_ObjectToWorld : mat4x4<f32>,
  unity_WorldToObject : mat4x4<f32>,
  unity_LODFade : vec4<f32>,
  unity_WorldTransformParams : vec4<f32>,
  unity_RenderingLayer : vec4<f32>,
  unity_LightData : vec4<f32>,
  unity_LightIndices : Arr,
  unity_ProbesOcclusion : vec4<f32>,
  unity_SpecCube0_HDR : vec4<f32>,
  unity_SpecCube1_HDR : vec4<f32>,
  unity_SpecCube0_BoxMax : vec4<f32>,
  unity_SpecCube0_BoxMin : vec4<f32>,
  unity_SpecCube0_ProbePosition : vec4<f32>,
  unity_SpecCube1_BoxMax : vec4<f32>,
  unity_SpecCube1_BoxMin : vec4<f32>,
  unity_SpecCube1_ProbePosition : vec4<f32>,
  unity_LightmapST : vec4<f32>,
  unity_DynamicLightmapST : vec4<f32>,
  unity_SHAr : vec4<f32>,
  unity_SHAg : vec4<f32>,
  unity_SHAb : vec4<f32>,
  unity_SHBr : vec4<f32>,
  unity_SHBg : vec4<f32>,
  unity_SHBb : vec4<f32>,
  unity_SHC : vec4<f32>,
  unity_RendererBounds_Min : vec4<f32>,
  unity_RendererBounds_Max : vec4<f32>,
  unity_MatrixPreviousM : mat4x4<f32>,
  unity_MatrixPreviousMI : mat4x4<f32>,
  unity_MotionVectorsParams : vec4<f32>,
  unity_SpriteColor : vec4<f32>,
  unity_SpriteProps : vec4<f32>,
}

struct PGlobals {
  x_ScaledScreenParams : vec4<f32>,
  x_GlobalMipBias : vec2<f32>,
  x_AlphaToMaskAvailable : f32,
  @size(4)
  padding : u32,
  x_MainLightPosition : vec4<f32>,
  x_MainLightColor : vec4<f32>,
  x_AmbientOcclusionParam : vec4<f32>,
  x_AdditionalLightsCount : vec4<f32>,
  x_RenderingLayerMaxInt : u32,
  x_RenderingLayerRcpMaxInt : f32,
  @size(8)
  padding_1 : u32,
  x_WorldSpaceCameraPos : vec3<f32>,
  @size(4)
  padding_2 : u32,
  unity_OrthoParams : vec4<f32>,
  x_ScaleBiasRt : vec4<f32>,
  unity_MatrixV : mat4x4<f32>,
}

struct UnityPerMaterial {
  Texture2D_B222E8F_TexelSize : vec4<f32>,
  Color_C30C7CA3 : vec4<f32>,
  Texture2D_D9BFD5F1_TexelSize : vec4<f32>,
}

type Arr_1 = array<mat4x4<f32>, 5u>;

struct MainLightShadows {
  x_MainLightWorldToShadow : Arr_1,
  x_CascadeShadowSplitSpheres0 : vec4<f32>,
  x_CascadeShadowSplitSpheres1 : vec4<f32>,
  x_CascadeShadowSplitSpheres2 : vec4<f32>,
  x_CascadeShadowSplitSpheres3 : vec4<f32>,
  x_CascadeShadowSplitSphereRadii : vec4<f32>,
  x_MainLightShadowOffset0 : vec4<f32>,
  x_MainLightShadowOffset1 : vec4<f32>,
  x_MainLightShadowParams : vec4<f32>,
  x_MainLightShadowmapSize : vec4<f32>,
}

struct strided_arr {
  @size(16)
  el : f32,
}

type Arr_2 = array<strided_arr, 8u>;

struct LightCookies {
  x_MainLightWorldToLight : mat4x4<f32>,
  x_AdditionalLightsCookieEnableBits : Arr_2,
  x_MainLightCookieTextureFormat : f32,
  x_AdditionalLightsCookieAtlasTextureFormat : f32,
}

type Arr_3 = array<vec4<f32>, 256u>;

type Arr_4 = array<vec4<f32>, 256u>;

type Arr_5 = array<vec4<f32>, 256u>;

type Arr_6 = array<vec4<f32>, 256u>;

type Arr_7 = array<vec4<f32>, 256u>;

struct strided_arr_1 {
  @size(16)
  el : f32,
}

type Arr_8 = array<strided_arr_1, 256u>;

type Arr_9 = array<vec4<f32>, 256u>;

type Arr_10 = array<strided_arr_1, 256u>;

struct AdditionalLights {
  x_AdditionalLightsPosition : Arr_9,
  x_AdditionalLightsColor : Arr_9,
  x_AdditionalLightsAttenuation : Arr_9,
  x_AdditionalLightsSpotDir : Arr_9,
  x_AdditionalLightsOcclusionProbes : Arr_9,
  x_AdditionalLightsLayerMasks : Arr_10,
}

type Arr_11 = array<mat4x4<f32>, 256u>;

struct AdditionalLightsCookies {
  x_AdditionalLightsWorldToLights : Arr_11,
  x_AdditionalLightsCookieAtlasUVRects : Arr_9,
  x_AdditionalLightsLightTypes : Arr_10,
}

var<private> gl_FragCoord : vec4<f32>;

var<private> vs_INTERP1 : vec3<f32>;

var<private> vs_INTERP2 : vec4<f32>;

@group(1) @binding(2) var<uniform> x_60 : UnityPerDraw;

@group(0) @binding(5) var Texture2D_B222E8F : texture_2d<f32>;

@group(0) @binding(12) var samplerTexture2D_B222E8F : sampler;

var<private> vs_INTERP3 : vec4<f32>;

@group(1) @binding(0) var<uniform> x_139 : PGlobals;

@group(1) @binding(6) var<uniform> x_149 : UnityPerMaterial;

@group(0) @binding(6) var Texture2D_D9BFD5F1 : texture_2d<f32>;

@group(0) @binding(13) var samplerTexture2D_D9BFD5F1 : sampler;

var<private> vs_INTERP4 : vec4<f32>;

var<private> vs_INTERP0 : vec3<f32>;

@group(1) @binding(3) var<uniform> x_253 : MainLightShadows;

@group(0) @binding(2) var x_MainLightShadowmapTexture : texture_depth_2d;

@group(0) @binding(9) var sampler_MainLightShadowmapTexture : sampler_comparison;

@group(0) @binding(1) var x_ScreenSpaceOcclusionTexture : texture_2d<f32>;

@group(0) @binding(8) var sampler_ScreenSpaceOcclusionTexture : sampler;

@group(1) @binding(4) var<uniform> x_3353 : LightCookies;

@group(0) @binding(3) var x_MainLightCookieTexture : texture_2d<f32>;

@group(0) @binding(10) var sampler_MainLightCookieTexture : sampler;

@group(0) @binding(0) var unity_SpecCube0 : texture_cube<f32>;

@group(0) @binding(7) var samplerunity_SpecCube0 : sampler;

@group(1) @binding(1) var<uniform> x_3839 : AdditionalLights;

@group(1) @binding(5) var<uniform> x_3948 : AdditionalLightsCookies;

@group(0) @binding(4) var x_AdditionalLightsCookieAtlasTexture : texture_2d<f32>;

@group(0) @binding(11) var sampler_AdditionalLightsCookieAtlasTexture : sampler;

var<private> SV_Target0 : vec4<f32>;

var<private> SV_Target1 : vec4<f32>;

fn main_1() {
  var hlslcc_FragCoord : vec4<f32>;
  var u_xlat0 : vec3<f32>;
  var u_xlatb22 : vec2<bool>;
  var u_xlat22 : vec3<f32>;
  var u_xlat1 : vec3<f32>;
  var u_xlat2 : vec4<f32>;
  var u_xlat3 : vec4<f32>;
  var u_xlat4 : vec4<f32>;
  var u_xlat5 : vec3<f32>;
  var u_xlat6 : vec4<f32>;
  var u_xlat7 : vec4<f32>;
  var u_xlat28 : vec3<f32>;
  var u_xlat8 : vec4<f32>;
  var u_xlatb2 : vec4<bool>;
  var u_xlatu0 : u32;
  var u_xlati0 : i32;
  var u_xlatb0 : bool;
  var u_xlatb67 : bool;
  var txVec0 : vec3<f32>;
  var txVec1 : vec3<f32>;
  var txVec2 : vec3<f32>;
  var txVec3 : vec3<f32>;
  var u_xlat67 : f32;
  var u_xlatb68 : bool;
  var u_xlat47 : vec2<f32>;
  var u_xlat52 : vec2<f32>;
  var u_xlat9 : vec4<f32>;
  var u_xlat10 : vec4<f32>;
  var u_xlat11 : vec4<f32>;
  var u_xlat12 : vec4<f32>;
  var u_xlat13 : vec4<f32>;
  var u_xlat14 : vec4<f32>;
  var u_xlat68 : f32;
  var txVec4 : vec3<f32>;
  var txVec5 : vec3<f32>;
  var u_xlat25 : vec3<f32>;
  var txVec6 : vec3<f32>;
  var txVec7 : vec3<f32>;
  var txVec8 : vec3<f32>;
  var txVec9 : vec3<f32>;
  var txVec10 : vec3<f32>;
  var txVec11 : vec3<f32>;
  var txVec12 : vec3<f32>;
  var u_xlat29 : vec3<f32>;
  var u_xlat15 : vec4<f32>;
  var u_xlat16 : vec4<f32>;
  var u_xlat30 : vec2<f32>;
  var u_xlat58 : vec2<f32>;
  var u_xlat53 : vec2<f32>;
  var u_xlat17 : vec4<f32>;
  var u_xlat18 : vec4<f32>;
  var u_xlat19 : vec4<f32>;
  var txVec13 : vec3<f32>;
  var txVec14 : vec3<f32>;
  var u_xlat71 : f32;
  var txVec15 : vec3<f32>;
  var txVec16 : vec3<f32>;
  var txVec17 : vec3<f32>;
  var txVec18 : vec3<f32>;
  var txVec19 : vec3<f32>;
  var txVec20 : vec3<f32>;
  var txVec21 : vec3<f32>;
  var txVec22 : vec3<f32>;
  var txVec23 : vec3<f32>;
  var txVec24 : vec3<f32>;
  var txVec25 : vec3<f32>;
  var txVec26 : vec3<f32>;
  var txVec27 : vec3<f32>;
  var txVec28 : vec3<f32>;
  var txVec29 : vec3<f32>;
  var u_xlatb3 : bool;
  var u_xlatb25 : vec3<bool>;
  var u_xlat23 : vec3<f32>;
  var x_1778 : f32;
  var u_xlat69 : f32;
  var u_xlatb47 : bool;
  var x_1829 : f32;
  var u_xlat44 : f32;
  var x_1908 : f32;
  var x_1921 : f32;
  var x_1933 : f32;
  var u_xlat70 : f32;
  var u_xlat50 : f32;
  var txVec30 : vec3<f32>;
  var txVec31 : vec3<f32>;
  var txVec32 : vec3<f32>;
  var txVec33 : vec3<f32>;
  var u_xlatb72 : bool;
  var u_xlat54 : vec2<f32>;
  var u_xlat72 : f32;
  var txVec34 : vec3<f32>;
  var u_xlat73 : f32;
  var txVec35 : vec3<f32>;
  var txVec36 : vec3<f32>;
  var txVec37 : vec3<f32>;
  var txVec38 : vec3<f32>;
  var txVec39 : vec3<f32>;
  var txVec40 : vec3<f32>;
  var txVec41 : vec3<f32>;
  var txVec42 : vec3<f32>;
  var u_xlat31 : vec3<f32>;
  var u_xlat32 : vec2<f32>;
  var u_xlat60 : vec2<f32>;
  var u_xlat55 : vec2<f32>;
  var u_xlat20 : vec4<f32>;
  var u_xlat21 : vec4<f32>;
  var txVec43 : vec3<f32>;
  var txVec44 : vec3<f32>;
  var txVec45 : vec3<f32>;
  var txVec46 : vec3<f32>;
  var txVec47 : vec3<f32>;
  var txVec48 : vec3<f32>;
  var txVec49 : vec3<f32>;
  var txVec50 : vec3<f32>;
  var txVec51 : vec3<f32>;
  var txVec52 : vec3<f32>;
  var txVec53 : vec3<f32>;
  var txVec54 : vec3<f32>;
  var txVec55 : vec3<f32>;
  var txVec56 : vec3<f32>;
  var txVec57 : vec3<f32>;
  var txVec58 : vec3<f32>;
  var txVec59 : vec3<f32>;
  var x_3302 : f32;
  var u_xlat24 : f32;
  var u_xlatb8 : vec2<bool>;
  var x_3436 : f32;
  var x_3447 : vec3<f32>;
  var u_xlatu_loop_1 : u32;
  var u_xlatu71 : u32;
  var u_xlati72 : i32;
  var indexable : array<vec4<u32>, 4u>;
  var u_xlat74 : f32;
  var u_xlatu74 : u32;
  var u_xlati75 : i32;
  var u_xlati74 : i32;
  var u_xlati76 : i32;
  var u_xlatb74 : bool;
  var u_xlatb55 : vec2<bool>;
  var x_4240 : f32;
  var x_4253 : f32;
  var x_4305 : f32;
  var x_4316 : vec3<f32>;
  var u_xlat_precise_vec4 : vec4<f32>;
  var u_xlat_precise_ivec4 : vec4<i32>;
  var u_xlat_precise_bvec4 : vec4<bool>;
  var u_xlat_precise_uvec4 : vec4<u32>;
  let x_13 : vec4<f32> = gl_FragCoord;
  let x_14 : vec3<f32> = vec3<f32>(x_13.x, x_13.y, x_13.z);
  let x_20 : f32 = gl_FragCoord.w;
  hlslcc_FragCoord = vec4<f32>(x_14.x, x_14.y, x_14.z, (1.0f / x_20));
  let x_30 : vec3<f32> = vs_INTERP1;
  let x_31 : vec3<f32> = vs_INTERP1;
  u_xlat0.x = dot(x_30, x_31);
  let x_37 : f32 = u_xlat0.x;
  u_xlat0.x = sqrt(x_37);
  let x_41 : f32 = u_xlat0.x;
  u_xlat0.x = (1.0f / x_41);
  let x_51 : f32 = vs_INTERP2.w;
  u_xlatb22.x = (0.0f < x_51);
  let x_65 : f32 = x_60.unity_WorldTransformParams.w;
  u_xlatb22.y = (x_65 >= 0.0f);
  let x_71 : bool = u_xlatb22.x;
  u_xlat22.x = select(-1.0f, 1.0f, x_71);
  let x_76 : bool = u_xlatb22.y;
  u_xlat22.y = select(-1.0f, 1.0f, x_76);
  let x_80 : f32 = u_xlat22.y;
  let x_82 : f32 = u_xlat22.x;
  u_xlat22.x = (x_80 * x_82);
  let x_86 : vec3<f32> = vs_INTERP1;
  let x_88 : vec4<f32> = vs_INTERP2;
  u_xlat1 = (vec3<f32>(x_86.z, x_86.x, x_86.y) * vec3<f32>(x_88.y, x_88.z, x_88.x));
  let x_91 : vec3<f32> = vs_INTERP1;
  let x_93 : vec4<f32> = vs_INTERP2;
  let x_96 : vec3<f32> = u_xlat1;
  u_xlat1 = ((vec3<f32>(x_91.y, x_91.z, x_91.x) * vec3<f32>(x_93.z, x_93.x, x_93.y)) + -(x_96));
  let x_99 : vec3<f32> = u_xlat22;
  let x_101 : vec3<f32> = u_xlat1;
  u_xlat22 = (vec3<f32>(x_99.x, x_99.x, x_99.x) * x_101);
  let x_103 : vec3<f32> = u_xlat0;
  let x_105 : vec3<f32> = vs_INTERP1;
  u_xlat1 = (vec3<f32>(x_103.x, x_103.x, x_103.x) * x_105);
  let x_108 : vec3<f32> = u_xlat0;
  let x_110 : vec4<f32> = vs_INTERP2;
  let x_112 : vec3<f32> = (vec3<f32>(x_108.x, x_108.x, x_108.x) * vec3<f32>(x_110.x, x_110.y, x_110.z));
  let x_113 : vec4<f32> = u_xlat2;
  u_xlat2 = vec4<f32>(x_112.x, x_112.y, x_112.z, x_113.w);
  let x_116 : vec3<f32> = u_xlat22;
  let x_117 : vec3<f32> = u_xlat0;
  let x_119 : vec3<f32> = (x_116 * vec3<f32>(x_117.x, x_117.x, x_117.x));
  let x_120 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_119.x, x_119.y, x_119.z, x_120.w);
  let x_135 : vec4<f32> = vs_INTERP3;
  let x_142 : f32 = x_139.x_GlobalMipBias.x;
  let x_143 : vec4<f32> = textureSampleBias(Texture2D_B222E8F, samplerTexture2D_B222E8F, vec2<f32>(x_135.x, x_135.y), x_142);
  u_xlat4 = x_143;
  let x_145 : vec4<f32> = u_xlat4;
  let x_152 : vec4<f32> = x_149.Color_C30C7CA3;
  u_xlat5 = (vec3<f32>(x_145.x, x_145.y, x_145.z) * vec3<f32>(x_152.x, x_152.y, x_152.z));
  let x_161 : vec4<f32> = vs_INTERP3;
  let x_164 : f32 = x_139.x_GlobalMipBias.x;
  let x_165 : vec4<f32> = textureSampleBias(Texture2D_D9BFD5F1, samplerTexture2D_D9BFD5F1, vec2<f32>(x_161.x, x_161.y), x_164);
  u_xlat6 = vec4<f32>(x_165.w, x_165.x, x_165.y, x_165.z);
  let x_168 : vec4<f32> = u_xlat6;
  u_xlat7 = ((vec4<f32>(x_168.y, x_168.z, x_168.w, x_168.x) * vec4<f32>(2.0f, 2.0f, 2.0f, 2.0f)) + vec4<f32>(-1.0f, -1.0f, -1.0f, -1.0f));
  let x_175 : vec4<f32> = u_xlat7;
  let x_176 : vec4<f32> = u_xlat7;
  u_xlat0.x = dot(x_175, x_176);
  let x_180 : f32 = u_xlat0.x;
  u_xlat0.x = inverseSqrt(x_180);
  let x_184 : vec3<f32> = u_xlat0;
  let x_186 : vec4<f32> = u_xlat7;
  u_xlat28 = (vec3<f32>(x_184.x, x_184.x, x_184.x) * vec3<f32>(x_186.x, x_186.y, x_186.z));
  let x_191 : f32 = vs_INTERP4.y;
  u_xlat0.x = (x_191 * 200.0f);
  let x_196 : f32 = u_xlat0.x;
  u_xlat0.x = min(x_196, 1.0f);
  let x_199 : vec3<f32> = u_xlat0;
  let x_201 : vec4<f32> = u_xlat4;
  let x_203 : vec3<f32> = (vec3<f32>(x_199.x, x_199.x, x_199.x) * vec3<f32>(x_201.x, x_201.y, x_201.z));
  let x_204 : vec4<f32> = u_xlat4;
  u_xlat4 = vec4<f32>(x_203.x, x_203.y, x_203.z, x_204.w);
  let x_206 : vec4<f32> = u_xlat3;
  let x_208 : vec3<f32> = u_xlat28;
  let x_210 : vec3<f32> = (vec3<f32>(x_206.x, x_206.y, x_206.z) * vec3<f32>(x_208.y, x_208.y, x_208.y));
  let x_211 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_210.x, x_210.y, x_210.z, x_211.w);
  let x_213 : vec3<f32> = u_xlat28;
  let x_215 : vec4<f32> = u_xlat2;
  let x_218 : vec4<f32> = u_xlat3;
  let x_220 : vec3<f32> = ((vec3<f32>(x_213.x, x_213.x, x_213.x) * vec3<f32>(x_215.x, x_215.y, x_215.z)) + vec3<f32>(x_218.x, x_218.y, x_218.z));
  let x_221 : vec4<f32> = u_xlat2;
  u_xlat2 = vec4<f32>(x_220.x, x_220.y, x_220.z, x_221.w);
  let x_223 : vec3<f32> = u_xlat28;
  let x_225 : vec3<f32> = u_xlat1;
  let x_227 : vec4<f32> = u_xlat2;
  u_xlat1 = ((vec3<f32>(x_223.z, x_223.z, x_223.z) * x_225) + vec3<f32>(x_227.x, x_227.y, x_227.z));
  let x_230 : vec3<f32> = u_xlat1;
  let x_231 : vec3<f32> = u_xlat1;
  u_xlat0.x = dot(x_230, x_231);
  let x_235 : f32 = u_xlat0.x;
  u_xlat0.x = max(x_235, 1.17549435e-37f);
  let x_240 : f32 = u_xlat0.x;
  u_xlat0.x = inverseSqrt(x_240);
  let x_243 : vec3<f32> = u_xlat0;
  let x_245 : vec3<f32> = u_xlat1;
  u_xlat1 = (vec3<f32>(x_243.x, x_243.x, x_243.x) * x_245);
  let x_248 : vec3<f32> = vs_INTERP0;
  let x_255 : vec4<f32> = x_253.x_CascadeShadowSplitSpheres0;
  let x_258 : vec3<f32> = (x_248 + -(vec3<f32>(x_255.x, x_255.y, x_255.z)));
  let x_259 : vec4<f32> = u_xlat2;
  u_xlat2 = vec4<f32>(x_258.x, x_258.y, x_258.z, x_259.w);
  let x_261 : vec3<f32> = vs_INTERP0;
  let x_264 : vec4<f32> = x_253.x_CascadeShadowSplitSpheres1;
  let x_267 : vec3<f32> = (x_261 + -(vec3<f32>(x_264.x, x_264.y, x_264.z)));
  let x_268 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_267.x, x_267.y, x_267.z, x_268.w);
  let x_270 : vec3<f32> = vs_INTERP0;
  let x_272 : vec4<f32> = x_253.x_CascadeShadowSplitSpheres2;
  let x_275 : vec3<f32> = (x_270 + -(vec3<f32>(x_272.x, x_272.y, x_272.z)));
  let x_276 : vec4<f32> = u_xlat7;
  u_xlat7 = vec4<f32>(x_275.x, x_275.y, x_275.z, x_276.w);
  let x_279 : vec3<f32> = vs_INTERP0;
  let x_282 : vec4<f32> = x_253.x_CascadeShadowSplitSpheres3;
  let x_285 : vec3<f32> = (x_279 + -(vec3<f32>(x_282.x, x_282.y, x_282.z)));
  let x_286 : vec4<f32> = u_xlat8;
  u_xlat8 = vec4<f32>(x_285.x, x_285.y, x_285.z, x_286.w);
  let x_288 : vec4<f32> = u_xlat2;
  let x_290 : vec4<f32> = u_xlat2;
  u_xlat2.x = dot(vec3<f32>(x_288.x, x_288.y, x_288.z), vec3<f32>(x_290.x, x_290.y, x_290.z));
  let x_294 : vec4<f32> = u_xlat3;
  let x_296 : vec4<f32> = u_xlat3;
  u_xlat2.y = dot(vec3<f32>(x_294.x, x_294.y, x_294.z), vec3<f32>(x_296.x, x_296.y, x_296.z));
  let x_300 : vec4<f32> = u_xlat7;
  let x_302 : vec4<f32> = u_xlat7;
  u_xlat2.z = dot(vec3<f32>(x_300.x, x_300.y, x_300.z), vec3<f32>(x_302.x, x_302.y, x_302.z));
  let x_306 : vec4<f32> = u_xlat8;
  let x_308 : vec4<f32> = u_xlat8;
  u_xlat2.w = dot(vec3<f32>(x_306.x, x_306.y, x_306.z), vec3<f32>(x_308.x, x_308.y, x_308.z));
  let x_315 : vec4<f32> = u_xlat2;
  let x_318 : vec4<f32> = x_253.x_CascadeShadowSplitSphereRadii;
  u_xlatb2 = (x_315 < x_318);
  let x_321 : bool = u_xlatb2.x;
  u_xlat3.x = select(0.0f, 1.0f, x_321);
  let x_325 : bool = u_xlatb2.y;
  u_xlat3.y = select(0.0f, 1.0f, x_325);
  let x_329 : bool = u_xlatb2.z;
  u_xlat3.z = select(0.0f, 1.0f, x_329);
  let x_333 : bool = u_xlatb2.w;
  u_xlat3.w = select(0.0f, 1.0f, x_333);
  let x_337 : bool = u_xlatb2.x;
  u_xlat2.x = select(-0.0f, -1.0f, x_337);
  let x_342 : bool = u_xlatb2.y;
  u_xlat2.y = select(-0.0f, -1.0f, x_342);
  let x_346 : bool = u_xlatb2.z;
  u_xlat2.z = select(-0.0f, -1.0f, x_346);
  let x_349 : vec4<f32> = u_xlat2;
  let x_351 : vec4<f32> = u_xlat3;
  let x_353 : vec3<f32> = (vec3<f32>(x_349.x, x_349.y, x_349.z) + vec3<f32>(x_351.y, x_351.z, x_351.w));
  let x_354 : vec4<f32> = u_xlat2;
  u_xlat2 = vec4<f32>(x_353.x, x_353.y, x_353.z, x_354.w);
  let x_356 : vec4<f32> = u_xlat2;
  let x_359 : vec3<f32> = max(vec3<f32>(x_356.x, x_356.y, x_356.z), vec3<f32>(0.0f, 0.0f, 0.0f));
  let x_360 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_360.x, x_359.x, x_359.y, x_359.z);
  let x_362 : vec4<f32> = u_xlat3;
  u_xlat0.x = dot(x_362, vec4<f32>(4.0f, 3.0f, 2.0f, 1.0f));
  let x_369 : f32 = u_xlat0.x;
  u_xlat0.x = (-(x_369) + 4.0f);
  let x_376 : f32 = u_xlat0.x;
  u_xlatu0 = u32(x_376);
  let x_380 : u32 = u_xlatu0;
  u_xlati0 = (bitcast<i32>(x_380) << bitcast<u32>(2i));
  let x_383 : vec3<f32> = vs_INTERP0;
  let x_386 : i32 = u_xlati0;
  let x_389 : i32 = u_xlati0;
  let x_393 : vec4<f32> = x_253.x_MainLightWorldToShadow[((x_386 + 1i) / 4i)][((x_389 + 1i) % 4i)];
  let x_395 : vec3<f32> = (vec3<f32>(x_383.y, x_383.y, x_383.y) * vec3<f32>(x_393.x, x_393.y, x_393.z));
  let x_396 : vec4<f32> = u_xlat2;
  u_xlat2 = vec4<f32>(x_395.x, x_395.y, x_395.z, x_396.w);
  let x_398 : i32 = u_xlati0;
  let x_400 : i32 = u_xlati0;
  let x_403 : vec4<f32> = x_253.x_MainLightWorldToShadow[(x_398 / 4i)][(x_400 % 4i)];
  let x_405 : vec3<f32> = vs_INTERP0;
  let x_408 : vec4<f32> = u_xlat2;
  let x_410 : vec3<f32> = ((vec3<f32>(x_403.x, x_403.y, x_403.z) * vec3<f32>(x_405.x, x_405.x, x_405.x)) + vec3<f32>(x_408.x, x_408.y, x_408.z));
  let x_411 : vec4<f32> = u_xlat2;
  u_xlat2 = vec4<f32>(x_410.x, x_410.y, x_410.z, x_411.w);
  let x_413 : i32 = u_xlati0;
  let x_416 : i32 = u_xlati0;
  let x_420 : vec4<f32> = x_253.x_MainLightWorldToShadow[((x_413 + 2i) / 4i)][((x_416 + 2i) % 4i)];
  let x_422 : vec3<f32> = vs_INTERP0;
  let x_425 : vec4<f32> = u_xlat2;
  let x_427 : vec3<f32> = ((vec3<f32>(x_420.x, x_420.y, x_420.z) * vec3<f32>(x_422.z, x_422.z, x_422.z)) + vec3<f32>(x_425.x, x_425.y, x_425.z));
  let x_428 : vec4<f32> = u_xlat2;
  u_xlat2 = vec4<f32>(x_427.x, x_427.y, x_427.z, x_428.w);
  let x_430 : vec4<f32> = u_xlat2;
  let x_432 : i32 = u_xlati0;
  let x_435 : i32 = u_xlati0;
  let x_439 : vec4<f32> = x_253.x_MainLightWorldToShadow[((x_432 + 3i) / 4i)][((x_435 + 3i) % 4i)];
  let x_441 : vec3<f32> = (vec3<f32>(x_430.x, x_430.y, x_430.z) + vec3<f32>(x_439.x, x_439.y, x_439.z));
  let x_442 : vec4<f32> = u_xlat2;
  u_xlat2 = vec4<f32>(x_441.x, x_441.y, x_441.z, x_442.w);
  let x_447 : f32 = x_253.x_MainLightShadowParams.y;
  u_xlatb0 = (0.0f < x_447);
  let x_449 : bool = u_xlatb0;
  if (x_449) {
    let x_454 : f32 = x_253.x_MainLightShadowParams.y;
    u_xlatb67 = (x_454 == 1.0f);
    let x_456 : bool = u_xlatb67;
    if (x_456) {
      let x_459 : vec4<f32> = u_xlat2;
      let x_463 : vec4<f32> = x_253.x_MainLightShadowOffset0;
      u_xlat3 = (vec4<f32>(x_459.x, x_459.y, x_459.x, x_459.y) + x_463);
      let x_466 : vec4<f32> = u_xlat3;
      let x_467 : vec2<f32> = vec2<f32>(x_466.x, x_466.y);
      let x_469 : f32 = u_xlat2.z;
      txVec0 = vec3<f32>(x_467.x, x_467.y, x_469);
      let x_481 : vec3<f32> = txVec0;
      let x_483 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_481.xy, x_481.z);
      u_xlat7.x = x_483;
      let x_486 : vec4<f32> = u_xlat3;
      let x_487 : vec2<f32> = vec2<f32>(x_486.z, x_486.w);
      let x_489 : f32 = u_xlat2.z;
      txVec1 = vec3<f32>(x_487.x, x_487.y, x_489);
      let x_496 : vec3<f32> = txVec1;
      let x_498 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_496.xy, x_496.z);
      u_xlat7.y = x_498;
      let x_500 : vec4<f32> = u_xlat2;
      let x_504 : vec4<f32> = x_253.x_MainLightShadowOffset1;
      u_xlat3 = (vec4<f32>(x_500.x, x_500.y, x_500.x, x_500.y) + x_504);
      let x_507 : vec4<f32> = u_xlat3;
      let x_508 : vec2<f32> = vec2<f32>(x_507.x, x_507.y);
      let x_510 : f32 = u_xlat2.z;
      txVec2 = vec3<f32>(x_508.x, x_508.y, x_510);
      let x_517 : vec3<f32> = txVec2;
      let x_519 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_517.xy, x_517.z);
      u_xlat7.z = x_519;
      let x_522 : vec4<f32> = u_xlat3;
      let x_523 : vec2<f32> = vec2<f32>(x_522.z, x_522.w);
      let x_525 : f32 = u_xlat2.z;
      txVec3 = vec3<f32>(x_523.x, x_523.y, x_525);
      let x_532 : vec3<f32> = txVec3;
      let x_534 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_532.xy, x_532.z);
      u_xlat7.w = x_534;
      let x_537 : vec4<f32> = u_xlat7;
      u_xlat67 = dot(x_537, vec4<f32>(0.25f, 0.25f, 0.25f, 0.25f));
    } else {
      let x_544 : f32 = x_253.x_MainLightShadowParams.y;
      u_xlatb68 = (x_544 == 2.0f);
      let x_546 : bool = u_xlatb68;
      if (x_546) {
        let x_549 : vec4<f32> = u_xlat2;
        let x_553 : vec4<f32> = x_253.x_MainLightShadowmapSize;
        let x_558 : vec2<f32> = ((vec2<f32>(x_549.x, x_549.y) * vec2<f32>(x_553.z, x_553.w)) + vec2<f32>(0.5f, 0.5f));
        let x_559 : vec4<f32> = u_xlat3;
        u_xlat3 = vec4<f32>(x_558.x, x_558.y, x_559.z, x_559.w);
        let x_561 : vec4<f32> = u_xlat3;
        let x_563 : vec2<f32> = floor(vec2<f32>(x_561.x, x_561.y));
        let x_564 : vec4<f32> = u_xlat3;
        u_xlat3 = vec4<f32>(x_563.x, x_563.y, x_564.z, x_564.w);
        let x_568 : vec4<f32> = u_xlat2;
        let x_571 : vec4<f32> = x_253.x_MainLightShadowmapSize;
        let x_574 : vec4<f32> = u_xlat3;
        u_xlat47 = ((vec2<f32>(x_568.x, x_568.y) * vec2<f32>(x_571.z, x_571.w)) + -(vec2<f32>(x_574.x, x_574.y)));
        let x_578 : vec2<f32> = u_xlat47;
        u_xlat7 = (vec4<f32>(x_578.x, x_578.x, x_578.y, x_578.y) + vec4<f32>(0.5f, 1.0f, 0.5f, 1.0f));
        let x_582 : vec4<f32> = u_xlat7;
        let x_584 : vec4<f32> = u_xlat7;
        u_xlat8 = (vec4<f32>(x_582.x, x_582.x, x_582.z, x_582.z) * vec4<f32>(x_584.x, x_584.x, x_584.z, x_584.z));
        let x_587 : vec4<f32> = u_xlat8;
        let x_591 : vec2<f32> = (vec2<f32>(x_587.y, x_587.w) * vec2<f32>(0.079999998f, 0.079999998f));
        let x_592 : vec4<f32> = u_xlat7;
        u_xlat7 = vec4<f32>(x_591.x, x_592.y, x_591.y, x_592.w);
        let x_594 : vec4<f32> = u_xlat8;
        let x_597 : vec2<f32> = u_xlat47;
        let x_599 : vec2<f32> = ((vec2<f32>(x_594.x, x_594.z) * vec2<f32>(0.5f, 0.5f)) + -(x_597));
        let x_600 : vec4<f32> = u_xlat8;
        u_xlat8 = vec4<f32>(x_599.x, x_599.y, x_600.z, x_600.w);
        let x_603 : vec2<f32> = u_xlat47;
        u_xlat52 = (-(x_603) + vec2<f32>(1.0f, 1.0f));
        let x_608 : vec2<f32> = u_xlat47;
        let x_610 : vec2<f32> = min(x_608, vec2<f32>(0.0f, 0.0f));
        let x_611 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_610.x, x_610.y, x_611.z, x_611.w);
        let x_613 : vec4<f32> = u_xlat9;
        let x_616 : vec4<f32> = u_xlat9;
        let x_619 : vec2<f32> = u_xlat52;
        let x_620 : vec2<f32> = ((-(vec2<f32>(x_613.x, x_613.y)) * vec2<f32>(x_616.x, x_616.y)) + x_619);
        let x_621 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_620.x, x_620.y, x_621.z, x_621.w);
        let x_623 : vec2<f32> = u_xlat47;
        u_xlat47 = max(x_623, vec2<f32>(0.0f, 0.0f));
        let x_625 : vec2<f32> = u_xlat47;
        let x_627 : vec2<f32> = u_xlat47;
        let x_629 : vec4<f32> = u_xlat7;
        u_xlat47 = ((-(x_625) * x_627) + vec2<f32>(x_629.y, x_629.w));
        let x_632 : vec4<f32> = u_xlat9;
        let x_634 : vec2<f32> = (vec2<f32>(x_632.x, x_632.y) + vec2<f32>(1.0f, 1.0f));
        let x_635 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_634.x, x_634.y, x_635.z, x_635.w);
        let x_637 : vec2<f32> = u_xlat47;
        u_xlat47 = (x_637 + vec2<f32>(1.0f, 1.0f));
        let x_640 : vec4<f32> = u_xlat8;
        let x_644 : vec2<f32> = (vec2<f32>(x_640.x, x_640.y) * vec2<f32>(0.159999996f, 0.159999996f));
        let x_645 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_644.x, x_644.y, x_645.z, x_645.w);
        let x_647 : vec2<f32> = u_xlat52;
        let x_648 : vec2<f32> = (x_647 * vec2<f32>(0.159999996f, 0.159999996f));
        let x_649 : vec4<f32> = u_xlat8;
        u_xlat8 = vec4<f32>(x_648.x, x_648.y, x_649.z, x_649.w);
        let x_651 : vec4<f32> = u_xlat9;
        let x_653 : vec2<f32> = (vec2<f32>(x_651.x, x_651.y) * vec2<f32>(0.159999996f, 0.159999996f));
        let x_654 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_653.x, x_653.y, x_654.z, x_654.w);
        let x_657 : vec2<f32> = u_xlat47;
        let x_658 : vec2<f32> = (x_657 * vec2<f32>(0.159999996f, 0.159999996f));
        let x_659 : vec4<f32> = u_xlat11;
        u_xlat11 = vec4<f32>(x_658.x, x_658.y, x_659.z, x_659.w);
        let x_661 : vec4<f32> = u_xlat7;
        u_xlat47 = (vec2<f32>(x_661.y, x_661.w) * vec2<f32>(0.159999996f, 0.159999996f));
        let x_665 : f32 = u_xlat9.x;
        u_xlat10.z = x_665;
        let x_668 : f32 = u_xlat47.x;
        u_xlat10.w = x_668;
        let x_671 : f32 = u_xlat11.x;
        u_xlat8.z = x_671;
        let x_674 : f32 = u_xlat7.x;
        u_xlat8.w = x_674;
        let x_677 : vec4<f32> = u_xlat8;
        let x_679 : vec4<f32> = u_xlat10;
        u_xlat12 = (vec4<f32>(x_677.z, x_677.w, x_677.x, x_677.z) + vec4<f32>(x_679.z, x_679.w, x_679.x, x_679.z));
        let x_683 : f32 = u_xlat10.y;
        u_xlat9.z = x_683;
        let x_686 : f32 = u_xlat47.y;
        u_xlat9.w = x_686;
        let x_689 : f32 = u_xlat8.y;
        u_xlat11.z = x_689;
        let x_692 : f32 = u_xlat7.z;
        u_xlat11.w = x_692;
        let x_694 : vec4<f32> = u_xlat9;
        let x_696 : vec4<f32> = u_xlat11;
        let x_698 : vec3<f32> = (vec3<f32>(x_694.z, x_694.y, x_694.w) + vec3<f32>(x_696.z, x_696.y, x_696.w));
        let x_699 : vec4<f32> = u_xlat7;
        u_xlat7 = vec4<f32>(x_698.x, x_698.y, x_698.z, x_699.w);
        let x_701 : vec4<f32> = u_xlat8;
        let x_703 : vec4<f32> = u_xlat12;
        let x_705 : vec3<f32> = (vec3<f32>(x_701.x, x_701.z, x_701.w) / vec3<f32>(x_703.z, x_703.w, x_703.y));
        let x_706 : vec4<f32> = u_xlat8;
        u_xlat8 = vec4<f32>(x_705.x, x_705.y, x_705.z, x_706.w);
        let x_708 : vec4<f32> = u_xlat8;
        let x_714 : vec3<f32> = (vec3<f32>(x_708.x, x_708.y, x_708.z) + vec3<f32>(-2.5f, -0.5f, 1.5f));
        let x_715 : vec4<f32> = u_xlat8;
        u_xlat8 = vec4<f32>(x_714.x, x_714.y, x_714.z, x_715.w);
        let x_717 : vec4<f32> = u_xlat11;
        let x_719 : vec4<f32> = u_xlat7;
        let x_721 : vec3<f32> = (vec3<f32>(x_717.z, x_717.y, x_717.w) / vec3<f32>(x_719.x, x_719.y, x_719.z));
        let x_722 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_721.x, x_721.y, x_721.z, x_722.w);
        let x_724 : vec4<f32> = u_xlat9;
        let x_726 : vec3<f32> = (vec3<f32>(x_724.x, x_724.y, x_724.z) + vec3<f32>(-2.5f, -0.5f, 1.5f));
        let x_727 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_726.x, x_726.y, x_726.z, x_727.w);
        let x_729 : vec4<f32> = u_xlat8;
        let x_732 : vec4<f32> = x_253.x_MainLightShadowmapSize;
        let x_734 : vec3<f32> = (vec3<f32>(x_729.y, x_729.x, x_729.z) * vec3<f32>(x_732.x, x_732.x, x_732.x));
        let x_735 : vec4<f32> = u_xlat8;
        u_xlat8 = vec4<f32>(x_734.x, x_734.y, x_734.z, x_735.w);
        let x_737 : vec4<f32> = u_xlat9;
        let x_740 : vec4<f32> = x_253.x_MainLightShadowmapSize;
        let x_742 : vec3<f32> = (vec3<f32>(x_737.x, x_737.y, x_737.z) * vec3<f32>(x_740.y, x_740.y, x_740.y));
        let x_743 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_742.x, x_742.y, x_742.z, x_743.w);
        let x_746 : f32 = u_xlat9.x;
        u_xlat8.w = x_746;
        let x_748 : vec4<f32> = u_xlat3;
        let x_751 : vec4<f32> = x_253.x_MainLightShadowmapSize;
        let x_754 : vec4<f32> = u_xlat8;
        u_xlat10 = ((vec4<f32>(x_748.x, x_748.y, x_748.x, x_748.y) * vec4<f32>(x_751.x, x_751.y, x_751.x, x_751.y)) + vec4<f32>(x_754.y, x_754.w, x_754.x, x_754.w));
        let x_757 : vec4<f32> = u_xlat3;
        let x_760 : vec4<f32> = x_253.x_MainLightShadowmapSize;
        let x_763 : vec4<f32> = u_xlat8;
        u_xlat47 = ((vec2<f32>(x_757.x, x_757.y) * vec2<f32>(x_760.x, x_760.y)) + vec2<f32>(x_763.z, x_763.w));
        let x_767 : f32 = u_xlat8.y;
        u_xlat9.w = x_767;
        let x_769 : vec4<f32> = u_xlat9;
        let x_770 : vec2<f32> = vec2<f32>(x_769.y, x_769.z);
        let x_771 : vec4<f32> = u_xlat8;
        u_xlat8 = vec4<f32>(x_771.x, x_770.x, x_771.z, x_770.y);
        let x_773 : vec4<f32> = u_xlat3;
        let x_776 : vec4<f32> = x_253.x_MainLightShadowmapSize;
        let x_779 : vec4<f32> = u_xlat8;
        u_xlat11 = ((vec4<f32>(x_773.x, x_773.y, x_773.x, x_773.y) * vec4<f32>(x_776.x, x_776.y, x_776.x, x_776.y)) + vec4<f32>(x_779.x, x_779.y, x_779.z, x_779.y));
        let x_782 : vec4<f32> = u_xlat3;
        let x_785 : vec4<f32> = x_253.x_MainLightShadowmapSize;
        let x_788 : vec4<f32> = u_xlat9;
        u_xlat9 = ((vec4<f32>(x_782.x, x_782.y, x_782.x, x_782.y) * vec4<f32>(x_785.x, x_785.y, x_785.x, x_785.y)) + vec4<f32>(x_788.w, x_788.y, x_788.w, x_788.z));
        let x_791 : vec4<f32> = u_xlat3;
        let x_794 : vec4<f32> = x_253.x_MainLightShadowmapSize;
        let x_797 : vec4<f32> = u_xlat8;
        u_xlat8 = ((vec4<f32>(x_791.x, x_791.y, x_791.x, x_791.y) * vec4<f32>(x_794.x, x_794.y, x_794.x, x_794.y)) + vec4<f32>(x_797.x, x_797.w, x_797.z, x_797.w));
        let x_801 : vec4<f32> = u_xlat7;
        let x_803 : vec4<f32> = u_xlat12;
        u_xlat13 = (vec4<f32>(x_801.x, x_801.x, x_801.x, x_801.y) * vec4<f32>(x_803.z, x_803.w, x_803.y, x_803.z));
        let x_807 : vec4<f32> = u_xlat7;
        let x_809 : vec4<f32> = u_xlat12;
        u_xlat14 = (vec4<f32>(x_807.y, x_807.y, x_807.z, x_807.z) * x_809);
        let x_813 : f32 = u_xlat7.z;
        let x_815 : f32 = u_xlat12.y;
        u_xlat68 = (x_813 * x_815);
        let x_818 : vec4<f32> = u_xlat10;
        let x_819 : vec2<f32> = vec2<f32>(x_818.x, x_818.y);
        let x_821 : f32 = u_xlat2.z;
        txVec4 = vec3<f32>(x_819.x, x_819.y, x_821);
        let x_828 : vec3<f32> = txVec4;
        let x_830 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_828.xy, x_828.z);
        u_xlat3.x = x_830;
        let x_833 : vec4<f32> = u_xlat10;
        let x_834 : vec2<f32> = vec2<f32>(x_833.z, x_833.w);
        let x_836 : f32 = u_xlat2.z;
        txVec5 = vec3<f32>(x_834.x, x_834.y, x_836);
        let x_844 : vec3<f32> = txVec5;
        let x_846 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_844.xy, x_844.z);
        u_xlat25.x = x_846;
        let x_849 : f32 = u_xlat25.x;
        let x_851 : f32 = u_xlat13.y;
        u_xlat25.x = (x_849 * x_851);
        let x_855 : f32 = u_xlat13.x;
        let x_857 : f32 = u_xlat3.x;
        let x_860 : f32 = u_xlat25.x;
        u_xlat3.x = ((x_855 * x_857) + x_860);
        let x_864 : vec2<f32> = u_xlat47;
        let x_866 : f32 = u_xlat2.z;
        txVec6 = vec3<f32>(x_864.x, x_864.y, x_866);
        let x_873 : vec3<f32> = txVec6;
        let x_875 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_873.xy, x_873.z);
        u_xlat25.x = x_875;
        let x_878 : f32 = u_xlat13.z;
        let x_880 : f32 = u_xlat25.x;
        let x_883 : f32 = u_xlat3.x;
        u_xlat3.x = ((x_878 * x_880) + x_883);
        let x_887 : vec4<f32> = u_xlat9;
        let x_888 : vec2<f32> = vec2<f32>(x_887.x, x_887.y);
        let x_890 : f32 = u_xlat2.z;
        txVec7 = vec3<f32>(x_888.x, x_888.y, x_890);
        let x_897 : vec3<f32> = txVec7;
        let x_899 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_897.xy, x_897.z);
        u_xlat25.x = x_899;
        let x_902 : f32 = u_xlat13.w;
        let x_904 : f32 = u_xlat25.x;
        let x_907 : f32 = u_xlat3.x;
        u_xlat3.x = ((x_902 * x_904) + x_907);
        let x_911 : vec4<f32> = u_xlat11;
        let x_912 : vec2<f32> = vec2<f32>(x_911.x, x_911.y);
        let x_914 : f32 = u_xlat2.z;
        txVec8 = vec3<f32>(x_912.x, x_912.y, x_914);
        let x_921 : vec3<f32> = txVec8;
        let x_923 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_921.xy, x_921.z);
        u_xlat25.x = x_923;
        let x_926 : f32 = u_xlat14.x;
        let x_928 : f32 = u_xlat25.x;
        let x_931 : f32 = u_xlat3.x;
        u_xlat3.x = ((x_926 * x_928) + x_931);
        let x_935 : vec4<f32> = u_xlat11;
        let x_936 : vec2<f32> = vec2<f32>(x_935.z, x_935.w);
        let x_938 : f32 = u_xlat2.z;
        txVec9 = vec3<f32>(x_936.x, x_936.y, x_938);
        let x_945 : vec3<f32> = txVec9;
        let x_947 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_945.xy, x_945.z);
        u_xlat25.x = x_947;
        let x_950 : f32 = u_xlat14.y;
        let x_952 : f32 = u_xlat25.x;
        let x_955 : f32 = u_xlat3.x;
        u_xlat3.x = ((x_950 * x_952) + x_955);
        let x_959 : vec4<f32> = u_xlat9;
        let x_960 : vec2<f32> = vec2<f32>(x_959.z, x_959.w);
        let x_962 : f32 = u_xlat2.z;
        txVec10 = vec3<f32>(x_960.x, x_960.y, x_962);
        let x_969 : vec3<f32> = txVec10;
        let x_971 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_969.xy, x_969.z);
        u_xlat25.x = x_971;
        let x_974 : f32 = u_xlat14.z;
        let x_976 : f32 = u_xlat25.x;
        let x_979 : f32 = u_xlat3.x;
        u_xlat3.x = ((x_974 * x_976) + x_979);
        let x_983 : vec4<f32> = u_xlat8;
        let x_984 : vec2<f32> = vec2<f32>(x_983.x, x_983.y);
        let x_986 : f32 = u_xlat2.z;
        txVec11 = vec3<f32>(x_984.x, x_984.y, x_986);
        let x_993 : vec3<f32> = txVec11;
        let x_995 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_993.xy, x_993.z);
        u_xlat25.x = x_995;
        let x_998 : f32 = u_xlat14.w;
        let x_1000 : f32 = u_xlat25.x;
        let x_1003 : f32 = u_xlat3.x;
        u_xlat3.x = ((x_998 * x_1000) + x_1003);
        let x_1007 : vec4<f32> = u_xlat8;
        let x_1008 : vec2<f32> = vec2<f32>(x_1007.z, x_1007.w);
        let x_1010 : f32 = u_xlat2.z;
        txVec12 = vec3<f32>(x_1008.x, x_1008.y, x_1010);
        let x_1017 : vec3<f32> = txVec12;
        let x_1019 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1017.xy, x_1017.z);
        u_xlat25.x = x_1019;
        let x_1021 : f32 = u_xlat68;
        let x_1023 : f32 = u_xlat25.x;
        let x_1026 : f32 = u_xlat3.x;
        u_xlat67 = ((x_1021 * x_1023) + x_1026);
      } else {
        let x_1029 : vec4<f32> = u_xlat2;
        let x_1032 : vec4<f32> = x_253.x_MainLightShadowmapSize;
        let x_1035 : vec2<f32> = ((vec2<f32>(x_1029.x, x_1029.y) * vec2<f32>(x_1032.z, x_1032.w)) + vec2<f32>(0.5f, 0.5f));
        let x_1036 : vec4<f32> = u_xlat3;
        u_xlat3 = vec4<f32>(x_1035.x, x_1035.y, x_1036.z, x_1036.w);
        let x_1038 : vec4<f32> = u_xlat3;
        let x_1040 : vec2<f32> = floor(vec2<f32>(x_1038.x, x_1038.y));
        let x_1041 : vec4<f32> = u_xlat3;
        u_xlat3 = vec4<f32>(x_1040.x, x_1040.y, x_1041.z, x_1041.w);
        let x_1043 : vec4<f32> = u_xlat2;
        let x_1046 : vec4<f32> = x_253.x_MainLightShadowmapSize;
        let x_1049 : vec4<f32> = u_xlat3;
        u_xlat47 = ((vec2<f32>(x_1043.x, x_1043.y) * vec2<f32>(x_1046.z, x_1046.w)) + -(vec2<f32>(x_1049.x, x_1049.y)));
        let x_1053 : vec2<f32> = u_xlat47;
        u_xlat7 = (vec4<f32>(x_1053.x, x_1053.x, x_1053.y, x_1053.y) + vec4<f32>(0.5f, 1.0f, 0.5f, 1.0f));
        let x_1056 : vec4<f32> = u_xlat7;
        let x_1058 : vec4<f32> = u_xlat7;
        u_xlat8 = (vec4<f32>(x_1056.x, x_1056.x, x_1056.z, x_1056.z) * vec4<f32>(x_1058.x, x_1058.x, x_1058.z, x_1058.z));
        let x_1061 : vec4<f32> = u_xlat8;
        let x_1065 : vec2<f32> = (vec2<f32>(x_1061.y, x_1061.w) * vec2<f32>(0.040816002f, 0.040816002f));
        let x_1066 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_1066.x, x_1065.x, x_1066.z, x_1065.y);
        let x_1068 : vec4<f32> = u_xlat8;
        let x_1071 : vec2<f32> = u_xlat47;
        let x_1073 : vec2<f32> = ((vec2<f32>(x_1068.x, x_1068.z) * vec2<f32>(0.5f, 0.5f)) + -(x_1071));
        let x_1074 : vec4<f32> = u_xlat7;
        u_xlat7 = vec4<f32>(x_1073.x, x_1074.y, x_1073.y, x_1074.w);
        let x_1076 : vec2<f32> = u_xlat47;
        let x_1078 : vec2<f32> = (-(x_1076) + vec2<f32>(1.0f, 1.0f));
        let x_1079 : vec4<f32> = u_xlat8;
        u_xlat8 = vec4<f32>(x_1078.x, x_1078.y, x_1079.z, x_1079.w);
        let x_1081 : vec2<f32> = u_xlat47;
        u_xlat52 = min(x_1081, vec2<f32>(0.0f, 0.0f));
        let x_1083 : vec2<f32> = u_xlat52;
        let x_1085 : vec2<f32> = u_xlat52;
        let x_1087 : vec4<f32> = u_xlat8;
        let x_1089 : vec2<f32> = ((-(x_1083) * x_1085) + vec2<f32>(x_1087.x, x_1087.y));
        let x_1090 : vec4<f32> = u_xlat8;
        u_xlat8 = vec4<f32>(x_1089.x, x_1089.y, x_1090.z, x_1090.w);
        let x_1092 : vec2<f32> = u_xlat47;
        u_xlat52 = max(x_1092, vec2<f32>(0.0f, 0.0f));
        let x_1095 : vec2<f32> = u_xlat52;
        let x_1097 : vec2<f32> = u_xlat52;
        let x_1099 : vec4<f32> = u_xlat7;
        let x_1101 : vec2<f32> = ((-(x_1095) * x_1097) + vec2<f32>(x_1099.y, x_1099.w));
        let x_1102 : vec3<f32> = u_xlat29;
        u_xlat29 = vec3<f32>(x_1101.x, x_1102.y, x_1101.y);
        let x_1104 : vec4<f32> = u_xlat8;
        let x_1107 : vec2<f32> = (vec2<f32>(x_1104.x, x_1104.y) + vec2<f32>(2.0f, 2.0f));
        let x_1108 : vec4<f32> = u_xlat8;
        u_xlat8 = vec4<f32>(x_1107.x, x_1107.y, x_1108.z, x_1108.w);
        let x_1110 : vec3<f32> = u_xlat29;
        let x_1112 : vec2<f32> = (vec2<f32>(x_1110.x, x_1110.z) + vec2<f32>(2.0f, 2.0f));
        let x_1113 : vec4<f32> = u_xlat7;
        u_xlat7 = vec4<f32>(x_1113.x, x_1112.x, x_1113.z, x_1112.y);
        let x_1116 : f32 = u_xlat7.y;
        u_xlat10.z = (x_1116 * 0.081632003f);
        let x_1120 : vec4<f32> = u_xlat7;
        let x_1123 : vec3<f32> = (vec3<f32>(x_1120.z, x_1120.x, x_1120.w) * vec3<f32>(0.081632003f, 0.081632003f, 0.081632003f));
        let x_1124 : vec4<f32> = u_xlat11;
        u_xlat11 = vec4<f32>(x_1123.x, x_1123.y, x_1123.z, x_1124.w);
        let x_1126 : vec4<f32> = u_xlat8;
        let x_1129 : vec2<f32> = (vec2<f32>(x_1126.x, x_1126.y) * vec2<f32>(0.081632003f, 0.081632003f));
        let x_1130 : vec4<f32> = u_xlat7;
        u_xlat7 = vec4<f32>(x_1129.x, x_1129.y, x_1130.z, x_1130.w);
        let x_1133 : f32 = u_xlat11.y;
        u_xlat10.x = x_1133;
        let x_1135 : vec2<f32> = u_xlat47;
        let x_1142 : vec2<f32> = ((vec2<f32>(x_1135.x, x_1135.x) * vec2<f32>(-0.081632003f, 0.081632003f)) + vec2<f32>(0.163264006f, 0.081632003f));
        let x_1143 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_1143.x, x_1142.x, x_1143.z, x_1142.y);
        let x_1145 : vec2<f32> = u_xlat47;
        let x_1149 : vec2<f32> = ((vec2<f32>(x_1145.x, x_1145.x) * vec2<f32>(-0.081632003f, 0.081632003f)) + vec2<f32>(0.081632003f, 0.163264006f));
        let x_1150 : vec4<f32> = u_xlat8;
        u_xlat8 = vec4<f32>(x_1149.x, x_1150.y, x_1149.y, x_1150.w);
        let x_1153 : f32 = u_xlat7.x;
        u_xlat8.y = x_1153;
        let x_1156 : f32 = u_xlat9.y;
        u_xlat8.w = x_1156;
        let x_1158 : vec4<f32> = u_xlat8;
        let x_1159 : vec4<f32> = u_xlat10;
        u_xlat10 = (x_1158 + x_1159);
        let x_1161 : vec2<f32> = u_xlat47;
        let x_1164 : vec2<f32> = ((vec2<f32>(x_1161.y, x_1161.y) * vec2<f32>(-0.081632003f, 0.081632003f)) + vec2<f32>(0.163264006f, 0.081632003f));
        let x_1165 : vec4<f32> = u_xlat11;
        u_xlat11 = vec4<f32>(x_1165.x, x_1164.x, x_1165.z, x_1164.y);
        let x_1167 : vec2<f32> = u_xlat47;
        let x_1170 : vec2<f32> = ((vec2<f32>(x_1167.y, x_1167.y) * vec2<f32>(-0.081632003f, 0.081632003f)) + vec2<f32>(0.081632003f, 0.163264006f));
        let x_1171 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_1170.x, x_1171.y, x_1170.y, x_1171.w);
        let x_1174 : f32 = u_xlat7.y;
        u_xlat9.y = x_1174;
        let x_1176 : vec4<f32> = u_xlat9;
        let x_1177 : vec4<f32> = u_xlat11;
        u_xlat7 = (x_1176 + x_1177);
        let x_1179 : vec4<f32> = u_xlat8;
        let x_1180 : vec4<f32> = u_xlat10;
        u_xlat8 = (x_1179 / x_1180);
        let x_1182 : vec4<f32> = u_xlat8;
        u_xlat8 = (x_1182 + vec4<f32>(-3.5f, -1.5f, 0.5f, 2.5f));
        let x_1188 : vec4<f32> = u_xlat9;
        let x_1189 : vec4<f32> = u_xlat7;
        u_xlat9 = (x_1188 / x_1189);
        let x_1191 : vec4<f32> = u_xlat9;
        u_xlat9 = (x_1191 + vec4<f32>(-3.5f, -1.5f, 0.5f, 2.5f));
        let x_1193 : vec4<f32> = u_xlat8;
        let x_1196 : vec4<f32> = x_253.x_MainLightShadowmapSize;
        u_xlat8 = (vec4<f32>(x_1193.w, x_1193.x, x_1193.y, x_1193.z) * vec4<f32>(x_1196.x, x_1196.x, x_1196.x, x_1196.x));
        let x_1199 : vec4<f32> = u_xlat9;
        let x_1202 : vec4<f32> = x_253.x_MainLightShadowmapSize;
        u_xlat9 = (vec4<f32>(x_1199.x, x_1199.w, x_1199.y, x_1199.z) * vec4<f32>(x_1202.y, x_1202.y, x_1202.y, x_1202.y));
        let x_1205 : vec4<f32> = u_xlat8;
        let x_1206 : vec3<f32> = vec3<f32>(x_1205.y, x_1205.z, x_1205.w);
        let x_1207 : vec4<f32> = u_xlat11;
        u_xlat11 = vec4<f32>(x_1206.x, x_1207.y, x_1206.y, x_1206.z);
        let x_1210 : f32 = u_xlat9.x;
        u_xlat11.y = x_1210;
        let x_1212 : vec4<f32> = u_xlat3;
        let x_1215 : vec4<f32> = x_253.x_MainLightShadowmapSize;
        let x_1218 : vec4<f32> = u_xlat11;
        u_xlat12 = ((vec4<f32>(x_1212.x, x_1212.y, x_1212.x, x_1212.y) * vec4<f32>(x_1215.x, x_1215.y, x_1215.x, x_1215.y)) + vec4<f32>(x_1218.x, x_1218.y, x_1218.z, x_1218.y));
        let x_1221 : vec4<f32> = u_xlat3;
        let x_1224 : vec4<f32> = x_253.x_MainLightShadowmapSize;
        let x_1227 : vec4<f32> = u_xlat11;
        u_xlat47 = ((vec2<f32>(x_1221.x, x_1221.y) * vec2<f32>(x_1224.x, x_1224.y)) + vec2<f32>(x_1227.w, x_1227.y));
        let x_1231 : f32 = u_xlat11.y;
        u_xlat8.y = x_1231;
        let x_1234 : f32 = u_xlat9.z;
        u_xlat11.y = x_1234;
        let x_1236 : vec4<f32> = u_xlat3;
        let x_1239 : vec4<f32> = x_253.x_MainLightShadowmapSize;
        let x_1242 : vec4<f32> = u_xlat11;
        u_xlat13 = ((vec4<f32>(x_1236.x, x_1236.y, x_1236.x, x_1236.y) * vec4<f32>(x_1239.x, x_1239.y, x_1239.x, x_1239.y)) + vec4<f32>(x_1242.x, x_1242.y, x_1242.z, x_1242.y));
        let x_1245 : vec4<f32> = u_xlat3;
        let x_1248 : vec4<f32> = x_253.x_MainLightShadowmapSize;
        let x_1251 : vec4<f32> = u_xlat11;
        let x_1253 : vec2<f32> = ((vec2<f32>(x_1245.x, x_1245.y) * vec2<f32>(x_1248.x, x_1248.y)) + vec2<f32>(x_1251.w, x_1251.y));
        let x_1254 : vec4<f32> = u_xlat14;
        u_xlat14 = vec4<f32>(x_1253.x, x_1253.y, x_1254.z, x_1254.w);
        let x_1257 : f32 = u_xlat11.y;
        u_xlat8.z = x_1257;
        let x_1260 : vec4<f32> = u_xlat3;
        let x_1263 : vec4<f32> = x_253.x_MainLightShadowmapSize;
        let x_1266 : vec4<f32> = u_xlat8;
        u_xlat15 = ((vec4<f32>(x_1260.x, x_1260.y, x_1260.x, x_1260.y) * vec4<f32>(x_1263.x, x_1263.y, x_1263.x, x_1263.y)) + vec4<f32>(x_1266.x, x_1266.y, x_1266.x, x_1266.z));
        let x_1270 : f32 = u_xlat9.w;
        u_xlat11.y = x_1270;
        let x_1273 : vec4<f32> = u_xlat3;
        let x_1276 : vec4<f32> = x_253.x_MainLightShadowmapSize;
        let x_1279 : vec4<f32> = u_xlat11;
        u_xlat16 = ((vec4<f32>(x_1273.x, x_1273.y, x_1273.x, x_1273.y) * vec4<f32>(x_1276.x, x_1276.y, x_1276.x, x_1276.y)) + vec4<f32>(x_1279.x, x_1279.y, x_1279.z, x_1279.y));
        let x_1283 : vec4<f32> = u_xlat3;
        let x_1286 : vec4<f32> = x_253.x_MainLightShadowmapSize;
        let x_1289 : vec4<f32> = u_xlat11;
        u_xlat30 = ((vec2<f32>(x_1283.x, x_1283.y) * vec2<f32>(x_1286.x, x_1286.y)) + vec2<f32>(x_1289.w, x_1289.y));
        let x_1293 : f32 = u_xlat11.y;
        u_xlat8.w = x_1293;
        let x_1296 : vec4<f32> = u_xlat3;
        let x_1299 : vec4<f32> = x_253.x_MainLightShadowmapSize;
        let x_1302 : vec4<f32> = u_xlat8;
        u_xlat58 = ((vec2<f32>(x_1296.x, x_1296.y) * vec2<f32>(x_1299.x, x_1299.y)) + vec2<f32>(x_1302.x, x_1302.w));
        let x_1305 : vec4<f32> = u_xlat11;
        let x_1306 : vec3<f32> = vec3<f32>(x_1305.x, x_1305.z, x_1305.w);
        let x_1307 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_1306.x, x_1307.y, x_1306.y, x_1306.z);
        let x_1309 : vec4<f32> = u_xlat3;
        let x_1312 : vec4<f32> = x_253.x_MainLightShadowmapSize;
        let x_1315 : vec4<f32> = u_xlat9;
        u_xlat11 = ((vec4<f32>(x_1309.x, x_1309.y, x_1309.x, x_1309.y) * vec4<f32>(x_1312.x, x_1312.y, x_1312.x, x_1312.y)) + vec4<f32>(x_1315.x, x_1315.y, x_1315.z, x_1315.y));
        let x_1319 : vec4<f32> = u_xlat3;
        let x_1322 : vec4<f32> = x_253.x_MainLightShadowmapSize;
        let x_1325 : vec4<f32> = u_xlat9;
        u_xlat53 = ((vec2<f32>(x_1319.x, x_1319.y) * vec2<f32>(x_1322.x, x_1322.y)) + vec2<f32>(x_1325.w, x_1325.y));
        let x_1329 : f32 = u_xlat8.x;
        u_xlat9.x = x_1329;
        let x_1331 : vec4<f32> = u_xlat3;
        let x_1334 : vec4<f32> = x_253.x_MainLightShadowmapSize;
        let x_1337 : vec4<f32> = u_xlat9;
        let x_1339 : vec2<f32> = ((vec2<f32>(x_1331.x, x_1331.y) * vec2<f32>(x_1334.x, x_1334.y)) + vec2<f32>(x_1337.x, x_1337.y));
        let x_1340 : vec4<f32> = u_xlat3;
        u_xlat3 = vec4<f32>(x_1339.x, x_1339.y, x_1340.z, x_1340.w);
        let x_1343 : vec4<f32> = u_xlat7;
        let x_1345 : vec4<f32> = u_xlat10;
        u_xlat17 = (vec4<f32>(x_1343.x, x_1343.x, x_1343.x, x_1343.x) * x_1345);
        let x_1348 : vec4<f32> = u_xlat7;
        let x_1350 : vec4<f32> = u_xlat10;
        u_xlat18 = (vec4<f32>(x_1348.y, x_1348.y, x_1348.y, x_1348.y) * x_1350);
        let x_1353 : vec4<f32> = u_xlat7;
        let x_1355 : vec4<f32> = u_xlat10;
        u_xlat19 = (vec4<f32>(x_1353.z, x_1353.z, x_1353.z, x_1353.z) * x_1355);
        let x_1357 : vec4<f32> = u_xlat7;
        let x_1359 : vec4<f32> = u_xlat10;
        u_xlat7 = (vec4<f32>(x_1357.w, x_1357.w, x_1357.w, x_1357.w) * x_1359);
        let x_1362 : vec4<f32> = u_xlat12;
        let x_1363 : vec2<f32> = vec2<f32>(x_1362.x, x_1362.y);
        let x_1365 : f32 = u_xlat2.z;
        txVec13 = vec3<f32>(x_1363.x, x_1363.y, x_1365);
        let x_1372 : vec3<f32> = txVec13;
        let x_1374 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1372.xy, x_1372.z);
        u_xlat68 = x_1374;
        let x_1376 : vec4<f32> = u_xlat12;
        let x_1377 : vec2<f32> = vec2<f32>(x_1376.z, x_1376.w);
        let x_1379 : f32 = u_xlat2.z;
        txVec14 = vec3<f32>(x_1377.x, x_1377.y, x_1379);
        let x_1387 : vec3<f32> = txVec14;
        let x_1389 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1387.xy, x_1387.z);
        u_xlat71 = x_1389;
        let x_1390 : f32 = u_xlat71;
        let x_1392 : f32 = u_xlat17.y;
        u_xlat71 = (x_1390 * x_1392);
        let x_1395 : f32 = u_xlat17.x;
        let x_1396 : f32 = u_xlat68;
        let x_1398 : f32 = u_xlat71;
        u_xlat68 = ((x_1395 * x_1396) + x_1398);
        let x_1401 : vec2<f32> = u_xlat47;
        let x_1403 : f32 = u_xlat2.z;
        txVec15 = vec3<f32>(x_1401.x, x_1401.y, x_1403);
        let x_1410 : vec3<f32> = txVec15;
        let x_1412 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1410.xy, x_1410.z);
        u_xlat47.x = x_1412;
        let x_1415 : f32 = u_xlat17.z;
        let x_1417 : f32 = u_xlat47.x;
        let x_1419 : f32 = u_xlat68;
        u_xlat68 = ((x_1415 * x_1417) + x_1419);
        let x_1422 : vec4<f32> = u_xlat15;
        let x_1423 : vec2<f32> = vec2<f32>(x_1422.x, x_1422.y);
        let x_1425 : f32 = u_xlat2.z;
        txVec16 = vec3<f32>(x_1423.x, x_1423.y, x_1425);
        let x_1432 : vec3<f32> = txVec16;
        let x_1434 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1432.xy, x_1432.z);
        u_xlat47.x = x_1434;
        let x_1437 : f32 = u_xlat17.w;
        let x_1439 : f32 = u_xlat47.x;
        let x_1441 : f32 = u_xlat68;
        u_xlat68 = ((x_1437 * x_1439) + x_1441);
        let x_1444 : vec4<f32> = u_xlat13;
        let x_1445 : vec2<f32> = vec2<f32>(x_1444.x, x_1444.y);
        let x_1447 : f32 = u_xlat2.z;
        txVec17 = vec3<f32>(x_1445.x, x_1445.y, x_1447);
        let x_1454 : vec3<f32> = txVec17;
        let x_1456 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1454.xy, x_1454.z);
        u_xlat47.x = x_1456;
        let x_1459 : f32 = u_xlat18.x;
        let x_1461 : f32 = u_xlat47.x;
        let x_1463 : f32 = u_xlat68;
        u_xlat68 = ((x_1459 * x_1461) + x_1463);
        let x_1466 : vec4<f32> = u_xlat13;
        let x_1467 : vec2<f32> = vec2<f32>(x_1466.z, x_1466.w);
        let x_1469 : f32 = u_xlat2.z;
        txVec18 = vec3<f32>(x_1467.x, x_1467.y, x_1469);
        let x_1476 : vec3<f32> = txVec18;
        let x_1478 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1476.xy, x_1476.z);
        u_xlat47.x = x_1478;
        let x_1481 : f32 = u_xlat18.y;
        let x_1483 : f32 = u_xlat47.x;
        let x_1485 : f32 = u_xlat68;
        u_xlat68 = ((x_1481 * x_1483) + x_1485);
        let x_1488 : vec4<f32> = u_xlat14;
        let x_1489 : vec2<f32> = vec2<f32>(x_1488.x, x_1488.y);
        let x_1491 : f32 = u_xlat2.z;
        txVec19 = vec3<f32>(x_1489.x, x_1489.y, x_1491);
        let x_1498 : vec3<f32> = txVec19;
        let x_1500 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1498.xy, x_1498.z);
        u_xlat47.x = x_1500;
        let x_1503 : f32 = u_xlat18.z;
        let x_1505 : f32 = u_xlat47.x;
        let x_1507 : f32 = u_xlat68;
        u_xlat68 = ((x_1503 * x_1505) + x_1507);
        let x_1510 : vec4<f32> = u_xlat15;
        let x_1511 : vec2<f32> = vec2<f32>(x_1510.z, x_1510.w);
        let x_1513 : f32 = u_xlat2.z;
        txVec20 = vec3<f32>(x_1511.x, x_1511.y, x_1513);
        let x_1520 : vec3<f32> = txVec20;
        let x_1522 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1520.xy, x_1520.z);
        u_xlat47.x = x_1522;
        let x_1525 : f32 = u_xlat18.w;
        let x_1527 : f32 = u_xlat47.x;
        let x_1529 : f32 = u_xlat68;
        u_xlat68 = ((x_1525 * x_1527) + x_1529);
        let x_1532 : vec4<f32> = u_xlat16;
        let x_1533 : vec2<f32> = vec2<f32>(x_1532.x, x_1532.y);
        let x_1535 : f32 = u_xlat2.z;
        txVec21 = vec3<f32>(x_1533.x, x_1533.y, x_1535);
        let x_1542 : vec3<f32> = txVec21;
        let x_1544 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1542.xy, x_1542.z);
        u_xlat47.x = x_1544;
        let x_1547 : f32 = u_xlat19.x;
        let x_1549 : f32 = u_xlat47.x;
        let x_1551 : f32 = u_xlat68;
        u_xlat68 = ((x_1547 * x_1549) + x_1551);
        let x_1554 : vec4<f32> = u_xlat16;
        let x_1555 : vec2<f32> = vec2<f32>(x_1554.z, x_1554.w);
        let x_1557 : f32 = u_xlat2.z;
        txVec22 = vec3<f32>(x_1555.x, x_1555.y, x_1557);
        let x_1564 : vec3<f32> = txVec22;
        let x_1566 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1564.xy, x_1564.z);
        u_xlat47.x = x_1566;
        let x_1569 : f32 = u_xlat19.y;
        let x_1571 : f32 = u_xlat47.x;
        let x_1573 : f32 = u_xlat68;
        u_xlat68 = ((x_1569 * x_1571) + x_1573);
        let x_1576 : vec2<f32> = u_xlat30;
        let x_1578 : f32 = u_xlat2.z;
        txVec23 = vec3<f32>(x_1576.x, x_1576.y, x_1578);
        let x_1585 : vec3<f32> = txVec23;
        let x_1587 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1585.xy, x_1585.z);
        u_xlat47.x = x_1587;
        let x_1590 : f32 = u_xlat19.z;
        let x_1592 : f32 = u_xlat47.x;
        let x_1594 : f32 = u_xlat68;
        u_xlat68 = ((x_1590 * x_1592) + x_1594);
        let x_1597 : vec2<f32> = u_xlat58;
        let x_1599 : f32 = u_xlat2.z;
        txVec24 = vec3<f32>(x_1597.x, x_1597.y, x_1599);
        let x_1606 : vec3<f32> = txVec24;
        let x_1608 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1606.xy, x_1606.z);
        u_xlat47.x = x_1608;
        let x_1611 : f32 = u_xlat19.w;
        let x_1613 : f32 = u_xlat47.x;
        let x_1615 : f32 = u_xlat68;
        u_xlat68 = ((x_1611 * x_1613) + x_1615);
        let x_1618 : vec4<f32> = u_xlat11;
        let x_1619 : vec2<f32> = vec2<f32>(x_1618.x, x_1618.y);
        let x_1621 : f32 = u_xlat2.z;
        txVec25 = vec3<f32>(x_1619.x, x_1619.y, x_1621);
        let x_1628 : vec3<f32> = txVec25;
        let x_1630 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1628.xy, x_1628.z);
        u_xlat47.x = x_1630;
        let x_1633 : f32 = u_xlat7.x;
        let x_1635 : f32 = u_xlat47.x;
        let x_1637 : f32 = u_xlat68;
        u_xlat68 = ((x_1633 * x_1635) + x_1637);
        let x_1640 : vec4<f32> = u_xlat11;
        let x_1641 : vec2<f32> = vec2<f32>(x_1640.z, x_1640.w);
        let x_1643 : f32 = u_xlat2.z;
        txVec26 = vec3<f32>(x_1641.x, x_1641.y, x_1643);
        let x_1650 : vec3<f32> = txVec26;
        let x_1652 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1650.xy, x_1650.z);
        u_xlat47.x = x_1652;
        let x_1655 : f32 = u_xlat7.y;
        let x_1657 : f32 = u_xlat47.x;
        let x_1659 : f32 = u_xlat68;
        u_xlat68 = ((x_1655 * x_1657) + x_1659);
        let x_1662 : vec2<f32> = u_xlat53;
        let x_1664 : f32 = u_xlat2.z;
        txVec27 = vec3<f32>(x_1662.x, x_1662.y, x_1664);
        let x_1671 : vec3<f32> = txVec27;
        let x_1673 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1671.xy, x_1671.z);
        u_xlat47.x = x_1673;
        let x_1676 : f32 = u_xlat7.z;
        let x_1678 : f32 = u_xlat47.x;
        let x_1680 : f32 = u_xlat68;
        u_xlat68 = ((x_1676 * x_1678) + x_1680);
        let x_1683 : vec4<f32> = u_xlat3;
        let x_1684 : vec2<f32> = vec2<f32>(x_1683.x, x_1683.y);
        let x_1686 : f32 = u_xlat2.z;
        txVec28 = vec3<f32>(x_1684.x, x_1684.y, x_1686);
        let x_1693 : vec3<f32> = txVec28;
        let x_1695 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1693.xy, x_1693.z);
        u_xlat3.x = x_1695;
        let x_1698 : f32 = u_xlat7.w;
        let x_1700 : f32 = u_xlat3.x;
        let x_1702 : f32 = u_xlat68;
        u_xlat67 = ((x_1698 * x_1700) + x_1702);
      }
    }
  } else {
    let x_1706 : vec4<f32> = u_xlat2;
    let x_1707 : vec2<f32> = vec2<f32>(x_1706.x, x_1706.y);
    let x_1709 : f32 = u_xlat2.z;
    txVec29 = vec3<f32>(x_1707.x, x_1707.y, x_1709);
    let x_1716 : vec3<f32> = txVec29;
    let x_1718 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1716.xy, x_1716.z);
    u_xlat67 = x_1718;
  }
  let x_1720 : f32 = x_253.x_MainLightShadowParams.x;
  u_xlat68 = (-(x_1720) + 1.0f);
  let x_1723 : f32 = u_xlat67;
  let x_1725 : f32 = x_253.x_MainLightShadowParams.x;
  let x_1727 : f32 = u_xlat68;
  u_xlat67 = ((x_1723 * x_1725) + x_1727);
  let x_1731 : f32 = u_xlat2.z;
  u_xlatb3 = (0.0f >= x_1731);
  let x_1737 : f32 = u_xlat2.z;
  u_xlatb25.x = (x_1737 >= 1.0f);
  let x_1741 : bool = u_xlatb25.x;
  let x_1742 : bool = u_xlatb3;
  u_xlatb3 = (x_1741 | x_1742);
  let x_1744 : bool = u_xlatb3;
  let x_1745 : f32 = u_xlat67;
  u_xlat67 = select(x_1745, 1.0f, x_1744);
  let x_1747 : vec3<f32> = u_xlat1;
  let x_1749 : vec4<f32> = x_139.x_MainLightPosition;
  u_xlat1.x = dot(x_1747, -(vec3<f32>(x_1749.x, x_1749.y, x_1749.z)));
  let x_1755 : f32 = u_xlat1.x;
  u_xlat1.x = clamp(x_1755, 0.0f, 1.0f);
  let x_1759 : f32 = u_xlat67;
  let x_1762 : vec4<f32> = x_139.x_MainLightColor;
  u_xlat23 = (vec3<f32>(x_1759, x_1759, x_1759) * vec3<f32>(x_1762.x, x_1762.y, x_1762.z));
  let x_1765 : vec3<f32> = u_xlat23;
  let x_1766 : vec3<f32> = u_xlat1;
  u_xlat1 = (x_1765 * vec3<f32>(x_1766.x, x_1766.x, x_1766.x));
  let x_1769 : vec3<f32> = u_xlat1;
  let x_1770 : vec4<f32> = u_xlat4;
  u_xlat1 = (x_1769 * vec3<f32>(x_1770.x, x_1770.y, x_1770.z));
  let x_1774 : f32 = u_xlat4.w;
  u_xlatb67 = (x_1774 >= 0.400000006f);
  let x_1777 : bool = u_xlatb67;
  if (x_1777) {
    let x_1782 : f32 = u_xlat4.w;
    x_1778 = x_1782;
  } else {
    x_1778 = 0.0f;
  }
  let x_1784 : f32 = x_1778;
  u_xlat67 = x_1784;
  let x_1786 : f32 = u_xlat4.w;
  u_xlat25.x = (x_1786 + -0.400000006f);
  let x_1791 : f32 = u_xlat4.w;
  u_xlat47.x = dpdxCoarse(x_1791);
  let x_1796 : f32 = u_xlat4.w;
  u_xlat69 = dpdyCoarse(x_1796);
  let x_1798 : f32 = u_xlat69;
  let x_1801 : f32 = u_xlat47.x;
  u_xlat47.x = (abs(x_1798) + abs(x_1801));
  let x_1806 : f32 = u_xlat47.x;
  u_xlat47.x = max(x_1806, 0.0001f);
  let x_1811 : f32 = u_xlat25.x;
  let x_1813 : f32 = u_xlat47.x;
  u_xlat25.x = (x_1811 / x_1813);
  let x_1817 : f32 = u_xlat25.x;
  u_xlat25.x = (x_1817 + 0.5f);
  let x_1821 : f32 = u_xlat25.x;
  u_xlat25.x = clamp(x_1821, 0.0f, 1.0f);
  let x_1826 : f32 = x_139.x_AlphaToMaskAvailable;
  u_xlatb47 = !((x_1826 == 0.0f));
  let x_1828 : bool = u_xlatb47;
  if (x_1828) {
    let x_1833 : f32 = u_xlat25.x;
    x_1829 = x_1833;
  } else {
    let x_1835 : f32 = u_xlat67;
    x_1829 = x_1835;
  }
  let x_1836 : f32 = x_1829;
  u_xlat67 = x_1836;
  let x_1837 : f32 = u_xlat67;
  u_xlat25.x = (x_1837 + -0.0001f);
  let x_1842 : f32 = u_xlat25.x;
  u_xlatb25.x = (x_1842 < 0.0f);
  let x_1846 : bool = u_xlatb25.x;
  if (((select(0i, 1i, x_1846) * -1i) != 0i)) {
    discard;
  }
  let x_1854 : vec3<f32> = u_xlat22;
  let x_1855 : vec3<f32> = u_xlat28;
  u_xlat22 = (x_1854 * vec3<f32>(x_1855.y, x_1855.y, x_1855.y));
  let x_1858 : vec3<f32> = u_xlat28;
  let x_1860 : vec4<f32> = vs_INTERP2;
  let x_1863 : vec3<f32> = u_xlat22;
  u_xlat22 = ((vec3<f32>(x_1858.x, x_1858.x, x_1858.x) * vec3<f32>(x_1860.x, x_1860.y, x_1860.z)) + x_1863);
  let x_1865 : vec3<f32> = u_xlat28;
  let x_1867 : vec3<f32> = vs_INTERP1;
  let x_1869 : vec3<f32> = u_xlat22;
  u_xlat22 = ((vec3<f32>(x_1865.z, x_1865.z, x_1865.z) * x_1867) + x_1869);
  let x_1871 : vec3<f32> = u_xlat22;
  let x_1872 : vec3<f32> = u_xlat22;
  u_xlat25.x = dot(x_1871, x_1872);
  let x_1876 : f32 = u_xlat25.x;
  u_xlat25.x = inverseSqrt(x_1876);
  let x_1879 : vec3<f32> = u_xlat22;
  let x_1880 : vec3<f32> = u_xlat25;
  let x_1882 : vec3<f32> = (x_1879 * vec3<f32>(x_1880.x, x_1880.x, x_1880.x));
  let x_1883 : vec4<f32> = u_xlat4;
  u_xlat4 = vec4<f32>(x_1882.x, x_1882.y, x_1882.z, x_1883.w);
  let x_1887 : f32 = x_139.unity_OrthoParams.w;
  u_xlatb22.x = (x_1887 == 0.0f);
  let x_1890 : vec3<f32> = vs_INTERP0;
  let x_1894 : vec3<f32> = x_139.x_WorldSpaceCameraPos;
  u_xlat28 = (-(x_1890) + x_1894);
  let x_1897 : vec3<f32> = u_xlat28;
  let x_1898 : vec3<f32> = u_xlat28;
  u_xlat44 = dot(x_1897, x_1898);
  let x_1900 : f32 = u_xlat44;
  u_xlat44 = inverseSqrt(x_1900);
  let x_1902 : f32 = u_xlat44;
  let x_1904 : vec3<f32> = u_xlat28;
  u_xlat28 = (vec3<f32>(x_1902, x_1902, x_1902) * x_1904);
  let x_1907 : bool = u_xlatb22.x;
  if (x_1907) {
    let x_1912 : f32 = u_xlat28.x;
    x_1908 = x_1912;
  } else {
    let x_1916 : f32 = x_139.unity_MatrixV[0i].z;
    x_1908 = x_1916;
  }
  let x_1917 : f32 = x_1908;
  u_xlat7.x = x_1917;
  let x_1920 : bool = u_xlatb22.x;
  if (x_1920) {
    let x_1925 : f32 = u_xlat28.y;
    x_1921 = x_1925;
  } else {
    let x_1928 : f32 = x_139.unity_MatrixV[1i].z;
    x_1921 = x_1928;
  }
  let x_1929 : f32 = x_1921;
  u_xlat7.y = x_1929;
  let x_1932 : bool = u_xlatb22.x;
  if (x_1932) {
    let x_1937 : f32 = u_xlat28.z;
    x_1933 = x_1937;
  } else {
    let x_1940 : f32 = x_139.unity_MatrixV[2i].z;
    x_1933 = x_1940;
  }
  let x_1941 : f32 = x_1933;
  u_xlat7.z = x_1941;
  u_xlat4.w = 1.0f;
  let x_1946 : vec4<f32> = x_60.unity_SHAr;
  let x_1947 : vec4<f32> = u_xlat4;
  u_xlat8.x = dot(x_1946, x_1947);
  let x_1952 : vec4<f32> = x_60.unity_SHAg;
  let x_1953 : vec4<f32> = u_xlat4;
  u_xlat8.y = dot(x_1952, x_1953);
  let x_1958 : vec4<f32> = x_60.unity_SHAb;
  let x_1959 : vec4<f32> = u_xlat4;
  u_xlat8.z = dot(x_1958, x_1959);
  let x_1962 : vec4<f32> = u_xlat4;
  let x_1964 : vec4<f32> = u_xlat4;
  u_xlat9 = (vec4<f32>(x_1962.y, x_1962.z, x_1962.z, x_1962.x) * vec4<f32>(x_1964.x, x_1964.y, x_1964.z, x_1964.z));
  let x_1969 : vec4<f32> = x_60.unity_SHBr;
  let x_1970 : vec4<f32> = u_xlat9;
  u_xlat10.x = dot(x_1969, x_1970);
  let x_1975 : vec4<f32> = x_60.unity_SHBg;
  let x_1976 : vec4<f32> = u_xlat9;
  u_xlat10.y = dot(x_1975, x_1976);
  let x_1981 : vec4<f32> = x_60.unity_SHBb;
  let x_1982 : vec4<f32> = u_xlat9;
  u_xlat10.z = dot(x_1981, x_1982);
  let x_1986 : f32 = u_xlat4.y;
  let x_1988 : f32 = u_xlat4.y;
  u_xlat22.x = (x_1986 * x_1988);
  let x_1992 : f32 = u_xlat4.x;
  let x_1994 : f32 = u_xlat4.x;
  let x_1997 : f32 = u_xlat22.x;
  u_xlat22.x = ((x_1992 * x_1994) + -(x_1997));
  let x_2003 : vec4<f32> = x_60.unity_SHC;
  let x_2005 : vec3<f32> = u_xlat22;
  let x_2008 : vec4<f32> = u_xlat10;
  u_xlat22 = ((vec3<f32>(x_2003.x, x_2003.y, x_2003.z) * vec3<f32>(x_2005.x, x_2005.x, x_2005.x)) + vec3<f32>(x_2008.x, x_2008.y, x_2008.z));
  let x_2011 : vec3<f32> = u_xlat22;
  let x_2012 : vec4<f32> = u_xlat8;
  u_xlat22 = (x_2011 + vec3<f32>(x_2012.x, x_2012.y, x_2012.z));
  let x_2015 : vec3<f32> = u_xlat22;
  u_xlat22 = max(x_2015, vec3<f32>(0.0f, 0.0f, 0.0f));
  let x_2018 : vec4<f32> = x_139.x_ScaledScreenParams;
  let x_2019 : vec2<f32> = vec2<f32>(x_2018.x, x_2018.y);
  let x_2023 : vec2<f32> = (vec2<f32>(1.0f, 1.0f) / vec2<f32>(x_2019.x, x_2019.y));
  let x_2024 : vec3<f32> = u_xlat25;
  u_xlat25 = vec3<f32>(x_2023.x, x_2024.y, x_2023.y);
  let x_2026 : vec3<f32> = u_xlat25;
  let x_2028 : vec4<f32> = hlslcc_FragCoord;
  let x_2030 : vec2<f32> = (vec2<f32>(x_2026.x, x_2026.z) * vec2<f32>(x_2028.x, x_2028.y));
  let x_2031 : vec4<f32> = u_xlat8;
  u_xlat8 = vec4<f32>(x_2030.x, x_2030.y, x_2031.z, x_2031.w);
  let x_2034 : f32 = u_xlat8.y;
  let x_2037 : f32 = x_139.x_ScaleBiasRt.x;
  let x_2040 : f32 = x_139.x_ScaleBiasRt.y;
  u_xlat25.x = ((x_2034 * x_2037) + x_2040);
  let x_2044 : f32 = u_xlat25.x;
  u_xlat8.z = (-(x_2044) + 1.0f);
  let x_2049 : f32 = u_xlat6.x;
  u_xlat6.x = x_2049;
  let x_2052 : f32 = u_xlat6.x;
  u_xlat6.x = clamp(x_2052, 0.0f, 1.0f);
  let x_2055 : f32 = u_xlat67;
  u_xlat67 = min(x_2055, 1.0f);
  let x_2057 : vec3<f32> = u_xlat5;
  u_xlat5 = (x_2057 * vec3<f32>(0.959999979f, 0.959999979f, 0.959999979f));
  let x_2062 : f32 = u_xlat6.x;
  u_xlat25.x = (-(x_2062) + 1.0f);
  let x_2067 : f32 = u_xlat25.x;
  let x_2069 : f32 = u_xlat25.x;
  u_xlat69 = (x_2067 * x_2069);
  let x_2071 : f32 = u_xlat69;
  u_xlat69 = max(x_2071, 0.0078125f);
  let x_2075 : f32 = u_xlat69;
  let x_2076 : f32 = u_xlat69;
  u_xlat70 = (x_2075 * x_2076);
  let x_2079 : f32 = u_xlat6.x;
  u_xlat71 = (x_2079 + 0.040000021f);
  let x_2082 : f32 = u_xlat71;
  u_xlat71 = min(x_2082, 1.0f);
  let x_2084 : f32 = u_xlat69;
  u_xlat6.x = ((x_2084 * 4.0f) + 2.0f);
  let x_2093 : vec4<f32> = u_xlat8;
  let x_2096 : f32 = x_139.x_GlobalMipBias.x;
  let x_2097 : vec4<f32> = textureSampleBias(x_ScreenSpaceOcclusionTexture, sampler_ScreenSpaceOcclusionTexture, vec2<f32>(x_2093.x, x_2093.z), x_2096);
  u_xlat28.x = x_2097.x;
  let x_2102 : f32 = u_xlat28.x;
  u_xlat50 = (x_2102 + -1.0f);
  let x_2105 : f32 = x_139.x_AmbientOcclusionParam.w;
  let x_2106 : f32 = u_xlat50;
  u_xlat50 = ((x_2105 * x_2106) + 1.0f);
  let x_2110 : f32 = u_xlat28.x;
  let x_2112 : f32 = vs_INTERP4.w;
  u_xlat28.x = min(x_2110, x_2112);
  let x_2115 : bool = u_xlatb0;
  if (x_2115) {
    let x_2119 : f32 = x_253.x_MainLightShadowParams.y;
    u_xlatb0 = (x_2119 == 1.0f);
    let x_2121 : bool = u_xlatb0;
    if (x_2121) {
      let x_2124 : vec4<f32> = u_xlat2;
      let x_2127 : vec4<f32> = x_253.x_MainLightShadowOffset0;
      u_xlat8 = (vec4<f32>(x_2124.x, x_2124.y, x_2124.x, x_2124.y) + x_2127);
      let x_2130 : vec4<f32> = u_xlat8;
      let x_2131 : vec2<f32> = vec2<f32>(x_2130.x, x_2130.y);
      let x_2133 : f32 = u_xlat2.z;
      txVec30 = vec3<f32>(x_2131.x, x_2131.y, x_2133);
      let x_2140 : vec3<f32> = txVec30;
      let x_2142 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2140.xy, x_2140.z);
      u_xlat9.x = x_2142;
      let x_2145 : vec4<f32> = u_xlat8;
      let x_2146 : vec2<f32> = vec2<f32>(x_2145.z, x_2145.w);
      let x_2148 : f32 = u_xlat2.z;
      txVec31 = vec3<f32>(x_2146.x, x_2146.y, x_2148);
      let x_2155 : vec3<f32> = txVec31;
      let x_2157 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2155.xy, x_2155.z);
      u_xlat9.y = x_2157;
      let x_2159 : vec4<f32> = u_xlat2;
      let x_2162 : vec4<f32> = x_253.x_MainLightShadowOffset1;
      u_xlat8 = (vec4<f32>(x_2159.x, x_2159.y, x_2159.x, x_2159.y) + x_2162);
      let x_2165 : vec4<f32> = u_xlat8;
      let x_2166 : vec2<f32> = vec2<f32>(x_2165.x, x_2165.y);
      let x_2168 : f32 = u_xlat2.z;
      txVec32 = vec3<f32>(x_2166.x, x_2166.y, x_2168);
      let x_2175 : vec3<f32> = txVec32;
      let x_2177 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2175.xy, x_2175.z);
      u_xlat9.z = x_2177;
      let x_2180 : vec4<f32> = u_xlat8;
      let x_2181 : vec2<f32> = vec2<f32>(x_2180.z, x_2180.w);
      let x_2183 : f32 = u_xlat2.z;
      txVec33 = vec3<f32>(x_2181.x, x_2181.y, x_2183);
      let x_2190 : vec3<f32> = txVec33;
      let x_2192 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2190.xy, x_2190.z);
      u_xlat9.w = x_2192;
      let x_2194 : vec4<f32> = u_xlat9;
      u_xlat0.x = dot(x_2194, vec4<f32>(0.25f, 0.25f, 0.25f, 0.25f));
    } else {
      let x_2200 : f32 = x_253.x_MainLightShadowParams.y;
      u_xlatb72 = (x_2200 == 2.0f);
      let x_2202 : bool = u_xlatb72;
      if (x_2202) {
        let x_2205 : vec4<f32> = u_xlat2;
        let x_2208 : vec4<f32> = x_253.x_MainLightShadowmapSize;
        let x_2211 : vec2<f32> = ((vec2<f32>(x_2205.x, x_2205.y) * vec2<f32>(x_2208.z, x_2208.w)) + vec2<f32>(0.5f, 0.5f));
        let x_2212 : vec4<f32> = u_xlat8;
        u_xlat8 = vec4<f32>(x_2211.x, x_2211.y, x_2212.z, x_2212.w);
        let x_2214 : vec4<f32> = u_xlat8;
        let x_2216 : vec2<f32> = floor(vec2<f32>(x_2214.x, x_2214.y));
        let x_2217 : vec4<f32> = u_xlat8;
        u_xlat8 = vec4<f32>(x_2216.x, x_2216.y, x_2217.z, x_2217.w);
        let x_2219 : vec4<f32> = u_xlat2;
        let x_2222 : vec4<f32> = x_253.x_MainLightShadowmapSize;
        let x_2225 : vec4<f32> = u_xlat8;
        u_xlat52 = ((vec2<f32>(x_2219.x, x_2219.y) * vec2<f32>(x_2222.z, x_2222.w)) + -(vec2<f32>(x_2225.x, x_2225.y)));
        let x_2229 : vec2<f32> = u_xlat52;
        u_xlat9 = (vec4<f32>(x_2229.x, x_2229.x, x_2229.y, x_2229.y) + vec4<f32>(0.5f, 1.0f, 0.5f, 1.0f));
        let x_2232 : vec4<f32> = u_xlat9;
        let x_2234 : vec4<f32> = u_xlat9;
        u_xlat10 = (vec4<f32>(x_2232.x, x_2232.x, x_2232.z, x_2232.z) * vec4<f32>(x_2234.x, x_2234.x, x_2234.z, x_2234.z));
        let x_2237 : vec4<f32> = u_xlat10;
        let x_2239 : vec2<f32> = (vec2<f32>(x_2237.y, x_2237.w) * vec2<f32>(0.079999998f, 0.079999998f));
        let x_2240 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_2239.x, x_2240.y, x_2239.y, x_2240.w);
        let x_2242 : vec4<f32> = u_xlat10;
        let x_2245 : vec2<f32> = u_xlat52;
        let x_2247 : vec2<f32> = ((vec2<f32>(x_2242.x, x_2242.z) * vec2<f32>(0.5f, 0.5f)) + -(x_2245));
        let x_2248 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_2247.x, x_2247.y, x_2248.z, x_2248.w);
        let x_2251 : vec2<f32> = u_xlat52;
        u_xlat54 = (-(x_2251) + vec2<f32>(1.0f, 1.0f));
        let x_2254 : vec2<f32> = u_xlat52;
        let x_2255 : vec2<f32> = min(x_2254, vec2<f32>(0.0f, 0.0f));
        let x_2256 : vec4<f32> = u_xlat11;
        u_xlat11 = vec4<f32>(x_2255.x, x_2255.y, x_2256.z, x_2256.w);
        let x_2258 : vec4<f32> = u_xlat11;
        let x_2261 : vec4<f32> = u_xlat11;
        let x_2264 : vec2<f32> = u_xlat54;
        let x_2265 : vec2<f32> = ((-(vec2<f32>(x_2258.x, x_2258.y)) * vec2<f32>(x_2261.x, x_2261.y)) + x_2264);
        let x_2266 : vec4<f32> = u_xlat11;
        u_xlat11 = vec4<f32>(x_2265.x, x_2265.y, x_2266.z, x_2266.w);
        let x_2268 : vec2<f32> = u_xlat52;
        u_xlat52 = max(x_2268, vec2<f32>(0.0f, 0.0f));
        let x_2270 : vec2<f32> = u_xlat52;
        let x_2272 : vec2<f32> = u_xlat52;
        let x_2274 : vec4<f32> = u_xlat9;
        u_xlat52 = ((-(x_2270) * x_2272) + vec2<f32>(x_2274.y, x_2274.w));
        let x_2277 : vec4<f32> = u_xlat11;
        let x_2279 : vec2<f32> = (vec2<f32>(x_2277.x, x_2277.y) + vec2<f32>(1.0f, 1.0f));
        let x_2280 : vec4<f32> = u_xlat11;
        u_xlat11 = vec4<f32>(x_2279.x, x_2279.y, x_2280.z, x_2280.w);
        let x_2282 : vec2<f32> = u_xlat52;
        u_xlat52 = (x_2282 + vec2<f32>(1.0f, 1.0f));
        let x_2284 : vec4<f32> = u_xlat10;
        let x_2286 : vec2<f32> = (vec2<f32>(x_2284.x, x_2284.y) * vec2<f32>(0.159999996f, 0.159999996f));
        let x_2287 : vec4<f32> = u_xlat12;
        u_xlat12 = vec4<f32>(x_2286.x, x_2286.y, x_2287.z, x_2287.w);
        let x_2289 : vec2<f32> = u_xlat54;
        let x_2290 : vec2<f32> = (x_2289 * vec2<f32>(0.159999996f, 0.159999996f));
        let x_2291 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_2290.x, x_2290.y, x_2291.z, x_2291.w);
        let x_2293 : vec4<f32> = u_xlat11;
        let x_2295 : vec2<f32> = (vec2<f32>(x_2293.x, x_2293.y) * vec2<f32>(0.159999996f, 0.159999996f));
        let x_2296 : vec4<f32> = u_xlat11;
        u_xlat11 = vec4<f32>(x_2295.x, x_2295.y, x_2296.z, x_2296.w);
        let x_2298 : vec2<f32> = u_xlat52;
        let x_2299 : vec2<f32> = (x_2298 * vec2<f32>(0.159999996f, 0.159999996f));
        let x_2300 : vec4<f32> = u_xlat13;
        u_xlat13 = vec4<f32>(x_2299.x, x_2299.y, x_2300.z, x_2300.w);
        let x_2302 : vec4<f32> = u_xlat9;
        u_xlat52 = (vec2<f32>(x_2302.y, x_2302.w) * vec2<f32>(0.159999996f, 0.159999996f));
        let x_2306 : f32 = u_xlat11.x;
        u_xlat12.z = x_2306;
        let x_2309 : f32 = u_xlat52.x;
        u_xlat12.w = x_2309;
        let x_2312 : f32 = u_xlat13.x;
        u_xlat10.z = x_2312;
        let x_2315 : f32 = u_xlat9.x;
        u_xlat10.w = x_2315;
        let x_2317 : vec4<f32> = u_xlat10;
        let x_2319 : vec4<f32> = u_xlat12;
        u_xlat14 = (vec4<f32>(x_2317.z, x_2317.w, x_2317.x, x_2317.z) + vec4<f32>(x_2319.z, x_2319.w, x_2319.x, x_2319.z));
        let x_2323 : f32 = u_xlat12.y;
        u_xlat11.z = x_2323;
        let x_2326 : f32 = u_xlat52.y;
        u_xlat11.w = x_2326;
        let x_2329 : f32 = u_xlat10.y;
        u_xlat13.z = x_2329;
        let x_2332 : f32 = u_xlat9.z;
        u_xlat13.w = x_2332;
        let x_2334 : vec4<f32> = u_xlat11;
        let x_2336 : vec4<f32> = u_xlat13;
        let x_2338 : vec3<f32> = (vec3<f32>(x_2334.z, x_2334.y, x_2334.w) + vec3<f32>(x_2336.z, x_2336.y, x_2336.w));
        let x_2339 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_2338.x, x_2338.y, x_2338.z, x_2339.w);
        let x_2341 : vec4<f32> = u_xlat10;
        let x_2343 : vec4<f32> = u_xlat14;
        let x_2345 : vec3<f32> = (vec3<f32>(x_2341.x, x_2341.z, x_2341.w) / vec3<f32>(x_2343.z, x_2343.w, x_2343.y));
        let x_2346 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_2345.x, x_2345.y, x_2345.z, x_2346.w);
        let x_2348 : vec4<f32> = u_xlat10;
        let x_2350 : vec3<f32> = (vec3<f32>(x_2348.x, x_2348.y, x_2348.z) + vec3<f32>(-2.5f, -0.5f, 1.5f));
        let x_2351 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_2350.x, x_2350.y, x_2350.z, x_2351.w);
        let x_2353 : vec4<f32> = u_xlat13;
        let x_2355 : vec4<f32> = u_xlat9;
        let x_2357 : vec3<f32> = (vec3<f32>(x_2353.z, x_2353.y, x_2353.w) / vec3<f32>(x_2355.x, x_2355.y, x_2355.z));
        let x_2358 : vec4<f32> = u_xlat11;
        u_xlat11 = vec4<f32>(x_2357.x, x_2357.y, x_2357.z, x_2358.w);
        let x_2360 : vec4<f32> = u_xlat11;
        let x_2362 : vec3<f32> = (vec3<f32>(x_2360.x, x_2360.y, x_2360.z) + vec3<f32>(-2.5f, -0.5f, 1.5f));
        let x_2363 : vec4<f32> = u_xlat11;
        u_xlat11 = vec4<f32>(x_2362.x, x_2362.y, x_2362.z, x_2363.w);
        let x_2365 : vec4<f32> = u_xlat10;
        let x_2368 : vec4<f32> = x_253.x_MainLightShadowmapSize;
        let x_2370 : vec3<f32> = (vec3<f32>(x_2365.y, x_2365.x, x_2365.z) * vec3<f32>(x_2368.x, x_2368.x, x_2368.x));
        let x_2371 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_2370.x, x_2370.y, x_2370.z, x_2371.w);
        let x_2373 : vec4<f32> = u_xlat11;
        let x_2376 : vec4<f32> = x_253.x_MainLightShadowmapSize;
        let x_2378 : vec3<f32> = (vec3<f32>(x_2373.x, x_2373.y, x_2373.z) * vec3<f32>(x_2376.y, x_2376.y, x_2376.y));
        let x_2379 : vec4<f32> = u_xlat11;
        u_xlat11 = vec4<f32>(x_2378.x, x_2378.y, x_2378.z, x_2379.w);
        let x_2382 : f32 = u_xlat11.x;
        u_xlat10.w = x_2382;
        let x_2384 : vec4<f32> = u_xlat8;
        let x_2387 : vec4<f32> = x_253.x_MainLightShadowmapSize;
        let x_2390 : vec4<f32> = u_xlat10;
        u_xlat12 = ((vec4<f32>(x_2384.x, x_2384.y, x_2384.x, x_2384.y) * vec4<f32>(x_2387.x, x_2387.y, x_2387.x, x_2387.y)) + vec4<f32>(x_2390.y, x_2390.w, x_2390.x, x_2390.w));
        let x_2393 : vec4<f32> = u_xlat8;
        let x_2396 : vec4<f32> = x_253.x_MainLightShadowmapSize;
        let x_2399 : vec4<f32> = u_xlat10;
        u_xlat52 = ((vec2<f32>(x_2393.x, x_2393.y) * vec2<f32>(x_2396.x, x_2396.y)) + vec2<f32>(x_2399.z, x_2399.w));
        let x_2403 : f32 = u_xlat10.y;
        u_xlat11.w = x_2403;
        let x_2405 : vec4<f32> = u_xlat11;
        let x_2406 : vec2<f32> = vec2<f32>(x_2405.y, x_2405.z);
        let x_2407 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_2407.x, x_2406.x, x_2407.z, x_2406.y);
        let x_2409 : vec4<f32> = u_xlat8;
        let x_2412 : vec4<f32> = x_253.x_MainLightShadowmapSize;
        let x_2415 : vec4<f32> = u_xlat10;
        u_xlat13 = ((vec4<f32>(x_2409.x, x_2409.y, x_2409.x, x_2409.y) * vec4<f32>(x_2412.x, x_2412.y, x_2412.x, x_2412.y)) + vec4<f32>(x_2415.x, x_2415.y, x_2415.z, x_2415.y));
        let x_2418 : vec4<f32> = u_xlat8;
        let x_2421 : vec4<f32> = x_253.x_MainLightShadowmapSize;
        let x_2424 : vec4<f32> = u_xlat11;
        u_xlat11 = ((vec4<f32>(x_2418.x, x_2418.y, x_2418.x, x_2418.y) * vec4<f32>(x_2421.x, x_2421.y, x_2421.x, x_2421.y)) + vec4<f32>(x_2424.w, x_2424.y, x_2424.w, x_2424.z));
        let x_2427 : vec4<f32> = u_xlat8;
        let x_2430 : vec4<f32> = x_253.x_MainLightShadowmapSize;
        let x_2433 : vec4<f32> = u_xlat10;
        u_xlat10 = ((vec4<f32>(x_2427.x, x_2427.y, x_2427.x, x_2427.y) * vec4<f32>(x_2430.x, x_2430.y, x_2430.x, x_2430.y)) + vec4<f32>(x_2433.x, x_2433.w, x_2433.z, x_2433.w));
        let x_2436 : vec4<f32> = u_xlat9;
        let x_2438 : vec4<f32> = u_xlat14;
        u_xlat15 = (vec4<f32>(x_2436.x, x_2436.x, x_2436.x, x_2436.y) * vec4<f32>(x_2438.z, x_2438.w, x_2438.y, x_2438.z));
        let x_2441 : vec4<f32> = u_xlat9;
        let x_2443 : vec4<f32> = u_xlat14;
        u_xlat16 = (vec4<f32>(x_2441.y, x_2441.y, x_2441.z, x_2441.z) * x_2443);
        let x_2447 : f32 = u_xlat9.z;
        let x_2449 : f32 = u_xlat14.y;
        u_xlat72 = (x_2447 * x_2449);
        let x_2452 : vec4<f32> = u_xlat12;
        let x_2453 : vec2<f32> = vec2<f32>(x_2452.x, x_2452.y);
        let x_2455 : f32 = u_xlat2.z;
        txVec34 = vec3<f32>(x_2453.x, x_2453.y, x_2455);
        let x_2463 : vec3<f32> = txVec34;
        let x_2465 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2463.xy, x_2463.z);
        u_xlat73 = x_2465;
        let x_2467 : vec4<f32> = u_xlat12;
        let x_2468 : vec2<f32> = vec2<f32>(x_2467.z, x_2467.w);
        let x_2470 : f32 = u_xlat2.z;
        txVec35 = vec3<f32>(x_2468.x, x_2468.y, x_2470);
        let x_2477 : vec3<f32> = txVec35;
        let x_2479 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2477.xy, x_2477.z);
        u_xlat8.x = x_2479;
        let x_2482 : f32 = u_xlat8.x;
        let x_2484 : f32 = u_xlat15.y;
        u_xlat8.x = (x_2482 * x_2484);
        let x_2488 : f32 = u_xlat15.x;
        let x_2489 : f32 = u_xlat73;
        let x_2492 : f32 = u_xlat8.x;
        u_xlat73 = ((x_2488 * x_2489) + x_2492);
        let x_2495 : vec2<f32> = u_xlat52;
        let x_2497 : f32 = u_xlat2.z;
        txVec36 = vec3<f32>(x_2495.x, x_2495.y, x_2497);
        let x_2504 : vec3<f32> = txVec36;
        let x_2506 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2504.xy, x_2504.z);
        u_xlat8.x = x_2506;
        let x_2509 : f32 = u_xlat15.z;
        let x_2511 : f32 = u_xlat8.x;
        let x_2513 : f32 = u_xlat73;
        u_xlat73 = ((x_2509 * x_2511) + x_2513);
        let x_2516 : vec4<f32> = u_xlat11;
        let x_2517 : vec2<f32> = vec2<f32>(x_2516.x, x_2516.y);
        let x_2519 : f32 = u_xlat2.z;
        txVec37 = vec3<f32>(x_2517.x, x_2517.y, x_2519);
        let x_2526 : vec3<f32> = txVec37;
        let x_2528 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2526.xy, x_2526.z);
        u_xlat8.x = x_2528;
        let x_2531 : f32 = u_xlat15.w;
        let x_2533 : f32 = u_xlat8.x;
        let x_2535 : f32 = u_xlat73;
        u_xlat73 = ((x_2531 * x_2533) + x_2535);
        let x_2538 : vec4<f32> = u_xlat13;
        let x_2539 : vec2<f32> = vec2<f32>(x_2538.x, x_2538.y);
        let x_2541 : f32 = u_xlat2.z;
        txVec38 = vec3<f32>(x_2539.x, x_2539.y, x_2541);
        let x_2548 : vec3<f32> = txVec38;
        let x_2550 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2548.xy, x_2548.z);
        u_xlat8.x = x_2550;
        let x_2553 : f32 = u_xlat16.x;
        let x_2555 : f32 = u_xlat8.x;
        let x_2557 : f32 = u_xlat73;
        u_xlat73 = ((x_2553 * x_2555) + x_2557);
        let x_2560 : vec4<f32> = u_xlat13;
        let x_2561 : vec2<f32> = vec2<f32>(x_2560.z, x_2560.w);
        let x_2563 : f32 = u_xlat2.z;
        txVec39 = vec3<f32>(x_2561.x, x_2561.y, x_2563);
        let x_2570 : vec3<f32> = txVec39;
        let x_2572 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2570.xy, x_2570.z);
        u_xlat8.x = x_2572;
        let x_2575 : f32 = u_xlat16.y;
        let x_2577 : f32 = u_xlat8.x;
        let x_2579 : f32 = u_xlat73;
        u_xlat73 = ((x_2575 * x_2577) + x_2579);
        let x_2582 : vec4<f32> = u_xlat11;
        let x_2583 : vec2<f32> = vec2<f32>(x_2582.z, x_2582.w);
        let x_2585 : f32 = u_xlat2.z;
        txVec40 = vec3<f32>(x_2583.x, x_2583.y, x_2585);
        let x_2592 : vec3<f32> = txVec40;
        let x_2594 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2592.xy, x_2592.z);
        u_xlat8.x = x_2594;
        let x_2597 : f32 = u_xlat16.z;
        let x_2599 : f32 = u_xlat8.x;
        let x_2601 : f32 = u_xlat73;
        u_xlat73 = ((x_2597 * x_2599) + x_2601);
        let x_2604 : vec4<f32> = u_xlat10;
        let x_2605 : vec2<f32> = vec2<f32>(x_2604.x, x_2604.y);
        let x_2607 : f32 = u_xlat2.z;
        txVec41 = vec3<f32>(x_2605.x, x_2605.y, x_2607);
        let x_2614 : vec3<f32> = txVec41;
        let x_2616 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2614.xy, x_2614.z);
        u_xlat8.x = x_2616;
        let x_2619 : f32 = u_xlat16.w;
        let x_2621 : f32 = u_xlat8.x;
        let x_2623 : f32 = u_xlat73;
        u_xlat73 = ((x_2619 * x_2621) + x_2623);
        let x_2626 : vec4<f32> = u_xlat10;
        let x_2627 : vec2<f32> = vec2<f32>(x_2626.z, x_2626.w);
        let x_2629 : f32 = u_xlat2.z;
        txVec42 = vec3<f32>(x_2627.x, x_2627.y, x_2629);
        let x_2636 : vec3<f32> = txVec42;
        let x_2638 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2636.xy, x_2636.z);
        u_xlat8.x = x_2638;
        let x_2640 : f32 = u_xlat72;
        let x_2642 : f32 = u_xlat8.x;
        let x_2644 : f32 = u_xlat73;
        u_xlat0.x = ((x_2640 * x_2642) + x_2644);
      } else {
        let x_2648 : vec4<f32> = u_xlat2;
        let x_2651 : vec4<f32> = x_253.x_MainLightShadowmapSize;
        let x_2654 : vec2<f32> = ((vec2<f32>(x_2648.x, x_2648.y) * vec2<f32>(x_2651.z, x_2651.w)) + vec2<f32>(0.5f, 0.5f));
        let x_2655 : vec4<f32> = u_xlat8;
        u_xlat8 = vec4<f32>(x_2654.x, x_2654.y, x_2655.z, x_2655.w);
        let x_2657 : vec4<f32> = u_xlat8;
        let x_2659 : vec2<f32> = floor(vec2<f32>(x_2657.x, x_2657.y));
        let x_2660 : vec4<f32> = u_xlat8;
        u_xlat8 = vec4<f32>(x_2659.x, x_2659.y, x_2660.z, x_2660.w);
        let x_2662 : vec4<f32> = u_xlat2;
        let x_2665 : vec4<f32> = x_253.x_MainLightShadowmapSize;
        let x_2668 : vec4<f32> = u_xlat8;
        u_xlat52 = ((vec2<f32>(x_2662.x, x_2662.y) * vec2<f32>(x_2665.z, x_2665.w)) + -(vec2<f32>(x_2668.x, x_2668.y)));
        let x_2672 : vec2<f32> = u_xlat52;
        u_xlat9 = (vec4<f32>(x_2672.x, x_2672.x, x_2672.y, x_2672.y) + vec4<f32>(0.5f, 1.0f, 0.5f, 1.0f));
        let x_2675 : vec4<f32> = u_xlat9;
        let x_2677 : vec4<f32> = u_xlat9;
        u_xlat10 = (vec4<f32>(x_2675.x, x_2675.x, x_2675.z, x_2675.z) * vec4<f32>(x_2677.x, x_2677.x, x_2677.z, x_2677.z));
        let x_2680 : vec4<f32> = u_xlat10;
        let x_2682 : vec2<f32> = (vec2<f32>(x_2680.y, x_2680.w) * vec2<f32>(0.040816002f, 0.040816002f));
        let x_2683 : vec4<f32> = u_xlat11;
        u_xlat11 = vec4<f32>(x_2683.x, x_2682.x, x_2683.z, x_2682.y);
        let x_2685 : vec4<f32> = u_xlat10;
        let x_2688 : vec2<f32> = u_xlat52;
        let x_2690 : vec2<f32> = ((vec2<f32>(x_2685.x, x_2685.z) * vec2<f32>(0.5f, 0.5f)) + -(x_2688));
        let x_2691 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_2690.x, x_2691.y, x_2690.y, x_2691.w);
        let x_2693 : vec2<f32> = u_xlat52;
        let x_2695 : vec2<f32> = (-(x_2693) + vec2<f32>(1.0f, 1.0f));
        let x_2696 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_2695.x, x_2695.y, x_2696.z, x_2696.w);
        let x_2698 : vec2<f32> = u_xlat52;
        u_xlat54 = min(x_2698, vec2<f32>(0.0f, 0.0f));
        let x_2700 : vec2<f32> = u_xlat54;
        let x_2702 : vec2<f32> = u_xlat54;
        let x_2704 : vec4<f32> = u_xlat10;
        let x_2706 : vec2<f32> = ((-(x_2700) * x_2702) + vec2<f32>(x_2704.x, x_2704.y));
        let x_2707 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_2706.x, x_2706.y, x_2707.z, x_2707.w);
        let x_2709 : vec2<f32> = u_xlat52;
        u_xlat54 = max(x_2709, vec2<f32>(0.0f, 0.0f));
        let x_2712 : vec2<f32> = u_xlat54;
        let x_2714 : vec2<f32> = u_xlat54;
        let x_2716 : vec4<f32> = u_xlat9;
        let x_2718 : vec2<f32> = ((-(x_2712) * x_2714) + vec2<f32>(x_2716.y, x_2716.w));
        let x_2719 : vec3<f32> = u_xlat31;
        u_xlat31 = vec3<f32>(x_2718.x, x_2719.y, x_2718.y);
        let x_2721 : vec4<f32> = u_xlat10;
        let x_2723 : vec2<f32> = (vec2<f32>(x_2721.x, x_2721.y) + vec2<f32>(2.0f, 2.0f));
        let x_2724 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_2723.x, x_2723.y, x_2724.z, x_2724.w);
        let x_2726 : vec3<f32> = u_xlat31;
        let x_2728 : vec2<f32> = (vec2<f32>(x_2726.x, x_2726.z) + vec2<f32>(2.0f, 2.0f));
        let x_2729 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_2729.x, x_2728.x, x_2729.z, x_2728.y);
        let x_2732 : f32 = u_xlat9.y;
        u_xlat12.z = (x_2732 * 0.081632003f);
        let x_2735 : vec4<f32> = u_xlat9;
        let x_2737 : vec3<f32> = (vec3<f32>(x_2735.z, x_2735.x, x_2735.w) * vec3<f32>(0.081632003f, 0.081632003f, 0.081632003f));
        let x_2738 : vec4<f32> = u_xlat13;
        u_xlat13 = vec4<f32>(x_2737.x, x_2737.y, x_2737.z, x_2738.w);
        let x_2740 : vec4<f32> = u_xlat10;
        let x_2742 : vec2<f32> = (vec2<f32>(x_2740.x, x_2740.y) * vec2<f32>(0.081632003f, 0.081632003f));
        let x_2743 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_2742.x, x_2742.y, x_2743.z, x_2743.w);
        let x_2746 : f32 = u_xlat13.y;
        u_xlat12.x = x_2746;
        let x_2748 : vec2<f32> = u_xlat52;
        let x_2751 : vec2<f32> = ((vec2<f32>(x_2748.x, x_2748.x) * vec2<f32>(-0.081632003f, 0.081632003f)) + vec2<f32>(0.163264006f, 0.081632003f));
        let x_2752 : vec4<f32> = u_xlat12;
        u_xlat12 = vec4<f32>(x_2752.x, x_2751.x, x_2752.z, x_2751.y);
        let x_2754 : vec2<f32> = u_xlat52;
        let x_2757 : vec2<f32> = ((vec2<f32>(x_2754.x, x_2754.x) * vec2<f32>(-0.081632003f, 0.081632003f)) + vec2<f32>(0.081632003f, 0.163264006f));
        let x_2758 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_2757.x, x_2758.y, x_2757.y, x_2758.w);
        let x_2761 : f32 = u_xlat9.x;
        u_xlat10.y = x_2761;
        let x_2764 : f32 = u_xlat11.y;
        u_xlat10.w = x_2764;
        let x_2766 : vec4<f32> = u_xlat10;
        let x_2767 : vec4<f32> = u_xlat12;
        u_xlat12 = (x_2766 + x_2767);
        let x_2769 : vec2<f32> = u_xlat52;
        let x_2772 : vec2<f32> = ((vec2<f32>(x_2769.y, x_2769.y) * vec2<f32>(-0.081632003f, 0.081632003f)) + vec2<f32>(0.163264006f, 0.081632003f));
        let x_2773 : vec4<f32> = u_xlat13;
        u_xlat13 = vec4<f32>(x_2773.x, x_2772.x, x_2773.z, x_2772.y);
        let x_2775 : vec2<f32> = u_xlat52;
        let x_2778 : vec2<f32> = ((vec2<f32>(x_2775.y, x_2775.y) * vec2<f32>(-0.081632003f, 0.081632003f)) + vec2<f32>(0.081632003f, 0.163264006f));
        let x_2779 : vec4<f32> = u_xlat11;
        u_xlat11 = vec4<f32>(x_2778.x, x_2779.y, x_2778.y, x_2779.w);
        let x_2782 : f32 = u_xlat9.y;
        u_xlat11.y = x_2782;
        let x_2784 : vec4<f32> = u_xlat11;
        let x_2785 : vec4<f32> = u_xlat13;
        u_xlat9 = (x_2784 + x_2785);
        let x_2787 : vec4<f32> = u_xlat10;
        let x_2788 : vec4<f32> = u_xlat12;
        u_xlat10 = (x_2787 / x_2788);
        let x_2790 : vec4<f32> = u_xlat10;
        u_xlat10 = (x_2790 + vec4<f32>(-3.5f, -1.5f, 0.5f, 2.5f));
        let x_2792 : vec4<f32> = u_xlat11;
        let x_2793 : vec4<f32> = u_xlat9;
        u_xlat11 = (x_2792 / x_2793);
        let x_2795 : vec4<f32> = u_xlat11;
        u_xlat11 = (x_2795 + vec4<f32>(-3.5f, -1.5f, 0.5f, 2.5f));
        let x_2797 : vec4<f32> = u_xlat10;
        let x_2800 : vec4<f32> = x_253.x_MainLightShadowmapSize;
        u_xlat10 = (vec4<f32>(x_2797.w, x_2797.x, x_2797.y, x_2797.z) * vec4<f32>(x_2800.x, x_2800.x, x_2800.x, x_2800.x));
        let x_2803 : vec4<f32> = u_xlat11;
        let x_2806 : vec4<f32> = x_253.x_MainLightShadowmapSize;
        u_xlat11 = (vec4<f32>(x_2803.x, x_2803.w, x_2803.y, x_2803.z) * vec4<f32>(x_2806.y, x_2806.y, x_2806.y, x_2806.y));
        let x_2809 : vec4<f32> = u_xlat10;
        let x_2810 : vec3<f32> = vec3<f32>(x_2809.y, x_2809.z, x_2809.w);
        let x_2811 : vec4<f32> = u_xlat13;
        u_xlat13 = vec4<f32>(x_2810.x, x_2811.y, x_2810.y, x_2810.z);
        let x_2814 : f32 = u_xlat11.x;
        u_xlat13.y = x_2814;
        let x_2816 : vec4<f32> = u_xlat8;
        let x_2819 : vec4<f32> = x_253.x_MainLightShadowmapSize;
        let x_2822 : vec4<f32> = u_xlat13;
        u_xlat14 = ((vec4<f32>(x_2816.x, x_2816.y, x_2816.x, x_2816.y) * vec4<f32>(x_2819.x, x_2819.y, x_2819.x, x_2819.y)) + vec4<f32>(x_2822.x, x_2822.y, x_2822.z, x_2822.y));
        let x_2825 : vec4<f32> = u_xlat8;
        let x_2828 : vec4<f32> = x_253.x_MainLightShadowmapSize;
        let x_2831 : vec4<f32> = u_xlat13;
        u_xlat52 = ((vec2<f32>(x_2825.x, x_2825.y) * vec2<f32>(x_2828.x, x_2828.y)) + vec2<f32>(x_2831.w, x_2831.y));
        let x_2835 : f32 = u_xlat13.y;
        u_xlat10.y = x_2835;
        let x_2838 : f32 = u_xlat11.z;
        u_xlat13.y = x_2838;
        let x_2840 : vec4<f32> = u_xlat8;
        let x_2843 : vec4<f32> = x_253.x_MainLightShadowmapSize;
        let x_2846 : vec4<f32> = u_xlat13;
        u_xlat15 = ((vec4<f32>(x_2840.x, x_2840.y, x_2840.x, x_2840.y) * vec4<f32>(x_2843.x, x_2843.y, x_2843.x, x_2843.y)) + vec4<f32>(x_2846.x, x_2846.y, x_2846.z, x_2846.y));
        let x_2849 : vec4<f32> = u_xlat8;
        let x_2852 : vec4<f32> = x_253.x_MainLightShadowmapSize;
        let x_2855 : vec4<f32> = u_xlat13;
        let x_2857 : vec2<f32> = ((vec2<f32>(x_2849.x, x_2849.y) * vec2<f32>(x_2852.x, x_2852.y)) + vec2<f32>(x_2855.w, x_2855.y));
        let x_2858 : vec4<f32> = u_xlat16;
        u_xlat16 = vec4<f32>(x_2857.x, x_2857.y, x_2858.z, x_2858.w);
        let x_2861 : f32 = u_xlat13.y;
        u_xlat10.z = x_2861;
        let x_2863 : vec4<f32> = u_xlat8;
        let x_2866 : vec4<f32> = x_253.x_MainLightShadowmapSize;
        let x_2869 : vec4<f32> = u_xlat10;
        u_xlat17 = ((vec4<f32>(x_2863.x, x_2863.y, x_2863.x, x_2863.y) * vec4<f32>(x_2866.x, x_2866.y, x_2866.x, x_2866.y)) + vec4<f32>(x_2869.x, x_2869.y, x_2869.x, x_2869.z));
        let x_2873 : f32 = u_xlat11.w;
        u_xlat13.y = x_2873;
        let x_2875 : vec4<f32> = u_xlat8;
        let x_2878 : vec4<f32> = x_253.x_MainLightShadowmapSize;
        let x_2881 : vec4<f32> = u_xlat13;
        u_xlat18 = ((vec4<f32>(x_2875.x, x_2875.y, x_2875.x, x_2875.y) * vec4<f32>(x_2878.x, x_2878.y, x_2878.x, x_2878.y)) + vec4<f32>(x_2881.x, x_2881.y, x_2881.z, x_2881.y));
        let x_2885 : vec4<f32> = u_xlat8;
        let x_2888 : vec4<f32> = x_253.x_MainLightShadowmapSize;
        let x_2891 : vec4<f32> = u_xlat13;
        u_xlat32 = ((vec2<f32>(x_2885.x, x_2885.y) * vec2<f32>(x_2888.x, x_2888.y)) + vec2<f32>(x_2891.w, x_2891.y));
        let x_2895 : f32 = u_xlat13.y;
        u_xlat10.w = x_2895;
        let x_2898 : vec4<f32> = u_xlat8;
        let x_2901 : vec4<f32> = x_253.x_MainLightShadowmapSize;
        let x_2904 : vec4<f32> = u_xlat10;
        u_xlat60 = ((vec2<f32>(x_2898.x, x_2898.y) * vec2<f32>(x_2901.x, x_2901.y)) + vec2<f32>(x_2904.x, x_2904.w));
        let x_2907 : vec4<f32> = u_xlat13;
        let x_2908 : vec3<f32> = vec3<f32>(x_2907.x, x_2907.z, x_2907.w);
        let x_2909 : vec4<f32> = u_xlat11;
        u_xlat11 = vec4<f32>(x_2908.x, x_2909.y, x_2908.y, x_2908.z);
        let x_2911 : vec4<f32> = u_xlat8;
        let x_2914 : vec4<f32> = x_253.x_MainLightShadowmapSize;
        let x_2917 : vec4<f32> = u_xlat11;
        u_xlat13 = ((vec4<f32>(x_2911.x, x_2911.y, x_2911.x, x_2911.y) * vec4<f32>(x_2914.x, x_2914.y, x_2914.x, x_2914.y)) + vec4<f32>(x_2917.x, x_2917.y, x_2917.z, x_2917.y));
        let x_2921 : vec4<f32> = u_xlat8;
        let x_2924 : vec4<f32> = x_253.x_MainLightShadowmapSize;
        let x_2927 : vec4<f32> = u_xlat11;
        u_xlat55 = ((vec2<f32>(x_2921.x, x_2921.y) * vec2<f32>(x_2924.x, x_2924.y)) + vec2<f32>(x_2927.w, x_2927.y));
        let x_2931 : f32 = u_xlat10.x;
        u_xlat11.x = x_2931;
        let x_2933 : vec4<f32> = u_xlat8;
        let x_2936 : vec4<f32> = x_253.x_MainLightShadowmapSize;
        let x_2939 : vec4<f32> = u_xlat11;
        let x_2941 : vec2<f32> = ((vec2<f32>(x_2933.x, x_2933.y) * vec2<f32>(x_2936.x, x_2936.y)) + vec2<f32>(x_2939.x, x_2939.y));
        let x_2942 : vec4<f32> = u_xlat8;
        u_xlat8 = vec4<f32>(x_2941.x, x_2941.y, x_2942.z, x_2942.w);
        let x_2944 : vec4<f32> = u_xlat9;
        let x_2946 : vec4<f32> = u_xlat12;
        u_xlat19 = (vec4<f32>(x_2944.x, x_2944.x, x_2944.x, x_2944.x) * x_2946);
        let x_2949 : vec4<f32> = u_xlat9;
        let x_2951 : vec4<f32> = u_xlat12;
        u_xlat20 = (vec4<f32>(x_2949.y, x_2949.y, x_2949.y, x_2949.y) * x_2951);
        let x_2954 : vec4<f32> = u_xlat9;
        let x_2956 : vec4<f32> = u_xlat12;
        u_xlat21 = (vec4<f32>(x_2954.z, x_2954.z, x_2954.z, x_2954.z) * x_2956);
        let x_2958 : vec4<f32> = u_xlat9;
        let x_2960 : vec4<f32> = u_xlat12;
        u_xlat9 = (vec4<f32>(x_2958.w, x_2958.w, x_2958.w, x_2958.w) * x_2960);
        let x_2963 : vec4<f32> = u_xlat14;
        let x_2964 : vec2<f32> = vec2<f32>(x_2963.x, x_2963.y);
        let x_2966 : f32 = u_xlat2.z;
        txVec43 = vec3<f32>(x_2964.x, x_2964.y, x_2966);
        let x_2973 : vec3<f32> = txVec43;
        let x_2975 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2973.xy, x_2973.z);
        u_xlat72 = x_2975;
        let x_2977 : vec4<f32> = u_xlat14;
        let x_2978 : vec2<f32> = vec2<f32>(x_2977.z, x_2977.w);
        let x_2980 : f32 = u_xlat2.z;
        txVec44 = vec3<f32>(x_2978.x, x_2978.y, x_2980);
        let x_2987 : vec3<f32> = txVec44;
        let x_2989 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2987.xy, x_2987.z);
        u_xlat73 = x_2989;
        let x_2990 : f32 = u_xlat73;
        let x_2992 : f32 = u_xlat19.y;
        u_xlat73 = (x_2990 * x_2992);
        let x_2995 : f32 = u_xlat19.x;
        let x_2996 : f32 = u_xlat72;
        let x_2998 : f32 = u_xlat73;
        u_xlat72 = ((x_2995 * x_2996) + x_2998);
        let x_3001 : vec2<f32> = u_xlat52;
        let x_3003 : f32 = u_xlat2.z;
        txVec45 = vec3<f32>(x_3001.x, x_3001.y, x_3003);
        let x_3010 : vec3<f32> = txVec45;
        let x_3012 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_3010.xy, x_3010.z);
        u_xlat73 = x_3012;
        let x_3014 : f32 = u_xlat19.z;
        let x_3015 : f32 = u_xlat73;
        let x_3017 : f32 = u_xlat72;
        u_xlat72 = ((x_3014 * x_3015) + x_3017);
        let x_3020 : vec4<f32> = u_xlat17;
        let x_3021 : vec2<f32> = vec2<f32>(x_3020.x, x_3020.y);
        let x_3023 : f32 = u_xlat2.z;
        txVec46 = vec3<f32>(x_3021.x, x_3021.y, x_3023);
        let x_3030 : vec3<f32> = txVec46;
        let x_3032 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_3030.xy, x_3030.z);
        u_xlat73 = x_3032;
        let x_3034 : f32 = u_xlat19.w;
        let x_3035 : f32 = u_xlat73;
        let x_3037 : f32 = u_xlat72;
        u_xlat72 = ((x_3034 * x_3035) + x_3037);
        let x_3040 : vec4<f32> = u_xlat15;
        let x_3041 : vec2<f32> = vec2<f32>(x_3040.x, x_3040.y);
        let x_3043 : f32 = u_xlat2.z;
        txVec47 = vec3<f32>(x_3041.x, x_3041.y, x_3043);
        let x_3050 : vec3<f32> = txVec47;
        let x_3052 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_3050.xy, x_3050.z);
        u_xlat73 = x_3052;
        let x_3054 : f32 = u_xlat20.x;
        let x_3055 : f32 = u_xlat73;
        let x_3057 : f32 = u_xlat72;
        u_xlat72 = ((x_3054 * x_3055) + x_3057);
        let x_3060 : vec4<f32> = u_xlat15;
        let x_3061 : vec2<f32> = vec2<f32>(x_3060.z, x_3060.w);
        let x_3063 : f32 = u_xlat2.z;
        txVec48 = vec3<f32>(x_3061.x, x_3061.y, x_3063);
        let x_3070 : vec3<f32> = txVec48;
        let x_3072 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_3070.xy, x_3070.z);
        u_xlat73 = x_3072;
        let x_3074 : f32 = u_xlat20.y;
        let x_3075 : f32 = u_xlat73;
        let x_3077 : f32 = u_xlat72;
        u_xlat72 = ((x_3074 * x_3075) + x_3077);
        let x_3080 : vec4<f32> = u_xlat16;
        let x_3081 : vec2<f32> = vec2<f32>(x_3080.x, x_3080.y);
        let x_3083 : f32 = u_xlat2.z;
        txVec49 = vec3<f32>(x_3081.x, x_3081.y, x_3083);
        let x_3090 : vec3<f32> = txVec49;
        let x_3092 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_3090.xy, x_3090.z);
        u_xlat73 = x_3092;
        let x_3094 : f32 = u_xlat20.z;
        let x_3095 : f32 = u_xlat73;
        let x_3097 : f32 = u_xlat72;
        u_xlat72 = ((x_3094 * x_3095) + x_3097);
        let x_3100 : vec4<f32> = u_xlat17;
        let x_3101 : vec2<f32> = vec2<f32>(x_3100.z, x_3100.w);
        let x_3103 : f32 = u_xlat2.z;
        txVec50 = vec3<f32>(x_3101.x, x_3101.y, x_3103);
        let x_3110 : vec3<f32> = txVec50;
        let x_3112 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_3110.xy, x_3110.z);
        u_xlat73 = x_3112;
        let x_3114 : f32 = u_xlat20.w;
        let x_3115 : f32 = u_xlat73;
        let x_3117 : f32 = u_xlat72;
        u_xlat72 = ((x_3114 * x_3115) + x_3117);
        let x_3120 : vec4<f32> = u_xlat18;
        let x_3121 : vec2<f32> = vec2<f32>(x_3120.x, x_3120.y);
        let x_3123 : f32 = u_xlat2.z;
        txVec51 = vec3<f32>(x_3121.x, x_3121.y, x_3123);
        let x_3130 : vec3<f32> = txVec51;
        let x_3132 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_3130.xy, x_3130.z);
        u_xlat73 = x_3132;
        let x_3134 : f32 = u_xlat21.x;
        let x_3135 : f32 = u_xlat73;
        let x_3137 : f32 = u_xlat72;
        u_xlat72 = ((x_3134 * x_3135) + x_3137);
        let x_3140 : vec4<f32> = u_xlat18;
        let x_3141 : vec2<f32> = vec2<f32>(x_3140.z, x_3140.w);
        let x_3143 : f32 = u_xlat2.z;
        txVec52 = vec3<f32>(x_3141.x, x_3141.y, x_3143);
        let x_3150 : vec3<f32> = txVec52;
        let x_3152 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_3150.xy, x_3150.z);
        u_xlat73 = x_3152;
        let x_3154 : f32 = u_xlat21.y;
        let x_3155 : f32 = u_xlat73;
        let x_3157 : f32 = u_xlat72;
        u_xlat72 = ((x_3154 * x_3155) + x_3157);
        let x_3160 : vec2<f32> = u_xlat32;
        let x_3162 : f32 = u_xlat2.z;
        txVec53 = vec3<f32>(x_3160.x, x_3160.y, x_3162);
        let x_3169 : vec3<f32> = txVec53;
        let x_3171 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_3169.xy, x_3169.z);
        u_xlat73 = x_3171;
        let x_3173 : f32 = u_xlat21.z;
        let x_3174 : f32 = u_xlat73;
        let x_3176 : f32 = u_xlat72;
        u_xlat72 = ((x_3173 * x_3174) + x_3176);
        let x_3179 : vec2<f32> = u_xlat60;
        let x_3181 : f32 = u_xlat2.z;
        txVec54 = vec3<f32>(x_3179.x, x_3179.y, x_3181);
        let x_3188 : vec3<f32> = txVec54;
        let x_3190 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_3188.xy, x_3188.z);
        u_xlat73 = x_3190;
        let x_3192 : f32 = u_xlat21.w;
        let x_3193 : f32 = u_xlat73;
        let x_3195 : f32 = u_xlat72;
        u_xlat72 = ((x_3192 * x_3193) + x_3195);
        let x_3198 : vec4<f32> = u_xlat13;
        let x_3199 : vec2<f32> = vec2<f32>(x_3198.x, x_3198.y);
        let x_3201 : f32 = u_xlat2.z;
        txVec55 = vec3<f32>(x_3199.x, x_3199.y, x_3201);
        let x_3208 : vec3<f32> = txVec55;
        let x_3210 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_3208.xy, x_3208.z);
        u_xlat73 = x_3210;
        let x_3212 : f32 = u_xlat9.x;
        let x_3213 : f32 = u_xlat73;
        let x_3215 : f32 = u_xlat72;
        u_xlat72 = ((x_3212 * x_3213) + x_3215);
        let x_3218 : vec4<f32> = u_xlat13;
        let x_3219 : vec2<f32> = vec2<f32>(x_3218.z, x_3218.w);
        let x_3221 : f32 = u_xlat2.z;
        txVec56 = vec3<f32>(x_3219.x, x_3219.y, x_3221);
        let x_3228 : vec3<f32> = txVec56;
        let x_3230 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_3228.xy, x_3228.z);
        u_xlat73 = x_3230;
        let x_3232 : f32 = u_xlat9.y;
        let x_3233 : f32 = u_xlat73;
        let x_3235 : f32 = u_xlat72;
        u_xlat72 = ((x_3232 * x_3233) + x_3235);
        let x_3238 : vec2<f32> = u_xlat55;
        let x_3240 : f32 = u_xlat2.z;
        txVec57 = vec3<f32>(x_3238.x, x_3238.y, x_3240);
        let x_3247 : vec3<f32> = txVec57;
        let x_3249 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_3247.xy, x_3247.z);
        u_xlat73 = x_3249;
        let x_3251 : f32 = u_xlat9.z;
        let x_3252 : f32 = u_xlat73;
        let x_3254 : f32 = u_xlat72;
        u_xlat72 = ((x_3251 * x_3252) + x_3254);
        let x_3257 : vec4<f32> = u_xlat8;
        let x_3258 : vec2<f32> = vec2<f32>(x_3257.x, x_3257.y);
        let x_3260 : f32 = u_xlat2.z;
        txVec58 = vec3<f32>(x_3258.x, x_3258.y, x_3260);
        let x_3267 : vec3<f32> = txVec58;
        let x_3269 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_3267.xy, x_3267.z);
        u_xlat73 = x_3269;
        let x_3271 : f32 = u_xlat9.w;
        let x_3272 : f32 = u_xlat73;
        let x_3274 : f32 = u_xlat72;
        u_xlat0.x = ((x_3271 * x_3272) + x_3274);
      }
    }
  } else {
    let x_3279 : vec4<f32> = u_xlat2;
    let x_3280 : vec2<f32> = vec2<f32>(x_3279.x, x_3279.y);
    let x_3282 : f32 = u_xlat2.z;
    txVec59 = vec3<f32>(x_3280.x, x_3280.y, x_3282);
    let x_3289 : vec3<f32> = txVec59;
    let x_3291 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_3289.xy, x_3289.z);
    u_xlat0.x = x_3291;
  }
  let x_3294 : f32 = u_xlat0.x;
  let x_3296 : f32 = x_253.x_MainLightShadowParams.x;
  let x_3298 : f32 = u_xlat68;
  u_xlat0.x = ((x_3294 * x_3296) + x_3298);
  let x_3301 : bool = u_xlatb3;
  if (x_3301) {
    x_3302 = 1.0f;
  } else {
    let x_3307 : f32 = u_xlat0.x;
    x_3302 = x_3307;
  }
  let x_3308 : f32 = x_3302;
  u_xlat0.x = x_3308;
  let x_3310 : vec3<f32> = vs_INTERP0;
  let x_3312 : vec3<f32> = x_139.x_WorldSpaceCameraPos;
  let x_3314 : vec3<f32> = (x_3310 + -(x_3312));
  let x_3315 : vec4<f32> = u_xlat2;
  u_xlat2 = vec4<f32>(x_3314.x, x_3314.y, x_3314.z, x_3315.w);
  let x_3317 : vec4<f32> = u_xlat2;
  let x_3319 : vec4<f32> = u_xlat2;
  u_xlat2.x = dot(vec3<f32>(x_3317.x, x_3317.y, x_3317.z), vec3<f32>(x_3319.x, x_3319.y, x_3319.z));
  let x_3324 : f32 = u_xlat2.x;
  let x_3326 : f32 = x_253.x_MainLightShadowParams.z;
  let x_3329 : f32 = x_253.x_MainLightShadowParams.w;
  u_xlat2.x = ((x_3324 * x_3326) + x_3329);
  let x_3333 : f32 = u_xlat2.x;
  u_xlat2.x = clamp(x_3333, 0.0f, 1.0f);
  let x_3338 : f32 = u_xlat0.x;
  u_xlat24 = (-(x_3338) + 1.0f);
  let x_3342 : f32 = u_xlat2.x;
  let x_3343 : f32 = u_xlat24;
  let x_3346 : f32 = u_xlat0.x;
  u_xlat0.x = ((x_3342 * x_3343) + x_3346);
  let x_3355 : f32 = x_3353.x_MainLightCookieTextureFormat;
  u_xlatb2.x = !((x_3355 == -1.0f));
  let x_3359 : bool = u_xlatb2.x;
  if (x_3359) {
    let x_3362 : vec3<f32> = vs_INTERP0;
    let x_3365 : vec4<f32> = x_3353.x_MainLightWorldToLight[1i];
    let x_3367 : vec2<f32> = (vec2<f32>(x_3362.y, x_3362.y) * vec2<f32>(x_3365.x, x_3365.y));
    let x_3368 : vec4<f32> = u_xlat2;
    u_xlat2 = vec4<f32>(x_3367.x, x_3367.y, x_3368.z, x_3368.w);
    let x_3371 : vec4<f32> = x_3353.x_MainLightWorldToLight[0i];
    let x_3373 : vec3<f32> = vs_INTERP0;
    let x_3376 : vec4<f32> = u_xlat2;
    let x_3378 : vec2<f32> = ((vec2<f32>(x_3371.x, x_3371.y) * vec2<f32>(x_3373.x, x_3373.x)) + vec2<f32>(x_3376.x, x_3376.y));
    let x_3379 : vec4<f32> = u_xlat2;
    u_xlat2 = vec4<f32>(x_3378.x, x_3378.y, x_3379.z, x_3379.w);
    let x_3382 : vec4<f32> = x_3353.x_MainLightWorldToLight[2i];
    let x_3384 : vec3<f32> = vs_INTERP0;
    let x_3387 : vec4<f32> = u_xlat2;
    let x_3389 : vec2<f32> = ((vec2<f32>(x_3382.x, x_3382.y) * vec2<f32>(x_3384.z, x_3384.z)) + vec2<f32>(x_3387.x, x_3387.y));
    let x_3390 : vec4<f32> = u_xlat2;
    u_xlat2 = vec4<f32>(x_3389.x, x_3389.y, x_3390.z, x_3390.w);
    let x_3392 : vec4<f32> = u_xlat2;
    let x_3395 : vec4<f32> = x_3353.x_MainLightWorldToLight[3i];
    let x_3397 : vec2<f32> = (vec2<f32>(x_3392.x, x_3392.y) + vec2<f32>(x_3395.x, x_3395.y));
    let x_3398 : vec4<f32> = u_xlat2;
    u_xlat2 = vec4<f32>(x_3397.x, x_3397.y, x_3398.z, x_3398.w);
    let x_3400 : vec4<f32> = u_xlat2;
    let x_3403 : vec2<f32> = ((vec2<f32>(x_3400.x, x_3400.y) * vec2<f32>(0.5f, 0.5f)) + vec2<f32>(0.5f, 0.5f));
    let x_3404 : vec4<f32> = u_xlat2;
    u_xlat2 = vec4<f32>(x_3403.x, x_3403.y, x_3404.z, x_3404.w);
    let x_3411 : vec4<f32> = u_xlat2;
    let x_3414 : f32 = x_139.x_GlobalMipBias.x;
    let x_3415 : vec4<f32> = textureSampleBias(x_MainLightCookieTexture, sampler_MainLightCookieTexture, vec2<f32>(x_3411.x, x_3411.y), x_3414);
    u_xlat2 = x_3415;
    let x_3418 : f32 = x_3353.x_MainLightCookieTextureFormat;
    let x_3420 : f32 = x_3353.x_MainLightCookieTextureFormat;
    let x_3422 : f32 = x_3353.x_MainLightCookieTextureFormat;
    let x_3424 : f32 = x_3353.x_MainLightCookieTextureFormat;
    let x_3425 : vec4<f32> = vec4<f32>(x_3418, x_3420, x_3422, x_3424);
    let x_3432 : vec4<bool> = (vec4<f32>(x_3425.x, x_3425.y, x_3425.z, x_3425.w) == vec4<f32>(0.0f, 1.0f, 0.0f, 0.0f));
    u_xlatb8 = vec2<bool>(x_3432.x, x_3432.y);
    let x_3435 : bool = u_xlatb8.y;
    if (x_3435) {
      let x_3440 : f32 = u_xlat2.w;
      x_3436 = x_3440;
    } else {
      let x_3443 : f32 = u_xlat2.x;
      x_3436 = x_3443;
    }
    let x_3444 : f32 = x_3436;
    u_xlat68 = x_3444;
    let x_3446 : bool = u_xlatb8.x;
    if (x_3446) {
      let x_3450 : vec4<f32> = u_xlat2;
      x_3447 = vec3<f32>(x_3450.x, x_3450.y, x_3450.z);
    } else {
      let x_3453 : f32 = u_xlat68;
      x_3447 = vec3<f32>(x_3453, x_3453, x_3453);
    }
    let x_3455 : vec3<f32> = x_3447;
    let x_3456 : vec4<f32> = u_xlat2;
    u_xlat2 = vec4<f32>(x_3455.x, x_3455.y, x_3455.z, x_3456.w);
  } else {
    u_xlat2.x = 1.0f;
    u_xlat2.y = 1.0f;
    u_xlat2.z = 1.0f;
  }
  let x_3462 : vec4<f32> = u_xlat2;
  let x_3465 : vec4<f32> = x_139.x_MainLightColor;
  let x_3467 : vec3<f32> = (vec3<f32>(x_3462.x, x_3462.y, x_3462.z) * vec3<f32>(x_3465.x, x_3465.y, x_3465.z));
  let x_3468 : vec4<f32> = u_xlat2;
  u_xlat2 = vec4<f32>(x_3467.x, x_3467.y, x_3467.z, x_3468.w);
  let x_3470 : f32 = u_xlat50;
  let x_3472 : vec4<f32> = u_xlat2;
  let x_3474 : vec3<f32> = (vec3<f32>(x_3470, x_3470, x_3470) * vec3<f32>(x_3472.x, x_3472.y, x_3472.z));
  let x_3475 : vec4<f32> = u_xlat2;
  u_xlat2 = vec4<f32>(x_3474.x, x_3474.y, x_3474.z, x_3475.w);
  let x_3477 : vec4<f32> = u_xlat7;
  let x_3480 : vec4<f32> = u_xlat4;
  u_xlat68 = dot(-(vec3<f32>(x_3477.x, x_3477.y, x_3477.z)), vec3<f32>(x_3480.x, x_3480.y, x_3480.z));
  let x_3483 : f32 = u_xlat68;
  let x_3484 : f32 = u_xlat68;
  u_xlat68 = (x_3483 + x_3484);
  let x_3486 : vec4<f32> = u_xlat4;
  let x_3488 : f32 = u_xlat68;
  let x_3492 : vec4<f32> = u_xlat7;
  let x_3495 : vec3<f32> = ((vec3<f32>(x_3486.x, x_3486.y, x_3486.z) * -(vec3<f32>(x_3488, x_3488, x_3488))) + -(vec3<f32>(x_3492.x, x_3492.y, x_3492.z)));
  let x_3496 : vec4<f32> = u_xlat8;
  u_xlat8 = vec4<f32>(x_3495.x, x_3495.y, x_3495.z, x_3496.w);
  let x_3498 : vec4<f32> = u_xlat4;
  let x_3500 : vec4<f32> = u_xlat7;
  u_xlat68 = dot(vec3<f32>(x_3498.x, x_3498.y, x_3498.z), vec3<f32>(x_3500.x, x_3500.y, x_3500.z));
  let x_3503 : f32 = u_xlat68;
  u_xlat68 = clamp(x_3503, 0.0f, 1.0f);
  let x_3505 : f32 = u_xlat68;
  u_xlat68 = (-(x_3505) + 1.0f);
  let x_3508 : f32 = u_xlat68;
  let x_3509 : f32 = u_xlat68;
  u_xlat68 = (x_3508 * x_3509);
  let x_3511 : f32 = u_xlat68;
  let x_3512 : f32 = u_xlat68;
  u_xlat68 = (x_3511 * x_3512);
  let x_3515 : f32 = u_xlat25.x;
  u_xlat3.x = ((-(x_3515) * 0.699999988f) + 1.700000048f);
  let x_3523 : f32 = u_xlat3.x;
  let x_3525 : f32 = u_xlat25.x;
  u_xlat3.x = (x_3523 * x_3525);
  let x_3529 : f32 = u_xlat3.x;
  u_xlat3.x = (x_3529 * 6.0f);
  let x_3541 : vec4<f32> = u_xlat8;
  let x_3544 : f32 = u_xlat3.x;
  let x_3545 : vec4<f32> = textureSampleLevel(unity_SpecCube0, samplerunity_SpecCube0, vec3<f32>(x_3541.x, x_3541.y, x_3541.z), x_3544);
  u_xlat8 = x_3545;
  let x_3547 : f32 = u_xlat8.w;
  u_xlat3.x = (x_3547 + -1.0f);
  let x_3551 : f32 = x_60.unity_SpecCube0_HDR.w;
  let x_3553 : f32 = u_xlat3.x;
  u_xlat3.x = ((x_3551 * x_3553) + 1.0f);
  let x_3558 : f32 = u_xlat3.x;
  u_xlat3.x = max(x_3558, 0.0f);
  let x_3562 : f32 = u_xlat3.x;
  u_xlat3.x = log2(x_3562);
  let x_3566 : f32 = u_xlat3.x;
  let x_3568 : f32 = x_60.unity_SpecCube0_HDR.y;
  u_xlat3.x = (x_3566 * x_3568);
  let x_3572 : f32 = u_xlat3.x;
  u_xlat3.x = exp2(x_3572);
  let x_3576 : f32 = u_xlat3.x;
  let x_3578 : f32 = x_60.unity_SpecCube0_HDR.x;
  u_xlat3.x = (x_3576 * x_3578);
  let x_3581 : vec4<f32> = u_xlat8;
  let x_3583 : vec4<f32> = u_xlat3;
  let x_3585 : vec3<f32> = (vec3<f32>(x_3581.x, x_3581.y, x_3581.z) * vec3<f32>(x_3583.x, x_3583.x, x_3583.x));
  let x_3586 : vec4<f32> = u_xlat8;
  u_xlat8 = vec4<f32>(x_3585.x, x_3585.y, x_3585.z, x_3586.w);
  let x_3588 : f32 = u_xlat69;
  let x_3590 : f32 = u_xlat69;
  let x_3594 : vec2<f32> = ((vec2<f32>(x_3588, x_3588) * vec2<f32>(x_3590, x_3590)) + vec2<f32>(-1.0f, 1.0f));
  let x_3595 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_3594.x, x_3594.y, x_3595.z, x_3595.w);
  let x_3598 : f32 = u_xlat3.y;
  u_xlat25.x = (1.0f / x_3598);
  let x_3601 : f32 = u_xlat71;
  u_xlat69 = (x_3601 + -0.039999999f);
  let x_3604 : f32 = u_xlat68;
  let x_3605 : f32 = u_xlat69;
  u_xlat68 = ((x_3604 * x_3605) + 0.039999999f);
  let x_3609 : f32 = u_xlat68;
  let x_3611 : f32 = u_xlat25.x;
  u_xlat68 = (x_3609 * x_3611);
  let x_3613 : f32 = u_xlat68;
  let x_3615 : vec4<f32> = u_xlat8;
  let x_3617 : vec3<f32> = (vec3<f32>(x_3613, x_3613, x_3613) * vec3<f32>(x_3615.x, x_3615.y, x_3615.z));
  let x_3618 : vec4<f32> = u_xlat8;
  u_xlat8 = vec4<f32>(x_3617.x, x_3617.y, x_3617.z, x_3618.w);
  let x_3620 : vec3<f32> = u_xlat22;
  let x_3621 : vec3<f32> = u_xlat5;
  let x_3623 : vec4<f32> = u_xlat8;
  u_xlat22 = ((x_3620 * x_3621) + vec3<f32>(x_3623.x, x_3623.y, x_3623.z));
  let x_3627 : f32 = u_xlat0.x;
  let x_3629 : f32 = x_60.unity_LightData.z;
  u_xlat0.x = (x_3627 * x_3629);
  let x_3632 : vec4<f32> = u_xlat4;
  let x_3635 : vec4<f32> = x_139.x_MainLightPosition;
  u_xlat68 = dot(vec3<f32>(x_3632.x, x_3632.y, x_3632.z), vec3<f32>(x_3635.x, x_3635.y, x_3635.z));
  let x_3638 : f32 = u_xlat68;
  u_xlat68 = clamp(x_3638, 0.0f, 1.0f);
  let x_3641 : f32 = u_xlat0.x;
  let x_3642 : f32 = u_xlat68;
  u_xlat0.x = (x_3641 * x_3642);
  let x_3645 : vec3<f32> = u_xlat0;
  let x_3647 : vec4<f32> = u_xlat2;
  let x_3649 : vec3<f32> = (vec3<f32>(x_3645.x, x_3645.x, x_3645.x) * vec3<f32>(x_3647.x, x_3647.y, x_3647.z));
  let x_3650 : vec4<f32> = u_xlat2;
  u_xlat2 = vec4<f32>(x_3649.x, x_3649.y, x_3649.z, x_3650.w);
  let x_3652 : vec4<f32> = u_xlat7;
  let x_3655 : vec4<f32> = x_139.x_MainLightPosition;
  let x_3657 : vec3<f32> = (vec3<f32>(x_3652.x, x_3652.y, x_3652.z) + vec3<f32>(x_3655.x, x_3655.y, x_3655.z));
  let x_3658 : vec4<f32> = u_xlat8;
  u_xlat8 = vec4<f32>(x_3657.x, x_3657.y, x_3657.z, x_3658.w);
  let x_3660 : vec4<f32> = u_xlat8;
  let x_3662 : vec4<f32> = u_xlat8;
  u_xlat0.x = dot(vec3<f32>(x_3660.x, x_3660.y, x_3660.z), vec3<f32>(x_3662.x, x_3662.y, x_3662.z));
  let x_3667 : f32 = u_xlat0.x;
  u_xlat0.x = max(x_3667, 1.17549435e-37f);
  let x_3671 : f32 = u_xlat0.x;
  u_xlat0.x = inverseSqrt(x_3671);
  let x_3674 : vec3<f32> = u_xlat0;
  let x_3676 : vec4<f32> = u_xlat8;
  let x_3678 : vec3<f32> = (vec3<f32>(x_3674.x, x_3674.x, x_3674.x) * vec3<f32>(x_3676.x, x_3676.y, x_3676.z));
  let x_3679 : vec4<f32> = u_xlat8;
  u_xlat8 = vec4<f32>(x_3678.x, x_3678.y, x_3678.z, x_3679.w);
  let x_3681 : vec4<f32> = u_xlat4;
  let x_3683 : vec4<f32> = u_xlat8;
  u_xlat0.x = dot(vec3<f32>(x_3681.x, x_3681.y, x_3681.z), vec3<f32>(x_3683.x, x_3683.y, x_3683.z));
  let x_3688 : f32 = u_xlat0.x;
  u_xlat0.x = clamp(x_3688, 0.0f, 1.0f);
  let x_3692 : vec4<f32> = x_139.x_MainLightPosition;
  let x_3694 : vec4<f32> = u_xlat8;
  u_xlat68 = dot(vec3<f32>(x_3692.x, x_3692.y, x_3692.z), vec3<f32>(x_3694.x, x_3694.y, x_3694.z));
  let x_3697 : f32 = u_xlat68;
  u_xlat68 = clamp(x_3697, 0.0f, 1.0f);
  let x_3700 : f32 = u_xlat0.x;
  let x_3702 : f32 = u_xlat0.x;
  u_xlat0.x = (x_3700 * x_3702);
  let x_3706 : f32 = u_xlat0.x;
  let x_3708 : f32 = u_xlat3.x;
  u_xlat0.x = ((x_3706 * x_3708) + 1.000010014f);
  let x_3713 : f32 = u_xlat68;
  let x_3714 : f32 = u_xlat68;
  u_xlat68 = (x_3713 * x_3714);
  let x_3717 : f32 = u_xlat0.x;
  let x_3719 : f32 = u_xlat0.x;
  u_xlat0.x = (x_3717 * x_3719);
  let x_3722 : f32 = u_xlat68;
  u_xlat68 = max(x_3722, 0.100000001f);
  let x_3726 : f32 = u_xlat0.x;
  let x_3727 : f32 = u_xlat68;
  u_xlat0.x = (x_3726 * x_3727);
  let x_3731 : f32 = u_xlat6.x;
  let x_3733 : f32 = u_xlat0.x;
  u_xlat0.x = (x_3731 * x_3733);
  let x_3736 : f32 = u_xlat70;
  let x_3738 : f32 = u_xlat0.x;
  u_xlat0.x = (x_3736 / x_3738);
  let x_3741 : vec3<f32> = u_xlat0;
  let x_3745 : vec3<f32> = u_xlat5;
  let x_3746 : vec3<f32> = ((vec3<f32>(x_3741.x, x_3741.x, x_3741.x) * vec3<f32>(0.039999999f, 0.039999999f, 0.039999999f)) + x_3745);
  let x_3747 : vec4<f32> = u_xlat8;
  u_xlat8 = vec4<f32>(x_3746.x, x_3746.y, x_3746.z, x_3747.w);
  let x_3749 : vec4<f32> = u_xlat2;
  let x_3751 : vec4<f32> = u_xlat8;
  let x_3753 : vec3<f32> = (vec3<f32>(x_3749.x, x_3749.y, x_3749.z) * vec3<f32>(x_3751.x, x_3751.y, x_3751.z));
  let x_3754 : vec4<f32> = u_xlat2;
  u_xlat2 = vec4<f32>(x_3753.x, x_3753.y, x_3753.z, x_3754.w);
  let x_3757 : f32 = x_139.x_AdditionalLightsCount.x;
  let x_3759 : f32 = x_60.unity_LightData.y;
  u_xlat0.x = min(x_3757, x_3759);
  let x_3763 : f32 = u_xlat0.x;
  u_xlatu0 = bitcast<u32>(i32(x_3763));
  let x_3767 : f32 = x_3353.x_AdditionalLightsCookieAtlasTextureFormat;
  let x_3769 : f32 = x_3353.x_AdditionalLightsCookieAtlasTextureFormat;
  let x_3771 : f32 = x_3353.x_AdditionalLightsCookieAtlasTextureFormat;
  let x_3773 : f32 = x_3353.x_AdditionalLightsCookieAtlasTextureFormat;
  let x_3774 : vec4<f32> = vec4<f32>(x_3767, x_3769, x_3771, x_3773);
  let x_3781 : vec4<bool> = (vec4<f32>(x_3774.x, x_3774.y, x_3774.z, x_3774.w) == vec4<f32>(0.0f, 0.0f, 1.0f, 1.0f));
  let x_3782 : vec2<bool> = vec2<bool>(x_3781.x, x_3781.z);
  let x_3783 : vec3<bool> = u_xlatb25;
  u_xlatb25 = vec3<bool>(x_3782.x, x_3783.y, x_3782.y);
  u_xlat8.x = 0.0f;
  u_xlat8.y = 0.0f;
  u_xlat8.z = 0.0f;
  u_xlatu_loop_1 = 0u;
  loop {
    let x_3794 : u32 = u_xlatu_loop_1;
    let x_3795 : u32 = u_xlatu0;
    if ((x_3794 < x_3795)) {
    } else {
      break;
    }
    let x_3798 : u32 = u_xlatu_loop_1;
    u_xlatu71 = (x_3798 >> 2u);
    let x_3801 : u32 = u_xlatu_loop_1;
    u_xlati72 = bitcast<i32>((x_3801 & 3u));
    let x_3804 : u32 = u_xlatu71;
    let x_3807 : vec4<f32> = x_60.unity_LightIndices[bitcast<i32>(x_3804)];
    let x_3817 : i32 = u_xlati72;
    indexable = array<vec4<u32>, 4u>(vec4<u32>(1065353216u, 0u, 0u, 0u), vec4<u32>(0u, 1065353216u, 0u, 0u), vec4<u32>(0u, 0u, 1065353216u, 0u), vec4<u32>(0u, 0u, 0u, 1065353216u));
    let x_3822 : vec4<u32> = indexable[x_3817];
    u_xlat71 = dot(x_3807, bitcast<vec4<f32>>(x_3822));
    let x_3825 : f32 = u_xlat71;
    u_xlatu71 = bitcast<u32>(i32(x_3825));
    let x_3828 : vec3<f32> = vs_INTERP0;
    let x_3840 : u32 = u_xlatu71;
    let x_3843 : vec4<f32> = x_3839.x_AdditionalLightsPosition[bitcast<i32>(x_3840)];
    let x_3846 : u32 = u_xlatu71;
    let x_3849 : vec4<f32> = x_3839.x_AdditionalLightsPosition[bitcast<i32>(x_3846)];
    let x_3851 : vec3<f32> = ((-(x_3828) * vec3<f32>(x_3843.w, x_3843.w, x_3843.w)) + vec3<f32>(x_3849.x, x_3849.y, x_3849.z));
    let x_3852 : vec4<f32> = u_xlat9;
    u_xlat9 = vec4<f32>(x_3851.x, x_3851.y, x_3851.z, x_3852.w);
    let x_3854 : vec4<f32> = u_xlat9;
    let x_3856 : vec4<f32> = u_xlat9;
    u_xlat72 = dot(vec3<f32>(x_3854.x, x_3854.y, x_3854.z), vec3<f32>(x_3856.x, x_3856.y, x_3856.z));
    let x_3859 : f32 = u_xlat72;
    u_xlat72 = max(x_3859, 6.10351562e-05f);
    let x_3862 : f32 = u_xlat72;
    u_xlat73 = inverseSqrt(x_3862);
    let x_3864 : f32 = u_xlat73;
    let x_3866 : vec4<f32> = u_xlat9;
    let x_3868 : vec3<f32> = (vec3<f32>(x_3864, x_3864, x_3864) * vec3<f32>(x_3866.x, x_3866.y, x_3866.z));
    let x_3869 : vec4<f32> = u_xlat10;
    u_xlat10 = vec4<f32>(x_3868.x, x_3868.y, x_3868.z, x_3869.w);
    let x_3872 : f32 = u_xlat72;
    u_xlat74 = (1.0f / x_3872);
    let x_3874 : f32 = u_xlat72;
    let x_3875 : u32 = u_xlatu71;
    let x_3878 : f32 = x_3839.x_AdditionalLightsAttenuation[bitcast<i32>(x_3875)].x;
    u_xlat72 = (x_3874 * x_3878);
    let x_3880 : f32 = u_xlat72;
    let x_3882 : f32 = u_xlat72;
    u_xlat72 = ((-(x_3880) * x_3882) + 1.0f);
    let x_3885 : f32 = u_xlat72;
    u_xlat72 = max(x_3885, 0.0f);
    let x_3887 : f32 = u_xlat72;
    let x_3888 : f32 = u_xlat72;
    u_xlat72 = (x_3887 * x_3888);
    let x_3890 : f32 = u_xlat72;
    let x_3891 : f32 = u_xlat74;
    u_xlat72 = (x_3890 * x_3891);
    let x_3893 : u32 = u_xlatu71;
    let x_3896 : vec4<f32> = x_3839.x_AdditionalLightsSpotDir[bitcast<i32>(x_3893)];
    let x_3898 : vec4<f32> = u_xlat10;
    u_xlat74 = dot(vec3<f32>(x_3896.x, x_3896.y, x_3896.z), vec3<f32>(x_3898.x, x_3898.y, x_3898.z));
    let x_3901 : f32 = u_xlat74;
    let x_3902 : u32 = u_xlatu71;
    let x_3905 : f32 = x_3839.x_AdditionalLightsAttenuation[bitcast<i32>(x_3902)].z;
    let x_3907 : u32 = u_xlatu71;
    let x_3910 : f32 = x_3839.x_AdditionalLightsAttenuation[bitcast<i32>(x_3907)].w;
    u_xlat74 = ((x_3901 * x_3905) + x_3910);
    let x_3912 : f32 = u_xlat74;
    u_xlat74 = clamp(x_3912, 0.0f, 1.0f);
    let x_3914 : f32 = u_xlat74;
    let x_3915 : f32 = u_xlat74;
    u_xlat74 = (x_3914 * x_3915);
    let x_3917 : f32 = u_xlat72;
    let x_3918 : f32 = u_xlat74;
    u_xlat72 = (x_3917 * x_3918);
    let x_3921 : u32 = u_xlatu71;
    u_xlatu74 = (x_3921 >> 5u);
    let x_3924 : u32 = u_xlatu71;
    u_xlati75 = (1i << bitcast<u32>((bitcast<i32>(x_3924) & 31i)));
    let x_3930 : i32 = u_xlati75;
    let x_3932 : u32 = u_xlatu74;
    let x_3935 : f32 = x_3353.x_AdditionalLightsCookieEnableBits[bitcast<i32>(x_3932)].el;
    u_xlati74 = bitcast<i32>((bitcast<u32>(x_3930) & bitcast<u32>(x_3935)));
    let x_3939 : i32 = u_xlati74;
    if ((x_3939 != 0i)) {
      let x_3949 : u32 = u_xlatu71;
      let x_3952 : f32 = x_3948.x_AdditionalLightsLightTypes[bitcast<i32>(x_3949)].el;
      u_xlati74 = i32(x_3952);
      let x_3954 : i32 = u_xlati74;
      u_xlati75 = select(1i, 0i, (x_3954 != 0i));
      let x_3958 : u32 = u_xlatu71;
      u_xlati76 = (bitcast<i32>(x_3958) << bitcast<u32>(2i));
      let x_3961 : i32 = u_xlati75;
      if ((x_3961 != 0i)) {
        let x_3965 : vec3<f32> = vs_INTERP0;
        let x_3967 : i32 = u_xlati76;
        let x_3970 : i32 = u_xlati76;
        let x_3974 : vec4<f32> = x_3948.x_AdditionalLightsWorldToLights[((x_3967 + 1i) / 4i)][((x_3970 + 1i) % 4i)];
        let x_3976 : vec3<f32> = (vec3<f32>(x_3965.y, x_3965.y, x_3965.y) * vec3<f32>(x_3974.x, x_3974.y, x_3974.w));
        let x_3977 : vec4<f32> = u_xlat11;
        u_xlat11 = vec4<f32>(x_3976.x, x_3976.y, x_3976.z, x_3977.w);
        let x_3979 : i32 = u_xlati76;
        let x_3981 : i32 = u_xlati76;
        let x_3984 : vec4<f32> = x_3948.x_AdditionalLightsWorldToLights[(x_3979 / 4i)][(x_3981 % 4i)];
        let x_3986 : vec3<f32> = vs_INTERP0;
        let x_3989 : vec4<f32> = u_xlat11;
        let x_3991 : vec3<f32> = ((vec3<f32>(x_3984.x, x_3984.y, x_3984.w) * vec3<f32>(x_3986.x, x_3986.x, x_3986.x)) + vec3<f32>(x_3989.x, x_3989.y, x_3989.z));
        let x_3992 : vec4<f32> = u_xlat11;
        u_xlat11 = vec4<f32>(x_3991.x, x_3991.y, x_3991.z, x_3992.w);
        let x_3994 : i32 = u_xlati76;
        let x_3997 : i32 = u_xlati76;
        let x_4001 : vec4<f32> = x_3948.x_AdditionalLightsWorldToLights[((x_3994 + 2i) / 4i)][((x_3997 + 2i) % 4i)];
        let x_4003 : vec3<f32> = vs_INTERP0;
        let x_4006 : vec4<f32> = u_xlat11;
        let x_4008 : vec3<f32> = ((vec3<f32>(x_4001.x, x_4001.y, x_4001.w) * vec3<f32>(x_4003.z, x_4003.z, x_4003.z)) + vec3<f32>(x_4006.x, x_4006.y, x_4006.z));
        let x_4009 : vec4<f32> = u_xlat11;
        u_xlat11 = vec4<f32>(x_4008.x, x_4008.y, x_4008.z, x_4009.w);
        let x_4011 : vec4<f32> = u_xlat11;
        let x_4013 : i32 = u_xlati76;
        let x_4016 : i32 = u_xlati76;
        let x_4020 : vec4<f32> = x_3948.x_AdditionalLightsWorldToLights[((x_4013 + 3i) / 4i)][((x_4016 + 3i) % 4i)];
        let x_4022 : vec3<f32> = (vec3<f32>(x_4011.x, x_4011.y, x_4011.z) + vec3<f32>(x_4020.x, x_4020.y, x_4020.w));
        let x_4023 : vec4<f32> = u_xlat11;
        u_xlat11 = vec4<f32>(x_4022.x, x_4022.y, x_4022.z, x_4023.w);
        let x_4025 : vec4<f32> = u_xlat11;
        let x_4027 : vec4<f32> = u_xlat11;
        let x_4029 : vec2<f32> = (vec2<f32>(x_4025.x, x_4025.y) / vec2<f32>(x_4027.z, x_4027.z));
        let x_4030 : vec4<f32> = u_xlat11;
        u_xlat11 = vec4<f32>(x_4029.x, x_4029.y, x_4030.z, x_4030.w);
        let x_4032 : vec4<f32> = u_xlat11;
        let x_4035 : vec2<f32> = ((vec2<f32>(x_4032.x, x_4032.y) * vec2<f32>(0.5f, 0.5f)) + vec2<f32>(0.5f, 0.5f));
        let x_4036 : vec4<f32> = u_xlat11;
        u_xlat11 = vec4<f32>(x_4035.x, x_4035.y, x_4036.z, x_4036.w);
        let x_4038 : vec4<f32> = u_xlat11;
        let x_4042 : vec2<f32> = clamp(vec2<f32>(x_4038.x, x_4038.y), vec2<f32>(0.0f, 0.0f), vec2<f32>(1.0f, 1.0f));
        let x_4043 : vec4<f32> = u_xlat11;
        u_xlat11 = vec4<f32>(x_4042.x, x_4042.y, x_4043.z, x_4043.w);
        let x_4045 : u32 = u_xlatu71;
        let x_4048 : vec4<f32> = x_3948.x_AdditionalLightsCookieAtlasUVRects[bitcast<i32>(x_4045)];
        let x_4050 : vec4<f32> = u_xlat11;
        let x_4053 : u32 = u_xlatu71;
        let x_4056 : vec4<f32> = x_3948.x_AdditionalLightsCookieAtlasUVRects[bitcast<i32>(x_4053)];
        let x_4058 : vec2<f32> = ((vec2<f32>(x_4048.x, x_4048.y) * vec2<f32>(x_4050.x, x_4050.y)) + vec2<f32>(x_4056.z, x_4056.w));
        let x_4059 : vec4<f32> = u_xlat11;
        u_xlat11 = vec4<f32>(x_4058.x, x_4058.y, x_4059.z, x_4059.w);
      } else {
        let x_4063 : i32 = u_xlati74;
        u_xlatb74 = (x_4063 == 1i);
        let x_4065 : bool = u_xlatb74;
        u_xlati74 = select(0i, 1i, x_4065);
        let x_4067 : i32 = u_xlati74;
        if ((x_4067 != 0i)) {
          let x_4071 : vec3<f32> = vs_INTERP0;
          let x_4073 : i32 = u_xlati76;
          let x_4076 : i32 = u_xlati76;
          let x_4080 : vec4<f32> = x_3948.x_AdditionalLightsWorldToLights[((x_4073 + 1i) / 4i)][((x_4076 + 1i) % 4i)];
          u_xlat55 = (vec2<f32>(x_4071.y, x_4071.y) * vec2<f32>(x_4080.x, x_4080.y));
          let x_4083 : i32 = u_xlati76;
          let x_4085 : i32 = u_xlati76;
          let x_4088 : vec4<f32> = x_3948.x_AdditionalLightsWorldToLights[(x_4083 / 4i)][(x_4085 % 4i)];
          let x_4090 : vec3<f32> = vs_INTERP0;
          let x_4093 : vec2<f32> = u_xlat55;
          u_xlat55 = ((vec2<f32>(x_4088.x, x_4088.y) * vec2<f32>(x_4090.x, x_4090.x)) + x_4093);
          let x_4095 : i32 = u_xlati76;
          let x_4098 : i32 = u_xlati76;
          let x_4102 : vec4<f32> = x_3948.x_AdditionalLightsWorldToLights[((x_4095 + 2i) / 4i)][((x_4098 + 2i) % 4i)];
          let x_4104 : vec3<f32> = vs_INTERP0;
          let x_4107 : vec2<f32> = u_xlat55;
          u_xlat55 = ((vec2<f32>(x_4102.x, x_4102.y) * vec2<f32>(x_4104.z, x_4104.z)) + x_4107);
          let x_4109 : vec2<f32> = u_xlat55;
          let x_4110 : i32 = u_xlati76;
          let x_4113 : i32 = u_xlati76;
          let x_4117 : vec4<f32> = x_3948.x_AdditionalLightsWorldToLights[((x_4110 + 3i) / 4i)][((x_4113 + 3i) % 4i)];
          u_xlat55 = (x_4109 + vec2<f32>(x_4117.x, x_4117.y));
          let x_4120 : vec2<f32> = u_xlat55;
          u_xlat55 = ((x_4120 * vec2<f32>(0.5f, 0.5f)) + vec2<f32>(0.5f, 0.5f));
          let x_4123 : vec2<f32> = u_xlat55;
          u_xlat55 = fract(x_4123);
          let x_4125 : u32 = u_xlatu71;
          let x_4128 : vec4<f32> = x_3948.x_AdditionalLightsCookieAtlasUVRects[bitcast<i32>(x_4125)];
          let x_4130 : vec2<f32> = u_xlat55;
          let x_4132 : u32 = u_xlatu71;
          let x_4135 : vec4<f32> = x_3948.x_AdditionalLightsCookieAtlasUVRects[bitcast<i32>(x_4132)];
          let x_4137 : vec2<f32> = ((vec2<f32>(x_4128.x, x_4128.y) * x_4130) + vec2<f32>(x_4135.z, x_4135.w));
          let x_4138 : vec4<f32> = u_xlat11;
          u_xlat11 = vec4<f32>(x_4137.x, x_4137.y, x_4138.z, x_4138.w);
        } else {
          let x_4141 : vec3<f32> = vs_INTERP0;
          let x_4143 : i32 = u_xlati76;
          let x_4146 : i32 = u_xlati76;
          let x_4150 : vec4<f32> = x_3948.x_AdditionalLightsWorldToLights[((x_4143 + 1i) / 4i)][((x_4146 + 1i) % 4i)];
          u_xlat12 = (vec4<f32>(x_4141.y, x_4141.y, x_4141.y, x_4141.y) * x_4150);
          let x_4152 : i32 = u_xlati76;
          let x_4154 : i32 = u_xlati76;
          let x_4157 : vec4<f32> = x_3948.x_AdditionalLightsWorldToLights[(x_4152 / 4i)][(x_4154 % 4i)];
          let x_4158 : vec3<f32> = vs_INTERP0;
          let x_4161 : vec4<f32> = u_xlat12;
          u_xlat12 = ((x_4157 * vec4<f32>(x_4158.x, x_4158.x, x_4158.x, x_4158.x)) + x_4161);
          let x_4163 : i32 = u_xlati76;
          let x_4166 : i32 = u_xlati76;
          let x_4170 : vec4<f32> = x_3948.x_AdditionalLightsWorldToLights[((x_4163 + 2i) / 4i)][((x_4166 + 2i) % 4i)];
          let x_4171 : vec3<f32> = vs_INTERP0;
          let x_4174 : vec4<f32> = u_xlat12;
          u_xlat12 = ((x_4170 * vec4<f32>(x_4171.z, x_4171.z, x_4171.z, x_4171.z)) + x_4174);
          let x_4176 : vec4<f32> = u_xlat12;
          let x_4177 : i32 = u_xlati76;
          let x_4180 : i32 = u_xlati76;
          let x_4184 : vec4<f32> = x_3948.x_AdditionalLightsWorldToLights[((x_4177 + 3i) / 4i)][((x_4180 + 3i) % 4i)];
          u_xlat12 = (x_4176 + x_4184);
          let x_4186 : vec4<f32> = u_xlat12;
          let x_4188 : vec4<f32> = u_xlat12;
          let x_4190 : vec3<f32> = (vec3<f32>(x_4186.x, x_4186.y, x_4186.z) / vec3<f32>(x_4188.w, x_4188.w, x_4188.w));
          let x_4191 : vec4<f32> = u_xlat12;
          u_xlat12 = vec4<f32>(x_4190.x, x_4190.y, x_4190.z, x_4191.w);
          let x_4193 : vec4<f32> = u_xlat12;
          let x_4195 : vec4<f32> = u_xlat12;
          u_xlat74 = dot(vec3<f32>(x_4193.x, x_4193.y, x_4193.z), vec3<f32>(x_4195.x, x_4195.y, x_4195.z));
          let x_4198 : f32 = u_xlat74;
          u_xlat74 = inverseSqrt(x_4198);
          let x_4200 : f32 = u_xlat74;
          let x_4202 : vec4<f32> = u_xlat12;
          let x_4204 : vec3<f32> = (vec3<f32>(x_4200, x_4200, x_4200) * vec3<f32>(x_4202.x, x_4202.y, x_4202.z));
          let x_4205 : vec4<f32> = u_xlat12;
          u_xlat12 = vec4<f32>(x_4204.x, x_4204.y, x_4204.z, x_4205.w);
          let x_4207 : vec4<f32> = u_xlat12;
          u_xlat74 = dot(abs(vec3<f32>(x_4207.x, x_4207.y, x_4207.z)), vec3<f32>(1.0f, 1.0f, 1.0f));
          let x_4212 : f32 = u_xlat74;
          u_xlat74 = max(x_4212, 0.000001f);
          let x_4215 : f32 = u_xlat74;
          u_xlat74 = (1.0f / x_4215);
          let x_4217 : f32 = u_xlat74;
          let x_4219 : vec4<f32> = u_xlat12;
          let x_4221 : vec3<f32> = (vec3<f32>(x_4217, x_4217, x_4217) * vec3<f32>(x_4219.z, x_4219.x, x_4219.y));
          let x_4222 : vec4<f32> = u_xlat13;
          u_xlat13 = vec4<f32>(x_4221.x, x_4221.y, x_4221.z, x_4222.w);
          let x_4225 : f32 = u_xlat13.x;
          u_xlat13.x = -(x_4225);
          let x_4229 : f32 = u_xlat13.x;
          u_xlat13.x = clamp(x_4229, 0.0f, 1.0f);
          let x_4233 : vec4<f32> = u_xlat13;
          let x_4236 : vec4<bool> = (vec4<f32>(x_4233.y, x_4233.z, x_4233.y, x_4233.z) >= vec4<f32>(0.0f, 0.0f, 0.0f, 0.0f));
          u_xlatb55 = vec2<bool>(x_4236.x, x_4236.y);
          let x_4239 : bool = u_xlatb55.x;
          if (x_4239) {
            let x_4244 : f32 = u_xlat13.x;
            x_4240 = x_4244;
          } else {
            let x_4247 : f32 = u_xlat13.x;
            x_4240 = -(x_4247);
          }
          let x_4249 : f32 = x_4240;
          u_xlat55.x = x_4249;
          let x_4252 : bool = u_xlatb55.y;
          if (x_4252) {
            let x_4257 : f32 = u_xlat13.x;
            x_4253 = x_4257;
          } else {
            let x_4260 : f32 = u_xlat13.x;
            x_4253 = -(x_4260);
          }
          let x_4262 : f32 = x_4253;
          u_xlat55.y = x_4262;
          let x_4264 : vec4<f32> = u_xlat12;
          let x_4266 : f32 = u_xlat74;
          let x_4269 : vec2<f32> = u_xlat55;
          u_xlat55 = ((vec2<f32>(x_4264.x, x_4264.y) * vec2<f32>(x_4266, x_4266)) + x_4269);
          let x_4271 : vec2<f32> = u_xlat55;
          u_xlat55 = ((x_4271 * vec2<f32>(0.5f, 0.5f)) + vec2<f32>(0.5f, 0.5f));
          let x_4274 : vec2<f32> = u_xlat55;
          u_xlat55 = clamp(x_4274, vec2<f32>(0.0f, 0.0f), vec2<f32>(1.0f, 1.0f));
          let x_4278 : u32 = u_xlatu71;
          let x_4281 : vec4<f32> = x_3948.x_AdditionalLightsCookieAtlasUVRects[bitcast<i32>(x_4278)];
          let x_4283 : vec2<f32> = u_xlat55;
          let x_4285 : u32 = u_xlatu71;
          let x_4288 : vec4<f32> = x_3948.x_AdditionalLightsCookieAtlasUVRects[bitcast<i32>(x_4285)];
          let x_4290 : vec2<f32> = ((vec2<f32>(x_4281.x, x_4281.y) * x_4283) + vec2<f32>(x_4288.z, x_4288.w));
          let x_4291 : vec4<f32> = u_xlat11;
          u_xlat11 = vec4<f32>(x_4290.x, x_4290.y, x_4291.z, x_4291.w);
        }
      }
      let x_4298 : vec4<f32> = u_xlat11;
      let x_4301 : f32 = x_139.x_GlobalMipBias.x;
      let x_4302 : vec4<f32> = textureSampleBias(x_AdditionalLightsCookieAtlasTexture, sampler_AdditionalLightsCookieAtlasTexture, vec2<f32>(x_4298.x, x_4298.y), x_4301);
      u_xlat11 = x_4302;
      let x_4304 : bool = u_xlatb25.z;
      if (x_4304) {
        let x_4309 : f32 = u_xlat11.w;
        x_4305 = x_4309;
      } else {
        let x_4312 : f32 = u_xlat11.x;
        x_4305 = x_4312;
      }
      let x_4313 : f32 = x_4305;
      u_xlat74 = x_4313;
      let x_4315 : bool = u_xlatb25.x;
      if (x_4315) {
        let x_4319 : vec4<f32> = u_xlat11;
        x_4316 = vec3<f32>(x_4319.x, x_4319.y, x_4319.z);
      } else {
        let x_4322 : f32 = u_xlat74;
        x_4316 = vec3<f32>(x_4322, x_4322, x_4322);
      }
      let x_4324 : vec3<f32> = x_4316;
      let x_4325 : vec4<f32> = u_xlat11;
      u_xlat11 = vec4<f32>(x_4324.x, x_4324.y, x_4324.z, x_4325.w);
    } else {
      u_xlat11.x = 1.0f;
      u_xlat11.y = 1.0f;
      u_xlat11.z = 1.0f;
    }
    let x_4331 : vec4<f32> = u_xlat11;
    let x_4333 : u32 = u_xlatu71;
    let x_4336 : vec4<f32> = x_3839.x_AdditionalLightsColor[bitcast<i32>(x_4333)];
    let x_4338 : vec3<f32> = (vec3<f32>(x_4331.x, x_4331.y, x_4331.z) * vec3<f32>(x_4336.x, x_4336.y, x_4336.z));
    let x_4339 : vec4<f32> = u_xlat11;
    u_xlat11 = vec4<f32>(x_4338.x, x_4338.y, x_4338.z, x_4339.w);
    let x_4341 : f32 = u_xlat50;
    let x_4343 : vec4<f32> = u_xlat11;
    let x_4345 : vec3<f32> = (vec3<f32>(x_4341, x_4341, x_4341) * vec3<f32>(x_4343.x, x_4343.y, x_4343.z));
    let x_4346 : vec4<f32> = u_xlat11;
    u_xlat11 = vec4<f32>(x_4345.x, x_4345.y, x_4345.z, x_4346.w);
    let x_4348 : vec4<f32> = u_xlat4;
    let x_4350 : vec4<f32> = u_xlat10;
    u_xlat71 = dot(vec3<f32>(x_4348.x, x_4348.y, x_4348.z), vec3<f32>(x_4350.x, x_4350.y, x_4350.z));
    let x_4353 : f32 = u_xlat71;
    u_xlat71 = clamp(x_4353, 0.0f, 1.0f);
    let x_4355 : f32 = u_xlat71;
    let x_4356 : f32 = u_xlat72;
    u_xlat71 = (x_4355 * x_4356);
    let x_4358 : f32 = u_xlat71;
    let x_4360 : vec4<f32> = u_xlat11;
    let x_4362 : vec3<f32> = (vec3<f32>(x_4358, x_4358, x_4358) * vec3<f32>(x_4360.x, x_4360.y, x_4360.z));
    let x_4363 : vec4<f32> = u_xlat11;
    u_xlat11 = vec4<f32>(x_4362.x, x_4362.y, x_4362.z, x_4363.w);
    let x_4365 : vec4<f32> = u_xlat9;
    let x_4367 : f32 = u_xlat73;
    let x_4370 : vec4<f32> = u_xlat7;
    let x_4372 : vec3<f32> = ((vec3<f32>(x_4365.x, x_4365.y, x_4365.z) * vec3<f32>(x_4367, x_4367, x_4367)) + vec3<f32>(x_4370.x, x_4370.y, x_4370.z));
    let x_4373 : vec4<f32> = u_xlat9;
    u_xlat9 = vec4<f32>(x_4372.x, x_4372.y, x_4372.z, x_4373.w);
    let x_4375 : vec4<f32> = u_xlat9;
    let x_4377 : vec4<f32> = u_xlat9;
    u_xlat71 = dot(vec3<f32>(x_4375.x, x_4375.y, x_4375.z), vec3<f32>(x_4377.x, x_4377.y, x_4377.z));
    let x_4380 : f32 = u_xlat71;
    u_xlat71 = max(x_4380, 1.17549435e-37f);
    let x_4382 : f32 = u_xlat71;
    u_xlat71 = inverseSqrt(x_4382);
    let x_4384 : f32 = u_xlat71;
    let x_4386 : vec4<f32> = u_xlat9;
    let x_4388 : vec3<f32> = (vec3<f32>(x_4384, x_4384, x_4384) * vec3<f32>(x_4386.x, x_4386.y, x_4386.z));
    let x_4389 : vec4<f32> = u_xlat9;
    u_xlat9 = vec4<f32>(x_4388.x, x_4388.y, x_4388.z, x_4389.w);
    let x_4391 : vec4<f32> = u_xlat4;
    let x_4393 : vec4<f32> = u_xlat9;
    u_xlat71 = dot(vec3<f32>(x_4391.x, x_4391.y, x_4391.z), vec3<f32>(x_4393.x, x_4393.y, x_4393.z));
    let x_4396 : f32 = u_xlat71;
    u_xlat71 = clamp(x_4396, 0.0f, 1.0f);
    let x_4398 : vec4<f32> = u_xlat10;
    let x_4400 : vec4<f32> = u_xlat9;
    u_xlat72 = dot(vec3<f32>(x_4398.x, x_4398.y, x_4398.z), vec3<f32>(x_4400.x, x_4400.y, x_4400.z));
    let x_4403 : f32 = u_xlat72;
    u_xlat72 = clamp(x_4403, 0.0f, 1.0f);
    let x_4405 : f32 = u_xlat71;
    let x_4406 : f32 = u_xlat71;
    u_xlat71 = (x_4405 * x_4406);
    let x_4408 : f32 = u_xlat71;
    let x_4410 : f32 = u_xlat3.x;
    u_xlat71 = ((x_4408 * x_4410) + 1.000010014f);
    let x_4413 : f32 = u_xlat72;
    let x_4414 : f32 = u_xlat72;
    u_xlat72 = (x_4413 * x_4414);
    let x_4416 : f32 = u_xlat71;
    let x_4417 : f32 = u_xlat71;
    u_xlat71 = (x_4416 * x_4417);
    let x_4419 : f32 = u_xlat72;
    u_xlat72 = max(x_4419, 0.100000001f);
    let x_4421 : f32 = u_xlat71;
    let x_4422 : f32 = u_xlat72;
    u_xlat71 = (x_4421 * x_4422);
    let x_4425 : f32 = u_xlat6.x;
    let x_4426 : f32 = u_xlat71;
    u_xlat71 = (x_4425 * x_4426);
    let x_4428 : f32 = u_xlat70;
    let x_4429 : f32 = u_xlat71;
    u_xlat71 = (x_4428 / x_4429);
    let x_4431 : f32 = u_xlat71;
    let x_4434 : vec3<f32> = u_xlat5;
    let x_4435 : vec3<f32> = ((vec3<f32>(x_4431, x_4431, x_4431) * vec3<f32>(0.039999999f, 0.039999999f, 0.039999999f)) + x_4434);
    let x_4436 : vec4<f32> = u_xlat9;
    u_xlat9 = vec4<f32>(x_4435.x, x_4435.y, x_4435.z, x_4436.w);
    let x_4438 : vec4<f32> = u_xlat9;
    let x_4440 : vec4<f32> = u_xlat11;
    let x_4443 : vec4<f32> = u_xlat8;
    let x_4445 : vec3<f32> = ((vec3<f32>(x_4438.x, x_4438.y, x_4438.z) * vec3<f32>(x_4440.x, x_4440.y, x_4440.z)) + vec3<f32>(x_4443.x, x_4443.y, x_4443.z));
    let x_4446 : vec4<f32> = u_xlat8;
    u_xlat8 = vec4<f32>(x_4445.x, x_4445.y, x_4445.z, x_4446.w);

    continuing {
      let x_4448 : u32 = u_xlatu_loop_1;
      u_xlatu_loop_1 = (x_4448 + bitcast<u32>(1i));
    }
  }
  let x_4450 : vec3<f32> = u_xlat22;
  let x_4451 : vec3<f32> = u_xlat28;
  let x_4454 : vec4<f32> = u_xlat2;
  u_xlat0 = ((x_4450 * vec3<f32>(x_4451.x, x_4451.x, x_4451.x)) + vec3<f32>(x_4454.x, x_4454.y, x_4454.z));
  let x_4457 : vec4<f32> = u_xlat8;
  let x_4459 : vec3<f32> = u_xlat0;
  u_xlat0 = (vec3<f32>(x_4457.x, x_4457.y, x_4457.z) + x_4459);
  let x_4463 : vec4<f32> = vs_INTERP4;
  let x_4465 : vec3<f32> = u_xlat1;
  let x_4467 : vec3<f32> = u_xlat0;
  let x_4468 : vec3<f32> = ((vec3<f32>(x_4463.w, x_4463.w, x_4463.w) * x_4465) + x_4467);
  let x_4469 : vec4<f32> = SV_Target0;
  SV_Target0 = vec4<f32>(x_4468.x, x_4468.y, x_4468.z, x_4469.w);
  let x_4471 : bool = u_xlatb47;
  let x_4472 : f32 = u_xlat67;
  SV_Target0.w = select(1.0f, x_4472, x_4471);
  let x_4478 : u32 = x_139.x_RenderingLayerMaxInt;
  let x_4480 : f32 = x_60.unity_RenderingLayer.x;
  u_xlatu0 = (x_4478 & bitcast<u32>(x_4480));
  let x_4483 : u32 = u_xlatu0;
  u_xlat0.x = f32(x_4483);
  let x_4488 : f32 = u_xlat0.x;
  let x_4490 : f32 = x_139.x_RenderingLayerRcpMaxInt;
  SV_Target1.x = (x_4488 * x_4490);
  let x_4494 : f32 = SV_Target1.x;
  SV_Target1.x = clamp(x_4494, 0.0f, 1.0f);
  let x_4497 : vec4<f32> = SV_Target1;
  SV_Target1 = vec4<f32>(x_4497.x, vec3<f32>(0.0f, 0.0f, 0.0f).x, vec3<f32>(0.0f, 0.0f, 0.0f).y, vec3<f32>(0.0f, 0.0f, 0.0f).z);
  return;
}

struct main_out {
  @location(0)
  SV_Target0_1 : vec4<f32>,
  @location(1)
  SV_Target1_1 : vec4<f32>,
}

@fragment
fn main(@builtin(position) gl_FragCoord_param : vec4<f32>, @location(1) vs_INTERP1_param : vec3<f32>, @location(2) vs_INTERP2_param : vec4<f32>, @location(3) vs_INTERP3_param : vec4<f32>, @location(4) vs_INTERP4_param : vec4<f32>, @location(0) vs_INTERP0_param : vec3<f32>) -> main_out {
  gl_FragCoord = gl_FragCoord_param;
  vs_INTERP1 = vs_INTERP1_param;
  vs_INTERP2 = vs_INTERP2_param;
  vs_INTERP3 = vs_INTERP3_param;
  vs_INTERP4 = vs_INTERP4_param;
  vs_INTERP0 = vs_INTERP0_param;
  main_1();
  return main_out(SV_Target0, SV_Target1);
}

