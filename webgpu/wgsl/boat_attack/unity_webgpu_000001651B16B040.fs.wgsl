struct PGlobals {
  x_GlobalMipBias : vec2<f32>,
  @size(8)
  padding : u32,
  unity_MatrixInvVP : mat4x4<f32>,
}

type Arr = array<mat4x4<f32>, 5u>;

struct MainLightShadows {
  x_MainLightWorldToShadow : Arr,
  x_CascadeShadowSplitSpheres0 : vec4<f32>,
  x_CascadeShadowSplitSpheres1 : vec4<f32>,
  x_CascadeShadowSplitSpheres2 : vec4<f32>,
  x_CascadeShadowSplitSpheres3 : vec4<f32>,
  x_CascadeShadowSplitSphereRadii : vec4<f32>,
  x_MainLightShadowOffset0 : vec4<f32>,
  x_MainLightShadowOffset1 : vec4<f32>,
  x_MainLightShadowParams : vec4<f32>,
  x_MainLightShadowmapSize : vec4<f32>,
}

@group(0) @binding(1) var x_CameraDepthTexture : texture_2d<f32>;

@group(0) @binding(3) var sampler_CameraDepthTexture : sampler;

var<private> vs_TEXCOORD0 : vec2<f32>;

@group(1) @binding(0) var<uniform> x_27 : PGlobals;

@group(1) @binding(1) var<uniform> x_91 : MainLightShadows;

@group(0) @binding(0) var x_MainLightShadowmapTexture : texture_depth_2d;

@group(0) @binding(2) var sampler_MainLightShadowmapTexture : sampler_comparison;

var<private> SV_Target0 : vec4<f32>;

var<private> gl_FragCoord : vec4<f32>;

fn main_1() {
  var u_xlat0 : vec4<f32>;
  var u_xlat15 : vec2<f32>;
  var u_xlat1 : vec4<f32>;
  var u_xlatb45 : bool;
  var txVec0 : vec3<f32>;
  var u_xlat2 : vec4<f32>;
  var txVec1 : vec3<f32>;
  var txVec2 : vec3<f32>;
  var txVec3 : vec3<f32>;
  var u_xlat45 : f32;
  var u_xlatb1 : bool;
  var u_xlat31 : vec2<f32>;
  var u_xlat3 : vec4<f32>;
  var u_xlat33 : vec2<f32>;
  var u_xlat4 : vec4<f32>;
  var u_xlat5 : vec4<f32>;
  var u_xlat6 : vec4<f32>;
  var u_xlat7 : vec4<f32>;
  var u_xlat8 : vec4<f32>;
  var u_xlat9 : vec4<f32>;
  var txVec4 : vec3<f32>;
  var u_xlat16 : f32;
  var txVec5 : vec3<f32>;
  var txVec6 : vec3<f32>;
  var txVec7 : vec3<f32>;
  var txVec8 : vec3<f32>;
  var txVec9 : vec3<f32>;
  var txVec10 : vec3<f32>;
  var txVec11 : vec3<f32>;
  var txVec12 : vec3<f32>;
  var u_xlat17 : vec3<f32>;
  var u_xlat10 : vec4<f32>;
  var u_xlat11 : vec4<f32>;
  var u_xlat18 : vec2<f32>;
  var u_xlat39 : vec2<f32>;
  var u_xlat34 : vec2<f32>;
  var u_xlat12 : vec4<f32>;
  var u_xlat13 : vec4<f32>;
  var u_xlat14 : vec4<f32>;
  var txVec13 : vec3<f32>;
  var txVec14 : vec3<f32>;
  var u_xlat48 : f32;
  var txVec15 : vec3<f32>;
  var txVec16 : vec3<f32>;
  var u_xlat46 : f32;
  var txVec17 : vec3<f32>;
  var txVec18 : vec3<f32>;
  var txVec19 : vec3<f32>;
  var txVec20 : vec3<f32>;
  var txVec21 : vec3<f32>;
  var txVec22 : vec3<f32>;
  var txVec23 : vec3<f32>;
  var txVec24 : vec3<f32>;
  var txVec25 : vec3<f32>;
  var txVec26 : vec3<f32>;
  var txVec27 : vec3<f32>;
  var txVec28 : vec3<f32>;
  var txVec29 : vec3<f32>;
  var u_xlatb15 : bool;
  var u_xlatb30 : bool;
  var x_1429 : vec4<f32>;
  var u_xlat_precise_vec4 : vec4<f32>;
  var u_xlat_precise_ivec4 : vec4<i32>;
  var u_xlat_precise_bvec4 : vec4<bool>;
  var u_xlat_precise_uvec4 : vec4<u32>;
  let x_23 : vec2<f32> = vs_TEXCOORD0;
  let x_34 : f32 = x_27.x_GlobalMipBias.x;
  let x_35 : vec4<f32> = textureSampleBias(x_CameraDepthTexture, sampler_CameraDepthTexture, x_23, x_34);
  u_xlat0.x = x_35.x;
  let x_41 : vec2<f32> = vs_TEXCOORD0;
  u_xlat15 = ((x_41 * vec2<f32>(2.0f, 2.0f)) + vec2<f32>(-1.0f, -1.0f));
  let x_49 : vec2<f32> = u_xlat15;
  let x_55 : vec4<f32> = x_27.unity_MatrixInvVP[1i];
  u_xlat1 = (-(vec4<f32>(x_49.y, x_49.y, x_49.y, x_49.y)) * x_55);
  let x_58 : vec4<f32> = x_27.unity_MatrixInvVP[0i];
  let x_59 : vec2<f32> = u_xlat15;
  let x_62 : vec4<f32> = u_xlat1;
  u_xlat1 = ((x_58 * vec4<f32>(x_59.x, x_59.x, x_59.x, x_59.x)) + x_62);
  let x_66 : vec4<f32> = x_27.unity_MatrixInvVP[2i];
  let x_67 : vec4<f32> = u_xlat0;
  let x_70 : vec4<f32> = u_xlat1;
  u_xlat0 = ((x_66 * vec4<f32>(x_67.x, x_67.x, x_67.x, x_67.x)) + x_70);
  let x_72 : vec4<f32> = u_xlat0;
  let x_75 : vec4<f32> = x_27.unity_MatrixInvVP[3i];
  u_xlat0 = (x_72 + x_75);
  let x_78 : vec4<f32> = u_xlat0;
  let x_80 : vec4<f32> = u_xlat0;
  let x_82 : vec3<f32> = (vec3<f32>(x_78.x, x_78.y, x_78.z) / vec3<f32>(x_80.w, x_80.w, x_80.w));
  let x_83 : vec4<f32> = u_xlat0;
  u_xlat0 = vec4<f32>(x_82.x, x_82.y, x_82.z, x_83.w);
  let x_85 : vec4<f32> = u_xlat0;
  let x_93 : vec4<f32> = x_91.x_MainLightWorldToShadow[0i][1i];
  let x_95 : vec3<f32> = (vec3<f32>(x_85.y, x_85.y, x_85.y) * vec3<f32>(x_93.x, x_93.y, x_93.z));
  let x_96 : vec4<f32> = u_xlat1;
  u_xlat1 = vec4<f32>(x_95.x, x_95.y, x_95.z, x_96.w);
  let x_99 : vec4<f32> = x_91.x_MainLightWorldToShadow[0i][0i];
  let x_101 : vec4<f32> = u_xlat0;
  let x_104 : vec4<f32> = u_xlat1;
  let x_106 : vec3<f32> = ((vec3<f32>(x_99.x, x_99.y, x_99.z) * vec3<f32>(x_101.x, x_101.x, x_101.x)) + vec3<f32>(x_104.x, x_104.y, x_104.z));
  let x_107 : vec4<f32> = u_xlat0;
  u_xlat0 = vec4<f32>(x_106.x, x_106.y, x_107.z, x_106.z);
  let x_110 : vec4<f32> = x_91.x_MainLightWorldToShadow[0i][2i];
  let x_112 : vec4<f32> = u_xlat0;
  let x_115 : vec4<f32> = u_xlat0;
  let x_117 : vec3<f32> = ((vec3<f32>(x_110.x, x_110.y, x_110.z) * vec3<f32>(x_112.z, x_112.z, x_112.z)) + vec3<f32>(x_115.x, x_115.y, x_115.w));
  let x_118 : vec4<f32> = u_xlat0;
  u_xlat0 = vec4<f32>(x_117.x, x_117.y, x_117.z, x_118.w);
  let x_120 : vec4<f32> = u_xlat0;
  let x_123 : vec4<f32> = x_91.x_MainLightWorldToShadow[0i][3i];
  let x_125 : vec3<f32> = (vec3<f32>(x_120.x, x_120.y, x_120.z) + vec3<f32>(x_123.x, x_123.y, x_123.z));
  let x_126 : vec4<f32> = u_xlat0;
  u_xlat0 = vec4<f32>(x_125.x, x_125.y, x_125.z, x_126.w);
  let x_135 : f32 = x_91.x_MainLightShadowParams.y;
  u_xlatb45 = (0.0f < x_135);
  let x_137 : bool = u_xlatb45;
  if (x_137) {
    let x_141 : f32 = x_91.x_MainLightShadowParams.y;
    u_xlatb45 = (x_141 == 1.0f);
    let x_144 : bool = u_xlatb45;
    if (x_144) {
      let x_147 : vec4<f32> = u_xlat0;
      let x_151 : vec4<f32> = x_91.x_MainLightShadowOffset0;
      u_xlat1 = (vec4<f32>(x_147.x, x_147.y, x_147.x, x_147.y) + x_151);
      let x_155 : vec4<f32> = u_xlat1;
      let x_156 : vec2<f32> = vec2<f32>(x_155.x, x_155.y);
      let x_159 : f32 = u_xlat0.z;
      txVec0 = vec3<f32>(x_156.x, x_156.y, x_159);
      let x_172 : vec3<f32> = txVec0;
      let x_174 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_172.xy, x_172.z);
      u_xlat2.x = x_174;
      let x_177 : vec4<f32> = u_xlat1;
      let x_178 : vec2<f32> = vec2<f32>(x_177.z, x_177.w);
      let x_180 : f32 = u_xlat0.z;
      txVec1 = vec3<f32>(x_178.x, x_178.y, x_180);
      let x_187 : vec3<f32> = txVec1;
      let x_189 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_187.xy, x_187.z);
      u_xlat2.y = x_189;
      let x_191 : vec4<f32> = u_xlat0;
      let x_195 : vec4<f32> = x_91.x_MainLightShadowOffset1;
      u_xlat1 = (vec4<f32>(x_191.x, x_191.y, x_191.x, x_191.y) + x_195);
      let x_198 : vec4<f32> = u_xlat1;
      let x_199 : vec2<f32> = vec2<f32>(x_198.x, x_198.y);
      let x_201 : f32 = u_xlat0.z;
      txVec2 = vec3<f32>(x_199.x, x_199.y, x_201);
      let x_208 : vec3<f32> = txVec2;
      let x_210 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_208.xy, x_208.z);
      u_xlat2.z = x_210;
      let x_213 : vec4<f32> = u_xlat1;
      let x_214 : vec2<f32> = vec2<f32>(x_213.z, x_213.w);
      let x_216 : f32 = u_xlat0.z;
      txVec3 = vec3<f32>(x_214.x, x_214.y, x_216);
      let x_223 : vec3<f32> = txVec3;
      let x_225 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_223.xy, x_223.z);
      u_xlat2.w = x_225;
      let x_229 : vec4<f32> = u_xlat2;
      u_xlat45 = dot(x_229, vec4<f32>(0.25f, 0.25f, 0.25f, 0.25f));
    } else {
      let x_236 : f32 = x_91.x_MainLightShadowParams.y;
      u_xlatb1 = (x_236 == 2.0f);
      let x_238 : bool = u_xlatb1;
      if (x_238) {
        let x_241 : vec4<f32> = u_xlat0;
        let x_245 : vec4<f32> = x_91.x_MainLightShadowmapSize;
        let x_250 : vec2<f32> = ((vec2<f32>(x_241.x, x_241.y) * vec2<f32>(x_245.z, x_245.w)) + vec2<f32>(0.5f, 0.5f));
        let x_251 : vec4<f32> = u_xlat1;
        u_xlat1 = vec4<f32>(x_250.x, x_250.y, x_251.z, x_251.w);
        let x_253 : vec4<f32> = u_xlat1;
        let x_255 : vec2<f32> = floor(vec2<f32>(x_253.x, x_253.y));
        let x_256 : vec4<f32> = u_xlat1;
        u_xlat1 = vec4<f32>(x_255.x, x_255.y, x_256.z, x_256.w);
        let x_259 : vec4<f32> = u_xlat0;
        let x_262 : vec4<f32> = x_91.x_MainLightShadowmapSize;
        let x_265 : vec4<f32> = u_xlat1;
        u_xlat31 = ((vec2<f32>(x_259.x, x_259.y) * vec2<f32>(x_262.z, x_262.w)) + -(vec2<f32>(x_265.x, x_265.y)));
        let x_269 : vec2<f32> = u_xlat31;
        u_xlat2 = (vec4<f32>(x_269.x, x_269.x, x_269.y, x_269.y) + vec4<f32>(0.5f, 1.0f, 0.5f, 1.0f));
        let x_274 : vec4<f32> = u_xlat2;
        let x_276 : vec4<f32> = u_xlat2;
        u_xlat3 = (vec4<f32>(x_274.x, x_274.x, x_274.z, x_274.z) * vec4<f32>(x_276.x, x_276.x, x_276.z, x_276.z));
        let x_279 : vec4<f32> = u_xlat3;
        let x_283 : vec2<f32> = (vec2<f32>(x_279.y, x_279.w) * vec2<f32>(0.079999998f, 0.079999998f));
        let x_284 : vec4<f32> = u_xlat2;
        u_xlat2 = vec4<f32>(x_283.x, x_284.y, x_283.y, x_284.w);
        let x_286 : vec4<f32> = u_xlat3;
        let x_289 : vec2<f32> = u_xlat31;
        let x_291 : vec2<f32> = ((vec2<f32>(x_286.x, x_286.z) * vec2<f32>(0.5f, 0.5f)) + -(x_289));
        let x_292 : vec4<f32> = u_xlat3;
        u_xlat3 = vec4<f32>(x_291.x, x_291.y, x_292.z, x_292.w);
        let x_295 : vec2<f32> = u_xlat31;
        u_xlat33 = (-(x_295) + vec2<f32>(1.0f, 1.0f));
        let x_300 : vec2<f32> = u_xlat31;
        let x_302 : vec2<f32> = min(x_300, vec2<f32>(0.0f, 0.0f));
        let x_303 : vec4<f32> = u_xlat4;
        u_xlat4 = vec4<f32>(x_302.x, x_302.y, x_303.z, x_303.w);
        let x_305 : vec4<f32> = u_xlat4;
        let x_308 : vec4<f32> = u_xlat4;
        let x_311 : vec2<f32> = u_xlat33;
        let x_312 : vec2<f32> = ((-(vec2<f32>(x_305.x, x_305.y)) * vec2<f32>(x_308.x, x_308.y)) + x_311);
        let x_313 : vec4<f32> = u_xlat4;
        u_xlat4 = vec4<f32>(x_312.x, x_312.y, x_313.z, x_313.w);
        let x_315 : vec2<f32> = u_xlat31;
        u_xlat31 = max(x_315, vec2<f32>(0.0f, 0.0f));
        let x_317 : vec2<f32> = u_xlat31;
        let x_319 : vec2<f32> = u_xlat31;
        let x_321 : vec4<f32> = u_xlat2;
        u_xlat31 = ((-(x_317) * x_319) + vec2<f32>(x_321.y, x_321.w));
        let x_324 : vec4<f32> = u_xlat4;
        let x_326 : vec2<f32> = (vec2<f32>(x_324.x, x_324.y) + vec2<f32>(1.0f, 1.0f));
        let x_327 : vec4<f32> = u_xlat4;
        u_xlat4 = vec4<f32>(x_326.x, x_326.y, x_327.z, x_327.w);
        let x_329 : vec2<f32> = u_xlat31;
        u_xlat31 = (x_329 + vec2<f32>(1.0f, 1.0f));
        let x_332 : vec4<f32> = u_xlat3;
        let x_336 : vec2<f32> = (vec2<f32>(x_332.x, x_332.y) * vec2<f32>(0.159999996f, 0.159999996f));
        let x_337 : vec4<f32> = u_xlat5;
        u_xlat5 = vec4<f32>(x_336.x, x_336.y, x_337.z, x_337.w);
        let x_339 : vec2<f32> = u_xlat33;
        let x_340 : vec2<f32> = (x_339 * vec2<f32>(0.159999996f, 0.159999996f));
        let x_341 : vec4<f32> = u_xlat3;
        u_xlat3 = vec4<f32>(x_340.x, x_340.y, x_341.z, x_341.w);
        let x_343 : vec4<f32> = u_xlat4;
        let x_345 : vec2<f32> = (vec2<f32>(x_343.x, x_343.y) * vec2<f32>(0.159999996f, 0.159999996f));
        let x_346 : vec4<f32> = u_xlat4;
        u_xlat4 = vec4<f32>(x_345.x, x_345.y, x_346.z, x_346.w);
        let x_349 : vec2<f32> = u_xlat31;
        let x_350 : vec2<f32> = (x_349 * vec2<f32>(0.159999996f, 0.159999996f));
        let x_351 : vec4<f32> = u_xlat6;
        u_xlat6 = vec4<f32>(x_350.x, x_350.y, x_351.z, x_351.w);
        let x_353 : vec4<f32> = u_xlat2;
        u_xlat31 = (vec2<f32>(x_353.y, x_353.w) * vec2<f32>(0.159999996f, 0.159999996f));
        let x_357 : f32 = u_xlat4.x;
        u_xlat5.z = x_357;
        let x_360 : f32 = u_xlat31.x;
        u_xlat5.w = x_360;
        let x_363 : f32 = u_xlat6.x;
        u_xlat3.z = x_363;
        let x_366 : f32 = u_xlat2.x;
        u_xlat3.w = x_366;
        let x_369 : vec4<f32> = u_xlat3;
        let x_371 : vec4<f32> = u_xlat5;
        u_xlat7 = (vec4<f32>(x_369.z, x_369.w, x_369.x, x_369.z) + vec4<f32>(x_371.z, x_371.w, x_371.x, x_371.z));
        let x_375 : f32 = u_xlat5.y;
        u_xlat4.z = x_375;
        let x_378 : f32 = u_xlat31.y;
        u_xlat4.w = x_378;
        let x_381 : f32 = u_xlat3.y;
        u_xlat6.z = x_381;
        let x_384 : f32 = u_xlat2.z;
        u_xlat6.w = x_384;
        let x_386 : vec4<f32> = u_xlat4;
        let x_388 : vec4<f32> = u_xlat6;
        let x_390 : vec3<f32> = (vec3<f32>(x_386.z, x_386.y, x_386.w) + vec3<f32>(x_388.z, x_388.y, x_388.w));
        let x_391 : vec4<f32> = u_xlat2;
        u_xlat2 = vec4<f32>(x_390.x, x_390.y, x_390.z, x_391.w);
        let x_393 : vec4<f32> = u_xlat3;
        let x_395 : vec4<f32> = u_xlat7;
        let x_397 : vec3<f32> = (vec3<f32>(x_393.x, x_393.z, x_393.w) / vec3<f32>(x_395.z, x_395.w, x_395.y));
        let x_398 : vec4<f32> = u_xlat3;
        u_xlat3 = vec4<f32>(x_397.x, x_397.y, x_397.z, x_398.w);
        let x_400 : vec4<f32> = u_xlat3;
        let x_406 : vec3<f32> = (vec3<f32>(x_400.x, x_400.y, x_400.z) + vec3<f32>(-2.5f, -0.5f, 1.5f));
        let x_407 : vec4<f32> = u_xlat3;
        u_xlat3 = vec4<f32>(x_406.x, x_406.y, x_406.z, x_407.w);
        let x_409 : vec4<f32> = u_xlat6;
        let x_411 : vec4<f32> = u_xlat2;
        let x_413 : vec3<f32> = (vec3<f32>(x_409.z, x_409.y, x_409.w) / vec3<f32>(x_411.x, x_411.y, x_411.z));
        let x_414 : vec4<f32> = u_xlat4;
        u_xlat4 = vec4<f32>(x_413.x, x_413.y, x_413.z, x_414.w);
        let x_416 : vec4<f32> = u_xlat4;
        let x_418 : vec3<f32> = (vec3<f32>(x_416.x, x_416.y, x_416.z) + vec3<f32>(-2.5f, -0.5f, 1.5f));
        let x_419 : vec4<f32> = u_xlat4;
        u_xlat4 = vec4<f32>(x_418.x, x_418.y, x_418.z, x_419.w);
        let x_421 : vec4<f32> = u_xlat3;
        let x_424 : vec4<f32> = x_91.x_MainLightShadowmapSize;
        let x_426 : vec3<f32> = (vec3<f32>(x_421.y, x_421.x, x_421.z) * vec3<f32>(x_424.x, x_424.x, x_424.x));
        let x_427 : vec4<f32> = u_xlat3;
        u_xlat3 = vec4<f32>(x_426.x, x_426.y, x_426.z, x_427.w);
        let x_429 : vec4<f32> = u_xlat4;
        let x_432 : vec4<f32> = x_91.x_MainLightShadowmapSize;
        let x_434 : vec3<f32> = (vec3<f32>(x_429.x, x_429.y, x_429.z) * vec3<f32>(x_432.y, x_432.y, x_432.y));
        let x_435 : vec4<f32> = u_xlat4;
        u_xlat4 = vec4<f32>(x_434.x, x_434.y, x_434.z, x_435.w);
        let x_438 : f32 = u_xlat4.x;
        u_xlat3.w = x_438;
        let x_440 : vec4<f32> = u_xlat1;
        let x_443 : vec4<f32> = x_91.x_MainLightShadowmapSize;
        let x_446 : vec4<f32> = u_xlat3;
        u_xlat5 = ((vec4<f32>(x_440.x, x_440.y, x_440.x, x_440.y) * vec4<f32>(x_443.x, x_443.y, x_443.x, x_443.y)) + vec4<f32>(x_446.y, x_446.w, x_446.x, x_446.w));
        let x_449 : vec4<f32> = u_xlat1;
        let x_452 : vec4<f32> = x_91.x_MainLightShadowmapSize;
        let x_455 : vec4<f32> = u_xlat3;
        u_xlat31 = ((vec2<f32>(x_449.x, x_449.y) * vec2<f32>(x_452.x, x_452.y)) + vec2<f32>(x_455.z, x_455.w));
        let x_459 : f32 = u_xlat3.y;
        u_xlat4.w = x_459;
        let x_461 : vec4<f32> = u_xlat4;
        let x_462 : vec2<f32> = vec2<f32>(x_461.y, x_461.z);
        let x_463 : vec4<f32> = u_xlat3;
        u_xlat3 = vec4<f32>(x_463.x, x_462.x, x_463.z, x_462.y);
        let x_465 : vec4<f32> = u_xlat1;
        let x_468 : vec4<f32> = x_91.x_MainLightShadowmapSize;
        let x_471 : vec4<f32> = u_xlat3;
        u_xlat6 = ((vec4<f32>(x_465.x, x_465.y, x_465.x, x_465.y) * vec4<f32>(x_468.x, x_468.y, x_468.x, x_468.y)) + vec4<f32>(x_471.x, x_471.y, x_471.z, x_471.y));
        let x_474 : vec4<f32> = u_xlat1;
        let x_477 : vec4<f32> = x_91.x_MainLightShadowmapSize;
        let x_480 : vec4<f32> = u_xlat4;
        u_xlat4 = ((vec4<f32>(x_474.x, x_474.y, x_474.x, x_474.y) * vec4<f32>(x_477.x, x_477.y, x_477.x, x_477.y)) + vec4<f32>(x_480.w, x_480.y, x_480.w, x_480.z));
        let x_483 : vec4<f32> = u_xlat1;
        let x_486 : vec4<f32> = x_91.x_MainLightShadowmapSize;
        let x_489 : vec4<f32> = u_xlat3;
        u_xlat3 = ((vec4<f32>(x_483.x, x_483.y, x_483.x, x_483.y) * vec4<f32>(x_486.x, x_486.y, x_486.x, x_486.y)) + vec4<f32>(x_489.x, x_489.w, x_489.z, x_489.w));
        let x_493 : vec4<f32> = u_xlat2;
        let x_495 : vec4<f32> = u_xlat7;
        u_xlat8 = (vec4<f32>(x_493.x, x_493.x, x_493.x, x_493.y) * vec4<f32>(x_495.z, x_495.w, x_495.y, x_495.z));
        let x_499 : vec4<f32> = u_xlat2;
        let x_501 : vec4<f32> = u_xlat7;
        u_xlat9 = (vec4<f32>(x_499.y, x_499.y, x_499.z, x_499.z) * x_501);
        let x_504 : f32 = u_xlat2.z;
        let x_506 : f32 = u_xlat7.y;
        u_xlat1.x = (x_504 * x_506);
        let x_510 : vec4<f32> = u_xlat5;
        let x_511 : vec2<f32> = vec2<f32>(x_510.x, x_510.y);
        let x_513 : f32 = u_xlat0.z;
        txVec4 = vec3<f32>(x_511.x, x_511.y, x_513);
        let x_521 : vec3<f32> = txVec4;
        let x_523 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_521.xy, x_521.z);
        u_xlat16 = x_523;
        let x_525 : vec4<f32> = u_xlat5;
        let x_526 : vec2<f32> = vec2<f32>(x_525.z, x_525.w);
        let x_528 : f32 = u_xlat0.z;
        txVec5 = vec3<f32>(x_526.x, x_526.y, x_528);
        let x_535 : vec3<f32> = txVec5;
        let x_537 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_535.xy, x_535.z);
        u_xlat2.x = x_537;
        let x_540 : f32 = u_xlat2.x;
        let x_542 : f32 = u_xlat8.y;
        u_xlat2.x = (x_540 * x_542);
        let x_546 : f32 = u_xlat8.x;
        let x_547 : f32 = u_xlat16;
        let x_550 : f32 = u_xlat2.x;
        u_xlat16 = ((x_546 * x_547) + x_550);
        let x_553 : vec2<f32> = u_xlat31;
        let x_555 : f32 = u_xlat0.z;
        txVec6 = vec3<f32>(x_553.x, x_553.y, x_555);
        let x_562 : vec3<f32> = txVec6;
        let x_564 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_562.xy, x_562.z);
        u_xlat31.x = x_564;
        let x_567 : f32 = u_xlat8.z;
        let x_569 : f32 = u_xlat31.x;
        let x_571 : f32 = u_xlat16;
        u_xlat16 = ((x_567 * x_569) + x_571);
        let x_574 : vec4<f32> = u_xlat4;
        let x_575 : vec2<f32> = vec2<f32>(x_574.x, x_574.y);
        let x_577 : f32 = u_xlat0.z;
        txVec7 = vec3<f32>(x_575.x, x_575.y, x_577);
        let x_584 : vec3<f32> = txVec7;
        let x_586 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_584.xy, x_584.z);
        u_xlat31.x = x_586;
        let x_589 : f32 = u_xlat8.w;
        let x_591 : f32 = u_xlat31.x;
        let x_593 : f32 = u_xlat16;
        u_xlat16 = ((x_589 * x_591) + x_593);
        let x_596 : vec4<f32> = u_xlat6;
        let x_597 : vec2<f32> = vec2<f32>(x_596.x, x_596.y);
        let x_599 : f32 = u_xlat0.z;
        txVec8 = vec3<f32>(x_597.x, x_597.y, x_599);
        let x_606 : vec3<f32> = txVec8;
        let x_608 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_606.xy, x_606.z);
        u_xlat31.x = x_608;
        let x_611 : f32 = u_xlat9.x;
        let x_613 : f32 = u_xlat31.x;
        let x_615 : f32 = u_xlat16;
        u_xlat16 = ((x_611 * x_613) + x_615);
        let x_618 : vec4<f32> = u_xlat6;
        let x_619 : vec2<f32> = vec2<f32>(x_618.z, x_618.w);
        let x_621 : f32 = u_xlat0.z;
        txVec9 = vec3<f32>(x_619.x, x_619.y, x_621);
        let x_628 : vec3<f32> = txVec9;
        let x_630 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_628.xy, x_628.z);
        u_xlat31.x = x_630;
        let x_633 : f32 = u_xlat9.y;
        let x_635 : f32 = u_xlat31.x;
        let x_637 : f32 = u_xlat16;
        u_xlat16 = ((x_633 * x_635) + x_637);
        let x_640 : vec4<f32> = u_xlat4;
        let x_641 : vec2<f32> = vec2<f32>(x_640.z, x_640.w);
        let x_643 : f32 = u_xlat0.z;
        txVec10 = vec3<f32>(x_641.x, x_641.y, x_643);
        let x_650 : vec3<f32> = txVec10;
        let x_652 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_650.xy, x_650.z);
        u_xlat31.x = x_652;
        let x_655 : f32 = u_xlat9.z;
        let x_657 : f32 = u_xlat31.x;
        let x_659 : f32 = u_xlat16;
        u_xlat16 = ((x_655 * x_657) + x_659);
        let x_662 : vec4<f32> = u_xlat3;
        let x_663 : vec2<f32> = vec2<f32>(x_662.x, x_662.y);
        let x_665 : f32 = u_xlat0.z;
        txVec11 = vec3<f32>(x_663.x, x_663.y, x_665);
        let x_672 : vec3<f32> = txVec11;
        let x_674 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_672.xy, x_672.z);
        u_xlat31.x = x_674;
        let x_677 : f32 = u_xlat9.w;
        let x_679 : f32 = u_xlat31.x;
        let x_681 : f32 = u_xlat16;
        u_xlat16 = ((x_677 * x_679) + x_681);
        let x_684 : vec4<f32> = u_xlat3;
        let x_685 : vec2<f32> = vec2<f32>(x_684.z, x_684.w);
        let x_687 : f32 = u_xlat0.z;
        txVec12 = vec3<f32>(x_685.x, x_685.y, x_687);
        let x_694 : vec3<f32> = txVec12;
        let x_696 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_694.xy, x_694.z);
        u_xlat31.x = x_696;
        let x_699 : f32 = u_xlat1.x;
        let x_701 : f32 = u_xlat31.x;
        let x_703 : f32 = u_xlat16;
        u_xlat45 = ((x_699 * x_701) + x_703);
      } else {
        let x_706 : vec4<f32> = u_xlat0;
        let x_709 : vec4<f32> = x_91.x_MainLightShadowmapSize;
        let x_712 : vec2<f32> = ((vec2<f32>(x_706.x, x_706.y) * vec2<f32>(x_709.z, x_709.w)) + vec2<f32>(0.5f, 0.5f));
        let x_713 : vec4<f32> = u_xlat1;
        u_xlat1 = vec4<f32>(x_712.x, x_712.y, x_713.z, x_713.w);
        let x_715 : vec4<f32> = u_xlat1;
        let x_717 : vec2<f32> = floor(vec2<f32>(x_715.x, x_715.y));
        let x_718 : vec4<f32> = u_xlat1;
        u_xlat1 = vec4<f32>(x_717.x, x_717.y, x_718.z, x_718.w);
        let x_720 : vec4<f32> = u_xlat0;
        let x_723 : vec4<f32> = x_91.x_MainLightShadowmapSize;
        let x_726 : vec4<f32> = u_xlat1;
        u_xlat31 = ((vec2<f32>(x_720.x, x_720.y) * vec2<f32>(x_723.z, x_723.w)) + -(vec2<f32>(x_726.x, x_726.y)));
        let x_730 : vec2<f32> = u_xlat31;
        u_xlat2 = (vec4<f32>(x_730.x, x_730.x, x_730.y, x_730.y) + vec4<f32>(0.5f, 1.0f, 0.5f, 1.0f));
        let x_733 : vec4<f32> = u_xlat2;
        let x_735 : vec4<f32> = u_xlat2;
        u_xlat3 = (vec4<f32>(x_733.x, x_733.x, x_733.z, x_733.z) * vec4<f32>(x_735.x, x_735.x, x_735.z, x_735.z));
        let x_738 : vec4<f32> = u_xlat3;
        let x_742 : vec2<f32> = (vec2<f32>(x_738.y, x_738.w) * vec2<f32>(0.040816002f, 0.040816002f));
        let x_743 : vec4<f32> = u_xlat4;
        u_xlat4 = vec4<f32>(x_743.x, x_742.x, x_743.z, x_742.y);
        let x_745 : vec4<f32> = u_xlat3;
        let x_748 : vec2<f32> = u_xlat31;
        let x_750 : vec2<f32> = ((vec2<f32>(x_745.x, x_745.z) * vec2<f32>(0.5f, 0.5f)) + -(x_748));
        let x_751 : vec4<f32> = u_xlat2;
        u_xlat2 = vec4<f32>(x_750.x, x_751.y, x_750.y, x_751.w);
        let x_753 : vec2<f32> = u_xlat31;
        let x_755 : vec2<f32> = (-(x_753) + vec2<f32>(1.0f, 1.0f));
        let x_756 : vec4<f32> = u_xlat3;
        u_xlat3 = vec4<f32>(x_755.x, x_755.y, x_756.z, x_756.w);
        let x_758 : vec2<f32> = u_xlat31;
        u_xlat33 = min(x_758, vec2<f32>(0.0f, 0.0f));
        let x_760 : vec2<f32> = u_xlat33;
        let x_762 : vec2<f32> = u_xlat33;
        let x_764 : vec4<f32> = u_xlat3;
        let x_766 : vec2<f32> = ((-(x_760) * x_762) + vec2<f32>(x_764.x, x_764.y));
        let x_767 : vec4<f32> = u_xlat3;
        u_xlat3 = vec4<f32>(x_766.x, x_766.y, x_767.z, x_767.w);
        let x_769 : vec2<f32> = u_xlat31;
        u_xlat33 = max(x_769, vec2<f32>(0.0f, 0.0f));
        let x_772 : vec2<f32> = u_xlat33;
        let x_774 : vec2<f32> = u_xlat33;
        let x_776 : vec4<f32> = u_xlat2;
        let x_778 : vec2<f32> = ((-(x_772) * x_774) + vec2<f32>(x_776.y, x_776.w));
        let x_779 : vec3<f32> = u_xlat17;
        u_xlat17 = vec3<f32>(x_778.x, x_779.y, x_778.y);
        let x_781 : vec4<f32> = u_xlat3;
        let x_783 : vec2<f32> = (vec2<f32>(x_781.x, x_781.y) + vec2<f32>(2.0f, 2.0f));
        let x_784 : vec4<f32> = u_xlat3;
        u_xlat3 = vec4<f32>(x_783.x, x_783.y, x_784.z, x_784.w);
        let x_786 : vec3<f32> = u_xlat17;
        let x_788 : vec2<f32> = (vec2<f32>(x_786.x, x_786.z) + vec2<f32>(2.0f, 2.0f));
        let x_789 : vec4<f32> = u_xlat2;
        u_xlat2 = vec4<f32>(x_789.x, x_788.x, x_789.z, x_788.y);
        let x_792 : f32 = u_xlat2.y;
        u_xlat5.z = (x_792 * 0.081632003f);
        let x_796 : vec4<f32> = u_xlat2;
        let x_799 : vec3<f32> = (vec3<f32>(x_796.z, x_796.x, x_796.w) * vec3<f32>(0.081632003f, 0.081632003f, 0.081632003f));
        let x_800 : vec4<f32> = u_xlat6;
        u_xlat6 = vec4<f32>(x_799.x, x_799.y, x_799.z, x_800.w);
        let x_802 : vec4<f32> = u_xlat3;
        let x_805 : vec2<f32> = (vec2<f32>(x_802.x, x_802.y) * vec2<f32>(0.081632003f, 0.081632003f));
        let x_806 : vec4<f32> = u_xlat2;
        u_xlat2 = vec4<f32>(x_805.x, x_805.y, x_806.z, x_806.w);
        let x_809 : f32 = u_xlat6.y;
        u_xlat5.x = x_809;
        let x_811 : vec2<f32> = u_xlat31;
        let x_818 : vec2<f32> = ((vec2<f32>(x_811.x, x_811.x) * vec2<f32>(-0.081632003f, 0.081632003f)) + vec2<f32>(0.163264006f, 0.081632003f));
        let x_819 : vec4<f32> = u_xlat5;
        u_xlat5 = vec4<f32>(x_819.x, x_818.x, x_819.z, x_818.y);
        let x_821 : vec2<f32> = u_xlat31;
        let x_825 : vec2<f32> = ((vec2<f32>(x_821.x, x_821.x) * vec2<f32>(-0.081632003f, 0.081632003f)) + vec2<f32>(0.081632003f, 0.163264006f));
        let x_826 : vec4<f32> = u_xlat3;
        u_xlat3 = vec4<f32>(x_825.x, x_826.y, x_825.y, x_826.w);
        let x_829 : f32 = u_xlat2.x;
        u_xlat3.y = x_829;
        let x_832 : f32 = u_xlat4.y;
        u_xlat3.w = x_832;
        let x_834 : vec4<f32> = u_xlat3;
        let x_835 : vec4<f32> = u_xlat5;
        u_xlat5 = (x_834 + x_835);
        let x_837 : vec2<f32> = u_xlat31;
        let x_840 : vec2<f32> = ((vec2<f32>(x_837.y, x_837.y) * vec2<f32>(-0.081632003f, 0.081632003f)) + vec2<f32>(0.163264006f, 0.081632003f));
        let x_841 : vec4<f32> = u_xlat6;
        u_xlat6 = vec4<f32>(x_841.x, x_840.x, x_841.z, x_840.y);
        let x_843 : vec2<f32> = u_xlat31;
        let x_846 : vec2<f32> = ((vec2<f32>(x_843.y, x_843.y) * vec2<f32>(-0.081632003f, 0.081632003f)) + vec2<f32>(0.081632003f, 0.163264006f));
        let x_847 : vec4<f32> = u_xlat4;
        u_xlat4 = vec4<f32>(x_846.x, x_847.y, x_846.y, x_847.w);
        let x_850 : f32 = u_xlat2.y;
        u_xlat4.y = x_850;
        let x_852 : vec4<f32> = u_xlat4;
        let x_853 : vec4<f32> = u_xlat6;
        u_xlat2 = (x_852 + x_853);
        let x_855 : vec4<f32> = u_xlat3;
        let x_856 : vec4<f32> = u_xlat5;
        u_xlat3 = (x_855 / x_856);
        let x_858 : vec4<f32> = u_xlat3;
        u_xlat3 = (x_858 + vec4<f32>(-3.5f, -1.5f, 0.5f, 2.5f));
        let x_864 : vec4<f32> = u_xlat4;
        let x_865 : vec4<f32> = u_xlat2;
        u_xlat4 = (x_864 / x_865);
        let x_867 : vec4<f32> = u_xlat4;
        u_xlat4 = (x_867 + vec4<f32>(-3.5f, -1.5f, 0.5f, 2.5f));
        let x_869 : vec4<f32> = u_xlat3;
        let x_872 : vec4<f32> = x_91.x_MainLightShadowmapSize;
        u_xlat3 = (vec4<f32>(x_869.w, x_869.x, x_869.y, x_869.z) * vec4<f32>(x_872.x, x_872.x, x_872.x, x_872.x));
        let x_875 : vec4<f32> = u_xlat4;
        let x_878 : vec4<f32> = x_91.x_MainLightShadowmapSize;
        u_xlat4 = (vec4<f32>(x_875.x, x_875.w, x_875.y, x_875.z) * vec4<f32>(x_878.y, x_878.y, x_878.y, x_878.y));
        let x_881 : vec4<f32> = u_xlat3;
        let x_882 : vec3<f32> = vec3<f32>(x_881.y, x_881.z, x_881.w);
        let x_883 : vec4<f32> = u_xlat6;
        u_xlat6 = vec4<f32>(x_882.x, x_883.y, x_882.y, x_882.z);
        let x_886 : f32 = u_xlat4.x;
        u_xlat6.y = x_886;
        let x_888 : vec4<f32> = u_xlat1;
        let x_891 : vec4<f32> = x_91.x_MainLightShadowmapSize;
        let x_894 : vec4<f32> = u_xlat6;
        u_xlat7 = ((vec4<f32>(x_888.x, x_888.y, x_888.x, x_888.y) * vec4<f32>(x_891.x, x_891.y, x_891.x, x_891.y)) + vec4<f32>(x_894.x, x_894.y, x_894.z, x_894.y));
        let x_897 : vec4<f32> = u_xlat1;
        let x_900 : vec4<f32> = x_91.x_MainLightShadowmapSize;
        let x_903 : vec4<f32> = u_xlat6;
        u_xlat31 = ((vec2<f32>(x_897.x, x_897.y) * vec2<f32>(x_900.x, x_900.y)) + vec2<f32>(x_903.w, x_903.y));
        let x_907 : f32 = u_xlat6.y;
        u_xlat3.y = x_907;
        let x_910 : f32 = u_xlat4.z;
        u_xlat6.y = x_910;
        let x_912 : vec4<f32> = u_xlat1;
        let x_915 : vec4<f32> = x_91.x_MainLightShadowmapSize;
        let x_918 : vec4<f32> = u_xlat6;
        u_xlat8 = ((vec4<f32>(x_912.x, x_912.y, x_912.x, x_912.y) * vec4<f32>(x_915.x, x_915.y, x_915.x, x_915.y)) + vec4<f32>(x_918.x, x_918.y, x_918.z, x_918.y));
        let x_921 : vec4<f32> = u_xlat1;
        let x_924 : vec4<f32> = x_91.x_MainLightShadowmapSize;
        let x_927 : vec4<f32> = u_xlat6;
        let x_929 : vec2<f32> = ((vec2<f32>(x_921.x, x_921.y) * vec2<f32>(x_924.x, x_924.y)) + vec2<f32>(x_927.w, x_927.y));
        let x_930 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_929.x, x_929.y, x_930.z, x_930.w);
        let x_933 : f32 = u_xlat6.y;
        u_xlat3.z = x_933;
        let x_936 : vec4<f32> = u_xlat1;
        let x_939 : vec4<f32> = x_91.x_MainLightShadowmapSize;
        let x_942 : vec4<f32> = u_xlat3;
        u_xlat10 = ((vec4<f32>(x_936.x, x_936.y, x_936.x, x_936.y) * vec4<f32>(x_939.x, x_939.y, x_939.x, x_939.y)) + vec4<f32>(x_942.x, x_942.y, x_942.x, x_942.z));
        let x_946 : f32 = u_xlat4.w;
        u_xlat6.y = x_946;
        let x_949 : vec4<f32> = u_xlat1;
        let x_952 : vec4<f32> = x_91.x_MainLightShadowmapSize;
        let x_955 : vec4<f32> = u_xlat6;
        u_xlat11 = ((vec4<f32>(x_949.x, x_949.y, x_949.x, x_949.y) * vec4<f32>(x_952.x, x_952.y, x_952.x, x_952.y)) + vec4<f32>(x_955.x, x_955.y, x_955.z, x_955.y));
        let x_959 : vec4<f32> = u_xlat1;
        let x_962 : vec4<f32> = x_91.x_MainLightShadowmapSize;
        let x_965 : vec4<f32> = u_xlat6;
        u_xlat18 = ((vec2<f32>(x_959.x, x_959.y) * vec2<f32>(x_962.x, x_962.y)) + vec2<f32>(x_965.w, x_965.y));
        let x_969 : f32 = u_xlat6.y;
        u_xlat3.w = x_969;
        let x_972 : vec4<f32> = u_xlat1;
        let x_975 : vec4<f32> = x_91.x_MainLightShadowmapSize;
        let x_978 : vec4<f32> = u_xlat3;
        u_xlat39 = ((vec2<f32>(x_972.x, x_972.y) * vec2<f32>(x_975.x, x_975.y)) + vec2<f32>(x_978.x, x_978.w));
        let x_981 : vec4<f32> = u_xlat6;
        let x_982 : vec3<f32> = vec3<f32>(x_981.x, x_981.z, x_981.w);
        let x_983 : vec4<f32> = u_xlat4;
        u_xlat4 = vec4<f32>(x_982.x, x_983.y, x_982.y, x_982.z);
        let x_985 : vec4<f32> = u_xlat1;
        let x_988 : vec4<f32> = x_91.x_MainLightShadowmapSize;
        let x_991 : vec4<f32> = u_xlat4;
        u_xlat6 = ((vec4<f32>(x_985.x, x_985.y, x_985.x, x_985.y) * vec4<f32>(x_988.x, x_988.y, x_988.x, x_988.y)) + vec4<f32>(x_991.x, x_991.y, x_991.z, x_991.y));
        let x_995 : vec4<f32> = u_xlat1;
        let x_998 : vec4<f32> = x_91.x_MainLightShadowmapSize;
        let x_1001 : vec4<f32> = u_xlat4;
        u_xlat34 = ((vec2<f32>(x_995.x, x_995.y) * vec2<f32>(x_998.x, x_998.y)) + vec2<f32>(x_1001.w, x_1001.y));
        let x_1005 : f32 = u_xlat3.x;
        u_xlat4.x = x_1005;
        let x_1007 : vec4<f32> = u_xlat1;
        let x_1010 : vec4<f32> = x_91.x_MainLightShadowmapSize;
        let x_1013 : vec4<f32> = u_xlat4;
        let x_1015 : vec2<f32> = ((vec2<f32>(x_1007.x, x_1007.y) * vec2<f32>(x_1010.x, x_1010.y)) + vec2<f32>(x_1013.x, x_1013.y));
        let x_1016 : vec4<f32> = u_xlat1;
        u_xlat1 = vec4<f32>(x_1015.x, x_1015.y, x_1016.z, x_1016.w);
        let x_1019 : vec4<f32> = u_xlat2;
        let x_1021 : vec4<f32> = u_xlat5;
        u_xlat12 = (vec4<f32>(x_1019.x, x_1019.x, x_1019.x, x_1019.x) * x_1021);
        let x_1024 : vec4<f32> = u_xlat2;
        let x_1026 : vec4<f32> = u_xlat5;
        u_xlat13 = (vec4<f32>(x_1024.y, x_1024.y, x_1024.y, x_1024.y) * x_1026);
        let x_1029 : vec4<f32> = u_xlat2;
        let x_1031 : vec4<f32> = u_xlat5;
        u_xlat14 = (vec4<f32>(x_1029.z, x_1029.z, x_1029.z, x_1029.z) * x_1031);
        let x_1033 : vec4<f32> = u_xlat2;
        let x_1035 : vec4<f32> = u_xlat5;
        u_xlat2 = (vec4<f32>(x_1033.w, x_1033.w, x_1033.w, x_1033.w) * x_1035);
        let x_1038 : vec4<f32> = u_xlat7;
        let x_1039 : vec2<f32> = vec2<f32>(x_1038.x, x_1038.y);
        let x_1041 : f32 = u_xlat0.z;
        txVec13 = vec3<f32>(x_1039.x, x_1039.y, x_1041);
        let x_1048 : vec3<f32> = txVec13;
        let x_1050 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1048.xy, x_1048.z);
        u_xlat3.x = x_1050;
        let x_1053 : vec4<f32> = u_xlat7;
        let x_1054 : vec2<f32> = vec2<f32>(x_1053.z, x_1053.w);
        let x_1056 : f32 = u_xlat0.z;
        txVec14 = vec3<f32>(x_1054.x, x_1054.y, x_1056);
        let x_1064 : vec3<f32> = txVec14;
        let x_1066 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1064.xy, x_1064.z);
        u_xlat48 = x_1066;
        let x_1067 : f32 = u_xlat48;
        let x_1069 : f32 = u_xlat12.y;
        u_xlat48 = (x_1067 * x_1069);
        let x_1072 : f32 = u_xlat12.x;
        let x_1074 : f32 = u_xlat3.x;
        let x_1076 : f32 = u_xlat48;
        u_xlat3.x = ((x_1072 * x_1074) + x_1076);
        let x_1080 : vec2<f32> = u_xlat31;
        let x_1082 : f32 = u_xlat0.z;
        txVec15 = vec3<f32>(x_1080.x, x_1080.y, x_1082);
        let x_1089 : vec3<f32> = txVec15;
        let x_1091 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1089.xy, x_1089.z);
        u_xlat31.x = x_1091;
        let x_1094 : f32 = u_xlat12.z;
        let x_1096 : f32 = u_xlat31.x;
        let x_1099 : f32 = u_xlat3.x;
        u_xlat31.x = ((x_1094 * x_1096) + x_1099);
        let x_1103 : vec4<f32> = u_xlat10;
        let x_1104 : vec2<f32> = vec2<f32>(x_1103.x, x_1103.y);
        let x_1106 : f32 = u_xlat0.z;
        txVec16 = vec3<f32>(x_1104.x, x_1104.y, x_1106);
        let x_1114 : vec3<f32> = txVec16;
        let x_1116 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1114.xy, x_1114.z);
        u_xlat46 = x_1116;
        let x_1118 : f32 = u_xlat12.w;
        let x_1119 : f32 = u_xlat46;
        let x_1122 : f32 = u_xlat31.x;
        u_xlat31.x = ((x_1118 * x_1119) + x_1122);
        let x_1126 : vec4<f32> = u_xlat8;
        let x_1127 : vec2<f32> = vec2<f32>(x_1126.x, x_1126.y);
        let x_1129 : f32 = u_xlat0.z;
        txVec17 = vec3<f32>(x_1127.x, x_1127.y, x_1129);
        let x_1136 : vec3<f32> = txVec17;
        let x_1138 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1136.xy, x_1136.z);
        u_xlat46 = x_1138;
        let x_1140 : f32 = u_xlat13.x;
        let x_1141 : f32 = u_xlat46;
        let x_1144 : f32 = u_xlat31.x;
        u_xlat31.x = ((x_1140 * x_1141) + x_1144);
        let x_1148 : vec4<f32> = u_xlat8;
        let x_1149 : vec2<f32> = vec2<f32>(x_1148.z, x_1148.w);
        let x_1151 : f32 = u_xlat0.z;
        txVec18 = vec3<f32>(x_1149.x, x_1149.y, x_1151);
        let x_1158 : vec3<f32> = txVec18;
        let x_1160 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1158.xy, x_1158.z);
        u_xlat46 = x_1160;
        let x_1162 : f32 = u_xlat13.y;
        let x_1163 : f32 = u_xlat46;
        let x_1166 : f32 = u_xlat31.x;
        u_xlat31.x = ((x_1162 * x_1163) + x_1166);
        let x_1170 : vec4<f32> = u_xlat9;
        let x_1171 : vec2<f32> = vec2<f32>(x_1170.x, x_1170.y);
        let x_1173 : f32 = u_xlat0.z;
        txVec19 = vec3<f32>(x_1171.x, x_1171.y, x_1173);
        let x_1180 : vec3<f32> = txVec19;
        let x_1182 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1180.xy, x_1180.z);
        u_xlat46 = x_1182;
        let x_1184 : f32 = u_xlat13.z;
        let x_1185 : f32 = u_xlat46;
        let x_1188 : f32 = u_xlat31.x;
        u_xlat31.x = ((x_1184 * x_1185) + x_1188);
        let x_1192 : vec4<f32> = u_xlat10;
        let x_1193 : vec2<f32> = vec2<f32>(x_1192.z, x_1192.w);
        let x_1195 : f32 = u_xlat0.z;
        txVec20 = vec3<f32>(x_1193.x, x_1193.y, x_1195);
        let x_1202 : vec3<f32> = txVec20;
        let x_1204 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1202.xy, x_1202.z);
        u_xlat46 = x_1204;
        let x_1206 : f32 = u_xlat13.w;
        let x_1207 : f32 = u_xlat46;
        let x_1210 : f32 = u_xlat31.x;
        u_xlat31.x = ((x_1206 * x_1207) + x_1210);
        let x_1214 : vec4<f32> = u_xlat11;
        let x_1215 : vec2<f32> = vec2<f32>(x_1214.x, x_1214.y);
        let x_1217 : f32 = u_xlat0.z;
        txVec21 = vec3<f32>(x_1215.x, x_1215.y, x_1217);
        let x_1224 : vec3<f32> = txVec21;
        let x_1226 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1224.xy, x_1224.z);
        u_xlat46 = x_1226;
        let x_1228 : f32 = u_xlat14.x;
        let x_1229 : f32 = u_xlat46;
        let x_1232 : f32 = u_xlat31.x;
        u_xlat31.x = ((x_1228 * x_1229) + x_1232);
        let x_1236 : vec4<f32> = u_xlat11;
        let x_1237 : vec2<f32> = vec2<f32>(x_1236.z, x_1236.w);
        let x_1239 : f32 = u_xlat0.z;
        txVec22 = vec3<f32>(x_1237.x, x_1237.y, x_1239);
        let x_1246 : vec3<f32> = txVec22;
        let x_1248 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1246.xy, x_1246.z);
        u_xlat46 = x_1248;
        let x_1250 : f32 = u_xlat14.y;
        let x_1251 : f32 = u_xlat46;
        let x_1254 : f32 = u_xlat31.x;
        u_xlat31.x = ((x_1250 * x_1251) + x_1254);
        let x_1258 : vec2<f32> = u_xlat18;
        let x_1260 : f32 = u_xlat0.z;
        txVec23 = vec3<f32>(x_1258.x, x_1258.y, x_1260);
        let x_1267 : vec3<f32> = txVec23;
        let x_1269 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1267.xy, x_1267.z);
        u_xlat46 = x_1269;
        let x_1271 : f32 = u_xlat14.z;
        let x_1272 : f32 = u_xlat46;
        let x_1275 : f32 = u_xlat31.x;
        u_xlat31.x = ((x_1271 * x_1272) + x_1275);
        let x_1279 : vec2<f32> = u_xlat39;
        let x_1281 : f32 = u_xlat0.z;
        txVec24 = vec3<f32>(x_1279.x, x_1279.y, x_1281);
        let x_1288 : vec3<f32> = txVec24;
        let x_1290 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1288.xy, x_1288.z);
        u_xlat46 = x_1290;
        let x_1292 : f32 = u_xlat14.w;
        let x_1293 : f32 = u_xlat46;
        let x_1296 : f32 = u_xlat31.x;
        u_xlat31.x = ((x_1292 * x_1293) + x_1296);
        let x_1300 : vec4<f32> = u_xlat6;
        let x_1301 : vec2<f32> = vec2<f32>(x_1300.x, x_1300.y);
        let x_1303 : f32 = u_xlat0.z;
        txVec25 = vec3<f32>(x_1301.x, x_1301.y, x_1303);
        let x_1310 : vec3<f32> = txVec25;
        let x_1312 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1310.xy, x_1310.z);
        u_xlat46 = x_1312;
        let x_1314 : f32 = u_xlat2.x;
        let x_1315 : f32 = u_xlat46;
        let x_1318 : f32 = u_xlat31.x;
        u_xlat31.x = ((x_1314 * x_1315) + x_1318);
        let x_1322 : vec4<f32> = u_xlat6;
        let x_1323 : vec2<f32> = vec2<f32>(x_1322.z, x_1322.w);
        let x_1325 : f32 = u_xlat0.z;
        txVec26 = vec3<f32>(x_1323.x, x_1323.y, x_1325);
        let x_1332 : vec3<f32> = txVec26;
        let x_1334 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1332.xy, x_1332.z);
        u_xlat46 = x_1334;
        let x_1336 : f32 = u_xlat2.y;
        let x_1337 : f32 = u_xlat46;
        let x_1340 : f32 = u_xlat31.x;
        u_xlat31.x = ((x_1336 * x_1337) + x_1340);
        let x_1344 : vec2<f32> = u_xlat34;
        let x_1346 : f32 = u_xlat0.z;
        txVec27 = vec3<f32>(x_1344.x, x_1344.y, x_1346);
        let x_1353 : vec3<f32> = txVec27;
        let x_1355 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1353.xy, x_1353.z);
        u_xlat46 = x_1355;
        let x_1357 : f32 = u_xlat2.z;
        let x_1358 : f32 = u_xlat46;
        let x_1361 : f32 = u_xlat31.x;
        u_xlat31.x = ((x_1357 * x_1358) + x_1361);
        let x_1365 : vec4<f32> = u_xlat1;
        let x_1366 : vec2<f32> = vec2<f32>(x_1365.x, x_1365.y);
        let x_1368 : f32 = u_xlat0.z;
        txVec28 = vec3<f32>(x_1366.x, x_1366.y, x_1368);
        let x_1375 : vec3<f32> = txVec28;
        let x_1377 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1375.xy, x_1375.z);
        u_xlat1.x = x_1377;
        let x_1380 : f32 = u_xlat2.w;
        let x_1382 : f32 = u_xlat1.x;
        let x_1385 : f32 = u_xlat31.x;
        u_xlat45 = ((x_1380 * x_1382) + x_1385);
      }
    }
  } else {
    let x_1389 : vec4<f32> = u_xlat0;
    let x_1390 : vec2<f32> = vec2<f32>(x_1389.x, x_1389.y);
    let x_1392 : f32 = u_xlat0.z;
    txVec29 = vec3<f32>(x_1390.x, x_1390.y, x_1392);
    let x_1399 : vec3<f32> = txVec29;
    let x_1401 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1399.xy, x_1399.z);
    u_xlat45 = x_1401;
  }
  let x_1403 : f32 = x_91.x_MainLightShadowParams.x;
  u_xlat0.x = (-(x_1403) + 1.0f);
  let x_1407 : f32 = u_xlat45;
  let x_1409 : f32 = x_91.x_MainLightShadowParams.x;
  let x_1412 : f32 = u_xlat0.x;
  u_xlat0.x = ((x_1407 * x_1409) + x_1412);
  let x_1417 : f32 = u_xlat0.z;
  u_xlatb15 = (0.0f >= x_1417);
  let x_1421 : f32 = u_xlat0.z;
  u_xlatb30 = (x_1421 >= 1.0f);
  let x_1423 : bool = u_xlatb30;
  let x_1424 : bool = u_xlatb15;
  u_xlatb15 = (x_1423 | x_1424);
  let x_1428 : bool = u_xlatb15;
  if (x_1428) {
    x_1429 = vec4<f32>(1.0f, 1.0f, 1.0f, 1.0f);
  } else {
    let x_1434 : vec4<f32> = u_xlat0;
    x_1429 = vec4<f32>(x_1434.x, x_1434.x, x_1434.x, x_1434.x);
  }
  let x_1436 : vec4<f32> = x_1429;
  SV_Target0 = x_1436;
  return;
}

struct main_out {
  @location(0)
  SV_Target0_1 : vec4<f32>,
}

@fragment
fn main(@location(0) vs_TEXCOORD0_param : vec2<f32>, @builtin(position) gl_FragCoord_param : vec4<f32>) -> main_out {
  vs_TEXCOORD0 = vs_TEXCOORD0_param;
  gl_FragCoord = gl_FragCoord_param;
  main_1();
  return main_out(SV_Target0);
}

