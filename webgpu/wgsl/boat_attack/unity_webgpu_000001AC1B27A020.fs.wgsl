diagnostic(off, derivative_uniformity);

alias Arr = array<vec4<f32>, 2u>;

struct UnityPerDraw {
  /* @offset(0) */
  unity_ObjectToWorld : mat4x4<f32>,
  /* @offset(64) */
  unity_WorldToObject : mat4x4<f32>,
  /* @offset(128) */
  unity_LODFade : vec4<f32>,
  /* @offset(144) */
  unity_WorldTransformParams : vec4<f32>,
  /* @offset(160) */
  unity_RenderingLayer : vec4<f32>,
  /* @offset(176) */
  unity_LightData : vec4<f32>,
  /* @offset(192) */
  unity_LightIndices : Arr,
  /* @offset(224) */
  unity_ProbesOcclusion : vec4<f32>,
  /* @offset(240) */
  unity_SpecCube0_HDR : vec4<f32>,
  /* @offset(256) */
  unity_SpecCube1_HDR : vec4<f32>,
  /* @offset(272) */
  unity_SpecCube0_BoxMax : vec4<f32>,
  /* @offset(288) */
  unity_SpecCube0_BoxMin : vec4<f32>,
  /* @offset(304) */
  unity_SpecCube0_ProbePosition : vec4<f32>,
  /* @offset(320) */
  unity_SpecCube1_BoxMax : vec4<f32>,
  /* @offset(336) */
  unity_SpecCube1_BoxMin : vec4<f32>,
  /* @offset(352) */
  unity_SpecCube1_ProbePosition : vec4<f32>,
  /* @offset(368) */
  unity_LightmapST : vec4<f32>,
  /* @offset(384) */
  unity_DynamicLightmapST : vec4<f32>,
  /* @offset(400) */
  unity_SHAr : vec4<f32>,
  /* @offset(416) */
  unity_SHAg : vec4<f32>,
  /* @offset(432) */
  unity_SHAb : vec4<f32>,
  /* @offset(448) */
  unity_SHBr : vec4<f32>,
  /* @offset(464) */
  unity_SHBg : vec4<f32>,
  /* @offset(480) */
  unity_SHBb : vec4<f32>,
  /* @offset(496) */
  unity_SHC : vec4<f32>,
  /* @offset(512) */
  unity_RendererBounds_Min : vec4<f32>,
  /* @offset(528) */
  unity_RendererBounds_Max : vec4<f32>,
  /* @offset(544) */
  unity_MatrixPreviousM : mat4x4<f32>,
  /* @offset(608) */
  unity_MatrixPreviousMI : mat4x4<f32>,
  /* @offset(672) */
  unity_MotionVectorsParams : vec4<f32>,
  /* @offset(688) */
  unity_SpriteColor : vec4<f32>,
  /* @offset(704) */
  unity_SpriteProps : vec4<f32>,
}

struct PGlobals {
  /* @offset(0) */
  x_GlobalMipBias : vec2<f32>,
  /* @offset(8) */
  x_AlphaToMaskAvailable : f32,
  /* @offset(16) */
  x_MainLightPosition : vec4<f32>,
  /* @offset(32) */
  x_MainLightColor : vec4<f32>,
  /* @offset(48) */
  x_AdditionalLightsCount : vec4<f32>,
  /* @offset(64) */
  x_WorldSpaceCameraPos : vec3<f32>,
  /* @offset(80) */
  x_ProjectionParams : vec4<f32>,
  /* @offset(96) */
  unity_OrthoParams : vec4<f32>,
  /* @offset(112) */
  unity_FogParams : vec4<f32>,
  /* @offset(128) */
  unity_FogColor : vec4<f32>,
  /* @offset(144) */
  unity_MatrixV : mat4x4<f32>,
}

struct UnityPerMaterial {
  /* @offset(0) */
  Texture2D_B222E8F_TexelSize : vec4<f32>,
  /* @offset(16) */
  Color_C30C7CA3 : vec4<f32>,
  /* @offset(32) */
  Texture2D_D9BFD5F1_TexelSize : vec4<f32>,
}

alias Arr_1 = array<mat4x4<f32>, 5u>;

alias Arr_2 = array<vec4<f32>, 32u>;

alias Arr_3 = array<mat4x4<f32>, 32u>;

alias Arr_4 = array<vec4<f32>, 32u>;

struct LightShadows {
  /* @offset(0) */
  x_MainLightWorldToShadow : Arr_1,
  /* @offset(320) */
  x_CascadeShadowSplitSpheres0 : vec4<f32>,
  /* @offset(336) */
  x_CascadeShadowSplitSpheres1 : vec4<f32>,
  /* @offset(352) */
  x_CascadeShadowSplitSpheres2 : vec4<f32>,
  /* @offset(368) */
  x_CascadeShadowSplitSpheres3 : vec4<f32>,
  /* @offset(384) */
  x_CascadeShadowSplitSphereRadii : vec4<f32>,
  /* @offset(400) */
  x_MainLightShadowOffset0 : vec4<f32>,
  /* @offset(416) */
  x_MainLightShadowOffset1 : vec4<f32>,
  /* @offset(432) */
  x_MainLightShadowParams : vec4<f32>,
  /* @offset(448) */
  x_MainLightShadowmapSize : vec4<f32>,
  /* @offset(464) */
  x_AdditionalShadowOffset0 : vec4<f32>,
  /* @offset(480) */
  x_AdditionalShadowOffset1 : vec4<f32>,
  /* @offset(496) */
  x_AdditionalShadowFadeParams : vec4<f32>,
  /* @offset(512) */
  x_AdditionalShadowmapSize : vec4<f32>,
  /* @offset(528) */
  x_AdditionalShadowParams : Arr_4,
  /* @offset(1040) */
  x_AdditionalLightsWorldToShadow : Arr_3,
}

alias Arr_5 = array<vec4<f32>, 32u>;

alias Arr_6 = array<vec4<f32>, 32u>;

alias Arr_7 = array<vec4<f32>, 32u>;

alias Arr_8 = array<vec4<f32>, 32u>;

struct strided_arr {
  @size(16)
  el : f32,
}

alias Arr_9 = array<strided_arr, 32u>;

struct AdditionalLights {
  /* @offset(0) */
  x_AdditionalLightsPosition : Arr_4,
  /* @offset(512) */
  x_AdditionalLightsColor : Arr_4,
  /* @offset(1024) */
  x_AdditionalLightsAttenuation : Arr_4,
  /* @offset(1536) */
  x_AdditionalLightsSpotDir : Arr_4,
  /* @offset(2048) */
  x_AdditionalLightsOcclusionProbes : Arr_4,
  /* @offset(2560) */
  x_AdditionalLightsLayerMasks : Arr_9,
}

var<private> u_xlat0 : vec3<f32>;

var<private> vs_INTERP9 : vec3<f32>;

var<private> u_xlatb26 : vec2<bool>;

var<private> vs_INTERP4 : vec4<f32>;

@group(1) @binding(2) var<uniform> x_48 : UnityPerDraw;

var<private> u_xlat26 : vec3<f32>;

var<private> u_xlat1 : vec3<f32>;

var<private> u_xlat2 : vec4<f32>;

var<private> u_xlat3 : vec4<f32>;

var<private> u_xlat4 : vec4<f32>;

@group(0) @binding(5) var Texture2D_B222E8F : texture_2d<f32>;

@group(0) @binding(10) var samplerTexture2D_B222E8F : sampler;

var<private> vs_INTERP5 : vec4<f32>;

@group(1) @binding(0) var<uniform> x_128 : PGlobals;

var<private> u_xlat5 : vec3<f32>;

@group(1) @binding(4) var<uniform> x_138 : UnityPerMaterial;

var<private> u_xlat6 : vec4<f32>;

@group(0) @binding(6) var Texture2D_D9BFD5F1 : texture_2d<f32>;

@group(0) @binding(11) var samplerTexture2D_D9BFD5F1 : sampler;

var<private> u_xlat7 : vec4<f32>;

var<private> u_xlat32 : vec3<f32>;

var<private> vs_INTERP6 : vec4<f32>;

var<private> vs_INTERP8 : vec3<f32>;

@group(1) @binding(3) var<uniform> x_246 : LightShadows;

var<private> u_xlat8 : vec4<f32>;

var<private> u_xlatb2 : vec4<bool>;

var<private> u_xlatu0 : u32;

var<private> u_xlati0 : i32;

var<private> u_xlatb0 : bool;

var<private> u_xlatb79 : bool;

@group(0) @binding(3) var x_MainLightShadowmapTexture : texture_depth_2d;

@group(0) @binding(9) var sampler_LinearClampCompare : sampler_comparison;

var<private> u_xlat79 : f32;

var<private> u_xlatb80 : bool;

var<private> u_xlat55 : vec2<f32>;

var<private> u_xlat60 : vec2<f32>;

var<private> u_xlat9 : vec4<f32>;

var<private> u_xlat10 : vec4<f32>;

var<private> u_xlat11 : vec4<f32>;

var<private> u_xlat12 : vec4<f32>;

var<private> u_xlat13 : vec4<f32>;

var<private> u_xlat14 : vec4<f32>;

var<private> u_xlat80 : f32;

var<private> u_xlat29 : f32;

var<private> u_xlat33 : vec3<f32>;

var<private> u_xlat15 : vec4<f32>;

var<private> u_xlat16 : vec4<f32>;

var<private> u_xlat34 : vec2<f32>;

var<private> u_xlat66 : vec2<f32>;

var<private> u_xlat61 : vec2<f32>;

var<private> u_xlat17 : vec4<f32>;

var<private> u_xlat18 : vec4<f32>;

var<private> u_xlat19 : vec4<f32>;

var<private> u_xlat83 : f32;

var<private> u_xlatb3 : bool;

var<private> u_xlatb29 : bool;

var<private> u_xlat27 : vec3<f32>;

var<private> u_xlat81 : f32;

var<private> u_xlatb55 : bool;

@group(0) @binding(2) var unity_LightmapInd : texture_2d<f32>;

@group(0) @binding(8) var samplerunity_Lightmap : sampler;

var<private> vs_INTERP0 : vec2<f32>;

@group(0) @binding(1) var unity_Lightmap : texture_2d<f32>;

var<private> u_xlat82 : f32;

var<private> u_xlatb59 : bool;

var<private> u_xlat59 : vec2<f32>;

var<private> u_xlat62 : vec2<f32>;

var<private> u_xlat85 : f32;

var<private> u_xlat35 : vec2<f32>;

var<private> u_xlat63 : vec2<f32>;

var<private> u_xlat20 : vec4<f32>;

var<private> u_xlat21 : vec4<f32>;

var<private> u_xlat87 : f32;

var<private> u_xlat28 : vec3<f32>;

var<private> u_xlat54 : f32;

@group(0) @binding(0) var unity_SpecCube0 : texture_cube<f32>;

@group(0) @binding(7) var samplerunity_SpecCube0 : sampler;

var<private> u_xlatu81 : u32;

var<private> u_xlati82 : i32;

var<private> u_xlati81 : i32;

@group(1) @binding(1) var<uniform> x_3650 : AdditionalLights;

var<private> u_xlat84 : f32;

var<private> u_xlati85 : i32;

var<private> u_xlatb86 : bool;

var<private> u_xlatb11 : vec4<bool>;

var<private> u_xlat86 : f32;

var<private> u_xlatb85 : bool;

@group(0) @binding(4) var x_AdditionalLightsShadowmapTexture : texture_depth_2d;

var<private> u_xlat64 : vec2<f32>;

var<private> u_xlat88 : f32;

var<private> u_xlat39 : vec3<f32>;

var<private> u_xlat22 : vec4<f32>;

var<private> u_xlat40 : vec2<f32>;

var<private> u_xlat72 : vec2<f32>;

var<private> u_xlat67 : vec2<f32>;

var<private> u_xlat23 : vec4<f32>;

var<private> u_xlat24 : vec4<f32>;

var<private> u_xlat25 : vec4<f32>;

var<private> u_xlatb87 : bool;

var<private> u_xlat78 : f32;

var<private> SV_Target0 : vec4<f32>;

var<private> gl_FragCoord : vec4<f32>;

var<private> u_xlatu3 : u32;

var<private> u_xlatb81 : bool;

fn main_1() {
  var txVec0 : vec3<f32>;
  var txVec1 : vec3<f32>;
  var txVec2 : vec3<f32>;
  var txVec3 : vec3<f32>;
  var txVec4 : vec3<f32>;
  var txVec5 : vec3<f32>;
  var txVec6 : vec3<f32>;
  var txVec7 : vec3<f32>;
  var txVec8 : vec3<f32>;
  var txVec9 : vec3<f32>;
  var txVec10 : vec3<f32>;
  var txVec11 : vec3<f32>;
  var txVec12 : vec3<f32>;
  var txVec13 : vec3<f32>;
  var txVec14 : vec3<f32>;
  var txVec15 : vec3<f32>;
  var txVec16 : vec3<f32>;
  var txVec17 : vec3<f32>;
  var txVec18 : vec3<f32>;
  var txVec19 : vec3<f32>;
  var txVec20 : vec3<f32>;
  var txVec21 : vec3<f32>;
  var txVec22 : vec3<f32>;
  var txVec23 : vec3<f32>;
  var txVec24 : vec3<f32>;
  var txVec25 : vec3<f32>;
  var txVec26 : vec3<f32>;
  var txVec27 : vec3<f32>;
  var txVec28 : vec3<f32>;
  var txVec29 : vec3<f32>;
  var x_1750 : f32;
  var x_1872 : vec3<f32>;
  var txVec30 : vec3<f32>;
  var txVec31 : vec3<f32>;
  var txVec32 : vec3<f32>;
  var txVec33 : vec3<f32>;
  var txVec34 : vec3<f32>;
  var txVec35 : vec3<f32>;
  var txVec36 : vec3<f32>;
  var txVec37 : vec3<f32>;
  var txVec38 : vec3<f32>;
  var txVec39 : vec3<f32>;
  var txVec40 : vec3<f32>;
  var txVec41 : vec3<f32>;
  var txVec42 : vec3<f32>;
  var txVec43 : vec3<f32>;
  var txVec44 : vec3<f32>;
  var txVec45 : vec3<f32>;
  var txVec46 : vec3<f32>;
  var txVec47 : vec3<f32>;
  var txVec48 : vec3<f32>;
  var txVec49 : vec3<f32>;
  var txVec50 : vec3<f32>;
  var txVec51 : vec3<f32>;
  var txVec52 : vec3<f32>;
  var txVec53 : vec3<f32>;
  var txVec54 : vec3<f32>;
  var txVec55 : vec3<f32>;
  var txVec56 : vec3<f32>;
  var txVec57 : vec3<f32>;
  var txVec58 : vec3<f32>;
  var txVec59 : vec3<f32>;
  var x_3235 : f32;
  var u_xlatu_loop_1 : u32;
  var indexable : array<vec4<u32>, 4u>;
  var x_3785 : f32;
  var x_3795 : f32;
  var txVec60 : vec3<f32>;
  var txVec61 : vec3<f32>;
  var txVec62 : vec3<f32>;
  var txVec63 : vec3<f32>;
  var txVec64 : vec3<f32>;
  var txVec65 : vec3<f32>;
  var txVec66 : vec3<f32>;
  var txVec67 : vec3<f32>;
  var txVec68 : vec3<f32>;
  var txVec69 : vec3<f32>;
  var txVec70 : vec3<f32>;
  var txVec71 : vec3<f32>;
  var txVec72 : vec3<f32>;
  var txVec73 : vec3<f32>;
  var txVec74 : vec3<f32>;
  var txVec75 : vec3<f32>;
  var txVec76 : vec3<f32>;
  var txVec77 : vec3<f32>;
  var txVec78 : vec3<f32>;
  var txVec79 : vec3<f32>;
  var txVec80 : vec3<f32>;
  var txVec81 : vec3<f32>;
  var txVec82 : vec3<f32>;
  var txVec83 : vec3<f32>;
  var txVec84 : vec3<f32>;
  var txVec85 : vec3<f32>;
  var txVec86 : vec3<f32>;
  var txVec87 : vec3<f32>;
  var txVec88 : vec3<f32>;
  var txVec89 : vec3<f32>;
  var u_xlat_precise_vec4 : vec4<f32>;
  var u_xlat_precise_ivec4 : vec4<i32>;
  var u_xlat_precise_bvec4 : vec4<bool>;
  var u_xlat_precise_uvec4 : vec4<u32>;
  let x_12 : vec3<f32> = vs_INTERP9;
  let x_13 : vec3<f32> = vs_INTERP9;
  u_xlat0.x = dot(x_12, x_13);
  let x_20 : f32 = u_xlat0.x;
  u_xlat0.x = sqrt(x_20);
  let x_25 : f32 = u_xlat0.x;
  u_xlat0.x = (1.0f / x_25);
  let x_39 : f32 = vs_INTERP4.w;
  u_xlatb26.x = (0.0f < x_39);
  let x_53 : f32 = x_48.unity_WorldTransformParams.w;
  u_xlatb26.y = (x_53 >= 0.0f);
  let x_59 : bool = u_xlatb26.x;
  u_xlat26.x = select(-1.0f, 1.0f, x_59);
  let x_64 : bool = u_xlatb26.y;
  u_xlat26.y = select(-1.0f, 1.0f, x_64);
  let x_68 : f32 = u_xlat26.y;
  let x_70 : f32 = u_xlat26.x;
  u_xlat26.x = (x_68 * x_70);
  let x_74 : vec4<f32> = vs_INTERP4;
  let x_76 : vec3<f32> = vs_INTERP9;
  u_xlat1 = (vec3<f32>(x_74.y, x_74.z, x_74.x) * vec3<f32>(x_76.z, x_76.x, x_76.y));
  let x_79 : vec3<f32> = vs_INTERP9;
  let x_81 : vec4<f32> = vs_INTERP4;
  let x_84 : vec3<f32> = u_xlat1;
  u_xlat1 = ((vec3<f32>(x_79.y, x_79.z, x_79.x) * vec3<f32>(x_81.z, x_81.x, x_81.y)) + -(x_84));
  let x_87 : vec3<f32> = u_xlat26;
  let x_89 : vec3<f32> = u_xlat1;
  u_xlat26 = (vec3<f32>(x_87.x, x_87.x, x_87.x) * x_89);
  let x_91 : vec3<f32> = u_xlat0;
  let x_93 : vec3<f32> = vs_INTERP9;
  u_xlat1 = (vec3<f32>(x_91.x, x_91.x, x_91.x) * x_93);
  let x_97 : vec3<f32> = u_xlat0;
  let x_99 : vec4<f32> = vs_INTERP4;
  let x_101 : vec3<f32> = (vec3<f32>(x_97.x, x_97.x, x_97.x) * vec3<f32>(x_99.x, x_99.y, x_99.z));
  let x_102 : vec4<f32> = u_xlat2;
  u_xlat2 = vec4<f32>(x_101.x, x_101.y, x_101.z, x_102.w);
  let x_105 : vec3<f32> = u_xlat26;
  let x_106 : vec3<f32> = u_xlat0;
  let x_108 : vec3<f32> = (x_105 * vec3<f32>(x_106.x, x_106.x, x_106.x));
  let x_109 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_108.x, x_108.y, x_108.z, x_109.w);
  let x_124 : vec4<f32> = vs_INTERP5;
  let x_131 : f32 = x_128.x_GlobalMipBias.x;
  let x_132 : vec4<f32> = textureSampleBias(Texture2D_B222E8F, samplerTexture2D_B222E8F, vec2<f32>(x_124.x, x_124.y), x_131);
  u_xlat4 = x_132;
  let x_134 : vec4<f32> = u_xlat4;
  let x_142 : vec4<f32> = x_138.Color_C30C7CA3;
  u_xlat5 = (vec3<f32>(x_134.x, x_134.y, x_134.z) * vec3<f32>(x_142.x, x_142.y, x_142.z));
  let x_151 : vec4<f32> = vs_INTERP5;
  let x_154 : f32 = x_128.x_GlobalMipBias.x;
  let x_155 : vec4<f32> = textureSampleBias(Texture2D_D9BFD5F1, samplerTexture2D_D9BFD5F1, vec2<f32>(x_151.x, x_151.y), x_154);
  u_xlat6 = vec4<f32>(x_155.w, x_155.x, x_155.y, x_155.z);
  let x_158 : vec4<f32> = u_xlat6;
  u_xlat7 = ((vec4<f32>(x_158.y, x_158.z, x_158.w, x_158.x) * vec4<f32>(2.0f, 2.0f, 2.0f, 2.0f)) + vec4<f32>(-1.0f, -1.0f, -1.0f, -1.0f));
  let x_165 : vec4<f32> = u_xlat7;
  let x_166 : vec4<f32> = u_xlat7;
  u_xlat0.x = dot(x_165, x_166);
  let x_170 : f32 = u_xlat0.x;
  u_xlat0.x = inverseSqrt(x_170);
  let x_174 : vec3<f32> = u_xlat0;
  let x_176 : vec4<f32> = u_xlat7;
  u_xlat32 = (vec3<f32>(x_174.x, x_174.x, x_174.x) * vec3<f32>(x_176.x, x_176.y, x_176.z));
  let x_181 : f32 = vs_INTERP6.y;
  u_xlat0.x = (x_181 * 200.0f);
  let x_186 : f32 = u_xlat0.x;
  u_xlat0.x = min(x_186, 1.0f);
  let x_189 : vec3<f32> = u_xlat0;
  let x_191 : vec4<f32> = u_xlat4;
  let x_193 : vec3<f32> = (vec3<f32>(x_189.x, x_189.x, x_189.x) * vec3<f32>(x_191.x, x_191.y, x_191.z));
  let x_194 : vec4<f32> = u_xlat4;
  u_xlat4 = vec4<f32>(x_193.x, x_193.y, x_193.z, x_194.w);
  let x_196 : vec4<f32> = u_xlat3;
  let x_198 : vec3<f32> = u_xlat32;
  let x_200 : vec3<f32> = (vec3<f32>(x_196.x, x_196.y, x_196.z) * vec3<f32>(x_198.y, x_198.y, x_198.y));
  let x_201 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_200.x, x_200.y, x_200.z, x_201.w);
  let x_203 : vec3<f32> = u_xlat32;
  let x_205 : vec4<f32> = u_xlat2;
  let x_208 : vec4<f32> = u_xlat3;
  let x_210 : vec3<f32> = ((vec3<f32>(x_203.x, x_203.x, x_203.x) * vec3<f32>(x_205.x, x_205.y, x_205.z)) + vec3<f32>(x_208.x, x_208.y, x_208.z));
  let x_211 : vec4<f32> = u_xlat2;
  u_xlat2 = vec4<f32>(x_210.x, x_210.y, x_210.z, x_211.w);
  let x_213 : vec3<f32> = u_xlat32;
  let x_215 : vec3<f32> = u_xlat1;
  let x_217 : vec4<f32> = u_xlat2;
  u_xlat1 = ((vec3<f32>(x_213.z, x_213.z, x_213.z) * x_215) + vec3<f32>(x_217.x, x_217.y, x_217.z));
  let x_220 : vec3<f32> = u_xlat1;
  let x_221 : vec3<f32> = u_xlat1;
  u_xlat0.x = dot(x_220, x_221);
  let x_225 : f32 = u_xlat0.x;
  u_xlat0.x = max(x_225, 1.17549435e-38f);
  let x_230 : f32 = u_xlat0.x;
  u_xlat0.x = inverseSqrt(x_230);
  let x_233 : vec3<f32> = u_xlat0;
  let x_235 : vec3<f32> = u_xlat1;
  u_xlat1 = (vec3<f32>(x_233.x, x_233.x, x_233.x) * x_235);
  let x_238 : vec3<f32> = vs_INTERP8;
  let x_248 : vec4<f32> = x_246.x_CascadeShadowSplitSpheres0;
  let x_251 : vec3<f32> = (x_238 + -(vec3<f32>(x_248.x, x_248.y, x_248.z)));
  let x_252 : vec4<f32> = u_xlat2;
  u_xlat2 = vec4<f32>(x_251.x, x_251.y, x_251.z, x_252.w);
  let x_254 : vec3<f32> = vs_INTERP8;
  let x_257 : vec4<f32> = x_246.x_CascadeShadowSplitSpheres1;
  let x_260 : vec3<f32> = (x_254 + -(vec3<f32>(x_257.x, x_257.y, x_257.z)));
  let x_261 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_260.x, x_260.y, x_260.z, x_261.w);
  let x_263 : vec3<f32> = vs_INTERP8;
  let x_265 : vec4<f32> = x_246.x_CascadeShadowSplitSpheres2;
  let x_268 : vec3<f32> = (x_263 + -(vec3<f32>(x_265.x, x_265.y, x_265.z)));
  let x_269 : vec4<f32> = u_xlat7;
  u_xlat7 = vec4<f32>(x_268.x, x_268.y, x_268.z, x_269.w);
  let x_272 : vec3<f32> = vs_INTERP8;
  let x_275 : vec4<f32> = x_246.x_CascadeShadowSplitSpheres3;
  let x_278 : vec3<f32> = (x_272 + -(vec3<f32>(x_275.x, x_275.y, x_275.z)));
  let x_279 : vec4<f32> = u_xlat8;
  u_xlat8 = vec4<f32>(x_278.x, x_278.y, x_278.z, x_279.w);
  let x_281 : vec4<f32> = u_xlat2;
  let x_283 : vec4<f32> = u_xlat2;
  u_xlat2.x = dot(vec3<f32>(x_281.x, x_281.y, x_281.z), vec3<f32>(x_283.x, x_283.y, x_283.z));
  let x_287 : vec4<f32> = u_xlat3;
  let x_289 : vec4<f32> = u_xlat3;
  u_xlat2.y = dot(vec3<f32>(x_287.x, x_287.y, x_287.z), vec3<f32>(x_289.x, x_289.y, x_289.z));
  let x_293 : vec4<f32> = u_xlat7;
  let x_295 : vec4<f32> = u_xlat7;
  u_xlat2.z = dot(vec3<f32>(x_293.x, x_293.y, x_293.z), vec3<f32>(x_295.x, x_295.y, x_295.z));
  let x_299 : vec4<f32> = u_xlat8;
  let x_301 : vec4<f32> = u_xlat8;
  u_xlat2.w = dot(vec3<f32>(x_299.x, x_299.y, x_299.z), vec3<f32>(x_301.x, x_301.y, x_301.z));
  let x_308 : vec4<f32> = u_xlat2;
  let x_311 : vec4<f32> = x_246.x_CascadeShadowSplitSphereRadii;
  u_xlatb2 = (x_308 < x_311);
  let x_314 : bool = u_xlatb2.x;
  u_xlat3.x = select(0.0f, 1.0f, x_314);
  let x_318 : bool = u_xlatb2.y;
  u_xlat3.y = select(0.0f, 1.0f, x_318);
  let x_322 : bool = u_xlatb2.z;
  u_xlat3.z = select(0.0f, 1.0f, x_322);
  let x_326 : bool = u_xlatb2.w;
  u_xlat3.w = select(0.0f, 1.0f, x_326);
  let x_330 : bool = u_xlatb2.x;
  u_xlat2.x = select(-0.0f, -1.0f, x_330);
  let x_335 : bool = u_xlatb2.y;
  u_xlat2.y = select(-0.0f, -1.0f, x_335);
  let x_339 : bool = u_xlatb2.z;
  u_xlat2.z = select(-0.0f, -1.0f, x_339);
  let x_342 : vec4<f32> = u_xlat2;
  let x_344 : vec4<f32> = u_xlat3;
  let x_346 : vec3<f32> = (vec3<f32>(x_342.x, x_342.y, x_342.z) + vec3<f32>(x_344.y, x_344.z, x_344.w));
  let x_347 : vec4<f32> = u_xlat2;
  u_xlat2 = vec4<f32>(x_346.x, x_346.y, x_346.z, x_347.w);
  let x_349 : vec4<f32> = u_xlat2;
  let x_352 : vec3<f32> = max(vec3<f32>(x_349.x, x_349.y, x_349.z), vec3<f32>(0.0f, 0.0f, 0.0f));
  let x_353 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_353.x, x_352.x, x_352.y, x_352.z);
  let x_355 : vec4<f32> = u_xlat3;
  u_xlat0.x = dot(x_355, vec4<f32>(4.0f, 3.0f, 2.0f, 1.0f));
  let x_362 : f32 = u_xlat0.x;
  u_xlat0.x = (-(x_362) + 4.0f);
  let x_369 : f32 = u_xlat0.x;
  u_xlatu0 = u32(x_369);
  let x_373 : u32 = u_xlatu0;
  u_xlati0 = (bitcast<i32>(x_373) << bitcast<u32>(2i));
  let x_376 : vec3<f32> = vs_INTERP8;
  let x_378 : i32 = u_xlati0;
  let x_381 : i32 = u_xlati0;
  let x_385 : vec4<f32> = x_246.x_MainLightWorldToShadow[((x_378 + 1i) / 4i)][((x_381 + 1i) % 4i)];
  let x_387 : vec3<f32> = (vec3<f32>(x_376.y, x_376.y, x_376.y) * vec3<f32>(x_385.x, x_385.y, x_385.z));
  let x_388 : vec4<f32> = u_xlat2;
  u_xlat2 = vec4<f32>(x_387.x, x_387.y, x_387.z, x_388.w);
  let x_390 : i32 = u_xlati0;
  let x_392 : i32 = u_xlati0;
  let x_395 : vec4<f32> = x_246.x_MainLightWorldToShadow[(x_390 / 4i)][(x_392 % 4i)];
  let x_397 : vec3<f32> = vs_INTERP8;
  let x_400 : vec4<f32> = u_xlat2;
  let x_402 : vec3<f32> = ((vec3<f32>(x_395.x, x_395.y, x_395.z) * vec3<f32>(x_397.x, x_397.x, x_397.x)) + vec3<f32>(x_400.x, x_400.y, x_400.z));
  let x_403 : vec4<f32> = u_xlat2;
  u_xlat2 = vec4<f32>(x_402.x, x_402.y, x_402.z, x_403.w);
  let x_405 : i32 = u_xlati0;
  let x_408 : i32 = u_xlati0;
  let x_412 : vec4<f32> = x_246.x_MainLightWorldToShadow[((x_405 + 2i) / 4i)][((x_408 + 2i) % 4i)];
  let x_414 : vec3<f32> = vs_INTERP8;
  let x_417 : vec4<f32> = u_xlat2;
  let x_419 : vec3<f32> = ((vec3<f32>(x_412.x, x_412.y, x_412.z) * vec3<f32>(x_414.z, x_414.z, x_414.z)) + vec3<f32>(x_417.x, x_417.y, x_417.z));
  let x_420 : vec4<f32> = u_xlat2;
  u_xlat2 = vec4<f32>(x_419.x, x_419.y, x_419.z, x_420.w);
  let x_422 : vec4<f32> = u_xlat2;
  let x_424 : i32 = u_xlati0;
  let x_427 : i32 = u_xlati0;
  let x_431 : vec4<f32> = x_246.x_MainLightWorldToShadow[((x_424 + 3i) / 4i)][((x_427 + 3i) % 4i)];
  let x_433 : vec3<f32> = (vec3<f32>(x_422.x, x_422.y, x_422.z) + vec3<f32>(x_431.x, x_431.y, x_431.z));
  let x_434 : vec4<f32> = u_xlat2;
  u_xlat2 = vec4<f32>(x_433.x, x_433.y, x_433.z, x_434.w);
  let x_439 : f32 = x_246.x_MainLightShadowParams.y;
  u_xlatb0 = (0.0f < x_439);
  let x_441 : bool = u_xlatb0;
  if (x_441) {
    let x_446 : f32 = x_246.x_MainLightShadowParams.y;
    u_xlatb79 = (x_446 == 1.0f);
    let x_448 : bool = u_xlatb79;
    if (x_448) {
      let x_451 : vec4<f32> = u_xlat2;
      let x_455 : vec4<f32> = x_246.x_MainLightShadowOffset0;
      u_xlat3 = (vec4<f32>(x_451.x, x_451.y, x_451.x, x_451.y) + x_455);
      let x_459 : vec4<f32> = u_xlat3;
      let x_460 : vec2<f32> = vec2<f32>(x_459.x, x_459.y);
      let x_462 : f32 = u_xlat2.z;
      txVec0 = vec3<f32>(x_460.x, x_460.y, x_462);
      let x_474 : vec3<f32> = txVec0;
      let x_476 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_LinearClampCompare, x_474.xy, x_474.z);
      u_xlat7.x = x_476;
      let x_479 : vec4<f32> = u_xlat3;
      let x_480 : vec2<f32> = vec2<f32>(x_479.z, x_479.w);
      let x_482 : f32 = u_xlat2.z;
      txVec1 = vec3<f32>(x_480.x, x_480.y, x_482);
      let x_489 : vec3<f32> = txVec1;
      let x_491 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_LinearClampCompare, x_489.xy, x_489.z);
      u_xlat7.y = x_491;
      let x_493 : vec4<f32> = u_xlat2;
      let x_497 : vec4<f32> = x_246.x_MainLightShadowOffset1;
      u_xlat3 = (vec4<f32>(x_493.x, x_493.y, x_493.x, x_493.y) + x_497);
      let x_500 : vec4<f32> = u_xlat3;
      let x_501 : vec2<f32> = vec2<f32>(x_500.x, x_500.y);
      let x_503 : f32 = u_xlat2.z;
      txVec2 = vec3<f32>(x_501.x, x_501.y, x_503);
      let x_510 : vec3<f32> = txVec2;
      let x_512 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_LinearClampCompare, x_510.xy, x_510.z);
      u_xlat7.z = x_512;
      let x_515 : vec4<f32> = u_xlat3;
      let x_516 : vec2<f32> = vec2<f32>(x_515.z, x_515.w);
      let x_518 : f32 = u_xlat2.z;
      txVec3 = vec3<f32>(x_516.x, x_516.y, x_518);
      let x_525 : vec3<f32> = txVec3;
      let x_527 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_LinearClampCompare, x_525.xy, x_525.z);
      u_xlat7.w = x_527;
      let x_530 : vec4<f32> = u_xlat7;
      u_xlat79 = dot(x_530, vec4<f32>(0.25f, 0.25f, 0.25f, 0.25f));
    } else {
      let x_537 : f32 = x_246.x_MainLightShadowParams.y;
      u_xlatb80 = (x_537 == 2.0f);
      let x_539 : bool = u_xlatb80;
      if (x_539) {
        let x_542 : vec4<f32> = u_xlat2;
        let x_546 : vec4<f32> = x_246.x_MainLightShadowmapSize;
        let x_551 : vec2<f32> = ((vec2<f32>(x_542.x, x_542.y) * vec2<f32>(x_546.z, x_546.w)) + vec2<f32>(0.5f, 0.5f));
        let x_552 : vec4<f32> = u_xlat3;
        u_xlat3 = vec4<f32>(x_551.x, x_551.y, x_552.z, x_552.w);
        let x_554 : vec4<f32> = u_xlat3;
        let x_556 : vec2<f32> = floor(vec2<f32>(x_554.x, x_554.y));
        let x_557 : vec4<f32> = u_xlat3;
        u_xlat3 = vec4<f32>(x_556.x, x_556.y, x_557.z, x_557.w);
        let x_561 : vec4<f32> = u_xlat2;
        let x_564 : vec4<f32> = x_246.x_MainLightShadowmapSize;
        let x_567 : vec4<f32> = u_xlat3;
        u_xlat55 = ((vec2<f32>(x_561.x, x_561.y) * vec2<f32>(x_564.z, x_564.w)) + -(vec2<f32>(x_567.x, x_567.y)));
        let x_571 : vec2<f32> = u_xlat55;
        u_xlat7 = (vec4<f32>(x_571.x, x_571.x, x_571.y, x_571.y) + vec4<f32>(0.5f, 1.0f, 0.5f, 1.0f));
        let x_575 : vec4<f32> = u_xlat7;
        let x_577 : vec4<f32> = u_xlat7;
        u_xlat8 = (vec4<f32>(x_575.x, x_575.x, x_575.z, x_575.z) * vec4<f32>(x_577.x, x_577.x, x_577.z, x_577.z));
        let x_580 : vec4<f32> = u_xlat8;
        let x_584 : vec2<f32> = (vec2<f32>(x_580.y, x_580.w) * vec2<f32>(0.07999999821186065674f, 0.07999999821186065674f));
        let x_585 : vec4<f32> = u_xlat7;
        u_xlat7 = vec4<f32>(x_584.x, x_585.y, x_584.y, x_585.w);
        let x_587 : vec4<f32> = u_xlat8;
        let x_590 : vec2<f32> = u_xlat55;
        let x_592 : vec2<f32> = ((vec2<f32>(x_587.x, x_587.z) * vec2<f32>(0.5f, 0.5f)) + -(x_590));
        let x_593 : vec4<f32> = u_xlat8;
        u_xlat8 = vec4<f32>(x_592.x, x_592.y, x_593.z, x_593.w);
        let x_596 : vec2<f32> = u_xlat55;
        u_xlat60 = (-(x_596) + vec2<f32>(1.0f, 1.0f));
        let x_601 : vec2<f32> = u_xlat55;
        let x_603 : vec2<f32> = min(x_601, vec2<f32>(0.0f, 0.0f));
        let x_604 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_603.x, x_603.y, x_604.z, x_604.w);
        let x_606 : vec4<f32> = u_xlat9;
        let x_609 : vec4<f32> = u_xlat9;
        let x_612 : vec2<f32> = u_xlat60;
        let x_613 : vec2<f32> = ((-(vec2<f32>(x_606.x, x_606.y)) * vec2<f32>(x_609.x, x_609.y)) + x_612);
        let x_614 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_613.x, x_613.y, x_614.z, x_614.w);
        let x_616 : vec2<f32> = u_xlat55;
        u_xlat55 = max(x_616, vec2<f32>(0.0f, 0.0f));
        let x_618 : vec2<f32> = u_xlat55;
        let x_620 : vec2<f32> = u_xlat55;
        let x_622 : vec4<f32> = u_xlat7;
        u_xlat55 = ((-(x_618) * x_620) + vec2<f32>(x_622.y, x_622.w));
        let x_625 : vec4<f32> = u_xlat9;
        let x_627 : vec2<f32> = (vec2<f32>(x_625.x, x_625.y) + vec2<f32>(1.0f, 1.0f));
        let x_628 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_627.x, x_627.y, x_628.z, x_628.w);
        let x_630 : vec2<f32> = u_xlat55;
        u_xlat55 = (x_630 + vec2<f32>(1.0f, 1.0f));
        let x_633 : vec4<f32> = u_xlat8;
        let x_637 : vec2<f32> = (vec2<f32>(x_633.x, x_633.y) * vec2<f32>(0.15999999642372131348f, 0.15999999642372131348f));
        let x_638 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_637.x, x_637.y, x_638.z, x_638.w);
        let x_640 : vec2<f32> = u_xlat60;
        let x_641 : vec2<f32> = (x_640 * vec2<f32>(0.15999999642372131348f, 0.15999999642372131348f));
        let x_642 : vec4<f32> = u_xlat8;
        u_xlat8 = vec4<f32>(x_641.x, x_641.y, x_642.z, x_642.w);
        let x_644 : vec4<f32> = u_xlat9;
        let x_646 : vec2<f32> = (vec2<f32>(x_644.x, x_644.y) * vec2<f32>(0.15999999642372131348f, 0.15999999642372131348f));
        let x_647 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_646.x, x_646.y, x_647.z, x_647.w);
        let x_650 : vec2<f32> = u_xlat55;
        let x_651 : vec2<f32> = (x_650 * vec2<f32>(0.15999999642372131348f, 0.15999999642372131348f));
        let x_652 : vec4<f32> = u_xlat11;
        u_xlat11 = vec4<f32>(x_651.x, x_651.y, x_652.z, x_652.w);
        let x_654 : vec4<f32> = u_xlat7;
        u_xlat55 = (vec2<f32>(x_654.y, x_654.w) * vec2<f32>(0.15999999642372131348f, 0.15999999642372131348f));
        let x_658 : f32 = u_xlat9.x;
        u_xlat10.z = x_658;
        let x_661 : f32 = u_xlat55.x;
        u_xlat10.w = x_661;
        let x_664 : f32 = u_xlat11.x;
        u_xlat8.z = x_664;
        let x_667 : f32 = u_xlat7.x;
        u_xlat8.w = x_667;
        let x_670 : vec4<f32> = u_xlat8;
        let x_672 : vec4<f32> = u_xlat10;
        u_xlat12 = (vec4<f32>(x_670.z, x_670.w, x_670.x, x_670.z) + vec4<f32>(x_672.z, x_672.w, x_672.x, x_672.z));
        let x_676 : f32 = u_xlat10.y;
        u_xlat9.z = x_676;
        let x_679 : f32 = u_xlat55.y;
        u_xlat9.w = x_679;
        let x_682 : f32 = u_xlat8.y;
        u_xlat11.z = x_682;
        let x_685 : f32 = u_xlat7.z;
        u_xlat11.w = x_685;
        let x_687 : vec4<f32> = u_xlat9;
        let x_689 : vec4<f32> = u_xlat11;
        let x_691 : vec3<f32> = (vec3<f32>(x_687.z, x_687.y, x_687.w) + vec3<f32>(x_689.z, x_689.y, x_689.w));
        let x_692 : vec4<f32> = u_xlat7;
        u_xlat7 = vec4<f32>(x_691.x, x_691.y, x_691.z, x_692.w);
        let x_694 : vec4<f32> = u_xlat8;
        let x_696 : vec4<f32> = u_xlat12;
        let x_698 : vec3<f32> = (vec3<f32>(x_694.x, x_694.z, x_694.w) / vec3<f32>(x_696.z, x_696.w, x_696.y));
        let x_699 : vec4<f32> = u_xlat8;
        u_xlat8 = vec4<f32>(x_698.x, x_698.y, x_698.z, x_699.w);
        let x_701 : vec4<f32> = u_xlat8;
        let x_707 : vec3<f32> = (vec3<f32>(x_701.x, x_701.y, x_701.z) + vec3<f32>(-2.5f, -0.5f, 1.5f));
        let x_708 : vec4<f32> = u_xlat8;
        u_xlat8 = vec4<f32>(x_707.x, x_707.y, x_707.z, x_708.w);
        let x_710 : vec4<f32> = u_xlat11;
        let x_712 : vec4<f32> = u_xlat7;
        let x_714 : vec3<f32> = (vec3<f32>(x_710.z, x_710.y, x_710.w) / vec3<f32>(x_712.x, x_712.y, x_712.z));
        let x_715 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_714.x, x_714.y, x_714.z, x_715.w);
        let x_717 : vec4<f32> = u_xlat9;
        let x_719 : vec3<f32> = (vec3<f32>(x_717.x, x_717.y, x_717.z) + vec3<f32>(-2.5f, -0.5f, 1.5f));
        let x_720 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_719.x, x_719.y, x_719.z, x_720.w);
        let x_722 : vec4<f32> = u_xlat8;
        let x_725 : vec4<f32> = x_246.x_MainLightShadowmapSize;
        let x_727 : vec3<f32> = (vec3<f32>(x_722.y, x_722.x, x_722.z) * vec3<f32>(x_725.x, x_725.x, x_725.x));
        let x_728 : vec4<f32> = u_xlat8;
        u_xlat8 = vec4<f32>(x_727.x, x_727.y, x_727.z, x_728.w);
        let x_730 : vec4<f32> = u_xlat9;
        let x_733 : vec4<f32> = x_246.x_MainLightShadowmapSize;
        let x_735 : vec3<f32> = (vec3<f32>(x_730.x, x_730.y, x_730.z) * vec3<f32>(x_733.y, x_733.y, x_733.y));
        let x_736 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_735.x, x_735.y, x_735.z, x_736.w);
        let x_739 : f32 = u_xlat9.x;
        u_xlat8.w = x_739;
        let x_741 : vec4<f32> = u_xlat3;
        let x_744 : vec4<f32> = x_246.x_MainLightShadowmapSize;
        let x_747 : vec4<f32> = u_xlat8;
        u_xlat10 = ((vec4<f32>(x_741.x, x_741.y, x_741.x, x_741.y) * vec4<f32>(x_744.x, x_744.y, x_744.x, x_744.y)) + vec4<f32>(x_747.y, x_747.w, x_747.x, x_747.w));
        let x_750 : vec4<f32> = u_xlat3;
        let x_753 : vec4<f32> = x_246.x_MainLightShadowmapSize;
        let x_756 : vec4<f32> = u_xlat8;
        u_xlat55 = ((vec2<f32>(x_750.x, x_750.y) * vec2<f32>(x_753.x, x_753.y)) + vec2<f32>(x_756.z, x_756.w));
        let x_760 : f32 = u_xlat8.y;
        u_xlat9.w = x_760;
        let x_762 : vec4<f32> = u_xlat9;
        let x_763 : vec2<f32> = vec2<f32>(x_762.y, x_762.z);
        let x_764 : vec4<f32> = u_xlat8;
        u_xlat8 = vec4<f32>(x_764.x, x_763.x, x_764.z, x_763.y);
        let x_766 : vec4<f32> = u_xlat3;
        let x_769 : vec4<f32> = x_246.x_MainLightShadowmapSize;
        let x_772 : vec4<f32> = u_xlat8;
        u_xlat11 = ((vec4<f32>(x_766.x, x_766.y, x_766.x, x_766.y) * vec4<f32>(x_769.x, x_769.y, x_769.x, x_769.y)) + vec4<f32>(x_772.x, x_772.y, x_772.z, x_772.y));
        let x_775 : vec4<f32> = u_xlat3;
        let x_778 : vec4<f32> = x_246.x_MainLightShadowmapSize;
        let x_781 : vec4<f32> = u_xlat9;
        u_xlat9 = ((vec4<f32>(x_775.x, x_775.y, x_775.x, x_775.y) * vec4<f32>(x_778.x, x_778.y, x_778.x, x_778.y)) + vec4<f32>(x_781.w, x_781.y, x_781.w, x_781.z));
        let x_784 : vec4<f32> = u_xlat3;
        let x_787 : vec4<f32> = x_246.x_MainLightShadowmapSize;
        let x_790 : vec4<f32> = u_xlat8;
        u_xlat8 = ((vec4<f32>(x_784.x, x_784.y, x_784.x, x_784.y) * vec4<f32>(x_787.x, x_787.y, x_787.x, x_787.y)) + vec4<f32>(x_790.x, x_790.w, x_790.z, x_790.w));
        let x_794 : vec4<f32> = u_xlat7;
        let x_796 : vec4<f32> = u_xlat12;
        u_xlat13 = (vec4<f32>(x_794.x, x_794.x, x_794.x, x_794.y) * vec4<f32>(x_796.z, x_796.w, x_796.y, x_796.z));
        let x_800 : vec4<f32> = u_xlat7;
        let x_802 : vec4<f32> = u_xlat12;
        u_xlat14 = (vec4<f32>(x_800.y, x_800.y, x_800.z, x_800.z) * x_802);
        let x_806 : f32 = u_xlat7.z;
        let x_808 : f32 = u_xlat12.y;
        u_xlat80 = (x_806 * x_808);
        let x_811 : vec4<f32> = u_xlat10;
        let x_812 : vec2<f32> = vec2<f32>(x_811.x, x_811.y);
        let x_814 : f32 = u_xlat2.z;
        txVec4 = vec3<f32>(x_812.x, x_812.y, x_814);
        let x_821 : vec3<f32> = txVec4;
        let x_823 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_LinearClampCompare, x_821.xy, x_821.z);
        u_xlat3.x = x_823;
        let x_826 : vec4<f32> = u_xlat10;
        let x_827 : vec2<f32> = vec2<f32>(x_826.z, x_826.w);
        let x_829 : f32 = u_xlat2.z;
        txVec5 = vec3<f32>(x_827.x, x_827.y, x_829);
        let x_837 : vec3<f32> = txVec5;
        let x_839 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_LinearClampCompare, x_837.xy, x_837.z);
        u_xlat29 = x_839;
        let x_840 : f32 = u_xlat29;
        let x_842 : f32 = u_xlat13.y;
        u_xlat29 = (x_840 * x_842);
        let x_845 : f32 = u_xlat13.x;
        let x_847 : f32 = u_xlat3.x;
        let x_849 : f32 = u_xlat29;
        u_xlat3.x = ((x_845 * x_847) + x_849);
        let x_853 : vec2<f32> = u_xlat55;
        let x_855 : f32 = u_xlat2.z;
        txVec6 = vec3<f32>(x_853.x, x_853.y, x_855);
        let x_862 : vec3<f32> = txVec6;
        let x_864 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_LinearClampCompare, x_862.xy, x_862.z);
        u_xlat29 = x_864;
        let x_866 : f32 = u_xlat13.z;
        let x_867 : f32 = u_xlat29;
        let x_870 : f32 = u_xlat3.x;
        u_xlat3.x = ((x_866 * x_867) + x_870);
        let x_874 : vec4<f32> = u_xlat9;
        let x_875 : vec2<f32> = vec2<f32>(x_874.x, x_874.y);
        let x_877 : f32 = u_xlat2.z;
        txVec7 = vec3<f32>(x_875.x, x_875.y, x_877);
        let x_884 : vec3<f32> = txVec7;
        let x_886 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_LinearClampCompare, x_884.xy, x_884.z);
        u_xlat29 = x_886;
        let x_888 : f32 = u_xlat13.w;
        let x_889 : f32 = u_xlat29;
        let x_892 : f32 = u_xlat3.x;
        u_xlat3.x = ((x_888 * x_889) + x_892);
        let x_896 : vec4<f32> = u_xlat11;
        let x_897 : vec2<f32> = vec2<f32>(x_896.x, x_896.y);
        let x_899 : f32 = u_xlat2.z;
        txVec8 = vec3<f32>(x_897.x, x_897.y, x_899);
        let x_906 : vec3<f32> = txVec8;
        let x_908 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_LinearClampCompare, x_906.xy, x_906.z);
        u_xlat29 = x_908;
        let x_910 : f32 = u_xlat14.x;
        let x_911 : f32 = u_xlat29;
        let x_914 : f32 = u_xlat3.x;
        u_xlat3.x = ((x_910 * x_911) + x_914);
        let x_918 : vec4<f32> = u_xlat11;
        let x_919 : vec2<f32> = vec2<f32>(x_918.z, x_918.w);
        let x_921 : f32 = u_xlat2.z;
        txVec9 = vec3<f32>(x_919.x, x_919.y, x_921);
        let x_928 : vec3<f32> = txVec9;
        let x_930 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_LinearClampCompare, x_928.xy, x_928.z);
        u_xlat29 = x_930;
        let x_932 : f32 = u_xlat14.y;
        let x_933 : f32 = u_xlat29;
        let x_936 : f32 = u_xlat3.x;
        u_xlat3.x = ((x_932 * x_933) + x_936);
        let x_940 : vec4<f32> = u_xlat9;
        let x_941 : vec2<f32> = vec2<f32>(x_940.z, x_940.w);
        let x_943 : f32 = u_xlat2.z;
        txVec10 = vec3<f32>(x_941.x, x_941.y, x_943);
        let x_950 : vec3<f32> = txVec10;
        let x_952 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_LinearClampCompare, x_950.xy, x_950.z);
        u_xlat29 = x_952;
        let x_954 : f32 = u_xlat14.z;
        let x_955 : f32 = u_xlat29;
        let x_958 : f32 = u_xlat3.x;
        u_xlat3.x = ((x_954 * x_955) + x_958);
        let x_962 : vec4<f32> = u_xlat8;
        let x_963 : vec2<f32> = vec2<f32>(x_962.x, x_962.y);
        let x_965 : f32 = u_xlat2.z;
        txVec11 = vec3<f32>(x_963.x, x_963.y, x_965);
        let x_972 : vec3<f32> = txVec11;
        let x_974 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_LinearClampCompare, x_972.xy, x_972.z);
        u_xlat29 = x_974;
        let x_976 : f32 = u_xlat14.w;
        let x_977 : f32 = u_xlat29;
        let x_980 : f32 = u_xlat3.x;
        u_xlat3.x = ((x_976 * x_977) + x_980);
        let x_984 : vec4<f32> = u_xlat8;
        let x_985 : vec2<f32> = vec2<f32>(x_984.z, x_984.w);
        let x_987 : f32 = u_xlat2.z;
        txVec12 = vec3<f32>(x_985.x, x_985.y, x_987);
        let x_994 : vec3<f32> = txVec12;
        let x_996 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_LinearClampCompare, x_994.xy, x_994.z);
        u_xlat29 = x_996;
        let x_997 : f32 = u_xlat80;
        let x_998 : f32 = u_xlat29;
        let x_1001 : f32 = u_xlat3.x;
        u_xlat79 = ((x_997 * x_998) + x_1001);
      } else {
        let x_1004 : vec4<f32> = u_xlat2;
        let x_1007 : vec4<f32> = x_246.x_MainLightShadowmapSize;
        let x_1010 : vec2<f32> = ((vec2<f32>(x_1004.x, x_1004.y) * vec2<f32>(x_1007.z, x_1007.w)) + vec2<f32>(0.5f, 0.5f));
        let x_1011 : vec4<f32> = u_xlat3;
        u_xlat3 = vec4<f32>(x_1010.x, x_1010.y, x_1011.z, x_1011.w);
        let x_1013 : vec4<f32> = u_xlat3;
        let x_1015 : vec2<f32> = floor(vec2<f32>(x_1013.x, x_1013.y));
        let x_1016 : vec4<f32> = u_xlat3;
        u_xlat3 = vec4<f32>(x_1015.x, x_1015.y, x_1016.z, x_1016.w);
        let x_1018 : vec4<f32> = u_xlat2;
        let x_1021 : vec4<f32> = x_246.x_MainLightShadowmapSize;
        let x_1024 : vec4<f32> = u_xlat3;
        u_xlat55 = ((vec2<f32>(x_1018.x, x_1018.y) * vec2<f32>(x_1021.z, x_1021.w)) + -(vec2<f32>(x_1024.x, x_1024.y)));
        let x_1028 : vec2<f32> = u_xlat55;
        u_xlat7 = (vec4<f32>(x_1028.x, x_1028.x, x_1028.y, x_1028.y) + vec4<f32>(0.5f, 1.0f, 0.5f, 1.0f));
        let x_1031 : vec4<f32> = u_xlat7;
        let x_1033 : vec4<f32> = u_xlat7;
        u_xlat8 = (vec4<f32>(x_1031.x, x_1031.x, x_1031.z, x_1031.z) * vec4<f32>(x_1033.x, x_1033.x, x_1033.z, x_1033.z));
        let x_1036 : vec4<f32> = u_xlat8;
        let x_1040 : vec2<f32> = (vec2<f32>(x_1036.y, x_1036.w) * vec2<f32>(0.04081600159406661987f, 0.04081600159406661987f));
        let x_1041 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_1041.x, x_1040.x, x_1041.z, x_1040.y);
        let x_1043 : vec4<f32> = u_xlat8;
        let x_1046 : vec2<f32> = u_xlat55;
        let x_1048 : vec2<f32> = ((vec2<f32>(x_1043.x, x_1043.z) * vec2<f32>(0.5f, 0.5f)) + -(x_1046));
        let x_1049 : vec4<f32> = u_xlat7;
        u_xlat7 = vec4<f32>(x_1048.x, x_1049.y, x_1048.y, x_1049.w);
        let x_1051 : vec2<f32> = u_xlat55;
        let x_1053 : vec2<f32> = (-(x_1051) + vec2<f32>(1.0f, 1.0f));
        let x_1054 : vec4<f32> = u_xlat8;
        u_xlat8 = vec4<f32>(x_1053.x, x_1053.y, x_1054.z, x_1054.w);
        let x_1056 : vec2<f32> = u_xlat55;
        u_xlat60 = min(x_1056, vec2<f32>(0.0f, 0.0f));
        let x_1058 : vec2<f32> = u_xlat60;
        let x_1060 : vec2<f32> = u_xlat60;
        let x_1062 : vec4<f32> = u_xlat8;
        let x_1064 : vec2<f32> = ((-(x_1058) * x_1060) + vec2<f32>(x_1062.x, x_1062.y));
        let x_1065 : vec4<f32> = u_xlat8;
        u_xlat8 = vec4<f32>(x_1064.x, x_1064.y, x_1065.z, x_1065.w);
        let x_1067 : vec2<f32> = u_xlat55;
        u_xlat60 = max(x_1067, vec2<f32>(0.0f, 0.0f));
        let x_1070 : vec2<f32> = u_xlat60;
        let x_1072 : vec2<f32> = u_xlat60;
        let x_1074 : vec4<f32> = u_xlat7;
        let x_1076 : vec2<f32> = ((-(x_1070) * x_1072) + vec2<f32>(x_1074.y, x_1074.w));
        let x_1077 : vec3<f32> = u_xlat33;
        u_xlat33 = vec3<f32>(x_1076.x, x_1077.y, x_1076.y);
        let x_1079 : vec4<f32> = u_xlat8;
        let x_1082 : vec2<f32> = (vec2<f32>(x_1079.x, x_1079.y) + vec2<f32>(2.0f, 2.0f));
        let x_1083 : vec4<f32> = u_xlat8;
        u_xlat8 = vec4<f32>(x_1082.x, x_1082.y, x_1083.z, x_1083.w);
        let x_1085 : vec3<f32> = u_xlat33;
        let x_1087 : vec2<f32> = (vec2<f32>(x_1085.x, x_1085.z) + vec2<f32>(2.0f, 2.0f));
        let x_1088 : vec4<f32> = u_xlat7;
        u_xlat7 = vec4<f32>(x_1088.x, x_1087.x, x_1088.z, x_1087.y);
        let x_1091 : f32 = u_xlat7.y;
        u_xlat10.z = (x_1091 * 0.08163200318813323975f);
        let x_1095 : vec4<f32> = u_xlat7;
        let x_1098 : vec3<f32> = (vec3<f32>(x_1095.z, x_1095.x, x_1095.w) * vec3<f32>(0.08163200318813323975f, 0.08163200318813323975f, 0.08163200318813323975f));
        let x_1099 : vec4<f32> = u_xlat11;
        u_xlat11 = vec4<f32>(x_1098.x, x_1098.y, x_1098.z, x_1099.w);
        let x_1101 : vec4<f32> = u_xlat8;
        let x_1104 : vec2<f32> = (vec2<f32>(x_1101.x, x_1101.y) * vec2<f32>(0.08163200318813323975f, 0.08163200318813323975f));
        let x_1105 : vec4<f32> = u_xlat7;
        u_xlat7 = vec4<f32>(x_1104.x, x_1104.y, x_1105.z, x_1105.w);
        let x_1108 : f32 = u_xlat11.y;
        u_xlat10.x = x_1108;
        let x_1110 : vec2<f32> = u_xlat55;
        let x_1117 : vec2<f32> = ((vec2<f32>(x_1110.x, x_1110.x) * vec2<f32>(-0.08163200318813323975f, 0.08163200318813323975f)) + vec2<f32>(0.16326400637626647949f, 0.08163200318813323975f));
        let x_1118 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_1118.x, x_1117.x, x_1118.z, x_1117.y);
        let x_1120 : vec2<f32> = u_xlat55;
        let x_1124 : vec2<f32> = ((vec2<f32>(x_1120.x, x_1120.x) * vec2<f32>(-0.08163200318813323975f, 0.08163200318813323975f)) + vec2<f32>(0.08163200318813323975f, 0.16326400637626647949f));
        let x_1125 : vec4<f32> = u_xlat8;
        u_xlat8 = vec4<f32>(x_1124.x, x_1125.y, x_1124.y, x_1125.w);
        let x_1128 : f32 = u_xlat7.x;
        u_xlat8.y = x_1128;
        let x_1131 : f32 = u_xlat9.y;
        u_xlat8.w = x_1131;
        let x_1133 : vec4<f32> = u_xlat8;
        let x_1134 : vec4<f32> = u_xlat10;
        u_xlat10 = (x_1133 + x_1134);
        let x_1136 : vec2<f32> = u_xlat55;
        let x_1139 : vec2<f32> = ((vec2<f32>(x_1136.y, x_1136.y) * vec2<f32>(-0.08163200318813323975f, 0.08163200318813323975f)) + vec2<f32>(0.16326400637626647949f, 0.08163200318813323975f));
        let x_1140 : vec4<f32> = u_xlat11;
        u_xlat11 = vec4<f32>(x_1140.x, x_1139.x, x_1140.z, x_1139.y);
        let x_1142 : vec2<f32> = u_xlat55;
        let x_1145 : vec2<f32> = ((vec2<f32>(x_1142.y, x_1142.y) * vec2<f32>(-0.08163200318813323975f, 0.08163200318813323975f)) + vec2<f32>(0.08163200318813323975f, 0.16326400637626647949f));
        let x_1146 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_1145.x, x_1146.y, x_1145.y, x_1146.w);
        let x_1149 : f32 = u_xlat7.y;
        u_xlat9.y = x_1149;
        let x_1151 : vec4<f32> = u_xlat9;
        let x_1152 : vec4<f32> = u_xlat11;
        u_xlat7 = (x_1151 + x_1152);
        let x_1154 : vec4<f32> = u_xlat8;
        let x_1155 : vec4<f32> = u_xlat10;
        u_xlat8 = (x_1154 / x_1155);
        let x_1157 : vec4<f32> = u_xlat8;
        u_xlat8 = (x_1157 + vec4<f32>(-3.5f, -1.5f, 0.5f, 2.5f));
        let x_1163 : vec4<f32> = u_xlat9;
        let x_1164 : vec4<f32> = u_xlat7;
        u_xlat9 = (x_1163 / x_1164);
        let x_1166 : vec4<f32> = u_xlat9;
        u_xlat9 = (x_1166 + vec4<f32>(-3.5f, -1.5f, 0.5f, 2.5f));
        let x_1168 : vec4<f32> = u_xlat8;
        let x_1171 : vec4<f32> = x_246.x_MainLightShadowmapSize;
        u_xlat8 = (vec4<f32>(x_1168.w, x_1168.x, x_1168.y, x_1168.z) * vec4<f32>(x_1171.x, x_1171.x, x_1171.x, x_1171.x));
        let x_1174 : vec4<f32> = u_xlat9;
        let x_1177 : vec4<f32> = x_246.x_MainLightShadowmapSize;
        u_xlat9 = (vec4<f32>(x_1174.x, x_1174.w, x_1174.y, x_1174.z) * vec4<f32>(x_1177.y, x_1177.y, x_1177.y, x_1177.y));
        let x_1180 : vec4<f32> = u_xlat8;
        let x_1181 : vec3<f32> = vec3<f32>(x_1180.y, x_1180.z, x_1180.w);
        let x_1182 : vec4<f32> = u_xlat11;
        u_xlat11 = vec4<f32>(x_1181.x, x_1182.y, x_1181.y, x_1181.z);
        let x_1185 : f32 = u_xlat9.x;
        u_xlat11.y = x_1185;
        let x_1187 : vec4<f32> = u_xlat3;
        let x_1190 : vec4<f32> = x_246.x_MainLightShadowmapSize;
        let x_1193 : vec4<f32> = u_xlat11;
        u_xlat12 = ((vec4<f32>(x_1187.x, x_1187.y, x_1187.x, x_1187.y) * vec4<f32>(x_1190.x, x_1190.y, x_1190.x, x_1190.y)) + vec4<f32>(x_1193.x, x_1193.y, x_1193.z, x_1193.y));
        let x_1196 : vec4<f32> = u_xlat3;
        let x_1199 : vec4<f32> = x_246.x_MainLightShadowmapSize;
        let x_1202 : vec4<f32> = u_xlat11;
        u_xlat55 = ((vec2<f32>(x_1196.x, x_1196.y) * vec2<f32>(x_1199.x, x_1199.y)) + vec2<f32>(x_1202.w, x_1202.y));
        let x_1206 : f32 = u_xlat11.y;
        u_xlat8.y = x_1206;
        let x_1209 : f32 = u_xlat9.z;
        u_xlat11.y = x_1209;
        let x_1211 : vec4<f32> = u_xlat3;
        let x_1214 : vec4<f32> = x_246.x_MainLightShadowmapSize;
        let x_1217 : vec4<f32> = u_xlat11;
        u_xlat13 = ((vec4<f32>(x_1211.x, x_1211.y, x_1211.x, x_1211.y) * vec4<f32>(x_1214.x, x_1214.y, x_1214.x, x_1214.y)) + vec4<f32>(x_1217.x, x_1217.y, x_1217.z, x_1217.y));
        let x_1220 : vec4<f32> = u_xlat3;
        let x_1223 : vec4<f32> = x_246.x_MainLightShadowmapSize;
        let x_1226 : vec4<f32> = u_xlat11;
        let x_1228 : vec2<f32> = ((vec2<f32>(x_1220.x, x_1220.y) * vec2<f32>(x_1223.x, x_1223.y)) + vec2<f32>(x_1226.w, x_1226.y));
        let x_1229 : vec4<f32> = u_xlat14;
        u_xlat14 = vec4<f32>(x_1228.x, x_1228.y, x_1229.z, x_1229.w);
        let x_1232 : f32 = u_xlat11.y;
        u_xlat8.z = x_1232;
        let x_1235 : vec4<f32> = u_xlat3;
        let x_1238 : vec4<f32> = x_246.x_MainLightShadowmapSize;
        let x_1241 : vec4<f32> = u_xlat8;
        u_xlat15 = ((vec4<f32>(x_1235.x, x_1235.y, x_1235.x, x_1235.y) * vec4<f32>(x_1238.x, x_1238.y, x_1238.x, x_1238.y)) + vec4<f32>(x_1241.x, x_1241.y, x_1241.x, x_1241.z));
        let x_1245 : f32 = u_xlat9.w;
        u_xlat11.y = x_1245;
        let x_1248 : vec4<f32> = u_xlat3;
        let x_1251 : vec4<f32> = x_246.x_MainLightShadowmapSize;
        let x_1254 : vec4<f32> = u_xlat11;
        u_xlat16 = ((vec4<f32>(x_1248.x, x_1248.y, x_1248.x, x_1248.y) * vec4<f32>(x_1251.x, x_1251.y, x_1251.x, x_1251.y)) + vec4<f32>(x_1254.x, x_1254.y, x_1254.z, x_1254.y));
        let x_1258 : vec4<f32> = u_xlat3;
        let x_1261 : vec4<f32> = x_246.x_MainLightShadowmapSize;
        let x_1264 : vec4<f32> = u_xlat11;
        u_xlat34 = ((vec2<f32>(x_1258.x, x_1258.y) * vec2<f32>(x_1261.x, x_1261.y)) + vec2<f32>(x_1264.w, x_1264.y));
        let x_1268 : f32 = u_xlat11.y;
        u_xlat8.w = x_1268;
        let x_1271 : vec4<f32> = u_xlat3;
        let x_1274 : vec4<f32> = x_246.x_MainLightShadowmapSize;
        let x_1277 : vec4<f32> = u_xlat8;
        u_xlat66 = ((vec2<f32>(x_1271.x, x_1271.y) * vec2<f32>(x_1274.x, x_1274.y)) + vec2<f32>(x_1277.x, x_1277.w));
        let x_1280 : vec4<f32> = u_xlat11;
        let x_1281 : vec3<f32> = vec3<f32>(x_1280.x, x_1280.z, x_1280.w);
        let x_1282 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_1281.x, x_1282.y, x_1281.y, x_1281.z);
        let x_1284 : vec4<f32> = u_xlat3;
        let x_1287 : vec4<f32> = x_246.x_MainLightShadowmapSize;
        let x_1290 : vec4<f32> = u_xlat9;
        u_xlat11 = ((vec4<f32>(x_1284.x, x_1284.y, x_1284.x, x_1284.y) * vec4<f32>(x_1287.x, x_1287.y, x_1287.x, x_1287.y)) + vec4<f32>(x_1290.x, x_1290.y, x_1290.z, x_1290.y));
        let x_1294 : vec4<f32> = u_xlat3;
        let x_1297 : vec4<f32> = x_246.x_MainLightShadowmapSize;
        let x_1300 : vec4<f32> = u_xlat9;
        u_xlat61 = ((vec2<f32>(x_1294.x, x_1294.y) * vec2<f32>(x_1297.x, x_1297.y)) + vec2<f32>(x_1300.w, x_1300.y));
        let x_1304 : f32 = u_xlat8.x;
        u_xlat9.x = x_1304;
        let x_1306 : vec4<f32> = u_xlat3;
        let x_1309 : vec4<f32> = x_246.x_MainLightShadowmapSize;
        let x_1312 : vec4<f32> = u_xlat9;
        let x_1314 : vec2<f32> = ((vec2<f32>(x_1306.x, x_1306.y) * vec2<f32>(x_1309.x, x_1309.y)) + vec2<f32>(x_1312.x, x_1312.y));
        let x_1315 : vec4<f32> = u_xlat3;
        u_xlat3 = vec4<f32>(x_1314.x, x_1314.y, x_1315.z, x_1315.w);
        let x_1318 : vec4<f32> = u_xlat7;
        let x_1320 : vec4<f32> = u_xlat10;
        u_xlat17 = (vec4<f32>(x_1318.x, x_1318.x, x_1318.x, x_1318.x) * x_1320);
        let x_1323 : vec4<f32> = u_xlat7;
        let x_1325 : vec4<f32> = u_xlat10;
        u_xlat18 = (vec4<f32>(x_1323.y, x_1323.y, x_1323.y, x_1323.y) * x_1325);
        let x_1328 : vec4<f32> = u_xlat7;
        let x_1330 : vec4<f32> = u_xlat10;
        u_xlat19 = (vec4<f32>(x_1328.z, x_1328.z, x_1328.z, x_1328.z) * x_1330);
        let x_1332 : vec4<f32> = u_xlat7;
        let x_1334 : vec4<f32> = u_xlat10;
        u_xlat7 = (vec4<f32>(x_1332.w, x_1332.w, x_1332.w, x_1332.w) * x_1334);
        let x_1337 : vec4<f32> = u_xlat12;
        let x_1338 : vec2<f32> = vec2<f32>(x_1337.x, x_1337.y);
        let x_1340 : f32 = u_xlat2.z;
        txVec13 = vec3<f32>(x_1338.x, x_1338.y, x_1340);
        let x_1347 : vec3<f32> = txVec13;
        let x_1349 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_LinearClampCompare, x_1347.xy, x_1347.z);
        u_xlat80 = x_1349;
        let x_1351 : vec4<f32> = u_xlat12;
        let x_1352 : vec2<f32> = vec2<f32>(x_1351.z, x_1351.w);
        let x_1354 : f32 = u_xlat2.z;
        txVec14 = vec3<f32>(x_1352.x, x_1352.y, x_1354);
        let x_1362 : vec3<f32> = txVec14;
        let x_1364 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_LinearClampCompare, x_1362.xy, x_1362.z);
        u_xlat83 = x_1364;
        let x_1365 : f32 = u_xlat83;
        let x_1367 : f32 = u_xlat17.y;
        u_xlat83 = (x_1365 * x_1367);
        let x_1370 : f32 = u_xlat17.x;
        let x_1371 : f32 = u_xlat80;
        let x_1373 : f32 = u_xlat83;
        u_xlat80 = ((x_1370 * x_1371) + x_1373);
        let x_1376 : vec2<f32> = u_xlat55;
        let x_1378 : f32 = u_xlat2.z;
        txVec15 = vec3<f32>(x_1376.x, x_1376.y, x_1378);
        let x_1385 : vec3<f32> = txVec15;
        let x_1387 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_LinearClampCompare, x_1385.xy, x_1385.z);
        u_xlat55.x = x_1387;
        let x_1390 : f32 = u_xlat17.z;
        let x_1392 : f32 = u_xlat55.x;
        let x_1394 : f32 = u_xlat80;
        u_xlat80 = ((x_1390 * x_1392) + x_1394);
        let x_1397 : vec4<f32> = u_xlat15;
        let x_1398 : vec2<f32> = vec2<f32>(x_1397.x, x_1397.y);
        let x_1400 : f32 = u_xlat2.z;
        txVec16 = vec3<f32>(x_1398.x, x_1398.y, x_1400);
        let x_1407 : vec3<f32> = txVec16;
        let x_1409 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_LinearClampCompare, x_1407.xy, x_1407.z);
        u_xlat55.x = x_1409;
        let x_1412 : f32 = u_xlat17.w;
        let x_1414 : f32 = u_xlat55.x;
        let x_1416 : f32 = u_xlat80;
        u_xlat80 = ((x_1412 * x_1414) + x_1416);
        let x_1419 : vec4<f32> = u_xlat13;
        let x_1420 : vec2<f32> = vec2<f32>(x_1419.x, x_1419.y);
        let x_1422 : f32 = u_xlat2.z;
        txVec17 = vec3<f32>(x_1420.x, x_1420.y, x_1422);
        let x_1429 : vec3<f32> = txVec17;
        let x_1431 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_LinearClampCompare, x_1429.xy, x_1429.z);
        u_xlat55.x = x_1431;
        let x_1434 : f32 = u_xlat18.x;
        let x_1436 : f32 = u_xlat55.x;
        let x_1438 : f32 = u_xlat80;
        u_xlat80 = ((x_1434 * x_1436) + x_1438);
        let x_1441 : vec4<f32> = u_xlat13;
        let x_1442 : vec2<f32> = vec2<f32>(x_1441.z, x_1441.w);
        let x_1444 : f32 = u_xlat2.z;
        txVec18 = vec3<f32>(x_1442.x, x_1442.y, x_1444);
        let x_1451 : vec3<f32> = txVec18;
        let x_1453 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_LinearClampCompare, x_1451.xy, x_1451.z);
        u_xlat55.x = x_1453;
        let x_1456 : f32 = u_xlat18.y;
        let x_1458 : f32 = u_xlat55.x;
        let x_1460 : f32 = u_xlat80;
        u_xlat80 = ((x_1456 * x_1458) + x_1460);
        let x_1463 : vec4<f32> = u_xlat14;
        let x_1464 : vec2<f32> = vec2<f32>(x_1463.x, x_1463.y);
        let x_1466 : f32 = u_xlat2.z;
        txVec19 = vec3<f32>(x_1464.x, x_1464.y, x_1466);
        let x_1473 : vec3<f32> = txVec19;
        let x_1475 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_LinearClampCompare, x_1473.xy, x_1473.z);
        u_xlat55.x = x_1475;
        let x_1478 : f32 = u_xlat18.z;
        let x_1480 : f32 = u_xlat55.x;
        let x_1482 : f32 = u_xlat80;
        u_xlat80 = ((x_1478 * x_1480) + x_1482);
        let x_1485 : vec4<f32> = u_xlat15;
        let x_1486 : vec2<f32> = vec2<f32>(x_1485.z, x_1485.w);
        let x_1488 : f32 = u_xlat2.z;
        txVec20 = vec3<f32>(x_1486.x, x_1486.y, x_1488);
        let x_1495 : vec3<f32> = txVec20;
        let x_1497 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_LinearClampCompare, x_1495.xy, x_1495.z);
        u_xlat55.x = x_1497;
        let x_1500 : f32 = u_xlat18.w;
        let x_1502 : f32 = u_xlat55.x;
        let x_1504 : f32 = u_xlat80;
        u_xlat80 = ((x_1500 * x_1502) + x_1504);
        let x_1507 : vec4<f32> = u_xlat16;
        let x_1508 : vec2<f32> = vec2<f32>(x_1507.x, x_1507.y);
        let x_1510 : f32 = u_xlat2.z;
        txVec21 = vec3<f32>(x_1508.x, x_1508.y, x_1510);
        let x_1517 : vec3<f32> = txVec21;
        let x_1519 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_LinearClampCompare, x_1517.xy, x_1517.z);
        u_xlat55.x = x_1519;
        let x_1522 : f32 = u_xlat19.x;
        let x_1524 : f32 = u_xlat55.x;
        let x_1526 : f32 = u_xlat80;
        u_xlat80 = ((x_1522 * x_1524) + x_1526);
        let x_1529 : vec4<f32> = u_xlat16;
        let x_1530 : vec2<f32> = vec2<f32>(x_1529.z, x_1529.w);
        let x_1532 : f32 = u_xlat2.z;
        txVec22 = vec3<f32>(x_1530.x, x_1530.y, x_1532);
        let x_1539 : vec3<f32> = txVec22;
        let x_1541 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_LinearClampCompare, x_1539.xy, x_1539.z);
        u_xlat55.x = x_1541;
        let x_1544 : f32 = u_xlat19.y;
        let x_1546 : f32 = u_xlat55.x;
        let x_1548 : f32 = u_xlat80;
        u_xlat80 = ((x_1544 * x_1546) + x_1548);
        let x_1551 : vec2<f32> = u_xlat34;
        let x_1553 : f32 = u_xlat2.z;
        txVec23 = vec3<f32>(x_1551.x, x_1551.y, x_1553);
        let x_1560 : vec3<f32> = txVec23;
        let x_1562 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_LinearClampCompare, x_1560.xy, x_1560.z);
        u_xlat55.x = x_1562;
        let x_1565 : f32 = u_xlat19.z;
        let x_1567 : f32 = u_xlat55.x;
        let x_1569 : f32 = u_xlat80;
        u_xlat80 = ((x_1565 * x_1567) + x_1569);
        let x_1572 : vec2<f32> = u_xlat66;
        let x_1574 : f32 = u_xlat2.z;
        txVec24 = vec3<f32>(x_1572.x, x_1572.y, x_1574);
        let x_1581 : vec3<f32> = txVec24;
        let x_1583 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_LinearClampCompare, x_1581.xy, x_1581.z);
        u_xlat55.x = x_1583;
        let x_1586 : f32 = u_xlat19.w;
        let x_1588 : f32 = u_xlat55.x;
        let x_1590 : f32 = u_xlat80;
        u_xlat80 = ((x_1586 * x_1588) + x_1590);
        let x_1593 : vec4<f32> = u_xlat11;
        let x_1594 : vec2<f32> = vec2<f32>(x_1593.x, x_1593.y);
        let x_1596 : f32 = u_xlat2.z;
        txVec25 = vec3<f32>(x_1594.x, x_1594.y, x_1596);
        let x_1603 : vec3<f32> = txVec25;
        let x_1605 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_LinearClampCompare, x_1603.xy, x_1603.z);
        u_xlat55.x = x_1605;
        let x_1608 : f32 = u_xlat7.x;
        let x_1610 : f32 = u_xlat55.x;
        let x_1612 : f32 = u_xlat80;
        u_xlat80 = ((x_1608 * x_1610) + x_1612);
        let x_1615 : vec4<f32> = u_xlat11;
        let x_1616 : vec2<f32> = vec2<f32>(x_1615.z, x_1615.w);
        let x_1618 : f32 = u_xlat2.z;
        txVec26 = vec3<f32>(x_1616.x, x_1616.y, x_1618);
        let x_1625 : vec3<f32> = txVec26;
        let x_1627 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_LinearClampCompare, x_1625.xy, x_1625.z);
        u_xlat55.x = x_1627;
        let x_1630 : f32 = u_xlat7.y;
        let x_1632 : f32 = u_xlat55.x;
        let x_1634 : f32 = u_xlat80;
        u_xlat80 = ((x_1630 * x_1632) + x_1634);
        let x_1637 : vec2<f32> = u_xlat61;
        let x_1639 : f32 = u_xlat2.z;
        txVec27 = vec3<f32>(x_1637.x, x_1637.y, x_1639);
        let x_1646 : vec3<f32> = txVec27;
        let x_1648 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_LinearClampCompare, x_1646.xy, x_1646.z);
        u_xlat55.x = x_1648;
        let x_1651 : f32 = u_xlat7.z;
        let x_1653 : f32 = u_xlat55.x;
        let x_1655 : f32 = u_xlat80;
        u_xlat80 = ((x_1651 * x_1653) + x_1655);
        let x_1658 : vec4<f32> = u_xlat3;
        let x_1659 : vec2<f32> = vec2<f32>(x_1658.x, x_1658.y);
        let x_1661 : f32 = u_xlat2.z;
        txVec28 = vec3<f32>(x_1659.x, x_1659.y, x_1661);
        let x_1668 : vec3<f32> = txVec28;
        let x_1670 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_LinearClampCompare, x_1668.xy, x_1668.z);
        u_xlat3.x = x_1670;
        let x_1673 : f32 = u_xlat7.w;
        let x_1675 : f32 = u_xlat3.x;
        let x_1677 : f32 = u_xlat80;
        u_xlat79 = ((x_1673 * x_1675) + x_1677);
      }
    }
  } else {
    let x_1681 : vec4<f32> = u_xlat2;
    let x_1682 : vec2<f32> = vec2<f32>(x_1681.x, x_1681.y);
    let x_1684 : f32 = u_xlat2.z;
    txVec29 = vec3<f32>(x_1682.x, x_1682.y, x_1684);
    let x_1691 : vec3<f32> = txVec29;
    let x_1693 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_LinearClampCompare, x_1691.xy, x_1691.z);
    u_xlat79 = x_1693;
  }
  let x_1695 : f32 = x_246.x_MainLightShadowParams.x;
  u_xlat80 = (-(x_1695) + 1.0f);
  let x_1698 : f32 = u_xlat79;
  let x_1700 : f32 = x_246.x_MainLightShadowParams.x;
  let x_1702 : f32 = u_xlat80;
  u_xlat79 = ((x_1698 * x_1700) + x_1702);
  let x_1706 : f32 = u_xlat2.z;
  u_xlatb3 = (0.0f >= x_1706);
  let x_1710 : f32 = u_xlat2.z;
  u_xlatb29 = (x_1710 >= 1.0f);
  let x_1712 : bool = u_xlatb29;
  let x_1713 : bool = u_xlatb3;
  u_xlatb3 = (x_1712 | x_1713);
  let x_1715 : bool = u_xlatb3;
  let x_1716 : f32 = u_xlat79;
  u_xlat79 = select(x_1716, 1.0f, x_1715);
  let x_1718 : vec3<f32> = u_xlat1;
  let x_1720 : vec4<f32> = x_128.x_MainLightPosition;
  u_xlat1.x = dot(x_1718, -(vec3<f32>(x_1720.x, x_1720.y, x_1720.z)));
  let x_1726 : f32 = u_xlat1.x;
  u_xlat1.x = clamp(x_1726, 0.0f, 1.0f);
  let x_1730 : f32 = u_xlat79;
  let x_1733 : vec4<f32> = x_128.x_MainLightColor;
  u_xlat27 = (vec3<f32>(x_1730, x_1730, x_1730) * vec3<f32>(x_1733.x, x_1733.y, x_1733.z));
  let x_1736 : vec3<f32> = u_xlat27;
  let x_1737 : vec3<f32> = u_xlat1;
  u_xlat1 = (x_1736 * vec3<f32>(x_1737.x, x_1737.x, x_1737.x));
  let x_1740 : vec3<f32> = u_xlat1;
  let x_1741 : vec4<f32> = u_xlat4;
  u_xlat1 = (x_1740 * vec3<f32>(x_1741.x, x_1741.y, x_1741.z));
  let x_1745 : f32 = u_xlat4.w;
  u_xlatb79 = (x_1745 >= 0.40000000596046447754f);
  let x_1748 : bool = u_xlatb79;
  if (x_1748) {
    let x_1754 : f32 = u_xlat4.w;
    x_1750 = x_1754;
  } else {
    x_1750 = 0.0f;
  }
  let x_1756 : f32 = x_1750;
  u_xlat79 = x_1756;
  let x_1758 : f32 = u_xlat4.w;
  u_xlat29 = (x_1758 + -0.40000000596046447754f);
  let x_1762 : f32 = u_xlat4.w;
  u_xlat55.x = dpdxCoarse(x_1762);
  let x_1767 : f32 = u_xlat4.w;
  u_xlat81 = dpdyCoarse(x_1767);
  let x_1769 : f32 = u_xlat81;
  let x_1772 : f32 = u_xlat55.x;
  u_xlat55.x = (abs(x_1769) + abs(x_1772));
  let x_1777 : f32 = u_xlat55.x;
  u_xlat55.x = max(x_1777, 0.00009999999747378752f);
  let x_1781 : f32 = u_xlat29;
  let x_1783 : f32 = u_xlat55.x;
  u_xlat29 = (x_1781 / x_1783);
  let x_1785 : f32 = u_xlat29;
  u_xlat29 = (x_1785 + 0.5f);
  let x_1787 : f32 = u_xlat29;
  u_xlat29 = clamp(x_1787, 0.0f, 1.0f);
  let x_1791 : f32 = x_128.x_AlphaToMaskAvailable;
  u_xlatb55 = !((x_1791 == 0.0f));
  let x_1793 : bool = u_xlatb55;
  let x_1794 : f32 = u_xlat29;
  let x_1795 : f32 = u_xlat79;
  u_xlat79 = select(x_1795, x_1794, x_1793);
  let x_1797 : f32 = u_xlat79;
  u_xlat29 = (x_1797 + -0.00009999999747378752f);
  let x_1800 : f32 = u_xlat29;
  u_xlatb29 = (x_1800 < 0.0f);
  let x_1802 : bool = u_xlatb29;
  if (((select(0i, 1i, x_1802) * -1i) != 0i)) {
    discard;
  }
  let x_1810 : vec3<f32> = u_xlat26;
  let x_1811 : vec3<f32> = u_xlat32;
  u_xlat26 = (x_1810 * vec3<f32>(x_1811.y, x_1811.y, x_1811.y));
  let x_1814 : vec3<f32> = u_xlat32;
  let x_1816 : vec4<f32> = vs_INTERP4;
  let x_1819 : vec3<f32> = u_xlat26;
  u_xlat26 = ((vec3<f32>(x_1814.x, x_1814.x, x_1814.x) * vec3<f32>(x_1816.x, x_1816.y, x_1816.z)) + x_1819);
  let x_1821 : vec3<f32> = u_xlat32;
  let x_1823 : vec3<f32> = vs_INTERP9;
  let x_1825 : vec3<f32> = u_xlat26;
  u_xlat26 = ((vec3<f32>(x_1821.z, x_1821.z, x_1821.z) * x_1823) + x_1825);
  let x_1827 : vec3<f32> = u_xlat26;
  let x_1828 : vec3<f32> = u_xlat26;
  u_xlat29 = dot(x_1827, x_1828);
  let x_1830 : f32 = u_xlat29;
  u_xlat29 = inverseSqrt(x_1830);
  let x_1832 : vec3<f32> = u_xlat26;
  let x_1833 : f32 = u_xlat29;
  u_xlat26 = (x_1832 * vec3<f32>(x_1833, x_1833, x_1833));
  let x_1837 : f32 = x_128.unity_OrthoParams.w;
  u_xlatb29 = (x_1837 == 0.0f);
  let x_1839 : vec3<f32> = vs_INTERP8;
  let x_1843 : vec3<f32> = x_128.x_WorldSpaceCameraPos;
  let x_1844 : vec3<f32> = (-(x_1839) + x_1843);
  let x_1845 : vec4<f32> = u_xlat4;
  u_xlat4 = vec4<f32>(x_1844.x, x_1844.y, x_1844.z, x_1845.w);
  let x_1847 : vec4<f32> = u_xlat4;
  let x_1849 : vec4<f32> = u_xlat4;
  u_xlat81 = dot(vec3<f32>(x_1847.x, x_1847.y, x_1847.z), vec3<f32>(x_1849.x, x_1849.y, x_1849.z));
  let x_1852 : f32 = u_xlat81;
  u_xlat81 = inverseSqrt(x_1852);
  let x_1854 : f32 = u_xlat81;
  let x_1856 : vec4<f32> = u_xlat4;
  let x_1858 : vec3<f32> = (vec3<f32>(x_1854, x_1854, x_1854) * vec3<f32>(x_1856.x, x_1856.y, x_1856.z));
  let x_1859 : vec4<f32> = u_xlat4;
  u_xlat4 = vec4<f32>(x_1858.x, x_1858.y, x_1858.z, x_1859.w);
  let x_1863 : f32 = x_128.unity_MatrixV[0i].z;
  u_xlat7.x = x_1863;
  let x_1866 : f32 = x_128.unity_MatrixV[1i].z;
  u_xlat7.y = x_1866;
  let x_1869 : f32 = x_128.unity_MatrixV[2i].z;
  u_xlat7.z = x_1869;
  let x_1871 : bool = u_xlatb29;
  if (x_1871) {
    let x_1875 : vec4<f32> = u_xlat4;
    x_1872 = vec3<f32>(x_1875.x, x_1875.y, x_1875.z);
  } else {
    let x_1878 : vec4<f32> = u_xlat7;
    x_1872 = vec3<f32>(x_1878.x, x_1878.y, x_1878.z);
  }
  let x_1880 : vec3<f32> = x_1872;
  let x_1881 : vec4<f32> = u_xlat4;
  u_xlat4 = vec4<f32>(x_1880.x, x_1880.y, x_1880.z, x_1881.w);
  let x_1884 : f32 = vs_INTERP8.y;
  let x_1886 : f32 = x_128.unity_MatrixV[1i].z;
  u_xlat29 = (x_1884 * x_1886);
  let x_1889 : f32 = x_128.unity_MatrixV[0i].z;
  let x_1891 : f32 = vs_INTERP8.x;
  let x_1893 : f32 = u_xlat29;
  u_xlat29 = ((x_1889 * x_1891) + x_1893);
  let x_1896 : f32 = x_128.unity_MatrixV[2i].z;
  let x_1898 : f32 = vs_INTERP8.z;
  let x_1900 : f32 = u_xlat29;
  u_xlat29 = ((x_1896 * x_1898) + x_1900);
  let x_1902 : f32 = u_xlat29;
  let x_1904 : f32 = x_128.unity_MatrixV[3i].z;
  u_xlat29 = (x_1902 + x_1904);
  let x_1906 : f32 = u_xlat29;
  let x_1909 : f32 = x_128.x_ProjectionParams.y;
  u_xlat29 = (-(x_1906) + -(x_1909));
  let x_1912 : f32 = u_xlat29;
  u_xlat29 = max(x_1912, 0.0f);
  let x_1914 : f32 = u_xlat29;
  let x_1916 : f32 = x_128.unity_FogParams.x;
  u_xlat29 = (x_1914 * x_1916);
  let x_1925 : vec2<f32> = vs_INTERP0;
  let x_1927 : f32 = x_128.x_GlobalMipBias.x;
  let x_1928 : vec4<f32> = textureSampleBias(unity_LightmapInd, samplerunity_Lightmap, x_1925, x_1927);
  u_xlat7 = x_1928;
  let x_1933 : vec2<f32> = vs_INTERP0;
  let x_1935 : f32 = x_128.x_GlobalMipBias.x;
  let x_1936 : vec4<f32> = textureSampleBias(unity_Lightmap, samplerunity_Lightmap, x_1933, x_1935);
  u_xlat32 = vec3<f32>(x_1936.x, x_1936.y, x_1936.z);
  let x_1938 : vec4<f32> = u_xlat7;
  let x_1941 : vec3<f32> = (vec3<f32>(x_1938.x, x_1938.y, x_1938.z) + vec3<f32>(-0.5f, -0.5f, -0.5f));
  let x_1942 : vec4<f32> = u_xlat7;
  u_xlat7 = vec4<f32>(x_1941.x, x_1941.y, x_1941.z, x_1942.w);
  let x_1944 : vec3<f32> = u_xlat26;
  let x_1945 : vec4<f32> = u_xlat7;
  u_xlat81 = dot(x_1944, vec3<f32>(x_1945.x, x_1945.y, x_1945.z));
  let x_1948 : f32 = u_xlat81;
  u_xlat81 = (x_1948 + 0.5f);
  let x_1950 : f32 = u_xlat81;
  let x_1952 : vec3<f32> = u_xlat32;
  u_xlat32 = (vec3<f32>(x_1950, x_1950, x_1950) * x_1952);
  let x_1955 : f32 = u_xlat7.w;
  u_xlat81 = max(x_1955, 0.00009999999747378752f);
  let x_1957 : vec3<f32> = u_xlat32;
  let x_1958 : f32 = u_xlat81;
  u_xlat32 = (x_1957 / vec3<f32>(x_1958, x_1958, x_1958));
  let x_1962 : f32 = u_xlat6.x;
  u_xlat6.x = x_1962;
  let x_1965 : f32 = u_xlat6.x;
  u_xlat6.x = clamp(x_1965, 0.0f, 1.0f);
  let x_1968 : f32 = u_xlat79;
  u_xlat79 = min(x_1968, 1.0f);
  let x_1970 : vec3<f32> = u_xlat5;
  u_xlat5 = (x_1970 * vec3<f32>(0.95999997854232788086f, 0.95999997854232788086f, 0.95999997854232788086f));
  let x_1975 : f32 = u_xlat6.x;
  u_xlat81 = (-(x_1975) + 1.0f);
  let x_1979 : f32 = u_xlat81;
  let x_1980 : f32 = u_xlat81;
  u_xlat82 = (x_1979 * x_1980);
  let x_1982 : f32 = u_xlat82;
  u_xlat82 = max(x_1982, 0.0078125f);
  let x_1985 : f32 = u_xlat82;
  let x_1986 : f32 = u_xlat82;
  u_xlat83 = (x_1985 * x_1986);
  let x_1989 : f32 = u_xlat6.x;
  u_xlat6.x = (x_1989 + 0.04000002145767211914f);
  let x_1994 : f32 = u_xlat6.x;
  u_xlat6.x = min(x_1994, 1.0f);
  let x_1997 : f32 = u_xlat82;
  u_xlat7.x = ((x_1997 * 4.0f) + 2.0f);
  let x_2002 : f32 = vs_INTERP6.w;
  u_xlat33.x = min(x_2002, 1.0f);
  let x_2005 : bool = u_xlatb0;
  if (x_2005) {
    let x_2009 : f32 = x_246.x_MainLightShadowParams.y;
    u_xlatb0 = (x_2009 == 1.0f);
    let x_2011 : bool = u_xlatb0;
    if (x_2011) {
      let x_2014 : vec4<f32> = u_xlat2;
      let x_2017 : vec4<f32> = x_246.x_MainLightShadowOffset0;
      u_xlat8 = (vec4<f32>(x_2014.x, x_2014.y, x_2014.x, x_2014.y) + x_2017);
      let x_2020 : vec4<f32> = u_xlat8;
      let x_2021 : vec2<f32> = vec2<f32>(x_2020.x, x_2020.y);
      let x_2023 : f32 = u_xlat2.z;
      txVec30 = vec3<f32>(x_2021.x, x_2021.y, x_2023);
      let x_2030 : vec3<f32> = txVec30;
      let x_2032 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_LinearClampCompare, x_2030.xy, x_2030.z);
      u_xlat9.x = x_2032;
      let x_2035 : vec4<f32> = u_xlat8;
      let x_2036 : vec2<f32> = vec2<f32>(x_2035.z, x_2035.w);
      let x_2038 : f32 = u_xlat2.z;
      txVec31 = vec3<f32>(x_2036.x, x_2036.y, x_2038);
      let x_2045 : vec3<f32> = txVec31;
      let x_2047 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_LinearClampCompare, x_2045.xy, x_2045.z);
      u_xlat9.y = x_2047;
      let x_2049 : vec4<f32> = u_xlat2;
      let x_2052 : vec4<f32> = x_246.x_MainLightShadowOffset1;
      u_xlat8 = (vec4<f32>(x_2049.x, x_2049.y, x_2049.x, x_2049.y) + x_2052);
      let x_2055 : vec4<f32> = u_xlat8;
      let x_2056 : vec2<f32> = vec2<f32>(x_2055.x, x_2055.y);
      let x_2058 : f32 = u_xlat2.z;
      txVec32 = vec3<f32>(x_2056.x, x_2056.y, x_2058);
      let x_2065 : vec3<f32> = txVec32;
      let x_2067 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_LinearClampCompare, x_2065.xy, x_2065.z);
      u_xlat9.z = x_2067;
      let x_2070 : vec4<f32> = u_xlat8;
      let x_2071 : vec2<f32> = vec2<f32>(x_2070.z, x_2070.w);
      let x_2073 : f32 = u_xlat2.z;
      txVec33 = vec3<f32>(x_2071.x, x_2071.y, x_2073);
      let x_2080 : vec3<f32> = txVec33;
      let x_2082 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_LinearClampCompare, x_2080.xy, x_2080.z);
      u_xlat9.w = x_2082;
      let x_2084 : vec4<f32> = u_xlat9;
      u_xlat0.x = dot(x_2084, vec4<f32>(0.25f, 0.25f, 0.25f, 0.25f));
    } else {
      let x_2090 : f32 = x_246.x_MainLightShadowParams.y;
      u_xlatb59 = (x_2090 == 2.0f);
      let x_2092 : bool = u_xlatb59;
      if (x_2092) {
        let x_2096 : vec4<f32> = u_xlat2;
        let x_2099 : vec4<f32> = x_246.x_MainLightShadowmapSize;
        u_xlat59 = ((vec2<f32>(x_2096.x, x_2096.y) * vec2<f32>(x_2099.z, x_2099.w)) + vec2<f32>(0.5f, 0.5f));
        let x_2103 : vec2<f32> = u_xlat59;
        u_xlat59 = floor(x_2103);
        let x_2105 : vec4<f32> = u_xlat2;
        let x_2108 : vec4<f32> = x_246.x_MainLightShadowmapSize;
        let x_2111 : vec2<f32> = u_xlat59;
        let x_2113 : vec2<f32> = ((vec2<f32>(x_2105.x, x_2105.y) * vec2<f32>(x_2108.z, x_2108.w)) + -(x_2111));
        let x_2114 : vec4<f32> = u_xlat8;
        u_xlat8 = vec4<f32>(x_2113.x, x_2113.y, x_2114.z, x_2114.w);
        let x_2116 : vec4<f32> = u_xlat8;
        u_xlat9 = (vec4<f32>(x_2116.x, x_2116.x, x_2116.y, x_2116.y) + vec4<f32>(0.5f, 1.0f, 0.5f, 1.0f));
        let x_2119 : vec4<f32> = u_xlat9;
        let x_2121 : vec4<f32> = u_xlat9;
        u_xlat10 = (vec4<f32>(x_2119.x, x_2119.x, x_2119.z, x_2119.z) * vec4<f32>(x_2121.x, x_2121.x, x_2121.z, x_2121.z));
        let x_2124 : vec4<f32> = u_xlat10;
        u_xlat60 = (vec2<f32>(x_2124.y, x_2124.w) * vec2<f32>(0.07999999821186065674f, 0.07999999821186065674f));
        let x_2127 : vec4<f32> = u_xlat10;
        let x_2130 : vec4<f32> = u_xlat8;
        let x_2133 : vec2<f32> = ((vec2<f32>(x_2127.x, x_2127.z) * vec2<f32>(0.5f, 0.5f)) + -(vec2<f32>(x_2130.x, x_2130.y)));
        let x_2134 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_2133.x, x_2134.y, x_2133.y, x_2134.w);
        let x_2136 : vec4<f32> = u_xlat8;
        let x_2139 : vec2<f32> = (-(vec2<f32>(x_2136.x, x_2136.y)) + vec2<f32>(1.0f, 1.0f));
        let x_2140 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_2139.x, x_2139.y, x_2140.z, x_2140.w);
        let x_2143 : vec4<f32> = u_xlat8;
        u_xlat62 = min(vec2<f32>(x_2143.x, x_2143.y), vec2<f32>(0.0f, 0.0f));
        let x_2146 : vec2<f32> = u_xlat62;
        let x_2148 : vec2<f32> = u_xlat62;
        let x_2150 : vec4<f32> = u_xlat10;
        u_xlat62 = ((-(x_2146) * x_2148) + vec2<f32>(x_2150.x, x_2150.y));
        let x_2153 : vec4<f32> = u_xlat8;
        let x_2155 : vec2<f32> = max(vec2<f32>(x_2153.x, x_2153.y), vec2<f32>(0.0f, 0.0f));
        let x_2156 : vec4<f32> = u_xlat8;
        u_xlat8 = vec4<f32>(x_2155.x, x_2155.y, x_2156.z, x_2156.w);
        let x_2158 : vec4<f32> = u_xlat8;
        let x_2161 : vec4<f32> = u_xlat8;
        let x_2164 : vec4<f32> = u_xlat9;
        let x_2166 : vec2<f32> = ((-(vec2<f32>(x_2158.x, x_2158.y)) * vec2<f32>(x_2161.x, x_2161.y)) + vec2<f32>(x_2164.y, x_2164.w));
        let x_2167 : vec4<f32> = u_xlat8;
        u_xlat8 = vec4<f32>(x_2166.x, x_2166.y, x_2167.z, x_2167.w);
        let x_2169 : vec2<f32> = u_xlat62;
        u_xlat62 = (x_2169 + vec2<f32>(1.0f, 1.0f));
        let x_2171 : vec4<f32> = u_xlat8;
        let x_2173 : vec2<f32> = (vec2<f32>(x_2171.x, x_2171.y) + vec2<f32>(1.0f, 1.0f));
        let x_2174 : vec4<f32> = u_xlat8;
        u_xlat8 = vec4<f32>(x_2173.x, x_2173.y, x_2174.z, x_2174.w);
        let x_2176 : vec4<f32> = u_xlat9;
        let x_2178 : vec2<f32> = (vec2<f32>(x_2176.x, x_2176.z) * vec2<f32>(0.15999999642372131348f, 0.15999999642372131348f));
        let x_2179 : vec4<f32> = u_xlat11;
        u_xlat11 = vec4<f32>(x_2178.x, x_2178.y, x_2179.z, x_2179.w);
        let x_2181 : vec4<f32> = u_xlat10;
        let x_2183 : vec2<f32> = (vec2<f32>(x_2181.x, x_2181.y) * vec2<f32>(0.15999999642372131348f, 0.15999999642372131348f));
        let x_2184 : vec4<f32> = u_xlat12;
        u_xlat12 = vec4<f32>(x_2183.x, x_2183.y, x_2184.z, x_2184.w);
        let x_2186 : vec2<f32> = u_xlat62;
        let x_2187 : vec2<f32> = (x_2186 * vec2<f32>(0.15999999642372131348f, 0.15999999642372131348f));
        let x_2188 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_2187.x, x_2187.y, x_2188.z, x_2188.w);
        let x_2190 : vec4<f32> = u_xlat8;
        let x_2192 : vec2<f32> = (vec2<f32>(x_2190.x, x_2190.y) * vec2<f32>(0.15999999642372131348f, 0.15999999642372131348f));
        let x_2193 : vec4<f32> = u_xlat13;
        u_xlat13 = vec4<f32>(x_2192.x, x_2192.y, x_2193.z, x_2193.w);
        let x_2195 : vec4<f32> = u_xlat9;
        let x_2197 : vec2<f32> = (vec2<f32>(x_2195.y, x_2195.w) * vec2<f32>(0.15999999642372131348f, 0.15999999642372131348f));
        let x_2198 : vec4<f32> = u_xlat8;
        u_xlat8 = vec4<f32>(x_2197.x, x_2197.y, x_2198.z, x_2198.w);
        let x_2201 : f32 = u_xlat10.x;
        u_xlat11.z = x_2201;
        let x_2204 : f32 = u_xlat8.x;
        u_xlat11.w = x_2204;
        let x_2207 : f32 = u_xlat13.x;
        u_xlat12.z = x_2207;
        let x_2210 : f32 = u_xlat60.x;
        u_xlat12.w = x_2210;
        let x_2212 : vec4<f32> = u_xlat11;
        let x_2214 : vec4<f32> = u_xlat12;
        u_xlat9 = (vec4<f32>(x_2212.z, x_2212.w, x_2212.x, x_2212.z) + vec4<f32>(x_2214.z, x_2214.w, x_2214.x, x_2214.z));
        let x_2218 : f32 = u_xlat11.y;
        u_xlat10.z = x_2218;
        let x_2221 : f32 = u_xlat8.y;
        u_xlat10.w = x_2221;
        let x_2224 : f32 = u_xlat12.y;
        u_xlat13.z = x_2224;
        let x_2227 : f32 = u_xlat60.y;
        u_xlat13.w = x_2227;
        let x_2229 : vec4<f32> = u_xlat10;
        let x_2231 : vec4<f32> = u_xlat13;
        let x_2233 : vec3<f32> = (vec3<f32>(x_2229.z, x_2229.y, x_2229.w) + vec3<f32>(x_2231.z, x_2231.y, x_2231.w));
        let x_2234 : vec4<f32> = u_xlat8;
        u_xlat8 = vec4<f32>(x_2233.x, x_2233.y, x_2233.z, x_2234.w);
        let x_2236 : vec4<f32> = u_xlat12;
        let x_2238 : vec4<f32> = u_xlat9;
        let x_2240 : vec3<f32> = (vec3<f32>(x_2236.x, x_2236.z, x_2236.w) / vec3<f32>(x_2238.z, x_2238.w, x_2238.y));
        let x_2241 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_2240.x, x_2240.y, x_2240.z, x_2241.w);
        let x_2243 : vec4<f32> = u_xlat10;
        let x_2245 : vec3<f32> = (vec3<f32>(x_2243.x, x_2243.y, x_2243.z) + vec3<f32>(-2.5f, -0.5f, 1.5f));
        let x_2246 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_2245.x, x_2245.y, x_2245.z, x_2246.w);
        let x_2248 : vec4<f32> = u_xlat13;
        let x_2250 : vec4<f32> = u_xlat8;
        let x_2252 : vec3<f32> = (vec3<f32>(x_2248.z, x_2248.y, x_2248.w) / vec3<f32>(x_2250.x, x_2250.y, x_2250.z));
        let x_2253 : vec4<f32> = u_xlat11;
        u_xlat11 = vec4<f32>(x_2252.x, x_2252.y, x_2252.z, x_2253.w);
        let x_2255 : vec4<f32> = u_xlat11;
        let x_2257 : vec3<f32> = (vec3<f32>(x_2255.x, x_2255.y, x_2255.z) + vec3<f32>(-2.5f, -0.5f, 1.5f));
        let x_2258 : vec4<f32> = u_xlat11;
        u_xlat11 = vec4<f32>(x_2257.x, x_2257.y, x_2257.z, x_2258.w);
        let x_2260 : vec4<f32> = u_xlat10;
        let x_2263 : vec4<f32> = x_246.x_MainLightShadowmapSize;
        let x_2265 : vec3<f32> = (vec3<f32>(x_2260.y, x_2260.x, x_2260.z) * vec3<f32>(x_2263.x, x_2263.x, x_2263.x));
        let x_2266 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_2265.x, x_2265.y, x_2265.z, x_2266.w);
        let x_2268 : vec4<f32> = u_xlat11;
        let x_2271 : vec4<f32> = x_246.x_MainLightShadowmapSize;
        let x_2273 : vec3<f32> = (vec3<f32>(x_2268.x, x_2268.y, x_2268.z) * vec3<f32>(x_2271.y, x_2271.y, x_2271.y));
        let x_2274 : vec4<f32> = u_xlat11;
        u_xlat11 = vec4<f32>(x_2273.x, x_2273.y, x_2273.z, x_2274.w);
        let x_2277 : f32 = u_xlat11.x;
        u_xlat10.w = x_2277;
        let x_2279 : vec2<f32> = u_xlat59;
        let x_2282 : vec4<f32> = x_246.x_MainLightShadowmapSize;
        let x_2285 : vec4<f32> = u_xlat10;
        u_xlat12 = ((vec4<f32>(x_2279.x, x_2279.y, x_2279.x, x_2279.y) * vec4<f32>(x_2282.x, x_2282.y, x_2282.x, x_2282.y)) + vec4<f32>(x_2285.y, x_2285.w, x_2285.x, x_2285.w));
        let x_2288 : vec2<f32> = u_xlat59;
        let x_2290 : vec4<f32> = x_246.x_MainLightShadowmapSize;
        let x_2293 : vec4<f32> = u_xlat10;
        let x_2295 : vec2<f32> = ((x_2288 * vec2<f32>(x_2290.x, x_2290.y)) + vec2<f32>(x_2293.z, x_2293.w));
        let x_2296 : vec4<f32> = u_xlat13;
        u_xlat13 = vec4<f32>(x_2295.x, x_2295.y, x_2296.z, x_2296.w);
        let x_2299 : f32 = u_xlat10.y;
        u_xlat11.w = x_2299;
        let x_2301 : vec4<f32> = u_xlat11;
        let x_2302 : vec2<f32> = vec2<f32>(x_2301.y, x_2301.z);
        let x_2303 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_2303.x, x_2302.x, x_2303.z, x_2302.y);
        let x_2305 : vec2<f32> = u_xlat59;
        let x_2308 : vec4<f32> = x_246.x_MainLightShadowmapSize;
        let x_2311 : vec4<f32> = u_xlat10;
        u_xlat14 = ((vec4<f32>(x_2305.x, x_2305.y, x_2305.x, x_2305.y) * vec4<f32>(x_2308.x, x_2308.y, x_2308.x, x_2308.y)) + vec4<f32>(x_2311.x, x_2311.y, x_2311.z, x_2311.y));
        let x_2314 : vec2<f32> = u_xlat59;
        let x_2317 : vec4<f32> = x_246.x_MainLightShadowmapSize;
        let x_2320 : vec4<f32> = u_xlat11;
        u_xlat11 = ((vec4<f32>(x_2314.x, x_2314.y, x_2314.x, x_2314.y) * vec4<f32>(x_2317.x, x_2317.y, x_2317.x, x_2317.y)) + vec4<f32>(x_2320.w, x_2320.y, x_2320.w, x_2320.z));
        let x_2323 : vec2<f32> = u_xlat59;
        let x_2326 : vec4<f32> = x_246.x_MainLightShadowmapSize;
        let x_2329 : vec4<f32> = u_xlat10;
        u_xlat10 = ((vec4<f32>(x_2323.x, x_2323.y, x_2323.x, x_2323.y) * vec4<f32>(x_2326.x, x_2326.y, x_2326.x, x_2326.y)) + vec4<f32>(x_2329.x, x_2329.w, x_2329.z, x_2329.w));
        let x_2332 : vec4<f32> = u_xlat8;
        let x_2334 : vec4<f32> = u_xlat9;
        u_xlat15 = (vec4<f32>(x_2332.x, x_2332.x, x_2332.x, x_2332.y) * vec4<f32>(x_2334.z, x_2334.w, x_2334.y, x_2334.z));
        let x_2337 : vec4<f32> = u_xlat8;
        let x_2339 : vec4<f32> = u_xlat9;
        u_xlat16 = (vec4<f32>(x_2337.y, x_2337.y, x_2337.z, x_2337.z) * x_2339);
        let x_2342 : f32 = u_xlat8.z;
        let x_2344 : f32 = u_xlat9.y;
        u_xlat59.x = (x_2342 * x_2344);
        let x_2348 : vec4<f32> = u_xlat12;
        let x_2349 : vec2<f32> = vec2<f32>(x_2348.x, x_2348.y);
        let x_2351 : f32 = u_xlat2.z;
        txVec34 = vec3<f32>(x_2349.x, x_2349.y, x_2351);
        let x_2359 : vec3<f32> = txVec34;
        let x_2361 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_LinearClampCompare, x_2359.xy, x_2359.z);
        u_xlat85 = x_2361;
        let x_2363 : vec4<f32> = u_xlat12;
        let x_2364 : vec2<f32> = vec2<f32>(x_2363.z, x_2363.w);
        let x_2366 : f32 = u_xlat2.z;
        txVec35 = vec3<f32>(x_2364.x, x_2364.y, x_2366);
        let x_2373 : vec3<f32> = txVec35;
        let x_2375 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_LinearClampCompare, x_2373.xy, x_2373.z);
        u_xlat8.x = x_2375;
        let x_2378 : f32 = u_xlat8.x;
        let x_2380 : f32 = u_xlat15.y;
        u_xlat8.x = (x_2378 * x_2380);
        let x_2384 : f32 = u_xlat15.x;
        let x_2385 : f32 = u_xlat85;
        let x_2388 : f32 = u_xlat8.x;
        u_xlat85 = ((x_2384 * x_2385) + x_2388);
        let x_2391 : vec4<f32> = u_xlat13;
        let x_2392 : vec2<f32> = vec2<f32>(x_2391.x, x_2391.y);
        let x_2394 : f32 = u_xlat2.z;
        txVec36 = vec3<f32>(x_2392.x, x_2392.y, x_2394);
        let x_2401 : vec3<f32> = txVec36;
        let x_2403 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_LinearClampCompare, x_2401.xy, x_2401.z);
        u_xlat8.x = x_2403;
        let x_2406 : f32 = u_xlat15.z;
        let x_2408 : f32 = u_xlat8.x;
        let x_2410 : f32 = u_xlat85;
        u_xlat85 = ((x_2406 * x_2408) + x_2410);
        let x_2413 : vec4<f32> = u_xlat11;
        let x_2414 : vec2<f32> = vec2<f32>(x_2413.x, x_2413.y);
        let x_2416 : f32 = u_xlat2.z;
        txVec37 = vec3<f32>(x_2414.x, x_2414.y, x_2416);
        let x_2423 : vec3<f32> = txVec37;
        let x_2425 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_LinearClampCompare, x_2423.xy, x_2423.z);
        u_xlat8.x = x_2425;
        let x_2428 : f32 = u_xlat15.w;
        let x_2430 : f32 = u_xlat8.x;
        let x_2432 : f32 = u_xlat85;
        u_xlat85 = ((x_2428 * x_2430) + x_2432);
        let x_2435 : vec4<f32> = u_xlat14;
        let x_2436 : vec2<f32> = vec2<f32>(x_2435.x, x_2435.y);
        let x_2438 : f32 = u_xlat2.z;
        txVec38 = vec3<f32>(x_2436.x, x_2436.y, x_2438);
        let x_2445 : vec3<f32> = txVec38;
        let x_2447 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_LinearClampCompare, x_2445.xy, x_2445.z);
        u_xlat8.x = x_2447;
        let x_2450 : f32 = u_xlat16.x;
        let x_2452 : f32 = u_xlat8.x;
        let x_2454 : f32 = u_xlat85;
        u_xlat85 = ((x_2450 * x_2452) + x_2454);
        let x_2457 : vec4<f32> = u_xlat14;
        let x_2458 : vec2<f32> = vec2<f32>(x_2457.z, x_2457.w);
        let x_2460 : f32 = u_xlat2.z;
        txVec39 = vec3<f32>(x_2458.x, x_2458.y, x_2460);
        let x_2467 : vec3<f32> = txVec39;
        let x_2469 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_LinearClampCompare, x_2467.xy, x_2467.z);
        u_xlat8.x = x_2469;
        let x_2472 : f32 = u_xlat16.y;
        let x_2474 : f32 = u_xlat8.x;
        let x_2476 : f32 = u_xlat85;
        u_xlat85 = ((x_2472 * x_2474) + x_2476);
        let x_2479 : vec4<f32> = u_xlat11;
        let x_2480 : vec2<f32> = vec2<f32>(x_2479.z, x_2479.w);
        let x_2482 : f32 = u_xlat2.z;
        txVec40 = vec3<f32>(x_2480.x, x_2480.y, x_2482);
        let x_2489 : vec3<f32> = txVec40;
        let x_2491 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_LinearClampCompare, x_2489.xy, x_2489.z);
        u_xlat8.x = x_2491;
        let x_2494 : f32 = u_xlat16.z;
        let x_2496 : f32 = u_xlat8.x;
        let x_2498 : f32 = u_xlat85;
        u_xlat85 = ((x_2494 * x_2496) + x_2498);
        let x_2501 : vec4<f32> = u_xlat10;
        let x_2502 : vec2<f32> = vec2<f32>(x_2501.x, x_2501.y);
        let x_2504 : f32 = u_xlat2.z;
        txVec41 = vec3<f32>(x_2502.x, x_2502.y, x_2504);
        let x_2511 : vec3<f32> = txVec41;
        let x_2513 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_LinearClampCompare, x_2511.xy, x_2511.z);
        u_xlat8.x = x_2513;
        let x_2516 : f32 = u_xlat16.w;
        let x_2518 : f32 = u_xlat8.x;
        let x_2520 : f32 = u_xlat85;
        u_xlat85 = ((x_2516 * x_2518) + x_2520);
        let x_2523 : vec4<f32> = u_xlat10;
        let x_2524 : vec2<f32> = vec2<f32>(x_2523.z, x_2523.w);
        let x_2526 : f32 = u_xlat2.z;
        txVec42 = vec3<f32>(x_2524.x, x_2524.y, x_2526);
        let x_2533 : vec3<f32> = txVec42;
        let x_2535 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_LinearClampCompare, x_2533.xy, x_2533.z);
        u_xlat8.x = x_2535;
        let x_2538 : f32 = u_xlat59.x;
        let x_2540 : f32 = u_xlat8.x;
        let x_2542 : f32 = u_xlat85;
        u_xlat0.x = ((x_2538 * x_2540) + x_2542);
      } else {
        let x_2546 : vec4<f32> = u_xlat2;
        let x_2549 : vec4<f32> = x_246.x_MainLightShadowmapSize;
        u_xlat59 = ((vec2<f32>(x_2546.x, x_2546.y) * vec2<f32>(x_2549.z, x_2549.w)) + vec2<f32>(0.5f, 0.5f));
        let x_2553 : vec2<f32> = u_xlat59;
        u_xlat59 = floor(x_2553);
        let x_2555 : vec4<f32> = u_xlat2;
        let x_2558 : vec4<f32> = x_246.x_MainLightShadowmapSize;
        let x_2561 : vec2<f32> = u_xlat59;
        let x_2563 : vec2<f32> = ((vec2<f32>(x_2555.x, x_2555.y) * vec2<f32>(x_2558.z, x_2558.w)) + -(x_2561));
        let x_2564 : vec4<f32> = u_xlat8;
        u_xlat8 = vec4<f32>(x_2563.x, x_2563.y, x_2564.z, x_2564.w);
        let x_2566 : vec4<f32> = u_xlat8;
        u_xlat9 = (vec4<f32>(x_2566.x, x_2566.x, x_2566.y, x_2566.y) + vec4<f32>(0.5f, 1.0f, 0.5f, 1.0f));
        let x_2569 : vec4<f32> = u_xlat9;
        let x_2571 : vec4<f32> = u_xlat9;
        u_xlat10 = (vec4<f32>(x_2569.x, x_2569.x, x_2569.z, x_2569.z) * vec4<f32>(x_2571.x, x_2571.x, x_2571.z, x_2571.z));
        let x_2574 : vec4<f32> = u_xlat10;
        let x_2576 : vec2<f32> = (vec2<f32>(x_2574.y, x_2574.w) * vec2<f32>(0.04081600159406661987f, 0.04081600159406661987f));
        let x_2577 : vec4<f32> = u_xlat11;
        u_xlat11 = vec4<f32>(x_2577.x, x_2576.x, x_2577.z, x_2576.y);
        let x_2579 : vec4<f32> = u_xlat10;
        let x_2582 : vec4<f32> = u_xlat8;
        u_xlat60 = ((vec2<f32>(x_2579.x, x_2579.z) * vec2<f32>(0.5f, 0.5f)) + -(vec2<f32>(x_2582.x, x_2582.y)));
        let x_2586 : vec4<f32> = u_xlat8;
        let x_2589 : vec2<f32> = (-(vec2<f32>(x_2586.x, x_2586.y)) + vec2<f32>(1.0f, 1.0f));
        let x_2590 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_2589.x, x_2590.y, x_2589.y, x_2590.w);
        let x_2592 : vec4<f32> = u_xlat8;
        let x_2594 : vec2<f32> = min(vec2<f32>(x_2592.x, x_2592.y), vec2<f32>(0.0f, 0.0f));
        let x_2595 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_2594.x, x_2594.y, x_2595.z, x_2595.w);
        let x_2597 : vec4<f32> = u_xlat10;
        let x_2600 : vec4<f32> = u_xlat10;
        let x_2603 : vec4<f32> = u_xlat9;
        let x_2605 : vec2<f32> = ((-(vec2<f32>(x_2597.x, x_2597.y)) * vec2<f32>(x_2600.x, x_2600.y)) + vec2<f32>(x_2603.x, x_2603.z));
        let x_2606 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_2605.x, x_2606.y, x_2605.y, x_2606.w);
        let x_2608 : vec4<f32> = u_xlat8;
        let x_2610 : vec2<f32> = max(vec2<f32>(x_2608.x, x_2608.y), vec2<f32>(0.0f, 0.0f));
        let x_2611 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_2610.x, x_2610.y, x_2611.z, x_2611.w);
        let x_2613 : vec4<f32> = u_xlat10;
        let x_2616 : vec4<f32> = u_xlat10;
        let x_2619 : vec4<f32> = u_xlat9;
        let x_2621 : vec2<f32> = ((-(vec2<f32>(x_2613.x, x_2613.y)) * vec2<f32>(x_2616.x, x_2616.y)) + vec2<f32>(x_2619.y, x_2619.w));
        let x_2622 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_2622.x, x_2621.x, x_2622.z, x_2621.y);
        let x_2624 : vec4<f32> = u_xlat9;
        u_xlat9 = (x_2624 + vec4<f32>(2.0f, 2.0f, 2.0f, 2.0f));
        let x_2627 : f32 = u_xlat9.y;
        u_xlat10.z = (x_2627 * 0.08163200318813323975f);
        let x_2630 : vec2<f32> = u_xlat60;
        let x_2632 : vec2<f32> = (vec2<f32>(x_2630.y, x_2630.x) * vec2<f32>(0.08163200318813323975f, 0.08163200318813323975f));
        let x_2633 : vec4<f32> = u_xlat12;
        u_xlat12 = vec4<f32>(x_2632.x, x_2632.y, x_2633.z, x_2633.w);
        let x_2635 : vec4<f32> = u_xlat9;
        u_xlat60 = (vec2<f32>(x_2635.x, x_2635.z) * vec2<f32>(0.08163200318813323975f, 0.08163200318813323975f));
        let x_2639 : f32 = u_xlat9.w;
        u_xlat12.z = (x_2639 * 0.08163200318813323975f);
        let x_2643 : f32 = u_xlat12.y;
        u_xlat10.x = x_2643;
        let x_2645 : vec4<f32> = u_xlat8;
        let x_2648 : vec2<f32> = ((vec2<f32>(x_2645.x, x_2645.x) * vec2<f32>(-0.08163200318813323975f, 0.08163200318813323975f)) + vec2<f32>(0.16326400637626647949f, 0.08163200318813323975f));
        let x_2649 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_2649.x, x_2648.x, x_2649.z, x_2648.y);
        let x_2651 : vec4<f32> = u_xlat8;
        let x_2654 : vec2<f32> = ((vec2<f32>(x_2651.x, x_2651.x) * vec2<f32>(-0.08163200318813323975f, 0.08163200318813323975f)) + vec2<f32>(0.08163200318813323975f, 0.16326400637626647949f));
        let x_2655 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_2654.x, x_2655.y, x_2654.y, x_2655.w);
        let x_2658 : f32 = u_xlat60.x;
        u_xlat9.y = x_2658;
        let x_2661 : f32 = u_xlat11.y;
        u_xlat9.w = x_2661;
        let x_2663 : vec4<f32> = u_xlat9;
        let x_2664 : vec4<f32> = u_xlat10;
        u_xlat10 = (x_2663 + x_2664);
        let x_2666 : vec4<f32> = u_xlat8;
        let x_2669 : vec2<f32> = ((vec2<f32>(x_2666.y, x_2666.y) * vec2<f32>(-0.08163200318813323975f, 0.08163200318813323975f)) + vec2<f32>(0.16326400637626647949f, 0.08163200318813323975f));
        let x_2670 : vec4<f32> = u_xlat12;
        u_xlat12 = vec4<f32>(x_2670.x, x_2669.x, x_2670.z, x_2669.y);
        let x_2672 : vec4<f32> = u_xlat8;
        let x_2675 : vec2<f32> = ((vec2<f32>(x_2672.y, x_2672.y) * vec2<f32>(-0.08163200318813323975f, 0.08163200318813323975f)) + vec2<f32>(0.08163200318813323975f, 0.16326400637626647949f));
        let x_2676 : vec4<f32> = u_xlat11;
        u_xlat11 = vec4<f32>(x_2675.x, x_2676.y, x_2675.y, x_2676.w);
        let x_2679 : f32 = u_xlat60.y;
        u_xlat11.y = x_2679;
        let x_2681 : vec4<f32> = u_xlat11;
        let x_2682 : vec4<f32> = u_xlat12;
        u_xlat8 = (x_2681 + x_2682);
        let x_2684 : vec4<f32> = u_xlat9;
        let x_2685 : vec4<f32> = u_xlat10;
        u_xlat9 = (x_2684 / x_2685);
        let x_2687 : vec4<f32> = u_xlat9;
        u_xlat9 = (x_2687 + vec4<f32>(-3.5f, -1.5f, 0.5f, 2.5f));
        let x_2689 : vec4<f32> = u_xlat11;
        let x_2690 : vec4<f32> = u_xlat8;
        u_xlat11 = (x_2689 / x_2690);
        let x_2692 : vec4<f32> = u_xlat11;
        u_xlat11 = (x_2692 + vec4<f32>(-3.5f, -1.5f, 0.5f, 2.5f));
        let x_2694 : vec4<f32> = u_xlat9;
        let x_2697 : vec4<f32> = x_246.x_MainLightShadowmapSize;
        u_xlat9 = (vec4<f32>(x_2694.w, x_2694.x, x_2694.y, x_2694.z) * vec4<f32>(x_2697.x, x_2697.x, x_2697.x, x_2697.x));
        let x_2700 : vec4<f32> = u_xlat11;
        let x_2703 : vec4<f32> = x_246.x_MainLightShadowmapSize;
        u_xlat11 = (vec4<f32>(x_2700.x, x_2700.w, x_2700.y, x_2700.z) * vec4<f32>(x_2703.y, x_2703.y, x_2703.y, x_2703.y));
        let x_2706 : vec4<f32> = u_xlat9;
        let x_2707 : vec3<f32> = vec3<f32>(x_2706.y, x_2706.z, x_2706.w);
        let x_2708 : vec4<f32> = u_xlat12;
        u_xlat12 = vec4<f32>(x_2707.x, x_2708.y, x_2707.y, x_2707.z);
        let x_2711 : f32 = u_xlat11.x;
        u_xlat12.y = x_2711;
        let x_2713 : vec2<f32> = u_xlat59;
        let x_2716 : vec4<f32> = x_246.x_MainLightShadowmapSize;
        let x_2719 : vec4<f32> = u_xlat12;
        u_xlat13 = ((vec4<f32>(x_2713.x, x_2713.y, x_2713.x, x_2713.y) * vec4<f32>(x_2716.x, x_2716.y, x_2716.x, x_2716.y)) + vec4<f32>(x_2719.x, x_2719.y, x_2719.z, x_2719.y));
        let x_2722 : vec2<f32> = u_xlat59;
        let x_2724 : vec4<f32> = x_246.x_MainLightShadowmapSize;
        let x_2727 : vec4<f32> = u_xlat12;
        let x_2729 : vec2<f32> = ((x_2722 * vec2<f32>(x_2724.x, x_2724.y)) + vec2<f32>(x_2727.w, x_2727.y));
        let x_2730 : vec4<f32> = u_xlat14;
        u_xlat14 = vec4<f32>(x_2729.x, x_2729.y, x_2730.z, x_2730.w);
        let x_2733 : f32 = u_xlat12.y;
        u_xlat9.y = x_2733;
        let x_2736 : f32 = u_xlat11.z;
        u_xlat12.y = x_2736;
        let x_2738 : vec2<f32> = u_xlat59;
        let x_2741 : vec4<f32> = x_246.x_MainLightShadowmapSize;
        let x_2744 : vec4<f32> = u_xlat12;
        u_xlat15 = ((vec4<f32>(x_2738.x, x_2738.y, x_2738.x, x_2738.y) * vec4<f32>(x_2741.x, x_2741.y, x_2741.x, x_2741.y)) + vec4<f32>(x_2744.x, x_2744.y, x_2744.z, x_2744.y));
        let x_2747 : vec2<f32> = u_xlat59;
        let x_2749 : vec4<f32> = x_246.x_MainLightShadowmapSize;
        let x_2752 : vec4<f32> = u_xlat12;
        u_xlat66 = ((x_2747 * vec2<f32>(x_2749.x, x_2749.y)) + vec2<f32>(x_2752.w, x_2752.y));
        let x_2756 : f32 = u_xlat12.y;
        u_xlat9.z = x_2756;
        let x_2758 : vec2<f32> = u_xlat59;
        let x_2761 : vec4<f32> = x_246.x_MainLightShadowmapSize;
        let x_2764 : vec4<f32> = u_xlat9;
        u_xlat16 = ((vec4<f32>(x_2758.x, x_2758.y, x_2758.x, x_2758.y) * vec4<f32>(x_2761.x, x_2761.y, x_2761.x, x_2761.y)) + vec4<f32>(x_2764.x, x_2764.y, x_2764.x, x_2764.z));
        let x_2768 : f32 = u_xlat11.w;
        u_xlat12.y = x_2768;
        let x_2770 : vec2<f32> = u_xlat59;
        let x_2773 : vec4<f32> = x_246.x_MainLightShadowmapSize;
        let x_2776 : vec4<f32> = u_xlat12;
        u_xlat17 = ((vec4<f32>(x_2770.x, x_2770.y, x_2770.x, x_2770.y) * vec4<f32>(x_2773.x, x_2773.y, x_2773.x, x_2773.y)) + vec4<f32>(x_2776.x, x_2776.y, x_2776.z, x_2776.y));
        let x_2780 : vec2<f32> = u_xlat59;
        let x_2782 : vec4<f32> = x_246.x_MainLightShadowmapSize;
        let x_2785 : vec4<f32> = u_xlat12;
        u_xlat35 = ((x_2780 * vec2<f32>(x_2782.x, x_2782.y)) + vec2<f32>(x_2785.w, x_2785.y));
        let x_2789 : f32 = u_xlat12.y;
        u_xlat9.w = x_2789;
        let x_2791 : vec2<f32> = u_xlat59;
        let x_2793 : vec4<f32> = x_246.x_MainLightShadowmapSize;
        let x_2796 : vec4<f32> = u_xlat9;
        let x_2798 : vec2<f32> = ((x_2791 * vec2<f32>(x_2793.x, x_2793.y)) + vec2<f32>(x_2796.x, x_2796.w));
        let x_2799 : vec4<f32> = u_xlat18;
        u_xlat18 = vec4<f32>(x_2798.x, x_2798.y, x_2799.z, x_2799.w);
        let x_2801 : vec4<f32> = u_xlat12;
        let x_2802 : vec3<f32> = vec3<f32>(x_2801.x, x_2801.z, x_2801.w);
        let x_2803 : vec4<f32> = u_xlat11;
        u_xlat11 = vec4<f32>(x_2802.x, x_2803.y, x_2802.y, x_2802.z);
        let x_2805 : vec2<f32> = u_xlat59;
        let x_2808 : vec4<f32> = x_246.x_MainLightShadowmapSize;
        let x_2811 : vec4<f32> = u_xlat11;
        u_xlat12 = ((vec4<f32>(x_2805.x, x_2805.y, x_2805.x, x_2805.y) * vec4<f32>(x_2808.x, x_2808.y, x_2808.x, x_2808.y)) + vec4<f32>(x_2811.x, x_2811.y, x_2811.z, x_2811.y));
        let x_2815 : vec2<f32> = u_xlat59;
        let x_2817 : vec4<f32> = x_246.x_MainLightShadowmapSize;
        let x_2820 : vec4<f32> = u_xlat11;
        u_xlat63 = ((x_2815 * vec2<f32>(x_2817.x, x_2817.y)) + vec2<f32>(x_2820.w, x_2820.y));
        let x_2824 : f32 = u_xlat9.x;
        u_xlat11.x = x_2824;
        let x_2826 : vec2<f32> = u_xlat59;
        let x_2828 : vec4<f32> = x_246.x_MainLightShadowmapSize;
        let x_2831 : vec4<f32> = u_xlat11;
        u_xlat59 = ((x_2826 * vec2<f32>(x_2828.x, x_2828.y)) + vec2<f32>(x_2831.x, x_2831.y));
        let x_2834 : vec4<f32> = u_xlat8;
        let x_2836 : vec4<f32> = u_xlat10;
        u_xlat19 = (vec4<f32>(x_2834.x, x_2834.x, x_2834.x, x_2834.x) * x_2836);
        let x_2839 : vec4<f32> = u_xlat8;
        let x_2841 : vec4<f32> = u_xlat10;
        u_xlat20 = (vec4<f32>(x_2839.y, x_2839.y, x_2839.y, x_2839.y) * x_2841);
        let x_2844 : vec4<f32> = u_xlat8;
        let x_2846 : vec4<f32> = u_xlat10;
        u_xlat21 = (vec4<f32>(x_2844.z, x_2844.z, x_2844.z, x_2844.z) * x_2846);
        let x_2848 : vec4<f32> = u_xlat8;
        let x_2850 : vec4<f32> = u_xlat10;
        u_xlat8 = (vec4<f32>(x_2848.w, x_2848.w, x_2848.w, x_2848.w) * x_2850);
        let x_2853 : vec4<f32> = u_xlat13;
        let x_2854 : vec2<f32> = vec2<f32>(x_2853.x, x_2853.y);
        let x_2856 : f32 = u_xlat2.z;
        txVec43 = vec3<f32>(x_2854.x, x_2854.y, x_2856);
        let x_2863 : vec3<f32> = txVec43;
        let x_2865 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_LinearClampCompare, x_2863.xy, x_2863.z);
        u_xlat9.x = x_2865;
        let x_2868 : vec4<f32> = u_xlat13;
        let x_2869 : vec2<f32> = vec2<f32>(x_2868.z, x_2868.w);
        let x_2871 : f32 = u_xlat2.z;
        txVec44 = vec3<f32>(x_2869.x, x_2869.y, x_2871);
        let x_2879 : vec3<f32> = txVec44;
        let x_2881 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_LinearClampCompare, x_2879.xy, x_2879.z);
        u_xlat87 = x_2881;
        let x_2882 : f32 = u_xlat87;
        let x_2884 : f32 = u_xlat19.y;
        u_xlat87 = (x_2882 * x_2884);
        let x_2887 : f32 = u_xlat19.x;
        let x_2889 : f32 = u_xlat9.x;
        let x_2891 : f32 = u_xlat87;
        u_xlat9.x = ((x_2887 * x_2889) + x_2891);
        let x_2895 : vec4<f32> = u_xlat14;
        let x_2896 : vec2<f32> = vec2<f32>(x_2895.x, x_2895.y);
        let x_2898 : f32 = u_xlat2.z;
        txVec45 = vec3<f32>(x_2896.x, x_2896.y, x_2898);
        let x_2905 : vec3<f32> = txVec45;
        let x_2907 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_LinearClampCompare, x_2905.xy, x_2905.z);
        u_xlat87 = x_2907;
        let x_2909 : f32 = u_xlat19.z;
        let x_2910 : f32 = u_xlat87;
        let x_2913 : f32 = u_xlat9.x;
        u_xlat9.x = ((x_2909 * x_2910) + x_2913);
        let x_2917 : vec4<f32> = u_xlat16;
        let x_2918 : vec2<f32> = vec2<f32>(x_2917.x, x_2917.y);
        let x_2920 : f32 = u_xlat2.z;
        txVec46 = vec3<f32>(x_2918.x, x_2918.y, x_2920);
        let x_2927 : vec3<f32> = txVec46;
        let x_2929 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_LinearClampCompare, x_2927.xy, x_2927.z);
        u_xlat87 = x_2929;
        let x_2931 : f32 = u_xlat19.w;
        let x_2932 : f32 = u_xlat87;
        let x_2935 : f32 = u_xlat9.x;
        u_xlat9.x = ((x_2931 * x_2932) + x_2935);
        let x_2939 : vec4<f32> = u_xlat15;
        let x_2940 : vec2<f32> = vec2<f32>(x_2939.x, x_2939.y);
        let x_2942 : f32 = u_xlat2.z;
        txVec47 = vec3<f32>(x_2940.x, x_2940.y, x_2942);
        let x_2949 : vec3<f32> = txVec47;
        let x_2951 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_LinearClampCompare, x_2949.xy, x_2949.z);
        u_xlat87 = x_2951;
        let x_2953 : f32 = u_xlat20.x;
        let x_2954 : f32 = u_xlat87;
        let x_2957 : f32 = u_xlat9.x;
        u_xlat9.x = ((x_2953 * x_2954) + x_2957);
        let x_2961 : vec4<f32> = u_xlat15;
        let x_2962 : vec2<f32> = vec2<f32>(x_2961.z, x_2961.w);
        let x_2964 : f32 = u_xlat2.z;
        txVec48 = vec3<f32>(x_2962.x, x_2962.y, x_2964);
        let x_2971 : vec3<f32> = txVec48;
        let x_2973 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_LinearClampCompare, x_2971.xy, x_2971.z);
        u_xlat87 = x_2973;
        let x_2975 : f32 = u_xlat20.y;
        let x_2976 : f32 = u_xlat87;
        let x_2979 : f32 = u_xlat9.x;
        u_xlat9.x = ((x_2975 * x_2976) + x_2979);
        let x_2983 : vec2<f32> = u_xlat66;
        let x_2985 : f32 = u_xlat2.z;
        txVec49 = vec3<f32>(x_2983.x, x_2983.y, x_2985);
        let x_2992 : vec3<f32> = txVec49;
        let x_2994 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_LinearClampCompare, x_2992.xy, x_2992.z);
        u_xlat87 = x_2994;
        let x_2996 : f32 = u_xlat20.z;
        let x_2997 : f32 = u_xlat87;
        let x_3000 : f32 = u_xlat9.x;
        u_xlat9.x = ((x_2996 * x_2997) + x_3000);
        let x_3004 : vec4<f32> = u_xlat16;
        let x_3005 : vec2<f32> = vec2<f32>(x_3004.z, x_3004.w);
        let x_3007 : f32 = u_xlat2.z;
        txVec50 = vec3<f32>(x_3005.x, x_3005.y, x_3007);
        let x_3014 : vec3<f32> = txVec50;
        let x_3016 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_LinearClampCompare, x_3014.xy, x_3014.z);
        u_xlat87 = x_3016;
        let x_3018 : f32 = u_xlat20.w;
        let x_3019 : f32 = u_xlat87;
        let x_3022 : f32 = u_xlat9.x;
        u_xlat9.x = ((x_3018 * x_3019) + x_3022);
        let x_3026 : vec4<f32> = u_xlat17;
        let x_3027 : vec2<f32> = vec2<f32>(x_3026.x, x_3026.y);
        let x_3029 : f32 = u_xlat2.z;
        txVec51 = vec3<f32>(x_3027.x, x_3027.y, x_3029);
        let x_3036 : vec3<f32> = txVec51;
        let x_3038 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_LinearClampCompare, x_3036.xy, x_3036.z);
        u_xlat87 = x_3038;
        let x_3040 : f32 = u_xlat21.x;
        let x_3041 : f32 = u_xlat87;
        let x_3044 : f32 = u_xlat9.x;
        u_xlat9.x = ((x_3040 * x_3041) + x_3044);
        let x_3048 : vec4<f32> = u_xlat17;
        let x_3049 : vec2<f32> = vec2<f32>(x_3048.z, x_3048.w);
        let x_3051 : f32 = u_xlat2.z;
        txVec52 = vec3<f32>(x_3049.x, x_3049.y, x_3051);
        let x_3058 : vec3<f32> = txVec52;
        let x_3060 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_LinearClampCompare, x_3058.xy, x_3058.z);
        u_xlat87 = x_3060;
        let x_3062 : f32 = u_xlat21.y;
        let x_3063 : f32 = u_xlat87;
        let x_3066 : f32 = u_xlat9.x;
        u_xlat9.x = ((x_3062 * x_3063) + x_3066);
        let x_3070 : vec2<f32> = u_xlat35;
        let x_3072 : f32 = u_xlat2.z;
        txVec53 = vec3<f32>(x_3070.x, x_3070.y, x_3072);
        let x_3079 : vec3<f32> = txVec53;
        let x_3081 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_LinearClampCompare, x_3079.xy, x_3079.z);
        u_xlat35.x = x_3081;
        let x_3084 : f32 = u_xlat21.z;
        let x_3086 : f32 = u_xlat35.x;
        let x_3089 : f32 = u_xlat9.x;
        u_xlat9.x = ((x_3084 * x_3086) + x_3089);
        let x_3093 : vec4<f32> = u_xlat18;
        let x_3094 : vec2<f32> = vec2<f32>(x_3093.x, x_3093.y);
        let x_3096 : f32 = u_xlat2.z;
        txVec54 = vec3<f32>(x_3094.x, x_3094.y, x_3096);
        let x_3103 : vec3<f32> = txVec54;
        let x_3105 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_LinearClampCompare, x_3103.xy, x_3103.z);
        u_xlat35.x = x_3105;
        let x_3108 : f32 = u_xlat21.w;
        let x_3110 : f32 = u_xlat35.x;
        let x_3113 : f32 = u_xlat9.x;
        u_xlat9.x = ((x_3108 * x_3110) + x_3113);
        let x_3117 : vec4<f32> = u_xlat12;
        let x_3118 : vec2<f32> = vec2<f32>(x_3117.x, x_3117.y);
        let x_3120 : f32 = u_xlat2.z;
        txVec55 = vec3<f32>(x_3118.x, x_3118.y, x_3120);
        let x_3127 : vec3<f32> = txVec55;
        let x_3129 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_LinearClampCompare, x_3127.xy, x_3127.z);
        u_xlat35.x = x_3129;
        let x_3132 : f32 = u_xlat8.x;
        let x_3134 : f32 = u_xlat35.x;
        let x_3137 : f32 = u_xlat9.x;
        u_xlat8.x = ((x_3132 * x_3134) + x_3137);
        let x_3141 : vec4<f32> = u_xlat12;
        let x_3142 : vec2<f32> = vec2<f32>(x_3141.z, x_3141.w);
        let x_3144 : f32 = u_xlat2.z;
        txVec56 = vec3<f32>(x_3142.x, x_3142.y, x_3144);
        let x_3151 : vec3<f32> = txVec56;
        let x_3153 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_LinearClampCompare, x_3151.xy, x_3151.z);
        u_xlat9.x = x_3153;
        let x_3156 : f32 = u_xlat8.y;
        let x_3158 : f32 = u_xlat9.x;
        let x_3161 : f32 = u_xlat8.x;
        u_xlat8.x = ((x_3156 * x_3158) + x_3161);
        let x_3165 : vec2<f32> = u_xlat63;
        let x_3167 : f32 = u_xlat2.z;
        txVec57 = vec3<f32>(x_3165.x, x_3165.y, x_3167);
        let x_3174 : vec3<f32> = txVec57;
        let x_3176 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_LinearClampCompare, x_3174.xy, x_3174.z);
        u_xlat34.x = x_3176;
        let x_3179 : f32 = u_xlat8.z;
        let x_3181 : f32 = u_xlat34.x;
        let x_3184 : f32 = u_xlat8.x;
        u_xlat8.x = ((x_3179 * x_3181) + x_3184);
        let x_3188 : vec2<f32> = u_xlat59;
        let x_3190 : f32 = u_xlat2.z;
        txVec58 = vec3<f32>(x_3188.x, x_3188.y, x_3190);
        let x_3197 : vec3<f32> = txVec58;
        let x_3199 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_LinearClampCompare, x_3197.xy, x_3197.z);
        u_xlat59.x = x_3199;
        let x_3202 : f32 = u_xlat8.w;
        let x_3204 : f32 = u_xlat59.x;
        let x_3207 : f32 = u_xlat8.x;
        u_xlat0.x = ((x_3202 * x_3204) + x_3207);
      }
    }
  } else {
    let x_3212 : vec4<f32> = u_xlat2;
    let x_3213 : vec2<f32> = vec2<f32>(x_3212.x, x_3212.y);
    let x_3215 : f32 = u_xlat2.z;
    txVec59 = vec3<f32>(x_3213.x, x_3213.y, x_3215);
    let x_3222 : vec3<f32> = txVec59;
    let x_3224 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_LinearClampCompare, x_3222.xy, x_3222.z);
    u_xlat0.x = x_3224;
  }
  let x_3227 : f32 = u_xlat0.x;
  let x_3229 : f32 = x_246.x_MainLightShadowParams.x;
  let x_3231 : f32 = u_xlat80;
  u_xlat0.x = ((x_3227 * x_3229) + x_3231);
  let x_3234 : bool = u_xlatb3;
  if (x_3234) {
    x_3235 = 1.0f;
  } else {
    let x_3240 : f32 = u_xlat0.x;
    x_3235 = x_3240;
  }
  let x_3241 : f32 = x_3235;
  u_xlat0.x = x_3241;
  let x_3243 : vec3<f32> = vs_INTERP8;
  let x_3245 : vec3<f32> = x_128.x_WorldSpaceCameraPos;
  let x_3247 : vec3<f32> = (x_3243 + -(x_3245));
  let x_3248 : vec4<f32> = u_xlat2;
  u_xlat2 = vec4<f32>(x_3247.x, x_3247.y, x_3247.z, x_3248.w);
  let x_3250 : vec4<f32> = u_xlat2;
  let x_3252 : vec4<f32> = u_xlat2;
  u_xlat2.x = dot(vec3<f32>(x_3250.x, x_3250.y, x_3250.z), vec3<f32>(x_3252.x, x_3252.y, x_3252.z));
  let x_3258 : f32 = u_xlat2.x;
  let x_3260 : f32 = x_246.x_MainLightShadowParams.z;
  let x_3263 : f32 = x_246.x_MainLightShadowParams.w;
  u_xlat28.x = ((x_3258 * x_3260) + x_3263);
  let x_3267 : f32 = u_xlat28.x;
  u_xlat28.x = clamp(x_3267, 0.0f, 1.0f);
  let x_3272 : f32 = u_xlat0.x;
  u_xlat54 = (-(x_3272) + 1.0f);
  let x_3276 : f32 = u_xlat28.x;
  let x_3277 : f32 = u_xlat54;
  let x_3280 : f32 = u_xlat0.x;
  u_xlat0.x = ((x_3276 * x_3277) + x_3280);
  let x_3283 : vec4<f32> = u_xlat4;
  let x_3286 : vec3<f32> = u_xlat26;
  u_xlat28.x = dot(-(vec3<f32>(x_3283.x, x_3283.y, x_3283.z)), x_3286);
  let x_3290 : f32 = u_xlat28.x;
  let x_3292 : f32 = u_xlat28.x;
  u_xlat28.x = (x_3290 + x_3292);
  let x_3295 : vec3<f32> = u_xlat26;
  let x_3296 : vec3<f32> = u_xlat28;
  let x_3300 : vec4<f32> = u_xlat4;
  u_xlat28 = ((x_3295 * -(vec3<f32>(x_3296.x, x_3296.x, x_3296.x))) + -(vec3<f32>(x_3300.x, x_3300.y, x_3300.z)));
  let x_3304 : vec3<f32> = u_xlat26;
  let x_3305 : vec4<f32> = u_xlat4;
  u_xlat3.x = dot(x_3304, vec3<f32>(x_3305.x, x_3305.y, x_3305.z));
  let x_3310 : f32 = u_xlat3.x;
  u_xlat3.x = clamp(x_3310, 0.0f, 1.0f);
  let x_3314 : f32 = u_xlat3.x;
  u_xlat3.x = (-(x_3314) + 1.0f);
  let x_3319 : f32 = u_xlat3.x;
  let x_3321 : f32 = u_xlat3.x;
  u_xlat3.x = (x_3319 * x_3321);
  let x_3325 : f32 = u_xlat3.x;
  let x_3327 : f32 = u_xlat3.x;
  u_xlat3.x = (x_3325 * x_3327);
  let x_3330 : f32 = u_xlat81;
  u_xlat59.x = ((-(x_3330) * 0.69999998807907104492f) + 1.70000004768371582031f);
  let x_3337 : f32 = u_xlat81;
  let x_3339 : f32 = u_xlat59.x;
  u_xlat81 = (x_3337 * x_3339);
  let x_3341 : f32 = u_xlat81;
  u_xlat81 = (x_3341 * 6.0f);
  let x_3352 : vec3<f32> = u_xlat28;
  let x_3353 : f32 = u_xlat81;
  let x_3354 : vec4<f32> = textureSampleLevel(unity_SpecCube0, samplerunity_SpecCube0, x_3352, x_3353);
  u_xlat8 = x_3354;
  let x_3356 : f32 = u_xlat8.w;
  u_xlat28.x = (x_3356 + -1.0f);
  let x_3360 : f32 = x_48.unity_SpecCube0_HDR.w;
  let x_3362 : f32 = u_xlat28.x;
  u_xlat28.x = ((x_3360 * x_3362) + 1.0f);
  let x_3367 : f32 = u_xlat28.x;
  u_xlat28.x = max(x_3367, 0.0f);
  let x_3371 : f32 = u_xlat28.x;
  u_xlat28.x = log2(x_3371);
  let x_3375 : f32 = u_xlat28.x;
  let x_3377 : f32 = x_48.unity_SpecCube0_HDR.y;
  u_xlat28.x = (x_3375 * x_3377);
  let x_3381 : f32 = u_xlat28.x;
  u_xlat28.x = exp2(x_3381);
  let x_3385 : f32 = u_xlat28.x;
  let x_3387 : f32 = x_48.unity_SpecCube0_HDR.x;
  u_xlat28.x = (x_3385 * x_3387);
  let x_3390 : vec4<f32> = u_xlat8;
  let x_3392 : vec3<f32> = u_xlat28;
  u_xlat28 = (vec3<f32>(x_3390.x, x_3390.y, x_3390.z) * vec3<f32>(x_3392.x, x_3392.x, x_3392.x));
  let x_3395 : f32 = u_xlat82;
  let x_3397 : f32 = u_xlat82;
  u_xlat59 = ((vec2<f32>(x_3395, x_3395) * vec2<f32>(x_3397, x_3397)) + vec2<f32>(-1.0f, 1.0f));
  let x_3403 : f32 = u_xlat59.y;
  u_xlat81 = (1.0f / x_3403);
  let x_3406 : f32 = u_xlat6.x;
  u_xlat82 = (x_3406 + -0.03999999910593032837f);
  let x_3410 : f32 = u_xlat3.x;
  let x_3411 : f32 = u_xlat82;
  u_xlat3.x = ((x_3410 * x_3411) + 0.03999999910593032837f);
  let x_3417 : f32 = u_xlat3.x;
  let x_3418 : f32 = u_xlat81;
  u_xlat3.x = (x_3417 * x_3418);
  let x_3421 : vec3<f32> = u_xlat28;
  let x_3422 : vec4<f32> = u_xlat3;
  u_xlat28 = (x_3421 * vec3<f32>(x_3422.x, x_3422.x, x_3422.x));
  let x_3425 : vec3<f32> = u_xlat32;
  let x_3426 : vec3<f32> = u_xlat5;
  let x_3428 : vec3<f32> = u_xlat28;
  u_xlat28 = ((x_3425 * x_3426) + x_3428);
  let x_3431 : f32 = u_xlat0.x;
  let x_3433 : f32 = x_48.unity_LightData.z;
  u_xlat0.x = (x_3431 * x_3433);
  let x_3436 : vec3<f32> = u_xlat26;
  let x_3438 : vec4<f32> = x_128.x_MainLightPosition;
  u_xlat3.x = dot(x_3436, vec3<f32>(x_3438.x, x_3438.y, x_3438.z));
  let x_3443 : f32 = u_xlat3.x;
  u_xlat3.x = clamp(x_3443, 0.0f, 1.0f);
  let x_3447 : f32 = u_xlat0.x;
  let x_3449 : f32 = u_xlat3.x;
  u_xlat0.x = (x_3447 * x_3449);
  let x_3452 : vec3<f32> = u_xlat0;
  let x_3455 : vec4<f32> = x_128.x_MainLightColor;
  let x_3457 : vec3<f32> = (vec3<f32>(x_3452.x, x_3452.x, x_3452.x) * vec3<f32>(x_3455.x, x_3455.y, x_3455.z));
  let x_3458 : vec4<f32> = u_xlat6;
  u_xlat6 = vec4<f32>(x_3457.x, x_3457.y, x_3457.z, x_3458.w);
  let x_3460 : vec4<f32> = u_xlat4;
  let x_3463 : vec4<f32> = x_128.x_MainLightPosition;
  let x_3465 : vec3<f32> = (vec3<f32>(x_3460.x, x_3460.y, x_3460.z) + vec3<f32>(x_3463.x, x_3463.y, x_3463.z));
  let x_3466 : vec4<f32> = u_xlat8;
  u_xlat8 = vec4<f32>(x_3465.x, x_3465.y, x_3465.z, x_3466.w);
  let x_3468 : vec4<f32> = u_xlat8;
  let x_3470 : vec4<f32> = u_xlat8;
  u_xlat0.x = dot(vec3<f32>(x_3468.x, x_3468.y, x_3468.z), vec3<f32>(x_3470.x, x_3470.y, x_3470.z));
  let x_3475 : f32 = u_xlat0.x;
  u_xlat0.x = max(x_3475, 1.17549435e-38f);
  let x_3479 : f32 = u_xlat0.x;
  u_xlat0.x = inverseSqrt(x_3479);
  let x_3482 : vec3<f32> = u_xlat0;
  let x_3484 : vec4<f32> = u_xlat8;
  let x_3486 : vec3<f32> = (vec3<f32>(x_3482.x, x_3482.x, x_3482.x) * vec3<f32>(x_3484.x, x_3484.y, x_3484.z));
  let x_3487 : vec4<f32> = u_xlat8;
  u_xlat8 = vec4<f32>(x_3486.x, x_3486.y, x_3486.z, x_3487.w);
  let x_3489 : vec3<f32> = u_xlat26;
  let x_3490 : vec4<f32> = u_xlat8;
  u_xlat0.x = dot(x_3489, vec3<f32>(x_3490.x, x_3490.y, x_3490.z));
  let x_3495 : f32 = u_xlat0.x;
  u_xlat0.x = clamp(x_3495, 0.0f, 1.0f);
  let x_3499 : vec4<f32> = x_128.x_MainLightPosition;
  let x_3501 : vec4<f32> = u_xlat8;
  u_xlat3.x = dot(vec3<f32>(x_3499.x, x_3499.y, x_3499.z), vec3<f32>(x_3501.x, x_3501.y, x_3501.z));
  let x_3506 : f32 = u_xlat3.x;
  u_xlat3.x = clamp(x_3506, 0.0f, 1.0f);
  let x_3510 : f32 = u_xlat0.x;
  let x_3512 : f32 = u_xlat0.x;
  u_xlat0.x = (x_3510 * x_3512);
  let x_3516 : f32 = u_xlat0.x;
  let x_3518 : f32 = u_xlat59.x;
  u_xlat0.x = ((x_3516 * x_3518) + 1.00001001358032226562f);
  let x_3524 : f32 = u_xlat3.x;
  let x_3526 : f32 = u_xlat3.x;
  u_xlat3.x = (x_3524 * x_3526);
  let x_3530 : f32 = u_xlat0.x;
  let x_3532 : f32 = u_xlat0.x;
  u_xlat0.x = (x_3530 * x_3532);
  let x_3536 : f32 = u_xlat3.x;
  u_xlat3.x = max(x_3536, 0.10000000149011611938f);
  let x_3541 : f32 = u_xlat0.x;
  let x_3543 : f32 = u_xlat3.x;
  u_xlat0.x = (x_3541 * x_3543);
  let x_3547 : f32 = u_xlat7.x;
  let x_3549 : f32 = u_xlat0.x;
  u_xlat0.x = (x_3547 * x_3549);
  let x_3552 : f32 = u_xlat83;
  let x_3554 : f32 = u_xlat0.x;
  u_xlat0.x = (x_3552 / x_3554);
  let x_3557 : vec3<f32> = u_xlat0;
  let x_3561 : vec3<f32> = u_xlat5;
  let x_3562 : vec3<f32> = ((vec3<f32>(x_3557.x, x_3557.x, x_3557.x) * vec3<f32>(0.03999999910593032837f, 0.03999999910593032837f, 0.03999999910593032837f)) + x_3561);
  let x_3563 : vec4<f32> = u_xlat8;
  u_xlat8 = vec4<f32>(x_3562.x, x_3562.y, x_3562.z, x_3563.w);
  let x_3565 : vec4<f32> = u_xlat6;
  let x_3567 : vec4<f32> = u_xlat8;
  let x_3569 : vec3<f32> = (vec3<f32>(x_3565.x, x_3565.y, x_3565.z) * vec3<f32>(x_3567.x, x_3567.y, x_3567.z));
  let x_3570 : vec4<f32> = u_xlat6;
  u_xlat6 = vec4<f32>(x_3569.x, x_3569.y, x_3569.z, x_3570.w);
  let x_3573 : f32 = x_128.x_AdditionalLightsCount.x;
  let x_3575 : f32 = x_48.unity_LightData.y;
  u_xlat0.x = min(x_3573, x_3575);
  let x_3579 : f32 = u_xlat0.x;
  u_xlatu0 = bitcast<u32>(i32(x_3579));
  let x_3583 : f32 = u_xlat2.x;
  let x_3586 : f32 = x_246.x_AdditionalShadowFadeParams.x;
  let x_3589 : f32 = x_246.x_AdditionalShadowFadeParams.y;
  u_xlat2.x = ((x_3583 * x_3586) + x_3589);
  let x_3593 : f32 = u_xlat2.x;
  u_xlat2.x = clamp(x_3593, 0.0f, 1.0f);
  u_xlat8.x = 0.0f;
  u_xlat8.y = 0.0f;
  u_xlat8.z = 0.0f;
  u_xlatu_loop_1 = 0u;
  loop {
    let x_3606 : u32 = u_xlatu_loop_1;
    let x_3607 : u32 = u_xlatu0;
    if ((x_3606 < x_3607)) {
    } else {
      break;
    }
    let x_3610 : u32 = u_xlatu_loop_1;
    u_xlatu81 = (x_3610 >> 2u);
    let x_3613 : u32 = u_xlatu_loop_1;
    u_xlati82 = bitcast<i32>((x_3613 & 3u));
    let x_3616 : u32 = u_xlatu81;
    let x_3619 : vec4<f32> = x_48.unity_LightIndices[bitcast<i32>(x_3616)];
    let x_3629 : i32 = u_xlati82;
    indexable = array<vec4<u32>, 4u>(vec4<u32>(1065353216u, 0u, 0u, 0u), vec4<u32>(0u, 1065353216u, 0u, 0u), vec4<u32>(0u, 0u, 1065353216u, 0u), vec4<u32>(0u, 0u, 0u, 1065353216u));
    let x_3634 : vec4<u32> = indexable[x_3629];
    u_xlat81 = dot(x_3619, bitcast<vec4<f32>>(x_3634));
    let x_3638 : f32 = u_xlat81;
    u_xlati81 = i32(x_3638);
    let x_3640 : vec3<f32> = vs_INTERP8;
    let x_3651 : i32 = u_xlati81;
    let x_3653 : vec4<f32> = x_3650.x_AdditionalLightsPosition[x_3651];
    let x_3656 : i32 = u_xlati81;
    let x_3658 : vec4<f32> = x_3650.x_AdditionalLightsPosition[x_3656];
    let x_3660 : vec3<f32> = ((-(x_3640) * vec3<f32>(x_3653.w, x_3653.w, x_3653.w)) + vec3<f32>(x_3658.x, x_3658.y, x_3658.z));
    let x_3661 : vec4<f32> = u_xlat9;
    u_xlat9 = vec4<f32>(x_3660.x, x_3660.y, x_3660.z, x_3661.w);
    let x_3663 : vec4<f32> = u_xlat9;
    let x_3665 : vec4<f32> = u_xlat9;
    u_xlat82 = dot(vec3<f32>(x_3663.x, x_3663.y, x_3663.z), vec3<f32>(x_3665.x, x_3665.y, x_3665.z));
    let x_3668 : f32 = u_xlat82;
    u_xlat82 = max(x_3668, 0.00006103515625f);
    let x_3672 : f32 = u_xlat82;
    u_xlat84 = inverseSqrt(x_3672);
    let x_3674 : f32 = u_xlat84;
    let x_3676 : vec4<f32> = u_xlat9;
    let x_3678 : vec3<f32> = (vec3<f32>(x_3674, x_3674, x_3674) * vec3<f32>(x_3676.x, x_3676.y, x_3676.z));
    let x_3679 : vec4<f32> = u_xlat10;
    u_xlat10 = vec4<f32>(x_3678.x, x_3678.y, x_3678.z, x_3679.w);
    let x_3681 : f32 = u_xlat82;
    u_xlat85 = (1.0f / x_3681);
    let x_3683 : f32 = u_xlat82;
    let x_3684 : i32 = u_xlati81;
    let x_3686 : f32 = x_3650.x_AdditionalLightsAttenuation[x_3684].x;
    u_xlat82 = (x_3683 * x_3686);
    let x_3688 : f32 = u_xlat82;
    let x_3690 : f32 = u_xlat82;
    u_xlat82 = ((-(x_3688) * x_3690) + 1.0f);
    let x_3693 : f32 = u_xlat82;
    u_xlat82 = max(x_3693, 0.0f);
    let x_3695 : f32 = u_xlat82;
    let x_3696 : f32 = u_xlat82;
    u_xlat82 = (x_3695 * x_3696);
    let x_3698 : f32 = u_xlat82;
    let x_3699 : f32 = u_xlat85;
    u_xlat82 = (x_3698 * x_3699);
    let x_3701 : i32 = u_xlati81;
    let x_3703 : vec4<f32> = x_3650.x_AdditionalLightsSpotDir[x_3701];
    let x_3705 : vec4<f32> = u_xlat10;
    u_xlat85 = dot(vec3<f32>(x_3703.x, x_3703.y, x_3703.z), vec3<f32>(x_3705.x, x_3705.y, x_3705.z));
    let x_3708 : f32 = u_xlat85;
    let x_3709 : i32 = u_xlati81;
    let x_3711 : f32 = x_3650.x_AdditionalLightsAttenuation[x_3709].z;
    let x_3713 : i32 = u_xlati81;
    let x_3715 : f32 = x_3650.x_AdditionalLightsAttenuation[x_3713].w;
    u_xlat85 = ((x_3708 * x_3711) + x_3715);
    let x_3717 : f32 = u_xlat85;
    u_xlat85 = clamp(x_3717, 0.0f, 1.0f);
    let x_3719 : f32 = u_xlat85;
    let x_3720 : f32 = u_xlat85;
    u_xlat85 = (x_3719 * x_3720);
    let x_3722 : f32 = u_xlat82;
    let x_3723 : f32 = u_xlat85;
    u_xlat82 = (x_3722 * x_3723);
    let x_3727 : i32 = u_xlati81;
    let x_3729 : f32 = x_246.x_AdditionalShadowParams[x_3727].w;
    u_xlati85 = i32(x_3729);
    let x_3732 : i32 = u_xlati85;
    u_xlatb86 = (x_3732 >= 0i);
    let x_3734 : bool = u_xlatb86;
    if (x_3734) {
      let x_3738 : i32 = u_xlati81;
      let x_3740 : f32 = x_246.x_AdditionalShadowParams[x_3738].z;
      u_xlatb86 = any(!((vec4<f32>(0.0f, 0.0f, 0.0f, 0.0f) == vec4<f32>(x_3740, x_3740, x_3740, x_3740))));
      let x_3744 : bool = u_xlatb86;
      if (x_3744) {
        let x_3748 : vec4<f32> = u_xlat10;
        let x_3751 : vec4<f32> = u_xlat10;
        let x_3754 : vec4<bool> = (abs(vec4<f32>(x_3748.z, x_3748.z, x_3748.y, x_3748.z)) >= abs(vec4<f32>(x_3751.x, x_3751.y, x_3751.x, x_3751.x)));
        let x_3756 : vec3<bool> = vec3<bool>(x_3754.x, x_3754.y, x_3754.z);
        let x_3757 : vec4<bool> = u_xlatb11;
        u_xlatb11 = vec4<bool>(x_3756.x, x_3756.y, x_3756.z, x_3757.w);
        let x_3760 : bool = u_xlatb11.y;
        let x_3762 : bool = u_xlatb11.x;
        u_xlatb86 = (x_3760 & x_3762);
        let x_3764 : vec4<f32> = u_xlat10;
        let x_3767 : vec4<bool> = (-(vec4<f32>(x_3764.z, x_3764.y, x_3764.z, x_3764.x)) < vec4<f32>(0.0f, 0.0f, 0.0f, 0.0f));
        let x_3768 : vec3<bool> = vec3<bool>(x_3767.x, x_3767.y, x_3767.w);
        let x_3769 : vec4<bool> = u_xlatb11;
        u_xlatb11 = vec4<bool>(x_3768.x, x_3768.y, x_3769.z, x_3768.z);
        let x_3772 : bool = u_xlatb11.x;
        u_xlat11.x = select(4.0f, 5.0f, x_3772);
        let x_3777 : bool = u_xlatb11.y;
        u_xlat11.y = select(2.0f, 3.0f, x_3777);
        let x_3781 : bool = u_xlatb11.w;
        u_xlat87 = select(0.0f, 1.0f, x_3781);
        let x_3784 : bool = u_xlatb11.z;
        if (x_3784) {
          let x_3789 : f32 = u_xlat11.y;
          x_3785 = x_3789;
        } else {
          let x_3791 : f32 = u_xlat87;
          x_3785 = x_3791;
        }
        let x_3792 : f32 = x_3785;
        u_xlat87 = x_3792;
        let x_3794 : bool = u_xlatb86;
        if (x_3794) {
          let x_3799 : f32 = u_xlat11.x;
          x_3795 = x_3799;
        } else {
          let x_3801 : f32 = u_xlat87;
          x_3795 = x_3801;
        }
        let x_3802 : f32 = x_3795;
        u_xlat86 = x_3802;
        let x_3803 : i32 = u_xlati81;
        let x_3805 : f32 = x_246.x_AdditionalShadowParams[x_3803].w;
        u_xlat87 = trunc(x_3805);
        let x_3807 : f32 = u_xlat86;
        let x_3808 : f32 = u_xlat87;
        u_xlat86 = (x_3807 + x_3808);
        let x_3810 : f32 = u_xlat86;
        u_xlati85 = i32(x_3810);
      }
      let x_3812 : i32 = u_xlati85;
      u_xlati85 = (x_3812 << bitcast<u32>(2i));
      let x_3814 : vec3<f32> = vs_INTERP8;
      let x_3817 : i32 = u_xlati85;
      let x_3820 : i32 = u_xlati85;
      let x_3824 : vec4<f32> = x_246.x_AdditionalLightsWorldToShadow[((x_3817 + 1i) / 4i)][((x_3820 + 1i) % 4i)];
      u_xlat11 = (vec4<f32>(x_3814.y, x_3814.y, x_3814.y, x_3814.y) * x_3824);
      let x_3826 : i32 = u_xlati85;
      let x_3828 : i32 = u_xlati85;
      let x_3831 : vec4<f32> = x_246.x_AdditionalLightsWorldToShadow[(x_3826 / 4i)][(x_3828 % 4i)];
      let x_3832 : vec3<f32> = vs_INTERP8;
      let x_3835 : vec4<f32> = u_xlat11;
      u_xlat11 = ((x_3831 * vec4<f32>(x_3832.x, x_3832.x, x_3832.x, x_3832.x)) + x_3835);
      let x_3837 : i32 = u_xlati85;
      let x_3840 : i32 = u_xlati85;
      let x_3844 : vec4<f32> = x_246.x_AdditionalLightsWorldToShadow[((x_3837 + 2i) / 4i)][((x_3840 + 2i) % 4i)];
      let x_3845 : vec3<f32> = vs_INTERP8;
      let x_3848 : vec4<f32> = u_xlat11;
      u_xlat11 = ((x_3844 * vec4<f32>(x_3845.z, x_3845.z, x_3845.z, x_3845.z)) + x_3848);
      let x_3850 : vec4<f32> = u_xlat11;
      let x_3851 : i32 = u_xlati85;
      let x_3854 : i32 = u_xlati85;
      let x_3858 : vec4<f32> = x_246.x_AdditionalLightsWorldToShadow[((x_3851 + 3i) / 4i)][((x_3854 + 3i) % 4i)];
      u_xlat11 = (x_3850 + x_3858);
      let x_3860 : vec4<f32> = u_xlat11;
      let x_3862 : vec4<f32> = u_xlat11;
      let x_3864 : vec3<f32> = (vec3<f32>(x_3860.x, x_3860.y, x_3860.z) / vec3<f32>(x_3862.w, x_3862.w, x_3862.w));
      let x_3865 : vec4<f32> = u_xlat11;
      u_xlat11 = vec4<f32>(x_3864.x, x_3864.y, x_3864.z, x_3865.w);
      let x_3868 : i32 = u_xlati81;
      let x_3870 : f32 = x_246.x_AdditionalShadowParams[x_3868].y;
      u_xlatb85 = (0.0f < x_3870);
      let x_3872 : bool = u_xlatb85;
      if (x_3872) {
        let x_3875 : i32 = u_xlati81;
        let x_3877 : f32 = x_246.x_AdditionalShadowParams[x_3875].y;
        u_xlatb85 = (1.0f == x_3877);
        let x_3879 : bool = u_xlatb85;
        if (x_3879) {
          let x_3882 : vec4<f32> = u_xlat11;
          let x_3885 : vec4<f32> = x_246.x_AdditionalShadowOffset0;
          u_xlat12 = (vec4<f32>(x_3882.x, x_3882.y, x_3882.x, x_3882.y) + x_3885);
          let x_3888 : vec4<f32> = u_xlat12;
          let x_3889 : vec2<f32> = vec2<f32>(x_3888.x, x_3888.y);
          let x_3891 : f32 = u_xlat11.z;
          txVec60 = vec3<f32>(x_3889.x, x_3889.y, x_3891);
          let x_3899 : vec3<f32> = txVec60;
          let x_3901 : f32 = textureSampleCompareLevel(x_AdditionalLightsShadowmapTexture, sampler_LinearClampCompare, x_3899.xy, x_3899.z);
          u_xlat13.x = x_3901;
          let x_3904 : vec4<f32> = u_xlat12;
          let x_3905 : vec2<f32> = vec2<f32>(x_3904.z, x_3904.w);
          let x_3907 : f32 = u_xlat11.z;
          txVec61 = vec3<f32>(x_3905.x, x_3905.y, x_3907);
          let x_3914 : vec3<f32> = txVec61;
          let x_3916 : f32 = textureSampleCompareLevel(x_AdditionalLightsShadowmapTexture, sampler_LinearClampCompare, x_3914.xy, x_3914.z);
          u_xlat13.y = x_3916;
          let x_3918 : vec4<f32> = u_xlat11;
          let x_3922 : vec4<f32> = x_246.x_AdditionalShadowOffset1;
          u_xlat12 = (vec4<f32>(x_3918.x, x_3918.y, x_3918.x, x_3918.y) + x_3922);
          let x_3925 : vec4<f32> = u_xlat12;
          let x_3926 : vec2<f32> = vec2<f32>(x_3925.x, x_3925.y);
          let x_3928 : f32 = u_xlat11.z;
          txVec62 = vec3<f32>(x_3926.x, x_3926.y, x_3928);
          let x_3935 : vec3<f32> = txVec62;
          let x_3937 : f32 = textureSampleCompareLevel(x_AdditionalLightsShadowmapTexture, sampler_LinearClampCompare, x_3935.xy, x_3935.z);
          u_xlat13.z = x_3937;
          let x_3940 : vec4<f32> = u_xlat12;
          let x_3941 : vec2<f32> = vec2<f32>(x_3940.z, x_3940.w);
          let x_3943 : f32 = u_xlat11.z;
          txVec63 = vec3<f32>(x_3941.x, x_3941.y, x_3943);
          let x_3950 : vec3<f32> = txVec63;
          let x_3952 : f32 = textureSampleCompareLevel(x_AdditionalLightsShadowmapTexture, sampler_LinearClampCompare, x_3950.xy, x_3950.z);
          u_xlat13.w = x_3952;
          let x_3954 : vec4<f32> = u_xlat13;
          u_xlat85 = dot(x_3954, vec4<f32>(0.25f, 0.25f, 0.25f, 0.25f));
        } else {
          let x_3957 : i32 = u_xlati81;
          let x_3959 : f32 = x_246.x_AdditionalShadowParams[x_3957].y;
          u_xlatb86 = (2.0f == x_3959);
          let x_3961 : bool = u_xlatb86;
          if (x_3961) {
            let x_3964 : vec4<f32> = u_xlat11;
            let x_3968 : vec4<f32> = x_246.x_AdditionalShadowmapSize;
            let x_3971 : vec2<f32> = ((vec2<f32>(x_3964.x, x_3964.y) * vec2<f32>(x_3968.z, x_3968.w)) + vec2<f32>(0.5f, 0.5f));
            let x_3972 : vec4<f32> = u_xlat12;
            u_xlat12 = vec4<f32>(x_3971.x, x_3971.y, x_3972.z, x_3972.w);
            let x_3974 : vec4<f32> = u_xlat12;
            let x_3976 : vec2<f32> = floor(vec2<f32>(x_3974.x, x_3974.y));
            let x_3977 : vec4<f32> = u_xlat12;
            u_xlat12 = vec4<f32>(x_3976.x, x_3976.y, x_3977.z, x_3977.w);
            let x_3980 : vec4<f32> = u_xlat11;
            let x_3983 : vec4<f32> = x_246.x_AdditionalShadowmapSize;
            let x_3986 : vec4<f32> = u_xlat12;
            u_xlat64 = ((vec2<f32>(x_3980.x, x_3980.y) * vec2<f32>(x_3983.z, x_3983.w)) + -(vec2<f32>(x_3986.x, x_3986.y)));
            let x_3990 : vec2<f32> = u_xlat64;
            u_xlat13 = (vec4<f32>(x_3990.x, x_3990.x, x_3990.y, x_3990.y) + vec4<f32>(0.5f, 1.0f, 0.5f, 1.0f));
            let x_3993 : vec4<f32> = u_xlat13;
            let x_3995 : vec4<f32> = u_xlat13;
            u_xlat14 = (vec4<f32>(x_3993.x, x_3993.x, x_3993.z, x_3993.z) * vec4<f32>(x_3995.x, x_3995.x, x_3995.z, x_3995.z));
            let x_3998 : vec4<f32> = u_xlat14;
            let x_4000 : vec2<f32> = (vec2<f32>(x_3998.y, x_3998.w) * vec2<f32>(0.07999999821186065674f, 0.07999999821186065674f));
            let x_4001 : vec4<f32> = u_xlat13;
            u_xlat13 = vec4<f32>(x_4000.x, x_4001.y, x_4000.y, x_4001.w);
            let x_4003 : vec4<f32> = u_xlat14;
            let x_4006 : vec2<f32> = u_xlat64;
            let x_4008 : vec2<f32> = ((vec2<f32>(x_4003.x, x_4003.z) * vec2<f32>(0.5f, 0.5f)) + -(x_4006));
            let x_4009 : vec4<f32> = u_xlat14;
            u_xlat14 = vec4<f32>(x_4008.x, x_4008.y, x_4009.z, x_4009.w);
            let x_4011 : vec2<f32> = u_xlat64;
            u_xlat66 = (-(x_4011) + vec2<f32>(1.0f, 1.0f));
            let x_4014 : vec2<f32> = u_xlat64;
            let x_4015 : vec2<f32> = min(x_4014, vec2<f32>(0.0f, 0.0f));
            let x_4016 : vec4<f32> = u_xlat15;
            u_xlat15 = vec4<f32>(x_4015.x, x_4015.y, x_4016.z, x_4016.w);
            let x_4018 : vec4<f32> = u_xlat15;
            let x_4021 : vec4<f32> = u_xlat15;
            let x_4024 : vec2<f32> = u_xlat66;
            let x_4025 : vec2<f32> = ((-(vec2<f32>(x_4018.x, x_4018.y)) * vec2<f32>(x_4021.x, x_4021.y)) + x_4024);
            let x_4026 : vec4<f32> = u_xlat15;
            u_xlat15 = vec4<f32>(x_4025.x, x_4025.y, x_4026.z, x_4026.w);
            let x_4028 : vec2<f32> = u_xlat64;
            u_xlat64 = max(x_4028, vec2<f32>(0.0f, 0.0f));
            let x_4030 : vec2<f32> = u_xlat64;
            let x_4032 : vec2<f32> = u_xlat64;
            let x_4034 : vec4<f32> = u_xlat13;
            u_xlat64 = ((-(x_4030) * x_4032) + vec2<f32>(x_4034.y, x_4034.w));
            let x_4037 : vec4<f32> = u_xlat15;
            let x_4039 : vec2<f32> = (vec2<f32>(x_4037.x, x_4037.y) + vec2<f32>(1.0f, 1.0f));
            let x_4040 : vec4<f32> = u_xlat15;
            u_xlat15 = vec4<f32>(x_4039.x, x_4039.y, x_4040.z, x_4040.w);
            let x_4042 : vec2<f32> = u_xlat64;
            u_xlat64 = (x_4042 + vec2<f32>(1.0f, 1.0f));
            let x_4044 : vec4<f32> = u_xlat14;
            let x_4046 : vec2<f32> = (vec2<f32>(x_4044.x, x_4044.y) * vec2<f32>(0.15999999642372131348f, 0.15999999642372131348f));
            let x_4047 : vec4<f32> = u_xlat16;
            u_xlat16 = vec4<f32>(x_4046.x, x_4046.y, x_4047.z, x_4047.w);
            let x_4049 : vec2<f32> = u_xlat66;
            let x_4050 : vec2<f32> = (x_4049 * vec2<f32>(0.15999999642372131348f, 0.15999999642372131348f));
            let x_4051 : vec4<f32> = u_xlat14;
            u_xlat14 = vec4<f32>(x_4050.x, x_4050.y, x_4051.z, x_4051.w);
            let x_4053 : vec4<f32> = u_xlat15;
            let x_4055 : vec2<f32> = (vec2<f32>(x_4053.x, x_4053.y) * vec2<f32>(0.15999999642372131348f, 0.15999999642372131348f));
            let x_4056 : vec4<f32> = u_xlat15;
            u_xlat15 = vec4<f32>(x_4055.x, x_4055.y, x_4056.z, x_4056.w);
            let x_4058 : vec2<f32> = u_xlat64;
            let x_4059 : vec2<f32> = (x_4058 * vec2<f32>(0.15999999642372131348f, 0.15999999642372131348f));
            let x_4060 : vec4<f32> = u_xlat17;
            u_xlat17 = vec4<f32>(x_4059.x, x_4059.y, x_4060.z, x_4060.w);
            let x_4062 : vec4<f32> = u_xlat13;
            u_xlat64 = (vec2<f32>(x_4062.y, x_4062.w) * vec2<f32>(0.15999999642372131348f, 0.15999999642372131348f));
            let x_4066 : f32 = u_xlat15.x;
            u_xlat16.z = x_4066;
            let x_4069 : f32 = u_xlat64.x;
            u_xlat16.w = x_4069;
            let x_4072 : f32 = u_xlat17.x;
            u_xlat14.z = x_4072;
            let x_4075 : f32 = u_xlat13.x;
            u_xlat14.w = x_4075;
            let x_4077 : vec4<f32> = u_xlat14;
            let x_4079 : vec4<f32> = u_xlat16;
            u_xlat18 = (vec4<f32>(x_4077.z, x_4077.w, x_4077.x, x_4077.z) + vec4<f32>(x_4079.z, x_4079.w, x_4079.x, x_4079.z));
            let x_4083 : f32 = u_xlat16.y;
            u_xlat15.z = x_4083;
            let x_4086 : f32 = u_xlat64.y;
            u_xlat15.w = x_4086;
            let x_4089 : f32 = u_xlat14.y;
            u_xlat17.z = x_4089;
            let x_4092 : f32 = u_xlat13.z;
            u_xlat17.w = x_4092;
            let x_4094 : vec4<f32> = u_xlat15;
            let x_4096 : vec4<f32> = u_xlat17;
            let x_4098 : vec3<f32> = (vec3<f32>(x_4094.z, x_4094.y, x_4094.w) + vec3<f32>(x_4096.z, x_4096.y, x_4096.w));
            let x_4099 : vec4<f32> = u_xlat13;
            u_xlat13 = vec4<f32>(x_4098.x, x_4098.y, x_4098.z, x_4099.w);
            let x_4101 : vec4<f32> = u_xlat14;
            let x_4103 : vec4<f32> = u_xlat18;
            let x_4105 : vec3<f32> = (vec3<f32>(x_4101.x, x_4101.z, x_4101.w) / vec3<f32>(x_4103.z, x_4103.w, x_4103.y));
            let x_4106 : vec4<f32> = u_xlat14;
            u_xlat14 = vec4<f32>(x_4105.x, x_4105.y, x_4105.z, x_4106.w);
            let x_4108 : vec4<f32> = u_xlat14;
            let x_4110 : vec3<f32> = (vec3<f32>(x_4108.x, x_4108.y, x_4108.z) + vec3<f32>(-2.5f, -0.5f, 1.5f));
            let x_4111 : vec4<f32> = u_xlat14;
            u_xlat14 = vec4<f32>(x_4110.x, x_4110.y, x_4110.z, x_4111.w);
            let x_4113 : vec4<f32> = u_xlat17;
            let x_4115 : vec4<f32> = u_xlat13;
            let x_4117 : vec3<f32> = (vec3<f32>(x_4113.z, x_4113.y, x_4113.w) / vec3<f32>(x_4115.x, x_4115.y, x_4115.z));
            let x_4118 : vec4<f32> = u_xlat15;
            u_xlat15 = vec4<f32>(x_4117.x, x_4117.y, x_4117.z, x_4118.w);
            let x_4120 : vec4<f32> = u_xlat15;
            let x_4122 : vec3<f32> = (vec3<f32>(x_4120.x, x_4120.y, x_4120.z) + vec3<f32>(-2.5f, -0.5f, 1.5f));
            let x_4123 : vec4<f32> = u_xlat15;
            u_xlat15 = vec4<f32>(x_4122.x, x_4122.y, x_4122.z, x_4123.w);
            let x_4125 : vec4<f32> = u_xlat14;
            let x_4128 : vec4<f32> = x_246.x_AdditionalShadowmapSize;
            let x_4130 : vec3<f32> = (vec3<f32>(x_4125.y, x_4125.x, x_4125.z) * vec3<f32>(x_4128.x, x_4128.x, x_4128.x));
            let x_4131 : vec4<f32> = u_xlat14;
            u_xlat14 = vec4<f32>(x_4130.x, x_4130.y, x_4130.z, x_4131.w);
            let x_4133 : vec4<f32> = u_xlat15;
            let x_4136 : vec4<f32> = x_246.x_AdditionalShadowmapSize;
            let x_4138 : vec3<f32> = (vec3<f32>(x_4133.x, x_4133.y, x_4133.z) * vec3<f32>(x_4136.y, x_4136.y, x_4136.y));
            let x_4139 : vec4<f32> = u_xlat15;
            u_xlat15 = vec4<f32>(x_4138.x, x_4138.y, x_4138.z, x_4139.w);
            let x_4142 : f32 = u_xlat15.x;
            u_xlat14.w = x_4142;
            let x_4144 : vec4<f32> = u_xlat12;
            let x_4147 : vec4<f32> = x_246.x_AdditionalShadowmapSize;
            let x_4150 : vec4<f32> = u_xlat14;
            u_xlat16 = ((vec4<f32>(x_4144.x, x_4144.y, x_4144.x, x_4144.y) * vec4<f32>(x_4147.x, x_4147.y, x_4147.x, x_4147.y)) + vec4<f32>(x_4150.y, x_4150.w, x_4150.x, x_4150.w));
            let x_4153 : vec4<f32> = u_xlat12;
            let x_4156 : vec4<f32> = x_246.x_AdditionalShadowmapSize;
            let x_4159 : vec4<f32> = u_xlat14;
            u_xlat64 = ((vec2<f32>(x_4153.x, x_4153.y) * vec2<f32>(x_4156.x, x_4156.y)) + vec2<f32>(x_4159.z, x_4159.w));
            let x_4163 : f32 = u_xlat14.y;
            u_xlat15.w = x_4163;
            let x_4165 : vec4<f32> = u_xlat15;
            let x_4166 : vec2<f32> = vec2<f32>(x_4165.y, x_4165.z);
            let x_4167 : vec4<f32> = u_xlat14;
            u_xlat14 = vec4<f32>(x_4167.x, x_4166.x, x_4167.z, x_4166.y);
            let x_4169 : vec4<f32> = u_xlat12;
            let x_4172 : vec4<f32> = x_246.x_AdditionalShadowmapSize;
            let x_4175 : vec4<f32> = u_xlat14;
            u_xlat17 = ((vec4<f32>(x_4169.x, x_4169.y, x_4169.x, x_4169.y) * vec4<f32>(x_4172.x, x_4172.y, x_4172.x, x_4172.y)) + vec4<f32>(x_4175.x, x_4175.y, x_4175.z, x_4175.y));
            let x_4178 : vec4<f32> = u_xlat12;
            let x_4181 : vec4<f32> = x_246.x_AdditionalShadowmapSize;
            let x_4184 : vec4<f32> = u_xlat15;
            u_xlat15 = ((vec4<f32>(x_4178.x, x_4178.y, x_4178.x, x_4178.y) * vec4<f32>(x_4181.x, x_4181.y, x_4181.x, x_4181.y)) + vec4<f32>(x_4184.w, x_4184.y, x_4184.w, x_4184.z));
            let x_4187 : vec4<f32> = u_xlat12;
            let x_4190 : vec4<f32> = x_246.x_AdditionalShadowmapSize;
            let x_4193 : vec4<f32> = u_xlat14;
            u_xlat14 = ((vec4<f32>(x_4187.x, x_4187.y, x_4187.x, x_4187.y) * vec4<f32>(x_4190.x, x_4190.y, x_4190.x, x_4190.y)) + vec4<f32>(x_4193.x, x_4193.w, x_4193.z, x_4193.w));
            let x_4196 : vec4<f32> = u_xlat13;
            let x_4198 : vec4<f32> = u_xlat18;
            u_xlat19 = (vec4<f32>(x_4196.x, x_4196.x, x_4196.x, x_4196.y) * vec4<f32>(x_4198.z, x_4198.w, x_4198.y, x_4198.z));
            let x_4201 : vec4<f32> = u_xlat13;
            let x_4203 : vec4<f32> = u_xlat18;
            u_xlat20 = (vec4<f32>(x_4201.y, x_4201.y, x_4201.z, x_4201.z) * x_4203);
            let x_4206 : f32 = u_xlat13.z;
            let x_4208 : f32 = u_xlat18.y;
            u_xlat86 = (x_4206 * x_4208);
            let x_4211 : vec4<f32> = u_xlat16;
            let x_4212 : vec2<f32> = vec2<f32>(x_4211.x, x_4211.y);
            let x_4214 : f32 = u_xlat11.z;
            txVec64 = vec3<f32>(x_4212.x, x_4212.y, x_4214);
            let x_4221 : vec3<f32> = txVec64;
            let x_4223 : f32 = textureSampleCompareLevel(x_AdditionalLightsShadowmapTexture, sampler_LinearClampCompare, x_4221.xy, x_4221.z);
            u_xlat87 = x_4223;
            let x_4225 : vec4<f32> = u_xlat16;
            let x_4226 : vec2<f32> = vec2<f32>(x_4225.z, x_4225.w);
            let x_4228 : f32 = u_xlat11.z;
            txVec65 = vec3<f32>(x_4226.x, x_4226.y, x_4228);
            let x_4236 : vec3<f32> = txVec65;
            let x_4238 : f32 = textureSampleCompareLevel(x_AdditionalLightsShadowmapTexture, sampler_LinearClampCompare, x_4236.xy, x_4236.z);
            u_xlat88 = x_4238;
            let x_4239 : f32 = u_xlat88;
            let x_4241 : f32 = u_xlat19.y;
            u_xlat88 = (x_4239 * x_4241);
            let x_4244 : f32 = u_xlat19.x;
            let x_4245 : f32 = u_xlat87;
            let x_4247 : f32 = u_xlat88;
            u_xlat87 = ((x_4244 * x_4245) + x_4247);
            let x_4250 : vec2<f32> = u_xlat64;
            let x_4252 : f32 = u_xlat11.z;
            txVec66 = vec3<f32>(x_4250.x, x_4250.y, x_4252);
            let x_4259 : vec3<f32> = txVec66;
            let x_4261 : f32 = textureSampleCompareLevel(x_AdditionalLightsShadowmapTexture, sampler_LinearClampCompare, x_4259.xy, x_4259.z);
            u_xlat88 = x_4261;
            let x_4263 : f32 = u_xlat19.z;
            let x_4264 : f32 = u_xlat88;
            let x_4266 : f32 = u_xlat87;
            u_xlat87 = ((x_4263 * x_4264) + x_4266);
            let x_4269 : vec4<f32> = u_xlat15;
            let x_4270 : vec2<f32> = vec2<f32>(x_4269.x, x_4269.y);
            let x_4272 : f32 = u_xlat11.z;
            txVec67 = vec3<f32>(x_4270.x, x_4270.y, x_4272);
            let x_4279 : vec3<f32> = txVec67;
            let x_4281 : f32 = textureSampleCompareLevel(x_AdditionalLightsShadowmapTexture, sampler_LinearClampCompare, x_4279.xy, x_4279.z);
            u_xlat88 = x_4281;
            let x_4283 : f32 = u_xlat19.w;
            let x_4284 : f32 = u_xlat88;
            let x_4286 : f32 = u_xlat87;
            u_xlat87 = ((x_4283 * x_4284) + x_4286);
            let x_4289 : vec4<f32> = u_xlat17;
            let x_4290 : vec2<f32> = vec2<f32>(x_4289.x, x_4289.y);
            let x_4292 : f32 = u_xlat11.z;
            txVec68 = vec3<f32>(x_4290.x, x_4290.y, x_4292);
            let x_4299 : vec3<f32> = txVec68;
            let x_4301 : f32 = textureSampleCompareLevel(x_AdditionalLightsShadowmapTexture, sampler_LinearClampCompare, x_4299.xy, x_4299.z);
            u_xlat88 = x_4301;
            let x_4303 : f32 = u_xlat20.x;
            let x_4304 : f32 = u_xlat88;
            let x_4306 : f32 = u_xlat87;
            u_xlat87 = ((x_4303 * x_4304) + x_4306);
            let x_4309 : vec4<f32> = u_xlat17;
            let x_4310 : vec2<f32> = vec2<f32>(x_4309.z, x_4309.w);
            let x_4312 : f32 = u_xlat11.z;
            txVec69 = vec3<f32>(x_4310.x, x_4310.y, x_4312);
            let x_4319 : vec3<f32> = txVec69;
            let x_4321 : f32 = textureSampleCompareLevel(x_AdditionalLightsShadowmapTexture, sampler_LinearClampCompare, x_4319.xy, x_4319.z);
            u_xlat88 = x_4321;
            let x_4323 : f32 = u_xlat20.y;
            let x_4324 : f32 = u_xlat88;
            let x_4326 : f32 = u_xlat87;
            u_xlat87 = ((x_4323 * x_4324) + x_4326);
            let x_4329 : vec4<f32> = u_xlat15;
            let x_4330 : vec2<f32> = vec2<f32>(x_4329.z, x_4329.w);
            let x_4332 : f32 = u_xlat11.z;
            txVec70 = vec3<f32>(x_4330.x, x_4330.y, x_4332);
            let x_4339 : vec3<f32> = txVec70;
            let x_4341 : f32 = textureSampleCompareLevel(x_AdditionalLightsShadowmapTexture, sampler_LinearClampCompare, x_4339.xy, x_4339.z);
            u_xlat88 = x_4341;
            let x_4343 : f32 = u_xlat20.z;
            let x_4344 : f32 = u_xlat88;
            let x_4346 : f32 = u_xlat87;
            u_xlat87 = ((x_4343 * x_4344) + x_4346);
            let x_4349 : vec4<f32> = u_xlat14;
            let x_4350 : vec2<f32> = vec2<f32>(x_4349.x, x_4349.y);
            let x_4352 : f32 = u_xlat11.z;
            txVec71 = vec3<f32>(x_4350.x, x_4350.y, x_4352);
            let x_4359 : vec3<f32> = txVec71;
            let x_4361 : f32 = textureSampleCompareLevel(x_AdditionalLightsShadowmapTexture, sampler_LinearClampCompare, x_4359.xy, x_4359.z);
            u_xlat88 = x_4361;
            let x_4363 : f32 = u_xlat20.w;
            let x_4364 : f32 = u_xlat88;
            let x_4366 : f32 = u_xlat87;
            u_xlat87 = ((x_4363 * x_4364) + x_4366);
            let x_4369 : vec4<f32> = u_xlat14;
            let x_4370 : vec2<f32> = vec2<f32>(x_4369.z, x_4369.w);
            let x_4372 : f32 = u_xlat11.z;
            txVec72 = vec3<f32>(x_4370.x, x_4370.y, x_4372);
            let x_4379 : vec3<f32> = txVec72;
            let x_4381 : f32 = textureSampleCompareLevel(x_AdditionalLightsShadowmapTexture, sampler_LinearClampCompare, x_4379.xy, x_4379.z);
            u_xlat88 = x_4381;
            let x_4382 : f32 = u_xlat86;
            let x_4383 : f32 = u_xlat88;
            let x_4385 : f32 = u_xlat87;
            u_xlat85 = ((x_4382 * x_4383) + x_4385);
          } else {
            let x_4388 : vec4<f32> = u_xlat11;
            let x_4391 : vec4<f32> = x_246.x_AdditionalShadowmapSize;
            let x_4394 : vec2<f32> = ((vec2<f32>(x_4388.x, x_4388.y) * vec2<f32>(x_4391.z, x_4391.w)) + vec2<f32>(0.5f, 0.5f));
            let x_4395 : vec4<f32> = u_xlat12;
            u_xlat12 = vec4<f32>(x_4394.x, x_4394.y, x_4395.z, x_4395.w);
            let x_4397 : vec4<f32> = u_xlat12;
            let x_4399 : vec2<f32> = floor(vec2<f32>(x_4397.x, x_4397.y));
            let x_4400 : vec4<f32> = u_xlat12;
            u_xlat12 = vec4<f32>(x_4399.x, x_4399.y, x_4400.z, x_4400.w);
            let x_4402 : vec4<f32> = u_xlat11;
            let x_4405 : vec4<f32> = x_246.x_AdditionalShadowmapSize;
            let x_4408 : vec4<f32> = u_xlat12;
            u_xlat64 = ((vec2<f32>(x_4402.x, x_4402.y) * vec2<f32>(x_4405.z, x_4405.w)) + -(vec2<f32>(x_4408.x, x_4408.y)));
            let x_4412 : vec2<f32> = u_xlat64;
            u_xlat13 = (vec4<f32>(x_4412.x, x_4412.x, x_4412.y, x_4412.y) + vec4<f32>(0.5f, 1.0f, 0.5f, 1.0f));
            let x_4415 : vec4<f32> = u_xlat13;
            let x_4417 : vec4<f32> = u_xlat13;
            u_xlat14 = (vec4<f32>(x_4415.x, x_4415.x, x_4415.z, x_4415.z) * vec4<f32>(x_4417.x, x_4417.x, x_4417.z, x_4417.z));
            let x_4420 : vec4<f32> = u_xlat14;
            let x_4422 : vec2<f32> = (vec2<f32>(x_4420.y, x_4420.w) * vec2<f32>(0.04081600159406661987f, 0.04081600159406661987f));
            let x_4423 : vec4<f32> = u_xlat15;
            u_xlat15 = vec4<f32>(x_4423.x, x_4422.x, x_4423.z, x_4422.y);
            let x_4425 : vec4<f32> = u_xlat14;
            let x_4428 : vec2<f32> = u_xlat64;
            let x_4430 : vec2<f32> = ((vec2<f32>(x_4425.x, x_4425.z) * vec2<f32>(0.5f, 0.5f)) + -(x_4428));
            let x_4431 : vec4<f32> = u_xlat13;
            u_xlat13 = vec4<f32>(x_4430.x, x_4431.y, x_4430.y, x_4431.w);
            let x_4433 : vec2<f32> = u_xlat64;
            let x_4435 : vec2<f32> = (-(x_4433) + vec2<f32>(1.0f, 1.0f));
            let x_4436 : vec4<f32> = u_xlat14;
            u_xlat14 = vec4<f32>(x_4435.x, x_4435.y, x_4436.z, x_4436.w);
            let x_4438 : vec2<f32> = u_xlat64;
            u_xlat66 = min(x_4438, vec2<f32>(0.0f, 0.0f));
            let x_4440 : vec2<f32> = u_xlat66;
            let x_4442 : vec2<f32> = u_xlat66;
            let x_4444 : vec4<f32> = u_xlat14;
            let x_4446 : vec2<f32> = ((-(x_4440) * x_4442) + vec2<f32>(x_4444.x, x_4444.y));
            let x_4447 : vec4<f32> = u_xlat14;
            u_xlat14 = vec4<f32>(x_4446.x, x_4446.y, x_4447.z, x_4447.w);
            let x_4449 : vec2<f32> = u_xlat64;
            u_xlat66 = max(x_4449, vec2<f32>(0.0f, 0.0f));
            let x_4452 : vec2<f32> = u_xlat66;
            let x_4454 : vec2<f32> = u_xlat66;
            let x_4456 : vec4<f32> = u_xlat13;
            let x_4458 : vec2<f32> = ((-(x_4452) * x_4454) + vec2<f32>(x_4456.y, x_4456.w));
            let x_4459 : vec3<f32> = u_xlat39;
            u_xlat39 = vec3<f32>(x_4458.x, x_4459.y, x_4458.y);
            let x_4461 : vec4<f32> = u_xlat14;
            let x_4463 : vec2<f32> = (vec2<f32>(x_4461.x, x_4461.y) + vec2<f32>(2.0f, 2.0f));
            let x_4464 : vec4<f32> = u_xlat14;
            u_xlat14 = vec4<f32>(x_4463.x, x_4463.y, x_4464.z, x_4464.w);
            let x_4466 : vec3<f32> = u_xlat39;
            let x_4468 : vec2<f32> = (vec2<f32>(x_4466.x, x_4466.z) + vec2<f32>(2.0f, 2.0f));
            let x_4469 : vec4<f32> = u_xlat13;
            u_xlat13 = vec4<f32>(x_4469.x, x_4468.x, x_4469.z, x_4468.y);
            let x_4472 : f32 = u_xlat13.y;
            u_xlat16.z = (x_4472 * 0.08163200318813323975f);
            let x_4475 : vec4<f32> = u_xlat13;
            let x_4477 : vec3<f32> = (vec3<f32>(x_4475.z, x_4475.x, x_4475.w) * vec3<f32>(0.08163200318813323975f, 0.08163200318813323975f, 0.08163200318813323975f));
            let x_4478 : vec4<f32> = u_xlat17;
            u_xlat17 = vec4<f32>(x_4477.x, x_4477.y, x_4477.z, x_4478.w);
            let x_4480 : vec4<f32> = u_xlat14;
            let x_4482 : vec2<f32> = (vec2<f32>(x_4480.x, x_4480.y) * vec2<f32>(0.08163200318813323975f, 0.08163200318813323975f));
            let x_4483 : vec4<f32> = u_xlat13;
            u_xlat13 = vec4<f32>(x_4482.x, x_4482.y, x_4483.z, x_4483.w);
            let x_4486 : f32 = u_xlat17.y;
            u_xlat16.x = x_4486;
            let x_4488 : vec2<f32> = u_xlat64;
            let x_4491 : vec2<f32> = ((vec2<f32>(x_4488.x, x_4488.x) * vec2<f32>(-0.08163200318813323975f, 0.08163200318813323975f)) + vec2<f32>(0.16326400637626647949f, 0.08163200318813323975f));
            let x_4492 : vec4<f32> = u_xlat16;
            u_xlat16 = vec4<f32>(x_4492.x, x_4491.x, x_4492.z, x_4491.y);
            let x_4494 : vec2<f32> = u_xlat64;
            let x_4497 : vec2<f32> = ((vec2<f32>(x_4494.x, x_4494.x) * vec2<f32>(-0.08163200318813323975f, 0.08163200318813323975f)) + vec2<f32>(0.08163200318813323975f, 0.16326400637626647949f));
            let x_4498 : vec4<f32> = u_xlat14;
            u_xlat14 = vec4<f32>(x_4497.x, x_4498.y, x_4497.y, x_4498.w);
            let x_4501 : f32 = u_xlat13.x;
            u_xlat14.y = x_4501;
            let x_4504 : f32 = u_xlat15.y;
            u_xlat14.w = x_4504;
            let x_4506 : vec4<f32> = u_xlat14;
            let x_4507 : vec4<f32> = u_xlat16;
            u_xlat16 = (x_4506 + x_4507);
            let x_4509 : vec2<f32> = u_xlat64;
            let x_4512 : vec2<f32> = ((vec2<f32>(x_4509.y, x_4509.y) * vec2<f32>(-0.08163200318813323975f, 0.08163200318813323975f)) + vec2<f32>(0.16326400637626647949f, 0.08163200318813323975f));
            let x_4513 : vec4<f32> = u_xlat17;
            u_xlat17 = vec4<f32>(x_4513.x, x_4512.x, x_4513.z, x_4512.y);
            let x_4515 : vec2<f32> = u_xlat64;
            let x_4518 : vec2<f32> = ((vec2<f32>(x_4515.y, x_4515.y) * vec2<f32>(-0.08163200318813323975f, 0.08163200318813323975f)) + vec2<f32>(0.08163200318813323975f, 0.16326400637626647949f));
            let x_4519 : vec4<f32> = u_xlat15;
            u_xlat15 = vec4<f32>(x_4518.x, x_4519.y, x_4518.y, x_4519.w);
            let x_4522 : f32 = u_xlat13.y;
            u_xlat15.y = x_4522;
            let x_4524 : vec4<f32> = u_xlat15;
            let x_4525 : vec4<f32> = u_xlat17;
            u_xlat13 = (x_4524 + x_4525);
            let x_4527 : vec4<f32> = u_xlat14;
            let x_4528 : vec4<f32> = u_xlat16;
            u_xlat14 = (x_4527 / x_4528);
            let x_4530 : vec4<f32> = u_xlat14;
            u_xlat14 = (x_4530 + vec4<f32>(-3.5f, -1.5f, 0.5f, 2.5f));
            let x_4532 : vec4<f32> = u_xlat15;
            let x_4533 : vec4<f32> = u_xlat13;
            u_xlat15 = (x_4532 / x_4533);
            let x_4535 : vec4<f32> = u_xlat15;
            u_xlat15 = (x_4535 + vec4<f32>(-3.5f, -1.5f, 0.5f, 2.5f));
            let x_4537 : vec4<f32> = u_xlat14;
            let x_4540 : vec4<f32> = x_246.x_AdditionalShadowmapSize;
            u_xlat14 = (vec4<f32>(x_4537.w, x_4537.x, x_4537.y, x_4537.z) * vec4<f32>(x_4540.x, x_4540.x, x_4540.x, x_4540.x));
            let x_4543 : vec4<f32> = u_xlat15;
            let x_4546 : vec4<f32> = x_246.x_AdditionalShadowmapSize;
            u_xlat15 = (vec4<f32>(x_4543.x, x_4543.w, x_4543.y, x_4543.z) * vec4<f32>(x_4546.y, x_4546.y, x_4546.y, x_4546.y));
            let x_4549 : vec4<f32> = u_xlat14;
            let x_4550 : vec3<f32> = vec3<f32>(x_4549.y, x_4549.z, x_4549.w);
            let x_4551 : vec4<f32> = u_xlat17;
            u_xlat17 = vec4<f32>(x_4550.x, x_4551.y, x_4550.y, x_4550.z);
            let x_4554 : f32 = u_xlat15.x;
            u_xlat17.y = x_4554;
            let x_4556 : vec4<f32> = u_xlat12;
            let x_4559 : vec4<f32> = x_246.x_AdditionalShadowmapSize;
            let x_4562 : vec4<f32> = u_xlat17;
            u_xlat18 = ((vec4<f32>(x_4556.x, x_4556.y, x_4556.x, x_4556.y) * vec4<f32>(x_4559.x, x_4559.y, x_4559.x, x_4559.y)) + vec4<f32>(x_4562.x, x_4562.y, x_4562.z, x_4562.y));
            let x_4565 : vec4<f32> = u_xlat12;
            let x_4568 : vec4<f32> = x_246.x_AdditionalShadowmapSize;
            let x_4571 : vec4<f32> = u_xlat17;
            u_xlat64 = ((vec2<f32>(x_4565.x, x_4565.y) * vec2<f32>(x_4568.x, x_4568.y)) + vec2<f32>(x_4571.w, x_4571.y));
            let x_4575 : f32 = u_xlat17.y;
            u_xlat14.y = x_4575;
            let x_4578 : f32 = u_xlat15.z;
            u_xlat17.y = x_4578;
            let x_4580 : vec4<f32> = u_xlat12;
            let x_4583 : vec4<f32> = x_246.x_AdditionalShadowmapSize;
            let x_4586 : vec4<f32> = u_xlat17;
            u_xlat19 = ((vec4<f32>(x_4580.x, x_4580.y, x_4580.x, x_4580.y) * vec4<f32>(x_4583.x, x_4583.y, x_4583.x, x_4583.y)) + vec4<f32>(x_4586.x, x_4586.y, x_4586.z, x_4586.y));
            let x_4589 : vec4<f32> = u_xlat12;
            let x_4592 : vec4<f32> = x_246.x_AdditionalShadowmapSize;
            let x_4595 : vec4<f32> = u_xlat17;
            let x_4597 : vec2<f32> = ((vec2<f32>(x_4589.x, x_4589.y) * vec2<f32>(x_4592.x, x_4592.y)) + vec2<f32>(x_4595.w, x_4595.y));
            let x_4598 : vec4<f32> = u_xlat20;
            u_xlat20 = vec4<f32>(x_4597.x, x_4597.y, x_4598.z, x_4598.w);
            let x_4601 : f32 = u_xlat17.y;
            u_xlat14.z = x_4601;
            let x_4603 : vec4<f32> = u_xlat12;
            let x_4606 : vec4<f32> = x_246.x_AdditionalShadowmapSize;
            let x_4609 : vec4<f32> = u_xlat14;
            u_xlat21 = ((vec4<f32>(x_4603.x, x_4603.y, x_4603.x, x_4603.y) * vec4<f32>(x_4606.x, x_4606.y, x_4606.x, x_4606.y)) + vec4<f32>(x_4609.x, x_4609.y, x_4609.x, x_4609.z));
            let x_4613 : f32 = u_xlat15.w;
            u_xlat17.y = x_4613;
            let x_4616 : vec4<f32> = u_xlat12;
            let x_4619 : vec4<f32> = x_246.x_AdditionalShadowmapSize;
            let x_4622 : vec4<f32> = u_xlat17;
            u_xlat22 = ((vec4<f32>(x_4616.x, x_4616.y, x_4616.x, x_4616.y) * vec4<f32>(x_4619.x, x_4619.y, x_4619.x, x_4619.y)) + vec4<f32>(x_4622.x, x_4622.y, x_4622.z, x_4622.y));
            let x_4626 : vec4<f32> = u_xlat12;
            let x_4629 : vec4<f32> = x_246.x_AdditionalShadowmapSize;
            let x_4632 : vec4<f32> = u_xlat17;
            u_xlat40 = ((vec2<f32>(x_4626.x, x_4626.y) * vec2<f32>(x_4629.x, x_4629.y)) + vec2<f32>(x_4632.w, x_4632.y));
            let x_4636 : f32 = u_xlat17.y;
            u_xlat14.w = x_4636;
            let x_4639 : vec4<f32> = u_xlat12;
            let x_4642 : vec4<f32> = x_246.x_AdditionalShadowmapSize;
            let x_4645 : vec4<f32> = u_xlat14;
            u_xlat72 = ((vec2<f32>(x_4639.x, x_4639.y) * vec2<f32>(x_4642.x, x_4642.y)) + vec2<f32>(x_4645.x, x_4645.w));
            let x_4648 : vec4<f32> = u_xlat17;
            let x_4649 : vec3<f32> = vec3<f32>(x_4648.x, x_4648.z, x_4648.w);
            let x_4650 : vec4<f32> = u_xlat15;
            u_xlat15 = vec4<f32>(x_4649.x, x_4650.y, x_4649.y, x_4649.z);
            let x_4652 : vec4<f32> = u_xlat12;
            let x_4655 : vec4<f32> = x_246.x_AdditionalShadowmapSize;
            let x_4658 : vec4<f32> = u_xlat15;
            u_xlat17 = ((vec4<f32>(x_4652.x, x_4652.y, x_4652.x, x_4652.y) * vec4<f32>(x_4655.x, x_4655.y, x_4655.x, x_4655.y)) + vec4<f32>(x_4658.x, x_4658.y, x_4658.z, x_4658.y));
            let x_4662 : vec4<f32> = u_xlat12;
            let x_4665 : vec4<f32> = x_246.x_AdditionalShadowmapSize;
            let x_4668 : vec4<f32> = u_xlat15;
            u_xlat67 = ((vec2<f32>(x_4662.x, x_4662.y) * vec2<f32>(x_4665.x, x_4665.y)) + vec2<f32>(x_4668.w, x_4668.y));
            let x_4672 : f32 = u_xlat14.x;
            u_xlat15.x = x_4672;
            let x_4674 : vec4<f32> = u_xlat12;
            let x_4677 : vec4<f32> = x_246.x_AdditionalShadowmapSize;
            let x_4680 : vec4<f32> = u_xlat15;
            let x_4682 : vec2<f32> = ((vec2<f32>(x_4674.x, x_4674.y) * vec2<f32>(x_4677.x, x_4677.y)) + vec2<f32>(x_4680.x, x_4680.y));
            let x_4683 : vec4<f32> = u_xlat12;
            u_xlat12 = vec4<f32>(x_4682.x, x_4682.y, x_4683.z, x_4683.w);
            let x_4686 : vec4<f32> = u_xlat13;
            let x_4688 : vec4<f32> = u_xlat16;
            u_xlat23 = (vec4<f32>(x_4686.x, x_4686.x, x_4686.x, x_4686.x) * x_4688);
            let x_4691 : vec4<f32> = u_xlat13;
            let x_4693 : vec4<f32> = u_xlat16;
            u_xlat24 = (vec4<f32>(x_4691.y, x_4691.y, x_4691.y, x_4691.y) * x_4693);
            let x_4696 : vec4<f32> = u_xlat13;
            let x_4698 : vec4<f32> = u_xlat16;
            u_xlat25 = (vec4<f32>(x_4696.z, x_4696.z, x_4696.z, x_4696.z) * x_4698);
            let x_4700 : vec4<f32> = u_xlat13;
            let x_4702 : vec4<f32> = u_xlat16;
            u_xlat13 = (vec4<f32>(x_4700.w, x_4700.w, x_4700.w, x_4700.w) * x_4702);
            let x_4705 : vec4<f32> = u_xlat18;
            let x_4706 : vec2<f32> = vec2<f32>(x_4705.x, x_4705.y);
            let x_4708 : f32 = u_xlat11.z;
            txVec73 = vec3<f32>(x_4706.x, x_4706.y, x_4708);
            let x_4715 : vec3<f32> = txVec73;
            let x_4717 : f32 = textureSampleCompareLevel(x_AdditionalLightsShadowmapTexture, sampler_LinearClampCompare, x_4715.xy, x_4715.z);
            u_xlat86 = x_4717;
            let x_4719 : vec4<f32> = u_xlat18;
            let x_4720 : vec2<f32> = vec2<f32>(x_4719.z, x_4719.w);
            let x_4722 : f32 = u_xlat11.z;
            txVec74 = vec3<f32>(x_4720.x, x_4720.y, x_4722);
            let x_4729 : vec3<f32> = txVec74;
            let x_4731 : f32 = textureSampleCompareLevel(x_AdditionalLightsShadowmapTexture, sampler_LinearClampCompare, x_4729.xy, x_4729.z);
            u_xlat87 = x_4731;
            let x_4732 : f32 = u_xlat87;
            let x_4734 : f32 = u_xlat23.y;
            u_xlat87 = (x_4732 * x_4734);
            let x_4737 : f32 = u_xlat23.x;
            let x_4738 : f32 = u_xlat86;
            let x_4740 : f32 = u_xlat87;
            u_xlat86 = ((x_4737 * x_4738) + x_4740);
            let x_4743 : vec2<f32> = u_xlat64;
            let x_4745 : f32 = u_xlat11.z;
            txVec75 = vec3<f32>(x_4743.x, x_4743.y, x_4745);
            let x_4752 : vec3<f32> = txVec75;
            let x_4754 : f32 = textureSampleCompareLevel(x_AdditionalLightsShadowmapTexture, sampler_LinearClampCompare, x_4752.xy, x_4752.z);
            u_xlat87 = x_4754;
            let x_4756 : f32 = u_xlat23.z;
            let x_4757 : f32 = u_xlat87;
            let x_4759 : f32 = u_xlat86;
            u_xlat86 = ((x_4756 * x_4757) + x_4759);
            let x_4762 : vec4<f32> = u_xlat21;
            let x_4763 : vec2<f32> = vec2<f32>(x_4762.x, x_4762.y);
            let x_4765 : f32 = u_xlat11.z;
            txVec76 = vec3<f32>(x_4763.x, x_4763.y, x_4765);
            let x_4772 : vec3<f32> = txVec76;
            let x_4774 : f32 = textureSampleCompareLevel(x_AdditionalLightsShadowmapTexture, sampler_LinearClampCompare, x_4772.xy, x_4772.z);
            u_xlat87 = x_4774;
            let x_4776 : f32 = u_xlat23.w;
            let x_4777 : f32 = u_xlat87;
            let x_4779 : f32 = u_xlat86;
            u_xlat86 = ((x_4776 * x_4777) + x_4779);
            let x_4782 : vec4<f32> = u_xlat19;
            let x_4783 : vec2<f32> = vec2<f32>(x_4782.x, x_4782.y);
            let x_4785 : f32 = u_xlat11.z;
            txVec77 = vec3<f32>(x_4783.x, x_4783.y, x_4785);
            let x_4792 : vec3<f32> = txVec77;
            let x_4794 : f32 = textureSampleCompareLevel(x_AdditionalLightsShadowmapTexture, sampler_LinearClampCompare, x_4792.xy, x_4792.z);
            u_xlat87 = x_4794;
            let x_4796 : f32 = u_xlat24.x;
            let x_4797 : f32 = u_xlat87;
            let x_4799 : f32 = u_xlat86;
            u_xlat86 = ((x_4796 * x_4797) + x_4799);
            let x_4802 : vec4<f32> = u_xlat19;
            let x_4803 : vec2<f32> = vec2<f32>(x_4802.z, x_4802.w);
            let x_4805 : f32 = u_xlat11.z;
            txVec78 = vec3<f32>(x_4803.x, x_4803.y, x_4805);
            let x_4812 : vec3<f32> = txVec78;
            let x_4814 : f32 = textureSampleCompareLevel(x_AdditionalLightsShadowmapTexture, sampler_LinearClampCompare, x_4812.xy, x_4812.z);
            u_xlat87 = x_4814;
            let x_4816 : f32 = u_xlat24.y;
            let x_4817 : f32 = u_xlat87;
            let x_4819 : f32 = u_xlat86;
            u_xlat86 = ((x_4816 * x_4817) + x_4819);
            let x_4822 : vec4<f32> = u_xlat20;
            let x_4823 : vec2<f32> = vec2<f32>(x_4822.x, x_4822.y);
            let x_4825 : f32 = u_xlat11.z;
            txVec79 = vec3<f32>(x_4823.x, x_4823.y, x_4825);
            let x_4832 : vec3<f32> = txVec79;
            let x_4834 : f32 = textureSampleCompareLevel(x_AdditionalLightsShadowmapTexture, sampler_LinearClampCompare, x_4832.xy, x_4832.z);
            u_xlat87 = x_4834;
            let x_4836 : f32 = u_xlat24.z;
            let x_4837 : f32 = u_xlat87;
            let x_4839 : f32 = u_xlat86;
            u_xlat86 = ((x_4836 * x_4837) + x_4839);
            let x_4842 : vec4<f32> = u_xlat21;
            let x_4843 : vec2<f32> = vec2<f32>(x_4842.z, x_4842.w);
            let x_4845 : f32 = u_xlat11.z;
            txVec80 = vec3<f32>(x_4843.x, x_4843.y, x_4845);
            let x_4852 : vec3<f32> = txVec80;
            let x_4854 : f32 = textureSampleCompareLevel(x_AdditionalLightsShadowmapTexture, sampler_LinearClampCompare, x_4852.xy, x_4852.z);
            u_xlat87 = x_4854;
            let x_4856 : f32 = u_xlat24.w;
            let x_4857 : f32 = u_xlat87;
            let x_4859 : f32 = u_xlat86;
            u_xlat86 = ((x_4856 * x_4857) + x_4859);
            let x_4862 : vec4<f32> = u_xlat22;
            let x_4863 : vec2<f32> = vec2<f32>(x_4862.x, x_4862.y);
            let x_4865 : f32 = u_xlat11.z;
            txVec81 = vec3<f32>(x_4863.x, x_4863.y, x_4865);
            let x_4872 : vec3<f32> = txVec81;
            let x_4874 : f32 = textureSampleCompareLevel(x_AdditionalLightsShadowmapTexture, sampler_LinearClampCompare, x_4872.xy, x_4872.z);
            u_xlat87 = x_4874;
            let x_4876 : f32 = u_xlat25.x;
            let x_4877 : f32 = u_xlat87;
            let x_4879 : f32 = u_xlat86;
            u_xlat86 = ((x_4876 * x_4877) + x_4879);
            let x_4882 : vec4<f32> = u_xlat22;
            let x_4883 : vec2<f32> = vec2<f32>(x_4882.z, x_4882.w);
            let x_4885 : f32 = u_xlat11.z;
            txVec82 = vec3<f32>(x_4883.x, x_4883.y, x_4885);
            let x_4892 : vec3<f32> = txVec82;
            let x_4894 : f32 = textureSampleCompareLevel(x_AdditionalLightsShadowmapTexture, sampler_LinearClampCompare, x_4892.xy, x_4892.z);
            u_xlat87 = x_4894;
            let x_4896 : f32 = u_xlat25.y;
            let x_4897 : f32 = u_xlat87;
            let x_4899 : f32 = u_xlat86;
            u_xlat86 = ((x_4896 * x_4897) + x_4899);
            let x_4902 : vec2<f32> = u_xlat40;
            let x_4904 : f32 = u_xlat11.z;
            txVec83 = vec3<f32>(x_4902.x, x_4902.y, x_4904);
            let x_4911 : vec3<f32> = txVec83;
            let x_4913 : f32 = textureSampleCompareLevel(x_AdditionalLightsShadowmapTexture, sampler_LinearClampCompare, x_4911.xy, x_4911.z);
            u_xlat87 = x_4913;
            let x_4915 : f32 = u_xlat25.z;
            let x_4916 : f32 = u_xlat87;
            let x_4918 : f32 = u_xlat86;
            u_xlat86 = ((x_4915 * x_4916) + x_4918);
            let x_4921 : vec2<f32> = u_xlat72;
            let x_4923 : f32 = u_xlat11.z;
            txVec84 = vec3<f32>(x_4921.x, x_4921.y, x_4923);
            let x_4930 : vec3<f32> = txVec84;
            let x_4932 : f32 = textureSampleCompareLevel(x_AdditionalLightsShadowmapTexture, sampler_LinearClampCompare, x_4930.xy, x_4930.z);
            u_xlat87 = x_4932;
            let x_4934 : f32 = u_xlat25.w;
            let x_4935 : f32 = u_xlat87;
            let x_4937 : f32 = u_xlat86;
            u_xlat86 = ((x_4934 * x_4935) + x_4937);
            let x_4940 : vec4<f32> = u_xlat17;
            let x_4941 : vec2<f32> = vec2<f32>(x_4940.x, x_4940.y);
            let x_4943 : f32 = u_xlat11.z;
            txVec85 = vec3<f32>(x_4941.x, x_4941.y, x_4943);
            let x_4950 : vec3<f32> = txVec85;
            let x_4952 : f32 = textureSampleCompareLevel(x_AdditionalLightsShadowmapTexture, sampler_LinearClampCompare, x_4950.xy, x_4950.z);
            u_xlat87 = x_4952;
            let x_4954 : f32 = u_xlat13.x;
            let x_4955 : f32 = u_xlat87;
            let x_4957 : f32 = u_xlat86;
            u_xlat86 = ((x_4954 * x_4955) + x_4957);
            let x_4960 : vec4<f32> = u_xlat17;
            let x_4961 : vec2<f32> = vec2<f32>(x_4960.z, x_4960.w);
            let x_4963 : f32 = u_xlat11.z;
            txVec86 = vec3<f32>(x_4961.x, x_4961.y, x_4963);
            let x_4970 : vec3<f32> = txVec86;
            let x_4972 : f32 = textureSampleCompareLevel(x_AdditionalLightsShadowmapTexture, sampler_LinearClampCompare, x_4970.xy, x_4970.z);
            u_xlat87 = x_4972;
            let x_4974 : f32 = u_xlat13.y;
            let x_4975 : f32 = u_xlat87;
            let x_4977 : f32 = u_xlat86;
            u_xlat86 = ((x_4974 * x_4975) + x_4977);
            let x_4980 : vec2<f32> = u_xlat67;
            let x_4982 : f32 = u_xlat11.z;
            txVec87 = vec3<f32>(x_4980.x, x_4980.y, x_4982);
            let x_4989 : vec3<f32> = txVec87;
            let x_4991 : f32 = textureSampleCompareLevel(x_AdditionalLightsShadowmapTexture, sampler_LinearClampCompare, x_4989.xy, x_4989.z);
            u_xlat87 = x_4991;
            let x_4993 : f32 = u_xlat13.z;
            let x_4994 : f32 = u_xlat87;
            let x_4996 : f32 = u_xlat86;
            u_xlat86 = ((x_4993 * x_4994) + x_4996);
            let x_4999 : vec4<f32> = u_xlat12;
            let x_5000 : vec2<f32> = vec2<f32>(x_4999.x, x_4999.y);
            let x_5002 : f32 = u_xlat11.z;
            txVec88 = vec3<f32>(x_5000.x, x_5000.y, x_5002);
            let x_5009 : vec3<f32> = txVec88;
            let x_5011 : f32 = textureSampleCompareLevel(x_AdditionalLightsShadowmapTexture, sampler_LinearClampCompare, x_5009.xy, x_5009.z);
            u_xlat87 = x_5011;
            let x_5013 : f32 = u_xlat13.w;
            let x_5014 : f32 = u_xlat87;
            let x_5016 : f32 = u_xlat86;
            u_xlat85 = ((x_5013 * x_5014) + x_5016);
          }
        }
      } else {
        let x_5020 : vec4<f32> = u_xlat11;
        let x_5021 : vec2<f32> = vec2<f32>(x_5020.x, x_5020.y);
        let x_5023 : f32 = u_xlat11.z;
        txVec89 = vec3<f32>(x_5021.x, x_5021.y, x_5023);
        let x_5030 : vec3<f32> = txVec89;
        let x_5032 : f32 = textureSampleCompareLevel(x_AdditionalLightsShadowmapTexture, sampler_LinearClampCompare, x_5030.xy, x_5030.z);
        u_xlat85 = x_5032;
      }
      let x_5033 : i32 = u_xlati81;
      let x_5035 : f32 = x_246.x_AdditionalShadowParams[x_5033].x;
      u_xlat86 = (1.0f + -(x_5035));
      let x_5038 : f32 = u_xlat85;
      let x_5039 : i32 = u_xlati81;
      let x_5041 : f32 = x_246.x_AdditionalShadowParams[x_5039].x;
      let x_5043 : f32 = u_xlat86;
      u_xlat85 = ((x_5038 * x_5041) + x_5043);
      let x_5046 : f32 = u_xlat11.z;
      u_xlatb86 = (0.0f >= x_5046);
      let x_5050 : f32 = u_xlat11.z;
      u_xlatb87 = (x_5050 >= 1.0f);
      let x_5052 : bool = u_xlatb86;
      let x_5053 : bool = u_xlatb87;
      u_xlatb86 = (x_5052 | x_5053);
      let x_5055 : bool = u_xlatb86;
      let x_5056 : f32 = u_xlat85;
      u_xlat85 = select(x_5056, 1.0f, x_5055);
    } else {
      u_xlat85 = 1.0f;
    }
    let x_5059 : f32 = u_xlat85;
    u_xlat86 = (-(x_5059) + 1.0f);
    let x_5063 : f32 = u_xlat2.x;
    let x_5064 : f32 = u_xlat86;
    let x_5066 : f32 = u_xlat85;
    u_xlat85 = ((x_5063 * x_5064) + x_5066);
    let x_5068 : f32 = u_xlat82;
    let x_5069 : f32 = u_xlat85;
    u_xlat82 = (x_5068 * x_5069);
    let x_5071 : vec3<f32> = u_xlat26;
    let x_5072 : vec4<f32> = u_xlat10;
    u_xlat85 = dot(x_5071, vec3<f32>(x_5072.x, x_5072.y, x_5072.z));
    let x_5075 : f32 = u_xlat85;
    u_xlat85 = clamp(x_5075, 0.0f, 1.0f);
    let x_5077 : f32 = u_xlat82;
    let x_5078 : f32 = u_xlat85;
    u_xlat82 = (x_5077 * x_5078);
    let x_5080 : f32 = u_xlat82;
    let x_5082 : i32 = u_xlati81;
    let x_5084 : vec4<f32> = x_3650.x_AdditionalLightsColor[x_5082];
    let x_5086 : vec3<f32> = (vec3<f32>(x_5080, x_5080, x_5080) * vec3<f32>(x_5084.x, x_5084.y, x_5084.z));
    let x_5087 : vec4<f32> = u_xlat11;
    u_xlat11 = vec4<f32>(x_5086.x, x_5086.y, x_5086.z, x_5087.w);
    let x_5089 : vec4<f32> = u_xlat9;
    let x_5091 : f32 = u_xlat84;
    let x_5094 : vec4<f32> = u_xlat4;
    let x_5096 : vec3<f32> = ((vec3<f32>(x_5089.x, x_5089.y, x_5089.z) * vec3<f32>(x_5091, x_5091, x_5091)) + vec3<f32>(x_5094.x, x_5094.y, x_5094.z));
    let x_5097 : vec4<f32> = u_xlat9;
    u_xlat9 = vec4<f32>(x_5096.x, x_5096.y, x_5096.z, x_5097.w);
    let x_5099 : vec4<f32> = u_xlat9;
    let x_5101 : vec4<f32> = u_xlat9;
    u_xlat81 = dot(vec3<f32>(x_5099.x, x_5099.y, x_5099.z), vec3<f32>(x_5101.x, x_5101.y, x_5101.z));
    let x_5104 : f32 = u_xlat81;
    u_xlat81 = max(x_5104, 1.17549435e-38f);
    let x_5106 : f32 = u_xlat81;
    u_xlat81 = inverseSqrt(x_5106);
    let x_5108 : f32 = u_xlat81;
    let x_5110 : vec4<f32> = u_xlat9;
    let x_5112 : vec3<f32> = (vec3<f32>(x_5108, x_5108, x_5108) * vec3<f32>(x_5110.x, x_5110.y, x_5110.z));
    let x_5113 : vec4<f32> = u_xlat9;
    u_xlat9 = vec4<f32>(x_5112.x, x_5112.y, x_5112.z, x_5113.w);
    let x_5115 : vec3<f32> = u_xlat26;
    let x_5116 : vec4<f32> = u_xlat9;
    u_xlat81 = dot(x_5115, vec3<f32>(x_5116.x, x_5116.y, x_5116.z));
    let x_5119 : f32 = u_xlat81;
    u_xlat81 = clamp(x_5119, 0.0f, 1.0f);
    let x_5121 : vec4<f32> = u_xlat10;
    let x_5123 : vec4<f32> = u_xlat9;
    u_xlat82 = dot(vec3<f32>(x_5121.x, x_5121.y, x_5121.z), vec3<f32>(x_5123.x, x_5123.y, x_5123.z));
    let x_5126 : f32 = u_xlat82;
    u_xlat82 = clamp(x_5126, 0.0f, 1.0f);
    let x_5128 : f32 = u_xlat81;
    let x_5129 : f32 = u_xlat81;
    u_xlat81 = (x_5128 * x_5129);
    let x_5131 : f32 = u_xlat81;
    let x_5133 : f32 = u_xlat59.x;
    u_xlat81 = ((x_5131 * x_5133) + 1.00001001358032226562f);
    let x_5136 : f32 = u_xlat82;
    let x_5137 : f32 = u_xlat82;
    u_xlat82 = (x_5136 * x_5137);
    let x_5139 : f32 = u_xlat81;
    let x_5140 : f32 = u_xlat81;
    u_xlat81 = (x_5139 * x_5140);
    let x_5142 : f32 = u_xlat82;
    u_xlat82 = max(x_5142, 0.10000000149011611938f);
    let x_5144 : f32 = u_xlat81;
    let x_5145 : f32 = u_xlat82;
    u_xlat81 = (x_5144 * x_5145);
    let x_5148 : f32 = u_xlat7.x;
    let x_5149 : f32 = u_xlat81;
    u_xlat81 = (x_5148 * x_5149);
    let x_5151 : f32 = u_xlat83;
    let x_5152 : f32 = u_xlat81;
    u_xlat81 = (x_5151 / x_5152);
    let x_5154 : f32 = u_xlat81;
    let x_5157 : vec3<f32> = u_xlat5;
    let x_5158 : vec3<f32> = ((vec3<f32>(x_5154, x_5154, x_5154) * vec3<f32>(0.03999999910593032837f, 0.03999999910593032837f, 0.03999999910593032837f)) + x_5157);
    let x_5159 : vec4<f32> = u_xlat9;
    u_xlat9 = vec4<f32>(x_5158.x, x_5158.y, x_5158.z, x_5159.w);
    let x_5161 : vec4<f32> = u_xlat9;
    let x_5163 : vec4<f32> = u_xlat11;
    let x_5166 : vec4<f32> = u_xlat8;
    let x_5168 : vec3<f32> = ((vec3<f32>(x_5161.x, x_5161.y, x_5161.z) * vec3<f32>(x_5163.x, x_5163.y, x_5163.z)) + vec3<f32>(x_5166.x, x_5166.y, x_5166.z));
    let x_5169 : vec4<f32> = u_xlat8;
    u_xlat8 = vec4<f32>(x_5168.x, x_5168.y, x_5168.z, x_5169.w);

    continuing {
      let x_5171 : u32 = u_xlatu_loop_1;
      u_xlatu_loop_1 = (x_5171 + bitcast<u32>(1i));
    }
  }
  let x_5173 : vec3<f32> = u_xlat28;
  let x_5174 : vec3<f32> = u_xlat33;
  let x_5177 : vec4<f32> = u_xlat6;
  u_xlat0 = ((x_5173 * vec3<f32>(x_5174.x, x_5174.x, x_5174.x)) + vec3<f32>(x_5177.x, x_5177.y, x_5177.z));
  let x_5180 : vec4<f32> = u_xlat8;
  let x_5182 : vec3<f32> = u_xlat0;
  u_xlat0 = (vec3<f32>(x_5180.x, x_5180.y, x_5180.z) + x_5182);
  let x_5184 : vec4<f32> = vs_INTERP6;
  let x_5186 : vec3<f32> = u_xlat1;
  let x_5188 : vec3<f32> = u_xlat0;
  u_xlat0 = ((vec3<f32>(x_5184.w, x_5184.w, x_5184.w) * x_5186) + x_5188);
  let x_5191 : f32 = u_xlat29;
  let x_5192 : f32 = u_xlat29;
  u_xlat78 = (x_5191 * -(x_5192));
  let x_5195 : f32 = u_xlat78;
  u_xlat78 = exp2(x_5195);
  let x_5197 : vec3<f32> = u_xlat0;
  let x_5199 : vec4<f32> = x_128.unity_FogColor;
  u_xlat0 = (x_5197 + -(vec3<f32>(x_5199.x, x_5199.y, x_5199.z)));
  let x_5205 : f32 = u_xlat78;
  let x_5207 : vec3<f32> = u_xlat0;
  let x_5210 : vec4<f32> = x_128.unity_FogColor;
  let x_5212 : vec3<f32> = ((vec3<f32>(x_5205, x_5205, x_5205) * x_5207) + vec3<f32>(x_5210.x, x_5210.y, x_5210.z));
  let x_5213 : vec4<f32> = SV_Target0;
  SV_Target0 = vec4<f32>(x_5212.x, x_5212.y, x_5212.z, x_5213.w);
  let x_5215 : bool = u_xlatb55;
  let x_5216 : f32 = u_xlat79;
  SV_Target0.w = select(1.0f, x_5216, x_5215);
  return;
}

struct main_out {
  @location(0)
  SV_Target0_1 : vec4<f32>,
}

@fragment
fn main(@location(5) vs_INTERP9_param : vec3<f32>, @location(1) vs_INTERP4_param : vec4<f32>, @location(2) vs_INTERP5_param : vec4<f32>, @location(3) vs_INTERP6_param : vec4<f32>, @location(4) vs_INTERP8_param : vec3<f32>, @location(0) vs_INTERP0_param : vec2<f32>, @builtin(position) gl_FragCoord_param : vec4<f32>) -> main_out {
  vs_INTERP9 = vs_INTERP9_param;
  vs_INTERP4 = vs_INTERP4_param;
  vs_INTERP5 = vs_INTERP5_param;
  vs_INTERP6 = vs_INTERP6_param;
  vs_INTERP8 = vs_INTERP8_param;
  vs_INTERP0 = vs_INTERP0_param;
  gl_FragCoord = gl_FragCoord_param;
  main_1();
  return main_out(SV_Target0);
}


