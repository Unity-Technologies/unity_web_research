struct PGlobals {
  x_GlobalMipBias : vec2<f32>,
  @size(8)
  padding : u32,
  x_Lut_Params : vec4<f32>,
  x_UserLut_Params : vec4<f32>,
  x_Bloom_Params : vec4<f32>,
  x_Bloom_RGBM : f32,
  @size(12)
  padding_1 : u32,
  x_Distortion_Params1 : vec4<f32>,
  x_Distortion_Params2 : vec4<f32>,
  x_Vignette_Params1 : vec4<f32>,
  x_Vignette_Params2 : vec4<f32>,
  x_Bloom_Texture_TexelSize : vec4<f32>,
  x_Dithering_Params : vec4<f32>,
}

var<private> vs_TEXCOORD0 : vec2<f32>;

@group(1) @binding(0) var<uniform> x_26 : PGlobals;

@group(0) @binding(0) var x_BlitTexture : texture_2d<f32>;

@group(0) @binding(5) var sampler_LinearClamp : sampler;

@group(0) @binding(1) var x_Bloom_Texture : texture_2d<f32>;

@group(0) @binding(3) var x_UserLut : texture_2d<f32>;

@group(0) @binding(2) var x_InternalLut : texture_2d<f32>;

@group(0) @binding(4) var x_BlueNoise_Texture : texture_2d<f32>;

@group(0) @binding(6) var sampler_PointRepeat : sampler;

var<private> SV_Target0 : vec4<f32>;

var<private> gl_FragCoord : vec4<f32>;

fn main_1() {
  var u_xlat0 : vec3<f32>;
  var u_xlat14 : vec2<f32>;
  var u_xlat1 : vec4<f32>;
  var u_xlatb8 : bool;
  var u_xlat8 : vec3<f32>;
  var u_xlat2 : vec4<f32>;
  var u_xlat3 : vec4<f32>;
  var u_xlat15 : vec2<f32>;
  var u_xlat22 : f32;
  var u_xlat9 : f32;
  var u_xlat16 : vec2<f32>;
  var u_xlatb23 : bool;
  var x_217 : f32;
  var u_xlatb1 : bool;
  var x_245 : f32;
  var u_xlat4 : vec4<f32>;
  var u_xlat17 : vec2<f32>;
  var u_xlat5 : vec4<f32>;
  var u_xlat6 : vec4<f32>;
  var u_xlatb21 : bool;
  var u_xlat21 : f32;
  var u_xlat7 : vec3<f32>;
  var u_xlatb7 : bool;
  var x_804 : f32;
  var x_813 : f32;
  var u_xlatb14 : vec2<bool>;
  var u_xlatb10 : bool;
  var x_944 : f32;
  var u_xlatb22 : bool;
  var x_995 : f32;
  var x_1022 : f32;
  var x_1046 : f32;
  var x_1057 : f32;
  var u_xlatb0 : vec3<bool>;
  var u_xlatb3 : vec3<bool>;
  var hlslcc_movcTemp : vec3<f32>;
  var x_1446 : f32;
  var x_1458 : f32;
  var x_1470 : f32;
  var x_1633 : f32;
  var x_1645 : f32;
  var x_1657 : f32;
  var x_1831 : f32;
  var x_1843 : f32;
  var x_1855 : f32;
  var x_1907 : f32;
  var x_1919 : f32;
  var x_1931 : f32;
  var u_xlat_precise_vec4 : vec4<f32>;
  var u_xlat_precise_ivec4 : vec4<i32>;
  var u_xlat_precise_bvec4 : vec4<bool>;
  var u_xlat_precise_uvec4 : vec4<u32>;
  let x_13 : vec2<f32> = vs_TEXCOORD0;
  let x_16 : vec2<f32> = (x_13 + vec2<f32>(-0.5f, -0.5f));
  let x_17 : vec3<f32> = u_xlat0;
  u_xlat0 = vec3<f32>(x_16.x, x_16.y, x_17.z);
  let x_21 : vec3<f32> = u_xlat0;
  let x_31 : vec4<f32> = x_26.x_Distortion_Params2;
  u_xlat14 = ((vec2<f32>(x_21.x, x_21.y) * vec2<f32>(x_31.z, x_31.z)) + vec2<f32>(0.5f, 0.5f));
  let x_37 : vec3<f32> = u_xlat0;
  let x_40 : vec4<f32> = x_26.x_Distortion_Params2;
  let x_45 : vec4<f32> = x_26.x_Distortion_Params1;
  let x_48 : vec2<f32> = ((vec2<f32>(x_37.x, x_37.y) * vec2<f32>(x_40.z, x_40.z)) + -(vec2<f32>(x_45.x, x_45.y)));
  let x_49 : vec3<f32> = u_xlat0;
  u_xlat0 = vec3<f32>(x_48.x, x_48.y, x_49.z);
  let x_51 : vec3<f32> = u_xlat0;
  let x_54 : vec4<f32> = x_26.x_Distortion_Params1;
  let x_56 : vec2<f32> = (vec2<f32>(x_51.x, x_51.y) * vec2<f32>(x_54.z, x_54.w));
  let x_57 : vec3<f32> = u_xlat0;
  u_xlat0 = vec3<f32>(x_56.x, x_56.y, x_57.z);
  let x_61 : vec3<f32> = u_xlat0;
  let x_63 : vec3<f32> = u_xlat0;
  u_xlat1.x = dot(vec2<f32>(x_61.x, x_61.y), vec2<f32>(x_63.x, x_63.y));
  let x_71 : f32 = u_xlat1.x;
  u_xlat1.x = sqrt(x_71);
  let x_81 : f32 = x_26.x_Distortion_Params2.w;
  u_xlatb8 = (0.0f < x_81);
  let x_83 : bool = u_xlatb8;
  if (x_83) {
    let x_87 : vec4<f32> = u_xlat1;
    let x_90 : vec4<f32> = x_26.x_Distortion_Params2;
    let x_92 : vec2<f32> = (vec2<f32>(x_87.x, x_87.x) * vec2<f32>(x_90.x, x_90.y));
    let x_93 : vec3<f32> = u_xlat8;
    u_xlat8 = vec3<f32>(x_92.x, x_92.y, x_93.z);
    let x_97 : f32 = u_xlat8.x;
    u_xlat2.x = sin(x_97);
    let x_102 : f32 = u_xlat8.x;
    u_xlat3.x = cos(x_102);
    let x_106 : f32 = u_xlat2.x;
    let x_108 : f32 = u_xlat3.x;
    u_xlat8.x = (x_106 / x_108);
    let x_115 : f32 = u_xlat8.y;
    u_xlat15.x = (1.0f / x_115);
    let x_119 : f32 = u_xlat8.x;
    let x_121 : f32 = u_xlat15.x;
    u_xlat8.x = ((x_119 * x_121) + -1.0f);
    let x_126 : vec3<f32> = u_xlat0;
    let x_128 : vec3<f32> = u_xlat8;
    let x_131 : vec2<f32> = u_xlat14;
    let x_132 : vec2<f32> = ((vec2<f32>(x_126.x, x_126.y) * vec2<f32>(x_128.x, x_128.x)) + x_131);
    let x_133 : vec3<f32> = u_xlat8;
    u_xlat8 = vec3<f32>(x_132.x, x_132.y, x_133.z);
  } else {
    let x_138 : f32 = u_xlat1.x;
    u_xlat22 = (1.0f / x_138);
    let x_140 : f32 = u_xlat22;
    let x_142 : f32 = x_26.x_Distortion_Params2.x;
    u_xlat22 = (x_140 * x_142);
    let x_145 : f32 = u_xlat1.x;
    let x_147 : f32 = x_26.x_Distortion_Params2.y;
    u_xlat1.x = (x_145 * x_147);
    let x_151 : f32 = u_xlat1.x;
    u_xlat2.x = min(abs(x_151), 1.0f);
    let x_157 : f32 = u_xlat1.x;
    u_xlat9 = max(abs(x_157), 1.0f);
    let x_160 : f32 = u_xlat9;
    u_xlat9 = (1.0f / x_160);
    let x_162 : f32 = u_xlat9;
    let x_164 : f32 = u_xlat2.x;
    u_xlat2.x = (x_162 * x_164);
    let x_168 : f32 = u_xlat2.x;
    let x_170 : f32 = u_xlat2.x;
    u_xlat9 = (x_168 * x_170);
    let x_173 : f32 = u_xlat9;
    u_xlat16.x = ((x_173 * 0.0208351f) + -0.085133001f);
    let x_179 : f32 = u_xlat9;
    let x_181 : f32 = u_xlat16.x;
    u_xlat16.x = ((x_179 * x_181) + 0.180141002f);
    let x_186 : f32 = u_xlat9;
    let x_188 : f32 = u_xlat16.x;
    u_xlat16.x = ((x_186 * x_188) + -0.330299497f);
    let x_193 : f32 = u_xlat9;
    let x_195 : f32 = u_xlat16.x;
    u_xlat9 = ((x_193 * x_195) + 0.999866009f);
    let x_199 : f32 = u_xlat9;
    let x_201 : f32 = u_xlat2.x;
    u_xlat16.x = (x_199 * x_201);
    let x_206 : f32 = u_xlat1.x;
    u_xlatb23 = (1.0f < abs(x_206));
    let x_210 : f32 = u_xlat16.x;
    u_xlat16.x = ((x_210 * -2.0f) + 1.570796371f);
    let x_216 : bool = u_xlatb23;
    if (x_216) {
      let x_221 : f32 = u_xlat16.x;
      x_217 = x_221;
    } else {
      x_217 = 0.0f;
    }
    let x_223 : f32 = x_217;
    u_xlat16.x = x_223;
    let x_226 : f32 = u_xlat2.x;
    let x_227 : f32 = u_xlat9;
    let x_230 : f32 = u_xlat16.x;
    u_xlat2.x = ((x_226 * x_227) + x_230);
    let x_234 : f32 = u_xlat1.x;
    u_xlat1.x = min(x_234, 1.0f);
    let x_239 : f32 = u_xlat1.x;
    let x_241 : f32 = u_xlat1.x;
    u_xlatb1 = (x_239 < -(x_241));
    let x_244 : bool = u_xlatb1;
    if (x_244) {
      let x_249 : f32 = u_xlat2.x;
      x_245 = -(x_249);
    } else {
      let x_253 : f32 = u_xlat2.x;
      x_245 = x_253;
    }
    let x_254 : f32 = x_245;
    u_xlat1.x = x_254;
    let x_256 : f32 = u_xlat22;
    let x_258 : f32 = u_xlat1.x;
    u_xlat1.x = ((x_256 * x_258) + -1.0f);
    let x_262 : vec3<f32> = u_xlat0;
    let x_264 : vec4<f32> = u_xlat1;
    let x_267 : vec2<f32> = u_xlat14;
    let x_268 : vec2<f32> = ((vec2<f32>(x_262.x, x_262.y) * vec2<f32>(x_264.x, x_264.x)) + x_267);
    let x_269 : vec3<f32> = u_xlat8;
    u_xlat8 = vec3<f32>(x_268.x, x_268.y, x_269.z);
  }
  let x_281 : vec3<f32> = u_xlat8;
  let x_285 : f32 = x_26.x_GlobalMipBias.x;
  let x_286 : vec4<f32> = textureSampleBias(x_BlitTexture, sampler_LinearClamp, vec2<f32>(x_281.x, x_281.y), x_285);
  u_xlat0 = vec3<f32>(x_286.x, x_286.y, x_286.z);
  let x_288 : vec3<f32> = u_xlat8;
  let x_292 : vec4<f32> = x_26.x_Bloom_Texture_TexelSize;
  let x_295 : vec2<f32> = ((vec2<f32>(x_288.x, x_288.y) * vec2<f32>(x_292.z, x_292.w)) + vec2<f32>(0.5f, 0.5f));
  let x_296 : vec4<f32> = u_xlat1;
  u_xlat1 = vec4<f32>(x_295.x, x_296.y, x_296.z, x_295.y);
  let x_298 : vec4<f32> = u_xlat1;
  let x_300 : vec2<f32> = floor(vec2<f32>(x_298.x, x_298.w));
  let x_301 : vec4<f32> = u_xlat2;
  u_xlat2 = vec4<f32>(x_300.x, x_300.y, x_301.z, x_301.w);
  let x_303 : vec4<f32> = u_xlat1;
  let x_305 : vec2<f32> = fract(vec2<f32>(x_303.x, x_303.w));
  let x_306 : vec4<f32> = u_xlat1;
  u_xlat1 = vec4<f32>(x_305.x, x_306.y, x_306.z, x_305.y);
  let x_308 : vec4<f32> = u_xlat1;
  u_xlat3 = ((-(vec4<f32>(x_308.x, x_308.w, x_308.x, x_308.w)) * vec4<f32>(0.5f, 0.5f, 0.166666672f, 0.166666672f)) + vec4<f32>(0.5f, 0.5f, 0.5f, 0.5f));
  let x_316 : vec4<f32> = u_xlat1;
  let x_318 : vec4<f32> = u_xlat3;
  u_xlat3 = ((vec4<f32>(x_316.x, x_316.w, x_316.x, x_316.w) * x_318) + vec4<f32>(0.5f, 0.5f, -0.5f, -0.5f));
  let x_322 : vec4<f32> = u_xlat1;
  u_xlat16 = ((vec2<f32>(x_322.x, x_322.w) * vec2<f32>(0.5f, 0.5f)) + vec2<f32>(-1.0f, -1.0f));
  let x_328 : vec4<f32> = u_xlat1;
  let x_330 : vec4<f32> = u_xlat1;
  let x_332 : vec2<f32> = (vec2<f32>(x_328.x, x_328.w) * vec2<f32>(x_330.x, x_330.w));
  let x_333 : vec4<f32> = u_xlat4;
  u_xlat4 = vec4<f32>(x_332.x, x_332.y, x_333.z, x_333.w);
  let x_335 : vec4<f32> = u_xlat4;
  let x_337 : vec2<f32> = u_xlat16;
  u_xlat16 = ((vec2<f32>(x_335.x, x_335.y) * x_337) + vec2<f32>(0.666666687f, 0.666666687f));
  let x_342 : vec4<f32> = u_xlat1;
  let x_344 : vec4<f32> = u_xlat3;
  u_xlat3 = ((vec4<f32>(x_342.x, x_342.w, x_342.x, x_342.w) * x_344) + vec4<f32>(0.166666672f, 0.166666672f, 0.166666672f, 0.166666672f));
  let x_348 : vec2<f32> = u_xlat16;
  let x_351 : vec2<f32> = (-(x_348) + vec2<f32>(1.0f, 1.0f));
  let x_352 : vec4<f32> = u_xlat1;
  u_xlat1 = vec4<f32>(x_351.x, x_352.y, x_352.z, x_351.y);
  let x_354 : vec4<f32> = u_xlat3;
  let x_357 : vec4<f32> = u_xlat1;
  let x_359 : vec2<f32> = (-(vec2<f32>(x_354.x, x_354.y)) + vec2<f32>(x_357.x, x_357.w));
  let x_360 : vec4<f32> = u_xlat1;
  u_xlat1 = vec4<f32>(x_359.x, x_360.y, x_360.z, x_359.y);
  let x_362 : vec4<f32> = u_xlat3;
  let x_365 : vec4<f32> = u_xlat1;
  let x_367 : vec2<f32> = (-(vec2<f32>(x_362.z, x_362.w)) + vec2<f32>(x_365.x, x_365.w));
  let x_368 : vec4<f32> = u_xlat1;
  u_xlat1 = vec4<f32>(x_367.x, x_368.y, x_368.z, x_367.y);
  let x_371 : vec2<f32> = u_xlat16;
  let x_372 : vec4<f32> = u_xlat3;
  u_xlat17 = (x_371 + vec2<f32>(x_372.z, x_372.w));
  let x_375 : vec4<f32> = u_xlat1;
  let x_377 : vec4<f32> = u_xlat3;
  let x_379 : vec2<f32> = (vec2<f32>(x_375.x, x_375.w) + vec2<f32>(x_377.x, x_377.y));
  let x_380 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_379.x, x_379.y, x_380.z, x_380.w);
  let x_382 : vec2<f32> = u_xlat17;
  let x_386 : vec2<f32> = (vec2<f32>(1.0f, 1.0f) / vec2<f32>(x_382.x, x_382.y));
  let x_387 : vec4<f32> = u_xlat4;
  u_xlat4 = vec4<f32>(x_386.x, x_386.y, x_387.z, x_387.w);
  let x_389 : vec2<f32> = u_xlat16;
  let x_390 : vec4<f32> = u_xlat4;
  let x_393 : vec2<f32> = ((x_389 * vec2<f32>(x_390.x, x_390.y)) + vec2<f32>(-1.0f, -1.0f));
  let x_394 : vec4<f32> = u_xlat4;
  u_xlat4 = vec4<f32>(x_394.x, x_394.y, x_393.x, x_393.y);
  let x_396 : vec4<f32> = u_xlat3;
  let x_397 : vec2<f32> = vec2<f32>(x_396.x, x_396.y);
  u_xlat16 = (vec2<f32>(1.0f, 1.0f) / vec2<f32>(x_397.x, x_397.y));
  let x_402 : vec4<f32> = u_xlat1;
  let x_404 : vec2<f32> = u_xlat16;
  let x_406 : vec2<f32> = ((vec2<f32>(x_402.x, x_402.w) * x_404) + vec2<f32>(1.0f, 1.0f));
  let x_407 : vec4<f32> = u_xlat4;
  u_xlat4 = vec4<f32>(x_406.x, x_406.y, x_407.z, x_407.w);
  let x_410 : vec4<f32> = u_xlat2;
  let x_412 : vec4<f32> = u_xlat4;
  u_xlat5 = (vec4<f32>(x_410.x, x_410.y, x_410.x, x_410.y) + vec4<f32>(x_412.z, x_412.w, x_412.x, x_412.w));
  let x_415 : vec4<f32> = u_xlat5;
  u_xlat5 = (x_415 + vec4<f32>(-0.5f, -0.5f, -0.5f, -0.5f));
  let x_418 : vec4<f32> = u_xlat5;
  let x_420 : vec4<f32> = x_26.x_Bloom_Texture_TexelSize;
  u_xlat5 = (x_418 * vec4<f32>(x_420.x, x_420.y, x_420.x, x_420.y));
  let x_423 : vec4<f32> = u_xlat5;
  u_xlat5 = min(x_423, vec4<f32>(1.0f, 1.0f, 1.0f, 1.0f));
  let x_431 : vec4<f32> = u_xlat5;
  let x_433 : vec4<f32> = textureSampleLevel(x_Bloom_Texture, sampler_LinearClamp, vec2<f32>(x_431.x, x_431.y), 0.0f);
  u_xlat6 = x_433;
  let x_437 : vec4<f32> = u_xlat5;
  let x_439 : vec4<f32> = textureSampleLevel(x_Bloom_Texture, sampler_LinearClamp, vec2<f32>(x_437.z, x_437.w), 0.0f);
  u_xlat5 = x_439;
  let x_440 : vec4<f32> = u_xlat3;
  let x_442 : vec4<f32> = u_xlat5;
  u_xlat5 = (vec4<f32>(x_440.x, x_440.x, x_440.x, x_440.x) * x_442);
  let x_444 : vec2<f32> = u_xlat17;
  let x_446 : vec4<f32> = u_xlat6;
  let x_448 : vec4<f32> = u_xlat5;
  u_xlat5 = ((vec4<f32>(x_444.x, x_444.x, x_444.x, x_444.x) * x_446) + x_448);
  let x_450 : vec4<f32> = u_xlat2;
  let x_452 : vec4<f32> = u_xlat4;
  u_xlat2 = (vec4<f32>(x_450.x, x_450.y, x_450.x, x_450.y) + vec4<f32>(x_452.z, x_452.y, x_452.x, x_452.y));
  let x_455 : vec4<f32> = u_xlat2;
  u_xlat2 = (x_455 + vec4<f32>(-0.5f, -0.5f, -0.5f, -0.5f));
  let x_457 : vec4<f32> = u_xlat2;
  let x_459 : vec4<f32> = x_26.x_Bloom_Texture_TexelSize;
  u_xlat2 = (x_457 * vec4<f32>(x_459.x, x_459.y, x_459.x, x_459.y));
  let x_462 : vec4<f32> = u_xlat2;
  u_xlat2 = min(x_462, vec4<f32>(1.0f, 1.0f, 1.0f, 1.0f));
  let x_467 : vec4<f32> = u_xlat2;
  let x_469 : vec4<f32> = textureSampleLevel(x_Bloom_Texture, sampler_LinearClamp, vec2<f32>(x_467.x, x_467.y), 0.0f);
  u_xlat4 = x_469;
  let x_473 : vec4<f32> = u_xlat2;
  let x_475 : vec4<f32> = textureSampleLevel(x_Bloom_Texture, sampler_LinearClamp, vec2<f32>(x_473.z, x_473.w), 0.0f);
  u_xlat2 = x_475;
  let x_476 : vec4<f32> = u_xlat2;
  let x_477 : vec4<f32> = u_xlat3;
  u_xlat2 = (x_476 * vec4<f32>(x_477.x, x_477.x, x_477.x, x_477.x));
  let x_480 : vec2<f32> = u_xlat17;
  let x_482 : vec4<f32> = u_xlat4;
  let x_484 : vec4<f32> = u_xlat2;
  u_xlat2 = ((vec4<f32>(x_480.x, x_480.x, x_480.x, x_480.x) * x_482) + x_484);
  let x_486 : vec4<f32> = u_xlat2;
  let x_487 : vec4<f32> = u_xlat3;
  u_xlat2 = (x_486 * vec4<f32>(x_487.y, x_487.y, x_487.y, x_487.y));
  let x_490 : vec2<f32> = u_xlat17;
  let x_492 : vec4<f32> = u_xlat5;
  let x_494 : vec4<f32> = u_xlat2;
  u_xlat2 = ((vec4<f32>(x_490.y, x_490.y, x_490.y, x_490.y) * x_492) + x_494);
  let x_499 : f32 = x_26.x_Bloom_RGBM;
  u_xlatb21 = (0.0f < x_499);
  let x_501 : bool = u_xlatb21;
  if (x_501) {
    let x_504 : vec4<f32> = u_xlat2;
    let x_506 : vec4<f32> = u_xlat2;
    let x_508 : vec3<f32> = (vec3<f32>(x_504.w, x_504.w, x_504.w) * vec3<f32>(x_506.x, x_506.y, x_506.z));
    let x_509 : vec4<f32> = u_xlat3;
    u_xlat3 = vec4<f32>(x_508.x, x_508.y, x_508.z, x_509.w);
    let x_511 : vec4<f32> = u_xlat3;
    let x_515 : vec3<f32> = (vec3<f32>(x_511.x, x_511.y, x_511.z) * vec3<f32>(8.0f, 8.0f, 8.0f));
    let x_516 : vec4<f32> = u_xlat2;
    u_xlat2 = vec4<f32>(x_515.x, x_515.y, x_515.z, x_516.w);
  }
  let x_518 : vec4<f32> = u_xlat2;
  let x_522 : vec4<f32> = x_26.x_Bloom_Params;
  let x_524 : vec3<f32> = (vec3<f32>(x_518.x, x_518.y, x_518.z) * vec3<f32>(x_522.x, x_522.x, x_522.x));
  let x_525 : vec4<f32> = u_xlat2;
  u_xlat2 = vec4<f32>(x_524.x, x_524.y, x_524.z, x_525.w);
  let x_527 : vec4<f32> = u_xlat2;
  let x_530 : vec4<f32> = x_26.x_Bloom_Params;
  let x_533 : vec3<f32> = u_xlat0;
  u_xlat0 = ((vec3<f32>(x_527.x, x_527.y, x_527.z) * vec3<f32>(x_530.y, x_530.z, x_530.w)) + x_533);
  let x_538 : f32 = x_26.x_Vignette_Params2.z;
  u_xlatb21 = (0.0f < x_538);
  let x_540 : bool = u_xlatb21;
  if (x_540) {
    let x_543 : vec3<f32> = u_xlat8;
    let x_546 : vec4<f32> = x_26.x_Vignette_Params2;
    let x_549 : vec2<f32> = (vec2<f32>(x_543.x, x_543.y) + -(vec2<f32>(x_546.x, x_546.y)));
    let x_550 : vec4<f32> = u_xlat1;
    u_xlat1 = vec4<f32>(x_549.x, x_549.y, x_550.z, x_550.w);
    let x_552 : vec4<f32> = u_xlat1;
    let x_556 : vec4<f32> = x_26.x_Vignette_Params2;
    let x_558 : vec2<f32> = (abs(vec2<f32>(x_552.x, x_552.y)) * vec2<f32>(x_556.z, x_556.z));
    let x_559 : vec4<f32> = u_xlat1;
    u_xlat1 = vec4<f32>(x_559.x, x_558.x, x_558.y, x_559.w);
    let x_562 : f32 = u_xlat1.y;
    let x_565 : f32 = x_26.x_Vignette_Params1.w;
    u_xlat1.x = (x_562 * x_565);
    let x_569 : vec4<f32> = u_xlat1;
    let x_571 : vec4<f32> = u_xlat1;
    u_xlat21 = dot(vec2<f32>(x_569.x, x_569.z), vec2<f32>(x_571.x, x_571.z));
    let x_574 : f32 = u_xlat21;
    u_xlat21 = (-(x_574) + 1.0f);
    let x_577 : f32 = u_xlat21;
    u_xlat21 = max(x_577, 0.0f);
    let x_579 : f32 = u_xlat21;
    u_xlat21 = log2(x_579);
    let x_581 : f32 = u_xlat21;
    let x_583 : f32 = x_26.x_Vignette_Params2.w;
    u_xlat21 = (x_581 * x_583);
    let x_585 : f32 = u_xlat21;
    u_xlat21 = exp2(x_585);
    let x_588 : vec4<f32> = x_26.x_Vignette_Params1;
    let x_592 : vec3<f32> = (-(vec3<f32>(x_588.x, x_588.y, x_588.z)) + vec3<f32>(1.0f, 1.0f, 1.0f));
    let x_593 : vec4<f32> = u_xlat1;
    u_xlat1 = vec4<f32>(x_592.x, x_592.y, x_592.z, x_593.w);
    let x_595 : f32 = u_xlat21;
    let x_597 : vec4<f32> = u_xlat1;
    let x_601 : vec4<f32> = x_26.x_Vignette_Params1;
    let x_603 : vec3<f32> = ((vec3<f32>(x_595, x_595, x_595) * vec3<f32>(x_597.x, x_597.y, x_597.z)) + vec3<f32>(x_601.x, x_601.y, x_601.z));
    let x_604 : vec4<f32> = u_xlat1;
    u_xlat1 = vec4<f32>(x_603.x, x_603.y, x_603.z, x_604.w);
    let x_606 : vec3<f32> = u_xlat0;
    let x_607 : vec4<f32> = u_xlat1;
    u_xlat0 = (x_606 * vec3<f32>(x_607.x, x_607.y, x_607.z));
  }
  let x_610 : vec3<f32> = u_xlat0;
  let x_613 : vec4<f32> = x_26.x_Lut_Params;
  u_xlat0 = (x_610 * vec3<f32>(x_613.w, x_613.w, x_613.w));
  let x_620 : vec3<f32> = u_xlat0;
  u_xlat8.x = dot(vec3<f32>(0.439700991f, 0.382977992f, 0.177334994f), x_620);
  let x_627 : vec3<f32> = u_xlat0;
  u_xlat8.y = dot(vec3<f32>(0.089792296f, 0.813422978f, 0.096761599f), x_627);
  let x_634 : vec3<f32> = u_xlat0;
  u_xlat8.z = dot(vec3<f32>(0.017543999f, 0.111543998f, 0.870703995f), x_634);
  let x_638 : f32 = u_xlat8.y;
  let x_640 : f32 = u_xlat8.x;
  u_xlat0.x = min(x_638, x_640);
  let x_644 : f32 = u_xlat8.z;
  let x_646 : f32 = u_xlat0.x;
  u_xlat0.x = min(x_644, x_646);
  let x_651 : f32 = u_xlat8.y;
  let x_653 : f32 = u_xlat8.x;
  u_xlat7.x = max(x_651, x_653);
  let x_657 : f32 = u_xlat8.z;
  let x_659 : f32 = u_xlat7.x;
  u_xlat0.y = max(x_657, x_659);
  let x_662 : vec3<f32> = u_xlat0;
  u_xlat0 = max(vec3<f32>(x_662.x, x_662.y, x_662.y), vec3<f32>(0.0001f, 0.0001f, 0.01f));
  let x_669 : f32 = u_xlat0.x;
  let x_672 : f32 = u_xlat0.y;
  u_xlat0.x = (-(x_669) + x_672);
  let x_676 : f32 = u_xlat0.x;
  let x_678 : f32 = u_xlat0.z;
  u_xlat0.x = (x_676 / x_678);
  let x_681 : vec3<f32> = u_xlat8;
  let x_684 : vec3<f32> = u_xlat8;
  u_xlat7 = (-(vec3<f32>(x_681.y, x_681.x, x_681.z)) + vec3<f32>(x_684.z, x_684.y, x_684.x));
  let x_687 : vec3<f32> = u_xlat7;
  let x_689 : vec3<f32> = u_xlat8;
  let x_691 : vec2<f32> = (vec2<f32>(x_687.x, x_687.y) * vec2<f32>(x_689.z, x_689.y));
  let x_692 : vec3<f32> = u_xlat7;
  u_xlat7 = vec3<f32>(x_691.x, x_691.y, x_692.z);
  let x_695 : f32 = u_xlat7.y;
  let x_697 : f32 = u_xlat7.x;
  u_xlat7.x = (x_695 + x_697);
  let x_701 : f32 = u_xlat8.x;
  let x_703 : f32 = u_xlat7.z;
  let x_706 : f32 = u_xlat7.x;
  u_xlat7.x = ((x_701 * x_703) + x_706);
  let x_710 : f32 = u_xlat7.x;
  u_xlat7.x = max(x_710, 0.0f);
  let x_714 : f32 = u_xlat7.x;
  u_xlat7.x = sqrt(x_714);
  let x_718 : f32 = u_xlat8.y;
  let x_720 : f32 = u_xlat8.z;
  u_xlat14.x = (x_718 + x_720);
  let x_724 : f32 = u_xlat8.x;
  let x_726 : f32 = u_xlat14.x;
  u_xlat14.x = (x_724 + x_726);
  let x_730 : f32 = u_xlat7.x;
  let x_734 : f32 = u_xlat14.x;
  u_xlat7.x = ((x_730 * 1.75f) + x_734);
  let x_738 : f32 = u_xlat0.x;
  u_xlat21 = (x_738 + -0.400000006f);
  let x_741 : f32 = u_xlat21;
  u_xlat1.x = (x_741 * 2.5f);
  let x_746 : f32 = u_xlat1.x;
  u_xlat1.x = (-(abs(x_746)) + 1.0f);
  let x_752 : f32 = u_xlat1.x;
  u_xlat1.x = max(x_752, 0.0f);
  let x_755 : f32 = u_xlat21;
  u_xlatb21 = (x_755 >= 0.0f);
  let x_757 : bool = u_xlatb21;
  u_xlat21 = select(-1.0f, 1.0f, x_757);
  let x_760 : f32 = u_xlat1.x;
  let x_763 : f32 = u_xlat1.x;
  u_xlat1.x = ((-(x_760) * x_763) + 1.0f);
  let x_767 : f32 = u_xlat21;
  let x_769 : f32 = u_xlat1.x;
  u_xlat7.z = ((x_767 * x_769) + 1.0f);
  let x_773 : vec3<f32> = u_xlat7;
  u_xlat14 = (vec2<f32>(x_773.x, x_773.z) * vec2<f32>(0.333333343f, 0.025f));
  let x_781 : f32 = u_xlat7.x;
  u_xlatb1 = (0.159999996f >= x_781);
  let x_785 : f32 = u_xlat7.x;
  u_xlatb7 = (x_785 >= 0.479999989f);
  let x_790 : f32 = u_xlat14.x;
  u_xlat14.x = (0.079999998f / x_790);
  let x_794 : f32 = u_xlat14.x;
  u_xlat14.x = (x_794 + -0.5f);
  let x_798 : f32 = u_xlat14.x;
  let x_800 : f32 = u_xlat14.y;
  u_xlat14.x = (x_798 * x_800);
  let x_803 : bool = u_xlatb7;
  if (x_803) {
    x_804 = 0.0f;
  } else {
    let x_809 : f32 = u_xlat14.x;
    x_804 = x_809;
  }
  let x_810 : f32 = x_804;
  u_xlat7.x = x_810;
  let x_812 : bool = u_xlatb1;
  if (x_812) {
    let x_817 : f32 = u_xlat14.y;
    x_813 = x_817;
  } else {
    let x_820 : f32 = u_xlat7.x;
    x_813 = x_820;
  }
  let x_821 : f32 = x_813;
  u_xlat7.x = x_821;
  let x_824 : f32 = u_xlat7.x;
  u_xlat7.x = (x_824 + 1.0f);
  let x_827 : vec3<f32> = u_xlat7;
  let x_829 : vec3<f32> = u_xlat8;
  let x_830 : vec3<f32> = (vec3<f32>(x_827.x, x_827.x, x_827.x) * x_829);
  let x_831 : vec4<f32> = u_xlat2;
  u_xlat2 = vec4<f32>(x_831.x, x_830.x, x_830.y, x_830.z);
  let x_836 : vec4<f32> = u_xlat2;
  let x_838 : vec4<f32> = u_xlat2;
  let x_841 : vec4<bool> = (vec4<f32>(x_836.z, x_836.w, x_836.z, x_836.w) == vec4<f32>(x_838.y, x_838.z, x_838.y, x_838.z));
  u_xlatb14 = vec2<bool>(x_841.x, x_841.y);
  let x_844 : bool = u_xlatb14.y;
  let x_846 : bool = u_xlatb14.x;
  u_xlatb14.x = (x_844 & x_846);
  let x_850 : f32 = u_xlat8.y;
  let x_852 : f32 = u_xlat7.x;
  let x_855 : f32 = u_xlat2.w;
  u_xlat21 = ((x_850 * x_852) + -(x_855));
  let x_858 : f32 = u_xlat21;
  u_xlat21 = (x_858 * 1.732050776f);
  let x_862 : f32 = u_xlat2.y;
  let x_866 : f32 = u_xlat2.z;
  u_xlat1.x = ((x_862 * 2.0f) + -(x_866));
  let x_871 : f32 = u_xlat8.z;
  let x_874 : f32 = u_xlat7.x;
  let x_877 : f32 = u_xlat1.x;
  u_xlat1.x = ((-(x_871) * x_874) + x_877);
  let x_880 : f32 = u_xlat21;
  let x_883 : f32 = u_xlat1.x;
  u_xlat15.x = min(abs(x_880), abs(x_883));
  let x_887 : f32 = u_xlat21;
  let x_890 : f32 = u_xlat1.x;
  u_xlat22 = max(abs(x_887), abs(x_890));
  let x_893 : f32 = u_xlat22;
  u_xlat22 = (1.0f / x_893);
  let x_895 : f32 = u_xlat22;
  let x_897 : f32 = u_xlat15.x;
  u_xlat15.x = (x_895 * x_897);
  let x_901 : f32 = u_xlat15.x;
  let x_903 : f32 = u_xlat15.x;
  u_xlat22 = (x_901 * x_903);
  let x_905 : f32 = u_xlat22;
  u_xlat3.x = ((x_905 * 0.0208351f) + -0.085133001f);
  let x_909 : f32 = u_xlat22;
  let x_911 : f32 = u_xlat3.x;
  u_xlat3.x = ((x_909 * x_911) + 0.180141002f);
  let x_915 : f32 = u_xlat22;
  let x_917 : f32 = u_xlat3.x;
  u_xlat3.x = ((x_915 * x_917) + -0.330299497f);
  let x_921 : f32 = u_xlat22;
  let x_923 : f32 = u_xlat3.x;
  u_xlat22 = ((x_921 * x_923) + 0.999866009f);
  let x_926 : f32 = u_xlat22;
  let x_928 : f32 = u_xlat15.x;
  u_xlat3.x = (x_926 * x_928);
  let x_933 : f32 = u_xlat1.x;
  let x_935 : f32 = u_xlat21;
  u_xlatb10 = (abs(x_933) < abs(x_935));
  let x_939 : f32 = u_xlat3.x;
  u_xlat3.x = ((x_939 * -2.0f) + 1.570796371f);
  let x_943 : bool = u_xlatb10;
  if (x_943) {
    let x_948 : f32 = u_xlat3.x;
    x_944 = x_948;
  } else {
    x_944 = 0.0f;
  }
  let x_950 : f32 = x_944;
  u_xlat3.x = x_950;
  let x_953 : f32 = u_xlat15.x;
  let x_954 : f32 = u_xlat22;
  let x_957 : f32 = u_xlat3.x;
  u_xlat15.x = ((x_953 * x_954) + x_957);
  let x_962 : f32 = u_xlat1.x;
  let x_964 : f32 = u_xlat1.x;
  u_xlatb22 = (x_962 < -(x_964));
  let x_967 : bool = u_xlatb22;
  u_xlat22 = select(0.0f, -3.141592741f, x_967);
  let x_970 : f32 = u_xlat22;
  let x_972 : f32 = u_xlat15.x;
  u_xlat15.x = (x_970 + x_972);
  let x_975 : f32 = u_xlat21;
  let x_977 : f32 = u_xlat1.x;
  u_xlat22 = min(x_975, x_977);
  let x_979 : f32 = u_xlat21;
  let x_981 : f32 = u_xlat1.x;
  u_xlat21 = max(x_979, x_981);
  let x_983 : f32 = u_xlat22;
  let x_984 : f32 = u_xlat22;
  u_xlatb1 = (x_983 < -(x_984));
  let x_987 : f32 = u_xlat21;
  let x_988 : f32 = u_xlat21;
  u_xlatb21 = (x_987 >= -(x_988));
  let x_991 : bool = u_xlatb21;
  let x_992 : bool = u_xlatb1;
  u_xlatb21 = (x_991 & x_992);
  let x_994 : bool = u_xlatb21;
  if (x_994) {
    let x_999 : f32 = u_xlat15.x;
    x_995 = -(x_999);
  } else {
    let x_1003 : f32 = u_xlat15.x;
    x_995 = x_1003;
  }
  let x_1004 : f32 = x_995;
  u_xlat21 = x_1004;
  let x_1005 : f32 = u_xlat21;
  u_xlat21 = (x_1005 * 57.295780182f);
  let x_1009 : bool = u_xlatb14.x;
  let x_1010 : f32 = u_xlat21;
  u_xlat14.x = select(x_1010, 0.0f, x_1009);
  let x_1014 : f32 = u_xlat14.x;
  u_xlatb21 = (x_1014 < 0.0f);
  let x_1017 : f32 = u_xlat14.x;
  u_xlat1.x = (x_1017 + 360.0f);
  let x_1021 : bool = u_xlatb21;
  if (x_1021) {
    let x_1026 : f32 = u_xlat1.x;
    x_1022 = x_1026;
  } else {
    let x_1029 : f32 = u_xlat14.x;
    x_1022 = x_1029;
  }
  let x_1030 : f32 = x_1022;
  u_xlat14.x = x_1030;
  let x_1033 : f32 = u_xlat14.x;
  u_xlatb21 = (x_1033 < -180.0f);
  let x_1038 : f32 = u_xlat14.x;
  u_xlatb1 = (180.0f < x_1038);
  let x_1040 : vec2<f32> = u_xlat14;
  u_xlat15 = (vec2<f32>(x_1040.x, x_1040.x) + vec2<f32>(360.0f, -360.0f));
  let x_1045 : bool = u_xlatb1;
  if (x_1045) {
    let x_1050 : f32 = u_xlat15.y;
    x_1046 = x_1050;
  } else {
    let x_1053 : f32 = u_xlat14.x;
    x_1046 = x_1053;
  }
  let x_1054 : f32 = x_1046;
  u_xlat14.x = x_1054;
  let x_1056 : bool = u_xlatb21;
  if (x_1056) {
    let x_1061 : f32 = u_xlat15.x;
    x_1057 = x_1061;
  } else {
    let x_1064 : f32 = u_xlat14.x;
    x_1057 = x_1064;
  }
  let x_1065 : f32 = x_1057;
  u_xlat14.x = x_1065;
  let x_1068 : f32 = u_xlat14.x;
  u_xlat14.x = (x_1068 * 0.014814815f);
  let x_1073 : f32 = u_xlat14.x;
  u_xlat14.x = (-(abs(x_1073)) + 1.0f);
  let x_1079 : f32 = u_xlat14.x;
  u_xlat14.x = max(x_1079, 0.0f);
  let x_1083 : f32 = u_xlat14.x;
  u_xlat21 = ((x_1083 * -2.0f) + 3.0f);
  let x_1088 : f32 = u_xlat14.x;
  let x_1090 : f32 = u_xlat14.x;
  u_xlat14.x = (x_1088 * x_1090);
  let x_1094 : f32 = u_xlat14.x;
  let x_1095 : f32 = u_xlat21;
  u_xlat14.x = (x_1094 * x_1095);
  let x_1099 : f32 = u_xlat14.x;
  let x_1101 : f32 = u_xlat14.x;
  u_xlat14.x = (x_1099 * x_1101);
  let x_1105 : f32 = u_xlat0.x;
  let x_1107 : f32 = u_xlat14.x;
  u_xlat0.x = (x_1105 * x_1107);
  let x_1111 : f32 = u_xlat8.x;
  let x_1114 : f32 = u_xlat7.x;
  u_xlat7.x = ((-(x_1111) * x_1114) + 0.029999999f);
  let x_1120 : f32 = u_xlat7.x;
  let x_1122 : f32 = u_xlat0.x;
  u_xlat0.x = (x_1120 * x_1122);
  let x_1126 : f32 = u_xlat0.x;
  let x_1130 : f32 = u_xlat2.y;
  u_xlat2.x = ((x_1126 * 0.180000007f) + x_1130);
  let x_1137 : vec4<f32> = u_xlat2;
  u_xlat0.x = dot(vec3<f32>(1.451439261f, -0.236510754f, -0.214928567f), vec3<f32>(x_1137.x, x_1137.z, x_1137.w));
  let x_1145 : vec4<f32> = u_xlat2;
  u_xlat0.y = dot(vec3<f32>(-0.076553777f, 1.176229715f, -0.099675924f), vec3<f32>(x_1145.x, x_1145.z, x_1145.w));
  let x_1153 : vec4<f32> = u_xlat2;
  u_xlat0.z = dot(vec3<f32>(0.008316148f, -0.00603244966f, 0.997716308f), vec3<f32>(x_1153.x, x_1153.z, x_1153.w));
  let x_1157 : vec3<f32> = u_xlat0;
  u_xlat0 = max(x_1157, vec3<f32>(0.0f, 0.0f, 0.0f));
  let x_1160 : vec3<f32> = u_xlat0;
  u_xlat21 = dot(x_1160, vec3<f32>(0.272228986f, 0.674081981f, 0.053689498f));
  let x_1166 : f32 = u_xlat21;
  let x_1169 : vec3<f32> = u_xlat0;
  u_xlat0 = (-(vec3<f32>(x_1166, x_1166, x_1166)) + x_1169);
  let x_1171 : vec3<f32> = u_xlat0;
  let x_1175 : f32 = u_xlat21;
  u_xlat0 = ((x_1171 * vec3<f32>(0.959999979f, 0.959999979f, 0.959999979f)) + vec3<f32>(x_1175, x_1175, x_1175));
  let x_1178 : vec3<f32> = u_xlat0;
  let x_1181 : vec3<f32> = (x_1178 + vec3<f32>(0.024578599f, 0.024578599f, 0.024578599f));
  let x_1182 : vec4<f32> = u_xlat1;
  u_xlat1 = vec4<f32>(x_1181.x, x_1181.y, x_1181.z, x_1182.w);
  let x_1184 : vec3<f32> = u_xlat0;
  let x_1185 : vec4<f32> = u_xlat1;
  let x_1190 : vec3<f32> = ((x_1184 * vec3<f32>(x_1185.x, x_1185.y, x_1185.z)) + vec3<f32>(-0.000090537f, -0.000090537f, -0.000090537f));
  let x_1191 : vec4<f32> = u_xlat1;
  u_xlat1 = vec4<f32>(x_1190.x, x_1190.y, x_1190.z, x_1191.w);
  let x_1193 : vec3<f32> = u_xlat0;
  let x_1199 : vec3<f32> = ((x_1193 * vec3<f32>(0.983729005f, 0.983729005f, 0.983729005f)) + vec3<f32>(0.432951003f, 0.432951003f, 0.432951003f));
  let x_1200 : vec4<f32> = u_xlat2;
  u_xlat2 = vec4<f32>(x_1199.x, x_1199.y, x_1199.z, x_1200.w);
  let x_1202 : vec3<f32> = u_xlat0;
  let x_1203 : vec4<f32> = u_xlat2;
  u_xlat0 = ((x_1202 * vec3<f32>(x_1203.x, x_1203.y, x_1203.z)) + vec3<f32>(0.238080993f, 0.238080993f, 0.238080993f));
  let x_1209 : vec4<f32> = u_xlat1;
  let x_1211 : vec3<f32> = u_xlat0;
  u_xlat0 = (vec3<f32>(x_1209.x, x_1209.y, x_1209.z) / x_1211);
  let x_1217 : vec3<f32> = u_xlat0;
  u_xlat1.x = dot(vec3<f32>(0.662454188f, 0.134004205f, 0.156187683f), x_1217);
  let x_1224 : vec3<f32> = u_xlat0;
  u_xlat1.y = dot(vec3<f32>(0.272228718f, 0.674081743f, 0.053689517f), x_1224);
  let x_1231 : vec3<f32> = u_xlat0;
  u_xlat1.z = dot(vec3<f32>(-0.00557464967f, 0.0040607336f, 1.010339141f), x_1231);
  let x_1234 : vec4<f32> = u_xlat1;
  u_xlat0.x = dot(vec3<f32>(x_1234.x, x_1234.y, x_1234.z), vec3<f32>(1.0f, 1.0f, 1.0f));
  let x_1239 : f32 = u_xlat0.x;
  u_xlat0.x = max(x_1239, 0.0001f);
  let x_1242 : vec4<f32> = u_xlat1;
  let x_1244 : vec3<f32> = u_xlat0;
  let x_1246 : vec2<f32> = (vec2<f32>(x_1242.x, x_1242.y) / vec2<f32>(x_1244.x, x_1244.x));
  let x_1247 : vec3<f32> = u_xlat0;
  u_xlat0 = vec3<f32>(x_1246.x, x_1246.y, x_1247.z);
  let x_1250 : f32 = u_xlat1.y;
  u_xlat21 = max(x_1250, 0.0f);
  let x_1252 : f32 = u_xlat21;
  u_xlat21 = min(x_1252, 65504.0f);
  let x_1255 : f32 = u_xlat21;
  u_xlat21 = log2(x_1255);
  let x_1257 : f32 = u_xlat21;
  u_xlat21 = (x_1257 * 0.981100023f);
  let x_1260 : f32 = u_xlat21;
  u_xlat1.y = exp2(x_1260);
  let x_1264 : f32 = u_xlat0.y;
  u_xlat21 = max(x_1264, 0.0001f);
  let x_1267 : f32 = u_xlat1.y;
  let x_1268 : f32 = u_xlat21;
  u_xlat21 = (x_1267 / x_1268);
  let x_1271 : f32 = u_xlat0.x;
  u_xlat22 = (-(x_1271) + 1.0f);
  let x_1275 : f32 = u_xlat0.y;
  let x_1277 : f32 = u_xlat22;
  u_xlat0.z = (-(x_1275) + x_1277);
  let x_1280 : f32 = u_xlat21;
  let x_1282 : vec3<f32> = u_xlat0;
  let x_1284 : vec2<f32> = (vec2<f32>(x_1280, x_1280) * vec2<f32>(x_1282.x, x_1282.z));
  let x_1285 : vec4<f32> = u_xlat1;
  u_xlat1 = vec4<f32>(x_1284.x, x_1285.y, x_1284.y, x_1285.w);
  let x_1291 : vec4<f32> = u_xlat1;
  u_xlat0.x = dot(vec3<f32>(1.641023397f, -0.324803293f, -0.236424699f), vec3<f32>(x_1291.x, x_1291.y, x_1291.z));
  let x_1299 : vec4<f32> = u_xlat1;
  u_xlat0.y = dot(vec3<f32>(-0.663662851f, 1.61533165f, 0.016756348f), vec3<f32>(x_1299.x, x_1299.y, x_1299.z));
  let x_1307 : vec4<f32> = u_xlat1;
  u_xlat0.z = dot(vec3<f32>(0.011721894f, -0.008284442f, 0.988394856f), vec3<f32>(x_1307.x, x_1307.y, x_1307.z));
  let x_1311 : vec3<f32> = u_xlat0;
  u_xlat21 = dot(x_1311, vec3<f32>(0.272228986f, 0.674081981f, 0.053689498f));
  let x_1313 : f32 = u_xlat21;
  let x_1316 : vec3<f32> = u_xlat0;
  u_xlat0 = (-(vec3<f32>(x_1313, x_1313, x_1313)) + x_1316);
  let x_1318 : vec3<f32> = u_xlat0;
  let x_1322 : f32 = u_xlat21;
  u_xlat0 = ((x_1318 * vec3<f32>(0.930000007f, 0.930000007f, 0.930000007f)) + vec3<f32>(x_1322, x_1322, x_1322));
  let x_1325 : vec3<f32> = u_xlat0;
  u_xlat1.x = dot(vec3<f32>(0.662454188f, 0.134004205f, 0.156187683f), x_1325);
  let x_1328 : vec3<f32> = u_xlat0;
  u_xlat1.y = dot(vec3<f32>(0.272228718f, 0.674081743f, 0.053689517f), x_1328);
  let x_1331 : vec3<f32> = u_xlat0;
  u_xlat1.z = dot(vec3<f32>(-0.00557464967f, 0.0040607336f, 1.010339141f), x_1331);
  let x_1338 : vec4<f32> = u_xlat1;
  u_xlat0.x = dot(vec3<f32>(0.987223983f, -0.00611327f, 0.015953301f), vec3<f32>(x_1338.x, x_1338.y, x_1338.z));
  let x_1346 : vec4<f32> = u_xlat1;
  u_xlat0.y = dot(vec3<f32>(-0.00759836f, 1.001860023f, 0.0053302f), vec3<f32>(x_1346.x, x_1346.y, x_1346.z));
  let x_1354 : vec4<f32> = u_xlat1;
  u_xlat0.z = dot(vec3<f32>(0.00307257f, -0.00509595f, 1.081680059f), vec3<f32>(x_1354.x, x_1354.y, x_1354.z));
  let x_1362 : vec3<f32> = u_xlat0;
  u_xlat1.x = dot(vec3<f32>(3.240969896f, -1.537383199f, -0.498610765f), x_1362);
  let x_1366 : f32 = u_xlat1.x;
  u_xlat1.x = clamp(x_1366, 0.0f, 1.0f);
  let x_1373 : vec3<f32> = u_xlat0;
  u_xlat1.y = dot(vec3<f32>(-0.969243646f, 1.875967503f, 0.041555058f), x_1373);
  let x_1377 : f32 = u_xlat1.y;
  u_xlat1.y = clamp(x_1377, 0.0f, 1.0f);
  let x_1384 : vec3<f32> = u_xlat0;
  u_xlat1.z = dot(vec3<f32>(0.05563008f, -0.203976959f, 1.05697155f), x_1384);
  let x_1388 : f32 = u_xlat1.z;
  u_xlat1.z = clamp(x_1388, 0.0f, 1.0f);
  let x_1396 : f32 = x_26.x_UserLut_Params.w;
  u_xlatb0.x = (0.0f < x_1396);
  let x_1400 : bool = u_xlatb0.x;
  if (x_1400) {
    let x_1403 : vec4<f32> = u_xlat1;
    u_xlat0 = (vec3<f32>(x_1403.x, x_1403.y, x_1403.z) * vec3<f32>(12.920000076f, 12.920000076f, 12.920000076f));
    let x_1408 : vec4<f32> = u_xlat1;
    let x_1410 : vec3<f32> = log2(vec3<f32>(x_1408.x, x_1408.y, x_1408.z));
    let x_1411 : vec4<f32> = u_xlat2;
    u_xlat2 = vec4<f32>(x_1410.x, x_1410.y, x_1410.z, x_1411.w);
    let x_1413 : vec4<f32> = u_xlat2;
    let x_1417 : vec3<f32> = (vec3<f32>(x_1413.x, x_1413.y, x_1413.z) * vec3<f32>(0.416666657f, 0.416666657f, 0.416666657f));
    let x_1418 : vec4<f32> = u_xlat2;
    u_xlat2 = vec4<f32>(x_1417.x, x_1417.y, x_1417.z, x_1418.w);
    let x_1420 : vec4<f32> = u_xlat2;
    let x_1422 : vec3<f32> = exp2(vec3<f32>(x_1420.x, x_1420.y, x_1420.z));
    let x_1423 : vec4<f32> = u_xlat2;
    u_xlat2 = vec4<f32>(x_1422.x, x_1422.y, x_1422.z, x_1423.w);
    let x_1425 : vec4<f32> = u_xlat2;
    let x_1432 : vec3<f32> = ((vec3<f32>(x_1425.x, x_1425.y, x_1425.z) * vec3<f32>(1.054999948f, 1.054999948f, 1.054999948f)) + vec3<f32>(-0.055f, -0.055f, -0.055f));
    let x_1433 : vec4<f32> = u_xlat2;
    u_xlat2 = vec4<f32>(x_1432.x, x_1432.y, x_1432.z, x_1433.w);
    let x_1438 : vec4<f32> = u_xlat1;
    let x_1440 : vec4<bool> = (vec4<f32>(0.0031308f, 0.0031308f, 0.0031308f, 0.0f) >= vec4<f32>(x_1438.x, x_1438.y, x_1438.z, x_1438.x));
    u_xlatb3 = vec3<bool>(x_1440.x, x_1440.y, x_1440.z);
    let x_1443 : vec3<f32> = u_xlat0;
    hlslcc_movcTemp = x_1443;
    let x_1445 : bool = u_xlatb3.x;
    if (x_1445) {
      let x_1450 : f32 = u_xlat0.x;
      x_1446 = x_1450;
    } else {
      let x_1453 : f32 = u_xlat2.x;
      x_1446 = x_1453;
    }
    let x_1454 : f32 = x_1446;
    hlslcc_movcTemp.x = x_1454;
    let x_1457 : bool = u_xlatb3.y;
    if (x_1457) {
      let x_1462 : f32 = u_xlat0.y;
      x_1458 = x_1462;
    } else {
      let x_1465 : f32 = u_xlat2.y;
      x_1458 = x_1465;
    }
    let x_1466 : f32 = x_1458;
    hlslcc_movcTemp.y = x_1466;
    let x_1469 : bool = u_xlatb3.z;
    if (x_1469) {
      let x_1474 : f32 = u_xlat0.z;
      x_1470 = x_1474;
    } else {
      let x_1477 : f32 = u_xlat2.z;
      x_1470 = x_1477;
    }
    let x_1478 : f32 = x_1470;
    hlslcc_movcTemp.z = x_1478;
    let x_1480 : vec3<f32> = hlslcc_movcTemp;
    u_xlat0 = x_1480;
    let x_1481 : vec3<f32> = u_xlat0;
    let x_1484 : vec4<f32> = x_26.x_UserLut_Params;
    let x_1486 : vec3<f32> = (vec3<f32>(x_1481.z, x_1481.x, x_1481.y) * vec3<f32>(x_1484.z, x_1484.z, x_1484.z));
    let x_1487 : vec4<f32> = u_xlat2;
    u_xlat2 = vec4<f32>(x_1486.x, x_1486.y, x_1486.z, x_1487.w);
    let x_1490 : f32 = u_xlat2.x;
    u_xlat21 = floor(x_1490);
    let x_1493 : vec4<f32> = x_26.x_UserLut_Params;
    let x_1495 : vec2<f32> = (vec2<f32>(x_1493.x, x_1493.y) * vec2<f32>(0.5f, 0.5f));
    let x_1496 : vec4<f32> = u_xlat2;
    u_xlat2 = vec4<f32>(x_1495.x, x_1496.y, x_1496.z, x_1495.y);
    let x_1498 : vec4<f32> = u_xlat2;
    let x_1501 : vec4<f32> = x_26.x_UserLut_Params;
    let x_1504 : vec4<f32> = u_xlat2;
    let x_1506 : vec2<f32> = ((vec2<f32>(x_1498.y, x_1498.z) * vec2<f32>(x_1501.x, x_1501.y)) + vec2<f32>(x_1504.x, x_1504.w));
    let x_1507 : vec4<f32> = u_xlat2;
    u_xlat2 = vec4<f32>(x_1507.x, x_1506.x, x_1506.y, x_1507.w);
    let x_1509 : f32 = u_xlat21;
    let x_1511 : f32 = x_26.x_UserLut_Params.y;
    let x_1514 : f32 = u_xlat2.y;
    u_xlat2.x = ((x_1509 * x_1511) + x_1514);
    let x_1521 : vec4<f32> = u_xlat2;
    let x_1523 : vec4<f32> = textureSampleLevel(x_UserLut, sampler_LinearClamp, vec2<f32>(x_1521.x, x_1521.z), 0.0f);
    let x_1524 : vec3<f32> = vec3<f32>(x_1523.x, x_1523.y, x_1523.z);
    let x_1525 : vec4<f32> = u_xlat3;
    u_xlat3 = vec4<f32>(x_1524.x, x_1524.y, x_1524.z, x_1525.w);
    let x_1528 : f32 = x_26.x_UserLut_Params.y;
    u_xlat4.x = x_1528;
    u_xlat4.y = 0.0f;
    let x_1531 : vec4<f32> = u_xlat2;
    let x_1533 : vec4<f32> = u_xlat4;
    let x_1535 : vec2<f32> = (vec2<f32>(x_1531.x, x_1531.z) + vec2<f32>(x_1533.x, x_1533.y));
    let x_1536 : vec4<f32> = u_xlat2;
    u_xlat2 = vec4<f32>(x_1535.x, x_1535.y, x_1536.z, x_1536.w);
    let x_1541 : vec4<f32> = u_xlat2;
    let x_1543 : vec4<f32> = textureSampleLevel(x_UserLut, sampler_LinearClamp, vec2<f32>(x_1541.x, x_1541.y), 0.0f);
    let x_1544 : vec3<f32> = vec3<f32>(x_1543.x, x_1543.y, x_1543.z);
    let x_1545 : vec4<f32> = u_xlat2;
    u_xlat2 = vec4<f32>(x_1544.x, x_1544.y, x_1544.z, x_1545.w);
    let x_1548 : f32 = u_xlat0.z;
    let x_1550 : f32 = x_26.x_UserLut_Params.z;
    let x_1552 : f32 = u_xlat21;
    u_xlat21 = ((x_1548 * x_1550) + -(x_1552));
    let x_1555 : vec4<f32> = u_xlat3;
    let x_1558 : vec4<f32> = u_xlat2;
    let x_1560 : vec3<f32> = (-(vec3<f32>(x_1555.x, x_1555.y, x_1555.z)) + vec3<f32>(x_1558.x, x_1558.y, x_1558.z));
    let x_1561 : vec4<f32> = u_xlat2;
    u_xlat2 = vec4<f32>(x_1560.x, x_1560.y, x_1560.z, x_1561.w);
    let x_1563 : f32 = u_xlat21;
    let x_1565 : vec4<f32> = u_xlat2;
    let x_1568 : vec4<f32> = u_xlat3;
    let x_1570 : vec3<f32> = ((vec3<f32>(x_1563, x_1563, x_1563) * vec3<f32>(x_1565.x, x_1565.y, x_1565.z)) + vec3<f32>(x_1568.x, x_1568.y, x_1568.z));
    let x_1571 : vec4<f32> = u_xlat2;
    u_xlat2 = vec4<f32>(x_1570.x, x_1570.y, x_1570.z, x_1571.w);
    let x_1573 : vec3<f32> = u_xlat0;
    let x_1575 : vec4<f32> = u_xlat2;
    let x_1577 : vec3<f32> = (-(x_1573) + vec3<f32>(x_1575.x, x_1575.y, x_1575.z));
    let x_1578 : vec4<f32> = u_xlat2;
    u_xlat2 = vec4<f32>(x_1577.x, x_1577.y, x_1577.z, x_1578.w);
    let x_1581 : vec4<f32> = x_26.x_UserLut_Params;
    let x_1583 : vec4<f32> = u_xlat2;
    let x_1586 : vec3<f32> = u_xlat0;
    u_xlat0 = ((vec3<f32>(x_1581.w, x_1581.w, x_1581.w) * vec3<f32>(x_1583.x, x_1583.y, x_1583.z)) + x_1586);
    let x_1588 : vec3<f32> = u_xlat0;
    let x_1591 : vec3<f32> = (x_1588 * vec3<f32>(0.077399381f, 0.077399381f, 0.077399381f));
    let x_1592 : vec4<f32> = u_xlat2;
    u_xlat2 = vec4<f32>(x_1591.x, x_1591.y, x_1591.z, x_1592.w);
    let x_1594 : vec3<f32> = u_xlat0;
    let x_1597 : vec3<f32> = (x_1594 + vec3<f32>(0.055f, 0.055f, 0.055f));
    let x_1598 : vec4<f32> = u_xlat3;
    u_xlat3 = vec4<f32>(x_1597.x, x_1597.y, x_1597.z, x_1598.w);
    let x_1600 : vec4<f32> = u_xlat3;
    let x_1604 : vec3<f32> = (vec3<f32>(x_1600.x, x_1600.y, x_1600.z) * vec3<f32>(0.947867334f, 0.947867334f, 0.947867334f));
    let x_1605 : vec4<f32> = u_xlat3;
    u_xlat3 = vec4<f32>(x_1604.x, x_1604.y, x_1604.z, x_1605.w);
    let x_1607 : vec4<f32> = u_xlat3;
    let x_1610 : vec3<f32> = log2(abs(vec3<f32>(x_1607.x, x_1607.y, x_1607.z)));
    let x_1611 : vec4<f32> = u_xlat3;
    u_xlat3 = vec4<f32>(x_1610.x, x_1610.y, x_1610.z, x_1611.w);
    let x_1613 : vec4<f32> = u_xlat3;
    let x_1617 : vec3<f32> = (vec3<f32>(x_1613.x, x_1613.y, x_1613.z) * vec3<f32>(2.400000095f, 2.400000095f, 2.400000095f));
    let x_1618 : vec4<f32> = u_xlat3;
    u_xlat3 = vec4<f32>(x_1617.x, x_1617.y, x_1617.z, x_1618.w);
    let x_1620 : vec4<f32> = u_xlat3;
    let x_1622 : vec3<f32> = exp2(vec3<f32>(x_1620.x, x_1620.y, x_1620.z));
    let x_1623 : vec4<f32> = u_xlat3;
    u_xlat3 = vec4<f32>(x_1622.x, x_1622.y, x_1622.z, x_1623.w);
    let x_1627 : vec3<f32> = u_xlat0;
    let x_1629 : vec4<bool> = (vec4<f32>(0.040449999f, 0.040449999f, 0.040449999f, 0.0f) >= vec4<f32>(x_1627.x, x_1627.y, x_1627.z, x_1627.x));
    u_xlatb0 = vec3<bool>(x_1629.x, x_1629.y, x_1629.z);
    let x_1632 : bool = u_xlatb0.x;
    if (x_1632) {
      let x_1637 : f32 = u_xlat2.x;
      x_1633 = x_1637;
    } else {
      let x_1640 : f32 = u_xlat3.x;
      x_1633 = x_1640;
    }
    let x_1641 : f32 = x_1633;
    u_xlat1.x = x_1641;
    let x_1644 : bool = u_xlatb0.y;
    if (x_1644) {
      let x_1649 : f32 = u_xlat2.y;
      x_1645 = x_1649;
    } else {
      let x_1652 : f32 = u_xlat3.y;
      x_1645 = x_1652;
    }
    let x_1653 : f32 = x_1645;
    u_xlat1.y = x_1653;
    let x_1656 : bool = u_xlatb0.z;
    if (x_1656) {
      let x_1661 : f32 = u_xlat2.z;
      x_1657 = x_1661;
    } else {
      let x_1664 : f32 = u_xlat3.z;
      x_1657 = x_1664;
    }
    let x_1665 : f32 = x_1657;
    u_xlat1.z = x_1665;
  }
  let x_1667 : vec4<f32> = u_xlat1;
  let x_1670 : vec4<f32> = x_26.x_Lut_Params;
  u_xlat0 = (vec3<f32>(x_1667.z, x_1667.x, x_1667.y) * vec3<f32>(x_1670.z, x_1670.z, x_1670.z));
  let x_1674 : f32 = u_xlat0.x;
  u_xlat0.x = floor(x_1674);
  let x_1678 : vec4<f32> = x_26.x_Lut_Params;
  let x_1680 : vec2<f32> = (vec2<f32>(x_1678.x, x_1678.y) * vec2<f32>(0.5f, 0.5f));
  let x_1681 : vec4<f32> = u_xlat1;
  u_xlat1 = vec4<f32>(x_1680.x, x_1680.y, x_1681.z, x_1681.w);
  let x_1683 : vec3<f32> = u_xlat0;
  let x_1686 : vec4<f32> = x_26.x_Lut_Params;
  let x_1689 : vec4<f32> = u_xlat1;
  let x_1691 : vec2<f32> = ((vec2<f32>(x_1683.y, x_1683.z) * vec2<f32>(x_1686.x, x_1686.y)) + vec2<f32>(x_1689.x, x_1689.y));
  let x_1692 : vec4<f32> = u_xlat2;
  u_xlat2 = vec4<f32>(x_1692.x, x_1691.x, x_1691.y, x_1692.w);
  let x_1695 : f32 = u_xlat0.x;
  let x_1697 : f32 = x_26.x_Lut_Params.y;
  let x_1700 : f32 = u_xlat2.y;
  u_xlat2.x = ((x_1695 * x_1697) + x_1700);
  let x_1707 : vec4<f32> = u_xlat2;
  let x_1709 : vec4<f32> = textureSampleLevel(x_InternalLut, sampler_LinearClamp, vec2<f32>(x_1707.x, x_1707.z), 0.0f);
  u_xlat7 = vec3<f32>(x_1709.x, x_1709.y, x_1709.z);
  let x_1712 : f32 = x_26.x_Lut_Params.y;
  u_xlat1.x = x_1712;
  u_xlat1.y = 0.0f;
  let x_1715 : vec4<f32> = u_xlat1;
  let x_1717 : vec4<f32> = u_xlat2;
  let x_1719 : vec2<f32> = (vec2<f32>(x_1715.x, x_1715.y) + vec2<f32>(x_1717.x, x_1717.z));
  let x_1720 : vec4<f32> = u_xlat1;
  u_xlat1 = vec4<f32>(x_1719.x, x_1719.y, x_1720.z, x_1720.w);
  let x_1725 : vec4<f32> = u_xlat1;
  let x_1727 : vec4<f32> = textureSampleLevel(x_InternalLut, sampler_LinearClamp, vec2<f32>(x_1725.x, x_1725.y), 0.0f);
  let x_1728 : vec3<f32> = vec3<f32>(x_1727.x, x_1727.y, x_1727.z);
  let x_1729 : vec4<f32> = u_xlat1;
  u_xlat1 = vec4<f32>(x_1728.x, x_1728.y, x_1729.z, x_1728.z);
  let x_1732 : f32 = u_xlat1.z;
  let x_1734 : f32 = x_26.x_Lut_Params.z;
  let x_1737 : f32 = u_xlat0.x;
  u_xlat0.x = ((x_1732 * x_1734) + -(x_1737));
  let x_1741 : vec3<f32> = u_xlat7;
  let x_1743 : vec4<f32> = u_xlat1;
  let x_1745 : vec3<f32> = (-(x_1741) + vec3<f32>(x_1743.x, x_1743.y, x_1743.w));
  let x_1746 : vec4<f32> = u_xlat1;
  u_xlat1 = vec4<f32>(x_1745.x, x_1745.y, x_1745.z, x_1746.w);
  let x_1748 : vec3<f32> = u_xlat0;
  let x_1750 : vec4<f32> = u_xlat1;
  let x_1753 : vec3<f32> = u_xlat7;
  u_xlat0 = ((vec3<f32>(x_1748.x, x_1748.x, x_1748.x) * vec3<f32>(x_1750.x, x_1750.y, x_1750.z)) + x_1753);
  let x_1755 : vec3<f32> = u_xlat0;
  u_xlat0 = sqrt(x_1755);
  let x_1757 : vec2<f32> = vs_TEXCOORD0;
  let x_1760 : vec4<f32> = x_26.x_Dithering_Params;
  let x_1764 : vec4<f32> = x_26.x_Dithering_Params;
  let x_1766 : vec2<f32> = ((x_1757 * vec2<f32>(x_1760.x, x_1760.y)) + vec2<f32>(x_1764.z, x_1764.w));
  let x_1767 : vec4<f32> = u_xlat1;
  u_xlat1 = vec4<f32>(x_1766.x, x_1766.y, x_1767.z, x_1767.w);
  let x_1774 : vec4<f32> = u_xlat1;
  let x_1777 : f32 = x_26.x_GlobalMipBias.x;
  let x_1778 : vec4<f32> = textureSampleBias(x_BlueNoise_Texture, sampler_PointRepeat, vec2<f32>(x_1774.x, x_1774.y), x_1777);
  u_xlat21 = x_1778.w;
  let x_1780 : f32 = u_xlat21;
  u_xlat21 = ((x_1780 * 2.0f) + -1.0f);
  let x_1783 : f32 = u_xlat21;
  u_xlatb1 = (x_1783 >= 0.0f);
  let x_1785 : bool = u_xlatb1;
  u_xlat1.x = select(-1.0f, 1.0f, x_1785);
  let x_1788 : f32 = u_xlat21;
  u_xlat21 = (-(abs(x_1788)) + 1.0f);
  let x_1792 : f32 = u_xlat21;
  u_xlat21 = sqrt(x_1792);
  let x_1794 : f32 = u_xlat21;
  u_xlat21 = (-(x_1794) + 1.0f);
  let x_1797 : f32 = u_xlat21;
  let x_1799 : f32 = u_xlat1.x;
  u_xlat21 = (x_1797 * x_1799);
  let x_1801 : vec3<f32> = u_xlat0;
  let x_1802 : vec3<f32> = (x_1801 * vec3<f32>(12.920000076f, 12.920000076f, 12.920000076f));
  let x_1803 : vec4<f32> = u_xlat1;
  u_xlat1 = vec4<f32>(x_1802.x, x_1802.y, x_1802.z, x_1803.w);
  let x_1805 : vec3<f32> = u_xlat0;
  let x_1806 : vec3<f32> = log2(x_1805);
  let x_1807 : vec4<f32> = u_xlat2;
  u_xlat2 = vec4<f32>(x_1806.x, x_1806.y, x_1806.z, x_1807.w);
  let x_1809 : vec4<f32> = u_xlat2;
  let x_1811 : vec3<f32> = (vec3<f32>(x_1809.x, x_1809.y, x_1809.z) * vec3<f32>(0.416666657f, 0.416666657f, 0.416666657f));
  let x_1812 : vec4<f32> = u_xlat2;
  u_xlat2 = vec4<f32>(x_1811.x, x_1811.y, x_1811.z, x_1812.w);
  let x_1814 : vec4<f32> = u_xlat2;
  let x_1816 : vec3<f32> = exp2(vec3<f32>(x_1814.x, x_1814.y, x_1814.z));
  let x_1817 : vec4<f32> = u_xlat2;
  u_xlat2 = vec4<f32>(x_1816.x, x_1816.y, x_1816.z, x_1817.w);
  let x_1819 : vec4<f32> = u_xlat2;
  let x_1822 : vec3<f32> = ((vec3<f32>(x_1819.x, x_1819.y, x_1819.z) * vec3<f32>(1.054999948f, 1.054999948f, 1.054999948f)) + vec3<f32>(-0.055f, -0.055f, -0.055f));
  let x_1823 : vec4<f32> = u_xlat2;
  u_xlat2 = vec4<f32>(x_1822.x, x_1822.y, x_1822.z, x_1823.w);
  let x_1825 : vec3<f32> = u_xlat0;
  let x_1827 : vec4<bool> = (vec4<f32>(0.0031308f, 0.0031308f, 0.0031308f, 0.0f) >= vec4<f32>(x_1825.x, x_1825.y, x_1825.z, x_1825.x));
  u_xlatb0 = vec3<bool>(x_1827.x, x_1827.y, x_1827.z);
  let x_1830 : bool = u_xlatb0.x;
  if (x_1830) {
    let x_1835 : f32 = u_xlat1.x;
    x_1831 = x_1835;
  } else {
    let x_1838 : f32 = u_xlat2.x;
    x_1831 = x_1838;
  }
  let x_1839 : f32 = x_1831;
  u_xlat0.x = x_1839;
  let x_1842 : bool = u_xlatb0.y;
  if (x_1842) {
    let x_1847 : f32 = u_xlat1.y;
    x_1843 = x_1847;
  } else {
    let x_1850 : f32 = u_xlat2.y;
    x_1843 = x_1850;
  }
  let x_1851 : f32 = x_1843;
  u_xlat0.y = x_1851;
  let x_1854 : bool = u_xlatb0.z;
  if (x_1854) {
    let x_1859 : f32 = u_xlat1.z;
    x_1855 = x_1859;
  } else {
    let x_1862 : f32 = u_xlat2.z;
    x_1855 = x_1862;
  }
  let x_1863 : f32 = x_1855;
  u_xlat0.z = x_1863;
  let x_1865 : f32 = u_xlat21;
  let x_1870 : vec3<f32> = u_xlat0;
  u_xlat0 = ((vec3<f32>(x_1865, x_1865, x_1865) * vec3<f32>(0.003921569f, 0.003921569f, 0.003921569f)) + x_1870);
  let x_1872 : vec3<f32> = u_xlat0;
  let x_1873 : vec3<f32> = (x_1872 * vec3<f32>(0.077399381f, 0.077399381f, 0.077399381f));
  let x_1874 : vec4<f32> = u_xlat1;
  u_xlat1 = vec4<f32>(x_1873.x, x_1873.y, x_1873.z, x_1874.w);
  let x_1876 : vec3<f32> = u_xlat0;
  let x_1877 : vec3<f32> = (x_1876 + vec3<f32>(0.055f, 0.055f, 0.055f));
  let x_1878 : vec4<f32> = u_xlat2;
  u_xlat2 = vec4<f32>(x_1877.x, x_1877.y, x_1877.z, x_1878.w);
  let x_1880 : vec4<f32> = u_xlat2;
  let x_1882 : vec3<f32> = (vec3<f32>(x_1880.x, x_1880.y, x_1880.z) * vec3<f32>(0.947867334f, 0.947867334f, 0.947867334f));
  let x_1883 : vec4<f32> = u_xlat2;
  u_xlat2 = vec4<f32>(x_1882.x, x_1882.y, x_1882.z, x_1883.w);
  let x_1885 : vec4<f32> = u_xlat2;
  let x_1888 : vec3<f32> = log2(abs(vec3<f32>(x_1885.x, x_1885.y, x_1885.z)));
  let x_1889 : vec4<f32> = u_xlat2;
  u_xlat2 = vec4<f32>(x_1888.x, x_1888.y, x_1888.z, x_1889.w);
  let x_1891 : vec4<f32> = u_xlat2;
  let x_1893 : vec3<f32> = (vec3<f32>(x_1891.x, x_1891.y, x_1891.z) * vec3<f32>(2.400000095f, 2.400000095f, 2.400000095f));
  let x_1894 : vec4<f32> = u_xlat2;
  u_xlat2 = vec4<f32>(x_1893.x, x_1893.y, x_1893.z, x_1894.w);
  let x_1896 : vec4<f32> = u_xlat2;
  let x_1898 : vec3<f32> = exp2(vec3<f32>(x_1896.x, x_1896.y, x_1896.z));
  let x_1899 : vec4<f32> = u_xlat2;
  u_xlat2 = vec4<f32>(x_1898.x, x_1898.y, x_1898.z, x_1899.w);
  let x_1901 : vec3<f32> = u_xlat0;
  let x_1903 : vec4<bool> = (vec4<f32>(0.040449999f, 0.040449999f, 0.040449999f, 0.0f) >= vec4<f32>(x_1901.x, x_1901.y, x_1901.z, x_1901.x));
  u_xlatb0 = vec3<bool>(x_1903.x, x_1903.y, x_1903.z);
  let x_1906 : bool = u_xlatb0.x;
  if (x_1906) {
    let x_1911 : f32 = u_xlat1.x;
    x_1907 = x_1911;
  } else {
    let x_1914 : f32 = u_xlat2.x;
    x_1907 = x_1914;
  }
  let x_1915 : f32 = x_1907;
  u_xlat0.x = x_1915;
  let x_1918 : bool = u_xlatb0.y;
  if (x_1918) {
    let x_1923 : f32 = u_xlat1.y;
    x_1919 = x_1923;
  } else {
    let x_1926 : f32 = u_xlat2.y;
    x_1919 = x_1926;
  }
  let x_1927 : f32 = x_1919;
  u_xlat0.y = x_1927;
  let x_1930 : bool = u_xlatb0.z;
  if (x_1930) {
    let x_1935 : f32 = u_xlat1.z;
    x_1931 = x_1935;
  } else {
    let x_1938 : f32 = u_xlat2.z;
    x_1931 = x_1938;
  }
  let x_1939 : f32 = x_1931;
  u_xlat0.z = x_1939;
  let x_1943 : vec3<f32> = u_xlat0;
  let x_1944 : vec3<f32> = max(x_1943, vec3<f32>(0.0f, 0.0f, 0.0f));
  let x_1945 : vec4<f32> = SV_Target0;
  SV_Target0 = vec4<f32>(x_1944.x, x_1944.y, x_1944.z, x_1945.w);
  SV_Target0.w = 1.0f;
  return;
}

struct main_out {
  @location(0)
  SV_Target0_1 : vec4<f32>,
}

@fragment
fn main(@location(0) vs_TEXCOORD0_param : vec2<f32>, @builtin(position) gl_FragCoord_param : vec4<f32>) -> main_out {
  vs_TEXCOORD0 = vs_TEXCOORD0_param;
  gl_FragCoord = gl_FragCoord_param;
  main_1();
  return main_out(SV_Target0);
}

