type Arr = array<vec4<f32>, 2u>;

struct UnityPerDraw {
  unity_ObjectToWorld : mat4x4<f32>,
  unity_WorldToObject : mat4x4<f32>,
  unity_LODFade : vec4<f32>,
  unity_WorldTransformParams : vec4<f32>,
  unity_RenderingLayer : vec4<f32>,
  unity_LightData : vec4<f32>,
  unity_LightIndices : Arr,
  unity_ProbesOcclusion : vec4<f32>,
  unity_SpecCube0_HDR : vec4<f32>,
  unity_SpecCube1_HDR : vec4<f32>,
  unity_SpecCube0_BoxMax : vec4<f32>,
  unity_SpecCube0_BoxMin : vec4<f32>,
  unity_SpecCube0_ProbePosition : vec4<f32>,
  unity_SpecCube1_BoxMax : vec4<f32>,
  unity_SpecCube1_BoxMin : vec4<f32>,
  unity_SpecCube1_ProbePosition : vec4<f32>,
  unity_LightmapST : vec4<f32>,
  unity_DynamicLightmapST : vec4<f32>,
  unity_SHAr : vec4<f32>,
  unity_SHAg : vec4<f32>,
  unity_SHAb : vec4<f32>,
  unity_SHBr : vec4<f32>,
  unity_SHBg : vec4<f32>,
  unity_SHBb : vec4<f32>,
  unity_SHC : vec4<f32>,
  unity_RendererBounds_Min : vec4<f32>,
  unity_RendererBounds_Max : vec4<f32>,
  unity_MatrixPreviousM : mat4x4<f32>,
  unity_MatrixPreviousMI : mat4x4<f32>,
  unity_MotionVectorsParams : vec4<f32>,
  unity_SpriteColor : vec4<f32>,
  unity_SpriteProps : vec4<f32>,
}

struct PGlobals {
  x_ScaledScreenParams : vec4<f32>,
  x_GlobalMipBias : vec2<f32>,
  x_AlphaToMaskAvailable : f32,
  @size(4)
  padding : u32,
  x_MainLightPosition : vec4<f32>,
  x_MainLightColor : vec4<f32>,
  x_AmbientOcclusionParam : vec4<f32>,
  x_AdditionalLightsCount : vec4<f32>,
  x_RenderingLayerMaxInt : u32,
  x_RenderingLayerRcpMaxInt : f32,
  @size(8)
  padding_1 : u32,
  x_WorldSpaceCameraPos : vec3<f32>,
  @size(4)
  padding_2 : u32,
  x_ProjectionParams : vec4<f32>,
  x_ScreenParams : vec4<f32>,
  unity_OrthoParams : vec4<f32>,
  x_ScaleBiasRt : vec4<f32>,
  unity_FogParams : vec4<f32>,
  unity_FogColor : vec4<f32>,
  unity_MatrixV : mat4x4<f32>,
}

struct UnityPerMaterial {
  Texture2D_B222E8F_TexelSize : vec4<f32>,
  Color_C30C7CA3 : vec4<f32>,
  Texture2D_D9BFD5F1_TexelSize : vec4<f32>,
}

type Arr_1 = array<mat4x4<f32>, 5u>;

struct MainLightShadows {
  x_MainLightWorldToShadow : Arr_1,
  x_CascadeShadowSplitSpheres0 : vec4<f32>,
  x_CascadeShadowSplitSpheres1 : vec4<f32>,
  x_CascadeShadowSplitSpheres2 : vec4<f32>,
  x_CascadeShadowSplitSpheres3 : vec4<f32>,
  x_CascadeShadowSplitSphereRadii : vec4<f32>,
  x_MainLightShadowOffset0 : vec4<f32>,
  x_MainLightShadowOffset1 : vec4<f32>,
  x_MainLightShadowParams : vec4<f32>,
  x_MainLightShadowmapSize : vec4<f32>,
}

struct strided_arr {
  @size(16)
  el : f32,
}

type Arr_2 = array<strided_arr, 8u>;

struct LightCookies {
  x_MainLightWorldToLight : mat4x4<f32>,
  x_AdditionalLightsCookieEnableBits : Arr_2,
  x_MainLightCookieTextureFormat : f32,
  x_AdditionalLightsCookieAtlasTextureFormat : f32,
}

type Arr_3 = array<vec4<f32>, 256u>;

type Arr_4 = array<vec4<f32>, 256u>;

type Arr_5 = array<vec4<f32>, 256u>;

type Arr_6 = array<vec4<f32>, 256u>;

type Arr_7 = array<vec4<f32>, 256u>;

struct strided_arr_1 {
  @size(16)
  el : f32,
}

type Arr_8 = array<strided_arr_1, 256u>;

type Arr_9 = array<vec4<f32>, 256u>;

type Arr_10 = array<strided_arr_1, 256u>;

struct AdditionalLights {
  x_AdditionalLightsPosition : Arr_9,
  x_AdditionalLightsColor : Arr_9,
  x_AdditionalLightsAttenuation : Arr_9,
  x_AdditionalLightsSpotDir : Arr_9,
  x_AdditionalLightsOcclusionProbes : Arr_9,
  x_AdditionalLightsLayerMasks : Arr_10,
}

type Arr_11 = array<mat4x4<f32>, 256u>;

struct AdditionalLightsCookies {
  x_AdditionalLightsWorldToLights : Arr_11,
  x_AdditionalLightsCookieAtlasUVRects : Arr_9,
  x_AdditionalLightsLightTypes : Arr_10,
}

var<private> gl_FragCoord : vec4<f32>;

var<private> vs_INTERP1 : vec3<f32>;

var<private> vs_INTERP2 : vec4<f32>;

@group(1) @binding(2) var<uniform> x_95 : UnityPerDraw;

@group(1) @binding(0) var<uniform> x_160 : PGlobals;

var<private> vs_INTERP0 : vec3<f32>;

@group(0) @binding(6) var Texture2D_B222E8F : texture_2d<f32>;

@group(0) @binding(14) var samplerTexture2D_B222E8F : sampler;

var<private> vs_INTERP3 : vec4<f32>;

@group(1) @binding(6) var<uniform> x_263 : UnityPerMaterial;

@group(0) @binding(7) var Texture2D_D9BFD5F1 : texture_2d<f32>;

@group(0) @binding(15) var samplerTexture2D_D9BFD5F1 : sampler;

var<private> vs_INTERP4 : vec4<f32>;

@group(1) @binding(3) var<uniform> x_365 : MainLightShadows;

@group(0) @binding(3) var x_MainLightShadowmapTexture : texture_depth_2d;

@group(0) @binding(11) var sampler_MainLightShadowmapTexture : sampler_comparison;

@group(0) @binding(1) var unity_Lightmap : texture_2d<f32>;

@group(0) @binding(9) var samplerunity_Lightmap : sampler;

var<private> vs_INTERP5 : vec2<f32>;

@group(0) @binding(2) var x_ScreenSpaceOcclusionTexture : texture_2d<f32>;

@group(0) @binding(10) var sampler_ScreenSpaceOcclusionTexture : sampler;

@group(1) @binding(4) var<uniform> x_3527 : LightCookies;

@group(0) @binding(4) var x_MainLightCookieTexture : texture_2d<f32>;

@group(0) @binding(12) var sampler_MainLightCookieTexture : sampler;

@group(0) @binding(0) var unity_SpecCube0 : texture_cube<f32>;

@group(0) @binding(8) var samplerunity_SpecCube0 : sampler;

@group(1) @binding(1) var<uniform> x_3995 : AdditionalLights;

@group(1) @binding(5) var<uniform> x_4103 : AdditionalLightsCookies;

@group(0) @binding(5) var x_AdditionalLightsCookieAtlasTexture : texture_2d<f32>;

@group(0) @binding(13) var sampler_AdditionalLightsCookieAtlasTexture : sampler;

var<private> SV_Target0 : vec4<f32>;

var<private> SV_Target1 : vec4<f32>;

fn int_bitfieldInsert_i1_i1_i1_i1_(base : ptr<function, i32>, insert : ptr<function, i32>, offset_1 : ptr<function, i32>, bits : ptr<function, i32>) -> i32 {
  var mask : u32;
  let x_19 : i32 = *(bits);
  let x_23 : i32 = *(offset_1);
  mask = (~((4294967295u << bitcast<u32>(x_19))) << bitcast<u32>(x_23));
  let x_26 : i32 = *(base);
  let x_28 : u32 = mask;
  let x_31 : i32 = *(insert);
  let x_33 : i32 = *(offset_1);
  let x_36 : u32 = mask;
  return bitcast<i32>(((bitcast<u32>(x_26) & ~(x_28)) | ((bitcast<u32>(x_31) << bitcast<u32>(x_33)) & x_36)));
}

fn main_1() {
  var hlslcc_FragCoord : vec4<f32>;
  var u_xlat0 : vec3<f32>;
  var u_xlatb22 : vec2<bool>;
  var u_xlat22 : vec3<f32>;
  var u_xlat1 : vec3<f32>;
  var u_xlat2 : vec4<f32>;
  var u_xlat3 : vec4<f32>;
  var u_xlatb0 : bool;
  var u_xlat4 : vec3<f32>;
  var u_xlat67 : f32;
  var u_xlat5 : vec3<f32>;
  var x_199 : vec3<f32>;
  var u_xlat6 : vec4<f32>;
  var u_xlat7 : vec3<f32>;
  var u_xlat8 : vec4<f32>;
  var u_xlat9 : vec4<f32>;
  var u_xlat30 : vec3<f32>;
  var u_xlat10 : vec4<f32>;
  var u_xlatb2 : vec4<bool>;
  var u_xlatu0 : u32;
  var u_xlati0 : i32;
  var u_xlatb67 : bool;
  var txVec0 : vec3<f32>;
  var txVec1 : vec3<f32>;
  var txVec2 : vec3<f32>;
  var txVec3 : vec3<f32>;
  var u_xlatb68 : bool;
  var u_xlat47 : vec2<f32>;
  var u_xlat54 : vec2<f32>;
  var u_xlat11 : vec4<f32>;
  var u_xlat12 : vec4<f32>;
  var u_xlat13 : vec4<f32>;
  var u_xlat14 : vec4<f32>;
  var u_xlat15 : vec4<f32>;
  var u_xlat16 : vec4<f32>;
  var u_xlat68 : f32;
  var txVec4 : vec3<f32>;
  var txVec5 : vec3<f32>;
  var u_xlat25 : f32;
  var txVec6 : vec3<f32>;
  var txVec7 : vec3<f32>;
  var txVec8 : vec3<f32>;
  var txVec9 : vec3<f32>;
  var txVec10 : vec3<f32>;
  var txVec11 : vec3<f32>;
  var txVec12 : vec3<f32>;
  var u_xlat31 : vec3<f32>;
  var u_xlat17 : vec4<f32>;
  var u_xlat18 : vec4<f32>;
  var u_xlat32 : vec2<f32>;
  var u_xlat60 : vec2<f32>;
  var u_xlat55 : vec2<f32>;
  var u_xlat19 : vec4<f32>;
  var u_xlat20 : vec4<f32>;
  var u_xlat21 : vec4<f32>;
  var txVec13 : vec3<f32>;
  var txVec14 : vec3<f32>;
  var u_xlat70 : f32;
  var txVec15 : vec3<f32>;
  var txVec16 : vec3<f32>;
  var txVec17 : vec3<f32>;
  var txVec18 : vec3<f32>;
  var txVec19 : vec3<f32>;
  var txVec20 : vec3<f32>;
  var txVec21 : vec3<f32>;
  var txVec22 : vec3<f32>;
  var txVec23 : vec3<f32>;
  var txVec24 : vec3<f32>;
  var txVec25 : vec3<f32>;
  var txVec26 : vec3<f32>;
  var txVec27 : vec3<f32>;
  var txVec28 : vec3<f32>;
  var txVec29 : vec3<f32>;
  var u_xlatb3 : bool;
  var u_xlatb25 : bool;
  var u_xlat23 : vec3<f32>;
  var x_1863 : f32;
  var u_xlatu5 : vec3<u32>;
  var u_xlatu47 : u32;
  var u_xlatu69 : u32;
  var u_xlati47 : i32;
  var param : i32;
  var param_1 : i32;
  var param_2 : i32;
  var param_3 : i32;
  var u_xlat69 : f32;
  var x_1985 : f32;
  var u_xlatb47 : bool;
  var x_2039 : f32;
  var u_xlat71 : f32;
  var u_xlat28 : f32;
  var u_xlat72 : f32;
  var u_xlat50 : f32;
  var txVec30 : vec3<f32>;
  var txVec31 : vec3<f32>;
  var txVec32 : vec3<f32>;
  var txVec33 : vec3<f32>;
  var u_xlatb73 : bool;
  var u_xlat52 : vec2<f32>;
  var u_xlat73 : f32;
  var txVec34 : vec3<f32>;
  var txVec35 : vec3<f32>;
  var txVec36 : vec3<f32>;
  var txVec37 : vec3<f32>;
  var txVec38 : vec3<f32>;
  var txVec39 : vec3<f32>;
  var txVec40 : vec3<f32>;
  var txVec41 : vec3<f32>;
  var txVec42 : vec3<f32>;
  var txVec43 : vec3<f32>;
  var txVec44 : vec3<f32>;
  var txVec45 : vec3<f32>;
  var txVec46 : vec3<f32>;
  var txVec47 : vec3<f32>;
  var txVec48 : vec3<f32>;
  var txVec49 : vec3<f32>;
  var txVec50 : vec3<f32>;
  var txVec51 : vec3<f32>;
  var txVec52 : vec3<f32>;
  var txVec53 : vec3<f32>;
  var txVec54 : vec3<f32>;
  var txVec55 : vec3<f32>;
  var txVec56 : vec3<f32>;
  var txVec57 : vec3<f32>;
  var txVec58 : vec3<f32>;
  var txVec59 : vec3<f32>;
  var x_3476 : f32;
  var u_xlat24 : f32;
  var u_xlatb8 : vec2<bool>;
  var x_3610 : f32;
  var x_3621 : vec3<f32>;
  var u_xlatu_loop_1 : u32;
  var u_xlati70 : i32;
  var indexable : array<vec4<u32>, 4u>;
  var u_xlatu73 : u32;
  var u_xlati52 : i32;
  var u_xlati73 : i32;
  var u_xlati74 : i32;
  var u_xlat56 : vec2<f32>;
  var u_xlatb52 : vec2<bool>;
  var x_4395 : f32;
  var x_4408 : f32;
  var x_4460 : f32;
  var x_4471 : vec3<f32>;
  var u_xlat66 : f32;
  var u_xlat_precise_vec4 : vec4<f32>;
  var u_xlat_precise_ivec4 : vec4<i32>;
  var u_xlat_precise_bvec4 : vec4<bool>;
  var u_xlat_precise_uvec4 : vec4<u32>;
  let x_49 : vec4<f32> = gl_FragCoord;
  let x_50 : vec3<f32> = vec3<f32>(x_49.x, x_49.y, x_49.z);
  let x_55 : f32 = gl_FragCoord.w;
  hlslcc_FragCoord = vec4<f32>(x_50.x, x_50.y, x_50.z, (1.0f / x_55));
  let x_65 : vec3<f32> = vs_INTERP1;
  let x_66 : vec3<f32> = vs_INTERP1;
  u_xlat0.x = dot(x_65, x_66);
  let x_72 : f32 = u_xlat0.x;
  u_xlat0.x = sqrt(x_72);
  let x_76 : f32 = u_xlat0.x;
  u_xlat0.x = (1.0f / x_76);
  let x_86 : f32 = vs_INTERP2.w;
  u_xlatb22.x = (0.0f < x_86);
  let x_99 : f32 = x_95.unity_WorldTransformParams.w;
  u_xlatb22.y = (x_99 >= 0.0f);
  let x_105 : bool = u_xlatb22.x;
  u_xlat22.x = select(-1.0f, 1.0f, x_105);
  let x_110 : bool = u_xlatb22.y;
  u_xlat22.y = select(-1.0f, 1.0f, x_110);
  let x_114 : f32 = u_xlat22.y;
  let x_116 : f32 = u_xlat22.x;
  u_xlat22.x = (x_114 * x_116);
  let x_120 : vec3<f32> = vs_INTERP1;
  let x_122 : vec4<f32> = vs_INTERP2;
  u_xlat1 = (vec3<f32>(x_120.z, x_120.x, x_120.y) * vec3<f32>(x_122.y, x_122.z, x_122.x));
  let x_125 : vec3<f32> = vs_INTERP1;
  let x_127 : vec4<f32> = vs_INTERP2;
  let x_130 : vec3<f32> = u_xlat1;
  u_xlat1 = ((vec3<f32>(x_125.y, x_125.z, x_125.x) * vec3<f32>(x_127.z, x_127.x, x_127.y)) + -(x_130));
  let x_133 : vec3<f32> = u_xlat22;
  let x_135 : vec3<f32> = u_xlat1;
  u_xlat22 = (vec3<f32>(x_133.x, x_133.x, x_133.x) * x_135);
  let x_137 : vec3<f32> = u_xlat0;
  let x_139 : vec3<f32> = vs_INTERP1;
  u_xlat1 = (vec3<f32>(x_137.x, x_137.x, x_137.x) * x_139);
  let x_142 : vec3<f32> = u_xlat0;
  let x_144 : vec4<f32> = vs_INTERP2;
  let x_146 : vec3<f32> = (vec3<f32>(x_142.x, x_142.x, x_142.x) * vec3<f32>(x_144.x, x_144.y, x_144.z));
  let x_147 : vec4<f32> = u_xlat2;
  u_xlat2 = vec4<f32>(x_146.x, x_146.y, x_146.z, x_147.w);
  let x_150 : vec3<f32> = u_xlat22;
  let x_151 : vec3<f32> = u_xlat0;
  let x_153 : vec3<f32> = (x_150 * vec3<f32>(x_151.x, x_151.x, x_151.x));
  let x_154 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_153.x, x_153.y, x_153.z, x_154.w);
  let x_163 : f32 = x_160.unity_OrthoParams.w;
  u_xlatb0 = (x_163 == 0.0f);
  let x_167 : vec3<f32> = vs_INTERP0;
  let x_172 : vec3<f32> = x_160.x_WorldSpaceCameraPos;
  u_xlat4 = (-(x_167) + x_172);
  let x_175 : vec3<f32> = u_xlat4;
  let x_176 : vec3<f32> = u_xlat4;
  u_xlat67 = dot(x_175, x_176);
  let x_178 : f32 = u_xlat67;
  u_xlat67 = inverseSqrt(x_178);
  let x_180 : f32 = u_xlat67;
  let x_182 : vec3<f32> = u_xlat4;
  u_xlat4 = (vec3<f32>(x_180, x_180, x_180) * x_182);
  let x_188 : f32 = x_160.unity_MatrixV[0i].z;
  u_xlat5.x = x_188;
  let x_192 : f32 = x_160.unity_MatrixV[1i].z;
  u_xlat5.y = x_192;
  let x_196 : f32 = x_160.unity_MatrixV[2i].z;
  u_xlat5.z = x_196;
  let x_198 : bool = u_xlatb0;
  if (x_198) {
    let x_202 : vec3<f32> = u_xlat4;
    x_199 = x_202;
  } else {
    let x_204 : vec3<f32> = u_xlat5;
    x_199 = x_204;
  }
  let x_205 : vec3<f32> = x_199;
  u_xlat4 = x_205;
  let x_206 : vec3<f32> = u_xlat4;
  let x_210 : vec4<f32> = x_95.unity_WorldToObject[1i];
  u_xlat5 = (vec3<f32>(x_206.y, x_206.y, x_206.y) * vec3<f32>(x_210.x, x_210.y, x_210.z));
  let x_214 : vec4<f32> = x_95.unity_WorldToObject[0i];
  let x_216 : vec3<f32> = u_xlat4;
  let x_219 : vec3<f32> = u_xlat5;
  u_xlat5 = ((vec3<f32>(x_214.x, x_214.y, x_214.z) * vec3<f32>(x_216.x, x_216.x, x_216.x)) + x_219);
  let x_222 : vec4<f32> = x_95.unity_WorldToObject[2i];
  let x_224 : vec3<f32> = u_xlat4;
  let x_227 : vec3<f32> = u_xlat5;
  u_xlat5 = ((vec3<f32>(x_222.x, x_222.y, x_222.z) * vec3<f32>(x_224.z, x_224.z, x_224.z)) + x_227);
  let x_229 : vec3<f32> = u_xlat5;
  let x_230 : vec3<f32> = u_xlat5;
  u_xlat0.x = dot(x_229, x_230);
  let x_234 : f32 = u_xlat0.x;
  u_xlat0.x = inverseSqrt(x_234);
  let x_237 : vec3<f32> = u_xlat0;
  let x_239 : vec3<f32> = u_xlat5;
  u_xlat5 = (vec3<f32>(x_237.x, x_237.x, x_237.x) * x_239);
  let x_253 : vec4<f32> = vs_INTERP3;
  let x_256 : f32 = x_160.x_GlobalMipBias.x;
  let x_257 : vec4<f32> = textureSampleBias(Texture2D_B222E8F, samplerTexture2D_B222E8F, vec2<f32>(x_253.x, x_253.y), x_256);
  u_xlat6 = x_257;
  let x_259 : vec4<f32> = u_xlat6;
  let x_265 : vec4<f32> = x_263.Color_C30C7CA3;
  u_xlat7 = (vec3<f32>(x_259.x, x_259.y, x_259.z) * vec3<f32>(x_265.x, x_265.y, x_265.z));
  let x_274 : vec4<f32> = vs_INTERP3;
  let x_277 : f32 = x_160.x_GlobalMipBias.x;
  let x_278 : vec4<f32> = textureSampleBias(Texture2D_D9BFD5F1, samplerTexture2D_D9BFD5F1, vec2<f32>(x_274.x, x_274.y), x_277);
  u_xlat8 = vec4<f32>(x_278.w, x_278.x, x_278.y, x_278.z);
  let x_281 : vec4<f32> = u_xlat8;
  u_xlat9 = ((vec4<f32>(x_281.y, x_281.z, x_281.w, x_281.x) * vec4<f32>(2.0f, 2.0f, 2.0f, 2.0f)) + vec4<f32>(-1.0f, -1.0f, -1.0f, -1.0f));
  let x_288 : vec4<f32> = u_xlat9;
  let x_289 : vec4<f32> = u_xlat9;
  u_xlat0.x = dot(x_288, x_289);
  let x_293 : f32 = u_xlat0.x;
  u_xlat0.x = inverseSqrt(x_293);
  let x_297 : vec3<f32> = u_xlat0;
  let x_299 : vec4<f32> = u_xlat9;
  u_xlat30 = (vec3<f32>(x_297.x, x_297.x, x_297.x) * vec3<f32>(x_299.x, x_299.y, x_299.z));
  let x_304 : f32 = vs_INTERP4.y;
  u_xlat0.x = (x_304 * 200.0f);
  let x_309 : f32 = u_xlat0.x;
  u_xlat0.x = min(x_309, 1.0f);
  let x_312 : vec3<f32> = u_xlat0;
  let x_314 : vec4<f32> = u_xlat6;
  let x_316 : vec3<f32> = (vec3<f32>(x_312.x, x_312.x, x_312.x) * vec3<f32>(x_314.x, x_314.y, x_314.z));
  let x_317 : vec4<f32> = u_xlat6;
  u_xlat6 = vec4<f32>(x_316.x, x_316.y, x_316.z, x_317.w);
  let x_319 : vec4<f32> = u_xlat3;
  let x_321 : vec3<f32> = u_xlat30;
  let x_323 : vec3<f32> = (vec3<f32>(x_319.x, x_319.y, x_319.z) * vec3<f32>(x_321.y, x_321.y, x_321.y));
  let x_324 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_323.x, x_323.y, x_323.z, x_324.w);
  let x_326 : vec3<f32> = u_xlat30;
  let x_328 : vec4<f32> = u_xlat2;
  let x_331 : vec4<f32> = u_xlat3;
  let x_333 : vec3<f32> = ((vec3<f32>(x_326.x, x_326.x, x_326.x) * vec3<f32>(x_328.x, x_328.y, x_328.z)) + vec3<f32>(x_331.x, x_331.y, x_331.z));
  let x_334 : vec4<f32> = u_xlat2;
  u_xlat2 = vec4<f32>(x_333.x, x_333.y, x_333.z, x_334.w);
  let x_336 : vec3<f32> = u_xlat30;
  let x_338 : vec3<f32> = u_xlat1;
  let x_340 : vec4<f32> = u_xlat2;
  u_xlat1 = ((vec3<f32>(x_336.z, x_336.z, x_336.z) * x_338) + vec3<f32>(x_340.x, x_340.y, x_340.z));
  let x_343 : vec3<f32> = u_xlat1;
  let x_344 : vec3<f32> = u_xlat1;
  u_xlat0.x = dot(x_343, x_344);
  let x_348 : f32 = u_xlat0.x;
  u_xlat0.x = max(x_348, 1.17549435e-37f);
  let x_353 : f32 = u_xlat0.x;
  u_xlat0.x = inverseSqrt(x_353);
  let x_356 : vec3<f32> = u_xlat0;
  let x_358 : vec3<f32> = u_xlat1;
  u_xlat1 = (vec3<f32>(x_356.x, x_356.x, x_356.x) * x_358);
  let x_360 : vec3<f32> = vs_INTERP0;
  let x_367 : vec4<f32> = x_365.x_CascadeShadowSplitSpheres0;
  let x_370 : vec3<f32> = (x_360 + -(vec3<f32>(x_367.x, x_367.y, x_367.z)));
  let x_371 : vec4<f32> = u_xlat2;
  u_xlat2 = vec4<f32>(x_370.x, x_370.y, x_370.z, x_371.w);
  let x_373 : vec3<f32> = vs_INTERP0;
  let x_375 : vec4<f32> = x_365.x_CascadeShadowSplitSpheres1;
  let x_378 : vec3<f32> = (x_373 + -(vec3<f32>(x_375.x, x_375.y, x_375.z)));
  let x_379 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_378.x, x_378.y, x_378.z, x_379.w);
  let x_381 : vec3<f32> = vs_INTERP0;
  let x_383 : vec4<f32> = x_365.x_CascadeShadowSplitSpheres2;
  let x_386 : vec3<f32> = (x_381 + -(vec3<f32>(x_383.x, x_383.y, x_383.z)));
  let x_387 : vec4<f32> = u_xlat9;
  u_xlat9 = vec4<f32>(x_386.x, x_386.y, x_386.z, x_387.w);
  let x_390 : vec3<f32> = vs_INTERP0;
  let x_393 : vec4<f32> = x_365.x_CascadeShadowSplitSpheres3;
  let x_396 : vec3<f32> = (x_390 + -(vec3<f32>(x_393.x, x_393.y, x_393.z)));
  let x_397 : vec4<f32> = u_xlat10;
  u_xlat10 = vec4<f32>(x_396.x, x_396.y, x_396.z, x_397.w);
  let x_399 : vec4<f32> = u_xlat2;
  let x_401 : vec4<f32> = u_xlat2;
  u_xlat2.x = dot(vec3<f32>(x_399.x, x_399.y, x_399.z), vec3<f32>(x_401.x, x_401.y, x_401.z));
  let x_405 : vec4<f32> = u_xlat3;
  let x_407 : vec4<f32> = u_xlat3;
  u_xlat2.y = dot(vec3<f32>(x_405.x, x_405.y, x_405.z), vec3<f32>(x_407.x, x_407.y, x_407.z));
  let x_411 : vec4<f32> = u_xlat9;
  let x_413 : vec4<f32> = u_xlat9;
  u_xlat2.z = dot(vec3<f32>(x_411.x, x_411.y, x_411.z), vec3<f32>(x_413.x, x_413.y, x_413.z));
  let x_417 : vec4<f32> = u_xlat10;
  let x_419 : vec4<f32> = u_xlat10;
  u_xlat2.w = dot(vec3<f32>(x_417.x, x_417.y, x_417.z), vec3<f32>(x_419.x, x_419.y, x_419.z));
  let x_426 : vec4<f32> = u_xlat2;
  let x_429 : vec4<f32> = x_365.x_CascadeShadowSplitSphereRadii;
  u_xlatb2 = (x_426 < x_429);
  let x_432 : bool = u_xlatb2.x;
  u_xlat3.x = select(0.0f, 1.0f, x_432);
  let x_436 : bool = u_xlatb2.y;
  u_xlat3.y = select(0.0f, 1.0f, x_436);
  let x_440 : bool = u_xlatb2.z;
  u_xlat3.z = select(0.0f, 1.0f, x_440);
  let x_444 : bool = u_xlatb2.w;
  u_xlat3.w = select(0.0f, 1.0f, x_444);
  let x_448 : bool = u_xlatb2.x;
  u_xlat2.x = select(-0.0f, -1.0f, x_448);
  let x_453 : bool = u_xlatb2.y;
  u_xlat2.y = select(-0.0f, -1.0f, x_453);
  let x_457 : bool = u_xlatb2.z;
  u_xlat2.z = select(-0.0f, -1.0f, x_457);
  let x_460 : vec4<f32> = u_xlat2;
  let x_462 : vec4<f32> = u_xlat3;
  let x_464 : vec3<f32> = (vec3<f32>(x_460.x, x_460.y, x_460.z) + vec3<f32>(x_462.y, x_462.z, x_462.w));
  let x_465 : vec4<f32> = u_xlat2;
  u_xlat2 = vec4<f32>(x_464.x, x_464.y, x_464.z, x_465.w);
  let x_467 : vec4<f32> = u_xlat2;
  let x_470 : vec3<f32> = max(vec3<f32>(x_467.x, x_467.y, x_467.z), vec3<f32>(0.0f, 0.0f, 0.0f));
  let x_471 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_471.x, x_470.x, x_470.y, x_470.z);
  let x_473 : vec4<f32> = u_xlat3;
  u_xlat0.x = dot(x_473, vec4<f32>(4.0f, 3.0f, 2.0f, 1.0f));
  let x_480 : f32 = u_xlat0.x;
  u_xlat0.x = (-(x_480) + 4.0f);
  let x_486 : f32 = u_xlat0.x;
  u_xlatu0 = u32(x_486);
  let x_489 : u32 = u_xlatu0;
  u_xlati0 = (bitcast<i32>(x_489) << bitcast<u32>(2i));
  let x_492 : vec3<f32> = vs_INTERP0;
  let x_494 : i32 = u_xlati0;
  let x_497 : i32 = u_xlati0;
  let x_501 : vec4<f32> = x_365.x_MainLightWorldToShadow[((x_494 + 1i) / 4i)][((x_497 + 1i) % 4i)];
  let x_503 : vec3<f32> = (vec3<f32>(x_492.y, x_492.y, x_492.y) * vec3<f32>(x_501.x, x_501.y, x_501.z));
  let x_504 : vec4<f32> = u_xlat2;
  u_xlat2 = vec4<f32>(x_503.x, x_503.y, x_503.z, x_504.w);
  let x_506 : i32 = u_xlati0;
  let x_508 : i32 = u_xlati0;
  let x_511 : vec4<f32> = x_365.x_MainLightWorldToShadow[(x_506 / 4i)][(x_508 % 4i)];
  let x_513 : vec3<f32> = vs_INTERP0;
  let x_516 : vec4<f32> = u_xlat2;
  let x_518 : vec3<f32> = ((vec3<f32>(x_511.x, x_511.y, x_511.z) * vec3<f32>(x_513.x, x_513.x, x_513.x)) + vec3<f32>(x_516.x, x_516.y, x_516.z));
  let x_519 : vec4<f32> = u_xlat2;
  u_xlat2 = vec4<f32>(x_518.x, x_518.y, x_518.z, x_519.w);
  let x_521 : i32 = u_xlati0;
  let x_524 : i32 = u_xlati0;
  let x_528 : vec4<f32> = x_365.x_MainLightWorldToShadow[((x_521 + 2i) / 4i)][((x_524 + 2i) % 4i)];
  let x_530 : vec3<f32> = vs_INTERP0;
  let x_533 : vec4<f32> = u_xlat2;
  let x_535 : vec3<f32> = ((vec3<f32>(x_528.x, x_528.y, x_528.z) * vec3<f32>(x_530.z, x_530.z, x_530.z)) + vec3<f32>(x_533.x, x_533.y, x_533.z));
  let x_536 : vec4<f32> = u_xlat2;
  u_xlat2 = vec4<f32>(x_535.x, x_535.y, x_535.z, x_536.w);
  let x_538 : vec4<f32> = u_xlat2;
  let x_540 : i32 = u_xlati0;
  let x_543 : i32 = u_xlati0;
  let x_547 : vec4<f32> = x_365.x_MainLightWorldToShadow[((x_540 + 3i) / 4i)][((x_543 + 3i) % 4i)];
  let x_549 : vec3<f32> = (vec3<f32>(x_538.x, x_538.y, x_538.z) + vec3<f32>(x_547.x, x_547.y, x_547.z));
  let x_550 : vec4<f32> = u_xlat2;
  u_xlat2 = vec4<f32>(x_549.x, x_549.y, x_549.z, x_550.w);
  let x_554 : f32 = x_365.x_MainLightShadowParams.y;
  u_xlatb0 = (0.0f < x_554);
  let x_556 : bool = u_xlatb0;
  if (x_556) {
    let x_561 : f32 = x_365.x_MainLightShadowParams.y;
    u_xlatb67 = (x_561 == 1.0f);
    let x_563 : bool = u_xlatb67;
    if (x_563) {
      let x_566 : vec4<f32> = u_xlat2;
      let x_570 : vec4<f32> = x_365.x_MainLightShadowOffset0;
      u_xlat3 = (vec4<f32>(x_566.x, x_566.y, x_566.x, x_566.y) + x_570);
      let x_573 : vec4<f32> = u_xlat3;
      let x_574 : vec2<f32> = vec2<f32>(x_573.x, x_573.y);
      let x_576 : f32 = u_xlat2.z;
      txVec0 = vec3<f32>(x_574.x, x_574.y, x_576);
      let x_588 : vec3<f32> = txVec0;
      let x_590 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_588.xy, x_588.z);
      u_xlat9.x = x_590;
      let x_593 : vec4<f32> = u_xlat3;
      let x_594 : vec2<f32> = vec2<f32>(x_593.z, x_593.w);
      let x_596 : f32 = u_xlat2.z;
      txVec1 = vec3<f32>(x_594.x, x_594.y, x_596);
      let x_603 : vec3<f32> = txVec1;
      let x_605 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_603.xy, x_603.z);
      u_xlat9.y = x_605;
      let x_607 : vec4<f32> = u_xlat2;
      let x_611 : vec4<f32> = x_365.x_MainLightShadowOffset1;
      u_xlat3 = (vec4<f32>(x_607.x, x_607.y, x_607.x, x_607.y) + x_611);
      let x_614 : vec4<f32> = u_xlat3;
      let x_615 : vec2<f32> = vec2<f32>(x_614.x, x_614.y);
      let x_617 : f32 = u_xlat2.z;
      txVec2 = vec3<f32>(x_615.x, x_615.y, x_617);
      let x_624 : vec3<f32> = txVec2;
      let x_626 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_624.xy, x_624.z);
      u_xlat9.z = x_626;
      let x_629 : vec4<f32> = u_xlat3;
      let x_630 : vec2<f32> = vec2<f32>(x_629.z, x_629.w);
      let x_632 : f32 = u_xlat2.z;
      txVec3 = vec3<f32>(x_630.x, x_630.y, x_632);
      let x_639 : vec3<f32> = txVec3;
      let x_641 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_639.xy, x_639.z);
      u_xlat9.w = x_641;
      let x_643 : vec4<f32> = u_xlat9;
      u_xlat67 = dot(x_643, vec4<f32>(0.25f, 0.25f, 0.25f, 0.25f));
    } else {
      let x_650 : f32 = x_365.x_MainLightShadowParams.y;
      u_xlatb68 = (x_650 == 2.0f);
      let x_652 : bool = u_xlatb68;
      if (x_652) {
        let x_655 : vec4<f32> = u_xlat2;
        let x_658 : vec4<f32> = x_365.x_MainLightShadowmapSize;
        let x_663 : vec2<f32> = ((vec2<f32>(x_655.x, x_655.y) * vec2<f32>(x_658.z, x_658.w)) + vec2<f32>(0.5f, 0.5f));
        let x_664 : vec4<f32> = u_xlat3;
        u_xlat3 = vec4<f32>(x_663.x, x_663.y, x_664.z, x_664.w);
        let x_666 : vec4<f32> = u_xlat3;
        let x_668 : vec2<f32> = floor(vec2<f32>(x_666.x, x_666.y));
        let x_669 : vec4<f32> = u_xlat3;
        u_xlat3 = vec4<f32>(x_668.x, x_668.y, x_669.z, x_669.w);
        let x_673 : vec4<f32> = u_xlat2;
        let x_676 : vec4<f32> = x_365.x_MainLightShadowmapSize;
        let x_679 : vec4<f32> = u_xlat3;
        u_xlat47 = ((vec2<f32>(x_673.x, x_673.y) * vec2<f32>(x_676.z, x_676.w)) + -(vec2<f32>(x_679.x, x_679.y)));
        let x_683 : vec2<f32> = u_xlat47;
        u_xlat9 = (vec4<f32>(x_683.x, x_683.x, x_683.y, x_683.y) + vec4<f32>(0.5f, 1.0f, 0.5f, 1.0f));
        let x_687 : vec4<f32> = u_xlat9;
        let x_689 : vec4<f32> = u_xlat9;
        u_xlat10 = (vec4<f32>(x_687.x, x_687.x, x_687.z, x_687.z) * vec4<f32>(x_689.x, x_689.x, x_689.z, x_689.z));
        let x_692 : vec4<f32> = u_xlat10;
        let x_696 : vec2<f32> = (vec2<f32>(x_692.y, x_692.w) * vec2<f32>(0.079999998f, 0.079999998f));
        let x_697 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_696.x, x_697.y, x_696.y, x_697.w);
        let x_699 : vec4<f32> = u_xlat10;
        let x_702 : vec2<f32> = u_xlat47;
        let x_704 : vec2<f32> = ((vec2<f32>(x_699.x, x_699.z) * vec2<f32>(0.5f, 0.5f)) + -(x_702));
        let x_705 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_704.x, x_704.y, x_705.z, x_705.w);
        let x_708 : vec2<f32> = u_xlat47;
        u_xlat54 = (-(x_708) + vec2<f32>(1.0f, 1.0f));
        let x_713 : vec2<f32> = u_xlat47;
        let x_715 : vec2<f32> = min(x_713, vec2<f32>(0.0f, 0.0f));
        let x_716 : vec4<f32> = u_xlat11;
        u_xlat11 = vec4<f32>(x_715.x, x_715.y, x_716.z, x_716.w);
        let x_718 : vec4<f32> = u_xlat11;
        let x_721 : vec4<f32> = u_xlat11;
        let x_724 : vec2<f32> = u_xlat54;
        let x_725 : vec2<f32> = ((-(vec2<f32>(x_718.x, x_718.y)) * vec2<f32>(x_721.x, x_721.y)) + x_724);
        let x_726 : vec4<f32> = u_xlat11;
        u_xlat11 = vec4<f32>(x_725.x, x_725.y, x_726.z, x_726.w);
        let x_728 : vec2<f32> = u_xlat47;
        u_xlat47 = max(x_728, vec2<f32>(0.0f, 0.0f));
        let x_730 : vec2<f32> = u_xlat47;
        let x_732 : vec2<f32> = u_xlat47;
        let x_734 : vec4<f32> = u_xlat9;
        u_xlat47 = ((-(x_730) * x_732) + vec2<f32>(x_734.y, x_734.w));
        let x_737 : vec4<f32> = u_xlat11;
        let x_739 : vec2<f32> = (vec2<f32>(x_737.x, x_737.y) + vec2<f32>(1.0f, 1.0f));
        let x_740 : vec4<f32> = u_xlat11;
        u_xlat11 = vec4<f32>(x_739.x, x_739.y, x_740.z, x_740.w);
        let x_742 : vec2<f32> = u_xlat47;
        u_xlat47 = (x_742 + vec2<f32>(1.0f, 1.0f));
        let x_745 : vec4<f32> = u_xlat10;
        let x_749 : vec2<f32> = (vec2<f32>(x_745.x, x_745.y) * vec2<f32>(0.159999996f, 0.159999996f));
        let x_750 : vec4<f32> = u_xlat12;
        u_xlat12 = vec4<f32>(x_749.x, x_749.y, x_750.z, x_750.w);
        let x_752 : vec2<f32> = u_xlat54;
        let x_753 : vec2<f32> = (x_752 * vec2<f32>(0.159999996f, 0.159999996f));
        let x_754 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_753.x, x_753.y, x_754.z, x_754.w);
        let x_756 : vec4<f32> = u_xlat11;
        let x_758 : vec2<f32> = (vec2<f32>(x_756.x, x_756.y) * vec2<f32>(0.159999996f, 0.159999996f));
        let x_759 : vec4<f32> = u_xlat11;
        u_xlat11 = vec4<f32>(x_758.x, x_758.y, x_759.z, x_759.w);
        let x_762 : vec2<f32> = u_xlat47;
        let x_763 : vec2<f32> = (x_762 * vec2<f32>(0.159999996f, 0.159999996f));
        let x_764 : vec4<f32> = u_xlat13;
        u_xlat13 = vec4<f32>(x_763.x, x_763.y, x_764.z, x_764.w);
        let x_766 : vec4<f32> = u_xlat9;
        u_xlat47 = (vec2<f32>(x_766.y, x_766.w) * vec2<f32>(0.159999996f, 0.159999996f));
        let x_770 : f32 = u_xlat11.x;
        u_xlat12.z = x_770;
        let x_773 : f32 = u_xlat47.x;
        u_xlat12.w = x_773;
        let x_776 : f32 = u_xlat13.x;
        u_xlat10.z = x_776;
        let x_779 : f32 = u_xlat9.x;
        u_xlat10.w = x_779;
        let x_782 : vec4<f32> = u_xlat10;
        let x_784 : vec4<f32> = u_xlat12;
        u_xlat14 = (vec4<f32>(x_782.z, x_782.w, x_782.x, x_782.z) + vec4<f32>(x_784.z, x_784.w, x_784.x, x_784.z));
        let x_788 : f32 = u_xlat12.y;
        u_xlat11.z = x_788;
        let x_791 : f32 = u_xlat47.y;
        u_xlat11.w = x_791;
        let x_794 : f32 = u_xlat10.y;
        u_xlat13.z = x_794;
        let x_797 : f32 = u_xlat9.z;
        u_xlat13.w = x_797;
        let x_799 : vec4<f32> = u_xlat11;
        let x_801 : vec4<f32> = u_xlat13;
        let x_803 : vec3<f32> = (vec3<f32>(x_799.z, x_799.y, x_799.w) + vec3<f32>(x_801.z, x_801.y, x_801.w));
        let x_804 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_803.x, x_803.y, x_803.z, x_804.w);
        let x_806 : vec4<f32> = u_xlat10;
        let x_808 : vec4<f32> = u_xlat14;
        let x_810 : vec3<f32> = (vec3<f32>(x_806.x, x_806.z, x_806.w) / vec3<f32>(x_808.z, x_808.w, x_808.y));
        let x_811 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_810.x, x_810.y, x_810.z, x_811.w);
        let x_813 : vec4<f32> = u_xlat10;
        let x_819 : vec3<f32> = (vec3<f32>(x_813.x, x_813.y, x_813.z) + vec3<f32>(-2.5f, -0.5f, 1.5f));
        let x_820 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_819.x, x_819.y, x_819.z, x_820.w);
        let x_822 : vec4<f32> = u_xlat13;
        let x_824 : vec4<f32> = u_xlat9;
        let x_826 : vec3<f32> = (vec3<f32>(x_822.z, x_822.y, x_822.w) / vec3<f32>(x_824.x, x_824.y, x_824.z));
        let x_827 : vec4<f32> = u_xlat11;
        u_xlat11 = vec4<f32>(x_826.x, x_826.y, x_826.z, x_827.w);
        let x_829 : vec4<f32> = u_xlat11;
        let x_831 : vec3<f32> = (vec3<f32>(x_829.x, x_829.y, x_829.z) + vec3<f32>(-2.5f, -0.5f, 1.5f));
        let x_832 : vec4<f32> = u_xlat11;
        u_xlat11 = vec4<f32>(x_831.x, x_831.y, x_831.z, x_832.w);
        let x_834 : vec4<f32> = u_xlat10;
        let x_837 : vec4<f32> = x_365.x_MainLightShadowmapSize;
        let x_839 : vec3<f32> = (vec3<f32>(x_834.y, x_834.x, x_834.z) * vec3<f32>(x_837.x, x_837.x, x_837.x));
        let x_840 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_839.x, x_839.y, x_839.z, x_840.w);
        let x_842 : vec4<f32> = u_xlat11;
        let x_845 : vec4<f32> = x_365.x_MainLightShadowmapSize;
        let x_847 : vec3<f32> = (vec3<f32>(x_842.x, x_842.y, x_842.z) * vec3<f32>(x_845.y, x_845.y, x_845.y));
        let x_848 : vec4<f32> = u_xlat11;
        u_xlat11 = vec4<f32>(x_847.x, x_847.y, x_847.z, x_848.w);
        let x_851 : f32 = u_xlat11.x;
        u_xlat10.w = x_851;
        let x_853 : vec4<f32> = u_xlat3;
        let x_856 : vec4<f32> = x_365.x_MainLightShadowmapSize;
        let x_859 : vec4<f32> = u_xlat10;
        u_xlat12 = ((vec4<f32>(x_853.x, x_853.y, x_853.x, x_853.y) * vec4<f32>(x_856.x, x_856.y, x_856.x, x_856.y)) + vec4<f32>(x_859.y, x_859.w, x_859.x, x_859.w));
        let x_862 : vec4<f32> = u_xlat3;
        let x_865 : vec4<f32> = x_365.x_MainLightShadowmapSize;
        let x_868 : vec4<f32> = u_xlat10;
        u_xlat47 = ((vec2<f32>(x_862.x, x_862.y) * vec2<f32>(x_865.x, x_865.y)) + vec2<f32>(x_868.z, x_868.w));
        let x_872 : f32 = u_xlat10.y;
        u_xlat11.w = x_872;
        let x_874 : vec4<f32> = u_xlat11;
        let x_875 : vec2<f32> = vec2<f32>(x_874.y, x_874.z);
        let x_876 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_876.x, x_875.x, x_876.z, x_875.y);
        let x_878 : vec4<f32> = u_xlat3;
        let x_881 : vec4<f32> = x_365.x_MainLightShadowmapSize;
        let x_884 : vec4<f32> = u_xlat10;
        u_xlat13 = ((vec4<f32>(x_878.x, x_878.y, x_878.x, x_878.y) * vec4<f32>(x_881.x, x_881.y, x_881.x, x_881.y)) + vec4<f32>(x_884.x, x_884.y, x_884.z, x_884.y));
        let x_887 : vec4<f32> = u_xlat3;
        let x_890 : vec4<f32> = x_365.x_MainLightShadowmapSize;
        let x_893 : vec4<f32> = u_xlat11;
        u_xlat11 = ((vec4<f32>(x_887.x, x_887.y, x_887.x, x_887.y) * vec4<f32>(x_890.x, x_890.y, x_890.x, x_890.y)) + vec4<f32>(x_893.w, x_893.y, x_893.w, x_893.z));
        let x_896 : vec4<f32> = u_xlat3;
        let x_899 : vec4<f32> = x_365.x_MainLightShadowmapSize;
        let x_902 : vec4<f32> = u_xlat10;
        u_xlat10 = ((vec4<f32>(x_896.x, x_896.y, x_896.x, x_896.y) * vec4<f32>(x_899.x, x_899.y, x_899.x, x_899.y)) + vec4<f32>(x_902.x, x_902.w, x_902.z, x_902.w));
        let x_906 : vec4<f32> = u_xlat9;
        let x_908 : vec4<f32> = u_xlat14;
        u_xlat15 = (vec4<f32>(x_906.x, x_906.x, x_906.x, x_906.y) * vec4<f32>(x_908.z, x_908.w, x_908.y, x_908.z));
        let x_912 : vec4<f32> = u_xlat9;
        let x_914 : vec4<f32> = u_xlat14;
        u_xlat16 = (vec4<f32>(x_912.y, x_912.y, x_912.z, x_912.z) * x_914);
        let x_918 : f32 = u_xlat9.z;
        let x_920 : f32 = u_xlat14.y;
        u_xlat68 = (x_918 * x_920);
        let x_923 : vec4<f32> = u_xlat12;
        let x_924 : vec2<f32> = vec2<f32>(x_923.x, x_923.y);
        let x_926 : f32 = u_xlat2.z;
        txVec4 = vec3<f32>(x_924.x, x_924.y, x_926);
        let x_933 : vec3<f32> = txVec4;
        let x_935 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_933.xy, x_933.z);
        u_xlat3.x = x_935;
        let x_938 : vec4<f32> = u_xlat12;
        let x_939 : vec2<f32> = vec2<f32>(x_938.z, x_938.w);
        let x_941 : f32 = u_xlat2.z;
        txVec5 = vec3<f32>(x_939.x, x_939.y, x_941);
        let x_949 : vec3<f32> = txVec5;
        let x_951 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_949.xy, x_949.z);
        u_xlat25 = x_951;
        let x_952 : f32 = u_xlat25;
        let x_954 : f32 = u_xlat15.y;
        u_xlat25 = (x_952 * x_954);
        let x_957 : f32 = u_xlat15.x;
        let x_959 : f32 = u_xlat3.x;
        let x_961 : f32 = u_xlat25;
        u_xlat3.x = ((x_957 * x_959) + x_961);
        let x_965 : vec2<f32> = u_xlat47;
        let x_967 : f32 = u_xlat2.z;
        txVec6 = vec3<f32>(x_965.x, x_965.y, x_967);
        let x_974 : vec3<f32> = txVec6;
        let x_976 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_974.xy, x_974.z);
        u_xlat25 = x_976;
        let x_978 : f32 = u_xlat15.z;
        let x_979 : f32 = u_xlat25;
        let x_982 : f32 = u_xlat3.x;
        u_xlat3.x = ((x_978 * x_979) + x_982);
        let x_986 : vec4<f32> = u_xlat11;
        let x_987 : vec2<f32> = vec2<f32>(x_986.x, x_986.y);
        let x_989 : f32 = u_xlat2.z;
        txVec7 = vec3<f32>(x_987.x, x_987.y, x_989);
        let x_996 : vec3<f32> = txVec7;
        let x_998 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_996.xy, x_996.z);
        u_xlat25 = x_998;
        let x_1000 : f32 = u_xlat15.w;
        let x_1001 : f32 = u_xlat25;
        let x_1004 : f32 = u_xlat3.x;
        u_xlat3.x = ((x_1000 * x_1001) + x_1004);
        let x_1008 : vec4<f32> = u_xlat13;
        let x_1009 : vec2<f32> = vec2<f32>(x_1008.x, x_1008.y);
        let x_1011 : f32 = u_xlat2.z;
        txVec8 = vec3<f32>(x_1009.x, x_1009.y, x_1011);
        let x_1018 : vec3<f32> = txVec8;
        let x_1020 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1018.xy, x_1018.z);
        u_xlat25 = x_1020;
        let x_1022 : f32 = u_xlat16.x;
        let x_1023 : f32 = u_xlat25;
        let x_1026 : f32 = u_xlat3.x;
        u_xlat3.x = ((x_1022 * x_1023) + x_1026);
        let x_1030 : vec4<f32> = u_xlat13;
        let x_1031 : vec2<f32> = vec2<f32>(x_1030.z, x_1030.w);
        let x_1033 : f32 = u_xlat2.z;
        txVec9 = vec3<f32>(x_1031.x, x_1031.y, x_1033);
        let x_1040 : vec3<f32> = txVec9;
        let x_1042 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1040.xy, x_1040.z);
        u_xlat25 = x_1042;
        let x_1044 : f32 = u_xlat16.y;
        let x_1045 : f32 = u_xlat25;
        let x_1048 : f32 = u_xlat3.x;
        u_xlat3.x = ((x_1044 * x_1045) + x_1048);
        let x_1052 : vec4<f32> = u_xlat11;
        let x_1053 : vec2<f32> = vec2<f32>(x_1052.z, x_1052.w);
        let x_1055 : f32 = u_xlat2.z;
        txVec10 = vec3<f32>(x_1053.x, x_1053.y, x_1055);
        let x_1062 : vec3<f32> = txVec10;
        let x_1064 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1062.xy, x_1062.z);
        u_xlat25 = x_1064;
        let x_1066 : f32 = u_xlat16.z;
        let x_1067 : f32 = u_xlat25;
        let x_1070 : f32 = u_xlat3.x;
        u_xlat3.x = ((x_1066 * x_1067) + x_1070);
        let x_1074 : vec4<f32> = u_xlat10;
        let x_1075 : vec2<f32> = vec2<f32>(x_1074.x, x_1074.y);
        let x_1077 : f32 = u_xlat2.z;
        txVec11 = vec3<f32>(x_1075.x, x_1075.y, x_1077);
        let x_1084 : vec3<f32> = txVec11;
        let x_1086 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1084.xy, x_1084.z);
        u_xlat25 = x_1086;
        let x_1088 : f32 = u_xlat16.w;
        let x_1089 : f32 = u_xlat25;
        let x_1092 : f32 = u_xlat3.x;
        u_xlat3.x = ((x_1088 * x_1089) + x_1092);
        let x_1096 : vec4<f32> = u_xlat10;
        let x_1097 : vec2<f32> = vec2<f32>(x_1096.z, x_1096.w);
        let x_1099 : f32 = u_xlat2.z;
        txVec12 = vec3<f32>(x_1097.x, x_1097.y, x_1099);
        let x_1106 : vec3<f32> = txVec12;
        let x_1108 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1106.xy, x_1106.z);
        u_xlat25 = x_1108;
        let x_1109 : f32 = u_xlat68;
        let x_1110 : f32 = u_xlat25;
        let x_1113 : f32 = u_xlat3.x;
        u_xlat67 = ((x_1109 * x_1110) + x_1113);
      } else {
        let x_1116 : vec4<f32> = u_xlat2;
        let x_1119 : vec4<f32> = x_365.x_MainLightShadowmapSize;
        let x_1122 : vec2<f32> = ((vec2<f32>(x_1116.x, x_1116.y) * vec2<f32>(x_1119.z, x_1119.w)) + vec2<f32>(0.5f, 0.5f));
        let x_1123 : vec4<f32> = u_xlat3;
        u_xlat3 = vec4<f32>(x_1122.x, x_1122.y, x_1123.z, x_1123.w);
        let x_1125 : vec4<f32> = u_xlat3;
        let x_1127 : vec2<f32> = floor(vec2<f32>(x_1125.x, x_1125.y));
        let x_1128 : vec4<f32> = u_xlat3;
        u_xlat3 = vec4<f32>(x_1127.x, x_1127.y, x_1128.z, x_1128.w);
        let x_1130 : vec4<f32> = u_xlat2;
        let x_1133 : vec4<f32> = x_365.x_MainLightShadowmapSize;
        let x_1136 : vec4<f32> = u_xlat3;
        u_xlat47 = ((vec2<f32>(x_1130.x, x_1130.y) * vec2<f32>(x_1133.z, x_1133.w)) + -(vec2<f32>(x_1136.x, x_1136.y)));
        let x_1140 : vec2<f32> = u_xlat47;
        u_xlat9 = (vec4<f32>(x_1140.x, x_1140.x, x_1140.y, x_1140.y) + vec4<f32>(0.5f, 1.0f, 0.5f, 1.0f));
        let x_1143 : vec4<f32> = u_xlat9;
        let x_1145 : vec4<f32> = u_xlat9;
        u_xlat10 = (vec4<f32>(x_1143.x, x_1143.x, x_1143.z, x_1143.z) * vec4<f32>(x_1145.x, x_1145.x, x_1145.z, x_1145.z));
        let x_1148 : vec4<f32> = u_xlat10;
        let x_1152 : vec2<f32> = (vec2<f32>(x_1148.y, x_1148.w) * vec2<f32>(0.040816002f, 0.040816002f));
        let x_1153 : vec4<f32> = u_xlat11;
        u_xlat11 = vec4<f32>(x_1153.x, x_1152.x, x_1153.z, x_1152.y);
        let x_1155 : vec4<f32> = u_xlat10;
        let x_1158 : vec2<f32> = u_xlat47;
        let x_1160 : vec2<f32> = ((vec2<f32>(x_1155.x, x_1155.z) * vec2<f32>(0.5f, 0.5f)) + -(x_1158));
        let x_1161 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_1160.x, x_1161.y, x_1160.y, x_1161.w);
        let x_1163 : vec2<f32> = u_xlat47;
        let x_1165 : vec2<f32> = (-(x_1163) + vec2<f32>(1.0f, 1.0f));
        let x_1166 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_1165.x, x_1165.y, x_1166.z, x_1166.w);
        let x_1168 : vec2<f32> = u_xlat47;
        u_xlat54 = min(x_1168, vec2<f32>(0.0f, 0.0f));
        let x_1170 : vec2<f32> = u_xlat54;
        let x_1172 : vec2<f32> = u_xlat54;
        let x_1174 : vec4<f32> = u_xlat10;
        let x_1176 : vec2<f32> = ((-(x_1170) * x_1172) + vec2<f32>(x_1174.x, x_1174.y));
        let x_1177 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_1176.x, x_1176.y, x_1177.z, x_1177.w);
        let x_1179 : vec2<f32> = u_xlat47;
        u_xlat54 = max(x_1179, vec2<f32>(0.0f, 0.0f));
        let x_1182 : vec2<f32> = u_xlat54;
        let x_1184 : vec2<f32> = u_xlat54;
        let x_1186 : vec4<f32> = u_xlat9;
        let x_1188 : vec2<f32> = ((-(x_1182) * x_1184) + vec2<f32>(x_1186.y, x_1186.w));
        let x_1189 : vec3<f32> = u_xlat31;
        u_xlat31 = vec3<f32>(x_1188.x, x_1189.y, x_1188.y);
        let x_1191 : vec4<f32> = u_xlat10;
        let x_1194 : vec2<f32> = (vec2<f32>(x_1191.x, x_1191.y) + vec2<f32>(2.0f, 2.0f));
        let x_1195 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_1194.x, x_1194.y, x_1195.z, x_1195.w);
        let x_1197 : vec3<f32> = u_xlat31;
        let x_1199 : vec2<f32> = (vec2<f32>(x_1197.x, x_1197.z) + vec2<f32>(2.0f, 2.0f));
        let x_1200 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_1200.x, x_1199.x, x_1200.z, x_1199.y);
        let x_1203 : f32 = u_xlat9.y;
        u_xlat12.z = (x_1203 * 0.081632003f);
        let x_1207 : vec4<f32> = u_xlat9;
        let x_1210 : vec3<f32> = (vec3<f32>(x_1207.z, x_1207.x, x_1207.w) * vec3<f32>(0.081632003f, 0.081632003f, 0.081632003f));
        let x_1211 : vec4<f32> = u_xlat13;
        u_xlat13 = vec4<f32>(x_1210.x, x_1210.y, x_1210.z, x_1211.w);
        let x_1213 : vec4<f32> = u_xlat10;
        let x_1216 : vec2<f32> = (vec2<f32>(x_1213.x, x_1213.y) * vec2<f32>(0.081632003f, 0.081632003f));
        let x_1217 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_1216.x, x_1216.y, x_1217.z, x_1217.w);
        let x_1220 : f32 = u_xlat13.y;
        u_xlat12.x = x_1220;
        let x_1222 : vec2<f32> = u_xlat47;
        let x_1229 : vec2<f32> = ((vec2<f32>(x_1222.x, x_1222.x) * vec2<f32>(-0.081632003f, 0.081632003f)) + vec2<f32>(0.163264006f, 0.081632003f));
        let x_1230 : vec4<f32> = u_xlat12;
        u_xlat12 = vec4<f32>(x_1230.x, x_1229.x, x_1230.z, x_1229.y);
        let x_1232 : vec2<f32> = u_xlat47;
        let x_1236 : vec2<f32> = ((vec2<f32>(x_1232.x, x_1232.x) * vec2<f32>(-0.081632003f, 0.081632003f)) + vec2<f32>(0.081632003f, 0.163264006f));
        let x_1237 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_1236.x, x_1237.y, x_1236.y, x_1237.w);
        let x_1240 : f32 = u_xlat9.x;
        u_xlat10.y = x_1240;
        let x_1243 : f32 = u_xlat11.y;
        u_xlat10.w = x_1243;
        let x_1245 : vec4<f32> = u_xlat10;
        let x_1246 : vec4<f32> = u_xlat12;
        u_xlat12 = (x_1245 + x_1246);
        let x_1248 : vec2<f32> = u_xlat47;
        let x_1251 : vec2<f32> = ((vec2<f32>(x_1248.y, x_1248.y) * vec2<f32>(-0.081632003f, 0.081632003f)) + vec2<f32>(0.163264006f, 0.081632003f));
        let x_1252 : vec4<f32> = u_xlat13;
        u_xlat13 = vec4<f32>(x_1252.x, x_1251.x, x_1252.z, x_1251.y);
        let x_1254 : vec2<f32> = u_xlat47;
        let x_1257 : vec2<f32> = ((vec2<f32>(x_1254.y, x_1254.y) * vec2<f32>(-0.081632003f, 0.081632003f)) + vec2<f32>(0.081632003f, 0.163264006f));
        let x_1258 : vec4<f32> = u_xlat11;
        u_xlat11 = vec4<f32>(x_1257.x, x_1258.y, x_1257.y, x_1258.w);
        let x_1261 : f32 = u_xlat9.y;
        u_xlat11.y = x_1261;
        let x_1263 : vec4<f32> = u_xlat11;
        let x_1264 : vec4<f32> = u_xlat13;
        u_xlat9 = (x_1263 + x_1264);
        let x_1266 : vec4<f32> = u_xlat10;
        let x_1267 : vec4<f32> = u_xlat12;
        u_xlat10 = (x_1266 / x_1267);
        let x_1269 : vec4<f32> = u_xlat10;
        u_xlat10 = (x_1269 + vec4<f32>(-3.5f, -1.5f, 0.5f, 2.5f));
        let x_1275 : vec4<f32> = u_xlat11;
        let x_1276 : vec4<f32> = u_xlat9;
        u_xlat11 = (x_1275 / x_1276);
        let x_1278 : vec4<f32> = u_xlat11;
        u_xlat11 = (x_1278 + vec4<f32>(-3.5f, -1.5f, 0.5f, 2.5f));
        let x_1280 : vec4<f32> = u_xlat10;
        let x_1283 : vec4<f32> = x_365.x_MainLightShadowmapSize;
        u_xlat10 = (vec4<f32>(x_1280.w, x_1280.x, x_1280.y, x_1280.z) * vec4<f32>(x_1283.x, x_1283.x, x_1283.x, x_1283.x));
        let x_1286 : vec4<f32> = u_xlat11;
        let x_1289 : vec4<f32> = x_365.x_MainLightShadowmapSize;
        u_xlat11 = (vec4<f32>(x_1286.x, x_1286.w, x_1286.y, x_1286.z) * vec4<f32>(x_1289.y, x_1289.y, x_1289.y, x_1289.y));
        let x_1292 : vec4<f32> = u_xlat10;
        let x_1293 : vec3<f32> = vec3<f32>(x_1292.y, x_1292.z, x_1292.w);
        let x_1294 : vec4<f32> = u_xlat13;
        u_xlat13 = vec4<f32>(x_1293.x, x_1294.y, x_1293.y, x_1293.z);
        let x_1297 : f32 = u_xlat11.x;
        u_xlat13.y = x_1297;
        let x_1299 : vec4<f32> = u_xlat3;
        let x_1302 : vec4<f32> = x_365.x_MainLightShadowmapSize;
        let x_1305 : vec4<f32> = u_xlat13;
        u_xlat14 = ((vec4<f32>(x_1299.x, x_1299.y, x_1299.x, x_1299.y) * vec4<f32>(x_1302.x, x_1302.y, x_1302.x, x_1302.y)) + vec4<f32>(x_1305.x, x_1305.y, x_1305.z, x_1305.y));
        let x_1308 : vec4<f32> = u_xlat3;
        let x_1311 : vec4<f32> = x_365.x_MainLightShadowmapSize;
        let x_1314 : vec4<f32> = u_xlat13;
        u_xlat47 = ((vec2<f32>(x_1308.x, x_1308.y) * vec2<f32>(x_1311.x, x_1311.y)) + vec2<f32>(x_1314.w, x_1314.y));
        let x_1318 : f32 = u_xlat13.y;
        u_xlat10.y = x_1318;
        let x_1321 : f32 = u_xlat11.z;
        u_xlat13.y = x_1321;
        let x_1323 : vec4<f32> = u_xlat3;
        let x_1326 : vec4<f32> = x_365.x_MainLightShadowmapSize;
        let x_1329 : vec4<f32> = u_xlat13;
        u_xlat15 = ((vec4<f32>(x_1323.x, x_1323.y, x_1323.x, x_1323.y) * vec4<f32>(x_1326.x, x_1326.y, x_1326.x, x_1326.y)) + vec4<f32>(x_1329.x, x_1329.y, x_1329.z, x_1329.y));
        let x_1332 : vec4<f32> = u_xlat3;
        let x_1335 : vec4<f32> = x_365.x_MainLightShadowmapSize;
        let x_1338 : vec4<f32> = u_xlat13;
        let x_1340 : vec2<f32> = ((vec2<f32>(x_1332.x, x_1332.y) * vec2<f32>(x_1335.x, x_1335.y)) + vec2<f32>(x_1338.w, x_1338.y));
        let x_1341 : vec4<f32> = u_xlat16;
        u_xlat16 = vec4<f32>(x_1340.x, x_1340.y, x_1341.z, x_1341.w);
        let x_1344 : f32 = u_xlat13.y;
        u_xlat10.z = x_1344;
        let x_1347 : vec4<f32> = u_xlat3;
        let x_1350 : vec4<f32> = x_365.x_MainLightShadowmapSize;
        let x_1353 : vec4<f32> = u_xlat10;
        u_xlat17 = ((vec4<f32>(x_1347.x, x_1347.y, x_1347.x, x_1347.y) * vec4<f32>(x_1350.x, x_1350.y, x_1350.x, x_1350.y)) + vec4<f32>(x_1353.x, x_1353.y, x_1353.x, x_1353.z));
        let x_1357 : f32 = u_xlat11.w;
        u_xlat13.y = x_1357;
        let x_1360 : vec4<f32> = u_xlat3;
        let x_1363 : vec4<f32> = x_365.x_MainLightShadowmapSize;
        let x_1366 : vec4<f32> = u_xlat13;
        u_xlat18 = ((vec4<f32>(x_1360.x, x_1360.y, x_1360.x, x_1360.y) * vec4<f32>(x_1363.x, x_1363.y, x_1363.x, x_1363.y)) + vec4<f32>(x_1366.x, x_1366.y, x_1366.z, x_1366.y));
        let x_1370 : vec4<f32> = u_xlat3;
        let x_1373 : vec4<f32> = x_365.x_MainLightShadowmapSize;
        let x_1376 : vec4<f32> = u_xlat13;
        u_xlat32 = ((vec2<f32>(x_1370.x, x_1370.y) * vec2<f32>(x_1373.x, x_1373.y)) + vec2<f32>(x_1376.w, x_1376.y));
        let x_1380 : f32 = u_xlat13.y;
        u_xlat10.w = x_1380;
        let x_1383 : vec4<f32> = u_xlat3;
        let x_1386 : vec4<f32> = x_365.x_MainLightShadowmapSize;
        let x_1389 : vec4<f32> = u_xlat10;
        u_xlat60 = ((vec2<f32>(x_1383.x, x_1383.y) * vec2<f32>(x_1386.x, x_1386.y)) + vec2<f32>(x_1389.x, x_1389.w));
        let x_1392 : vec4<f32> = u_xlat13;
        let x_1393 : vec3<f32> = vec3<f32>(x_1392.x, x_1392.z, x_1392.w);
        let x_1394 : vec4<f32> = u_xlat11;
        u_xlat11 = vec4<f32>(x_1393.x, x_1394.y, x_1393.y, x_1393.z);
        let x_1396 : vec4<f32> = u_xlat3;
        let x_1399 : vec4<f32> = x_365.x_MainLightShadowmapSize;
        let x_1402 : vec4<f32> = u_xlat11;
        u_xlat13 = ((vec4<f32>(x_1396.x, x_1396.y, x_1396.x, x_1396.y) * vec4<f32>(x_1399.x, x_1399.y, x_1399.x, x_1399.y)) + vec4<f32>(x_1402.x, x_1402.y, x_1402.z, x_1402.y));
        let x_1406 : vec4<f32> = u_xlat3;
        let x_1409 : vec4<f32> = x_365.x_MainLightShadowmapSize;
        let x_1412 : vec4<f32> = u_xlat11;
        u_xlat55 = ((vec2<f32>(x_1406.x, x_1406.y) * vec2<f32>(x_1409.x, x_1409.y)) + vec2<f32>(x_1412.w, x_1412.y));
        let x_1416 : f32 = u_xlat10.x;
        u_xlat11.x = x_1416;
        let x_1418 : vec4<f32> = u_xlat3;
        let x_1421 : vec4<f32> = x_365.x_MainLightShadowmapSize;
        let x_1424 : vec4<f32> = u_xlat11;
        let x_1426 : vec2<f32> = ((vec2<f32>(x_1418.x, x_1418.y) * vec2<f32>(x_1421.x, x_1421.y)) + vec2<f32>(x_1424.x, x_1424.y));
        let x_1427 : vec4<f32> = u_xlat3;
        u_xlat3 = vec4<f32>(x_1426.x, x_1426.y, x_1427.z, x_1427.w);
        let x_1430 : vec4<f32> = u_xlat9;
        let x_1432 : vec4<f32> = u_xlat12;
        u_xlat19 = (vec4<f32>(x_1430.x, x_1430.x, x_1430.x, x_1430.x) * x_1432);
        let x_1435 : vec4<f32> = u_xlat9;
        let x_1437 : vec4<f32> = u_xlat12;
        u_xlat20 = (vec4<f32>(x_1435.y, x_1435.y, x_1435.y, x_1435.y) * x_1437);
        let x_1440 : vec4<f32> = u_xlat9;
        let x_1442 : vec4<f32> = u_xlat12;
        u_xlat21 = (vec4<f32>(x_1440.z, x_1440.z, x_1440.z, x_1440.z) * x_1442);
        let x_1444 : vec4<f32> = u_xlat9;
        let x_1446 : vec4<f32> = u_xlat12;
        u_xlat9 = (vec4<f32>(x_1444.w, x_1444.w, x_1444.w, x_1444.w) * x_1446);
        let x_1449 : vec4<f32> = u_xlat14;
        let x_1450 : vec2<f32> = vec2<f32>(x_1449.x, x_1449.y);
        let x_1452 : f32 = u_xlat2.z;
        txVec13 = vec3<f32>(x_1450.x, x_1450.y, x_1452);
        let x_1459 : vec3<f32> = txVec13;
        let x_1461 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1459.xy, x_1459.z);
        u_xlat68 = x_1461;
        let x_1463 : vec4<f32> = u_xlat14;
        let x_1464 : vec2<f32> = vec2<f32>(x_1463.z, x_1463.w);
        let x_1466 : f32 = u_xlat2.z;
        txVec14 = vec3<f32>(x_1464.x, x_1464.y, x_1466);
        let x_1474 : vec3<f32> = txVec14;
        let x_1476 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1474.xy, x_1474.z);
        u_xlat70 = x_1476;
        let x_1477 : f32 = u_xlat70;
        let x_1479 : f32 = u_xlat19.y;
        u_xlat70 = (x_1477 * x_1479);
        let x_1482 : f32 = u_xlat19.x;
        let x_1483 : f32 = u_xlat68;
        let x_1485 : f32 = u_xlat70;
        u_xlat68 = ((x_1482 * x_1483) + x_1485);
        let x_1488 : vec2<f32> = u_xlat47;
        let x_1490 : f32 = u_xlat2.z;
        txVec15 = vec3<f32>(x_1488.x, x_1488.y, x_1490);
        let x_1497 : vec3<f32> = txVec15;
        let x_1499 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1497.xy, x_1497.z);
        u_xlat47.x = x_1499;
        let x_1502 : f32 = u_xlat19.z;
        let x_1504 : f32 = u_xlat47.x;
        let x_1506 : f32 = u_xlat68;
        u_xlat68 = ((x_1502 * x_1504) + x_1506);
        let x_1509 : vec4<f32> = u_xlat17;
        let x_1510 : vec2<f32> = vec2<f32>(x_1509.x, x_1509.y);
        let x_1512 : f32 = u_xlat2.z;
        txVec16 = vec3<f32>(x_1510.x, x_1510.y, x_1512);
        let x_1519 : vec3<f32> = txVec16;
        let x_1521 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1519.xy, x_1519.z);
        u_xlat47.x = x_1521;
        let x_1524 : f32 = u_xlat19.w;
        let x_1526 : f32 = u_xlat47.x;
        let x_1528 : f32 = u_xlat68;
        u_xlat68 = ((x_1524 * x_1526) + x_1528);
        let x_1531 : vec4<f32> = u_xlat15;
        let x_1532 : vec2<f32> = vec2<f32>(x_1531.x, x_1531.y);
        let x_1534 : f32 = u_xlat2.z;
        txVec17 = vec3<f32>(x_1532.x, x_1532.y, x_1534);
        let x_1541 : vec3<f32> = txVec17;
        let x_1543 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1541.xy, x_1541.z);
        u_xlat47.x = x_1543;
        let x_1546 : f32 = u_xlat20.x;
        let x_1548 : f32 = u_xlat47.x;
        let x_1550 : f32 = u_xlat68;
        u_xlat68 = ((x_1546 * x_1548) + x_1550);
        let x_1553 : vec4<f32> = u_xlat15;
        let x_1554 : vec2<f32> = vec2<f32>(x_1553.z, x_1553.w);
        let x_1556 : f32 = u_xlat2.z;
        txVec18 = vec3<f32>(x_1554.x, x_1554.y, x_1556);
        let x_1563 : vec3<f32> = txVec18;
        let x_1565 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1563.xy, x_1563.z);
        u_xlat47.x = x_1565;
        let x_1568 : f32 = u_xlat20.y;
        let x_1570 : f32 = u_xlat47.x;
        let x_1572 : f32 = u_xlat68;
        u_xlat68 = ((x_1568 * x_1570) + x_1572);
        let x_1575 : vec4<f32> = u_xlat16;
        let x_1576 : vec2<f32> = vec2<f32>(x_1575.x, x_1575.y);
        let x_1578 : f32 = u_xlat2.z;
        txVec19 = vec3<f32>(x_1576.x, x_1576.y, x_1578);
        let x_1585 : vec3<f32> = txVec19;
        let x_1587 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1585.xy, x_1585.z);
        u_xlat47.x = x_1587;
        let x_1590 : f32 = u_xlat20.z;
        let x_1592 : f32 = u_xlat47.x;
        let x_1594 : f32 = u_xlat68;
        u_xlat68 = ((x_1590 * x_1592) + x_1594);
        let x_1597 : vec4<f32> = u_xlat17;
        let x_1598 : vec2<f32> = vec2<f32>(x_1597.z, x_1597.w);
        let x_1600 : f32 = u_xlat2.z;
        txVec20 = vec3<f32>(x_1598.x, x_1598.y, x_1600);
        let x_1607 : vec3<f32> = txVec20;
        let x_1609 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1607.xy, x_1607.z);
        u_xlat47.x = x_1609;
        let x_1612 : f32 = u_xlat20.w;
        let x_1614 : f32 = u_xlat47.x;
        let x_1616 : f32 = u_xlat68;
        u_xlat68 = ((x_1612 * x_1614) + x_1616);
        let x_1619 : vec4<f32> = u_xlat18;
        let x_1620 : vec2<f32> = vec2<f32>(x_1619.x, x_1619.y);
        let x_1622 : f32 = u_xlat2.z;
        txVec21 = vec3<f32>(x_1620.x, x_1620.y, x_1622);
        let x_1629 : vec3<f32> = txVec21;
        let x_1631 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1629.xy, x_1629.z);
        u_xlat47.x = x_1631;
        let x_1634 : f32 = u_xlat21.x;
        let x_1636 : f32 = u_xlat47.x;
        let x_1638 : f32 = u_xlat68;
        u_xlat68 = ((x_1634 * x_1636) + x_1638);
        let x_1641 : vec4<f32> = u_xlat18;
        let x_1642 : vec2<f32> = vec2<f32>(x_1641.z, x_1641.w);
        let x_1644 : f32 = u_xlat2.z;
        txVec22 = vec3<f32>(x_1642.x, x_1642.y, x_1644);
        let x_1651 : vec3<f32> = txVec22;
        let x_1653 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1651.xy, x_1651.z);
        u_xlat47.x = x_1653;
        let x_1656 : f32 = u_xlat21.y;
        let x_1658 : f32 = u_xlat47.x;
        let x_1660 : f32 = u_xlat68;
        u_xlat68 = ((x_1656 * x_1658) + x_1660);
        let x_1663 : vec2<f32> = u_xlat32;
        let x_1665 : f32 = u_xlat2.z;
        txVec23 = vec3<f32>(x_1663.x, x_1663.y, x_1665);
        let x_1672 : vec3<f32> = txVec23;
        let x_1674 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1672.xy, x_1672.z);
        u_xlat47.x = x_1674;
        let x_1677 : f32 = u_xlat21.z;
        let x_1679 : f32 = u_xlat47.x;
        let x_1681 : f32 = u_xlat68;
        u_xlat68 = ((x_1677 * x_1679) + x_1681);
        let x_1684 : vec2<f32> = u_xlat60;
        let x_1686 : f32 = u_xlat2.z;
        txVec24 = vec3<f32>(x_1684.x, x_1684.y, x_1686);
        let x_1693 : vec3<f32> = txVec24;
        let x_1695 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1693.xy, x_1693.z);
        u_xlat47.x = x_1695;
        let x_1698 : f32 = u_xlat21.w;
        let x_1700 : f32 = u_xlat47.x;
        let x_1702 : f32 = u_xlat68;
        u_xlat68 = ((x_1698 * x_1700) + x_1702);
        let x_1705 : vec4<f32> = u_xlat13;
        let x_1706 : vec2<f32> = vec2<f32>(x_1705.x, x_1705.y);
        let x_1708 : f32 = u_xlat2.z;
        txVec25 = vec3<f32>(x_1706.x, x_1706.y, x_1708);
        let x_1715 : vec3<f32> = txVec25;
        let x_1717 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1715.xy, x_1715.z);
        u_xlat47.x = x_1717;
        let x_1720 : f32 = u_xlat9.x;
        let x_1722 : f32 = u_xlat47.x;
        let x_1724 : f32 = u_xlat68;
        u_xlat68 = ((x_1720 * x_1722) + x_1724);
        let x_1727 : vec4<f32> = u_xlat13;
        let x_1728 : vec2<f32> = vec2<f32>(x_1727.z, x_1727.w);
        let x_1730 : f32 = u_xlat2.z;
        txVec26 = vec3<f32>(x_1728.x, x_1728.y, x_1730);
        let x_1737 : vec3<f32> = txVec26;
        let x_1739 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1737.xy, x_1737.z);
        u_xlat47.x = x_1739;
        let x_1742 : f32 = u_xlat9.y;
        let x_1744 : f32 = u_xlat47.x;
        let x_1746 : f32 = u_xlat68;
        u_xlat68 = ((x_1742 * x_1744) + x_1746);
        let x_1749 : vec2<f32> = u_xlat55;
        let x_1751 : f32 = u_xlat2.z;
        txVec27 = vec3<f32>(x_1749.x, x_1749.y, x_1751);
        let x_1758 : vec3<f32> = txVec27;
        let x_1760 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1758.xy, x_1758.z);
        u_xlat47.x = x_1760;
        let x_1763 : f32 = u_xlat9.z;
        let x_1765 : f32 = u_xlat47.x;
        let x_1767 : f32 = u_xlat68;
        u_xlat68 = ((x_1763 * x_1765) + x_1767);
        let x_1770 : vec4<f32> = u_xlat3;
        let x_1771 : vec2<f32> = vec2<f32>(x_1770.x, x_1770.y);
        let x_1773 : f32 = u_xlat2.z;
        txVec28 = vec3<f32>(x_1771.x, x_1771.y, x_1773);
        let x_1780 : vec3<f32> = txVec28;
        let x_1782 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1780.xy, x_1780.z);
        u_xlat3.x = x_1782;
        let x_1785 : f32 = u_xlat9.w;
        let x_1787 : f32 = u_xlat3.x;
        let x_1789 : f32 = u_xlat68;
        u_xlat67 = ((x_1785 * x_1787) + x_1789);
      }
    }
  } else {
    let x_1793 : vec4<f32> = u_xlat2;
    let x_1794 : vec2<f32> = vec2<f32>(x_1793.x, x_1793.y);
    let x_1796 : f32 = u_xlat2.z;
    txVec29 = vec3<f32>(x_1794.x, x_1794.y, x_1796);
    let x_1803 : vec3<f32> = txVec29;
    let x_1805 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1803.xy, x_1803.z);
    u_xlat67 = x_1805;
  }
  let x_1807 : f32 = x_365.x_MainLightShadowParams.x;
  u_xlat68 = (-(x_1807) + 1.0f);
  let x_1810 : f32 = u_xlat67;
  let x_1812 : f32 = x_365.x_MainLightShadowParams.x;
  let x_1814 : f32 = u_xlat68;
  u_xlat67 = ((x_1810 * x_1812) + x_1814);
  let x_1818 : f32 = u_xlat2.z;
  u_xlatb3 = (0.0f >= x_1818);
  let x_1822 : f32 = u_xlat2.z;
  u_xlatb25 = (x_1822 >= 1.0f);
  let x_1824 : bool = u_xlatb25;
  let x_1825 : bool = u_xlatb3;
  u_xlatb3 = (x_1824 | x_1825);
  let x_1827 : bool = u_xlatb3;
  let x_1828 : f32 = u_xlat67;
  u_xlat67 = select(x_1828, 1.0f, x_1827);
  let x_1830 : vec3<f32> = u_xlat1;
  let x_1832 : vec4<f32> = x_160.x_MainLightPosition;
  u_xlat1.x = dot(x_1830, -(vec3<f32>(x_1832.x, x_1832.y, x_1832.z)));
  let x_1838 : f32 = u_xlat1.x;
  u_xlat1.x = clamp(x_1838, 0.0f, 1.0f);
  let x_1842 : f32 = u_xlat67;
  let x_1845 : vec4<f32> = x_160.x_MainLightColor;
  u_xlat23 = (vec3<f32>(x_1842, x_1842, x_1842) * vec3<f32>(x_1845.x, x_1845.y, x_1845.z));
  let x_1848 : vec3<f32> = u_xlat23;
  let x_1849 : vec3<f32> = u_xlat1;
  u_xlat1 = (x_1848 * vec3<f32>(x_1849.x, x_1849.x, x_1849.x));
  let x_1852 : vec3<f32> = u_xlat1;
  let x_1853 : vec4<f32> = u_xlat6;
  u_xlat1 = (x_1852 * vec3<f32>(x_1853.x, x_1853.y, x_1853.z));
  let x_1857 : f32 = x_95.unity_LODFade.x;
  u_xlatb67 = (x_1857 < 0.0f);
  let x_1860 : f32 = x_95.unity_LODFade.x;
  u_xlat25 = (x_1860 + 1.0f);
  let x_1862 : bool = u_xlatb67;
  if (x_1862) {
    let x_1866 : f32 = u_xlat25;
    x_1863 = x_1866;
  } else {
    let x_1869 : f32 = x_95.unity_LODFade.x;
    x_1863 = x_1869;
  }
  let x_1870 : f32 = x_1863;
  u_xlat67 = x_1870;
  let x_1871 : f32 = u_xlat67;
  u_xlatb25 = (0.5f >= x_1871);
  let x_1873 : vec3<f32> = u_xlat5;
  let x_1877 : vec4<f32> = x_160.x_ScreenParams;
  u_xlat5 = (abs(x_1873) * vec3<f32>(x_1877.x, x_1877.y, x_1877.x));
  let x_1883 : vec3<f32> = u_xlat5;
  u_xlatu5 = vec3<u32>(x_1883);
  let x_1887 : u32 = u_xlatu5.z;
  u_xlatu47 = (x_1887 * 1025u);
  let x_1891 : u32 = u_xlatu47;
  u_xlatu69 = (x_1891 >> 6u);
  let x_1895 : u32 = u_xlatu69;
  let x_1896 : u32 = u_xlatu47;
  u_xlati47 = bitcast<i32>((x_1895 ^ x_1896));
  let x_1899 : i32 = u_xlati47;
  u_xlatu47 = (bitcast<u32>(x_1899) * 9u);
  let x_1903 : u32 = u_xlatu47;
  u_xlatu69 = (x_1903 >> 11u);
  let x_1906 : u32 = u_xlatu69;
  let x_1907 : u32 = u_xlatu47;
  u_xlati47 = bitcast<i32>((x_1906 ^ x_1907));
  let x_1910 : i32 = u_xlati47;
  u_xlati47 = (x_1910 * 32769i);
  let x_1913 : i32 = u_xlati47;
  let x_1916 : u32 = u_xlatu5.y;
  u_xlati47 = bitcast<i32>((bitcast<u32>(x_1913) ^ x_1916));
  let x_1919 : i32 = u_xlati47;
  u_xlatu47 = (bitcast<u32>(x_1919) * 1025u);
  let x_1922 : u32 = u_xlatu47;
  u_xlatu69 = (x_1922 >> 6u);
  let x_1924 : u32 = u_xlatu69;
  let x_1925 : u32 = u_xlatu47;
  u_xlati47 = bitcast<i32>((x_1924 ^ x_1925));
  let x_1928 : i32 = u_xlati47;
  u_xlatu47 = (bitcast<u32>(x_1928) * 9u);
  let x_1931 : u32 = u_xlatu47;
  u_xlatu69 = (x_1931 >> 11u);
  let x_1933 : u32 = u_xlatu69;
  let x_1934 : u32 = u_xlatu47;
  u_xlati47 = bitcast<i32>((x_1933 ^ x_1934));
  let x_1937 : i32 = u_xlati47;
  u_xlati47 = (x_1937 * 32769i);
  let x_1939 : i32 = u_xlati47;
  let x_1942 : u32 = u_xlatu5.x;
  u_xlati47 = bitcast<i32>((bitcast<u32>(x_1939) ^ x_1942));
  let x_1945 : i32 = u_xlati47;
  u_xlatu47 = (bitcast<u32>(x_1945) * 1025u);
  let x_1948 : u32 = u_xlatu47;
  u_xlatu69 = (x_1948 >> 6u);
  let x_1950 : u32 = u_xlatu69;
  let x_1951 : u32 = u_xlatu47;
  u_xlati47 = bitcast<i32>((x_1950 ^ x_1951));
  let x_1954 : i32 = u_xlati47;
  u_xlatu47 = (bitcast<u32>(x_1954) * 9u);
  let x_1957 : u32 = u_xlatu47;
  u_xlatu69 = (x_1957 >> 11u);
  let x_1959 : u32 = u_xlatu69;
  let x_1960 : u32 = u_xlatu47;
  u_xlati47 = bitcast<i32>((x_1959 ^ x_1960));
  let x_1963 : i32 = u_xlati47;
  u_xlati47 = (x_1963 * 32769i);
  param = 1065353216i;
  let x_1969 : i32 = u_xlati47;
  param_1 = x_1969;
  param_2 = 0i;
  param_3 = 23i;
  let x_1972 : i32 = int_bitfieldInsert_i1_i1_i1_i1_(&(param), &(param_1), &(param_2), &(param_3));
  u_xlat47.x = bitcast<f32>(x_1972);
  let x_1976 : f32 = u_xlat47.x;
  u_xlat47.x = (x_1976 + -1.0f);
  let x_1981 : f32 = u_xlat47.x;
  u_xlat69 = (-(x_1981) + 1.0f);
  let x_1984 : bool = u_xlatb25;
  if (x_1984) {
    let x_1989 : f32 = u_xlat47.x;
    x_1985 = x_1989;
  } else {
    let x_1991 : f32 = u_xlat69;
    x_1985 = x_1991;
  }
  let x_1992 : f32 = x_1985;
  u_xlat25 = x_1992;
  let x_1993 : f32 = u_xlat67;
  let x_1995 : f32 = u_xlat25;
  u_xlat67 = ((x_1993 * 2.0f) + -(x_1995));
  let x_1998 : f32 = u_xlat67;
  let x_2000 : f32 = u_xlat6.w;
  u_xlat25 = (x_1998 * x_2000);
  let x_2003 : f32 = u_xlat25;
  u_xlatb47 = (x_2003 >= 0.400000006f);
  let x_2006 : bool = u_xlatb47;
  let x_2007 : f32 = u_xlat25;
  u_xlat47.x = select(0.0f, x_2007, x_2006);
  let x_2011 : f32 = u_xlat6.w;
  let x_2012 : f32 = u_xlat67;
  u_xlat67 = ((x_2011 * x_2012) + -0.400000006f);
  let x_2016 : f32 = u_xlat25;
  u_xlat69 = dpdxCoarse(x_2016);
  let x_2018 : f32 = u_xlat25;
  u_xlat25 = dpdyCoarse(x_2018);
  let x_2020 : f32 = u_xlat25;
  let x_2022 : f32 = u_xlat69;
  u_xlat25 = (abs(x_2020) + abs(x_2022));
  let x_2025 : f32 = u_xlat25;
  u_xlat25 = max(x_2025, 0.0001f);
  let x_2028 : f32 = u_xlat67;
  let x_2029 : f32 = u_xlat25;
  u_xlat67 = (x_2028 / x_2029);
  let x_2031 : f32 = u_xlat67;
  u_xlat67 = (x_2031 + 0.5f);
  let x_2033 : f32 = u_xlat67;
  u_xlat67 = clamp(x_2033, 0.0f, 1.0f);
  let x_2036 : f32 = x_160.x_AlphaToMaskAvailable;
  u_xlatb25 = !((x_2036 == 0.0f));
  let x_2038 : bool = u_xlatb25;
  if (x_2038) {
    let x_2042 : f32 = u_xlat67;
    x_2039 = x_2042;
  } else {
    let x_2045 : f32 = u_xlat47.x;
    x_2039 = x_2045;
  }
  let x_2046 : f32 = x_2039;
  u_xlat67 = x_2046;
  let x_2047 : f32 = u_xlat67;
  u_xlat47.x = (x_2047 + -0.0001f);
  let x_2052 : f32 = u_xlat47.x;
  u_xlatb47 = (x_2052 < 0.0f);
  let x_2054 : bool = u_xlatb47;
  if (((select(0i, 1i, x_2054) * -1i) != 0i)) {
    discard;
  }
  let x_2062 : vec3<f32> = u_xlat22;
  let x_2063 : vec3<f32> = u_xlat30;
  u_xlat22 = (x_2062 * vec3<f32>(x_2063.y, x_2063.y, x_2063.y));
  let x_2066 : vec3<f32> = u_xlat30;
  let x_2068 : vec4<f32> = vs_INTERP2;
  let x_2071 : vec3<f32> = u_xlat22;
  u_xlat22 = ((vec3<f32>(x_2066.x, x_2066.x, x_2066.x) * vec3<f32>(x_2068.x, x_2068.y, x_2068.z)) + x_2071);
  let x_2073 : vec3<f32> = u_xlat30;
  let x_2075 : vec3<f32> = vs_INTERP1;
  let x_2077 : vec3<f32> = u_xlat22;
  u_xlat22 = ((vec3<f32>(x_2073.z, x_2073.z, x_2073.z) * x_2075) + x_2077);
  let x_2079 : vec3<f32> = u_xlat22;
  let x_2080 : vec3<f32> = u_xlat22;
  u_xlat47.x = dot(x_2079, x_2080);
  let x_2084 : f32 = u_xlat47.x;
  u_xlat47.x = inverseSqrt(x_2084);
  let x_2087 : vec3<f32> = u_xlat22;
  let x_2088 : vec2<f32> = u_xlat47;
  u_xlat22 = (x_2087 * vec3<f32>(x_2088.x, x_2088.x, x_2088.x));
  let x_2092 : f32 = vs_INTERP0.y;
  let x_2094 : f32 = x_160.unity_MatrixV[1i].z;
  u_xlat47.x = (x_2092 * x_2094);
  let x_2098 : f32 = x_160.unity_MatrixV[0i].z;
  let x_2100 : f32 = vs_INTERP0.x;
  let x_2103 : f32 = u_xlat47.x;
  u_xlat47.x = ((x_2098 * x_2100) + x_2103);
  let x_2107 : f32 = x_160.unity_MatrixV[2i].z;
  let x_2109 : f32 = vs_INTERP0.z;
  let x_2112 : f32 = u_xlat47.x;
  u_xlat47.x = ((x_2107 * x_2109) + x_2112);
  let x_2116 : f32 = u_xlat47.x;
  let x_2118 : f32 = x_160.unity_MatrixV[3i].z;
  u_xlat47.x = (x_2116 + x_2118);
  let x_2122 : f32 = u_xlat47.x;
  let x_2126 : f32 = x_160.x_ProjectionParams.y;
  u_xlat47.x = (-(x_2122) + -(x_2126));
  let x_2131 : f32 = u_xlat47.x;
  u_xlat47.x = max(x_2131, 0.0f);
  let x_2135 : f32 = u_xlat47.x;
  let x_2138 : f32 = x_160.unity_FogParams.x;
  u_xlat47.x = (x_2135 * x_2138);
  let x_2148 : vec2<f32> = vs_INTERP5;
  let x_2150 : f32 = x_160.x_GlobalMipBias.x;
  let x_2151 : vec4<f32> = textureSampleBias(unity_Lightmap, samplerunity_Lightmap, x_2148, x_2150);
  u_xlat5 = vec3<f32>(x_2151.x, x_2151.y, x_2151.z);
  let x_2154 : vec4<f32> = x_160.x_ScaledScreenParams;
  let x_2155 : vec2<f32> = vec2<f32>(x_2154.x, x_2154.y);
  let x_2159 : vec2<f32> = (vec2<f32>(1.0f, 1.0f) / vec2<f32>(x_2155.x, x_2155.y));
  let x_2160 : vec4<f32> = u_xlat6;
  u_xlat6 = vec4<f32>(x_2159.x, x_2159.y, x_2160.z, x_2160.w);
  let x_2162 : vec4<f32> = u_xlat6;
  let x_2164 : vec4<f32> = hlslcc_FragCoord;
  let x_2166 : vec2<f32> = (vec2<f32>(x_2162.x, x_2162.y) * vec2<f32>(x_2164.x, x_2164.y));
  let x_2167 : vec4<f32> = u_xlat6;
  u_xlat6 = vec4<f32>(x_2166.x, x_2166.y, x_2167.z, x_2167.w);
  let x_2170 : f32 = u_xlat6.y;
  let x_2173 : f32 = x_160.x_ScaleBiasRt.x;
  let x_2176 : f32 = x_160.x_ScaleBiasRt.y;
  u_xlat69 = ((x_2170 * x_2173) + x_2176);
  let x_2178 : f32 = u_xlat69;
  u_xlat6.z = (-(x_2178) + 1.0f);
  let x_2183 : f32 = u_xlat8.x;
  u_xlat8.x = x_2183;
  let x_2186 : f32 = u_xlat8.x;
  u_xlat8.x = clamp(x_2186, 0.0f, 1.0f);
  let x_2189 : f32 = u_xlat67;
  u_xlat67 = x_2189;
  let x_2190 : f32 = u_xlat67;
  u_xlat67 = clamp(x_2190, 0.0f, 1.0f);
  let x_2192 : vec3<f32> = u_xlat7;
  u_xlat7 = (x_2192 * vec3<f32>(0.959999979f, 0.959999979f, 0.959999979f));
  let x_2197 : f32 = u_xlat8.x;
  u_xlat69 = (-(x_2197) + 1.0f);
  let x_2200 : f32 = u_xlat69;
  let x_2201 : f32 = u_xlat69;
  u_xlat70 = (x_2200 * x_2201);
  let x_2203 : f32 = u_xlat70;
  u_xlat70 = max(x_2203, 0.0078125f);
  let x_2207 : f32 = u_xlat70;
  let x_2208 : f32 = u_xlat70;
  u_xlat71 = (x_2207 * x_2208);
  let x_2212 : f32 = u_xlat8.x;
  u_xlat28 = (x_2212 + 0.040000021f);
  let x_2215 : f32 = u_xlat28;
  u_xlat28 = min(x_2215, 1.0f);
  let x_2218 : f32 = u_xlat70;
  u_xlat72 = ((x_2218 * 4.0f) + 2.0f);
  let x_2226 : vec4<f32> = u_xlat6;
  let x_2229 : f32 = x_160.x_GlobalMipBias.x;
  let x_2230 : vec4<f32> = textureSampleBias(x_ScreenSpaceOcclusionTexture, sampler_ScreenSpaceOcclusionTexture, vec2<f32>(x_2226.x, x_2226.z), x_2229);
  u_xlat6.x = x_2230.x;
  let x_2235 : f32 = u_xlat6.x;
  u_xlat50 = (x_2235 + -1.0f);
  let x_2238 : f32 = x_160.x_AmbientOcclusionParam.w;
  let x_2239 : f32 = u_xlat50;
  u_xlat50 = ((x_2238 * x_2239) + 1.0f);
  let x_2243 : f32 = u_xlat6.x;
  let x_2245 : f32 = vs_INTERP4.w;
  u_xlat6.x = min(x_2243, x_2245);
  let x_2248 : bool = u_xlatb0;
  if (x_2248) {
    let x_2252 : f32 = x_365.x_MainLightShadowParams.y;
    u_xlatb0 = (x_2252 == 1.0f);
    let x_2254 : bool = u_xlatb0;
    if (x_2254) {
      let x_2257 : vec4<f32> = u_xlat2;
      let x_2260 : vec4<f32> = x_365.x_MainLightShadowOffset0;
      u_xlat8 = (vec4<f32>(x_2257.x, x_2257.y, x_2257.x, x_2257.y) + x_2260);
      let x_2263 : vec4<f32> = u_xlat8;
      let x_2264 : vec2<f32> = vec2<f32>(x_2263.x, x_2263.y);
      let x_2266 : f32 = u_xlat2.z;
      txVec30 = vec3<f32>(x_2264.x, x_2264.y, x_2266);
      let x_2273 : vec3<f32> = txVec30;
      let x_2275 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2273.xy, x_2273.z);
      u_xlat9.x = x_2275;
      let x_2278 : vec4<f32> = u_xlat8;
      let x_2279 : vec2<f32> = vec2<f32>(x_2278.z, x_2278.w);
      let x_2281 : f32 = u_xlat2.z;
      txVec31 = vec3<f32>(x_2279.x, x_2279.y, x_2281);
      let x_2288 : vec3<f32> = txVec31;
      let x_2290 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2288.xy, x_2288.z);
      u_xlat9.y = x_2290;
      let x_2292 : vec4<f32> = u_xlat2;
      let x_2295 : vec4<f32> = x_365.x_MainLightShadowOffset1;
      u_xlat8 = (vec4<f32>(x_2292.x, x_2292.y, x_2292.x, x_2292.y) + x_2295);
      let x_2298 : vec4<f32> = u_xlat8;
      let x_2299 : vec2<f32> = vec2<f32>(x_2298.x, x_2298.y);
      let x_2301 : f32 = u_xlat2.z;
      txVec32 = vec3<f32>(x_2299.x, x_2299.y, x_2301);
      let x_2308 : vec3<f32> = txVec32;
      let x_2310 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2308.xy, x_2308.z);
      u_xlat9.z = x_2310;
      let x_2313 : vec4<f32> = u_xlat8;
      let x_2314 : vec2<f32> = vec2<f32>(x_2313.z, x_2313.w);
      let x_2316 : f32 = u_xlat2.z;
      txVec33 = vec3<f32>(x_2314.x, x_2314.y, x_2316);
      let x_2323 : vec3<f32> = txVec33;
      let x_2325 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2323.xy, x_2323.z);
      u_xlat9.w = x_2325;
      let x_2327 : vec4<f32> = u_xlat9;
      u_xlat0.x = dot(x_2327, vec4<f32>(0.25f, 0.25f, 0.25f, 0.25f));
    } else {
      let x_2333 : f32 = x_365.x_MainLightShadowParams.y;
      u_xlatb73 = (x_2333 == 2.0f);
      let x_2335 : bool = u_xlatb73;
      if (x_2335) {
        let x_2338 : vec4<f32> = u_xlat2;
        let x_2341 : vec4<f32> = x_365.x_MainLightShadowmapSize;
        let x_2344 : vec2<f32> = ((vec2<f32>(x_2338.x, x_2338.y) * vec2<f32>(x_2341.z, x_2341.w)) + vec2<f32>(0.5f, 0.5f));
        let x_2345 : vec4<f32> = u_xlat8;
        u_xlat8 = vec4<f32>(x_2344.x, x_2344.y, x_2345.z, x_2345.w);
        let x_2347 : vec4<f32> = u_xlat8;
        let x_2349 : vec2<f32> = floor(vec2<f32>(x_2347.x, x_2347.y));
        let x_2350 : vec4<f32> = u_xlat8;
        u_xlat8 = vec4<f32>(x_2349.x, x_2349.y, x_2350.z, x_2350.w);
        let x_2353 : vec4<f32> = u_xlat2;
        let x_2356 : vec4<f32> = x_365.x_MainLightShadowmapSize;
        let x_2359 : vec4<f32> = u_xlat8;
        u_xlat52 = ((vec2<f32>(x_2353.x, x_2353.y) * vec2<f32>(x_2356.z, x_2356.w)) + -(vec2<f32>(x_2359.x, x_2359.y)));
        let x_2363 : vec2<f32> = u_xlat52;
        u_xlat9 = (vec4<f32>(x_2363.x, x_2363.x, x_2363.y, x_2363.y) + vec4<f32>(0.5f, 1.0f, 0.5f, 1.0f));
        let x_2366 : vec4<f32> = u_xlat9;
        let x_2368 : vec4<f32> = u_xlat9;
        u_xlat10 = (vec4<f32>(x_2366.x, x_2366.x, x_2366.z, x_2366.z) * vec4<f32>(x_2368.x, x_2368.x, x_2368.z, x_2368.z));
        let x_2371 : vec4<f32> = u_xlat10;
        let x_2373 : vec2<f32> = (vec2<f32>(x_2371.y, x_2371.w) * vec2<f32>(0.079999998f, 0.079999998f));
        let x_2374 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_2373.x, x_2374.y, x_2373.y, x_2374.w);
        let x_2376 : vec4<f32> = u_xlat10;
        let x_2379 : vec2<f32> = u_xlat52;
        let x_2381 : vec2<f32> = ((vec2<f32>(x_2376.x, x_2376.z) * vec2<f32>(0.5f, 0.5f)) + -(x_2379));
        let x_2382 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_2381.x, x_2381.y, x_2382.z, x_2382.w);
        let x_2384 : vec2<f32> = u_xlat52;
        u_xlat54 = (-(x_2384) + vec2<f32>(1.0f, 1.0f));
        let x_2387 : vec2<f32> = u_xlat52;
        let x_2388 : vec2<f32> = min(x_2387, vec2<f32>(0.0f, 0.0f));
        let x_2389 : vec4<f32> = u_xlat11;
        u_xlat11 = vec4<f32>(x_2388.x, x_2388.y, x_2389.z, x_2389.w);
        let x_2391 : vec4<f32> = u_xlat11;
        let x_2394 : vec4<f32> = u_xlat11;
        let x_2397 : vec2<f32> = u_xlat54;
        let x_2398 : vec2<f32> = ((-(vec2<f32>(x_2391.x, x_2391.y)) * vec2<f32>(x_2394.x, x_2394.y)) + x_2397);
        let x_2399 : vec4<f32> = u_xlat11;
        u_xlat11 = vec4<f32>(x_2398.x, x_2398.y, x_2399.z, x_2399.w);
        let x_2401 : vec2<f32> = u_xlat52;
        u_xlat52 = max(x_2401, vec2<f32>(0.0f, 0.0f));
        let x_2403 : vec2<f32> = u_xlat52;
        let x_2405 : vec2<f32> = u_xlat52;
        let x_2407 : vec4<f32> = u_xlat9;
        u_xlat52 = ((-(x_2403) * x_2405) + vec2<f32>(x_2407.y, x_2407.w));
        let x_2410 : vec4<f32> = u_xlat11;
        let x_2412 : vec2<f32> = (vec2<f32>(x_2410.x, x_2410.y) + vec2<f32>(1.0f, 1.0f));
        let x_2413 : vec4<f32> = u_xlat11;
        u_xlat11 = vec4<f32>(x_2412.x, x_2412.y, x_2413.z, x_2413.w);
        let x_2415 : vec2<f32> = u_xlat52;
        u_xlat52 = (x_2415 + vec2<f32>(1.0f, 1.0f));
        let x_2417 : vec4<f32> = u_xlat10;
        let x_2419 : vec2<f32> = (vec2<f32>(x_2417.x, x_2417.y) * vec2<f32>(0.159999996f, 0.159999996f));
        let x_2420 : vec4<f32> = u_xlat12;
        u_xlat12 = vec4<f32>(x_2419.x, x_2419.y, x_2420.z, x_2420.w);
        let x_2422 : vec2<f32> = u_xlat54;
        let x_2423 : vec2<f32> = (x_2422 * vec2<f32>(0.159999996f, 0.159999996f));
        let x_2424 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_2423.x, x_2423.y, x_2424.z, x_2424.w);
        let x_2426 : vec4<f32> = u_xlat11;
        let x_2428 : vec2<f32> = (vec2<f32>(x_2426.x, x_2426.y) * vec2<f32>(0.159999996f, 0.159999996f));
        let x_2429 : vec4<f32> = u_xlat11;
        u_xlat11 = vec4<f32>(x_2428.x, x_2428.y, x_2429.z, x_2429.w);
        let x_2431 : vec2<f32> = u_xlat52;
        let x_2432 : vec2<f32> = (x_2431 * vec2<f32>(0.159999996f, 0.159999996f));
        let x_2433 : vec4<f32> = u_xlat13;
        u_xlat13 = vec4<f32>(x_2432.x, x_2432.y, x_2433.z, x_2433.w);
        let x_2435 : vec4<f32> = u_xlat9;
        u_xlat52 = (vec2<f32>(x_2435.y, x_2435.w) * vec2<f32>(0.159999996f, 0.159999996f));
        let x_2439 : f32 = u_xlat11.x;
        u_xlat12.z = x_2439;
        let x_2442 : f32 = u_xlat52.x;
        u_xlat12.w = x_2442;
        let x_2445 : f32 = u_xlat13.x;
        u_xlat10.z = x_2445;
        let x_2448 : f32 = u_xlat9.x;
        u_xlat10.w = x_2448;
        let x_2450 : vec4<f32> = u_xlat10;
        let x_2452 : vec4<f32> = u_xlat12;
        u_xlat14 = (vec4<f32>(x_2450.z, x_2450.w, x_2450.x, x_2450.z) + vec4<f32>(x_2452.z, x_2452.w, x_2452.x, x_2452.z));
        let x_2456 : f32 = u_xlat12.y;
        u_xlat11.z = x_2456;
        let x_2459 : f32 = u_xlat52.y;
        u_xlat11.w = x_2459;
        let x_2462 : f32 = u_xlat10.y;
        u_xlat13.z = x_2462;
        let x_2465 : f32 = u_xlat9.z;
        u_xlat13.w = x_2465;
        let x_2467 : vec4<f32> = u_xlat11;
        let x_2469 : vec4<f32> = u_xlat13;
        let x_2471 : vec3<f32> = (vec3<f32>(x_2467.z, x_2467.y, x_2467.w) + vec3<f32>(x_2469.z, x_2469.y, x_2469.w));
        let x_2472 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_2471.x, x_2471.y, x_2471.z, x_2472.w);
        let x_2474 : vec4<f32> = u_xlat10;
        let x_2476 : vec4<f32> = u_xlat14;
        let x_2478 : vec3<f32> = (vec3<f32>(x_2474.x, x_2474.z, x_2474.w) / vec3<f32>(x_2476.z, x_2476.w, x_2476.y));
        let x_2479 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_2478.x, x_2478.y, x_2478.z, x_2479.w);
        let x_2481 : vec4<f32> = u_xlat10;
        let x_2483 : vec3<f32> = (vec3<f32>(x_2481.x, x_2481.y, x_2481.z) + vec3<f32>(-2.5f, -0.5f, 1.5f));
        let x_2484 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_2483.x, x_2483.y, x_2483.z, x_2484.w);
        let x_2486 : vec4<f32> = u_xlat13;
        let x_2488 : vec4<f32> = u_xlat9;
        let x_2490 : vec3<f32> = (vec3<f32>(x_2486.z, x_2486.y, x_2486.w) / vec3<f32>(x_2488.x, x_2488.y, x_2488.z));
        let x_2491 : vec4<f32> = u_xlat11;
        u_xlat11 = vec4<f32>(x_2490.x, x_2490.y, x_2490.z, x_2491.w);
        let x_2493 : vec4<f32> = u_xlat11;
        let x_2495 : vec3<f32> = (vec3<f32>(x_2493.x, x_2493.y, x_2493.z) + vec3<f32>(-2.5f, -0.5f, 1.5f));
        let x_2496 : vec4<f32> = u_xlat11;
        u_xlat11 = vec4<f32>(x_2495.x, x_2495.y, x_2495.z, x_2496.w);
        let x_2498 : vec4<f32> = u_xlat10;
        let x_2501 : vec4<f32> = x_365.x_MainLightShadowmapSize;
        let x_2503 : vec3<f32> = (vec3<f32>(x_2498.y, x_2498.x, x_2498.z) * vec3<f32>(x_2501.x, x_2501.x, x_2501.x));
        let x_2504 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_2503.x, x_2503.y, x_2503.z, x_2504.w);
        let x_2506 : vec4<f32> = u_xlat11;
        let x_2509 : vec4<f32> = x_365.x_MainLightShadowmapSize;
        let x_2511 : vec3<f32> = (vec3<f32>(x_2506.x, x_2506.y, x_2506.z) * vec3<f32>(x_2509.y, x_2509.y, x_2509.y));
        let x_2512 : vec4<f32> = u_xlat11;
        u_xlat11 = vec4<f32>(x_2511.x, x_2511.y, x_2511.z, x_2512.w);
        let x_2515 : f32 = u_xlat11.x;
        u_xlat10.w = x_2515;
        let x_2517 : vec4<f32> = u_xlat8;
        let x_2520 : vec4<f32> = x_365.x_MainLightShadowmapSize;
        let x_2523 : vec4<f32> = u_xlat10;
        u_xlat12 = ((vec4<f32>(x_2517.x, x_2517.y, x_2517.x, x_2517.y) * vec4<f32>(x_2520.x, x_2520.y, x_2520.x, x_2520.y)) + vec4<f32>(x_2523.y, x_2523.w, x_2523.x, x_2523.w));
        let x_2526 : vec4<f32> = u_xlat8;
        let x_2529 : vec4<f32> = x_365.x_MainLightShadowmapSize;
        let x_2532 : vec4<f32> = u_xlat10;
        u_xlat52 = ((vec2<f32>(x_2526.x, x_2526.y) * vec2<f32>(x_2529.x, x_2529.y)) + vec2<f32>(x_2532.z, x_2532.w));
        let x_2536 : f32 = u_xlat10.y;
        u_xlat11.w = x_2536;
        let x_2538 : vec4<f32> = u_xlat11;
        let x_2539 : vec2<f32> = vec2<f32>(x_2538.y, x_2538.z);
        let x_2540 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_2540.x, x_2539.x, x_2540.z, x_2539.y);
        let x_2542 : vec4<f32> = u_xlat8;
        let x_2545 : vec4<f32> = x_365.x_MainLightShadowmapSize;
        let x_2548 : vec4<f32> = u_xlat10;
        u_xlat13 = ((vec4<f32>(x_2542.x, x_2542.y, x_2542.x, x_2542.y) * vec4<f32>(x_2545.x, x_2545.y, x_2545.x, x_2545.y)) + vec4<f32>(x_2548.x, x_2548.y, x_2548.z, x_2548.y));
        let x_2551 : vec4<f32> = u_xlat8;
        let x_2554 : vec4<f32> = x_365.x_MainLightShadowmapSize;
        let x_2557 : vec4<f32> = u_xlat11;
        u_xlat11 = ((vec4<f32>(x_2551.x, x_2551.y, x_2551.x, x_2551.y) * vec4<f32>(x_2554.x, x_2554.y, x_2554.x, x_2554.y)) + vec4<f32>(x_2557.w, x_2557.y, x_2557.w, x_2557.z));
        let x_2560 : vec4<f32> = u_xlat8;
        let x_2563 : vec4<f32> = x_365.x_MainLightShadowmapSize;
        let x_2566 : vec4<f32> = u_xlat10;
        u_xlat10 = ((vec4<f32>(x_2560.x, x_2560.y, x_2560.x, x_2560.y) * vec4<f32>(x_2563.x, x_2563.y, x_2563.x, x_2563.y)) + vec4<f32>(x_2566.x, x_2566.w, x_2566.z, x_2566.w));
        let x_2569 : vec4<f32> = u_xlat9;
        let x_2571 : vec4<f32> = u_xlat14;
        u_xlat15 = (vec4<f32>(x_2569.x, x_2569.x, x_2569.x, x_2569.y) * vec4<f32>(x_2571.z, x_2571.w, x_2571.y, x_2571.z));
        let x_2574 : vec4<f32> = u_xlat9;
        let x_2576 : vec4<f32> = u_xlat14;
        u_xlat16 = (vec4<f32>(x_2574.y, x_2574.y, x_2574.z, x_2574.z) * x_2576);
        let x_2580 : f32 = u_xlat9.z;
        let x_2582 : f32 = u_xlat14.y;
        u_xlat73 = (x_2580 * x_2582);
        let x_2585 : vec4<f32> = u_xlat12;
        let x_2586 : vec2<f32> = vec2<f32>(x_2585.x, x_2585.y);
        let x_2588 : f32 = u_xlat2.z;
        txVec34 = vec3<f32>(x_2586.x, x_2586.y, x_2588);
        let x_2595 : vec3<f32> = txVec34;
        let x_2597 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2595.xy, x_2595.z);
        u_xlat8.x = x_2597;
        let x_2600 : vec4<f32> = u_xlat12;
        let x_2601 : vec2<f32> = vec2<f32>(x_2600.z, x_2600.w);
        let x_2603 : f32 = u_xlat2.z;
        txVec35 = vec3<f32>(x_2601.x, x_2601.y, x_2603);
        let x_2610 : vec3<f32> = txVec35;
        let x_2612 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2610.xy, x_2610.z);
        u_xlat30.x = x_2612;
        let x_2615 : f32 = u_xlat30.x;
        let x_2617 : f32 = u_xlat15.y;
        u_xlat30.x = (x_2615 * x_2617);
        let x_2621 : f32 = u_xlat15.x;
        let x_2623 : f32 = u_xlat8.x;
        let x_2626 : f32 = u_xlat30.x;
        u_xlat8.x = ((x_2621 * x_2623) + x_2626);
        let x_2630 : vec2<f32> = u_xlat52;
        let x_2632 : f32 = u_xlat2.z;
        txVec36 = vec3<f32>(x_2630.x, x_2630.y, x_2632);
        let x_2639 : vec3<f32> = txVec36;
        let x_2641 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2639.xy, x_2639.z);
        u_xlat30.x = x_2641;
        let x_2644 : f32 = u_xlat15.z;
        let x_2646 : f32 = u_xlat30.x;
        let x_2649 : f32 = u_xlat8.x;
        u_xlat8.x = ((x_2644 * x_2646) + x_2649);
        let x_2653 : vec4<f32> = u_xlat11;
        let x_2654 : vec2<f32> = vec2<f32>(x_2653.x, x_2653.y);
        let x_2656 : f32 = u_xlat2.z;
        txVec37 = vec3<f32>(x_2654.x, x_2654.y, x_2656);
        let x_2663 : vec3<f32> = txVec37;
        let x_2665 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2663.xy, x_2663.z);
        u_xlat30.x = x_2665;
        let x_2668 : f32 = u_xlat15.w;
        let x_2670 : f32 = u_xlat30.x;
        let x_2673 : f32 = u_xlat8.x;
        u_xlat8.x = ((x_2668 * x_2670) + x_2673);
        let x_2677 : vec4<f32> = u_xlat13;
        let x_2678 : vec2<f32> = vec2<f32>(x_2677.x, x_2677.y);
        let x_2680 : f32 = u_xlat2.z;
        txVec38 = vec3<f32>(x_2678.x, x_2678.y, x_2680);
        let x_2687 : vec3<f32> = txVec38;
        let x_2689 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2687.xy, x_2687.z);
        u_xlat30.x = x_2689;
        let x_2692 : f32 = u_xlat16.x;
        let x_2694 : f32 = u_xlat30.x;
        let x_2697 : f32 = u_xlat8.x;
        u_xlat8.x = ((x_2692 * x_2694) + x_2697);
        let x_2701 : vec4<f32> = u_xlat13;
        let x_2702 : vec2<f32> = vec2<f32>(x_2701.z, x_2701.w);
        let x_2704 : f32 = u_xlat2.z;
        txVec39 = vec3<f32>(x_2702.x, x_2702.y, x_2704);
        let x_2711 : vec3<f32> = txVec39;
        let x_2713 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2711.xy, x_2711.z);
        u_xlat30.x = x_2713;
        let x_2716 : f32 = u_xlat16.y;
        let x_2718 : f32 = u_xlat30.x;
        let x_2721 : f32 = u_xlat8.x;
        u_xlat8.x = ((x_2716 * x_2718) + x_2721);
        let x_2725 : vec4<f32> = u_xlat11;
        let x_2726 : vec2<f32> = vec2<f32>(x_2725.z, x_2725.w);
        let x_2728 : f32 = u_xlat2.z;
        txVec40 = vec3<f32>(x_2726.x, x_2726.y, x_2728);
        let x_2735 : vec3<f32> = txVec40;
        let x_2737 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2735.xy, x_2735.z);
        u_xlat30.x = x_2737;
        let x_2740 : f32 = u_xlat16.z;
        let x_2742 : f32 = u_xlat30.x;
        let x_2745 : f32 = u_xlat8.x;
        u_xlat8.x = ((x_2740 * x_2742) + x_2745);
        let x_2749 : vec4<f32> = u_xlat10;
        let x_2750 : vec2<f32> = vec2<f32>(x_2749.x, x_2749.y);
        let x_2752 : f32 = u_xlat2.z;
        txVec41 = vec3<f32>(x_2750.x, x_2750.y, x_2752);
        let x_2759 : vec3<f32> = txVec41;
        let x_2761 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2759.xy, x_2759.z);
        u_xlat30.x = x_2761;
        let x_2764 : f32 = u_xlat16.w;
        let x_2766 : f32 = u_xlat30.x;
        let x_2769 : f32 = u_xlat8.x;
        u_xlat8.x = ((x_2764 * x_2766) + x_2769);
        let x_2773 : vec4<f32> = u_xlat10;
        let x_2774 : vec2<f32> = vec2<f32>(x_2773.z, x_2773.w);
        let x_2776 : f32 = u_xlat2.z;
        txVec42 = vec3<f32>(x_2774.x, x_2774.y, x_2776);
        let x_2783 : vec3<f32> = txVec42;
        let x_2785 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2783.xy, x_2783.z);
        u_xlat30.x = x_2785;
        let x_2787 : f32 = u_xlat73;
        let x_2789 : f32 = u_xlat30.x;
        let x_2792 : f32 = u_xlat8.x;
        u_xlat0.x = ((x_2787 * x_2789) + x_2792);
      } else {
        let x_2796 : vec4<f32> = u_xlat2;
        let x_2799 : vec4<f32> = x_365.x_MainLightShadowmapSize;
        let x_2802 : vec2<f32> = ((vec2<f32>(x_2796.x, x_2796.y) * vec2<f32>(x_2799.z, x_2799.w)) + vec2<f32>(0.5f, 0.5f));
        let x_2803 : vec4<f32> = u_xlat8;
        u_xlat8 = vec4<f32>(x_2802.x, x_2802.y, x_2803.z, x_2803.w);
        let x_2805 : vec4<f32> = u_xlat8;
        let x_2807 : vec2<f32> = floor(vec2<f32>(x_2805.x, x_2805.y));
        let x_2808 : vec4<f32> = u_xlat8;
        u_xlat8 = vec4<f32>(x_2807.x, x_2807.y, x_2808.z, x_2808.w);
        let x_2810 : vec4<f32> = u_xlat2;
        let x_2813 : vec4<f32> = x_365.x_MainLightShadowmapSize;
        let x_2816 : vec4<f32> = u_xlat8;
        u_xlat52 = ((vec2<f32>(x_2810.x, x_2810.y) * vec2<f32>(x_2813.z, x_2813.w)) + -(vec2<f32>(x_2816.x, x_2816.y)));
        let x_2820 : vec2<f32> = u_xlat52;
        u_xlat9 = (vec4<f32>(x_2820.x, x_2820.x, x_2820.y, x_2820.y) + vec4<f32>(0.5f, 1.0f, 0.5f, 1.0f));
        let x_2823 : vec4<f32> = u_xlat9;
        let x_2825 : vec4<f32> = u_xlat9;
        u_xlat10 = (vec4<f32>(x_2823.x, x_2823.x, x_2823.z, x_2823.z) * vec4<f32>(x_2825.x, x_2825.x, x_2825.z, x_2825.z));
        let x_2828 : vec4<f32> = u_xlat10;
        let x_2830 : vec2<f32> = (vec2<f32>(x_2828.y, x_2828.w) * vec2<f32>(0.040816002f, 0.040816002f));
        let x_2831 : vec4<f32> = u_xlat11;
        u_xlat11 = vec4<f32>(x_2831.x, x_2830.x, x_2831.z, x_2830.y);
        let x_2833 : vec4<f32> = u_xlat10;
        let x_2836 : vec2<f32> = u_xlat52;
        let x_2838 : vec2<f32> = ((vec2<f32>(x_2833.x, x_2833.z) * vec2<f32>(0.5f, 0.5f)) + -(x_2836));
        let x_2839 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_2838.x, x_2839.y, x_2838.y, x_2839.w);
        let x_2841 : vec2<f32> = u_xlat52;
        let x_2843 : vec2<f32> = (-(x_2841) + vec2<f32>(1.0f, 1.0f));
        let x_2844 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_2843.x, x_2843.y, x_2844.z, x_2844.w);
        let x_2846 : vec2<f32> = u_xlat52;
        u_xlat54 = min(x_2846, vec2<f32>(0.0f, 0.0f));
        let x_2848 : vec2<f32> = u_xlat54;
        let x_2850 : vec2<f32> = u_xlat54;
        let x_2852 : vec4<f32> = u_xlat10;
        let x_2854 : vec2<f32> = ((-(x_2848) * x_2850) + vec2<f32>(x_2852.x, x_2852.y));
        let x_2855 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_2854.x, x_2854.y, x_2855.z, x_2855.w);
        let x_2857 : vec2<f32> = u_xlat52;
        u_xlat54 = max(x_2857, vec2<f32>(0.0f, 0.0f));
        let x_2859 : vec2<f32> = u_xlat54;
        let x_2861 : vec2<f32> = u_xlat54;
        let x_2863 : vec4<f32> = u_xlat9;
        let x_2865 : vec2<f32> = ((-(x_2859) * x_2861) + vec2<f32>(x_2863.y, x_2863.w));
        let x_2866 : vec3<f32> = u_xlat31;
        u_xlat31 = vec3<f32>(x_2865.x, x_2866.y, x_2865.y);
        let x_2868 : vec4<f32> = u_xlat10;
        let x_2870 : vec2<f32> = (vec2<f32>(x_2868.x, x_2868.y) + vec2<f32>(2.0f, 2.0f));
        let x_2871 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_2870.x, x_2870.y, x_2871.z, x_2871.w);
        let x_2873 : vec3<f32> = u_xlat31;
        let x_2875 : vec2<f32> = (vec2<f32>(x_2873.x, x_2873.z) + vec2<f32>(2.0f, 2.0f));
        let x_2876 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_2876.x, x_2875.x, x_2876.z, x_2875.y);
        let x_2879 : f32 = u_xlat9.y;
        u_xlat12.z = (x_2879 * 0.081632003f);
        let x_2882 : vec4<f32> = u_xlat9;
        let x_2884 : vec3<f32> = (vec3<f32>(x_2882.z, x_2882.x, x_2882.w) * vec3<f32>(0.081632003f, 0.081632003f, 0.081632003f));
        let x_2885 : vec4<f32> = u_xlat13;
        u_xlat13 = vec4<f32>(x_2884.x, x_2884.y, x_2884.z, x_2885.w);
        let x_2887 : vec4<f32> = u_xlat10;
        let x_2889 : vec2<f32> = (vec2<f32>(x_2887.x, x_2887.y) * vec2<f32>(0.081632003f, 0.081632003f));
        let x_2890 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_2889.x, x_2889.y, x_2890.z, x_2890.w);
        let x_2893 : f32 = u_xlat13.y;
        u_xlat12.x = x_2893;
        let x_2895 : vec2<f32> = u_xlat52;
        let x_2898 : vec2<f32> = ((vec2<f32>(x_2895.x, x_2895.x) * vec2<f32>(-0.081632003f, 0.081632003f)) + vec2<f32>(0.163264006f, 0.081632003f));
        let x_2899 : vec4<f32> = u_xlat12;
        u_xlat12 = vec4<f32>(x_2899.x, x_2898.x, x_2899.z, x_2898.y);
        let x_2901 : vec2<f32> = u_xlat52;
        let x_2904 : vec2<f32> = ((vec2<f32>(x_2901.x, x_2901.x) * vec2<f32>(-0.081632003f, 0.081632003f)) + vec2<f32>(0.081632003f, 0.163264006f));
        let x_2905 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_2904.x, x_2905.y, x_2904.y, x_2905.w);
        let x_2908 : f32 = u_xlat9.x;
        u_xlat10.y = x_2908;
        let x_2911 : f32 = u_xlat11.y;
        u_xlat10.w = x_2911;
        let x_2913 : vec4<f32> = u_xlat10;
        let x_2914 : vec4<f32> = u_xlat12;
        u_xlat12 = (x_2913 + x_2914);
        let x_2916 : vec2<f32> = u_xlat52;
        let x_2919 : vec2<f32> = ((vec2<f32>(x_2916.y, x_2916.y) * vec2<f32>(-0.081632003f, 0.081632003f)) + vec2<f32>(0.163264006f, 0.081632003f));
        let x_2920 : vec4<f32> = u_xlat13;
        u_xlat13 = vec4<f32>(x_2920.x, x_2919.x, x_2920.z, x_2919.y);
        let x_2922 : vec2<f32> = u_xlat52;
        let x_2925 : vec2<f32> = ((vec2<f32>(x_2922.y, x_2922.y) * vec2<f32>(-0.081632003f, 0.081632003f)) + vec2<f32>(0.081632003f, 0.163264006f));
        let x_2926 : vec4<f32> = u_xlat11;
        u_xlat11 = vec4<f32>(x_2925.x, x_2926.y, x_2925.y, x_2926.w);
        let x_2929 : f32 = u_xlat9.y;
        u_xlat11.y = x_2929;
        let x_2931 : vec4<f32> = u_xlat11;
        let x_2932 : vec4<f32> = u_xlat13;
        u_xlat9 = (x_2931 + x_2932);
        let x_2934 : vec4<f32> = u_xlat10;
        let x_2935 : vec4<f32> = u_xlat12;
        u_xlat10 = (x_2934 / x_2935);
        let x_2937 : vec4<f32> = u_xlat10;
        u_xlat10 = (x_2937 + vec4<f32>(-3.5f, -1.5f, 0.5f, 2.5f));
        let x_2939 : vec4<f32> = u_xlat11;
        let x_2940 : vec4<f32> = u_xlat9;
        u_xlat11 = (x_2939 / x_2940);
        let x_2942 : vec4<f32> = u_xlat11;
        u_xlat11 = (x_2942 + vec4<f32>(-3.5f, -1.5f, 0.5f, 2.5f));
        let x_2944 : vec4<f32> = u_xlat10;
        let x_2947 : vec4<f32> = x_365.x_MainLightShadowmapSize;
        u_xlat10 = (vec4<f32>(x_2944.w, x_2944.x, x_2944.y, x_2944.z) * vec4<f32>(x_2947.x, x_2947.x, x_2947.x, x_2947.x));
        let x_2950 : vec4<f32> = u_xlat11;
        let x_2953 : vec4<f32> = x_365.x_MainLightShadowmapSize;
        u_xlat11 = (vec4<f32>(x_2950.x, x_2950.w, x_2950.y, x_2950.z) * vec4<f32>(x_2953.y, x_2953.y, x_2953.y, x_2953.y));
        let x_2956 : vec4<f32> = u_xlat10;
        let x_2957 : vec3<f32> = vec3<f32>(x_2956.y, x_2956.z, x_2956.w);
        let x_2958 : vec4<f32> = u_xlat13;
        u_xlat13 = vec4<f32>(x_2957.x, x_2958.y, x_2957.y, x_2957.z);
        let x_2961 : f32 = u_xlat11.x;
        u_xlat13.y = x_2961;
        let x_2963 : vec4<f32> = u_xlat8;
        let x_2966 : vec4<f32> = x_365.x_MainLightShadowmapSize;
        let x_2969 : vec4<f32> = u_xlat13;
        u_xlat14 = ((vec4<f32>(x_2963.x, x_2963.y, x_2963.x, x_2963.y) * vec4<f32>(x_2966.x, x_2966.y, x_2966.x, x_2966.y)) + vec4<f32>(x_2969.x, x_2969.y, x_2969.z, x_2969.y));
        let x_2972 : vec4<f32> = u_xlat8;
        let x_2975 : vec4<f32> = x_365.x_MainLightShadowmapSize;
        let x_2978 : vec4<f32> = u_xlat13;
        u_xlat52 = ((vec2<f32>(x_2972.x, x_2972.y) * vec2<f32>(x_2975.x, x_2975.y)) + vec2<f32>(x_2978.w, x_2978.y));
        let x_2982 : f32 = u_xlat13.y;
        u_xlat10.y = x_2982;
        let x_2985 : f32 = u_xlat11.z;
        u_xlat13.y = x_2985;
        let x_2987 : vec4<f32> = u_xlat8;
        let x_2990 : vec4<f32> = x_365.x_MainLightShadowmapSize;
        let x_2993 : vec4<f32> = u_xlat13;
        u_xlat15 = ((vec4<f32>(x_2987.x, x_2987.y, x_2987.x, x_2987.y) * vec4<f32>(x_2990.x, x_2990.y, x_2990.x, x_2990.y)) + vec4<f32>(x_2993.x, x_2993.y, x_2993.z, x_2993.y));
        let x_2996 : vec4<f32> = u_xlat8;
        let x_2999 : vec4<f32> = x_365.x_MainLightShadowmapSize;
        let x_3002 : vec4<f32> = u_xlat13;
        let x_3004 : vec2<f32> = ((vec2<f32>(x_2996.x, x_2996.y) * vec2<f32>(x_2999.x, x_2999.y)) + vec2<f32>(x_3002.w, x_3002.y));
        let x_3005 : vec4<f32> = u_xlat16;
        u_xlat16 = vec4<f32>(x_3004.x, x_3004.y, x_3005.z, x_3005.w);
        let x_3008 : f32 = u_xlat13.y;
        u_xlat10.z = x_3008;
        let x_3010 : vec4<f32> = u_xlat8;
        let x_3013 : vec4<f32> = x_365.x_MainLightShadowmapSize;
        let x_3016 : vec4<f32> = u_xlat10;
        u_xlat17 = ((vec4<f32>(x_3010.x, x_3010.y, x_3010.x, x_3010.y) * vec4<f32>(x_3013.x, x_3013.y, x_3013.x, x_3013.y)) + vec4<f32>(x_3016.x, x_3016.y, x_3016.x, x_3016.z));
        let x_3020 : f32 = u_xlat11.w;
        u_xlat13.y = x_3020;
        let x_3022 : vec4<f32> = u_xlat8;
        let x_3025 : vec4<f32> = x_365.x_MainLightShadowmapSize;
        let x_3028 : vec4<f32> = u_xlat13;
        u_xlat18 = ((vec4<f32>(x_3022.x, x_3022.y, x_3022.x, x_3022.y) * vec4<f32>(x_3025.x, x_3025.y, x_3025.x, x_3025.y)) + vec4<f32>(x_3028.x, x_3028.y, x_3028.z, x_3028.y));
        let x_3031 : vec4<f32> = u_xlat8;
        let x_3034 : vec4<f32> = x_365.x_MainLightShadowmapSize;
        let x_3037 : vec4<f32> = u_xlat13;
        u_xlat32 = ((vec2<f32>(x_3031.x, x_3031.y) * vec2<f32>(x_3034.x, x_3034.y)) + vec2<f32>(x_3037.w, x_3037.y));
        let x_3041 : f32 = u_xlat13.y;
        u_xlat10.w = x_3041;
        let x_3043 : vec4<f32> = u_xlat8;
        let x_3046 : vec4<f32> = x_365.x_MainLightShadowmapSize;
        let x_3049 : vec4<f32> = u_xlat10;
        u_xlat60 = ((vec2<f32>(x_3043.x, x_3043.y) * vec2<f32>(x_3046.x, x_3046.y)) + vec2<f32>(x_3049.x, x_3049.w));
        let x_3052 : vec4<f32> = u_xlat13;
        let x_3053 : vec3<f32> = vec3<f32>(x_3052.x, x_3052.z, x_3052.w);
        let x_3054 : vec4<f32> = u_xlat11;
        u_xlat11 = vec4<f32>(x_3053.x, x_3054.y, x_3053.y, x_3053.z);
        let x_3056 : vec4<f32> = u_xlat8;
        let x_3059 : vec4<f32> = x_365.x_MainLightShadowmapSize;
        let x_3062 : vec4<f32> = u_xlat11;
        u_xlat13 = ((vec4<f32>(x_3056.x, x_3056.y, x_3056.x, x_3056.y) * vec4<f32>(x_3059.x, x_3059.y, x_3059.x, x_3059.y)) + vec4<f32>(x_3062.x, x_3062.y, x_3062.z, x_3062.y));
        let x_3065 : vec4<f32> = u_xlat8;
        let x_3068 : vec4<f32> = x_365.x_MainLightShadowmapSize;
        let x_3071 : vec4<f32> = u_xlat11;
        u_xlat55 = ((vec2<f32>(x_3065.x, x_3065.y) * vec2<f32>(x_3068.x, x_3068.y)) + vec2<f32>(x_3071.w, x_3071.y));
        let x_3075 : f32 = u_xlat10.x;
        u_xlat11.x = x_3075;
        let x_3077 : vec4<f32> = u_xlat8;
        let x_3080 : vec4<f32> = x_365.x_MainLightShadowmapSize;
        let x_3083 : vec4<f32> = u_xlat11;
        let x_3085 : vec2<f32> = ((vec2<f32>(x_3077.x, x_3077.y) * vec2<f32>(x_3080.x, x_3080.y)) + vec2<f32>(x_3083.x, x_3083.y));
        let x_3086 : vec4<f32> = u_xlat8;
        u_xlat8 = vec4<f32>(x_3085.x, x_3085.y, x_3086.z, x_3086.w);
        let x_3088 : vec4<f32> = u_xlat9;
        let x_3090 : vec4<f32> = u_xlat12;
        u_xlat19 = (vec4<f32>(x_3088.x, x_3088.x, x_3088.x, x_3088.x) * x_3090);
        let x_3092 : vec4<f32> = u_xlat9;
        let x_3094 : vec4<f32> = u_xlat12;
        u_xlat20 = (vec4<f32>(x_3092.y, x_3092.y, x_3092.y, x_3092.y) * x_3094);
        let x_3096 : vec4<f32> = u_xlat9;
        let x_3098 : vec4<f32> = u_xlat12;
        u_xlat21 = (vec4<f32>(x_3096.z, x_3096.z, x_3096.z, x_3096.z) * x_3098);
        let x_3100 : vec4<f32> = u_xlat9;
        let x_3102 : vec4<f32> = u_xlat12;
        u_xlat9 = (vec4<f32>(x_3100.w, x_3100.w, x_3100.w, x_3100.w) * x_3102);
        let x_3105 : vec4<f32> = u_xlat14;
        let x_3106 : vec2<f32> = vec2<f32>(x_3105.x, x_3105.y);
        let x_3108 : f32 = u_xlat2.z;
        txVec43 = vec3<f32>(x_3106.x, x_3106.y, x_3108);
        let x_3115 : vec3<f32> = txVec43;
        let x_3117 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_3115.xy, x_3115.z);
        u_xlat73 = x_3117;
        let x_3119 : vec4<f32> = u_xlat14;
        let x_3120 : vec2<f32> = vec2<f32>(x_3119.z, x_3119.w);
        let x_3122 : f32 = u_xlat2.z;
        txVec44 = vec3<f32>(x_3120.x, x_3120.y, x_3122);
        let x_3129 : vec3<f32> = txVec44;
        let x_3131 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_3129.xy, x_3129.z);
        u_xlat10.x = x_3131;
        let x_3134 : f32 = u_xlat10.x;
        let x_3136 : f32 = u_xlat19.y;
        u_xlat10.x = (x_3134 * x_3136);
        let x_3140 : f32 = u_xlat19.x;
        let x_3141 : f32 = u_xlat73;
        let x_3144 : f32 = u_xlat10.x;
        u_xlat73 = ((x_3140 * x_3141) + x_3144);
        let x_3147 : vec2<f32> = u_xlat52;
        let x_3149 : f32 = u_xlat2.z;
        txVec45 = vec3<f32>(x_3147.x, x_3147.y, x_3149);
        let x_3156 : vec3<f32> = txVec45;
        let x_3158 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_3156.xy, x_3156.z);
        u_xlat52.x = x_3158;
        let x_3161 : f32 = u_xlat19.z;
        let x_3163 : f32 = u_xlat52.x;
        let x_3165 : f32 = u_xlat73;
        u_xlat73 = ((x_3161 * x_3163) + x_3165);
        let x_3168 : vec4<f32> = u_xlat17;
        let x_3169 : vec2<f32> = vec2<f32>(x_3168.x, x_3168.y);
        let x_3171 : f32 = u_xlat2.z;
        txVec46 = vec3<f32>(x_3169.x, x_3169.y, x_3171);
        let x_3178 : vec3<f32> = txVec46;
        let x_3180 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_3178.xy, x_3178.z);
        u_xlat52.x = x_3180;
        let x_3183 : f32 = u_xlat19.w;
        let x_3185 : f32 = u_xlat52.x;
        let x_3187 : f32 = u_xlat73;
        u_xlat73 = ((x_3183 * x_3185) + x_3187);
        let x_3190 : vec4<f32> = u_xlat15;
        let x_3191 : vec2<f32> = vec2<f32>(x_3190.x, x_3190.y);
        let x_3193 : f32 = u_xlat2.z;
        txVec47 = vec3<f32>(x_3191.x, x_3191.y, x_3193);
        let x_3200 : vec3<f32> = txVec47;
        let x_3202 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_3200.xy, x_3200.z);
        u_xlat52.x = x_3202;
        let x_3205 : f32 = u_xlat20.x;
        let x_3207 : f32 = u_xlat52.x;
        let x_3209 : f32 = u_xlat73;
        u_xlat73 = ((x_3205 * x_3207) + x_3209);
        let x_3212 : vec4<f32> = u_xlat15;
        let x_3213 : vec2<f32> = vec2<f32>(x_3212.z, x_3212.w);
        let x_3215 : f32 = u_xlat2.z;
        txVec48 = vec3<f32>(x_3213.x, x_3213.y, x_3215);
        let x_3222 : vec3<f32> = txVec48;
        let x_3224 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_3222.xy, x_3222.z);
        u_xlat52.x = x_3224;
        let x_3227 : f32 = u_xlat20.y;
        let x_3229 : f32 = u_xlat52.x;
        let x_3231 : f32 = u_xlat73;
        u_xlat73 = ((x_3227 * x_3229) + x_3231);
        let x_3234 : vec4<f32> = u_xlat16;
        let x_3235 : vec2<f32> = vec2<f32>(x_3234.x, x_3234.y);
        let x_3237 : f32 = u_xlat2.z;
        txVec49 = vec3<f32>(x_3235.x, x_3235.y, x_3237);
        let x_3244 : vec3<f32> = txVec49;
        let x_3246 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_3244.xy, x_3244.z);
        u_xlat52.x = x_3246;
        let x_3249 : f32 = u_xlat20.z;
        let x_3251 : f32 = u_xlat52.x;
        let x_3253 : f32 = u_xlat73;
        u_xlat73 = ((x_3249 * x_3251) + x_3253);
        let x_3256 : vec4<f32> = u_xlat17;
        let x_3257 : vec2<f32> = vec2<f32>(x_3256.z, x_3256.w);
        let x_3259 : f32 = u_xlat2.z;
        txVec50 = vec3<f32>(x_3257.x, x_3257.y, x_3259);
        let x_3266 : vec3<f32> = txVec50;
        let x_3268 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_3266.xy, x_3266.z);
        u_xlat52.x = x_3268;
        let x_3271 : f32 = u_xlat20.w;
        let x_3273 : f32 = u_xlat52.x;
        let x_3275 : f32 = u_xlat73;
        u_xlat73 = ((x_3271 * x_3273) + x_3275);
        let x_3278 : vec4<f32> = u_xlat18;
        let x_3279 : vec2<f32> = vec2<f32>(x_3278.x, x_3278.y);
        let x_3281 : f32 = u_xlat2.z;
        txVec51 = vec3<f32>(x_3279.x, x_3279.y, x_3281);
        let x_3288 : vec3<f32> = txVec51;
        let x_3290 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_3288.xy, x_3288.z);
        u_xlat52.x = x_3290;
        let x_3293 : f32 = u_xlat21.x;
        let x_3295 : f32 = u_xlat52.x;
        let x_3297 : f32 = u_xlat73;
        u_xlat73 = ((x_3293 * x_3295) + x_3297);
        let x_3300 : vec4<f32> = u_xlat18;
        let x_3301 : vec2<f32> = vec2<f32>(x_3300.z, x_3300.w);
        let x_3303 : f32 = u_xlat2.z;
        txVec52 = vec3<f32>(x_3301.x, x_3301.y, x_3303);
        let x_3310 : vec3<f32> = txVec52;
        let x_3312 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_3310.xy, x_3310.z);
        u_xlat52.x = x_3312;
        let x_3315 : f32 = u_xlat21.y;
        let x_3317 : f32 = u_xlat52.x;
        let x_3319 : f32 = u_xlat73;
        u_xlat73 = ((x_3315 * x_3317) + x_3319);
        let x_3322 : vec2<f32> = u_xlat32;
        let x_3324 : f32 = u_xlat2.z;
        txVec53 = vec3<f32>(x_3322.x, x_3322.y, x_3324);
        let x_3331 : vec3<f32> = txVec53;
        let x_3333 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_3331.xy, x_3331.z);
        u_xlat52.x = x_3333;
        let x_3336 : f32 = u_xlat21.z;
        let x_3338 : f32 = u_xlat52.x;
        let x_3340 : f32 = u_xlat73;
        u_xlat73 = ((x_3336 * x_3338) + x_3340);
        let x_3343 : vec2<f32> = u_xlat60;
        let x_3345 : f32 = u_xlat2.z;
        txVec54 = vec3<f32>(x_3343.x, x_3343.y, x_3345);
        let x_3352 : vec3<f32> = txVec54;
        let x_3354 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_3352.xy, x_3352.z);
        u_xlat52.x = x_3354;
        let x_3357 : f32 = u_xlat21.w;
        let x_3359 : f32 = u_xlat52.x;
        let x_3361 : f32 = u_xlat73;
        u_xlat73 = ((x_3357 * x_3359) + x_3361);
        let x_3364 : vec4<f32> = u_xlat13;
        let x_3365 : vec2<f32> = vec2<f32>(x_3364.x, x_3364.y);
        let x_3367 : f32 = u_xlat2.z;
        txVec55 = vec3<f32>(x_3365.x, x_3365.y, x_3367);
        let x_3374 : vec3<f32> = txVec55;
        let x_3376 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_3374.xy, x_3374.z);
        u_xlat52.x = x_3376;
        let x_3379 : f32 = u_xlat9.x;
        let x_3381 : f32 = u_xlat52.x;
        let x_3383 : f32 = u_xlat73;
        u_xlat73 = ((x_3379 * x_3381) + x_3383);
        let x_3386 : vec4<f32> = u_xlat13;
        let x_3387 : vec2<f32> = vec2<f32>(x_3386.z, x_3386.w);
        let x_3389 : f32 = u_xlat2.z;
        txVec56 = vec3<f32>(x_3387.x, x_3387.y, x_3389);
        let x_3396 : vec3<f32> = txVec56;
        let x_3398 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_3396.xy, x_3396.z);
        u_xlat52.x = x_3398;
        let x_3401 : f32 = u_xlat9.y;
        let x_3403 : f32 = u_xlat52.x;
        let x_3405 : f32 = u_xlat73;
        u_xlat73 = ((x_3401 * x_3403) + x_3405);
        let x_3408 : vec2<f32> = u_xlat55;
        let x_3410 : f32 = u_xlat2.z;
        txVec57 = vec3<f32>(x_3408.x, x_3408.y, x_3410);
        let x_3417 : vec3<f32> = txVec57;
        let x_3419 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_3417.xy, x_3417.z);
        u_xlat52.x = x_3419;
        let x_3422 : f32 = u_xlat9.z;
        let x_3424 : f32 = u_xlat52.x;
        let x_3426 : f32 = u_xlat73;
        u_xlat73 = ((x_3422 * x_3424) + x_3426);
        let x_3429 : vec4<f32> = u_xlat8;
        let x_3430 : vec2<f32> = vec2<f32>(x_3429.x, x_3429.y);
        let x_3432 : f32 = u_xlat2.z;
        txVec58 = vec3<f32>(x_3430.x, x_3430.y, x_3432);
        let x_3439 : vec3<f32> = txVec58;
        let x_3441 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_3439.xy, x_3439.z);
        u_xlat8.x = x_3441;
        let x_3444 : f32 = u_xlat9.w;
        let x_3446 : f32 = u_xlat8.x;
        let x_3448 : f32 = u_xlat73;
        u_xlat0.x = ((x_3444 * x_3446) + x_3448);
      }
    }
  } else {
    let x_3453 : vec4<f32> = u_xlat2;
    let x_3454 : vec2<f32> = vec2<f32>(x_3453.x, x_3453.y);
    let x_3456 : f32 = u_xlat2.z;
    txVec59 = vec3<f32>(x_3454.x, x_3454.y, x_3456);
    let x_3463 : vec3<f32> = txVec59;
    let x_3465 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_3463.xy, x_3463.z);
    u_xlat0.x = x_3465;
  }
  let x_3468 : f32 = u_xlat0.x;
  let x_3470 : f32 = x_365.x_MainLightShadowParams.x;
  let x_3472 : f32 = u_xlat68;
  u_xlat0.x = ((x_3468 * x_3470) + x_3472);
  let x_3475 : bool = u_xlatb3;
  if (x_3475) {
    x_3476 = 1.0f;
  } else {
    let x_3481 : f32 = u_xlat0.x;
    x_3476 = x_3481;
  }
  let x_3482 : f32 = x_3476;
  u_xlat0.x = x_3482;
  let x_3484 : vec3<f32> = vs_INTERP0;
  let x_3486 : vec3<f32> = x_160.x_WorldSpaceCameraPos;
  let x_3488 : vec3<f32> = (x_3484 + -(x_3486));
  let x_3489 : vec4<f32> = u_xlat2;
  u_xlat2 = vec4<f32>(x_3488.x, x_3488.y, x_3488.z, x_3489.w);
  let x_3491 : vec4<f32> = u_xlat2;
  let x_3493 : vec4<f32> = u_xlat2;
  u_xlat2.x = dot(vec3<f32>(x_3491.x, x_3491.y, x_3491.z), vec3<f32>(x_3493.x, x_3493.y, x_3493.z));
  let x_3498 : f32 = u_xlat2.x;
  let x_3500 : f32 = x_365.x_MainLightShadowParams.z;
  let x_3503 : f32 = x_365.x_MainLightShadowParams.w;
  u_xlat2.x = ((x_3498 * x_3500) + x_3503);
  let x_3507 : f32 = u_xlat2.x;
  u_xlat2.x = clamp(x_3507, 0.0f, 1.0f);
  let x_3512 : f32 = u_xlat0.x;
  u_xlat24 = (-(x_3512) + 1.0f);
  let x_3516 : f32 = u_xlat2.x;
  let x_3517 : f32 = u_xlat24;
  let x_3520 : f32 = u_xlat0.x;
  u_xlat0.x = ((x_3516 * x_3517) + x_3520);
  let x_3529 : f32 = x_3527.x_MainLightCookieTextureFormat;
  u_xlatb2.x = !((x_3529 == -1.0f));
  let x_3533 : bool = u_xlatb2.x;
  if (x_3533) {
    let x_3536 : vec3<f32> = vs_INTERP0;
    let x_3539 : vec4<f32> = x_3527.x_MainLightWorldToLight[1i];
    let x_3541 : vec2<f32> = (vec2<f32>(x_3536.y, x_3536.y) * vec2<f32>(x_3539.x, x_3539.y));
    let x_3542 : vec4<f32> = u_xlat2;
    u_xlat2 = vec4<f32>(x_3541.x, x_3541.y, x_3542.z, x_3542.w);
    let x_3545 : vec4<f32> = x_3527.x_MainLightWorldToLight[0i];
    let x_3547 : vec3<f32> = vs_INTERP0;
    let x_3550 : vec4<f32> = u_xlat2;
    let x_3552 : vec2<f32> = ((vec2<f32>(x_3545.x, x_3545.y) * vec2<f32>(x_3547.x, x_3547.x)) + vec2<f32>(x_3550.x, x_3550.y));
    let x_3553 : vec4<f32> = u_xlat2;
    u_xlat2 = vec4<f32>(x_3552.x, x_3552.y, x_3553.z, x_3553.w);
    let x_3556 : vec4<f32> = x_3527.x_MainLightWorldToLight[2i];
    let x_3558 : vec3<f32> = vs_INTERP0;
    let x_3561 : vec4<f32> = u_xlat2;
    let x_3563 : vec2<f32> = ((vec2<f32>(x_3556.x, x_3556.y) * vec2<f32>(x_3558.z, x_3558.z)) + vec2<f32>(x_3561.x, x_3561.y));
    let x_3564 : vec4<f32> = u_xlat2;
    u_xlat2 = vec4<f32>(x_3563.x, x_3563.y, x_3564.z, x_3564.w);
    let x_3566 : vec4<f32> = u_xlat2;
    let x_3569 : vec4<f32> = x_3527.x_MainLightWorldToLight[3i];
    let x_3571 : vec2<f32> = (vec2<f32>(x_3566.x, x_3566.y) + vec2<f32>(x_3569.x, x_3569.y));
    let x_3572 : vec4<f32> = u_xlat2;
    u_xlat2 = vec4<f32>(x_3571.x, x_3571.y, x_3572.z, x_3572.w);
    let x_3574 : vec4<f32> = u_xlat2;
    let x_3577 : vec2<f32> = ((vec2<f32>(x_3574.x, x_3574.y) * vec2<f32>(0.5f, 0.5f)) + vec2<f32>(0.5f, 0.5f));
    let x_3578 : vec4<f32> = u_xlat2;
    u_xlat2 = vec4<f32>(x_3577.x, x_3577.y, x_3578.z, x_3578.w);
    let x_3585 : vec4<f32> = u_xlat2;
    let x_3588 : f32 = x_160.x_GlobalMipBias.x;
    let x_3589 : vec4<f32> = textureSampleBias(x_MainLightCookieTexture, sampler_MainLightCookieTexture, vec2<f32>(x_3585.x, x_3585.y), x_3588);
    u_xlat2 = x_3589;
    let x_3592 : f32 = x_3527.x_MainLightCookieTextureFormat;
    let x_3594 : f32 = x_3527.x_MainLightCookieTextureFormat;
    let x_3596 : f32 = x_3527.x_MainLightCookieTextureFormat;
    let x_3598 : f32 = x_3527.x_MainLightCookieTextureFormat;
    let x_3599 : vec4<f32> = vec4<f32>(x_3592, x_3594, x_3596, x_3598);
    let x_3606 : vec4<bool> = (vec4<f32>(x_3599.x, x_3599.y, x_3599.z, x_3599.w) == vec4<f32>(0.0f, 1.0f, 0.0f, 0.0f));
    u_xlatb8 = vec2<bool>(x_3606.x, x_3606.y);
    let x_3609 : bool = u_xlatb8.y;
    if (x_3609) {
      let x_3614 : f32 = u_xlat2.w;
      x_3610 = x_3614;
    } else {
      let x_3617 : f32 = u_xlat2.x;
      x_3610 = x_3617;
    }
    let x_3618 : f32 = x_3610;
    u_xlat68 = x_3618;
    let x_3620 : bool = u_xlatb8.x;
    if (x_3620) {
      let x_3624 : vec4<f32> = u_xlat2;
      x_3621 = vec3<f32>(x_3624.x, x_3624.y, x_3624.z);
    } else {
      let x_3627 : f32 = u_xlat68;
      x_3621 = vec3<f32>(x_3627, x_3627, x_3627);
    }
    let x_3629 : vec3<f32> = x_3621;
    let x_3630 : vec4<f32> = u_xlat2;
    u_xlat2 = vec4<f32>(x_3629.x, x_3629.y, x_3629.z, x_3630.w);
  } else {
    u_xlat2.x = 1.0f;
    u_xlat2.y = 1.0f;
    u_xlat2.z = 1.0f;
  }
  let x_3636 : vec4<f32> = u_xlat2;
  let x_3639 : vec4<f32> = x_160.x_MainLightColor;
  let x_3641 : vec3<f32> = (vec3<f32>(x_3636.x, x_3636.y, x_3636.z) * vec3<f32>(x_3639.x, x_3639.y, x_3639.z));
  let x_3642 : vec4<f32> = u_xlat2;
  u_xlat2 = vec4<f32>(x_3641.x, x_3641.y, x_3641.z, x_3642.w);
  let x_3644 : f32 = u_xlat50;
  let x_3646 : vec4<f32> = u_xlat2;
  let x_3648 : vec3<f32> = (vec3<f32>(x_3644, x_3644, x_3644) * vec3<f32>(x_3646.x, x_3646.y, x_3646.z));
  let x_3649 : vec4<f32> = u_xlat2;
  u_xlat2 = vec4<f32>(x_3648.x, x_3648.y, x_3648.z, x_3649.w);
  let x_3651 : vec3<f32> = u_xlat4;
  let x_3653 : vec3<f32> = u_xlat22;
  u_xlat68 = dot(-(x_3651), x_3653);
  let x_3655 : f32 = u_xlat68;
  let x_3656 : f32 = u_xlat68;
  u_xlat68 = (x_3655 + x_3656);
  let x_3658 : vec3<f32> = u_xlat22;
  let x_3659 : f32 = u_xlat68;
  let x_3663 : vec3<f32> = u_xlat4;
  let x_3665 : vec3<f32> = ((x_3658 * -(vec3<f32>(x_3659, x_3659, x_3659))) + -(x_3663));
  let x_3666 : vec4<f32> = u_xlat8;
  u_xlat8 = vec4<f32>(x_3665.x, x_3665.y, x_3665.z, x_3666.w);
  let x_3668 : vec3<f32> = u_xlat22;
  let x_3669 : vec3<f32> = u_xlat4;
  u_xlat68 = dot(x_3668, x_3669);
  let x_3671 : f32 = u_xlat68;
  u_xlat68 = clamp(x_3671, 0.0f, 1.0f);
  let x_3673 : f32 = u_xlat68;
  u_xlat68 = (-(x_3673) + 1.0f);
  let x_3676 : f32 = u_xlat68;
  let x_3677 : f32 = u_xlat68;
  u_xlat68 = (x_3676 * x_3677);
  let x_3679 : f32 = u_xlat68;
  let x_3680 : f32 = u_xlat68;
  u_xlat68 = (x_3679 * x_3680);
  let x_3682 : f32 = u_xlat69;
  u_xlat3.x = ((-(x_3682) * 0.699999988f) + 1.700000048f);
  let x_3690 : f32 = u_xlat3.x;
  let x_3691 : f32 = u_xlat69;
  u_xlat3.x = (x_3690 * x_3691);
  let x_3695 : f32 = u_xlat3.x;
  u_xlat3.x = (x_3695 * 6.0f);
  let x_3707 : vec4<f32> = u_xlat8;
  let x_3710 : f32 = u_xlat3.x;
  let x_3711 : vec4<f32> = textureSampleLevel(unity_SpecCube0, samplerunity_SpecCube0, vec3<f32>(x_3707.x, x_3707.y, x_3707.z), x_3710);
  u_xlat8 = x_3711;
  let x_3713 : f32 = u_xlat8.w;
  u_xlat3.x = (x_3713 + -1.0f);
  let x_3717 : f32 = x_95.unity_SpecCube0_HDR.w;
  let x_3719 : f32 = u_xlat3.x;
  u_xlat3.x = ((x_3717 * x_3719) + 1.0f);
  let x_3724 : f32 = u_xlat3.x;
  u_xlat3.x = max(x_3724, 0.0f);
  let x_3728 : f32 = u_xlat3.x;
  u_xlat3.x = log2(x_3728);
  let x_3732 : f32 = u_xlat3.x;
  let x_3734 : f32 = x_95.unity_SpecCube0_HDR.y;
  u_xlat3.x = (x_3732 * x_3734);
  let x_3738 : f32 = u_xlat3.x;
  u_xlat3.x = exp2(x_3738);
  let x_3742 : f32 = u_xlat3.x;
  let x_3744 : f32 = x_95.unity_SpecCube0_HDR.x;
  u_xlat3.x = (x_3742 * x_3744);
  let x_3747 : vec4<f32> = u_xlat8;
  let x_3749 : vec4<f32> = u_xlat3;
  let x_3751 : vec3<f32> = (vec3<f32>(x_3747.x, x_3747.y, x_3747.z) * vec3<f32>(x_3749.x, x_3749.x, x_3749.x));
  let x_3752 : vec4<f32> = u_xlat8;
  u_xlat8 = vec4<f32>(x_3751.x, x_3751.y, x_3751.z, x_3752.w);
  let x_3754 : f32 = u_xlat70;
  let x_3756 : f32 = u_xlat70;
  let x_3760 : vec2<f32> = ((vec2<f32>(x_3754, x_3754) * vec2<f32>(x_3756, x_3756)) + vec2<f32>(-1.0f, 1.0f));
  let x_3761 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_3760.x, x_3761.y, x_3761.z, x_3760.y);
  let x_3764 : f32 = u_xlat3.w;
  u_xlat69 = (1.0f / x_3764);
  let x_3766 : f32 = u_xlat28;
  u_xlat70 = (x_3766 + -0.039999999f);
  let x_3769 : f32 = u_xlat68;
  let x_3770 : f32 = u_xlat70;
  u_xlat68 = ((x_3769 * x_3770) + 0.039999999f);
  let x_3774 : f32 = u_xlat68;
  let x_3775 : f32 = u_xlat69;
  u_xlat68 = (x_3774 * x_3775);
  let x_3777 : f32 = u_xlat68;
  let x_3779 : vec4<f32> = u_xlat8;
  let x_3781 : vec3<f32> = (vec3<f32>(x_3777, x_3777, x_3777) * vec3<f32>(x_3779.x, x_3779.y, x_3779.z));
  let x_3782 : vec4<f32> = u_xlat8;
  u_xlat8 = vec4<f32>(x_3781.x, x_3781.y, x_3781.z, x_3782.w);
  let x_3784 : vec3<f32> = u_xlat5;
  let x_3785 : vec3<f32> = u_xlat7;
  let x_3787 : vec4<f32> = u_xlat8;
  u_xlat5 = ((x_3784 * x_3785) + vec3<f32>(x_3787.x, x_3787.y, x_3787.z));
  let x_3791 : f32 = u_xlat0.x;
  let x_3793 : f32 = x_95.unity_LightData.z;
  u_xlat0.x = (x_3791 * x_3793);
  let x_3796 : vec3<f32> = u_xlat22;
  let x_3798 : vec4<f32> = x_160.x_MainLightPosition;
  u_xlat68 = dot(x_3796, vec3<f32>(x_3798.x, x_3798.y, x_3798.z));
  let x_3801 : f32 = u_xlat68;
  u_xlat68 = clamp(x_3801, 0.0f, 1.0f);
  let x_3804 : f32 = u_xlat0.x;
  let x_3805 : f32 = u_xlat68;
  u_xlat0.x = (x_3804 * x_3805);
  let x_3808 : vec3<f32> = u_xlat0;
  let x_3810 : vec4<f32> = u_xlat2;
  let x_3812 : vec3<f32> = (vec3<f32>(x_3808.x, x_3808.x, x_3808.x) * vec3<f32>(x_3810.x, x_3810.y, x_3810.z));
  let x_3813 : vec4<f32> = u_xlat2;
  u_xlat2 = vec4<f32>(x_3812.x, x_3812.y, x_3812.z, x_3813.w);
  let x_3815 : vec3<f32> = u_xlat4;
  let x_3817 : vec4<f32> = x_160.x_MainLightPosition;
  let x_3819 : vec3<f32> = (x_3815 + vec3<f32>(x_3817.x, x_3817.y, x_3817.z));
  let x_3820 : vec4<f32> = u_xlat8;
  u_xlat8 = vec4<f32>(x_3819.x, x_3819.y, x_3819.z, x_3820.w);
  let x_3822 : vec4<f32> = u_xlat8;
  let x_3824 : vec4<f32> = u_xlat8;
  u_xlat0.x = dot(vec3<f32>(x_3822.x, x_3822.y, x_3822.z), vec3<f32>(x_3824.x, x_3824.y, x_3824.z));
  let x_3829 : f32 = u_xlat0.x;
  u_xlat0.x = max(x_3829, 1.17549435e-37f);
  let x_3833 : f32 = u_xlat0.x;
  u_xlat0.x = inverseSqrt(x_3833);
  let x_3836 : vec3<f32> = u_xlat0;
  let x_3838 : vec4<f32> = u_xlat8;
  let x_3840 : vec3<f32> = (vec3<f32>(x_3836.x, x_3836.x, x_3836.x) * vec3<f32>(x_3838.x, x_3838.y, x_3838.z));
  let x_3841 : vec4<f32> = u_xlat8;
  u_xlat8 = vec4<f32>(x_3840.x, x_3840.y, x_3840.z, x_3841.w);
  let x_3843 : vec3<f32> = u_xlat22;
  let x_3844 : vec4<f32> = u_xlat8;
  u_xlat0.x = dot(x_3843, vec3<f32>(x_3844.x, x_3844.y, x_3844.z));
  let x_3849 : f32 = u_xlat0.x;
  u_xlat0.x = clamp(x_3849, 0.0f, 1.0f);
  let x_3853 : vec4<f32> = x_160.x_MainLightPosition;
  let x_3855 : vec4<f32> = u_xlat8;
  u_xlat68 = dot(vec3<f32>(x_3853.x, x_3853.y, x_3853.z), vec3<f32>(x_3855.x, x_3855.y, x_3855.z));
  let x_3858 : f32 = u_xlat68;
  u_xlat68 = clamp(x_3858, 0.0f, 1.0f);
  let x_3861 : f32 = u_xlat0.x;
  let x_3863 : f32 = u_xlat0.x;
  u_xlat0.x = (x_3861 * x_3863);
  let x_3867 : f32 = u_xlat0.x;
  let x_3869 : f32 = u_xlat3.x;
  u_xlat0.x = ((x_3867 * x_3869) + 1.000010014f);
  let x_3874 : f32 = u_xlat68;
  let x_3875 : f32 = u_xlat68;
  u_xlat68 = (x_3874 * x_3875);
  let x_3878 : f32 = u_xlat0.x;
  let x_3880 : f32 = u_xlat0.x;
  u_xlat0.x = (x_3878 * x_3880);
  let x_3883 : f32 = u_xlat68;
  u_xlat68 = max(x_3883, 0.100000001f);
  let x_3887 : f32 = u_xlat0.x;
  let x_3888 : f32 = u_xlat68;
  u_xlat0.x = (x_3887 * x_3888);
  let x_3891 : f32 = u_xlat72;
  let x_3893 : f32 = u_xlat0.x;
  u_xlat0.x = (x_3891 * x_3893);
  let x_3896 : f32 = u_xlat71;
  let x_3898 : f32 = u_xlat0.x;
  u_xlat0.x = (x_3896 / x_3898);
  let x_3901 : vec3<f32> = u_xlat0;
  let x_3905 : vec3<f32> = u_xlat7;
  let x_3906 : vec3<f32> = ((vec3<f32>(x_3901.x, x_3901.x, x_3901.x) * vec3<f32>(0.039999999f, 0.039999999f, 0.039999999f)) + x_3905);
  let x_3907 : vec4<f32> = u_xlat8;
  u_xlat8 = vec4<f32>(x_3906.x, x_3906.y, x_3906.z, x_3907.w);
  let x_3909 : vec4<f32> = u_xlat2;
  let x_3911 : vec4<f32> = u_xlat8;
  let x_3913 : vec3<f32> = (vec3<f32>(x_3909.x, x_3909.y, x_3909.z) * vec3<f32>(x_3911.x, x_3911.y, x_3911.z));
  let x_3914 : vec4<f32> = u_xlat2;
  u_xlat2 = vec4<f32>(x_3913.x, x_3913.y, x_3913.z, x_3914.w);
  let x_3917 : f32 = x_160.x_AdditionalLightsCount.x;
  let x_3919 : f32 = x_95.unity_LightData.y;
  u_xlat0.x = min(x_3917, x_3919);
  let x_3923 : f32 = u_xlat0.x;
  u_xlatu0 = bitcast<u32>(i32(x_3923));
  let x_3927 : f32 = x_3527.x_AdditionalLightsCookieAtlasTextureFormat;
  let x_3929 : f32 = x_3527.x_AdditionalLightsCookieAtlasTextureFormat;
  let x_3931 : f32 = x_3527.x_AdditionalLightsCookieAtlasTextureFormat;
  let x_3933 : f32 = x_3527.x_AdditionalLightsCookieAtlasTextureFormat;
  let x_3934 : vec4<f32> = vec4<f32>(x_3927, x_3929, x_3931, x_3933);
  let x_3940 : vec4<bool> = (vec4<f32>(x_3934.x, x_3934.y, x_3934.z, x_3934.w) == vec4<f32>(0.0f, 1.0f, 0.0f, 0.0f));
  u_xlatb8 = vec2<bool>(x_3940.x, x_3940.y);
  u_xlat9.x = 0.0f;
  u_xlat9.y = 0.0f;
  u_xlat9.z = 0.0f;
  u_xlatu_loop_1 = 0u;
  loop {
    let x_3951 : u32 = u_xlatu_loop_1;
    let x_3952 : u32 = u_xlatu0;
    if ((x_3951 < x_3952)) {
    } else {
      break;
    }
    let x_3954 : u32 = u_xlatu_loop_1;
    u_xlatu69 = (x_3954 >> 2u);
    let x_3957 : u32 = u_xlatu_loop_1;
    u_xlati70 = bitcast<i32>((x_3957 & 3u));
    let x_3960 : u32 = u_xlatu69;
    let x_3963 : vec4<f32> = x_95.unity_LightIndices[bitcast<i32>(x_3960)];
    let x_3973 : i32 = u_xlati70;
    indexable = array<vec4<u32>, 4u>(vec4<u32>(1065353216u, 0u, 0u, 0u), vec4<u32>(0u, 1065353216u, 0u, 0u), vec4<u32>(0u, 0u, 1065353216u, 0u), vec4<u32>(0u, 0u, 0u, 1065353216u));
    let x_3978 : vec4<u32> = indexable[x_3973];
    u_xlat69 = dot(x_3963, bitcast<vec4<f32>>(x_3978));
    let x_3981 : f32 = u_xlat69;
    u_xlatu69 = bitcast<u32>(i32(x_3981));
    let x_3984 : vec3<f32> = vs_INTERP0;
    let x_3996 : u32 = u_xlatu69;
    let x_3999 : vec4<f32> = x_3995.x_AdditionalLightsPosition[bitcast<i32>(x_3996)];
    let x_4002 : u32 = u_xlatu69;
    let x_4005 : vec4<f32> = x_3995.x_AdditionalLightsPosition[bitcast<i32>(x_4002)];
    let x_4007 : vec3<f32> = ((-(x_3984) * vec3<f32>(x_3999.w, x_3999.w, x_3999.w)) + vec3<f32>(x_4005.x, x_4005.y, x_4005.z));
    let x_4008 : vec4<f32> = u_xlat10;
    u_xlat10 = vec4<f32>(x_4007.x, x_4007.y, x_4007.z, x_4008.w);
    let x_4010 : vec4<f32> = u_xlat10;
    let x_4012 : vec4<f32> = u_xlat10;
    u_xlat70 = dot(vec3<f32>(x_4010.x, x_4010.y, x_4010.z), vec3<f32>(x_4012.x, x_4012.y, x_4012.z));
    let x_4015 : f32 = u_xlat70;
    u_xlat70 = max(x_4015, 6.10351562e-05f);
    let x_4018 : f32 = u_xlat70;
    u_xlat28 = inverseSqrt(x_4018);
    let x_4020 : f32 = u_xlat28;
    let x_4022 : vec4<f32> = u_xlat10;
    let x_4024 : vec3<f32> = (vec3<f32>(x_4020, x_4020, x_4020) * vec3<f32>(x_4022.x, x_4022.y, x_4022.z));
    let x_4025 : vec4<f32> = u_xlat11;
    u_xlat11 = vec4<f32>(x_4024.x, x_4024.y, x_4024.z, x_4025.w);
    let x_4027 : f32 = u_xlat70;
    u_xlat73 = (1.0f / x_4027);
    let x_4029 : f32 = u_xlat70;
    let x_4030 : u32 = u_xlatu69;
    let x_4033 : f32 = x_3995.x_AdditionalLightsAttenuation[bitcast<i32>(x_4030)].x;
    u_xlat70 = (x_4029 * x_4033);
    let x_4035 : f32 = u_xlat70;
    let x_4037 : f32 = u_xlat70;
    u_xlat70 = ((-(x_4035) * x_4037) + 1.0f);
    let x_4040 : f32 = u_xlat70;
    u_xlat70 = max(x_4040, 0.0f);
    let x_4042 : f32 = u_xlat70;
    let x_4043 : f32 = u_xlat70;
    u_xlat70 = (x_4042 * x_4043);
    let x_4045 : f32 = u_xlat70;
    let x_4046 : f32 = u_xlat73;
    u_xlat70 = (x_4045 * x_4046);
    let x_4048 : u32 = u_xlatu69;
    let x_4051 : vec4<f32> = x_3995.x_AdditionalLightsSpotDir[bitcast<i32>(x_4048)];
    let x_4053 : vec4<f32> = u_xlat11;
    u_xlat73 = dot(vec3<f32>(x_4051.x, x_4051.y, x_4051.z), vec3<f32>(x_4053.x, x_4053.y, x_4053.z));
    let x_4056 : f32 = u_xlat73;
    let x_4057 : u32 = u_xlatu69;
    let x_4060 : f32 = x_3995.x_AdditionalLightsAttenuation[bitcast<i32>(x_4057)].z;
    let x_4062 : u32 = u_xlatu69;
    let x_4065 : f32 = x_3995.x_AdditionalLightsAttenuation[bitcast<i32>(x_4062)].w;
    u_xlat73 = ((x_4056 * x_4060) + x_4065);
    let x_4067 : f32 = u_xlat73;
    u_xlat73 = clamp(x_4067, 0.0f, 1.0f);
    let x_4069 : f32 = u_xlat73;
    let x_4070 : f32 = u_xlat73;
    u_xlat73 = (x_4069 * x_4070);
    let x_4072 : f32 = u_xlat70;
    let x_4073 : f32 = u_xlat73;
    u_xlat70 = (x_4072 * x_4073);
    let x_4076 : u32 = u_xlatu69;
    u_xlatu73 = (x_4076 >> 5u);
    let x_4079 : u32 = u_xlatu69;
    u_xlati52 = (1i << bitcast<u32>((bitcast<i32>(x_4079) & 31i)));
    let x_4085 : i32 = u_xlati52;
    let x_4087 : u32 = u_xlatu73;
    let x_4090 : f32 = x_3527.x_AdditionalLightsCookieEnableBits[bitcast<i32>(x_4087)].el;
    u_xlati73 = bitcast<i32>((bitcast<u32>(x_4085) & bitcast<u32>(x_4090)));
    let x_4094 : i32 = u_xlati73;
    if ((x_4094 != 0i)) {
      let x_4104 : u32 = u_xlatu69;
      let x_4107 : f32 = x_4103.x_AdditionalLightsLightTypes[bitcast<i32>(x_4104)].el;
      u_xlati73 = i32(x_4107);
      let x_4109 : i32 = u_xlati73;
      u_xlati52 = select(1i, 0i, (x_4109 != 0i));
      let x_4113 : u32 = u_xlatu69;
      u_xlati74 = (bitcast<i32>(x_4113) << bitcast<u32>(2i));
      let x_4116 : i32 = u_xlati52;
      if ((x_4116 != 0i)) {
        let x_4120 : vec3<f32> = vs_INTERP0;
        let x_4122 : i32 = u_xlati74;
        let x_4125 : i32 = u_xlati74;
        let x_4129 : vec4<f32> = x_4103.x_AdditionalLightsWorldToLights[((x_4122 + 1i) / 4i)][((x_4125 + 1i) % 4i)];
        let x_4131 : vec3<f32> = (vec3<f32>(x_4120.y, x_4120.y, x_4120.y) * vec3<f32>(x_4129.x, x_4129.y, x_4129.w));
        let x_4132 : vec4<f32> = u_xlat12;
        u_xlat12 = vec4<f32>(x_4131.x, x_4131.y, x_4131.z, x_4132.w);
        let x_4134 : i32 = u_xlati74;
        let x_4136 : i32 = u_xlati74;
        let x_4139 : vec4<f32> = x_4103.x_AdditionalLightsWorldToLights[(x_4134 / 4i)][(x_4136 % 4i)];
        let x_4141 : vec3<f32> = vs_INTERP0;
        let x_4144 : vec4<f32> = u_xlat12;
        let x_4146 : vec3<f32> = ((vec3<f32>(x_4139.x, x_4139.y, x_4139.w) * vec3<f32>(x_4141.x, x_4141.x, x_4141.x)) + vec3<f32>(x_4144.x, x_4144.y, x_4144.z));
        let x_4147 : vec4<f32> = u_xlat12;
        u_xlat12 = vec4<f32>(x_4146.x, x_4146.y, x_4146.z, x_4147.w);
        let x_4149 : i32 = u_xlati74;
        let x_4152 : i32 = u_xlati74;
        let x_4156 : vec4<f32> = x_4103.x_AdditionalLightsWorldToLights[((x_4149 + 2i) / 4i)][((x_4152 + 2i) % 4i)];
        let x_4158 : vec3<f32> = vs_INTERP0;
        let x_4161 : vec4<f32> = u_xlat12;
        let x_4163 : vec3<f32> = ((vec3<f32>(x_4156.x, x_4156.y, x_4156.w) * vec3<f32>(x_4158.z, x_4158.z, x_4158.z)) + vec3<f32>(x_4161.x, x_4161.y, x_4161.z));
        let x_4164 : vec4<f32> = u_xlat12;
        u_xlat12 = vec4<f32>(x_4163.x, x_4163.y, x_4163.z, x_4164.w);
        let x_4166 : vec4<f32> = u_xlat12;
        let x_4168 : i32 = u_xlati74;
        let x_4171 : i32 = u_xlati74;
        let x_4175 : vec4<f32> = x_4103.x_AdditionalLightsWorldToLights[((x_4168 + 3i) / 4i)][((x_4171 + 3i) % 4i)];
        let x_4177 : vec3<f32> = (vec3<f32>(x_4166.x, x_4166.y, x_4166.z) + vec3<f32>(x_4175.x, x_4175.y, x_4175.w));
        let x_4178 : vec4<f32> = u_xlat12;
        u_xlat12 = vec4<f32>(x_4177.x, x_4177.y, x_4177.z, x_4178.w);
        let x_4180 : vec4<f32> = u_xlat12;
        let x_4182 : vec4<f32> = u_xlat12;
        let x_4184 : vec2<f32> = (vec2<f32>(x_4180.x, x_4180.y) / vec2<f32>(x_4182.z, x_4182.z));
        let x_4185 : vec4<f32> = u_xlat12;
        u_xlat12 = vec4<f32>(x_4184.x, x_4184.y, x_4185.z, x_4185.w);
        let x_4187 : vec4<f32> = u_xlat12;
        let x_4190 : vec2<f32> = ((vec2<f32>(x_4187.x, x_4187.y) * vec2<f32>(0.5f, 0.5f)) + vec2<f32>(0.5f, 0.5f));
        let x_4191 : vec4<f32> = u_xlat12;
        u_xlat12 = vec4<f32>(x_4190.x, x_4190.y, x_4191.z, x_4191.w);
        let x_4193 : vec4<f32> = u_xlat12;
        let x_4197 : vec2<f32> = clamp(vec2<f32>(x_4193.x, x_4193.y), vec2<f32>(0.0f, 0.0f), vec2<f32>(1.0f, 1.0f));
        let x_4198 : vec4<f32> = u_xlat12;
        u_xlat12 = vec4<f32>(x_4197.x, x_4197.y, x_4198.z, x_4198.w);
        let x_4200 : u32 = u_xlatu69;
        let x_4203 : vec4<f32> = x_4103.x_AdditionalLightsCookieAtlasUVRects[bitcast<i32>(x_4200)];
        let x_4205 : vec4<f32> = u_xlat12;
        let x_4208 : u32 = u_xlatu69;
        let x_4211 : vec4<f32> = x_4103.x_AdditionalLightsCookieAtlasUVRects[bitcast<i32>(x_4208)];
        let x_4213 : vec2<f32> = ((vec2<f32>(x_4203.x, x_4203.y) * vec2<f32>(x_4205.x, x_4205.y)) + vec2<f32>(x_4211.z, x_4211.w));
        let x_4214 : vec4<f32> = u_xlat12;
        u_xlat12 = vec4<f32>(x_4213.x, x_4213.y, x_4214.z, x_4214.w);
      } else {
        let x_4217 : i32 = u_xlati73;
        u_xlatb73 = (x_4217 == 1i);
        let x_4219 : bool = u_xlatb73;
        u_xlati73 = select(0i, 1i, x_4219);
        let x_4221 : i32 = u_xlati73;
        if ((x_4221 != 0i)) {
          let x_4226 : vec3<f32> = vs_INTERP0;
          let x_4228 : i32 = u_xlati74;
          let x_4231 : i32 = u_xlati74;
          let x_4235 : vec4<f32> = x_4103.x_AdditionalLightsWorldToLights[((x_4228 + 1i) / 4i)][((x_4231 + 1i) % 4i)];
          u_xlat56 = (vec2<f32>(x_4226.y, x_4226.y) * vec2<f32>(x_4235.x, x_4235.y));
          let x_4238 : i32 = u_xlati74;
          let x_4240 : i32 = u_xlati74;
          let x_4243 : vec4<f32> = x_4103.x_AdditionalLightsWorldToLights[(x_4238 / 4i)][(x_4240 % 4i)];
          let x_4245 : vec3<f32> = vs_INTERP0;
          let x_4248 : vec2<f32> = u_xlat56;
          u_xlat56 = ((vec2<f32>(x_4243.x, x_4243.y) * vec2<f32>(x_4245.x, x_4245.x)) + x_4248);
          let x_4250 : i32 = u_xlati74;
          let x_4253 : i32 = u_xlati74;
          let x_4257 : vec4<f32> = x_4103.x_AdditionalLightsWorldToLights[((x_4250 + 2i) / 4i)][((x_4253 + 2i) % 4i)];
          let x_4259 : vec3<f32> = vs_INTERP0;
          let x_4262 : vec2<f32> = u_xlat56;
          u_xlat56 = ((vec2<f32>(x_4257.x, x_4257.y) * vec2<f32>(x_4259.z, x_4259.z)) + x_4262);
          let x_4264 : vec2<f32> = u_xlat56;
          let x_4265 : i32 = u_xlati74;
          let x_4268 : i32 = u_xlati74;
          let x_4272 : vec4<f32> = x_4103.x_AdditionalLightsWorldToLights[((x_4265 + 3i) / 4i)][((x_4268 + 3i) % 4i)];
          u_xlat56 = (x_4264 + vec2<f32>(x_4272.x, x_4272.y));
          let x_4275 : vec2<f32> = u_xlat56;
          u_xlat56 = ((x_4275 * vec2<f32>(0.5f, 0.5f)) + vec2<f32>(0.5f, 0.5f));
          let x_4278 : vec2<f32> = u_xlat56;
          u_xlat56 = fract(x_4278);
          let x_4280 : u32 = u_xlatu69;
          let x_4283 : vec4<f32> = x_4103.x_AdditionalLightsCookieAtlasUVRects[bitcast<i32>(x_4280)];
          let x_4285 : vec2<f32> = u_xlat56;
          let x_4287 : u32 = u_xlatu69;
          let x_4290 : vec4<f32> = x_4103.x_AdditionalLightsCookieAtlasUVRects[bitcast<i32>(x_4287)];
          let x_4292 : vec2<f32> = ((vec2<f32>(x_4283.x, x_4283.y) * x_4285) + vec2<f32>(x_4290.z, x_4290.w));
          let x_4293 : vec4<f32> = u_xlat12;
          u_xlat12 = vec4<f32>(x_4292.x, x_4292.y, x_4293.z, x_4293.w);
        } else {
          let x_4296 : vec3<f32> = vs_INTERP0;
          let x_4298 : i32 = u_xlati74;
          let x_4301 : i32 = u_xlati74;
          let x_4305 : vec4<f32> = x_4103.x_AdditionalLightsWorldToLights[((x_4298 + 1i) / 4i)][((x_4301 + 1i) % 4i)];
          u_xlat13 = (vec4<f32>(x_4296.y, x_4296.y, x_4296.y, x_4296.y) * x_4305);
          let x_4307 : i32 = u_xlati74;
          let x_4309 : i32 = u_xlati74;
          let x_4312 : vec4<f32> = x_4103.x_AdditionalLightsWorldToLights[(x_4307 / 4i)][(x_4309 % 4i)];
          let x_4313 : vec3<f32> = vs_INTERP0;
          let x_4316 : vec4<f32> = u_xlat13;
          u_xlat13 = ((x_4312 * vec4<f32>(x_4313.x, x_4313.x, x_4313.x, x_4313.x)) + x_4316);
          let x_4318 : i32 = u_xlati74;
          let x_4321 : i32 = u_xlati74;
          let x_4325 : vec4<f32> = x_4103.x_AdditionalLightsWorldToLights[((x_4318 + 2i) / 4i)][((x_4321 + 2i) % 4i)];
          let x_4326 : vec3<f32> = vs_INTERP0;
          let x_4329 : vec4<f32> = u_xlat13;
          u_xlat13 = ((x_4325 * vec4<f32>(x_4326.z, x_4326.z, x_4326.z, x_4326.z)) + x_4329);
          let x_4331 : vec4<f32> = u_xlat13;
          let x_4332 : i32 = u_xlati74;
          let x_4335 : i32 = u_xlati74;
          let x_4339 : vec4<f32> = x_4103.x_AdditionalLightsWorldToLights[((x_4332 + 3i) / 4i)][((x_4335 + 3i) % 4i)];
          u_xlat13 = (x_4331 + x_4339);
          let x_4341 : vec4<f32> = u_xlat13;
          let x_4343 : vec4<f32> = u_xlat13;
          let x_4345 : vec3<f32> = (vec3<f32>(x_4341.x, x_4341.y, x_4341.z) / vec3<f32>(x_4343.w, x_4343.w, x_4343.w));
          let x_4346 : vec4<f32> = u_xlat13;
          u_xlat13 = vec4<f32>(x_4345.x, x_4345.y, x_4345.z, x_4346.w);
          let x_4348 : vec4<f32> = u_xlat13;
          let x_4350 : vec4<f32> = u_xlat13;
          u_xlat73 = dot(vec3<f32>(x_4348.x, x_4348.y, x_4348.z), vec3<f32>(x_4350.x, x_4350.y, x_4350.z));
          let x_4353 : f32 = u_xlat73;
          u_xlat73 = inverseSqrt(x_4353);
          let x_4355 : f32 = u_xlat73;
          let x_4357 : vec4<f32> = u_xlat13;
          let x_4359 : vec3<f32> = (vec3<f32>(x_4355, x_4355, x_4355) * vec3<f32>(x_4357.x, x_4357.y, x_4357.z));
          let x_4360 : vec4<f32> = u_xlat13;
          u_xlat13 = vec4<f32>(x_4359.x, x_4359.y, x_4359.z, x_4360.w);
          let x_4362 : vec4<f32> = u_xlat13;
          u_xlat73 = dot(abs(vec3<f32>(x_4362.x, x_4362.y, x_4362.z)), vec3<f32>(1.0f, 1.0f, 1.0f));
          let x_4367 : f32 = u_xlat73;
          u_xlat73 = max(x_4367, 0.000001f);
          let x_4370 : f32 = u_xlat73;
          u_xlat73 = (1.0f / x_4370);
          let x_4372 : f32 = u_xlat73;
          let x_4374 : vec4<f32> = u_xlat13;
          let x_4376 : vec3<f32> = (vec3<f32>(x_4372, x_4372, x_4372) * vec3<f32>(x_4374.z, x_4374.x, x_4374.y));
          let x_4377 : vec4<f32> = u_xlat14;
          u_xlat14 = vec4<f32>(x_4376.x, x_4376.y, x_4376.z, x_4377.w);
          let x_4380 : f32 = u_xlat14.x;
          u_xlat14.x = -(x_4380);
          let x_4384 : f32 = u_xlat14.x;
          u_xlat14.x = clamp(x_4384, 0.0f, 1.0f);
          let x_4388 : vec4<f32> = u_xlat14;
          let x_4391 : vec4<bool> = (vec4<f32>(x_4388.y, x_4388.z, x_4388.y, x_4388.z) >= vec4<f32>(0.0f, 0.0f, 0.0f, 0.0f));
          u_xlatb52 = vec2<bool>(x_4391.x, x_4391.y);
          let x_4394 : bool = u_xlatb52.x;
          if (x_4394) {
            let x_4399 : f32 = u_xlat14.x;
            x_4395 = x_4399;
          } else {
            let x_4402 : f32 = u_xlat14.x;
            x_4395 = -(x_4402);
          }
          let x_4404 : f32 = x_4395;
          u_xlat52.x = x_4404;
          let x_4407 : bool = u_xlatb52.y;
          if (x_4407) {
            let x_4412 : f32 = u_xlat14.x;
            x_4408 = x_4412;
          } else {
            let x_4415 : f32 = u_xlat14.x;
            x_4408 = -(x_4415);
          }
          let x_4417 : f32 = x_4408;
          u_xlat52.y = x_4417;
          let x_4419 : vec4<f32> = u_xlat13;
          let x_4421 : f32 = u_xlat73;
          let x_4424 : vec2<f32> = u_xlat52;
          u_xlat52 = ((vec2<f32>(x_4419.x, x_4419.y) * vec2<f32>(x_4421, x_4421)) + x_4424);
          let x_4426 : vec2<f32> = u_xlat52;
          u_xlat52 = ((x_4426 * vec2<f32>(0.5f, 0.5f)) + vec2<f32>(0.5f, 0.5f));
          let x_4429 : vec2<f32> = u_xlat52;
          u_xlat52 = clamp(x_4429, vec2<f32>(0.0f, 0.0f), vec2<f32>(1.0f, 1.0f));
          let x_4433 : u32 = u_xlatu69;
          let x_4436 : vec4<f32> = x_4103.x_AdditionalLightsCookieAtlasUVRects[bitcast<i32>(x_4433)];
          let x_4438 : vec2<f32> = u_xlat52;
          let x_4440 : u32 = u_xlatu69;
          let x_4443 : vec4<f32> = x_4103.x_AdditionalLightsCookieAtlasUVRects[bitcast<i32>(x_4440)];
          let x_4445 : vec2<f32> = ((vec2<f32>(x_4436.x, x_4436.y) * x_4438) + vec2<f32>(x_4443.z, x_4443.w));
          let x_4446 : vec4<f32> = u_xlat12;
          u_xlat12 = vec4<f32>(x_4445.x, x_4445.y, x_4446.z, x_4446.w);
        }
      }
      let x_4453 : vec4<f32> = u_xlat12;
      let x_4456 : f32 = x_160.x_GlobalMipBias.x;
      let x_4457 : vec4<f32> = textureSampleBias(x_AdditionalLightsCookieAtlasTexture, sampler_AdditionalLightsCookieAtlasTexture, vec2<f32>(x_4453.x, x_4453.y), x_4456);
      u_xlat12 = x_4457;
      let x_4459 : bool = u_xlatb8.y;
      if (x_4459) {
        let x_4464 : f32 = u_xlat12.w;
        x_4460 = x_4464;
      } else {
        let x_4467 : f32 = u_xlat12.x;
        x_4460 = x_4467;
      }
      let x_4468 : f32 = x_4460;
      u_xlat73 = x_4468;
      let x_4470 : bool = u_xlatb8.x;
      if (x_4470) {
        let x_4474 : vec4<f32> = u_xlat12;
        x_4471 = vec3<f32>(x_4474.x, x_4474.y, x_4474.z);
      } else {
        let x_4477 : f32 = u_xlat73;
        x_4471 = vec3<f32>(x_4477, x_4477, x_4477);
      }
      let x_4479 : vec3<f32> = x_4471;
      let x_4480 : vec4<f32> = u_xlat12;
      u_xlat12 = vec4<f32>(x_4479.x, x_4479.y, x_4479.z, x_4480.w);
    } else {
      u_xlat12.x = 1.0f;
      u_xlat12.y = 1.0f;
      u_xlat12.z = 1.0f;
    }
    let x_4486 : vec4<f32> = u_xlat12;
    let x_4488 : u32 = u_xlatu69;
    let x_4491 : vec4<f32> = x_3995.x_AdditionalLightsColor[bitcast<i32>(x_4488)];
    let x_4493 : vec3<f32> = (vec3<f32>(x_4486.x, x_4486.y, x_4486.z) * vec3<f32>(x_4491.x, x_4491.y, x_4491.z));
    let x_4494 : vec4<f32> = u_xlat12;
    u_xlat12 = vec4<f32>(x_4493.x, x_4493.y, x_4493.z, x_4494.w);
    let x_4496 : f32 = u_xlat50;
    let x_4498 : vec4<f32> = u_xlat12;
    let x_4500 : vec3<f32> = (vec3<f32>(x_4496, x_4496, x_4496) * vec3<f32>(x_4498.x, x_4498.y, x_4498.z));
    let x_4501 : vec4<f32> = u_xlat12;
    u_xlat12 = vec4<f32>(x_4500.x, x_4500.y, x_4500.z, x_4501.w);
    let x_4503 : vec3<f32> = u_xlat22;
    let x_4504 : vec4<f32> = u_xlat11;
    u_xlat69 = dot(x_4503, vec3<f32>(x_4504.x, x_4504.y, x_4504.z));
    let x_4507 : f32 = u_xlat69;
    u_xlat69 = clamp(x_4507, 0.0f, 1.0f);
    let x_4509 : f32 = u_xlat69;
    let x_4510 : f32 = u_xlat70;
    u_xlat69 = (x_4509 * x_4510);
    let x_4512 : f32 = u_xlat69;
    let x_4514 : vec4<f32> = u_xlat12;
    let x_4516 : vec3<f32> = (vec3<f32>(x_4512, x_4512, x_4512) * vec3<f32>(x_4514.x, x_4514.y, x_4514.z));
    let x_4517 : vec4<f32> = u_xlat12;
    u_xlat12 = vec4<f32>(x_4516.x, x_4516.y, x_4516.z, x_4517.w);
    let x_4519 : vec4<f32> = u_xlat10;
    let x_4521 : f32 = u_xlat28;
    let x_4524 : vec3<f32> = u_xlat4;
    let x_4525 : vec3<f32> = ((vec3<f32>(x_4519.x, x_4519.y, x_4519.z) * vec3<f32>(x_4521, x_4521, x_4521)) + x_4524);
    let x_4526 : vec4<f32> = u_xlat10;
    u_xlat10 = vec4<f32>(x_4525.x, x_4525.y, x_4525.z, x_4526.w);
    let x_4528 : vec4<f32> = u_xlat10;
    let x_4530 : vec4<f32> = u_xlat10;
    u_xlat69 = dot(vec3<f32>(x_4528.x, x_4528.y, x_4528.z), vec3<f32>(x_4530.x, x_4530.y, x_4530.z));
    let x_4533 : f32 = u_xlat69;
    u_xlat69 = max(x_4533, 1.17549435e-37f);
    let x_4535 : f32 = u_xlat69;
    u_xlat69 = inverseSqrt(x_4535);
    let x_4537 : f32 = u_xlat69;
    let x_4539 : vec4<f32> = u_xlat10;
    let x_4541 : vec3<f32> = (vec3<f32>(x_4537, x_4537, x_4537) * vec3<f32>(x_4539.x, x_4539.y, x_4539.z));
    let x_4542 : vec4<f32> = u_xlat10;
    u_xlat10 = vec4<f32>(x_4541.x, x_4541.y, x_4541.z, x_4542.w);
    let x_4544 : vec3<f32> = u_xlat22;
    let x_4545 : vec4<f32> = u_xlat10;
    u_xlat69 = dot(x_4544, vec3<f32>(x_4545.x, x_4545.y, x_4545.z));
    let x_4548 : f32 = u_xlat69;
    u_xlat69 = clamp(x_4548, 0.0f, 1.0f);
    let x_4550 : vec4<f32> = u_xlat11;
    let x_4552 : vec4<f32> = u_xlat10;
    u_xlat70 = dot(vec3<f32>(x_4550.x, x_4550.y, x_4550.z), vec3<f32>(x_4552.x, x_4552.y, x_4552.z));
    let x_4555 : f32 = u_xlat70;
    u_xlat70 = clamp(x_4555, 0.0f, 1.0f);
    let x_4557 : f32 = u_xlat69;
    let x_4558 : f32 = u_xlat69;
    u_xlat69 = (x_4557 * x_4558);
    let x_4560 : f32 = u_xlat69;
    let x_4562 : f32 = u_xlat3.x;
    u_xlat69 = ((x_4560 * x_4562) + 1.000010014f);
    let x_4565 : f32 = u_xlat70;
    let x_4566 : f32 = u_xlat70;
    u_xlat70 = (x_4565 * x_4566);
    let x_4568 : f32 = u_xlat69;
    let x_4569 : f32 = u_xlat69;
    u_xlat69 = (x_4568 * x_4569);
    let x_4571 : f32 = u_xlat70;
    u_xlat70 = max(x_4571, 0.100000001f);
    let x_4573 : f32 = u_xlat69;
    let x_4574 : f32 = u_xlat70;
    u_xlat69 = (x_4573 * x_4574);
    let x_4576 : f32 = u_xlat72;
    let x_4577 : f32 = u_xlat69;
    u_xlat69 = (x_4576 * x_4577);
    let x_4579 : f32 = u_xlat71;
    let x_4580 : f32 = u_xlat69;
    u_xlat69 = (x_4579 / x_4580);
    let x_4582 : f32 = u_xlat69;
    let x_4585 : vec3<f32> = u_xlat7;
    let x_4586 : vec3<f32> = ((vec3<f32>(x_4582, x_4582, x_4582) * vec3<f32>(0.039999999f, 0.039999999f, 0.039999999f)) + x_4585);
    let x_4587 : vec4<f32> = u_xlat10;
    u_xlat10 = vec4<f32>(x_4586.x, x_4586.y, x_4586.z, x_4587.w);
    let x_4589 : vec4<f32> = u_xlat10;
    let x_4591 : vec4<f32> = u_xlat12;
    let x_4594 : vec4<f32> = u_xlat9;
    let x_4596 : vec3<f32> = ((vec3<f32>(x_4589.x, x_4589.y, x_4589.z) * vec3<f32>(x_4591.x, x_4591.y, x_4591.z)) + vec3<f32>(x_4594.x, x_4594.y, x_4594.z));
    let x_4597 : vec4<f32> = u_xlat9;
    u_xlat9 = vec4<f32>(x_4596.x, x_4596.y, x_4596.z, x_4597.w);

    continuing {
      let x_4599 : u32 = u_xlatu_loop_1;
      u_xlatu_loop_1 = (x_4599 + bitcast<u32>(1i));
    }
  }
  let x_4601 : vec3<f32> = u_xlat5;
  let x_4602 : vec4<f32> = u_xlat6;
  let x_4605 : vec4<f32> = u_xlat2;
  u_xlat0 = ((x_4601 * vec3<f32>(x_4602.x, x_4602.x, x_4602.x)) + vec3<f32>(x_4605.x, x_4605.y, x_4605.z));
  let x_4608 : vec4<f32> = u_xlat9;
  let x_4610 : vec3<f32> = u_xlat0;
  u_xlat0 = (vec3<f32>(x_4608.x, x_4608.y, x_4608.z) + x_4610);
  let x_4612 : vec4<f32> = vs_INTERP4;
  let x_4614 : vec3<f32> = u_xlat1;
  let x_4616 : vec3<f32> = u_xlat0;
  u_xlat0 = ((vec3<f32>(x_4612.w, x_4612.w, x_4612.w) * x_4614) + x_4616);
  let x_4620 : f32 = u_xlat47.x;
  let x_4622 : f32 = u_xlat47.x;
  u_xlat66 = (x_4620 * -(x_4622));
  let x_4625 : f32 = u_xlat66;
  u_xlat66 = exp2(x_4625);
  let x_4627 : vec3<f32> = u_xlat0;
  let x_4630 : vec4<f32> = x_160.unity_FogColor;
  u_xlat0 = (x_4627 + -(vec3<f32>(x_4630.x, x_4630.y, x_4630.z)));
  let x_4636 : f32 = u_xlat66;
  let x_4638 : vec3<f32> = u_xlat0;
  let x_4641 : vec4<f32> = x_160.unity_FogColor;
  let x_4643 : vec3<f32> = ((vec3<f32>(x_4636, x_4636, x_4636) * x_4638) + vec3<f32>(x_4641.x, x_4641.y, x_4641.z));
  let x_4644 : vec4<f32> = SV_Target0;
  SV_Target0 = vec4<f32>(x_4643.x, x_4643.y, x_4643.z, x_4644.w);
  let x_4646 : bool = u_xlatb25;
  let x_4647 : f32 = u_xlat67;
  SV_Target0.w = select(1.0f, x_4647, x_4646);
  let x_4653 : u32 = x_160.x_RenderingLayerMaxInt;
  let x_4655 : f32 = x_95.unity_RenderingLayer.x;
  u_xlatu0 = (x_4653 & bitcast<u32>(x_4655));
  let x_4658 : u32 = u_xlatu0;
  u_xlat0.x = f32(x_4658);
  let x_4663 : f32 = u_xlat0.x;
  let x_4665 : f32 = x_160.x_RenderingLayerRcpMaxInt;
  SV_Target1.x = (x_4663 * x_4665);
  let x_4669 : f32 = SV_Target1.x;
  SV_Target1.x = clamp(x_4669, 0.0f, 1.0f);
  let x_4672 : vec4<f32> = SV_Target1;
  SV_Target1 = vec4<f32>(x_4672.x, vec3<f32>(0.0f, 0.0f, 0.0f).x, vec3<f32>(0.0f, 0.0f, 0.0f).y, vec3<f32>(0.0f, 0.0f, 0.0f).z);
  return;
}

struct main_out {
  @location(0)
  SV_Target0_1 : vec4<f32>,
  @location(1)
  SV_Target1_1 : vec4<f32>,
}

@fragment
fn main(@builtin(position) gl_FragCoord_param : vec4<f32>, @location(1) vs_INTERP1_param : vec3<f32>, @location(2) vs_INTERP2_param : vec4<f32>, @location(0) vs_INTERP0_param : vec3<f32>, @location(3) vs_INTERP3_param : vec4<f32>, @location(4) vs_INTERP4_param : vec4<f32>, @location(5) vs_INTERP5_param : vec2<f32>) -> main_out {
  gl_FragCoord = gl_FragCoord_param;
  vs_INTERP1 = vs_INTERP1_param;
  vs_INTERP2 = vs_INTERP2_param;
  vs_INTERP0 = vs_INTERP0_param;
  vs_INTERP3 = vs_INTERP3_param;
  vs_INTERP4 = vs_INTERP4_param;
  vs_INTERP5 = vs_INTERP5_param;
  main_1();
  return main_out(SV_Target0, SV_Target1);
}

