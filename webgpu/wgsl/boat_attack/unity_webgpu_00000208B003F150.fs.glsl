#version 440
#extension GL_ARB_explicit_attrib_location : require
#extension GL_ARB_shading_language_420pack : require

layout(origin_upper_left) in vec4 gl_FragCoord;
#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
precise vec4 u_xlat_precise_vec4;
precise ivec4 u_xlat_precise_ivec4;
precise bvec4 u_xlat_precise_bvec4;
precise uvec4 u_xlat_precise_uvec4;
const uvec4 ImmCB_0[] = uvec4[4] (
	uvec4(0x3F800000, 0x0, 0x0, 0x0),
	uvec4(0x0, 0x3F800000, 0x0, 0x0),
	uvec4(0x0, 0x0, 0x3F800000, 0x0),
	uvec4(0x0, 0x0, 0x0, 0x3F800000));
layout(set = 1, binding = 0, std140) uniform PGlobals {
	vec4 _ScaledScreenParams;
	vec2 _GlobalMipBias;
	vec4 _MainLightPosition;
	vec4 _MainLightColor;
	vec4 _AmbientOcclusionParam;
	vec4 _AdditionalLightsCount;
	uint _RenderingLayerMaxInt;
	float _RenderingLayerRcpMaxInt;
	vec3 _WorldSpaceCameraPos;
	vec4 _ProjectionParams;
	vec4 unity_OrthoParams;
	vec4 _ScaleBiasRt;
	vec4 unity_FogParams;
	vec4 unity_FogColor;
	mat4x4 unity_MatrixV;
};
layout(set = 1, binding = 1, std140) uniform AdditionalLights {
	vec4 _AdditionalLightsPosition[256];
	vec4 _AdditionalLightsColor[256];
	vec4 _AdditionalLightsAttenuation[256];
	vec4 _AdditionalLightsSpotDir[256];
	vec4 _AdditionalLightsOcclusionProbes[256];
	float _AdditionalLightsLayerMasks[256];
};
layout(set = 1, binding = 2, std140) uniform UnityPerDraw {
	mat4x4 unity_ObjectToWorld;
	mat4x4 unity_WorldToObject;
	vec4 unity_LODFade;
	vec4 unity_WorldTransformParams;
	vec4 unity_RenderingLayer;
	vec4 unity_LightData;
	vec4 unity_LightIndices[2];
	vec4 unity_ProbesOcclusion;
	vec4 unity_SpecCube0_HDR;
	vec4 unity_SpecCube1_HDR;
	vec4 unity_SpecCube0_BoxMax;
	vec4 unity_SpecCube0_BoxMin;
	vec4 unity_SpecCube0_ProbePosition;
	vec4 unity_SpecCube1_BoxMax;
	vec4 unity_SpecCube1_BoxMin;
	vec4 unity_SpecCube1_ProbePosition;
	vec4 unity_LightmapST;
	vec4 unity_DynamicLightmapST;
	vec4 unity_SHAr;
	vec4 unity_SHAg;
	vec4 unity_SHAb;
	vec4 unity_SHBr;
	vec4 unity_SHBg;
	vec4 unity_SHBb;
	vec4 unity_SHC;
	vec4 unity_RendererBounds_Min;
	vec4 unity_RendererBounds_Max;
	mat4x4 unity_MatrixPreviousM;
	mat4x4 unity_MatrixPreviousMI;
	vec4 unity_MotionVectorsParams;
	vec4 unity_SpriteColor;
	vec4 unity_SpriteProps;
};
layout(set = 1, binding = 3, std140) uniform MainLightShadows {
	mat4x4 _MainLightWorldToShadow[5];
	vec4 _CascadeShadowSplitSpheres0;
	vec4 _CascadeShadowSplitSpheres1;
	vec4 _CascadeShadowSplitSpheres2;
	vec4 _CascadeShadowSplitSpheres3;
	vec4 _CascadeShadowSplitSphereRadii;
	vec4 _MainLightShadowOffset0;
	vec4 _MainLightShadowOffset1;
	vec4 _MainLightShadowParams;
	vec4 _MainLightShadowmapSize;
};
layout(set = 1, binding = 4, std140) uniform UnityPerMaterial {
	vec4 _MainTex_TexelSize;
	vec4 _MRLL_TexelSize;
	vec4 _BumpMap_TexelSize;
	vec4 _Color1;
	vec4 _Color2;
};
layout(set = 0, binding = 0) uniform mediump textureCube unity_SpecCube0;
layout(set = 0, binding = 1) uniform mediump texture2D unity_Lightmap;
layout(set = 0, binding = 2) uniform mediump texture2D unity_LightmapInd;
layout(set = 0, binding = 3) uniform mediump texture2D _ScreenSpaceOcclusionTexture;
layout(set = 0, binding = 4) uniform mediump texture2D _MainLightShadowmapTexture;
layout(set = 0, binding = 5) uniform mediump texture2D _MainTex;
layout(set = 0, binding = 6) uniform mediump texture2D _MRLL;
layout(set = 0, binding = 7) uniform mediump texture2D _BumpMap;
layout(location = 0) in highp vec3 vs_INTERP0;
layout(location = 1) in highp vec3 vs_INTERP1;
layout(location = 2) in highp vec4 vs_INTERP2;
layout(location = 3) in highp vec4 vs_INTERP3;
layout(location = 4) in highp vec2 vs_INTERP4;
layout(location = 5) in highp vec4 vs_INTERP8;
layout(location = 0) out highp vec4 SV_Target0;
layout(location = 1) out highp vec4 SV_Target1;
layout(set = 0, binding = 8) uniform mediump  sampler samplerunity_SpecCube0;
layout(set = 0, binding = 9) uniform mediump  sampler samplerunity_Lightmap;
layout(set = 0, binding = 10) uniform mediump  sampler sampler_ScreenSpaceOcclusionTexture;
layout(set = 0, binding = 11) uniform mediump  samplerShadow sampler_MainLightShadowmapTexture;
layout(set = 0, binding = 12) uniform mediump  sampler samplerSamplerState_Trilinear_Clamp;
void main()
{
vec4 u_xlat0;
uint u_xlatu0;
vec4 u_xlat1;
vec3 u_xlat2;
vec3 u_xlat3;
vec4 u_xlat4;
bvec3 u_xlatb4;
vec3 u_xlat5;
vec3 u_xlat6;
vec4 u_xlat7;
vec3 u_xlat8;
vec3 u_xlat9;
vec3 u_xlat10;
vec2 u_xlat11;
bool u_xlatb11;
vec3 u_xlat12;
bvec3 u_xlatb12;
vec3 u_xlat16;
bool u_xlatb16;
float u_xlat22;
uint u_xlatu22;
float u_xlat23;
float u_xlat27;
bool u_xlatb27;
float u_xlat33;
float u_xlat35;
uint u_xlatu35;
float u_xlat36;
float u_xlat37;
int u_xlati37;
uint u_xlatu37;
bool u_xlatb37;
float u_xlat39;
int u_xlati39;
float u_xlat40;
float u_xlat41;
vec4 hlslcc_FragCoord = vec4(gl_FragCoord.xyz, 1.0/gl_FragCoord.w);
    u_xlat0 = texture(sampler2D(_MainTex, samplerSamplerState_Trilinear_Clamp), vs_INTERP3.xy, _GlobalMipBias.x);
    u_xlat1 = texture(sampler2D(_MRLL, samplerSamplerState_Trilinear_Clamp), vs_INTERP3.xy, _GlobalMipBias.x);
    u_xlat2.xyz = u_xlat1.www * _Color2.xyz;
    u_xlat2.xyz = _Color1.xyz * u_xlat1.zzz + u_xlat2.xyz;
    u_xlat23 = u_xlat1.w + u_xlat1.z;
    u_xlat23 = clamp(u_xlat23, 0.0, 1.0);
    u_xlat3.xyz = (-u_xlat0.xyz) + vec3(1.0, 1.0, 1.0);
    u_xlat3.xyz = u_xlat3.xyz + u_xlat3.xyz;
    u_xlat4.xyz = (-u_xlat2.xyz) + vec3(1.0, 1.0, 1.0);
    u_xlat3.xyz = (-u_xlat3.xyz) * u_xlat4.xyz + vec3(1.0, 1.0, 1.0);
    u_xlat4.xyz = u_xlat0.xyz + u_xlat0.xyz;
    u_xlat2.xyz = u_xlat2.xyz * u_xlat4.xyz;
    u_xlatb4.xyz = greaterThanEqual(vec4(0.5, 0.5, 0.5, 0.0), u_xlat0.xyzx).xyz;
    u_xlat5.x = u_xlatb4.x ? float(1.0) : 0.0;
    u_xlat5.y = u_xlatb4.y ? float(1.0) : 0.0;
    u_xlat5.z = u_xlatb4.z ? float(1.0) : 0.0;
;
    u_xlat4.x = (u_xlatb4.x) ? float(0.0) : float(1.0);
    u_xlat4.y = (u_xlatb4.y) ? float(0.0) : float(1.0);
    u_xlat4.z = (u_xlatb4.z) ? float(0.0) : float(1.0);
    u_xlat3.xyz = u_xlat3.xyz * u_xlat4.xyz;
    u_xlat2.xyz = u_xlat2.xyz * u_xlat5.xyz + u_xlat3.xyz;
    u_xlat2.xyz = (-u_xlat0.xyz) + u_xlat2.xyz;
    u_xlat2.xyz = vec3(u_xlat23) * u_xlat2.xyz + u_xlat0.xyz;
    u_xlat0.x = u_xlat0.x + -0.150000006;
    u_xlat0.x = ceil(u_xlat0.x);
    u_xlat0.x = (-u_xlat0.x) + 1.0;
    u_xlat2.xyz = u_xlat0.xxx * vec3(0.400000006, 0.400000006, 0.400000006) + u_xlat2.xyz;
    u_xlat3.xyz = texture(sampler2D(_BumpMap, samplerSamplerState_Trilinear_Clamp), vs_INTERP3.xy, _GlobalMipBias.x).xyw;
    u_xlat3.x = u_xlat3.x * u_xlat3.z;
    u_xlat11.xy = u_xlat3.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
    u_xlat23 = dot(u_xlat11.xy, u_xlat11.xy);
    u_xlat23 = min(u_xlat23, 1.0);
    u_xlat23 = (-u_xlat23) + 1.0;
    u_xlat23 = sqrt(u_xlat23);
    u_xlat23 = max(u_xlat23, 1.00000002e-16);
    u_xlat0.x = u_xlat1.x + u_xlat0.x;
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
    u_xlat1.x = max(u_xlat1.y, 0.0);
    u_xlat1.x = min(u_xlat1.x, 0.850000024);
    u_xlatb12.x = 0.0<vs_INTERP2.w;
    u_xlatb12.z = unity_WorldTransformParams.w>=0.0;
    u_xlat12.x = (u_xlatb12.x) ? float(1.0) : float(-1.0);
    u_xlat12.z = (u_xlatb12.z) ? float(1.0) : float(-1.0);
    u_xlat12.x = u_xlat12.z * u_xlat12.x;
    u_xlat3.xyz = vs_INTERP1.zxy * vs_INTERP2.yzx;
    u_xlat3.xyz = vs_INTERP1.yzx * vs_INTERP2.zxy + (-u_xlat3.xyz);
    u_xlat3.xyz = u_xlat12.xxx * u_xlat3.xyz;
    u_xlat3.xyz = u_xlat11.yyy * u_xlat3.xyz;
    u_xlat3.xyz = u_xlat11.xxx * vs_INTERP2.xyz + u_xlat3.xyz;
    u_xlat12.xyz = vec3(u_xlat23) * vs_INTERP1.xyz + u_xlat3.xyz;
    u_xlat11.x = dot(u_xlat12.xyz, u_xlat12.xyz);
    u_xlat11.x = inversesqrt(u_xlat11.x);
    u_xlat12.xyz = u_xlat11.xxx * u_xlat12.xyz;
    u_xlatb11 = unity_OrthoParams.w==0.0;
    u_xlat3.xyz = (-vs_INTERP0.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat22 = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat22 = inversesqrt(u_xlat22);
    u_xlat3.xyz = vec3(u_xlat22) * u_xlat3.xyz;
    u_xlat4.x = unity_MatrixV[0].z;
    u_xlat4.y = unity_MatrixV[1].z;
    u_xlat4.z = unity_MatrixV[2].z;
    u_xlat3.xyz = (bool(u_xlatb11)) ? u_xlat3.xyz : u_xlat4.xyz;
    u_xlat11.x = vs_INTERP0.y * unity_MatrixV[1].z;
    u_xlat11.x = unity_MatrixV[0].z * vs_INTERP0.x + u_xlat11.x;
    u_xlat11.x = unity_MatrixV[2].z * vs_INTERP0.z + u_xlat11.x;
    u_xlat11.x = u_xlat11.x + unity_MatrixV[3].z;
    u_xlat11.x = (-u_xlat11.x) + (-_ProjectionParams.y);
    u_xlat11.x = max(u_xlat11.x, 0.0);
    u_xlat11.x = u_xlat11.x * unity_FogParams.x;
    u_xlat4 = texture(sampler2D(unity_LightmapInd, samplerunity_Lightmap), vs_INTERP4.xy, _GlobalMipBias.x);
    u_xlat5.xyz = texture(sampler2D(unity_Lightmap, samplerunity_Lightmap), vs_INTERP4.xy, _GlobalMipBias.x).xyz;
    u_xlat4.xyz = u_xlat4.xyz + vec3(-0.5, -0.5, -0.5);
    u_xlat22 = dot(u_xlat12.xyz, u_xlat4.xyz);
    u_xlat22 = u_xlat22 + 0.5;
    u_xlat4.xyz = vec3(u_xlat22) * u_xlat5.xyz;
    u_xlat22 = max(u_xlat4.w, 9.99999975e-05);
    u_xlat4.xyz = u_xlat4.xyz / vec3(u_xlat22);
    u_xlat5.xy = vec2(1.0) / vec2(_ScaledScreenParams.xy);
    u_xlat5.xy = u_xlat5.xy * hlslcc_FragCoord.xy;
    u_xlat22 = u_xlat5.y * _ScaleBiasRt.x + _ScaleBiasRt.y;
    u_xlat5.z = (-u_xlat22) + 1.0;
    u_xlat22 = (-u_xlat0.x) * 0.959999979 + 0.959999979;
    u_xlat35 = (-u_xlat22) + u_xlat1.x;
    u_xlat6.xyz = vec3(u_xlat22) * u_xlat2.xyz;
    u_xlat2.xyz = u_xlat2.xyz + vec3(-0.0399999991, -0.0399999991, -0.0399999991);
    u_xlat2.xyz = u_xlat0.xxx * u_xlat2.xyz + vec3(0.0399999991, 0.0399999991, 0.0399999991);
    u_xlat0.x = (-u_xlat1.x) + 1.0;
    u_xlat22 = u_xlat0.x * u_xlat0.x;
    u_xlat1.x = u_xlat22 * u_xlat22;
    u_xlat35 = u_xlat35 + 1.0;
    u_xlat35 = min(u_xlat35, 1.0);
    u_xlat36 = u_xlat22 * 4.0 + 2.0;
    u_xlat37 = texture(sampler2D(_ScreenSpaceOcclusionTexture, sampler_ScreenSpaceOcclusionTexture), u_xlat5.xz, _GlobalMipBias.x).x;
    u_xlat5.x = u_xlat37 + -1.0;
    u_xlat5.x = _AmbientOcclusionParam.w * u_xlat5.x + 1.0;
    u_xlat33 = min(u_xlat0.w, u_xlat37);
    vec3 txVec0 = vec3(vs_INTERP8.xy,vs_INTERP8.z);
    u_xlat37 = textureLod(sampler2DShadow(_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture), txVec0, 0.0);
    u_xlat16.x = (-_MainLightShadowParams.x) + 1.0;
    u_xlat37 = u_xlat37 * _MainLightShadowParams.x + u_xlat16.x;
    u_xlatb16 = 0.0>=vs_INTERP8.z;
    u_xlatb27 = vs_INTERP8.z>=1.0;
    u_xlatb16 = u_xlatb27 || u_xlatb16;
    u_xlat37 = (u_xlatb16) ? 1.0 : u_xlat37;
    u_xlat16.xyz = vs_INTERP0.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat16.x = dot(u_xlat16.xyz, u_xlat16.xyz);
    u_xlat16.x = u_xlat16.x * _MainLightShadowParams.z + _MainLightShadowParams.w;
    u_xlat16.x = clamp(u_xlat16.x, 0.0, 1.0);
    u_xlat27 = (-u_xlat37) + 1.0;
    u_xlat37 = u_xlat16.x * u_xlat27 + u_xlat37;
    u_xlat16.xyz = u_xlat5.xxx * _MainLightColor.xyz;
    u_xlat39 = dot((-u_xlat3.xyz), u_xlat12.xyz);
    u_xlat39 = u_xlat39 + u_xlat39;
    u_xlat7.xyz = u_xlat12.xyz * (-vec3(u_xlat39)) + (-u_xlat3.xyz);
    u_xlat39 = dot(u_xlat12.xyz, u_xlat3.xyz);
    u_xlat39 = clamp(u_xlat39, 0.0, 1.0);
    u_xlat39 = (-u_xlat39) + 1.0;
    u_xlat39 = u_xlat39 * u_xlat39;
    u_xlat39 = u_xlat39 * u_xlat39;
    u_xlat40 = (-u_xlat0.x) * 0.699999988 + 1.70000005;
    u_xlat0.x = u_xlat0.x * u_xlat40;
    u_xlat0.x = u_xlat0.x * 6.0;
    u_xlat7 = textureLod(samplerCube(unity_SpecCube0, samplerunity_SpecCube0), u_xlat7.xyz, u_xlat0.x);
    u_xlat0.x = u_xlat7.w + -1.0;
    u_xlat0.x = unity_SpecCube0_HDR.w * u_xlat0.x + 1.0;
    u_xlat0.x = max(u_xlat0.x, 0.0);
    u_xlat0.x = log2(u_xlat0.x);
    u_xlat0.x = u_xlat0.x * unity_SpecCube0_HDR.y;
    u_xlat0.x = exp2(u_xlat0.x);
    u_xlat0.x = u_xlat0.x * unity_SpecCube0_HDR.x;
    u_xlat7.xyz = u_xlat7.xyz * u_xlat0.xxx;
    u_xlat0.xz = vec2(u_xlat22) * vec2(u_xlat22) + vec2(-1.0, 1.0);
    u_xlat22 = float(1.0) / u_xlat0.z;
    u_xlat8.xyz = (-u_xlat2.xyz) + vec3(u_xlat35);
    u_xlat8.xyz = vec3(u_xlat39) * u_xlat8.xyz + u_xlat2.xyz;
    u_xlat8.xyz = vec3(u_xlat22) * u_xlat8.xyz;
    u_xlat7.xyz = u_xlat7.xyz * u_xlat8.xyz;
    u_xlat4.xyz = u_xlat4.xyz * u_xlat6.xyz + u_xlat7.xyz;
    u_xlat22 = u_xlat37 * unity_LightData.z;
    u_xlat35 = dot(u_xlat12.xyz, _MainLightPosition.xyz);
    u_xlat35 = clamp(u_xlat35, 0.0, 1.0);
    u_xlat22 = u_xlat22 * u_xlat35;
    u_xlat16.xyz = vec3(u_xlat22) * u_xlat16.xyz;
    u_xlat7.xyz = u_xlat3.xyz + _MainLightPosition.xyz;
    u_xlat22 = dot(u_xlat7.xyz, u_xlat7.xyz);
    u_xlat22 = max(u_xlat22, 1.17549435e-37);
    u_xlat22 = inversesqrt(u_xlat22);
    u_xlat7.xyz = vec3(u_xlat22) * u_xlat7.xyz;
    u_xlat22 = dot(u_xlat12.xyz, u_xlat7.xyz);
    u_xlat22 = clamp(u_xlat22, 0.0, 1.0);
    u_xlat35 = dot(_MainLightPosition.xyz, u_xlat7.xyz);
    u_xlat35 = clamp(u_xlat35, 0.0, 1.0);
    u_xlat22 = u_xlat22 * u_xlat22;
    u_xlat22 = u_xlat22 * u_xlat0.x + 1.00001001;
    u_xlat35 = u_xlat35 * u_xlat35;
    u_xlat22 = u_xlat22 * u_xlat22;
    u_xlat35 = max(u_xlat35, 0.100000001);
    u_xlat22 = u_xlat22 * u_xlat35;
    u_xlat22 = u_xlat36 * u_xlat22;
    u_xlat22 = u_xlat1.x / u_xlat22;
    u_xlat7.xyz = u_xlat2.xyz * vec3(u_xlat22) + u_xlat6.xyz;
    u_xlat16.xyz = u_xlat16.xyz * u_xlat7.xyz;
    u_xlat22 = min(_AdditionalLightsCount.x, unity_LightData.y);
    u_xlatu22 =  uint(int(u_xlat22));
    u_xlat7.x = float(0.0);
    u_xlat7.y = float(0.0);
    u_xlat7.z = float(0.0);
    for(uint u_xlatu_loop_1 = 0u ; u_xlatu_loop_1<u_xlatu22 ; u_xlatu_loop_1++)
    {
        u_xlatu37 = u_xlatu_loop_1 >> (2u & uint(0x1F));
        u_xlati39 = int(u_xlatu_loop_1 & 3u);
        u_xlat37 = dot(unity_LightIndices[int(u_xlatu37)], uintBitsToFloat(ImmCB_0[u_xlati39]));
        u_xlati37 = int(u_xlat37);
        u_xlat8.xyz = (-vs_INTERP0.xyz) * _AdditionalLightsPosition[u_xlati37].www + _AdditionalLightsPosition[u_xlati37].xyz;
        u_xlat39 = dot(u_xlat8.xyz, u_xlat8.xyz);
        u_xlat39 = max(u_xlat39, 6.10351562e-05);
        u_xlat40 = inversesqrt(u_xlat39);
        u_xlat9.xyz = vec3(u_xlat40) * u_xlat8.xyz;
        u_xlat41 = float(1.0) / float(u_xlat39);
        u_xlat39 = u_xlat39 * _AdditionalLightsAttenuation[u_xlati37].x;
        u_xlat39 = (-u_xlat39) * u_xlat39 + 1.0;
        u_xlat39 = max(u_xlat39, 0.0);
        u_xlat39 = u_xlat39 * u_xlat39;
        u_xlat39 = u_xlat39 * u_xlat41;
        u_xlat41 = dot(_AdditionalLightsSpotDir[u_xlati37].xyz, u_xlat9.xyz);
        u_xlat41 = u_xlat41 * _AdditionalLightsAttenuation[u_xlati37].z + _AdditionalLightsAttenuation[u_xlati37].w;
        u_xlat41 = clamp(u_xlat41, 0.0, 1.0);
        u_xlat41 = u_xlat41 * u_xlat41;
        u_xlat39 = u_xlat39 * u_xlat41;
        u_xlat10.xyz = u_xlat5.xxx * _AdditionalLightsColor[u_xlati37].xyz;
        u_xlat37 = dot(u_xlat12.xyz, u_xlat9.xyz);
        u_xlat37 = clamp(u_xlat37, 0.0, 1.0);
        u_xlat37 = u_xlat37 * u_xlat39;
        u_xlat10.xyz = vec3(u_xlat37) * u_xlat10.xyz;
        u_xlat8.xyz = u_xlat8.xyz * vec3(u_xlat40) + u_xlat3.xyz;
        u_xlat37 = dot(u_xlat8.xyz, u_xlat8.xyz);
        u_xlat37 = max(u_xlat37, 1.17549435e-37);
        u_xlat37 = inversesqrt(u_xlat37);
        u_xlat8.xyz = vec3(u_xlat37) * u_xlat8.xyz;
        u_xlat37 = dot(u_xlat12.xyz, u_xlat8.xyz);
        u_xlat37 = clamp(u_xlat37, 0.0, 1.0);
        u_xlat39 = dot(u_xlat9.xyz, u_xlat8.xyz);
        u_xlat39 = clamp(u_xlat39, 0.0, 1.0);
        u_xlat37 = u_xlat37 * u_xlat37;
        u_xlat37 = u_xlat37 * u_xlat0.x + 1.00001001;
        u_xlat39 = u_xlat39 * u_xlat39;
        u_xlat37 = u_xlat37 * u_xlat37;
        u_xlat39 = max(u_xlat39, 0.100000001);
        u_xlat37 = u_xlat37 * u_xlat39;
        u_xlat37 = u_xlat36 * u_xlat37;
        u_xlat37 = u_xlat1.x / u_xlat37;
        u_xlat8.xyz = u_xlat2.xyz * vec3(u_xlat37) + u_xlat6.xyz;
        u_xlat7.xyz = u_xlat8.xyz * u_xlat10.xyz + u_xlat7.xyz;
    }
    u_xlat0.xzw = u_xlat4.xyz * vec3(u_xlat33) + u_xlat16.xyz;
    u_xlat0.xzw = u_xlat7.xyz + u_xlat0.xzw;
    u_xlat11.x = u_xlat11.x * (-u_xlat11.x);
    u_xlat11.x = exp2(u_xlat11.x);
    u_xlat0.xzw = u_xlat0.xzw + (-unity_FogColor.xyz);
    SV_Target0.xyz = u_xlat11.xxx * u_xlat0.xzw + unity_FogColor.xyz;
    u_xlatu0 = _RenderingLayerMaxInt & floatBitsToUint(unity_RenderingLayer.x);
    u_xlat0.x = float(u_xlatu0);
    SV_Target1.x = u_xlat0.x * _RenderingLayerRcpMaxInt;
    SV_Target1.x = clamp(SV_Target1.x, 0.0, 1.0);
    SV_Target0.w = 1.0;
    SV_Target1.yzw = vec3(0.0, 0.0, 0.0);
    return;
}

