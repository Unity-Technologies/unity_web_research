type Arr = array<vec4<f32>, 2u>;

type Arr_1 = array<mat4x4<f32>, 2u>;

type Arr_2 = array<vec4<f32>, 2u>;

type Arr_3 = array<vec4<f32>, 2u>;

type Arr_4 = array<vec4<f32>, 2u>;

struct PGlobals {
  x_ScaledScreenParams : vec4<f32>,
  x_GlobalMipBias : vec2<f32>,
  @size(8)
  padding : u32,
  x_ProjectionParams : vec4<f32>,
  x_SSAOParams : vec4<f32>,
  x_CameraViewTopLeftCorner : Arr_4,
  x_CameraViewProjections : Arr_1,
  x_SourceSize : vec4<f32>,
  x_CameraViewXExtent : Arr_4,
  x_CameraViewYExtent : Arr_4,
  x_CameraViewZExtent : Arr_4,
}

@group(0) @binding(0) var x_CameraDepthTexture : texture_2d<f32>;

@group(0) @binding(1) var sampler_CameraDepthTexture : sampler;

var<private> vs_TEXCOORD0 : vec2<f32>;

@group(1) @binding(0) var<uniform> x_34 : PGlobals;

var<private> SV_Target0 : vec4<f32>;

var<private> gl_FragCoord : vec4<f32>;

fn main_1() {
  var u_xlat0 : f32;
  var u_xlatb7 : bool;
  var u_xlat7 : vec3<f32>;
  var u_xlatb14 : bool;
  var u_xlat14 : vec2<f32>;
  var u_xlat21 : f32;
  var u_xlat1 : vec3<f32>;
  var u_xlat9 : vec3<f32>;
  var u_xlat3 : vec4<f32>;
  var u_xlat11 : vec3<f32>;
  var u_xlat12 : vec3<f32>;
  var u_xlatb21 : bool;
  var u_xlat6 : vec3<f32>;
  var x_281 : vec3<f32>;
  var u_xlat5 : vec4<f32>;
  var x_290 : vec3<f32>;
  var x_301 : vec3<f32>;
  var u_xlat2 : vec4<f32>;
  var x_313 : vec3<f32>;
  var x_323 : vec2<f32>;
  var u_xlat4 : vec3<f32>;
  var u_xlat22 : f32;
  var u_xlat23 : f32;
  var u_xlatb22 : bool;
  var x_556 : vec3<f32>;
  var u_xlat10 : vec3<f32>;
  var u_xlat17 : f32;
  var u_xlatb17 : bool;
  var u_xlatb3 : bool;
  var x_844 : vec3<f32>;
  var u_xlat18 : f32;
  var u_xlatb4 : vec3<bool>;
  var u_xlatb23 : bool;
  var x_1125 : vec3<f32>;
  var u_xlat24 : f32;
  var u_xlatb24 : bool;
  var x_1396 : vec3<f32>;
  var u_xlat_precise_vec4 : vec4<f32>;
  var u_xlat_precise_ivec4 : vec4<i32>;
  var u_xlat_precise_bvec4 : vec4<bool>;
  var u_xlat_precise_uvec4 : vec4<u32>;
  let x_22 : vec2<f32> = vs_TEXCOORD0;
  let x_40 : f32 = x_34.x_GlobalMipBias.x;
  let x_41 : vec4<f32> = textureSampleBias(x_CameraDepthTexture, sampler_CameraDepthTexture, x_22, x_40);
  u_xlat0 = x_41.x;
  let x_46 : f32 = u_xlat0;
  u_xlatb7 = (x_46 < 0.00001f);
  let x_49 : bool = u_xlatb7;
  if (x_49) {
    SV_Target0 = vec4<f32>(0.0f, 0.5f, 0.5f, 0.5f);
    return;
  }
  let x_64 : f32 = x_34.x_ProjectionParams.y;
  let x_67 : f32 = x_34.x_ProjectionParams.z;
  u_xlat7.x = (-(x_64) + x_67);
  let x_71 : f32 = u_xlat7.x;
  let x_73 : f32 = u_xlat0;
  let x_76 : f32 = x_34.x_ProjectionParams.z;
  u_xlat0 = ((-(x_71) * x_73) + x_76);
  let x_82 : f32 = x_34.x_SSAOParams.w;
  let x_83 : f32 = u_xlat0;
  u_xlatb14 = (x_82 < x_83);
  let x_85 : bool = u_xlatb14;
  if (x_85) {
    SV_Target0 = vec4<f32>(0.0f, 0.5f, 0.5f, 0.5f);
    return;
  }
  let x_93 : f32 = vs_TEXCOORD0.y;
  u_xlat14.x = (-(x_93) + 1.0f);
  let x_99 : f32 = u_xlat0;
  let x_101 : f32 = x_34.x_ProjectionParams.w;
  u_xlat21 = (x_99 * x_101);
  let x_108 : vec4<f32> = x_34.x_CameraViewXExtent[0i];
  let x_110 : vec2<f32> = vs_TEXCOORD0;
  let x_115 : vec4<f32> = x_34.x_CameraViewTopLeftCorner[0i];
  u_xlat1 = ((vec3<f32>(x_108.x, x_108.y, x_108.z) * vec3<f32>(x_110.x, x_110.x, x_110.x)) + vec3<f32>(x_115.x, x_115.y, x_115.z));
  let x_120 : vec4<f32> = x_34.x_CameraViewYExtent[0i];
  let x_122 : vec2<f32> = u_xlat14;
  let x_125 : vec3<f32> = u_xlat1;
  u_xlat1 = ((vec3<f32>(x_120.x, x_120.y, x_120.z) * vec3<f32>(x_122.x, x_122.x, x_122.x)) + x_125);
  let x_129 : vec4<f32> = x_34.x_CameraViewZExtent[0i];
  let x_131 : f32 = u_xlat21;
  let x_134 : vec3<f32> = u_xlat1;
  u_xlat1 = ((vec3<f32>(x_129.x, x_129.y, x_129.z) * vec3<f32>(x_131, x_131, x_131)) + x_134);
  let x_139 : f32 = x_34.x_SourceSize.z;
  u_xlat9.x = (x_139 * -2.0f);
  u_xlat9.y = 0.0f;
  let x_144 : vec3<f32> = u_xlat9;
  let x_146 : vec2<f32> = vs_TEXCOORD0;
  let x_147 : vec2<f32> = (vec2<f32>(x_144.x, x_144.y) + x_146);
  let x_148 : vec3<f32> = u_xlat9;
  u_xlat9 = vec3<f32>(x_147.x, x_147.y, x_148.z);
  let x_153 : vec3<f32> = u_xlat9;
  let x_156 : f32 = x_34.x_GlobalMipBias.x;
  let x_157 : vec4<f32> = textureSampleBias(x_CameraDepthTexture, sampler_CameraDepthTexture, vec2<f32>(x_153.x, x_153.y), x_156);
  u_xlat14.x = x_157.x;
  let x_161 : f32 = u_xlat7.x;
  let x_164 : f32 = u_xlat14.x;
  let x_167 : f32 = x_34.x_ProjectionParams.z;
  u_xlat9.z = ((-(x_161) * x_164) + x_167);
  let x_173 : f32 = x_34.x_SourceSize.z;
  u_xlat3.x = (x_173 * 2.0f);
  u_xlat3.y = 0.0f;
  let x_178 : vec4<f32> = u_xlat3;
  let x_180 : vec2<f32> = vs_TEXCOORD0;
  let x_181 : vec2<f32> = (vec2<f32>(x_178.x, x_178.y) + x_180);
  let x_182 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_181.x, x_181.y, x_182.z, x_182.w);
  let x_187 : vec4<f32> = u_xlat3;
  let x_190 : f32 = x_34.x_GlobalMipBias.x;
  let x_191 : vec4<f32> = textureSampleBias(x_CameraDepthTexture, sampler_CameraDepthTexture, vec2<f32>(x_187.x, x_187.y), x_190);
  u_xlat14.x = x_191.x;
  let x_195 : f32 = u_xlat7.x;
  let x_198 : f32 = u_xlat14.x;
  let x_201 : f32 = x_34.x_ProjectionParams.z;
  u_xlat3.z = ((-(x_195) * x_198) + x_201);
  u_xlat11.x = 0.0f;
  let x_207 : f32 = x_34.x_SourceSize.w;
  u_xlat11.y = (x_207 * 2.0f);
  let x_210 : vec3<f32> = u_xlat11;
  let x_212 : vec2<f32> = vs_TEXCOORD0;
  let x_213 : vec2<f32> = (vec2<f32>(x_210.x, x_210.y) + x_212);
  let x_214 : vec3<f32> = u_xlat11;
  u_xlat11 = vec3<f32>(x_213.x, x_213.y, x_214.z);
  let x_219 : vec3<f32> = u_xlat11;
  let x_222 : f32 = x_34.x_GlobalMipBias.x;
  let x_223 : vec4<f32> = textureSampleBias(x_CameraDepthTexture, sampler_CameraDepthTexture, vec2<f32>(x_219.x, x_219.y), x_222);
  u_xlat14.x = x_223.x;
  let x_227 : f32 = u_xlat7.x;
  let x_230 : f32 = u_xlat14.x;
  let x_233 : f32 = x_34.x_ProjectionParams.z;
  u_xlat11.z = ((-(x_227) * x_230) + x_233);
  u_xlat12.x = 0.0f;
  let x_239 : f32 = x_34.x_SourceSize.w;
  u_xlat12.y = (x_239 * -2.0f);
  let x_242 : vec3<f32> = u_xlat12;
  let x_244 : vec2<f32> = vs_TEXCOORD0;
  let x_245 : vec2<f32> = (vec2<f32>(x_242.x, x_242.y) + x_244);
  let x_246 : vec3<f32> = u_xlat12;
  u_xlat12 = vec3<f32>(x_245.x, x_245.y, x_246.z);
  let x_251 : vec3<f32> = u_xlat12;
  let x_254 : f32 = x_34.x_GlobalMipBias.x;
  let x_255 : vec4<f32> = textureSampleBias(x_CameraDepthTexture, sampler_CameraDepthTexture, vec2<f32>(x_251.x, x_251.y), x_254);
  u_xlat14.x = x_255.x;
  let x_259 : f32 = u_xlat7.x;
  let x_262 : f32 = u_xlat14.x;
  let x_265 : f32 = x_34.x_ProjectionParams.z;
  u_xlat12.z = ((-(x_259) * x_262) + x_265);
  let x_269 : f32 = u_xlat3.z;
  let x_271 : f32 = u_xlat9.z;
  u_xlatb14 = (x_269 < x_271);
  let x_275 : f32 = u_xlat11.z;
  let x_277 : f32 = u_xlat12.z;
  u_xlatb21 = (x_275 < x_277);
  let x_280 : bool = u_xlatb14;
  if (x_280) {
    let x_284 : vec3<f32> = u_xlat9;
    x_281 = x_284;
  } else {
    let x_286 : vec3<f32> = u_xlat12;
    x_281 = x_286;
  }
  let x_287 : vec3<f32> = x_281;
  u_xlat6 = x_287;
  let x_289 : bool = u_xlatb14;
  if (x_289) {
    let x_293 : vec3<f32> = u_xlat12;
    x_290 = x_293;
  } else {
    let x_295 : vec4<f32> = u_xlat3;
    x_290 = vec3<f32>(x_295.x, x_295.y, x_295.z);
  }
  let x_297 : vec3<f32> = x_290;
  let x_298 : vec4<f32> = u_xlat5;
  u_xlat5 = vec4<f32>(x_298.x, x_297.x, x_297.y, x_297.z);
  let x_300 : bool = u_xlatb14;
  if (x_300) {
    let x_304 : vec3<f32> = u_xlat11;
    x_301 = x_304;
  } else {
    let x_306 : vec4<f32> = u_xlat3;
    x_301 = vec3<f32>(x_306.x, x_306.y, x_306.z);
  }
  let x_308 : vec3<f32> = x_301;
  let x_309 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_308.x, x_308.y, x_308.z, x_309.w);
  let x_312 : bool = u_xlatb14;
  if (x_312) {
    let x_316 : vec3<f32> = u_xlat9;
    x_313 = x_316;
  } else {
    let x_318 : vec3<f32> = u_xlat11;
    x_313 = x_318;
  }
  let x_319 : vec3<f32> = x_313;
  let x_320 : vec4<f32> = u_xlat2;
  u_xlat2 = vec4<f32>(x_320.x, x_319.x, x_319.y, x_319.z);
  let x_322 : bool = u_xlatb21;
  if (x_322) {
    let x_326 : vec3<f32> = u_xlat6;
    x_323 = vec2<f32>(x_326.x, x_326.y);
  } else {
    let x_329 : vec4<f32> = u_xlat3;
    x_323 = vec2<f32>(x_329.x, x_329.y);
  }
  let x_331 : vec2<f32> = x_323;
  let x_332 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_331.x, x_331.y, x_332.z, x_332.w);
  let x_335 : f32 = u_xlat6.z;
  u_xlat5.x = x_335;
  let x_338 : f32 = u_xlat3.z;
  u_xlat2.x = x_338;
  let x_340 : bool = u_xlatb21;
  let x_341 : vec4<f32> = u_xlat5;
  let x_342 : vec4<f32> = u_xlat2;
  u_xlat2 = select(x_342, x_341, vec4<bool>(x_340, x_340, x_340, x_340));
  let x_347 : f32 = u_xlat2.z;
  u_xlat14.x = (-(x_347) + 1.0f);
  let x_351 : vec4<f32> = u_xlat2;
  let x_354 : vec4<f32> = x_34.x_ProjectionParams;
  let x_356 : vec2<f32> = (vec2<f32>(x_351.w, x_351.x) * vec2<f32>(x_354.w, x_354.w));
  let x_357 : vec4<f32> = u_xlat2;
  u_xlat2 = vec4<f32>(x_356.x, x_357.y, x_356.y, x_357.w);
  let x_361 : vec4<f32> = x_34.x_CameraViewXExtent[0i];
  let x_363 : vec4<f32> = u_xlat2;
  let x_367 : vec4<f32> = x_34.x_CameraViewTopLeftCorner[0i];
  u_xlat4 = ((vec3<f32>(x_361.z, x_361.x, x_361.y) * vec3<f32>(x_363.y, x_363.y, x_363.y)) + vec3<f32>(x_367.z, x_367.x, x_367.y));
  let x_371 : vec4<f32> = x_34.x_CameraViewYExtent[0i];
  let x_373 : vec2<f32> = u_xlat14;
  let x_376 : vec3<f32> = u_xlat4;
  u_xlat4 = ((vec3<f32>(x_371.z, x_371.x, x_371.y) * vec3<f32>(x_373.x, x_373.x, x_373.x)) + x_376);
  let x_379 : vec4<f32> = x_34.x_CameraViewZExtent[0i];
  let x_381 : vec4<f32> = u_xlat2;
  let x_384 : vec3<f32> = u_xlat4;
  let x_385 : vec3<f32> = ((vec3<f32>(x_379.z, x_379.x, x_379.y) * vec3<f32>(x_381.x, x_381.x, x_381.x)) + x_384);
  let x_386 : vec4<f32> = u_xlat2;
  u_xlat2 = vec4<f32>(x_385.x, x_385.y, x_386.z, x_385.z);
  let x_388 : vec3<f32> = u_xlat1;
  let x_391 : vec4<f32> = u_xlat2;
  let x_393 : vec3<f32> = (-(vec3<f32>(x_388.z, x_388.x, x_388.y)) + vec3<f32>(x_391.x, x_391.y, x_391.w));
  let x_394 : vec4<f32> = u_xlat2;
  u_xlat2 = vec4<f32>(x_393.x, x_393.y, x_394.z, x_393.z);
  let x_397 : f32 = u_xlat3.y;
  u_xlat14.x = (-(x_397) + 1.0f);
  let x_402 : vec4<f32> = x_34.x_CameraViewXExtent[0i];
  let x_404 : vec4<f32> = u_xlat3;
  let x_408 : vec4<f32> = x_34.x_CameraViewTopLeftCorner[0i];
  let x_410 : vec3<f32> = ((vec3<f32>(x_402.y, x_402.z, x_402.x) * vec3<f32>(x_404.x, x_404.x, x_404.x)) + vec3<f32>(x_408.y, x_408.z, x_408.x));
  let x_411 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_410.x, x_410.y, x_410.z, x_411.w);
  let x_414 : vec4<f32> = x_34.x_CameraViewYExtent[0i];
  let x_416 : vec2<f32> = u_xlat14;
  let x_419 : vec4<f32> = u_xlat3;
  let x_421 : vec3<f32> = ((vec3<f32>(x_414.y, x_414.z, x_414.x) * vec3<f32>(x_416.x, x_416.x, x_416.x)) + vec3<f32>(x_419.x, x_419.y, x_419.z));
  let x_422 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_421.x, x_421.y, x_421.z, x_422.w);
  let x_425 : vec4<f32> = x_34.x_CameraViewZExtent[0i];
  let x_427 : vec4<f32> = u_xlat2;
  let x_430 : vec4<f32> = u_xlat3;
  let x_432 : vec3<f32> = ((vec3<f32>(x_425.y, x_425.z, x_425.x) * vec3<f32>(x_427.z, x_427.z, x_427.z)) + vec3<f32>(x_430.x, x_430.y, x_430.z));
  let x_433 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_432.x, x_432.y, x_432.z, x_433.w);
  let x_435 : vec3<f32> = u_xlat1;
  let x_438 : vec4<f32> = u_xlat3;
  let x_440 : vec3<f32> = (-(vec3<f32>(x_435.y, x_435.z, x_435.x)) + vec3<f32>(x_438.x, x_438.y, x_438.z));
  let x_441 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_440.x, x_440.y, x_440.z, x_441.w);
  let x_443 : vec4<f32> = u_xlat2;
  let x_445 : vec4<f32> = u_xlat3;
  u_xlat4 = (vec3<f32>(x_443.x, x_443.y, x_443.w) * vec3<f32>(x_445.x, x_445.y, x_445.z));
  let x_448 : vec4<f32> = u_xlat2;
  let x_450 : vec4<f32> = u_xlat3;
  let x_453 : vec3<f32> = u_xlat4;
  let x_455 : vec3<f32> = ((vec3<f32>(x_448.w, x_448.x, x_448.y) * vec3<f32>(x_450.y, x_450.z, x_450.x)) + -(x_453));
  let x_456 : vec4<f32> = u_xlat2;
  u_xlat2 = vec4<f32>(x_455.x, x_455.y, x_455.z, x_456.w);
  let x_458 : vec4<f32> = u_xlat2;
  let x_460 : vec4<f32> = u_xlat2;
  u_xlat14.x = dot(vec3<f32>(x_458.x, x_458.y, x_458.z), vec3<f32>(x_460.x, x_460.y, x_460.z));
  let x_465 : f32 = u_xlat14.x;
  u_xlat14.x = inverseSqrt(x_465);
  let x_468 : vec2<f32> = u_xlat14;
  let x_470 : vec4<f32> = u_xlat2;
  let x_472 : vec3<f32> = (vec3<f32>(x_468.x, x_468.x, x_468.x) * vec3<f32>(x_470.x, x_470.y, x_470.z));
  let x_473 : vec4<f32> = u_xlat2;
  u_xlat2 = vec4<f32>(x_472.x, x_472.y, x_472.z, x_473.w);
  let x_475 : vec2<f32> = vs_TEXCOORD0;
  let x_477 : vec4<f32> = x_34.x_ScaledScreenParams;
  u_xlat14 = (x_475 * vec2<f32>(x_477.x, x_477.y));
  let x_480 : vec2<f32> = u_xlat14;
  let x_482 : vec4<f32> = x_34.x_SSAOParams;
  let x_484 : vec2<f32> = (x_480 * vec2<f32>(x_482.z, x_482.z));
  let x_485 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_484.x, x_484.y, x_485.z, x_485.w);
  let x_488 : vec4<f32> = u_xlat3;
  u_xlat22 = dot(vec2<f32>(x_488.x, x_488.y), vec2<f32>(0.067110561f, 0.00583715f));
  let x_494 : f32 = u_xlat22;
  u_xlat22 = fract(x_494);
  let x_496 : f32 = u_xlat22;
  u_xlat22 = (x_496 * 52.982917786f);
  let x_499 : f32 = u_xlat22;
  u_xlat22 = fract(x_499);
  let x_502 : f32 = u_xlat22;
  u_xlat23 = fract(x_502);
  let x_504 : f32 = u_xlat23;
  u_xlat3.z = ((x_504 * 2.0f) + -1.0f);
  let x_509 : f32 = u_xlat22;
  u_xlat22 = (x_509 + 0.9296875f);
  let x_512 : f32 = u_xlat22;
  u_xlat22 = (x_512 * 6.283185482f);
  let x_516 : f32 = u_xlat3.z;
  let x_519 : f32 = u_xlat3.z;
  u_xlat23 = ((-(x_516) * x_519) + 1.0f);
  let x_522 : f32 = u_xlat23;
  u_xlat23 = sqrt(x_522);
  let x_524 : f32 = u_xlat22;
  u_xlat4.x = sin(x_524);
  let x_527 : f32 = u_xlat22;
  u_xlat5.x = cos(x_527);
  let x_530 : f32 = u_xlat23;
  let x_532 : f32 = u_xlat5.x;
  u_xlat3.x = (x_530 * x_532);
  let x_535 : f32 = u_xlat23;
  let x_537 : f32 = u_xlat4.x;
  u_xlat3.y = (x_535 * x_537);
  let x_540 : vec4<f32> = u_xlat3;
  let x_543 : vec3<f32> = (vec3<f32>(x_540.x, x_540.y, x_540.z) * vec3<f32>(0.5f, 0.5f, 0.5f));
  let x_544 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_543.x, x_543.y, x_543.z, x_544.w);
  let x_546 : vec4<f32> = u_xlat2;
  let x_549 : vec4<f32> = u_xlat3;
  u_xlat22 = dot(-(vec3<f32>(x_546.x, x_546.y, x_546.z)), vec3<f32>(x_549.x, x_549.y, x_549.z));
  let x_553 : f32 = u_xlat22;
  u_xlatb22 = (x_553 >= 0.0f);
  let x_555 : bool = u_xlatb22;
  if (x_555) {
    let x_559 : vec4<f32> = u_xlat3;
    x_556 = -(vec3<f32>(x_559.x, x_559.y, x_559.z));
  } else {
    let x_563 : vec4<f32> = u_xlat3;
    x_556 = vec3<f32>(x_563.x, x_563.y, x_563.z);
  }
  let x_565 : vec3<f32> = x_556;
  let x_566 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_565.x, x_565.y, x_565.z, x_566.w);
  let x_568 : vec4<f32> = u_xlat3;
  let x_571 : vec4<f32> = x_34.x_SSAOParams;
  let x_574 : vec3<f32> = u_xlat1;
  let x_575 : vec3<f32> = ((vec3<f32>(x_568.x, x_568.y, x_568.z) * vec3<f32>(x_571.y, x_571.y, x_571.y)) + x_574);
  let x_576 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_575.x, x_575.y, x_575.z, x_576.w);
  let x_579 : vec4<f32> = u_xlat3;
  let x_583 : vec4<f32> = x_34.x_CameraViewProjections[0i][1i];
  let x_585 : vec2<f32> = (vec2<f32>(x_579.y, x_579.y) * vec2<f32>(x_583.x, x_583.y));
  let x_586 : vec3<f32> = u_xlat10;
  u_xlat10 = vec3<f32>(x_585.x, x_586.y, x_585.y);
  let x_589 : vec4<f32> = x_34.x_CameraViewProjections[0i][0i];
  let x_591 : vec4<f32> = u_xlat3;
  let x_594 : vec3<f32> = u_xlat10;
  let x_596 : vec2<f32> = ((vec2<f32>(x_589.x, x_589.y) * vec2<f32>(x_591.x, x_591.x)) + vec2<f32>(x_594.x, x_594.z));
  let x_597 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_596.x, x_596.y, x_597.z, x_597.w);
  let x_600 : vec4<f32> = x_34.x_CameraViewProjections[0i][2i];
  let x_602 : vec4<f32> = u_xlat3;
  let x_605 : vec4<f32> = u_xlat3;
  let x_607 : vec2<f32> = ((vec2<f32>(x_600.x, x_600.y) * vec2<f32>(x_602.z, x_602.z)) + vec2<f32>(x_605.x, x_605.y));
  let x_608 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_607.x, x_607.y, x_608.z, x_608.w);
  let x_610 : vec4<f32> = u_xlat3;
  let x_613 : vec2<f32> = (vec2<f32>(x_610.x, x_610.y) + vec2<f32>(1.0f, 1.0f));
  let x_614 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_613.x, x_613.y, x_614.z, x_614.w);
  let x_616 : vec4<f32> = u_xlat3;
  let x_619 : vec2<f32> = (vec2<f32>(x_616.x, x_616.y) * vec2<f32>(0.5f, 0.5f));
  let x_620 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_619.x, x_619.y, x_620.z, x_620.w);
  let x_622 : vec4<f32> = u_xlat3;
  let x_626 : vec2<f32> = clamp(vec2<f32>(x_622.x, x_622.y), vec2<f32>(0.0f, 0.0f), vec2<f32>(1.0f, 1.0f));
  let x_627 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_626.x, x_626.y, x_627.z, x_627.w);
  let x_632 : vec4<f32> = u_xlat3;
  let x_635 : f32 = x_34.x_GlobalMipBias.x;
  let x_636 : vec4<f32> = textureSampleBias(x_CameraDepthTexture, sampler_CameraDepthTexture, vec2<f32>(x_632.x, x_632.y), x_635);
  u_xlat22 = x_636.x;
  let x_639 : f32 = u_xlat7.x;
  let x_641 : f32 = u_xlat22;
  let x_644 : f32 = x_34.x_ProjectionParams.z;
  u_xlat23 = ((-(x_639) * x_641) + x_644);
  let x_647 : f32 = u_xlat0;
  let x_648 : f32 = u_xlat23;
  u_xlat17 = (x_647 + -(x_648));
  let x_652 : f32 = u_xlat17;
  let x_655 : f32 = x_34.x_SSAOParams.y;
  u_xlatb17 = (abs(x_652) < x_655);
  let x_657 : bool = u_xlatb17;
  u_xlat17 = select(0.0f, 1.0f, x_657);
  let x_659 : f32 = u_xlat22;
  u_xlatb22 = (0.00001f < x_659);
  let x_661 : bool = u_xlatb22;
  u_xlat22 = select(0.0f, 1.0f, x_661);
  let x_663 : f32 = u_xlat22;
  let x_664 : f32 = u_xlat17;
  u_xlat22 = (x_663 * x_664);
  let x_667 : f32 = u_xlat3.y;
  u_xlat10.x = (-(x_667) + 1.0f);
  let x_671 : f32 = u_xlat23;
  let x_673 : f32 = x_34.x_ProjectionParams.w;
  u_xlat23 = (x_671 * x_673);
  let x_676 : vec4<f32> = x_34.x_CameraViewXExtent[0i];
  let x_678 : vec4<f32> = u_xlat3;
  let x_682 : vec4<f32> = x_34.x_CameraViewTopLeftCorner[0i];
  let x_684 : vec3<f32> = ((vec3<f32>(x_676.x, x_676.y, x_676.z) * vec3<f32>(x_678.x, x_678.x, x_678.x)) + vec3<f32>(x_682.x, x_682.y, x_682.z));
  let x_685 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_684.x, x_685.y, x_684.y, x_684.z);
  let x_688 : vec4<f32> = x_34.x_CameraViewYExtent[0i];
  let x_690 : vec3<f32> = u_xlat10;
  let x_693 : vec4<f32> = u_xlat3;
  let x_695 : vec3<f32> = ((vec3<f32>(x_688.x, x_688.y, x_688.z) * vec3<f32>(x_690.x, x_690.x, x_690.x)) + vec3<f32>(x_693.x, x_693.z, x_693.w));
  let x_696 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_695.x, x_695.y, x_695.z, x_696.w);
  let x_699 : vec4<f32> = x_34.x_CameraViewZExtent[0i];
  let x_701 : f32 = u_xlat23;
  let x_704 : vec4<f32> = u_xlat3;
  let x_706 : vec3<f32> = ((vec3<f32>(x_699.x, x_699.y, x_699.z) * vec3<f32>(x_701, x_701, x_701)) + vec3<f32>(x_704.x, x_704.y, x_704.z));
  let x_707 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_706.x, x_706.y, x_706.z, x_707.w);
  let x_709 : vec3<f32> = u_xlat1;
  let x_711 : vec4<f32> = u_xlat3;
  let x_713 : vec3<f32> = (-(x_709) + vec3<f32>(x_711.x, x_711.y, x_711.z));
  let x_714 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_713.x, x_713.y, x_713.z, x_714.w);
  let x_716 : vec4<f32> = u_xlat3;
  let x_718 : vec4<f32> = u_xlat2;
  u_xlat23 = dot(vec3<f32>(x_716.x, x_716.y, x_716.z), vec3<f32>(x_718.x, x_718.y, x_718.z));
  let x_721 : f32 = u_xlat0;
  let x_725 : f32 = u_xlat23;
  u_xlat23 = ((-(x_721) * 0.004f) + x_725);
  let x_727 : f32 = u_xlat23;
  u_xlat23 = max(x_727, 0.0f);
  let x_729 : vec4<f32> = u_xlat3;
  let x_731 : vec4<f32> = u_xlat3;
  u_xlat3.x = dot(vec3<f32>(x_729.x, x_729.y, x_729.z), vec3<f32>(x_731.x, x_731.y, x_731.z));
  let x_736 : f32 = u_xlat3.x;
  u_xlat3.x = (x_736 + 0.0001f);
  let x_741 : f32 = u_xlat3.x;
  u_xlat3.x = (1.0f / x_741);
  let x_744 : f32 = u_xlat23;
  let x_746 : f32 = u_xlat3.x;
  u_xlat23 = (x_744 * x_746);
  let x_748 : vec2<f32> = u_xlat14;
  let x_751 : vec4<f32> = x_34.x_SSAOParams;
  u_xlat3 = ((vec4<f32>(x_748.x, x_748.y, x_748.x, x_748.y) * vec4<f32>(x_751.z, x_751.z, x_751.z, x_751.z)) + vec4<f32>(2.082999945f, 4.867000103f, 4.165999889f, 9.734000206f));
  let x_760 : vec4<f32> = u_xlat3;
  u_xlat3.x = dot(vec2<f32>(x_760.x, x_760.y), vec2<f32>(0.067110561f, 0.00583715f));
  let x_765 : f32 = u_xlat3.x;
  u_xlat3.x = fract(x_765);
  let x_769 : f32 = u_xlat3.x;
  u_xlat3.x = (x_769 * 52.982917786f);
  let x_773 : f32 = u_xlat3.x;
  u_xlat3.x = fract(x_773);
  let x_776 : vec4<f32> = u_xlat3;
  let x_781 : vec2<f32> = (vec2<f32>(x_776.x, x_776.x) + vec2<f32>(0.33984375f, 0.76171875f));
  let x_782 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_781.x, x_781.y, x_782.z, x_782.w);
  let x_785 : f32 = u_xlat3.x;
  u_xlat3.x = fract(x_785);
  let x_789 : f32 = u_xlat3.x;
  u_xlat4.z = ((x_789 * 2.0f) + -1.0f);
  let x_794 : f32 = u_xlat3.y;
  u_xlat3.x = (x_794 * 6.283185482f);
  let x_798 : f32 = u_xlat4.z;
  let x_801 : f32 = u_xlat4.z;
  u_xlat10.x = ((-(x_798) * x_801) + 1.0f);
  let x_806 : f32 = u_xlat10.x;
  u_xlat10.x = sqrt(x_806);
  let x_810 : f32 = u_xlat3.x;
  u_xlat5.x = cos(x_810);
  let x_814 : f32 = u_xlat3.x;
  u_xlat3.x = sin(x_814);
  let x_818 : f32 = u_xlat10.x;
  let x_820 : f32 = u_xlat5.x;
  u_xlat4.x = (x_818 * x_820);
  let x_824 : f32 = u_xlat3.x;
  let x_826 : f32 = u_xlat10.x;
  u_xlat4.y = (x_824 * x_826);
  let x_829 : vec3<f32> = u_xlat4;
  u_xlat4 = (x_829 * vec3<f32>(0.707106769f, 0.707106769f, 0.707106769f));
  let x_833 : vec4<f32> = u_xlat2;
  let x_836 : vec3<f32> = u_xlat4;
  u_xlat3.x = dot(-(vec3<f32>(x_833.x, x_833.y, x_833.z)), x_836);
  let x_841 : f32 = u_xlat3.x;
  u_xlatb3 = (x_841 >= 0.0f);
  let x_843 : bool = u_xlatb3;
  if (x_843) {
    let x_847 : vec3<f32> = u_xlat4;
    x_844 = -(x_847);
  } else {
    let x_850 : vec3<f32> = u_xlat4;
    x_844 = x_850;
  }
  let x_851 : vec3<f32> = x_844;
  u_xlat4 = x_851;
  let x_852 : vec3<f32> = u_xlat4;
  let x_854 : vec4<f32> = x_34.x_SSAOParams;
  let x_857 : vec3<f32> = u_xlat1;
  u_xlat4 = ((x_852 * vec3<f32>(x_854.y, x_854.y, x_854.y)) + x_857);
  let x_859 : vec3<f32> = u_xlat4;
  let x_862 : vec4<f32> = x_34.x_CameraViewProjections[0i][1i];
  let x_864 : vec2<f32> = (vec2<f32>(x_859.y, x_859.y) * vec2<f32>(x_862.x, x_862.y));
  let x_865 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_864.x, x_864.y, x_865.z, x_865.w);
  let x_868 : vec4<f32> = x_34.x_CameraViewProjections[0i][0i];
  let x_870 : vec3<f32> = u_xlat4;
  let x_873 : vec4<f32> = u_xlat3;
  let x_875 : vec2<f32> = ((vec2<f32>(x_868.x, x_868.y) * vec2<f32>(x_870.x, x_870.x)) + vec2<f32>(x_873.x, x_873.y));
  let x_876 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_875.x, x_875.y, x_876.z, x_876.w);
  let x_879 : vec4<f32> = x_34.x_CameraViewProjections[0i][2i];
  let x_881 : vec3<f32> = u_xlat4;
  let x_884 : vec4<f32> = u_xlat3;
  let x_886 : vec2<f32> = ((vec2<f32>(x_879.x, x_879.y) * vec2<f32>(x_881.z, x_881.z)) + vec2<f32>(x_884.x, x_884.y));
  let x_887 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_886.x, x_886.y, x_887.z, x_887.w);
  let x_889 : vec4<f32> = u_xlat3;
  let x_891 : vec2<f32> = (vec2<f32>(x_889.x, x_889.y) + vec2<f32>(1.0f, 1.0f));
  let x_892 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_891.x, x_891.y, x_892.z, x_892.w);
  let x_894 : vec4<f32> = u_xlat3;
  let x_896 : vec2<f32> = (vec2<f32>(x_894.x, x_894.y) * vec2<f32>(0.5f, 0.5f));
  let x_897 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_896.x, x_896.y, x_897.z, x_897.w);
  let x_899 : vec4<f32> = u_xlat3;
  let x_903 : vec2<f32> = clamp(vec2<f32>(x_899.x, x_899.y), vec2<f32>(0.0f, 0.0f), vec2<f32>(1.0f, 1.0f));
  let x_904 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_903.x, x_903.y, x_904.z, x_904.w);
  let x_909 : vec4<f32> = u_xlat3;
  let x_912 : f32 = x_34.x_GlobalMipBias.x;
  let x_913 : vec4<f32> = textureSampleBias(x_CameraDepthTexture, sampler_CameraDepthTexture, vec2<f32>(x_909.x, x_909.y), x_912);
  u_xlat4.x = x_913.x;
  let x_917 : f32 = u_xlat7.x;
  let x_920 : f32 = u_xlat4.x;
  let x_923 : f32 = x_34.x_ProjectionParams.z;
  u_xlat11.x = ((-(x_917) * x_920) + x_923);
  let x_927 : f32 = u_xlat0;
  let x_929 : f32 = u_xlat11.x;
  u_xlat18 = (x_927 + -(x_929));
  let x_935 : f32 = u_xlat18;
  let x_938 : f32 = x_34.x_SSAOParams.y;
  u_xlatb4.z = (abs(x_935) < x_938);
  let x_942 : f32 = u_xlat4.x;
  u_xlatb4.x = (0.00001f < x_942);
  let x_946 : bool = u_xlatb4.x;
  u_xlat4.x = select(0.0f, 1.0f, x_946);
  let x_950 : bool = u_xlatb4.z;
  u_xlat4.z = select(0.0f, 1.0f, x_950);
  let x_954 : f32 = u_xlat4.x;
  let x_956 : f32 = u_xlat4.z;
  u_xlat4.x = (x_954 * x_956);
  let x_960 : f32 = u_xlat3.y;
  u_xlat10.x = (-(x_960) + 1.0f);
  let x_965 : f32 = u_xlat11.x;
  let x_967 : f32 = x_34.x_ProjectionParams.w;
  u_xlat11.x = (x_965 * x_967);
  let x_971 : vec4<f32> = x_34.x_CameraViewXExtent[0i];
  let x_973 : vec4<f32> = u_xlat3;
  let x_977 : vec4<f32> = x_34.x_CameraViewTopLeftCorner[0i];
  let x_979 : vec3<f32> = ((vec3<f32>(x_971.x, x_971.y, x_971.z) * vec3<f32>(x_973.x, x_973.x, x_973.x)) + vec3<f32>(x_977.x, x_977.y, x_977.z));
  let x_980 : vec4<f32> = u_xlat5;
  u_xlat5 = vec4<f32>(x_979.x, x_979.y, x_979.z, x_980.w);
  let x_983 : vec4<f32> = x_34.x_CameraViewYExtent[0i];
  let x_985 : vec3<f32> = u_xlat10;
  let x_988 : vec4<f32> = u_xlat5;
  let x_990 : vec3<f32> = ((vec3<f32>(x_983.x, x_983.y, x_983.z) * vec3<f32>(x_985.x, x_985.x, x_985.x)) + vec3<f32>(x_988.x, x_988.y, x_988.z));
  let x_991 : vec4<f32> = u_xlat5;
  u_xlat5 = vec4<f32>(x_990.x, x_990.y, x_990.z, x_991.w);
  let x_994 : vec4<f32> = x_34.x_CameraViewZExtent[0i];
  let x_996 : vec3<f32> = u_xlat11;
  let x_999 : vec4<f32> = u_xlat5;
  u_xlat11 = ((vec3<f32>(x_994.x, x_994.y, x_994.z) * vec3<f32>(x_996.x, x_996.x, x_996.x)) + vec3<f32>(x_999.x, x_999.y, x_999.z));
  let x_1002 : vec3<f32> = u_xlat1;
  let x_1004 : vec3<f32> = u_xlat11;
  u_xlat11 = (-(x_1002) + x_1004);
  let x_1006 : vec3<f32> = u_xlat11;
  let x_1007 : vec4<f32> = u_xlat2;
  u_xlat3.x = dot(x_1006, vec3<f32>(x_1007.x, x_1007.y, x_1007.z));
  let x_1011 : f32 = u_xlat0;
  let x_1015 : f32 = u_xlat3.x;
  u_xlat3.x = ((-(x_1011) * 0.004f) + x_1015);
  let x_1019 : f32 = u_xlat3.x;
  u_xlat3.x = max(x_1019, 0.0f);
  let x_1022 : vec3<f32> = u_xlat11;
  let x_1023 : vec3<f32> = u_xlat11;
  u_xlat10.x = dot(x_1022, x_1023);
  let x_1027 : f32 = u_xlat10.x;
  u_xlat10.x = (x_1027 + 0.0001f);
  let x_1031 : f32 = u_xlat10.x;
  u_xlat10.x = (1.0f / x_1031);
  let x_1035 : f32 = u_xlat10.x;
  let x_1037 : f32 = u_xlat3.x;
  u_xlat3.x = (x_1035 * x_1037);
  let x_1041 : f32 = u_xlat4.x;
  let x_1043 : f32 = u_xlat3.x;
  u_xlat3.x = (x_1041 * x_1043);
  let x_1046 : f32 = u_xlat23;
  let x_1047 : f32 = u_xlat22;
  let x_1050 : f32 = u_xlat3.x;
  u_xlat22 = ((x_1046 * x_1047) + x_1050);
  let x_1052 : vec4<f32> = u_xlat3;
  u_xlat23 = dot(vec2<f32>(x_1052.z, x_1052.w), vec2<f32>(0.067110561f, 0.00583715f));
  let x_1055 : f32 = u_xlat23;
  u_xlat23 = fract(x_1055);
  let x_1057 : f32 = u_xlat23;
  u_xlat23 = (x_1057 * 52.982917786f);
  let x_1059 : f32 = u_xlat23;
  u_xlat23 = fract(x_1059);
  let x_1061 : f32 = u_xlat23;
  let x_1066 : vec2<f32> = (vec2<f32>(x_1061, x_1061) + vec2<f32>(0.75390625f, 0.133333296f));
  let x_1067 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_1066.x, x_1066.y, x_1067.z, x_1067.w);
  let x_1070 : f32 = u_xlat3.x;
  u_xlat23 = fract(x_1070);
  let x_1072 : f32 = u_xlat23;
  u_xlat4.z = ((x_1072 * 2.0f) + -1.0f);
  let x_1077 : f32 = u_xlat3.y;
  u_xlat23 = (x_1077 * 6.283185482f);
  let x_1080 : f32 = u_xlat4.z;
  let x_1083 : f32 = u_xlat4.z;
  u_xlat3.x = ((-(x_1080) * x_1083) + 1.0f);
  let x_1088 : f32 = u_xlat3.x;
  u_xlat3.x = sqrt(x_1088);
  let x_1091 : f32 = u_xlat23;
  u_xlat5.x = sin(x_1091);
  let x_1094 : f32 = u_xlat23;
  u_xlat6.x = cos(x_1094);
  let x_1098 : f32 = u_xlat3.x;
  let x_1100 : f32 = u_xlat6.x;
  u_xlat4.x = (x_1098 * x_1100);
  let x_1104 : f32 = u_xlat3.x;
  let x_1106 : f32 = u_xlat5.x;
  u_xlat4.y = (x_1104 * x_1106);
  let x_1109 : vec3<f32> = u_xlat4;
  let x_1112 : vec3<f32> = (x_1109 * vec3<f32>(0.866025388f, 0.866025388f, 0.866025388f));
  let x_1113 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_1112.x, x_1112.y, x_1112.z, x_1113.w);
  let x_1115 : vec4<f32> = u_xlat2;
  let x_1118 : vec4<f32> = u_xlat3;
  u_xlat23 = dot(-(vec3<f32>(x_1115.x, x_1115.y, x_1115.z)), vec3<f32>(x_1118.x, x_1118.y, x_1118.z));
  let x_1122 : f32 = u_xlat23;
  u_xlatb23 = (x_1122 >= 0.0f);
  let x_1124 : bool = u_xlatb23;
  if (x_1124) {
    let x_1128 : vec4<f32> = u_xlat3;
    x_1125 = -(vec3<f32>(x_1128.x, x_1128.y, x_1128.z));
  } else {
    let x_1132 : vec4<f32> = u_xlat3;
    x_1125 = vec3<f32>(x_1132.x, x_1132.y, x_1132.z);
  }
  let x_1134 : vec3<f32> = x_1125;
  let x_1135 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_1134.x, x_1134.y, x_1134.z, x_1135.w);
  let x_1137 : vec4<f32> = u_xlat3;
  let x_1140 : vec4<f32> = x_34.x_SSAOParams;
  let x_1143 : vec3<f32> = u_xlat1;
  let x_1144 : vec3<f32> = ((vec3<f32>(x_1137.x, x_1137.y, x_1137.z) * vec3<f32>(x_1140.y, x_1140.y, x_1140.y)) + x_1143);
  let x_1145 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_1144.x, x_1144.y, x_1144.z, x_1145.w);
  let x_1147 : vec4<f32> = u_xlat3;
  let x_1150 : vec4<f32> = x_34.x_CameraViewProjections[0i][1i];
  let x_1152 : vec2<f32> = (vec2<f32>(x_1147.y, x_1147.y) * vec2<f32>(x_1150.x, x_1150.y));
  let x_1153 : vec3<f32> = u_xlat10;
  u_xlat10 = vec3<f32>(x_1152.x, x_1153.y, x_1152.y);
  let x_1156 : vec4<f32> = x_34.x_CameraViewProjections[0i][0i];
  let x_1158 : vec4<f32> = u_xlat3;
  let x_1161 : vec3<f32> = u_xlat10;
  let x_1163 : vec2<f32> = ((vec2<f32>(x_1156.x, x_1156.y) * vec2<f32>(x_1158.x, x_1158.x)) + vec2<f32>(x_1161.x, x_1161.z));
  let x_1164 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_1163.x, x_1163.y, x_1164.z, x_1164.w);
  let x_1167 : vec4<f32> = x_34.x_CameraViewProjections[0i][2i];
  let x_1169 : vec4<f32> = u_xlat3;
  let x_1172 : vec4<f32> = u_xlat3;
  let x_1174 : vec2<f32> = ((vec2<f32>(x_1167.x, x_1167.y) * vec2<f32>(x_1169.z, x_1169.z)) + vec2<f32>(x_1172.x, x_1172.y));
  let x_1175 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_1174.x, x_1174.y, x_1175.z, x_1175.w);
  let x_1177 : vec4<f32> = u_xlat3;
  let x_1179 : vec2<f32> = (vec2<f32>(x_1177.x, x_1177.y) + vec2<f32>(1.0f, 1.0f));
  let x_1180 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_1179.x, x_1179.y, x_1180.z, x_1180.w);
  let x_1182 : vec4<f32> = u_xlat3;
  let x_1184 : vec2<f32> = (vec2<f32>(x_1182.x, x_1182.y) * vec2<f32>(0.5f, 0.5f));
  let x_1185 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_1184.x, x_1184.y, x_1185.z, x_1185.w);
  let x_1187 : vec4<f32> = u_xlat3;
  let x_1191 : vec2<f32> = clamp(vec2<f32>(x_1187.x, x_1187.y), vec2<f32>(0.0f, 0.0f), vec2<f32>(1.0f, 1.0f));
  let x_1192 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_1191.x, x_1191.y, x_1192.z, x_1192.w);
  let x_1197 : vec4<f32> = u_xlat3;
  let x_1200 : f32 = x_34.x_GlobalMipBias.x;
  let x_1201 : vec4<f32> = textureSampleBias(x_CameraDepthTexture, sampler_CameraDepthTexture, vec2<f32>(x_1197.x, x_1197.y), x_1200);
  u_xlat23 = x_1201.x;
  let x_1204 : f32 = u_xlat7.x;
  let x_1206 : f32 = u_xlat23;
  let x_1209 : f32 = x_34.x_ProjectionParams.z;
  u_xlat17 = ((-(x_1204) * x_1206) + x_1209);
  let x_1212 : f32 = u_xlat0;
  let x_1213 : f32 = u_xlat17;
  u_xlat24 = (x_1212 + -(x_1213));
  let x_1217 : f32 = u_xlat24;
  let x_1220 : f32 = x_34.x_SSAOParams.y;
  u_xlatb24 = (abs(x_1217) < x_1220);
  let x_1222 : bool = u_xlatb24;
  u_xlat24 = select(0.0f, 1.0f, x_1222);
  let x_1224 : f32 = u_xlat23;
  u_xlatb23 = (0.00001f < x_1224);
  let x_1226 : bool = u_xlatb23;
  u_xlat23 = select(0.0f, 1.0f, x_1226);
  let x_1228 : f32 = u_xlat23;
  let x_1229 : f32 = u_xlat24;
  u_xlat23 = (x_1228 * x_1229);
  let x_1232 : f32 = u_xlat3.y;
  u_xlat10.x = (-(x_1232) + 1.0f);
  let x_1236 : f32 = u_xlat17;
  let x_1238 : f32 = x_34.x_ProjectionParams.w;
  u_xlat17 = (x_1236 * x_1238);
  let x_1241 : vec4<f32> = x_34.x_CameraViewXExtent[0i];
  let x_1243 : vec4<f32> = u_xlat3;
  let x_1247 : vec4<f32> = x_34.x_CameraViewTopLeftCorner[0i];
  u_xlat4 = ((vec3<f32>(x_1241.x, x_1241.y, x_1241.z) * vec3<f32>(x_1243.x, x_1243.x, x_1243.x)) + vec3<f32>(x_1247.x, x_1247.y, x_1247.z));
  let x_1251 : vec4<f32> = x_34.x_CameraViewYExtent[0i];
  let x_1253 : vec3<f32> = u_xlat10;
  let x_1256 : vec3<f32> = u_xlat4;
  let x_1257 : vec3<f32> = ((vec3<f32>(x_1251.x, x_1251.y, x_1251.z) * vec3<f32>(x_1253.x, x_1253.x, x_1253.x)) + x_1256);
  let x_1258 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_1257.x, x_1257.y, x_1258.z, x_1257.z);
  let x_1261 : vec4<f32> = x_34.x_CameraViewZExtent[0i];
  let x_1263 : f32 = u_xlat17;
  let x_1266 : vec4<f32> = u_xlat3;
  let x_1268 : vec3<f32> = ((vec3<f32>(x_1261.x, x_1261.y, x_1261.z) * vec3<f32>(x_1263, x_1263, x_1263)) + vec3<f32>(x_1266.x, x_1266.y, x_1266.w));
  let x_1269 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_1268.x, x_1268.y, x_1268.z, x_1269.w);
  let x_1271 : vec3<f32> = u_xlat1;
  let x_1273 : vec4<f32> = u_xlat3;
  let x_1275 : vec3<f32> = (-(x_1271) + vec3<f32>(x_1273.x, x_1273.y, x_1273.z));
  let x_1276 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_1275.x, x_1275.y, x_1275.z, x_1276.w);
  let x_1278 : vec4<f32> = u_xlat3;
  let x_1280 : vec4<f32> = u_xlat2;
  u_xlat24 = dot(vec3<f32>(x_1278.x, x_1278.y, x_1278.z), vec3<f32>(x_1280.x, x_1280.y, x_1280.z));
  let x_1283 : f32 = u_xlat0;
  let x_1286 : f32 = u_xlat24;
  u_xlat24 = ((-(x_1283) * 0.004f) + x_1286);
  let x_1288 : f32 = u_xlat24;
  u_xlat24 = max(x_1288, 0.0f);
  let x_1290 : vec4<f32> = u_xlat3;
  let x_1292 : vec4<f32> = u_xlat3;
  u_xlat3.x = dot(vec3<f32>(x_1290.x, x_1290.y, x_1290.z), vec3<f32>(x_1292.x, x_1292.y, x_1292.z));
  let x_1297 : f32 = u_xlat3.x;
  u_xlat3.x = (x_1297 + 0.0001f);
  let x_1301 : f32 = u_xlat3.x;
  u_xlat3.x = (1.0f / x_1301);
  let x_1305 : f32 = u_xlat3.x;
  let x_1306 : f32 = u_xlat24;
  u_xlat3.x = (x_1305 * x_1306);
  let x_1310 : f32 = u_xlat3.x;
  let x_1311 : f32 = u_xlat23;
  let x_1313 : f32 = u_xlat22;
  u_xlat22 = ((x_1310 * x_1311) + x_1313);
  let x_1315 : vec2<f32> = u_xlat14;
  let x_1317 : vec4<f32> = x_34.x_SSAOParams;
  u_xlat14 = ((x_1315 * vec2<f32>(x_1317.z, x_1317.z)) + vec2<f32>(6.248999596f, 14.600999832f));
  let x_1324 : vec2<f32> = u_xlat14;
  u_xlat14.x = dot(x_1324, vec2<f32>(0.067110561f, 0.00583715f));
  let x_1328 : f32 = u_xlat14.x;
  u_xlat14.x = fract(x_1328);
  let x_1332 : f32 = u_xlat14.x;
  u_xlat14.x = (x_1332 * 52.982917786f);
  let x_1336 : f32 = u_xlat14.x;
  u_xlat14.x = fract(x_1336);
  let x_1339 : vec2<f32> = u_xlat14;
  u_xlat14 = (vec2<f32>(x_1339.x, x_1339.x) + vec2<f32>(0.56640625f, 0.015625f));
  let x_1346 : f32 = u_xlat14.x;
  u_xlat14.x = fract(x_1346);
  let x_1350 : f32 = u_xlat14.x;
  u_xlat3.z = ((x_1350 * 2.0f) + -1.0f);
  let x_1355 : f32 = u_xlat14.y;
  u_xlat14.x = (x_1355 * 6.283185482f);
  let x_1359 : f32 = u_xlat3.z;
  let x_1362 : f32 = u_xlat3.z;
  u_xlat21 = ((-(x_1359) * x_1362) + 1.0f);
  let x_1365 : f32 = u_xlat21;
  u_xlat21 = sqrt(x_1365);
  let x_1368 : f32 = u_xlat14.x;
  u_xlat4.x = sin(x_1368);
  let x_1372 : f32 = u_xlat14.x;
  u_xlat5.x = cos(x_1372);
  let x_1375 : f32 = u_xlat21;
  let x_1377 : f32 = u_xlat5.x;
  u_xlat3.x = (x_1375 * x_1377);
  let x_1380 : f32 = u_xlat21;
  let x_1382 : f32 = u_xlat4.x;
  u_xlat3.y = (x_1380 * x_1382);
  let x_1385 : vec4<f32> = u_xlat2;
  let x_1388 : vec4<f32> = u_xlat3;
  u_xlat14.x = dot(-(vec3<f32>(x_1385.x, x_1385.y, x_1385.z)), vec3<f32>(x_1388.x, x_1388.y, x_1388.z));
  let x_1393 : f32 = u_xlat14.x;
  u_xlatb14 = (x_1393 >= 0.0f);
  let x_1395 : bool = u_xlatb14;
  if (x_1395) {
    let x_1399 : vec4<f32> = u_xlat3;
    x_1396 = -(vec3<f32>(x_1399.x, x_1399.y, x_1399.z));
  } else {
    let x_1403 : vec4<f32> = u_xlat3;
    x_1396 = vec3<f32>(x_1403.x, x_1403.y, x_1403.z);
  }
  let x_1405 : vec3<f32> = x_1396;
  let x_1406 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_1405.x, x_1405.y, x_1405.z, x_1406.w);
  let x_1408 : vec4<f32> = u_xlat3;
  let x_1411 : vec4<f32> = x_34.x_SSAOParams;
  let x_1414 : vec3<f32> = u_xlat1;
  let x_1415 : vec3<f32> = ((vec3<f32>(x_1408.x, x_1408.y, x_1408.z) * vec3<f32>(x_1411.y, x_1411.y, x_1411.y)) + x_1414);
  let x_1416 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_1415.x, x_1415.y, x_1415.z, x_1416.w);
  let x_1418 : vec4<f32> = u_xlat3;
  let x_1421 : vec4<f32> = x_34.x_CameraViewProjections[0i][1i];
  u_xlat14 = (vec2<f32>(x_1418.y, x_1418.y) * vec2<f32>(x_1421.x, x_1421.y));
  let x_1425 : vec4<f32> = x_34.x_CameraViewProjections[0i][0i];
  let x_1427 : vec4<f32> = u_xlat3;
  let x_1430 : vec2<f32> = u_xlat14;
  u_xlat14 = ((vec2<f32>(x_1425.x, x_1425.y) * vec2<f32>(x_1427.x, x_1427.x)) + x_1430);
  let x_1433 : vec4<f32> = x_34.x_CameraViewProjections[0i][2i];
  let x_1435 : vec4<f32> = u_xlat3;
  let x_1438 : vec2<f32> = u_xlat14;
  u_xlat14 = ((vec2<f32>(x_1433.x, x_1433.y) * vec2<f32>(x_1435.z, x_1435.z)) + x_1438);
  let x_1440 : vec2<f32> = u_xlat14;
  u_xlat14 = (x_1440 + vec2<f32>(1.0f, 1.0f));
  let x_1442 : vec2<f32> = u_xlat14;
  u_xlat14 = (x_1442 * vec2<f32>(0.5f, 0.5f));
  let x_1444 : vec2<f32> = u_xlat14;
  u_xlat14 = clamp(x_1444, vec2<f32>(0.0f, 0.0f), vec2<f32>(1.0f, 1.0f));
  let x_1451 : vec2<f32> = u_xlat14;
  let x_1453 : f32 = x_34.x_GlobalMipBias.x;
  let x_1454 : vec4<f32> = textureSampleBias(x_CameraDepthTexture, sampler_CameraDepthTexture, x_1451, x_1453);
  u_xlat23 = x_1454.x;
  let x_1457 : f32 = u_xlat7.x;
  let x_1459 : f32 = u_xlat23;
  let x_1462 : f32 = x_34.x_ProjectionParams.z;
  u_xlat7.x = ((-(x_1457) * x_1459) + x_1462);
  let x_1466 : f32 = u_xlat7.x;
  let x_1468 : f32 = u_xlat0;
  u_xlat3.x = (-(x_1466) + x_1468);
  let x_1472 : f32 = u_xlat3.x;
  let x_1475 : f32 = x_34.x_SSAOParams.y;
  u_xlatb3 = (abs(x_1472) < x_1475);
  let x_1477 : bool = u_xlatb3;
  u_xlat3.x = select(0.0f, 1.0f, x_1477);
  let x_1480 : f32 = u_xlat23;
  u_xlatb23 = (0.00001f < x_1480);
  let x_1482 : bool = u_xlatb23;
  u_xlat23 = select(0.0f, 1.0f, x_1482);
  let x_1484 : f32 = u_xlat23;
  let x_1486 : f32 = u_xlat3.x;
  u_xlat23 = (x_1484 * x_1486);
  let x_1489 : f32 = u_xlat14.y;
  u_xlat21 = (-(x_1489) + 1.0f);
  let x_1493 : f32 = u_xlat7.x;
  let x_1495 : f32 = x_34.x_ProjectionParams.w;
  u_xlat7.x = (x_1493 * x_1495);
  let x_1499 : vec4<f32> = x_34.x_CameraViewXExtent[0i];
  let x_1501 : vec2<f32> = u_xlat14;
  let x_1505 : vec4<f32> = x_34.x_CameraViewTopLeftCorner[0i];
  let x_1507 : vec3<f32> = ((vec3<f32>(x_1499.x, x_1499.y, x_1499.z) * vec3<f32>(x_1501.x, x_1501.x, x_1501.x)) + vec3<f32>(x_1505.x, x_1505.y, x_1505.z));
  let x_1508 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_1507.x, x_1507.y, x_1507.z, x_1508.w);
  let x_1511 : vec4<f32> = x_34.x_CameraViewYExtent[0i];
  let x_1513 : f32 = u_xlat21;
  let x_1516 : vec4<f32> = u_xlat3;
  let x_1518 : vec3<f32> = ((vec3<f32>(x_1511.x, x_1511.y, x_1511.z) * vec3<f32>(x_1513, x_1513, x_1513)) + vec3<f32>(x_1516.x, x_1516.y, x_1516.z));
  let x_1519 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_1518.x, x_1518.y, x_1518.z, x_1519.w);
  let x_1522 : vec4<f32> = x_34.x_CameraViewZExtent[0i];
  let x_1524 : vec3<f32> = u_xlat7;
  let x_1527 : vec4<f32> = u_xlat3;
  u_xlat7 = ((vec3<f32>(x_1522.x, x_1522.y, x_1522.z) * vec3<f32>(x_1524.x, x_1524.x, x_1524.x)) + vec3<f32>(x_1527.x, x_1527.y, x_1527.z));
  let x_1530 : vec3<f32> = u_xlat1;
  let x_1532 : vec3<f32> = u_xlat7;
  u_xlat7 = (-(x_1530) + x_1532);
  let x_1534 : vec3<f32> = u_xlat7;
  let x_1535 : vec4<f32> = u_xlat2;
  u_xlat1.x = dot(x_1534, vec3<f32>(x_1535.x, x_1535.y, x_1535.z));
  let x_1539 : f32 = u_xlat0;
  let x_1543 : f32 = u_xlat1.x;
  u_xlat1.x = ((-(x_1539) * 0.004f) + x_1543);
  let x_1547 : f32 = u_xlat1.x;
  u_xlat1.x = max(x_1547, 0.0f);
  let x_1550 : vec3<f32> = u_xlat7;
  let x_1551 : vec3<f32> = u_xlat7;
  u_xlat7.x = dot(x_1550, x_1551);
  let x_1555 : f32 = u_xlat7.x;
  u_xlat7.x = (x_1555 + 0.0001f);
  let x_1559 : f32 = u_xlat7.x;
  u_xlat7.x = (1.0f / x_1559);
  let x_1563 : f32 = u_xlat7.x;
  let x_1565 : f32 = u_xlat1.x;
  u_xlat7.x = (x_1563 * x_1565);
  let x_1569 : f32 = u_xlat7.x;
  let x_1570 : f32 = u_xlat23;
  let x_1572 : f32 = u_xlat22;
  u_xlat7.x = ((x_1569 * x_1570) + x_1572);
  let x_1576 : f32 = u_xlat7.x;
  let x_1578 : f32 = x_34.x_SSAOParams.y;
  u_xlat7.x = (x_1576 * x_1578);
  let x_1582 : f32 = x_34.x_SSAOParams.w;
  u_xlat14.x = (1.0f / x_1582);
  let x_1585 : f32 = u_xlat0;
  let x_1588 : f32 = u_xlat14.x;
  u_xlat0 = ((-(x_1585) * x_1588) + 1.0f);
  let x_1591 : f32 = u_xlat0;
  let x_1592 : f32 = u_xlat0;
  u_xlat0 = (x_1591 * x_1592);
  let x_1595 : f32 = u_xlat7.x;
  let x_1597 : f32 = x_34.x_SSAOParams.x;
  u_xlat7.x = (x_1595 * x_1597);
  let x_1600 : f32 = u_xlat0;
  let x_1602 : f32 = u_xlat7.x;
  u_xlat0 = (x_1600 * x_1602);
  let x_1604 : f32 = u_xlat0;
  u_xlat0 = (x_1604 * 0.25f);
  let x_1607 : f32 = u_xlat0;
  u_xlat0 = clamp(x_1607, 0.0f, 1.0f);
  let x_1609 : f32 = u_xlat0;
  u_xlat0 = log2(x_1609);
  let x_1611 : f32 = u_xlat0;
  u_xlat0 = (x_1611 * 0.600000024f);
  let x_1614 : f32 = u_xlat0;
  SV_Target0.x = exp2(x_1614);
  let x_1618 : vec4<f32> = u_xlat2;
  let x_1621 : vec3<f32> = ((vec3<f32>(x_1618.x, x_1618.y, x_1618.z) * vec3<f32>(0.5f, 0.5f, 0.5f)) + vec3<f32>(0.5f, 0.5f, 0.5f));
  let x_1622 : vec4<f32> = SV_Target0;
  SV_Target0 = vec4<f32>(x_1622.x, x_1621.x, x_1621.y, x_1621.z);
  return;
}

struct main_out {
  @location(0)
  SV_Target0_1 : vec4<f32>,
}

@fragment
fn main(@location(0) vs_TEXCOORD0_param : vec2<f32>, @builtin(position) gl_FragCoord_param : vec4<f32>) -> main_out {
  vs_TEXCOORD0 = vs_TEXCOORD0_param;
  gl_FragCoord = gl_FragCoord_param;
  main_1();
  return main_out(SV_Target0);
}

