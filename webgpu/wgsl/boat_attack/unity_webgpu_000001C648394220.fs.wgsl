struct PGlobals {
  x_ScaledScreenParams : vec4<f32>,
  x_GlobalMipBias : vec2<f32>,
  x_AlphaToMaskAvailable : f32,
  @size(4)
  padding : u32,
  x_MainLightPosition : vec4<f32>,
  x_MainLightColor : vec4<f32>,
  x_AmbientOcclusionParam : vec4<f32>,
  x_AdditionalLightsCount : vec4<f32>,
  x_WorldSpaceCameraPos : vec3<f32>,
  @size(4)
  padding_1 : u32,
  x_ScreenParams : vec4<f32>,
  unity_OrthoParams : vec4<f32>,
  x_ScaleBiasRt : vec4<f32>,
  unity_MatrixV : mat4x4<f32>,
}

type Arr = array<vec4<f32>, 2u>;

struct UnityPerDraw {
  unity_ObjectToWorld : mat4x4<f32>,
  unity_WorldToObject : mat4x4<f32>,
  unity_LODFade : vec4<f32>,
  unity_WorldTransformParams : vec4<f32>,
  unity_RenderingLayer : vec4<f32>,
  unity_LightData : vec4<f32>,
  unity_LightIndices : Arr,
  unity_ProbesOcclusion : vec4<f32>,
  unity_SpecCube0_HDR : vec4<f32>,
  unity_SpecCube1_HDR : vec4<f32>,
  unity_SpecCube0_BoxMax : vec4<f32>,
  unity_SpecCube0_BoxMin : vec4<f32>,
  unity_SpecCube0_ProbePosition : vec4<f32>,
  unity_SpecCube1_BoxMax : vec4<f32>,
  unity_SpecCube1_BoxMin : vec4<f32>,
  unity_SpecCube1_ProbePosition : vec4<f32>,
  unity_LightmapST : vec4<f32>,
  unity_DynamicLightmapST : vec4<f32>,
  unity_SHAr : vec4<f32>,
  unity_SHAg : vec4<f32>,
  unity_SHAb : vec4<f32>,
  unity_SHBr : vec4<f32>,
  unity_SHBg : vec4<f32>,
  unity_SHBb : vec4<f32>,
  unity_SHC : vec4<f32>,
  unity_RendererBounds_Min : vec4<f32>,
  unity_RendererBounds_Max : vec4<f32>,
  unity_MatrixPreviousM : mat4x4<f32>,
  unity_MatrixPreviousMI : mat4x4<f32>,
  unity_MotionVectorsParams : vec4<f32>,
  unity_SpriteColor : vec4<f32>,
  unity_SpriteProps : vec4<f32>,
}

struct UnityPerMaterial {
  Texture2D_B222E8F_TexelSize : vec4<f32>,
  Color_C30C7CA3 : vec4<f32>,
  Texture2D_D9BFD5F1_TexelSize : vec4<f32>,
}

type Arr_1 = array<mat4x4<f32>, 5u>;

struct MainLightShadows {
  x_MainLightWorldToShadow : Arr_1,
  x_CascadeShadowSplitSpheres0 : vec4<f32>,
  x_CascadeShadowSplitSpheres1 : vec4<f32>,
  x_CascadeShadowSplitSpheres2 : vec4<f32>,
  x_CascadeShadowSplitSpheres3 : vec4<f32>,
  x_CascadeShadowSplitSphereRadii : vec4<f32>,
  x_MainLightShadowOffset0 : vec4<f32>,
  x_MainLightShadowOffset1 : vec4<f32>,
  x_MainLightShadowParams : vec4<f32>,
  x_MainLightShadowmapSize : vec4<f32>,
}

struct strided_arr {
  @size(16)
  el : f32,
}

type Arr_2 = array<strided_arr, 8u>;

struct LightCookies {
  x_MainLightWorldToLight : mat4x4<f32>,
  x_AdditionalLightsCookieEnableBits : Arr_2,
  x_MainLightCookieTextureFormat : f32,
  x_AdditionalLightsCookieAtlasTextureFormat : f32,
}

type Arr_3 = array<vec4<f32>, 256u>;

type Arr_4 = array<vec4<f32>, 256u>;

type Arr_5 = array<vec4<f32>, 256u>;

type Arr_6 = array<vec4<f32>, 256u>;

type Arr_7 = array<vec4<f32>, 256u>;

struct strided_arr_1 {
  @size(16)
  el : f32,
}

type Arr_8 = array<strided_arr_1, 256u>;

type Arr_9 = array<vec4<f32>, 256u>;

type Arr_10 = array<strided_arr_1, 256u>;

struct AdditionalLights {
  x_AdditionalLightsPosition : Arr_9,
  x_AdditionalLightsColor : Arr_9,
  x_AdditionalLightsAttenuation : Arr_9,
  x_AdditionalLightsSpotDir : Arr_9,
  x_AdditionalLightsOcclusionProbes : Arr_9,
  x_AdditionalLightsLayerMasks : Arr_10,
}

type Arr_11 = array<mat4x4<f32>, 256u>;

struct AdditionalLightsCookies {
  x_AdditionalLightsWorldToLights : Arr_11,
  x_AdditionalLightsCookieAtlasUVRects : Arr_9,
  x_AdditionalLightsLightTypes : Arr_10,
}

var<private> gl_FragCoord : vec4<f32>;

var<private> vs_INTERP1 : vec3<f32>;

@group(1) @binding(0) var<uniform> x_90 : PGlobals;

var<private> vs_INTERP0 : vec3<f32>;

@group(1) @binding(2) var<uniform> x_161 : UnityPerDraw;

@group(0) @binding(6) var Texture2D_B222E8F : texture_2d<f32>;

@group(0) @binding(14) var samplerTexture2D_B222E8F : sampler;

var<private> vs_INTERP3 : vec4<f32>;

@group(1) @binding(6) var<uniform> x_215 : UnityPerMaterial;

@group(0) @binding(7) var Texture2D_D9BFD5F1 : texture_2d<f32>;

@group(0) @binding(15) var samplerTexture2D_D9BFD5F1 : sampler;

var<private> vs_INTERP4 : vec4<f32>;

@group(1) @binding(3) var<uniform> x_271 : MainLightShadows;

@group(0) @binding(3) var x_MainLightShadowmapTexture : texture_depth_2d;

@group(0) @binding(11) var sampler_MainLightShadowmapTexture : sampler_comparison;

var<private> vs_INTERP2 : vec4<f32>;

@group(0) @binding(1) var unity_Lightmap : texture_2d<f32>;

@group(0) @binding(9) var samplerunity_Lightmap : sampler;

var<private> vs_INTERP5 : vec2<f32>;

@group(0) @binding(2) var x_ScreenSpaceOcclusionTexture : texture_2d<f32>;

@group(0) @binding(10) var sampler_ScreenSpaceOcclusionTexture : sampler;

@group(1) @binding(4) var<uniform> x_3422 : LightCookies;

@group(0) @binding(4) var x_MainLightCookieTexture : texture_2d<f32>;

@group(0) @binding(12) var sampler_MainLightCookieTexture : sampler;

@group(0) @binding(0) var unity_SpecCube0 : texture_cube<f32>;

@group(0) @binding(8) var samplerunity_SpecCube0 : sampler;

@group(1) @binding(1) var<uniform> x_3870 : AdditionalLights;

@group(1) @binding(5) var<uniform> x_3980 : AdditionalLightsCookies;

@group(0) @binding(5) var x_AdditionalLightsCookieAtlasTexture : texture_2d<f32>;

@group(0) @binding(13) var sampler_AdditionalLightsCookieAtlasTexture : sampler;

var<private> SV_Target0 : vec4<f32>;

fn int_bitfieldInsert_i1_i1_i1_i1_(base : ptr<function, i32>, insert : ptr<function, i32>, offset_1 : ptr<function, i32>, bits : ptr<function, i32>) -> i32 {
  var mask : u32;
  let x_19 : i32 = *(bits);
  let x_23 : i32 = *(offset_1);
  mask = (~((4294967295u << bitcast<u32>(x_19))) << bitcast<u32>(x_23));
  let x_26 : i32 = *(base);
  let x_28 : u32 = mask;
  let x_31 : i32 = *(insert);
  let x_33 : i32 = *(offset_1);
  let x_36 : u32 = mask;
  return bitcast<i32>(((bitcast<u32>(x_26) & ~(x_28)) | ((bitcast<u32>(x_31) << bitcast<u32>(x_33)) & x_36)));
}

fn main_1() {
  var hlslcc_FragCoord : vec4<f32>;
  var u_xlat0 : vec3<f32>;
  var u_xlatb66 : bool;
  var u_xlat1 : vec3<f32>;
  var u_xlat67 : f32;
  var u_xlat2 : vec3<f32>;
  var x_118 : f32;
  var x_132 : f32;
  var x_145 : f32;
  var u_xlat66 : f32;
  var u_xlat3 : vec4<f32>;
  var u_xlat4 : vec3<f32>;
  var u_xlat5 : vec4<f32>;
  var u_xlat6 : vec4<f32>;
  var u_xlat27 : vec3<f32>;
  var u_xlat7 : vec4<f32>;
  var u_xlat8 : vec4<f32>;
  var u_xlat9 : vec4<f32>;
  var u_xlatb6 : vec4<bool>;
  var u_xlatu66 : u32;
  var u_xlati66 : i32;
  var u_xlatb67 : bool;
  var txVec0 : vec3<f32>;
  var txVec1 : vec3<f32>;
  var txVec2 : vec3<f32>;
  var txVec3 : vec3<f32>;
  var u_xlatb68 : bool;
  var u_xlat51 : vec2<f32>;
  var u_xlat53 : vec2<f32>;
  var u_xlat10 : vec4<f32>;
  var u_xlat11 : vec4<f32>;
  var u_xlat12 : vec4<f32>;
  var u_xlat13 : vec4<f32>;
  var u_xlat14 : vec4<f32>;
  var u_xlat15 : vec4<f32>;
  var u_xlat68 : f32;
  var txVec4 : vec3<f32>;
  var u_xlat70 : f32;
  var txVec5 : vec3<f32>;
  var u_xlat72 : f32;
  var txVec6 : vec3<f32>;
  var txVec7 : vec3<f32>;
  var txVec8 : vec3<f32>;
  var txVec9 : vec3<f32>;
  var txVec10 : vec3<f32>;
  var txVec11 : vec3<f32>;
  var txVec12 : vec3<f32>;
  var u_xlat30 : vec3<f32>;
  var u_xlat16 : vec4<f32>;
  var u_xlat17 : vec4<f32>;
  var u_xlat31 : vec2<f32>;
  var u_xlat59 : vec2<f32>;
  var u_xlat54 : vec2<f32>;
  var u_xlat18 : vec4<f32>;
  var u_xlat19 : vec4<f32>;
  var u_xlat20 : vec4<f32>;
  var txVec13 : vec3<f32>;
  var txVec14 : vec3<f32>;
  var txVec15 : vec3<f32>;
  var txVec16 : vec3<f32>;
  var txVec17 : vec3<f32>;
  var txVec18 : vec3<f32>;
  var txVec19 : vec3<f32>;
  var txVec20 : vec3<f32>;
  var txVec21 : vec3<f32>;
  var txVec22 : vec3<f32>;
  var txVec23 : vec3<f32>;
  var txVec24 : vec3<f32>;
  var txVec25 : vec3<f32>;
  var txVec26 : vec3<f32>;
  var txVec27 : vec3<f32>;
  var txVec28 : vec3<f32>;
  var txVec29 : vec3<f32>;
  var u_xlatb70 : bool;
  var u_xlatb72 : bool;
  var x_1726 : f32;
  var u_xlatb3 : bool;
  var u_xlatu1 : vec3<u32>;
  var u_xlatu45 : u32;
  var u_xlatu25 : u32;
  var u_xlati45 : i32;
  var u_xlati23 : i32;
  var u_xlatu23 : u32;
  var u_xlati1 : i32;
  var param : i32;
  var param_1 : i32;
  var param_2 : i32;
  var param_3 : i32;
  var u_xlat23 : f32;
  var x_1858 : f32;
  var u_xlatb45 : vec2<bool>;
  var u_xlat45 : vec2<f32>;
  var u_xlatb23 : bool;
  var x_1930 : f32;
  var u_xlat69 : f32;
  var u_xlat29 : f32;
  var txVec30 : vec3<f32>;
  var txVec31 : vec3<f32>;
  var txVec32 : vec3<f32>;
  var txVec33 : vec3<f32>;
  var u_xlatb51 : vec2<bool>;
  var u_xlat52 : vec2<f32>;
  var txVec34 : vec3<f32>;
  var u_xlat73 : f32;
  var txVec35 : vec3<f32>;
  var txVec36 : vec3<f32>;
  var txVec37 : vec3<f32>;
  var txVec38 : vec3<f32>;
  var txVec39 : vec3<f32>;
  var txVec40 : vec3<f32>;
  var txVec41 : vec3<f32>;
  var txVec42 : vec3<f32>;
  var u_xlat58 : vec2<f32>;
  var u_xlat55 : vec2<f32>;
  var u_xlat21 : vec4<f32>;
  var txVec43 : vec3<f32>;
  var txVec44 : vec3<f32>;
  var u_xlat75 : f32;
  var txVec45 : vec3<f32>;
  var txVec46 : vec3<f32>;
  var txVec47 : vec3<f32>;
  var txVec48 : vec3<f32>;
  var txVec49 : vec3<f32>;
  var txVec50 : vec3<f32>;
  var txVec51 : vec3<f32>;
  var txVec52 : vec3<f32>;
  var txVec53 : vec3<f32>;
  var txVec54 : vec3<f32>;
  var txVec55 : vec3<f32>;
  var txVec56 : vec3<f32>;
  var txVec57 : vec3<f32>;
  var txVec58 : vec3<f32>;
  var txVec59 : vec3<f32>;
  var x_3504 : f32;
  var x_3515 : vec3<f32>;
  var u_xlatu_loop_1 : u32;
  var u_xlatu68 : u32;
  var u_xlati70 : i32;
  var indexable : array<vec4<u32>, 4u>;
  var u_xlat71 : f32;
  var u_xlat74 : f32;
  var u_xlatu74 : u32;
  var u_xlati75 : i32;
  var u_xlati74 : i32;
  var u_xlati76 : i32;
  var u_xlatb74 : bool;
  var u_xlatb55 : vec2<bool>;
  var x_4272 : f32;
  var x_4285 : f32;
  var x_4337 : f32;
  var x_4348 : vec3<f32>;
  var x_4503 : f32;
  var u_xlat_precise_vec4 : vec4<f32>;
  var u_xlat_precise_ivec4 : vec4<i32>;
  var u_xlat_precise_bvec4 : vec4<bool>;
  var u_xlat_precise_uvec4 : vec4<u32>;
  let x_49 : vec4<f32> = gl_FragCoord;
  let x_50 : vec3<f32> = vec3<f32>(x_49.x, x_49.y, x_49.z);
  let x_55 : f32 = gl_FragCoord.w;
  hlslcc_FragCoord = vec4<f32>(x_50.x, x_50.y, x_50.z, (1.0f / x_55));
  let x_65 : vec3<f32> = vs_INTERP1;
  let x_66 : vec3<f32> = vs_INTERP1;
  u_xlat0.x = dot(x_65, x_66);
  let x_72 : f32 = u_xlat0.x;
  u_xlat0.x = sqrt(x_72);
  let x_76 : f32 = u_xlat0.x;
  u_xlat0.x = (1.0f / x_76);
  let x_79 : vec3<f32> = u_xlat0;
  let x_81 : vec3<f32> = vs_INTERP1;
  u_xlat0 = (vec3<f32>(x_79.x, x_79.x, x_79.x) * x_81);
  let x_94 : f32 = x_90.unity_OrthoParams.w;
  u_xlatb66 = (x_94 == 0.0f);
  let x_99 : vec3<f32> = vs_INTERP0;
  let x_104 : vec3<f32> = x_90.x_WorldSpaceCameraPos;
  u_xlat1 = (-(x_99) + x_104);
  let x_107 : vec3<f32> = u_xlat1;
  let x_108 : vec3<f32> = u_xlat1;
  u_xlat67 = dot(x_107, x_108);
  let x_110 : f32 = u_xlat67;
  u_xlat67 = inverseSqrt(x_110);
  let x_112 : f32 = u_xlat67;
  let x_114 : vec3<f32> = u_xlat1;
  u_xlat1 = (vec3<f32>(x_112, x_112, x_112) * x_114);
  let x_117 : bool = u_xlatb66;
  if (x_117) {
    let x_122 : f32 = u_xlat1.x;
    x_118 = x_122;
  } else {
    let x_128 : f32 = x_90.unity_MatrixV[0i].z;
    x_118 = x_128;
  }
  let x_129 : f32 = x_118;
  u_xlat2.x = x_129;
  let x_131 : bool = u_xlatb66;
  if (x_131) {
    let x_137 : f32 = u_xlat1.y;
    x_132 = x_137;
  } else {
    let x_141 : f32 = x_90.unity_MatrixV[1i].z;
    x_132 = x_141;
  }
  let x_142 : f32 = x_132;
  u_xlat2.y = x_142;
  let x_144 : bool = u_xlatb66;
  if (x_144) {
    let x_149 : f32 = u_xlat1.z;
    x_145 = x_149;
  } else {
    let x_153 : f32 = x_90.unity_MatrixV[2i].z;
    x_145 = x_153;
  }
  let x_154 : f32 = x_145;
  u_xlat2.z = x_154;
  let x_156 : vec3<f32> = u_xlat2;
  let x_164 : vec4<f32> = x_161.unity_WorldToObject[1i];
  u_xlat1 = (vec3<f32>(x_156.y, x_156.y, x_156.y) * vec3<f32>(x_164.x, x_164.y, x_164.z));
  let x_168 : vec4<f32> = x_161.unity_WorldToObject[0i];
  let x_170 : vec3<f32> = u_xlat2;
  let x_173 : vec3<f32> = u_xlat1;
  u_xlat1 = ((vec3<f32>(x_168.x, x_168.y, x_168.z) * vec3<f32>(x_170.x, x_170.x, x_170.x)) + x_173);
  let x_176 : vec4<f32> = x_161.unity_WorldToObject[2i];
  let x_178 : vec3<f32> = u_xlat2;
  let x_181 : vec3<f32> = u_xlat1;
  u_xlat1 = ((vec3<f32>(x_176.x, x_176.y, x_176.z) * vec3<f32>(x_178.z, x_178.z, x_178.z)) + x_181);
  let x_184 : vec3<f32> = u_xlat1;
  let x_185 : vec3<f32> = u_xlat1;
  u_xlat66 = dot(x_184, x_185);
  let x_187 : f32 = u_xlat66;
  u_xlat66 = inverseSqrt(x_187);
  let x_189 : f32 = u_xlat66;
  let x_191 : vec3<f32> = u_xlat1;
  u_xlat1 = (vec3<f32>(x_189, x_189, x_189) * x_191);
  let x_205 : vec4<f32> = vs_INTERP3;
  let x_208 : f32 = x_90.x_GlobalMipBias.x;
  let x_209 : vec4<f32> = textureSampleBias(Texture2D_B222E8F, samplerTexture2D_B222E8F, vec2<f32>(x_205.x, x_205.y), x_208);
  u_xlat3 = x_209;
  let x_211 : vec4<f32> = u_xlat3;
  let x_217 : vec4<f32> = x_215.Color_C30C7CA3;
  u_xlat4 = (vec3<f32>(x_211.x, x_211.y, x_211.z) * vec3<f32>(x_217.x, x_217.y, x_217.z));
  let x_226 : vec4<f32> = vs_INTERP3;
  let x_229 : f32 = x_90.x_GlobalMipBias.x;
  let x_230 : vec4<f32> = textureSampleBias(Texture2D_D9BFD5F1, samplerTexture2D_D9BFD5F1, vec2<f32>(x_226.x, x_226.y), x_229);
  u_xlat5 = vec4<f32>(x_230.w, x_230.x, x_230.y, x_230.z);
  let x_233 : vec4<f32> = u_xlat5;
  u_xlat6 = ((vec4<f32>(x_233.y, x_233.z, x_233.w, x_233.x) * vec4<f32>(2.0f, 2.0f, 2.0f, 2.0f)) + vec4<f32>(-1.0f, -1.0f, -1.0f, -1.0f));
  let x_241 : vec4<f32> = u_xlat6;
  let x_242 : vec4<f32> = u_xlat6;
  u_xlat66 = dot(x_241, x_242);
  let x_244 : f32 = u_xlat66;
  u_xlat66 = inverseSqrt(x_244);
  let x_247 : f32 = u_xlat66;
  let x_249 : vec4<f32> = u_xlat6;
  u_xlat27 = (vec3<f32>(x_247, x_247, x_247) * vec3<f32>(x_249.x, x_249.y, x_249.z));
  let x_254 : f32 = vs_INTERP4.y;
  u_xlat66 = (x_254 * 200.0f);
  let x_257 : f32 = u_xlat66;
  u_xlat66 = min(x_257, 1.0f);
  let x_259 : f32 = u_xlat66;
  let x_261 : vec4<f32> = u_xlat3;
  let x_263 : vec3<f32> = (vec3<f32>(x_259, x_259, x_259) * vec3<f32>(x_261.x, x_261.y, x_261.z));
  let x_264 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_263.x, x_263.y, x_263.z, x_264.w);
  let x_266 : vec3<f32> = vs_INTERP0;
  let x_273 : vec4<f32> = x_271.x_CascadeShadowSplitSpheres0;
  let x_276 : vec3<f32> = (x_266 + -(vec3<f32>(x_273.x, x_273.y, x_273.z)));
  let x_277 : vec4<f32> = u_xlat6;
  u_xlat6 = vec4<f32>(x_276.x, x_276.y, x_276.z, x_277.w);
  let x_280 : vec3<f32> = vs_INTERP0;
  let x_282 : vec4<f32> = x_271.x_CascadeShadowSplitSpheres1;
  let x_285 : vec3<f32> = (x_280 + -(vec3<f32>(x_282.x, x_282.y, x_282.z)));
  let x_286 : vec4<f32> = u_xlat7;
  u_xlat7 = vec4<f32>(x_285.x, x_285.y, x_285.z, x_286.w);
  let x_289 : vec3<f32> = vs_INTERP0;
  let x_292 : vec4<f32> = x_271.x_CascadeShadowSplitSpheres2;
  let x_295 : vec3<f32> = (x_289 + -(vec3<f32>(x_292.x, x_292.y, x_292.z)));
  let x_296 : vec4<f32> = u_xlat8;
  u_xlat8 = vec4<f32>(x_295.x, x_295.y, x_295.z, x_296.w);
  let x_299 : vec3<f32> = vs_INTERP0;
  let x_302 : vec4<f32> = x_271.x_CascadeShadowSplitSpheres3;
  let x_305 : vec3<f32> = (x_299 + -(vec3<f32>(x_302.x, x_302.y, x_302.z)));
  let x_306 : vec4<f32> = u_xlat9;
  u_xlat9 = vec4<f32>(x_305.x, x_305.y, x_305.z, x_306.w);
  let x_308 : vec4<f32> = u_xlat6;
  let x_310 : vec4<f32> = u_xlat6;
  u_xlat6.x = dot(vec3<f32>(x_308.x, x_308.y, x_308.z), vec3<f32>(x_310.x, x_310.y, x_310.z));
  let x_314 : vec4<f32> = u_xlat7;
  let x_316 : vec4<f32> = u_xlat7;
  u_xlat6.y = dot(vec3<f32>(x_314.x, x_314.y, x_314.z), vec3<f32>(x_316.x, x_316.y, x_316.z));
  let x_320 : vec4<f32> = u_xlat8;
  let x_322 : vec4<f32> = u_xlat8;
  u_xlat6.z = dot(vec3<f32>(x_320.x, x_320.y, x_320.z), vec3<f32>(x_322.x, x_322.y, x_322.z));
  let x_326 : vec4<f32> = u_xlat9;
  let x_328 : vec4<f32> = u_xlat9;
  u_xlat6.w = dot(vec3<f32>(x_326.x, x_326.y, x_326.z), vec3<f32>(x_328.x, x_328.y, x_328.z));
  let x_335 : vec4<f32> = u_xlat6;
  let x_338 : vec4<f32> = x_271.x_CascadeShadowSplitSphereRadii;
  u_xlatb6 = (x_335 < x_338);
  let x_341 : bool = u_xlatb6.x;
  u_xlat7.x = select(0.0f, 1.0f, x_341);
  let x_345 : bool = u_xlatb6.y;
  u_xlat7.y = select(0.0f, 1.0f, x_345);
  let x_349 : bool = u_xlatb6.z;
  u_xlat7.z = select(0.0f, 1.0f, x_349);
  let x_353 : bool = u_xlatb6.w;
  u_xlat7.w = select(0.0f, 1.0f, x_353);
  let x_357 : bool = u_xlatb6.x;
  u_xlat6.x = select(-0.0f, -1.0f, x_357);
  let x_362 : bool = u_xlatb6.y;
  u_xlat6.y = select(-0.0f, -1.0f, x_362);
  let x_366 : bool = u_xlatb6.z;
  u_xlat6.z = select(-0.0f, -1.0f, x_366);
  let x_369 : vec4<f32> = u_xlat6;
  let x_371 : vec4<f32> = u_xlat7;
  let x_373 : vec3<f32> = (vec3<f32>(x_369.x, x_369.y, x_369.z) + vec3<f32>(x_371.y, x_371.z, x_371.w));
  let x_374 : vec4<f32> = u_xlat6;
  u_xlat6 = vec4<f32>(x_373.x, x_373.y, x_373.z, x_374.w);
  let x_376 : vec4<f32> = u_xlat6;
  let x_379 : vec3<f32> = max(vec3<f32>(x_376.x, x_376.y, x_376.z), vec3<f32>(0.0f, 0.0f, 0.0f));
  let x_380 : vec4<f32> = u_xlat7;
  u_xlat7 = vec4<f32>(x_380.x, x_379.x, x_379.y, x_379.z);
  let x_382 : vec4<f32> = u_xlat7;
  u_xlat66 = dot(x_382, vec4<f32>(4.0f, 3.0f, 2.0f, 1.0f));
  let x_387 : f32 = u_xlat66;
  u_xlat66 = (-(x_387) + 4.0f);
  let x_391 : f32 = u_xlat66;
  u_xlatu66 = u32(x_391);
  let x_394 : u32 = u_xlatu66;
  u_xlati66 = (bitcast<i32>(x_394) << bitcast<u32>(2i));
  let x_397 : vec3<f32> = vs_INTERP0;
  let x_399 : i32 = u_xlati66;
  let x_402 : i32 = u_xlati66;
  let x_406 : vec4<f32> = x_271.x_MainLightWorldToShadow[((x_399 + 1i) / 4i)][((x_402 + 1i) % 4i)];
  let x_408 : vec3<f32> = (vec3<f32>(x_397.y, x_397.y, x_397.y) * vec3<f32>(x_406.x, x_406.y, x_406.z));
  let x_409 : vec4<f32> = u_xlat6;
  u_xlat6 = vec4<f32>(x_408.x, x_408.y, x_408.z, x_409.w);
  let x_411 : i32 = u_xlati66;
  let x_413 : i32 = u_xlati66;
  let x_416 : vec4<f32> = x_271.x_MainLightWorldToShadow[(x_411 / 4i)][(x_413 % 4i)];
  let x_418 : vec3<f32> = vs_INTERP0;
  let x_421 : vec4<f32> = u_xlat6;
  let x_423 : vec3<f32> = ((vec3<f32>(x_416.x, x_416.y, x_416.z) * vec3<f32>(x_418.x, x_418.x, x_418.x)) + vec3<f32>(x_421.x, x_421.y, x_421.z));
  let x_424 : vec4<f32> = u_xlat6;
  u_xlat6 = vec4<f32>(x_423.x, x_423.y, x_423.z, x_424.w);
  let x_426 : i32 = u_xlati66;
  let x_429 : i32 = u_xlati66;
  let x_433 : vec4<f32> = x_271.x_MainLightWorldToShadow[((x_426 + 2i) / 4i)][((x_429 + 2i) % 4i)];
  let x_435 : vec3<f32> = vs_INTERP0;
  let x_438 : vec4<f32> = u_xlat6;
  let x_440 : vec3<f32> = ((vec3<f32>(x_433.x, x_433.y, x_433.z) * vec3<f32>(x_435.z, x_435.z, x_435.z)) + vec3<f32>(x_438.x, x_438.y, x_438.z));
  let x_441 : vec4<f32> = u_xlat6;
  u_xlat6 = vec4<f32>(x_440.x, x_440.y, x_440.z, x_441.w);
  let x_443 : vec4<f32> = u_xlat6;
  let x_445 : i32 = u_xlati66;
  let x_448 : i32 = u_xlati66;
  let x_452 : vec4<f32> = x_271.x_MainLightWorldToShadow[((x_445 + 3i) / 4i)][((x_448 + 3i) % 4i)];
  let x_454 : vec3<f32> = (vec3<f32>(x_443.x, x_443.y, x_443.z) + vec3<f32>(x_452.x, x_452.y, x_452.z));
  let x_455 : vec4<f32> = u_xlat6;
  u_xlat6 = vec4<f32>(x_454.x, x_454.y, x_454.z, x_455.w);
  let x_459 : f32 = x_271.x_MainLightShadowParams.y;
  u_xlatb66 = (0.0f < x_459);
  let x_461 : bool = u_xlatb66;
  if (x_461) {
    let x_466 : f32 = x_271.x_MainLightShadowParams.y;
    u_xlatb67 = (x_466 == 1.0f);
    let x_468 : bool = u_xlatb67;
    if (x_468) {
      let x_471 : vec4<f32> = u_xlat6;
      let x_475 : vec4<f32> = x_271.x_MainLightShadowOffset0;
      u_xlat7 = (vec4<f32>(x_471.x, x_471.y, x_471.x, x_471.y) + x_475);
      let x_478 : vec4<f32> = u_xlat7;
      let x_479 : vec2<f32> = vec2<f32>(x_478.x, x_478.y);
      let x_481 : f32 = u_xlat6.z;
      txVec0 = vec3<f32>(x_479.x, x_479.y, x_481);
      let x_493 : vec3<f32> = txVec0;
      let x_495 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_493.xy, x_493.z);
      u_xlat8.x = x_495;
      let x_498 : vec4<f32> = u_xlat7;
      let x_499 : vec2<f32> = vec2<f32>(x_498.z, x_498.w);
      let x_501 : f32 = u_xlat6.z;
      txVec1 = vec3<f32>(x_499.x, x_499.y, x_501);
      let x_508 : vec3<f32> = txVec1;
      let x_510 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_508.xy, x_508.z);
      u_xlat8.y = x_510;
      let x_512 : vec4<f32> = u_xlat6;
      let x_515 : vec4<f32> = x_271.x_MainLightShadowOffset1;
      u_xlat7 = (vec4<f32>(x_512.x, x_512.y, x_512.x, x_512.y) + x_515);
      let x_518 : vec4<f32> = u_xlat7;
      let x_519 : vec2<f32> = vec2<f32>(x_518.x, x_518.y);
      let x_521 : f32 = u_xlat6.z;
      txVec2 = vec3<f32>(x_519.x, x_519.y, x_521);
      let x_528 : vec3<f32> = txVec2;
      let x_530 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_528.xy, x_528.z);
      u_xlat8.z = x_530;
      let x_533 : vec4<f32> = u_xlat7;
      let x_534 : vec2<f32> = vec2<f32>(x_533.z, x_533.w);
      let x_536 : f32 = u_xlat6.z;
      txVec3 = vec3<f32>(x_534.x, x_534.y, x_536);
      let x_543 : vec3<f32> = txVec3;
      let x_545 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_543.xy, x_543.z);
      u_xlat8.w = x_545;
      let x_547 : vec4<f32> = u_xlat8;
      u_xlat67 = dot(x_547, vec4<f32>(0.25f, 0.25f, 0.25f, 0.25f));
    } else {
      let x_554 : f32 = x_271.x_MainLightShadowParams.y;
      u_xlatb68 = (x_554 == 2.0f);
      let x_556 : bool = u_xlatb68;
      if (x_556) {
        let x_559 : vec4<f32> = u_xlat6;
        let x_562 : vec4<f32> = x_271.x_MainLightShadowmapSize;
        let x_567 : vec2<f32> = ((vec2<f32>(x_559.x, x_559.y) * vec2<f32>(x_562.z, x_562.w)) + vec2<f32>(0.5f, 0.5f));
        let x_568 : vec4<f32> = u_xlat7;
        u_xlat7 = vec4<f32>(x_567.x, x_567.y, x_568.z, x_568.w);
        let x_570 : vec4<f32> = u_xlat7;
        let x_572 : vec2<f32> = floor(vec2<f32>(x_570.x, x_570.y));
        let x_573 : vec4<f32> = u_xlat7;
        u_xlat7 = vec4<f32>(x_572.x, x_572.y, x_573.z, x_573.w);
        let x_577 : vec4<f32> = u_xlat6;
        let x_580 : vec4<f32> = x_271.x_MainLightShadowmapSize;
        let x_583 : vec4<f32> = u_xlat7;
        u_xlat51 = ((vec2<f32>(x_577.x, x_577.y) * vec2<f32>(x_580.z, x_580.w)) + -(vec2<f32>(x_583.x, x_583.y)));
        let x_587 : vec2<f32> = u_xlat51;
        u_xlat8 = (vec4<f32>(x_587.x, x_587.x, x_587.y, x_587.y) + vec4<f32>(0.5f, 1.0f, 0.5f, 1.0f));
        let x_591 : vec4<f32> = u_xlat8;
        let x_593 : vec4<f32> = u_xlat8;
        u_xlat9 = (vec4<f32>(x_591.x, x_591.x, x_591.z, x_591.z) * vec4<f32>(x_593.x, x_593.x, x_593.z, x_593.z));
        let x_596 : vec4<f32> = u_xlat9;
        let x_600 : vec2<f32> = (vec2<f32>(x_596.y, x_596.w) * vec2<f32>(0.079999998f, 0.079999998f));
        let x_601 : vec4<f32> = u_xlat8;
        u_xlat8 = vec4<f32>(x_600.x, x_601.y, x_600.y, x_601.w);
        let x_603 : vec4<f32> = u_xlat9;
        let x_606 : vec2<f32> = u_xlat51;
        let x_608 : vec2<f32> = ((vec2<f32>(x_603.x, x_603.z) * vec2<f32>(0.5f, 0.5f)) + -(x_606));
        let x_609 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_608.x, x_608.y, x_609.z, x_609.w);
        let x_612 : vec2<f32> = u_xlat51;
        u_xlat53 = (-(x_612) + vec2<f32>(1.0f, 1.0f));
        let x_617 : vec2<f32> = u_xlat51;
        let x_619 : vec2<f32> = min(x_617, vec2<f32>(0.0f, 0.0f));
        let x_620 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_619.x, x_619.y, x_620.z, x_620.w);
        let x_622 : vec4<f32> = u_xlat10;
        let x_625 : vec4<f32> = u_xlat10;
        let x_628 : vec2<f32> = u_xlat53;
        let x_629 : vec2<f32> = ((-(vec2<f32>(x_622.x, x_622.y)) * vec2<f32>(x_625.x, x_625.y)) + x_628);
        let x_630 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_629.x, x_629.y, x_630.z, x_630.w);
        let x_632 : vec2<f32> = u_xlat51;
        u_xlat51 = max(x_632, vec2<f32>(0.0f, 0.0f));
        let x_634 : vec2<f32> = u_xlat51;
        let x_636 : vec2<f32> = u_xlat51;
        let x_638 : vec4<f32> = u_xlat8;
        u_xlat51 = ((-(x_634) * x_636) + vec2<f32>(x_638.y, x_638.w));
        let x_641 : vec4<f32> = u_xlat10;
        let x_643 : vec2<f32> = (vec2<f32>(x_641.x, x_641.y) + vec2<f32>(1.0f, 1.0f));
        let x_644 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_643.x, x_643.y, x_644.z, x_644.w);
        let x_646 : vec2<f32> = u_xlat51;
        u_xlat51 = (x_646 + vec2<f32>(1.0f, 1.0f));
        let x_649 : vec4<f32> = u_xlat9;
        let x_653 : vec2<f32> = (vec2<f32>(x_649.x, x_649.y) * vec2<f32>(0.159999996f, 0.159999996f));
        let x_654 : vec4<f32> = u_xlat11;
        u_xlat11 = vec4<f32>(x_653.x, x_653.y, x_654.z, x_654.w);
        let x_656 : vec2<f32> = u_xlat53;
        let x_657 : vec2<f32> = (x_656 * vec2<f32>(0.159999996f, 0.159999996f));
        let x_658 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_657.x, x_657.y, x_658.z, x_658.w);
        let x_660 : vec4<f32> = u_xlat10;
        let x_662 : vec2<f32> = (vec2<f32>(x_660.x, x_660.y) * vec2<f32>(0.159999996f, 0.159999996f));
        let x_663 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_662.x, x_662.y, x_663.z, x_663.w);
        let x_666 : vec2<f32> = u_xlat51;
        let x_667 : vec2<f32> = (x_666 * vec2<f32>(0.159999996f, 0.159999996f));
        let x_668 : vec4<f32> = u_xlat12;
        u_xlat12 = vec4<f32>(x_667.x, x_667.y, x_668.z, x_668.w);
        let x_670 : vec4<f32> = u_xlat8;
        u_xlat51 = (vec2<f32>(x_670.y, x_670.w) * vec2<f32>(0.159999996f, 0.159999996f));
        let x_674 : f32 = u_xlat10.x;
        u_xlat11.z = x_674;
        let x_677 : f32 = u_xlat51.x;
        u_xlat11.w = x_677;
        let x_680 : f32 = u_xlat12.x;
        u_xlat9.z = x_680;
        let x_683 : f32 = u_xlat8.x;
        u_xlat9.w = x_683;
        let x_686 : vec4<f32> = u_xlat9;
        let x_688 : vec4<f32> = u_xlat11;
        u_xlat13 = (vec4<f32>(x_686.z, x_686.w, x_686.x, x_686.z) + vec4<f32>(x_688.z, x_688.w, x_688.x, x_688.z));
        let x_692 : f32 = u_xlat11.y;
        u_xlat10.z = x_692;
        let x_695 : f32 = u_xlat51.y;
        u_xlat10.w = x_695;
        let x_698 : f32 = u_xlat9.y;
        u_xlat12.z = x_698;
        let x_701 : f32 = u_xlat8.z;
        u_xlat12.w = x_701;
        let x_703 : vec4<f32> = u_xlat10;
        let x_705 : vec4<f32> = u_xlat12;
        let x_707 : vec3<f32> = (vec3<f32>(x_703.z, x_703.y, x_703.w) + vec3<f32>(x_705.z, x_705.y, x_705.w));
        let x_708 : vec4<f32> = u_xlat8;
        u_xlat8 = vec4<f32>(x_707.x, x_707.y, x_707.z, x_708.w);
        let x_710 : vec4<f32> = u_xlat9;
        let x_712 : vec4<f32> = u_xlat13;
        let x_714 : vec3<f32> = (vec3<f32>(x_710.x, x_710.z, x_710.w) / vec3<f32>(x_712.z, x_712.w, x_712.y));
        let x_715 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_714.x, x_714.y, x_714.z, x_715.w);
        let x_717 : vec4<f32> = u_xlat9;
        let x_723 : vec3<f32> = (vec3<f32>(x_717.x, x_717.y, x_717.z) + vec3<f32>(-2.5f, -0.5f, 1.5f));
        let x_724 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_723.x, x_723.y, x_723.z, x_724.w);
        let x_726 : vec4<f32> = u_xlat12;
        let x_728 : vec4<f32> = u_xlat8;
        let x_730 : vec3<f32> = (vec3<f32>(x_726.z, x_726.y, x_726.w) / vec3<f32>(x_728.x, x_728.y, x_728.z));
        let x_731 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_730.x, x_730.y, x_730.z, x_731.w);
        let x_733 : vec4<f32> = u_xlat10;
        let x_735 : vec3<f32> = (vec3<f32>(x_733.x, x_733.y, x_733.z) + vec3<f32>(-2.5f, -0.5f, 1.5f));
        let x_736 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_735.x, x_735.y, x_735.z, x_736.w);
        let x_738 : vec4<f32> = u_xlat9;
        let x_741 : vec4<f32> = x_271.x_MainLightShadowmapSize;
        let x_743 : vec3<f32> = (vec3<f32>(x_738.y, x_738.x, x_738.z) * vec3<f32>(x_741.x, x_741.x, x_741.x));
        let x_744 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_743.x, x_743.y, x_743.z, x_744.w);
        let x_746 : vec4<f32> = u_xlat10;
        let x_749 : vec4<f32> = x_271.x_MainLightShadowmapSize;
        let x_751 : vec3<f32> = (vec3<f32>(x_746.x, x_746.y, x_746.z) * vec3<f32>(x_749.y, x_749.y, x_749.y));
        let x_752 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_751.x, x_751.y, x_751.z, x_752.w);
        let x_755 : f32 = u_xlat10.x;
        u_xlat9.w = x_755;
        let x_757 : vec4<f32> = u_xlat7;
        let x_760 : vec4<f32> = x_271.x_MainLightShadowmapSize;
        let x_763 : vec4<f32> = u_xlat9;
        u_xlat11 = ((vec4<f32>(x_757.x, x_757.y, x_757.x, x_757.y) * vec4<f32>(x_760.x, x_760.y, x_760.x, x_760.y)) + vec4<f32>(x_763.y, x_763.w, x_763.x, x_763.w));
        let x_766 : vec4<f32> = u_xlat7;
        let x_769 : vec4<f32> = x_271.x_MainLightShadowmapSize;
        let x_772 : vec4<f32> = u_xlat9;
        u_xlat51 = ((vec2<f32>(x_766.x, x_766.y) * vec2<f32>(x_769.x, x_769.y)) + vec2<f32>(x_772.z, x_772.w));
        let x_776 : f32 = u_xlat9.y;
        u_xlat10.w = x_776;
        let x_778 : vec4<f32> = u_xlat10;
        let x_779 : vec2<f32> = vec2<f32>(x_778.y, x_778.z);
        let x_780 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_780.x, x_779.x, x_780.z, x_779.y);
        let x_782 : vec4<f32> = u_xlat7;
        let x_785 : vec4<f32> = x_271.x_MainLightShadowmapSize;
        let x_788 : vec4<f32> = u_xlat9;
        u_xlat12 = ((vec4<f32>(x_782.x, x_782.y, x_782.x, x_782.y) * vec4<f32>(x_785.x, x_785.y, x_785.x, x_785.y)) + vec4<f32>(x_788.x, x_788.y, x_788.z, x_788.y));
        let x_791 : vec4<f32> = u_xlat7;
        let x_794 : vec4<f32> = x_271.x_MainLightShadowmapSize;
        let x_797 : vec4<f32> = u_xlat10;
        u_xlat10 = ((vec4<f32>(x_791.x, x_791.y, x_791.x, x_791.y) * vec4<f32>(x_794.x, x_794.y, x_794.x, x_794.y)) + vec4<f32>(x_797.w, x_797.y, x_797.w, x_797.z));
        let x_800 : vec4<f32> = u_xlat7;
        let x_803 : vec4<f32> = x_271.x_MainLightShadowmapSize;
        let x_806 : vec4<f32> = u_xlat9;
        u_xlat9 = ((vec4<f32>(x_800.x, x_800.y, x_800.x, x_800.y) * vec4<f32>(x_803.x, x_803.y, x_803.x, x_803.y)) + vec4<f32>(x_806.x, x_806.w, x_806.z, x_806.w));
        let x_810 : vec4<f32> = u_xlat8;
        let x_812 : vec4<f32> = u_xlat13;
        u_xlat14 = (vec4<f32>(x_810.x, x_810.x, x_810.x, x_810.y) * vec4<f32>(x_812.z, x_812.w, x_812.y, x_812.z));
        let x_816 : vec4<f32> = u_xlat8;
        let x_818 : vec4<f32> = u_xlat13;
        u_xlat15 = (vec4<f32>(x_816.y, x_816.y, x_816.z, x_816.z) * x_818);
        let x_822 : f32 = u_xlat8.z;
        let x_824 : f32 = u_xlat13.y;
        u_xlat68 = (x_822 * x_824);
        let x_827 : vec4<f32> = u_xlat11;
        let x_828 : vec2<f32> = vec2<f32>(x_827.x, x_827.y);
        let x_830 : f32 = u_xlat6.z;
        txVec4 = vec3<f32>(x_828.x, x_828.y, x_830);
        let x_838 : vec3<f32> = txVec4;
        let x_840 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_838.xy, x_838.z);
        u_xlat70 = x_840;
        let x_842 : vec4<f32> = u_xlat11;
        let x_843 : vec2<f32> = vec2<f32>(x_842.z, x_842.w);
        let x_845 : f32 = u_xlat6.z;
        txVec5 = vec3<f32>(x_843.x, x_843.y, x_845);
        let x_853 : vec3<f32> = txVec5;
        let x_855 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_853.xy, x_853.z);
        u_xlat72 = x_855;
        let x_856 : f32 = u_xlat72;
        let x_858 : f32 = u_xlat14.y;
        u_xlat72 = (x_856 * x_858);
        let x_861 : f32 = u_xlat14.x;
        let x_862 : f32 = u_xlat70;
        let x_864 : f32 = u_xlat72;
        u_xlat70 = ((x_861 * x_862) + x_864);
        let x_867 : vec2<f32> = u_xlat51;
        let x_869 : f32 = u_xlat6.z;
        txVec6 = vec3<f32>(x_867.x, x_867.y, x_869);
        let x_876 : vec3<f32> = txVec6;
        let x_878 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_876.xy, x_876.z);
        u_xlat72 = x_878;
        let x_880 : f32 = u_xlat14.z;
        let x_881 : f32 = u_xlat72;
        let x_883 : f32 = u_xlat70;
        u_xlat70 = ((x_880 * x_881) + x_883);
        let x_886 : vec4<f32> = u_xlat10;
        let x_887 : vec2<f32> = vec2<f32>(x_886.x, x_886.y);
        let x_889 : f32 = u_xlat6.z;
        txVec7 = vec3<f32>(x_887.x, x_887.y, x_889);
        let x_896 : vec3<f32> = txVec7;
        let x_898 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_896.xy, x_896.z);
        u_xlat72 = x_898;
        let x_900 : f32 = u_xlat14.w;
        let x_901 : f32 = u_xlat72;
        let x_903 : f32 = u_xlat70;
        u_xlat70 = ((x_900 * x_901) + x_903);
        let x_906 : vec4<f32> = u_xlat12;
        let x_907 : vec2<f32> = vec2<f32>(x_906.x, x_906.y);
        let x_909 : f32 = u_xlat6.z;
        txVec8 = vec3<f32>(x_907.x, x_907.y, x_909);
        let x_916 : vec3<f32> = txVec8;
        let x_918 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_916.xy, x_916.z);
        u_xlat72 = x_918;
        let x_920 : f32 = u_xlat15.x;
        let x_921 : f32 = u_xlat72;
        let x_923 : f32 = u_xlat70;
        u_xlat70 = ((x_920 * x_921) + x_923);
        let x_926 : vec4<f32> = u_xlat12;
        let x_927 : vec2<f32> = vec2<f32>(x_926.z, x_926.w);
        let x_929 : f32 = u_xlat6.z;
        txVec9 = vec3<f32>(x_927.x, x_927.y, x_929);
        let x_936 : vec3<f32> = txVec9;
        let x_938 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_936.xy, x_936.z);
        u_xlat72 = x_938;
        let x_940 : f32 = u_xlat15.y;
        let x_941 : f32 = u_xlat72;
        let x_943 : f32 = u_xlat70;
        u_xlat70 = ((x_940 * x_941) + x_943);
        let x_946 : vec4<f32> = u_xlat10;
        let x_947 : vec2<f32> = vec2<f32>(x_946.z, x_946.w);
        let x_949 : f32 = u_xlat6.z;
        txVec10 = vec3<f32>(x_947.x, x_947.y, x_949);
        let x_956 : vec3<f32> = txVec10;
        let x_958 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_956.xy, x_956.z);
        u_xlat72 = x_958;
        let x_960 : f32 = u_xlat15.z;
        let x_961 : f32 = u_xlat72;
        let x_963 : f32 = u_xlat70;
        u_xlat70 = ((x_960 * x_961) + x_963);
        let x_966 : vec4<f32> = u_xlat9;
        let x_967 : vec2<f32> = vec2<f32>(x_966.x, x_966.y);
        let x_969 : f32 = u_xlat6.z;
        txVec11 = vec3<f32>(x_967.x, x_967.y, x_969);
        let x_976 : vec3<f32> = txVec11;
        let x_978 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_976.xy, x_976.z);
        u_xlat72 = x_978;
        let x_980 : f32 = u_xlat15.w;
        let x_981 : f32 = u_xlat72;
        let x_983 : f32 = u_xlat70;
        u_xlat70 = ((x_980 * x_981) + x_983);
        let x_986 : vec4<f32> = u_xlat9;
        let x_987 : vec2<f32> = vec2<f32>(x_986.z, x_986.w);
        let x_989 : f32 = u_xlat6.z;
        txVec12 = vec3<f32>(x_987.x, x_987.y, x_989);
        let x_996 : vec3<f32> = txVec12;
        let x_998 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_996.xy, x_996.z);
        u_xlat72 = x_998;
        let x_999 : f32 = u_xlat68;
        let x_1000 : f32 = u_xlat72;
        let x_1002 : f32 = u_xlat70;
        u_xlat67 = ((x_999 * x_1000) + x_1002);
      } else {
        let x_1005 : vec4<f32> = u_xlat6;
        let x_1008 : vec4<f32> = x_271.x_MainLightShadowmapSize;
        let x_1011 : vec2<f32> = ((vec2<f32>(x_1005.x, x_1005.y) * vec2<f32>(x_1008.z, x_1008.w)) + vec2<f32>(0.5f, 0.5f));
        let x_1012 : vec4<f32> = u_xlat7;
        u_xlat7 = vec4<f32>(x_1011.x, x_1011.y, x_1012.z, x_1012.w);
        let x_1014 : vec4<f32> = u_xlat7;
        let x_1016 : vec2<f32> = floor(vec2<f32>(x_1014.x, x_1014.y));
        let x_1017 : vec4<f32> = u_xlat7;
        u_xlat7 = vec4<f32>(x_1016.x, x_1016.y, x_1017.z, x_1017.w);
        let x_1019 : vec4<f32> = u_xlat6;
        let x_1022 : vec4<f32> = x_271.x_MainLightShadowmapSize;
        let x_1025 : vec4<f32> = u_xlat7;
        u_xlat51 = ((vec2<f32>(x_1019.x, x_1019.y) * vec2<f32>(x_1022.z, x_1022.w)) + -(vec2<f32>(x_1025.x, x_1025.y)));
        let x_1029 : vec2<f32> = u_xlat51;
        u_xlat8 = (vec4<f32>(x_1029.x, x_1029.x, x_1029.y, x_1029.y) + vec4<f32>(0.5f, 1.0f, 0.5f, 1.0f));
        let x_1032 : vec4<f32> = u_xlat8;
        let x_1034 : vec4<f32> = u_xlat8;
        u_xlat9 = (vec4<f32>(x_1032.x, x_1032.x, x_1032.z, x_1032.z) * vec4<f32>(x_1034.x, x_1034.x, x_1034.z, x_1034.z));
        let x_1037 : vec4<f32> = u_xlat9;
        let x_1041 : vec2<f32> = (vec2<f32>(x_1037.y, x_1037.w) * vec2<f32>(0.040816002f, 0.040816002f));
        let x_1042 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_1042.x, x_1041.x, x_1042.z, x_1041.y);
        let x_1044 : vec4<f32> = u_xlat9;
        let x_1047 : vec2<f32> = u_xlat51;
        let x_1049 : vec2<f32> = ((vec2<f32>(x_1044.x, x_1044.z) * vec2<f32>(0.5f, 0.5f)) + -(x_1047));
        let x_1050 : vec4<f32> = u_xlat8;
        u_xlat8 = vec4<f32>(x_1049.x, x_1050.y, x_1049.y, x_1050.w);
        let x_1052 : vec2<f32> = u_xlat51;
        let x_1054 : vec2<f32> = (-(x_1052) + vec2<f32>(1.0f, 1.0f));
        let x_1055 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_1054.x, x_1054.y, x_1055.z, x_1055.w);
        let x_1057 : vec2<f32> = u_xlat51;
        u_xlat53 = min(x_1057, vec2<f32>(0.0f, 0.0f));
        let x_1059 : vec2<f32> = u_xlat53;
        let x_1061 : vec2<f32> = u_xlat53;
        let x_1063 : vec4<f32> = u_xlat9;
        let x_1065 : vec2<f32> = ((-(x_1059) * x_1061) + vec2<f32>(x_1063.x, x_1063.y));
        let x_1066 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_1065.x, x_1065.y, x_1066.z, x_1066.w);
        let x_1068 : vec2<f32> = u_xlat51;
        u_xlat53 = max(x_1068, vec2<f32>(0.0f, 0.0f));
        let x_1071 : vec2<f32> = u_xlat53;
        let x_1073 : vec2<f32> = u_xlat53;
        let x_1075 : vec4<f32> = u_xlat8;
        let x_1077 : vec2<f32> = ((-(x_1071) * x_1073) + vec2<f32>(x_1075.y, x_1075.w));
        let x_1078 : vec3<f32> = u_xlat30;
        u_xlat30 = vec3<f32>(x_1077.x, x_1078.y, x_1077.y);
        let x_1080 : vec4<f32> = u_xlat9;
        let x_1083 : vec2<f32> = (vec2<f32>(x_1080.x, x_1080.y) + vec2<f32>(2.0f, 2.0f));
        let x_1084 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_1083.x, x_1083.y, x_1084.z, x_1084.w);
        let x_1086 : vec3<f32> = u_xlat30;
        let x_1088 : vec2<f32> = (vec2<f32>(x_1086.x, x_1086.z) + vec2<f32>(2.0f, 2.0f));
        let x_1089 : vec4<f32> = u_xlat8;
        u_xlat8 = vec4<f32>(x_1089.x, x_1088.x, x_1089.z, x_1088.y);
        let x_1092 : f32 = u_xlat8.y;
        u_xlat11.z = (x_1092 * 0.081632003f);
        let x_1096 : vec4<f32> = u_xlat8;
        let x_1099 : vec3<f32> = (vec3<f32>(x_1096.z, x_1096.x, x_1096.w) * vec3<f32>(0.081632003f, 0.081632003f, 0.081632003f));
        let x_1100 : vec4<f32> = u_xlat12;
        u_xlat12 = vec4<f32>(x_1099.x, x_1099.y, x_1099.z, x_1100.w);
        let x_1102 : vec4<f32> = u_xlat9;
        let x_1105 : vec2<f32> = (vec2<f32>(x_1102.x, x_1102.y) * vec2<f32>(0.081632003f, 0.081632003f));
        let x_1106 : vec4<f32> = u_xlat8;
        u_xlat8 = vec4<f32>(x_1105.x, x_1105.y, x_1106.z, x_1106.w);
        let x_1109 : f32 = u_xlat12.y;
        u_xlat11.x = x_1109;
        let x_1111 : vec2<f32> = u_xlat51;
        let x_1118 : vec2<f32> = ((vec2<f32>(x_1111.x, x_1111.x) * vec2<f32>(-0.081632003f, 0.081632003f)) + vec2<f32>(0.163264006f, 0.081632003f));
        let x_1119 : vec4<f32> = u_xlat11;
        u_xlat11 = vec4<f32>(x_1119.x, x_1118.x, x_1119.z, x_1118.y);
        let x_1121 : vec2<f32> = u_xlat51;
        let x_1125 : vec2<f32> = ((vec2<f32>(x_1121.x, x_1121.x) * vec2<f32>(-0.081632003f, 0.081632003f)) + vec2<f32>(0.081632003f, 0.163264006f));
        let x_1126 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_1125.x, x_1126.y, x_1125.y, x_1126.w);
        let x_1129 : f32 = u_xlat8.x;
        u_xlat9.y = x_1129;
        let x_1132 : f32 = u_xlat10.y;
        u_xlat9.w = x_1132;
        let x_1134 : vec4<f32> = u_xlat9;
        let x_1135 : vec4<f32> = u_xlat11;
        u_xlat11 = (x_1134 + x_1135);
        let x_1137 : vec2<f32> = u_xlat51;
        let x_1140 : vec2<f32> = ((vec2<f32>(x_1137.y, x_1137.y) * vec2<f32>(-0.081632003f, 0.081632003f)) + vec2<f32>(0.163264006f, 0.081632003f));
        let x_1141 : vec4<f32> = u_xlat12;
        u_xlat12 = vec4<f32>(x_1141.x, x_1140.x, x_1141.z, x_1140.y);
        let x_1143 : vec2<f32> = u_xlat51;
        let x_1146 : vec2<f32> = ((vec2<f32>(x_1143.y, x_1143.y) * vec2<f32>(-0.081632003f, 0.081632003f)) + vec2<f32>(0.081632003f, 0.163264006f));
        let x_1147 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_1146.x, x_1147.y, x_1146.y, x_1147.w);
        let x_1150 : f32 = u_xlat8.y;
        u_xlat10.y = x_1150;
        let x_1152 : vec4<f32> = u_xlat10;
        let x_1153 : vec4<f32> = u_xlat12;
        u_xlat8 = (x_1152 + x_1153);
        let x_1155 : vec4<f32> = u_xlat9;
        let x_1156 : vec4<f32> = u_xlat11;
        u_xlat9 = (x_1155 / x_1156);
        let x_1158 : vec4<f32> = u_xlat9;
        u_xlat9 = (x_1158 + vec4<f32>(-3.5f, -1.5f, 0.5f, 2.5f));
        let x_1164 : vec4<f32> = u_xlat10;
        let x_1165 : vec4<f32> = u_xlat8;
        u_xlat10 = (x_1164 / x_1165);
        let x_1167 : vec4<f32> = u_xlat10;
        u_xlat10 = (x_1167 + vec4<f32>(-3.5f, -1.5f, 0.5f, 2.5f));
        let x_1169 : vec4<f32> = u_xlat9;
        let x_1172 : vec4<f32> = x_271.x_MainLightShadowmapSize;
        u_xlat9 = (vec4<f32>(x_1169.w, x_1169.x, x_1169.y, x_1169.z) * vec4<f32>(x_1172.x, x_1172.x, x_1172.x, x_1172.x));
        let x_1175 : vec4<f32> = u_xlat10;
        let x_1178 : vec4<f32> = x_271.x_MainLightShadowmapSize;
        u_xlat10 = (vec4<f32>(x_1175.x, x_1175.w, x_1175.y, x_1175.z) * vec4<f32>(x_1178.y, x_1178.y, x_1178.y, x_1178.y));
        let x_1181 : vec4<f32> = u_xlat9;
        let x_1182 : vec3<f32> = vec3<f32>(x_1181.y, x_1181.z, x_1181.w);
        let x_1183 : vec4<f32> = u_xlat12;
        u_xlat12 = vec4<f32>(x_1182.x, x_1183.y, x_1182.y, x_1182.z);
        let x_1186 : f32 = u_xlat10.x;
        u_xlat12.y = x_1186;
        let x_1188 : vec4<f32> = u_xlat7;
        let x_1191 : vec4<f32> = x_271.x_MainLightShadowmapSize;
        let x_1194 : vec4<f32> = u_xlat12;
        u_xlat13 = ((vec4<f32>(x_1188.x, x_1188.y, x_1188.x, x_1188.y) * vec4<f32>(x_1191.x, x_1191.y, x_1191.x, x_1191.y)) + vec4<f32>(x_1194.x, x_1194.y, x_1194.z, x_1194.y));
        let x_1197 : vec4<f32> = u_xlat7;
        let x_1200 : vec4<f32> = x_271.x_MainLightShadowmapSize;
        let x_1203 : vec4<f32> = u_xlat12;
        u_xlat51 = ((vec2<f32>(x_1197.x, x_1197.y) * vec2<f32>(x_1200.x, x_1200.y)) + vec2<f32>(x_1203.w, x_1203.y));
        let x_1207 : f32 = u_xlat12.y;
        u_xlat9.y = x_1207;
        let x_1210 : f32 = u_xlat10.z;
        u_xlat12.y = x_1210;
        let x_1212 : vec4<f32> = u_xlat7;
        let x_1215 : vec4<f32> = x_271.x_MainLightShadowmapSize;
        let x_1218 : vec4<f32> = u_xlat12;
        u_xlat14 = ((vec4<f32>(x_1212.x, x_1212.y, x_1212.x, x_1212.y) * vec4<f32>(x_1215.x, x_1215.y, x_1215.x, x_1215.y)) + vec4<f32>(x_1218.x, x_1218.y, x_1218.z, x_1218.y));
        let x_1221 : vec4<f32> = u_xlat7;
        let x_1224 : vec4<f32> = x_271.x_MainLightShadowmapSize;
        let x_1227 : vec4<f32> = u_xlat12;
        let x_1229 : vec2<f32> = ((vec2<f32>(x_1221.x, x_1221.y) * vec2<f32>(x_1224.x, x_1224.y)) + vec2<f32>(x_1227.w, x_1227.y));
        let x_1230 : vec4<f32> = u_xlat15;
        u_xlat15 = vec4<f32>(x_1229.x, x_1229.y, x_1230.z, x_1230.w);
        let x_1233 : f32 = u_xlat12.y;
        u_xlat9.z = x_1233;
        let x_1236 : vec4<f32> = u_xlat7;
        let x_1239 : vec4<f32> = x_271.x_MainLightShadowmapSize;
        let x_1242 : vec4<f32> = u_xlat9;
        u_xlat16 = ((vec4<f32>(x_1236.x, x_1236.y, x_1236.x, x_1236.y) * vec4<f32>(x_1239.x, x_1239.y, x_1239.x, x_1239.y)) + vec4<f32>(x_1242.x, x_1242.y, x_1242.x, x_1242.z));
        let x_1246 : f32 = u_xlat10.w;
        u_xlat12.y = x_1246;
        let x_1249 : vec4<f32> = u_xlat7;
        let x_1252 : vec4<f32> = x_271.x_MainLightShadowmapSize;
        let x_1255 : vec4<f32> = u_xlat12;
        u_xlat17 = ((vec4<f32>(x_1249.x, x_1249.y, x_1249.x, x_1249.y) * vec4<f32>(x_1252.x, x_1252.y, x_1252.x, x_1252.y)) + vec4<f32>(x_1255.x, x_1255.y, x_1255.z, x_1255.y));
        let x_1259 : vec4<f32> = u_xlat7;
        let x_1262 : vec4<f32> = x_271.x_MainLightShadowmapSize;
        let x_1265 : vec4<f32> = u_xlat12;
        u_xlat31 = ((vec2<f32>(x_1259.x, x_1259.y) * vec2<f32>(x_1262.x, x_1262.y)) + vec2<f32>(x_1265.w, x_1265.y));
        let x_1269 : f32 = u_xlat12.y;
        u_xlat9.w = x_1269;
        let x_1272 : vec4<f32> = u_xlat7;
        let x_1275 : vec4<f32> = x_271.x_MainLightShadowmapSize;
        let x_1278 : vec4<f32> = u_xlat9;
        u_xlat59 = ((vec2<f32>(x_1272.x, x_1272.y) * vec2<f32>(x_1275.x, x_1275.y)) + vec2<f32>(x_1278.x, x_1278.w));
        let x_1281 : vec4<f32> = u_xlat12;
        let x_1282 : vec3<f32> = vec3<f32>(x_1281.x, x_1281.z, x_1281.w);
        let x_1283 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_1282.x, x_1283.y, x_1282.y, x_1282.z);
        let x_1285 : vec4<f32> = u_xlat7;
        let x_1288 : vec4<f32> = x_271.x_MainLightShadowmapSize;
        let x_1291 : vec4<f32> = u_xlat10;
        u_xlat12 = ((vec4<f32>(x_1285.x, x_1285.y, x_1285.x, x_1285.y) * vec4<f32>(x_1288.x, x_1288.y, x_1288.x, x_1288.y)) + vec4<f32>(x_1291.x, x_1291.y, x_1291.z, x_1291.y));
        let x_1295 : vec4<f32> = u_xlat7;
        let x_1298 : vec4<f32> = x_271.x_MainLightShadowmapSize;
        let x_1301 : vec4<f32> = u_xlat10;
        u_xlat54 = ((vec2<f32>(x_1295.x, x_1295.y) * vec2<f32>(x_1298.x, x_1298.y)) + vec2<f32>(x_1301.w, x_1301.y));
        let x_1305 : f32 = u_xlat9.x;
        u_xlat10.x = x_1305;
        let x_1307 : vec4<f32> = u_xlat7;
        let x_1310 : vec4<f32> = x_271.x_MainLightShadowmapSize;
        let x_1313 : vec4<f32> = u_xlat10;
        let x_1315 : vec2<f32> = ((vec2<f32>(x_1307.x, x_1307.y) * vec2<f32>(x_1310.x, x_1310.y)) + vec2<f32>(x_1313.x, x_1313.y));
        let x_1316 : vec4<f32> = u_xlat7;
        u_xlat7 = vec4<f32>(x_1315.x, x_1315.y, x_1316.z, x_1316.w);
        let x_1319 : vec4<f32> = u_xlat8;
        let x_1321 : vec4<f32> = u_xlat11;
        u_xlat18 = (vec4<f32>(x_1319.x, x_1319.x, x_1319.x, x_1319.x) * x_1321);
        let x_1324 : vec4<f32> = u_xlat8;
        let x_1326 : vec4<f32> = u_xlat11;
        u_xlat19 = (vec4<f32>(x_1324.y, x_1324.y, x_1324.y, x_1324.y) * x_1326);
        let x_1329 : vec4<f32> = u_xlat8;
        let x_1331 : vec4<f32> = u_xlat11;
        u_xlat20 = (vec4<f32>(x_1329.z, x_1329.z, x_1329.z, x_1329.z) * x_1331);
        let x_1333 : vec4<f32> = u_xlat8;
        let x_1335 : vec4<f32> = u_xlat11;
        u_xlat8 = (vec4<f32>(x_1333.w, x_1333.w, x_1333.w, x_1333.w) * x_1335);
        let x_1338 : vec4<f32> = u_xlat13;
        let x_1339 : vec2<f32> = vec2<f32>(x_1338.x, x_1338.y);
        let x_1341 : f32 = u_xlat6.z;
        txVec13 = vec3<f32>(x_1339.x, x_1339.y, x_1341);
        let x_1348 : vec3<f32> = txVec13;
        let x_1350 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1348.xy, x_1348.z);
        u_xlat68 = x_1350;
        let x_1352 : vec4<f32> = u_xlat13;
        let x_1353 : vec2<f32> = vec2<f32>(x_1352.z, x_1352.w);
        let x_1355 : f32 = u_xlat6.z;
        txVec14 = vec3<f32>(x_1353.x, x_1353.y, x_1355);
        let x_1362 : vec3<f32> = txVec14;
        let x_1364 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1362.xy, x_1362.z);
        u_xlat70 = x_1364;
        let x_1365 : f32 = u_xlat70;
        let x_1367 : f32 = u_xlat18.y;
        u_xlat70 = (x_1365 * x_1367);
        let x_1370 : f32 = u_xlat18.x;
        let x_1371 : f32 = u_xlat68;
        let x_1373 : f32 = u_xlat70;
        u_xlat68 = ((x_1370 * x_1371) + x_1373);
        let x_1376 : vec2<f32> = u_xlat51;
        let x_1378 : f32 = u_xlat6.z;
        txVec15 = vec3<f32>(x_1376.x, x_1376.y, x_1378);
        let x_1385 : vec3<f32> = txVec15;
        let x_1387 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1385.xy, x_1385.z);
        u_xlat70 = x_1387;
        let x_1389 : f32 = u_xlat18.z;
        let x_1390 : f32 = u_xlat70;
        let x_1392 : f32 = u_xlat68;
        u_xlat68 = ((x_1389 * x_1390) + x_1392);
        let x_1395 : vec4<f32> = u_xlat16;
        let x_1396 : vec2<f32> = vec2<f32>(x_1395.x, x_1395.y);
        let x_1398 : f32 = u_xlat6.z;
        txVec16 = vec3<f32>(x_1396.x, x_1396.y, x_1398);
        let x_1405 : vec3<f32> = txVec16;
        let x_1407 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1405.xy, x_1405.z);
        u_xlat70 = x_1407;
        let x_1409 : f32 = u_xlat18.w;
        let x_1410 : f32 = u_xlat70;
        let x_1412 : f32 = u_xlat68;
        u_xlat68 = ((x_1409 * x_1410) + x_1412);
        let x_1415 : vec4<f32> = u_xlat14;
        let x_1416 : vec2<f32> = vec2<f32>(x_1415.x, x_1415.y);
        let x_1418 : f32 = u_xlat6.z;
        txVec17 = vec3<f32>(x_1416.x, x_1416.y, x_1418);
        let x_1425 : vec3<f32> = txVec17;
        let x_1427 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1425.xy, x_1425.z);
        u_xlat70 = x_1427;
        let x_1429 : f32 = u_xlat19.x;
        let x_1430 : f32 = u_xlat70;
        let x_1432 : f32 = u_xlat68;
        u_xlat68 = ((x_1429 * x_1430) + x_1432);
        let x_1435 : vec4<f32> = u_xlat14;
        let x_1436 : vec2<f32> = vec2<f32>(x_1435.z, x_1435.w);
        let x_1438 : f32 = u_xlat6.z;
        txVec18 = vec3<f32>(x_1436.x, x_1436.y, x_1438);
        let x_1445 : vec3<f32> = txVec18;
        let x_1447 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1445.xy, x_1445.z);
        u_xlat70 = x_1447;
        let x_1449 : f32 = u_xlat19.y;
        let x_1450 : f32 = u_xlat70;
        let x_1452 : f32 = u_xlat68;
        u_xlat68 = ((x_1449 * x_1450) + x_1452);
        let x_1455 : vec4<f32> = u_xlat15;
        let x_1456 : vec2<f32> = vec2<f32>(x_1455.x, x_1455.y);
        let x_1458 : f32 = u_xlat6.z;
        txVec19 = vec3<f32>(x_1456.x, x_1456.y, x_1458);
        let x_1465 : vec3<f32> = txVec19;
        let x_1467 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1465.xy, x_1465.z);
        u_xlat70 = x_1467;
        let x_1469 : f32 = u_xlat19.z;
        let x_1470 : f32 = u_xlat70;
        let x_1472 : f32 = u_xlat68;
        u_xlat68 = ((x_1469 * x_1470) + x_1472);
        let x_1475 : vec4<f32> = u_xlat16;
        let x_1476 : vec2<f32> = vec2<f32>(x_1475.z, x_1475.w);
        let x_1478 : f32 = u_xlat6.z;
        txVec20 = vec3<f32>(x_1476.x, x_1476.y, x_1478);
        let x_1485 : vec3<f32> = txVec20;
        let x_1487 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1485.xy, x_1485.z);
        u_xlat70 = x_1487;
        let x_1489 : f32 = u_xlat19.w;
        let x_1490 : f32 = u_xlat70;
        let x_1492 : f32 = u_xlat68;
        u_xlat68 = ((x_1489 * x_1490) + x_1492);
        let x_1495 : vec4<f32> = u_xlat17;
        let x_1496 : vec2<f32> = vec2<f32>(x_1495.x, x_1495.y);
        let x_1498 : f32 = u_xlat6.z;
        txVec21 = vec3<f32>(x_1496.x, x_1496.y, x_1498);
        let x_1505 : vec3<f32> = txVec21;
        let x_1507 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1505.xy, x_1505.z);
        u_xlat70 = x_1507;
        let x_1509 : f32 = u_xlat20.x;
        let x_1510 : f32 = u_xlat70;
        let x_1512 : f32 = u_xlat68;
        u_xlat68 = ((x_1509 * x_1510) + x_1512);
        let x_1515 : vec4<f32> = u_xlat17;
        let x_1516 : vec2<f32> = vec2<f32>(x_1515.z, x_1515.w);
        let x_1518 : f32 = u_xlat6.z;
        txVec22 = vec3<f32>(x_1516.x, x_1516.y, x_1518);
        let x_1525 : vec3<f32> = txVec22;
        let x_1527 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1525.xy, x_1525.z);
        u_xlat70 = x_1527;
        let x_1529 : f32 = u_xlat20.y;
        let x_1530 : f32 = u_xlat70;
        let x_1532 : f32 = u_xlat68;
        u_xlat68 = ((x_1529 * x_1530) + x_1532);
        let x_1535 : vec2<f32> = u_xlat31;
        let x_1537 : f32 = u_xlat6.z;
        txVec23 = vec3<f32>(x_1535.x, x_1535.y, x_1537);
        let x_1544 : vec3<f32> = txVec23;
        let x_1546 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1544.xy, x_1544.z);
        u_xlat70 = x_1546;
        let x_1548 : f32 = u_xlat20.z;
        let x_1549 : f32 = u_xlat70;
        let x_1551 : f32 = u_xlat68;
        u_xlat68 = ((x_1548 * x_1549) + x_1551);
        let x_1554 : vec2<f32> = u_xlat59;
        let x_1556 : f32 = u_xlat6.z;
        txVec24 = vec3<f32>(x_1554.x, x_1554.y, x_1556);
        let x_1563 : vec3<f32> = txVec24;
        let x_1565 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1563.xy, x_1563.z);
        u_xlat70 = x_1565;
        let x_1567 : f32 = u_xlat20.w;
        let x_1568 : f32 = u_xlat70;
        let x_1570 : f32 = u_xlat68;
        u_xlat68 = ((x_1567 * x_1568) + x_1570);
        let x_1573 : vec4<f32> = u_xlat12;
        let x_1574 : vec2<f32> = vec2<f32>(x_1573.x, x_1573.y);
        let x_1576 : f32 = u_xlat6.z;
        txVec25 = vec3<f32>(x_1574.x, x_1574.y, x_1576);
        let x_1583 : vec3<f32> = txVec25;
        let x_1585 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1583.xy, x_1583.z);
        u_xlat70 = x_1585;
        let x_1587 : f32 = u_xlat8.x;
        let x_1588 : f32 = u_xlat70;
        let x_1590 : f32 = u_xlat68;
        u_xlat68 = ((x_1587 * x_1588) + x_1590);
        let x_1593 : vec4<f32> = u_xlat12;
        let x_1594 : vec2<f32> = vec2<f32>(x_1593.z, x_1593.w);
        let x_1596 : f32 = u_xlat6.z;
        txVec26 = vec3<f32>(x_1594.x, x_1594.y, x_1596);
        let x_1603 : vec3<f32> = txVec26;
        let x_1605 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1603.xy, x_1603.z);
        u_xlat70 = x_1605;
        let x_1607 : f32 = u_xlat8.y;
        let x_1608 : f32 = u_xlat70;
        let x_1610 : f32 = u_xlat68;
        u_xlat68 = ((x_1607 * x_1608) + x_1610);
        let x_1613 : vec2<f32> = u_xlat54;
        let x_1615 : f32 = u_xlat6.z;
        txVec27 = vec3<f32>(x_1613.x, x_1613.y, x_1615);
        let x_1622 : vec3<f32> = txVec27;
        let x_1624 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1622.xy, x_1622.z);
        u_xlat70 = x_1624;
        let x_1626 : f32 = u_xlat8.z;
        let x_1627 : f32 = u_xlat70;
        let x_1629 : f32 = u_xlat68;
        u_xlat68 = ((x_1626 * x_1627) + x_1629);
        let x_1632 : vec4<f32> = u_xlat7;
        let x_1633 : vec2<f32> = vec2<f32>(x_1632.x, x_1632.y);
        let x_1635 : f32 = u_xlat6.z;
        txVec28 = vec3<f32>(x_1633.x, x_1633.y, x_1635);
        let x_1642 : vec3<f32> = txVec28;
        let x_1644 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1642.xy, x_1642.z);
        u_xlat70 = x_1644;
        let x_1646 : f32 = u_xlat8.w;
        let x_1647 : f32 = u_xlat70;
        let x_1649 : f32 = u_xlat68;
        u_xlat67 = ((x_1646 * x_1647) + x_1649);
      }
    }
  } else {
    let x_1653 : vec4<f32> = u_xlat6;
    let x_1654 : vec2<f32> = vec2<f32>(x_1653.x, x_1653.y);
    let x_1656 : f32 = u_xlat6.z;
    txVec29 = vec3<f32>(x_1654.x, x_1654.y, x_1656);
    let x_1663 : vec3<f32> = txVec29;
    let x_1665 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1663.xy, x_1663.z);
    u_xlat67 = x_1665;
  }
  let x_1667 : f32 = x_271.x_MainLightShadowParams.x;
  u_xlat68 = (-(x_1667) + 1.0f);
  let x_1670 : f32 = u_xlat67;
  let x_1672 : f32 = x_271.x_MainLightShadowParams.x;
  let x_1674 : f32 = u_xlat68;
  u_xlat67 = ((x_1670 * x_1672) + x_1674);
  let x_1678 : f32 = u_xlat6.z;
  u_xlatb70 = (0.0f >= x_1678);
  let x_1682 : f32 = u_xlat6.z;
  u_xlatb72 = (x_1682 >= 1.0f);
  let x_1684 : bool = u_xlatb70;
  let x_1685 : bool = u_xlatb72;
  u_xlatb70 = (x_1684 | x_1685);
  let x_1687 : bool = u_xlatb70;
  let x_1688 : f32 = u_xlat67;
  u_xlat67 = select(x_1688, 1.0f, x_1687);
  let x_1690 : vec3<f32> = u_xlat0;
  let x_1692 : vec4<f32> = x_90.x_MainLightPosition;
  u_xlat0.x = dot(x_1690, -(vec3<f32>(x_1692.x, x_1692.y, x_1692.z)));
  let x_1698 : f32 = u_xlat0.x;
  u_xlat0.x = clamp(x_1698, 0.0f, 1.0f);
  let x_1701 : f32 = u_xlat67;
  let x_1704 : vec4<f32> = x_90.x_MainLightColor;
  let x_1706 : vec3<f32> = (vec3<f32>(x_1701, x_1701, x_1701) * vec3<f32>(x_1704.x, x_1704.y, x_1704.z));
  let x_1707 : vec4<f32> = u_xlat7;
  u_xlat7 = vec4<f32>(x_1706.x, x_1706.y, x_1706.z, x_1707.w);
  let x_1709 : vec3<f32> = u_xlat0;
  let x_1711 : vec4<f32> = u_xlat7;
  u_xlat0 = (vec3<f32>(x_1709.x, x_1709.x, x_1709.x) * vec3<f32>(x_1711.x, x_1711.y, x_1711.z));
  let x_1714 : vec3<f32> = u_xlat0;
  let x_1715 : vec4<f32> = u_xlat3;
  u_xlat0 = (x_1714 * vec3<f32>(x_1715.x, x_1715.y, x_1715.z));
  let x_1719 : f32 = x_161.unity_LODFade.x;
  u_xlatb67 = (x_1719 < 0.0f);
  let x_1722 : f32 = x_161.unity_LODFade.x;
  u_xlat3.x = (x_1722 + 1.0f);
  let x_1725 : bool = u_xlatb67;
  if (x_1725) {
    let x_1730 : f32 = u_xlat3.x;
    x_1726 = x_1730;
  } else {
    let x_1733 : f32 = x_161.unity_LODFade.x;
    x_1726 = x_1733;
  }
  let x_1734 : f32 = x_1726;
  u_xlat67 = x_1734;
  let x_1736 : f32 = u_xlat67;
  u_xlatb3 = (0.5f >= x_1736);
  let x_1738 : vec3<f32> = u_xlat1;
  let x_1741 : vec4<f32> = x_90.x_ScreenParams;
  u_xlat1 = (abs(x_1738) * vec3<f32>(x_1741.x, x_1741.y, x_1741.x));
  let x_1747 : vec3<f32> = u_xlat1;
  u_xlatu1 = vec3<u32>(x_1747);
  let x_1751 : u32 = u_xlatu1.z;
  u_xlatu45 = (x_1751 * 1025u);
  let x_1755 : u32 = u_xlatu45;
  u_xlatu25 = (x_1755 >> 6u);
  let x_1759 : u32 = u_xlatu45;
  let x_1760 : u32 = u_xlatu25;
  u_xlati45 = bitcast<i32>((x_1759 ^ x_1760));
  let x_1763 : i32 = u_xlati45;
  u_xlatu45 = (bitcast<u32>(x_1763) * 9u);
  let x_1767 : u32 = u_xlatu45;
  u_xlatu25 = (x_1767 >> 11u);
  let x_1770 : u32 = u_xlatu45;
  let x_1771 : u32 = u_xlatu25;
  u_xlati45 = bitcast<i32>((x_1770 ^ x_1771));
  let x_1774 : i32 = u_xlati45;
  u_xlati45 = (x_1774 * 32769i);
  let x_1778 : i32 = u_xlati45;
  let x_1781 : u32 = u_xlatu1.y;
  u_xlati23 = bitcast<i32>((bitcast<u32>(x_1778) ^ x_1781));
  let x_1785 : i32 = u_xlati23;
  u_xlatu23 = (bitcast<u32>(x_1785) * 1025u);
  let x_1788 : u32 = u_xlatu23;
  u_xlatu45 = (x_1788 >> 6u);
  let x_1790 : u32 = u_xlatu45;
  let x_1791 : u32 = u_xlatu23;
  u_xlati23 = bitcast<i32>((x_1790 ^ x_1791));
  let x_1794 : i32 = u_xlati23;
  u_xlatu23 = (bitcast<u32>(x_1794) * 9u);
  let x_1797 : u32 = u_xlatu23;
  u_xlatu45 = (x_1797 >> 11u);
  let x_1799 : u32 = u_xlatu45;
  let x_1800 : u32 = u_xlatu23;
  u_xlati23 = bitcast<i32>((x_1799 ^ x_1800));
  let x_1803 : i32 = u_xlati23;
  u_xlati23 = (x_1803 * 32769i);
  let x_1806 : i32 = u_xlati23;
  let x_1809 : u32 = u_xlatu1.x;
  u_xlati1 = bitcast<i32>((bitcast<u32>(x_1806) ^ x_1809));
  let x_1812 : i32 = u_xlati1;
  u_xlatu1.x = (bitcast<u32>(x_1812) * 1025u);
  let x_1817 : u32 = u_xlatu1.x;
  u_xlatu23 = (x_1817 >> 6u);
  let x_1819 : u32 = u_xlatu23;
  let x_1821 : u32 = u_xlatu1.x;
  u_xlati1 = bitcast<i32>((x_1819 ^ x_1821));
  let x_1824 : i32 = u_xlati1;
  u_xlatu1.x = (bitcast<u32>(x_1824) * 9u);
  let x_1829 : u32 = u_xlatu1.x;
  u_xlatu23 = (x_1829 >> 11u);
  let x_1831 : u32 = u_xlatu23;
  let x_1833 : u32 = u_xlatu1.x;
  u_xlati1 = bitcast<i32>((x_1831 ^ x_1833));
  let x_1836 : i32 = u_xlati1;
  u_xlati1 = (x_1836 * 32769i);
  param = 1065353216i;
  let x_1842 : i32 = u_xlati1;
  param_1 = x_1842;
  param_2 = 0i;
  param_3 = 23i;
  let x_1845 : i32 = int_bitfieldInsert_i1_i1_i1_i1_(&(param), &(param_1), &(param_2), &(param_3));
  u_xlat1.x = bitcast<f32>(x_1845);
  let x_1849 : f32 = u_xlat1.x;
  u_xlat1.x = (x_1849 + -1.0f);
  let x_1854 : f32 = u_xlat1.x;
  u_xlat23 = (-(x_1854) + 1.0f);
  let x_1857 : bool = u_xlatb3;
  if (x_1857) {
    let x_1862 : f32 = u_xlat1.x;
    x_1858 = x_1862;
  } else {
    let x_1864 : f32 = u_xlat23;
    x_1858 = x_1864;
  }
  let x_1865 : f32 = x_1858;
  u_xlat1.x = x_1865;
  let x_1867 : f32 = u_xlat67;
  let x_1870 : f32 = u_xlat1.x;
  u_xlat1.x = ((x_1867 * 2.0f) + -(x_1870));
  let x_1875 : f32 = u_xlat1.x;
  let x_1877 : f32 = u_xlat3.w;
  u_xlat23 = (x_1875 * x_1877);
  let x_1882 : f32 = u_xlat23;
  u_xlatb45.x = (x_1882 >= 0.400000006f);
  let x_1888 : bool = u_xlatb45.x;
  let x_1889 : f32 = u_xlat23;
  u_xlat45.x = select(0.0f, x_1889, x_1888);
  let x_1893 : f32 = u_xlat3.w;
  let x_1895 : f32 = u_xlat1.x;
  u_xlat1.x = ((x_1893 * x_1895) + -0.400000006f);
  let x_1900 : f32 = u_xlat23;
  u_xlat67 = dpdxCoarse(x_1900);
  let x_1902 : f32 = u_xlat23;
  u_xlat23 = dpdyCoarse(x_1902);
  let x_1904 : f32 = u_xlat23;
  let x_1906 : f32 = u_xlat67;
  u_xlat23 = (abs(x_1904) + abs(x_1906));
  let x_1909 : f32 = u_xlat23;
  u_xlat23 = max(x_1909, 0.0001f);
  let x_1913 : f32 = u_xlat1.x;
  let x_1914 : f32 = u_xlat23;
  u_xlat1.x = (x_1913 / x_1914);
  let x_1918 : f32 = u_xlat1.x;
  u_xlat1.x = (x_1918 + 0.5f);
  let x_1922 : f32 = u_xlat1.x;
  u_xlat1.x = clamp(x_1922, 0.0f, 1.0f);
  let x_1927 : f32 = x_90.x_AlphaToMaskAvailable;
  u_xlatb23 = !((x_1927 == 0.0f));
  let x_1929 : bool = u_xlatb23;
  if (x_1929) {
    let x_1934 : f32 = u_xlat1.x;
    x_1930 = x_1934;
  } else {
    let x_1937 : f32 = u_xlat45.x;
    x_1930 = x_1937;
  }
  let x_1938 : f32 = x_1930;
  u_xlat1.x = x_1938;
  let x_1941 : f32 = u_xlat1.x;
  u_xlat45.x = (x_1941 + -0.0001f);
  let x_1946 : f32 = u_xlat45.x;
  u_xlatb45.x = (x_1946 < 0.0f);
  let x_1950 : bool = u_xlatb45.x;
  if (((select(0i, 1i, x_1950) * -1i) != 0i)) {
    discard;
  }
  let x_1960 : f32 = vs_INTERP2.w;
  u_xlatb45.x = (0.0f < x_1960);
  let x_1964 : f32 = x_161.unity_WorldTransformParams.w;
  u_xlatb45.y = (x_1964 >= 0.0f);
  let x_1968 : bool = u_xlatb45.x;
  u_xlat45.x = select(-1.0f, 1.0f, x_1968);
  let x_1972 : bool = u_xlatb45.y;
  u_xlat45.y = select(-1.0f, 1.0f, x_1972);
  let x_1976 : f32 = u_xlat45.y;
  let x_1978 : f32 = u_xlat45.x;
  u_xlat45.x = (x_1976 * x_1978);
  let x_1981 : vec3<f32> = vs_INTERP1;
  let x_1983 : vec4<f32> = vs_INTERP2;
  let x_1985 : vec3<f32> = (vec3<f32>(x_1981.z, x_1981.x, x_1981.y) * vec3<f32>(x_1983.y, x_1983.z, x_1983.x));
  let x_1986 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_1985.x, x_1985.y, x_1985.z, x_1986.w);
  let x_1988 : vec3<f32> = vs_INTERP1;
  let x_1990 : vec4<f32> = vs_INTERP2;
  let x_1993 : vec4<f32> = u_xlat3;
  let x_1996 : vec3<f32> = ((vec3<f32>(x_1988.y, x_1988.z, x_1988.x) * vec3<f32>(x_1990.z, x_1990.x, x_1990.y)) + -(vec3<f32>(x_1993.x, x_1993.y, x_1993.z)));
  let x_1997 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_1996.x, x_1996.y, x_1996.z, x_1997.w);
  let x_1999 : vec2<f32> = u_xlat45;
  let x_2001 : vec4<f32> = u_xlat3;
  let x_2003 : vec3<f32> = (vec3<f32>(x_1999.x, x_1999.x, x_1999.x) * vec3<f32>(x_2001.x, x_2001.y, x_2001.z));
  let x_2004 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_2003.x, x_2003.y, x_2003.z, x_2004.w);
  let x_2006 : vec4<f32> = u_xlat3;
  let x_2008 : vec3<f32> = u_xlat27;
  let x_2010 : vec3<f32> = (vec3<f32>(x_2006.x, x_2006.y, x_2006.z) * vec3<f32>(x_2008.y, x_2008.y, x_2008.y));
  let x_2011 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_2010.x, x_2010.y, x_2010.z, x_2011.w);
  let x_2013 : vec3<f32> = u_xlat27;
  let x_2015 : vec4<f32> = vs_INTERP2;
  let x_2018 : vec4<f32> = u_xlat3;
  let x_2020 : vec3<f32> = ((vec3<f32>(x_2013.x, x_2013.x, x_2013.x) * vec3<f32>(x_2015.x, x_2015.y, x_2015.z)) + vec3<f32>(x_2018.x, x_2018.y, x_2018.z));
  let x_2021 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_2020.x, x_2020.y, x_2020.z, x_2021.w);
  let x_2023 : vec3<f32> = u_xlat27;
  let x_2025 : vec3<f32> = vs_INTERP1;
  let x_2027 : vec4<f32> = u_xlat3;
  let x_2029 : vec3<f32> = ((vec3<f32>(x_2023.z, x_2023.z, x_2023.z) * x_2025) + vec3<f32>(x_2027.x, x_2027.y, x_2027.z));
  let x_2030 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_2029.x, x_2029.y, x_2029.z, x_2030.w);
  let x_2032 : vec4<f32> = u_xlat3;
  let x_2034 : vec4<f32> = u_xlat3;
  u_xlat45.x = dot(vec3<f32>(x_2032.x, x_2032.y, x_2032.z), vec3<f32>(x_2034.x, x_2034.y, x_2034.z));
  let x_2039 : f32 = u_xlat45.x;
  u_xlat45.x = inverseSqrt(x_2039);
  let x_2042 : vec2<f32> = u_xlat45;
  let x_2044 : vec4<f32> = u_xlat3;
  let x_2046 : vec3<f32> = (vec3<f32>(x_2042.x, x_2042.x, x_2042.x) * vec3<f32>(x_2044.x, x_2044.y, x_2044.z));
  let x_2047 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_2046.x, x_2046.y, x_2046.z, x_2047.w);
  let x_2056 : vec2<f32> = vs_INTERP5;
  let x_2058 : f32 = x_90.x_GlobalMipBias.x;
  let x_2059 : vec4<f32> = textureSampleBias(unity_Lightmap, samplerunity_Lightmap, x_2056, x_2058);
  u_xlat27 = vec3<f32>(x_2059.x, x_2059.y, x_2059.z);
  let x_2062 : vec4<f32> = x_90.x_ScaledScreenParams;
  let x_2063 : vec2<f32> = vec2<f32>(x_2062.x, x_2062.y);
  u_xlat45 = (vec2<f32>(1.0f, 1.0f) / vec2<f32>(x_2063.x, x_2063.y));
  let x_2068 : vec2<f32> = u_xlat45;
  let x_2069 : vec4<f32> = hlslcc_FragCoord;
  let x_2071 : vec2<f32> = (x_2068 * vec2<f32>(x_2069.x, x_2069.y));
  let x_2072 : vec4<f32> = u_xlat7;
  u_xlat7 = vec4<f32>(x_2071.x, x_2071.y, x_2072.z, x_2072.w);
  let x_2075 : f32 = u_xlat7.y;
  let x_2078 : f32 = x_90.x_ScaleBiasRt.x;
  let x_2081 : f32 = x_90.x_ScaleBiasRt.y;
  u_xlat45.x = ((x_2075 * x_2078) + x_2081);
  let x_2085 : f32 = u_xlat45.x;
  u_xlat7.z = (-(x_2085) + 1.0f);
  let x_2090 : f32 = u_xlat5.x;
  u_xlat5.x = x_2090;
  let x_2093 : f32 = u_xlat5.x;
  u_xlat5.x = clamp(x_2093, 0.0f, 1.0f);
  let x_2097 : f32 = u_xlat1.x;
  u_xlat1.x = x_2097;
  let x_2100 : f32 = u_xlat1.x;
  u_xlat1.x = clamp(x_2100, 0.0f, 1.0f);
  let x_2103 : vec3<f32> = u_xlat4;
  u_xlat4 = (x_2103 * vec3<f32>(0.959999979f, 0.959999979f, 0.959999979f));
  let x_2108 : f32 = u_xlat5.x;
  u_xlat45.x = (-(x_2108) + 1.0f);
  let x_2113 : f32 = u_xlat45.x;
  let x_2115 : f32 = u_xlat45.x;
  u_xlat67 = (x_2113 * x_2115);
  let x_2117 : f32 = u_xlat67;
  u_xlat67 = max(x_2117, 0.0078125f);
  let x_2121 : f32 = u_xlat67;
  let x_2122 : f32 = u_xlat67;
  u_xlat69 = (x_2121 * x_2122);
  let x_2125 : f32 = u_xlat5.x;
  u_xlat5.x = (x_2125 + 0.040000021f);
  let x_2130 : f32 = u_xlat5.x;
  u_xlat5.x = min(x_2130, 1.0f);
  let x_2133 : f32 = u_xlat67;
  u_xlat72 = ((x_2133 * 4.0f) + 2.0f);
  let x_2141 : vec4<f32> = u_xlat7;
  let x_2144 : f32 = x_90.x_GlobalMipBias.x;
  let x_2145 : vec4<f32> = textureSampleBias(x_ScreenSpaceOcclusionTexture, sampler_ScreenSpaceOcclusionTexture, vec2<f32>(x_2141.x, x_2141.z), x_2144);
  u_xlat7.x = x_2145.x;
  let x_2150 : f32 = u_xlat7.x;
  u_xlat29 = (x_2150 + -1.0f);
  let x_2153 : f32 = x_90.x_AmbientOcclusionParam.w;
  let x_2154 : f32 = u_xlat29;
  u_xlat29 = ((x_2153 * x_2154) + 1.0f);
  let x_2158 : f32 = u_xlat7.x;
  let x_2160 : f32 = vs_INTERP4.w;
  u_xlat7.x = min(x_2158, x_2160);
  let x_2163 : bool = u_xlatb66;
  if (x_2163) {
    let x_2167 : f32 = x_271.x_MainLightShadowParams.y;
    u_xlatb66 = (x_2167 == 1.0f);
    let x_2169 : bool = u_xlatb66;
    if (x_2169) {
      let x_2172 : vec4<f32> = u_xlat6;
      let x_2175 : vec4<f32> = x_271.x_MainLightShadowOffset0;
      u_xlat8 = (vec4<f32>(x_2172.x, x_2172.y, x_2172.x, x_2172.y) + x_2175);
      let x_2178 : vec4<f32> = u_xlat8;
      let x_2179 : vec2<f32> = vec2<f32>(x_2178.x, x_2178.y);
      let x_2181 : f32 = u_xlat6.z;
      txVec30 = vec3<f32>(x_2179.x, x_2179.y, x_2181);
      let x_2188 : vec3<f32> = txVec30;
      let x_2190 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2188.xy, x_2188.z);
      u_xlat9.x = x_2190;
      let x_2193 : vec4<f32> = u_xlat8;
      let x_2194 : vec2<f32> = vec2<f32>(x_2193.z, x_2193.w);
      let x_2196 : f32 = u_xlat6.z;
      txVec31 = vec3<f32>(x_2194.x, x_2194.y, x_2196);
      let x_2203 : vec3<f32> = txVec31;
      let x_2205 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2203.xy, x_2203.z);
      u_xlat9.y = x_2205;
      let x_2207 : vec4<f32> = u_xlat6;
      let x_2210 : vec4<f32> = x_271.x_MainLightShadowOffset1;
      u_xlat8 = (vec4<f32>(x_2207.x, x_2207.y, x_2207.x, x_2207.y) + x_2210);
      let x_2213 : vec4<f32> = u_xlat8;
      let x_2214 : vec2<f32> = vec2<f32>(x_2213.x, x_2213.y);
      let x_2216 : f32 = u_xlat6.z;
      txVec32 = vec3<f32>(x_2214.x, x_2214.y, x_2216);
      let x_2223 : vec3<f32> = txVec32;
      let x_2225 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2223.xy, x_2223.z);
      u_xlat9.z = x_2225;
      let x_2228 : vec4<f32> = u_xlat8;
      let x_2229 : vec2<f32> = vec2<f32>(x_2228.z, x_2228.w);
      let x_2231 : f32 = u_xlat6.z;
      txVec33 = vec3<f32>(x_2229.x, x_2229.y, x_2231);
      let x_2238 : vec3<f32> = txVec33;
      let x_2240 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2238.xy, x_2238.z);
      u_xlat9.w = x_2240;
      let x_2242 : vec4<f32> = u_xlat9;
      u_xlat66 = dot(x_2242, vec4<f32>(0.25f, 0.25f, 0.25f, 0.25f));
    } else {
      let x_2247 : f32 = x_271.x_MainLightShadowParams.y;
      u_xlatb51.x = (x_2247 == 2.0f);
      let x_2251 : bool = u_xlatb51.x;
      if (x_2251) {
        let x_2254 : vec4<f32> = u_xlat6;
        let x_2257 : vec4<f32> = x_271.x_MainLightShadowmapSize;
        u_xlat51 = ((vec2<f32>(x_2254.x, x_2254.y) * vec2<f32>(x_2257.z, x_2257.w)) + vec2<f32>(0.5f, 0.5f));
        let x_2261 : vec2<f32> = u_xlat51;
        u_xlat51 = floor(x_2261);
        let x_2263 : vec4<f32> = u_xlat6;
        let x_2266 : vec4<f32> = x_271.x_MainLightShadowmapSize;
        let x_2269 : vec2<f32> = u_xlat51;
        let x_2271 : vec2<f32> = ((vec2<f32>(x_2263.x, x_2263.y) * vec2<f32>(x_2266.z, x_2266.w)) + -(x_2269));
        let x_2272 : vec4<f32> = u_xlat8;
        u_xlat8 = vec4<f32>(x_2271.x, x_2271.y, x_2272.z, x_2272.w);
        let x_2274 : vec4<f32> = u_xlat8;
        u_xlat9 = (vec4<f32>(x_2274.x, x_2274.x, x_2274.y, x_2274.y) + vec4<f32>(0.5f, 1.0f, 0.5f, 1.0f));
        let x_2277 : vec4<f32> = u_xlat9;
        let x_2279 : vec4<f32> = u_xlat9;
        u_xlat10 = (vec4<f32>(x_2277.x, x_2277.x, x_2277.z, x_2277.z) * vec4<f32>(x_2279.x, x_2279.x, x_2279.z, x_2279.z));
        let x_2283 : vec4<f32> = u_xlat10;
        u_xlat52 = (vec2<f32>(x_2283.y, x_2283.w) * vec2<f32>(0.079999998f, 0.079999998f));
        let x_2286 : vec4<f32> = u_xlat10;
        let x_2289 : vec4<f32> = u_xlat8;
        let x_2292 : vec2<f32> = ((vec2<f32>(x_2286.x, x_2286.z) * vec2<f32>(0.5f, 0.5f)) + -(vec2<f32>(x_2289.x, x_2289.y)));
        let x_2293 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_2292.x, x_2293.y, x_2292.y, x_2293.w);
        let x_2295 : vec4<f32> = u_xlat8;
        let x_2298 : vec2<f32> = (-(vec2<f32>(x_2295.x, x_2295.y)) + vec2<f32>(1.0f, 1.0f));
        let x_2299 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_2298.x, x_2298.y, x_2299.z, x_2299.w);
        let x_2301 : vec4<f32> = u_xlat8;
        u_xlat54 = min(vec2<f32>(x_2301.x, x_2301.y), vec2<f32>(0.0f, 0.0f));
        let x_2304 : vec2<f32> = u_xlat54;
        let x_2306 : vec2<f32> = u_xlat54;
        let x_2308 : vec4<f32> = u_xlat10;
        u_xlat54 = ((-(x_2304) * x_2306) + vec2<f32>(x_2308.x, x_2308.y));
        let x_2311 : vec4<f32> = u_xlat8;
        let x_2313 : vec2<f32> = max(vec2<f32>(x_2311.x, x_2311.y), vec2<f32>(0.0f, 0.0f));
        let x_2314 : vec4<f32> = u_xlat8;
        u_xlat8 = vec4<f32>(x_2313.x, x_2313.y, x_2314.z, x_2314.w);
        let x_2316 : vec4<f32> = u_xlat8;
        let x_2319 : vec4<f32> = u_xlat8;
        let x_2322 : vec4<f32> = u_xlat9;
        let x_2324 : vec2<f32> = ((-(vec2<f32>(x_2316.x, x_2316.y)) * vec2<f32>(x_2319.x, x_2319.y)) + vec2<f32>(x_2322.y, x_2322.w));
        let x_2325 : vec4<f32> = u_xlat8;
        u_xlat8 = vec4<f32>(x_2324.x, x_2324.y, x_2325.z, x_2325.w);
        let x_2327 : vec2<f32> = u_xlat54;
        u_xlat54 = (x_2327 + vec2<f32>(1.0f, 1.0f));
        let x_2329 : vec4<f32> = u_xlat8;
        let x_2331 : vec2<f32> = (vec2<f32>(x_2329.x, x_2329.y) + vec2<f32>(1.0f, 1.0f));
        let x_2332 : vec4<f32> = u_xlat8;
        u_xlat8 = vec4<f32>(x_2331.x, x_2331.y, x_2332.z, x_2332.w);
        let x_2334 : vec4<f32> = u_xlat9;
        let x_2336 : vec2<f32> = (vec2<f32>(x_2334.x, x_2334.z) * vec2<f32>(0.159999996f, 0.159999996f));
        let x_2337 : vec4<f32> = u_xlat11;
        u_xlat11 = vec4<f32>(x_2336.x, x_2336.y, x_2337.z, x_2337.w);
        let x_2339 : vec4<f32> = u_xlat10;
        let x_2341 : vec2<f32> = (vec2<f32>(x_2339.x, x_2339.y) * vec2<f32>(0.159999996f, 0.159999996f));
        let x_2342 : vec4<f32> = u_xlat12;
        u_xlat12 = vec4<f32>(x_2341.x, x_2341.y, x_2342.z, x_2342.w);
        let x_2344 : vec2<f32> = u_xlat54;
        let x_2345 : vec2<f32> = (x_2344 * vec2<f32>(0.159999996f, 0.159999996f));
        let x_2346 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_2345.x, x_2345.y, x_2346.z, x_2346.w);
        let x_2348 : vec4<f32> = u_xlat8;
        let x_2350 : vec2<f32> = (vec2<f32>(x_2348.x, x_2348.y) * vec2<f32>(0.159999996f, 0.159999996f));
        let x_2351 : vec4<f32> = u_xlat13;
        u_xlat13 = vec4<f32>(x_2350.x, x_2350.y, x_2351.z, x_2351.w);
        let x_2353 : vec4<f32> = u_xlat9;
        let x_2355 : vec2<f32> = (vec2<f32>(x_2353.y, x_2353.w) * vec2<f32>(0.159999996f, 0.159999996f));
        let x_2356 : vec4<f32> = u_xlat8;
        u_xlat8 = vec4<f32>(x_2355.x, x_2355.y, x_2356.z, x_2356.w);
        let x_2359 : f32 = u_xlat10.x;
        u_xlat11.z = x_2359;
        let x_2362 : f32 = u_xlat8.x;
        u_xlat11.w = x_2362;
        let x_2365 : f32 = u_xlat13.x;
        u_xlat12.z = x_2365;
        let x_2368 : f32 = u_xlat52.x;
        u_xlat12.w = x_2368;
        let x_2370 : vec4<f32> = u_xlat11;
        let x_2372 : vec4<f32> = u_xlat12;
        u_xlat9 = (vec4<f32>(x_2370.z, x_2370.w, x_2370.x, x_2370.z) + vec4<f32>(x_2372.z, x_2372.w, x_2372.x, x_2372.z));
        let x_2376 : f32 = u_xlat11.y;
        u_xlat10.z = x_2376;
        let x_2379 : f32 = u_xlat8.y;
        u_xlat10.w = x_2379;
        let x_2382 : f32 = u_xlat12.y;
        u_xlat13.z = x_2382;
        let x_2385 : f32 = u_xlat52.y;
        u_xlat13.w = x_2385;
        let x_2387 : vec4<f32> = u_xlat10;
        let x_2389 : vec4<f32> = u_xlat13;
        let x_2391 : vec3<f32> = (vec3<f32>(x_2387.z, x_2387.y, x_2387.w) + vec3<f32>(x_2389.z, x_2389.y, x_2389.w));
        let x_2392 : vec4<f32> = u_xlat8;
        u_xlat8 = vec4<f32>(x_2391.x, x_2391.y, x_2391.z, x_2392.w);
        let x_2394 : vec4<f32> = u_xlat12;
        let x_2396 : vec4<f32> = u_xlat9;
        let x_2398 : vec3<f32> = (vec3<f32>(x_2394.x, x_2394.z, x_2394.w) / vec3<f32>(x_2396.z, x_2396.w, x_2396.y));
        let x_2399 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_2398.x, x_2398.y, x_2398.z, x_2399.w);
        let x_2401 : vec4<f32> = u_xlat10;
        let x_2403 : vec3<f32> = (vec3<f32>(x_2401.x, x_2401.y, x_2401.z) + vec3<f32>(-2.5f, -0.5f, 1.5f));
        let x_2404 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_2403.x, x_2403.y, x_2403.z, x_2404.w);
        let x_2406 : vec4<f32> = u_xlat13;
        let x_2408 : vec4<f32> = u_xlat8;
        let x_2410 : vec3<f32> = (vec3<f32>(x_2406.z, x_2406.y, x_2406.w) / vec3<f32>(x_2408.x, x_2408.y, x_2408.z));
        let x_2411 : vec4<f32> = u_xlat11;
        u_xlat11 = vec4<f32>(x_2410.x, x_2410.y, x_2410.z, x_2411.w);
        let x_2413 : vec4<f32> = u_xlat11;
        let x_2415 : vec3<f32> = (vec3<f32>(x_2413.x, x_2413.y, x_2413.z) + vec3<f32>(-2.5f, -0.5f, 1.5f));
        let x_2416 : vec4<f32> = u_xlat11;
        u_xlat11 = vec4<f32>(x_2415.x, x_2415.y, x_2415.z, x_2416.w);
        let x_2418 : vec4<f32> = u_xlat10;
        let x_2421 : vec4<f32> = x_271.x_MainLightShadowmapSize;
        let x_2423 : vec3<f32> = (vec3<f32>(x_2418.y, x_2418.x, x_2418.z) * vec3<f32>(x_2421.x, x_2421.x, x_2421.x));
        let x_2424 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_2423.x, x_2423.y, x_2423.z, x_2424.w);
        let x_2426 : vec4<f32> = u_xlat11;
        let x_2429 : vec4<f32> = x_271.x_MainLightShadowmapSize;
        let x_2431 : vec3<f32> = (vec3<f32>(x_2426.x, x_2426.y, x_2426.z) * vec3<f32>(x_2429.y, x_2429.y, x_2429.y));
        let x_2432 : vec4<f32> = u_xlat11;
        u_xlat11 = vec4<f32>(x_2431.x, x_2431.y, x_2431.z, x_2432.w);
        let x_2435 : f32 = u_xlat11.x;
        u_xlat10.w = x_2435;
        let x_2437 : vec2<f32> = u_xlat51;
        let x_2440 : vec4<f32> = x_271.x_MainLightShadowmapSize;
        let x_2443 : vec4<f32> = u_xlat10;
        u_xlat12 = ((vec4<f32>(x_2437.x, x_2437.y, x_2437.x, x_2437.y) * vec4<f32>(x_2440.x, x_2440.y, x_2440.x, x_2440.y)) + vec4<f32>(x_2443.y, x_2443.w, x_2443.x, x_2443.w));
        let x_2446 : vec2<f32> = u_xlat51;
        let x_2448 : vec4<f32> = x_271.x_MainLightShadowmapSize;
        let x_2451 : vec4<f32> = u_xlat10;
        let x_2453 : vec2<f32> = ((x_2446 * vec2<f32>(x_2448.x, x_2448.y)) + vec2<f32>(x_2451.z, x_2451.w));
        let x_2454 : vec4<f32> = u_xlat13;
        u_xlat13 = vec4<f32>(x_2453.x, x_2453.y, x_2454.z, x_2454.w);
        let x_2457 : f32 = u_xlat10.y;
        u_xlat11.w = x_2457;
        let x_2459 : vec4<f32> = u_xlat11;
        let x_2460 : vec2<f32> = vec2<f32>(x_2459.y, x_2459.z);
        let x_2461 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_2461.x, x_2460.x, x_2461.z, x_2460.y);
        let x_2463 : vec2<f32> = u_xlat51;
        let x_2466 : vec4<f32> = x_271.x_MainLightShadowmapSize;
        let x_2469 : vec4<f32> = u_xlat10;
        u_xlat14 = ((vec4<f32>(x_2463.x, x_2463.y, x_2463.x, x_2463.y) * vec4<f32>(x_2466.x, x_2466.y, x_2466.x, x_2466.y)) + vec4<f32>(x_2469.x, x_2469.y, x_2469.z, x_2469.y));
        let x_2472 : vec2<f32> = u_xlat51;
        let x_2475 : vec4<f32> = x_271.x_MainLightShadowmapSize;
        let x_2478 : vec4<f32> = u_xlat11;
        u_xlat11 = ((vec4<f32>(x_2472.x, x_2472.y, x_2472.x, x_2472.y) * vec4<f32>(x_2475.x, x_2475.y, x_2475.x, x_2475.y)) + vec4<f32>(x_2478.w, x_2478.y, x_2478.w, x_2478.z));
        let x_2481 : vec2<f32> = u_xlat51;
        let x_2484 : vec4<f32> = x_271.x_MainLightShadowmapSize;
        let x_2487 : vec4<f32> = u_xlat10;
        u_xlat10 = ((vec4<f32>(x_2481.x, x_2481.y, x_2481.x, x_2481.y) * vec4<f32>(x_2484.x, x_2484.y, x_2484.x, x_2484.y)) + vec4<f32>(x_2487.x, x_2487.w, x_2487.z, x_2487.w));
        let x_2490 : vec4<f32> = u_xlat8;
        let x_2492 : vec4<f32> = u_xlat9;
        u_xlat15 = (vec4<f32>(x_2490.x, x_2490.x, x_2490.x, x_2490.y) * vec4<f32>(x_2492.z, x_2492.w, x_2492.y, x_2492.z));
        let x_2495 : vec4<f32> = u_xlat8;
        let x_2497 : vec4<f32> = u_xlat9;
        u_xlat16 = (vec4<f32>(x_2495.y, x_2495.y, x_2495.z, x_2495.z) * x_2497);
        let x_2500 : f32 = u_xlat8.z;
        let x_2502 : f32 = u_xlat9.y;
        u_xlat51.x = (x_2500 * x_2502);
        let x_2506 : vec4<f32> = u_xlat12;
        let x_2507 : vec2<f32> = vec2<f32>(x_2506.x, x_2506.y);
        let x_2509 : f32 = u_xlat6.z;
        txVec34 = vec3<f32>(x_2507.x, x_2507.y, x_2509);
        let x_2517 : vec3<f32> = txVec34;
        let x_2519 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2517.xy, x_2517.z);
        u_xlat73 = x_2519;
        let x_2521 : vec4<f32> = u_xlat12;
        let x_2522 : vec2<f32> = vec2<f32>(x_2521.z, x_2521.w);
        let x_2524 : f32 = u_xlat6.z;
        txVec35 = vec3<f32>(x_2522.x, x_2522.y, x_2524);
        let x_2531 : vec3<f32> = txVec35;
        let x_2533 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2531.xy, x_2531.z);
        u_xlat8.x = x_2533;
        let x_2536 : f32 = u_xlat8.x;
        let x_2538 : f32 = u_xlat15.y;
        u_xlat8.x = (x_2536 * x_2538);
        let x_2542 : f32 = u_xlat15.x;
        let x_2543 : f32 = u_xlat73;
        let x_2546 : f32 = u_xlat8.x;
        u_xlat73 = ((x_2542 * x_2543) + x_2546);
        let x_2549 : vec4<f32> = u_xlat13;
        let x_2550 : vec2<f32> = vec2<f32>(x_2549.x, x_2549.y);
        let x_2552 : f32 = u_xlat6.z;
        txVec36 = vec3<f32>(x_2550.x, x_2550.y, x_2552);
        let x_2559 : vec3<f32> = txVec36;
        let x_2561 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2559.xy, x_2559.z);
        u_xlat8.x = x_2561;
        let x_2564 : f32 = u_xlat15.z;
        let x_2566 : f32 = u_xlat8.x;
        let x_2568 : f32 = u_xlat73;
        u_xlat73 = ((x_2564 * x_2566) + x_2568);
        let x_2571 : vec4<f32> = u_xlat11;
        let x_2572 : vec2<f32> = vec2<f32>(x_2571.x, x_2571.y);
        let x_2574 : f32 = u_xlat6.z;
        txVec37 = vec3<f32>(x_2572.x, x_2572.y, x_2574);
        let x_2581 : vec3<f32> = txVec37;
        let x_2583 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2581.xy, x_2581.z);
        u_xlat8.x = x_2583;
        let x_2586 : f32 = u_xlat15.w;
        let x_2588 : f32 = u_xlat8.x;
        let x_2590 : f32 = u_xlat73;
        u_xlat73 = ((x_2586 * x_2588) + x_2590);
        let x_2593 : vec4<f32> = u_xlat14;
        let x_2594 : vec2<f32> = vec2<f32>(x_2593.x, x_2593.y);
        let x_2596 : f32 = u_xlat6.z;
        txVec38 = vec3<f32>(x_2594.x, x_2594.y, x_2596);
        let x_2603 : vec3<f32> = txVec38;
        let x_2605 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2603.xy, x_2603.z);
        u_xlat8.x = x_2605;
        let x_2608 : f32 = u_xlat16.x;
        let x_2610 : f32 = u_xlat8.x;
        let x_2612 : f32 = u_xlat73;
        u_xlat73 = ((x_2608 * x_2610) + x_2612);
        let x_2615 : vec4<f32> = u_xlat14;
        let x_2616 : vec2<f32> = vec2<f32>(x_2615.z, x_2615.w);
        let x_2618 : f32 = u_xlat6.z;
        txVec39 = vec3<f32>(x_2616.x, x_2616.y, x_2618);
        let x_2625 : vec3<f32> = txVec39;
        let x_2627 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2625.xy, x_2625.z);
        u_xlat8.x = x_2627;
        let x_2630 : f32 = u_xlat16.y;
        let x_2632 : f32 = u_xlat8.x;
        let x_2634 : f32 = u_xlat73;
        u_xlat73 = ((x_2630 * x_2632) + x_2634);
        let x_2637 : vec4<f32> = u_xlat11;
        let x_2638 : vec2<f32> = vec2<f32>(x_2637.z, x_2637.w);
        let x_2640 : f32 = u_xlat6.z;
        txVec40 = vec3<f32>(x_2638.x, x_2638.y, x_2640);
        let x_2647 : vec3<f32> = txVec40;
        let x_2649 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2647.xy, x_2647.z);
        u_xlat8.x = x_2649;
        let x_2652 : f32 = u_xlat16.z;
        let x_2654 : f32 = u_xlat8.x;
        let x_2656 : f32 = u_xlat73;
        u_xlat73 = ((x_2652 * x_2654) + x_2656);
        let x_2659 : vec4<f32> = u_xlat10;
        let x_2660 : vec2<f32> = vec2<f32>(x_2659.x, x_2659.y);
        let x_2662 : f32 = u_xlat6.z;
        txVec41 = vec3<f32>(x_2660.x, x_2660.y, x_2662);
        let x_2669 : vec3<f32> = txVec41;
        let x_2671 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2669.xy, x_2669.z);
        u_xlat8.x = x_2671;
        let x_2674 : f32 = u_xlat16.w;
        let x_2676 : f32 = u_xlat8.x;
        let x_2678 : f32 = u_xlat73;
        u_xlat73 = ((x_2674 * x_2676) + x_2678);
        let x_2681 : vec4<f32> = u_xlat10;
        let x_2682 : vec2<f32> = vec2<f32>(x_2681.z, x_2681.w);
        let x_2684 : f32 = u_xlat6.z;
        txVec42 = vec3<f32>(x_2682.x, x_2682.y, x_2684);
        let x_2691 : vec3<f32> = txVec42;
        let x_2693 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2691.xy, x_2691.z);
        u_xlat8.x = x_2693;
        let x_2696 : f32 = u_xlat51.x;
        let x_2698 : f32 = u_xlat8.x;
        let x_2700 : f32 = u_xlat73;
        u_xlat66 = ((x_2696 * x_2698) + x_2700);
      } else {
        let x_2703 : vec4<f32> = u_xlat6;
        let x_2706 : vec4<f32> = x_271.x_MainLightShadowmapSize;
        u_xlat51 = ((vec2<f32>(x_2703.x, x_2703.y) * vec2<f32>(x_2706.z, x_2706.w)) + vec2<f32>(0.5f, 0.5f));
        let x_2710 : vec2<f32> = u_xlat51;
        u_xlat51 = floor(x_2710);
        let x_2712 : vec4<f32> = u_xlat6;
        let x_2715 : vec4<f32> = x_271.x_MainLightShadowmapSize;
        let x_2718 : vec2<f32> = u_xlat51;
        let x_2720 : vec2<f32> = ((vec2<f32>(x_2712.x, x_2712.y) * vec2<f32>(x_2715.z, x_2715.w)) + -(x_2718));
        let x_2721 : vec4<f32> = u_xlat8;
        u_xlat8 = vec4<f32>(x_2720.x, x_2720.y, x_2721.z, x_2721.w);
        let x_2723 : vec4<f32> = u_xlat8;
        u_xlat9 = (vec4<f32>(x_2723.x, x_2723.x, x_2723.y, x_2723.y) + vec4<f32>(0.5f, 1.0f, 0.5f, 1.0f));
        let x_2726 : vec4<f32> = u_xlat9;
        let x_2728 : vec4<f32> = u_xlat9;
        u_xlat10 = (vec4<f32>(x_2726.x, x_2726.x, x_2726.z, x_2726.z) * vec4<f32>(x_2728.x, x_2728.x, x_2728.z, x_2728.z));
        let x_2731 : vec4<f32> = u_xlat10;
        let x_2733 : vec2<f32> = (vec2<f32>(x_2731.y, x_2731.w) * vec2<f32>(0.040816002f, 0.040816002f));
        let x_2734 : vec4<f32> = u_xlat11;
        u_xlat11 = vec4<f32>(x_2734.x, x_2733.x, x_2734.z, x_2733.y);
        let x_2736 : vec4<f32> = u_xlat10;
        let x_2739 : vec4<f32> = u_xlat8;
        u_xlat52 = ((vec2<f32>(x_2736.x, x_2736.z) * vec2<f32>(0.5f, 0.5f)) + -(vec2<f32>(x_2739.x, x_2739.y)));
        let x_2743 : vec4<f32> = u_xlat8;
        let x_2746 : vec2<f32> = (-(vec2<f32>(x_2743.x, x_2743.y)) + vec2<f32>(1.0f, 1.0f));
        let x_2747 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_2746.x, x_2747.y, x_2746.y, x_2747.w);
        let x_2749 : vec4<f32> = u_xlat8;
        let x_2751 : vec2<f32> = min(vec2<f32>(x_2749.x, x_2749.y), vec2<f32>(0.0f, 0.0f));
        let x_2752 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_2751.x, x_2751.y, x_2752.z, x_2752.w);
        let x_2754 : vec4<f32> = u_xlat10;
        let x_2757 : vec4<f32> = u_xlat10;
        let x_2760 : vec4<f32> = u_xlat9;
        let x_2762 : vec2<f32> = ((-(vec2<f32>(x_2754.x, x_2754.y)) * vec2<f32>(x_2757.x, x_2757.y)) + vec2<f32>(x_2760.x, x_2760.z));
        let x_2763 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_2762.x, x_2763.y, x_2762.y, x_2763.w);
        let x_2765 : vec4<f32> = u_xlat8;
        let x_2767 : vec2<f32> = max(vec2<f32>(x_2765.x, x_2765.y), vec2<f32>(0.0f, 0.0f));
        let x_2768 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_2767.x, x_2767.y, x_2768.z, x_2768.w);
        let x_2770 : vec4<f32> = u_xlat10;
        let x_2773 : vec4<f32> = u_xlat10;
        let x_2776 : vec4<f32> = u_xlat9;
        let x_2778 : vec2<f32> = ((-(vec2<f32>(x_2770.x, x_2770.y)) * vec2<f32>(x_2773.x, x_2773.y)) + vec2<f32>(x_2776.y, x_2776.w));
        let x_2779 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_2779.x, x_2778.x, x_2779.z, x_2778.y);
        let x_2781 : vec4<f32> = u_xlat9;
        u_xlat9 = (x_2781 + vec4<f32>(2.0f, 2.0f, 2.0f, 2.0f));
        let x_2784 : f32 = u_xlat9.y;
        u_xlat10.z = (x_2784 * 0.081632003f);
        let x_2787 : vec2<f32> = u_xlat52;
        let x_2789 : vec2<f32> = (vec2<f32>(x_2787.y, x_2787.x) * vec2<f32>(0.081632003f, 0.081632003f));
        let x_2790 : vec4<f32> = u_xlat12;
        u_xlat12 = vec4<f32>(x_2789.x, x_2789.y, x_2790.z, x_2790.w);
        let x_2792 : vec4<f32> = u_xlat9;
        u_xlat52 = (vec2<f32>(x_2792.x, x_2792.z) * vec2<f32>(0.081632003f, 0.081632003f));
        let x_2796 : f32 = u_xlat9.w;
        u_xlat12.z = (x_2796 * 0.081632003f);
        let x_2800 : f32 = u_xlat12.y;
        u_xlat10.x = x_2800;
        let x_2802 : vec4<f32> = u_xlat8;
        let x_2805 : vec2<f32> = ((vec2<f32>(x_2802.x, x_2802.x) * vec2<f32>(-0.081632003f, 0.081632003f)) + vec2<f32>(0.163264006f, 0.081632003f));
        let x_2806 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_2806.x, x_2805.x, x_2806.z, x_2805.y);
        let x_2808 : vec4<f32> = u_xlat8;
        let x_2811 : vec2<f32> = ((vec2<f32>(x_2808.x, x_2808.x) * vec2<f32>(-0.081632003f, 0.081632003f)) + vec2<f32>(0.081632003f, 0.163264006f));
        let x_2812 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_2811.x, x_2812.y, x_2811.y, x_2812.w);
        let x_2815 : f32 = u_xlat52.x;
        u_xlat9.y = x_2815;
        let x_2818 : f32 = u_xlat11.y;
        u_xlat9.w = x_2818;
        let x_2820 : vec4<f32> = u_xlat9;
        let x_2821 : vec4<f32> = u_xlat10;
        u_xlat10 = (x_2820 + x_2821);
        let x_2823 : vec4<f32> = u_xlat8;
        let x_2826 : vec2<f32> = ((vec2<f32>(x_2823.y, x_2823.y) * vec2<f32>(-0.081632003f, 0.081632003f)) + vec2<f32>(0.163264006f, 0.081632003f));
        let x_2827 : vec4<f32> = u_xlat12;
        u_xlat12 = vec4<f32>(x_2827.x, x_2826.x, x_2827.z, x_2826.y);
        let x_2829 : vec4<f32> = u_xlat8;
        let x_2832 : vec2<f32> = ((vec2<f32>(x_2829.y, x_2829.y) * vec2<f32>(-0.081632003f, 0.081632003f)) + vec2<f32>(0.081632003f, 0.163264006f));
        let x_2833 : vec4<f32> = u_xlat11;
        u_xlat11 = vec4<f32>(x_2832.x, x_2833.y, x_2832.y, x_2833.w);
        let x_2836 : f32 = u_xlat52.y;
        u_xlat11.y = x_2836;
        let x_2838 : vec4<f32> = u_xlat11;
        let x_2839 : vec4<f32> = u_xlat12;
        u_xlat8 = (x_2838 + x_2839);
        let x_2841 : vec4<f32> = u_xlat9;
        let x_2842 : vec4<f32> = u_xlat10;
        u_xlat9 = (x_2841 / x_2842);
        let x_2844 : vec4<f32> = u_xlat9;
        u_xlat9 = (x_2844 + vec4<f32>(-3.5f, -1.5f, 0.5f, 2.5f));
        let x_2846 : vec4<f32> = u_xlat11;
        let x_2847 : vec4<f32> = u_xlat8;
        u_xlat11 = (x_2846 / x_2847);
        let x_2849 : vec4<f32> = u_xlat11;
        u_xlat11 = (x_2849 + vec4<f32>(-3.5f, -1.5f, 0.5f, 2.5f));
        let x_2851 : vec4<f32> = u_xlat9;
        let x_2854 : vec4<f32> = x_271.x_MainLightShadowmapSize;
        u_xlat9 = (vec4<f32>(x_2851.w, x_2851.x, x_2851.y, x_2851.z) * vec4<f32>(x_2854.x, x_2854.x, x_2854.x, x_2854.x));
        let x_2857 : vec4<f32> = u_xlat11;
        let x_2860 : vec4<f32> = x_271.x_MainLightShadowmapSize;
        u_xlat11 = (vec4<f32>(x_2857.x, x_2857.w, x_2857.y, x_2857.z) * vec4<f32>(x_2860.y, x_2860.y, x_2860.y, x_2860.y));
        let x_2863 : vec4<f32> = u_xlat9;
        let x_2864 : vec3<f32> = vec3<f32>(x_2863.y, x_2863.z, x_2863.w);
        let x_2865 : vec4<f32> = u_xlat12;
        u_xlat12 = vec4<f32>(x_2864.x, x_2865.y, x_2864.y, x_2864.z);
        let x_2868 : f32 = u_xlat11.x;
        u_xlat12.y = x_2868;
        let x_2870 : vec2<f32> = u_xlat51;
        let x_2873 : vec4<f32> = x_271.x_MainLightShadowmapSize;
        let x_2876 : vec4<f32> = u_xlat12;
        u_xlat13 = ((vec4<f32>(x_2870.x, x_2870.y, x_2870.x, x_2870.y) * vec4<f32>(x_2873.x, x_2873.y, x_2873.x, x_2873.y)) + vec4<f32>(x_2876.x, x_2876.y, x_2876.z, x_2876.y));
        let x_2879 : vec2<f32> = u_xlat51;
        let x_2881 : vec4<f32> = x_271.x_MainLightShadowmapSize;
        let x_2884 : vec4<f32> = u_xlat12;
        let x_2886 : vec2<f32> = ((x_2879 * vec2<f32>(x_2881.x, x_2881.y)) + vec2<f32>(x_2884.w, x_2884.y));
        let x_2887 : vec4<f32> = u_xlat14;
        u_xlat14 = vec4<f32>(x_2886.x, x_2886.y, x_2887.z, x_2887.w);
        let x_2890 : f32 = u_xlat12.y;
        u_xlat9.y = x_2890;
        let x_2893 : f32 = u_xlat11.z;
        u_xlat12.y = x_2893;
        let x_2895 : vec2<f32> = u_xlat51;
        let x_2898 : vec4<f32> = x_271.x_MainLightShadowmapSize;
        let x_2901 : vec4<f32> = u_xlat12;
        u_xlat15 = ((vec4<f32>(x_2895.x, x_2895.y, x_2895.x, x_2895.y) * vec4<f32>(x_2898.x, x_2898.y, x_2898.x, x_2898.y)) + vec4<f32>(x_2901.x, x_2901.y, x_2901.z, x_2901.y));
        let x_2905 : vec2<f32> = u_xlat51;
        let x_2907 : vec4<f32> = x_271.x_MainLightShadowmapSize;
        let x_2910 : vec4<f32> = u_xlat12;
        u_xlat58 = ((x_2905 * vec2<f32>(x_2907.x, x_2907.y)) + vec2<f32>(x_2910.w, x_2910.y));
        let x_2914 : f32 = u_xlat12.y;
        u_xlat9.z = x_2914;
        let x_2916 : vec2<f32> = u_xlat51;
        let x_2919 : vec4<f32> = x_271.x_MainLightShadowmapSize;
        let x_2922 : vec4<f32> = u_xlat9;
        u_xlat16 = ((vec4<f32>(x_2916.x, x_2916.y, x_2916.x, x_2916.y) * vec4<f32>(x_2919.x, x_2919.y, x_2919.x, x_2919.y)) + vec4<f32>(x_2922.x, x_2922.y, x_2922.x, x_2922.z));
        let x_2926 : f32 = u_xlat11.w;
        u_xlat12.y = x_2926;
        let x_2928 : vec2<f32> = u_xlat51;
        let x_2931 : vec4<f32> = x_271.x_MainLightShadowmapSize;
        let x_2934 : vec4<f32> = u_xlat12;
        u_xlat17 = ((vec4<f32>(x_2928.x, x_2928.y, x_2928.x, x_2928.y) * vec4<f32>(x_2931.x, x_2931.y, x_2931.x, x_2931.y)) + vec4<f32>(x_2934.x, x_2934.y, x_2934.z, x_2934.y));
        let x_2937 : vec2<f32> = u_xlat51;
        let x_2939 : vec4<f32> = x_271.x_MainLightShadowmapSize;
        let x_2942 : vec4<f32> = u_xlat12;
        u_xlat31 = ((x_2937 * vec2<f32>(x_2939.x, x_2939.y)) + vec2<f32>(x_2942.w, x_2942.y));
        let x_2946 : f32 = u_xlat12.y;
        u_xlat9.w = x_2946;
        let x_2948 : vec2<f32> = u_xlat51;
        let x_2950 : vec4<f32> = x_271.x_MainLightShadowmapSize;
        let x_2953 : vec4<f32> = u_xlat9;
        let x_2955 : vec2<f32> = ((x_2948 * vec2<f32>(x_2950.x, x_2950.y)) + vec2<f32>(x_2953.x, x_2953.w));
        let x_2956 : vec4<f32> = u_xlat18;
        u_xlat18 = vec4<f32>(x_2955.x, x_2955.y, x_2956.z, x_2956.w);
        let x_2958 : vec4<f32> = u_xlat12;
        let x_2959 : vec3<f32> = vec3<f32>(x_2958.x, x_2958.z, x_2958.w);
        let x_2960 : vec4<f32> = u_xlat11;
        u_xlat11 = vec4<f32>(x_2959.x, x_2960.y, x_2959.y, x_2959.z);
        let x_2962 : vec2<f32> = u_xlat51;
        let x_2965 : vec4<f32> = x_271.x_MainLightShadowmapSize;
        let x_2968 : vec4<f32> = u_xlat11;
        u_xlat12 = ((vec4<f32>(x_2962.x, x_2962.y, x_2962.x, x_2962.y) * vec4<f32>(x_2965.x, x_2965.y, x_2965.x, x_2965.y)) + vec4<f32>(x_2968.x, x_2968.y, x_2968.z, x_2968.y));
        let x_2972 : vec2<f32> = u_xlat51;
        let x_2974 : vec4<f32> = x_271.x_MainLightShadowmapSize;
        let x_2977 : vec4<f32> = u_xlat11;
        u_xlat55 = ((x_2972 * vec2<f32>(x_2974.x, x_2974.y)) + vec2<f32>(x_2977.w, x_2977.y));
        let x_2981 : f32 = u_xlat9.x;
        u_xlat11.x = x_2981;
        let x_2983 : vec2<f32> = u_xlat51;
        let x_2985 : vec4<f32> = x_271.x_MainLightShadowmapSize;
        let x_2988 : vec4<f32> = u_xlat11;
        u_xlat51 = ((x_2983 * vec2<f32>(x_2985.x, x_2985.y)) + vec2<f32>(x_2988.x, x_2988.y));
        let x_2991 : vec4<f32> = u_xlat8;
        let x_2993 : vec4<f32> = u_xlat10;
        u_xlat19 = (vec4<f32>(x_2991.x, x_2991.x, x_2991.x, x_2991.x) * x_2993);
        let x_2995 : vec4<f32> = u_xlat8;
        let x_2997 : vec4<f32> = u_xlat10;
        u_xlat20 = (vec4<f32>(x_2995.y, x_2995.y, x_2995.y, x_2995.y) * x_2997);
        let x_3000 : vec4<f32> = u_xlat8;
        let x_3002 : vec4<f32> = u_xlat10;
        u_xlat21 = (vec4<f32>(x_3000.z, x_3000.z, x_3000.z, x_3000.z) * x_3002);
        let x_3004 : vec4<f32> = u_xlat8;
        let x_3006 : vec4<f32> = u_xlat10;
        u_xlat8 = (vec4<f32>(x_3004.w, x_3004.w, x_3004.w, x_3004.w) * x_3006);
        let x_3009 : vec4<f32> = u_xlat13;
        let x_3010 : vec2<f32> = vec2<f32>(x_3009.x, x_3009.y);
        let x_3012 : f32 = u_xlat6.z;
        txVec43 = vec3<f32>(x_3010.x, x_3010.y, x_3012);
        let x_3019 : vec3<f32> = txVec43;
        let x_3021 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_3019.xy, x_3019.z);
        u_xlat9.x = x_3021;
        let x_3024 : vec4<f32> = u_xlat13;
        let x_3025 : vec2<f32> = vec2<f32>(x_3024.z, x_3024.w);
        let x_3027 : f32 = u_xlat6.z;
        txVec44 = vec3<f32>(x_3025.x, x_3025.y, x_3027);
        let x_3035 : vec3<f32> = txVec44;
        let x_3037 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_3035.xy, x_3035.z);
        u_xlat75 = x_3037;
        let x_3038 : f32 = u_xlat75;
        let x_3040 : f32 = u_xlat19.y;
        u_xlat75 = (x_3038 * x_3040);
        let x_3043 : f32 = u_xlat19.x;
        let x_3045 : f32 = u_xlat9.x;
        let x_3047 : f32 = u_xlat75;
        u_xlat9.x = ((x_3043 * x_3045) + x_3047);
        let x_3051 : vec4<f32> = u_xlat14;
        let x_3052 : vec2<f32> = vec2<f32>(x_3051.x, x_3051.y);
        let x_3054 : f32 = u_xlat6.z;
        txVec45 = vec3<f32>(x_3052.x, x_3052.y, x_3054);
        let x_3061 : vec3<f32> = txVec45;
        let x_3063 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_3061.xy, x_3061.z);
        u_xlat75 = x_3063;
        let x_3065 : f32 = u_xlat19.z;
        let x_3066 : f32 = u_xlat75;
        let x_3069 : f32 = u_xlat9.x;
        u_xlat9.x = ((x_3065 * x_3066) + x_3069);
        let x_3073 : vec4<f32> = u_xlat16;
        let x_3074 : vec2<f32> = vec2<f32>(x_3073.x, x_3073.y);
        let x_3076 : f32 = u_xlat6.z;
        txVec46 = vec3<f32>(x_3074.x, x_3074.y, x_3076);
        let x_3083 : vec3<f32> = txVec46;
        let x_3085 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_3083.xy, x_3083.z);
        u_xlat75 = x_3085;
        let x_3087 : f32 = u_xlat19.w;
        let x_3088 : f32 = u_xlat75;
        let x_3091 : f32 = u_xlat9.x;
        u_xlat9.x = ((x_3087 * x_3088) + x_3091);
        let x_3095 : vec4<f32> = u_xlat15;
        let x_3096 : vec2<f32> = vec2<f32>(x_3095.x, x_3095.y);
        let x_3098 : f32 = u_xlat6.z;
        txVec47 = vec3<f32>(x_3096.x, x_3096.y, x_3098);
        let x_3105 : vec3<f32> = txVec47;
        let x_3107 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_3105.xy, x_3105.z);
        u_xlat75 = x_3107;
        let x_3109 : f32 = u_xlat20.x;
        let x_3110 : f32 = u_xlat75;
        let x_3113 : f32 = u_xlat9.x;
        u_xlat9.x = ((x_3109 * x_3110) + x_3113);
        let x_3117 : vec4<f32> = u_xlat15;
        let x_3118 : vec2<f32> = vec2<f32>(x_3117.z, x_3117.w);
        let x_3120 : f32 = u_xlat6.z;
        txVec48 = vec3<f32>(x_3118.x, x_3118.y, x_3120);
        let x_3127 : vec3<f32> = txVec48;
        let x_3129 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_3127.xy, x_3127.z);
        u_xlat75 = x_3129;
        let x_3131 : f32 = u_xlat20.y;
        let x_3132 : f32 = u_xlat75;
        let x_3135 : f32 = u_xlat9.x;
        u_xlat9.x = ((x_3131 * x_3132) + x_3135);
        let x_3139 : vec2<f32> = u_xlat58;
        let x_3141 : f32 = u_xlat6.z;
        txVec49 = vec3<f32>(x_3139.x, x_3139.y, x_3141);
        let x_3148 : vec3<f32> = txVec49;
        let x_3150 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_3148.xy, x_3148.z);
        u_xlat75 = x_3150;
        let x_3152 : f32 = u_xlat20.z;
        let x_3153 : f32 = u_xlat75;
        let x_3156 : f32 = u_xlat9.x;
        u_xlat9.x = ((x_3152 * x_3153) + x_3156);
        let x_3160 : vec4<f32> = u_xlat16;
        let x_3161 : vec2<f32> = vec2<f32>(x_3160.z, x_3160.w);
        let x_3163 : f32 = u_xlat6.z;
        txVec50 = vec3<f32>(x_3161.x, x_3161.y, x_3163);
        let x_3170 : vec3<f32> = txVec50;
        let x_3172 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_3170.xy, x_3170.z);
        u_xlat75 = x_3172;
        let x_3174 : f32 = u_xlat20.w;
        let x_3175 : f32 = u_xlat75;
        let x_3178 : f32 = u_xlat9.x;
        u_xlat9.x = ((x_3174 * x_3175) + x_3178);
        let x_3182 : vec4<f32> = u_xlat17;
        let x_3183 : vec2<f32> = vec2<f32>(x_3182.x, x_3182.y);
        let x_3185 : f32 = u_xlat6.z;
        txVec51 = vec3<f32>(x_3183.x, x_3183.y, x_3185);
        let x_3192 : vec3<f32> = txVec51;
        let x_3194 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_3192.xy, x_3192.z);
        u_xlat75 = x_3194;
        let x_3196 : f32 = u_xlat21.x;
        let x_3197 : f32 = u_xlat75;
        let x_3200 : f32 = u_xlat9.x;
        u_xlat9.x = ((x_3196 * x_3197) + x_3200);
        let x_3204 : vec4<f32> = u_xlat17;
        let x_3205 : vec2<f32> = vec2<f32>(x_3204.z, x_3204.w);
        let x_3207 : f32 = u_xlat6.z;
        txVec52 = vec3<f32>(x_3205.x, x_3205.y, x_3207);
        let x_3214 : vec3<f32> = txVec52;
        let x_3216 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_3214.xy, x_3214.z);
        u_xlat75 = x_3216;
        let x_3218 : f32 = u_xlat21.y;
        let x_3219 : f32 = u_xlat75;
        let x_3222 : f32 = u_xlat9.x;
        u_xlat9.x = ((x_3218 * x_3219) + x_3222);
        let x_3226 : vec2<f32> = u_xlat31;
        let x_3228 : f32 = u_xlat6.z;
        txVec53 = vec3<f32>(x_3226.x, x_3226.y, x_3228);
        let x_3235 : vec3<f32> = txVec53;
        let x_3237 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_3235.xy, x_3235.z);
        u_xlat31.x = x_3237;
        let x_3240 : f32 = u_xlat21.z;
        let x_3242 : f32 = u_xlat31.x;
        let x_3245 : f32 = u_xlat9.x;
        u_xlat9.x = ((x_3240 * x_3242) + x_3245);
        let x_3249 : vec4<f32> = u_xlat18;
        let x_3250 : vec2<f32> = vec2<f32>(x_3249.x, x_3249.y);
        let x_3252 : f32 = u_xlat6.z;
        txVec54 = vec3<f32>(x_3250.x, x_3250.y, x_3252);
        let x_3259 : vec3<f32> = txVec54;
        let x_3261 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_3259.xy, x_3259.z);
        u_xlat31.x = x_3261;
        let x_3264 : f32 = u_xlat21.w;
        let x_3266 : f32 = u_xlat31.x;
        let x_3269 : f32 = u_xlat9.x;
        u_xlat9.x = ((x_3264 * x_3266) + x_3269);
        let x_3273 : vec4<f32> = u_xlat12;
        let x_3274 : vec2<f32> = vec2<f32>(x_3273.x, x_3273.y);
        let x_3276 : f32 = u_xlat6.z;
        txVec55 = vec3<f32>(x_3274.x, x_3274.y, x_3276);
        let x_3283 : vec3<f32> = txVec55;
        let x_3285 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_3283.xy, x_3283.z);
        u_xlat31.x = x_3285;
        let x_3288 : f32 = u_xlat8.x;
        let x_3290 : f32 = u_xlat31.x;
        let x_3293 : f32 = u_xlat9.x;
        u_xlat8.x = ((x_3288 * x_3290) + x_3293);
        let x_3297 : vec4<f32> = u_xlat12;
        let x_3298 : vec2<f32> = vec2<f32>(x_3297.z, x_3297.w);
        let x_3300 : f32 = u_xlat6.z;
        txVec56 = vec3<f32>(x_3298.x, x_3298.y, x_3300);
        let x_3307 : vec3<f32> = txVec56;
        let x_3309 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_3307.xy, x_3307.z);
        u_xlat9.x = x_3309;
        let x_3312 : f32 = u_xlat8.y;
        let x_3314 : f32 = u_xlat9.x;
        let x_3317 : f32 = u_xlat8.x;
        u_xlat8.x = ((x_3312 * x_3314) + x_3317);
        let x_3321 : vec2<f32> = u_xlat55;
        let x_3323 : f32 = u_xlat6.z;
        txVec57 = vec3<f32>(x_3321.x, x_3321.y, x_3323);
        let x_3330 : vec3<f32> = txVec57;
        let x_3332 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_3330.xy, x_3330.z);
        u_xlat30.x = x_3332;
        let x_3335 : f32 = u_xlat8.z;
        let x_3337 : f32 = u_xlat30.x;
        let x_3340 : f32 = u_xlat8.x;
        u_xlat8.x = ((x_3335 * x_3337) + x_3340);
        let x_3344 : vec2<f32> = u_xlat51;
        let x_3346 : f32 = u_xlat6.z;
        txVec58 = vec3<f32>(x_3344.x, x_3344.y, x_3346);
        let x_3353 : vec3<f32> = txVec58;
        let x_3355 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_3353.xy, x_3353.z);
        u_xlat51.x = x_3355;
        let x_3358 : f32 = u_xlat8.w;
        let x_3360 : f32 = u_xlat51.x;
        let x_3363 : f32 = u_xlat8.x;
        u_xlat66 = ((x_3358 * x_3360) + x_3363);
      }
    }
  } else {
    let x_3367 : vec4<f32> = u_xlat6;
    let x_3368 : vec2<f32> = vec2<f32>(x_3367.x, x_3367.y);
    let x_3370 : f32 = u_xlat6.z;
    txVec59 = vec3<f32>(x_3368.x, x_3368.y, x_3370);
    let x_3377 : vec3<f32> = txVec59;
    let x_3379 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_3377.xy, x_3377.z);
    u_xlat66 = x_3379;
  }
  let x_3380 : f32 = u_xlat66;
  let x_3382 : f32 = x_271.x_MainLightShadowParams.x;
  let x_3384 : f32 = u_xlat68;
  u_xlat66 = ((x_3380 * x_3382) + x_3384);
  let x_3386 : bool = u_xlatb70;
  let x_3387 : f32 = u_xlat66;
  u_xlat66 = select(x_3387, 1.0f, x_3386);
  let x_3389 : vec3<f32> = vs_INTERP0;
  let x_3391 : vec3<f32> = x_90.x_WorldSpaceCameraPos;
  let x_3393 : vec3<f32> = (x_3389 + -(x_3391));
  let x_3394 : vec4<f32> = u_xlat6;
  u_xlat6 = vec4<f32>(x_3393.x, x_3393.y, x_3393.z, x_3394.w);
  let x_3396 : vec4<f32> = u_xlat6;
  let x_3398 : vec4<f32> = u_xlat6;
  u_xlat68 = dot(vec3<f32>(x_3396.x, x_3396.y, x_3396.z), vec3<f32>(x_3398.x, x_3398.y, x_3398.z));
  let x_3401 : f32 = u_xlat68;
  let x_3403 : f32 = x_271.x_MainLightShadowParams.z;
  let x_3406 : f32 = x_271.x_MainLightShadowParams.w;
  u_xlat68 = ((x_3401 * x_3403) + x_3406);
  let x_3408 : f32 = u_xlat68;
  u_xlat68 = clamp(x_3408, 0.0f, 1.0f);
  let x_3410 : f32 = u_xlat66;
  u_xlat70 = (-(x_3410) + 1.0f);
  let x_3413 : f32 = u_xlat68;
  let x_3414 : f32 = u_xlat70;
  let x_3416 : f32 = u_xlat66;
  u_xlat66 = ((x_3413 * x_3414) + x_3416);
  let x_3424 : f32 = x_3422.x_MainLightCookieTextureFormat;
  u_xlatb68 = !((x_3424 == -1.0f));
  let x_3426 : bool = u_xlatb68;
  if (x_3426) {
    let x_3429 : vec3<f32> = vs_INTERP0;
    let x_3432 : vec4<f32> = x_3422.x_MainLightWorldToLight[1i];
    let x_3434 : vec2<f32> = (vec2<f32>(x_3429.y, x_3429.y) * vec2<f32>(x_3432.x, x_3432.y));
    let x_3435 : vec4<f32> = u_xlat6;
    u_xlat6 = vec4<f32>(x_3434.x, x_3434.y, x_3435.z, x_3435.w);
    let x_3438 : vec4<f32> = x_3422.x_MainLightWorldToLight[0i];
    let x_3440 : vec3<f32> = vs_INTERP0;
    let x_3443 : vec4<f32> = u_xlat6;
    let x_3445 : vec2<f32> = ((vec2<f32>(x_3438.x, x_3438.y) * vec2<f32>(x_3440.x, x_3440.x)) + vec2<f32>(x_3443.x, x_3443.y));
    let x_3446 : vec4<f32> = u_xlat6;
    u_xlat6 = vec4<f32>(x_3445.x, x_3445.y, x_3446.z, x_3446.w);
    let x_3449 : vec4<f32> = x_3422.x_MainLightWorldToLight[2i];
    let x_3451 : vec3<f32> = vs_INTERP0;
    let x_3454 : vec4<f32> = u_xlat6;
    let x_3456 : vec2<f32> = ((vec2<f32>(x_3449.x, x_3449.y) * vec2<f32>(x_3451.z, x_3451.z)) + vec2<f32>(x_3454.x, x_3454.y));
    let x_3457 : vec4<f32> = u_xlat6;
    u_xlat6 = vec4<f32>(x_3456.x, x_3456.y, x_3457.z, x_3457.w);
    let x_3459 : vec4<f32> = u_xlat6;
    let x_3462 : vec4<f32> = x_3422.x_MainLightWorldToLight[3i];
    let x_3464 : vec2<f32> = (vec2<f32>(x_3459.x, x_3459.y) + vec2<f32>(x_3462.x, x_3462.y));
    let x_3465 : vec4<f32> = u_xlat6;
    u_xlat6 = vec4<f32>(x_3464.x, x_3464.y, x_3465.z, x_3465.w);
    let x_3467 : vec4<f32> = u_xlat6;
    let x_3470 : vec2<f32> = ((vec2<f32>(x_3467.x, x_3467.y) * vec2<f32>(0.5f, 0.5f)) + vec2<f32>(0.5f, 0.5f));
    let x_3471 : vec4<f32> = u_xlat6;
    u_xlat6 = vec4<f32>(x_3470.x, x_3470.y, x_3471.z, x_3471.w);
    let x_3478 : vec4<f32> = u_xlat6;
    let x_3481 : f32 = x_90.x_GlobalMipBias.x;
    let x_3482 : vec4<f32> = textureSampleBias(x_MainLightCookieTexture, sampler_MainLightCookieTexture, vec2<f32>(x_3478.x, x_3478.y), x_3481);
    u_xlat8 = x_3482;
    let x_3484 : f32 = x_3422.x_MainLightCookieTextureFormat;
    let x_3486 : f32 = x_3422.x_MainLightCookieTextureFormat;
    let x_3488 : f32 = x_3422.x_MainLightCookieTextureFormat;
    let x_3490 : f32 = x_3422.x_MainLightCookieTextureFormat;
    let x_3491 : vec4<f32> = vec4<f32>(x_3484, x_3486, x_3488, x_3490);
    let x_3498 : vec4<bool> = (vec4<f32>(x_3491.x, x_3491.y, x_3491.z, x_3491.w) == vec4<f32>(0.0f, 1.0f, 0.0f, 0.0f));
    let x_3499 : vec2<bool> = vec2<bool>(x_3498.x, x_3498.y);
    let x_3500 : vec4<bool> = u_xlatb6;
    u_xlatb6 = vec4<bool>(x_3499.x, x_3499.y, x_3500.z, x_3500.w);
    let x_3503 : bool = u_xlatb6.y;
    if (x_3503) {
      let x_3508 : f32 = u_xlat8.w;
      x_3504 = x_3508;
    } else {
      let x_3511 : f32 = u_xlat8.x;
      x_3504 = x_3511;
    }
    let x_3512 : f32 = x_3504;
    u_xlat68 = x_3512;
    let x_3514 : bool = u_xlatb6.x;
    if (x_3514) {
      let x_3518 : vec4<f32> = u_xlat8;
      x_3515 = vec3<f32>(x_3518.x, x_3518.y, x_3518.z);
    } else {
      let x_3521 : f32 = u_xlat68;
      x_3515 = vec3<f32>(x_3521, x_3521, x_3521);
    }
    let x_3523 : vec3<f32> = x_3515;
    let x_3524 : vec4<f32> = u_xlat6;
    u_xlat6 = vec4<f32>(x_3523.x, x_3523.y, x_3523.z, x_3524.w);
  } else {
    u_xlat6.x = 1.0f;
    u_xlat6.y = 1.0f;
    u_xlat6.z = 1.0f;
  }
  let x_3530 : vec4<f32> = u_xlat6;
  let x_3533 : vec4<f32> = x_90.x_MainLightColor;
  let x_3535 : vec3<f32> = (vec3<f32>(x_3530.x, x_3530.y, x_3530.z) * vec3<f32>(x_3533.x, x_3533.y, x_3533.z));
  let x_3536 : vec4<f32> = u_xlat6;
  u_xlat6 = vec4<f32>(x_3535.x, x_3535.y, x_3535.z, x_3536.w);
  let x_3538 : f32 = u_xlat29;
  let x_3540 : vec4<f32> = u_xlat6;
  let x_3542 : vec3<f32> = (vec3<f32>(x_3538, x_3538, x_3538) * vec3<f32>(x_3540.x, x_3540.y, x_3540.z));
  let x_3543 : vec4<f32> = u_xlat6;
  u_xlat6 = vec4<f32>(x_3542.x, x_3542.y, x_3542.z, x_3543.w);
  let x_3545 : vec3<f32> = u_xlat2;
  let x_3547 : vec4<f32> = u_xlat3;
  u_xlat68 = dot(-(x_3545), vec3<f32>(x_3547.x, x_3547.y, x_3547.z));
  let x_3550 : f32 = u_xlat68;
  let x_3551 : f32 = u_xlat68;
  u_xlat68 = (x_3550 + x_3551);
  let x_3553 : vec4<f32> = u_xlat3;
  let x_3555 : f32 = u_xlat68;
  let x_3559 : vec3<f32> = u_xlat2;
  let x_3561 : vec3<f32> = ((vec3<f32>(x_3553.x, x_3553.y, x_3553.z) * -(vec3<f32>(x_3555, x_3555, x_3555))) + -(x_3559));
  let x_3562 : vec4<f32> = u_xlat8;
  u_xlat8 = vec4<f32>(x_3561.x, x_3561.y, x_3561.z, x_3562.w);
  let x_3564 : vec4<f32> = u_xlat3;
  let x_3566 : vec3<f32> = u_xlat2;
  u_xlat68 = dot(vec3<f32>(x_3564.x, x_3564.y, x_3564.z), x_3566);
  let x_3568 : f32 = u_xlat68;
  u_xlat68 = clamp(x_3568, 0.0f, 1.0f);
  let x_3570 : f32 = u_xlat68;
  u_xlat68 = (-(x_3570) + 1.0f);
  let x_3573 : f32 = u_xlat68;
  let x_3574 : f32 = u_xlat68;
  u_xlat68 = (x_3573 * x_3574);
  let x_3576 : f32 = u_xlat68;
  let x_3577 : f32 = u_xlat68;
  u_xlat68 = (x_3576 * x_3577);
  let x_3580 : f32 = u_xlat45.x;
  u_xlat70 = ((-(x_3580) * 0.699999988f) + 1.700000048f);
  let x_3587 : f32 = u_xlat45.x;
  let x_3588 : f32 = u_xlat70;
  u_xlat45.x = (x_3587 * x_3588);
  let x_3592 : f32 = u_xlat45.x;
  u_xlat45.x = (x_3592 * 6.0f);
  let x_3604 : vec4<f32> = u_xlat8;
  let x_3607 : f32 = u_xlat45.x;
  let x_3608 : vec4<f32> = textureSampleLevel(unity_SpecCube0, samplerunity_SpecCube0, vec3<f32>(x_3604.x, x_3604.y, x_3604.z), x_3607);
  u_xlat8 = x_3608;
  let x_3610 : f32 = u_xlat8.w;
  u_xlat45.x = (x_3610 + -1.0f);
  let x_3614 : f32 = x_161.unity_SpecCube0_HDR.w;
  let x_3616 : f32 = u_xlat45.x;
  u_xlat45.x = ((x_3614 * x_3616) + 1.0f);
  let x_3621 : f32 = u_xlat45.x;
  u_xlat45.x = max(x_3621, 0.0f);
  let x_3625 : f32 = u_xlat45.x;
  u_xlat45.x = log2(x_3625);
  let x_3629 : f32 = u_xlat45.x;
  let x_3631 : f32 = x_161.unity_SpecCube0_HDR.y;
  u_xlat45.x = (x_3629 * x_3631);
  let x_3635 : f32 = u_xlat45.x;
  u_xlat45.x = exp2(x_3635);
  let x_3639 : f32 = u_xlat45.x;
  let x_3641 : f32 = x_161.unity_SpecCube0_HDR.x;
  u_xlat45.x = (x_3639 * x_3641);
  let x_3644 : vec4<f32> = u_xlat8;
  let x_3646 : vec2<f32> = u_xlat45;
  let x_3648 : vec3<f32> = (vec3<f32>(x_3644.x, x_3644.y, x_3644.z) * vec3<f32>(x_3646.x, x_3646.x, x_3646.x));
  let x_3649 : vec4<f32> = u_xlat8;
  u_xlat8 = vec4<f32>(x_3648.x, x_3648.y, x_3648.z, x_3649.w);
  let x_3651 : f32 = u_xlat67;
  let x_3653 : f32 = u_xlat67;
  u_xlat45 = ((vec2<f32>(x_3651, x_3651) * vec2<f32>(x_3653, x_3653)) + vec2<f32>(-1.0f, 1.0f));
  let x_3659 : f32 = u_xlat45.y;
  u_xlat67 = (1.0f / x_3659);
  let x_3662 : f32 = u_xlat5.x;
  u_xlat70 = (x_3662 + -0.039999999f);
  let x_3665 : f32 = u_xlat68;
  let x_3666 : f32 = u_xlat70;
  u_xlat68 = ((x_3665 * x_3666) + 0.039999999f);
  let x_3670 : f32 = u_xlat67;
  let x_3671 : f32 = u_xlat68;
  u_xlat67 = (x_3670 * x_3671);
  let x_3673 : f32 = u_xlat67;
  let x_3675 : vec4<f32> = u_xlat8;
  let x_3677 : vec3<f32> = (vec3<f32>(x_3673, x_3673, x_3673) * vec3<f32>(x_3675.x, x_3675.y, x_3675.z));
  let x_3678 : vec4<f32> = u_xlat8;
  u_xlat8 = vec4<f32>(x_3677.x, x_3677.y, x_3677.z, x_3678.w);
  let x_3680 : vec3<f32> = u_xlat27;
  let x_3681 : vec3<f32> = u_xlat4;
  let x_3683 : vec4<f32> = u_xlat8;
  let x_3685 : vec3<f32> = ((x_3680 * x_3681) + vec3<f32>(x_3683.x, x_3683.y, x_3683.z));
  let x_3686 : vec4<f32> = u_xlat5;
  u_xlat5 = vec4<f32>(x_3685.x, x_3685.y, x_3685.z, x_3686.w);
  let x_3688 : f32 = u_xlat66;
  let x_3690 : f32 = x_161.unity_LightData.z;
  u_xlat66 = (x_3688 * x_3690);
  let x_3692 : vec4<f32> = u_xlat3;
  let x_3695 : vec4<f32> = x_90.x_MainLightPosition;
  u_xlat67 = dot(vec3<f32>(x_3692.x, x_3692.y, x_3692.z), vec3<f32>(x_3695.x, x_3695.y, x_3695.z));
  let x_3698 : f32 = u_xlat67;
  u_xlat67 = clamp(x_3698, 0.0f, 1.0f);
  let x_3700 : f32 = u_xlat66;
  let x_3701 : f32 = u_xlat67;
  u_xlat66 = (x_3700 * x_3701);
  let x_3703 : f32 = u_xlat66;
  let x_3705 : vec4<f32> = u_xlat6;
  let x_3707 : vec3<f32> = (vec3<f32>(x_3703, x_3703, x_3703) * vec3<f32>(x_3705.x, x_3705.y, x_3705.z));
  let x_3708 : vec4<f32> = u_xlat6;
  u_xlat6 = vec4<f32>(x_3707.x, x_3707.y, x_3707.z, x_3708.w);
  let x_3710 : vec3<f32> = u_xlat2;
  let x_3712 : vec4<f32> = x_90.x_MainLightPosition;
  let x_3714 : vec3<f32> = (x_3710 + vec3<f32>(x_3712.x, x_3712.y, x_3712.z));
  let x_3715 : vec4<f32> = u_xlat8;
  u_xlat8 = vec4<f32>(x_3714.x, x_3714.y, x_3714.z, x_3715.w);
  let x_3717 : vec4<f32> = u_xlat8;
  let x_3719 : vec4<f32> = u_xlat8;
  u_xlat66 = dot(vec3<f32>(x_3717.x, x_3717.y, x_3717.z), vec3<f32>(x_3719.x, x_3719.y, x_3719.z));
  let x_3722 : f32 = u_xlat66;
  u_xlat66 = max(x_3722, 1.17549435e-37f);
  let x_3725 : f32 = u_xlat66;
  u_xlat66 = inverseSqrt(x_3725);
  let x_3727 : f32 = u_xlat66;
  let x_3729 : vec4<f32> = u_xlat8;
  let x_3731 : vec3<f32> = (vec3<f32>(x_3727, x_3727, x_3727) * vec3<f32>(x_3729.x, x_3729.y, x_3729.z));
  let x_3732 : vec4<f32> = u_xlat8;
  u_xlat8 = vec4<f32>(x_3731.x, x_3731.y, x_3731.z, x_3732.w);
  let x_3734 : vec4<f32> = u_xlat3;
  let x_3736 : vec4<f32> = u_xlat8;
  u_xlat66 = dot(vec3<f32>(x_3734.x, x_3734.y, x_3734.z), vec3<f32>(x_3736.x, x_3736.y, x_3736.z));
  let x_3739 : f32 = u_xlat66;
  u_xlat66 = clamp(x_3739, 0.0f, 1.0f);
  let x_3742 : vec4<f32> = x_90.x_MainLightPosition;
  let x_3744 : vec4<f32> = u_xlat8;
  u_xlat67 = dot(vec3<f32>(x_3742.x, x_3742.y, x_3742.z), vec3<f32>(x_3744.x, x_3744.y, x_3744.z));
  let x_3747 : f32 = u_xlat67;
  u_xlat67 = clamp(x_3747, 0.0f, 1.0f);
  let x_3749 : f32 = u_xlat66;
  let x_3750 : f32 = u_xlat66;
  u_xlat66 = (x_3749 * x_3750);
  let x_3752 : f32 = u_xlat66;
  let x_3754 : f32 = u_xlat45.x;
  u_xlat66 = ((x_3752 * x_3754) + 1.000010014f);
  let x_3758 : f32 = u_xlat67;
  let x_3759 : f32 = u_xlat67;
  u_xlat67 = (x_3758 * x_3759);
  let x_3761 : f32 = u_xlat66;
  let x_3762 : f32 = u_xlat66;
  u_xlat66 = (x_3761 * x_3762);
  let x_3764 : f32 = u_xlat67;
  u_xlat67 = max(x_3764, 0.100000001f);
  let x_3767 : f32 = u_xlat66;
  let x_3768 : f32 = u_xlat67;
  u_xlat66 = (x_3767 * x_3768);
  let x_3770 : f32 = u_xlat72;
  let x_3771 : f32 = u_xlat66;
  u_xlat66 = (x_3770 * x_3771);
  let x_3773 : f32 = u_xlat69;
  let x_3774 : f32 = u_xlat66;
  u_xlat66 = (x_3773 / x_3774);
  let x_3776 : f32 = u_xlat66;
  let x_3780 : vec3<f32> = u_xlat4;
  let x_3781 : vec3<f32> = ((vec3<f32>(x_3776, x_3776, x_3776) * vec3<f32>(0.039999999f, 0.039999999f, 0.039999999f)) + x_3780);
  let x_3782 : vec4<f32> = u_xlat8;
  u_xlat8 = vec4<f32>(x_3781.x, x_3781.y, x_3781.z, x_3782.w);
  let x_3784 : vec4<f32> = u_xlat6;
  let x_3786 : vec4<f32> = u_xlat8;
  let x_3788 : vec3<f32> = (vec3<f32>(x_3784.x, x_3784.y, x_3784.z) * vec3<f32>(x_3786.x, x_3786.y, x_3786.z));
  let x_3789 : vec4<f32> = u_xlat6;
  u_xlat6 = vec4<f32>(x_3788.x, x_3788.y, x_3788.z, x_3789.w);
  let x_3792 : f32 = x_90.x_AdditionalLightsCount.x;
  let x_3794 : f32 = x_161.unity_LightData.y;
  u_xlat66 = min(x_3792, x_3794);
  let x_3796 : f32 = u_xlat66;
  u_xlatu66 = bitcast<u32>(i32(x_3796));
  let x_3800 : f32 = x_3422.x_AdditionalLightsCookieAtlasTextureFormat;
  let x_3802 : f32 = x_3422.x_AdditionalLightsCookieAtlasTextureFormat;
  let x_3804 : f32 = x_3422.x_AdditionalLightsCookieAtlasTextureFormat;
  let x_3806 : f32 = x_3422.x_AdditionalLightsCookieAtlasTextureFormat;
  let x_3807 : vec4<f32> = vec4<f32>(x_3800, x_3802, x_3804, x_3806);
  let x_3814 : vec4<bool> = (vec4<f32>(x_3807.x, x_3807.y, x_3807.z, x_3807.w) == vec4<f32>(0.0f, 1.0f, 0.0f, 1.0f));
  u_xlatb51 = vec2<bool>(x_3814.x, x_3814.y);
  u_xlat8.x = 0.0f;
  u_xlat8.y = 0.0f;
  u_xlat8.z = 0.0f;
  u_xlatu_loop_1 = 0u;
  loop {
    let x_3825 : u32 = u_xlatu_loop_1;
    let x_3826 : u32 = u_xlatu66;
    if ((x_3825 < x_3826)) {
    } else {
      break;
    }
    let x_3829 : u32 = u_xlatu_loop_1;
    u_xlatu68 = (x_3829 >> 2u);
    let x_3832 : u32 = u_xlatu_loop_1;
    u_xlati70 = bitcast<i32>((x_3832 & 3u));
    let x_3835 : u32 = u_xlatu68;
    let x_3838 : vec4<f32> = x_161.unity_LightIndices[bitcast<i32>(x_3835)];
    let x_3848 : i32 = u_xlati70;
    indexable = array<vec4<u32>, 4u>(vec4<u32>(1065353216u, 0u, 0u, 0u), vec4<u32>(0u, 1065353216u, 0u, 0u), vec4<u32>(0u, 0u, 1065353216u, 0u), vec4<u32>(0u, 0u, 0u, 1065353216u));
    let x_3853 : vec4<u32> = indexable[x_3848];
    u_xlat68 = dot(x_3838, bitcast<vec4<f32>>(x_3853));
    let x_3856 : f32 = u_xlat68;
    u_xlatu68 = bitcast<u32>(i32(x_3856));
    let x_3859 : vec3<f32> = vs_INTERP0;
    let x_3871 : u32 = u_xlatu68;
    let x_3874 : vec4<f32> = x_3870.x_AdditionalLightsPosition[bitcast<i32>(x_3871)];
    let x_3877 : u32 = u_xlatu68;
    let x_3880 : vec4<f32> = x_3870.x_AdditionalLightsPosition[bitcast<i32>(x_3877)];
    let x_3882 : vec3<f32> = ((-(x_3859) * vec3<f32>(x_3874.w, x_3874.w, x_3874.w)) + vec3<f32>(x_3880.x, x_3880.y, x_3880.z));
    let x_3883 : vec4<f32> = u_xlat9;
    u_xlat9 = vec4<f32>(x_3882.x, x_3882.y, x_3882.z, x_3883.w);
    let x_3885 : vec4<f32> = u_xlat9;
    let x_3887 : vec4<f32> = u_xlat9;
    u_xlat70 = dot(vec3<f32>(x_3885.x, x_3885.y, x_3885.z), vec3<f32>(x_3887.x, x_3887.y, x_3887.z));
    let x_3890 : f32 = u_xlat70;
    u_xlat70 = max(x_3890, 6.10351562e-05f);
    let x_3894 : f32 = u_xlat70;
    u_xlat71 = inverseSqrt(x_3894);
    let x_3896 : f32 = u_xlat71;
    let x_3898 : vec4<f32> = u_xlat9;
    let x_3900 : vec3<f32> = (vec3<f32>(x_3896, x_3896, x_3896) * vec3<f32>(x_3898.x, x_3898.y, x_3898.z));
    let x_3901 : vec4<f32> = u_xlat10;
    u_xlat10 = vec4<f32>(x_3900.x, x_3900.y, x_3900.z, x_3901.w);
    let x_3904 : f32 = u_xlat70;
    u_xlat74 = (1.0f / x_3904);
    let x_3906 : f32 = u_xlat70;
    let x_3907 : u32 = u_xlatu68;
    let x_3910 : f32 = x_3870.x_AdditionalLightsAttenuation[bitcast<i32>(x_3907)].x;
    u_xlat70 = (x_3906 * x_3910);
    let x_3912 : f32 = u_xlat70;
    let x_3914 : f32 = u_xlat70;
    u_xlat70 = ((-(x_3912) * x_3914) + 1.0f);
    let x_3917 : f32 = u_xlat70;
    u_xlat70 = max(x_3917, 0.0f);
    let x_3919 : f32 = u_xlat70;
    let x_3920 : f32 = u_xlat70;
    u_xlat70 = (x_3919 * x_3920);
    let x_3922 : f32 = u_xlat70;
    let x_3923 : f32 = u_xlat74;
    u_xlat70 = (x_3922 * x_3923);
    let x_3925 : u32 = u_xlatu68;
    let x_3928 : vec4<f32> = x_3870.x_AdditionalLightsSpotDir[bitcast<i32>(x_3925)];
    let x_3930 : vec4<f32> = u_xlat10;
    u_xlat74 = dot(vec3<f32>(x_3928.x, x_3928.y, x_3928.z), vec3<f32>(x_3930.x, x_3930.y, x_3930.z));
    let x_3933 : f32 = u_xlat74;
    let x_3934 : u32 = u_xlatu68;
    let x_3937 : f32 = x_3870.x_AdditionalLightsAttenuation[bitcast<i32>(x_3934)].z;
    let x_3939 : u32 = u_xlatu68;
    let x_3942 : f32 = x_3870.x_AdditionalLightsAttenuation[bitcast<i32>(x_3939)].w;
    u_xlat74 = ((x_3933 * x_3937) + x_3942);
    let x_3944 : f32 = u_xlat74;
    u_xlat74 = clamp(x_3944, 0.0f, 1.0f);
    let x_3946 : f32 = u_xlat74;
    let x_3947 : f32 = u_xlat74;
    u_xlat74 = (x_3946 * x_3947);
    let x_3949 : f32 = u_xlat70;
    let x_3950 : f32 = u_xlat74;
    u_xlat70 = (x_3949 * x_3950);
    let x_3953 : u32 = u_xlatu68;
    u_xlatu74 = (x_3953 >> 5u);
    let x_3956 : u32 = u_xlatu68;
    u_xlati75 = (1i << bitcast<u32>((bitcast<i32>(x_3956) & 31i)));
    let x_3962 : i32 = u_xlati75;
    let x_3964 : u32 = u_xlatu74;
    let x_3967 : f32 = x_3422.x_AdditionalLightsCookieEnableBits[bitcast<i32>(x_3964)].el;
    u_xlati74 = bitcast<i32>((bitcast<u32>(x_3962) & bitcast<u32>(x_3967)));
    let x_3971 : i32 = u_xlati74;
    if ((x_3971 != 0i)) {
      let x_3981 : u32 = u_xlatu68;
      let x_3984 : f32 = x_3980.x_AdditionalLightsLightTypes[bitcast<i32>(x_3981)].el;
      u_xlati74 = i32(x_3984);
      let x_3986 : i32 = u_xlati74;
      u_xlati75 = select(1i, 0i, (x_3986 != 0i));
      let x_3990 : u32 = u_xlatu68;
      u_xlati76 = (bitcast<i32>(x_3990) << bitcast<u32>(2i));
      let x_3993 : i32 = u_xlati75;
      if ((x_3993 != 0i)) {
        let x_3997 : vec3<f32> = vs_INTERP0;
        let x_3999 : i32 = u_xlati76;
        let x_4002 : i32 = u_xlati76;
        let x_4006 : vec4<f32> = x_3980.x_AdditionalLightsWorldToLights[((x_3999 + 1i) / 4i)][((x_4002 + 1i) % 4i)];
        let x_4008 : vec3<f32> = (vec3<f32>(x_3997.y, x_3997.y, x_3997.y) * vec3<f32>(x_4006.x, x_4006.y, x_4006.w));
        let x_4009 : vec4<f32> = u_xlat11;
        u_xlat11 = vec4<f32>(x_4008.x, x_4008.y, x_4008.z, x_4009.w);
        let x_4011 : i32 = u_xlati76;
        let x_4013 : i32 = u_xlati76;
        let x_4016 : vec4<f32> = x_3980.x_AdditionalLightsWorldToLights[(x_4011 / 4i)][(x_4013 % 4i)];
        let x_4018 : vec3<f32> = vs_INTERP0;
        let x_4021 : vec4<f32> = u_xlat11;
        let x_4023 : vec3<f32> = ((vec3<f32>(x_4016.x, x_4016.y, x_4016.w) * vec3<f32>(x_4018.x, x_4018.x, x_4018.x)) + vec3<f32>(x_4021.x, x_4021.y, x_4021.z));
        let x_4024 : vec4<f32> = u_xlat11;
        u_xlat11 = vec4<f32>(x_4023.x, x_4023.y, x_4023.z, x_4024.w);
        let x_4026 : i32 = u_xlati76;
        let x_4029 : i32 = u_xlati76;
        let x_4033 : vec4<f32> = x_3980.x_AdditionalLightsWorldToLights[((x_4026 + 2i) / 4i)][((x_4029 + 2i) % 4i)];
        let x_4035 : vec3<f32> = vs_INTERP0;
        let x_4038 : vec4<f32> = u_xlat11;
        let x_4040 : vec3<f32> = ((vec3<f32>(x_4033.x, x_4033.y, x_4033.w) * vec3<f32>(x_4035.z, x_4035.z, x_4035.z)) + vec3<f32>(x_4038.x, x_4038.y, x_4038.z));
        let x_4041 : vec4<f32> = u_xlat11;
        u_xlat11 = vec4<f32>(x_4040.x, x_4040.y, x_4040.z, x_4041.w);
        let x_4043 : vec4<f32> = u_xlat11;
        let x_4045 : i32 = u_xlati76;
        let x_4048 : i32 = u_xlati76;
        let x_4052 : vec4<f32> = x_3980.x_AdditionalLightsWorldToLights[((x_4045 + 3i) / 4i)][((x_4048 + 3i) % 4i)];
        let x_4054 : vec3<f32> = (vec3<f32>(x_4043.x, x_4043.y, x_4043.z) + vec3<f32>(x_4052.x, x_4052.y, x_4052.w));
        let x_4055 : vec4<f32> = u_xlat11;
        u_xlat11 = vec4<f32>(x_4054.x, x_4054.y, x_4054.z, x_4055.w);
        let x_4057 : vec4<f32> = u_xlat11;
        let x_4059 : vec4<f32> = u_xlat11;
        let x_4061 : vec2<f32> = (vec2<f32>(x_4057.x, x_4057.y) / vec2<f32>(x_4059.z, x_4059.z));
        let x_4062 : vec4<f32> = u_xlat11;
        u_xlat11 = vec4<f32>(x_4061.x, x_4061.y, x_4062.z, x_4062.w);
        let x_4064 : vec4<f32> = u_xlat11;
        let x_4067 : vec2<f32> = ((vec2<f32>(x_4064.x, x_4064.y) * vec2<f32>(0.5f, 0.5f)) + vec2<f32>(0.5f, 0.5f));
        let x_4068 : vec4<f32> = u_xlat11;
        u_xlat11 = vec4<f32>(x_4067.x, x_4067.y, x_4068.z, x_4068.w);
        let x_4070 : vec4<f32> = u_xlat11;
        let x_4074 : vec2<f32> = clamp(vec2<f32>(x_4070.x, x_4070.y), vec2<f32>(0.0f, 0.0f), vec2<f32>(1.0f, 1.0f));
        let x_4075 : vec4<f32> = u_xlat11;
        u_xlat11 = vec4<f32>(x_4074.x, x_4074.y, x_4075.z, x_4075.w);
        let x_4077 : u32 = u_xlatu68;
        let x_4080 : vec4<f32> = x_3980.x_AdditionalLightsCookieAtlasUVRects[bitcast<i32>(x_4077)];
        let x_4082 : vec4<f32> = u_xlat11;
        let x_4085 : u32 = u_xlatu68;
        let x_4088 : vec4<f32> = x_3980.x_AdditionalLightsCookieAtlasUVRects[bitcast<i32>(x_4085)];
        let x_4090 : vec2<f32> = ((vec2<f32>(x_4080.x, x_4080.y) * vec2<f32>(x_4082.x, x_4082.y)) + vec2<f32>(x_4088.z, x_4088.w));
        let x_4091 : vec4<f32> = u_xlat11;
        u_xlat11 = vec4<f32>(x_4090.x, x_4090.y, x_4091.z, x_4091.w);
      } else {
        let x_4095 : i32 = u_xlati74;
        u_xlatb74 = (x_4095 == 1i);
        let x_4097 : bool = u_xlatb74;
        u_xlati74 = select(0i, 1i, x_4097);
        let x_4099 : i32 = u_xlati74;
        if ((x_4099 != 0i)) {
          let x_4103 : vec3<f32> = vs_INTERP0;
          let x_4105 : i32 = u_xlati76;
          let x_4108 : i32 = u_xlati76;
          let x_4112 : vec4<f32> = x_3980.x_AdditionalLightsWorldToLights[((x_4105 + 1i) / 4i)][((x_4108 + 1i) % 4i)];
          u_xlat55 = (vec2<f32>(x_4103.y, x_4103.y) * vec2<f32>(x_4112.x, x_4112.y));
          let x_4115 : i32 = u_xlati76;
          let x_4117 : i32 = u_xlati76;
          let x_4120 : vec4<f32> = x_3980.x_AdditionalLightsWorldToLights[(x_4115 / 4i)][(x_4117 % 4i)];
          let x_4122 : vec3<f32> = vs_INTERP0;
          let x_4125 : vec2<f32> = u_xlat55;
          u_xlat55 = ((vec2<f32>(x_4120.x, x_4120.y) * vec2<f32>(x_4122.x, x_4122.x)) + x_4125);
          let x_4127 : i32 = u_xlati76;
          let x_4130 : i32 = u_xlati76;
          let x_4134 : vec4<f32> = x_3980.x_AdditionalLightsWorldToLights[((x_4127 + 2i) / 4i)][((x_4130 + 2i) % 4i)];
          let x_4136 : vec3<f32> = vs_INTERP0;
          let x_4139 : vec2<f32> = u_xlat55;
          u_xlat55 = ((vec2<f32>(x_4134.x, x_4134.y) * vec2<f32>(x_4136.z, x_4136.z)) + x_4139);
          let x_4141 : vec2<f32> = u_xlat55;
          let x_4142 : i32 = u_xlati76;
          let x_4145 : i32 = u_xlati76;
          let x_4149 : vec4<f32> = x_3980.x_AdditionalLightsWorldToLights[((x_4142 + 3i) / 4i)][((x_4145 + 3i) % 4i)];
          u_xlat55 = (x_4141 + vec2<f32>(x_4149.x, x_4149.y));
          let x_4152 : vec2<f32> = u_xlat55;
          u_xlat55 = ((x_4152 * vec2<f32>(0.5f, 0.5f)) + vec2<f32>(0.5f, 0.5f));
          let x_4155 : vec2<f32> = u_xlat55;
          u_xlat55 = fract(x_4155);
          let x_4157 : u32 = u_xlatu68;
          let x_4160 : vec4<f32> = x_3980.x_AdditionalLightsCookieAtlasUVRects[bitcast<i32>(x_4157)];
          let x_4162 : vec2<f32> = u_xlat55;
          let x_4164 : u32 = u_xlatu68;
          let x_4167 : vec4<f32> = x_3980.x_AdditionalLightsCookieAtlasUVRects[bitcast<i32>(x_4164)];
          let x_4169 : vec2<f32> = ((vec2<f32>(x_4160.x, x_4160.y) * x_4162) + vec2<f32>(x_4167.z, x_4167.w));
          let x_4170 : vec4<f32> = u_xlat11;
          u_xlat11 = vec4<f32>(x_4169.x, x_4169.y, x_4170.z, x_4170.w);
        } else {
          let x_4173 : vec3<f32> = vs_INTERP0;
          let x_4175 : i32 = u_xlati76;
          let x_4178 : i32 = u_xlati76;
          let x_4182 : vec4<f32> = x_3980.x_AdditionalLightsWorldToLights[((x_4175 + 1i) / 4i)][((x_4178 + 1i) % 4i)];
          u_xlat12 = (vec4<f32>(x_4173.y, x_4173.y, x_4173.y, x_4173.y) * x_4182);
          let x_4184 : i32 = u_xlati76;
          let x_4186 : i32 = u_xlati76;
          let x_4189 : vec4<f32> = x_3980.x_AdditionalLightsWorldToLights[(x_4184 / 4i)][(x_4186 % 4i)];
          let x_4190 : vec3<f32> = vs_INTERP0;
          let x_4193 : vec4<f32> = u_xlat12;
          u_xlat12 = ((x_4189 * vec4<f32>(x_4190.x, x_4190.x, x_4190.x, x_4190.x)) + x_4193);
          let x_4195 : i32 = u_xlati76;
          let x_4198 : i32 = u_xlati76;
          let x_4202 : vec4<f32> = x_3980.x_AdditionalLightsWorldToLights[((x_4195 + 2i) / 4i)][((x_4198 + 2i) % 4i)];
          let x_4203 : vec3<f32> = vs_INTERP0;
          let x_4206 : vec4<f32> = u_xlat12;
          u_xlat12 = ((x_4202 * vec4<f32>(x_4203.z, x_4203.z, x_4203.z, x_4203.z)) + x_4206);
          let x_4208 : vec4<f32> = u_xlat12;
          let x_4209 : i32 = u_xlati76;
          let x_4212 : i32 = u_xlati76;
          let x_4216 : vec4<f32> = x_3980.x_AdditionalLightsWorldToLights[((x_4209 + 3i) / 4i)][((x_4212 + 3i) % 4i)];
          u_xlat12 = (x_4208 + x_4216);
          let x_4218 : vec4<f32> = u_xlat12;
          let x_4220 : vec4<f32> = u_xlat12;
          let x_4222 : vec3<f32> = (vec3<f32>(x_4218.x, x_4218.y, x_4218.z) / vec3<f32>(x_4220.w, x_4220.w, x_4220.w));
          let x_4223 : vec4<f32> = u_xlat12;
          u_xlat12 = vec4<f32>(x_4222.x, x_4222.y, x_4222.z, x_4223.w);
          let x_4225 : vec4<f32> = u_xlat12;
          let x_4227 : vec4<f32> = u_xlat12;
          u_xlat74 = dot(vec3<f32>(x_4225.x, x_4225.y, x_4225.z), vec3<f32>(x_4227.x, x_4227.y, x_4227.z));
          let x_4230 : f32 = u_xlat74;
          u_xlat74 = inverseSqrt(x_4230);
          let x_4232 : f32 = u_xlat74;
          let x_4234 : vec4<f32> = u_xlat12;
          let x_4236 : vec3<f32> = (vec3<f32>(x_4232, x_4232, x_4232) * vec3<f32>(x_4234.x, x_4234.y, x_4234.z));
          let x_4237 : vec4<f32> = u_xlat12;
          u_xlat12 = vec4<f32>(x_4236.x, x_4236.y, x_4236.z, x_4237.w);
          let x_4239 : vec4<f32> = u_xlat12;
          u_xlat74 = dot(abs(vec3<f32>(x_4239.x, x_4239.y, x_4239.z)), vec3<f32>(1.0f, 1.0f, 1.0f));
          let x_4244 : f32 = u_xlat74;
          u_xlat74 = max(x_4244, 0.000001f);
          let x_4247 : f32 = u_xlat74;
          u_xlat74 = (1.0f / x_4247);
          let x_4249 : f32 = u_xlat74;
          let x_4251 : vec4<f32> = u_xlat12;
          let x_4253 : vec3<f32> = (vec3<f32>(x_4249, x_4249, x_4249) * vec3<f32>(x_4251.z, x_4251.x, x_4251.y));
          let x_4254 : vec4<f32> = u_xlat13;
          u_xlat13 = vec4<f32>(x_4253.x, x_4253.y, x_4253.z, x_4254.w);
          let x_4257 : f32 = u_xlat13.x;
          u_xlat13.x = -(x_4257);
          let x_4261 : f32 = u_xlat13.x;
          u_xlat13.x = clamp(x_4261, 0.0f, 1.0f);
          let x_4265 : vec4<f32> = u_xlat13;
          let x_4268 : vec4<bool> = (vec4<f32>(x_4265.y, x_4265.z, x_4265.y, x_4265.z) >= vec4<f32>(0.0f, 0.0f, 0.0f, 0.0f));
          u_xlatb55 = vec2<bool>(x_4268.x, x_4268.y);
          let x_4271 : bool = u_xlatb55.x;
          if (x_4271) {
            let x_4276 : f32 = u_xlat13.x;
            x_4272 = x_4276;
          } else {
            let x_4279 : f32 = u_xlat13.x;
            x_4272 = -(x_4279);
          }
          let x_4281 : f32 = x_4272;
          u_xlat55.x = x_4281;
          let x_4284 : bool = u_xlatb55.y;
          if (x_4284) {
            let x_4289 : f32 = u_xlat13.x;
            x_4285 = x_4289;
          } else {
            let x_4292 : f32 = u_xlat13.x;
            x_4285 = -(x_4292);
          }
          let x_4294 : f32 = x_4285;
          u_xlat55.y = x_4294;
          let x_4296 : vec4<f32> = u_xlat12;
          let x_4298 : f32 = u_xlat74;
          let x_4301 : vec2<f32> = u_xlat55;
          u_xlat55 = ((vec2<f32>(x_4296.x, x_4296.y) * vec2<f32>(x_4298, x_4298)) + x_4301);
          let x_4303 : vec2<f32> = u_xlat55;
          u_xlat55 = ((x_4303 * vec2<f32>(0.5f, 0.5f)) + vec2<f32>(0.5f, 0.5f));
          let x_4306 : vec2<f32> = u_xlat55;
          u_xlat55 = clamp(x_4306, vec2<f32>(0.0f, 0.0f), vec2<f32>(1.0f, 1.0f));
          let x_4310 : u32 = u_xlatu68;
          let x_4313 : vec4<f32> = x_3980.x_AdditionalLightsCookieAtlasUVRects[bitcast<i32>(x_4310)];
          let x_4315 : vec2<f32> = u_xlat55;
          let x_4317 : u32 = u_xlatu68;
          let x_4320 : vec4<f32> = x_3980.x_AdditionalLightsCookieAtlasUVRects[bitcast<i32>(x_4317)];
          let x_4322 : vec2<f32> = ((vec2<f32>(x_4313.x, x_4313.y) * x_4315) + vec2<f32>(x_4320.z, x_4320.w));
          let x_4323 : vec4<f32> = u_xlat11;
          u_xlat11 = vec4<f32>(x_4322.x, x_4322.y, x_4323.z, x_4323.w);
        }
      }
      let x_4330 : vec4<f32> = u_xlat11;
      let x_4333 : f32 = x_90.x_GlobalMipBias.x;
      let x_4334 : vec4<f32> = textureSampleBias(x_AdditionalLightsCookieAtlasTexture, sampler_AdditionalLightsCookieAtlasTexture, vec2<f32>(x_4330.x, x_4330.y), x_4333);
      u_xlat11 = x_4334;
      let x_4336 : bool = u_xlatb51.y;
      if (x_4336) {
        let x_4341 : f32 = u_xlat11.w;
        x_4337 = x_4341;
      } else {
        let x_4344 : f32 = u_xlat11.x;
        x_4337 = x_4344;
      }
      let x_4345 : f32 = x_4337;
      u_xlat74 = x_4345;
      let x_4347 : bool = u_xlatb51.x;
      if (x_4347) {
        let x_4351 : vec4<f32> = u_xlat11;
        x_4348 = vec3<f32>(x_4351.x, x_4351.y, x_4351.z);
      } else {
        let x_4354 : f32 = u_xlat74;
        x_4348 = vec3<f32>(x_4354, x_4354, x_4354);
      }
      let x_4356 : vec3<f32> = x_4348;
      let x_4357 : vec4<f32> = u_xlat11;
      u_xlat11 = vec4<f32>(x_4356.x, x_4356.y, x_4356.z, x_4357.w);
    } else {
      u_xlat11.x = 1.0f;
      u_xlat11.y = 1.0f;
      u_xlat11.z = 1.0f;
    }
    let x_4363 : vec4<f32> = u_xlat11;
    let x_4365 : u32 = u_xlatu68;
    let x_4368 : vec4<f32> = x_3870.x_AdditionalLightsColor[bitcast<i32>(x_4365)];
    let x_4370 : vec3<f32> = (vec3<f32>(x_4363.x, x_4363.y, x_4363.z) * vec3<f32>(x_4368.x, x_4368.y, x_4368.z));
    let x_4371 : vec4<f32> = u_xlat11;
    u_xlat11 = vec4<f32>(x_4370.x, x_4370.y, x_4370.z, x_4371.w);
    let x_4373 : f32 = u_xlat29;
    let x_4375 : vec4<f32> = u_xlat11;
    let x_4377 : vec3<f32> = (vec3<f32>(x_4373, x_4373, x_4373) * vec3<f32>(x_4375.x, x_4375.y, x_4375.z));
    let x_4378 : vec4<f32> = u_xlat11;
    u_xlat11 = vec4<f32>(x_4377.x, x_4377.y, x_4377.z, x_4378.w);
    let x_4380 : vec4<f32> = u_xlat3;
    let x_4382 : vec4<f32> = u_xlat10;
    u_xlat68 = dot(vec3<f32>(x_4380.x, x_4380.y, x_4380.z), vec3<f32>(x_4382.x, x_4382.y, x_4382.z));
    let x_4385 : f32 = u_xlat68;
    u_xlat68 = clamp(x_4385, 0.0f, 1.0f);
    let x_4387 : f32 = u_xlat68;
    let x_4388 : f32 = u_xlat70;
    u_xlat68 = (x_4387 * x_4388);
    let x_4390 : f32 = u_xlat68;
    let x_4392 : vec4<f32> = u_xlat11;
    let x_4394 : vec3<f32> = (vec3<f32>(x_4390, x_4390, x_4390) * vec3<f32>(x_4392.x, x_4392.y, x_4392.z));
    let x_4395 : vec4<f32> = u_xlat11;
    u_xlat11 = vec4<f32>(x_4394.x, x_4394.y, x_4394.z, x_4395.w);
    let x_4397 : vec4<f32> = u_xlat9;
    let x_4399 : f32 = u_xlat71;
    let x_4402 : vec3<f32> = u_xlat2;
    let x_4403 : vec3<f32> = ((vec3<f32>(x_4397.x, x_4397.y, x_4397.z) * vec3<f32>(x_4399, x_4399, x_4399)) + x_4402);
    let x_4404 : vec4<f32> = u_xlat9;
    u_xlat9 = vec4<f32>(x_4403.x, x_4403.y, x_4403.z, x_4404.w);
    let x_4406 : vec4<f32> = u_xlat9;
    let x_4408 : vec4<f32> = u_xlat9;
    u_xlat68 = dot(vec3<f32>(x_4406.x, x_4406.y, x_4406.z), vec3<f32>(x_4408.x, x_4408.y, x_4408.z));
    let x_4411 : f32 = u_xlat68;
    u_xlat68 = max(x_4411, 1.17549435e-37f);
    let x_4413 : f32 = u_xlat68;
    u_xlat68 = inverseSqrt(x_4413);
    let x_4415 : f32 = u_xlat68;
    let x_4417 : vec4<f32> = u_xlat9;
    let x_4419 : vec3<f32> = (vec3<f32>(x_4415, x_4415, x_4415) * vec3<f32>(x_4417.x, x_4417.y, x_4417.z));
    let x_4420 : vec4<f32> = u_xlat9;
    u_xlat9 = vec4<f32>(x_4419.x, x_4419.y, x_4419.z, x_4420.w);
    let x_4422 : vec4<f32> = u_xlat3;
    let x_4424 : vec4<f32> = u_xlat9;
    u_xlat68 = dot(vec3<f32>(x_4422.x, x_4422.y, x_4422.z), vec3<f32>(x_4424.x, x_4424.y, x_4424.z));
    let x_4427 : f32 = u_xlat68;
    u_xlat68 = clamp(x_4427, 0.0f, 1.0f);
    let x_4429 : vec4<f32> = u_xlat10;
    let x_4431 : vec4<f32> = u_xlat9;
    u_xlat70 = dot(vec3<f32>(x_4429.x, x_4429.y, x_4429.z), vec3<f32>(x_4431.x, x_4431.y, x_4431.z));
    let x_4434 : f32 = u_xlat70;
    u_xlat70 = clamp(x_4434, 0.0f, 1.0f);
    let x_4436 : f32 = u_xlat68;
    let x_4437 : f32 = u_xlat68;
    u_xlat68 = (x_4436 * x_4437);
    let x_4439 : f32 = u_xlat68;
    let x_4441 : f32 = u_xlat45.x;
    u_xlat68 = ((x_4439 * x_4441) + 1.000010014f);
    let x_4444 : f32 = u_xlat70;
    let x_4445 : f32 = u_xlat70;
    u_xlat70 = (x_4444 * x_4445);
    let x_4447 : f32 = u_xlat68;
    let x_4448 : f32 = u_xlat68;
    u_xlat68 = (x_4447 * x_4448);
    let x_4450 : f32 = u_xlat70;
    u_xlat70 = max(x_4450, 0.100000001f);
    let x_4452 : f32 = u_xlat68;
    let x_4453 : f32 = u_xlat70;
    u_xlat68 = (x_4452 * x_4453);
    let x_4455 : f32 = u_xlat72;
    let x_4456 : f32 = u_xlat68;
    u_xlat68 = (x_4455 * x_4456);
    let x_4458 : f32 = u_xlat69;
    let x_4459 : f32 = u_xlat68;
    u_xlat68 = (x_4458 / x_4459);
    let x_4461 : f32 = u_xlat68;
    let x_4464 : vec3<f32> = u_xlat4;
    let x_4465 : vec3<f32> = ((vec3<f32>(x_4461, x_4461, x_4461) * vec3<f32>(0.039999999f, 0.039999999f, 0.039999999f)) + x_4464);
    let x_4466 : vec4<f32> = u_xlat9;
    u_xlat9 = vec4<f32>(x_4465.x, x_4465.y, x_4465.z, x_4466.w);
    let x_4468 : vec4<f32> = u_xlat9;
    let x_4470 : vec4<f32> = u_xlat11;
    let x_4473 : vec4<f32> = u_xlat8;
    let x_4475 : vec3<f32> = ((vec3<f32>(x_4468.x, x_4468.y, x_4468.z) * vec3<f32>(x_4470.x, x_4470.y, x_4470.z)) + vec3<f32>(x_4473.x, x_4473.y, x_4473.z));
    let x_4476 : vec4<f32> = u_xlat8;
    u_xlat8 = vec4<f32>(x_4475.x, x_4475.y, x_4475.z, x_4476.w);

    continuing {
      let x_4478 : u32 = u_xlatu_loop_1;
      u_xlatu_loop_1 = (x_4478 + bitcast<u32>(1i));
    }
  }
  let x_4480 : vec4<f32> = u_xlat5;
  let x_4482 : vec4<f32> = u_xlat7;
  let x_4485 : vec4<f32> = u_xlat6;
  u_xlat2 = ((vec3<f32>(x_4480.x, x_4480.y, x_4480.z) * vec3<f32>(x_4482.x, x_4482.x, x_4482.x)) + vec3<f32>(x_4485.x, x_4485.y, x_4485.z));
  let x_4488 : vec4<f32> = u_xlat8;
  let x_4490 : vec3<f32> = u_xlat2;
  u_xlat2 = (vec3<f32>(x_4488.x, x_4488.y, x_4488.z) + x_4490);
  let x_4494 : vec4<f32> = vs_INTERP4;
  let x_4496 : vec3<f32> = u_xlat0;
  let x_4498 : vec3<f32> = u_xlat2;
  let x_4499 : vec3<f32> = ((vec3<f32>(x_4494.w, x_4494.w, x_4494.w) * x_4496) + x_4498);
  let x_4500 : vec4<f32> = SV_Target0;
  SV_Target0 = vec4<f32>(x_4499.x, x_4499.y, x_4499.z, x_4500.w);
  let x_4502 : bool = u_xlatb23;
  if (x_4502) {
    let x_4507 : f32 = u_xlat1.x;
    x_4503 = x_4507;
  } else {
    x_4503 = 1.0f;
  }
  let x_4509 : f32 = x_4503;
  SV_Target0.w = x_4509;
  return;
}

struct main_out {
  @location(0)
  SV_Target0_1 : vec4<f32>,
}

@fragment
fn main(@builtin(position) gl_FragCoord_param : vec4<f32>, @location(1) vs_INTERP1_param : vec3<f32>, @location(0) vs_INTERP0_param : vec3<f32>, @location(3) vs_INTERP3_param : vec4<f32>, @location(4) vs_INTERP4_param : vec4<f32>, @location(2) vs_INTERP2_param : vec4<f32>, @location(5) vs_INTERP5_param : vec2<f32>) -> main_out {
  gl_FragCoord = gl_FragCoord_param;
  vs_INTERP1 = vs_INTERP1_param;
  vs_INTERP0 = vs_INTERP0_param;
  vs_INTERP3 = vs_INTERP3_param;
  vs_INTERP4 = vs_INTERP4_param;
  vs_INTERP2 = vs_INTERP2_param;
  vs_INTERP5 = vs_INTERP5_param;
  main_1();
  return main_out(SV_Target0);
}

