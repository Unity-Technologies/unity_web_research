struct PGlobals {
  x_ScaledScreenParams : vec4<f32>,
  x_GlobalMipBias : vec2<f32>,
  x_AlphaToMaskAvailable : f32,
  @size(4)
  padding : u32,
  x_MainLightPosition : vec4<f32>,
  x_MainLightColor : vec4<f32>,
  x_AmbientOcclusionParam : vec4<f32>,
  x_AdditionalLightsCount : vec4<f32>,
  x_RenderingLayerMaxInt : u32,
  x_RenderingLayerRcpMaxInt : f32,
  @size(8)
  padding_1 : u32,
  x_WorldSpaceCameraPos : vec3<f32>,
  @size(4)
  padding_2 : u32,
  x_ScreenParams : vec4<f32>,
  unity_OrthoParams : vec4<f32>,
  x_ScaleBiasRt : vec4<f32>,
  unity_MatrixV : mat4x4<f32>,
}

type Arr = array<vec4<f32>, 2u>;

struct UnityPerDraw {
  unity_ObjectToWorld : mat4x4<f32>,
  unity_WorldToObject : mat4x4<f32>,
  unity_LODFade : vec4<f32>,
  unity_WorldTransformParams : vec4<f32>,
  unity_RenderingLayer : vec4<f32>,
  unity_LightData : vec4<f32>,
  unity_LightIndices : Arr,
  unity_ProbesOcclusion : vec4<f32>,
  unity_SpecCube0_HDR : vec4<f32>,
  unity_SpecCube1_HDR : vec4<f32>,
  unity_SpecCube0_BoxMax : vec4<f32>,
  unity_SpecCube0_BoxMin : vec4<f32>,
  unity_SpecCube0_ProbePosition : vec4<f32>,
  unity_SpecCube1_BoxMax : vec4<f32>,
  unity_SpecCube1_BoxMin : vec4<f32>,
  unity_SpecCube1_ProbePosition : vec4<f32>,
  unity_LightmapST : vec4<f32>,
  unity_DynamicLightmapST : vec4<f32>,
  unity_SHAr : vec4<f32>,
  unity_SHAg : vec4<f32>,
  unity_SHAb : vec4<f32>,
  unity_SHBr : vec4<f32>,
  unity_SHBg : vec4<f32>,
  unity_SHBb : vec4<f32>,
  unity_SHC : vec4<f32>,
  unity_RendererBounds_Min : vec4<f32>,
  unity_RendererBounds_Max : vec4<f32>,
  unity_MatrixPreviousM : mat4x4<f32>,
  unity_MatrixPreviousMI : mat4x4<f32>,
  unity_MotionVectorsParams : vec4<f32>,
  unity_SpriteColor : vec4<f32>,
  unity_SpriteProps : vec4<f32>,
}

struct UnityPerMaterial {
  Texture2D_B222E8F_TexelSize : vec4<f32>,
  Color_C30C7CA3 : vec4<f32>,
  Texture2D_D9BFD5F1_TexelSize : vec4<f32>,
}

type Arr_1 = array<mat4x4<f32>, 5u>;

struct MainLightShadows {
  x_MainLightWorldToShadow : Arr_1,
  x_CascadeShadowSplitSpheres0 : vec4<f32>,
  x_CascadeShadowSplitSpheres1 : vec4<f32>,
  x_CascadeShadowSplitSpheres2 : vec4<f32>,
  x_CascadeShadowSplitSpheres3 : vec4<f32>,
  x_CascadeShadowSplitSphereRadii : vec4<f32>,
  x_MainLightShadowOffset0 : vec4<f32>,
  x_MainLightShadowOffset1 : vec4<f32>,
  x_MainLightShadowParams : vec4<f32>,
  x_MainLightShadowmapSize : vec4<f32>,
}

struct strided_arr {
  @size(16)
  el : f32,
}

type Arr_2 = array<strided_arr, 8u>;

struct LightCookies {
  x_MainLightWorldToLight : mat4x4<f32>,
  x_AdditionalLightsCookieEnableBits : Arr_2,
  x_MainLightCookieTextureFormat : f32,
  x_AdditionalLightsCookieAtlasTextureFormat : f32,
}

type Arr_3 = array<vec4<f32>, 256u>;

type Arr_4 = array<vec4<f32>, 256u>;

type Arr_5 = array<vec4<f32>, 256u>;

type Arr_6 = array<vec4<f32>, 256u>;

type Arr_7 = array<vec4<f32>, 256u>;

struct strided_arr_1 {
  @size(16)
  el : f32,
}

type Arr_8 = array<strided_arr_1, 256u>;

type Arr_9 = array<vec4<f32>, 256u>;

type Arr_10 = array<strided_arr_1, 256u>;

struct AdditionalLights {
  x_AdditionalLightsPosition : Arr_9,
  x_AdditionalLightsColor : Arr_9,
  x_AdditionalLightsAttenuation : Arr_9,
  x_AdditionalLightsSpotDir : Arr_9,
  x_AdditionalLightsOcclusionProbes : Arr_9,
  x_AdditionalLightsLayerMasks : Arr_10,
}

type Arr_11 = array<mat4x4<f32>, 256u>;

struct AdditionalLightsCookies {
  x_AdditionalLightsWorldToLights : Arr_11,
  x_AdditionalLightsCookieAtlasUVRects : Arr_9,
  x_AdditionalLightsLightTypes : Arr_10,
}

var<private> gl_FragCoord : vec4<f32>;

var<private> vs_INTERP1 : vec3<f32>;

@group(1) @binding(0) var<uniform> x_90 : PGlobals;

var<private> vs_INTERP0 : vec3<f32>;

@group(1) @binding(2) var<uniform> x_161 : UnityPerDraw;

@group(0) @binding(6) var Texture2D_B222E8F : texture_2d<f32>;

@group(0) @binding(14) var samplerTexture2D_B222E8F : sampler;

var<private> vs_INTERP3 : vec4<f32>;

@group(1) @binding(6) var<uniform> x_215 : UnityPerMaterial;

@group(0) @binding(7) var Texture2D_D9BFD5F1 : texture_2d<f32>;

@group(0) @binding(15) var samplerTexture2D_D9BFD5F1 : sampler;

var<private> vs_INTERP4 : vec4<f32>;

@group(1) @binding(3) var<uniform> x_272 : MainLightShadows;

@group(0) @binding(3) var x_MainLightShadowmapTexture : texture_depth_2d;

@group(0) @binding(11) var sampler_MainLightShadowmapTexture : sampler_comparison;

var<private> vs_INTERP2 : vec4<f32>;

@group(0) @binding(1) var unity_Lightmap : texture_2d<f32>;

@group(0) @binding(9) var samplerunity_Lightmap : sampler;

var<private> vs_INTERP5 : vec2<f32>;

@group(0) @binding(2) var x_ScreenSpaceOcclusionTexture : texture_2d<f32>;

@group(0) @binding(10) var sampler_ScreenSpaceOcclusionTexture : sampler;

var<private> vs_INTERP9 : vec4<f32>;

@group(1) @binding(4) var<uniform> x_3294 : LightCookies;

@group(0) @binding(4) var x_MainLightCookieTexture : texture_2d<f32>;

@group(0) @binding(12) var sampler_MainLightCookieTexture : sampler;

@group(0) @binding(0) var unity_SpecCube0 : texture_cube<f32>;

@group(0) @binding(8) var samplerunity_SpecCube0 : sampler;

@group(1) @binding(1) var<uniform> x_3726 : AdditionalLights;

@group(1) @binding(5) var<uniform> x_3835 : AdditionalLightsCookies;

@group(0) @binding(5) var x_AdditionalLightsCookieAtlasTexture : texture_2d<f32>;

@group(0) @binding(13) var sampler_AdditionalLightsCookieAtlasTexture : sampler;

var<private> SV_Target0 : vec4<f32>;

var<private> SV_Target1 : vec4<f32>;

fn int_bitfieldInsert_i1_i1_i1_i1_(base : ptr<function, i32>, insert : ptr<function, i32>, offset_1 : ptr<function, i32>, bits : ptr<function, i32>) -> i32 {
  var mask : u32;
  let x_19 : i32 = *(bits);
  let x_23 : i32 = *(offset_1);
  mask = (~((4294967295u << bitcast<u32>(x_19))) << bitcast<u32>(x_23));
  let x_26 : i32 = *(base);
  let x_28 : u32 = mask;
  let x_31 : i32 = *(insert);
  let x_33 : i32 = *(offset_1);
  let x_36 : u32 = mask;
  return bitcast<i32>(((bitcast<u32>(x_26) & ~(x_28)) | ((bitcast<u32>(x_31) << bitcast<u32>(x_33)) & x_36)));
}

fn main_1() {
  var hlslcc_FragCoord : vec4<f32>;
  var u_xlat0 : vec3<f32>;
  var u_xlatb63 : bool;
  var u_xlat1 : vec3<f32>;
  var u_xlat64 : f32;
  var u_xlat2 : vec3<f32>;
  var x_118 : f32;
  var x_132 : f32;
  var x_145 : f32;
  var u_xlat63 : f32;
  var u_xlat3 : vec4<f32>;
  var u_xlat4 : vec3<f32>;
  var u_xlat5 : vec4<f32>;
  var u_xlat6 : vec4<f32>;
  var u_xlat26 : vec3<f32>;
  var u_xlatb64 : bool;
  var u_xlat7 : vec4<f32>;
  var txVec0 : vec3<f32>;
  var u_xlat8 : vec4<f32>;
  var txVec1 : vec3<f32>;
  var txVec2 : vec3<f32>;
  var txVec3 : vec3<f32>;
  var u_xlatb65 : bool;
  var u_xlat49 : vec2<f32>;
  var u_xlat9 : vec4<f32>;
  var u_xlat51 : vec2<f32>;
  var u_xlat10 : vec4<f32>;
  var u_xlat11 : vec4<f32>;
  var u_xlat12 : vec4<f32>;
  var u_xlat13 : vec4<f32>;
  var u_xlat14 : vec4<f32>;
  var u_xlat15 : vec4<f32>;
  var u_xlat65 : f32;
  var txVec4 : vec3<f32>;
  var u_xlat67 : f32;
  var txVec5 : vec3<f32>;
  var u_xlat69 : f32;
  var txVec6 : vec3<f32>;
  var txVec7 : vec3<f32>;
  var txVec8 : vec3<f32>;
  var txVec9 : vec3<f32>;
  var txVec10 : vec3<f32>;
  var txVec11 : vec3<f32>;
  var txVec12 : vec3<f32>;
  var u_xlat29 : vec3<f32>;
  var u_xlat16 : vec4<f32>;
  var u_xlat17 : vec4<f32>;
  var u_xlat30 : vec2<f32>;
  var u_xlat57 : vec2<f32>;
  var u_xlat52 : vec2<f32>;
  var u_xlat18 : vec4<f32>;
  var u_xlat19 : vec4<f32>;
  var u_xlat20 : vec4<f32>;
  var txVec13 : vec3<f32>;
  var txVec14 : vec3<f32>;
  var txVec15 : vec3<f32>;
  var txVec16 : vec3<f32>;
  var txVec17 : vec3<f32>;
  var txVec18 : vec3<f32>;
  var txVec19 : vec3<f32>;
  var txVec20 : vec3<f32>;
  var txVec21 : vec3<f32>;
  var txVec22 : vec3<f32>;
  var txVec23 : vec3<f32>;
  var txVec24 : vec3<f32>;
  var txVec25 : vec3<f32>;
  var txVec26 : vec3<f32>;
  var txVec27 : vec3<f32>;
  var txVec28 : vec3<f32>;
  var txVec29 : vec3<f32>;
  var u_xlatb67 : bool;
  var u_xlatb6 : bool;
  var x_1584 : f32;
  var u_xlatb3 : bool;
  var u_xlatu1 : vec3<u32>;
  var u_xlatu43 : u32;
  var u_xlatu24 : u32;
  var u_xlati43 : i32;
  var u_xlati22 : i32;
  var u_xlatu22 : u32;
  var u_xlati1 : i32;
  var param : i32;
  var param_1 : i32;
  var param_2 : i32;
  var param_3 : i32;
  var u_xlat22 : f32;
  var x_1717 : f32;
  var u_xlatb43 : vec2<bool>;
  var u_xlat43 : vec2<f32>;
  var u_xlatb22 : bool;
  var x_1789 : f32;
  var u_xlat66 : f32;
  var u_xlat27 : f32;
  var txVec30 : vec3<f32>;
  var txVec31 : vec3<f32>;
  var txVec32 : vec3<f32>;
  var txVec33 : vec3<f32>;
  var u_xlatb48 : vec2<bool>;
  var u_xlat48 : vec2<f32>;
  var txVec34 : vec3<f32>;
  var txVec35 : vec3<f32>;
  var txVec36 : vec3<f32>;
  var txVec37 : vec3<f32>;
  var txVec38 : vec3<f32>;
  var txVec39 : vec3<f32>;
  var txVec40 : vec3<f32>;
  var txVec41 : vec3<f32>;
  var txVec42 : vec3<f32>;
  var u_xlat55 : vec2<f32>;
  var txVec43 : vec3<f32>;
  var txVec44 : vec3<f32>;
  var u_xlat71 : f32;
  var txVec45 : vec3<f32>;
  var txVec46 : vec3<f32>;
  var txVec47 : vec3<f32>;
  var txVec48 : vec3<f32>;
  var txVec49 : vec3<f32>;
  var txVec50 : vec3<f32>;
  var txVec51 : vec3<f32>;
  var txVec52 : vec3<f32>;
  var txVec53 : vec3<f32>;
  var txVec54 : vec3<f32>;
  var txVec55 : vec3<f32>;
  var txVec56 : vec3<f32>;
  var txVec57 : vec3<f32>;
  var u_xlat28 : f32;
  var txVec58 : vec3<f32>;
  var txVec59 : vec3<f32>;
  var x_3360 : f32;
  var x_3371 : vec3<f32>;
  var u_xlatu63 : u32;
  var u_xlatu_loop_1 : u32;
  var u_xlatu65 : u32;
  var u_xlati67 : i32;
  var indexable : array<vec4<u32>, 4u>;
  var u_xlat70 : f32;
  var u_xlatu71 : u32;
  var u_xlati72 : i32;
  var u_xlati71 : i32;
  var u_xlati73 : i32;
  var u_xlatb71 : bool;
  var u_xlat53 : vec2<f32>;
  var u_xlatb53 : vec2<bool>;
  var x_4128 : f32;
  var x_4141 : f32;
  var x_4193 : f32;
  var x_4204 : vec3<f32>;
  var x_4359 : f32;
  var u_xlatu0 : u32;
  var u_xlat_precise_vec4 : vec4<f32>;
  var u_xlat_precise_ivec4 : vec4<i32>;
  var u_xlat_precise_bvec4 : vec4<bool>;
  var u_xlat_precise_uvec4 : vec4<u32>;
  let x_49 : vec4<f32> = gl_FragCoord;
  let x_50 : vec3<f32> = vec3<f32>(x_49.x, x_49.y, x_49.z);
  let x_55 : f32 = gl_FragCoord.w;
  hlslcc_FragCoord = vec4<f32>(x_50.x, x_50.y, x_50.z, (1.0f / x_55));
  let x_65 : vec3<f32> = vs_INTERP1;
  let x_66 : vec3<f32> = vs_INTERP1;
  u_xlat0.x = dot(x_65, x_66);
  let x_72 : f32 = u_xlat0.x;
  u_xlat0.x = sqrt(x_72);
  let x_76 : f32 = u_xlat0.x;
  u_xlat0.x = (1.0f / x_76);
  let x_79 : vec3<f32> = u_xlat0;
  let x_81 : vec3<f32> = vs_INTERP1;
  u_xlat0 = (vec3<f32>(x_79.x, x_79.x, x_79.x) * x_81);
  let x_94 : f32 = x_90.unity_OrthoParams.w;
  u_xlatb63 = (x_94 == 0.0f);
  let x_99 : vec3<f32> = vs_INTERP0;
  let x_104 : vec3<f32> = x_90.x_WorldSpaceCameraPos;
  u_xlat1 = (-(x_99) + x_104);
  let x_107 : vec3<f32> = u_xlat1;
  let x_108 : vec3<f32> = u_xlat1;
  u_xlat64 = dot(x_107, x_108);
  let x_110 : f32 = u_xlat64;
  u_xlat64 = inverseSqrt(x_110);
  let x_112 : f32 = u_xlat64;
  let x_114 : vec3<f32> = u_xlat1;
  u_xlat1 = (vec3<f32>(x_112, x_112, x_112) * x_114);
  let x_117 : bool = u_xlatb63;
  if (x_117) {
    let x_122 : f32 = u_xlat1.x;
    x_118 = x_122;
  } else {
    let x_128 : f32 = x_90.unity_MatrixV[0i].z;
    x_118 = x_128;
  }
  let x_129 : f32 = x_118;
  u_xlat2.x = x_129;
  let x_131 : bool = u_xlatb63;
  if (x_131) {
    let x_137 : f32 = u_xlat1.y;
    x_132 = x_137;
  } else {
    let x_141 : f32 = x_90.unity_MatrixV[1i].z;
    x_132 = x_141;
  }
  let x_142 : f32 = x_132;
  u_xlat2.y = x_142;
  let x_144 : bool = u_xlatb63;
  if (x_144) {
    let x_149 : f32 = u_xlat1.z;
    x_145 = x_149;
  } else {
    let x_153 : f32 = x_90.unity_MatrixV[2i].z;
    x_145 = x_153;
  }
  let x_154 : f32 = x_145;
  u_xlat2.z = x_154;
  let x_156 : vec3<f32> = u_xlat2;
  let x_164 : vec4<f32> = x_161.unity_WorldToObject[1i];
  u_xlat1 = (vec3<f32>(x_156.y, x_156.y, x_156.y) * vec3<f32>(x_164.x, x_164.y, x_164.z));
  let x_168 : vec4<f32> = x_161.unity_WorldToObject[0i];
  let x_170 : vec3<f32> = u_xlat2;
  let x_173 : vec3<f32> = u_xlat1;
  u_xlat1 = ((vec3<f32>(x_168.x, x_168.y, x_168.z) * vec3<f32>(x_170.x, x_170.x, x_170.x)) + x_173);
  let x_176 : vec4<f32> = x_161.unity_WorldToObject[2i];
  let x_178 : vec3<f32> = u_xlat2;
  let x_181 : vec3<f32> = u_xlat1;
  u_xlat1 = ((vec3<f32>(x_176.x, x_176.y, x_176.z) * vec3<f32>(x_178.z, x_178.z, x_178.z)) + x_181);
  let x_184 : vec3<f32> = u_xlat1;
  let x_185 : vec3<f32> = u_xlat1;
  u_xlat63 = dot(x_184, x_185);
  let x_187 : f32 = u_xlat63;
  u_xlat63 = inverseSqrt(x_187);
  let x_189 : f32 = u_xlat63;
  let x_191 : vec3<f32> = u_xlat1;
  u_xlat1 = (vec3<f32>(x_189, x_189, x_189) * x_191);
  let x_205 : vec4<f32> = vs_INTERP3;
  let x_208 : f32 = x_90.x_GlobalMipBias.x;
  let x_209 : vec4<f32> = textureSampleBias(Texture2D_B222E8F, samplerTexture2D_B222E8F, vec2<f32>(x_205.x, x_205.y), x_208);
  u_xlat3 = x_209;
  let x_211 : vec4<f32> = u_xlat3;
  let x_217 : vec4<f32> = x_215.Color_C30C7CA3;
  u_xlat4 = (vec3<f32>(x_211.x, x_211.y, x_211.z) * vec3<f32>(x_217.x, x_217.y, x_217.z));
  let x_226 : vec4<f32> = vs_INTERP3;
  let x_229 : f32 = x_90.x_GlobalMipBias.x;
  let x_230 : vec4<f32> = textureSampleBias(Texture2D_D9BFD5F1, samplerTexture2D_D9BFD5F1, vec2<f32>(x_226.x, x_226.y), x_229);
  u_xlat5 = vec4<f32>(x_230.w, x_230.x, x_230.y, x_230.z);
  let x_233 : vec4<f32> = u_xlat5;
  u_xlat6 = ((vec4<f32>(x_233.y, x_233.z, x_233.w, x_233.x) * vec4<f32>(2.0f, 2.0f, 2.0f, 2.0f)) + vec4<f32>(-1.0f, -1.0f, -1.0f, -1.0f));
  let x_241 : vec4<f32> = u_xlat6;
  let x_242 : vec4<f32> = u_xlat6;
  u_xlat63 = dot(x_241, x_242);
  let x_244 : f32 = u_xlat63;
  u_xlat63 = inverseSqrt(x_244);
  let x_247 : f32 = u_xlat63;
  let x_249 : vec4<f32> = u_xlat6;
  u_xlat26 = (vec3<f32>(x_247, x_247, x_247) * vec3<f32>(x_249.x, x_249.y, x_249.z));
  let x_254 : f32 = vs_INTERP4.y;
  u_xlat63 = (x_254 * 200.0f);
  let x_257 : f32 = u_xlat63;
  u_xlat63 = min(x_257, 1.0f);
  let x_259 : f32 = u_xlat63;
  let x_261 : vec4<f32> = u_xlat3;
  let x_263 : vec3<f32> = (vec3<f32>(x_259, x_259, x_259) * vec3<f32>(x_261.x, x_261.y, x_261.z));
  let x_264 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_263.x, x_263.y, x_263.z, x_264.w);
  let x_266 : vec3<f32> = vs_INTERP0;
  let x_274 : vec4<f32> = x_272.x_MainLightWorldToShadow[0i][1i];
  let x_276 : vec3<f32> = (vec3<f32>(x_266.y, x_266.y, x_266.y) * vec3<f32>(x_274.x, x_274.y, x_274.z));
  let x_277 : vec4<f32> = u_xlat6;
  u_xlat6 = vec4<f32>(x_276.x, x_276.y, x_276.z, x_277.w);
  let x_280 : vec4<f32> = x_272.x_MainLightWorldToShadow[0i][0i];
  let x_282 : vec3<f32> = vs_INTERP0;
  let x_285 : vec4<f32> = u_xlat6;
  let x_287 : vec3<f32> = ((vec3<f32>(x_280.x, x_280.y, x_280.z) * vec3<f32>(x_282.x, x_282.x, x_282.x)) + vec3<f32>(x_285.x, x_285.y, x_285.z));
  let x_288 : vec4<f32> = u_xlat6;
  u_xlat6 = vec4<f32>(x_287.x, x_287.y, x_287.z, x_288.w);
  let x_291 : vec4<f32> = x_272.x_MainLightWorldToShadow[0i][2i];
  let x_293 : vec3<f32> = vs_INTERP0;
  let x_296 : vec4<f32> = u_xlat6;
  let x_298 : vec3<f32> = ((vec3<f32>(x_291.x, x_291.y, x_291.z) * vec3<f32>(x_293.z, x_293.z, x_293.z)) + vec3<f32>(x_296.x, x_296.y, x_296.z));
  let x_299 : vec4<f32> = u_xlat6;
  u_xlat6 = vec4<f32>(x_298.x, x_298.y, x_298.z, x_299.w);
  let x_301 : vec4<f32> = u_xlat6;
  let x_305 : vec4<f32> = x_272.x_MainLightWorldToShadow[0i][3i];
  let x_307 : vec3<f32> = (vec3<f32>(x_301.x, x_301.y, x_301.z) + vec3<f32>(x_305.x, x_305.y, x_305.z));
  let x_308 : vec4<f32> = u_xlat6;
  u_xlat6 = vec4<f32>(x_307.x, x_307.y, x_307.z, x_308.w);
  let x_312 : f32 = x_272.x_MainLightShadowParams.y;
  u_xlatb63 = (0.0f < x_312);
  let x_314 : bool = u_xlatb63;
  if (x_314) {
    let x_319 : f32 = x_272.x_MainLightShadowParams.y;
    u_xlatb64 = (x_319 == 1.0f);
    let x_321 : bool = u_xlatb64;
    if (x_321) {
      let x_325 : vec4<f32> = u_xlat6;
      let x_329 : vec4<f32> = x_272.x_MainLightShadowOffset0;
      u_xlat7 = (vec4<f32>(x_325.x, x_325.y, x_325.x, x_325.y) + x_329);
      let x_332 : vec4<f32> = u_xlat7;
      let x_333 : vec2<f32> = vec2<f32>(x_332.x, x_332.y);
      let x_335 : f32 = u_xlat6.z;
      txVec0 = vec3<f32>(x_333.x, x_333.y, x_335);
      let x_348 : vec3<f32> = txVec0;
      let x_350 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_348.xy, x_348.z);
      u_xlat8.x = x_350;
      let x_353 : vec4<f32> = u_xlat7;
      let x_354 : vec2<f32> = vec2<f32>(x_353.z, x_353.w);
      let x_356 : f32 = u_xlat6.z;
      txVec1 = vec3<f32>(x_354.x, x_354.y, x_356);
      let x_363 : vec3<f32> = txVec1;
      let x_365 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_363.xy, x_363.z);
      u_xlat8.y = x_365;
      let x_367 : vec4<f32> = u_xlat6;
      let x_371 : vec4<f32> = x_272.x_MainLightShadowOffset1;
      u_xlat7 = (vec4<f32>(x_367.x, x_367.y, x_367.x, x_367.y) + x_371);
      let x_374 : vec4<f32> = u_xlat7;
      let x_375 : vec2<f32> = vec2<f32>(x_374.x, x_374.y);
      let x_377 : f32 = u_xlat6.z;
      txVec2 = vec3<f32>(x_375.x, x_375.y, x_377);
      let x_384 : vec3<f32> = txVec2;
      let x_386 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_384.xy, x_384.z);
      u_xlat8.z = x_386;
      let x_389 : vec4<f32> = u_xlat7;
      let x_390 : vec2<f32> = vec2<f32>(x_389.z, x_389.w);
      let x_392 : f32 = u_xlat6.z;
      txVec3 = vec3<f32>(x_390.x, x_390.y, x_392);
      let x_399 : vec3<f32> = txVec3;
      let x_401 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_399.xy, x_399.z);
      u_xlat8.w = x_401;
      let x_403 : vec4<f32> = u_xlat8;
      u_xlat64 = dot(x_403, vec4<f32>(0.25f, 0.25f, 0.25f, 0.25f));
    } else {
      let x_410 : f32 = x_272.x_MainLightShadowParams.y;
      u_xlatb65 = (x_410 == 2.0f);
      let x_412 : bool = u_xlatb65;
      if (x_412) {
        let x_415 : vec4<f32> = u_xlat6;
        let x_418 : vec4<f32> = x_272.x_MainLightShadowmapSize;
        let x_423 : vec2<f32> = ((vec2<f32>(x_415.x, x_415.y) * vec2<f32>(x_418.z, x_418.w)) + vec2<f32>(0.5f, 0.5f));
        let x_424 : vec4<f32> = u_xlat7;
        u_xlat7 = vec4<f32>(x_423.x, x_423.y, x_424.z, x_424.w);
        let x_426 : vec4<f32> = u_xlat7;
        let x_428 : vec2<f32> = floor(vec2<f32>(x_426.x, x_426.y));
        let x_429 : vec4<f32> = u_xlat7;
        u_xlat7 = vec4<f32>(x_428.x, x_428.y, x_429.z, x_429.w);
        let x_433 : vec4<f32> = u_xlat6;
        let x_436 : vec4<f32> = x_272.x_MainLightShadowmapSize;
        let x_439 : vec4<f32> = u_xlat7;
        u_xlat49 = ((vec2<f32>(x_433.x, x_433.y) * vec2<f32>(x_436.z, x_436.w)) + -(vec2<f32>(x_439.x, x_439.y)));
        let x_443 : vec2<f32> = u_xlat49;
        u_xlat8 = (vec4<f32>(x_443.x, x_443.x, x_443.y, x_443.y) + vec4<f32>(0.5f, 1.0f, 0.5f, 1.0f));
        let x_448 : vec4<f32> = u_xlat8;
        let x_450 : vec4<f32> = u_xlat8;
        u_xlat9 = (vec4<f32>(x_448.x, x_448.x, x_448.z, x_448.z) * vec4<f32>(x_450.x, x_450.x, x_450.z, x_450.z));
        let x_453 : vec4<f32> = u_xlat9;
        let x_457 : vec2<f32> = (vec2<f32>(x_453.y, x_453.w) * vec2<f32>(0.079999998f, 0.079999998f));
        let x_458 : vec4<f32> = u_xlat8;
        u_xlat8 = vec4<f32>(x_457.x, x_458.y, x_457.y, x_458.w);
        let x_460 : vec4<f32> = u_xlat9;
        let x_463 : vec2<f32> = u_xlat49;
        let x_465 : vec2<f32> = ((vec2<f32>(x_460.x, x_460.z) * vec2<f32>(0.5f, 0.5f)) + -(x_463));
        let x_466 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_465.x, x_465.y, x_466.z, x_466.w);
        let x_469 : vec2<f32> = u_xlat49;
        u_xlat51 = (-(x_469) + vec2<f32>(1.0f, 1.0f));
        let x_474 : vec2<f32> = u_xlat49;
        let x_476 : vec2<f32> = min(x_474, vec2<f32>(0.0f, 0.0f));
        let x_477 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_476.x, x_476.y, x_477.z, x_477.w);
        let x_479 : vec4<f32> = u_xlat10;
        let x_482 : vec4<f32> = u_xlat10;
        let x_485 : vec2<f32> = u_xlat51;
        let x_486 : vec2<f32> = ((-(vec2<f32>(x_479.x, x_479.y)) * vec2<f32>(x_482.x, x_482.y)) + x_485);
        let x_487 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_486.x, x_486.y, x_487.z, x_487.w);
        let x_489 : vec2<f32> = u_xlat49;
        u_xlat49 = max(x_489, vec2<f32>(0.0f, 0.0f));
        let x_491 : vec2<f32> = u_xlat49;
        let x_493 : vec2<f32> = u_xlat49;
        let x_495 : vec4<f32> = u_xlat8;
        u_xlat49 = ((-(x_491) * x_493) + vec2<f32>(x_495.y, x_495.w));
        let x_498 : vec4<f32> = u_xlat10;
        let x_500 : vec2<f32> = (vec2<f32>(x_498.x, x_498.y) + vec2<f32>(1.0f, 1.0f));
        let x_501 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_500.x, x_500.y, x_501.z, x_501.w);
        let x_503 : vec2<f32> = u_xlat49;
        u_xlat49 = (x_503 + vec2<f32>(1.0f, 1.0f));
        let x_506 : vec4<f32> = u_xlat9;
        let x_510 : vec2<f32> = (vec2<f32>(x_506.x, x_506.y) * vec2<f32>(0.159999996f, 0.159999996f));
        let x_511 : vec4<f32> = u_xlat11;
        u_xlat11 = vec4<f32>(x_510.x, x_510.y, x_511.z, x_511.w);
        let x_513 : vec2<f32> = u_xlat51;
        let x_514 : vec2<f32> = (x_513 * vec2<f32>(0.159999996f, 0.159999996f));
        let x_515 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_514.x, x_514.y, x_515.z, x_515.w);
        let x_517 : vec4<f32> = u_xlat10;
        let x_519 : vec2<f32> = (vec2<f32>(x_517.x, x_517.y) * vec2<f32>(0.159999996f, 0.159999996f));
        let x_520 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_519.x, x_519.y, x_520.z, x_520.w);
        let x_523 : vec2<f32> = u_xlat49;
        let x_524 : vec2<f32> = (x_523 * vec2<f32>(0.159999996f, 0.159999996f));
        let x_525 : vec4<f32> = u_xlat12;
        u_xlat12 = vec4<f32>(x_524.x, x_524.y, x_525.z, x_525.w);
        let x_527 : vec4<f32> = u_xlat8;
        u_xlat49 = (vec2<f32>(x_527.y, x_527.w) * vec2<f32>(0.159999996f, 0.159999996f));
        let x_531 : f32 = u_xlat10.x;
        u_xlat11.z = x_531;
        let x_534 : f32 = u_xlat49.x;
        u_xlat11.w = x_534;
        let x_537 : f32 = u_xlat12.x;
        u_xlat9.z = x_537;
        let x_540 : f32 = u_xlat8.x;
        u_xlat9.w = x_540;
        let x_543 : vec4<f32> = u_xlat9;
        let x_545 : vec4<f32> = u_xlat11;
        u_xlat13 = (vec4<f32>(x_543.z, x_543.w, x_543.x, x_543.z) + vec4<f32>(x_545.z, x_545.w, x_545.x, x_545.z));
        let x_549 : f32 = u_xlat11.y;
        u_xlat10.z = x_549;
        let x_552 : f32 = u_xlat49.y;
        u_xlat10.w = x_552;
        let x_555 : f32 = u_xlat9.y;
        u_xlat12.z = x_555;
        let x_558 : f32 = u_xlat8.z;
        u_xlat12.w = x_558;
        let x_560 : vec4<f32> = u_xlat10;
        let x_562 : vec4<f32> = u_xlat12;
        let x_564 : vec3<f32> = (vec3<f32>(x_560.z, x_560.y, x_560.w) + vec3<f32>(x_562.z, x_562.y, x_562.w));
        let x_565 : vec4<f32> = u_xlat8;
        u_xlat8 = vec4<f32>(x_564.x, x_564.y, x_564.z, x_565.w);
        let x_567 : vec4<f32> = u_xlat9;
        let x_569 : vec4<f32> = u_xlat13;
        let x_571 : vec3<f32> = (vec3<f32>(x_567.x, x_567.z, x_567.w) / vec3<f32>(x_569.z, x_569.w, x_569.y));
        let x_572 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_571.x, x_571.y, x_571.z, x_572.w);
        let x_574 : vec4<f32> = u_xlat9;
        let x_580 : vec3<f32> = (vec3<f32>(x_574.x, x_574.y, x_574.z) + vec3<f32>(-2.5f, -0.5f, 1.5f));
        let x_581 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_580.x, x_580.y, x_580.z, x_581.w);
        let x_583 : vec4<f32> = u_xlat12;
        let x_585 : vec4<f32> = u_xlat8;
        let x_587 : vec3<f32> = (vec3<f32>(x_583.z, x_583.y, x_583.w) / vec3<f32>(x_585.x, x_585.y, x_585.z));
        let x_588 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_587.x, x_587.y, x_587.z, x_588.w);
        let x_590 : vec4<f32> = u_xlat10;
        let x_592 : vec3<f32> = (vec3<f32>(x_590.x, x_590.y, x_590.z) + vec3<f32>(-2.5f, -0.5f, 1.5f));
        let x_593 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_592.x, x_592.y, x_592.z, x_593.w);
        let x_595 : vec4<f32> = u_xlat9;
        let x_598 : vec4<f32> = x_272.x_MainLightShadowmapSize;
        let x_600 : vec3<f32> = (vec3<f32>(x_595.y, x_595.x, x_595.z) * vec3<f32>(x_598.x, x_598.x, x_598.x));
        let x_601 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_600.x, x_600.y, x_600.z, x_601.w);
        let x_603 : vec4<f32> = u_xlat10;
        let x_606 : vec4<f32> = x_272.x_MainLightShadowmapSize;
        let x_608 : vec3<f32> = (vec3<f32>(x_603.x, x_603.y, x_603.z) * vec3<f32>(x_606.y, x_606.y, x_606.y));
        let x_609 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_608.x, x_608.y, x_608.z, x_609.w);
        let x_612 : f32 = u_xlat10.x;
        u_xlat9.w = x_612;
        let x_614 : vec4<f32> = u_xlat7;
        let x_617 : vec4<f32> = x_272.x_MainLightShadowmapSize;
        let x_620 : vec4<f32> = u_xlat9;
        u_xlat11 = ((vec4<f32>(x_614.x, x_614.y, x_614.x, x_614.y) * vec4<f32>(x_617.x, x_617.y, x_617.x, x_617.y)) + vec4<f32>(x_620.y, x_620.w, x_620.x, x_620.w));
        let x_623 : vec4<f32> = u_xlat7;
        let x_626 : vec4<f32> = x_272.x_MainLightShadowmapSize;
        let x_629 : vec4<f32> = u_xlat9;
        u_xlat49 = ((vec2<f32>(x_623.x, x_623.y) * vec2<f32>(x_626.x, x_626.y)) + vec2<f32>(x_629.z, x_629.w));
        let x_633 : f32 = u_xlat9.y;
        u_xlat10.w = x_633;
        let x_635 : vec4<f32> = u_xlat10;
        let x_636 : vec2<f32> = vec2<f32>(x_635.y, x_635.z);
        let x_637 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_637.x, x_636.x, x_637.z, x_636.y);
        let x_639 : vec4<f32> = u_xlat7;
        let x_642 : vec4<f32> = x_272.x_MainLightShadowmapSize;
        let x_645 : vec4<f32> = u_xlat9;
        u_xlat12 = ((vec4<f32>(x_639.x, x_639.y, x_639.x, x_639.y) * vec4<f32>(x_642.x, x_642.y, x_642.x, x_642.y)) + vec4<f32>(x_645.x, x_645.y, x_645.z, x_645.y));
        let x_648 : vec4<f32> = u_xlat7;
        let x_651 : vec4<f32> = x_272.x_MainLightShadowmapSize;
        let x_654 : vec4<f32> = u_xlat10;
        u_xlat10 = ((vec4<f32>(x_648.x, x_648.y, x_648.x, x_648.y) * vec4<f32>(x_651.x, x_651.y, x_651.x, x_651.y)) + vec4<f32>(x_654.w, x_654.y, x_654.w, x_654.z));
        let x_657 : vec4<f32> = u_xlat7;
        let x_660 : vec4<f32> = x_272.x_MainLightShadowmapSize;
        let x_663 : vec4<f32> = u_xlat9;
        u_xlat9 = ((vec4<f32>(x_657.x, x_657.y, x_657.x, x_657.y) * vec4<f32>(x_660.x, x_660.y, x_660.x, x_660.y)) + vec4<f32>(x_663.x, x_663.w, x_663.z, x_663.w));
        let x_667 : vec4<f32> = u_xlat8;
        let x_669 : vec4<f32> = u_xlat13;
        u_xlat14 = (vec4<f32>(x_667.x, x_667.x, x_667.x, x_667.y) * vec4<f32>(x_669.z, x_669.w, x_669.y, x_669.z));
        let x_673 : vec4<f32> = u_xlat8;
        let x_675 : vec4<f32> = u_xlat13;
        u_xlat15 = (vec4<f32>(x_673.y, x_673.y, x_673.z, x_673.z) * x_675);
        let x_679 : f32 = u_xlat8.z;
        let x_681 : f32 = u_xlat13.y;
        u_xlat65 = (x_679 * x_681);
        let x_684 : vec4<f32> = u_xlat11;
        let x_685 : vec2<f32> = vec2<f32>(x_684.x, x_684.y);
        let x_687 : f32 = u_xlat6.z;
        txVec4 = vec3<f32>(x_685.x, x_685.y, x_687);
        let x_695 : vec3<f32> = txVec4;
        let x_697 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_695.xy, x_695.z);
        u_xlat67 = x_697;
        let x_699 : vec4<f32> = u_xlat11;
        let x_700 : vec2<f32> = vec2<f32>(x_699.z, x_699.w);
        let x_702 : f32 = u_xlat6.z;
        txVec5 = vec3<f32>(x_700.x, x_700.y, x_702);
        let x_710 : vec3<f32> = txVec5;
        let x_712 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_710.xy, x_710.z);
        u_xlat69 = x_712;
        let x_713 : f32 = u_xlat69;
        let x_715 : f32 = u_xlat14.y;
        u_xlat69 = (x_713 * x_715);
        let x_718 : f32 = u_xlat14.x;
        let x_719 : f32 = u_xlat67;
        let x_721 : f32 = u_xlat69;
        u_xlat67 = ((x_718 * x_719) + x_721);
        let x_724 : vec2<f32> = u_xlat49;
        let x_726 : f32 = u_xlat6.z;
        txVec6 = vec3<f32>(x_724.x, x_724.y, x_726);
        let x_733 : vec3<f32> = txVec6;
        let x_735 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_733.xy, x_733.z);
        u_xlat69 = x_735;
        let x_737 : f32 = u_xlat14.z;
        let x_738 : f32 = u_xlat69;
        let x_740 : f32 = u_xlat67;
        u_xlat67 = ((x_737 * x_738) + x_740);
        let x_743 : vec4<f32> = u_xlat10;
        let x_744 : vec2<f32> = vec2<f32>(x_743.x, x_743.y);
        let x_746 : f32 = u_xlat6.z;
        txVec7 = vec3<f32>(x_744.x, x_744.y, x_746);
        let x_753 : vec3<f32> = txVec7;
        let x_755 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_753.xy, x_753.z);
        u_xlat69 = x_755;
        let x_757 : f32 = u_xlat14.w;
        let x_758 : f32 = u_xlat69;
        let x_760 : f32 = u_xlat67;
        u_xlat67 = ((x_757 * x_758) + x_760);
        let x_763 : vec4<f32> = u_xlat12;
        let x_764 : vec2<f32> = vec2<f32>(x_763.x, x_763.y);
        let x_766 : f32 = u_xlat6.z;
        txVec8 = vec3<f32>(x_764.x, x_764.y, x_766);
        let x_773 : vec3<f32> = txVec8;
        let x_775 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_773.xy, x_773.z);
        u_xlat69 = x_775;
        let x_777 : f32 = u_xlat15.x;
        let x_778 : f32 = u_xlat69;
        let x_780 : f32 = u_xlat67;
        u_xlat67 = ((x_777 * x_778) + x_780);
        let x_783 : vec4<f32> = u_xlat12;
        let x_784 : vec2<f32> = vec2<f32>(x_783.z, x_783.w);
        let x_786 : f32 = u_xlat6.z;
        txVec9 = vec3<f32>(x_784.x, x_784.y, x_786);
        let x_793 : vec3<f32> = txVec9;
        let x_795 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_793.xy, x_793.z);
        u_xlat69 = x_795;
        let x_797 : f32 = u_xlat15.y;
        let x_798 : f32 = u_xlat69;
        let x_800 : f32 = u_xlat67;
        u_xlat67 = ((x_797 * x_798) + x_800);
        let x_803 : vec4<f32> = u_xlat10;
        let x_804 : vec2<f32> = vec2<f32>(x_803.z, x_803.w);
        let x_806 : f32 = u_xlat6.z;
        txVec10 = vec3<f32>(x_804.x, x_804.y, x_806);
        let x_813 : vec3<f32> = txVec10;
        let x_815 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_813.xy, x_813.z);
        u_xlat69 = x_815;
        let x_817 : f32 = u_xlat15.z;
        let x_818 : f32 = u_xlat69;
        let x_820 : f32 = u_xlat67;
        u_xlat67 = ((x_817 * x_818) + x_820);
        let x_823 : vec4<f32> = u_xlat9;
        let x_824 : vec2<f32> = vec2<f32>(x_823.x, x_823.y);
        let x_826 : f32 = u_xlat6.z;
        txVec11 = vec3<f32>(x_824.x, x_824.y, x_826);
        let x_833 : vec3<f32> = txVec11;
        let x_835 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_833.xy, x_833.z);
        u_xlat69 = x_835;
        let x_837 : f32 = u_xlat15.w;
        let x_838 : f32 = u_xlat69;
        let x_840 : f32 = u_xlat67;
        u_xlat67 = ((x_837 * x_838) + x_840);
        let x_843 : vec4<f32> = u_xlat9;
        let x_844 : vec2<f32> = vec2<f32>(x_843.z, x_843.w);
        let x_846 : f32 = u_xlat6.z;
        txVec12 = vec3<f32>(x_844.x, x_844.y, x_846);
        let x_853 : vec3<f32> = txVec12;
        let x_855 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_853.xy, x_853.z);
        u_xlat69 = x_855;
        let x_856 : f32 = u_xlat65;
        let x_857 : f32 = u_xlat69;
        let x_859 : f32 = u_xlat67;
        u_xlat64 = ((x_856 * x_857) + x_859);
      } else {
        let x_862 : vec4<f32> = u_xlat6;
        let x_865 : vec4<f32> = x_272.x_MainLightShadowmapSize;
        let x_868 : vec2<f32> = ((vec2<f32>(x_862.x, x_862.y) * vec2<f32>(x_865.z, x_865.w)) + vec2<f32>(0.5f, 0.5f));
        let x_869 : vec4<f32> = u_xlat7;
        u_xlat7 = vec4<f32>(x_868.x, x_868.y, x_869.z, x_869.w);
        let x_871 : vec4<f32> = u_xlat7;
        let x_873 : vec2<f32> = floor(vec2<f32>(x_871.x, x_871.y));
        let x_874 : vec4<f32> = u_xlat7;
        u_xlat7 = vec4<f32>(x_873.x, x_873.y, x_874.z, x_874.w);
        let x_876 : vec4<f32> = u_xlat6;
        let x_879 : vec4<f32> = x_272.x_MainLightShadowmapSize;
        let x_882 : vec4<f32> = u_xlat7;
        u_xlat49 = ((vec2<f32>(x_876.x, x_876.y) * vec2<f32>(x_879.z, x_879.w)) + -(vec2<f32>(x_882.x, x_882.y)));
        let x_886 : vec2<f32> = u_xlat49;
        u_xlat8 = (vec4<f32>(x_886.x, x_886.x, x_886.y, x_886.y) + vec4<f32>(0.5f, 1.0f, 0.5f, 1.0f));
        let x_889 : vec4<f32> = u_xlat8;
        let x_891 : vec4<f32> = u_xlat8;
        u_xlat9 = (vec4<f32>(x_889.x, x_889.x, x_889.z, x_889.z) * vec4<f32>(x_891.x, x_891.x, x_891.z, x_891.z));
        let x_894 : vec4<f32> = u_xlat9;
        let x_898 : vec2<f32> = (vec2<f32>(x_894.y, x_894.w) * vec2<f32>(0.040816002f, 0.040816002f));
        let x_899 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_899.x, x_898.x, x_899.z, x_898.y);
        let x_901 : vec4<f32> = u_xlat9;
        let x_904 : vec2<f32> = u_xlat49;
        let x_906 : vec2<f32> = ((vec2<f32>(x_901.x, x_901.z) * vec2<f32>(0.5f, 0.5f)) + -(x_904));
        let x_907 : vec4<f32> = u_xlat8;
        u_xlat8 = vec4<f32>(x_906.x, x_907.y, x_906.y, x_907.w);
        let x_909 : vec2<f32> = u_xlat49;
        let x_911 : vec2<f32> = (-(x_909) + vec2<f32>(1.0f, 1.0f));
        let x_912 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_911.x, x_911.y, x_912.z, x_912.w);
        let x_914 : vec2<f32> = u_xlat49;
        u_xlat51 = min(x_914, vec2<f32>(0.0f, 0.0f));
        let x_916 : vec2<f32> = u_xlat51;
        let x_918 : vec2<f32> = u_xlat51;
        let x_920 : vec4<f32> = u_xlat9;
        let x_922 : vec2<f32> = ((-(x_916) * x_918) + vec2<f32>(x_920.x, x_920.y));
        let x_923 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_922.x, x_922.y, x_923.z, x_923.w);
        let x_925 : vec2<f32> = u_xlat49;
        u_xlat51 = max(x_925, vec2<f32>(0.0f, 0.0f));
        let x_928 : vec2<f32> = u_xlat51;
        let x_930 : vec2<f32> = u_xlat51;
        let x_932 : vec4<f32> = u_xlat8;
        let x_934 : vec2<f32> = ((-(x_928) * x_930) + vec2<f32>(x_932.y, x_932.w));
        let x_935 : vec3<f32> = u_xlat29;
        u_xlat29 = vec3<f32>(x_934.x, x_935.y, x_934.y);
        let x_937 : vec4<f32> = u_xlat9;
        let x_940 : vec2<f32> = (vec2<f32>(x_937.x, x_937.y) + vec2<f32>(2.0f, 2.0f));
        let x_941 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_940.x, x_940.y, x_941.z, x_941.w);
        let x_943 : vec3<f32> = u_xlat29;
        let x_945 : vec2<f32> = (vec2<f32>(x_943.x, x_943.z) + vec2<f32>(2.0f, 2.0f));
        let x_946 : vec4<f32> = u_xlat8;
        u_xlat8 = vec4<f32>(x_946.x, x_945.x, x_946.z, x_945.y);
        let x_949 : f32 = u_xlat8.y;
        u_xlat11.z = (x_949 * 0.081632003f);
        let x_953 : vec4<f32> = u_xlat8;
        let x_956 : vec3<f32> = (vec3<f32>(x_953.z, x_953.x, x_953.w) * vec3<f32>(0.081632003f, 0.081632003f, 0.081632003f));
        let x_957 : vec4<f32> = u_xlat12;
        u_xlat12 = vec4<f32>(x_956.x, x_956.y, x_956.z, x_957.w);
        let x_959 : vec4<f32> = u_xlat9;
        let x_962 : vec2<f32> = (vec2<f32>(x_959.x, x_959.y) * vec2<f32>(0.081632003f, 0.081632003f));
        let x_963 : vec4<f32> = u_xlat8;
        u_xlat8 = vec4<f32>(x_962.x, x_962.y, x_963.z, x_963.w);
        let x_966 : f32 = u_xlat12.y;
        u_xlat11.x = x_966;
        let x_968 : vec2<f32> = u_xlat49;
        let x_975 : vec2<f32> = ((vec2<f32>(x_968.x, x_968.x) * vec2<f32>(-0.081632003f, 0.081632003f)) + vec2<f32>(0.163264006f, 0.081632003f));
        let x_976 : vec4<f32> = u_xlat11;
        u_xlat11 = vec4<f32>(x_976.x, x_975.x, x_976.z, x_975.y);
        let x_978 : vec2<f32> = u_xlat49;
        let x_982 : vec2<f32> = ((vec2<f32>(x_978.x, x_978.x) * vec2<f32>(-0.081632003f, 0.081632003f)) + vec2<f32>(0.081632003f, 0.163264006f));
        let x_983 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_982.x, x_983.y, x_982.y, x_983.w);
        let x_986 : f32 = u_xlat8.x;
        u_xlat9.y = x_986;
        let x_989 : f32 = u_xlat10.y;
        u_xlat9.w = x_989;
        let x_991 : vec4<f32> = u_xlat9;
        let x_992 : vec4<f32> = u_xlat11;
        u_xlat11 = (x_991 + x_992);
        let x_994 : vec2<f32> = u_xlat49;
        let x_997 : vec2<f32> = ((vec2<f32>(x_994.y, x_994.y) * vec2<f32>(-0.081632003f, 0.081632003f)) + vec2<f32>(0.163264006f, 0.081632003f));
        let x_998 : vec4<f32> = u_xlat12;
        u_xlat12 = vec4<f32>(x_998.x, x_997.x, x_998.z, x_997.y);
        let x_1000 : vec2<f32> = u_xlat49;
        let x_1003 : vec2<f32> = ((vec2<f32>(x_1000.y, x_1000.y) * vec2<f32>(-0.081632003f, 0.081632003f)) + vec2<f32>(0.081632003f, 0.163264006f));
        let x_1004 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_1003.x, x_1004.y, x_1003.y, x_1004.w);
        let x_1007 : f32 = u_xlat8.y;
        u_xlat10.y = x_1007;
        let x_1009 : vec4<f32> = u_xlat10;
        let x_1010 : vec4<f32> = u_xlat12;
        u_xlat8 = (x_1009 + x_1010);
        let x_1012 : vec4<f32> = u_xlat9;
        let x_1013 : vec4<f32> = u_xlat11;
        u_xlat9 = (x_1012 / x_1013);
        let x_1015 : vec4<f32> = u_xlat9;
        u_xlat9 = (x_1015 + vec4<f32>(-3.5f, -1.5f, 0.5f, 2.5f));
        let x_1021 : vec4<f32> = u_xlat10;
        let x_1022 : vec4<f32> = u_xlat8;
        u_xlat10 = (x_1021 / x_1022);
        let x_1024 : vec4<f32> = u_xlat10;
        u_xlat10 = (x_1024 + vec4<f32>(-3.5f, -1.5f, 0.5f, 2.5f));
        let x_1026 : vec4<f32> = u_xlat9;
        let x_1029 : vec4<f32> = x_272.x_MainLightShadowmapSize;
        u_xlat9 = (vec4<f32>(x_1026.w, x_1026.x, x_1026.y, x_1026.z) * vec4<f32>(x_1029.x, x_1029.x, x_1029.x, x_1029.x));
        let x_1032 : vec4<f32> = u_xlat10;
        let x_1035 : vec4<f32> = x_272.x_MainLightShadowmapSize;
        u_xlat10 = (vec4<f32>(x_1032.x, x_1032.w, x_1032.y, x_1032.z) * vec4<f32>(x_1035.y, x_1035.y, x_1035.y, x_1035.y));
        let x_1038 : vec4<f32> = u_xlat9;
        let x_1039 : vec3<f32> = vec3<f32>(x_1038.y, x_1038.z, x_1038.w);
        let x_1040 : vec4<f32> = u_xlat12;
        u_xlat12 = vec4<f32>(x_1039.x, x_1040.y, x_1039.y, x_1039.z);
        let x_1043 : f32 = u_xlat10.x;
        u_xlat12.y = x_1043;
        let x_1045 : vec4<f32> = u_xlat7;
        let x_1048 : vec4<f32> = x_272.x_MainLightShadowmapSize;
        let x_1051 : vec4<f32> = u_xlat12;
        u_xlat13 = ((vec4<f32>(x_1045.x, x_1045.y, x_1045.x, x_1045.y) * vec4<f32>(x_1048.x, x_1048.y, x_1048.x, x_1048.y)) + vec4<f32>(x_1051.x, x_1051.y, x_1051.z, x_1051.y));
        let x_1054 : vec4<f32> = u_xlat7;
        let x_1057 : vec4<f32> = x_272.x_MainLightShadowmapSize;
        let x_1060 : vec4<f32> = u_xlat12;
        u_xlat49 = ((vec2<f32>(x_1054.x, x_1054.y) * vec2<f32>(x_1057.x, x_1057.y)) + vec2<f32>(x_1060.w, x_1060.y));
        let x_1064 : f32 = u_xlat12.y;
        u_xlat9.y = x_1064;
        let x_1067 : f32 = u_xlat10.z;
        u_xlat12.y = x_1067;
        let x_1069 : vec4<f32> = u_xlat7;
        let x_1072 : vec4<f32> = x_272.x_MainLightShadowmapSize;
        let x_1075 : vec4<f32> = u_xlat12;
        u_xlat14 = ((vec4<f32>(x_1069.x, x_1069.y, x_1069.x, x_1069.y) * vec4<f32>(x_1072.x, x_1072.y, x_1072.x, x_1072.y)) + vec4<f32>(x_1075.x, x_1075.y, x_1075.z, x_1075.y));
        let x_1078 : vec4<f32> = u_xlat7;
        let x_1081 : vec4<f32> = x_272.x_MainLightShadowmapSize;
        let x_1084 : vec4<f32> = u_xlat12;
        let x_1086 : vec2<f32> = ((vec2<f32>(x_1078.x, x_1078.y) * vec2<f32>(x_1081.x, x_1081.y)) + vec2<f32>(x_1084.w, x_1084.y));
        let x_1087 : vec4<f32> = u_xlat15;
        u_xlat15 = vec4<f32>(x_1086.x, x_1086.y, x_1087.z, x_1087.w);
        let x_1090 : f32 = u_xlat12.y;
        u_xlat9.z = x_1090;
        let x_1093 : vec4<f32> = u_xlat7;
        let x_1096 : vec4<f32> = x_272.x_MainLightShadowmapSize;
        let x_1099 : vec4<f32> = u_xlat9;
        u_xlat16 = ((vec4<f32>(x_1093.x, x_1093.y, x_1093.x, x_1093.y) * vec4<f32>(x_1096.x, x_1096.y, x_1096.x, x_1096.y)) + vec4<f32>(x_1099.x, x_1099.y, x_1099.x, x_1099.z));
        let x_1103 : f32 = u_xlat10.w;
        u_xlat12.y = x_1103;
        let x_1106 : vec4<f32> = u_xlat7;
        let x_1109 : vec4<f32> = x_272.x_MainLightShadowmapSize;
        let x_1112 : vec4<f32> = u_xlat12;
        u_xlat17 = ((vec4<f32>(x_1106.x, x_1106.y, x_1106.x, x_1106.y) * vec4<f32>(x_1109.x, x_1109.y, x_1109.x, x_1109.y)) + vec4<f32>(x_1112.x, x_1112.y, x_1112.z, x_1112.y));
        let x_1116 : vec4<f32> = u_xlat7;
        let x_1119 : vec4<f32> = x_272.x_MainLightShadowmapSize;
        let x_1122 : vec4<f32> = u_xlat12;
        u_xlat30 = ((vec2<f32>(x_1116.x, x_1116.y) * vec2<f32>(x_1119.x, x_1119.y)) + vec2<f32>(x_1122.w, x_1122.y));
        let x_1126 : f32 = u_xlat12.y;
        u_xlat9.w = x_1126;
        let x_1129 : vec4<f32> = u_xlat7;
        let x_1132 : vec4<f32> = x_272.x_MainLightShadowmapSize;
        let x_1135 : vec4<f32> = u_xlat9;
        u_xlat57 = ((vec2<f32>(x_1129.x, x_1129.y) * vec2<f32>(x_1132.x, x_1132.y)) + vec2<f32>(x_1135.x, x_1135.w));
        let x_1138 : vec4<f32> = u_xlat12;
        let x_1139 : vec3<f32> = vec3<f32>(x_1138.x, x_1138.z, x_1138.w);
        let x_1140 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_1139.x, x_1140.y, x_1139.y, x_1139.z);
        let x_1142 : vec4<f32> = u_xlat7;
        let x_1145 : vec4<f32> = x_272.x_MainLightShadowmapSize;
        let x_1148 : vec4<f32> = u_xlat10;
        u_xlat12 = ((vec4<f32>(x_1142.x, x_1142.y, x_1142.x, x_1142.y) * vec4<f32>(x_1145.x, x_1145.y, x_1145.x, x_1145.y)) + vec4<f32>(x_1148.x, x_1148.y, x_1148.z, x_1148.y));
        let x_1152 : vec4<f32> = u_xlat7;
        let x_1155 : vec4<f32> = x_272.x_MainLightShadowmapSize;
        let x_1158 : vec4<f32> = u_xlat10;
        u_xlat52 = ((vec2<f32>(x_1152.x, x_1152.y) * vec2<f32>(x_1155.x, x_1155.y)) + vec2<f32>(x_1158.w, x_1158.y));
        let x_1162 : f32 = u_xlat9.x;
        u_xlat10.x = x_1162;
        let x_1164 : vec4<f32> = u_xlat7;
        let x_1167 : vec4<f32> = x_272.x_MainLightShadowmapSize;
        let x_1170 : vec4<f32> = u_xlat10;
        let x_1172 : vec2<f32> = ((vec2<f32>(x_1164.x, x_1164.y) * vec2<f32>(x_1167.x, x_1167.y)) + vec2<f32>(x_1170.x, x_1170.y));
        let x_1173 : vec4<f32> = u_xlat7;
        u_xlat7 = vec4<f32>(x_1172.x, x_1172.y, x_1173.z, x_1173.w);
        let x_1176 : vec4<f32> = u_xlat8;
        let x_1178 : vec4<f32> = u_xlat11;
        u_xlat18 = (vec4<f32>(x_1176.x, x_1176.x, x_1176.x, x_1176.x) * x_1178);
        let x_1181 : vec4<f32> = u_xlat8;
        let x_1183 : vec4<f32> = u_xlat11;
        u_xlat19 = (vec4<f32>(x_1181.y, x_1181.y, x_1181.y, x_1181.y) * x_1183);
        let x_1186 : vec4<f32> = u_xlat8;
        let x_1188 : vec4<f32> = u_xlat11;
        u_xlat20 = (vec4<f32>(x_1186.z, x_1186.z, x_1186.z, x_1186.z) * x_1188);
        let x_1190 : vec4<f32> = u_xlat8;
        let x_1192 : vec4<f32> = u_xlat11;
        u_xlat8 = (vec4<f32>(x_1190.w, x_1190.w, x_1190.w, x_1190.w) * x_1192);
        let x_1195 : vec4<f32> = u_xlat13;
        let x_1196 : vec2<f32> = vec2<f32>(x_1195.x, x_1195.y);
        let x_1198 : f32 = u_xlat6.z;
        txVec13 = vec3<f32>(x_1196.x, x_1196.y, x_1198);
        let x_1205 : vec3<f32> = txVec13;
        let x_1207 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1205.xy, x_1205.z);
        u_xlat65 = x_1207;
        let x_1209 : vec4<f32> = u_xlat13;
        let x_1210 : vec2<f32> = vec2<f32>(x_1209.z, x_1209.w);
        let x_1212 : f32 = u_xlat6.z;
        txVec14 = vec3<f32>(x_1210.x, x_1210.y, x_1212);
        let x_1219 : vec3<f32> = txVec14;
        let x_1221 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1219.xy, x_1219.z);
        u_xlat67 = x_1221;
        let x_1222 : f32 = u_xlat67;
        let x_1224 : f32 = u_xlat18.y;
        u_xlat67 = (x_1222 * x_1224);
        let x_1227 : f32 = u_xlat18.x;
        let x_1228 : f32 = u_xlat65;
        let x_1230 : f32 = u_xlat67;
        u_xlat65 = ((x_1227 * x_1228) + x_1230);
        let x_1233 : vec2<f32> = u_xlat49;
        let x_1235 : f32 = u_xlat6.z;
        txVec15 = vec3<f32>(x_1233.x, x_1233.y, x_1235);
        let x_1242 : vec3<f32> = txVec15;
        let x_1244 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1242.xy, x_1242.z);
        u_xlat67 = x_1244;
        let x_1246 : f32 = u_xlat18.z;
        let x_1247 : f32 = u_xlat67;
        let x_1249 : f32 = u_xlat65;
        u_xlat65 = ((x_1246 * x_1247) + x_1249);
        let x_1252 : vec4<f32> = u_xlat16;
        let x_1253 : vec2<f32> = vec2<f32>(x_1252.x, x_1252.y);
        let x_1255 : f32 = u_xlat6.z;
        txVec16 = vec3<f32>(x_1253.x, x_1253.y, x_1255);
        let x_1262 : vec3<f32> = txVec16;
        let x_1264 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1262.xy, x_1262.z);
        u_xlat67 = x_1264;
        let x_1266 : f32 = u_xlat18.w;
        let x_1267 : f32 = u_xlat67;
        let x_1269 : f32 = u_xlat65;
        u_xlat65 = ((x_1266 * x_1267) + x_1269);
        let x_1272 : vec4<f32> = u_xlat14;
        let x_1273 : vec2<f32> = vec2<f32>(x_1272.x, x_1272.y);
        let x_1275 : f32 = u_xlat6.z;
        txVec17 = vec3<f32>(x_1273.x, x_1273.y, x_1275);
        let x_1282 : vec3<f32> = txVec17;
        let x_1284 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1282.xy, x_1282.z);
        u_xlat67 = x_1284;
        let x_1286 : f32 = u_xlat19.x;
        let x_1287 : f32 = u_xlat67;
        let x_1289 : f32 = u_xlat65;
        u_xlat65 = ((x_1286 * x_1287) + x_1289);
        let x_1292 : vec4<f32> = u_xlat14;
        let x_1293 : vec2<f32> = vec2<f32>(x_1292.z, x_1292.w);
        let x_1295 : f32 = u_xlat6.z;
        txVec18 = vec3<f32>(x_1293.x, x_1293.y, x_1295);
        let x_1302 : vec3<f32> = txVec18;
        let x_1304 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1302.xy, x_1302.z);
        u_xlat67 = x_1304;
        let x_1306 : f32 = u_xlat19.y;
        let x_1307 : f32 = u_xlat67;
        let x_1309 : f32 = u_xlat65;
        u_xlat65 = ((x_1306 * x_1307) + x_1309);
        let x_1312 : vec4<f32> = u_xlat15;
        let x_1313 : vec2<f32> = vec2<f32>(x_1312.x, x_1312.y);
        let x_1315 : f32 = u_xlat6.z;
        txVec19 = vec3<f32>(x_1313.x, x_1313.y, x_1315);
        let x_1322 : vec3<f32> = txVec19;
        let x_1324 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1322.xy, x_1322.z);
        u_xlat67 = x_1324;
        let x_1326 : f32 = u_xlat19.z;
        let x_1327 : f32 = u_xlat67;
        let x_1329 : f32 = u_xlat65;
        u_xlat65 = ((x_1326 * x_1327) + x_1329);
        let x_1332 : vec4<f32> = u_xlat16;
        let x_1333 : vec2<f32> = vec2<f32>(x_1332.z, x_1332.w);
        let x_1335 : f32 = u_xlat6.z;
        txVec20 = vec3<f32>(x_1333.x, x_1333.y, x_1335);
        let x_1342 : vec3<f32> = txVec20;
        let x_1344 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1342.xy, x_1342.z);
        u_xlat67 = x_1344;
        let x_1346 : f32 = u_xlat19.w;
        let x_1347 : f32 = u_xlat67;
        let x_1349 : f32 = u_xlat65;
        u_xlat65 = ((x_1346 * x_1347) + x_1349);
        let x_1352 : vec4<f32> = u_xlat17;
        let x_1353 : vec2<f32> = vec2<f32>(x_1352.x, x_1352.y);
        let x_1355 : f32 = u_xlat6.z;
        txVec21 = vec3<f32>(x_1353.x, x_1353.y, x_1355);
        let x_1362 : vec3<f32> = txVec21;
        let x_1364 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1362.xy, x_1362.z);
        u_xlat67 = x_1364;
        let x_1366 : f32 = u_xlat20.x;
        let x_1367 : f32 = u_xlat67;
        let x_1369 : f32 = u_xlat65;
        u_xlat65 = ((x_1366 * x_1367) + x_1369);
        let x_1372 : vec4<f32> = u_xlat17;
        let x_1373 : vec2<f32> = vec2<f32>(x_1372.z, x_1372.w);
        let x_1375 : f32 = u_xlat6.z;
        txVec22 = vec3<f32>(x_1373.x, x_1373.y, x_1375);
        let x_1382 : vec3<f32> = txVec22;
        let x_1384 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1382.xy, x_1382.z);
        u_xlat67 = x_1384;
        let x_1386 : f32 = u_xlat20.y;
        let x_1387 : f32 = u_xlat67;
        let x_1389 : f32 = u_xlat65;
        u_xlat65 = ((x_1386 * x_1387) + x_1389);
        let x_1392 : vec2<f32> = u_xlat30;
        let x_1394 : f32 = u_xlat6.z;
        txVec23 = vec3<f32>(x_1392.x, x_1392.y, x_1394);
        let x_1401 : vec3<f32> = txVec23;
        let x_1403 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1401.xy, x_1401.z);
        u_xlat67 = x_1403;
        let x_1405 : f32 = u_xlat20.z;
        let x_1406 : f32 = u_xlat67;
        let x_1408 : f32 = u_xlat65;
        u_xlat65 = ((x_1405 * x_1406) + x_1408);
        let x_1411 : vec2<f32> = u_xlat57;
        let x_1413 : f32 = u_xlat6.z;
        txVec24 = vec3<f32>(x_1411.x, x_1411.y, x_1413);
        let x_1420 : vec3<f32> = txVec24;
        let x_1422 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1420.xy, x_1420.z);
        u_xlat67 = x_1422;
        let x_1424 : f32 = u_xlat20.w;
        let x_1425 : f32 = u_xlat67;
        let x_1427 : f32 = u_xlat65;
        u_xlat65 = ((x_1424 * x_1425) + x_1427);
        let x_1430 : vec4<f32> = u_xlat12;
        let x_1431 : vec2<f32> = vec2<f32>(x_1430.x, x_1430.y);
        let x_1433 : f32 = u_xlat6.z;
        txVec25 = vec3<f32>(x_1431.x, x_1431.y, x_1433);
        let x_1440 : vec3<f32> = txVec25;
        let x_1442 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1440.xy, x_1440.z);
        u_xlat67 = x_1442;
        let x_1444 : f32 = u_xlat8.x;
        let x_1445 : f32 = u_xlat67;
        let x_1447 : f32 = u_xlat65;
        u_xlat65 = ((x_1444 * x_1445) + x_1447);
        let x_1450 : vec4<f32> = u_xlat12;
        let x_1451 : vec2<f32> = vec2<f32>(x_1450.z, x_1450.w);
        let x_1453 : f32 = u_xlat6.z;
        txVec26 = vec3<f32>(x_1451.x, x_1451.y, x_1453);
        let x_1460 : vec3<f32> = txVec26;
        let x_1462 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1460.xy, x_1460.z);
        u_xlat67 = x_1462;
        let x_1464 : f32 = u_xlat8.y;
        let x_1465 : f32 = u_xlat67;
        let x_1467 : f32 = u_xlat65;
        u_xlat65 = ((x_1464 * x_1465) + x_1467);
        let x_1470 : vec2<f32> = u_xlat52;
        let x_1472 : f32 = u_xlat6.z;
        txVec27 = vec3<f32>(x_1470.x, x_1470.y, x_1472);
        let x_1479 : vec3<f32> = txVec27;
        let x_1481 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1479.xy, x_1479.z);
        u_xlat67 = x_1481;
        let x_1483 : f32 = u_xlat8.z;
        let x_1484 : f32 = u_xlat67;
        let x_1486 : f32 = u_xlat65;
        u_xlat65 = ((x_1483 * x_1484) + x_1486);
        let x_1489 : vec4<f32> = u_xlat7;
        let x_1490 : vec2<f32> = vec2<f32>(x_1489.x, x_1489.y);
        let x_1492 : f32 = u_xlat6.z;
        txVec28 = vec3<f32>(x_1490.x, x_1490.y, x_1492);
        let x_1499 : vec3<f32> = txVec28;
        let x_1501 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1499.xy, x_1499.z);
        u_xlat67 = x_1501;
        let x_1503 : f32 = u_xlat8.w;
        let x_1504 : f32 = u_xlat67;
        let x_1506 : f32 = u_xlat65;
        u_xlat64 = ((x_1503 * x_1504) + x_1506);
      }
    }
  } else {
    let x_1510 : vec4<f32> = u_xlat6;
    let x_1511 : vec2<f32> = vec2<f32>(x_1510.x, x_1510.y);
    let x_1513 : f32 = u_xlat6.z;
    txVec29 = vec3<f32>(x_1511.x, x_1511.y, x_1513);
    let x_1520 : vec3<f32> = txVec29;
    let x_1522 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1520.xy, x_1520.z);
    u_xlat64 = x_1522;
  }
  let x_1524 : f32 = x_272.x_MainLightShadowParams.x;
  u_xlat65 = (-(x_1524) + 1.0f);
  let x_1527 : f32 = u_xlat64;
  let x_1529 : f32 = x_272.x_MainLightShadowParams.x;
  let x_1531 : f32 = u_xlat65;
  u_xlat64 = ((x_1527 * x_1529) + x_1531);
  let x_1535 : f32 = u_xlat6.z;
  u_xlatb67 = (0.0f >= x_1535);
  let x_1539 : f32 = u_xlat6.z;
  u_xlatb6 = (x_1539 >= 1.0f);
  let x_1541 : bool = u_xlatb67;
  let x_1542 : bool = u_xlatb6;
  u_xlatb67 = (x_1541 | x_1542);
  let x_1544 : bool = u_xlatb67;
  let x_1545 : f32 = u_xlat64;
  u_xlat64 = select(x_1545, 1.0f, x_1544);
  let x_1547 : vec3<f32> = u_xlat0;
  let x_1549 : vec4<f32> = x_90.x_MainLightPosition;
  u_xlat0.x = dot(x_1547, -(vec3<f32>(x_1549.x, x_1549.y, x_1549.z)));
  let x_1555 : f32 = u_xlat0.x;
  u_xlat0.x = clamp(x_1555, 0.0f, 1.0f);
  let x_1558 : f32 = u_xlat64;
  let x_1562 : vec4<f32> = x_90.x_MainLightColor;
  let x_1564 : vec3<f32> = (vec3<f32>(x_1558, x_1558, x_1558) * vec3<f32>(x_1562.x, x_1562.y, x_1562.z));
  let x_1565 : vec4<f32> = u_xlat6;
  u_xlat6 = vec4<f32>(x_1564.x, x_1564.y, x_1564.z, x_1565.w);
  let x_1567 : vec3<f32> = u_xlat0;
  let x_1569 : vec4<f32> = u_xlat6;
  u_xlat0 = (vec3<f32>(x_1567.x, x_1567.x, x_1567.x) * vec3<f32>(x_1569.x, x_1569.y, x_1569.z));
  let x_1572 : vec3<f32> = u_xlat0;
  let x_1573 : vec4<f32> = u_xlat3;
  u_xlat0 = (x_1572 * vec3<f32>(x_1573.x, x_1573.y, x_1573.z));
  let x_1577 : f32 = x_161.unity_LODFade.x;
  u_xlatb64 = (x_1577 < 0.0f);
  let x_1580 : f32 = x_161.unity_LODFade.x;
  u_xlat3.x = (x_1580 + 1.0f);
  let x_1583 : bool = u_xlatb64;
  if (x_1583) {
    let x_1588 : f32 = u_xlat3.x;
    x_1584 = x_1588;
  } else {
    let x_1591 : f32 = x_161.unity_LODFade.x;
    x_1584 = x_1591;
  }
  let x_1592 : f32 = x_1584;
  u_xlat64 = x_1592;
  let x_1594 : f32 = u_xlat64;
  u_xlatb3 = (0.5f >= x_1594);
  let x_1596 : vec3<f32> = u_xlat1;
  let x_1600 : vec4<f32> = x_90.x_ScreenParams;
  u_xlat1 = (abs(x_1596) * vec3<f32>(x_1600.x, x_1600.y, x_1600.x));
  let x_1606 : vec3<f32> = u_xlat1;
  u_xlatu1 = vec3<u32>(x_1606);
  let x_1610 : u32 = u_xlatu1.z;
  u_xlatu43 = (x_1610 * 1025u);
  let x_1614 : u32 = u_xlatu43;
  u_xlatu24 = (x_1614 >> 6u);
  let x_1618 : u32 = u_xlatu43;
  let x_1619 : u32 = u_xlatu24;
  u_xlati43 = bitcast<i32>((x_1618 ^ x_1619));
  let x_1622 : i32 = u_xlati43;
  u_xlatu43 = (bitcast<u32>(x_1622) * 9u);
  let x_1626 : u32 = u_xlatu43;
  u_xlatu24 = (x_1626 >> 11u);
  let x_1629 : u32 = u_xlatu43;
  let x_1630 : u32 = u_xlatu24;
  u_xlati43 = bitcast<i32>((x_1629 ^ x_1630));
  let x_1633 : i32 = u_xlati43;
  u_xlati43 = (x_1633 * 32769i);
  let x_1637 : i32 = u_xlati43;
  let x_1640 : u32 = u_xlatu1.y;
  u_xlati22 = bitcast<i32>((bitcast<u32>(x_1637) ^ x_1640));
  let x_1644 : i32 = u_xlati22;
  u_xlatu22 = (bitcast<u32>(x_1644) * 1025u);
  let x_1647 : u32 = u_xlatu22;
  u_xlatu43 = (x_1647 >> 6u);
  let x_1649 : u32 = u_xlatu43;
  let x_1650 : u32 = u_xlatu22;
  u_xlati22 = bitcast<i32>((x_1649 ^ x_1650));
  let x_1653 : i32 = u_xlati22;
  u_xlatu22 = (bitcast<u32>(x_1653) * 9u);
  let x_1656 : u32 = u_xlatu22;
  u_xlatu43 = (x_1656 >> 11u);
  let x_1658 : u32 = u_xlatu43;
  let x_1659 : u32 = u_xlatu22;
  u_xlati22 = bitcast<i32>((x_1658 ^ x_1659));
  let x_1662 : i32 = u_xlati22;
  u_xlati22 = (x_1662 * 32769i);
  let x_1665 : i32 = u_xlati22;
  let x_1668 : u32 = u_xlatu1.x;
  u_xlati1 = bitcast<i32>((bitcast<u32>(x_1665) ^ x_1668));
  let x_1671 : i32 = u_xlati1;
  u_xlatu1.x = (bitcast<u32>(x_1671) * 1025u);
  let x_1676 : u32 = u_xlatu1.x;
  u_xlatu22 = (x_1676 >> 6u);
  let x_1678 : u32 = u_xlatu22;
  let x_1680 : u32 = u_xlatu1.x;
  u_xlati1 = bitcast<i32>((x_1678 ^ x_1680));
  let x_1683 : i32 = u_xlati1;
  u_xlatu1.x = (bitcast<u32>(x_1683) * 9u);
  let x_1688 : u32 = u_xlatu1.x;
  u_xlatu22 = (x_1688 >> 11u);
  let x_1690 : u32 = u_xlatu22;
  let x_1692 : u32 = u_xlatu1.x;
  u_xlati1 = bitcast<i32>((x_1690 ^ x_1692));
  let x_1695 : i32 = u_xlati1;
  u_xlati1 = (x_1695 * 32769i);
  param = 1065353216i;
  let x_1701 : i32 = u_xlati1;
  param_1 = x_1701;
  param_2 = 0i;
  param_3 = 23i;
  let x_1704 : i32 = int_bitfieldInsert_i1_i1_i1_i1_(&(param), &(param_1), &(param_2), &(param_3));
  u_xlat1.x = bitcast<f32>(x_1704);
  let x_1708 : f32 = u_xlat1.x;
  u_xlat1.x = (x_1708 + -1.0f);
  let x_1713 : f32 = u_xlat1.x;
  u_xlat22 = (-(x_1713) + 1.0f);
  let x_1716 : bool = u_xlatb3;
  if (x_1716) {
    let x_1721 : f32 = u_xlat1.x;
    x_1717 = x_1721;
  } else {
    let x_1723 : f32 = u_xlat22;
    x_1717 = x_1723;
  }
  let x_1724 : f32 = x_1717;
  u_xlat1.x = x_1724;
  let x_1726 : f32 = u_xlat64;
  let x_1729 : f32 = u_xlat1.x;
  u_xlat1.x = ((x_1726 * 2.0f) + -(x_1729));
  let x_1734 : f32 = u_xlat1.x;
  let x_1736 : f32 = u_xlat3.w;
  u_xlat22 = (x_1734 * x_1736);
  let x_1741 : f32 = u_xlat22;
  u_xlatb43.x = (x_1741 >= 0.400000006f);
  let x_1747 : bool = u_xlatb43.x;
  let x_1748 : f32 = u_xlat22;
  u_xlat43.x = select(0.0f, x_1748, x_1747);
  let x_1752 : f32 = u_xlat3.w;
  let x_1754 : f32 = u_xlat1.x;
  u_xlat1.x = ((x_1752 * x_1754) + -0.400000006f);
  let x_1759 : f32 = u_xlat22;
  u_xlat64 = dpdxCoarse(x_1759);
  let x_1761 : f32 = u_xlat22;
  u_xlat22 = dpdyCoarse(x_1761);
  let x_1763 : f32 = u_xlat22;
  let x_1765 : f32 = u_xlat64;
  u_xlat22 = (abs(x_1763) + abs(x_1765));
  let x_1768 : f32 = u_xlat22;
  u_xlat22 = max(x_1768, 0.0001f);
  let x_1772 : f32 = u_xlat1.x;
  let x_1773 : f32 = u_xlat22;
  u_xlat1.x = (x_1772 / x_1773);
  let x_1777 : f32 = u_xlat1.x;
  u_xlat1.x = (x_1777 + 0.5f);
  let x_1781 : f32 = u_xlat1.x;
  u_xlat1.x = clamp(x_1781, 0.0f, 1.0f);
  let x_1786 : f32 = x_90.x_AlphaToMaskAvailable;
  u_xlatb22 = !((x_1786 == 0.0f));
  let x_1788 : bool = u_xlatb22;
  if (x_1788) {
    let x_1793 : f32 = u_xlat1.x;
    x_1789 = x_1793;
  } else {
    let x_1796 : f32 = u_xlat43.x;
    x_1789 = x_1796;
  }
  let x_1797 : f32 = x_1789;
  u_xlat1.x = x_1797;
  let x_1800 : f32 = u_xlat1.x;
  u_xlat43.x = (x_1800 + -0.0001f);
  let x_1805 : f32 = u_xlat43.x;
  u_xlatb43.x = (x_1805 < 0.0f);
  let x_1809 : bool = u_xlatb43.x;
  if (((select(0i, 1i, x_1809) * -1i) != 0i)) {
    discard;
  }
  let x_1819 : f32 = vs_INTERP2.w;
  u_xlatb43.x = (0.0f < x_1819);
  let x_1823 : f32 = x_161.unity_WorldTransformParams.w;
  u_xlatb43.y = (x_1823 >= 0.0f);
  let x_1827 : bool = u_xlatb43.x;
  u_xlat43.x = select(-1.0f, 1.0f, x_1827);
  let x_1831 : bool = u_xlatb43.y;
  u_xlat43.y = select(-1.0f, 1.0f, x_1831);
  let x_1835 : f32 = u_xlat43.y;
  let x_1837 : f32 = u_xlat43.x;
  u_xlat43.x = (x_1835 * x_1837);
  let x_1840 : vec3<f32> = vs_INTERP1;
  let x_1842 : vec4<f32> = vs_INTERP2;
  let x_1844 : vec3<f32> = (vec3<f32>(x_1840.z, x_1840.x, x_1840.y) * vec3<f32>(x_1842.y, x_1842.z, x_1842.x));
  let x_1845 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_1844.x, x_1844.y, x_1844.z, x_1845.w);
  let x_1847 : vec3<f32> = vs_INTERP1;
  let x_1849 : vec4<f32> = vs_INTERP2;
  let x_1852 : vec4<f32> = u_xlat3;
  let x_1855 : vec3<f32> = ((vec3<f32>(x_1847.y, x_1847.z, x_1847.x) * vec3<f32>(x_1849.z, x_1849.x, x_1849.y)) + -(vec3<f32>(x_1852.x, x_1852.y, x_1852.z)));
  let x_1856 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_1855.x, x_1855.y, x_1855.z, x_1856.w);
  let x_1858 : vec2<f32> = u_xlat43;
  let x_1860 : vec4<f32> = u_xlat3;
  let x_1862 : vec3<f32> = (vec3<f32>(x_1858.x, x_1858.x, x_1858.x) * vec3<f32>(x_1860.x, x_1860.y, x_1860.z));
  let x_1863 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_1862.x, x_1862.y, x_1862.z, x_1863.w);
  let x_1865 : vec4<f32> = u_xlat3;
  let x_1867 : vec3<f32> = u_xlat26;
  let x_1869 : vec3<f32> = (vec3<f32>(x_1865.x, x_1865.y, x_1865.z) * vec3<f32>(x_1867.y, x_1867.y, x_1867.y));
  let x_1870 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_1869.x, x_1869.y, x_1869.z, x_1870.w);
  let x_1872 : vec3<f32> = u_xlat26;
  let x_1874 : vec4<f32> = vs_INTERP2;
  let x_1877 : vec4<f32> = u_xlat3;
  let x_1879 : vec3<f32> = ((vec3<f32>(x_1872.x, x_1872.x, x_1872.x) * vec3<f32>(x_1874.x, x_1874.y, x_1874.z)) + vec3<f32>(x_1877.x, x_1877.y, x_1877.z));
  let x_1880 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_1879.x, x_1879.y, x_1879.z, x_1880.w);
  let x_1882 : vec3<f32> = u_xlat26;
  let x_1884 : vec3<f32> = vs_INTERP1;
  let x_1886 : vec4<f32> = u_xlat3;
  let x_1888 : vec3<f32> = ((vec3<f32>(x_1882.z, x_1882.z, x_1882.z) * x_1884) + vec3<f32>(x_1886.x, x_1886.y, x_1886.z));
  let x_1889 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_1888.x, x_1888.y, x_1888.z, x_1889.w);
  let x_1891 : vec4<f32> = u_xlat3;
  let x_1893 : vec4<f32> = u_xlat3;
  u_xlat43.x = dot(vec3<f32>(x_1891.x, x_1891.y, x_1891.z), vec3<f32>(x_1893.x, x_1893.y, x_1893.z));
  let x_1898 : f32 = u_xlat43.x;
  u_xlat43.x = inverseSqrt(x_1898);
  let x_1901 : vec2<f32> = u_xlat43;
  let x_1903 : vec4<f32> = u_xlat3;
  let x_1905 : vec3<f32> = (vec3<f32>(x_1901.x, x_1901.x, x_1901.x) * vec3<f32>(x_1903.x, x_1903.y, x_1903.z));
  let x_1906 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_1905.x, x_1905.y, x_1905.z, x_1906.w);
  let x_1915 : vec2<f32> = vs_INTERP5;
  let x_1917 : f32 = x_90.x_GlobalMipBias.x;
  let x_1918 : vec4<f32> = textureSampleBias(unity_Lightmap, samplerunity_Lightmap, x_1915, x_1917);
  u_xlat26 = vec3<f32>(x_1918.x, x_1918.y, x_1918.z);
  let x_1921 : vec4<f32> = x_90.x_ScaledScreenParams;
  let x_1922 : vec2<f32> = vec2<f32>(x_1921.x, x_1921.y);
  u_xlat43 = (vec2<f32>(1.0f, 1.0f) / vec2<f32>(x_1922.x, x_1922.y));
  let x_1927 : vec2<f32> = u_xlat43;
  let x_1928 : vec4<f32> = hlslcc_FragCoord;
  let x_1930 : vec2<f32> = (x_1927 * vec2<f32>(x_1928.x, x_1928.y));
  let x_1931 : vec4<f32> = u_xlat6;
  u_xlat6 = vec4<f32>(x_1930.x, x_1930.y, x_1931.z, x_1931.w);
  let x_1934 : f32 = u_xlat6.y;
  let x_1937 : f32 = x_90.x_ScaleBiasRt.x;
  let x_1940 : f32 = x_90.x_ScaleBiasRt.y;
  u_xlat43.x = ((x_1934 * x_1937) + x_1940);
  let x_1944 : f32 = u_xlat43.x;
  u_xlat6.z = (-(x_1944) + 1.0f);
  let x_1949 : f32 = u_xlat5.x;
  u_xlat5.x = x_1949;
  let x_1952 : f32 = u_xlat5.x;
  u_xlat5.x = clamp(x_1952, 0.0f, 1.0f);
  let x_1956 : f32 = u_xlat1.x;
  u_xlat1.x = x_1956;
  let x_1959 : f32 = u_xlat1.x;
  u_xlat1.x = clamp(x_1959, 0.0f, 1.0f);
  let x_1962 : vec3<f32> = u_xlat4;
  u_xlat4 = (x_1962 * vec3<f32>(0.959999979f, 0.959999979f, 0.959999979f));
  let x_1967 : f32 = u_xlat5.x;
  u_xlat43.x = (-(x_1967) + 1.0f);
  let x_1972 : f32 = u_xlat43.x;
  let x_1974 : f32 = u_xlat43.x;
  u_xlat64 = (x_1972 * x_1974);
  let x_1976 : f32 = u_xlat64;
  u_xlat64 = max(x_1976, 0.0078125f);
  let x_1980 : f32 = u_xlat64;
  let x_1981 : f32 = u_xlat64;
  u_xlat66 = (x_1980 * x_1981);
  let x_1984 : f32 = u_xlat5.x;
  u_xlat67 = (x_1984 + 0.040000021f);
  let x_1987 : f32 = u_xlat67;
  u_xlat67 = min(x_1987, 1.0f);
  let x_1989 : f32 = u_xlat64;
  u_xlat5.x = ((x_1989 * 4.0f) + 2.0f);
  let x_1999 : vec4<f32> = u_xlat6;
  let x_2002 : f32 = x_90.x_GlobalMipBias.x;
  let x_2003 : vec4<f32> = textureSampleBias(x_ScreenSpaceOcclusionTexture, sampler_ScreenSpaceOcclusionTexture, vec2<f32>(x_1999.x, x_1999.z), x_2002);
  u_xlat6.x = x_2003.x;
  let x_2008 : f32 = u_xlat6.x;
  u_xlat27 = (x_2008 + -1.0f);
  let x_2012 : f32 = x_90.x_AmbientOcclusionParam.w;
  let x_2013 : f32 = u_xlat27;
  u_xlat27 = ((x_2012 * x_2013) + 1.0f);
  let x_2017 : f32 = u_xlat6.x;
  let x_2019 : f32 = vs_INTERP4.w;
  u_xlat6.x = min(x_2017, x_2019);
  let x_2022 : bool = u_xlatb63;
  if (x_2022) {
    let x_2026 : f32 = x_272.x_MainLightShadowParams.y;
    u_xlatb63 = (x_2026 == 1.0f);
    let x_2028 : bool = u_xlatb63;
    if (x_2028) {
      let x_2032 : vec4<f32> = vs_INTERP9;
      let x_2035 : vec4<f32> = x_272.x_MainLightShadowOffset0;
      u_xlat7 = (vec4<f32>(x_2032.x, x_2032.y, x_2032.x, x_2032.y) + x_2035);
      let x_2038 : vec4<f32> = u_xlat7;
      let x_2039 : vec2<f32> = vec2<f32>(x_2038.x, x_2038.y);
      let x_2041 : f32 = vs_INTERP9.z;
      txVec30 = vec3<f32>(x_2039.x, x_2039.y, x_2041);
      let x_2048 : vec3<f32> = txVec30;
      let x_2050 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2048.xy, x_2048.z);
      u_xlat8.x = x_2050;
      let x_2053 : vec4<f32> = u_xlat7;
      let x_2054 : vec2<f32> = vec2<f32>(x_2053.z, x_2053.w);
      let x_2056 : f32 = vs_INTERP9.z;
      txVec31 = vec3<f32>(x_2054.x, x_2054.y, x_2056);
      let x_2063 : vec3<f32> = txVec31;
      let x_2065 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2063.xy, x_2063.z);
      u_xlat8.y = x_2065;
      let x_2067 : vec4<f32> = vs_INTERP9;
      let x_2070 : vec4<f32> = x_272.x_MainLightShadowOffset1;
      u_xlat7 = (vec4<f32>(x_2067.x, x_2067.y, x_2067.x, x_2067.y) + x_2070);
      let x_2073 : vec4<f32> = u_xlat7;
      let x_2074 : vec2<f32> = vec2<f32>(x_2073.x, x_2073.y);
      let x_2076 : f32 = vs_INTERP9.z;
      txVec32 = vec3<f32>(x_2074.x, x_2074.y, x_2076);
      let x_2083 : vec3<f32> = txVec32;
      let x_2085 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2083.xy, x_2083.z);
      u_xlat8.z = x_2085;
      let x_2088 : vec4<f32> = u_xlat7;
      let x_2089 : vec2<f32> = vec2<f32>(x_2088.z, x_2088.w);
      let x_2091 : f32 = vs_INTERP9.z;
      txVec33 = vec3<f32>(x_2089.x, x_2089.y, x_2091);
      let x_2098 : vec3<f32> = txVec33;
      let x_2100 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2098.xy, x_2098.z);
      u_xlat8.w = x_2100;
      let x_2102 : vec4<f32> = u_xlat8;
      u_xlat63 = dot(x_2102, vec4<f32>(0.25f, 0.25f, 0.25f, 0.25f));
    } else {
      let x_2107 : f32 = x_272.x_MainLightShadowParams.y;
      u_xlatb48.x = (x_2107 == 2.0f);
      let x_2111 : bool = u_xlatb48.x;
      if (x_2111) {
        let x_2115 : vec4<f32> = vs_INTERP9;
        let x_2118 : vec4<f32> = x_272.x_MainLightShadowmapSize;
        u_xlat48 = ((vec2<f32>(x_2115.x, x_2115.y) * vec2<f32>(x_2118.z, x_2118.w)) + vec2<f32>(0.5f, 0.5f));
        let x_2122 : vec2<f32> = u_xlat48;
        u_xlat48 = floor(x_2122);
        let x_2124 : vec4<f32> = vs_INTERP9;
        let x_2127 : vec4<f32> = x_272.x_MainLightShadowmapSize;
        let x_2130 : vec2<f32> = u_xlat48;
        let x_2132 : vec2<f32> = ((vec2<f32>(x_2124.x, x_2124.y) * vec2<f32>(x_2127.z, x_2127.w)) + -(x_2130));
        let x_2133 : vec4<f32> = u_xlat7;
        u_xlat7 = vec4<f32>(x_2132.x, x_2132.y, x_2133.z, x_2133.w);
        let x_2135 : vec4<f32> = u_xlat7;
        u_xlat8 = (vec4<f32>(x_2135.x, x_2135.x, x_2135.y, x_2135.y) + vec4<f32>(0.5f, 1.0f, 0.5f, 1.0f));
        let x_2138 : vec4<f32> = u_xlat8;
        let x_2140 : vec4<f32> = u_xlat8;
        u_xlat9 = (vec4<f32>(x_2138.x, x_2138.x, x_2138.z, x_2138.z) * vec4<f32>(x_2140.x, x_2140.x, x_2140.z, x_2140.z));
        let x_2143 : vec4<f32> = u_xlat9;
        u_xlat49 = (vec2<f32>(x_2143.y, x_2143.w) * vec2<f32>(0.079999998f, 0.079999998f));
        let x_2146 : vec4<f32> = u_xlat9;
        let x_2149 : vec4<f32> = u_xlat7;
        let x_2152 : vec2<f32> = ((vec2<f32>(x_2146.x, x_2146.z) * vec2<f32>(0.5f, 0.5f)) + -(vec2<f32>(x_2149.x, x_2149.y)));
        let x_2153 : vec4<f32> = u_xlat8;
        u_xlat8 = vec4<f32>(x_2152.x, x_2153.y, x_2152.y, x_2153.w);
        let x_2155 : vec4<f32> = u_xlat7;
        let x_2158 : vec2<f32> = (-(vec2<f32>(x_2155.x, x_2155.y)) + vec2<f32>(1.0f, 1.0f));
        let x_2159 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_2158.x, x_2158.y, x_2159.z, x_2159.w);
        let x_2161 : vec4<f32> = u_xlat7;
        u_xlat51 = min(vec2<f32>(x_2161.x, x_2161.y), vec2<f32>(0.0f, 0.0f));
        let x_2164 : vec2<f32> = u_xlat51;
        let x_2166 : vec2<f32> = u_xlat51;
        let x_2168 : vec4<f32> = u_xlat9;
        u_xlat51 = ((-(x_2164) * x_2166) + vec2<f32>(x_2168.x, x_2168.y));
        let x_2171 : vec4<f32> = u_xlat7;
        let x_2173 : vec2<f32> = max(vec2<f32>(x_2171.x, x_2171.y), vec2<f32>(0.0f, 0.0f));
        let x_2174 : vec4<f32> = u_xlat7;
        u_xlat7 = vec4<f32>(x_2173.x, x_2173.y, x_2174.z, x_2174.w);
        let x_2176 : vec4<f32> = u_xlat7;
        let x_2179 : vec4<f32> = u_xlat7;
        let x_2182 : vec4<f32> = u_xlat8;
        let x_2184 : vec2<f32> = ((-(vec2<f32>(x_2176.x, x_2176.y)) * vec2<f32>(x_2179.x, x_2179.y)) + vec2<f32>(x_2182.y, x_2182.w));
        let x_2185 : vec4<f32> = u_xlat7;
        u_xlat7 = vec4<f32>(x_2184.x, x_2184.y, x_2185.z, x_2185.w);
        let x_2187 : vec2<f32> = u_xlat51;
        u_xlat51 = (x_2187 + vec2<f32>(1.0f, 1.0f));
        let x_2189 : vec4<f32> = u_xlat7;
        let x_2191 : vec2<f32> = (vec2<f32>(x_2189.x, x_2189.y) + vec2<f32>(1.0f, 1.0f));
        let x_2192 : vec4<f32> = u_xlat7;
        u_xlat7 = vec4<f32>(x_2191.x, x_2191.y, x_2192.z, x_2192.w);
        let x_2194 : vec4<f32> = u_xlat8;
        let x_2196 : vec2<f32> = (vec2<f32>(x_2194.x, x_2194.z) * vec2<f32>(0.159999996f, 0.159999996f));
        let x_2197 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_2196.x, x_2196.y, x_2197.z, x_2197.w);
        let x_2199 : vec4<f32> = u_xlat9;
        let x_2201 : vec2<f32> = (vec2<f32>(x_2199.x, x_2199.y) * vec2<f32>(0.159999996f, 0.159999996f));
        let x_2202 : vec4<f32> = u_xlat11;
        u_xlat11 = vec4<f32>(x_2201.x, x_2201.y, x_2202.z, x_2202.w);
        let x_2204 : vec2<f32> = u_xlat51;
        let x_2205 : vec2<f32> = (x_2204 * vec2<f32>(0.159999996f, 0.159999996f));
        let x_2206 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_2205.x, x_2205.y, x_2206.z, x_2206.w);
        let x_2208 : vec4<f32> = u_xlat7;
        let x_2210 : vec2<f32> = (vec2<f32>(x_2208.x, x_2208.y) * vec2<f32>(0.159999996f, 0.159999996f));
        let x_2211 : vec4<f32> = u_xlat12;
        u_xlat12 = vec4<f32>(x_2210.x, x_2210.y, x_2211.z, x_2211.w);
        let x_2213 : vec4<f32> = u_xlat8;
        let x_2215 : vec2<f32> = (vec2<f32>(x_2213.y, x_2213.w) * vec2<f32>(0.159999996f, 0.159999996f));
        let x_2216 : vec4<f32> = u_xlat7;
        u_xlat7 = vec4<f32>(x_2215.x, x_2215.y, x_2216.z, x_2216.w);
        let x_2219 : f32 = u_xlat9.x;
        u_xlat10.z = x_2219;
        let x_2222 : f32 = u_xlat7.x;
        u_xlat10.w = x_2222;
        let x_2225 : f32 = u_xlat12.x;
        u_xlat11.z = x_2225;
        let x_2228 : f32 = u_xlat49.x;
        u_xlat11.w = x_2228;
        let x_2230 : vec4<f32> = u_xlat10;
        let x_2232 : vec4<f32> = u_xlat11;
        u_xlat8 = (vec4<f32>(x_2230.z, x_2230.w, x_2230.x, x_2230.z) + vec4<f32>(x_2232.z, x_2232.w, x_2232.x, x_2232.z));
        let x_2236 : f32 = u_xlat10.y;
        u_xlat9.z = x_2236;
        let x_2239 : f32 = u_xlat7.y;
        u_xlat9.w = x_2239;
        let x_2242 : f32 = u_xlat11.y;
        u_xlat12.z = x_2242;
        let x_2245 : f32 = u_xlat49.y;
        u_xlat12.w = x_2245;
        let x_2247 : vec4<f32> = u_xlat9;
        let x_2249 : vec4<f32> = u_xlat12;
        let x_2251 : vec3<f32> = (vec3<f32>(x_2247.z, x_2247.y, x_2247.w) + vec3<f32>(x_2249.z, x_2249.y, x_2249.w));
        let x_2252 : vec4<f32> = u_xlat7;
        u_xlat7 = vec4<f32>(x_2251.x, x_2251.y, x_2251.z, x_2252.w);
        let x_2254 : vec4<f32> = u_xlat11;
        let x_2256 : vec4<f32> = u_xlat8;
        let x_2258 : vec3<f32> = (vec3<f32>(x_2254.x, x_2254.z, x_2254.w) / vec3<f32>(x_2256.z, x_2256.w, x_2256.y));
        let x_2259 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_2258.x, x_2258.y, x_2258.z, x_2259.w);
        let x_2261 : vec4<f32> = u_xlat9;
        let x_2263 : vec3<f32> = (vec3<f32>(x_2261.x, x_2261.y, x_2261.z) + vec3<f32>(-2.5f, -0.5f, 1.5f));
        let x_2264 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_2263.x, x_2263.y, x_2263.z, x_2264.w);
        let x_2266 : vec4<f32> = u_xlat12;
        let x_2268 : vec4<f32> = u_xlat7;
        let x_2270 : vec3<f32> = (vec3<f32>(x_2266.z, x_2266.y, x_2266.w) / vec3<f32>(x_2268.x, x_2268.y, x_2268.z));
        let x_2271 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_2270.x, x_2270.y, x_2270.z, x_2271.w);
        let x_2273 : vec4<f32> = u_xlat10;
        let x_2275 : vec3<f32> = (vec3<f32>(x_2273.x, x_2273.y, x_2273.z) + vec3<f32>(-2.5f, -0.5f, 1.5f));
        let x_2276 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_2275.x, x_2275.y, x_2275.z, x_2276.w);
        let x_2278 : vec4<f32> = u_xlat9;
        let x_2281 : vec4<f32> = x_272.x_MainLightShadowmapSize;
        let x_2283 : vec3<f32> = (vec3<f32>(x_2278.y, x_2278.x, x_2278.z) * vec3<f32>(x_2281.x, x_2281.x, x_2281.x));
        let x_2284 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_2283.x, x_2283.y, x_2283.z, x_2284.w);
        let x_2286 : vec4<f32> = u_xlat10;
        let x_2289 : vec4<f32> = x_272.x_MainLightShadowmapSize;
        let x_2291 : vec3<f32> = (vec3<f32>(x_2286.x, x_2286.y, x_2286.z) * vec3<f32>(x_2289.y, x_2289.y, x_2289.y));
        let x_2292 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_2291.x, x_2291.y, x_2291.z, x_2292.w);
        let x_2295 : f32 = u_xlat10.x;
        u_xlat9.w = x_2295;
        let x_2297 : vec2<f32> = u_xlat48;
        let x_2300 : vec4<f32> = x_272.x_MainLightShadowmapSize;
        let x_2303 : vec4<f32> = u_xlat9;
        u_xlat11 = ((vec4<f32>(x_2297.x, x_2297.y, x_2297.x, x_2297.y) * vec4<f32>(x_2300.x, x_2300.y, x_2300.x, x_2300.y)) + vec4<f32>(x_2303.y, x_2303.w, x_2303.x, x_2303.w));
        let x_2306 : vec2<f32> = u_xlat48;
        let x_2308 : vec4<f32> = x_272.x_MainLightShadowmapSize;
        let x_2311 : vec4<f32> = u_xlat9;
        let x_2313 : vec2<f32> = ((x_2306 * vec2<f32>(x_2308.x, x_2308.y)) + vec2<f32>(x_2311.z, x_2311.w));
        let x_2314 : vec4<f32> = u_xlat12;
        u_xlat12 = vec4<f32>(x_2313.x, x_2313.y, x_2314.z, x_2314.w);
        let x_2317 : f32 = u_xlat9.y;
        u_xlat10.w = x_2317;
        let x_2319 : vec4<f32> = u_xlat10;
        let x_2320 : vec2<f32> = vec2<f32>(x_2319.y, x_2319.z);
        let x_2321 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_2321.x, x_2320.x, x_2321.z, x_2320.y);
        let x_2323 : vec2<f32> = u_xlat48;
        let x_2326 : vec4<f32> = x_272.x_MainLightShadowmapSize;
        let x_2329 : vec4<f32> = u_xlat9;
        u_xlat13 = ((vec4<f32>(x_2323.x, x_2323.y, x_2323.x, x_2323.y) * vec4<f32>(x_2326.x, x_2326.y, x_2326.x, x_2326.y)) + vec4<f32>(x_2329.x, x_2329.y, x_2329.z, x_2329.y));
        let x_2332 : vec2<f32> = u_xlat48;
        let x_2335 : vec4<f32> = x_272.x_MainLightShadowmapSize;
        let x_2338 : vec4<f32> = u_xlat10;
        u_xlat10 = ((vec4<f32>(x_2332.x, x_2332.y, x_2332.x, x_2332.y) * vec4<f32>(x_2335.x, x_2335.y, x_2335.x, x_2335.y)) + vec4<f32>(x_2338.w, x_2338.y, x_2338.w, x_2338.z));
        let x_2341 : vec2<f32> = u_xlat48;
        let x_2344 : vec4<f32> = x_272.x_MainLightShadowmapSize;
        let x_2347 : vec4<f32> = u_xlat9;
        u_xlat9 = ((vec4<f32>(x_2341.x, x_2341.y, x_2341.x, x_2341.y) * vec4<f32>(x_2344.x, x_2344.y, x_2344.x, x_2344.y)) + vec4<f32>(x_2347.x, x_2347.w, x_2347.z, x_2347.w));
        let x_2350 : vec4<f32> = u_xlat7;
        let x_2352 : vec4<f32> = u_xlat8;
        u_xlat14 = (vec4<f32>(x_2350.x, x_2350.x, x_2350.x, x_2350.y) * vec4<f32>(x_2352.z, x_2352.w, x_2352.y, x_2352.z));
        let x_2355 : vec4<f32> = u_xlat7;
        let x_2357 : vec4<f32> = u_xlat8;
        u_xlat15 = (vec4<f32>(x_2355.y, x_2355.y, x_2355.z, x_2355.z) * x_2357);
        let x_2360 : f32 = u_xlat7.z;
        let x_2362 : f32 = u_xlat8.y;
        u_xlat48.x = (x_2360 * x_2362);
        let x_2366 : vec4<f32> = u_xlat11;
        let x_2367 : vec2<f32> = vec2<f32>(x_2366.x, x_2366.y);
        let x_2369 : f32 = vs_INTERP9.z;
        txVec34 = vec3<f32>(x_2367.x, x_2367.y, x_2369);
        let x_2376 : vec3<f32> = txVec34;
        let x_2378 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2376.xy, x_2376.z);
        u_xlat69 = x_2378;
        let x_2380 : vec4<f32> = u_xlat11;
        let x_2381 : vec2<f32> = vec2<f32>(x_2380.z, x_2380.w);
        let x_2383 : f32 = vs_INTERP9.z;
        txVec35 = vec3<f32>(x_2381.x, x_2381.y, x_2383);
        let x_2390 : vec3<f32> = txVec35;
        let x_2392 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2390.xy, x_2390.z);
        u_xlat7.x = x_2392;
        let x_2395 : f32 = u_xlat7.x;
        let x_2397 : f32 = u_xlat14.y;
        u_xlat7.x = (x_2395 * x_2397);
        let x_2401 : f32 = u_xlat14.x;
        let x_2402 : f32 = u_xlat69;
        let x_2405 : f32 = u_xlat7.x;
        u_xlat69 = ((x_2401 * x_2402) + x_2405);
        let x_2408 : vec4<f32> = u_xlat12;
        let x_2409 : vec2<f32> = vec2<f32>(x_2408.x, x_2408.y);
        let x_2411 : f32 = vs_INTERP9.z;
        txVec36 = vec3<f32>(x_2409.x, x_2409.y, x_2411);
        let x_2418 : vec3<f32> = txVec36;
        let x_2420 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2418.xy, x_2418.z);
        u_xlat7.x = x_2420;
        let x_2423 : f32 = u_xlat14.z;
        let x_2425 : f32 = u_xlat7.x;
        let x_2427 : f32 = u_xlat69;
        u_xlat69 = ((x_2423 * x_2425) + x_2427);
        let x_2430 : vec4<f32> = u_xlat10;
        let x_2431 : vec2<f32> = vec2<f32>(x_2430.x, x_2430.y);
        let x_2433 : f32 = vs_INTERP9.z;
        txVec37 = vec3<f32>(x_2431.x, x_2431.y, x_2433);
        let x_2440 : vec3<f32> = txVec37;
        let x_2442 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2440.xy, x_2440.z);
        u_xlat7.x = x_2442;
        let x_2445 : f32 = u_xlat14.w;
        let x_2447 : f32 = u_xlat7.x;
        let x_2449 : f32 = u_xlat69;
        u_xlat69 = ((x_2445 * x_2447) + x_2449);
        let x_2452 : vec4<f32> = u_xlat13;
        let x_2453 : vec2<f32> = vec2<f32>(x_2452.x, x_2452.y);
        let x_2455 : f32 = vs_INTERP9.z;
        txVec38 = vec3<f32>(x_2453.x, x_2453.y, x_2455);
        let x_2462 : vec3<f32> = txVec38;
        let x_2464 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2462.xy, x_2462.z);
        u_xlat7.x = x_2464;
        let x_2467 : f32 = u_xlat15.x;
        let x_2469 : f32 = u_xlat7.x;
        let x_2471 : f32 = u_xlat69;
        u_xlat69 = ((x_2467 * x_2469) + x_2471);
        let x_2474 : vec4<f32> = u_xlat13;
        let x_2475 : vec2<f32> = vec2<f32>(x_2474.z, x_2474.w);
        let x_2477 : f32 = vs_INTERP9.z;
        txVec39 = vec3<f32>(x_2475.x, x_2475.y, x_2477);
        let x_2484 : vec3<f32> = txVec39;
        let x_2486 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2484.xy, x_2484.z);
        u_xlat7.x = x_2486;
        let x_2489 : f32 = u_xlat15.y;
        let x_2491 : f32 = u_xlat7.x;
        let x_2493 : f32 = u_xlat69;
        u_xlat69 = ((x_2489 * x_2491) + x_2493);
        let x_2496 : vec4<f32> = u_xlat10;
        let x_2497 : vec2<f32> = vec2<f32>(x_2496.z, x_2496.w);
        let x_2499 : f32 = vs_INTERP9.z;
        txVec40 = vec3<f32>(x_2497.x, x_2497.y, x_2499);
        let x_2506 : vec3<f32> = txVec40;
        let x_2508 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2506.xy, x_2506.z);
        u_xlat7.x = x_2508;
        let x_2511 : f32 = u_xlat15.z;
        let x_2513 : f32 = u_xlat7.x;
        let x_2515 : f32 = u_xlat69;
        u_xlat69 = ((x_2511 * x_2513) + x_2515);
        let x_2518 : vec4<f32> = u_xlat9;
        let x_2519 : vec2<f32> = vec2<f32>(x_2518.x, x_2518.y);
        let x_2521 : f32 = vs_INTERP9.z;
        txVec41 = vec3<f32>(x_2519.x, x_2519.y, x_2521);
        let x_2528 : vec3<f32> = txVec41;
        let x_2530 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2528.xy, x_2528.z);
        u_xlat7.x = x_2530;
        let x_2533 : f32 = u_xlat15.w;
        let x_2535 : f32 = u_xlat7.x;
        let x_2537 : f32 = u_xlat69;
        u_xlat69 = ((x_2533 * x_2535) + x_2537);
        let x_2540 : vec4<f32> = u_xlat9;
        let x_2541 : vec2<f32> = vec2<f32>(x_2540.z, x_2540.w);
        let x_2543 : f32 = vs_INTERP9.z;
        txVec42 = vec3<f32>(x_2541.x, x_2541.y, x_2543);
        let x_2550 : vec3<f32> = txVec42;
        let x_2552 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2550.xy, x_2550.z);
        u_xlat7.x = x_2552;
        let x_2555 : f32 = u_xlat48.x;
        let x_2557 : f32 = u_xlat7.x;
        let x_2559 : f32 = u_xlat69;
        u_xlat63 = ((x_2555 * x_2557) + x_2559);
      } else {
        let x_2562 : vec4<f32> = vs_INTERP9;
        let x_2565 : vec4<f32> = x_272.x_MainLightShadowmapSize;
        u_xlat48 = ((vec2<f32>(x_2562.x, x_2562.y) * vec2<f32>(x_2565.z, x_2565.w)) + vec2<f32>(0.5f, 0.5f));
        let x_2569 : vec2<f32> = u_xlat48;
        u_xlat48 = floor(x_2569);
        let x_2571 : vec4<f32> = vs_INTERP9;
        let x_2574 : vec4<f32> = x_272.x_MainLightShadowmapSize;
        let x_2577 : vec2<f32> = u_xlat48;
        let x_2579 : vec2<f32> = ((vec2<f32>(x_2571.x, x_2571.y) * vec2<f32>(x_2574.z, x_2574.w)) + -(x_2577));
        let x_2580 : vec4<f32> = u_xlat7;
        u_xlat7 = vec4<f32>(x_2579.x, x_2579.y, x_2580.z, x_2580.w);
        let x_2582 : vec4<f32> = u_xlat7;
        u_xlat8 = (vec4<f32>(x_2582.x, x_2582.x, x_2582.y, x_2582.y) + vec4<f32>(0.5f, 1.0f, 0.5f, 1.0f));
        let x_2585 : vec4<f32> = u_xlat8;
        let x_2587 : vec4<f32> = u_xlat8;
        u_xlat9 = (vec4<f32>(x_2585.x, x_2585.x, x_2585.z, x_2585.z) * vec4<f32>(x_2587.x, x_2587.x, x_2587.z, x_2587.z));
        let x_2590 : vec4<f32> = u_xlat9;
        let x_2592 : vec2<f32> = (vec2<f32>(x_2590.y, x_2590.w) * vec2<f32>(0.040816002f, 0.040816002f));
        let x_2593 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_2593.x, x_2592.x, x_2593.z, x_2592.y);
        let x_2595 : vec4<f32> = u_xlat9;
        let x_2598 : vec4<f32> = u_xlat7;
        u_xlat49 = ((vec2<f32>(x_2595.x, x_2595.z) * vec2<f32>(0.5f, 0.5f)) + -(vec2<f32>(x_2598.x, x_2598.y)));
        let x_2602 : vec4<f32> = u_xlat7;
        let x_2605 : vec2<f32> = (-(vec2<f32>(x_2602.x, x_2602.y)) + vec2<f32>(1.0f, 1.0f));
        let x_2606 : vec4<f32> = u_xlat8;
        u_xlat8 = vec4<f32>(x_2605.x, x_2606.y, x_2605.y, x_2606.w);
        let x_2608 : vec4<f32> = u_xlat7;
        let x_2610 : vec2<f32> = min(vec2<f32>(x_2608.x, x_2608.y), vec2<f32>(0.0f, 0.0f));
        let x_2611 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_2610.x, x_2610.y, x_2611.z, x_2611.w);
        let x_2613 : vec4<f32> = u_xlat9;
        let x_2616 : vec4<f32> = u_xlat9;
        let x_2619 : vec4<f32> = u_xlat8;
        let x_2621 : vec2<f32> = ((-(vec2<f32>(x_2613.x, x_2613.y)) * vec2<f32>(x_2616.x, x_2616.y)) + vec2<f32>(x_2619.x, x_2619.z));
        let x_2622 : vec4<f32> = u_xlat8;
        u_xlat8 = vec4<f32>(x_2621.x, x_2622.y, x_2621.y, x_2622.w);
        let x_2624 : vec4<f32> = u_xlat7;
        let x_2626 : vec2<f32> = max(vec2<f32>(x_2624.x, x_2624.y), vec2<f32>(0.0f, 0.0f));
        let x_2627 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_2626.x, x_2626.y, x_2627.z, x_2627.w);
        let x_2629 : vec4<f32> = u_xlat9;
        let x_2632 : vec4<f32> = u_xlat9;
        let x_2635 : vec4<f32> = u_xlat8;
        let x_2637 : vec2<f32> = ((-(vec2<f32>(x_2629.x, x_2629.y)) * vec2<f32>(x_2632.x, x_2632.y)) + vec2<f32>(x_2635.y, x_2635.w));
        let x_2638 : vec4<f32> = u_xlat8;
        u_xlat8 = vec4<f32>(x_2638.x, x_2637.x, x_2638.z, x_2637.y);
        let x_2640 : vec4<f32> = u_xlat8;
        u_xlat8 = (x_2640 + vec4<f32>(2.0f, 2.0f, 2.0f, 2.0f));
        let x_2643 : f32 = u_xlat8.y;
        u_xlat9.z = (x_2643 * 0.081632003f);
        let x_2646 : vec2<f32> = u_xlat49;
        let x_2648 : vec2<f32> = (vec2<f32>(x_2646.y, x_2646.x) * vec2<f32>(0.081632003f, 0.081632003f));
        let x_2649 : vec4<f32> = u_xlat11;
        u_xlat11 = vec4<f32>(x_2648.x, x_2648.y, x_2649.z, x_2649.w);
        let x_2651 : vec4<f32> = u_xlat8;
        u_xlat49 = (vec2<f32>(x_2651.x, x_2651.z) * vec2<f32>(0.081632003f, 0.081632003f));
        let x_2655 : f32 = u_xlat8.w;
        u_xlat11.z = (x_2655 * 0.081632003f);
        let x_2659 : f32 = u_xlat11.y;
        u_xlat9.x = x_2659;
        let x_2661 : vec4<f32> = u_xlat7;
        let x_2664 : vec2<f32> = ((vec2<f32>(x_2661.x, x_2661.x) * vec2<f32>(-0.081632003f, 0.081632003f)) + vec2<f32>(0.163264006f, 0.081632003f));
        let x_2665 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_2665.x, x_2664.x, x_2665.z, x_2664.y);
        let x_2667 : vec4<f32> = u_xlat7;
        let x_2670 : vec2<f32> = ((vec2<f32>(x_2667.x, x_2667.x) * vec2<f32>(-0.081632003f, 0.081632003f)) + vec2<f32>(0.081632003f, 0.163264006f));
        let x_2671 : vec4<f32> = u_xlat8;
        u_xlat8 = vec4<f32>(x_2670.x, x_2671.y, x_2670.y, x_2671.w);
        let x_2674 : f32 = u_xlat49.x;
        u_xlat8.y = x_2674;
        let x_2677 : f32 = u_xlat10.y;
        u_xlat8.w = x_2677;
        let x_2679 : vec4<f32> = u_xlat8;
        let x_2680 : vec4<f32> = u_xlat9;
        u_xlat9 = (x_2679 + x_2680);
        let x_2682 : vec4<f32> = u_xlat7;
        let x_2685 : vec2<f32> = ((vec2<f32>(x_2682.y, x_2682.y) * vec2<f32>(-0.081632003f, 0.081632003f)) + vec2<f32>(0.163264006f, 0.081632003f));
        let x_2686 : vec4<f32> = u_xlat11;
        u_xlat11 = vec4<f32>(x_2686.x, x_2685.x, x_2686.z, x_2685.y);
        let x_2688 : vec4<f32> = u_xlat7;
        let x_2691 : vec2<f32> = ((vec2<f32>(x_2688.y, x_2688.y) * vec2<f32>(-0.081632003f, 0.081632003f)) + vec2<f32>(0.081632003f, 0.163264006f));
        let x_2692 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_2691.x, x_2692.y, x_2691.y, x_2692.w);
        let x_2695 : f32 = u_xlat49.y;
        u_xlat10.y = x_2695;
        let x_2697 : vec4<f32> = u_xlat10;
        let x_2698 : vec4<f32> = u_xlat11;
        u_xlat7 = (x_2697 + x_2698);
        let x_2700 : vec4<f32> = u_xlat8;
        let x_2701 : vec4<f32> = u_xlat9;
        u_xlat8 = (x_2700 / x_2701);
        let x_2703 : vec4<f32> = u_xlat8;
        u_xlat8 = (x_2703 + vec4<f32>(-3.5f, -1.5f, 0.5f, 2.5f));
        let x_2705 : vec4<f32> = u_xlat10;
        let x_2706 : vec4<f32> = u_xlat7;
        u_xlat10 = (x_2705 / x_2706);
        let x_2708 : vec4<f32> = u_xlat10;
        u_xlat10 = (x_2708 + vec4<f32>(-3.5f, -1.5f, 0.5f, 2.5f));
        let x_2710 : vec4<f32> = u_xlat8;
        let x_2713 : vec4<f32> = x_272.x_MainLightShadowmapSize;
        u_xlat8 = (vec4<f32>(x_2710.w, x_2710.x, x_2710.y, x_2710.z) * vec4<f32>(x_2713.x, x_2713.x, x_2713.x, x_2713.x));
        let x_2716 : vec4<f32> = u_xlat10;
        let x_2719 : vec4<f32> = x_272.x_MainLightShadowmapSize;
        u_xlat10 = (vec4<f32>(x_2716.x, x_2716.w, x_2716.y, x_2716.z) * vec4<f32>(x_2719.y, x_2719.y, x_2719.y, x_2719.y));
        let x_2722 : vec4<f32> = u_xlat8;
        let x_2723 : vec3<f32> = vec3<f32>(x_2722.y, x_2722.z, x_2722.w);
        let x_2724 : vec4<f32> = u_xlat11;
        u_xlat11 = vec4<f32>(x_2723.x, x_2724.y, x_2723.y, x_2723.z);
        let x_2727 : f32 = u_xlat10.x;
        u_xlat11.y = x_2727;
        let x_2729 : vec2<f32> = u_xlat48;
        let x_2732 : vec4<f32> = x_272.x_MainLightShadowmapSize;
        let x_2735 : vec4<f32> = u_xlat11;
        u_xlat12 = ((vec4<f32>(x_2729.x, x_2729.y, x_2729.x, x_2729.y) * vec4<f32>(x_2732.x, x_2732.y, x_2732.x, x_2732.y)) + vec4<f32>(x_2735.x, x_2735.y, x_2735.z, x_2735.y));
        let x_2738 : vec2<f32> = u_xlat48;
        let x_2740 : vec4<f32> = x_272.x_MainLightShadowmapSize;
        let x_2743 : vec4<f32> = u_xlat11;
        let x_2745 : vec2<f32> = ((x_2738 * vec2<f32>(x_2740.x, x_2740.y)) + vec2<f32>(x_2743.w, x_2743.y));
        let x_2746 : vec4<f32> = u_xlat13;
        u_xlat13 = vec4<f32>(x_2745.x, x_2745.y, x_2746.z, x_2746.w);
        let x_2749 : f32 = u_xlat11.y;
        u_xlat8.y = x_2749;
        let x_2752 : f32 = u_xlat10.z;
        u_xlat11.y = x_2752;
        let x_2754 : vec2<f32> = u_xlat48;
        let x_2757 : vec4<f32> = x_272.x_MainLightShadowmapSize;
        let x_2760 : vec4<f32> = u_xlat11;
        u_xlat14 = ((vec4<f32>(x_2754.x, x_2754.y, x_2754.x, x_2754.y) * vec4<f32>(x_2757.x, x_2757.y, x_2757.x, x_2757.y)) + vec4<f32>(x_2760.x, x_2760.y, x_2760.z, x_2760.y));
        let x_2764 : vec2<f32> = u_xlat48;
        let x_2766 : vec4<f32> = x_272.x_MainLightShadowmapSize;
        let x_2769 : vec4<f32> = u_xlat11;
        u_xlat55 = ((x_2764 * vec2<f32>(x_2766.x, x_2766.y)) + vec2<f32>(x_2769.w, x_2769.y));
        let x_2773 : f32 = u_xlat11.y;
        u_xlat8.z = x_2773;
        let x_2775 : vec2<f32> = u_xlat48;
        let x_2778 : vec4<f32> = x_272.x_MainLightShadowmapSize;
        let x_2781 : vec4<f32> = u_xlat8;
        u_xlat15 = ((vec4<f32>(x_2775.x, x_2775.y, x_2775.x, x_2775.y) * vec4<f32>(x_2778.x, x_2778.y, x_2778.x, x_2778.y)) + vec4<f32>(x_2781.x, x_2781.y, x_2781.x, x_2781.z));
        let x_2785 : f32 = u_xlat10.w;
        u_xlat11.y = x_2785;
        let x_2787 : vec2<f32> = u_xlat48;
        let x_2790 : vec4<f32> = x_272.x_MainLightShadowmapSize;
        let x_2793 : vec4<f32> = u_xlat11;
        u_xlat16 = ((vec4<f32>(x_2787.x, x_2787.y, x_2787.x, x_2787.y) * vec4<f32>(x_2790.x, x_2790.y, x_2790.x, x_2790.y)) + vec4<f32>(x_2793.x, x_2793.y, x_2793.z, x_2793.y));
        let x_2796 : vec2<f32> = u_xlat48;
        let x_2798 : vec4<f32> = x_272.x_MainLightShadowmapSize;
        let x_2801 : vec4<f32> = u_xlat11;
        let x_2803 : vec2<f32> = ((x_2796 * vec2<f32>(x_2798.x, x_2798.y)) + vec2<f32>(x_2801.w, x_2801.y));
        let x_2804 : vec3<f32> = u_xlat29;
        u_xlat29 = vec3<f32>(x_2803.x, x_2803.y, x_2804.z);
        let x_2807 : f32 = u_xlat11.y;
        u_xlat8.w = x_2807;
        let x_2809 : vec2<f32> = u_xlat48;
        let x_2811 : vec4<f32> = x_272.x_MainLightShadowmapSize;
        let x_2814 : vec4<f32> = u_xlat8;
        let x_2816 : vec2<f32> = ((x_2809 * vec2<f32>(x_2811.x, x_2811.y)) + vec2<f32>(x_2814.x, x_2814.w));
        let x_2817 : vec4<f32> = u_xlat17;
        u_xlat17 = vec4<f32>(x_2816.x, x_2816.y, x_2817.z, x_2817.w);
        let x_2819 : vec4<f32> = u_xlat11;
        let x_2820 : vec3<f32> = vec3<f32>(x_2819.x, x_2819.z, x_2819.w);
        let x_2821 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_2820.x, x_2821.y, x_2820.y, x_2820.z);
        let x_2823 : vec2<f32> = u_xlat48;
        let x_2826 : vec4<f32> = x_272.x_MainLightShadowmapSize;
        let x_2829 : vec4<f32> = u_xlat10;
        u_xlat11 = ((vec4<f32>(x_2823.x, x_2823.y, x_2823.x, x_2823.y) * vec4<f32>(x_2826.x, x_2826.y, x_2826.x, x_2826.y)) + vec4<f32>(x_2829.x, x_2829.y, x_2829.z, x_2829.y));
        let x_2832 : vec2<f32> = u_xlat48;
        let x_2834 : vec4<f32> = x_272.x_MainLightShadowmapSize;
        let x_2837 : vec4<f32> = u_xlat10;
        u_xlat52 = ((x_2832 * vec2<f32>(x_2834.x, x_2834.y)) + vec2<f32>(x_2837.w, x_2837.y));
        let x_2841 : f32 = u_xlat8.x;
        u_xlat10.x = x_2841;
        let x_2843 : vec2<f32> = u_xlat48;
        let x_2845 : vec4<f32> = x_272.x_MainLightShadowmapSize;
        let x_2848 : vec4<f32> = u_xlat10;
        u_xlat48 = ((x_2843 * vec2<f32>(x_2845.x, x_2845.y)) + vec2<f32>(x_2848.x, x_2848.y));
        let x_2851 : vec4<f32> = u_xlat7;
        let x_2853 : vec4<f32> = u_xlat9;
        u_xlat18 = (vec4<f32>(x_2851.x, x_2851.x, x_2851.x, x_2851.x) * x_2853);
        let x_2855 : vec4<f32> = u_xlat7;
        let x_2857 : vec4<f32> = u_xlat9;
        u_xlat19 = (vec4<f32>(x_2855.y, x_2855.y, x_2855.y, x_2855.y) * x_2857);
        let x_2859 : vec4<f32> = u_xlat7;
        let x_2861 : vec4<f32> = u_xlat9;
        u_xlat20 = (vec4<f32>(x_2859.z, x_2859.z, x_2859.z, x_2859.z) * x_2861);
        let x_2863 : vec4<f32> = u_xlat7;
        let x_2865 : vec4<f32> = u_xlat9;
        u_xlat7 = (vec4<f32>(x_2863.w, x_2863.w, x_2863.w, x_2863.w) * x_2865);
        let x_2868 : vec4<f32> = u_xlat12;
        let x_2869 : vec2<f32> = vec2<f32>(x_2868.x, x_2868.y);
        let x_2871 : f32 = vs_INTERP9.z;
        txVec43 = vec3<f32>(x_2869.x, x_2869.y, x_2871);
        let x_2878 : vec3<f32> = txVec43;
        let x_2880 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2878.xy, x_2878.z);
        u_xlat8.x = x_2880;
        let x_2883 : vec4<f32> = u_xlat12;
        let x_2884 : vec2<f32> = vec2<f32>(x_2883.z, x_2883.w);
        let x_2886 : f32 = vs_INTERP9.z;
        txVec44 = vec3<f32>(x_2884.x, x_2884.y, x_2886);
        let x_2894 : vec3<f32> = txVec44;
        let x_2896 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2894.xy, x_2894.z);
        u_xlat71 = x_2896;
        let x_2897 : f32 = u_xlat71;
        let x_2899 : f32 = u_xlat18.y;
        u_xlat71 = (x_2897 * x_2899);
        let x_2902 : f32 = u_xlat18.x;
        let x_2904 : f32 = u_xlat8.x;
        let x_2906 : f32 = u_xlat71;
        u_xlat8.x = ((x_2902 * x_2904) + x_2906);
        let x_2910 : vec4<f32> = u_xlat13;
        let x_2911 : vec2<f32> = vec2<f32>(x_2910.x, x_2910.y);
        let x_2913 : f32 = vs_INTERP9.z;
        txVec45 = vec3<f32>(x_2911.x, x_2911.y, x_2913);
        let x_2920 : vec3<f32> = txVec45;
        let x_2922 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2920.xy, x_2920.z);
        u_xlat71 = x_2922;
        let x_2924 : f32 = u_xlat18.z;
        let x_2925 : f32 = u_xlat71;
        let x_2928 : f32 = u_xlat8.x;
        u_xlat8.x = ((x_2924 * x_2925) + x_2928);
        let x_2932 : vec4<f32> = u_xlat15;
        let x_2933 : vec2<f32> = vec2<f32>(x_2932.x, x_2932.y);
        let x_2935 : f32 = vs_INTERP9.z;
        txVec46 = vec3<f32>(x_2933.x, x_2933.y, x_2935);
        let x_2942 : vec3<f32> = txVec46;
        let x_2944 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2942.xy, x_2942.z);
        u_xlat71 = x_2944;
        let x_2946 : f32 = u_xlat18.w;
        let x_2947 : f32 = u_xlat71;
        let x_2950 : f32 = u_xlat8.x;
        u_xlat8.x = ((x_2946 * x_2947) + x_2950);
        let x_2954 : vec4<f32> = u_xlat14;
        let x_2955 : vec2<f32> = vec2<f32>(x_2954.x, x_2954.y);
        let x_2957 : f32 = vs_INTERP9.z;
        txVec47 = vec3<f32>(x_2955.x, x_2955.y, x_2957);
        let x_2964 : vec3<f32> = txVec47;
        let x_2966 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2964.xy, x_2964.z);
        u_xlat71 = x_2966;
        let x_2968 : f32 = u_xlat19.x;
        let x_2969 : f32 = u_xlat71;
        let x_2972 : f32 = u_xlat8.x;
        u_xlat8.x = ((x_2968 * x_2969) + x_2972);
        let x_2976 : vec4<f32> = u_xlat14;
        let x_2977 : vec2<f32> = vec2<f32>(x_2976.z, x_2976.w);
        let x_2979 : f32 = vs_INTERP9.z;
        txVec48 = vec3<f32>(x_2977.x, x_2977.y, x_2979);
        let x_2986 : vec3<f32> = txVec48;
        let x_2988 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2986.xy, x_2986.z);
        u_xlat71 = x_2988;
        let x_2990 : f32 = u_xlat19.y;
        let x_2991 : f32 = u_xlat71;
        let x_2994 : f32 = u_xlat8.x;
        u_xlat8.x = ((x_2990 * x_2991) + x_2994);
        let x_2998 : vec2<f32> = u_xlat55;
        let x_3000 : f32 = vs_INTERP9.z;
        txVec49 = vec3<f32>(x_2998.x, x_2998.y, x_3000);
        let x_3007 : vec3<f32> = txVec49;
        let x_3009 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_3007.xy, x_3007.z);
        u_xlat71 = x_3009;
        let x_3011 : f32 = u_xlat19.z;
        let x_3012 : f32 = u_xlat71;
        let x_3015 : f32 = u_xlat8.x;
        u_xlat8.x = ((x_3011 * x_3012) + x_3015);
        let x_3019 : vec4<f32> = u_xlat15;
        let x_3020 : vec2<f32> = vec2<f32>(x_3019.z, x_3019.w);
        let x_3022 : f32 = vs_INTERP9.z;
        txVec50 = vec3<f32>(x_3020.x, x_3020.y, x_3022);
        let x_3029 : vec3<f32> = txVec50;
        let x_3031 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_3029.xy, x_3029.z);
        u_xlat71 = x_3031;
        let x_3033 : f32 = u_xlat19.w;
        let x_3034 : f32 = u_xlat71;
        let x_3037 : f32 = u_xlat8.x;
        u_xlat8.x = ((x_3033 * x_3034) + x_3037);
        let x_3041 : vec4<f32> = u_xlat16;
        let x_3042 : vec2<f32> = vec2<f32>(x_3041.x, x_3041.y);
        let x_3044 : f32 = vs_INTERP9.z;
        txVec51 = vec3<f32>(x_3042.x, x_3042.y, x_3044);
        let x_3051 : vec3<f32> = txVec51;
        let x_3053 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_3051.xy, x_3051.z);
        u_xlat71 = x_3053;
        let x_3055 : f32 = u_xlat20.x;
        let x_3056 : f32 = u_xlat71;
        let x_3059 : f32 = u_xlat8.x;
        u_xlat8.x = ((x_3055 * x_3056) + x_3059);
        let x_3063 : vec4<f32> = u_xlat16;
        let x_3064 : vec2<f32> = vec2<f32>(x_3063.z, x_3063.w);
        let x_3066 : f32 = vs_INTERP9.z;
        txVec52 = vec3<f32>(x_3064.x, x_3064.y, x_3066);
        let x_3073 : vec3<f32> = txVec52;
        let x_3075 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_3073.xy, x_3073.z);
        u_xlat71 = x_3075;
        let x_3077 : f32 = u_xlat20.y;
        let x_3078 : f32 = u_xlat71;
        let x_3081 : f32 = u_xlat8.x;
        u_xlat8.x = ((x_3077 * x_3078) + x_3081);
        let x_3085 : vec3<f32> = u_xlat29;
        let x_3086 : vec2<f32> = vec2<f32>(x_3085.x, x_3085.y);
        let x_3088 : f32 = vs_INTERP9.z;
        txVec53 = vec3<f32>(x_3086.x, x_3086.y, x_3088);
        let x_3095 : vec3<f32> = txVec53;
        let x_3097 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_3095.xy, x_3095.z);
        u_xlat29.x = x_3097;
        let x_3100 : f32 = u_xlat20.z;
        let x_3102 : f32 = u_xlat29.x;
        let x_3105 : f32 = u_xlat8.x;
        u_xlat8.x = ((x_3100 * x_3102) + x_3105);
        let x_3109 : vec4<f32> = u_xlat17;
        let x_3110 : vec2<f32> = vec2<f32>(x_3109.x, x_3109.y);
        let x_3112 : f32 = vs_INTERP9.z;
        txVec54 = vec3<f32>(x_3110.x, x_3110.y, x_3112);
        let x_3119 : vec3<f32> = txVec54;
        let x_3121 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_3119.xy, x_3119.z);
        u_xlat29.x = x_3121;
        let x_3124 : f32 = u_xlat20.w;
        let x_3126 : f32 = u_xlat29.x;
        let x_3129 : f32 = u_xlat8.x;
        u_xlat8.x = ((x_3124 * x_3126) + x_3129);
        let x_3133 : vec4<f32> = u_xlat11;
        let x_3134 : vec2<f32> = vec2<f32>(x_3133.x, x_3133.y);
        let x_3136 : f32 = vs_INTERP9.z;
        txVec55 = vec3<f32>(x_3134.x, x_3134.y, x_3136);
        let x_3143 : vec3<f32> = txVec55;
        let x_3145 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_3143.xy, x_3143.z);
        u_xlat29.x = x_3145;
        let x_3148 : f32 = u_xlat7.x;
        let x_3150 : f32 = u_xlat29.x;
        let x_3153 : f32 = u_xlat8.x;
        u_xlat7.x = ((x_3148 * x_3150) + x_3153);
        let x_3157 : vec4<f32> = u_xlat11;
        let x_3158 : vec2<f32> = vec2<f32>(x_3157.z, x_3157.w);
        let x_3160 : f32 = vs_INTERP9.z;
        txVec56 = vec3<f32>(x_3158.x, x_3158.y, x_3160);
        let x_3167 : vec3<f32> = txVec56;
        let x_3169 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_3167.xy, x_3167.z);
        u_xlat8.x = x_3169;
        let x_3172 : f32 = u_xlat7.y;
        let x_3174 : f32 = u_xlat8.x;
        let x_3177 : f32 = u_xlat7.x;
        u_xlat7.x = ((x_3172 * x_3174) + x_3177);
        let x_3181 : vec2<f32> = u_xlat52;
        let x_3183 : f32 = vs_INTERP9.z;
        txVec57 = vec3<f32>(x_3181.x, x_3181.y, x_3183);
        let x_3191 : vec3<f32> = txVec57;
        let x_3193 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_3191.xy, x_3191.z);
        u_xlat28 = x_3193;
        let x_3195 : f32 = u_xlat7.z;
        let x_3196 : f32 = u_xlat28;
        let x_3199 : f32 = u_xlat7.x;
        u_xlat7.x = ((x_3195 * x_3196) + x_3199);
        let x_3203 : vec2<f32> = u_xlat48;
        let x_3205 : f32 = vs_INTERP9.z;
        txVec58 = vec3<f32>(x_3203.x, x_3203.y, x_3205);
        let x_3212 : vec3<f32> = txVec58;
        let x_3214 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_3212.xy, x_3212.z);
        u_xlat48.x = x_3214;
        let x_3217 : f32 = u_xlat7.w;
        let x_3219 : f32 = u_xlat48.x;
        let x_3222 : f32 = u_xlat7.x;
        u_xlat63 = ((x_3217 * x_3219) + x_3222);
      }
    }
  } else {
    let x_3226 : vec4<f32> = vs_INTERP9;
    let x_3227 : vec2<f32> = vec2<f32>(x_3226.x, x_3226.y);
    let x_3229 : f32 = vs_INTERP9.z;
    txVec59 = vec3<f32>(x_3227.x, x_3227.y, x_3229);
    let x_3236 : vec3<f32> = txVec59;
    let x_3238 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_3236.xy, x_3236.z);
    u_xlat63 = x_3238;
  }
  let x_3239 : f32 = u_xlat63;
  let x_3241 : f32 = x_272.x_MainLightShadowParams.x;
  let x_3243 : f32 = u_xlat65;
  u_xlat63 = ((x_3239 * x_3241) + x_3243);
  let x_3246 : f32 = vs_INTERP9.z;
  u_xlatb65 = (0.0f >= x_3246);
  let x_3249 : f32 = vs_INTERP9.z;
  u_xlatb48.x = (x_3249 >= 1.0f);
  let x_3252 : bool = u_xlatb65;
  let x_3254 : bool = u_xlatb48.x;
  u_xlatb65 = (x_3252 | x_3254);
  let x_3256 : bool = u_xlatb65;
  let x_3257 : f32 = u_xlat63;
  u_xlat63 = select(x_3257, 1.0f, x_3256);
  let x_3259 : vec3<f32> = vs_INTERP0;
  let x_3261 : vec3<f32> = x_90.x_WorldSpaceCameraPos;
  let x_3263 : vec3<f32> = (x_3259 + -(x_3261));
  let x_3264 : vec4<f32> = u_xlat7;
  u_xlat7 = vec4<f32>(x_3263.x, x_3263.y, x_3263.z, x_3264.w);
  let x_3266 : vec4<f32> = u_xlat7;
  let x_3268 : vec4<f32> = u_xlat7;
  u_xlat65 = dot(vec3<f32>(x_3266.x, x_3266.y, x_3266.z), vec3<f32>(x_3268.x, x_3268.y, x_3268.z));
  let x_3271 : f32 = u_xlat65;
  let x_3273 : f32 = x_272.x_MainLightShadowParams.z;
  let x_3276 : f32 = x_272.x_MainLightShadowParams.w;
  u_xlat65 = ((x_3271 * x_3273) + x_3276);
  let x_3278 : f32 = u_xlat65;
  u_xlat65 = clamp(x_3278, 0.0f, 1.0f);
  let x_3280 : f32 = u_xlat63;
  u_xlat48.x = (-(x_3280) + 1.0f);
  let x_3284 : f32 = u_xlat65;
  let x_3286 : f32 = u_xlat48.x;
  let x_3288 : f32 = u_xlat63;
  u_xlat63 = ((x_3284 * x_3286) + x_3288);
  let x_3296 : f32 = x_3294.x_MainLightCookieTextureFormat;
  u_xlatb65 = !((x_3296 == -1.0f));
  let x_3298 : bool = u_xlatb65;
  if (x_3298) {
    let x_3301 : vec3<f32> = vs_INTERP0;
    let x_3304 : vec4<f32> = x_3294.x_MainLightWorldToLight[1i];
    u_xlat48 = (vec2<f32>(x_3301.y, x_3301.y) * vec2<f32>(x_3304.x, x_3304.y));
    let x_3308 : vec4<f32> = x_3294.x_MainLightWorldToLight[0i];
    let x_3310 : vec3<f32> = vs_INTERP0;
    let x_3313 : vec2<f32> = u_xlat48;
    u_xlat48 = ((vec2<f32>(x_3308.x, x_3308.y) * vec2<f32>(x_3310.x, x_3310.x)) + x_3313);
    let x_3316 : vec4<f32> = x_3294.x_MainLightWorldToLight[2i];
    let x_3318 : vec3<f32> = vs_INTERP0;
    let x_3321 : vec2<f32> = u_xlat48;
    u_xlat48 = ((vec2<f32>(x_3316.x, x_3316.y) * vec2<f32>(x_3318.z, x_3318.z)) + x_3321);
    let x_3323 : vec2<f32> = u_xlat48;
    let x_3325 : vec4<f32> = x_3294.x_MainLightWorldToLight[3i];
    u_xlat48 = (x_3323 + vec2<f32>(x_3325.x, x_3325.y));
    let x_3328 : vec2<f32> = u_xlat48;
    u_xlat48 = ((x_3328 * vec2<f32>(0.5f, 0.5f)) + vec2<f32>(0.5f, 0.5f));
    let x_3336 : vec2<f32> = u_xlat48;
    let x_3338 : f32 = x_90.x_GlobalMipBias.x;
    let x_3339 : vec4<f32> = textureSampleBias(x_MainLightCookieTexture, sampler_MainLightCookieTexture, x_3336, x_3338);
    u_xlat7 = x_3339;
    let x_3341 : f32 = x_3294.x_MainLightCookieTextureFormat;
    let x_3343 : f32 = x_3294.x_MainLightCookieTextureFormat;
    let x_3345 : f32 = x_3294.x_MainLightCookieTextureFormat;
    let x_3347 : f32 = x_3294.x_MainLightCookieTextureFormat;
    let x_3348 : vec4<f32> = vec4<f32>(x_3341, x_3343, x_3345, x_3347);
    let x_3356 : vec4<bool> = (vec4<f32>(x_3348.x, x_3348.y, x_3348.z, x_3348.w) == vec4<f32>(0.0f, 1.0f, 0.0f, 1.0f));
    u_xlatb48 = vec2<bool>(x_3356.x, x_3356.y);
    let x_3359 : bool = u_xlatb48.y;
    if (x_3359) {
      let x_3364 : f32 = u_xlat7.w;
      x_3360 = x_3364;
    } else {
      let x_3367 : f32 = u_xlat7.x;
      x_3360 = x_3367;
    }
    let x_3368 : f32 = x_3360;
    u_xlat65 = x_3368;
    let x_3370 : bool = u_xlatb48.x;
    if (x_3370) {
      let x_3374 : vec4<f32> = u_xlat7;
      x_3371 = vec3<f32>(x_3374.x, x_3374.y, x_3374.z);
    } else {
      let x_3377 : f32 = u_xlat65;
      x_3371 = vec3<f32>(x_3377, x_3377, x_3377);
    }
    let x_3379 : vec3<f32> = x_3371;
    let x_3380 : vec4<f32> = u_xlat7;
    u_xlat7 = vec4<f32>(x_3379.x, x_3379.y, x_3379.z, x_3380.w);
  } else {
    u_xlat7.x = 1.0f;
    u_xlat7.y = 1.0f;
    u_xlat7.z = 1.0f;
  }
  let x_3386 : vec4<f32> = u_xlat7;
  let x_3389 : vec4<f32> = x_90.x_MainLightColor;
  let x_3391 : vec3<f32> = (vec3<f32>(x_3386.x, x_3386.y, x_3386.z) * vec3<f32>(x_3389.x, x_3389.y, x_3389.z));
  let x_3392 : vec4<f32> = u_xlat7;
  u_xlat7 = vec4<f32>(x_3391.x, x_3391.y, x_3391.z, x_3392.w);
  let x_3394 : f32 = u_xlat27;
  let x_3396 : vec4<f32> = u_xlat7;
  let x_3398 : vec3<f32> = (vec3<f32>(x_3394, x_3394, x_3394) * vec3<f32>(x_3396.x, x_3396.y, x_3396.z));
  let x_3399 : vec4<f32> = u_xlat7;
  u_xlat7 = vec4<f32>(x_3398.x, x_3398.y, x_3398.z, x_3399.w);
  let x_3401 : vec3<f32> = u_xlat2;
  let x_3403 : vec4<f32> = u_xlat3;
  u_xlat65 = dot(-(x_3401), vec3<f32>(x_3403.x, x_3403.y, x_3403.z));
  let x_3406 : f32 = u_xlat65;
  let x_3407 : f32 = u_xlat65;
  u_xlat65 = (x_3406 + x_3407);
  let x_3409 : vec4<f32> = u_xlat3;
  let x_3411 : f32 = u_xlat65;
  let x_3415 : vec3<f32> = u_xlat2;
  let x_3417 : vec3<f32> = ((vec3<f32>(x_3409.x, x_3409.y, x_3409.z) * -(vec3<f32>(x_3411, x_3411, x_3411))) + -(x_3415));
  let x_3418 : vec4<f32> = u_xlat8;
  u_xlat8 = vec4<f32>(x_3417.x, x_3417.y, x_3417.z, x_3418.w);
  let x_3420 : vec4<f32> = u_xlat3;
  let x_3422 : vec3<f32> = u_xlat2;
  u_xlat65 = dot(vec3<f32>(x_3420.x, x_3420.y, x_3420.z), x_3422);
  let x_3424 : f32 = u_xlat65;
  u_xlat65 = clamp(x_3424, 0.0f, 1.0f);
  let x_3426 : f32 = u_xlat65;
  u_xlat65 = (-(x_3426) + 1.0f);
  let x_3429 : f32 = u_xlat65;
  let x_3430 : f32 = u_xlat65;
  u_xlat65 = (x_3429 * x_3430);
  let x_3432 : f32 = u_xlat65;
  let x_3433 : f32 = u_xlat65;
  u_xlat65 = (x_3432 * x_3433);
  let x_3436 : f32 = u_xlat43.x;
  u_xlat48.x = ((-(x_3436) * 0.699999988f) + 1.700000048f);
  let x_3444 : f32 = u_xlat43.x;
  let x_3446 : f32 = u_xlat48.x;
  u_xlat43.x = (x_3444 * x_3446);
  let x_3450 : f32 = u_xlat43.x;
  u_xlat43.x = (x_3450 * 6.0f);
  let x_3462 : vec4<f32> = u_xlat8;
  let x_3465 : f32 = u_xlat43.x;
  let x_3466 : vec4<f32> = textureSampleLevel(unity_SpecCube0, samplerunity_SpecCube0, vec3<f32>(x_3462.x, x_3462.y, x_3462.z), x_3465);
  u_xlat8 = x_3466;
  let x_3468 : f32 = u_xlat8.w;
  u_xlat43.x = (x_3468 + -1.0f);
  let x_3472 : f32 = x_161.unity_SpecCube0_HDR.w;
  let x_3474 : f32 = u_xlat43.x;
  u_xlat43.x = ((x_3472 * x_3474) + 1.0f);
  let x_3479 : f32 = u_xlat43.x;
  u_xlat43.x = max(x_3479, 0.0f);
  let x_3483 : f32 = u_xlat43.x;
  u_xlat43.x = log2(x_3483);
  let x_3487 : f32 = u_xlat43.x;
  let x_3489 : f32 = x_161.unity_SpecCube0_HDR.y;
  u_xlat43.x = (x_3487 * x_3489);
  let x_3493 : f32 = u_xlat43.x;
  u_xlat43.x = exp2(x_3493);
  let x_3497 : f32 = u_xlat43.x;
  let x_3499 : f32 = x_161.unity_SpecCube0_HDR.x;
  u_xlat43.x = (x_3497 * x_3499);
  let x_3502 : vec4<f32> = u_xlat8;
  let x_3504 : vec2<f32> = u_xlat43;
  let x_3506 : vec3<f32> = (vec3<f32>(x_3502.x, x_3502.y, x_3502.z) * vec3<f32>(x_3504.x, x_3504.x, x_3504.x));
  let x_3507 : vec4<f32> = u_xlat8;
  u_xlat8 = vec4<f32>(x_3506.x, x_3506.y, x_3506.z, x_3507.w);
  let x_3509 : f32 = u_xlat64;
  let x_3511 : f32 = u_xlat64;
  u_xlat43 = ((vec2<f32>(x_3509, x_3509) * vec2<f32>(x_3511, x_3511)) + vec2<f32>(-1.0f, 1.0f));
  let x_3517 : f32 = u_xlat43.y;
  u_xlat64 = (1.0f / x_3517);
  let x_3519 : f32 = u_xlat67;
  u_xlat67 = (x_3519 + -0.039999999f);
  let x_3522 : f32 = u_xlat65;
  let x_3523 : f32 = u_xlat67;
  u_xlat65 = ((x_3522 * x_3523) + 0.039999999f);
  let x_3527 : f32 = u_xlat64;
  let x_3528 : f32 = u_xlat65;
  u_xlat64 = (x_3527 * x_3528);
  let x_3530 : f32 = u_xlat64;
  let x_3532 : vec4<f32> = u_xlat8;
  let x_3534 : vec3<f32> = (vec3<f32>(x_3530, x_3530, x_3530) * vec3<f32>(x_3532.x, x_3532.y, x_3532.z));
  let x_3535 : vec4<f32> = u_xlat8;
  u_xlat8 = vec4<f32>(x_3534.x, x_3534.y, x_3534.z, x_3535.w);
  let x_3537 : vec3<f32> = u_xlat26;
  let x_3538 : vec3<f32> = u_xlat4;
  let x_3540 : vec4<f32> = u_xlat8;
  u_xlat26 = ((x_3537 * x_3538) + vec3<f32>(x_3540.x, x_3540.y, x_3540.z));
  let x_3543 : f32 = u_xlat63;
  let x_3545 : f32 = x_161.unity_LightData.z;
  u_xlat63 = (x_3543 * x_3545);
  let x_3547 : vec4<f32> = u_xlat3;
  let x_3550 : vec4<f32> = x_90.x_MainLightPosition;
  u_xlat64 = dot(vec3<f32>(x_3547.x, x_3547.y, x_3547.z), vec3<f32>(x_3550.x, x_3550.y, x_3550.z));
  let x_3553 : f32 = u_xlat64;
  u_xlat64 = clamp(x_3553, 0.0f, 1.0f);
  let x_3555 : f32 = u_xlat63;
  let x_3556 : f32 = u_xlat64;
  u_xlat63 = (x_3555 * x_3556);
  let x_3558 : f32 = u_xlat63;
  let x_3560 : vec4<f32> = u_xlat7;
  let x_3562 : vec3<f32> = (vec3<f32>(x_3558, x_3558, x_3558) * vec3<f32>(x_3560.x, x_3560.y, x_3560.z));
  let x_3563 : vec4<f32> = u_xlat7;
  u_xlat7 = vec4<f32>(x_3562.x, x_3562.y, x_3562.z, x_3563.w);
  let x_3565 : vec3<f32> = u_xlat2;
  let x_3567 : vec4<f32> = x_90.x_MainLightPosition;
  let x_3569 : vec3<f32> = (x_3565 + vec3<f32>(x_3567.x, x_3567.y, x_3567.z));
  let x_3570 : vec4<f32> = u_xlat8;
  u_xlat8 = vec4<f32>(x_3569.x, x_3569.y, x_3569.z, x_3570.w);
  let x_3572 : vec4<f32> = u_xlat8;
  let x_3574 : vec4<f32> = u_xlat8;
  u_xlat63 = dot(vec3<f32>(x_3572.x, x_3572.y, x_3572.z), vec3<f32>(x_3574.x, x_3574.y, x_3574.z));
  let x_3577 : f32 = u_xlat63;
  u_xlat63 = max(x_3577, 1.17549435e-37f);
  let x_3580 : f32 = u_xlat63;
  u_xlat63 = inverseSqrt(x_3580);
  let x_3582 : f32 = u_xlat63;
  let x_3584 : vec4<f32> = u_xlat8;
  let x_3586 : vec3<f32> = (vec3<f32>(x_3582, x_3582, x_3582) * vec3<f32>(x_3584.x, x_3584.y, x_3584.z));
  let x_3587 : vec4<f32> = u_xlat8;
  u_xlat8 = vec4<f32>(x_3586.x, x_3586.y, x_3586.z, x_3587.w);
  let x_3589 : vec4<f32> = u_xlat3;
  let x_3591 : vec4<f32> = u_xlat8;
  u_xlat63 = dot(vec3<f32>(x_3589.x, x_3589.y, x_3589.z), vec3<f32>(x_3591.x, x_3591.y, x_3591.z));
  let x_3594 : f32 = u_xlat63;
  u_xlat63 = clamp(x_3594, 0.0f, 1.0f);
  let x_3597 : vec4<f32> = x_90.x_MainLightPosition;
  let x_3599 : vec4<f32> = u_xlat8;
  u_xlat64 = dot(vec3<f32>(x_3597.x, x_3597.y, x_3597.z), vec3<f32>(x_3599.x, x_3599.y, x_3599.z));
  let x_3602 : f32 = u_xlat64;
  u_xlat64 = clamp(x_3602, 0.0f, 1.0f);
  let x_3604 : f32 = u_xlat63;
  let x_3605 : f32 = u_xlat63;
  u_xlat63 = (x_3604 * x_3605);
  let x_3607 : f32 = u_xlat63;
  let x_3609 : f32 = u_xlat43.x;
  u_xlat63 = ((x_3607 * x_3609) + 1.000010014f);
  let x_3613 : f32 = u_xlat64;
  let x_3614 : f32 = u_xlat64;
  u_xlat64 = (x_3613 * x_3614);
  let x_3616 : f32 = u_xlat63;
  let x_3617 : f32 = u_xlat63;
  u_xlat63 = (x_3616 * x_3617);
  let x_3619 : f32 = u_xlat64;
  u_xlat64 = max(x_3619, 0.100000001f);
  let x_3622 : f32 = u_xlat63;
  let x_3623 : f32 = u_xlat64;
  u_xlat63 = (x_3622 * x_3623);
  let x_3626 : f32 = u_xlat5.x;
  let x_3627 : f32 = u_xlat63;
  u_xlat63 = (x_3626 * x_3627);
  let x_3629 : f32 = u_xlat66;
  let x_3630 : f32 = u_xlat63;
  u_xlat63 = (x_3629 / x_3630);
  let x_3632 : f32 = u_xlat63;
  let x_3636 : vec3<f32> = u_xlat4;
  let x_3637 : vec3<f32> = ((vec3<f32>(x_3632, x_3632, x_3632) * vec3<f32>(0.039999999f, 0.039999999f, 0.039999999f)) + x_3636);
  let x_3638 : vec4<f32> = u_xlat8;
  u_xlat8 = vec4<f32>(x_3637.x, x_3637.y, x_3637.z, x_3638.w);
  let x_3640 : vec4<f32> = u_xlat7;
  let x_3642 : vec4<f32> = u_xlat8;
  let x_3644 : vec3<f32> = (vec3<f32>(x_3640.x, x_3640.y, x_3640.z) * vec3<f32>(x_3642.x, x_3642.y, x_3642.z));
  let x_3645 : vec4<f32> = u_xlat7;
  u_xlat7 = vec4<f32>(x_3644.x, x_3644.y, x_3644.z, x_3645.w);
  let x_3648 : f32 = x_90.x_AdditionalLightsCount.x;
  let x_3650 : f32 = x_161.unity_LightData.y;
  u_xlat63 = min(x_3648, x_3650);
  let x_3653 : f32 = u_xlat63;
  u_xlatu63 = bitcast<u32>(i32(x_3653));
  let x_3657 : f32 = x_3294.x_AdditionalLightsCookieAtlasTextureFormat;
  let x_3659 : f32 = x_3294.x_AdditionalLightsCookieAtlasTextureFormat;
  let x_3661 : f32 = x_3294.x_AdditionalLightsCookieAtlasTextureFormat;
  let x_3663 : f32 = x_3294.x_AdditionalLightsCookieAtlasTextureFormat;
  let x_3664 : vec4<f32> = vec4<f32>(x_3657, x_3659, x_3661, x_3663);
  let x_3670 : vec4<bool> = (vec4<f32>(x_3664.x, x_3664.y, x_3664.z, x_3664.w) == vec4<f32>(0.0f, 1.0f, 0.0f, 1.0f));
  u_xlatb48 = vec2<bool>(x_3670.x, x_3670.y);
  u_xlat8.x = 0.0f;
  u_xlat8.y = 0.0f;
  u_xlat8.z = 0.0f;
  u_xlatu_loop_1 = 0u;
  loop {
    let x_3681 : u32 = u_xlatu_loop_1;
    let x_3682 : u32 = u_xlatu63;
    if ((x_3681 < x_3682)) {
    } else {
      break;
    }
    let x_3685 : u32 = u_xlatu_loop_1;
    u_xlatu65 = (x_3685 >> 2u);
    let x_3688 : u32 = u_xlatu_loop_1;
    u_xlati67 = bitcast<i32>((x_3688 & 3u));
    let x_3691 : u32 = u_xlatu65;
    let x_3694 : vec4<f32> = x_161.unity_LightIndices[bitcast<i32>(x_3691)];
    let x_3704 : i32 = u_xlati67;
    indexable = array<vec4<u32>, 4u>(vec4<u32>(1065353216u, 0u, 0u, 0u), vec4<u32>(0u, 1065353216u, 0u, 0u), vec4<u32>(0u, 0u, 1065353216u, 0u), vec4<u32>(0u, 0u, 0u, 1065353216u));
    let x_3709 : vec4<u32> = indexable[x_3704];
    u_xlat65 = dot(x_3694, bitcast<vec4<f32>>(x_3709));
    let x_3712 : f32 = u_xlat65;
    u_xlatu65 = bitcast<u32>(i32(x_3712));
    let x_3715 : vec3<f32> = vs_INTERP0;
    let x_3727 : u32 = u_xlatu65;
    let x_3730 : vec4<f32> = x_3726.x_AdditionalLightsPosition[bitcast<i32>(x_3727)];
    let x_3733 : u32 = u_xlatu65;
    let x_3736 : vec4<f32> = x_3726.x_AdditionalLightsPosition[bitcast<i32>(x_3733)];
    let x_3738 : vec3<f32> = ((-(x_3715) * vec3<f32>(x_3730.w, x_3730.w, x_3730.w)) + vec3<f32>(x_3736.x, x_3736.y, x_3736.z));
    let x_3739 : vec4<f32> = u_xlat9;
    u_xlat9 = vec4<f32>(x_3738.x, x_3738.y, x_3738.z, x_3739.w);
    let x_3741 : vec4<f32> = u_xlat9;
    let x_3743 : vec4<f32> = u_xlat9;
    u_xlat67 = dot(vec3<f32>(x_3741.x, x_3741.y, x_3741.z), vec3<f32>(x_3743.x, x_3743.y, x_3743.z));
    let x_3746 : f32 = u_xlat67;
    u_xlat67 = max(x_3746, 6.10351562e-05f);
    let x_3750 : f32 = u_xlat67;
    u_xlat70 = inverseSqrt(x_3750);
    let x_3752 : f32 = u_xlat70;
    let x_3754 : vec4<f32> = u_xlat9;
    let x_3756 : vec3<f32> = (vec3<f32>(x_3752, x_3752, x_3752) * vec3<f32>(x_3754.x, x_3754.y, x_3754.z));
    let x_3757 : vec4<f32> = u_xlat10;
    u_xlat10 = vec4<f32>(x_3756.x, x_3756.y, x_3756.z, x_3757.w);
    let x_3759 : f32 = u_xlat67;
    u_xlat71 = (1.0f / x_3759);
    let x_3761 : f32 = u_xlat67;
    let x_3762 : u32 = u_xlatu65;
    let x_3765 : f32 = x_3726.x_AdditionalLightsAttenuation[bitcast<i32>(x_3762)].x;
    u_xlat67 = (x_3761 * x_3765);
    let x_3767 : f32 = u_xlat67;
    let x_3769 : f32 = u_xlat67;
    u_xlat67 = ((-(x_3767) * x_3769) + 1.0f);
    let x_3772 : f32 = u_xlat67;
    u_xlat67 = max(x_3772, 0.0f);
    let x_3774 : f32 = u_xlat67;
    let x_3775 : f32 = u_xlat67;
    u_xlat67 = (x_3774 * x_3775);
    let x_3777 : f32 = u_xlat67;
    let x_3778 : f32 = u_xlat71;
    u_xlat67 = (x_3777 * x_3778);
    let x_3780 : u32 = u_xlatu65;
    let x_3783 : vec4<f32> = x_3726.x_AdditionalLightsSpotDir[bitcast<i32>(x_3780)];
    let x_3785 : vec4<f32> = u_xlat10;
    u_xlat71 = dot(vec3<f32>(x_3783.x, x_3783.y, x_3783.z), vec3<f32>(x_3785.x, x_3785.y, x_3785.z));
    let x_3788 : f32 = u_xlat71;
    let x_3789 : u32 = u_xlatu65;
    let x_3792 : f32 = x_3726.x_AdditionalLightsAttenuation[bitcast<i32>(x_3789)].z;
    let x_3794 : u32 = u_xlatu65;
    let x_3797 : f32 = x_3726.x_AdditionalLightsAttenuation[bitcast<i32>(x_3794)].w;
    u_xlat71 = ((x_3788 * x_3792) + x_3797);
    let x_3799 : f32 = u_xlat71;
    u_xlat71 = clamp(x_3799, 0.0f, 1.0f);
    let x_3801 : f32 = u_xlat71;
    let x_3802 : f32 = u_xlat71;
    u_xlat71 = (x_3801 * x_3802);
    let x_3804 : f32 = u_xlat67;
    let x_3805 : f32 = u_xlat71;
    u_xlat67 = (x_3804 * x_3805);
    let x_3808 : u32 = u_xlatu65;
    u_xlatu71 = (x_3808 >> 5u);
    let x_3811 : u32 = u_xlatu65;
    u_xlati72 = (1i << bitcast<u32>((bitcast<i32>(x_3811) & 31i)));
    let x_3817 : i32 = u_xlati72;
    let x_3819 : u32 = u_xlatu71;
    let x_3822 : f32 = x_3294.x_AdditionalLightsCookieEnableBits[bitcast<i32>(x_3819)].el;
    u_xlati71 = bitcast<i32>((bitcast<u32>(x_3817) & bitcast<u32>(x_3822)));
    let x_3826 : i32 = u_xlati71;
    if ((x_3826 != 0i)) {
      let x_3836 : u32 = u_xlatu65;
      let x_3839 : f32 = x_3835.x_AdditionalLightsLightTypes[bitcast<i32>(x_3836)].el;
      u_xlati71 = i32(x_3839);
      let x_3841 : i32 = u_xlati71;
      u_xlati72 = select(1i, 0i, (x_3841 != 0i));
      let x_3845 : u32 = u_xlatu65;
      u_xlati73 = (bitcast<i32>(x_3845) << bitcast<u32>(2i));
      let x_3848 : i32 = u_xlati72;
      if ((x_3848 != 0i)) {
        let x_3852 : vec3<f32> = vs_INTERP0;
        let x_3854 : i32 = u_xlati73;
        let x_3857 : i32 = u_xlati73;
        let x_3861 : vec4<f32> = x_3835.x_AdditionalLightsWorldToLights[((x_3854 + 1i) / 4i)][((x_3857 + 1i) % 4i)];
        let x_3863 : vec3<f32> = (vec3<f32>(x_3852.y, x_3852.y, x_3852.y) * vec3<f32>(x_3861.x, x_3861.y, x_3861.w));
        let x_3864 : vec4<f32> = u_xlat11;
        u_xlat11 = vec4<f32>(x_3863.x, x_3863.y, x_3863.z, x_3864.w);
        let x_3866 : i32 = u_xlati73;
        let x_3868 : i32 = u_xlati73;
        let x_3871 : vec4<f32> = x_3835.x_AdditionalLightsWorldToLights[(x_3866 / 4i)][(x_3868 % 4i)];
        let x_3873 : vec3<f32> = vs_INTERP0;
        let x_3876 : vec4<f32> = u_xlat11;
        let x_3878 : vec3<f32> = ((vec3<f32>(x_3871.x, x_3871.y, x_3871.w) * vec3<f32>(x_3873.x, x_3873.x, x_3873.x)) + vec3<f32>(x_3876.x, x_3876.y, x_3876.z));
        let x_3879 : vec4<f32> = u_xlat11;
        u_xlat11 = vec4<f32>(x_3878.x, x_3878.y, x_3878.z, x_3879.w);
        let x_3881 : i32 = u_xlati73;
        let x_3884 : i32 = u_xlati73;
        let x_3888 : vec4<f32> = x_3835.x_AdditionalLightsWorldToLights[((x_3881 + 2i) / 4i)][((x_3884 + 2i) % 4i)];
        let x_3890 : vec3<f32> = vs_INTERP0;
        let x_3893 : vec4<f32> = u_xlat11;
        let x_3895 : vec3<f32> = ((vec3<f32>(x_3888.x, x_3888.y, x_3888.w) * vec3<f32>(x_3890.z, x_3890.z, x_3890.z)) + vec3<f32>(x_3893.x, x_3893.y, x_3893.z));
        let x_3896 : vec4<f32> = u_xlat11;
        u_xlat11 = vec4<f32>(x_3895.x, x_3895.y, x_3895.z, x_3896.w);
        let x_3898 : vec4<f32> = u_xlat11;
        let x_3900 : i32 = u_xlati73;
        let x_3903 : i32 = u_xlati73;
        let x_3907 : vec4<f32> = x_3835.x_AdditionalLightsWorldToLights[((x_3900 + 3i) / 4i)][((x_3903 + 3i) % 4i)];
        let x_3909 : vec3<f32> = (vec3<f32>(x_3898.x, x_3898.y, x_3898.z) + vec3<f32>(x_3907.x, x_3907.y, x_3907.w));
        let x_3910 : vec4<f32> = u_xlat11;
        u_xlat11 = vec4<f32>(x_3909.x, x_3909.y, x_3909.z, x_3910.w);
        let x_3912 : vec4<f32> = u_xlat11;
        let x_3914 : vec4<f32> = u_xlat11;
        let x_3916 : vec2<f32> = (vec2<f32>(x_3912.x, x_3912.y) / vec2<f32>(x_3914.z, x_3914.z));
        let x_3917 : vec4<f32> = u_xlat11;
        u_xlat11 = vec4<f32>(x_3916.x, x_3916.y, x_3917.z, x_3917.w);
        let x_3919 : vec4<f32> = u_xlat11;
        let x_3922 : vec2<f32> = ((vec2<f32>(x_3919.x, x_3919.y) * vec2<f32>(0.5f, 0.5f)) + vec2<f32>(0.5f, 0.5f));
        let x_3923 : vec4<f32> = u_xlat11;
        u_xlat11 = vec4<f32>(x_3922.x, x_3922.y, x_3923.z, x_3923.w);
        let x_3925 : vec4<f32> = u_xlat11;
        let x_3929 : vec2<f32> = clamp(vec2<f32>(x_3925.x, x_3925.y), vec2<f32>(0.0f, 0.0f), vec2<f32>(1.0f, 1.0f));
        let x_3930 : vec4<f32> = u_xlat11;
        u_xlat11 = vec4<f32>(x_3929.x, x_3929.y, x_3930.z, x_3930.w);
        let x_3932 : u32 = u_xlatu65;
        let x_3935 : vec4<f32> = x_3835.x_AdditionalLightsCookieAtlasUVRects[bitcast<i32>(x_3932)];
        let x_3937 : vec4<f32> = u_xlat11;
        let x_3940 : u32 = u_xlatu65;
        let x_3943 : vec4<f32> = x_3835.x_AdditionalLightsCookieAtlasUVRects[bitcast<i32>(x_3940)];
        let x_3945 : vec2<f32> = ((vec2<f32>(x_3935.x, x_3935.y) * vec2<f32>(x_3937.x, x_3937.y)) + vec2<f32>(x_3943.z, x_3943.w));
        let x_3946 : vec4<f32> = u_xlat11;
        u_xlat11 = vec4<f32>(x_3945.x, x_3945.y, x_3946.z, x_3946.w);
      } else {
        let x_3950 : i32 = u_xlati71;
        u_xlatb71 = (x_3950 == 1i);
        let x_3952 : bool = u_xlatb71;
        u_xlati71 = select(0i, 1i, x_3952);
        let x_3954 : i32 = u_xlati71;
        if ((x_3954 != 0i)) {
          let x_3959 : vec3<f32> = vs_INTERP0;
          let x_3961 : i32 = u_xlati73;
          let x_3964 : i32 = u_xlati73;
          let x_3968 : vec4<f32> = x_3835.x_AdditionalLightsWorldToLights[((x_3961 + 1i) / 4i)][((x_3964 + 1i) % 4i)];
          u_xlat53 = (vec2<f32>(x_3959.y, x_3959.y) * vec2<f32>(x_3968.x, x_3968.y));
          let x_3971 : i32 = u_xlati73;
          let x_3973 : i32 = u_xlati73;
          let x_3976 : vec4<f32> = x_3835.x_AdditionalLightsWorldToLights[(x_3971 / 4i)][(x_3973 % 4i)];
          let x_3978 : vec3<f32> = vs_INTERP0;
          let x_3981 : vec2<f32> = u_xlat53;
          u_xlat53 = ((vec2<f32>(x_3976.x, x_3976.y) * vec2<f32>(x_3978.x, x_3978.x)) + x_3981);
          let x_3983 : i32 = u_xlati73;
          let x_3986 : i32 = u_xlati73;
          let x_3990 : vec4<f32> = x_3835.x_AdditionalLightsWorldToLights[((x_3983 + 2i) / 4i)][((x_3986 + 2i) % 4i)];
          let x_3992 : vec3<f32> = vs_INTERP0;
          let x_3995 : vec2<f32> = u_xlat53;
          u_xlat53 = ((vec2<f32>(x_3990.x, x_3990.y) * vec2<f32>(x_3992.z, x_3992.z)) + x_3995);
          let x_3997 : vec2<f32> = u_xlat53;
          let x_3998 : i32 = u_xlati73;
          let x_4001 : i32 = u_xlati73;
          let x_4005 : vec4<f32> = x_3835.x_AdditionalLightsWorldToLights[((x_3998 + 3i) / 4i)][((x_4001 + 3i) % 4i)];
          u_xlat53 = (x_3997 + vec2<f32>(x_4005.x, x_4005.y));
          let x_4008 : vec2<f32> = u_xlat53;
          u_xlat53 = ((x_4008 * vec2<f32>(0.5f, 0.5f)) + vec2<f32>(0.5f, 0.5f));
          let x_4011 : vec2<f32> = u_xlat53;
          u_xlat53 = fract(x_4011);
          let x_4013 : u32 = u_xlatu65;
          let x_4016 : vec4<f32> = x_3835.x_AdditionalLightsCookieAtlasUVRects[bitcast<i32>(x_4013)];
          let x_4018 : vec2<f32> = u_xlat53;
          let x_4020 : u32 = u_xlatu65;
          let x_4023 : vec4<f32> = x_3835.x_AdditionalLightsCookieAtlasUVRects[bitcast<i32>(x_4020)];
          let x_4025 : vec2<f32> = ((vec2<f32>(x_4016.x, x_4016.y) * x_4018) + vec2<f32>(x_4023.z, x_4023.w));
          let x_4026 : vec4<f32> = u_xlat11;
          u_xlat11 = vec4<f32>(x_4025.x, x_4025.y, x_4026.z, x_4026.w);
        } else {
          let x_4029 : vec3<f32> = vs_INTERP0;
          let x_4031 : i32 = u_xlati73;
          let x_4034 : i32 = u_xlati73;
          let x_4038 : vec4<f32> = x_3835.x_AdditionalLightsWorldToLights[((x_4031 + 1i) / 4i)][((x_4034 + 1i) % 4i)];
          u_xlat12 = (vec4<f32>(x_4029.y, x_4029.y, x_4029.y, x_4029.y) * x_4038);
          let x_4040 : i32 = u_xlati73;
          let x_4042 : i32 = u_xlati73;
          let x_4045 : vec4<f32> = x_3835.x_AdditionalLightsWorldToLights[(x_4040 / 4i)][(x_4042 % 4i)];
          let x_4046 : vec3<f32> = vs_INTERP0;
          let x_4049 : vec4<f32> = u_xlat12;
          u_xlat12 = ((x_4045 * vec4<f32>(x_4046.x, x_4046.x, x_4046.x, x_4046.x)) + x_4049);
          let x_4051 : i32 = u_xlati73;
          let x_4054 : i32 = u_xlati73;
          let x_4058 : vec4<f32> = x_3835.x_AdditionalLightsWorldToLights[((x_4051 + 2i) / 4i)][((x_4054 + 2i) % 4i)];
          let x_4059 : vec3<f32> = vs_INTERP0;
          let x_4062 : vec4<f32> = u_xlat12;
          u_xlat12 = ((x_4058 * vec4<f32>(x_4059.z, x_4059.z, x_4059.z, x_4059.z)) + x_4062);
          let x_4064 : vec4<f32> = u_xlat12;
          let x_4065 : i32 = u_xlati73;
          let x_4068 : i32 = u_xlati73;
          let x_4072 : vec4<f32> = x_3835.x_AdditionalLightsWorldToLights[((x_4065 + 3i) / 4i)][((x_4068 + 3i) % 4i)];
          u_xlat12 = (x_4064 + x_4072);
          let x_4074 : vec4<f32> = u_xlat12;
          let x_4076 : vec4<f32> = u_xlat12;
          let x_4078 : vec3<f32> = (vec3<f32>(x_4074.x, x_4074.y, x_4074.z) / vec3<f32>(x_4076.w, x_4076.w, x_4076.w));
          let x_4079 : vec4<f32> = u_xlat12;
          u_xlat12 = vec4<f32>(x_4078.x, x_4078.y, x_4078.z, x_4079.w);
          let x_4081 : vec4<f32> = u_xlat12;
          let x_4083 : vec4<f32> = u_xlat12;
          u_xlat71 = dot(vec3<f32>(x_4081.x, x_4081.y, x_4081.z), vec3<f32>(x_4083.x, x_4083.y, x_4083.z));
          let x_4086 : f32 = u_xlat71;
          u_xlat71 = inverseSqrt(x_4086);
          let x_4088 : f32 = u_xlat71;
          let x_4090 : vec4<f32> = u_xlat12;
          let x_4092 : vec3<f32> = (vec3<f32>(x_4088, x_4088, x_4088) * vec3<f32>(x_4090.x, x_4090.y, x_4090.z));
          let x_4093 : vec4<f32> = u_xlat12;
          u_xlat12 = vec4<f32>(x_4092.x, x_4092.y, x_4092.z, x_4093.w);
          let x_4095 : vec4<f32> = u_xlat12;
          u_xlat71 = dot(abs(vec3<f32>(x_4095.x, x_4095.y, x_4095.z)), vec3<f32>(1.0f, 1.0f, 1.0f));
          let x_4100 : f32 = u_xlat71;
          u_xlat71 = max(x_4100, 0.000001f);
          let x_4103 : f32 = u_xlat71;
          u_xlat71 = (1.0f / x_4103);
          let x_4105 : f32 = u_xlat71;
          let x_4107 : vec4<f32> = u_xlat12;
          let x_4109 : vec3<f32> = (vec3<f32>(x_4105, x_4105, x_4105) * vec3<f32>(x_4107.z, x_4107.x, x_4107.y));
          let x_4110 : vec4<f32> = u_xlat13;
          u_xlat13 = vec4<f32>(x_4109.x, x_4109.y, x_4109.z, x_4110.w);
          let x_4113 : f32 = u_xlat13.x;
          u_xlat13.x = -(x_4113);
          let x_4117 : f32 = u_xlat13.x;
          u_xlat13.x = clamp(x_4117, 0.0f, 1.0f);
          let x_4121 : vec4<f32> = u_xlat13;
          let x_4124 : vec4<bool> = (vec4<f32>(x_4121.y, x_4121.z, x_4121.y, x_4121.z) >= vec4<f32>(0.0f, 0.0f, 0.0f, 0.0f));
          u_xlatb53 = vec2<bool>(x_4124.x, x_4124.y);
          let x_4127 : bool = u_xlatb53.x;
          if (x_4127) {
            let x_4132 : f32 = u_xlat13.x;
            x_4128 = x_4132;
          } else {
            let x_4135 : f32 = u_xlat13.x;
            x_4128 = -(x_4135);
          }
          let x_4137 : f32 = x_4128;
          u_xlat53.x = x_4137;
          let x_4140 : bool = u_xlatb53.y;
          if (x_4140) {
            let x_4145 : f32 = u_xlat13.x;
            x_4141 = x_4145;
          } else {
            let x_4148 : f32 = u_xlat13.x;
            x_4141 = -(x_4148);
          }
          let x_4150 : f32 = x_4141;
          u_xlat53.y = x_4150;
          let x_4152 : vec4<f32> = u_xlat12;
          let x_4154 : f32 = u_xlat71;
          let x_4157 : vec2<f32> = u_xlat53;
          u_xlat53 = ((vec2<f32>(x_4152.x, x_4152.y) * vec2<f32>(x_4154, x_4154)) + x_4157);
          let x_4159 : vec2<f32> = u_xlat53;
          u_xlat53 = ((x_4159 * vec2<f32>(0.5f, 0.5f)) + vec2<f32>(0.5f, 0.5f));
          let x_4162 : vec2<f32> = u_xlat53;
          u_xlat53 = clamp(x_4162, vec2<f32>(0.0f, 0.0f), vec2<f32>(1.0f, 1.0f));
          let x_4166 : u32 = u_xlatu65;
          let x_4169 : vec4<f32> = x_3835.x_AdditionalLightsCookieAtlasUVRects[bitcast<i32>(x_4166)];
          let x_4171 : vec2<f32> = u_xlat53;
          let x_4173 : u32 = u_xlatu65;
          let x_4176 : vec4<f32> = x_3835.x_AdditionalLightsCookieAtlasUVRects[bitcast<i32>(x_4173)];
          let x_4178 : vec2<f32> = ((vec2<f32>(x_4169.x, x_4169.y) * x_4171) + vec2<f32>(x_4176.z, x_4176.w));
          let x_4179 : vec4<f32> = u_xlat11;
          u_xlat11 = vec4<f32>(x_4178.x, x_4178.y, x_4179.z, x_4179.w);
        }
      }
      let x_4186 : vec4<f32> = u_xlat11;
      let x_4189 : f32 = x_90.x_GlobalMipBias.x;
      let x_4190 : vec4<f32> = textureSampleBias(x_AdditionalLightsCookieAtlasTexture, sampler_AdditionalLightsCookieAtlasTexture, vec2<f32>(x_4186.x, x_4186.y), x_4189);
      u_xlat11 = x_4190;
      let x_4192 : bool = u_xlatb48.y;
      if (x_4192) {
        let x_4197 : f32 = u_xlat11.w;
        x_4193 = x_4197;
      } else {
        let x_4200 : f32 = u_xlat11.x;
        x_4193 = x_4200;
      }
      let x_4201 : f32 = x_4193;
      u_xlat71 = x_4201;
      let x_4203 : bool = u_xlatb48.x;
      if (x_4203) {
        let x_4207 : vec4<f32> = u_xlat11;
        x_4204 = vec3<f32>(x_4207.x, x_4207.y, x_4207.z);
      } else {
        let x_4210 : f32 = u_xlat71;
        x_4204 = vec3<f32>(x_4210, x_4210, x_4210);
      }
      let x_4212 : vec3<f32> = x_4204;
      let x_4213 : vec4<f32> = u_xlat11;
      u_xlat11 = vec4<f32>(x_4212.x, x_4212.y, x_4212.z, x_4213.w);
    } else {
      u_xlat11.x = 1.0f;
      u_xlat11.y = 1.0f;
      u_xlat11.z = 1.0f;
    }
    let x_4219 : vec4<f32> = u_xlat11;
    let x_4221 : u32 = u_xlatu65;
    let x_4224 : vec4<f32> = x_3726.x_AdditionalLightsColor[bitcast<i32>(x_4221)];
    let x_4226 : vec3<f32> = (vec3<f32>(x_4219.x, x_4219.y, x_4219.z) * vec3<f32>(x_4224.x, x_4224.y, x_4224.z));
    let x_4227 : vec4<f32> = u_xlat11;
    u_xlat11 = vec4<f32>(x_4226.x, x_4226.y, x_4226.z, x_4227.w);
    let x_4229 : f32 = u_xlat27;
    let x_4231 : vec4<f32> = u_xlat11;
    let x_4233 : vec3<f32> = (vec3<f32>(x_4229, x_4229, x_4229) * vec3<f32>(x_4231.x, x_4231.y, x_4231.z));
    let x_4234 : vec4<f32> = u_xlat11;
    u_xlat11 = vec4<f32>(x_4233.x, x_4233.y, x_4233.z, x_4234.w);
    let x_4236 : vec4<f32> = u_xlat3;
    let x_4238 : vec4<f32> = u_xlat10;
    u_xlat65 = dot(vec3<f32>(x_4236.x, x_4236.y, x_4236.z), vec3<f32>(x_4238.x, x_4238.y, x_4238.z));
    let x_4241 : f32 = u_xlat65;
    u_xlat65 = clamp(x_4241, 0.0f, 1.0f);
    let x_4243 : f32 = u_xlat65;
    let x_4244 : f32 = u_xlat67;
    u_xlat65 = (x_4243 * x_4244);
    let x_4246 : f32 = u_xlat65;
    let x_4248 : vec4<f32> = u_xlat11;
    let x_4250 : vec3<f32> = (vec3<f32>(x_4246, x_4246, x_4246) * vec3<f32>(x_4248.x, x_4248.y, x_4248.z));
    let x_4251 : vec4<f32> = u_xlat11;
    u_xlat11 = vec4<f32>(x_4250.x, x_4250.y, x_4250.z, x_4251.w);
    let x_4253 : vec4<f32> = u_xlat9;
    let x_4255 : f32 = u_xlat70;
    let x_4258 : vec3<f32> = u_xlat2;
    let x_4259 : vec3<f32> = ((vec3<f32>(x_4253.x, x_4253.y, x_4253.z) * vec3<f32>(x_4255, x_4255, x_4255)) + x_4258);
    let x_4260 : vec4<f32> = u_xlat9;
    u_xlat9 = vec4<f32>(x_4259.x, x_4259.y, x_4259.z, x_4260.w);
    let x_4262 : vec4<f32> = u_xlat9;
    let x_4264 : vec4<f32> = u_xlat9;
    u_xlat65 = dot(vec3<f32>(x_4262.x, x_4262.y, x_4262.z), vec3<f32>(x_4264.x, x_4264.y, x_4264.z));
    let x_4267 : f32 = u_xlat65;
    u_xlat65 = max(x_4267, 1.17549435e-37f);
    let x_4269 : f32 = u_xlat65;
    u_xlat65 = inverseSqrt(x_4269);
    let x_4271 : f32 = u_xlat65;
    let x_4273 : vec4<f32> = u_xlat9;
    let x_4275 : vec3<f32> = (vec3<f32>(x_4271, x_4271, x_4271) * vec3<f32>(x_4273.x, x_4273.y, x_4273.z));
    let x_4276 : vec4<f32> = u_xlat9;
    u_xlat9 = vec4<f32>(x_4275.x, x_4275.y, x_4275.z, x_4276.w);
    let x_4278 : vec4<f32> = u_xlat3;
    let x_4280 : vec4<f32> = u_xlat9;
    u_xlat65 = dot(vec3<f32>(x_4278.x, x_4278.y, x_4278.z), vec3<f32>(x_4280.x, x_4280.y, x_4280.z));
    let x_4283 : f32 = u_xlat65;
    u_xlat65 = clamp(x_4283, 0.0f, 1.0f);
    let x_4285 : vec4<f32> = u_xlat10;
    let x_4287 : vec4<f32> = u_xlat9;
    u_xlat67 = dot(vec3<f32>(x_4285.x, x_4285.y, x_4285.z), vec3<f32>(x_4287.x, x_4287.y, x_4287.z));
    let x_4290 : f32 = u_xlat67;
    u_xlat67 = clamp(x_4290, 0.0f, 1.0f);
    let x_4292 : f32 = u_xlat65;
    let x_4293 : f32 = u_xlat65;
    u_xlat65 = (x_4292 * x_4293);
    let x_4295 : f32 = u_xlat65;
    let x_4297 : f32 = u_xlat43.x;
    u_xlat65 = ((x_4295 * x_4297) + 1.000010014f);
    let x_4300 : f32 = u_xlat67;
    let x_4301 : f32 = u_xlat67;
    u_xlat67 = (x_4300 * x_4301);
    let x_4303 : f32 = u_xlat65;
    let x_4304 : f32 = u_xlat65;
    u_xlat65 = (x_4303 * x_4304);
    let x_4306 : f32 = u_xlat67;
    u_xlat67 = max(x_4306, 0.100000001f);
    let x_4308 : f32 = u_xlat65;
    let x_4309 : f32 = u_xlat67;
    u_xlat65 = (x_4308 * x_4309);
    let x_4312 : f32 = u_xlat5.x;
    let x_4313 : f32 = u_xlat65;
    u_xlat65 = (x_4312 * x_4313);
    let x_4315 : f32 = u_xlat66;
    let x_4316 : f32 = u_xlat65;
    u_xlat65 = (x_4315 / x_4316);
    let x_4318 : f32 = u_xlat65;
    let x_4321 : vec3<f32> = u_xlat4;
    let x_4322 : vec3<f32> = ((vec3<f32>(x_4318, x_4318, x_4318) * vec3<f32>(0.039999999f, 0.039999999f, 0.039999999f)) + x_4321);
    let x_4323 : vec4<f32> = u_xlat9;
    u_xlat9 = vec4<f32>(x_4322.x, x_4322.y, x_4322.z, x_4323.w);
    let x_4325 : vec4<f32> = u_xlat9;
    let x_4327 : vec4<f32> = u_xlat11;
    let x_4330 : vec4<f32> = u_xlat8;
    let x_4332 : vec3<f32> = ((vec3<f32>(x_4325.x, x_4325.y, x_4325.z) * vec3<f32>(x_4327.x, x_4327.y, x_4327.z)) + vec3<f32>(x_4330.x, x_4330.y, x_4330.z));
    let x_4333 : vec4<f32> = u_xlat8;
    u_xlat8 = vec4<f32>(x_4332.x, x_4332.y, x_4332.z, x_4333.w);

    continuing {
      let x_4335 : u32 = u_xlatu_loop_1;
      u_xlatu_loop_1 = (x_4335 + bitcast<u32>(1i));
    }
  }
  let x_4337 : vec3<f32> = u_xlat26;
  let x_4338 : vec4<f32> = u_xlat6;
  let x_4341 : vec4<f32> = u_xlat7;
  u_xlat2 = ((x_4337 * vec3<f32>(x_4338.x, x_4338.x, x_4338.x)) + vec3<f32>(x_4341.x, x_4341.y, x_4341.z));
  let x_4344 : vec4<f32> = u_xlat8;
  let x_4346 : vec3<f32> = u_xlat2;
  u_xlat2 = (vec3<f32>(x_4344.x, x_4344.y, x_4344.z) + x_4346);
  let x_4350 : vec4<f32> = vs_INTERP4;
  let x_4352 : vec3<f32> = u_xlat0;
  let x_4354 : vec3<f32> = u_xlat2;
  let x_4355 : vec3<f32> = ((vec3<f32>(x_4350.w, x_4350.w, x_4350.w) * x_4352) + x_4354);
  let x_4356 : vec4<f32> = SV_Target0;
  SV_Target0 = vec4<f32>(x_4355.x, x_4355.y, x_4355.z, x_4356.w);
  let x_4358 : bool = u_xlatb22;
  if (x_4358) {
    let x_4363 : f32 = u_xlat1.x;
    x_4359 = x_4363;
  } else {
    x_4359 = 1.0f;
  }
  let x_4365 : f32 = x_4359;
  SV_Target0.w = x_4365;
  let x_4371 : u32 = x_90.x_RenderingLayerMaxInt;
  let x_4373 : f32 = x_161.unity_RenderingLayer.x;
  u_xlatu0 = (x_4371 & bitcast<u32>(x_4373));
  let x_4376 : u32 = u_xlatu0;
  u_xlat0.x = f32(x_4376);
  let x_4381 : f32 = u_xlat0.x;
  let x_4383 : f32 = x_90.x_RenderingLayerRcpMaxInt;
  SV_Target1.x = (x_4381 * x_4383);
  let x_4387 : f32 = SV_Target1.x;
  SV_Target1.x = clamp(x_4387, 0.0f, 1.0f);
  let x_4391 : vec4<f32> = SV_Target1;
  SV_Target1 = vec4<f32>(x_4391.x, vec3<f32>(0.0f, 0.0f, 0.0f).x, vec3<f32>(0.0f, 0.0f, 0.0f).y, vec3<f32>(0.0f, 0.0f, 0.0f).z);
  return;
}

struct main_out {
  @location(0)
  SV_Target0_1 : vec4<f32>,
  @location(1)
  SV_Target1_1 : vec4<f32>,
}

@fragment
fn main(@builtin(position) gl_FragCoord_param : vec4<f32>, @location(1) vs_INTERP1_param : vec3<f32>, @location(0) vs_INTERP0_param : vec3<f32>, @location(3) vs_INTERP3_param : vec4<f32>, @location(4) vs_INTERP4_param : vec4<f32>, @location(2) vs_INTERP2_param : vec4<f32>, @location(5) vs_INTERP5_param : vec2<f32>, @location(6) vs_INTERP9_param : vec4<f32>) -> main_out {
  gl_FragCoord = gl_FragCoord_param;
  vs_INTERP1 = vs_INTERP1_param;
  vs_INTERP0 = vs_INTERP0_param;
  vs_INTERP3 = vs_INTERP3_param;
  vs_INTERP4 = vs_INTERP4_param;
  vs_INTERP2 = vs_INTERP2_param;
  vs_INTERP5 = vs_INTERP5_param;
  vs_INTERP9 = vs_INTERP9_param;
  main_1();
  return main_out(SV_Target0, SV_Target1);
}

