type Arr = array<vec4<f32>, 2u>;

struct UnityPerDraw {
  unity_ObjectToWorld : mat4x4<f32>,
  unity_WorldToObject : mat4x4<f32>,
  unity_LODFade : vec4<f32>,
  unity_WorldTransformParams : vec4<f32>,
  unity_RenderingLayer : vec4<f32>,
  unity_LightData : vec4<f32>,
  unity_LightIndices : Arr,
  unity_ProbesOcclusion : vec4<f32>,
  unity_SpecCube0_HDR : vec4<f32>,
  unity_SpecCube1_HDR : vec4<f32>,
  unity_SpecCube0_BoxMax : vec4<f32>,
  unity_SpecCube0_BoxMin : vec4<f32>,
  unity_SpecCube0_ProbePosition : vec4<f32>,
  unity_SpecCube1_BoxMax : vec4<f32>,
  unity_SpecCube1_BoxMin : vec4<f32>,
  unity_SpecCube1_ProbePosition : vec4<f32>,
  unity_LightmapST : vec4<f32>,
  unity_DynamicLightmapST : vec4<f32>,
  unity_SHAr : vec4<f32>,
  unity_SHAg : vec4<f32>,
  unity_SHAb : vec4<f32>,
  unity_SHBr : vec4<f32>,
  unity_SHBg : vec4<f32>,
  unity_SHBb : vec4<f32>,
  unity_SHC : vec4<f32>,
  unity_RendererBounds_Min : vec4<f32>,
  unity_RendererBounds_Max : vec4<f32>,
  unity_MatrixPreviousM : mat4x4<f32>,
  unity_MatrixPreviousMI : mat4x4<f32>,
  unity_MotionVectorsParams : vec4<f32>,
  unity_SpriteColor : vec4<f32>,
  unity_SpriteProps : vec4<f32>,
}

struct PGlobals {
  x_ScaledScreenParams : vec4<f32>,
  x_GlobalMipBias : vec2<f32>,
  x_AlphaToMaskAvailable : f32,
  @size(4)
  padding : u32,
  x_MainLightPosition : vec4<f32>,
  x_MainLightColor : vec4<f32>,
  x_AmbientOcclusionParam : vec4<f32>,
  x_AdditionalLightsCount : vec4<f32>,
  x_RenderingLayerMaxInt : u32,
  x_RenderingLayerRcpMaxInt : f32,
  @size(8)
  padding_1 : u32,
  x_WorldSpaceCameraPos : vec3<f32>,
  @size(4)
  padding_2 : u32,
  x_ScreenParams : vec4<f32>,
  unity_OrthoParams : vec4<f32>,
  x_ScaleBiasRt : vec4<f32>,
  unity_MatrixV : mat4x4<f32>,
}

struct UnityPerMaterial {
  Texture2D_B222E8F_TexelSize : vec4<f32>,
  Color_C30C7CA3 : vec4<f32>,
  Texture2D_D9BFD5F1_TexelSize : vec4<f32>,
}

type Arr_1 = array<mat4x4<f32>, 5u>;

struct MainLightShadows {
  x_MainLightWorldToShadow : Arr_1,
  x_CascadeShadowSplitSpheres0 : vec4<f32>,
  x_CascadeShadowSplitSpheres1 : vec4<f32>,
  x_CascadeShadowSplitSpheres2 : vec4<f32>,
  x_CascadeShadowSplitSpheres3 : vec4<f32>,
  x_CascadeShadowSplitSphereRadii : vec4<f32>,
  x_MainLightShadowOffset0 : vec4<f32>,
  x_MainLightShadowOffset1 : vec4<f32>,
  x_MainLightShadowParams : vec4<f32>,
  x_MainLightShadowmapSize : vec4<f32>,
}

struct strided_arr {
  @size(16)
  el : f32,
}

type Arr_2 = array<strided_arr, 8u>;

struct LightCookies {
  x_MainLightWorldToLight : mat4x4<f32>,
  x_AdditionalLightsCookieEnableBits : Arr_2,
  x_MainLightCookieTextureFormat : f32,
  x_AdditionalLightsCookieAtlasTextureFormat : f32,
}

type Arr_3 = array<vec4<f32>, 256u>;

type Arr_4 = array<vec4<f32>, 256u>;

type Arr_5 = array<vec4<f32>, 256u>;

type Arr_6 = array<vec4<f32>, 256u>;

type Arr_7 = array<vec4<f32>, 256u>;

struct strided_arr_1 {
  @size(16)
  el : f32,
}

type Arr_8 = array<strided_arr_1, 256u>;

type Arr_9 = array<vec4<f32>, 256u>;

type Arr_10 = array<strided_arr_1, 256u>;

struct AdditionalLights {
  x_AdditionalLightsPosition : Arr_9,
  x_AdditionalLightsColor : Arr_9,
  x_AdditionalLightsAttenuation : Arr_9,
  x_AdditionalLightsSpotDir : Arr_9,
  x_AdditionalLightsOcclusionProbes : Arr_9,
  x_AdditionalLightsLayerMasks : Arr_10,
}

type Arr_11 = array<mat4x4<f32>, 256u>;

struct AdditionalLightsCookies {
  x_AdditionalLightsWorldToLights : Arr_11,
  x_AdditionalLightsCookieAtlasUVRects : Arr_9,
  x_AdditionalLightsLightTypes : Arr_10,
}

var<private> gl_FragCoord : vec4<f32>;

var<private> vs_INTERP1 : vec3<f32>;

var<private> vs_INTERP2 : vec4<f32>;

@group(1) @binding(2) var<uniform> x_95 : UnityPerDraw;

@group(1) @binding(0) var<uniform> x_158 : PGlobals;

var<private> vs_INTERP0 : vec3<f32>;

@group(0) @binding(6) var Texture2D_B222E8F : texture_2d<f32>;

@group(0) @binding(14) var samplerTexture2D_B222E8F : sampler;

var<private> vs_INTERP3 : vec4<f32>;

@group(1) @binding(6) var<uniform> x_277 : UnityPerMaterial;

@group(0) @binding(7) var Texture2D_D9BFD5F1 : texture_2d<f32>;

@group(0) @binding(15) var samplerTexture2D_D9BFD5F1 : sampler;

var<private> vs_INTERP4 : vec4<f32>;

@group(1) @binding(3) var<uniform> x_378 : MainLightShadows;

@group(0) @binding(3) var x_MainLightShadowmapTexture : texture_depth_2d;

@group(0) @binding(11) var sampler_MainLightShadowmapTexture : sampler_comparison;

@group(0) @binding(1) var unity_Lightmap : texture_2d<f32>;

@group(0) @binding(9) var samplerunity_Lightmap : sampler;

var<private> vs_INTERP5 : vec2<f32>;

@group(0) @binding(2) var x_ScreenSpaceOcclusionTexture : texture_2d<f32>;

@group(0) @binding(10) var sampler_ScreenSpaceOcclusionTexture : sampler;

var<private> vs_INTERP9 : vec4<f32>;

@group(1) @binding(4) var<uniform> x_3325 : LightCookies;

@group(0) @binding(4) var x_MainLightCookieTexture : texture_2d<f32>;

@group(0) @binding(12) var sampler_MainLightCookieTexture : sampler;

@group(0) @binding(0) var unity_SpecCube0 : texture_cube<f32>;

@group(0) @binding(8) var samplerunity_SpecCube0 : sampler;

@group(1) @binding(1) var<uniform> x_3832 : AdditionalLights;

@group(1) @binding(5) var<uniform> x_3942 : AdditionalLightsCookies;

@group(0) @binding(5) var x_AdditionalLightsCookieAtlasTexture : texture_2d<f32>;

@group(0) @binding(13) var sampler_AdditionalLightsCookieAtlasTexture : sampler;

var<private> SV_Target0 : vec4<f32>;

var<private> SV_Target1 : vec4<f32>;

fn int_bitfieldInsert_i1_i1_i1_i1_(base : ptr<function, i32>, insert : ptr<function, i32>, offset_1 : ptr<function, i32>, bits : ptr<function, i32>) -> i32 {
  var mask : u32;
  let x_19 : i32 = *(bits);
  let x_23 : i32 = *(offset_1);
  mask = (~((4294967295u << bitcast<u32>(x_19))) << bitcast<u32>(x_23));
  let x_26 : i32 = *(base);
  let x_28 : u32 = mask;
  let x_31 : i32 = *(insert);
  let x_33 : i32 = *(offset_1);
  let x_36 : u32 = mask;
  return bitcast<i32>(((bitcast<u32>(x_26) & ~(x_28)) | ((bitcast<u32>(x_31) << bitcast<u32>(x_33)) & x_36)));
}

fn main_1() {
  var hlslcc_FragCoord : vec4<f32>;
  var u_xlat0 : vec3<f32>;
  var u_xlatb22 : vec2<bool>;
  var u_xlat22 : vec3<f32>;
  var u_xlat1 : vec3<f32>;
  var u_xlat2 : vec3<f32>;
  var u_xlat3 : vec4<f32>;
  var u_xlatb0 : bool;
  var u_xlat4 : vec3<f32>;
  var u_xlat67 : f32;
  var u_xlat5 : vec3<f32>;
  var x_184 : f32;
  var x_197 : f32;
  var x_209 : f32;
  var u_xlat6 : vec4<f32>;
  var u_xlat7 : vec4<f32>;
  var u_xlat8 : vec4<f32>;
  var u_xlat9 : vec4<f32>;
  var u_xlat30 : vec3<f32>;
  var u_xlatb67 : bool;
  var txVec0 : vec3<f32>;
  var txVec1 : vec3<f32>;
  var txVec2 : vec3<f32>;
  var txVec3 : vec3<f32>;
  var u_xlatb68 : bool;
  var u_xlat47 : vec2<f32>;
  var u_xlat10 : vec4<f32>;
  var u_xlat54 : vec2<f32>;
  var u_xlat11 : vec4<f32>;
  var u_xlat12 : vec4<f32>;
  var u_xlat13 : vec4<f32>;
  var u_xlat14 : vec4<f32>;
  var u_xlat15 : vec4<f32>;
  var u_xlat16 : vec4<f32>;
  var u_xlat68 : f32;
  var txVec4 : vec3<f32>;
  var txVec5 : vec3<f32>;
  var u_xlat25 : f32;
  var txVec6 : vec3<f32>;
  var txVec7 : vec3<f32>;
  var txVec8 : vec3<f32>;
  var txVec9 : vec3<f32>;
  var txVec10 : vec3<f32>;
  var txVec11 : vec3<f32>;
  var txVec12 : vec3<f32>;
  var u_xlat31 : vec3<f32>;
  var u_xlat17 : vec4<f32>;
  var u_xlat18 : vec4<f32>;
  var u_xlat32 : vec2<f32>;
  var u_xlat60 : vec2<f32>;
  var u_xlat55 : vec2<f32>;
  var u_xlat19 : vec4<f32>;
  var u_xlat20 : vec4<f32>;
  var u_xlat21 : vec4<f32>;
  var txVec13 : vec3<f32>;
  var txVec14 : vec3<f32>;
  var u_xlat70 : f32;
  var txVec15 : vec3<f32>;
  var txVec16 : vec3<f32>;
  var txVec17 : vec3<f32>;
  var txVec18 : vec3<f32>;
  var txVec19 : vec3<f32>;
  var txVec20 : vec3<f32>;
  var txVec21 : vec3<f32>;
  var txVec22 : vec3<f32>;
  var txVec23 : vec3<f32>;
  var txVec24 : vec3<f32>;
  var txVec25 : vec3<f32>;
  var txVec26 : vec3<f32>;
  var txVec27 : vec3<f32>;
  var txVec28 : vec3<f32>;
  var txVec29 : vec3<f32>;
  var u_xlatb24 : bool;
  var u_xlatb46 : bool;
  var u_xlat23 : vec3<f32>;
  var u_xlat24 : f32;
  var x_1720 : f32;
  var u_xlatu3 : vec3<u32>;
  var u_xlatu46 : u32;
  var u_xlatu68 : u32;
  var u_xlati46 : i32;
  var u_xlat46 : vec2<f32>;
  var param : i32;
  var param_1 : i32;
  var param_2 : i32;
  var param_3 : i32;
  var x_1845 : f32;
  var x_1898 : f32;
  var u_xlat69 : f32;
  var u_xlat26 : vec2<f32>;
  var u_xlat48 : f32;
  var txVec30 : vec3<f32>;
  var txVec31 : vec3<f32>;
  var txVec32 : vec3<f32>;
  var txVec33 : vec3<f32>;
  var u_xlatb71 : bool;
  var u_xlat51 : vec2<f32>;
  var u_xlat53 : vec2<f32>;
  var u_xlat71 : f32;
  var txVec34 : vec3<f32>;
  var u_xlat72 : f32;
  var txVec35 : vec3<f32>;
  var txVec36 : vec3<f32>;
  var txVec37 : vec3<f32>;
  var txVec38 : vec3<f32>;
  var txVec39 : vec3<f32>;
  var txVec40 : vec3<f32>;
  var txVec41 : vec3<f32>;
  var txVec42 : vec3<f32>;
  var u_xlat59 : vec2<f32>;
  var txVec43 : vec3<f32>;
  var txVec44 : vec3<f32>;
  var txVec45 : vec3<f32>;
  var txVec46 : vec3<f32>;
  var txVec47 : vec3<f32>;
  var txVec48 : vec3<f32>;
  var txVec49 : vec3<f32>;
  var txVec50 : vec3<f32>;
  var txVec51 : vec3<f32>;
  var txVec52 : vec3<f32>;
  var txVec53 : vec3<f32>;
  var txVec54 : vec3<f32>;
  var txVec55 : vec3<f32>;
  var txVec56 : vec3<f32>;
  var txVec57 : vec3<f32>;
  var txVec58 : vec3<f32>;
  var txVec59 : vec3<f32>;
  var u_xlatb2 : vec4<bool>;
  var x_3275 : f32;
  var u_xlatb8 : vec2<bool>;
  var x_3408 : f32;
  var x_3420 : vec3<f32>;
  var u_xlatu0 : u32;
  var u_xlatu_loop_1 : u32;
  var u_xlatu71 : u32;
  var u_xlati72 : i32;
  var indexable : array<vec4<u32>, 4u>;
  var u_xlat73 : f32;
  var u_xlat74 : f32;
  var u_xlatu74 : u32;
  var u_xlati75 : i32;
  var u_xlati74 : i32;
  var u_xlati76 : i32;
  var u_xlatb74 : bool;
  var u_xlatb55 : vec2<bool>;
  var x_4234 : f32;
  var x_4247 : f32;
  var x_4299 : f32;
  var x_4310 : vec3<f32>;
  var u_xlat_precise_vec4 : vec4<f32>;
  var u_xlat_precise_ivec4 : vec4<i32>;
  var u_xlat_precise_bvec4 : vec4<bool>;
  var u_xlat_precise_uvec4 : vec4<u32>;
  let x_49 : vec4<f32> = gl_FragCoord;
  let x_50 : vec3<f32> = vec3<f32>(x_49.x, x_49.y, x_49.z);
  let x_55 : f32 = gl_FragCoord.w;
  hlslcc_FragCoord = vec4<f32>(x_50.x, x_50.y, x_50.z, (1.0f / x_55));
  let x_65 : vec3<f32> = vs_INTERP1;
  let x_66 : vec3<f32> = vs_INTERP1;
  u_xlat0.x = dot(x_65, x_66);
  let x_72 : f32 = u_xlat0.x;
  u_xlat0.x = sqrt(x_72);
  let x_76 : f32 = u_xlat0.x;
  u_xlat0.x = (1.0f / x_76);
  let x_86 : f32 = vs_INTERP2.w;
  u_xlatb22.x = (0.0f < x_86);
  let x_99 : f32 = x_95.unity_WorldTransformParams.w;
  u_xlatb22.y = (x_99 >= 0.0f);
  let x_105 : bool = u_xlatb22.x;
  u_xlat22.x = select(-1.0f, 1.0f, x_105);
  let x_110 : bool = u_xlatb22.y;
  u_xlat22.y = select(-1.0f, 1.0f, x_110);
  let x_114 : f32 = u_xlat22.y;
  let x_116 : f32 = u_xlat22.x;
  u_xlat22.x = (x_114 * x_116);
  let x_120 : vec3<f32> = vs_INTERP1;
  let x_122 : vec4<f32> = vs_INTERP2;
  u_xlat1 = (vec3<f32>(x_120.z, x_120.x, x_120.y) * vec3<f32>(x_122.y, x_122.z, x_122.x));
  let x_125 : vec3<f32> = vs_INTERP1;
  let x_127 : vec4<f32> = vs_INTERP2;
  let x_130 : vec3<f32> = u_xlat1;
  u_xlat1 = ((vec3<f32>(x_125.y, x_125.z, x_125.x) * vec3<f32>(x_127.z, x_127.x, x_127.y)) + -(x_130));
  let x_133 : vec3<f32> = u_xlat22;
  let x_135 : vec3<f32> = u_xlat1;
  u_xlat22 = (vec3<f32>(x_133.x, x_133.x, x_133.x) * x_135);
  let x_137 : vec3<f32> = u_xlat0;
  let x_139 : vec3<f32> = vs_INTERP1;
  u_xlat1 = (vec3<f32>(x_137.x, x_137.x, x_137.x) * x_139);
  let x_142 : vec3<f32> = u_xlat0;
  let x_144 : vec4<f32> = vs_INTERP2;
  u_xlat2 = (vec3<f32>(x_142.x, x_142.x, x_142.x) * vec3<f32>(x_144.x, x_144.y, x_144.z));
  let x_148 : vec3<f32> = u_xlat22;
  let x_149 : vec3<f32> = u_xlat0;
  let x_151 : vec3<f32> = (x_148 * vec3<f32>(x_149.x, x_149.x, x_149.x));
  let x_152 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_151.x, x_151.y, x_151.z, x_152.w);
  let x_161 : f32 = x_158.unity_OrthoParams.w;
  u_xlatb0 = (x_161 == 0.0f);
  let x_165 : vec3<f32> = vs_INTERP0;
  let x_170 : vec3<f32> = x_158.x_WorldSpaceCameraPos;
  u_xlat4 = (-(x_165) + x_170);
  let x_173 : vec3<f32> = u_xlat4;
  let x_174 : vec3<f32> = u_xlat4;
  u_xlat67 = dot(x_173, x_174);
  let x_176 : f32 = u_xlat67;
  u_xlat67 = inverseSqrt(x_176);
  let x_178 : f32 = u_xlat67;
  let x_180 : vec3<f32> = u_xlat4;
  u_xlat4 = (vec3<f32>(x_178, x_178, x_178) * x_180);
  let x_183 : bool = u_xlatb0;
  if (x_183) {
    let x_188 : f32 = u_xlat4.x;
    x_184 = x_188;
  } else {
    let x_193 : f32 = x_158.unity_MatrixV[0i].z;
    x_184 = x_193;
  }
  let x_194 : f32 = x_184;
  u_xlat5.x = x_194;
  let x_196 : bool = u_xlatb0;
  if (x_196) {
    let x_201 : f32 = u_xlat4.y;
    x_197 = x_201;
  } else {
    let x_205 : f32 = x_158.unity_MatrixV[1i].z;
    x_197 = x_205;
  }
  let x_206 : f32 = x_197;
  u_xlat5.y = x_206;
  let x_208 : bool = u_xlatb0;
  if (x_208) {
    let x_213 : f32 = u_xlat4.z;
    x_209 = x_213;
  } else {
    let x_217 : f32 = x_158.unity_MatrixV[2i].z;
    x_209 = x_217;
  }
  let x_218 : f32 = x_209;
  u_xlat5.z = x_218;
  let x_220 : vec3<f32> = u_xlat5;
  let x_224 : vec4<f32> = x_95.unity_WorldToObject[1i];
  u_xlat4 = (vec3<f32>(x_220.y, x_220.y, x_220.y) * vec3<f32>(x_224.x, x_224.y, x_224.z));
  let x_228 : vec4<f32> = x_95.unity_WorldToObject[0i];
  let x_230 : vec3<f32> = u_xlat5;
  let x_233 : vec3<f32> = u_xlat4;
  u_xlat4 = ((vec3<f32>(x_228.x, x_228.y, x_228.z) * vec3<f32>(x_230.x, x_230.x, x_230.x)) + x_233);
  let x_236 : vec4<f32> = x_95.unity_WorldToObject[2i];
  let x_238 : vec3<f32> = u_xlat5;
  let x_241 : vec3<f32> = u_xlat4;
  u_xlat4 = ((vec3<f32>(x_236.x, x_236.y, x_236.z) * vec3<f32>(x_238.z, x_238.z, x_238.z)) + x_241);
  let x_243 : vec3<f32> = u_xlat4;
  let x_244 : vec3<f32> = u_xlat4;
  u_xlat0.x = dot(x_243, x_244);
  let x_248 : f32 = u_xlat0.x;
  u_xlat0.x = inverseSqrt(x_248);
  let x_251 : vec3<f32> = u_xlat0;
  let x_253 : vec3<f32> = u_xlat4;
  u_xlat4 = (vec3<f32>(x_251.x, x_251.x, x_251.x) * x_253);
  let x_267 : vec4<f32> = vs_INTERP3;
  let x_270 : f32 = x_158.x_GlobalMipBias.x;
  let x_271 : vec4<f32> = textureSampleBias(Texture2D_B222E8F, samplerTexture2D_B222E8F, vec2<f32>(x_267.x, x_267.y), x_270);
  u_xlat6 = x_271;
  let x_273 : vec4<f32> = u_xlat6;
  let x_279 : vec4<f32> = x_277.Color_C30C7CA3;
  let x_281 : vec3<f32> = (vec3<f32>(x_273.x, x_273.y, x_273.z) * vec3<f32>(x_279.x, x_279.y, x_279.z));
  let x_282 : vec4<f32> = u_xlat7;
  u_xlat7 = vec4<f32>(x_281.x, x_281.y, x_281.z, x_282.w);
  let x_290 : vec4<f32> = vs_INTERP3;
  let x_293 : f32 = x_158.x_GlobalMipBias.x;
  let x_294 : vec4<f32> = textureSampleBias(Texture2D_D9BFD5F1, samplerTexture2D_D9BFD5F1, vec2<f32>(x_290.x, x_290.y), x_293);
  u_xlat8 = vec4<f32>(x_294.w, x_294.x, x_294.y, x_294.z);
  let x_297 : vec4<f32> = u_xlat8;
  u_xlat9 = ((vec4<f32>(x_297.y, x_297.z, x_297.w, x_297.x) * vec4<f32>(2.0f, 2.0f, 2.0f, 2.0f)) + vec4<f32>(-1.0f, -1.0f, -1.0f, -1.0f));
  let x_304 : vec4<f32> = u_xlat9;
  let x_305 : vec4<f32> = u_xlat9;
  u_xlat0.x = dot(x_304, x_305);
  let x_309 : f32 = u_xlat0.x;
  u_xlat0.x = inverseSqrt(x_309);
  let x_313 : vec3<f32> = u_xlat0;
  let x_315 : vec4<f32> = u_xlat9;
  u_xlat30 = (vec3<f32>(x_313.x, x_313.x, x_313.x) * vec3<f32>(x_315.x, x_315.y, x_315.z));
  let x_320 : f32 = vs_INTERP4.y;
  u_xlat0.x = (x_320 * 200.0f);
  let x_325 : f32 = u_xlat0.x;
  u_xlat0.x = min(x_325, 1.0f);
  let x_328 : vec3<f32> = u_xlat0;
  let x_330 : vec4<f32> = u_xlat6;
  let x_332 : vec3<f32> = (vec3<f32>(x_328.x, x_328.x, x_328.x) * vec3<f32>(x_330.x, x_330.y, x_330.z));
  let x_333 : vec4<f32> = u_xlat6;
  u_xlat6 = vec4<f32>(x_332.x, x_332.y, x_332.z, x_333.w);
  let x_335 : vec4<f32> = u_xlat3;
  let x_337 : vec3<f32> = u_xlat30;
  let x_339 : vec3<f32> = (vec3<f32>(x_335.x, x_335.y, x_335.z) * vec3<f32>(x_337.y, x_337.y, x_337.y));
  let x_340 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_339.x, x_339.y, x_339.z, x_340.w);
  let x_342 : vec3<f32> = u_xlat30;
  let x_344 : vec3<f32> = u_xlat2;
  let x_346 : vec4<f32> = u_xlat3;
  u_xlat2 = ((vec3<f32>(x_342.x, x_342.x, x_342.x) * x_344) + vec3<f32>(x_346.x, x_346.y, x_346.z));
  let x_349 : vec3<f32> = u_xlat30;
  let x_351 : vec3<f32> = u_xlat1;
  let x_353 : vec3<f32> = u_xlat2;
  u_xlat1 = ((vec3<f32>(x_349.z, x_349.z, x_349.z) * x_351) + x_353);
  let x_355 : vec3<f32> = u_xlat1;
  let x_356 : vec3<f32> = u_xlat1;
  u_xlat0.x = dot(x_355, x_356);
  let x_360 : f32 = u_xlat0.x;
  u_xlat0.x = max(x_360, 1.17549435e-37f);
  let x_365 : f32 = u_xlat0.x;
  u_xlat0.x = inverseSqrt(x_365);
  let x_368 : vec3<f32> = u_xlat0;
  let x_370 : vec3<f32> = u_xlat1;
  u_xlat1 = (vec3<f32>(x_368.x, x_368.x, x_368.x) * x_370);
  let x_372 : vec3<f32> = vs_INTERP0;
  let x_380 : vec4<f32> = x_378.x_MainLightWorldToShadow[0i][1i];
  u_xlat2 = (vec3<f32>(x_372.y, x_372.y, x_372.y) * vec3<f32>(x_380.x, x_380.y, x_380.z));
  let x_384 : vec4<f32> = x_378.x_MainLightWorldToShadow[0i][0i];
  let x_386 : vec3<f32> = vs_INTERP0;
  let x_389 : vec3<f32> = u_xlat2;
  u_xlat2 = ((vec3<f32>(x_384.x, x_384.y, x_384.z) * vec3<f32>(x_386.x, x_386.x, x_386.x)) + x_389);
  let x_392 : vec4<f32> = x_378.x_MainLightWorldToShadow[0i][2i];
  let x_394 : vec3<f32> = vs_INTERP0;
  let x_397 : vec3<f32> = u_xlat2;
  u_xlat2 = ((vec3<f32>(x_392.x, x_392.y, x_392.z) * vec3<f32>(x_394.z, x_394.z, x_394.z)) + x_397);
  let x_399 : vec3<f32> = u_xlat2;
  let x_401 : vec4<f32> = x_378.x_MainLightWorldToShadow[0i][3i];
  u_xlat2 = (x_399 + vec3<f32>(x_401.x, x_401.y, x_401.z));
  let x_406 : f32 = x_378.x_MainLightShadowParams.y;
  u_xlatb0 = (0.0f < x_406);
  let x_408 : bool = u_xlatb0;
  if (x_408) {
    let x_413 : f32 = x_378.x_MainLightShadowParams.y;
    u_xlatb67 = (x_413 == 1.0f);
    let x_415 : bool = u_xlatb67;
    if (x_415) {
      let x_418 : vec3<f32> = u_xlat2;
      let x_422 : vec4<f32> = x_378.x_MainLightShadowOffset0;
      u_xlat3 = (vec4<f32>(x_418.x, x_418.y, x_418.x, x_418.y) + x_422);
      let x_425 : vec4<f32> = u_xlat3;
      let x_426 : vec2<f32> = vec2<f32>(x_425.x, x_425.y);
      let x_428 : f32 = u_xlat2.z;
      txVec0 = vec3<f32>(x_426.x, x_426.y, x_428);
      let x_440 : vec3<f32> = txVec0;
      let x_442 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_440.xy, x_440.z);
      u_xlat9.x = x_442;
      let x_445 : vec4<f32> = u_xlat3;
      let x_446 : vec2<f32> = vec2<f32>(x_445.z, x_445.w);
      let x_448 : f32 = u_xlat2.z;
      txVec1 = vec3<f32>(x_446.x, x_446.y, x_448);
      let x_455 : vec3<f32> = txVec1;
      let x_457 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_455.xy, x_455.z);
      u_xlat9.y = x_457;
      let x_459 : vec3<f32> = u_xlat2;
      let x_463 : vec4<f32> = x_378.x_MainLightShadowOffset1;
      u_xlat3 = (vec4<f32>(x_459.x, x_459.y, x_459.x, x_459.y) + x_463);
      let x_466 : vec4<f32> = u_xlat3;
      let x_467 : vec2<f32> = vec2<f32>(x_466.x, x_466.y);
      let x_469 : f32 = u_xlat2.z;
      txVec2 = vec3<f32>(x_467.x, x_467.y, x_469);
      let x_476 : vec3<f32> = txVec2;
      let x_478 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_476.xy, x_476.z);
      u_xlat9.z = x_478;
      let x_481 : vec4<f32> = u_xlat3;
      let x_482 : vec2<f32> = vec2<f32>(x_481.z, x_481.w);
      let x_484 : f32 = u_xlat2.z;
      txVec3 = vec3<f32>(x_482.x, x_482.y, x_484);
      let x_491 : vec3<f32> = txVec3;
      let x_493 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_491.xy, x_491.z);
      u_xlat9.w = x_493;
      let x_495 : vec4<f32> = u_xlat9;
      u_xlat67 = dot(x_495, vec4<f32>(0.25f, 0.25f, 0.25f, 0.25f));
    } else {
      let x_502 : f32 = x_378.x_MainLightShadowParams.y;
      u_xlatb68 = (x_502 == 2.0f);
      let x_504 : bool = u_xlatb68;
      if (x_504) {
        let x_507 : vec3<f32> = u_xlat2;
        let x_510 : vec4<f32> = x_378.x_MainLightShadowmapSize;
        let x_515 : vec2<f32> = ((vec2<f32>(x_507.x, x_507.y) * vec2<f32>(x_510.z, x_510.w)) + vec2<f32>(0.5f, 0.5f));
        let x_516 : vec4<f32> = u_xlat3;
        u_xlat3 = vec4<f32>(x_515.x, x_515.y, x_516.z, x_516.w);
        let x_518 : vec4<f32> = u_xlat3;
        let x_520 : vec2<f32> = floor(vec2<f32>(x_518.x, x_518.y));
        let x_521 : vec4<f32> = u_xlat3;
        u_xlat3 = vec4<f32>(x_520.x, x_520.y, x_521.z, x_521.w);
        let x_525 : vec3<f32> = u_xlat2;
        let x_528 : vec4<f32> = x_378.x_MainLightShadowmapSize;
        let x_531 : vec4<f32> = u_xlat3;
        u_xlat47 = ((vec2<f32>(x_525.x, x_525.y) * vec2<f32>(x_528.z, x_528.w)) + -(vec2<f32>(x_531.x, x_531.y)));
        let x_535 : vec2<f32> = u_xlat47;
        u_xlat9 = (vec4<f32>(x_535.x, x_535.x, x_535.y, x_535.y) + vec4<f32>(0.5f, 1.0f, 0.5f, 1.0f));
        let x_540 : vec4<f32> = u_xlat9;
        let x_542 : vec4<f32> = u_xlat9;
        u_xlat10 = (vec4<f32>(x_540.x, x_540.x, x_540.z, x_540.z) * vec4<f32>(x_542.x, x_542.x, x_542.z, x_542.z));
        let x_545 : vec4<f32> = u_xlat10;
        let x_549 : vec2<f32> = (vec2<f32>(x_545.y, x_545.w) * vec2<f32>(0.079999998f, 0.079999998f));
        let x_550 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_549.x, x_550.y, x_549.y, x_550.w);
        let x_552 : vec4<f32> = u_xlat10;
        let x_555 : vec2<f32> = u_xlat47;
        let x_557 : vec2<f32> = ((vec2<f32>(x_552.x, x_552.z) * vec2<f32>(0.5f, 0.5f)) + -(x_555));
        let x_558 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_557.x, x_557.y, x_558.z, x_558.w);
        let x_561 : vec2<f32> = u_xlat47;
        u_xlat54 = (-(x_561) + vec2<f32>(1.0f, 1.0f));
        let x_566 : vec2<f32> = u_xlat47;
        let x_568 : vec2<f32> = min(x_566, vec2<f32>(0.0f, 0.0f));
        let x_569 : vec4<f32> = u_xlat11;
        u_xlat11 = vec4<f32>(x_568.x, x_568.y, x_569.z, x_569.w);
        let x_571 : vec4<f32> = u_xlat11;
        let x_574 : vec4<f32> = u_xlat11;
        let x_577 : vec2<f32> = u_xlat54;
        let x_578 : vec2<f32> = ((-(vec2<f32>(x_571.x, x_571.y)) * vec2<f32>(x_574.x, x_574.y)) + x_577);
        let x_579 : vec4<f32> = u_xlat11;
        u_xlat11 = vec4<f32>(x_578.x, x_578.y, x_579.z, x_579.w);
        let x_581 : vec2<f32> = u_xlat47;
        u_xlat47 = max(x_581, vec2<f32>(0.0f, 0.0f));
        let x_583 : vec2<f32> = u_xlat47;
        let x_585 : vec2<f32> = u_xlat47;
        let x_587 : vec4<f32> = u_xlat9;
        u_xlat47 = ((-(x_583) * x_585) + vec2<f32>(x_587.y, x_587.w));
        let x_590 : vec4<f32> = u_xlat11;
        let x_592 : vec2<f32> = (vec2<f32>(x_590.x, x_590.y) + vec2<f32>(1.0f, 1.0f));
        let x_593 : vec4<f32> = u_xlat11;
        u_xlat11 = vec4<f32>(x_592.x, x_592.y, x_593.z, x_593.w);
        let x_595 : vec2<f32> = u_xlat47;
        u_xlat47 = (x_595 + vec2<f32>(1.0f, 1.0f));
        let x_598 : vec4<f32> = u_xlat10;
        let x_602 : vec2<f32> = (vec2<f32>(x_598.x, x_598.y) * vec2<f32>(0.159999996f, 0.159999996f));
        let x_603 : vec4<f32> = u_xlat12;
        u_xlat12 = vec4<f32>(x_602.x, x_602.y, x_603.z, x_603.w);
        let x_605 : vec2<f32> = u_xlat54;
        let x_606 : vec2<f32> = (x_605 * vec2<f32>(0.159999996f, 0.159999996f));
        let x_607 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_606.x, x_606.y, x_607.z, x_607.w);
        let x_609 : vec4<f32> = u_xlat11;
        let x_611 : vec2<f32> = (vec2<f32>(x_609.x, x_609.y) * vec2<f32>(0.159999996f, 0.159999996f));
        let x_612 : vec4<f32> = u_xlat11;
        u_xlat11 = vec4<f32>(x_611.x, x_611.y, x_612.z, x_612.w);
        let x_615 : vec2<f32> = u_xlat47;
        let x_616 : vec2<f32> = (x_615 * vec2<f32>(0.159999996f, 0.159999996f));
        let x_617 : vec4<f32> = u_xlat13;
        u_xlat13 = vec4<f32>(x_616.x, x_616.y, x_617.z, x_617.w);
        let x_619 : vec4<f32> = u_xlat9;
        u_xlat47 = (vec2<f32>(x_619.y, x_619.w) * vec2<f32>(0.159999996f, 0.159999996f));
        let x_623 : f32 = u_xlat11.x;
        u_xlat12.z = x_623;
        let x_626 : f32 = u_xlat47.x;
        u_xlat12.w = x_626;
        let x_629 : f32 = u_xlat13.x;
        u_xlat10.z = x_629;
        let x_632 : f32 = u_xlat9.x;
        u_xlat10.w = x_632;
        let x_635 : vec4<f32> = u_xlat10;
        let x_637 : vec4<f32> = u_xlat12;
        u_xlat14 = (vec4<f32>(x_635.z, x_635.w, x_635.x, x_635.z) + vec4<f32>(x_637.z, x_637.w, x_637.x, x_637.z));
        let x_641 : f32 = u_xlat12.y;
        u_xlat11.z = x_641;
        let x_644 : f32 = u_xlat47.y;
        u_xlat11.w = x_644;
        let x_647 : f32 = u_xlat10.y;
        u_xlat13.z = x_647;
        let x_650 : f32 = u_xlat9.z;
        u_xlat13.w = x_650;
        let x_652 : vec4<f32> = u_xlat11;
        let x_654 : vec4<f32> = u_xlat13;
        let x_656 : vec3<f32> = (vec3<f32>(x_652.z, x_652.y, x_652.w) + vec3<f32>(x_654.z, x_654.y, x_654.w));
        let x_657 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_656.x, x_656.y, x_656.z, x_657.w);
        let x_659 : vec4<f32> = u_xlat10;
        let x_661 : vec4<f32> = u_xlat14;
        let x_663 : vec3<f32> = (vec3<f32>(x_659.x, x_659.z, x_659.w) / vec3<f32>(x_661.z, x_661.w, x_661.y));
        let x_664 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_663.x, x_663.y, x_663.z, x_664.w);
        let x_666 : vec4<f32> = u_xlat10;
        let x_672 : vec3<f32> = (vec3<f32>(x_666.x, x_666.y, x_666.z) + vec3<f32>(-2.5f, -0.5f, 1.5f));
        let x_673 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_672.x, x_672.y, x_672.z, x_673.w);
        let x_675 : vec4<f32> = u_xlat13;
        let x_677 : vec4<f32> = u_xlat9;
        let x_679 : vec3<f32> = (vec3<f32>(x_675.z, x_675.y, x_675.w) / vec3<f32>(x_677.x, x_677.y, x_677.z));
        let x_680 : vec4<f32> = u_xlat11;
        u_xlat11 = vec4<f32>(x_679.x, x_679.y, x_679.z, x_680.w);
        let x_682 : vec4<f32> = u_xlat11;
        let x_684 : vec3<f32> = (vec3<f32>(x_682.x, x_682.y, x_682.z) + vec3<f32>(-2.5f, -0.5f, 1.5f));
        let x_685 : vec4<f32> = u_xlat11;
        u_xlat11 = vec4<f32>(x_684.x, x_684.y, x_684.z, x_685.w);
        let x_687 : vec4<f32> = u_xlat10;
        let x_690 : vec4<f32> = x_378.x_MainLightShadowmapSize;
        let x_692 : vec3<f32> = (vec3<f32>(x_687.y, x_687.x, x_687.z) * vec3<f32>(x_690.x, x_690.x, x_690.x));
        let x_693 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_692.x, x_692.y, x_692.z, x_693.w);
        let x_695 : vec4<f32> = u_xlat11;
        let x_698 : vec4<f32> = x_378.x_MainLightShadowmapSize;
        let x_700 : vec3<f32> = (vec3<f32>(x_695.x, x_695.y, x_695.z) * vec3<f32>(x_698.y, x_698.y, x_698.y));
        let x_701 : vec4<f32> = u_xlat11;
        u_xlat11 = vec4<f32>(x_700.x, x_700.y, x_700.z, x_701.w);
        let x_704 : f32 = u_xlat11.x;
        u_xlat10.w = x_704;
        let x_706 : vec4<f32> = u_xlat3;
        let x_709 : vec4<f32> = x_378.x_MainLightShadowmapSize;
        let x_712 : vec4<f32> = u_xlat10;
        u_xlat12 = ((vec4<f32>(x_706.x, x_706.y, x_706.x, x_706.y) * vec4<f32>(x_709.x, x_709.y, x_709.x, x_709.y)) + vec4<f32>(x_712.y, x_712.w, x_712.x, x_712.w));
        let x_715 : vec4<f32> = u_xlat3;
        let x_718 : vec4<f32> = x_378.x_MainLightShadowmapSize;
        let x_721 : vec4<f32> = u_xlat10;
        u_xlat47 = ((vec2<f32>(x_715.x, x_715.y) * vec2<f32>(x_718.x, x_718.y)) + vec2<f32>(x_721.z, x_721.w));
        let x_725 : f32 = u_xlat10.y;
        u_xlat11.w = x_725;
        let x_727 : vec4<f32> = u_xlat11;
        let x_728 : vec2<f32> = vec2<f32>(x_727.y, x_727.z);
        let x_729 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_729.x, x_728.x, x_729.z, x_728.y);
        let x_731 : vec4<f32> = u_xlat3;
        let x_734 : vec4<f32> = x_378.x_MainLightShadowmapSize;
        let x_737 : vec4<f32> = u_xlat10;
        u_xlat13 = ((vec4<f32>(x_731.x, x_731.y, x_731.x, x_731.y) * vec4<f32>(x_734.x, x_734.y, x_734.x, x_734.y)) + vec4<f32>(x_737.x, x_737.y, x_737.z, x_737.y));
        let x_740 : vec4<f32> = u_xlat3;
        let x_743 : vec4<f32> = x_378.x_MainLightShadowmapSize;
        let x_746 : vec4<f32> = u_xlat11;
        u_xlat11 = ((vec4<f32>(x_740.x, x_740.y, x_740.x, x_740.y) * vec4<f32>(x_743.x, x_743.y, x_743.x, x_743.y)) + vec4<f32>(x_746.w, x_746.y, x_746.w, x_746.z));
        let x_749 : vec4<f32> = u_xlat3;
        let x_752 : vec4<f32> = x_378.x_MainLightShadowmapSize;
        let x_755 : vec4<f32> = u_xlat10;
        u_xlat10 = ((vec4<f32>(x_749.x, x_749.y, x_749.x, x_749.y) * vec4<f32>(x_752.x, x_752.y, x_752.x, x_752.y)) + vec4<f32>(x_755.x, x_755.w, x_755.z, x_755.w));
        let x_759 : vec4<f32> = u_xlat9;
        let x_761 : vec4<f32> = u_xlat14;
        u_xlat15 = (vec4<f32>(x_759.x, x_759.x, x_759.x, x_759.y) * vec4<f32>(x_761.z, x_761.w, x_761.y, x_761.z));
        let x_765 : vec4<f32> = u_xlat9;
        let x_767 : vec4<f32> = u_xlat14;
        u_xlat16 = (vec4<f32>(x_765.y, x_765.y, x_765.z, x_765.z) * x_767);
        let x_771 : f32 = u_xlat9.z;
        let x_773 : f32 = u_xlat14.y;
        u_xlat68 = (x_771 * x_773);
        let x_776 : vec4<f32> = u_xlat12;
        let x_777 : vec2<f32> = vec2<f32>(x_776.x, x_776.y);
        let x_779 : f32 = u_xlat2.z;
        txVec4 = vec3<f32>(x_777.x, x_777.y, x_779);
        let x_786 : vec3<f32> = txVec4;
        let x_788 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_786.xy, x_786.z);
        u_xlat3.x = x_788;
        let x_791 : vec4<f32> = u_xlat12;
        let x_792 : vec2<f32> = vec2<f32>(x_791.z, x_791.w);
        let x_794 : f32 = u_xlat2.z;
        txVec5 = vec3<f32>(x_792.x, x_792.y, x_794);
        let x_802 : vec3<f32> = txVec5;
        let x_804 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_802.xy, x_802.z);
        u_xlat25 = x_804;
        let x_805 : f32 = u_xlat25;
        let x_807 : f32 = u_xlat15.y;
        u_xlat25 = (x_805 * x_807);
        let x_810 : f32 = u_xlat15.x;
        let x_812 : f32 = u_xlat3.x;
        let x_814 : f32 = u_xlat25;
        u_xlat3.x = ((x_810 * x_812) + x_814);
        let x_818 : vec2<f32> = u_xlat47;
        let x_820 : f32 = u_xlat2.z;
        txVec6 = vec3<f32>(x_818.x, x_818.y, x_820);
        let x_827 : vec3<f32> = txVec6;
        let x_829 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_827.xy, x_827.z);
        u_xlat25 = x_829;
        let x_831 : f32 = u_xlat15.z;
        let x_832 : f32 = u_xlat25;
        let x_835 : f32 = u_xlat3.x;
        u_xlat3.x = ((x_831 * x_832) + x_835);
        let x_839 : vec4<f32> = u_xlat11;
        let x_840 : vec2<f32> = vec2<f32>(x_839.x, x_839.y);
        let x_842 : f32 = u_xlat2.z;
        txVec7 = vec3<f32>(x_840.x, x_840.y, x_842);
        let x_849 : vec3<f32> = txVec7;
        let x_851 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_849.xy, x_849.z);
        u_xlat25 = x_851;
        let x_853 : f32 = u_xlat15.w;
        let x_854 : f32 = u_xlat25;
        let x_857 : f32 = u_xlat3.x;
        u_xlat3.x = ((x_853 * x_854) + x_857);
        let x_861 : vec4<f32> = u_xlat13;
        let x_862 : vec2<f32> = vec2<f32>(x_861.x, x_861.y);
        let x_864 : f32 = u_xlat2.z;
        txVec8 = vec3<f32>(x_862.x, x_862.y, x_864);
        let x_871 : vec3<f32> = txVec8;
        let x_873 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_871.xy, x_871.z);
        u_xlat25 = x_873;
        let x_875 : f32 = u_xlat16.x;
        let x_876 : f32 = u_xlat25;
        let x_879 : f32 = u_xlat3.x;
        u_xlat3.x = ((x_875 * x_876) + x_879);
        let x_883 : vec4<f32> = u_xlat13;
        let x_884 : vec2<f32> = vec2<f32>(x_883.z, x_883.w);
        let x_886 : f32 = u_xlat2.z;
        txVec9 = vec3<f32>(x_884.x, x_884.y, x_886);
        let x_893 : vec3<f32> = txVec9;
        let x_895 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_893.xy, x_893.z);
        u_xlat25 = x_895;
        let x_897 : f32 = u_xlat16.y;
        let x_898 : f32 = u_xlat25;
        let x_901 : f32 = u_xlat3.x;
        u_xlat3.x = ((x_897 * x_898) + x_901);
        let x_905 : vec4<f32> = u_xlat11;
        let x_906 : vec2<f32> = vec2<f32>(x_905.z, x_905.w);
        let x_908 : f32 = u_xlat2.z;
        txVec10 = vec3<f32>(x_906.x, x_906.y, x_908);
        let x_915 : vec3<f32> = txVec10;
        let x_917 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_915.xy, x_915.z);
        u_xlat25 = x_917;
        let x_919 : f32 = u_xlat16.z;
        let x_920 : f32 = u_xlat25;
        let x_923 : f32 = u_xlat3.x;
        u_xlat3.x = ((x_919 * x_920) + x_923);
        let x_927 : vec4<f32> = u_xlat10;
        let x_928 : vec2<f32> = vec2<f32>(x_927.x, x_927.y);
        let x_930 : f32 = u_xlat2.z;
        txVec11 = vec3<f32>(x_928.x, x_928.y, x_930);
        let x_937 : vec3<f32> = txVec11;
        let x_939 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_937.xy, x_937.z);
        u_xlat25 = x_939;
        let x_941 : f32 = u_xlat16.w;
        let x_942 : f32 = u_xlat25;
        let x_945 : f32 = u_xlat3.x;
        u_xlat3.x = ((x_941 * x_942) + x_945);
        let x_949 : vec4<f32> = u_xlat10;
        let x_950 : vec2<f32> = vec2<f32>(x_949.z, x_949.w);
        let x_952 : f32 = u_xlat2.z;
        txVec12 = vec3<f32>(x_950.x, x_950.y, x_952);
        let x_959 : vec3<f32> = txVec12;
        let x_961 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_959.xy, x_959.z);
        u_xlat25 = x_961;
        let x_962 : f32 = u_xlat68;
        let x_963 : f32 = u_xlat25;
        let x_966 : f32 = u_xlat3.x;
        u_xlat67 = ((x_962 * x_963) + x_966);
      } else {
        let x_969 : vec3<f32> = u_xlat2;
        let x_972 : vec4<f32> = x_378.x_MainLightShadowmapSize;
        let x_975 : vec2<f32> = ((vec2<f32>(x_969.x, x_969.y) * vec2<f32>(x_972.z, x_972.w)) + vec2<f32>(0.5f, 0.5f));
        let x_976 : vec4<f32> = u_xlat3;
        u_xlat3 = vec4<f32>(x_975.x, x_975.y, x_976.z, x_976.w);
        let x_978 : vec4<f32> = u_xlat3;
        let x_980 : vec2<f32> = floor(vec2<f32>(x_978.x, x_978.y));
        let x_981 : vec4<f32> = u_xlat3;
        u_xlat3 = vec4<f32>(x_980.x, x_980.y, x_981.z, x_981.w);
        let x_983 : vec3<f32> = u_xlat2;
        let x_986 : vec4<f32> = x_378.x_MainLightShadowmapSize;
        let x_989 : vec4<f32> = u_xlat3;
        u_xlat47 = ((vec2<f32>(x_983.x, x_983.y) * vec2<f32>(x_986.z, x_986.w)) + -(vec2<f32>(x_989.x, x_989.y)));
        let x_993 : vec2<f32> = u_xlat47;
        u_xlat9 = (vec4<f32>(x_993.x, x_993.x, x_993.y, x_993.y) + vec4<f32>(0.5f, 1.0f, 0.5f, 1.0f));
        let x_996 : vec4<f32> = u_xlat9;
        let x_998 : vec4<f32> = u_xlat9;
        u_xlat10 = (vec4<f32>(x_996.x, x_996.x, x_996.z, x_996.z) * vec4<f32>(x_998.x, x_998.x, x_998.z, x_998.z));
        let x_1001 : vec4<f32> = u_xlat10;
        let x_1005 : vec2<f32> = (vec2<f32>(x_1001.y, x_1001.w) * vec2<f32>(0.040816002f, 0.040816002f));
        let x_1006 : vec4<f32> = u_xlat11;
        u_xlat11 = vec4<f32>(x_1006.x, x_1005.x, x_1006.z, x_1005.y);
        let x_1008 : vec4<f32> = u_xlat10;
        let x_1011 : vec2<f32> = u_xlat47;
        let x_1013 : vec2<f32> = ((vec2<f32>(x_1008.x, x_1008.z) * vec2<f32>(0.5f, 0.5f)) + -(x_1011));
        let x_1014 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_1013.x, x_1014.y, x_1013.y, x_1014.w);
        let x_1016 : vec2<f32> = u_xlat47;
        let x_1018 : vec2<f32> = (-(x_1016) + vec2<f32>(1.0f, 1.0f));
        let x_1019 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_1018.x, x_1018.y, x_1019.z, x_1019.w);
        let x_1021 : vec2<f32> = u_xlat47;
        u_xlat54 = min(x_1021, vec2<f32>(0.0f, 0.0f));
        let x_1023 : vec2<f32> = u_xlat54;
        let x_1025 : vec2<f32> = u_xlat54;
        let x_1027 : vec4<f32> = u_xlat10;
        let x_1029 : vec2<f32> = ((-(x_1023) * x_1025) + vec2<f32>(x_1027.x, x_1027.y));
        let x_1030 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_1029.x, x_1029.y, x_1030.z, x_1030.w);
        let x_1032 : vec2<f32> = u_xlat47;
        u_xlat54 = max(x_1032, vec2<f32>(0.0f, 0.0f));
        let x_1035 : vec2<f32> = u_xlat54;
        let x_1037 : vec2<f32> = u_xlat54;
        let x_1039 : vec4<f32> = u_xlat9;
        let x_1041 : vec2<f32> = ((-(x_1035) * x_1037) + vec2<f32>(x_1039.y, x_1039.w));
        let x_1042 : vec3<f32> = u_xlat31;
        u_xlat31 = vec3<f32>(x_1041.x, x_1042.y, x_1041.y);
        let x_1044 : vec4<f32> = u_xlat10;
        let x_1047 : vec2<f32> = (vec2<f32>(x_1044.x, x_1044.y) + vec2<f32>(2.0f, 2.0f));
        let x_1048 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_1047.x, x_1047.y, x_1048.z, x_1048.w);
        let x_1050 : vec3<f32> = u_xlat31;
        let x_1052 : vec2<f32> = (vec2<f32>(x_1050.x, x_1050.z) + vec2<f32>(2.0f, 2.0f));
        let x_1053 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_1053.x, x_1052.x, x_1053.z, x_1052.y);
        let x_1056 : f32 = u_xlat9.y;
        u_xlat12.z = (x_1056 * 0.081632003f);
        let x_1060 : vec4<f32> = u_xlat9;
        let x_1063 : vec3<f32> = (vec3<f32>(x_1060.z, x_1060.x, x_1060.w) * vec3<f32>(0.081632003f, 0.081632003f, 0.081632003f));
        let x_1064 : vec4<f32> = u_xlat13;
        u_xlat13 = vec4<f32>(x_1063.x, x_1063.y, x_1063.z, x_1064.w);
        let x_1066 : vec4<f32> = u_xlat10;
        let x_1069 : vec2<f32> = (vec2<f32>(x_1066.x, x_1066.y) * vec2<f32>(0.081632003f, 0.081632003f));
        let x_1070 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_1069.x, x_1069.y, x_1070.z, x_1070.w);
        let x_1073 : f32 = u_xlat13.y;
        u_xlat12.x = x_1073;
        let x_1075 : vec2<f32> = u_xlat47;
        let x_1082 : vec2<f32> = ((vec2<f32>(x_1075.x, x_1075.x) * vec2<f32>(-0.081632003f, 0.081632003f)) + vec2<f32>(0.163264006f, 0.081632003f));
        let x_1083 : vec4<f32> = u_xlat12;
        u_xlat12 = vec4<f32>(x_1083.x, x_1082.x, x_1083.z, x_1082.y);
        let x_1085 : vec2<f32> = u_xlat47;
        let x_1089 : vec2<f32> = ((vec2<f32>(x_1085.x, x_1085.x) * vec2<f32>(-0.081632003f, 0.081632003f)) + vec2<f32>(0.081632003f, 0.163264006f));
        let x_1090 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_1089.x, x_1090.y, x_1089.y, x_1090.w);
        let x_1093 : f32 = u_xlat9.x;
        u_xlat10.y = x_1093;
        let x_1096 : f32 = u_xlat11.y;
        u_xlat10.w = x_1096;
        let x_1098 : vec4<f32> = u_xlat10;
        let x_1099 : vec4<f32> = u_xlat12;
        u_xlat12 = (x_1098 + x_1099);
        let x_1101 : vec2<f32> = u_xlat47;
        let x_1104 : vec2<f32> = ((vec2<f32>(x_1101.y, x_1101.y) * vec2<f32>(-0.081632003f, 0.081632003f)) + vec2<f32>(0.163264006f, 0.081632003f));
        let x_1105 : vec4<f32> = u_xlat13;
        u_xlat13 = vec4<f32>(x_1105.x, x_1104.x, x_1105.z, x_1104.y);
        let x_1107 : vec2<f32> = u_xlat47;
        let x_1110 : vec2<f32> = ((vec2<f32>(x_1107.y, x_1107.y) * vec2<f32>(-0.081632003f, 0.081632003f)) + vec2<f32>(0.081632003f, 0.163264006f));
        let x_1111 : vec4<f32> = u_xlat11;
        u_xlat11 = vec4<f32>(x_1110.x, x_1111.y, x_1110.y, x_1111.w);
        let x_1114 : f32 = u_xlat9.y;
        u_xlat11.y = x_1114;
        let x_1116 : vec4<f32> = u_xlat11;
        let x_1117 : vec4<f32> = u_xlat13;
        u_xlat9 = (x_1116 + x_1117);
        let x_1119 : vec4<f32> = u_xlat10;
        let x_1120 : vec4<f32> = u_xlat12;
        u_xlat10 = (x_1119 / x_1120);
        let x_1122 : vec4<f32> = u_xlat10;
        u_xlat10 = (x_1122 + vec4<f32>(-3.5f, -1.5f, 0.5f, 2.5f));
        let x_1128 : vec4<f32> = u_xlat11;
        let x_1129 : vec4<f32> = u_xlat9;
        u_xlat11 = (x_1128 / x_1129);
        let x_1131 : vec4<f32> = u_xlat11;
        u_xlat11 = (x_1131 + vec4<f32>(-3.5f, -1.5f, 0.5f, 2.5f));
        let x_1133 : vec4<f32> = u_xlat10;
        let x_1136 : vec4<f32> = x_378.x_MainLightShadowmapSize;
        u_xlat10 = (vec4<f32>(x_1133.w, x_1133.x, x_1133.y, x_1133.z) * vec4<f32>(x_1136.x, x_1136.x, x_1136.x, x_1136.x));
        let x_1139 : vec4<f32> = u_xlat11;
        let x_1142 : vec4<f32> = x_378.x_MainLightShadowmapSize;
        u_xlat11 = (vec4<f32>(x_1139.x, x_1139.w, x_1139.y, x_1139.z) * vec4<f32>(x_1142.y, x_1142.y, x_1142.y, x_1142.y));
        let x_1145 : vec4<f32> = u_xlat10;
        let x_1146 : vec3<f32> = vec3<f32>(x_1145.y, x_1145.z, x_1145.w);
        let x_1147 : vec4<f32> = u_xlat13;
        u_xlat13 = vec4<f32>(x_1146.x, x_1147.y, x_1146.y, x_1146.z);
        let x_1150 : f32 = u_xlat11.x;
        u_xlat13.y = x_1150;
        let x_1152 : vec4<f32> = u_xlat3;
        let x_1155 : vec4<f32> = x_378.x_MainLightShadowmapSize;
        let x_1158 : vec4<f32> = u_xlat13;
        u_xlat14 = ((vec4<f32>(x_1152.x, x_1152.y, x_1152.x, x_1152.y) * vec4<f32>(x_1155.x, x_1155.y, x_1155.x, x_1155.y)) + vec4<f32>(x_1158.x, x_1158.y, x_1158.z, x_1158.y));
        let x_1161 : vec4<f32> = u_xlat3;
        let x_1164 : vec4<f32> = x_378.x_MainLightShadowmapSize;
        let x_1167 : vec4<f32> = u_xlat13;
        u_xlat47 = ((vec2<f32>(x_1161.x, x_1161.y) * vec2<f32>(x_1164.x, x_1164.y)) + vec2<f32>(x_1167.w, x_1167.y));
        let x_1171 : f32 = u_xlat13.y;
        u_xlat10.y = x_1171;
        let x_1174 : f32 = u_xlat11.z;
        u_xlat13.y = x_1174;
        let x_1176 : vec4<f32> = u_xlat3;
        let x_1179 : vec4<f32> = x_378.x_MainLightShadowmapSize;
        let x_1182 : vec4<f32> = u_xlat13;
        u_xlat15 = ((vec4<f32>(x_1176.x, x_1176.y, x_1176.x, x_1176.y) * vec4<f32>(x_1179.x, x_1179.y, x_1179.x, x_1179.y)) + vec4<f32>(x_1182.x, x_1182.y, x_1182.z, x_1182.y));
        let x_1185 : vec4<f32> = u_xlat3;
        let x_1188 : vec4<f32> = x_378.x_MainLightShadowmapSize;
        let x_1191 : vec4<f32> = u_xlat13;
        let x_1193 : vec2<f32> = ((vec2<f32>(x_1185.x, x_1185.y) * vec2<f32>(x_1188.x, x_1188.y)) + vec2<f32>(x_1191.w, x_1191.y));
        let x_1194 : vec4<f32> = u_xlat16;
        u_xlat16 = vec4<f32>(x_1193.x, x_1193.y, x_1194.z, x_1194.w);
        let x_1197 : f32 = u_xlat13.y;
        u_xlat10.z = x_1197;
        let x_1200 : vec4<f32> = u_xlat3;
        let x_1203 : vec4<f32> = x_378.x_MainLightShadowmapSize;
        let x_1206 : vec4<f32> = u_xlat10;
        u_xlat17 = ((vec4<f32>(x_1200.x, x_1200.y, x_1200.x, x_1200.y) * vec4<f32>(x_1203.x, x_1203.y, x_1203.x, x_1203.y)) + vec4<f32>(x_1206.x, x_1206.y, x_1206.x, x_1206.z));
        let x_1210 : f32 = u_xlat11.w;
        u_xlat13.y = x_1210;
        let x_1213 : vec4<f32> = u_xlat3;
        let x_1216 : vec4<f32> = x_378.x_MainLightShadowmapSize;
        let x_1219 : vec4<f32> = u_xlat13;
        u_xlat18 = ((vec4<f32>(x_1213.x, x_1213.y, x_1213.x, x_1213.y) * vec4<f32>(x_1216.x, x_1216.y, x_1216.x, x_1216.y)) + vec4<f32>(x_1219.x, x_1219.y, x_1219.z, x_1219.y));
        let x_1223 : vec4<f32> = u_xlat3;
        let x_1226 : vec4<f32> = x_378.x_MainLightShadowmapSize;
        let x_1229 : vec4<f32> = u_xlat13;
        u_xlat32 = ((vec2<f32>(x_1223.x, x_1223.y) * vec2<f32>(x_1226.x, x_1226.y)) + vec2<f32>(x_1229.w, x_1229.y));
        let x_1233 : f32 = u_xlat13.y;
        u_xlat10.w = x_1233;
        let x_1236 : vec4<f32> = u_xlat3;
        let x_1239 : vec4<f32> = x_378.x_MainLightShadowmapSize;
        let x_1242 : vec4<f32> = u_xlat10;
        u_xlat60 = ((vec2<f32>(x_1236.x, x_1236.y) * vec2<f32>(x_1239.x, x_1239.y)) + vec2<f32>(x_1242.x, x_1242.w));
        let x_1245 : vec4<f32> = u_xlat13;
        let x_1246 : vec3<f32> = vec3<f32>(x_1245.x, x_1245.z, x_1245.w);
        let x_1247 : vec4<f32> = u_xlat11;
        u_xlat11 = vec4<f32>(x_1246.x, x_1247.y, x_1246.y, x_1246.z);
        let x_1249 : vec4<f32> = u_xlat3;
        let x_1252 : vec4<f32> = x_378.x_MainLightShadowmapSize;
        let x_1255 : vec4<f32> = u_xlat11;
        u_xlat13 = ((vec4<f32>(x_1249.x, x_1249.y, x_1249.x, x_1249.y) * vec4<f32>(x_1252.x, x_1252.y, x_1252.x, x_1252.y)) + vec4<f32>(x_1255.x, x_1255.y, x_1255.z, x_1255.y));
        let x_1259 : vec4<f32> = u_xlat3;
        let x_1262 : vec4<f32> = x_378.x_MainLightShadowmapSize;
        let x_1265 : vec4<f32> = u_xlat11;
        u_xlat55 = ((vec2<f32>(x_1259.x, x_1259.y) * vec2<f32>(x_1262.x, x_1262.y)) + vec2<f32>(x_1265.w, x_1265.y));
        let x_1269 : f32 = u_xlat10.x;
        u_xlat11.x = x_1269;
        let x_1271 : vec4<f32> = u_xlat3;
        let x_1274 : vec4<f32> = x_378.x_MainLightShadowmapSize;
        let x_1277 : vec4<f32> = u_xlat11;
        let x_1279 : vec2<f32> = ((vec2<f32>(x_1271.x, x_1271.y) * vec2<f32>(x_1274.x, x_1274.y)) + vec2<f32>(x_1277.x, x_1277.y));
        let x_1280 : vec4<f32> = u_xlat3;
        u_xlat3 = vec4<f32>(x_1279.x, x_1279.y, x_1280.z, x_1280.w);
        let x_1283 : vec4<f32> = u_xlat9;
        let x_1285 : vec4<f32> = u_xlat12;
        u_xlat19 = (vec4<f32>(x_1283.x, x_1283.x, x_1283.x, x_1283.x) * x_1285);
        let x_1288 : vec4<f32> = u_xlat9;
        let x_1290 : vec4<f32> = u_xlat12;
        u_xlat20 = (vec4<f32>(x_1288.y, x_1288.y, x_1288.y, x_1288.y) * x_1290);
        let x_1293 : vec4<f32> = u_xlat9;
        let x_1295 : vec4<f32> = u_xlat12;
        u_xlat21 = (vec4<f32>(x_1293.z, x_1293.z, x_1293.z, x_1293.z) * x_1295);
        let x_1297 : vec4<f32> = u_xlat9;
        let x_1299 : vec4<f32> = u_xlat12;
        u_xlat9 = (vec4<f32>(x_1297.w, x_1297.w, x_1297.w, x_1297.w) * x_1299);
        let x_1302 : vec4<f32> = u_xlat14;
        let x_1303 : vec2<f32> = vec2<f32>(x_1302.x, x_1302.y);
        let x_1305 : f32 = u_xlat2.z;
        txVec13 = vec3<f32>(x_1303.x, x_1303.y, x_1305);
        let x_1312 : vec3<f32> = txVec13;
        let x_1314 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1312.xy, x_1312.z);
        u_xlat68 = x_1314;
        let x_1316 : vec4<f32> = u_xlat14;
        let x_1317 : vec2<f32> = vec2<f32>(x_1316.z, x_1316.w);
        let x_1319 : f32 = u_xlat2.z;
        txVec14 = vec3<f32>(x_1317.x, x_1317.y, x_1319);
        let x_1327 : vec3<f32> = txVec14;
        let x_1329 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1327.xy, x_1327.z);
        u_xlat70 = x_1329;
        let x_1330 : f32 = u_xlat70;
        let x_1332 : f32 = u_xlat19.y;
        u_xlat70 = (x_1330 * x_1332);
        let x_1335 : f32 = u_xlat19.x;
        let x_1336 : f32 = u_xlat68;
        let x_1338 : f32 = u_xlat70;
        u_xlat68 = ((x_1335 * x_1336) + x_1338);
        let x_1341 : vec2<f32> = u_xlat47;
        let x_1343 : f32 = u_xlat2.z;
        txVec15 = vec3<f32>(x_1341.x, x_1341.y, x_1343);
        let x_1350 : vec3<f32> = txVec15;
        let x_1352 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1350.xy, x_1350.z);
        u_xlat47.x = x_1352;
        let x_1355 : f32 = u_xlat19.z;
        let x_1357 : f32 = u_xlat47.x;
        let x_1359 : f32 = u_xlat68;
        u_xlat68 = ((x_1355 * x_1357) + x_1359);
        let x_1362 : vec4<f32> = u_xlat17;
        let x_1363 : vec2<f32> = vec2<f32>(x_1362.x, x_1362.y);
        let x_1365 : f32 = u_xlat2.z;
        txVec16 = vec3<f32>(x_1363.x, x_1363.y, x_1365);
        let x_1372 : vec3<f32> = txVec16;
        let x_1374 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1372.xy, x_1372.z);
        u_xlat47.x = x_1374;
        let x_1377 : f32 = u_xlat19.w;
        let x_1379 : f32 = u_xlat47.x;
        let x_1381 : f32 = u_xlat68;
        u_xlat68 = ((x_1377 * x_1379) + x_1381);
        let x_1384 : vec4<f32> = u_xlat15;
        let x_1385 : vec2<f32> = vec2<f32>(x_1384.x, x_1384.y);
        let x_1387 : f32 = u_xlat2.z;
        txVec17 = vec3<f32>(x_1385.x, x_1385.y, x_1387);
        let x_1394 : vec3<f32> = txVec17;
        let x_1396 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1394.xy, x_1394.z);
        u_xlat47.x = x_1396;
        let x_1399 : f32 = u_xlat20.x;
        let x_1401 : f32 = u_xlat47.x;
        let x_1403 : f32 = u_xlat68;
        u_xlat68 = ((x_1399 * x_1401) + x_1403);
        let x_1406 : vec4<f32> = u_xlat15;
        let x_1407 : vec2<f32> = vec2<f32>(x_1406.z, x_1406.w);
        let x_1409 : f32 = u_xlat2.z;
        txVec18 = vec3<f32>(x_1407.x, x_1407.y, x_1409);
        let x_1416 : vec3<f32> = txVec18;
        let x_1418 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1416.xy, x_1416.z);
        u_xlat47.x = x_1418;
        let x_1421 : f32 = u_xlat20.y;
        let x_1423 : f32 = u_xlat47.x;
        let x_1425 : f32 = u_xlat68;
        u_xlat68 = ((x_1421 * x_1423) + x_1425);
        let x_1428 : vec4<f32> = u_xlat16;
        let x_1429 : vec2<f32> = vec2<f32>(x_1428.x, x_1428.y);
        let x_1431 : f32 = u_xlat2.z;
        txVec19 = vec3<f32>(x_1429.x, x_1429.y, x_1431);
        let x_1438 : vec3<f32> = txVec19;
        let x_1440 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1438.xy, x_1438.z);
        u_xlat47.x = x_1440;
        let x_1443 : f32 = u_xlat20.z;
        let x_1445 : f32 = u_xlat47.x;
        let x_1447 : f32 = u_xlat68;
        u_xlat68 = ((x_1443 * x_1445) + x_1447);
        let x_1450 : vec4<f32> = u_xlat17;
        let x_1451 : vec2<f32> = vec2<f32>(x_1450.z, x_1450.w);
        let x_1453 : f32 = u_xlat2.z;
        txVec20 = vec3<f32>(x_1451.x, x_1451.y, x_1453);
        let x_1460 : vec3<f32> = txVec20;
        let x_1462 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1460.xy, x_1460.z);
        u_xlat47.x = x_1462;
        let x_1465 : f32 = u_xlat20.w;
        let x_1467 : f32 = u_xlat47.x;
        let x_1469 : f32 = u_xlat68;
        u_xlat68 = ((x_1465 * x_1467) + x_1469);
        let x_1472 : vec4<f32> = u_xlat18;
        let x_1473 : vec2<f32> = vec2<f32>(x_1472.x, x_1472.y);
        let x_1475 : f32 = u_xlat2.z;
        txVec21 = vec3<f32>(x_1473.x, x_1473.y, x_1475);
        let x_1482 : vec3<f32> = txVec21;
        let x_1484 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1482.xy, x_1482.z);
        u_xlat47.x = x_1484;
        let x_1487 : f32 = u_xlat21.x;
        let x_1489 : f32 = u_xlat47.x;
        let x_1491 : f32 = u_xlat68;
        u_xlat68 = ((x_1487 * x_1489) + x_1491);
        let x_1494 : vec4<f32> = u_xlat18;
        let x_1495 : vec2<f32> = vec2<f32>(x_1494.z, x_1494.w);
        let x_1497 : f32 = u_xlat2.z;
        txVec22 = vec3<f32>(x_1495.x, x_1495.y, x_1497);
        let x_1504 : vec3<f32> = txVec22;
        let x_1506 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1504.xy, x_1504.z);
        u_xlat47.x = x_1506;
        let x_1509 : f32 = u_xlat21.y;
        let x_1511 : f32 = u_xlat47.x;
        let x_1513 : f32 = u_xlat68;
        u_xlat68 = ((x_1509 * x_1511) + x_1513);
        let x_1516 : vec2<f32> = u_xlat32;
        let x_1518 : f32 = u_xlat2.z;
        txVec23 = vec3<f32>(x_1516.x, x_1516.y, x_1518);
        let x_1525 : vec3<f32> = txVec23;
        let x_1527 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1525.xy, x_1525.z);
        u_xlat47.x = x_1527;
        let x_1530 : f32 = u_xlat21.z;
        let x_1532 : f32 = u_xlat47.x;
        let x_1534 : f32 = u_xlat68;
        u_xlat68 = ((x_1530 * x_1532) + x_1534);
        let x_1537 : vec2<f32> = u_xlat60;
        let x_1539 : f32 = u_xlat2.z;
        txVec24 = vec3<f32>(x_1537.x, x_1537.y, x_1539);
        let x_1546 : vec3<f32> = txVec24;
        let x_1548 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1546.xy, x_1546.z);
        u_xlat47.x = x_1548;
        let x_1551 : f32 = u_xlat21.w;
        let x_1553 : f32 = u_xlat47.x;
        let x_1555 : f32 = u_xlat68;
        u_xlat68 = ((x_1551 * x_1553) + x_1555);
        let x_1558 : vec4<f32> = u_xlat13;
        let x_1559 : vec2<f32> = vec2<f32>(x_1558.x, x_1558.y);
        let x_1561 : f32 = u_xlat2.z;
        txVec25 = vec3<f32>(x_1559.x, x_1559.y, x_1561);
        let x_1568 : vec3<f32> = txVec25;
        let x_1570 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1568.xy, x_1568.z);
        u_xlat47.x = x_1570;
        let x_1573 : f32 = u_xlat9.x;
        let x_1575 : f32 = u_xlat47.x;
        let x_1577 : f32 = u_xlat68;
        u_xlat68 = ((x_1573 * x_1575) + x_1577);
        let x_1580 : vec4<f32> = u_xlat13;
        let x_1581 : vec2<f32> = vec2<f32>(x_1580.z, x_1580.w);
        let x_1583 : f32 = u_xlat2.z;
        txVec26 = vec3<f32>(x_1581.x, x_1581.y, x_1583);
        let x_1590 : vec3<f32> = txVec26;
        let x_1592 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1590.xy, x_1590.z);
        u_xlat47.x = x_1592;
        let x_1595 : f32 = u_xlat9.y;
        let x_1597 : f32 = u_xlat47.x;
        let x_1599 : f32 = u_xlat68;
        u_xlat68 = ((x_1595 * x_1597) + x_1599);
        let x_1602 : vec2<f32> = u_xlat55;
        let x_1604 : f32 = u_xlat2.z;
        txVec27 = vec3<f32>(x_1602.x, x_1602.y, x_1604);
        let x_1611 : vec3<f32> = txVec27;
        let x_1613 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1611.xy, x_1611.z);
        u_xlat47.x = x_1613;
        let x_1616 : f32 = u_xlat9.z;
        let x_1618 : f32 = u_xlat47.x;
        let x_1620 : f32 = u_xlat68;
        u_xlat68 = ((x_1616 * x_1618) + x_1620);
        let x_1623 : vec4<f32> = u_xlat3;
        let x_1624 : vec2<f32> = vec2<f32>(x_1623.x, x_1623.y);
        let x_1626 : f32 = u_xlat2.z;
        txVec28 = vec3<f32>(x_1624.x, x_1624.y, x_1626);
        let x_1633 : vec3<f32> = txVec28;
        let x_1635 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1633.xy, x_1633.z);
        u_xlat3.x = x_1635;
        let x_1638 : f32 = u_xlat9.w;
        let x_1640 : f32 = u_xlat3.x;
        let x_1642 : f32 = u_xlat68;
        u_xlat67 = ((x_1638 * x_1640) + x_1642);
      }
    }
  } else {
    let x_1646 : vec3<f32> = u_xlat2;
    let x_1647 : vec2<f32> = vec2<f32>(x_1646.x, x_1646.y);
    let x_1649 : f32 = u_xlat2.z;
    txVec29 = vec3<f32>(x_1647.x, x_1647.y, x_1649);
    let x_1656 : vec3<f32> = txVec29;
    let x_1658 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1656.xy, x_1656.z);
    u_xlat67 = x_1658;
  }
  let x_1660 : f32 = x_378.x_MainLightShadowParams.x;
  u_xlat2.x = (-(x_1660) + 1.0f);
  let x_1664 : f32 = u_xlat67;
  let x_1666 : f32 = x_378.x_MainLightShadowParams.x;
  let x_1669 : f32 = u_xlat2.x;
  u_xlat67 = ((x_1664 * x_1666) + x_1669);
  let x_1673 : f32 = u_xlat2.z;
  u_xlatb24 = (0.0f >= x_1673);
  let x_1677 : f32 = u_xlat2.z;
  u_xlatb46 = (x_1677 >= 1.0f);
  let x_1679 : bool = u_xlatb46;
  let x_1680 : bool = u_xlatb24;
  u_xlatb24 = (x_1679 | x_1680);
  let x_1682 : bool = u_xlatb24;
  let x_1683 : f32 = u_xlat67;
  u_xlat67 = select(x_1683, 1.0f, x_1682);
  let x_1685 : vec3<f32> = u_xlat1;
  let x_1687 : vec4<f32> = x_158.x_MainLightPosition;
  u_xlat1.x = dot(x_1685, -(vec3<f32>(x_1687.x, x_1687.y, x_1687.z)));
  let x_1693 : f32 = u_xlat1.x;
  u_xlat1.x = clamp(x_1693, 0.0f, 1.0f);
  let x_1697 : f32 = u_xlat67;
  let x_1701 : vec4<f32> = x_158.x_MainLightColor;
  u_xlat23 = (vec3<f32>(x_1697, x_1697, x_1697) * vec3<f32>(x_1701.x, x_1701.y, x_1701.z));
  let x_1704 : vec3<f32> = u_xlat23;
  let x_1705 : vec3<f32> = u_xlat1;
  u_xlat1 = (x_1704 * vec3<f32>(x_1705.x, x_1705.x, x_1705.x));
  let x_1708 : vec3<f32> = u_xlat1;
  let x_1709 : vec4<f32> = u_xlat6;
  u_xlat1 = (x_1708 * vec3<f32>(x_1709.x, x_1709.y, x_1709.z));
  let x_1713 : f32 = x_95.unity_LODFade.x;
  u_xlatb67 = (x_1713 < 0.0f);
  let x_1717 : f32 = x_95.unity_LODFade.x;
  u_xlat24 = (x_1717 + 1.0f);
  let x_1719 : bool = u_xlatb67;
  if (x_1719) {
    let x_1723 : f32 = u_xlat24;
    x_1720 = x_1723;
  } else {
    let x_1726 : f32 = x_95.unity_LODFade.x;
    x_1720 = x_1726;
  }
  let x_1727 : f32 = x_1720;
  u_xlat67 = x_1727;
  let x_1728 : f32 = u_xlat67;
  u_xlatb24 = (0.5f >= x_1728);
  let x_1730 : vec3<f32> = u_xlat4;
  let x_1734 : vec4<f32> = x_158.x_ScreenParams;
  let x_1736 : vec3<f32> = (abs(x_1730) * vec3<f32>(x_1734.x, x_1734.y, x_1734.x));
  let x_1737 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_1736.x, x_1736.y, x_1736.z, x_1737.w);
  let x_1742 : vec4<f32> = u_xlat3;
  u_xlatu3 = vec3<u32>(vec3<f32>(x_1742.x, x_1742.y, x_1742.z));
  let x_1747 : u32 = u_xlatu3.z;
  u_xlatu46 = (x_1747 * 1025u);
  let x_1751 : u32 = u_xlatu46;
  u_xlatu68 = (x_1751 >> 6u);
  let x_1755 : u32 = u_xlatu68;
  let x_1756 : u32 = u_xlatu46;
  u_xlati46 = bitcast<i32>((x_1755 ^ x_1756));
  let x_1759 : i32 = u_xlati46;
  u_xlatu46 = (bitcast<u32>(x_1759) * 9u);
  let x_1763 : u32 = u_xlatu46;
  u_xlatu68 = (x_1763 >> 11u);
  let x_1766 : u32 = u_xlatu68;
  let x_1767 : u32 = u_xlatu46;
  u_xlati46 = bitcast<i32>((x_1766 ^ x_1767));
  let x_1770 : i32 = u_xlati46;
  u_xlati46 = (x_1770 * 32769i);
  let x_1773 : i32 = u_xlati46;
  let x_1776 : u32 = u_xlatu3.y;
  u_xlati46 = bitcast<i32>((bitcast<u32>(x_1773) ^ x_1776));
  let x_1779 : i32 = u_xlati46;
  u_xlatu46 = (bitcast<u32>(x_1779) * 1025u);
  let x_1782 : u32 = u_xlatu46;
  u_xlatu68 = (x_1782 >> 6u);
  let x_1784 : u32 = u_xlatu68;
  let x_1785 : u32 = u_xlatu46;
  u_xlati46 = bitcast<i32>((x_1784 ^ x_1785));
  let x_1788 : i32 = u_xlati46;
  u_xlatu46 = (bitcast<u32>(x_1788) * 9u);
  let x_1791 : u32 = u_xlatu46;
  u_xlatu68 = (x_1791 >> 11u);
  let x_1793 : u32 = u_xlatu68;
  let x_1794 : u32 = u_xlatu46;
  u_xlati46 = bitcast<i32>((x_1793 ^ x_1794));
  let x_1797 : i32 = u_xlati46;
  u_xlati46 = (x_1797 * 32769i);
  let x_1799 : i32 = u_xlati46;
  let x_1802 : u32 = u_xlatu3.x;
  u_xlati46 = bitcast<i32>((bitcast<u32>(x_1799) ^ x_1802));
  let x_1805 : i32 = u_xlati46;
  u_xlatu46 = (bitcast<u32>(x_1805) * 1025u);
  let x_1808 : u32 = u_xlatu46;
  u_xlatu68 = (x_1808 >> 6u);
  let x_1810 : u32 = u_xlatu68;
  let x_1811 : u32 = u_xlatu46;
  u_xlati46 = bitcast<i32>((x_1810 ^ x_1811));
  let x_1814 : i32 = u_xlati46;
  u_xlatu46 = (bitcast<u32>(x_1814) * 9u);
  let x_1817 : u32 = u_xlatu46;
  u_xlatu68 = (x_1817 >> 11u);
  let x_1819 : u32 = u_xlatu68;
  let x_1820 : u32 = u_xlatu46;
  u_xlati46 = bitcast<i32>((x_1819 ^ x_1820));
  let x_1823 : i32 = u_xlati46;
  u_xlati46 = (x_1823 * 32769i);
  param = 1065353216i;
  let x_1830 : i32 = u_xlati46;
  param_1 = x_1830;
  param_2 = 0i;
  param_3 = 23i;
  let x_1833 : i32 = int_bitfieldInsert_i1_i1_i1_i1_(&(param), &(param_1), &(param_2), &(param_3));
  u_xlat46.x = bitcast<f32>(x_1833);
  let x_1837 : f32 = u_xlat46.x;
  u_xlat46.x = (x_1837 + -1.0f);
  let x_1841 : f32 = u_xlat46.x;
  u_xlat68 = (-(x_1841) + 1.0f);
  let x_1844 : bool = u_xlatb24;
  if (x_1844) {
    let x_1849 : f32 = u_xlat46.x;
    x_1845 = x_1849;
  } else {
    let x_1851 : f32 = u_xlat68;
    x_1845 = x_1851;
  }
  let x_1852 : f32 = x_1845;
  u_xlat24 = x_1852;
  let x_1853 : f32 = u_xlat67;
  let x_1855 : f32 = u_xlat24;
  u_xlat67 = ((x_1853 * 2.0f) + -(x_1855));
  let x_1858 : f32 = u_xlat67;
  let x_1860 : f32 = u_xlat6.w;
  u_xlat24 = (x_1858 * x_1860);
  let x_1862 : f32 = u_xlat24;
  u_xlatb46 = (x_1862 >= 0.400000006f);
  let x_1865 : bool = u_xlatb46;
  let x_1866 : f32 = u_xlat24;
  u_xlat46.x = select(0.0f, x_1866, x_1865);
  let x_1870 : f32 = u_xlat6.w;
  let x_1871 : f32 = u_xlat67;
  u_xlat67 = ((x_1870 * x_1871) + -0.400000006f);
  let x_1875 : f32 = u_xlat24;
  u_xlat68 = dpdxCoarse(x_1875);
  let x_1877 : f32 = u_xlat24;
  u_xlat24 = dpdyCoarse(x_1877);
  let x_1879 : f32 = u_xlat24;
  let x_1881 : f32 = u_xlat68;
  u_xlat24 = (abs(x_1879) + abs(x_1881));
  let x_1884 : f32 = u_xlat24;
  u_xlat24 = max(x_1884, 0.0001f);
  let x_1887 : f32 = u_xlat67;
  let x_1888 : f32 = u_xlat24;
  u_xlat67 = (x_1887 / x_1888);
  let x_1890 : f32 = u_xlat67;
  u_xlat67 = (x_1890 + 0.5f);
  let x_1892 : f32 = u_xlat67;
  u_xlat67 = clamp(x_1892, 0.0f, 1.0f);
  let x_1895 : f32 = x_158.x_AlphaToMaskAvailable;
  u_xlatb24 = !((x_1895 == 0.0f));
  let x_1897 : bool = u_xlatb24;
  if (x_1897) {
    let x_1901 : f32 = u_xlat67;
    x_1898 = x_1901;
  } else {
    let x_1904 : f32 = u_xlat46.x;
    x_1898 = x_1904;
  }
  let x_1905 : f32 = x_1898;
  u_xlat67 = x_1905;
  let x_1906 : f32 = u_xlat67;
  u_xlat46.x = (x_1906 + -0.0001f);
  let x_1911 : f32 = u_xlat46.x;
  u_xlatb46 = (x_1911 < 0.0f);
  let x_1913 : bool = u_xlatb46;
  if (((select(0i, 1i, x_1913) * -1i) != 0i)) {
    discard;
  }
  let x_1921 : vec3<f32> = u_xlat22;
  let x_1922 : vec3<f32> = u_xlat30;
  u_xlat22 = (x_1921 * vec3<f32>(x_1922.y, x_1922.y, x_1922.y));
  let x_1925 : vec3<f32> = u_xlat30;
  let x_1927 : vec4<f32> = vs_INTERP2;
  let x_1930 : vec3<f32> = u_xlat22;
  u_xlat22 = ((vec3<f32>(x_1925.x, x_1925.x, x_1925.x) * vec3<f32>(x_1927.x, x_1927.y, x_1927.z)) + x_1930);
  let x_1932 : vec3<f32> = u_xlat30;
  let x_1934 : vec3<f32> = vs_INTERP1;
  let x_1936 : vec3<f32> = u_xlat22;
  u_xlat22 = ((vec3<f32>(x_1932.z, x_1932.z, x_1932.z) * x_1934) + x_1936);
  let x_1938 : vec3<f32> = u_xlat22;
  let x_1939 : vec3<f32> = u_xlat22;
  u_xlat46.x = dot(x_1938, x_1939);
  let x_1943 : f32 = u_xlat46.x;
  u_xlat46.x = inverseSqrt(x_1943);
  let x_1946 : vec3<f32> = u_xlat22;
  let x_1947 : vec2<f32> = u_xlat46;
  u_xlat22 = (x_1946 * vec3<f32>(x_1947.x, x_1947.x, x_1947.x));
  let x_1957 : vec2<f32> = vs_INTERP5;
  let x_1959 : f32 = x_158.x_GlobalMipBias.x;
  let x_1960 : vec4<f32> = textureSampleBias(unity_Lightmap, samplerunity_Lightmap, x_1957, x_1959);
  let x_1961 : vec3<f32> = vec3<f32>(x_1960.x, x_1960.y, x_1960.z);
  let x_1962 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_1961.x, x_1961.y, x_1961.z, x_1962.w);
  let x_1965 : vec4<f32> = x_158.x_ScaledScreenParams;
  let x_1966 : vec2<f32> = vec2<f32>(x_1965.x, x_1965.y);
  u_xlat46 = (vec2<f32>(1.0f, 1.0f) / vec2<f32>(x_1966.x, x_1966.y));
  let x_1971 : vec2<f32> = u_xlat46;
  let x_1972 : vec4<f32> = hlslcc_FragCoord;
  let x_1974 : vec2<f32> = (x_1971 * vec2<f32>(x_1972.x, x_1972.y));
  let x_1975 : vec3<f32> = u_xlat4;
  u_xlat4 = vec3<f32>(x_1974.x, x_1974.y, x_1975.z);
  let x_1978 : f32 = u_xlat4.y;
  let x_1981 : f32 = x_158.x_ScaleBiasRt.x;
  let x_1984 : f32 = x_158.x_ScaleBiasRt.y;
  u_xlat46.x = ((x_1978 * x_1981) + x_1984);
  let x_1988 : f32 = u_xlat46.x;
  u_xlat4.z = (-(x_1988) + 1.0f);
  let x_1993 : f32 = u_xlat8.x;
  u_xlat8.x = x_1993;
  let x_1996 : f32 = u_xlat8.x;
  u_xlat8.x = clamp(x_1996, 0.0f, 1.0f);
  let x_1999 : f32 = u_xlat67;
  u_xlat67 = x_1999;
  let x_2000 : f32 = u_xlat67;
  u_xlat67 = clamp(x_2000, 0.0f, 1.0f);
  let x_2002 : vec4<f32> = u_xlat7;
  let x_2006 : vec3<f32> = (vec3<f32>(x_2002.x, x_2002.y, x_2002.z) * vec3<f32>(0.959999979f, 0.959999979f, 0.959999979f));
  let x_2007 : vec4<f32> = u_xlat6;
  u_xlat6 = vec4<f32>(x_2006.x, x_2006.y, x_2006.z, x_2007.w);
  let x_2010 : f32 = u_xlat8.x;
  u_xlat46.x = (-(x_2010) + 1.0f);
  let x_2015 : f32 = u_xlat46.x;
  let x_2017 : f32 = u_xlat46.x;
  u_xlat68 = (x_2015 * x_2017);
  let x_2019 : f32 = u_xlat68;
  u_xlat68 = max(x_2019, 0.0078125f);
  let x_2023 : f32 = u_xlat68;
  let x_2024 : f32 = u_xlat68;
  u_xlat69 = (x_2023 * x_2024);
  let x_2028 : f32 = u_xlat8.x;
  u_xlat26.x = (x_2028 + 0.040000021f);
  let x_2033 : f32 = u_xlat26.x;
  u_xlat4.y = min(x_2033, 1.0f);
  let x_2036 : f32 = u_xlat68;
  u_xlat70 = ((x_2036 * 4.0f) + 2.0f);
  let x_2045 : vec3<f32> = u_xlat4;
  let x_2048 : f32 = x_158.x_GlobalMipBias.x;
  let x_2049 : vec4<f32> = textureSampleBias(x_ScreenSpaceOcclusionTexture, sampler_ScreenSpaceOcclusionTexture, vec2<f32>(x_2045.x, x_2045.z), x_2048);
  u_xlat4.x = x_2049.x;
  let x_2052 : vec3<f32> = u_xlat4;
  u_xlat26 = (vec2<f32>(x_2052.y, x_2052.x) + vec2<f32>(-0.039999999f, -1.0f));
  let x_2060 : f32 = x_158.x_AmbientOcclusionParam.w;
  let x_2062 : f32 = u_xlat26.y;
  u_xlat48 = ((x_2060 * x_2062) + 1.0f);
  let x_2066 : f32 = u_xlat4.x;
  let x_2068 : f32 = vs_INTERP4.w;
  u_xlat4.x = min(x_2066, x_2068);
  let x_2071 : bool = u_xlatb0;
  if (x_2071) {
    let x_2075 : f32 = x_378.x_MainLightShadowParams.y;
    u_xlatb0 = (x_2075 == 1.0f);
    let x_2077 : bool = u_xlatb0;
    if (x_2077) {
      let x_2081 : vec4<f32> = vs_INTERP9;
      let x_2084 : vec4<f32> = x_378.x_MainLightShadowOffset0;
      u_xlat7 = (vec4<f32>(x_2081.x, x_2081.y, x_2081.x, x_2081.y) + x_2084);
      let x_2087 : vec4<f32> = u_xlat7;
      let x_2088 : vec2<f32> = vec2<f32>(x_2087.x, x_2087.y);
      let x_2090 : f32 = vs_INTERP9.z;
      txVec30 = vec3<f32>(x_2088.x, x_2088.y, x_2090);
      let x_2097 : vec3<f32> = txVec30;
      let x_2099 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2097.xy, x_2097.z);
      u_xlat8.x = x_2099;
      let x_2102 : vec4<f32> = u_xlat7;
      let x_2103 : vec2<f32> = vec2<f32>(x_2102.z, x_2102.w);
      let x_2105 : f32 = vs_INTERP9.z;
      txVec31 = vec3<f32>(x_2103.x, x_2103.y, x_2105);
      let x_2112 : vec3<f32> = txVec31;
      let x_2114 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2112.xy, x_2112.z);
      u_xlat8.y = x_2114;
      let x_2116 : vec4<f32> = vs_INTERP9;
      let x_2119 : vec4<f32> = x_378.x_MainLightShadowOffset1;
      u_xlat7 = (vec4<f32>(x_2116.x, x_2116.y, x_2116.x, x_2116.y) + x_2119);
      let x_2122 : vec4<f32> = u_xlat7;
      let x_2123 : vec2<f32> = vec2<f32>(x_2122.x, x_2122.y);
      let x_2125 : f32 = vs_INTERP9.z;
      txVec32 = vec3<f32>(x_2123.x, x_2123.y, x_2125);
      let x_2132 : vec3<f32> = txVec32;
      let x_2134 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2132.xy, x_2132.z);
      u_xlat8.z = x_2134;
      let x_2137 : vec4<f32> = u_xlat7;
      let x_2138 : vec2<f32> = vec2<f32>(x_2137.z, x_2137.w);
      let x_2140 : f32 = vs_INTERP9.z;
      txVec33 = vec3<f32>(x_2138.x, x_2138.y, x_2140);
      let x_2147 : vec3<f32> = txVec33;
      let x_2149 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2147.xy, x_2147.z);
      u_xlat8.w = x_2149;
      let x_2151 : vec4<f32> = u_xlat8;
      u_xlat0.x = dot(x_2151, vec4<f32>(0.25f, 0.25f, 0.25f, 0.25f));
    } else {
      let x_2157 : f32 = x_378.x_MainLightShadowParams.y;
      u_xlatb71 = (x_2157 == 2.0f);
      let x_2159 : bool = u_xlatb71;
      if (x_2159) {
        let x_2162 : vec4<f32> = vs_INTERP9;
        let x_2165 : vec4<f32> = x_378.x_MainLightShadowmapSize;
        let x_2168 : vec2<f32> = ((vec2<f32>(x_2162.x, x_2162.y) * vec2<f32>(x_2165.z, x_2165.w)) + vec2<f32>(0.5f, 0.5f));
        let x_2169 : vec4<f32> = u_xlat7;
        u_xlat7 = vec4<f32>(x_2168.x, x_2168.y, x_2169.z, x_2169.w);
        let x_2171 : vec4<f32> = u_xlat7;
        let x_2173 : vec2<f32> = floor(vec2<f32>(x_2171.x, x_2171.y));
        let x_2174 : vec4<f32> = u_xlat7;
        u_xlat7 = vec4<f32>(x_2173.x, x_2173.y, x_2174.z, x_2174.w);
        let x_2177 : vec4<f32> = vs_INTERP9;
        let x_2180 : vec4<f32> = x_378.x_MainLightShadowmapSize;
        let x_2183 : vec4<f32> = u_xlat7;
        u_xlat51 = ((vec2<f32>(x_2177.x, x_2177.y) * vec2<f32>(x_2180.z, x_2180.w)) + -(vec2<f32>(x_2183.x, x_2183.y)));
        let x_2187 : vec2<f32> = u_xlat51;
        u_xlat8 = (vec4<f32>(x_2187.x, x_2187.x, x_2187.y, x_2187.y) + vec4<f32>(0.5f, 1.0f, 0.5f, 1.0f));
        let x_2190 : vec4<f32> = u_xlat8;
        let x_2192 : vec4<f32> = u_xlat8;
        u_xlat9 = (vec4<f32>(x_2190.x, x_2190.x, x_2190.z, x_2190.z) * vec4<f32>(x_2192.x, x_2192.x, x_2192.z, x_2192.z));
        let x_2195 : vec4<f32> = u_xlat9;
        let x_2197 : vec2<f32> = (vec2<f32>(x_2195.y, x_2195.w) * vec2<f32>(0.079999998f, 0.079999998f));
        let x_2198 : vec4<f32> = u_xlat8;
        u_xlat8 = vec4<f32>(x_2197.x, x_2198.y, x_2197.y, x_2198.w);
        let x_2200 : vec4<f32> = u_xlat9;
        let x_2203 : vec2<f32> = u_xlat51;
        let x_2205 : vec2<f32> = ((vec2<f32>(x_2200.x, x_2200.z) * vec2<f32>(0.5f, 0.5f)) + -(x_2203));
        let x_2206 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_2205.x, x_2205.y, x_2206.z, x_2206.w);
        let x_2209 : vec2<f32> = u_xlat51;
        u_xlat53 = (-(x_2209) + vec2<f32>(1.0f, 1.0f));
        let x_2212 : vec2<f32> = u_xlat51;
        let x_2213 : vec2<f32> = min(x_2212, vec2<f32>(0.0f, 0.0f));
        let x_2214 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_2213.x, x_2213.y, x_2214.z, x_2214.w);
        let x_2216 : vec4<f32> = u_xlat10;
        let x_2219 : vec4<f32> = u_xlat10;
        let x_2222 : vec2<f32> = u_xlat53;
        let x_2223 : vec2<f32> = ((-(vec2<f32>(x_2216.x, x_2216.y)) * vec2<f32>(x_2219.x, x_2219.y)) + x_2222);
        let x_2224 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_2223.x, x_2223.y, x_2224.z, x_2224.w);
        let x_2226 : vec2<f32> = u_xlat51;
        u_xlat51 = max(x_2226, vec2<f32>(0.0f, 0.0f));
        let x_2228 : vec2<f32> = u_xlat51;
        let x_2230 : vec2<f32> = u_xlat51;
        let x_2232 : vec4<f32> = u_xlat8;
        u_xlat51 = ((-(x_2228) * x_2230) + vec2<f32>(x_2232.y, x_2232.w));
        let x_2235 : vec4<f32> = u_xlat10;
        let x_2237 : vec2<f32> = (vec2<f32>(x_2235.x, x_2235.y) + vec2<f32>(1.0f, 1.0f));
        let x_2238 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_2237.x, x_2237.y, x_2238.z, x_2238.w);
        let x_2240 : vec2<f32> = u_xlat51;
        u_xlat51 = (x_2240 + vec2<f32>(1.0f, 1.0f));
        let x_2242 : vec4<f32> = u_xlat9;
        let x_2244 : vec2<f32> = (vec2<f32>(x_2242.x, x_2242.y) * vec2<f32>(0.159999996f, 0.159999996f));
        let x_2245 : vec4<f32> = u_xlat11;
        u_xlat11 = vec4<f32>(x_2244.x, x_2244.y, x_2245.z, x_2245.w);
        let x_2247 : vec2<f32> = u_xlat53;
        let x_2248 : vec2<f32> = (x_2247 * vec2<f32>(0.159999996f, 0.159999996f));
        let x_2249 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_2248.x, x_2248.y, x_2249.z, x_2249.w);
        let x_2251 : vec4<f32> = u_xlat10;
        let x_2253 : vec2<f32> = (vec2<f32>(x_2251.x, x_2251.y) * vec2<f32>(0.159999996f, 0.159999996f));
        let x_2254 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_2253.x, x_2253.y, x_2254.z, x_2254.w);
        let x_2256 : vec2<f32> = u_xlat51;
        let x_2257 : vec2<f32> = (x_2256 * vec2<f32>(0.159999996f, 0.159999996f));
        let x_2258 : vec4<f32> = u_xlat12;
        u_xlat12 = vec4<f32>(x_2257.x, x_2257.y, x_2258.z, x_2258.w);
        let x_2260 : vec4<f32> = u_xlat8;
        u_xlat51 = (vec2<f32>(x_2260.y, x_2260.w) * vec2<f32>(0.159999996f, 0.159999996f));
        let x_2264 : f32 = u_xlat10.x;
        u_xlat11.z = x_2264;
        let x_2267 : f32 = u_xlat51.x;
        u_xlat11.w = x_2267;
        let x_2270 : f32 = u_xlat12.x;
        u_xlat9.z = x_2270;
        let x_2273 : f32 = u_xlat8.x;
        u_xlat9.w = x_2273;
        let x_2275 : vec4<f32> = u_xlat9;
        let x_2277 : vec4<f32> = u_xlat11;
        u_xlat13 = (vec4<f32>(x_2275.z, x_2275.w, x_2275.x, x_2275.z) + vec4<f32>(x_2277.z, x_2277.w, x_2277.x, x_2277.z));
        let x_2281 : f32 = u_xlat11.y;
        u_xlat10.z = x_2281;
        let x_2284 : f32 = u_xlat51.y;
        u_xlat10.w = x_2284;
        let x_2287 : f32 = u_xlat9.y;
        u_xlat12.z = x_2287;
        let x_2290 : f32 = u_xlat8.z;
        u_xlat12.w = x_2290;
        let x_2292 : vec4<f32> = u_xlat10;
        let x_2294 : vec4<f32> = u_xlat12;
        let x_2296 : vec3<f32> = (vec3<f32>(x_2292.z, x_2292.y, x_2292.w) + vec3<f32>(x_2294.z, x_2294.y, x_2294.w));
        let x_2297 : vec4<f32> = u_xlat8;
        u_xlat8 = vec4<f32>(x_2296.x, x_2296.y, x_2296.z, x_2297.w);
        let x_2299 : vec4<f32> = u_xlat9;
        let x_2301 : vec4<f32> = u_xlat13;
        let x_2303 : vec3<f32> = (vec3<f32>(x_2299.x, x_2299.z, x_2299.w) / vec3<f32>(x_2301.z, x_2301.w, x_2301.y));
        let x_2304 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_2303.x, x_2303.y, x_2303.z, x_2304.w);
        let x_2306 : vec4<f32> = u_xlat9;
        let x_2308 : vec3<f32> = (vec3<f32>(x_2306.x, x_2306.y, x_2306.z) + vec3<f32>(-2.5f, -0.5f, 1.5f));
        let x_2309 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_2308.x, x_2308.y, x_2308.z, x_2309.w);
        let x_2311 : vec4<f32> = u_xlat12;
        let x_2313 : vec4<f32> = u_xlat8;
        let x_2315 : vec3<f32> = (vec3<f32>(x_2311.z, x_2311.y, x_2311.w) / vec3<f32>(x_2313.x, x_2313.y, x_2313.z));
        let x_2316 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_2315.x, x_2315.y, x_2315.z, x_2316.w);
        let x_2318 : vec4<f32> = u_xlat10;
        let x_2320 : vec3<f32> = (vec3<f32>(x_2318.x, x_2318.y, x_2318.z) + vec3<f32>(-2.5f, -0.5f, 1.5f));
        let x_2321 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_2320.x, x_2320.y, x_2320.z, x_2321.w);
        let x_2323 : vec4<f32> = u_xlat9;
        let x_2326 : vec4<f32> = x_378.x_MainLightShadowmapSize;
        let x_2328 : vec3<f32> = (vec3<f32>(x_2323.y, x_2323.x, x_2323.z) * vec3<f32>(x_2326.x, x_2326.x, x_2326.x));
        let x_2329 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_2328.x, x_2328.y, x_2328.z, x_2329.w);
        let x_2331 : vec4<f32> = u_xlat10;
        let x_2334 : vec4<f32> = x_378.x_MainLightShadowmapSize;
        let x_2336 : vec3<f32> = (vec3<f32>(x_2331.x, x_2331.y, x_2331.z) * vec3<f32>(x_2334.y, x_2334.y, x_2334.y));
        let x_2337 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_2336.x, x_2336.y, x_2336.z, x_2337.w);
        let x_2340 : f32 = u_xlat10.x;
        u_xlat9.w = x_2340;
        let x_2342 : vec4<f32> = u_xlat7;
        let x_2345 : vec4<f32> = x_378.x_MainLightShadowmapSize;
        let x_2348 : vec4<f32> = u_xlat9;
        u_xlat11 = ((vec4<f32>(x_2342.x, x_2342.y, x_2342.x, x_2342.y) * vec4<f32>(x_2345.x, x_2345.y, x_2345.x, x_2345.y)) + vec4<f32>(x_2348.y, x_2348.w, x_2348.x, x_2348.w));
        let x_2351 : vec4<f32> = u_xlat7;
        let x_2354 : vec4<f32> = x_378.x_MainLightShadowmapSize;
        let x_2357 : vec4<f32> = u_xlat9;
        u_xlat51 = ((vec2<f32>(x_2351.x, x_2351.y) * vec2<f32>(x_2354.x, x_2354.y)) + vec2<f32>(x_2357.z, x_2357.w));
        let x_2361 : f32 = u_xlat9.y;
        u_xlat10.w = x_2361;
        let x_2363 : vec4<f32> = u_xlat10;
        let x_2364 : vec2<f32> = vec2<f32>(x_2363.y, x_2363.z);
        let x_2365 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_2365.x, x_2364.x, x_2365.z, x_2364.y);
        let x_2367 : vec4<f32> = u_xlat7;
        let x_2370 : vec4<f32> = x_378.x_MainLightShadowmapSize;
        let x_2373 : vec4<f32> = u_xlat9;
        u_xlat12 = ((vec4<f32>(x_2367.x, x_2367.y, x_2367.x, x_2367.y) * vec4<f32>(x_2370.x, x_2370.y, x_2370.x, x_2370.y)) + vec4<f32>(x_2373.x, x_2373.y, x_2373.z, x_2373.y));
        let x_2376 : vec4<f32> = u_xlat7;
        let x_2379 : vec4<f32> = x_378.x_MainLightShadowmapSize;
        let x_2382 : vec4<f32> = u_xlat10;
        u_xlat10 = ((vec4<f32>(x_2376.x, x_2376.y, x_2376.x, x_2376.y) * vec4<f32>(x_2379.x, x_2379.y, x_2379.x, x_2379.y)) + vec4<f32>(x_2382.w, x_2382.y, x_2382.w, x_2382.z));
        let x_2385 : vec4<f32> = u_xlat7;
        let x_2388 : vec4<f32> = x_378.x_MainLightShadowmapSize;
        let x_2391 : vec4<f32> = u_xlat9;
        u_xlat9 = ((vec4<f32>(x_2385.x, x_2385.y, x_2385.x, x_2385.y) * vec4<f32>(x_2388.x, x_2388.y, x_2388.x, x_2388.y)) + vec4<f32>(x_2391.x, x_2391.w, x_2391.z, x_2391.w));
        let x_2394 : vec4<f32> = u_xlat8;
        let x_2396 : vec4<f32> = u_xlat13;
        u_xlat14 = (vec4<f32>(x_2394.x, x_2394.x, x_2394.x, x_2394.y) * vec4<f32>(x_2396.z, x_2396.w, x_2396.y, x_2396.z));
        let x_2399 : vec4<f32> = u_xlat8;
        let x_2401 : vec4<f32> = u_xlat13;
        u_xlat15 = (vec4<f32>(x_2399.y, x_2399.y, x_2399.z, x_2399.z) * x_2401);
        let x_2405 : f32 = u_xlat8.z;
        let x_2407 : f32 = u_xlat13.y;
        u_xlat71 = (x_2405 * x_2407);
        let x_2410 : vec4<f32> = u_xlat11;
        let x_2411 : vec2<f32> = vec2<f32>(x_2410.x, x_2410.y);
        let x_2413 : f32 = vs_INTERP9.z;
        txVec34 = vec3<f32>(x_2411.x, x_2411.y, x_2413);
        let x_2421 : vec3<f32> = txVec34;
        let x_2423 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2421.xy, x_2421.z);
        u_xlat72 = x_2423;
        let x_2425 : vec4<f32> = u_xlat11;
        let x_2426 : vec2<f32> = vec2<f32>(x_2425.z, x_2425.w);
        let x_2428 : f32 = vs_INTERP9.z;
        txVec35 = vec3<f32>(x_2426.x, x_2426.y, x_2428);
        let x_2435 : vec3<f32> = txVec35;
        let x_2437 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2435.xy, x_2435.z);
        u_xlat7.x = x_2437;
        let x_2440 : f32 = u_xlat7.x;
        let x_2442 : f32 = u_xlat14.y;
        u_xlat7.x = (x_2440 * x_2442);
        let x_2446 : f32 = u_xlat14.x;
        let x_2447 : f32 = u_xlat72;
        let x_2450 : f32 = u_xlat7.x;
        u_xlat72 = ((x_2446 * x_2447) + x_2450);
        let x_2453 : vec2<f32> = u_xlat51;
        let x_2455 : f32 = vs_INTERP9.z;
        txVec36 = vec3<f32>(x_2453.x, x_2453.y, x_2455);
        let x_2462 : vec3<f32> = txVec36;
        let x_2464 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2462.xy, x_2462.z);
        u_xlat7.x = x_2464;
        let x_2467 : f32 = u_xlat14.z;
        let x_2469 : f32 = u_xlat7.x;
        let x_2471 : f32 = u_xlat72;
        u_xlat72 = ((x_2467 * x_2469) + x_2471);
        let x_2474 : vec4<f32> = u_xlat10;
        let x_2475 : vec2<f32> = vec2<f32>(x_2474.x, x_2474.y);
        let x_2477 : f32 = vs_INTERP9.z;
        txVec37 = vec3<f32>(x_2475.x, x_2475.y, x_2477);
        let x_2484 : vec3<f32> = txVec37;
        let x_2486 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2484.xy, x_2484.z);
        u_xlat7.x = x_2486;
        let x_2489 : f32 = u_xlat14.w;
        let x_2491 : f32 = u_xlat7.x;
        let x_2493 : f32 = u_xlat72;
        u_xlat72 = ((x_2489 * x_2491) + x_2493);
        let x_2496 : vec4<f32> = u_xlat12;
        let x_2497 : vec2<f32> = vec2<f32>(x_2496.x, x_2496.y);
        let x_2499 : f32 = vs_INTERP9.z;
        txVec38 = vec3<f32>(x_2497.x, x_2497.y, x_2499);
        let x_2506 : vec3<f32> = txVec38;
        let x_2508 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2506.xy, x_2506.z);
        u_xlat7.x = x_2508;
        let x_2511 : f32 = u_xlat15.x;
        let x_2513 : f32 = u_xlat7.x;
        let x_2515 : f32 = u_xlat72;
        u_xlat72 = ((x_2511 * x_2513) + x_2515);
        let x_2518 : vec4<f32> = u_xlat12;
        let x_2519 : vec2<f32> = vec2<f32>(x_2518.z, x_2518.w);
        let x_2521 : f32 = vs_INTERP9.z;
        txVec39 = vec3<f32>(x_2519.x, x_2519.y, x_2521);
        let x_2528 : vec3<f32> = txVec39;
        let x_2530 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2528.xy, x_2528.z);
        u_xlat7.x = x_2530;
        let x_2533 : f32 = u_xlat15.y;
        let x_2535 : f32 = u_xlat7.x;
        let x_2537 : f32 = u_xlat72;
        u_xlat72 = ((x_2533 * x_2535) + x_2537);
        let x_2540 : vec4<f32> = u_xlat10;
        let x_2541 : vec2<f32> = vec2<f32>(x_2540.z, x_2540.w);
        let x_2543 : f32 = vs_INTERP9.z;
        txVec40 = vec3<f32>(x_2541.x, x_2541.y, x_2543);
        let x_2550 : vec3<f32> = txVec40;
        let x_2552 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2550.xy, x_2550.z);
        u_xlat7.x = x_2552;
        let x_2555 : f32 = u_xlat15.z;
        let x_2557 : f32 = u_xlat7.x;
        let x_2559 : f32 = u_xlat72;
        u_xlat72 = ((x_2555 * x_2557) + x_2559);
        let x_2562 : vec4<f32> = u_xlat9;
        let x_2563 : vec2<f32> = vec2<f32>(x_2562.x, x_2562.y);
        let x_2565 : f32 = vs_INTERP9.z;
        txVec41 = vec3<f32>(x_2563.x, x_2563.y, x_2565);
        let x_2572 : vec3<f32> = txVec41;
        let x_2574 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2572.xy, x_2572.z);
        u_xlat7.x = x_2574;
        let x_2577 : f32 = u_xlat15.w;
        let x_2579 : f32 = u_xlat7.x;
        let x_2581 : f32 = u_xlat72;
        u_xlat72 = ((x_2577 * x_2579) + x_2581);
        let x_2584 : vec4<f32> = u_xlat9;
        let x_2585 : vec2<f32> = vec2<f32>(x_2584.z, x_2584.w);
        let x_2587 : f32 = vs_INTERP9.z;
        txVec42 = vec3<f32>(x_2585.x, x_2585.y, x_2587);
        let x_2594 : vec3<f32> = txVec42;
        let x_2596 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2594.xy, x_2594.z);
        u_xlat7.x = x_2596;
        let x_2598 : f32 = u_xlat71;
        let x_2600 : f32 = u_xlat7.x;
        let x_2602 : f32 = u_xlat72;
        u_xlat0.x = ((x_2598 * x_2600) + x_2602);
      } else {
        let x_2606 : vec4<f32> = vs_INTERP9;
        let x_2609 : vec4<f32> = x_378.x_MainLightShadowmapSize;
        let x_2612 : vec2<f32> = ((vec2<f32>(x_2606.x, x_2606.y) * vec2<f32>(x_2609.z, x_2609.w)) + vec2<f32>(0.5f, 0.5f));
        let x_2613 : vec4<f32> = u_xlat7;
        u_xlat7 = vec4<f32>(x_2612.x, x_2612.y, x_2613.z, x_2613.w);
        let x_2615 : vec4<f32> = u_xlat7;
        let x_2617 : vec2<f32> = floor(vec2<f32>(x_2615.x, x_2615.y));
        let x_2618 : vec4<f32> = u_xlat7;
        u_xlat7 = vec4<f32>(x_2617.x, x_2617.y, x_2618.z, x_2618.w);
        let x_2620 : vec4<f32> = vs_INTERP9;
        let x_2623 : vec4<f32> = x_378.x_MainLightShadowmapSize;
        let x_2626 : vec4<f32> = u_xlat7;
        u_xlat51 = ((vec2<f32>(x_2620.x, x_2620.y) * vec2<f32>(x_2623.z, x_2623.w)) + -(vec2<f32>(x_2626.x, x_2626.y)));
        let x_2630 : vec2<f32> = u_xlat51;
        u_xlat8 = (vec4<f32>(x_2630.x, x_2630.x, x_2630.y, x_2630.y) + vec4<f32>(0.5f, 1.0f, 0.5f, 1.0f));
        let x_2633 : vec4<f32> = u_xlat8;
        let x_2635 : vec4<f32> = u_xlat8;
        u_xlat9 = (vec4<f32>(x_2633.x, x_2633.x, x_2633.z, x_2633.z) * vec4<f32>(x_2635.x, x_2635.x, x_2635.z, x_2635.z));
        let x_2638 : vec4<f32> = u_xlat9;
        let x_2640 : vec2<f32> = (vec2<f32>(x_2638.y, x_2638.w) * vec2<f32>(0.040816002f, 0.040816002f));
        let x_2641 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_2641.x, x_2640.x, x_2641.z, x_2640.y);
        let x_2643 : vec4<f32> = u_xlat9;
        let x_2646 : vec2<f32> = u_xlat51;
        let x_2648 : vec2<f32> = ((vec2<f32>(x_2643.x, x_2643.z) * vec2<f32>(0.5f, 0.5f)) + -(x_2646));
        let x_2649 : vec4<f32> = u_xlat8;
        u_xlat8 = vec4<f32>(x_2648.x, x_2649.y, x_2648.y, x_2649.w);
        let x_2651 : vec2<f32> = u_xlat51;
        let x_2653 : vec2<f32> = (-(x_2651) + vec2<f32>(1.0f, 1.0f));
        let x_2654 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_2653.x, x_2653.y, x_2654.z, x_2654.w);
        let x_2656 : vec2<f32> = u_xlat51;
        u_xlat53 = min(x_2656, vec2<f32>(0.0f, 0.0f));
        let x_2658 : vec2<f32> = u_xlat53;
        let x_2660 : vec2<f32> = u_xlat53;
        let x_2662 : vec4<f32> = u_xlat9;
        let x_2664 : vec2<f32> = ((-(x_2658) * x_2660) + vec2<f32>(x_2662.x, x_2662.y));
        let x_2665 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_2664.x, x_2664.y, x_2665.z, x_2665.w);
        let x_2667 : vec2<f32> = u_xlat51;
        u_xlat53 = max(x_2667, vec2<f32>(0.0f, 0.0f));
        let x_2669 : vec2<f32> = u_xlat53;
        let x_2671 : vec2<f32> = u_xlat53;
        let x_2673 : vec4<f32> = u_xlat8;
        let x_2675 : vec2<f32> = ((-(x_2669) * x_2671) + vec2<f32>(x_2673.y, x_2673.w));
        let x_2676 : vec3<f32> = u_xlat30;
        u_xlat30 = vec3<f32>(x_2675.x, x_2676.y, x_2675.y);
        let x_2678 : vec4<f32> = u_xlat9;
        let x_2680 : vec2<f32> = (vec2<f32>(x_2678.x, x_2678.y) + vec2<f32>(2.0f, 2.0f));
        let x_2681 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_2680.x, x_2680.y, x_2681.z, x_2681.w);
        let x_2683 : vec3<f32> = u_xlat30;
        let x_2685 : vec2<f32> = (vec2<f32>(x_2683.x, x_2683.z) + vec2<f32>(2.0f, 2.0f));
        let x_2686 : vec4<f32> = u_xlat8;
        u_xlat8 = vec4<f32>(x_2686.x, x_2685.x, x_2686.z, x_2685.y);
        let x_2689 : f32 = u_xlat8.y;
        u_xlat11.z = (x_2689 * 0.081632003f);
        let x_2692 : vec4<f32> = u_xlat8;
        let x_2694 : vec3<f32> = (vec3<f32>(x_2692.z, x_2692.x, x_2692.w) * vec3<f32>(0.081632003f, 0.081632003f, 0.081632003f));
        let x_2695 : vec4<f32> = u_xlat12;
        u_xlat12 = vec4<f32>(x_2694.x, x_2694.y, x_2694.z, x_2695.w);
        let x_2697 : vec4<f32> = u_xlat9;
        let x_2699 : vec2<f32> = (vec2<f32>(x_2697.x, x_2697.y) * vec2<f32>(0.081632003f, 0.081632003f));
        let x_2700 : vec4<f32> = u_xlat8;
        u_xlat8 = vec4<f32>(x_2699.x, x_2699.y, x_2700.z, x_2700.w);
        let x_2703 : f32 = u_xlat12.y;
        u_xlat11.x = x_2703;
        let x_2705 : vec2<f32> = u_xlat51;
        let x_2708 : vec2<f32> = ((vec2<f32>(x_2705.x, x_2705.x) * vec2<f32>(-0.081632003f, 0.081632003f)) + vec2<f32>(0.163264006f, 0.081632003f));
        let x_2709 : vec4<f32> = u_xlat11;
        u_xlat11 = vec4<f32>(x_2709.x, x_2708.x, x_2709.z, x_2708.y);
        let x_2711 : vec2<f32> = u_xlat51;
        let x_2714 : vec2<f32> = ((vec2<f32>(x_2711.x, x_2711.x) * vec2<f32>(-0.081632003f, 0.081632003f)) + vec2<f32>(0.081632003f, 0.163264006f));
        let x_2715 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_2714.x, x_2715.y, x_2714.y, x_2715.w);
        let x_2718 : f32 = u_xlat8.x;
        u_xlat9.y = x_2718;
        let x_2721 : f32 = u_xlat10.y;
        u_xlat9.w = x_2721;
        let x_2723 : vec4<f32> = u_xlat9;
        let x_2724 : vec4<f32> = u_xlat11;
        u_xlat11 = (x_2723 + x_2724);
        let x_2726 : vec2<f32> = u_xlat51;
        let x_2729 : vec2<f32> = ((vec2<f32>(x_2726.y, x_2726.y) * vec2<f32>(-0.081632003f, 0.081632003f)) + vec2<f32>(0.163264006f, 0.081632003f));
        let x_2730 : vec4<f32> = u_xlat12;
        u_xlat12 = vec4<f32>(x_2730.x, x_2729.x, x_2730.z, x_2729.y);
        let x_2732 : vec2<f32> = u_xlat51;
        let x_2735 : vec2<f32> = ((vec2<f32>(x_2732.y, x_2732.y) * vec2<f32>(-0.081632003f, 0.081632003f)) + vec2<f32>(0.081632003f, 0.163264006f));
        let x_2736 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_2735.x, x_2736.y, x_2735.y, x_2736.w);
        let x_2739 : f32 = u_xlat8.y;
        u_xlat10.y = x_2739;
        let x_2741 : vec4<f32> = u_xlat10;
        let x_2742 : vec4<f32> = u_xlat12;
        u_xlat8 = (x_2741 + x_2742);
        let x_2744 : vec4<f32> = u_xlat9;
        let x_2745 : vec4<f32> = u_xlat11;
        u_xlat9 = (x_2744 / x_2745);
        let x_2747 : vec4<f32> = u_xlat9;
        u_xlat9 = (x_2747 + vec4<f32>(-3.5f, -1.5f, 0.5f, 2.5f));
        let x_2749 : vec4<f32> = u_xlat10;
        let x_2750 : vec4<f32> = u_xlat8;
        u_xlat10 = (x_2749 / x_2750);
        let x_2752 : vec4<f32> = u_xlat10;
        u_xlat10 = (x_2752 + vec4<f32>(-3.5f, -1.5f, 0.5f, 2.5f));
        let x_2754 : vec4<f32> = u_xlat9;
        let x_2757 : vec4<f32> = x_378.x_MainLightShadowmapSize;
        u_xlat9 = (vec4<f32>(x_2754.w, x_2754.x, x_2754.y, x_2754.z) * vec4<f32>(x_2757.x, x_2757.x, x_2757.x, x_2757.x));
        let x_2760 : vec4<f32> = u_xlat10;
        let x_2763 : vec4<f32> = x_378.x_MainLightShadowmapSize;
        u_xlat10 = (vec4<f32>(x_2760.x, x_2760.w, x_2760.y, x_2760.z) * vec4<f32>(x_2763.y, x_2763.y, x_2763.y, x_2763.y));
        let x_2766 : vec4<f32> = u_xlat9;
        let x_2767 : vec3<f32> = vec3<f32>(x_2766.y, x_2766.z, x_2766.w);
        let x_2768 : vec4<f32> = u_xlat12;
        u_xlat12 = vec4<f32>(x_2767.x, x_2768.y, x_2767.y, x_2767.z);
        let x_2771 : f32 = u_xlat10.x;
        u_xlat12.y = x_2771;
        let x_2773 : vec4<f32> = u_xlat7;
        let x_2776 : vec4<f32> = x_378.x_MainLightShadowmapSize;
        let x_2779 : vec4<f32> = u_xlat12;
        u_xlat13 = ((vec4<f32>(x_2773.x, x_2773.y, x_2773.x, x_2773.y) * vec4<f32>(x_2776.x, x_2776.y, x_2776.x, x_2776.y)) + vec4<f32>(x_2779.x, x_2779.y, x_2779.z, x_2779.y));
        let x_2782 : vec4<f32> = u_xlat7;
        let x_2785 : vec4<f32> = x_378.x_MainLightShadowmapSize;
        let x_2788 : vec4<f32> = u_xlat12;
        u_xlat51 = ((vec2<f32>(x_2782.x, x_2782.y) * vec2<f32>(x_2785.x, x_2785.y)) + vec2<f32>(x_2788.w, x_2788.y));
        let x_2792 : f32 = u_xlat12.y;
        u_xlat9.y = x_2792;
        let x_2795 : f32 = u_xlat10.z;
        u_xlat12.y = x_2795;
        let x_2797 : vec4<f32> = u_xlat7;
        let x_2800 : vec4<f32> = x_378.x_MainLightShadowmapSize;
        let x_2803 : vec4<f32> = u_xlat12;
        u_xlat14 = ((vec4<f32>(x_2797.x, x_2797.y, x_2797.x, x_2797.y) * vec4<f32>(x_2800.x, x_2800.y, x_2800.x, x_2800.y)) + vec4<f32>(x_2803.x, x_2803.y, x_2803.z, x_2803.y));
        let x_2806 : vec4<f32> = u_xlat7;
        let x_2809 : vec4<f32> = x_378.x_MainLightShadowmapSize;
        let x_2812 : vec4<f32> = u_xlat12;
        let x_2814 : vec2<f32> = ((vec2<f32>(x_2806.x, x_2806.y) * vec2<f32>(x_2809.x, x_2809.y)) + vec2<f32>(x_2812.w, x_2812.y));
        let x_2815 : vec4<f32> = u_xlat15;
        u_xlat15 = vec4<f32>(x_2814.x, x_2814.y, x_2815.z, x_2815.w);
        let x_2818 : f32 = u_xlat12.y;
        u_xlat9.z = x_2818;
        let x_2820 : vec4<f32> = u_xlat7;
        let x_2823 : vec4<f32> = x_378.x_MainLightShadowmapSize;
        let x_2826 : vec4<f32> = u_xlat9;
        u_xlat16 = ((vec4<f32>(x_2820.x, x_2820.y, x_2820.x, x_2820.y) * vec4<f32>(x_2823.x, x_2823.y, x_2823.x, x_2823.y)) + vec4<f32>(x_2826.x, x_2826.y, x_2826.x, x_2826.z));
        let x_2830 : f32 = u_xlat10.w;
        u_xlat12.y = x_2830;
        let x_2832 : vec4<f32> = u_xlat7;
        let x_2835 : vec4<f32> = x_378.x_MainLightShadowmapSize;
        let x_2838 : vec4<f32> = u_xlat12;
        u_xlat17 = ((vec4<f32>(x_2832.x, x_2832.y, x_2832.x, x_2832.y) * vec4<f32>(x_2835.x, x_2835.y, x_2835.x, x_2835.y)) + vec4<f32>(x_2838.x, x_2838.y, x_2838.z, x_2838.y));
        let x_2841 : vec4<f32> = u_xlat7;
        let x_2844 : vec4<f32> = x_378.x_MainLightShadowmapSize;
        let x_2847 : vec4<f32> = u_xlat12;
        let x_2849 : vec2<f32> = ((vec2<f32>(x_2841.x, x_2841.y) * vec2<f32>(x_2844.x, x_2844.y)) + vec2<f32>(x_2847.w, x_2847.y));
        let x_2850 : vec3<f32> = u_xlat31;
        u_xlat31 = vec3<f32>(x_2849.x, x_2849.y, x_2850.z);
        let x_2853 : f32 = u_xlat12.y;
        u_xlat9.w = x_2853;
        let x_2856 : vec4<f32> = u_xlat7;
        let x_2859 : vec4<f32> = x_378.x_MainLightShadowmapSize;
        let x_2862 : vec4<f32> = u_xlat9;
        u_xlat59 = ((vec2<f32>(x_2856.x, x_2856.y) * vec2<f32>(x_2859.x, x_2859.y)) + vec2<f32>(x_2862.x, x_2862.w));
        let x_2865 : vec4<f32> = u_xlat12;
        let x_2866 : vec3<f32> = vec3<f32>(x_2865.x, x_2865.z, x_2865.w);
        let x_2867 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_2866.x, x_2867.y, x_2866.y, x_2866.z);
        let x_2869 : vec4<f32> = u_xlat7;
        let x_2872 : vec4<f32> = x_378.x_MainLightShadowmapSize;
        let x_2875 : vec4<f32> = u_xlat10;
        u_xlat12 = ((vec4<f32>(x_2869.x, x_2869.y, x_2869.x, x_2869.y) * vec4<f32>(x_2872.x, x_2872.y, x_2872.x, x_2872.y)) + vec4<f32>(x_2875.x, x_2875.y, x_2875.z, x_2875.y));
        let x_2878 : vec4<f32> = u_xlat7;
        let x_2881 : vec4<f32> = x_378.x_MainLightShadowmapSize;
        let x_2884 : vec4<f32> = u_xlat10;
        u_xlat54 = ((vec2<f32>(x_2878.x, x_2878.y) * vec2<f32>(x_2881.x, x_2881.y)) + vec2<f32>(x_2884.w, x_2884.y));
        let x_2888 : f32 = u_xlat9.x;
        u_xlat10.x = x_2888;
        let x_2890 : vec4<f32> = u_xlat7;
        let x_2893 : vec4<f32> = x_378.x_MainLightShadowmapSize;
        let x_2896 : vec4<f32> = u_xlat10;
        let x_2898 : vec2<f32> = ((vec2<f32>(x_2890.x, x_2890.y) * vec2<f32>(x_2893.x, x_2893.y)) + vec2<f32>(x_2896.x, x_2896.y));
        let x_2899 : vec4<f32> = u_xlat7;
        u_xlat7 = vec4<f32>(x_2898.x, x_2898.y, x_2899.z, x_2899.w);
        let x_2901 : vec4<f32> = u_xlat8;
        let x_2903 : vec4<f32> = u_xlat11;
        u_xlat18 = (vec4<f32>(x_2901.x, x_2901.x, x_2901.x, x_2901.x) * x_2903);
        let x_2905 : vec4<f32> = u_xlat8;
        let x_2907 : vec4<f32> = u_xlat11;
        u_xlat19 = (vec4<f32>(x_2905.y, x_2905.y, x_2905.y, x_2905.y) * x_2907);
        let x_2909 : vec4<f32> = u_xlat8;
        let x_2911 : vec4<f32> = u_xlat11;
        u_xlat20 = (vec4<f32>(x_2909.z, x_2909.z, x_2909.z, x_2909.z) * x_2911);
        let x_2913 : vec4<f32> = u_xlat8;
        let x_2915 : vec4<f32> = u_xlat11;
        u_xlat8 = (vec4<f32>(x_2913.w, x_2913.w, x_2913.w, x_2913.w) * x_2915);
        let x_2918 : vec4<f32> = u_xlat13;
        let x_2919 : vec2<f32> = vec2<f32>(x_2918.x, x_2918.y);
        let x_2921 : f32 = vs_INTERP9.z;
        txVec43 = vec3<f32>(x_2919.x, x_2919.y, x_2921);
        let x_2928 : vec3<f32> = txVec43;
        let x_2930 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2928.xy, x_2928.z);
        u_xlat71 = x_2930;
        let x_2932 : vec4<f32> = u_xlat13;
        let x_2933 : vec2<f32> = vec2<f32>(x_2932.z, x_2932.w);
        let x_2935 : f32 = vs_INTERP9.z;
        txVec44 = vec3<f32>(x_2933.x, x_2933.y, x_2935);
        let x_2942 : vec3<f32> = txVec44;
        let x_2944 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2942.xy, x_2942.z);
        u_xlat72 = x_2944;
        let x_2945 : f32 = u_xlat72;
        let x_2947 : f32 = u_xlat18.y;
        u_xlat72 = (x_2945 * x_2947);
        let x_2950 : f32 = u_xlat18.x;
        let x_2951 : f32 = u_xlat71;
        let x_2953 : f32 = u_xlat72;
        u_xlat71 = ((x_2950 * x_2951) + x_2953);
        let x_2956 : vec2<f32> = u_xlat51;
        let x_2958 : f32 = vs_INTERP9.z;
        txVec45 = vec3<f32>(x_2956.x, x_2956.y, x_2958);
        let x_2965 : vec3<f32> = txVec45;
        let x_2967 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2965.xy, x_2965.z);
        u_xlat72 = x_2967;
        let x_2969 : f32 = u_xlat18.z;
        let x_2970 : f32 = u_xlat72;
        let x_2972 : f32 = u_xlat71;
        u_xlat71 = ((x_2969 * x_2970) + x_2972);
        let x_2975 : vec4<f32> = u_xlat16;
        let x_2976 : vec2<f32> = vec2<f32>(x_2975.x, x_2975.y);
        let x_2978 : f32 = vs_INTERP9.z;
        txVec46 = vec3<f32>(x_2976.x, x_2976.y, x_2978);
        let x_2985 : vec3<f32> = txVec46;
        let x_2987 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2985.xy, x_2985.z);
        u_xlat72 = x_2987;
        let x_2989 : f32 = u_xlat18.w;
        let x_2990 : f32 = u_xlat72;
        let x_2992 : f32 = u_xlat71;
        u_xlat71 = ((x_2989 * x_2990) + x_2992);
        let x_2995 : vec4<f32> = u_xlat14;
        let x_2996 : vec2<f32> = vec2<f32>(x_2995.x, x_2995.y);
        let x_2998 : f32 = vs_INTERP9.z;
        txVec47 = vec3<f32>(x_2996.x, x_2996.y, x_2998);
        let x_3005 : vec3<f32> = txVec47;
        let x_3007 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_3005.xy, x_3005.z);
        u_xlat72 = x_3007;
        let x_3009 : f32 = u_xlat19.x;
        let x_3010 : f32 = u_xlat72;
        let x_3012 : f32 = u_xlat71;
        u_xlat71 = ((x_3009 * x_3010) + x_3012);
        let x_3015 : vec4<f32> = u_xlat14;
        let x_3016 : vec2<f32> = vec2<f32>(x_3015.z, x_3015.w);
        let x_3018 : f32 = vs_INTERP9.z;
        txVec48 = vec3<f32>(x_3016.x, x_3016.y, x_3018);
        let x_3025 : vec3<f32> = txVec48;
        let x_3027 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_3025.xy, x_3025.z);
        u_xlat72 = x_3027;
        let x_3029 : f32 = u_xlat19.y;
        let x_3030 : f32 = u_xlat72;
        let x_3032 : f32 = u_xlat71;
        u_xlat71 = ((x_3029 * x_3030) + x_3032);
        let x_3035 : vec4<f32> = u_xlat15;
        let x_3036 : vec2<f32> = vec2<f32>(x_3035.x, x_3035.y);
        let x_3038 : f32 = vs_INTERP9.z;
        txVec49 = vec3<f32>(x_3036.x, x_3036.y, x_3038);
        let x_3045 : vec3<f32> = txVec49;
        let x_3047 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_3045.xy, x_3045.z);
        u_xlat72 = x_3047;
        let x_3049 : f32 = u_xlat19.z;
        let x_3050 : f32 = u_xlat72;
        let x_3052 : f32 = u_xlat71;
        u_xlat71 = ((x_3049 * x_3050) + x_3052);
        let x_3055 : vec4<f32> = u_xlat16;
        let x_3056 : vec2<f32> = vec2<f32>(x_3055.z, x_3055.w);
        let x_3058 : f32 = vs_INTERP9.z;
        txVec50 = vec3<f32>(x_3056.x, x_3056.y, x_3058);
        let x_3065 : vec3<f32> = txVec50;
        let x_3067 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_3065.xy, x_3065.z);
        u_xlat72 = x_3067;
        let x_3069 : f32 = u_xlat19.w;
        let x_3070 : f32 = u_xlat72;
        let x_3072 : f32 = u_xlat71;
        u_xlat71 = ((x_3069 * x_3070) + x_3072);
        let x_3075 : vec4<f32> = u_xlat17;
        let x_3076 : vec2<f32> = vec2<f32>(x_3075.x, x_3075.y);
        let x_3078 : f32 = vs_INTERP9.z;
        txVec51 = vec3<f32>(x_3076.x, x_3076.y, x_3078);
        let x_3085 : vec3<f32> = txVec51;
        let x_3087 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_3085.xy, x_3085.z);
        u_xlat72 = x_3087;
        let x_3089 : f32 = u_xlat20.x;
        let x_3090 : f32 = u_xlat72;
        let x_3092 : f32 = u_xlat71;
        u_xlat71 = ((x_3089 * x_3090) + x_3092);
        let x_3095 : vec4<f32> = u_xlat17;
        let x_3096 : vec2<f32> = vec2<f32>(x_3095.z, x_3095.w);
        let x_3098 : f32 = vs_INTERP9.z;
        txVec52 = vec3<f32>(x_3096.x, x_3096.y, x_3098);
        let x_3105 : vec3<f32> = txVec52;
        let x_3107 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_3105.xy, x_3105.z);
        u_xlat72 = x_3107;
        let x_3109 : f32 = u_xlat20.y;
        let x_3110 : f32 = u_xlat72;
        let x_3112 : f32 = u_xlat71;
        u_xlat71 = ((x_3109 * x_3110) + x_3112);
        let x_3115 : vec3<f32> = u_xlat31;
        let x_3116 : vec2<f32> = vec2<f32>(x_3115.x, x_3115.y);
        let x_3118 : f32 = vs_INTERP9.z;
        txVec53 = vec3<f32>(x_3116.x, x_3116.y, x_3118);
        let x_3125 : vec3<f32> = txVec53;
        let x_3127 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_3125.xy, x_3125.z);
        u_xlat72 = x_3127;
        let x_3129 : f32 = u_xlat20.z;
        let x_3130 : f32 = u_xlat72;
        let x_3132 : f32 = u_xlat71;
        u_xlat71 = ((x_3129 * x_3130) + x_3132);
        let x_3135 : vec2<f32> = u_xlat59;
        let x_3137 : f32 = vs_INTERP9.z;
        txVec54 = vec3<f32>(x_3135.x, x_3135.y, x_3137);
        let x_3144 : vec3<f32> = txVec54;
        let x_3146 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_3144.xy, x_3144.z);
        u_xlat72 = x_3146;
        let x_3148 : f32 = u_xlat20.w;
        let x_3149 : f32 = u_xlat72;
        let x_3151 : f32 = u_xlat71;
        u_xlat71 = ((x_3148 * x_3149) + x_3151);
        let x_3154 : vec4<f32> = u_xlat12;
        let x_3155 : vec2<f32> = vec2<f32>(x_3154.x, x_3154.y);
        let x_3157 : f32 = vs_INTERP9.z;
        txVec55 = vec3<f32>(x_3155.x, x_3155.y, x_3157);
        let x_3164 : vec3<f32> = txVec55;
        let x_3166 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_3164.xy, x_3164.z);
        u_xlat72 = x_3166;
        let x_3168 : f32 = u_xlat8.x;
        let x_3169 : f32 = u_xlat72;
        let x_3171 : f32 = u_xlat71;
        u_xlat71 = ((x_3168 * x_3169) + x_3171);
        let x_3174 : vec4<f32> = u_xlat12;
        let x_3175 : vec2<f32> = vec2<f32>(x_3174.z, x_3174.w);
        let x_3177 : f32 = vs_INTERP9.z;
        txVec56 = vec3<f32>(x_3175.x, x_3175.y, x_3177);
        let x_3184 : vec3<f32> = txVec56;
        let x_3186 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_3184.xy, x_3184.z);
        u_xlat72 = x_3186;
        let x_3188 : f32 = u_xlat8.y;
        let x_3189 : f32 = u_xlat72;
        let x_3191 : f32 = u_xlat71;
        u_xlat71 = ((x_3188 * x_3189) + x_3191);
        let x_3194 : vec2<f32> = u_xlat54;
        let x_3196 : f32 = vs_INTERP9.z;
        txVec57 = vec3<f32>(x_3194.x, x_3194.y, x_3196);
        let x_3203 : vec3<f32> = txVec57;
        let x_3205 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_3203.xy, x_3203.z);
        u_xlat72 = x_3205;
        let x_3207 : f32 = u_xlat8.z;
        let x_3208 : f32 = u_xlat72;
        let x_3210 : f32 = u_xlat71;
        u_xlat71 = ((x_3207 * x_3208) + x_3210);
        let x_3213 : vec4<f32> = u_xlat7;
        let x_3214 : vec2<f32> = vec2<f32>(x_3213.x, x_3213.y);
        let x_3216 : f32 = vs_INTERP9.z;
        txVec58 = vec3<f32>(x_3214.x, x_3214.y, x_3216);
        let x_3223 : vec3<f32> = txVec58;
        let x_3225 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_3223.xy, x_3223.z);
        u_xlat72 = x_3225;
        let x_3227 : f32 = u_xlat8.w;
        let x_3228 : f32 = u_xlat72;
        let x_3230 : f32 = u_xlat71;
        u_xlat0.x = ((x_3227 * x_3228) + x_3230);
      }
    }
  } else {
    let x_3235 : vec4<f32> = vs_INTERP9;
    let x_3236 : vec2<f32> = vec2<f32>(x_3235.x, x_3235.y);
    let x_3238 : f32 = vs_INTERP9.z;
    txVec59 = vec3<f32>(x_3236.x, x_3236.y, x_3238);
    let x_3245 : vec3<f32> = txVec59;
    let x_3247 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_3245.xy, x_3245.z);
    u_xlat0.x = x_3247;
  }
  let x_3250 : f32 = u_xlat0.x;
  let x_3252 : f32 = x_378.x_MainLightShadowParams.x;
  let x_3255 : f32 = u_xlat2.x;
  u_xlat0.x = ((x_3250 * x_3252) + x_3255);
  let x_3262 : f32 = vs_INTERP9.z;
  u_xlatb2.x = (0.0f >= x_3262);
  let x_3266 : f32 = vs_INTERP9.z;
  u_xlatb71 = (x_3266 >= 1.0f);
  let x_3269 : bool = u_xlatb2.x;
  let x_3270 : bool = u_xlatb71;
  u_xlatb2.x = (x_3269 | x_3270);
  let x_3274 : bool = u_xlatb2.x;
  if (x_3274) {
    x_3275 = 1.0f;
  } else {
    let x_3280 : f32 = u_xlat0.x;
    x_3275 = x_3280;
  }
  let x_3281 : f32 = x_3275;
  u_xlat0.x = x_3281;
  let x_3283 : vec3<f32> = vs_INTERP0;
  let x_3285 : vec3<f32> = x_158.x_WorldSpaceCameraPos;
  let x_3287 : vec3<f32> = (x_3283 + -(x_3285));
  let x_3288 : vec4<f32> = u_xlat7;
  u_xlat7 = vec4<f32>(x_3287.x, x_3287.y, x_3287.z, x_3288.w);
  let x_3290 : vec4<f32> = u_xlat7;
  let x_3292 : vec4<f32> = u_xlat7;
  u_xlat2.x = dot(vec3<f32>(x_3290.x, x_3290.y, x_3290.z), vec3<f32>(x_3292.x, x_3292.y, x_3292.z));
  let x_3297 : f32 = u_xlat2.x;
  let x_3299 : f32 = x_378.x_MainLightShadowParams.z;
  let x_3302 : f32 = x_378.x_MainLightShadowParams.w;
  u_xlat2.x = ((x_3297 * x_3299) + x_3302);
  let x_3306 : f32 = u_xlat2.x;
  u_xlat2.x = clamp(x_3306, 0.0f, 1.0f);
  let x_3310 : f32 = u_xlat0.x;
  u_xlat71 = (-(x_3310) + 1.0f);
  let x_3314 : f32 = u_xlat2.x;
  let x_3315 : f32 = u_xlat71;
  let x_3318 : f32 = u_xlat0.x;
  u_xlat0.x = ((x_3314 * x_3315) + x_3318);
  let x_3327 : f32 = x_3325.x_MainLightCookieTextureFormat;
  u_xlatb2.x = !((x_3327 == -1.0f));
  let x_3331 : bool = u_xlatb2.x;
  if (x_3331) {
    let x_3334 : vec3<f32> = vs_INTERP0;
    let x_3337 : vec4<f32> = x_3325.x_MainLightWorldToLight[1i];
    let x_3339 : vec2<f32> = (vec2<f32>(x_3334.y, x_3334.y) * vec2<f32>(x_3337.x, x_3337.y));
    let x_3340 : vec4<f32> = u_xlat7;
    u_xlat7 = vec4<f32>(x_3339.x, x_3339.y, x_3340.z, x_3340.w);
    let x_3343 : vec4<f32> = x_3325.x_MainLightWorldToLight[0i];
    let x_3345 : vec3<f32> = vs_INTERP0;
    let x_3348 : vec4<f32> = u_xlat7;
    let x_3350 : vec2<f32> = ((vec2<f32>(x_3343.x, x_3343.y) * vec2<f32>(x_3345.x, x_3345.x)) + vec2<f32>(x_3348.x, x_3348.y));
    let x_3351 : vec4<f32> = u_xlat7;
    u_xlat7 = vec4<f32>(x_3350.x, x_3350.y, x_3351.z, x_3351.w);
    let x_3354 : vec4<f32> = x_3325.x_MainLightWorldToLight[2i];
    let x_3356 : vec3<f32> = vs_INTERP0;
    let x_3359 : vec4<f32> = u_xlat7;
    let x_3361 : vec2<f32> = ((vec2<f32>(x_3354.x, x_3354.y) * vec2<f32>(x_3356.z, x_3356.z)) + vec2<f32>(x_3359.x, x_3359.y));
    let x_3362 : vec4<f32> = u_xlat7;
    u_xlat7 = vec4<f32>(x_3361.x, x_3361.y, x_3362.z, x_3362.w);
    let x_3364 : vec4<f32> = u_xlat7;
    let x_3367 : vec4<f32> = x_3325.x_MainLightWorldToLight[3i];
    let x_3369 : vec2<f32> = (vec2<f32>(x_3364.x, x_3364.y) + vec2<f32>(x_3367.x, x_3367.y));
    let x_3370 : vec4<f32> = u_xlat7;
    u_xlat7 = vec4<f32>(x_3369.x, x_3369.y, x_3370.z, x_3370.w);
    let x_3372 : vec4<f32> = u_xlat7;
    let x_3375 : vec2<f32> = ((vec2<f32>(x_3372.x, x_3372.y) * vec2<f32>(0.5f, 0.5f)) + vec2<f32>(0.5f, 0.5f));
    let x_3376 : vec4<f32> = u_xlat7;
    u_xlat7 = vec4<f32>(x_3375.x, x_3375.y, x_3376.z, x_3376.w);
    let x_3383 : vec4<f32> = u_xlat7;
    let x_3386 : f32 = x_158.x_GlobalMipBias.x;
    let x_3387 : vec4<f32> = textureSampleBias(x_MainLightCookieTexture, sampler_MainLightCookieTexture, vec2<f32>(x_3383.x, x_3383.y), x_3386);
    u_xlat7 = x_3387;
    let x_3390 : f32 = x_3325.x_MainLightCookieTextureFormat;
    let x_3392 : f32 = x_3325.x_MainLightCookieTextureFormat;
    let x_3394 : f32 = x_3325.x_MainLightCookieTextureFormat;
    let x_3396 : f32 = x_3325.x_MainLightCookieTextureFormat;
    let x_3397 : vec4<f32> = vec4<f32>(x_3390, x_3392, x_3394, x_3396);
    let x_3404 : vec4<bool> = (vec4<f32>(x_3397.x, x_3397.y, x_3397.z, x_3397.w) == vec4<f32>(0.0f, 1.0f, 0.0f, 0.0f));
    u_xlatb8 = vec2<bool>(x_3404.x, x_3404.y);
    let x_3407 : bool = u_xlatb8.y;
    if (x_3407) {
      let x_3412 : f32 = u_xlat7.w;
      x_3408 = x_3412;
    } else {
      let x_3415 : f32 = u_xlat7.x;
      x_3408 = x_3415;
    }
    let x_3416 : f32 = x_3408;
    u_xlat2.x = x_3416;
    let x_3419 : bool = u_xlatb8.x;
    if (x_3419) {
      let x_3423 : vec4<f32> = u_xlat7;
      x_3420 = vec3<f32>(x_3423.x, x_3423.y, x_3423.z);
    } else {
      let x_3426 : vec3<f32> = u_xlat2;
      x_3420 = vec3<f32>(x_3426.x, x_3426.x, x_3426.x);
    }
    let x_3428 : vec3<f32> = x_3420;
    let x_3429 : vec4<f32> = u_xlat7;
    u_xlat7 = vec4<f32>(x_3428.x, x_3428.y, x_3428.z, x_3429.w);
  } else {
    u_xlat7.x = 1.0f;
    u_xlat7.y = 1.0f;
    u_xlat7.z = 1.0f;
  }
  let x_3435 : vec4<f32> = u_xlat7;
  let x_3438 : vec4<f32> = x_158.x_MainLightColor;
  let x_3440 : vec3<f32> = (vec3<f32>(x_3435.x, x_3435.y, x_3435.z) * vec3<f32>(x_3438.x, x_3438.y, x_3438.z));
  let x_3441 : vec4<f32> = u_xlat7;
  u_xlat7 = vec4<f32>(x_3440.x, x_3440.y, x_3440.z, x_3441.w);
  let x_3443 : f32 = u_xlat48;
  let x_3445 : vec4<f32> = u_xlat7;
  let x_3447 : vec3<f32> = (vec3<f32>(x_3443, x_3443, x_3443) * vec3<f32>(x_3445.x, x_3445.y, x_3445.z));
  let x_3448 : vec4<f32> = u_xlat7;
  u_xlat7 = vec4<f32>(x_3447.x, x_3447.y, x_3447.z, x_3448.w);
  let x_3450 : vec3<f32> = u_xlat5;
  let x_3452 : vec3<f32> = u_xlat22;
  u_xlat2.x = dot(-(x_3450), x_3452);
  let x_3456 : f32 = u_xlat2.x;
  let x_3458 : f32 = u_xlat2.x;
  u_xlat2.x = (x_3456 + x_3458);
  let x_3461 : vec3<f32> = u_xlat22;
  let x_3462 : vec3<f32> = u_xlat2;
  let x_3466 : vec3<f32> = u_xlat5;
  let x_3468 : vec3<f32> = ((x_3461 * -(vec3<f32>(x_3462.x, x_3462.x, x_3462.x))) + -(x_3466));
  let x_3469 : vec4<f32> = u_xlat8;
  u_xlat8 = vec4<f32>(x_3468.x, x_3468.y, x_3468.z, x_3469.w);
  let x_3471 : vec3<f32> = u_xlat22;
  let x_3472 : vec3<f32> = u_xlat5;
  u_xlat2.x = dot(x_3471, x_3472);
  let x_3476 : f32 = u_xlat2.x;
  u_xlat2.x = clamp(x_3476, 0.0f, 1.0f);
  let x_3480 : f32 = u_xlat2.x;
  u_xlat2.x = (-(x_3480) + 1.0f);
  let x_3485 : f32 = u_xlat2.x;
  let x_3487 : f32 = u_xlat2.x;
  u_xlat2.x = (x_3485 * x_3487);
  let x_3491 : f32 = u_xlat2.x;
  let x_3493 : f32 = u_xlat2.x;
  u_xlat2.x = (x_3491 * x_3493);
  let x_3497 : f32 = u_xlat46.x;
  u_xlat71 = ((-(x_3497) * 0.699999988f) + 1.700000048f);
  let x_3504 : f32 = u_xlat46.x;
  let x_3505 : f32 = u_xlat71;
  u_xlat46.x = (x_3504 * x_3505);
  let x_3509 : f32 = u_xlat46.x;
  u_xlat46.x = (x_3509 * 6.0f);
  let x_3521 : vec4<f32> = u_xlat8;
  let x_3524 : f32 = u_xlat46.x;
  let x_3525 : vec4<f32> = textureSampleLevel(unity_SpecCube0, samplerunity_SpecCube0, vec3<f32>(x_3521.x, x_3521.y, x_3521.z), x_3524);
  u_xlat8 = x_3525;
  let x_3527 : f32 = u_xlat8.w;
  u_xlat46.x = (x_3527 + -1.0f);
  let x_3531 : f32 = x_95.unity_SpecCube0_HDR.w;
  let x_3533 : f32 = u_xlat46.x;
  u_xlat46.x = ((x_3531 * x_3533) + 1.0f);
  let x_3538 : f32 = u_xlat46.x;
  u_xlat46.x = max(x_3538, 0.0f);
  let x_3542 : f32 = u_xlat46.x;
  u_xlat46.x = log2(x_3542);
  let x_3546 : f32 = u_xlat46.x;
  let x_3548 : f32 = x_95.unity_SpecCube0_HDR.y;
  u_xlat46.x = (x_3546 * x_3548);
  let x_3552 : f32 = u_xlat46.x;
  u_xlat46.x = exp2(x_3552);
  let x_3556 : f32 = u_xlat46.x;
  let x_3558 : f32 = x_95.unity_SpecCube0_HDR.x;
  u_xlat46.x = (x_3556 * x_3558);
  let x_3561 : vec4<f32> = u_xlat8;
  let x_3563 : vec2<f32> = u_xlat46;
  let x_3565 : vec3<f32> = (vec3<f32>(x_3561.x, x_3561.y, x_3561.z) * vec3<f32>(x_3563.x, x_3563.x, x_3563.x));
  let x_3566 : vec4<f32> = u_xlat8;
  u_xlat8 = vec4<f32>(x_3565.x, x_3565.y, x_3565.z, x_3566.w);
  let x_3568 : f32 = u_xlat68;
  let x_3570 : f32 = u_xlat68;
  u_xlat46 = ((vec2<f32>(x_3568, x_3568) * vec2<f32>(x_3570, x_3570)) + vec2<f32>(-1.0f, 1.0f));
  let x_3576 : f32 = u_xlat46.y;
  u_xlat68 = (1.0f / x_3576);
  let x_3579 : f32 = u_xlat2.x;
  let x_3581 : f32 = u_xlat26.x;
  u_xlat2.x = ((x_3579 * x_3581) + 0.039999999f);
  let x_3587 : f32 = u_xlat2.x;
  let x_3588 : f32 = u_xlat68;
  u_xlat2.x = (x_3587 * x_3588);
  let x_3591 : vec3<f32> = u_xlat2;
  let x_3593 : vec4<f32> = u_xlat8;
  let x_3595 : vec3<f32> = (vec3<f32>(x_3591.x, x_3591.x, x_3591.x) * vec3<f32>(x_3593.x, x_3593.y, x_3593.z));
  let x_3596 : vec4<f32> = u_xlat8;
  u_xlat8 = vec4<f32>(x_3595.x, x_3595.y, x_3595.z, x_3596.w);
  let x_3598 : vec4<f32> = u_xlat3;
  let x_3600 : vec4<f32> = u_xlat6;
  let x_3603 : vec4<f32> = u_xlat8;
  let x_3605 : vec3<f32> = ((vec3<f32>(x_3598.x, x_3598.y, x_3598.z) * vec3<f32>(x_3600.x, x_3600.y, x_3600.z)) + vec3<f32>(x_3603.x, x_3603.y, x_3603.z));
  let x_3606 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_3605.x, x_3605.y, x_3605.z, x_3606.w);
  let x_3609 : f32 = u_xlat0.x;
  let x_3611 : f32 = x_95.unity_LightData.z;
  u_xlat0.x = (x_3609 * x_3611);
  let x_3614 : vec3<f32> = u_xlat22;
  let x_3616 : vec4<f32> = x_158.x_MainLightPosition;
  u_xlat2.x = dot(x_3614, vec3<f32>(x_3616.x, x_3616.y, x_3616.z));
  let x_3621 : f32 = u_xlat2.x;
  u_xlat2.x = clamp(x_3621, 0.0f, 1.0f);
  let x_3625 : f32 = u_xlat0.x;
  let x_3627 : f32 = u_xlat2.x;
  u_xlat0.x = (x_3625 * x_3627);
  let x_3630 : vec3<f32> = u_xlat0;
  let x_3632 : vec4<f32> = u_xlat7;
  let x_3634 : vec3<f32> = (vec3<f32>(x_3630.x, x_3630.x, x_3630.x) * vec3<f32>(x_3632.x, x_3632.y, x_3632.z));
  let x_3635 : vec4<f32> = u_xlat7;
  u_xlat7 = vec4<f32>(x_3634.x, x_3634.y, x_3634.z, x_3635.w);
  let x_3637 : vec3<f32> = u_xlat5;
  let x_3639 : vec4<f32> = x_158.x_MainLightPosition;
  let x_3641 : vec3<f32> = (x_3637 + vec3<f32>(x_3639.x, x_3639.y, x_3639.z));
  let x_3642 : vec4<f32> = u_xlat8;
  u_xlat8 = vec4<f32>(x_3641.x, x_3641.y, x_3641.z, x_3642.w);
  let x_3644 : vec4<f32> = u_xlat8;
  let x_3646 : vec4<f32> = u_xlat8;
  u_xlat0.x = dot(vec3<f32>(x_3644.x, x_3644.y, x_3644.z), vec3<f32>(x_3646.x, x_3646.y, x_3646.z));
  let x_3651 : f32 = u_xlat0.x;
  u_xlat0.x = max(x_3651, 1.17549435e-37f);
  let x_3655 : f32 = u_xlat0.x;
  u_xlat0.x = inverseSqrt(x_3655);
  let x_3658 : vec3<f32> = u_xlat0;
  let x_3660 : vec4<f32> = u_xlat8;
  let x_3662 : vec3<f32> = (vec3<f32>(x_3658.x, x_3658.x, x_3658.x) * vec3<f32>(x_3660.x, x_3660.y, x_3660.z));
  let x_3663 : vec4<f32> = u_xlat8;
  u_xlat8 = vec4<f32>(x_3662.x, x_3662.y, x_3662.z, x_3663.w);
  let x_3665 : vec3<f32> = u_xlat22;
  let x_3666 : vec4<f32> = u_xlat8;
  u_xlat0.x = dot(x_3665, vec3<f32>(x_3666.x, x_3666.y, x_3666.z));
  let x_3671 : f32 = u_xlat0.x;
  u_xlat0.x = clamp(x_3671, 0.0f, 1.0f);
  let x_3675 : vec4<f32> = x_158.x_MainLightPosition;
  let x_3677 : vec4<f32> = u_xlat8;
  u_xlat2.x = dot(vec3<f32>(x_3675.x, x_3675.y, x_3675.z), vec3<f32>(x_3677.x, x_3677.y, x_3677.z));
  let x_3682 : f32 = u_xlat2.x;
  u_xlat2.x = clamp(x_3682, 0.0f, 1.0f);
  let x_3686 : f32 = u_xlat0.x;
  let x_3688 : f32 = u_xlat0.x;
  u_xlat0.x = (x_3686 * x_3688);
  let x_3692 : f32 = u_xlat0.x;
  let x_3694 : f32 = u_xlat46.x;
  u_xlat0.x = ((x_3692 * x_3694) + 1.000010014f);
  let x_3700 : f32 = u_xlat2.x;
  let x_3702 : f32 = u_xlat2.x;
  u_xlat2.x = (x_3700 * x_3702);
  let x_3706 : f32 = u_xlat0.x;
  let x_3708 : f32 = u_xlat0.x;
  u_xlat0.x = (x_3706 * x_3708);
  let x_3712 : f32 = u_xlat2.x;
  u_xlat2.x = max(x_3712, 0.100000001f);
  let x_3717 : f32 = u_xlat0.x;
  let x_3719 : f32 = u_xlat2.x;
  u_xlat0.x = (x_3717 * x_3719);
  let x_3722 : f32 = u_xlat70;
  let x_3724 : f32 = u_xlat0.x;
  u_xlat0.x = (x_3722 * x_3724);
  let x_3727 : f32 = u_xlat69;
  let x_3729 : f32 = u_xlat0.x;
  u_xlat0.x = (x_3727 / x_3729);
  let x_3732 : vec3<f32> = u_xlat0;
  let x_3736 : vec4<f32> = u_xlat6;
  let x_3738 : vec3<f32> = ((vec3<f32>(x_3732.x, x_3732.x, x_3732.x) * vec3<f32>(0.039999999f, 0.039999999f, 0.039999999f)) + vec3<f32>(x_3736.x, x_3736.y, x_3736.z));
  let x_3739 : vec4<f32> = u_xlat8;
  u_xlat8 = vec4<f32>(x_3738.x, x_3738.y, x_3738.z, x_3739.w);
  let x_3741 : vec4<f32> = u_xlat7;
  let x_3743 : vec4<f32> = u_xlat8;
  let x_3745 : vec3<f32> = (vec3<f32>(x_3741.x, x_3741.y, x_3741.z) * vec3<f32>(x_3743.x, x_3743.y, x_3743.z));
  let x_3746 : vec4<f32> = u_xlat7;
  u_xlat7 = vec4<f32>(x_3745.x, x_3745.y, x_3745.z, x_3746.w);
  let x_3749 : f32 = x_158.x_AdditionalLightsCount.x;
  let x_3751 : f32 = x_95.unity_LightData.y;
  u_xlat0.x = min(x_3749, x_3751);
  let x_3756 : f32 = u_xlat0.x;
  u_xlatu0 = bitcast<u32>(i32(x_3756));
  let x_3760 : f32 = x_3325.x_AdditionalLightsCookieAtlasTextureFormat;
  let x_3762 : f32 = x_3325.x_AdditionalLightsCookieAtlasTextureFormat;
  let x_3764 : f32 = x_3325.x_AdditionalLightsCookieAtlasTextureFormat;
  let x_3766 : f32 = x_3325.x_AdditionalLightsCookieAtlasTextureFormat;
  let x_3767 : vec4<f32> = vec4<f32>(x_3760, x_3762, x_3764, x_3766);
  let x_3774 : vec4<bool> = (vec4<f32>(x_3767.x, x_3767.y, x_3767.z, x_3767.w) == vec4<f32>(0.0f, 0.0f, 0.0f, 1.0f));
  let x_3775 : vec2<bool> = vec2<bool>(x_3774.x, x_3774.w);
  let x_3776 : vec4<bool> = u_xlatb2;
  u_xlatb2 = vec4<bool>(x_3775.x, x_3776.y, x_3776.z, x_3775.y);
  u_xlat8.x = 0.0f;
  u_xlat8.y = 0.0f;
  u_xlat8.z = 0.0f;
  u_xlatu_loop_1 = 0u;
  loop {
    let x_3787 : u32 = u_xlatu_loop_1;
    let x_3788 : u32 = u_xlatu0;
    if ((x_3787 < x_3788)) {
    } else {
      break;
    }
    let x_3791 : u32 = u_xlatu_loop_1;
    u_xlatu71 = (x_3791 >> 2u);
    let x_3794 : u32 = u_xlatu_loop_1;
    u_xlati72 = bitcast<i32>((x_3794 & 3u));
    let x_3797 : u32 = u_xlatu71;
    let x_3800 : vec4<f32> = x_95.unity_LightIndices[bitcast<i32>(x_3797)];
    let x_3810 : i32 = u_xlati72;
    indexable = array<vec4<u32>, 4u>(vec4<u32>(1065353216u, 0u, 0u, 0u), vec4<u32>(0u, 1065353216u, 0u, 0u), vec4<u32>(0u, 0u, 1065353216u, 0u), vec4<u32>(0u, 0u, 0u, 1065353216u));
    let x_3815 : vec4<u32> = indexable[x_3810];
    u_xlat71 = dot(x_3800, bitcast<vec4<f32>>(x_3815));
    let x_3818 : f32 = u_xlat71;
    u_xlatu71 = bitcast<u32>(i32(x_3818));
    let x_3821 : vec3<f32> = vs_INTERP0;
    let x_3833 : u32 = u_xlatu71;
    let x_3836 : vec4<f32> = x_3832.x_AdditionalLightsPosition[bitcast<i32>(x_3833)];
    let x_3839 : u32 = u_xlatu71;
    let x_3842 : vec4<f32> = x_3832.x_AdditionalLightsPosition[bitcast<i32>(x_3839)];
    let x_3844 : vec3<f32> = ((-(x_3821) * vec3<f32>(x_3836.w, x_3836.w, x_3836.w)) + vec3<f32>(x_3842.x, x_3842.y, x_3842.z));
    let x_3845 : vec4<f32> = u_xlat9;
    u_xlat9 = vec4<f32>(x_3844.x, x_3844.y, x_3844.z, x_3845.w);
    let x_3847 : vec4<f32> = u_xlat9;
    let x_3849 : vec4<f32> = u_xlat9;
    u_xlat72 = dot(vec3<f32>(x_3847.x, x_3847.y, x_3847.z), vec3<f32>(x_3849.x, x_3849.y, x_3849.z));
    let x_3852 : f32 = u_xlat72;
    u_xlat72 = max(x_3852, 6.10351562e-05f);
    let x_3856 : f32 = u_xlat72;
    u_xlat73 = inverseSqrt(x_3856);
    let x_3858 : f32 = u_xlat73;
    let x_3860 : vec4<f32> = u_xlat9;
    let x_3862 : vec3<f32> = (vec3<f32>(x_3858, x_3858, x_3858) * vec3<f32>(x_3860.x, x_3860.y, x_3860.z));
    let x_3863 : vec4<f32> = u_xlat10;
    u_xlat10 = vec4<f32>(x_3862.x, x_3862.y, x_3862.z, x_3863.w);
    let x_3866 : f32 = u_xlat72;
    u_xlat74 = (1.0f / x_3866);
    let x_3868 : f32 = u_xlat72;
    let x_3869 : u32 = u_xlatu71;
    let x_3872 : f32 = x_3832.x_AdditionalLightsAttenuation[bitcast<i32>(x_3869)].x;
    u_xlat72 = (x_3868 * x_3872);
    let x_3874 : f32 = u_xlat72;
    let x_3876 : f32 = u_xlat72;
    u_xlat72 = ((-(x_3874) * x_3876) + 1.0f);
    let x_3879 : f32 = u_xlat72;
    u_xlat72 = max(x_3879, 0.0f);
    let x_3881 : f32 = u_xlat72;
    let x_3882 : f32 = u_xlat72;
    u_xlat72 = (x_3881 * x_3882);
    let x_3884 : f32 = u_xlat72;
    let x_3885 : f32 = u_xlat74;
    u_xlat72 = (x_3884 * x_3885);
    let x_3887 : u32 = u_xlatu71;
    let x_3890 : vec4<f32> = x_3832.x_AdditionalLightsSpotDir[bitcast<i32>(x_3887)];
    let x_3892 : vec4<f32> = u_xlat10;
    u_xlat74 = dot(vec3<f32>(x_3890.x, x_3890.y, x_3890.z), vec3<f32>(x_3892.x, x_3892.y, x_3892.z));
    let x_3895 : f32 = u_xlat74;
    let x_3896 : u32 = u_xlatu71;
    let x_3899 : f32 = x_3832.x_AdditionalLightsAttenuation[bitcast<i32>(x_3896)].z;
    let x_3901 : u32 = u_xlatu71;
    let x_3904 : f32 = x_3832.x_AdditionalLightsAttenuation[bitcast<i32>(x_3901)].w;
    u_xlat74 = ((x_3895 * x_3899) + x_3904);
    let x_3906 : f32 = u_xlat74;
    u_xlat74 = clamp(x_3906, 0.0f, 1.0f);
    let x_3908 : f32 = u_xlat74;
    let x_3909 : f32 = u_xlat74;
    u_xlat74 = (x_3908 * x_3909);
    let x_3911 : f32 = u_xlat72;
    let x_3912 : f32 = u_xlat74;
    u_xlat72 = (x_3911 * x_3912);
    let x_3915 : u32 = u_xlatu71;
    u_xlatu74 = (x_3915 >> 5u);
    let x_3918 : u32 = u_xlatu71;
    u_xlati75 = (1i << bitcast<u32>((bitcast<i32>(x_3918) & 31i)));
    let x_3924 : i32 = u_xlati75;
    let x_3926 : u32 = u_xlatu74;
    let x_3929 : f32 = x_3325.x_AdditionalLightsCookieEnableBits[bitcast<i32>(x_3926)].el;
    u_xlati74 = bitcast<i32>((bitcast<u32>(x_3924) & bitcast<u32>(x_3929)));
    let x_3933 : i32 = u_xlati74;
    if ((x_3933 != 0i)) {
      let x_3943 : u32 = u_xlatu71;
      let x_3946 : f32 = x_3942.x_AdditionalLightsLightTypes[bitcast<i32>(x_3943)].el;
      u_xlati74 = i32(x_3946);
      let x_3948 : i32 = u_xlati74;
      u_xlati75 = select(1i, 0i, (x_3948 != 0i));
      let x_3952 : u32 = u_xlatu71;
      u_xlati76 = (bitcast<i32>(x_3952) << bitcast<u32>(2i));
      let x_3955 : i32 = u_xlati75;
      if ((x_3955 != 0i)) {
        let x_3959 : vec3<f32> = vs_INTERP0;
        let x_3961 : i32 = u_xlati76;
        let x_3964 : i32 = u_xlati76;
        let x_3968 : vec4<f32> = x_3942.x_AdditionalLightsWorldToLights[((x_3961 + 1i) / 4i)][((x_3964 + 1i) % 4i)];
        let x_3970 : vec3<f32> = (vec3<f32>(x_3959.y, x_3959.y, x_3959.y) * vec3<f32>(x_3968.x, x_3968.y, x_3968.w));
        let x_3971 : vec4<f32> = u_xlat11;
        u_xlat11 = vec4<f32>(x_3970.x, x_3970.y, x_3970.z, x_3971.w);
        let x_3973 : i32 = u_xlati76;
        let x_3975 : i32 = u_xlati76;
        let x_3978 : vec4<f32> = x_3942.x_AdditionalLightsWorldToLights[(x_3973 / 4i)][(x_3975 % 4i)];
        let x_3980 : vec3<f32> = vs_INTERP0;
        let x_3983 : vec4<f32> = u_xlat11;
        let x_3985 : vec3<f32> = ((vec3<f32>(x_3978.x, x_3978.y, x_3978.w) * vec3<f32>(x_3980.x, x_3980.x, x_3980.x)) + vec3<f32>(x_3983.x, x_3983.y, x_3983.z));
        let x_3986 : vec4<f32> = u_xlat11;
        u_xlat11 = vec4<f32>(x_3985.x, x_3985.y, x_3985.z, x_3986.w);
        let x_3988 : i32 = u_xlati76;
        let x_3991 : i32 = u_xlati76;
        let x_3995 : vec4<f32> = x_3942.x_AdditionalLightsWorldToLights[((x_3988 + 2i) / 4i)][((x_3991 + 2i) % 4i)];
        let x_3997 : vec3<f32> = vs_INTERP0;
        let x_4000 : vec4<f32> = u_xlat11;
        let x_4002 : vec3<f32> = ((vec3<f32>(x_3995.x, x_3995.y, x_3995.w) * vec3<f32>(x_3997.z, x_3997.z, x_3997.z)) + vec3<f32>(x_4000.x, x_4000.y, x_4000.z));
        let x_4003 : vec4<f32> = u_xlat11;
        u_xlat11 = vec4<f32>(x_4002.x, x_4002.y, x_4002.z, x_4003.w);
        let x_4005 : vec4<f32> = u_xlat11;
        let x_4007 : i32 = u_xlati76;
        let x_4010 : i32 = u_xlati76;
        let x_4014 : vec4<f32> = x_3942.x_AdditionalLightsWorldToLights[((x_4007 + 3i) / 4i)][((x_4010 + 3i) % 4i)];
        let x_4016 : vec3<f32> = (vec3<f32>(x_4005.x, x_4005.y, x_4005.z) + vec3<f32>(x_4014.x, x_4014.y, x_4014.w));
        let x_4017 : vec4<f32> = u_xlat11;
        u_xlat11 = vec4<f32>(x_4016.x, x_4016.y, x_4016.z, x_4017.w);
        let x_4019 : vec4<f32> = u_xlat11;
        let x_4021 : vec4<f32> = u_xlat11;
        let x_4023 : vec2<f32> = (vec2<f32>(x_4019.x, x_4019.y) / vec2<f32>(x_4021.z, x_4021.z));
        let x_4024 : vec4<f32> = u_xlat11;
        u_xlat11 = vec4<f32>(x_4023.x, x_4023.y, x_4024.z, x_4024.w);
        let x_4026 : vec4<f32> = u_xlat11;
        let x_4029 : vec2<f32> = ((vec2<f32>(x_4026.x, x_4026.y) * vec2<f32>(0.5f, 0.5f)) + vec2<f32>(0.5f, 0.5f));
        let x_4030 : vec4<f32> = u_xlat11;
        u_xlat11 = vec4<f32>(x_4029.x, x_4029.y, x_4030.z, x_4030.w);
        let x_4032 : vec4<f32> = u_xlat11;
        let x_4036 : vec2<f32> = clamp(vec2<f32>(x_4032.x, x_4032.y), vec2<f32>(0.0f, 0.0f), vec2<f32>(1.0f, 1.0f));
        let x_4037 : vec4<f32> = u_xlat11;
        u_xlat11 = vec4<f32>(x_4036.x, x_4036.y, x_4037.z, x_4037.w);
        let x_4039 : u32 = u_xlatu71;
        let x_4042 : vec4<f32> = x_3942.x_AdditionalLightsCookieAtlasUVRects[bitcast<i32>(x_4039)];
        let x_4044 : vec4<f32> = u_xlat11;
        let x_4047 : u32 = u_xlatu71;
        let x_4050 : vec4<f32> = x_3942.x_AdditionalLightsCookieAtlasUVRects[bitcast<i32>(x_4047)];
        let x_4052 : vec2<f32> = ((vec2<f32>(x_4042.x, x_4042.y) * vec2<f32>(x_4044.x, x_4044.y)) + vec2<f32>(x_4050.z, x_4050.w));
        let x_4053 : vec4<f32> = u_xlat11;
        u_xlat11 = vec4<f32>(x_4052.x, x_4052.y, x_4053.z, x_4053.w);
      } else {
        let x_4057 : i32 = u_xlati74;
        u_xlatb74 = (x_4057 == 1i);
        let x_4059 : bool = u_xlatb74;
        u_xlati74 = select(0i, 1i, x_4059);
        let x_4061 : i32 = u_xlati74;
        if ((x_4061 != 0i)) {
          let x_4065 : vec3<f32> = vs_INTERP0;
          let x_4067 : i32 = u_xlati76;
          let x_4070 : i32 = u_xlati76;
          let x_4074 : vec4<f32> = x_3942.x_AdditionalLightsWorldToLights[((x_4067 + 1i) / 4i)][((x_4070 + 1i) % 4i)];
          u_xlat55 = (vec2<f32>(x_4065.y, x_4065.y) * vec2<f32>(x_4074.x, x_4074.y));
          let x_4077 : i32 = u_xlati76;
          let x_4079 : i32 = u_xlati76;
          let x_4082 : vec4<f32> = x_3942.x_AdditionalLightsWorldToLights[(x_4077 / 4i)][(x_4079 % 4i)];
          let x_4084 : vec3<f32> = vs_INTERP0;
          let x_4087 : vec2<f32> = u_xlat55;
          u_xlat55 = ((vec2<f32>(x_4082.x, x_4082.y) * vec2<f32>(x_4084.x, x_4084.x)) + x_4087);
          let x_4089 : i32 = u_xlati76;
          let x_4092 : i32 = u_xlati76;
          let x_4096 : vec4<f32> = x_3942.x_AdditionalLightsWorldToLights[((x_4089 + 2i) / 4i)][((x_4092 + 2i) % 4i)];
          let x_4098 : vec3<f32> = vs_INTERP0;
          let x_4101 : vec2<f32> = u_xlat55;
          u_xlat55 = ((vec2<f32>(x_4096.x, x_4096.y) * vec2<f32>(x_4098.z, x_4098.z)) + x_4101);
          let x_4103 : vec2<f32> = u_xlat55;
          let x_4104 : i32 = u_xlati76;
          let x_4107 : i32 = u_xlati76;
          let x_4111 : vec4<f32> = x_3942.x_AdditionalLightsWorldToLights[((x_4104 + 3i) / 4i)][((x_4107 + 3i) % 4i)];
          u_xlat55 = (x_4103 + vec2<f32>(x_4111.x, x_4111.y));
          let x_4114 : vec2<f32> = u_xlat55;
          u_xlat55 = ((x_4114 * vec2<f32>(0.5f, 0.5f)) + vec2<f32>(0.5f, 0.5f));
          let x_4117 : vec2<f32> = u_xlat55;
          u_xlat55 = fract(x_4117);
          let x_4119 : u32 = u_xlatu71;
          let x_4122 : vec4<f32> = x_3942.x_AdditionalLightsCookieAtlasUVRects[bitcast<i32>(x_4119)];
          let x_4124 : vec2<f32> = u_xlat55;
          let x_4126 : u32 = u_xlatu71;
          let x_4129 : vec4<f32> = x_3942.x_AdditionalLightsCookieAtlasUVRects[bitcast<i32>(x_4126)];
          let x_4131 : vec2<f32> = ((vec2<f32>(x_4122.x, x_4122.y) * x_4124) + vec2<f32>(x_4129.z, x_4129.w));
          let x_4132 : vec4<f32> = u_xlat11;
          u_xlat11 = vec4<f32>(x_4131.x, x_4131.y, x_4132.z, x_4132.w);
        } else {
          let x_4135 : vec3<f32> = vs_INTERP0;
          let x_4137 : i32 = u_xlati76;
          let x_4140 : i32 = u_xlati76;
          let x_4144 : vec4<f32> = x_3942.x_AdditionalLightsWorldToLights[((x_4137 + 1i) / 4i)][((x_4140 + 1i) % 4i)];
          u_xlat12 = (vec4<f32>(x_4135.y, x_4135.y, x_4135.y, x_4135.y) * x_4144);
          let x_4146 : i32 = u_xlati76;
          let x_4148 : i32 = u_xlati76;
          let x_4151 : vec4<f32> = x_3942.x_AdditionalLightsWorldToLights[(x_4146 / 4i)][(x_4148 % 4i)];
          let x_4152 : vec3<f32> = vs_INTERP0;
          let x_4155 : vec4<f32> = u_xlat12;
          u_xlat12 = ((x_4151 * vec4<f32>(x_4152.x, x_4152.x, x_4152.x, x_4152.x)) + x_4155);
          let x_4157 : i32 = u_xlati76;
          let x_4160 : i32 = u_xlati76;
          let x_4164 : vec4<f32> = x_3942.x_AdditionalLightsWorldToLights[((x_4157 + 2i) / 4i)][((x_4160 + 2i) % 4i)];
          let x_4165 : vec3<f32> = vs_INTERP0;
          let x_4168 : vec4<f32> = u_xlat12;
          u_xlat12 = ((x_4164 * vec4<f32>(x_4165.z, x_4165.z, x_4165.z, x_4165.z)) + x_4168);
          let x_4170 : vec4<f32> = u_xlat12;
          let x_4171 : i32 = u_xlati76;
          let x_4174 : i32 = u_xlati76;
          let x_4178 : vec4<f32> = x_3942.x_AdditionalLightsWorldToLights[((x_4171 + 3i) / 4i)][((x_4174 + 3i) % 4i)];
          u_xlat12 = (x_4170 + x_4178);
          let x_4180 : vec4<f32> = u_xlat12;
          let x_4182 : vec4<f32> = u_xlat12;
          let x_4184 : vec3<f32> = (vec3<f32>(x_4180.x, x_4180.y, x_4180.z) / vec3<f32>(x_4182.w, x_4182.w, x_4182.w));
          let x_4185 : vec4<f32> = u_xlat12;
          u_xlat12 = vec4<f32>(x_4184.x, x_4184.y, x_4184.z, x_4185.w);
          let x_4187 : vec4<f32> = u_xlat12;
          let x_4189 : vec4<f32> = u_xlat12;
          u_xlat74 = dot(vec3<f32>(x_4187.x, x_4187.y, x_4187.z), vec3<f32>(x_4189.x, x_4189.y, x_4189.z));
          let x_4192 : f32 = u_xlat74;
          u_xlat74 = inverseSqrt(x_4192);
          let x_4194 : f32 = u_xlat74;
          let x_4196 : vec4<f32> = u_xlat12;
          let x_4198 : vec3<f32> = (vec3<f32>(x_4194, x_4194, x_4194) * vec3<f32>(x_4196.x, x_4196.y, x_4196.z));
          let x_4199 : vec4<f32> = u_xlat12;
          u_xlat12 = vec4<f32>(x_4198.x, x_4198.y, x_4198.z, x_4199.w);
          let x_4201 : vec4<f32> = u_xlat12;
          u_xlat74 = dot(abs(vec3<f32>(x_4201.x, x_4201.y, x_4201.z)), vec3<f32>(1.0f, 1.0f, 1.0f));
          let x_4206 : f32 = u_xlat74;
          u_xlat74 = max(x_4206, 0.000001f);
          let x_4209 : f32 = u_xlat74;
          u_xlat74 = (1.0f / x_4209);
          let x_4211 : f32 = u_xlat74;
          let x_4213 : vec4<f32> = u_xlat12;
          let x_4215 : vec3<f32> = (vec3<f32>(x_4211, x_4211, x_4211) * vec3<f32>(x_4213.z, x_4213.x, x_4213.y));
          let x_4216 : vec4<f32> = u_xlat13;
          u_xlat13 = vec4<f32>(x_4215.x, x_4215.y, x_4215.z, x_4216.w);
          let x_4219 : f32 = u_xlat13.x;
          u_xlat13.x = -(x_4219);
          let x_4223 : f32 = u_xlat13.x;
          u_xlat13.x = clamp(x_4223, 0.0f, 1.0f);
          let x_4227 : vec4<f32> = u_xlat13;
          let x_4230 : vec4<bool> = (vec4<f32>(x_4227.y, x_4227.z, x_4227.y, x_4227.z) >= vec4<f32>(0.0f, 0.0f, 0.0f, 0.0f));
          u_xlatb55 = vec2<bool>(x_4230.x, x_4230.y);
          let x_4233 : bool = u_xlatb55.x;
          if (x_4233) {
            let x_4238 : f32 = u_xlat13.x;
            x_4234 = x_4238;
          } else {
            let x_4241 : f32 = u_xlat13.x;
            x_4234 = -(x_4241);
          }
          let x_4243 : f32 = x_4234;
          u_xlat55.x = x_4243;
          let x_4246 : bool = u_xlatb55.y;
          if (x_4246) {
            let x_4251 : f32 = u_xlat13.x;
            x_4247 = x_4251;
          } else {
            let x_4254 : f32 = u_xlat13.x;
            x_4247 = -(x_4254);
          }
          let x_4256 : f32 = x_4247;
          u_xlat55.y = x_4256;
          let x_4258 : vec4<f32> = u_xlat12;
          let x_4260 : f32 = u_xlat74;
          let x_4263 : vec2<f32> = u_xlat55;
          u_xlat55 = ((vec2<f32>(x_4258.x, x_4258.y) * vec2<f32>(x_4260, x_4260)) + x_4263);
          let x_4265 : vec2<f32> = u_xlat55;
          u_xlat55 = ((x_4265 * vec2<f32>(0.5f, 0.5f)) + vec2<f32>(0.5f, 0.5f));
          let x_4268 : vec2<f32> = u_xlat55;
          u_xlat55 = clamp(x_4268, vec2<f32>(0.0f, 0.0f), vec2<f32>(1.0f, 1.0f));
          let x_4272 : u32 = u_xlatu71;
          let x_4275 : vec4<f32> = x_3942.x_AdditionalLightsCookieAtlasUVRects[bitcast<i32>(x_4272)];
          let x_4277 : vec2<f32> = u_xlat55;
          let x_4279 : u32 = u_xlatu71;
          let x_4282 : vec4<f32> = x_3942.x_AdditionalLightsCookieAtlasUVRects[bitcast<i32>(x_4279)];
          let x_4284 : vec2<f32> = ((vec2<f32>(x_4275.x, x_4275.y) * x_4277) + vec2<f32>(x_4282.z, x_4282.w));
          let x_4285 : vec4<f32> = u_xlat11;
          u_xlat11 = vec4<f32>(x_4284.x, x_4284.y, x_4285.z, x_4285.w);
        }
      }
      let x_4292 : vec4<f32> = u_xlat11;
      let x_4295 : f32 = x_158.x_GlobalMipBias.x;
      let x_4296 : vec4<f32> = textureSampleBias(x_AdditionalLightsCookieAtlasTexture, sampler_AdditionalLightsCookieAtlasTexture, vec2<f32>(x_4292.x, x_4292.y), x_4295);
      u_xlat11 = x_4296;
      let x_4298 : bool = u_xlatb2.w;
      if (x_4298) {
        let x_4303 : f32 = u_xlat11.w;
        x_4299 = x_4303;
      } else {
        let x_4306 : f32 = u_xlat11.x;
        x_4299 = x_4306;
      }
      let x_4307 : f32 = x_4299;
      u_xlat74 = x_4307;
      let x_4309 : bool = u_xlatb2.x;
      if (x_4309) {
        let x_4313 : vec4<f32> = u_xlat11;
        x_4310 = vec3<f32>(x_4313.x, x_4313.y, x_4313.z);
      } else {
        let x_4316 : f32 = u_xlat74;
        x_4310 = vec3<f32>(x_4316, x_4316, x_4316);
      }
      let x_4318 : vec3<f32> = x_4310;
      let x_4319 : vec4<f32> = u_xlat11;
      u_xlat11 = vec4<f32>(x_4318.x, x_4318.y, x_4318.z, x_4319.w);
    } else {
      u_xlat11.x = 1.0f;
      u_xlat11.y = 1.0f;
      u_xlat11.z = 1.0f;
    }
    let x_4325 : vec4<f32> = u_xlat11;
    let x_4327 : u32 = u_xlatu71;
    let x_4330 : vec4<f32> = x_3832.x_AdditionalLightsColor[bitcast<i32>(x_4327)];
    let x_4332 : vec3<f32> = (vec3<f32>(x_4325.x, x_4325.y, x_4325.z) * vec3<f32>(x_4330.x, x_4330.y, x_4330.z));
    let x_4333 : vec4<f32> = u_xlat11;
    u_xlat11 = vec4<f32>(x_4332.x, x_4332.y, x_4332.z, x_4333.w);
    let x_4335 : f32 = u_xlat48;
    let x_4337 : vec4<f32> = u_xlat11;
    let x_4339 : vec3<f32> = (vec3<f32>(x_4335, x_4335, x_4335) * vec3<f32>(x_4337.x, x_4337.y, x_4337.z));
    let x_4340 : vec4<f32> = u_xlat11;
    u_xlat11 = vec4<f32>(x_4339.x, x_4339.y, x_4339.z, x_4340.w);
    let x_4342 : vec3<f32> = u_xlat22;
    let x_4343 : vec4<f32> = u_xlat10;
    u_xlat71 = dot(x_4342, vec3<f32>(x_4343.x, x_4343.y, x_4343.z));
    let x_4346 : f32 = u_xlat71;
    u_xlat71 = clamp(x_4346, 0.0f, 1.0f);
    let x_4348 : f32 = u_xlat71;
    let x_4349 : f32 = u_xlat72;
    u_xlat71 = (x_4348 * x_4349);
    let x_4351 : f32 = u_xlat71;
    let x_4353 : vec4<f32> = u_xlat11;
    let x_4355 : vec3<f32> = (vec3<f32>(x_4351, x_4351, x_4351) * vec3<f32>(x_4353.x, x_4353.y, x_4353.z));
    let x_4356 : vec4<f32> = u_xlat11;
    u_xlat11 = vec4<f32>(x_4355.x, x_4355.y, x_4355.z, x_4356.w);
    let x_4358 : vec4<f32> = u_xlat9;
    let x_4360 : f32 = u_xlat73;
    let x_4363 : vec3<f32> = u_xlat5;
    let x_4364 : vec3<f32> = ((vec3<f32>(x_4358.x, x_4358.y, x_4358.z) * vec3<f32>(x_4360, x_4360, x_4360)) + x_4363);
    let x_4365 : vec4<f32> = u_xlat9;
    u_xlat9 = vec4<f32>(x_4364.x, x_4364.y, x_4364.z, x_4365.w);
    let x_4367 : vec4<f32> = u_xlat9;
    let x_4369 : vec4<f32> = u_xlat9;
    u_xlat71 = dot(vec3<f32>(x_4367.x, x_4367.y, x_4367.z), vec3<f32>(x_4369.x, x_4369.y, x_4369.z));
    let x_4372 : f32 = u_xlat71;
    u_xlat71 = max(x_4372, 1.17549435e-37f);
    let x_4374 : f32 = u_xlat71;
    u_xlat71 = inverseSqrt(x_4374);
    let x_4376 : f32 = u_xlat71;
    let x_4378 : vec4<f32> = u_xlat9;
    let x_4380 : vec3<f32> = (vec3<f32>(x_4376, x_4376, x_4376) * vec3<f32>(x_4378.x, x_4378.y, x_4378.z));
    let x_4381 : vec4<f32> = u_xlat9;
    u_xlat9 = vec4<f32>(x_4380.x, x_4380.y, x_4380.z, x_4381.w);
    let x_4383 : vec3<f32> = u_xlat22;
    let x_4384 : vec4<f32> = u_xlat9;
    u_xlat71 = dot(x_4383, vec3<f32>(x_4384.x, x_4384.y, x_4384.z));
    let x_4387 : f32 = u_xlat71;
    u_xlat71 = clamp(x_4387, 0.0f, 1.0f);
    let x_4389 : vec4<f32> = u_xlat10;
    let x_4391 : vec4<f32> = u_xlat9;
    u_xlat72 = dot(vec3<f32>(x_4389.x, x_4389.y, x_4389.z), vec3<f32>(x_4391.x, x_4391.y, x_4391.z));
    let x_4394 : f32 = u_xlat72;
    u_xlat72 = clamp(x_4394, 0.0f, 1.0f);
    let x_4396 : f32 = u_xlat71;
    let x_4397 : f32 = u_xlat71;
    u_xlat71 = (x_4396 * x_4397);
    let x_4399 : f32 = u_xlat71;
    let x_4401 : f32 = u_xlat46.x;
    u_xlat71 = ((x_4399 * x_4401) + 1.000010014f);
    let x_4404 : f32 = u_xlat72;
    let x_4405 : f32 = u_xlat72;
    u_xlat72 = (x_4404 * x_4405);
    let x_4407 : f32 = u_xlat71;
    let x_4408 : f32 = u_xlat71;
    u_xlat71 = (x_4407 * x_4408);
    let x_4410 : f32 = u_xlat72;
    u_xlat72 = max(x_4410, 0.100000001f);
    let x_4412 : f32 = u_xlat71;
    let x_4413 : f32 = u_xlat72;
    u_xlat71 = (x_4412 * x_4413);
    let x_4415 : f32 = u_xlat70;
    let x_4416 : f32 = u_xlat71;
    u_xlat71 = (x_4415 * x_4416);
    let x_4418 : f32 = u_xlat69;
    let x_4419 : f32 = u_xlat71;
    u_xlat71 = (x_4418 / x_4419);
    let x_4421 : f32 = u_xlat71;
    let x_4424 : vec4<f32> = u_xlat6;
    let x_4426 : vec3<f32> = ((vec3<f32>(x_4421, x_4421, x_4421) * vec3<f32>(0.039999999f, 0.039999999f, 0.039999999f)) + vec3<f32>(x_4424.x, x_4424.y, x_4424.z));
    let x_4427 : vec4<f32> = u_xlat9;
    u_xlat9 = vec4<f32>(x_4426.x, x_4426.y, x_4426.z, x_4427.w);
    let x_4429 : vec4<f32> = u_xlat9;
    let x_4431 : vec4<f32> = u_xlat11;
    let x_4434 : vec4<f32> = u_xlat8;
    let x_4436 : vec3<f32> = ((vec3<f32>(x_4429.x, x_4429.y, x_4429.z) * vec3<f32>(x_4431.x, x_4431.y, x_4431.z)) + vec3<f32>(x_4434.x, x_4434.y, x_4434.z));
    let x_4437 : vec4<f32> = u_xlat8;
    u_xlat8 = vec4<f32>(x_4436.x, x_4436.y, x_4436.z, x_4437.w);

    continuing {
      let x_4439 : u32 = u_xlatu_loop_1;
      u_xlatu_loop_1 = (x_4439 + bitcast<u32>(1i));
    }
  }
  let x_4441 : vec4<f32> = u_xlat3;
  let x_4443 : vec3<f32> = u_xlat4;
  let x_4446 : vec4<f32> = u_xlat7;
  u_xlat0 = ((vec3<f32>(x_4441.x, x_4441.y, x_4441.z) * vec3<f32>(x_4443.x, x_4443.x, x_4443.x)) + vec3<f32>(x_4446.x, x_4446.y, x_4446.z));
  let x_4449 : vec4<f32> = u_xlat8;
  let x_4451 : vec3<f32> = u_xlat0;
  u_xlat0 = (vec3<f32>(x_4449.x, x_4449.y, x_4449.z) + x_4451);
  let x_4455 : vec4<f32> = vs_INTERP4;
  let x_4457 : vec3<f32> = u_xlat1;
  let x_4459 : vec3<f32> = u_xlat0;
  let x_4460 : vec3<f32> = ((vec3<f32>(x_4455.w, x_4455.w, x_4455.w) * x_4457) + x_4459);
  let x_4461 : vec4<f32> = SV_Target0;
  SV_Target0 = vec4<f32>(x_4460.x, x_4460.y, x_4460.z, x_4461.w);
  let x_4463 : bool = u_xlatb24;
  let x_4464 : f32 = u_xlat67;
  SV_Target0.w = select(1.0f, x_4464, x_4463);
  let x_4470 : u32 = x_158.x_RenderingLayerMaxInt;
  let x_4472 : f32 = x_95.unity_RenderingLayer.x;
  u_xlatu0 = (x_4470 & bitcast<u32>(x_4472));
  let x_4475 : u32 = u_xlatu0;
  u_xlat0.x = f32(x_4475);
  let x_4480 : f32 = u_xlat0.x;
  let x_4482 : f32 = x_158.x_RenderingLayerRcpMaxInt;
  SV_Target1.x = (x_4480 * x_4482);
  let x_4486 : f32 = SV_Target1.x;
  SV_Target1.x = clamp(x_4486, 0.0f, 1.0f);
  let x_4490 : vec4<f32> = SV_Target1;
  SV_Target1 = vec4<f32>(x_4490.x, vec3<f32>(0.0f, 0.0f, 0.0f).x, vec3<f32>(0.0f, 0.0f, 0.0f).y, vec3<f32>(0.0f, 0.0f, 0.0f).z);
  return;
}

struct main_out {
  @location(0)
  SV_Target0_1 : vec4<f32>,
  @location(1)
  SV_Target1_1 : vec4<f32>,
}

@fragment
fn main(@builtin(position) gl_FragCoord_param : vec4<f32>, @location(1) vs_INTERP1_param : vec3<f32>, @location(2) vs_INTERP2_param : vec4<f32>, @location(0) vs_INTERP0_param : vec3<f32>, @location(3) vs_INTERP3_param : vec4<f32>, @location(4) vs_INTERP4_param : vec4<f32>, @location(5) vs_INTERP5_param : vec2<f32>, @location(6) vs_INTERP9_param : vec4<f32>) -> main_out {
  gl_FragCoord = gl_FragCoord_param;
  vs_INTERP1 = vs_INTERP1_param;
  vs_INTERP2 = vs_INTERP2_param;
  vs_INTERP0 = vs_INTERP0_param;
  vs_INTERP3 = vs_INTERP3_param;
  vs_INTERP4 = vs_INTERP4_param;
  vs_INTERP5 = vs_INTERP5_param;
  vs_INTERP9 = vs_INTERP9_param;
  main_1();
  return main_out(SV_Target0, SV_Target1);
}

