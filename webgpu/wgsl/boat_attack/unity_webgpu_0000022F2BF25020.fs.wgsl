type Arr = array<mat4x4<f32>, 5u>;

struct MainLightShadows {
  x_MainLightWorldToShadow : Arr,
  x_CascadeShadowSplitSpheres0 : vec4<f32>,
  x_CascadeShadowSplitSpheres1 : vec4<f32>,
  x_CascadeShadowSplitSpheres2 : vec4<f32>,
  x_CascadeShadowSplitSpheres3 : vec4<f32>,
  x_CascadeShadowSplitSphereRadii : vec4<f32>,
  x_MainLightShadowOffset0 : vec4<f32>,
  x_MainLightShadowOffset1 : vec4<f32>,
  x_MainLightShadowParams : vec4<f32>,
  x_MainLightShadowmapSize : vec4<f32>,
}

struct PGlobals {
  x_GlobalMipBias : vec2<f32>,
}

var<private> vs_TEXCOORD6 : vec3<f32>;

@group(1) @binding(1) var<uniform> x_20 : MainLightShadows;

@group(0) @binding(1) var unity_LightmapInd : texture_2d<f32>;

@group(0) @binding(4) var samplerunity_Lightmap : sampler;

var<private> vs_TEXCOORD1 : vec2<f32>;

@group(1) @binding(0) var<uniform> x_237 : PGlobals;

@group(0) @binding(0) var unity_Lightmap : texture_2d<f32>;

var<private> vs_TEXCOORD5 : vec4<f32>;

@group(0) @binding(2) var x_MainTex : texture_2d<f32>;

@group(0) @binding(5) var sampler_MainTex : sampler;

var<private> vs_TEXCOORD0 : vec2<f32>;

@group(0) @binding(3) var x_MainLightShadowmapTexture : texture_depth_2d;

@group(0) @binding(6) var sampler_MainLightShadowmapTexture : sampler_comparison;

var<private> vs_TEXCOORD3 : vec4<f32>;

var<private> SV_Target0 : vec4<f32>;

var<private> gl_FragCoord : vec4<f32>;

fn main_1() {
  var u_xlat0 : vec4<f32>;
  var u_xlat1 : vec4<f32>;
  var u_xlat2 : vec4<f32>;
  var u_xlat3 : vec4<f32>;
  var u_xlatb0 : vec4<bool>;
  var u_xlatu0 : u32;
  var u_xlati0 : i32;
  var u_xlat17 : vec3<f32>;
  var u_xlat51 : f32;
  var u_xlatb51 : bool;
  var txVec0 : vec3<f32>;
  var u_xlat4 : vec4<f32>;
  var txVec1 : vec3<f32>;
  var txVec2 : vec3<f32>;
  var txVec3 : vec3<f32>;
  var u_xlatb52 : bool;
  var u_xlat37 : vec2<f32>;
  var u_xlat5 : vec4<f32>;
  var u_xlat39 : vec2<f32>;
  var u_xlat6 : vec4<f32>;
  var u_xlat7 : vec4<f32>;
  var u_xlat8 : vec4<f32>;
  var u_xlat9 : vec4<f32>;
  var u_xlat10 : vec4<f32>;
  var u_xlat11 : vec4<f32>;
  var u_xlat52 : f32;
  var txVec4 : vec3<f32>;
  var txVec5 : vec3<f32>;
  var u_xlat20 : f32;
  var txVec6 : vec3<f32>;
  var txVec7 : vec3<f32>;
  var txVec8 : vec3<f32>;
  var txVec9 : vec3<f32>;
  var txVec10 : vec3<f32>;
  var txVec11 : vec3<f32>;
  var txVec12 : vec3<f32>;
  var u_xlat21 : vec3<f32>;
  var u_xlat12 : vec4<f32>;
  var u_xlat13 : vec4<f32>;
  var u_xlat22 : vec2<f32>;
  var u_xlat45 : vec2<f32>;
  var u_xlat40 : vec2<f32>;
  var u_xlat14 : vec4<f32>;
  var u_xlat15 : vec4<f32>;
  var u_xlat16 : vec4<f32>;
  var txVec13 : vec3<f32>;
  var txVec14 : vec3<f32>;
  var txVec15 : vec3<f32>;
  var txVec16 : vec3<f32>;
  var txVec17 : vec3<f32>;
  var txVec18 : vec3<f32>;
  var txVec19 : vec3<f32>;
  var txVec20 : vec3<f32>;
  var txVec21 : vec3<f32>;
  var txVec22 : vec3<f32>;
  var txVec23 : vec3<f32>;
  var txVec24 : vec3<f32>;
  var txVec25 : vec3<f32>;
  var txVec26 : vec3<f32>;
  var txVec27 : vec3<f32>;
  var txVec28 : vec3<f32>;
  var txVec29 : vec3<f32>;
  var u_xlatb17 : bool;
  var u_xlatb34 : bool;
  var x_1582 : f32;
  var u_xlat_precise_vec4 : vec4<f32>;
  var u_xlat_precise_ivec4 : vec4<i32>;
  var u_xlat_precise_bvec4 : vec4<bool>;
  var u_xlat_precise_uvec4 : vec4<u32>;
  let x_13 : vec3<f32> = vs_TEXCOORD6;
  let x_25 : vec4<f32> = x_20.x_CascadeShadowSplitSpheres0;
  let x_28 : vec3<f32> = (x_13 + -(vec3<f32>(x_25.x, x_25.y, x_25.z)));
  let x_29 : vec4<f32> = u_xlat0;
  u_xlat0 = vec4<f32>(x_28.x, x_28.y, x_28.z, x_29.w);
  let x_32 : vec3<f32> = vs_TEXCOORD6;
  let x_35 : vec4<f32> = x_20.x_CascadeShadowSplitSpheres1;
  let x_38 : vec3<f32> = (x_32 + -(vec3<f32>(x_35.x, x_35.y, x_35.z)));
  let x_39 : vec4<f32> = u_xlat1;
  u_xlat1 = vec4<f32>(x_38.x, x_38.y, x_38.z, x_39.w);
  let x_42 : vec3<f32> = vs_TEXCOORD6;
  let x_45 : vec4<f32> = x_20.x_CascadeShadowSplitSpheres2;
  let x_48 : vec3<f32> = (x_42 + -(vec3<f32>(x_45.x, x_45.y, x_45.z)));
  let x_49 : vec4<f32> = u_xlat2;
  u_xlat2 = vec4<f32>(x_48.x, x_48.y, x_48.z, x_49.w);
  let x_52 : vec3<f32> = vs_TEXCOORD6;
  let x_55 : vec4<f32> = x_20.x_CascadeShadowSplitSpheres3;
  let x_58 : vec3<f32> = (x_52 + -(vec3<f32>(x_55.x, x_55.y, x_55.z)));
  let x_59 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_58.x, x_58.y, x_58.z, x_59.w);
  let x_61 : vec4<f32> = u_xlat0;
  let x_63 : vec4<f32> = u_xlat0;
  u_xlat0.x = dot(vec3<f32>(x_61.x, x_61.y, x_61.z), vec3<f32>(x_63.x, x_63.y, x_63.z));
  let x_69 : vec4<f32> = u_xlat1;
  let x_71 : vec4<f32> = u_xlat1;
  u_xlat0.y = dot(vec3<f32>(x_69.x, x_69.y, x_69.z), vec3<f32>(x_71.x, x_71.y, x_71.z));
  let x_76 : vec4<f32> = u_xlat2;
  let x_78 : vec4<f32> = u_xlat2;
  u_xlat0.z = dot(vec3<f32>(x_76.x, x_76.y, x_76.z), vec3<f32>(x_78.x, x_78.y, x_78.z));
  let x_83 : vec4<f32> = u_xlat3;
  let x_85 : vec4<f32> = u_xlat3;
  u_xlat0.w = dot(vec3<f32>(x_83.x, x_83.y, x_83.z), vec3<f32>(x_85.x, x_85.y, x_85.z));
  let x_94 : vec4<f32> = u_xlat0;
  let x_97 : vec4<f32> = x_20.x_CascadeShadowSplitSphereRadii;
  u_xlatb0 = (x_94 < x_97);
  let x_101 : bool = u_xlatb0.x;
  u_xlat1.x = select(0.0f, 1.0f, x_101);
  let x_107 : bool = u_xlatb0.y;
  u_xlat1.y = select(0.0f, 1.0f, x_107);
  let x_111 : bool = u_xlatb0.z;
  u_xlat1.z = select(0.0f, 1.0f, x_111);
  let x_115 : bool = u_xlatb0.w;
  u_xlat1.w = select(0.0f, 1.0f, x_115);
  let x_119 : bool = u_xlatb0.x;
  u_xlat0.x = select(-0.0f, -1.0f, x_119);
  let x_125 : bool = u_xlatb0.y;
  u_xlat0.y = select(-0.0f, -1.0f, x_125);
  let x_129 : bool = u_xlatb0.z;
  u_xlat0.z = select(-0.0f, -1.0f, x_129);
  let x_132 : vec4<f32> = u_xlat0;
  let x_134 : vec4<f32> = u_xlat1;
  let x_136 : vec3<f32> = (vec3<f32>(x_132.x, x_132.y, x_132.z) + vec3<f32>(x_134.y, x_134.z, x_134.w));
  let x_137 : vec4<f32> = u_xlat0;
  u_xlat0 = vec4<f32>(x_136.x, x_136.y, x_136.z, x_137.w);
  let x_139 : vec4<f32> = u_xlat0;
  let x_142 : vec3<f32> = max(vec3<f32>(x_139.x, x_139.y, x_139.z), vec3<f32>(0.0f, 0.0f, 0.0f));
  let x_143 : vec4<f32> = u_xlat1;
  u_xlat1 = vec4<f32>(x_143.x, x_142.x, x_142.y, x_142.z);
  let x_145 : vec4<f32> = u_xlat1;
  u_xlat0.x = dot(x_145, vec4<f32>(4.0f, 3.0f, 2.0f, 1.0f));
  let x_153 : f32 = u_xlat0.x;
  u_xlat0.x = (-(x_153) + 4.0f);
  let x_160 : f32 = u_xlat0.x;
  u_xlatu0 = u32(x_160);
  let x_164 : u32 = u_xlatu0;
  u_xlati0 = (bitcast<i32>(x_164) << bitcast<u32>(2i));
  let x_169 : vec3<f32> = vs_TEXCOORD6;
  let x_172 : i32 = u_xlati0;
  let x_175 : i32 = u_xlati0;
  let x_179 : vec4<f32> = x_20.x_MainLightWorldToShadow[((x_172 + 1i) / 4i)][((x_175 + 1i) % 4i)];
  u_xlat17 = (vec3<f32>(x_169.y, x_169.y, x_169.y) * vec3<f32>(x_179.x, x_179.y, x_179.z));
  let x_182 : i32 = u_xlati0;
  let x_184 : i32 = u_xlati0;
  let x_187 : vec4<f32> = x_20.x_MainLightWorldToShadow[(x_182 / 4i)][(x_184 % 4i)];
  let x_189 : vec3<f32> = vs_TEXCOORD6;
  let x_192 : vec3<f32> = u_xlat17;
  u_xlat17 = ((vec3<f32>(x_187.x, x_187.y, x_187.z) * vec3<f32>(x_189.x, x_189.x, x_189.x)) + x_192);
  let x_194 : i32 = u_xlati0;
  let x_197 : i32 = u_xlati0;
  let x_201 : vec4<f32> = x_20.x_MainLightWorldToShadow[((x_194 + 2i) / 4i)][((x_197 + 2i) % 4i)];
  let x_203 : vec3<f32> = vs_TEXCOORD6;
  let x_206 : vec3<f32> = u_xlat17;
  u_xlat17 = ((vec3<f32>(x_201.x, x_201.y, x_201.z) * vec3<f32>(x_203.z, x_203.z, x_203.z)) + x_206);
  let x_208 : vec3<f32> = u_xlat17;
  let x_209 : i32 = u_xlati0;
  let x_212 : i32 = u_xlati0;
  let x_216 : vec4<f32> = x_20.x_MainLightWorldToShadow[((x_209 + 3i) / 4i)][((x_212 + 3i) % 4i)];
  let x_218 : vec3<f32> = (x_208 + vec3<f32>(x_216.x, x_216.y, x_216.z));
  let x_219 : vec4<f32> = u_xlat0;
  u_xlat0 = vec4<f32>(x_218.x, x_218.y, x_218.z, x_219.w);
  let x_234 : vec2<f32> = vs_TEXCOORD1;
  let x_240 : f32 = x_237.x_GlobalMipBias.x;
  let x_241 : vec4<f32> = textureSampleBias(unity_LightmapInd, samplerunity_Lightmap, x_234, x_240);
  u_xlat1 = x_241;
  let x_246 : vec2<f32> = vs_TEXCOORD1;
  let x_248 : f32 = x_237.x_GlobalMipBias.x;
  let x_249 : vec4<f32> = textureSampleBias(unity_Lightmap, samplerunity_Lightmap, x_246, x_248);
  let x_250 : vec3<f32> = vec3<f32>(x_249.x, x_249.y, x_249.z);
  let x_251 : vec4<f32> = u_xlat2;
  u_xlat2 = vec4<f32>(x_250.x, x_250.y, x_250.z, x_251.w);
  let x_253 : vec4<f32> = u_xlat1;
  let x_257 : vec3<f32> = (vec3<f32>(x_253.x, x_253.y, x_253.z) + vec3<f32>(-0.5f, -0.5f, -0.5f));
  let x_258 : vec4<f32> = u_xlat1;
  u_xlat1 = vec4<f32>(x_257.x, x_257.y, x_257.z, x_258.w);
  let x_263 : vec4<f32> = vs_TEXCOORD5;
  let x_265 : vec4<f32> = u_xlat1;
  u_xlat51 = dot(vec3<f32>(x_263.x, x_263.y, x_263.z), vec3<f32>(x_265.x, x_265.y, x_265.z));
  let x_268 : f32 = u_xlat51;
  u_xlat51 = (x_268 + 0.5f);
  let x_271 : f32 = u_xlat51;
  let x_273 : vec4<f32> = u_xlat2;
  let x_275 : vec3<f32> = (vec3<f32>(x_271, x_271, x_271) * vec3<f32>(x_273.x, x_273.y, x_273.z));
  let x_276 : vec4<f32> = u_xlat1;
  u_xlat1 = vec4<f32>(x_275.x, x_275.y, x_275.z, x_276.w);
  let x_279 : f32 = u_xlat1.w;
  u_xlat51 = max(x_279, 0.0001f);
  let x_282 : vec4<f32> = u_xlat1;
  let x_284 : f32 = u_xlat51;
  let x_286 : vec3<f32> = (vec3<f32>(x_282.x, x_282.y, x_282.z) / vec3<f32>(x_284, x_284, x_284));
  let x_287 : vec4<f32> = u_xlat1;
  u_xlat1 = vec4<f32>(x_286.x, x_286.y, x_286.z, x_287.w);
  let x_295 : vec2<f32> = vs_TEXCOORD0;
  let x_297 : f32 = x_237.x_GlobalMipBias.x;
  let x_298 : vec4<f32> = textureSampleBias(x_MainTex, sampler_MainTex, x_295, x_297);
  u_xlat2 = x_298;
  let x_302 : f32 = x_20.x_MainLightShadowParams.y;
  u_xlatb51 = (0.0f < x_302);
  let x_304 : bool = u_xlatb51;
  if (x_304) {
    let x_308 : f32 = x_20.x_MainLightShadowParams.y;
    u_xlatb51 = (x_308 == 1.0f);
    let x_310 : bool = u_xlatb51;
    if (x_310) {
      let x_313 : vec4<f32> = u_xlat0;
      let x_317 : vec4<f32> = x_20.x_MainLightShadowOffset0;
      u_xlat3 = (vec4<f32>(x_313.x, x_313.y, x_313.x, x_313.y) + x_317);
      let x_320 : vec4<f32> = u_xlat3;
      let x_321 : vec2<f32> = vec2<f32>(x_320.x, x_320.y);
      let x_323 : f32 = u_xlat0.z;
      txVec0 = vec3<f32>(x_321.x, x_321.y, x_323);
      let x_336 : vec3<f32> = txVec0;
      let x_338 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_336.xy, x_336.z);
      u_xlat4.x = x_338;
      let x_341 : vec4<f32> = u_xlat3;
      let x_342 : vec2<f32> = vec2<f32>(x_341.z, x_341.w);
      let x_344 : f32 = u_xlat0.z;
      txVec1 = vec3<f32>(x_342.x, x_342.y, x_344);
      let x_351 : vec3<f32> = txVec1;
      let x_353 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_351.xy, x_351.z);
      u_xlat4.y = x_353;
      let x_355 : vec4<f32> = u_xlat0;
      let x_359 : vec4<f32> = x_20.x_MainLightShadowOffset1;
      u_xlat3 = (vec4<f32>(x_355.x, x_355.y, x_355.x, x_355.y) + x_359);
      let x_362 : vec4<f32> = u_xlat3;
      let x_363 : vec2<f32> = vec2<f32>(x_362.x, x_362.y);
      let x_365 : f32 = u_xlat0.z;
      txVec2 = vec3<f32>(x_363.x, x_363.y, x_365);
      let x_372 : vec3<f32> = txVec2;
      let x_374 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_372.xy, x_372.z);
      u_xlat4.z = x_374;
      let x_377 : vec4<f32> = u_xlat3;
      let x_378 : vec2<f32> = vec2<f32>(x_377.z, x_377.w);
      let x_380 : f32 = u_xlat0.z;
      txVec3 = vec3<f32>(x_378.x, x_378.y, x_380);
      let x_387 : vec3<f32> = txVec3;
      let x_389 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_387.xy, x_387.z);
      u_xlat4.w = x_389;
      let x_391 : vec4<f32> = u_xlat4;
      u_xlat51 = dot(x_391, vec4<f32>(0.25f, 0.25f, 0.25f, 0.25f));
    } else {
      let x_398 : f32 = x_20.x_MainLightShadowParams.y;
      u_xlatb52 = (x_398 == 2.0f);
      let x_400 : bool = u_xlatb52;
      if (x_400) {
        let x_403 : vec4<f32> = u_xlat0;
        let x_407 : vec4<f32> = x_20.x_MainLightShadowmapSize;
        let x_411 : vec2<f32> = ((vec2<f32>(x_403.x, x_403.y) * vec2<f32>(x_407.z, x_407.w)) + vec2<f32>(0.5f, 0.5f));
        let x_412 : vec4<f32> = u_xlat3;
        u_xlat3 = vec4<f32>(x_411.x, x_411.y, x_412.z, x_412.w);
        let x_414 : vec4<f32> = u_xlat3;
        let x_416 : vec2<f32> = floor(vec2<f32>(x_414.x, x_414.y));
        let x_417 : vec4<f32> = u_xlat3;
        u_xlat3 = vec4<f32>(x_416.x, x_416.y, x_417.z, x_417.w);
        let x_421 : vec4<f32> = u_xlat0;
        let x_424 : vec4<f32> = x_20.x_MainLightShadowmapSize;
        let x_427 : vec4<f32> = u_xlat3;
        u_xlat37 = ((vec2<f32>(x_421.x, x_421.y) * vec2<f32>(x_424.z, x_424.w)) + -(vec2<f32>(x_427.x, x_427.y)));
        let x_431 : vec2<f32> = u_xlat37;
        u_xlat4 = (vec4<f32>(x_431.x, x_431.x, x_431.y, x_431.y) + vec4<f32>(0.5f, 1.0f, 0.5f, 1.0f));
        let x_436 : vec4<f32> = u_xlat4;
        let x_438 : vec4<f32> = u_xlat4;
        u_xlat5 = (vec4<f32>(x_436.x, x_436.x, x_436.z, x_436.z) * vec4<f32>(x_438.x, x_438.x, x_438.z, x_438.z));
        let x_441 : vec4<f32> = u_xlat5;
        let x_445 : vec2<f32> = (vec2<f32>(x_441.y, x_441.w) * vec2<f32>(0.079999998f, 0.079999998f));
        let x_446 : vec4<f32> = u_xlat4;
        u_xlat4 = vec4<f32>(x_445.x, x_446.y, x_445.y, x_446.w);
        let x_448 : vec4<f32> = u_xlat5;
        let x_451 : vec2<f32> = u_xlat37;
        let x_453 : vec2<f32> = ((vec2<f32>(x_448.x, x_448.z) * vec2<f32>(0.5f, 0.5f)) + -(x_451));
        let x_454 : vec4<f32> = u_xlat5;
        u_xlat5 = vec4<f32>(x_453.x, x_453.y, x_454.z, x_454.w);
        let x_457 : vec2<f32> = u_xlat37;
        u_xlat39 = (-(x_457) + vec2<f32>(1.0f, 1.0f));
        let x_462 : vec2<f32> = u_xlat37;
        let x_464 : vec2<f32> = min(x_462, vec2<f32>(0.0f, 0.0f));
        let x_465 : vec4<f32> = u_xlat6;
        u_xlat6 = vec4<f32>(x_464.x, x_464.y, x_465.z, x_465.w);
        let x_467 : vec4<f32> = u_xlat6;
        let x_470 : vec4<f32> = u_xlat6;
        let x_473 : vec2<f32> = u_xlat39;
        let x_474 : vec2<f32> = ((-(vec2<f32>(x_467.x, x_467.y)) * vec2<f32>(x_470.x, x_470.y)) + x_473);
        let x_475 : vec4<f32> = u_xlat6;
        u_xlat6 = vec4<f32>(x_474.x, x_474.y, x_475.z, x_475.w);
        let x_477 : vec2<f32> = u_xlat37;
        u_xlat37 = max(x_477, vec2<f32>(0.0f, 0.0f));
        let x_479 : vec2<f32> = u_xlat37;
        let x_481 : vec2<f32> = u_xlat37;
        let x_483 : vec4<f32> = u_xlat4;
        u_xlat37 = ((-(x_479) * x_481) + vec2<f32>(x_483.y, x_483.w));
        let x_486 : vec4<f32> = u_xlat6;
        let x_488 : vec2<f32> = (vec2<f32>(x_486.x, x_486.y) + vec2<f32>(1.0f, 1.0f));
        let x_489 : vec4<f32> = u_xlat6;
        u_xlat6 = vec4<f32>(x_488.x, x_488.y, x_489.z, x_489.w);
        let x_491 : vec2<f32> = u_xlat37;
        u_xlat37 = (x_491 + vec2<f32>(1.0f, 1.0f));
        let x_494 : vec4<f32> = u_xlat5;
        let x_498 : vec2<f32> = (vec2<f32>(x_494.x, x_494.y) * vec2<f32>(0.159999996f, 0.159999996f));
        let x_499 : vec4<f32> = u_xlat7;
        u_xlat7 = vec4<f32>(x_498.x, x_498.y, x_499.z, x_499.w);
        let x_501 : vec2<f32> = u_xlat39;
        let x_502 : vec2<f32> = (x_501 * vec2<f32>(0.159999996f, 0.159999996f));
        let x_503 : vec4<f32> = u_xlat5;
        u_xlat5 = vec4<f32>(x_502.x, x_502.y, x_503.z, x_503.w);
        let x_505 : vec4<f32> = u_xlat6;
        let x_507 : vec2<f32> = (vec2<f32>(x_505.x, x_505.y) * vec2<f32>(0.159999996f, 0.159999996f));
        let x_508 : vec4<f32> = u_xlat6;
        u_xlat6 = vec4<f32>(x_507.x, x_507.y, x_508.z, x_508.w);
        let x_511 : vec2<f32> = u_xlat37;
        let x_512 : vec2<f32> = (x_511 * vec2<f32>(0.159999996f, 0.159999996f));
        let x_513 : vec4<f32> = u_xlat8;
        u_xlat8 = vec4<f32>(x_512.x, x_512.y, x_513.z, x_513.w);
        let x_515 : vec4<f32> = u_xlat4;
        u_xlat37 = (vec2<f32>(x_515.y, x_515.w) * vec2<f32>(0.159999996f, 0.159999996f));
        let x_519 : f32 = u_xlat6.x;
        u_xlat7.z = x_519;
        let x_522 : f32 = u_xlat37.x;
        u_xlat7.w = x_522;
        let x_525 : f32 = u_xlat8.x;
        u_xlat5.z = x_525;
        let x_528 : f32 = u_xlat4.x;
        u_xlat5.w = x_528;
        let x_531 : vec4<f32> = u_xlat5;
        let x_533 : vec4<f32> = u_xlat7;
        u_xlat9 = (vec4<f32>(x_531.z, x_531.w, x_531.x, x_531.z) + vec4<f32>(x_533.z, x_533.w, x_533.x, x_533.z));
        let x_537 : f32 = u_xlat7.y;
        u_xlat6.z = x_537;
        let x_540 : f32 = u_xlat37.y;
        u_xlat6.w = x_540;
        let x_543 : f32 = u_xlat5.y;
        u_xlat8.z = x_543;
        let x_546 : f32 = u_xlat4.z;
        u_xlat8.w = x_546;
        let x_548 : vec4<f32> = u_xlat6;
        let x_550 : vec4<f32> = u_xlat8;
        let x_552 : vec3<f32> = (vec3<f32>(x_548.z, x_548.y, x_548.w) + vec3<f32>(x_550.z, x_550.y, x_550.w));
        let x_553 : vec4<f32> = u_xlat4;
        u_xlat4 = vec4<f32>(x_552.x, x_552.y, x_552.z, x_553.w);
        let x_555 : vec4<f32> = u_xlat5;
        let x_557 : vec4<f32> = u_xlat9;
        let x_559 : vec3<f32> = (vec3<f32>(x_555.x, x_555.z, x_555.w) / vec3<f32>(x_557.z, x_557.w, x_557.y));
        let x_560 : vec4<f32> = u_xlat5;
        u_xlat5 = vec4<f32>(x_559.x, x_559.y, x_559.z, x_560.w);
        let x_562 : vec4<f32> = u_xlat5;
        let x_567 : vec3<f32> = (vec3<f32>(x_562.x, x_562.y, x_562.z) + vec3<f32>(-2.5f, -0.5f, 1.5f));
        let x_568 : vec4<f32> = u_xlat5;
        u_xlat5 = vec4<f32>(x_567.x, x_567.y, x_567.z, x_568.w);
        let x_570 : vec4<f32> = u_xlat8;
        let x_572 : vec4<f32> = u_xlat4;
        let x_574 : vec3<f32> = (vec3<f32>(x_570.z, x_570.y, x_570.w) / vec3<f32>(x_572.x, x_572.y, x_572.z));
        let x_575 : vec4<f32> = u_xlat6;
        u_xlat6 = vec4<f32>(x_574.x, x_574.y, x_574.z, x_575.w);
        let x_577 : vec4<f32> = u_xlat6;
        let x_579 : vec3<f32> = (vec3<f32>(x_577.x, x_577.y, x_577.z) + vec3<f32>(-2.5f, -0.5f, 1.5f));
        let x_580 : vec4<f32> = u_xlat6;
        u_xlat6 = vec4<f32>(x_579.x, x_579.y, x_579.z, x_580.w);
        let x_582 : vec4<f32> = u_xlat5;
        let x_585 : vec4<f32> = x_20.x_MainLightShadowmapSize;
        let x_587 : vec3<f32> = (vec3<f32>(x_582.y, x_582.x, x_582.z) * vec3<f32>(x_585.x, x_585.x, x_585.x));
        let x_588 : vec4<f32> = u_xlat5;
        u_xlat5 = vec4<f32>(x_587.x, x_587.y, x_587.z, x_588.w);
        let x_590 : vec4<f32> = u_xlat6;
        let x_593 : vec4<f32> = x_20.x_MainLightShadowmapSize;
        let x_595 : vec3<f32> = (vec3<f32>(x_590.x, x_590.y, x_590.z) * vec3<f32>(x_593.y, x_593.y, x_593.y));
        let x_596 : vec4<f32> = u_xlat6;
        u_xlat6 = vec4<f32>(x_595.x, x_595.y, x_595.z, x_596.w);
        let x_599 : f32 = u_xlat6.x;
        u_xlat5.w = x_599;
        let x_601 : vec4<f32> = u_xlat3;
        let x_604 : vec4<f32> = x_20.x_MainLightShadowmapSize;
        let x_607 : vec4<f32> = u_xlat5;
        u_xlat7 = ((vec4<f32>(x_601.x, x_601.y, x_601.x, x_601.y) * vec4<f32>(x_604.x, x_604.y, x_604.x, x_604.y)) + vec4<f32>(x_607.y, x_607.w, x_607.x, x_607.w));
        let x_610 : vec4<f32> = u_xlat3;
        let x_613 : vec4<f32> = x_20.x_MainLightShadowmapSize;
        let x_616 : vec4<f32> = u_xlat5;
        u_xlat37 = ((vec2<f32>(x_610.x, x_610.y) * vec2<f32>(x_613.x, x_613.y)) + vec2<f32>(x_616.z, x_616.w));
        let x_620 : f32 = u_xlat5.y;
        u_xlat6.w = x_620;
        let x_622 : vec4<f32> = u_xlat6;
        let x_623 : vec2<f32> = vec2<f32>(x_622.y, x_622.z);
        let x_624 : vec4<f32> = u_xlat5;
        u_xlat5 = vec4<f32>(x_624.x, x_623.x, x_624.z, x_623.y);
        let x_626 : vec4<f32> = u_xlat3;
        let x_629 : vec4<f32> = x_20.x_MainLightShadowmapSize;
        let x_632 : vec4<f32> = u_xlat5;
        u_xlat8 = ((vec4<f32>(x_626.x, x_626.y, x_626.x, x_626.y) * vec4<f32>(x_629.x, x_629.y, x_629.x, x_629.y)) + vec4<f32>(x_632.x, x_632.y, x_632.z, x_632.y));
        let x_635 : vec4<f32> = u_xlat3;
        let x_638 : vec4<f32> = x_20.x_MainLightShadowmapSize;
        let x_641 : vec4<f32> = u_xlat6;
        u_xlat6 = ((vec4<f32>(x_635.x, x_635.y, x_635.x, x_635.y) * vec4<f32>(x_638.x, x_638.y, x_638.x, x_638.y)) + vec4<f32>(x_641.w, x_641.y, x_641.w, x_641.z));
        let x_644 : vec4<f32> = u_xlat3;
        let x_647 : vec4<f32> = x_20.x_MainLightShadowmapSize;
        let x_650 : vec4<f32> = u_xlat5;
        u_xlat5 = ((vec4<f32>(x_644.x, x_644.y, x_644.x, x_644.y) * vec4<f32>(x_647.x, x_647.y, x_647.x, x_647.y)) + vec4<f32>(x_650.x, x_650.w, x_650.z, x_650.w));
        let x_654 : vec4<f32> = u_xlat4;
        let x_656 : vec4<f32> = u_xlat9;
        u_xlat10 = (vec4<f32>(x_654.x, x_654.x, x_654.x, x_654.y) * vec4<f32>(x_656.z, x_656.w, x_656.y, x_656.z));
        let x_660 : vec4<f32> = u_xlat4;
        let x_662 : vec4<f32> = u_xlat9;
        u_xlat11 = (vec4<f32>(x_660.y, x_660.y, x_660.z, x_660.z) * x_662);
        let x_666 : f32 = u_xlat4.z;
        let x_668 : f32 = u_xlat9.y;
        u_xlat52 = (x_666 * x_668);
        let x_671 : vec4<f32> = u_xlat7;
        let x_672 : vec2<f32> = vec2<f32>(x_671.x, x_671.y);
        let x_674 : f32 = u_xlat0.z;
        txVec4 = vec3<f32>(x_672.x, x_672.y, x_674);
        let x_681 : vec3<f32> = txVec4;
        let x_683 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_681.xy, x_681.z);
        u_xlat3.x = x_683;
        let x_686 : vec4<f32> = u_xlat7;
        let x_687 : vec2<f32> = vec2<f32>(x_686.z, x_686.w);
        let x_689 : f32 = u_xlat0.z;
        txVec5 = vec3<f32>(x_687.x, x_687.y, x_689);
        let x_697 : vec3<f32> = txVec5;
        let x_699 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_697.xy, x_697.z);
        u_xlat20 = x_699;
        let x_700 : f32 = u_xlat20;
        let x_702 : f32 = u_xlat10.y;
        u_xlat20 = (x_700 * x_702);
        let x_705 : f32 = u_xlat10.x;
        let x_707 : f32 = u_xlat3.x;
        let x_709 : f32 = u_xlat20;
        u_xlat3.x = ((x_705 * x_707) + x_709);
        let x_713 : vec2<f32> = u_xlat37;
        let x_715 : f32 = u_xlat0.z;
        txVec6 = vec3<f32>(x_713.x, x_713.y, x_715);
        let x_722 : vec3<f32> = txVec6;
        let x_724 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_722.xy, x_722.z);
        u_xlat20 = x_724;
        let x_726 : f32 = u_xlat10.z;
        let x_727 : f32 = u_xlat20;
        let x_730 : f32 = u_xlat3.x;
        u_xlat3.x = ((x_726 * x_727) + x_730);
        let x_734 : vec4<f32> = u_xlat6;
        let x_735 : vec2<f32> = vec2<f32>(x_734.x, x_734.y);
        let x_737 : f32 = u_xlat0.z;
        txVec7 = vec3<f32>(x_735.x, x_735.y, x_737);
        let x_744 : vec3<f32> = txVec7;
        let x_746 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_744.xy, x_744.z);
        u_xlat20 = x_746;
        let x_748 : f32 = u_xlat10.w;
        let x_749 : f32 = u_xlat20;
        let x_752 : f32 = u_xlat3.x;
        u_xlat3.x = ((x_748 * x_749) + x_752);
        let x_756 : vec4<f32> = u_xlat8;
        let x_757 : vec2<f32> = vec2<f32>(x_756.x, x_756.y);
        let x_759 : f32 = u_xlat0.z;
        txVec8 = vec3<f32>(x_757.x, x_757.y, x_759);
        let x_766 : vec3<f32> = txVec8;
        let x_768 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_766.xy, x_766.z);
        u_xlat20 = x_768;
        let x_770 : f32 = u_xlat11.x;
        let x_771 : f32 = u_xlat20;
        let x_774 : f32 = u_xlat3.x;
        u_xlat3.x = ((x_770 * x_771) + x_774);
        let x_778 : vec4<f32> = u_xlat8;
        let x_779 : vec2<f32> = vec2<f32>(x_778.z, x_778.w);
        let x_781 : f32 = u_xlat0.z;
        txVec9 = vec3<f32>(x_779.x, x_779.y, x_781);
        let x_788 : vec3<f32> = txVec9;
        let x_790 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_788.xy, x_788.z);
        u_xlat20 = x_790;
        let x_792 : f32 = u_xlat11.y;
        let x_793 : f32 = u_xlat20;
        let x_796 : f32 = u_xlat3.x;
        u_xlat3.x = ((x_792 * x_793) + x_796);
        let x_800 : vec4<f32> = u_xlat6;
        let x_801 : vec2<f32> = vec2<f32>(x_800.z, x_800.w);
        let x_803 : f32 = u_xlat0.z;
        txVec10 = vec3<f32>(x_801.x, x_801.y, x_803);
        let x_810 : vec3<f32> = txVec10;
        let x_812 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_810.xy, x_810.z);
        u_xlat20 = x_812;
        let x_814 : f32 = u_xlat11.z;
        let x_815 : f32 = u_xlat20;
        let x_818 : f32 = u_xlat3.x;
        u_xlat3.x = ((x_814 * x_815) + x_818);
        let x_822 : vec4<f32> = u_xlat5;
        let x_823 : vec2<f32> = vec2<f32>(x_822.x, x_822.y);
        let x_825 : f32 = u_xlat0.z;
        txVec11 = vec3<f32>(x_823.x, x_823.y, x_825);
        let x_832 : vec3<f32> = txVec11;
        let x_834 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_832.xy, x_832.z);
        u_xlat20 = x_834;
        let x_836 : f32 = u_xlat11.w;
        let x_837 : f32 = u_xlat20;
        let x_840 : f32 = u_xlat3.x;
        u_xlat3.x = ((x_836 * x_837) + x_840);
        let x_844 : vec4<f32> = u_xlat5;
        let x_845 : vec2<f32> = vec2<f32>(x_844.z, x_844.w);
        let x_847 : f32 = u_xlat0.z;
        txVec12 = vec3<f32>(x_845.x, x_845.y, x_847);
        let x_854 : vec3<f32> = txVec12;
        let x_856 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_854.xy, x_854.z);
        u_xlat20 = x_856;
        let x_857 : f32 = u_xlat52;
        let x_858 : f32 = u_xlat20;
        let x_861 : f32 = u_xlat3.x;
        u_xlat51 = ((x_857 * x_858) + x_861);
      } else {
        let x_864 : vec4<f32> = u_xlat0;
        let x_867 : vec4<f32> = x_20.x_MainLightShadowmapSize;
        let x_870 : vec2<f32> = ((vec2<f32>(x_864.x, x_864.y) * vec2<f32>(x_867.z, x_867.w)) + vec2<f32>(0.5f, 0.5f));
        let x_871 : vec4<f32> = u_xlat3;
        u_xlat3 = vec4<f32>(x_870.x, x_870.y, x_871.z, x_871.w);
        let x_873 : vec4<f32> = u_xlat3;
        let x_875 : vec2<f32> = floor(vec2<f32>(x_873.x, x_873.y));
        let x_876 : vec4<f32> = u_xlat3;
        u_xlat3 = vec4<f32>(x_875.x, x_875.y, x_876.z, x_876.w);
        let x_878 : vec4<f32> = u_xlat0;
        let x_881 : vec4<f32> = x_20.x_MainLightShadowmapSize;
        let x_884 : vec4<f32> = u_xlat3;
        u_xlat37 = ((vec2<f32>(x_878.x, x_878.y) * vec2<f32>(x_881.z, x_881.w)) + -(vec2<f32>(x_884.x, x_884.y)));
        let x_888 : vec2<f32> = u_xlat37;
        u_xlat4 = (vec4<f32>(x_888.x, x_888.x, x_888.y, x_888.y) + vec4<f32>(0.5f, 1.0f, 0.5f, 1.0f));
        let x_891 : vec4<f32> = u_xlat4;
        let x_893 : vec4<f32> = u_xlat4;
        u_xlat5 = (vec4<f32>(x_891.x, x_891.x, x_891.z, x_891.z) * vec4<f32>(x_893.x, x_893.x, x_893.z, x_893.z));
        let x_896 : vec4<f32> = u_xlat5;
        let x_900 : vec2<f32> = (vec2<f32>(x_896.y, x_896.w) * vec2<f32>(0.040816002f, 0.040816002f));
        let x_901 : vec4<f32> = u_xlat6;
        u_xlat6 = vec4<f32>(x_901.x, x_900.x, x_901.z, x_900.y);
        let x_903 : vec4<f32> = u_xlat5;
        let x_906 : vec2<f32> = u_xlat37;
        let x_908 : vec2<f32> = ((vec2<f32>(x_903.x, x_903.z) * vec2<f32>(0.5f, 0.5f)) + -(x_906));
        let x_909 : vec4<f32> = u_xlat4;
        u_xlat4 = vec4<f32>(x_908.x, x_909.y, x_908.y, x_909.w);
        let x_911 : vec2<f32> = u_xlat37;
        let x_913 : vec2<f32> = (-(x_911) + vec2<f32>(1.0f, 1.0f));
        let x_914 : vec4<f32> = u_xlat5;
        u_xlat5 = vec4<f32>(x_913.x, x_913.y, x_914.z, x_914.w);
        let x_916 : vec2<f32> = u_xlat37;
        u_xlat39 = min(x_916, vec2<f32>(0.0f, 0.0f));
        let x_918 : vec2<f32> = u_xlat39;
        let x_920 : vec2<f32> = u_xlat39;
        let x_922 : vec4<f32> = u_xlat5;
        let x_924 : vec2<f32> = ((-(x_918) * x_920) + vec2<f32>(x_922.x, x_922.y));
        let x_925 : vec4<f32> = u_xlat5;
        u_xlat5 = vec4<f32>(x_924.x, x_924.y, x_925.z, x_925.w);
        let x_927 : vec2<f32> = u_xlat37;
        u_xlat39 = max(x_927, vec2<f32>(0.0f, 0.0f));
        let x_930 : vec2<f32> = u_xlat39;
        let x_932 : vec2<f32> = u_xlat39;
        let x_934 : vec4<f32> = u_xlat4;
        let x_936 : vec2<f32> = ((-(x_930) * x_932) + vec2<f32>(x_934.y, x_934.w));
        let x_937 : vec3<f32> = u_xlat21;
        u_xlat21 = vec3<f32>(x_936.x, x_937.y, x_936.y);
        let x_939 : vec4<f32> = u_xlat5;
        let x_942 : vec2<f32> = (vec2<f32>(x_939.x, x_939.y) + vec2<f32>(2.0f, 2.0f));
        let x_943 : vec4<f32> = u_xlat5;
        u_xlat5 = vec4<f32>(x_942.x, x_942.y, x_943.z, x_943.w);
        let x_945 : vec3<f32> = u_xlat21;
        let x_947 : vec2<f32> = (vec2<f32>(x_945.x, x_945.z) + vec2<f32>(2.0f, 2.0f));
        let x_948 : vec4<f32> = u_xlat4;
        u_xlat4 = vec4<f32>(x_948.x, x_947.x, x_948.z, x_947.y);
        let x_951 : f32 = u_xlat4.y;
        u_xlat7.z = (x_951 * 0.081632003f);
        let x_955 : vec4<f32> = u_xlat4;
        let x_958 : vec3<f32> = (vec3<f32>(x_955.z, x_955.x, x_955.w) * vec3<f32>(0.081632003f, 0.081632003f, 0.081632003f));
        let x_959 : vec4<f32> = u_xlat8;
        u_xlat8 = vec4<f32>(x_958.x, x_958.y, x_958.z, x_959.w);
        let x_961 : vec4<f32> = u_xlat5;
        let x_964 : vec2<f32> = (vec2<f32>(x_961.x, x_961.y) * vec2<f32>(0.081632003f, 0.081632003f));
        let x_965 : vec4<f32> = u_xlat4;
        u_xlat4 = vec4<f32>(x_964.x, x_964.y, x_965.z, x_965.w);
        let x_968 : f32 = u_xlat8.y;
        u_xlat7.x = x_968;
        let x_970 : vec2<f32> = u_xlat37;
        let x_977 : vec2<f32> = ((vec2<f32>(x_970.x, x_970.x) * vec2<f32>(-0.081632003f, 0.081632003f)) + vec2<f32>(0.163264006f, 0.081632003f));
        let x_978 : vec4<f32> = u_xlat7;
        u_xlat7 = vec4<f32>(x_978.x, x_977.x, x_978.z, x_977.y);
        let x_980 : vec2<f32> = u_xlat37;
        let x_984 : vec2<f32> = ((vec2<f32>(x_980.x, x_980.x) * vec2<f32>(-0.081632003f, 0.081632003f)) + vec2<f32>(0.081632003f, 0.163264006f));
        let x_985 : vec4<f32> = u_xlat5;
        u_xlat5 = vec4<f32>(x_984.x, x_985.y, x_984.y, x_985.w);
        let x_988 : f32 = u_xlat4.x;
        u_xlat5.y = x_988;
        let x_991 : f32 = u_xlat6.y;
        u_xlat5.w = x_991;
        let x_993 : vec4<f32> = u_xlat5;
        let x_994 : vec4<f32> = u_xlat7;
        u_xlat7 = (x_993 + x_994);
        let x_996 : vec2<f32> = u_xlat37;
        let x_999 : vec2<f32> = ((vec2<f32>(x_996.y, x_996.y) * vec2<f32>(-0.081632003f, 0.081632003f)) + vec2<f32>(0.163264006f, 0.081632003f));
        let x_1000 : vec4<f32> = u_xlat8;
        u_xlat8 = vec4<f32>(x_1000.x, x_999.x, x_1000.z, x_999.y);
        let x_1002 : vec2<f32> = u_xlat37;
        let x_1005 : vec2<f32> = ((vec2<f32>(x_1002.y, x_1002.y) * vec2<f32>(-0.081632003f, 0.081632003f)) + vec2<f32>(0.081632003f, 0.163264006f));
        let x_1006 : vec4<f32> = u_xlat6;
        u_xlat6 = vec4<f32>(x_1005.x, x_1006.y, x_1005.y, x_1006.w);
        let x_1009 : f32 = u_xlat4.y;
        u_xlat6.y = x_1009;
        let x_1011 : vec4<f32> = u_xlat6;
        let x_1012 : vec4<f32> = u_xlat8;
        u_xlat4 = (x_1011 + x_1012);
        let x_1014 : vec4<f32> = u_xlat5;
        let x_1015 : vec4<f32> = u_xlat7;
        u_xlat5 = (x_1014 / x_1015);
        let x_1017 : vec4<f32> = u_xlat5;
        u_xlat5 = (x_1017 + vec4<f32>(-3.5f, -1.5f, 0.5f, 2.5f));
        let x_1023 : vec4<f32> = u_xlat6;
        let x_1024 : vec4<f32> = u_xlat4;
        u_xlat6 = (x_1023 / x_1024);
        let x_1026 : vec4<f32> = u_xlat6;
        u_xlat6 = (x_1026 + vec4<f32>(-3.5f, -1.5f, 0.5f, 2.5f));
        let x_1028 : vec4<f32> = u_xlat5;
        let x_1031 : vec4<f32> = x_20.x_MainLightShadowmapSize;
        u_xlat5 = (vec4<f32>(x_1028.w, x_1028.x, x_1028.y, x_1028.z) * vec4<f32>(x_1031.x, x_1031.x, x_1031.x, x_1031.x));
        let x_1034 : vec4<f32> = u_xlat6;
        let x_1037 : vec4<f32> = x_20.x_MainLightShadowmapSize;
        u_xlat6 = (vec4<f32>(x_1034.x, x_1034.w, x_1034.y, x_1034.z) * vec4<f32>(x_1037.y, x_1037.y, x_1037.y, x_1037.y));
        let x_1040 : vec4<f32> = u_xlat5;
        let x_1041 : vec3<f32> = vec3<f32>(x_1040.y, x_1040.z, x_1040.w);
        let x_1042 : vec4<f32> = u_xlat8;
        u_xlat8 = vec4<f32>(x_1041.x, x_1042.y, x_1041.y, x_1041.z);
        let x_1045 : f32 = u_xlat6.x;
        u_xlat8.y = x_1045;
        let x_1047 : vec4<f32> = u_xlat3;
        let x_1050 : vec4<f32> = x_20.x_MainLightShadowmapSize;
        let x_1053 : vec4<f32> = u_xlat8;
        u_xlat9 = ((vec4<f32>(x_1047.x, x_1047.y, x_1047.x, x_1047.y) * vec4<f32>(x_1050.x, x_1050.y, x_1050.x, x_1050.y)) + vec4<f32>(x_1053.x, x_1053.y, x_1053.z, x_1053.y));
        let x_1056 : vec4<f32> = u_xlat3;
        let x_1059 : vec4<f32> = x_20.x_MainLightShadowmapSize;
        let x_1062 : vec4<f32> = u_xlat8;
        u_xlat37 = ((vec2<f32>(x_1056.x, x_1056.y) * vec2<f32>(x_1059.x, x_1059.y)) + vec2<f32>(x_1062.w, x_1062.y));
        let x_1066 : f32 = u_xlat8.y;
        u_xlat5.y = x_1066;
        let x_1069 : f32 = u_xlat6.z;
        u_xlat8.y = x_1069;
        let x_1071 : vec4<f32> = u_xlat3;
        let x_1074 : vec4<f32> = x_20.x_MainLightShadowmapSize;
        let x_1077 : vec4<f32> = u_xlat8;
        u_xlat10 = ((vec4<f32>(x_1071.x, x_1071.y, x_1071.x, x_1071.y) * vec4<f32>(x_1074.x, x_1074.y, x_1074.x, x_1074.y)) + vec4<f32>(x_1077.x, x_1077.y, x_1077.z, x_1077.y));
        let x_1080 : vec4<f32> = u_xlat3;
        let x_1083 : vec4<f32> = x_20.x_MainLightShadowmapSize;
        let x_1086 : vec4<f32> = u_xlat8;
        let x_1088 : vec2<f32> = ((vec2<f32>(x_1080.x, x_1080.y) * vec2<f32>(x_1083.x, x_1083.y)) + vec2<f32>(x_1086.w, x_1086.y));
        let x_1089 : vec4<f32> = u_xlat11;
        u_xlat11 = vec4<f32>(x_1088.x, x_1088.y, x_1089.z, x_1089.w);
        let x_1092 : f32 = u_xlat8.y;
        u_xlat5.z = x_1092;
        let x_1095 : vec4<f32> = u_xlat3;
        let x_1098 : vec4<f32> = x_20.x_MainLightShadowmapSize;
        let x_1101 : vec4<f32> = u_xlat5;
        u_xlat12 = ((vec4<f32>(x_1095.x, x_1095.y, x_1095.x, x_1095.y) * vec4<f32>(x_1098.x, x_1098.y, x_1098.x, x_1098.y)) + vec4<f32>(x_1101.x, x_1101.y, x_1101.x, x_1101.z));
        let x_1105 : f32 = u_xlat6.w;
        u_xlat8.y = x_1105;
        let x_1108 : vec4<f32> = u_xlat3;
        let x_1111 : vec4<f32> = x_20.x_MainLightShadowmapSize;
        let x_1114 : vec4<f32> = u_xlat8;
        u_xlat13 = ((vec4<f32>(x_1108.x, x_1108.y, x_1108.x, x_1108.y) * vec4<f32>(x_1111.x, x_1111.y, x_1111.x, x_1111.y)) + vec4<f32>(x_1114.x, x_1114.y, x_1114.z, x_1114.y));
        let x_1118 : vec4<f32> = u_xlat3;
        let x_1121 : vec4<f32> = x_20.x_MainLightShadowmapSize;
        let x_1124 : vec4<f32> = u_xlat8;
        u_xlat22 = ((vec2<f32>(x_1118.x, x_1118.y) * vec2<f32>(x_1121.x, x_1121.y)) + vec2<f32>(x_1124.w, x_1124.y));
        let x_1128 : f32 = u_xlat8.y;
        u_xlat5.w = x_1128;
        let x_1131 : vec4<f32> = u_xlat3;
        let x_1134 : vec4<f32> = x_20.x_MainLightShadowmapSize;
        let x_1137 : vec4<f32> = u_xlat5;
        u_xlat45 = ((vec2<f32>(x_1131.x, x_1131.y) * vec2<f32>(x_1134.x, x_1134.y)) + vec2<f32>(x_1137.x, x_1137.w));
        let x_1140 : vec4<f32> = u_xlat8;
        let x_1141 : vec3<f32> = vec3<f32>(x_1140.x, x_1140.z, x_1140.w);
        let x_1142 : vec4<f32> = u_xlat6;
        u_xlat6 = vec4<f32>(x_1141.x, x_1142.y, x_1141.y, x_1141.z);
        let x_1144 : vec4<f32> = u_xlat3;
        let x_1147 : vec4<f32> = x_20.x_MainLightShadowmapSize;
        let x_1150 : vec4<f32> = u_xlat6;
        u_xlat8 = ((vec4<f32>(x_1144.x, x_1144.y, x_1144.x, x_1144.y) * vec4<f32>(x_1147.x, x_1147.y, x_1147.x, x_1147.y)) + vec4<f32>(x_1150.x, x_1150.y, x_1150.z, x_1150.y));
        let x_1154 : vec4<f32> = u_xlat3;
        let x_1157 : vec4<f32> = x_20.x_MainLightShadowmapSize;
        let x_1160 : vec4<f32> = u_xlat6;
        u_xlat40 = ((vec2<f32>(x_1154.x, x_1154.y) * vec2<f32>(x_1157.x, x_1157.y)) + vec2<f32>(x_1160.w, x_1160.y));
        let x_1164 : f32 = u_xlat5.x;
        u_xlat6.x = x_1164;
        let x_1166 : vec4<f32> = u_xlat3;
        let x_1169 : vec4<f32> = x_20.x_MainLightShadowmapSize;
        let x_1172 : vec4<f32> = u_xlat6;
        let x_1174 : vec2<f32> = ((vec2<f32>(x_1166.x, x_1166.y) * vec2<f32>(x_1169.x, x_1169.y)) + vec2<f32>(x_1172.x, x_1172.y));
        let x_1175 : vec4<f32> = u_xlat3;
        u_xlat3 = vec4<f32>(x_1174.x, x_1174.y, x_1175.z, x_1175.w);
        let x_1178 : vec4<f32> = u_xlat4;
        let x_1180 : vec4<f32> = u_xlat7;
        u_xlat14 = (vec4<f32>(x_1178.x, x_1178.x, x_1178.x, x_1178.x) * x_1180);
        let x_1183 : vec4<f32> = u_xlat4;
        let x_1185 : vec4<f32> = u_xlat7;
        u_xlat15 = (vec4<f32>(x_1183.y, x_1183.y, x_1183.y, x_1183.y) * x_1185);
        let x_1188 : vec4<f32> = u_xlat4;
        let x_1190 : vec4<f32> = u_xlat7;
        u_xlat16 = (vec4<f32>(x_1188.z, x_1188.z, x_1188.z, x_1188.z) * x_1190);
        let x_1192 : vec4<f32> = u_xlat4;
        let x_1194 : vec4<f32> = u_xlat7;
        u_xlat4 = (vec4<f32>(x_1192.w, x_1192.w, x_1192.w, x_1192.w) * x_1194);
        let x_1197 : vec4<f32> = u_xlat9;
        let x_1198 : vec2<f32> = vec2<f32>(x_1197.x, x_1197.y);
        let x_1200 : f32 = u_xlat0.z;
        txVec13 = vec3<f32>(x_1198.x, x_1198.y, x_1200);
        let x_1207 : vec3<f32> = txVec13;
        let x_1209 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1207.xy, x_1207.z);
        u_xlat52 = x_1209;
        let x_1211 : vec4<f32> = u_xlat9;
        let x_1212 : vec2<f32> = vec2<f32>(x_1211.z, x_1211.w);
        let x_1214 : f32 = u_xlat0.z;
        txVec14 = vec3<f32>(x_1212.x, x_1212.y, x_1214);
        let x_1221 : vec3<f32> = txVec14;
        let x_1223 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1221.xy, x_1221.z);
        u_xlat5.x = x_1223;
        let x_1226 : f32 = u_xlat5.x;
        let x_1228 : f32 = u_xlat14.y;
        u_xlat5.x = (x_1226 * x_1228);
        let x_1232 : f32 = u_xlat14.x;
        let x_1233 : f32 = u_xlat52;
        let x_1236 : f32 = u_xlat5.x;
        u_xlat52 = ((x_1232 * x_1233) + x_1236);
        let x_1239 : vec2<f32> = u_xlat37;
        let x_1241 : f32 = u_xlat0.z;
        txVec15 = vec3<f32>(x_1239.x, x_1239.y, x_1241);
        let x_1248 : vec3<f32> = txVec15;
        let x_1250 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1248.xy, x_1248.z);
        u_xlat37.x = x_1250;
        let x_1253 : f32 = u_xlat14.z;
        let x_1255 : f32 = u_xlat37.x;
        let x_1257 : f32 = u_xlat52;
        u_xlat52 = ((x_1253 * x_1255) + x_1257);
        let x_1260 : vec4<f32> = u_xlat12;
        let x_1261 : vec2<f32> = vec2<f32>(x_1260.x, x_1260.y);
        let x_1263 : f32 = u_xlat0.z;
        txVec16 = vec3<f32>(x_1261.x, x_1261.y, x_1263);
        let x_1270 : vec3<f32> = txVec16;
        let x_1272 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1270.xy, x_1270.z);
        u_xlat37.x = x_1272;
        let x_1275 : f32 = u_xlat14.w;
        let x_1277 : f32 = u_xlat37.x;
        let x_1279 : f32 = u_xlat52;
        u_xlat52 = ((x_1275 * x_1277) + x_1279);
        let x_1282 : vec4<f32> = u_xlat10;
        let x_1283 : vec2<f32> = vec2<f32>(x_1282.x, x_1282.y);
        let x_1285 : f32 = u_xlat0.z;
        txVec17 = vec3<f32>(x_1283.x, x_1283.y, x_1285);
        let x_1292 : vec3<f32> = txVec17;
        let x_1294 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1292.xy, x_1292.z);
        u_xlat37.x = x_1294;
        let x_1297 : f32 = u_xlat15.x;
        let x_1299 : f32 = u_xlat37.x;
        let x_1301 : f32 = u_xlat52;
        u_xlat52 = ((x_1297 * x_1299) + x_1301);
        let x_1304 : vec4<f32> = u_xlat10;
        let x_1305 : vec2<f32> = vec2<f32>(x_1304.z, x_1304.w);
        let x_1307 : f32 = u_xlat0.z;
        txVec18 = vec3<f32>(x_1305.x, x_1305.y, x_1307);
        let x_1314 : vec3<f32> = txVec18;
        let x_1316 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1314.xy, x_1314.z);
        u_xlat37.x = x_1316;
        let x_1319 : f32 = u_xlat15.y;
        let x_1321 : f32 = u_xlat37.x;
        let x_1323 : f32 = u_xlat52;
        u_xlat52 = ((x_1319 * x_1321) + x_1323);
        let x_1326 : vec4<f32> = u_xlat11;
        let x_1327 : vec2<f32> = vec2<f32>(x_1326.x, x_1326.y);
        let x_1329 : f32 = u_xlat0.z;
        txVec19 = vec3<f32>(x_1327.x, x_1327.y, x_1329);
        let x_1336 : vec3<f32> = txVec19;
        let x_1338 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1336.xy, x_1336.z);
        u_xlat37.x = x_1338;
        let x_1341 : f32 = u_xlat15.z;
        let x_1343 : f32 = u_xlat37.x;
        let x_1345 : f32 = u_xlat52;
        u_xlat52 = ((x_1341 * x_1343) + x_1345);
        let x_1348 : vec4<f32> = u_xlat12;
        let x_1349 : vec2<f32> = vec2<f32>(x_1348.z, x_1348.w);
        let x_1351 : f32 = u_xlat0.z;
        txVec20 = vec3<f32>(x_1349.x, x_1349.y, x_1351);
        let x_1358 : vec3<f32> = txVec20;
        let x_1360 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1358.xy, x_1358.z);
        u_xlat37.x = x_1360;
        let x_1363 : f32 = u_xlat15.w;
        let x_1365 : f32 = u_xlat37.x;
        let x_1367 : f32 = u_xlat52;
        u_xlat52 = ((x_1363 * x_1365) + x_1367);
        let x_1370 : vec4<f32> = u_xlat13;
        let x_1371 : vec2<f32> = vec2<f32>(x_1370.x, x_1370.y);
        let x_1373 : f32 = u_xlat0.z;
        txVec21 = vec3<f32>(x_1371.x, x_1371.y, x_1373);
        let x_1380 : vec3<f32> = txVec21;
        let x_1382 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1380.xy, x_1380.z);
        u_xlat37.x = x_1382;
        let x_1385 : f32 = u_xlat16.x;
        let x_1387 : f32 = u_xlat37.x;
        let x_1389 : f32 = u_xlat52;
        u_xlat52 = ((x_1385 * x_1387) + x_1389);
        let x_1392 : vec4<f32> = u_xlat13;
        let x_1393 : vec2<f32> = vec2<f32>(x_1392.z, x_1392.w);
        let x_1395 : f32 = u_xlat0.z;
        txVec22 = vec3<f32>(x_1393.x, x_1393.y, x_1395);
        let x_1402 : vec3<f32> = txVec22;
        let x_1404 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1402.xy, x_1402.z);
        u_xlat37.x = x_1404;
        let x_1407 : f32 = u_xlat16.y;
        let x_1409 : f32 = u_xlat37.x;
        let x_1411 : f32 = u_xlat52;
        u_xlat52 = ((x_1407 * x_1409) + x_1411);
        let x_1414 : vec2<f32> = u_xlat22;
        let x_1416 : f32 = u_xlat0.z;
        txVec23 = vec3<f32>(x_1414.x, x_1414.y, x_1416);
        let x_1423 : vec3<f32> = txVec23;
        let x_1425 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1423.xy, x_1423.z);
        u_xlat37.x = x_1425;
        let x_1428 : f32 = u_xlat16.z;
        let x_1430 : f32 = u_xlat37.x;
        let x_1432 : f32 = u_xlat52;
        u_xlat52 = ((x_1428 * x_1430) + x_1432);
        let x_1435 : vec2<f32> = u_xlat45;
        let x_1437 : f32 = u_xlat0.z;
        txVec24 = vec3<f32>(x_1435.x, x_1435.y, x_1437);
        let x_1444 : vec3<f32> = txVec24;
        let x_1446 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1444.xy, x_1444.z);
        u_xlat37.x = x_1446;
        let x_1449 : f32 = u_xlat16.w;
        let x_1451 : f32 = u_xlat37.x;
        let x_1453 : f32 = u_xlat52;
        u_xlat52 = ((x_1449 * x_1451) + x_1453);
        let x_1456 : vec4<f32> = u_xlat8;
        let x_1457 : vec2<f32> = vec2<f32>(x_1456.x, x_1456.y);
        let x_1459 : f32 = u_xlat0.z;
        txVec25 = vec3<f32>(x_1457.x, x_1457.y, x_1459);
        let x_1466 : vec3<f32> = txVec25;
        let x_1468 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1466.xy, x_1466.z);
        u_xlat37.x = x_1468;
        let x_1471 : f32 = u_xlat4.x;
        let x_1473 : f32 = u_xlat37.x;
        let x_1475 : f32 = u_xlat52;
        u_xlat52 = ((x_1471 * x_1473) + x_1475);
        let x_1478 : vec4<f32> = u_xlat8;
        let x_1479 : vec2<f32> = vec2<f32>(x_1478.z, x_1478.w);
        let x_1481 : f32 = u_xlat0.z;
        txVec26 = vec3<f32>(x_1479.x, x_1479.y, x_1481);
        let x_1488 : vec3<f32> = txVec26;
        let x_1490 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1488.xy, x_1488.z);
        u_xlat37.x = x_1490;
        let x_1493 : f32 = u_xlat4.y;
        let x_1495 : f32 = u_xlat37.x;
        let x_1497 : f32 = u_xlat52;
        u_xlat52 = ((x_1493 * x_1495) + x_1497);
        let x_1500 : vec2<f32> = u_xlat40;
        let x_1502 : f32 = u_xlat0.z;
        txVec27 = vec3<f32>(x_1500.x, x_1500.y, x_1502);
        let x_1509 : vec3<f32> = txVec27;
        let x_1511 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1509.xy, x_1509.z);
        u_xlat37.x = x_1511;
        let x_1514 : f32 = u_xlat4.z;
        let x_1516 : f32 = u_xlat37.x;
        let x_1518 : f32 = u_xlat52;
        u_xlat52 = ((x_1514 * x_1516) + x_1518);
        let x_1521 : vec4<f32> = u_xlat3;
        let x_1522 : vec2<f32> = vec2<f32>(x_1521.x, x_1521.y);
        let x_1524 : f32 = u_xlat0.z;
        txVec28 = vec3<f32>(x_1522.x, x_1522.y, x_1524);
        let x_1531 : vec3<f32> = txVec28;
        let x_1533 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1531.xy, x_1531.z);
        u_xlat3.x = x_1533;
        let x_1536 : f32 = u_xlat4.w;
        let x_1538 : f32 = u_xlat3.x;
        let x_1540 : f32 = u_xlat52;
        u_xlat51 = ((x_1536 * x_1538) + x_1540);
      }
    }
  } else {
    let x_1544 : vec4<f32> = u_xlat0;
    let x_1545 : vec2<f32> = vec2<f32>(x_1544.x, x_1544.y);
    let x_1547 : f32 = u_xlat0.z;
    txVec29 = vec3<f32>(x_1545.x, x_1545.y, x_1547);
    let x_1554 : vec3<f32> = txVec29;
    let x_1556 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1554.xy, x_1554.z);
    u_xlat51 = x_1556;
  }
  let x_1558 : f32 = x_20.x_MainLightShadowParams.x;
  u_xlat0.x = (-(x_1558) + 1.0f);
  let x_1562 : f32 = u_xlat51;
  let x_1564 : f32 = x_20.x_MainLightShadowParams.x;
  let x_1567 : f32 = u_xlat0.x;
  u_xlat0.x = ((x_1562 * x_1564) + x_1567);
  let x_1572 : f32 = u_xlat0.z;
  u_xlatb17 = (0.0f >= x_1572);
  let x_1576 : f32 = u_xlat0.z;
  u_xlatb34 = (x_1576 >= 1.0f);
  let x_1578 : bool = u_xlatb34;
  let x_1579 : bool = u_xlatb17;
  u_xlatb17 = (x_1578 | x_1579);
  let x_1581 : bool = u_xlatb17;
  if (x_1581) {
    x_1582 = 1.0f;
  } else {
    let x_1587 : f32 = u_xlat0.x;
    x_1582 = x_1587;
  }
  let x_1588 : f32 = x_1582;
  u_xlat0.x = x_1588;
  let x_1591 : vec4<f32> = vs_TEXCOORD3;
  let x_1593 : vec4<f32> = u_xlat0;
  let x_1596 : vec4<f32> = u_xlat1;
  let x_1598 : vec3<f32> = ((vec3<f32>(x_1591.x, x_1591.y, x_1591.z) * vec3<f32>(x_1593.x, x_1593.x, x_1593.x)) + vec3<f32>(x_1596.x, x_1596.y, x_1596.z));
  let x_1599 : vec4<f32> = u_xlat0;
  u_xlat0 = vec4<f32>(x_1598.x, x_1598.y, x_1598.z, x_1599.w);
  let x_1603 : vec4<f32> = u_xlat0;
  let x_1605 : vec4<f32> = u_xlat2;
  let x_1607 : vec3<f32> = (vec3<f32>(x_1603.x, x_1603.y, x_1603.z) * vec3<f32>(x_1605.x, x_1605.y, x_1605.z));
  let x_1608 : vec4<f32> = SV_Target0;
  SV_Target0 = vec4<f32>(x_1607.x, x_1607.y, x_1607.z, x_1608.w);
  let x_1611 : f32 = u_xlat2.w;
  SV_Target0.w = x_1611;
  return;
}

struct main_out {
  @location(0)
  SV_Target0_1 : vec4<f32>,
}

@fragment
fn main(@location(4) vs_TEXCOORD6_param : vec3<f32>, @location(1) vs_TEXCOORD1_param : vec2<f32>, @location(3) vs_TEXCOORD5_param : vec4<f32>, @location(0) vs_TEXCOORD0_param : vec2<f32>, @location(2) vs_TEXCOORD3_param : vec4<f32>, @builtin(position) gl_FragCoord_param : vec4<f32>) -> main_out {
  vs_TEXCOORD6 = vs_TEXCOORD6_param;
  vs_TEXCOORD1 = vs_TEXCOORD1_param;
  vs_TEXCOORD5 = vs_TEXCOORD5_param;
  vs_TEXCOORD0 = vs_TEXCOORD0_param;
  vs_TEXCOORD3 = vs_TEXCOORD3_param;
  gl_FragCoord = gl_FragCoord_param;
  main_1();
  return main_out(SV_Target0);
}

