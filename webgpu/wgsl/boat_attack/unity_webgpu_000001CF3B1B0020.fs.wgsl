diagnostic(off, derivative_uniformity);

alias Arr = array<vec4<f32>, 2u>;

struct UnityPerDraw {
  /* @offset(0) */
  unity_ObjectToWorld : mat4x4<f32>,
  /* @offset(64) */
  unity_WorldToObject : mat4x4<f32>,
  /* @offset(128) */
  unity_LODFade : vec4<f32>,
  /* @offset(144) */
  unity_WorldTransformParams : vec4<f32>,
  /* @offset(160) */
  unity_RenderingLayer : vec4<f32>,
  /* @offset(176) */
  unity_LightData : vec4<f32>,
  /* @offset(192) */
  unity_LightIndices : Arr,
  /* @offset(224) */
  unity_ProbesOcclusion : vec4<f32>,
  /* @offset(240) */
  unity_SpecCube0_HDR : vec4<f32>,
  /* @offset(256) */
  unity_SpecCube1_HDR : vec4<f32>,
  /* @offset(272) */
  unity_SpecCube0_BoxMax : vec4<f32>,
  /* @offset(288) */
  unity_SpecCube0_BoxMin : vec4<f32>,
  /* @offset(304) */
  unity_SpecCube0_ProbePosition : vec4<f32>,
  /* @offset(320) */
  unity_SpecCube1_BoxMax : vec4<f32>,
  /* @offset(336) */
  unity_SpecCube1_BoxMin : vec4<f32>,
  /* @offset(352) */
  unity_SpecCube1_ProbePosition : vec4<f32>,
  /* @offset(368) */
  unity_LightmapST : vec4<f32>,
  /* @offset(384) */
  unity_DynamicLightmapST : vec4<f32>,
  /* @offset(400) */
  unity_SHAr : vec4<f32>,
  /* @offset(416) */
  unity_SHAg : vec4<f32>,
  /* @offset(432) */
  unity_SHAb : vec4<f32>,
  /* @offset(448) */
  unity_SHBr : vec4<f32>,
  /* @offset(464) */
  unity_SHBg : vec4<f32>,
  /* @offset(480) */
  unity_SHBb : vec4<f32>,
  /* @offset(496) */
  unity_SHC : vec4<f32>,
  /* @offset(512) */
  unity_RendererBounds_Min : vec4<f32>,
  /* @offset(528) */
  unity_RendererBounds_Max : vec4<f32>,
  /* @offset(544) */
  unity_MatrixPreviousM : mat4x4<f32>,
  /* @offset(608) */
  unity_MatrixPreviousMI : mat4x4<f32>,
  /* @offset(672) */
  unity_MotionVectorsParams : vec4<f32>,
  /* @offset(688) */
  unity_SpriteColor : vec4<f32>,
  /* @offset(704) */
  unity_SpriteProps : vec4<f32>,
}

struct PGlobals {
  /* @offset(0) */
  x_GlobalMipBias : vec2<f32>,
  /* @offset(8) */
  x_AlphaToMaskAvailable : f32,
  /* @offset(16) */
  x_MainLightPosition : vec4<f32>,
  /* @offset(32) */
  x_MainLightColor : vec4<f32>,
  /* @offset(48) */
  x_AdditionalLightsCount : vec4<f32>,
  /* @offset(64) */
  x_WorldSpaceCameraPos : vec3<f32>,
  /* @offset(80) */
  x_ProjectionParams : vec4<f32>,
  /* @offset(96) */
  unity_OrthoParams : vec4<f32>,
  /* @offset(112) */
  unity_FogParams : vec4<f32>,
  /* @offset(128) */
  unity_FogColor : vec4<f32>,
  /* @offset(144) */
  unity_MatrixV : mat4x4<f32>,
}

struct UnityPerMaterial {
  /* @offset(0) */
  Texture2D_B222E8F_TexelSize : vec4<f32>,
  /* @offset(16) */
  Color_C30C7CA3 : vec4<f32>,
  /* @offset(32) */
  Texture2D_D9BFD5F1_TexelSize : vec4<f32>,
}

alias Arr_1 = array<mat4x4<f32>, 5u>;

alias Arr_2 = array<vec4<f32>, 32u>;

alias Arr_3 = array<mat4x4<f32>, 32u>;

alias Arr_4 = array<vec4<f32>, 32u>;

struct LightShadows {
  /* @offset(0) */
  x_MainLightWorldToShadow : Arr_1,
  /* @offset(320) */
  x_CascadeShadowSplitSpheres0 : vec4<f32>,
  /* @offset(336) */
  x_CascadeShadowSplitSpheres1 : vec4<f32>,
  /* @offset(352) */
  x_CascadeShadowSplitSpheres2 : vec4<f32>,
  /* @offset(368) */
  x_CascadeShadowSplitSpheres3 : vec4<f32>,
  /* @offset(384) */
  x_CascadeShadowSplitSphereRadii : vec4<f32>,
  /* @offset(400) */
  x_MainLightShadowOffset0 : vec4<f32>,
  /* @offset(416) */
  x_MainLightShadowOffset1 : vec4<f32>,
  /* @offset(432) */
  x_MainLightShadowParams : vec4<f32>,
  /* @offset(448) */
  x_MainLightShadowmapSize : vec4<f32>,
  /* @offset(464) */
  x_AdditionalShadowOffset0 : vec4<f32>,
  /* @offset(480) */
  x_AdditionalShadowOffset1 : vec4<f32>,
  /* @offset(496) */
  x_AdditionalShadowFadeParams : vec4<f32>,
  /* @offset(512) */
  x_AdditionalShadowmapSize : vec4<f32>,
  /* @offset(528) */
  x_AdditionalShadowParams : Arr_4,
  /* @offset(1040) */
  x_AdditionalLightsWorldToShadow : Arr_3,
}

alias Arr_5 = array<vec4<f32>, 32u>;

alias Arr_6 = array<vec4<f32>, 32u>;

alias Arr_7 = array<vec4<f32>, 32u>;

alias Arr_8 = array<vec4<f32>, 32u>;

struct strided_arr {
  @size(16)
  el : f32,
}

alias Arr_9 = array<strided_arr, 32u>;

struct AdditionalLights {
  /* @offset(0) */
  x_AdditionalLightsPosition : Arr_4,
  /* @offset(512) */
  x_AdditionalLightsColor : Arr_4,
  /* @offset(1024) */
  x_AdditionalLightsAttenuation : Arr_4,
  /* @offset(1536) */
  x_AdditionalLightsSpotDir : Arr_4,
  /* @offset(2048) */
  x_AdditionalLightsOcclusionProbes : Arr_4,
  /* @offset(2560) */
  x_AdditionalLightsLayerMasks : Arr_9,
}

var<private> u_xlat0 : vec3<f32>;

var<private> vs_INTERP9 : vec3<f32>;

var<private> u_xlatb26 : vec2<bool>;

var<private> vs_INTERP4 : vec4<f32>;

@group(1) @binding(2) var<uniform> x_48 : UnityPerDraw;

var<private> u_xlat26 : vec3<f32>;

var<private> u_xlat1 : vec3<f32>;

var<private> u_xlat2 : vec4<f32>;

var<private> u_xlat3 : vec4<f32>;

var<private> u_xlat4 : vec4<f32>;

@group(0) @binding(3) var Texture2D_B222E8F : texture_2d<f32>;

@group(0) @binding(7) var samplerTexture2D_B222E8F : sampler;

var<private> vs_INTERP5 : vec4<f32>;

@group(1) @binding(0) var<uniform> x_128 : PGlobals;

var<private> u_xlat5 : vec3<f32>;

@group(1) @binding(4) var<uniform> x_138 : UnityPerMaterial;

var<private> u_xlat6 : vec4<f32>;

@group(0) @binding(4) var Texture2D_D9BFD5F1 : texture_2d<f32>;

@group(0) @binding(8) var samplerTexture2D_D9BFD5F1 : sampler;

var<private> u_xlat7 : vec4<f32>;

var<private> u_xlat32 : vec3<f32>;

var<private> vs_INTERP6 : vec4<f32>;

var<private> vs_INTERP8 : vec3<f32>;

@group(1) @binding(3) var<uniform> x_246 : LightShadows;

var<private> u_xlat8 : vec4<f32>;

var<private> u_xlatb2 : vec4<bool>;

var<private> u_xlatu0 : u32;

var<private> u_xlati0 : i32;

var<private> u_xlatb0 : bool;

var<private> u_xlatb79 : bool;

@group(0) @binding(1) var x_MainLightShadowmapTexture : texture_depth_2d;

@group(0) @binding(6) var sampler_LinearClampCompare : sampler_comparison;

var<private> u_xlat79 : f32;

var<private> u_xlatb80 : bool;

var<private> u_xlat55 : vec2<f32>;

var<private> u_xlat60 : vec2<f32>;

var<private> u_xlat9 : vec4<f32>;

var<private> u_xlat10 : vec4<f32>;

var<private> u_xlat11 : vec4<f32>;

var<private> u_xlat12 : vec4<f32>;

var<private> u_xlat13 : vec4<f32>;

var<private> u_xlat14 : vec4<f32>;

var<private> u_xlat80 : f32;

var<private> u_xlat29 : f32;

var<private> u_xlat33 : vec3<f32>;

var<private> u_xlat15 : vec4<f32>;

var<private> u_xlat16 : vec4<f32>;

var<private> u_xlat34 : vec2<f32>;

var<private> u_xlat66 : vec2<f32>;

var<private> u_xlat61 : vec2<f32>;

var<private> u_xlat17 : vec4<f32>;

var<private> u_xlat18 : vec4<f32>;

var<private> u_xlat19 : vec4<f32>;

var<private> u_xlat83 : f32;

var<private> u_xlatb3 : bool;

var<private> u_xlatb29 : bool;

var<private> u_xlat27 : vec3<f32>;

var<private> u_xlat81 : f32;

var<private> u_xlatb55 : bool;

var<private> u_xlat52 : f32;

var<private> u_xlat82 : f32;

var<private> u_xlatb59 : bool;

var<private> u_xlat59 : vec2<f32>;

var<private> u_xlat62 : vec2<f32>;

var<private> u_xlat85 : f32;

var<private> u_xlat35 : vec2<f32>;

var<private> u_xlat63 : vec2<f32>;

var<private> u_xlat20 : vec4<f32>;

var<private> u_xlat21 : vec4<f32>;

var<private> u_xlat87 : f32;

var<private> u_xlat28 : vec3<f32>;

var<private> u_xlat54 : f32;

@group(0) @binding(0) var unity_SpecCube0 : texture_cube<f32>;

@group(0) @binding(5) var samplerunity_SpecCube0 : sampler;

var<private> u_xlatu81 : u32;

var<private> u_xlati82 : i32;

var<private> u_xlati81 : i32;

@group(1) @binding(1) var<uniform> x_3674 : AdditionalLights;

var<private> u_xlat84 : f32;

var<private> u_xlati85 : i32;

var<private> u_xlatb86 : bool;

var<private> u_xlatb11 : vec4<bool>;

var<private> u_xlat86 : f32;

var<private> u_xlatb85 : bool;

@group(0) @binding(2) var x_AdditionalLightsShadowmapTexture : texture_depth_2d;

var<private> u_xlat64 : vec2<f32>;

var<private> u_xlat88 : f32;

var<private> u_xlat39 : vec3<f32>;

var<private> u_xlat22 : vec4<f32>;

var<private> u_xlat40 : vec2<f32>;

var<private> u_xlat72 : vec2<f32>;

var<private> u_xlat67 : vec2<f32>;

var<private> u_xlat23 : vec4<f32>;

var<private> u_xlat24 : vec4<f32>;

var<private> u_xlat25 : vec4<f32>;

var<private> u_xlatb87 : bool;

var<private> u_xlat78 : f32;

var<private> SV_Target0 : vec4<f32>;

var<private> gl_FragCoord : vec4<f32>;

var<private> u_xlatu3 : u32;

var<private> u_xlatb81 : bool;

fn main_1() {
  var txVec0 : vec3<f32>;
  var txVec1 : vec3<f32>;
  var txVec2 : vec3<f32>;
  var txVec3 : vec3<f32>;
  var txVec4 : vec3<f32>;
  var txVec5 : vec3<f32>;
  var txVec6 : vec3<f32>;
  var txVec7 : vec3<f32>;
  var txVec8 : vec3<f32>;
  var txVec9 : vec3<f32>;
  var txVec10 : vec3<f32>;
  var txVec11 : vec3<f32>;
  var txVec12 : vec3<f32>;
  var txVec13 : vec3<f32>;
  var txVec14 : vec3<f32>;
  var txVec15 : vec3<f32>;
  var txVec16 : vec3<f32>;
  var txVec17 : vec3<f32>;
  var txVec18 : vec3<f32>;
  var txVec19 : vec3<f32>;
  var txVec20 : vec3<f32>;
  var txVec21 : vec3<f32>;
  var txVec22 : vec3<f32>;
  var txVec23 : vec3<f32>;
  var txVec24 : vec3<f32>;
  var txVec25 : vec3<f32>;
  var txVec26 : vec3<f32>;
  var txVec27 : vec3<f32>;
  var txVec28 : vec3<f32>;
  var txVec29 : vec3<f32>;
  var x_1750 : f32;
  var x_1870 : vec3<f32>;
  var txVec30 : vec3<f32>;
  var txVec31 : vec3<f32>;
  var txVec32 : vec3<f32>;
  var txVec33 : vec3<f32>;
  var txVec34 : vec3<f32>;
  var txVec35 : vec3<f32>;
  var txVec36 : vec3<f32>;
  var txVec37 : vec3<f32>;
  var txVec38 : vec3<f32>;
  var txVec39 : vec3<f32>;
  var txVec40 : vec3<f32>;
  var txVec41 : vec3<f32>;
  var txVec42 : vec3<f32>;
  var txVec43 : vec3<f32>;
  var txVec44 : vec3<f32>;
  var txVec45 : vec3<f32>;
  var txVec46 : vec3<f32>;
  var txVec47 : vec3<f32>;
  var txVec48 : vec3<f32>;
  var txVec49 : vec3<f32>;
  var txVec50 : vec3<f32>;
  var txVec51 : vec3<f32>;
  var txVec52 : vec3<f32>;
  var txVec53 : vec3<f32>;
  var txVec54 : vec3<f32>;
  var txVec55 : vec3<f32>;
  var txVec56 : vec3<f32>;
  var txVec57 : vec3<f32>;
  var txVec58 : vec3<f32>;
  var txVec59 : vec3<f32>;
  var x_3258 : f32;
  var u_xlatu_loop_1 : u32;
  var indexable : array<vec4<u32>, 4u>;
  var x_3809 : f32;
  var x_3819 : f32;
  var txVec60 : vec3<f32>;
  var txVec61 : vec3<f32>;
  var txVec62 : vec3<f32>;
  var txVec63 : vec3<f32>;
  var txVec64 : vec3<f32>;
  var txVec65 : vec3<f32>;
  var txVec66 : vec3<f32>;
  var txVec67 : vec3<f32>;
  var txVec68 : vec3<f32>;
  var txVec69 : vec3<f32>;
  var txVec70 : vec3<f32>;
  var txVec71 : vec3<f32>;
  var txVec72 : vec3<f32>;
  var txVec73 : vec3<f32>;
  var txVec74 : vec3<f32>;
  var txVec75 : vec3<f32>;
  var txVec76 : vec3<f32>;
  var txVec77 : vec3<f32>;
  var txVec78 : vec3<f32>;
  var txVec79 : vec3<f32>;
  var txVec80 : vec3<f32>;
  var txVec81 : vec3<f32>;
  var txVec82 : vec3<f32>;
  var txVec83 : vec3<f32>;
  var txVec84 : vec3<f32>;
  var txVec85 : vec3<f32>;
  var txVec86 : vec3<f32>;
  var txVec87 : vec3<f32>;
  var txVec88 : vec3<f32>;
  var txVec89 : vec3<f32>;
  var u_xlat_precise_vec4 : vec4<f32>;
  var u_xlat_precise_ivec4 : vec4<i32>;
  var u_xlat_precise_bvec4 : vec4<bool>;
  var u_xlat_precise_uvec4 : vec4<u32>;
  let x_12 : vec3<f32> = vs_INTERP9;
  let x_13 : vec3<f32> = vs_INTERP9;
  u_xlat0.x = dot(x_12, x_13);
  let x_20 : f32 = u_xlat0.x;
  u_xlat0.x = sqrt(x_20);
  let x_25 : f32 = u_xlat0.x;
  u_xlat0.x = (1.0f / x_25);
  let x_39 : f32 = vs_INTERP4.w;
  u_xlatb26.x = (0.0f < x_39);
  let x_53 : f32 = x_48.unity_WorldTransformParams.w;
  u_xlatb26.y = (x_53 >= 0.0f);
  let x_59 : bool = u_xlatb26.x;
  u_xlat26.x = select(-1.0f, 1.0f, x_59);
  let x_64 : bool = u_xlatb26.y;
  u_xlat26.y = select(-1.0f, 1.0f, x_64);
  let x_68 : f32 = u_xlat26.y;
  let x_70 : f32 = u_xlat26.x;
  u_xlat26.x = (x_68 * x_70);
  let x_74 : vec4<f32> = vs_INTERP4;
  let x_76 : vec3<f32> = vs_INTERP9;
  u_xlat1 = (vec3<f32>(x_74.y, x_74.z, x_74.x) * vec3<f32>(x_76.z, x_76.x, x_76.y));
  let x_79 : vec3<f32> = vs_INTERP9;
  let x_81 : vec4<f32> = vs_INTERP4;
  let x_84 : vec3<f32> = u_xlat1;
  u_xlat1 = ((vec3<f32>(x_79.y, x_79.z, x_79.x) * vec3<f32>(x_81.z, x_81.x, x_81.y)) + -(x_84));
  let x_87 : vec3<f32> = u_xlat26;
  let x_89 : vec3<f32> = u_xlat1;
  u_xlat26 = (vec3<f32>(x_87.x, x_87.x, x_87.x) * x_89);
  let x_91 : vec3<f32> = u_xlat0;
  let x_93 : vec3<f32> = vs_INTERP9;
  u_xlat1 = (vec3<f32>(x_91.x, x_91.x, x_91.x) * x_93);
  let x_97 : vec3<f32> = u_xlat0;
  let x_99 : vec4<f32> = vs_INTERP4;
  let x_101 : vec3<f32> = (vec3<f32>(x_97.x, x_97.x, x_97.x) * vec3<f32>(x_99.x, x_99.y, x_99.z));
  let x_102 : vec4<f32> = u_xlat2;
  u_xlat2 = vec4<f32>(x_101.x, x_101.y, x_101.z, x_102.w);
  let x_105 : vec3<f32> = u_xlat26;
  let x_106 : vec3<f32> = u_xlat0;
  let x_108 : vec3<f32> = (x_105 * vec3<f32>(x_106.x, x_106.x, x_106.x));
  let x_109 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_108.x, x_108.y, x_108.z, x_109.w);
  let x_124 : vec4<f32> = vs_INTERP5;
  let x_131 : f32 = x_128.x_GlobalMipBias.x;
  let x_132 : vec4<f32> = textureSampleBias(Texture2D_B222E8F, samplerTexture2D_B222E8F, vec2<f32>(x_124.x, x_124.y), x_131);
  u_xlat4 = x_132;
  let x_134 : vec4<f32> = u_xlat4;
  let x_142 : vec4<f32> = x_138.Color_C30C7CA3;
  u_xlat5 = (vec3<f32>(x_134.x, x_134.y, x_134.z) * vec3<f32>(x_142.x, x_142.y, x_142.z));
  let x_151 : vec4<f32> = vs_INTERP5;
  let x_154 : f32 = x_128.x_GlobalMipBias.x;
  let x_155 : vec4<f32> = textureSampleBias(Texture2D_D9BFD5F1, samplerTexture2D_D9BFD5F1, vec2<f32>(x_151.x, x_151.y), x_154);
  u_xlat6 = vec4<f32>(x_155.w, x_155.x, x_155.y, x_155.z);
  let x_158 : vec4<f32> = u_xlat6;
  u_xlat7 = ((vec4<f32>(x_158.y, x_158.z, x_158.w, x_158.x) * vec4<f32>(2.0f, 2.0f, 2.0f, 2.0f)) + vec4<f32>(-1.0f, -1.0f, -1.0f, -1.0f));
  let x_165 : vec4<f32> = u_xlat7;
  let x_166 : vec4<f32> = u_xlat7;
  u_xlat0.x = dot(x_165, x_166);
  let x_170 : f32 = u_xlat0.x;
  u_xlat0.x = inverseSqrt(x_170);
  let x_174 : vec3<f32> = u_xlat0;
  let x_176 : vec4<f32> = u_xlat7;
  u_xlat32 = (vec3<f32>(x_174.x, x_174.x, x_174.x) * vec3<f32>(x_176.x, x_176.y, x_176.z));
  let x_181 : f32 = vs_INTERP6.y;
  u_xlat0.x = (x_181 * 200.0f);
  let x_186 : f32 = u_xlat0.x;
  u_xlat0.x = min(x_186, 1.0f);
  let x_189 : vec3<f32> = u_xlat0;
  let x_191 : vec4<f32> = u_xlat4;
  let x_193 : vec3<f32> = (vec3<f32>(x_189.x, x_189.x, x_189.x) * vec3<f32>(x_191.x, x_191.y, x_191.z));
  let x_194 : vec4<f32> = u_xlat4;
  u_xlat4 = vec4<f32>(x_193.x, x_193.y, x_193.z, x_194.w);
  let x_196 : vec4<f32> = u_xlat3;
  let x_198 : vec3<f32> = u_xlat32;
  let x_200 : vec3<f32> = (vec3<f32>(x_196.x, x_196.y, x_196.z) * vec3<f32>(x_198.y, x_198.y, x_198.y));
  let x_201 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_200.x, x_200.y, x_200.z, x_201.w);
  let x_203 : vec3<f32> = u_xlat32;
  let x_205 : vec4<f32> = u_xlat2;
  let x_208 : vec4<f32> = u_xlat3;
  let x_210 : vec3<f32> = ((vec3<f32>(x_203.x, x_203.x, x_203.x) * vec3<f32>(x_205.x, x_205.y, x_205.z)) + vec3<f32>(x_208.x, x_208.y, x_208.z));
  let x_211 : vec4<f32> = u_xlat2;
  u_xlat2 = vec4<f32>(x_210.x, x_210.y, x_210.z, x_211.w);
  let x_213 : vec3<f32> = u_xlat32;
  let x_215 : vec3<f32> = u_xlat1;
  let x_217 : vec4<f32> = u_xlat2;
  u_xlat1 = ((vec3<f32>(x_213.z, x_213.z, x_213.z) * x_215) + vec3<f32>(x_217.x, x_217.y, x_217.z));
  let x_220 : vec3<f32> = u_xlat1;
  let x_221 : vec3<f32> = u_xlat1;
  u_xlat0.x = dot(x_220, x_221);
  let x_225 : f32 = u_xlat0.x;
  u_xlat0.x = max(x_225, 1.17549435e-38f);
  let x_230 : f32 = u_xlat0.x;
  u_xlat0.x = inverseSqrt(x_230);
  let x_233 : vec3<f32> = u_xlat0;
  let x_235 : vec3<f32> = u_xlat1;
  u_xlat1 = (vec3<f32>(x_233.x, x_233.x, x_233.x) * x_235);
  let x_238 : vec3<f32> = vs_INTERP8;
  let x_248 : vec4<f32> = x_246.x_CascadeShadowSplitSpheres0;
  let x_251 : vec3<f32> = (x_238 + -(vec3<f32>(x_248.x, x_248.y, x_248.z)));
  let x_252 : vec4<f32> = u_xlat2;
  u_xlat2 = vec4<f32>(x_251.x, x_251.y, x_251.z, x_252.w);
  let x_254 : vec3<f32> = vs_INTERP8;
  let x_257 : vec4<f32> = x_246.x_CascadeShadowSplitSpheres1;
  let x_260 : vec3<f32> = (x_254 + -(vec3<f32>(x_257.x, x_257.y, x_257.z)));
  let x_261 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_260.x, x_260.y, x_260.z, x_261.w);
  let x_263 : vec3<f32> = vs_INTERP8;
  let x_265 : vec4<f32> = x_246.x_CascadeShadowSplitSpheres2;
  let x_268 : vec3<f32> = (x_263 + -(vec3<f32>(x_265.x, x_265.y, x_265.z)));
  let x_269 : vec4<f32> = u_xlat7;
  u_xlat7 = vec4<f32>(x_268.x, x_268.y, x_268.z, x_269.w);
  let x_272 : vec3<f32> = vs_INTERP8;
  let x_275 : vec4<f32> = x_246.x_CascadeShadowSplitSpheres3;
  let x_278 : vec3<f32> = (x_272 + -(vec3<f32>(x_275.x, x_275.y, x_275.z)));
  let x_279 : vec4<f32> = u_xlat8;
  u_xlat8 = vec4<f32>(x_278.x, x_278.y, x_278.z, x_279.w);
  let x_281 : vec4<f32> = u_xlat2;
  let x_283 : vec4<f32> = u_xlat2;
  u_xlat2.x = dot(vec3<f32>(x_281.x, x_281.y, x_281.z), vec3<f32>(x_283.x, x_283.y, x_283.z));
  let x_287 : vec4<f32> = u_xlat3;
  let x_289 : vec4<f32> = u_xlat3;
  u_xlat2.y = dot(vec3<f32>(x_287.x, x_287.y, x_287.z), vec3<f32>(x_289.x, x_289.y, x_289.z));
  let x_293 : vec4<f32> = u_xlat7;
  let x_295 : vec4<f32> = u_xlat7;
  u_xlat2.z = dot(vec3<f32>(x_293.x, x_293.y, x_293.z), vec3<f32>(x_295.x, x_295.y, x_295.z));
  let x_299 : vec4<f32> = u_xlat8;
  let x_301 : vec4<f32> = u_xlat8;
  u_xlat2.w = dot(vec3<f32>(x_299.x, x_299.y, x_299.z), vec3<f32>(x_301.x, x_301.y, x_301.z));
  let x_308 : vec4<f32> = u_xlat2;
  let x_311 : vec4<f32> = x_246.x_CascadeShadowSplitSphereRadii;
  u_xlatb2 = (x_308 < x_311);
  let x_314 : bool = u_xlatb2.x;
  u_xlat3.x = select(0.0f, 1.0f, x_314);
  let x_318 : bool = u_xlatb2.y;
  u_xlat3.y = select(0.0f, 1.0f, x_318);
  let x_322 : bool = u_xlatb2.z;
  u_xlat3.z = select(0.0f, 1.0f, x_322);
  let x_326 : bool = u_xlatb2.w;
  u_xlat3.w = select(0.0f, 1.0f, x_326);
  let x_330 : bool = u_xlatb2.x;
  u_xlat2.x = select(-0.0f, -1.0f, x_330);
  let x_335 : bool = u_xlatb2.y;
  u_xlat2.y = select(-0.0f, -1.0f, x_335);
  let x_339 : bool = u_xlatb2.z;
  u_xlat2.z = select(-0.0f, -1.0f, x_339);
  let x_342 : vec4<f32> = u_xlat2;
  let x_344 : vec4<f32> = u_xlat3;
  let x_346 : vec3<f32> = (vec3<f32>(x_342.x, x_342.y, x_342.z) + vec3<f32>(x_344.y, x_344.z, x_344.w));
  let x_347 : vec4<f32> = u_xlat2;
  u_xlat2 = vec4<f32>(x_346.x, x_346.y, x_346.z, x_347.w);
  let x_349 : vec4<f32> = u_xlat2;
  let x_352 : vec3<f32> = max(vec3<f32>(x_349.x, x_349.y, x_349.z), vec3<f32>(0.0f, 0.0f, 0.0f));
  let x_353 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_353.x, x_352.x, x_352.y, x_352.z);
  let x_355 : vec4<f32> = u_xlat3;
  u_xlat0.x = dot(x_355, vec4<f32>(4.0f, 3.0f, 2.0f, 1.0f));
  let x_362 : f32 = u_xlat0.x;
  u_xlat0.x = (-(x_362) + 4.0f);
  let x_369 : f32 = u_xlat0.x;
  u_xlatu0 = u32(x_369);
  let x_373 : u32 = u_xlatu0;
  u_xlati0 = (bitcast<i32>(x_373) << bitcast<u32>(2i));
  let x_376 : vec3<f32> = vs_INTERP8;
  let x_378 : i32 = u_xlati0;
  let x_381 : i32 = u_xlati0;
  let x_385 : vec4<f32> = x_246.x_MainLightWorldToShadow[((x_378 + 1i) / 4i)][((x_381 + 1i) % 4i)];
  let x_387 : vec3<f32> = (vec3<f32>(x_376.y, x_376.y, x_376.y) * vec3<f32>(x_385.x, x_385.y, x_385.z));
  let x_388 : vec4<f32> = u_xlat2;
  u_xlat2 = vec4<f32>(x_387.x, x_387.y, x_387.z, x_388.w);
  let x_390 : i32 = u_xlati0;
  let x_392 : i32 = u_xlati0;
  let x_395 : vec4<f32> = x_246.x_MainLightWorldToShadow[(x_390 / 4i)][(x_392 % 4i)];
  let x_397 : vec3<f32> = vs_INTERP8;
  let x_400 : vec4<f32> = u_xlat2;
  let x_402 : vec3<f32> = ((vec3<f32>(x_395.x, x_395.y, x_395.z) * vec3<f32>(x_397.x, x_397.x, x_397.x)) + vec3<f32>(x_400.x, x_400.y, x_400.z));
  let x_403 : vec4<f32> = u_xlat2;
  u_xlat2 = vec4<f32>(x_402.x, x_402.y, x_402.z, x_403.w);
  let x_405 : i32 = u_xlati0;
  let x_408 : i32 = u_xlati0;
  let x_412 : vec4<f32> = x_246.x_MainLightWorldToShadow[((x_405 + 2i) / 4i)][((x_408 + 2i) % 4i)];
  let x_414 : vec3<f32> = vs_INTERP8;
  let x_417 : vec4<f32> = u_xlat2;
  let x_419 : vec3<f32> = ((vec3<f32>(x_412.x, x_412.y, x_412.z) * vec3<f32>(x_414.z, x_414.z, x_414.z)) + vec3<f32>(x_417.x, x_417.y, x_417.z));
  let x_420 : vec4<f32> = u_xlat2;
  u_xlat2 = vec4<f32>(x_419.x, x_419.y, x_419.z, x_420.w);
  let x_422 : vec4<f32> = u_xlat2;
  let x_424 : i32 = u_xlati0;
  let x_427 : i32 = u_xlati0;
  let x_431 : vec4<f32> = x_246.x_MainLightWorldToShadow[((x_424 + 3i) / 4i)][((x_427 + 3i) % 4i)];
  let x_433 : vec3<f32> = (vec3<f32>(x_422.x, x_422.y, x_422.z) + vec3<f32>(x_431.x, x_431.y, x_431.z));
  let x_434 : vec4<f32> = u_xlat2;
  u_xlat2 = vec4<f32>(x_433.x, x_433.y, x_433.z, x_434.w);
  let x_439 : f32 = x_246.x_MainLightShadowParams.y;
  u_xlatb0 = (0.0f < x_439);
  let x_441 : bool = u_xlatb0;
  if (x_441) {
    let x_446 : f32 = x_246.x_MainLightShadowParams.y;
    u_xlatb79 = (x_446 == 1.0f);
    let x_448 : bool = u_xlatb79;
    if (x_448) {
      let x_451 : vec4<f32> = u_xlat2;
      let x_455 : vec4<f32> = x_246.x_MainLightShadowOffset0;
      u_xlat3 = (vec4<f32>(x_451.x, x_451.y, x_451.x, x_451.y) + x_455);
      let x_459 : vec4<f32> = u_xlat3;
      let x_460 : vec2<f32> = vec2<f32>(x_459.x, x_459.y);
      let x_462 : f32 = u_xlat2.z;
      txVec0 = vec3<f32>(x_460.x, x_460.y, x_462);
      let x_474 : vec3<f32> = txVec0;
      let x_476 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_LinearClampCompare, x_474.xy, x_474.z);
      u_xlat7.x = x_476;
      let x_479 : vec4<f32> = u_xlat3;
      let x_480 : vec2<f32> = vec2<f32>(x_479.z, x_479.w);
      let x_482 : f32 = u_xlat2.z;
      txVec1 = vec3<f32>(x_480.x, x_480.y, x_482);
      let x_489 : vec3<f32> = txVec1;
      let x_491 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_LinearClampCompare, x_489.xy, x_489.z);
      u_xlat7.y = x_491;
      let x_493 : vec4<f32> = u_xlat2;
      let x_497 : vec4<f32> = x_246.x_MainLightShadowOffset1;
      u_xlat3 = (vec4<f32>(x_493.x, x_493.y, x_493.x, x_493.y) + x_497);
      let x_500 : vec4<f32> = u_xlat3;
      let x_501 : vec2<f32> = vec2<f32>(x_500.x, x_500.y);
      let x_503 : f32 = u_xlat2.z;
      txVec2 = vec3<f32>(x_501.x, x_501.y, x_503);
      let x_510 : vec3<f32> = txVec2;
      let x_512 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_LinearClampCompare, x_510.xy, x_510.z);
      u_xlat7.z = x_512;
      let x_515 : vec4<f32> = u_xlat3;
      let x_516 : vec2<f32> = vec2<f32>(x_515.z, x_515.w);
      let x_518 : f32 = u_xlat2.z;
      txVec3 = vec3<f32>(x_516.x, x_516.y, x_518);
      let x_525 : vec3<f32> = txVec3;
      let x_527 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_LinearClampCompare, x_525.xy, x_525.z);
      u_xlat7.w = x_527;
      let x_530 : vec4<f32> = u_xlat7;
      u_xlat79 = dot(x_530, vec4<f32>(0.25f, 0.25f, 0.25f, 0.25f));
    } else {
      let x_537 : f32 = x_246.x_MainLightShadowParams.y;
      u_xlatb80 = (x_537 == 2.0f);
      let x_539 : bool = u_xlatb80;
      if (x_539) {
        let x_542 : vec4<f32> = u_xlat2;
        let x_546 : vec4<f32> = x_246.x_MainLightShadowmapSize;
        let x_551 : vec2<f32> = ((vec2<f32>(x_542.x, x_542.y) * vec2<f32>(x_546.z, x_546.w)) + vec2<f32>(0.5f, 0.5f));
        let x_552 : vec4<f32> = u_xlat3;
        u_xlat3 = vec4<f32>(x_551.x, x_551.y, x_552.z, x_552.w);
        let x_554 : vec4<f32> = u_xlat3;
        let x_556 : vec2<f32> = floor(vec2<f32>(x_554.x, x_554.y));
        let x_557 : vec4<f32> = u_xlat3;
        u_xlat3 = vec4<f32>(x_556.x, x_556.y, x_557.z, x_557.w);
        let x_561 : vec4<f32> = u_xlat2;
        let x_564 : vec4<f32> = x_246.x_MainLightShadowmapSize;
        let x_567 : vec4<f32> = u_xlat3;
        u_xlat55 = ((vec2<f32>(x_561.x, x_561.y) * vec2<f32>(x_564.z, x_564.w)) + -(vec2<f32>(x_567.x, x_567.y)));
        let x_571 : vec2<f32> = u_xlat55;
        u_xlat7 = (vec4<f32>(x_571.x, x_571.x, x_571.y, x_571.y) + vec4<f32>(0.5f, 1.0f, 0.5f, 1.0f));
        let x_575 : vec4<f32> = u_xlat7;
        let x_577 : vec4<f32> = u_xlat7;
        u_xlat8 = (vec4<f32>(x_575.x, x_575.x, x_575.z, x_575.z) * vec4<f32>(x_577.x, x_577.x, x_577.z, x_577.z));
        let x_580 : vec4<f32> = u_xlat8;
        let x_584 : vec2<f32> = (vec2<f32>(x_580.y, x_580.w) * vec2<f32>(0.07999999821186065674f, 0.07999999821186065674f));
        let x_585 : vec4<f32> = u_xlat7;
        u_xlat7 = vec4<f32>(x_584.x, x_585.y, x_584.y, x_585.w);
        let x_587 : vec4<f32> = u_xlat8;
        let x_590 : vec2<f32> = u_xlat55;
        let x_592 : vec2<f32> = ((vec2<f32>(x_587.x, x_587.z) * vec2<f32>(0.5f, 0.5f)) + -(x_590));
        let x_593 : vec4<f32> = u_xlat8;
        u_xlat8 = vec4<f32>(x_592.x, x_592.y, x_593.z, x_593.w);
        let x_596 : vec2<f32> = u_xlat55;
        u_xlat60 = (-(x_596) + vec2<f32>(1.0f, 1.0f));
        let x_601 : vec2<f32> = u_xlat55;
        let x_603 : vec2<f32> = min(x_601, vec2<f32>(0.0f, 0.0f));
        let x_604 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_603.x, x_603.y, x_604.z, x_604.w);
        let x_606 : vec4<f32> = u_xlat9;
        let x_609 : vec4<f32> = u_xlat9;
        let x_612 : vec2<f32> = u_xlat60;
        let x_613 : vec2<f32> = ((-(vec2<f32>(x_606.x, x_606.y)) * vec2<f32>(x_609.x, x_609.y)) + x_612);
        let x_614 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_613.x, x_613.y, x_614.z, x_614.w);
        let x_616 : vec2<f32> = u_xlat55;
        u_xlat55 = max(x_616, vec2<f32>(0.0f, 0.0f));
        let x_618 : vec2<f32> = u_xlat55;
        let x_620 : vec2<f32> = u_xlat55;
        let x_622 : vec4<f32> = u_xlat7;
        u_xlat55 = ((-(x_618) * x_620) + vec2<f32>(x_622.y, x_622.w));
        let x_625 : vec4<f32> = u_xlat9;
        let x_627 : vec2<f32> = (vec2<f32>(x_625.x, x_625.y) + vec2<f32>(1.0f, 1.0f));
        let x_628 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_627.x, x_627.y, x_628.z, x_628.w);
        let x_630 : vec2<f32> = u_xlat55;
        u_xlat55 = (x_630 + vec2<f32>(1.0f, 1.0f));
        let x_633 : vec4<f32> = u_xlat8;
        let x_637 : vec2<f32> = (vec2<f32>(x_633.x, x_633.y) * vec2<f32>(0.15999999642372131348f, 0.15999999642372131348f));
        let x_638 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_637.x, x_637.y, x_638.z, x_638.w);
        let x_640 : vec2<f32> = u_xlat60;
        let x_641 : vec2<f32> = (x_640 * vec2<f32>(0.15999999642372131348f, 0.15999999642372131348f));
        let x_642 : vec4<f32> = u_xlat8;
        u_xlat8 = vec4<f32>(x_641.x, x_641.y, x_642.z, x_642.w);
        let x_644 : vec4<f32> = u_xlat9;
        let x_646 : vec2<f32> = (vec2<f32>(x_644.x, x_644.y) * vec2<f32>(0.15999999642372131348f, 0.15999999642372131348f));
        let x_647 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_646.x, x_646.y, x_647.z, x_647.w);
        let x_650 : vec2<f32> = u_xlat55;
        let x_651 : vec2<f32> = (x_650 * vec2<f32>(0.15999999642372131348f, 0.15999999642372131348f));
        let x_652 : vec4<f32> = u_xlat11;
        u_xlat11 = vec4<f32>(x_651.x, x_651.y, x_652.z, x_652.w);
        let x_654 : vec4<f32> = u_xlat7;
        u_xlat55 = (vec2<f32>(x_654.y, x_654.w) * vec2<f32>(0.15999999642372131348f, 0.15999999642372131348f));
        let x_658 : f32 = u_xlat9.x;
        u_xlat10.z = x_658;
        let x_661 : f32 = u_xlat55.x;
        u_xlat10.w = x_661;
        let x_664 : f32 = u_xlat11.x;
        u_xlat8.z = x_664;
        let x_667 : f32 = u_xlat7.x;
        u_xlat8.w = x_667;
        let x_670 : vec4<f32> = u_xlat8;
        let x_672 : vec4<f32> = u_xlat10;
        u_xlat12 = (vec4<f32>(x_670.z, x_670.w, x_670.x, x_670.z) + vec4<f32>(x_672.z, x_672.w, x_672.x, x_672.z));
        let x_676 : f32 = u_xlat10.y;
        u_xlat9.z = x_676;
        let x_679 : f32 = u_xlat55.y;
        u_xlat9.w = x_679;
        let x_682 : f32 = u_xlat8.y;
        u_xlat11.z = x_682;
        let x_685 : f32 = u_xlat7.z;
        u_xlat11.w = x_685;
        let x_687 : vec4<f32> = u_xlat9;
        let x_689 : vec4<f32> = u_xlat11;
        let x_691 : vec3<f32> = (vec3<f32>(x_687.z, x_687.y, x_687.w) + vec3<f32>(x_689.z, x_689.y, x_689.w));
        let x_692 : vec4<f32> = u_xlat7;
        u_xlat7 = vec4<f32>(x_691.x, x_691.y, x_691.z, x_692.w);
        let x_694 : vec4<f32> = u_xlat8;
        let x_696 : vec4<f32> = u_xlat12;
        let x_698 : vec3<f32> = (vec3<f32>(x_694.x, x_694.z, x_694.w) / vec3<f32>(x_696.z, x_696.w, x_696.y));
        let x_699 : vec4<f32> = u_xlat8;
        u_xlat8 = vec4<f32>(x_698.x, x_698.y, x_698.z, x_699.w);
        let x_701 : vec4<f32> = u_xlat8;
        let x_707 : vec3<f32> = (vec3<f32>(x_701.x, x_701.y, x_701.z) + vec3<f32>(-2.5f, -0.5f, 1.5f));
        let x_708 : vec4<f32> = u_xlat8;
        u_xlat8 = vec4<f32>(x_707.x, x_707.y, x_707.z, x_708.w);
        let x_710 : vec4<f32> = u_xlat11;
        let x_712 : vec4<f32> = u_xlat7;
        let x_714 : vec3<f32> = (vec3<f32>(x_710.z, x_710.y, x_710.w) / vec3<f32>(x_712.x, x_712.y, x_712.z));
        let x_715 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_714.x, x_714.y, x_714.z, x_715.w);
        let x_717 : vec4<f32> = u_xlat9;
        let x_719 : vec3<f32> = (vec3<f32>(x_717.x, x_717.y, x_717.z) + vec3<f32>(-2.5f, -0.5f, 1.5f));
        let x_720 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_719.x, x_719.y, x_719.z, x_720.w);
        let x_722 : vec4<f32> = u_xlat8;
        let x_725 : vec4<f32> = x_246.x_MainLightShadowmapSize;
        let x_727 : vec3<f32> = (vec3<f32>(x_722.y, x_722.x, x_722.z) * vec3<f32>(x_725.x, x_725.x, x_725.x));
        let x_728 : vec4<f32> = u_xlat8;
        u_xlat8 = vec4<f32>(x_727.x, x_727.y, x_727.z, x_728.w);
        let x_730 : vec4<f32> = u_xlat9;
        let x_733 : vec4<f32> = x_246.x_MainLightShadowmapSize;
        let x_735 : vec3<f32> = (vec3<f32>(x_730.x, x_730.y, x_730.z) * vec3<f32>(x_733.y, x_733.y, x_733.y));
        let x_736 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_735.x, x_735.y, x_735.z, x_736.w);
        let x_739 : f32 = u_xlat9.x;
        u_xlat8.w = x_739;
        let x_741 : vec4<f32> = u_xlat3;
        let x_744 : vec4<f32> = x_246.x_MainLightShadowmapSize;
        let x_747 : vec4<f32> = u_xlat8;
        u_xlat10 = ((vec4<f32>(x_741.x, x_741.y, x_741.x, x_741.y) * vec4<f32>(x_744.x, x_744.y, x_744.x, x_744.y)) + vec4<f32>(x_747.y, x_747.w, x_747.x, x_747.w));
        let x_750 : vec4<f32> = u_xlat3;
        let x_753 : vec4<f32> = x_246.x_MainLightShadowmapSize;
        let x_756 : vec4<f32> = u_xlat8;
        u_xlat55 = ((vec2<f32>(x_750.x, x_750.y) * vec2<f32>(x_753.x, x_753.y)) + vec2<f32>(x_756.z, x_756.w));
        let x_760 : f32 = u_xlat8.y;
        u_xlat9.w = x_760;
        let x_762 : vec4<f32> = u_xlat9;
        let x_763 : vec2<f32> = vec2<f32>(x_762.y, x_762.z);
        let x_764 : vec4<f32> = u_xlat8;
        u_xlat8 = vec4<f32>(x_764.x, x_763.x, x_764.z, x_763.y);
        let x_766 : vec4<f32> = u_xlat3;
        let x_769 : vec4<f32> = x_246.x_MainLightShadowmapSize;
        let x_772 : vec4<f32> = u_xlat8;
        u_xlat11 = ((vec4<f32>(x_766.x, x_766.y, x_766.x, x_766.y) * vec4<f32>(x_769.x, x_769.y, x_769.x, x_769.y)) + vec4<f32>(x_772.x, x_772.y, x_772.z, x_772.y));
        let x_775 : vec4<f32> = u_xlat3;
        let x_778 : vec4<f32> = x_246.x_MainLightShadowmapSize;
        let x_781 : vec4<f32> = u_xlat9;
        u_xlat9 = ((vec4<f32>(x_775.x, x_775.y, x_775.x, x_775.y) * vec4<f32>(x_778.x, x_778.y, x_778.x, x_778.y)) + vec4<f32>(x_781.w, x_781.y, x_781.w, x_781.z));
        let x_784 : vec4<f32> = u_xlat3;
        let x_787 : vec4<f32> = x_246.x_MainLightShadowmapSize;
        let x_790 : vec4<f32> = u_xlat8;
        u_xlat8 = ((vec4<f32>(x_784.x, x_784.y, x_784.x, x_784.y) * vec4<f32>(x_787.x, x_787.y, x_787.x, x_787.y)) + vec4<f32>(x_790.x, x_790.w, x_790.z, x_790.w));
        let x_794 : vec4<f32> = u_xlat7;
        let x_796 : vec4<f32> = u_xlat12;
        u_xlat13 = (vec4<f32>(x_794.x, x_794.x, x_794.x, x_794.y) * vec4<f32>(x_796.z, x_796.w, x_796.y, x_796.z));
        let x_800 : vec4<f32> = u_xlat7;
        let x_802 : vec4<f32> = u_xlat12;
        u_xlat14 = (vec4<f32>(x_800.y, x_800.y, x_800.z, x_800.z) * x_802);
        let x_806 : f32 = u_xlat7.z;
        let x_808 : f32 = u_xlat12.y;
        u_xlat80 = (x_806 * x_808);
        let x_811 : vec4<f32> = u_xlat10;
        let x_812 : vec2<f32> = vec2<f32>(x_811.x, x_811.y);
        let x_814 : f32 = u_xlat2.z;
        txVec4 = vec3<f32>(x_812.x, x_812.y, x_814);
        let x_821 : vec3<f32> = txVec4;
        let x_823 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_LinearClampCompare, x_821.xy, x_821.z);
        u_xlat3.x = x_823;
        let x_826 : vec4<f32> = u_xlat10;
        let x_827 : vec2<f32> = vec2<f32>(x_826.z, x_826.w);
        let x_829 : f32 = u_xlat2.z;
        txVec5 = vec3<f32>(x_827.x, x_827.y, x_829);
        let x_837 : vec3<f32> = txVec5;
        let x_839 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_LinearClampCompare, x_837.xy, x_837.z);
        u_xlat29 = x_839;
        let x_840 : f32 = u_xlat29;
        let x_842 : f32 = u_xlat13.y;
        u_xlat29 = (x_840 * x_842);
        let x_845 : f32 = u_xlat13.x;
        let x_847 : f32 = u_xlat3.x;
        let x_849 : f32 = u_xlat29;
        u_xlat3.x = ((x_845 * x_847) + x_849);
        let x_853 : vec2<f32> = u_xlat55;
        let x_855 : f32 = u_xlat2.z;
        txVec6 = vec3<f32>(x_853.x, x_853.y, x_855);
        let x_862 : vec3<f32> = txVec6;
        let x_864 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_LinearClampCompare, x_862.xy, x_862.z);
        u_xlat29 = x_864;
        let x_866 : f32 = u_xlat13.z;
        let x_867 : f32 = u_xlat29;
        let x_870 : f32 = u_xlat3.x;
        u_xlat3.x = ((x_866 * x_867) + x_870);
        let x_874 : vec4<f32> = u_xlat9;
        let x_875 : vec2<f32> = vec2<f32>(x_874.x, x_874.y);
        let x_877 : f32 = u_xlat2.z;
        txVec7 = vec3<f32>(x_875.x, x_875.y, x_877);
        let x_884 : vec3<f32> = txVec7;
        let x_886 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_LinearClampCompare, x_884.xy, x_884.z);
        u_xlat29 = x_886;
        let x_888 : f32 = u_xlat13.w;
        let x_889 : f32 = u_xlat29;
        let x_892 : f32 = u_xlat3.x;
        u_xlat3.x = ((x_888 * x_889) + x_892);
        let x_896 : vec4<f32> = u_xlat11;
        let x_897 : vec2<f32> = vec2<f32>(x_896.x, x_896.y);
        let x_899 : f32 = u_xlat2.z;
        txVec8 = vec3<f32>(x_897.x, x_897.y, x_899);
        let x_906 : vec3<f32> = txVec8;
        let x_908 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_LinearClampCompare, x_906.xy, x_906.z);
        u_xlat29 = x_908;
        let x_910 : f32 = u_xlat14.x;
        let x_911 : f32 = u_xlat29;
        let x_914 : f32 = u_xlat3.x;
        u_xlat3.x = ((x_910 * x_911) + x_914);
        let x_918 : vec4<f32> = u_xlat11;
        let x_919 : vec2<f32> = vec2<f32>(x_918.z, x_918.w);
        let x_921 : f32 = u_xlat2.z;
        txVec9 = vec3<f32>(x_919.x, x_919.y, x_921);
        let x_928 : vec3<f32> = txVec9;
        let x_930 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_LinearClampCompare, x_928.xy, x_928.z);
        u_xlat29 = x_930;
        let x_932 : f32 = u_xlat14.y;
        let x_933 : f32 = u_xlat29;
        let x_936 : f32 = u_xlat3.x;
        u_xlat3.x = ((x_932 * x_933) + x_936);
        let x_940 : vec4<f32> = u_xlat9;
        let x_941 : vec2<f32> = vec2<f32>(x_940.z, x_940.w);
        let x_943 : f32 = u_xlat2.z;
        txVec10 = vec3<f32>(x_941.x, x_941.y, x_943);
        let x_950 : vec3<f32> = txVec10;
        let x_952 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_LinearClampCompare, x_950.xy, x_950.z);
        u_xlat29 = x_952;
        let x_954 : f32 = u_xlat14.z;
        let x_955 : f32 = u_xlat29;
        let x_958 : f32 = u_xlat3.x;
        u_xlat3.x = ((x_954 * x_955) + x_958);
        let x_962 : vec4<f32> = u_xlat8;
        let x_963 : vec2<f32> = vec2<f32>(x_962.x, x_962.y);
        let x_965 : f32 = u_xlat2.z;
        txVec11 = vec3<f32>(x_963.x, x_963.y, x_965);
        let x_972 : vec3<f32> = txVec11;
        let x_974 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_LinearClampCompare, x_972.xy, x_972.z);
        u_xlat29 = x_974;
        let x_976 : f32 = u_xlat14.w;
        let x_977 : f32 = u_xlat29;
        let x_980 : f32 = u_xlat3.x;
        u_xlat3.x = ((x_976 * x_977) + x_980);
        let x_984 : vec4<f32> = u_xlat8;
        let x_985 : vec2<f32> = vec2<f32>(x_984.z, x_984.w);
        let x_987 : f32 = u_xlat2.z;
        txVec12 = vec3<f32>(x_985.x, x_985.y, x_987);
        let x_994 : vec3<f32> = txVec12;
        let x_996 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_LinearClampCompare, x_994.xy, x_994.z);
        u_xlat29 = x_996;
        let x_997 : f32 = u_xlat80;
        let x_998 : f32 = u_xlat29;
        let x_1001 : f32 = u_xlat3.x;
        u_xlat79 = ((x_997 * x_998) + x_1001);
      } else {
        let x_1004 : vec4<f32> = u_xlat2;
        let x_1007 : vec4<f32> = x_246.x_MainLightShadowmapSize;
        let x_1010 : vec2<f32> = ((vec2<f32>(x_1004.x, x_1004.y) * vec2<f32>(x_1007.z, x_1007.w)) + vec2<f32>(0.5f, 0.5f));
        let x_1011 : vec4<f32> = u_xlat3;
        u_xlat3 = vec4<f32>(x_1010.x, x_1010.y, x_1011.z, x_1011.w);
        let x_1013 : vec4<f32> = u_xlat3;
        let x_1015 : vec2<f32> = floor(vec2<f32>(x_1013.x, x_1013.y));
        let x_1016 : vec4<f32> = u_xlat3;
        u_xlat3 = vec4<f32>(x_1015.x, x_1015.y, x_1016.z, x_1016.w);
        let x_1018 : vec4<f32> = u_xlat2;
        let x_1021 : vec4<f32> = x_246.x_MainLightShadowmapSize;
        let x_1024 : vec4<f32> = u_xlat3;
        u_xlat55 = ((vec2<f32>(x_1018.x, x_1018.y) * vec2<f32>(x_1021.z, x_1021.w)) + -(vec2<f32>(x_1024.x, x_1024.y)));
        let x_1028 : vec2<f32> = u_xlat55;
        u_xlat7 = (vec4<f32>(x_1028.x, x_1028.x, x_1028.y, x_1028.y) + vec4<f32>(0.5f, 1.0f, 0.5f, 1.0f));
        let x_1031 : vec4<f32> = u_xlat7;
        let x_1033 : vec4<f32> = u_xlat7;
        u_xlat8 = (vec4<f32>(x_1031.x, x_1031.x, x_1031.z, x_1031.z) * vec4<f32>(x_1033.x, x_1033.x, x_1033.z, x_1033.z));
        let x_1036 : vec4<f32> = u_xlat8;
        let x_1040 : vec2<f32> = (vec2<f32>(x_1036.y, x_1036.w) * vec2<f32>(0.04081600159406661987f, 0.04081600159406661987f));
        let x_1041 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_1041.x, x_1040.x, x_1041.z, x_1040.y);
        let x_1043 : vec4<f32> = u_xlat8;
        let x_1046 : vec2<f32> = u_xlat55;
        let x_1048 : vec2<f32> = ((vec2<f32>(x_1043.x, x_1043.z) * vec2<f32>(0.5f, 0.5f)) + -(x_1046));
        let x_1049 : vec4<f32> = u_xlat7;
        u_xlat7 = vec4<f32>(x_1048.x, x_1049.y, x_1048.y, x_1049.w);
        let x_1051 : vec2<f32> = u_xlat55;
        let x_1053 : vec2<f32> = (-(x_1051) + vec2<f32>(1.0f, 1.0f));
        let x_1054 : vec4<f32> = u_xlat8;
        u_xlat8 = vec4<f32>(x_1053.x, x_1053.y, x_1054.z, x_1054.w);
        let x_1056 : vec2<f32> = u_xlat55;
        u_xlat60 = min(x_1056, vec2<f32>(0.0f, 0.0f));
        let x_1058 : vec2<f32> = u_xlat60;
        let x_1060 : vec2<f32> = u_xlat60;
        let x_1062 : vec4<f32> = u_xlat8;
        let x_1064 : vec2<f32> = ((-(x_1058) * x_1060) + vec2<f32>(x_1062.x, x_1062.y));
        let x_1065 : vec4<f32> = u_xlat8;
        u_xlat8 = vec4<f32>(x_1064.x, x_1064.y, x_1065.z, x_1065.w);
        let x_1067 : vec2<f32> = u_xlat55;
        u_xlat60 = max(x_1067, vec2<f32>(0.0f, 0.0f));
        let x_1070 : vec2<f32> = u_xlat60;
        let x_1072 : vec2<f32> = u_xlat60;
        let x_1074 : vec4<f32> = u_xlat7;
        let x_1076 : vec2<f32> = ((-(x_1070) * x_1072) + vec2<f32>(x_1074.y, x_1074.w));
        let x_1077 : vec3<f32> = u_xlat33;
        u_xlat33 = vec3<f32>(x_1076.x, x_1077.y, x_1076.y);
        let x_1079 : vec4<f32> = u_xlat8;
        let x_1082 : vec2<f32> = (vec2<f32>(x_1079.x, x_1079.y) + vec2<f32>(2.0f, 2.0f));
        let x_1083 : vec4<f32> = u_xlat8;
        u_xlat8 = vec4<f32>(x_1082.x, x_1082.y, x_1083.z, x_1083.w);
        let x_1085 : vec3<f32> = u_xlat33;
        let x_1087 : vec2<f32> = (vec2<f32>(x_1085.x, x_1085.z) + vec2<f32>(2.0f, 2.0f));
        let x_1088 : vec4<f32> = u_xlat7;
        u_xlat7 = vec4<f32>(x_1088.x, x_1087.x, x_1088.z, x_1087.y);
        let x_1091 : f32 = u_xlat7.y;
        u_xlat10.z = (x_1091 * 0.08163200318813323975f);
        let x_1095 : vec4<f32> = u_xlat7;
        let x_1098 : vec3<f32> = (vec3<f32>(x_1095.z, x_1095.x, x_1095.w) * vec3<f32>(0.08163200318813323975f, 0.08163200318813323975f, 0.08163200318813323975f));
        let x_1099 : vec4<f32> = u_xlat11;
        u_xlat11 = vec4<f32>(x_1098.x, x_1098.y, x_1098.z, x_1099.w);
        let x_1101 : vec4<f32> = u_xlat8;
        let x_1104 : vec2<f32> = (vec2<f32>(x_1101.x, x_1101.y) * vec2<f32>(0.08163200318813323975f, 0.08163200318813323975f));
        let x_1105 : vec4<f32> = u_xlat7;
        u_xlat7 = vec4<f32>(x_1104.x, x_1104.y, x_1105.z, x_1105.w);
        let x_1108 : f32 = u_xlat11.y;
        u_xlat10.x = x_1108;
        let x_1110 : vec2<f32> = u_xlat55;
        let x_1117 : vec2<f32> = ((vec2<f32>(x_1110.x, x_1110.x) * vec2<f32>(-0.08163200318813323975f, 0.08163200318813323975f)) + vec2<f32>(0.16326400637626647949f, 0.08163200318813323975f));
        let x_1118 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_1118.x, x_1117.x, x_1118.z, x_1117.y);
        let x_1120 : vec2<f32> = u_xlat55;
        let x_1124 : vec2<f32> = ((vec2<f32>(x_1120.x, x_1120.x) * vec2<f32>(-0.08163200318813323975f, 0.08163200318813323975f)) + vec2<f32>(0.08163200318813323975f, 0.16326400637626647949f));
        let x_1125 : vec4<f32> = u_xlat8;
        u_xlat8 = vec4<f32>(x_1124.x, x_1125.y, x_1124.y, x_1125.w);
        let x_1128 : f32 = u_xlat7.x;
        u_xlat8.y = x_1128;
        let x_1131 : f32 = u_xlat9.y;
        u_xlat8.w = x_1131;
        let x_1133 : vec4<f32> = u_xlat8;
        let x_1134 : vec4<f32> = u_xlat10;
        u_xlat10 = (x_1133 + x_1134);
        let x_1136 : vec2<f32> = u_xlat55;
        let x_1139 : vec2<f32> = ((vec2<f32>(x_1136.y, x_1136.y) * vec2<f32>(-0.08163200318813323975f, 0.08163200318813323975f)) + vec2<f32>(0.16326400637626647949f, 0.08163200318813323975f));
        let x_1140 : vec4<f32> = u_xlat11;
        u_xlat11 = vec4<f32>(x_1140.x, x_1139.x, x_1140.z, x_1139.y);
        let x_1142 : vec2<f32> = u_xlat55;
        let x_1145 : vec2<f32> = ((vec2<f32>(x_1142.y, x_1142.y) * vec2<f32>(-0.08163200318813323975f, 0.08163200318813323975f)) + vec2<f32>(0.08163200318813323975f, 0.16326400637626647949f));
        let x_1146 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_1145.x, x_1146.y, x_1145.y, x_1146.w);
        let x_1149 : f32 = u_xlat7.y;
        u_xlat9.y = x_1149;
        let x_1151 : vec4<f32> = u_xlat9;
        let x_1152 : vec4<f32> = u_xlat11;
        u_xlat7 = (x_1151 + x_1152);
        let x_1154 : vec4<f32> = u_xlat8;
        let x_1155 : vec4<f32> = u_xlat10;
        u_xlat8 = (x_1154 / x_1155);
        let x_1157 : vec4<f32> = u_xlat8;
        u_xlat8 = (x_1157 + vec4<f32>(-3.5f, -1.5f, 0.5f, 2.5f));
        let x_1163 : vec4<f32> = u_xlat9;
        let x_1164 : vec4<f32> = u_xlat7;
        u_xlat9 = (x_1163 / x_1164);
        let x_1166 : vec4<f32> = u_xlat9;
        u_xlat9 = (x_1166 + vec4<f32>(-3.5f, -1.5f, 0.5f, 2.5f));
        let x_1168 : vec4<f32> = u_xlat8;
        let x_1171 : vec4<f32> = x_246.x_MainLightShadowmapSize;
        u_xlat8 = (vec4<f32>(x_1168.w, x_1168.x, x_1168.y, x_1168.z) * vec4<f32>(x_1171.x, x_1171.x, x_1171.x, x_1171.x));
        let x_1174 : vec4<f32> = u_xlat9;
        let x_1177 : vec4<f32> = x_246.x_MainLightShadowmapSize;
        u_xlat9 = (vec4<f32>(x_1174.x, x_1174.w, x_1174.y, x_1174.z) * vec4<f32>(x_1177.y, x_1177.y, x_1177.y, x_1177.y));
        let x_1180 : vec4<f32> = u_xlat8;
        let x_1181 : vec3<f32> = vec3<f32>(x_1180.y, x_1180.z, x_1180.w);
        let x_1182 : vec4<f32> = u_xlat11;
        u_xlat11 = vec4<f32>(x_1181.x, x_1182.y, x_1181.y, x_1181.z);
        let x_1185 : f32 = u_xlat9.x;
        u_xlat11.y = x_1185;
        let x_1187 : vec4<f32> = u_xlat3;
        let x_1190 : vec4<f32> = x_246.x_MainLightShadowmapSize;
        let x_1193 : vec4<f32> = u_xlat11;
        u_xlat12 = ((vec4<f32>(x_1187.x, x_1187.y, x_1187.x, x_1187.y) * vec4<f32>(x_1190.x, x_1190.y, x_1190.x, x_1190.y)) + vec4<f32>(x_1193.x, x_1193.y, x_1193.z, x_1193.y));
        let x_1196 : vec4<f32> = u_xlat3;
        let x_1199 : vec4<f32> = x_246.x_MainLightShadowmapSize;
        let x_1202 : vec4<f32> = u_xlat11;
        u_xlat55 = ((vec2<f32>(x_1196.x, x_1196.y) * vec2<f32>(x_1199.x, x_1199.y)) + vec2<f32>(x_1202.w, x_1202.y));
        let x_1206 : f32 = u_xlat11.y;
        u_xlat8.y = x_1206;
        let x_1209 : f32 = u_xlat9.z;
        u_xlat11.y = x_1209;
        let x_1211 : vec4<f32> = u_xlat3;
        let x_1214 : vec4<f32> = x_246.x_MainLightShadowmapSize;
        let x_1217 : vec4<f32> = u_xlat11;
        u_xlat13 = ((vec4<f32>(x_1211.x, x_1211.y, x_1211.x, x_1211.y) * vec4<f32>(x_1214.x, x_1214.y, x_1214.x, x_1214.y)) + vec4<f32>(x_1217.x, x_1217.y, x_1217.z, x_1217.y));
        let x_1220 : vec4<f32> = u_xlat3;
        let x_1223 : vec4<f32> = x_246.x_MainLightShadowmapSize;
        let x_1226 : vec4<f32> = u_xlat11;
        let x_1228 : vec2<f32> = ((vec2<f32>(x_1220.x, x_1220.y) * vec2<f32>(x_1223.x, x_1223.y)) + vec2<f32>(x_1226.w, x_1226.y));
        let x_1229 : vec4<f32> = u_xlat14;
        u_xlat14 = vec4<f32>(x_1228.x, x_1228.y, x_1229.z, x_1229.w);
        let x_1232 : f32 = u_xlat11.y;
        u_xlat8.z = x_1232;
        let x_1235 : vec4<f32> = u_xlat3;
        let x_1238 : vec4<f32> = x_246.x_MainLightShadowmapSize;
        let x_1241 : vec4<f32> = u_xlat8;
        u_xlat15 = ((vec4<f32>(x_1235.x, x_1235.y, x_1235.x, x_1235.y) * vec4<f32>(x_1238.x, x_1238.y, x_1238.x, x_1238.y)) + vec4<f32>(x_1241.x, x_1241.y, x_1241.x, x_1241.z));
        let x_1245 : f32 = u_xlat9.w;
        u_xlat11.y = x_1245;
        let x_1248 : vec4<f32> = u_xlat3;
        let x_1251 : vec4<f32> = x_246.x_MainLightShadowmapSize;
        let x_1254 : vec4<f32> = u_xlat11;
        u_xlat16 = ((vec4<f32>(x_1248.x, x_1248.y, x_1248.x, x_1248.y) * vec4<f32>(x_1251.x, x_1251.y, x_1251.x, x_1251.y)) + vec4<f32>(x_1254.x, x_1254.y, x_1254.z, x_1254.y));
        let x_1258 : vec4<f32> = u_xlat3;
        let x_1261 : vec4<f32> = x_246.x_MainLightShadowmapSize;
        let x_1264 : vec4<f32> = u_xlat11;
        u_xlat34 = ((vec2<f32>(x_1258.x, x_1258.y) * vec2<f32>(x_1261.x, x_1261.y)) + vec2<f32>(x_1264.w, x_1264.y));
        let x_1268 : f32 = u_xlat11.y;
        u_xlat8.w = x_1268;
        let x_1271 : vec4<f32> = u_xlat3;
        let x_1274 : vec4<f32> = x_246.x_MainLightShadowmapSize;
        let x_1277 : vec4<f32> = u_xlat8;
        u_xlat66 = ((vec2<f32>(x_1271.x, x_1271.y) * vec2<f32>(x_1274.x, x_1274.y)) + vec2<f32>(x_1277.x, x_1277.w));
        let x_1280 : vec4<f32> = u_xlat11;
        let x_1281 : vec3<f32> = vec3<f32>(x_1280.x, x_1280.z, x_1280.w);
        let x_1282 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_1281.x, x_1282.y, x_1281.y, x_1281.z);
        let x_1284 : vec4<f32> = u_xlat3;
        let x_1287 : vec4<f32> = x_246.x_MainLightShadowmapSize;
        let x_1290 : vec4<f32> = u_xlat9;
        u_xlat11 = ((vec4<f32>(x_1284.x, x_1284.y, x_1284.x, x_1284.y) * vec4<f32>(x_1287.x, x_1287.y, x_1287.x, x_1287.y)) + vec4<f32>(x_1290.x, x_1290.y, x_1290.z, x_1290.y));
        let x_1294 : vec4<f32> = u_xlat3;
        let x_1297 : vec4<f32> = x_246.x_MainLightShadowmapSize;
        let x_1300 : vec4<f32> = u_xlat9;
        u_xlat61 = ((vec2<f32>(x_1294.x, x_1294.y) * vec2<f32>(x_1297.x, x_1297.y)) + vec2<f32>(x_1300.w, x_1300.y));
        let x_1304 : f32 = u_xlat8.x;
        u_xlat9.x = x_1304;
        let x_1306 : vec4<f32> = u_xlat3;
        let x_1309 : vec4<f32> = x_246.x_MainLightShadowmapSize;
        let x_1312 : vec4<f32> = u_xlat9;
        let x_1314 : vec2<f32> = ((vec2<f32>(x_1306.x, x_1306.y) * vec2<f32>(x_1309.x, x_1309.y)) + vec2<f32>(x_1312.x, x_1312.y));
        let x_1315 : vec4<f32> = u_xlat3;
        u_xlat3 = vec4<f32>(x_1314.x, x_1314.y, x_1315.z, x_1315.w);
        let x_1318 : vec4<f32> = u_xlat7;
        let x_1320 : vec4<f32> = u_xlat10;
        u_xlat17 = (vec4<f32>(x_1318.x, x_1318.x, x_1318.x, x_1318.x) * x_1320);
        let x_1323 : vec4<f32> = u_xlat7;
        let x_1325 : vec4<f32> = u_xlat10;
        u_xlat18 = (vec4<f32>(x_1323.y, x_1323.y, x_1323.y, x_1323.y) * x_1325);
        let x_1328 : vec4<f32> = u_xlat7;
        let x_1330 : vec4<f32> = u_xlat10;
        u_xlat19 = (vec4<f32>(x_1328.z, x_1328.z, x_1328.z, x_1328.z) * x_1330);
        let x_1332 : vec4<f32> = u_xlat7;
        let x_1334 : vec4<f32> = u_xlat10;
        u_xlat7 = (vec4<f32>(x_1332.w, x_1332.w, x_1332.w, x_1332.w) * x_1334);
        let x_1337 : vec4<f32> = u_xlat12;
        let x_1338 : vec2<f32> = vec2<f32>(x_1337.x, x_1337.y);
        let x_1340 : f32 = u_xlat2.z;
        txVec13 = vec3<f32>(x_1338.x, x_1338.y, x_1340);
        let x_1347 : vec3<f32> = txVec13;
        let x_1349 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_LinearClampCompare, x_1347.xy, x_1347.z);
        u_xlat80 = x_1349;
        let x_1351 : vec4<f32> = u_xlat12;
        let x_1352 : vec2<f32> = vec2<f32>(x_1351.z, x_1351.w);
        let x_1354 : f32 = u_xlat2.z;
        txVec14 = vec3<f32>(x_1352.x, x_1352.y, x_1354);
        let x_1362 : vec3<f32> = txVec14;
        let x_1364 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_LinearClampCompare, x_1362.xy, x_1362.z);
        u_xlat83 = x_1364;
        let x_1365 : f32 = u_xlat83;
        let x_1367 : f32 = u_xlat17.y;
        u_xlat83 = (x_1365 * x_1367);
        let x_1370 : f32 = u_xlat17.x;
        let x_1371 : f32 = u_xlat80;
        let x_1373 : f32 = u_xlat83;
        u_xlat80 = ((x_1370 * x_1371) + x_1373);
        let x_1376 : vec2<f32> = u_xlat55;
        let x_1378 : f32 = u_xlat2.z;
        txVec15 = vec3<f32>(x_1376.x, x_1376.y, x_1378);
        let x_1385 : vec3<f32> = txVec15;
        let x_1387 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_LinearClampCompare, x_1385.xy, x_1385.z);
        u_xlat55.x = x_1387;
        let x_1390 : f32 = u_xlat17.z;
        let x_1392 : f32 = u_xlat55.x;
        let x_1394 : f32 = u_xlat80;
        u_xlat80 = ((x_1390 * x_1392) + x_1394);
        let x_1397 : vec4<f32> = u_xlat15;
        let x_1398 : vec2<f32> = vec2<f32>(x_1397.x, x_1397.y);
        let x_1400 : f32 = u_xlat2.z;
        txVec16 = vec3<f32>(x_1398.x, x_1398.y, x_1400);
        let x_1407 : vec3<f32> = txVec16;
        let x_1409 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_LinearClampCompare, x_1407.xy, x_1407.z);
        u_xlat55.x = x_1409;
        let x_1412 : f32 = u_xlat17.w;
        let x_1414 : f32 = u_xlat55.x;
        let x_1416 : f32 = u_xlat80;
        u_xlat80 = ((x_1412 * x_1414) + x_1416);
        let x_1419 : vec4<f32> = u_xlat13;
        let x_1420 : vec2<f32> = vec2<f32>(x_1419.x, x_1419.y);
        let x_1422 : f32 = u_xlat2.z;
        txVec17 = vec3<f32>(x_1420.x, x_1420.y, x_1422);
        let x_1429 : vec3<f32> = txVec17;
        let x_1431 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_LinearClampCompare, x_1429.xy, x_1429.z);
        u_xlat55.x = x_1431;
        let x_1434 : f32 = u_xlat18.x;
        let x_1436 : f32 = u_xlat55.x;
        let x_1438 : f32 = u_xlat80;
        u_xlat80 = ((x_1434 * x_1436) + x_1438);
        let x_1441 : vec4<f32> = u_xlat13;
        let x_1442 : vec2<f32> = vec2<f32>(x_1441.z, x_1441.w);
        let x_1444 : f32 = u_xlat2.z;
        txVec18 = vec3<f32>(x_1442.x, x_1442.y, x_1444);
        let x_1451 : vec3<f32> = txVec18;
        let x_1453 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_LinearClampCompare, x_1451.xy, x_1451.z);
        u_xlat55.x = x_1453;
        let x_1456 : f32 = u_xlat18.y;
        let x_1458 : f32 = u_xlat55.x;
        let x_1460 : f32 = u_xlat80;
        u_xlat80 = ((x_1456 * x_1458) + x_1460);
        let x_1463 : vec4<f32> = u_xlat14;
        let x_1464 : vec2<f32> = vec2<f32>(x_1463.x, x_1463.y);
        let x_1466 : f32 = u_xlat2.z;
        txVec19 = vec3<f32>(x_1464.x, x_1464.y, x_1466);
        let x_1473 : vec3<f32> = txVec19;
        let x_1475 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_LinearClampCompare, x_1473.xy, x_1473.z);
        u_xlat55.x = x_1475;
        let x_1478 : f32 = u_xlat18.z;
        let x_1480 : f32 = u_xlat55.x;
        let x_1482 : f32 = u_xlat80;
        u_xlat80 = ((x_1478 * x_1480) + x_1482);
        let x_1485 : vec4<f32> = u_xlat15;
        let x_1486 : vec2<f32> = vec2<f32>(x_1485.z, x_1485.w);
        let x_1488 : f32 = u_xlat2.z;
        txVec20 = vec3<f32>(x_1486.x, x_1486.y, x_1488);
        let x_1495 : vec3<f32> = txVec20;
        let x_1497 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_LinearClampCompare, x_1495.xy, x_1495.z);
        u_xlat55.x = x_1497;
        let x_1500 : f32 = u_xlat18.w;
        let x_1502 : f32 = u_xlat55.x;
        let x_1504 : f32 = u_xlat80;
        u_xlat80 = ((x_1500 * x_1502) + x_1504);
        let x_1507 : vec4<f32> = u_xlat16;
        let x_1508 : vec2<f32> = vec2<f32>(x_1507.x, x_1507.y);
        let x_1510 : f32 = u_xlat2.z;
        txVec21 = vec3<f32>(x_1508.x, x_1508.y, x_1510);
        let x_1517 : vec3<f32> = txVec21;
        let x_1519 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_LinearClampCompare, x_1517.xy, x_1517.z);
        u_xlat55.x = x_1519;
        let x_1522 : f32 = u_xlat19.x;
        let x_1524 : f32 = u_xlat55.x;
        let x_1526 : f32 = u_xlat80;
        u_xlat80 = ((x_1522 * x_1524) + x_1526);
        let x_1529 : vec4<f32> = u_xlat16;
        let x_1530 : vec2<f32> = vec2<f32>(x_1529.z, x_1529.w);
        let x_1532 : f32 = u_xlat2.z;
        txVec22 = vec3<f32>(x_1530.x, x_1530.y, x_1532);
        let x_1539 : vec3<f32> = txVec22;
        let x_1541 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_LinearClampCompare, x_1539.xy, x_1539.z);
        u_xlat55.x = x_1541;
        let x_1544 : f32 = u_xlat19.y;
        let x_1546 : f32 = u_xlat55.x;
        let x_1548 : f32 = u_xlat80;
        u_xlat80 = ((x_1544 * x_1546) + x_1548);
        let x_1551 : vec2<f32> = u_xlat34;
        let x_1553 : f32 = u_xlat2.z;
        txVec23 = vec3<f32>(x_1551.x, x_1551.y, x_1553);
        let x_1560 : vec3<f32> = txVec23;
        let x_1562 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_LinearClampCompare, x_1560.xy, x_1560.z);
        u_xlat55.x = x_1562;
        let x_1565 : f32 = u_xlat19.z;
        let x_1567 : f32 = u_xlat55.x;
        let x_1569 : f32 = u_xlat80;
        u_xlat80 = ((x_1565 * x_1567) + x_1569);
        let x_1572 : vec2<f32> = u_xlat66;
        let x_1574 : f32 = u_xlat2.z;
        txVec24 = vec3<f32>(x_1572.x, x_1572.y, x_1574);
        let x_1581 : vec3<f32> = txVec24;
        let x_1583 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_LinearClampCompare, x_1581.xy, x_1581.z);
        u_xlat55.x = x_1583;
        let x_1586 : f32 = u_xlat19.w;
        let x_1588 : f32 = u_xlat55.x;
        let x_1590 : f32 = u_xlat80;
        u_xlat80 = ((x_1586 * x_1588) + x_1590);
        let x_1593 : vec4<f32> = u_xlat11;
        let x_1594 : vec2<f32> = vec2<f32>(x_1593.x, x_1593.y);
        let x_1596 : f32 = u_xlat2.z;
        txVec25 = vec3<f32>(x_1594.x, x_1594.y, x_1596);
        let x_1603 : vec3<f32> = txVec25;
        let x_1605 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_LinearClampCompare, x_1603.xy, x_1603.z);
        u_xlat55.x = x_1605;
        let x_1608 : f32 = u_xlat7.x;
        let x_1610 : f32 = u_xlat55.x;
        let x_1612 : f32 = u_xlat80;
        u_xlat80 = ((x_1608 * x_1610) + x_1612);
        let x_1615 : vec4<f32> = u_xlat11;
        let x_1616 : vec2<f32> = vec2<f32>(x_1615.z, x_1615.w);
        let x_1618 : f32 = u_xlat2.z;
        txVec26 = vec3<f32>(x_1616.x, x_1616.y, x_1618);
        let x_1625 : vec3<f32> = txVec26;
        let x_1627 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_LinearClampCompare, x_1625.xy, x_1625.z);
        u_xlat55.x = x_1627;
        let x_1630 : f32 = u_xlat7.y;
        let x_1632 : f32 = u_xlat55.x;
        let x_1634 : f32 = u_xlat80;
        u_xlat80 = ((x_1630 * x_1632) + x_1634);
        let x_1637 : vec2<f32> = u_xlat61;
        let x_1639 : f32 = u_xlat2.z;
        txVec27 = vec3<f32>(x_1637.x, x_1637.y, x_1639);
        let x_1646 : vec3<f32> = txVec27;
        let x_1648 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_LinearClampCompare, x_1646.xy, x_1646.z);
        u_xlat55.x = x_1648;
        let x_1651 : f32 = u_xlat7.z;
        let x_1653 : f32 = u_xlat55.x;
        let x_1655 : f32 = u_xlat80;
        u_xlat80 = ((x_1651 * x_1653) + x_1655);
        let x_1658 : vec4<f32> = u_xlat3;
        let x_1659 : vec2<f32> = vec2<f32>(x_1658.x, x_1658.y);
        let x_1661 : f32 = u_xlat2.z;
        txVec28 = vec3<f32>(x_1659.x, x_1659.y, x_1661);
        let x_1668 : vec3<f32> = txVec28;
        let x_1670 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_LinearClampCompare, x_1668.xy, x_1668.z);
        u_xlat3.x = x_1670;
        let x_1673 : f32 = u_xlat7.w;
        let x_1675 : f32 = u_xlat3.x;
        let x_1677 : f32 = u_xlat80;
        u_xlat79 = ((x_1673 * x_1675) + x_1677);
      }
    }
  } else {
    let x_1681 : vec4<f32> = u_xlat2;
    let x_1682 : vec2<f32> = vec2<f32>(x_1681.x, x_1681.y);
    let x_1684 : f32 = u_xlat2.z;
    txVec29 = vec3<f32>(x_1682.x, x_1682.y, x_1684);
    let x_1691 : vec3<f32> = txVec29;
    let x_1693 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_LinearClampCompare, x_1691.xy, x_1691.z);
    u_xlat79 = x_1693;
  }
  let x_1695 : f32 = x_246.x_MainLightShadowParams.x;
  u_xlat80 = (-(x_1695) + 1.0f);
  let x_1698 : f32 = u_xlat79;
  let x_1700 : f32 = x_246.x_MainLightShadowParams.x;
  let x_1702 : f32 = u_xlat80;
  u_xlat79 = ((x_1698 * x_1700) + x_1702);
  let x_1706 : f32 = u_xlat2.z;
  u_xlatb3 = (0.0f >= x_1706);
  let x_1710 : f32 = u_xlat2.z;
  u_xlatb29 = (x_1710 >= 1.0f);
  let x_1712 : bool = u_xlatb29;
  let x_1713 : bool = u_xlatb3;
  u_xlatb3 = (x_1712 | x_1713);
  let x_1715 : bool = u_xlatb3;
  let x_1716 : f32 = u_xlat79;
  u_xlat79 = select(x_1716, 1.0f, x_1715);
  let x_1718 : vec3<f32> = u_xlat1;
  let x_1720 : vec4<f32> = x_128.x_MainLightPosition;
  u_xlat1.x = dot(x_1718, -(vec3<f32>(x_1720.x, x_1720.y, x_1720.z)));
  let x_1726 : f32 = u_xlat1.x;
  u_xlat1.x = clamp(x_1726, 0.0f, 1.0f);
  let x_1730 : f32 = u_xlat79;
  let x_1733 : vec4<f32> = x_128.x_MainLightColor;
  u_xlat27 = (vec3<f32>(x_1730, x_1730, x_1730) * vec3<f32>(x_1733.x, x_1733.y, x_1733.z));
  let x_1736 : vec3<f32> = u_xlat27;
  let x_1737 : vec3<f32> = u_xlat1;
  u_xlat1 = (x_1736 * vec3<f32>(x_1737.x, x_1737.x, x_1737.x));
  let x_1740 : vec3<f32> = u_xlat1;
  let x_1741 : vec4<f32> = u_xlat4;
  u_xlat1 = (x_1740 * vec3<f32>(x_1741.x, x_1741.y, x_1741.z));
  let x_1745 : f32 = u_xlat4.w;
  u_xlatb79 = (x_1745 >= 0.40000000596046447754f);
  let x_1748 : bool = u_xlatb79;
  if (x_1748) {
    let x_1754 : f32 = u_xlat4.w;
    x_1750 = x_1754;
  } else {
    x_1750 = 0.0f;
  }
  let x_1756 : f32 = x_1750;
  u_xlat79 = x_1756;
  let x_1758 : f32 = u_xlat4.w;
  u_xlat29 = (x_1758 + -0.40000000596046447754f);
  let x_1762 : f32 = u_xlat4.w;
  u_xlat55.x = dpdxCoarse(x_1762);
  let x_1767 : f32 = u_xlat4.w;
  u_xlat81 = dpdyCoarse(x_1767);
  let x_1769 : f32 = u_xlat81;
  let x_1772 : f32 = u_xlat55.x;
  u_xlat55.x = (abs(x_1769) + abs(x_1772));
  let x_1777 : f32 = u_xlat55.x;
  u_xlat55.x = max(x_1777, 0.00009999999747378752f);
  let x_1781 : f32 = u_xlat29;
  let x_1783 : f32 = u_xlat55.x;
  u_xlat29 = (x_1781 / x_1783);
  let x_1785 : f32 = u_xlat29;
  u_xlat29 = (x_1785 + 0.5f);
  let x_1787 : f32 = u_xlat29;
  u_xlat29 = clamp(x_1787, 0.0f, 1.0f);
  let x_1791 : f32 = x_128.x_AlphaToMaskAvailable;
  u_xlatb55 = !((x_1791 == 0.0f));
  let x_1793 : bool = u_xlatb55;
  let x_1794 : f32 = u_xlat29;
  let x_1795 : f32 = u_xlat79;
  u_xlat79 = select(x_1795, x_1794, x_1793);
  let x_1797 : f32 = u_xlat79;
  u_xlat29 = (x_1797 + -0.00009999999747378752f);
  let x_1800 : f32 = u_xlat29;
  u_xlatb29 = (x_1800 < 0.0f);
  let x_1802 : bool = u_xlatb29;
  if (((select(0i, 1i, x_1802) * -1i) != 0i)) {
    discard;
  }
  let x_1810 : vec3<f32> = u_xlat26;
  let x_1811 : vec3<f32> = u_xlat32;
  u_xlat26 = (x_1810 * vec3<f32>(x_1811.y, x_1811.y, x_1811.y));
  let x_1814 : vec3<f32> = u_xlat32;
  let x_1816 : vec4<f32> = vs_INTERP4;
  let x_1819 : vec3<f32> = u_xlat26;
  u_xlat26 = ((vec3<f32>(x_1814.x, x_1814.x, x_1814.x) * vec3<f32>(x_1816.x, x_1816.y, x_1816.z)) + x_1819);
  let x_1821 : vec3<f32> = u_xlat32;
  let x_1823 : vec3<f32> = vs_INTERP9;
  let x_1825 : vec3<f32> = u_xlat26;
  u_xlat26 = ((vec3<f32>(x_1821.z, x_1821.z, x_1821.z) * x_1823) + x_1825);
  let x_1827 : vec3<f32> = u_xlat26;
  let x_1828 : vec3<f32> = u_xlat26;
  u_xlat29 = dot(x_1827, x_1828);
  let x_1830 : f32 = u_xlat29;
  u_xlat29 = inverseSqrt(x_1830);
  let x_1832 : vec3<f32> = u_xlat26;
  let x_1833 : f32 = u_xlat29;
  let x_1835 : vec3<f32> = (x_1832 * vec3<f32>(x_1833, x_1833, x_1833));
  let x_1836 : vec4<f32> = u_xlat4;
  u_xlat4 = vec4<f32>(x_1835.x, x_1835.y, x_1835.z, x_1836.w);
  let x_1839 : f32 = x_128.unity_OrthoParams.w;
  u_xlatb26.x = (x_1839 == 0.0f);
  let x_1842 : vec3<f32> = vs_INTERP8;
  let x_1846 : vec3<f32> = x_128.x_WorldSpaceCameraPos;
  u_xlat32 = (-(x_1842) + x_1846);
  let x_1849 : vec3<f32> = u_xlat32;
  let x_1850 : vec3<f32> = u_xlat32;
  u_xlat52 = dot(x_1849, x_1850);
  let x_1852 : f32 = u_xlat52;
  u_xlat52 = inverseSqrt(x_1852);
  let x_1854 : f32 = u_xlat52;
  let x_1856 : vec3<f32> = u_xlat32;
  u_xlat32 = (vec3<f32>(x_1854, x_1854, x_1854) * x_1856);
  let x_1860 : f32 = x_128.unity_MatrixV[0i].z;
  u_xlat7.x = x_1860;
  let x_1863 : f32 = x_128.unity_MatrixV[1i].z;
  u_xlat7.y = x_1863;
  let x_1866 : f32 = x_128.unity_MatrixV[2i].z;
  u_xlat7.z = x_1866;
  let x_1869 : bool = u_xlatb26.x;
  if (x_1869) {
    let x_1873 : vec3<f32> = u_xlat32;
    x_1870 = x_1873;
  } else {
    let x_1875 : vec4<f32> = u_xlat7;
    x_1870 = vec3<f32>(x_1875.x, x_1875.y, x_1875.z);
  }
  let x_1877 : vec3<f32> = x_1870;
  u_xlat26 = x_1877;
  let x_1879 : f32 = vs_INTERP8.y;
  let x_1881 : f32 = x_128.unity_MatrixV[1i].z;
  u_xlat29 = (x_1879 * x_1881);
  let x_1884 : f32 = x_128.unity_MatrixV[0i].z;
  let x_1886 : f32 = vs_INTERP8.x;
  let x_1888 : f32 = u_xlat29;
  u_xlat29 = ((x_1884 * x_1886) + x_1888);
  let x_1891 : f32 = x_128.unity_MatrixV[2i].z;
  let x_1893 : f32 = vs_INTERP8.z;
  let x_1895 : f32 = u_xlat29;
  u_xlat29 = ((x_1891 * x_1893) + x_1895);
  let x_1897 : f32 = u_xlat29;
  let x_1899 : f32 = x_128.unity_MatrixV[3i].z;
  u_xlat29 = (x_1897 + x_1899);
  let x_1901 : f32 = u_xlat29;
  let x_1904 : f32 = x_128.x_ProjectionParams.y;
  u_xlat29 = (-(x_1901) + -(x_1904));
  let x_1907 : f32 = u_xlat29;
  u_xlat29 = max(x_1907, 0.0f);
  let x_1909 : f32 = u_xlat29;
  let x_1911 : f32 = x_128.unity_FogParams.x;
  u_xlat29 = (x_1909 * x_1911);
  u_xlat4.w = 1.0f;
  let x_1916 : vec4<f32> = x_48.unity_SHAr;
  let x_1917 : vec4<f32> = u_xlat4;
  u_xlat7.x = dot(x_1916, x_1917);
  let x_1922 : vec4<f32> = x_48.unity_SHAg;
  let x_1923 : vec4<f32> = u_xlat4;
  u_xlat7.y = dot(x_1922, x_1923);
  let x_1928 : vec4<f32> = x_48.unity_SHAb;
  let x_1929 : vec4<f32> = u_xlat4;
  u_xlat7.z = dot(x_1928, x_1929);
  let x_1932 : vec4<f32> = u_xlat4;
  let x_1934 : vec4<f32> = u_xlat4;
  u_xlat8 = (vec4<f32>(x_1932.y, x_1932.z, x_1932.z, x_1932.x) * vec4<f32>(x_1934.x, x_1934.y, x_1934.z, x_1934.z));
  let x_1939 : vec4<f32> = x_48.unity_SHBr;
  let x_1940 : vec4<f32> = u_xlat8;
  u_xlat9.x = dot(x_1939, x_1940);
  let x_1945 : vec4<f32> = x_48.unity_SHBg;
  let x_1946 : vec4<f32> = u_xlat8;
  u_xlat9.y = dot(x_1945, x_1946);
  let x_1951 : vec4<f32> = x_48.unity_SHBb;
  let x_1952 : vec4<f32> = u_xlat8;
  u_xlat9.z = dot(x_1951, x_1952);
  let x_1956 : f32 = u_xlat4.y;
  let x_1958 : f32 = u_xlat4.y;
  u_xlat81 = (x_1956 * x_1958);
  let x_1961 : f32 = u_xlat4.x;
  let x_1963 : f32 = u_xlat4.x;
  let x_1965 : f32 = u_xlat81;
  u_xlat81 = ((x_1961 * x_1963) + -(x_1965));
  let x_1970 : vec4<f32> = x_48.unity_SHC;
  let x_1972 : f32 = u_xlat81;
  let x_1975 : vec4<f32> = u_xlat9;
  u_xlat32 = ((vec3<f32>(x_1970.x, x_1970.y, x_1970.z) * vec3<f32>(x_1972, x_1972, x_1972)) + vec3<f32>(x_1975.x, x_1975.y, x_1975.z));
  let x_1978 : vec3<f32> = u_xlat32;
  let x_1979 : vec4<f32> = u_xlat7;
  u_xlat32 = (x_1978 + vec3<f32>(x_1979.x, x_1979.y, x_1979.z));
  let x_1982 : vec3<f32> = u_xlat32;
  u_xlat32 = max(x_1982, vec3<f32>(0.0f, 0.0f, 0.0f));
  let x_1985 : f32 = u_xlat6.x;
  u_xlat6.x = x_1985;
  let x_1988 : f32 = u_xlat6.x;
  u_xlat6.x = clamp(x_1988, 0.0f, 1.0f);
  let x_1991 : f32 = u_xlat79;
  u_xlat79 = min(x_1991, 1.0f);
  let x_1993 : vec3<f32> = u_xlat5;
  u_xlat5 = (x_1993 * vec3<f32>(0.95999997854232788086f, 0.95999997854232788086f, 0.95999997854232788086f));
  let x_1998 : f32 = u_xlat6.x;
  u_xlat81 = (-(x_1998) + 1.0f);
  let x_2002 : f32 = u_xlat81;
  let x_2003 : f32 = u_xlat81;
  u_xlat82 = (x_2002 * x_2003);
  let x_2005 : f32 = u_xlat82;
  u_xlat82 = max(x_2005, 0.0078125f);
  let x_2008 : f32 = u_xlat82;
  let x_2009 : f32 = u_xlat82;
  u_xlat83 = (x_2008 * x_2009);
  let x_2012 : f32 = u_xlat6.x;
  u_xlat6.x = (x_2012 + 0.04000002145767211914f);
  let x_2017 : f32 = u_xlat6.x;
  u_xlat6.x = min(x_2017, 1.0f);
  let x_2020 : f32 = u_xlat82;
  u_xlat7.x = ((x_2020 * 4.0f) + 2.0f);
  let x_2025 : f32 = vs_INTERP6.w;
  u_xlat33.x = min(x_2025, 1.0f);
  let x_2028 : bool = u_xlatb0;
  if (x_2028) {
    let x_2032 : f32 = x_246.x_MainLightShadowParams.y;
    u_xlatb0 = (x_2032 == 1.0f);
    let x_2034 : bool = u_xlatb0;
    if (x_2034) {
      let x_2037 : vec4<f32> = u_xlat2;
      let x_2040 : vec4<f32> = x_246.x_MainLightShadowOffset0;
      u_xlat8 = (vec4<f32>(x_2037.x, x_2037.y, x_2037.x, x_2037.y) + x_2040);
      let x_2043 : vec4<f32> = u_xlat8;
      let x_2044 : vec2<f32> = vec2<f32>(x_2043.x, x_2043.y);
      let x_2046 : f32 = u_xlat2.z;
      txVec30 = vec3<f32>(x_2044.x, x_2044.y, x_2046);
      let x_2053 : vec3<f32> = txVec30;
      let x_2055 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_LinearClampCompare, x_2053.xy, x_2053.z);
      u_xlat9.x = x_2055;
      let x_2058 : vec4<f32> = u_xlat8;
      let x_2059 : vec2<f32> = vec2<f32>(x_2058.z, x_2058.w);
      let x_2061 : f32 = u_xlat2.z;
      txVec31 = vec3<f32>(x_2059.x, x_2059.y, x_2061);
      let x_2068 : vec3<f32> = txVec31;
      let x_2070 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_LinearClampCompare, x_2068.xy, x_2068.z);
      u_xlat9.y = x_2070;
      let x_2072 : vec4<f32> = u_xlat2;
      let x_2075 : vec4<f32> = x_246.x_MainLightShadowOffset1;
      u_xlat8 = (vec4<f32>(x_2072.x, x_2072.y, x_2072.x, x_2072.y) + x_2075);
      let x_2078 : vec4<f32> = u_xlat8;
      let x_2079 : vec2<f32> = vec2<f32>(x_2078.x, x_2078.y);
      let x_2081 : f32 = u_xlat2.z;
      txVec32 = vec3<f32>(x_2079.x, x_2079.y, x_2081);
      let x_2088 : vec3<f32> = txVec32;
      let x_2090 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_LinearClampCompare, x_2088.xy, x_2088.z);
      u_xlat9.z = x_2090;
      let x_2093 : vec4<f32> = u_xlat8;
      let x_2094 : vec2<f32> = vec2<f32>(x_2093.z, x_2093.w);
      let x_2096 : f32 = u_xlat2.z;
      txVec33 = vec3<f32>(x_2094.x, x_2094.y, x_2096);
      let x_2103 : vec3<f32> = txVec33;
      let x_2105 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_LinearClampCompare, x_2103.xy, x_2103.z);
      u_xlat9.w = x_2105;
      let x_2107 : vec4<f32> = u_xlat9;
      u_xlat0.x = dot(x_2107, vec4<f32>(0.25f, 0.25f, 0.25f, 0.25f));
    } else {
      let x_2113 : f32 = x_246.x_MainLightShadowParams.y;
      u_xlatb59 = (x_2113 == 2.0f);
      let x_2115 : bool = u_xlatb59;
      if (x_2115) {
        let x_2119 : vec4<f32> = u_xlat2;
        let x_2122 : vec4<f32> = x_246.x_MainLightShadowmapSize;
        u_xlat59 = ((vec2<f32>(x_2119.x, x_2119.y) * vec2<f32>(x_2122.z, x_2122.w)) + vec2<f32>(0.5f, 0.5f));
        let x_2126 : vec2<f32> = u_xlat59;
        u_xlat59 = floor(x_2126);
        let x_2128 : vec4<f32> = u_xlat2;
        let x_2131 : vec4<f32> = x_246.x_MainLightShadowmapSize;
        let x_2134 : vec2<f32> = u_xlat59;
        let x_2136 : vec2<f32> = ((vec2<f32>(x_2128.x, x_2128.y) * vec2<f32>(x_2131.z, x_2131.w)) + -(x_2134));
        let x_2137 : vec4<f32> = u_xlat8;
        u_xlat8 = vec4<f32>(x_2136.x, x_2136.y, x_2137.z, x_2137.w);
        let x_2139 : vec4<f32> = u_xlat8;
        u_xlat9 = (vec4<f32>(x_2139.x, x_2139.x, x_2139.y, x_2139.y) + vec4<f32>(0.5f, 1.0f, 0.5f, 1.0f));
        let x_2142 : vec4<f32> = u_xlat9;
        let x_2144 : vec4<f32> = u_xlat9;
        u_xlat10 = (vec4<f32>(x_2142.x, x_2142.x, x_2142.z, x_2142.z) * vec4<f32>(x_2144.x, x_2144.x, x_2144.z, x_2144.z));
        let x_2147 : vec4<f32> = u_xlat10;
        u_xlat60 = (vec2<f32>(x_2147.y, x_2147.w) * vec2<f32>(0.07999999821186065674f, 0.07999999821186065674f));
        let x_2150 : vec4<f32> = u_xlat10;
        let x_2153 : vec4<f32> = u_xlat8;
        let x_2156 : vec2<f32> = ((vec2<f32>(x_2150.x, x_2150.z) * vec2<f32>(0.5f, 0.5f)) + -(vec2<f32>(x_2153.x, x_2153.y)));
        let x_2157 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_2156.x, x_2157.y, x_2156.y, x_2157.w);
        let x_2159 : vec4<f32> = u_xlat8;
        let x_2162 : vec2<f32> = (-(vec2<f32>(x_2159.x, x_2159.y)) + vec2<f32>(1.0f, 1.0f));
        let x_2163 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_2162.x, x_2162.y, x_2163.z, x_2163.w);
        let x_2166 : vec4<f32> = u_xlat8;
        u_xlat62 = min(vec2<f32>(x_2166.x, x_2166.y), vec2<f32>(0.0f, 0.0f));
        let x_2169 : vec2<f32> = u_xlat62;
        let x_2171 : vec2<f32> = u_xlat62;
        let x_2173 : vec4<f32> = u_xlat10;
        u_xlat62 = ((-(x_2169) * x_2171) + vec2<f32>(x_2173.x, x_2173.y));
        let x_2176 : vec4<f32> = u_xlat8;
        let x_2178 : vec2<f32> = max(vec2<f32>(x_2176.x, x_2176.y), vec2<f32>(0.0f, 0.0f));
        let x_2179 : vec4<f32> = u_xlat8;
        u_xlat8 = vec4<f32>(x_2178.x, x_2178.y, x_2179.z, x_2179.w);
        let x_2181 : vec4<f32> = u_xlat8;
        let x_2184 : vec4<f32> = u_xlat8;
        let x_2187 : vec4<f32> = u_xlat9;
        let x_2189 : vec2<f32> = ((-(vec2<f32>(x_2181.x, x_2181.y)) * vec2<f32>(x_2184.x, x_2184.y)) + vec2<f32>(x_2187.y, x_2187.w));
        let x_2190 : vec4<f32> = u_xlat8;
        u_xlat8 = vec4<f32>(x_2189.x, x_2189.y, x_2190.z, x_2190.w);
        let x_2192 : vec2<f32> = u_xlat62;
        u_xlat62 = (x_2192 + vec2<f32>(1.0f, 1.0f));
        let x_2194 : vec4<f32> = u_xlat8;
        let x_2196 : vec2<f32> = (vec2<f32>(x_2194.x, x_2194.y) + vec2<f32>(1.0f, 1.0f));
        let x_2197 : vec4<f32> = u_xlat8;
        u_xlat8 = vec4<f32>(x_2196.x, x_2196.y, x_2197.z, x_2197.w);
        let x_2199 : vec4<f32> = u_xlat9;
        let x_2201 : vec2<f32> = (vec2<f32>(x_2199.x, x_2199.z) * vec2<f32>(0.15999999642372131348f, 0.15999999642372131348f));
        let x_2202 : vec4<f32> = u_xlat11;
        u_xlat11 = vec4<f32>(x_2201.x, x_2201.y, x_2202.z, x_2202.w);
        let x_2204 : vec4<f32> = u_xlat10;
        let x_2206 : vec2<f32> = (vec2<f32>(x_2204.x, x_2204.y) * vec2<f32>(0.15999999642372131348f, 0.15999999642372131348f));
        let x_2207 : vec4<f32> = u_xlat12;
        u_xlat12 = vec4<f32>(x_2206.x, x_2206.y, x_2207.z, x_2207.w);
        let x_2209 : vec2<f32> = u_xlat62;
        let x_2210 : vec2<f32> = (x_2209 * vec2<f32>(0.15999999642372131348f, 0.15999999642372131348f));
        let x_2211 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_2210.x, x_2210.y, x_2211.z, x_2211.w);
        let x_2213 : vec4<f32> = u_xlat8;
        let x_2215 : vec2<f32> = (vec2<f32>(x_2213.x, x_2213.y) * vec2<f32>(0.15999999642372131348f, 0.15999999642372131348f));
        let x_2216 : vec4<f32> = u_xlat13;
        u_xlat13 = vec4<f32>(x_2215.x, x_2215.y, x_2216.z, x_2216.w);
        let x_2218 : vec4<f32> = u_xlat9;
        let x_2220 : vec2<f32> = (vec2<f32>(x_2218.y, x_2218.w) * vec2<f32>(0.15999999642372131348f, 0.15999999642372131348f));
        let x_2221 : vec4<f32> = u_xlat8;
        u_xlat8 = vec4<f32>(x_2220.x, x_2220.y, x_2221.z, x_2221.w);
        let x_2224 : f32 = u_xlat10.x;
        u_xlat11.z = x_2224;
        let x_2227 : f32 = u_xlat8.x;
        u_xlat11.w = x_2227;
        let x_2230 : f32 = u_xlat13.x;
        u_xlat12.z = x_2230;
        let x_2233 : f32 = u_xlat60.x;
        u_xlat12.w = x_2233;
        let x_2235 : vec4<f32> = u_xlat11;
        let x_2237 : vec4<f32> = u_xlat12;
        u_xlat9 = (vec4<f32>(x_2235.z, x_2235.w, x_2235.x, x_2235.z) + vec4<f32>(x_2237.z, x_2237.w, x_2237.x, x_2237.z));
        let x_2241 : f32 = u_xlat11.y;
        u_xlat10.z = x_2241;
        let x_2244 : f32 = u_xlat8.y;
        u_xlat10.w = x_2244;
        let x_2247 : f32 = u_xlat12.y;
        u_xlat13.z = x_2247;
        let x_2250 : f32 = u_xlat60.y;
        u_xlat13.w = x_2250;
        let x_2252 : vec4<f32> = u_xlat10;
        let x_2254 : vec4<f32> = u_xlat13;
        let x_2256 : vec3<f32> = (vec3<f32>(x_2252.z, x_2252.y, x_2252.w) + vec3<f32>(x_2254.z, x_2254.y, x_2254.w));
        let x_2257 : vec4<f32> = u_xlat8;
        u_xlat8 = vec4<f32>(x_2256.x, x_2256.y, x_2256.z, x_2257.w);
        let x_2259 : vec4<f32> = u_xlat12;
        let x_2261 : vec4<f32> = u_xlat9;
        let x_2263 : vec3<f32> = (vec3<f32>(x_2259.x, x_2259.z, x_2259.w) / vec3<f32>(x_2261.z, x_2261.w, x_2261.y));
        let x_2264 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_2263.x, x_2263.y, x_2263.z, x_2264.w);
        let x_2266 : vec4<f32> = u_xlat10;
        let x_2268 : vec3<f32> = (vec3<f32>(x_2266.x, x_2266.y, x_2266.z) + vec3<f32>(-2.5f, -0.5f, 1.5f));
        let x_2269 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_2268.x, x_2268.y, x_2268.z, x_2269.w);
        let x_2271 : vec4<f32> = u_xlat13;
        let x_2273 : vec4<f32> = u_xlat8;
        let x_2275 : vec3<f32> = (vec3<f32>(x_2271.z, x_2271.y, x_2271.w) / vec3<f32>(x_2273.x, x_2273.y, x_2273.z));
        let x_2276 : vec4<f32> = u_xlat11;
        u_xlat11 = vec4<f32>(x_2275.x, x_2275.y, x_2275.z, x_2276.w);
        let x_2278 : vec4<f32> = u_xlat11;
        let x_2280 : vec3<f32> = (vec3<f32>(x_2278.x, x_2278.y, x_2278.z) + vec3<f32>(-2.5f, -0.5f, 1.5f));
        let x_2281 : vec4<f32> = u_xlat11;
        u_xlat11 = vec4<f32>(x_2280.x, x_2280.y, x_2280.z, x_2281.w);
        let x_2283 : vec4<f32> = u_xlat10;
        let x_2286 : vec4<f32> = x_246.x_MainLightShadowmapSize;
        let x_2288 : vec3<f32> = (vec3<f32>(x_2283.y, x_2283.x, x_2283.z) * vec3<f32>(x_2286.x, x_2286.x, x_2286.x));
        let x_2289 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_2288.x, x_2288.y, x_2288.z, x_2289.w);
        let x_2291 : vec4<f32> = u_xlat11;
        let x_2294 : vec4<f32> = x_246.x_MainLightShadowmapSize;
        let x_2296 : vec3<f32> = (vec3<f32>(x_2291.x, x_2291.y, x_2291.z) * vec3<f32>(x_2294.y, x_2294.y, x_2294.y));
        let x_2297 : vec4<f32> = u_xlat11;
        u_xlat11 = vec4<f32>(x_2296.x, x_2296.y, x_2296.z, x_2297.w);
        let x_2300 : f32 = u_xlat11.x;
        u_xlat10.w = x_2300;
        let x_2302 : vec2<f32> = u_xlat59;
        let x_2305 : vec4<f32> = x_246.x_MainLightShadowmapSize;
        let x_2308 : vec4<f32> = u_xlat10;
        u_xlat12 = ((vec4<f32>(x_2302.x, x_2302.y, x_2302.x, x_2302.y) * vec4<f32>(x_2305.x, x_2305.y, x_2305.x, x_2305.y)) + vec4<f32>(x_2308.y, x_2308.w, x_2308.x, x_2308.w));
        let x_2311 : vec2<f32> = u_xlat59;
        let x_2313 : vec4<f32> = x_246.x_MainLightShadowmapSize;
        let x_2316 : vec4<f32> = u_xlat10;
        let x_2318 : vec2<f32> = ((x_2311 * vec2<f32>(x_2313.x, x_2313.y)) + vec2<f32>(x_2316.z, x_2316.w));
        let x_2319 : vec4<f32> = u_xlat13;
        u_xlat13 = vec4<f32>(x_2318.x, x_2318.y, x_2319.z, x_2319.w);
        let x_2322 : f32 = u_xlat10.y;
        u_xlat11.w = x_2322;
        let x_2324 : vec4<f32> = u_xlat11;
        let x_2325 : vec2<f32> = vec2<f32>(x_2324.y, x_2324.z);
        let x_2326 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_2326.x, x_2325.x, x_2326.z, x_2325.y);
        let x_2328 : vec2<f32> = u_xlat59;
        let x_2331 : vec4<f32> = x_246.x_MainLightShadowmapSize;
        let x_2334 : vec4<f32> = u_xlat10;
        u_xlat14 = ((vec4<f32>(x_2328.x, x_2328.y, x_2328.x, x_2328.y) * vec4<f32>(x_2331.x, x_2331.y, x_2331.x, x_2331.y)) + vec4<f32>(x_2334.x, x_2334.y, x_2334.z, x_2334.y));
        let x_2337 : vec2<f32> = u_xlat59;
        let x_2340 : vec4<f32> = x_246.x_MainLightShadowmapSize;
        let x_2343 : vec4<f32> = u_xlat11;
        u_xlat11 = ((vec4<f32>(x_2337.x, x_2337.y, x_2337.x, x_2337.y) * vec4<f32>(x_2340.x, x_2340.y, x_2340.x, x_2340.y)) + vec4<f32>(x_2343.w, x_2343.y, x_2343.w, x_2343.z));
        let x_2346 : vec2<f32> = u_xlat59;
        let x_2349 : vec4<f32> = x_246.x_MainLightShadowmapSize;
        let x_2352 : vec4<f32> = u_xlat10;
        u_xlat10 = ((vec4<f32>(x_2346.x, x_2346.y, x_2346.x, x_2346.y) * vec4<f32>(x_2349.x, x_2349.y, x_2349.x, x_2349.y)) + vec4<f32>(x_2352.x, x_2352.w, x_2352.z, x_2352.w));
        let x_2355 : vec4<f32> = u_xlat8;
        let x_2357 : vec4<f32> = u_xlat9;
        u_xlat15 = (vec4<f32>(x_2355.x, x_2355.x, x_2355.x, x_2355.y) * vec4<f32>(x_2357.z, x_2357.w, x_2357.y, x_2357.z));
        let x_2360 : vec4<f32> = u_xlat8;
        let x_2362 : vec4<f32> = u_xlat9;
        u_xlat16 = (vec4<f32>(x_2360.y, x_2360.y, x_2360.z, x_2360.z) * x_2362);
        let x_2365 : f32 = u_xlat8.z;
        let x_2367 : f32 = u_xlat9.y;
        u_xlat59.x = (x_2365 * x_2367);
        let x_2371 : vec4<f32> = u_xlat12;
        let x_2372 : vec2<f32> = vec2<f32>(x_2371.x, x_2371.y);
        let x_2374 : f32 = u_xlat2.z;
        txVec34 = vec3<f32>(x_2372.x, x_2372.y, x_2374);
        let x_2382 : vec3<f32> = txVec34;
        let x_2384 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_LinearClampCompare, x_2382.xy, x_2382.z);
        u_xlat85 = x_2384;
        let x_2386 : vec4<f32> = u_xlat12;
        let x_2387 : vec2<f32> = vec2<f32>(x_2386.z, x_2386.w);
        let x_2389 : f32 = u_xlat2.z;
        txVec35 = vec3<f32>(x_2387.x, x_2387.y, x_2389);
        let x_2396 : vec3<f32> = txVec35;
        let x_2398 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_LinearClampCompare, x_2396.xy, x_2396.z);
        u_xlat8.x = x_2398;
        let x_2401 : f32 = u_xlat8.x;
        let x_2403 : f32 = u_xlat15.y;
        u_xlat8.x = (x_2401 * x_2403);
        let x_2407 : f32 = u_xlat15.x;
        let x_2408 : f32 = u_xlat85;
        let x_2411 : f32 = u_xlat8.x;
        u_xlat85 = ((x_2407 * x_2408) + x_2411);
        let x_2414 : vec4<f32> = u_xlat13;
        let x_2415 : vec2<f32> = vec2<f32>(x_2414.x, x_2414.y);
        let x_2417 : f32 = u_xlat2.z;
        txVec36 = vec3<f32>(x_2415.x, x_2415.y, x_2417);
        let x_2424 : vec3<f32> = txVec36;
        let x_2426 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_LinearClampCompare, x_2424.xy, x_2424.z);
        u_xlat8.x = x_2426;
        let x_2429 : f32 = u_xlat15.z;
        let x_2431 : f32 = u_xlat8.x;
        let x_2433 : f32 = u_xlat85;
        u_xlat85 = ((x_2429 * x_2431) + x_2433);
        let x_2436 : vec4<f32> = u_xlat11;
        let x_2437 : vec2<f32> = vec2<f32>(x_2436.x, x_2436.y);
        let x_2439 : f32 = u_xlat2.z;
        txVec37 = vec3<f32>(x_2437.x, x_2437.y, x_2439);
        let x_2446 : vec3<f32> = txVec37;
        let x_2448 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_LinearClampCompare, x_2446.xy, x_2446.z);
        u_xlat8.x = x_2448;
        let x_2451 : f32 = u_xlat15.w;
        let x_2453 : f32 = u_xlat8.x;
        let x_2455 : f32 = u_xlat85;
        u_xlat85 = ((x_2451 * x_2453) + x_2455);
        let x_2458 : vec4<f32> = u_xlat14;
        let x_2459 : vec2<f32> = vec2<f32>(x_2458.x, x_2458.y);
        let x_2461 : f32 = u_xlat2.z;
        txVec38 = vec3<f32>(x_2459.x, x_2459.y, x_2461);
        let x_2468 : vec3<f32> = txVec38;
        let x_2470 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_LinearClampCompare, x_2468.xy, x_2468.z);
        u_xlat8.x = x_2470;
        let x_2473 : f32 = u_xlat16.x;
        let x_2475 : f32 = u_xlat8.x;
        let x_2477 : f32 = u_xlat85;
        u_xlat85 = ((x_2473 * x_2475) + x_2477);
        let x_2480 : vec4<f32> = u_xlat14;
        let x_2481 : vec2<f32> = vec2<f32>(x_2480.z, x_2480.w);
        let x_2483 : f32 = u_xlat2.z;
        txVec39 = vec3<f32>(x_2481.x, x_2481.y, x_2483);
        let x_2490 : vec3<f32> = txVec39;
        let x_2492 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_LinearClampCompare, x_2490.xy, x_2490.z);
        u_xlat8.x = x_2492;
        let x_2495 : f32 = u_xlat16.y;
        let x_2497 : f32 = u_xlat8.x;
        let x_2499 : f32 = u_xlat85;
        u_xlat85 = ((x_2495 * x_2497) + x_2499);
        let x_2502 : vec4<f32> = u_xlat11;
        let x_2503 : vec2<f32> = vec2<f32>(x_2502.z, x_2502.w);
        let x_2505 : f32 = u_xlat2.z;
        txVec40 = vec3<f32>(x_2503.x, x_2503.y, x_2505);
        let x_2512 : vec3<f32> = txVec40;
        let x_2514 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_LinearClampCompare, x_2512.xy, x_2512.z);
        u_xlat8.x = x_2514;
        let x_2517 : f32 = u_xlat16.z;
        let x_2519 : f32 = u_xlat8.x;
        let x_2521 : f32 = u_xlat85;
        u_xlat85 = ((x_2517 * x_2519) + x_2521);
        let x_2524 : vec4<f32> = u_xlat10;
        let x_2525 : vec2<f32> = vec2<f32>(x_2524.x, x_2524.y);
        let x_2527 : f32 = u_xlat2.z;
        txVec41 = vec3<f32>(x_2525.x, x_2525.y, x_2527);
        let x_2534 : vec3<f32> = txVec41;
        let x_2536 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_LinearClampCompare, x_2534.xy, x_2534.z);
        u_xlat8.x = x_2536;
        let x_2539 : f32 = u_xlat16.w;
        let x_2541 : f32 = u_xlat8.x;
        let x_2543 : f32 = u_xlat85;
        u_xlat85 = ((x_2539 * x_2541) + x_2543);
        let x_2546 : vec4<f32> = u_xlat10;
        let x_2547 : vec2<f32> = vec2<f32>(x_2546.z, x_2546.w);
        let x_2549 : f32 = u_xlat2.z;
        txVec42 = vec3<f32>(x_2547.x, x_2547.y, x_2549);
        let x_2556 : vec3<f32> = txVec42;
        let x_2558 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_LinearClampCompare, x_2556.xy, x_2556.z);
        u_xlat8.x = x_2558;
        let x_2561 : f32 = u_xlat59.x;
        let x_2563 : f32 = u_xlat8.x;
        let x_2565 : f32 = u_xlat85;
        u_xlat0.x = ((x_2561 * x_2563) + x_2565);
      } else {
        let x_2569 : vec4<f32> = u_xlat2;
        let x_2572 : vec4<f32> = x_246.x_MainLightShadowmapSize;
        u_xlat59 = ((vec2<f32>(x_2569.x, x_2569.y) * vec2<f32>(x_2572.z, x_2572.w)) + vec2<f32>(0.5f, 0.5f));
        let x_2576 : vec2<f32> = u_xlat59;
        u_xlat59 = floor(x_2576);
        let x_2578 : vec4<f32> = u_xlat2;
        let x_2581 : vec4<f32> = x_246.x_MainLightShadowmapSize;
        let x_2584 : vec2<f32> = u_xlat59;
        let x_2586 : vec2<f32> = ((vec2<f32>(x_2578.x, x_2578.y) * vec2<f32>(x_2581.z, x_2581.w)) + -(x_2584));
        let x_2587 : vec4<f32> = u_xlat8;
        u_xlat8 = vec4<f32>(x_2586.x, x_2586.y, x_2587.z, x_2587.w);
        let x_2589 : vec4<f32> = u_xlat8;
        u_xlat9 = (vec4<f32>(x_2589.x, x_2589.x, x_2589.y, x_2589.y) + vec4<f32>(0.5f, 1.0f, 0.5f, 1.0f));
        let x_2592 : vec4<f32> = u_xlat9;
        let x_2594 : vec4<f32> = u_xlat9;
        u_xlat10 = (vec4<f32>(x_2592.x, x_2592.x, x_2592.z, x_2592.z) * vec4<f32>(x_2594.x, x_2594.x, x_2594.z, x_2594.z));
        let x_2597 : vec4<f32> = u_xlat10;
        let x_2599 : vec2<f32> = (vec2<f32>(x_2597.y, x_2597.w) * vec2<f32>(0.04081600159406661987f, 0.04081600159406661987f));
        let x_2600 : vec4<f32> = u_xlat11;
        u_xlat11 = vec4<f32>(x_2600.x, x_2599.x, x_2600.z, x_2599.y);
        let x_2602 : vec4<f32> = u_xlat10;
        let x_2605 : vec4<f32> = u_xlat8;
        u_xlat60 = ((vec2<f32>(x_2602.x, x_2602.z) * vec2<f32>(0.5f, 0.5f)) + -(vec2<f32>(x_2605.x, x_2605.y)));
        let x_2609 : vec4<f32> = u_xlat8;
        let x_2612 : vec2<f32> = (-(vec2<f32>(x_2609.x, x_2609.y)) + vec2<f32>(1.0f, 1.0f));
        let x_2613 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_2612.x, x_2613.y, x_2612.y, x_2613.w);
        let x_2615 : vec4<f32> = u_xlat8;
        let x_2617 : vec2<f32> = min(vec2<f32>(x_2615.x, x_2615.y), vec2<f32>(0.0f, 0.0f));
        let x_2618 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_2617.x, x_2617.y, x_2618.z, x_2618.w);
        let x_2620 : vec4<f32> = u_xlat10;
        let x_2623 : vec4<f32> = u_xlat10;
        let x_2626 : vec4<f32> = u_xlat9;
        let x_2628 : vec2<f32> = ((-(vec2<f32>(x_2620.x, x_2620.y)) * vec2<f32>(x_2623.x, x_2623.y)) + vec2<f32>(x_2626.x, x_2626.z));
        let x_2629 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_2628.x, x_2629.y, x_2628.y, x_2629.w);
        let x_2631 : vec4<f32> = u_xlat8;
        let x_2633 : vec2<f32> = max(vec2<f32>(x_2631.x, x_2631.y), vec2<f32>(0.0f, 0.0f));
        let x_2634 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_2633.x, x_2633.y, x_2634.z, x_2634.w);
        let x_2636 : vec4<f32> = u_xlat10;
        let x_2639 : vec4<f32> = u_xlat10;
        let x_2642 : vec4<f32> = u_xlat9;
        let x_2644 : vec2<f32> = ((-(vec2<f32>(x_2636.x, x_2636.y)) * vec2<f32>(x_2639.x, x_2639.y)) + vec2<f32>(x_2642.y, x_2642.w));
        let x_2645 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_2645.x, x_2644.x, x_2645.z, x_2644.y);
        let x_2647 : vec4<f32> = u_xlat9;
        u_xlat9 = (x_2647 + vec4<f32>(2.0f, 2.0f, 2.0f, 2.0f));
        let x_2650 : f32 = u_xlat9.y;
        u_xlat10.z = (x_2650 * 0.08163200318813323975f);
        let x_2653 : vec2<f32> = u_xlat60;
        let x_2655 : vec2<f32> = (vec2<f32>(x_2653.y, x_2653.x) * vec2<f32>(0.08163200318813323975f, 0.08163200318813323975f));
        let x_2656 : vec4<f32> = u_xlat12;
        u_xlat12 = vec4<f32>(x_2655.x, x_2655.y, x_2656.z, x_2656.w);
        let x_2658 : vec4<f32> = u_xlat9;
        u_xlat60 = (vec2<f32>(x_2658.x, x_2658.z) * vec2<f32>(0.08163200318813323975f, 0.08163200318813323975f));
        let x_2662 : f32 = u_xlat9.w;
        u_xlat12.z = (x_2662 * 0.08163200318813323975f);
        let x_2666 : f32 = u_xlat12.y;
        u_xlat10.x = x_2666;
        let x_2668 : vec4<f32> = u_xlat8;
        let x_2671 : vec2<f32> = ((vec2<f32>(x_2668.x, x_2668.x) * vec2<f32>(-0.08163200318813323975f, 0.08163200318813323975f)) + vec2<f32>(0.16326400637626647949f, 0.08163200318813323975f));
        let x_2672 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_2672.x, x_2671.x, x_2672.z, x_2671.y);
        let x_2674 : vec4<f32> = u_xlat8;
        let x_2677 : vec2<f32> = ((vec2<f32>(x_2674.x, x_2674.x) * vec2<f32>(-0.08163200318813323975f, 0.08163200318813323975f)) + vec2<f32>(0.08163200318813323975f, 0.16326400637626647949f));
        let x_2678 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_2677.x, x_2678.y, x_2677.y, x_2678.w);
        let x_2681 : f32 = u_xlat60.x;
        u_xlat9.y = x_2681;
        let x_2684 : f32 = u_xlat11.y;
        u_xlat9.w = x_2684;
        let x_2686 : vec4<f32> = u_xlat9;
        let x_2687 : vec4<f32> = u_xlat10;
        u_xlat10 = (x_2686 + x_2687);
        let x_2689 : vec4<f32> = u_xlat8;
        let x_2692 : vec2<f32> = ((vec2<f32>(x_2689.y, x_2689.y) * vec2<f32>(-0.08163200318813323975f, 0.08163200318813323975f)) + vec2<f32>(0.16326400637626647949f, 0.08163200318813323975f));
        let x_2693 : vec4<f32> = u_xlat12;
        u_xlat12 = vec4<f32>(x_2693.x, x_2692.x, x_2693.z, x_2692.y);
        let x_2695 : vec4<f32> = u_xlat8;
        let x_2698 : vec2<f32> = ((vec2<f32>(x_2695.y, x_2695.y) * vec2<f32>(-0.08163200318813323975f, 0.08163200318813323975f)) + vec2<f32>(0.08163200318813323975f, 0.16326400637626647949f));
        let x_2699 : vec4<f32> = u_xlat11;
        u_xlat11 = vec4<f32>(x_2698.x, x_2699.y, x_2698.y, x_2699.w);
        let x_2702 : f32 = u_xlat60.y;
        u_xlat11.y = x_2702;
        let x_2704 : vec4<f32> = u_xlat11;
        let x_2705 : vec4<f32> = u_xlat12;
        u_xlat8 = (x_2704 + x_2705);
        let x_2707 : vec4<f32> = u_xlat9;
        let x_2708 : vec4<f32> = u_xlat10;
        u_xlat9 = (x_2707 / x_2708);
        let x_2710 : vec4<f32> = u_xlat9;
        u_xlat9 = (x_2710 + vec4<f32>(-3.5f, -1.5f, 0.5f, 2.5f));
        let x_2712 : vec4<f32> = u_xlat11;
        let x_2713 : vec4<f32> = u_xlat8;
        u_xlat11 = (x_2712 / x_2713);
        let x_2715 : vec4<f32> = u_xlat11;
        u_xlat11 = (x_2715 + vec4<f32>(-3.5f, -1.5f, 0.5f, 2.5f));
        let x_2717 : vec4<f32> = u_xlat9;
        let x_2720 : vec4<f32> = x_246.x_MainLightShadowmapSize;
        u_xlat9 = (vec4<f32>(x_2717.w, x_2717.x, x_2717.y, x_2717.z) * vec4<f32>(x_2720.x, x_2720.x, x_2720.x, x_2720.x));
        let x_2723 : vec4<f32> = u_xlat11;
        let x_2726 : vec4<f32> = x_246.x_MainLightShadowmapSize;
        u_xlat11 = (vec4<f32>(x_2723.x, x_2723.w, x_2723.y, x_2723.z) * vec4<f32>(x_2726.y, x_2726.y, x_2726.y, x_2726.y));
        let x_2729 : vec4<f32> = u_xlat9;
        let x_2730 : vec3<f32> = vec3<f32>(x_2729.y, x_2729.z, x_2729.w);
        let x_2731 : vec4<f32> = u_xlat12;
        u_xlat12 = vec4<f32>(x_2730.x, x_2731.y, x_2730.y, x_2730.z);
        let x_2734 : f32 = u_xlat11.x;
        u_xlat12.y = x_2734;
        let x_2736 : vec2<f32> = u_xlat59;
        let x_2739 : vec4<f32> = x_246.x_MainLightShadowmapSize;
        let x_2742 : vec4<f32> = u_xlat12;
        u_xlat13 = ((vec4<f32>(x_2736.x, x_2736.y, x_2736.x, x_2736.y) * vec4<f32>(x_2739.x, x_2739.y, x_2739.x, x_2739.y)) + vec4<f32>(x_2742.x, x_2742.y, x_2742.z, x_2742.y));
        let x_2745 : vec2<f32> = u_xlat59;
        let x_2747 : vec4<f32> = x_246.x_MainLightShadowmapSize;
        let x_2750 : vec4<f32> = u_xlat12;
        let x_2752 : vec2<f32> = ((x_2745 * vec2<f32>(x_2747.x, x_2747.y)) + vec2<f32>(x_2750.w, x_2750.y));
        let x_2753 : vec4<f32> = u_xlat14;
        u_xlat14 = vec4<f32>(x_2752.x, x_2752.y, x_2753.z, x_2753.w);
        let x_2756 : f32 = u_xlat12.y;
        u_xlat9.y = x_2756;
        let x_2759 : f32 = u_xlat11.z;
        u_xlat12.y = x_2759;
        let x_2761 : vec2<f32> = u_xlat59;
        let x_2764 : vec4<f32> = x_246.x_MainLightShadowmapSize;
        let x_2767 : vec4<f32> = u_xlat12;
        u_xlat15 = ((vec4<f32>(x_2761.x, x_2761.y, x_2761.x, x_2761.y) * vec4<f32>(x_2764.x, x_2764.y, x_2764.x, x_2764.y)) + vec4<f32>(x_2767.x, x_2767.y, x_2767.z, x_2767.y));
        let x_2770 : vec2<f32> = u_xlat59;
        let x_2772 : vec4<f32> = x_246.x_MainLightShadowmapSize;
        let x_2775 : vec4<f32> = u_xlat12;
        u_xlat66 = ((x_2770 * vec2<f32>(x_2772.x, x_2772.y)) + vec2<f32>(x_2775.w, x_2775.y));
        let x_2779 : f32 = u_xlat12.y;
        u_xlat9.z = x_2779;
        let x_2781 : vec2<f32> = u_xlat59;
        let x_2784 : vec4<f32> = x_246.x_MainLightShadowmapSize;
        let x_2787 : vec4<f32> = u_xlat9;
        u_xlat16 = ((vec4<f32>(x_2781.x, x_2781.y, x_2781.x, x_2781.y) * vec4<f32>(x_2784.x, x_2784.y, x_2784.x, x_2784.y)) + vec4<f32>(x_2787.x, x_2787.y, x_2787.x, x_2787.z));
        let x_2791 : f32 = u_xlat11.w;
        u_xlat12.y = x_2791;
        let x_2793 : vec2<f32> = u_xlat59;
        let x_2796 : vec4<f32> = x_246.x_MainLightShadowmapSize;
        let x_2799 : vec4<f32> = u_xlat12;
        u_xlat17 = ((vec4<f32>(x_2793.x, x_2793.y, x_2793.x, x_2793.y) * vec4<f32>(x_2796.x, x_2796.y, x_2796.x, x_2796.y)) + vec4<f32>(x_2799.x, x_2799.y, x_2799.z, x_2799.y));
        let x_2803 : vec2<f32> = u_xlat59;
        let x_2805 : vec4<f32> = x_246.x_MainLightShadowmapSize;
        let x_2808 : vec4<f32> = u_xlat12;
        u_xlat35 = ((x_2803 * vec2<f32>(x_2805.x, x_2805.y)) + vec2<f32>(x_2808.w, x_2808.y));
        let x_2812 : f32 = u_xlat12.y;
        u_xlat9.w = x_2812;
        let x_2814 : vec2<f32> = u_xlat59;
        let x_2816 : vec4<f32> = x_246.x_MainLightShadowmapSize;
        let x_2819 : vec4<f32> = u_xlat9;
        let x_2821 : vec2<f32> = ((x_2814 * vec2<f32>(x_2816.x, x_2816.y)) + vec2<f32>(x_2819.x, x_2819.w));
        let x_2822 : vec4<f32> = u_xlat18;
        u_xlat18 = vec4<f32>(x_2821.x, x_2821.y, x_2822.z, x_2822.w);
        let x_2824 : vec4<f32> = u_xlat12;
        let x_2825 : vec3<f32> = vec3<f32>(x_2824.x, x_2824.z, x_2824.w);
        let x_2826 : vec4<f32> = u_xlat11;
        u_xlat11 = vec4<f32>(x_2825.x, x_2826.y, x_2825.y, x_2825.z);
        let x_2828 : vec2<f32> = u_xlat59;
        let x_2831 : vec4<f32> = x_246.x_MainLightShadowmapSize;
        let x_2834 : vec4<f32> = u_xlat11;
        u_xlat12 = ((vec4<f32>(x_2828.x, x_2828.y, x_2828.x, x_2828.y) * vec4<f32>(x_2831.x, x_2831.y, x_2831.x, x_2831.y)) + vec4<f32>(x_2834.x, x_2834.y, x_2834.z, x_2834.y));
        let x_2838 : vec2<f32> = u_xlat59;
        let x_2840 : vec4<f32> = x_246.x_MainLightShadowmapSize;
        let x_2843 : vec4<f32> = u_xlat11;
        u_xlat63 = ((x_2838 * vec2<f32>(x_2840.x, x_2840.y)) + vec2<f32>(x_2843.w, x_2843.y));
        let x_2847 : f32 = u_xlat9.x;
        u_xlat11.x = x_2847;
        let x_2849 : vec2<f32> = u_xlat59;
        let x_2851 : vec4<f32> = x_246.x_MainLightShadowmapSize;
        let x_2854 : vec4<f32> = u_xlat11;
        u_xlat59 = ((x_2849 * vec2<f32>(x_2851.x, x_2851.y)) + vec2<f32>(x_2854.x, x_2854.y));
        let x_2857 : vec4<f32> = u_xlat8;
        let x_2859 : vec4<f32> = u_xlat10;
        u_xlat19 = (vec4<f32>(x_2857.x, x_2857.x, x_2857.x, x_2857.x) * x_2859);
        let x_2862 : vec4<f32> = u_xlat8;
        let x_2864 : vec4<f32> = u_xlat10;
        u_xlat20 = (vec4<f32>(x_2862.y, x_2862.y, x_2862.y, x_2862.y) * x_2864);
        let x_2867 : vec4<f32> = u_xlat8;
        let x_2869 : vec4<f32> = u_xlat10;
        u_xlat21 = (vec4<f32>(x_2867.z, x_2867.z, x_2867.z, x_2867.z) * x_2869);
        let x_2871 : vec4<f32> = u_xlat8;
        let x_2873 : vec4<f32> = u_xlat10;
        u_xlat8 = (vec4<f32>(x_2871.w, x_2871.w, x_2871.w, x_2871.w) * x_2873);
        let x_2876 : vec4<f32> = u_xlat13;
        let x_2877 : vec2<f32> = vec2<f32>(x_2876.x, x_2876.y);
        let x_2879 : f32 = u_xlat2.z;
        txVec43 = vec3<f32>(x_2877.x, x_2877.y, x_2879);
        let x_2886 : vec3<f32> = txVec43;
        let x_2888 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_LinearClampCompare, x_2886.xy, x_2886.z);
        u_xlat9.x = x_2888;
        let x_2891 : vec4<f32> = u_xlat13;
        let x_2892 : vec2<f32> = vec2<f32>(x_2891.z, x_2891.w);
        let x_2894 : f32 = u_xlat2.z;
        txVec44 = vec3<f32>(x_2892.x, x_2892.y, x_2894);
        let x_2902 : vec3<f32> = txVec44;
        let x_2904 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_LinearClampCompare, x_2902.xy, x_2902.z);
        u_xlat87 = x_2904;
        let x_2905 : f32 = u_xlat87;
        let x_2907 : f32 = u_xlat19.y;
        u_xlat87 = (x_2905 * x_2907);
        let x_2910 : f32 = u_xlat19.x;
        let x_2912 : f32 = u_xlat9.x;
        let x_2914 : f32 = u_xlat87;
        u_xlat9.x = ((x_2910 * x_2912) + x_2914);
        let x_2918 : vec4<f32> = u_xlat14;
        let x_2919 : vec2<f32> = vec2<f32>(x_2918.x, x_2918.y);
        let x_2921 : f32 = u_xlat2.z;
        txVec45 = vec3<f32>(x_2919.x, x_2919.y, x_2921);
        let x_2928 : vec3<f32> = txVec45;
        let x_2930 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_LinearClampCompare, x_2928.xy, x_2928.z);
        u_xlat87 = x_2930;
        let x_2932 : f32 = u_xlat19.z;
        let x_2933 : f32 = u_xlat87;
        let x_2936 : f32 = u_xlat9.x;
        u_xlat9.x = ((x_2932 * x_2933) + x_2936);
        let x_2940 : vec4<f32> = u_xlat16;
        let x_2941 : vec2<f32> = vec2<f32>(x_2940.x, x_2940.y);
        let x_2943 : f32 = u_xlat2.z;
        txVec46 = vec3<f32>(x_2941.x, x_2941.y, x_2943);
        let x_2950 : vec3<f32> = txVec46;
        let x_2952 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_LinearClampCompare, x_2950.xy, x_2950.z);
        u_xlat87 = x_2952;
        let x_2954 : f32 = u_xlat19.w;
        let x_2955 : f32 = u_xlat87;
        let x_2958 : f32 = u_xlat9.x;
        u_xlat9.x = ((x_2954 * x_2955) + x_2958);
        let x_2962 : vec4<f32> = u_xlat15;
        let x_2963 : vec2<f32> = vec2<f32>(x_2962.x, x_2962.y);
        let x_2965 : f32 = u_xlat2.z;
        txVec47 = vec3<f32>(x_2963.x, x_2963.y, x_2965);
        let x_2972 : vec3<f32> = txVec47;
        let x_2974 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_LinearClampCompare, x_2972.xy, x_2972.z);
        u_xlat87 = x_2974;
        let x_2976 : f32 = u_xlat20.x;
        let x_2977 : f32 = u_xlat87;
        let x_2980 : f32 = u_xlat9.x;
        u_xlat9.x = ((x_2976 * x_2977) + x_2980);
        let x_2984 : vec4<f32> = u_xlat15;
        let x_2985 : vec2<f32> = vec2<f32>(x_2984.z, x_2984.w);
        let x_2987 : f32 = u_xlat2.z;
        txVec48 = vec3<f32>(x_2985.x, x_2985.y, x_2987);
        let x_2994 : vec3<f32> = txVec48;
        let x_2996 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_LinearClampCompare, x_2994.xy, x_2994.z);
        u_xlat87 = x_2996;
        let x_2998 : f32 = u_xlat20.y;
        let x_2999 : f32 = u_xlat87;
        let x_3002 : f32 = u_xlat9.x;
        u_xlat9.x = ((x_2998 * x_2999) + x_3002);
        let x_3006 : vec2<f32> = u_xlat66;
        let x_3008 : f32 = u_xlat2.z;
        txVec49 = vec3<f32>(x_3006.x, x_3006.y, x_3008);
        let x_3015 : vec3<f32> = txVec49;
        let x_3017 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_LinearClampCompare, x_3015.xy, x_3015.z);
        u_xlat87 = x_3017;
        let x_3019 : f32 = u_xlat20.z;
        let x_3020 : f32 = u_xlat87;
        let x_3023 : f32 = u_xlat9.x;
        u_xlat9.x = ((x_3019 * x_3020) + x_3023);
        let x_3027 : vec4<f32> = u_xlat16;
        let x_3028 : vec2<f32> = vec2<f32>(x_3027.z, x_3027.w);
        let x_3030 : f32 = u_xlat2.z;
        txVec50 = vec3<f32>(x_3028.x, x_3028.y, x_3030);
        let x_3037 : vec3<f32> = txVec50;
        let x_3039 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_LinearClampCompare, x_3037.xy, x_3037.z);
        u_xlat87 = x_3039;
        let x_3041 : f32 = u_xlat20.w;
        let x_3042 : f32 = u_xlat87;
        let x_3045 : f32 = u_xlat9.x;
        u_xlat9.x = ((x_3041 * x_3042) + x_3045);
        let x_3049 : vec4<f32> = u_xlat17;
        let x_3050 : vec2<f32> = vec2<f32>(x_3049.x, x_3049.y);
        let x_3052 : f32 = u_xlat2.z;
        txVec51 = vec3<f32>(x_3050.x, x_3050.y, x_3052);
        let x_3059 : vec3<f32> = txVec51;
        let x_3061 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_LinearClampCompare, x_3059.xy, x_3059.z);
        u_xlat87 = x_3061;
        let x_3063 : f32 = u_xlat21.x;
        let x_3064 : f32 = u_xlat87;
        let x_3067 : f32 = u_xlat9.x;
        u_xlat9.x = ((x_3063 * x_3064) + x_3067);
        let x_3071 : vec4<f32> = u_xlat17;
        let x_3072 : vec2<f32> = vec2<f32>(x_3071.z, x_3071.w);
        let x_3074 : f32 = u_xlat2.z;
        txVec52 = vec3<f32>(x_3072.x, x_3072.y, x_3074);
        let x_3081 : vec3<f32> = txVec52;
        let x_3083 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_LinearClampCompare, x_3081.xy, x_3081.z);
        u_xlat87 = x_3083;
        let x_3085 : f32 = u_xlat21.y;
        let x_3086 : f32 = u_xlat87;
        let x_3089 : f32 = u_xlat9.x;
        u_xlat9.x = ((x_3085 * x_3086) + x_3089);
        let x_3093 : vec2<f32> = u_xlat35;
        let x_3095 : f32 = u_xlat2.z;
        txVec53 = vec3<f32>(x_3093.x, x_3093.y, x_3095);
        let x_3102 : vec3<f32> = txVec53;
        let x_3104 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_LinearClampCompare, x_3102.xy, x_3102.z);
        u_xlat35.x = x_3104;
        let x_3107 : f32 = u_xlat21.z;
        let x_3109 : f32 = u_xlat35.x;
        let x_3112 : f32 = u_xlat9.x;
        u_xlat9.x = ((x_3107 * x_3109) + x_3112);
        let x_3116 : vec4<f32> = u_xlat18;
        let x_3117 : vec2<f32> = vec2<f32>(x_3116.x, x_3116.y);
        let x_3119 : f32 = u_xlat2.z;
        txVec54 = vec3<f32>(x_3117.x, x_3117.y, x_3119);
        let x_3126 : vec3<f32> = txVec54;
        let x_3128 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_LinearClampCompare, x_3126.xy, x_3126.z);
        u_xlat35.x = x_3128;
        let x_3131 : f32 = u_xlat21.w;
        let x_3133 : f32 = u_xlat35.x;
        let x_3136 : f32 = u_xlat9.x;
        u_xlat9.x = ((x_3131 * x_3133) + x_3136);
        let x_3140 : vec4<f32> = u_xlat12;
        let x_3141 : vec2<f32> = vec2<f32>(x_3140.x, x_3140.y);
        let x_3143 : f32 = u_xlat2.z;
        txVec55 = vec3<f32>(x_3141.x, x_3141.y, x_3143);
        let x_3150 : vec3<f32> = txVec55;
        let x_3152 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_LinearClampCompare, x_3150.xy, x_3150.z);
        u_xlat35.x = x_3152;
        let x_3155 : f32 = u_xlat8.x;
        let x_3157 : f32 = u_xlat35.x;
        let x_3160 : f32 = u_xlat9.x;
        u_xlat8.x = ((x_3155 * x_3157) + x_3160);
        let x_3164 : vec4<f32> = u_xlat12;
        let x_3165 : vec2<f32> = vec2<f32>(x_3164.z, x_3164.w);
        let x_3167 : f32 = u_xlat2.z;
        txVec56 = vec3<f32>(x_3165.x, x_3165.y, x_3167);
        let x_3174 : vec3<f32> = txVec56;
        let x_3176 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_LinearClampCompare, x_3174.xy, x_3174.z);
        u_xlat9.x = x_3176;
        let x_3179 : f32 = u_xlat8.y;
        let x_3181 : f32 = u_xlat9.x;
        let x_3184 : f32 = u_xlat8.x;
        u_xlat8.x = ((x_3179 * x_3181) + x_3184);
        let x_3188 : vec2<f32> = u_xlat63;
        let x_3190 : f32 = u_xlat2.z;
        txVec57 = vec3<f32>(x_3188.x, x_3188.y, x_3190);
        let x_3197 : vec3<f32> = txVec57;
        let x_3199 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_LinearClampCompare, x_3197.xy, x_3197.z);
        u_xlat34.x = x_3199;
        let x_3202 : f32 = u_xlat8.z;
        let x_3204 : f32 = u_xlat34.x;
        let x_3207 : f32 = u_xlat8.x;
        u_xlat8.x = ((x_3202 * x_3204) + x_3207);
        let x_3211 : vec2<f32> = u_xlat59;
        let x_3213 : f32 = u_xlat2.z;
        txVec58 = vec3<f32>(x_3211.x, x_3211.y, x_3213);
        let x_3220 : vec3<f32> = txVec58;
        let x_3222 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_LinearClampCompare, x_3220.xy, x_3220.z);
        u_xlat59.x = x_3222;
        let x_3225 : f32 = u_xlat8.w;
        let x_3227 : f32 = u_xlat59.x;
        let x_3230 : f32 = u_xlat8.x;
        u_xlat0.x = ((x_3225 * x_3227) + x_3230);
      }
    }
  } else {
    let x_3235 : vec4<f32> = u_xlat2;
    let x_3236 : vec2<f32> = vec2<f32>(x_3235.x, x_3235.y);
    let x_3238 : f32 = u_xlat2.z;
    txVec59 = vec3<f32>(x_3236.x, x_3236.y, x_3238);
    let x_3245 : vec3<f32> = txVec59;
    let x_3247 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_LinearClampCompare, x_3245.xy, x_3245.z);
    u_xlat0.x = x_3247;
  }
  let x_3250 : f32 = u_xlat0.x;
  let x_3252 : f32 = x_246.x_MainLightShadowParams.x;
  let x_3254 : f32 = u_xlat80;
  u_xlat0.x = ((x_3250 * x_3252) + x_3254);
  let x_3257 : bool = u_xlatb3;
  if (x_3257) {
    x_3258 = 1.0f;
  } else {
    let x_3263 : f32 = u_xlat0.x;
    x_3258 = x_3263;
  }
  let x_3264 : f32 = x_3258;
  u_xlat0.x = x_3264;
  let x_3266 : vec3<f32> = vs_INTERP8;
  let x_3268 : vec3<f32> = x_128.x_WorldSpaceCameraPos;
  let x_3270 : vec3<f32> = (x_3266 + -(x_3268));
  let x_3271 : vec4<f32> = u_xlat2;
  u_xlat2 = vec4<f32>(x_3270.x, x_3270.y, x_3270.z, x_3271.w);
  let x_3273 : vec4<f32> = u_xlat2;
  let x_3275 : vec4<f32> = u_xlat2;
  u_xlat2.x = dot(vec3<f32>(x_3273.x, x_3273.y, x_3273.z), vec3<f32>(x_3275.x, x_3275.y, x_3275.z));
  let x_3281 : f32 = u_xlat2.x;
  let x_3283 : f32 = x_246.x_MainLightShadowParams.z;
  let x_3286 : f32 = x_246.x_MainLightShadowParams.w;
  u_xlat28.x = ((x_3281 * x_3283) + x_3286);
  let x_3290 : f32 = u_xlat28.x;
  u_xlat28.x = clamp(x_3290, 0.0f, 1.0f);
  let x_3295 : f32 = u_xlat0.x;
  u_xlat54 = (-(x_3295) + 1.0f);
  let x_3299 : f32 = u_xlat28.x;
  let x_3300 : f32 = u_xlat54;
  let x_3303 : f32 = u_xlat0.x;
  u_xlat0.x = ((x_3299 * x_3300) + x_3303);
  let x_3306 : vec3<f32> = u_xlat26;
  let x_3308 : vec4<f32> = u_xlat4;
  u_xlat28.x = dot(-(x_3306), vec3<f32>(x_3308.x, x_3308.y, x_3308.z));
  let x_3313 : f32 = u_xlat28.x;
  let x_3315 : f32 = u_xlat28.x;
  u_xlat28.x = (x_3313 + x_3315);
  let x_3318 : vec4<f32> = u_xlat4;
  let x_3320 : vec3<f32> = u_xlat28;
  let x_3324 : vec3<f32> = u_xlat26;
  u_xlat28 = ((vec3<f32>(x_3318.x, x_3318.y, x_3318.z) * -(vec3<f32>(x_3320.x, x_3320.x, x_3320.x))) + -(x_3324));
  let x_3327 : vec4<f32> = u_xlat4;
  let x_3329 : vec3<f32> = u_xlat26;
  u_xlat3.x = dot(vec3<f32>(x_3327.x, x_3327.y, x_3327.z), x_3329);
  let x_3333 : f32 = u_xlat3.x;
  u_xlat3.x = clamp(x_3333, 0.0f, 1.0f);
  let x_3337 : f32 = u_xlat3.x;
  u_xlat3.x = (-(x_3337) + 1.0f);
  let x_3342 : f32 = u_xlat3.x;
  let x_3344 : f32 = u_xlat3.x;
  u_xlat3.x = (x_3342 * x_3344);
  let x_3348 : f32 = u_xlat3.x;
  let x_3350 : f32 = u_xlat3.x;
  u_xlat3.x = (x_3348 * x_3350);
  let x_3353 : f32 = u_xlat81;
  u_xlat59.x = ((-(x_3353) * 0.69999998807907104492f) + 1.70000004768371582031f);
  let x_3360 : f32 = u_xlat81;
  let x_3362 : f32 = u_xlat59.x;
  u_xlat81 = (x_3360 * x_3362);
  let x_3364 : f32 = u_xlat81;
  u_xlat81 = (x_3364 * 6.0f);
  let x_3375 : vec3<f32> = u_xlat28;
  let x_3376 : f32 = u_xlat81;
  let x_3377 : vec4<f32> = textureSampleLevel(unity_SpecCube0, samplerunity_SpecCube0, x_3375, x_3376);
  u_xlat8 = x_3377;
  let x_3379 : f32 = u_xlat8.w;
  u_xlat28.x = (x_3379 + -1.0f);
  let x_3383 : f32 = x_48.unity_SpecCube0_HDR.w;
  let x_3385 : f32 = u_xlat28.x;
  u_xlat28.x = ((x_3383 * x_3385) + 1.0f);
  let x_3390 : f32 = u_xlat28.x;
  u_xlat28.x = max(x_3390, 0.0f);
  let x_3394 : f32 = u_xlat28.x;
  u_xlat28.x = log2(x_3394);
  let x_3398 : f32 = u_xlat28.x;
  let x_3400 : f32 = x_48.unity_SpecCube0_HDR.y;
  u_xlat28.x = (x_3398 * x_3400);
  let x_3404 : f32 = u_xlat28.x;
  u_xlat28.x = exp2(x_3404);
  let x_3408 : f32 = u_xlat28.x;
  let x_3410 : f32 = x_48.unity_SpecCube0_HDR.x;
  u_xlat28.x = (x_3408 * x_3410);
  let x_3413 : vec4<f32> = u_xlat8;
  let x_3415 : vec3<f32> = u_xlat28;
  u_xlat28 = (vec3<f32>(x_3413.x, x_3413.y, x_3413.z) * vec3<f32>(x_3415.x, x_3415.x, x_3415.x));
  let x_3418 : f32 = u_xlat82;
  let x_3420 : f32 = u_xlat82;
  u_xlat59 = ((vec2<f32>(x_3418, x_3418) * vec2<f32>(x_3420, x_3420)) + vec2<f32>(-1.0f, 1.0f));
  let x_3426 : f32 = u_xlat59.y;
  u_xlat81 = (1.0f / x_3426);
  let x_3429 : f32 = u_xlat6.x;
  u_xlat82 = (x_3429 + -0.03999999910593032837f);
  let x_3433 : f32 = u_xlat3.x;
  let x_3434 : f32 = u_xlat82;
  u_xlat3.x = ((x_3433 * x_3434) + 0.03999999910593032837f);
  let x_3440 : f32 = u_xlat3.x;
  let x_3441 : f32 = u_xlat81;
  u_xlat3.x = (x_3440 * x_3441);
  let x_3444 : vec3<f32> = u_xlat28;
  let x_3445 : vec4<f32> = u_xlat3;
  u_xlat28 = (x_3444 * vec3<f32>(x_3445.x, x_3445.x, x_3445.x));
  let x_3448 : vec3<f32> = u_xlat32;
  let x_3449 : vec3<f32> = u_xlat5;
  let x_3451 : vec3<f32> = u_xlat28;
  u_xlat28 = ((x_3448 * x_3449) + x_3451);
  let x_3454 : f32 = u_xlat0.x;
  let x_3456 : f32 = x_48.unity_LightData.z;
  u_xlat0.x = (x_3454 * x_3456);
  let x_3459 : vec4<f32> = u_xlat4;
  let x_3462 : vec4<f32> = x_128.x_MainLightPosition;
  u_xlat3.x = dot(vec3<f32>(x_3459.x, x_3459.y, x_3459.z), vec3<f32>(x_3462.x, x_3462.y, x_3462.z));
  let x_3467 : f32 = u_xlat3.x;
  u_xlat3.x = clamp(x_3467, 0.0f, 1.0f);
  let x_3471 : f32 = u_xlat0.x;
  let x_3473 : f32 = u_xlat3.x;
  u_xlat0.x = (x_3471 * x_3473);
  let x_3476 : vec3<f32> = u_xlat0;
  let x_3479 : vec4<f32> = x_128.x_MainLightColor;
  let x_3481 : vec3<f32> = (vec3<f32>(x_3476.x, x_3476.x, x_3476.x) * vec3<f32>(x_3479.x, x_3479.y, x_3479.z));
  let x_3482 : vec4<f32> = u_xlat6;
  u_xlat6 = vec4<f32>(x_3481.x, x_3481.y, x_3481.z, x_3482.w);
  let x_3484 : vec3<f32> = u_xlat26;
  let x_3486 : vec4<f32> = x_128.x_MainLightPosition;
  let x_3488 : vec3<f32> = (x_3484 + vec3<f32>(x_3486.x, x_3486.y, x_3486.z));
  let x_3489 : vec4<f32> = u_xlat8;
  u_xlat8 = vec4<f32>(x_3488.x, x_3488.y, x_3488.z, x_3489.w);
  let x_3491 : vec4<f32> = u_xlat8;
  let x_3493 : vec4<f32> = u_xlat8;
  u_xlat0.x = dot(vec3<f32>(x_3491.x, x_3491.y, x_3491.z), vec3<f32>(x_3493.x, x_3493.y, x_3493.z));
  let x_3498 : f32 = u_xlat0.x;
  u_xlat0.x = max(x_3498, 1.17549435e-38f);
  let x_3502 : f32 = u_xlat0.x;
  u_xlat0.x = inverseSqrt(x_3502);
  let x_3505 : vec3<f32> = u_xlat0;
  let x_3507 : vec4<f32> = u_xlat8;
  let x_3509 : vec3<f32> = (vec3<f32>(x_3505.x, x_3505.x, x_3505.x) * vec3<f32>(x_3507.x, x_3507.y, x_3507.z));
  let x_3510 : vec4<f32> = u_xlat8;
  u_xlat8 = vec4<f32>(x_3509.x, x_3509.y, x_3509.z, x_3510.w);
  let x_3512 : vec4<f32> = u_xlat4;
  let x_3514 : vec4<f32> = u_xlat8;
  u_xlat0.x = dot(vec3<f32>(x_3512.x, x_3512.y, x_3512.z), vec3<f32>(x_3514.x, x_3514.y, x_3514.z));
  let x_3519 : f32 = u_xlat0.x;
  u_xlat0.x = clamp(x_3519, 0.0f, 1.0f);
  let x_3523 : vec4<f32> = x_128.x_MainLightPosition;
  let x_3525 : vec4<f32> = u_xlat8;
  u_xlat3.x = dot(vec3<f32>(x_3523.x, x_3523.y, x_3523.z), vec3<f32>(x_3525.x, x_3525.y, x_3525.z));
  let x_3530 : f32 = u_xlat3.x;
  u_xlat3.x = clamp(x_3530, 0.0f, 1.0f);
  let x_3534 : f32 = u_xlat0.x;
  let x_3536 : f32 = u_xlat0.x;
  u_xlat0.x = (x_3534 * x_3536);
  let x_3540 : f32 = u_xlat0.x;
  let x_3542 : f32 = u_xlat59.x;
  u_xlat0.x = ((x_3540 * x_3542) + 1.00001001358032226562f);
  let x_3548 : f32 = u_xlat3.x;
  let x_3550 : f32 = u_xlat3.x;
  u_xlat3.x = (x_3548 * x_3550);
  let x_3554 : f32 = u_xlat0.x;
  let x_3556 : f32 = u_xlat0.x;
  u_xlat0.x = (x_3554 * x_3556);
  let x_3560 : f32 = u_xlat3.x;
  u_xlat3.x = max(x_3560, 0.10000000149011611938f);
  let x_3565 : f32 = u_xlat0.x;
  let x_3567 : f32 = u_xlat3.x;
  u_xlat0.x = (x_3565 * x_3567);
  let x_3571 : f32 = u_xlat7.x;
  let x_3573 : f32 = u_xlat0.x;
  u_xlat0.x = (x_3571 * x_3573);
  let x_3576 : f32 = u_xlat83;
  let x_3578 : f32 = u_xlat0.x;
  u_xlat0.x = (x_3576 / x_3578);
  let x_3581 : vec3<f32> = u_xlat0;
  let x_3585 : vec3<f32> = u_xlat5;
  let x_3586 : vec3<f32> = ((vec3<f32>(x_3581.x, x_3581.x, x_3581.x) * vec3<f32>(0.03999999910593032837f, 0.03999999910593032837f, 0.03999999910593032837f)) + x_3585);
  let x_3587 : vec4<f32> = u_xlat8;
  u_xlat8 = vec4<f32>(x_3586.x, x_3586.y, x_3586.z, x_3587.w);
  let x_3589 : vec4<f32> = u_xlat6;
  let x_3591 : vec4<f32> = u_xlat8;
  let x_3593 : vec3<f32> = (vec3<f32>(x_3589.x, x_3589.y, x_3589.z) * vec3<f32>(x_3591.x, x_3591.y, x_3591.z));
  let x_3594 : vec4<f32> = u_xlat6;
  u_xlat6 = vec4<f32>(x_3593.x, x_3593.y, x_3593.z, x_3594.w);
  let x_3597 : f32 = x_128.x_AdditionalLightsCount.x;
  let x_3599 : f32 = x_48.unity_LightData.y;
  u_xlat0.x = min(x_3597, x_3599);
  let x_3603 : f32 = u_xlat0.x;
  u_xlatu0 = bitcast<u32>(i32(x_3603));
  let x_3607 : f32 = u_xlat2.x;
  let x_3610 : f32 = x_246.x_AdditionalShadowFadeParams.x;
  let x_3613 : f32 = x_246.x_AdditionalShadowFadeParams.y;
  u_xlat2.x = ((x_3607 * x_3610) + x_3613);
  let x_3617 : f32 = u_xlat2.x;
  u_xlat2.x = clamp(x_3617, 0.0f, 1.0f);
  u_xlat8.x = 0.0f;
  u_xlat8.y = 0.0f;
  u_xlat8.z = 0.0f;
  u_xlatu_loop_1 = 0u;
  loop {
    let x_3630 : u32 = u_xlatu_loop_1;
    let x_3631 : u32 = u_xlatu0;
    if ((x_3630 < x_3631)) {
    } else {
      break;
    }
    let x_3634 : u32 = u_xlatu_loop_1;
    u_xlatu81 = (x_3634 >> 2u);
    let x_3637 : u32 = u_xlatu_loop_1;
    u_xlati82 = bitcast<i32>((x_3637 & 3u));
    let x_3640 : u32 = u_xlatu81;
    let x_3643 : vec4<f32> = x_48.unity_LightIndices[bitcast<i32>(x_3640)];
    let x_3653 : i32 = u_xlati82;
    indexable = array<vec4<u32>, 4u>(vec4<u32>(1065353216u, 0u, 0u, 0u), vec4<u32>(0u, 1065353216u, 0u, 0u), vec4<u32>(0u, 0u, 1065353216u, 0u), vec4<u32>(0u, 0u, 0u, 1065353216u));
    let x_3658 : vec4<u32> = indexable[x_3653];
    u_xlat81 = dot(x_3643, bitcast<vec4<f32>>(x_3658));
    let x_3662 : f32 = u_xlat81;
    u_xlati81 = i32(x_3662);
    let x_3664 : vec3<f32> = vs_INTERP8;
    let x_3675 : i32 = u_xlati81;
    let x_3677 : vec4<f32> = x_3674.x_AdditionalLightsPosition[x_3675];
    let x_3680 : i32 = u_xlati81;
    let x_3682 : vec4<f32> = x_3674.x_AdditionalLightsPosition[x_3680];
    let x_3684 : vec3<f32> = ((-(x_3664) * vec3<f32>(x_3677.w, x_3677.w, x_3677.w)) + vec3<f32>(x_3682.x, x_3682.y, x_3682.z));
    let x_3685 : vec4<f32> = u_xlat9;
    u_xlat9 = vec4<f32>(x_3684.x, x_3684.y, x_3684.z, x_3685.w);
    let x_3687 : vec4<f32> = u_xlat9;
    let x_3689 : vec4<f32> = u_xlat9;
    u_xlat82 = dot(vec3<f32>(x_3687.x, x_3687.y, x_3687.z), vec3<f32>(x_3689.x, x_3689.y, x_3689.z));
    let x_3692 : f32 = u_xlat82;
    u_xlat82 = max(x_3692, 0.00006103515625f);
    let x_3696 : f32 = u_xlat82;
    u_xlat84 = inverseSqrt(x_3696);
    let x_3698 : f32 = u_xlat84;
    let x_3700 : vec4<f32> = u_xlat9;
    let x_3702 : vec3<f32> = (vec3<f32>(x_3698, x_3698, x_3698) * vec3<f32>(x_3700.x, x_3700.y, x_3700.z));
    let x_3703 : vec4<f32> = u_xlat10;
    u_xlat10 = vec4<f32>(x_3702.x, x_3702.y, x_3702.z, x_3703.w);
    let x_3705 : f32 = u_xlat82;
    u_xlat85 = (1.0f / x_3705);
    let x_3707 : f32 = u_xlat82;
    let x_3708 : i32 = u_xlati81;
    let x_3710 : f32 = x_3674.x_AdditionalLightsAttenuation[x_3708].x;
    u_xlat82 = (x_3707 * x_3710);
    let x_3712 : f32 = u_xlat82;
    let x_3714 : f32 = u_xlat82;
    u_xlat82 = ((-(x_3712) * x_3714) + 1.0f);
    let x_3717 : f32 = u_xlat82;
    u_xlat82 = max(x_3717, 0.0f);
    let x_3719 : f32 = u_xlat82;
    let x_3720 : f32 = u_xlat82;
    u_xlat82 = (x_3719 * x_3720);
    let x_3722 : f32 = u_xlat82;
    let x_3723 : f32 = u_xlat85;
    u_xlat82 = (x_3722 * x_3723);
    let x_3725 : i32 = u_xlati81;
    let x_3727 : vec4<f32> = x_3674.x_AdditionalLightsSpotDir[x_3725];
    let x_3729 : vec4<f32> = u_xlat10;
    u_xlat85 = dot(vec3<f32>(x_3727.x, x_3727.y, x_3727.z), vec3<f32>(x_3729.x, x_3729.y, x_3729.z));
    let x_3732 : f32 = u_xlat85;
    let x_3733 : i32 = u_xlati81;
    let x_3735 : f32 = x_3674.x_AdditionalLightsAttenuation[x_3733].z;
    let x_3737 : i32 = u_xlati81;
    let x_3739 : f32 = x_3674.x_AdditionalLightsAttenuation[x_3737].w;
    u_xlat85 = ((x_3732 * x_3735) + x_3739);
    let x_3741 : f32 = u_xlat85;
    u_xlat85 = clamp(x_3741, 0.0f, 1.0f);
    let x_3743 : f32 = u_xlat85;
    let x_3744 : f32 = u_xlat85;
    u_xlat85 = (x_3743 * x_3744);
    let x_3746 : f32 = u_xlat82;
    let x_3747 : f32 = u_xlat85;
    u_xlat82 = (x_3746 * x_3747);
    let x_3751 : i32 = u_xlati81;
    let x_3753 : f32 = x_246.x_AdditionalShadowParams[x_3751].w;
    u_xlati85 = i32(x_3753);
    let x_3756 : i32 = u_xlati85;
    u_xlatb86 = (x_3756 >= 0i);
    let x_3758 : bool = u_xlatb86;
    if (x_3758) {
      let x_3762 : i32 = u_xlati81;
      let x_3764 : f32 = x_246.x_AdditionalShadowParams[x_3762].z;
      u_xlatb86 = any(!((vec4<f32>(0.0f, 0.0f, 0.0f, 0.0f) == vec4<f32>(x_3764, x_3764, x_3764, x_3764))));
      let x_3768 : bool = u_xlatb86;
      if (x_3768) {
        let x_3772 : vec4<f32> = u_xlat10;
        let x_3775 : vec4<f32> = u_xlat10;
        let x_3778 : vec4<bool> = (abs(vec4<f32>(x_3772.z, x_3772.z, x_3772.y, x_3772.z)) >= abs(vec4<f32>(x_3775.x, x_3775.y, x_3775.x, x_3775.x)));
        let x_3780 : vec3<bool> = vec3<bool>(x_3778.x, x_3778.y, x_3778.z);
        let x_3781 : vec4<bool> = u_xlatb11;
        u_xlatb11 = vec4<bool>(x_3780.x, x_3780.y, x_3780.z, x_3781.w);
        let x_3784 : bool = u_xlatb11.y;
        let x_3786 : bool = u_xlatb11.x;
        u_xlatb86 = (x_3784 & x_3786);
        let x_3788 : vec4<f32> = u_xlat10;
        let x_3791 : vec4<bool> = (-(vec4<f32>(x_3788.z, x_3788.y, x_3788.z, x_3788.x)) < vec4<f32>(0.0f, 0.0f, 0.0f, 0.0f));
        let x_3792 : vec3<bool> = vec3<bool>(x_3791.x, x_3791.y, x_3791.w);
        let x_3793 : vec4<bool> = u_xlatb11;
        u_xlatb11 = vec4<bool>(x_3792.x, x_3792.y, x_3793.z, x_3792.z);
        let x_3796 : bool = u_xlatb11.x;
        u_xlat11.x = select(4.0f, 5.0f, x_3796);
        let x_3801 : bool = u_xlatb11.y;
        u_xlat11.y = select(2.0f, 3.0f, x_3801);
        let x_3805 : bool = u_xlatb11.w;
        u_xlat87 = select(0.0f, 1.0f, x_3805);
        let x_3808 : bool = u_xlatb11.z;
        if (x_3808) {
          let x_3813 : f32 = u_xlat11.y;
          x_3809 = x_3813;
        } else {
          let x_3815 : f32 = u_xlat87;
          x_3809 = x_3815;
        }
        let x_3816 : f32 = x_3809;
        u_xlat87 = x_3816;
        let x_3818 : bool = u_xlatb86;
        if (x_3818) {
          let x_3823 : f32 = u_xlat11.x;
          x_3819 = x_3823;
        } else {
          let x_3825 : f32 = u_xlat87;
          x_3819 = x_3825;
        }
        let x_3826 : f32 = x_3819;
        u_xlat86 = x_3826;
        let x_3827 : i32 = u_xlati81;
        let x_3829 : f32 = x_246.x_AdditionalShadowParams[x_3827].w;
        u_xlat87 = trunc(x_3829);
        let x_3831 : f32 = u_xlat86;
        let x_3832 : f32 = u_xlat87;
        u_xlat86 = (x_3831 + x_3832);
        let x_3834 : f32 = u_xlat86;
        u_xlati85 = i32(x_3834);
      }
      let x_3836 : i32 = u_xlati85;
      u_xlati85 = (x_3836 << bitcast<u32>(2i));
      let x_3838 : vec3<f32> = vs_INTERP8;
      let x_3841 : i32 = u_xlati85;
      let x_3844 : i32 = u_xlati85;
      let x_3848 : vec4<f32> = x_246.x_AdditionalLightsWorldToShadow[((x_3841 + 1i) / 4i)][((x_3844 + 1i) % 4i)];
      u_xlat11 = (vec4<f32>(x_3838.y, x_3838.y, x_3838.y, x_3838.y) * x_3848);
      let x_3850 : i32 = u_xlati85;
      let x_3852 : i32 = u_xlati85;
      let x_3855 : vec4<f32> = x_246.x_AdditionalLightsWorldToShadow[(x_3850 / 4i)][(x_3852 % 4i)];
      let x_3856 : vec3<f32> = vs_INTERP8;
      let x_3859 : vec4<f32> = u_xlat11;
      u_xlat11 = ((x_3855 * vec4<f32>(x_3856.x, x_3856.x, x_3856.x, x_3856.x)) + x_3859);
      let x_3861 : i32 = u_xlati85;
      let x_3864 : i32 = u_xlati85;
      let x_3868 : vec4<f32> = x_246.x_AdditionalLightsWorldToShadow[((x_3861 + 2i) / 4i)][((x_3864 + 2i) % 4i)];
      let x_3869 : vec3<f32> = vs_INTERP8;
      let x_3872 : vec4<f32> = u_xlat11;
      u_xlat11 = ((x_3868 * vec4<f32>(x_3869.z, x_3869.z, x_3869.z, x_3869.z)) + x_3872);
      let x_3874 : vec4<f32> = u_xlat11;
      let x_3875 : i32 = u_xlati85;
      let x_3878 : i32 = u_xlati85;
      let x_3882 : vec4<f32> = x_246.x_AdditionalLightsWorldToShadow[((x_3875 + 3i) / 4i)][((x_3878 + 3i) % 4i)];
      u_xlat11 = (x_3874 + x_3882);
      let x_3884 : vec4<f32> = u_xlat11;
      let x_3886 : vec4<f32> = u_xlat11;
      let x_3888 : vec3<f32> = (vec3<f32>(x_3884.x, x_3884.y, x_3884.z) / vec3<f32>(x_3886.w, x_3886.w, x_3886.w));
      let x_3889 : vec4<f32> = u_xlat11;
      u_xlat11 = vec4<f32>(x_3888.x, x_3888.y, x_3888.z, x_3889.w);
      let x_3892 : i32 = u_xlati81;
      let x_3894 : f32 = x_246.x_AdditionalShadowParams[x_3892].y;
      u_xlatb85 = (0.0f < x_3894);
      let x_3896 : bool = u_xlatb85;
      if (x_3896) {
        let x_3899 : i32 = u_xlati81;
        let x_3901 : f32 = x_246.x_AdditionalShadowParams[x_3899].y;
        u_xlatb85 = (1.0f == x_3901);
        let x_3903 : bool = u_xlatb85;
        if (x_3903) {
          let x_3906 : vec4<f32> = u_xlat11;
          let x_3909 : vec4<f32> = x_246.x_AdditionalShadowOffset0;
          u_xlat12 = (vec4<f32>(x_3906.x, x_3906.y, x_3906.x, x_3906.y) + x_3909);
          let x_3912 : vec4<f32> = u_xlat12;
          let x_3913 : vec2<f32> = vec2<f32>(x_3912.x, x_3912.y);
          let x_3915 : f32 = u_xlat11.z;
          txVec60 = vec3<f32>(x_3913.x, x_3913.y, x_3915);
          let x_3923 : vec3<f32> = txVec60;
          let x_3925 : f32 = textureSampleCompareLevel(x_AdditionalLightsShadowmapTexture, sampler_LinearClampCompare, x_3923.xy, x_3923.z);
          u_xlat13.x = x_3925;
          let x_3928 : vec4<f32> = u_xlat12;
          let x_3929 : vec2<f32> = vec2<f32>(x_3928.z, x_3928.w);
          let x_3931 : f32 = u_xlat11.z;
          txVec61 = vec3<f32>(x_3929.x, x_3929.y, x_3931);
          let x_3938 : vec3<f32> = txVec61;
          let x_3940 : f32 = textureSampleCompareLevel(x_AdditionalLightsShadowmapTexture, sampler_LinearClampCompare, x_3938.xy, x_3938.z);
          u_xlat13.y = x_3940;
          let x_3942 : vec4<f32> = u_xlat11;
          let x_3946 : vec4<f32> = x_246.x_AdditionalShadowOffset1;
          u_xlat12 = (vec4<f32>(x_3942.x, x_3942.y, x_3942.x, x_3942.y) + x_3946);
          let x_3949 : vec4<f32> = u_xlat12;
          let x_3950 : vec2<f32> = vec2<f32>(x_3949.x, x_3949.y);
          let x_3952 : f32 = u_xlat11.z;
          txVec62 = vec3<f32>(x_3950.x, x_3950.y, x_3952);
          let x_3959 : vec3<f32> = txVec62;
          let x_3961 : f32 = textureSampleCompareLevel(x_AdditionalLightsShadowmapTexture, sampler_LinearClampCompare, x_3959.xy, x_3959.z);
          u_xlat13.z = x_3961;
          let x_3964 : vec4<f32> = u_xlat12;
          let x_3965 : vec2<f32> = vec2<f32>(x_3964.z, x_3964.w);
          let x_3967 : f32 = u_xlat11.z;
          txVec63 = vec3<f32>(x_3965.x, x_3965.y, x_3967);
          let x_3974 : vec3<f32> = txVec63;
          let x_3976 : f32 = textureSampleCompareLevel(x_AdditionalLightsShadowmapTexture, sampler_LinearClampCompare, x_3974.xy, x_3974.z);
          u_xlat13.w = x_3976;
          let x_3978 : vec4<f32> = u_xlat13;
          u_xlat85 = dot(x_3978, vec4<f32>(0.25f, 0.25f, 0.25f, 0.25f));
        } else {
          let x_3981 : i32 = u_xlati81;
          let x_3983 : f32 = x_246.x_AdditionalShadowParams[x_3981].y;
          u_xlatb86 = (2.0f == x_3983);
          let x_3985 : bool = u_xlatb86;
          if (x_3985) {
            let x_3988 : vec4<f32> = u_xlat11;
            let x_3992 : vec4<f32> = x_246.x_AdditionalShadowmapSize;
            let x_3995 : vec2<f32> = ((vec2<f32>(x_3988.x, x_3988.y) * vec2<f32>(x_3992.z, x_3992.w)) + vec2<f32>(0.5f, 0.5f));
            let x_3996 : vec4<f32> = u_xlat12;
            u_xlat12 = vec4<f32>(x_3995.x, x_3995.y, x_3996.z, x_3996.w);
            let x_3998 : vec4<f32> = u_xlat12;
            let x_4000 : vec2<f32> = floor(vec2<f32>(x_3998.x, x_3998.y));
            let x_4001 : vec4<f32> = u_xlat12;
            u_xlat12 = vec4<f32>(x_4000.x, x_4000.y, x_4001.z, x_4001.w);
            let x_4004 : vec4<f32> = u_xlat11;
            let x_4007 : vec4<f32> = x_246.x_AdditionalShadowmapSize;
            let x_4010 : vec4<f32> = u_xlat12;
            u_xlat64 = ((vec2<f32>(x_4004.x, x_4004.y) * vec2<f32>(x_4007.z, x_4007.w)) + -(vec2<f32>(x_4010.x, x_4010.y)));
            let x_4014 : vec2<f32> = u_xlat64;
            u_xlat13 = (vec4<f32>(x_4014.x, x_4014.x, x_4014.y, x_4014.y) + vec4<f32>(0.5f, 1.0f, 0.5f, 1.0f));
            let x_4017 : vec4<f32> = u_xlat13;
            let x_4019 : vec4<f32> = u_xlat13;
            u_xlat14 = (vec4<f32>(x_4017.x, x_4017.x, x_4017.z, x_4017.z) * vec4<f32>(x_4019.x, x_4019.x, x_4019.z, x_4019.z));
            let x_4022 : vec4<f32> = u_xlat14;
            let x_4024 : vec2<f32> = (vec2<f32>(x_4022.y, x_4022.w) * vec2<f32>(0.07999999821186065674f, 0.07999999821186065674f));
            let x_4025 : vec4<f32> = u_xlat13;
            u_xlat13 = vec4<f32>(x_4024.x, x_4025.y, x_4024.y, x_4025.w);
            let x_4027 : vec4<f32> = u_xlat14;
            let x_4030 : vec2<f32> = u_xlat64;
            let x_4032 : vec2<f32> = ((vec2<f32>(x_4027.x, x_4027.z) * vec2<f32>(0.5f, 0.5f)) + -(x_4030));
            let x_4033 : vec4<f32> = u_xlat14;
            u_xlat14 = vec4<f32>(x_4032.x, x_4032.y, x_4033.z, x_4033.w);
            let x_4035 : vec2<f32> = u_xlat64;
            u_xlat66 = (-(x_4035) + vec2<f32>(1.0f, 1.0f));
            let x_4038 : vec2<f32> = u_xlat64;
            let x_4039 : vec2<f32> = min(x_4038, vec2<f32>(0.0f, 0.0f));
            let x_4040 : vec4<f32> = u_xlat15;
            u_xlat15 = vec4<f32>(x_4039.x, x_4039.y, x_4040.z, x_4040.w);
            let x_4042 : vec4<f32> = u_xlat15;
            let x_4045 : vec4<f32> = u_xlat15;
            let x_4048 : vec2<f32> = u_xlat66;
            let x_4049 : vec2<f32> = ((-(vec2<f32>(x_4042.x, x_4042.y)) * vec2<f32>(x_4045.x, x_4045.y)) + x_4048);
            let x_4050 : vec4<f32> = u_xlat15;
            u_xlat15 = vec4<f32>(x_4049.x, x_4049.y, x_4050.z, x_4050.w);
            let x_4052 : vec2<f32> = u_xlat64;
            u_xlat64 = max(x_4052, vec2<f32>(0.0f, 0.0f));
            let x_4054 : vec2<f32> = u_xlat64;
            let x_4056 : vec2<f32> = u_xlat64;
            let x_4058 : vec4<f32> = u_xlat13;
            u_xlat64 = ((-(x_4054) * x_4056) + vec2<f32>(x_4058.y, x_4058.w));
            let x_4061 : vec4<f32> = u_xlat15;
            let x_4063 : vec2<f32> = (vec2<f32>(x_4061.x, x_4061.y) + vec2<f32>(1.0f, 1.0f));
            let x_4064 : vec4<f32> = u_xlat15;
            u_xlat15 = vec4<f32>(x_4063.x, x_4063.y, x_4064.z, x_4064.w);
            let x_4066 : vec2<f32> = u_xlat64;
            u_xlat64 = (x_4066 + vec2<f32>(1.0f, 1.0f));
            let x_4068 : vec4<f32> = u_xlat14;
            let x_4070 : vec2<f32> = (vec2<f32>(x_4068.x, x_4068.y) * vec2<f32>(0.15999999642372131348f, 0.15999999642372131348f));
            let x_4071 : vec4<f32> = u_xlat16;
            u_xlat16 = vec4<f32>(x_4070.x, x_4070.y, x_4071.z, x_4071.w);
            let x_4073 : vec2<f32> = u_xlat66;
            let x_4074 : vec2<f32> = (x_4073 * vec2<f32>(0.15999999642372131348f, 0.15999999642372131348f));
            let x_4075 : vec4<f32> = u_xlat14;
            u_xlat14 = vec4<f32>(x_4074.x, x_4074.y, x_4075.z, x_4075.w);
            let x_4077 : vec4<f32> = u_xlat15;
            let x_4079 : vec2<f32> = (vec2<f32>(x_4077.x, x_4077.y) * vec2<f32>(0.15999999642372131348f, 0.15999999642372131348f));
            let x_4080 : vec4<f32> = u_xlat15;
            u_xlat15 = vec4<f32>(x_4079.x, x_4079.y, x_4080.z, x_4080.w);
            let x_4082 : vec2<f32> = u_xlat64;
            let x_4083 : vec2<f32> = (x_4082 * vec2<f32>(0.15999999642372131348f, 0.15999999642372131348f));
            let x_4084 : vec4<f32> = u_xlat17;
            u_xlat17 = vec4<f32>(x_4083.x, x_4083.y, x_4084.z, x_4084.w);
            let x_4086 : vec4<f32> = u_xlat13;
            u_xlat64 = (vec2<f32>(x_4086.y, x_4086.w) * vec2<f32>(0.15999999642372131348f, 0.15999999642372131348f));
            let x_4090 : f32 = u_xlat15.x;
            u_xlat16.z = x_4090;
            let x_4093 : f32 = u_xlat64.x;
            u_xlat16.w = x_4093;
            let x_4096 : f32 = u_xlat17.x;
            u_xlat14.z = x_4096;
            let x_4099 : f32 = u_xlat13.x;
            u_xlat14.w = x_4099;
            let x_4101 : vec4<f32> = u_xlat14;
            let x_4103 : vec4<f32> = u_xlat16;
            u_xlat18 = (vec4<f32>(x_4101.z, x_4101.w, x_4101.x, x_4101.z) + vec4<f32>(x_4103.z, x_4103.w, x_4103.x, x_4103.z));
            let x_4107 : f32 = u_xlat16.y;
            u_xlat15.z = x_4107;
            let x_4110 : f32 = u_xlat64.y;
            u_xlat15.w = x_4110;
            let x_4113 : f32 = u_xlat14.y;
            u_xlat17.z = x_4113;
            let x_4116 : f32 = u_xlat13.z;
            u_xlat17.w = x_4116;
            let x_4118 : vec4<f32> = u_xlat15;
            let x_4120 : vec4<f32> = u_xlat17;
            let x_4122 : vec3<f32> = (vec3<f32>(x_4118.z, x_4118.y, x_4118.w) + vec3<f32>(x_4120.z, x_4120.y, x_4120.w));
            let x_4123 : vec4<f32> = u_xlat13;
            u_xlat13 = vec4<f32>(x_4122.x, x_4122.y, x_4122.z, x_4123.w);
            let x_4125 : vec4<f32> = u_xlat14;
            let x_4127 : vec4<f32> = u_xlat18;
            let x_4129 : vec3<f32> = (vec3<f32>(x_4125.x, x_4125.z, x_4125.w) / vec3<f32>(x_4127.z, x_4127.w, x_4127.y));
            let x_4130 : vec4<f32> = u_xlat14;
            u_xlat14 = vec4<f32>(x_4129.x, x_4129.y, x_4129.z, x_4130.w);
            let x_4132 : vec4<f32> = u_xlat14;
            let x_4134 : vec3<f32> = (vec3<f32>(x_4132.x, x_4132.y, x_4132.z) + vec3<f32>(-2.5f, -0.5f, 1.5f));
            let x_4135 : vec4<f32> = u_xlat14;
            u_xlat14 = vec4<f32>(x_4134.x, x_4134.y, x_4134.z, x_4135.w);
            let x_4137 : vec4<f32> = u_xlat17;
            let x_4139 : vec4<f32> = u_xlat13;
            let x_4141 : vec3<f32> = (vec3<f32>(x_4137.z, x_4137.y, x_4137.w) / vec3<f32>(x_4139.x, x_4139.y, x_4139.z));
            let x_4142 : vec4<f32> = u_xlat15;
            u_xlat15 = vec4<f32>(x_4141.x, x_4141.y, x_4141.z, x_4142.w);
            let x_4144 : vec4<f32> = u_xlat15;
            let x_4146 : vec3<f32> = (vec3<f32>(x_4144.x, x_4144.y, x_4144.z) + vec3<f32>(-2.5f, -0.5f, 1.5f));
            let x_4147 : vec4<f32> = u_xlat15;
            u_xlat15 = vec4<f32>(x_4146.x, x_4146.y, x_4146.z, x_4147.w);
            let x_4149 : vec4<f32> = u_xlat14;
            let x_4152 : vec4<f32> = x_246.x_AdditionalShadowmapSize;
            let x_4154 : vec3<f32> = (vec3<f32>(x_4149.y, x_4149.x, x_4149.z) * vec3<f32>(x_4152.x, x_4152.x, x_4152.x));
            let x_4155 : vec4<f32> = u_xlat14;
            u_xlat14 = vec4<f32>(x_4154.x, x_4154.y, x_4154.z, x_4155.w);
            let x_4157 : vec4<f32> = u_xlat15;
            let x_4160 : vec4<f32> = x_246.x_AdditionalShadowmapSize;
            let x_4162 : vec3<f32> = (vec3<f32>(x_4157.x, x_4157.y, x_4157.z) * vec3<f32>(x_4160.y, x_4160.y, x_4160.y));
            let x_4163 : vec4<f32> = u_xlat15;
            u_xlat15 = vec4<f32>(x_4162.x, x_4162.y, x_4162.z, x_4163.w);
            let x_4166 : f32 = u_xlat15.x;
            u_xlat14.w = x_4166;
            let x_4168 : vec4<f32> = u_xlat12;
            let x_4171 : vec4<f32> = x_246.x_AdditionalShadowmapSize;
            let x_4174 : vec4<f32> = u_xlat14;
            u_xlat16 = ((vec4<f32>(x_4168.x, x_4168.y, x_4168.x, x_4168.y) * vec4<f32>(x_4171.x, x_4171.y, x_4171.x, x_4171.y)) + vec4<f32>(x_4174.y, x_4174.w, x_4174.x, x_4174.w));
            let x_4177 : vec4<f32> = u_xlat12;
            let x_4180 : vec4<f32> = x_246.x_AdditionalShadowmapSize;
            let x_4183 : vec4<f32> = u_xlat14;
            u_xlat64 = ((vec2<f32>(x_4177.x, x_4177.y) * vec2<f32>(x_4180.x, x_4180.y)) + vec2<f32>(x_4183.z, x_4183.w));
            let x_4187 : f32 = u_xlat14.y;
            u_xlat15.w = x_4187;
            let x_4189 : vec4<f32> = u_xlat15;
            let x_4190 : vec2<f32> = vec2<f32>(x_4189.y, x_4189.z);
            let x_4191 : vec4<f32> = u_xlat14;
            u_xlat14 = vec4<f32>(x_4191.x, x_4190.x, x_4191.z, x_4190.y);
            let x_4193 : vec4<f32> = u_xlat12;
            let x_4196 : vec4<f32> = x_246.x_AdditionalShadowmapSize;
            let x_4199 : vec4<f32> = u_xlat14;
            u_xlat17 = ((vec4<f32>(x_4193.x, x_4193.y, x_4193.x, x_4193.y) * vec4<f32>(x_4196.x, x_4196.y, x_4196.x, x_4196.y)) + vec4<f32>(x_4199.x, x_4199.y, x_4199.z, x_4199.y));
            let x_4202 : vec4<f32> = u_xlat12;
            let x_4205 : vec4<f32> = x_246.x_AdditionalShadowmapSize;
            let x_4208 : vec4<f32> = u_xlat15;
            u_xlat15 = ((vec4<f32>(x_4202.x, x_4202.y, x_4202.x, x_4202.y) * vec4<f32>(x_4205.x, x_4205.y, x_4205.x, x_4205.y)) + vec4<f32>(x_4208.w, x_4208.y, x_4208.w, x_4208.z));
            let x_4211 : vec4<f32> = u_xlat12;
            let x_4214 : vec4<f32> = x_246.x_AdditionalShadowmapSize;
            let x_4217 : vec4<f32> = u_xlat14;
            u_xlat14 = ((vec4<f32>(x_4211.x, x_4211.y, x_4211.x, x_4211.y) * vec4<f32>(x_4214.x, x_4214.y, x_4214.x, x_4214.y)) + vec4<f32>(x_4217.x, x_4217.w, x_4217.z, x_4217.w));
            let x_4220 : vec4<f32> = u_xlat13;
            let x_4222 : vec4<f32> = u_xlat18;
            u_xlat19 = (vec4<f32>(x_4220.x, x_4220.x, x_4220.x, x_4220.y) * vec4<f32>(x_4222.z, x_4222.w, x_4222.y, x_4222.z));
            let x_4225 : vec4<f32> = u_xlat13;
            let x_4227 : vec4<f32> = u_xlat18;
            u_xlat20 = (vec4<f32>(x_4225.y, x_4225.y, x_4225.z, x_4225.z) * x_4227);
            let x_4230 : f32 = u_xlat13.z;
            let x_4232 : f32 = u_xlat18.y;
            u_xlat86 = (x_4230 * x_4232);
            let x_4235 : vec4<f32> = u_xlat16;
            let x_4236 : vec2<f32> = vec2<f32>(x_4235.x, x_4235.y);
            let x_4238 : f32 = u_xlat11.z;
            txVec64 = vec3<f32>(x_4236.x, x_4236.y, x_4238);
            let x_4245 : vec3<f32> = txVec64;
            let x_4247 : f32 = textureSampleCompareLevel(x_AdditionalLightsShadowmapTexture, sampler_LinearClampCompare, x_4245.xy, x_4245.z);
            u_xlat87 = x_4247;
            let x_4249 : vec4<f32> = u_xlat16;
            let x_4250 : vec2<f32> = vec2<f32>(x_4249.z, x_4249.w);
            let x_4252 : f32 = u_xlat11.z;
            txVec65 = vec3<f32>(x_4250.x, x_4250.y, x_4252);
            let x_4260 : vec3<f32> = txVec65;
            let x_4262 : f32 = textureSampleCompareLevel(x_AdditionalLightsShadowmapTexture, sampler_LinearClampCompare, x_4260.xy, x_4260.z);
            u_xlat88 = x_4262;
            let x_4263 : f32 = u_xlat88;
            let x_4265 : f32 = u_xlat19.y;
            u_xlat88 = (x_4263 * x_4265);
            let x_4268 : f32 = u_xlat19.x;
            let x_4269 : f32 = u_xlat87;
            let x_4271 : f32 = u_xlat88;
            u_xlat87 = ((x_4268 * x_4269) + x_4271);
            let x_4274 : vec2<f32> = u_xlat64;
            let x_4276 : f32 = u_xlat11.z;
            txVec66 = vec3<f32>(x_4274.x, x_4274.y, x_4276);
            let x_4283 : vec3<f32> = txVec66;
            let x_4285 : f32 = textureSampleCompareLevel(x_AdditionalLightsShadowmapTexture, sampler_LinearClampCompare, x_4283.xy, x_4283.z);
            u_xlat88 = x_4285;
            let x_4287 : f32 = u_xlat19.z;
            let x_4288 : f32 = u_xlat88;
            let x_4290 : f32 = u_xlat87;
            u_xlat87 = ((x_4287 * x_4288) + x_4290);
            let x_4293 : vec4<f32> = u_xlat15;
            let x_4294 : vec2<f32> = vec2<f32>(x_4293.x, x_4293.y);
            let x_4296 : f32 = u_xlat11.z;
            txVec67 = vec3<f32>(x_4294.x, x_4294.y, x_4296);
            let x_4303 : vec3<f32> = txVec67;
            let x_4305 : f32 = textureSampleCompareLevel(x_AdditionalLightsShadowmapTexture, sampler_LinearClampCompare, x_4303.xy, x_4303.z);
            u_xlat88 = x_4305;
            let x_4307 : f32 = u_xlat19.w;
            let x_4308 : f32 = u_xlat88;
            let x_4310 : f32 = u_xlat87;
            u_xlat87 = ((x_4307 * x_4308) + x_4310);
            let x_4313 : vec4<f32> = u_xlat17;
            let x_4314 : vec2<f32> = vec2<f32>(x_4313.x, x_4313.y);
            let x_4316 : f32 = u_xlat11.z;
            txVec68 = vec3<f32>(x_4314.x, x_4314.y, x_4316);
            let x_4323 : vec3<f32> = txVec68;
            let x_4325 : f32 = textureSampleCompareLevel(x_AdditionalLightsShadowmapTexture, sampler_LinearClampCompare, x_4323.xy, x_4323.z);
            u_xlat88 = x_4325;
            let x_4327 : f32 = u_xlat20.x;
            let x_4328 : f32 = u_xlat88;
            let x_4330 : f32 = u_xlat87;
            u_xlat87 = ((x_4327 * x_4328) + x_4330);
            let x_4333 : vec4<f32> = u_xlat17;
            let x_4334 : vec2<f32> = vec2<f32>(x_4333.z, x_4333.w);
            let x_4336 : f32 = u_xlat11.z;
            txVec69 = vec3<f32>(x_4334.x, x_4334.y, x_4336);
            let x_4343 : vec3<f32> = txVec69;
            let x_4345 : f32 = textureSampleCompareLevel(x_AdditionalLightsShadowmapTexture, sampler_LinearClampCompare, x_4343.xy, x_4343.z);
            u_xlat88 = x_4345;
            let x_4347 : f32 = u_xlat20.y;
            let x_4348 : f32 = u_xlat88;
            let x_4350 : f32 = u_xlat87;
            u_xlat87 = ((x_4347 * x_4348) + x_4350);
            let x_4353 : vec4<f32> = u_xlat15;
            let x_4354 : vec2<f32> = vec2<f32>(x_4353.z, x_4353.w);
            let x_4356 : f32 = u_xlat11.z;
            txVec70 = vec3<f32>(x_4354.x, x_4354.y, x_4356);
            let x_4363 : vec3<f32> = txVec70;
            let x_4365 : f32 = textureSampleCompareLevel(x_AdditionalLightsShadowmapTexture, sampler_LinearClampCompare, x_4363.xy, x_4363.z);
            u_xlat88 = x_4365;
            let x_4367 : f32 = u_xlat20.z;
            let x_4368 : f32 = u_xlat88;
            let x_4370 : f32 = u_xlat87;
            u_xlat87 = ((x_4367 * x_4368) + x_4370);
            let x_4373 : vec4<f32> = u_xlat14;
            let x_4374 : vec2<f32> = vec2<f32>(x_4373.x, x_4373.y);
            let x_4376 : f32 = u_xlat11.z;
            txVec71 = vec3<f32>(x_4374.x, x_4374.y, x_4376);
            let x_4383 : vec3<f32> = txVec71;
            let x_4385 : f32 = textureSampleCompareLevel(x_AdditionalLightsShadowmapTexture, sampler_LinearClampCompare, x_4383.xy, x_4383.z);
            u_xlat88 = x_4385;
            let x_4387 : f32 = u_xlat20.w;
            let x_4388 : f32 = u_xlat88;
            let x_4390 : f32 = u_xlat87;
            u_xlat87 = ((x_4387 * x_4388) + x_4390);
            let x_4393 : vec4<f32> = u_xlat14;
            let x_4394 : vec2<f32> = vec2<f32>(x_4393.z, x_4393.w);
            let x_4396 : f32 = u_xlat11.z;
            txVec72 = vec3<f32>(x_4394.x, x_4394.y, x_4396);
            let x_4403 : vec3<f32> = txVec72;
            let x_4405 : f32 = textureSampleCompareLevel(x_AdditionalLightsShadowmapTexture, sampler_LinearClampCompare, x_4403.xy, x_4403.z);
            u_xlat88 = x_4405;
            let x_4406 : f32 = u_xlat86;
            let x_4407 : f32 = u_xlat88;
            let x_4409 : f32 = u_xlat87;
            u_xlat85 = ((x_4406 * x_4407) + x_4409);
          } else {
            let x_4412 : vec4<f32> = u_xlat11;
            let x_4415 : vec4<f32> = x_246.x_AdditionalShadowmapSize;
            let x_4418 : vec2<f32> = ((vec2<f32>(x_4412.x, x_4412.y) * vec2<f32>(x_4415.z, x_4415.w)) + vec2<f32>(0.5f, 0.5f));
            let x_4419 : vec4<f32> = u_xlat12;
            u_xlat12 = vec4<f32>(x_4418.x, x_4418.y, x_4419.z, x_4419.w);
            let x_4421 : vec4<f32> = u_xlat12;
            let x_4423 : vec2<f32> = floor(vec2<f32>(x_4421.x, x_4421.y));
            let x_4424 : vec4<f32> = u_xlat12;
            u_xlat12 = vec4<f32>(x_4423.x, x_4423.y, x_4424.z, x_4424.w);
            let x_4426 : vec4<f32> = u_xlat11;
            let x_4429 : vec4<f32> = x_246.x_AdditionalShadowmapSize;
            let x_4432 : vec4<f32> = u_xlat12;
            u_xlat64 = ((vec2<f32>(x_4426.x, x_4426.y) * vec2<f32>(x_4429.z, x_4429.w)) + -(vec2<f32>(x_4432.x, x_4432.y)));
            let x_4436 : vec2<f32> = u_xlat64;
            u_xlat13 = (vec4<f32>(x_4436.x, x_4436.x, x_4436.y, x_4436.y) + vec4<f32>(0.5f, 1.0f, 0.5f, 1.0f));
            let x_4439 : vec4<f32> = u_xlat13;
            let x_4441 : vec4<f32> = u_xlat13;
            u_xlat14 = (vec4<f32>(x_4439.x, x_4439.x, x_4439.z, x_4439.z) * vec4<f32>(x_4441.x, x_4441.x, x_4441.z, x_4441.z));
            let x_4444 : vec4<f32> = u_xlat14;
            let x_4446 : vec2<f32> = (vec2<f32>(x_4444.y, x_4444.w) * vec2<f32>(0.04081600159406661987f, 0.04081600159406661987f));
            let x_4447 : vec4<f32> = u_xlat15;
            u_xlat15 = vec4<f32>(x_4447.x, x_4446.x, x_4447.z, x_4446.y);
            let x_4449 : vec4<f32> = u_xlat14;
            let x_4452 : vec2<f32> = u_xlat64;
            let x_4454 : vec2<f32> = ((vec2<f32>(x_4449.x, x_4449.z) * vec2<f32>(0.5f, 0.5f)) + -(x_4452));
            let x_4455 : vec4<f32> = u_xlat13;
            u_xlat13 = vec4<f32>(x_4454.x, x_4455.y, x_4454.y, x_4455.w);
            let x_4457 : vec2<f32> = u_xlat64;
            let x_4459 : vec2<f32> = (-(x_4457) + vec2<f32>(1.0f, 1.0f));
            let x_4460 : vec4<f32> = u_xlat14;
            u_xlat14 = vec4<f32>(x_4459.x, x_4459.y, x_4460.z, x_4460.w);
            let x_4462 : vec2<f32> = u_xlat64;
            u_xlat66 = min(x_4462, vec2<f32>(0.0f, 0.0f));
            let x_4464 : vec2<f32> = u_xlat66;
            let x_4466 : vec2<f32> = u_xlat66;
            let x_4468 : vec4<f32> = u_xlat14;
            let x_4470 : vec2<f32> = ((-(x_4464) * x_4466) + vec2<f32>(x_4468.x, x_4468.y));
            let x_4471 : vec4<f32> = u_xlat14;
            u_xlat14 = vec4<f32>(x_4470.x, x_4470.y, x_4471.z, x_4471.w);
            let x_4473 : vec2<f32> = u_xlat64;
            u_xlat66 = max(x_4473, vec2<f32>(0.0f, 0.0f));
            let x_4476 : vec2<f32> = u_xlat66;
            let x_4478 : vec2<f32> = u_xlat66;
            let x_4480 : vec4<f32> = u_xlat13;
            let x_4482 : vec2<f32> = ((-(x_4476) * x_4478) + vec2<f32>(x_4480.y, x_4480.w));
            let x_4483 : vec3<f32> = u_xlat39;
            u_xlat39 = vec3<f32>(x_4482.x, x_4483.y, x_4482.y);
            let x_4485 : vec4<f32> = u_xlat14;
            let x_4487 : vec2<f32> = (vec2<f32>(x_4485.x, x_4485.y) + vec2<f32>(2.0f, 2.0f));
            let x_4488 : vec4<f32> = u_xlat14;
            u_xlat14 = vec4<f32>(x_4487.x, x_4487.y, x_4488.z, x_4488.w);
            let x_4490 : vec3<f32> = u_xlat39;
            let x_4492 : vec2<f32> = (vec2<f32>(x_4490.x, x_4490.z) + vec2<f32>(2.0f, 2.0f));
            let x_4493 : vec4<f32> = u_xlat13;
            u_xlat13 = vec4<f32>(x_4493.x, x_4492.x, x_4493.z, x_4492.y);
            let x_4496 : f32 = u_xlat13.y;
            u_xlat16.z = (x_4496 * 0.08163200318813323975f);
            let x_4499 : vec4<f32> = u_xlat13;
            let x_4501 : vec3<f32> = (vec3<f32>(x_4499.z, x_4499.x, x_4499.w) * vec3<f32>(0.08163200318813323975f, 0.08163200318813323975f, 0.08163200318813323975f));
            let x_4502 : vec4<f32> = u_xlat17;
            u_xlat17 = vec4<f32>(x_4501.x, x_4501.y, x_4501.z, x_4502.w);
            let x_4504 : vec4<f32> = u_xlat14;
            let x_4506 : vec2<f32> = (vec2<f32>(x_4504.x, x_4504.y) * vec2<f32>(0.08163200318813323975f, 0.08163200318813323975f));
            let x_4507 : vec4<f32> = u_xlat13;
            u_xlat13 = vec4<f32>(x_4506.x, x_4506.y, x_4507.z, x_4507.w);
            let x_4510 : f32 = u_xlat17.y;
            u_xlat16.x = x_4510;
            let x_4512 : vec2<f32> = u_xlat64;
            let x_4515 : vec2<f32> = ((vec2<f32>(x_4512.x, x_4512.x) * vec2<f32>(-0.08163200318813323975f, 0.08163200318813323975f)) + vec2<f32>(0.16326400637626647949f, 0.08163200318813323975f));
            let x_4516 : vec4<f32> = u_xlat16;
            u_xlat16 = vec4<f32>(x_4516.x, x_4515.x, x_4516.z, x_4515.y);
            let x_4518 : vec2<f32> = u_xlat64;
            let x_4521 : vec2<f32> = ((vec2<f32>(x_4518.x, x_4518.x) * vec2<f32>(-0.08163200318813323975f, 0.08163200318813323975f)) + vec2<f32>(0.08163200318813323975f, 0.16326400637626647949f));
            let x_4522 : vec4<f32> = u_xlat14;
            u_xlat14 = vec4<f32>(x_4521.x, x_4522.y, x_4521.y, x_4522.w);
            let x_4525 : f32 = u_xlat13.x;
            u_xlat14.y = x_4525;
            let x_4528 : f32 = u_xlat15.y;
            u_xlat14.w = x_4528;
            let x_4530 : vec4<f32> = u_xlat14;
            let x_4531 : vec4<f32> = u_xlat16;
            u_xlat16 = (x_4530 + x_4531);
            let x_4533 : vec2<f32> = u_xlat64;
            let x_4536 : vec2<f32> = ((vec2<f32>(x_4533.y, x_4533.y) * vec2<f32>(-0.08163200318813323975f, 0.08163200318813323975f)) + vec2<f32>(0.16326400637626647949f, 0.08163200318813323975f));
            let x_4537 : vec4<f32> = u_xlat17;
            u_xlat17 = vec4<f32>(x_4537.x, x_4536.x, x_4537.z, x_4536.y);
            let x_4539 : vec2<f32> = u_xlat64;
            let x_4542 : vec2<f32> = ((vec2<f32>(x_4539.y, x_4539.y) * vec2<f32>(-0.08163200318813323975f, 0.08163200318813323975f)) + vec2<f32>(0.08163200318813323975f, 0.16326400637626647949f));
            let x_4543 : vec4<f32> = u_xlat15;
            u_xlat15 = vec4<f32>(x_4542.x, x_4543.y, x_4542.y, x_4543.w);
            let x_4546 : f32 = u_xlat13.y;
            u_xlat15.y = x_4546;
            let x_4548 : vec4<f32> = u_xlat15;
            let x_4549 : vec4<f32> = u_xlat17;
            u_xlat13 = (x_4548 + x_4549);
            let x_4551 : vec4<f32> = u_xlat14;
            let x_4552 : vec4<f32> = u_xlat16;
            u_xlat14 = (x_4551 / x_4552);
            let x_4554 : vec4<f32> = u_xlat14;
            u_xlat14 = (x_4554 + vec4<f32>(-3.5f, -1.5f, 0.5f, 2.5f));
            let x_4556 : vec4<f32> = u_xlat15;
            let x_4557 : vec4<f32> = u_xlat13;
            u_xlat15 = (x_4556 / x_4557);
            let x_4559 : vec4<f32> = u_xlat15;
            u_xlat15 = (x_4559 + vec4<f32>(-3.5f, -1.5f, 0.5f, 2.5f));
            let x_4561 : vec4<f32> = u_xlat14;
            let x_4564 : vec4<f32> = x_246.x_AdditionalShadowmapSize;
            u_xlat14 = (vec4<f32>(x_4561.w, x_4561.x, x_4561.y, x_4561.z) * vec4<f32>(x_4564.x, x_4564.x, x_4564.x, x_4564.x));
            let x_4567 : vec4<f32> = u_xlat15;
            let x_4570 : vec4<f32> = x_246.x_AdditionalShadowmapSize;
            u_xlat15 = (vec4<f32>(x_4567.x, x_4567.w, x_4567.y, x_4567.z) * vec4<f32>(x_4570.y, x_4570.y, x_4570.y, x_4570.y));
            let x_4573 : vec4<f32> = u_xlat14;
            let x_4574 : vec3<f32> = vec3<f32>(x_4573.y, x_4573.z, x_4573.w);
            let x_4575 : vec4<f32> = u_xlat17;
            u_xlat17 = vec4<f32>(x_4574.x, x_4575.y, x_4574.y, x_4574.z);
            let x_4578 : f32 = u_xlat15.x;
            u_xlat17.y = x_4578;
            let x_4580 : vec4<f32> = u_xlat12;
            let x_4583 : vec4<f32> = x_246.x_AdditionalShadowmapSize;
            let x_4586 : vec4<f32> = u_xlat17;
            u_xlat18 = ((vec4<f32>(x_4580.x, x_4580.y, x_4580.x, x_4580.y) * vec4<f32>(x_4583.x, x_4583.y, x_4583.x, x_4583.y)) + vec4<f32>(x_4586.x, x_4586.y, x_4586.z, x_4586.y));
            let x_4589 : vec4<f32> = u_xlat12;
            let x_4592 : vec4<f32> = x_246.x_AdditionalShadowmapSize;
            let x_4595 : vec4<f32> = u_xlat17;
            u_xlat64 = ((vec2<f32>(x_4589.x, x_4589.y) * vec2<f32>(x_4592.x, x_4592.y)) + vec2<f32>(x_4595.w, x_4595.y));
            let x_4599 : f32 = u_xlat17.y;
            u_xlat14.y = x_4599;
            let x_4602 : f32 = u_xlat15.z;
            u_xlat17.y = x_4602;
            let x_4604 : vec4<f32> = u_xlat12;
            let x_4607 : vec4<f32> = x_246.x_AdditionalShadowmapSize;
            let x_4610 : vec4<f32> = u_xlat17;
            u_xlat19 = ((vec4<f32>(x_4604.x, x_4604.y, x_4604.x, x_4604.y) * vec4<f32>(x_4607.x, x_4607.y, x_4607.x, x_4607.y)) + vec4<f32>(x_4610.x, x_4610.y, x_4610.z, x_4610.y));
            let x_4613 : vec4<f32> = u_xlat12;
            let x_4616 : vec4<f32> = x_246.x_AdditionalShadowmapSize;
            let x_4619 : vec4<f32> = u_xlat17;
            let x_4621 : vec2<f32> = ((vec2<f32>(x_4613.x, x_4613.y) * vec2<f32>(x_4616.x, x_4616.y)) + vec2<f32>(x_4619.w, x_4619.y));
            let x_4622 : vec4<f32> = u_xlat20;
            u_xlat20 = vec4<f32>(x_4621.x, x_4621.y, x_4622.z, x_4622.w);
            let x_4625 : f32 = u_xlat17.y;
            u_xlat14.z = x_4625;
            let x_4627 : vec4<f32> = u_xlat12;
            let x_4630 : vec4<f32> = x_246.x_AdditionalShadowmapSize;
            let x_4633 : vec4<f32> = u_xlat14;
            u_xlat21 = ((vec4<f32>(x_4627.x, x_4627.y, x_4627.x, x_4627.y) * vec4<f32>(x_4630.x, x_4630.y, x_4630.x, x_4630.y)) + vec4<f32>(x_4633.x, x_4633.y, x_4633.x, x_4633.z));
            let x_4637 : f32 = u_xlat15.w;
            u_xlat17.y = x_4637;
            let x_4640 : vec4<f32> = u_xlat12;
            let x_4643 : vec4<f32> = x_246.x_AdditionalShadowmapSize;
            let x_4646 : vec4<f32> = u_xlat17;
            u_xlat22 = ((vec4<f32>(x_4640.x, x_4640.y, x_4640.x, x_4640.y) * vec4<f32>(x_4643.x, x_4643.y, x_4643.x, x_4643.y)) + vec4<f32>(x_4646.x, x_4646.y, x_4646.z, x_4646.y));
            let x_4650 : vec4<f32> = u_xlat12;
            let x_4653 : vec4<f32> = x_246.x_AdditionalShadowmapSize;
            let x_4656 : vec4<f32> = u_xlat17;
            u_xlat40 = ((vec2<f32>(x_4650.x, x_4650.y) * vec2<f32>(x_4653.x, x_4653.y)) + vec2<f32>(x_4656.w, x_4656.y));
            let x_4660 : f32 = u_xlat17.y;
            u_xlat14.w = x_4660;
            let x_4663 : vec4<f32> = u_xlat12;
            let x_4666 : vec4<f32> = x_246.x_AdditionalShadowmapSize;
            let x_4669 : vec4<f32> = u_xlat14;
            u_xlat72 = ((vec2<f32>(x_4663.x, x_4663.y) * vec2<f32>(x_4666.x, x_4666.y)) + vec2<f32>(x_4669.x, x_4669.w));
            let x_4672 : vec4<f32> = u_xlat17;
            let x_4673 : vec3<f32> = vec3<f32>(x_4672.x, x_4672.z, x_4672.w);
            let x_4674 : vec4<f32> = u_xlat15;
            u_xlat15 = vec4<f32>(x_4673.x, x_4674.y, x_4673.y, x_4673.z);
            let x_4676 : vec4<f32> = u_xlat12;
            let x_4679 : vec4<f32> = x_246.x_AdditionalShadowmapSize;
            let x_4682 : vec4<f32> = u_xlat15;
            u_xlat17 = ((vec4<f32>(x_4676.x, x_4676.y, x_4676.x, x_4676.y) * vec4<f32>(x_4679.x, x_4679.y, x_4679.x, x_4679.y)) + vec4<f32>(x_4682.x, x_4682.y, x_4682.z, x_4682.y));
            let x_4686 : vec4<f32> = u_xlat12;
            let x_4689 : vec4<f32> = x_246.x_AdditionalShadowmapSize;
            let x_4692 : vec4<f32> = u_xlat15;
            u_xlat67 = ((vec2<f32>(x_4686.x, x_4686.y) * vec2<f32>(x_4689.x, x_4689.y)) + vec2<f32>(x_4692.w, x_4692.y));
            let x_4696 : f32 = u_xlat14.x;
            u_xlat15.x = x_4696;
            let x_4698 : vec4<f32> = u_xlat12;
            let x_4701 : vec4<f32> = x_246.x_AdditionalShadowmapSize;
            let x_4704 : vec4<f32> = u_xlat15;
            let x_4706 : vec2<f32> = ((vec2<f32>(x_4698.x, x_4698.y) * vec2<f32>(x_4701.x, x_4701.y)) + vec2<f32>(x_4704.x, x_4704.y));
            let x_4707 : vec4<f32> = u_xlat12;
            u_xlat12 = vec4<f32>(x_4706.x, x_4706.y, x_4707.z, x_4707.w);
            let x_4710 : vec4<f32> = u_xlat13;
            let x_4712 : vec4<f32> = u_xlat16;
            u_xlat23 = (vec4<f32>(x_4710.x, x_4710.x, x_4710.x, x_4710.x) * x_4712);
            let x_4715 : vec4<f32> = u_xlat13;
            let x_4717 : vec4<f32> = u_xlat16;
            u_xlat24 = (vec4<f32>(x_4715.y, x_4715.y, x_4715.y, x_4715.y) * x_4717);
            let x_4720 : vec4<f32> = u_xlat13;
            let x_4722 : vec4<f32> = u_xlat16;
            u_xlat25 = (vec4<f32>(x_4720.z, x_4720.z, x_4720.z, x_4720.z) * x_4722);
            let x_4724 : vec4<f32> = u_xlat13;
            let x_4726 : vec4<f32> = u_xlat16;
            u_xlat13 = (vec4<f32>(x_4724.w, x_4724.w, x_4724.w, x_4724.w) * x_4726);
            let x_4729 : vec4<f32> = u_xlat18;
            let x_4730 : vec2<f32> = vec2<f32>(x_4729.x, x_4729.y);
            let x_4732 : f32 = u_xlat11.z;
            txVec73 = vec3<f32>(x_4730.x, x_4730.y, x_4732);
            let x_4739 : vec3<f32> = txVec73;
            let x_4741 : f32 = textureSampleCompareLevel(x_AdditionalLightsShadowmapTexture, sampler_LinearClampCompare, x_4739.xy, x_4739.z);
            u_xlat86 = x_4741;
            let x_4743 : vec4<f32> = u_xlat18;
            let x_4744 : vec2<f32> = vec2<f32>(x_4743.z, x_4743.w);
            let x_4746 : f32 = u_xlat11.z;
            txVec74 = vec3<f32>(x_4744.x, x_4744.y, x_4746);
            let x_4753 : vec3<f32> = txVec74;
            let x_4755 : f32 = textureSampleCompareLevel(x_AdditionalLightsShadowmapTexture, sampler_LinearClampCompare, x_4753.xy, x_4753.z);
            u_xlat87 = x_4755;
            let x_4756 : f32 = u_xlat87;
            let x_4758 : f32 = u_xlat23.y;
            u_xlat87 = (x_4756 * x_4758);
            let x_4761 : f32 = u_xlat23.x;
            let x_4762 : f32 = u_xlat86;
            let x_4764 : f32 = u_xlat87;
            u_xlat86 = ((x_4761 * x_4762) + x_4764);
            let x_4767 : vec2<f32> = u_xlat64;
            let x_4769 : f32 = u_xlat11.z;
            txVec75 = vec3<f32>(x_4767.x, x_4767.y, x_4769);
            let x_4776 : vec3<f32> = txVec75;
            let x_4778 : f32 = textureSampleCompareLevel(x_AdditionalLightsShadowmapTexture, sampler_LinearClampCompare, x_4776.xy, x_4776.z);
            u_xlat87 = x_4778;
            let x_4780 : f32 = u_xlat23.z;
            let x_4781 : f32 = u_xlat87;
            let x_4783 : f32 = u_xlat86;
            u_xlat86 = ((x_4780 * x_4781) + x_4783);
            let x_4786 : vec4<f32> = u_xlat21;
            let x_4787 : vec2<f32> = vec2<f32>(x_4786.x, x_4786.y);
            let x_4789 : f32 = u_xlat11.z;
            txVec76 = vec3<f32>(x_4787.x, x_4787.y, x_4789);
            let x_4796 : vec3<f32> = txVec76;
            let x_4798 : f32 = textureSampleCompareLevel(x_AdditionalLightsShadowmapTexture, sampler_LinearClampCompare, x_4796.xy, x_4796.z);
            u_xlat87 = x_4798;
            let x_4800 : f32 = u_xlat23.w;
            let x_4801 : f32 = u_xlat87;
            let x_4803 : f32 = u_xlat86;
            u_xlat86 = ((x_4800 * x_4801) + x_4803);
            let x_4806 : vec4<f32> = u_xlat19;
            let x_4807 : vec2<f32> = vec2<f32>(x_4806.x, x_4806.y);
            let x_4809 : f32 = u_xlat11.z;
            txVec77 = vec3<f32>(x_4807.x, x_4807.y, x_4809);
            let x_4816 : vec3<f32> = txVec77;
            let x_4818 : f32 = textureSampleCompareLevel(x_AdditionalLightsShadowmapTexture, sampler_LinearClampCompare, x_4816.xy, x_4816.z);
            u_xlat87 = x_4818;
            let x_4820 : f32 = u_xlat24.x;
            let x_4821 : f32 = u_xlat87;
            let x_4823 : f32 = u_xlat86;
            u_xlat86 = ((x_4820 * x_4821) + x_4823);
            let x_4826 : vec4<f32> = u_xlat19;
            let x_4827 : vec2<f32> = vec2<f32>(x_4826.z, x_4826.w);
            let x_4829 : f32 = u_xlat11.z;
            txVec78 = vec3<f32>(x_4827.x, x_4827.y, x_4829);
            let x_4836 : vec3<f32> = txVec78;
            let x_4838 : f32 = textureSampleCompareLevel(x_AdditionalLightsShadowmapTexture, sampler_LinearClampCompare, x_4836.xy, x_4836.z);
            u_xlat87 = x_4838;
            let x_4840 : f32 = u_xlat24.y;
            let x_4841 : f32 = u_xlat87;
            let x_4843 : f32 = u_xlat86;
            u_xlat86 = ((x_4840 * x_4841) + x_4843);
            let x_4846 : vec4<f32> = u_xlat20;
            let x_4847 : vec2<f32> = vec2<f32>(x_4846.x, x_4846.y);
            let x_4849 : f32 = u_xlat11.z;
            txVec79 = vec3<f32>(x_4847.x, x_4847.y, x_4849);
            let x_4856 : vec3<f32> = txVec79;
            let x_4858 : f32 = textureSampleCompareLevel(x_AdditionalLightsShadowmapTexture, sampler_LinearClampCompare, x_4856.xy, x_4856.z);
            u_xlat87 = x_4858;
            let x_4860 : f32 = u_xlat24.z;
            let x_4861 : f32 = u_xlat87;
            let x_4863 : f32 = u_xlat86;
            u_xlat86 = ((x_4860 * x_4861) + x_4863);
            let x_4866 : vec4<f32> = u_xlat21;
            let x_4867 : vec2<f32> = vec2<f32>(x_4866.z, x_4866.w);
            let x_4869 : f32 = u_xlat11.z;
            txVec80 = vec3<f32>(x_4867.x, x_4867.y, x_4869);
            let x_4876 : vec3<f32> = txVec80;
            let x_4878 : f32 = textureSampleCompareLevel(x_AdditionalLightsShadowmapTexture, sampler_LinearClampCompare, x_4876.xy, x_4876.z);
            u_xlat87 = x_4878;
            let x_4880 : f32 = u_xlat24.w;
            let x_4881 : f32 = u_xlat87;
            let x_4883 : f32 = u_xlat86;
            u_xlat86 = ((x_4880 * x_4881) + x_4883);
            let x_4886 : vec4<f32> = u_xlat22;
            let x_4887 : vec2<f32> = vec2<f32>(x_4886.x, x_4886.y);
            let x_4889 : f32 = u_xlat11.z;
            txVec81 = vec3<f32>(x_4887.x, x_4887.y, x_4889);
            let x_4896 : vec3<f32> = txVec81;
            let x_4898 : f32 = textureSampleCompareLevel(x_AdditionalLightsShadowmapTexture, sampler_LinearClampCompare, x_4896.xy, x_4896.z);
            u_xlat87 = x_4898;
            let x_4900 : f32 = u_xlat25.x;
            let x_4901 : f32 = u_xlat87;
            let x_4903 : f32 = u_xlat86;
            u_xlat86 = ((x_4900 * x_4901) + x_4903);
            let x_4906 : vec4<f32> = u_xlat22;
            let x_4907 : vec2<f32> = vec2<f32>(x_4906.z, x_4906.w);
            let x_4909 : f32 = u_xlat11.z;
            txVec82 = vec3<f32>(x_4907.x, x_4907.y, x_4909);
            let x_4916 : vec3<f32> = txVec82;
            let x_4918 : f32 = textureSampleCompareLevel(x_AdditionalLightsShadowmapTexture, sampler_LinearClampCompare, x_4916.xy, x_4916.z);
            u_xlat87 = x_4918;
            let x_4920 : f32 = u_xlat25.y;
            let x_4921 : f32 = u_xlat87;
            let x_4923 : f32 = u_xlat86;
            u_xlat86 = ((x_4920 * x_4921) + x_4923);
            let x_4926 : vec2<f32> = u_xlat40;
            let x_4928 : f32 = u_xlat11.z;
            txVec83 = vec3<f32>(x_4926.x, x_4926.y, x_4928);
            let x_4935 : vec3<f32> = txVec83;
            let x_4937 : f32 = textureSampleCompareLevel(x_AdditionalLightsShadowmapTexture, sampler_LinearClampCompare, x_4935.xy, x_4935.z);
            u_xlat87 = x_4937;
            let x_4939 : f32 = u_xlat25.z;
            let x_4940 : f32 = u_xlat87;
            let x_4942 : f32 = u_xlat86;
            u_xlat86 = ((x_4939 * x_4940) + x_4942);
            let x_4945 : vec2<f32> = u_xlat72;
            let x_4947 : f32 = u_xlat11.z;
            txVec84 = vec3<f32>(x_4945.x, x_4945.y, x_4947);
            let x_4954 : vec3<f32> = txVec84;
            let x_4956 : f32 = textureSampleCompareLevel(x_AdditionalLightsShadowmapTexture, sampler_LinearClampCompare, x_4954.xy, x_4954.z);
            u_xlat87 = x_4956;
            let x_4958 : f32 = u_xlat25.w;
            let x_4959 : f32 = u_xlat87;
            let x_4961 : f32 = u_xlat86;
            u_xlat86 = ((x_4958 * x_4959) + x_4961);
            let x_4964 : vec4<f32> = u_xlat17;
            let x_4965 : vec2<f32> = vec2<f32>(x_4964.x, x_4964.y);
            let x_4967 : f32 = u_xlat11.z;
            txVec85 = vec3<f32>(x_4965.x, x_4965.y, x_4967);
            let x_4974 : vec3<f32> = txVec85;
            let x_4976 : f32 = textureSampleCompareLevel(x_AdditionalLightsShadowmapTexture, sampler_LinearClampCompare, x_4974.xy, x_4974.z);
            u_xlat87 = x_4976;
            let x_4978 : f32 = u_xlat13.x;
            let x_4979 : f32 = u_xlat87;
            let x_4981 : f32 = u_xlat86;
            u_xlat86 = ((x_4978 * x_4979) + x_4981);
            let x_4984 : vec4<f32> = u_xlat17;
            let x_4985 : vec2<f32> = vec2<f32>(x_4984.z, x_4984.w);
            let x_4987 : f32 = u_xlat11.z;
            txVec86 = vec3<f32>(x_4985.x, x_4985.y, x_4987);
            let x_4994 : vec3<f32> = txVec86;
            let x_4996 : f32 = textureSampleCompareLevel(x_AdditionalLightsShadowmapTexture, sampler_LinearClampCompare, x_4994.xy, x_4994.z);
            u_xlat87 = x_4996;
            let x_4998 : f32 = u_xlat13.y;
            let x_4999 : f32 = u_xlat87;
            let x_5001 : f32 = u_xlat86;
            u_xlat86 = ((x_4998 * x_4999) + x_5001);
            let x_5004 : vec2<f32> = u_xlat67;
            let x_5006 : f32 = u_xlat11.z;
            txVec87 = vec3<f32>(x_5004.x, x_5004.y, x_5006);
            let x_5013 : vec3<f32> = txVec87;
            let x_5015 : f32 = textureSampleCompareLevel(x_AdditionalLightsShadowmapTexture, sampler_LinearClampCompare, x_5013.xy, x_5013.z);
            u_xlat87 = x_5015;
            let x_5017 : f32 = u_xlat13.z;
            let x_5018 : f32 = u_xlat87;
            let x_5020 : f32 = u_xlat86;
            u_xlat86 = ((x_5017 * x_5018) + x_5020);
            let x_5023 : vec4<f32> = u_xlat12;
            let x_5024 : vec2<f32> = vec2<f32>(x_5023.x, x_5023.y);
            let x_5026 : f32 = u_xlat11.z;
            txVec88 = vec3<f32>(x_5024.x, x_5024.y, x_5026);
            let x_5033 : vec3<f32> = txVec88;
            let x_5035 : f32 = textureSampleCompareLevel(x_AdditionalLightsShadowmapTexture, sampler_LinearClampCompare, x_5033.xy, x_5033.z);
            u_xlat87 = x_5035;
            let x_5037 : f32 = u_xlat13.w;
            let x_5038 : f32 = u_xlat87;
            let x_5040 : f32 = u_xlat86;
            u_xlat85 = ((x_5037 * x_5038) + x_5040);
          }
        }
      } else {
        let x_5044 : vec4<f32> = u_xlat11;
        let x_5045 : vec2<f32> = vec2<f32>(x_5044.x, x_5044.y);
        let x_5047 : f32 = u_xlat11.z;
        txVec89 = vec3<f32>(x_5045.x, x_5045.y, x_5047);
        let x_5054 : vec3<f32> = txVec89;
        let x_5056 : f32 = textureSampleCompareLevel(x_AdditionalLightsShadowmapTexture, sampler_LinearClampCompare, x_5054.xy, x_5054.z);
        u_xlat85 = x_5056;
      }
      let x_5057 : i32 = u_xlati81;
      let x_5059 : f32 = x_246.x_AdditionalShadowParams[x_5057].x;
      u_xlat86 = (1.0f + -(x_5059));
      let x_5062 : f32 = u_xlat85;
      let x_5063 : i32 = u_xlati81;
      let x_5065 : f32 = x_246.x_AdditionalShadowParams[x_5063].x;
      let x_5067 : f32 = u_xlat86;
      u_xlat85 = ((x_5062 * x_5065) + x_5067);
      let x_5070 : f32 = u_xlat11.z;
      u_xlatb86 = (0.0f >= x_5070);
      let x_5074 : f32 = u_xlat11.z;
      u_xlatb87 = (x_5074 >= 1.0f);
      let x_5076 : bool = u_xlatb86;
      let x_5077 : bool = u_xlatb87;
      u_xlatb86 = (x_5076 | x_5077);
      let x_5079 : bool = u_xlatb86;
      let x_5080 : f32 = u_xlat85;
      u_xlat85 = select(x_5080, 1.0f, x_5079);
    } else {
      u_xlat85 = 1.0f;
    }
    let x_5083 : f32 = u_xlat85;
    u_xlat86 = (-(x_5083) + 1.0f);
    let x_5087 : f32 = u_xlat2.x;
    let x_5088 : f32 = u_xlat86;
    let x_5090 : f32 = u_xlat85;
    u_xlat85 = ((x_5087 * x_5088) + x_5090);
    let x_5092 : f32 = u_xlat82;
    let x_5093 : f32 = u_xlat85;
    u_xlat82 = (x_5092 * x_5093);
    let x_5095 : vec4<f32> = u_xlat4;
    let x_5097 : vec4<f32> = u_xlat10;
    u_xlat85 = dot(vec3<f32>(x_5095.x, x_5095.y, x_5095.z), vec3<f32>(x_5097.x, x_5097.y, x_5097.z));
    let x_5100 : f32 = u_xlat85;
    u_xlat85 = clamp(x_5100, 0.0f, 1.0f);
    let x_5102 : f32 = u_xlat82;
    let x_5103 : f32 = u_xlat85;
    u_xlat82 = (x_5102 * x_5103);
    let x_5105 : f32 = u_xlat82;
    let x_5107 : i32 = u_xlati81;
    let x_5109 : vec4<f32> = x_3674.x_AdditionalLightsColor[x_5107];
    let x_5111 : vec3<f32> = (vec3<f32>(x_5105, x_5105, x_5105) * vec3<f32>(x_5109.x, x_5109.y, x_5109.z));
    let x_5112 : vec4<f32> = u_xlat11;
    u_xlat11 = vec4<f32>(x_5111.x, x_5111.y, x_5111.z, x_5112.w);
    let x_5114 : vec4<f32> = u_xlat9;
    let x_5116 : f32 = u_xlat84;
    let x_5119 : vec3<f32> = u_xlat26;
    let x_5120 : vec3<f32> = ((vec3<f32>(x_5114.x, x_5114.y, x_5114.z) * vec3<f32>(x_5116, x_5116, x_5116)) + x_5119);
    let x_5121 : vec4<f32> = u_xlat9;
    u_xlat9 = vec4<f32>(x_5120.x, x_5120.y, x_5120.z, x_5121.w);
    let x_5123 : vec4<f32> = u_xlat9;
    let x_5125 : vec4<f32> = u_xlat9;
    u_xlat81 = dot(vec3<f32>(x_5123.x, x_5123.y, x_5123.z), vec3<f32>(x_5125.x, x_5125.y, x_5125.z));
    let x_5128 : f32 = u_xlat81;
    u_xlat81 = max(x_5128, 1.17549435e-38f);
    let x_5130 : f32 = u_xlat81;
    u_xlat81 = inverseSqrt(x_5130);
    let x_5132 : f32 = u_xlat81;
    let x_5134 : vec4<f32> = u_xlat9;
    let x_5136 : vec3<f32> = (vec3<f32>(x_5132, x_5132, x_5132) * vec3<f32>(x_5134.x, x_5134.y, x_5134.z));
    let x_5137 : vec4<f32> = u_xlat9;
    u_xlat9 = vec4<f32>(x_5136.x, x_5136.y, x_5136.z, x_5137.w);
    let x_5139 : vec4<f32> = u_xlat4;
    let x_5141 : vec4<f32> = u_xlat9;
    u_xlat81 = dot(vec3<f32>(x_5139.x, x_5139.y, x_5139.z), vec3<f32>(x_5141.x, x_5141.y, x_5141.z));
    let x_5144 : f32 = u_xlat81;
    u_xlat81 = clamp(x_5144, 0.0f, 1.0f);
    let x_5146 : vec4<f32> = u_xlat10;
    let x_5148 : vec4<f32> = u_xlat9;
    u_xlat82 = dot(vec3<f32>(x_5146.x, x_5146.y, x_5146.z), vec3<f32>(x_5148.x, x_5148.y, x_5148.z));
    let x_5151 : f32 = u_xlat82;
    u_xlat82 = clamp(x_5151, 0.0f, 1.0f);
    let x_5153 : f32 = u_xlat81;
    let x_5154 : f32 = u_xlat81;
    u_xlat81 = (x_5153 * x_5154);
    let x_5156 : f32 = u_xlat81;
    let x_5158 : f32 = u_xlat59.x;
    u_xlat81 = ((x_5156 * x_5158) + 1.00001001358032226562f);
    let x_5161 : f32 = u_xlat82;
    let x_5162 : f32 = u_xlat82;
    u_xlat82 = (x_5161 * x_5162);
    let x_5164 : f32 = u_xlat81;
    let x_5165 : f32 = u_xlat81;
    u_xlat81 = (x_5164 * x_5165);
    let x_5167 : f32 = u_xlat82;
    u_xlat82 = max(x_5167, 0.10000000149011611938f);
    let x_5169 : f32 = u_xlat81;
    let x_5170 : f32 = u_xlat82;
    u_xlat81 = (x_5169 * x_5170);
    let x_5173 : f32 = u_xlat7.x;
    let x_5174 : f32 = u_xlat81;
    u_xlat81 = (x_5173 * x_5174);
    let x_5176 : f32 = u_xlat83;
    let x_5177 : f32 = u_xlat81;
    u_xlat81 = (x_5176 / x_5177);
    let x_5179 : f32 = u_xlat81;
    let x_5182 : vec3<f32> = u_xlat5;
    let x_5183 : vec3<f32> = ((vec3<f32>(x_5179, x_5179, x_5179) * vec3<f32>(0.03999999910593032837f, 0.03999999910593032837f, 0.03999999910593032837f)) + x_5182);
    let x_5184 : vec4<f32> = u_xlat9;
    u_xlat9 = vec4<f32>(x_5183.x, x_5183.y, x_5183.z, x_5184.w);
    let x_5186 : vec4<f32> = u_xlat9;
    let x_5188 : vec4<f32> = u_xlat11;
    let x_5191 : vec4<f32> = u_xlat8;
    let x_5193 : vec3<f32> = ((vec3<f32>(x_5186.x, x_5186.y, x_5186.z) * vec3<f32>(x_5188.x, x_5188.y, x_5188.z)) + vec3<f32>(x_5191.x, x_5191.y, x_5191.z));
    let x_5194 : vec4<f32> = u_xlat8;
    u_xlat8 = vec4<f32>(x_5193.x, x_5193.y, x_5193.z, x_5194.w);

    continuing {
      let x_5196 : u32 = u_xlatu_loop_1;
      u_xlatu_loop_1 = (x_5196 + bitcast<u32>(1i));
    }
  }
  let x_5198 : vec3<f32> = u_xlat28;
  let x_5199 : vec3<f32> = u_xlat33;
  let x_5202 : vec4<f32> = u_xlat6;
  u_xlat0 = ((x_5198 * vec3<f32>(x_5199.x, x_5199.x, x_5199.x)) + vec3<f32>(x_5202.x, x_5202.y, x_5202.z));
  let x_5205 : vec4<f32> = u_xlat8;
  let x_5207 : vec3<f32> = u_xlat0;
  u_xlat0 = (vec3<f32>(x_5205.x, x_5205.y, x_5205.z) + x_5207);
  let x_5209 : vec4<f32> = vs_INTERP6;
  let x_5211 : vec3<f32> = u_xlat1;
  let x_5213 : vec3<f32> = u_xlat0;
  u_xlat0 = ((vec3<f32>(x_5209.w, x_5209.w, x_5209.w) * x_5211) + x_5213);
  let x_5216 : f32 = u_xlat29;
  let x_5217 : f32 = u_xlat29;
  u_xlat78 = (x_5216 * -(x_5217));
  let x_5220 : f32 = u_xlat78;
  u_xlat78 = exp2(x_5220);
  let x_5222 : vec3<f32> = u_xlat0;
  let x_5224 : vec4<f32> = x_128.unity_FogColor;
  u_xlat0 = (x_5222 + -(vec3<f32>(x_5224.x, x_5224.y, x_5224.z)));
  let x_5230 : f32 = u_xlat78;
  let x_5232 : vec3<f32> = u_xlat0;
  let x_5235 : vec4<f32> = x_128.unity_FogColor;
  let x_5237 : vec3<f32> = ((vec3<f32>(x_5230, x_5230, x_5230) * x_5232) + vec3<f32>(x_5235.x, x_5235.y, x_5235.z));
  let x_5238 : vec4<f32> = SV_Target0;
  SV_Target0 = vec4<f32>(x_5237.x, x_5237.y, x_5237.z, x_5238.w);
  let x_5240 : bool = u_xlatb55;
  let x_5241 : f32 = u_xlat79;
  SV_Target0.w = select(1.0f, x_5241, x_5240);
  return;
}

struct main_out {
  @location(0)
  SV_Target0_1 : vec4<f32>,
}

@fragment
fn main(@location(4) vs_INTERP9_param : vec3<f32>, @location(0) vs_INTERP4_param : vec4<f32>, @location(1) vs_INTERP5_param : vec4<f32>, @location(2) vs_INTERP6_param : vec4<f32>, @location(3) vs_INTERP8_param : vec3<f32>, @builtin(position) gl_FragCoord_param : vec4<f32>) -> main_out {
  vs_INTERP9 = vs_INTERP9_param;
  vs_INTERP4 = vs_INTERP4_param;
  vs_INTERP5 = vs_INTERP5_param;
  vs_INTERP6 = vs_INTERP6_param;
  vs_INTERP8 = vs_INTERP8_param;
  gl_FragCoord = gl_FragCoord_param;
  main_1();
  return main_out(SV_Target0);
}


