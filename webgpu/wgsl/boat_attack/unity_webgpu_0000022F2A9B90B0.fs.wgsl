type Arr = array<vec4<f32>, 2u>;

struct UnityPerDraw {
  unity_ObjectToWorld : mat4x4<f32>,
  unity_WorldToObject : mat4x4<f32>,
  unity_LODFade : vec4<f32>,
  unity_WorldTransformParams : vec4<f32>,
  unity_RenderingLayer : vec4<f32>,
  unity_LightData : vec4<f32>,
  unity_LightIndices : Arr,
  unity_ProbesOcclusion : vec4<f32>,
  unity_SpecCube0_HDR : vec4<f32>,
  unity_SpecCube1_HDR : vec4<f32>,
  unity_SpecCube0_BoxMax : vec4<f32>,
  unity_SpecCube0_BoxMin : vec4<f32>,
  unity_SpecCube0_ProbePosition : vec4<f32>,
  unity_SpecCube1_BoxMax : vec4<f32>,
  unity_SpecCube1_BoxMin : vec4<f32>,
  unity_SpecCube1_ProbePosition : vec4<f32>,
  unity_LightmapST : vec4<f32>,
  unity_DynamicLightmapST : vec4<f32>,
  unity_SHAr : vec4<f32>,
  unity_SHAg : vec4<f32>,
  unity_SHAb : vec4<f32>,
  unity_SHBr : vec4<f32>,
  unity_SHBg : vec4<f32>,
  unity_SHBb : vec4<f32>,
  unity_SHC : vec4<f32>,
  unity_RendererBounds_Min : vec4<f32>,
  unity_RendererBounds_Max : vec4<f32>,
  unity_MatrixPreviousM : mat4x4<f32>,
  unity_MatrixPreviousMI : mat4x4<f32>,
  unity_MotionVectorsParams : vec4<f32>,
  unity_SpriteColor : vec4<f32>,
  unity_SpriteProps : vec4<f32>,
}

struct PGlobals {
  x_ScaledScreenParams : vec4<f32>,
  x_GlobalMipBias : vec2<f32>,
  x_AlphaToMaskAvailable : f32,
  @size(4)
  padding : u32,
  x_MainLightPosition : vec4<f32>,
  x_MainLightColor : vec4<f32>,
  x_AmbientOcclusionParam : vec4<f32>,
  x_AdditionalLightsCount : vec4<f32>,
  x_WorldSpaceCameraPos : vec3<f32>,
  @size(4)
  padding_1 : u32,
  unity_OrthoParams : vec4<f32>,
  x_ScaleBiasRt : vec4<f32>,
  unity_MatrixV : mat4x4<f32>,
}

struct UnityPerMaterial {
  Texture2D_B222E8F_TexelSize : vec4<f32>,
  Color_C30C7CA3 : vec4<f32>,
  Texture2D_D9BFD5F1_TexelSize : vec4<f32>,
}

type Arr_1 = array<mat4x4<f32>, 5u>;

struct MainLightShadows {
  x_MainLightWorldToShadow : Arr_1,
  x_CascadeShadowSplitSpheres0 : vec4<f32>,
  x_CascadeShadowSplitSpheres1 : vec4<f32>,
  x_CascadeShadowSplitSpheres2 : vec4<f32>,
  x_CascadeShadowSplitSpheres3 : vec4<f32>,
  x_CascadeShadowSplitSphereRadii : vec4<f32>,
  x_MainLightShadowOffset0 : vec4<f32>,
  x_MainLightShadowOffset1 : vec4<f32>,
  x_MainLightShadowParams : vec4<f32>,
  x_MainLightShadowmapSize : vec4<f32>,
}

struct strided_arr {
  @size(16)
  el : f32,
}

type Arr_2 = array<strided_arr, 8u>;

struct LightCookies {
  x_MainLightWorldToLight : mat4x4<f32>,
  x_AdditionalLightsCookieEnableBits : Arr_2,
  x_MainLightCookieTextureFormat : f32,
  x_AdditionalLightsCookieAtlasTextureFormat : f32,
}

type Arr_3 = array<vec4<f32>, 256u>;

type Arr_4 = array<vec4<f32>, 256u>;

type Arr_5 = array<vec4<f32>, 256u>;

type Arr_6 = array<vec4<f32>, 256u>;

type Arr_7 = array<vec4<f32>, 256u>;

struct strided_arr_1 {
  @size(16)
  el : f32,
}

type Arr_8 = array<strided_arr_1, 256u>;

type Arr_9 = array<vec4<f32>, 256u>;

type Arr_10 = array<strided_arr_1, 256u>;

struct AdditionalLights {
  x_AdditionalLightsPosition : Arr_9,
  x_AdditionalLightsColor : Arr_9,
  x_AdditionalLightsAttenuation : Arr_9,
  x_AdditionalLightsSpotDir : Arr_9,
  x_AdditionalLightsOcclusionProbes : Arr_9,
  x_AdditionalLightsLayerMasks : Arr_10,
}

type Arr_11 = array<mat4x4<f32>, 256u>;

struct AdditionalLightsCookies {
  x_AdditionalLightsWorldToLights : Arr_11,
  x_AdditionalLightsCookieAtlasUVRects : Arr_9,
  x_AdditionalLightsLightTypes : Arr_10,
}

var<private> gl_FragCoord : vec4<f32>;

var<private> vs_INTERP1 : vec3<f32>;

var<private> vs_INTERP2 : vec4<f32>;

@group(1) @binding(2) var<uniform> x_60 : UnityPerDraw;

@group(0) @binding(7) var Texture2D_B222E8F : texture_2d<f32>;

@group(0) @binding(15) var samplerTexture2D_B222E8F : sampler;

var<private> vs_INTERP3 : vec4<f32>;

@group(1) @binding(0) var<uniform> x_139 : PGlobals;

@group(1) @binding(6) var<uniform> x_149 : UnityPerMaterial;

@group(0) @binding(8) var Texture2D_D9BFD5F1 : texture_2d<f32>;

@group(0) @binding(16) var samplerTexture2D_D9BFD5F1 : sampler;

var<private> vs_INTERP4 : vec4<f32>;

var<private> vs_INTERP0 : vec3<f32>;

@group(1) @binding(3) var<uniform> x_253 : MainLightShadows;

@group(0) @binding(4) var x_MainLightShadowmapTexture : texture_depth_2d;

@group(0) @binding(12) var sampler_MainLightShadowmapTexture : sampler_comparison;

@group(0) @binding(2) var unity_LightmapInd : texture_2d<f32>;

@group(0) @binding(10) var samplerunity_Lightmap : sampler;

var<private> vs_INTERP5 : vec2<f32>;

@group(0) @binding(1) var unity_Lightmap : texture_2d<f32>;

@group(0) @binding(3) var x_ScreenSpaceOcclusionTexture : texture_2d<f32>;

@group(0) @binding(11) var sampler_ScreenSpaceOcclusionTexture : sampler;

@group(1) @binding(4) var<uniform> x_3333 : LightCookies;

@group(0) @binding(5) var x_MainLightCookieTexture : texture_2d<f32>;

@group(0) @binding(13) var sampler_MainLightCookieTexture : sampler;

@group(0) @binding(0) var unity_SpecCube0 : texture_cube<f32>;

@group(0) @binding(9) var samplerunity_SpecCube0 : sampler;

@group(1) @binding(1) var<uniform> x_3817 : AdditionalLights;

@group(1) @binding(5) var<uniform> x_3926 : AdditionalLightsCookies;

@group(0) @binding(6) var x_AdditionalLightsCookieAtlasTexture : texture_2d<f32>;

@group(0) @binding(14) var sampler_AdditionalLightsCookieAtlasTexture : sampler;

var<private> SV_Target0 : vec4<f32>;

fn main_1() {
  var hlslcc_FragCoord : vec4<f32>;
  var u_xlat0 : vec3<f32>;
  var u_xlatb22 : vec2<bool>;
  var u_xlat22 : vec3<f32>;
  var u_xlat1 : vec3<f32>;
  var u_xlat2 : vec4<f32>;
  var u_xlat3 : vec4<f32>;
  var u_xlat4 : vec4<f32>;
  var u_xlat5 : vec3<f32>;
  var u_xlat6 : vec4<f32>;
  var u_xlat7 : vec4<f32>;
  var u_xlat28 : vec3<f32>;
  var u_xlat8 : vec4<f32>;
  var u_xlatb2 : vec4<bool>;
  var u_xlatu0 : u32;
  var u_xlati0 : i32;
  var u_xlatb0 : bool;
  var u_xlatb67 : bool;
  var txVec0 : vec3<f32>;
  var txVec1 : vec3<f32>;
  var txVec2 : vec3<f32>;
  var txVec3 : vec3<f32>;
  var u_xlat67 : f32;
  var u_xlatb68 : bool;
  var u_xlat47 : vec2<f32>;
  var u_xlat52 : vec2<f32>;
  var u_xlat9 : vec4<f32>;
  var u_xlat10 : vec4<f32>;
  var u_xlat11 : vec4<f32>;
  var u_xlat12 : vec4<f32>;
  var u_xlat13 : vec4<f32>;
  var u_xlat14 : vec4<f32>;
  var u_xlat68 : f32;
  var txVec4 : vec3<f32>;
  var txVec5 : vec3<f32>;
  var u_xlat25 : vec3<f32>;
  var txVec6 : vec3<f32>;
  var txVec7 : vec3<f32>;
  var txVec8 : vec3<f32>;
  var txVec9 : vec3<f32>;
  var txVec10 : vec3<f32>;
  var txVec11 : vec3<f32>;
  var txVec12 : vec3<f32>;
  var u_xlat29 : vec3<f32>;
  var u_xlat15 : vec4<f32>;
  var u_xlat16 : vec4<f32>;
  var u_xlat30 : vec2<f32>;
  var u_xlat58 : vec2<f32>;
  var u_xlat53 : vec2<f32>;
  var u_xlat17 : vec4<f32>;
  var u_xlat18 : vec4<f32>;
  var u_xlat19 : vec4<f32>;
  var txVec13 : vec3<f32>;
  var txVec14 : vec3<f32>;
  var u_xlat71 : f32;
  var txVec15 : vec3<f32>;
  var txVec16 : vec3<f32>;
  var txVec17 : vec3<f32>;
  var txVec18 : vec3<f32>;
  var txVec19 : vec3<f32>;
  var txVec20 : vec3<f32>;
  var txVec21 : vec3<f32>;
  var txVec22 : vec3<f32>;
  var txVec23 : vec3<f32>;
  var txVec24 : vec3<f32>;
  var txVec25 : vec3<f32>;
  var txVec26 : vec3<f32>;
  var txVec27 : vec3<f32>;
  var txVec28 : vec3<f32>;
  var txVec29 : vec3<f32>;
  var u_xlatb3 : bool;
  var u_xlatb25 : vec3<bool>;
  var u_xlat23 : vec3<f32>;
  var x_1778 : f32;
  var u_xlat69 : f32;
  var u_xlatb47 : bool;
  var x_1829 : f32;
  var x_1911 : f32;
  var x_1924 : f32;
  var x_1936 : f32;
  var u_xlat70 : f32;
  var u_xlat50 : f32;
  var txVec30 : vec3<f32>;
  var txVec31 : vec3<f32>;
  var txVec32 : vec3<f32>;
  var txVec33 : vec3<f32>;
  var u_xlatb72 : bool;
  var u_xlat54 : vec2<f32>;
  var u_xlat72 : f32;
  var txVec34 : vec3<f32>;
  var u_xlat73 : f32;
  var txVec35 : vec3<f32>;
  var txVec36 : vec3<f32>;
  var txVec37 : vec3<f32>;
  var txVec38 : vec3<f32>;
  var txVec39 : vec3<f32>;
  var txVec40 : vec3<f32>;
  var txVec41 : vec3<f32>;
  var txVec42 : vec3<f32>;
  var u_xlat31 : vec3<f32>;
  var u_xlat32 : vec2<f32>;
  var u_xlat60 : vec2<f32>;
  var u_xlat55 : vec2<f32>;
  var u_xlat20 : vec4<f32>;
  var u_xlat21 : vec4<f32>;
  var txVec43 : vec3<f32>;
  var txVec44 : vec3<f32>;
  var txVec45 : vec3<f32>;
  var txVec46 : vec3<f32>;
  var txVec47 : vec3<f32>;
  var txVec48 : vec3<f32>;
  var txVec49 : vec3<f32>;
  var txVec50 : vec3<f32>;
  var txVec51 : vec3<f32>;
  var txVec52 : vec3<f32>;
  var txVec53 : vec3<f32>;
  var txVec54 : vec3<f32>;
  var txVec55 : vec3<f32>;
  var txVec56 : vec3<f32>;
  var txVec57 : vec3<f32>;
  var txVec58 : vec3<f32>;
  var txVec59 : vec3<f32>;
  var x_3282 : f32;
  var u_xlat24 : f32;
  var u_xlatb8 : vec2<bool>;
  var x_3416 : f32;
  var x_3427 : vec3<f32>;
  var u_xlatu_loop_1 : u32;
  var u_xlatu71 : u32;
  var u_xlati72 : i32;
  var indexable : array<vec4<u32>, 4u>;
  var u_xlat74 : f32;
  var u_xlatu74 : u32;
  var u_xlati75 : i32;
  var u_xlati74 : i32;
  var u_xlati76 : i32;
  var u_xlatb74 : bool;
  var u_xlatb55 : vec2<bool>;
  var x_4218 : f32;
  var x_4231 : f32;
  var x_4283 : f32;
  var x_4294 : vec3<f32>;
  var u_xlat_precise_vec4 : vec4<f32>;
  var u_xlat_precise_ivec4 : vec4<i32>;
  var u_xlat_precise_bvec4 : vec4<bool>;
  var u_xlat_precise_uvec4 : vec4<u32>;
  let x_13 : vec4<f32> = gl_FragCoord;
  let x_14 : vec3<f32> = vec3<f32>(x_13.x, x_13.y, x_13.z);
  let x_20 : f32 = gl_FragCoord.w;
  hlslcc_FragCoord = vec4<f32>(x_14.x, x_14.y, x_14.z, (1.0f / x_20));
  let x_30 : vec3<f32> = vs_INTERP1;
  let x_31 : vec3<f32> = vs_INTERP1;
  u_xlat0.x = dot(x_30, x_31);
  let x_37 : f32 = u_xlat0.x;
  u_xlat0.x = sqrt(x_37);
  let x_41 : f32 = u_xlat0.x;
  u_xlat0.x = (1.0f / x_41);
  let x_51 : f32 = vs_INTERP2.w;
  u_xlatb22.x = (0.0f < x_51);
  let x_65 : f32 = x_60.unity_WorldTransformParams.w;
  u_xlatb22.y = (x_65 >= 0.0f);
  let x_71 : bool = u_xlatb22.x;
  u_xlat22.x = select(-1.0f, 1.0f, x_71);
  let x_76 : bool = u_xlatb22.y;
  u_xlat22.y = select(-1.0f, 1.0f, x_76);
  let x_80 : f32 = u_xlat22.y;
  let x_82 : f32 = u_xlat22.x;
  u_xlat22.x = (x_80 * x_82);
  let x_86 : vec3<f32> = vs_INTERP1;
  let x_88 : vec4<f32> = vs_INTERP2;
  u_xlat1 = (vec3<f32>(x_86.z, x_86.x, x_86.y) * vec3<f32>(x_88.y, x_88.z, x_88.x));
  let x_91 : vec3<f32> = vs_INTERP1;
  let x_93 : vec4<f32> = vs_INTERP2;
  let x_96 : vec3<f32> = u_xlat1;
  u_xlat1 = ((vec3<f32>(x_91.y, x_91.z, x_91.x) * vec3<f32>(x_93.z, x_93.x, x_93.y)) + -(x_96));
  let x_99 : vec3<f32> = u_xlat22;
  let x_101 : vec3<f32> = u_xlat1;
  u_xlat22 = (vec3<f32>(x_99.x, x_99.x, x_99.x) * x_101);
  let x_103 : vec3<f32> = u_xlat0;
  let x_105 : vec3<f32> = vs_INTERP1;
  u_xlat1 = (vec3<f32>(x_103.x, x_103.x, x_103.x) * x_105);
  let x_108 : vec3<f32> = u_xlat0;
  let x_110 : vec4<f32> = vs_INTERP2;
  let x_112 : vec3<f32> = (vec3<f32>(x_108.x, x_108.x, x_108.x) * vec3<f32>(x_110.x, x_110.y, x_110.z));
  let x_113 : vec4<f32> = u_xlat2;
  u_xlat2 = vec4<f32>(x_112.x, x_112.y, x_112.z, x_113.w);
  let x_116 : vec3<f32> = u_xlat22;
  let x_117 : vec3<f32> = u_xlat0;
  let x_119 : vec3<f32> = (x_116 * vec3<f32>(x_117.x, x_117.x, x_117.x));
  let x_120 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_119.x, x_119.y, x_119.z, x_120.w);
  let x_135 : vec4<f32> = vs_INTERP3;
  let x_142 : f32 = x_139.x_GlobalMipBias.x;
  let x_143 : vec4<f32> = textureSampleBias(Texture2D_B222E8F, samplerTexture2D_B222E8F, vec2<f32>(x_135.x, x_135.y), x_142);
  u_xlat4 = x_143;
  let x_145 : vec4<f32> = u_xlat4;
  let x_152 : vec4<f32> = x_149.Color_C30C7CA3;
  u_xlat5 = (vec3<f32>(x_145.x, x_145.y, x_145.z) * vec3<f32>(x_152.x, x_152.y, x_152.z));
  let x_161 : vec4<f32> = vs_INTERP3;
  let x_164 : f32 = x_139.x_GlobalMipBias.x;
  let x_165 : vec4<f32> = textureSampleBias(Texture2D_D9BFD5F1, samplerTexture2D_D9BFD5F1, vec2<f32>(x_161.x, x_161.y), x_164);
  u_xlat6 = vec4<f32>(x_165.w, x_165.x, x_165.y, x_165.z);
  let x_168 : vec4<f32> = u_xlat6;
  u_xlat7 = ((vec4<f32>(x_168.y, x_168.z, x_168.w, x_168.x) * vec4<f32>(2.0f, 2.0f, 2.0f, 2.0f)) + vec4<f32>(-1.0f, -1.0f, -1.0f, -1.0f));
  let x_175 : vec4<f32> = u_xlat7;
  let x_176 : vec4<f32> = u_xlat7;
  u_xlat0.x = dot(x_175, x_176);
  let x_180 : f32 = u_xlat0.x;
  u_xlat0.x = inverseSqrt(x_180);
  let x_184 : vec3<f32> = u_xlat0;
  let x_186 : vec4<f32> = u_xlat7;
  u_xlat28 = (vec3<f32>(x_184.x, x_184.x, x_184.x) * vec3<f32>(x_186.x, x_186.y, x_186.z));
  let x_191 : f32 = vs_INTERP4.y;
  u_xlat0.x = (x_191 * 200.0f);
  let x_196 : f32 = u_xlat0.x;
  u_xlat0.x = min(x_196, 1.0f);
  let x_199 : vec3<f32> = u_xlat0;
  let x_201 : vec4<f32> = u_xlat4;
  let x_203 : vec3<f32> = (vec3<f32>(x_199.x, x_199.x, x_199.x) * vec3<f32>(x_201.x, x_201.y, x_201.z));
  let x_204 : vec4<f32> = u_xlat4;
  u_xlat4 = vec4<f32>(x_203.x, x_203.y, x_203.z, x_204.w);
  let x_206 : vec4<f32> = u_xlat3;
  let x_208 : vec3<f32> = u_xlat28;
  let x_210 : vec3<f32> = (vec3<f32>(x_206.x, x_206.y, x_206.z) * vec3<f32>(x_208.y, x_208.y, x_208.y));
  let x_211 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_210.x, x_210.y, x_210.z, x_211.w);
  let x_213 : vec3<f32> = u_xlat28;
  let x_215 : vec4<f32> = u_xlat2;
  let x_218 : vec4<f32> = u_xlat3;
  let x_220 : vec3<f32> = ((vec3<f32>(x_213.x, x_213.x, x_213.x) * vec3<f32>(x_215.x, x_215.y, x_215.z)) + vec3<f32>(x_218.x, x_218.y, x_218.z));
  let x_221 : vec4<f32> = u_xlat2;
  u_xlat2 = vec4<f32>(x_220.x, x_220.y, x_220.z, x_221.w);
  let x_223 : vec3<f32> = u_xlat28;
  let x_225 : vec3<f32> = u_xlat1;
  let x_227 : vec4<f32> = u_xlat2;
  u_xlat1 = ((vec3<f32>(x_223.z, x_223.z, x_223.z) * x_225) + vec3<f32>(x_227.x, x_227.y, x_227.z));
  let x_230 : vec3<f32> = u_xlat1;
  let x_231 : vec3<f32> = u_xlat1;
  u_xlat0.x = dot(x_230, x_231);
  let x_235 : f32 = u_xlat0.x;
  u_xlat0.x = max(x_235, 1.17549435e-37f);
  let x_240 : f32 = u_xlat0.x;
  u_xlat0.x = inverseSqrt(x_240);
  let x_243 : vec3<f32> = u_xlat0;
  let x_245 : vec3<f32> = u_xlat1;
  u_xlat1 = (vec3<f32>(x_243.x, x_243.x, x_243.x) * x_245);
  let x_248 : vec3<f32> = vs_INTERP0;
  let x_255 : vec4<f32> = x_253.x_CascadeShadowSplitSpheres0;
  let x_258 : vec3<f32> = (x_248 + -(vec3<f32>(x_255.x, x_255.y, x_255.z)));
  let x_259 : vec4<f32> = u_xlat2;
  u_xlat2 = vec4<f32>(x_258.x, x_258.y, x_258.z, x_259.w);
  let x_261 : vec3<f32> = vs_INTERP0;
  let x_264 : vec4<f32> = x_253.x_CascadeShadowSplitSpheres1;
  let x_267 : vec3<f32> = (x_261 + -(vec3<f32>(x_264.x, x_264.y, x_264.z)));
  let x_268 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_267.x, x_267.y, x_267.z, x_268.w);
  let x_270 : vec3<f32> = vs_INTERP0;
  let x_272 : vec4<f32> = x_253.x_CascadeShadowSplitSpheres2;
  let x_275 : vec3<f32> = (x_270 + -(vec3<f32>(x_272.x, x_272.y, x_272.z)));
  let x_276 : vec4<f32> = u_xlat7;
  u_xlat7 = vec4<f32>(x_275.x, x_275.y, x_275.z, x_276.w);
  let x_279 : vec3<f32> = vs_INTERP0;
  let x_282 : vec4<f32> = x_253.x_CascadeShadowSplitSpheres3;
  let x_285 : vec3<f32> = (x_279 + -(vec3<f32>(x_282.x, x_282.y, x_282.z)));
  let x_286 : vec4<f32> = u_xlat8;
  u_xlat8 = vec4<f32>(x_285.x, x_285.y, x_285.z, x_286.w);
  let x_288 : vec4<f32> = u_xlat2;
  let x_290 : vec4<f32> = u_xlat2;
  u_xlat2.x = dot(vec3<f32>(x_288.x, x_288.y, x_288.z), vec3<f32>(x_290.x, x_290.y, x_290.z));
  let x_294 : vec4<f32> = u_xlat3;
  let x_296 : vec4<f32> = u_xlat3;
  u_xlat2.y = dot(vec3<f32>(x_294.x, x_294.y, x_294.z), vec3<f32>(x_296.x, x_296.y, x_296.z));
  let x_300 : vec4<f32> = u_xlat7;
  let x_302 : vec4<f32> = u_xlat7;
  u_xlat2.z = dot(vec3<f32>(x_300.x, x_300.y, x_300.z), vec3<f32>(x_302.x, x_302.y, x_302.z));
  let x_306 : vec4<f32> = u_xlat8;
  let x_308 : vec4<f32> = u_xlat8;
  u_xlat2.w = dot(vec3<f32>(x_306.x, x_306.y, x_306.z), vec3<f32>(x_308.x, x_308.y, x_308.z));
  let x_315 : vec4<f32> = u_xlat2;
  let x_318 : vec4<f32> = x_253.x_CascadeShadowSplitSphereRadii;
  u_xlatb2 = (x_315 < x_318);
  let x_321 : bool = u_xlatb2.x;
  u_xlat3.x = select(0.0f, 1.0f, x_321);
  let x_325 : bool = u_xlatb2.y;
  u_xlat3.y = select(0.0f, 1.0f, x_325);
  let x_329 : bool = u_xlatb2.z;
  u_xlat3.z = select(0.0f, 1.0f, x_329);
  let x_333 : bool = u_xlatb2.w;
  u_xlat3.w = select(0.0f, 1.0f, x_333);
  let x_337 : bool = u_xlatb2.x;
  u_xlat2.x = select(-0.0f, -1.0f, x_337);
  let x_342 : bool = u_xlatb2.y;
  u_xlat2.y = select(-0.0f, -1.0f, x_342);
  let x_346 : bool = u_xlatb2.z;
  u_xlat2.z = select(-0.0f, -1.0f, x_346);
  let x_349 : vec4<f32> = u_xlat2;
  let x_351 : vec4<f32> = u_xlat3;
  let x_353 : vec3<f32> = (vec3<f32>(x_349.x, x_349.y, x_349.z) + vec3<f32>(x_351.y, x_351.z, x_351.w));
  let x_354 : vec4<f32> = u_xlat2;
  u_xlat2 = vec4<f32>(x_353.x, x_353.y, x_353.z, x_354.w);
  let x_356 : vec4<f32> = u_xlat2;
  let x_359 : vec3<f32> = max(vec3<f32>(x_356.x, x_356.y, x_356.z), vec3<f32>(0.0f, 0.0f, 0.0f));
  let x_360 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_360.x, x_359.x, x_359.y, x_359.z);
  let x_362 : vec4<f32> = u_xlat3;
  u_xlat0.x = dot(x_362, vec4<f32>(4.0f, 3.0f, 2.0f, 1.0f));
  let x_369 : f32 = u_xlat0.x;
  u_xlat0.x = (-(x_369) + 4.0f);
  let x_376 : f32 = u_xlat0.x;
  u_xlatu0 = u32(x_376);
  let x_380 : u32 = u_xlatu0;
  u_xlati0 = (bitcast<i32>(x_380) << bitcast<u32>(2i));
  let x_383 : vec3<f32> = vs_INTERP0;
  let x_386 : i32 = u_xlati0;
  let x_389 : i32 = u_xlati0;
  let x_393 : vec4<f32> = x_253.x_MainLightWorldToShadow[((x_386 + 1i) / 4i)][((x_389 + 1i) % 4i)];
  let x_395 : vec3<f32> = (vec3<f32>(x_383.y, x_383.y, x_383.y) * vec3<f32>(x_393.x, x_393.y, x_393.z));
  let x_396 : vec4<f32> = u_xlat2;
  u_xlat2 = vec4<f32>(x_395.x, x_395.y, x_395.z, x_396.w);
  let x_398 : i32 = u_xlati0;
  let x_400 : i32 = u_xlati0;
  let x_403 : vec4<f32> = x_253.x_MainLightWorldToShadow[(x_398 / 4i)][(x_400 % 4i)];
  let x_405 : vec3<f32> = vs_INTERP0;
  let x_408 : vec4<f32> = u_xlat2;
  let x_410 : vec3<f32> = ((vec3<f32>(x_403.x, x_403.y, x_403.z) * vec3<f32>(x_405.x, x_405.x, x_405.x)) + vec3<f32>(x_408.x, x_408.y, x_408.z));
  let x_411 : vec4<f32> = u_xlat2;
  u_xlat2 = vec4<f32>(x_410.x, x_410.y, x_410.z, x_411.w);
  let x_413 : i32 = u_xlati0;
  let x_416 : i32 = u_xlati0;
  let x_420 : vec4<f32> = x_253.x_MainLightWorldToShadow[((x_413 + 2i) / 4i)][((x_416 + 2i) % 4i)];
  let x_422 : vec3<f32> = vs_INTERP0;
  let x_425 : vec4<f32> = u_xlat2;
  let x_427 : vec3<f32> = ((vec3<f32>(x_420.x, x_420.y, x_420.z) * vec3<f32>(x_422.z, x_422.z, x_422.z)) + vec3<f32>(x_425.x, x_425.y, x_425.z));
  let x_428 : vec4<f32> = u_xlat2;
  u_xlat2 = vec4<f32>(x_427.x, x_427.y, x_427.z, x_428.w);
  let x_430 : vec4<f32> = u_xlat2;
  let x_432 : i32 = u_xlati0;
  let x_435 : i32 = u_xlati0;
  let x_439 : vec4<f32> = x_253.x_MainLightWorldToShadow[((x_432 + 3i) / 4i)][((x_435 + 3i) % 4i)];
  let x_441 : vec3<f32> = (vec3<f32>(x_430.x, x_430.y, x_430.z) + vec3<f32>(x_439.x, x_439.y, x_439.z));
  let x_442 : vec4<f32> = u_xlat2;
  u_xlat2 = vec4<f32>(x_441.x, x_441.y, x_441.z, x_442.w);
  let x_447 : f32 = x_253.x_MainLightShadowParams.y;
  u_xlatb0 = (0.0f < x_447);
  let x_449 : bool = u_xlatb0;
  if (x_449) {
    let x_454 : f32 = x_253.x_MainLightShadowParams.y;
    u_xlatb67 = (x_454 == 1.0f);
    let x_456 : bool = u_xlatb67;
    if (x_456) {
      let x_459 : vec4<f32> = u_xlat2;
      let x_463 : vec4<f32> = x_253.x_MainLightShadowOffset0;
      u_xlat3 = (vec4<f32>(x_459.x, x_459.y, x_459.x, x_459.y) + x_463);
      let x_466 : vec4<f32> = u_xlat3;
      let x_467 : vec2<f32> = vec2<f32>(x_466.x, x_466.y);
      let x_469 : f32 = u_xlat2.z;
      txVec0 = vec3<f32>(x_467.x, x_467.y, x_469);
      let x_481 : vec3<f32> = txVec0;
      let x_483 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_481.xy, x_481.z);
      u_xlat7.x = x_483;
      let x_486 : vec4<f32> = u_xlat3;
      let x_487 : vec2<f32> = vec2<f32>(x_486.z, x_486.w);
      let x_489 : f32 = u_xlat2.z;
      txVec1 = vec3<f32>(x_487.x, x_487.y, x_489);
      let x_496 : vec3<f32> = txVec1;
      let x_498 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_496.xy, x_496.z);
      u_xlat7.y = x_498;
      let x_500 : vec4<f32> = u_xlat2;
      let x_504 : vec4<f32> = x_253.x_MainLightShadowOffset1;
      u_xlat3 = (vec4<f32>(x_500.x, x_500.y, x_500.x, x_500.y) + x_504);
      let x_507 : vec4<f32> = u_xlat3;
      let x_508 : vec2<f32> = vec2<f32>(x_507.x, x_507.y);
      let x_510 : f32 = u_xlat2.z;
      txVec2 = vec3<f32>(x_508.x, x_508.y, x_510);
      let x_517 : vec3<f32> = txVec2;
      let x_519 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_517.xy, x_517.z);
      u_xlat7.z = x_519;
      let x_522 : vec4<f32> = u_xlat3;
      let x_523 : vec2<f32> = vec2<f32>(x_522.z, x_522.w);
      let x_525 : f32 = u_xlat2.z;
      txVec3 = vec3<f32>(x_523.x, x_523.y, x_525);
      let x_532 : vec3<f32> = txVec3;
      let x_534 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_532.xy, x_532.z);
      u_xlat7.w = x_534;
      let x_537 : vec4<f32> = u_xlat7;
      u_xlat67 = dot(x_537, vec4<f32>(0.25f, 0.25f, 0.25f, 0.25f));
    } else {
      let x_544 : f32 = x_253.x_MainLightShadowParams.y;
      u_xlatb68 = (x_544 == 2.0f);
      let x_546 : bool = u_xlatb68;
      if (x_546) {
        let x_549 : vec4<f32> = u_xlat2;
        let x_553 : vec4<f32> = x_253.x_MainLightShadowmapSize;
        let x_558 : vec2<f32> = ((vec2<f32>(x_549.x, x_549.y) * vec2<f32>(x_553.z, x_553.w)) + vec2<f32>(0.5f, 0.5f));
        let x_559 : vec4<f32> = u_xlat3;
        u_xlat3 = vec4<f32>(x_558.x, x_558.y, x_559.z, x_559.w);
        let x_561 : vec4<f32> = u_xlat3;
        let x_563 : vec2<f32> = floor(vec2<f32>(x_561.x, x_561.y));
        let x_564 : vec4<f32> = u_xlat3;
        u_xlat3 = vec4<f32>(x_563.x, x_563.y, x_564.z, x_564.w);
        let x_568 : vec4<f32> = u_xlat2;
        let x_571 : vec4<f32> = x_253.x_MainLightShadowmapSize;
        let x_574 : vec4<f32> = u_xlat3;
        u_xlat47 = ((vec2<f32>(x_568.x, x_568.y) * vec2<f32>(x_571.z, x_571.w)) + -(vec2<f32>(x_574.x, x_574.y)));
        let x_578 : vec2<f32> = u_xlat47;
        u_xlat7 = (vec4<f32>(x_578.x, x_578.x, x_578.y, x_578.y) + vec4<f32>(0.5f, 1.0f, 0.5f, 1.0f));
        let x_582 : vec4<f32> = u_xlat7;
        let x_584 : vec4<f32> = u_xlat7;
        u_xlat8 = (vec4<f32>(x_582.x, x_582.x, x_582.z, x_582.z) * vec4<f32>(x_584.x, x_584.x, x_584.z, x_584.z));
        let x_587 : vec4<f32> = u_xlat8;
        let x_591 : vec2<f32> = (vec2<f32>(x_587.y, x_587.w) * vec2<f32>(0.079999998f, 0.079999998f));
        let x_592 : vec4<f32> = u_xlat7;
        u_xlat7 = vec4<f32>(x_591.x, x_592.y, x_591.y, x_592.w);
        let x_594 : vec4<f32> = u_xlat8;
        let x_597 : vec2<f32> = u_xlat47;
        let x_599 : vec2<f32> = ((vec2<f32>(x_594.x, x_594.z) * vec2<f32>(0.5f, 0.5f)) + -(x_597));
        let x_600 : vec4<f32> = u_xlat8;
        u_xlat8 = vec4<f32>(x_599.x, x_599.y, x_600.z, x_600.w);
        let x_603 : vec2<f32> = u_xlat47;
        u_xlat52 = (-(x_603) + vec2<f32>(1.0f, 1.0f));
        let x_608 : vec2<f32> = u_xlat47;
        let x_610 : vec2<f32> = min(x_608, vec2<f32>(0.0f, 0.0f));
        let x_611 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_610.x, x_610.y, x_611.z, x_611.w);
        let x_613 : vec4<f32> = u_xlat9;
        let x_616 : vec4<f32> = u_xlat9;
        let x_619 : vec2<f32> = u_xlat52;
        let x_620 : vec2<f32> = ((-(vec2<f32>(x_613.x, x_613.y)) * vec2<f32>(x_616.x, x_616.y)) + x_619);
        let x_621 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_620.x, x_620.y, x_621.z, x_621.w);
        let x_623 : vec2<f32> = u_xlat47;
        u_xlat47 = max(x_623, vec2<f32>(0.0f, 0.0f));
        let x_625 : vec2<f32> = u_xlat47;
        let x_627 : vec2<f32> = u_xlat47;
        let x_629 : vec4<f32> = u_xlat7;
        u_xlat47 = ((-(x_625) * x_627) + vec2<f32>(x_629.y, x_629.w));
        let x_632 : vec4<f32> = u_xlat9;
        let x_634 : vec2<f32> = (vec2<f32>(x_632.x, x_632.y) + vec2<f32>(1.0f, 1.0f));
        let x_635 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_634.x, x_634.y, x_635.z, x_635.w);
        let x_637 : vec2<f32> = u_xlat47;
        u_xlat47 = (x_637 + vec2<f32>(1.0f, 1.0f));
        let x_640 : vec4<f32> = u_xlat8;
        let x_644 : vec2<f32> = (vec2<f32>(x_640.x, x_640.y) * vec2<f32>(0.159999996f, 0.159999996f));
        let x_645 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_644.x, x_644.y, x_645.z, x_645.w);
        let x_647 : vec2<f32> = u_xlat52;
        let x_648 : vec2<f32> = (x_647 * vec2<f32>(0.159999996f, 0.159999996f));
        let x_649 : vec4<f32> = u_xlat8;
        u_xlat8 = vec4<f32>(x_648.x, x_648.y, x_649.z, x_649.w);
        let x_651 : vec4<f32> = u_xlat9;
        let x_653 : vec2<f32> = (vec2<f32>(x_651.x, x_651.y) * vec2<f32>(0.159999996f, 0.159999996f));
        let x_654 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_653.x, x_653.y, x_654.z, x_654.w);
        let x_657 : vec2<f32> = u_xlat47;
        let x_658 : vec2<f32> = (x_657 * vec2<f32>(0.159999996f, 0.159999996f));
        let x_659 : vec4<f32> = u_xlat11;
        u_xlat11 = vec4<f32>(x_658.x, x_658.y, x_659.z, x_659.w);
        let x_661 : vec4<f32> = u_xlat7;
        u_xlat47 = (vec2<f32>(x_661.y, x_661.w) * vec2<f32>(0.159999996f, 0.159999996f));
        let x_665 : f32 = u_xlat9.x;
        u_xlat10.z = x_665;
        let x_668 : f32 = u_xlat47.x;
        u_xlat10.w = x_668;
        let x_671 : f32 = u_xlat11.x;
        u_xlat8.z = x_671;
        let x_674 : f32 = u_xlat7.x;
        u_xlat8.w = x_674;
        let x_677 : vec4<f32> = u_xlat8;
        let x_679 : vec4<f32> = u_xlat10;
        u_xlat12 = (vec4<f32>(x_677.z, x_677.w, x_677.x, x_677.z) + vec4<f32>(x_679.z, x_679.w, x_679.x, x_679.z));
        let x_683 : f32 = u_xlat10.y;
        u_xlat9.z = x_683;
        let x_686 : f32 = u_xlat47.y;
        u_xlat9.w = x_686;
        let x_689 : f32 = u_xlat8.y;
        u_xlat11.z = x_689;
        let x_692 : f32 = u_xlat7.z;
        u_xlat11.w = x_692;
        let x_694 : vec4<f32> = u_xlat9;
        let x_696 : vec4<f32> = u_xlat11;
        let x_698 : vec3<f32> = (vec3<f32>(x_694.z, x_694.y, x_694.w) + vec3<f32>(x_696.z, x_696.y, x_696.w));
        let x_699 : vec4<f32> = u_xlat7;
        u_xlat7 = vec4<f32>(x_698.x, x_698.y, x_698.z, x_699.w);
        let x_701 : vec4<f32> = u_xlat8;
        let x_703 : vec4<f32> = u_xlat12;
        let x_705 : vec3<f32> = (vec3<f32>(x_701.x, x_701.z, x_701.w) / vec3<f32>(x_703.z, x_703.w, x_703.y));
        let x_706 : vec4<f32> = u_xlat8;
        u_xlat8 = vec4<f32>(x_705.x, x_705.y, x_705.z, x_706.w);
        let x_708 : vec4<f32> = u_xlat8;
        let x_714 : vec3<f32> = (vec3<f32>(x_708.x, x_708.y, x_708.z) + vec3<f32>(-2.5f, -0.5f, 1.5f));
        let x_715 : vec4<f32> = u_xlat8;
        u_xlat8 = vec4<f32>(x_714.x, x_714.y, x_714.z, x_715.w);
        let x_717 : vec4<f32> = u_xlat11;
        let x_719 : vec4<f32> = u_xlat7;
        let x_721 : vec3<f32> = (vec3<f32>(x_717.z, x_717.y, x_717.w) / vec3<f32>(x_719.x, x_719.y, x_719.z));
        let x_722 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_721.x, x_721.y, x_721.z, x_722.w);
        let x_724 : vec4<f32> = u_xlat9;
        let x_726 : vec3<f32> = (vec3<f32>(x_724.x, x_724.y, x_724.z) + vec3<f32>(-2.5f, -0.5f, 1.5f));
        let x_727 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_726.x, x_726.y, x_726.z, x_727.w);
        let x_729 : vec4<f32> = u_xlat8;
        let x_732 : vec4<f32> = x_253.x_MainLightShadowmapSize;
        let x_734 : vec3<f32> = (vec3<f32>(x_729.y, x_729.x, x_729.z) * vec3<f32>(x_732.x, x_732.x, x_732.x));
        let x_735 : vec4<f32> = u_xlat8;
        u_xlat8 = vec4<f32>(x_734.x, x_734.y, x_734.z, x_735.w);
        let x_737 : vec4<f32> = u_xlat9;
        let x_740 : vec4<f32> = x_253.x_MainLightShadowmapSize;
        let x_742 : vec3<f32> = (vec3<f32>(x_737.x, x_737.y, x_737.z) * vec3<f32>(x_740.y, x_740.y, x_740.y));
        let x_743 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_742.x, x_742.y, x_742.z, x_743.w);
        let x_746 : f32 = u_xlat9.x;
        u_xlat8.w = x_746;
        let x_748 : vec4<f32> = u_xlat3;
        let x_751 : vec4<f32> = x_253.x_MainLightShadowmapSize;
        let x_754 : vec4<f32> = u_xlat8;
        u_xlat10 = ((vec4<f32>(x_748.x, x_748.y, x_748.x, x_748.y) * vec4<f32>(x_751.x, x_751.y, x_751.x, x_751.y)) + vec4<f32>(x_754.y, x_754.w, x_754.x, x_754.w));
        let x_757 : vec4<f32> = u_xlat3;
        let x_760 : vec4<f32> = x_253.x_MainLightShadowmapSize;
        let x_763 : vec4<f32> = u_xlat8;
        u_xlat47 = ((vec2<f32>(x_757.x, x_757.y) * vec2<f32>(x_760.x, x_760.y)) + vec2<f32>(x_763.z, x_763.w));
        let x_767 : f32 = u_xlat8.y;
        u_xlat9.w = x_767;
        let x_769 : vec4<f32> = u_xlat9;
        let x_770 : vec2<f32> = vec2<f32>(x_769.y, x_769.z);
        let x_771 : vec4<f32> = u_xlat8;
        u_xlat8 = vec4<f32>(x_771.x, x_770.x, x_771.z, x_770.y);
        let x_773 : vec4<f32> = u_xlat3;
        let x_776 : vec4<f32> = x_253.x_MainLightShadowmapSize;
        let x_779 : vec4<f32> = u_xlat8;
        u_xlat11 = ((vec4<f32>(x_773.x, x_773.y, x_773.x, x_773.y) * vec4<f32>(x_776.x, x_776.y, x_776.x, x_776.y)) + vec4<f32>(x_779.x, x_779.y, x_779.z, x_779.y));
        let x_782 : vec4<f32> = u_xlat3;
        let x_785 : vec4<f32> = x_253.x_MainLightShadowmapSize;
        let x_788 : vec4<f32> = u_xlat9;
        u_xlat9 = ((vec4<f32>(x_782.x, x_782.y, x_782.x, x_782.y) * vec4<f32>(x_785.x, x_785.y, x_785.x, x_785.y)) + vec4<f32>(x_788.w, x_788.y, x_788.w, x_788.z));
        let x_791 : vec4<f32> = u_xlat3;
        let x_794 : vec4<f32> = x_253.x_MainLightShadowmapSize;
        let x_797 : vec4<f32> = u_xlat8;
        u_xlat8 = ((vec4<f32>(x_791.x, x_791.y, x_791.x, x_791.y) * vec4<f32>(x_794.x, x_794.y, x_794.x, x_794.y)) + vec4<f32>(x_797.x, x_797.w, x_797.z, x_797.w));
        let x_801 : vec4<f32> = u_xlat7;
        let x_803 : vec4<f32> = u_xlat12;
        u_xlat13 = (vec4<f32>(x_801.x, x_801.x, x_801.x, x_801.y) * vec4<f32>(x_803.z, x_803.w, x_803.y, x_803.z));
        let x_807 : vec4<f32> = u_xlat7;
        let x_809 : vec4<f32> = u_xlat12;
        u_xlat14 = (vec4<f32>(x_807.y, x_807.y, x_807.z, x_807.z) * x_809);
        let x_813 : f32 = u_xlat7.z;
        let x_815 : f32 = u_xlat12.y;
        u_xlat68 = (x_813 * x_815);
        let x_818 : vec4<f32> = u_xlat10;
        let x_819 : vec2<f32> = vec2<f32>(x_818.x, x_818.y);
        let x_821 : f32 = u_xlat2.z;
        txVec4 = vec3<f32>(x_819.x, x_819.y, x_821);
        let x_828 : vec3<f32> = txVec4;
        let x_830 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_828.xy, x_828.z);
        u_xlat3.x = x_830;
        let x_833 : vec4<f32> = u_xlat10;
        let x_834 : vec2<f32> = vec2<f32>(x_833.z, x_833.w);
        let x_836 : f32 = u_xlat2.z;
        txVec5 = vec3<f32>(x_834.x, x_834.y, x_836);
        let x_844 : vec3<f32> = txVec5;
        let x_846 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_844.xy, x_844.z);
        u_xlat25.x = x_846;
        let x_849 : f32 = u_xlat25.x;
        let x_851 : f32 = u_xlat13.y;
        u_xlat25.x = (x_849 * x_851);
        let x_855 : f32 = u_xlat13.x;
        let x_857 : f32 = u_xlat3.x;
        let x_860 : f32 = u_xlat25.x;
        u_xlat3.x = ((x_855 * x_857) + x_860);
        let x_864 : vec2<f32> = u_xlat47;
        let x_866 : f32 = u_xlat2.z;
        txVec6 = vec3<f32>(x_864.x, x_864.y, x_866);
        let x_873 : vec3<f32> = txVec6;
        let x_875 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_873.xy, x_873.z);
        u_xlat25.x = x_875;
        let x_878 : f32 = u_xlat13.z;
        let x_880 : f32 = u_xlat25.x;
        let x_883 : f32 = u_xlat3.x;
        u_xlat3.x = ((x_878 * x_880) + x_883);
        let x_887 : vec4<f32> = u_xlat9;
        let x_888 : vec2<f32> = vec2<f32>(x_887.x, x_887.y);
        let x_890 : f32 = u_xlat2.z;
        txVec7 = vec3<f32>(x_888.x, x_888.y, x_890);
        let x_897 : vec3<f32> = txVec7;
        let x_899 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_897.xy, x_897.z);
        u_xlat25.x = x_899;
        let x_902 : f32 = u_xlat13.w;
        let x_904 : f32 = u_xlat25.x;
        let x_907 : f32 = u_xlat3.x;
        u_xlat3.x = ((x_902 * x_904) + x_907);
        let x_911 : vec4<f32> = u_xlat11;
        let x_912 : vec2<f32> = vec2<f32>(x_911.x, x_911.y);
        let x_914 : f32 = u_xlat2.z;
        txVec8 = vec3<f32>(x_912.x, x_912.y, x_914);
        let x_921 : vec3<f32> = txVec8;
        let x_923 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_921.xy, x_921.z);
        u_xlat25.x = x_923;
        let x_926 : f32 = u_xlat14.x;
        let x_928 : f32 = u_xlat25.x;
        let x_931 : f32 = u_xlat3.x;
        u_xlat3.x = ((x_926 * x_928) + x_931);
        let x_935 : vec4<f32> = u_xlat11;
        let x_936 : vec2<f32> = vec2<f32>(x_935.z, x_935.w);
        let x_938 : f32 = u_xlat2.z;
        txVec9 = vec3<f32>(x_936.x, x_936.y, x_938);
        let x_945 : vec3<f32> = txVec9;
        let x_947 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_945.xy, x_945.z);
        u_xlat25.x = x_947;
        let x_950 : f32 = u_xlat14.y;
        let x_952 : f32 = u_xlat25.x;
        let x_955 : f32 = u_xlat3.x;
        u_xlat3.x = ((x_950 * x_952) + x_955);
        let x_959 : vec4<f32> = u_xlat9;
        let x_960 : vec2<f32> = vec2<f32>(x_959.z, x_959.w);
        let x_962 : f32 = u_xlat2.z;
        txVec10 = vec3<f32>(x_960.x, x_960.y, x_962);
        let x_969 : vec3<f32> = txVec10;
        let x_971 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_969.xy, x_969.z);
        u_xlat25.x = x_971;
        let x_974 : f32 = u_xlat14.z;
        let x_976 : f32 = u_xlat25.x;
        let x_979 : f32 = u_xlat3.x;
        u_xlat3.x = ((x_974 * x_976) + x_979);
        let x_983 : vec4<f32> = u_xlat8;
        let x_984 : vec2<f32> = vec2<f32>(x_983.x, x_983.y);
        let x_986 : f32 = u_xlat2.z;
        txVec11 = vec3<f32>(x_984.x, x_984.y, x_986);
        let x_993 : vec3<f32> = txVec11;
        let x_995 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_993.xy, x_993.z);
        u_xlat25.x = x_995;
        let x_998 : f32 = u_xlat14.w;
        let x_1000 : f32 = u_xlat25.x;
        let x_1003 : f32 = u_xlat3.x;
        u_xlat3.x = ((x_998 * x_1000) + x_1003);
        let x_1007 : vec4<f32> = u_xlat8;
        let x_1008 : vec2<f32> = vec2<f32>(x_1007.z, x_1007.w);
        let x_1010 : f32 = u_xlat2.z;
        txVec12 = vec3<f32>(x_1008.x, x_1008.y, x_1010);
        let x_1017 : vec3<f32> = txVec12;
        let x_1019 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1017.xy, x_1017.z);
        u_xlat25.x = x_1019;
        let x_1021 : f32 = u_xlat68;
        let x_1023 : f32 = u_xlat25.x;
        let x_1026 : f32 = u_xlat3.x;
        u_xlat67 = ((x_1021 * x_1023) + x_1026);
      } else {
        let x_1029 : vec4<f32> = u_xlat2;
        let x_1032 : vec4<f32> = x_253.x_MainLightShadowmapSize;
        let x_1035 : vec2<f32> = ((vec2<f32>(x_1029.x, x_1029.y) * vec2<f32>(x_1032.z, x_1032.w)) + vec2<f32>(0.5f, 0.5f));
        let x_1036 : vec4<f32> = u_xlat3;
        u_xlat3 = vec4<f32>(x_1035.x, x_1035.y, x_1036.z, x_1036.w);
        let x_1038 : vec4<f32> = u_xlat3;
        let x_1040 : vec2<f32> = floor(vec2<f32>(x_1038.x, x_1038.y));
        let x_1041 : vec4<f32> = u_xlat3;
        u_xlat3 = vec4<f32>(x_1040.x, x_1040.y, x_1041.z, x_1041.w);
        let x_1043 : vec4<f32> = u_xlat2;
        let x_1046 : vec4<f32> = x_253.x_MainLightShadowmapSize;
        let x_1049 : vec4<f32> = u_xlat3;
        u_xlat47 = ((vec2<f32>(x_1043.x, x_1043.y) * vec2<f32>(x_1046.z, x_1046.w)) + -(vec2<f32>(x_1049.x, x_1049.y)));
        let x_1053 : vec2<f32> = u_xlat47;
        u_xlat7 = (vec4<f32>(x_1053.x, x_1053.x, x_1053.y, x_1053.y) + vec4<f32>(0.5f, 1.0f, 0.5f, 1.0f));
        let x_1056 : vec4<f32> = u_xlat7;
        let x_1058 : vec4<f32> = u_xlat7;
        u_xlat8 = (vec4<f32>(x_1056.x, x_1056.x, x_1056.z, x_1056.z) * vec4<f32>(x_1058.x, x_1058.x, x_1058.z, x_1058.z));
        let x_1061 : vec4<f32> = u_xlat8;
        let x_1065 : vec2<f32> = (vec2<f32>(x_1061.y, x_1061.w) * vec2<f32>(0.040816002f, 0.040816002f));
        let x_1066 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_1066.x, x_1065.x, x_1066.z, x_1065.y);
        let x_1068 : vec4<f32> = u_xlat8;
        let x_1071 : vec2<f32> = u_xlat47;
        let x_1073 : vec2<f32> = ((vec2<f32>(x_1068.x, x_1068.z) * vec2<f32>(0.5f, 0.5f)) + -(x_1071));
        let x_1074 : vec4<f32> = u_xlat7;
        u_xlat7 = vec4<f32>(x_1073.x, x_1074.y, x_1073.y, x_1074.w);
        let x_1076 : vec2<f32> = u_xlat47;
        let x_1078 : vec2<f32> = (-(x_1076) + vec2<f32>(1.0f, 1.0f));
        let x_1079 : vec4<f32> = u_xlat8;
        u_xlat8 = vec4<f32>(x_1078.x, x_1078.y, x_1079.z, x_1079.w);
        let x_1081 : vec2<f32> = u_xlat47;
        u_xlat52 = min(x_1081, vec2<f32>(0.0f, 0.0f));
        let x_1083 : vec2<f32> = u_xlat52;
        let x_1085 : vec2<f32> = u_xlat52;
        let x_1087 : vec4<f32> = u_xlat8;
        let x_1089 : vec2<f32> = ((-(x_1083) * x_1085) + vec2<f32>(x_1087.x, x_1087.y));
        let x_1090 : vec4<f32> = u_xlat8;
        u_xlat8 = vec4<f32>(x_1089.x, x_1089.y, x_1090.z, x_1090.w);
        let x_1092 : vec2<f32> = u_xlat47;
        u_xlat52 = max(x_1092, vec2<f32>(0.0f, 0.0f));
        let x_1095 : vec2<f32> = u_xlat52;
        let x_1097 : vec2<f32> = u_xlat52;
        let x_1099 : vec4<f32> = u_xlat7;
        let x_1101 : vec2<f32> = ((-(x_1095) * x_1097) + vec2<f32>(x_1099.y, x_1099.w));
        let x_1102 : vec3<f32> = u_xlat29;
        u_xlat29 = vec3<f32>(x_1101.x, x_1102.y, x_1101.y);
        let x_1104 : vec4<f32> = u_xlat8;
        let x_1107 : vec2<f32> = (vec2<f32>(x_1104.x, x_1104.y) + vec2<f32>(2.0f, 2.0f));
        let x_1108 : vec4<f32> = u_xlat8;
        u_xlat8 = vec4<f32>(x_1107.x, x_1107.y, x_1108.z, x_1108.w);
        let x_1110 : vec3<f32> = u_xlat29;
        let x_1112 : vec2<f32> = (vec2<f32>(x_1110.x, x_1110.z) + vec2<f32>(2.0f, 2.0f));
        let x_1113 : vec4<f32> = u_xlat7;
        u_xlat7 = vec4<f32>(x_1113.x, x_1112.x, x_1113.z, x_1112.y);
        let x_1116 : f32 = u_xlat7.y;
        u_xlat10.z = (x_1116 * 0.081632003f);
        let x_1120 : vec4<f32> = u_xlat7;
        let x_1123 : vec3<f32> = (vec3<f32>(x_1120.z, x_1120.x, x_1120.w) * vec3<f32>(0.081632003f, 0.081632003f, 0.081632003f));
        let x_1124 : vec4<f32> = u_xlat11;
        u_xlat11 = vec4<f32>(x_1123.x, x_1123.y, x_1123.z, x_1124.w);
        let x_1126 : vec4<f32> = u_xlat8;
        let x_1129 : vec2<f32> = (vec2<f32>(x_1126.x, x_1126.y) * vec2<f32>(0.081632003f, 0.081632003f));
        let x_1130 : vec4<f32> = u_xlat7;
        u_xlat7 = vec4<f32>(x_1129.x, x_1129.y, x_1130.z, x_1130.w);
        let x_1133 : f32 = u_xlat11.y;
        u_xlat10.x = x_1133;
        let x_1135 : vec2<f32> = u_xlat47;
        let x_1142 : vec2<f32> = ((vec2<f32>(x_1135.x, x_1135.x) * vec2<f32>(-0.081632003f, 0.081632003f)) + vec2<f32>(0.163264006f, 0.081632003f));
        let x_1143 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_1143.x, x_1142.x, x_1143.z, x_1142.y);
        let x_1145 : vec2<f32> = u_xlat47;
        let x_1149 : vec2<f32> = ((vec2<f32>(x_1145.x, x_1145.x) * vec2<f32>(-0.081632003f, 0.081632003f)) + vec2<f32>(0.081632003f, 0.163264006f));
        let x_1150 : vec4<f32> = u_xlat8;
        u_xlat8 = vec4<f32>(x_1149.x, x_1150.y, x_1149.y, x_1150.w);
        let x_1153 : f32 = u_xlat7.x;
        u_xlat8.y = x_1153;
        let x_1156 : f32 = u_xlat9.y;
        u_xlat8.w = x_1156;
        let x_1158 : vec4<f32> = u_xlat8;
        let x_1159 : vec4<f32> = u_xlat10;
        u_xlat10 = (x_1158 + x_1159);
        let x_1161 : vec2<f32> = u_xlat47;
        let x_1164 : vec2<f32> = ((vec2<f32>(x_1161.y, x_1161.y) * vec2<f32>(-0.081632003f, 0.081632003f)) + vec2<f32>(0.163264006f, 0.081632003f));
        let x_1165 : vec4<f32> = u_xlat11;
        u_xlat11 = vec4<f32>(x_1165.x, x_1164.x, x_1165.z, x_1164.y);
        let x_1167 : vec2<f32> = u_xlat47;
        let x_1170 : vec2<f32> = ((vec2<f32>(x_1167.y, x_1167.y) * vec2<f32>(-0.081632003f, 0.081632003f)) + vec2<f32>(0.081632003f, 0.163264006f));
        let x_1171 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_1170.x, x_1171.y, x_1170.y, x_1171.w);
        let x_1174 : f32 = u_xlat7.y;
        u_xlat9.y = x_1174;
        let x_1176 : vec4<f32> = u_xlat9;
        let x_1177 : vec4<f32> = u_xlat11;
        u_xlat7 = (x_1176 + x_1177);
        let x_1179 : vec4<f32> = u_xlat8;
        let x_1180 : vec4<f32> = u_xlat10;
        u_xlat8 = (x_1179 / x_1180);
        let x_1182 : vec4<f32> = u_xlat8;
        u_xlat8 = (x_1182 + vec4<f32>(-3.5f, -1.5f, 0.5f, 2.5f));
        let x_1188 : vec4<f32> = u_xlat9;
        let x_1189 : vec4<f32> = u_xlat7;
        u_xlat9 = (x_1188 / x_1189);
        let x_1191 : vec4<f32> = u_xlat9;
        u_xlat9 = (x_1191 + vec4<f32>(-3.5f, -1.5f, 0.5f, 2.5f));
        let x_1193 : vec4<f32> = u_xlat8;
        let x_1196 : vec4<f32> = x_253.x_MainLightShadowmapSize;
        u_xlat8 = (vec4<f32>(x_1193.w, x_1193.x, x_1193.y, x_1193.z) * vec4<f32>(x_1196.x, x_1196.x, x_1196.x, x_1196.x));
        let x_1199 : vec4<f32> = u_xlat9;
        let x_1202 : vec4<f32> = x_253.x_MainLightShadowmapSize;
        u_xlat9 = (vec4<f32>(x_1199.x, x_1199.w, x_1199.y, x_1199.z) * vec4<f32>(x_1202.y, x_1202.y, x_1202.y, x_1202.y));
        let x_1205 : vec4<f32> = u_xlat8;
        let x_1206 : vec3<f32> = vec3<f32>(x_1205.y, x_1205.z, x_1205.w);
        let x_1207 : vec4<f32> = u_xlat11;
        u_xlat11 = vec4<f32>(x_1206.x, x_1207.y, x_1206.y, x_1206.z);
        let x_1210 : f32 = u_xlat9.x;
        u_xlat11.y = x_1210;
        let x_1212 : vec4<f32> = u_xlat3;
        let x_1215 : vec4<f32> = x_253.x_MainLightShadowmapSize;
        let x_1218 : vec4<f32> = u_xlat11;
        u_xlat12 = ((vec4<f32>(x_1212.x, x_1212.y, x_1212.x, x_1212.y) * vec4<f32>(x_1215.x, x_1215.y, x_1215.x, x_1215.y)) + vec4<f32>(x_1218.x, x_1218.y, x_1218.z, x_1218.y));
        let x_1221 : vec4<f32> = u_xlat3;
        let x_1224 : vec4<f32> = x_253.x_MainLightShadowmapSize;
        let x_1227 : vec4<f32> = u_xlat11;
        u_xlat47 = ((vec2<f32>(x_1221.x, x_1221.y) * vec2<f32>(x_1224.x, x_1224.y)) + vec2<f32>(x_1227.w, x_1227.y));
        let x_1231 : f32 = u_xlat11.y;
        u_xlat8.y = x_1231;
        let x_1234 : f32 = u_xlat9.z;
        u_xlat11.y = x_1234;
        let x_1236 : vec4<f32> = u_xlat3;
        let x_1239 : vec4<f32> = x_253.x_MainLightShadowmapSize;
        let x_1242 : vec4<f32> = u_xlat11;
        u_xlat13 = ((vec4<f32>(x_1236.x, x_1236.y, x_1236.x, x_1236.y) * vec4<f32>(x_1239.x, x_1239.y, x_1239.x, x_1239.y)) + vec4<f32>(x_1242.x, x_1242.y, x_1242.z, x_1242.y));
        let x_1245 : vec4<f32> = u_xlat3;
        let x_1248 : vec4<f32> = x_253.x_MainLightShadowmapSize;
        let x_1251 : vec4<f32> = u_xlat11;
        let x_1253 : vec2<f32> = ((vec2<f32>(x_1245.x, x_1245.y) * vec2<f32>(x_1248.x, x_1248.y)) + vec2<f32>(x_1251.w, x_1251.y));
        let x_1254 : vec4<f32> = u_xlat14;
        u_xlat14 = vec4<f32>(x_1253.x, x_1253.y, x_1254.z, x_1254.w);
        let x_1257 : f32 = u_xlat11.y;
        u_xlat8.z = x_1257;
        let x_1260 : vec4<f32> = u_xlat3;
        let x_1263 : vec4<f32> = x_253.x_MainLightShadowmapSize;
        let x_1266 : vec4<f32> = u_xlat8;
        u_xlat15 = ((vec4<f32>(x_1260.x, x_1260.y, x_1260.x, x_1260.y) * vec4<f32>(x_1263.x, x_1263.y, x_1263.x, x_1263.y)) + vec4<f32>(x_1266.x, x_1266.y, x_1266.x, x_1266.z));
        let x_1270 : f32 = u_xlat9.w;
        u_xlat11.y = x_1270;
        let x_1273 : vec4<f32> = u_xlat3;
        let x_1276 : vec4<f32> = x_253.x_MainLightShadowmapSize;
        let x_1279 : vec4<f32> = u_xlat11;
        u_xlat16 = ((vec4<f32>(x_1273.x, x_1273.y, x_1273.x, x_1273.y) * vec4<f32>(x_1276.x, x_1276.y, x_1276.x, x_1276.y)) + vec4<f32>(x_1279.x, x_1279.y, x_1279.z, x_1279.y));
        let x_1283 : vec4<f32> = u_xlat3;
        let x_1286 : vec4<f32> = x_253.x_MainLightShadowmapSize;
        let x_1289 : vec4<f32> = u_xlat11;
        u_xlat30 = ((vec2<f32>(x_1283.x, x_1283.y) * vec2<f32>(x_1286.x, x_1286.y)) + vec2<f32>(x_1289.w, x_1289.y));
        let x_1293 : f32 = u_xlat11.y;
        u_xlat8.w = x_1293;
        let x_1296 : vec4<f32> = u_xlat3;
        let x_1299 : vec4<f32> = x_253.x_MainLightShadowmapSize;
        let x_1302 : vec4<f32> = u_xlat8;
        u_xlat58 = ((vec2<f32>(x_1296.x, x_1296.y) * vec2<f32>(x_1299.x, x_1299.y)) + vec2<f32>(x_1302.x, x_1302.w));
        let x_1305 : vec4<f32> = u_xlat11;
        let x_1306 : vec3<f32> = vec3<f32>(x_1305.x, x_1305.z, x_1305.w);
        let x_1307 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_1306.x, x_1307.y, x_1306.y, x_1306.z);
        let x_1309 : vec4<f32> = u_xlat3;
        let x_1312 : vec4<f32> = x_253.x_MainLightShadowmapSize;
        let x_1315 : vec4<f32> = u_xlat9;
        u_xlat11 = ((vec4<f32>(x_1309.x, x_1309.y, x_1309.x, x_1309.y) * vec4<f32>(x_1312.x, x_1312.y, x_1312.x, x_1312.y)) + vec4<f32>(x_1315.x, x_1315.y, x_1315.z, x_1315.y));
        let x_1319 : vec4<f32> = u_xlat3;
        let x_1322 : vec4<f32> = x_253.x_MainLightShadowmapSize;
        let x_1325 : vec4<f32> = u_xlat9;
        u_xlat53 = ((vec2<f32>(x_1319.x, x_1319.y) * vec2<f32>(x_1322.x, x_1322.y)) + vec2<f32>(x_1325.w, x_1325.y));
        let x_1329 : f32 = u_xlat8.x;
        u_xlat9.x = x_1329;
        let x_1331 : vec4<f32> = u_xlat3;
        let x_1334 : vec4<f32> = x_253.x_MainLightShadowmapSize;
        let x_1337 : vec4<f32> = u_xlat9;
        let x_1339 : vec2<f32> = ((vec2<f32>(x_1331.x, x_1331.y) * vec2<f32>(x_1334.x, x_1334.y)) + vec2<f32>(x_1337.x, x_1337.y));
        let x_1340 : vec4<f32> = u_xlat3;
        u_xlat3 = vec4<f32>(x_1339.x, x_1339.y, x_1340.z, x_1340.w);
        let x_1343 : vec4<f32> = u_xlat7;
        let x_1345 : vec4<f32> = u_xlat10;
        u_xlat17 = (vec4<f32>(x_1343.x, x_1343.x, x_1343.x, x_1343.x) * x_1345);
        let x_1348 : vec4<f32> = u_xlat7;
        let x_1350 : vec4<f32> = u_xlat10;
        u_xlat18 = (vec4<f32>(x_1348.y, x_1348.y, x_1348.y, x_1348.y) * x_1350);
        let x_1353 : vec4<f32> = u_xlat7;
        let x_1355 : vec4<f32> = u_xlat10;
        u_xlat19 = (vec4<f32>(x_1353.z, x_1353.z, x_1353.z, x_1353.z) * x_1355);
        let x_1357 : vec4<f32> = u_xlat7;
        let x_1359 : vec4<f32> = u_xlat10;
        u_xlat7 = (vec4<f32>(x_1357.w, x_1357.w, x_1357.w, x_1357.w) * x_1359);
        let x_1362 : vec4<f32> = u_xlat12;
        let x_1363 : vec2<f32> = vec2<f32>(x_1362.x, x_1362.y);
        let x_1365 : f32 = u_xlat2.z;
        txVec13 = vec3<f32>(x_1363.x, x_1363.y, x_1365);
        let x_1372 : vec3<f32> = txVec13;
        let x_1374 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1372.xy, x_1372.z);
        u_xlat68 = x_1374;
        let x_1376 : vec4<f32> = u_xlat12;
        let x_1377 : vec2<f32> = vec2<f32>(x_1376.z, x_1376.w);
        let x_1379 : f32 = u_xlat2.z;
        txVec14 = vec3<f32>(x_1377.x, x_1377.y, x_1379);
        let x_1387 : vec3<f32> = txVec14;
        let x_1389 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1387.xy, x_1387.z);
        u_xlat71 = x_1389;
        let x_1390 : f32 = u_xlat71;
        let x_1392 : f32 = u_xlat17.y;
        u_xlat71 = (x_1390 * x_1392);
        let x_1395 : f32 = u_xlat17.x;
        let x_1396 : f32 = u_xlat68;
        let x_1398 : f32 = u_xlat71;
        u_xlat68 = ((x_1395 * x_1396) + x_1398);
        let x_1401 : vec2<f32> = u_xlat47;
        let x_1403 : f32 = u_xlat2.z;
        txVec15 = vec3<f32>(x_1401.x, x_1401.y, x_1403);
        let x_1410 : vec3<f32> = txVec15;
        let x_1412 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1410.xy, x_1410.z);
        u_xlat47.x = x_1412;
        let x_1415 : f32 = u_xlat17.z;
        let x_1417 : f32 = u_xlat47.x;
        let x_1419 : f32 = u_xlat68;
        u_xlat68 = ((x_1415 * x_1417) + x_1419);
        let x_1422 : vec4<f32> = u_xlat15;
        let x_1423 : vec2<f32> = vec2<f32>(x_1422.x, x_1422.y);
        let x_1425 : f32 = u_xlat2.z;
        txVec16 = vec3<f32>(x_1423.x, x_1423.y, x_1425);
        let x_1432 : vec3<f32> = txVec16;
        let x_1434 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1432.xy, x_1432.z);
        u_xlat47.x = x_1434;
        let x_1437 : f32 = u_xlat17.w;
        let x_1439 : f32 = u_xlat47.x;
        let x_1441 : f32 = u_xlat68;
        u_xlat68 = ((x_1437 * x_1439) + x_1441);
        let x_1444 : vec4<f32> = u_xlat13;
        let x_1445 : vec2<f32> = vec2<f32>(x_1444.x, x_1444.y);
        let x_1447 : f32 = u_xlat2.z;
        txVec17 = vec3<f32>(x_1445.x, x_1445.y, x_1447);
        let x_1454 : vec3<f32> = txVec17;
        let x_1456 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1454.xy, x_1454.z);
        u_xlat47.x = x_1456;
        let x_1459 : f32 = u_xlat18.x;
        let x_1461 : f32 = u_xlat47.x;
        let x_1463 : f32 = u_xlat68;
        u_xlat68 = ((x_1459 * x_1461) + x_1463);
        let x_1466 : vec4<f32> = u_xlat13;
        let x_1467 : vec2<f32> = vec2<f32>(x_1466.z, x_1466.w);
        let x_1469 : f32 = u_xlat2.z;
        txVec18 = vec3<f32>(x_1467.x, x_1467.y, x_1469);
        let x_1476 : vec3<f32> = txVec18;
        let x_1478 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1476.xy, x_1476.z);
        u_xlat47.x = x_1478;
        let x_1481 : f32 = u_xlat18.y;
        let x_1483 : f32 = u_xlat47.x;
        let x_1485 : f32 = u_xlat68;
        u_xlat68 = ((x_1481 * x_1483) + x_1485);
        let x_1488 : vec4<f32> = u_xlat14;
        let x_1489 : vec2<f32> = vec2<f32>(x_1488.x, x_1488.y);
        let x_1491 : f32 = u_xlat2.z;
        txVec19 = vec3<f32>(x_1489.x, x_1489.y, x_1491);
        let x_1498 : vec3<f32> = txVec19;
        let x_1500 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1498.xy, x_1498.z);
        u_xlat47.x = x_1500;
        let x_1503 : f32 = u_xlat18.z;
        let x_1505 : f32 = u_xlat47.x;
        let x_1507 : f32 = u_xlat68;
        u_xlat68 = ((x_1503 * x_1505) + x_1507);
        let x_1510 : vec4<f32> = u_xlat15;
        let x_1511 : vec2<f32> = vec2<f32>(x_1510.z, x_1510.w);
        let x_1513 : f32 = u_xlat2.z;
        txVec20 = vec3<f32>(x_1511.x, x_1511.y, x_1513);
        let x_1520 : vec3<f32> = txVec20;
        let x_1522 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1520.xy, x_1520.z);
        u_xlat47.x = x_1522;
        let x_1525 : f32 = u_xlat18.w;
        let x_1527 : f32 = u_xlat47.x;
        let x_1529 : f32 = u_xlat68;
        u_xlat68 = ((x_1525 * x_1527) + x_1529);
        let x_1532 : vec4<f32> = u_xlat16;
        let x_1533 : vec2<f32> = vec2<f32>(x_1532.x, x_1532.y);
        let x_1535 : f32 = u_xlat2.z;
        txVec21 = vec3<f32>(x_1533.x, x_1533.y, x_1535);
        let x_1542 : vec3<f32> = txVec21;
        let x_1544 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1542.xy, x_1542.z);
        u_xlat47.x = x_1544;
        let x_1547 : f32 = u_xlat19.x;
        let x_1549 : f32 = u_xlat47.x;
        let x_1551 : f32 = u_xlat68;
        u_xlat68 = ((x_1547 * x_1549) + x_1551);
        let x_1554 : vec4<f32> = u_xlat16;
        let x_1555 : vec2<f32> = vec2<f32>(x_1554.z, x_1554.w);
        let x_1557 : f32 = u_xlat2.z;
        txVec22 = vec3<f32>(x_1555.x, x_1555.y, x_1557);
        let x_1564 : vec3<f32> = txVec22;
        let x_1566 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1564.xy, x_1564.z);
        u_xlat47.x = x_1566;
        let x_1569 : f32 = u_xlat19.y;
        let x_1571 : f32 = u_xlat47.x;
        let x_1573 : f32 = u_xlat68;
        u_xlat68 = ((x_1569 * x_1571) + x_1573);
        let x_1576 : vec2<f32> = u_xlat30;
        let x_1578 : f32 = u_xlat2.z;
        txVec23 = vec3<f32>(x_1576.x, x_1576.y, x_1578);
        let x_1585 : vec3<f32> = txVec23;
        let x_1587 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1585.xy, x_1585.z);
        u_xlat47.x = x_1587;
        let x_1590 : f32 = u_xlat19.z;
        let x_1592 : f32 = u_xlat47.x;
        let x_1594 : f32 = u_xlat68;
        u_xlat68 = ((x_1590 * x_1592) + x_1594);
        let x_1597 : vec2<f32> = u_xlat58;
        let x_1599 : f32 = u_xlat2.z;
        txVec24 = vec3<f32>(x_1597.x, x_1597.y, x_1599);
        let x_1606 : vec3<f32> = txVec24;
        let x_1608 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1606.xy, x_1606.z);
        u_xlat47.x = x_1608;
        let x_1611 : f32 = u_xlat19.w;
        let x_1613 : f32 = u_xlat47.x;
        let x_1615 : f32 = u_xlat68;
        u_xlat68 = ((x_1611 * x_1613) + x_1615);
        let x_1618 : vec4<f32> = u_xlat11;
        let x_1619 : vec2<f32> = vec2<f32>(x_1618.x, x_1618.y);
        let x_1621 : f32 = u_xlat2.z;
        txVec25 = vec3<f32>(x_1619.x, x_1619.y, x_1621);
        let x_1628 : vec3<f32> = txVec25;
        let x_1630 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1628.xy, x_1628.z);
        u_xlat47.x = x_1630;
        let x_1633 : f32 = u_xlat7.x;
        let x_1635 : f32 = u_xlat47.x;
        let x_1637 : f32 = u_xlat68;
        u_xlat68 = ((x_1633 * x_1635) + x_1637);
        let x_1640 : vec4<f32> = u_xlat11;
        let x_1641 : vec2<f32> = vec2<f32>(x_1640.z, x_1640.w);
        let x_1643 : f32 = u_xlat2.z;
        txVec26 = vec3<f32>(x_1641.x, x_1641.y, x_1643);
        let x_1650 : vec3<f32> = txVec26;
        let x_1652 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1650.xy, x_1650.z);
        u_xlat47.x = x_1652;
        let x_1655 : f32 = u_xlat7.y;
        let x_1657 : f32 = u_xlat47.x;
        let x_1659 : f32 = u_xlat68;
        u_xlat68 = ((x_1655 * x_1657) + x_1659);
        let x_1662 : vec2<f32> = u_xlat53;
        let x_1664 : f32 = u_xlat2.z;
        txVec27 = vec3<f32>(x_1662.x, x_1662.y, x_1664);
        let x_1671 : vec3<f32> = txVec27;
        let x_1673 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1671.xy, x_1671.z);
        u_xlat47.x = x_1673;
        let x_1676 : f32 = u_xlat7.z;
        let x_1678 : f32 = u_xlat47.x;
        let x_1680 : f32 = u_xlat68;
        u_xlat68 = ((x_1676 * x_1678) + x_1680);
        let x_1683 : vec4<f32> = u_xlat3;
        let x_1684 : vec2<f32> = vec2<f32>(x_1683.x, x_1683.y);
        let x_1686 : f32 = u_xlat2.z;
        txVec28 = vec3<f32>(x_1684.x, x_1684.y, x_1686);
        let x_1693 : vec3<f32> = txVec28;
        let x_1695 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1693.xy, x_1693.z);
        u_xlat3.x = x_1695;
        let x_1698 : f32 = u_xlat7.w;
        let x_1700 : f32 = u_xlat3.x;
        let x_1702 : f32 = u_xlat68;
        u_xlat67 = ((x_1698 * x_1700) + x_1702);
      }
    }
  } else {
    let x_1706 : vec4<f32> = u_xlat2;
    let x_1707 : vec2<f32> = vec2<f32>(x_1706.x, x_1706.y);
    let x_1709 : f32 = u_xlat2.z;
    txVec29 = vec3<f32>(x_1707.x, x_1707.y, x_1709);
    let x_1716 : vec3<f32> = txVec29;
    let x_1718 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1716.xy, x_1716.z);
    u_xlat67 = x_1718;
  }
  let x_1720 : f32 = x_253.x_MainLightShadowParams.x;
  u_xlat68 = (-(x_1720) + 1.0f);
  let x_1723 : f32 = u_xlat67;
  let x_1725 : f32 = x_253.x_MainLightShadowParams.x;
  let x_1727 : f32 = u_xlat68;
  u_xlat67 = ((x_1723 * x_1725) + x_1727);
  let x_1731 : f32 = u_xlat2.z;
  u_xlatb3 = (0.0f >= x_1731);
  let x_1737 : f32 = u_xlat2.z;
  u_xlatb25.x = (x_1737 >= 1.0f);
  let x_1741 : bool = u_xlatb25.x;
  let x_1742 : bool = u_xlatb3;
  u_xlatb3 = (x_1741 | x_1742);
  let x_1744 : bool = u_xlatb3;
  let x_1745 : f32 = u_xlat67;
  u_xlat67 = select(x_1745, 1.0f, x_1744);
  let x_1747 : vec3<f32> = u_xlat1;
  let x_1749 : vec4<f32> = x_139.x_MainLightPosition;
  u_xlat1.x = dot(x_1747, -(vec3<f32>(x_1749.x, x_1749.y, x_1749.z)));
  let x_1755 : f32 = u_xlat1.x;
  u_xlat1.x = clamp(x_1755, 0.0f, 1.0f);
  let x_1759 : f32 = u_xlat67;
  let x_1762 : vec4<f32> = x_139.x_MainLightColor;
  u_xlat23 = (vec3<f32>(x_1759, x_1759, x_1759) * vec3<f32>(x_1762.x, x_1762.y, x_1762.z));
  let x_1765 : vec3<f32> = u_xlat23;
  let x_1766 : vec3<f32> = u_xlat1;
  u_xlat1 = (x_1765 * vec3<f32>(x_1766.x, x_1766.x, x_1766.x));
  let x_1769 : vec3<f32> = u_xlat1;
  let x_1770 : vec4<f32> = u_xlat4;
  u_xlat1 = (x_1769 * vec3<f32>(x_1770.x, x_1770.y, x_1770.z));
  let x_1774 : f32 = u_xlat4.w;
  u_xlatb67 = (x_1774 >= 0.400000006f);
  let x_1777 : bool = u_xlatb67;
  if (x_1777) {
    let x_1782 : f32 = u_xlat4.w;
    x_1778 = x_1782;
  } else {
    x_1778 = 0.0f;
  }
  let x_1784 : f32 = x_1778;
  u_xlat67 = x_1784;
  let x_1786 : f32 = u_xlat4.w;
  u_xlat25.x = (x_1786 + -0.400000006f);
  let x_1791 : f32 = u_xlat4.w;
  u_xlat47.x = dpdxCoarse(x_1791);
  let x_1796 : f32 = u_xlat4.w;
  u_xlat69 = dpdyCoarse(x_1796);
  let x_1798 : f32 = u_xlat69;
  let x_1801 : f32 = u_xlat47.x;
  u_xlat47.x = (abs(x_1798) + abs(x_1801));
  let x_1806 : f32 = u_xlat47.x;
  u_xlat47.x = max(x_1806, 0.0001f);
  let x_1811 : f32 = u_xlat25.x;
  let x_1813 : f32 = u_xlat47.x;
  u_xlat25.x = (x_1811 / x_1813);
  let x_1817 : f32 = u_xlat25.x;
  u_xlat25.x = (x_1817 + 0.5f);
  let x_1821 : f32 = u_xlat25.x;
  u_xlat25.x = clamp(x_1821, 0.0f, 1.0f);
  let x_1826 : f32 = x_139.x_AlphaToMaskAvailable;
  u_xlatb47 = !((x_1826 == 0.0f));
  let x_1828 : bool = u_xlatb47;
  if (x_1828) {
    let x_1833 : f32 = u_xlat25.x;
    x_1829 = x_1833;
  } else {
    let x_1835 : f32 = u_xlat67;
    x_1829 = x_1835;
  }
  let x_1836 : f32 = x_1829;
  u_xlat67 = x_1836;
  let x_1837 : f32 = u_xlat67;
  u_xlat25.x = (x_1837 + -0.0001f);
  let x_1842 : f32 = u_xlat25.x;
  u_xlatb25.x = (x_1842 < 0.0f);
  let x_1846 : bool = u_xlatb25.x;
  if (((select(0i, 1i, x_1846) * -1i) != 0i)) {
    discard;
  }
  let x_1854 : vec3<f32> = u_xlat22;
  let x_1855 : vec3<f32> = u_xlat28;
  u_xlat22 = (x_1854 * vec3<f32>(x_1855.y, x_1855.y, x_1855.y));
  let x_1858 : vec3<f32> = u_xlat28;
  let x_1860 : vec4<f32> = vs_INTERP2;
  let x_1863 : vec3<f32> = u_xlat22;
  u_xlat22 = ((vec3<f32>(x_1858.x, x_1858.x, x_1858.x) * vec3<f32>(x_1860.x, x_1860.y, x_1860.z)) + x_1863);
  let x_1865 : vec3<f32> = u_xlat28;
  let x_1867 : vec3<f32> = vs_INTERP1;
  let x_1869 : vec3<f32> = u_xlat22;
  u_xlat22 = ((vec3<f32>(x_1865.z, x_1865.z, x_1865.z) * x_1867) + x_1869);
  let x_1871 : vec3<f32> = u_xlat22;
  let x_1872 : vec3<f32> = u_xlat22;
  u_xlat25.x = dot(x_1871, x_1872);
  let x_1876 : f32 = u_xlat25.x;
  u_xlat25.x = inverseSqrt(x_1876);
  let x_1879 : vec3<f32> = u_xlat22;
  let x_1880 : vec3<f32> = u_xlat25;
  u_xlat22 = (x_1879 * vec3<f32>(x_1880.x, x_1880.x, x_1880.x));
  let x_1884 : f32 = x_139.unity_OrthoParams.w;
  u_xlatb25.x = (x_1884 == 0.0f);
  let x_1887 : vec3<f32> = vs_INTERP0;
  let x_1891 : vec3<f32> = x_139.x_WorldSpaceCameraPos;
  let x_1892 : vec3<f32> = (-(x_1887) + x_1891);
  let x_1893 : vec4<f32> = u_xlat4;
  u_xlat4 = vec4<f32>(x_1892.x, x_1892.y, x_1892.z, x_1893.w);
  let x_1895 : vec4<f32> = u_xlat4;
  let x_1897 : vec4<f32> = u_xlat4;
  u_xlat69 = dot(vec3<f32>(x_1895.x, x_1895.y, x_1895.z), vec3<f32>(x_1897.x, x_1897.y, x_1897.z));
  let x_1900 : f32 = u_xlat69;
  u_xlat69 = inverseSqrt(x_1900);
  let x_1902 : f32 = u_xlat69;
  let x_1904 : vec4<f32> = u_xlat4;
  let x_1906 : vec3<f32> = (vec3<f32>(x_1902, x_1902, x_1902) * vec3<f32>(x_1904.x, x_1904.y, x_1904.z));
  let x_1907 : vec4<f32> = u_xlat4;
  u_xlat4 = vec4<f32>(x_1906.x, x_1906.y, x_1906.z, x_1907.w);
  let x_1910 : bool = u_xlatb25.x;
  if (x_1910) {
    let x_1915 : f32 = u_xlat4.x;
    x_1911 = x_1915;
  } else {
    let x_1919 : f32 = x_139.unity_MatrixV[0i].z;
    x_1911 = x_1919;
  }
  let x_1920 : f32 = x_1911;
  u_xlat7.x = x_1920;
  let x_1923 : bool = u_xlatb25.x;
  if (x_1923) {
    let x_1928 : f32 = u_xlat4.y;
    x_1924 = x_1928;
  } else {
    let x_1931 : f32 = x_139.unity_MatrixV[1i].z;
    x_1924 = x_1931;
  }
  let x_1932 : f32 = x_1924;
  u_xlat7.y = x_1932;
  let x_1935 : bool = u_xlatb25.x;
  if (x_1935) {
    let x_1940 : f32 = u_xlat4.z;
    x_1936 = x_1940;
  } else {
    let x_1943 : f32 = x_139.unity_MatrixV[2i].z;
    x_1936 = x_1943;
  }
  let x_1944 : f32 = x_1936;
  u_xlat7.z = x_1944;
  let x_1953 : vec2<f32> = vs_INTERP5;
  let x_1955 : f32 = x_139.x_GlobalMipBias.x;
  let x_1956 : vec4<f32> = textureSampleBias(unity_LightmapInd, samplerunity_Lightmap, x_1953, x_1955);
  u_xlat4 = x_1956;
  let x_1961 : vec2<f32> = vs_INTERP5;
  let x_1963 : f32 = x_139.x_GlobalMipBias.x;
  let x_1964 : vec4<f32> = textureSampleBias(unity_Lightmap, samplerunity_Lightmap, x_1961, x_1963);
  u_xlat28 = vec3<f32>(x_1964.x, x_1964.y, x_1964.z);
  let x_1966 : vec4<f32> = u_xlat4;
  let x_1969 : vec3<f32> = (vec3<f32>(x_1966.x, x_1966.y, x_1966.z) + vec3<f32>(-0.5f, -0.5f, -0.5f));
  let x_1970 : vec4<f32> = u_xlat4;
  u_xlat4 = vec4<f32>(x_1969.x, x_1969.y, x_1969.z, x_1970.w);
  let x_1972 : vec3<f32> = u_xlat22;
  let x_1973 : vec4<f32> = u_xlat4;
  u_xlat25.x = dot(x_1972, vec3<f32>(x_1973.x, x_1973.y, x_1973.z));
  let x_1978 : f32 = u_xlat25.x;
  u_xlat25.x = (x_1978 + 0.5f);
  let x_1981 : vec3<f32> = u_xlat25;
  let x_1983 : vec3<f32> = u_xlat28;
  let x_1984 : vec3<f32> = (vec3<f32>(x_1981.x, x_1981.x, x_1981.x) * x_1983);
  let x_1985 : vec4<f32> = u_xlat4;
  u_xlat4 = vec4<f32>(x_1984.x, x_1984.y, x_1984.z, x_1985.w);
  let x_1988 : f32 = u_xlat4.w;
  u_xlat25.x = max(x_1988, 0.0001f);
  let x_1991 : vec4<f32> = u_xlat4;
  let x_1993 : vec3<f32> = u_xlat25;
  let x_1995 : vec3<f32> = (vec3<f32>(x_1991.x, x_1991.y, x_1991.z) / vec3<f32>(x_1993.x, x_1993.x, x_1993.x));
  let x_1996 : vec4<f32> = u_xlat4;
  u_xlat4 = vec4<f32>(x_1995.x, x_1995.y, x_1995.z, x_1996.w);
  let x_1999 : vec4<f32> = x_139.x_ScaledScreenParams;
  let x_2000 : vec2<f32> = vec2<f32>(x_1999.x, x_1999.y);
  let x_2004 : vec2<f32> = (vec2<f32>(1.0f, 1.0f) / vec2<f32>(x_2000.x, x_2000.y));
  let x_2005 : vec3<f32> = u_xlat25;
  u_xlat25 = vec3<f32>(x_2004.x, x_2005.y, x_2004.y);
  let x_2007 : vec3<f32> = u_xlat25;
  let x_2009 : vec4<f32> = hlslcc_FragCoord;
  let x_2011 : vec2<f32> = (vec2<f32>(x_2007.x, x_2007.z) * vec2<f32>(x_2009.x, x_2009.y));
  let x_2012 : vec4<f32> = u_xlat8;
  u_xlat8 = vec4<f32>(x_2011.x, x_2011.y, x_2012.z, x_2012.w);
  let x_2015 : f32 = u_xlat8.y;
  let x_2017 : f32 = x_139.x_ScaleBiasRt.x;
  let x_2020 : f32 = x_139.x_ScaleBiasRt.y;
  u_xlat25.x = ((x_2015 * x_2017) + x_2020);
  let x_2024 : f32 = u_xlat25.x;
  u_xlat8.z = (-(x_2024) + 1.0f);
  let x_2029 : f32 = u_xlat6.x;
  u_xlat6.x = x_2029;
  let x_2032 : f32 = u_xlat6.x;
  u_xlat6.x = clamp(x_2032, 0.0f, 1.0f);
  let x_2035 : f32 = u_xlat67;
  u_xlat67 = min(x_2035, 1.0f);
  let x_2037 : vec3<f32> = u_xlat5;
  u_xlat5 = (x_2037 * vec3<f32>(0.959999979f, 0.959999979f, 0.959999979f));
  let x_2042 : f32 = u_xlat6.x;
  u_xlat25.x = (-(x_2042) + 1.0f);
  let x_2047 : f32 = u_xlat25.x;
  let x_2049 : f32 = u_xlat25.x;
  u_xlat69 = (x_2047 * x_2049);
  let x_2051 : f32 = u_xlat69;
  u_xlat69 = max(x_2051, 0.0078125f);
  let x_2055 : f32 = u_xlat69;
  let x_2056 : f32 = u_xlat69;
  u_xlat70 = (x_2055 * x_2056);
  let x_2059 : f32 = u_xlat6.x;
  u_xlat71 = (x_2059 + 0.040000021f);
  let x_2062 : f32 = u_xlat71;
  u_xlat71 = min(x_2062, 1.0f);
  let x_2064 : f32 = u_xlat69;
  u_xlat6.x = ((x_2064 * 4.0f) + 2.0f);
  let x_2073 : vec4<f32> = u_xlat8;
  let x_2076 : f32 = x_139.x_GlobalMipBias.x;
  let x_2077 : vec4<f32> = textureSampleBias(x_ScreenSpaceOcclusionTexture, sampler_ScreenSpaceOcclusionTexture, vec2<f32>(x_2073.x, x_2073.z), x_2076);
  u_xlat28.x = x_2077.x;
  let x_2082 : f32 = u_xlat28.x;
  u_xlat50 = (x_2082 + -1.0f);
  let x_2085 : f32 = x_139.x_AmbientOcclusionParam.w;
  let x_2086 : f32 = u_xlat50;
  u_xlat50 = ((x_2085 * x_2086) + 1.0f);
  let x_2090 : f32 = u_xlat28.x;
  let x_2092 : f32 = vs_INTERP4.w;
  u_xlat28.x = min(x_2090, x_2092);
  let x_2095 : bool = u_xlatb0;
  if (x_2095) {
    let x_2099 : f32 = x_253.x_MainLightShadowParams.y;
    u_xlatb0 = (x_2099 == 1.0f);
    let x_2101 : bool = u_xlatb0;
    if (x_2101) {
      let x_2104 : vec4<f32> = u_xlat2;
      let x_2107 : vec4<f32> = x_253.x_MainLightShadowOffset0;
      u_xlat8 = (vec4<f32>(x_2104.x, x_2104.y, x_2104.x, x_2104.y) + x_2107);
      let x_2110 : vec4<f32> = u_xlat8;
      let x_2111 : vec2<f32> = vec2<f32>(x_2110.x, x_2110.y);
      let x_2113 : f32 = u_xlat2.z;
      txVec30 = vec3<f32>(x_2111.x, x_2111.y, x_2113);
      let x_2120 : vec3<f32> = txVec30;
      let x_2122 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2120.xy, x_2120.z);
      u_xlat9.x = x_2122;
      let x_2125 : vec4<f32> = u_xlat8;
      let x_2126 : vec2<f32> = vec2<f32>(x_2125.z, x_2125.w);
      let x_2128 : f32 = u_xlat2.z;
      txVec31 = vec3<f32>(x_2126.x, x_2126.y, x_2128);
      let x_2135 : vec3<f32> = txVec31;
      let x_2137 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2135.xy, x_2135.z);
      u_xlat9.y = x_2137;
      let x_2139 : vec4<f32> = u_xlat2;
      let x_2142 : vec4<f32> = x_253.x_MainLightShadowOffset1;
      u_xlat8 = (vec4<f32>(x_2139.x, x_2139.y, x_2139.x, x_2139.y) + x_2142);
      let x_2145 : vec4<f32> = u_xlat8;
      let x_2146 : vec2<f32> = vec2<f32>(x_2145.x, x_2145.y);
      let x_2148 : f32 = u_xlat2.z;
      txVec32 = vec3<f32>(x_2146.x, x_2146.y, x_2148);
      let x_2155 : vec3<f32> = txVec32;
      let x_2157 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2155.xy, x_2155.z);
      u_xlat9.z = x_2157;
      let x_2160 : vec4<f32> = u_xlat8;
      let x_2161 : vec2<f32> = vec2<f32>(x_2160.z, x_2160.w);
      let x_2163 : f32 = u_xlat2.z;
      txVec33 = vec3<f32>(x_2161.x, x_2161.y, x_2163);
      let x_2170 : vec3<f32> = txVec33;
      let x_2172 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2170.xy, x_2170.z);
      u_xlat9.w = x_2172;
      let x_2174 : vec4<f32> = u_xlat9;
      u_xlat0.x = dot(x_2174, vec4<f32>(0.25f, 0.25f, 0.25f, 0.25f));
    } else {
      let x_2180 : f32 = x_253.x_MainLightShadowParams.y;
      u_xlatb72 = (x_2180 == 2.0f);
      let x_2182 : bool = u_xlatb72;
      if (x_2182) {
        let x_2185 : vec4<f32> = u_xlat2;
        let x_2188 : vec4<f32> = x_253.x_MainLightShadowmapSize;
        let x_2191 : vec2<f32> = ((vec2<f32>(x_2185.x, x_2185.y) * vec2<f32>(x_2188.z, x_2188.w)) + vec2<f32>(0.5f, 0.5f));
        let x_2192 : vec4<f32> = u_xlat8;
        u_xlat8 = vec4<f32>(x_2191.x, x_2191.y, x_2192.z, x_2192.w);
        let x_2194 : vec4<f32> = u_xlat8;
        let x_2196 : vec2<f32> = floor(vec2<f32>(x_2194.x, x_2194.y));
        let x_2197 : vec4<f32> = u_xlat8;
        u_xlat8 = vec4<f32>(x_2196.x, x_2196.y, x_2197.z, x_2197.w);
        let x_2199 : vec4<f32> = u_xlat2;
        let x_2202 : vec4<f32> = x_253.x_MainLightShadowmapSize;
        let x_2205 : vec4<f32> = u_xlat8;
        u_xlat52 = ((vec2<f32>(x_2199.x, x_2199.y) * vec2<f32>(x_2202.z, x_2202.w)) + -(vec2<f32>(x_2205.x, x_2205.y)));
        let x_2209 : vec2<f32> = u_xlat52;
        u_xlat9 = (vec4<f32>(x_2209.x, x_2209.x, x_2209.y, x_2209.y) + vec4<f32>(0.5f, 1.0f, 0.5f, 1.0f));
        let x_2212 : vec4<f32> = u_xlat9;
        let x_2214 : vec4<f32> = u_xlat9;
        u_xlat10 = (vec4<f32>(x_2212.x, x_2212.x, x_2212.z, x_2212.z) * vec4<f32>(x_2214.x, x_2214.x, x_2214.z, x_2214.z));
        let x_2217 : vec4<f32> = u_xlat10;
        let x_2219 : vec2<f32> = (vec2<f32>(x_2217.y, x_2217.w) * vec2<f32>(0.079999998f, 0.079999998f));
        let x_2220 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_2219.x, x_2220.y, x_2219.y, x_2220.w);
        let x_2222 : vec4<f32> = u_xlat10;
        let x_2225 : vec2<f32> = u_xlat52;
        let x_2227 : vec2<f32> = ((vec2<f32>(x_2222.x, x_2222.z) * vec2<f32>(0.5f, 0.5f)) + -(x_2225));
        let x_2228 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_2227.x, x_2227.y, x_2228.z, x_2228.w);
        let x_2231 : vec2<f32> = u_xlat52;
        u_xlat54 = (-(x_2231) + vec2<f32>(1.0f, 1.0f));
        let x_2234 : vec2<f32> = u_xlat52;
        let x_2235 : vec2<f32> = min(x_2234, vec2<f32>(0.0f, 0.0f));
        let x_2236 : vec4<f32> = u_xlat11;
        u_xlat11 = vec4<f32>(x_2235.x, x_2235.y, x_2236.z, x_2236.w);
        let x_2238 : vec4<f32> = u_xlat11;
        let x_2241 : vec4<f32> = u_xlat11;
        let x_2244 : vec2<f32> = u_xlat54;
        let x_2245 : vec2<f32> = ((-(vec2<f32>(x_2238.x, x_2238.y)) * vec2<f32>(x_2241.x, x_2241.y)) + x_2244);
        let x_2246 : vec4<f32> = u_xlat11;
        u_xlat11 = vec4<f32>(x_2245.x, x_2245.y, x_2246.z, x_2246.w);
        let x_2248 : vec2<f32> = u_xlat52;
        u_xlat52 = max(x_2248, vec2<f32>(0.0f, 0.0f));
        let x_2250 : vec2<f32> = u_xlat52;
        let x_2252 : vec2<f32> = u_xlat52;
        let x_2254 : vec4<f32> = u_xlat9;
        u_xlat52 = ((-(x_2250) * x_2252) + vec2<f32>(x_2254.y, x_2254.w));
        let x_2257 : vec4<f32> = u_xlat11;
        let x_2259 : vec2<f32> = (vec2<f32>(x_2257.x, x_2257.y) + vec2<f32>(1.0f, 1.0f));
        let x_2260 : vec4<f32> = u_xlat11;
        u_xlat11 = vec4<f32>(x_2259.x, x_2259.y, x_2260.z, x_2260.w);
        let x_2262 : vec2<f32> = u_xlat52;
        u_xlat52 = (x_2262 + vec2<f32>(1.0f, 1.0f));
        let x_2264 : vec4<f32> = u_xlat10;
        let x_2266 : vec2<f32> = (vec2<f32>(x_2264.x, x_2264.y) * vec2<f32>(0.159999996f, 0.159999996f));
        let x_2267 : vec4<f32> = u_xlat12;
        u_xlat12 = vec4<f32>(x_2266.x, x_2266.y, x_2267.z, x_2267.w);
        let x_2269 : vec2<f32> = u_xlat54;
        let x_2270 : vec2<f32> = (x_2269 * vec2<f32>(0.159999996f, 0.159999996f));
        let x_2271 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_2270.x, x_2270.y, x_2271.z, x_2271.w);
        let x_2273 : vec4<f32> = u_xlat11;
        let x_2275 : vec2<f32> = (vec2<f32>(x_2273.x, x_2273.y) * vec2<f32>(0.159999996f, 0.159999996f));
        let x_2276 : vec4<f32> = u_xlat11;
        u_xlat11 = vec4<f32>(x_2275.x, x_2275.y, x_2276.z, x_2276.w);
        let x_2278 : vec2<f32> = u_xlat52;
        let x_2279 : vec2<f32> = (x_2278 * vec2<f32>(0.159999996f, 0.159999996f));
        let x_2280 : vec4<f32> = u_xlat13;
        u_xlat13 = vec4<f32>(x_2279.x, x_2279.y, x_2280.z, x_2280.w);
        let x_2282 : vec4<f32> = u_xlat9;
        u_xlat52 = (vec2<f32>(x_2282.y, x_2282.w) * vec2<f32>(0.159999996f, 0.159999996f));
        let x_2286 : f32 = u_xlat11.x;
        u_xlat12.z = x_2286;
        let x_2289 : f32 = u_xlat52.x;
        u_xlat12.w = x_2289;
        let x_2292 : f32 = u_xlat13.x;
        u_xlat10.z = x_2292;
        let x_2295 : f32 = u_xlat9.x;
        u_xlat10.w = x_2295;
        let x_2297 : vec4<f32> = u_xlat10;
        let x_2299 : vec4<f32> = u_xlat12;
        u_xlat14 = (vec4<f32>(x_2297.z, x_2297.w, x_2297.x, x_2297.z) + vec4<f32>(x_2299.z, x_2299.w, x_2299.x, x_2299.z));
        let x_2303 : f32 = u_xlat12.y;
        u_xlat11.z = x_2303;
        let x_2306 : f32 = u_xlat52.y;
        u_xlat11.w = x_2306;
        let x_2309 : f32 = u_xlat10.y;
        u_xlat13.z = x_2309;
        let x_2312 : f32 = u_xlat9.z;
        u_xlat13.w = x_2312;
        let x_2314 : vec4<f32> = u_xlat11;
        let x_2316 : vec4<f32> = u_xlat13;
        let x_2318 : vec3<f32> = (vec3<f32>(x_2314.z, x_2314.y, x_2314.w) + vec3<f32>(x_2316.z, x_2316.y, x_2316.w));
        let x_2319 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_2318.x, x_2318.y, x_2318.z, x_2319.w);
        let x_2321 : vec4<f32> = u_xlat10;
        let x_2323 : vec4<f32> = u_xlat14;
        let x_2325 : vec3<f32> = (vec3<f32>(x_2321.x, x_2321.z, x_2321.w) / vec3<f32>(x_2323.z, x_2323.w, x_2323.y));
        let x_2326 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_2325.x, x_2325.y, x_2325.z, x_2326.w);
        let x_2328 : vec4<f32> = u_xlat10;
        let x_2330 : vec3<f32> = (vec3<f32>(x_2328.x, x_2328.y, x_2328.z) + vec3<f32>(-2.5f, -0.5f, 1.5f));
        let x_2331 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_2330.x, x_2330.y, x_2330.z, x_2331.w);
        let x_2333 : vec4<f32> = u_xlat13;
        let x_2335 : vec4<f32> = u_xlat9;
        let x_2337 : vec3<f32> = (vec3<f32>(x_2333.z, x_2333.y, x_2333.w) / vec3<f32>(x_2335.x, x_2335.y, x_2335.z));
        let x_2338 : vec4<f32> = u_xlat11;
        u_xlat11 = vec4<f32>(x_2337.x, x_2337.y, x_2337.z, x_2338.w);
        let x_2340 : vec4<f32> = u_xlat11;
        let x_2342 : vec3<f32> = (vec3<f32>(x_2340.x, x_2340.y, x_2340.z) + vec3<f32>(-2.5f, -0.5f, 1.5f));
        let x_2343 : vec4<f32> = u_xlat11;
        u_xlat11 = vec4<f32>(x_2342.x, x_2342.y, x_2342.z, x_2343.w);
        let x_2345 : vec4<f32> = u_xlat10;
        let x_2348 : vec4<f32> = x_253.x_MainLightShadowmapSize;
        let x_2350 : vec3<f32> = (vec3<f32>(x_2345.y, x_2345.x, x_2345.z) * vec3<f32>(x_2348.x, x_2348.x, x_2348.x));
        let x_2351 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_2350.x, x_2350.y, x_2350.z, x_2351.w);
        let x_2353 : vec4<f32> = u_xlat11;
        let x_2356 : vec4<f32> = x_253.x_MainLightShadowmapSize;
        let x_2358 : vec3<f32> = (vec3<f32>(x_2353.x, x_2353.y, x_2353.z) * vec3<f32>(x_2356.y, x_2356.y, x_2356.y));
        let x_2359 : vec4<f32> = u_xlat11;
        u_xlat11 = vec4<f32>(x_2358.x, x_2358.y, x_2358.z, x_2359.w);
        let x_2362 : f32 = u_xlat11.x;
        u_xlat10.w = x_2362;
        let x_2364 : vec4<f32> = u_xlat8;
        let x_2367 : vec4<f32> = x_253.x_MainLightShadowmapSize;
        let x_2370 : vec4<f32> = u_xlat10;
        u_xlat12 = ((vec4<f32>(x_2364.x, x_2364.y, x_2364.x, x_2364.y) * vec4<f32>(x_2367.x, x_2367.y, x_2367.x, x_2367.y)) + vec4<f32>(x_2370.y, x_2370.w, x_2370.x, x_2370.w));
        let x_2373 : vec4<f32> = u_xlat8;
        let x_2376 : vec4<f32> = x_253.x_MainLightShadowmapSize;
        let x_2379 : vec4<f32> = u_xlat10;
        u_xlat52 = ((vec2<f32>(x_2373.x, x_2373.y) * vec2<f32>(x_2376.x, x_2376.y)) + vec2<f32>(x_2379.z, x_2379.w));
        let x_2383 : f32 = u_xlat10.y;
        u_xlat11.w = x_2383;
        let x_2385 : vec4<f32> = u_xlat11;
        let x_2386 : vec2<f32> = vec2<f32>(x_2385.y, x_2385.z);
        let x_2387 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_2387.x, x_2386.x, x_2387.z, x_2386.y);
        let x_2389 : vec4<f32> = u_xlat8;
        let x_2392 : vec4<f32> = x_253.x_MainLightShadowmapSize;
        let x_2395 : vec4<f32> = u_xlat10;
        u_xlat13 = ((vec4<f32>(x_2389.x, x_2389.y, x_2389.x, x_2389.y) * vec4<f32>(x_2392.x, x_2392.y, x_2392.x, x_2392.y)) + vec4<f32>(x_2395.x, x_2395.y, x_2395.z, x_2395.y));
        let x_2398 : vec4<f32> = u_xlat8;
        let x_2401 : vec4<f32> = x_253.x_MainLightShadowmapSize;
        let x_2404 : vec4<f32> = u_xlat11;
        u_xlat11 = ((vec4<f32>(x_2398.x, x_2398.y, x_2398.x, x_2398.y) * vec4<f32>(x_2401.x, x_2401.y, x_2401.x, x_2401.y)) + vec4<f32>(x_2404.w, x_2404.y, x_2404.w, x_2404.z));
        let x_2407 : vec4<f32> = u_xlat8;
        let x_2410 : vec4<f32> = x_253.x_MainLightShadowmapSize;
        let x_2413 : vec4<f32> = u_xlat10;
        u_xlat10 = ((vec4<f32>(x_2407.x, x_2407.y, x_2407.x, x_2407.y) * vec4<f32>(x_2410.x, x_2410.y, x_2410.x, x_2410.y)) + vec4<f32>(x_2413.x, x_2413.w, x_2413.z, x_2413.w));
        let x_2416 : vec4<f32> = u_xlat9;
        let x_2418 : vec4<f32> = u_xlat14;
        u_xlat15 = (vec4<f32>(x_2416.x, x_2416.x, x_2416.x, x_2416.y) * vec4<f32>(x_2418.z, x_2418.w, x_2418.y, x_2418.z));
        let x_2421 : vec4<f32> = u_xlat9;
        let x_2423 : vec4<f32> = u_xlat14;
        u_xlat16 = (vec4<f32>(x_2421.y, x_2421.y, x_2421.z, x_2421.z) * x_2423);
        let x_2427 : f32 = u_xlat9.z;
        let x_2429 : f32 = u_xlat14.y;
        u_xlat72 = (x_2427 * x_2429);
        let x_2432 : vec4<f32> = u_xlat12;
        let x_2433 : vec2<f32> = vec2<f32>(x_2432.x, x_2432.y);
        let x_2435 : f32 = u_xlat2.z;
        txVec34 = vec3<f32>(x_2433.x, x_2433.y, x_2435);
        let x_2443 : vec3<f32> = txVec34;
        let x_2445 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2443.xy, x_2443.z);
        u_xlat73 = x_2445;
        let x_2447 : vec4<f32> = u_xlat12;
        let x_2448 : vec2<f32> = vec2<f32>(x_2447.z, x_2447.w);
        let x_2450 : f32 = u_xlat2.z;
        txVec35 = vec3<f32>(x_2448.x, x_2448.y, x_2450);
        let x_2457 : vec3<f32> = txVec35;
        let x_2459 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2457.xy, x_2457.z);
        u_xlat8.x = x_2459;
        let x_2462 : f32 = u_xlat8.x;
        let x_2464 : f32 = u_xlat15.y;
        u_xlat8.x = (x_2462 * x_2464);
        let x_2468 : f32 = u_xlat15.x;
        let x_2469 : f32 = u_xlat73;
        let x_2472 : f32 = u_xlat8.x;
        u_xlat73 = ((x_2468 * x_2469) + x_2472);
        let x_2475 : vec2<f32> = u_xlat52;
        let x_2477 : f32 = u_xlat2.z;
        txVec36 = vec3<f32>(x_2475.x, x_2475.y, x_2477);
        let x_2484 : vec3<f32> = txVec36;
        let x_2486 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2484.xy, x_2484.z);
        u_xlat8.x = x_2486;
        let x_2489 : f32 = u_xlat15.z;
        let x_2491 : f32 = u_xlat8.x;
        let x_2493 : f32 = u_xlat73;
        u_xlat73 = ((x_2489 * x_2491) + x_2493);
        let x_2496 : vec4<f32> = u_xlat11;
        let x_2497 : vec2<f32> = vec2<f32>(x_2496.x, x_2496.y);
        let x_2499 : f32 = u_xlat2.z;
        txVec37 = vec3<f32>(x_2497.x, x_2497.y, x_2499);
        let x_2506 : vec3<f32> = txVec37;
        let x_2508 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2506.xy, x_2506.z);
        u_xlat8.x = x_2508;
        let x_2511 : f32 = u_xlat15.w;
        let x_2513 : f32 = u_xlat8.x;
        let x_2515 : f32 = u_xlat73;
        u_xlat73 = ((x_2511 * x_2513) + x_2515);
        let x_2518 : vec4<f32> = u_xlat13;
        let x_2519 : vec2<f32> = vec2<f32>(x_2518.x, x_2518.y);
        let x_2521 : f32 = u_xlat2.z;
        txVec38 = vec3<f32>(x_2519.x, x_2519.y, x_2521);
        let x_2528 : vec3<f32> = txVec38;
        let x_2530 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2528.xy, x_2528.z);
        u_xlat8.x = x_2530;
        let x_2533 : f32 = u_xlat16.x;
        let x_2535 : f32 = u_xlat8.x;
        let x_2537 : f32 = u_xlat73;
        u_xlat73 = ((x_2533 * x_2535) + x_2537);
        let x_2540 : vec4<f32> = u_xlat13;
        let x_2541 : vec2<f32> = vec2<f32>(x_2540.z, x_2540.w);
        let x_2543 : f32 = u_xlat2.z;
        txVec39 = vec3<f32>(x_2541.x, x_2541.y, x_2543);
        let x_2550 : vec3<f32> = txVec39;
        let x_2552 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2550.xy, x_2550.z);
        u_xlat8.x = x_2552;
        let x_2555 : f32 = u_xlat16.y;
        let x_2557 : f32 = u_xlat8.x;
        let x_2559 : f32 = u_xlat73;
        u_xlat73 = ((x_2555 * x_2557) + x_2559);
        let x_2562 : vec4<f32> = u_xlat11;
        let x_2563 : vec2<f32> = vec2<f32>(x_2562.z, x_2562.w);
        let x_2565 : f32 = u_xlat2.z;
        txVec40 = vec3<f32>(x_2563.x, x_2563.y, x_2565);
        let x_2572 : vec3<f32> = txVec40;
        let x_2574 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2572.xy, x_2572.z);
        u_xlat8.x = x_2574;
        let x_2577 : f32 = u_xlat16.z;
        let x_2579 : f32 = u_xlat8.x;
        let x_2581 : f32 = u_xlat73;
        u_xlat73 = ((x_2577 * x_2579) + x_2581);
        let x_2584 : vec4<f32> = u_xlat10;
        let x_2585 : vec2<f32> = vec2<f32>(x_2584.x, x_2584.y);
        let x_2587 : f32 = u_xlat2.z;
        txVec41 = vec3<f32>(x_2585.x, x_2585.y, x_2587);
        let x_2594 : vec3<f32> = txVec41;
        let x_2596 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2594.xy, x_2594.z);
        u_xlat8.x = x_2596;
        let x_2599 : f32 = u_xlat16.w;
        let x_2601 : f32 = u_xlat8.x;
        let x_2603 : f32 = u_xlat73;
        u_xlat73 = ((x_2599 * x_2601) + x_2603);
        let x_2606 : vec4<f32> = u_xlat10;
        let x_2607 : vec2<f32> = vec2<f32>(x_2606.z, x_2606.w);
        let x_2609 : f32 = u_xlat2.z;
        txVec42 = vec3<f32>(x_2607.x, x_2607.y, x_2609);
        let x_2616 : vec3<f32> = txVec42;
        let x_2618 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2616.xy, x_2616.z);
        u_xlat8.x = x_2618;
        let x_2620 : f32 = u_xlat72;
        let x_2622 : f32 = u_xlat8.x;
        let x_2624 : f32 = u_xlat73;
        u_xlat0.x = ((x_2620 * x_2622) + x_2624);
      } else {
        let x_2628 : vec4<f32> = u_xlat2;
        let x_2631 : vec4<f32> = x_253.x_MainLightShadowmapSize;
        let x_2634 : vec2<f32> = ((vec2<f32>(x_2628.x, x_2628.y) * vec2<f32>(x_2631.z, x_2631.w)) + vec2<f32>(0.5f, 0.5f));
        let x_2635 : vec4<f32> = u_xlat8;
        u_xlat8 = vec4<f32>(x_2634.x, x_2634.y, x_2635.z, x_2635.w);
        let x_2637 : vec4<f32> = u_xlat8;
        let x_2639 : vec2<f32> = floor(vec2<f32>(x_2637.x, x_2637.y));
        let x_2640 : vec4<f32> = u_xlat8;
        u_xlat8 = vec4<f32>(x_2639.x, x_2639.y, x_2640.z, x_2640.w);
        let x_2642 : vec4<f32> = u_xlat2;
        let x_2645 : vec4<f32> = x_253.x_MainLightShadowmapSize;
        let x_2648 : vec4<f32> = u_xlat8;
        u_xlat52 = ((vec2<f32>(x_2642.x, x_2642.y) * vec2<f32>(x_2645.z, x_2645.w)) + -(vec2<f32>(x_2648.x, x_2648.y)));
        let x_2652 : vec2<f32> = u_xlat52;
        u_xlat9 = (vec4<f32>(x_2652.x, x_2652.x, x_2652.y, x_2652.y) + vec4<f32>(0.5f, 1.0f, 0.5f, 1.0f));
        let x_2655 : vec4<f32> = u_xlat9;
        let x_2657 : vec4<f32> = u_xlat9;
        u_xlat10 = (vec4<f32>(x_2655.x, x_2655.x, x_2655.z, x_2655.z) * vec4<f32>(x_2657.x, x_2657.x, x_2657.z, x_2657.z));
        let x_2660 : vec4<f32> = u_xlat10;
        let x_2662 : vec2<f32> = (vec2<f32>(x_2660.y, x_2660.w) * vec2<f32>(0.040816002f, 0.040816002f));
        let x_2663 : vec4<f32> = u_xlat11;
        u_xlat11 = vec4<f32>(x_2663.x, x_2662.x, x_2663.z, x_2662.y);
        let x_2665 : vec4<f32> = u_xlat10;
        let x_2668 : vec2<f32> = u_xlat52;
        let x_2670 : vec2<f32> = ((vec2<f32>(x_2665.x, x_2665.z) * vec2<f32>(0.5f, 0.5f)) + -(x_2668));
        let x_2671 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_2670.x, x_2671.y, x_2670.y, x_2671.w);
        let x_2673 : vec2<f32> = u_xlat52;
        let x_2675 : vec2<f32> = (-(x_2673) + vec2<f32>(1.0f, 1.0f));
        let x_2676 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_2675.x, x_2675.y, x_2676.z, x_2676.w);
        let x_2678 : vec2<f32> = u_xlat52;
        u_xlat54 = min(x_2678, vec2<f32>(0.0f, 0.0f));
        let x_2680 : vec2<f32> = u_xlat54;
        let x_2682 : vec2<f32> = u_xlat54;
        let x_2684 : vec4<f32> = u_xlat10;
        let x_2686 : vec2<f32> = ((-(x_2680) * x_2682) + vec2<f32>(x_2684.x, x_2684.y));
        let x_2687 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_2686.x, x_2686.y, x_2687.z, x_2687.w);
        let x_2689 : vec2<f32> = u_xlat52;
        u_xlat54 = max(x_2689, vec2<f32>(0.0f, 0.0f));
        let x_2692 : vec2<f32> = u_xlat54;
        let x_2694 : vec2<f32> = u_xlat54;
        let x_2696 : vec4<f32> = u_xlat9;
        let x_2698 : vec2<f32> = ((-(x_2692) * x_2694) + vec2<f32>(x_2696.y, x_2696.w));
        let x_2699 : vec3<f32> = u_xlat31;
        u_xlat31 = vec3<f32>(x_2698.x, x_2699.y, x_2698.y);
        let x_2701 : vec4<f32> = u_xlat10;
        let x_2703 : vec2<f32> = (vec2<f32>(x_2701.x, x_2701.y) + vec2<f32>(2.0f, 2.0f));
        let x_2704 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_2703.x, x_2703.y, x_2704.z, x_2704.w);
        let x_2706 : vec3<f32> = u_xlat31;
        let x_2708 : vec2<f32> = (vec2<f32>(x_2706.x, x_2706.z) + vec2<f32>(2.0f, 2.0f));
        let x_2709 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_2709.x, x_2708.x, x_2709.z, x_2708.y);
        let x_2712 : f32 = u_xlat9.y;
        u_xlat12.z = (x_2712 * 0.081632003f);
        let x_2715 : vec4<f32> = u_xlat9;
        let x_2717 : vec3<f32> = (vec3<f32>(x_2715.z, x_2715.x, x_2715.w) * vec3<f32>(0.081632003f, 0.081632003f, 0.081632003f));
        let x_2718 : vec4<f32> = u_xlat13;
        u_xlat13 = vec4<f32>(x_2717.x, x_2717.y, x_2717.z, x_2718.w);
        let x_2720 : vec4<f32> = u_xlat10;
        let x_2722 : vec2<f32> = (vec2<f32>(x_2720.x, x_2720.y) * vec2<f32>(0.081632003f, 0.081632003f));
        let x_2723 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_2722.x, x_2722.y, x_2723.z, x_2723.w);
        let x_2726 : f32 = u_xlat13.y;
        u_xlat12.x = x_2726;
        let x_2728 : vec2<f32> = u_xlat52;
        let x_2731 : vec2<f32> = ((vec2<f32>(x_2728.x, x_2728.x) * vec2<f32>(-0.081632003f, 0.081632003f)) + vec2<f32>(0.163264006f, 0.081632003f));
        let x_2732 : vec4<f32> = u_xlat12;
        u_xlat12 = vec4<f32>(x_2732.x, x_2731.x, x_2732.z, x_2731.y);
        let x_2734 : vec2<f32> = u_xlat52;
        let x_2737 : vec2<f32> = ((vec2<f32>(x_2734.x, x_2734.x) * vec2<f32>(-0.081632003f, 0.081632003f)) + vec2<f32>(0.081632003f, 0.163264006f));
        let x_2738 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_2737.x, x_2738.y, x_2737.y, x_2738.w);
        let x_2741 : f32 = u_xlat9.x;
        u_xlat10.y = x_2741;
        let x_2744 : f32 = u_xlat11.y;
        u_xlat10.w = x_2744;
        let x_2746 : vec4<f32> = u_xlat10;
        let x_2747 : vec4<f32> = u_xlat12;
        u_xlat12 = (x_2746 + x_2747);
        let x_2749 : vec2<f32> = u_xlat52;
        let x_2752 : vec2<f32> = ((vec2<f32>(x_2749.y, x_2749.y) * vec2<f32>(-0.081632003f, 0.081632003f)) + vec2<f32>(0.163264006f, 0.081632003f));
        let x_2753 : vec4<f32> = u_xlat13;
        u_xlat13 = vec4<f32>(x_2753.x, x_2752.x, x_2753.z, x_2752.y);
        let x_2755 : vec2<f32> = u_xlat52;
        let x_2758 : vec2<f32> = ((vec2<f32>(x_2755.y, x_2755.y) * vec2<f32>(-0.081632003f, 0.081632003f)) + vec2<f32>(0.081632003f, 0.163264006f));
        let x_2759 : vec4<f32> = u_xlat11;
        u_xlat11 = vec4<f32>(x_2758.x, x_2759.y, x_2758.y, x_2759.w);
        let x_2762 : f32 = u_xlat9.y;
        u_xlat11.y = x_2762;
        let x_2764 : vec4<f32> = u_xlat11;
        let x_2765 : vec4<f32> = u_xlat13;
        u_xlat9 = (x_2764 + x_2765);
        let x_2767 : vec4<f32> = u_xlat10;
        let x_2768 : vec4<f32> = u_xlat12;
        u_xlat10 = (x_2767 / x_2768);
        let x_2770 : vec4<f32> = u_xlat10;
        u_xlat10 = (x_2770 + vec4<f32>(-3.5f, -1.5f, 0.5f, 2.5f));
        let x_2772 : vec4<f32> = u_xlat11;
        let x_2773 : vec4<f32> = u_xlat9;
        u_xlat11 = (x_2772 / x_2773);
        let x_2775 : vec4<f32> = u_xlat11;
        u_xlat11 = (x_2775 + vec4<f32>(-3.5f, -1.5f, 0.5f, 2.5f));
        let x_2777 : vec4<f32> = u_xlat10;
        let x_2780 : vec4<f32> = x_253.x_MainLightShadowmapSize;
        u_xlat10 = (vec4<f32>(x_2777.w, x_2777.x, x_2777.y, x_2777.z) * vec4<f32>(x_2780.x, x_2780.x, x_2780.x, x_2780.x));
        let x_2783 : vec4<f32> = u_xlat11;
        let x_2786 : vec4<f32> = x_253.x_MainLightShadowmapSize;
        u_xlat11 = (vec4<f32>(x_2783.x, x_2783.w, x_2783.y, x_2783.z) * vec4<f32>(x_2786.y, x_2786.y, x_2786.y, x_2786.y));
        let x_2789 : vec4<f32> = u_xlat10;
        let x_2790 : vec3<f32> = vec3<f32>(x_2789.y, x_2789.z, x_2789.w);
        let x_2791 : vec4<f32> = u_xlat13;
        u_xlat13 = vec4<f32>(x_2790.x, x_2791.y, x_2790.y, x_2790.z);
        let x_2794 : f32 = u_xlat11.x;
        u_xlat13.y = x_2794;
        let x_2796 : vec4<f32> = u_xlat8;
        let x_2799 : vec4<f32> = x_253.x_MainLightShadowmapSize;
        let x_2802 : vec4<f32> = u_xlat13;
        u_xlat14 = ((vec4<f32>(x_2796.x, x_2796.y, x_2796.x, x_2796.y) * vec4<f32>(x_2799.x, x_2799.y, x_2799.x, x_2799.y)) + vec4<f32>(x_2802.x, x_2802.y, x_2802.z, x_2802.y));
        let x_2805 : vec4<f32> = u_xlat8;
        let x_2808 : vec4<f32> = x_253.x_MainLightShadowmapSize;
        let x_2811 : vec4<f32> = u_xlat13;
        u_xlat52 = ((vec2<f32>(x_2805.x, x_2805.y) * vec2<f32>(x_2808.x, x_2808.y)) + vec2<f32>(x_2811.w, x_2811.y));
        let x_2815 : f32 = u_xlat13.y;
        u_xlat10.y = x_2815;
        let x_2818 : f32 = u_xlat11.z;
        u_xlat13.y = x_2818;
        let x_2820 : vec4<f32> = u_xlat8;
        let x_2823 : vec4<f32> = x_253.x_MainLightShadowmapSize;
        let x_2826 : vec4<f32> = u_xlat13;
        u_xlat15 = ((vec4<f32>(x_2820.x, x_2820.y, x_2820.x, x_2820.y) * vec4<f32>(x_2823.x, x_2823.y, x_2823.x, x_2823.y)) + vec4<f32>(x_2826.x, x_2826.y, x_2826.z, x_2826.y));
        let x_2829 : vec4<f32> = u_xlat8;
        let x_2832 : vec4<f32> = x_253.x_MainLightShadowmapSize;
        let x_2835 : vec4<f32> = u_xlat13;
        let x_2837 : vec2<f32> = ((vec2<f32>(x_2829.x, x_2829.y) * vec2<f32>(x_2832.x, x_2832.y)) + vec2<f32>(x_2835.w, x_2835.y));
        let x_2838 : vec4<f32> = u_xlat16;
        u_xlat16 = vec4<f32>(x_2837.x, x_2837.y, x_2838.z, x_2838.w);
        let x_2841 : f32 = u_xlat13.y;
        u_xlat10.z = x_2841;
        let x_2843 : vec4<f32> = u_xlat8;
        let x_2846 : vec4<f32> = x_253.x_MainLightShadowmapSize;
        let x_2849 : vec4<f32> = u_xlat10;
        u_xlat17 = ((vec4<f32>(x_2843.x, x_2843.y, x_2843.x, x_2843.y) * vec4<f32>(x_2846.x, x_2846.y, x_2846.x, x_2846.y)) + vec4<f32>(x_2849.x, x_2849.y, x_2849.x, x_2849.z));
        let x_2853 : f32 = u_xlat11.w;
        u_xlat13.y = x_2853;
        let x_2855 : vec4<f32> = u_xlat8;
        let x_2858 : vec4<f32> = x_253.x_MainLightShadowmapSize;
        let x_2861 : vec4<f32> = u_xlat13;
        u_xlat18 = ((vec4<f32>(x_2855.x, x_2855.y, x_2855.x, x_2855.y) * vec4<f32>(x_2858.x, x_2858.y, x_2858.x, x_2858.y)) + vec4<f32>(x_2861.x, x_2861.y, x_2861.z, x_2861.y));
        let x_2865 : vec4<f32> = u_xlat8;
        let x_2868 : vec4<f32> = x_253.x_MainLightShadowmapSize;
        let x_2871 : vec4<f32> = u_xlat13;
        u_xlat32 = ((vec2<f32>(x_2865.x, x_2865.y) * vec2<f32>(x_2868.x, x_2868.y)) + vec2<f32>(x_2871.w, x_2871.y));
        let x_2875 : f32 = u_xlat13.y;
        u_xlat10.w = x_2875;
        let x_2878 : vec4<f32> = u_xlat8;
        let x_2881 : vec4<f32> = x_253.x_MainLightShadowmapSize;
        let x_2884 : vec4<f32> = u_xlat10;
        u_xlat60 = ((vec2<f32>(x_2878.x, x_2878.y) * vec2<f32>(x_2881.x, x_2881.y)) + vec2<f32>(x_2884.x, x_2884.w));
        let x_2887 : vec4<f32> = u_xlat13;
        let x_2888 : vec3<f32> = vec3<f32>(x_2887.x, x_2887.z, x_2887.w);
        let x_2889 : vec4<f32> = u_xlat11;
        u_xlat11 = vec4<f32>(x_2888.x, x_2889.y, x_2888.y, x_2888.z);
        let x_2891 : vec4<f32> = u_xlat8;
        let x_2894 : vec4<f32> = x_253.x_MainLightShadowmapSize;
        let x_2897 : vec4<f32> = u_xlat11;
        u_xlat13 = ((vec4<f32>(x_2891.x, x_2891.y, x_2891.x, x_2891.y) * vec4<f32>(x_2894.x, x_2894.y, x_2894.x, x_2894.y)) + vec4<f32>(x_2897.x, x_2897.y, x_2897.z, x_2897.y));
        let x_2901 : vec4<f32> = u_xlat8;
        let x_2904 : vec4<f32> = x_253.x_MainLightShadowmapSize;
        let x_2907 : vec4<f32> = u_xlat11;
        u_xlat55 = ((vec2<f32>(x_2901.x, x_2901.y) * vec2<f32>(x_2904.x, x_2904.y)) + vec2<f32>(x_2907.w, x_2907.y));
        let x_2911 : f32 = u_xlat10.x;
        u_xlat11.x = x_2911;
        let x_2913 : vec4<f32> = u_xlat8;
        let x_2916 : vec4<f32> = x_253.x_MainLightShadowmapSize;
        let x_2919 : vec4<f32> = u_xlat11;
        let x_2921 : vec2<f32> = ((vec2<f32>(x_2913.x, x_2913.y) * vec2<f32>(x_2916.x, x_2916.y)) + vec2<f32>(x_2919.x, x_2919.y));
        let x_2922 : vec4<f32> = u_xlat8;
        u_xlat8 = vec4<f32>(x_2921.x, x_2921.y, x_2922.z, x_2922.w);
        let x_2924 : vec4<f32> = u_xlat9;
        let x_2926 : vec4<f32> = u_xlat12;
        u_xlat19 = (vec4<f32>(x_2924.x, x_2924.x, x_2924.x, x_2924.x) * x_2926);
        let x_2929 : vec4<f32> = u_xlat9;
        let x_2931 : vec4<f32> = u_xlat12;
        u_xlat20 = (vec4<f32>(x_2929.y, x_2929.y, x_2929.y, x_2929.y) * x_2931);
        let x_2934 : vec4<f32> = u_xlat9;
        let x_2936 : vec4<f32> = u_xlat12;
        u_xlat21 = (vec4<f32>(x_2934.z, x_2934.z, x_2934.z, x_2934.z) * x_2936);
        let x_2938 : vec4<f32> = u_xlat9;
        let x_2940 : vec4<f32> = u_xlat12;
        u_xlat9 = (vec4<f32>(x_2938.w, x_2938.w, x_2938.w, x_2938.w) * x_2940);
        let x_2943 : vec4<f32> = u_xlat14;
        let x_2944 : vec2<f32> = vec2<f32>(x_2943.x, x_2943.y);
        let x_2946 : f32 = u_xlat2.z;
        txVec43 = vec3<f32>(x_2944.x, x_2944.y, x_2946);
        let x_2953 : vec3<f32> = txVec43;
        let x_2955 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2953.xy, x_2953.z);
        u_xlat72 = x_2955;
        let x_2957 : vec4<f32> = u_xlat14;
        let x_2958 : vec2<f32> = vec2<f32>(x_2957.z, x_2957.w);
        let x_2960 : f32 = u_xlat2.z;
        txVec44 = vec3<f32>(x_2958.x, x_2958.y, x_2960);
        let x_2967 : vec3<f32> = txVec44;
        let x_2969 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2967.xy, x_2967.z);
        u_xlat73 = x_2969;
        let x_2970 : f32 = u_xlat73;
        let x_2972 : f32 = u_xlat19.y;
        u_xlat73 = (x_2970 * x_2972);
        let x_2975 : f32 = u_xlat19.x;
        let x_2976 : f32 = u_xlat72;
        let x_2978 : f32 = u_xlat73;
        u_xlat72 = ((x_2975 * x_2976) + x_2978);
        let x_2981 : vec2<f32> = u_xlat52;
        let x_2983 : f32 = u_xlat2.z;
        txVec45 = vec3<f32>(x_2981.x, x_2981.y, x_2983);
        let x_2990 : vec3<f32> = txVec45;
        let x_2992 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2990.xy, x_2990.z);
        u_xlat73 = x_2992;
        let x_2994 : f32 = u_xlat19.z;
        let x_2995 : f32 = u_xlat73;
        let x_2997 : f32 = u_xlat72;
        u_xlat72 = ((x_2994 * x_2995) + x_2997);
        let x_3000 : vec4<f32> = u_xlat17;
        let x_3001 : vec2<f32> = vec2<f32>(x_3000.x, x_3000.y);
        let x_3003 : f32 = u_xlat2.z;
        txVec46 = vec3<f32>(x_3001.x, x_3001.y, x_3003);
        let x_3010 : vec3<f32> = txVec46;
        let x_3012 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_3010.xy, x_3010.z);
        u_xlat73 = x_3012;
        let x_3014 : f32 = u_xlat19.w;
        let x_3015 : f32 = u_xlat73;
        let x_3017 : f32 = u_xlat72;
        u_xlat72 = ((x_3014 * x_3015) + x_3017);
        let x_3020 : vec4<f32> = u_xlat15;
        let x_3021 : vec2<f32> = vec2<f32>(x_3020.x, x_3020.y);
        let x_3023 : f32 = u_xlat2.z;
        txVec47 = vec3<f32>(x_3021.x, x_3021.y, x_3023);
        let x_3030 : vec3<f32> = txVec47;
        let x_3032 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_3030.xy, x_3030.z);
        u_xlat73 = x_3032;
        let x_3034 : f32 = u_xlat20.x;
        let x_3035 : f32 = u_xlat73;
        let x_3037 : f32 = u_xlat72;
        u_xlat72 = ((x_3034 * x_3035) + x_3037);
        let x_3040 : vec4<f32> = u_xlat15;
        let x_3041 : vec2<f32> = vec2<f32>(x_3040.z, x_3040.w);
        let x_3043 : f32 = u_xlat2.z;
        txVec48 = vec3<f32>(x_3041.x, x_3041.y, x_3043);
        let x_3050 : vec3<f32> = txVec48;
        let x_3052 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_3050.xy, x_3050.z);
        u_xlat73 = x_3052;
        let x_3054 : f32 = u_xlat20.y;
        let x_3055 : f32 = u_xlat73;
        let x_3057 : f32 = u_xlat72;
        u_xlat72 = ((x_3054 * x_3055) + x_3057);
        let x_3060 : vec4<f32> = u_xlat16;
        let x_3061 : vec2<f32> = vec2<f32>(x_3060.x, x_3060.y);
        let x_3063 : f32 = u_xlat2.z;
        txVec49 = vec3<f32>(x_3061.x, x_3061.y, x_3063);
        let x_3070 : vec3<f32> = txVec49;
        let x_3072 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_3070.xy, x_3070.z);
        u_xlat73 = x_3072;
        let x_3074 : f32 = u_xlat20.z;
        let x_3075 : f32 = u_xlat73;
        let x_3077 : f32 = u_xlat72;
        u_xlat72 = ((x_3074 * x_3075) + x_3077);
        let x_3080 : vec4<f32> = u_xlat17;
        let x_3081 : vec2<f32> = vec2<f32>(x_3080.z, x_3080.w);
        let x_3083 : f32 = u_xlat2.z;
        txVec50 = vec3<f32>(x_3081.x, x_3081.y, x_3083);
        let x_3090 : vec3<f32> = txVec50;
        let x_3092 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_3090.xy, x_3090.z);
        u_xlat73 = x_3092;
        let x_3094 : f32 = u_xlat20.w;
        let x_3095 : f32 = u_xlat73;
        let x_3097 : f32 = u_xlat72;
        u_xlat72 = ((x_3094 * x_3095) + x_3097);
        let x_3100 : vec4<f32> = u_xlat18;
        let x_3101 : vec2<f32> = vec2<f32>(x_3100.x, x_3100.y);
        let x_3103 : f32 = u_xlat2.z;
        txVec51 = vec3<f32>(x_3101.x, x_3101.y, x_3103);
        let x_3110 : vec3<f32> = txVec51;
        let x_3112 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_3110.xy, x_3110.z);
        u_xlat73 = x_3112;
        let x_3114 : f32 = u_xlat21.x;
        let x_3115 : f32 = u_xlat73;
        let x_3117 : f32 = u_xlat72;
        u_xlat72 = ((x_3114 * x_3115) + x_3117);
        let x_3120 : vec4<f32> = u_xlat18;
        let x_3121 : vec2<f32> = vec2<f32>(x_3120.z, x_3120.w);
        let x_3123 : f32 = u_xlat2.z;
        txVec52 = vec3<f32>(x_3121.x, x_3121.y, x_3123);
        let x_3130 : vec3<f32> = txVec52;
        let x_3132 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_3130.xy, x_3130.z);
        u_xlat73 = x_3132;
        let x_3134 : f32 = u_xlat21.y;
        let x_3135 : f32 = u_xlat73;
        let x_3137 : f32 = u_xlat72;
        u_xlat72 = ((x_3134 * x_3135) + x_3137);
        let x_3140 : vec2<f32> = u_xlat32;
        let x_3142 : f32 = u_xlat2.z;
        txVec53 = vec3<f32>(x_3140.x, x_3140.y, x_3142);
        let x_3149 : vec3<f32> = txVec53;
        let x_3151 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_3149.xy, x_3149.z);
        u_xlat73 = x_3151;
        let x_3153 : f32 = u_xlat21.z;
        let x_3154 : f32 = u_xlat73;
        let x_3156 : f32 = u_xlat72;
        u_xlat72 = ((x_3153 * x_3154) + x_3156);
        let x_3159 : vec2<f32> = u_xlat60;
        let x_3161 : f32 = u_xlat2.z;
        txVec54 = vec3<f32>(x_3159.x, x_3159.y, x_3161);
        let x_3168 : vec3<f32> = txVec54;
        let x_3170 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_3168.xy, x_3168.z);
        u_xlat73 = x_3170;
        let x_3172 : f32 = u_xlat21.w;
        let x_3173 : f32 = u_xlat73;
        let x_3175 : f32 = u_xlat72;
        u_xlat72 = ((x_3172 * x_3173) + x_3175);
        let x_3178 : vec4<f32> = u_xlat13;
        let x_3179 : vec2<f32> = vec2<f32>(x_3178.x, x_3178.y);
        let x_3181 : f32 = u_xlat2.z;
        txVec55 = vec3<f32>(x_3179.x, x_3179.y, x_3181);
        let x_3188 : vec3<f32> = txVec55;
        let x_3190 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_3188.xy, x_3188.z);
        u_xlat73 = x_3190;
        let x_3192 : f32 = u_xlat9.x;
        let x_3193 : f32 = u_xlat73;
        let x_3195 : f32 = u_xlat72;
        u_xlat72 = ((x_3192 * x_3193) + x_3195);
        let x_3198 : vec4<f32> = u_xlat13;
        let x_3199 : vec2<f32> = vec2<f32>(x_3198.z, x_3198.w);
        let x_3201 : f32 = u_xlat2.z;
        txVec56 = vec3<f32>(x_3199.x, x_3199.y, x_3201);
        let x_3208 : vec3<f32> = txVec56;
        let x_3210 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_3208.xy, x_3208.z);
        u_xlat73 = x_3210;
        let x_3212 : f32 = u_xlat9.y;
        let x_3213 : f32 = u_xlat73;
        let x_3215 : f32 = u_xlat72;
        u_xlat72 = ((x_3212 * x_3213) + x_3215);
        let x_3218 : vec2<f32> = u_xlat55;
        let x_3220 : f32 = u_xlat2.z;
        txVec57 = vec3<f32>(x_3218.x, x_3218.y, x_3220);
        let x_3227 : vec3<f32> = txVec57;
        let x_3229 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_3227.xy, x_3227.z);
        u_xlat73 = x_3229;
        let x_3231 : f32 = u_xlat9.z;
        let x_3232 : f32 = u_xlat73;
        let x_3234 : f32 = u_xlat72;
        u_xlat72 = ((x_3231 * x_3232) + x_3234);
        let x_3237 : vec4<f32> = u_xlat8;
        let x_3238 : vec2<f32> = vec2<f32>(x_3237.x, x_3237.y);
        let x_3240 : f32 = u_xlat2.z;
        txVec58 = vec3<f32>(x_3238.x, x_3238.y, x_3240);
        let x_3247 : vec3<f32> = txVec58;
        let x_3249 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_3247.xy, x_3247.z);
        u_xlat73 = x_3249;
        let x_3251 : f32 = u_xlat9.w;
        let x_3252 : f32 = u_xlat73;
        let x_3254 : f32 = u_xlat72;
        u_xlat0.x = ((x_3251 * x_3252) + x_3254);
      }
    }
  } else {
    let x_3259 : vec4<f32> = u_xlat2;
    let x_3260 : vec2<f32> = vec2<f32>(x_3259.x, x_3259.y);
    let x_3262 : f32 = u_xlat2.z;
    txVec59 = vec3<f32>(x_3260.x, x_3260.y, x_3262);
    let x_3269 : vec3<f32> = txVec59;
    let x_3271 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_3269.xy, x_3269.z);
    u_xlat0.x = x_3271;
  }
  let x_3274 : f32 = u_xlat0.x;
  let x_3276 : f32 = x_253.x_MainLightShadowParams.x;
  let x_3278 : f32 = u_xlat68;
  u_xlat0.x = ((x_3274 * x_3276) + x_3278);
  let x_3281 : bool = u_xlatb3;
  if (x_3281) {
    x_3282 = 1.0f;
  } else {
    let x_3287 : f32 = u_xlat0.x;
    x_3282 = x_3287;
  }
  let x_3288 : f32 = x_3282;
  u_xlat0.x = x_3288;
  let x_3290 : vec3<f32> = vs_INTERP0;
  let x_3292 : vec3<f32> = x_139.x_WorldSpaceCameraPos;
  let x_3294 : vec3<f32> = (x_3290 + -(x_3292));
  let x_3295 : vec4<f32> = u_xlat2;
  u_xlat2 = vec4<f32>(x_3294.x, x_3294.y, x_3294.z, x_3295.w);
  let x_3297 : vec4<f32> = u_xlat2;
  let x_3299 : vec4<f32> = u_xlat2;
  u_xlat2.x = dot(vec3<f32>(x_3297.x, x_3297.y, x_3297.z), vec3<f32>(x_3299.x, x_3299.y, x_3299.z));
  let x_3304 : f32 = u_xlat2.x;
  let x_3306 : f32 = x_253.x_MainLightShadowParams.z;
  let x_3309 : f32 = x_253.x_MainLightShadowParams.w;
  u_xlat2.x = ((x_3304 * x_3306) + x_3309);
  let x_3313 : f32 = u_xlat2.x;
  u_xlat2.x = clamp(x_3313, 0.0f, 1.0f);
  let x_3318 : f32 = u_xlat0.x;
  u_xlat24 = (-(x_3318) + 1.0f);
  let x_3322 : f32 = u_xlat2.x;
  let x_3323 : f32 = u_xlat24;
  let x_3326 : f32 = u_xlat0.x;
  u_xlat0.x = ((x_3322 * x_3323) + x_3326);
  let x_3335 : f32 = x_3333.x_MainLightCookieTextureFormat;
  u_xlatb2.x = !((x_3335 == -1.0f));
  let x_3339 : bool = u_xlatb2.x;
  if (x_3339) {
    let x_3342 : vec3<f32> = vs_INTERP0;
    let x_3345 : vec4<f32> = x_3333.x_MainLightWorldToLight[1i];
    let x_3347 : vec2<f32> = (vec2<f32>(x_3342.y, x_3342.y) * vec2<f32>(x_3345.x, x_3345.y));
    let x_3348 : vec4<f32> = u_xlat2;
    u_xlat2 = vec4<f32>(x_3347.x, x_3347.y, x_3348.z, x_3348.w);
    let x_3351 : vec4<f32> = x_3333.x_MainLightWorldToLight[0i];
    let x_3353 : vec3<f32> = vs_INTERP0;
    let x_3356 : vec4<f32> = u_xlat2;
    let x_3358 : vec2<f32> = ((vec2<f32>(x_3351.x, x_3351.y) * vec2<f32>(x_3353.x, x_3353.x)) + vec2<f32>(x_3356.x, x_3356.y));
    let x_3359 : vec4<f32> = u_xlat2;
    u_xlat2 = vec4<f32>(x_3358.x, x_3358.y, x_3359.z, x_3359.w);
    let x_3362 : vec4<f32> = x_3333.x_MainLightWorldToLight[2i];
    let x_3364 : vec3<f32> = vs_INTERP0;
    let x_3367 : vec4<f32> = u_xlat2;
    let x_3369 : vec2<f32> = ((vec2<f32>(x_3362.x, x_3362.y) * vec2<f32>(x_3364.z, x_3364.z)) + vec2<f32>(x_3367.x, x_3367.y));
    let x_3370 : vec4<f32> = u_xlat2;
    u_xlat2 = vec4<f32>(x_3369.x, x_3369.y, x_3370.z, x_3370.w);
    let x_3372 : vec4<f32> = u_xlat2;
    let x_3375 : vec4<f32> = x_3333.x_MainLightWorldToLight[3i];
    let x_3377 : vec2<f32> = (vec2<f32>(x_3372.x, x_3372.y) + vec2<f32>(x_3375.x, x_3375.y));
    let x_3378 : vec4<f32> = u_xlat2;
    u_xlat2 = vec4<f32>(x_3377.x, x_3377.y, x_3378.z, x_3378.w);
    let x_3380 : vec4<f32> = u_xlat2;
    let x_3383 : vec2<f32> = ((vec2<f32>(x_3380.x, x_3380.y) * vec2<f32>(0.5f, 0.5f)) + vec2<f32>(0.5f, 0.5f));
    let x_3384 : vec4<f32> = u_xlat2;
    u_xlat2 = vec4<f32>(x_3383.x, x_3383.y, x_3384.z, x_3384.w);
    let x_3391 : vec4<f32> = u_xlat2;
    let x_3394 : f32 = x_139.x_GlobalMipBias.x;
    let x_3395 : vec4<f32> = textureSampleBias(x_MainLightCookieTexture, sampler_MainLightCookieTexture, vec2<f32>(x_3391.x, x_3391.y), x_3394);
    u_xlat2 = x_3395;
    let x_3398 : f32 = x_3333.x_MainLightCookieTextureFormat;
    let x_3400 : f32 = x_3333.x_MainLightCookieTextureFormat;
    let x_3402 : f32 = x_3333.x_MainLightCookieTextureFormat;
    let x_3404 : f32 = x_3333.x_MainLightCookieTextureFormat;
    let x_3405 : vec4<f32> = vec4<f32>(x_3398, x_3400, x_3402, x_3404);
    let x_3412 : vec4<bool> = (vec4<f32>(x_3405.x, x_3405.y, x_3405.z, x_3405.w) == vec4<f32>(0.0f, 1.0f, 0.0f, 0.0f));
    u_xlatb8 = vec2<bool>(x_3412.x, x_3412.y);
    let x_3415 : bool = u_xlatb8.y;
    if (x_3415) {
      let x_3420 : f32 = u_xlat2.w;
      x_3416 = x_3420;
    } else {
      let x_3423 : f32 = u_xlat2.x;
      x_3416 = x_3423;
    }
    let x_3424 : f32 = x_3416;
    u_xlat68 = x_3424;
    let x_3426 : bool = u_xlatb8.x;
    if (x_3426) {
      let x_3430 : vec4<f32> = u_xlat2;
      x_3427 = vec3<f32>(x_3430.x, x_3430.y, x_3430.z);
    } else {
      let x_3433 : f32 = u_xlat68;
      x_3427 = vec3<f32>(x_3433, x_3433, x_3433);
    }
    let x_3435 : vec3<f32> = x_3427;
    let x_3436 : vec4<f32> = u_xlat2;
    u_xlat2 = vec4<f32>(x_3435.x, x_3435.y, x_3435.z, x_3436.w);
  } else {
    u_xlat2.x = 1.0f;
    u_xlat2.y = 1.0f;
    u_xlat2.z = 1.0f;
  }
  let x_3442 : vec4<f32> = u_xlat2;
  let x_3445 : vec4<f32> = x_139.x_MainLightColor;
  let x_3447 : vec3<f32> = (vec3<f32>(x_3442.x, x_3442.y, x_3442.z) * vec3<f32>(x_3445.x, x_3445.y, x_3445.z));
  let x_3448 : vec4<f32> = u_xlat2;
  u_xlat2 = vec4<f32>(x_3447.x, x_3447.y, x_3447.z, x_3448.w);
  let x_3450 : f32 = u_xlat50;
  let x_3452 : vec4<f32> = u_xlat2;
  let x_3454 : vec3<f32> = (vec3<f32>(x_3450, x_3450, x_3450) * vec3<f32>(x_3452.x, x_3452.y, x_3452.z));
  let x_3455 : vec4<f32> = u_xlat2;
  u_xlat2 = vec4<f32>(x_3454.x, x_3454.y, x_3454.z, x_3455.w);
  let x_3457 : vec4<f32> = u_xlat7;
  let x_3460 : vec3<f32> = u_xlat22;
  u_xlat68 = dot(-(vec3<f32>(x_3457.x, x_3457.y, x_3457.z)), x_3460);
  let x_3462 : f32 = u_xlat68;
  let x_3463 : f32 = u_xlat68;
  u_xlat68 = (x_3462 + x_3463);
  let x_3465 : vec3<f32> = u_xlat22;
  let x_3466 : f32 = u_xlat68;
  let x_3470 : vec4<f32> = u_xlat7;
  let x_3473 : vec3<f32> = ((x_3465 * -(vec3<f32>(x_3466, x_3466, x_3466))) + -(vec3<f32>(x_3470.x, x_3470.y, x_3470.z)));
  let x_3474 : vec4<f32> = u_xlat8;
  u_xlat8 = vec4<f32>(x_3473.x, x_3473.y, x_3473.z, x_3474.w);
  let x_3476 : vec3<f32> = u_xlat22;
  let x_3477 : vec4<f32> = u_xlat7;
  u_xlat68 = dot(x_3476, vec3<f32>(x_3477.x, x_3477.y, x_3477.z));
  let x_3480 : f32 = u_xlat68;
  u_xlat68 = clamp(x_3480, 0.0f, 1.0f);
  let x_3482 : f32 = u_xlat68;
  u_xlat68 = (-(x_3482) + 1.0f);
  let x_3485 : f32 = u_xlat68;
  let x_3486 : f32 = u_xlat68;
  u_xlat68 = (x_3485 * x_3486);
  let x_3488 : f32 = u_xlat68;
  let x_3489 : f32 = u_xlat68;
  u_xlat68 = (x_3488 * x_3489);
  let x_3492 : f32 = u_xlat25.x;
  u_xlat3.x = ((-(x_3492) * 0.699999988f) + 1.700000048f);
  let x_3500 : f32 = u_xlat3.x;
  let x_3502 : f32 = u_xlat25.x;
  u_xlat3.x = (x_3500 * x_3502);
  let x_3506 : f32 = u_xlat3.x;
  u_xlat3.x = (x_3506 * 6.0f);
  let x_3518 : vec4<f32> = u_xlat8;
  let x_3521 : f32 = u_xlat3.x;
  let x_3522 : vec4<f32> = textureSampleLevel(unity_SpecCube0, samplerunity_SpecCube0, vec3<f32>(x_3518.x, x_3518.y, x_3518.z), x_3521);
  u_xlat8 = x_3522;
  let x_3524 : f32 = u_xlat8.w;
  u_xlat3.x = (x_3524 + -1.0f);
  let x_3528 : f32 = x_60.unity_SpecCube0_HDR.w;
  let x_3530 : f32 = u_xlat3.x;
  u_xlat3.x = ((x_3528 * x_3530) + 1.0f);
  let x_3535 : f32 = u_xlat3.x;
  u_xlat3.x = max(x_3535, 0.0f);
  let x_3539 : f32 = u_xlat3.x;
  u_xlat3.x = log2(x_3539);
  let x_3543 : f32 = u_xlat3.x;
  let x_3545 : f32 = x_60.unity_SpecCube0_HDR.y;
  u_xlat3.x = (x_3543 * x_3545);
  let x_3549 : f32 = u_xlat3.x;
  u_xlat3.x = exp2(x_3549);
  let x_3553 : f32 = u_xlat3.x;
  let x_3555 : f32 = x_60.unity_SpecCube0_HDR.x;
  u_xlat3.x = (x_3553 * x_3555);
  let x_3558 : vec4<f32> = u_xlat8;
  let x_3560 : vec4<f32> = u_xlat3;
  let x_3562 : vec3<f32> = (vec3<f32>(x_3558.x, x_3558.y, x_3558.z) * vec3<f32>(x_3560.x, x_3560.x, x_3560.x));
  let x_3563 : vec4<f32> = u_xlat8;
  u_xlat8 = vec4<f32>(x_3562.x, x_3562.y, x_3562.z, x_3563.w);
  let x_3565 : f32 = u_xlat69;
  let x_3567 : f32 = u_xlat69;
  let x_3571 : vec2<f32> = ((vec2<f32>(x_3565, x_3565) * vec2<f32>(x_3567, x_3567)) + vec2<f32>(-1.0f, 1.0f));
  let x_3572 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_3571.x, x_3571.y, x_3572.z, x_3572.w);
  let x_3575 : f32 = u_xlat3.y;
  u_xlat25.x = (1.0f / x_3575);
  let x_3578 : f32 = u_xlat71;
  u_xlat69 = (x_3578 + -0.039999999f);
  let x_3581 : f32 = u_xlat68;
  let x_3582 : f32 = u_xlat69;
  u_xlat68 = ((x_3581 * x_3582) + 0.039999999f);
  let x_3586 : f32 = u_xlat68;
  let x_3588 : f32 = u_xlat25.x;
  u_xlat68 = (x_3586 * x_3588);
  let x_3590 : f32 = u_xlat68;
  let x_3592 : vec4<f32> = u_xlat8;
  let x_3594 : vec3<f32> = (vec3<f32>(x_3590, x_3590, x_3590) * vec3<f32>(x_3592.x, x_3592.y, x_3592.z));
  let x_3595 : vec4<f32> = u_xlat8;
  u_xlat8 = vec4<f32>(x_3594.x, x_3594.y, x_3594.z, x_3595.w);
  let x_3597 : vec4<f32> = u_xlat4;
  let x_3599 : vec3<f32> = u_xlat5;
  let x_3601 : vec4<f32> = u_xlat8;
  let x_3603 : vec3<f32> = ((vec3<f32>(x_3597.x, x_3597.y, x_3597.z) * x_3599) + vec3<f32>(x_3601.x, x_3601.y, x_3601.z));
  let x_3604 : vec4<f32> = u_xlat4;
  u_xlat4 = vec4<f32>(x_3603.x, x_3603.y, x_3603.z, x_3604.w);
  let x_3607 : f32 = u_xlat0.x;
  let x_3609 : f32 = x_60.unity_LightData.z;
  u_xlat0.x = (x_3607 * x_3609);
  let x_3612 : vec3<f32> = u_xlat22;
  let x_3614 : vec4<f32> = x_139.x_MainLightPosition;
  u_xlat68 = dot(x_3612, vec3<f32>(x_3614.x, x_3614.y, x_3614.z));
  let x_3617 : f32 = u_xlat68;
  u_xlat68 = clamp(x_3617, 0.0f, 1.0f);
  let x_3620 : f32 = u_xlat0.x;
  let x_3621 : f32 = u_xlat68;
  u_xlat0.x = (x_3620 * x_3621);
  let x_3624 : vec3<f32> = u_xlat0;
  let x_3626 : vec4<f32> = u_xlat2;
  let x_3628 : vec3<f32> = (vec3<f32>(x_3624.x, x_3624.x, x_3624.x) * vec3<f32>(x_3626.x, x_3626.y, x_3626.z));
  let x_3629 : vec4<f32> = u_xlat2;
  u_xlat2 = vec4<f32>(x_3628.x, x_3628.y, x_3628.z, x_3629.w);
  let x_3631 : vec4<f32> = u_xlat7;
  let x_3634 : vec4<f32> = x_139.x_MainLightPosition;
  let x_3636 : vec3<f32> = (vec3<f32>(x_3631.x, x_3631.y, x_3631.z) + vec3<f32>(x_3634.x, x_3634.y, x_3634.z));
  let x_3637 : vec4<f32> = u_xlat8;
  u_xlat8 = vec4<f32>(x_3636.x, x_3636.y, x_3636.z, x_3637.w);
  let x_3639 : vec4<f32> = u_xlat8;
  let x_3641 : vec4<f32> = u_xlat8;
  u_xlat0.x = dot(vec3<f32>(x_3639.x, x_3639.y, x_3639.z), vec3<f32>(x_3641.x, x_3641.y, x_3641.z));
  let x_3646 : f32 = u_xlat0.x;
  u_xlat0.x = max(x_3646, 1.17549435e-37f);
  let x_3650 : f32 = u_xlat0.x;
  u_xlat0.x = inverseSqrt(x_3650);
  let x_3653 : vec3<f32> = u_xlat0;
  let x_3655 : vec4<f32> = u_xlat8;
  let x_3657 : vec3<f32> = (vec3<f32>(x_3653.x, x_3653.x, x_3653.x) * vec3<f32>(x_3655.x, x_3655.y, x_3655.z));
  let x_3658 : vec4<f32> = u_xlat8;
  u_xlat8 = vec4<f32>(x_3657.x, x_3657.y, x_3657.z, x_3658.w);
  let x_3660 : vec3<f32> = u_xlat22;
  let x_3661 : vec4<f32> = u_xlat8;
  u_xlat0.x = dot(x_3660, vec3<f32>(x_3661.x, x_3661.y, x_3661.z));
  let x_3666 : f32 = u_xlat0.x;
  u_xlat0.x = clamp(x_3666, 0.0f, 1.0f);
  let x_3670 : vec4<f32> = x_139.x_MainLightPosition;
  let x_3672 : vec4<f32> = u_xlat8;
  u_xlat68 = dot(vec3<f32>(x_3670.x, x_3670.y, x_3670.z), vec3<f32>(x_3672.x, x_3672.y, x_3672.z));
  let x_3675 : f32 = u_xlat68;
  u_xlat68 = clamp(x_3675, 0.0f, 1.0f);
  let x_3678 : f32 = u_xlat0.x;
  let x_3680 : f32 = u_xlat0.x;
  u_xlat0.x = (x_3678 * x_3680);
  let x_3684 : f32 = u_xlat0.x;
  let x_3686 : f32 = u_xlat3.x;
  u_xlat0.x = ((x_3684 * x_3686) + 1.000010014f);
  let x_3691 : f32 = u_xlat68;
  let x_3692 : f32 = u_xlat68;
  u_xlat68 = (x_3691 * x_3692);
  let x_3695 : f32 = u_xlat0.x;
  let x_3697 : f32 = u_xlat0.x;
  u_xlat0.x = (x_3695 * x_3697);
  let x_3700 : f32 = u_xlat68;
  u_xlat68 = max(x_3700, 0.100000001f);
  let x_3704 : f32 = u_xlat0.x;
  let x_3705 : f32 = u_xlat68;
  u_xlat0.x = (x_3704 * x_3705);
  let x_3709 : f32 = u_xlat6.x;
  let x_3711 : f32 = u_xlat0.x;
  u_xlat0.x = (x_3709 * x_3711);
  let x_3714 : f32 = u_xlat70;
  let x_3716 : f32 = u_xlat0.x;
  u_xlat0.x = (x_3714 / x_3716);
  let x_3719 : vec3<f32> = u_xlat0;
  let x_3723 : vec3<f32> = u_xlat5;
  let x_3724 : vec3<f32> = ((vec3<f32>(x_3719.x, x_3719.x, x_3719.x) * vec3<f32>(0.039999999f, 0.039999999f, 0.039999999f)) + x_3723);
  let x_3725 : vec4<f32> = u_xlat8;
  u_xlat8 = vec4<f32>(x_3724.x, x_3724.y, x_3724.z, x_3725.w);
  let x_3727 : vec4<f32> = u_xlat2;
  let x_3729 : vec4<f32> = u_xlat8;
  let x_3731 : vec3<f32> = (vec3<f32>(x_3727.x, x_3727.y, x_3727.z) * vec3<f32>(x_3729.x, x_3729.y, x_3729.z));
  let x_3732 : vec4<f32> = u_xlat2;
  u_xlat2 = vec4<f32>(x_3731.x, x_3731.y, x_3731.z, x_3732.w);
  let x_3735 : f32 = x_139.x_AdditionalLightsCount.x;
  let x_3737 : f32 = x_60.unity_LightData.y;
  u_xlat0.x = min(x_3735, x_3737);
  let x_3741 : f32 = u_xlat0.x;
  u_xlatu0 = bitcast<u32>(i32(x_3741));
  let x_3745 : f32 = x_3333.x_AdditionalLightsCookieAtlasTextureFormat;
  let x_3747 : f32 = x_3333.x_AdditionalLightsCookieAtlasTextureFormat;
  let x_3749 : f32 = x_3333.x_AdditionalLightsCookieAtlasTextureFormat;
  let x_3751 : f32 = x_3333.x_AdditionalLightsCookieAtlasTextureFormat;
  let x_3752 : vec4<f32> = vec4<f32>(x_3745, x_3747, x_3749, x_3751);
  let x_3759 : vec4<bool> = (vec4<f32>(x_3752.x, x_3752.y, x_3752.z, x_3752.w) == vec4<f32>(0.0f, 0.0f, 1.0f, 1.0f));
  let x_3760 : vec2<bool> = vec2<bool>(x_3759.x, x_3759.z);
  let x_3761 : vec3<bool> = u_xlatb25;
  u_xlatb25 = vec3<bool>(x_3760.x, x_3761.y, x_3760.y);
  u_xlat8.x = 0.0f;
  u_xlat8.y = 0.0f;
  u_xlat8.z = 0.0f;
  u_xlatu_loop_1 = 0u;
  loop {
    let x_3772 : u32 = u_xlatu_loop_1;
    let x_3773 : u32 = u_xlatu0;
    if ((x_3772 < x_3773)) {
    } else {
      break;
    }
    let x_3776 : u32 = u_xlatu_loop_1;
    u_xlatu71 = (x_3776 >> 2u);
    let x_3779 : u32 = u_xlatu_loop_1;
    u_xlati72 = bitcast<i32>((x_3779 & 3u));
    let x_3782 : u32 = u_xlatu71;
    let x_3785 : vec4<f32> = x_60.unity_LightIndices[bitcast<i32>(x_3782)];
    let x_3795 : i32 = u_xlati72;
    indexable = array<vec4<u32>, 4u>(vec4<u32>(1065353216u, 0u, 0u, 0u), vec4<u32>(0u, 1065353216u, 0u, 0u), vec4<u32>(0u, 0u, 1065353216u, 0u), vec4<u32>(0u, 0u, 0u, 1065353216u));
    let x_3800 : vec4<u32> = indexable[x_3795];
    u_xlat71 = dot(x_3785, bitcast<vec4<f32>>(x_3800));
    let x_3803 : f32 = u_xlat71;
    u_xlatu71 = bitcast<u32>(i32(x_3803));
    let x_3806 : vec3<f32> = vs_INTERP0;
    let x_3818 : u32 = u_xlatu71;
    let x_3821 : vec4<f32> = x_3817.x_AdditionalLightsPosition[bitcast<i32>(x_3818)];
    let x_3824 : u32 = u_xlatu71;
    let x_3827 : vec4<f32> = x_3817.x_AdditionalLightsPosition[bitcast<i32>(x_3824)];
    let x_3829 : vec3<f32> = ((-(x_3806) * vec3<f32>(x_3821.w, x_3821.w, x_3821.w)) + vec3<f32>(x_3827.x, x_3827.y, x_3827.z));
    let x_3830 : vec4<f32> = u_xlat9;
    u_xlat9 = vec4<f32>(x_3829.x, x_3829.y, x_3829.z, x_3830.w);
    let x_3832 : vec4<f32> = u_xlat9;
    let x_3834 : vec4<f32> = u_xlat9;
    u_xlat72 = dot(vec3<f32>(x_3832.x, x_3832.y, x_3832.z), vec3<f32>(x_3834.x, x_3834.y, x_3834.z));
    let x_3837 : f32 = u_xlat72;
    u_xlat72 = max(x_3837, 6.10351562e-05f);
    let x_3840 : f32 = u_xlat72;
    u_xlat73 = inverseSqrt(x_3840);
    let x_3842 : f32 = u_xlat73;
    let x_3844 : vec4<f32> = u_xlat9;
    let x_3846 : vec3<f32> = (vec3<f32>(x_3842, x_3842, x_3842) * vec3<f32>(x_3844.x, x_3844.y, x_3844.z));
    let x_3847 : vec4<f32> = u_xlat10;
    u_xlat10 = vec4<f32>(x_3846.x, x_3846.y, x_3846.z, x_3847.w);
    let x_3850 : f32 = u_xlat72;
    u_xlat74 = (1.0f / x_3850);
    let x_3852 : f32 = u_xlat72;
    let x_3853 : u32 = u_xlatu71;
    let x_3856 : f32 = x_3817.x_AdditionalLightsAttenuation[bitcast<i32>(x_3853)].x;
    u_xlat72 = (x_3852 * x_3856);
    let x_3858 : f32 = u_xlat72;
    let x_3860 : f32 = u_xlat72;
    u_xlat72 = ((-(x_3858) * x_3860) + 1.0f);
    let x_3863 : f32 = u_xlat72;
    u_xlat72 = max(x_3863, 0.0f);
    let x_3865 : f32 = u_xlat72;
    let x_3866 : f32 = u_xlat72;
    u_xlat72 = (x_3865 * x_3866);
    let x_3868 : f32 = u_xlat72;
    let x_3869 : f32 = u_xlat74;
    u_xlat72 = (x_3868 * x_3869);
    let x_3871 : u32 = u_xlatu71;
    let x_3874 : vec4<f32> = x_3817.x_AdditionalLightsSpotDir[bitcast<i32>(x_3871)];
    let x_3876 : vec4<f32> = u_xlat10;
    u_xlat74 = dot(vec3<f32>(x_3874.x, x_3874.y, x_3874.z), vec3<f32>(x_3876.x, x_3876.y, x_3876.z));
    let x_3879 : f32 = u_xlat74;
    let x_3880 : u32 = u_xlatu71;
    let x_3883 : f32 = x_3817.x_AdditionalLightsAttenuation[bitcast<i32>(x_3880)].z;
    let x_3885 : u32 = u_xlatu71;
    let x_3888 : f32 = x_3817.x_AdditionalLightsAttenuation[bitcast<i32>(x_3885)].w;
    u_xlat74 = ((x_3879 * x_3883) + x_3888);
    let x_3890 : f32 = u_xlat74;
    u_xlat74 = clamp(x_3890, 0.0f, 1.0f);
    let x_3892 : f32 = u_xlat74;
    let x_3893 : f32 = u_xlat74;
    u_xlat74 = (x_3892 * x_3893);
    let x_3895 : f32 = u_xlat72;
    let x_3896 : f32 = u_xlat74;
    u_xlat72 = (x_3895 * x_3896);
    let x_3899 : u32 = u_xlatu71;
    u_xlatu74 = (x_3899 >> 5u);
    let x_3902 : u32 = u_xlatu71;
    u_xlati75 = (1i << bitcast<u32>((bitcast<i32>(x_3902) & 31i)));
    let x_3908 : i32 = u_xlati75;
    let x_3910 : u32 = u_xlatu74;
    let x_3913 : f32 = x_3333.x_AdditionalLightsCookieEnableBits[bitcast<i32>(x_3910)].el;
    u_xlati74 = bitcast<i32>((bitcast<u32>(x_3908) & bitcast<u32>(x_3913)));
    let x_3917 : i32 = u_xlati74;
    if ((x_3917 != 0i)) {
      let x_3927 : u32 = u_xlatu71;
      let x_3930 : f32 = x_3926.x_AdditionalLightsLightTypes[bitcast<i32>(x_3927)].el;
      u_xlati74 = i32(x_3930);
      let x_3932 : i32 = u_xlati74;
      u_xlati75 = select(1i, 0i, (x_3932 != 0i));
      let x_3936 : u32 = u_xlatu71;
      u_xlati76 = (bitcast<i32>(x_3936) << bitcast<u32>(2i));
      let x_3939 : i32 = u_xlati75;
      if ((x_3939 != 0i)) {
        let x_3943 : vec3<f32> = vs_INTERP0;
        let x_3945 : i32 = u_xlati76;
        let x_3948 : i32 = u_xlati76;
        let x_3952 : vec4<f32> = x_3926.x_AdditionalLightsWorldToLights[((x_3945 + 1i) / 4i)][((x_3948 + 1i) % 4i)];
        let x_3954 : vec3<f32> = (vec3<f32>(x_3943.y, x_3943.y, x_3943.y) * vec3<f32>(x_3952.x, x_3952.y, x_3952.w));
        let x_3955 : vec4<f32> = u_xlat11;
        u_xlat11 = vec4<f32>(x_3954.x, x_3954.y, x_3954.z, x_3955.w);
        let x_3957 : i32 = u_xlati76;
        let x_3959 : i32 = u_xlati76;
        let x_3962 : vec4<f32> = x_3926.x_AdditionalLightsWorldToLights[(x_3957 / 4i)][(x_3959 % 4i)];
        let x_3964 : vec3<f32> = vs_INTERP0;
        let x_3967 : vec4<f32> = u_xlat11;
        let x_3969 : vec3<f32> = ((vec3<f32>(x_3962.x, x_3962.y, x_3962.w) * vec3<f32>(x_3964.x, x_3964.x, x_3964.x)) + vec3<f32>(x_3967.x, x_3967.y, x_3967.z));
        let x_3970 : vec4<f32> = u_xlat11;
        u_xlat11 = vec4<f32>(x_3969.x, x_3969.y, x_3969.z, x_3970.w);
        let x_3972 : i32 = u_xlati76;
        let x_3975 : i32 = u_xlati76;
        let x_3979 : vec4<f32> = x_3926.x_AdditionalLightsWorldToLights[((x_3972 + 2i) / 4i)][((x_3975 + 2i) % 4i)];
        let x_3981 : vec3<f32> = vs_INTERP0;
        let x_3984 : vec4<f32> = u_xlat11;
        let x_3986 : vec3<f32> = ((vec3<f32>(x_3979.x, x_3979.y, x_3979.w) * vec3<f32>(x_3981.z, x_3981.z, x_3981.z)) + vec3<f32>(x_3984.x, x_3984.y, x_3984.z));
        let x_3987 : vec4<f32> = u_xlat11;
        u_xlat11 = vec4<f32>(x_3986.x, x_3986.y, x_3986.z, x_3987.w);
        let x_3989 : vec4<f32> = u_xlat11;
        let x_3991 : i32 = u_xlati76;
        let x_3994 : i32 = u_xlati76;
        let x_3998 : vec4<f32> = x_3926.x_AdditionalLightsWorldToLights[((x_3991 + 3i) / 4i)][((x_3994 + 3i) % 4i)];
        let x_4000 : vec3<f32> = (vec3<f32>(x_3989.x, x_3989.y, x_3989.z) + vec3<f32>(x_3998.x, x_3998.y, x_3998.w));
        let x_4001 : vec4<f32> = u_xlat11;
        u_xlat11 = vec4<f32>(x_4000.x, x_4000.y, x_4000.z, x_4001.w);
        let x_4003 : vec4<f32> = u_xlat11;
        let x_4005 : vec4<f32> = u_xlat11;
        let x_4007 : vec2<f32> = (vec2<f32>(x_4003.x, x_4003.y) / vec2<f32>(x_4005.z, x_4005.z));
        let x_4008 : vec4<f32> = u_xlat11;
        u_xlat11 = vec4<f32>(x_4007.x, x_4007.y, x_4008.z, x_4008.w);
        let x_4010 : vec4<f32> = u_xlat11;
        let x_4013 : vec2<f32> = ((vec2<f32>(x_4010.x, x_4010.y) * vec2<f32>(0.5f, 0.5f)) + vec2<f32>(0.5f, 0.5f));
        let x_4014 : vec4<f32> = u_xlat11;
        u_xlat11 = vec4<f32>(x_4013.x, x_4013.y, x_4014.z, x_4014.w);
        let x_4016 : vec4<f32> = u_xlat11;
        let x_4020 : vec2<f32> = clamp(vec2<f32>(x_4016.x, x_4016.y), vec2<f32>(0.0f, 0.0f), vec2<f32>(1.0f, 1.0f));
        let x_4021 : vec4<f32> = u_xlat11;
        u_xlat11 = vec4<f32>(x_4020.x, x_4020.y, x_4021.z, x_4021.w);
        let x_4023 : u32 = u_xlatu71;
        let x_4026 : vec4<f32> = x_3926.x_AdditionalLightsCookieAtlasUVRects[bitcast<i32>(x_4023)];
        let x_4028 : vec4<f32> = u_xlat11;
        let x_4031 : u32 = u_xlatu71;
        let x_4034 : vec4<f32> = x_3926.x_AdditionalLightsCookieAtlasUVRects[bitcast<i32>(x_4031)];
        let x_4036 : vec2<f32> = ((vec2<f32>(x_4026.x, x_4026.y) * vec2<f32>(x_4028.x, x_4028.y)) + vec2<f32>(x_4034.z, x_4034.w));
        let x_4037 : vec4<f32> = u_xlat11;
        u_xlat11 = vec4<f32>(x_4036.x, x_4036.y, x_4037.z, x_4037.w);
      } else {
        let x_4041 : i32 = u_xlati74;
        u_xlatb74 = (x_4041 == 1i);
        let x_4043 : bool = u_xlatb74;
        u_xlati74 = select(0i, 1i, x_4043);
        let x_4045 : i32 = u_xlati74;
        if ((x_4045 != 0i)) {
          let x_4049 : vec3<f32> = vs_INTERP0;
          let x_4051 : i32 = u_xlati76;
          let x_4054 : i32 = u_xlati76;
          let x_4058 : vec4<f32> = x_3926.x_AdditionalLightsWorldToLights[((x_4051 + 1i) / 4i)][((x_4054 + 1i) % 4i)];
          u_xlat55 = (vec2<f32>(x_4049.y, x_4049.y) * vec2<f32>(x_4058.x, x_4058.y));
          let x_4061 : i32 = u_xlati76;
          let x_4063 : i32 = u_xlati76;
          let x_4066 : vec4<f32> = x_3926.x_AdditionalLightsWorldToLights[(x_4061 / 4i)][(x_4063 % 4i)];
          let x_4068 : vec3<f32> = vs_INTERP0;
          let x_4071 : vec2<f32> = u_xlat55;
          u_xlat55 = ((vec2<f32>(x_4066.x, x_4066.y) * vec2<f32>(x_4068.x, x_4068.x)) + x_4071);
          let x_4073 : i32 = u_xlati76;
          let x_4076 : i32 = u_xlati76;
          let x_4080 : vec4<f32> = x_3926.x_AdditionalLightsWorldToLights[((x_4073 + 2i) / 4i)][((x_4076 + 2i) % 4i)];
          let x_4082 : vec3<f32> = vs_INTERP0;
          let x_4085 : vec2<f32> = u_xlat55;
          u_xlat55 = ((vec2<f32>(x_4080.x, x_4080.y) * vec2<f32>(x_4082.z, x_4082.z)) + x_4085);
          let x_4087 : vec2<f32> = u_xlat55;
          let x_4088 : i32 = u_xlati76;
          let x_4091 : i32 = u_xlati76;
          let x_4095 : vec4<f32> = x_3926.x_AdditionalLightsWorldToLights[((x_4088 + 3i) / 4i)][((x_4091 + 3i) % 4i)];
          u_xlat55 = (x_4087 + vec2<f32>(x_4095.x, x_4095.y));
          let x_4098 : vec2<f32> = u_xlat55;
          u_xlat55 = ((x_4098 * vec2<f32>(0.5f, 0.5f)) + vec2<f32>(0.5f, 0.5f));
          let x_4101 : vec2<f32> = u_xlat55;
          u_xlat55 = fract(x_4101);
          let x_4103 : u32 = u_xlatu71;
          let x_4106 : vec4<f32> = x_3926.x_AdditionalLightsCookieAtlasUVRects[bitcast<i32>(x_4103)];
          let x_4108 : vec2<f32> = u_xlat55;
          let x_4110 : u32 = u_xlatu71;
          let x_4113 : vec4<f32> = x_3926.x_AdditionalLightsCookieAtlasUVRects[bitcast<i32>(x_4110)];
          let x_4115 : vec2<f32> = ((vec2<f32>(x_4106.x, x_4106.y) * x_4108) + vec2<f32>(x_4113.z, x_4113.w));
          let x_4116 : vec4<f32> = u_xlat11;
          u_xlat11 = vec4<f32>(x_4115.x, x_4115.y, x_4116.z, x_4116.w);
        } else {
          let x_4119 : vec3<f32> = vs_INTERP0;
          let x_4121 : i32 = u_xlati76;
          let x_4124 : i32 = u_xlati76;
          let x_4128 : vec4<f32> = x_3926.x_AdditionalLightsWorldToLights[((x_4121 + 1i) / 4i)][((x_4124 + 1i) % 4i)];
          u_xlat12 = (vec4<f32>(x_4119.y, x_4119.y, x_4119.y, x_4119.y) * x_4128);
          let x_4130 : i32 = u_xlati76;
          let x_4132 : i32 = u_xlati76;
          let x_4135 : vec4<f32> = x_3926.x_AdditionalLightsWorldToLights[(x_4130 / 4i)][(x_4132 % 4i)];
          let x_4136 : vec3<f32> = vs_INTERP0;
          let x_4139 : vec4<f32> = u_xlat12;
          u_xlat12 = ((x_4135 * vec4<f32>(x_4136.x, x_4136.x, x_4136.x, x_4136.x)) + x_4139);
          let x_4141 : i32 = u_xlati76;
          let x_4144 : i32 = u_xlati76;
          let x_4148 : vec4<f32> = x_3926.x_AdditionalLightsWorldToLights[((x_4141 + 2i) / 4i)][((x_4144 + 2i) % 4i)];
          let x_4149 : vec3<f32> = vs_INTERP0;
          let x_4152 : vec4<f32> = u_xlat12;
          u_xlat12 = ((x_4148 * vec4<f32>(x_4149.z, x_4149.z, x_4149.z, x_4149.z)) + x_4152);
          let x_4154 : vec4<f32> = u_xlat12;
          let x_4155 : i32 = u_xlati76;
          let x_4158 : i32 = u_xlati76;
          let x_4162 : vec4<f32> = x_3926.x_AdditionalLightsWorldToLights[((x_4155 + 3i) / 4i)][((x_4158 + 3i) % 4i)];
          u_xlat12 = (x_4154 + x_4162);
          let x_4164 : vec4<f32> = u_xlat12;
          let x_4166 : vec4<f32> = u_xlat12;
          let x_4168 : vec3<f32> = (vec3<f32>(x_4164.x, x_4164.y, x_4164.z) / vec3<f32>(x_4166.w, x_4166.w, x_4166.w));
          let x_4169 : vec4<f32> = u_xlat12;
          u_xlat12 = vec4<f32>(x_4168.x, x_4168.y, x_4168.z, x_4169.w);
          let x_4171 : vec4<f32> = u_xlat12;
          let x_4173 : vec4<f32> = u_xlat12;
          u_xlat74 = dot(vec3<f32>(x_4171.x, x_4171.y, x_4171.z), vec3<f32>(x_4173.x, x_4173.y, x_4173.z));
          let x_4176 : f32 = u_xlat74;
          u_xlat74 = inverseSqrt(x_4176);
          let x_4178 : f32 = u_xlat74;
          let x_4180 : vec4<f32> = u_xlat12;
          let x_4182 : vec3<f32> = (vec3<f32>(x_4178, x_4178, x_4178) * vec3<f32>(x_4180.x, x_4180.y, x_4180.z));
          let x_4183 : vec4<f32> = u_xlat12;
          u_xlat12 = vec4<f32>(x_4182.x, x_4182.y, x_4182.z, x_4183.w);
          let x_4185 : vec4<f32> = u_xlat12;
          u_xlat74 = dot(abs(vec3<f32>(x_4185.x, x_4185.y, x_4185.z)), vec3<f32>(1.0f, 1.0f, 1.0f));
          let x_4190 : f32 = u_xlat74;
          u_xlat74 = max(x_4190, 0.000001f);
          let x_4193 : f32 = u_xlat74;
          u_xlat74 = (1.0f / x_4193);
          let x_4195 : f32 = u_xlat74;
          let x_4197 : vec4<f32> = u_xlat12;
          let x_4199 : vec3<f32> = (vec3<f32>(x_4195, x_4195, x_4195) * vec3<f32>(x_4197.z, x_4197.x, x_4197.y));
          let x_4200 : vec4<f32> = u_xlat13;
          u_xlat13 = vec4<f32>(x_4199.x, x_4199.y, x_4199.z, x_4200.w);
          let x_4203 : f32 = u_xlat13.x;
          u_xlat13.x = -(x_4203);
          let x_4207 : f32 = u_xlat13.x;
          u_xlat13.x = clamp(x_4207, 0.0f, 1.0f);
          let x_4211 : vec4<f32> = u_xlat13;
          let x_4214 : vec4<bool> = (vec4<f32>(x_4211.y, x_4211.z, x_4211.y, x_4211.z) >= vec4<f32>(0.0f, 0.0f, 0.0f, 0.0f));
          u_xlatb55 = vec2<bool>(x_4214.x, x_4214.y);
          let x_4217 : bool = u_xlatb55.x;
          if (x_4217) {
            let x_4222 : f32 = u_xlat13.x;
            x_4218 = x_4222;
          } else {
            let x_4225 : f32 = u_xlat13.x;
            x_4218 = -(x_4225);
          }
          let x_4227 : f32 = x_4218;
          u_xlat55.x = x_4227;
          let x_4230 : bool = u_xlatb55.y;
          if (x_4230) {
            let x_4235 : f32 = u_xlat13.x;
            x_4231 = x_4235;
          } else {
            let x_4238 : f32 = u_xlat13.x;
            x_4231 = -(x_4238);
          }
          let x_4240 : f32 = x_4231;
          u_xlat55.y = x_4240;
          let x_4242 : vec4<f32> = u_xlat12;
          let x_4244 : f32 = u_xlat74;
          let x_4247 : vec2<f32> = u_xlat55;
          u_xlat55 = ((vec2<f32>(x_4242.x, x_4242.y) * vec2<f32>(x_4244, x_4244)) + x_4247);
          let x_4249 : vec2<f32> = u_xlat55;
          u_xlat55 = ((x_4249 * vec2<f32>(0.5f, 0.5f)) + vec2<f32>(0.5f, 0.5f));
          let x_4252 : vec2<f32> = u_xlat55;
          u_xlat55 = clamp(x_4252, vec2<f32>(0.0f, 0.0f), vec2<f32>(1.0f, 1.0f));
          let x_4256 : u32 = u_xlatu71;
          let x_4259 : vec4<f32> = x_3926.x_AdditionalLightsCookieAtlasUVRects[bitcast<i32>(x_4256)];
          let x_4261 : vec2<f32> = u_xlat55;
          let x_4263 : u32 = u_xlatu71;
          let x_4266 : vec4<f32> = x_3926.x_AdditionalLightsCookieAtlasUVRects[bitcast<i32>(x_4263)];
          let x_4268 : vec2<f32> = ((vec2<f32>(x_4259.x, x_4259.y) * x_4261) + vec2<f32>(x_4266.z, x_4266.w));
          let x_4269 : vec4<f32> = u_xlat11;
          u_xlat11 = vec4<f32>(x_4268.x, x_4268.y, x_4269.z, x_4269.w);
        }
      }
      let x_4276 : vec4<f32> = u_xlat11;
      let x_4279 : f32 = x_139.x_GlobalMipBias.x;
      let x_4280 : vec4<f32> = textureSampleBias(x_AdditionalLightsCookieAtlasTexture, sampler_AdditionalLightsCookieAtlasTexture, vec2<f32>(x_4276.x, x_4276.y), x_4279);
      u_xlat11 = x_4280;
      let x_4282 : bool = u_xlatb25.z;
      if (x_4282) {
        let x_4287 : f32 = u_xlat11.w;
        x_4283 = x_4287;
      } else {
        let x_4290 : f32 = u_xlat11.x;
        x_4283 = x_4290;
      }
      let x_4291 : f32 = x_4283;
      u_xlat74 = x_4291;
      let x_4293 : bool = u_xlatb25.x;
      if (x_4293) {
        let x_4297 : vec4<f32> = u_xlat11;
        x_4294 = vec3<f32>(x_4297.x, x_4297.y, x_4297.z);
      } else {
        let x_4300 : f32 = u_xlat74;
        x_4294 = vec3<f32>(x_4300, x_4300, x_4300);
      }
      let x_4302 : vec3<f32> = x_4294;
      let x_4303 : vec4<f32> = u_xlat11;
      u_xlat11 = vec4<f32>(x_4302.x, x_4302.y, x_4302.z, x_4303.w);
    } else {
      u_xlat11.x = 1.0f;
      u_xlat11.y = 1.0f;
      u_xlat11.z = 1.0f;
    }
    let x_4309 : vec4<f32> = u_xlat11;
    let x_4311 : u32 = u_xlatu71;
    let x_4314 : vec4<f32> = x_3817.x_AdditionalLightsColor[bitcast<i32>(x_4311)];
    let x_4316 : vec3<f32> = (vec3<f32>(x_4309.x, x_4309.y, x_4309.z) * vec3<f32>(x_4314.x, x_4314.y, x_4314.z));
    let x_4317 : vec4<f32> = u_xlat11;
    u_xlat11 = vec4<f32>(x_4316.x, x_4316.y, x_4316.z, x_4317.w);
    let x_4319 : f32 = u_xlat50;
    let x_4321 : vec4<f32> = u_xlat11;
    let x_4323 : vec3<f32> = (vec3<f32>(x_4319, x_4319, x_4319) * vec3<f32>(x_4321.x, x_4321.y, x_4321.z));
    let x_4324 : vec4<f32> = u_xlat11;
    u_xlat11 = vec4<f32>(x_4323.x, x_4323.y, x_4323.z, x_4324.w);
    let x_4326 : vec3<f32> = u_xlat22;
    let x_4327 : vec4<f32> = u_xlat10;
    u_xlat71 = dot(x_4326, vec3<f32>(x_4327.x, x_4327.y, x_4327.z));
    let x_4330 : f32 = u_xlat71;
    u_xlat71 = clamp(x_4330, 0.0f, 1.0f);
    let x_4332 : f32 = u_xlat71;
    let x_4333 : f32 = u_xlat72;
    u_xlat71 = (x_4332 * x_4333);
    let x_4335 : f32 = u_xlat71;
    let x_4337 : vec4<f32> = u_xlat11;
    let x_4339 : vec3<f32> = (vec3<f32>(x_4335, x_4335, x_4335) * vec3<f32>(x_4337.x, x_4337.y, x_4337.z));
    let x_4340 : vec4<f32> = u_xlat11;
    u_xlat11 = vec4<f32>(x_4339.x, x_4339.y, x_4339.z, x_4340.w);
    let x_4342 : vec4<f32> = u_xlat9;
    let x_4344 : f32 = u_xlat73;
    let x_4347 : vec4<f32> = u_xlat7;
    let x_4349 : vec3<f32> = ((vec3<f32>(x_4342.x, x_4342.y, x_4342.z) * vec3<f32>(x_4344, x_4344, x_4344)) + vec3<f32>(x_4347.x, x_4347.y, x_4347.z));
    let x_4350 : vec4<f32> = u_xlat9;
    u_xlat9 = vec4<f32>(x_4349.x, x_4349.y, x_4349.z, x_4350.w);
    let x_4352 : vec4<f32> = u_xlat9;
    let x_4354 : vec4<f32> = u_xlat9;
    u_xlat71 = dot(vec3<f32>(x_4352.x, x_4352.y, x_4352.z), vec3<f32>(x_4354.x, x_4354.y, x_4354.z));
    let x_4357 : f32 = u_xlat71;
    u_xlat71 = max(x_4357, 1.17549435e-37f);
    let x_4359 : f32 = u_xlat71;
    u_xlat71 = inverseSqrt(x_4359);
    let x_4361 : f32 = u_xlat71;
    let x_4363 : vec4<f32> = u_xlat9;
    let x_4365 : vec3<f32> = (vec3<f32>(x_4361, x_4361, x_4361) * vec3<f32>(x_4363.x, x_4363.y, x_4363.z));
    let x_4366 : vec4<f32> = u_xlat9;
    u_xlat9 = vec4<f32>(x_4365.x, x_4365.y, x_4365.z, x_4366.w);
    let x_4368 : vec3<f32> = u_xlat22;
    let x_4369 : vec4<f32> = u_xlat9;
    u_xlat71 = dot(x_4368, vec3<f32>(x_4369.x, x_4369.y, x_4369.z));
    let x_4372 : f32 = u_xlat71;
    u_xlat71 = clamp(x_4372, 0.0f, 1.0f);
    let x_4374 : vec4<f32> = u_xlat10;
    let x_4376 : vec4<f32> = u_xlat9;
    u_xlat72 = dot(vec3<f32>(x_4374.x, x_4374.y, x_4374.z), vec3<f32>(x_4376.x, x_4376.y, x_4376.z));
    let x_4379 : f32 = u_xlat72;
    u_xlat72 = clamp(x_4379, 0.0f, 1.0f);
    let x_4381 : f32 = u_xlat71;
    let x_4382 : f32 = u_xlat71;
    u_xlat71 = (x_4381 * x_4382);
    let x_4384 : f32 = u_xlat71;
    let x_4386 : f32 = u_xlat3.x;
    u_xlat71 = ((x_4384 * x_4386) + 1.000010014f);
    let x_4389 : f32 = u_xlat72;
    let x_4390 : f32 = u_xlat72;
    u_xlat72 = (x_4389 * x_4390);
    let x_4392 : f32 = u_xlat71;
    let x_4393 : f32 = u_xlat71;
    u_xlat71 = (x_4392 * x_4393);
    let x_4395 : f32 = u_xlat72;
    u_xlat72 = max(x_4395, 0.100000001f);
    let x_4397 : f32 = u_xlat71;
    let x_4398 : f32 = u_xlat72;
    u_xlat71 = (x_4397 * x_4398);
    let x_4401 : f32 = u_xlat6.x;
    let x_4402 : f32 = u_xlat71;
    u_xlat71 = (x_4401 * x_4402);
    let x_4404 : f32 = u_xlat70;
    let x_4405 : f32 = u_xlat71;
    u_xlat71 = (x_4404 / x_4405);
    let x_4407 : f32 = u_xlat71;
    let x_4410 : vec3<f32> = u_xlat5;
    let x_4411 : vec3<f32> = ((vec3<f32>(x_4407, x_4407, x_4407) * vec3<f32>(0.039999999f, 0.039999999f, 0.039999999f)) + x_4410);
    let x_4412 : vec4<f32> = u_xlat9;
    u_xlat9 = vec4<f32>(x_4411.x, x_4411.y, x_4411.z, x_4412.w);
    let x_4414 : vec4<f32> = u_xlat9;
    let x_4416 : vec4<f32> = u_xlat11;
    let x_4419 : vec4<f32> = u_xlat8;
    let x_4421 : vec3<f32> = ((vec3<f32>(x_4414.x, x_4414.y, x_4414.z) * vec3<f32>(x_4416.x, x_4416.y, x_4416.z)) + vec3<f32>(x_4419.x, x_4419.y, x_4419.z));
    let x_4422 : vec4<f32> = u_xlat8;
    u_xlat8 = vec4<f32>(x_4421.x, x_4421.y, x_4421.z, x_4422.w);

    continuing {
      let x_4424 : u32 = u_xlatu_loop_1;
      u_xlatu_loop_1 = (x_4424 + bitcast<u32>(1i));
    }
  }
  let x_4426 : vec4<f32> = u_xlat4;
  let x_4428 : vec3<f32> = u_xlat28;
  let x_4431 : vec4<f32> = u_xlat2;
  u_xlat0 = ((vec3<f32>(x_4426.x, x_4426.y, x_4426.z) * vec3<f32>(x_4428.x, x_4428.x, x_4428.x)) + vec3<f32>(x_4431.x, x_4431.y, x_4431.z));
  let x_4434 : vec4<f32> = u_xlat8;
  let x_4436 : vec3<f32> = u_xlat0;
  u_xlat0 = (vec3<f32>(x_4434.x, x_4434.y, x_4434.z) + x_4436);
  let x_4440 : vec4<f32> = vs_INTERP4;
  let x_4442 : vec3<f32> = u_xlat1;
  let x_4444 : vec3<f32> = u_xlat0;
  let x_4445 : vec3<f32> = ((vec3<f32>(x_4440.w, x_4440.w, x_4440.w) * x_4442) + x_4444);
  let x_4446 : vec4<f32> = SV_Target0;
  SV_Target0 = vec4<f32>(x_4445.x, x_4445.y, x_4445.z, x_4446.w);
  let x_4448 : bool = u_xlatb47;
  let x_4449 : f32 = u_xlat67;
  SV_Target0.w = select(1.0f, x_4449, x_4448);
  return;
}

struct main_out {
  @location(0)
  SV_Target0_1 : vec4<f32>,
}

@fragment
fn main(@builtin(position) gl_FragCoord_param : vec4<f32>, @location(1) vs_INTERP1_param : vec3<f32>, @location(2) vs_INTERP2_param : vec4<f32>, @location(3) vs_INTERP3_param : vec4<f32>, @location(4) vs_INTERP4_param : vec4<f32>, @location(0) vs_INTERP0_param : vec3<f32>, @location(5) vs_INTERP5_param : vec2<f32>) -> main_out {
  gl_FragCoord = gl_FragCoord_param;
  vs_INTERP1 = vs_INTERP1_param;
  vs_INTERP2 = vs_INTERP2_param;
  vs_INTERP3 = vs_INTERP3_param;
  vs_INTERP4 = vs_INTERP4_param;
  vs_INTERP0 = vs_INTERP0_param;
  vs_INTERP5 = vs_INTERP5_param;
  main_1();
  return main_out(SV_Target0);
}

