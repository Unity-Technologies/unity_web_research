type Arr = array<vec4<f32>, 2u>;

type Arr_1 = array<mat4x4<f32>, 2u>;

type Arr_2 = array<vec4<f32>, 2u>;

type Arr_3 = array<vec4<f32>, 2u>;

struct PGlobals {
  x_GlobalMipBias : vec2<f32>,
  @size(8)
  padding : u32,
  x_ZBufferParams : vec4<f32>,
  unity_MatrixV : mat4x4<f32>,
  x_SSAOParams : vec4<f32>,
  x_CameraViewTopLeftCorner : Arr_3,
  x_CameraViewProjections : Arr_1,
  x_ProjectionParams2 : vec4<f32>,
  x_CameraViewXExtent : Arr_3,
  x_CameraViewYExtent : Arr_3,
  x_SSAOBlueNoiseParams : vec4<f32>,
}

@group(0) @binding(0) var x_CameraDepthTexture : texture_2d<f32>;

@group(0) @binding(3) var sampler_CameraDepthTexture : sampler;

var<private> vs_TEXCOORD0 : vec2<f32>;

@group(1) @binding(0) var<uniform> x_33 : PGlobals;

var<private> SV_Target0 : vec4<f32>;

@group(0) @binding(1) var x_BlueNoiseTexture : texture_2d<f32>;

@group(0) @binding(2) var sampler_PointRepeat : sampler;

var<private> gl_FragCoord : vec4<f32>;

fn main_1() {
  var u_xlat0 : f32;
  var u_xlatb8 : bool;
  var u_xlat8 : vec3<f32>;
  var u_xlat16 : f32;
  var u_xlat1 : vec3<f32>;
  var u_xlat2 : vec4<f32>;
  var u_xlat3 : vec4<f32>;
  var u_xlat25 : f32;
  var u_xlat18 : vec2<f32>;
  var u_xlat4 : vec3<f32>;
  var u_xlat5 : vec3<f32>;
  var u_xlatb25 : bool;
  var u_xlat11 : vec3<f32>;
  var u_xlatb3 : vec2<bool>;
  var u_xlat26 : f32;
  var u_xlat6 : f32;
  var u_xlat7 : f32;
  var u_xlatb26 : bool;
  var u_xlat28 : f32;
  var u_xlatb28 : bool;
  var u_xlatb18 : bool;
  var u_xlat19 : f32;
  var u_xlat10 : vec2<f32>;
  var u_xlatb2 : vec4<bool>;
  var u_xlat_precise_vec4 : vec4<f32>;
  var u_xlat_precise_ivec4 : vec4<i32>;
  var u_xlat_precise_bvec4 : vec4<bool>;
  var u_xlat_precise_uvec4 : vec4<u32>;
  let x_22 : vec2<f32> = vs_TEXCOORD0;
  let x_39 : f32 = x_33.x_GlobalMipBias.x;
  let x_40 : vec4<f32> = textureSampleBias(x_CameraDepthTexture, sampler_CameraDepthTexture, x_22, x_39);
  u_xlat0 = x_40.x;
  let x_45 : f32 = u_xlat0;
  u_xlatb8 = (x_45 < 0.00001f);
  let x_48 : bool = u_xlatb8;
  if (x_48) {
    SV_Target0 = vec4<f32>(0.0f, 0.5f, 0.5f, 0.5f);
    return;
  }
  let x_59 : f32 = x_33.x_ZBufferParams.z;
  let x_60 : f32 = u_xlat0;
  let x_64 : f32 = x_33.x_ZBufferParams.w;
  u_xlat0 = ((x_59 * x_60) + x_64);
  let x_67 : f32 = u_xlat0;
  u_xlat0 = (1.0f / x_67);
  let x_71 : f32 = x_33.x_SSAOParams.w;
  let x_72 : f32 = u_xlat0;
  u_xlatb8 = (x_71 < x_72);
  let x_74 : bool = u_xlatb8;
  if (x_74) {
    SV_Target0 = vec4<f32>(0.0f, 0.5f, 0.5f, 0.5f);
    return;
  }
  let x_84 : f32 = vs_TEXCOORD0.y;
  u_xlat8.x = (-(x_84) + 1.0f);
  let x_89 : f32 = u_xlat0;
  let x_92 : f32 = x_33.x_ProjectionParams2.x;
  u_xlat16 = (x_89 * x_92);
  let x_98 : vec4<f32> = x_33.x_CameraViewXExtent[0i];
  let x_100 : vec2<f32> = vs_TEXCOORD0;
  let x_105 : vec4<f32> = x_33.x_CameraViewTopLeftCorner[0i];
  u_xlat1 = ((vec3<f32>(x_98.x, x_98.y, x_98.z) * vec3<f32>(x_100.x, x_100.x, x_100.x)) + vec3<f32>(x_105.x, x_105.y, x_105.z));
  let x_110 : vec4<f32> = x_33.x_CameraViewYExtent[0i];
  let x_112 : vec3<f32> = u_xlat8;
  let x_115 : vec3<f32> = u_xlat1;
  u_xlat1 = ((vec3<f32>(x_110.x, x_110.y, x_110.z) * vec3<f32>(x_112.x, x_112.x, x_112.x)) + x_115);
  let x_117 : f32 = u_xlat16;
  let x_119 : vec3<f32> = u_xlat1;
  u_xlat8 = (vec3<f32>(x_117, x_117, x_117) * x_119);
  let x_121 : vec3<f32> = u_xlat8;
  u_xlat1 = dpdyCoarse(vec3<f32>(x_121.z, x_121.x, x_121.y));
  let x_126 : vec3<f32> = u_xlat8;
  let x_128 : vec3<f32> = dpdxCoarse(vec3<f32>(x_126.y, x_126.z, x_126.x));
  let x_129 : vec4<f32> = u_xlat2;
  u_xlat2 = vec4<f32>(x_128.x, x_128.y, x_128.z, x_129.w);
  let x_132 : vec3<f32> = u_xlat1;
  let x_133 : vec4<f32> = u_xlat2;
  let x_135 : vec3<f32> = (x_132 * vec3<f32>(x_133.x, x_133.y, x_133.z));
  let x_136 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_135.x, x_135.y, x_135.z, x_136.w);
  let x_138 : vec3<f32> = u_xlat1;
  let x_140 : vec4<f32> = u_xlat2;
  let x_143 : vec4<f32> = u_xlat3;
  u_xlat1 = ((vec3<f32>(x_138.z, x_138.x, x_138.y) * vec3<f32>(x_140.y, x_140.z, x_140.x)) + -(vec3<f32>(x_143.x, x_143.y, x_143.z)));
  let x_148 : vec3<f32> = u_xlat1;
  let x_149 : vec3<f32> = u_xlat1;
  u_xlat25 = dot(x_148, x_149);
  let x_151 : f32 = u_xlat25;
  u_xlat25 = inverseSqrt(x_151);
  let x_153 : f32 = u_xlat25;
  let x_155 : vec3<f32> = u_xlat1;
  u_xlat1 = (vec3<f32>(x_153, x_153, x_153) * x_155);
  let x_157 : vec2<f32> = vs_TEXCOORD0;
  let x_160 : vec4<f32> = x_33.x_SSAOBlueNoiseParams;
  let x_162 : vec2<f32> = (x_157 + vec2<f32>(x_160.z, x_160.w));
  let x_163 : vec4<f32> = u_xlat2;
  u_xlat2 = vec4<f32>(x_162.x, x_162.y, x_163.z, x_163.w);
  let x_167 : vec4<f32> = u_xlat2;
  let x_170 : vec4<f32> = x_33.x_SSAOBlueNoiseParams;
  u_xlat18 = (vec2<f32>(x_167.x, x_167.y) * vec2<f32>(x_170.x, x_170.y));
  let x_178 : vec2<f32> = u_xlat18;
  let x_180 : f32 = x_33.x_GlobalMipBias.x;
  let x_181 : vec4<f32> = textureSampleBias(x_BlueNoiseTexture, sampler_PointRepeat, x_178, x_180);
  u_xlat25 = x_181.w;
  let x_183 : f32 = u_xlat25;
  u_xlat18.x = fract(x_183);
  let x_187 : f32 = u_xlat18.x;
  u_xlat3.z = ((x_187 * 2.0f) + -1.0f);
  let x_193 : f32 = u_xlat25;
  u_xlat25 = (x_193 + 0.9296875f);
  let x_196 : f32 = u_xlat25;
  u_xlat25 = (x_196 * 628.31854248f);
  let x_200 : f32 = u_xlat3.z;
  let x_203 : f32 = u_xlat3.z;
  u_xlat18.x = ((-(x_200) * x_203) + 1.0f);
  let x_208 : f32 = u_xlat18.x;
  u_xlat18.x = sqrt(x_208);
  let x_212 : f32 = u_xlat25;
  u_xlat4.x = sin(x_212);
  let x_216 : f32 = u_xlat25;
  u_xlat5.x = cos(x_216);
  let x_220 : f32 = u_xlat18.x;
  let x_222 : f32 = u_xlat5.x;
  u_xlat3.x = (x_220 * x_222);
  let x_226 : f32 = u_xlat18.x;
  let x_228 : f32 = u_xlat4.x;
  u_xlat3.y = (x_226 * x_228);
  let x_231 : vec3<f32> = u_xlat1;
  let x_232 : vec4<f32> = u_xlat3;
  u_xlat25 = dot(x_231, vec3<f32>(x_232.x, x_232.y, x_232.z));
  let x_236 : f32 = u_xlat25;
  u_xlatb25 = (x_236 >= 0.0f);
  let x_238 : bool = u_xlatb25;
  u_xlat25 = select(-1.0f, 1.0f, x_238);
  let x_240 : f32 = u_xlat25;
  let x_242 : vec4<f32> = u_xlat3;
  let x_244 : vec3<f32> = (vec3<f32>(x_240, x_240, x_240) * vec3<f32>(x_242.x, x_242.y, x_242.z));
  let x_245 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_244.x, x_244.y, x_244.z, x_245.w);
  let x_247 : vec4<f32> = u_xlat3;
  let x_250 : vec4<f32> = x_33.x_SSAOParams;
  let x_252 : vec3<f32> = (vec3<f32>(x_247.x, x_247.y, x_247.z) * vec3<f32>(x_250.y, x_250.y, x_250.y));
  let x_253 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_252.x, x_252.y, x_252.z, x_253.w);
  let x_255 : vec4<f32> = u_xlat3;
  let x_260 : vec3<f32> = u_xlat8;
  let x_261 : vec3<f32> = ((vec3<f32>(x_255.x, x_255.y, x_255.z) * vec3<f32>(0.100000001f, 0.100000001f, 0.100000001f)) + x_260);
  let x_262 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_261.x, x_261.y, x_261.z, x_262.w);
  let x_264 : vec4<f32> = u_xlat3;
  let x_268 : vec4<f32> = x_33.x_CameraViewProjections[0i][1i];
  u_xlat18 = (vec2<f32>(x_264.y, x_264.y) * vec2<f32>(x_268.x, x_268.y));
  let x_272 : vec4<f32> = x_33.x_CameraViewProjections[0i][0i];
  let x_274 : vec4<f32> = u_xlat3;
  let x_277 : vec2<f32> = u_xlat18;
  u_xlat18 = ((vec2<f32>(x_272.x, x_272.y) * vec2<f32>(x_274.x, x_274.x)) + x_277);
  let x_281 : vec4<f32> = x_33.x_CameraViewProjections[0i][2i];
  let x_283 : vec4<f32> = u_xlat3;
  let x_286 : vec2<f32> = u_xlat18;
  u_xlat18 = ((vec2<f32>(x_281.x, x_281.y) * vec2<f32>(x_283.z, x_283.z)) + x_286);
  let x_289 : f32 = x_33.unity_MatrixV[0i].z;
  u_xlat4.x = x_289;
  let x_292 : f32 = x_33.unity_MatrixV[1i].z;
  u_xlat4.y = x_292;
  let x_295 : f32 = x_33.unity_MatrixV[2i].z;
  u_xlat4.z = x_295;
  let x_297 : vec3<f32> = u_xlat4;
  let x_298 : vec4<f32> = u_xlat3;
  u_xlat25 = dot(x_297, vec3<f32>(x_298.x, x_298.y, x_298.z));
  let x_301 : f32 = u_xlat25;
  u_xlat3.x = (1.0f / -(x_301));
  let x_305 : vec2<f32> = u_xlat18;
  let x_306 : vec4<f32> = u_xlat3;
  u_xlat18 = ((x_305 * vec2<f32>(x_306.x, x_306.x)) + vec2<f32>(1.0f, 1.0f));
  let x_311 : vec2<f32> = u_xlat18;
  u_xlat18 = (x_311 * vec2<f32>(0.5f, 0.5f));
  let x_314 : vec2<f32> = u_xlat18;
  u_xlat18 = clamp(x_314, vec2<f32>(0.0f, 0.0f), vec2<f32>(1.0f, 1.0f));
  let x_321 : vec2<f32> = u_xlat18;
  let x_323 : f32 = x_33.x_GlobalMipBias.x;
  let x_324 : vec4<f32> = textureSampleBias(x_CameraDepthTexture, sampler_CameraDepthTexture, x_321, x_323);
  u_xlat3.x = x_324.x;
  let x_329 : f32 = x_33.x_ZBufferParams.z;
  let x_331 : f32 = u_xlat3.x;
  let x_334 : f32 = x_33.x_ZBufferParams.w;
  u_xlat11.x = ((x_329 * x_331) + x_334);
  let x_338 : f32 = u_xlat11.x;
  u_xlat11.x = (1.0f / x_338);
  let x_341 : f32 = u_xlat25;
  let x_344 : f32 = u_xlat11.x;
  u_xlat25 = (-(x_341) + -(x_344));
  let x_347 : f32 = u_xlat25;
  let x_350 : f32 = x_33.x_SSAOParams.y;
  u_xlatb25 = (abs(x_347) < x_350);
  let x_352 : bool = u_xlatb25;
  u_xlat25 = select(0.0f, 1.0f, x_352);
  let x_358 : f32 = u_xlat3.x;
  u_xlatb3.x = (0.00001f < x_358);
  let x_362 : bool = u_xlatb3.x;
  u_xlat3.x = select(0.0f, 1.0f, x_362);
  let x_365 : f32 = u_xlat25;
  let x_367 : f32 = u_xlat3.x;
  u_xlat25 = (x_365 * x_367);
  let x_371 : f32 = u_xlat18.y;
  u_xlat26 = (-(x_371) + 1.0f);
  let x_375 : f32 = u_xlat11.x;
  let x_377 : f32 = x_33.x_ProjectionParams2.x;
  u_xlat3.x = (x_375 * x_377);
  let x_381 : vec4<f32> = x_33.x_CameraViewXExtent[0i];
  let x_383 : vec2<f32> = u_xlat18;
  let x_387 : vec4<f32> = x_33.x_CameraViewTopLeftCorner[0i];
  u_xlat11 = ((vec3<f32>(x_381.x, x_381.y, x_381.z) * vec3<f32>(x_383.x, x_383.x, x_383.x)) + vec3<f32>(x_387.x, x_387.y, x_387.z));
  let x_391 : vec4<f32> = x_33.x_CameraViewYExtent[0i];
  let x_393 : f32 = u_xlat26;
  let x_396 : vec3<f32> = u_xlat11;
  u_xlat11 = ((vec3<f32>(x_391.x, x_391.y, x_391.z) * vec3<f32>(x_393, x_393, x_393)) + x_396);
  let x_398 : vec3<f32> = u_xlat11;
  let x_399 : vec4<f32> = u_xlat3;
  let x_402 : vec3<f32> = u_xlat8;
  let x_404 : vec3<f32> = ((x_398 * vec3<f32>(x_399.x, x_399.x, x_399.x)) + -(x_402));
  let x_405 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_404.x, x_404.y, x_404.z, x_405.w);
  let x_407 : vec4<f32> = u_xlat3;
  let x_409 : vec3<f32> = u_xlat1;
  u_xlat18.x = dot(vec3<f32>(x_407.x, x_407.y, x_407.z), x_409);
  let x_412 : f32 = u_xlat0;
  let x_417 : f32 = u_xlat18.x;
  u_xlat18.x = ((-(x_412) * 0.004f) + x_417);
  let x_421 : f32 = u_xlat18.x;
  u_xlat18.x = max(x_421, 0.0f);
  let x_424 : vec4<f32> = u_xlat3;
  let x_426 : vec4<f32> = u_xlat3;
  u_xlat26 = dot(vec3<f32>(x_424.x, x_424.y, x_424.z), vec3<f32>(x_426.x, x_426.y, x_426.z));
  let x_429 : f32 = u_xlat26;
  u_xlat26 = (x_429 + 0.0001f);
  let x_432 : f32 = u_xlat26;
  u_xlat26 = (1.0f / x_432);
  let x_434 : f32 = u_xlat26;
  let x_436 : f32 = u_xlat18.x;
  u_xlat18.x = (x_434 * x_436);
  let x_439 : vec4<f32> = u_xlat2;
  let x_442 : vec4<f32> = x_33.x_SSAOBlueNoiseParams;
  u_xlat3 = ((vec4<f32>(x_439.x, x_439.y, x_439.x, x_439.y) * vec4<f32>(x_442.x, x_442.y, x_442.x, x_442.y)) + vec4<f32>(0.083333336f, 0.083333336f, 0.166666672f, 0.166666672f));
  let x_452 : vec4<f32> = u_xlat3;
  let x_455 : f32 = x_33.x_GlobalMipBias.x;
  let x_456 : vec4<f32> = textureSampleBias(x_BlueNoiseTexture, sampler_PointRepeat, vec2<f32>(x_452.x, x_452.y), x_455);
  u_xlat26 = x_456.w;
  let x_458 : f32 = u_xlat26;
  let x_463 : vec2<f32> = (vec2<f32>(x_458, x_458) + vec2<f32>(0.33984375f, 0.76171875f));
  let x_464 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_463.x, x_463.y, x_464.z, x_464.w);
  let x_467 : f32 = u_xlat3.x;
  u_xlat26 = fract(x_467);
  let x_469 : f32 = u_xlat26;
  u_xlat5.z = ((x_469 * 2.0f) + -1.0f);
  let x_474 : f32 = u_xlat3.y;
  u_xlat26 = (x_474 * 628.31854248f);
  let x_477 : f32 = u_xlat5.z;
  let x_480 : f32 = u_xlat5.z;
  u_xlat3.x = ((-(x_477) * x_480) + 1.0f);
  let x_485 : f32 = u_xlat3.x;
  u_xlat3.x = sqrt(x_485);
  let x_489 : f32 = u_xlat26;
  u_xlat6 = sin(x_489);
  let x_492 : f32 = u_xlat26;
  u_xlat7 = cos(x_492);
  let x_495 : f32 = u_xlat3.x;
  let x_496 : f32 = u_xlat7;
  u_xlat5.x = (x_495 * x_496);
  let x_500 : f32 = u_xlat3.x;
  let x_501 : f32 = u_xlat6;
  u_xlat5.y = (x_500 * x_501);
  let x_504 : vec3<f32> = u_xlat1;
  let x_505 : vec3<f32> = u_xlat5;
  u_xlat26 = dot(x_504, x_505);
  let x_508 : f32 = u_xlat26;
  u_xlatb26 = (x_508 >= 0.0f);
  let x_510 : bool = u_xlatb26;
  u_xlat26 = select(-1.0f, 1.0f, x_510);
  let x_512 : f32 = u_xlat26;
  let x_514 : vec3<f32> = u_xlat5;
  u_xlat5 = (vec3<f32>(x_512, x_512, x_512) * x_514);
  let x_516 : vec3<f32> = u_xlat5;
  let x_518 : vec4<f32> = x_33.x_SSAOParams;
  u_xlat5 = (x_516 * vec3<f32>(x_518.y, x_518.y, x_518.y));
  let x_521 : vec3<f32> = u_xlat5;
  let x_525 : vec3<f32> = u_xlat8;
  u_xlat5 = ((x_521 * vec3<f32>(0.106250003f, 0.106250003f, 0.106250003f)) + x_525);
  let x_527 : vec3<f32> = u_xlat5;
  let x_530 : vec4<f32> = x_33.x_CameraViewProjections[0i][1i];
  let x_532 : vec2<f32> = (vec2<f32>(x_527.y, x_527.y) * vec2<f32>(x_530.x, x_530.y));
  let x_533 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_532.x, x_532.y, x_533.z, x_533.w);
  let x_536 : vec4<f32> = x_33.x_CameraViewProjections[0i][0i];
  let x_538 : vec3<f32> = u_xlat5;
  let x_541 : vec4<f32> = u_xlat3;
  let x_543 : vec2<f32> = ((vec2<f32>(x_536.x, x_536.y) * vec2<f32>(x_538.x, x_538.x)) + vec2<f32>(x_541.x, x_541.y));
  let x_544 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_543.x, x_543.y, x_544.z, x_544.w);
  let x_547 : vec4<f32> = x_33.x_CameraViewProjections[0i][2i];
  let x_549 : vec3<f32> = u_xlat5;
  let x_552 : vec4<f32> = u_xlat3;
  let x_554 : vec2<f32> = ((vec2<f32>(x_547.x, x_547.y) * vec2<f32>(x_549.z, x_549.z)) + vec2<f32>(x_552.x, x_552.y));
  let x_555 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_554.x, x_554.y, x_555.z, x_555.w);
  let x_557 : vec3<f32> = u_xlat4;
  let x_558 : vec3<f32> = u_xlat5;
  u_xlat26 = dot(x_557, x_558);
  let x_561 : f32 = u_xlat26;
  u_xlat28 = (1.0f / -(x_561));
  let x_564 : vec4<f32> = u_xlat3;
  let x_566 : f32 = u_xlat28;
  let x_569 : vec2<f32> = ((vec2<f32>(x_564.x, x_564.y) * vec2<f32>(x_566, x_566)) + vec2<f32>(1.0f, 1.0f));
  let x_570 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_569.x, x_569.y, x_570.z, x_570.w);
  let x_572 : vec4<f32> = u_xlat3;
  let x_574 : vec2<f32> = (vec2<f32>(x_572.x, x_572.y) * vec2<f32>(0.5f, 0.5f));
  let x_575 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_574.x, x_574.y, x_575.z, x_575.w);
  let x_577 : vec4<f32> = u_xlat3;
  let x_581 : vec2<f32> = clamp(vec2<f32>(x_577.x, x_577.y), vec2<f32>(0.0f, 0.0f), vec2<f32>(1.0f, 1.0f));
  let x_582 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_581.x, x_581.y, x_582.z, x_582.w);
  let x_587 : vec4<f32> = u_xlat3;
  let x_590 : f32 = x_33.x_GlobalMipBias.x;
  let x_591 : vec4<f32> = textureSampleBias(x_CameraDepthTexture, sampler_CameraDepthTexture, vec2<f32>(x_587.x, x_587.y), x_590);
  u_xlat28 = x_591.x;
  let x_594 : f32 = x_33.x_ZBufferParams.z;
  let x_595 : f32 = u_xlat28;
  let x_598 : f32 = x_33.x_ZBufferParams.w;
  u_xlat5.x = ((x_594 * x_595) + x_598);
  let x_602 : f32 = u_xlat5.x;
  u_xlat5.x = (1.0f / x_602);
  let x_605 : f32 = u_xlat26;
  let x_608 : f32 = u_xlat5.x;
  u_xlat26 = (-(x_605) + -(x_608));
  let x_611 : f32 = u_xlat26;
  let x_614 : f32 = x_33.x_SSAOParams.y;
  u_xlatb26 = (abs(x_611) < x_614);
  let x_616 : bool = u_xlatb26;
  u_xlat26 = select(0.0f, 1.0f, x_616);
  let x_619 : f32 = u_xlat28;
  u_xlatb28 = (0.00001f < x_619);
  let x_621 : bool = u_xlatb28;
  u_xlat28 = select(0.0f, 1.0f, x_621);
  let x_623 : f32 = u_xlat26;
  let x_624 : f32 = u_xlat28;
  u_xlat26 = (x_623 * x_624);
  let x_627 : f32 = u_xlat3.y;
  u_xlat11.x = (-(x_627) + 1.0f);
  let x_632 : f32 = u_xlat5.x;
  let x_634 : f32 = x_33.x_ProjectionParams2.x;
  u_xlat28 = (x_632 * x_634);
  let x_637 : vec4<f32> = x_33.x_CameraViewXExtent[0i];
  let x_639 : vec4<f32> = u_xlat3;
  let x_643 : vec4<f32> = x_33.x_CameraViewTopLeftCorner[0i];
  u_xlat5 = ((vec3<f32>(x_637.x, x_637.y, x_637.z) * vec3<f32>(x_639.x, x_639.x, x_639.x)) + vec3<f32>(x_643.x, x_643.y, x_643.z));
  let x_647 : vec4<f32> = x_33.x_CameraViewYExtent[0i];
  let x_649 : vec3<f32> = u_xlat11;
  let x_652 : vec3<f32> = u_xlat5;
  u_xlat5 = ((vec3<f32>(x_647.x, x_647.y, x_647.z) * vec3<f32>(x_649.x, x_649.x, x_649.x)) + x_652);
  let x_654 : vec3<f32> = u_xlat5;
  let x_655 : f32 = u_xlat28;
  let x_658 : vec3<f32> = u_xlat8;
  u_xlat5 = ((x_654 * vec3<f32>(x_655, x_655, x_655)) + -(x_658));
  let x_661 : vec3<f32> = u_xlat5;
  let x_662 : vec3<f32> = u_xlat1;
  u_xlat3.x = dot(x_661, x_662);
  let x_665 : f32 = u_xlat0;
  let x_669 : f32 = u_xlat3.x;
  u_xlat3.x = ((-(x_665) * 0.004f) + x_669);
  let x_673 : f32 = u_xlat3.x;
  u_xlat3.x = max(x_673, 0.0f);
  let x_676 : vec3<f32> = u_xlat5;
  let x_677 : vec3<f32> = u_xlat5;
  u_xlat11.x = dot(x_676, x_677);
  let x_681 : f32 = u_xlat11.x;
  u_xlat11.x = (x_681 + 0.0001f);
  let x_685 : f32 = u_xlat11.x;
  u_xlat11.x = (1.0f / x_685);
  let x_689 : f32 = u_xlat11.x;
  let x_691 : f32 = u_xlat3.x;
  u_xlat3.x = (x_689 * x_691);
  let x_694 : f32 = u_xlat26;
  let x_696 : f32 = u_xlat3.x;
  u_xlat26 = (x_694 * x_696);
  let x_699 : f32 = u_xlat18.x;
  let x_700 : f32 = u_xlat25;
  let x_702 : f32 = u_xlat26;
  u_xlat25 = ((x_699 * x_700) + x_702);
  let x_707 : vec4<f32> = u_xlat3;
  let x_710 : f32 = x_33.x_GlobalMipBias.x;
  let x_711 : vec4<f32> = textureSampleBias(x_BlueNoiseTexture, sampler_PointRepeat, vec2<f32>(x_707.z, x_707.w), x_710);
  u_xlat18.x = x_711.w;
  let x_714 : vec2<f32> = u_xlat18;
  u_xlat18 = (vec2<f32>(x_714.x, x_714.x) + vec2<f32>(0.75390625f, 0.133333296f));
  let x_721 : f32 = u_xlat18.x;
  u_xlat18.x = fract(x_721);
  let x_725 : f32 = u_xlat18.x;
  u_xlat3.z = ((x_725 * 2.0f) + -1.0f);
  let x_730 : f32 = u_xlat18.y;
  u_xlat18.x = (x_730 * 628.31854248f);
  let x_734 : f32 = u_xlat3.z;
  let x_737 : f32 = u_xlat3.z;
  u_xlat26 = ((-(x_734) * x_737) + 1.0f);
  let x_740 : f32 = u_xlat26;
  u_xlat26 = sqrt(x_740);
  let x_743 : f32 = u_xlat18.x;
  u_xlat5.x = sin(x_743);
  let x_747 : f32 = u_xlat18.x;
  u_xlat6 = cos(x_747);
  let x_749 : f32 = u_xlat26;
  let x_750 : f32 = u_xlat6;
  u_xlat3.x = (x_749 * x_750);
  let x_753 : f32 = u_xlat26;
  let x_755 : f32 = u_xlat5.x;
  u_xlat3.y = (x_753 * x_755);
  let x_758 : vec3<f32> = u_xlat1;
  let x_759 : vec4<f32> = u_xlat3;
  u_xlat18.x = dot(x_758, vec3<f32>(x_759.x, x_759.y, x_759.z));
  let x_765 : f32 = u_xlat18.x;
  u_xlatb18 = (x_765 >= 0.0f);
  let x_767 : bool = u_xlatb18;
  u_xlat18.x = select(-1.0f, 1.0f, x_767);
  let x_770 : vec2<f32> = u_xlat18;
  let x_772 : vec4<f32> = u_xlat3;
  let x_774 : vec3<f32> = (vec3<f32>(x_770.x, x_770.x, x_770.x) * vec3<f32>(x_772.x, x_772.y, x_772.z));
  let x_775 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_774.x, x_774.y, x_774.z, x_775.w);
  let x_777 : vec4<f32> = u_xlat3;
  let x_780 : vec4<f32> = x_33.x_SSAOParams;
  let x_782 : vec3<f32> = (vec3<f32>(x_777.x, x_777.y, x_777.z) * vec3<f32>(x_780.y, x_780.y, x_780.y));
  let x_783 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_782.x, x_782.y, x_782.z, x_783.w);
  let x_785 : vec4<f32> = u_xlat3;
  let x_790 : vec3<f32> = u_xlat8;
  let x_791 : vec3<f32> = ((vec3<f32>(x_785.x, x_785.y, x_785.z) * vec3<f32>(0.125f, 0.125f, 0.125f)) + x_790);
  let x_792 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_791.x, x_791.y, x_791.z, x_792.w);
  let x_794 : vec4<f32> = u_xlat3;
  let x_797 : vec4<f32> = x_33.x_CameraViewProjections[0i][1i];
  u_xlat18 = (vec2<f32>(x_794.y, x_794.y) * vec2<f32>(x_797.x, x_797.y));
  let x_801 : vec4<f32> = x_33.x_CameraViewProjections[0i][0i];
  let x_803 : vec4<f32> = u_xlat3;
  let x_806 : vec2<f32> = u_xlat18;
  u_xlat18 = ((vec2<f32>(x_801.x, x_801.y) * vec2<f32>(x_803.x, x_803.x)) + x_806);
  let x_809 : vec4<f32> = x_33.x_CameraViewProjections[0i][2i];
  let x_811 : vec4<f32> = u_xlat3;
  let x_814 : vec2<f32> = u_xlat18;
  u_xlat18 = ((vec2<f32>(x_809.x, x_809.y) * vec2<f32>(x_811.z, x_811.z)) + x_814);
  let x_816 : vec3<f32> = u_xlat4;
  let x_817 : vec4<f32> = u_xlat3;
  u_xlat3.x = dot(x_816, vec3<f32>(x_817.x, x_817.y, x_817.z));
  let x_822 : f32 = u_xlat3.x;
  u_xlat11.x = (1.0f / -(x_822));
  let x_826 : vec2<f32> = u_xlat18;
  let x_827 : vec3<f32> = u_xlat11;
  u_xlat18 = ((x_826 * vec2<f32>(x_827.x, x_827.x)) + vec2<f32>(1.0f, 1.0f));
  let x_831 : vec2<f32> = u_xlat18;
  u_xlat18 = (x_831 * vec2<f32>(0.5f, 0.5f));
  let x_833 : vec2<f32> = u_xlat18;
  u_xlat18 = clamp(x_833, vec2<f32>(0.0f, 0.0f), vec2<f32>(1.0f, 1.0f));
  let x_840 : vec2<f32> = u_xlat18;
  let x_842 : f32 = x_33.x_GlobalMipBias.x;
  let x_843 : vec4<f32> = textureSampleBias(x_CameraDepthTexture, sampler_CameraDepthTexture, x_840, x_842);
  u_xlat11.x = x_843.x;
  let x_848 : f32 = x_33.x_ZBufferParams.z;
  let x_850 : f32 = u_xlat11.x;
  let x_853 : f32 = x_33.x_ZBufferParams.w;
  u_xlat19 = ((x_848 * x_850) + x_853);
  let x_855 : f32 = u_xlat19;
  u_xlat19 = (1.0f / x_855);
  let x_857 : f32 = u_xlat19;
  let x_860 : f32 = u_xlat3.x;
  u_xlat3.x = (-(x_857) + -(x_860));
  let x_865 : f32 = u_xlat3.x;
  let x_868 : f32 = x_33.x_SSAOParams.y;
  u_xlatb3.x = (abs(x_865) < x_868);
  let x_872 : f32 = u_xlat11.x;
  u_xlatb3.y = (0.00001f < x_872);
  let x_876 : bool = u_xlatb3.x;
  u_xlat3.x = select(0.0f, 1.0f, x_876);
  let x_880 : bool = u_xlatb3.y;
  u_xlat3.y = select(0.0f, 1.0f, x_880);
  let x_884 : f32 = u_xlat3.y;
  let x_886 : f32 = u_xlat3.x;
  u_xlat3.x = (x_884 * x_886);
  let x_890 : f32 = u_xlat18.y;
  u_xlat26 = (-(x_890) + 1.0f);
  let x_893 : f32 = u_xlat19;
  let x_895 : f32 = x_33.x_ProjectionParams2.x;
  u_xlat11.x = (x_893 * x_895);
  let x_899 : vec4<f32> = x_33.x_CameraViewXExtent[0i];
  let x_901 : vec2<f32> = u_xlat18;
  let x_905 : vec4<f32> = x_33.x_CameraViewTopLeftCorner[0i];
  u_xlat5 = ((vec3<f32>(x_899.x, x_899.y, x_899.z) * vec3<f32>(x_901.x, x_901.x, x_901.x)) + vec3<f32>(x_905.x, x_905.y, x_905.z));
  let x_909 : vec4<f32> = x_33.x_CameraViewYExtent[0i];
  let x_911 : f32 = u_xlat26;
  let x_914 : vec3<f32> = u_xlat5;
  u_xlat5 = ((vec3<f32>(x_909.x, x_909.y, x_909.z) * vec3<f32>(x_911, x_911, x_911)) + x_914);
  let x_916 : vec3<f32> = u_xlat5;
  let x_917 : vec3<f32> = u_xlat11;
  let x_920 : vec3<f32> = u_xlat8;
  u_xlat11 = ((x_916 * vec3<f32>(x_917.x, x_917.x, x_917.x)) + -(x_920));
  let x_923 : vec3<f32> = u_xlat11;
  let x_924 : vec3<f32> = u_xlat1;
  u_xlat18.x = dot(x_923, x_924);
  let x_927 : f32 = u_xlat0;
  let x_931 : f32 = u_xlat18.x;
  u_xlat18.x = ((-(x_927) * 0.004f) + x_931);
  let x_935 : f32 = u_xlat18.x;
  u_xlat18.x = max(x_935, 0.0f);
  let x_938 : vec3<f32> = u_xlat11;
  let x_939 : vec3<f32> = u_xlat11;
  u_xlat26 = dot(x_938, x_939);
  let x_941 : f32 = u_xlat26;
  u_xlat26 = (x_941 + 0.0001f);
  let x_943 : f32 = u_xlat26;
  u_xlat26 = (1.0f / x_943);
  let x_945 : f32 = u_xlat26;
  let x_947 : f32 = u_xlat18.x;
  u_xlat18.x = (x_945 * x_947);
  let x_951 : f32 = u_xlat18.x;
  let x_953 : f32 = u_xlat3.x;
  let x_955 : f32 = u_xlat25;
  u_xlat25 = ((x_951 * x_953) + x_955);
  let x_957 : vec4<f32> = u_xlat2;
  let x_960 : vec4<f32> = x_33.x_SSAOBlueNoiseParams;
  u_xlat3 = ((vec4<f32>(x_957.x, x_957.y, x_957.x, x_957.y) * vec4<f32>(x_960.x, x_960.y, x_960.x, x_960.y)) + vec4<f32>(0.25f, 0.25f, 0.333333343f, 0.333333343f));
  let x_970 : vec4<f32> = u_xlat3;
  let x_973 : f32 = x_33.x_GlobalMipBias.x;
  let x_974 : vec4<f32> = textureSampleBias(x_BlueNoiseTexture, sampler_PointRepeat, vec2<f32>(x_970.x, x_970.y), x_973);
  u_xlat18.x = x_974.w;
  let x_977 : vec2<f32> = u_xlat18;
  u_xlat18 = (vec2<f32>(x_977.x, x_977.x) + vec2<f32>(0.56640625f, 0.015625f));
  let x_984 : f32 = u_xlat18.x;
  u_xlat18.x = fract(x_984);
  let x_988 : f32 = u_xlat18.x;
  u_xlat5.z = ((x_988 * 2.0f) + -1.0f);
  let x_993 : f32 = u_xlat18.y;
  u_xlat18.x = (x_993 * 628.31854248f);
  let x_997 : f32 = u_xlat5.z;
  let x_1000 : f32 = u_xlat5.z;
  u_xlat26 = ((-(x_997) * x_1000) + 1.0f);
  let x_1003 : f32 = u_xlat26;
  u_xlat26 = sqrt(x_1003);
  let x_1006 : f32 = u_xlat18.x;
  u_xlat3.x = sin(x_1006);
  let x_1010 : f32 = u_xlat18.x;
  u_xlat6 = cos(x_1010);
  let x_1012 : f32 = u_xlat26;
  let x_1013 : f32 = u_xlat6;
  u_xlat5.x = (x_1012 * x_1013);
  let x_1016 : f32 = u_xlat26;
  let x_1018 : f32 = u_xlat3.x;
  u_xlat5.y = (x_1016 * x_1018);
  let x_1021 : vec3<f32> = u_xlat1;
  let x_1022 : vec3<f32> = u_xlat5;
  u_xlat18.x = dot(x_1021, x_1022);
  let x_1026 : f32 = u_xlat18.x;
  u_xlatb18 = (x_1026 >= 0.0f);
  let x_1028 : bool = u_xlatb18;
  u_xlat18.x = select(-1.0f, 1.0f, x_1028);
  let x_1031 : vec2<f32> = u_xlat18;
  let x_1033 : vec3<f32> = u_xlat5;
  u_xlat5 = (vec3<f32>(x_1031.x, x_1031.x, x_1031.x) * x_1033);
  let x_1035 : vec3<f32> = u_xlat5;
  let x_1037 : vec4<f32> = x_33.x_SSAOParams;
  u_xlat5 = (x_1035 * vec3<f32>(x_1037.y, x_1037.y, x_1037.y));
  let x_1040 : vec3<f32> = u_xlat5;
  let x_1044 : vec3<f32> = u_xlat8;
  u_xlat5 = ((x_1040 * vec3<f32>(0.15625f, 0.15625f, 0.15625f)) + x_1044);
  let x_1046 : vec3<f32> = u_xlat5;
  let x_1049 : vec4<f32> = x_33.x_CameraViewProjections[0i][1i];
  u_xlat18 = (vec2<f32>(x_1046.y, x_1046.y) * vec2<f32>(x_1049.x, x_1049.y));
  let x_1053 : vec4<f32> = x_33.x_CameraViewProjections[0i][0i];
  let x_1055 : vec3<f32> = u_xlat5;
  let x_1058 : vec2<f32> = u_xlat18;
  u_xlat18 = ((vec2<f32>(x_1053.x, x_1053.y) * vec2<f32>(x_1055.x, x_1055.x)) + x_1058);
  let x_1061 : vec4<f32> = x_33.x_CameraViewProjections[0i][2i];
  let x_1063 : vec3<f32> = u_xlat5;
  let x_1066 : vec2<f32> = u_xlat18;
  u_xlat18 = ((vec2<f32>(x_1061.x, x_1061.y) * vec2<f32>(x_1063.z, x_1063.z)) + x_1066);
  let x_1068 : vec3<f32> = u_xlat4;
  let x_1069 : vec3<f32> = u_xlat5;
  u_xlat3.x = dot(x_1068, x_1069);
  let x_1073 : f32 = u_xlat3.x;
  u_xlat11.x = (1.0f / -(x_1073));
  let x_1077 : vec2<f32> = u_xlat18;
  let x_1078 : vec3<f32> = u_xlat11;
  u_xlat18 = ((x_1077 * vec2<f32>(x_1078.x, x_1078.x)) + vec2<f32>(1.0f, 1.0f));
  let x_1082 : vec2<f32> = u_xlat18;
  u_xlat18 = (x_1082 * vec2<f32>(0.5f, 0.5f));
  let x_1084 : vec2<f32> = u_xlat18;
  u_xlat18 = clamp(x_1084, vec2<f32>(0.0f, 0.0f), vec2<f32>(1.0f, 1.0f));
  let x_1091 : vec2<f32> = u_xlat18;
  let x_1093 : f32 = x_33.x_GlobalMipBias.x;
  let x_1094 : vec4<f32> = textureSampleBias(x_CameraDepthTexture, sampler_CameraDepthTexture, x_1091, x_1093);
  u_xlat11.x = x_1094.x;
  let x_1098 : f32 = x_33.x_ZBufferParams.z;
  let x_1100 : f32 = u_xlat11.x;
  let x_1103 : f32 = x_33.x_ZBufferParams.w;
  u_xlat28 = ((x_1098 * x_1100) + x_1103);
  let x_1105 : f32 = u_xlat28;
  u_xlat28 = (1.0f / x_1105);
  let x_1108 : f32 = u_xlat3.x;
  let x_1110 : f32 = u_xlat28;
  u_xlat3.x = (-(x_1108) + -(x_1110));
  let x_1115 : f32 = u_xlat3.x;
  let x_1118 : f32 = x_33.x_SSAOParams.y;
  u_xlatb3.x = (abs(x_1115) < x_1118);
  let x_1122 : f32 = u_xlat11.x;
  u_xlatb3.y = (0.00001f < x_1122);
  let x_1126 : bool = u_xlatb3.x;
  u_xlat3.x = select(0.0f, 1.0f, x_1126);
  let x_1130 : bool = u_xlatb3.y;
  u_xlat3.y = select(0.0f, 1.0f, x_1130);
  let x_1134 : f32 = u_xlat3.y;
  let x_1136 : f32 = u_xlat3.x;
  u_xlat3.x = (x_1134 * x_1136);
  let x_1140 : f32 = u_xlat18.y;
  u_xlat26 = (-(x_1140) + 1.0f);
  let x_1143 : f32 = u_xlat28;
  let x_1145 : f32 = x_33.x_ProjectionParams2.x;
  u_xlat11.x = (x_1143 * x_1145);
  let x_1149 : vec4<f32> = x_33.x_CameraViewXExtent[0i];
  let x_1151 : vec2<f32> = u_xlat18;
  let x_1155 : vec4<f32> = x_33.x_CameraViewTopLeftCorner[0i];
  u_xlat5 = ((vec3<f32>(x_1149.x, x_1149.y, x_1149.z) * vec3<f32>(x_1151.x, x_1151.x, x_1151.x)) + vec3<f32>(x_1155.x, x_1155.y, x_1155.z));
  let x_1159 : vec4<f32> = x_33.x_CameraViewYExtent[0i];
  let x_1161 : f32 = u_xlat26;
  let x_1164 : vec3<f32> = u_xlat5;
  u_xlat5 = ((vec3<f32>(x_1159.x, x_1159.y, x_1159.z) * vec3<f32>(x_1161, x_1161, x_1161)) + x_1164);
  let x_1166 : vec3<f32> = u_xlat5;
  let x_1167 : vec3<f32> = u_xlat11;
  let x_1170 : vec3<f32> = u_xlat8;
  u_xlat5 = ((x_1166 * vec3<f32>(x_1167.x, x_1167.x, x_1167.x)) + -(x_1170));
  let x_1173 : vec3<f32> = u_xlat5;
  let x_1174 : vec3<f32> = u_xlat1;
  u_xlat18.x = dot(x_1173, x_1174);
  let x_1177 : f32 = u_xlat0;
  let x_1181 : f32 = u_xlat18.x;
  u_xlat18.x = ((-(x_1177) * 0.004f) + x_1181);
  let x_1185 : f32 = u_xlat18.x;
  u_xlat18.x = max(x_1185, 0.0f);
  let x_1188 : vec3<f32> = u_xlat5;
  let x_1189 : vec3<f32> = u_xlat5;
  u_xlat26 = dot(x_1188, x_1189);
  let x_1191 : f32 = u_xlat26;
  u_xlat26 = (x_1191 + 0.0001f);
  let x_1193 : f32 = u_xlat26;
  u_xlat26 = (1.0f / x_1193);
  let x_1195 : f32 = u_xlat26;
  let x_1197 : f32 = u_xlat18.x;
  u_xlat18.x = (x_1195 * x_1197);
  let x_1201 : f32 = u_xlat18.x;
  let x_1203 : f32 = u_xlat3.x;
  let x_1205 : f32 = u_xlat25;
  u_xlat25 = ((x_1201 * x_1203) + x_1205);
  let x_1210 : vec4<f32> = u_xlat3;
  let x_1213 : f32 = x_33.x_GlobalMipBias.x;
  let x_1214 : vec4<f32> = textureSampleBias(x_BlueNoiseTexture, sampler_PointRepeat, vec2<f32>(x_1210.z, x_1210.w), x_1213);
  u_xlat18.x = x_1214.w;
  let x_1218 : f32 = u_xlat18.x;
  u_xlat26 = (x_1218 + 0.984375f);
  let x_1221 : f32 = u_xlat26;
  u_xlat26 = fract(x_1221);
  let x_1223 : f32 = u_xlat26;
  u_xlat3.z = ((x_1223 * 2.0f) + -1.0f);
  let x_1228 : f32 = u_xlat18.x;
  u_xlat18.x = (x_1228 * 628.31854248f);
  let x_1232 : f32 = u_xlat3.z;
  let x_1235 : f32 = u_xlat3.z;
  u_xlat26 = ((-(x_1232) * x_1235) + 1.0f);
  let x_1238 : f32 = u_xlat26;
  u_xlat26 = sqrt(x_1238);
  let x_1241 : f32 = u_xlat18.x;
  u_xlat5.x = sin(x_1241);
  let x_1245 : f32 = u_xlat18.x;
  u_xlat6 = cos(x_1245);
  let x_1247 : f32 = u_xlat26;
  let x_1248 : f32 = u_xlat6;
  u_xlat3.x = (x_1247 * x_1248);
  let x_1251 : f32 = u_xlat26;
  let x_1253 : f32 = u_xlat5.x;
  u_xlat3.y = (x_1251 * x_1253);
  let x_1256 : vec3<f32> = u_xlat1;
  let x_1257 : vec4<f32> = u_xlat3;
  u_xlat18.x = dot(x_1256, vec3<f32>(x_1257.x, x_1257.y, x_1257.z));
  let x_1262 : f32 = u_xlat18.x;
  u_xlatb18 = (x_1262 >= 0.0f);
  let x_1264 : bool = u_xlatb18;
  u_xlat18.x = select(-1.0f, 1.0f, x_1264);
  let x_1267 : vec2<f32> = u_xlat18;
  let x_1269 : vec4<f32> = u_xlat3;
  let x_1271 : vec3<f32> = (vec3<f32>(x_1267.x, x_1267.x, x_1267.x) * vec3<f32>(x_1269.x, x_1269.y, x_1269.z));
  let x_1272 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_1271.x, x_1271.y, x_1271.z, x_1272.w);
  let x_1274 : vec4<f32> = u_xlat3;
  let x_1277 : vec4<f32> = x_33.x_SSAOParams;
  let x_1279 : vec3<f32> = (vec3<f32>(x_1274.x, x_1274.y, x_1274.z) * vec3<f32>(x_1277.y, x_1277.y, x_1277.y));
  let x_1280 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_1279.x, x_1279.y, x_1279.z, x_1280.w);
  let x_1282 : vec4<f32> = u_xlat3;
  let x_1287 : vec3<f32> = u_xlat8;
  let x_1288 : vec3<f32> = ((vec3<f32>(x_1282.x, x_1282.y, x_1282.z) * vec3<f32>(0.200000003f, 0.200000003f, 0.200000003f)) + x_1287);
  let x_1289 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_1288.x, x_1288.y, x_1288.z, x_1289.w);
  let x_1291 : vec4<f32> = u_xlat3;
  let x_1294 : vec4<f32> = x_33.x_CameraViewProjections[0i][1i];
  u_xlat18 = (vec2<f32>(x_1291.y, x_1291.y) * vec2<f32>(x_1294.x, x_1294.y));
  let x_1298 : vec4<f32> = x_33.x_CameraViewProjections[0i][0i];
  let x_1300 : vec4<f32> = u_xlat3;
  let x_1303 : vec2<f32> = u_xlat18;
  u_xlat18 = ((vec2<f32>(x_1298.x, x_1298.y) * vec2<f32>(x_1300.x, x_1300.x)) + x_1303);
  let x_1306 : vec4<f32> = x_33.x_CameraViewProjections[0i][2i];
  let x_1308 : vec4<f32> = u_xlat3;
  let x_1311 : vec2<f32> = u_xlat18;
  u_xlat18 = ((vec2<f32>(x_1306.x, x_1306.y) * vec2<f32>(x_1308.z, x_1308.z)) + x_1311);
  let x_1313 : vec3<f32> = u_xlat4;
  let x_1314 : vec4<f32> = u_xlat3;
  u_xlat3.x = dot(x_1313, vec3<f32>(x_1314.x, x_1314.y, x_1314.z));
  let x_1319 : f32 = u_xlat3.x;
  u_xlat11.x = (1.0f / -(x_1319));
  let x_1323 : vec2<f32> = u_xlat18;
  let x_1324 : vec3<f32> = u_xlat11;
  u_xlat18 = ((x_1323 * vec2<f32>(x_1324.x, x_1324.x)) + vec2<f32>(1.0f, 1.0f));
  let x_1328 : vec2<f32> = u_xlat18;
  u_xlat18 = (x_1328 * vec2<f32>(0.5f, 0.5f));
  let x_1330 : vec2<f32> = u_xlat18;
  u_xlat18 = clamp(x_1330, vec2<f32>(0.0f, 0.0f), vec2<f32>(1.0f, 1.0f));
  let x_1337 : vec2<f32> = u_xlat18;
  let x_1339 : f32 = x_33.x_GlobalMipBias.x;
  let x_1340 : vec4<f32> = textureSampleBias(x_CameraDepthTexture, sampler_CameraDepthTexture, x_1337, x_1339);
  u_xlat11.x = x_1340.x;
  let x_1344 : f32 = x_33.x_ZBufferParams.z;
  let x_1346 : f32 = u_xlat11.x;
  let x_1349 : f32 = x_33.x_ZBufferParams.w;
  u_xlat19 = ((x_1344 * x_1346) + x_1349);
  let x_1351 : f32 = u_xlat19;
  u_xlat19 = (1.0f / x_1351);
  let x_1353 : f32 = u_xlat19;
  let x_1356 : f32 = u_xlat3.x;
  u_xlat3.x = (-(x_1353) + -(x_1356));
  let x_1361 : f32 = u_xlat3.x;
  let x_1364 : f32 = x_33.x_SSAOParams.y;
  u_xlatb3.x = (abs(x_1361) < x_1364);
  let x_1368 : f32 = u_xlat11.x;
  u_xlatb3.y = (0.00001f < x_1368);
  let x_1372 : bool = u_xlatb3.x;
  u_xlat3.x = select(0.0f, 1.0f, x_1372);
  let x_1376 : bool = u_xlatb3.y;
  u_xlat3.y = select(0.0f, 1.0f, x_1376);
  let x_1380 : f32 = u_xlat3.y;
  let x_1382 : f32 = u_xlat3.x;
  u_xlat3.x = (x_1380 * x_1382);
  let x_1386 : f32 = u_xlat18.y;
  u_xlat26 = (-(x_1386) + 1.0f);
  let x_1389 : f32 = u_xlat19;
  let x_1391 : f32 = x_33.x_ProjectionParams2.x;
  u_xlat11.x = (x_1389 * x_1391);
  let x_1395 : vec4<f32> = x_33.x_CameraViewXExtent[0i];
  let x_1397 : vec2<f32> = u_xlat18;
  let x_1401 : vec4<f32> = x_33.x_CameraViewTopLeftCorner[0i];
  u_xlat5 = ((vec3<f32>(x_1395.x, x_1395.y, x_1395.z) * vec3<f32>(x_1397.x, x_1397.x, x_1397.x)) + vec3<f32>(x_1401.x, x_1401.y, x_1401.z));
  let x_1405 : vec4<f32> = x_33.x_CameraViewYExtent[0i];
  let x_1407 : f32 = u_xlat26;
  let x_1410 : vec3<f32> = u_xlat5;
  u_xlat5 = ((vec3<f32>(x_1405.x, x_1405.y, x_1405.z) * vec3<f32>(x_1407, x_1407, x_1407)) + x_1410);
  let x_1412 : vec3<f32> = u_xlat5;
  let x_1413 : vec3<f32> = u_xlat11;
  let x_1416 : vec3<f32> = u_xlat8;
  u_xlat11 = ((x_1412 * vec3<f32>(x_1413.x, x_1413.x, x_1413.x)) + -(x_1416));
  let x_1419 : vec3<f32> = u_xlat11;
  let x_1420 : vec3<f32> = u_xlat1;
  u_xlat18.x = dot(x_1419, x_1420);
  let x_1423 : f32 = u_xlat0;
  let x_1427 : f32 = u_xlat18.x;
  u_xlat18.x = ((-(x_1423) * 0.004f) + x_1427);
  let x_1431 : f32 = u_xlat18.x;
  u_xlat18.x = max(x_1431, 0.0f);
  let x_1434 : vec3<f32> = u_xlat11;
  let x_1435 : vec3<f32> = u_xlat11;
  u_xlat26 = dot(x_1434, x_1435);
  let x_1437 : f32 = u_xlat26;
  u_xlat26 = (x_1437 + 0.0001f);
  let x_1439 : f32 = u_xlat26;
  u_xlat26 = (1.0f / x_1439);
  let x_1441 : f32 = u_xlat26;
  let x_1443 : f32 = u_xlat18.x;
  u_xlat18.x = (x_1441 * x_1443);
  let x_1447 : f32 = u_xlat18.x;
  let x_1449 : f32 = u_xlat3.x;
  let x_1451 : f32 = u_xlat25;
  u_xlat25 = ((x_1447 * x_1449) + x_1451);
  let x_1453 : vec4<f32> = u_xlat2;
  let x_1456 : vec4<f32> = x_33.x_SSAOBlueNoiseParams;
  u_xlat3 = ((vec4<f32>(x_1453.x, x_1453.y, x_1453.x, x_1453.y) * vec4<f32>(x_1456.x, x_1456.y, x_1456.x, x_1456.y)) + vec4<f32>(0.416666687f, 0.416666687f, 0.5f, 0.5f));
  let x_1465 : vec4<f32> = u_xlat3;
  let x_1468 : f32 = x_33.x_GlobalMipBias.x;
  let x_1469 : vec4<f32> = textureSampleBias(x_BlueNoiseTexture, sampler_PointRepeat, vec2<f32>(x_1465.x, x_1465.y), x_1468);
  u_xlat18.x = x_1469.w;
  let x_1472 : vec2<f32> = u_xlat18;
  u_xlat18 = (vec2<f32>(x_1472.x, x_1472.x) + vec2<f32>(0.07421875f, 0.10546875f));
  let x_1479 : f32 = u_xlat18.x;
  u_xlat18.x = fract(x_1479);
  let x_1483 : f32 = u_xlat18.x;
  u_xlat5.z = ((x_1483 * 2.0f) + -1.0f);
  let x_1488 : f32 = u_xlat18.y;
  u_xlat18.x = (x_1488 * 628.31854248f);
  let x_1492 : f32 = u_xlat5.z;
  let x_1495 : f32 = u_xlat5.z;
  u_xlat26 = ((-(x_1492) * x_1495) + 1.0f);
  let x_1498 : f32 = u_xlat26;
  u_xlat26 = sqrt(x_1498);
  let x_1501 : f32 = u_xlat18.x;
  u_xlat3.x = sin(x_1501);
  let x_1505 : f32 = u_xlat18.x;
  u_xlat6 = cos(x_1505);
  let x_1507 : f32 = u_xlat26;
  let x_1508 : f32 = u_xlat6;
  u_xlat5.x = (x_1507 * x_1508);
  let x_1511 : f32 = u_xlat26;
  let x_1513 : f32 = u_xlat3.x;
  u_xlat5.y = (x_1511 * x_1513);
  let x_1516 : vec3<f32> = u_xlat1;
  let x_1517 : vec3<f32> = u_xlat5;
  u_xlat18.x = dot(x_1516, x_1517);
  let x_1521 : f32 = u_xlat18.x;
  u_xlatb18 = (x_1521 >= 0.0f);
  let x_1523 : bool = u_xlatb18;
  u_xlat18.x = select(-1.0f, 1.0f, x_1523);
  let x_1526 : vec2<f32> = u_xlat18;
  let x_1528 : vec3<f32> = u_xlat5;
  u_xlat5 = (vec3<f32>(x_1526.x, x_1526.x, x_1526.x) * x_1528);
  let x_1530 : vec3<f32> = u_xlat5;
  let x_1532 : vec4<f32> = x_33.x_SSAOParams;
  u_xlat5 = (x_1530 * vec3<f32>(x_1532.y, x_1532.y, x_1532.y));
  let x_1535 : vec3<f32> = u_xlat5;
  let x_1539 : vec3<f32> = u_xlat8;
  u_xlat5 = ((x_1535 * vec3<f32>(0.256250024f, 0.256250024f, 0.256250024f)) + x_1539);
  let x_1541 : vec3<f32> = u_xlat5;
  let x_1544 : vec4<f32> = x_33.x_CameraViewProjections[0i][1i];
  u_xlat18 = (vec2<f32>(x_1541.y, x_1541.y) * vec2<f32>(x_1544.x, x_1544.y));
  let x_1548 : vec4<f32> = x_33.x_CameraViewProjections[0i][0i];
  let x_1550 : vec3<f32> = u_xlat5;
  let x_1553 : vec2<f32> = u_xlat18;
  u_xlat18 = ((vec2<f32>(x_1548.x, x_1548.y) * vec2<f32>(x_1550.x, x_1550.x)) + x_1553);
  let x_1556 : vec4<f32> = x_33.x_CameraViewProjections[0i][2i];
  let x_1558 : vec3<f32> = u_xlat5;
  let x_1561 : vec2<f32> = u_xlat18;
  u_xlat18 = ((vec2<f32>(x_1556.x, x_1556.y) * vec2<f32>(x_1558.z, x_1558.z)) + x_1561);
  let x_1563 : vec3<f32> = u_xlat4;
  let x_1564 : vec3<f32> = u_xlat5;
  u_xlat3.x = dot(x_1563, x_1564);
  let x_1568 : f32 = u_xlat3.x;
  u_xlat11.x = (1.0f / -(x_1568));
  let x_1572 : vec2<f32> = u_xlat18;
  let x_1573 : vec3<f32> = u_xlat11;
  u_xlat18 = ((x_1572 * vec2<f32>(x_1573.x, x_1573.x)) + vec2<f32>(1.0f, 1.0f));
  let x_1577 : vec2<f32> = u_xlat18;
  u_xlat18 = (x_1577 * vec2<f32>(0.5f, 0.5f));
  let x_1579 : vec2<f32> = u_xlat18;
  u_xlat18 = clamp(x_1579, vec2<f32>(0.0f, 0.0f), vec2<f32>(1.0f, 1.0f));
  let x_1586 : vec2<f32> = u_xlat18;
  let x_1588 : f32 = x_33.x_GlobalMipBias.x;
  let x_1589 : vec4<f32> = textureSampleBias(x_CameraDepthTexture, sampler_CameraDepthTexture, x_1586, x_1588);
  u_xlat11.x = x_1589.x;
  let x_1593 : f32 = x_33.x_ZBufferParams.z;
  let x_1595 : f32 = u_xlat11.x;
  let x_1598 : f32 = x_33.x_ZBufferParams.w;
  u_xlat28 = ((x_1593 * x_1595) + x_1598);
  let x_1600 : f32 = u_xlat28;
  u_xlat28 = (1.0f / x_1600);
  let x_1603 : f32 = u_xlat3.x;
  let x_1605 : f32 = u_xlat28;
  u_xlat3.x = (-(x_1603) + -(x_1605));
  let x_1610 : f32 = u_xlat3.x;
  let x_1613 : f32 = x_33.x_SSAOParams.y;
  u_xlatb3.x = (abs(x_1610) < x_1613);
  let x_1617 : f32 = u_xlat11.x;
  u_xlatb3.y = (0.00001f < x_1617);
  let x_1621 : bool = u_xlatb3.x;
  u_xlat3.x = select(0.0f, 1.0f, x_1621);
  let x_1625 : bool = u_xlatb3.y;
  u_xlat3.y = select(0.0f, 1.0f, x_1625);
  let x_1629 : f32 = u_xlat3.y;
  let x_1631 : f32 = u_xlat3.x;
  u_xlat3.x = (x_1629 * x_1631);
  let x_1635 : f32 = u_xlat18.y;
  u_xlat26 = (-(x_1635) + 1.0f);
  let x_1638 : f32 = u_xlat28;
  let x_1640 : f32 = x_33.x_ProjectionParams2.x;
  u_xlat11.x = (x_1638 * x_1640);
  let x_1644 : vec4<f32> = x_33.x_CameraViewXExtent[0i];
  let x_1646 : vec2<f32> = u_xlat18;
  let x_1650 : vec4<f32> = x_33.x_CameraViewTopLeftCorner[0i];
  u_xlat5 = ((vec3<f32>(x_1644.x, x_1644.y, x_1644.z) * vec3<f32>(x_1646.x, x_1646.x, x_1646.x)) + vec3<f32>(x_1650.x, x_1650.y, x_1650.z));
  let x_1654 : vec4<f32> = x_33.x_CameraViewYExtent[0i];
  let x_1656 : f32 = u_xlat26;
  let x_1659 : vec3<f32> = u_xlat5;
  u_xlat5 = ((vec3<f32>(x_1654.x, x_1654.y, x_1654.z) * vec3<f32>(x_1656, x_1656, x_1656)) + x_1659);
  let x_1661 : vec3<f32> = u_xlat5;
  let x_1662 : vec3<f32> = u_xlat11;
  let x_1665 : vec3<f32> = u_xlat8;
  u_xlat5 = ((x_1661 * vec3<f32>(x_1662.x, x_1662.x, x_1662.x)) + -(x_1665));
  let x_1668 : vec3<f32> = u_xlat5;
  let x_1669 : vec3<f32> = u_xlat1;
  u_xlat18.x = dot(x_1668, x_1669);
  let x_1672 : f32 = u_xlat0;
  let x_1676 : f32 = u_xlat18.x;
  u_xlat18.x = ((-(x_1672) * 0.004f) + x_1676);
  let x_1680 : f32 = u_xlat18.x;
  u_xlat18.x = max(x_1680, 0.0f);
  let x_1683 : vec3<f32> = u_xlat5;
  let x_1684 : vec3<f32> = u_xlat5;
  u_xlat26 = dot(x_1683, x_1684);
  let x_1686 : f32 = u_xlat26;
  u_xlat26 = (x_1686 + 0.0001f);
  let x_1688 : f32 = u_xlat26;
  u_xlat26 = (1.0f / x_1688);
  let x_1690 : f32 = u_xlat26;
  let x_1692 : f32 = u_xlat18.x;
  u_xlat18.x = (x_1690 * x_1692);
  let x_1696 : f32 = u_xlat18.x;
  let x_1698 : f32 = u_xlat3.x;
  let x_1700 : f32 = u_xlat25;
  u_xlat25 = ((x_1696 * x_1698) + x_1700);
  let x_1705 : vec4<f32> = u_xlat3;
  let x_1708 : f32 = x_33.x_GlobalMipBias.x;
  let x_1709 : vec4<f32> = textureSampleBias(x_BlueNoiseTexture, sampler_PointRepeat, vec2<f32>(x_1705.z, x_1705.w), x_1708);
  u_xlat18.x = x_1709.w;
  let x_1712 : vec2<f32> = u_xlat18;
  u_xlat18 = (vec2<f32>(x_1712.x, x_1712.x) + vec2<f32>(0.23828125f, 0.640625f));
  let x_1719 : f32 = u_xlat18.x;
  u_xlat18.x = fract(x_1719);
  let x_1723 : f32 = u_xlat18.x;
  u_xlat3.z = ((x_1723 * 2.0f) + -1.0f);
  let x_1728 : f32 = u_xlat18.y;
  u_xlat18.x = (x_1728 * 628.31854248f);
  let x_1732 : f32 = u_xlat3.z;
  let x_1735 : f32 = u_xlat3.z;
  u_xlat26 = ((-(x_1732) * x_1735) + 1.0f);
  let x_1738 : f32 = u_xlat26;
  u_xlat26 = sqrt(x_1738);
  let x_1741 : f32 = u_xlat18.x;
  u_xlat5.x = sin(x_1741);
  let x_1745 : f32 = u_xlat18.x;
  u_xlat6 = cos(x_1745);
  let x_1747 : f32 = u_xlat26;
  let x_1748 : f32 = u_xlat6;
  u_xlat3.x = (x_1747 * x_1748);
  let x_1751 : f32 = u_xlat26;
  let x_1753 : f32 = u_xlat5.x;
  u_xlat3.y = (x_1751 * x_1753);
  let x_1756 : vec3<f32> = u_xlat1;
  let x_1757 : vec4<f32> = u_xlat3;
  u_xlat18.x = dot(x_1756, vec3<f32>(x_1757.x, x_1757.y, x_1757.z));
  let x_1762 : f32 = u_xlat18.x;
  u_xlatb18 = (x_1762 >= 0.0f);
  let x_1764 : bool = u_xlatb18;
  u_xlat18.x = select(-1.0f, 1.0f, x_1764);
  let x_1767 : vec2<f32> = u_xlat18;
  let x_1769 : vec4<f32> = u_xlat3;
  let x_1771 : vec3<f32> = (vec3<f32>(x_1767.x, x_1767.x, x_1767.x) * vec3<f32>(x_1769.x, x_1769.y, x_1769.z));
  let x_1772 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_1771.x, x_1771.y, x_1771.z, x_1772.w);
  let x_1774 : vec4<f32> = u_xlat3;
  let x_1777 : vec4<f32> = x_33.x_SSAOParams;
  let x_1779 : vec3<f32> = (vec3<f32>(x_1774.x, x_1774.y, x_1774.z) * vec3<f32>(x_1777.y, x_1777.y, x_1777.y));
  let x_1780 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_1779.x, x_1779.y, x_1779.z, x_1780.w);
  let x_1782 : vec4<f32> = u_xlat3;
  let x_1787 : vec3<f32> = u_xlat8;
  let x_1788 : vec3<f32> = ((vec3<f32>(x_1782.x, x_1782.y, x_1782.z) * vec3<f32>(0.324999988f, 0.324999988f, 0.324999988f)) + x_1787);
  let x_1789 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_1788.x, x_1788.y, x_1788.z, x_1789.w);
  let x_1791 : vec4<f32> = u_xlat3;
  let x_1794 : vec4<f32> = x_33.x_CameraViewProjections[0i][1i];
  u_xlat18 = (vec2<f32>(x_1791.y, x_1791.y) * vec2<f32>(x_1794.x, x_1794.y));
  let x_1798 : vec4<f32> = x_33.x_CameraViewProjections[0i][0i];
  let x_1800 : vec4<f32> = u_xlat3;
  let x_1803 : vec2<f32> = u_xlat18;
  u_xlat18 = ((vec2<f32>(x_1798.x, x_1798.y) * vec2<f32>(x_1800.x, x_1800.x)) + x_1803);
  let x_1806 : vec4<f32> = x_33.x_CameraViewProjections[0i][2i];
  let x_1808 : vec4<f32> = u_xlat3;
  let x_1811 : vec2<f32> = u_xlat18;
  u_xlat18 = ((vec2<f32>(x_1806.x, x_1806.y) * vec2<f32>(x_1808.z, x_1808.z)) + x_1811);
  let x_1813 : vec3<f32> = u_xlat4;
  let x_1814 : vec4<f32> = u_xlat3;
  u_xlat3.x = dot(x_1813, vec3<f32>(x_1814.x, x_1814.y, x_1814.z));
  let x_1819 : f32 = u_xlat3.x;
  u_xlat11.x = (1.0f / -(x_1819));
  let x_1823 : vec2<f32> = u_xlat18;
  let x_1824 : vec3<f32> = u_xlat11;
  u_xlat18 = ((x_1823 * vec2<f32>(x_1824.x, x_1824.x)) + vec2<f32>(1.0f, 1.0f));
  let x_1828 : vec2<f32> = u_xlat18;
  u_xlat18 = (x_1828 * vec2<f32>(0.5f, 0.5f));
  let x_1830 : vec2<f32> = u_xlat18;
  u_xlat18 = clamp(x_1830, vec2<f32>(0.0f, 0.0f), vec2<f32>(1.0f, 1.0f));
  let x_1837 : vec2<f32> = u_xlat18;
  let x_1839 : f32 = x_33.x_GlobalMipBias.x;
  let x_1840 : vec4<f32> = textureSampleBias(x_CameraDepthTexture, sampler_CameraDepthTexture, x_1837, x_1839);
  u_xlat11.x = x_1840.x;
  let x_1844 : f32 = x_33.x_ZBufferParams.z;
  let x_1846 : f32 = u_xlat11.x;
  let x_1849 : f32 = x_33.x_ZBufferParams.w;
  u_xlat19 = ((x_1844 * x_1846) + x_1849);
  let x_1851 : f32 = u_xlat19;
  u_xlat19 = (1.0f / x_1851);
  let x_1853 : f32 = u_xlat19;
  let x_1856 : f32 = u_xlat3.x;
  u_xlat3.x = (-(x_1853) + -(x_1856));
  let x_1861 : f32 = u_xlat3.x;
  let x_1864 : f32 = x_33.x_SSAOParams.y;
  u_xlatb3.x = (abs(x_1861) < x_1864);
  let x_1868 : f32 = u_xlat11.x;
  u_xlatb3.y = (0.00001f < x_1868);
  let x_1872 : bool = u_xlatb3.x;
  u_xlat3.x = select(0.0f, 1.0f, x_1872);
  let x_1876 : bool = u_xlatb3.y;
  u_xlat3.y = select(0.0f, 1.0f, x_1876);
  let x_1880 : f32 = u_xlat3.y;
  let x_1882 : f32 = u_xlat3.x;
  u_xlat3.x = (x_1880 * x_1882);
  let x_1886 : f32 = u_xlat18.y;
  u_xlat26 = (-(x_1886) + 1.0f);
  let x_1889 : f32 = u_xlat19;
  let x_1891 : f32 = x_33.x_ProjectionParams2.x;
  u_xlat11.x = (x_1889 * x_1891);
  let x_1895 : vec4<f32> = x_33.x_CameraViewXExtent[0i];
  let x_1897 : vec2<f32> = u_xlat18;
  let x_1901 : vec4<f32> = x_33.x_CameraViewTopLeftCorner[0i];
  u_xlat5 = ((vec3<f32>(x_1895.x, x_1895.y, x_1895.z) * vec3<f32>(x_1897.x, x_1897.x, x_1897.x)) + vec3<f32>(x_1901.x, x_1901.y, x_1901.z));
  let x_1905 : vec4<f32> = x_33.x_CameraViewYExtent[0i];
  let x_1907 : f32 = u_xlat26;
  let x_1910 : vec3<f32> = u_xlat5;
  u_xlat5 = ((vec3<f32>(x_1905.x, x_1905.y, x_1905.z) * vec3<f32>(x_1907, x_1907, x_1907)) + x_1910);
  let x_1912 : vec3<f32> = u_xlat5;
  let x_1913 : vec3<f32> = u_xlat11;
  let x_1916 : vec3<f32> = u_xlat8;
  u_xlat11 = ((x_1912 * vec3<f32>(x_1913.x, x_1913.x, x_1913.x)) + -(x_1916));
  let x_1919 : vec3<f32> = u_xlat11;
  let x_1920 : vec3<f32> = u_xlat1;
  u_xlat18.x = dot(x_1919, x_1920);
  let x_1923 : f32 = u_xlat0;
  let x_1927 : f32 = u_xlat18.x;
  u_xlat18.x = ((-(x_1923) * 0.004f) + x_1927);
  let x_1931 : f32 = u_xlat18.x;
  u_xlat18.x = max(x_1931, 0.0f);
  let x_1934 : vec3<f32> = u_xlat11;
  let x_1935 : vec3<f32> = u_xlat11;
  u_xlat26 = dot(x_1934, x_1935);
  let x_1937 : f32 = u_xlat26;
  u_xlat26 = (x_1937 + 0.0001f);
  let x_1939 : f32 = u_xlat26;
  u_xlat26 = (1.0f / x_1939);
  let x_1941 : f32 = u_xlat26;
  let x_1943 : f32 = u_xlat18.x;
  u_xlat18.x = (x_1941 * x_1943);
  let x_1947 : f32 = u_xlat18.x;
  let x_1949 : f32 = u_xlat3.x;
  let x_1951 : f32 = u_xlat25;
  u_xlat25 = ((x_1947 * x_1949) + x_1951);
  let x_1953 : vec4<f32> = u_xlat2;
  let x_1956 : vec4<f32> = x_33.x_SSAOBlueNoiseParams;
  u_xlat3 = ((vec4<f32>(x_1953.x, x_1953.y, x_1953.x, x_1953.y) * vec4<f32>(x_1956.x, x_1956.y, x_1956.x, x_1956.y)) + vec4<f32>(0.583333373f, 0.583333373f, 0.666666687f, 0.666666687f));
  let x_1966 : vec4<f32> = u_xlat3;
  let x_1969 : f32 = x_33.x_GlobalMipBias.x;
  let x_1970 : vec4<f32> = textureSampleBias(x_BlueNoiseTexture, sampler_PointRepeat, vec2<f32>(x_1966.x, x_1966.y), x_1969);
  u_xlat18.x = x_1970.w;
  let x_1973 : vec2<f32> = u_xlat18;
  u_xlat18 = (vec2<f32>(x_1973.x, x_1973.x) + vec2<f32>(0.640625f, 0.74609375f));
  let x_1979 : f32 = u_xlat18.x;
  u_xlat18.x = fract(x_1979);
  let x_1983 : f32 = u_xlat18.x;
  u_xlat5.z = ((x_1983 * 2.0f) + -1.0f);
  let x_1988 : f32 = u_xlat18.y;
  u_xlat18.x = (x_1988 * 628.31854248f);
  let x_1992 : f32 = u_xlat5.z;
  let x_1995 : f32 = u_xlat5.z;
  u_xlat26 = ((-(x_1992) * x_1995) + 1.0f);
  let x_1998 : f32 = u_xlat26;
  u_xlat26 = sqrt(x_1998);
  let x_2001 : f32 = u_xlat18.x;
  u_xlat3.x = sin(x_2001);
  let x_2005 : f32 = u_xlat18.x;
  u_xlat6 = cos(x_2005);
  let x_2007 : f32 = u_xlat26;
  let x_2008 : f32 = u_xlat6;
  u_xlat5.x = (x_2007 * x_2008);
  let x_2011 : f32 = u_xlat26;
  let x_2013 : f32 = u_xlat3.x;
  u_xlat5.y = (x_2011 * x_2013);
  let x_2016 : vec3<f32> = u_xlat1;
  let x_2017 : vec3<f32> = u_xlat5;
  u_xlat18.x = dot(x_2016, x_2017);
  let x_2021 : f32 = u_xlat18.x;
  u_xlatb18 = (x_2021 >= 0.0f);
  let x_2023 : bool = u_xlatb18;
  u_xlat18.x = select(-1.0f, 1.0f, x_2023);
  let x_2026 : vec2<f32> = u_xlat18;
  let x_2028 : vec3<f32> = u_xlat5;
  u_xlat5 = (vec3<f32>(x_2026.x, x_2026.x, x_2026.x) * x_2028);
  let x_2030 : vec3<f32> = u_xlat5;
  let x_2032 : vec4<f32> = x_33.x_SSAOParams;
  u_xlat5 = (x_2030 * vec3<f32>(x_2032.y, x_2032.y, x_2032.y));
  let x_2035 : vec3<f32> = u_xlat5;
  let x_2039 : vec3<f32> = u_xlat8;
  u_xlat5 = ((x_2035 * vec3<f32>(0.40625003f, 0.40625003f, 0.40625003f)) + x_2039);
  let x_2041 : vec3<f32> = u_xlat5;
  let x_2044 : vec4<f32> = x_33.x_CameraViewProjections[0i][1i];
  u_xlat18 = (vec2<f32>(x_2041.y, x_2041.y) * vec2<f32>(x_2044.x, x_2044.y));
  let x_2048 : vec4<f32> = x_33.x_CameraViewProjections[0i][0i];
  let x_2050 : vec3<f32> = u_xlat5;
  let x_2053 : vec2<f32> = u_xlat18;
  u_xlat18 = ((vec2<f32>(x_2048.x, x_2048.y) * vec2<f32>(x_2050.x, x_2050.x)) + x_2053);
  let x_2056 : vec4<f32> = x_33.x_CameraViewProjections[0i][2i];
  let x_2058 : vec3<f32> = u_xlat5;
  let x_2061 : vec2<f32> = u_xlat18;
  u_xlat18 = ((vec2<f32>(x_2056.x, x_2056.y) * vec2<f32>(x_2058.z, x_2058.z)) + x_2061);
  let x_2063 : vec3<f32> = u_xlat4;
  let x_2064 : vec3<f32> = u_xlat5;
  u_xlat3.x = dot(x_2063, x_2064);
  let x_2068 : f32 = u_xlat3.x;
  u_xlat11.x = (1.0f / -(x_2068));
  let x_2072 : vec2<f32> = u_xlat18;
  let x_2073 : vec3<f32> = u_xlat11;
  u_xlat18 = ((x_2072 * vec2<f32>(x_2073.x, x_2073.x)) + vec2<f32>(1.0f, 1.0f));
  let x_2077 : vec2<f32> = u_xlat18;
  u_xlat18 = (x_2077 * vec2<f32>(0.5f, 0.5f));
  let x_2079 : vec2<f32> = u_xlat18;
  u_xlat18 = clamp(x_2079, vec2<f32>(0.0f, 0.0f), vec2<f32>(1.0f, 1.0f));
  let x_2086 : vec2<f32> = u_xlat18;
  let x_2088 : f32 = x_33.x_GlobalMipBias.x;
  let x_2089 : vec4<f32> = textureSampleBias(x_CameraDepthTexture, sampler_CameraDepthTexture, x_2086, x_2088);
  u_xlat11.x = x_2089.x;
  let x_2093 : f32 = x_33.x_ZBufferParams.z;
  let x_2095 : f32 = u_xlat11.x;
  let x_2098 : f32 = x_33.x_ZBufferParams.w;
  u_xlat28 = ((x_2093 * x_2095) + x_2098);
  let x_2100 : f32 = u_xlat28;
  u_xlat28 = (1.0f / x_2100);
  let x_2103 : f32 = u_xlat3.x;
  let x_2105 : f32 = u_xlat28;
  u_xlat3.x = (-(x_2103) + -(x_2105));
  let x_2110 : f32 = u_xlat3.x;
  let x_2113 : f32 = x_33.x_SSAOParams.y;
  u_xlatb3.x = (abs(x_2110) < x_2113);
  let x_2117 : f32 = u_xlat11.x;
  u_xlatb3.y = (0.00001f < x_2117);
  let x_2121 : bool = u_xlatb3.x;
  u_xlat3.x = select(0.0f, 1.0f, x_2121);
  let x_2125 : bool = u_xlatb3.y;
  u_xlat3.y = select(0.0f, 1.0f, x_2125);
  let x_2129 : f32 = u_xlat3.y;
  let x_2131 : f32 = u_xlat3.x;
  u_xlat3.x = (x_2129 * x_2131);
  let x_2135 : f32 = u_xlat18.y;
  u_xlat26 = (-(x_2135) + 1.0f);
  let x_2138 : f32 = u_xlat28;
  let x_2140 : f32 = x_33.x_ProjectionParams2.x;
  u_xlat11.x = (x_2138 * x_2140);
  let x_2144 : vec4<f32> = x_33.x_CameraViewXExtent[0i];
  let x_2146 : vec2<f32> = u_xlat18;
  let x_2150 : vec4<f32> = x_33.x_CameraViewTopLeftCorner[0i];
  u_xlat5 = ((vec3<f32>(x_2144.x, x_2144.y, x_2144.z) * vec3<f32>(x_2146.x, x_2146.x, x_2146.x)) + vec3<f32>(x_2150.x, x_2150.y, x_2150.z));
  let x_2154 : vec4<f32> = x_33.x_CameraViewYExtent[0i];
  let x_2156 : f32 = u_xlat26;
  let x_2159 : vec3<f32> = u_xlat5;
  u_xlat5 = ((vec3<f32>(x_2154.x, x_2154.y, x_2154.z) * vec3<f32>(x_2156, x_2156, x_2156)) + x_2159);
  let x_2161 : vec3<f32> = u_xlat5;
  let x_2162 : vec3<f32> = u_xlat11;
  let x_2165 : vec3<f32> = u_xlat8;
  u_xlat5 = ((x_2161 * vec3<f32>(x_2162.x, x_2162.x, x_2162.x)) + -(x_2165));
  let x_2168 : vec3<f32> = u_xlat5;
  let x_2169 : vec3<f32> = u_xlat1;
  u_xlat18.x = dot(x_2168, x_2169);
  let x_2172 : f32 = u_xlat0;
  let x_2176 : f32 = u_xlat18.x;
  u_xlat18.x = ((-(x_2172) * 0.004f) + x_2176);
  let x_2180 : f32 = u_xlat18.x;
  u_xlat18.x = max(x_2180, 0.0f);
  let x_2183 : vec3<f32> = u_xlat5;
  let x_2184 : vec3<f32> = u_xlat5;
  u_xlat26 = dot(x_2183, x_2184);
  let x_2186 : f32 = u_xlat26;
  u_xlat26 = (x_2186 + 0.0001f);
  let x_2188 : f32 = u_xlat26;
  u_xlat26 = (1.0f / x_2188);
  let x_2190 : f32 = u_xlat26;
  let x_2192 : f32 = u_xlat18.x;
  u_xlat18.x = (x_2190 * x_2192);
  let x_2196 : f32 = u_xlat18.x;
  let x_2198 : f32 = u_xlat3.x;
  let x_2200 : f32 = u_xlat25;
  u_xlat25 = ((x_2196 * x_2198) + x_2200);
  let x_2205 : vec4<f32> = u_xlat3;
  let x_2208 : f32 = x_33.x_GlobalMipBias.x;
  let x_2209 : vec4<f32> = textureSampleBias(x_BlueNoiseTexture, sampler_PointRepeat, vec2<f32>(x_2205.z, x_2205.w), x_2208);
  u_xlat18.x = x_2209.w;
  let x_2212 : vec2<f32> = u_xlat18;
  u_xlat18 = (vec2<f32>(x_2212.x, x_2212.x) + vec2<f32>(0.359375f, 0.6796875f));
  let x_2219 : f32 = u_xlat18.x;
  u_xlat18.x = fract(x_2219);
  let x_2223 : f32 = u_xlat18.x;
  u_xlat3.z = ((x_2223 * 2.0f) + -1.0f);
  let x_2228 : f32 = u_xlat18.y;
  u_xlat18.x = (x_2228 * 628.31854248f);
  let x_2232 : f32 = u_xlat3.z;
  let x_2235 : f32 = u_xlat3.z;
  u_xlat26 = ((-(x_2232) * x_2235) + 1.0f);
  let x_2238 : f32 = u_xlat26;
  u_xlat26 = sqrt(x_2238);
  let x_2241 : f32 = u_xlat18.x;
  u_xlat5.x = sin(x_2241);
  let x_2245 : f32 = u_xlat18.x;
  u_xlat6 = cos(x_2245);
  let x_2247 : f32 = u_xlat26;
  let x_2248 : f32 = u_xlat6;
  u_xlat3.x = (x_2247 * x_2248);
  let x_2251 : f32 = u_xlat26;
  let x_2253 : f32 = u_xlat5.x;
  u_xlat3.y = (x_2251 * x_2253);
  let x_2256 : vec3<f32> = u_xlat1;
  let x_2257 : vec4<f32> = u_xlat3;
  u_xlat18.x = dot(x_2256, vec3<f32>(x_2257.x, x_2257.y, x_2257.z));
  let x_2262 : f32 = u_xlat18.x;
  u_xlatb18 = (x_2262 >= 0.0f);
  let x_2264 : bool = u_xlatb18;
  u_xlat18.x = select(-1.0f, 1.0f, x_2264);
  let x_2267 : vec2<f32> = u_xlat18;
  let x_2269 : vec4<f32> = u_xlat3;
  let x_2271 : vec3<f32> = (vec3<f32>(x_2267.x, x_2267.x, x_2267.x) * vec3<f32>(x_2269.x, x_2269.y, x_2269.z));
  let x_2272 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_2271.x, x_2271.y, x_2271.z, x_2272.w);
  let x_2274 : vec4<f32> = u_xlat3;
  let x_2277 : vec4<f32> = x_33.x_SSAOParams;
  let x_2279 : vec3<f32> = (vec3<f32>(x_2274.x, x_2274.y, x_2274.z) * vec3<f32>(x_2277.y, x_2277.y, x_2277.y));
  let x_2280 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_2279.x, x_2279.y, x_2279.z, x_2280.w);
  let x_2282 : vec4<f32> = u_xlat3;
  let x_2286 : vec3<f32> = u_xlat8;
  let x_2287 : vec3<f32> = ((vec3<f32>(x_2282.x, x_2282.y, x_2282.z) * vec3<f32>(0.5f, 0.5f, 0.5f)) + x_2286);
  let x_2288 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_2287.x, x_2287.y, x_2287.z, x_2288.w);
  let x_2290 : vec4<f32> = u_xlat3;
  let x_2293 : vec4<f32> = x_33.x_CameraViewProjections[0i][1i];
  u_xlat18 = (vec2<f32>(x_2290.y, x_2290.y) * vec2<f32>(x_2293.x, x_2293.y));
  let x_2297 : vec4<f32> = x_33.x_CameraViewProjections[0i][0i];
  let x_2299 : vec4<f32> = u_xlat3;
  let x_2302 : vec2<f32> = u_xlat18;
  u_xlat18 = ((vec2<f32>(x_2297.x, x_2297.y) * vec2<f32>(x_2299.x, x_2299.x)) + x_2302);
  let x_2305 : vec4<f32> = x_33.x_CameraViewProjections[0i][2i];
  let x_2307 : vec4<f32> = u_xlat3;
  let x_2310 : vec2<f32> = u_xlat18;
  u_xlat18 = ((vec2<f32>(x_2305.x, x_2305.y) * vec2<f32>(x_2307.z, x_2307.z)) + x_2310);
  let x_2312 : vec3<f32> = u_xlat4;
  let x_2313 : vec4<f32> = u_xlat3;
  u_xlat3.x = dot(x_2312, vec3<f32>(x_2313.x, x_2313.y, x_2313.z));
  let x_2318 : f32 = u_xlat3.x;
  u_xlat11.x = (1.0f / -(x_2318));
  let x_2322 : vec2<f32> = u_xlat18;
  let x_2323 : vec3<f32> = u_xlat11;
  u_xlat18 = ((x_2322 * vec2<f32>(x_2323.x, x_2323.x)) + vec2<f32>(1.0f, 1.0f));
  let x_2327 : vec2<f32> = u_xlat18;
  u_xlat18 = (x_2327 * vec2<f32>(0.5f, 0.5f));
  let x_2329 : vec2<f32> = u_xlat18;
  u_xlat18 = clamp(x_2329, vec2<f32>(0.0f, 0.0f), vec2<f32>(1.0f, 1.0f));
  let x_2336 : vec2<f32> = u_xlat18;
  let x_2338 : f32 = x_33.x_GlobalMipBias.x;
  let x_2339 : vec4<f32> = textureSampleBias(x_CameraDepthTexture, sampler_CameraDepthTexture, x_2336, x_2338);
  u_xlat11.x = x_2339.x;
  let x_2343 : f32 = x_33.x_ZBufferParams.z;
  let x_2345 : f32 = u_xlat11.x;
  let x_2348 : f32 = x_33.x_ZBufferParams.w;
  u_xlat19 = ((x_2343 * x_2345) + x_2348);
  let x_2350 : f32 = u_xlat19;
  u_xlat19 = (1.0f / x_2350);
  let x_2352 : f32 = u_xlat19;
  let x_2355 : f32 = u_xlat3.x;
  u_xlat3.x = (-(x_2352) + -(x_2355));
  let x_2360 : f32 = u_xlat3.x;
  let x_2363 : f32 = x_33.x_SSAOParams.y;
  u_xlatb3.x = (abs(x_2360) < x_2363);
  let x_2367 : f32 = u_xlat11.x;
  u_xlatb3.y = (0.00001f < x_2367);
  let x_2371 : bool = u_xlatb3.x;
  u_xlat3.x = select(0.0f, 1.0f, x_2371);
  let x_2375 : bool = u_xlatb3.y;
  u_xlat3.y = select(0.0f, 1.0f, x_2375);
  let x_2379 : f32 = u_xlat3.y;
  let x_2381 : f32 = u_xlat3.x;
  u_xlat3.x = (x_2379 * x_2381);
  let x_2385 : f32 = u_xlat18.y;
  u_xlat26 = (-(x_2385) + 1.0f);
  let x_2388 : f32 = u_xlat19;
  let x_2390 : f32 = x_33.x_ProjectionParams2.x;
  u_xlat11.x = (x_2388 * x_2390);
  let x_2394 : vec4<f32> = x_33.x_CameraViewXExtent[0i];
  let x_2396 : vec2<f32> = u_xlat18;
  let x_2400 : vec4<f32> = x_33.x_CameraViewTopLeftCorner[0i];
  u_xlat5 = ((vec3<f32>(x_2394.x, x_2394.y, x_2394.z) * vec3<f32>(x_2396.x, x_2396.x, x_2396.x)) + vec3<f32>(x_2400.x, x_2400.y, x_2400.z));
  let x_2404 : vec4<f32> = x_33.x_CameraViewYExtent[0i];
  let x_2406 : f32 = u_xlat26;
  let x_2409 : vec3<f32> = u_xlat5;
  u_xlat5 = ((vec3<f32>(x_2404.x, x_2404.y, x_2404.z) * vec3<f32>(x_2406, x_2406, x_2406)) + x_2409);
  let x_2411 : vec3<f32> = u_xlat5;
  let x_2412 : vec3<f32> = u_xlat11;
  let x_2415 : vec3<f32> = u_xlat8;
  u_xlat11 = ((x_2411 * vec3<f32>(x_2412.x, x_2412.x, x_2412.x)) + -(x_2415));
  let x_2418 : vec3<f32> = u_xlat11;
  let x_2419 : vec3<f32> = u_xlat1;
  u_xlat18.x = dot(x_2418, x_2419);
  let x_2422 : f32 = u_xlat0;
  let x_2426 : f32 = u_xlat18.x;
  u_xlat18.x = ((-(x_2422) * 0.004f) + x_2426);
  let x_2430 : f32 = u_xlat18.x;
  u_xlat18.x = max(x_2430, 0.0f);
  let x_2433 : vec3<f32> = u_xlat11;
  let x_2434 : vec3<f32> = u_xlat11;
  u_xlat26 = dot(x_2433, x_2434);
  let x_2436 : f32 = u_xlat26;
  u_xlat26 = (x_2436 + 0.0001f);
  let x_2438 : f32 = u_xlat26;
  u_xlat26 = (1.0f / x_2438);
  let x_2440 : f32 = u_xlat26;
  let x_2442 : f32 = u_xlat18.x;
  u_xlat18.x = (x_2440 * x_2442);
  let x_2446 : f32 = u_xlat18.x;
  let x_2448 : f32 = u_xlat3.x;
  let x_2450 : f32 = u_xlat25;
  u_xlat25 = ((x_2446 * x_2448) + x_2450);
  let x_2452 : vec4<f32> = u_xlat2;
  let x_2455 : vec4<f32> = x_33.x_SSAOBlueNoiseParams;
  u_xlat3 = ((vec4<f32>(x_2452.x, x_2452.y, x_2452.x, x_2452.y) * vec4<f32>(x_2455.x, x_2455.y, x_2455.x, x_2455.y)) + vec4<f32>(0.75f, 0.75f, 0.833333373f, 0.833333373f));
  let x_2465 : vec4<f32> = u_xlat3;
  let x_2468 : f32 = x_33.x_GlobalMipBias.x;
  let x_2469 : vec4<f32> = textureSampleBias(x_BlueNoiseTexture, sampler_PointRepeat, vec2<f32>(x_2465.x, x_2465.y), x_2468);
  u_xlat18.x = x_2469.w;
  let x_2472 : vec2<f32> = u_xlat18;
  u_xlat18 = (vec2<f32>(x_2472.x, x_2472.x) + vec2<f32>(0.5078125f, 0.3515625f));
  let x_2479 : f32 = u_xlat18.x;
  u_xlat18.x = fract(x_2479);
  let x_2483 : f32 = u_xlat18.x;
  u_xlat5.z = ((x_2483 * 2.0f) + -1.0f);
  let x_2488 : f32 = u_xlat18.y;
  u_xlat18.x = (x_2488 * 628.31854248f);
  let x_2492 : f32 = u_xlat5.z;
  let x_2495 : f32 = u_xlat5.z;
  u_xlat26 = ((-(x_2492) * x_2495) + 1.0f);
  let x_2498 : f32 = u_xlat26;
  u_xlat26 = sqrt(x_2498);
  let x_2501 : f32 = u_xlat18.x;
  u_xlat3.x = sin(x_2501);
  let x_2505 : f32 = u_xlat18.x;
  u_xlat6 = cos(x_2505);
  let x_2507 : f32 = u_xlat26;
  let x_2508 : f32 = u_xlat6;
  u_xlat5.x = (x_2507 * x_2508);
  let x_2511 : f32 = u_xlat26;
  let x_2513 : f32 = u_xlat3.x;
  u_xlat5.y = (x_2511 * x_2513);
  let x_2516 : vec3<f32> = u_xlat1;
  let x_2517 : vec3<f32> = u_xlat5;
  u_xlat18.x = dot(x_2516, x_2517);
  let x_2521 : f32 = u_xlat18.x;
  u_xlatb18 = (x_2521 >= 0.0f);
  let x_2523 : bool = u_xlatb18;
  u_xlat18.x = select(-1.0f, 1.0f, x_2523);
  let x_2526 : vec2<f32> = u_xlat18;
  let x_2528 : vec3<f32> = u_xlat5;
  u_xlat5 = (vec3<f32>(x_2526.x, x_2526.x, x_2526.x) * x_2528);
  let x_2530 : vec3<f32> = u_xlat5;
  let x_2532 : vec4<f32> = x_33.x_SSAOParams;
  u_xlat5 = (x_2530 * vec3<f32>(x_2532.y, x_2532.y, x_2532.y));
  let x_2535 : vec3<f32> = u_xlat5;
  let x_2539 : vec3<f32> = u_xlat8;
  u_xlat5 = ((x_2535 * vec3<f32>(0.606249988f, 0.606249988f, 0.606249988f)) + x_2539);
  let x_2541 : vec3<f32> = u_xlat5;
  let x_2544 : vec4<f32> = x_33.x_CameraViewProjections[0i][1i];
  u_xlat18 = (vec2<f32>(x_2541.y, x_2541.y) * vec2<f32>(x_2544.x, x_2544.y));
  let x_2548 : vec4<f32> = x_33.x_CameraViewProjections[0i][0i];
  let x_2550 : vec3<f32> = u_xlat5;
  let x_2553 : vec2<f32> = u_xlat18;
  u_xlat18 = ((vec2<f32>(x_2548.x, x_2548.y) * vec2<f32>(x_2550.x, x_2550.x)) + x_2553);
  let x_2556 : vec4<f32> = x_33.x_CameraViewProjections[0i][2i];
  let x_2558 : vec3<f32> = u_xlat5;
  let x_2561 : vec2<f32> = u_xlat18;
  u_xlat18 = ((vec2<f32>(x_2556.x, x_2556.y) * vec2<f32>(x_2558.z, x_2558.z)) + x_2561);
  let x_2563 : vec3<f32> = u_xlat4;
  let x_2564 : vec3<f32> = u_xlat5;
  u_xlat3.x = dot(x_2563, x_2564);
  let x_2568 : f32 = u_xlat3.x;
  u_xlat11.x = (1.0f / -(x_2568));
  let x_2572 : vec2<f32> = u_xlat18;
  let x_2573 : vec3<f32> = u_xlat11;
  u_xlat18 = ((x_2572 * vec2<f32>(x_2573.x, x_2573.x)) + vec2<f32>(1.0f, 1.0f));
  let x_2577 : vec2<f32> = u_xlat18;
  u_xlat18 = (x_2577 * vec2<f32>(0.5f, 0.5f));
  let x_2579 : vec2<f32> = u_xlat18;
  u_xlat18 = clamp(x_2579, vec2<f32>(0.0f, 0.0f), vec2<f32>(1.0f, 1.0f));
  let x_2586 : vec2<f32> = u_xlat18;
  let x_2588 : f32 = x_33.x_GlobalMipBias.x;
  let x_2589 : vec4<f32> = textureSampleBias(x_CameraDepthTexture, sampler_CameraDepthTexture, x_2586, x_2588);
  u_xlat11.x = x_2589.x;
  let x_2593 : f32 = x_33.x_ZBufferParams.z;
  let x_2595 : f32 = u_xlat11.x;
  let x_2598 : f32 = x_33.x_ZBufferParams.w;
  u_xlat28 = ((x_2593 * x_2595) + x_2598);
  let x_2600 : f32 = u_xlat28;
  u_xlat28 = (1.0f / x_2600);
  let x_2603 : f32 = u_xlat3.x;
  let x_2605 : f32 = u_xlat28;
  u_xlat3.x = (-(x_2603) + -(x_2605));
  let x_2610 : f32 = u_xlat3.x;
  let x_2613 : f32 = x_33.x_SSAOParams.y;
  u_xlatb3.x = (abs(x_2610) < x_2613);
  let x_2617 : f32 = u_xlat11.x;
  u_xlatb3.y = (0.00001f < x_2617);
  let x_2621 : bool = u_xlatb3.x;
  u_xlat3.x = select(0.0f, 1.0f, x_2621);
  let x_2625 : bool = u_xlatb3.y;
  u_xlat3.y = select(0.0f, 1.0f, x_2625);
  let x_2629 : f32 = u_xlat3.y;
  let x_2631 : f32 = u_xlat3.x;
  u_xlat3.x = (x_2629 * x_2631);
  let x_2635 : f32 = u_xlat18.y;
  u_xlat26 = (-(x_2635) + 1.0f);
  let x_2638 : f32 = u_xlat28;
  let x_2640 : f32 = x_33.x_ProjectionParams2.x;
  u_xlat11.x = (x_2638 * x_2640);
  let x_2644 : vec4<f32> = x_33.x_CameraViewXExtent[0i];
  let x_2646 : vec2<f32> = u_xlat18;
  let x_2650 : vec4<f32> = x_33.x_CameraViewTopLeftCorner[0i];
  u_xlat5 = ((vec3<f32>(x_2644.x, x_2644.y, x_2644.z) * vec3<f32>(x_2646.x, x_2646.x, x_2646.x)) + vec3<f32>(x_2650.x, x_2650.y, x_2650.z));
  let x_2654 : vec4<f32> = x_33.x_CameraViewYExtent[0i];
  let x_2656 : f32 = u_xlat26;
  let x_2659 : vec3<f32> = u_xlat5;
  u_xlat5 = ((vec3<f32>(x_2654.x, x_2654.y, x_2654.z) * vec3<f32>(x_2656, x_2656, x_2656)) + x_2659);
  let x_2661 : vec3<f32> = u_xlat5;
  let x_2662 : vec3<f32> = u_xlat11;
  let x_2665 : vec3<f32> = u_xlat8;
  u_xlat5 = ((x_2661 * vec3<f32>(x_2662.x, x_2662.x, x_2662.x)) + -(x_2665));
  let x_2668 : vec3<f32> = u_xlat5;
  let x_2669 : vec3<f32> = u_xlat1;
  u_xlat18.x = dot(x_2668, x_2669);
  let x_2672 : f32 = u_xlat0;
  let x_2676 : f32 = u_xlat18.x;
  u_xlat18.x = ((-(x_2672) * 0.004f) + x_2676);
  let x_2680 : f32 = u_xlat18.x;
  u_xlat18.x = max(x_2680, 0.0f);
  let x_2683 : vec3<f32> = u_xlat5;
  let x_2684 : vec3<f32> = u_xlat5;
  u_xlat26 = dot(x_2683, x_2684);
  let x_2686 : f32 = u_xlat26;
  u_xlat26 = (x_2686 + 0.0001f);
  let x_2688 : f32 = u_xlat26;
  u_xlat26 = (1.0f / x_2688);
  let x_2690 : f32 = u_xlat26;
  let x_2692 : f32 = u_xlat18.x;
  u_xlat18.x = (x_2690 * x_2692);
  let x_2696 : f32 = u_xlat18.x;
  let x_2698 : f32 = u_xlat3.x;
  let x_2700 : f32 = u_xlat25;
  u_xlat25 = ((x_2696 * x_2698) + x_2700);
  let x_2705 : vec4<f32> = u_xlat3;
  let x_2708 : f32 = x_33.x_GlobalMipBias.x;
  let x_2709 : vec4<f32> = textureSampleBias(x_BlueNoiseTexture, sampler_PointRepeat, vec2<f32>(x_2705.z, x_2705.w), x_2708);
  u_xlat18.x = x_2709.w;
  let x_2712 : vec2<f32> = u_xlat18;
  u_xlat18 = (vec2<f32>(x_2712.x, x_2712.x) + vec2<f32>(0.3828125f, 0.4921875f));
  let x_2719 : f32 = u_xlat18.x;
  u_xlat18.x = fract(x_2719);
  let x_2723 : f32 = u_xlat18.x;
  u_xlat3.z = ((x_2723 * 2.0f) + -1.0f);
  let x_2728 : f32 = u_xlat18.y;
  u_xlat18.x = (x_2728 * 628.31854248f);
  let x_2732 : f32 = u_xlat3.z;
  let x_2735 : f32 = u_xlat3.z;
  u_xlat26 = ((-(x_2732) * x_2735) + 1.0f);
  let x_2738 : f32 = u_xlat26;
  u_xlat26 = sqrt(x_2738);
  let x_2741 : f32 = u_xlat18.x;
  u_xlat5.x = sin(x_2741);
  let x_2745 : f32 = u_xlat18.x;
  u_xlat6 = cos(x_2745);
  let x_2747 : f32 = u_xlat26;
  let x_2748 : f32 = u_xlat6;
  u_xlat3.x = (x_2747 * x_2748);
  let x_2751 : f32 = u_xlat26;
  let x_2753 : f32 = u_xlat5.x;
  u_xlat3.y = (x_2751 * x_2753);
  let x_2756 : vec3<f32> = u_xlat1;
  let x_2757 : vec4<f32> = u_xlat3;
  u_xlat18.x = dot(x_2756, vec3<f32>(x_2757.x, x_2757.y, x_2757.z));
  let x_2762 : f32 = u_xlat18.x;
  u_xlatb18 = (x_2762 >= 0.0f);
  let x_2764 : bool = u_xlatb18;
  u_xlat18.x = select(-1.0f, 1.0f, x_2764);
  let x_2767 : vec2<f32> = u_xlat18;
  let x_2769 : vec4<f32> = u_xlat3;
  let x_2771 : vec3<f32> = (vec3<f32>(x_2767.x, x_2767.x, x_2767.x) * vec3<f32>(x_2769.x, x_2769.y, x_2769.z));
  let x_2772 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_2771.x, x_2771.y, x_2771.z, x_2772.w);
  let x_2774 : vec4<f32> = u_xlat3;
  let x_2777 : vec4<f32> = x_33.x_SSAOParams;
  let x_2779 : vec3<f32> = (vec3<f32>(x_2774.x, x_2774.y, x_2774.z) * vec3<f32>(x_2777.y, x_2777.y, x_2777.y));
  let x_2780 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_2779.x, x_2779.y, x_2779.z, x_2780.w);
  let x_2782 : vec4<f32> = u_xlat3;
  let x_2787 : vec3<f32> = u_xlat8;
  let x_2788 : vec3<f32> = ((vec3<f32>(x_2782.x, x_2782.y, x_2782.z) * vec3<f32>(0.725000083f, 0.725000083f, 0.725000083f)) + x_2787);
  let x_2789 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_2788.x, x_2788.y, x_2788.z, x_2789.w);
  let x_2791 : vec4<f32> = u_xlat3;
  let x_2794 : vec4<f32> = x_33.x_CameraViewProjections[0i][1i];
  u_xlat18 = (vec2<f32>(x_2791.y, x_2791.y) * vec2<f32>(x_2794.x, x_2794.y));
  let x_2798 : vec4<f32> = x_33.x_CameraViewProjections[0i][0i];
  let x_2800 : vec4<f32> = u_xlat3;
  let x_2803 : vec2<f32> = u_xlat18;
  u_xlat18 = ((vec2<f32>(x_2798.x, x_2798.y) * vec2<f32>(x_2800.x, x_2800.x)) + x_2803);
  let x_2806 : vec4<f32> = x_33.x_CameraViewProjections[0i][2i];
  let x_2808 : vec4<f32> = u_xlat3;
  let x_2811 : vec2<f32> = u_xlat18;
  u_xlat18 = ((vec2<f32>(x_2806.x, x_2806.y) * vec2<f32>(x_2808.z, x_2808.z)) + x_2811);
  let x_2813 : vec3<f32> = u_xlat4;
  let x_2814 : vec4<f32> = u_xlat3;
  u_xlat3.x = dot(x_2813, vec3<f32>(x_2814.x, x_2814.y, x_2814.z));
  let x_2819 : f32 = u_xlat3.x;
  u_xlat11.x = (1.0f / -(x_2819));
  let x_2823 : vec2<f32> = u_xlat18;
  let x_2824 : vec3<f32> = u_xlat11;
  u_xlat18 = ((x_2823 * vec2<f32>(x_2824.x, x_2824.x)) + vec2<f32>(1.0f, 1.0f));
  let x_2828 : vec2<f32> = u_xlat18;
  u_xlat18 = (x_2828 * vec2<f32>(0.5f, 0.5f));
  let x_2830 : vec2<f32> = u_xlat18;
  u_xlat18 = clamp(x_2830, vec2<f32>(0.0f, 0.0f), vec2<f32>(1.0f, 1.0f));
  let x_2837 : vec2<f32> = u_xlat18;
  let x_2839 : f32 = x_33.x_GlobalMipBias.x;
  let x_2840 : vec4<f32> = textureSampleBias(x_CameraDepthTexture, sampler_CameraDepthTexture, x_2837, x_2839);
  u_xlat11.x = x_2840.x;
  let x_2844 : f32 = x_33.x_ZBufferParams.z;
  let x_2846 : f32 = u_xlat11.x;
  let x_2849 : f32 = x_33.x_ZBufferParams.w;
  u_xlat19 = ((x_2844 * x_2846) + x_2849);
  let x_2851 : f32 = u_xlat19;
  u_xlat19 = (1.0f / x_2851);
  let x_2853 : f32 = u_xlat19;
  let x_2856 : f32 = u_xlat3.x;
  u_xlat3.x = (-(x_2853) + -(x_2856));
  let x_2861 : f32 = u_xlat3.x;
  let x_2864 : f32 = x_33.x_SSAOParams.y;
  u_xlatb3.x = (abs(x_2861) < x_2864);
  let x_2868 : f32 = u_xlat11.x;
  u_xlatb3.y = (0.00001f < x_2868);
  let x_2872 : bool = u_xlatb3.x;
  u_xlat3.x = select(0.0f, 1.0f, x_2872);
  let x_2876 : bool = u_xlatb3.y;
  u_xlat3.y = select(0.0f, 1.0f, x_2876);
  let x_2880 : f32 = u_xlat3.y;
  let x_2882 : f32 = u_xlat3.x;
  u_xlat3.x = (x_2880 * x_2882);
  let x_2886 : f32 = u_xlat18.y;
  u_xlat26 = (-(x_2886) + 1.0f);
  let x_2889 : f32 = u_xlat19;
  let x_2891 : f32 = x_33.x_ProjectionParams2.x;
  u_xlat11.x = (x_2889 * x_2891);
  let x_2895 : vec4<f32> = x_33.x_CameraViewXExtent[0i];
  let x_2897 : vec2<f32> = u_xlat18;
  let x_2901 : vec4<f32> = x_33.x_CameraViewTopLeftCorner[0i];
  u_xlat5 = ((vec3<f32>(x_2895.x, x_2895.y, x_2895.z) * vec3<f32>(x_2897.x, x_2897.x, x_2897.x)) + vec3<f32>(x_2901.x, x_2901.y, x_2901.z));
  let x_2905 : vec4<f32> = x_33.x_CameraViewYExtent[0i];
  let x_2907 : f32 = u_xlat26;
  let x_2910 : vec3<f32> = u_xlat5;
  u_xlat5 = ((vec3<f32>(x_2905.x, x_2905.y, x_2905.z) * vec3<f32>(x_2907, x_2907, x_2907)) + x_2910);
  let x_2912 : vec3<f32> = u_xlat5;
  let x_2913 : vec3<f32> = u_xlat11;
  let x_2916 : vec3<f32> = u_xlat8;
  u_xlat11 = ((x_2912 * vec3<f32>(x_2913.x, x_2913.x, x_2913.x)) + -(x_2916));
  let x_2919 : vec3<f32> = u_xlat11;
  let x_2920 : vec3<f32> = u_xlat1;
  u_xlat18.x = dot(x_2919, x_2920);
  let x_2923 : f32 = u_xlat0;
  let x_2927 : f32 = u_xlat18.x;
  u_xlat18.x = ((-(x_2923) * 0.004f) + x_2927);
  let x_2931 : f32 = u_xlat18.x;
  u_xlat18.x = max(x_2931, 0.0f);
  let x_2934 : vec3<f32> = u_xlat11;
  let x_2935 : vec3<f32> = u_xlat11;
  u_xlat26 = dot(x_2934, x_2935);
  let x_2937 : f32 = u_xlat26;
  u_xlat26 = (x_2937 + 0.0001f);
  let x_2939 : f32 = u_xlat26;
  u_xlat26 = (1.0f / x_2939);
  let x_2941 : f32 = u_xlat26;
  let x_2943 : f32 = u_xlat18.x;
  u_xlat18.x = (x_2941 * x_2943);
  let x_2947 : f32 = u_xlat18.x;
  let x_2949 : f32 = u_xlat3.x;
  let x_2951 : f32 = u_xlat25;
  u_xlat25 = ((x_2947 * x_2949) + x_2951);
  let x_2953 : vec4<f32> = u_xlat2;
  let x_2956 : vec4<f32> = x_33.x_SSAOBlueNoiseParams;
  let x_2961 : vec2<f32> = ((vec2<f32>(x_2953.x, x_2953.y) * vec2<f32>(x_2956.x, x_2956.y)) + vec2<f32>(0.916666687f, 0.916666687f));
  let x_2962 : vec4<f32> = u_xlat2;
  u_xlat2 = vec4<f32>(x_2961.x, x_2961.y, x_2962.z, x_2962.w);
  let x_2967 : vec4<f32> = u_xlat2;
  let x_2970 : f32 = x_33.x_GlobalMipBias.x;
  let x_2971 : vec4<f32> = textureSampleBias(x_BlueNoiseTexture, sampler_PointRepeat, vec2<f32>(x_2967.x, x_2967.y), x_2970);
  u_xlat2.x = x_2971.w;
  let x_2974 : vec4<f32> = u_xlat2;
  let x_2977 : vec2<f32> = (vec2<f32>(x_2974.x, x_2974.x) + vec2<f32>(0.984375f, 0.125f));
  let x_2978 : vec4<f32> = u_xlat2;
  u_xlat2 = vec4<f32>(x_2977.x, x_2977.y, x_2978.z, x_2978.w);
  let x_2981 : f32 = u_xlat2.x;
  u_xlat2.x = fract(x_2981);
  let x_2985 : f32 = u_xlat2.x;
  u_xlat3.z = ((x_2985 * 2.0f) + -1.0f);
  let x_2990 : f32 = u_xlat2.y;
  u_xlat2.x = (x_2990 * 628.31854248f);
  let x_2995 : f32 = u_xlat3.z;
  let x_2998 : f32 = u_xlat3.z;
  u_xlat10.x = ((-(x_2995) * x_2998) + 1.0f);
  let x_3003 : f32 = u_xlat10.x;
  u_xlat10.x = sqrt(x_3003);
  let x_3007 : f32 = u_xlat2.x;
  u_xlat5.x = cos(x_3007);
  let x_3011 : f32 = u_xlat2.x;
  u_xlat2.x = sin(x_3011);
  let x_3015 : f32 = u_xlat10.x;
  let x_3017 : f32 = u_xlat5.x;
  u_xlat3.x = (x_3015 * x_3017);
  let x_3021 : f32 = u_xlat2.x;
  let x_3023 : f32 = u_xlat10.x;
  u_xlat3.y = (x_3021 * x_3023);
  let x_3026 : vec3<f32> = u_xlat1;
  let x_3027 : vec4<f32> = u_xlat3;
  u_xlat2.x = dot(x_3026, vec3<f32>(x_3027.x, x_3027.y, x_3027.z));
  let x_3035 : f32 = u_xlat2.x;
  u_xlatb2.x = (x_3035 >= 0.0f);
  let x_3039 : bool = u_xlatb2.x;
  u_xlat2.x = select(-1.0f, 1.0f, x_3039);
  let x_3042 : vec4<f32> = u_xlat2;
  let x_3044 : vec4<f32> = u_xlat3;
  let x_3046 : vec3<f32> = (vec3<f32>(x_3042.x, x_3042.x, x_3042.x) * vec3<f32>(x_3044.x, x_3044.y, x_3044.z));
  let x_3047 : vec4<f32> = u_xlat2;
  u_xlat2 = vec4<f32>(x_3046.x, x_3046.y, x_3046.z, x_3047.w);
  let x_3049 : vec4<f32> = u_xlat2;
  let x_3052 : vec4<f32> = x_33.x_SSAOParams;
  let x_3054 : vec3<f32> = (vec3<f32>(x_3049.x, x_3049.y, x_3049.z) * vec3<f32>(x_3052.y, x_3052.y, x_3052.y));
  let x_3055 : vec4<f32> = u_xlat2;
  u_xlat2 = vec4<f32>(x_3054.x, x_3054.y, x_3054.z, x_3055.w);
  let x_3057 : vec4<f32> = u_xlat2;
  let x_3062 : vec3<f32> = u_xlat8;
  let x_3063 : vec3<f32> = ((vec3<f32>(x_3057.x, x_3057.y, x_3057.z) * vec3<f32>(0.856249988f, 0.856249988f, 0.856249988f)) + x_3062);
  let x_3064 : vec4<f32> = u_xlat2;
  u_xlat2 = vec4<f32>(x_3063.x, x_3063.y, x_3063.z, x_3064.w);
  let x_3066 : vec4<f32> = u_xlat2;
  let x_3069 : vec4<f32> = x_33.x_CameraViewProjections[0i][1i];
  let x_3071 : vec2<f32> = (vec2<f32>(x_3066.y, x_3066.y) * vec2<f32>(x_3069.x, x_3069.y));
  let x_3072 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_3071.x, x_3071.y, x_3072.z, x_3072.w);
  let x_3075 : vec4<f32> = x_33.x_CameraViewProjections[0i][0i];
  let x_3077 : vec4<f32> = u_xlat2;
  let x_3080 : vec4<f32> = u_xlat3;
  let x_3082 : vec2<f32> = ((vec2<f32>(x_3075.x, x_3075.y) * vec2<f32>(x_3077.x, x_3077.x)) + vec2<f32>(x_3080.x, x_3080.y));
  let x_3083 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_3082.x, x_3082.y, x_3083.z, x_3083.w);
  let x_3086 : vec4<f32> = x_33.x_CameraViewProjections[0i][2i];
  let x_3088 : vec4<f32> = u_xlat2;
  let x_3091 : vec4<f32> = u_xlat3;
  let x_3093 : vec2<f32> = ((vec2<f32>(x_3086.x, x_3086.y) * vec2<f32>(x_3088.z, x_3088.z)) + vec2<f32>(x_3091.x, x_3091.y));
  let x_3094 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_3093.x, x_3093.y, x_3094.z, x_3094.w);
  let x_3096 : vec3<f32> = u_xlat4;
  let x_3097 : vec4<f32> = u_xlat2;
  u_xlat2.x = dot(x_3096, vec3<f32>(x_3097.x, x_3097.y, x_3097.z));
  let x_3102 : f32 = u_xlat2.x;
  u_xlat10.x = (1.0f / -(x_3102));
  let x_3106 : vec4<f32> = u_xlat3;
  let x_3108 : vec2<f32> = u_xlat10;
  u_xlat10 = ((vec2<f32>(x_3106.x, x_3106.y) * vec2<f32>(x_3108.x, x_3108.x)) + vec2<f32>(1.0f, 1.0f));
  let x_3112 : vec2<f32> = u_xlat10;
  u_xlat10 = (x_3112 * vec2<f32>(0.5f, 0.5f));
  let x_3114 : vec2<f32> = u_xlat10;
  u_xlat10 = clamp(x_3114, vec2<f32>(0.0f, 0.0f), vec2<f32>(1.0f, 1.0f));
  let x_3121 : vec2<f32> = u_xlat10;
  let x_3123 : f32 = x_33.x_GlobalMipBias.x;
  let x_3124 : vec4<f32> = textureSampleBias(x_CameraDepthTexture, sampler_CameraDepthTexture, x_3121, x_3123);
  u_xlat26 = x_3124.x;
  let x_3127 : f32 = x_33.x_ZBufferParams.z;
  let x_3128 : f32 = u_xlat26;
  let x_3131 : f32 = x_33.x_ZBufferParams.w;
  u_xlat3.x = ((x_3127 * x_3128) + x_3131);
  let x_3135 : f32 = u_xlat3.x;
  u_xlat3.x = (1.0f / x_3135);
  let x_3139 : f32 = u_xlat2.x;
  let x_3142 : f32 = u_xlat3.x;
  u_xlat2.x = (-(x_3139) + -(x_3142));
  let x_3147 : f32 = u_xlat2.x;
  let x_3150 : f32 = x_33.x_SSAOParams.y;
  u_xlatb2.x = (abs(x_3147) < x_3150);
  let x_3153 : f32 = u_xlat26;
  u_xlatb2.w = (0.00001f < x_3153);
  let x_3157 : bool = u_xlatb2.x;
  u_xlat2.x = select(0.0f, 1.0f, x_3157);
  let x_3161 : bool = u_xlatb2.w;
  u_xlat2.w = select(0.0f, 1.0f, x_3161);
  let x_3165 : f32 = u_xlat2.w;
  let x_3167 : f32 = u_xlat2.x;
  u_xlat2.x = (x_3165 * x_3167);
  let x_3171 : f32 = u_xlat10.y;
  u_xlat18.x = (-(x_3171) + 1.0f);
  let x_3176 : f32 = u_xlat3.x;
  let x_3178 : f32 = x_33.x_ProjectionParams2.x;
  u_xlat26 = (x_3176 * x_3178);
  let x_3181 : vec4<f32> = x_33.x_CameraViewXExtent[0i];
  let x_3183 : vec2<f32> = u_xlat10;
  let x_3187 : vec4<f32> = x_33.x_CameraViewTopLeftCorner[0i];
  let x_3189 : vec3<f32> = ((vec3<f32>(x_3181.x, x_3181.y, x_3181.z) * vec3<f32>(x_3183.x, x_3183.x, x_3183.x)) + vec3<f32>(x_3187.x, x_3187.y, x_3187.z));
  let x_3190 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_3189.x, x_3189.y, x_3189.z, x_3190.w);
  let x_3193 : vec4<f32> = x_33.x_CameraViewYExtent[0i];
  let x_3195 : vec2<f32> = u_xlat18;
  let x_3198 : vec4<f32> = u_xlat3;
  let x_3200 : vec3<f32> = ((vec3<f32>(x_3193.x, x_3193.y, x_3193.z) * vec3<f32>(x_3195.x, x_3195.x, x_3195.x)) + vec3<f32>(x_3198.x, x_3198.y, x_3198.z));
  let x_3201 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_3200.x, x_3200.y, x_3200.z, x_3201.w);
  let x_3203 : vec4<f32> = u_xlat3;
  let x_3205 : f32 = u_xlat26;
  let x_3208 : vec3<f32> = u_xlat8;
  u_xlat8 = ((vec3<f32>(x_3203.x, x_3203.y, x_3203.z) * vec3<f32>(x_3205, x_3205, x_3205)) + -(x_3208));
  let x_3211 : vec3<f32> = u_xlat8;
  let x_3212 : vec3<f32> = u_xlat1;
  u_xlat10.x = dot(x_3211, x_3212);
  let x_3215 : f32 = u_xlat0;
  let x_3219 : f32 = u_xlat10.x;
  u_xlat10.x = ((-(x_3215) * 0.004f) + x_3219);
  let x_3223 : f32 = u_xlat10.x;
  u_xlat10.x = max(x_3223, 0.0f);
  let x_3226 : vec3<f32> = u_xlat8;
  let x_3227 : vec3<f32> = u_xlat8;
  u_xlat8.x = dot(x_3226, x_3227);
  let x_3231 : f32 = u_xlat8.x;
  u_xlat8.x = (x_3231 + 0.0001f);
  let x_3235 : f32 = u_xlat8.x;
  u_xlat8.x = (1.0f / x_3235);
  let x_3239 : f32 = u_xlat8.x;
  let x_3241 : f32 = u_xlat10.x;
  u_xlat8.x = (x_3239 * x_3241);
  let x_3245 : f32 = u_xlat8.x;
  let x_3247 : f32 = u_xlat2.x;
  let x_3249 : f32 = u_xlat25;
  u_xlat8.x = ((x_3245 * x_3247) + x_3249);
  let x_3253 : f32 = u_xlat8.x;
  let x_3255 : f32 = x_33.x_SSAOParams.y;
  u_xlat8.x = (x_3253 * x_3255);
  let x_3259 : f32 = x_33.x_SSAOParams.w;
  u_xlat16 = (1.0f / x_3259);
  let x_3261 : f32 = u_xlat0;
  let x_3263 : f32 = u_xlat16;
  u_xlat0 = ((-(x_3261) * x_3263) + 1.0f);
  let x_3266 : f32 = u_xlat0;
  let x_3267 : f32 = u_xlat0;
  u_xlat0 = (x_3266 * x_3267);
  let x_3270 : f32 = u_xlat8.x;
  let x_3272 : f32 = x_33.x_SSAOParams.x;
  u_xlat8.x = (x_3270 * x_3272);
  let x_3275 : f32 = u_xlat0;
  let x_3277 : f32 = u_xlat8.x;
  u_xlat0 = (x_3275 * x_3277);
  let x_3279 : f32 = u_xlat0;
  u_xlat0 = (x_3279 * 0.083333336f);
  let x_3281 : f32 = u_xlat0;
  u_xlat0 = clamp(x_3281, 0.0f, 1.0f);
  let x_3283 : f32 = u_xlat0;
  u_xlat0 = log2(x_3283);
  let x_3285 : f32 = u_xlat0;
  u_xlat0 = (x_3285 * 0.600000024f);
  let x_3288 : f32 = u_xlat0;
  SV_Target0.x = exp2(x_3288);
  let x_3292 : vec3<f32> = u_xlat1;
  let x_3294 : vec3<f32> = ((x_3292 * vec3<f32>(0.5f, 0.5f, 0.5f)) + vec3<f32>(0.5f, 0.5f, 0.5f));
  let x_3295 : vec4<f32> = SV_Target0;
  SV_Target0 = vec4<f32>(x_3295.x, x_3294.x, x_3294.y, x_3294.z);
  return;
}

struct main_out {
  @location(0)
  SV_Target0_1 : vec4<f32>,
}

@fragment
fn main(@location(0) vs_TEXCOORD0_param : vec2<f32>, @builtin(position) gl_FragCoord_param : vec4<f32>) -> main_out {
  vs_TEXCOORD0 = vs_TEXCOORD0_param;
  gl_FragCoord = gl_FragCoord_param;
  main_1();
  return main_out(SV_Target0);
}

