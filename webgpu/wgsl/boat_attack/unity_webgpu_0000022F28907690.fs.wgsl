struct PGlobals {
  x_ScaledScreenParams : vec4<f32>,
  x_GlobalMipBias : vec2<f32>,
  x_AlphaToMaskAvailable : f32,
  @size(4)
  padding : u32,
  x_MainLightPosition : vec4<f32>,
  x_MainLightColor : vec4<f32>,
  x_AmbientOcclusionParam : vec4<f32>,
  x_AdditionalLightsCount : vec4<f32>,
  x_WorldSpaceCameraPos : vec3<f32>,
  @size(4)
  padding_1 : u32,
  x_ProjectionParams : vec4<f32>,
  x_ScreenParams : vec4<f32>,
  unity_OrthoParams : vec4<f32>,
  x_ScaleBiasRt : vec4<f32>,
  unity_FogParams : vec4<f32>,
  unity_FogColor : vec4<f32>,
  unity_MatrixV : mat4x4<f32>,
}

type Arr = array<vec4<f32>, 2u>;

struct UnityPerDraw {
  unity_ObjectToWorld : mat4x4<f32>,
  unity_WorldToObject : mat4x4<f32>,
  unity_LODFade : vec4<f32>,
  unity_WorldTransformParams : vec4<f32>,
  unity_RenderingLayer : vec4<f32>,
  unity_LightData : vec4<f32>,
  unity_LightIndices : Arr,
  unity_ProbesOcclusion : vec4<f32>,
  unity_SpecCube0_HDR : vec4<f32>,
  unity_SpecCube1_HDR : vec4<f32>,
  unity_SpecCube0_BoxMax : vec4<f32>,
  unity_SpecCube0_BoxMin : vec4<f32>,
  unity_SpecCube0_ProbePosition : vec4<f32>,
  unity_SpecCube1_BoxMax : vec4<f32>,
  unity_SpecCube1_BoxMin : vec4<f32>,
  unity_SpecCube1_ProbePosition : vec4<f32>,
  unity_LightmapST : vec4<f32>,
  unity_DynamicLightmapST : vec4<f32>,
  unity_SHAr : vec4<f32>,
  unity_SHAg : vec4<f32>,
  unity_SHAb : vec4<f32>,
  unity_SHBr : vec4<f32>,
  unity_SHBg : vec4<f32>,
  unity_SHBb : vec4<f32>,
  unity_SHC : vec4<f32>,
  unity_RendererBounds_Min : vec4<f32>,
  unity_RendererBounds_Max : vec4<f32>,
  unity_MatrixPreviousM : mat4x4<f32>,
  unity_MatrixPreviousMI : mat4x4<f32>,
  unity_MotionVectorsParams : vec4<f32>,
  unity_SpriteColor : vec4<f32>,
  unity_SpriteProps : vec4<f32>,
}

struct UnityPerMaterial {
  Texture2D_B222E8F_TexelSize : vec4<f32>,
  Color_C30C7CA3 : vec4<f32>,
  Texture2D_D9BFD5F1_TexelSize : vec4<f32>,
}

type Arr_1 = array<mat4x4<f32>, 5u>;

struct MainLightShadows {
  x_MainLightWorldToShadow : Arr_1,
  x_CascadeShadowSplitSpheres0 : vec4<f32>,
  x_CascadeShadowSplitSpheres1 : vec4<f32>,
  x_CascadeShadowSplitSpheres2 : vec4<f32>,
  x_CascadeShadowSplitSpheres3 : vec4<f32>,
  x_CascadeShadowSplitSphereRadii : vec4<f32>,
  x_MainLightShadowOffset0 : vec4<f32>,
  x_MainLightShadowOffset1 : vec4<f32>,
  x_MainLightShadowParams : vec4<f32>,
  x_MainLightShadowmapSize : vec4<f32>,
}

struct strided_arr {
  @size(16)
  el : f32,
}

type Arr_2 = array<strided_arr, 8u>;

struct LightCookies {
  x_MainLightWorldToLight : mat4x4<f32>,
  x_AdditionalLightsCookieEnableBits : Arr_2,
  x_MainLightCookieTextureFormat : f32,
  x_AdditionalLightsCookieAtlasTextureFormat : f32,
}

type Arr_3 = array<vec4<f32>, 256u>;

type Arr_4 = array<vec4<f32>, 256u>;

type Arr_5 = array<vec4<f32>, 256u>;

type Arr_6 = array<vec4<f32>, 256u>;

type Arr_7 = array<vec4<f32>, 256u>;

struct strided_arr_1 {
  @size(16)
  el : f32,
}

type Arr_8 = array<strided_arr_1, 256u>;

type Arr_9 = array<vec4<f32>, 256u>;

type Arr_10 = array<strided_arr_1, 256u>;

struct AdditionalLights {
  x_AdditionalLightsPosition : Arr_9,
  x_AdditionalLightsColor : Arr_9,
  x_AdditionalLightsAttenuation : Arr_9,
  x_AdditionalLightsSpotDir : Arr_9,
  x_AdditionalLightsOcclusionProbes : Arr_9,
  x_AdditionalLightsLayerMasks : Arr_10,
}

type Arr_11 = array<mat4x4<f32>, 256u>;

struct AdditionalLightsCookies {
  x_AdditionalLightsWorldToLights : Arr_11,
  x_AdditionalLightsCookieAtlasUVRects : Arr_9,
  x_AdditionalLightsLightTypes : Arr_10,
}

var<private> gl_FragCoord : vec4<f32>;

var<private> vs_INTERP1 : vec3<f32>;

@group(1) @binding(0) var<uniform> x_90 : PGlobals;

var<private> vs_INTERP0 : vec3<f32>;

@group(1) @binding(2) var<uniform> x_145 : UnityPerDraw;

@group(0) @binding(7) var Texture2D_B222E8F : texture_2d<f32>;

@group(0) @binding(15) var samplerTexture2D_B222E8F : sampler;

var<private> vs_INTERP3 : vec4<f32>;

@group(1) @binding(6) var<uniform> x_199 : UnityPerMaterial;

@group(0) @binding(8) var Texture2D_D9BFD5F1 : texture_2d<f32>;

@group(0) @binding(16) var samplerTexture2D_D9BFD5F1 : sampler;

var<private> vs_INTERP4 : vec4<f32>;

@group(1) @binding(3) var<uniform> x_255 : MainLightShadows;

@group(0) @binding(4) var x_MainLightShadowmapTexture : texture_depth_2d;

@group(0) @binding(12) var sampler_MainLightShadowmapTexture : sampler_comparison;

var<private> vs_INTERP2 : vec4<f32>;

@group(0) @binding(2) var unity_LightmapInd : texture_2d<f32>;

@group(0) @binding(10) var samplerunity_Lightmap : sampler;

var<private> vs_INTERP5 : vec2<f32>;

@group(0) @binding(1) var unity_Lightmap : texture_2d<f32>;

@group(0) @binding(3) var x_ScreenSpaceOcclusionTexture : texture_2d<f32>;

@group(0) @binding(11) var sampler_ScreenSpaceOcclusionTexture : sampler;

@group(1) @binding(4) var<uniform> x_3494 : LightCookies;

@group(0) @binding(5) var x_MainLightCookieTexture : texture_2d<f32>;

@group(0) @binding(13) var sampler_MainLightCookieTexture : sampler;

@group(0) @binding(0) var unity_SpecCube0 : texture_cube<f32>;

@group(0) @binding(9) var samplerunity_SpecCube0 : sampler;

@group(1) @binding(1) var<uniform> x_3926 : AdditionalLights;

@group(1) @binding(5) var<uniform> x_4031 : AdditionalLightsCookies;

@group(0) @binding(6) var x_AdditionalLightsCookieAtlasTexture : texture_2d<f32>;

@group(0) @binding(14) var sampler_AdditionalLightsCookieAtlasTexture : sampler;

var<private> SV_Target0 : vec4<f32>;

fn int_bitfieldInsert_i1_i1_i1_i1_(base : ptr<function, i32>, insert : ptr<function, i32>, offset_1 : ptr<function, i32>, bits : ptr<function, i32>) -> i32 {
  var mask : u32;
  let x_19 : i32 = *(bits);
  let x_23 : i32 = *(offset_1);
  mask = (~((4294967295u << bitcast<u32>(x_19))) << bitcast<u32>(x_23));
  let x_26 : i32 = *(base);
  let x_28 : u32 = mask;
  let x_31 : i32 = *(insert);
  let x_33 : i32 = *(offset_1);
  let x_36 : u32 = mask;
  return bitcast<i32>(((bitcast<u32>(x_26) & ~(x_28)) | ((bitcast<u32>(x_31) << bitcast<u32>(x_33)) & x_36)));
}

fn main_1() {
  var hlslcc_FragCoord : vec4<f32>;
  var u_xlat0 : vec3<f32>;
  var u_xlatb66 : bool;
  var u_xlat1 : vec3<f32>;
  var u_xlat67 : f32;
  var u_xlat2 : vec3<f32>;
  var x_133 : vec3<f32>;
  var u_xlat66 : f32;
  var u_xlat3 : vec4<f32>;
  var u_xlat4 : vec3<f32>;
  var u_xlat5 : vec4<f32>;
  var u_xlat6 : vec4<f32>;
  var u_xlat27 : vec3<f32>;
  var u_xlat7 : vec4<f32>;
  var u_xlat8 : vec4<f32>;
  var u_xlat9 : vec4<f32>;
  var u_xlatb6 : vec4<bool>;
  var u_xlatu66 : u32;
  var u_xlati66 : i32;
  var u_xlatb67 : bool;
  var txVec0 : vec3<f32>;
  var txVec1 : vec3<f32>;
  var txVec2 : vec3<f32>;
  var txVec3 : vec3<f32>;
  var u_xlatb68 : bool;
  var u_xlat51 : vec2<f32>;
  var u_xlat53 : vec2<f32>;
  var u_xlat10 : vec4<f32>;
  var u_xlat11 : vec4<f32>;
  var u_xlat12 : vec4<f32>;
  var u_xlat13 : vec4<f32>;
  var u_xlat14 : vec4<f32>;
  var u_xlat15 : vec4<f32>;
  var u_xlat68 : f32;
  var txVec4 : vec3<f32>;
  var u_xlat70 : f32;
  var txVec5 : vec3<f32>;
  var u_xlat72 : f32;
  var txVec6 : vec3<f32>;
  var txVec7 : vec3<f32>;
  var txVec8 : vec3<f32>;
  var txVec9 : vec3<f32>;
  var txVec10 : vec3<f32>;
  var txVec11 : vec3<f32>;
  var txVec12 : vec3<f32>;
  var u_xlat30 : vec3<f32>;
  var u_xlat16 : vec4<f32>;
  var u_xlat17 : vec4<f32>;
  var u_xlat31 : vec3<f32>;
  var u_xlat59 : vec2<f32>;
  var u_xlat54 : vec2<f32>;
  var u_xlat18 : vec4<f32>;
  var u_xlat19 : vec4<f32>;
  var u_xlat20 : vec4<f32>;
  var txVec13 : vec3<f32>;
  var txVec14 : vec3<f32>;
  var txVec15 : vec3<f32>;
  var txVec16 : vec3<f32>;
  var txVec17 : vec3<f32>;
  var txVec18 : vec3<f32>;
  var txVec19 : vec3<f32>;
  var txVec20 : vec3<f32>;
  var txVec21 : vec3<f32>;
  var txVec22 : vec3<f32>;
  var txVec23 : vec3<f32>;
  var txVec24 : vec3<f32>;
  var txVec25 : vec3<f32>;
  var txVec26 : vec3<f32>;
  var txVec27 : vec3<f32>;
  var txVec28 : vec3<f32>;
  var txVec29 : vec3<f32>;
  var u_xlatb70 : bool;
  var u_xlatb72 : bool;
  var x_1714 : f32;
  var u_xlatb3 : bool;
  var u_xlatu2 : vec3<u32>;
  var u_xlatu46 : u32;
  var u_xlatu25 : u32;
  var u_xlati46 : i32;
  var u_xlati24 : i32;
  var u_xlatu24 : u32;
  var u_xlati2 : i32;
  var param : i32;
  var param_1 : i32;
  var param_2 : i32;
  var param_3 : i32;
  var u_xlat24 : vec2<f32>;
  var x_1847 : f32;
  var u_xlatb24 : vec2<bool>;
  var x_1878 : f32;
  var u_xlat46 : f32;
  var u_xlatb2 : bool;
  var x_1925 : f32;
  var u_xlat69 : f32;
  var u_xlat29 : f32;
  var txVec30 : vec3<f32>;
  var txVec31 : vec3<f32>;
  var txVec32 : vec3<f32>;
  var txVec33 : vec3<f32>;
  var u_xlatb73 : bool;
  var u_xlat52 : vec2<f32>;
  var u_xlat73 : f32;
  var txVec34 : vec3<f32>;
  var txVec35 : vec3<f32>;
  var txVec36 : vec3<f32>;
  var txVec37 : vec3<f32>;
  var txVec38 : vec3<f32>;
  var txVec39 : vec3<f32>;
  var txVec40 : vec3<f32>;
  var txVec41 : vec3<f32>;
  var txVec42 : vec3<f32>;
  var u_xlat32 : vec2<f32>;
  var u_xlat60 : vec2<f32>;
  var u_xlat55 : vec2<f32>;
  var u_xlat21 : vec4<f32>;
  var txVec43 : vec3<f32>;
  var txVec44 : vec3<f32>;
  var txVec45 : vec3<f32>;
  var txVec46 : vec3<f32>;
  var txVec47 : vec3<f32>;
  var txVec48 : vec3<f32>;
  var txVec49 : vec3<f32>;
  var txVec50 : vec3<f32>;
  var txVec51 : vec3<f32>;
  var txVec52 : vec3<f32>;
  var txVec53 : vec3<f32>;
  var txVec54 : vec3<f32>;
  var txVec55 : vec3<f32>;
  var txVec56 : vec3<f32>;
  var txVec57 : vec3<f32>;
  var txVec58 : vec3<f32>;
  var txVec59 : vec3<f32>;
  var x_3576 : f32;
  var x_3587 : vec3<f32>;
  var u_xlatb46 : vec2<bool>;
  var u_xlatu_loop_1 : u32;
  var u_xlatu70 : u32;
  var u_xlati71 : i32;
  var indexable : array<vec4<u32>, 4u>;
  var u_xlat71 : f32;
  var u_xlat74 : f32;
  var u_xlatu74 : u32;
  var u_xlati76 : i32;
  var u_xlati74 : i32;
  var u_xlati11 : i32;
  var u_xlat33 : vec3<f32>;
  var u_xlatb74 : bool;
  var u_xlatb11 : vec4<bool>;
  var x_4333 : f32;
  var x_4346 : f32;
  var x_4408 : f32;
  var x_4419 : vec3<f32>;
  var u_xlat_precise_vec4 : vec4<f32>;
  var u_xlat_precise_ivec4 : vec4<i32>;
  var u_xlat_precise_bvec4 : vec4<bool>;
  var u_xlat_precise_uvec4 : vec4<u32>;
  let x_49 : vec4<f32> = gl_FragCoord;
  let x_50 : vec3<f32> = vec3<f32>(x_49.x, x_49.y, x_49.z);
  let x_55 : f32 = gl_FragCoord.w;
  hlslcc_FragCoord = vec4<f32>(x_50.x, x_50.y, x_50.z, (1.0f / x_55));
  let x_65 : vec3<f32> = vs_INTERP1;
  let x_66 : vec3<f32> = vs_INTERP1;
  u_xlat0.x = dot(x_65, x_66);
  let x_72 : f32 = u_xlat0.x;
  u_xlat0.x = sqrt(x_72);
  let x_76 : f32 = u_xlat0.x;
  u_xlat0.x = (1.0f / x_76);
  let x_79 : vec3<f32> = u_xlat0;
  let x_81 : vec3<f32> = vs_INTERP1;
  u_xlat0 = (vec3<f32>(x_79.x, x_79.x, x_79.x) * x_81);
  let x_94 : f32 = x_90.unity_OrthoParams.w;
  u_xlatb66 = (x_94 == 0.0f);
  let x_99 : vec3<f32> = vs_INTERP0;
  let x_104 : vec3<f32> = x_90.x_WorldSpaceCameraPos;
  u_xlat1 = (-(x_99) + x_104);
  let x_107 : vec3<f32> = u_xlat1;
  let x_108 : vec3<f32> = u_xlat1;
  u_xlat67 = dot(x_107, x_108);
  let x_110 : f32 = u_xlat67;
  u_xlat67 = inverseSqrt(x_110);
  let x_112 : f32 = u_xlat67;
  let x_114 : vec3<f32> = u_xlat1;
  u_xlat1 = (vec3<f32>(x_112, x_112, x_112) * x_114);
  let x_121 : f32 = x_90.unity_MatrixV[0i].z;
  u_xlat2.x = x_121;
  let x_125 : f32 = x_90.unity_MatrixV[1i].z;
  u_xlat2.y = x_125;
  let x_130 : f32 = x_90.unity_MatrixV[2i].z;
  u_xlat2.z = x_130;
  let x_132 : bool = u_xlatb66;
  if (x_132) {
    let x_136 : vec3<f32> = u_xlat1;
    x_133 = x_136;
  } else {
    let x_138 : vec3<f32> = u_xlat2;
    x_133 = x_138;
  }
  let x_139 : vec3<f32> = x_133;
  u_xlat1 = x_139;
  let x_140 : vec3<f32> = u_xlat1;
  let x_148 : vec4<f32> = x_145.unity_WorldToObject[1i];
  u_xlat2 = (vec3<f32>(x_140.y, x_140.y, x_140.y) * vec3<f32>(x_148.x, x_148.y, x_148.z));
  let x_152 : vec4<f32> = x_145.unity_WorldToObject[0i];
  let x_154 : vec3<f32> = u_xlat1;
  let x_157 : vec3<f32> = u_xlat2;
  u_xlat2 = ((vec3<f32>(x_152.x, x_152.y, x_152.z) * vec3<f32>(x_154.x, x_154.x, x_154.x)) + x_157);
  let x_160 : vec4<f32> = x_145.unity_WorldToObject[2i];
  let x_162 : vec3<f32> = u_xlat1;
  let x_165 : vec3<f32> = u_xlat2;
  u_xlat2 = ((vec3<f32>(x_160.x, x_160.y, x_160.z) * vec3<f32>(x_162.z, x_162.z, x_162.z)) + x_165);
  let x_168 : vec3<f32> = u_xlat2;
  let x_169 : vec3<f32> = u_xlat2;
  u_xlat66 = dot(x_168, x_169);
  let x_171 : f32 = u_xlat66;
  u_xlat66 = inverseSqrt(x_171);
  let x_173 : f32 = u_xlat66;
  let x_175 : vec3<f32> = u_xlat2;
  u_xlat2 = (vec3<f32>(x_173, x_173, x_173) * x_175);
  let x_189 : vec4<f32> = vs_INTERP3;
  let x_192 : f32 = x_90.x_GlobalMipBias.x;
  let x_193 : vec4<f32> = textureSampleBias(Texture2D_B222E8F, samplerTexture2D_B222E8F, vec2<f32>(x_189.x, x_189.y), x_192);
  u_xlat3 = x_193;
  let x_195 : vec4<f32> = u_xlat3;
  let x_201 : vec4<f32> = x_199.Color_C30C7CA3;
  u_xlat4 = (vec3<f32>(x_195.x, x_195.y, x_195.z) * vec3<f32>(x_201.x, x_201.y, x_201.z));
  let x_210 : vec4<f32> = vs_INTERP3;
  let x_213 : f32 = x_90.x_GlobalMipBias.x;
  let x_214 : vec4<f32> = textureSampleBias(Texture2D_D9BFD5F1, samplerTexture2D_D9BFD5F1, vec2<f32>(x_210.x, x_210.y), x_213);
  u_xlat5 = vec4<f32>(x_214.w, x_214.x, x_214.y, x_214.z);
  let x_217 : vec4<f32> = u_xlat5;
  u_xlat6 = ((vec4<f32>(x_217.y, x_217.z, x_217.w, x_217.x) * vec4<f32>(2.0f, 2.0f, 2.0f, 2.0f)) + vec4<f32>(-1.0f, -1.0f, -1.0f, -1.0f));
  let x_225 : vec4<f32> = u_xlat6;
  let x_226 : vec4<f32> = u_xlat6;
  u_xlat66 = dot(x_225, x_226);
  let x_228 : f32 = u_xlat66;
  u_xlat66 = inverseSqrt(x_228);
  let x_231 : f32 = u_xlat66;
  let x_233 : vec4<f32> = u_xlat6;
  u_xlat27 = (vec3<f32>(x_231, x_231, x_231) * vec3<f32>(x_233.x, x_233.y, x_233.z));
  let x_238 : f32 = vs_INTERP4.y;
  u_xlat66 = (x_238 * 200.0f);
  let x_241 : f32 = u_xlat66;
  u_xlat66 = min(x_241, 1.0f);
  let x_243 : f32 = u_xlat66;
  let x_245 : vec4<f32> = u_xlat3;
  let x_247 : vec3<f32> = (vec3<f32>(x_243, x_243, x_243) * vec3<f32>(x_245.x, x_245.y, x_245.z));
  let x_248 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_247.x, x_247.y, x_247.z, x_248.w);
  let x_250 : vec3<f32> = vs_INTERP0;
  let x_257 : vec4<f32> = x_255.x_CascadeShadowSplitSpheres0;
  let x_260 : vec3<f32> = (x_250 + -(vec3<f32>(x_257.x, x_257.y, x_257.z)));
  let x_261 : vec4<f32> = u_xlat6;
  u_xlat6 = vec4<f32>(x_260.x, x_260.y, x_260.z, x_261.w);
  let x_264 : vec3<f32> = vs_INTERP0;
  let x_266 : vec4<f32> = x_255.x_CascadeShadowSplitSpheres1;
  let x_269 : vec3<f32> = (x_264 + -(vec3<f32>(x_266.x, x_266.y, x_266.z)));
  let x_270 : vec4<f32> = u_xlat7;
  u_xlat7 = vec4<f32>(x_269.x, x_269.y, x_269.z, x_270.w);
  let x_273 : vec3<f32> = vs_INTERP0;
  let x_276 : vec4<f32> = x_255.x_CascadeShadowSplitSpheres2;
  let x_279 : vec3<f32> = (x_273 + -(vec3<f32>(x_276.x, x_276.y, x_276.z)));
  let x_280 : vec4<f32> = u_xlat8;
  u_xlat8 = vec4<f32>(x_279.x, x_279.y, x_279.z, x_280.w);
  let x_283 : vec3<f32> = vs_INTERP0;
  let x_286 : vec4<f32> = x_255.x_CascadeShadowSplitSpheres3;
  let x_289 : vec3<f32> = (x_283 + -(vec3<f32>(x_286.x, x_286.y, x_286.z)));
  let x_290 : vec4<f32> = u_xlat9;
  u_xlat9 = vec4<f32>(x_289.x, x_289.y, x_289.z, x_290.w);
  let x_292 : vec4<f32> = u_xlat6;
  let x_294 : vec4<f32> = u_xlat6;
  u_xlat6.x = dot(vec3<f32>(x_292.x, x_292.y, x_292.z), vec3<f32>(x_294.x, x_294.y, x_294.z));
  let x_298 : vec4<f32> = u_xlat7;
  let x_300 : vec4<f32> = u_xlat7;
  u_xlat6.y = dot(vec3<f32>(x_298.x, x_298.y, x_298.z), vec3<f32>(x_300.x, x_300.y, x_300.z));
  let x_304 : vec4<f32> = u_xlat8;
  let x_306 : vec4<f32> = u_xlat8;
  u_xlat6.z = dot(vec3<f32>(x_304.x, x_304.y, x_304.z), vec3<f32>(x_306.x, x_306.y, x_306.z));
  let x_310 : vec4<f32> = u_xlat9;
  let x_312 : vec4<f32> = u_xlat9;
  u_xlat6.w = dot(vec3<f32>(x_310.x, x_310.y, x_310.z), vec3<f32>(x_312.x, x_312.y, x_312.z));
  let x_319 : vec4<f32> = u_xlat6;
  let x_322 : vec4<f32> = x_255.x_CascadeShadowSplitSphereRadii;
  u_xlatb6 = (x_319 < x_322);
  let x_325 : bool = u_xlatb6.x;
  u_xlat7.x = select(0.0f, 1.0f, x_325);
  let x_329 : bool = u_xlatb6.y;
  u_xlat7.y = select(0.0f, 1.0f, x_329);
  let x_333 : bool = u_xlatb6.z;
  u_xlat7.z = select(0.0f, 1.0f, x_333);
  let x_337 : bool = u_xlatb6.w;
  u_xlat7.w = select(0.0f, 1.0f, x_337);
  let x_341 : bool = u_xlatb6.x;
  u_xlat6.x = select(-0.0f, -1.0f, x_341);
  let x_346 : bool = u_xlatb6.y;
  u_xlat6.y = select(-0.0f, -1.0f, x_346);
  let x_350 : bool = u_xlatb6.z;
  u_xlat6.z = select(-0.0f, -1.0f, x_350);
  let x_353 : vec4<f32> = u_xlat6;
  let x_355 : vec4<f32> = u_xlat7;
  let x_357 : vec3<f32> = (vec3<f32>(x_353.x, x_353.y, x_353.z) + vec3<f32>(x_355.y, x_355.z, x_355.w));
  let x_358 : vec4<f32> = u_xlat6;
  u_xlat6 = vec4<f32>(x_357.x, x_357.y, x_357.z, x_358.w);
  let x_360 : vec4<f32> = u_xlat6;
  let x_363 : vec3<f32> = max(vec3<f32>(x_360.x, x_360.y, x_360.z), vec3<f32>(0.0f, 0.0f, 0.0f));
  let x_364 : vec4<f32> = u_xlat7;
  u_xlat7 = vec4<f32>(x_364.x, x_363.x, x_363.y, x_363.z);
  let x_366 : vec4<f32> = u_xlat7;
  u_xlat66 = dot(x_366, vec4<f32>(4.0f, 3.0f, 2.0f, 1.0f));
  let x_371 : f32 = u_xlat66;
  u_xlat66 = (-(x_371) + 4.0f);
  let x_375 : f32 = u_xlat66;
  u_xlatu66 = u32(x_375);
  let x_378 : u32 = u_xlatu66;
  u_xlati66 = (bitcast<i32>(x_378) << bitcast<u32>(2i));
  let x_381 : vec3<f32> = vs_INTERP0;
  let x_383 : i32 = u_xlati66;
  let x_386 : i32 = u_xlati66;
  let x_390 : vec4<f32> = x_255.x_MainLightWorldToShadow[((x_383 + 1i) / 4i)][((x_386 + 1i) % 4i)];
  let x_392 : vec3<f32> = (vec3<f32>(x_381.y, x_381.y, x_381.y) * vec3<f32>(x_390.x, x_390.y, x_390.z));
  let x_393 : vec4<f32> = u_xlat6;
  u_xlat6 = vec4<f32>(x_392.x, x_392.y, x_392.z, x_393.w);
  let x_395 : i32 = u_xlati66;
  let x_397 : i32 = u_xlati66;
  let x_400 : vec4<f32> = x_255.x_MainLightWorldToShadow[(x_395 / 4i)][(x_397 % 4i)];
  let x_402 : vec3<f32> = vs_INTERP0;
  let x_405 : vec4<f32> = u_xlat6;
  let x_407 : vec3<f32> = ((vec3<f32>(x_400.x, x_400.y, x_400.z) * vec3<f32>(x_402.x, x_402.x, x_402.x)) + vec3<f32>(x_405.x, x_405.y, x_405.z));
  let x_408 : vec4<f32> = u_xlat6;
  u_xlat6 = vec4<f32>(x_407.x, x_407.y, x_407.z, x_408.w);
  let x_410 : i32 = u_xlati66;
  let x_413 : i32 = u_xlati66;
  let x_417 : vec4<f32> = x_255.x_MainLightWorldToShadow[((x_410 + 2i) / 4i)][((x_413 + 2i) % 4i)];
  let x_419 : vec3<f32> = vs_INTERP0;
  let x_422 : vec4<f32> = u_xlat6;
  let x_424 : vec3<f32> = ((vec3<f32>(x_417.x, x_417.y, x_417.z) * vec3<f32>(x_419.z, x_419.z, x_419.z)) + vec3<f32>(x_422.x, x_422.y, x_422.z));
  let x_425 : vec4<f32> = u_xlat6;
  u_xlat6 = vec4<f32>(x_424.x, x_424.y, x_424.z, x_425.w);
  let x_427 : vec4<f32> = u_xlat6;
  let x_429 : i32 = u_xlati66;
  let x_432 : i32 = u_xlati66;
  let x_436 : vec4<f32> = x_255.x_MainLightWorldToShadow[((x_429 + 3i) / 4i)][((x_432 + 3i) % 4i)];
  let x_438 : vec3<f32> = (vec3<f32>(x_427.x, x_427.y, x_427.z) + vec3<f32>(x_436.x, x_436.y, x_436.z));
  let x_439 : vec4<f32> = u_xlat6;
  u_xlat6 = vec4<f32>(x_438.x, x_438.y, x_438.z, x_439.w);
  let x_443 : f32 = x_255.x_MainLightShadowParams.y;
  u_xlatb66 = (0.0f < x_443);
  let x_445 : bool = u_xlatb66;
  if (x_445) {
    let x_450 : f32 = x_255.x_MainLightShadowParams.y;
    u_xlatb67 = (x_450 == 1.0f);
    let x_452 : bool = u_xlatb67;
    if (x_452) {
      let x_455 : vec4<f32> = u_xlat6;
      let x_459 : vec4<f32> = x_255.x_MainLightShadowOffset0;
      u_xlat7 = (vec4<f32>(x_455.x, x_455.y, x_455.x, x_455.y) + x_459);
      let x_462 : vec4<f32> = u_xlat7;
      let x_463 : vec2<f32> = vec2<f32>(x_462.x, x_462.y);
      let x_465 : f32 = u_xlat6.z;
      txVec0 = vec3<f32>(x_463.x, x_463.y, x_465);
      let x_477 : vec3<f32> = txVec0;
      let x_479 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_477.xy, x_477.z);
      u_xlat8.x = x_479;
      let x_482 : vec4<f32> = u_xlat7;
      let x_483 : vec2<f32> = vec2<f32>(x_482.z, x_482.w);
      let x_485 : f32 = u_xlat6.z;
      txVec1 = vec3<f32>(x_483.x, x_483.y, x_485);
      let x_492 : vec3<f32> = txVec1;
      let x_494 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_492.xy, x_492.z);
      u_xlat8.y = x_494;
      let x_496 : vec4<f32> = u_xlat6;
      let x_499 : vec4<f32> = x_255.x_MainLightShadowOffset1;
      u_xlat7 = (vec4<f32>(x_496.x, x_496.y, x_496.x, x_496.y) + x_499);
      let x_502 : vec4<f32> = u_xlat7;
      let x_503 : vec2<f32> = vec2<f32>(x_502.x, x_502.y);
      let x_505 : f32 = u_xlat6.z;
      txVec2 = vec3<f32>(x_503.x, x_503.y, x_505);
      let x_512 : vec3<f32> = txVec2;
      let x_514 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_512.xy, x_512.z);
      u_xlat8.z = x_514;
      let x_517 : vec4<f32> = u_xlat7;
      let x_518 : vec2<f32> = vec2<f32>(x_517.z, x_517.w);
      let x_520 : f32 = u_xlat6.z;
      txVec3 = vec3<f32>(x_518.x, x_518.y, x_520);
      let x_527 : vec3<f32> = txVec3;
      let x_529 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_527.xy, x_527.z);
      u_xlat8.w = x_529;
      let x_531 : vec4<f32> = u_xlat8;
      u_xlat67 = dot(x_531, vec4<f32>(0.25f, 0.25f, 0.25f, 0.25f));
    } else {
      let x_538 : f32 = x_255.x_MainLightShadowParams.y;
      u_xlatb68 = (x_538 == 2.0f);
      let x_540 : bool = u_xlatb68;
      if (x_540) {
        let x_543 : vec4<f32> = u_xlat6;
        let x_547 : vec4<f32> = x_255.x_MainLightShadowmapSize;
        let x_552 : vec2<f32> = ((vec2<f32>(x_543.x, x_543.y) * vec2<f32>(x_547.z, x_547.w)) + vec2<f32>(0.5f, 0.5f));
        let x_553 : vec4<f32> = u_xlat7;
        u_xlat7 = vec4<f32>(x_552.x, x_552.y, x_553.z, x_553.w);
        let x_555 : vec4<f32> = u_xlat7;
        let x_557 : vec2<f32> = floor(vec2<f32>(x_555.x, x_555.y));
        let x_558 : vec4<f32> = u_xlat7;
        u_xlat7 = vec4<f32>(x_557.x, x_557.y, x_558.z, x_558.w);
        let x_562 : vec4<f32> = u_xlat6;
        let x_565 : vec4<f32> = x_255.x_MainLightShadowmapSize;
        let x_568 : vec4<f32> = u_xlat7;
        u_xlat51 = ((vec2<f32>(x_562.x, x_562.y) * vec2<f32>(x_565.z, x_565.w)) + -(vec2<f32>(x_568.x, x_568.y)));
        let x_572 : vec2<f32> = u_xlat51;
        u_xlat8 = (vec4<f32>(x_572.x, x_572.x, x_572.y, x_572.y) + vec4<f32>(0.5f, 1.0f, 0.5f, 1.0f));
        let x_576 : vec4<f32> = u_xlat8;
        let x_578 : vec4<f32> = u_xlat8;
        u_xlat9 = (vec4<f32>(x_576.x, x_576.x, x_576.z, x_576.z) * vec4<f32>(x_578.x, x_578.x, x_578.z, x_578.z));
        let x_581 : vec4<f32> = u_xlat9;
        let x_585 : vec2<f32> = (vec2<f32>(x_581.y, x_581.w) * vec2<f32>(0.079999998f, 0.079999998f));
        let x_586 : vec4<f32> = u_xlat8;
        u_xlat8 = vec4<f32>(x_585.x, x_586.y, x_585.y, x_586.w);
        let x_588 : vec4<f32> = u_xlat9;
        let x_591 : vec2<f32> = u_xlat51;
        let x_593 : vec2<f32> = ((vec2<f32>(x_588.x, x_588.z) * vec2<f32>(0.5f, 0.5f)) + -(x_591));
        let x_594 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_593.x, x_593.y, x_594.z, x_594.w);
        let x_597 : vec2<f32> = u_xlat51;
        u_xlat53 = (-(x_597) + vec2<f32>(1.0f, 1.0f));
        let x_602 : vec2<f32> = u_xlat51;
        let x_604 : vec2<f32> = min(x_602, vec2<f32>(0.0f, 0.0f));
        let x_605 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_604.x, x_604.y, x_605.z, x_605.w);
        let x_607 : vec4<f32> = u_xlat10;
        let x_610 : vec4<f32> = u_xlat10;
        let x_613 : vec2<f32> = u_xlat53;
        let x_614 : vec2<f32> = ((-(vec2<f32>(x_607.x, x_607.y)) * vec2<f32>(x_610.x, x_610.y)) + x_613);
        let x_615 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_614.x, x_614.y, x_615.z, x_615.w);
        let x_617 : vec2<f32> = u_xlat51;
        u_xlat51 = max(x_617, vec2<f32>(0.0f, 0.0f));
        let x_619 : vec2<f32> = u_xlat51;
        let x_621 : vec2<f32> = u_xlat51;
        let x_623 : vec4<f32> = u_xlat8;
        u_xlat51 = ((-(x_619) * x_621) + vec2<f32>(x_623.y, x_623.w));
        let x_626 : vec4<f32> = u_xlat10;
        let x_628 : vec2<f32> = (vec2<f32>(x_626.x, x_626.y) + vec2<f32>(1.0f, 1.0f));
        let x_629 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_628.x, x_628.y, x_629.z, x_629.w);
        let x_631 : vec2<f32> = u_xlat51;
        u_xlat51 = (x_631 + vec2<f32>(1.0f, 1.0f));
        let x_634 : vec4<f32> = u_xlat9;
        let x_638 : vec2<f32> = (vec2<f32>(x_634.x, x_634.y) * vec2<f32>(0.159999996f, 0.159999996f));
        let x_639 : vec4<f32> = u_xlat11;
        u_xlat11 = vec4<f32>(x_638.x, x_638.y, x_639.z, x_639.w);
        let x_641 : vec2<f32> = u_xlat53;
        let x_642 : vec2<f32> = (x_641 * vec2<f32>(0.159999996f, 0.159999996f));
        let x_643 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_642.x, x_642.y, x_643.z, x_643.w);
        let x_645 : vec4<f32> = u_xlat10;
        let x_647 : vec2<f32> = (vec2<f32>(x_645.x, x_645.y) * vec2<f32>(0.159999996f, 0.159999996f));
        let x_648 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_647.x, x_647.y, x_648.z, x_648.w);
        let x_651 : vec2<f32> = u_xlat51;
        let x_652 : vec2<f32> = (x_651 * vec2<f32>(0.159999996f, 0.159999996f));
        let x_653 : vec4<f32> = u_xlat12;
        u_xlat12 = vec4<f32>(x_652.x, x_652.y, x_653.z, x_653.w);
        let x_655 : vec4<f32> = u_xlat8;
        u_xlat51 = (vec2<f32>(x_655.y, x_655.w) * vec2<f32>(0.159999996f, 0.159999996f));
        let x_659 : f32 = u_xlat10.x;
        u_xlat11.z = x_659;
        let x_662 : f32 = u_xlat51.x;
        u_xlat11.w = x_662;
        let x_665 : f32 = u_xlat12.x;
        u_xlat9.z = x_665;
        let x_668 : f32 = u_xlat8.x;
        u_xlat9.w = x_668;
        let x_671 : vec4<f32> = u_xlat9;
        let x_673 : vec4<f32> = u_xlat11;
        u_xlat13 = (vec4<f32>(x_671.z, x_671.w, x_671.x, x_671.z) + vec4<f32>(x_673.z, x_673.w, x_673.x, x_673.z));
        let x_677 : f32 = u_xlat11.y;
        u_xlat10.z = x_677;
        let x_680 : f32 = u_xlat51.y;
        u_xlat10.w = x_680;
        let x_683 : f32 = u_xlat9.y;
        u_xlat12.z = x_683;
        let x_686 : f32 = u_xlat8.z;
        u_xlat12.w = x_686;
        let x_688 : vec4<f32> = u_xlat10;
        let x_690 : vec4<f32> = u_xlat12;
        let x_692 : vec3<f32> = (vec3<f32>(x_688.z, x_688.y, x_688.w) + vec3<f32>(x_690.z, x_690.y, x_690.w));
        let x_693 : vec4<f32> = u_xlat8;
        u_xlat8 = vec4<f32>(x_692.x, x_692.y, x_692.z, x_693.w);
        let x_695 : vec4<f32> = u_xlat9;
        let x_697 : vec4<f32> = u_xlat13;
        let x_699 : vec3<f32> = (vec3<f32>(x_695.x, x_695.z, x_695.w) / vec3<f32>(x_697.z, x_697.w, x_697.y));
        let x_700 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_699.x, x_699.y, x_699.z, x_700.w);
        let x_702 : vec4<f32> = u_xlat9;
        let x_708 : vec3<f32> = (vec3<f32>(x_702.x, x_702.y, x_702.z) + vec3<f32>(-2.5f, -0.5f, 1.5f));
        let x_709 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_708.x, x_708.y, x_708.z, x_709.w);
        let x_711 : vec4<f32> = u_xlat12;
        let x_713 : vec4<f32> = u_xlat8;
        let x_715 : vec3<f32> = (vec3<f32>(x_711.z, x_711.y, x_711.w) / vec3<f32>(x_713.x, x_713.y, x_713.z));
        let x_716 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_715.x, x_715.y, x_715.z, x_716.w);
        let x_718 : vec4<f32> = u_xlat10;
        let x_720 : vec3<f32> = (vec3<f32>(x_718.x, x_718.y, x_718.z) + vec3<f32>(-2.5f, -0.5f, 1.5f));
        let x_721 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_720.x, x_720.y, x_720.z, x_721.w);
        let x_723 : vec4<f32> = u_xlat9;
        let x_726 : vec4<f32> = x_255.x_MainLightShadowmapSize;
        let x_728 : vec3<f32> = (vec3<f32>(x_723.y, x_723.x, x_723.z) * vec3<f32>(x_726.x, x_726.x, x_726.x));
        let x_729 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_728.x, x_728.y, x_728.z, x_729.w);
        let x_731 : vec4<f32> = u_xlat10;
        let x_734 : vec4<f32> = x_255.x_MainLightShadowmapSize;
        let x_736 : vec3<f32> = (vec3<f32>(x_731.x, x_731.y, x_731.z) * vec3<f32>(x_734.y, x_734.y, x_734.y));
        let x_737 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_736.x, x_736.y, x_736.z, x_737.w);
        let x_740 : f32 = u_xlat10.x;
        u_xlat9.w = x_740;
        let x_742 : vec4<f32> = u_xlat7;
        let x_745 : vec4<f32> = x_255.x_MainLightShadowmapSize;
        let x_748 : vec4<f32> = u_xlat9;
        u_xlat11 = ((vec4<f32>(x_742.x, x_742.y, x_742.x, x_742.y) * vec4<f32>(x_745.x, x_745.y, x_745.x, x_745.y)) + vec4<f32>(x_748.y, x_748.w, x_748.x, x_748.w));
        let x_751 : vec4<f32> = u_xlat7;
        let x_754 : vec4<f32> = x_255.x_MainLightShadowmapSize;
        let x_757 : vec4<f32> = u_xlat9;
        u_xlat51 = ((vec2<f32>(x_751.x, x_751.y) * vec2<f32>(x_754.x, x_754.y)) + vec2<f32>(x_757.z, x_757.w));
        let x_761 : f32 = u_xlat9.y;
        u_xlat10.w = x_761;
        let x_763 : vec4<f32> = u_xlat10;
        let x_764 : vec2<f32> = vec2<f32>(x_763.y, x_763.z);
        let x_765 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_765.x, x_764.x, x_765.z, x_764.y);
        let x_767 : vec4<f32> = u_xlat7;
        let x_770 : vec4<f32> = x_255.x_MainLightShadowmapSize;
        let x_773 : vec4<f32> = u_xlat9;
        u_xlat12 = ((vec4<f32>(x_767.x, x_767.y, x_767.x, x_767.y) * vec4<f32>(x_770.x, x_770.y, x_770.x, x_770.y)) + vec4<f32>(x_773.x, x_773.y, x_773.z, x_773.y));
        let x_776 : vec4<f32> = u_xlat7;
        let x_779 : vec4<f32> = x_255.x_MainLightShadowmapSize;
        let x_782 : vec4<f32> = u_xlat10;
        u_xlat10 = ((vec4<f32>(x_776.x, x_776.y, x_776.x, x_776.y) * vec4<f32>(x_779.x, x_779.y, x_779.x, x_779.y)) + vec4<f32>(x_782.w, x_782.y, x_782.w, x_782.z));
        let x_785 : vec4<f32> = u_xlat7;
        let x_788 : vec4<f32> = x_255.x_MainLightShadowmapSize;
        let x_791 : vec4<f32> = u_xlat9;
        u_xlat9 = ((vec4<f32>(x_785.x, x_785.y, x_785.x, x_785.y) * vec4<f32>(x_788.x, x_788.y, x_788.x, x_788.y)) + vec4<f32>(x_791.x, x_791.w, x_791.z, x_791.w));
        let x_795 : vec4<f32> = u_xlat8;
        let x_797 : vec4<f32> = u_xlat13;
        u_xlat14 = (vec4<f32>(x_795.x, x_795.x, x_795.x, x_795.y) * vec4<f32>(x_797.z, x_797.w, x_797.y, x_797.z));
        let x_801 : vec4<f32> = u_xlat8;
        let x_803 : vec4<f32> = u_xlat13;
        u_xlat15 = (vec4<f32>(x_801.y, x_801.y, x_801.z, x_801.z) * x_803);
        let x_807 : f32 = u_xlat8.z;
        let x_809 : f32 = u_xlat13.y;
        u_xlat68 = (x_807 * x_809);
        let x_812 : vec4<f32> = u_xlat11;
        let x_813 : vec2<f32> = vec2<f32>(x_812.x, x_812.y);
        let x_815 : f32 = u_xlat6.z;
        txVec4 = vec3<f32>(x_813.x, x_813.y, x_815);
        let x_823 : vec3<f32> = txVec4;
        let x_825 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_823.xy, x_823.z);
        u_xlat70 = x_825;
        let x_827 : vec4<f32> = u_xlat11;
        let x_828 : vec2<f32> = vec2<f32>(x_827.z, x_827.w);
        let x_830 : f32 = u_xlat6.z;
        txVec5 = vec3<f32>(x_828.x, x_828.y, x_830);
        let x_838 : vec3<f32> = txVec5;
        let x_840 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_838.xy, x_838.z);
        u_xlat72 = x_840;
        let x_841 : f32 = u_xlat72;
        let x_843 : f32 = u_xlat14.y;
        u_xlat72 = (x_841 * x_843);
        let x_846 : f32 = u_xlat14.x;
        let x_847 : f32 = u_xlat70;
        let x_849 : f32 = u_xlat72;
        u_xlat70 = ((x_846 * x_847) + x_849);
        let x_852 : vec2<f32> = u_xlat51;
        let x_854 : f32 = u_xlat6.z;
        txVec6 = vec3<f32>(x_852.x, x_852.y, x_854);
        let x_861 : vec3<f32> = txVec6;
        let x_863 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_861.xy, x_861.z);
        u_xlat72 = x_863;
        let x_865 : f32 = u_xlat14.z;
        let x_866 : f32 = u_xlat72;
        let x_868 : f32 = u_xlat70;
        u_xlat70 = ((x_865 * x_866) + x_868);
        let x_871 : vec4<f32> = u_xlat10;
        let x_872 : vec2<f32> = vec2<f32>(x_871.x, x_871.y);
        let x_874 : f32 = u_xlat6.z;
        txVec7 = vec3<f32>(x_872.x, x_872.y, x_874);
        let x_881 : vec3<f32> = txVec7;
        let x_883 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_881.xy, x_881.z);
        u_xlat72 = x_883;
        let x_885 : f32 = u_xlat14.w;
        let x_886 : f32 = u_xlat72;
        let x_888 : f32 = u_xlat70;
        u_xlat70 = ((x_885 * x_886) + x_888);
        let x_891 : vec4<f32> = u_xlat12;
        let x_892 : vec2<f32> = vec2<f32>(x_891.x, x_891.y);
        let x_894 : f32 = u_xlat6.z;
        txVec8 = vec3<f32>(x_892.x, x_892.y, x_894);
        let x_901 : vec3<f32> = txVec8;
        let x_903 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_901.xy, x_901.z);
        u_xlat72 = x_903;
        let x_905 : f32 = u_xlat15.x;
        let x_906 : f32 = u_xlat72;
        let x_908 : f32 = u_xlat70;
        u_xlat70 = ((x_905 * x_906) + x_908);
        let x_911 : vec4<f32> = u_xlat12;
        let x_912 : vec2<f32> = vec2<f32>(x_911.z, x_911.w);
        let x_914 : f32 = u_xlat6.z;
        txVec9 = vec3<f32>(x_912.x, x_912.y, x_914);
        let x_921 : vec3<f32> = txVec9;
        let x_923 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_921.xy, x_921.z);
        u_xlat72 = x_923;
        let x_925 : f32 = u_xlat15.y;
        let x_926 : f32 = u_xlat72;
        let x_928 : f32 = u_xlat70;
        u_xlat70 = ((x_925 * x_926) + x_928);
        let x_931 : vec4<f32> = u_xlat10;
        let x_932 : vec2<f32> = vec2<f32>(x_931.z, x_931.w);
        let x_934 : f32 = u_xlat6.z;
        txVec10 = vec3<f32>(x_932.x, x_932.y, x_934);
        let x_941 : vec3<f32> = txVec10;
        let x_943 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_941.xy, x_941.z);
        u_xlat72 = x_943;
        let x_945 : f32 = u_xlat15.z;
        let x_946 : f32 = u_xlat72;
        let x_948 : f32 = u_xlat70;
        u_xlat70 = ((x_945 * x_946) + x_948);
        let x_951 : vec4<f32> = u_xlat9;
        let x_952 : vec2<f32> = vec2<f32>(x_951.x, x_951.y);
        let x_954 : f32 = u_xlat6.z;
        txVec11 = vec3<f32>(x_952.x, x_952.y, x_954);
        let x_961 : vec3<f32> = txVec11;
        let x_963 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_961.xy, x_961.z);
        u_xlat72 = x_963;
        let x_965 : f32 = u_xlat15.w;
        let x_966 : f32 = u_xlat72;
        let x_968 : f32 = u_xlat70;
        u_xlat70 = ((x_965 * x_966) + x_968);
        let x_971 : vec4<f32> = u_xlat9;
        let x_972 : vec2<f32> = vec2<f32>(x_971.z, x_971.w);
        let x_974 : f32 = u_xlat6.z;
        txVec12 = vec3<f32>(x_972.x, x_972.y, x_974);
        let x_981 : vec3<f32> = txVec12;
        let x_983 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_981.xy, x_981.z);
        u_xlat72 = x_983;
        let x_984 : f32 = u_xlat68;
        let x_985 : f32 = u_xlat72;
        let x_987 : f32 = u_xlat70;
        u_xlat67 = ((x_984 * x_985) + x_987);
      } else {
        let x_990 : vec4<f32> = u_xlat6;
        let x_993 : vec4<f32> = x_255.x_MainLightShadowmapSize;
        let x_996 : vec2<f32> = ((vec2<f32>(x_990.x, x_990.y) * vec2<f32>(x_993.z, x_993.w)) + vec2<f32>(0.5f, 0.5f));
        let x_997 : vec4<f32> = u_xlat7;
        u_xlat7 = vec4<f32>(x_996.x, x_996.y, x_997.z, x_997.w);
        let x_999 : vec4<f32> = u_xlat7;
        let x_1001 : vec2<f32> = floor(vec2<f32>(x_999.x, x_999.y));
        let x_1002 : vec4<f32> = u_xlat7;
        u_xlat7 = vec4<f32>(x_1001.x, x_1001.y, x_1002.z, x_1002.w);
        let x_1004 : vec4<f32> = u_xlat6;
        let x_1007 : vec4<f32> = x_255.x_MainLightShadowmapSize;
        let x_1010 : vec4<f32> = u_xlat7;
        u_xlat51 = ((vec2<f32>(x_1004.x, x_1004.y) * vec2<f32>(x_1007.z, x_1007.w)) + -(vec2<f32>(x_1010.x, x_1010.y)));
        let x_1014 : vec2<f32> = u_xlat51;
        u_xlat8 = (vec4<f32>(x_1014.x, x_1014.x, x_1014.y, x_1014.y) + vec4<f32>(0.5f, 1.0f, 0.5f, 1.0f));
        let x_1017 : vec4<f32> = u_xlat8;
        let x_1019 : vec4<f32> = u_xlat8;
        u_xlat9 = (vec4<f32>(x_1017.x, x_1017.x, x_1017.z, x_1017.z) * vec4<f32>(x_1019.x, x_1019.x, x_1019.z, x_1019.z));
        let x_1022 : vec4<f32> = u_xlat9;
        let x_1026 : vec2<f32> = (vec2<f32>(x_1022.y, x_1022.w) * vec2<f32>(0.040816002f, 0.040816002f));
        let x_1027 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_1027.x, x_1026.x, x_1027.z, x_1026.y);
        let x_1029 : vec4<f32> = u_xlat9;
        let x_1032 : vec2<f32> = u_xlat51;
        let x_1034 : vec2<f32> = ((vec2<f32>(x_1029.x, x_1029.z) * vec2<f32>(0.5f, 0.5f)) + -(x_1032));
        let x_1035 : vec4<f32> = u_xlat8;
        u_xlat8 = vec4<f32>(x_1034.x, x_1035.y, x_1034.y, x_1035.w);
        let x_1037 : vec2<f32> = u_xlat51;
        let x_1039 : vec2<f32> = (-(x_1037) + vec2<f32>(1.0f, 1.0f));
        let x_1040 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_1039.x, x_1039.y, x_1040.z, x_1040.w);
        let x_1042 : vec2<f32> = u_xlat51;
        u_xlat53 = min(x_1042, vec2<f32>(0.0f, 0.0f));
        let x_1044 : vec2<f32> = u_xlat53;
        let x_1046 : vec2<f32> = u_xlat53;
        let x_1048 : vec4<f32> = u_xlat9;
        let x_1050 : vec2<f32> = ((-(x_1044) * x_1046) + vec2<f32>(x_1048.x, x_1048.y));
        let x_1051 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_1050.x, x_1050.y, x_1051.z, x_1051.w);
        let x_1053 : vec2<f32> = u_xlat51;
        u_xlat53 = max(x_1053, vec2<f32>(0.0f, 0.0f));
        let x_1056 : vec2<f32> = u_xlat53;
        let x_1058 : vec2<f32> = u_xlat53;
        let x_1060 : vec4<f32> = u_xlat8;
        let x_1062 : vec2<f32> = ((-(x_1056) * x_1058) + vec2<f32>(x_1060.y, x_1060.w));
        let x_1063 : vec3<f32> = u_xlat30;
        u_xlat30 = vec3<f32>(x_1062.x, x_1063.y, x_1062.y);
        let x_1065 : vec4<f32> = u_xlat9;
        let x_1068 : vec2<f32> = (vec2<f32>(x_1065.x, x_1065.y) + vec2<f32>(2.0f, 2.0f));
        let x_1069 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_1068.x, x_1068.y, x_1069.z, x_1069.w);
        let x_1071 : vec3<f32> = u_xlat30;
        let x_1073 : vec2<f32> = (vec2<f32>(x_1071.x, x_1071.z) + vec2<f32>(2.0f, 2.0f));
        let x_1074 : vec4<f32> = u_xlat8;
        u_xlat8 = vec4<f32>(x_1074.x, x_1073.x, x_1074.z, x_1073.y);
        let x_1077 : f32 = u_xlat8.y;
        u_xlat11.z = (x_1077 * 0.081632003f);
        let x_1081 : vec4<f32> = u_xlat8;
        let x_1084 : vec3<f32> = (vec3<f32>(x_1081.z, x_1081.x, x_1081.w) * vec3<f32>(0.081632003f, 0.081632003f, 0.081632003f));
        let x_1085 : vec4<f32> = u_xlat12;
        u_xlat12 = vec4<f32>(x_1084.x, x_1084.y, x_1084.z, x_1085.w);
        let x_1087 : vec4<f32> = u_xlat9;
        let x_1090 : vec2<f32> = (vec2<f32>(x_1087.x, x_1087.y) * vec2<f32>(0.081632003f, 0.081632003f));
        let x_1091 : vec4<f32> = u_xlat8;
        u_xlat8 = vec4<f32>(x_1090.x, x_1090.y, x_1091.z, x_1091.w);
        let x_1094 : f32 = u_xlat12.y;
        u_xlat11.x = x_1094;
        let x_1096 : vec2<f32> = u_xlat51;
        let x_1103 : vec2<f32> = ((vec2<f32>(x_1096.x, x_1096.x) * vec2<f32>(-0.081632003f, 0.081632003f)) + vec2<f32>(0.163264006f, 0.081632003f));
        let x_1104 : vec4<f32> = u_xlat11;
        u_xlat11 = vec4<f32>(x_1104.x, x_1103.x, x_1104.z, x_1103.y);
        let x_1106 : vec2<f32> = u_xlat51;
        let x_1110 : vec2<f32> = ((vec2<f32>(x_1106.x, x_1106.x) * vec2<f32>(-0.081632003f, 0.081632003f)) + vec2<f32>(0.081632003f, 0.163264006f));
        let x_1111 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_1110.x, x_1111.y, x_1110.y, x_1111.w);
        let x_1114 : f32 = u_xlat8.x;
        u_xlat9.y = x_1114;
        let x_1117 : f32 = u_xlat10.y;
        u_xlat9.w = x_1117;
        let x_1119 : vec4<f32> = u_xlat9;
        let x_1120 : vec4<f32> = u_xlat11;
        u_xlat11 = (x_1119 + x_1120);
        let x_1122 : vec2<f32> = u_xlat51;
        let x_1125 : vec2<f32> = ((vec2<f32>(x_1122.y, x_1122.y) * vec2<f32>(-0.081632003f, 0.081632003f)) + vec2<f32>(0.163264006f, 0.081632003f));
        let x_1126 : vec4<f32> = u_xlat12;
        u_xlat12 = vec4<f32>(x_1126.x, x_1125.x, x_1126.z, x_1125.y);
        let x_1128 : vec2<f32> = u_xlat51;
        let x_1131 : vec2<f32> = ((vec2<f32>(x_1128.y, x_1128.y) * vec2<f32>(-0.081632003f, 0.081632003f)) + vec2<f32>(0.081632003f, 0.163264006f));
        let x_1132 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_1131.x, x_1132.y, x_1131.y, x_1132.w);
        let x_1135 : f32 = u_xlat8.y;
        u_xlat10.y = x_1135;
        let x_1137 : vec4<f32> = u_xlat10;
        let x_1138 : vec4<f32> = u_xlat12;
        u_xlat8 = (x_1137 + x_1138);
        let x_1140 : vec4<f32> = u_xlat9;
        let x_1141 : vec4<f32> = u_xlat11;
        u_xlat9 = (x_1140 / x_1141);
        let x_1143 : vec4<f32> = u_xlat9;
        u_xlat9 = (x_1143 + vec4<f32>(-3.5f, -1.5f, 0.5f, 2.5f));
        let x_1149 : vec4<f32> = u_xlat10;
        let x_1150 : vec4<f32> = u_xlat8;
        u_xlat10 = (x_1149 / x_1150);
        let x_1152 : vec4<f32> = u_xlat10;
        u_xlat10 = (x_1152 + vec4<f32>(-3.5f, -1.5f, 0.5f, 2.5f));
        let x_1154 : vec4<f32> = u_xlat9;
        let x_1157 : vec4<f32> = x_255.x_MainLightShadowmapSize;
        u_xlat9 = (vec4<f32>(x_1154.w, x_1154.x, x_1154.y, x_1154.z) * vec4<f32>(x_1157.x, x_1157.x, x_1157.x, x_1157.x));
        let x_1160 : vec4<f32> = u_xlat10;
        let x_1163 : vec4<f32> = x_255.x_MainLightShadowmapSize;
        u_xlat10 = (vec4<f32>(x_1160.x, x_1160.w, x_1160.y, x_1160.z) * vec4<f32>(x_1163.y, x_1163.y, x_1163.y, x_1163.y));
        let x_1166 : vec4<f32> = u_xlat9;
        let x_1167 : vec3<f32> = vec3<f32>(x_1166.y, x_1166.z, x_1166.w);
        let x_1168 : vec4<f32> = u_xlat12;
        u_xlat12 = vec4<f32>(x_1167.x, x_1168.y, x_1167.y, x_1167.z);
        let x_1171 : f32 = u_xlat10.x;
        u_xlat12.y = x_1171;
        let x_1173 : vec4<f32> = u_xlat7;
        let x_1176 : vec4<f32> = x_255.x_MainLightShadowmapSize;
        let x_1179 : vec4<f32> = u_xlat12;
        u_xlat13 = ((vec4<f32>(x_1173.x, x_1173.y, x_1173.x, x_1173.y) * vec4<f32>(x_1176.x, x_1176.y, x_1176.x, x_1176.y)) + vec4<f32>(x_1179.x, x_1179.y, x_1179.z, x_1179.y));
        let x_1182 : vec4<f32> = u_xlat7;
        let x_1185 : vec4<f32> = x_255.x_MainLightShadowmapSize;
        let x_1188 : vec4<f32> = u_xlat12;
        u_xlat51 = ((vec2<f32>(x_1182.x, x_1182.y) * vec2<f32>(x_1185.x, x_1185.y)) + vec2<f32>(x_1188.w, x_1188.y));
        let x_1192 : f32 = u_xlat12.y;
        u_xlat9.y = x_1192;
        let x_1195 : f32 = u_xlat10.z;
        u_xlat12.y = x_1195;
        let x_1197 : vec4<f32> = u_xlat7;
        let x_1200 : vec4<f32> = x_255.x_MainLightShadowmapSize;
        let x_1203 : vec4<f32> = u_xlat12;
        u_xlat14 = ((vec4<f32>(x_1197.x, x_1197.y, x_1197.x, x_1197.y) * vec4<f32>(x_1200.x, x_1200.y, x_1200.x, x_1200.y)) + vec4<f32>(x_1203.x, x_1203.y, x_1203.z, x_1203.y));
        let x_1206 : vec4<f32> = u_xlat7;
        let x_1209 : vec4<f32> = x_255.x_MainLightShadowmapSize;
        let x_1212 : vec4<f32> = u_xlat12;
        let x_1214 : vec2<f32> = ((vec2<f32>(x_1206.x, x_1206.y) * vec2<f32>(x_1209.x, x_1209.y)) + vec2<f32>(x_1212.w, x_1212.y));
        let x_1215 : vec4<f32> = u_xlat15;
        u_xlat15 = vec4<f32>(x_1214.x, x_1214.y, x_1215.z, x_1215.w);
        let x_1218 : f32 = u_xlat12.y;
        u_xlat9.z = x_1218;
        let x_1221 : vec4<f32> = u_xlat7;
        let x_1224 : vec4<f32> = x_255.x_MainLightShadowmapSize;
        let x_1227 : vec4<f32> = u_xlat9;
        u_xlat16 = ((vec4<f32>(x_1221.x, x_1221.y, x_1221.x, x_1221.y) * vec4<f32>(x_1224.x, x_1224.y, x_1224.x, x_1224.y)) + vec4<f32>(x_1227.x, x_1227.y, x_1227.x, x_1227.z));
        let x_1231 : f32 = u_xlat10.w;
        u_xlat12.y = x_1231;
        let x_1234 : vec4<f32> = u_xlat7;
        let x_1237 : vec4<f32> = x_255.x_MainLightShadowmapSize;
        let x_1240 : vec4<f32> = u_xlat12;
        u_xlat17 = ((vec4<f32>(x_1234.x, x_1234.y, x_1234.x, x_1234.y) * vec4<f32>(x_1237.x, x_1237.y, x_1237.x, x_1237.y)) + vec4<f32>(x_1240.x, x_1240.y, x_1240.z, x_1240.y));
        let x_1244 : vec4<f32> = u_xlat7;
        let x_1247 : vec4<f32> = x_255.x_MainLightShadowmapSize;
        let x_1250 : vec4<f32> = u_xlat12;
        let x_1252 : vec2<f32> = ((vec2<f32>(x_1244.x, x_1244.y) * vec2<f32>(x_1247.x, x_1247.y)) + vec2<f32>(x_1250.w, x_1250.y));
        let x_1253 : vec3<f32> = u_xlat31;
        u_xlat31 = vec3<f32>(x_1252.x, x_1252.y, x_1253.z);
        let x_1256 : f32 = u_xlat12.y;
        u_xlat9.w = x_1256;
        let x_1259 : vec4<f32> = u_xlat7;
        let x_1262 : vec4<f32> = x_255.x_MainLightShadowmapSize;
        let x_1265 : vec4<f32> = u_xlat9;
        u_xlat59 = ((vec2<f32>(x_1259.x, x_1259.y) * vec2<f32>(x_1262.x, x_1262.y)) + vec2<f32>(x_1265.x, x_1265.w));
        let x_1268 : vec4<f32> = u_xlat12;
        let x_1269 : vec3<f32> = vec3<f32>(x_1268.x, x_1268.z, x_1268.w);
        let x_1270 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_1269.x, x_1270.y, x_1269.y, x_1269.z);
        let x_1272 : vec4<f32> = u_xlat7;
        let x_1275 : vec4<f32> = x_255.x_MainLightShadowmapSize;
        let x_1278 : vec4<f32> = u_xlat10;
        u_xlat12 = ((vec4<f32>(x_1272.x, x_1272.y, x_1272.x, x_1272.y) * vec4<f32>(x_1275.x, x_1275.y, x_1275.x, x_1275.y)) + vec4<f32>(x_1278.x, x_1278.y, x_1278.z, x_1278.y));
        let x_1282 : vec4<f32> = u_xlat7;
        let x_1285 : vec4<f32> = x_255.x_MainLightShadowmapSize;
        let x_1288 : vec4<f32> = u_xlat10;
        u_xlat54 = ((vec2<f32>(x_1282.x, x_1282.y) * vec2<f32>(x_1285.x, x_1285.y)) + vec2<f32>(x_1288.w, x_1288.y));
        let x_1292 : f32 = u_xlat9.x;
        u_xlat10.x = x_1292;
        let x_1294 : vec4<f32> = u_xlat7;
        let x_1297 : vec4<f32> = x_255.x_MainLightShadowmapSize;
        let x_1300 : vec4<f32> = u_xlat10;
        let x_1302 : vec2<f32> = ((vec2<f32>(x_1294.x, x_1294.y) * vec2<f32>(x_1297.x, x_1297.y)) + vec2<f32>(x_1300.x, x_1300.y));
        let x_1303 : vec4<f32> = u_xlat7;
        u_xlat7 = vec4<f32>(x_1302.x, x_1302.y, x_1303.z, x_1303.w);
        let x_1306 : vec4<f32> = u_xlat8;
        let x_1308 : vec4<f32> = u_xlat11;
        u_xlat18 = (vec4<f32>(x_1306.x, x_1306.x, x_1306.x, x_1306.x) * x_1308);
        let x_1311 : vec4<f32> = u_xlat8;
        let x_1313 : vec4<f32> = u_xlat11;
        u_xlat19 = (vec4<f32>(x_1311.y, x_1311.y, x_1311.y, x_1311.y) * x_1313);
        let x_1316 : vec4<f32> = u_xlat8;
        let x_1318 : vec4<f32> = u_xlat11;
        u_xlat20 = (vec4<f32>(x_1316.z, x_1316.z, x_1316.z, x_1316.z) * x_1318);
        let x_1320 : vec4<f32> = u_xlat8;
        let x_1322 : vec4<f32> = u_xlat11;
        u_xlat8 = (vec4<f32>(x_1320.w, x_1320.w, x_1320.w, x_1320.w) * x_1322);
        let x_1325 : vec4<f32> = u_xlat13;
        let x_1326 : vec2<f32> = vec2<f32>(x_1325.x, x_1325.y);
        let x_1328 : f32 = u_xlat6.z;
        txVec13 = vec3<f32>(x_1326.x, x_1326.y, x_1328);
        let x_1335 : vec3<f32> = txVec13;
        let x_1337 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1335.xy, x_1335.z);
        u_xlat68 = x_1337;
        let x_1339 : vec4<f32> = u_xlat13;
        let x_1340 : vec2<f32> = vec2<f32>(x_1339.z, x_1339.w);
        let x_1342 : f32 = u_xlat6.z;
        txVec14 = vec3<f32>(x_1340.x, x_1340.y, x_1342);
        let x_1349 : vec3<f32> = txVec14;
        let x_1351 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1349.xy, x_1349.z);
        u_xlat70 = x_1351;
        let x_1352 : f32 = u_xlat70;
        let x_1354 : f32 = u_xlat18.y;
        u_xlat70 = (x_1352 * x_1354);
        let x_1357 : f32 = u_xlat18.x;
        let x_1358 : f32 = u_xlat68;
        let x_1360 : f32 = u_xlat70;
        u_xlat68 = ((x_1357 * x_1358) + x_1360);
        let x_1363 : vec2<f32> = u_xlat51;
        let x_1365 : f32 = u_xlat6.z;
        txVec15 = vec3<f32>(x_1363.x, x_1363.y, x_1365);
        let x_1372 : vec3<f32> = txVec15;
        let x_1374 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1372.xy, x_1372.z);
        u_xlat70 = x_1374;
        let x_1376 : f32 = u_xlat18.z;
        let x_1377 : f32 = u_xlat70;
        let x_1379 : f32 = u_xlat68;
        u_xlat68 = ((x_1376 * x_1377) + x_1379);
        let x_1382 : vec4<f32> = u_xlat16;
        let x_1383 : vec2<f32> = vec2<f32>(x_1382.x, x_1382.y);
        let x_1385 : f32 = u_xlat6.z;
        txVec16 = vec3<f32>(x_1383.x, x_1383.y, x_1385);
        let x_1392 : vec3<f32> = txVec16;
        let x_1394 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1392.xy, x_1392.z);
        u_xlat70 = x_1394;
        let x_1396 : f32 = u_xlat18.w;
        let x_1397 : f32 = u_xlat70;
        let x_1399 : f32 = u_xlat68;
        u_xlat68 = ((x_1396 * x_1397) + x_1399);
        let x_1402 : vec4<f32> = u_xlat14;
        let x_1403 : vec2<f32> = vec2<f32>(x_1402.x, x_1402.y);
        let x_1405 : f32 = u_xlat6.z;
        txVec17 = vec3<f32>(x_1403.x, x_1403.y, x_1405);
        let x_1412 : vec3<f32> = txVec17;
        let x_1414 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1412.xy, x_1412.z);
        u_xlat70 = x_1414;
        let x_1416 : f32 = u_xlat19.x;
        let x_1417 : f32 = u_xlat70;
        let x_1419 : f32 = u_xlat68;
        u_xlat68 = ((x_1416 * x_1417) + x_1419);
        let x_1422 : vec4<f32> = u_xlat14;
        let x_1423 : vec2<f32> = vec2<f32>(x_1422.z, x_1422.w);
        let x_1425 : f32 = u_xlat6.z;
        txVec18 = vec3<f32>(x_1423.x, x_1423.y, x_1425);
        let x_1432 : vec3<f32> = txVec18;
        let x_1434 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1432.xy, x_1432.z);
        u_xlat70 = x_1434;
        let x_1436 : f32 = u_xlat19.y;
        let x_1437 : f32 = u_xlat70;
        let x_1439 : f32 = u_xlat68;
        u_xlat68 = ((x_1436 * x_1437) + x_1439);
        let x_1442 : vec4<f32> = u_xlat15;
        let x_1443 : vec2<f32> = vec2<f32>(x_1442.x, x_1442.y);
        let x_1445 : f32 = u_xlat6.z;
        txVec19 = vec3<f32>(x_1443.x, x_1443.y, x_1445);
        let x_1452 : vec3<f32> = txVec19;
        let x_1454 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1452.xy, x_1452.z);
        u_xlat70 = x_1454;
        let x_1456 : f32 = u_xlat19.z;
        let x_1457 : f32 = u_xlat70;
        let x_1459 : f32 = u_xlat68;
        u_xlat68 = ((x_1456 * x_1457) + x_1459);
        let x_1462 : vec4<f32> = u_xlat16;
        let x_1463 : vec2<f32> = vec2<f32>(x_1462.z, x_1462.w);
        let x_1465 : f32 = u_xlat6.z;
        txVec20 = vec3<f32>(x_1463.x, x_1463.y, x_1465);
        let x_1472 : vec3<f32> = txVec20;
        let x_1474 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1472.xy, x_1472.z);
        u_xlat70 = x_1474;
        let x_1476 : f32 = u_xlat19.w;
        let x_1477 : f32 = u_xlat70;
        let x_1479 : f32 = u_xlat68;
        u_xlat68 = ((x_1476 * x_1477) + x_1479);
        let x_1482 : vec4<f32> = u_xlat17;
        let x_1483 : vec2<f32> = vec2<f32>(x_1482.x, x_1482.y);
        let x_1485 : f32 = u_xlat6.z;
        txVec21 = vec3<f32>(x_1483.x, x_1483.y, x_1485);
        let x_1492 : vec3<f32> = txVec21;
        let x_1494 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1492.xy, x_1492.z);
        u_xlat70 = x_1494;
        let x_1496 : f32 = u_xlat20.x;
        let x_1497 : f32 = u_xlat70;
        let x_1499 : f32 = u_xlat68;
        u_xlat68 = ((x_1496 * x_1497) + x_1499);
        let x_1502 : vec4<f32> = u_xlat17;
        let x_1503 : vec2<f32> = vec2<f32>(x_1502.z, x_1502.w);
        let x_1505 : f32 = u_xlat6.z;
        txVec22 = vec3<f32>(x_1503.x, x_1503.y, x_1505);
        let x_1512 : vec3<f32> = txVec22;
        let x_1514 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1512.xy, x_1512.z);
        u_xlat70 = x_1514;
        let x_1516 : f32 = u_xlat20.y;
        let x_1517 : f32 = u_xlat70;
        let x_1519 : f32 = u_xlat68;
        u_xlat68 = ((x_1516 * x_1517) + x_1519);
        let x_1522 : vec3<f32> = u_xlat31;
        let x_1523 : vec2<f32> = vec2<f32>(x_1522.x, x_1522.y);
        let x_1525 : f32 = u_xlat6.z;
        txVec23 = vec3<f32>(x_1523.x, x_1523.y, x_1525);
        let x_1532 : vec3<f32> = txVec23;
        let x_1534 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1532.xy, x_1532.z);
        u_xlat70 = x_1534;
        let x_1536 : f32 = u_xlat20.z;
        let x_1537 : f32 = u_xlat70;
        let x_1539 : f32 = u_xlat68;
        u_xlat68 = ((x_1536 * x_1537) + x_1539);
        let x_1542 : vec2<f32> = u_xlat59;
        let x_1544 : f32 = u_xlat6.z;
        txVec24 = vec3<f32>(x_1542.x, x_1542.y, x_1544);
        let x_1551 : vec3<f32> = txVec24;
        let x_1553 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1551.xy, x_1551.z);
        u_xlat70 = x_1553;
        let x_1555 : f32 = u_xlat20.w;
        let x_1556 : f32 = u_xlat70;
        let x_1558 : f32 = u_xlat68;
        u_xlat68 = ((x_1555 * x_1556) + x_1558);
        let x_1561 : vec4<f32> = u_xlat12;
        let x_1562 : vec2<f32> = vec2<f32>(x_1561.x, x_1561.y);
        let x_1564 : f32 = u_xlat6.z;
        txVec25 = vec3<f32>(x_1562.x, x_1562.y, x_1564);
        let x_1571 : vec3<f32> = txVec25;
        let x_1573 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1571.xy, x_1571.z);
        u_xlat70 = x_1573;
        let x_1575 : f32 = u_xlat8.x;
        let x_1576 : f32 = u_xlat70;
        let x_1578 : f32 = u_xlat68;
        u_xlat68 = ((x_1575 * x_1576) + x_1578);
        let x_1581 : vec4<f32> = u_xlat12;
        let x_1582 : vec2<f32> = vec2<f32>(x_1581.z, x_1581.w);
        let x_1584 : f32 = u_xlat6.z;
        txVec26 = vec3<f32>(x_1582.x, x_1582.y, x_1584);
        let x_1591 : vec3<f32> = txVec26;
        let x_1593 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1591.xy, x_1591.z);
        u_xlat70 = x_1593;
        let x_1595 : f32 = u_xlat8.y;
        let x_1596 : f32 = u_xlat70;
        let x_1598 : f32 = u_xlat68;
        u_xlat68 = ((x_1595 * x_1596) + x_1598);
        let x_1601 : vec2<f32> = u_xlat54;
        let x_1603 : f32 = u_xlat6.z;
        txVec27 = vec3<f32>(x_1601.x, x_1601.y, x_1603);
        let x_1610 : vec3<f32> = txVec27;
        let x_1612 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1610.xy, x_1610.z);
        u_xlat70 = x_1612;
        let x_1614 : f32 = u_xlat8.z;
        let x_1615 : f32 = u_xlat70;
        let x_1617 : f32 = u_xlat68;
        u_xlat68 = ((x_1614 * x_1615) + x_1617);
        let x_1620 : vec4<f32> = u_xlat7;
        let x_1621 : vec2<f32> = vec2<f32>(x_1620.x, x_1620.y);
        let x_1623 : f32 = u_xlat6.z;
        txVec28 = vec3<f32>(x_1621.x, x_1621.y, x_1623);
        let x_1630 : vec3<f32> = txVec28;
        let x_1632 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1630.xy, x_1630.z);
        u_xlat70 = x_1632;
        let x_1634 : f32 = u_xlat8.w;
        let x_1635 : f32 = u_xlat70;
        let x_1637 : f32 = u_xlat68;
        u_xlat67 = ((x_1634 * x_1635) + x_1637);
      }
    }
  } else {
    let x_1641 : vec4<f32> = u_xlat6;
    let x_1642 : vec2<f32> = vec2<f32>(x_1641.x, x_1641.y);
    let x_1644 : f32 = u_xlat6.z;
    txVec29 = vec3<f32>(x_1642.x, x_1642.y, x_1644);
    let x_1651 : vec3<f32> = txVec29;
    let x_1653 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1651.xy, x_1651.z);
    u_xlat67 = x_1653;
  }
  let x_1655 : f32 = x_255.x_MainLightShadowParams.x;
  u_xlat68 = (-(x_1655) + 1.0f);
  let x_1658 : f32 = u_xlat67;
  let x_1660 : f32 = x_255.x_MainLightShadowParams.x;
  let x_1662 : f32 = u_xlat68;
  u_xlat67 = ((x_1658 * x_1660) + x_1662);
  let x_1666 : f32 = u_xlat6.z;
  u_xlatb70 = (0.0f >= x_1666);
  let x_1670 : f32 = u_xlat6.z;
  u_xlatb72 = (x_1670 >= 1.0f);
  let x_1672 : bool = u_xlatb70;
  let x_1673 : bool = u_xlatb72;
  u_xlatb70 = (x_1672 | x_1673);
  let x_1675 : bool = u_xlatb70;
  let x_1676 : f32 = u_xlat67;
  u_xlat67 = select(x_1676, 1.0f, x_1675);
  let x_1678 : vec3<f32> = u_xlat0;
  let x_1680 : vec4<f32> = x_90.x_MainLightPosition;
  u_xlat0.x = dot(x_1678, -(vec3<f32>(x_1680.x, x_1680.y, x_1680.z)));
  let x_1686 : f32 = u_xlat0.x;
  u_xlat0.x = clamp(x_1686, 0.0f, 1.0f);
  let x_1689 : f32 = u_xlat67;
  let x_1692 : vec4<f32> = x_90.x_MainLightColor;
  let x_1694 : vec3<f32> = (vec3<f32>(x_1689, x_1689, x_1689) * vec3<f32>(x_1692.x, x_1692.y, x_1692.z));
  let x_1695 : vec4<f32> = u_xlat7;
  u_xlat7 = vec4<f32>(x_1694.x, x_1694.y, x_1694.z, x_1695.w);
  let x_1697 : vec3<f32> = u_xlat0;
  let x_1699 : vec4<f32> = u_xlat7;
  u_xlat0 = (vec3<f32>(x_1697.x, x_1697.x, x_1697.x) * vec3<f32>(x_1699.x, x_1699.y, x_1699.z));
  let x_1702 : vec3<f32> = u_xlat0;
  let x_1703 : vec4<f32> = u_xlat3;
  u_xlat0 = (x_1702 * vec3<f32>(x_1703.x, x_1703.y, x_1703.z));
  let x_1707 : f32 = x_145.unity_LODFade.x;
  u_xlatb67 = (x_1707 < 0.0f);
  let x_1710 : f32 = x_145.unity_LODFade.x;
  u_xlat3.x = (x_1710 + 1.0f);
  let x_1713 : bool = u_xlatb67;
  if (x_1713) {
    let x_1718 : f32 = u_xlat3.x;
    x_1714 = x_1718;
  } else {
    let x_1721 : f32 = x_145.unity_LODFade.x;
    x_1714 = x_1721;
  }
  let x_1722 : f32 = x_1714;
  u_xlat67 = x_1722;
  let x_1724 : f32 = u_xlat67;
  u_xlatb3 = (0.5f >= x_1724);
  let x_1726 : vec3<f32> = u_xlat2;
  let x_1729 : vec4<f32> = x_90.x_ScreenParams;
  u_xlat2 = (abs(x_1726) * vec3<f32>(x_1729.x, x_1729.y, x_1729.x));
  let x_1735 : vec3<f32> = u_xlat2;
  u_xlatu2 = vec3<u32>(x_1735);
  let x_1739 : u32 = u_xlatu2.z;
  u_xlatu46 = (x_1739 * 1025u);
  let x_1743 : u32 = u_xlatu46;
  u_xlatu25 = (x_1743 >> 6u);
  let x_1747 : u32 = u_xlatu46;
  let x_1748 : u32 = u_xlatu25;
  u_xlati46 = bitcast<i32>((x_1747 ^ x_1748));
  let x_1751 : i32 = u_xlati46;
  u_xlatu46 = (bitcast<u32>(x_1751) * 9u);
  let x_1755 : u32 = u_xlatu46;
  u_xlatu25 = (x_1755 >> 11u);
  let x_1758 : u32 = u_xlatu46;
  let x_1759 : u32 = u_xlatu25;
  u_xlati46 = bitcast<i32>((x_1758 ^ x_1759));
  let x_1762 : i32 = u_xlati46;
  u_xlati46 = (x_1762 * 32769i);
  let x_1766 : i32 = u_xlati46;
  let x_1769 : u32 = u_xlatu2.y;
  u_xlati24 = bitcast<i32>((bitcast<u32>(x_1766) ^ x_1769));
  let x_1773 : i32 = u_xlati24;
  u_xlatu24 = (bitcast<u32>(x_1773) * 1025u);
  let x_1776 : u32 = u_xlatu24;
  u_xlatu46 = (x_1776 >> 6u);
  let x_1778 : u32 = u_xlatu46;
  let x_1779 : u32 = u_xlatu24;
  u_xlati24 = bitcast<i32>((x_1778 ^ x_1779));
  let x_1782 : i32 = u_xlati24;
  u_xlatu24 = (bitcast<u32>(x_1782) * 9u);
  let x_1785 : u32 = u_xlatu24;
  u_xlatu46 = (x_1785 >> 11u);
  let x_1787 : u32 = u_xlatu46;
  let x_1788 : u32 = u_xlatu24;
  u_xlati24 = bitcast<i32>((x_1787 ^ x_1788));
  let x_1791 : i32 = u_xlati24;
  u_xlati24 = (x_1791 * 32769i);
  let x_1794 : i32 = u_xlati24;
  let x_1797 : u32 = u_xlatu2.x;
  u_xlati2 = bitcast<i32>((bitcast<u32>(x_1794) ^ x_1797));
  let x_1800 : i32 = u_xlati2;
  u_xlatu2.x = (bitcast<u32>(x_1800) * 1025u);
  let x_1805 : u32 = u_xlatu2.x;
  u_xlatu24 = (x_1805 >> 6u);
  let x_1807 : u32 = u_xlatu24;
  let x_1809 : u32 = u_xlatu2.x;
  u_xlati2 = bitcast<i32>((x_1807 ^ x_1809));
  let x_1812 : i32 = u_xlati2;
  u_xlatu2.x = (bitcast<u32>(x_1812) * 9u);
  let x_1817 : u32 = u_xlatu2.x;
  u_xlatu24 = (x_1817 >> 11u);
  let x_1819 : u32 = u_xlatu24;
  let x_1821 : u32 = u_xlatu2.x;
  u_xlati2 = bitcast<i32>((x_1819 ^ x_1821));
  let x_1824 : i32 = u_xlati2;
  u_xlati2 = (x_1824 * 32769i);
  param = 1065353216i;
  let x_1830 : i32 = u_xlati2;
  param_1 = x_1830;
  param_2 = 0i;
  param_3 = 23i;
  let x_1833 : i32 = int_bitfieldInsert_i1_i1_i1_i1_(&(param), &(param_1), &(param_2), &(param_3));
  u_xlat2.x = bitcast<f32>(x_1833);
  let x_1837 : f32 = u_xlat2.x;
  u_xlat2.x = (x_1837 + -1.0f);
  let x_1842 : f32 = u_xlat2.x;
  u_xlat24.x = (-(x_1842) + 1.0f);
  let x_1846 : bool = u_xlatb3;
  if (x_1846) {
    let x_1851 : f32 = u_xlat2.x;
    x_1847 = x_1851;
  } else {
    let x_1854 : f32 = u_xlat24.x;
    x_1847 = x_1854;
  }
  let x_1855 : f32 = x_1847;
  u_xlat2.x = x_1855;
  let x_1857 : f32 = u_xlat67;
  let x_1860 : f32 = u_xlat2.x;
  u_xlat67 = ((x_1857 * 2.0f) + -(x_1860));
  let x_1863 : f32 = u_xlat67;
  let x_1865 : f32 = u_xlat3.w;
  u_xlat2.x = (x_1863 * x_1865);
  let x_1872 : f32 = u_xlat2.x;
  u_xlatb24.x = (x_1872 >= 0.400000006f);
  let x_1877 : bool = u_xlatb24.x;
  if (x_1877) {
    let x_1882 : f32 = u_xlat2.x;
    x_1878 = x_1882;
  } else {
    x_1878 = 0.0f;
  }
  let x_1884 : f32 = x_1878;
  u_xlat24.x = x_1884;
  let x_1887 : f32 = u_xlat3.w;
  let x_1888 : f32 = u_xlat67;
  u_xlat67 = ((x_1887 * x_1888) + -0.400000006f);
  let x_1894 : f32 = u_xlat2.x;
  u_xlat46 = dpdxCoarse(x_1894);
  let x_1897 : f32 = u_xlat2.x;
  u_xlat2.x = dpdyCoarse(x_1897);
  let x_1901 : f32 = u_xlat2.x;
  let x_1903 : f32 = u_xlat46;
  u_xlat2.x = (abs(x_1901) + abs(x_1903));
  let x_1908 : f32 = u_xlat2.x;
  u_xlat2.x = max(x_1908, 0.0001f);
  let x_1912 : f32 = u_xlat67;
  let x_1914 : f32 = u_xlat2.x;
  u_xlat67 = (x_1912 / x_1914);
  let x_1916 : f32 = u_xlat67;
  u_xlat67 = (x_1916 + 0.5f);
  let x_1918 : f32 = u_xlat67;
  u_xlat67 = clamp(x_1918, 0.0f, 1.0f);
  let x_1922 : f32 = x_90.x_AlphaToMaskAvailable;
  u_xlatb2 = !((x_1922 == 0.0f));
  let x_1924 : bool = u_xlatb2;
  if (x_1924) {
    let x_1928 : f32 = u_xlat67;
    x_1925 = x_1928;
  } else {
    let x_1931 : f32 = u_xlat24.x;
    x_1925 = x_1931;
  }
  let x_1932 : f32 = x_1925;
  u_xlat67 = x_1932;
  let x_1933 : f32 = u_xlat67;
  u_xlat24.x = (x_1933 + -0.0001f);
  let x_1938 : f32 = u_xlat24.x;
  u_xlatb24.x = (x_1938 < 0.0f);
  let x_1942 : bool = u_xlatb24.x;
  if (((select(0i, 1i, x_1942) * -1i) != 0i)) {
    discard;
  }
  let x_1952 : f32 = vs_INTERP2.w;
  u_xlatb24.x = (0.0f < x_1952);
  let x_1956 : f32 = x_145.unity_WorldTransformParams.w;
  u_xlatb24.y = (x_1956 >= 0.0f);
  let x_1960 : bool = u_xlatb24.x;
  u_xlat24.x = select(-1.0f, 1.0f, x_1960);
  let x_1964 : bool = u_xlatb24.y;
  u_xlat24.y = select(-1.0f, 1.0f, x_1964);
  let x_1968 : f32 = u_xlat24.y;
  let x_1970 : f32 = u_xlat24.x;
  u_xlat24.x = (x_1968 * x_1970);
  let x_1973 : vec3<f32> = vs_INTERP1;
  let x_1975 : vec4<f32> = vs_INTERP2;
  let x_1977 : vec3<f32> = (vec3<f32>(x_1973.z, x_1973.x, x_1973.y) * vec3<f32>(x_1975.y, x_1975.z, x_1975.x));
  let x_1978 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_1977.x, x_1977.y, x_1977.z, x_1978.w);
  let x_1980 : vec3<f32> = vs_INTERP1;
  let x_1982 : vec4<f32> = vs_INTERP2;
  let x_1985 : vec4<f32> = u_xlat3;
  let x_1988 : vec3<f32> = ((vec3<f32>(x_1980.y, x_1980.z, x_1980.x) * vec3<f32>(x_1982.z, x_1982.x, x_1982.y)) + -(vec3<f32>(x_1985.x, x_1985.y, x_1985.z)));
  let x_1989 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_1988.x, x_1988.y, x_1988.z, x_1989.w);
  let x_1991 : vec2<f32> = u_xlat24;
  let x_1993 : vec4<f32> = u_xlat3;
  let x_1995 : vec3<f32> = (vec3<f32>(x_1991.x, x_1991.x, x_1991.x) * vec3<f32>(x_1993.x, x_1993.y, x_1993.z));
  let x_1996 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_1995.x, x_1995.y, x_1995.z, x_1996.w);
  let x_1998 : vec4<f32> = u_xlat3;
  let x_2000 : vec3<f32> = u_xlat27;
  let x_2002 : vec3<f32> = (vec3<f32>(x_1998.x, x_1998.y, x_1998.z) * vec3<f32>(x_2000.y, x_2000.y, x_2000.y));
  let x_2003 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_2002.x, x_2002.y, x_2002.z, x_2003.w);
  let x_2005 : vec3<f32> = u_xlat27;
  let x_2007 : vec4<f32> = vs_INTERP2;
  let x_2010 : vec4<f32> = u_xlat3;
  let x_2012 : vec3<f32> = ((vec3<f32>(x_2005.x, x_2005.x, x_2005.x) * vec3<f32>(x_2007.x, x_2007.y, x_2007.z)) + vec3<f32>(x_2010.x, x_2010.y, x_2010.z));
  let x_2013 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_2012.x, x_2012.y, x_2012.z, x_2013.w);
  let x_2015 : vec3<f32> = u_xlat27;
  let x_2017 : vec3<f32> = vs_INTERP1;
  let x_2019 : vec4<f32> = u_xlat3;
  let x_2021 : vec3<f32> = ((vec3<f32>(x_2015.z, x_2015.z, x_2015.z) * x_2017) + vec3<f32>(x_2019.x, x_2019.y, x_2019.z));
  let x_2022 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_2021.x, x_2021.y, x_2021.z, x_2022.w);
  let x_2024 : vec4<f32> = u_xlat3;
  let x_2026 : vec4<f32> = u_xlat3;
  u_xlat24.x = dot(vec3<f32>(x_2024.x, x_2024.y, x_2024.z), vec3<f32>(x_2026.x, x_2026.y, x_2026.z));
  let x_2031 : f32 = u_xlat24.x;
  u_xlat24.x = inverseSqrt(x_2031);
  let x_2034 : vec2<f32> = u_xlat24;
  let x_2036 : vec4<f32> = u_xlat3;
  let x_2038 : vec3<f32> = (vec3<f32>(x_2034.x, x_2034.x, x_2034.x) * vec3<f32>(x_2036.x, x_2036.y, x_2036.z));
  let x_2039 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_2038.x, x_2038.y, x_2038.z, x_2039.w);
  let x_2042 : f32 = vs_INTERP0.y;
  let x_2044 : f32 = x_90.unity_MatrixV[1i].z;
  u_xlat24.x = (x_2042 * x_2044);
  let x_2048 : f32 = x_90.unity_MatrixV[0i].z;
  let x_2050 : f32 = vs_INTERP0.x;
  let x_2053 : f32 = u_xlat24.x;
  u_xlat24.x = ((x_2048 * x_2050) + x_2053);
  let x_2057 : f32 = x_90.unity_MatrixV[2i].z;
  let x_2059 : f32 = vs_INTERP0.z;
  let x_2062 : f32 = u_xlat24.x;
  u_xlat24.x = ((x_2057 * x_2059) + x_2062);
  let x_2066 : f32 = u_xlat24.x;
  let x_2068 : f32 = x_90.unity_MatrixV[3i].z;
  u_xlat24.x = (x_2066 + x_2068);
  let x_2072 : f32 = u_xlat24.x;
  let x_2075 : f32 = x_90.x_ProjectionParams.y;
  u_xlat24.x = (-(x_2072) + -(x_2075));
  let x_2080 : f32 = u_xlat24.x;
  u_xlat24.x = max(x_2080, 0.0f);
  let x_2084 : f32 = u_xlat24.x;
  let x_2087 : f32 = x_90.unity_FogParams.x;
  u_xlat24.x = (x_2084 * x_2087);
  let x_2097 : vec2<f32> = vs_INTERP5;
  let x_2099 : f32 = x_90.x_GlobalMipBias.x;
  let x_2100 : vec4<f32> = textureSampleBias(unity_LightmapInd, samplerunity_Lightmap, x_2097, x_2099);
  u_xlat7 = x_2100;
  let x_2105 : vec2<f32> = vs_INTERP5;
  let x_2107 : f32 = x_90.x_GlobalMipBias.x;
  let x_2108 : vec4<f32> = textureSampleBias(unity_Lightmap, samplerunity_Lightmap, x_2105, x_2107);
  u_xlat27 = vec3<f32>(x_2108.x, x_2108.y, x_2108.z);
  let x_2110 : vec4<f32> = u_xlat7;
  let x_2113 : vec3<f32> = (vec3<f32>(x_2110.x, x_2110.y, x_2110.z) + vec3<f32>(-0.5f, -0.5f, -0.5f));
  let x_2114 : vec4<f32> = u_xlat7;
  u_xlat7 = vec4<f32>(x_2113.x, x_2113.y, x_2113.z, x_2114.w);
  let x_2116 : vec4<f32> = u_xlat3;
  let x_2118 : vec4<f32> = u_xlat7;
  u_xlat46 = dot(vec3<f32>(x_2116.x, x_2116.y, x_2116.z), vec3<f32>(x_2118.x, x_2118.y, x_2118.z));
  let x_2121 : f32 = u_xlat46;
  u_xlat46 = (x_2121 + 0.5f);
  let x_2123 : f32 = u_xlat46;
  let x_2125 : vec3<f32> = u_xlat27;
  u_xlat27 = (vec3<f32>(x_2123, x_2123, x_2123) * x_2125);
  let x_2128 : f32 = u_xlat7.w;
  u_xlat46 = max(x_2128, 0.0001f);
  let x_2130 : vec3<f32> = u_xlat27;
  let x_2131 : f32 = u_xlat46;
  u_xlat27 = (x_2130 / vec3<f32>(x_2131, x_2131, x_2131));
  let x_2135 : vec4<f32> = x_90.x_ScaledScreenParams;
  let x_2136 : vec2<f32> = vec2<f32>(x_2135.x, x_2135.y);
  let x_2140 : vec2<f32> = (vec2<f32>(1.0f, 1.0f) / vec2<f32>(x_2136.x, x_2136.y));
  let x_2141 : vec4<f32> = u_xlat7;
  u_xlat7 = vec4<f32>(x_2140.x, x_2140.y, x_2141.z, x_2141.w);
  let x_2143 : vec4<f32> = u_xlat7;
  let x_2145 : vec4<f32> = hlslcc_FragCoord;
  let x_2147 : vec2<f32> = (vec2<f32>(x_2143.x, x_2143.y) * vec2<f32>(x_2145.x, x_2145.y));
  let x_2148 : vec4<f32> = u_xlat7;
  u_xlat7 = vec4<f32>(x_2147.x, x_2147.y, x_2148.z, x_2148.w);
  let x_2151 : f32 = u_xlat7.y;
  let x_2154 : f32 = x_90.x_ScaleBiasRt.x;
  let x_2157 : f32 = x_90.x_ScaleBiasRt.y;
  u_xlat46 = ((x_2151 * x_2154) + x_2157);
  let x_2159 : f32 = u_xlat46;
  u_xlat7.z = (-(x_2159) + 1.0f);
  let x_2164 : f32 = u_xlat5.x;
  u_xlat5.x = x_2164;
  let x_2167 : f32 = u_xlat5.x;
  u_xlat5.x = clamp(x_2167, 0.0f, 1.0f);
  let x_2170 : f32 = u_xlat67;
  u_xlat67 = x_2170;
  let x_2171 : f32 = u_xlat67;
  u_xlat67 = clamp(x_2171, 0.0f, 1.0f);
  let x_2173 : vec3<f32> = u_xlat4;
  u_xlat4 = (x_2173 * vec3<f32>(0.959999979f, 0.959999979f, 0.959999979f));
  let x_2178 : f32 = u_xlat5.x;
  u_xlat46 = (-(x_2178) + 1.0f);
  let x_2182 : f32 = u_xlat46;
  let x_2183 : f32 = u_xlat46;
  u_xlat69 = (x_2182 * x_2183);
  let x_2185 : f32 = u_xlat69;
  u_xlat69 = max(x_2185, 0.0078125f);
  let x_2188 : f32 = u_xlat69;
  let x_2189 : f32 = u_xlat69;
  u_xlat72 = (x_2188 * x_2189);
  let x_2192 : f32 = u_xlat5.x;
  u_xlat5.x = (x_2192 + 0.040000021f);
  let x_2197 : f32 = u_xlat5.x;
  u_xlat5.x = min(x_2197, 1.0f);
  let x_2201 : f32 = u_xlat69;
  u_xlat29 = ((x_2201 * 4.0f) + 2.0f);
  let x_2209 : vec4<f32> = u_xlat7;
  let x_2212 : f32 = x_90.x_GlobalMipBias.x;
  let x_2213 : vec4<f32> = textureSampleBias(x_ScreenSpaceOcclusionTexture, sampler_ScreenSpaceOcclusionTexture, vec2<f32>(x_2209.x, x_2209.z), x_2212);
  u_xlat7.x = x_2213.x;
  let x_2217 : f32 = u_xlat7.x;
  u_xlat51.x = (x_2217 + -1.0f);
  let x_2221 : f32 = x_90.x_AmbientOcclusionParam.w;
  let x_2223 : f32 = u_xlat51.x;
  u_xlat51.x = ((x_2221 * x_2223) + 1.0f);
  let x_2228 : f32 = u_xlat7.x;
  let x_2230 : f32 = vs_INTERP4.w;
  u_xlat7.x = min(x_2228, x_2230);
  let x_2233 : bool = u_xlatb66;
  if (x_2233) {
    let x_2237 : f32 = x_255.x_MainLightShadowParams.y;
    u_xlatb66 = (x_2237 == 1.0f);
    let x_2239 : bool = u_xlatb66;
    if (x_2239) {
      let x_2242 : vec4<f32> = u_xlat6;
      let x_2245 : vec4<f32> = x_255.x_MainLightShadowOffset0;
      u_xlat8 = (vec4<f32>(x_2242.x, x_2242.y, x_2242.x, x_2242.y) + x_2245);
      let x_2248 : vec4<f32> = u_xlat8;
      let x_2249 : vec2<f32> = vec2<f32>(x_2248.x, x_2248.y);
      let x_2251 : f32 = u_xlat6.z;
      txVec30 = vec3<f32>(x_2249.x, x_2249.y, x_2251);
      let x_2258 : vec3<f32> = txVec30;
      let x_2260 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2258.xy, x_2258.z);
      u_xlat9.x = x_2260;
      let x_2263 : vec4<f32> = u_xlat8;
      let x_2264 : vec2<f32> = vec2<f32>(x_2263.z, x_2263.w);
      let x_2266 : f32 = u_xlat6.z;
      txVec31 = vec3<f32>(x_2264.x, x_2264.y, x_2266);
      let x_2273 : vec3<f32> = txVec31;
      let x_2275 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2273.xy, x_2273.z);
      u_xlat9.y = x_2275;
      let x_2277 : vec4<f32> = u_xlat6;
      let x_2280 : vec4<f32> = x_255.x_MainLightShadowOffset1;
      u_xlat8 = (vec4<f32>(x_2277.x, x_2277.y, x_2277.x, x_2277.y) + x_2280);
      let x_2283 : vec4<f32> = u_xlat8;
      let x_2284 : vec2<f32> = vec2<f32>(x_2283.x, x_2283.y);
      let x_2286 : f32 = u_xlat6.z;
      txVec32 = vec3<f32>(x_2284.x, x_2284.y, x_2286);
      let x_2293 : vec3<f32> = txVec32;
      let x_2295 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2293.xy, x_2293.z);
      u_xlat9.z = x_2295;
      let x_2298 : vec4<f32> = u_xlat8;
      let x_2299 : vec2<f32> = vec2<f32>(x_2298.z, x_2298.w);
      let x_2301 : f32 = u_xlat6.z;
      txVec33 = vec3<f32>(x_2299.x, x_2299.y, x_2301);
      let x_2308 : vec3<f32> = txVec33;
      let x_2310 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2308.xy, x_2308.z);
      u_xlat9.w = x_2310;
      let x_2312 : vec4<f32> = u_xlat9;
      u_xlat66 = dot(x_2312, vec4<f32>(0.25f, 0.25f, 0.25f, 0.25f));
    } else {
      let x_2317 : f32 = x_255.x_MainLightShadowParams.y;
      u_xlatb73 = (x_2317 == 2.0f);
      let x_2319 : bool = u_xlatb73;
      if (x_2319) {
        let x_2322 : vec4<f32> = u_xlat6;
        let x_2325 : vec4<f32> = x_255.x_MainLightShadowmapSize;
        let x_2328 : vec2<f32> = ((vec2<f32>(x_2322.x, x_2322.y) * vec2<f32>(x_2325.z, x_2325.w)) + vec2<f32>(0.5f, 0.5f));
        let x_2329 : vec4<f32> = u_xlat8;
        u_xlat8 = vec4<f32>(x_2328.x, x_2328.y, x_2329.z, x_2329.w);
        let x_2331 : vec4<f32> = u_xlat8;
        let x_2333 : vec2<f32> = floor(vec2<f32>(x_2331.x, x_2331.y));
        let x_2334 : vec4<f32> = u_xlat8;
        u_xlat8 = vec4<f32>(x_2333.x, x_2333.y, x_2334.z, x_2334.w);
        let x_2337 : vec4<f32> = u_xlat6;
        let x_2340 : vec4<f32> = x_255.x_MainLightShadowmapSize;
        let x_2343 : vec4<f32> = u_xlat8;
        u_xlat52 = ((vec2<f32>(x_2337.x, x_2337.y) * vec2<f32>(x_2340.z, x_2340.w)) + -(vec2<f32>(x_2343.x, x_2343.y)));
        let x_2347 : vec2<f32> = u_xlat52;
        u_xlat9 = (vec4<f32>(x_2347.x, x_2347.x, x_2347.y, x_2347.y) + vec4<f32>(0.5f, 1.0f, 0.5f, 1.0f));
        let x_2350 : vec4<f32> = u_xlat9;
        let x_2352 : vec4<f32> = u_xlat9;
        u_xlat10 = (vec4<f32>(x_2350.x, x_2350.x, x_2350.z, x_2350.z) * vec4<f32>(x_2352.x, x_2352.x, x_2352.z, x_2352.z));
        let x_2355 : vec4<f32> = u_xlat10;
        let x_2357 : vec2<f32> = (vec2<f32>(x_2355.y, x_2355.w) * vec2<f32>(0.079999998f, 0.079999998f));
        let x_2358 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_2357.x, x_2358.y, x_2357.y, x_2358.w);
        let x_2360 : vec4<f32> = u_xlat10;
        let x_2363 : vec2<f32> = u_xlat52;
        let x_2365 : vec2<f32> = ((vec2<f32>(x_2360.x, x_2360.z) * vec2<f32>(0.5f, 0.5f)) + -(x_2363));
        let x_2366 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_2365.x, x_2365.y, x_2366.z, x_2366.w);
        let x_2368 : vec2<f32> = u_xlat52;
        u_xlat54 = (-(x_2368) + vec2<f32>(1.0f, 1.0f));
        let x_2371 : vec2<f32> = u_xlat52;
        let x_2372 : vec2<f32> = min(x_2371, vec2<f32>(0.0f, 0.0f));
        let x_2373 : vec4<f32> = u_xlat11;
        u_xlat11 = vec4<f32>(x_2372.x, x_2372.y, x_2373.z, x_2373.w);
        let x_2375 : vec4<f32> = u_xlat11;
        let x_2378 : vec4<f32> = u_xlat11;
        let x_2381 : vec2<f32> = u_xlat54;
        let x_2382 : vec2<f32> = ((-(vec2<f32>(x_2375.x, x_2375.y)) * vec2<f32>(x_2378.x, x_2378.y)) + x_2381);
        let x_2383 : vec4<f32> = u_xlat11;
        u_xlat11 = vec4<f32>(x_2382.x, x_2382.y, x_2383.z, x_2383.w);
        let x_2385 : vec2<f32> = u_xlat52;
        u_xlat52 = max(x_2385, vec2<f32>(0.0f, 0.0f));
        let x_2387 : vec2<f32> = u_xlat52;
        let x_2389 : vec2<f32> = u_xlat52;
        let x_2391 : vec4<f32> = u_xlat9;
        u_xlat52 = ((-(x_2387) * x_2389) + vec2<f32>(x_2391.y, x_2391.w));
        let x_2394 : vec4<f32> = u_xlat11;
        let x_2396 : vec2<f32> = (vec2<f32>(x_2394.x, x_2394.y) + vec2<f32>(1.0f, 1.0f));
        let x_2397 : vec4<f32> = u_xlat11;
        u_xlat11 = vec4<f32>(x_2396.x, x_2396.y, x_2397.z, x_2397.w);
        let x_2399 : vec2<f32> = u_xlat52;
        u_xlat52 = (x_2399 + vec2<f32>(1.0f, 1.0f));
        let x_2401 : vec4<f32> = u_xlat10;
        let x_2403 : vec2<f32> = (vec2<f32>(x_2401.x, x_2401.y) * vec2<f32>(0.159999996f, 0.159999996f));
        let x_2404 : vec4<f32> = u_xlat12;
        u_xlat12 = vec4<f32>(x_2403.x, x_2403.y, x_2404.z, x_2404.w);
        let x_2406 : vec2<f32> = u_xlat54;
        let x_2407 : vec2<f32> = (x_2406 * vec2<f32>(0.159999996f, 0.159999996f));
        let x_2408 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_2407.x, x_2407.y, x_2408.z, x_2408.w);
        let x_2410 : vec4<f32> = u_xlat11;
        let x_2412 : vec2<f32> = (vec2<f32>(x_2410.x, x_2410.y) * vec2<f32>(0.159999996f, 0.159999996f));
        let x_2413 : vec4<f32> = u_xlat11;
        u_xlat11 = vec4<f32>(x_2412.x, x_2412.y, x_2413.z, x_2413.w);
        let x_2415 : vec2<f32> = u_xlat52;
        let x_2416 : vec2<f32> = (x_2415 * vec2<f32>(0.159999996f, 0.159999996f));
        let x_2417 : vec4<f32> = u_xlat13;
        u_xlat13 = vec4<f32>(x_2416.x, x_2416.y, x_2417.z, x_2417.w);
        let x_2419 : vec4<f32> = u_xlat9;
        u_xlat52 = (vec2<f32>(x_2419.y, x_2419.w) * vec2<f32>(0.159999996f, 0.159999996f));
        let x_2423 : f32 = u_xlat11.x;
        u_xlat12.z = x_2423;
        let x_2426 : f32 = u_xlat52.x;
        u_xlat12.w = x_2426;
        let x_2429 : f32 = u_xlat13.x;
        u_xlat10.z = x_2429;
        let x_2432 : f32 = u_xlat9.x;
        u_xlat10.w = x_2432;
        let x_2434 : vec4<f32> = u_xlat10;
        let x_2436 : vec4<f32> = u_xlat12;
        u_xlat14 = (vec4<f32>(x_2434.z, x_2434.w, x_2434.x, x_2434.z) + vec4<f32>(x_2436.z, x_2436.w, x_2436.x, x_2436.z));
        let x_2440 : f32 = u_xlat12.y;
        u_xlat11.z = x_2440;
        let x_2443 : f32 = u_xlat52.y;
        u_xlat11.w = x_2443;
        let x_2446 : f32 = u_xlat10.y;
        u_xlat13.z = x_2446;
        let x_2449 : f32 = u_xlat9.z;
        u_xlat13.w = x_2449;
        let x_2451 : vec4<f32> = u_xlat11;
        let x_2453 : vec4<f32> = u_xlat13;
        let x_2455 : vec3<f32> = (vec3<f32>(x_2451.z, x_2451.y, x_2451.w) + vec3<f32>(x_2453.z, x_2453.y, x_2453.w));
        let x_2456 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_2455.x, x_2455.y, x_2455.z, x_2456.w);
        let x_2458 : vec4<f32> = u_xlat10;
        let x_2460 : vec4<f32> = u_xlat14;
        let x_2462 : vec3<f32> = (vec3<f32>(x_2458.x, x_2458.z, x_2458.w) / vec3<f32>(x_2460.z, x_2460.w, x_2460.y));
        let x_2463 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_2462.x, x_2462.y, x_2462.z, x_2463.w);
        let x_2465 : vec4<f32> = u_xlat10;
        let x_2467 : vec3<f32> = (vec3<f32>(x_2465.x, x_2465.y, x_2465.z) + vec3<f32>(-2.5f, -0.5f, 1.5f));
        let x_2468 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_2467.x, x_2467.y, x_2467.z, x_2468.w);
        let x_2470 : vec4<f32> = u_xlat13;
        let x_2472 : vec4<f32> = u_xlat9;
        let x_2474 : vec3<f32> = (vec3<f32>(x_2470.z, x_2470.y, x_2470.w) / vec3<f32>(x_2472.x, x_2472.y, x_2472.z));
        let x_2475 : vec4<f32> = u_xlat11;
        u_xlat11 = vec4<f32>(x_2474.x, x_2474.y, x_2474.z, x_2475.w);
        let x_2477 : vec4<f32> = u_xlat11;
        let x_2479 : vec3<f32> = (vec3<f32>(x_2477.x, x_2477.y, x_2477.z) + vec3<f32>(-2.5f, -0.5f, 1.5f));
        let x_2480 : vec4<f32> = u_xlat11;
        u_xlat11 = vec4<f32>(x_2479.x, x_2479.y, x_2479.z, x_2480.w);
        let x_2482 : vec4<f32> = u_xlat10;
        let x_2485 : vec4<f32> = x_255.x_MainLightShadowmapSize;
        let x_2487 : vec3<f32> = (vec3<f32>(x_2482.y, x_2482.x, x_2482.z) * vec3<f32>(x_2485.x, x_2485.x, x_2485.x));
        let x_2488 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_2487.x, x_2487.y, x_2487.z, x_2488.w);
        let x_2490 : vec4<f32> = u_xlat11;
        let x_2493 : vec4<f32> = x_255.x_MainLightShadowmapSize;
        let x_2495 : vec3<f32> = (vec3<f32>(x_2490.x, x_2490.y, x_2490.z) * vec3<f32>(x_2493.y, x_2493.y, x_2493.y));
        let x_2496 : vec4<f32> = u_xlat11;
        u_xlat11 = vec4<f32>(x_2495.x, x_2495.y, x_2495.z, x_2496.w);
        let x_2499 : f32 = u_xlat11.x;
        u_xlat10.w = x_2499;
        let x_2501 : vec4<f32> = u_xlat8;
        let x_2504 : vec4<f32> = x_255.x_MainLightShadowmapSize;
        let x_2507 : vec4<f32> = u_xlat10;
        u_xlat12 = ((vec4<f32>(x_2501.x, x_2501.y, x_2501.x, x_2501.y) * vec4<f32>(x_2504.x, x_2504.y, x_2504.x, x_2504.y)) + vec4<f32>(x_2507.y, x_2507.w, x_2507.x, x_2507.w));
        let x_2510 : vec4<f32> = u_xlat8;
        let x_2513 : vec4<f32> = x_255.x_MainLightShadowmapSize;
        let x_2516 : vec4<f32> = u_xlat10;
        u_xlat52 = ((vec2<f32>(x_2510.x, x_2510.y) * vec2<f32>(x_2513.x, x_2513.y)) + vec2<f32>(x_2516.z, x_2516.w));
        let x_2520 : f32 = u_xlat10.y;
        u_xlat11.w = x_2520;
        let x_2522 : vec4<f32> = u_xlat11;
        let x_2523 : vec2<f32> = vec2<f32>(x_2522.y, x_2522.z);
        let x_2524 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_2524.x, x_2523.x, x_2524.z, x_2523.y);
        let x_2526 : vec4<f32> = u_xlat8;
        let x_2529 : vec4<f32> = x_255.x_MainLightShadowmapSize;
        let x_2532 : vec4<f32> = u_xlat10;
        u_xlat13 = ((vec4<f32>(x_2526.x, x_2526.y, x_2526.x, x_2526.y) * vec4<f32>(x_2529.x, x_2529.y, x_2529.x, x_2529.y)) + vec4<f32>(x_2532.x, x_2532.y, x_2532.z, x_2532.y));
        let x_2535 : vec4<f32> = u_xlat8;
        let x_2538 : vec4<f32> = x_255.x_MainLightShadowmapSize;
        let x_2541 : vec4<f32> = u_xlat11;
        u_xlat11 = ((vec4<f32>(x_2535.x, x_2535.y, x_2535.x, x_2535.y) * vec4<f32>(x_2538.x, x_2538.y, x_2538.x, x_2538.y)) + vec4<f32>(x_2541.w, x_2541.y, x_2541.w, x_2541.z));
        let x_2544 : vec4<f32> = u_xlat8;
        let x_2547 : vec4<f32> = x_255.x_MainLightShadowmapSize;
        let x_2550 : vec4<f32> = u_xlat10;
        u_xlat10 = ((vec4<f32>(x_2544.x, x_2544.y, x_2544.x, x_2544.y) * vec4<f32>(x_2547.x, x_2547.y, x_2547.x, x_2547.y)) + vec4<f32>(x_2550.x, x_2550.w, x_2550.z, x_2550.w));
        let x_2553 : vec4<f32> = u_xlat9;
        let x_2555 : vec4<f32> = u_xlat14;
        u_xlat15 = (vec4<f32>(x_2553.x, x_2553.x, x_2553.x, x_2553.y) * vec4<f32>(x_2555.z, x_2555.w, x_2555.y, x_2555.z));
        let x_2558 : vec4<f32> = u_xlat9;
        let x_2560 : vec4<f32> = u_xlat14;
        u_xlat16 = (vec4<f32>(x_2558.y, x_2558.y, x_2558.z, x_2558.z) * x_2560);
        let x_2564 : f32 = u_xlat9.z;
        let x_2566 : f32 = u_xlat14.y;
        u_xlat73 = (x_2564 * x_2566);
        let x_2569 : vec4<f32> = u_xlat12;
        let x_2570 : vec2<f32> = vec2<f32>(x_2569.x, x_2569.y);
        let x_2572 : f32 = u_xlat6.z;
        txVec34 = vec3<f32>(x_2570.x, x_2570.y, x_2572);
        let x_2579 : vec3<f32> = txVec34;
        let x_2581 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2579.xy, x_2579.z);
        u_xlat8.x = x_2581;
        let x_2584 : vec4<f32> = u_xlat12;
        let x_2585 : vec2<f32> = vec2<f32>(x_2584.z, x_2584.w);
        let x_2587 : f32 = u_xlat6.z;
        txVec35 = vec3<f32>(x_2585.x, x_2585.y, x_2587);
        let x_2594 : vec3<f32> = txVec35;
        let x_2596 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2594.xy, x_2594.z);
        u_xlat30.x = x_2596;
        let x_2599 : f32 = u_xlat30.x;
        let x_2601 : f32 = u_xlat15.y;
        u_xlat30.x = (x_2599 * x_2601);
        let x_2605 : f32 = u_xlat15.x;
        let x_2607 : f32 = u_xlat8.x;
        let x_2610 : f32 = u_xlat30.x;
        u_xlat8.x = ((x_2605 * x_2607) + x_2610);
        let x_2614 : vec2<f32> = u_xlat52;
        let x_2616 : f32 = u_xlat6.z;
        txVec36 = vec3<f32>(x_2614.x, x_2614.y, x_2616);
        let x_2623 : vec3<f32> = txVec36;
        let x_2625 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2623.xy, x_2623.z);
        u_xlat30.x = x_2625;
        let x_2628 : f32 = u_xlat15.z;
        let x_2630 : f32 = u_xlat30.x;
        let x_2633 : f32 = u_xlat8.x;
        u_xlat8.x = ((x_2628 * x_2630) + x_2633);
        let x_2637 : vec4<f32> = u_xlat11;
        let x_2638 : vec2<f32> = vec2<f32>(x_2637.x, x_2637.y);
        let x_2640 : f32 = u_xlat6.z;
        txVec37 = vec3<f32>(x_2638.x, x_2638.y, x_2640);
        let x_2647 : vec3<f32> = txVec37;
        let x_2649 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2647.xy, x_2647.z);
        u_xlat30.x = x_2649;
        let x_2652 : f32 = u_xlat15.w;
        let x_2654 : f32 = u_xlat30.x;
        let x_2657 : f32 = u_xlat8.x;
        u_xlat8.x = ((x_2652 * x_2654) + x_2657);
        let x_2661 : vec4<f32> = u_xlat13;
        let x_2662 : vec2<f32> = vec2<f32>(x_2661.x, x_2661.y);
        let x_2664 : f32 = u_xlat6.z;
        txVec38 = vec3<f32>(x_2662.x, x_2662.y, x_2664);
        let x_2671 : vec3<f32> = txVec38;
        let x_2673 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2671.xy, x_2671.z);
        u_xlat30.x = x_2673;
        let x_2676 : f32 = u_xlat16.x;
        let x_2678 : f32 = u_xlat30.x;
        let x_2681 : f32 = u_xlat8.x;
        u_xlat8.x = ((x_2676 * x_2678) + x_2681);
        let x_2685 : vec4<f32> = u_xlat13;
        let x_2686 : vec2<f32> = vec2<f32>(x_2685.z, x_2685.w);
        let x_2688 : f32 = u_xlat6.z;
        txVec39 = vec3<f32>(x_2686.x, x_2686.y, x_2688);
        let x_2695 : vec3<f32> = txVec39;
        let x_2697 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2695.xy, x_2695.z);
        u_xlat30.x = x_2697;
        let x_2700 : f32 = u_xlat16.y;
        let x_2702 : f32 = u_xlat30.x;
        let x_2705 : f32 = u_xlat8.x;
        u_xlat8.x = ((x_2700 * x_2702) + x_2705);
        let x_2709 : vec4<f32> = u_xlat11;
        let x_2710 : vec2<f32> = vec2<f32>(x_2709.z, x_2709.w);
        let x_2712 : f32 = u_xlat6.z;
        txVec40 = vec3<f32>(x_2710.x, x_2710.y, x_2712);
        let x_2719 : vec3<f32> = txVec40;
        let x_2721 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2719.xy, x_2719.z);
        u_xlat30.x = x_2721;
        let x_2724 : f32 = u_xlat16.z;
        let x_2726 : f32 = u_xlat30.x;
        let x_2729 : f32 = u_xlat8.x;
        u_xlat8.x = ((x_2724 * x_2726) + x_2729);
        let x_2733 : vec4<f32> = u_xlat10;
        let x_2734 : vec2<f32> = vec2<f32>(x_2733.x, x_2733.y);
        let x_2736 : f32 = u_xlat6.z;
        txVec41 = vec3<f32>(x_2734.x, x_2734.y, x_2736);
        let x_2743 : vec3<f32> = txVec41;
        let x_2745 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2743.xy, x_2743.z);
        u_xlat30.x = x_2745;
        let x_2748 : f32 = u_xlat16.w;
        let x_2750 : f32 = u_xlat30.x;
        let x_2753 : f32 = u_xlat8.x;
        u_xlat8.x = ((x_2748 * x_2750) + x_2753);
        let x_2757 : vec4<f32> = u_xlat10;
        let x_2758 : vec2<f32> = vec2<f32>(x_2757.z, x_2757.w);
        let x_2760 : f32 = u_xlat6.z;
        txVec42 = vec3<f32>(x_2758.x, x_2758.y, x_2760);
        let x_2767 : vec3<f32> = txVec42;
        let x_2769 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2767.xy, x_2767.z);
        u_xlat30.x = x_2769;
        let x_2771 : f32 = u_xlat73;
        let x_2773 : f32 = u_xlat30.x;
        let x_2776 : f32 = u_xlat8.x;
        u_xlat66 = ((x_2771 * x_2773) + x_2776);
      } else {
        let x_2779 : vec4<f32> = u_xlat6;
        let x_2782 : vec4<f32> = x_255.x_MainLightShadowmapSize;
        let x_2785 : vec2<f32> = ((vec2<f32>(x_2779.x, x_2779.y) * vec2<f32>(x_2782.z, x_2782.w)) + vec2<f32>(0.5f, 0.5f));
        let x_2786 : vec4<f32> = u_xlat8;
        u_xlat8 = vec4<f32>(x_2785.x, x_2785.y, x_2786.z, x_2786.w);
        let x_2788 : vec4<f32> = u_xlat8;
        let x_2790 : vec2<f32> = floor(vec2<f32>(x_2788.x, x_2788.y));
        let x_2791 : vec4<f32> = u_xlat8;
        u_xlat8 = vec4<f32>(x_2790.x, x_2790.y, x_2791.z, x_2791.w);
        let x_2793 : vec4<f32> = u_xlat6;
        let x_2796 : vec4<f32> = x_255.x_MainLightShadowmapSize;
        let x_2799 : vec4<f32> = u_xlat8;
        u_xlat52 = ((vec2<f32>(x_2793.x, x_2793.y) * vec2<f32>(x_2796.z, x_2796.w)) + -(vec2<f32>(x_2799.x, x_2799.y)));
        let x_2803 : vec2<f32> = u_xlat52;
        u_xlat9 = (vec4<f32>(x_2803.x, x_2803.x, x_2803.y, x_2803.y) + vec4<f32>(0.5f, 1.0f, 0.5f, 1.0f));
        let x_2806 : vec4<f32> = u_xlat9;
        let x_2808 : vec4<f32> = u_xlat9;
        u_xlat10 = (vec4<f32>(x_2806.x, x_2806.x, x_2806.z, x_2806.z) * vec4<f32>(x_2808.x, x_2808.x, x_2808.z, x_2808.z));
        let x_2811 : vec4<f32> = u_xlat10;
        let x_2813 : vec2<f32> = (vec2<f32>(x_2811.y, x_2811.w) * vec2<f32>(0.040816002f, 0.040816002f));
        let x_2814 : vec4<f32> = u_xlat11;
        u_xlat11 = vec4<f32>(x_2814.x, x_2813.x, x_2814.z, x_2813.y);
        let x_2816 : vec4<f32> = u_xlat10;
        let x_2819 : vec2<f32> = u_xlat52;
        let x_2821 : vec2<f32> = ((vec2<f32>(x_2816.x, x_2816.z) * vec2<f32>(0.5f, 0.5f)) + -(x_2819));
        let x_2822 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_2821.x, x_2822.y, x_2821.y, x_2822.w);
        let x_2824 : vec2<f32> = u_xlat52;
        let x_2826 : vec2<f32> = (-(x_2824) + vec2<f32>(1.0f, 1.0f));
        let x_2827 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_2826.x, x_2826.y, x_2827.z, x_2827.w);
        let x_2829 : vec2<f32> = u_xlat52;
        u_xlat54 = min(x_2829, vec2<f32>(0.0f, 0.0f));
        let x_2831 : vec2<f32> = u_xlat54;
        let x_2833 : vec2<f32> = u_xlat54;
        let x_2835 : vec4<f32> = u_xlat10;
        let x_2837 : vec2<f32> = ((-(x_2831) * x_2833) + vec2<f32>(x_2835.x, x_2835.y));
        let x_2838 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_2837.x, x_2837.y, x_2838.z, x_2838.w);
        let x_2840 : vec2<f32> = u_xlat52;
        u_xlat54 = max(x_2840, vec2<f32>(0.0f, 0.0f));
        let x_2842 : vec2<f32> = u_xlat54;
        let x_2844 : vec2<f32> = u_xlat54;
        let x_2846 : vec4<f32> = u_xlat9;
        let x_2848 : vec2<f32> = ((-(x_2842) * x_2844) + vec2<f32>(x_2846.y, x_2846.w));
        let x_2849 : vec3<f32> = u_xlat31;
        u_xlat31 = vec3<f32>(x_2848.x, x_2849.y, x_2848.y);
        let x_2851 : vec4<f32> = u_xlat10;
        let x_2853 : vec2<f32> = (vec2<f32>(x_2851.x, x_2851.y) + vec2<f32>(2.0f, 2.0f));
        let x_2854 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_2853.x, x_2853.y, x_2854.z, x_2854.w);
        let x_2856 : vec3<f32> = u_xlat31;
        let x_2858 : vec2<f32> = (vec2<f32>(x_2856.x, x_2856.z) + vec2<f32>(2.0f, 2.0f));
        let x_2859 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_2859.x, x_2858.x, x_2859.z, x_2858.y);
        let x_2862 : f32 = u_xlat9.y;
        u_xlat12.z = (x_2862 * 0.081632003f);
        let x_2865 : vec4<f32> = u_xlat9;
        let x_2867 : vec3<f32> = (vec3<f32>(x_2865.z, x_2865.x, x_2865.w) * vec3<f32>(0.081632003f, 0.081632003f, 0.081632003f));
        let x_2868 : vec4<f32> = u_xlat13;
        u_xlat13 = vec4<f32>(x_2867.x, x_2867.y, x_2867.z, x_2868.w);
        let x_2870 : vec4<f32> = u_xlat10;
        let x_2872 : vec2<f32> = (vec2<f32>(x_2870.x, x_2870.y) * vec2<f32>(0.081632003f, 0.081632003f));
        let x_2873 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_2872.x, x_2872.y, x_2873.z, x_2873.w);
        let x_2876 : f32 = u_xlat13.y;
        u_xlat12.x = x_2876;
        let x_2878 : vec2<f32> = u_xlat52;
        let x_2881 : vec2<f32> = ((vec2<f32>(x_2878.x, x_2878.x) * vec2<f32>(-0.081632003f, 0.081632003f)) + vec2<f32>(0.163264006f, 0.081632003f));
        let x_2882 : vec4<f32> = u_xlat12;
        u_xlat12 = vec4<f32>(x_2882.x, x_2881.x, x_2882.z, x_2881.y);
        let x_2884 : vec2<f32> = u_xlat52;
        let x_2887 : vec2<f32> = ((vec2<f32>(x_2884.x, x_2884.x) * vec2<f32>(-0.081632003f, 0.081632003f)) + vec2<f32>(0.081632003f, 0.163264006f));
        let x_2888 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_2887.x, x_2888.y, x_2887.y, x_2888.w);
        let x_2891 : f32 = u_xlat9.x;
        u_xlat10.y = x_2891;
        let x_2894 : f32 = u_xlat11.y;
        u_xlat10.w = x_2894;
        let x_2896 : vec4<f32> = u_xlat10;
        let x_2897 : vec4<f32> = u_xlat12;
        u_xlat12 = (x_2896 + x_2897);
        let x_2899 : vec2<f32> = u_xlat52;
        let x_2902 : vec2<f32> = ((vec2<f32>(x_2899.y, x_2899.y) * vec2<f32>(-0.081632003f, 0.081632003f)) + vec2<f32>(0.163264006f, 0.081632003f));
        let x_2903 : vec4<f32> = u_xlat13;
        u_xlat13 = vec4<f32>(x_2903.x, x_2902.x, x_2903.z, x_2902.y);
        let x_2905 : vec2<f32> = u_xlat52;
        let x_2908 : vec2<f32> = ((vec2<f32>(x_2905.y, x_2905.y) * vec2<f32>(-0.081632003f, 0.081632003f)) + vec2<f32>(0.081632003f, 0.163264006f));
        let x_2909 : vec4<f32> = u_xlat11;
        u_xlat11 = vec4<f32>(x_2908.x, x_2909.y, x_2908.y, x_2909.w);
        let x_2912 : f32 = u_xlat9.y;
        u_xlat11.y = x_2912;
        let x_2914 : vec4<f32> = u_xlat11;
        let x_2915 : vec4<f32> = u_xlat13;
        u_xlat9 = (x_2914 + x_2915);
        let x_2917 : vec4<f32> = u_xlat10;
        let x_2918 : vec4<f32> = u_xlat12;
        u_xlat10 = (x_2917 / x_2918);
        let x_2920 : vec4<f32> = u_xlat10;
        u_xlat10 = (x_2920 + vec4<f32>(-3.5f, -1.5f, 0.5f, 2.5f));
        let x_2922 : vec4<f32> = u_xlat11;
        let x_2923 : vec4<f32> = u_xlat9;
        u_xlat11 = (x_2922 / x_2923);
        let x_2925 : vec4<f32> = u_xlat11;
        u_xlat11 = (x_2925 + vec4<f32>(-3.5f, -1.5f, 0.5f, 2.5f));
        let x_2927 : vec4<f32> = u_xlat10;
        let x_2930 : vec4<f32> = x_255.x_MainLightShadowmapSize;
        u_xlat10 = (vec4<f32>(x_2927.w, x_2927.x, x_2927.y, x_2927.z) * vec4<f32>(x_2930.x, x_2930.x, x_2930.x, x_2930.x));
        let x_2933 : vec4<f32> = u_xlat11;
        let x_2936 : vec4<f32> = x_255.x_MainLightShadowmapSize;
        u_xlat11 = (vec4<f32>(x_2933.x, x_2933.w, x_2933.y, x_2933.z) * vec4<f32>(x_2936.y, x_2936.y, x_2936.y, x_2936.y));
        let x_2939 : vec4<f32> = u_xlat10;
        let x_2940 : vec3<f32> = vec3<f32>(x_2939.y, x_2939.z, x_2939.w);
        let x_2941 : vec4<f32> = u_xlat13;
        u_xlat13 = vec4<f32>(x_2940.x, x_2941.y, x_2940.y, x_2940.z);
        let x_2944 : f32 = u_xlat11.x;
        u_xlat13.y = x_2944;
        let x_2946 : vec4<f32> = u_xlat8;
        let x_2949 : vec4<f32> = x_255.x_MainLightShadowmapSize;
        let x_2952 : vec4<f32> = u_xlat13;
        u_xlat14 = ((vec4<f32>(x_2946.x, x_2946.y, x_2946.x, x_2946.y) * vec4<f32>(x_2949.x, x_2949.y, x_2949.x, x_2949.y)) + vec4<f32>(x_2952.x, x_2952.y, x_2952.z, x_2952.y));
        let x_2955 : vec4<f32> = u_xlat8;
        let x_2958 : vec4<f32> = x_255.x_MainLightShadowmapSize;
        let x_2961 : vec4<f32> = u_xlat13;
        u_xlat52 = ((vec2<f32>(x_2955.x, x_2955.y) * vec2<f32>(x_2958.x, x_2958.y)) + vec2<f32>(x_2961.w, x_2961.y));
        let x_2965 : f32 = u_xlat13.y;
        u_xlat10.y = x_2965;
        let x_2968 : f32 = u_xlat11.z;
        u_xlat13.y = x_2968;
        let x_2970 : vec4<f32> = u_xlat8;
        let x_2973 : vec4<f32> = x_255.x_MainLightShadowmapSize;
        let x_2976 : vec4<f32> = u_xlat13;
        u_xlat15 = ((vec4<f32>(x_2970.x, x_2970.y, x_2970.x, x_2970.y) * vec4<f32>(x_2973.x, x_2973.y, x_2973.x, x_2973.y)) + vec4<f32>(x_2976.x, x_2976.y, x_2976.z, x_2976.y));
        let x_2979 : vec4<f32> = u_xlat8;
        let x_2982 : vec4<f32> = x_255.x_MainLightShadowmapSize;
        let x_2985 : vec4<f32> = u_xlat13;
        let x_2987 : vec2<f32> = ((vec2<f32>(x_2979.x, x_2979.y) * vec2<f32>(x_2982.x, x_2982.y)) + vec2<f32>(x_2985.w, x_2985.y));
        let x_2988 : vec4<f32> = u_xlat16;
        u_xlat16 = vec4<f32>(x_2987.x, x_2987.y, x_2988.z, x_2988.w);
        let x_2991 : f32 = u_xlat13.y;
        u_xlat10.z = x_2991;
        let x_2993 : vec4<f32> = u_xlat8;
        let x_2996 : vec4<f32> = x_255.x_MainLightShadowmapSize;
        let x_2999 : vec4<f32> = u_xlat10;
        u_xlat17 = ((vec4<f32>(x_2993.x, x_2993.y, x_2993.x, x_2993.y) * vec4<f32>(x_2996.x, x_2996.y, x_2996.x, x_2996.y)) + vec4<f32>(x_2999.x, x_2999.y, x_2999.x, x_2999.z));
        let x_3003 : f32 = u_xlat11.w;
        u_xlat13.y = x_3003;
        let x_3005 : vec4<f32> = u_xlat8;
        let x_3008 : vec4<f32> = x_255.x_MainLightShadowmapSize;
        let x_3011 : vec4<f32> = u_xlat13;
        u_xlat18 = ((vec4<f32>(x_3005.x, x_3005.y, x_3005.x, x_3005.y) * vec4<f32>(x_3008.x, x_3008.y, x_3008.x, x_3008.y)) + vec4<f32>(x_3011.x, x_3011.y, x_3011.z, x_3011.y));
        let x_3015 : vec4<f32> = u_xlat8;
        let x_3018 : vec4<f32> = x_255.x_MainLightShadowmapSize;
        let x_3021 : vec4<f32> = u_xlat13;
        u_xlat32 = ((vec2<f32>(x_3015.x, x_3015.y) * vec2<f32>(x_3018.x, x_3018.y)) + vec2<f32>(x_3021.w, x_3021.y));
        let x_3025 : f32 = u_xlat13.y;
        u_xlat10.w = x_3025;
        let x_3028 : vec4<f32> = u_xlat8;
        let x_3031 : vec4<f32> = x_255.x_MainLightShadowmapSize;
        let x_3034 : vec4<f32> = u_xlat10;
        u_xlat60 = ((vec2<f32>(x_3028.x, x_3028.y) * vec2<f32>(x_3031.x, x_3031.y)) + vec2<f32>(x_3034.x, x_3034.w));
        let x_3037 : vec4<f32> = u_xlat13;
        let x_3038 : vec3<f32> = vec3<f32>(x_3037.x, x_3037.z, x_3037.w);
        let x_3039 : vec4<f32> = u_xlat11;
        u_xlat11 = vec4<f32>(x_3038.x, x_3039.y, x_3038.y, x_3038.z);
        let x_3041 : vec4<f32> = u_xlat8;
        let x_3044 : vec4<f32> = x_255.x_MainLightShadowmapSize;
        let x_3047 : vec4<f32> = u_xlat11;
        u_xlat13 = ((vec4<f32>(x_3041.x, x_3041.y, x_3041.x, x_3041.y) * vec4<f32>(x_3044.x, x_3044.y, x_3044.x, x_3044.y)) + vec4<f32>(x_3047.x, x_3047.y, x_3047.z, x_3047.y));
        let x_3051 : vec4<f32> = u_xlat8;
        let x_3054 : vec4<f32> = x_255.x_MainLightShadowmapSize;
        let x_3057 : vec4<f32> = u_xlat11;
        u_xlat55 = ((vec2<f32>(x_3051.x, x_3051.y) * vec2<f32>(x_3054.x, x_3054.y)) + vec2<f32>(x_3057.w, x_3057.y));
        let x_3061 : f32 = u_xlat10.x;
        u_xlat11.x = x_3061;
        let x_3063 : vec4<f32> = u_xlat8;
        let x_3066 : vec4<f32> = x_255.x_MainLightShadowmapSize;
        let x_3069 : vec4<f32> = u_xlat11;
        let x_3071 : vec2<f32> = ((vec2<f32>(x_3063.x, x_3063.y) * vec2<f32>(x_3066.x, x_3066.y)) + vec2<f32>(x_3069.x, x_3069.y));
        let x_3072 : vec4<f32> = u_xlat8;
        u_xlat8 = vec4<f32>(x_3071.x, x_3071.y, x_3072.z, x_3072.w);
        let x_3074 : vec4<f32> = u_xlat9;
        let x_3076 : vec4<f32> = u_xlat12;
        u_xlat19 = (vec4<f32>(x_3074.x, x_3074.x, x_3074.x, x_3074.x) * x_3076);
        let x_3078 : vec4<f32> = u_xlat9;
        let x_3080 : vec4<f32> = u_xlat12;
        u_xlat20 = (vec4<f32>(x_3078.y, x_3078.y, x_3078.y, x_3078.y) * x_3080);
        let x_3083 : vec4<f32> = u_xlat9;
        let x_3085 : vec4<f32> = u_xlat12;
        u_xlat21 = (vec4<f32>(x_3083.z, x_3083.z, x_3083.z, x_3083.z) * x_3085);
        let x_3087 : vec4<f32> = u_xlat9;
        let x_3089 : vec4<f32> = u_xlat12;
        u_xlat9 = (vec4<f32>(x_3087.w, x_3087.w, x_3087.w, x_3087.w) * x_3089);
        let x_3092 : vec4<f32> = u_xlat14;
        let x_3093 : vec2<f32> = vec2<f32>(x_3092.x, x_3092.y);
        let x_3095 : f32 = u_xlat6.z;
        txVec43 = vec3<f32>(x_3093.x, x_3093.y, x_3095);
        let x_3102 : vec3<f32> = txVec43;
        let x_3104 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_3102.xy, x_3102.z);
        u_xlat73 = x_3104;
        let x_3106 : vec4<f32> = u_xlat14;
        let x_3107 : vec2<f32> = vec2<f32>(x_3106.z, x_3106.w);
        let x_3109 : f32 = u_xlat6.z;
        txVec44 = vec3<f32>(x_3107.x, x_3107.y, x_3109);
        let x_3116 : vec3<f32> = txVec44;
        let x_3118 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_3116.xy, x_3116.z);
        u_xlat10.x = x_3118;
        let x_3121 : f32 = u_xlat10.x;
        let x_3123 : f32 = u_xlat19.y;
        u_xlat10.x = (x_3121 * x_3123);
        let x_3127 : f32 = u_xlat19.x;
        let x_3128 : f32 = u_xlat73;
        let x_3131 : f32 = u_xlat10.x;
        u_xlat73 = ((x_3127 * x_3128) + x_3131);
        let x_3134 : vec2<f32> = u_xlat52;
        let x_3136 : f32 = u_xlat6.z;
        txVec45 = vec3<f32>(x_3134.x, x_3134.y, x_3136);
        let x_3143 : vec3<f32> = txVec45;
        let x_3145 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_3143.xy, x_3143.z);
        u_xlat52.x = x_3145;
        let x_3148 : f32 = u_xlat19.z;
        let x_3150 : f32 = u_xlat52.x;
        let x_3152 : f32 = u_xlat73;
        u_xlat73 = ((x_3148 * x_3150) + x_3152);
        let x_3155 : vec4<f32> = u_xlat17;
        let x_3156 : vec2<f32> = vec2<f32>(x_3155.x, x_3155.y);
        let x_3158 : f32 = u_xlat6.z;
        txVec46 = vec3<f32>(x_3156.x, x_3156.y, x_3158);
        let x_3165 : vec3<f32> = txVec46;
        let x_3167 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_3165.xy, x_3165.z);
        u_xlat52.x = x_3167;
        let x_3170 : f32 = u_xlat19.w;
        let x_3172 : f32 = u_xlat52.x;
        let x_3174 : f32 = u_xlat73;
        u_xlat73 = ((x_3170 * x_3172) + x_3174);
        let x_3177 : vec4<f32> = u_xlat15;
        let x_3178 : vec2<f32> = vec2<f32>(x_3177.x, x_3177.y);
        let x_3180 : f32 = u_xlat6.z;
        txVec47 = vec3<f32>(x_3178.x, x_3178.y, x_3180);
        let x_3187 : vec3<f32> = txVec47;
        let x_3189 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_3187.xy, x_3187.z);
        u_xlat52.x = x_3189;
        let x_3192 : f32 = u_xlat20.x;
        let x_3194 : f32 = u_xlat52.x;
        let x_3196 : f32 = u_xlat73;
        u_xlat73 = ((x_3192 * x_3194) + x_3196);
        let x_3199 : vec4<f32> = u_xlat15;
        let x_3200 : vec2<f32> = vec2<f32>(x_3199.z, x_3199.w);
        let x_3202 : f32 = u_xlat6.z;
        txVec48 = vec3<f32>(x_3200.x, x_3200.y, x_3202);
        let x_3209 : vec3<f32> = txVec48;
        let x_3211 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_3209.xy, x_3209.z);
        u_xlat52.x = x_3211;
        let x_3214 : f32 = u_xlat20.y;
        let x_3216 : f32 = u_xlat52.x;
        let x_3218 : f32 = u_xlat73;
        u_xlat73 = ((x_3214 * x_3216) + x_3218);
        let x_3221 : vec4<f32> = u_xlat16;
        let x_3222 : vec2<f32> = vec2<f32>(x_3221.x, x_3221.y);
        let x_3224 : f32 = u_xlat6.z;
        txVec49 = vec3<f32>(x_3222.x, x_3222.y, x_3224);
        let x_3231 : vec3<f32> = txVec49;
        let x_3233 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_3231.xy, x_3231.z);
        u_xlat52.x = x_3233;
        let x_3236 : f32 = u_xlat20.z;
        let x_3238 : f32 = u_xlat52.x;
        let x_3240 : f32 = u_xlat73;
        u_xlat73 = ((x_3236 * x_3238) + x_3240);
        let x_3243 : vec4<f32> = u_xlat17;
        let x_3244 : vec2<f32> = vec2<f32>(x_3243.z, x_3243.w);
        let x_3246 : f32 = u_xlat6.z;
        txVec50 = vec3<f32>(x_3244.x, x_3244.y, x_3246);
        let x_3253 : vec3<f32> = txVec50;
        let x_3255 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_3253.xy, x_3253.z);
        u_xlat52.x = x_3255;
        let x_3258 : f32 = u_xlat20.w;
        let x_3260 : f32 = u_xlat52.x;
        let x_3262 : f32 = u_xlat73;
        u_xlat73 = ((x_3258 * x_3260) + x_3262);
        let x_3265 : vec4<f32> = u_xlat18;
        let x_3266 : vec2<f32> = vec2<f32>(x_3265.x, x_3265.y);
        let x_3268 : f32 = u_xlat6.z;
        txVec51 = vec3<f32>(x_3266.x, x_3266.y, x_3268);
        let x_3275 : vec3<f32> = txVec51;
        let x_3277 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_3275.xy, x_3275.z);
        u_xlat52.x = x_3277;
        let x_3280 : f32 = u_xlat21.x;
        let x_3282 : f32 = u_xlat52.x;
        let x_3284 : f32 = u_xlat73;
        u_xlat73 = ((x_3280 * x_3282) + x_3284);
        let x_3287 : vec4<f32> = u_xlat18;
        let x_3288 : vec2<f32> = vec2<f32>(x_3287.z, x_3287.w);
        let x_3290 : f32 = u_xlat6.z;
        txVec52 = vec3<f32>(x_3288.x, x_3288.y, x_3290);
        let x_3297 : vec3<f32> = txVec52;
        let x_3299 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_3297.xy, x_3297.z);
        u_xlat52.x = x_3299;
        let x_3302 : f32 = u_xlat21.y;
        let x_3304 : f32 = u_xlat52.x;
        let x_3306 : f32 = u_xlat73;
        u_xlat73 = ((x_3302 * x_3304) + x_3306);
        let x_3309 : vec2<f32> = u_xlat32;
        let x_3311 : f32 = u_xlat6.z;
        txVec53 = vec3<f32>(x_3309.x, x_3309.y, x_3311);
        let x_3318 : vec3<f32> = txVec53;
        let x_3320 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_3318.xy, x_3318.z);
        u_xlat52.x = x_3320;
        let x_3323 : f32 = u_xlat21.z;
        let x_3325 : f32 = u_xlat52.x;
        let x_3327 : f32 = u_xlat73;
        u_xlat73 = ((x_3323 * x_3325) + x_3327);
        let x_3330 : vec2<f32> = u_xlat60;
        let x_3332 : f32 = u_xlat6.z;
        txVec54 = vec3<f32>(x_3330.x, x_3330.y, x_3332);
        let x_3339 : vec3<f32> = txVec54;
        let x_3341 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_3339.xy, x_3339.z);
        u_xlat52.x = x_3341;
        let x_3344 : f32 = u_xlat21.w;
        let x_3346 : f32 = u_xlat52.x;
        let x_3348 : f32 = u_xlat73;
        u_xlat73 = ((x_3344 * x_3346) + x_3348);
        let x_3351 : vec4<f32> = u_xlat13;
        let x_3352 : vec2<f32> = vec2<f32>(x_3351.x, x_3351.y);
        let x_3354 : f32 = u_xlat6.z;
        txVec55 = vec3<f32>(x_3352.x, x_3352.y, x_3354);
        let x_3361 : vec3<f32> = txVec55;
        let x_3363 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_3361.xy, x_3361.z);
        u_xlat52.x = x_3363;
        let x_3366 : f32 = u_xlat9.x;
        let x_3368 : f32 = u_xlat52.x;
        let x_3370 : f32 = u_xlat73;
        u_xlat73 = ((x_3366 * x_3368) + x_3370);
        let x_3373 : vec4<f32> = u_xlat13;
        let x_3374 : vec2<f32> = vec2<f32>(x_3373.z, x_3373.w);
        let x_3376 : f32 = u_xlat6.z;
        txVec56 = vec3<f32>(x_3374.x, x_3374.y, x_3376);
        let x_3383 : vec3<f32> = txVec56;
        let x_3385 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_3383.xy, x_3383.z);
        u_xlat52.x = x_3385;
        let x_3388 : f32 = u_xlat9.y;
        let x_3390 : f32 = u_xlat52.x;
        let x_3392 : f32 = u_xlat73;
        u_xlat73 = ((x_3388 * x_3390) + x_3392);
        let x_3395 : vec2<f32> = u_xlat55;
        let x_3397 : f32 = u_xlat6.z;
        txVec57 = vec3<f32>(x_3395.x, x_3395.y, x_3397);
        let x_3404 : vec3<f32> = txVec57;
        let x_3406 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_3404.xy, x_3404.z);
        u_xlat52.x = x_3406;
        let x_3409 : f32 = u_xlat9.z;
        let x_3411 : f32 = u_xlat52.x;
        let x_3413 : f32 = u_xlat73;
        u_xlat73 = ((x_3409 * x_3411) + x_3413);
        let x_3416 : vec4<f32> = u_xlat8;
        let x_3417 : vec2<f32> = vec2<f32>(x_3416.x, x_3416.y);
        let x_3419 : f32 = u_xlat6.z;
        txVec58 = vec3<f32>(x_3417.x, x_3417.y, x_3419);
        let x_3426 : vec3<f32> = txVec58;
        let x_3428 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_3426.xy, x_3426.z);
        u_xlat8.x = x_3428;
        let x_3431 : f32 = u_xlat9.w;
        let x_3433 : f32 = u_xlat8.x;
        let x_3435 : f32 = u_xlat73;
        u_xlat66 = ((x_3431 * x_3433) + x_3435);
      }
    }
  } else {
    let x_3439 : vec4<f32> = u_xlat6;
    let x_3440 : vec2<f32> = vec2<f32>(x_3439.x, x_3439.y);
    let x_3442 : f32 = u_xlat6.z;
    txVec59 = vec3<f32>(x_3440.x, x_3440.y, x_3442);
    let x_3449 : vec3<f32> = txVec59;
    let x_3451 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_3449.xy, x_3449.z);
    u_xlat66 = x_3451;
  }
  let x_3452 : f32 = u_xlat66;
  let x_3454 : f32 = x_255.x_MainLightShadowParams.x;
  let x_3456 : f32 = u_xlat68;
  u_xlat66 = ((x_3452 * x_3454) + x_3456);
  let x_3458 : bool = u_xlatb70;
  let x_3459 : f32 = u_xlat66;
  u_xlat66 = select(x_3459, 1.0f, x_3458);
  let x_3461 : vec3<f32> = vs_INTERP0;
  let x_3463 : vec3<f32> = x_90.x_WorldSpaceCameraPos;
  let x_3465 : vec3<f32> = (x_3461 + -(x_3463));
  let x_3466 : vec4<f32> = u_xlat6;
  u_xlat6 = vec4<f32>(x_3465.x, x_3465.y, x_3465.z, x_3466.w);
  let x_3468 : vec4<f32> = u_xlat6;
  let x_3470 : vec4<f32> = u_xlat6;
  u_xlat68 = dot(vec3<f32>(x_3468.x, x_3468.y, x_3468.z), vec3<f32>(x_3470.x, x_3470.y, x_3470.z));
  let x_3473 : f32 = u_xlat68;
  let x_3475 : f32 = x_255.x_MainLightShadowParams.z;
  let x_3478 : f32 = x_255.x_MainLightShadowParams.w;
  u_xlat68 = ((x_3473 * x_3475) + x_3478);
  let x_3480 : f32 = u_xlat68;
  u_xlat68 = clamp(x_3480, 0.0f, 1.0f);
  let x_3482 : f32 = u_xlat66;
  u_xlat70 = (-(x_3482) + 1.0f);
  let x_3485 : f32 = u_xlat68;
  let x_3486 : f32 = u_xlat70;
  let x_3488 : f32 = u_xlat66;
  u_xlat66 = ((x_3485 * x_3486) + x_3488);
  let x_3496 : f32 = x_3494.x_MainLightCookieTextureFormat;
  u_xlatb68 = !((x_3496 == -1.0f));
  let x_3498 : bool = u_xlatb68;
  if (x_3498) {
    let x_3501 : vec3<f32> = vs_INTERP0;
    let x_3504 : vec4<f32> = x_3494.x_MainLightWorldToLight[1i];
    let x_3506 : vec2<f32> = (vec2<f32>(x_3501.y, x_3501.y) * vec2<f32>(x_3504.x, x_3504.y));
    let x_3507 : vec4<f32> = u_xlat6;
    u_xlat6 = vec4<f32>(x_3506.x, x_3506.y, x_3507.z, x_3507.w);
    let x_3510 : vec4<f32> = x_3494.x_MainLightWorldToLight[0i];
    let x_3512 : vec3<f32> = vs_INTERP0;
    let x_3515 : vec4<f32> = u_xlat6;
    let x_3517 : vec2<f32> = ((vec2<f32>(x_3510.x, x_3510.y) * vec2<f32>(x_3512.x, x_3512.x)) + vec2<f32>(x_3515.x, x_3515.y));
    let x_3518 : vec4<f32> = u_xlat6;
    u_xlat6 = vec4<f32>(x_3517.x, x_3517.y, x_3518.z, x_3518.w);
    let x_3521 : vec4<f32> = x_3494.x_MainLightWorldToLight[2i];
    let x_3523 : vec3<f32> = vs_INTERP0;
    let x_3526 : vec4<f32> = u_xlat6;
    let x_3528 : vec2<f32> = ((vec2<f32>(x_3521.x, x_3521.y) * vec2<f32>(x_3523.z, x_3523.z)) + vec2<f32>(x_3526.x, x_3526.y));
    let x_3529 : vec4<f32> = u_xlat6;
    u_xlat6 = vec4<f32>(x_3528.x, x_3528.y, x_3529.z, x_3529.w);
    let x_3531 : vec4<f32> = u_xlat6;
    let x_3534 : vec4<f32> = x_3494.x_MainLightWorldToLight[3i];
    let x_3536 : vec2<f32> = (vec2<f32>(x_3531.x, x_3531.y) + vec2<f32>(x_3534.x, x_3534.y));
    let x_3537 : vec4<f32> = u_xlat6;
    u_xlat6 = vec4<f32>(x_3536.x, x_3536.y, x_3537.z, x_3537.w);
    let x_3539 : vec4<f32> = u_xlat6;
    let x_3542 : vec2<f32> = ((vec2<f32>(x_3539.x, x_3539.y) * vec2<f32>(0.5f, 0.5f)) + vec2<f32>(0.5f, 0.5f));
    let x_3543 : vec4<f32> = u_xlat6;
    u_xlat6 = vec4<f32>(x_3542.x, x_3542.y, x_3543.z, x_3543.w);
    let x_3550 : vec4<f32> = u_xlat6;
    let x_3553 : f32 = x_90.x_GlobalMipBias.x;
    let x_3554 : vec4<f32> = textureSampleBias(x_MainLightCookieTexture, sampler_MainLightCookieTexture, vec2<f32>(x_3550.x, x_3550.y), x_3553);
    u_xlat8 = x_3554;
    let x_3556 : f32 = x_3494.x_MainLightCookieTextureFormat;
    let x_3558 : f32 = x_3494.x_MainLightCookieTextureFormat;
    let x_3560 : f32 = x_3494.x_MainLightCookieTextureFormat;
    let x_3562 : f32 = x_3494.x_MainLightCookieTextureFormat;
    let x_3563 : vec4<f32> = vec4<f32>(x_3556, x_3558, x_3560, x_3562);
    let x_3570 : vec4<bool> = (vec4<f32>(x_3563.x, x_3563.y, x_3563.z, x_3563.w) == vec4<f32>(0.0f, 1.0f, 0.0f, 0.0f));
    let x_3571 : vec2<bool> = vec2<bool>(x_3570.x, x_3570.y);
    let x_3572 : vec4<bool> = u_xlatb6;
    u_xlatb6 = vec4<bool>(x_3571.x, x_3571.y, x_3572.z, x_3572.w);
    let x_3575 : bool = u_xlatb6.y;
    if (x_3575) {
      let x_3580 : f32 = u_xlat8.w;
      x_3576 = x_3580;
    } else {
      let x_3583 : f32 = u_xlat8.x;
      x_3576 = x_3583;
    }
    let x_3584 : f32 = x_3576;
    u_xlat68 = x_3584;
    let x_3586 : bool = u_xlatb6.x;
    if (x_3586) {
      let x_3590 : vec4<f32> = u_xlat8;
      x_3587 = vec3<f32>(x_3590.x, x_3590.y, x_3590.z);
    } else {
      let x_3593 : f32 = u_xlat68;
      x_3587 = vec3<f32>(x_3593, x_3593, x_3593);
    }
    let x_3595 : vec3<f32> = x_3587;
    let x_3596 : vec4<f32> = u_xlat6;
    u_xlat6 = vec4<f32>(x_3595.x, x_3595.y, x_3595.z, x_3596.w);
  } else {
    u_xlat6.x = 1.0f;
    u_xlat6.y = 1.0f;
    u_xlat6.z = 1.0f;
  }
  let x_3602 : vec4<f32> = u_xlat6;
  let x_3605 : vec4<f32> = x_90.x_MainLightColor;
  let x_3607 : vec3<f32> = (vec3<f32>(x_3602.x, x_3602.y, x_3602.z) * vec3<f32>(x_3605.x, x_3605.y, x_3605.z));
  let x_3608 : vec4<f32> = u_xlat6;
  u_xlat6 = vec4<f32>(x_3607.x, x_3607.y, x_3607.z, x_3608.w);
  let x_3610 : vec2<f32> = u_xlat51;
  let x_3612 : vec4<f32> = u_xlat6;
  let x_3614 : vec3<f32> = (vec3<f32>(x_3610.x, x_3610.x, x_3610.x) * vec3<f32>(x_3612.x, x_3612.y, x_3612.z));
  let x_3615 : vec4<f32> = u_xlat6;
  u_xlat6 = vec4<f32>(x_3614.x, x_3614.y, x_3614.z, x_3615.w);
  let x_3617 : vec3<f32> = u_xlat1;
  let x_3619 : vec4<f32> = u_xlat3;
  u_xlat68 = dot(-(x_3617), vec3<f32>(x_3619.x, x_3619.y, x_3619.z));
  let x_3622 : f32 = u_xlat68;
  let x_3623 : f32 = u_xlat68;
  u_xlat68 = (x_3622 + x_3623);
  let x_3625 : vec4<f32> = u_xlat3;
  let x_3627 : f32 = u_xlat68;
  let x_3631 : vec3<f32> = u_xlat1;
  let x_3633 : vec3<f32> = ((vec3<f32>(x_3625.x, x_3625.y, x_3625.z) * -(vec3<f32>(x_3627, x_3627, x_3627))) + -(x_3631));
  let x_3634 : vec4<f32> = u_xlat8;
  u_xlat8 = vec4<f32>(x_3633.x, x_3633.y, x_3633.z, x_3634.w);
  let x_3636 : vec4<f32> = u_xlat3;
  let x_3638 : vec3<f32> = u_xlat1;
  u_xlat68 = dot(vec3<f32>(x_3636.x, x_3636.y, x_3636.z), x_3638);
  let x_3640 : f32 = u_xlat68;
  u_xlat68 = clamp(x_3640, 0.0f, 1.0f);
  let x_3642 : f32 = u_xlat68;
  u_xlat68 = (-(x_3642) + 1.0f);
  let x_3645 : f32 = u_xlat68;
  let x_3646 : f32 = u_xlat68;
  u_xlat68 = (x_3645 * x_3646);
  let x_3648 : f32 = u_xlat68;
  let x_3649 : f32 = u_xlat68;
  u_xlat68 = (x_3648 * x_3649);
  let x_3651 : f32 = u_xlat46;
  u_xlat70 = ((-(x_3651) * 0.699999988f) + 1.700000048f);
  let x_3657 : f32 = u_xlat46;
  let x_3658 : f32 = u_xlat70;
  u_xlat46 = (x_3657 * x_3658);
  let x_3660 : f32 = u_xlat46;
  u_xlat46 = (x_3660 * 6.0f);
  let x_3671 : vec4<f32> = u_xlat8;
  let x_3673 : f32 = u_xlat46;
  let x_3674 : vec4<f32> = textureSampleLevel(unity_SpecCube0, samplerunity_SpecCube0, vec3<f32>(x_3671.x, x_3671.y, x_3671.z), x_3673);
  u_xlat8 = x_3674;
  let x_3676 : f32 = u_xlat8.w;
  u_xlat46 = (x_3676 + -1.0f);
  let x_3679 : f32 = x_145.unity_SpecCube0_HDR.w;
  let x_3680 : f32 = u_xlat46;
  u_xlat46 = ((x_3679 * x_3680) + 1.0f);
  let x_3683 : f32 = u_xlat46;
  u_xlat46 = max(x_3683, 0.0f);
  let x_3685 : f32 = u_xlat46;
  u_xlat46 = log2(x_3685);
  let x_3687 : f32 = u_xlat46;
  let x_3689 : f32 = x_145.unity_SpecCube0_HDR.y;
  u_xlat46 = (x_3687 * x_3689);
  let x_3691 : f32 = u_xlat46;
  u_xlat46 = exp2(x_3691);
  let x_3693 : f32 = u_xlat46;
  let x_3695 : f32 = x_145.unity_SpecCube0_HDR.x;
  u_xlat46 = (x_3693 * x_3695);
  let x_3697 : vec4<f32> = u_xlat8;
  let x_3699 : f32 = u_xlat46;
  let x_3701 : vec3<f32> = (vec3<f32>(x_3697.x, x_3697.y, x_3697.z) * vec3<f32>(x_3699, x_3699, x_3699));
  let x_3702 : vec4<f32> = u_xlat8;
  u_xlat8 = vec4<f32>(x_3701.x, x_3701.y, x_3701.z, x_3702.w);
  let x_3704 : f32 = u_xlat69;
  let x_3706 : f32 = u_xlat69;
  let x_3710 : vec2<f32> = ((vec2<f32>(x_3704, x_3704) * vec2<f32>(x_3706, x_3706)) + vec2<f32>(-1.0f, 1.0f));
  let x_3711 : vec4<f32> = u_xlat9;
  u_xlat9 = vec4<f32>(x_3710.x, x_3710.y, x_3711.z, x_3711.w);
  let x_3714 : f32 = u_xlat9.y;
  u_xlat46 = (1.0f / x_3714);
  let x_3717 : f32 = u_xlat5.x;
  u_xlat69 = (x_3717 + -0.039999999f);
  let x_3720 : f32 = u_xlat68;
  let x_3721 : f32 = u_xlat69;
  u_xlat68 = ((x_3720 * x_3721) + 0.039999999f);
  let x_3725 : f32 = u_xlat68;
  let x_3726 : f32 = u_xlat46;
  u_xlat46 = (x_3725 * x_3726);
  let x_3728 : f32 = u_xlat46;
  let x_3730 : vec4<f32> = u_xlat8;
  let x_3732 : vec3<f32> = (vec3<f32>(x_3728, x_3728, x_3728) * vec3<f32>(x_3730.x, x_3730.y, x_3730.z));
  let x_3733 : vec4<f32> = u_xlat8;
  u_xlat8 = vec4<f32>(x_3732.x, x_3732.y, x_3732.z, x_3733.w);
  let x_3735 : vec3<f32> = u_xlat27;
  let x_3736 : vec3<f32> = u_xlat4;
  let x_3738 : vec4<f32> = u_xlat8;
  let x_3740 : vec3<f32> = ((x_3735 * x_3736) + vec3<f32>(x_3738.x, x_3738.y, x_3738.z));
  let x_3741 : vec4<f32> = u_xlat5;
  u_xlat5 = vec4<f32>(x_3740.x, x_3740.y, x_3740.z, x_3741.w);
  let x_3743 : f32 = u_xlat66;
  let x_3745 : f32 = x_145.unity_LightData.z;
  u_xlat66 = (x_3743 * x_3745);
  let x_3747 : vec4<f32> = u_xlat3;
  let x_3750 : vec4<f32> = x_90.x_MainLightPosition;
  u_xlat46 = dot(vec3<f32>(x_3747.x, x_3747.y, x_3747.z), vec3<f32>(x_3750.x, x_3750.y, x_3750.z));
  let x_3753 : f32 = u_xlat46;
  u_xlat46 = clamp(x_3753, 0.0f, 1.0f);
  let x_3755 : f32 = u_xlat66;
  let x_3756 : f32 = u_xlat46;
  u_xlat66 = (x_3755 * x_3756);
  let x_3758 : f32 = u_xlat66;
  let x_3760 : vec4<f32> = u_xlat6;
  let x_3762 : vec3<f32> = (vec3<f32>(x_3758, x_3758, x_3758) * vec3<f32>(x_3760.x, x_3760.y, x_3760.z));
  let x_3763 : vec4<f32> = u_xlat6;
  u_xlat6 = vec4<f32>(x_3762.x, x_3762.y, x_3762.z, x_3763.w);
  let x_3765 : vec3<f32> = u_xlat1;
  let x_3767 : vec4<f32> = x_90.x_MainLightPosition;
  let x_3769 : vec3<f32> = (x_3765 + vec3<f32>(x_3767.x, x_3767.y, x_3767.z));
  let x_3770 : vec4<f32> = u_xlat8;
  u_xlat8 = vec4<f32>(x_3769.x, x_3769.y, x_3769.z, x_3770.w);
  let x_3772 : vec4<f32> = u_xlat8;
  let x_3774 : vec4<f32> = u_xlat8;
  u_xlat66 = dot(vec3<f32>(x_3772.x, x_3772.y, x_3772.z), vec3<f32>(x_3774.x, x_3774.y, x_3774.z));
  let x_3777 : f32 = u_xlat66;
  u_xlat66 = max(x_3777, 1.17549435e-37f);
  let x_3780 : f32 = u_xlat66;
  u_xlat66 = inverseSqrt(x_3780);
  let x_3782 : f32 = u_xlat66;
  let x_3784 : vec4<f32> = u_xlat8;
  let x_3786 : vec3<f32> = (vec3<f32>(x_3782, x_3782, x_3782) * vec3<f32>(x_3784.x, x_3784.y, x_3784.z));
  let x_3787 : vec4<f32> = u_xlat8;
  u_xlat8 = vec4<f32>(x_3786.x, x_3786.y, x_3786.z, x_3787.w);
  let x_3789 : vec4<f32> = u_xlat3;
  let x_3791 : vec4<f32> = u_xlat8;
  u_xlat66 = dot(vec3<f32>(x_3789.x, x_3789.y, x_3789.z), vec3<f32>(x_3791.x, x_3791.y, x_3791.z));
  let x_3794 : f32 = u_xlat66;
  u_xlat66 = clamp(x_3794, 0.0f, 1.0f);
  let x_3797 : vec4<f32> = x_90.x_MainLightPosition;
  let x_3799 : vec4<f32> = u_xlat8;
  u_xlat46 = dot(vec3<f32>(x_3797.x, x_3797.y, x_3797.z), vec3<f32>(x_3799.x, x_3799.y, x_3799.z));
  let x_3802 : f32 = u_xlat46;
  u_xlat46 = clamp(x_3802, 0.0f, 1.0f);
  let x_3804 : f32 = u_xlat66;
  let x_3805 : f32 = u_xlat66;
  u_xlat66 = (x_3804 * x_3805);
  let x_3807 : f32 = u_xlat66;
  let x_3809 : f32 = u_xlat9.x;
  u_xlat66 = ((x_3807 * x_3809) + 1.000010014f);
  let x_3813 : f32 = u_xlat46;
  let x_3814 : f32 = u_xlat46;
  u_xlat46 = (x_3813 * x_3814);
  let x_3816 : f32 = u_xlat66;
  let x_3817 : f32 = u_xlat66;
  u_xlat66 = (x_3816 * x_3817);
  let x_3819 : f32 = u_xlat46;
  u_xlat46 = max(x_3819, 0.100000001f);
  let x_3822 : f32 = u_xlat66;
  let x_3823 : f32 = u_xlat46;
  u_xlat66 = (x_3822 * x_3823);
  let x_3825 : f32 = u_xlat29;
  let x_3826 : f32 = u_xlat66;
  u_xlat66 = (x_3825 * x_3826);
  let x_3828 : f32 = u_xlat72;
  let x_3829 : f32 = u_xlat66;
  u_xlat66 = (x_3828 / x_3829);
  let x_3831 : f32 = u_xlat66;
  let x_3835 : vec3<f32> = u_xlat4;
  let x_3836 : vec3<f32> = ((vec3<f32>(x_3831, x_3831, x_3831) * vec3<f32>(0.039999999f, 0.039999999f, 0.039999999f)) + x_3835);
  let x_3837 : vec4<f32> = u_xlat8;
  u_xlat8 = vec4<f32>(x_3836.x, x_3836.y, x_3836.z, x_3837.w);
  let x_3839 : vec4<f32> = u_xlat6;
  let x_3841 : vec4<f32> = u_xlat8;
  let x_3843 : vec3<f32> = (vec3<f32>(x_3839.x, x_3839.y, x_3839.z) * vec3<f32>(x_3841.x, x_3841.y, x_3841.z));
  let x_3844 : vec4<f32> = u_xlat6;
  u_xlat6 = vec4<f32>(x_3843.x, x_3843.y, x_3843.z, x_3844.w);
  let x_3847 : f32 = x_90.x_AdditionalLightsCount.x;
  let x_3849 : f32 = x_145.unity_LightData.y;
  u_xlat66 = min(x_3847, x_3849);
  let x_3851 : f32 = u_xlat66;
  u_xlatu66 = bitcast<u32>(i32(x_3851));
  let x_3856 : f32 = x_3494.x_AdditionalLightsCookieAtlasTextureFormat;
  let x_3858 : f32 = x_3494.x_AdditionalLightsCookieAtlasTextureFormat;
  let x_3860 : f32 = x_3494.x_AdditionalLightsCookieAtlasTextureFormat;
  let x_3862 : f32 = x_3494.x_AdditionalLightsCookieAtlasTextureFormat;
  let x_3863 : vec4<f32> = vec4<f32>(x_3856, x_3858, x_3860, x_3862);
  let x_3870 : vec4<bool> = (vec4<f32>(x_3863.x, x_3863.y, x_3863.z, x_3863.w) == vec4<f32>(0.0f, 1.0f, 0.0f, 1.0f));
  u_xlatb46 = vec2<bool>(x_3870.x, x_3870.y);
  u_xlat8.x = 0.0f;
  u_xlat8.y = 0.0f;
  u_xlat8.z = 0.0f;
  u_xlatu_loop_1 = 0u;
  loop {
    let x_3881 : u32 = u_xlatu_loop_1;
    let x_3882 : u32 = u_xlatu66;
    if ((x_3881 < x_3882)) {
    } else {
      break;
    }
    let x_3885 : u32 = u_xlatu_loop_1;
    u_xlatu70 = (x_3885 >> 2u);
    let x_3888 : u32 = u_xlatu_loop_1;
    u_xlati71 = bitcast<i32>((x_3888 & 3u));
    let x_3891 : u32 = u_xlatu70;
    let x_3894 : vec4<f32> = x_145.unity_LightIndices[bitcast<i32>(x_3891)];
    let x_3904 : i32 = u_xlati71;
    indexable = array<vec4<u32>, 4u>(vec4<u32>(1065353216u, 0u, 0u, 0u), vec4<u32>(0u, 1065353216u, 0u, 0u), vec4<u32>(0u, 0u, 1065353216u, 0u), vec4<u32>(0u, 0u, 0u, 1065353216u));
    let x_3909 : vec4<u32> = indexable[x_3904];
    u_xlat70 = dot(x_3894, bitcast<vec4<f32>>(x_3909));
    let x_3912 : f32 = u_xlat70;
    u_xlatu70 = bitcast<u32>(i32(x_3912));
    let x_3915 : vec3<f32> = vs_INTERP0;
    let x_3927 : u32 = u_xlatu70;
    let x_3930 : vec4<f32> = x_3926.x_AdditionalLightsPosition[bitcast<i32>(x_3927)];
    let x_3933 : u32 = u_xlatu70;
    let x_3936 : vec4<f32> = x_3926.x_AdditionalLightsPosition[bitcast<i32>(x_3933)];
    u_xlat31 = ((-(x_3915) * vec3<f32>(x_3930.w, x_3930.w, x_3930.w)) + vec3<f32>(x_3936.x, x_3936.y, x_3936.z));
    let x_3940 : vec3<f32> = u_xlat31;
    let x_3941 : vec3<f32> = u_xlat31;
    u_xlat71 = dot(x_3940, x_3941);
    let x_3943 : f32 = u_xlat71;
    u_xlat71 = max(x_3943, 6.10351562e-05f);
    let x_3946 : f32 = u_xlat71;
    u_xlat73 = inverseSqrt(x_3946);
    let x_3948 : f32 = u_xlat73;
    let x_3950 : vec3<f32> = u_xlat31;
    let x_3951 : vec3<f32> = (vec3<f32>(x_3948, x_3948, x_3948) * x_3950);
    let x_3952 : vec4<f32> = u_xlat10;
    u_xlat10 = vec4<f32>(x_3951.x, x_3951.y, x_3951.z, x_3952.w);
    let x_3955 : f32 = u_xlat71;
    u_xlat74 = (1.0f / x_3955);
    let x_3957 : f32 = u_xlat71;
    let x_3958 : u32 = u_xlatu70;
    let x_3961 : f32 = x_3926.x_AdditionalLightsAttenuation[bitcast<i32>(x_3958)].x;
    u_xlat71 = (x_3957 * x_3961);
    let x_3963 : f32 = u_xlat71;
    let x_3965 : f32 = u_xlat71;
    u_xlat71 = ((-(x_3963) * x_3965) + 1.0f);
    let x_3968 : f32 = u_xlat71;
    u_xlat71 = max(x_3968, 0.0f);
    let x_3970 : f32 = u_xlat71;
    let x_3971 : f32 = u_xlat71;
    u_xlat71 = (x_3970 * x_3971);
    let x_3973 : f32 = u_xlat71;
    let x_3974 : f32 = u_xlat74;
    u_xlat71 = (x_3973 * x_3974);
    let x_3976 : u32 = u_xlatu70;
    let x_3979 : vec4<f32> = x_3926.x_AdditionalLightsSpotDir[bitcast<i32>(x_3976)];
    let x_3981 : vec4<f32> = u_xlat10;
    u_xlat74 = dot(vec3<f32>(x_3979.x, x_3979.y, x_3979.z), vec3<f32>(x_3981.x, x_3981.y, x_3981.z));
    let x_3984 : f32 = u_xlat74;
    let x_3985 : u32 = u_xlatu70;
    let x_3988 : f32 = x_3926.x_AdditionalLightsAttenuation[bitcast<i32>(x_3985)].z;
    let x_3990 : u32 = u_xlatu70;
    let x_3993 : f32 = x_3926.x_AdditionalLightsAttenuation[bitcast<i32>(x_3990)].w;
    u_xlat74 = ((x_3984 * x_3988) + x_3993);
    let x_3995 : f32 = u_xlat74;
    u_xlat74 = clamp(x_3995, 0.0f, 1.0f);
    let x_3997 : f32 = u_xlat74;
    let x_3998 : f32 = u_xlat74;
    u_xlat74 = (x_3997 * x_3998);
    let x_4000 : f32 = u_xlat71;
    let x_4001 : f32 = u_xlat74;
    u_xlat71 = (x_4000 * x_4001);
    let x_4004 : u32 = u_xlatu70;
    u_xlatu74 = (x_4004 >> 5u);
    let x_4007 : u32 = u_xlatu70;
    u_xlati76 = (1i << bitcast<u32>((bitcast<i32>(x_4007) & 31i)));
    let x_4013 : i32 = u_xlati76;
    let x_4015 : u32 = u_xlatu74;
    let x_4018 : f32 = x_3494.x_AdditionalLightsCookieEnableBits[bitcast<i32>(x_4015)].el;
    u_xlati74 = bitcast<i32>((bitcast<u32>(x_4013) & bitcast<u32>(x_4018)));
    let x_4022 : i32 = u_xlati74;
    if ((x_4022 != 0i)) {
      let x_4032 : u32 = u_xlatu70;
      let x_4035 : f32 = x_4031.x_AdditionalLightsLightTypes[bitcast<i32>(x_4032)].el;
      u_xlati74 = i32(x_4035);
      let x_4037 : i32 = u_xlati74;
      u_xlati76 = select(1i, 0i, (x_4037 != 0i));
      let x_4041 : u32 = u_xlatu70;
      u_xlati11 = (bitcast<i32>(x_4041) << bitcast<u32>(2i));
      let x_4044 : i32 = u_xlati76;
      if ((x_4044 != 0i)) {
        let x_4049 : vec3<f32> = vs_INTERP0;
        let x_4051 : i32 = u_xlati11;
        let x_4054 : i32 = u_xlati11;
        let x_4058 : vec4<f32> = x_4031.x_AdditionalLightsWorldToLights[((x_4051 + 1i) / 4i)][((x_4054 + 1i) % 4i)];
        u_xlat33 = (vec3<f32>(x_4049.y, x_4049.y, x_4049.y) * vec3<f32>(x_4058.x, x_4058.y, x_4058.w));
        let x_4061 : i32 = u_xlati11;
        let x_4063 : i32 = u_xlati11;
        let x_4066 : vec4<f32> = x_4031.x_AdditionalLightsWorldToLights[(x_4061 / 4i)][(x_4063 % 4i)];
        let x_4068 : vec3<f32> = vs_INTERP0;
        let x_4071 : vec3<f32> = u_xlat33;
        u_xlat33 = ((vec3<f32>(x_4066.x, x_4066.y, x_4066.w) * vec3<f32>(x_4068.x, x_4068.x, x_4068.x)) + x_4071);
        let x_4073 : i32 = u_xlati11;
        let x_4076 : i32 = u_xlati11;
        let x_4080 : vec4<f32> = x_4031.x_AdditionalLightsWorldToLights[((x_4073 + 2i) / 4i)][((x_4076 + 2i) % 4i)];
        let x_4082 : vec3<f32> = vs_INTERP0;
        let x_4085 : vec3<f32> = u_xlat33;
        u_xlat33 = ((vec3<f32>(x_4080.x, x_4080.y, x_4080.w) * vec3<f32>(x_4082.z, x_4082.z, x_4082.z)) + x_4085);
        let x_4087 : vec3<f32> = u_xlat33;
        let x_4088 : i32 = u_xlati11;
        let x_4091 : i32 = u_xlati11;
        let x_4095 : vec4<f32> = x_4031.x_AdditionalLightsWorldToLights[((x_4088 + 3i) / 4i)][((x_4091 + 3i) % 4i)];
        u_xlat33 = (x_4087 + vec3<f32>(x_4095.x, x_4095.y, x_4095.w));
        let x_4098 : vec3<f32> = u_xlat33;
        let x_4100 : vec3<f32> = u_xlat33;
        let x_4102 : vec2<f32> = (vec2<f32>(x_4098.x, x_4098.y) / vec2<f32>(x_4100.z, x_4100.z));
        let x_4103 : vec3<f32> = u_xlat33;
        u_xlat33 = vec3<f32>(x_4102.x, x_4102.y, x_4103.z);
        let x_4105 : vec3<f32> = u_xlat33;
        let x_4108 : vec2<f32> = ((vec2<f32>(x_4105.x, x_4105.y) * vec2<f32>(0.5f, 0.5f)) + vec2<f32>(0.5f, 0.5f));
        let x_4109 : vec3<f32> = u_xlat33;
        u_xlat33 = vec3<f32>(x_4108.x, x_4108.y, x_4109.z);
        let x_4111 : vec3<f32> = u_xlat33;
        let x_4115 : vec2<f32> = clamp(vec2<f32>(x_4111.x, x_4111.y), vec2<f32>(0.0f, 0.0f), vec2<f32>(1.0f, 1.0f));
        let x_4116 : vec3<f32> = u_xlat33;
        u_xlat33 = vec3<f32>(x_4115.x, x_4115.y, x_4116.z);
        let x_4118 : u32 = u_xlatu70;
        let x_4121 : vec4<f32> = x_4031.x_AdditionalLightsCookieAtlasUVRects[bitcast<i32>(x_4118)];
        let x_4123 : vec3<f32> = u_xlat33;
        let x_4126 : u32 = u_xlatu70;
        let x_4129 : vec4<f32> = x_4031.x_AdditionalLightsCookieAtlasUVRects[bitcast<i32>(x_4126)];
        let x_4131 : vec2<f32> = ((vec2<f32>(x_4121.x, x_4121.y) * vec2<f32>(x_4123.x, x_4123.y)) + vec2<f32>(x_4129.z, x_4129.w));
        let x_4132 : vec3<f32> = u_xlat33;
        u_xlat33 = vec3<f32>(x_4131.x, x_4131.y, x_4132.z);
      } else {
        let x_4136 : i32 = u_xlati74;
        u_xlatb74 = (x_4136 == 1i);
        let x_4138 : bool = u_xlatb74;
        u_xlati74 = select(0i, 1i, x_4138);
        let x_4140 : i32 = u_xlati74;
        if ((x_4140 != 0i)) {
          let x_4144 : vec3<f32> = vs_INTERP0;
          let x_4146 : i32 = u_xlati11;
          let x_4149 : i32 = u_xlati11;
          let x_4153 : vec4<f32> = x_4031.x_AdditionalLightsWorldToLights[((x_4146 + 1i) / 4i)][((x_4149 + 1i) % 4i)];
          let x_4155 : vec2<f32> = (vec2<f32>(x_4144.y, x_4144.y) * vec2<f32>(x_4153.x, x_4153.y));
          let x_4156 : vec4<f32> = u_xlat12;
          u_xlat12 = vec4<f32>(x_4155.x, x_4155.y, x_4156.z, x_4156.w);
          let x_4158 : i32 = u_xlati11;
          let x_4160 : i32 = u_xlati11;
          let x_4163 : vec4<f32> = x_4031.x_AdditionalLightsWorldToLights[(x_4158 / 4i)][(x_4160 % 4i)];
          let x_4165 : vec3<f32> = vs_INTERP0;
          let x_4168 : vec4<f32> = u_xlat12;
          let x_4170 : vec2<f32> = ((vec2<f32>(x_4163.x, x_4163.y) * vec2<f32>(x_4165.x, x_4165.x)) + vec2<f32>(x_4168.x, x_4168.y));
          let x_4171 : vec4<f32> = u_xlat12;
          u_xlat12 = vec4<f32>(x_4170.x, x_4170.y, x_4171.z, x_4171.w);
          let x_4173 : i32 = u_xlati11;
          let x_4176 : i32 = u_xlati11;
          let x_4180 : vec4<f32> = x_4031.x_AdditionalLightsWorldToLights[((x_4173 + 2i) / 4i)][((x_4176 + 2i) % 4i)];
          let x_4182 : vec3<f32> = vs_INTERP0;
          let x_4185 : vec4<f32> = u_xlat12;
          let x_4187 : vec2<f32> = ((vec2<f32>(x_4180.x, x_4180.y) * vec2<f32>(x_4182.z, x_4182.z)) + vec2<f32>(x_4185.x, x_4185.y));
          let x_4188 : vec4<f32> = u_xlat12;
          u_xlat12 = vec4<f32>(x_4187.x, x_4187.y, x_4188.z, x_4188.w);
          let x_4190 : vec4<f32> = u_xlat12;
          let x_4192 : i32 = u_xlati11;
          let x_4195 : i32 = u_xlati11;
          let x_4199 : vec4<f32> = x_4031.x_AdditionalLightsWorldToLights[((x_4192 + 3i) / 4i)][((x_4195 + 3i) % 4i)];
          let x_4201 : vec2<f32> = (vec2<f32>(x_4190.x, x_4190.y) + vec2<f32>(x_4199.x, x_4199.y));
          let x_4202 : vec4<f32> = u_xlat12;
          u_xlat12 = vec4<f32>(x_4201.x, x_4201.y, x_4202.z, x_4202.w);
          let x_4204 : vec4<f32> = u_xlat12;
          let x_4207 : vec2<f32> = ((vec2<f32>(x_4204.x, x_4204.y) * vec2<f32>(0.5f, 0.5f)) + vec2<f32>(0.5f, 0.5f));
          let x_4208 : vec4<f32> = u_xlat12;
          u_xlat12 = vec4<f32>(x_4207.x, x_4207.y, x_4208.z, x_4208.w);
          let x_4210 : vec4<f32> = u_xlat12;
          let x_4212 : vec2<f32> = fract(vec2<f32>(x_4210.x, x_4210.y));
          let x_4213 : vec4<f32> = u_xlat12;
          u_xlat12 = vec4<f32>(x_4212.x, x_4212.y, x_4213.z, x_4213.w);
          let x_4215 : u32 = u_xlatu70;
          let x_4218 : vec4<f32> = x_4031.x_AdditionalLightsCookieAtlasUVRects[bitcast<i32>(x_4215)];
          let x_4220 : vec4<f32> = u_xlat12;
          let x_4223 : u32 = u_xlatu70;
          let x_4226 : vec4<f32> = x_4031.x_AdditionalLightsCookieAtlasUVRects[bitcast<i32>(x_4223)];
          let x_4228 : vec2<f32> = ((vec2<f32>(x_4218.x, x_4218.y) * vec2<f32>(x_4220.x, x_4220.y)) + vec2<f32>(x_4226.z, x_4226.w));
          let x_4229 : vec3<f32> = u_xlat33;
          u_xlat33 = vec3<f32>(x_4228.x, x_4228.y, x_4229.z);
        } else {
          let x_4232 : vec3<f32> = vs_INTERP0;
          let x_4234 : i32 = u_xlati11;
          let x_4237 : i32 = u_xlati11;
          let x_4241 : vec4<f32> = x_4031.x_AdditionalLightsWorldToLights[((x_4234 + 1i) / 4i)][((x_4237 + 1i) % 4i)];
          u_xlat12 = (vec4<f32>(x_4232.y, x_4232.y, x_4232.y, x_4232.y) * x_4241);
          let x_4243 : i32 = u_xlati11;
          let x_4245 : i32 = u_xlati11;
          let x_4248 : vec4<f32> = x_4031.x_AdditionalLightsWorldToLights[(x_4243 / 4i)][(x_4245 % 4i)];
          let x_4249 : vec3<f32> = vs_INTERP0;
          let x_4252 : vec4<f32> = u_xlat12;
          u_xlat12 = ((x_4248 * vec4<f32>(x_4249.x, x_4249.x, x_4249.x, x_4249.x)) + x_4252);
          let x_4254 : i32 = u_xlati11;
          let x_4257 : i32 = u_xlati11;
          let x_4261 : vec4<f32> = x_4031.x_AdditionalLightsWorldToLights[((x_4254 + 2i) / 4i)][((x_4257 + 2i) % 4i)];
          let x_4262 : vec3<f32> = vs_INTERP0;
          let x_4265 : vec4<f32> = u_xlat12;
          u_xlat12 = ((x_4261 * vec4<f32>(x_4262.z, x_4262.z, x_4262.z, x_4262.z)) + x_4265);
          let x_4267 : vec4<f32> = u_xlat12;
          let x_4268 : i32 = u_xlati11;
          let x_4271 : i32 = u_xlati11;
          let x_4275 : vec4<f32> = x_4031.x_AdditionalLightsWorldToLights[((x_4268 + 3i) / 4i)][((x_4271 + 3i) % 4i)];
          u_xlat12 = (x_4267 + x_4275);
          let x_4277 : vec4<f32> = u_xlat12;
          let x_4279 : vec4<f32> = u_xlat12;
          let x_4281 : vec3<f32> = (vec3<f32>(x_4277.x, x_4277.y, x_4277.z) / vec3<f32>(x_4279.w, x_4279.w, x_4279.w));
          let x_4282 : vec4<f32> = u_xlat12;
          u_xlat12 = vec4<f32>(x_4281.x, x_4281.y, x_4281.z, x_4282.w);
          let x_4284 : vec4<f32> = u_xlat12;
          let x_4286 : vec4<f32> = u_xlat12;
          u_xlat74 = dot(vec3<f32>(x_4284.x, x_4284.y, x_4284.z), vec3<f32>(x_4286.x, x_4286.y, x_4286.z));
          let x_4289 : f32 = u_xlat74;
          u_xlat74 = inverseSqrt(x_4289);
          let x_4291 : f32 = u_xlat74;
          let x_4293 : vec4<f32> = u_xlat12;
          let x_4295 : vec3<f32> = (vec3<f32>(x_4291, x_4291, x_4291) * vec3<f32>(x_4293.x, x_4293.y, x_4293.z));
          let x_4296 : vec4<f32> = u_xlat12;
          u_xlat12 = vec4<f32>(x_4295.x, x_4295.y, x_4295.z, x_4296.w);
          let x_4298 : vec4<f32> = u_xlat12;
          u_xlat74 = dot(abs(vec3<f32>(x_4298.x, x_4298.y, x_4298.z)), vec3<f32>(1.0f, 1.0f, 1.0f));
          let x_4303 : f32 = u_xlat74;
          u_xlat74 = max(x_4303, 0.000001f);
          let x_4306 : f32 = u_xlat74;
          u_xlat74 = (1.0f / x_4306);
          let x_4308 : f32 = u_xlat74;
          let x_4310 : vec4<f32> = u_xlat12;
          let x_4312 : vec3<f32> = (vec3<f32>(x_4308, x_4308, x_4308) * vec3<f32>(x_4310.z, x_4310.x, x_4310.y));
          let x_4313 : vec4<f32> = u_xlat13;
          u_xlat13 = vec4<f32>(x_4312.x, x_4312.y, x_4312.z, x_4313.w);
          let x_4316 : f32 = u_xlat13.x;
          u_xlat13.x = -(x_4316);
          let x_4320 : f32 = u_xlat13.x;
          u_xlat13.x = clamp(x_4320, 0.0f, 1.0f);
          let x_4324 : vec4<f32> = u_xlat13;
          let x_4327 : vec4<bool> = (vec4<f32>(x_4324.y, x_4324.y, x_4324.y, x_4324.z) >= vec4<f32>(0.0f, 0.0f, 0.0f, 0.0f));
          let x_4328 : vec2<bool> = vec2<bool>(x_4327.x, x_4327.w);
          let x_4329 : vec4<bool> = u_xlatb11;
          u_xlatb11 = vec4<bool>(x_4328.x, x_4329.y, x_4329.z, x_4328.y);
          let x_4332 : bool = u_xlatb11.x;
          if (x_4332) {
            let x_4337 : f32 = u_xlat13.x;
            x_4333 = x_4337;
          } else {
            let x_4340 : f32 = u_xlat13.x;
            x_4333 = -(x_4340);
          }
          let x_4342 : f32 = x_4333;
          u_xlat11.x = x_4342;
          let x_4345 : bool = u_xlatb11.w;
          if (x_4345) {
            let x_4350 : f32 = u_xlat13.x;
            x_4346 = x_4350;
          } else {
            let x_4353 : f32 = u_xlat13.x;
            x_4346 = -(x_4353);
          }
          let x_4355 : f32 = x_4346;
          u_xlat11.w = x_4355;
          let x_4357 : vec4<f32> = u_xlat12;
          let x_4359 : f32 = u_xlat74;
          let x_4362 : vec4<f32> = u_xlat11;
          let x_4364 : vec2<f32> = ((vec2<f32>(x_4357.x, x_4357.y) * vec2<f32>(x_4359, x_4359)) + vec2<f32>(x_4362.x, x_4362.w));
          let x_4365 : vec4<f32> = u_xlat11;
          u_xlat11 = vec4<f32>(x_4364.x, x_4365.y, x_4365.z, x_4364.y);
          let x_4367 : vec4<f32> = u_xlat11;
          let x_4370 : vec2<f32> = ((vec2<f32>(x_4367.x, x_4367.w) * vec2<f32>(0.5f, 0.5f)) + vec2<f32>(0.5f, 0.5f));
          let x_4371 : vec4<f32> = u_xlat11;
          u_xlat11 = vec4<f32>(x_4370.x, x_4371.y, x_4371.z, x_4370.y);
          let x_4373 : vec4<f32> = u_xlat11;
          let x_4377 : vec2<f32> = clamp(vec2<f32>(x_4373.x, x_4373.w), vec2<f32>(0.0f, 0.0f), vec2<f32>(1.0f, 1.0f));
          let x_4378 : vec4<f32> = u_xlat11;
          u_xlat11 = vec4<f32>(x_4377.x, x_4378.y, x_4378.z, x_4377.y);
          let x_4380 : u32 = u_xlatu70;
          let x_4383 : vec4<f32> = x_4031.x_AdditionalLightsCookieAtlasUVRects[bitcast<i32>(x_4380)];
          let x_4385 : vec4<f32> = u_xlat11;
          let x_4388 : u32 = u_xlatu70;
          let x_4391 : vec4<f32> = x_4031.x_AdditionalLightsCookieAtlasUVRects[bitcast<i32>(x_4388)];
          let x_4393 : vec2<f32> = ((vec2<f32>(x_4383.x, x_4383.y) * vec2<f32>(x_4385.x, x_4385.w)) + vec2<f32>(x_4391.z, x_4391.w));
          let x_4394 : vec3<f32> = u_xlat33;
          u_xlat33 = vec3<f32>(x_4393.x, x_4393.y, x_4394.z);
        }
      }
      let x_4401 : vec3<f32> = u_xlat33;
      let x_4404 : f32 = x_90.x_GlobalMipBias.x;
      let x_4405 : vec4<f32> = textureSampleBias(x_AdditionalLightsCookieAtlasTexture, sampler_AdditionalLightsCookieAtlasTexture, vec2<f32>(x_4401.x, x_4401.y), x_4404);
      u_xlat11 = x_4405;
      let x_4407 : bool = u_xlatb46.y;
      if (x_4407) {
        let x_4412 : f32 = u_xlat11.w;
        x_4408 = x_4412;
      } else {
        let x_4415 : f32 = u_xlat11.x;
        x_4408 = x_4415;
      }
      let x_4416 : f32 = x_4408;
      u_xlat74 = x_4416;
      let x_4418 : bool = u_xlatb46.x;
      if (x_4418) {
        let x_4422 : vec4<f32> = u_xlat11;
        x_4419 = vec3<f32>(x_4422.x, x_4422.y, x_4422.z);
      } else {
        let x_4425 : f32 = u_xlat74;
        x_4419 = vec3<f32>(x_4425, x_4425, x_4425);
      }
      let x_4427 : vec3<f32> = x_4419;
      let x_4428 : vec4<f32> = u_xlat11;
      u_xlat11 = vec4<f32>(x_4427.x, x_4427.y, x_4427.z, x_4428.w);
    } else {
      u_xlat11.x = 1.0f;
      u_xlat11.y = 1.0f;
      u_xlat11.z = 1.0f;
    }
    let x_4434 : vec4<f32> = u_xlat11;
    let x_4436 : u32 = u_xlatu70;
    let x_4439 : vec4<f32> = x_3926.x_AdditionalLightsColor[bitcast<i32>(x_4436)];
    let x_4441 : vec3<f32> = (vec3<f32>(x_4434.x, x_4434.y, x_4434.z) * vec3<f32>(x_4439.x, x_4439.y, x_4439.z));
    let x_4442 : vec4<f32> = u_xlat11;
    u_xlat11 = vec4<f32>(x_4441.x, x_4441.y, x_4441.z, x_4442.w);
    let x_4444 : vec2<f32> = u_xlat51;
    let x_4446 : vec4<f32> = u_xlat11;
    let x_4448 : vec3<f32> = (vec3<f32>(x_4444.x, x_4444.x, x_4444.x) * vec3<f32>(x_4446.x, x_4446.y, x_4446.z));
    let x_4449 : vec4<f32> = u_xlat11;
    u_xlat11 = vec4<f32>(x_4448.x, x_4448.y, x_4448.z, x_4449.w);
    let x_4451 : vec4<f32> = u_xlat3;
    let x_4453 : vec4<f32> = u_xlat10;
    u_xlat70 = dot(vec3<f32>(x_4451.x, x_4451.y, x_4451.z), vec3<f32>(x_4453.x, x_4453.y, x_4453.z));
    let x_4456 : f32 = u_xlat70;
    u_xlat70 = clamp(x_4456, 0.0f, 1.0f);
    let x_4458 : f32 = u_xlat70;
    let x_4459 : f32 = u_xlat71;
    u_xlat70 = (x_4458 * x_4459);
    let x_4461 : f32 = u_xlat70;
    let x_4463 : vec4<f32> = u_xlat11;
    let x_4465 : vec3<f32> = (vec3<f32>(x_4461, x_4461, x_4461) * vec3<f32>(x_4463.x, x_4463.y, x_4463.z));
    let x_4466 : vec4<f32> = u_xlat11;
    u_xlat11 = vec4<f32>(x_4465.x, x_4465.y, x_4465.z, x_4466.w);
    let x_4468 : vec3<f32> = u_xlat31;
    let x_4469 : f32 = u_xlat73;
    let x_4472 : vec3<f32> = u_xlat1;
    u_xlat31 = ((x_4468 * vec3<f32>(x_4469, x_4469, x_4469)) + x_4472);
    let x_4474 : vec3<f32> = u_xlat31;
    let x_4475 : vec3<f32> = u_xlat31;
    u_xlat70 = dot(x_4474, x_4475);
    let x_4477 : f32 = u_xlat70;
    u_xlat70 = max(x_4477, 1.17549435e-37f);
    let x_4479 : f32 = u_xlat70;
    u_xlat70 = inverseSqrt(x_4479);
    let x_4481 : f32 = u_xlat70;
    let x_4483 : vec3<f32> = u_xlat31;
    u_xlat31 = (vec3<f32>(x_4481, x_4481, x_4481) * x_4483);
    let x_4485 : vec4<f32> = u_xlat3;
    let x_4487 : vec3<f32> = u_xlat31;
    u_xlat70 = dot(vec3<f32>(x_4485.x, x_4485.y, x_4485.z), x_4487);
    let x_4489 : f32 = u_xlat70;
    u_xlat70 = clamp(x_4489, 0.0f, 1.0f);
    let x_4491 : vec4<f32> = u_xlat10;
    let x_4493 : vec3<f32> = u_xlat31;
    u_xlat71 = dot(vec3<f32>(x_4491.x, x_4491.y, x_4491.z), x_4493);
    let x_4495 : f32 = u_xlat71;
    u_xlat71 = clamp(x_4495, 0.0f, 1.0f);
    let x_4497 : f32 = u_xlat70;
    let x_4498 : f32 = u_xlat70;
    u_xlat70 = (x_4497 * x_4498);
    let x_4500 : f32 = u_xlat70;
    let x_4502 : f32 = u_xlat9.x;
    u_xlat70 = ((x_4500 * x_4502) + 1.000010014f);
    let x_4505 : f32 = u_xlat71;
    let x_4506 : f32 = u_xlat71;
    u_xlat71 = (x_4505 * x_4506);
    let x_4508 : f32 = u_xlat70;
    let x_4509 : f32 = u_xlat70;
    u_xlat70 = (x_4508 * x_4509);
    let x_4511 : f32 = u_xlat71;
    u_xlat71 = max(x_4511, 0.100000001f);
    let x_4513 : f32 = u_xlat70;
    let x_4514 : f32 = u_xlat71;
    u_xlat70 = (x_4513 * x_4514);
    let x_4516 : f32 = u_xlat29;
    let x_4517 : f32 = u_xlat70;
    u_xlat70 = (x_4516 * x_4517);
    let x_4519 : f32 = u_xlat72;
    let x_4520 : f32 = u_xlat70;
    u_xlat70 = (x_4519 / x_4520);
    let x_4522 : f32 = u_xlat70;
    let x_4525 : vec3<f32> = u_xlat4;
    u_xlat31 = ((vec3<f32>(x_4522, x_4522, x_4522) * vec3<f32>(0.039999999f, 0.039999999f, 0.039999999f)) + x_4525);
    let x_4527 : vec3<f32> = u_xlat31;
    let x_4528 : vec4<f32> = u_xlat11;
    let x_4531 : vec4<f32> = u_xlat8;
    let x_4533 : vec3<f32> = ((x_4527 * vec3<f32>(x_4528.x, x_4528.y, x_4528.z)) + vec3<f32>(x_4531.x, x_4531.y, x_4531.z));
    let x_4534 : vec4<f32> = u_xlat8;
    u_xlat8 = vec4<f32>(x_4533.x, x_4533.y, x_4533.z, x_4534.w);

    continuing {
      let x_4536 : u32 = u_xlatu_loop_1;
      u_xlatu_loop_1 = (x_4536 + bitcast<u32>(1i));
    }
  }
  let x_4538 : vec4<f32> = u_xlat5;
  let x_4540 : vec4<f32> = u_xlat7;
  let x_4543 : vec4<f32> = u_xlat6;
  u_xlat1 = ((vec3<f32>(x_4538.x, x_4538.y, x_4538.z) * vec3<f32>(x_4540.x, x_4540.x, x_4540.x)) + vec3<f32>(x_4543.x, x_4543.y, x_4543.z));
  let x_4546 : vec4<f32> = u_xlat8;
  let x_4548 : vec3<f32> = u_xlat1;
  u_xlat1 = (vec3<f32>(x_4546.x, x_4546.y, x_4546.z) + x_4548);
  let x_4550 : vec4<f32> = vs_INTERP4;
  let x_4552 : vec3<f32> = u_xlat0;
  let x_4554 : vec3<f32> = u_xlat1;
  u_xlat0 = ((vec3<f32>(x_4550.w, x_4550.w, x_4550.w) * x_4552) + x_4554);
  let x_4557 : f32 = u_xlat24.x;
  let x_4559 : f32 = u_xlat24.x;
  u_xlat66 = (x_4557 * -(x_4559));
  let x_4562 : f32 = u_xlat66;
  u_xlat66 = exp2(x_4562);
  let x_4564 : vec3<f32> = u_xlat0;
  let x_4567 : vec4<f32> = x_90.unity_FogColor;
  u_xlat0 = (x_4564 + -(vec3<f32>(x_4567.x, x_4567.y, x_4567.z)));
  let x_4573 : f32 = u_xlat66;
  let x_4575 : vec3<f32> = u_xlat0;
  let x_4578 : vec4<f32> = x_90.unity_FogColor;
  let x_4580 : vec3<f32> = ((vec3<f32>(x_4573, x_4573, x_4573) * x_4575) + vec3<f32>(x_4578.x, x_4578.y, x_4578.z));
  let x_4581 : vec4<f32> = SV_Target0;
  SV_Target0 = vec4<f32>(x_4580.x, x_4580.y, x_4580.z, x_4581.w);
  let x_4583 : bool = u_xlatb2;
  let x_4584 : f32 = u_xlat67;
  SV_Target0.w = select(1.0f, x_4584, x_4583);
  return;
}

struct main_out {
  @location(0)
  SV_Target0_1 : vec4<f32>,
}

@fragment
fn main(@builtin(position) gl_FragCoord_param : vec4<f32>, @location(1) vs_INTERP1_param : vec3<f32>, @location(0) vs_INTERP0_param : vec3<f32>, @location(3) vs_INTERP3_param : vec4<f32>, @location(4) vs_INTERP4_param : vec4<f32>, @location(2) vs_INTERP2_param : vec4<f32>, @location(5) vs_INTERP5_param : vec2<f32>) -> main_out {
  gl_FragCoord = gl_FragCoord_param;
  vs_INTERP1 = vs_INTERP1_param;
  vs_INTERP0 = vs_INTERP0_param;
  vs_INTERP3 = vs_INTERP3_param;
  vs_INTERP4 = vs_INTERP4_param;
  vs_INTERP2 = vs_INTERP2_param;
  vs_INTERP5 = vs_INTERP5_param;
  main_1();
  return main_out(SV_Target0);
}

