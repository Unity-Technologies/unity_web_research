struct PGlobals {
  x_ScaledScreenParams : vec4<f32>,
  x_GlobalMipBias : vec2<f32>,
  x_AlphaToMaskAvailable : f32,
  @size(4)
  padding : u32,
  x_MainLightPosition : vec4<f32>,
  x_MainLightColor : vec4<f32>,
  x_AmbientOcclusionParam : vec4<f32>,
  x_AdditionalLightsCount : vec4<f32>,
  x_RenderingLayerMaxInt : u32,
  x_RenderingLayerRcpMaxInt : f32,
  @size(8)
  padding_1 : u32,
  x_WorldSpaceCameraPos : vec3<f32>,
  @size(4)
  padding_2 : u32,
  unity_OrthoParams : vec4<f32>,
  x_ScaleBiasRt : vec4<f32>,
  unity_MatrixV : mat4x4<f32>,
}

struct UnityPerMaterial {
  Texture2D_B222E8F_TexelSize : vec4<f32>,
  Color_C30C7CA3 : vec4<f32>,
  Texture2D_D9BFD5F1_TexelSize : vec4<f32>,
}

type Arr = array<mat4x4<f32>, 5u>;

struct MainLightShadows {
  x_MainLightWorldToShadow : Arr,
  x_CascadeShadowSplitSpheres0 : vec4<f32>,
  x_CascadeShadowSplitSpheres1 : vec4<f32>,
  x_CascadeShadowSplitSpheres2 : vec4<f32>,
  x_CascadeShadowSplitSpheres3 : vec4<f32>,
  x_CascadeShadowSplitSphereRadii : vec4<f32>,
  x_MainLightShadowOffset0 : vec4<f32>,
  x_MainLightShadowOffset1 : vec4<f32>,
  x_MainLightShadowParams : vec4<f32>,
  x_MainLightShadowmapSize : vec4<f32>,
}

type Arr_1 = array<vec4<f32>, 2u>;

struct UnityPerDraw {
  unity_ObjectToWorld : mat4x4<f32>,
  unity_WorldToObject : mat4x4<f32>,
  unity_LODFade : vec4<f32>,
  unity_WorldTransformParams : vec4<f32>,
  unity_RenderingLayer : vec4<f32>,
  unity_LightData : vec4<f32>,
  unity_LightIndices : Arr_1,
  unity_ProbesOcclusion : vec4<f32>,
  unity_SpecCube0_HDR : vec4<f32>,
  unity_SpecCube1_HDR : vec4<f32>,
  unity_SpecCube0_BoxMax : vec4<f32>,
  unity_SpecCube0_BoxMin : vec4<f32>,
  unity_SpecCube0_ProbePosition : vec4<f32>,
  unity_SpecCube1_BoxMax : vec4<f32>,
  unity_SpecCube1_BoxMin : vec4<f32>,
  unity_SpecCube1_ProbePosition : vec4<f32>,
  unity_LightmapST : vec4<f32>,
  unity_DynamicLightmapST : vec4<f32>,
  unity_SHAr : vec4<f32>,
  unity_SHAg : vec4<f32>,
  unity_SHAb : vec4<f32>,
  unity_SHBr : vec4<f32>,
  unity_SHBg : vec4<f32>,
  unity_SHBb : vec4<f32>,
  unity_SHC : vec4<f32>,
  unity_RendererBounds_Min : vec4<f32>,
  unity_RendererBounds_Max : vec4<f32>,
  unity_MatrixPreviousM : mat4x4<f32>,
  unity_MatrixPreviousMI : mat4x4<f32>,
  unity_MotionVectorsParams : vec4<f32>,
  unity_SpriteColor : vec4<f32>,
  unity_SpriteProps : vec4<f32>,
}

struct strided_arr {
  @size(16)
  el : f32,
}

type Arr_2 = array<strided_arr, 8u>;

struct LightCookies {
  x_MainLightWorldToLight : mat4x4<f32>,
  x_AdditionalLightsCookieEnableBits : Arr_2,
  x_MainLightCookieTextureFormat : f32,
  x_AdditionalLightsCookieAtlasTextureFormat : f32,
}

type Arr_3 = array<vec4<f32>, 256u>;

type Arr_4 = array<vec4<f32>, 256u>;

type Arr_5 = array<vec4<f32>, 256u>;

type Arr_6 = array<vec4<f32>, 256u>;

type Arr_7 = array<vec4<f32>, 256u>;

struct strided_arr_1 {
  @size(16)
  el : f32,
}

type Arr_8 = array<strided_arr_1, 256u>;

type Arr_9 = array<vec4<f32>, 256u>;

type Arr_10 = array<strided_arr_1, 256u>;

struct AdditionalLights {
  x_AdditionalLightsPosition : Arr_9,
  x_AdditionalLightsColor : Arr_9,
  x_AdditionalLightsAttenuation : Arr_9,
  x_AdditionalLightsSpotDir : Arr_9,
  x_AdditionalLightsOcclusionProbes : Arr_9,
  x_AdditionalLightsLayerMasks : Arr_10,
}

type Arr_11 = array<mat4x4<f32>, 256u>;

struct AdditionalLightsCookies {
  x_AdditionalLightsWorldToLights : Arr_11,
  x_AdditionalLightsCookieAtlasUVRects : Arr_9,
  x_AdditionalLightsLightTypes : Arr_10,
}

var<private> gl_FragCoord : vec4<f32>;

var<private> vs_INTERP1 : vec3<f32>;

@group(0) @binding(6) var Texture2D_B222E8F : texture_2d<f32>;

@group(0) @binding(14) var samplerTexture2D_B222E8F : sampler;

var<private> vs_INTERP3 : vec4<f32>;

@group(1) @binding(0) var<uniform> x_66 : PGlobals;

@group(1) @binding(6) var<uniform> x_78 : UnityPerMaterial;

@group(0) @binding(7) var Texture2D_D9BFD5F1 : texture_2d<f32>;

@group(0) @binding(15) var samplerTexture2D_D9BFD5F1 : sampler;

var<private> vs_INTERP4 : vec4<f32>;

var<private> vs_INTERP0 : vec3<f32>;

@group(1) @binding(3) var<uniform> x_139 : MainLightShadows;

@group(0) @binding(3) var x_MainLightShadowmapTexture : texture_depth_2d;

@group(0) @binding(11) var sampler_MainLightShadowmapTexture : sampler_comparison;

var<private> vs_INTERP2 : vec4<f32>;

@group(1) @binding(2) var<uniform> x_1592 : UnityPerDraw;

@group(0) @binding(1) var unity_Lightmap : texture_2d<f32>;

@group(0) @binding(9) var samplerunity_Lightmap : sampler;

var<private> vs_INTERP5 : vec2<f32>;

@group(0) @binding(2) var x_ScreenSpaceOcclusionTexture : texture_2d<f32>;

@group(0) @binding(10) var sampler_ScreenSpaceOcclusionTexture : sampler;

var<private> vs_INTERP9 : vec4<f32>;

@group(1) @binding(4) var<uniform> x_3117 : LightCookies;

@group(0) @binding(4) var x_MainLightCookieTexture : texture_2d<f32>;

@group(0) @binding(12) var sampler_MainLightCookieTexture : sampler;

@group(0) @binding(0) var unity_SpecCube0 : texture_cube<f32>;

@group(0) @binding(8) var samplerunity_SpecCube0 : sampler;

@group(1) @binding(1) var<uniform> x_3577 : AdditionalLights;

@group(1) @binding(5) var<uniform> x_3686 : AdditionalLightsCookies;

@group(0) @binding(5) var x_AdditionalLightsCookieAtlasTexture : texture_2d<f32>;

@group(0) @binding(13) var sampler_AdditionalLightsCookieAtlasTexture : sampler;

var<private> SV_Target0 : vec4<f32>;

var<private> SV_Target1 : vec4<f32>;

fn main_1() {
  var hlslcc_FragCoord : vec4<f32>;
  var u_xlat0 : vec3<f32>;
  var u_xlat1 : vec4<f32>;
  var u_xlat2 : vec3<f32>;
  var u_xlat3 : vec4<f32>;
  var u_xlat4 : vec4<f32>;
  var u_xlat63 : f32;
  var u_xlat24 : vec3<f32>;
  var u_xlatb63 : bool;
  var u_xlatb65 : bool;
  var u_xlat5 : vec4<f32>;
  var txVec0 : vec3<f32>;
  var u_xlat6 : vec4<f32>;
  var txVec1 : vec3<f32>;
  var txVec2 : vec3<f32>;
  var txVec3 : vec3<f32>;
  var u_xlat65 : f32;
  var u_xlatb67 : bool;
  var u_xlat47 : vec2<f32>;
  var u_xlat7 : vec4<f32>;
  var u_xlat49 : vec2<f32>;
  var u_xlat8 : vec4<f32>;
  var u_xlat9 : vec4<f32>;
  var u_xlat10 : vec4<f32>;
  var u_xlat11 : vec4<f32>;
  var u_xlat12 : vec4<f32>;
  var u_xlat13 : vec4<f32>;
  var u_xlat67 : f32;
  var txVec4 : vec3<f32>;
  var txVec5 : vec3<f32>;
  var u_xlat26 : f32;
  var txVec6 : vec3<f32>;
  var txVec7 : vec3<f32>;
  var txVec8 : vec3<f32>;
  var txVec9 : vec3<f32>;
  var txVec10 : vec3<f32>;
  var txVec11 : vec3<f32>;
  var txVec12 : vec3<f32>;
  var u_xlat27 : vec3<f32>;
  var u_xlat14 : vec4<f32>;
  var u_xlat15 : vec4<f32>;
  var u_xlat28 : vec2<f32>;
  var u_xlat55 : vec2<f32>;
  var u_xlat50 : vec2<f32>;
  var u_xlat16 : vec4<f32>;
  var u_xlat17 : vec4<f32>;
  var u_xlat18 : vec4<f32>;
  var txVec13 : vec3<f32>;
  var txVec14 : vec3<f32>;
  var txVec15 : vec3<f32>;
  var txVec16 : vec3<f32>;
  var txVec17 : vec3<f32>;
  var txVec18 : vec3<f32>;
  var txVec19 : vec3<f32>;
  var txVec20 : vec3<f32>;
  var txVec21 : vec3<f32>;
  var txVec22 : vec3<f32>;
  var txVec23 : vec3<f32>;
  var txVec24 : vec3<f32>;
  var txVec25 : vec3<f32>;
  var txVec26 : vec3<f32>;
  var txVec27 : vec3<f32>;
  var txVec28 : vec3<f32>;
  var txVec29 : vec3<f32>;
  var u_xlatb25 : bool;
  var u_xlatb46 : bool;
  var u_xlat25 : vec3<f32>;
  var u_xlatb1 : bool;
  var x_1505 : f32;
  var u_xlat22 : vec3<f32>;
  var u_xlat43 : f32;
  var u_xlat64 : f32;
  var u_xlatb43 : bool;
  var x_1553 : f32;
  var u_xlatb22 : vec3<bool>;
  var x_1679 : f32;
  var x_1692 : f32;
  var x_1704 : f32;
  var u_xlat68 : f32;
  var txVec30 : vec3<f32>;
  var txVec31 : vec3<f32>;
  var txVec32 : vec3<f32>;
  var txVec33 : vec3<f32>;
  var u_xlatb48 : vec2<bool>;
  var u_xlat48 : vec2<f32>;
  var u_xlat51 : vec2<f32>;
  var txVec34 : vec3<f32>;
  var u_xlat69 : f32;
  var txVec35 : vec3<f32>;
  var txVec36 : vec3<f32>;
  var txVec37 : vec3<f32>;
  var txVec38 : vec3<f32>;
  var txVec39 : vec3<f32>;
  var txVec40 : vec3<f32>;
  var txVec41 : vec3<f32>;
  var txVec42 : vec3<f32>;
  var u_xlat29 : vec2<f32>;
  var u_xlat52 : vec2<f32>;
  var u_xlat19 : vec4<f32>;
  var u_xlat20 : vec4<f32>;
  var txVec43 : vec3<f32>;
  var txVec44 : vec3<f32>;
  var u_xlat71 : f32;
  var txVec45 : vec3<f32>;
  var txVec46 : vec3<f32>;
  var txVec47 : vec3<f32>;
  var txVec48 : vec3<f32>;
  var txVec49 : vec3<f32>;
  var txVec50 : vec3<f32>;
  var txVec51 : vec3<f32>;
  var txVec52 : vec3<f32>;
  var txVec53 : vec3<f32>;
  var txVec54 : vec3<f32>;
  var txVec55 : vec3<f32>;
  var txVec56 : vec3<f32>;
  var txVec57 : vec3<f32>;
  var txVec58 : vec3<f32>;
  var txVec59 : vec3<f32>;
  var u_xlatb4 : bool;
  var x_3183 : f32;
  var x_3195 : vec3<f32>;
  var u_xlatu63 : u32;
  var u_xlatu_loop_1 : u32;
  var u_xlatu3 : u32;
  var u_xlati67 : i32;
  var indexable : array<vec4<u32>, 4u>;
  var u_xlat70 : f32;
  var u_xlatu71 : u32;
  var u_xlati72 : i32;
  var u_xlati71 : i32;
  var u_xlati73 : i32;
  var u_xlatb71 : bool;
  var u_xlat53 : vec2<f32>;
  var u_xlatb53 : vec2<bool>;
  var x_3979 : f32;
  var x_3992 : f32;
  var x_4044 : f32;
  var x_4055 : vec3<f32>;
  var x_4236 : f32;
  var u_xlatu0 : u32;
  var u_xlat_precise_vec4 : vec4<f32>;
  var u_xlat_precise_ivec4 : vec4<i32>;
  var u_xlat_precise_bvec4 : vec4<bool>;
  var u_xlat_precise_uvec4 : vec4<u32>;
  let x_13 : vec4<f32> = gl_FragCoord;
  let x_14 : vec3<f32> = vec3<f32>(x_13.x, x_13.y, x_13.z);
  let x_20 : f32 = gl_FragCoord.w;
  hlslcc_FragCoord = vec4<f32>(x_14.x, x_14.y, x_14.z, (1.0f / x_20));
  let x_30 : vec3<f32> = vs_INTERP1;
  let x_31 : vec3<f32> = vs_INTERP1;
  u_xlat0.x = dot(x_30, x_31);
  let x_37 : f32 = u_xlat0.x;
  u_xlat0.x = sqrt(x_37);
  let x_41 : f32 = u_xlat0.x;
  u_xlat0.x = (1.0f / x_41);
  let x_44 : vec3<f32> = u_xlat0;
  let x_46 : vec3<f32> = vs_INTERP1;
  u_xlat0 = (vec3<f32>(x_44.x, x_44.x, x_44.x) * x_46);
  let x_61 : vec4<f32> = vs_INTERP3;
  let x_71 : f32 = x_66.x_GlobalMipBias.x;
  let x_72 : vec4<f32> = textureSampleBias(Texture2D_B222E8F, samplerTexture2D_B222E8F, vec2<f32>(x_61.x, x_61.y), x_71);
  u_xlat1 = x_72;
  let x_74 : vec4<f32> = u_xlat1;
  let x_81 : vec4<f32> = x_78.Color_C30C7CA3;
  u_xlat2 = (vec3<f32>(x_74.x, x_74.y, x_74.z) * vec3<f32>(x_81.x, x_81.y, x_81.z));
  let x_90 : vec4<f32> = vs_INTERP3;
  let x_93 : f32 = x_66.x_GlobalMipBias.x;
  let x_94 : vec4<f32> = textureSampleBias(Texture2D_D9BFD5F1, samplerTexture2D_D9BFD5F1, vec2<f32>(x_90.x, x_90.y), x_93);
  u_xlat3 = vec4<f32>(x_94.w, x_94.x, x_94.y, x_94.z);
  let x_97 : vec4<f32> = u_xlat3;
  u_xlat4 = ((vec4<f32>(x_97.y, x_97.z, x_97.w, x_97.x) * vec4<f32>(2.0f, 2.0f, 2.0f, 2.0f)) + vec4<f32>(-1.0f, -1.0f, -1.0f, -1.0f));
  let x_106 : vec4<f32> = u_xlat4;
  let x_107 : vec4<f32> = u_xlat4;
  u_xlat63 = dot(x_106, x_107);
  let x_109 : f32 = u_xlat63;
  u_xlat63 = inverseSqrt(x_109);
  let x_112 : f32 = u_xlat63;
  let x_114 : vec4<f32> = u_xlat4;
  u_xlat24 = (vec3<f32>(x_112, x_112, x_112) * vec3<f32>(x_114.x, x_114.y, x_114.z));
  let x_120 : f32 = vs_INTERP4.y;
  u_xlat63 = (x_120 * 200.0f);
  let x_123 : f32 = u_xlat63;
  u_xlat63 = min(x_123, 1.0f);
  let x_125 : f32 = u_xlat63;
  let x_127 : vec4<f32> = u_xlat1;
  let x_129 : vec3<f32> = (vec3<f32>(x_125, x_125, x_125) * vec3<f32>(x_127.x, x_127.y, x_127.z));
  let x_130 : vec4<f32> = u_xlat1;
  u_xlat1 = vec4<f32>(x_129.x, x_129.y, x_129.z, x_130.w);
  let x_133 : vec3<f32> = vs_INTERP0;
  let x_142 : vec4<f32> = x_139.x_MainLightWorldToShadow[0i][1i];
  let x_144 : vec3<f32> = (vec3<f32>(x_133.y, x_133.y, x_133.y) * vec3<f32>(x_142.x, x_142.y, x_142.z));
  let x_145 : vec4<f32> = u_xlat4;
  u_xlat4 = vec4<f32>(x_144.x, x_144.y, x_144.z, x_145.w);
  let x_148 : vec4<f32> = x_139.x_MainLightWorldToShadow[0i][0i];
  let x_150 : vec3<f32> = vs_INTERP0;
  let x_153 : vec4<f32> = u_xlat4;
  let x_155 : vec3<f32> = ((vec3<f32>(x_148.x, x_148.y, x_148.z) * vec3<f32>(x_150.x, x_150.x, x_150.x)) + vec3<f32>(x_153.x, x_153.y, x_153.z));
  let x_156 : vec4<f32> = u_xlat4;
  u_xlat4 = vec4<f32>(x_155.x, x_155.y, x_155.z, x_156.w);
  let x_160 : vec4<f32> = x_139.x_MainLightWorldToShadow[0i][2i];
  let x_162 : vec3<f32> = vs_INTERP0;
  let x_165 : vec4<f32> = u_xlat4;
  let x_167 : vec3<f32> = ((vec3<f32>(x_160.x, x_160.y, x_160.z) * vec3<f32>(x_162.z, x_162.z, x_162.z)) + vec3<f32>(x_165.x, x_165.y, x_165.z));
  let x_168 : vec4<f32> = u_xlat4;
  u_xlat4 = vec4<f32>(x_167.x, x_167.y, x_167.z, x_168.w);
  let x_170 : vec4<f32> = u_xlat4;
  let x_174 : vec4<f32> = x_139.x_MainLightWorldToShadow[0i][3i];
  let x_176 : vec3<f32> = (vec3<f32>(x_170.x, x_170.y, x_170.z) + vec3<f32>(x_174.x, x_174.y, x_174.z));
  let x_177 : vec4<f32> = u_xlat4;
  u_xlat4 = vec4<f32>(x_176.x, x_176.y, x_176.z, x_177.w);
  let x_185 : f32 = x_139.x_MainLightShadowParams.y;
  u_xlatb63 = (0.0f < x_185);
  let x_187 : bool = u_xlatb63;
  if (x_187) {
    let x_192 : f32 = x_139.x_MainLightShadowParams.y;
    u_xlatb65 = (x_192 == 1.0f);
    let x_194 : bool = u_xlatb65;
    if (x_194) {
      let x_198 : vec4<f32> = u_xlat4;
      let x_202 : vec4<f32> = x_139.x_MainLightShadowOffset0;
      u_xlat5 = (vec4<f32>(x_198.x, x_198.y, x_198.x, x_198.y) + x_202);
      let x_205 : vec4<f32> = u_xlat5;
      let x_206 : vec2<f32> = vec2<f32>(x_205.x, x_205.y);
      let x_209 : f32 = u_xlat4.z;
      txVec0 = vec3<f32>(x_206.x, x_206.y, x_209);
      let x_222 : vec3<f32> = txVec0;
      let x_224 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_222.xy, x_222.z);
      u_xlat6.x = x_224;
      let x_227 : vec4<f32> = u_xlat5;
      let x_228 : vec2<f32> = vec2<f32>(x_227.z, x_227.w);
      let x_230 : f32 = u_xlat4.z;
      txVec1 = vec3<f32>(x_228.x, x_228.y, x_230);
      let x_237 : vec3<f32> = txVec1;
      let x_239 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_237.xy, x_237.z);
      u_xlat6.y = x_239;
      let x_241 : vec4<f32> = u_xlat4;
      let x_245 : vec4<f32> = x_139.x_MainLightShadowOffset1;
      u_xlat5 = (vec4<f32>(x_241.x, x_241.y, x_241.x, x_241.y) + x_245);
      let x_248 : vec4<f32> = u_xlat5;
      let x_249 : vec2<f32> = vec2<f32>(x_248.x, x_248.y);
      let x_251 : f32 = u_xlat4.z;
      txVec2 = vec3<f32>(x_249.x, x_249.y, x_251);
      let x_258 : vec3<f32> = txVec2;
      let x_260 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_258.xy, x_258.z);
      u_xlat6.z = x_260;
      let x_263 : vec4<f32> = u_xlat5;
      let x_264 : vec2<f32> = vec2<f32>(x_263.z, x_263.w);
      let x_266 : f32 = u_xlat4.z;
      txVec3 = vec3<f32>(x_264.x, x_264.y, x_266);
      let x_273 : vec3<f32> = txVec3;
      let x_275 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_273.xy, x_273.z);
      u_xlat6.w = x_275;
      let x_278 : vec4<f32> = u_xlat6;
      u_xlat65 = dot(x_278, vec4<f32>(0.25f, 0.25f, 0.25f, 0.25f));
    } else {
      let x_285 : f32 = x_139.x_MainLightShadowParams.y;
      u_xlatb67 = (x_285 == 2.0f);
      let x_287 : bool = u_xlatb67;
      if (x_287) {
        let x_290 : vec4<f32> = u_xlat4;
        let x_294 : vec4<f32> = x_139.x_MainLightShadowmapSize;
        let x_299 : vec2<f32> = ((vec2<f32>(x_290.x, x_290.y) * vec2<f32>(x_294.z, x_294.w)) + vec2<f32>(0.5f, 0.5f));
        let x_300 : vec4<f32> = u_xlat5;
        u_xlat5 = vec4<f32>(x_299.x, x_299.y, x_300.z, x_300.w);
        let x_302 : vec4<f32> = u_xlat5;
        let x_304 : vec2<f32> = floor(vec2<f32>(x_302.x, x_302.y));
        let x_305 : vec4<f32> = u_xlat5;
        u_xlat5 = vec4<f32>(x_304.x, x_304.y, x_305.z, x_305.w);
        let x_309 : vec4<f32> = u_xlat4;
        let x_312 : vec4<f32> = x_139.x_MainLightShadowmapSize;
        let x_315 : vec4<f32> = u_xlat5;
        u_xlat47 = ((vec2<f32>(x_309.x, x_309.y) * vec2<f32>(x_312.z, x_312.w)) + -(vec2<f32>(x_315.x, x_315.y)));
        let x_319 : vec2<f32> = u_xlat47;
        u_xlat6 = (vec4<f32>(x_319.x, x_319.x, x_319.y, x_319.y) + vec4<f32>(0.5f, 1.0f, 0.5f, 1.0f));
        let x_324 : vec4<f32> = u_xlat6;
        let x_326 : vec4<f32> = u_xlat6;
        u_xlat7 = (vec4<f32>(x_324.x, x_324.x, x_324.z, x_324.z) * vec4<f32>(x_326.x, x_326.x, x_326.z, x_326.z));
        let x_329 : vec4<f32> = u_xlat7;
        let x_333 : vec2<f32> = (vec2<f32>(x_329.y, x_329.w) * vec2<f32>(0.079999998f, 0.079999998f));
        let x_334 : vec4<f32> = u_xlat6;
        u_xlat6 = vec4<f32>(x_333.x, x_334.y, x_333.y, x_334.w);
        let x_336 : vec4<f32> = u_xlat7;
        let x_339 : vec2<f32> = u_xlat47;
        let x_341 : vec2<f32> = ((vec2<f32>(x_336.x, x_336.z) * vec2<f32>(0.5f, 0.5f)) + -(x_339));
        let x_342 : vec4<f32> = u_xlat7;
        u_xlat7 = vec4<f32>(x_341.x, x_341.y, x_342.z, x_342.w);
        let x_345 : vec2<f32> = u_xlat47;
        u_xlat49 = (-(x_345) + vec2<f32>(1.0f, 1.0f));
        let x_350 : vec2<f32> = u_xlat47;
        let x_352 : vec2<f32> = min(x_350, vec2<f32>(0.0f, 0.0f));
        let x_353 : vec4<f32> = u_xlat8;
        u_xlat8 = vec4<f32>(x_352.x, x_352.y, x_353.z, x_353.w);
        let x_355 : vec4<f32> = u_xlat8;
        let x_358 : vec4<f32> = u_xlat8;
        let x_361 : vec2<f32> = u_xlat49;
        let x_362 : vec2<f32> = ((-(vec2<f32>(x_355.x, x_355.y)) * vec2<f32>(x_358.x, x_358.y)) + x_361);
        let x_363 : vec4<f32> = u_xlat8;
        u_xlat8 = vec4<f32>(x_362.x, x_362.y, x_363.z, x_363.w);
        let x_365 : vec2<f32> = u_xlat47;
        u_xlat47 = max(x_365, vec2<f32>(0.0f, 0.0f));
        let x_367 : vec2<f32> = u_xlat47;
        let x_369 : vec2<f32> = u_xlat47;
        let x_371 : vec4<f32> = u_xlat6;
        u_xlat47 = ((-(x_367) * x_369) + vec2<f32>(x_371.y, x_371.w));
        let x_374 : vec4<f32> = u_xlat8;
        let x_376 : vec2<f32> = (vec2<f32>(x_374.x, x_374.y) + vec2<f32>(1.0f, 1.0f));
        let x_377 : vec4<f32> = u_xlat8;
        u_xlat8 = vec4<f32>(x_376.x, x_376.y, x_377.z, x_377.w);
        let x_379 : vec2<f32> = u_xlat47;
        u_xlat47 = (x_379 + vec2<f32>(1.0f, 1.0f));
        let x_382 : vec4<f32> = u_xlat7;
        let x_386 : vec2<f32> = (vec2<f32>(x_382.x, x_382.y) * vec2<f32>(0.159999996f, 0.159999996f));
        let x_387 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_386.x, x_386.y, x_387.z, x_387.w);
        let x_389 : vec2<f32> = u_xlat49;
        let x_390 : vec2<f32> = (x_389 * vec2<f32>(0.159999996f, 0.159999996f));
        let x_391 : vec4<f32> = u_xlat7;
        u_xlat7 = vec4<f32>(x_390.x, x_390.y, x_391.z, x_391.w);
        let x_393 : vec4<f32> = u_xlat8;
        let x_395 : vec2<f32> = (vec2<f32>(x_393.x, x_393.y) * vec2<f32>(0.159999996f, 0.159999996f));
        let x_396 : vec4<f32> = u_xlat8;
        u_xlat8 = vec4<f32>(x_395.x, x_395.y, x_396.z, x_396.w);
        let x_399 : vec2<f32> = u_xlat47;
        let x_400 : vec2<f32> = (x_399 * vec2<f32>(0.159999996f, 0.159999996f));
        let x_401 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_400.x, x_400.y, x_401.z, x_401.w);
        let x_403 : vec4<f32> = u_xlat6;
        u_xlat47 = (vec2<f32>(x_403.y, x_403.w) * vec2<f32>(0.159999996f, 0.159999996f));
        let x_407 : f32 = u_xlat8.x;
        u_xlat9.z = x_407;
        let x_410 : f32 = u_xlat47.x;
        u_xlat9.w = x_410;
        let x_413 : f32 = u_xlat10.x;
        u_xlat7.z = x_413;
        let x_416 : f32 = u_xlat6.x;
        u_xlat7.w = x_416;
        let x_419 : vec4<f32> = u_xlat7;
        let x_421 : vec4<f32> = u_xlat9;
        u_xlat11 = (vec4<f32>(x_419.z, x_419.w, x_419.x, x_419.z) + vec4<f32>(x_421.z, x_421.w, x_421.x, x_421.z));
        let x_425 : f32 = u_xlat9.y;
        u_xlat8.z = x_425;
        let x_428 : f32 = u_xlat47.y;
        u_xlat8.w = x_428;
        let x_431 : f32 = u_xlat7.y;
        u_xlat10.z = x_431;
        let x_434 : f32 = u_xlat6.z;
        u_xlat10.w = x_434;
        let x_436 : vec4<f32> = u_xlat8;
        let x_438 : vec4<f32> = u_xlat10;
        let x_440 : vec3<f32> = (vec3<f32>(x_436.z, x_436.y, x_436.w) + vec3<f32>(x_438.z, x_438.y, x_438.w));
        let x_441 : vec4<f32> = u_xlat6;
        u_xlat6 = vec4<f32>(x_440.x, x_440.y, x_440.z, x_441.w);
        let x_443 : vec4<f32> = u_xlat7;
        let x_445 : vec4<f32> = u_xlat11;
        let x_447 : vec3<f32> = (vec3<f32>(x_443.x, x_443.z, x_443.w) / vec3<f32>(x_445.z, x_445.w, x_445.y));
        let x_448 : vec4<f32> = u_xlat7;
        u_xlat7 = vec4<f32>(x_447.x, x_447.y, x_447.z, x_448.w);
        let x_450 : vec4<f32> = u_xlat7;
        let x_456 : vec3<f32> = (vec3<f32>(x_450.x, x_450.y, x_450.z) + vec3<f32>(-2.5f, -0.5f, 1.5f));
        let x_457 : vec4<f32> = u_xlat7;
        u_xlat7 = vec4<f32>(x_456.x, x_456.y, x_456.z, x_457.w);
        let x_459 : vec4<f32> = u_xlat10;
        let x_461 : vec4<f32> = u_xlat6;
        let x_463 : vec3<f32> = (vec3<f32>(x_459.z, x_459.y, x_459.w) / vec3<f32>(x_461.x, x_461.y, x_461.z));
        let x_464 : vec4<f32> = u_xlat8;
        u_xlat8 = vec4<f32>(x_463.x, x_463.y, x_463.z, x_464.w);
        let x_466 : vec4<f32> = u_xlat8;
        let x_468 : vec3<f32> = (vec3<f32>(x_466.x, x_466.y, x_466.z) + vec3<f32>(-2.5f, -0.5f, 1.5f));
        let x_469 : vec4<f32> = u_xlat8;
        u_xlat8 = vec4<f32>(x_468.x, x_468.y, x_468.z, x_469.w);
        let x_471 : vec4<f32> = u_xlat7;
        let x_474 : vec4<f32> = x_139.x_MainLightShadowmapSize;
        let x_476 : vec3<f32> = (vec3<f32>(x_471.y, x_471.x, x_471.z) * vec3<f32>(x_474.x, x_474.x, x_474.x));
        let x_477 : vec4<f32> = u_xlat7;
        u_xlat7 = vec4<f32>(x_476.x, x_476.y, x_476.z, x_477.w);
        let x_479 : vec4<f32> = u_xlat8;
        let x_482 : vec4<f32> = x_139.x_MainLightShadowmapSize;
        let x_484 : vec3<f32> = (vec3<f32>(x_479.x, x_479.y, x_479.z) * vec3<f32>(x_482.y, x_482.y, x_482.y));
        let x_485 : vec4<f32> = u_xlat8;
        u_xlat8 = vec4<f32>(x_484.x, x_484.y, x_484.z, x_485.w);
        let x_488 : f32 = u_xlat8.x;
        u_xlat7.w = x_488;
        let x_490 : vec4<f32> = u_xlat5;
        let x_493 : vec4<f32> = x_139.x_MainLightShadowmapSize;
        let x_496 : vec4<f32> = u_xlat7;
        u_xlat9 = ((vec4<f32>(x_490.x, x_490.y, x_490.x, x_490.y) * vec4<f32>(x_493.x, x_493.y, x_493.x, x_493.y)) + vec4<f32>(x_496.y, x_496.w, x_496.x, x_496.w));
        let x_499 : vec4<f32> = u_xlat5;
        let x_502 : vec4<f32> = x_139.x_MainLightShadowmapSize;
        let x_505 : vec4<f32> = u_xlat7;
        u_xlat47 = ((vec2<f32>(x_499.x, x_499.y) * vec2<f32>(x_502.x, x_502.y)) + vec2<f32>(x_505.z, x_505.w));
        let x_509 : f32 = u_xlat7.y;
        u_xlat8.w = x_509;
        let x_511 : vec4<f32> = u_xlat8;
        let x_512 : vec2<f32> = vec2<f32>(x_511.y, x_511.z);
        let x_513 : vec4<f32> = u_xlat7;
        u_xlat7 = vec4<f32>(x_513.x, x_512.x, x_513.z, x_512.y);
        let x_515 : vec4<f32> = u_xlat5;
        let x_518 : vec4<f32> = x_139.x_MainLightShadowmapSize;
        let x_521 : vec4<f32> = u_xlat7;
        u_xlat10 = ((vec4<f32>(x_515.x, x_515.y, x_515.x, x_515.y) * vec4<f32>(x_518.x, x_518.y, x_518.x, x_518.y)) + vec4<f32>(x_521.x, x_521.y, x_521.z, x_521.y));
        let x_524 : vec4<f32> = u_xlat5;
        let x_527 : vec4<f32> = x_139.x_MainLightShadowmapSize;
        let x_530 : vec4<f32> = u_xlat8;
        u_xlat8 = ((vec4<f32>(x_524.x, x_524.y, x_524.x, x_524.y) * vec4<f32>(x_527.x, x_527.y, x_527.x, x_527.y)) + vec4<f32>(x_530.w, x_530.y, x_530.w, x_530.z));
        let x_533 : vec4<f32> = u_xlat5;
        let x_536 : vec4<f32> = x_139.x_MainLightShadowmapSize;
        let x_539 : vec4<f32> = u_xlat7;
        u_xlat7 = ((vec4<f32>(x_533.x, x_533.y, x_533.x, x_533.y) * vec4<f32>(x_536.x, x_536.y, x_536.x, x_536.y)) + vec4<f32>(x_539.x, x_539.w, x_539.z, x_539.w));
        let x_543 : vec4<f32> = u_xlat6;
        let x_545 : vec4<f32> = u_xlat11;
        u_xlat12 = (vec4<f32>(x_543.x, x_543.x, x_543.x, x_543.y) * vec4<f32>(x_545.z, x_545.w, x_545.y, x_545.z));
        let x_549 : vec4<f32> = u_xlat6;
        let x_551 : vec4<f32> = u_xlat11;
        u_xlat13 = (vec4<f32>(x_549.y, x_549.y, x_549.z, x_549.z) * x_551);
        let x_555 : f32 = u_xlat6.z;
        let x_557 : f32 = u_xlat11.y;
        u_xlat67 = (x_555 * x_557);
        let x_560 : vec4<f32> = u_xlat9;
        let x_561 : vec2<f32> = vec2<f32>(x_560.x, x_560.y);
        let x_563 : f32 = u_xlat4.z;
        txVec4 = vec3<f32>(x_561.x, x_561.y, x_563);
        let x_570 : vec3<f32> = txVec4;
        let x_572 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_570.xy, x_570.z);
        u_xlat5.x = x_572;
        let x_575 : vec4<f32> = u_xlat9;
        let x_576 : vec2<f32> = vec2<f32>(x_575.z, x_575.w);
        let x_578 : f32 = u_xlat4.z;
        txVec5 = vec3<f32>(x_576.x, x_576.y, x_578);
        let x_586 : vec3<f32> = txVec5;
        let x_588 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_586.xy, x_586.z);
        u_xlat26 = x_588;
        let x_589 : f32 = u_xlat26;
        let x_591 : f32 = u_xlat12.y;
        u_xlat26 = (x_589 * x_591);
        let x_594 : f32 = u_xlat12.x;
        let x_596 : f32 = u_xlat5.x;
        let x_598 : f32 = u_xlat26;
        u_xlat5.x = ((x_594 * x_596) + x_598);
        let x_602 : vec2<f32> = u_xlat47;
        let x_604 : f32 = u_xlat4.z;
        txVec6 = vec3<f32>(x_602.x, x_602.y, x_604);
        let x_611 : vec3<f32> = txVec6;
        let x_613 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_611.xy, x_611.z);
        u_xlat26 = x_613;
        let x_615 : f32 = u_xlat12.z;
        let x_616 : f32 = u_xlat26;
        let x_619 : f32 = u_xlat5.x;
        u_xlat5.x = ((x_615 * x_616) + x_619);
        let x_623 : vec4<f32> = u_xlat8;
        let x_624 : vec2<f32> = vec2<f32>(x_623.x, x_623.y);
        let x_626 : f32 = u_xlat4.z;
        txVec7 = vec3<f32>(x_624.x, x_624.y, x_626);
        let x_633 : vec3<f32> = txVec7;
        let x_635 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_633.xy, x_633.z);
        u_xlat26 = x_635;
        let x_637 : f32 = u_xlat12.w;
        let x_638 : f32 = u_xlat26;
        let x_641 : f32 = u_xlat5.x;
        u_xlat5.x = ((x_637 * x_638) + x_641);
        let x_645 : vec4<f32> = u_xlat10;
        let x_646 : vec2<f32> = vec2<f32>(x_645.x, x_645.y);
        let x_648 : f32 = u_xlat4.z;
        txVec8 = vec3<f32>(x_646.x, x_646.y, x_648);
        let x_655 : vec3<f32> = txVec8;
        let x_657 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_655.xy, x_655.z);
        u_xlat26 = x_657;
        let x_659 : f32 = u_xlat13.x;
        let x_660 : f32 = u_xlat26;
        let x_663 : f32 = u_xlat5.x;
        u_xlat5.x = ((x_659 * x_660) + x_663);
        let x_667 : vec4<f32> = u_xlat10;
        let x_668 : vec2<f32> = vec2<f32>(x_667.z, x_667.w);
        let x_670 : f32 = u_xlat4.z;
        txVec9 = vec3<f32>(x_668.x, x_668.y, x_670);
        let x_677 : vec3<f32> = txVec9;
        let x_679 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_677.xy, x_677.z);
        u_xlat26 = x_679;
        let x_681 : f32 = u_xlat13.y;
        let x_682 : f32 = u_xlat26;
        let x_685 : f32 = u_xlat5.x;
        u_xlat5.x = ((x_681 * x_682) + x_685);
        let x_689 : vec4<f32> = u_xlat8;
        let x_690 : vec2<f32> = vec2<f32>(x_689.z, x_689.w);
        let x_692 : f32 = u_xlat4.z;
        txVec10 = vec3<f32>(x_690.x, x_690.y, x_692);
        let x_699 : vec3<f32> = txVec10;
        let x_701 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_699.xy, x_699.z);
        u_xlat26 = x_701;
        let x_703 : f32 = u_xlat13.z;
        let x_704 : f32 = u_xlat26;
        let x_707 : f32 = u_xlat5.x;
        u_xlat5.x = ((x_703 * x_704) + x_707);
        let x_711 : vec4<f32> = u_xlat7;
        let x_712 : vec2<f32> = vec2<f32>(x_711.x, x_711.y);
        let x_714 : f32 = u_xlat4.z;
        txVec11 = vec3<f32>(x_712.x, x_712.y, x_714);
        let x_721 : vec3<f32> = txVec11;
        let x_723 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_721.xy, x_721.z);
        u_xlat26 = x_723;
        let x_725 : f32 = u_xlat13.w;
        let x_726 : f32 = u_xlat26;
        let x_729 : f32 = u_xlat5.x;
        u_xlat5.x = ((x_725 * x_726) + x_729);
        let x_733 : vec4<f32> = u_xlat7;
        let x_734 : vec2<f32> = vec2<f32>(x_733.z, x_733.w);
        let x_736 : f32 = u_xlat4.z;
        txVec12 = vec3<f32>(x_734.x, x_734.y, x_736);
        let x_743 : vec3<f32> = txVec12;
        let x_745 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_743.xy, x_743.z);
        u_xlat26 = x_745;
        let x_746 : f32 = u_xlat67;
        let x_747 : f32 = u_xlat26;
        let x_750 : f32 = u_xlat5.x;
        u_xlat65 = ((x_746 * x_747) + x_750);
      } else {
        let x_753 : vec4<f32> = u_xlat4;
        let x_756 : vec4<f32> = x_139.x_MainLightShadowmapSize;
        let x_759 : vec2<f32> = ((vec2<f32>(x_753.x, x_753.y) * vec2<f32>(x_756.z, x_756.w)) + vec2<f32>(0.5f, 0.5f));
        let x_760 : vec4<f32> = u_xlat5;
        u_xlat5 = vec4<f32>(x_759.x, x_759.y, x_760.z, x_760.w);
        let x_762 : vec4<f32> = u_xlat5;
        let x_764 : vec2<f32> = floor(vec2<f32>(x_762.x, x_762.y));
        let x_765 : vec4<f32> = u_xlat5;
        u_xlat5 = vec4<f32>(x_764.x, x_764.y, x_765.z, x_765.w);
        let x_767 : vec4<f32> = u_xlat4;
        let x_770 : vec4<f32> = x_139.x_MainLightShadowmapSize;
        let x_773 : vec4<f32> = u_xlat5;
        u_xlat47 = ((vec2<f32>(x_767.x, x_767.y) * vec2<f32>(x_770.z, x_770.w)) + -(vec2<f32>(x_773.x, x_773.y)));
        let x_777 : vec2<f32> = u_xlat47;
        u_xlat6 = (vec4<f32>(x_777.x, x_777.x, x_777.y, x_777.y) + vec4<f32>(0.5f, 1.0f, 0.5f, 1.0f));
        let x_780 : vec4<f32> = u_xlat6;
        let x_782 : vec4<f32> = u_xlat6;
        u_xlat7 = (vec4<f32>(x_780.x, x_780.x, x_780.z, x_780.z) * vec4<f32>(x_782.x, x_782.x, x_782.z, x_782.z));
        let x_785 : vec4<f32> = u_xlat7;
        let x_789 : vec2<f32> = (vec2<f32>(x_785.y, x_785.w) * vec2<f32>(0.040816002f, 0.040816002f));
        let x_790 : vec4<f32> = u_xlat8;
        u_xlat8 = vec4<f32>(x_790.x, x_789.x, x_790.z, x_789.y);
        let x_792 : vec4<f32> = u_xlat7;
        let x_795 : vec2<f32> = u_xlat47;
        let x_797 : vec2<f32> = ((vec2<f32>(x_792.x, x_792.z) * vec2<f32>(0.5f, 0.5f)) + -(x_795));
        let x_798 : vec4<f32> = u_xlat6;
        u_xlat6 = vec4<f32>(x_797.x, x_798.y, x_797.y, x_798.w);
        let x_800 : vec2<f32> = u_xlat47;
        let x_802 : vec2<f32> = (-(x_800) + vec2<f32>(1.0f, 1.0f));
        let x_803 : vec4<f32> = u_xlat7;
        u_xlat7 = vec4<f32>(x_802.x, x_802.y, x_803.z, x_803.w);
        let x_805 : vec2<f32> = u_xlat47;
        u_xlat49 = min(x_805, vec2<f32>(0.0f, 0.0f));
        let x_807 : vec2<f32> = u_xlat49;
        let x_809 : vec2<f32> = u_xlat49;
        let x_811 : vec4<f32> = u_xlat7;
        let x_813 : vec2<f32> = ((-(x_807) * x_809) + vec2<f32>(x_811.x, x_811.y));
        let x_814 : vec4<f32> = u_xlat7;
        u_xlat7 = vec4<f32>(x_813.x, x_813.y, x_814.z, x_814.w);
        let x_816 : vec2<f32> = u_xlat47;
        u_xlat49 = max(x_816, vec2<f32>(0.0f, 0.0f));
        let x_819 : vec2<f32> = u_xlat49;
        let x_821 : vec2<f32> = u_xlat49;
        let x_823 : vec4<f32> = u_xlat6;
        let x_825 : vec2<f32> = ((-(x_819) * x_821) + vec2<f32>(x_823.y, x_823.w));
        let x_826 : vec3<f32> = u_xlat27;
        u_xlat27 = vec3<f32>(x_825.x, x_826.y, x_825.y);
        let x_828 : vec4<f32> = u_xlat7;
        let x_831 : vec2<f32> = (vec2<f32>(x_828.x, x_828.y) + vec2<f32>(2.0f, 2.0f));
        let x_832 : vec4<f32> = u_xlat7;
        u_xlat7 = vec4<f32>(x_831.x, x_831.y, x_832.z, x_832.w);
        let x_834 : vec3<f32> = u_xlat27;
        let x_836 : vec2<f32> = (vec2<f32>(x_834.x, x_834.z) + vec2<f32>(2.0f, 2.0f));
        let x_837 : vec4<f32> = u_xlat6;
        u_xlat6 = vec4<f32>(x_837.x, x_836.x, x_837.z, x_836.y);
        let x_840 : f32 = u_xlat6.y;
        u_xlat9.z = (x_840 * 0.081632003f);
        let x_844 : vec4<f32> = u_xlat6;
        let x_847 : vec3<f32> = (vec3<f32>(x_844.z, x_844.x, x_844.w) * vec3<f32>(0.081632003f, 0.081632003f, 0.081632003f));
        let x_848 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_847.x, x_847.y, x_847.z, x_848.w);
        let x_850 : vec4<f32> = u_xlat7;
        let x_853 : vec2<f32> = (vec2<f32>(x_850.x, x_850.y) * vec2<f32>(0.081632003f, 0.081632003f));
        let x_854 : vec4<f32> = u_xlat6;
        u_xlat6 = vec4<f32>(x_853.x, x_853.y, x_854.z, x_854.w);
        let x_857 : f32 = u_xlat10.y;
        u_xlat9.x = x_857;
        let x_859 : vec2<f32> = u_xlat47;
        let x_866 : vec2<f32> = ((vec2<f32>(x_859.x, x_859.x) * vec2<f32>(-0.081632003f, 0.081632003f)) + vec2<f32>(0.163264006f, 0.081632003f));
        let x_867 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_867.x, x_866.x, x_867.z, x_866.y);
        let x_869 : vec2<f32> = u_xlat47;
        let x_873 : vec2<f32> = ((vec2<f32>(x_869.x, x_869.x) * vec2<f32>(-0.081632003f, 0.081632003f)) + vec2<f32>(0.081632003f, 0.163264006f));
        let x_874 : vec4<f32> = u_xlat7;
        u_xlat7 = vec4<f32>(x_873.x, x_874.y, x_873.y, x_874.w);
        let x_877 : f32 = u_xlat6.x;
        u_xlat7.y = x_877;
        let x_880 : f32 = u_xlat8.y;
        u_xlat7.w = x_880;
        let x_882 : vec4<f32> = u_xlat7;
        let x_883 : vec4<f32> = u_xlat9;
        u_xlat9 = (x_882 + x_883);
        let x_885 : vec2<f32> = u_xlat47;
        let x_888 : vec2<f32> = ((vec2<f32>(x_885.y, x_885.y) * vec2<f32>(-0.081632003f, 0.081632003f)) + vec2<f32>(0.163264006f, 0.081632003f));
        let x_889 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_889.x, x_888.x, x_889.z, x_888.y);
        let x_891 : vec2<f32> = u_xlat47;
        let x_894 : vec2<f32> = ((vec2<f32>(x_891.y, x_891.y) * vec2<f32>(-0.081632003f, 0.081632003f)) + vec2<f32>(0.081632003f, 0.163264006f));
        let x_895 : vec4<f32> = u_xlat8;
        u_xlat8 = vec4<f32>(x_894.x, x_895.y, x_894.y, x_895.w);
        let x_898 : f32 = u_xlat6.y;
        u_xlat8.y = x_898;
        let x_900 : vec4<f32> = u_xlat8;
        let x_901 : vec4<f32> = u_xlat10;
        u_xlat6 = (x_900 + x_901);
        let x_903 : vec4<f32> = u_xlat7;
        let x_904 : vec4<f32> = u_xlat9;
        u_xlat7 = (x_903 / x_904);
        let x_906 : vec4<f32> = u_xlat7;
        u_xlat7 = (x_906 + vec4<f32>(-3.5f, -1.5f, 0.5f, 2.5f));
        let x_912 : vec4<f32> = u_xlat8;
        let x_913 : vec4<f32> = u_xlat6;
        u_xlat8 = (x_912 / x_913);
        let x_915 : vec4<f32> = u_xlat8;
        u_xlat8 = (x_915 + vec4<f32>(-3.5f, -1.5f, 0.5f, 2.5f));
        let x_917 : vec4<f32> = u_xlat7;
        let x_920 : vec4<f32> = x_139.x_MainLightShadowmapSize;
        u_xlat7 = (vec4<f32>(x_917.w, x_917.x, x_917.y, x_917.z) * vec4<f32>(x_920.x, x_920.x, x_920.x, x_920.x));
        let x_923 : vec4<f32> = u_xlat8;
        let x_926 : vec4<f32> = x_139.x_MainLightShadowmapSize;
        u_xlat8 = (vec4<f32>(x_923.x, x_923.w, x_923.y, x_923.z) * vec4<f32>(x_926.y, x_926.y, x_926.y, x_926.y));
        let x_929 : vec4<f32> = u_xlat7;
        let x_930 : vec3<f32> = vec3<f32>(x_929.y, x_929.z, x_929.w);
        let x_931 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_930.x, x_931.y, x_930.y, x_930.z);
        let x_934 : f32 = u_xlat8.x;
        u_xlat10.y = x_934;
        let x_936 : vec4<f32> = u_xlat5;
        let x_939 : vec4<f32> = x_139.x_MainLightShadowmapSize;
        let x_942 : vec4<f32> = u_xlat10;
        u_xlat11 = ((vec4<f32>(x_936.x, x_936.y, x_936.x, x_936.y) * vec4<f32>(x_939.x, x_939.y, x_939.x, x_939.y)) + vec4<f32>(x_942.x, x_942.y, x_942.z, x_942.y));
        let x_945 : vec4<f32> = u_xlat5;
        let x_948 : vec4<f32> = x_139.x_MainLightShadowmapSize;
        let x_951 : vec4<f32> = u_xlat10;
        u_xlat47 = ((vec2<f32>(x_945.x, x_945.y) * vec2<f32>(x_948.x, x_948.y)) + vec2<f32>(x_951.w, x_951.y));
        let x_955 : f32 = u_xlat10.y;
        u_xlat7.y = x_955;
        let x_958 : f32 = u_xlat8.z;
        u_xlat10.y = x_958;
        let x_960 : vec4<f32> = u_xlat5;
        let x_963 : vec4<f32> = x_139.x_MainLightShadowmapSize;
        let x_966 : vec4<f32> = u_xlat10;
        u_xlat12 = ((vec4<f32>(x_960.x, x_960.y, x_960.x, x_960.y) * vec4<f32>(x_963.x, x_963.y, x_963.x, x_963.y)) + vec4<f32>(x_966.x, x_966.y, x_966.z, x_966.y));
        let x_969 : vec4<f32> = u_xlat5;
        let x_972 : vec4<f32> = x_139.x_MainLightShadowmapSize;
        let x_975 : vec4<f32> = u_xlat10;
        let x_977 : vec2<f32> = ((vec2<f32>(x_969.x, x_969.y) * vec2<f32>(x_972.x, x_972.y)) + vec2<f32>(x_975.w, x_975.y));
        let x_978 : vec4<f32> = u_xlat13;
        u_xlat13 = vec4<f32>(x_977.x, x_977.y, x_978.z, x_978.w);
        let x_981 : f32 = u_xlat10.y;
        u_xlat7.z = x_981;
        let x_984 : vec4<f32> = u_xlat5;
        let x_987 : vec4<f32> = x_139.x_MainLightShadowmapSize;
        let x_990 : vec4<f32> = u_xlat7;
        u_xlat14 = ((vec4<f32>(x_984.x, x_984.y, x_984.x, x_984.y) * vec4<f32>(x_987.x, x_987.y, x_987.x, x_987.y)) + vec4<f32>(x_990.x, x_990.y, x_990.x, x_990.z));
        let x_994 : f32 = u_xlat8.w;
        u_xlat10.y = x_994;
        let x_997 : vec4<f32> = u_xlat5;
        let x_1000 : vec4<f32> = x_139.x_MainLightShadowmapSize;
        let x_1003 : vec4<f32> = u_xlat10;
        u_xlat15 = ((vec4<f32>(x_997.x, x_997.y, x_997.x, x_997.y) * vec4<f32>(x_1000.x, x_1000.y, x_1000.x, x_1000.y)) + vec4<f32>(x_1003.x, x_1003.y, x_1003.z, x_1003.y));
        let x_1007 : vec4<f32> = u_xlat5;
        let x_1010 : vec4<f32> = x_139.x_MainLightShadowmapSize;
        let x_1013 : vec4<f32> = u_xlat10;
        u_xlat28 = ((vec2<f32>(x_1007.x, x_1007.y) * vec2<f32>(x_1010.x, x_1010.y)) + vec2<f32>(x_1013.w, x_1013.y));
        let x_1017 : f32 = u_xlat10.y;
        u_xlat7.w = x_1017;
        let x_1020 : vec4<f32> = u_xlat5;
        let x_1023 : vec4<f32> = x_139.x_MainLightShadowmapSize;
        let x_1026 : vec4<f32> = u_xlat7;
        u_xlat55 = ((vec2<f32>(x_1020.x, x_1020.y) * vec2<f32>(x_1023.x, x_1023.y)) + vec2<f32>(x_1026.x, x_1026.w));
        let x_1029 : vec4<f32> = u_xlat10;
        let x_1030 : vec3<f32> = vec3<f32>(x_1029.x, x_1029.z, x_1029.w);
        let x_1031 : vec4<f32> = u_xlat8;
        u_xlat8 = vec4<f32>(x_1030.x, x_1031.y, x_1030.y, x_1030.z);
        let x_1033 : vec4<f32> = u_xlat5;
        let x_1036 : vec4<f32> = x_139.x_MainLightShadowmapSize;
        let x_1039 : vec4<f32> = u_xlat8;
        u_xlat10 = ((vec4<f32>(x_1033.x, x_1033.y, x_1033.x, x_1033.y) * vec4<f32>(x_1036.x, x_1036.y, x_1036.x, x_1036.y)) + vec4<f32>(x_1039.x, x_1039.y, x_1039.z, x_1039.y));
        let x_1043 : vec4<f32> = u_xlat5;
        let x_1046 : vec4<f32> = x_139.x_MainLightShadowmapSize;
        let x_1049 : vec4<f32> = u_xlat8;
        u_xlat50 = ((vec2<f32>(x_1043.x, x_1043.y) * vec2<f32>(x_1046.x, x_1046.y)) + vec2<f32>(x_1049.w, x_1049.y));
        let x_1053 : f32 = u_xlat7.x;
        u_xlat8.x = x_1053;
        let x_1055 : vec4<f32> = u_xlat5;
        let x_1058 : vec4<f32> = x_139.x_MainLightShadowmapSize;
        let x_1061 : vec4<f32> = u_xlat8;
        let x_1063 : vec2<f32> = ((vec2<f32>(x_1055.x, x_1055.y) * vec2<f32>(x_1058.x, x_1058.y)) + vec2<f32>(x_1061.x, x_1061.y));
        let x_1064 : vec4<f32> = u_xlat5;
        u_xlat5 = vec4<f32>(x_1063.x, x_1063.y, x_1064.z, x_1064.w);
        let x_1067 : vec4<f32> = u_xlat6;
        let x_1069 : vec4<f32> = u_xlat9;
        u_xlat16 = (vec4<f32>(x_1067.x, x_1067.x, x_1067.x, x_1067.x) * x_1069);
        let x_1072 : vec4<f32> = u_xlat6;
        let x_1074 : vec4<f32> = u_xlat9;
        u_xlat17 = (vec4<f32>(x_1072.y, x_1072.y, x_1072.y, x_1072.y) * x_1074);
        let x_1077 : vec4<f32> = u_xlat6;
        let x_1079 : vec4<f32> = u_xlat9;
        u_xlat18 = (vec4<f32>(x_1077.z, x_1077.z, x_1077.z, x_1077.z) * x_1079);
        let x_1081 : vec4<f32> = u_xlat6;
        let x_1083 : vec4<f32> = u_xlat9;
        u_xlat6 = (vec4<f32>(x_1081.w, x_1081.w, x_1081.w, x_1081.w) * x_1083);
        let x_1086 : vec4<f32> = u_xlat11;
        let x_1087 : vec2<f32> = vec2<f32>(x_1086.x, x_1086.y);
        let x_1089 : f32 = u_xlat4.z;
        txVec13 = vec3<f32>(x_1087.x, x_1087.y, x_1089);
        let x_1096 : vec3<f32> = txVec13;
        let x_1098 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1096.xy, x_1096.z);
        u_xlat67 = x_1098;
        let x_1100 : vec4<f32> = u_xlat11;
        let x_1101 : vec2<f32> = vec2<f32>(x_1100.z, x_1100.w);
        let x_1103 : f32 = u_xlat4.z;
        txVec14 = vec3<f32>(x_1101.x, x_1101.y, x_1103);
        let x_1110 : vec3<f32> = txVec14;
        let x_1112 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1110.xy, x_1110.z);
        u_xlat7.x = x_1112;
        let x_1115 : f32 = u_xlat7.x;
        let x_1117 : f32 = u_xlat16.y;
        u_xlat7.x = (x_1115 * x_1117);
        let x_1121 : f32 = u_xlat16.x;
        let x_1122 : f32 = u_xlat67;
        let x_1125 : f32 = u_xlat7.x;
        u_xlat67 = ((x_1121 * x_1122) + x_1125);
        let x_1128 : vec2<f32> = u_xlat47;
        let x_1130 : f32 = u_xlat4.z;
        txVec15 = vec3<f32>(x_1128.x, x_1128.y, x_1130);
        let x_1137 : vec3<f32> = txVec15;
        let x_1139 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1137.xy, x_1137.z);
        u_xlat47.x = x_1139;
        let x_1142 : f32 = u_xlat16.z;
        let x_1144 : f32 = u_xlat47.x;
        let x_1146 : f32 = u_xlat67;
        u_xlat67 = ((x_1142 * x_1144) + x_1146);
        let x_1149 : vec4<f32> = u_xlat14;
        let x_1150 : vec2<f32> = vec2<f32>(x_1149.x, x_1149.y);
        let x_1152 : f32 = u_xlat4.z;
        txVec16 = vec3<f32>(x_1150.x, x_1150.y, x_1152);
        let x_1159 : vec3<f32> = txVec16;
        let x_1161 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1159.xy, x_1159.z);
        u_xlat47.x = x_1161;
        let x_1164 : f32 = u_xlat16.w;
        let x_1166 : f32 = u_xlat47.x;
        let x_1168 : f32 = u_xlat67;
        u_xlat67 = ((x_1164 * x_1166) + x_1168);
        let x_1171 : vec4<f32> = u_xlat12;
        let x_1172 : vec2<f32> = vec2<f32>(x_1171.x, x_1171.y);
        let x_1174 : f32 = u_xlat4.z;
        txVec17 = vec3<f32>(x_1172.x, x_1172.y, x_1174);
        let x_1181 : vec3<f32> = txVec17;
        let x_1183 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1181.xy, x_1181.z);
        u_xlat47.x = x_1183;
        let x_1186 : f32 = u_xlat17.x;
        let x_1188 : f32 = u_xlat47.x;
        let x_1190 : f32 = u_xlat67;
        u_xlat67 = ((x_1186 * x_1188) + x_1190);
        let x_1193 : vec4<f32> = u_xlat12;
        let x_1194 : vec2<f32> = vec2<f32>(x_1193.z, x_1193.w);
        let x_1196 : f32 = u_xlat4.z;
        txVec18 = vec3<f32>(x_1194.x, x_1194.y, x_1196);
        let x_1203 : vec3<f32> = txVec18;
        let x_1205 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1203.xy, x_1203.z);
        u_xlat47.x = x_1205;
        let x_1208 : f32 = u_xlat17.y;
        let x_1210 : f32 = u_xlat47.x;
        let x_1212 : f32 = u_xlat67;
        u_xlat67 = ((x_1208 * x_1210) + x_1212);
        let x_1215 : vec4<f32> = u_xlat13;
        let x_1216 : vec2<f32> = vec2<f32>(x_1215.x, x_1215.y);
        let x_1218 : f32 = u_xlat4.z;
        txVec19 = vec3<f32>(x_1216.x, x_1216.y, x_1218);
        let x_1225 : vec3<f32> = txVec19;
        let x_1227 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1225.xy, x_1225.z);
        u_xlat47.x = x_1227;
        let x_1230 : f32 = u_xlat17.z;
        let x_1232 : f32 = u_xlat47.x;
        let x_1234 : f32 = u_xlat67;
        u_xlat67 = ((x_1230 * x_1232) + x_1234);
        let x_1237 : vec4<f32> = u_xlat14;
        let x_1238 : vec2<f32> = vec2<f32>(x_1237.z, x_1237.w);
        let x_1240 : f32 = u_xlat4.z;
        txVec20 = vec3<f32>(x_1238.x, x_1238.y, x_1240);
        let x_1247 : vec3<f32> = txVec20;
        let x_1249 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1247.xy, x_1247.z);
        u_xlat47.x = x_1249;
        let x_1252 : f32 = u_xlat17.w;
        let x_1254 : f32 = u_xlat47.x;
        let x_1256 : f32 = u_xlat67;
        u_xlat67 = ((x_1252 * x_1254) + x_1256);
        let x_1259 : vec4<f32> = u_xlat15;
        let x_1260 : vec2<f32> = vec2<f32>(x_1259.x, x_1259.y);
        let x_1262 : f32 = u_xlat4.z;
        txVec21 = vec3<f32>(x_1260.x, x_1260.y, x_1262);
        let x_1269 : vec3<f32> = txVec21;
        let x_1271 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1269.xy, x_1269.z);
        u_xlat47.x = x_1271;
        let x_1274 : f32 = u_xlat18.x;
        let x_1276 : f32 = u_xlat47.x;
        let x_1278 : f32 = u_xlat67;
        u_xlat67 = ((x_1274 * x_1276) + x_1278);
        let x_1281 : vec4<f32> = u_xlat15;
        let x_1282 : vec2<f32> = vec2<f32>(x_1281.z, x_1281.w);
        let x_1284 : f32 = u_xlat4.z;
        txVec22 = vec3<f32>(x_1282.x, x_1282.y, x_1284);
        let x_1291 : vec3<f32> = txVec22;
        let x_1293 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1291.xy, x_1291.z);
        u_xlat47.x = x_1293;
        let x_1296 : f32 = u_xlat18.y;
        let x_1298 : f32 = u_xlat47.x;
        let x_1300 : f32 = u_xlat67;
        u_xlat67 = ((x_1296 * x_1298) + x_1300);
        let x_1303 : vec2<f32> = u_xlat28;
        let x_1305 : f32 = u_xlat4.z;
        txVec23 = vec3<f32>(x_1303.x, x_1303.y, x_1305);
        let x_1312 : vec3<f32> = txVec23;
        let x_1314 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1312.xy, x_1312.z);
        u_xlat47.x = x_1314;
        let x_1317 : f32 = u_xlat18.z;
        let x_1319 : f32 = u_xlat47.x;
        let x_1321 : f32 = u_xlat67;
        u_xlat67 = ((x_1317 * x_1319) + x_1321);
        let x_1324 : vec2<f32> = u_xlat55;
        let x_1326 : f32 = u_xlat4.z;
        txVec24 = vec3<f32>(x_1324.x, x_1324.y, x_1326);
        let x_1333 : vec3<f32> = txVec24;
        let x_1335 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1333.xy, x_1333.z);
        u_xlat47.x = x_1335;
        let x_1338 : f32 = u_xlat18.w;
        let x_1340 : f32 = u_xlat47.x;
        let x_1342 : f32 = u_xlat67;
        u_xlat67 = ((x_1338 * x_1340) + x_1342);
        let x_1345 : vec4<f32> = u_xlat10;
        let x_1346 : vec2<f32> = vec2<f32>(x_1345.x, x_1345.y);
        let x_1348 : f32 = u_xlat4.z;
        txVec25 = vec3<f32>(x_1346.x, x_1346.y, x_1348);
        let x_1355 : vec3<f32> = txVec25;
        let x_1357 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1355.xy, x_1355.z);
        u_xlat47.x = x_1357;
        let x_1360 : f32 = u_xlat6.x;
        let x_1362 : f32 = u_xlat47.x;
        let x_1364 : f32 = u_xlat67;
        u_xlat67 = ((x_1360 * x_1362) + x_1364);
        let x_1367 : vec4<f32> = u_xlat10;
        let x_1368 : vec2<f32> = vec2<f32>(x_1367.z, x_1367.w);
        let x_1370 : f32 = u_xlat4.z;
        txVec26 = vec3<f32>(x_1368.x, x_1368.y, x_1370);
        let x_1377 : vec3<f32> = txVec26;
        let x_1379 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1377.xy, x_1377.z);
        u_xlat47.x = x_1379;
        let x_1382 : f32 = u_xlat6.y;
        let x_1384 : f32 = u_xlat47.x;
        let x_1386 : f32 = u_xlat67;
        u_xlat67 = ((x_1382 * x_1384) + x_1386);
        let x_1389 : vec2<f32> = u_xlat50;
        let x_1391 : f32 = u_xlat4.z;
        txVec27 = vec3<f32>(x_1389.x, x_1389.y, x_1391);
        let x_1398 : vec3<f32> = txVec27;
        let x_1400 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1398.xy, x_1398.z);
        u_xlat47.x = x_1400;
        let x_1403 : f32 = u_xlat6.z;
        let x_1405 : f32 = u_xlat47.x;
        let x_1407 : f32 = u_xlat67;
        u_xlat67 = ((x_1403 * x_1405) + x_1407);
        let x_1410 : vec4<f32> = u_xlat5;
        let x_1411 : vec2<f32> = vec2<f32>(x_1410.x, x_1410.y);
        let x_1413 : f32 = u_xlat4.z;
        txVec28 = vec3<f32>(x_1411.x, x_1411.y, x_1413);
        let x_1420 : vec3<f32> = txVec28;
        let x_1422 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1420.xy, x_1420.z);
        u_xlat5.x = x_1422;
        let x_1425 : f32 = u_xlat6.w;
        let x_1427 : f32 = u_xlat5.x;
        let x_1429 : f32 = u_xlat67;
        u_xlat65 = ((x_1425 * x_1427) + x_1429);
      }
    }
  } else {
    let x_1433 : vec4<f32> = u_xlat4;
    let x_1434 : vec2<f32> = vec2<f32>(x_1433.x, x_1433.y);
    let x_1436 : f32 = u_xlat4.z;
    txVec29 = vec3<f32>(x_1434.x, x_1434.y, x_1436);
    let x_1443 : vec3<f32> = txVec29;
    let x_1445 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1443.xy, x_1443.z);
    u_xlat65 = x_1445;
  }
  let x_1447 : f32 = x_139.x_MainLightShadowParams.x;
  u_xlat4.x = (-(x_1447) + 1.0f);
  let x_1451 : f32 = u_xlat65;
  let x_1453 : f32 = x_139.x_MainLightShadowParams.x;
  let x_1456 : f32 = u_xlat4.x;
  u_xlat65 = ((x_1451 * x_1453) + x_1456);
  let x_1460 : f32 = u_xlat4.z;
  u_xlatb25 = (0.0f >= x_1460);
  let x_1464 : f32 = u_xlat4.z;
  u_xlatb46 = (x_1464 >= 1.0f);
  let x_1466 : bool = u_xlatb46;
  let x_1467 : bool = u_xlatb25;
  u_xlatb25 = (x_1466 | x_1467);
  let x_1469 : bool = u_xlatb25;
  let x_1470 : f32 = u_xlat65;
  u_xlat65 = select(x_1470, 1.0f, x_1469);
  let x_1472 : vec3<f32> = u_xlat0;
  let x_1474 : vec4<f32> = x_66.x_MainLightPosition;
  u_xlat0.x = dot(x_1472, -(vec3<f32>(x_1474.x, x_1474.y, x_1474.z)));
  let x_1480 : f32 = u_xlat0.x;
  u_xlat0.x = clamp(x_1480, 0.0f, 1.0f);
  let x_1484 : f32 = u_xlat65;
  let x_1488 : vec4<f32> = x_66.x_MainLightColor;
  u_xlat25 = (vec3<f32>(x_1484, x_1484, x_1484) * vec3<f32>(x_1488.x, x_1488.y, x_1488.z));
  let x_1491 : vec3<f32> = u_xlat0;
  let x_1493 : vec3<f32> = u_xlat25;
  u_xlat0 = (vec3<f32>(x_1491.x, x_1491.x, x_1491.x) * x_1493);
  let x_1495 : vec3<f32> = u_xlat0;
  let x_1496 : vec4<f32> = u_xlat1;
  u_xlat0 = (x_1495 * vec3<f32>(x_1496.x, x_1496.y, x_1496.z));
  let x_1501 : f32 = u_xlat1.w;
  u_xlatb1 = (x_1501 >= 0.400000006f);
  let x_1504 : bool = u_xlatb1;
  if (x_1504) {
    let x_1509 : f32 = u_xlat1.w;
    x_1505 = x_1509;
  } else {
    x_1505 = 0.0f;
  }
  let x_1511 : f32 = x_1505;
  u_xlat1.x = x_1511;
  let x_1515 : f32 = u_xlat1.w;
  u_xlat22.x = (x_1515 + -0.400000006f);
  let x_1521 : f32 = u_xlat1.w;
  u_xlat43 = dpdxCoarse(x_1521);
  let x_1525 : f32 = u_xlat1.w;
  u_xlat64 = dpdyCoarse(x_1525);
  let x_1527 : f32 = u_xlat64;
  let x_1529 : f32 = u_xlat43;
  u_xlat43 = (abs(x_1527) + abs(x_1529));
  let x_1532 : f32 = u_xlat43;
  u_xlat43 = max(x_1532, 0.0001f);
  let x_1536 : f32 = u_xlat22.x;
  let x_1537 : f32 = u_xlat43;
  u_xlat22.x = (x_1536 / x_1537);
  let x_1541 : f32 = u_xlat22.x;
  u_xlat22.x = (x_1541 + 0.5f);
  let x_1545 : f32 = u_xlat22.x;
  u_xlat22.x = clamp(x_1545, 0.0f, 1.0f);
  let x_1550 : f32 = x_66.x_AlphaToMaskAvailable;
  u_xlatb43 = !((x_1550 == 0.0f));
  let x_1552 : bool = u_xlatb43;
  if (x_1552) {
    let x_1557 : f32 = u_xlat22.x;
    x_1553 = x_1557;
  } else {
    let x_1560 : f32 = u_xlat1.x;
    x_1553 = x_1560;
  }
  let x_1561 : f32 = x_1553;
  u_xlat1.x = x_1561;
  let x_1564 : f32 = u_xlat1.x;
  u_xlat22.x = (x_1564 + -0.0001f);
  let x_1572 : f32 = u_xlat22.x;
  u_xlatb22.x = (x_1572 < 0.0f);
  let x_1576 : bool = u_xlatb22.x;
  if (((select(0i, 1i, x_1576) * -1i) != 0i)) {
    discard;
  }
  let x_1586 : f32 = vs_INTERP2.w;
  u_xlatb22.x = (0.0f < x_1586);
  let x_1594 : f32 = x_1592.unity_WorldTransformParams.w;
  u_xlatb22.z = (x_1594 >= 0.0f);
  let x_1598 : bool = u_xlatb22.x;
  u_xlat22.x = select(-1.0f, 1.0f, x_1598);
  let x_1602 : bool = u_xlatb22.z;
  u_xlat22.z = select(-1.0f, 1.0f, x_1602);
  let x_1606 : f32 = u_xlat22.z;
  let x_1608 : f32 = u_xlat22.x;
  u_xlat22.x = (x_1606 * x_1608);
  let x_1611 : vec3<f32> = vs_INTERP1;
  let x_1613 : vec4<f32> = vs_INTERP2;
  u_xlat25 = (vec3<f32>(x_1611.z, x_1611.x, x_1611.y) * vec3<f32>(x_1613.y, x_1613.z, x_1613.x));
  let x_1616 : vec3<f32> = vs_INTERP1;
  let x_1618 : vec4<f32> = vs_INTERP2;
  let x_1621 : vec3<f32> = u_xlat25;
  u_xlat25 = ((vec3<f32>(x_1616.y, x_1616.z, x_1616.x) * vec3<f32>(x_1618.z, x_1618.x, x_1618.y)) + -(x_1621));
  let x_1624 : vec3<f32> = u_xlat22;
  let x_1626 : vec3<f32> = u_xlat25;
  u_xlat25 = (vec3<f32>(x_1624.x, x_1624.x, x_1624.x) * x_1626);
  let x_1628 : vec3<f32> = u_xlat24;
  let x_1630 : vec3<f32> = u_xlat25;
  u_xlat25 = (vec3<f32>(x_1628.y, x_1628.y, x_1628.y) * x_1630);
  let x_1632 : vec3<f32> = u_xlat24;
  let x_1634 : vec4<f32> = vs_INTERP2;
  let x_1637 : vec3<f32> = u_xlat25;
  u_xlat25 = ((vec3<f32>(x_1632.x, x_1632.x, x_1632.x) * vec3<f32>(x_1634.x, x_1634.y, x_1634.z)) + x_1637);
  let x_1639 : vec3<f32> = u_xlat24;
  let x_1641 : vec3<f32> = vs_INTERP1;
  let x_1643 : vec3<f32> = u_xlat25;
  u_xlat24 = ((vec3<f32>(x_1639.z, x_1639.z, x_1639.z) * x_1641) + x_1643);
  let x_1645 : vec3<f32> = u_xlat24;
  let x_1646 : vec3<f32> = u_xlat24;
  u_xlat22.x = dot(x_1645, x_1646);
  let x_1650 : f32 = u_xlat22.x;
  u_xlat22.x = inverseSqrt(x_1650);
  let x_1653 : vec3<f32> = u_xlat22;
  let x_1655 : vec3<f32> = u_xlat24;
  u_xlat24 = (vec3<f32>(x_1653.x, x_1653.x, x_1653.x) * x_1655);
  let x_1659 : f32 = x_66.unity_OrthoParams.w;
  u_xlatb22.x = (x_1659 == 0.0f);
  let x_1662 : vec3<f32> = vs_INTERP0;
  let x_1666 : vec3<f32> = x_66.x_WorldSpaceCameraPos;
  u_xlat25 = (-(x_1662) + x_1666);
  let x_1668 : vec3<f32> = u_xlat25;
  let x_1669 : vec3<f32> = u_xlat25;
  u_xlat64 = dot(x_1668, x_1669);
  let x_1671 : f32 = u_xlat64;
  u_xlat64 = inverseSqrt(x_1671);
  let x_1673 : f32 = u_xlat64;
  let x_1675 : vec3<f32> = u_xlat25;
  u_xlat25 = (vec3<f32>(x_1673, x_1673, x_1673) * x_1675);
  let x_1678 : bool = u_xlatb22.x;
  if (x_1678) {
    let x_1683 : f32 = u_xlat25.x;
    x_1679 = x_1683;
  } else {
    let x_1687 : f32 = x_66.unity_MatrixV[0i].z;
    x_1679 = x_1687;
  }
  let x_1688 : f32 = x_1679;
  u_xlat5.x = x_1688;
  let x_1691 : bool = u_xlatb22.x;
  if (x_1691) {
    let x_1696 : f32 = u_xlat25.y;
    x_1692 = x_1696;
  } else {
    let x_1699 : f32 = x_66.unity_MatrixV[1i].z;
    x_1692 = x_1699;
  }
  let x_1700 : f32 = x_1692;
  u_xlat5.y = x_1700;
  let x_1703 : bool = u_xlatb22.x;
  if (x_1703) {
    let x_1708 : f32 = u_xlat25.z;
    x_1704 = x_1708;
  } else {
    let x_1711 : f32 = x_66.unity_MatrixV[2i].z;
    x_1704 = x_1711;
  }
  let x_1712 : f32 = x_1704;
  u_xlat5.z = x_1712;
  let x_1721 : vec2<f32> = vs_INTERP5;
  let x_1723 : f32 = x_66.x_GlobalMipBias.x;
  let x_1724 : vec4<f32> = textureSampleBias(unity_Lightmap, samplerunity_Lightmap, x_1721, x_1723);
  u_xlat25 = vec3<f32>(x_1724.x, x_1724.y, x_1724.z);
  let x_1727 : vec4<f32> = x_66.x_ScaledScreenParams;
  let x_1728 : vec2<f32> = vec2<f32>(x_1727.x, x_1727.y);
  let x_1732 : vec2<f32> = (vec2<f32>(1.0f, 1.0f) / vec2<f32>(x_1728.x, x_1728.y));
  let x_1733 : vec3<f32> = u_xlat22;
  u_xlat22 = vec3<f32>(x_1732.x, x_1733.y, x_1732.y);
  let x_1735 : vec3<f32> = u_xlat22;
  let x_1737 : vec4<f32> = hlslcc_FragCoord;
  let x_1739 : vec2<f32> = (vec2<f32>(x_1735.x, x_1735.z) * vec2<f32>(x_1737.x, x_1737.y));
  let x_1740 : vec4<f32> = u_xlat6;
  u_xlat6 = vec4<f32>(x_1739.x, x_1739.y, x_1740.z, x_1740.w);
  let x_1743 : f32 = u_xlat6.y;
  let x_1746 : f32 = x_66.x_ScaleBiasRt.x;
  let x_1749 : f32 = x_66.x_ScaleBiasRt.y;
  u_xlat22.x = ((x_1743 * x_1746) + x_1749);
  let x_1753 : f32 = u_xlat22.x;
  u_xlat6.z = (-(x_1753) + 1.0f);
  let x_1758 : f32 = u_xlat3.x;
  u_xlat3.x = x_1758;
  let x_1761 : f32 = u_xlat3.x;
  u_xlat3.x = clamp(x_1761, 0.0f, 1.0f);
  let x_1765 : f32 = u_xlat1.x;
  u_xlat1.x = min(x_1765, 1.0f);
  let x_1768 : vec3<f32> = u_xlat2;
  u_xlat2 = (x_1768 * vec3<f32>(0.959999979f, 0.959999979f, 0.959999979f));
  let x_1773 : f32 = u_xlat3.x;
  u_xlat22.x = (-(x_1773) + 1.0f);
  let x_1778 : f32 = u_xlat22.x;
  let x_1780 : f32 = u_xlat22.x;
  u_xlat64 = (x_1778 * x_1780);
  let x_1782 : f32 = u_xlat64;
  u_xlat64 = max(x_1782, 0.0078125f);
  let x_1785 : f32 = u_xlat64;
  let x_1786 : f32 = u_xlat64;
  u_xlat65 = (x_1785 * x_1786);
  let x_1789 : f32 = u_xlat3.x;
  u_xlat3.x = (x_1789 + 0.040000021f);
  let x_1794 : f32 = u_xlat3.x;
  u_xlat3.x = min(x_1794, 1.0f);
  let x_1798 : f32 = u_xlat64;
  u_xlat68 = ((x_1798 * 4.0f) + 2.0f);
  let x_1807 : vec4<f32> = u_xlat6;
  let x_1810 : f32 = x_66.x_GlobalMipBias.x;
  let x_1811 : vec4<f32> = textureSampleBias(x_ScreenSpaceOcclusionTexture, sampler_ScreenSpaceOcclusionTexture, vec2<f32>(x_1807.x, x_1807.z), x_1810);
  u_xlat6.x = x_1811.x;
  let x_1815 : f32 = u_xlat6.x;
  u_xlat27.x = (x_1815 + -1.0f);
  let x_1820 : f32 = x_66.x_AmbientOcclusionParam.w;
  let x_1822 : f32 = u_xlat27.x;
  u_xlat27.x = ((x_1820 * x_1822) + 1.0f);
  let x_1827 : f32 = u_xlat6.x;
  let x_1829 : f32 = vs_INTERP4.w;
  u_xlat6.x = min(x_1827, x_1829);
  let x_1832 : bool = u_xlatb63;
  if (x_1832) {
    let x_1836 : f32 = x_139.x_MainLightShadowParams.y;
    u_xlatb63 = (x_1836 == 1.0f);
    let x_1838 : bool = u_xlatb63;
    if (x_1838) {
      let x_1842 : vec4<f32> = vs_INTERP9;
      let x_1845 : vec4<f32> = x_139.x_MainLightShadowOffset0;
      u_xlat7 = (vec4<f32>(x_1842.x, x_1842.y, x_1842.x, x_1842.y) + x_1845);
      let x_1848 : vec4<f32> = u_xlat7;
      let x_1849 : vec2<f32> = vec2<f32>(x_1848.x, x_1848.y);
      let x_1851 : f32 = vs_INTERP9.z;
      txVec30 = vec3<f32>(x_1849.x, x_1849.y, x_1851);
      let x_1858 : vec3<f32> = txVec30;
      let x_1860 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1858.xy, x_1858.z);
      u_xlat8.x = x_1860;
      let x_1863 : vec4<f32> = u_xlat7;
      let x_1864 : vec2<f32> = vec2<f32>(x_1863.z, x_1863.w);
      let x_1866 : f32 = vs_INTERP9.z;
      txVec31 = vec3<f32>(x_1864.x, x_1864.y, x_1866);
      let x_1873 : vec3<f32> = txVec31;
      let x_1875 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1873.xy, x_1873.z);
      u_xlat8.y = x_1875;
      let x_1877 : vec4<f32> = vs_INTERP9;
      let x_1880 : vec4<f32> = x_139.x_MainLightShadowOffset1;
      u_xlat7 = (vec4<f32>(x_1877.x, x_1877.y, x_1877.x, x_1877.y) + x_1880);
      let x_1883 : vec4<f32> = u_xlat7;
      let x_1884 : vec2<f32> = vec2<f32>(x_1883.x, x_1883.y);
      let x_1886 : f32 = vs_INTERP9.z;
      txVec32 = vec3<f32>(x_1884.x, x_1884.y, x_1886);
      let x_1893 : vec3<f32> = txVec32;
      let x_1895 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1893.xy, x_1893.z);
      u_xlat8.z = x_1895;
      let x_1898 : vec4<f32> = u_xlat7;
      let x_1899 : vec2<f32> = vec2<f32>(x_1898.z, x_1898.w);
      let x_1901 : f32 = vs_INTERP9.z;
      txVec33 = vec3<f32>(x_1899.x, x_1899.y, x_1901);
      let x_1908 : vec3<f32> = txVec33;
      let x_1910 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1908.xy, x_1908.z);
      u_xlat8.w = x_1910;
      let x_1912 : vec4<f32> = u_xlat8;
      u_xlat63 = dot(x_1912, vec4<f32>(0.25f, 0.25f, 0.25f, 0.25f));
    } else {
      let x_1919 : f32 = x_139.x_MainLightShadowParams.y;
      u_xlatb48.x = (x_1919 == 2.0f);
      let x_1923 : bool = u_xlatb48.x;
      if (x_1923) {
        let x_1927 : vec4<f32> = vs_INTERP9;
        let x_1930 : vec4<f32> = x_139.x_MainLightShadowmapSize;
        u_xlat48 = ((vec2<f32>(x_1927.x, x_1927.y) * vec2<f32>(x_1930.z, x_1930.w)) + vec2<f32>(0.5f, 0.5f));
        let x_1934 : vec2<f32> = u_xlat48;
        u_xlat48 = floor(x_1934);
        let x_1936 : vec4<f32> = vs_INTERP9;
        let x_1939 : vec4<f32> = x_139.x_MainLightShadowmapSize;
        let x_1942 : vec2<f32> = u_xlat48;
        let x_1944 : vec2<f32> = ((vec2<f32>(x_1936.x, x_1936.y) * vec2<f32>(x_1939.z, x_1939.w)) + -(x_1942));
        let x_1945 : vec4<f32> = u_xlat7;
        u_xlat7 = vec4<f32>(x_1944.x, x_1944.y, x_1945.z, x_1945.w);
        let x_1947 : vec4<f32> = u_xlat7;
        u_xlat8 = (vec4<f32>(x_1947.x, x_1947.x, x_1947.y, x_1947.y) + vec4<f32>(0.5f, 1.0f, 0.5f, 1.0f));
        let x_1950 : vec4<f32> = u_xlat8;
        let x_1952 : vec4<f32> = u_xlat8;
        u_xlat9 = (vec4<f32>(x_1950.x, x_1950.x, x_1950.z, x_1950.z) * vec4<f32>(x_1952.x, x_1952.x, x_1952.z, x_1952.z));
        let x_1955 : vec4<f32> = u_xlat9;
        u_xlat49 = (vec2<f32>(x_1955.y, x_1955.w) * vec2<f32>(0.079999998f, 0.079999998f));
        let x_1958 : vec4<f32> = u_xlat9;
        let x_1961 : vec4<f32> = u_xlat7;
        let x_1964 : vec2<f32> = ((vec2<f32>(x_1958.x, x_1958.z) * vec2<f32>(0.5f, 0.5f)) + -(vec2<f32>(x_1961.x, x_1961.y)));
        let x_1965 : vec4<f32> = u_xlat8;
        u_xlat8 = vec4<f32>(x_1964.x, x_1965.y, x_1964.y, x_1965.w);
        let x_1967 : vec4<f32> = u_xlat7;
        let x_1970 : vec2<f32> = (-(vec2<f32>(x_1967.x, x_1967.y)) + vec2<f32>(1.0f, 1.0f));
        let x_1971 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_1970.x, x_1970.y, x_1971.z, x_1971.w);
        let x_1974 : vec4<f32> = u_xlat7;
        u_xlat51 = min(vec2<f32>(x_1974.x, x_1974.y), vec2<f32>(0.0f, 0.0f));
        let x_1977 : vec2<f32> = u_xlat51;
        let x_1979 : vec2<f32> = u_xlat51;
        let x_1981 : vec4<f32> = u_xlat9;
        u_xlat51 = ((-(x_1977) * x_1979) + vec2<f32>(x_1981.x, x_1981.y));
        let x_1984 : vec4<f32> = u_xlat7;
        let x_1986 : vec2<f32> = max(vec2<f32>(x_1984.x, x_1984.y), vec2<f32>(0.0f, 0.0f));
        let x_1987 : vec4<f32> = u_xlat7;
        u_xlat7 = vec4<f32>(x_1986.x, x_1986.y, x_1987.z, x_1987.w);
        let x_1989 : vec4<f32> = u_xlat7;
        let x_1992 : vec4<f32> = u_xlat7;
        let x_1995 : vec4<f32> = u_xlat8;
        let x_1997 : vec2<f32> = ((-(vec2<f32>(x_1989.x, x_1989.y)) * vec2<f32>(x_1992.x, x_1992.y)) + vec2<f32>(x_1995.y, x_1995.w));
        let x_1998 : vec4<f32> = u_xlat7;
        u_xlat7 = vec4<f32>(x_1997.x, x_1997.y, x_1998.z, x_1998.w);
        let x_2000 : vec2<f32> = u_xlat51;
        u_xlat51 = (x_2000 + vec2<f32>(1.0f, 1.0f));
        let x_2002 : vec4<f32> = u_xlat7;
        let x_2004 : vec2<f32> = (vec2<f32>(x_2002.x, x_2002.y) + vec2<f32>(1.0f, 1.0f));
        let x_2005 : vec4<f32> = u_xlat7;
        u_xlat7 = vec4<f32>(x_2004.x, x_2004.y, x_2005.z, x_2005.w);
        let x_2007 : vec4<f32> = u_xlat8;
        let x_2009 : vec2<f32> = (vec2<f32>(x_2007.x, x_2007.z) * vec2<f32>(0.159999996f, 0.159999996f));
        let x_2010 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_2009.x, x_2009.y, x_2010.z, x_2010.w);
        let x_2012 : vec4<f32> = u_xlat9;
        let x_2014 : vec2<f32> = (vec2<f32>(x_2012.x, x_2012.y) * vec2<f32>(0.159999996f, 0.159999996f));
        let x_2015 : vec4<f32> = u_xlat11;
        u_xlat11 = vec4<f32>(x_2014.x, x_2014.y, x_2015.z, x_2015.w);
        let x_2017 : vec2<f32> = u_xlat51;
        let x_2018 : vec2<f32> = (x_2017 * vec2<f32>(0.159999996f, 0.159999996f));
        let x_2019 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_2018.x, x_2018.y, x_2019.z, x_2019.w);
        let x_2021 : vec4<f32> = u_xlat7;
        let x_2023 : vec2<f32> = (vec2<f32>(x_2021.x, x_2021.y) * vec2<f32>(0.159999996f, 0.159999996f));
        let x_2024 : vec4<f32> = u_xlat12;
        u_xlat12 = vec4<f32>(x_2023.x, x_2023.y, x_2024.z, x_2024.w);
        let x_2026 : vec4<f32> = u_xlat8;
        let x_2028 : vec2<f32> = (vec2<f32>(x_2026.y, x_2026.w) * vec2<f32>(0.159999996f, 0.159999996f));
        let x_2029 : vec4<f32> = u_xlat7;
        u_xlat7 = vec4<f32>(x_2028.x, x_2028.y, x_2029.z, x_2029.w);
        let x_2032 : f32 = u_xlat9.x;
        u_xlat10.z = x_2032;
        let x_2035 : f32 = u_xlat7.x;
        u_xlat10.w = x_2035;
        let x_2038 : f32 = u_xlat12.x;
        u_xlat11.z = x_2038;
        let x_2041 : f32 = u_xlat49.x;
        u_xlat11.w = x_2041;
        let x_2043 : vec4<f32> = u_xlat10;
        let x_2045 : vec4<f32> = u_xlat11;
        u_xlat8 = (vec4<f32>(x_2043.z, x_2043.w, x_2043.x, x_2043.z) + vec4<f32>(x_2045.z, x_2045.w, x_2045.x, x_2045.z));
        let x_2049 : f32 = u_xlat10.y;
        u_xlat9.z = x_2049;
        let x_2052 : f32 = u_xlat7.y;
        u_xlat9.w = x_2052;
        let x_2055 : f32 = u_xlat11.y;
        u_xlat12.z = x_2055;
        let x_2058 : f32 = u_xlat49.y;
        u_xlat12.w = x_2058;
        let x_2060 : vec4<f32> = u_xlat9;
        let x_2062 : vec4<f32> = u_xlat12;
        let x_2064 : vec3<f32> = (vec3<f32>(x_2060.z, x_2060.y, x_2060.w) + vec3<f32>(x_2062.z, x_2062.y, x_2062.w));
        let x_2065 : vec4<f32> = u_xlat7;
        u_xlat7 = vec4<f32>(x_2064.x, x_2064.y, x_2064.z, x_2065.w);
        let x_2067 : vec4<f32> = u_xlat11;
        let x_2069 : vec4<f32> = u_xlat8;
        let x_2071 : vec3<f32> = (vec3<f32>(x_2067.x, x_2067.z, x_2067.w) / vec3<f32>(x_2069.z, x_2069.w, x_2069.y));
        let x_2072 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_2071.x, x_2071.y, x_2071.z, x_2072.w);
        let x_2074 : vec4<f32> = u_xlat9;
        let x_2076 : vec3<f32> = (vec3<f32>(x_2074.x, x_2074.y, x_2074.z) + vec3<f32>(-2.5f, -0.5f, 1.5f));
        let x_2077 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_2076.x, x_2076.y, x_2076.z, x_2077.w);
        let x_2079 : vec4<f32> = u_xlat12;
        let x_2081 : vec4<f32> = u_xlat7;
        let x_2083 : vec3<f32> = (vec3<f32>(x_2079.z, x_2079.y, x_2079.w) / vec3<f32>(x_2081.x, x_2081.y, x_2081.z));
        let x_2084 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_2083.x, x_2083.y, x_2083.z, x_2084.w);
        let x_2086 : vec4<f32> = u_xlat10;
        let x_2088 : vec3<f32> = (vec3<f32>(x_2086.x, x_2086.y, x_2086.z) + vec3<f32>(-2.5f, -0.5f, 1.5f));
        let x_2089 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_2088.x, x_2088.y, x_2088.z, x_2089.w);
        let x_2091 : vec4<f32> = u_xlat9;
        let x_2094 : vec4<f32> = x_139.x_MainLightShadowmapSize;
        let x_2096 : vec3<f32> = (vec3<f32>(x_2091.y, x_2091.x, x_2091.z) * vec3<f32>(x_2094.x, x_2094.x, x_2094.x));
        let x_2097 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_2096.x, x_2096.y, x_2096.z, x_2097.w);
        let x_2099 : vec4<f32> = u_xlat10;
        let x_2102 : vec4<f32> = x_139.x_MainLightShadowmapSize;
        let x_2104 : vec3<f32> = (vec3<f32>(x_2099.x, x_2099.y, x_2099.z) * vec3<f32>(x_2102.y, x_2102.y, x_2102.y));
        let x_2105 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_2104.x, x_2104.y, x_2104.z, x_2105.w);
        let x_2108 : f32 = u_xlat10.x;
        u_xlat9.w = x_2108;
        let x_2110 : vec2<f32> = u_xlat48;
        let x_2113 : vec4<f32> = x_139.x_MainLightShadowmapSize;
        let x_2116 : vec4<f32> = u_xlat9;
        u_xlat11 = ((vec4<f32>(x_2110.x, x_2110.y, x_2110.x, x_2110.y) * vec4<f32>(x_2113.x, x_2113.y, x_2113.x, x_2113.y)) + vec4<f32>(x_2116.y, x_2116.w, x_2116.x, x_2116.w));
        let x_2119 : vec2<f32> = u_xlat48;
        let x_2121 : vec4<f32> = x_139.x_MainLightShadowmapSize;
        let x_2124 : vec4<f32> = u_xlat9;
        let x_2126 : vec2<f32> = ((x_2119 * vec2<f32>(x_2121.x, x_2121.y)) + vec2<f32>(x_2124.z, x_2124.w));
        let x_2127 : vec4<f32> = u_xlat12;
        u_xlat12 = vec4<f32>(x_2126.x, x_2126.y, x_2127.z, x_2127.w);
        let x_2130 : f32 = u_xlat9.y;
        u_xlat10.w = x_2130;
        let x_2132 : vec4<f32> = u_xlat10;
        let x_2133 : vec2<f32> = vec2<f32>(x_2132.y, x_2132.z);
        let x_2134 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_2134.x, x_2133.x, x_2134.z, x_2133.y);
        let x_2136 : vec2<f32> = u_xlat48;
        let x_2139 : vec4<f32> = x_139.x_MainLightShadowmapSize;
        let x_2142 : vec4<f32> = u_xlat9;
        u_xlat13 = ((vec4<f32>(x_2136.x, x_2136.y, x_2136.x, x_2136.y) * vec4<f32>(x_2139.x, x_2139.y, x_2139.x, x_2139.y)) + vec4<f32>(x_2142.x, x_2142.y, x_2142.z, x_2142.y));
        let x_2145 : vec2<f32> = u_xlat48;
        let x_2148 : vec4<f32> = x_139.x_MainLightShadowmapSize;
        let x_2151 : vec4<f32> = u_xlat10;
        u_xlat10 = ((vec4<f32>(x_2145.x, x_2145.y, x_2145.x, x_2145.y) * vec4<f32>(x_2148.x, x_2148.y, x_2148.x, x_2148.y)) + vec4<f32>(x_2151.w, x_2151.y, x_2151.w, x_2151.z));
        let x_2154 : vec2<f32> = u_xlat48;
        let x_2157 : vec4<f32> = x_139.x_MainLightShadowmapSize;
        let x_2160 : vec4<f32> = u_xlat9;
        u_xlat9 = ((vec4<f32>(x_2154.x, x_2154.y, x_2154.x, x_2154.y) * vec4<f32>(x_2157.x, x_2157.y, x_2157.x, x_2157.y)) + vec4<f32>(x_2160.x, x_2160.w, x_2160.z, x_2160.w));
        let x_2163 : vec4<f32> = u_xlat7;
        let x_2165 : vec4<f32> = u_xlat8;
        u_xlat14 = (vec4<f32>(x_2163.x, x_2163.x, x_2163.x, x_2163.y) * vec4<f32>(x_2165.z, x_2165.w, x_2165.y, x_2165.z));
        let x_2168 : vec4<f32> = u_xlat7;
        let x_2170 : vec4<f32> = u_xlat8;
        u_xlat15 = (vec4<f32>(x_2168.y, x_2168.y, x_2168.z, x_2168.z) * x_2170);
        let x_2173 : f32 = u_xlat7.z;
        let x_2175 : f32 = u_xlat8.y;
        u_xlat48.x = (x_2173 * x_2175);
        let x_2179 : vec4<f32> = u_xlat11;
        let x_2180 : vec2<f32> = vec2<f32>(x_2179.x, x_2179.y);
        let x_2182 : f32 = vs_INTERP9.z;
        txVec34 = vec3<f32>(x_2180.x, x_2180.y, x_2182);
        let x_2190 : vec3<f32> = txVec34;
        let x_2192 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2190.xy, x_2190.z);
        u_xlat69 = x_2192;
        let x_2194 : vec4<f32> = u_xlat11;
        let x_2195 : vec2<f32> = vec2<f32>(x_2194.z, x_2194.w);
        let x_2197 : f32 = vs_INTERP9.z;
        txVec35 = vec3<f32>(x_2195.x, x_2195.y, x_2197);
        let x_2204 : vec3<f32> = txVec35;
        let x_2206 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2204.xy, x_2204.z);
        u_xlat7.x = x_2206;
        let x_2209 : f32 = u_xlat7.x;
        let x_2211 : f32 = u_xlat14.y;
        u_xlat7.x = (x_2209 * x_2211);
        let x_2215 : f32 = u_xlat14.x;
        let x_2216 : f32 = u_xlat69;
        let x_2219 : f32 = u_xlat7.x;
        u_xlat69 = ((x_2215 * x_2216) + x_2219);
        let x_2222 : vec4<f32> = u_xlat12;
        let x_2223 : vec2<f32> = vec2<f32>(x_2222.x, x_2222.y);
        let x_2225 : f32 = vs_INTERP9.z;
        txVec36 = vec3<f32>(x_2223.x, x_2223.y, x_2225);
        let x_2232 : vec3<f32> = txVec36;
        let x_2234 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2232.xy, x_2232.z);
        u_xlat7.x = x_2234;
        let x_2237 : f32 = u_xlat14.z;
        let x_2239 : f32 = u_xlat7.x;
        let x_2241 : f32 = u_xlat69;
        u_xlat69 = ((x_2237 * x_2239) + x_2241);
        let x_2244 : vec4<f32> = u_xlat10;
        let x_2245 : vec2<f32> = vec2<f32>(x_2244.x, x_2244.y);
        let x_2247 : f32 = vs_INTERP9.z;
        txVec37 = vec3<f32>(x_2245.x, x_2245.y, x_2247);
        let x_2254 : vec3<f32> = txVec37;
        let x_2256 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2254.xy, x_2254.z);
        u_xlat7.x = x_2256;
        let x_2259 : f32 = u_xlat14.w;
        let x_2261 : f32 = u_xlat7.x;
        let x_2263 : f32 = u_xlat69;
        u_xlat69 = ((x_2259 * x_2261) + x_2263);
        let x_2266 : vec4<f32> = u_xlat13;
        let x_2267 : vec2<f32> = vec2<f32>(x_2266.x, x_2266.y);
        let x_2269 : f32 = vs_INTERP9.z;
        txVec38 = vec3<f32>(x_2267.x, x_2267.y, x_2269);
        let x_2276 : vec3<f32> = txVec38;
        let x_2278 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2276.xy, x_2276.z);
        u_xlat7.x = x_2278;
        let x_2281 : f32 = u_xlat15.x;
        let x_2283 : f32 = u_xlat7.x;
        let x_2285 : f32 = u_xlat69;
        u_xlat69 = ((x_2281 * x_2283) + x_2285);
        let x_2288 : vec4<f32> = u_xlat13;
        let x_2289 : vec2<f32> = vec2<f32>(x_2288.z, x_2288.w);
        let x_2291 : f32 = vs_INTERP9.z;
        txVec39 = vec3<f32>(x_2289.x, x_2289.y, x_2291);
        let x_2298 : vec3<f32> = txVec39;
        let x_2300 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2298.xy, x_2298.z);
        u_xlat7.x = x_2300;
        let x_2303 : f32 = u_xlat15.y;
        let x_2305 : f32 = u_xlat7.x;
        let x_2307 : f32 = u_xlat69;
        u_xlat69 = ((x_2303 * x_2305) + x_2307);
        let x_2310 : vec4<f32> = u_xlat10;
        let x_2311 : vec2<f32> = vec2<f32>(x_2310.z, x_2310.w);
        let x_2313 : f32 = vs_INTERP9.z;
        txVec40 = vec3<f32>(x_2311.x, x_2311.y, x_2313);
        let x_2320 : vec3<f32> = txVec40;
        let x_2322 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2320.xy, x_2320.z);
        u_xlat7.x = x_2322;
        let x_2325 : f32 = u_xlat15.z;
        let x_2327 : f32 = u_xlat7.x;
        let x_2329 : f32 = u_xlat69;
        u_xlat69 = ((x_2325 * x_2327) + x_2329);
        let x_2332 : vec4<f32> = u_xlat9;
        let x_2333 : vec2<f32> = vec2<f32>(x_2332.x, x_2332.y);
        let x_2335 : f32 = vs_INTERP9.z;
        txVec41 = vec3<f32>(x_2333.x, x_2333.y, x_2335);
        let x_2342 : vec3<f32> = txVec41;
        let x_2344 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2342.xy, x_2342.z);
        u_xlat7.x = x_2344;
        let x_2347 : f32 = u_xlat15.w;
        let x_2349 : f32 = u_xlat7.x;
        let x_2351 : f32 = u_xlat69;
        u_xlat69 = ((x_2347 * x_2349) + x_2351);
        let x_2354 : vec4<f32> = u_xlat9;
        let x_2355 : vec2<f32> = vec2<f32>(x_2354.z, x_2354.w);
        let x_2357 : f32 = vs_INTERP9.z;
        txVec42 = vec3<f32>(x_2355.x, x_2355.y, x_2357);
        let x_2364 : vec3<f32> = txVec42;
        let x_2366 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2364.xy, x_2364.z);
        u_xlat7.x = x_2366;
        let x_2369 : f32 = u_xlat48.x;
        let x_2371 : f32 = u_xlat7.x;
        let x_2373 : f32 = u_xlat69;
        u_xlat63 = ((x_2369 * x_2371) + x_2373);
      } else {
        let x_2376 : vec4<f32> = vs_INTERP9;
        let x_2379 : vec4<f32> = x_139.x_MainLightShadowmapSize;
        u_xlat48 = ((vec2<f32>(x_2376.x, x_2376.y) * vec2<f32>(x_2379.z, x_2379.w)) + vec2<f32>(0.5f, 0.5f));
        let x_2383 : vec2<f32> = u_xlat48;
        u_xlat48 = floor(x_2383);
        let x_2385 : vec4<f32> = vs_INTERP9;
        let x_2388 : vec4<f32> = x_139.x_MainLightShadowmapSize;
        let x_2391 : vec2<f32> = u_xlat48;
        let x_2393 : vec2<f32> = ((vec2<f32>(x_2385.x, x_2385.y) * vec2<f32>(x_2388.z, x_2388.w)) + -(x_2391));
        let x_2394 : vec4<f32> = u_xlat7;
        u_xlat7 = vec4<f32>(x_2393.x, x_2393.y, x_2394.z, x_2394.w);
        let x_2396 : vec4<f32> = u_xlat7;
        u_xlat8 = (vec4<f32>(x_2396.x, x_2396.x, x_2396.y, x_2396.y) + vec4<f32>(0.5f, 1.0f, 0.5f, 1.0f));
        let x_2399 : vec4<f32> = u_xlat8;
        let x_2401 : vec4<f32> = u_xlat8;
        u_xlat9 = (vec4<f32>(x_2399.x, x_2399.x, x_2399.z, x_2399.z) * vec4<f32>(x_2401.x, x_2401.x, x_2401.z, x_2401.z));
        let x_2404 : vec4<f32> = u_xlat9;
        let x_2406 : vec2<f32> = (vec2<f32>(x_2404.y, x_2404.w) * vec2<f32>(0.040816002f, 0.040816002f));
        let x_2407 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_2407.x, x_2406.x, x_2407.z, x_2406.y);
        let x_2409 : vec4<f32> = u_xlat9;
        let x_2412 : vec4<f32> = u_xlat7;
        u_xlat49 = ((vec2<f32>(x_2409.x, x_2409.z) * vec2<f32>(0.5f, 0.5f)) + -(vec2<f32>(x_2412.x, x_2412.y)));
        let x_2416 : vec4<f32> = u_xlat7;
        let x_2419 : vec2<f32> = (-(vec2<f32>(x_2416.x, x_2416.y)) + vec2<f32>(1.0f, 1.0f));
        let x_2420 : vec4<f32> = u_xlat8;
        u_xlat8 = vec4<f32>(x_2419.x, x_2420.y, x_2419.y, x_2420.w);
        let x_2422 : vec4<f32> = u_xlat7;
        let x_2424 : vec2<f32> = min(vec2<f32>(x_2422.x, x_2422.y), vec2<f32>(0.0f, 0.0f));
        let x_2425 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_2424.x, x_2424.y, x_2425.z, x_2425.w);
        let x_2427 : vec4<f32> = u_xlat9;
        let x_2430 : vec4<f32> = u_xlat9;
        let x_2433 : vec4<f32> = u_xlat8;
        let x_2435 : vec2<f32> = ((-(vec2<f32>(x_2427.x, x_2427.y)) * vec2<f32>(x_2430.x, x_2430.y)) + vec2<f32>(x_2433.x, x_2433.z));
        let x_2436 : vec4<f32> = u_xlat8;
        u_xlat8 = vec4<f32>(x_2435.x, x_2436.y, x_2435.y, x_2436.w);
        let x_2438 : vec4<f32> = u_xlat7;
        let x_2440 : vec2<f32> = max(vec2<f32>(x_2438.x, x_2438.y), vec2<f32>(0.0f, 0.0f));
        let x_2441 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_2440.x, x_2440.y, x_2441.z, x_2441.w);
        let x_2443 : vec4<f32> = u_xlat9;
        let x_2446 : vec4<f32> = u_xlat9;
        let x_2449 : vec4<f32> = u_xlat8;
        let x_2451 : vec2<f32> = ((-(vec2<f32>(x_2443.x, x_2443.y)) * vec2<f32>(x_2446.x, x_2446.y)) + vec2<f32>(x_2449.y, x_2449.w));
        let x_2452 : vec4<f32> = u_xlat8;
        u_xlat8 = vec4<f32>(x_2452.x, x_2451.x, x_2452.z, x_2451.y);
        let x_2454 : vec4<f32> = u_xlat8;
        u_xlat8 = (x_2454 + vec4<f32>(2.0f, 2.0f, 2.0f, 2.0f));
        let x_2457 : f32 = u_xlat8.y;
        u_xlat9.z = (x_2457 * 0.081632003f);
        let x_2460 : vec2<f32> = u_xlat49;
        let x_2462 : vec2<f32> = (vec2<f32>(x_2460.y, x_2460.x) * vec2<f32>(0.081632003f, 0.081632003f));
        let x_2463 : vec4<f32> = u_xlat11;
        u_xlat11 = vec4<f32>(x_2462.x, x_2462.y, x_2463.z, x_2463.w);
        let x_2465 : vec4<f32> = u_xlat8;
        u_xlat49 = (vec2<f32>(x_2465.x, x_2465.z) * vec2<f32>(0.081632003f, 0.081632003f));
        let x_2469 : f32 = u_xlat8.w;
        u_xlat11.z = (x_2469 * 0.081632003f);
        let x_2473 : f32 = u_xlat11.y;
        u_xlat9.x = x_2473;
        let x_2475 : vec4<f32> = u_xlat7;
        let x_2478 : vec2<f32> = ((vec2<f32>(x_2475.x, x_2475.x) * vec2<f32>(-0.081632003f, 0.081632003f)) + vec2<f32>(0.163264006f, 0.081632003f));
        let x_2479 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_2479.x, x_2478.x, x_2479.z, x_2478.y);
        let x_2481 : vec4<f32> = u_xlat7;
        let x_2484 : vec2<f32> = ((vec2<f32>(x_2481.x, x_2481.x) * vec2<f32>(-0.081632003f, 0.081632003f)) + vec2<f32>(0.081632003f, 0.163264006f));
        let x_2485 : vec4<f32> = u_xlat8;
        u_xlat8 = vec4<f32>(x_2484.x, x_2485.y, x_2484.y, x_2485.w);
        let x_2488 : f32 = u_xlat49.x;
        u_xlat8.y = x_2488;
        let x_2491 : f32 = u_xlat10.y;
        u_xlat8.w = x_2491;
        let x_2493 : vec4<f32> = u_xlat8;
        let x_2494 : vec4<f32> = u_xlat9;
        u_xlat9 = (x_2493 + x_2494);
        let x_2496 : vec4<f32> = u_xlat7;
        let x_2499 : vec2<f32> = ((vec2<f32>(x_2496.y, x_2496.y) * vec2<f32>(-0.081632003f, 0.081632003f)) + vec2<f32>(0.163264006f, 0.081632003f));
        let x_2500 : vec4<f32> = u_xlat11;
        u_xlat11 = vec4<f32>(x_2500.x, x_2499.x, x_2500.z, x_2499.y);
        let x_2502 : vec4<f32> = u_xlat7;
        let x_2505 : vec2<f32> = ((vec2<f32>(x_2502.y, x_2502.y) * vec2<f32>(-0.081632003f, 0.081632003f)) + vec2<f32>(0.081632003f, 0.163264006f));
        let x_2506 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_2505.x, x_2506.y, x_2505.y, x_2506.w);
        let x_2509 : f32 = u_xlat49.y;
        u_xlat10.y = x_2509;
        let x_2511 : vec4<f32> = u_xlat10;
        let x_2512 : vec4<f32> = u_xlat11;
        u_xlat7 = (x_2511 + x_2512);
        let x_2514 : vec4<f32> = u_xlat8;
        let x_2515 : vec4<f32> = u_xlat9;
        u_xlat8 = (x_2514 / x_2515);
        let x_2517 : vec4<f32> = u_xlat8;
        u_xlat8 = (x_2517 + vec4<f32>(-3.5f, -1.5f, 0.5f, 2.5f));
        let x_2519 : vec4<f32> = u_xlat10;
        let x_2520 : vec4<f32> = u_xlat7;
        u_xlat10 = (x_2519 / x_2520);
        let x_2522 : vec4<f32> = u_xlat10;
        u_xlat10 = (x_2522 + vec4<f32>(-3.5f, -1.5f, 0.5f, 2.5f));
        let x_2524 : vec4<f32> = u_xlat8;
        let x_2527 : vec4<f32> = x_139.x_MainLightShadowmapSize;
        u_xlat8 = (vec4<f32>(x_2524.w, x_2524.x, x_2524.y, x_2524.z) * vec4<f32>(x_2527.x, x_2527.x, x_2527.x, x_2527.x));
        let x_2530 : vec4<f32> = u_xlat10;
        let x_2533 : vec4<f32> = x_139.x_MainLightShadowmapSize;
        u_xlat10 = (vec4<f32>(x_2530.x, x_2530.w, x_2530.y, x_2530.z) * vec4<f32>(x_2533.y, x_2533.y, x_2533.y, x_2533.y));
        let x_2536 : vec4<f32> = u_xlat8;
        let x_2537 : vec3<f32> = vec3<f32>(x_2536.y, x_2536.z, x_2536.w);
        let x_2538 : vec4<f32> = u_xlat11;
        u_xlat11 = vec4<f32>(x_2537.x, x_2538.y, x_2537.y, x_2537.z);
        let x_2541 : f32 = u_xlat10.x;
        u_xlat11.y = x_2541;
        let x_2543 : vec2<f32> = u_xlat48;
        let x_2546 : vec4<f32> = x_139.x_MainLightShadowmapSize;
        let x_2549 : vec4<f32> = u_xlat11;
        u_xlat12 = ((vec4<f32>(x_2543.x, x_2543.y, x_2543.x, x_2543.y) * vec4<f32>(x_2546.x, x_2546.y, x_2546.x, x_2546.y)) + vec4<f32>(x_2549.x, x_2549.y, x_2549.z, x_2549.y));
        let x_2552 : vec2<f32> = u_xlat48;
        let x_2554 : vec4<f32> = x_139.x_MainLightShadowmapSize;
        let x_2557 : vec4<f32> = u_xlat11;
        let x_2559 : vec2<f32> = ((x_2552 * vec2<f32>(x_2554.x, x_2554.y)) + vec2<f32>(x_2557.w, x_2557.y));
        let x_2560 : vec4<f32> = u_xlat13;
        u_xlat13 = vec4<f32>(x_2559.x, x_2559.y, x_2560.z, x_2560.w);
        let x_2563 : f32 = u_xlat11.y;
        u_xlat8.y = x_2563;
        let x_2566 : f32 = u_xlat10.z;
        u_xlat11.y = x_2566;
        let x_2568 : vec2<f32> = u_xlat48;
        let x_2571 : vec4<f32> = x_139.x_MainLightShadowmapSize;
        let x_2574 : vec4<f32> = u_xlat11;
        u_xlat14 = ((vec4<f32>(x_2568.x, x_2568.y, x_2568.x, x_2568.y) * vec4<f32>(x_2571.x, x_2571.y, x_2571.x, x_2571.y)) + vec4<f32>(x_2574.x, x_2574.y, x_2574.z, x_2574.y));
        let x_2577 : vec2<f32> = u_xlat48;
        let x_2579 : vec4<f32> = x_139.x_MainLightShadowmapSize;
        let x_2582 : vec4<f32> = u_xlat11;
        u_xlat55 = ((x_2577 * vec2<f32>(x_2579.x, x_2579.y)) + vec2<f32>(x_2582.w, x_2582.y));
        let x_2586 : f32 = u_xlat11.y;
        u_xlat8.z = x_2586;
        let x_2588 : vec2<f32> = u_xlat48;
        let x_2591 : vec4<f32> = x_139.x_MainLightShadowmapSize;
        let x_2594 : vec4<f32> = u_xlat8;
        u_xlat15 = ((vec4<f32>(x_2588.x, x_2588.y, x_2588.x, x_2588.y) * vec4<f32>(x_2591.x, x_2591.y, x_2591.x, x_2591.y)) + vec4<f32>(x_2594.x, x_2594.y, x_2594.x, x_2594.z));
        let x_2598 : f32 = u_xlat10.w;
        u_xlat11.y = x_2598;
        let x_2600 : vec2<f32> = u_xlat48;
        let x_2603 : vec4<f32> = x_139.x_MainLightShadowmapSize;
        let x_2606 : vec4<f32> = u_xlat11;
        u_xlat16 = ((vec4<f32>(x_2600.x, x_2600.y, x_2600.x, x_2600.y) * vec4<f32>(x_2603.x, x_2603.y, x_2603.x, x_2603.y)) + vec4<f32>(x_2606.x, x_2606.y, x_2606.z, x_2606.y));
        let x_2610 : vec2<f32> = u_xlat48;
        let x_2612 : vec4<f32> = x_139.x_MainLightShadowmapSize;
        let x_2615 : vec4<f32> = u_xlat11;
        u_xlat29 = ((x_2610 * vec2<f32>(x_2612.x, x_2612.y)) + vec2<f32>(x_2615.w, x_2615.y));
        let x_2619 : f32 = u_xlat11.y;
        u_xlat8.w = x_2619;
        let x_2621 : vec2<f32> = u_xlat48;
        let x_2623 : vec4<f32> = x_139.x_MainLightShadowmapSize;
        let x_2626 : vec4<f32> = u_xlat8;
        let x_2628 : vec2<f32> = ((x_2621 * vec2<f32>(x_2623.x, x_2623.y)) + vec2<f32>(x_2626.x, x_2626.w));
        let x_2629 : vec4<f32> = u_xlat17;
        u_xlat17 = vec4<f32>(x_2628.x, x_2628.y, x_2629.z, x_2629.w);
        let x_2631 : vec4<f32> = u_xlat11;
        let x_2632 : vec3<f32> = vec3<f32>(x_2631.x, x_2631.z, x_2631.w);
        let x_2633 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_2632.x, x_2633.y, x_2632.y, x_2632.z);
        let x_2635 : vec2<f32> = u_xlat48;
        let x_2638 : vec4<f32> = x_139.x_MainLightShadowmapSize;
        let x_2641 : vec4<f32> = u_xlat10;
        u_xlat11 = ((vec4<f32>(x_2635.x, x_2635.y, x_2635.x, x_2635.y) * vec4<f32>(x_2638.x, x_2638.y, x_2638.x, x_2638.y)) + vec4<f32>(x_2641.x, x_2641.y, x_2641.z, x_2641.y));
        let x_2645 : vec2<f32> = u_xlat48;
        let x_2647 : vec4<f32> = x_139.x_MainLightShadowmapSize;
        let x_2650 : vec4<f32> = u_xlat10;
        u_xlat52 = ((x_2645 * vec2<f32>(x_2647.x, x_2647.y)) + vec2<f32>(x_2650.w, x_2650.y));
        let x_2654 : f32 = u_xlat8.x;
        u_xlat10.x = x_2654;
        let x_2656 : vec2<f32> = u_xlat48;
        let x_2658 : vec4<f32> = x_139.x_MainLightShadowmapSize;
        let x_2661 : vec4<f32> = u_xlat10;
        u_xlat48 = ((x_2656 * vec2<f32>(x_2658.x, x_2658.y)) + vec2<f32>(x_2661.x, x_2661.y));
        let x_2664 : vec4<f32> = u_xlat7;
        let x_2666 : vec4<f32> = u_xlat9;
        u_xlat18 = (vec4<f32>(x_2664.x, x_2664.x, x_2664.x, x_2664.x) * x_2666);
        let x_2669 : vec4<f32> = u_xlat7;
        let x_2671 : vec4<f32> = u_xlat9;
        u_xlat19 = (vec4<f32>(x_2669.y, x_2669.y, x_2669.y, x_2669.y) * x_2671);
        let x_2674 : vec4<f32> = u_xlat7;
        let x_2676 : vec4<f32> = u_xlat9;
        u_xlat20 = (vec4<f32>(x_2674.z, x_2674.z, x_2674.z, x_2674.z) * x_2676);
        let x_2678 : vec4<f32> = u_xlat7;
        let x_2680 : vec4<f32> = u_xlat9;
        u_xlat7 = (vec4<f32>(x_2678.w, x_2678.w, x_2678.w, x_2678.w) * x_2680);
        let x_2683 : vec4<f32> = u_xlat12;
        let x_2684 : vec2<f32> = vec2<f32>(x_2683.x, x_2683.y);
        let x_2686 : f32 = vs_INTERP9.z;
        txVec43 = vec3<f32>(x_2684.x, x_2684.y, x_2686);
        let x_2693 : vec3<f32> = txVec43;
        let x_2695 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2693.xy, x_2693.z);
        u_xlat8.x = x_2695;
        let x_2698 : vec4<f32> = u_xlat12;
        let x_2699 : vec2<f32> = vec2<f32>(x_2698.z, x_2698.w);
        let x_2701 : f32 = vs_INTERP9.z;
        txVec44 = vec3<f32>(x_2699.x, x_2699.y, x_2701);
        let x_2709 : vec3<f32> = txVec44;
        let x_2711 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2709.xy, x_2709.z);
        u_xlat71 = x_2711;
        let x_2712 : f32 = u_xlat71;
        let x_2714 : f32 = u_xlat18.y;
        u_xlat71 = (x_2712 * x_2714);
        let x_2717 : f32 = u_xlat18.x;
        let x_2719 : f32 = u_xlat8.x;
        let x_2721 : f32 = u_xlat71;
        u_xlat8.x = ((x_2717 * x_2719) + x_2721);
        let x_2725 : vec4<f32> = u_xlat13;
        let x_2726 : vec2<f32> = vec2<f32>(x_2725.x, x_2725.y);
        let x_2728 : f32 = vs_INTERP9.z;
        txVec45 = vec3<f32>(x_2726.x, x_2726.y, x_2728);
        let x_2735 : vec3<f32> = txVec45;
        let x_2737 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2735.xy, x_2735.z);
        u_xlat71 = x_2737;
        let x_2739 : f32 = u_xlat18.z;
        let x_2740 : f32 = u_xlat71;
        let x_2743 : f32 = u_xlat8.x;
        u_xlat8.x = ((x_2739 * x_2740) + x_2743);
        let x_2747 : vec4<f32> = u_xlat15;
        let x_2748 : vec2<f32> = vec2<f32>(x_2747.x, x_2747.y);
        let x_2750 : f32 = vs_INTERP9.z;
        txVec46 = vec3<f32>(x_2748.x, x_2748.y, x_2750);
        let x_2757 : vec3<f32> = txVec46;
        let x_2759 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2757.xy, x_2757.z);
        u_xlat71 = x_2759;
        let x_2761 : f32 = u_xlat18.w;
        let x_2762 : f32 = u_xlat71;
        let x_2765 : f32 = u_xlat8.x;
        u_xlat8.x = ((x_2761 * x_2762) + x_2765);
        let x_2769 : vec4<f32> = u_xlat14;
        let x_2770 : vec2<f32> = vec2<f32>(x_2769.x, x_2769.y);
        let x_2772 : f32 = vs_INTERP9.z;
        txVec47 = vec3<f32>(x_2770.x, x_2770.y, x_2772);
        let x_2779 : vec3<f32> = txVec47;
        let x_2781 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2779.xy, x_2779.z);
        u_xlat71 = x_2781;
        let x_2783 : f32 = u_xlat19.x;
        let x_2784 : f32 = u_xlat71;
        let x_2787 : f32 = u_xlat8.x;
        u_xlat8.x = ((x_2783 * x_2784) + x_2787);
        let x_2791 : vec4<f32> = u_xlat14;
        let x_2792 : vec2<f32> = vec2<f32>(x_2791.z, x_2791.w);
        let x_2794 : f32 = vs_INTERP9.z;
        txVec48 = vec3<f32>(x_2792.x, x_2792.y, x_2794);
        let x_2801 : vec3<f32> = txVec48;
        let x_2803 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2801.xy, x_2801.z);
        u_xlat71 = x_2803;
        let x_2805 : f32 = u_xlat19.y;
        let x_2806 : f32 = u_xlat71;
        let x_2809 : f32 = u_xlat8.x;
        u_xlat8.x = ((x_2805 * x_2806) + x_2809);
        let x_2813 : vec2<f32> = u_xlat55;
        let x_2815 : f32 = vs_INTERP9.z;
        txVec49 = vec3<f32>(x_2813.x, x_2813.y, x_2815);
        let x_2822 : vec3<f32> = txVec49;
        let x_2824 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2822.xy, x_2822.z);
        u_xlat71 = x_2824;
        let x_2826 : f32 = u_xlat19.z;
        let x_2827 : f32 = u_xlat71;
        let x_2830 : f32 = u_xlat8.x;
        u_xlat8.x = ((x_2826 * x_2827) + x_2830);
        let x_2834 : vec4<f32> = u_xlat15;
        let x_2835 : vec2<f32> = vec2<f32>(x_2834.z, x_2834.w);
        let x_2837 : f32 = vs_INTERP9.z;
        txVec50 = vec3<f32>(x_2835.x, x_2835.y, x_2837);
        let x_2844 : vec3<f32> = txVec50;
        let x_2846 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2844.xy, x_2844.z);
        u_xlat71 = x_2846;
        let x_2848 : f32 = u_xlat19.w;
        let x_2849 : f32 = u_xlat71;
        let x_2852 : f32 = u_xlat8.x;
        u_xlat8.x = ((x_2848 * x_2849) + x_2852);
        let x_2856 : vec4<f32> = u_xlat16;
        let x_2857 : vec2<f32> = vec2<f32>(x_2856.x, x_2856.y);
        let x_2859 : f32 = vs_INTERP9.z;
        txVec51 = vec3<f32>(x_2857.x, x_2857.y, x_2859);
        let x_2866 : vec3<f32> = txVec51;
        let x_2868 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2866.xy, x_2866.z);
        u_xlat71 = x_2868;
        let x_2870 : f32 = u_xlat20.x;
        let x_2871 : f32 = u_xlat71;
        let x_2874 : f32 = u_xlat8.x;
        u_xlat8.x = ((x_2870 * x_2871) + x_2874);
        let x_2878 : vec4<f32> = u_xlat16;
        let x_2879 : vec2<f32> = vec2<f32>(x_2878.z, x_2878.w);
        let x_2881 : f32 = vs_INTERP9.z;
        txVec52 = vec3<f32>(x_2879.x, x_2879.y, x_2881);
        let x_2888 : vec3<f32> = txVec52;
        let x_2890 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2888.xy, x_2888.z);
        u_xlat71 = x_2890;
        let x_2892 : f32 = u_xlat20.y;
        let x_2893 : f32 = u_xlat71;
        let x_2896 : f32 = u_xlat8.x;
        u_xlat8.x = ((x_2892 * x_2893) + x_2896);
        let x_2900 : vec2<f32> = u_xlat29;
        let x_2902 : f32 = vs_INTERP9.z;
        txVec53 = vec3<f32>(x_2900.x, x_2900.y, x_2902);
        let x_2909 : vec3<f32> = txVec53;
        let x_2911 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2909.xy, x_2909.z);
        u_xlat29.x = x_2911;
        let x_2914 : f32 = u_xlat20.z;
        let x_2916 : f32 = u_xlat29.x;
        let x_2919 : f32 = u_xlat8.x;
        u_xlat8.x = ((x_2914 * x_2916) + x_2919);
        let x_2923 : vec4<f32> = u_xlat17;
        let x_2924 : vec2<f32> = vec2<f32>(x_2923.x, x_2923.y);
        let x_2926 : f32 = vs_INTERP9.z;
        txVec54 = vec3<f32>(x_2924.x, x_2924.y, x_2926);
        let x_2933 : vec3<f32> = txVec54;
        let x_2935 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2933.xy, x_2933.z);
        u_xlat29.x = x_2935;
        let x_2938 : f32 = u_xlat20.w;
        let x_2940 : f32 = u_xlat29.x;
        let x_2943 : f32 = u_xlat8.x;
        u_xlat8.x = ((x_2938 * x_2940) + x_2943);
        let x_2947 : vec4<f32> = u_xlat11;
        let x_2948 : vec2<f32> = vec2<f32>(x_2947.x, x_2947.y);
        let x_2950 : f32 = vs_INTERP9.z;
        txVec55 = vec3<f32>(x_2948.x, x_2948.y, x_2950);
        let x_2957 : vec3<f32> = txVec55;
        let x_2959 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2957.xy, x_2957.z);
        u_xlat29.x = x_2959;
        let x_2962 : f32 = u_xlat7.x;
        let x_2964 : f32 = u_xlat29.x;
        let x_2967 : f32 = u_xlat8.x;
        u_xlat7.x = ((x_2962 * x_2964) + x_2967);
        let x_2971 : vec4<f32> = u_xlat11;
        let x_2972 : vec2<f32> = vec2<f32>(x_2971.z, x_2971.w);
        let x_2974 : f32 = vs_INTERP9.z;
        txVec56 = vec3<f32>(x_2972.x, x_2972.y, x_2974);
        let x_2981 : vec3<f32> = txVec56;
        let x_2983 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2981.xy, x_2981.z);
        u_xlat8.x = x_2983;
        let x_2986 : f32 = u_xlat7.y;
        let x_2988 : f32 = u_xlat8.x;
        let x_2991 : f32 = u_xlat7.x;
        u_xlat7.x = ((x_2986 * x_2988) + x_2991);
        let x_2995 : vec2<f32> = u_xlat52;
        let x_2997 : f32 = vs_INTERP9.z;
        txVec57 = vec3<f32>(x_2995.x, x_2995.y, x_2997);
        let x_3004 : vec3<f32> = txVec57;
        let x_3006 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_3004.xy, x_3004.z);
        u_xlat28.x = x_3006;
        let x_3009 : f32 = u_xlat7.z;
        let x_3011 : f32 = u_xlat28.x;
        let x_3014 : f32 = u_xlat7.x;
        u_xlat7.x = ((x_3009 * x_3011) + x_3014);
        let x_3018 : vec2<f32> = u_xlat48;
        let x_3020 : f32 = vs_INTERP9.z;
        txVec58 = vec3<f32>(x_3018.x, x_3018.y, x_3020);
        let x_3027 : vec3<f32> = txVec58;
        let x_3029 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_3027.xy, x_3027.z);
        u_xlat48.x = x_3029;
        let x_3032 : f32 = u_xlat7.w;
        let x_3034 : f32 = u_xlat48.x;
        let x_3037 : f32 = u_xlat7.x;
        u_xlat63 = ((x_3032 * x_3034) + x_3037);
      }
    }
  } else {
    let x_3041 : vec4<f32> = vs_INTERP9;
    let x_3042 : vec2<f32> = vec2<f32>(x_3041.x, x_3041.y);
    let x_3044 : f32 = vs_INTERP9.z;
    txVec59 = vec3<f32>(x_3042.x, x_3042.y, x_3044);
    let x_3051 : vec3<f32> = txVec59;
    let x_3053 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_3051.xy, x_3051.z);
    u_xlat63 = x_3053;
  }
  let x_3054 : f32 = u_xlat63;
  let x_3056 : f32 = x_139.x_MainLightShadowParams.x;
  let x_3059 : f32 = u_xlat4.x;
  u_xlat63 = ((x_3054 * x_3056) + x_3059);
  let x_3063 : f32 = vs_INTERP9.z;
  u_xlatb4 = (0.0f >= x_3063);
  let x_3066 : f32 = vs_INTERP9.z;
  u_xlatb48.x = (x_3066 >= 1.0f);
  let x_3069 : bool = u_xlatb4;
  let x_3071 : bool = u_xlatb48.x;
  u_xlatb4 = (x_3069 | x_3071);
  let x_3073 : bool = u_xlatb4;
  let x_3074 : f32 = u_xlat63;
  u_xlat63 = select(x_3074, 1.0f, x_3073);
  let x_3076 : vec3<f32> = vs_INTERP0;
  let x_3078 : vec3<f32> = x_66.x_WorldSpaceCameraPos;
  let x_3080 : vec3<f32> = (x_3076 + -(x_3078));
  let x_3081 : vec4<f32> = u_xlat7;
  u_xlat7 = vec4<f32>(x_3080.x, x_3080.y, x_3080.z, x_3081.w);
  let x_3083 : vec4<f32> = u_xlat7;
  let x_3085 : vec4<f32> = u_xlat7;
  u_xlat4.x = dot(vec3<f32>(x_3083.x, x_3083.y, x_3083.z), vec3<f32>(x_3085.x, x_3085.y, x_3085.z));
  let x_3090 : f32 = u_xlat4.x;
  let x_3092 : f32 = x_139.x_MainLightShadowParams.z;
  let x_3095 : f32 = x_139.x_MainLightShadowParams.w;
  u_xlat4.x = ((x_3090 * x_3092) + x_3095);
  let x_3099 : f32 = u_xlat4.x;
  u_xlat4.x = clamp(x_3099, 0.0f, 1.0f);
  let x_3102 : f32 = u_xlat63;
  u_xlat48.x = (-(x_3102) + 1.0f);
  let x_3107 : f32 = u_xlat4.x;
  let x_3109 : f32 = u_xlat48.x;
  let x_3111 : f32 = u_xlat63;
  u_xlat63 = ((x_3107 * x_3109) + x_3111);
  let x_3119 : f32 = x_3117.x_MainLightCookieTextureFormat;
  u_xlatb4 = !((x_3119 == -1.0f));
  let x_3121 : bool = u_xlatb4;
  if (x_3121) {
    let x_3124 : vec3<f32> = vs_INTERP0;
    let x_3127 : vec4<f32> = x_3117.x_MainLightWorldToLight[1i];
    u_xlat48 = (vec2<f32>(x_3124.y, x_3124.y) * vec2<f32>(x_3127.x, x_3127.y));
    let x_3131 : vec4<f32> = x_3117.x_MainLightWorldToLight[0i];
    let x_3133 : vec3<f32> = vs_INTERP0;
    let x_3136 : vec2<f32> = u_xlat48;
    u_xlat48 = ((vec2<f32>(x_3131.x, x_3131.y) * vec2<f32>(x_3133.x, x_3133.x)) + x_3136);
    let x_3139 : vec4<f32> = x_3117.x_MainLightWorldToLight[2i];
    let x_3141 : vec3<f32> = vs_INTERP0;
    let x_3144 : vec2<f32> = u_xlat48;
    u_xlat48 = ((vec2<f32>(x_3139.x, x_3139.y) * vec2<f32>(x_3141.z, x_3141.z)) + x_3144);
    let x_3146 : vec2<f32> = u_xlat48;
    let x_3148 : vec4<f32> = x_3117.x_MainLightWorldToLight[3i];
    u_xlat48 = (x_3146 + vec2<f32>(x_3148.x, x_3148.y));
    let x_3151 : vec2<f32> = u_xlat48;
    u_xlat48 = ((x_3151 * vec2<f32>(0.5f, 0.5f)) + vec2<f32>(0.5f, 0.5f));
    let x_3159 : vec2<f32> = u_xlat48;
    let x_3161 : f32 = x_66.x_GlobalMipBias.x;
    let x_3162 : vec4<f32> = textureSampleBias(x_MainLightCookieTexture, sampler_MainLightCookieTexture, x_3159, x_3161);
    u_xlat7 = x_3162;
    let x_3164 : f32 = x_3117.x_MainLightCookieTextureFormat;
    let x_3166 : f32 = x_3117.x_MainLightCookieTextureFormat;
    let x_3168 : f32 = x_3117.x_MainLightCookieTextureFormat;
    let x_3170 : f32 = x_3117.x_MainLightCookieTextureFormat;
    let x_3171 : vec4<f32> = vec4<f32>(x_3164, x_3166, x_3168, x_3170);
    let x_3179 : vec4<bool> = (vec4<f32>(x_3171.x, x_3171.y, x_3171.z, x_3171.w) == vec4<f32>(0.0f, 1.0f, 0.0f, 1.0f));
    u_xlatb48 = vec2<bool>(x_3179.x, x_3179.y);
    let x_3182 : bool = u_xlatb48.y;
    if (x_3182) {
      let x_3187 : f32 = u_xlat7.w;
      x_3183 = x_3187;
    } else {
      let x_3190 : f32 = u_xlat7.x;
      x_3183 = x_3190;
    }
    let x_3191 : f32 = x_3183;
    u_xlat4.x = x_3191;
    let x_3194 : bool = u_xlatb48.x;
    if (x_3194) {
      let x_3198 : vec4<f32> = u_xlat7;
      x_3195 = vec3<f32>(x_3198.x, x_3198.y, x_3198.z);
    } else {
      let x_3201 : vec4<f32> = u_xlat4;
      x_3195 = vec3<f32>(x_3201.x, x_3201.x, x_3201.x);
    }
    let x_3203 : vec3<f32> = x_3195;
    let x_3204 : vec4<f32> = u_xlat7;
    u_xlat7 = vec4<f32>(x_3203.x, x_3203.y, x_3203.z, x_3204.w);
  } else {
    u_xlat7.x = 1.0f;
    u_xlat7.y = 1.0f;
    u_xlat7.z = 1.0f;
  }
  let x_3210 : vec4<f32> = u_xlat7;
  let x_3213 : vec4<f32> = x_66.x_MainLightColor;
  let x_3215 : vec3<f32> = (vec3<f32>(x_3210.x, x_3210.y, x_3210.z) * vec3<f32>(x_3213.x, x_3213.y, x_3213.z));
  let x_3216 : vec4<f32> = u_xlat7;
  u_xlat7 = vec4<f32>(x_3215.x, x_3215.y, x_3215.z, x_3216.w);
  let x_3218 : vec3<f32> = u_xlat27;
  let x_3220 : vec4<f32> = u_xlat7;
  let x_3222 : vec3<f32> = (vec3<f32>(x_3218.x, x_3218.x, x_3218.x) * vec3<f32>(x_3220.x, x_3220.y, x_3220.z));
  let x_3223 : vec4<f32> = u_xlat7;
  u_xlat7 = vec4<f32>(x_3222.x, x_3222.y, x_3222.z, x_3223.w);
  let x_3225 : vec4<f32> = u_xlat5;
  let x_3228 : vec3<f32> = u_xlat24;
  u_xlat4.x = dot(-(vec3<f32>(x_3225.x, x_3225.y, x_3225.z)), x_3228);
  let x_3232 : f32 = u_xlat4.x;
  let x_3234 : f32 = u_xlat4.x;
  u_xlat4.x = (x_3232 + x_3234);
  let x_3237 : vec3<f32> = u_xlat24;
  let x_3238 : vec4<f32> = u_xlat4;
  let x_3242 : vec4<f32> = u_xlat5;
  let x_3245 : vec3<f32> = ((x_3237 * -(vec3<f32>(x_3238.x, x_3238.x, x_3238.x))) + -(vec3<f32>(x_3242.x, x_3242.y, x_3242.z)));
  let x_3246 : vec4<f32> = u_xlat8;
  u_xlat8 = vec4<f32>(x_3245.x, x_3245.y, x_3245.z, x_3246.w);
  let x_3248 : vec3<f32> = u_xlat24;
  let x_3249 : vec4<f32> = u_xlat5;
  u_xlat4.x = dot(x_3248, vec3<f32>(x_3249.x, x_3249.y, x_3249.z));
  let x_3254 : f32 = u_xlat4.x;
  u_xlat4.x = clamp(x_3254, 0.0f, 1.0f);
  let x_3258 : f32 = u_xlat4.x;
  u_xlat4.x = (-(x_3258) + 1.0f);
  let x_3263 : f32 = u_xlat4.x;
  let x_3265 : f32 = u_xlat4.x;
  u_xlat4.x = (x_3263 * x_3265);
  let x_3269 : f32 = u_xlat4.x;
  let x_3271 : f32 = u_xlat4.x;
  u_xlat4.x = (x_3269 * x_3271);
  let x_3275 : f32 = u_xlat22.x;
  u_xlat48.x = ((-(x_3275) * 0.699999988f) + 1.700000048f);
  let x_3283 : f32 = u_xlat22.x;
  let x_3285 : f32 = u_xlat48.x;
  u_xlat22.x = (x_3283 * x_3285);
  let x_3289 : f32 = u_xlat22.x;
  u_xlat22.x = (x_3289 * 6.0f);
  let x_3301 : vec4<f32> = u_xlat8;
  let x_3304 : f32 = u_xlat22.x;
  let x_3305 : vec4<f32> = textureSampleLevel(unity_SpecCube0, samplerunity_SpecCube0, vec3<f32>(x_3301.x, x_3301.y, x_3301.z), x_3304);
  u_xlat8 = x_3305;
  let x_3307 : f32 = u_xlat8.w;
  u_xlat22.x = (x_3307 + -1.0f);
  let x_3311 : f32 = x_1592.unity_SpecCube0_HDR.w;
  let x_3313 : f32 = u_xlat22.x;
  u_xlat22.x = ((x_3311 * x_3313) + 1.0f);
  let x_3318 : f32 = u_xlat22.x;
  u_xlat22.x = max(x_3318, 0.0f);
  let x_3322 : f32 = u_xlat22.x;
  u_xlat22.x = log2(x_3322);
  let x_3326 : f32 = u_xlat22.x;
  let x_3328 : f32 = x_1592.unity_SpecCube0_HDR.y;
  u_xlat22.x = (x_3326 * x_3328);
  let x_3332 : f32 = u_xlat22.x;
  u_xlat22.x = exp2(x_3332);
  let x_3336 : f32 = u_xlat22.x;
  let x_3338 : f32 = x_1592.unity_SpecCube0_HDR.x;
  u_xlat22.x = (x_3336 * x_3338);
  let x_3341 : vec4<f32> = u_xlat8;
  let x_3343 : vec3<f32> = u_xlat22;
  let x_3345 : vec3<f32> = (vec3<f32>(x_3341.x, x_3341.y, x_3341.z) * vec3<f32>(x_3343.x, x_3343.x, x_3343.x));
  let x_3346 : vec4<f32> = u_xlat8;
  u_xlat8 = vec4<f32>(x_3345.x, x_3345.y, x_3345.z, x_3346.w);
  let x_3348 : f32 = u_xlat64;
  let x_3350 : f32 = u_xlat64;
  let x_3354 : vec2<f32> = ((vec2<f32>(x_3348, x_3348) * vec2<f32>(x_3350, x_3350)) + vec2<f32>(-1.0f, 1.0f));
  let x_3355 : vec3<f32> = u_xlat22;
  u_xlat22 = vec3<f32>(x_3354.x, x_3355.y, x_3354.y);
  let x_3358 : f32 = u_xlat22.z;
  u_xlat64 = (1.0f / x_3358);
  let x_3361 : f32 = u_xlat3.x;
  u_xlat3.x = (x_3361 + -0.039999999f);
  let x_3366 : f32 = u_xlat4.x;
  let x_3368 : f32 = u_xlat3.x;
  u_xlat3.x = ((x_3366 * x_3368) + 0.039999999f);
  let x_3373 : f32 = u_xlat64;
  let x_3375 : f32 = u_xlat3.x;
  u_xlat64 = (x_3373 * x_3375);
  let x_3377 : f32 = u_xlat64;
  let x_3379 : vec4<f32> = u_xlat8;
  let x_3381 : vec3<f32> = (vec3<f32>(x_3377, x_3377, x_3377) * vec3<f32>(x_3379.x, x_3379.y, x_3379.z));
  let x_3382 : vec4<f32> = u_xlat8;
  u_xlat8 = vec4<f32>(x_3381.x, x_3381.y, x_3381.z, x_3382.w);
  let x_3384 : vec3<f32> = u_xlat25;
  let x_3385 : vec3<f32> = u_xlat2;
  let x_3387 : vec4<f32> = u_xlat8;
  let x_3389 : vec3<f32> = ((x_3384 * x_3385) + vec3<f32>(x_3387.x, x_3387.y, x_3387.z));
  let x_3390 : vec4<f32> = u_xlat4;
  u_xlat4 = vec4<f32>(x_3389.x, x_3389.y, x_3389.z, x_3390.w);
  let x_3392 : f32 = u_xlat63;
  let x_3394 : f32 = x_1592.unity_LightData.z;
  u_xlat63 = (x_3392 * x_3394);
  let x_3396 : vec3<f32> = u_xlat24;
  let x_3398 : vec4<f32> = x_66.x_MainLightPosition;
  u_xlat64 = dot(x_3396, vec3<f32>(x_3398.x, x_3398.y, x_3398.z));
  let x_3401 : f32 = u_xlat64;
  u_xlat64 = clamp(x_3401, 0.0f, 1.0f);
  let x_3403 : f32 = u_xlat63;
  let x_3404 : f32 = u_xlat64;
  u_xlat63 = (x_3403 * x_3404);
  let x_3406 : f32 = u_xlat63;
  let x_3408 : vec4<f32> = u_xlat7;
  let x_3410 : vec3<f32> = (vec3<f32>(x_3406, x_3406, x_3406) * vec3<f32>(x_3408.x, x_3408.y, x_3408.z));
  let x_3411 : vec4<f32> = u_xlat7;
  u_xlat7 = vec4<f32>(x_3410.x, x_3410.y, x_3410.z, x_3411.w);
  let x_3413 : vec4<f32> = u_xlat5;
  let x_3416 : vec4<f32> = x_66.x_MainLightPosition;
  let x_3418 : vec3<f32> = (vec3<f32>(x_3413.x, x_3413.y, x_3413.z) + vec3<f32>(x_3416.x, x_3416.y, x_3416.z));
  let x_3419 : vec4<f32> = u_xlat8;
  u_xlat8 = vec4<f32>(x_3418.x, x_3418.y, x_3418.z, x_3419.w);
  let x_3421 : vec4<f32> = u_xlat8;
  let x_3423 : vec4<f32> = u_xlat8;
  u_xlat63 = dot(vec3<f32>(x_3421.x, x_3421.y, x_3421.z), vec3<f32>(x_3423.x, x_3423.y, x_3423.z));
  let x_3426 : f32 = u_xlat63;
  u_xlat63 = max(x_3426, 1.17549435e-37f);
  let x_3429 : f32 = u_xlat63;
  u_xlat63 = inverseSqrt(x_3429);
  let x_3431 : f32 = u_xlat63;
  let x_3433 : vec4<f32> = u_xlat8;
  let x_3435 : vec3<f32> = (vec3<f32>(x_3431, x_3431, x_3431) * vec3<f32>(x_3433.x, x_3433.y, x_3433.z));
  let x_3436 : vec4<f32> = u_xlat8;
  u_xlat8 = vec4<f32>(x_3435.x, x_3435.y, x_3435.z, x_3436.w);
  let x_3438 : vec3<f32> = u_xlat24;
  let x_3439 : vec4<f32> = u_xlat8;
  u_xlat63 = dot(x_3438, vec3<f32>(x_3439.x, x_3439.y, x_3439.z));
  let x_3442 : f32 = u_xlat63;
  u_xlat63 = clamp(x_3442, 0.0f, 1.0f);
  let x_3445 : vec4<f32> = x_66.x_MainLightPosition;
  let x_3447 : vec4<f32> = u_xlat8;
  u_xlat64 = dot(vec3<f32>(x_3445.x, x_3445.y, x_3445.z), vec3<f32>(x_3447.x, x_3447.y, x_3447.z));
  let x_3450 : f32 = u_xlat64;
  u_xlat64 = clamp(x_3450, 0.0f, 1.0f);
  let x_3452 : f32 = u_xlat63;
  let x_3453 : f32 = u_xlat63;
  u_xlat63 = (x_3452 * x_3453);
  let x_3455 : f32 = u_xlat63;
  let x_3457 : f32 = u_xlat22.x;
  u_xlat63 = ((x_3455 * x_3457) + 1.000010014f);
  let x_3461 : f32 = u_xlat64;
  let x_3462 : f32 = u_xlat64;
  u_xlat64 = (x_3461 * x_3462);
  let x_3464 : f32 = u_xlat63;
  let x_3465 : f32 = u_xlat63;
  u_xlat63 = (x_3464 * x_3465);
  let x_3467 : f32 = u_xlat64;
  u_xlat64 = max(x_3467, 0.100000001f);
  let x_3470 : f32 = u_xlat63;
  let x_3471 : f32 = u_xlat64;
  u_xlat63 = (x_3470 * x_3471);
  let x_3473 : f32 = u_xlat68;
  let x_3474 : f32 = u_xlat63;
  u_xlat63 = (x_3473 * x_3474);
  let x_3476 : f32 = u_xlat65;
  let x_3477 : f32 = u_xlat63;
  u_xlat63 = (x_3476 / x_3477);
  let x_3479 : f32 = u_xlat63;
  let x_3483 : vec3<f32> = u_xlat2;
  let x_3484 : vec3<f32> = ((vec3<f32>(x_3479, x_3479, x_3479) * vec3<f32>(0.039999999f, 0.039999999f, 0.039999999f)) + x_3483);
  let x_3485 : vec4<f32> = u_xlat8;
  u_xlat8 = vec4<f32>(x_3484.x, x_3484.y, x_3484.z, x_3485.w);
  let x_3487 : vec4<f32> = u_xlat7;
  let x_3489 : vec4<f32> = u_xlat8;
  let x_3491 : vec3<f32> = (vec3<f32>(x_3487.x, x_3487.y, x_3487.z) * vec3<f32>(x_3489.x, x_3489.y, x_3489.z));
  let x_3492 : vec4<f32> = u_xlat7;
  u_xlat7 = vec4<f32>(x_3491.x, x_3491.y, x_3491.z, x_3492.w);
  let x_3495 : f32 = x_66.x_AdditionalLightsCount.x;
  let x_3497 : f32 = x_1592.unity_LightData.y;
  u_xlat63 = min(x_3495, x_3497);
  let x_3501 : f32 = u_xlat63;
  u_xlatu63 = bitcast<u32>(i32(x_3501));
  let x_3505 : f32 = x_3117.x_AdditionalLightsCookieAtlasTextureFormat;
  let x_3507 : f32 = x_3117.x_AdditionalLightsCookieAtlasTextureFormat;
  let x_3509 : f32 = x_3117.x_AdditionalLightsCookieAtlasTextureFormat;
  let x_3511 : f32 = x_3117.x_AdditionalLightsCookieAtlasTextureFormat;
  let x_3512 : vec4<f32> = vec4<f32>(x_3505, x_3507, x_3509, x_3511);
  let x_3518 : vec4<bool> = (vec4<f32>(x_3512.x, x_3512.y, x_3512.z, x_3512.w) == vec4<f32>(0.0f, 1.0f, 0.0f, 1.0f));
  u_xlatb48 = vec2<bool>(x_3518.x, x_3518.y);
  u_xlat8.x = 0.0f;
  u_xlat8.y = 0.0f;
  u_xlat8.z = 0.0f;
  u_xlatu_loop_1 = 0u;
  loop {
    let x_3529 : u32 = u_xlatu_loop_1;
    let x_3530 : u32 = u_xlatu63;
    if ((x_3529 < x_3530)) {
    } else {
      break;
    }
    let x_3533 : u32 = u_xlatu_loop_1;
    u_xlatu3 = (x_3533 >> 2u);
    let x_3537 : u32 = u_xlatu_loop_1;
    u_xlati67 = bitcast<i32>((x_3537 & 3u));
    let x_3540 : u32 = u_xlatu3;
    let x_3543 : vec4<f32> = x_1592.unity_LightIndices[bitcast<i32>(x_3540)];
    let x_3553 : i32 = u_xlati67;
    indexable = array<vec4<u32>, 4u>(vec4<u32>(1065353216u, 0u, 0u, 0u), vec4<u32>(0u, 1065353216u, 0u, 0u), vec4<u32>(0u, 0u, 1065353216u, 0u), vec4<u32>(0u, 0u, 0u, 1065353216u));
    let x_3558 : vec4<u32> = indexable[x_3553];
    u_xlat3.x = dot(x_3543, bitcast<vec4<f32>>(x_3558));
    let x_3563 : f32 = u_xlat3.x;
    u_xlatu3 = bitcast<u32>(i32(x_3563));
    let x_3566 : vec3<f32> = vs_INTERP0;
    let x_3578 : u32 = u_xlatu3;
    let x_3581 : vec4<f32> = x_3577.x_AdditionalLightsPosition[bitcast<i32>(x_3578)];
    let x_3584 : u32 = u_xlatu3;
    let x_3587 : vec4<f32> = x_3577.x_AdditionalLightsPosition[bitcast<i32>(x_3584)];
    let x_3589 : vec3<f32> = ((-(x_3566) * vec3<f32>(x_3581.w, x_3581.w, x_3581.w)) + vec3<f32>(x_3587.x, x_3587.y, x_3587.z));
    let x_3590 : vec4<f32> = u_xlat9;
    u_xlat9 = vec4<f32>(x_3589.x, x_3589.y, x_3589.z, x_3590.w);
    let x_3592 : vec4<f32> = u_xlat9;
    let x_3594 : vec4<f32> = u_xlat9;
    u_xlat67 = dot(vec3<f32>(x_3592.x, x_3592.y, x_3592.z), vec3<f32>(x_3594.x, x_3594.y, x_3594.z));
    let x_3597 : f32 = u_xlat67;
    u_xlat67 = max(x_3597, 6.10351562e-05f);
    let x_3601 : f32 = u_xlat67;
    u_xlat70 = inverseSqrt(x_3601);
    let x_3603 : f32 = u_xlat70;
    let x_3605 : vec4<f32> = u_xlat9;
    let x_3607 : vec3<f32> = (vec3<f32>(x_3603, x_3603, x_3603) * vec3<f32>(x_3605.x, x_3605.y, x_3605.z));
    let x_3608 : vec4<f32> = u_xlat10;
    u_xlat10 = vec4<f32>(x_3607.x, x_3607.y, x_3607.z, x_3608.w);
    let x_3610 : f32 = u_xlat67;
    u_xlat71 = (1.0f / x_3610);
    let x_3612 : f32 = u_xlat67;
    let x_3613 : u32 = u_xlatu3;
    let x_3616 : f32 = x_3577.x_AdditionalLightsAttenuation[bitcast<i32>(x_3613)].x;
    u_xlat67 = (x_3612 * x_3616);
    let x_3618 : f32 = u_xlat67;
    let x_3620 : f32 = u_xlat67;
    u_xlat67 = ((-(x_3618) * x_3620) + 1.0f);
    let x_3623 : f32 = u_xlat67;
    u_xlat67 = max(x_3623, 0.0f);
    let x_3625 : f32 = u_xlat67;
    let x_3626 : f32 = u_xlat67;
    u_xlat67 = (x_3625 * x_3626);
    let x_3628 : f32 = u_xlat67;
    let x_3629 : f32 = u_xlat71;
    u_xlat67 = (x_3628 * x_3629);
    let x_3631 : u32 = u_xlatu3;
    let x_3634 : vec4<f32> = x_3577.x_AdditionalLightsSpotDir[bitcast<i32>(x_3631)];
    let x_3636 : vec4<f32> = u_xlat10;
    u_xlat71 = dot(vec3<f32>(x_3634.x, x_3634.y, x_3634.z), vec3<f32>(x_3636.x, x_3636.y, x_3636.z));
    let x_3639 : f32 = u_xlat71;
    let x_3640 : u32 = u_xlatu3;
    let x_3643 : f32 = x_3577.x_AdditionalLightsAttenuation[bitcast<i32>(x_3640)].z;
    let x_3645 : u32 = u_xlatu3;
    let x_3648 : f32 = x_3577.x_AdditionalLightsAttenuation[bitcast<i32>(x_3645)].w;
    u_xlat71 = ((x_3639 * x_3643) + x_3648);
    let x_3650 : f32 = u_xlat71;
    u_xlat71 = clamp(x_3650, 0.0f, 1.0f);
    let x_3652 : f32 = u_xlat71;
    let x_3653 : f32 = u_xlat71;
    u_xlat71 = (x_3652 * x_3653);
    let x_3655 : f32 = u_xlat67;
    let x_3656 : f32 = u_xlat71;
    u_xlat67 = (x_3655 * x_3656);
    let x_3659 : u32 = u_xlatu3;
    u_xlatu71 = (x_3659 >> 5u);
    let x_3662 : u32 = u_xlatu3;
    u_xlati72 = (1i << bitcast<u32>((bitcast<i32>(x_3662) & 31i)));
    let x_3668 : i32 = u_xlati72;
    let x_3670 : u32 = u_xlatu71;
    let x_3673 : f32 = x_3117.x_AdditionalLightsCookieEnableBits[bitcast<i32>(x_3670)].el;
    u_xlati71 = bitcast<i32>((bitcast<u32>(x_3668) & bitcast<u32>(x_3673)));
    let x_3677 : i32 = u_xlati71;
    if ((x_3677 != 0i)) {
      let x_3687 : u32 = u_xlatu3;
      let x_3690 : f32 = x_3686.x_AdditionalLightsLightTypes[bitcast<i32>(x_3687)].el;
      u_xlati71 = i32(x_3690);
      let x_3692 : i32 = u_xlati71;
      u_xlati72 = select(1i, 0i, (x_3692 != 0i));
      let x_3696 : u32 = u_xlatu3;
      u_xlati73 = (bitcast<i32>(x_3696) << bitcast<u32>(2i));
      let x_3699 : i32 = u_xlati72;
      if ((x_3699 != 0i)) {
        let x_3703 : vec3<f32> = vs_INTERP0;
        let x_3705 : i32 = u_xlati73;
        let x_3708 : i32 = u_xlati73;
        let x_3712 : vec4<f32> = x_3686.x_AdditionalLightsWorldToLights[((x_3705 + 1i) / 4i)][((x_3708 + 1i) % 4i)];
        let x_3714 : vec3<f32> = (vec3<f32>(x_3703.y, x_3703.y, x_3703.y) * vec3<f32>(x_3712.x, x_3712.y, x_3712.w));
        let x_3715 : vec4<f32> = u_xlat11;
        u_xlat11 = vec4<f32>(x_3714.x, x_3714.y, x_3714.z, x_3715.w);
        let x_3717 : i32 = u_xlati73;
        let x_3719 : i32 = u_xlati73;
        let x_3722 : vec4<f32> = x_3686.x_AdditionalLightsWorldToLights[(x_3717 / 4i)][(x_3719 % 4i)];
        let x_3724 : vec3<f32> = vs_INTERP0;
        let x_3727 : vec4<f32> = u_xlat11;
        let x_3729 : vec3<f32> = ((vec3<f32>(x_3722.x, x_3722.y, x_3722.w) * vec3<f32>(x_3724.x, x_3724.x, x_3724.x)) + vec3<f32>(x_3727.x, x_3727.y, x_3727.z));
        let x_3730 : vec4<f32> = u_xlat11;
        u_xlat11 = vec4<f32>(x_3729.x, x_3729.y, x_3729.z, x_3730.w);
        let x_3732 : i32 = u_xlati73;
        let x_3735 : i32 = u_xlati73;
        let x_3739 : vec4<f32> = x_3686.x_AdditionalLightsWorldToLights[((x_3732 + 2i) / 4i)][((x_3735 + 2i) % 4i)];
        let x_3741 : vec3<f32> = vs_INTERP0;
        let x_3744 : vec4<f32> = u_xlat11;
        let x_3746 : vec3<f32> = ((vec3<f32>(x_3739.x, x_3739.y, x_3739.w) * vec3<f32>(x_3741.z, x_3741.z, x_3741.z)) + vec3<f32>(x_3744.x, x_3744.y, x_3744.z));
        let x_3747 : vec4<f32> = u_xlat11;
        u_xlat11 = vec4<f32>(x_3746.x, x_3746.y, x_3746.z, x_3747.w);
        let x_3749 : vec4<f32> = u_xlat11;
        let x_3751 : i32 = u_xlati73;
        let x_3754 : i32 = u_xlati73;
        let x_3758 : vec4<f32> = x_3686.x_AdditionalLightsWorldToLights[((x_3751 + 3i) / 4i)][((x_3754 + 3i) % 4i)];
        let x_3760 : vec3<f32> = (vec3<f32>(x_3749.x, x_3749.y, x_3749.z) + vec3<f32>(x_3758.x, x_3758.y, x_3758.w));
        let x_3761 : vec4<f32> = u_xlat11;
        u_xlat11 = vec4<f32>(x_3760.x, x_3760.y, x_3760.z, x_3761.w);
        let x_3763 : vec4<f32> = u_xlat11;
        let x_3765 : vec4<f32> = u_xlat11;
        let x_3767 : vec2<f32> = (vec2<f32>(x_3763.x, x_3763.y) / vec2<f32>(x_3765.z, x_3765.z));
        let x_3768 : vec4<f32> = u_xlat11;
        u_xlat11 = vec4<f32>(x_3767.x, x_3767.y, x_3768.z, x_3768.w);
        let x_3770 : vec4<f32> = u_xlat11;
        let x_3773 : vec2<f32> = ((vec2<f32>(x_3770.x, x_3770.y) * vec2<f32>(0.5f, 0.5f)) + vec2<f32>(0.5f, 0.5f));
        let x_3774 : vec4<f32> = u_xlat11;
        u_xlat11 = vec4<f32>(x_3773.x, x_3773.y, x_3774.z, x_3774.w);
        let x_3776 : vec4<f32> = u_xlat11;
        let x_3780 : vec2<f32> = clamp(vec2<f32>(x_3776.x, x_3776.y), vec2<f32>(0.0f, 0.0f), vec2<f32>(1.0f, 1.0f));
        let x_3781 : vec4<f32> = u_xlat11;
        u_xlat11 = vec4<f32>(x_3780.x, x_3780.y, x_3781.z, x_3781.w);
        let x_3783 : u32 = u_xlatu3;
        let x_3786 : vec4<f32> = x_3686.x_AdditionalLightsCookieAtlasUVRects[bitcast<i32>(x_3783)];
        let x_3788 : vec4<f32> = u_xlat11;
        let x_3791 : u32 = u_xlatu3;
        let x_3794 : vec4<f32> = x_3686.x_AdditionalLightsCookieAtlasUVRects[bitcast<i32>(x_3791)];
        let x_3796 : vec2<f32> = ((vec2<f32>(x_3786.x, x_3786.y) * vec2<f32>(x_3788.x, x_3788.y)) + vec2<f32>(x_3794.z, x_3794.w));
        let x_3797 : vec4<f32> = u_xlat11;
        u_xlat11 = vec4<f32>(x_3796.x, x_3796.y, x_3797.z, x_3797.w);
      } else {
        let x_3801 : i32 = u_xlati71;
        u_xlatb71 = (x_3801 == 1i);
        let x_3803 : bool = u_xlatb71;
        u_xlati71 = select(0i, 1i, x_3803);
        let x_3805 : i32 = u_xlati71;
        if ((x_3805 != 0i)) {
          let x_3810 : vec3<f32> = vs_INTERP0;
          let x_3812 : i32 = u_xlati73;
          let x_3815 : i32 = u_xlati73;
          let x_3819 : vec4<f32> = x_3686.x_AdditionalLightsWorldToLights[((x_3812 + 1i) / 4i)][((x_3815 + 1i) % 4i)];
          u_xlat53 = (vec2<f32>(x_3810.y, x_3810.y) * vec2<f32>(x_3819.x, x_3819.y));
          let x_3822 : i32 = u_xlati73;
          let x_3824 : i32 = u_xlati73;
          let x_3827 : vec4<f32> = x_3686.x_AdditionalLightsWorldToLights[(x_3822 / 4i)][(x_3824 % 4i)];
          let x_3829 : vec3<f32> = vs_INTERP0;
          let x_3832 : vec2<f32> = u_xlat53;
          u_xlat53 = ((vec2<f32>(x_3827.x, x_3827.y) * vec2<f32>(x_3829.x, x_3829.x)) + x_3832);
          let x_3834 : i32 = u_xlati73;
          let x_3837 : i32 = u_xlati73;
          let x_3841 : vec4<f32> = x_3686.x_AdditionalLightsWorldToLights[((x_3834 + 2i) / 4i)][((x_3837 + 2i) % 4i)];
          let x_3843 : vec3<f32> = vs_INTERP0;
          let x_3846 : vec2<f32> = u_xlat53;
          u_xlat53 = ((vec2<f32>(x_3841.x, x_3841.y) * vec2<f32>(x_3843.z, x_3843.z)) + x_3846);
          let x_3848 : vec2<f32> = u_xlat53;
          let x_3849 : i32 = u_xlati73;
          let x_3852 : i32 = u_xlati73;
          let x_3856 : vec4<f32> = x_3686.x_AdditionalLightsWorldToLights[((x_3849 + 3i) / 4i)][((x_3852 + 3i) % 4i)];
          u_xlat53 = (x_3848 + vec2<f32>(x_3856.x, x_3856.y));
          let x_3859 : vec2<f32> = u_xlat53;
          u_xlat53 = ((x_3859 * vec2<f32>(0.5f, 0.5f)) + vec2<f32>(0.5f, 0.5f));
          let x_3862 : vec2<f32> = u_xlat53;
          u_xlat53 = fract(x_3862);
          let x_3864 : u32 = u_xlatu3;
          let x_3867 : vec4<f32> = x_3686.x_AdditionalLightsCookieAtlasUVRects[bitcast<i32>(x_3864)];
          let x_3869 : vec2<f32> = u_xlat53;
          let x_3871 : u32 = u_xlatu3;
          let x_3874 : vec4<f32> = x_3686.x_AdditionalLightsCookieAtlasUVRects[bitcast<i32>(x_3871)];
          let x_3876 : vec2<f32> = ((vec2<f32>(x_3867.x, x_3867.y) * x_3869) + vec2<f32>(x_3874.z, x_3874.w));
          let x_3877 : vec4<f32> = u_xlat11;
          u_xlat11 = vec4<f32>(x_3876.x, x_3876.y, x_3877.z, x_3877.w);
        } else {
          let x_3880 : vec3<f32> = vs_INTERP0;
          let x_3882 : i32 = u_xlati73;
          let x_3885 : i32 = u_xlati73;
          let x_3889 : vec4<f32> = x_3686.x_AdditionalLightsWorldToLights[((x_3882 + 1i) / 4i)][((x_3885 + 1i) % 4i)];
          u_xlat12 = (vec4<f32>(x_3880.y, x_3880.y, x_3880.y, x_3880.y) * x_3889);
          let x_3891 : i32 = u_xlati73;
          let x_3893 : i32 = u_xlati73;
          let x_3896 : vec4<f32> = x_3686.x_AdditionalLightsWorldToLights[(x_3891 / 4i)][(x_3893 % 4i)];
          let x_3897 : vec3<f32> = vs_INTERP0;
          let x_3900 : vec4<f32> = u_xlat12;
          u_xlat12 = ((x_3896 * vec4<f32>(x_3897.x, x_3897.x, x_3897.x, x_3897.x)) + x_3900);
          let x_3902 : i32 = u_xlati73;
          let x_3905 : i32 = u_xlati73;
          let x_3909 : vec4<f32> = x_3686.x_AdditionalLightsWorldToLights[((x_3902 + 2i) / 4i)][((x_3905 + 2i) % 4i)];
          let x_3910 : vec3<f32> = vs_INTERP0;
          let x_3913 : vec4<f32> = u_xlat12;
          u_xlat12 = ((x_3909 * vec4<f32>(x_3910.z, x_3910.z, x_3910.z, x_3910.z)) + x_3913);
          let x_3915 : vec4<f32> = u_xlat12;
          let x_3916 : i32 = u_xlati73;
          let x_3919 : i32 = u_xlati73;
          let x_3923 : vec4<f32> = x_3686.x_AdditionalLightsWorldToLights[((x_3916 + 3i) / 4i)][((x_3919 + 3i) % 4i)];
          u_xlat12 = (x_3915 + x_3923);
          let x_3925 : vec4<f32> = u_xlat12;
          let x_3927 : vec4<f32> = u_xlat12;
          let x_3929 : vec3<f32> = (vec3<f32>(x_3925.x, x_3925.y, x_3925.z) / vec3<f32>(x_3927.w, x_3927.w, x_3927.w));
          let x_3930 : vec4<f32> = u_xlat12;
          u_xlat12 = vec4<f32>(x_3929.x, x_3929.y, x_3929.z, x_3930.w);
          let x_3932 : vec4<f32> = u_xlat12;
          let x_3934 : vec4<f32> = u_xlat12;
          u_xlat71 = dot(vec3<f32>(x_3932.x, x_3932.y, x_3932.z), vec3<f32>(x_3934.x, x_3934.y, x_3934.z));
          let x_3937 : f32 = u_xlat71;
          u_xlat71 = inverseSqrt(x_3937);
          let x_3939 : f32 = u_xlat71;
          let x_3941 : vec4<f32> = u_xlat12;
          let x_3943 : vec3<f32> = (vec3<f32>(x_3939, x_3939, x_3939) * vec3<f32>(x_3941.x, x_3941.y, x_3941.z));
          let x_3944 : vec4<f32> = u_xlat12;
          u_xlat12 = vec4<f32>(x_3943.x, x_3943.y, x_3943.z, x_3944.w);
          let x_3946 : vec4<f32> = u_xlat12;
          u_xlat71 = dot(abs(vec3<f32>(x_3946.x, x_3946.y, x_3946.z)), vec3<f32>(1.0f, 1.0f, 1.0f));
          let x_3951 : f32 = u_xlat71;
          u_xlat71 = max(x_3951, 0.000001f);
          let x_3954 : f32 = u_xlat71;
          u_xlat71 = (1.0f / x_3954);
          let x_3956 : f32 = u_xlat71;
          let x_3958 : vec4<f32> = u_xlat12;
          let x_3960 : vec3<f32> = (vec3<f32>(x_3956, x_3956, x_3956) * vec3<f32>(x_3958.z, x_3958.x, x_3958.y));
          let x_3961 : vec4<f32> = u_xlat13;
          u_xlat13 = vec4<f32>(x_3960.x, x_3960.y, x_3960.z, x_3961.w);
          let x_3964 : f32 = u_xlat13.x;
          u_xlat13.x = -(x_3964);
          let x_3968 : f32 = u_xlat13.x;
          u_xlat13.x = clamp(x_3968, 0.0f, 1.0f);
          let x_3972 : vec4<f32> = u_xlat13;
          let x_3975 : vec4<bool> = (vec4<f32>(x_3972.y, x_3972.z, x_3972.y, x_3972.z) >= vec4<f32>(0.0f, 0.0f, 0.0f, 0.0f));
          u_xlatb53 = vec2<bool>(x_3975.x, x_3975.y);
          let x_3978 : bool = u_xlatb53.x;
          if (x_3978) {
            let x_3983 : f32 = u_xlat13.x;
            x_3979 = x_3983;
          } else {
            let x_3986 : f32 = u_xlat13.x;
            x_3979 = -(x_3986);
          }
          let x_3988 : f32 = x_3979;
          u_xlat53.x = x_3988;
          let x_3991 : bool = u_xlatb53.y;
          if (x_3991) {
            let x_3996 : f32 = u_xlat13.x;
            x_3992 = x_3996;
          } else {
            let x_3999 : f32 = u_xlat13.x;
            x_3992 = -(x_3999);
          }
          let x_4001 : f32 = x_3992;
          u_xlat53.y = x_4001;
          let x_4003 : vec4<f32> = u_xlat12;
          let x_4005 : f32 = u_xlat71;
          let x_4008 : vec2<f32> = u_xlat53;
          u_xlat53 = ((vec2<f32>(x_4003.x, x_4003.y) * vec2<f32>(x_4005, x_4005)) + x_4008);
          let x_4010 : vec2<f32> = u_xlat53;
          u_xlat53 = ((x_4010 * vec2<f32>(0.5f, 0.5f)) + vec2<f32>(0.5f, 0.5f));
          let x_4013 : vec2<f32> = u_xlat53;
          u_xlat53 = clamp(x_4013, vec2<f32>(0.0f, 0.0f), vec2<f32>(1.0f, 1.0f));
          let x_4017 : u32 = u_xlatu3;
          let x_4020 : vec4<f32> = x_3686.x_AdditionalLightsCookieAtlasUVRects[bitcast<i32>(x_4017)];
          let x_4022 : vec2<f32> = u_xlat53;
          let x_4024 : u32 = u_xlatu3;
          let x_4027 : vec4<f32> = x_3686.x_AdditionalLightsCookieAtlasUVRects[bitcast<i32>(x_4024)];
          let x_4029 : vec2<f32> = ((vec2<f32>(x_4020.x, x_4020.y) * x_4022) + vec2<f32>(x_4027.z, x_4027.w));
          let x_4030 : vec4<f32> = u_xlat11;
          u_xlat11 = vec4<f32>(x_4029.x, x_4029.y, x_4030.z, x_4030.w);
        }
      }
      let x_4037 : vec4<f32> = u_xlat11;
      let x_4040 : f32 = x_66.x_GlobalMipBias.x;
      let x_4041 : vec4<f32> = textureSampleBias(x_AdditionalLightsCookieAtlasTexture, sampler_AdditionalLightsCookieAtlasTexture, vec2<f32>(x_4037.x, x_4037.y), x_4040);
      u_xlat11 = x_4041;
      let x_4043 : bool = u_xlatb48.y;
      if (x_4043) {
        let x_4048 : f32 = u_xlat11.w;
        x_4044 = x_4048;
      } else {
        let x_4051 : f32 = u_xlat11.x;
        x_4044 = x_4051;
      }
      let x_4052 : f32 = x_4044;
      u_xlat71 = x_4052;
      let x_4054 : bool = u_xlatb48.x;
      if (x_4054) {
        let x_4058 : vec4<f32> = u_xlat11;
        x_4055 = vec3<f32>(x_4058.x, x_4058.y, x_4058.z);
      } else {
        let x_4061 : f32 = u_xlat71;
        x_4055 = vec3<f32>(x_4061, x_4061, x_4061);
      }
      let x_4063 : vec3<f32> = x_4055;
      let x_4064 : vec4<f32> = u_xlat11;
      u_xlat11 = vec4<f32>(x_4063.x, x_4063.y, x_4063.z, x_4064.w);
    } else {
      u_xlat11.x = 1.0f;
      u_xlat11.y = 1.0f;
      u_xlat11.z = 1.0f;
    }
    let x_4070 : vec4<f32> = u_xlat11;
    let x_4072 : u32 = u_xlatu3;
    let x_4075 : vec4<f32> = x_3577.x_AdditionalLightsColor[bitcast<i32>(x_4072)];
    let x_4077 : vec3<f32> = (vec3<f32>(x_4070.x, x_4070.y, x_4070.z) * vec3<f32>(x_4075.x, x_4075.y, x_4075.z));
    let x_4078 : vec4<f32> = u_xlat11;
    u_xlat11 = vec4<f32>(x_4077.x, x_4077.y, x_4077.z, x_4078.w);
    let x_4080 : vec3<f32> = u_xlat27;
    let x_4082 : vec4<f32> = u_xlat11;
    let x_4084 : vec3<f32> = (vec3<f32>(x_4080.x, x_4080.x, x_4080.x) * vec3<f32>(x_4082.x, x_4082.y, x_4082.z));
    let x_4085 : vec4<f32> = u_xlat11;
    u_xlat11 = vec4<f32>(x_4084.x, x_4084.y, x_4084.z, x_4085.w);
    let x_4087 : vec3<f32> = u_xlat24;
    let x_4088 : vec4<f32> = u_xlat10;
    u_xlat3.x = dot(x_4087, vec3<f32>(x_4088.x, x_4088.y, x_4088.z));
    let x_4093 : f32 = u_xlat3.x;
    u_xlat3.x = clamp(x_4093, 0.0f, 1.0f);
    let x_4097 : f32 = u_xlat3.x;
    let x_4098 : f32 = u_xlat67;
    u_xlat3.x = (x_4097 * x_4098);
    let x_4101 : vec4<f32> = u_xlat3;
    let x_4103 : vec4<f32> = u_xlat11;
    let x_4105 : vec3<f32> = (vec3<f32>(x_4101.x, x_4101.x, x_4101.x) * vec3<f32>(x_4103.x, x_4103.y, x_4103.z));
    let x_4106 : vec4<f32> = u_xlat11;
    u_xlat11 = vec4<f32>(x_4105.x, x_4105.y, x_4105.z, x_4106.w);
    let x_4108 : vec4<f32> = u_xlat9;
    let x_4110 : f32 = u_xlat70;
    let x_4113 : vec4<f32> = u_xlat5;
    let x_4115 : vec3<f32> = ((vec3<f32>(x_4108.x, x_4108.y, x_4108.z) * vec3<f32>(x_4110, x_4110, x_4110)) + vec3<f32>(x_4113.x, x_4113.y, x_4113.z));
    let x_4116 : vec4<f32> = u_xlat9;
    u_xlat9 = vec4<f32>(x_4115.x, x_4115.y, x_4115.z, x_4116.w);
    let x_4118 : vec4<f32> = u_xlat9;
    let x_4120 : vec4<f32> = u_xlat9;
    u_xlat3.x = dot(vec3<f32>(x_4118.x, x_4118.y, x_4118.z), vec3<f32>(x_4120.x, x_4120.y, x_4120.z));
    let x_4125 : f32 = u_xlat3.x;
    u_xlat3.x = max(x_4125, 1.17549435e-37f);
    let x_4129 : f32 = u_xlat3.x;
    u_xlat3.x = inverseSqrt(x_4129);
    let x_4132 : vec4<f32> = u_xlat3;
    let x_4134 : vec4<f32> = u_xlat9;
    let x_4136 : vec3<f32> = (vec3<f32>(x_4132.x, x_4132.x, x_4132.x) * vec3<f32>(x_4134.x, x_4134.y, x_4134.z));
    let x_4137 : vec4<f32> = u_xlat9;
    u_xlat9 = vec4<f32>(x_4136.x, x_4136.y, x_4136.z, x_4137.w);
    let x_4139 : vec3<f32> = u_xlat24;
    let x_4140 : vec4<f32> = u_xlat9;
    u_xlat3.x = dot(x_4139, vec3<f32>(x_4140.x, x_4140.y, x_4140.z));
    let x_4145 : f32 = u_xlat3.x;
    u_xlat3.x = clamp(x_4145, 0.0f, 1.0f);
    let x_4148 : vec4<f32> = u_xlat10;
    let x_4150 : vec4<f32> = u_xlat9;
    u_xlat67 = dot(vec3<f32>(x_4148.x, x_4148.y, x_4148.z), vec3<f32>(x_4150.x, x_4150.y, x_4150.z));
    let x_4153 : f32 = u_xlat67;
    u_xlat67 = clamp(x_4153, 0.0f, 1.0f);
    let x_4156 : f32 = u_xlat3.x;
    let x_4158 : f32 = u_xlat3.x;
    u_xlat3.x = (x_4156 * x_4158);
    let x_4162 : f32 = u_xlat3.x;
    let x_4164 : f32 = u_xlat22.x;
    u_xlat3.x = ((x_4162 * x_4164) + 1.000010014f);
    let x_4168 : f32 = u_xlat67;
    let x_4169 : f32 = u_xlat67;
    u_xlat67 = (x_4168 * x_4169);
    let x_4172 : f32 = u_xlat3.x;
    let x_4174 : f32 = u_xlat3.x;
    u_xlat3.x = (x_4172 * x_4174);
    let x_4177 : f32 = u_xlat67;
    u_xlat67 = max(x_4177, 0.100000001f);
    let x_4180 : f32 = u_xlat3.x;
    let x_4181 : f32 = u_xlat67;
    u_xlat3.x = (x_4180 * x_4181);
    let x_4184 : f32 = u_xlat68;
    let x_4186 : f32 = u_xlat3.x;
    u_xlat3.x = (x_4184 * x_4186);
    let x_4189 : f32 = u_xlat65;
    let x_4191 : f32 = u_xlat3.x;
    u_xlat3.x = (x_4189 / x_4191);
    let x_4194 : vec4<f32> = u_xlat3;
    let x_4197 : vec3<f32> = u_xlat2;
    let x_4198 : vec3<f32> = ((vec3<f32>(x_4194.x, x_4194.x, x_4194.x) * vec3<f32>(0.039999999f, 0.039999999f, 0.039999999f)) + x_4197);
    let x_4199 : vec4<f32> = u_xlat9;
    u_xlat9 = vec4<f32>(x_4198.x, x_4198.y, x_4198.z, x_4199.w);
    let x_4201 : vec4<f32> = u_xlat9;
    let x_4203 : vec4<f32> = u_xlat11;
    let x_4206 : vec4<f32> = u_xlat8;
    let x_4208 : vec3<f32> = ((vec3<f32>(x_4201.x, x_4201.y, x_4201.z) * vec3<f32>(x_4203.x, x_4203.y, x_4203.z)) + vec3<f32>(x_4206.x, x_4206.y, x_4206.z));
    let x_4209 : vec4<f32> = u_xlat8;
    u_xlat8 = vec4<f32>(x_4208.x, x_4208.y, x_4208.z, x_4209.w);

    continuing {
      let x_4211 : u32 = u_xlatu_loop_1;
      u_xlatu_loop_1 = (x_4211 + bitcast<u32>(1i));
    }
  }
  let x_4213 : vec4<f32> = u_xlat4;
  let x_4215 : vec4<f32> = u_xlat6;
  let x_4218 : vec4<f32> = u_xlat7;
  u_xlat2 = ((vec3<f32>(x_4213.x, x_4213.y, x_4213.z) * vec3<f32>(x_4215.x, x_4215.x, x_4215.x)) + vec3<f32>(x_4218.x, x_4218.y, x_4218.z));
  let x_4221 : vec4<f32> = u_xlat8;
  let x_4223 : vec3<f32> = u_xlat2;
  u_xlat2 = (vec3<f32>(x_4221.x, x_4221.y, x_4221.z) + x_4223);
  let x_4227 : vec4<f32> = vs_INTERP4;
  let x_4229 : vec3<f32> = u_xlat0;
  let x_4231 : vec3<f32> = u_xlat2;
  let x_4232 : vec3<f32> = ((vec3<f32>(x_4227.w, x_4227.w, x_4227.w) * x_4229) + x_4231);
  let x_4233 : vec4<f32> = SV_Target0;
  SV_Target0 = vec4<f32>(x_4232.x, x_4232.y, x_4232.z, x_4233.w);
  let x_4235 : bool = u_xlatb43;
  if (x_4235) {
    let x_4240 : f32 = u_xlat1.x;
    x_4236 = x_4240;
  } else {
    x_4236 = 1.0f;
  }
  let x_4242 : f32 = x_4236;
  SV_Target0.w = x_4242;
  let x_4248 : u32 = x_66.x_RenderingLayerMaxInt;
  let x_4250 : f32 = x_1592.unity_RenderingLayer.x;
  u_xlatu0 = (x_4248 & bitcast<u32>(x_4250));
  let x_4253 : u32 = u_xlatu0;
  u_xlat0.x = f32(x_4253);
  let x_4258 : f32 = u_xlat0.x;
  let x_4260 : f32 = x_66.x_RenderingLayerRcpMaxInt;
  SV_Target1.x = (x_4258 * x_4260);
  let x_4264 : f32 = SV_Target1.x;
  SV_Target1.x = clamp(x_4264, 0.0f, 1.0f);
  let x_4268 : vec4<f32> = SV_Target1;
  SV_Target1 = vec4<f32>(x_4268.x, vec3<f32>(0.0f, 0.0f, 0.0f).x, vec3<f32>(0.0f, 0.0f, 0.0f).y, vec3<f32>(0.0f, 0.0f, 0.0f).z);
  return;
}

struct main_out {
  @location(0)
  SV_Target0_1 : vec4<f32>,
  @location(1)
  SV_Target1_1 : vec4<f32>,
}

@fragment
fn main(@builtin(position) gl_FragCoord_param : vec4<f32>, @location(1) vs_INTERP1_param : vec3<f32>, @location(3) vs_INTERP3_param : vec4<f32>, @location(4) vs_INTERP4_param : vec4<f32>, @location(0) vs_INTERP0_param : vec3<f32>, @location(2) vs_INTERP2_param : vec4<f32>, @location(5) vs_INTERP5_param : vec2<f32>, @location(6) vs_INTERP9_param : vec4<f32>) -> main_out {
  gl_FragCoord = gl_FragCoord_param;
  vs_INTERP1 = vs_INTERP1_param;
  vs_INTERP3 = vs_INTERP3_param;
  vs_INTERP4 = vs_INTERP4_param;
  vs_INTERP0 = vs_INTERP0_param;
  vs_INTERP2 = vs_INTERP2_param;
  vs_INTERP5 = vs_INTERP5_param;
  vs_INTERP9 = vs_INTERP9_param;
  main_1();
  return main_out(SV_Target0, SV_Target1);
}

