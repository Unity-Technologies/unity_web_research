type Arr = array<vec4<f32>, 2u>;

type Arr_1 = array<mat4x4<f32>, 2u>;

type Arr_2 = array<vec4<f32>, 2u>;

type Arr_3 = array<vec4<f32>, 2u>;

struct PGlobals {
  x_GlobalMipBias : vec2<f32>,
  @size(8)
  padding : u32,
  x_ZBufferParams : vec4<f32>,
  unity_MatrixV : mat4x4<f32>,
  x_SSAOParams : vec4<f32>,
  x_CameraViewTopLeftCorner : Arr_3,
  x_CameraViewProjections : Arr_1,
  x_ProjectionParams2 : vec4<f32>,
  x_CameraViewXExtent : Arr_3,
  x_CameraViewYExtent : Arr_3,
  x_SSAOBlueNoiseParams : vec4<f32>,
}

@group(0) @binding(0) var x_CameraDepthTexture : texture_2d<f32>;

@group(0) @binding(4) var sampler_CameraDepthTexture : sampler;

var<private> vs_TEXCOORD0 : vec2<f32>;

@group(1) @binding(0) var<uniform> x_33 : PGlobals;

var<private> SV_Target0 : vec4<f32>;

@group(0) @binding(1) var x_CameraNormalsTexture : texture_2d<f32>;

@group(0) @binding(5) var sampler_CameraNormalsTexture : sampler;

@group(0) @binding(2) var x_BlueNoiseTexture : texture_2d<f32>;

@group(0) @binding(3) var sampler_PointRepeat : sampler;

var<private> gl_FragCoord : vec4<f32>;

fn main_1() {
  var u_xlat0 : f32;
  var u_xlatb8 : bool;
  var u_xlat8 : vec3<f32>;
  var u_xlat1 : vec4<f32>;
  var u_xlat9 : f32;
  var u_xlat2 : vec4<f32>;
  var u_xlat18 : vec2<f32>;
  var u_xlat25 : f32;
  var u_xlat3 : vec4<f32>;
  var u_xlat4 : vec3<f32>;
  var u_xlat5 : vec3<f32>;
  var u_xlatb25 : bool;
  var u_xlat11 : vec3<f32>;
  var u_xlatb3 : vec2<bool>;
  var u_xlat26 : f32;
  var u_xlat6 : f32;
  var u_xlat7 : f32;
  var u_xlatb26 : bool;
  var u_xlat28 : f32;
  var u_xlatb28 : bool;
  var u_xlatb18 : bool;
  var u_xlat19 : f32;
  var u_xlat10 : vec2<f32>;
  var u_xlatb2 : vec4<bool>;
  var u_xlat_precise_vec4 : vec4<f32>;
  var u_xlat_precise_ivec4 : vec4<i32>;
  var u_xlat_precise_bvec4 : vec4<bool>;
  var u_xlat_precise_uvec4 : vec4<u32>;
  let x_22 : vec2<f32> = vs_TEXCOORD0;
  let x_39 : f32 = x_33.x_GlobalMipBias.x;
  let x_40 : vec4<f32> = textureSampleBias(x_CameraDepthTexture, sampler_CameraDepthTexture, x_22, x_39);
  u_xlat0 = x_40.x;
  let x_45 : f32 = u_xlat0;
  u_xlatb8 = (x_45 < 0.00001f);
  let x_48 : bool = u_xlatb8;
  if (x_48) {
    SV_Target0 = vec4<f32>(0.0f, 0.5f, 0.5f, 0.5f);
    return;
  }
  let x_59 : f32 = x_33.x_ZBufferParams.z;
  let x_60 : f32 = u_xlat0;
  let x_64 : f32 = x_33.x_ZBufferParams.w;
  u_xlat0 = ((x_59 * x_60) + x_64);
  let x_67 : f32 = u_xlat0;
  u_xlat0 = (1.0f / x_67);
  let x_71 : f32 = x_33.x_SSAOParams.w;
  let x_72 : f32 = u_xlat0;
  u_xlatb8 = (x_71 < x_72);
  let x_74 : bool = u_xlatb8;
  if (x_74) {
    SV_Target0 = vec4<f32>(0.0f, 0.5f, 0.5f, 0.5f);
    return;
  }
  let x_86 : vec2<f32> = vs_TEXCOORD0;
  let x_88 : f32 = x_33.x_GlobalMipBias.x;
  let x_89 : vec4<f32> = textureSampleBias(x_CameraNormalsTexture, sampler_CameraNormalsTexture, x_86, x_88);
  u_xlat8 = vec3<f32>(x_89.x, x_89.y, x_89.z);
  let x_96 : f32 = vs_TEXCOORD0.y;
  u_xlat1.x = (-(x_96) + 1.0f);
  let x_101 : f32 = u_xlat0;
  let x_104 : f32 = x_33.x_ProjectionParams2.x;
  u_xlat9 = (x_101 * x_104);
  let x_110 : vec4<f32> = x_33.x_CameraViewXExtent[0i];
  let x_112 : vec2<f32> = vs_TEXCOORD0;
  let x_117 : vec4<f32> = x_33.x_CameraViewTopLeftCorner[0i];
  let x_119 : vec3<f32> = ((vec3<f32>(x_110.x, x_110.y, x_110.z) * vec3<f32>(x_112.x, x_112.x, x_112.x)) + vec3<f32>(x_117.x, x_117.y, x_117.z));
  let x_120 : vec4<f32> = u_xlat2;
  u_xlat2 = vec4<f32>(x_119.x, x_119.y, x_119.z, x_120.w);
  let x_124 : vec4<f32> = x_33.x_CameraViewYExtent[0i];
  let x_126 : vec4<f32> = u_xlat1;
  let x_129 : vec4<f32> = u_xlat2;
  let x_131 : vec3<f32> = ((vec3<f32>(x_124.x, x_124.y, x_124.z) * vec3<f32>(x_126.x, x_126.x, x_126.x)) + vec3<f32>(x_129.x, x_129.y, x_129.z));
  let x_132 : vec4<f32> = u_xlat1;
  u_xlat1 = vec4<f32>(x_131.x, x_132.y, x_131.y, x_131.z);
  let x_134 : f32 = u_xlat9;
  let x_136 : vec4<f32> = u_xlat1;
  let x_138 : vec3<f32> = (vec3<f32>(x_134, x_134, x_134) * vec3<f32>(x_136.x, x_136.z, x_136.w));
  let x_139 : vec4<f32> = u_xlat1;
  u_xlat1 = vec4<f32>(x_138.x, x_138.y, x_138.z, x_139.w);
  let x_141 : vec2<f32> = vs_TEXCOORD0;
  let x_144 : vec4<f32> = x_33.x_SSAOBlueNoiseParams;
  let x_146 : vec2<f32> = (x_141 + vec2<f32>(x_144.z, x_144.w));
  let x_147 : vec4<f32> = u_xlat2;
  u_xlat2 = vec4<f32>(x_146.x, x_146.y, x_147.z, x_147.w);
  let x_151 : vec4<f32> = u_xlat2;
  let x_154 : vec4<f32> = x_33.x_SSAOBlueNoiseParams;
  u_xlat18 = (vec2<f32>(x_151.x, x_151.y) * vec2<f32>(x_154.x, x_154.y));
  let x_163 : vec2<f32> = u_xlat18;
  let x_165 : f32 = x_33.x_GlobalMipBias.x;
  let x_166 : vec4<f32> = textureSampleBias(x_BlueNoiseTexture, sampler_PointRepeat, x_163, x_165);
  u_xlat25 = x_166.w;
  let x_168 : f32 = u_xlat25;
  u_xlat18.x = fract(x_168);
  let x_173 : f32 = u_xlat18.x;
  u_xlat3.z = ((x_173 * 2.0f) + -1.0f);
  let x_179 : f32 = u_xlat25;
  u_xlat25 = (x_179 + 0.9296875f);
  let x_182 : f32 = u_xlat25;
  u_xlat25 = (x_182 * 628.31854248f);
  let x_186 : f32 = u_xlat3.z;
  let x_189 : f32 = u_xlat3.z;
  u_xlat18.x = ((-(x_186) * x_189) + 1.0f);
  let x_194 : f32 = u_xlat18.x;
  u_xlat18.x = sqrt(x_194);
  let x_198 : f32 = u_xlat25;
  u_xlat4.x = sin(x_198);
  let x_202 : f32 = u_xlat25;
  u_xlat5.x = cos(x_202);
  let x_206 : f32 = u_xlat18.x;
  let x_208 : f32 = u_xlat5.x;
  u_xlat3.x = (x_206 * x_208);
  let x_212 : f32 = u_xlat18.x;
  let x_214 : f32 = u_xlat4.x;
  u_xlat3.y = (x_212 * x_214);
  let x_217 : vec3<f32> = u_xlat8;
  let x_218 : vec4<f32> = u_xlat3;
  u_xlat25 = dot(x_217, vec3<f32>(x_218.x, x_218.y, x_218.z));
  let x_222 : f32 = u_xlat25;
  u_xlatb25 = (x_222 >= 0.0f);
  let x_224 : bool = u_xlatb25;
  u_xlat25 = select(-1.0f, 1.0f, x_224);
  let x_226 : f32 = u_xlat25;
  let x_228 : vec4<f32> = u_xlat3;
  let x_230 : vec3<f32> = (vec3<f32>(x_226, x_226, x_226) * vec3<f32>(x_228.x, x_228.y, x_228.z));
  let x_231 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_230.x, x_230.y, x_230.z, x_231.w);
  let x_233 : vec4<f32> = u_xlat3;
  let x_236 : vec4<f32> = x_33.x_SSAOParams;
  let x_238 : vec3<f32> = (vec3<f32>(x_233.x, x_233.y, x_233.z) * vec3<f32>(x_236.y, x_236.y, x_236.y));
  let x_239 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_238.x, x_238.y, x_238.z, x_239.w);
  let x_241 : vec4<f32> = u_xlat3;
  let x_246 : vec4<f32> = u_xlat1;
  let x_248 : vec3<f32> = ((vec3<f32>(x_241.x, x_241.y, x_241.z) * vec3<f32>(0.100000001f, 0.100000001f, 0.100000001f)) + vec3<f32>(x_246.x, x_246.y, x_246.z));
  let x_249 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_248.x, x_248.y, x_248.z, x_249.w);
  let x_251 : vec4<f32> = u_xlat3;
  let x_255 : vec4<f32> = x_33.x_CameraViewProjections[0i][1i];
  u_xlat18 = (vec2<f32>(x_251.y, x_251.y) * vec2<f32>(x_255.x, x_255.y));
  let x_259 : vec4<f32> = x_33.x_CameraViewProjections[0i][0i];
  let x_261 : vec4<f32> = u_xlat3;
  let x_264 : vec2<f32> = u_xlat18;
  u_xlat18 = ((vec2<f32>(x_259.x, x_259.y) * vec2<f32>(x_261.x, x_261.x)) + x_264);
  let x_268 : vec4<f32> = x_33.x_CameraViewProjections[0i][2i];
  let x_270 : vec4<f32> = u_xlat3;
  let x_273 : vec2<f32> = u_xlat18;
  u_xlat18 = ((vec2<f32>(x_268.x, x_268.y) * vec2<f32>(x_270.z, x_270.z)) + x_273);
  let x_276 : f32 = x_33.unity_MatrixV[0i].z;
  u_xlat4.x = x_276;
  let x_279 : f32 = x_33.unity_MatrixV[1i].z;
  u_xlat4.y = x_279;
  let x_282 : f32 = x_33.unity_MatrixV[2i].z;
  u_xlat4.z = x_282;
  let x_284 : vec3<f32> = u_xlat4;
  let x_285 : vec4<f32> = u_xlat3;
  u_xlat25 = dot(x_284, vec3<f32>(x_285.x, x_285.y, x_285.z));
  let x_288 : f32 = u_xlat25;
  u_xlat3.x = (1.0f / -(x_288));
  let x_292 : vec2<f32> = u_xlat18;
  let x_293 : vec4<f32> = u_xlat3;
  u_xlat18 = ((x_292 * vec2<f32>(x_293.x, x_293.x)) + vec2<f32>(1.0f, 1.0f));
  let x_298 : vec2<f32> = u_xlat18;
  u_xlat18 = (x_298 * vec2<f32>(0.5f, 0.5f));
  let x_301 : vec2<f32> = u_xlat18;
  u_xlat18 = clamp(x_301, vec2<f32>(0.0f, 0.0f), vec2<f32>(1.0f, 1.0f));
  let x_308 : vec2<f32> = u_xlat18;
  let x_310 : f32 = x_33.x_GlobalMipBias.x;
  let x_311 : vec4<f32> = textureSampleBias(x_CameraDepthTexture, sampler_CameraDepthTexture, x_308, x_310);
  u_xlat3.x = x_311.x;
  let x_316 : f32 = x_33.x_ZBufferParams.z;
  let x_318 : f32 = u_xlat3.x;
  let x_321 : f32 = x_33.x_ZBufferParams.w;
  u_xlat11.x = ((x_316 * x_318) + x_321);
  let x_325 : f32 = u_xlat11.x;
  u_xlat11.x = (1.0f / x_325);
  let x_328 : f32 = u_xlat25;
  let x_331 : f32 = u_xlat11.x;
  u_xlat25 = (-(x_328) + -(x_331));
  let x_334 : f32 = u_xlat25;
  let x_337 : f32 = x_33.x_SSAOParams.y;
  u_xlatb25 = (abs(x_334) < x_337);
  let x_339 : bool = u_xlatb25;
  u_xlat25 = select(0.0f, 1.0f, x_339);
  let x_345 : f32 = u_xlat3.x;
  u_xlatb3.x = (0.00001f < x_345);
  let x_349 : bool = u_xlatb3.x;
  u_xlat3.x = select(0.0f, 1.0f, x_349);
  let x_352 : f32 = u_xlat25;
  let x_354 : f32 = u_xlat3.x;
  u_xlat25 = (x_352 * x_354);
  let x_358 : f32 = u_xlat18.y;
  u_xlat26 = (-(x_358) + 1.0f);
  let x_362 : f32 = u_xlat11.x;
  let x_364 : f32 = x_33.x_ProjectionParams2.x;
  u_xlat3.x = (x_362 * x_364);
  let x_368 : vec4<f32> = x_33.x_CameraViewXExtent[0i];
  let x_370 : vec2<f32> = u_xlat18;
  let x_374 : vec4<f32> = x_33.x_CameraViewTopLeftCorner[0i];
  u_xlat11 = ((vec3<f32>(x_368.x, x_368.y, x_368.z) * vec3<f32>(x_370.x, x_370.x, x_370.x)) + vec3<f32>(x_374.x, x_374.y, x_374.z));
  let x_378 : vec4<f32> = x_33.x_CameraViewYExtent[0i];
  let x_380 : f32 = u_xlat26;
  let x_383 : vec3<f32> = u_xlat11;
  u_xlat11 = ((vec3<f32>(x_378.x, x_378.y, x_378.z) * vec3<f32>(x_380, x_380, x_380)) + x_383);
  let x_385 : vec3<f32> = u_xlat11;
  let x_386 : vec4<f32> = u_xlat3;
  let x_389 : vec4<f32> = u_xlat1;
  let x_392 : vec3<f32> = ((x_385 * vec3<f32>(x_386.x, x_386.x, x_386.x)) + -(vec3<f32>(x_389.x, x_389.y, x_389.z)));
  let x_393 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_392.x, x_392.y, x_392.z, x_393.w);
  let x_395 : vec4<f32> = u_xlat3;
  let x_397 : vec3<f32> = u_xlat8;
  u_xlat18.x = dot(vec3<f32>(x_395.x, x_395.y, x_395.z), x_397);
  let x_400 : f32 = u_xlat0;
  let x_405 : f32 = u_xlat18.x;
  u_xlat18.x = ((-(x_400) * 0.004f) + x_405);
  let x_409 : f32 = u_xlat18.x;
  u_xlat18.x = max(x_409, 0.0f);
  let x_412 : vec4<f32> = u_xlat3;
  let x_414 : vec4<f32> = u_xlat3;
  u_xlat26 = dot(vec3<f32>(x_412.x, x_412.y, x_412.z), vec3<f32>(x_414.x, x_414.y, x_414.z));
  let x_417 : f32 = u_xlat26;
  u_xlat26 = (x_417 + 0.0001f);
  let x_420 : f32 = u_xlat26;
  u_xlat26 = (1.0f / x_420);
  let x_422 : f32 = u_xlat26;
  let x_424 : f32 = u_xlat18.x;
  u_xlat18.x = (x_422 * x_424);
  let x_427 : vec4<f32> = u_xlat2;
  let x_430 : vec4<f32> = x_33.x_SSAOBlueNoiseParams;
  u_xlat3 = ((vec4<f32>(x_427.x, x_427.y, x_427.x, x_427.y) * vec4<f32>(x_430.x, x_430.y, x_430.x, x_430.y)) + vec4<f32>(0.083333336f, 0.083333336f, 0.166666672f, 0.166666672f));
  let x_440 : vec4<f32> = u_xlat3;
  let x_443 : f32 = x_33.x_GlobalMipBias.x;
  let x_444 : vec4<f32> = textureSampleBias(x_BlueNoiseTexture, sampler_PointRepeat, vec2<f32>(x_440.x, x_440.y), x_443);
  u_xlat26 = x_444.w;
  let x_446 : f32 = u_xlat26;
  let x_451 : vec2<f32> = (vec2<f32>(x_446, x_446) + vec2<f32>(0.33984375f, 0.76171875f));
  let x_452 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_451.x, x_451.y, x_452.z, x_452.w);
  let x_455 : f32 = u_xlat3.x;
  u_xlat26 = fract(x_455);
  let x_457 : f32 = u_xlat26;
  u_xlat5.z = ((x_457 * 2.0f) + -1.0f);
  let x_462 : f32 = u_xlat3.y;
  u_xlat26 = (x_462 * 628.31854248f);
  let x_465 : f32 = u_xlat5.z;
  let x_468 : f32 = u_xlat5.z;
  u_xlat3.x = ((-(x_465) * x_468) + 1.0f);
  let x_473 : f32 = u_xlat3.x;
  u_xlat3.x = sqrt(x_473);
  let x_477 : f32 = u_xlat26;
  u_xlat6 = sin(x_477);
  let x_480 : f32 = u_xlat26;
  u_xlat7 = cos(x_480);
  let x_483 : f32 = u_xlat3.x;
  let x_484 : f32 = u_xlat7;
  u_xlat5.x = (x_483 * x_484);
  let x_488 : f32 = u_xlat3.x;
  let x_489 : f32 = u_xlat6;
  u_xlat5.y = (x_488 * x_489);
  let x_492 : vec3<f32> = u_xlat8;
  let x_493 : vec3<f32> = u_xlat5;
  u_xlat26 = dot(x_492, x_493);
  let x_496 : f32 = u_xlat26;
  u_xlatb26 = (x_496 >= 0.0f);
  let x_498 : bool = u_xlatb26;
  u_xlat26 = select(-1.0f, 1.0f, x_498);
  let x_500 : f32 = u_xlat26;
  let x_502 : vec3<f32> = u_xlat5;
  u_xlat5 = (vec3<f32>(x_500, x_500, x_500) * x_502);
  let x_504 : vec3<f32> = u_xlat5;
  let x_506 : vec4<f32> = x_33.x_SSAOParams;
  u_xlat5 = (x_504 * vec3<f32>(x_506.y, x_506.y, x_506.y));
  let x_509 : vec3<f32> = u_xlat5;
  let x_513 : vec4<f32> = u_xlat1;
  u_xlat5 = ((x_509 * vec3<f32>(0.106250003f, 0.106250003f, 0.106250003f)) + vec3<f32>(x_513.x, x_513.y, x_513.z));
  let x_516 : vec3<f32> = u_xlat5;
  let x_519 : vec4<f32> = x_33.x_CameraViewProjections[0i][1i];
  let x_521 : vec2<f32> = (vec2<f32>(x_516.y, x_516.y) * vec2<f32>(x_519.x, x_519.y));
  let x_522 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_521.x, x_521.y, x_522.z, x_522.w);
  let x_525 : vec4<f32> = x_33.x_CameraViewProjections[0i][0i];
  let x_527 : vec3<f32> = u_xlat5;
  let x_530 : vec4<f32> = u_xlat3;
  let x_532 : vec2<f32> = ((vec2<f32>(x_525.x, x_525.y) * vec2<f32>(x_527.x, x_527.x)) + vec2<f32>(x_530.x, x_530.y));
  let x_533 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_532.x, x_532.y, x_533.z, x_533.w);
  let x_536 : vec4<f32> = x_33.x_CameraViewProjections[0i][2i];
  let x_538 : vec3<f32> = u_xlat5;
  let x_541 : vec4<f32> = u_xlat3;
  let x_543 : vec2<f32> = ((vec2<f32>(x_536.x, x_536.y) * vec2<f32>(x_538.z, x_538.z)) + vec2<f32>(x_541.x, x_541.y));
  let x_544 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_543.x, x_543.y, x_544.z, x_544.w);
  let x_546 : vec3<f32> = u_xlat4;
  let x_547 : vec3<f32> = u_xlat5;
  u_xlat26 = dot(x_546, x_547);
  let x_550 : f32 = u_xlat26;
  u_xlat28 = (1.0f / -(x_550));
  let x_553 : vec4<f32> = u_xlat3;
  let x_555 : f32 = u_xlat28;
  let x_558 : vec2<f32> = ((vec2<f32>(x_553.x, x_553.y) * vec2<f32>(x_555, x_555)) + vec2<f32>(1.0f, 1.0f));
  let x_559 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_558.x, x_558.y, x_559.z, x_559.w);
  let x_561 : vec4<f32> = u_xlat3;
  let x_563 : vec2<f32> = (vec2<f32>(x_561.x, x_561.y) * vec2<f32>(0.5f, 0.5f));
  let x_564 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_563.x, x_563.y, x_564.z, x_564.w);
  let x_566 : vec4<f32> = u_xlat3;
  let x_570 : vec2<f32> = clamp(vec2<f32>(x_566.x, x_566.y), vec2<f32>(0.0f, 0.0f), vec2<f32>(1.0f, 1.0f));
  let x_571 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_570.x, x_570.y, x_571.z, x_571.w);
  let x_576 : vec4<f32> = u_xlat3;
  let x_579 : f32 = x_33.x_GlobalMipBias.x;
  let x_580 : vec4<f32> = textureSampleBias(x_CameraDepthTexture, sampler_CameraDepthTexture, vec2<f32>(x_576.x, x_576.y), x_579);
  u_xlat28 = x_580.x;
  let x_583 : f32 = x_33.x_ZBufferParams.z;
  let x_584 : f32 = u_xlat28;
  let x_587 : f32 = x_33.x_ZBufferParams.w;
  u_xlat5.x = ((x_583 * x_584) + x_587);
  let x_591 : f32 = u_xlat5.x;
  u_xlat5.x = (1.0f / x_591);
  let x_594 : f32 = u_xlat26;
  let x_597 : f32 = u_xlat5.x;
  u_xlat26 = (-(x_594) + -(x_597));
  let x_600 : f32 = u_xlat26;
  let x_603 : f32 = x_33.x_SSAOParams.y;
  u_xlatb26 = (abs(x_600) < x_603);
  let x_605 : bool = u_xlatb26;
  u_xlat26 = select(0.0f, 1.0f, x_605);
  let x_608 : f32 = u_xlat28;
  u_xlatb28 = (0.00001f < x_608);
  let x_610 : bool = u_xlatb28;
  u_xlat28 = select(0.0f, 1.0f, x_610);
  let x_612 : f32 = u_xlat26;
  let x_613 : f32 = u_xlat28;
  u_xlat26 = (x_612 * x_613);
  let x_616 : f32 = u_xlat3.y;
  u_xlat11.x = (-(x_616) + 1.0f);
  let x_621 : f32 = u_xlat5.x;
  let x_623 : f32 = x_33.x_ProjectionParams2.x;
  u_xlat28 = (x_621 * x_623);
  let x_626 : vec4<f32> = x_33.x_CameraViewXExtent[0i];
  let x_628 : vec4<f32> = u_xlat3;
  let x_632 : vec4<f32> = x_33.x_CameraViewTopLeftCorner[0i];
  u_xlat5 = ((vec3<f32>(x_626.x, x_626.y, x_626.z) * vec3<f32>(x_628.x, x_628.x, x_628.x)) + vec3<f32>(x_632.x, x_632.y, x_632.z));
  let x_636 : vec4<f32> = x_33.x_CameraViewYExtent[0i];
  let x_638 : vec3<f32> = u_xlat11;
  let x_641 : vec3<f32> = u_xlat5;
  u_xlat5 = ((vec3<f32>(x_636.x, x_636.y, x_636.z) * vec3<f32>(x_638.x, x_638.x, x_638.x)) + x_641);
  let x_643 : vec3<f32> = u_xlat5;
  let x_644 : f32 = u_xlat28;
  let x_647 : vec4<f32> = u_xlat1;
  u_xlat5 = ((x_643 * vec3<f32>(x_644, x_644, x_644)) + -(vec3<f32>(x_647.x, x_647.y, x_647.z)));
  let x_651 : vec3<f32> = u_xlat5;
  let x_652 : vec3<f32> = u_xlat8;
  u_xlat3.x = dot(x_651, x_652);
  let x_655 : f32 = u_xlat0;
  let x_659 : f32 = u_xlat3.x;
  u_xlat3.x = ((-(x_655) * 0.004f) + x_659);
  let x_663 : f32 = u_xlat3.x;
  u_xlat3.x = max(x_663, 0.0f);
  let x_666 : vec3<f32> = u_xlat5;
  let x_667 : vec3<f32> = u_xlat5;
  u_xlat11.x = dot(x_666, x_667);
  let x_671 : f32 = u_xlat11.x;
  u_xlat11.x = (x_671 + 0.0001f);
  let x_675 : f32 = u_xlat11.x;
  u_xlat11.x = (1.0f / x_675);
  let x_679 : f32 = u_xlat11.x;
  let x_681 : f32 = u_xlat3.x;
  u_xlat3.x = (x_679 * x_681);
  let x_684 : f32 = u_xlat26;
  let x_686 : f32 = u_xlat3.x;
  u_xlat26 = (x_684 * x_686);
  let x_689 : f32 = u_xlat18.x;
  let x_690 : f32 = u_xlat25;
  let x_692 : f32 = u_xlat26;
  u_xlat25 = ((x_689 * x_690) + x_692);
  let x_697 : vec4<f32> = u_xlat3;
  let x_700 : f32 = x_33.x_GlobalMipBias.x;
  let x_701 : vec4<f32> = textureSampleBias(x_BlueNoiseTexture, sampler_PointRepeat, vec2<f32>(x_697.z, x_697.w), x_700);
  u_xlat18.x = x_701.w;
  let x_704 : vec2<f32> = u_xlat18;
  u_xlat18 = (vec2<f32>(x_704.x, x_704.x) + vec2<f32>(0.75390625f, 0.133333296f));
  let x_711 : f32 = u_xlat18.x;
  u_xlat18.x = fract(x_711);
  let x_715 : f32 = u_xlat18.x;
  u_xlat3.z = ((x_715 * 2.0f) + -1.0f);
  let x_720 : f32 = u_xlat18.y;
  u_xlat18.x = (x_720 * 628.31854248f);
  let x_724 : f32 = u_xlat3.z;
  let x_727 : f32 = u_xlat3.z;
  u_xlat26 = ((-(x_724) * x_727) + 1.0f);
  let x_730 : f32 = u_xlat26;
  u_xlat26 = sqrt(x_730);
  let x_733 : f32 = u_xlat18.x;
  u_xlat5.x = sin(x_733);
  let x_737 : f32 = u_xlat18.x;
  u_xlat6 = cos(x_737);
  let x_739 : f32 = u_xlat26;
  let x_740 : f32 = u_xlat6;
  u_xlat3.x = (x_739 * x_740);
  let x_743 : f32 = u_xlat26;
  let x_745 : f32 = u_xlat5.x;
  u_xlat3.y = (x_743 * x_745);
  let x_748 : vec3<f32> = u_xlat8;
  let x_749 : vec4<f32> = u_xlat3;
  u_xlat18.x = dot(x_748, vec3<f32>(x_749.x, x_749.y, x_749.z));
  let x_755 : f32 = u_xlat18.x;
  u_xlatb18 = (x_755 >= 0.0f);
  let x_757 : bool = u_xlatb18;
  u_xlat18.x = select(-1.0f, 1.0f, x_757);
  let x_760 : vec2<f32> = u_xlat18;
  let x_762 : vec4<f32> = u_xlat3;
  let x_764 : vec3<f32> = (vec3<f32>(x_760.x, x_760.x, x_760.x) * vec3<f32>(x_762.x, x_762.y, x_762.z));
  let x_765 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_764.x, x_764.y, x_764.z, x_765.w);
  let x_767 : vec4<f32> = u_xlat3;
  let x_770 : vec4<f32> = x_33.x_SSAOParams;
  let x_772 : vec3<f32> = (vec3<f32>(x_767.x, x_767.y, x_767.z) * vec3<f32>(x_770.y, x_770.y, x_770.y));
  let x_773 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_772.x, x_772.y, x_772.z, x_773.w);
  let x_775 : vec4<f32> = u_xlat3;
  let x_780 : vec4<f32> = u_xlat1;
  let x_782 : vec3<f32> = ((vec3<f32>(x_775.x, x_775.y, x_775.z) * vec3<f32>(0.125f, 0.125f, 0.125f)) + vec3<f32>(x_780.x, x_780.y, x_780.z));
  let x_783 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_782.x, x_782.y, x_782.z, x_783.w);
  let x_785 : vec4<f32> = u_xlat3;
  let x_788 : vec4<f32> = x_33.x_CameraViewProjections[0i][1i];
  u_xlat18 = (vec2<f32>(x_785.y, x_785.y) * vec2<f32>(x_788.x, x_788.y));
  let x_792 : vec4<f32> = x_33.x_CameraViewProjections[0i][0i];
  let x_794 : vec4<f32> = u_xlat3;
  let x_797 : vec2<f32> = u_xlat18;
  u_xlat18 = ((vec2<f32>(x_792.x, x_792.y) * vec2<f32>(x_794.x, x_794.x)) + x_797);
  let x_800 : vec4<f32> = x_33.x_CameraViewProjections[0i][2i];
  let x_802 : vec4<f32> = u_xlat3;
  let x_805 : vec2<f32> = u_xlat18;
  u_xlat18 = ((vec2<f32>(x_800.x, x_800.y) * vec2<f32>(x_802.z, x_802.z)) + x_805);
  let x_807 : vec3<f32> = u_xlat4;
  let x_808 : vec4<f32> = u_xlat3;
  u_xlat3.x = dot(x_807, vec3<f32>(x_808.x, x_808.y, x_808.z));
  let x_813 : f32 = u_xlat3.x;
  u_xlat11.x = (1.0f / -(x_813));
  let x_817 : vec2<f32> = u_xlat18;
  let x_818 : vec3<f32> = u_xlat11;
  u_xlat18 = ((x_817 * vec2<f32>(x_818.x, x_818.x)) + vec2<f32>(1.0f, 1.0f));
  let x_822 : vec2<f32> = u_xlat18;
  u_xlat18 = (x_822 * vec2<f32>(0.5f, 0.5f));
  let x_824 : vec2<f32> = u_xlat18;
  u_xlat18 = clamp(x_824, vec2<f32>(0.0f, 0.0f), vec2<f32>(1.0f, 1.0f));
  let x_831 : vec2<f32> = u_xlat18;
  let x_833 : f32 = x_33.x_GlobalMipBias.x;
  let x_834 : vec4<f32> = textureSampleBias(x_CameraDepthTexture, sampler_CameraDepthTexture, x_831, x_833);
  u_xlat11.x = x_834.x;
  let x_839 : f32 = x_33.x_ZBufferParams.z;
  let x_841 : f32 = u_xlat11.x;
  let x_844 : f32 = x_33.x_ZBufferParams.w;
  u_xlat19 = ((x_839 * x_841) + x_844);
  let x_846 : f32 = u_xlat19;
  u_xlat19 = (1.0f / x_846);
  let x_848 : f32 = u_xlat19;
  let x_851 : f32 = u_xlat3.x;
  u_xlat3.x = (-(x_848) + -(x_851));
  let x_856 : f32 = u_xlat3.x;
  let x_859 : f32 = x_33.x_SSAOParams.y;
  u_xlatb3.x = (abs(x_856) < x_859);
  let x_863 : f32 = u_xlat11.x;
  u_xlatb3.y = (0.00001f < x_863);
  let x_867 : bool = u_xlatb3.x;
  u_xlat3.x = select(0.0f, 1.0f, x_867);
  let x_871 : bool = u_xlatb3.y;
  u_xlat3.y = select(0.0f, 1.0f, x_871);
  let x_875 : f32 = u_xlat3.y;
  let x_877 : f32 = u_xlat3.x;
  u_xlat3.x = (x_875 * x_877);
  let x_881 : f32 = u_xlat18.y;
  u_xlat26 = (-(x_881) + 1.0f);
  let x_884 : f32 = u_xlat19;
  let x_886 : f32 = x_33.x_ProjectionParams2.x;
  u_xlat11.x = (x_884 * x_886);
  let x_890 : vec4<f32> = x_33.x_CameraViewXExtent[0i];
  let x_892 : vec2<f32> = u_xlat18;
  let x_896 : vec4<f32> = x_33.x_CameraViewTopLeftCorner[0i];
  u_xlat5 = ((vec3<f32>(x_890.x, x_890.y, x_890.z) * vec3<f32>(x_892.x, x_892.x, x_892.x)) + vec3<f32>(x_896.x, x_896.y, x_896.z));
  let x_900 : vec4<f32> = x_33.x_CameraViewYExtent[0i];
  let x_902 : f32 = u_xlat26;
  let x_905 : vec3<f32> = u_xlat5;
  u_xlat5 = ((vec3<f32>(x_900.x, x_900.y, x_900.z) * vec3<f32>(x_902, x_902, x_902)) + x_905);
  let x_907 : vec3<f32> = u_xlat5;
  let x_908 : vec3<f32> = u_xlat11;
  let x_911 : vec4<f32> = u_xlat1;
  u_xlat11 = ((x_907 * vec3<f32>(x_908.x, x_908.x, x_908.x)) + -(vec3<f32>(x_911.x, x_911.y, x_911.z)));
  let x_915 : vec3<f32> = u_xlat11;
  let x_916 : vec3<f32> = u_xlat8;
  u_xlat18.x = dot(x_915, x_916);
  let x_919 : f32 = u_xlat0;
  let x_923 : f32 = u_xlat18.x;
  u_xlat18.x = ((-(x_919) * 0.004f) + x_923);
  let x_927 : f32 = u_xlat18.x;
  u_xlat18.x = max(x_927, 0.0f);
  let x_930 : vec3<f32> = u_xlat11;
  let x_931 : vec3<f32> = u_xlat11;
  u_xlat26 = dot(x_930, x_931);
  let x_933 : f32 = u_xlat26;
  u_xlat26 = (x_933 + 0.0001f);
  let x_935 : f32 = u_xlat26;
  u_xlat26 = (1.0f / x_935);
  let x_937 : f32 = u_xlat26;
  let x_939 : f32 = u_xlat18.x;
  u_xlat18.x = (x_937 * x_939);
  let x_943 : f32 = u_xlat18.x;
  let x_945 : f32 = u_xlat3.x;
  let x_947 : f32 = u_xlat25;
  u_xlat25 = ((x_943 * x_945) + x_947);
  let x_949 : vec4<f32> = u_xlat2;
  let x_952 : vec4<f32> = x_33.x_SSAOBlueNoiseParams;
  u_xlat3 = ((vec4<f32>(x_949.x, x_949.y, x_949.x, x_949.y) * vec4<f32>(x_952.x, x_952.y, x_952.x, x_952.y)) + vec4<f32>(0.25f, 0.25f, 0.333333343f, 0.333333343f));
  let x_962 : vec4<f32> = u_xlat3;
  let x_965 : f32 = x_33.x_GlobalMipBias.x;
  let x_966 : vec4<f32> = textureSampleBias(x_BlueNoiseTexture, sampler_PointRepeat, vec2<f32>(x_962.x, x_962.y), x_965);
  u_xlat18.x = x_966.w;
  let x_969 : vec2<f32> = u_xlat18;
  u_xlat18 = (vec2<f32>(x_969.x, x_969.x) + vec2<f32>(0.56640625f, 0.015625f));
  let x_976 : f32 = u_xlat18.x;
  u_xlat18.x = fract(x_976);
  let x_980 : f32 = u_xlat18.x;
  u_xlat5.z = ((x_980 * 2.0f) + -1.0f);
  let x_985 : f32 = u_xlat18.y;
  u_xlat18.x = (x_985 * 628.31854248f);
  let x_989 : f32 = u_xlat5.z;
  let x_992 : f32 = u_xlat5.z;
  u_xlat26 = ((-(x_989) * x_992) + 1.0f);
  let x_995 : f32 = u_xlat26;
  u_xlat26 = sqrt(x_995);
  let x_998 : f32 = u_xlat18.x;
  u_xlat3.x = sin(x_998);
  let x_1002 : f32 = u_xlat18.x;
  u_xlat6 = cos(x_1002);
  let x_1004 : f32 = u_xlat26;
  let x_1005 : f32 = u_xlat6;
  u_xlat5.x = (x_1004 * x_1005);
  let x_1008 : f32 = u_xlat26;
  let x_1010 : f32 = u_xlat3.x;
  u_xlat5.y = (x_1008 * x_1010);
  let x_1013 : vec3<f32> = u_xlat8;
  let x_1014 : vec3<f32> = u_xlat5;
  u_xlat18.x = dot(x_1013, x_1014);
  let x_1018 : f32 = u_xlat18.x;
  u_xlatb18 = (x_1018 >= 0.0f);
  let x_1020 : bool = u_xlatb18;
  u_xlat18.x = select(-1.0f, 1.0f, x_1020);
  let x_1023 : vec2<f32> = u_xlat18;
  let x_1025 : vec3<f32> = u_xlat5;
  u_xlat5 = (vec3<f32>(x_1023.x, x_1023.x, x_1023.x) * x_1025);
  let x_1027 : vec3<f32> = u_xlat5;
  let x_1029 : vec4<f32> = x_33.x_SSAOParams;
  u_xlat5 = (x_1027 * vec3<f32>(x_1029.y, x_1029.y, x_1029.y));
  let x_1032 : vec3<f32> = u_xlat5;
  let x_1036 : vec4<f32> = u_xlat1;
  u_xlat5 = ((x_1032 * vec3<f32>(0.15625f, 0.15625f, 0.15625f)) + vec3<f32>(x_1036.x, x_1036.y, x_1036.z));
  let x_1039 : vec3<f32> = u_xlat5;
  let x_1042 : vec4<f32> = x_33.x_CameraViewProjections[0i][1i];
  u_xlat18 = (vec2<f32>(x_1039.y, x_1039.y) * vec2<f32>(x_1042.x, x_1042.y));
  let x_1046 : vec4<f32> = x_33.x_CameraViewProjections[0i][0i];
  let x_1048 : vec3<f32> = u_xlat5;
  let x_1051 : vec2<f32> = u_xlat18;
  u_xlat18 = ((vec2<f32>(x_1046.x, x_1046.y) * vec2<f32>(x_1048.x, x_1048.x)) + x_1051);
  let x_1054 : vec4<f32> = x_33.x_CameraViewProjections[0i][2i];
  let x_1056 : vec3<f32> = u_xlat5;
  let x_1059 : vec2<f32> = u_xlat18;
  u_xlat18 = ((vec2<f32>(x_1054.x, x_1054.y) * vec2<f32>(x_1056.z, x_1056.z)) + x_1059);
  let x_1061 : vec3<f32> = u_xlat4;
  let x_1062 : vec3<f32> = u_xlat5;
  u_xlat3.x = dot(x_1061, x_1062);
  let x_1066 : f32 = u_xlat3.x;
  u_xlat11.x = (1.0f / -(x_1066));
  let x_1070 : vec2<f32> = u_xlat18;
  let x_1071 : vec3<f32> = u_xlat11;
  u_xlat18 = ((x_1070 * vec2<f32>(x_1071.x, x_1071.x)) + vec2<f32>(1.0f, 1.0f));
  let x_1075 : vec2<f32> = u_xlat18;
  u_xlat18 = (x_1075 * vec2<f32>(0.5f, 0.5f));
  let x_1077 : vec2<f32> = u_xlat18;
  u_xlat18 = clamp(x_1077, vec2<f32>(0.0f, 0.0f), vec2<f32>(1.0f, 1.0f));
  let x_1084 : vec2<f32> = u_xlat18;
  let x_1086 : f32 = x_33.x_GlobalMipBias.x;
  let x_1087 : vec4<f32> = textureSampleBias(x_CameraDepthTexture, sampler_CameraDepthTexture, x_1084, x_1086);
  u_xlat11.x = x_1087.x;
  let x_1091 : f32 = x_33.x_ZBufferParams.z;
  let x_1093 : f32 = u_xlat11.x;
  let x_1096 : f32 = x_33.x_ZBufferParams.w;
  u_xlat28 = ((x_1091 * x_1093) + x_1096);
  let x_1098 : f32 = u_xlat28;
  u_xlat28 = (1.0f / x_1098);
  let x_1101 : f32 = u_xlat3.x;
  let x_1103 : f32 = u_xlat28;
  u_xlat3.x = (-(x_1101) + -(x_1103));
  let x_1108 : f32 = u_xlat3.x;
  let x_1111 : f32 = x_33.x_SSAOParams.y;
  u_xlatb3.x = (abs(x_1108) < x_1111);
  let x_1115 : f32 = u_xlat11.x;
  u_xlatb3.y = (0.00001f < x_1115);
  let x_1119 : bool = u_xlatb3.x;
  u_xlat3.x = select(0.0f, 1.0f, x_1119);
  let x_1123 : bool = u_xlatb3.y;
  u_xlat3.y = select(0.0f, 1.0f, x_1123);
  let x_1127 : f32 = u_xlat3.y;
  let x_1129 : f32 = u_xlat3.x;
  u_xlat3.x = (x_1127 * x_1129);
  let x_1133 : f32 = u_xlat18.y;
  u_xlat26 = (-(x_1133) + 1.0f);
  let x_1136 : f32 = u_xlat28;
  let x_1138 : f32 = x_33.x_ProjectionParams2.x;
  u_xlat11.x = (x_1136 * x_1138);
  let x_1142 : vec4<f32> = x_33.x_CameraViewXExtent[0i];
  let x_1144 : vec2<f32> = u_xlat18;
  let x_1148 : vec4<f32> = x_33.x_CameraViewTopLeftCorner[0i];
  u_xlat5 = ((vec3<f32>(x_1142.x, x_1142.y, x_1142.z) * vec3<f32>(x_1144.x, x_1144.x, x_1144.x)) + vec3<f32>(x_1148.x, x_1148.y, x_1148.z));
  let x_1152 : vec4<f32> = x_33.x_CameraViewYExtent[0i];
  let x_1154 : f32 = u_xlat26;
  let x_1157 : vec3<f32> = u_xlat5;
  u_xlat5 = ((vec3<f32>(x_1152.x, x_1152.y, x_1152.z) * vec3<f32>(x_1154, x_1154, x_1154)) + x_1157);
  let x_1159 : vec3<f32> = u_xlat5;
  let x_1160 : vec3<f32> = u_xlat11;
  let x_1163 : vec4<f32> = u_xlat1;
  u_xlat5 = ((x_1159 * vec3<f32>(x_1160.x, x_1160.x, x_1160.x)) + -(vec3<f32>(x_1163.x, x_1163.y, x_1163.z)));
  let x_1167 : vec3<f32> = u_xlat5;
  let x_1168 : vec3<f32> = u_xlat8;
  u_xlat18.x = dot(x_1167, x_1168);
  let x_1171 : f32 = u_xlat0;
  let x_1175 : f32 = u_xlat18.x;
  u_xlat18.x = ((-(x_1171) * 0.004f) + x_1175);
  let x_1179 : f32 = u_xlat18.x;
  u_xlat18.x = max(x_1179, 0.0f);
  let x_1182 : vec3<f32> = u_xlat5;
  let x_1183 : vec3<f32> = u_xlat5;
  u_xlat26 = dot(x_1182, x_1183);
  let x_1185 : f32 = u_xlat26;
  u_xlat26 = (x_1185 + 0.0001f);
  let x_1187 : f32 = u_xlat26;
  u_xlat26 = (1.0f / x_1187);
  let x_1189 : f32 = u_xlat26;
  let x_1191 : f32 = u_xlat18.x;
  u_xlat18.x = (x_1189 * x_1191);
  let x_1195 : f32 = u_xlat18.x;
  let x_1197 : f32 = u_xlat3.x;
  let x_1199 : f32 = u_xlat25;
  u_xlat25 = ((x_1195 * x_1197) + x_1199);
  let x_1204 : vec4<f32> = u_xlat3;
  let x_1207 : f32 = x_33.x_GlobalMipBias.x;
  let x_1208 : vec4<f32> = textureSampleBias(x_BlueNoiseTexture, sampler_PointRepeat, vec2<f32>(x_1204.z, x_1204.w), x_1207);
  u_xlat18.x = x_1208.w;
  let x_1212 : f32 = u_xlat18.x;
  u_xlat26 = (x_1212 + 0.984375f);
  let x_1215 : f32 = u_xlat26;
  u_xlat26 = fract(x_1215);
  let x_1217 : f32 = u_xlat26;
  u_xlat3.z = ((x_1217 * 2.0f) + -1.0f);
  let x_1222 : f32 = u_xlat18.x;
  u_xlat18.x = (x_1222 * 628.31854248f);
  let x_1226 : f32 = u_xlat3.z;
  let x_1229 : f32 = u_xlat3.z;
  u_xlat26 = ((-(x_1226) * x_1229) + 1.0f);
  let x_1232 : f32 = u_xlat26;
  u_xlat26 = sqrt(x_1232);
  let x_1235 : f32 = u_xlat18.x;
  u_xlat5.x = sin(x_1235);
  let x_1239 : f32 = u_xlat18.x;
  u_xlat6 = cos(x_1239);
  let x_1241 : f32 = u_xlat26;
  let x_1242 : f32 = u_xlat6;
  u_xlat3.x = (x_1241 * x_1242);
  let x_1245 : f32 = u_xlat26;
  let x_1247 : f32 = u_xlat5.x;
  u_xlat3.y = (x_1245 * x_1247);
  let x_1250 : vec3<f32> = u_xlat8;
  let x_1251 : vec4<f32> = u_xlat3;
  u_xlat18.x = dot(x_1250, vec3<f32>(x_1251.x, x_1251.y, x_1251.z));
  let x_1256 : f32 = u_xlat18.x;
  u_xlatb18 = (x_1256 >= 0.0f);
  let x_1258 : bool = u_xlatb18;
  u_xlat18.x = select(-1.0f, 1.0f, x_1258);
  let x_1261 : vec2<f32> = u_xlat18;
  let x_1263 : vec4<f32> = u_xlat3;
  let x_1265 : vec3<f32> = (vec3<f32>(x_1261.x, x_1261.x, x_1261.x) * vec3<f32>(x_1263.x, x_1263.y, x_1263.z));
  let x_1266 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_1265.x, x_1265.y, x_1265.z, x_1266.w);
  let x_1268 : vec4<f32> = u_xlat3;
  let x_1271 : vec4<f32> = x_33.x_SSAOParams;
  let x_1273 : vec3<f32> = (vec3<f32>(x_1268.x, x_1268.y, x_1268.z) * vec3<f32>(x_1271.y, x_1271.y, x_1271.y));
  let x_1274 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_1273.x, x_1273.y, x_1273.z, x_1274.w);
  let x_1276 : vec4<f32> = u_xlat3;
  let x_1281 : vec4<f32> = u_xlat1;
  let x_1283 : vec3<f32> = ((vec3<f32>(x_1276.x, x_1276.y, x_1276.z) * vec3<f32>(0.200000003f, 0.200000003f, 0.200000003f)) + vec3<f32>(x_1281.x, x_1281.y, x_1281.z));
  let x_1284 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_1283.x, x_1283.y, x_1283.z, x_1284.w);
  let x_1286 : vec4<f32> = u_xlat3;
  let x_1289 : vec4<f32> = x_33.x_CameraViewProjections[0i][1i];
  u_xlat18 = (vec2<f32>(x_1286.y, x_1286.y) * vec2<f32>(x_1289.x, x_1289.y));
  let x_1293 : vec4<f32> = x_33.x_CameraViewProjections[0i][0i];
  let x_1295 : vec4<f32> = u_xlat3;
  let x_1298 : vec2<f32> = u_xlat18;
  u_xlat18 = ((vec2<f32>(x_1293.x, x_1293.y) * vec2<f32>(x_1295.x, x_1295.x)) + x_1298);
  let x_1301 : vec4<f32> = x_33.x_CameraViewProjections[0i][2i];
  let x_1303 : vec4<f32> = u_xlat3;
  let x_1306 : vec2<f32> = u_xlat18;
  u_xlat18 = ((vec2<f32>(x_1301.x, x_1301.y) * vec2<f32>(x_1303.z, x_1303.z)) + x_1306);
  let x_1308 : vec3<f32> = u_xlat4;
  let x_1309 : vec4<f32> = u_xlat3;
  u_xlat3.x = dot(x_1308, vec3<f32>(x_1309.x, x_1309.y, x_1309.z));
  let x_1314 : f32 = u_xlat3.x;
  u_xlat11.x = (1.0f / -(x_1314));
  let x_1318 : vec2<f32> = u_xlat18;
  let x_1319 : vec3<f32> = u_xlat11;
  u_xlat18 = ((x_1318 * vec2<f32>(x_1319.x, x_1319.x)) + vec2<f32>(1.0f, 1.0f));
  let x_1323 : vec2<f32> = u_xlat18;
  u_xlat18 = (x_1323 * vec2<f32>(0.5f, 0.5f));
  let x_1325 : vec2<f32> = u_xlat18;
  u_xlat18 = clamp(x_1325, vec2<f32>(0.0f, 0.0f), vec2<f32>(1.0f, 1.0f));
  let x_1332 : vec2<f32> = u_xlat18;
  let x_1334 : f32 = x_33.x_GlobalMipBias.x;
  let x_1335 : vec4<f32> = textureSampleBias(x_CameraDepthTexture, sampler_CameraDepthTexture, x_1332, x_1334);
  u_xlat11.x = x_1335.x;
  let x_1339 : f32 = x_33.x_ZBufferParams.z;
  let x_1341 : f32 = u_xlat11.x;
  let x_1344 : f32 = x_33.x_ZBufferParams.w;
  u_xlat19 = ((x_1339 * x_1341) + x_1344);
  let x_1346 : f32 = u_xlat19;
  u_xlat19 = (1.0f / x_1346);
  let x_1348 : f32 = u_xlat19;
  let x_1351 : f32 = u_xlat3.x;
  u_xlat3.x = (-(x_1348) + -(x_1351));
  let x_1356 : f32 = u_xlat3.x;
  let x_1359 : f32 = x_33.x_SSAOParams.y;
  u_xlatb3.x = (abs(x_1356) < x_1359);
  let x_1363 : f32 = u_xlat11.x;
  u_xlatb3.y = (0.00001f < x_1363);
  let x_1367 : bool = u_xlatb3.x;
  u_xlat3.x = select(0.0f, 1.0f, x_1367);
  let x_1371 : bool = u_xlatb3.y;
  u_xlat3.y = select(0.0f, 1.0f, x_1371);
  let x_1375 : f32 = u_xlat3.y;
  let x_1377 : f32 = u_xlat3.x;
  u_xlat3.x = (x_1375 * x_1377);
  let x_1381 : f32 = u_xlat18.y;
  u_xlat26 = (-(x_1381) + 1.0f);
  let x_1384 : f32 = u_xlat19;
  let x_1386 : f32 = x_33.x_ProjectionParams2.x;
  u_xlat11.x = (x_1384 * x_1386);
  let x_1390 : vec4<f32> = x_33.x_CameraViewXExtent[0i];
  let x_1392 : vec2<f32> = u_xlat18;
  let x_1396 : vec4<f32> = x_33.x_CameraViewTopLeftCorner[0i];
  u_xlat5 = ((vec3<f32>(x_1390.x, x_1390.y, x_1390.z) * vec3<f32>(x_1392.x, x_1392.x, x_1392.x)) + vec3<f32>(x_1396.x, x_1396.y, x_1396.z));
  let x_1400 : vec4<f32> = x_33.x_CameraViewYExtent[0i];
  let x_1402 : f32 = u_xlat26;
  let x_1405 : vec3<f32> = u_xlat5;
  u_xlat5 = ((vec3<f32>(x_1400.x, x_1400.y, x_1400.z) * vec3<f32>(x_1402, x_1402, x_1402)) + x_1405);
  let x_1407 : vec3<f32> = u_xlat5;
  let x_1408 : vec3<f32> = u_xlat11;
  let x_1411 : vec4<f32> = u_xlat1;
  u_xlat11 = ((x_1407 * vec3<f32>(x_1408.x, x_1408.x, x_1408.x)) + -(vec3<f32>(x_1411.x, x_1411.y, x_1411.z)));
  let x_1415 : vec3<f32> = u_xlat11;
  let x_1416 : vec3<f32> = u_xlat8;
  u_xlat18.x = dot(x_1415, x_1416);
  let x_1419 : f32 = u_xlat0;
  let x_1423 : f32 = u_xlat18.x;
  u_xlat18.x = ((-(x_1419) * 0.004f) + x_1423);
  let x_1427 : f32 = u_xlat18.x;
  u_xlat18.x = max(x_1427, 0.0f);
  let x_1430 : vec3<f32> = u_xlat11;
  let x_1431 : vec3<f32> = u_xlat11;
  u_xlat26 = dot(x_1430, x_1431);
  let x_1433 : f32 = u_xlat26;
  u_xlat26 = (x_1433 + 0.0001f);
  let x_1435 : f32 = u_xlat26;
  u_xlat26 = (1.0f / x_1435);
  let x_1437 : f32 = u_xlat26;
  let x_1439 : f32 = u_xlat18.x;
  u_xlat18.x = (x_1437 * x_1439);
  let x_1443 : f32 = u_xlat18.x;
  let x_1445 : f32 = u_xlat3.x;
  let x_1447 : f32 = u_xlat25;
  u_xlat25 = ((x_1443 * x_1445) + x_1447);
  let x_1449 : vec4<f32> = u_xlat2;
  let x_1452 : vec4<f32> = x_33.x_SSAOBlueNoiseParams;
  u_xlat3 = ((vec4<f32>(x_1449.x, x_1449.y, x_1449.x, x_1449.y) * vec4<f32>(x_1452.x, x_1452.y, x_1452.x, x_1452.y)) + vec4<f32>(0.416666687f, 0.416666687f, 0.5f, 0.5f));
  let x_1461 : vec4<f32> = u_xlat3;
  let x_1464 : f32 = x_33.x_GlobalMipBias.x;
  let x_1465 : vec4<f32> = textureSampleBias(x_BlueNoiseTexture, sampler_PointRepeat, vec2<f32>(x_1461.x, x_1461.y), x_1464);
  u_xlat18.x = x_1465.w;
  let x_1468 : vec2<f32> = u_xlat18;
  u_xlat18 = (vec2<f32>(x_1468.x, x_1468.x) + vec2<f32>(0.07421875f, 0.10546875f));
  let x_1475 : f32 = u_xlat18.x;
  u_xlat18.x = fract(x_1475);
  let x_1479 : f32 = u_xlat18.x;
  u_xlat5.z = ((x_1479 * 2.0f) + -1.0f);
  let x_1484 : f32 = u_xlat18.y;
  u_xlat18.x = (x_1484 * 628.31854248f);
  let x_1488 : f32 = u_xlat5.z;
  let x_1491 : f32 = u_xlat5.z;
  u_xlat26 = ((-(x_1488) * x_1491) + 1.0f);
  let x_1494 : f32 = u_xlat26;
  u_xlat26 = sqrt(x_1494);
  let x_1497 : f32 = u_xlat18.x;
  u_xlat3.x = sin(x_1497);
  let x_1501 : f32 = u_xlat18.x;
  u_xlat6 = cos(x_1501);
  let x_1503 : f32 = u_xlat26;
  let x_1504 : f32 = u_xlat6;
  u_xlat5.x = (x_1503 * x_1504);
  let x_1507 : f32 = u_xlat26;
  let x_1509 : f32 = u_xlat3.x;
  u_xlat5.y = (x_1507 * x_1509);
  let x_1512 : vec3<f32> = u_xlat8;
  let x_1513 : vec3<f32> = u_xlat5;
  u_xlat18.x = dot(x_1512, x_1513);
  let x_1517 : f32 = u_xlat18.x;
  u_xlatb18 = (x_1517 >= 0.0f);
  let x_1519 : bool = u_xlatb18;
  u_xlat18.x = select(-1.0f, 1.0f, x_1519);
  let x_1522 : vec2<f32> = u_xlat18;
  let x_1524 : vec3<f32> = u_xlat5;
  u_xlat5 = (vec3<f32>(x_1522.x, x_1522.x, x_1522.x) * x_1524);
  let x_1526 : vec3<f32> = u_xlat5;
  let x_1528 : vec4<f32> = x_33.x_SSAOParams;
  u_xlat5 = (x_1526 * vec3<f32>(x_1528.y, x_1528.y, x_1528.y));
  let x_1531 : vec3<f32> = u_xlat5;
  let x_1535 : vec4<f32> = u_xlat1;
  u_xlat5 = ((x_1531 * vec3<f32>(0.256250024f, 0.256250024f, 0.256250024f)) + vec3<f32>(x_1535.x, x_1535.y, x_1535.z));
  let x_1538 : vec3<f32> = u_xlat5;
  let x_1541 : vec4<f32> = x_33.x_CameraViewProjections[0i][1i];
  u_xlat18 = (vec2<f32>(x_1538.y, x_1538.y) * vec2<f32>(x_1541.x, x_1541.y));
  let x_1545 : vec4<f32> = x_33.x_CameraViewProjections[0i][0i];
  let x_1547 : vec3<f32> = u_xlat5;
  let x_1550 : vec2<f32> = u_xlat18;
  u_xlat18 = ((vec2<f32>(x_1545.x, x_1545.y) * vec2<f32>(x_1547.x, x_1547.x)) + x_1550);
  let x_1553 : vec4<f32> = x_33.x_CameraViewProjections[0i][2i];
  let x_1555 : vec3<f32> = u_xlat5;
  let x_1558 : vec2<f32> = u_xlat18;
  u_xlat18 = ((vec2<f32>(x_1553.x, x_1553.y) * vec2<f32>(x_1555.z, x_1555.z)) + x_1558);
  let x_1560 : vec3<f32> = u_xlat4;
  let x_1561 : vec3<f32> = u_xlat5;
  u_xlat3.x = dot(x_1560, x_1561);
  let x_1565 : f32 = u_xlat3.x;
  u_xlat11.x = (1.0f / -(x_1565));
  let x_1569 : vec2<f32> = u_xlat18;
  let x_1570 : vec3<f32> = u_xlat11;
  u_xlat18 = ((x_1569 * vec2<f32>(x_1570.x, x_1570.x)) + vec2<f32>(1.0f, 1.0f));
  let x_1574 : vec2<f32> = u_xlat18;
  u_xlat18 = (x_1574 * vec2<f32>(0.5f, 0.5f));
  let x_1576 : vec2<f32> = u_xlat18;
  u_xlat18 = clamp(x_1576, vec2<f32>(0.0f, 0.0f), vec2<f32>(1.0f, 1.0f));
  let x_1583 : vec2<f32> = u_xlat18;
  let x_1585 : f32 = x_33.x_GlobalMipBias.x;
  let x_1586 : vec4<f32> = textureSampleBias(x_CameraDepthTexture, sampler_CameraDepthTexture, x_1583, x_1585);
  u_xlat11.x = x_1586.x;
  let x_1590 : f32 = x_33.x_ZBufferParams.z;
  let x_1592 : f32 = u_xlat11.x;
  let x_1595 : f32 = x_33.x_ZBufferParams.w;
  u_xlat28 = ((x_1590 * x_1592) + x_1595);
  let x_1597 : f32 = u_xlat28;
  u_xlat28 = (1.0f / x_1597);
  let x_1600 : f32 = u_xlat3.x;
  let x_1602 : f32 = u_xlat28;
  u_xlat3.x = (-(x_1600) + -(x_1602));
  let x_1607 : f32 = u_xlat3.x;
  let x_1610 : f32 = x_33.x_SSAOParams.y;
  u_xlatb3.x = (abs(x_1607) < x_1610);
  let x_1614 : f32 = u_xlat11.x;
  u_xlatb3.y = (0.00001f < x_1614);
  let x_1618 : bool = u_xlatb3.x;
  u_xlat3.x = select(0.0f, 1.0f, x_1618);
  let x_1622 : bool = u_xlatb3.y;
  u_xlat3.y = select(0.0f, 1.0f, x_1622);
  let x_1626 : f32 = u_xlat3.y;
  let x_1628 : f32 = u_xlat3.x;
  u_xlat3.x = (x_1626 * x_1628);
  let x_1632 : f32 = u_xlat18.y;
  u_xlat26 = (-(x_1632) + 1.0f);
  let x_1635 : f32 = u_xlat28;
  let x_1637 : f32 = x_33.x_ProjectionParams2.x;
  u_xlat11.x = (x_1635 * x_1637);
  let x_1641 : vec4<f32> = x_33.x_CameraViewXExtent[0i];
  let x_1643 : vec2<f32> = u_xlat18;
  let x_1647 : vec4<f32> = x_33.x_CameraViewTopLeftCorner[0i];
  u_xlat5 = ((vec3<f32>(x_1641.x, x_1641.y, x_1641.z) * vec3<f32>(x_1643.x, x_1643.x, x_1643.x)) + vec3<f32>(x_1647.x, x_1647.y, x_1647.z));
  let x_1651 : vec4<f32> = x_33.x_CameraViewYExtent[0i];
  let x_1653 : f32 = u_xlat26;
  let x_1656 : vec3<f32> = u_xlat5;
  u_xlat5 = ((vec3<f32>(x_1651.x, x_1651.y, x_1651.z) * vec3<f32>(x_1653, x_1653, x_1653)) + x_1656);
  let x_1658 : vec3<f32> = u_xlat5;
  let x_1659 : vec3<f32> = u_xlat11;
  let x_1662 : vec4<f32> = u_xlat1;
  u_xlat5 = ((x_1658 * vec3<f32>(x_1659.x, x_1659.x, x_1659.x)) + -(vec3<f32>(x_1662.x, x_1662.y, x_1662.z)));
  let x_1666 : vec3<f32> = u_xlat5;
  let x_1667 : vec3<f32> = u_xlat8;
  u_xlat18.x = dot(x_1666, x_1667);
  let x_1670 : f32 = u_xlat0;
  let x_1674 : f32 = u_xlat18.x;
  u_xlat18.x = ((-(x_1670) * 0.004f) + x_1674);
  let x_1678 : f32 = u_xlat18.x;
  u_xlat18.x = max(x_1678, 0.0f);
  let x_1681 : vec3<f32> = u_xlat5;
  let x_1682 : vec3<f32> = u_xlat5;
  u_xlat26 = dot(x_1681, x_1682);
  let x_1684 : f32 = u_xlat26;
  u_xlat26 = (x_1684 + 0.0001f);
  let x_1686 : f32 = u_xlat26;
  u_xlat26 = (1.0f / x_1686);
  let x_1688 : f32 = u_xlat26;
  let x_1690 : f32 = u_xlat18.x;
  u_xlat18.x = (x_1688 * x_1690);
  let x_1694 : f32 = u_xlat18.x;
  let x_1696 : f32 = u_xlat3.x;
  let x_1698 : f32 = u_xlat25;
  u_xlat25 = ((x_1694 * x_1696) + x_1698);
  let x_1703 : vec4<f32> = u_xlat3;
  let x_1706 : f32 = x_33.x_GlobalMipBias.x;
  let x_1707 : vec4<f32> = textureSampleBias(x_BlueNoiseTexture, sampler_PointRepeat, vec2<f32>(x_1703.z, x_1703.w), x_1706);
  u_xlat18.x = x_1707.w;
  let x_1710 : vec2<f32> = u_xlat18;
  u_xlat18 = (vec2<f32>(x_1710.x, x_1710.x) + vec2<f32>(0.23828125f, 0.640625f));
  let x_1717 : f32 = u_xlat18.x;
  u_xlat18.x = fract(x_1717);
  let x_1721 : f32 = u_xlat18.x;
  u_xlat3.z = ((x_1721 * 2.0f) + -1.0f);
  let x_1726 : f32 = u_xlat18.y;
  u_xlat18.x = (x_1726 * 628.31854248f);
  let x_1730 : f32 = u_xlat3.z;
  let x_1733 : f32 = u_xlat3.z;
  u_xlat26 = ((-(x_1730) * x_1733) + 1.0f);
  let x_1736 : f32 = u_xlat26;
  u_xlat26 = sqrt(x_1736);
  let x_1739 : f32 = u_xlat18.x;
  u_xlat5.x = sin(x_1739);
  let x_1743 : f32 = u_xlat18.x;
  u_xlat6 = cos(x_1743);
  let x_1745 : f32 = u_xlat26;
  let x_1746 : f32 = u_xlat6;
  u_xlat3.x = (x_1745 * x_1746);
  let x_1749 : f32 = u_xlat26;
  let x_1751 : f32 = u_xlat5.x;
  u_xlat3.y = (x_1749 * x_1751);
  let x_1754 : vec3<f32> = u_xlat8;
  let x_1755 : vec4<f32> = u_xlat3;
  u_xlat18.x = dot(x_1754, vec3<f32>(x_1755.x, x_1755.y, x_1755.z));
  let x_1760 : f32 = u_xlat18.x;
  u_xlatb18 = (x_1760 >= 0.0f);
  let x_1762 : bool = u_xlatb18;
  u_xlat18.x = select(-1.0f, 1.0f, x_1762);
  let x_1765 : vec2<f32> = u_xlat18;
  let x_1767 : vec4<f32> = u_xlat3;
  let x_1769 : vec3<f32> = (vec3<f32>(x_1765.x, x_1765.x, x_1765.x) * vec3<f32>(x_1767.x, x_1767.y, x_1767.z));
  let x_1770 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_1769.x, x_1769.y, x_1769.z, x_1770.w);
  let x_1772 : vec4<f32> = u_xlat3;
  let x_1775 : vec4<f32> = x_33.x_SSAOParams;
  let x_1777 : vec3<f32> = (vec3<f32>(x_1772.x, x_1772.y, x_1772.z) * vec3<f32>(x_1775.y, x_1775.y, x_1775.y));
  let x_1778 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_1777.x, x_1777.y, x_1777.z, x_1778.w);
  let x_1780 : vec4<f32> = u_xlat3;
  let x_1785 : vec4<f32> = u_xlat1;
  let x_1787 : vec3<f32> = ((vec3<f32>(x_1780.x, x_1780.y, x_1780.z) * vec3<f32>(0.324999988f, 0.324999988f, 0.324999988f)) + vec3<f32>(x_1785.x, x_1785.y, x_1785.z));
  let x_1788 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_1787.x, x_1787.y, x_1787.z, x_1788.w);
  let x_1790 : vec4<f32> = u_xlat3;
  let x_1793 : vec4<f32> = x_33.x_CameraViewProjections[0i][1i];
  u_xlat18 = (vec2<f32>(x_1790.y, x_1790.y) * vec2<f32>(x_1793.x, x_1793.y));
  let x_1797 : vec4<f32> = x_33.x_CameraViewProjections[0i][0i];
  let x_1799 : vec4<f32> = u_xlat3;
  let x_1802 : vec2<f32> = u_xlat18;
  u_xlat18 = ((vec2<f32>(x_1797.x, x_1797.y) * vec2<f32>(x_1799.x, x_1799.x)) + x_1802);
  let x_1805 : vec4<f32> = x_33.x_CameraViewProjections[0i][2i];
  let x_1807 : vec4<f32> = u_xlat3;
  let x_1810 : vec2<f32> = u_xlat18;
  u_xlat18 = ((vec2<f32>(x_1805.x, x_1805.y) * vec2<f32>(x_1807.z, x_1807.z)) + x_1810);
  let x_1812 : vec3<f32> = u_xlat4;
  let x_1813 : vec4<f32> = u_xlat3;
  u_xlat3.x = dot(x_1812, vec3<f32>(x_1813.x, x_1813.y, x_1813.z));
  let x_1818 : f32 = u_xlat3.x;
  u_xlat11.x = (1.0f / -(x_1818));
  let x_1822 : vec2<f32> = u_xlat18;
  let x_1823 : vec3<f32> = u_xlat11;
  u_xlat18 = ((x_1822 * vec2<f32>(x_1823.x, x_1823.x)) + vec2<f32>(1.0f, 1.0f));
  let x_1827 : vec2<f32> = u_xlat18;
  u_xlat18 = (x_1827 * vec2<f32>(0.5f, 0.5f));
  let x_1829 : vec2<f32> = u_xlat18;
  u_xlat18 = clamp(x_1829, vec2<f32>(0.0f, 0.0f), vec2<f32>(1.0f, 1.0f));
  let x_1836 : vec2<f32> = u_xlat18;
  let x_1838 : f32 = x_33.x_GlobalMipBias.x;
  let x_1839 : vec4<f32> = textureSampleBias(x_CameraDepthTexture, sampler_CameraDepthTexture, x_1836, x_1838);
  u_xlat11.x = x_1839.x;
  let x_1843 : f32 = x_33.x_ZBufferParams.z;
  let x_1845 : f32 = u_xlat11.x;
  let x_1848 : f32 = x_33.x_ZBufferParams.w;
  u_xlat19 = ((x_1843 * x_1845) + x_1848);
  let x_1850 : f32 = u_xlat19;
  u_xlat19 = (1.0f / x_1850);
  let x_1852 : f32 = u_xlat19;
  let x_1855 : f32 = u_xlat3.x;
  u_xlat3.x = (-(x_1852) + -(x_1855));
  let x_1860 : f32 = u_xlat3.x;
  let x_1863 : f32 = x_33.x_SSAOParams.y;
  u_xlatb3.x = (abs(x_1860) < x_1863);
  let x_1867 : f32 = u_xlat11.x;
  u_xlatb3.y = (0.00001f < x_1867);
  let x_1871 : bool = u_xlatb3.x;
  u_xlat3.x = select(0.0f, 1.0f, x_1871);
  let x_1875 : bool = u_xlatb3.y;
  u_xlat3.y = select(0.0f, 1.0f, x_1875);
  let x_1879 : f32 = u_xlat3.y;
  let x_1881 : f32 = u_xlat3.x;
  u_xlat3.x = (x_1879 * x_1881);
  let x_1885 : f32 = u_xlat18.y;
  u_xlat26 = (-(x_1885) + 1.0f);
  let x_1888 : f32 = u_xlat19;
  let x_1890 : f32 = x_33.x_ProjectionParams2.x;
  u_xlat11.x = (x_1888 * x_1890);
  let x_1894 : vec4<f32> = x_33.x_CameraViewXExtent[0i];
  let x_1896 : vec2<f32> = u_xlat18;
  let x_1900 : vec4<f32> = x_33.x_CameraViewTopLeftCorner[0i];
  u_xlat5 = ((vec3<f32>(x_1894.x, x_1894.y, x_1894.z) * vec3<f32>(x_1896.x, x_1896.x, x_1896.x)) + vec3<f32>(x_1900.x, x_1900.y, x_1900.z));
  let x_1904 : vec4<f32> = x_33.x_CameraViewYExtent[0i];
  let x_1906 : f32 = u_xlat26;
  let x_1909 : vec3<f32> = u_xlat5;
  u_xlat5 = ((vec3<f32>(x_1904.x, x_1904.y, x_1904.z) * vec3<f32>(x_1906, x_1906, x_1906)) + x_1909);
  let x_1911 : vec3<f32> = u_xlat5;
  let x_1912 : vec3<f32> = u_xlat11;
  let x_1915 : vec4<f32> = u_xlat1;
  u_xlat11 = ((x_1911 * vec3<f32>(x_1912.x, x_1912.x, x_1912.x)) + -(vec3<f32>(x_1915.x, x_1915.y, x_1915.z)));
  let x_1919 : vec3<f32> = u_xlat11;
  let x_1920 : vec3<f32> = u_xlat8;
  u_xlat18.x = dot(x_1919, x_1920);
  let x_1923 : f32 = u_xlat0;
  let x_1927 : f32 = u_xlat18.x;
  u_xlat18.x = ((-(x_1923) * 0.004f) + x_1927);
  let x_1931 : f32 = u_xlat18.x;
  u_xlat18.x = max(x_1931, 0.0f);
  let x_1934 : vec3<f32> = u_xlat11;
  let x_1935 : vec3<f32> = u_xlat11;
  u_xlat26 = dot(x_1934, x_1935);
  let x_1937 : f32 = u_xlat26;
  u_xlat26 = (x_1937 + 0.0001f);
  let x_1939 : f32 = u_xlat26;
  u_xlat26 = (1.0f / x_1939);
  let x_1941 : f32 = u_xlat26;
  let x_1943 : f32 = u_xlat18.x;
  u_xlat18.x = (x_1941 * x_1943);
  let x_1947 : f32 = u_xlat18.x;
  let x_1949 : f32 = u_xlat3.x;
  let x_1951 : f32 = u_xlat25;
  u_xlat25 = ((x_1947 * x_1949) + x_1951);
  let x_1953 : vec4<f32> = u_xlat2;
  let x_1956 : vec4<f32> = x_33.x_SSAOBlueNoiseParams;
  u_xlat3 = ((vec4<f32>(x_1953.x, x_1953.y, x_1953.x, x_1953.y) * vec4<f32>(x_1956.x, x_1956.y, x_1956.x, x_1956.y)) + vec4<f32>(0.583333373f, 0.583333373f, 0.666666687f, 0.666666687f));
  let x_1966 : vec4<f32> = u_xlat3;
  let x_1969 : f32 = x_33.x_GlobalMipBias.x;
  let x_1970 : vec4<f32> = textureSampleBias(x_BlueNoiseTexture, sampler_PointRepeat, vec2<f32>(x_1966.x, x_1966.y), x_1969);
  u_xlat18.x = x_1970.w;
  let x_1973 : vec2<f32> = u_xlat18;
  u_xlat18 = (vec2<f32>(x_1973.x, x_1973.x) + vec2<f32>(0.640625f, 0.74609375f));
  let x_1979 : f32 = u_xlat18.x;
  u_xlat18.x = fract(x_1979);
  let x_1983 : f32 = u_xlat18.x;
  u_xlat5.z = ((x_1983 * 2.0f) + -1.0f);
  let x_1988 : f32 = u_xlat18.y;
  u_xlat18.x = (x_1988 * 628.31854248f);
  let x_1992 : f32 = u_xlat5.z;
  let x_1995 : f32 = u_xlat5.z;
  u_xlat26 = ((-(x_1992) * x_1995) + 1.0f);
  let x_1998 : f32 = u_xlat26;
  u_xlat26 = sqrt(x_1998);
  let x_2001 : f32 = u_xlat18.x;
  u_xlat3.x = sin(x_2001);
  let x_2005 : f32 = u_xlat18.x;
  u_xlat6 = cos(x_2005);
  let x_2007 : f32 = u_xlat26;
  let x_2008 : f32 = u_xlat6;
  u_xlat5.x = (x_2007 * x_2008);
  let x_2011 : f32 = u_xlat26;
  let x_2013 : f32 = u_xlat3.x;
  u_xlat5.y = (x_2011 * x_2013);
  let x_2016 : vec3<f32> = u_xlat8;
  let x_2017 : vec3<f32> = u_xlat5;
  u_xlat18.x = dot(x_2016, x_2017);
  let x_2021 : f32 = u_xlat18.x;
  u_xlatb18 = (x_2021 >= 0.0f);
  let x_2023 : bool = u_xlatb18;
  u_xlat18.x = select(-1.0f, 1.0f, x_2023);
  let x_2026 : vec2<f32> = u_xlat18;
  let x_2028 : vec3<f32> = u_xlat5;
  u_xlat5 = (vec3<f32>(x_2026.x, x_2026.x, x_2026.x) * x_2028);
  let x_2030 : vec3<f32> = u_xlat5;
  let x_2032 : vec4<f32> = x_33.x_SSAOParams;
  u_xlat5 = (x_2030 * vec3<f32>(x_2032.y, x_2032.y, x_2032.y));
  let x_2035 : vec3<f32> = u_xlat5;
  let x_2039 : vec4<f32> = u_xlat1;
  u_xlat5 = ((x_2035 * vec3<f32>(0.40625003f, 0.40625003f, 0.40625003f)) + vec3<f32>(x_2039.x, x_2039.y, x_2039.z));
  let x_2042 : vec3<f32> = u_xlat5;
  let x_2045 : vec4<f32> = x_33.x_CameraViewProjections[0i][1i];
  u_xlat18 = (vec2<f32>(x_2042.y, x_2042.y) * vec2<f32>(x_2045.x, x_2045.y));
  let x_2049 : vec4<f32> = x_33.x_CameraViewProjections[0i][0i];
  let x_2051 : vec3<f32> = u_xlat5;
  let x_2054 : vec2<f32> = u_xlat18;
  u_xlat18 = ((vec2<f32>(x_2049.x, x_2049.y) * vec2<f32>(x_2051.x, x_2051.x)) + x_2054);
  let x_2057 : vec4<f32> = x_33.x_CameraViewProjections[0i][2i];
  let x_2059 : vec3<f32> = u_xlat5;
  let x_2062 : vec2<f32> = u_xlat18;
  u_xlat18 = ((vec2<f32>(x_2057.x, x_2057.y) * vec2<f32>(x_2059.z, x_2059.z)) + x_2062);
  let x_2064 : vec3<f32> = u_xlat4;
  let x_2065 : vec3<f32> = u_xlat5;
  u_xlat3.x = dot(x_2064, x_2065);
  let x_2069 : f32 = u_xlat3.x;
  u_xlat11.x = (1.0f / -(x_2069));
  let x_2073 : vec2<f32> = u_xlat18;
  let x_2074 : vec3<f32> = u_xlat11;
  u_xlat18 = ((x_2073 * vec2<f32>(x_2074.x, x_2074.x)) + vec2<f32>(1.0f, 1.0f));
  let x_2078 : vec2<f32> = u_xlat18;
  u_xlat18 = (x_2078 * vec2<f32>(0.5f, 0.5f));
  let x_2080 : vec2<f32> = u_xlat18;
  u_xlat18 = clamp(x_2080, vec2<f32>(0.0f, 0.0f), vec2<f32>(1.0f, 1.0f));
  let x_2087 : vec2<f32> = u_xlat18;
  let x_2089 : f32 = x_33.x_GlobalMipBias.x;
  let x_2090 : vec4<f32> = textureSampleBias(x_CameraDepthTexture, sampler_CameraDepthTexture, x_2087, x_2089);
  u_xlat11.x = x_2090.x;
  let x_2094 : f32 = x_33.x_ZBufferParams.z;
  let x_2096 : f32 = u_xlat11.x;
  let x_2099 : f32 = x_33.x_ZBufferParams.w;
  u_xlat28 = ((x_2094 * x_2096) + x_2099);
  let x_2101 : f32 = u_xlat28;
  u_xlat28 = (1.0f / x_2101);
  let x_2104 : f32 = u_xlat3.x;
  let x_2106 : f32 = u_xlat28;
  u_xlat3.x = (-(x_2104) + -(x_2106));
  let x_2111 : f32 = u_xlat3.x;
  let x_2114 : f32 = x_33.x_SSAOParams.y;
  u_xlatb3.x = (abs(x_2111) < x_2114);
  let x_2118 : f32 = u_xlat11.x;
  u_xlatb3.y = (0.00001f < x_2118);
  let x_2122 : bool = u_xlatb3.x;
  u_xlat3.x = select(0.0f, 1.0f, x_2122);
  let x_2126 : bool = u_xlatb3.y;
  u_xlat3.y = select(0.0f, 1.0f, x_2126);
  let x_2130 : f32 = u_xlat3.y;
  let x_2132 : f32 = u_xlat3.x;
  u_xlat3.x = (x_2130 * x_2132);
  let x_2136 : f32 = u_xlat18.y;
  u_xlat26 = (-(x_2136) + 1.0f);
  let x_2139 : f32 = u_xlat28;
  let x_2141 : f32 = x_33.x_ProjectionParams2.x;
  u_xlat11.x = (x_2139 * x_2141);
  let x_2145 : vec4<f32> = x_33.x_CameraViewXExtent[0i];
  let x_2147 : vec2<f32> = u_xlat18;
  let x_2151 : vec4<f32> = x_33.x_CameraViewTopLeftCorner[0i];
  u_xlat5 = ((vec3<f32>(x_2145.x, x_2145.y, x_2145.z) * vec3<f32>(x_2147.x, x_2147.x, x_2147.x)) + vec3<f32>(x_2151.x, x_2151.y, x_2151.z));
  let x_2155 : vec4<f32> = x_33.x_CameraViewYExtent[0i];
  let x_2157 : f32 = u_xlat26;
  let x_2160 : vec3<f32> = u_xlat5;
  u_xlat5 = ((vec3<f32>(x_2155.x, x_2155.y, x_2155.z) * vec3<f32>(x_2157, x_2157, x_2157)) + x_2160);
  let x_2162 : vec3<f32> = u_xlat5;
  let x_2163 : vec3<f32> = u_xlat11;
  let x_2166 : vec4<f32> = u_xlat1;
  u_xlat5 = ((x_2162 * vec3<f32>(x_2163.x, x_2163.x, x_2163.x)) + -(vec3<f32>(x_2166.x, x_2166.y, x_2166.z)));
  let x_2170 : vec3<f32> = u_xlat5;
  let x_2171 : vec3<f32> = u_xlat8;
  u_xlat18.x = dot(x_2170, x_2171);
  let x_2174 : f32 = u_xlat0;
  let x_2178 : f32 = u_xlat18.x;
  u_xlat18.x = ((-(x_2174) * 0.004f) + x_2178);
  let x_2182 : f32 = u_xlat18.x;
  u_xlat18.x = max(x_2182, 0.0f);
  let x_2185 : vec3<f32> = u_xlat5;
  let x_2186 : vec3<f32> = u_xlat5;
  u_xlat26 = dot(x_2185, x_2186);
  let x_2188 : f32 = u_xlat26;
  u_xlat26 = (x_2188 + 0.0001f);
  let x_2190 : f32 = u_xlat26;
  u_xlat26 = (1.0f / x_2190);
  let x_2192 : f32 = u_xlat26;
  let x_2194 : f32 = u_xlat18.x;
  u_xlat18.x = (x_2192 * x_2194);
  let x_2198 : f32 = u_xlat18.x;
  let x_2200 : f32 = u_xlat3.x;
  let x_2202 : f32 = u_xlat25;
  u_xlat25 = ((x_2198 * x_2200) + x_2202);
  let x_2207 : vec4<f32> = u_xlat3;
  let x_2210 : f32 = x_33.x_GlobalMipBias.x;
  let x_2211 : vec4<f32> = textureSampleBias(x_BlueNoiseTexture, sampler_PointRepeat, vec2<f32>(x_2207.z, x_2207.w), x_2210);
  u_xlat18.x = x_2211.w;
  let x_2214 : vec2<f32> = u_xlat18;
  u_xlat18 = (vec2<f32>(x_2214.x, x_2214.x) + vec2<f32>(0.359375f, 0.6796875f));
  let x_2221 : f32 = u_xlat18.x;
  u_xlat18.x = fract(x_2221);
  let x_2225 : f32 = u_xlat18.x;
  u_xlat3.z = ((x_2225 * 2.0f) + -1.0f);
  let x_2230 : f32 = u_xlat18.y;
  u_xlat18.x = (x_2230 * 628.31854248f);
  let x_2234 : f32 = u_xlat3.z;
  let x_2237 : f32 = u_xlat3.z;
  u_xlat26 = ((-(x_2234) * x_2237) + 1.0f);
  let x_2240 : f32 = u_xlat26;
  u_xlat26 = sqrt(x_2240);
  let x_2243 : f32 = u_xlat18.x;
  u_xlat5.x = sin(x_2243);
  let x_2247 : f32 = u_xlat18.x;
  u_xlat6 = cos(x_2247);
  let x_2249 : f32 = u_xlat26;
  let x_2250 : f32 = u_xlat6;
  u_xlat3.x = (x_2249 * x_2250);
  let x_2253 : f32 = u_xlat26;
  let x_2255 : f32 = u_xlat5.x;
  u_xlat3.y = (x_2253 * x_2255);
  let x_2258 : vec3<f32> = u_xlat8;
  let x_2259 : vec4<f32> = u_xlat3;
  u_xlat18.x = dot(x_2258, vec3<f32>(x_2259.x, x_2259.y, x_2259.z));
  let x_2264 : f32 = u_xlat18.x;
  u_xlatb18 = (x_2264 >= 0.0f);
  let x_2266 : bool = u_xlatb18;
  u_xlat18.x = select(-1.0f, 1.0f, x_2266);
  let x_2269 : vec2<f32> = u_xlat18;
  let x_2271 : vec4<f32> = u_xlat3;
  let x_2273 : vec3<f32> = (vec3<f32>(x_2269.x, x_2269.x, x_2269.x) * vec3<f32>(x_2271.x, x_2271.y, x_2271.z));
  let x_2274 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_2273.x, x_2273.y, x_2273.z, x_2274.w);
  let x_2276 : vec4<f32> = u_xlat3;
  let x_2279 : vec4<f32> = x_33.x_SSAOParams;
  let x_2281 : vec3<f32> = (vec3<f32>(x_2276.x, x_2276.y, x_2276.z) * vec3<f32>(x_2279.y, x_2279.y, x_2279.y));
  let x_2282 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_2281.x, x_2281.y, x_2281.z, x_2282.w);
  let x_2284 : vec4<f32> = u_xlat3;
  let x_2288 : vec4<f32> = u_xlat1;
  let x_2290 : vec3<f32> = ((vec3<f32>(x_2284.x, x_2284.y, x_2284.z) * vec3<f32>(0.5f, 0.5f, 0.5f)) + vec3<f32>(x_2288.x, x_2288.y, x_2288.z));
  let x_2291 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_2290.x, x_2290.y, x_2290.z, x_2291.w);
  let x_2293 : vec4<f32> = u_xlat3;
  let x_2296 : vec4<f32> = x_33.x_CameraViewProjections[0i][1i];
  u_xlat18 = (vec2<f32>(x_2293.y, x_2293.y) * vec2<f32>(x_2296.x, x_2296.y));
  let x_2300 : vec4<f32> = x_33.x_CameraViewProjections[0i][0i];
  let x_2302 : vec4<f32> = u_xlat3;
  let x_2305 : vec2<f32> = u_xlat18;
  u_xlat18 = ((vec2<f32>(x_2300.x, x_2300.y) * vec2<f32>(x_2302.x, x_2302.x)) + x_2305);
  let x_2308 : vec4<f32> = x_33.x_CameraViewProjections[0i][2i];
  let x_2310 : vec4<f32> = u_xlat3;
  let x_2313 : vec2<f32> = u_xlat18;
  u_xlat18 = ((vec2<f32>(x_2308.x, x_2308.y) * vec2<f32>(x_2310.z, x_2310.z)) + x_2313);
  let x_2315 : vec3<f32> = u_xlat4;
  let x_2316 : vec4<f32> = u_xlat3;
  u_xlat3.x = dot(x_2315, vec3<f32>(x_2316.x, x_2316.y, x_2316.z));
  let x_2321 : f32 = u_xlat3.x;
  u_xlat11.x = (1.0f / -(x_2321));
  let x_2325 : vec2<f32> = u_xlat18;
  let x_2326 : vec3<f32> = u_xlat11;
  u_xlat18 = ((x_2325 * vec2<f32>(x_2326.x, x_2326.x)) + vec2<f32>(1.0f, 1.0f));
  let x_2330 : vec2<f32> = u_xlat18;
  u_xlat18 = (x_2330 * vec2<f32>(0.5f, 0.5f));
  let x_2332 : vec2<f32> = u_xlat18;
  u_xlat18 = clamp(x_2332, vec2<f32>(0.0f, 0.0f), vec2<f32>(1.0f, 1.0f));
  let x_2339 : vec2<f32> = u_xlat18;
  let x_2341 : f32 = x_33.x_GlobalMipBias.x;
  let x_2342 : vec4<f32> = textureSampleBias(x_CameraDepthTexture, sampler_CameraDepthTexture, x_2339, x_2341);
  u_xlat11.x = x_2342.x;
  let x_2346 : f32 = x_33.x_ZBufferParams.z;
  let x_2348 : f32 = u_xlat11.x;
  let x_2351 : f32 = x_33.x_ZBufferParams.w;
  u_xlat19 = ((x_2346 * x_2348) + x_2351);
  let x_2353 : f32 = u_xlat19;
  u_xlat19 = (1.0f / x_2353);
  let x_2355 : f32 = u_xlat19;
  let x_2358 : f32 = u_xlat3.x;
  u_xlat3.x = (-(x_2355) + -(x_2358));
  let x_2363 : f32 = u_xlat3.x;
  let x_2366 : f32 = x_33.x_SSAOParams.y;
  u_xlatb3.x = (abs(x_2363) < x_2366);
  let x_2370 : f32 = u_xlat11.x;
  u_xlatb3.y = (0.00001f < x_2370);
  let x_2374 : bool = u_xlatb3.x;
  u_xlat3.x = select(0.0f, 1.0f, x_2374);
  let x_2378 : bool = u_xlatb3.y;
  u_xlat3.y = select(0.0f, 1.0f, x_2378);
  let x_2382 : f32 = u_xlat3.y;
  let x_2384 : f32 = u_xlat3.x;
  u_xlat3.x = (x_2382 * x_2384);
  let x_2388 : f32 = u_xlat18.y;
  u_xlat26 = (-(x_2388) + 1.0f);
  let x_2391 : f32 = u_xlat19;
  let x_2393 : f32 = x_33.x_ProjectionParams2.x;
  u_xlat11.x = (x_2391 * x_2393);
  let x_2397 : vec4<f32> = x_33.x_CameraViewXExtent[0i];
  let x_2399 : vec2<f32> = u_xlat18;
  let x_2403 : vec4<f32> = x_33.x_CameraViewTopLeftCorner[0i];
  u_xlat5 = ((vec3<f32>(x_2397.x, x_2397.y, x_2397.z) * vec3<f32>(x_2399.x, x_2399.x, x_2399.x)) + vec3<f32>(x_2403.x, x_2403.y, x_2403.z));
  let x_2407 : vec4<f32> = x_33.x_CameraViewYExtent[0i];
  let x_2409 : f32 = u_xlat26;
  let x_2412 : vec3<f32> = u_xlat5;
  u_xlat5 = ((vec3<f32>(x_2407.x, x_2407.y, x_2407.z) * vec3<f32>(x_2409, x_2409, x_2409)) + x_2412);
  let x_2414 : vec3<f32> = u_xlat5;
  let x_2415 : vec3<f32> = u_xlat11;
  let x_2418 : vec4<f32> = u_xlat1;
  u_xlat11 = ((x_2414 * vec3<f32>(x_2415.x, x_2415.x, x_2415.x)) + -(vec3<f32>(x_2418.x, x_2418.y, x_2418.z)));
  let x_2422 : vec3<f32> = u_xlat11;
  let x_2423 : vec3<f32> = u_xlat8;
  u_xlat18.x = dot(x_2422, x_2423);
  let x_2426 : f32 = u_xlat0;
  let x_2430 : f32 = u_xlat18.x;
  u_xlat18.x = ((-(x_2426) * 0.004f) + x_2430);
  let x_2434 : f32 = u_xlat18.x;
  u_xlat18.x = max(x_2434, 0.0f);
  let x_2437 : vec3<f32> = u_xlat11;
  let x_2438 : vec3<f32> = u_xlat11;
  u_xlat26 = dot(x_2437, x_2438);
  let x_2440 : f32 = u_xlat26;
  u_xlat26 = (x_2440 + 0.0001f);
  let x_2442 : f32 = u_xlat26;
  u_xlat26 = (1.0f / x_2442);
  let x_2444 : f32 = u_xlat26;
  let x_2446 : f32 = u_xlat18.x;
  u_xlat18.x = (x_2444 * x_2446);
  let x_2450 : f32 = u_xlat18.x;
  let x_2452 : f32 = u_xlat3.x;
  let x_2454 : f32 = u_xlat25;
  u_xlat25 = ((x_2450 * x_2452) + x_2454);
  let x_2456 : vec4<f32> = u_xlat2;
  let x_2459 : vec4<f32> = x_33.x_SSAOBlueNoiseParams;
  u_xlat3 = ((vec4<f32>(x_2456.x, x_2456.y, x_2456.x, x_2456.y) * vec4<f32>(x_2459.x, x_2459.y, x_2459.x, x_2459.y)) + vec4<f32>(0.75f, 0.75f, 0.833333373f, 0.833333373f));
  let x_2469 : vec4<f32> = u_xlat3;
  let x_2472 : f32 = x_33.x_GlobalMipBias.x;
  let x_2473 : vec4<f32> = textureSampleBias(x_BlueNoiseTexture, sampler_PointRepeat, vec2<f32>(x_2469.x, x_2469.y), x_2472);
  u_xlat18.x = x_2473.w;
  let x_2476 : vec2<f32> = u_xlat18;
  u_xlat18 = (vec2<f32>(x_2476.x, x_2476.x) + vec2<f32>(0.5078125f, 0.3515625f));
  let x_2483 : f32 = u_xlat18.x;
  u_xlat18.x = fract(x_2483);
  let x_2487 : f32 = u_xlat18.x;
  u_xlat5.z = ((x_2487 * 2.0f) + -1.0f);
  let x_2492 : f32 = u_xlat18.y;
  u_xlat18.x = (x_2492 * 628.31854248f);
  let x_2496 : f32 = u_xlat5.z;
  let x_2499 : f32 = u_xlat5.z;
  u_xlat26 = ((-(x_2496) * x_2499) + 1.0f);
  let x_2502 : f32 = u_xlat26;
  u_xlat26 = sqrt(x_2502);
  let x_2505 : f32 = u_xlat18.x;
  u_xlat3.x = sin(x_2505);
  let x_2509 : f32 = u_xlat18.x;
  u_xlat6 = cos(x_2509);
  let x_2511 : f32 = u_xlat26;
  let x_2512 : f32 = u_xlat6;
  u_xlat5.x = (x_2511 * x_2512);
  let x_2515 : f32 = u_xlat26;
  let x_2517 : f32 = u_xlat3.x;
  u_xlat5.y = (x_2515 * x_2517);
  let x_2520 : vec3<f32> = u_xlat8;
  let x_2521 : vec3<f32> = u_xlat5;
  u_xlat18.x = dot(x_2520, x_2521);
  let x_2525 : f32 = u_xlat18.x;
  u_xlatb18 = (x_2525 >= 0.0f);
  let x_2527 : bool = u_xlatb18;
  u_xlat18.x = select(-1.0f, 1.0f, x_2527);
  let x_2530 : vec2<f32> = u_xlat18;
  let x_2532 : vec3<f32> = u_xlat5;
  u_xlat5 = (vec3<f32>(x_2530.x, x_2530.x, x_2530.x) * x_2532);
  let x_2534 : vec3<f32> = u_xlat5;
  let x_2536 : vec4<f32> = x_33.x_SSAOParams;
  u_xlat5 = (x_2534 * vec3<f32>(x_2536.y, x_2536.y, x_2536.y));
  let x_2539 : vec3<f32> = u_xlat5;
  let x_2543 : vec4<f32> = u_xlat1;
  u_xlat5 = ((x_2539 * vec3<f32>(0.606249988f, 0.606249988f, 0.606249988f)) + vec3<f32>(x_2543.x, x_2543.y, x_2543.z));
  let x_2546 : vec3<f32> = u_xlat5;
  let x_2549 : vec4<f32> = x_33.x_CameraViewProjections[0i][1i];
  u_xlat18 = (vec2<f32>(x_2546.y, x_2546.y) * vec2<f32>(x_2549.x, x_2549.y));
  let x_2553 : vec4<f32> = x_33.x_CameraViewProjections[0i][0i];
  let x_2555 : vec3<f32> = u_xlat5;
  let x_2558 : vec2<f32> = u_xlat18;
  u_xlat18 = ((vec2<f32>(x_2553.x, x_2553.y) * vec2<f32>(x_2555.x, x_2555.x)) + x_2558);
  let x_2561 : vec4<f32> = x_33.x_CameraViewProjections[0i][2i];
  let x_2563 : vec3<f32> = u_xlat5;
  let x_2566 : vec2<f32> = u_xlat18;
  u_xlat18 = ((vec2<f32>(x_2561.x, x_2561.y) * vec2<f32>(x_2563.z, x_2563.z)) + x_2566);
  let x_2568 : vec3<f32> = u_xlat4;
  let x_2569 : vec3<f32> = u_xlat5;
  u_xlat3.x = dot(x_2568, x_2569);
  let x_2573 : f32 = u_xlat3.x;
  u_xlat11.x = (1.0f / -(x_2573));
  let x_2577 : vec2<f32> = u_xlat18;
  let x_2578 : vec3<f32> = u_xlat11;
  u_xlat18 = ((x_2577 * vec2<f32>(x_2578.x, x_2578.x)) + vec2<f32>(1.0f, 1.0f));
  let x_2582 : vec2<f32> = u_xlat18;
  u_xlat18 = (x_2582 * vec2<f32>(0.5f, 0.5f));
  let x_2584 : vec2<f32> = u_xlat18;
  u_xlat18 = clamp(x_2584, vec2<f32>(0.0f, 0.0f), vec2<f32>(1.0f, 1.0f));
  let x_2591 : vec2<f32> = u_xlat18;
  let x_2593 : f32 = x_33.x_GlobalMipBias.x;
  let x_2594 : vec4<f32> = textureSampleBias(x_CameraDepthTexture, sampler_CameraDepthTexture, x_2591, x_2593);
  u_xlat11.x = x_2594.x;
  let x_2598 : f32 = x_33.x_ZBufferParams.z;
  let x_2600 : f32 = u_xlat11.x;
  let x_2603 : f32 = x_33.x_ZBufferParams.w;
  u_xlat28 = ((x_2598 * x_2600) + x_2603);
  let x_2605 : f32 = u_xlat28;
  u_xlat28 = (1.0f / x_2605);
  let x_2608 : f32 = u_xlat3.x;
  let x_2610 : f32 = u_xlat28;
  u_xlat3.x = (-(x_2608) + -(x_2610));
  let x_2615 : f32 = u_xlat3.x;
  let x_2618 : f32 = x_33.x_SSAOParams.y;
  u_xlatb3.x = (abs(x_2615) < x_2618);
  let x_2622 : f32 = u_xlat11.x;
  u_xlatb3.y = (0.00001f < x_2622);
  let x_2626 : bool = u_xlatb3.x;
  u_xlat3.x = select(0.0f, 1.0f, x_2626);
  let x_2630 : bool = u_xlatb3.y;
  u_xlat3.y = select(0.0f, 1.0f, x_2630);
  let x_2634 : f32 = u_xlat3.y;
  let x_2636 : f32 = u_xlat3.x;
  u_xlat3.x = (x_2634 * x_2636);
  let x_2640 : f32 = u_xlat18.y;
  u_xlat26 = (-(x_2640) + 1.0f);
  let x_2643 : f32 = u_xlat28;
  let x_2645 : f32 = x_33.x_ProjectionParams2.x;
  u_xlat11.x = (x_2643 * x_2645);
  let x_2649 : vec4<f32> = x_33.x_CameraViewXExtent[0i];
  let x_2651 : vec2<f32> = u_xlat18;
  let x_2655 : vec4<f32> = x_33.x_CameraViewTopLeftCorner[0i];
  u_xlat5 = ((vec3<f32>(x_2649.x, x_2649.y, x_2649.z) * vec3<f32>(x_2651.x, x_2651.x, x_2651.x)) + vec3<f32>(x_2655.x, x_2655.y, x_2655.z));
  let x_2659 : vec4<f32> = x_33.x_CameraViewYExtent[0i];
  let x_2661 : f32 = u_xlat26;
  let x_2664 : vec3<f32> = u_xlat5;
  u_xlat5 = ((vec3<f32>(x_2659.x, x_2659.y, x_2659.z) * vec3<f32>(x_2661, x_2661, x_2661)) + x_2664);
  let x_2666 : vec3<f32> = u_xlat5;
  let x_2667 : vec3<f32> = u_xlat11;
  let x_2670 : vec4<f32> = u_xlat1;
  u_xlat5 = ((x_2666 * vec3<f32>(x_2667.x, x_2667.x, x_2667.x)) + -(vec3<f32>(x_2670.x, x_2670.y, x_2670.z)));
  let x_2674 : vec3<f32> = u_xlat5;
  let x_2675 : vec3<f32> = u_xlat8;
  u_xlat18.x = dot(x_2674, x_2675);
  let x_2678 : f32 = u_xlat0;
  let x_2682 : f32 = u_xlat18.x;
  u_xlat18.x = ((-(x_2678) * 0.004f) + x_2682);
  let x_2686 : f32 = u_xlat18.x;
  u_xlat18.x = max(x_2686, 0.0f);
  let x_2689 : vec3<f32> = u_xlat5;
  let x_2690 : vec3<f32> = u_xlat5;
  u_xlat26 = dot(x_2689, x_2690);
  let x_2692 : f32 = u_xlat26;
  u_xlat26 = (x_2692 + 0.0001f);
  let x_2694 : f32 = u_xlat26;
  u_xlat26 = (1.0f / x_2694);
  let x_2696 : f32 = u_xlat26;
  let x_2698 : f32 = u_xlat18.x;
  u_xlat18.x = (x_2696 * x_2698);
  let x_2702 : f32 = u_xlat18.x;
  let x_2704 : f32 = u_xlat3.x;
  let x_2706 : f32 = u_xlat25;
  u_xlat25 = ((x_2702 * x_2704) + x_2706);
  let x_2711 : vec4<f32> = u_xlat3;
  let x_2714 : f32 = x_33.x_GlobalMipBias.x;
  let x_2715 : vec4<f32> = textureSampleBias(x_BlueNoiseTexture, sampler_PointRepeat, vec2<f32>(x_2711.z, x_2711.w), x_2714);
  u_xlat18.x = x_2715.w;
  let x_2718 : vec2<f32> = u_xlat18;
  u_xlat18 = (vec2<f32>(x_2718.x, x_2718.x) + vec2<f32>(0.3828125f, 0.4921875f));
  let x_2725 : f32 = u_xlat18.x;
  u_xlat18.x = fract(x_2725);
  let x_2729 : f32 = u_xlat18.x;
  u_xlat3.z = ((x_2729 * 2.0f) + -1.0f);
  let x_2734 : f32 = u_xlat18.y;
  u_xlat18.x = (x_2734 * 628.31854248f);
  let x_2738 : f32 = u_xlat3.z;
  let x_2741 : f32 = u_xlat3.z;
  u_xlat26 = ((-(x_2738) * x_2741) + 1.0f);
  let x_2744 : f32 = u_xlat26;
  u_xlat26 = sqrt(x_2744);
  let x_2747 : f32 = u_xlat18.x;
  u_xlat5.x = sin(x_2747);
  let x_2751 : f32 = u_xlat18.x;
  u_xlat6 = cos(x_2751);
  let x_2753 : f32 = u_xlat26;
  let x_2754 : f32 = u_xlat6;
  u_xlat3.x = (x_2753 * x_2754);
  let x_2757 : f32 = u_xlat26;
  let x_2759 : f32 = u_xlat5.x;
  u_xlat3.y = (x_2757 * x_2759);
  let x_2762 : vec3<f32> = u_xlat8;
  let x_2763 : vec4<f32> = u_xlat3;
  u_xlat18.x = dot(x_2762, vec3<f32>(x_2763.x, x_2763.y, x_2763.z));
  let x_2768 : f32 = u_xlat18.x;
  u_xlatb18 = (x_2768 >= 0.0f);
  let x_2770 : bool = u_xlatb18;
  u_xlat18.x = select(-1.0f, 1.0f, x_2770);
  let x_2773 : vec2<f32> = u_xlat18;
  let x_2775 : vec4<f32> = u_xlat3;
  let x_2777 : vec3<f32> = (vec3<f32>(x_2773.x, x_2773.x, x_2773.x) * vec3<f32>(x_2775.x, x_2775.y, x_2775.z));
  let x_2778 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_2777.x, x_2777.y, x_2777.z, x_2778.w);
  let x_2780 : vec4<f32> = u_xlat3;
  let x_2783 : vec4<f32> = x_33.x_SSAOParams;
  let x_2785 : vec3<f32> = (vec3<f32>(x_2780.x, x_2780.y, x_2780.z) * vec3<f32>(x_2783.y, x_2783.y, x_2783.y));
  let x_2786 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_2785.x, x_2785.y, x_2785.z, x_2786.w);
  let x_2788 : vec4<f32> = u_xlat3;
  let x_2793 : vec4<f32> = u_xlat1;
  let x_2795 : vec3<f32> = ((vec3<f32>(x_2788.x, x_2788.y, x_2788.z) * vec3<f32>(0.725000083f, 0.725000083f, 0.725000083f)) + vec3<f32>(x_2793.x, x_2793.y, x_2793.z));
  let x_2796 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_2795.x, x_2795.y, x_2795.z, x_2796.w);
  let x_2798 : vec4<f32> = u_xlat3;
  let x_2801 : vec4<f32> = x_33.x_CameraViewProjections[0i][1i];
  u_xlat18 = (vec2<f32>(x_2798.y, x_2798.y) * vec2<f32>(x_2801.x, x_2801.y));
  let x_2805 : vec4<f32> = x_33.x_CameraViewProjections[0i][0i];
  let x_2807 : vec4<f32> = u_xlat3;
  let x_2810 : vec2<f32> = u_xlat18;
  u_xlat18 = ((vec2<f32>(x_2805.x, x_2805.y) * vec2<f32>(x_2807.x, x_2807.x)) + x_2810);
  let x_2813 : vec4<f32> = x_33.x_CameraViewProjections[0i][2i];
  let x_2815 : vec4<f32> = u_xlat3;
  let x_2818 : vec2<f32> = u_xlat18;
  u_xlat18 = ((vec2<f32>(x_2813.x, x_2813.y) * vec2<f32>(x_2815.z, x_2815.z)) + x_2818);
  let x_2820 : vec3<f32> = u_xlat4;
  let x_2821 : vec4<f32> = u_xlat3;
  u_xlat3.x = dot(x_2820, vec3<f32>(x_2821.x, x_2821.y, x_2821.z));
  let x_2826 : f32 = u_xlat3.x;
  u_xlat11.x = (1.0f / -(x_2826));
  let x_2830 : vec2<f32> = u_xlat18;
  let x_2831 : vec3<f32> = u_xlat11;
  u_xlat18 = ((x_2830 * vec2<f32>(x_2831.x, x_2831.x)) + vec2<f32>(1.0f, 1.0f));
  let x_2835 : vec2<f32> = u_xlat18;
  u_xlat18 = (x_2835 * vec2<f32>(0.5f, 0.5f));
  let x_2837 : vec2<f32> = u_xlat18;
  u_xlat18 = clamp(x_2837, vec2<f32>(0.0f, 0.0f), vec2<f32>(1.0f, 1.0f));
  let x_2844 : vec2<f32> = u_xlat18;
  let x_2846 : f32 = x_33.x_GlobalMipBias.x;
  let x_2847 : vec4<f32> = textureSampleBias(x_CameraDepthTexture, sampler_CameraDepthTexture, x_2844, x_2846);
  u_xlat11.x = x_2847.x;
  let x_2851 : f32 = x_33.x_ZBufferParams.z;
  let x_2853 : f32 = u_xlat11.x;
  let x_2856 : f32 = x_33.x_ZBufferParams.w;
  u_xlat19 = ((x_2851 * x_2853) + x_2856);
  let x_2858 : f32 = u_xlat19;
  u_xlat19 = (1.0f / x_2858);
  let x_2860 : f32 = u_xlat19;
  let x_2863 : f32 = u_xlat3.x;
  u_xlat3.x = (-(x_2860) + -(x_2863));
  let x_2868 : f32 = u_xlat3.x;
  let x_2871 : f32 = x_33.x_SSAOParams.y;
  u_xlatb3.x = (abs(x_2868) < x_2871);
  let x_2875 : f32 = u_xlat11.x;
  u_xlatb3.y = (0.00001f < x_2875);
  let x_2879 : bool = u_xlatb3.x;
  u_xlat3.x = select(0.0f, 1.0f, x_2879);
  let x_2883 : bool = u_xlatb3.y;
  u_xlat3.y = select(0.0f, 1.0f, x_2883);
  let x_2887 : f32 = u_xlat3.y;
  let x_2889 : f32 = u_xlat3.x;
  u_xlat3.x = (x_2887 * x_2889);
  let x_2893 : f32 = u_xlat18.y;
  u_xlat26 = (-(x_2893) + 1.0f);
  let x_2896 : f32 = u_xlat19;
  let x_2898 : f32 = x_33.x_ProjectionParams2.x;
  u_xlat11.x = (x_2896 * x_2898);
  let x_2902 : vec4<f32> = x_33.x_CameraViewXExtent[0i];
  let x_2904 : vec2<f32> = u_xlat18;
  let x_2908 : vec4<f32> = x_33.x_CameraViewTopLeftCorner[0i];
  u_xlat5 = ((vec3<f32>(x_2902.x, x_2902.y, x_2902.z) * vec3<f32>(x_2904.x, x_2904.x, x_2904.x)) + vec3<f32>(x_2908.x, x_2908.y, x_2908.z));
  let x_2912 : vec4<f32> = x_33.x_CameraViewYExtent[0i];
  let x_2914 : f32 = u_xlat26;
  let x_2917 : vec3<f32> = u_xlat5;
  u_xlat5 = ((vec3<f32>(x_2912.x, x_2912.y, x_2912.z) * vec3<f32>(x_2914, x_2914, x_2914)) + x_2917);
  let x_2919 : vec3<f32> = u_xlat5;
  let x_2920 : vec3<f32> = u_xlat11;
  let x_2923 : vec4<f32> = u_xlat1;
  u_xlat11 = ((x_2919 * vec3<f32>(x_2920.x, x_2920.x, x_2920.x)) + -(vec3<f32>(x_2923.x, x_2923.y, x_2923.z)));
  let x_2927 : vec3<f32> = u_xlat11;
  let x_2928 : vec3<f32> = u_xlat8;
  u_xlat18.x = dot(x_2927, x_2928);
  let x_2931 : f32 = u_xlat0;
  let x_2935 : f32 = u_xlat18.x;
  u_xlat18.x = ((-(x_2931) * 0.004f) + x_2935);
  let x_2939 : f32 = u_xlat18.x;
  u_xlat18.x = max(x_2939, 0.0f);
  let x_2942 : vec3<f32> = u_xlat11;
  let x_2943 : vec3<f32> = u_xlat11;
  u_xlat26 = dot(x_2942, x_2943);
  let x_2945 : f32 = u_xlat26;
  u_xlat26 = (x_2945 + 0.0001f);
  let x_2947 : f32 = u_xlat26;
  u_xlat26 = (1.0f / x_2947);
  let x_2949 : f32 = u_xlat26;
  let x_2951 : f32 = u_xlat18.x;
  u_xlat18.x = (x_2949 * x_2951);
  let x_2955 : f32 = u_xlat18.x;
  let x_2957 : f32 = u_xlat3.x;
  let x_2959 : f32 = u_xlat25;
  u_xlat25 = ((x_2955 * x_2957) + x_2959);
  let x_2961 : vec4<f32> = u_xlat2;
  let x_2964 : vec4<f32> = x_33.x_SSAOBlueNoiseParams;
  let x_2969 : vec2<f32> = ((vec2<f32>(x_2961.x, x_2961.y) * vec2<f32>(x_2964.x, x_2964.y)) + vec2<f32>(0.916666687f, 0.916666687f));
  let x_2970 : vec4<f32> = u_xlat2;
  u_xlat2 = vec4<f32>(x_2969.x, x_2969.y, x_2970.z, x_2970.w);
  let x_2975 : vec4<f32> = u_xlat2;
  let x_2978 : f32 = x_33.x_GlobalMipBias.x;
  let x_2979 : vec4<f32> = textureSampleBias(x_BlueNoiseTexture, sampler_PointRepeat, vec2<f32>(x_2975.x, x_2975.y), x_2978);
  u_xlat2.x = x_2979.w;
  let x_2982 : vec4<f32> = u_xlat2;
  let x_2985 : vec2<f32> = (vec2<f32>(x_2982.x, x_2982.x) + vec2<f32>(0.984375f, 0.125f));
  let x_2986 : vec4<f32> = u_xlat2;
  u_xlat2 = vec4<f32>(x_2985.x, x_2985.y, x_2986.z, x_2986.w);
  let x_2989 : f32 = u_xlat2.x;
  u_xlat2.x = fract(x_2989);
  let x_2993 : f32 = u_xlat2.x;
  u_xlat3.z = ((x_2993 * 2.0f) + -1.0f);
  let x_2998 : f32 = u_xlat2.y;
  u_xlat2.x = (x_2998 * 628.31854248f);
  let x_3003 : f32 = u_xlat3.z;
  let x_3006 : f32 = u_xlat3.z;
  u_xlat10.x = ((-(x_3003) * x_3006) + 1.0f);
  let x_3011 : f32 = u_xlat10.x;
  u_xlat10.x = sqrt(x_3011);
  let x_3015 : f32 = u_xlat2.x;
  u_xlat5.x = cos(x_3015);
  let x_3019 : f32 = u_xlat2.x;
  u_xlat2.x = sin(x_3019);
  let x_3023 : f32 = u_xlat10.x;
  let x_3025 : f32 = u_xlat5.x;
  u_xlat3.x = (x_3023 * x_3025);
  let x_3029 : f32 = u_xlat2.x;
  let x_3031 : f32 = u_xlat10.x;
  u_xlat3.y = (x_3029 * x_3031);
  let x_3034 : vec3<f32> = u_xlat8;
  let x_3035 : vec4<f32> = u_xlat3;
  u_xlat2.x = dot(x_3034, vec3<f32>(x_3035.x, x_3035.y, x_3035.z));
  let x_3043 : f32 = u_xlat2.x;
  u_xlatb2.x = (x_3043 >= 0.0f);
  let x_3047 : bool = u_xlatb2.x;
  u_xlat2.x = select(-1.0f, 1.0f, x_3047);
  let x_3050 : vec4<f32> = u_xlat2;
  let x_3052 : vec4<f32> = u_xlat3;
  let x_3054 : vec3<f32> = (vec3<f32>(x_3050.x, x_3050.x, x_3050.x) * vec3<f32>(x_3052.x, x_3052.y, x_3052.z));
  let x_3055 : vec4<f32> = u_xlat2;
  u_xlat2 = vec4<f32>(x_3054.x, x_3054.y, x_3054.z, x_3055.w);
  let x_3057 : vec4<f32> = u_xlat2;
  let x_3060 : vec4<f32> = x_33.x_SSAOParams;
  let x_3062 : vec3<f32> = (vec3<f32>(x_3057.x, x_3057.y, x_3057.z) * vec3<f32>(x_3060.y, x_3060.y, x_3060.y));
  let x_3063 : vec4<f32> = u_xlat2;
  u_xlat2 = vec4<f32>(x_3062.x, x_3062.y, x_3062.z, x_3063.w);
  let x_3065 : vec4<f32> = u_xlat2;
  let x_3070 : vec4<f32> = u_xlat1;
  let x_3072 : vec3<f32> = ((vec3<f32>(x_3065.x, x_3065.y, x_3065.z) * vec3<f32>(0.856249988f, 0.856249988f, 0.856249988f)) + vec3<f32>(x_3070.x, x_3070.y, x_3070.z));
  let x_3073 : vec4<f32> = u_xlat2;
  u_xlat2 = vec4<f32>(x_3072.x, x_3072.y, x_3072.z, x_3073.w);
  let x_3075 : vec4<f32> = u_xlat2;
  let x_3078 : vec4<f32> = x_33.x_CameraViewProjections[0i][1i];
  let x_3080 : vec2<f32> = (vec2<f32>(x_3075.y, x_3075.y) * vec2<f32>(x_3078.x, x_3078.y));
  let x_3081 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_3080.x, x_3080.y, x_3081.z, x_3081.w);
  let x_3084 : vec4<f32> = x_33.x_CameraViewProjections[0i][0i];
  let x_3086 : vec4<f32> = u_xlat2;
  let x_3089 : vec4<f32> = u_xlat3;
  let x_3091 : vec2<f32> = ((vec2<f32>(x_3084.x, x_3084.y) * vec2<f32>(x_3086.x, x_3086.x)) + vec2<f32>(x_3089.x, x_3089.y));
  let x_3092 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_3091.x, x_3091.y, x_3092.z, x_3092.w);
  let x_3095 : vec4<f32> = x_33.x_CameraViewProjections[0i][2i];
  let x_3097 : vec4<f32> = u_xlat2;
  let x_3100 : vec4<f32> = u_xlat3;
  let x_3102 : vec2<f32> = ((vec2<f32>(x_3095.x, x_3095.y) * vec2<f32>(x_3097.z, x_3097.z)) + vec2<f32>(x_3100.x, x_3100.y));
  let x_3103 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_3102.x, x_3102.y, x_3103.z, x_3103.w);
  let x_3105 : vec3<f32> = u_xlat4;
  let x_3106 : vec4<f32> = u_xlat2;
  u_xlat2.x = dot(x_3105, vec3<f32>(x_3106.x, x_3106.y, x_3106.z));
  let x_3111 : f32 = u_xlat2.x;
  u_xlat10.x = (1.0f / -(x_3111));
  let x_3115 : vec4<f32> = u_xlat3;
  let x_3117 : vec2<f32> = u_xlat10;
  u_xlat10 = ((vec2<f32>(x_3115.x, x_3115.y) * vec2<f32>(x_3117.x, x_3117.x)) + vec2<f32>(1.0f, 1.0f));
  let x_3121 : vec2<f32> = u_xlat10;
  u_xlat10 = (x_3121 * vec2<f32>(0.5f, 0.5f));
  let x_3123 : vec2<f32> = u_xlat10;
  u_xlat10 = clamp(x_3123, vec2<f32>(0.0f, 0.0f), vec2<f32>(1.0f, 1.0f));
  let x_3130 : vec2<f32> = u_xlat10;
  let x_3132 : f32 = x_33.x_GlobalMipBias.x;
  let x_3133 : vec4<f32> = textureSampleBias(x_CameraDepthTexture, sampler_CameraDepthTexture, x_3130, x_3132);
  u_xlat26 = x_3133.x;
  let x_3136 : f32 = x_33.x_ZBufferParams.z;
  let x_3137 : f32 = u_xlat26;
  let x_3140 : f32 = x_33.x_ZBufferParams.w;
  u_xlat3.x = ((x_3136 * x_3137) + x_3140);
  let x_3144 : f32 = u_xlat3.x;
  u_xlat3.x = (1.0f / x_3144);
  let x_3148 : f32 = u_xlat2.x;
  let x_3151 : f32 = u_xlat3.x;
  u_xlat2.x = (-(x_3148) + -(x_3151));
  let x_3156 : f32 = u_xlat2.x;
  let x_3159 : f32 = x_33.x_SSAOParams.y;
  u_xlatb2.x = (abs(x_3156) < x_3159);
  let x_3162 : f32 = u_xlat26;
  u_xlatb2.w = (0.00001f < x_3162);
  let x_3166 : bool = u_xlatb2.x;
  u_xlat2.x = select(0.0f, 1.0f, x_3166);
  let x_3170 : bool = u_xlatb2.w;
  u_xlat2.w = select(0.0f, 1.0f, x_3170);
  let x_3174 : f32 = u_xlat2.w;
  let x_3176 : f32 = u_xlat2.x;
  u_xlat2.x = (x_3174 * x_3176);
  let x_3180 : f32 = u_xlat10.y;
  u_xlat18.x = (-(x_3180) + 1.0f);
  let x_3185 : f32 = u_xlat3.x;
  let x_3187 : f32 = x_33.x_ProjectionParams2.x;
  u_xlat26 = (x_3185 * x_3187);
  let x_3190 : vec4<f32> = x_33.x_CameraViewXExtent[0i];
  let x_3192 : vec2<f32> = u_xlat10;
  let x_3196 : vec4<f32> = x_33.x_CameraViewTopLeftCorner[0i];
  let x_3198 : vec3<f32> = ((vec3<f32>(x_3190.x, x_3190.y, x_3190.z) * vec3<f32>(x_3192.x, x_3192.x, x_3192.x)) + vec3<f32>(x_3196.x, x_3196.y, x_3196.z));
  let x_3199 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_3198.x, x_3198.y, x_3198.z, x_3199.w);
  let x_3202 : vec4<f32> = x_33.x_CameraViewYExtent[0i];
  let x_3204 : vec2<f32> = u_xlat18;
  let x_3207 : vec4<f32> = u_xlat3;
  let x_3209 : vec3<f32> = ((vec3<f32>(x_3202.x, x_3202.y, x_3202.z) * vec3<f32>(x_3204.x, x_3204.x, x_3204.x)) + vec3<f32>(x_3207.x, x_3207.y, x_3207.z));
  let x_3210 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_3209.x, x_3209.y, x_3209.z, x_3210.w);
  let x_3212 : vec4<f32> = u_xlat3;
  let x_3214 : f32 = u_xlat26;
  let x_3217 : vec4<f32> = u_xlat1;
  let x_3220 : vec3<f32> = ((vec3<f32>(x_3212.x, x_3212.y, x_3212.z) * vec3<f32>(x_3214, x_3214, x_3214)) + -(vec3<f32>(x_3217.x, x_3217.y, x_3217.z)));
  let x_3221 : vec4<f32> = u_xlat1;
  u_xlat1 = vec4<f32>(x_3220.x, x_3220.y, x_3220.z, x_3221.w);
  let x_3223 : vec4<f32> = u_xlat1;
  let x_3225 : vec3<f32> = u_xlat8;
  u_xlat10.x = dot(vec3<f32>(x_3223.x, x_3223.y, x_3223.z), x_3225);
  let x_3228 : f32 = u_xlat0;
  let x_3232 : f32 = u_xlat10.x;
  u_xlat10.x = ((-(x_3228) * 0.004f) + x_3232);
  let x_3236 : f32 = u_xlat10.x;
  u_xlat10.x = max(x_3236, 0.0f);
  let x_3239 : vec4<f32> = u_xlat1;
  let x_3241 : vec4<f32> = u_xlat1;
  u_xlat1.x = dot(vec3<f32>(x_3239.x, x_3239.y, x_3239.z), vec3<f32>(x_3241.x, x_3241.y, x_3241.z));
  let x_3246 : f32 = u_xlat1.x;
  u_xlat1.x = (x_3246 + 0.0001f);
  let x_3250 : f32 = u_xlat1.x;
  u_xlat1.x = (1.0f / x_3250);
  let x_3254 : f32 = u_xlat1.x;
  let x_3256 : f32 = u_xlat10.x;
  u_xlat1.x = (x_3254 * x_3256);
  let x_3260 : f32 = u_xlat1.x;
  let x_3262 : f32 = u_xlat2.x;
  let x_3264 : f32 = u_xlat25;
  u_xlat1.x = ((x_3260 * x_3262) + x_3264);
  let x_3268 : f32 = u_xlat1.x;
  let x_3270 : f32 = x_33.x_SSAOParams.y;
  u_xlat1.x = (x_3268 * x_3270);
  let x_3274 : f32 = x_33.x_SSAOParams.w;
  u_xlat9 = (1.0f / x_3274);
  let x_3276 : f32 = u_xlat0;
  let x_3278 : f32 = u_xlat9;
  u_xlat0 = ((-(x_3276) * x_3278) + 1.0f);
  let x_3281 : f32 = u_xlat0;
  let x_3282 : f32 = u_xlat0;
  u_xlat0 = (x_3281 * x_3282);
  let x_3285 : f32 = u_xlat1.x;
  let x_3287 : f32 = x_33.x_SSAOParams.x;
  u_xlat1.x = (x_3285 * x_3287);
  let x_3290 : f32 = u_xlat0;
  let x_3292 : f32 = u_xlat1.x;
  u_xlat0 = (x_3290 * x_3292);
  let x_3294 : f32 = u_xlat0;
  u_xlat0 = (x_3294 * 0.083333336f);
  let x_3296 : f32 = u_xlat0;
  u_xlat0 = clamp(x_3296, 0.0f, 1.0f);
  let x_3298 : f32 = u_xlat0;
  u_xlat0 = log2(x_3298);
  let x_3300 : f32 = u_xlat0;
  u_xlat0 = (x_3300 * 0.600000024f);
  let x_3303 : f32 = u_xlat0;
  SV_Target0.x = exp2(x_3303);
  let x_3307 : vec3<f32> = u_xlat8;
  let x_3309 : vec3<f32> = ((x_3307 * vec3<f32>(0.5f, 0.5f, 0.5f)) + vec3<f32>(0.5f, 0.5f, 0.5f));
  let x_3310 : vec4<f32> = SV_Target0;
  SV_Target0 = vec4<f32>(x_3310.x, x_3309.x, x_3309.y, x_3309.z);
  return;
}

struct main_out {
  @location(0)
  SV_Target0_1 : vec4<f32>,
}

@fragment
fn main(@location(0) vs_TEXCOORD0_param : vec2<f32>, @builtin(position) gl_FragCoord_param : vec4<f32>) -> main_out {
  vs_TEXCOORD0 = vs_TEXCOORD0_param;
  gl_FragCoord = gl_FragCoord_param;
  main_1();
  return main_out(SV_Target0);
}

