struct PGlobals {
  x_ScaledScreenParams : vec4<f32>,
  x_GlobalMipBias : vec2<f32>,
  x_AlphaToMaskAvailable : f32,
  @size(4)
  padding : u32,
  x_MainLightPosition : vec4<f32>,
  x_MainLightColor : vec4<f32>,
  x_AmbientOcclusionParam : vec4<f32>,
  x_AdditionalLightsCount : vec4<f32>,
  x_RenderingLayerMaxInt : u32,
  x_RenderingLayerRcpMaxInt : f32,
  @size(8)
  padding_1 : u32,
  x_WorldSpaceCameraPos : vec3<f32>,
  @size(4)
  padding_2 : u32,
  x_ProjectionParams : vec4<f32>,
  x_ScreenParams : vec4<f32>,
  unity_OrthoParams : vec4<f32>,
  x_ScaleBiasRt : vec4<f32>,
  unity_FogParams : vec4<f32>,
  unity_FogColor : vec4<f32>,
  unity_MatrixV : mat4x4<f32>,
}

type Arr = array<vec4<f32>, 2u>;

struct UnityPerDraw {
  unity_ObjectToWorld : mat4x4<f32>,
  unity_WorldToObject : mat4x4<f32>,
  unity_LODFade : vec4<f32>,
  unity_WorldTransformParams : vec4<f32>,
  unity_RenderingLayer : vec4<f32>,
  unity_LightData : vec4<f32>,
  unity_LightIndices : Arr,
  unity_ProbesOcclusion : vec4<f32>,
  unity_SpecCube0_HDR : vec4<f32>,
  unity_SpecCube1_HDR : vec4<f32>,
  unity_SpecCube0_BoxMax : vec4<f32>,
  unity_SpecCube0_BoxMin : vec4<f32>,
  unity_SpecCube0_ProbePosition : vec4<f32>,
  unity_SpecCube1_BoxMax : vec4<f32>,
  unity_SpecCube1_BoxMin : vec4<f32>,
  unity_SpecCube1_ProbePosition : vec4<f32>,
  unity_LightmapST : vec4<f32>,
  unity_DynamicLightmapST : vec4<f32>,
  unity_SHAr : vec4<f32>,
  unity_SHAg : vec4<f32>,
  unity_SHAb : vec4<f32>,
  unity_SHBr : vec4<f32>,
  unity_SHBg : vec4<f32>,
  unity_SHBb : vec4<f32>,
  unity_SHC : vec4<f32>,
  unity_RendererBounds_Min : vec4<f32>,
  unity_RendererBounds_Max : vec4<f32>,
  unity_MatrixPreviousM : mat4x4<f32>,
  unity_MatrixPreviousMI : mat4x4<f32>,
  unity_MotionVectorsParams : vec4<f32>,
  unity_SpriteColor : vec4<f32>,
  unity_SpriteProps : vec4<f32>,
}

struct UnityPerMaterial {
  Texture2D_B222E8F_TexelSize : vec4<f32>,
  Color_C30C7CA3 : vec4<f32>,
  Texture2D_D9BFD5F1_TexelSize : vec4<f32>,
}

type Arr_1 = array<mat4x4<f32>, 5u>;

struct MainLightShadows {
  x_MainLightWorldToShadow : Arr_1,
  x_CascadeShadowSplitSpheres0 : vec4<f32>,
  x_CascadeShadowSplitSpheres1 : vec4<f32>,
  x_CascadeShadowSplitSpheres2 : vec4<f32>,
  x_CascadeShadowSplitSpheres3 : vec4<f32>,
  x_CascadeShadowSplitSphereRadii : vec4<f32>,
  x_MainLightShadowOffset0 : vec4<f32>,
  x_MainLightShadowOffset1 : vec4<f32>,
  x_MainLightShadowParams : vec4<f32>,
  x_MainLightShadowmapSize : vec4<f32>,
}

type Arr_2 = array<vec4<f32>, 256u>;

type Arr_3 = array<vec4<f32>, 256u>;

type Arr_4 = array<vec4<f32>, 256u>;

type Arr_5 = array<vec4<f32>, 256u>;

type Arr_6 = array<vec4<f32>, 256u>;

struct strided_arr {
  @size(16)
  el : f32,
}

type Arr_7 = array<strided_arr, 256u>;

struct AdditionalLights {
  x_AdditionalLightsPosition : Arr_6,
  x_AdditionalLightsColor : Arr_6,
  x_AdditionalLightsAttenuation : Arr_6,
  x_AdditionalLightsSpotDir : Arr_6,
  x_AdditionalLightsOcclusionProbes : Arr_6,
  x_AdditionalLightsLayerMasks : Arr_7,
}

var<private> gl_FragCoord : vec4<f32>;

var<private> vs_INTERP1 : vec3<f32>;

@group(1) @binding(0) var<uniform> x_90 : PGlobals;

var<private> vs_INTERP0 : vec3<f32>;

@group(1) @binding(2) var<uniform> x_145 : UnityPerDraw;

@group(0) @binding(5) var Texture2D_B222E8F : texture_2d<f32>;

@group(0) @binding(11) var samplerTexture2D_B222E8F : sampler;

var<private> vs_INTERP3 : vec4<f32>;

@group(1) @binding(4) var<uniform> x_199 : UnityPerMaterial;

@group(0) @binding(6) var Texture2D_D9BFD5F1 : texture_2d<f32>;

@group(0) @binding(12) var samplerTexture2D_D9BFD5F1 : sampler;

var<private> vs_INTERP4 : vec4<f32>;

@group(1) @binding(3) var<uniform> x_255 : MainLightShadows;

@group(0) @binding(4) var x_MainLightShadowmapTexture : texture_depth_2d;

@group(0) @binding(10) var sampler_MainLightShadowmapTexture : sampler_comparison;

var<private> vs_INTERP2 : vec4<f32>;

@group(0) @binding(2) var unity_LightmapInd : texture_2d<f32>;

@group(0) @binding(8) var samplerunity_Lightmap : sampler;

var<private> vs_INTERP5 : vec2<f32>;

@group(0) @binding(1) var unity_Lightmap : texture_2d<f32>;

@group(0) @binding(3) var x_ScreenSpaceOcclusionTexture : texture_2d<f32>;

@group(0) @binding(9) var sampler_ScreenSpaceOcclusionTexture : sampler;

@group(0) @binding(0) var unity_SpecCube0 : texture_cube<f32>;

@group(0) @binding(7) var samplerunity_SpecCube0 : sampler;

@group(1) @binding(1) var<uniform> x_3791 : AdditionalLights;

var<private> SV_Target0 : vec4<f32>;

var<private> SV_Target1 : vec4<f32>;

fn int_bitfieldInsert_i1_i1_i1_i1_(base : ptr<function, i32>, insert : ptr<function, i32>, offset_1 : ptr<function, i32>, bits : ptr<function, i32>) -> i32 {
  var mask : u32;
  let x_19 : i32 = *(bits);
  let x_23 : i32 = *(offset_1);
  mask = (~((4294967295u << bitcast<u32>(x_19))) << bitcast<u32>(x_23));
  let x_26 : i32 = *(base);
  let x_28 : u32 = mask;
  let x_31 : i32 = *(insert);
  let x_33 : i32 = *(offset_1);
  let x_36 : u32 = mask;
  return bitcast<i32>(((bitcast<u32>(x_26) & ~(x_28)) | ((bitcast<u32>(x_31) << bitcast<u32>(x_33)) & x_36)));
}

fn main_1() {
  var hlslcc_FragCoord : vec4<f32>;
  var u_xlat0 : vec3<f32>;
  var u_xlatb66 : bool;
  var u_xlat1 : vec3<f32>;
  var u_xlat67 : f32;
  var u_xlat2 : vec3<f32>;
  var x_133 : vec3<f32>;
  var u_xlat66 : f32;
  var u_xlat3 : vec4<f32>;
  var u_xlat4 : vec3<f32>;
  var u_xlat5 : vec4<f32>;
  var u_xlat6 : vec4<f32>;
  var u_xlat27 : vec3<f32>;
  var u_xlat7 : vec4<f32>;
  var u_xlat8 : vec4<f32>;
  var u_xlat9 : vec4<f32>;
  var u_xlatb6 : vec4<bool>;
  var u_xlatu66 : u32;
  var u_xlati66 : i32;
  var u_xlatb67 : bool;
  var txVec0 : vec3<f32>;
  var txVec1 : vec3<f32>;
  var txVec2 : vec3<f32>;
  var txVec3 : vec3<f32>;
  var u_xlatb68 : bool;
  var u_xlat51 : vec2<f32>;
  var u_xlat53 : vec2<f32>;
  var u_xlat10 : vec4<f32>;
  var u_xlat11 : vec4<f32>;
  var u_xlat12 : vec4<f32>;
  var u_xlat13 : vec4<f32>;
  var u_xlat14 : vec4<f32>;
  var u_xlat15 : vec4<f32>;
  var u_xlat68 : f32;
  var txVec4 : vec3<f32>;
  var u_xlat70 : f32;
  var txVec5 : vec3<f32>;
  var u_xlat72 : f32;
  var txVec6 : vec3<f32>;
  var txVec7 : vec3<f32>;
  var txVec8 : vec3<f32>;
  var txVec9 : vec3<f32>;
  var txVec10 : vec3<f32>;
  var txVec11 : vec3<f32>;
  var txVec12 : vec3<f32>;
  var u_xlat30 : vec3<f32>;
  var u_xlat16 : vec4<f32>;
  var u_xlat17 : vec4<f32>;
  var u_xlat31 : vec3<f32>;
  var u_xlat59 : vec2<f32>;
  var u_xlat54 : vec2<f32>;
  var u_xlat18 : vec4<f32>;
  var u_xlat19 : vec4<f32>;
  var u_xlat20 : vec4<f32>;
  var txVec13 : vec3<f32>;
  var txVec14 : vec3<f32>;
  var txVec15 : vec3<f32>;
  var txVec16 : vec3<f32>;
  var txVec17 : vec3<f32>;
  var txVec18 : vec3<f32>;
  var txVec19 : vec3<f32>;
  var txVec20 : vec3<f32>;
  var txVec21 : vec3<f32>;
  var txVec22 : vec3<f32>;
  var txVec23 : vec3<f32>;
  var txVec24 : vec3<f32>;
  var txVec25 : vec3<f32>;
  var txVec26 : vec3<f32>;
  var txVec27 : vec3<f32>;
  var txVec28 : vec3<f32>;
  var txVec29 : vec3<f32>;
  var u_xlatb70 : bool;
  var u_xlatb72 : bool;
  var x_1714 : f32;
  var u_xlatb3 : bool;
  var u_xlatu2 : vec3<u32>;
  var u_xlatu46 : u32;
  var u_xlatu25 : u32;
  var u_xlati46 : i32;
  var u_xlati24 : i32;
  var u_xlatu24 : u32;
  var u_xlati2 : i32;
  var param : i32;
  var param_1 : i32;
  var param_2 : i32;
  var param_3 : i32;
  var u_xlat24 : vec2<f32>;
  var x_1848 : f32;
  var u_xlatb24 : vec2<bool>;
  var x_1879 : f32;
  var u_xlat46 : f32;
  var u_xlatb2 : bool;
  var x_1926 : f32;
  var u_xlat69 : f32;
  var u_xlat29 : f32;
  var txVec30 : vec3<f32>;
  var txVec31 : vec3<f32>;
  var txVec32 : vec3<f32>;
  var txVec33 : vec3<f32>;
  var u_xlatb73 : bool;
  var u_xlat52 : vec2<f32>;
  var u_xlat73 : f32;
  var txVec34 : vec3<f32>;
  var txVec35 : vec3<f32>;
  var txVec36 : vec3<f32>;
  var txVec37 : vec3<f32>;
  var txVec38 : vec3<f32>;
  var txVec39 : vec3<f32>;
  var txVec40 : vec3<f32>;
  var txVec41 : vec3<f32>;
  var txVec42 : vec3<f32>;
  var u_xlat32 : vec2<f32>;
  var u_xlat60 : vec2<f32>;
  var u_xlat55 : vec2<f32>;
  var u_xlat21 : vec4<f32>;
  var txVec43 : vec3<f32>;
  var txVec44 : vec3<f32>;
  var txVec45 : vec3<f32>;
  var txVec46 : vec3<f32>;
  var txVec47 : vec3<f32>;
  var txVec48 : vec3<f32>;
  var txVec49 : vec3<f32>;
  var txVec50 : vec3<f32>;
  var txVec51 : vec3<f32>;
  var txVec52 : vec3<f32>;
  var txVec53 : vec3<f32>;
  var txVec54 : vec3<f32>;
  var txVec55 : vec3<f32>;
  var txVec56 : vec3<f32>;
  var txVec57 : vec3<f32>;
  var txVec58 : vec3<f32>;
  var txVec59 : vec3<f32>;
  var u_xlatu_loop_1 : u32;
  var u_xlatu68 : u32;
  var u_xlati69 : i32;
  var indexable : array<vec4<u32>, 4u>;
  var u_xlati68 : i32;
  var u_xlat71 : f32;
  var u_xlatu0 : u32;
  var u_xlat_precise_vec4 : vec4<f32>;
  var u_xlat_precise_ivec4 : vec4<i32>;
  var u_xlat_precise_bvec4 : vec4<bool>;
  var u_xlat_precise_uvec4 : vec4<u32>;
  let x_49 : vec4<f32> = gl_FragCoord;
  let x_50 : vec3<f32> = vec3<f32>(x_49.x, x_49.y, x_49.z);
  let x_55 : f32 = gl_FragCoord.w;
  hlslcc_FragCoord = vec4<f32>(x_50.x, x_50.y, x_50.z, (1.0f / x_55));
  let x_65 : vec3<f32> = vs_INTERP1;
  let x_66 : vec3<f32> = vs_INTERP1;
  u_xlat0.x = dot(x_65, x_66);
  let x_72 : f32 = u_xlat0.x;
  u_xlat0.x = sqrt(x_72);
  let x_76 : f32 = u_xlat0.x;
  u_xlat0.x = (1.0f / x_76);
  let x_79 : vec3<f32> = u_xlat0;
  let x_81 : vec3<f32> = vs_INTERP1;
  u_xlat0 = (vec3<f32>(x_79.x, x_79.x, x_79.x) * x_81);
  let x_94 : f32 = x_90.unity_OrthoParams.w;
  u_xlatb66 = (x_94 == 0.0f);
  let x_99 : vec3<f32> = vs_INTERP0;
  let x_104 : vec3<f32> = x_90.x_WorldSpaceCameraPos;
  u_xlat1 = (-(x_99) + x_104);
  let x_107 : vec3<f32> = u_xlat1;
  let x_108 : vec3<f32> = u_xlat1;
  u_xlat67 = dot(x_107, x_108);
  let x_110 : f32 = u_xlat67;
  u_xlat67 = inverseSqrt(x_110);
  let x_112 : f32 = u_xlat67;
  let x_114 : vec3<f32> = u_xlat1;
  u_xlat1 = (vec3<f32>(x_112, x_112, x_112) * x_114);
  let x_121 : f32 = x_90.unity_MatrixV[0i].z;
  u_xlat2.x = x_121;
  let x_125 : f32 = x_90.unity_MatrixV[1i].z;
  u_xlat2.y = x_125;
  let x_130 : f32 = x_90.unity_MatrixV[2i].z;
  u_xlat2.z = x_130;
  let x_132 : bool = u_xlatb66;
  if (x_132) {
    let x_136 : vec3<f32> = u_xlat1;
    x_133 = x_136;
  } else {
    let x_138 : vec3<f32> = u_xlat2;
    x_133 = x_138;
  }
  let x_139 : vec3<f32> = x_133;
  u_xlat1 = x_139;
  let x_140 : vec3<f32> = u_xlat1;
  let x_148 : vec4<f32> = x_145.unity_WorldToObject[1i];
  u_xlat2 = (vec3<f32>(x_140.y, x_140.y, x_140.y) * vec3<f32>(x_148.x, x_148.y, x_148.z));
  let x_152 : vec4<f32> = x_145.unity_WorldToObject[0i];
  let x_154 : vec3<f32> = u_xlat1;
  let x_157 : vec3<f32> = u_xlat2;
  u_xlat2 = ((vec3<f32>(x_152.x, x_152.y, x_152.z) * vec3<f32>(x_154.x, x_154.x, x_154.x)) + x_157);
  let x_160 : vec4<f32> = x_145.unity_WorldToObject[2i];
  let x_162 : vec3<f32> = u_xlat1;
  let x_165 : vec3<f32> = u_xlat2;
  u_xlat2 = ((vec3<f32>(x_160.x, x_160.y, x_160.z) * vec3<f32>(x_162.z, x_162.z, x_162.z)) + x_165);
  let x_168 : vec3<f32> = u_xlat2;
  let x_169 : vec3<f32> = u_xlat2;
  u_xlat66 = dot(x_168, x_169);
  let x_171 : f32 = u_xlat66;
  u_xlat66 = inverseSqrt(x_171);
  let x_173 : f32 = u_xlat66;
  let x_175 : vec3<f32> = u_xlat2;
  u_xlat2 = (vec3<f32>(x_173, x_173, x_173) * x_175);
  let x_189 : vec4<f32> = vs_INTERP3;
  let x_192 : f32 = x_90.x_GlobalMipBias.x;
  let x_193 : vec4<f32> = textureSampleBias(Texture2D_B222E8F, samplerTexture2D_B222E8F, vec2<f32>(x_189.x, x_189.y), x_192);
  u_xlat3 = x_193;
  let x_195 : vec4<f32> = u_xlat3;
  let x_201 : vec4<f32> = x_199.Color_C30C7CA3;
  u_xlat4 = (vec3<f32>(x_195.x, x_195.y, x_195.z) * vec3<f32>(x_201.x, x_201.y, x_201.z));
  let x_210 : vec4<f32> = vs_INTERP3;
  let x_213 : f32 = x_90.x_GlobalMipBias.x;
  let x_214 : vec4<f32> = textureSampleBias(Texture2D_D9BFD5F1, samplerTexture2D_D9BFD5F1, vec2<f32>(x_210.x, x_210.y), x_213);
  u_xlat5 = vec4<f32>(x_214.w, x_214.x, x_214.y, x_214.z);
  let x_217 : vec4<f32> = u_xlat5;
  u_xlat6 = ((vec4<f32>(x_217.y, x_217.z, x_217.w, x_217.x) * vec4<f32>(2.0f, 2.0f, 2.0f, 2.0f)) + vec4<f32>(-1.0f, -1.0f, -1.0f, -1.0f));
  let x_225 : vec4<f32> = u_xlat6;
  let x_226 : vec4<f32> = u_xlat6;
  u_xlat66 = dot(x_225, x_226);
  let x_228 : f32 = u_xlat66;
  u_xlat66 = inverseSqrt(x_228);
  let x_231 : f32 = u_xlat66;
  let x_233 : vec4<f32> = u_xlat6;
  u_xlat27 = (vec3<f32>(x_231, x_231, x_231) * vec3<f32>(x_233.x, x_233.y, x_233.z));
  let x_238 : f32 = vs_INTERP4.y;
  u_xlat66 = (x_238 * 200.0f);
  let x_241 : f32 = u_xlat66;
  u_xlat66 = min(x_241, 1.0f);
  let x_243 : f32 = u_xlat66;
  let x_245 : vec4<f32> = u_xlat3;
  let x_247 : vec3<f32> = (vec3<f32>(x_243, x_243, x_243) * vec3<f32>(x_245.x, x_245.y, x_245.z));
  let x_248 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_247.x, x_247.y, x_247.z, x_248.w);
  let x_250 : vec3<f32> = vs_INTERP0;
  let x_257 : vec4<f32> = x_255.x_CascadeShadowSplitSpheres0;
  let x_260 : vec3<f32> = (x_250 + -(vec3<f32>(x_257.x, x_257.y, x_257.z)));
  let x_261 : vec4<f32> = u_xlat6;
  u_xlat6 = vec4<f32>(x_260.x, x_260.y, x_260.z, x_261.w);
  let x_264 : vec3<f32> = vs_INTERP0;
  let x_266 : vec4<f32> = x_255.x_CascadeShadowSplitSpheres1;
  let x_269 : vec3<f32> = (x_264 + -(vec3<f32>(x_266.x, x_266.y, x_266.z)));
  let x_270 : vec4<f32> = u_xlat7;
  u_xlat7 = vec4<f32>(x_269.x, x_269.y, x_269.z, x_270.w);
  let x_273 : vec3<f32> = vs_INTERP0;
  let x_276 : vec4<f32> = x_255.x_CascadeShadowSplitSpheres2;
  let x_279 : vec3<f32> = (x_273 + -(vec3<f32>(x_276.x, x_276.y, x_276.z)));
  let x_280 : vec4<f32> = u_xlat8;
  u_xlat8 = vec4<f32>(x_279.x, x_279.y, x_279.z, x_280.w);
  let x_283 : vec3<f32> = vs_INTERP0;
  let x_286 : vec4<f32> = x_255.x_CascadeShadowSplitSpheres3;
  let x_289 : vec3<f32> = (x_283 + -(vec3<f32>(x_286.x, x_286.y, x_286.z)));
  let x_290 : vec4<f32> = u_xlat9;
  u_xlat9 = vec4<f32>(x_289.x, x_289.y, x_289.z, x_290.w);
  let x_292 : vec4<f32> = u_xlat6;
  let x_294 : vec4<f32> = u_xlat6;
  u_xlat6.x = dot(vec3<f32>(x_292.x, x_292.y, x_292.z), vec3<f32>(x_294.x, x_294.y, x_294.z));
  let x_298 : vec4<f32> = u_xlat7;
  let x_300 : vec4<f32> = u_xlat7;
  u_xlat6.y = dot(vec3<f32>(x_298.x, x_298.y, x_298.z), vec3<f32>(x_300.x, x_300.y, x_300.z));
  let x_304 : vec4<f32> = u_xlat8;
  let x_306 : vec4<f32> = u_xlat8;
  u_xlat6.z = dot(vec3<f32>(x_304.x, x_304.y, x_304.z), vec3<f32>(x_306.x, x_306.y, x_306.z));
  let x_310 : vec4<f32> = u_xlat9;
  let x_312 : vec4<f32> = u_xlat9;
  u_xlat6.w = dot(vec3<f32>(x_310.x, x_310.y, x_310.z), vec3<f32>(x_312.x, x_312.y, x_312.z));
  let x_319 : vec4<f32> = u_xlat6;
  let x_322 : vec4<f32> = x_255.x_CascadeShadowSplitSphereRadii;
  u_xlatb6 = (x_319 < x_322);
  let x_325 : bool = u_xlatb6.x;
  u_xlat7.x = select(0.0f, 1.0f, x_325);
  let x_329 : bool = u_xlatb6.y;
  u_xlat7.y = select(0.0f, 1.0f, x_329);
  let x_333 : bool = u_xlatb6.z;
  u_xlat7.z = select(0.0f, 1.0f, x_333);
  let x_337 : bool = u_xlatb6.w;
  u_xlat7.w = select(0.0f, 1.0f, x_337);
  let x_341 : bool = u_xlatb6.x;
  u_xlat6.x = select(-0.0f, -1.0f, x_341);
  let x_346 : bool = u_xlatb6.y;
  u_xlat6.y = select(-0.0f, -1.0f, x_346);
  let x_350 : bool = u_xlatb6.z;
  u_xlat6.z = select(-0.0f, -1.0f, x_350);
  let x_353 : vec4<f32> = u_xlat6;
  let x_355 : vec4<f32> = u_xlat7;
  let x_357 : vec3<f32> = (vec3<f32>(x_353.x, x_353.y, x_353.z) + vec3<f32>(x_355.y, x_355.z, x_355.w));
  let x_358 : vec4<f32> = u_xlat6;
  u_xlat6 = vec4<f32>(x_357.x, x_357.y, x_357.z, x_358.w);
  let x_360 : vec4<f32> = u_xlat6;
  let x_363 : vec3<f32> = max(vec3<f32>(x_360.x, x_360.y, x_360.z), vec3<f32>(0.0f, 0.0f, 0.0f));
  let x_364 : vec4<f32> = u_xlat7;
  u_xlat7 = vec4<f32>(x_364.x, x_363.x, x_363.y, x_363.z);
  let x_366 : vec4<f32> = u_xlat7;
  u_xlat66 = dot(x_366, vec4<f32>(4.0f, 3.0f, 2.0f, 1.0f));
  let x_371 : f32 = u_xlat66;
  u_xlat66 = (-(x_371) + 4.0f);
  let x_375 : f32 = u_xlat66;
  u_xlatu66 = u32(x_375);
  let x_378 : u32 = u_xlatu66;
  u_xlati66 = (bitcast<i32>(x_378) << bitcast<u32>(2i));
  let x_381 : vec3<f32> = vs_INTERP0;
  let x_383 : i32 = u_xlati66;
  let x_386 : i32 = u_xlati66;
  let x_390 : vec4<f32> = x_255.x_MainLightWorldToShadow[((x_383 + 1i) / 4i)][((x_386 + 1i) % 4i)];
  let x_392 : vec3<f32> = (vec3<f32>(x_381.y, x_381.y, x_381.y) * vec3<f32>(x_390.x, x_390.y, x_390.z));
  let x_393 : vec4<f32> = u_xlat6;
  u_xlat6 = vec4<f32>(x_392.x, x_392.y, x_392.z, x_393.w);
  let x_395 : i32 = u_xlati66;
  let x_397 : i32 = u_xlati66;
  let x_400 : vec4<f32> = x_255.x_MainLightWorldToShadow[(x_395 / 4i)][(x_397 % 4i)];
  let x_402 : vec3<f32> = vs_INTERP0;
  let x_405 : vec4<f32> = u_xlat6;
  let x_407 : vec3<f32> = ((vec3<f32>(x_400.x, x_400.y, x_400.z) * vec3<f32>(x_402.x, x_402.x, x_402.x)) + vec3<f32>(x_405.x, x_405.y, x_405.z));
  let x_408 : vec4<f32> = u_xlat6;
  u_xlat6 = vec4<f32>(x_407.x, x_407.y, x_407.z, x_408.w);
  let x_410 : i32 = u_xlati66;
  let x_413 : i32 = u_xlati66;
  let x_417 : vec4<f32> = x_255.x_MainLightWorldToShadow[((x_410 + 2i) / 4i)][((x_413 + 2i) % 4i)];
  let x_419 : vec3<f32> = vs_INTERP0;
  let x_422 : vec4<f32> = u_xlat6;
  let x_424 : vec3<f32> = ((vec3<f32>(x_417.x, x_417.y, x_417.z) * vec3<f32>(x_419.z, x_419.z, x_419.z)) + vec3<f32>(x_422.x, x_422.y, x_422.z));
  let x_425 : vec4<f32> = u_xlat6;
  u_xlat6 = vec4<f32>(x_424.x, x_424.y, x_424.z, x_425.w);
  let x_427 : vec4<f32> = u_xlat6;
  let x_429 : i32 = u_xlati66;
  let x_432 : i32 = u_xlati66;
  let x_436 : vec4<f32> = x_255.x_MainLightWorldToShadow[((x_429 + 3i) / 4i)][((x_432 + 3i) % 4i)];
  let x_438 : vec3<f32> = (vec3<f32>(x_427.x, x_427.y, x_427.z) + vec3<f32>(x_436.x, x_436.y, x_436.z));
  let x_439 : vec4<f32> = u_xlat6;
  u_xlat6 = vec4<f32>(x_438.x, x_438.y, x_438.z, x_439.w);
  let x_443 : f32 = x_255.x_MainLightShadowParams.y;
  u_xlatb66 = (0.0f < x_443);
  let x_445 : bool = u_xlatb66;
  if (x_445) {
    let x_450 : f32 = x_255.x_MainLightShadowParams.y;
    u_xlatb67 = (x_450 == 1.0f);
    let x_452 : bool = u_xlatb67;
    if (x_452) {
      let x_455 : vec4<f32> = u_xlat6;
      let x_459 : vec4<f32> = x_255.x_MainLightShadowOffset0;
      u_xlat7 = (vec4<f32>(x_455.x, x_455.y, x_455.x, x_455.y) + x_459);
      let x_462 : vec4<f32> = u_xlat7;
      let x_463 : vec2<f32> = vec2<f32>(x_462.x, x_462.y);
      let x_465 : f32 = u_xlat6.z;
      txVec0 = vec3<f32>(x_463.x, x_463.y, x_465);
      let x_477 : vec3<f32> = txVec0;
      let x_479 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_477.xy, x_477.z);
      u_xlat8.x = x_479;
      let x_482 : vec4<f32> = u_xlat7;
      let x_483 : vec2<f32> = vec2<f32>(x_482.z, x_482.w);
      let x_485 : f32 = u_xlat6.z;
      txVec1 = vec3<f32>(x_483.x, x_483.y, x_485);
      let x_492 : vec3<f32> = txVec1;
      let x_494 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_492.xy, x_492.z);
      u_xlat8.y = x_494;
      let x_496 : vec4<f32> = u_xlat6;
      let x_500 : vec4<f32> = x_255.x_MainLightShadowOffset1;
      u_xlat7 = (vec4<f32>(x_496.x, x_496.y, x_496.x, x_496.y) + x_500);
      let x_503 : vec4<f32> = u_xlat7;
      let x_504 : vec2<f32> = vec2<f32>(x_503.x, x_503.y);
      let x_506 : f32 = u_xlat6.z;
      txVec2 = vec3<f32>(x_504.x, x_504.y, x_506);
      let x_513 : vec3<f32> = txVec2;
      let x_515 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_513.xy, x_513.z);
      u_xlat8.z = x_515;
      let x_518 : vec4<f32> = u_xlat7;
      let x_519 : vec2<f32> = vec2<f32>(x_518.z, x_518.w);
      let x_521 : f32 = u_xlat6.z;
      txVec3 = vec3<f32>(x_519.x, x_519.y, x_521);
      let x_528 : vec3<f32> = txVec3;
      let x_530 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_528.xy, x_528.z);
      u_xlat8.w = x_530;
      let x_532 : vec4<f32> = u_xlat8;
      u_xlat67 = dot(x_532, vec4<f32>(0.25f, 0.25f, 0.25f, 0.25f));
    } else {
      let x_539 : f32 = x_255.x_MainLightShadowParams.y;
      u_xlatb68 = (x_539 == 2.0f);
      let x_541 : bool = u_xlatb68;
      if (x_541) {
        let x_544 : vec4<f32> = u_xlat6;
        let x_547 : vec4<f32> = x_255.x_MainLightShadowmapSize;
        let x_552 : vec2<f32> = ((vec2<f32>(x_544.x, x_544.y) * vec2<f32>(x_547.z, x_547.w)) + vec2<f32>(0.5f, 0.5f));
        let x_553 : vec4<f32> = u_xlat7;
        u_xlat7 = vec4<f32>(x_552.x, x_552.y, x_553.z, x_553.w);
        let x_555 : vec4<f32> = u_xlat7;
        let x_557 : vec2<f32> = floor(vec2<f32>(x_555.x, x_555.y));
        let x_558 : vec4<f32> = u_xlat7;
        u_xlat7 = vec4<f32>(x_557.x, x_557.y, x_558.z, x_558.w);
        let x_562 : vec4<f32> = u_xlat6;
        let x_565 : vec4<f32> = x_255.x_MainLightShadowmapSize;
        let x_568 : vec4<f32> = u_xlat7;
        u_xlat51 = ((vec2<f32>(x_562.x, x_562.y) * vec2<f32>(x_565.z, x_565.w)) + -(vec2<f32>(x_568.x, x_568.y)));
        let x_572 : vec2<f32> = u_xlat51;
        u_xlat8 = (vec4<f32>(x_572.x, x_572.x, x_572.y, x_572.y) + vec4<f32>(0.5f, 1.0f, 0.5f, 1.0f));
        let x_576 : vec4<f32> = u_xlat8;
        let x_578 : vec4<f32> = u_xlat8;
        u_xlat9 = (vec4<f32>(x_576.x, x_576.x, x_576.z, x_576.z) * vec4<f32>(x_578.x, x_578.x, x_578.z, x_578.z));
        let x_581 : vec4<f32> = u_xlat9;
        let x_585 : vec2<f32> = (vec2<f32>(x_581.y, x_581.w) * vec2<f32>(0.079999998f, 0.079999998f));
        let x_586 : vec4<f32> = u_xlat8;
        u_xlat8 = vec4<f32>(x_585.x, x_586.y, x_585.y, x_586.w);
        let x_588 : vec4<f32> = u_xlat9;
        let x_591 : vec2<f32> = u_xlat51;
        let x_593 : vec2<f32> = ((vec2<f32>(x_588.x, x_588.z) * vec2<f32>(0.5f, 0.5f)) + -(x_591));
        let x_594 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_593.x, x_593.y, x_594.z, x_594.w);
        let x_597 : vec2<f32> = u_xlat51;
        u_xlat53 = (-(x_597) + vec2<f32>(1.0f, 1.0f));
        let x_602 : vec2<f32> = u_xlat51;
        let x_604 : vec2<f32> = min(x_602, vec2<f32>(0.0f, 0.0f));
        let x_605 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_604.x, x_604.y, x_605.z, x_605.w);
        let x_607 : vec4<f32> = u_xlat10;
        let x_610 : vec4<f32> = u_xlat10;
        let x_613 : vec2<f32> = u_xlat53;
        let x_614 : vec2<f32> = ((-(vec2<f32>(x_607.x, x_607.y)) * vec2<f32>(x_610.x, x_610.y)) + x_613);
        let x_615 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_614.x, x_614.y, x_615.z, x_615.w);
        let x_617 : vec2<f32> = u_xlat51;
        u_xlat51 = max(x_617, vec2<f32>(0.0f, 0.0f));
        let x_619 : vec2<f32> = u_xlat51;
        let x_621 : vec2<f32> = u_xlat51;
        let x_623 : vec4<f32> = u_xlat8;
        u_xlat51 = ((-(x_619) * x_621) + vec2<f32>(x_623.y, x_623.w));
        let x_626 : vec4<f32> = u_xlat10;
        let x_628 : vec2<f32> = (vec2<f32>(x_626.x, x_626.y) + vec2<f32>(1.0f, 1.0f));
        let x_629 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_628.x, x_628.y, x_629.z, x_629.w);
        let x_631 : vec2<f32> = u_xlat51;
        u_xlat51 = (x_631 + vec2<f32>(1.0f, 1.0f));
        let x_634 : vec4<f32> = u_xlat9;
        let x_638 : vec2<f32> = (vec2<f32>(x_634.x, x_634.y) * vec2<f32>(0.159999996f, 0.159999996f));
        let x_639 : vec4<f32> = u_xlat11;
        u_xlat11 = vec4<f32>(x_638.x, x_638.y, x_639.z, x_639.w);
        let x_641 : vec2<f32> = u_xlat53;
        let x_642 : vec2<f32> = (x_641 * vec2<f32>(0.159999996f, 0.159999996f));
        let x_643 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_642.x, x_642.y, x_643.z, x_643.w);
        let x_645 : vec4<f32> = u_xlat10;
        let x_647 : vec2<f32> = (vec2<f32>(x_645.x, x_645.y) * vec2<f32>(0.159999996f, 0.159999996f));
        let x_648 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_647.x, x_647.y, x_648.z, x_648.w);
        let x_651 : vec2<f32> = u_xlat51;
        let x_652 : vec2<f32> = (x_651 * vec2<f32>(0.159999996f, 0.159999996f));
        let x_653 : vec4<f32> = u_xlat12;
        u_xlat12 = vec4<f32>(x_652.x, x_652.y, x_653.z, x_653.w);
        let x_655 : vec4<f32> = u_xlat8;
        u_xlat51 = (vec2<f32>(x_655.y, x_655.w) * vec2<f32>(0.159999996f, 0.159999996f));
        let x_659 : f32 = u_xlat10.x;
        u_xlat11.z = x_659;
        let x_662 : f32 = u_xlat51.x;
        u_xlat11.w = x_662;
        let x_665 : f32 = u_xlat12.x;
        u_xlat9.z = x_665;
        let x_668 : f32 = u_xlat8.x;
        u_xlat9.w = x_668;
        let x_671 : vec4<f32> = u_xlat9;
        let x_673 : vec4<f32> = u_xlat11;
        u_xlat13 = (vec4<f32>(x_671.z, x_671.w, x_671.x, x_671.z) + vec4<f32>(x_673.z, x_673.w, x_673.x, x_673.z));
        let x_677 : f32 = u_xlat11.y;
        u_xlat10.z = x_677;
        let x_680 : f32 = u_xlat51.y;
        u_xlat10.w = x_680;
        let x_683 : f32 = u_xlat9.y;
        u_xlat12.z = x_683;
        let x_686 : f32 = u_xlat8.z;
        u_xlat12.w = x_686;
        let x_688 : vec4<f32> = u_xlat10;
        let x_690 : vec4<f32> = u_xlat12;
        let x_692 : vec3<f32> = (vec3<f32>(x_688.z, x_688.y, x_688.w) + vec3<f32>(x_690.z, x_690.y, x_690.w));
        let x_693 : vec4<f32> = u_xlat8;
        u_xlat8 = vec4<f32>(x_692.x, x_692.y, x_692.z, x_693.w);
        let x_695 : vec4<f32> = u_xlat9;
        let x_697 : vec4<f32> = u_xlat13;
        let x_699 : vec3<f32> = (vec3<f32>(x_695.x, x_695.z, x_695.w) / vec3<f32>(x_697.z, x_697.w, x_697.y));
        let x_700 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_699.x, x_699.y, x_699.z, x_700.w);
        let x_702 : vec4<f32> = u_xlat9;
        let x_708 : vec3<f32> = (vec3<f32>(x_702.x, x_702.y, x_702.z) + vec3<f32>(-2.5f, -0.5f, 1.5f));
        let x_709 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_708.x, x_708.y, x_708.z, x_709.w);
        let x_711 : vec4<f32> = u_xlat12;
        let x_713 : vec4<f32> = u_xlat8;
        let x_715 : vec3<f32> = (vec3<f32>(x_711.z, x_711.y, x_711.w) / vec3<f32>(x_713.x, x_713.y, x_713.z));
        let x_716 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_715.x, x_715.y, x_715.z, x_716.w);
        let x_718 : vec4<f32> = u_xlat10;
        let x_720 : vec3<f32> = (vec3<f32>(x_718.x, x_718.y, x_718.z) + vec3<f32>(-2.5f, -0.5f, 1.5f));
        let x_721 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_720.x, x_720.y, x_720.z, x_721.w);
        let x_723 : vec4<f32> = u_xlat9;
        let x_726 : vec4<f32> = x_255.x_MainLightShadowmapSize;
        let x_728 : vec3<f32> = (vec3<f32>(x_723.y, x_723.x, x_723.z) * vec3<f32>(x_726.x, x_726.x, x_726.x));
        let x_729 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_728.x, x_728.y, x_728.z, x_729.w);
        let x_731 : vec4<f32> = u_xlat10;
        let x_734 : vec4<f32> = x_255.x_MainLightShadowmapSize;
        let x_736 : vec3<f32> = (vec3<f32>(x_731.x, x_731.y, x_731.z) * vec3<f32>(x_734.y, x_734.y, x_734.y));
        let x_737 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_736.x, x_736.y, x_736.z, x_737.w);
        let x_740 : f32 = u_xlat10.x;
        u_xlat9.w = x_740;
        let x_742 : vec4<f32> = u_xlat7;
        let x_745 : vec4<f32> = x_255.x_MainLightShadowmapSize;
        let x_748 : vec4<f32> = u_xlat9;
        u_xlat11 = ((vec4<f32>(x_742.x, x_742.y, x_742.x, x_742.y) * vec4<f32>(x_745.x, x_745.y, x_745.x, x_745.y)) + vec4<f32>(x_748.y, x_748.w, x_748.x, x_748.w));
        let x_751 : vec4<f32> = u_xlat7;
        let x_754 : vec4<f32> = x_255.x_MainLightShadowmapSize;
        let x_757 : vec4<f32> = u_xlat9;
        u_xlat51 = ((vec2<f32>(x_751.x, x_751.y) * vec2<f32>(x_754.x, x_754.y)) + vec2<f32>(x_757.z, x_757.w));
        let x_761 : f32 = u_xlat9.y;
        u_xlat10.w = x_761;
        let x_763 : vec4<f32> = u_xlat10;
        let x_764 : vec2<f32> = vec2<f32>(x_763.y, x_763.z);
        let x_765 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_765.x, x_764.x, x_765.z, x_764.y);
        let x_767 : vec4<f32> = u_xlat7;
        let x_770 : vec4<f32> = x_255.x_MainLightShadowmapSize;
        let x_773 : vec4<f32> = u_xlat9;
        u_xlat12 = ((vec4<f32>(x_767.x, x_767.y, x_767.x, x_767.y) * vec4<f32>(x_770.x, x_770.y, x_770.x, x_770.y)) + vec4<f32>(x_773.x, x_773.y, x_773.z, x_773.y));
        let x_776 : vec4<f32> = u_xlat7;
        let x_779 : vec4<f32> = x_255.x_MainLightShadowmapSize;
        let x_782 : vec4<f32> = u_xlat10;
        u_xlat10 = ((vec4<f32>(x_776.x, x_776.y, x_776.x, x_776.y) * vec4<f32>(x_779.x, x_779.y, x_779.x, x_779.y)) + vec4<f32>(x_782.w, x_782.y, x_782.w, x_782.z));
        let x_785 : vec4<f32> = u_xlat7;
        let x_788 : vec4<f32> = x_255.x_MainLightShadowmapSize;
        let x_791 : vec4<f32> = u_xlat9;
        u_xlat9 = ((vec4<f32>(x_785.x, x_785.y, x_785.x, x_785.y) * vec4<f32>(x_788.x, x_788.y, x_788.x, x_788.y)) + vec4<f32>(x_791.x, x_791.w, x_791.z, x_791.w));
        let x_795 : vec4<f32> = u_xlat8;
        let x_797 : vec4<f32> = u_xlat13;
        u_xlat14 = (vec4<f32>(x_795.x, x_795.x, x_795.x, x_795.y) * vec4<f32>(x_797.z, x_797.w, x_797.y, x_797.z));
        let x_801 : vec4<f32> = u_xlat8;
        let x_803 : vec4<f32> = u_xlat13;
        u_xlat15 = (vec4<f32>(x_801.y, x_801.y, x_801.z, x_801.z) * x_803);
        let x_807 : f32 = u_xlat8.z;
        let x_809 : f32 = u_xlat13.y;
        u_xlat68 = (x_807 * x_809);
        let x_812 : vec4<f32> = u_xlat11;
        let x_813 : vec2<f32> = vec2<f32>(x_812.x, x_812.y);
        let x_815 : f32 = u_xlat6.z;
        txVec4 = vec3<f32>(x_813.x, x_813.y, x_815);
        let x_823 : vec3<f32> = txVec4;
        let x_825 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_823.xy, x_823.z);
        u_xlat70 = x_825;
        let x_827 : vec4<f32> = u_xlat11;
        let x_828 : vec2<f32> = vec2<f32>(x_827.z, x_827.w);
        let x_830 : f32 = u_xlat6.z;
        txVec5 = vec3<f32>(x_828.x, x_828.y, x_830);
        let x_838 : vec3<f32> = txVec5;
        let x_840 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_838.xy, x_838.z);
        u_xlat72 = x_840;
        let x_841 : f32 = u_xlat72;
        let x_843 : f32 = u_xlat14.y;
        u_xlat72 = (x_841 * x_843);
        let x_846 : f32 = u_xlat14.x;
        let x_847 : f32 = u_xlat70;
        let x_849 : f32 = u_xlat72;
        u_xlat70 = ((x_846 * x_847) + x_849);
        let x_852 : vec2<f32> = u_xlat51;
        let x_854 : f32 = u_xlat6.z;
        txVec6 = vec3<f32>(x_852.x, x_852.y, x_854);
        let x_861 : vec3<f32> = txVec6;
        let x_863 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_861.xy, x_861.z);
        u_xlat72 = x_863;
        let x_865 : f32 = u_xlat14.z;
        let x_866 : f32 = u_xlat72;
        let x_868 : f32 = u_xlat70;
        u_xlat70 = ((x_865 * x_866) + x_868);
        let x_871 : vec4<f32> = u_xlat10;
        let x_872 : vec2<f32> = vec2<f32>(x_871.x, x_871.y);
        let x_874 : f32 = u_xlat6.z;
        txVec7 = vec3<f32>(x_872.x, x_872.y, x_874);
        let x_881 : vec3<f32> = txVec7;
        let x_883 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_881.xy, x_881.z);
        u_xlat72 = x_883;
        let x_885 : f32 = u_xlat14.w;
        let x_886 : f32 = u_xlat72;
        let x_888 : f32 = u_xlat70;
        u_xlat70 = ((x_885 * x_886) + x_888);
        let x_891 : vec4<f32> = u_xlat12;
        let x_892 : vec2<f32> = vec2<f32>(x_891.x, x_891.y);
        let x_894 : f32 = u_xlat6.z;
        txVec8 = vec3<f32>(x_892.x, x_892.y, x_894);
        let x_901 : vec3<f32> = txVec8;
        let x_903 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_901.xy, x_901.z);
        u_xlat72 = x_903;
        let x_905 : f32 = u_xlat15.x;
        let x_906 : f32 = u_xlat72;
        let x_908 : f32 = u_xlat70;
        u_xlat70 = ((x_905 * x_906) + x_908);
        let x_911 : vec4<f32> = u_xlat12;
        let x_912 : vec2<f32> = vec2<f32>(x_911.z, x_911.w);
        let x_914 : f32 = u_xlat6.z;
        txVec9 = vec3<f32>(x_912.x, x_912.y, x_914);
        let x_921 : vec3<f32> = txVec9;
        let x_923 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_921.xy, x_921.z);
        u_xlat72 = x_923;
        let x_925 : f32 = u_xlat15.y;
        let x_926 : f32 = u_xlat72;
        let x_928 : f32 = u_xlat70;
        u_xlat70 = ((x_925 * x_926) + x_928);
        let x_931 : vec4<f32> = u_xlat10;
        let x_932 : vec2<f32> = vec2<f32>(x_931.z, x_931.w);
        let x_934 : f32 = u_xlat6.z;
        txVec10 = vec3<f32>(x_932.x, x_932.y, x_934);
        let x_941 : vec3<f32> = txVec10;
        let x_943 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_941.xy, x_941.z);
        u_xlat72 = x_943;
        let x_945 : f32 = u_xlat15.z;
        let x_946 : f32 = u_xlat72;
        let x_948 : f32 = u_xlat70;
        u_xlat70 = ((x_945 * x_946) + x_948);
        let x_951 : vec4<f32> = u_xlat9;
        let x_952 : vec2<f32> = vec2<f32>(x_951.x, x_951.y);
        let x_954 : f32 = u_xlat6.z;
        txVec11 = vec3<f32>(x_952.x, x_952.y, x_954);
        let x_961 : vec3<f32> = txVec11;
        let x_963 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_961.xy, x_961.z);
        u_xlat72 = x_963;
        let x_965 : f32 = u_xlat15.w;
        let x_966 : f32 = u_xlat72;
        let x_968 : f32 = u_xlat70;
        u_xlat70 = ((x_965 * x_966) + x_968);
        let x_971 : vec4<f32> = u_xlat9;
        let x_972 : vec2<f32> = vec2<f32>(x_971.z, x_971.w);
        let x_974 : f32 = u_xlat6.z;
        txVec12 = vec3<f32>(x_972.x, x_972.y, x_974);
        let x_981 : vec3<f32> = txVec12;
        let x_983 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_981.xy, x_981.z);
        u_xlat72 = x_983;
        let x_984 : f32 = u_xlat68;
        let x_985 : f32 = u_xlat72;
        let x_987 : f32 = u_xlat70;
        u_xlat67 = ((x_984 * x_985) + x_987);
      } else {
        let x_990 : vec4<f32> = u_xlat6;
        let x_993 : vec4<f32> = x_255.x_MainLightShadowmapSize;
        let x_996 : vec2<f32> = ((vec2<f32>(x_990.x, x_990.y) * vec2<f32>(x_993.z, x_993.w)) + vec2<f32>(0.5f, 0.5f));
        let x_997 : vec4<f32> = u_xlat7;
        u_xlat7 = vec4<f32>(x_996.x, x_996.y, x_997.z, x_997.w);
        let x_999 : vec4<f32> = u_xlat7;
        let x_1001 : vec2<f32> = floor(vec2<f32>(x_999.x, x_999.y));
        let x_1002 : vec4<f32> = u_xlat7;
        u_xlat7 = vec4<f32>(x_1001.x, x_1001.y, x_1002.z, x_1002.w);
        let x_1004 : vec4<f32> = u_xlat6;
        let x_1007 : vec4<f32> = x_255.x_MainLightShadowmapSize;
        let x_1010 : vec4<f32> = u_xlat7;
        u_xlat51 = ((vec2<f32>(x_1004.x, x_1004.y) * vec2<f32>(x_1007.z, x_1007.w)) + -(vec2<f32>(x_1010.x, x_1010.y)));
        let x_1014 : vec2<f32> = u_xlat51;
        u_xlat8 = (vec4<f32>(x_1014.x, x_1014.x, x_1014.y, x_1014.y) + vec4<f32>(0.5f, 1.0f, 0.5f, 1.0f));
        let x_1017 : vec4<f32> = u_xlat8;
        let x_1019 : vec4<f32> = u_xlat8;
        u_xlat9 = (vec4<f32>(x_1017.x, x_1017.x, x_1017.z, x_1017.z) * vec4<f32>(x_1019.x, x_1019.x, x_1019.z, x_1019.z));
        let x_1022 : vec4<f32> = u_xlat9;
        let x_1026 : vec2<f32> = (vec2<f32>(x_1022.y, x_1022.w) * vec2<f32>(0.040816002f, 0.040816002f));
        let x_1027 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_1027.x, x_1026.x, x_1027.z, x_1026.y);
        let x_1029 : vec4<f32> = u_xlat9;
        let x_1032 : vec2<f32> = u_xlat51;
        let x_1034 : vec2<f32> = ((vec2<f32>(x_1029.x, x_1029.z) * vec2<f32>(0.5f, 0.5f)) + -(x_1032));
        let x_1035 : vec4<f32> = u_xlat8;
        u_xlat8 = vec4<f32>(x_1034.x, x_1035.y, x_1034.y, x_1035.w);
        let x_1037 : vec2<f32> = u_xlat51;
        let x_1039 : vec2<f32> = (-(x_1037) + vec2<f32>(1.0f, 1.0f));
        let x_1040 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_1039.x, x_1039.y, x_1040.z, x_1040.w);
        let x_1042 : vec2<f32> = u_xlat51;
        u_xlat53 = min(x_1042, vec2<f32>(0.0f, 0.0f));
        let x_1044 : vec2<f32> = u_xlat53;
        let x_1046 : vec2<f32> = u_xlat53;
        let x_1048 : vec4<f32> = u_xlat9;
        let x_1050 : vec2<f32> = ((-(x_1044) * x_1046) + vec2<f32>(x_1048.x, x_1048.y));
        let x_1051 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_1050.x, x_1050.y, x_1051.z, x_1051.w);
        let x_1053 : vec2<f32> = u_xlat51;
        u_xlat53 = max(x_1053, vec2<f32>(0.0f, 0.0f));
        let x_1056 : vec2<f32> = u_xlat53;
        let x_1058 : vec2<f32> = u_xlat53;
        let x_1060 : vec4<f32> = u_xlat8;
        let x_1062 : vec2<f32> = ((-(x_1056) * x_1058) + vec2<f32>(x_1060.y, x_1060.w));
        let x_1063 : vec3<f32> = u_xlat30;
        u_xlat30 = vec3<f32>(x_1062.x, x_1063.y, x_1062.y);
        let x_1065 : vec4<f32> = u_xlat9;
        let x_1068 : vec2<f32> = (vec2<f32>(x_1065.x, x_1065.y) + vec2<f32>(2.0f, 2.0f));
        let x_1069 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_1068.x, x_1068.y, x_1069.z, x_1069.w);
        let x_1071 : vec3<f32> = u_xlat30;
        let x_1073 : vec2<f32> = (vec2<f32>(x_1071.x, x_1071.z) + vec2<f32>(2.0f, 2.0f));
        let x_1074 : vec4<f32> = u_xlat8;
        u_xlat8 = vec4<f32>(x_1074.x, x_1073.x, x_1074.z, x_1073.y);
        let x_1077 : f32 = u_xlat8.y;
        u_xlat11.z = (x_1077 * 0.081632003f);
        let x_1081 : vec4<f32> = u_xlat8;
        let x_1084 : vec3<f32> = (vec3<f32>(x_1081.z, x_1081.x, x_1081.w) * vec3<f32>(0.081632003f, 0.081632003f, 0.081632003f));
        let x_1085 : vec4<f32> = u_xlat12;
        u_xlat12 = vec4<f32>(x_1084.x, x_1084.y, x_1084.z, x_1085.w);
        let x_1087 : vec4<f32> = u_xlat9;
        let x_1090 : vec2<f32> = (vec2<f32>(x_1087.x, x_1087.y) * vec2<f32>(0.081632003f, 0.081632003f));
        let x_1091 : vec4<f32> = u_xlat8;
        u_xlat8 = vec4<f32>(x_1090.x, x_1090.y, x_1091.z, x_1091.w);
        let x_1094 : f32 = u_xlat12.y;
        u_xlat11.x = x_1094;
        let x_1096 : vec2<f32> = u_xlat51;
        let x_1103 : vec2<f32> = ((vec2<f32>(x_1096.x, x_1096.x) * vec2<f32>(-0.081632003f, 0.081632003f)) + vec2<f32>(0.163264006f, 0.081632003f));
        let x_1104 : vec4<f32> = u_xlat11;
        u_xlat11 = vec4<f32>(x_1104.x, x_1103.x, x_1104.z, x_1103.y);
        let x_1106 : vec2<f32> = u_xlat51;
        let x_1110 : vec2<f32> = ((vec2<f32>(x_1106.x, x_1106.x) * vec2<f32>(-0.081632003f, 0.081632003f)) + vec2<f32>(0.081632003f, 0.163264006f));
        let x_1111 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_1110.x, x_1111.y, x_1110.y, x_1111.w);
        let x_1114 : f32 = u_xlat8.x;
        u_xlat9.y = x_1114;
        let x_1117 : f32 = u_xlat10.y;
        u_xlat9.w = x_1117;
        let x_1119 : vec4<f32> = u_xlat9;
        let x_1120 : vec4<f32> = u_xlat11;
        u_xlat11 = (x_1119 + x_1120);
        let x_1122 : vec2<f32> = u_xlat51;
        let x_1125 : vec2<f32> = ((vec2<f32>(x_1122.y, x_1122.y) * vec2<f32>(-0.081632003f, 0.081632003f)) + vec2<f32>(0.163264006f, 0.081632003f));
        let x_1126 : vec4<f32> = u_xlat12;
        u_xlat12 = vec4<f32>(x_1126.x, x_1125.x, x_1126.z, x_1125.y);
        let x_1128 : vec2<f32> = u_xlat51;
        let x_1131 : vec2<f32> = ((vec2<f32>(x_1128.y, x_1128.y) * vec2<f32>(-0.081632003f, 0.081632003f)) + vec2<f32>(0.081632003f, 0.163264006f));
        let x_1132 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_1131.x, x_1132.y, x_1131.y, x_1132.w);
        let x_1135 : f32 = u_xlat8.y;
        u_xlat10.y = x_1135;
        let x_1137 : vec4<f32> = u_xlat10;
        let x_1138 : vec4<f32> = u_xlat12;
        u_xlat8 = (x_1137 + x_1138);
        let x_1140 : vec4<f32> = u_xlat9;
        let x_1141 : vec4<f32> = u_xlat11;
        u_xlat9 = (x_1140 / x_1141);
        let x_1143 : vec4<f32> = u_xlat9;
        u_xlat9 = (x_1143 + vec4<f32>(-3.5f, -1.5f, 0.5f, 2.5f));
        let x_1149 : vec4<f32> = u_xlat10;
        let x_1150 : vec4<f32> = u_xlat8;
        u_xlat10 = (x_1149 / x_1150);
        let x_1152 : vec4<f32> = u_xlat10;
        u_xlat10 = (x_1152 + vec4<f32>(-3.5f, -1.5f, 0.5f, 2.5f));
        let x_1154 : vec4<f32> = u_xlat9;
        let x_1157 : vec4<f32> = x_255.x_MainLightShadowmapSize;
        u_xlat9 = (vec4<f32>(x_1154.w, x_1154.x, x_1154.y, x_1154.z) * vec4<f32>(x_1157.x, x_1157.x, x_1157.x, x_1157.x));
        let x_1160 : vec4<f32> = u_xlat10;
        let x_1163 : vec4<f32> = x_255.x_MainLightShadowmapSize;
        u_xlat10 = (vec4<f32>(x_1160.x, x_1160.w, x_1160.y, x_1160.z) * vec4<f32>(x_1163.y, x_1163.y, x_1163.y, x_1163.y));
        let x_1166 : vec4<f32> = u_xlat9;
        let x_1167 : vec3<f32> = vec3<f32>(x_1166.y, x_1166.z, x_1166.w);
        let x_1168 : vec4<f32> = u_xlat12;
        u_xlat12 = vec4<f32>(x_1167.x, x_1168.y, x_1167.y, x_1167.z);
        let x_1171 : f32 = u_xlat10.x;
        u_xlat12.y = x_1171;
        let x_1173 : vec4<f32> = u_xlat7;
        let x_1176 : vec4<f32> = x_255.x_MainLightShadowmapSize;
        let x_1179 : vec4<f32> = u_xlat12;
        u_xlat13 = ((vec4<f32>(x_1173.x, x_1173.y, x_1173.x, x_1173.y) * vec4<f32>(x_1176.x, x_1176.y, x_1176.x, x_1176.y)) + vec4<f32>(x_1179.x, x_1179.y, x_1179.z, x_1179.y));
        let x_1182 : vec4<f32> = u_xlat7;
        let x_1185 : vec4<f32> = x_255.x_MainLightShadowmapSize;
        let x_1188 : vec4<f32> = u_xlat12;
        u_xlat51 = ((vec2<f32>(x_1182.x, x_1182.y) * vec2<f32>(x_1185.x, x_1185.y)) + vec2<f32>(x_1188.w, x_1188.y));
        let x_1192 : f32 = u_xlat12.y;
        u_xlat9.y = x_1192;
        let x_1195 : f32 = u_xlat10.z;
        u_xlat12.y = x_1195;
        let x_1197 : vec4<f32> = u_xlat7;
        let x_1200 : vec4<f32> = x_255.x_MainLightShadowmapSize;
        let x_1203 : vec4<f32> = u_xlat12;
        u_xlat14 = ((vec4<f32>(x_1197.x, x_1197.y, x_1197.x, x_1197.y) * vec4<f32>(x_1200.x, x_1200.y, x_1200.x, x_1200.y)) + vec4<f32>(x_1203.x, x_1203.y, x_1203.z, x_1203.y));
        let x_1206 : vec4<f32> = u_xlat7;
        let x_1209 : vec4<f32> = x_255.x_MainLightShadowmapSize;
        let x_1212 : vec4<f32> = u_xlat12;
        let x_1214 : vec2<f32> = ((vec2<f32>(x_1206.x, x_1206.y) * vec2<f32>(x_1209.x, x_1209.y)) + vec2<f32>(x_1212.w, x_1212.y));
        let x_1215 : vec4<f32> = u_xlat15;
        u_xlat15 = vec4<f32>(x_1214.x, x_1214.y, x_1215.z, x_1215.w);
        let x_1218 : f32 = u_xlat12.y;
        u_xlat9.z = x_1218;
        let x_1221 : vec4<f32> = u_xlat7;
        let x_1224 : vec4<f32> = x_255.x_MainLightShadowmapSize;
        let x_1227 : vec4<f32> = u_xlat9;
        u_xlat16 = ((vec4<f32>(x_1221.x, x_1221.y, x_1221.x, x_1221.y) * vec4<f32>(x_1224.x, x_1224.y, x_1224.x, x_1224.y)) + vec4<f32>(x_1227.x, x_1227.y, x_1227.x, x_1227.z));
        let x_1231 : f32 = u_xlat10.w;
        u_xlat12.y = x_1231;
        let x_1234 : vec4<f32> = u_xlat7;
        let x_1237 : vec4<f32> = x_255.x_MainLightShadowmapSize;
        let x_1240 : vec4<f32> = u_xlat12;
        u_xlat17 = ((vec4<f32>(x_1234.x, x_1234.y, x_1234.x, x_1234.y) * vec4<f32>(x_1237.x, x_1237.y, x_1237.x, x_1237.y)) + vec4<f32>(x_1240.x, x_1240.y, x_1240.z, x_1240.y));
        let x_1244 : vec4<f32> = u_xlat7;
        let x_1247 : vec4<f32> = x_255.x_MainLightShadowmapSize;
        let x_1250 : vec4<f32> = u_xlat12;
        let x_1252 : vec2<f32> = ((vec2<f32>(x_1244.x, x_1244.y) * vec2<f32>(x_1247.x, x_1247.y)) + vec2<f32>(x_1250.w, x_1250.y));
        let x_1253 : vec3<f32> = u_xlat31;
        u_xlat31 = vec3<f32>(x_1252.x, x_1252.y, x_1253.z);
        let x_1256 : f32 = u_xlat12.y;
        u_xlat9.w = x_1256;
        let x_1259 : vec4<f32> = u_xlat7;
        let x_1262 : vec4<f32> = x_255.x_MainLightShadowmapSize;
        let x_1265 : vec4<f32> = u_xlat9;
        u_xlat59 = ((vec2<f32>(x_1259.x, x_1259.y) * vec2<f32>(x_1262.x, x_1262.y)) + vec2<f32>(x_1265.x, x_1265.w));
        let x_1268 : vec4<f32> = u_xlat12;
        let x_1269 : vec3<f32> = vec3<f32>(x_1268.x, x_1268.z, x_1268.w);
        let x_1270 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_1269.x, x_1270.y, x_1269.y, x_1269.z);
        let x_1272 : vec4<f32> = u_xlat7;
        let x_1275 : vec4<f32> = x_255.x_MainLightShadowmapSize;
        let x_1278 : vec4<f32> = u_xlat10;
        u_xlat12 = ((vec4<f32>(x_1272.x, x_1272.y, x_1272.x, x_1272.y) * vec4<f32>(x_1275.x, x_1275.y, x_1275.x, x_1275.y)) + vec4<f32>(x_1278.x, x_1278.y, x_1278.z, x_1278.y));
        let x_1282 : vec4<f32> = u_xlat7;
        let x_1285 : vec4<f32> = x_255.x_MainLightShadowmapSize;
        let x_1288 : vec4<f32> = u_xlat10;
        u_xlat54 = ((vec2<f32>(x_1282.x, x_1282.y) * vec2<f32>(x_1285.x, x_1285.y)) + vec2<f32>(x_1288.w, x_1288.y));
        let x_1292 : f32 = u_xlat9.x;
        u_xlat10.x = x_1292;
        let x_1294 : vec4<f32> = u_xlat7;
        let x_1297 : vec4<f32> = x_255.x_MainLightShadowmapSize;
        let x_1300 : vec4<f32> = u_xlat10;
        let x_1302 : vec2<f32> = ((vec2<f32>(x_1294.x, x_1294.y) * vec2<f32>(x_1297.x, x_1297.y)) + vec2<f32>(x_1300.x, x_1300.y));
        let x_1303 : vec4<f32> = u_xlat7;
        u_xlat7 = vec4<f32>(x_1302.x, x_1302.y, x_1303.z, x_1303.w);
        let x_1306 : vec4<f32> = u_xlat8;
        let x_1308 : vec4<f32> = u_xlat11;
        u_xlat18 = (vec4<f32>(x_1306.x, x_1306.x, x_1306.x, x_1306.x) * x_1308);
        let x_1311 : vec4<f32> = u_xlat8;
        let x_1313 : vec4<f32> = u_xlat11;
        u_xlat19 = (vec4<f32>(x_1311.y, x_1311.y, x_1311.y, x_1311.y) * x_1313);
        let x_1316 : vec4<f32> = u_xlat8;
        let x_1318 : vec4<f32> = u_xlat11;
        u_xlat20 = (vec4<f32>(x_1316.z, x_1316.z, x_1316.z, x_1316.z) * x_1318);
        let x_1320 : vec4<f32> = u_xlat8;
        let x_1322 : vec4<f32> = u_xlat11;
        u_xlat8 = (vec4<f32>(x_1320.w, x_1320.w, x_1320.w, x_1320.w) * x_1322);
        let x_1325 : vec4<f32> = u_xlat13;
        let x_1326 : vec2<f32> = vec2<f32>(x_1325.x, x_1325.y);
        let x_1328 : f32 = u_xlat6.z;
        txVec13 = vec3<f32>(x_1326.x, x_1326.y, x_1328);
        let x_1335 : vec3<f32> = txVec13;
        let x_1337 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1335.xy, x_1335.z);
        u_xlat68 = x_1337;
        let x_1339 : vec4<f32> = u_xlat13;
        let x_1340 : vec2<f32> = vec2<f32>(x_1339.z, x_1339.w);
        let x_1342 : f32 = u_xlat6.z;
        txVec14 = vec3<f32>(x_1340.x, x_1340.y, x_1342);
        let x_1349 : vec3<f32> = txVec14;
        let x_1351 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1349.xy, x_1349.z);
        u_xlat70 = x_1351;
        let x_1352 : f32 = u_xlat70;
        let x_1354 : f32 = u_xlat18.y;
        u_xlat70 = (x_1352 * x_1354);
        let x_1357 : f32 = u_xlat18.x;
        let x_1358 : f32 = u_xlat68;
        let x_1360 : f32 = u_xlat70;
        u_xlat68 = ((x_1357 * x_1358) + x_1360);
        let x_1363 : vec2<f32> = u_xlat51;
        let x_1365 : f32 = u_xlat6.z;
        txVec15 = vec3<f32>(x_1363.x, x_1363.y, x_1365);
        let x_1372 : vec3<f32> = txVec15;
        let x_1374 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1372.xy, x_1372.z);
        u_xlat70 = x_1374;
        let x_1376 : f32 = u_xlat18.z;
        let x_1377 : f32 = u_xlat70;
        let x_1379 : f32 = u_xlat68;
        u_xlat68 = ((x_1376 * x_1377) + x_1379);
        let x_1382 : vec4<f32> = u_xlat16;
        let x_1383 : vec2<f32> = vec2<f32>(x_1382.x, x_1382.y);
        let x_1385 : f32 = u_xlat6.z;
        txVec16 = vec3<f32>(x_1383.x, x_1383.y, x_1385);
        let x_1392 : vec3<f32> = txVec16;
        let x_1394 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1392.xy, x_1392.z);
        u_xlat70 = x_1394;
        let x_1396 : f32 = u_xlat18.w;
        let x_1397 : f32 = u_xlat70;
        let x_1399 : f32 = u_xlat68;
        u_xlat68 = ((x_1396 * x_1397) + x_1399);
        let x_1402 : vec4<f32> = u_xlat14;
        let x_1403 : vec2<f32> = vec2<f32>(x_1402.x, x_1402.y);
        let x_1405 : f32 = u_xlat6.z;
        txVec17 = vec3<f32>(x_1403.x, x_1403.y, x_1405);
        let x_1412 : vec3<f32> = txVec17;
        let x_1414 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1412.xy, x_1412.z);
        u_xlat70 = x_1414;
        let x_1416 : f32 = u_xlat19.x;
        let x_1417 : f32 = u_xlat70;
        let x_1419 : f32 = u_xlat68;
        u_xlat68 = ((x_1416 * x_1417) + x_1419);
        let x_1422 : vec4<f32> = u_xlat14;
        let x_1423 : vec2<f32> = vec2<f32>(x_1422.z, x_1422.w);
        let x_1425 : f32 = u_xlat6.z;
        txVec18 = vec3<f32>(x_1423.x, x_1423.y, x_1425);
        let x_1432 : vec3<f32> = txVec18;
        let x_1434 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1432.xy, x_1432.z);
        u_xlat70 = x_1434;
        let x_1436 : f32 = u_xlat19.y;
        let x_1437 : f32 = u_xlat70;
        let x_1439 : f32 = u_xlat68;
        u_xlat68 = ((x_1436 * x_1437) + x_1439);
        let x_1442 : vec4<f32> = u_xlat15;
        let x_1443 : vec2<f32> = vec2<f32>(x_1442.x, x_1442.y);
        let x_1445 : f32 = u_xlat6.z;
        txVec19 = vec3<f32>(x_1443.x, x_1443.y, x_1445);
        let x_1452 : vec3<f32> = txVec19;
        let x_1454 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1452.xy, x_1452.z);
        u_xlat70 = x_1454;
        let x_1456 : f32 = u_xlat19.z;
        let x_1457 : f32 = u_xlat70;
        let x_1459 : f32 = u_xlat68;
        u_xlat68 = ((x_1456 * x_1457) + x_1459);
        let x_1462 : vec4<f32> = u_xlat16;
        let x_1463 : vec2<f32> = vec2<f32>(x_1462.z, x_1462.w);
        let x_1465 : f32 = u_xlat6.z;
        txVec20 = vec3<f32>(x_1463.x, x_1463.y, x_1465);
        let x_1472 : vec3<f32> = txVec20;
        let x_1474 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1472.xy, x_1472.z);
        u_xlat70 = x_1474;
        let x_1476 : f32 = u_xlat19.w;
        let x_1477 : f32 = u_xlat70;
        let x_1479 : f32 = u_xlat68;
        u_xlat68 = ((x_1476 * x_1477) + x_1479);
        let x_1482 : vec4<f32> = u_xlat17;
        let x_1483 : vec2<f32> = vec2<f32>(x_1482.x, x_1482.y);
        let x_1485 : f32 = u_xlat6.z;
        txVec21 = vec3<f32>(x_1483.x, x_1483.y, x_1485);
        let x_1492 : vec3<f32> = txVec21;
        let x_1494 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1492.xy, x_1492.z);
        u_xlat70 = x_1494;
        let x_1496 : f32 = u_xlat20.x;
        let x_1497 : f32 = u_xlat70;
        let x_1499 : f32 = u_xlat68;
        u_xlat68 = ((x_1496 * x_1497) + x_1499);
        let x_1502 : vec4<f32> = u_xlat17;
        let x_1503 : vec2<f32> = vec2<f32>(x_1502.z, x_1502.w);
        let x_1505 : f32 = u_xlat6.z;
        txVec22 = vec3<f32>(x_1503.x, x_1503.y, x_1505);
        let x_1512 : vec3<f32> = txVec22;
        let x_1514 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1512.xy, x_1512.z);
        u_xlat70 = x_1514;
        let x_1516 : f32 = u_xlat20.y;
        let x_1517 : f32 = u_xlat70;
        let x_1519 : f32 = u_xlat68;
        u_xlat68 = ((x_1516 * x_1517) + x_1519);
        let x_1522 : vec3<f32> = u_xlat31;
        let x_1523 : vec2<f32> = vec2<f32>(x_1522.x, x_1522.y);
        let x_1525 : f32 = u_xlat6.z;
        txVec23 = vec3<f32>(x_1523.x, x_1523.y, x_1525);
        let x_1532 : vec3<f32> = txVec23;
        let x_1534 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1532.xy, x_1532.z);
        u_xlat70 = x_1534;
        let x_1536 : f32 = u_xlat20.z;
        let x_1537 : f32 = u_xlat70;
        let x_1539 : f32 = u_xlat68;
        u_xlat68 = ((x_1536 * x_1537) + x_1539);
        let x_1542 : vec2<f32> = u_xlat59;
        let x_1544 : f32 = u_xlat6.z;
        txVec24 = vec3<f32>(x_1542.x, x_1542.y, x_1544);
        let x_1551 : vec3<f32> = txVec24;
        let x_1553 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1551.xy, x_1551.z);
        u_xlat70 = x_1553;
        let x_1555 : f32 = u_xlat20.w;
        let x_1556 : f32 = u_xlat70;
        let x_1558 : f32 = u_xlat68;
        u_xlat68 = ((x_1555 * x_1556) + x_1558);
        let x_1561 : vec4<f32> = u_xlat12;
        let x_1562 : vec2<f32> = vec2<f32>(x_1561.x, x_1561.y);
        let x_1564 : f32 = u_xlat6.z;
        txVec25 = vec3<f32>(x_1562.x, x_1562.y, x_1564);
        let x_1571 : vec3<f32> = txVec25;
        let x_1573 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1571.xy, x_1571.z);
        u_xlat70 = x_1573;
        let x_1575 : f32 = u_xlat8.x;
        let x_1576 : f32 = u_xlat70;
        let x_1578 : f32 = u_xlat68;
        u_xlat68 = ((x_1575 * x_1576) + x_1578);
        let x_1581 : vec4<f32> = u_xlat12;
        let x_1582 : vec2<f32> = vec2<f32>(x_1581.z, x_1581.w);
        let x_1584 : f32 = u_xlat6.z;
        txVec26 = vec3<f32>(x_1582.x, x_1582.y, x_1584);
        let x_1591 : vec3<f32> = txVec26;
        let x_1593 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1591.xy, x_1591.z);
        u_xlat70 = x_1593;
        let x_1595 : f32 = u_xlat8.y;
        let x_1596 : f32 = u_xlat70;
        let x_1598 : f32 = u_xlat68;
        u_xlat68 = ((x_1595 * x_1596) + x_1598);
        let x_1601 : vec2<f32> = u_xlat54;
        let x_1603 : f32 = u_xlat6.z;
        txVec27 = vec3<f32>(x_1601.x, x_1601.y, x_1603);
        let x_1610 : vec3<f32> = txVec27;
        let x_1612 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1610.xy, x_1610.z);
        u_xlat70 = x_1612;
        let x_1614 : f32 = u_xlat8.z;
        let x_1615 : f32 = u_xlat70;
        let x_1617 : f32 = u_xlat68;
        u_xlat68 = ((x_1614 * x_1615) + x_1617);
        let x_1620 : vec4<f32> = u_xlat7;
        let x_1621 : vec2<f32> = vec2<f32>(x_1620.x, x_1620.y);
        let x_1623 : f32 = u_xlat6.z;
        txVec28 = vec3<f32>(x_1621.x, x_1621.y, x_1623);
        let x_1630 : vec3<f32> = txVec28;
        let x_1632 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1630.xy, x_1630.z);
        u_xlat70 = x_1632;
        let x_1634 : f32 = u_xlat8.w;
        let x_1635 : f32 = u_xlat70;
        let x_1637 : f32 = u_xlat68;
        u_xlat67 = ((x_1634 * x_1635) + x_1637);
      }
    }
  } else {
    let x_1641 : vec4<f32> = u_xlat6;
    let x_1642 : vec2<f32> = vec2<f32>(x_1641.x, x_1641.y);
    let x_1644 : f32 = u_xlat6.z;
    txVec29 = vec3<f32>(x_1642.x, x_1642.y, x_1644);
    let x_1651 : vec3<f32> = txVec29;
    let x_1653 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1651.xy, x_1651.z);
    u_xlat67 = x_1653;
  }
  let x_1655 : f32 = x_255.x_MainLightShadowParams.x;
  u_xlat68 = (-(x_1655) + 1.0f);
  let x_1658 : f32 = u_xlat67;
  let x_1660 : f32 = x_255.x_MainLightShadowParams.x;
  let x_1662 : f32 = u_xlat68;
  u_xlat67 = ((x_1658 * x_1660) + x_1662);
  let x_1666 : f32 = u_xlat6.z;
  u_xlatb70 = (0.0f >= x_1666);
  let x_1670 : f32 = u_xlat6.z;
  u_xlatb72 = (x_1670 >= 1.0f);
  let x_1672 : bool = u_xlatb70;
  let x_1673 : bool = u_xlatb72;
  u_xlatb70 = (x_1672 | x_1673);
  let x_1675 : bool = u_xlatb70;
  let x_1676 : f32 = u_xlat67;
  u_xlat67 = select(x_1676, 1.0f, x_1675);
  let x_1678 : vec3<f32> = u_xlat0;
  let x_1680 : vec4<f32> = x_90.x_MainLightPosition;
  u_xlat0.x = dot(x_1678, -(vec3<f32>(x_1680.x, x_1680.y, x_1680.z)));
  let x_1686 : f32 = u_xlat0.x;
  u_xlat0.x = clamp(x_1686, 0.0f, 1.0f);
  let x_1689 : f32 = u_xlat67;
  let x_1692 : vec4<f32> = x_90.x_MainLightColor;
  let x_1694 : vec3<f32> = (vec3<f32>(x_1689, x_1689, x_1689) * vec3<f32>(x_1692.x, x_1692.y, x_1692.z));
  let x_1695 : vec4<f32> = u_xlat7;
  u_xlat7 = vec4<f32>(x_1694.x, x_1694.y, x_1694.z, x_1695.w);
  let x_1697 : vec3<f32> = u_xlat0;
  let x_1699 : vec4<f32> = u_xlat7;
  u_xlat0 = (vec3<f32>(x_1697.x, x_1697.x, x_1697.x) * vec3<f32>(x_1699.x, x_1699.y, x_1699.z));
  let x_1702 : vec3<f32> = u_xlat0;
  let x_1703 : vec4<f32> = u_xlat3;
  u_xlat0 = (x_1702 * vec3<f32>(x_1703.x, x_1703.y, x_1703.z));
  let x_1707 : f32 = x_145.unity_LODFade.x;
  u_xlatb67 = (x_1707 < 0.0f);
  let x_1710 : f32 = x_145.unity_LODFade.x;
  u_xlat3.x = (x_1710 + 1.0f);
  let x_1713 : bool = u_xlatb67;
  if (x_1713) {
    let x_1718 : f32 = u_xlat3.x;
    x_1714 = x_1718;
  } else {
    let x_1721 : f32 = x_145.unity_LODFade.x;
    x_1714 = x_1721;
  }
  let x_1722 : f32 = x_1714;
  u_xlat67 = x_1722;
  let x_1724 : f32 = u_xlat67;
  u_xlatb3 = (0.5f >= x_1724);
  let x_1726 : vec3<f32> = u_xlat2;
  let x_1730 : vec4<f32> = x_90.x_ScreenParams;
  u_xlat2 = (abs(x_1726) * vec3<f32>(x_1730.x, x_1730.y, x_1730.x));
  let x_1736 : vec3<f32> = u_xlat2;
  u_xlatu2 = vec3<u32>(x_1736);
  let x_1740 : u32 = u_xlatu2.z;
  u_xlatu46 = (x_1740 * 1025u);
  let x_1744 : u32 = u_xlatu46;
  u_xlatu25 = (x_1744 >> 6u);
  let x_1748 : u32 = u_xlatu46;
  let x_1749 : u32 = u_xlatu25;
  u_xlati46 = bitcast<i32>((x_1748 ^ x_1749));
  let x_1752 : i32 = u_xlati46;
  u_xlatu46 = (bitcast<u32>(x_1752) * 9u);
  let x_1756 : u32 = u_xlatu46;
  u_xlatu25 = (x_1756 >> 11u);
  let x_1759 : u32 = u_xlatu46;
  let x_1760 : u32 = u_xlatu25;
  u_xlati46 = bitcast<i32>((x_1759 ^ x_1760));
  let x_1763 : i32 = u_xlati46;
  u_xlati46 = (x_1763 * 32769i);
  let x_1767 : i32 = u_xlati46;
  let x_1770 : u32 = u_xlatu2.y;
  u_xlati24 = bitcast<i32>((bitcast<u32>(x_1767) ^ x_1770));
  let x_1774 : i32 = u_xlati24;
  u_xlatu24 = (bitcast<u32>(x_1774) * 1025u);
  let x_1777 : u32 = u_xlatu24;
  u_xlatu46 = (x_1777 >> 6u);
  let x_1779 : u32 = u_xlatu46;
  let x_1780 : u32 = u_xlatu24;
  u_xlati24 = bitcast<i32>((x_1779 ^ x_1780));
  let x_1783 : i32 = u_xlati24;
  u_xlatu24 = (bitcast<u32>(x_1783) * 9u);
  let x_1786 : u32 = u_xlatu24;
  u_xlatu46 = (x_1786 >> 11u);
  let x_1788 : u32 = u_xlatu46;
  let x_1789 : u32 = u_xlatu24;
  u_xlati24 = bitcast<i32>((x_1788 ^ x_1789));
  let x_1792 : i32 = u_xlati24;
  u_xlati24 = (x_1792 * 32769i);
  let x_1795 : i32 = u_xlati24;
  let x_1798 : u32 = u_xlatu2.x;
  u_xlati2 = bitcast<i32>((bitcast<u32>(x_1795) ^ x_1798));
  let x_1801 : i32 = u_xlati2;
  u_xlatu2.x = (bitcast<u32>(x_1801) * 1025u);
  let x_1806 : u32 = u_xlatu2.x;
  u_xlatu24 = (x_1806 >> 6u);
  let x_1808 : u32 = u_xlatu24;
  let x_1810 : u32 = u_xlatu2.x;
  u_xlati2 = bitcast<i32>((x_1808 ^ x_1810));
  let x_1813 : i32 = u_xlati2;
  u_xlatu2.x = (bitcast<u32>(x_1813) * 9u);
  let x_1818 : u32 = u_xlatu2.x;
  u_xlatu24 = (x_1818 >> 11u);
  let x_1820 : u32 = u_xlatu24;
  let x_1822 : u32 = u_xlatu2.x;
  u_xlati2 = bitcast<i32>((x_1820 ^ x_1822));
  let x_1825 : i32 = u_xlati2;
  u_xlati2 = (x_1825 * 32769i);
  param = 1065353216i;
  let x_1831 : i32 = u_xlati2;
  param_1 = x_1831;
  param_2 = 0i;
  param_3 = 23i;
  let x_1834 : i32 = int_bitfieldInsert_i1_i1_i1_i1_(&(param), &(param_1), &(param_2), &(param_3));
  u_xlat2.x = bitcast<f32>(x_1834);
  let x_1838 : f32 = u_xlat2.x;
  u_xlat2.x = (x_1838 + -1.0f);
  let x_1843 : f32 = u_xlat2.x;
  u_xlat24.x = (-(x_1843) + 1.0f);
  let x_1847 : bool = u_xlatb3;
  if (x_1847) {
    let x_1852 : f32 = u_xlat2.x;
    x_1848 = x_1852;
  } else {
    let x_1855 : f32 = u_xlat24.x;
    x_1848 = x_1855;
  }
  let x_1856 : f32 = x_1848;
  u_xlat2.x = x_1856;
  let x_1858 : f32 = u_xlat67;
  let x_1861 : f32 = u_xlat2.x;
  u_xlat67 = ((x_1858 * 2.0f) + -(x_1861));
  let x_1864 : f32 = u_xlat67;
  let x_1866 : f32 = u_xlat3.w;
  u_xlat2.x = (x_1864 * x_1866);
  let x_1873 : f32 = u_xlat2.x;
  u_xlatb24.x = (x_1873 >= 0.400000006f);
  let x_1878 : bool = u_xlatb24.x;
  if (x_1878) {
    let x_1883 : f32 = u_xlat2.x;
    x_1879 = x_1883;
  } else {
    x_1879 = 0.0f;
  }
  let x_1885 : f32 = x_1879;
  u_xlat24.x = x_1885;
  let x_1888 : f32 = u_xlat3.w;
  let x_1889 : f32 = u_xlat67;
  u_xlat67 = ((x_1888 * x_1889) + -0.400000006f);
  let x_1895 : f32 = u_xlat2.x;
  u_xlat46 = dpdxCoarse(x_1895);
  let x_1898 : f32 = u_xlat2.x;
  u_xlat2.x = dpdyCoarse(x_1898);
  let x_1902 : f32 = u_xlat2.x;
  let x_1904 : f32 = u_xlat46;
  u_xlat2.x = (abs(x_1902) + abs(x_1904));
  let x_1909 : f32 = u_xlat2.x;
  u_xlat2.x = max(x_1909, 0.0001f);
  let x_1913 : f32 = u_xlat67;
  let x_1915 : f32 = u_xlat2.x;
  u_xlat67 = (x_1913 / x_1915);
  let x_1917 : f32 = u_xlat67;
  u_xlat67 = (x_1917 + 0.5f);
  let x_1919 : f32 = u_xlat67;
  u_xlat67 = clamp(x_1919, 0.0f, 1.0f);
  let x_1923 : f32 = x_90.x_AlphaToMaskAvailable;
  u_xlatb2 = !((x_1923 == 0.0f));
  let x_1925 : bool = u_xlatb2;
  if (x_1925) {
    let x_1929 : f32 = u_xlat67;
    x_1926 = x_1929;
  } else {
    let x_1932 : f32 = u_xlat24.x;
    x_1926 = x_1932;
  }
  let x_1933 : f32 = x_1926;
  u_xlat67 = x_1933;
  let x_1934 : f32 = u_xlat67;
  u_xlat24.x = (x_1934 + -0.0001f);
  let x_1939 : f32 = u_xlat24.x;
  u_xlatb24.x = (x_1939 < 0.0f);
  let x_1943 : bool = u_xlatb24.x;
  if (((select(0i, 1i, x_1943) * -1i) != 0i)) {
    discard;
  }
  let x_1953 : f32 = vs_INTERP2.w;
  u_xlatb24.x = (0.0f < x_1953);
  let x_1957 : f32 = x_145.unity_WorldTransformParams.w;
  u_xlatb24.y = (x_1957 >= 0.0f);
  let x_1961 : bool = u_xlatb24.x;
  u_xlat24.x = select(-1.0f, 1.0f, x_1961);
  let x_1965 : bool = u_xlatb24.y;
  u_xlat24.y = select(-1.0f, 1.0f, x_1965);
  let x_1969 : f32 = u_xlat24.y;
  let x_1971 : f32 = u_xlat24.x;
  u_xlat24.x = (x_1969 * x_1971);
  let x_1974 : vec3<f32> = vs_INTERP1;
  let x_1976 : vec4<f32> = vs_INTERP2;
  let x_1978 : vec3<f32> = (vec3<f32>(x_1974.z, x_1974.x, x_1974.y) * vec3<f32>(x_1976.y, x_1976.z, x_1976.x));
  let x_1979 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_1978.x, x_1978.y, x_1978.z, x_1979.w);
  let x_1981 : vec3<f32> = vs_INTERP1;
  let x_1983 : vec4<f32> = vs_INTERP2;
  let x_1986 : vec4<f32> = u_xlat3;
  let x_1989 : vec3<f32> = ((vec3<f32>(x_1981.y, x_1981.z, x_1981.x) * vec3<f32>(x_1983.z, x_1983.x, x_1983.y)) + -(vec3<f32>(x_1986.x, x_1986.y, x_1986.z)));
  let x_1990 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_1989.x, x_1989.y, x_1989.z, x_1990.w);
  let x_1992 : vec2<f32> = u_xlat24;
  let x_1994 : vec4<f32> = u_xlat3;
  let x_1996 : vec3<f32> = (vec3<f32>(x_1992.x, x_1992.x, x_1992.x) * vec3<f32>(x_1994.x, x_1994.y, x_1994.z));
  let x_1997 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_1996.x, x_1996.y, x_1996.z, x_1997.w);
  let x_1999 : vec4<f32> = u_xlat3;
  let x_2001 : vec3<f32> = u_xlat27;
  let x_2003 : vec3<f32> = (vec3<f32>(x_1999.x, x_1999.y, x_1999.z) * vec3<f32>(x_2001.y, x_2001.y, x_2001.y));
  let x_2004 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_2003.x, x_2003.y, x_2003.z, x_2004.w);
  let x_2006 : vec3<f32> = u_xlat27;
  let x_2008 : vec4<f32> = vs_INTERP2;
  let x_2011 : vec4<f32> = u_xlat3;
  let x_2013 : vec3<f32> = ((vec3<f32>(x_2006.x, x_2006.x, x_2006.x) * vec3<f32>(x_2008.x, x_2008.y, x_2008.z)) + vec3<f32>(x_2011.x, x_2011.y, x_2011.z));
  let x_2014 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_2013.x, x_2013.y, x_2013.z, x_2014.w);
  let x_2016 : vec3<f32> = u_xlat27;
  let x_2018 : vec3<f32> = vs_INTERP1;
  let x_2020 : vec4<f32> = u_xlat3;
  let x_2022 : vec3<f32> = ((vec3<f32>(x_2016.z, x_2016.z, x_2016.z) * x_2018) + vec3<f32>(x_2020.x, x_2020.y, x_2020.z));
  let x_2023 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_2022.x, x_2022.y, x_2022.z, x_2023.w);
  let x_2025 : vec4<f32> = u_xlat3;
  let x_2027 : vec4<f32> = u_xlat3;
  u_xlat24.x = dot(vec3<f32>(x_2025.x, x_2025.y, x_2025.z), vec3<f32>(x_2027.x, x_2027.y, x_2027.z));
  let x_2032 : f32 = u_xlat24.x;
  u_xlat24.x = inverseSqrt(x_2032);
  let x_2035 : vec2<f32> = u_xlat24;
  let x_2037 : vec4<f32> = u_xlat3;
  let x_2039 : vec3<f32> = (vec3<f32>(x_2035.x, x_2035.x, x_2035.x) * vec3<f32>(x_2037.x, x_2037.y, x_2037.z));
  let x_2040 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_2039.x, x_2039.y, x_2039.z, x_2040.w);
  let x_2043 : f32 = vs_INTERP0.y;
  let x_2045 : f32 = x_90.unity_MatrixV[1i].z;
  u_xlat24.x = (x_2043 * x_2045);
  let x_2049 : f32 = x_90.unity_MatrixV[0i].z;
  let x_2051 : f32 = vs_INTERP0.x;
  let x_2054 : f32 = u_xlat24.x;
  u_xlat24.x = ((x_2049 * x_2051) + x_2054);
  let x_2058 : f32 = x_90.unity_MatrixV[2i].z;
  let x_2060 : f32 = vs_INTERP0.z;
  let x_2063 : f32 = u_xlat24.x;
  u_xlat24.x = ((x_2058 * x_2060) + x_2063);
  let x_2067 : f32 = u_xlat24.x;
  let x_2069 : f32 = x_90.unity_MatrixV[3i].z;
  u_xlat24.x = (x_2067 + x_2069);
  let x_2073 : f32 = u_xlat24.x;
  let x_2077 : f32 = x_90.x_ProjectionParams.y;
  u_xlat24.x = (-(x_2073) + -(x_2077));
  let x_2082 : f32 = u_xlat24.x;
  u_xlat24.x = max(x_2082, 0.0f);
  let x_2086 : f32 = u_xlat24.x;
  let x_2089 : f32 = x_90.unity_FogParams.x;
  u_xlat24.x = (x_2086 * x_2089);
  let x_2099 : vec2<f32> = vs_INTERP5;
  let x_2101 : f32 = x_90.x_GlobalMipBias.x;
  let x_2102 : vec4<f32> = textureSampleBias(unity_LightmapInd, samplerunity_Lightmap, x_2099, x_2101);
  u_xlat7 = x_2102;
  let x_2107 : vec2<f32> = vs_INTERP5;
  let x_2109 : f32 = x_90.x_GlobalMipBias.x;
  let x_2110 : vec4<f32> = textureSampleBias(unity_Lightmap, samplerunity_Lightmap, x_2107, x_2109);
  u_xlat27 = vec3<f32>(x_2110.x, x_2110.y, x_2110.z);
  let x_2112 : vec4<f32> = u_xlat7;
  let x_2115 : vec3<f32> = (vec3<f32>(x_2112.x, x_2112.y, x_2112.z) + vec3<f32>(-0.5f, -0.5f, -0.5f));
  let x_2116 : vec4<f32> = u_xlat7;
  u_xlat7 = vec4<f32>(x_2115.x, x_2115.y, x_2115.z, x_2116.w);
  let x_2118 : vec4<f32> = u_xlat3;
  let x_2120 : vec4<f32> = u_xlat7;
  u_xlat46 = dot(vec3<f32>(x_2118.x, x_2118.y, x_2118.z), vec3<f32>(x_2120.x, x_2120.y, x_2120.z));
  let x_2123 : f32 = u_xlat46;
  u_xlat46 = (x_2123 + 0.5f);
  let x_2125 : f32 = u_xlat46;
  let x_2127 : vec3<f32> = u_xlat27;
  u_xlat27 = (vec3<f32>(x_2125, x_2125, x_2125) * x_2127);
  let x_2130 : f32 = u_xlat7.w;
  u_xlat46 = max(x_2130, 0.0001f);
  let x_2132 : vec3<f32> = u_xlat27;
  let x_2133 : f32 = u_xlat46;
  u_xlat27 = (x_2132 / vec3<f32>(x_2133, x_2133, x_2133));
  let x_2137 : vec4<f32> = x_90.x_ScaledScreenParams;
  let x_2138 : vec2<f32> = vec2<f32>(x_2137.x, x_2137.y);
  let x_2142 : vec2<f32> = (vec2<f32>(1.0f, 1.0f) / vec2<f32>(x_2138.x, x_2138.y));
  let x_2143 : vec4<f32> = u_xlat7;
  u_xlat7 = vec4<f32>(x_2142.x, x_2142.y, x_2143.z, x_2143.w);
  let x_2145 : vec4<f32> = u_xlat7;
  let x_2147 : vec4<f32> = hlslcc_FragCoord;
  let x_2149 : vec2<f32> = (vec2<f32>(x_2145.x, x_2145.y) * vec2<f32>(x_2147.x, x_2147.y));
  let x_2150 : vec4<f32> = u_xlat7;
  u_xlat7 = vec4<f32>(x_2149.x, x_2149.y, x_2150.z, x_2150.w);
  let x_2153 : f32 = u_xlat7.y;
  let x_2156 : f32 = x_90.x_ScaleBiasRt.x;
  let x_2159 : f32 = x_90.x_ScaleBiasRt.y;
  u_xlat46 = ((x_2153 * x_2156) + x_2159);
  let x_2161 : f32 = u_xlat46;
  u_xlat7.z = (-(x_2161) + 1.0f);
  let x_2166 : f32 = u_xlat5.x;
  u_xlat5.x = x_2166;
  let x_2169 : f32 = u_xlat5.x;
  u_xlat5.x = clamp(x_2169, 0.0f, 1.0f);
  let x_2172 : f32 = u_xlat67;
  u_xlat67 = x_2172;
  let x_2173 : f32 = u_xlat67;
  u_xlat67 = clamp(x_2173, 0.0f, 1.0f);
  let x_2175 : vec3<f32> = u_xlat4;
  u_xlat4 = (x_2175 * vec3<f32>(0.959999979f, 0.959999979f, 0.959999979f));
  let x_2180 : f32 = u_xlat5.x;
  u_xlat46 = (-(x_2180) + 1.0f);
  let x_2184 : f32 = u_xlat46;
  let x_2185 : f32 = u_xlat46;
  u_xlat69 = (x_2184 * x_2185);
  let x_2187 : f32 = u_xlat69;
  u_xlat69 = max(x_2187, 0.0078125f);
  let x_2190 : f32 = u_xlat69;
  let x_2191 : f32 = u_xlat69;
  u_xlat72 = (x_2190 * x_2191);
  let x_2194 : f32 = u_xlat5.x;
  u_xlat5.x = (x_2194 + 0.040000021f);
  let x_2199 : f32 = u_xlat5.x;
  u_xlat5.x = min(x_2199, 1.0f);
  let x_2203 : f32 = u_xlat69;
  u_xlat29 = ((x_2203 * 4.0f) + 2.0f);
  let x_2211 : vec4<f32> = u_xlat7;
  let x_2214 : f32 = x_90.x_GlobalMipBias.x;
  let x_2215 : vec4<f32> = textureSampleBias(x_ScreenSpaceOcclusionTexture, sampler_ScreenSpaceOcclusionTexture, vec2<f32>(x_2211.x, x_2211.z), x_2214);
  u_xlat7.x = x_2215.x;
  let x_2219 : f32 = u_xlat7.x;
  u_xlat51.x = (x_2219 + -1.0f);
  let x_2223 : f32 = x_90.x_AmbientOcclusionParam.w;
  let x_2225 : f32 = u_xlat51.x;
  u_xlat51.x = ((x_2223 * x_2225) + 1.0f);
  let x_2230 : f32 = u_xlat7.x;
  let x_2232 : f32 = vs_INTERP4.w;
  u_xlat7.x = min(x_2230, x_2232);
  let x_2235 : bool = u_xlatb66;
  if (x_2235) {
    let x_2239 : f32 = x_255.x_MainLightShadowParams.y;
    u_xlatb66 = (x_2239 == 1.0f);
    let x_2241 : bool = u_xlatb66;
    if (x_2241) {
      let x_2244 : vec4<f32> = u_xlat6;
      let x_2247 : vec4<f32> = x_255.x_MainLightShadowOffset0;
      u_xlat8 = (vec4<f32>(x_2244.x, x_2244.y, x_2244.x, x_2244.y) + x_2247);
      let x_2250 : vec4<f32> = u_xlat8;
      let x_2251 : vec2<f32> = vec2<f32>(x_2250.x, x_2250.y);
      let x_2253 : f32 = u_xlat6.z;
      txVec30 = vec3<f32>(x_2251.x, x_2251.y, x_2253);
      let x_2260 : vec3<f32> = txVec30;
      let x_2262 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2260.xy, x_2260.z);
      u_xlat9.x = x_2262;
      let x_2265 : vec4<f32> = u_xlat8;
      let x_2266 : vec2<f32> = vec2<f32>(x_2265.z, x_2265.w);
      let x_2268 : f32 = u_xlat6.z;
      txVec31 = vec3<f32>(x_2266.x, x_2266.y, x_2268);
      let x_2275 : vec3<f32> = txVec31;
      let x_2277 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2275.xy, x_2275.z);
      u_xlat9.y = x_2277;
      let x_2279 : vec4<f32> = u_xlat6;
      let x_2282 : vec4<f32> = x_255.x_MainLightShadowOffset1;
      u_xlat8 = (vec4<f32>(x_2279.x, x_2279.y, x_2279.x, x_2279.y) + x_2282);
      let x_2285 : vec4<f32> = u_xlat8;
      let x_2286 : vec2<f32> = vec2<f32>(x_2285.x, x_2285.y);
      let x_2288 : f32 = u_xlat6.z;
      txVec32 = vec3<f32>(x_2286.x, x_2286.y, x_2288);
      let x_2295 : vec3<f32> = txVec32;
      let x_2297 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2295.xy, x_2295.z);
      u_xlat9.z = x_2297;
      let x_2300 : vec4<f32> = u_xlat8;
      let x_2301 : vec2<f32> = vec2<f32>(x_2300.z, x_2300.w);
      let x_2303 : f32 = u_xlat6.z;
      txVec33 = vec3<f32>(x_2301.x, x_2301.y, x_2303);
      let x_2310 : vec3<f32> = txVec33;
      let x_2312 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2310.xy, x_2310.z);
      u_xlat9.w = x_2312;
      let x_2314 : vec4<f32> = u_xlat9;
      u_xlat66 = dot(x_2314, vec4<f32>(0.25f, 0.25f, 0.25f, 0.25f));
    } else {
      let x_2319 : f32 = x_255.x_MainLightShadowParams.y;
      u_xlatb73 = (x_2319 == 2.0f);
      let x_2321 : bool = u_xlatb73;
      if (x_2321) {
        let x_2324 : vec4<f32> = u_xlat6;
        let x_2327 : vec4<f32> = x_255.x_MainLightShadowmapSize;
        let x_2330 : vec2<f32> = ((vec2<f32>(x_2324.x, x_2324.y) * vec2<f32>(x_2327.z, x_2327.w)) + vec2<f32>(0.5f, 0.5f));
        let x_2331 : vec4<f32> = u_xlat8;
        u_xlat8 = vec4<f32>(x_2330.x, x_2330.y, x_2331.z, x_2331.w);
        let x_2333 : vec4<f32> = u_xlat8;
        let x_2335 : vec2<f32> = floor(vec2<f32>(x_2333.x, x_2333.y));
        let x_2336 : vec4<f32> = u_xlat8;
        u_xlat8 = vec4<f32>(x_2335.x, x_2335.y, x_2336.z, x_2336.w);
        let x_2339 : vec4<f32> = u_xlat6;
        let x_2342 : vec4<f32> = x_255.x_MainLightShadowmapSize;
        let x_2345 : vec4<f32> = u_xlat8;
        u_xlat52 = ((vec2<f32>(x_2339.x, x_2339.y) * vec2<f32>(x_2342.z, x_2342.w)) + -(vec2<f32>(x_2345.x, x_2345.y)));
        let x_2349 : vec2<f32> = u_xlat52;
        u_xlat9 = (vec4<f32>(x_2349.x, x_2349.x, x_2349.y, x_2349.y) + vec4<f32>(0.5f, 1.0f, 0.5f, 1.0f));
        let x_2352 : vec4<f32> = u_xlat9;
        let x_2354 : vec4<f32> = u_xlat9;
        u_xlat10 = (vec4<f32>(x_2352.x, x_2352.x, x_2352.z, x_2352.z) * vec4<f32>(x_2354.x, x_2354.x, x_2354.z, x_2354.z));
        let x_2357 : vec4<f32> = u_xlat10;
        let x_2359 : vec2<f32> = (vec2<f32>(x_2357.y, x_2357.w) * vec2<f32>(0.079999998f, 0.079999998f));
        let x_2360 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_2359.x, x_2360.y, x_2359.y, x_2360.w);
        let x_2362 : vec4<f32> = u_xlat10;
        let x_2365 : vec2<f32> = u_xlat52;
        let x_2367 : vec2<f32> = ((vec2<f32>(x_2362.x, x_2362.z) * vec2<f32>(0.5f, 0.5f)) + -(x_2365));
        let x_2368 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_2367.x, x_2367.y, x_2368.z, x_2368.w);
        let x_2370 : vec2<f32> = u_xlat52;
        u_xlat54 = (-(x_2370) + vec2<f32>(1.0f, 1.0f));
        let x_2373 : vec2<f32> = u_xlat52;
        let x_2374 : vec2<f32> = min(x_2373, vec2<f32>(0.0f, 0.0f));
        let x_2375 : vec4<f32> = u_xlat11;
        u_xlat11 = vec4<f32>(x_2374.x, x_2374.y, x_2375.z, x_2375.w);
        let x_2377 : vec4<f32> = u_xlat11;
        let x_2380 : vec4<f32> = u_xlat11;
        let x_2383 : vec2<f32> = u_xlat54;
        let x_2384 : vec2<f32> = ((-(vec2<f32>(x_2377.x, x_2377.y)) * vec2<f32>(x_2380.x, x_2380.y)) + x_2383);
        let x_2385 : vec4<f32> = u_xlat11;
        u_xlat11 = vec4<f32>(x_2384.x, x_2384.y, x_2385.z, x_2385.w);
        let x_2387 : vec2<f32> = u_xlat52;
        u_xlat52 = max(x_2387, vec2<f32>(0.0f, 0.0f));
        let x_2389 : vec2<f32> = u_xlat52;
        let x_2391 : vec2<f32> = u_xlat52;
        let x_2393 : vec4<f32> = u_xlat9;
        u_xlat52 = ((-(x_2389) * x_2391) + vec2<f32>(x_2393.y, x_2393.w));
        let x_2396 : vec4<f32> = u_xlat11;
        let x_2398 : vec2<f32> = (vec2<f32>(x_2396.x, x_2396.y) + vec2<f32>(1.0f, 1.0f));
        let x_2399 : vec4<f32> = u_xlat11;
        u_xlat11 = vec4<f32>(x_2398.x, x_2398.y, x_2399.z, x_2399.w);
        let x_2401 : vec2<f32> = u_xlat52;
        u_xlat52 = (x_2401 + vec2<f32>(1.0f, 1.0f));
        let x_2403 : vec4<f32> = u_xlat10;
        let x_2405 : vec2<f32> = (vec2<f32>(x_2403.x, x_2403.y) * vec2<f32>(0.159999996f, 0.159999996f));
        let x_2406 : vec4<f32> = u_xlat12;
        u_xlat12 = vec4<f32>(x_2405.x, x_2405.y, x_2406.z, x_2406.w);
        let x_2408 : vec2<f32> = u_xlat54;
        let x_2409 : vec2<f32> = (x_2408 * vec2<f32>(0.159999996f, 0.159999996f));
        let x_2410 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_2409.x, x_2409.y, x_2410.z, x_2410.w);
        let x_2412 : vec4<f32> = u_xlat11;
        let x_2414 : vec2<f32> = (vec2<f32>(x_2412.x, x_2412.y) * vec2<f32>(0.159999996f, 0.159999996f));
        let x_2415 : vec4<f32> = u_xlat11;
        u_xlat11 = vec4<f32>(x_2414.x, x_2414.y, x_2415.z, x_2415.w);
        let x_2417 : vec2<f32> = u_xlat52;
        let x_2418 : vec2<f32> = (x_2417 * vec2<f32>(0.159999996f, 0.159999996f));
        let x_2419 : vec4<f32> = u_xlat13;
        u_xlat13 = vec4<f32>(x_2418.x, x_2418.y, x_2419.z, x_2419.w);
        let x_2421 : vec4<f32> = u_xlat9;
        u_xlat52 = (vec2<f32>(x_2421.y, x_2421.w) * vec2<f32>(0.159999996f, 0.159999996f));
        let x_2425 : f32 = u_xlat11.x;
        u_xlat12.z = x_2425;
        let x_2428 : f32 = u_xlat52.x;
        u_xlat12.w = x_2428;
        let x_2431 : f32 = u_xlat13.x;
        u_xlat10.z = x_2431;
        let x_2434 : f32 = u_xlat9.x;
        u_xlat10.w = x_2434;
        let x_2436 : vec4<f32> = u_xlat10;
        let x_2438 : vec4<f32> = u_xlat12;
        u_xlat14 = (vec4<f32>(x_2436.z, x_2436.w, x_2436.x, x_2436.z) + vec4<f32>(x_2438.z, x_2438.w, x_2438.x, x_2438.z));
        let x_2442 : f32 = u_xlat12.y;
        u_xlat11.z = x_2442;
        let x_2445 : f32 = u_xlat52.y;
        u_xlat11.w = x_2445;
        let x_2448 : f32 = u_xlat10.y;
        u_xlat13.z = x_2448;
        let x_2451 : f32 = u_xlat9.z;
        u_xlat13.w = x_2451;
        let x_2453 : vec4<f32> = u_xlat11;
        let x_2455 : vec4<f32> = u_xlat13;
        let x_2457 : vec3<f32> = (vec3<f32>(x_2453.z, x_2453.y, x_2453.w) + vec3<f32>(x_2455.z, x_2455.y, x_2455.w));
        let x_2458 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_2457.x, x_2457.y, x_2457.z, x_2458.w);
        let x_2460 : vec4<f32> = u_xlat10;
        let x_2462 : vec4<f32> = u_xlat14;
        let x_2464 : vec3<f32> = (vec3<f32>(x_2460.x, x_2460.z, x_2460.w) / vec3<f32>(x_2462.z, x_2462.w, x_2462.y));
        let x_2465 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_2464.x, x_2464.y, x_2464.z, x_2465.w);
        let x_2467 : vec4<f32> = u_xlat10;
        let x_2469 : vec3<f32> = (vec3<f32>(x_2467.x, x_2467.y, x_2467.z) + vec3<f32>(-2.5f, -0.5f, 1.5f));
        let x_2470 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_2469.x, x_2469.y, x_2469.z, x_2470.w);
        let x_2472 : vec4<f32> = u_xlat13;
        let x_2474 : vec4<f32> = u_xlat9;
        let x_2476 : vec3<f32> = (vec3<f32>(x_2472.z, x_2472.y, x_2472.w) / vec3<f32>(x_2474.x, x_2474.y, x_2474.z));
        let x_2477 : vec4<f32> = u_xlat11;
        u_xlat11 = vec4<f32>(x_2476.x, x_2476.y, x_2476.z, x_2477.w);
        let x_2479 : vec4<f32> = u_xlat11;
        let x_2481 : vec3<f32> = (vec3<f32>(x_2479.x, x_2479.y, x_2479.z) + vec3<f32>(-2.5f, -0.5f, 1.5f));
        let x_2482 : vec4<f32> = u_xlat11;
        u_xlat11 = vec4<f32>(x_2481.x, x_2481.y, x_2481.z, x_2482.w);
        let x_2484 : vec4<f32> = u_xlat10;
        let x_2487 : vec4<f32> = x_255.x_MainLightShadowmapSize;
        let x_2489 : vec3<f32> = (vec3<f32>(x_2484.y, x_2484.x, x_2484.z) * vec3<f32>(x_2487.x, x_2487.x, x_2487.x));
        let x_2490 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_2489.x, x_2489.y, x_2489.z, x_2490.w);
        let x_2492 : vec4<f32> = u_xlat11;
        let x_2495 : vec4<f32> = x_255.x_MainLightShadowmapSize;
        let x_2497 : vec3<f32> = (vec3<f32>(x_2492.x, x_2492.y, x_2492.z) * vec3<f32>(x_2495.y, x_2495.y, x_2495.y));
        let x_2498 : vec4<f32> = u_xlat11;
        u_xlat11 = vec4<f32>(x_2497.x, x_2497.y, x_2497.z, x_2498.w);
        let x_2501 : f32 = u_xlat11.x;
        u_xlat10.w = x_2501;
        let x_2503 : vec4<f32> = u_xlat8;
        let x_2506 : vec4<f32> = x_255.x_MainLightShadowmapSize;
        let x_2509 : vec4<f32> = u_xlat10;
        u_xlat12 = ((vec4<f32>(x_2503.x, x_2503.y, x_2503.x, x_2503.y) * vec4<f32>(x_2506.x, x_2506.y, x_2506.x, x_2506.y)) + vec4<f32>(x_2509.y, x_2509.w, x_2509.x, x_2509.w));
        let x_2512 : vec4<f32> = u_xlat8;
        let x_2515 : vec4<f32> = x_255.x_MainLightShadowmapSize;
        let x_2518 : vec4<f32> = u_xlat10;
        u_xlat52 = ((vec2<f32>(x_2512.x, x_2512.y) * vec2<f32>(x_2515.x, x_2515.y)) + vec2<f32>(x_2518.z, x_2518.w));
        let x_2522 : f32 = u_xlat10.y;
        u_xlat11.w = x_2522;
        let x_2524 : vec4<f32> = u_xlat11;
        let x_2525 : vec2<f32> = vec2<f32>(x_2524.y, x_2524.z);
        let x_2526 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_2526.x, x_2525.x, x_2526.z, x_2525.y);
        let x_2528 : vec4<f32> = u_xlat8;
        let x_2531 : vec4<f32> = x_255.x_MainLightShadowmapSize;
        let x_2534 : vec4<f32> = u_xlat10;
        u_xlat13 = ((vec4<f32>(x_2528.x, x_2528.y, x_2528.x, x_2528.y) * vec4<f32>(x_2531.x, x_2531.y, x_2531.x, x_2531.y)) + vec4<f32>(x_2534.x, x_2534.y, x_2534.z, x_2534.y));
        let x_2537 : vec4<f32> = u_xlat8;
        let x_2540 : vec4<f32> = x_255.x_MainLightShadowmapSize;
        let x_2543 : vec4<f32> = u_xlat11;
        u_xlat11 = ((vec4<f32>(x_2537.x, x_2537.y, x_2537.x, x_2537.y) * vec4<f32>(x_2540.x, x_2540.y, x_2540.x, x_2540.y)) + vec4<f32>(x_2543.w, x_2543.y, x_2543.w, x_2543.z));
        let x_2546 : vec4<f32> = u_xlat8;
        let x_2549 : vec4<f32> = x_255.x_MainLightShadowmapSize;
        let x_2552 : vec4<f32> = u_xlat10;
        u_xlat10 = ((vec4<f32>(x_2546.x, x_2546.y, x_2546.x, x_2546.y) * vec4<f32>(x_2549.x, x_2549.y, x_2549.x, x_2549.y)) + vec4<f32>(x_2552.x, x_2552.w, x_2552.z, x_2552.w));
        let x_2555 : vec4<f32> = u_xlat9;
        let x_2557 : vec4<f32> = u_xlat14;
        u_xlat15 = (vec4<f32>(x_2555.x, x_2555.x, x_2555.x, x_2555.y) * vec4<f32>(x_2557.z, x_2557.w, x_2557.y, x_2557.z));
        let x_2560 : vec4<f32> = u_xlat9;
        let x_2562 : vec4<f32> = u_xlat14;
        u_xlat16 = (vec4<f32>(x_2560.y, x_2560.y, x_2560.z, x_2560.z) * x_2562);
        let x_2566 : f32 = u_xlat9.z;
        let x_2568 : f32 = u_xlat14.y;
        u_xlat73 = (x_2566 * x_2568);
        let x_2571 : vec4<f32> = u_xlat12;
        let x_2572 : vec2<f32> = vec2<f32>(x_2571.x, x_2571.y);
        let x_2574 : f32 = u_xlat6.z;
        txVec34 = vec3<f32>(x_2572.x, x_2572.y, x_2574);
        let x_2581 : vec3<f32> = txVec34;
        let x_2583 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2581.xy, x_2581.z);
        u_xlat8.x = x_2583;
        let x_2586 : vec4<f32> = u_xlat12;
        let x_2587 : vec2<f32> = vec2<f32>(x_2586.z, x_2586.w);
        let x_2589 : f32 = u_xlat6.z;
        txVec35 = vec3<f32>(x_2587.x, x_2587.y, x_2589);
        let x_2596 : vec3<f32> = txVec35;
        let x_2598 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2596.xy, x_2596.z);
        u_xlat30.x = x_2598;
        let x_2601 : f32 = u_xlat30.x;
        let x_2603 : f32 = u_xlat15.y;
        u_xlat30.x = (x_2601 * x_2603);
        let x_2607 : f32 = u_xlat15.x;
        let x_2609 : f32 = u_xlat8.x;
        let x_2612 : f32 = u_xlat30.x;
        u_xlat8.x = ((x_2607 * x_2609) + x_2612);
        let x_2616 : vec2<f32> = u_xlat52;
        let x_2618 : f32 = u_xlat6.z;
        txVec36 = vec3<f32>(x_2616.x, x_2616.y, x_2618);
        let x_2625 : vec3<f32> = txVec36;
        let x_2627 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2625.xy, x_2625.z);
        u_xlat30.x = x_2627;
        let x_2630 : f32 = u_xlat15.z;
        let x_2632 : f32 = u_xlat30.x;
        let x_2635 : f32 = u_xlat8.x;
        u_xlat8.x = ((x_2630 * x_2632) + x_2635);
        let x_2639 : vec4<f32> = u_xlat11;
        let x_2640 : vec2<f32> = vec2<f32>(x_2639.x, x_2639.y);
        let x_2642 : f32 = u_xlat6.z;
        txVec37 = vec3<f32>(x_2640.x, x_2640.y, x_2642);
        let x_2649 : vec3<f32> = txVec37;
        let x_2651 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2649.xy, x_2649.z);
        u_xlat30.x = x_2651;
        let x_2654 : f32 = u_xlat15.w;
        let x_2656 : f32 = u_xlat30.x;
        let x_2659 : f32 = u_xlat8.x;
        u_xlat8.x = ((x_2654 * x_2656) + x_2659);
        let x_2663 : vec4<f32> = u_xlat13;
        let x_2664 : vec2<f32> = vec2<f32>(x_2663.x, x_2663.y);
        let x_2666 : f32 = u_xlat6.z;
        txVec38 = vec3<f32>(x_2664.x, x_2664.y, x_2666);
        let x_2673 : vec3<f32> = txVec38;
        let x_2675 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2673.xy, x_2673.z);
        u_xlat30.x = x_2675;
        let x_2678 : f32 = u_xlat16.x;
        let x_2680 : f32 = u_xlat30.x;
        let x_2683 : f32 = u_xlat8.x;
        u_xlat8.x = ((x_2678 * x_2680) + x_2683);
        let x_2687 : vec4<f32> = u_xlat13;
        let x_2688 : vec2<f32> = vec2<f32>(x_2687.z, x_2687.w);
        let x_2690 : f32 = u_xlat6.z;
        txVec39 = vec3<f32>(x_2688.x, x_2688.y, x_2690);
        let x_2697 : vec3<f32> = txVec39;
        let x_2699 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2697.xy, x_2697.z);
        u_xlat30.x = x_2699;
        let x_2702 : f32 = u_xlat16.y;
        let x_2704 : f32 = u_xlat30.x;
        let x_2707 : f32 = u_xlat8.x;
        u_xlat8.x = ((x_2702 * x_2704) + x_2707);
        let x_2711 : vec4<f32> = u_xlat11;
        let x_2712 : vec2<f32> = vec2<f32>(x_2711.z, x_2711.w);
        let x_2714 : f32 = u_xlat6.z;
        txVec40 = vec3<f32>(x_2712.x, x_2712.y, x_2714);
        let x_2721 : vec3<f32> = txVec40;
        let x_2723 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2721.xy, x_2721.z);
        u_xlat30.x = x_2723;
        let x_2726 : f32 = u_xlat16.z;
        let x_2728 : f32 = u_xlat30.x;
        let x_2731 : f32 = u_xlat8.x;
        u_xlat8.x = ((x_2726 * x_2728) + x_2731);
        let x_2735 : vec4<f32> = u_xlat10;
        let x_2736 : vec2<f32> = vec2<f32>(x_2735.x, x_2735.y);
        let x_2738 : f32 = u_xlat6.z;
        txVec41 = vec3<f32>(x_2736.x, x_2736.y, x_2738);
        let x_2745 : vec3<f32> = txVec41;
        let x_2747 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2745.xy, x_2745.z);
        u_xlat30.x = x_2747;
        let x_2750 : f32 = u_xlat16.w;
        let x_2752 : f32 = u_xlat30.x;
        let x_2755 : f32 = u_xlat8.x;
        u_xlat8.x = ((x_2750 * x_2752) + x_2755);
        let x_2759 : vec4<f32> = u_xlat10;
        let x_2760 : vec2<f32> = vec2<f32>(x_2759.z, x_2759.w);
        let x_2762 : f32 = u_xlat6.z;
        txVec42 = vec3<f32>(x_2760.x, x_2760.y, x_2762);
        let x_2769 : vec3<f32> = txVec42;
        let x_2771 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2769.xy, x_2769.z);
        u_xlat30.x = x_2771;
        let x_2773 : f32 = u_xlat73;
        let x_2775 : f32 = u_xlat30.x;
        let x_2778 : f32 = u_xlat8.x;
        u_xlat66 = ((x_2773 * x_2775) + x_2778);
      } else {
        let x_2781 : vec4<f32> = u_xlat6;
        let x_2784 : vec4<f32> = x_255.x_MainLightShadowmapSize;
        let x_2787 : vec2<f32> = ((vec2<f32>(x_2781.x, x_2781.y) * vec2<f32>(x_2784.z, x_2784.w)) + vec2<f32>(0.5f, 0.5f));
        let x_2788 : vec4<f32> = u_xlat8;
        u_xlat8 = vec4<f32>(x_2787.x, x_2787.y, x_2788.z, x_2788.w);
        let x_2790 : vec4<f32> = u_xlat8;
        let x_2792 : vec2<f32> = floor(vec2<f32>(x_2790.x, x_2790.y));
        let x_2793 : vec4<f32> = u_xlat8;
        u_xlat8 = vec4<f32>(x_2792.x, x_2792.y, x_2793.z, x_2793.w);
        let x_2795 : vec4<f32> = u_xlat6;
        let x_2798 : vec4<f32> = x_255.x_MainLightShadowmapSize;
        let x_2801 : vec4<f32> = u_xlat8;
        u_xlat52 = ((vec2<f32>(x_2795.x, x_2795.y) * vec2<f32>(x_2798.z, x_2798.w)) + -(vec2<f32>(x_2801.x, x_2801.y)));
        let x_2805 : vec2<f32> = u_xlat52;
        u_xlat9 = (vec4<f32>(x_2805.x, x_2805.x, x_2805.y, x_2805.y) + vec4<f32>(0.5f, 1.0f, 0.5f, 1.0f));
        let x_2808 : vec4<f32> = u_xlat9;
        let x_2810 : vec4<f32> = u_xlat9;
        u_xlat10 = (vec4<f32>(x_2808.x, x_2808.x, x_2808.z, x_2808.z) * vec4<f32>(x_2810.x, x_2810.x, x_2810.z, x_2810.z));
        let x_2813 : vec4<f32> = u_xlat10;
        let x_2815 : vec2<f32> = (vec2<f32>(x_2813.y, x_2813.w) * vec2<f32>(0.040816002f, 0.040816002f));
        let x_2816 : vec4<f32> = u_xlat11;
        u_xlat11 = vec4<f32>(x_2816.x, x_2815.x, x_2816.z, x_2815.y);
        let x_2818 : vec4<f32> = u_xlat10;
        let x_2821 : vec2<f32> = u_xlat52;
        let x_2823 : vec2<f32> = ((vec2<f32>(x_2818.x, x_2818.z) * vec2<f32>(0.5f, 0.5f)) + -(x_2821));
        let x_2824 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_2823.x, x_2824.y, x_2823.y, x_2824.w);
        let x_2826 : vec2<f32> = u_xlat52;
        let x_2828 : vec2<f32> = (-(x_2826) + vec2<f32>(1.0f, 1.0f));
        let x_2829 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_2828.x, x_2828.y, x_2829.z, x_2829.w);
        let x_2831 : vec2<f32> = u_xlat52;
        u_xlat54 = min(x_2831, vec2<f32>(0.0f, 0.0f));
        let x_2833 : vec2<f32> = u_xlat54;
        let x_2835 : vec2<f32> = u_xlat54;
        let x_2837 : vec4<f32> = u_xlat10;
        let x_2839 : vec2<f32> = ((-(x_2833) * x_2835) + vec2<f32>(x_2837.x, x_2837.y));
        let x_2840 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_2839.x, x_2839.y, x_2840.z, x_2840.w);
        let x_2842 : vec2<f32> = u_xlat52;
        u_xlat54 = max(x_2842, vec2<f32>(0.0f, 0.0f));
        let x_2844 : vec2<f32> = u_xlat54;
        let x_2846 : vec2<f32> = u_xlat54;
        let x_2848 : vec4<f32> = u_xlat9;
        let x_2850 : vec2<f32> = ((-(x_2844) * x_2846) + vec2<f32>(x_2848.y, x_2848.w));
        let x_2851 : vec3<f32> = u_xlat31;
        u_xlat31 = vec3<f32>(x_2850.x, x_2851.y, x_2850.y);
        let x_2853 : vec4<f32> = u_xlat10;
        let x_2855 : vec2<f32> = (vec2<f32>(x_2853.x, x_2853.y) + vec2<f32>(2.0f, 2.0f));
        let x_2856 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_2855.x, x_2855.y, x_2856.z, x_2856.w);
        let x_2858 : vec3<f32> = u_xlat31;
        let x_2860 : vec2<f32> = (vec2<f32>(x_2858.x, x_2858.z) + vec2<f32>(2.0f, 2.0f));
        let x_2861 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_2861.x, x_2860.x, x_2861.z, x_2860.y);
        let x_2864 : f32 = u_xlat9.y;
        u_xlat12.z = (x_2864 * 0.081632003f);
        let x_2867 : vec4<f32> = u_xlat9;
        let x_2869 : vec3<f32> = (vec3<f32>(x_2867.z, x_2867.x, x_2867.w) * vec3<f32>(0.081632003f, 0.081632003f, 0.081632003f));
        let x_2870 : vec4<f32> = u_xlat13;
        u_xlat13 = vec4<f32>(x_2869.x, x_2869.y, x_2869.z, x_2870.w);
        let x_2872 : vec4<f32> = u_xlat10;
        let x_2874 : vec2<f32> = (vec2<f32>(x_2872.x, x_2872.y) * vec2<f32>(0.081632003f, 0.081632003f));
        let x_2875 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_2874.x, x_2874.y, x_2875.z, x_2875.w);
        let x_2878 : f32 = u_xlat13.y;
        u_xlat12.x = x_2878;
        let x_2880 : vec2<f32> = u_xlat52;
        let x_2883 : vec2<f32> = ((vec2<f32>(x_2880.x, x_2880.x) * vec2<f32>(-0.081632003f, 0.081632003f)) + vec2<f32>(0.163264006f, 0.081632003f));
        let x_2884 : vec4<f32> = u_xlat12;
        u_xlat12 = vec4<f32>(x_2884.x, x_2883.x, x_2884.z, x_2883.y);
        let x_2886 : vec2<f32> = u_xlat52;
        let x_2889 : vec2<f32> = ((vec2<f32>(x_2886.x, x_2886.x) * vec2<f32>(-0.081632003f, 0.081632003f)) + vec2<f32>(0.081632003f, 0.163264006f));
        let x_2890 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_2889.x, x_2890.y, x_2889.y, x_2890.w);
        let x_2893 : f32 = u_xlat9.x;
        u_xlat10.y = x_2893;
        let x_2896 : f32 = u_xlat11.y;
        u_xlat10.w = x_2896;
        let x_2898 : vec4<f32> = u_xlat10;
        let x_2899 : vec4<f32> = u_xlat12;
        u_xlat12 = (x_2898 + x_2899);
        let x_2901 : vec2<f32> = u_xlat52;
        let x_2904 : vec2<f32> = ((vec2<f32>(x_2901.y, x_2901.y) * vec2<f32>(-0.081632003f, 0.081632003f)) + vec2<f32>(0.163264006f, 0.081632003f));
        let x_2905 : vec4<f32> = u_xlat13;
        u_xlat13 = vec4<f32>(x_2905.x, x_2904.x, x_2905.z, x_2904.y);
        let x_2907 : vec2<f32> = u_xlat52;
        let x_2910 : vec2<f32> = ((vec2<f32>(x_2907.y, x_2907.y) * vec2<f32>(-0.081632003f, 0.081632003f)) + vec2<f32>(0.081632003f, 0.163264006f));
        let x_2911 : vec4<f32> = u_xlat11;
        u_xlat11 = vec4<f32>(x_2910.x, x_2911.y, x_2910.y, x_2911.w);
        let x_2914 : f32 = u_xlat9.y;
        u_xlat11.y = x_2914;
        let x_2916 : vec4<f32> = u_xlat11;
        let x_2917 : vec4<f32> = u_xlat13;
        u_xlat9 = (x_2916 + x_2917);
        let x_2919 : vec4<f32> = u_xlat10;
        let x_2920 : vec4<f32> = u_xlat12;
        u_xlat10 = (x_2919 / x_2920);
        let x_2922 : vec4<f32> = u_xlat10;
        u_xlat10 = (x_2922 + vec4<f32>(-3.5f, -1.5f, 0.5f, 2.5f));
        let x_2924 : vec4<f32> = u_xlat11;
        let x_2925 : vec4<f32> = u_xlat9;
        u_xlat11 = (x_2924 / x_2925);
        let x_2927 : vec4<f32> = u_xlat11;
        u_xlat11 = (x_2927 + vec4<f32>(-3.5f, -1.5f, 0.5f, 2.5f));
        let x_2929 : vec4<f32> = u_xlat10;
        let x_2932 : vec4<f32> = x_255.x_MainLightShadowmapSize;
        u_xlat10 = (vec4<f32>(x_2929.w, x_2929.x, x_2929.y, x_2929.z) * vec4<f32>(x_2932.x, x_2932.x, x_2932.x, x_2932.x));
        let x_2935 : vec4<f32> = u_xlat11;
        let x_2938 : vec4<f32> = x_255.x_MainLightShadowmapSize;
        u_xlat11 = (vec4<f32>(x_2935.x, x_2935.w, x_2935.y, x_2935.z) * vec4<f32>(x_2938.y, x_2938.y, x_2938.y, x_2938.y));
        let x_2941 : vec4<f32> = u_xlat10;
        let x_2942 : vec3<f32> = vec3<f32>(x_2941.y, x_2941.z, x_2941.w);
        let x_2943 : vec4<f32> = u_xlat13;
        u_xlat13 = vec4<f32>(x_2942.x, x_2943.y, x_2942.y, x_2942.z);
        let x_2946 : f32 = u_xlat11.x;
        u_xlat13.y = x_2946;
        let x_2948 : vec4<f32> = u_xlat8;
        let x_2951 : vec4<f32> = x_255.x_MainLightShadowmapSize;
        let x_2954 : vec4<f32> = u_xlat13;
        u_xlat14 = ((vec4<f32>(x_2948.x, x_2948.y, x_2948.x, x_2948.y) * vec4<f32>(x_2951.x, x_2951.y, x_2951.x, x_2951.y)) + vec4<f32>(x_2954.x, x_2954.y, x_2954.z, x_2954.y));
        let x_2957 : vec4<f32> = u_xlat8;
        let x_2960 : vec4<f32> = x_255.x_MainLightShadowmapSize;
        let x_2963 : vec4<f32> = u_xlat13;
        u_xlat52 = ((vec2<f32>(x_2957.x, x_2957.y) * vec2<f32>(x_2960.x, x_2960.y)) + vec2<f32>(x_2963.w, x_2963.y));
        let x_2967 : f32 = u_xlat13.y;
        u_xlat10.y = x_2967;
        let x_2970 : f32 = u_xlat11.z;
        u_xlat13.y = x_2970;
        let x_2972 : vec4<f32> = u_xlat8;
        let x_2975 : vec4<f32> = x_255.x_MainLightShadowmapSize;
        let x_2978 : vec4<f32> = u_xlat13;
        u_xlat15 = ((vec4<f32>(x_2972.x, x_2972.y, x_2972.x, x_2972.y) * vec4<f32>(x_2975.x, x_2975.y, x_2975.x, x_2975.y)) + vec4<f32>(x_2978.x, x_2978.y, x_2978.z, x_2978.y));
        let x_2981 : vec4<f32> = u_xlat8;
        let x_2984 : vec4<f32> = x_255.x_MainLightShadowmapSize;
        let x_2987 : vec4<f32> = u_xlat13;
        let x_2989 : vec2<f32> = ((vec2<f32>(x_2981.x, x_2981.y) * vec2<f32>(x_2984.x, x_2984.y)) + vec2<f32>(x_2987.w, x_2987.y));
        let x_2990 : vec4<f32> = u_xlat16;
        u_xlat16 = vec4<f32>(x_2989.x, x_2989.y, x_2990.z, x_2990.w);
        let x_2993 : f32 = u_xlat13.y;
        u_xlat10.z = x_2993;
        let x_2995 : vec4<f32> = u_xlat8;
        let x_2998 : vec4<f32> = x_255.x_MainLightShadowmapSize;
        let x_3001 : vec4<f32> = u_xlat10;
        u_xlat17 = ((vec4<f32>(x_2995.x, x_2995.y, x_2995.x, x_2995.y) * vec4<f32>(x_2998.x, x_2998.y, x_2998.x, x_2998.y)) + vec4<f32>(x_3001.x, x_3001.y, x_3001.x, x_3001.z));
        let x_3005 : f32 = u_xlat11.w;
        u_xlat13.y = x_3005;
        let x_3007 : vec4<f32> = u_xlat8;
        let x_3010 : vec4<f32> = x_255.x_MainLightShadowmapSize;
        let x_3013 : vec4<f32> = u_xlat13;
        u_xlat18 = ((vec4<f32>(x_3007.x, x_3007.y, x_3007.x, x_3007.y) * vec4<f32>(x_3010.x, x_3010.y, x_3010.x, x_3010.y)) + vec4<f32>(x_3013.x, x_3013.y, x_3013.z, x_3013.y));
        let x_3017 : vec4<f32> = u_xlat8;
        let x_3020 : vec4<f32> = x_255.x_MainLightShadowmapSize;
        let x_3023 : vec4<f32> = u_xlat13;
        u_xlat32 = ((vec2<f32>(x_3017.x, x_3017.y) * vec2<f32>(x_3020.x, x_3020.y)) + vec2<f32>(x_3023.w, x_3023.y));
        let x_3027 : f32 = u_xlat13.y;
        u_xlat10.w = x_3027;
        let x_3030 : vec4<f32> = u_xlat8;
        let x_3033 : vec4<f32> = x_255.x_MainLightShadowmapSize;
        let x_3036 : vec4<f32> = u_xlat10;
        u_xlat60 = ((vec2<f32>(x_3030.x, x_3030.y) * vec2<f32>(x_3033.x, x_3033.y)) + vec2<f32>(x_3036.x, x_3036.w));
        let x_3039 : vec4<f32> = u_xlat13;
        let x_3040 : vec3<f32> = vec3<f32>(x_3039.x, x_3039.z, x_3039.w);
        let x_3041 : vec4<f32> = u_xlat11;
        u_xlat11 = vec4<f32>(x_3040.x, x_3041.y, x_3040.y, x_3040.z);
        let x_3043 : vec4<f32> = u_xlat8;
        let x_3046 : vec4<f32> = x_255.x_MainLightShadowmapSize;
        let x_3049 : vec4<f32> = u_xlat11;
        u_xlat13 = ((vec4<f32>(x_3043.x, x_3043.y, x_3043.x, x_3043.y) * vec4<f32>(x_3046.x, x_3046.y, x_3046.x, x_3046.y)) + vec4<f32>(x_3049.x, x_3049.y, x_3049.z, x_3049.y));
        let x_3053 : vec4<f32> = u_xlat8;
        let x_3056 : vec4<f32> = x_255.x_MainLightShadowmapSize;
        let x_3059 : vec4<f32> = u_xlat11;
        u_xlat55 = ((vec2<f32>(x_3053.x, x_3053.y) * vec2<f32>(x_3056.x, x_3056.y)) + vec2<f32>(x_3059.w, x_3059.y));
        let x_3063 : f32 = u_xlat10.x;
        u_xlat11.x = x_3063;
        let x_3065 : vec4<f32> = u_xlat8;
        let x_3068 : vec4<f32> = x_255.x_MainLightShadowmapSize;
        let x_3071 : vec4<f32> = u_xlat11;
        let x_3073 : vec2<f32> = ((vec2<f32>(x_3065.x, x_3065.y) * vec2<f32>(x_3068.x, x_3068.y)) + vec2<f32>(x_3071.x, x_3071.y));
        let x_3074 : vec4<f32> = u_xlat8;
        u_xlat8 = vec4<f32>(x_3073.x, x_3073.y, x_3074.z, x_3074.w);
        let x_3076 : vec4<f32> = u_xlat9;
        let x_3078 : vec4<f32> = u_xlat12;
        u_xlat19 = (vec4<f32>(x_3076.x, x_3076.x, x_3076.x, x_3076.x) * x_3078);
        let x_3080 : vec4<f32> = u_xlat9;
        let x_3082 : vec4<f32> = u_xlat12;
        u_xlat20 = (vec4<f32>(x_3080.y, x_3080.y, x_3080.y, x_3080.y) * x_3082);
        let x_3085 : vec4<f32> = u_xlat9;
        let x_3087 : vec4<f32> = u_xlat12;
        u_xlat21 = (vec4<f32>(x_3085.z, x_3085.z, x_3085.z, x_3085.z) * x_3087);
        let x_3089 : vec4<f32> = u_xlat9;
        let x_3091 : vec4<f32> = u_xlat12;
        u_xlat9 = (vec4<f32>(x_3089.w, x_3089.w, x_3089.w, x_3089.w) * x_3091);
        let x_3094 : vec4<f32> = u_xlat14;
        let x_3095 : vec2<f32> = vec2<f32>(x_3094.x, x_3094.y);
        let x_3097 : f32 = u_xlat6.z;
        txVec43 = vec3<f32>(x_3095.x, x_3095.y, x_3097);
        let x_3104 : vec3<f32> = txVec43;
        let x_3106 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_3104.xy, x_3104.z);
        u_xlat73 = x_3106;
        let x_3108 : vec4<f32> = u_xlat14;
        let x_3109 : vec2<f32> = vec2<f32>(x_3108.z, x_3108.w);
        let x_3111 : f32 = u_xlat6.z;
        txVec44 = vec3<f32>(x_3109.x, x_3109.y, x_3111);
        let x_3118 : vec3<f32> = txVec44;
        let x_3120 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_3118.xy, x_3118.z);
        u_xlat10.x = x_3120;
        let x_3123 : f32 = u_xlat10.x;
        let x_3125 : f32 = u_xlat19.y;
        u_xlat10.x = (x_3123 * x_3125);
        let x_3129 : f32 = u_xlat19.x;
        let x_3130 : f32 = u_xlat73;
        let x_3133 : f32 = u_xlat10.x;
        u_xlat73 = ((x_3129 * x_3130) + x_3133);
        let x_3136 : vec2<f32> = u_xlat52;
        let x_3138 : f32 = u_xlat6.z;
        txVec45 = vec3<f32>(x_3136.x, x_3136.y, x_3138);
        let x_3145 : vec3<f32> = txVec45;
        let x_3147 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_3145.xy, x_3145.z);
        u_xlat52.x = x_3147;
        let x_3150 : f32 = u_xlat19.z;
        let x_3152 : f32 = u_xlat52.x;
        let x_3154 : f32 = u_xlat73;
        u_xlat73 = ((x_3150 * x_3152) + x_3154);
        let x_3157 : vec4<f32> = u_xlat17;
        let x_3158 : vec2<f32> = vec2<f32>(x_3157.x, x_3157.y);
        let x_3160 : f32 = u_xlat6.z;
        txVec46 = vec3<f32>(x_3158.x, x_3158.y, x_3160);
        let x_3167 : vec3<f32> = txVec46;
        let x_3169 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_3167.xy, x_3167.z);
        u_xlat52.x = x_3169;
        let x_3172 : f32 = u_xlat19.w;
        let x_3174 : f32 = u_xlat52.x;
        let x_3176 : f32 = u_xlat73;
        u_xlat73 = ((x_3172 * x_3174) + x_3176);
        let x_3179 : vec4<f32> = u_xlat15;
        let x_3180 : vec2<f32> = vec2<f32>(x_3179.x, x_3179.y);
        let x_3182 : f32 = u_xlat6.z;
        txVec47 = vec3<f32>(x_3180.x, x_3180.y, x_3182);
        let x_3189 : vec3<f32> = txVec47;
        let x_3191 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_3189.xy, x_3189.z);
        u_xlat52.x = x_3191;
        let x_3194 : f32 = u_xlat20.x;
        let x_3196 : f32 = u_xlat52.x;
        let x_3198 : f32 = u_xlat73;
        u_xlat73 = ((x_3194 * x_3196) + x_3198);
        let x_3201 : vec4<f32> = u_xlat15;
        let x_3202 : vec2<f32> = vec2<f32>(x_3201.z, x_3201.w);
        let x_3204 : f32 = u_xlat6.z;
        txVec48 = vec3<f32>(x_3202.x, x_3202.y, x_3204);
        let x_3211 : vec3<f32> = txVec48;
        let x_3213 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_3211.xy, x_3211.z);
        u_xlat52.x = x_3213;
        let x_3216 : f32 = u_xlat20.y;
        let x_3218 : f32 = u_xlat52.x;
        let x_3220 : f32 = u_xlat73;
        u_xlat73 = ((x_3216 * x_3218) + x_3220);
        let x_3223 : vec4<f32> = u_xlat16;
        let x_3224 : vec2<f32> = vec2<f32>(x_3223.x, x_3223.y);
        let x_3226 : f32 = u_xlat6.z;
        txVec49 = vec3<f32>(x_3224.x, x_3224.y, x_3226);
        let x_3233 : vec3<f32> = txVec49;
        let x_3235 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_3233.xy, x_3233.z);
        u_xlat52.x = x_3235;
        let x_3238 : f32 = u_xlat20.z;
        let x_3240 : f32 = u_xlat52.x;
        let x_3242 : f32 = u_xlat73;
        u_xlat73 = ((x_3238 * x_3240) + x_3242);
        let x_3245 : vec4<f32> = u_xlat17;
        let x_3246 : vec2<f32> = vec2<f32>(x_3245.z, x_3245.w);
        let x_3248 : f32 = u_xlat6.z;
        txVec50 = vec3<f32>(x_3246.x, x_3246.y, x_3248);
        let x_3255 : vec3<f32> = txVec50;
        let x_3257 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_3255.xy, x_3255.z);
        u_xlat52.x = x_3257;
        let x_3260 : f32 = u_xlat20.w;
        let x_3262 : f32 = u_xlat52.x;
        let x_3264 : f32 = u_xlat73;
        u_xlat73 = ((x_3260 * x_3262) + x_3264);
        let x_3267 : vec4<f32> = u_xlat18;
        let x_3268 : vec2<f32> = vec2<f32>(x_3267.x, x_3267.y);
        let x_3270 : f32 = u_xlat6.z;
        txVec51 = vec3<f32>(x_3268.x, x_3268.y, x_3270);
        let x_3277 : vec3<f32> = txVec51;
        let x_3279 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_3277.xy, x_3277.z);
        u_xlat52.x = x_3279;
        let x_3282 : f32 = u_xlat21.x;
        let x_3284 : f32 = u_xlat52.x;
        let x_3286 : f32 = u_xlat73;
        u_xlat73 = ((x_3282 * x_3284) + x_3286);
        let x_3289 : vec4<f32> = u_xlat18;
        let x_3290 : vec2<f32> = vec2<f32>(x_3289.z, x_3289.w);
        let x_3292 : f32 = u_xlat6.z;
        txVec52 = vec3<f32>(x_3290.x, x_3290.y, x_3292);
        let x_3299 : vec3<f32> = txVec52;
        let x_3301 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_3299.xy, x_3299.z);
        u_xlat52.x = x_3301;
        let x_3304 : f32 = u_xlat21.y;
        let x_3306 : f32 = u_xlat52.x;
        let x_3308 : f32 = u_xlat73;
        u_xlat73 = ((x_3304 * x_3306) + x_3308);
        let x_3311 : vec2<f32> = u_xlat32;
        let x_3313 : f32 = u_xlat6.z;
        txVec53 = vec3<f32>(x_3311.x, x_3311.y, x_3313);
        let x_3320 : vec3<f32> = txVec53;
        let x_3322 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_3320.xy, x_3320.z);
        u_xlat52.x = x_3322;
        let x_3325 : f32 = u_xlat21.z;
        let x_3327 : f32 = u_xlat52.x;
        let x_3329 : f32 = u_xlat73;
        u_xlat73 = ((x_3325 * x_3327) + x_3329);
        let x_3332 : vec2<f32> = u_xlat60;
        let x_3334 : f32 = u_xlat6.z;
        txVec54 = vec3<f32>(x_3332.x, x_3332.y, x_3334);
        let x_3341 : vec3<f32> = txVec54;
        let x_3343 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_3341.xy, x_3341.z);
        u_xlat52.x = x_3343;
        let x_3346 : f32 = u_xlat21.w;
        let x_3348 : f32 = u_xlat52.x;
        let x_3350 : f32 = u_xlat73;
        u_xlat73 = ((x_3346 * x_3348) + x_3350);
        let x_3353 : vec4<f32> = u_xlat13;
        let x_3354 : vec2<f32> = vec2<f32>(x_3353.x, x_3353.y);
        let x_3356 : f32 = u_xlat6.z;
        txVec55 = vec3<f32>(x_3354.x, x_3354.y, x_3356);
        let x_3363 : vec3<f32> = txVec55;
        let x_3365 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_3363.xy, x_3363.z);
        u_xlat52.x = x_3365;
        let x_3368 : f32 = u_xlat9.x;
        let x_3370 : f32 = u_xlat52.x;
        let x_3372 : f32 = u_xlat73;
        u_xlat73 = ((x_3368 * x_3370) + x_3372);
        let x_3375 : vec4<f32> = u_xlat13;
        let x_3376 : vec2<f32> = vec2<f32>(x_3375.z, x_3375.w);
        let x_3378 : f32 = u_xlat6.z;
        txVec56 = vec3<f32>(x_3376.x, x_3376.y, x_3378);
        let x_3385 : vec3<f32> = txVec56;
        let x_3387 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_3385.xy, x_3385.z);
        u_xlat52.x = x_3387;
        let x_3390 : f32 = u_xlat9.y;
        let x_3392 : f32 = u_xlat52.x;
        let x_3394 : f32 = u_xlat73;
        u_xlat73 = ((x_3390 * x_3392) + x_3394);
        let x_3397 : vec2<f32> = u_xlat55;
        let x_3399 : f32 = u_xlat6.z;
        txVec57 = vec3<f32>(x_3397.x, x_3397.y, x_3399);
        let x_3406 : vec3<f32> = txVec57;
        let x_3408 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_3406.xy, x_3406.z);
        u_xlat52.x = x_3408;
        let x_3411 : f32 = u_xlat9.z;
        let x_3413 : f32 = u_xlat52.x;
        let x_3415 : f32 = u_xlat73;
        u_xlat73 = ((x_3411 * x_3413) + x_3415);
        let x_3418 : vec4<f32> = u_xlat8;
        let x_3419 : vec2<f32> = vec2<f32>(x_3418.x, x_3418.y);
        let x_3421 : f32 = u_xlat6.z;
        txVec58 = vec3<f32>(x_3419.x, x_3419.y, x_3421);
        let x_3428 : vec3<f32> = txVec58;
        let x_3430 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_3428.xy, x_3428.z);
        u_xlat8.x = x_3430;
        let x_3433 : f32 = u_xlat9.w;
        let x_3435 : f32 = u_xlat8.x;
        let x_3437 : f32 = u_xlat73;
        u_xlat66 = ((x_3433 * x_3435) + x_3437);
      }
    }
  } else {
    let x_3441 : vec4<f32> = u_xlat6;
    let x_3442 : vec2<f32> = vec2<f32>(x_3441.x, x_3441.y);
    let x_3444 : f32 = u_xlat6.z;
    txVec59 = vec3<f32>(x_3442.x, x_3442.y, x_3444);
    let x_3451 : vec3<f32> = txVec59;
    let x_3453 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_3451.xy, x_3451.z);
    u_xlat66 = x_3453;
  }
  let x_3454 : f32 = u_xlat66;
  let x_3456 : f32 = x_255.x_MainLightShadowParams.x;
  let x_3458 : f32 = u_xlat68;
  u_xlat66 = ((x_3454 * x_3456) + x_3458);
  let x_3460 : bool = u_xlatb70;
  let x_3461 : f32 = u_xlat66;
  u_xlat66 = select(x_3461, 1.0f, x_3460);
  let x_3463 : vec3<f32> = vs_INTERP0;
  let x_3465 : vec3<f32> = x_90.x_WorldSpaceCameraPos;
  let x_3467 : vec3<f32> = (x_3463 + -(x_3465));
  let x_3468 : vec4<f32> = u_xlat6;
  u_xlat6 = vec4<f32>(x_3467.x, x_3467.y, x_3467.z, x_3468.w);
  let x_3470 : vec4<f32> = u_xlat6;
  let x_3472 : vec4<f32> = u_xlat6;
  u_xlat68 = dot(vec3<f32>(x_3470.x, x_3470.y, x_3470.z), vec3<f32>(x_3472.x, x_3472.y, x_3472.z));
  let x_3475 : f32 = u_xlat68;
  let x_3477 : f32 = x_255.x_MainLightShadowParams.z;
  let x_3480 : f32 = x_255.x_MainLightShadowParams.w;
  u_xlat68 = ((x_3475 * x_3477) + x_3480);
  let x_3482 : f32 = u_xlat68;
  u_xlat68 = clamp(x_3482, 0.0f, 1.0f);
  let x_3484 : f32 = u_xlat66;
  u_xlat70 = (-(x_3484) + 1.0f);
  let x_3487 : f32 = u_xlat68;
  let x_3488 : f32 = u_xlat70;
  let x_3490 : f32 = u_xlat66;
  u_xlat66 = ((x_3487 * x_3488) + x_3490);
  let x_3492 : vec2<f32> = u_xlat51;
  let x_3495 : vec4<f32> = x_90.x_MainLightColor;
  let x_3497 : vec3<f32> = (vec3<f32>(x_3492.x, x_3492.x, x_3492.x) * vec3<f32>(x_3495.x, x_3495.y, x_3495.z));
  let x_3498 : vec4<f32> = u_xlat6;
  u_xlat6 = vec4<f32>(x_3497.x, x_3497.y, x_3497.z, x_3498.w);
  let x_3500 : vec3<f32> = u_xlat1;
  let x_3502 : vec4<f32> = u_xlat3;
  u_xlat68 = dot(-(x_3500), vec3<f32>(x_3502.x, x_3502.y, x_3502.z));
  let x_3505 : f32 = u_xlat68;
  let x_3506 : f32 = u_xlat68;
  u_xlat68 = (x_3505 + x_3506);
  let x_3508 : vec4<f32> = u_xlat3;
  let x_3510 : f32 = u_xlat68;
  let x_3514 : vec3<f32> = u_xlat1;
  let x_3516 : vec3<f32> = ((vec3<f32>(x_3508.x, x_3508.y, x_3508.z) * -(vec3<f32>(x_3510, x_3510, x_3510))) + -(x_3514));
  let x_3517 : vec4<f32> = u_xlat8;
  u_xlat8 = vec4<f32>(x_3516.x, x_3516.y, x_3516.z, x_3517.w);
  let x_3519 : vec4<f32> = u_xlat3;
  let x_3521 : vec3<f32> = u_xlat1;
  u_xlat68 = dot(vec3<f32>(x_3519.x, x_3519.y, x_3519.z), x_3521);
  let x_3523 : f32 = u_xlat68;
  u_xlat68 = clamp(x_3523, 0.0f, 1.0f);
  let x_3525 : f32 = u_xlat68;
  u_xlat68 = (-(x_3525) + 1.0f);
  let x_3528 : f32 = u_xlat68;
  let x_3529 : f32 = u_xlat68;
  u_xlat68 = (x_3528 * x_3529);
  let x_3531 : f32 = u_xlat68;
  let x_3532 : f32 = u_xlat68;
  u_xlat68 = (x_3531 * x_3532);
  let x_3534 : f32 = u_xlat46;
  u_xlat70 = ((-(x_3534) * 0.699999988f) + 1.700000048f);
  let x_3540 : f32 = u_xlat46;
  let x_3541 : f32 = u_xlat70;
  u_xlat46 = (x_3540 * x_3541);
  let x_3543 : f32 = u_xlat46;
  u_xlat46 = (x_3543 * 6.0f);
  let x_3554 : vec4<f32> = u_xlat8;
  let x_3556 : f32 = u_xlat46;
  let x_3557 : vec4<f32> = textureSampleLevel(unity_SpecCube0, samplerunity_SpecCube0, vec3<f32>(x_3554.x, x_3554.y, x_3554.z), x_3556);
  u_xlat8 = x_3557;
  let x_3559 : f32 = u_xlat8.w;
  u_xlat46 = (x_3559 + -1.0f);
  let x_3562 : f32 = x_145.unity_SpecCube0_HDR.w;
  let x_3563 : f32 = u_xlat46;
  u_xlat46 = ((x_3562 * x_3563) + 1.0f);
  let x_3566 : f32 = u_xlat46;
  u_xlat46 = max(x_3566, 0.0f);
  let x_3568 : f32 = u_xlat46;
  u_xlat46 = log2(x_3568);
  let x_3570 : f32 = u_xlat46;
  let x_3572 : f32 = x_145.unity_SpecCube0_HDR.y;
  u_xlat46 = (x_3570 * x_3572);
  let x_3574 : f32 = u_xlat46;
  u_xlat46 = exp2(x_3574);
  let x_3576 : f32 = u_xlat46;
  let x_3578 : f32 = x_145.unity_SpecCube0_HDR.x;
  u_xlat46 = (x_3576 * x_3578);
  let x_3580 : vec4<f32> = u_xlat8;
  let x_3582 : f32 = u_xlat46;
  let x_3584 : vec3<f32> = (vec3<f32>(x_3580.x, x_3580.y, x_3580.z) * vec3<f32>(x_3582, x_3582, x_3582));
  let x_3585 : vec4<f32> = u_xlat8;
  u_xlat8 = vec4<f32>(x_3584.x, x_3584.y, x_3584.z, x_3585.w);
  let x_3587 : f32 = u_xlat69;
  let x_3589 : f32 = u_xlat69;
  let x_3593 : vec2<f32> = ((vec2<f32>(x_3587, x_3587) * vec2<f32>(x_3589, x_3589)) + vec2<f32>(-1.0f, 1.0f));
  let x_3594 : vec4<f32> = u_xlat9;
  u_xlat9 = vec4<f32>(x_3593.x, x_3593.y, x_3594.z, x_3594.w);
  let x_3597 : f32 = u_xlat9.y;
  u_xlat46 = (1.0f / x_3597);
  let x_3600 : f32 = u_xlat5.x;
  u_xlat69 = (x_3600 + -0.039999999f);
  let x_3603 : f32 = u_xlat68;
  let x_3604 : f32 = u_xlat69;
  u_xlat68 = ((x_3603 * x_3604) + 0.039999999f);
  let x_3608 : f32 = u_xlat68;
  let x_3609 : f32 = u_xlat46;
  u_xlat46 = (x_3608 * x_3609);
  let x_3611 : f32 = u_xlat46;
  let x_3613 : vec4<f32> = u_xlat8;
  let x_3615 : vec3<f32> = (vec3<f32>(x_3611, x_3611, x_3611) * vec3<f32>(x_3613.x, x_3613.y, x_3613.z));
  let x_3616 : vec4<f32> = u_xlat8;
  u_xlat8 = vec4<f32>(x_3615.x, x_3615.y, x_3615.z, x_3616.w);
  let x_3618 : vec3<f32> = u_xlat27;
  let x_3619 : vec3<f32> = u_xlat4;
  let x_3621 : vec4<f32> = u_xlat8;
  let x_3623 : vec3<f32> = ((x_3618 * x_3619) + vec3<f32>(x_3621.x, x_3621.y, x_3621.z));
  let x_3624 : vec4<f32> = u_xlat5;
  u_xlat5 = vec4<f32>(x_3623.x, x_3623.y, x_3623.z, x_3624.w);
  let x_3626 : f32 = u_xlat66;
  let x_3628 : f32 = x_145.unity_LightData.z;
  u_xlat66 = (x_3626 * x_3628);
  let x_3630 : vec4<f32> = u_xlat3;
  let x_3633 : vec4<f32> = x_90.x_MainLightPosition;
  u_xlat46 = dot(vec3<f32>(x_3630.x, x_3630.y, x_3630.z), vec3<f32>(x_3633.x, x_3633.y, x_3633.z));
  let x_3636 : f32 = u_xlat46;
  u_xlat46 = clamp(x_3636, 0.0f, 1.0f);
  let x_3638 : f32 = u_xlat66;
  let x_3639 : f32 = u_xlat46;
  u_xlat66 = (x_3638 * x_3639);
  let x_3641 : f32 = u_xlat66;
  let x_3643 : vec4<f32> = u_xlat6;
  let x_3645 : vec3<f32> = (vec3<f32>(x_3641, x_3641, x_3641) * vec3<f32>(x_3643.x, x_3643.y, x_3643.z));
  let x_3646 : vec4<f32> = u_xlat6;
  u_xlat6 = vec4<f32>(x_3645.x, x_3645.y, x_3645.z, x_3646.w);
  let x_3648 : vec3<f32> = u_xlat1;
  let x_3650 : vec4<f32> = x_90.x_MainLightPosition;
  let x_3652 : vec3<f32> = (x_3648 + vec3<f32>(x_3650.x, x_3650.y, x_3650.z));
  let x_3653 : vec4<f32> = u_xlat8;
  u_xlat8 = vec4<f32>(x_3652.x, x_3652.y, x_3652.z, x_3653.w);
  let x_3655 : vec4<f32> = u_xlat8;
  let x_3657 : vec4<f32> = u_xlat8;
  u_xlat66 = dot(vec3<f32>(x_3655.x, x_3655.y, x_3655.z), vec3<f32>(x_3657.x, x_3657.y, x_3657.z));
  let x_3660 : f32 = u_xlat66;
  u_xlat66 = max(x_3660, 1.17549435e-37f);
  let x_3663 : f32 = u_xlat66;
  u_xlat66 = inverseSqrt(x_3663);
  let x_3665 : f32 = u_xlat66;
  let x_3667 : vec4<f32> = u_xlat8;
  let x_3669 : vec3<f32> = (vec3<f32>(x_3665, x_3665, x_3665) * vec3<f32>(x_3667.x, x_3667.y, x_3667.z));
  let x_3670 : vec4<f32> = u_xlat8;
  u_xlat8 = vec4<f32>(x_3669.x, x_3669.y, x_3669.z, x_3670.w);
  let x_3672 : vec4<f32> = u_xlat3;
  let x_3674 : vec4<f32> = u_xlat8;
  u_xlat66 = dot(vec3<f32>(x_3672.x, x_3672.y, x_3672.z), vec3<f32>(x_3674.x, x_3674.y, x_3674.z));
  let x_3677 : f32 = u_xlat66;
  u_xlat66 = clamp(x_3677, 0.0f, 1.0f);
  let x_3680 : vec4<f32> = x_90.x_MainLightPosition;
  let x_3682 : vec4<f32> = u_xlat8;
  u_xlat46 = dot(vec3<f32>(x_3680.x, x_3680.y, x_3680.z), vec3<f32>(x_3682.x, x_3682.y, x_3682.z));
  let x_3685 : f32 = u_xlat46;
  u_xlat46 = clamp(x_3685, 0.0f, 1.0f);
  let x_3687 : f32 = u_xlat66;
  let x_3688 : f32 = u_xlat66;
  u_xlat66 = (x_3687 * x_3688);
  let x_3690 : f32 = u_xlat66;
  let x_3692 : f32 = u_xlat9.x;
  u_xlat66 = ((x_3690 * x_3692) + 1.000010014f);
  let x_3696 : f32 = u_xlat46;
  let x_3697 : f32 = u_xlat46;
  u_xlat46 = (x_3696 * x_3697);
  let x_3699 : f32 = u_xlat66;
  let x_3700 : f32 = u_xlat66;
  u_xlat66 = (x_3699 * x_3700);
  let x_3702 : f32 = u_xlat46;
  u_xlat46 = max(x_3702, 0.100000001f);
  let x_3705 : f32 = u_xlat66;
  let x_3706 : f32 = u_xlat46;
  u_xlat66 = (x_3705 * x_3706);
  let x_3708 : f32 = u_xlat29;
  let x_3709 : f32 = u_xlat66;
  u_xlat66 = (x_3708 * x_3709);
  let x_3711 : f32 = u_xlat72;
  let x_3712 : f32 = u_xlat66;
  u_xlat66 = (x_3711 / x_3712);
  let x_3714 : f32 = u_xlat66;
  let x_3718 : vec3<f32> = u_xlat4;
  let x_3719 : vec3<f32> = ((vec3<f32>(x_3714, x_3714, x_3714) * vec3<f32>(0.039999999f, 0.039999999f, 0.039999999f)) + x_3718);
  let x_3720 : vec4<f32> = u_xlat8;
  u_xlat8 = vec4<f32>(x_3719.x, x_3719.y, x_3719.z, x_3720.w);
  let x_3722 : vec4<f32> = u_xlat6;
  let x_3724 : vec4<f32> = u_xlat8;
  let x_3726 : vec3<f32> = (vec3<f32>(x_3722.x, x_3722.y, x_3722.z) * vec3<f32>(x_3724.x, x_3724.y, x_3724.z));
  let x_3727 : vec4<f32> = u_xlat6;
  u_xlat6 = vec4<f32>(x_3726.x, x_3726.y, x_3726.z, x_3727.w);
  let x_3730 : f32 = x_90.x_AdditionalLightsCount.x;
  let x_3732 : f32 = x_145.unity_LightData.y;
  u_xlat66 = min(x_3730, x_3732);
  let x_3734 : f32 = u_xlat66;
  u_xlatu66 = bitcast<u32>(i32(x_3734));
  u_xlat8.x = 0.0f;
  u_xlat8.y = 0.0f;
  u_xlat8.z = 0.0f;
  u_xlatu_loop_1 = 0u;
  loop {
    let x_3746 : u32 = u_xlatu_loop_1;
    let x_3747 : u32 = u_xlatu66;
    if ((x_3746 < x_3747)) {
    } else {
      break;
    }
    let x_3750 : u32 = u_xlatu_loop_1;
    u_xlatu68 = (x_3750 >> 2u);
    let x_3753 : u32 = u_xlatu_loop_1;
    u_xlati69 = bitcast<i32>((x_3753 & 3u));
    let x_3756 : u32 = u_xlatu68;
    let x_3759 : vec4<f32> = x_145.unity_LightIndices[bitcast<i32>(x_3756)];
    let x_3769 : i32 = u_xlati69;
    indexable = array<vec4<u32>, 4u>(vec4<u32>(1065353216u, 0u, 0u, 0u), vec4<u32>(0u, 1065353216u, 0u, 0u), vec4<u32>(0u, 0u, 1065353216u, 0u), vec4<u32>(0u, 0u, 0u, 1065353216u));
    let x_3774 : vec4<u32> = indexable[x_3769];
    u_xlat68 = dot(x_3759, bitcast<vec4<f32>>(x_3774));
    let x_3778 : f32 = u_xlat68;
    u_xlati68 = i32(x_3778);
    let x_3780 : vec3<f32> = vs_INTERP0;
    let x_3792 : i32 = u_xlati68;
    let x_3794 : vec4<f32> = x_3791.x_AdditionalLightsPosition[x_3792];
    let x_3797 : i32 = u_xlati68;
    let x_3799 : vec4<f32> = x_3791.x_AdditionalLightsPosition[x_3797];
    u_xlat31 = ((-(x_3780) * vec3<f32>(x_3794.w, x_3794.w, x_3794.w)) + vec3<f32>(x_3799.x, x_3799.y, x_3799.z));
    let x_3802 : vec3<f32> = u_xlat31;
    let x_3803 : vec3<f32> = u_xlat31;
    u_xlat69 = dot(x_3802, x_3803);
    let x_3805 : f32 = u_xlat69;
    u_xlat69 = max(x_3805, 6.10351562e-05f);
    let x_3808 : f32 = u_xlat69;
    u_xlat70 = inverseSqrt(x_3808);
    let x_3810 : f32 = u_xlat70;
    let x_3812 : vec3<f32> = u_xlat31;
    let x_3813 : vec3<f32> = (vec3<f32>(x_3810, x_3810, x_3810) * x_3812);
    let x_3814 : vec4<f32> = u_xlat10;
    u_xlat10 = vec4<f32>(x_3813.x, x_3813.y, x_3813.z, x_3814.w);
    let x_3817 : f32 = u_xlat69;
    u_xlat71 = (1.0f / x_3817);
    let x_3819 : f32 = u_xlat69;
    let x_3820 : i32 = u_xlati68;
    let x_3822 : f32 = x_3791.x_AdditionalLightsAttenuation[x_3820].x;
    u_xlat69 = (x_3819 * x_3822);
    let x_3824 : f32 = u_xlat69;
    let x_3826 : f32 = u_xlat69;
    u_xlat69 = ((-(x_3824) * x_3826) + 1.0f);
    let x_3829 : f32 = u_xlat69;
    u_xlat69 = max(x_3829, 0.0f);
    let x_3831 : f32 = u_xlat69;
    let x_3832 : f32 = u_xlat69;
    u_xlat69 = (x_3831 * x_3832);
    let x_3834 : f32 = u_xlat69;
    let x_3835 : f32 = u_xlat71;
    u_xlat69 = (x_3834 * x_3835);
    let x_3837 : i32 = u_xlati68;
    let x_3839 : vec4<f32> = x_3791.x_AdditionalLightsSpotDir[x_3837];
    let x_3841 : vec4<f32> = u_xlat10;
    u_xlat71 = dot(vec3<f32>(x_3839.x, x_3839.y, x_3839.z), vec3<f32>(x_3841.x, x_3841.y, x_3841.z));
    let x_3844 : f32 = u_xlat71;
    let x_3845 : i32 = u_xlati68;
    let x_3847 : f32 = x_3791.x_AdditionalLightsAttenuation[x_3845].z;
    let x_3849 : i32 = u_xlati68;
    let x_3851 : f32 = x_3791.x_AdditionalLightsAttenuation[x_3849].w;
    u_xlat71 = ((x_3844 * x_3847) + x_3851);
    let x_3853 : f32 = u_xlat71;
    u_xlat71 = clamp(x_3853, 0.0f, 1.0f);
    let x_3855 : f32 = u_xlat71;
    let x_3856 : f32 = u_xlat71;
    u_xlat71 = (x_3855 * x_3856);
    let x_3858 : f32 = u_xlat69;
    let x_3859 : f32 = u_xlat71;
    u_xlat69 = (x_3858 * x_3859);
    let x_3861 : vec2<f32> = u_xlat51;
    let x_3863 : i32 = u_xlati68;
    let x_3865 : vec4<f32> = x_3791.x_AdditionalLightsColor[x_3863];
    let x_3867 : vec3<f32> = (vec3<f32>(x_3861.x, x_3861.x, x_3861.x) * vec3<f32>(x_3865.x, x_3865.y, x_3865.z));
    let x_3868 : vec4<f32> = u_xlat11;
    u_xlat11 = vec4<f32>(x_3867.x, x_3867.y, x_3867.z, x_3868.w);
    let x_3870 : vec4<f32> = u_xlat3;
    let x_3872 : vec4<f32> = u_xlat10;
    u_xlat68 = dot(vec3<f32>(x_3870.x, x_3870.y, x_3870.z), vec3<f32>(x_3872.x, x_3872.y, x_3872.z));
    let x_3875 : f32 = u_xlat68;
    u_xlat68 = clamp(x_3875, 0.0f, 1.0f);
    let x_3877 : f32 = u_xlat68;
    let x_3878 : f32 = u_xlat69;
    u_xlat68 = (x_3877 * x_3878);
    let x_3880 : f32 = u_xlat68;
    let x_3882 : vec4<f32> = u_xlat11;
    let x_3884 : vec3<f32> = (vec3<f32>(x_3880, x_3880, x_3880) * vec3<f32>(x_3882.x, x_3882.y, x_3882.z));
    let x_3885 : vec4<f32> = u_xlat11;
    u_xlat11 = vec4<f32>(x_3884.x, x_3884.y, x_3884.z, x_3885.w);
    let x_3887 : vec3<f32> = u_xlat31;
    let x_3888 : f32 = u_xlat70;
    let x_3891 : vec3<f32> = u_xlat1;
    u_xlat31 = ((x_3887 * vec3<f32>(x_3888, x_3888, x_3888)) + x_3891);
    let x_3893 : vec3<f32> = u_xlat31;
    let x_3894 : vec3<f32> = u_xlat31;
    u_xlat68 = dot(x_3893, x_3894);
    let x_3896 : f32 = u_xlat68;
    u_xlat68 = max(x_3896, 1.17549435e-37f);
    let x_3898 : f32 = u_xlat68;
    u_xlat68 = inverseSqrt(x_3898);
    let x_3900 : f32 = u_xlat68;
    let x_3902 : vec3<f32> = u_xlat31;
    u_xlat31 = (vec3<f32>(x_3900, x_3900, x_3900) * x_3902);
    let x_3904 : vec4<f32> = u_xlat3;
    let x_3906 : vec3<f32> = u_xlat31;
    u_xlat68 = dot(vec3<f32>(x_3904.x, x_3904.y, x_3904.z), x_3906);
    let x_3908 : f32 = u_xlat68;
    u_xlat68 = clamp(x_3908, 0.0f, 1.0f);
    let x_3910 : vec4<f32> = u_xlat10;
    let x_3912 : vec3<f32> = u_xlat31;
    u_xlat69 = dot(vec3<f32>(x_3910.x, x_3910.y, x_3910.z), x_3912);
    let x_3914 : f32 = u_xlat69;
    u_xlat69 = clamp(x_3914, 0.0f, 1.0f);
    let x_3916 : f32 = u_xlat68;
    let x_3917 : f32 = u_xlat68;
    u_xlat68 = (x_3916 * x_3917);
    let x_3919 : f32 = u_xlat68;
    let x_3921 : f32 = u_xlat9.x;
    u_xlat68 = ((x_3919 * x_3921) + 1.000010014f);
    let x_3924 : f32 = u_xlat69;
    let x_3925 : f32 = u_xlat69;
    u_xlat69 = (x_3924 * x_3925);
    let x_3927 : f32 = u_xlat68;
    let x_3928 : f32 = u_xlat68;
    u_xlat68 = (x_3927 * x_3928);
    let x_3930 : f32 = u_xlat69;
    u_xlat69 = max(x_3930, 0.100000001f);
    let x_3932 : f32 = u_xlat68;
    let x_3933 : f32 = u_xlat69;
    u_xlat68 = (x_3932 * x_3933);
    let x_3935 : f32 = u_xlat29;
    let x_3936 : f32 = u_xlat68;
    u_xlat68 = (x_3935 * x_3936);
    let x_3938 : f32 = u_xlat72;
    let x_3939 : f32 = u_xlat68;
    u_xlat68 = (x_3938 / x_3939);
    let x_3941 : f32 = u_xlat68;
    let x_3944 : vec3<f32> = u_xlat4;
    u_xlat31 = ((vec3<f32>(x_3941, x_3941, x_3941) * vec3<f32>(0.039999999f, 0.039999999f, 0.039999999f)) + x_3944);
    let x_3946 : vec3<f32> = u_xlat31;
    let x_3947 : vec4<f32> = u_xlat11;
    let x_3950 : vec4<f32> = u_xlat8;
    let x_3952 : vec3<f32> = ((x_3946 * vec3<f32>(x_3947.x, x_3947.y, x_3947.z)) + vec3<f32>(x_3950.x, x_3950.y, x_3950.z));
    let x_3953 : vec4<f32> = u_xlat8;
    u_xlat8 = vec4<f32>(x_3952.x, x_3952.y, x_3952.z, x_3953.w);

    continuing {
      let x_3955 : u32 = u_xlatu_loop_1;
      u_xlatu_loop_1 = (x_3955 + bitcast<u32>(1i));
    }
  }
  let x_3957 : vec4<f32> = u_xlat5;
  let x_3959 : vec4<f32> = u_xlat7;
  let x_3962 : vec4<f32> = u_xlat6;
  u_xlat1 = ((vec3<f32>(x_3957.x, x_3957.y, x_3957.z) * vec3<f32>(x_3959.x, x_3959.x, x_3959.x)) + vec3<f32>(x_3962.x, x_3962.y, x_3962.z));
  let x_3965 : vec4<f32> = u_xlat8;
  let x_3967 : vec3<f32> = u_xlat1;
  u_xlat1 = (vec3<f32>(x_3965.x, x_3965.y, x_3965.z) + x_3967);
  let x_3969 : vec4<f32> = vs_INTERP4;
  let x_3971 : vec3<f32> = u_xlat0;
  let x_3973 : vec3<f32> = u_xlat1;
  u_xlat0 = ((vec3<f32>(x_3969.w, x_3969.w, x_3969.w) * x_3971) + x_3973);
  let x_3976 : f32 = u_xlat24.x;
  let x_3978 : f32 = u_xlat24.x;
  u_xlat66 = (x_3976 * -(x_3978));
  let x_3981 : f32 = u_xlat66;
  u_xlat66 = exp2(x_3981);
  let x_3983 : vec3<f32> = u_xlat0;
  let x_3986 : vec4<f32> = x_90.unity_FogColor;
  u_xlat0 = (x_3983 + -(vec3<f32>(x_3986.x, x_3986.y, x_3986.z)));
  let x_3992 : f32 = u_xlat66;
  let x_3994 : vec3<f32> = u_xlat0;
  let x_3997 : vec4<f32> = x_90.unity_FogColor;
  let x_3999 : vec3<f32> = ((vec3<f32>(x_3992, x_3992, x_3992) * x_3994) + vec3<f32>(x_3997.x, x_3997.y, x_3997.z));
  let x_4000 : vec4<f32> = SV_Target0;
  SV_Target0 = vec4<f32>(x_3999.x, x_3999.y, x_3999.z, x_4000.w);
  let x_4002 : bool = u_xlatb2;
  let x_4003 : f32 = u_xlat67;
  SV_Target0.w = select(1.0f, x_4003, x_4002);
  let x_4010 : u32 = x_90.x_RenderingLayerMaxInt;
  let x_4012 : f32 = x_145.unity_RenderingLayer.x;
  u_xlatu0 = (x_4010 & bitcast<u32>(x_4012));
  let x_4015 : u32 = u_xlatu0;
  u_xlat0.x = f32(x_4015);
  let x_4020 : f32 = u_xlat0.x;
  let x_4022 : f32 = x_90.x_RenderingLayerRcpMaxInt;
  SV_Target1.x = (x_4020 * x_4022);
  let x_4026 : f32 = SV_Target1.x;
  SV_Target1.x = clamp(x_4026, 0.0f, 1.0f);
  let x_4029 : vec4<f32> = SV_Target1;
  SV_Target1 = vec4<f32>(x_4029.x, vec3<f32>(0.0f, 0.0f, 0.0f).x, vec3<f32>(0.0f, 0.0f, 0.0f).y, vec3<f32>(0.0f, 0.0f, 0.0f).z);
  return;
}

struct main_out {
  @location(0)
  SV_Target0_1 : vec4<f32>,
  @location(1)
  SV_Target1_1 : vec4<f32>,
}

@fragment
fn main(@builtin(position) gl_FragCoord_param : vec4<f32>, @location(1) vs_INTERP1_param : vec3<f32>, @location(0) vs_INTERP0_param : vec3<f32>, @location(3) vs_INTERP3_param : vec4<f32>, @location(4) vs_INTERP4_param : vec4<f32>, @location(2) vs_INTERP2_param : vec4<f32>, @location(5) vs_INTERP5_param : vec2<f32>) -> main_out {
  gl_FragCoord = gl_FragCoord_param;
  vs_INTERP1 = vs_INTERP1_param;
  vs_INTERP0 = vs_INTERP0_param;
  vs_INTERP3 = vs_INTERP3_param;
  vs_INTERP4 = vs_INTERP4_param;
  vs_INTERP2 = vs_INTERP2_param;
  vs_INTERP5 = vs_INTERP5_param;
  main_1();
  return main_out(SV_Target0, SV_Target1);
}

