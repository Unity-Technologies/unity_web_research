struct PGlobals {
  x_ScaledScreenParams : vec4<f32>,
  x_GlobalMipBias : vec2<f32>,
  @size(8)
  padding : u32,
  x_MainLightPosition : vec4<f32>,
  x_MainLightColor : vec4<f32>,
  x_AmbientOcclusionParam : vec4<f32>,
  x_AdditionalLightsCount : vec4<f32>,
  x_WorldSpaceCameraPos : vec3<f32>,
  @size(4)
  padding_1 : u32,
  x_ProjectionParams : vec4<f32>,
  unity_OrthoParams : vec4<f32>,
  x_ScaleBiasRt : vec4<f32>,
  unity_FogParams : vec4<f32>,
  unity_FogColor : vec4<f32>,
  unity_MatrixV : mat4x4<f32>,
}

struct UnityPerMaterial {
  x_MainTex_TexelSize : vec4<f32>,
  x_MRLL_TexelSize : vec4<f32>,
  x_BumpMap_TexelSize : vec4<f32>,
  x_Color1 : vec4<f32>,
  x_Color2 : vec4<f32>,
}

type Arr = array<vec4<f32>, 2u>;

struct UnityPerDraw {
  unity_ObjectToWorld : mat4x4<f32>,
  unity_WorldToObject : mat4x4<f32>,
  unity_LODFade : vec4<f32>,
  unity_WorldTransformParams : vec4<f32>,
  unity_RenderingLayer : vec4<f32>,
  unity_LightData : vec4<f32>,
  unity_LightIndices : Arr,
  unity_ProbesOcclusion : vec4<f32>,
  unity_SpecCube0_HDR : vec4<f32>,
  unity_SpecCube1_HDR : vec4<f32>,
  unity_SpecCube0_BoxMax : vec4<f32>,
  unity_SpecCube0_BoxMin : vec4<f32>,
  unity_SpecCube0_ProbePosition : vec4<f32>,
  unity_SpecCube1_BoxMax : vec4<f32>,
  unity_SpecCube1_BoxMin : vec4<f32>,
  unity_SpecCube1_ProbePosition : vec4<f32>,
  unity_LightmapST : vec4<f32>,
  unity_DynamicLightmapST : vec4<f32>,
  unity_SHAr : vec4<f32>,
  unity_SHAg : vec4<f32>,
  unity_SHAb : vec4<f32>,
  unity_SHBr : vec4<f32>,
  unity_SHBg : vec4<f32>,
  unity_SHBb : vec4<f32>,
  unity_SHC : vec4<f32>,
  unity_RendererBounds_Min : vec4<f32>,
  unity_RendererBounds_Max : vec4<f32>,
  unity_MatrixPreviousM : mat4x4<f32>,
  unity_MatrixPreviousMI : mat4x4<f32>,
  unity_MotionVectorsParams : vec4<f32>,
  unity_SpriteColor : vec4<f32>,
  unity_SpriteProps : vec4<f32>,
}

type Arr_1 = array<mat4x4<f32>, 5u>;

struct MainLightShadows {
  x_MainLightWorldToShadow : Arr_1,
  x_CascadeShadowSplitSpheres0 : vec4<f32>,
  x_CascadeShadowSplitSpheres1 : vec4<f32>,
  x_CascadeShadowSplitSpheres2 : vec4<f32>,
  x_CascadeShadowSplitSpheres3 : vec4<f32>,
  x_CascadeShadowSplitSphereRadii : vec4<f32>,
  x_MainLightShadowOffset0 : vec4<f32>,
  x_MainLightShadowOffset1 : vec4<f32>,
  x_MainLightShadowParams : vec4<f32>,
  x_MainLightShadowmapSize : vec4<f32>,
}

type Arr_2 = array<vec4<f32>, 256u>;

type Arr_3 = array<vec4<f32>, 256u>;

type Arr_4 = array<vec4<f32>, 256u>;

type Arr_5 = array<vec4<f32>, 256u>;

type Arr_6 = array<vec4<f32>, 256u>;

struct strided_arr {
  @size(16)
  el : f32,
}

type Arr_7 = array<strided_arr, 256u>;

struct AdditionalLights {
  x_AdditionalLightsPosition : Arr_6,
  x_AdditionalLightsColor : Arr_6,
  x_AdditionalLightsAttenuation : Arr_6,
  x_AdditionalLightsSpotDir : Arr_6,
  x_AdditionalLightsOcclusionProbes : Arr_6,
  x_AdditionalLightsLayerMasks : Arr_7,
}

var<private> gl_FragCoord : vec4<f32>;

@group(0) @binding(4) var x_MainTex : texture_2d<f32>;

@group(0) @binding(11) var samplerSamplerState_Trilinear_Clamp : sampler;

var<private> vs_INTERP3 : vec4<f32>;

@group(1) @binding(0) var<uniform> x_44 : PGlobals;

@group(0) @binding(5) var x_MRLL : texture_2d<f32>;

@group(1) @binding(4) var<uniform> x_68 : UnityPerMaterial;

@group(0) @binding(6) var x_BumpMap : texture_2d<f32>;

var<private> vs_INTERP2 : vec4<f32>;

@group(1) @binding(2) var<uniform> x_267 : UnityPerDraw;

var<private> vs_INTERP1 : vec3<f32>;

var<private> vs_INTERP0 : vec3<f32>;

@group(0) @binding(1) var unity_Lightmap : texture_2d<f32>;

@group(0) @binding(8) var samplerunity_Lightmap : sampler;

var<private> vs_INTERP4 : vec2<f32>;

@group(0) @binding(2) var x_ScreenSpaceOcclusionTexture : texture_2d<f32>;

@group(0) @binding(9) var sampler_ScreenSpaceOcclusionTexture : sampler;

@group(1) @binding(3) var<uniform> x_553 : MainLightShadows;

var<private> vs_INTERP8 : vec4<f32>;

@group(0) @binding(3) var x_MainLightShadowmapTexture : texture_depth_2d;

@group(0) @binding(10) var sampler_MainLightShadowmapTexture : sampler_comparison;

@group(0) @binding(0) var unity_SpecCube0 : texture_cube<f32>;

@group(0) @binding(7) var samplerunity_SpecCube0 : sampler;

@group(1) @binding(1) var<uniform> x_2159 : AdditionalLights;

var<private> SV_Target0 : vec4<f32>;

fn main_1() {
  var hlslcc_FragCoord : vec4<f32>;
  var u_xlat0 : vec4<f32>;
  var u_xlat1 : vec4<f32>;
  var u_xlat2 : vec3<f32>;
  var u_xlat43 : f32;
  var u_xlat3 : vec3<f32>;
  var u_xlat4 : vec3<f32>;
  var u_xlatb4 : vec3<bool>;
  var u_xlat5 : vec3<f32>;
  var u_xlat21 : vec2<f32>;
  var u_xlatb22 : vec3<bool>;
  var u_xlat22 : vec3<f32>;
  var u_xlatb21 : bool;
  var u_xlat42 : f32;
  var x_371 : vec3<f32>;
  var u_xlat65 : f32;
  var u_xlat6 : vec3<f32>;
  var u_xlat66 : f32;
  var u_xlat67 : f32;
  var u_xlat63 : f32;
  var u_xlatb67 : bool;
  var u_xlat7 : vec4<f32>;
  var txVec0 : vec3<f32>;
  var u_xlat8 : vec4<f32>;
  var txVec1 : vec3<f32>;
  var txVec2 : vec3<f32>;
  var txVec3 : vec3<f32>;
  var u_xlatb26 : bool;
  var u_xlat26 : vec3<f32>;
  var u_xlat9 : vec4<f32>;
  var u_xlat49 : vec2<f32>;
  var u_xlat51 : vec2<f32>;
  var u_xlat10 : vec4<f32>;
  var u_xlat11 : vec4<f32>;
  var u_xlat12 : vec4<f32>;
  var u_xlat13 : vec4<f32>;
  var u_xlat14 : vec4<f32>;
  var u_xlat15 : vec4<f32>;
  var txVec4 : vec3<f32>;
  var u_xlat47 : f32;
  var txVec5 : vec3<f32>;
  var u_xlat68 : f32;
  var txVec6 : vec3<f32>;
  var txVec7 : vec3<f32>;
  var txVec8 : vec3<f32>;
  var txVec9 : vec3<f32>;
  var txVec10 : vec3<f32>;
  var txVec11 : vec3<f32>;
  var txVec12 : vec3<f32>;
  var u_xlat55 : vec2<f32>;
  var u_xlat16 : vec4<f32>;
  var u_xlat29 : vec2<f32>;
  var u_xlat17 : vec2<f32>;
  var u_xlat52 : vec2<f32>;
  var u_xlat18 : vec4<f32>;
  var u_xlat19 : vec4<f32>;
  var u_xlat20 : vec4<f32>;
  var txVec13 : vec3<f32>;
  var txVec14 : vec3<f32>;
  var u_xlat69 : f32;
  var txVec15 : vec3<f32>;
  var txVec16 : vec3<f32>;
  var txVec17 : vec3<f32>;
  var txVec18 : vec3<f32>;
  var txVec19 : vec3<f32>;
  var txVec20 : vec3<f32>;
  var txVec21 : vec3<f32>;
  var txVec22 : vec3<f32>;
  var txVec23 : vec3<f32>;
  var txVec24 : vec3<f32>;
  var txVec25 : vec3<f32>;
  var txVec26 : vec3<f32>;
  var txVec27 : vec3<f32>;
  var txVec28 : vec3<f32>;
  var txVec29 : vec3<f32>;
  var u_xlatb47 : bool;
  var u_xlat70 : f32;
  var u_xlatu42 : u32;
  var u_xlatu_loop_1 : u32;
  var u_xlatu67 : u32;
  var u_xlati69 : i32;
  var indexable : array<vec4<u32>, 4u>;
  var u_xlati67 : i32;
  var u_xlat71 : f32;
  var u_xlat_precise_vec4 : vec4<f32>;
  var u_xlat_precise_ivec4 : vec4<i32>;
  var u_xlat_precise_bvec4 : vec4<bool>;
  var u_xlat_precise_uvec4 : vec4<u32>;
  let x_13 : vec4<f32> = gl_FragCoord;
  let x_14 : vec3<f32> = vec3<f32>(x_13.x, x_13.y, x_13.z);
  let x_20 : f32 = gl_FragCoord.w;
  hlslcc_FragCoord = vec4<f32>(x_14.x, x_14.y, x_14.z, (1.0f / x_20));
  let x_39 : vec4<f32> = vs_INTERP3;
  let x_50 : f32 = x_44.x_GlobalMipBias.x;
  let x_51 : vec4<f32> = textureSampleBias(x_MainTex, samplerSamplerState_Trilinear_Clamp, vec2<f32>(x_39.x, x_39.y), x_50);
  u_xlat0 = x_51;
  let x_57 : vec4<f32> = vs_INTERP3;
  let x_60 : f32 = x_44.x_GlobalMipBias.x;
  let x_61 : vec4<f32> = textureSampleBias(x_MRLL, samplerSamplerState_Trilinear_Clamp, vec2<f32>(x_57.x, x_57.y), x_60);
  u_xlat1 = x_61;
  let x_64 : vec4<f32> = u_xlat1;
  let x_72 : vec4<f32> = x_68.x_Color2;
  u_xlat2 = (vec3<f32>(x_64.w, x_64.w, x_64.w) * vec3<f32>(x_72.x, x_72.y, x_72.z));
  let x_77 : vec4<f32> = x_68.x_Color1;
  let x_79 : vec4<f32> = u_xlat1;
  let x_82 : vec3<f32> = u_xlat2;
  u_xlat2 = ((vec3<f32>(x_77.x, x_77.y, x_77.z) * vec3<f32>(x_79.z, x_79.z, x_79.z)) + x_82);
  let x_87 : f32 = u_xlat1.w;
  let x_90 : f32 = u_xlat1.z;
  u_xlat43 = (x_87 + x_90);
  let x_92 : f32 = u_xlat43;
  u_xlat43 = clamp(x_92, 0.0f, 1.0f);
  let x_96 : vec4<f32> = u_xlat0;
  u_xlat3 = (-(vec3<f32>(x_96.x, x_96.y, x_96.z)) + vec3<f32>(1.0f, 1.0f, 1.0f));
  let x_101 : vec3<f32> = u_xlat3;
  let x_102 : vec3<f32> = u_xlat3;
  u_xlat3 = (x_101 + x_102);
  let x_105 : vec3<f32> = u_xlat2;
  u_xlat4 = (-(x_105) + vec3<f32>(1.0f, 1.0f, 1.0f));
  let x_108 : vec3<f32> = u_xlat3;
  let x_110 : vec3<f32> = u_xlat4;
  u_xlat3 = ((-(x_108) * x_110) + vec3<f32>(1.0f, 1.0f, 1.0f));
  let x_113 : vec4<f32> = u_xlat0;
  let x_115 : vec4<f32> = u_xlat0;
  u_xlat4 = (vec3<f32>(x_113.x, x_113.y, x_113.z) + vec3<f32>(x_115.x, x_115.y, x_115.z));
  let x_118 : vec3<f32> = u_xlat2;
  let x_119 : vec3<f32> = u_xlat4;
  u_xlat2 = (x_118 * x_119);
  let x_127 : vec4<f32> = u_xlat0;
  let x_130 : vec4<bool> = (vec4<f32>(0.5f, 0.5f, 0.5f, 0.0f) >= vec4<f32>(x_127.x, x_127.y, x_127.z, x_127.x));
  u_xlatb4 = vec3<bool>(x_130.x, x_130.y, x_130.z);
  let x_135 : bool = u_xlatb4.x;
  u_xlat5.x = select(0.0f, 1.0f, x_135);
  let x_140 : bool = u_xlatb4.y;
  u_xlat5.y = select(0.0f, 1.0f, x_140);
  let x_144 : bool = u_xlatb4.z;
  u_xlat5.z = select(0.0f, 1.0f, x_144);
  let x_148 : bool = u_xlatb4.x;
  u_xlat4.x = select(1.0f, 0.0f, x_148);
  let x_152 : bool = u_xlatb4.y;
  u_xlat4.y = select(1.0f, 0.0f, x_152);
  let x_156 : bool = u_xlatb4.z;
  u_xlat4.z = select(1.0f, 0.0f, x_156);
  let x_159 : vec3<f32> = u_xlat3;
  let x_160 : vec3<f32> = u_xlat4;
  u_xlat3 = (x_159 * x_160);
  let x_162 : vec3<f32> = u_xlat2;
  let x_163 : vec3<f32> = u_xlat5;
  let x_165 : vec3<f32> = u_xlat3;
  u_xlat2 = ((x_162 * x_163) + x_165);
  let x_167 : vec4<f32> = u_xlat0;
  let x_170 : vec3<f32> = u_xlat2;
  u_xlat2 = (-(vec3<f32>(x_167.x, x_167.y, x_167.z)) + x_170);
  let x_172 : f32 = u_xlat43;
  let x_174 : vec3<f32> = u_xlat2;
  let x_176 : vec4<f32> = u_xlat0;
  u_xlat2 = ((vec3<f32>(x_172, x_172, x_172) * x_174) + vec3<f32>(x_176.x, x_176.y, x_176.z));
  let x_180 : f32 = u_xlat0.x;
  u_xlat0.x = (x_180 + -0.150000006f);
  let x_185 : f32 = u_xlat0.x;
  u_xlat0.x = ceil(x_185);
  let x_189 : f32 = u_xlat0.x;
  u_xlat0.x = (-(x_189) + 1.0f);
  let x_193 : vec4<f32> = u_xlat0;
  let x_198 : vec3<f32> = u_xlat2;
  u_xlat2 = ((vec3<f32>(x_193.x, x_193.x, x_193.x) * vec3<f32>(0.400000006f, 0.400000006f, 0.400000006f)) + x_198);
  let x_204 : vec4<f32> = vs_INTERP3;
  let x_207 : f32 = x_44.x_GlobalMipBias.x;
  let x_208 : vec4<f32> = textureSampleBias(x_BumpMap, samplerSamplerState_Trilinear_Clamp, vec2<f32>(x_204.x, x_204.y), x_207);
  u_xlat3 = vec3<f32>(x_208.x, x_208.y, x_208.w);
  let x_211 : f32 = u_xlat3.x;
  let x_213 : f32 = u_xlat3.z;
  u_xlat3.x = (x_211 * x_213);
  let x_218 : vec3<f32> = u_xlat3;
  u_xlat21 = ((vec2<f32>(x_218.x, x_218.y) * vec2<f32>(2.0f, 2.0f)) + vec2<f32>(-1.0f, -1.0f));
  let x_226 : vec2<f32> = u_xlat21;
  let x_227 : vec2<f32> = u_xlat21;
  u_xlat43 = dot(x_226, x_227);
  let x_229 : f32 = u_xlat43;
  u_xlat43 = min(x_229, 1.0f);
  let x_231 : f32 = u_xlat43;
  u_xlat43 = (-(x_231) + 1.0f);
  let x_234 : f32 = u_xlat43;
  u_xlat43 = sqrt(x_234);
  let x_236 : f32 = u_xlat43;
  u_xlat43 = max(x_236, 1.00000002e-16f);
  let x_240 : f32 = u_xlat1.x;
  let x_242 : f32 = u_xlat0.x;
  u_xlat0.x = (x_240 + x_242);
  let x_246 : f32 = u_xlat0.x;
  u_xlat0.x = clamp(x_246, 0.0f, 1.0f);
  let x_250 : f32 = u_xlat1.y;
  u_xlat1.x = max(x_250, 0.0f);
  let x_254 : f32 = u_xlat1.x;
  u_xlat1.x = min(x_254, 0.850000024f);
  let x_261 : f32 = vs_INTERP2.w;
  u_xlatb22.x = (0.0f < x_261);
  let x_269 : f32 = x_267.unity_WorldTransformParams.w;
  u_xlatb22.z = (x_269 >= 0.0f);
  let x_274 : bool = u_xlatb22.x;
  u_xlat22.x = select(-1.0f, 1.0f, x_274);
  let x_278 : bool = u_xlatb22.z;
  u_xlat22.z = select(-1.0f, 1.0f, x_278);
  let x_282 : f32 = u_xlat22.z;
  let x_284 : f32 = u_xlat22.x;
  u_xlat22.x = (x_282 * x_284);
  let x_289 : vec3<f32> = vs_INTERP1;
  let x_291 : vec4<f32> = vs_INTERP2;
  u_xlat3 = (vec3<f32>(x_289.z, x_289.x, x_289.y) * vec3<f32>(x_291.y, x_291.z, x_291.x));
  let x_294 : vec3<f32> = vs_INTERP1;
  let x_296 : vec4<f32> = vs_INTERP2;
  let x_299 : vec3<f32> = u_xlat3;
  u_xlat3 = ((vec3<f32>(x_294.y, x_294.z, x_294.x) * vec3<f32>(x_296.z, x_296.x, x_296.y)) + -(x_299));
  let x_302 : vec3<f32> = u_xlat22;
  let x_304 : vec3<f32> = u_xlat3;
  u_xlat3 = (vec3<f32>(x_302.x, x_302.x, x_302.x) * x_304);
  let x_306 : vec2<f32> = u_xlat21;
  let x_308 : vec3<f32> = u_xlat3;
  u_xlat3 = (vec3<f32>(x_306.y, x_306.y, x_306.y) * x_308);
  let x_310 : vec2<f32> = u_xlat21;
  let x_312 : vec4<f32> = vs_INTERP2;
  let x_315 : vec3<f32> = u_xlat3;
  u_xlat3 = ((vec3<f32>(x_310.x, x_310.x, x_310.x) * vec3<f32>(x_312.x, x_312.y, x_312.z)) + x_315);
  let x_317 : f32 = u_xlat43;
  let x_319 : vec3<f32> = vs_INTERP1;
  let x_321 : vec3<f32> = u_xlat3;
  u_xlat22 = ((vec3<f32>(x_317, x_317, x_317) * x_319) + x_321);
  let x_323 : vec3<f32> = u_xlat22;
  let x_324 : vec3<f32> = u_xlat22;
  u_xlat21.x = dot(x_323, x_324);
  let x_328 : f32 = u_xlat21.x;
  u_xlat21.x = inverseSqrt(x_328);
  let x_331 : vec2<f32> = u_xlat21;
  let x_333 : vec3<f32> = u_xlat22;
  u_xlat22 = (vec3<f32>(x_331.x, x_331.x, x_331.x) * x_333);
  let x_338 : f32 = x_44.unity_OrthoParams.w;
  u_xlatb21 = (x_338 == 0.0f);
  let x_341 : vec3<f32> = vs_INTERP0;
  let x_346 : vec3<f32> = x_44.x_WorldSpaceCameraPos;
  u_xlat3 = (-(x_341) + x_346);
  let x_349 : vec3<f32> = u_xlat3;
  let x_350 : vec3<f32> = u_xlat3;
  u_xlat42 = dot(x_349, x_350);
  let x_352 : f32 = u_xlat42;
  u_xlat42 = inverseSqrt(x_352);
  let x_354 : f32 = u_xlat42;
  let x_356 : vec3<f32> = u_xlat3;
  u_xlat3 = (vec3<f32>(x_354, x_354, x_354) * x_356);
  let x_361 : f32 = x_44.unity_MatrixV[0i].z;
  u_xlat4.x = x_361;
  let x_364 : f32 = x_44.unity_MatrixV[1i].z;
  u_xlat4.y = x_364;
  let x_368 : f32 = x_44.unity_MatrixV[2i].z;
  u_xlat4.z = x_368;
  let x_370 : bool = u_xlatb21;
  if (x_370) {
    let x_374 : vec3<f32> = u_xlat3;
    x_371 = x_374;
  } else {
    let x_376 : vec3<f32> = u_xlat4;
    x_371 = x_376;
  }
  let x_377 : vec3<f32> = x_371;
  u_xlat3 = x_377;
  let x_379 : f32 = vs_INTERP0.y;
  let x_381 : f32 = x_44.unity_MatrixV[1i].z;
  u_xlat21.x = (x_379 * x_381);
  let x_385 : f32 = x_44.unity_MatrixV[0i].z;
  let x_387 : f32 = vs_INTERP0.x;
  let x_390 : f32 = u_xlat21.x;
  u_xlat21.x = ((x_385 * x_387) + x_390);
  let x_394 : f32 = x_44.unity_MatrixV[2i].z;
  let x_396 : f32 = vs_INTERP0.z;
  let x_399 : f32 = u_xlat21.x;
  u_xlat21.x = ((x_394 * x_396) + x_399);
  let x_403 : f32 = u_xlat21.x;
  let x_405 : f32 = x_44.unity_MatrixV[3i].z;
  u_xlat21.x = (x_403 + x_405);
  let x_409 : f32 = u_xlat21.x;
  let x_413 : f32 = x_44.x_ProjectionParams.y;
  u_xlat21.x = (-(x_409) + -(x_413));
  let x_418 : f32 = u_xlat21.x;
  u_xlat21.x = max(x_418, 0.0f);
  let x_422 : f32 = u_xlat21.x;
  let x_425 : f32 = x_44.unity_FogParams.x;
  u_xlat21.x = (x_422 * x_425);
  let x_435 : vec2<f32> = vs_INTERP4;
  let x_437 : f32 = x_44.x_GlobalMipBias.x;
  let x_438 : vec4<f32> = textureSampleBias(unity_Lightmap, samplerunity_Lightmap, x_435, x_437);
  u_xlat4 = vec3<f32>(x_438.x, x_438.y, x_438.z);
  let x_442 : vec4<f32> = x_44.x_ScaledScreenParams;
  let x_443 : vec2<f32> = vec2<f32>(x_442.x, x_442.y);
  let x_447 : vec2<f32> = (vec2<f32>(1.0f, 1.0f) / vec2<f32>(x_443.x, x_443.y));
  let x_448 : vec3<f32> = u_xlat5;
  u_xlat5 = vec3<f32>(x_447.x, x_447.y, x_448.z);
  let x_450 : vec3<f32> = u_xlat5;
  let x_452 : vec4<f32> = hlslcc_FragCoord;
  let x_454 : vec2<f32> = (vec2<f32>(x_450.x, x_450.y) * vec2<f32>(x_452.x, x_452.y));
  let x_455 : vec3<f32> = u_xlat5;
  u_xlat5 = vec3<f32>(x_454.x, x_454.y, x_455.z);
  let x_458 : f32 = u_xlat5.y;
  let x_461 : f32 = x_44.x_ScaleBiasRt.x;
  let x_464 : f32 = x_44.x_ScaleBiasRt.y;
  u_xlat42 = ((x_458 * x_461) + x_464);
  let x_466 : f32 = u_xlat42;
  u_xlat5.z = (-(x_466) + 1.0f);
  let x_471 : f32 = u_xlat0.x;
  u_xlat42 = ((-(x_471) * 0.959999979f) + 0.959999979f);
  let x_477 : f32 = u_xlat42;
  let x_480 : f32 = u_xlat1.x;
  u_xlat65 = (-(x_477) + x_480);
  let x_483 : f32 = u_xlat42;
  let x_485 : vec3<f32> = u_xlat2;
  u_xlat6 = (vec3<f32>(x_483, x_483, x_483) * x_485);
  let x_487 : vec3<f32> = u_xlat2;
  u_xlat2 = (x_487 + vec3<f32>(-0.039999999f, -0.039999999f, -0.039999999f));
  let x_491 : vec4<f32> = u_xlat0;
  let x_493 : vec3<f32> = u_xlat2;
  u_xlat2 = ((vec3<f32>(x_491.x, x_491.x, x_491.x) * x_493) + vec3<f32>(0.039999999f, 0.039999999f, 0.039999999f));
  let x_499 : f32 = u_xlat1.x;
  u_xlat0.x = (-(x_499) + 1.0f);
  let x_504 : f32 = u_xlat0.x;
  let x_506 : f32 = u_xlat0.x;
  u_xlat42 = (x_504 * x_506);
  let x_508 : f32 = u_xlat42;
  let x_509 : f32 = u_xlat42;
  u_xlat1.x = (x_508 * x_509);
  let x_512 : f32 = u_xlat65;
  u_xlat65 = (x_512 + 1.0f);
  let x_514 : f32 = u_xlat65;
  u_xlat65 = min(x_514, 1.0f);
  let x_517 : f32 = u_xlat42;
  u_xlat66 = ((x_517 * 4.0f) + 2.0f);
  let x_527 : vec3<f32> = u_xlat5;
  let x_530 : f32 = x_44.x_GlobalMipBias.x;
  let x_531 : vec4<f32> = textureSampleBias(x_ScreenSpaceOcclusionTexture, sampler_ScreenSpaceOcclusionTexture, vec2<f32>(x_527.x, x_527.z), x_530);
  u_xlat67 = x_531.x;
  let x_533 : f32 = u_xlat67;
  u_xlat5.x = (x_533 + -1.0f);
  let x_537 : f32 = x_44.x_AmbientOcclusionParam.w;
  let x_539 : f32 = u_xlat5.x;
  u_xlat5.x = ((x_537 * x_539) + 1.0f);
  let x_545 : f32 = u_xlat0.w;
  let x_546 : f32 = u_xlat67;
  u_xlat63 = min(x_545, x_546);
  let x_555 : f32 = x_553.x_MainLightShadowParams.y;
  u_xlatb67 = (0.0f < x_555);
  let x_557 : bool = u_xlatb67;
  if (x_557) {
    let x_561 : f32 = x_553.x_MainLightShadowParams.y;
    u_xlatb67 = (x_561 == 1.0f);
    let x_563 : bool = u_xlatb67;
    if (x_563) {
      let x_568 : vec4<f32> = vs_INTERP8;
      let x_571 : vec4<f32> = x_553.x_MainLightShadowOffset0;
      u_xlat7 = (vec4<f32>(x_568.x, x_568.y, x_568.x, x_568.y) + x_571);
      let x_574 : vec4<f32> = u_xlat7;
      let x_575 : vec2<f32> = vec2<f32>(x_574.x, x_574.y);
      let x_577 : f32 = vs_INTERP8.z;
      txVec0 = vec3<f32>(x_575.x, x_575.y, x_577);
      let x_590 : vec3<f32> = txVec0;
      let x_592 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_590.xy, x_590.z);
      u_xlat8.x = x_592;
      let x_595 : vec4<f32> = u_xlat7;
      let x_596 : vec2<f32> = vec2<f32>(x_595.z, x_595.w);
      let x_598 : f32 = vs_INTERP8.z;
      txVec1 = vec3<f32>(x_596.x, x_596.y, x_598);
      let x_605 : vec3<f32> = txVec1;
      let x_607 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_605.xy, x_605.z);
      u_xlat8.y = x_607;
      let x_609 : vec4<f32> = vs_INTERP8;
      let x_612 : vec4<f32> = x_553.x_MainLightShadowOffset1;
      u_xlat7 = (vec4<f32>(x_609.x, x_609.y, x_609.x, x_609.y) + x_612);
      let x_615 : vec4<f32> = u_xlat7;
      let x_616 : vec2<f32> = vec2<f32>(x_615.x, x_615.y);
      let x_618 : f32 = vs_INTERP8.z;
      txVec2 = vec3<f32>(x_616.x, x_616.y, x_618);
      let x_625 : vec3<f32> = txVec2;
      let x_627 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_625.xy, x_625.z);
      u_xlat8.z = x_627;
      let x_630 : vec4<f32> = u_xlat7;
      let x_631 : vec2<f32> = vec2<f32>(x_630.z, x_630.w);
      let x_633 : f32 = vs_INTERP8.z;
      txVec3 = vec3<f32>(x_631.x, x_631.y, x_633);
      let x_640 : vec3<f32> = txVec3;
      let x_642 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_640.xy, x_640.z);
      u_xlat8.w = x_642;
      let x_644 : vec4<f32> = u_xlat8;
      u_xlat67 = dot(x_644, vec4<f32>(0.25f, 0.25f, 0.25f, 0.25f));
    } else {
      let x_651 : f32 = x_553.x_MainLightShadowParams.y;
      u_xlatb26 = (x_651 == 2.0f);
      let x_653 : bool = u_xlatb26;
      if (x_653) {
        let x_657 : vec4<f32> = vs_INTERP8;
        let x_660 : vec4<f32> = x_553.x_MainLightShadowmapSize;
        let x_664 : vec2<f32> = ((vec2<f32>(x_657.x, x_657.y) * vec2<f32>(x_660.z, x_660.w)) + vec2<f32>(0.5f, 0.5f));
        let x_665 : vec3<f32> = u_xlat26;
        u_xlat26 = vec3<f32>(x_664.x, x_664.y, x_665.z);
        let x_667 : vec3<f32> = u_xlat26;
        let x_669 : vec2<f32> = floor(vec2<f32>(x_667.x, x_667.y));
        let x_670 : vec3<f32> = u_xlat26;
        u_xlat26 = vec3<f32>(x_669.x, x_669.y, x_670.z);
        let x_672 : vec4<f32> = vs_INTERP8;
        let x_675 : vec4<f32> = x_553.x_MainLightShadowmapSize;
        let x_678 : vec3<f32> = u_xlat26;
        let x_681 : vec2<f32> = ((vec2<f32>(x_672.x, x_672.y) * vec2<f32>(x_675.z, x_675.w)) + -(vec2<f32>(x_678.x, x_678.y)));
        let x_682 : vec4<f32> = u_xlat7;
        u_xlat7 = vec4<f32>(x_681.x, x_681.y, x_682.z, x_682.w);
        let x_684 : vec4<f32> = u_xlat7;
        u_xlat8 = (vec4<f32>(x_684.x, x_684.x, x_684.y, x_684.y) + vec4<f32>(0.5f, 1.0f, 0.5f, 1.0f));
        let x_689 : vec4<f32> = u_xlat8;
        let x_691 : vec4<f32> = u_xlat8;
        u_xlat9 = (vec4<f32>(x_689.x, x_689.x, x_689.z, x_689.z) * vec4<f32>(x_691.x, x_691.x, x_691.z, x_691.z));
        let x_695 : vec4<f32> = u_xlat9;
        u_xlat49 = (vec2<f32>(x_695.y, x_695.w) * vec2<f32>(0.079999998f, 0.079999998f));
        let x_700 : vec4<f32> = u_xlat9;
        let x_703 : vec4<f32> = u_xlat7;
        let x_706 : vec2<f32> = ((vec2<f32>(x_700.x, x_700.z) * vec2<f32>(0.5f, 0.5f)) + -(vec2<f32>(x_703.x, x_703.y)));
        let x_707 : vec4<f32> = u_xlat8;
        u_xlat8 = vec4<f32>(x_706.x, x_707.y, x_706.y, x_707.w);
        let x_709 : vec4<f32> = u_xlat7;
        let x_712 : vec2<f32> = (-(vec2<f32>(x_709.x, x_709.y)) + vec2<f32>(1.0f, 1.0f));
        let x_713 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_712.x, x_712.y, x_713.z, x_713.w);
        let x_716 : vec4<f32> = u_xlat7;
        u_xlat51 = min(vec2<f32>(x_716.x, x_716.y), vec2<f32>(0.0f, 0.0f));
        let x_720 : vec2<f32> = u_xlat51;
        let x_722 : vec2<f32> = u_xlat51;
        let x_724 : vec4<f32> = u_xlat9;
        u_xlat51 = ((-(x_720) * x_722) + vec2<f32>(x_724.x, x_724.y));
        let x_727 : vec4<f32> = u_xlat7;
        let x_729 : vec2<f32> = max(vec2<f32>(x_727.x, x_727.y), vec2<f32>(0.0f, 0.0f));
        let x_730 : vec4<f32> = u_xlat7;
        u_xlat7 = vec4<f32>(x_729.x, x_729.y, x_730.z, x_730.w);
        let x_732 : vec4<f32> = u_xlat7;
        let x_735 : vec4<f32> = u_xlat7;
        let x_738 : vec4<f32> = u_xlat8;
        let x_740 : vec2<f32> = ((-(vec2<f32>(x_732.x, x_732.y)) * vec2<f32>(x_735.x, x_735.y)) + vec2<f32>(x_738.y, x_738.w));
        let x_741 : vec4<f32> = u_xlat7;
        u_xlat7 = vec4<f32>(x_740.x, x_740.y, x_741.z, x_741.w);
        let x_743 : vec2<f32> = u_xlat51;
        u_xlat51 = (x_743 + vec2<f32>(1.0f, 1.0f));
        let x_745 : vec4<f32> = u_xlat7;
        let x_747 : vec2<f32> = (vec2<f32>(x_745.x, x_745.y) + vec2<f32>(1.0f, 1.0f));
        let x_748 : vec4<f32> = u_xlat7;
        u_xlat7 = vec4<f32>(x_747.x, x_747.y, x_748.z, x_748.w);
        let x_751 : vec4<f32> = u_xlat8;
        let x_755 : vec2<f32> = (vec2<f32>(x_751.x, x_751.z) * vec2<f32>(0.159999996f, 0.159999996f));
        let x_756 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_755.x, x_755.y, x_756.z, x_756.w);
        let x_759 : vec4<f32> = u_xlat9;
        let x_761 : vec2<f32> = (vec2<f32>(x_759.x, x_759.y) * vec2<f32>(0.159999996f, 0.159999996f));
        let x_762 : vec4<f32> = u_xlat11;
        u_xlat11 = vec4<f32>(x_761.x, x_761.y, x_762.z, x_762.w);
        let x_764 : vec2<f32> = u_xlat51;
        let x_765 : vec2<f32> = (x_764 * vec2<f32>(0.159999996f, 0.159999996f));
        let x_766 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_765.x, x_765.y, x_766.z, x_766.w);
        let x_769 : vec4<f32> = u_xlat7;
        let x_771 : vec2<f32> = (vec2<f32>(x_769.x, x_769.y) * vec2<f32>(0.159999996f, 0.159999996f));
        let x_772 : vec4<f32> = u_xlat12;
        u_xlat12 = vec4<f32>(x_771.x, x_771.y, x_772.z, x_772.w);
        let x_774 : vec4<f32> = u_xlat8;
        let x_776 : vec2<f32> = (vec2<f32>(x_774.y, x_774.w) * vec2<f32>(0.159999996f, 0.159999996f));
        let x_777 : vec4<f32> = u_xlat7;
        u_xlat7 = vec4<f32>(x_776.x, x_776.y, x_777.z, x_777.w);
        let x_780 : f32 = u_xlat9.x;
        u_xlat10.z = x_780;
        let x_783 : f32 = u_xlat7.x;
        u_xlat10.w = x_783;
        let x_786 : f32 = u_xlat12.x;
        u_xlat11.z = x_786;
        let x_789 : f32 = u_xlat49.x;
        u_xlat11.w = x_789;
        let x_791 : vec4<f32> = u_xlat10;
        let x_793 : vec4<f32> = u_xlat11;
        u_xlat8 = (vec4<f32>(x_791.z, x_791.w, x_791.x, x_791.z) + vec4<f32>(x_793.z, x_793.w, x_793.x, x_793.z));
        let x_797 : f32 = u_xlat10.y;
        u_xlat9.z = x_797;
        let x_800 : f32 = u_xlat7.y;
        u_xlat9.w = x_800;
        let x_803 : f32 = u_xlat11.y;
        u_xlat12.z = x_803;
        let x_806 : f32 = u_xlat49.y;
        u_xlat12.w = x_806;
        let x_808 : vec4<f32> = u_xlat9;
        let x_810 : vec4<f32> = u_xlat12;
        let x_812 : vec3<f32> = (vec3<f32>(x_808.z, x_808.y, x_808.w) + vec3<f32>(x_810.z, x_810.y, x_810.w));
        let x_813 : vec4<f32> = u_xlat7;
        u_xlat7 = vec4<f32>(x_812.x, x_812.y, x_812.z, x_813.w);
        let x_815 : vec4<f32> = u_xlat11;
        let x_817 : vec4<f32> = u_xlat8;
        let x_819 : vec3<f32> = (vec3<f32>(x_815.x, x_815.z, x_815.w) / vec3<f32>(x_817.z, x_817.w, x_817.y));
        let x_820 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_819.x, x_819.y, x_819.z, x_820.w);
        let x_822 : vec4<f32> = u_xlat9;
        let x_828 : vec3<f32> = (vec3<f32>(x_822.x, x_822.y, x_822.z) + vec3<f32>(-2.5f, -0.5f, 1.5f));
        let x_829 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_828.x, x_828.y, x_828.z, x_829.w);
        let x_831 : vec4<f32> = u_xlat12;
        let x_833 : vec4<f32> = u_xlat7;
        let x_835 : vec3<f32> = (vec3<f32>(x_831.z, x_831.y, x_831.w) / vec3<f32>(x_833.x, x_833.y, x_833.z));
        let x_836 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_835.x, x_835.y, x_835.z, x_836.w);
        let x_838 : vec4<f32> = u_xlat10;
        let x_840 : vec3<f32> = (vec3<f32>(x_838.x, x_838.y, x_838.z) + vec3<f32>(-2.5f, -0.5f, 1.5f));
        let x_841 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_840.x, x_840.y, x_840.z, x_841.w);
        let x_843 : vec4<f32> = u_xlat9;
        let x_846 : vec4<f32> = x_553.x_MainLightShadowmapSize;
        let x_848 : vec3<f32> = (vec3<f32>(x_843.y, x_843.x, x_843.z) * vec3<f32>(x_846.x, x_846.x, x_846.x));
        let x_849 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_848.x, x_848.y, x_848.z, x_849.w);
        let x_851 : vec4<f32> = u_xlat10;
        let x_854 : vec4<f32> = x_553.x_MainLightShadowmapSize;
        let x_856 : vec3<f32> = (vec3<f32>(x_851.x, x_851.y, x_851.z) * vec3<f32>(x_854.y, x_854.y, x_854.y));
        let x_857 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_856.x, x_856.y, x_856.z, x_857.w);
        let x_860 : f32 = u_xlat10.x;
        u_xlat9.w = x_860;
        let x_862 : vec3<f32> = u_xlat26;
        let x_865 : vec4<f32> = x_553.x_MainLightShadowmapSize;
        let x_868 : vec4<f32> = u_xlat9;
        u_xlat11 = ((vec4<f32>(x_862.x, x_862.y, x_862.x, x_862.y) * vec4<f32>(x_865.x, x_865.y, x_865.x, x_865.y)) + vec4<f32>(x_868.y, x_868.w, x_868.x, x_868.w));
        let x_871 : vec3<f32> = u_xlat26;
        let x_874 : vec4<f32> = x_553.x_MainLightShadowmapSize;
        let x_877 : vec4<f32> = u_xlat9;
        let x_879 : vec2<f32> = ((vec2<f32>(x_871.x, x_871.y) * vec2<f32>(x_874.x, x_874.y)) + vec2<f32>(x_877.z, x_877.w));
        let x_880 : vec4<f32> = u_xlat12;
        u_xlat12 = vec4<f32>(x_879.x, x_879.y, x_880.z, x_880.w);
        let x_883 : f32 = u_xlat9.y;
        u_xlat10.w = x_883;
        let x_885 : vec4<f32> = u_xlat10;
        let x_886 : vec2<f32> = vec2<f32>(x_885.y, x_885.z);
        let x_887 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_887.x, x_886.x, x_887.z, x_886.y);
        let x_890 : vec3<f32> = u_xlat26;
        let x_893 : vec4<f32> = x_553.x_MainLightShadowmapSize;
        let x_896 : vec4<f32> = u_xlat9;
        u_xlat13 = ((vec4<f32>(x_890.x, x_890.y, x_890.x, x_890.y) * vec4<f32>(x_893.x, x_893.y, x_893.x, x_893.y)) + vec4<f32>(x_896.x, x_896.y, x_896.z, x_896.y));
        let x_899 : vec3<f32> = u_xlat26;
        let x_902 : vec4<f32> = x_553.x_MainLightShadowmapSize;
        let x_905 : vec4<f32> = u_xlat10;
        u_xlat10 = ((vec4<f32>(x_899.x, x_899.y, x_899.x, x_899.y) * vec4<f32>(x_902.x, x_902.y, x_902.x, x_902.y)) + vec4<f32>(x_905.w, x_905.y, x_905.w, x_905.z));
        let x_908 : vec3<f32> = u_xlat26;
        let x_911 : vec4<f32> = x_553.x_MainLightShadowmapSize;
        let x_914 : vec4<f32> = u_xlat9;
        u_xlat9 = ((vec4<f32>(x_908.x, x_908.y, x_908.x, x_908.y) * vec4<f32>(x_911.x, x_911.y, x_911.x, x_911.y)) + vec4<f32>(x_914.x, x_914.w, x_914.z, x_914.w));
        let x_918 : vec4<f32> = u_xlat7;
        let x_920 : vec4<f32> = u_xlat8;
        u_xlat14 = (vec4<f32>(x_918.x, x_918.x, x_918.x, x_918.y) * vec4<f32>(x_920.z, x_920.w, x_920.y, x_920.z));
        let x_924 : vec4<f32> = u_xlat7;
        let x_926 : vec4<f32> = u_xlat8;
        u_xlat15 = (vec4<f32>(x_924.y, x_924.y, x_924.z, x_924.z) * x_926);
        let x_929 : f32 = u_xlat7.z;
        let x_931 : f32 = u_xlat8.y;
        u_xlat26.x = (x_929 * x_931);
        let x_935 : vec4<f32> = u_xlat11;
        let x_936 : vec2<f32> = vec2<f32>(x_935.x, x_935.y);
        let x_938 : f32 = vs_INTERP8.z;
        txVec4 = vec3<f32>(x_936.x, x_936.y, x_938);
        let x_946 : vec3<f32> = txVec4;
        let x_948 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_946.xy, x_946.z);
        u_xlat47 = x_948;
        let x_950 : vec4<f32> = u_xlat11;
        let x_951 : vec2<f32> = vec2<f32>(x_950.z, x_950.w);
        let x_953 : f32 = vs_INTERP8.z;
        txVec5 = vec3<f32>(x_951.x, x_951.y, x_953);
        let x_961 : vec3<f32> = txVec5;
        let x_963 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_961.xy, x_961.z);
        u_xlat68 = x_963;
        let x_964 : f32 = u_xlat68;
        let x_966 : f32 = u_xlat14.y;
        u_xlat68 = (x_964 * x_966);
        let x_969 : f32 = u_xlat14.x;
        let x_970 : f32 = u_xlat47;
        let x_972 : f32 = u_xlat68;
        u_xlat47 = ((x_969 * x_970) + x_972);
        let x_975 : vec4<f32> = u_xlat12;
        let x_976 : vec2<f32> = vec2<f32>(x_975.x, x_975.y);
        let x_978 : f32 = vs_INTERP8.z;
        txVec6 = vec3<f32>(x_976.x, x_976.y, x_978);
        let x_985 : vec3<f32> = txVec6;
        let x_987 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_985.xy, x_985.z);
        u_xlat68 = x_987;
        let x_989 : f32 = u_xlat14.z;
        let x_990 : f32 = u_xlat68;
        let x_992 : f32 = u_xlat47;
        u_xlat47 = ((x_989 * x_990) + x_992);
        let x_995 : vec4<f32> = u_xlat10;
        let x_996 : vec2<f32> = vec2<f32>(x_995.x, x_995.y);
        let x_998 : f32 = vs_INTERP8.z;
        txVec7 = vec3<f32>(x_996.x, x_996.y, x_998);
        let x_1005 : vec3<f32> = txVec7;
        let x_1007 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1005.xy, x_1005.z);
        u_xlat68 = x_1007;
        let x_1009 : f32 = u_xlat14.w;
        let x_1010 : f32 = u_xlat68;
        let x_1012 : f32 = u_xlat47;
        u_xlat47 = ((x_1009 * x_1010) + x_1012);
        let x_1015 : vec4<f32> = u_xlat13;
        let x_1016 : vec2<f32> = vec2<f32>(x_1015.x, x_1015.y);
        let x_1018 : f32 = vs_INTERP8.z;
        txVec8 = vec3<f32>(x_1016.x, x_1016.y, x_1018);
        let x_1025 : vec3<f32> = txVec8;
        let x_1027 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1025.xy, x_1025.z);
        u_xlat68 = x_1027;
        let x_1029 : f32 = u_xlat15.x;
        let x_1030 : f32 = u_xlat68;
        let x_1032 : f32 = u_xlat47;
        u_xlat47 = ((x_1029 * x_1030) + x_1032);
        let x_1035 : vec4<f32> = u_xlat13;
        let x_1036 : vec2<f32> = vec2<f32>(x_1035.z, x_1035.w);
        let x_1038 : f32 = vs_INTERP8.z;
        txVec9 = vec3<f32>(x_1036.x, x_1036.y, x_1038);
        let x_1045 : vec3<f32> = txVec9;
        let x_1047 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1045.xy, x_1045.z);
        u_xlat68 = x_1047;
        let x_1049 : f32 = u_xlat15.y;
        let x_1050 : f32 = u_xlat68;
        let x_1052 : f32 = u_xlat47;
        u_xlat47 = ((x_1049 * x_1050) + x_1052);
        let x_1055 : vec4<f32> = u_xlat10;
        let x_1056 : vec2<f32> = vec2<f32>(x_1055.z, x_1055.w);
        let x_1058 : f32 = vs_INTERP8.z;
        txVec10 = vec3<f32>(x_1056.x, x_1056.y, x_1058);
        let x_1065 : vec3<f32> = txVec10;
        let x_1067 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1065.xy, x_1065.z);
        u_xlat68 = x_1067;
        let x_1069 : f32 = u_xlat15.z;
        let x_1070 : f32 = u_xlat68;
        let x_1072 : f32 = u_xlat47;
        u_xlat47 = ((x_1069 * x_1070) + x_1072);
        let x_1075 : vec4<f32> = u_xlat9;
        let x_1076 : vec2<f32> = vec2<f32>(x_1075.x, x_1075.y);
        let x_1078 : f32 = vs_INTERP8.z;
        txVec11 = vec3<f32>(x_1076.x, x_1076.y, x_1078);
        let x_1085 : vec3<f32> = txVec11;
        let x_1087 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1085.xy, x_1085.z);
        u_xlat68 = x_1087;
        let x_1089 : f32 = u_xlat15.w;
        let x_1090 : f32 = u_xlat68;
        let x_1092 : f32 = u_xlat47;
        u_xlat47 = ((x_1089 * x_1090) + x_1092);
        let x_1095 : vec4<f32> = u_xlat9;
        let x_1096 : vec2<f32> = vec2<f32>(x_1095.z, x_1095.w);
        let x_1098 : f32 = vs_INTERP8.z;
        txVec12 = vec3<f32>(x_1096.x, x_1096.y, x_1098);
        let x_1105 : vec3<f32> = txVec12;
        let x_1107 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1105.xy, x_1105.z);
        u_xlat68 = x_1107;
        let x_1109 : f32 = u_xlat26.x;
        let x_1110 : f32 = u_xlat68;
        let x_1112 : f32 = u_xlat47;
        u_xlat67 = ((x_1109 * x_1110) + x_1112);
      } else {
        let x_1115 : vec4<f32> = vs_INTERP8;
        let x_1118 : vec4<f32> = x_553.x_MainLightShadowmapSize;
        let x_1121 : vec2<f32> = ((vec2<f32>(x_1115.x, x_1115.y) * vec2<f32>(x_1118.z, x_1118.w)) + vec2<f32>(0.5f, 0.5f));
        let x_1122 : vec3<f32> = u_xlat26;
        u_xlat26 = vec3<f32>(x_1121.x, x_1121.y, x_1122.z);
        let x_1124 : vec3<f32> = u_xlat26;
        let x_1126 : vec2<f32> = floor(vec2<f32>(x_1124.x, x_1124.y));
        let x_1127 : vec3<f32> = u_xlat26;
        u_xlat26 = vec3<f32>(x_1126.x, x_1126.y, x_1127.z);
        let x_1129 : vec4<f32> = vs_INTERP8;
        let x_1132 : vec4<f32> = x_553.x_MainLightShadowmapSize;
        let x_1135 : vec3<f32> = u_xlat26;
        let x_1138 : vec2<f32> = ((vec2<f32>(x_1129.x, x_1129.y) * vec2<f32>(x_1132.z, x_1132.w)) + -(vec2<f32>(x_1135.x, x_1135.y)));
        let x_1139 : vec4<f32> = u_xlat7;
        u_xlat7 = vec4<f32>(x_1138.x, x_1138.y, x_1139.z, x_1139.w);
        let x_1141 : vec4<f32> = u_xlat7;
        u_xlat8 = (vec4<f32>(x_1141.x, x_1141.x, x_1141.y, x_1141.y) + vec4<f32>(0.5f, 1.0f, 0.5f, 1.0f));
        let x_1144 : vec4<f32> = u_xlat8;
        let x_1146 : vec4<f32> = u_xlat8;
        u_xlat9 = (vec4<f32>(x_1144.x, x_1144.x, x_1144.z, x_1144.z) * vec4<f32>(x_1146.x, x_1146.x, x_1146.z, x_1146.z));
        let x_1149 : vec4<f32> = u_xlat9;
        let x_1153 : vec2<f32> = (vec2<f32>(x_1149.y, x_1149.w) * vec2<f32>(0.040816002f, 0.040816002f));
        let x_1154 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_1154.x, x_1153.x, x_1154.z, x_1153.y);
        let x_1156 : vec4<f32> = u_xlat9;
        let x_1159 : vec4<f32> = u_xlat7;
        u_xlat49 = ((vec2<f32>(x_1156.x, x_1156.z) * vec2<f32>(0.5f, 0.5f)) + -(vec2<f32>(x_1159.x, x_1159.y)));
        let x_1163 : vec4<f32> = u_xlat7;
        let x_1166 : vec2<f32> = (-(vec2<f32>(x_1163.x, x_1163.y)) + vec2<f32>(1.0f, 1.0f));
        let x_1167 : vec4<f32> = u_xlat8;
        u_xlat8 = vec4<f32>(x_1166.x, x_1167.y, x_1166.y, x_1167.w);
        let x_1169 : vec4<f32> = u_xlat7;
        let x_1171 : vec2<f32> = min(vec2<f32>(x_1169.x, x_1169.y), vec2<f32>(0.0f, 0.0f));
        let x_1172 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_1171.x, x_1171.y, x_1172.z, x_1172.w);
        let x_1174 : vec4<f32> = u_xlat9;
        let x_1177 : vec4<f32> = u_xlat9;
        let x_1180 : vec4<f32> = u_xlat8;
        let x_1182 : vec2<f32> = ((-(vec2<f32>(x_1174.x, x_1174.y)) * vec2<f32>(x_1177.x, x_1177.y)) + vec2<f32>(x_1180.x, x_1180.z));
        let x_1183 : vec4<f32> = u_xlat8;
        u_xlat8 = vec4<f32>(x_1182.x, x_1183.y, x_1182.y, x_1183.w);
        let x_1185 : vec4<f32> = u_xlat7;
        let x_1187 : vec2<f32> = max(vec2<f32>(x_1185.x, x_1185.y), vec2<f32>(0.0f, 0.0f));
        let x_1188 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_1187.x, x_1187.y, x_1188.z, x_1188.w);
        let x_1190 : vec4<f32> = u_xlat9;
        let x_1193 : vec4<f32> = u_xlat9;
        let x_1196 : vec4<f32> = u_xlat8;
        let x_1198 : vec2<f32> = ((-(vec2<f32>(x_1190.x, x_1190.y)) * vec2<f32>(x_1193.x, x_1193.y)) + vec2<f32>(x_1196.y, x_1196.w));
        let x_1199 : vec4<f32> = u_xlat8;
        u_xlat8 = vec4<f32>(x_1199.x, x_1198.x, x_1199.z, x_1198.y);
        let x_1201 : vec4<f32> = u_xlat8;
        u_xlat8 = (x_1201 + vec4<f32>(2.0f, 2.0f, 2.0f, 2.0f));
        let x_1205 : f32 = u_xlat8.y;
        u_xlat9.z = (x_1205 * 0.081632003f);
        let x_1209 : vec2<f32> = u_xlat49;
        let x_1212 : vec2<f32> = (vec2<f32>(x_1209.y, x_1209.x) * vec2<f32>(0.081632003f, 0.081632003f));
        let x_1213 : vec4<f32> = u_xlat11;
        u_xlat11 = vec4<f32>(x_1212.x, x_1212.y, x_1213.z, x_1213.w);
        let x_1215 : vec4<f32> = u_xlat8;
        u_xlat49 = (vec2<f32>(x_1215.x, x_1215.z) * vec2<f32>(0.081632003f, 0.081632003f));
        let x_1219 : f32 = u_xlat8.w;
        u_xlat11.z = (x_1219 * 0.081632003f);
        let x_1223 : f32 = u_xlat11.y;
        u_xlat9.x = x_1223;
        let x_1225 : vec4<f32> = u_xlat7;
        let x_1232 : vec2<f32> = ((vec2<f32>(x_1225.x, x_1225.x) * vec2<f32>(-0.081632003f, 0.081632003f)) + vec2<f32>(0.163264006f, 0.081632003f));
        let x_1233 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_1233.x, x_1232.x, x_1233.z, x_1232.y);
        let x_1235 : vec4<f32> = u_xlat7;
        let x_1239 : vec2<f32> = ((vec2<f32>(x_1235.x, x_1235.x) * vec2<f32>(-0.081632003f, 0.081632003f)) + vec2<f32>(0.081632003f, 0.163264006f));
        let x_1240 : vec4<f32> = u_xlat8;
        u_xlat8 = vec4<f32>(x_1239.x, x_1240.y, x_1239.y, x_1240.w);
        let x_1243 : f32 = u_xlat49.x;
        u_xlat8.y = x_1243;
        let x_1246 : f32 = u_xlat10.y;
        u_xlat8.w = x_1246;
        let x_1248 : vec4<f32> = u_xlat8;
        let x_1249 : vec4<f32> = u_xlat9;
        u_xlat9 = (x_1248 + x_1249);
        let x_1251 : vec4<f32> = u_xlat7;
        let x_1254 : vec2<f32> = ((vec2<f32>(x_1251.y, x_1251.y) * vec2<f32>(-0.081632003f, 0.081632003f)) + vec2<f32>(0.163264006f, 0.081632003f));
        let x_1255 : vec4<f32> = u_xlat11;
        u_xlat11 = vec4<f32>(x_1255.x, x_1254.x, x_1255.z, x_1254.y);
        let x_1257 : vec4<f32> = u_xlat7;
        let x_1260 : vec2<f32> = ((vec2<f32>(x_1257.y, x_1257.y) * vec2<f32>(-0.081632003f, 0.081632003f)) + vec2<f32>(0.081632003f, 0.163264006f));
        let x_1261 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_1260.x, x_1261.y, x_1260.y, x_1261.w);
        let x_1264 : f32 = u_xlat49.y;
        u_xlat10.y = x_1264;
        let x_1266 : vec4<f32> = u_xlat10;
        let x_1267 : vec4<f32> = u_xlat11;
        u_xlat7 = (x_1266 + x_1267);
        let x_1269 : vec4<f32> = u_xlat8;
        let x_1270 : vec4<f32> = u_xlat9;
        u_xlat8 = (x_1269 / x_1270);
        let x_1272 : vec4<f32> = u_xlat8;
        u_xlat8 = (x_1272 + vec4<f32>(-3.5f, -1.5f, 0.5f, 2.5f));
        let x_1278 : vec4<f32> = u_xlat10;
        let x_1279 : vec4<f32> = u_xlat7;
        u_xlat10 = (x_1278 / x_1279);
        let x_1281 : vec4<f32> = u_xlat10;
        u_xlat10 = (x_1281 + vec4<f32>(-3.5f, -1.5f, 0.5f, 2.5f));
        let x_1283 : vec4<f32> = u_xlat8;
        let x_1286 : vec4<f32> = x_553.x_MainLightShadowmapSize;
        u_xlat8 = (vec4<f32>(x_1283.w, x_1283.x, x_1283.y, x_1283.z) * vec4<f32>(x_1286.x, x_1286.x, x_1286.x, x_1286.x));
        let x_1289 : vec4<f32> = u_xlat10;
        let x_1292 : vec4<f32> = x_553.x_MainLightShadowmapSize;
        u_xlat10 = (vec4<f32>(x_1289.x, x_1289.w, x_1289.y, x_1289.z) * vec4<f32>(x_1292.y, x_1292.y, x_1292.y, x_1292.y));
        let x_1295 : vec4<f32> = u_xlat8;
        let x_1296 : vec3<f32> = vec3<f32>(x_1295.y, x_1295.z, x_1295.w);
        let x_1297 : vec4<f32> = u_xlat11;
        u_xlat11 = vec4<f32>(x_1296.x, x_1297.y, x_1296.y, x_1296.z);
        let x_1300 : f32 = u_xlat10.x;
        u_xlat11.y = x_1300;
        let x_1302 : vec3<f32> = u_xlat26;
        let x_1305 : vec4<f32> = x_553.x_MainLightShadowmapSize;
        let x_1308 : vec4<f32> = u_xlat11;
        u_xlat12 = ((vec4<f32>(x_1302.x, x_1302.y, x_1302.x, x_1302.y) * vec4<f32>(x_1305.x, x_1305.y, x_1305.x, x_1305.y)) + vec4<f32>(x_1308.x, x_1308.y, x_1308.z, x_1308.y));
        let x_1311 : vec3<f32> = u_xlat26;
        let x_1314 : vec4<f32> = x_553.x_MainLightShadowmapSize;
        let x_1317 : vec4<f32> = u_xlat11;
        let x_1319 : vec2<f32> = ((vec2<f32>(x_1311.x, x_1311.y) * vec2<f32>(x_1314.x, x_1314.y)) + vec2<f32>(x_1317.w, x_1317.y));
        let x_1320 : vec4<f32> = u_xlat13;
        u_xlat13 = vec4<f32>(x_1319.x, x_1319.y, x_1320.z, x_1320.w);
        let x_1323 : f32 = u_xlat11.y;
        u_xlat8.y = x_1323;
        let x_1326 : f32 = u_xlat10.z;
        u_xlat11.y = x_1326;
        let x_1328 : vec3<f32> = u_xlat26;
        let x_1331 : vec4<f32> = x_553.x_MainLightShadowmapSize;
        let x_1334 : vec4<f32> = u_xlat11;
        u_xlat14 = ((vec4<f32>(x_1328.x, x_1328.y, x_1328.x, x_1328.y) * vec4<f32>(x_1331.x, x_1331.y, x_1331.x, x_1331.y)) + vec4<f32>(x_1334.x, x_1334.y, x_1334.z, x_1334.y));
        let x_1338 : vec3<f32> = u_xlat26;
        let x_1341 : vec4<f32> = x_553.x_MainLightShadowmapSize;
        let x_1344 : vec4<f32> = u_xlat11;
        u_xlat55 = ((vec2<f32>(x_1338.x, x_1338.y) * vec2<f32>(x_1341.x, x_1341.y)) + vec2<f32>(x_1344.w, x_1344.y));
        let x_1348 : f32 = u_xlat11.y;
        u_xlat8.z = x_1348;
        let x_1350 : vec3<f32> = u_xlat26;
        let x_1353 : vec4<f32> = x_553.x_MainLightShadowmapSize;
        let x_1356 : vec4<f32> = u_xlat8;
        u_xlat15 = ((vec4<f32>(x_1350.x, x_1350.y, x_1350.x, x_1350.y) * vec4<f32>(x_1353.x, x_1353.y, x_1353.x, x_1353.y)) + vec4<f32>(x_1356.x, x_1356.y, x_1356.x, x_1356.z));
        let x_1360 : f32 = u_xlat10.w;
        u_xlat11.y = x_1360;
        let x_1363 : vec3<f32> = u_xlat26;
        let x_1366 : vec4<f32> = x_553.x_MainLightShadowmapSize;
        let x_1369 : vec4<f32> = u_xlat11;
        u_xlat16 = ((vec4<f32>(x_1363.x, x_1363.y, x_1363.x, x_1363.y) * vec4<f32>(x_1366.x, x_1366.y, x_1366.x, x_1366.y)) + vec4<f32>(x_1369.x, x_1369.y, x_1369.z, x_1369.y));
        let x_1373 : vec3<f32> = u_xlat26;
        let x_1376 : vec4<f32> = x_553.x_MainLightShadowmapSize;
        let x_1379 : vec4<f32> = u_xlat11;
        u_xlat29 = ((vec2<f32>(x_1373.x, x_1373.y) * vec2<f32>(x_1376.x, x_1376.y)) + vec2<f32>(x_1379.w, x_1379.y));
        let x_1383 : f32 = u_xlat11.y;
        u_xlat8.w = x_1383;
        let x_1386 : vec3<f32> = u_xlat26;
        let x_1389 : vec4<f32> = x_553.x_MainLightShadowmapSize;
        let x_1392 : vec4<f32> = u_xlat8;
        u_xlat17 = ((vec2<f32>(x_1386.x, x_1386.y) * vec2<f32>(x_1389.x, x_1389.y)) + vec2<f32>(x_1392.x, x_1392.w));
        let x_1395 : vec4<f32> = u_xlat11;
        let x_1396 : vec3<f32> = vec3<f32>(x_1395.x, x_1395.z, x_1395.w);
        let x_1397 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_1396.x, x_1397.y, x_1396.y, x_1396.z);
        let x_1399 : vec3<f32> = u_xlat26;
        let x_1402 : vec4<f32> = x_553.x_MainLightShadowmapSize;
        let x_1405 : vec4<f32> = u_xlat10;
        u_xlat11 = ((vec4<f32>(x_1399.x, x_1399.y, x_1399.x, x_1399.y) * vec4<f32>(x_1402.x, x_1402.y, x_1402.x, x_1402.y)) + vec4<f32>(x_1405.x, x_1405.y, x_1405.z, x_1405.y));
        let x_1409 : vec3<f32> = u_xlat26;
        let x_1412 : vec4<f32> = x_553.x_MainLightShadowmapSize;
        let x_1415 : vec4<f32> = u_xlat10;
        u_xlat52 = ((vec2<f32>(x_1409.x, x_1409.y) * vec2<f32>(x_1412.x, x_1412.y)) + vec2<f32>(x_1415.w, x_1415.y));
        let x_1419 : f32 = u_xlat8.x;
        u_xlat10.x = x_1419;
        let x_1421 : vec3<f32> = u_xlat26;
        let x_1424 : vec4<f32> = x_553.x_MainLightShadowmapSize;
        let x_1427 : vec4<f32> = u_xlat10;
        let x_1429 : vec2<f32> = ((vec2<f32>(x_1421.x, x_1421.y) * vec2<f32>(x_1424.x, x_1424.y)) + vec2<f32>(x_1427.x, x_1427.y));
        let x_1430 : vec3<f32> = u_xlat26;
        u_xlat26 = vec3<f32>(x_1429.x, x_1429.y, x_1430.z);
        let x_1433 : vec4<f32> = u_xlat7;
        let x_1435 : vec4<f32> = u_xlat9;
        u_xlat18 = (vec4<f32>(x_1433.x, x_1433.x, x_1433.x, x_1433.x) * x_1435);
        let x_1438 : vec4<f32> = u_xlat7;
        let x_1440 : vec4<f32> = u_xlat9;
        u_xlat19 = (vec4<f32>(x_1438.y, x_1438.y, x_1438.y, x_1438.y) * x_1440);
        let x_1443 : vec4<f32> = u_xlat7;
        let x_1445 : vec4<f32> = u_xlat9;
        u_xlat20 = (vec4<f32>(x_1443.z, x_1443.z, x_1443.z, x_1443.z) * x_1445);
        let x_1447 : vec4<f32> = u_xlat7;
        let x_1449 : vec4<f32> = u_xlat9;
        u_xlat7 = (vec4<f32>(x_1447.w, x_1447.w, x_1447.w, x_1447.w) * x_1449);
        let x_1452 : vec4<f32> = u_xlat12;
        let x_1453 : vec2<f32> = vec2<f32>(x_1452.x, x_1452.y);
        let x_1455 : f32 = vs_INTERP8.z;
        txVec13 = vec3<f32>(x_1453.x, x_1453.y, x_1455);
        let x_1462 : vec3<f32> = txVec13;
        let x_1464 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1462.xy, x_1462.z);
        u_xlat68 = x_1464;
        let x_1466 : vec4<f32> = u_xlat12;
        let x_1467 : vec2<f32> = vec2<f32>(x_1466.z, x_1466.w);
        let x_1469 : f32 = vs_INTERP8.z;
        txVec14 = vec3<f32>(x_1467.x, x_1467.y, x_1469);
        let x_1477 : vec3<f32> = txVec14;
        let x_1479 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1477.xy, x_1477.z);
        u_xlat69 = x_1479;
        let x_1480 : f32 = u_xlat69;
        let x_1482 : f32 = u_xlat18.y;
        u_xlat69 = (x_1480 * x_1482);
        let x_1485 : f32 = u_xlat18.x;
        let x_1486 : f32 = u_xlat68;
        let x_1488 : f32 = u_xlat69;
        u_xlat68 = ((x_1485 * x_1486) + x_1488);
        let x_1491 : vec4<f32> = u_xlat13;
        let x_1492 : vec2<f32> = vec2<f32>(x_1491.x, x_1491.y);
        let x_1494 : f32 = vs_INTERP8.z;
        txVec15 = vec3<f32>(x_1492.x, x_1492.y, x_1494);
        let x_1501 : vec3<f32> = txVec15;
        let x_1503 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1501.xy, x_1501.z);
        u_xlat69 = x_1503;
        let x_1505 : f32 = u_xlat18.z;
        let x_1506 : f32 = u_xlat69;
        let x_1508 : f32 = u_xlat68;
        u_xlat68 = ((x_1505 * x_1506) + x_1508);
        let x_1511 : vec4<f32> = u_xlat15;
        let x_1512 : vec2<f32> = vec2<f32>(x_1511.x, x_1511.y);
        let x_1514 : f32 = vs_INTERP8.z;
        txVec16 = vec3<f32>(x_1512.x, x_1512.y, x_1514);
        let x_1521 : vec3<f32> = txVec16;
        let x_1523 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1521.xy, x_1521.z);
        u_xlat69 = x_1523;
        let x_1525 : f32 = u_xlat18.w;
        let x_1526 : f32 = u_xlat69;
        let x_1528 : f32 = u_xlat68;
        u_xlat68 = ((x_1525 * x_1526) + x_1528);
        let x_1531 : vec4<f32> = u_xlat14;
        let x_1532 : vec2<f32> = vec2<f32>(x_1531.x, x_1531.y);
        let x_1534 : f32 = vs_INTERP8.z;
        txVec17 = vec3<f32>(x_1532.x, x_1532.y, x_1534);
        let x_1541 : vec3<f32> = txVec17;
        let x_1543 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1541.xy, x_1541.z);
        u_xlat69 = x_1543;
        let x_1545 : f32 = u_xlat19.x;
        let x_1546 : f32 = u_xlat69;
        let x_1548 : f32 = u_xlat68;
        u_xlat68 = ((x_1545 * x_1546) + x_1548);
        let x_1551 : vec4<f32> = u_xlat14;
        let x_1552 : vec2<f32> = vec2<f32>(x_1551.z, x_1551.w);
        let x_1554 : f32 = vs_INTERP8.z;
        txVec18 = vec3<f32>(x_1552.x, x_1552.y, x_1554);
        let x_1561 : vec3<f32> = txVec18;
        let x_1563 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1561.xy, x_1561.z);
        u_xlat69 = x_1563;
        let x_1565 : f32 = u_xlat19.y;
        let x_1566 : f32 = u_xlat69;
        let x_1568 : f32 = u_xlat68;
        u_xlat68 = ((x_1565 * x_1566) + x_1568);
        let x_1571 : vec2<f32> = u_xlat55;
        let x_1573 : f32 = vs_INTERP8.z;
        txVec19 = vec3<f32>(x_1571.x, x_1571.y, x_1573);
        let x_1580 : vec3<f32> = txVec19;
        let x_1582 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1580.xy, x_1580.z);
        u_xlat69 = x_1582;
        let x_1584 : f32 = u_xlat19.z;
        let x_1585 : f32 = u_xlat69;
        let x_1587 : f32 = u_xlat68;
        u_xlat68 = ((x_1584 * x_1585) + x_1587);
        let x_1590 : vec4<f32> = u_xlat15;
        let x_1591 : vec2<f32> = vec2<f32>(x_1590.z, x_1590.w);
        let x_1593 : f32 = vs_INTERP8.z;
        txVec20 = vec3<f32>(x_1591.x, x_1591.y, x_1593);
        let x_1600 : vec3<f32> = txVec20;
        let x_1602 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1600.xy, x_1600.z);
        u_xlat69 = x_1602;
        let x_1604 : f32 = u_xlat19.w;
        let x_1605 : f32 = u_xlat69;
        let x_1607 : f32 = u_xlat68;
        u_xlat68 = ((x_1604 * x_1605) + x_1607);
        let x_1610 : vec4<f32> = u_xlat16;
        let x_1611 : vec2<f32> = vec2<f32>(x_1610.x, x_1610.y);
        let x_1613 : f32 = vs_INTERP8.z;
        txVec21 = vec3<f32>(x_1611.x, x_1611.y, x_1613);
        let x_1620 : vec3<f32> = txVec21;
        let x_1622 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1620.xy, x_1620.z);
        u_xlat69 = x_1622;
        let x_1624 : f32 = u_xlat20.x;
        let x_1625 : f32 = u_xlat69;
        let x_1627 : f32 = u_xlat68;
        u_xlat68 = ((x_1624 * x_1625) + x_1627);
        let x_1630 : vec4<f32> = u_xlat16;
        let x_1631 : vec2<f32> = vec2<f32>(x_1630.z, x_1630.w);
        let x_1633 : f32 = vs_INTERP8.z;
        txVec22 = vec3<f32>(x_1631.x, x_1631.y, x_1633);
        let x_1640 : vec3<f32> = txVec22;
        let x_1642 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1640.xy, x_1640.z);
        u_xlat69 = x_1642;
        let x_1644 : f32 = u_xlat20.y;
        let x_1645 : f32 = u_xlat69;
        let x_1647 : f32 = u_xlat68;
        u_xlat68 = ((x_1644 * x_1645) + x_1647);
        let x_1650 : vec2<f32> = u_xlat29;
        let x_1652 : f32 = vs_INTERP8.z;
        txVec23 = vec3<f32>(x_1650.x, x_1650.y, x_1652);
        let x_1659 : vec3<f32> = txVec23;
        let x_1661 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1659.xy, x_1659.z);
        u_xlat69 = x_1661;
        let x_1663 : f32 = u_xlat20.z;
        let x_1664 : f32 = u_xlat69;
        let x_1666 : f32 = u_xlat68;
        u_xlat68 = ((x_1663 * x_1664) + x_1666);
        let x_1669 : vec2<f32> = u_xlat17;
        let x_1671 : f32 = vs_INTERP8.z;
        txVec24 = vec3<f32>(x_1669.x, x_1669.y, x_1671);
        let x_1678 : vec3<f32> = txVec24;
        let x_1680 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1678.xy, x_1678.z);
        u_xlat69 = x_1680;
        let x_1682 : f32 = u_xlat20.w;
        let x_1683 : f32 = u_xlat69;
        let x_1685 : f32 = u_xlat68;
        u_xlat68 = ((x_1682 * x_1683) + x_1685);
        let x_1688 : vec4<f32> = u_xlat11;
        let x_1689 : vec2<f32> = vec2<f32>(x_1688.x, x_1688.y);
        let x_1691 : f32 = vs_INTERP8.z;
        txVec25 = vec3<f32>(x_1689.x, x_1689.y, x_1691);
        let x_1698 : vec3<f32> = txVec25;
        let x_1700 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1698.xy, x_1698.z);
        u_xlat69 = x_1700;
        let x_1702 : f32 = u_xlat7.x;
        let x_1703 : f32 = u_xlat69;
        let x_1705 : f32 = u_xlat68;
        u_xlat68 = ((x_1702 * x_1703) + x_1705);
        let x_1708 : vec4<f32> = u_xlat11;
        let x_1709 : vec2<f32> = vec2<f32>(x_1708.z, x_1708.w);
        let x_1711 : f32 = vs_INTERP8.z;
        txVec26 = vec3<f32>(x_1709.x, x_1709.y, x_1711);
        let x_1718 : vec3<f32> = txVec26;
        let x_1720 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1718.xy, x_1718.z);
        u_xlat69 = x_1720;
        let x_1722 : f32 = u_xlat7.y;
        let x_1723 : f32 = u_xlat69;
        let x_1725 : f32 = u_xlat68;
        u_xlat68 = ((x_1722 * x_1723) + x_1725);
        let x_1728 : vec2<f32> = u_xlat52;
        let x_1730 : f32 = vs_INTERP8.z;
        txVec27 = vec3<f32>(x_1728.x, x_1728.y, x_1730);
        let x_1737 : vec3<f32> = txVec27;
        let x_1739 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1737.xy, x_1737.z);
        u_xlat69 = x_1739;
        let x_1741 : f32 = u_xlat7.z;
        let x_1742 : f32 = u_xlat69;
        let x_1744 : f32 = u_xlat68;
        u_xlat68 = ((x_1741 * x_1742) + x_1744);
        let x_1747 : vec3<f32> = u_xlat26;
        let x_1748 : vec2<f32> = vec2<f32>(x_1747.x, x_1747.y);
        let x_1750 : f32 = vs_INTERP8.z;
        txVec28 = vec3<f32>(x_1748.x, x_1748.y, x_1750);
        let x_1757 : vec3<f32> = txVec28;
        let x_1759 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1757.xy, x_1757.z);
        u_xlat26.x = x_1759;
        let x_1762 : f32 = u_xlat7.w;
        let x_1764 : f32 = u_xlat26.x;
        let x_1766 : f32 = u_xlat68;
        u_xlat67 = ((x_1762 * x_1764) + x_1766);
      }
    }
  } else {
    let x_1770 : vec4<f32> = vs_INTERP8;
    let x_1771 : vec2<f32> = vec2<f32>(x_1770.x, x_1770.y);
    let x_1773 : f32 = vs_INTERP8.z;
    txVec29 = vec3<f32>(x_1771.x, x_1771.y, x_1773);
    let x_1780 : vec3<f32> = txVec29;
    let x_1782 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1780.xy, x_1780.z);
    u_xlat67 = x_1782;
  }
  let x_1784 : f32 = x_553.x_MainLightShadowParams.x;
  u_xlat26.x = (-(x_1784) + 1.0f);
  let x_1788 : f32 = u_xlat67;
  let x_1790 : f32 = x_553.x_MainLightShadowParams.x;
  let x_1793 : f32 = u_xlat26.x;
  u_xlat67 = ((x_1788 * x_1790) + x_1793);
  let x_1796 : f32 = vs_INTERP8.z;
  u_xlatb26 = (0.0f >= x_1796);
  let x_1800 : f32 = vs_INTERP8.z;
  u_xlatb47 = (x_1800 >= 1.0f);
  let x_1802 : bool = u_xlatb47;
  let x_1803 : bool = u_xlatb26;
  u_xlatb26 = (x_1802 | x_1803);
  let x_1805 : bool = u_xlatb26;
  let x_1806 : f32 = u_xlat67;
  u_xlat67 = select(x_1806, 1.0f, x_1805);
  let x_1808 : vec3<f32> = vs_INTERP0;
  let x_1810 : vec3<f32> = x_44.x_WorldSpaceCameraPos;
  u_xlat26 = (x_1808 + -(x_1810));
  let x_1813 : vec3<f32> = u_xlat26;
  let x_1814 : vec3<f32> = u_xlat26;
  u_xlat26.x = dot(x_1813, x_1814);
  let x_1818 : f32 = u_xlat26.x;
  let x_1820 : f32 = x_553.x_MainLightShadowParams.z;
  let x_1823 : f32 = x_553.x_MainLightShadowParams.w;
  u_xlat26.x = ((x_1818 * x_1820) + x_1823);
  let x_1827 : f32 = u_xlat26.x;
  u_xlat26.x = clamp(x_1827, 0.0f, 1.0f);
  let x_1830 : f32 = u_xlat67;
  u_xlat47 = (-(x_1830) + 1.0f);
  let x_1834 : f32 = u_xlat26.x;
  let x_1835 : f32 = u_xlat47;
  let x_1837 : f32 = u_xlat67;
  u_xlat67 = ((x_1834 * x_1835) + x_1837);
  let x_1839 : vec3<f32> = u_xlat5;
  let x_1842 : vec4<f32> = x_44.x_MainLightColor;
  u_xlat26 = (vec3<f32>(x_1839.x, x_1839.x, x_1839.x) * vec3<f32>(x_1842.x, x_1842.y, x_1842.z));
  let x_1845 : vec3<f32> = u_xlat3;
  let x_1847 : vec3<f32> = u_xlat22;
  u_xlat69 = dot(-(x_1845), x_1847);
  let x_1849 : f32 = u_xlat69;
  let x_1850 : f32 = u_xlat69;
  u_xlat69 = (x_1849 + x_1850);
  let x_1852 : vec3<f32> = u_xlat22;
  let x_1853 : f32 = u_xlat69;
  let x_1857 : vec3<f32> = u_xlat3;
  let x_1859 : vec3<f32> = ((x_1852 * -(vec3<f32>(x_1853, x_1853, x_1853))) + -(x_1857));
  let x_1860 : vec4<f32> = u_xlat7;
  u_xlat7 = vec4<f32>(x_1859.x, x_1859.y, x_1859.z, x_1860.w);
  let x_1862 : vec3<f32> = u_xlat22;
  let x_1863 : vec3<f32> = u_xlat3;
  u_xlat69 = dot(x_1862, x_1863);
  let x_1865 : f32 = u_xlat69;
  u_xlat69 = clamp(x_1865, 0.0f, 1.0f);
  let x_1867 : f32 = u_xlat69;
  u_xlat69 = (-(x_1867) + 1.0f);
  let x_1870 : f32 = u_xlat69;
  let x_1871 : f32 = u_xlat69;
  u_xlat69 = (x_1870 * x_1871);
  let x_1873 : f32 = u_xlat69;
  let x_1874 : f32 = u_xlat69;
  u_xlat69 = (x_1873 * x_1874);
  let x_1878 : f32 = u_xlat0.x;
  u_xlat70 = ((-(x_1878) * 0.699999988f) + 1.700000048f);
  let x_1885 : f32 = u_xlat0.x;
  let x_1886 : f32 = u_xlat70;
  u_xlat0.x = (x_1885 * x_1886);
  let x_1890 : f32 = u_xlat0.x;
  u_xlat0.x = (x_1890 * 6.0f);
  let x_1902 : vec4<f32> = u_xlat7;
  let x_1905 : f32 = u_xlat0.x;
  let x_1906 : vec4<f32> = textureSampleLevel(unity_SpecCube0, samplerunity_SpecCube0, vec3<f32>(x_1902.x, x_1902.y, x_1902.z), x_1905);
  u_xlat7 = x_1906;
  let x_1908 : f32 = u_xlat7.w;
  u_xlat0.x = (x_1908 + -1.0f);
  let x_1912 : f32 = x_267.unity_SpecCube0_HDR.w;
  let x_1914 : f32 = u_xlat0.x;
  u_xlat0.x = ((x_1912 * x_1914) + 1.0f);
  let x_1919 : f32 = u_xlat0.x;
  u_xlat0.x = max(x_1919, 0.0f);
  let x_1923 : f32 = u_xlat0.x;
  u_xlat0.x = log2(x_1923);
  let x_1927 : f32 = u_xlat0.x;
  let x_1929 : f32 = x_267.unity_SpecCube0_HDR.y;
  u_xlat0.x = (x_1927 * x_1929);
  let x_1933 : f32 = u_xlat0.x;
  u_xlat0.x = exp2(x_1933);
  let x_1937 : f32 = u_xlat0.x;
  let x_1939 : f32 = x_267.unity_SpecCube0_HDR.x;
  u_xlat0.x = (x_1937 * x_1939);
  let x_1942 : vec4<f32> = u_xlat7;
  let x_1944 : vec4<f32> = u_xlat0;
  let x_1946 : vec3<f32> = (vec3<f32>(x_1942.x, x_1942.y, x_1942.z) * vec3<f32>(x_1944.x, x_1944.x, x_1944.x));
  let x_1947 : vec4<f32> = u_xlat7;
  u_xlat7 = vec4<f32>(x_1946.x, x_1946.y, x_1946.z, x_1947.w);
  let x_1949 : f32 = u_xlat42;
  let x_1951 : f32 = u_xlat42;
  let x_1955 : vec2<f32> = ((vec2<f32>(x_1949, x_1949) * vec2<f32>(x_1951, x_1951)) + vec2<f32>(-1.0f, 1.0f));
  let x_1956 : vec4<f32> = u_xlat0;
  u_xlat0 = vec4<f32>(x_1955.x, x_1956.y, x_1955.y, x_1956.w);
  let x_1959 : f32 = u_xlat0.z;
  u_xlat42 = (1.0f / x_1959);
  let x_1961 : vec3<f32> = u_xlat2;
  let x_1963 : f32 = u_xlat65;
  let x_1965 : vec3<f32> = (-(x_1961) + vec3<f32>(x_1963, x_1963, x_1963));
  let x_1966 : vec4<f32> = u_xlat8;
  u_xlat8 = vec4<f32>(x_1965.x, x_1965.y, x_1965.z, x_1966.w);
  let x_1968 : f32 = u_xlat69;
  let x_1970 : vec4<f32> = u_xlat8;
  let x_1973 : vec3<f32> = u_xlat2;
  let x_1974 : vec3<f32> = ((vec3<f32>(x_1968, x_1968, x_1968) * vec3<f32>(x_1970.x, x_1970.y, x_1970.z)) + x_1973);
  let x_1975 : vec4<f32> = u_xlat8;
  u_xlat8 = vec4<f32>(x_1974.x, x_1974.y, x_1974.z, x_1975.w);
  let x_1977 : f32 = u_xlat42;
  let x_1979 : vec4<f32> = u_xlat8;
  let x_1981 : vec3<f32> = (vec3<f32>(x_1977, x_1977, x_1977) * vec3<f32>(x_1979.x, x_1979.y, x_1979.z));
  let x_1982 : vec4<f32> = u_xlat8;
  u_xlat8 = vec4<f32>(x_1981.x, x_1981.y, x_1981.z, x_1982.w);
  let x_1984 : vec4<f32> = u_xlat7;
  let x_1986 : vec4<f32> = u_xlat8;
  let x_1988 : vec3<f32> = (vec3<f32>(x_1984.x, x_1984.y, x_1984.z) * vec3<f32>(x_1986.x, x_1986.y, x_1986.z));
  let x_1989 : vec4<f32> = u_xlat7;
  u_xlat7 = vec4<f32>(x_1988.x, x_1988.y, x_1988.z, x_1989.w);
  let x_1991 : vec3<f32> = u_xlat4;
  let x_1992 : vec3<f32> = u_xlat6;
  let x_1994 : vec4<f32> = u_xlat7;
  u_xlat4 = ((x_1991 * x_1992) + vec3<f32>(x_1994.x, x_1994.y, x_1994.z));
  let x_1997 : f32 = u_xlat67;
  let x_2000 : f32 = x_267.unity_LightData.z;
  u_xlat42 = (x_1997 * x_2000);
  let x_2002 : vec3<f32> = u_xlat22;
  let x_2004 : vec4<f32> = x_44.x_MainLightPosition;
  u_xlat65 = dot(x_2002, vec3<f32>(x_2004.x, x_2004.y, x_2004.z));
  let x_2007 : f32 = u_xlat65;
  u_xlat65 = clamp(x_2007, 0.0f, 1.0f);
  let x_2009 : f32 = u_xlat42;
  let x_2010 : f32 = u_xlat65;
  u_xlat42 = (x_2009 * x_2010);
  let x_2012 : f32 = u_xlat42;
  let x_2014 : vec3<f32> = u_xlat26;
  u_xlat26 = (vec3<f32>(x_2012, x_2012, x_2012) * x_2014);
  let x_2016 : vec3<f32> = u_xlat3;
  let x_2018 : vec4<f32> = x_44.x_MainLightPosition;
  let x_2020 : vec3<f32> = (x_2016 + vec3<f32>(x_2018.x, x_2018.y, x_2018.z));
  let x_2021 : vec4<f32> = u_xlat7;
  u_xlat7 = vec4<f32>(x_2020.x, x_2020.y, x_2020.z, x_2021.w);
  let x_2023 : vec4<f32> = u_xlat7;
  let x_2025 : vec4<f32> = u_xlat7;
  u_xlat42 = dot(vec3<f32>(x_2023.x, x_2023.y, x_2023.z), vec3<f32>(x_2025.x, x_2025.y, x_2025.z));
  let x_2028 : f32 = u_xlat42;
  u_xlat42 = max(x_2028, 1.17549435e-37f);
  let x_2031 : f32 = u_xlat42;
  u_xlat42 = inverseSqrt(x_2031);
  let x_2033 : f32 = u_xlat42;
  let x_2035 : vec4<f32> = u_xlat7;
  let x_2037 : vec3<f32> = (vec3<f32>(x_2033, x_2033, x_2033) * vec3<f32>(x_2035.x, x_2035.y, x_2035.z));
  let x_2038 : vec4<f32> = u_xlat7;
  u_xlat7 = vec4<f32>(x_2037.x, x_2037.y, x_2037.z, x_2038.w);
  let x_2040 : vec3<f32> = u_xlat22;
  let x_2041 : vec4<f32> = u_xlat7;
  u_xlat42 = dot(x_2040, vec3<f32>(x_2041.x, x_2041.y, x_2041.z));
  let x_2044 : f32 = u_xlat42;
  u_xlat42 = clamp(x_2044, 0.0f, 1.0f);
  let x_2047 : vec4<f32> = x_44.x_MainLightPosition;
  let x_2049 : vec4<f32> = u_xlat7;
  u_xlat65 = dot(vec3<f32>(x_2047.x, x_2047.y, x_2047.z), vec3<f32>(x_2049.x, x_2049.y, x_2049.z));
  let x_2052 : f32 = u_xlat65;
  u_xlat65 = clamp(x_2052, 0.0f, 1.0f);
  let x_2054 : f32 = u_xlat42;
  let x_2055 : f32 = u_xlat42;
  u_xlat42 = (x_2054 * x_2055);
  let x_2057 : f32 = u_xlat42;
  let x_2059 : f32 = u_xlat0.x;
  u_xlat42 = ((x_2057 * x_2059) + 1.000010014f);
  let x_2063 : f32 = u_xlat65;
  let x_2064 : f32 = u_xlat65;
  u_xlat65 = (x_2063 * x_2064);
  let x_2066 : f32 = u_xlat42;
  let x_2067 : f32 = u_xlat42;
  u_xlat42 = (x_2066 * x_2067);
  let x_2069 : f32 = u_xlat65;
  u_xlat65 = max(x_2069, 0.100000001f);
  let x_2072 : f32 = u_xlat42;
  let x_2073 : f32 = u_xlat65;
  u_xlat42 = (x_2072 * x_2073);
  let x_2075 : f32 = u_xlat66;
  let x_2076 : f32 = u_xlat42;
  u_xlat42 = (x_2075 * x_2076);
  let x_2079 : f32 = u_xlat1.x;
  let x_2080 : f32 = u_xlat42;
  u_xlat42 = (x_2079 / x_2080);
  let x_2082 : vec3<f32> = u_xlat2;
  let x_2083 : f32 = u_xlat42;
  let x_2086 : vec3<f32> = u_xlat6;
  let x_2087 : vec3<f32> = ((x_2082 * vec3<f32>(x_2083, x_2083, x_2083)) + x_2086);
  let x_2088 : vec4<f32> = u_xlat7;
  u_xlat7 = vec4<f32>(x_2087.x, x_2087.y, x_2087.z, x_2088.w);
  let x_2090 : vec3<f32> = u_xlat26;
  let x_2091 : vec4<f32> = u_xlat7;
  u_xlat26 = (x_2090 * vec3<f32>(x_2091.x, x_2091.y, x_2091.z));
  let x_2095 : f32 = x_44.x_AdditionalLightsCount.x;
  let x_2097 : f32 = x_267.unity_LightData.y;
  u_xlat42 = min(x_2095, x_2097);
  let x_2101 : f32 = u_xlat42;
  u_xlatu42 = bitcast<u32>(i32(x_2101));
  u_xlat7.x = 0.0f;
  u_xlat7.y = 0.0f;
  u_xlat7.z = 0.0f;
  u_xlatu_loop_1 = 0u;
  loop {
    let x_2113 : u32 = u_xlatu_loop_1;
    let x_2114 : u32 = u_xlatu42;
    if ((x_2113 < x_2114)) {
    } else {
      break;
    }
    let x_2117 : u32 = u_xlatu_loop_1;
    u_xlatu67 = (x_2117 >> 2u);
    let x_2121 : u32 = u_xlatu_loop_1;
    u_xlati69 = bitcast<i32>((x_2121 & 3u));
    let x_2124 : u32 = u_xlatu67;
    let x_2127 : vec4<f32> = x_267.unity_LightIndices[bitcast<i32>(x_2124)];
    let x_2137 : i32 = u_xlati69;
    indexable = array<vec4<u32>, 4u>(vec4<u32>(1065353216u, 0u, 0u, 0u), vec4<u32>(0u, 1065353216u, 0u, 0u), vec4<u32>(0u, 0u, 1065353216u, 0u), vec4<u32>(0u, 0u, 0u, 1065353216u));
    let x_2142 : vec4<u32> = indexable[x_2137];
    u_xlat67 = dot(x_2127, bitcast<vec4<f32>>(x_2142));
    let x_2146 : f32 = u_xlat67;
    u_xlati67 = i32(x_2146);
    let x_2148 : vec3<f32> = vs_INTERP0;
    let x_2160 : i32 = u_xlati67;
    let x_2162 : vec4<f32> = x_2159.x_AdditionalLightsPosition[x_2160];
    let x_2165 : i32 = u_xlati67;
    let x_2167 : vec4<f32> = x_2159.x_AdditionalLightsPosition[x_2165];
    let x_2169 : vec3<f32> = ((-(x_2148) * vec3<f32>(x_2162.w, x_2162.w, x_2162.w)) + vec3<f32>(x_2167.x, x_2167.y, x_2167.z));
    let x_2170 : vec4<f32> = u_xlat8;
    u_xlat8 = vec4<f32>(x_2169.x, x_2169.y, x_2169.z, x_2170.w);
    let x_2172 : vec4<f32> = u_xlat8;
    let x_2174 : vec4<f32> = u_xlat8;
    u_xlat69 = dot(vec3<f32>(x_2172.x, x_2172.y, x_2172.z), vec3<f32>(x_2174.x, x_2174.y, x_2174.z));
    let x_2177 : f32 = u_xlat69;
    u_xlat69 = max(x_2177, 6.10351562e-05f);
    let x_2180 : f32 = u_xlat69;
    u_xlat70 = inverseSqrt(x_2180);
    let x_2182 : f32 = u_xlat70;
    let x_2184 : vec4<f32> = u_xlat8;
    let x_2186 : vec3<f32> = (vec3<f32>(x_2182, x_2182, x_2182) * vec3<f32>(x_2184.x, x_2184.y, x_2184.z));
    let x_2187 : vec4<f32> = u_xlat9;
    u_xlat9 = vec4<f32>(x_2186.x, x_2186.y, x_2186.z, x_2187.w);
    let x_2190 : f32 = u_xlat69;
    u_xlat71 = (1.0f / x_2190);
    let x_2192 : f32 = u_xlat69;
    let x_2193 : i32 = u_xlati67;
    let x_2195 : f32 = x_2159.x_AdditionalLightsAttenuation[x_2193].x;
    u_xlat69 = (x_2192 * x_2195);
    let x_2197 : f32 = u_xlat69;
    let x_2199 : f32 = u_xlat69;
    u_xlat69 = ((-(x_2197) * x_2199) + 1.0f);
    let x_2202 : f32 = u_xlat69;
    u_xlat69 = max(x_2202, 0.0f);
    let x_2204 : f32 = u_xlat69;
    let x_2205 : f32 = u_xlat69;
    u_xlat69 = (x_2204 * x_2205);
    let x_2207 : f32 = u_xlat69;
    let x_2208 : f32 = u_xlat71;
    u_xlat69 = (x_2207 * x_2208);
    let x_2210 : i32 = u_xlati67;
    let x_2212 : vec4<f32> = x_2159.x_AdditionalLightsSpotDir[x_2210];
    let x_2214 : vec4<f32> = u_xlat9;
    u_xlat71 = dot(vec3<f32>(x_2212.x, x_2212.y, x_2212.z), vec3<f32>(x_2214.x, x_2214.y, x_2214.z));
    let x_2217 : f32 = u_xlat71;
    let x_2218 : i32 = u_xlati67;
    let x_2220 : f32 = x_2159.x_AdditionalLightsAttenuation[x_2218].z;
    let x_2222 : i32 = u_xlati67;
    let x_2224 : f32 = x_2159.x_AdditionalLightsAttenuation[x_2222].w;
    u_xlat71 = ((x_2217 * x_2220) + x_2224);
    let x_2226 : f32 = u_xlat71;
    u_xlat71 = clamp(x_2226, 0.0f, 1.0f);
    let x_2228 : f32 = u_xlat71;
    let x_2229 : f32 = u_xlat71;
    u_xlat71 = (x_2228 * x_2229);
    let x_2231 : f32 = u_xlat69;
    let x_2232 : f32 = u_xlat71;
    u_xlat69 = (x_2231 * x_2232);
    let x_2234 : vec3<f32> = u_xlat5;
    let x_2236 : i32 = u_xlati67;
    let x_2238 : vec4<f32> = x_2159.x_AdditionalLightsColor[x_2236];
    let x_2240 : vec3<f32> = (vec3<f32>(x_2234.x, x_2234.x, x_2234.x) * vec3<f32>(x_2238.x, x_2238.y, x_2238.z));
    let x_2241 : vec4<f32> = u_xlat10;
    u_xlat10 = vec4<f32>(x_2240.x, x_2240.y, x_2240.z, x_2241.w);
    let x_2243 : vec3<f32> = u_xlat22;
    let x_2244 : vec4<f32> = u_xlat9;
    u_xlat67 = dot(x_2243, vec3<f32>(x_2244.x, x_2244.y, x_2244.z));
    let x_2247 : f32 = u_xlat67;
    u_xlat67 = clamp(x_2247, 0.0f, 1.0f);
    let x_2249 : f32 = u_xlat67;
    let x_2250 : f32 = u_xlat69;
    u_xlat67 = (x_2249 * x_2250);
    let x_2252 : f32 = u_xlat67;
    let x_2254 : vec4<f32> = u_xlat10;
    let x_2256 : vec3<f32> = (vec3<f32>(x_2252, x_2252, x_2252) * vec3<f32>(x_2254.x, x_2254.y, x_2254.z));
    let x_2257 : vec4<f32> = u_xlat10;
    u_xlat10 = vec4<f32>(x_2256.x, x_2256.y, x_2256.z, x_2257.w);
    let x_2259 : vec4<f32> = u_xlat8;
    let x_2261 : f32 = u_xlat70;
    let x_2264 : vec3<f32> = u_xlat3;
    let x_2265 : vec3<f32> = ((vec3<f32>(x_2259.x, x_2259.y, x_2259.z) * vec3<f32>(x_2261, x_2261, x_2261)) + x_2264);
    let x_2266 : vec4<f32> = u_xlat8;
    u_xlat8 = vec4<f32>(x_2265.x, x_2265.y, x_2265.z, x_2266.w);
    let x_2268 : vec4<f32> = u_xlat8;
    let x_2270 : vec4<f32> = u_xlat8;
    u_xlat67 = dot(vec3<f32>(x_2268.x, x_2268.y, x_2268.z), vec3<f32>(x_2270.x, x_2270.y, x_2270.z));
    let x_2273 : f32 = u_xlat67;
    u_xlat67 = max(x_2273, 1.17549435e-37f);
    let x_2275 : f32 = u_xlat67;
    u_xlat67 = inverseSqrt(x_2275);
    let x_2277 : f32 = u_xlat67;
    let x_2279 : vec4<f32> = u_xlat8;
    let x_2281 : vec3<f32> = (vec3<f32>(x_2277, x_2277, x_2277) * vec3<f32>(x_2279.x, x_2279.y, x_2279.z));
    let x_2282 : vec4<f32> = u_xlat8;
    u_xlat8 = vec4<f32>(x_2281.x, x_2281.y, x_2281.z, x_2282.w);
    let x_2284 : vec3<f32> = u_xlat22;
    let x_2285 : vec4<f32> = u_xlat8;
    u_xlat67 = dot(x_2284, vec3<f32>(x_2285.x, x_2285.y, x_2285.z));
    let x_2288 : f32 = u_xlat67;
    u_xlat67 = clamp(x_2288, 0.0f, 1.0f);
    let x_2290 : vec4<f32> = u_xlat9;
    let x_2292 : vec4<f32> = u_xlat8;
    u_xlat69 = dot(vec3<f32>(x_2290.x, x_2290.y, x_2290.z), vec3<f32>(x_2292.x, x_2292.y, x_2292.z));
    let x_2295 : f32 = u_xlat69;
    u_xlat69 = clamp(x_2295, 0.0f, 1.0f);
    let x_2297 : f32 = u_xlat67;
    let x_2298 : f32 = u_xlat67;
    u_xlat67 = (x_2297 * x_2298);
    let x_2300 : f32 = u_xlat67;
    let x_2302 : f32 = u_xlat0.x;
    u_xlat67 = ((x_2300 * x_2302) + 1.000010014f);
    let x_2305 : f32 = u_xlat69;
    let x_2306 : f32 = u_xlat69;
    u_xlat69 = (x_2305 * x_2306);
    let x_2308 : f32 = u_xlat67;
    let x_2309 : f32 = u_xlat67;
    u_xlat67 = (x_2308 * x_2309);
    let x_2311 : f32 = u_xlat69;
    u_xlat69 = max(x_2311, 0.100000001f);
    let x_2313 : f32 = u_xlat67;
    let x_2314 : f32 = u_xlat69;
    u_xlat67 = (x_2313 * x_2314);
    let x_2316 : f32 = u_xlat66;
    let x_2317 : f32 = u_xlat67;
    u_xlat67 = (x_2316 * x_2317);
    let x_2320 : f32 = u_xlat1.x;
    let x_2321 : f32 = u_xlat67;
    u_xlat67 = (x_2320 / x_2321);
    let x_2323 : vec3<f32> = u_xlat2;
    let x_2324 : f32 = u_xlat67;
    let x_2327 : vec3<f32> = u_xlat6;
    let x_2328 : vec3<f32> = ((x_2323 * vec3<f32>(x_2324, x_2324, x_2324)) + x_2327);
    let x_2329 : vec4<f32> = u_xlat8;
    u_xlat8 = vec4<f32>(x_2328.x, x_2328.y, x_2328.z, x_2329.w);
    let x_2331 : vec4<f32> = u_xlat8;
    let x_2333 : vec4<f32> = u_xlat10;
    let x_2336 : vec4<f32> = u_xlat7;
    let x_2338 : vec3<f32> = ((vec3<f32>(x_2331.x, x_2331.y, x_2331.z) * vec3<f32>(x_2333.x, x_2333.y, x_2333.z)) + vec3<f32>(x_2336.x, x_2336.y, x_2336.z));
    let x_2339 : vec4<f32> = u_xlat7;
    u_xlat7 = vec4<f32>(x_2338.x, x_2338.y, x_2338.z, x_2339.w);

    continuing {
      let x_2341 : u32 = u_xlatu_loop_1;
      u_xlatu_loop_1 = (x_2341 + bitcast<u32>(1i));
    }
  }
  let x_2343 : vec3<f32> = u_xlat4;
  let x_2344 : f32 = u_xlat63;
  let x_2347 : vec3<f32> = u_xlat26;
  let x_2348 : vec3<f32> = ((x_2343 * vec3<f32>(x_2344, x_2344, x_2344)) + x_2347);
  let x_2349 : vec4<f32> = u_xlat0;
  u_xlat0 = vec4<f32>(x_2348.x, x_2349.y, x_2348.y, x_2348.z);
  let x_2351 : vec4<f32> = u_xlat7;
  let x_2353 : vec4<f32> = u_xlat0;
  let x_2355 : vec3<f32> = (vec3<f32>(x_2351.x, x_2351.y, x_2351.z) + vec3<f32>(x_2353.x, x_2353.z, x_2353.w));
  let x_2356 : vec4<f32> = u_xlat0;
  u_xlat0 = vec4<f32>(x_2355.x, x_2356.y, x_2355.y, x_2355.z);
  let x_2359 : f32 = u_xlat21.x;
  let x_2361 : f32 = u_xlat21.x;
  u_xlat21.x = (x_2359 * -(x_2361));
  let x_2366 : f32 = u_xlat21.x;
  u_xlat21.x = exp2(x_2366);
  let x_2369 : vec4<f32> = u_xlat0;
  let x_2373 : vec4<f32> = x_44.unity_FogColor;
  let x_2376 : vec3<f32> = (vec3<f32>(x_2369.x, x_2369.z, x_2369.w) + -(vec3<f32>(x_2373.x, x_2373.y, x_2373.z)));
  let x_2377 : vec4<f32> = u_xlat0;
  u_xlat0 = vec4<f32>(x_2376.x, x_2377.y, x_2376.y, x_2376.z);
  let x_2381 : vec2<f32> = u_xlat21;
  let x_2383 : vec4<f32> = u_xlat0;
  let x_2387 : vec4<f32> = x_44.unity_FogColor;
  let x_2389 : vec3<f32> = ((vec3<f32>(x_2381.x, x_2381.x, x_2381.x) * vec3<f32>(x_2383.x, x_2383.z, x_2383.w)) + vec3<f32>(x_2387.x, x_2387.y, x_2387.z));
  let x_2390 : vec4<f32> = SV_Target0;
  SV_Target0 = vec4<f32>(x_2389.x, x_2389.y, x_2389.z, x_2390.w);
  SV_Target0.w = 1.0f;
  return;
}

struct main_out {
  @location(0)
  SV_Target0_1 : vec4<f32>,
}

@fragment
fn main(@builtin(position) gl_FragCoord_param : vec4<f32>, @location(3) vs_INTERP3_param : vec4<f32>, @location(2) vs_INTERP2_param : vec4<f32>, @location(1) vs_INTERP1_param : vec3<f32>, @location(0) vs_INTERP0_param : vec3<f32>, @location(4) vs_INTERP4_param : vec2<f32>, @location(5) vs_INTERP8_param : vec4<f32>) -> main_out {
  gl_FragCoord = gl_FragCoord_param;
  vs_INTERP3 = vs_INTERP3_param;
  vs_INTERP2 = vs_INTERP2_param;
  vs_INTERP1 = vs_INTERP1_param;
  vs_INTERP0 = vs_INTERP0_param;
  vs_INTERP4 = vs_INTERP4_param;
  vs_INTERP8 = vs_INTERP8_param;
  main_1();
  return main_out(SV_Target0);
}

