type Arr = array<vec4<f32>, 2u>;

struct UnityPerDraw {
  unity_ObjectToWorld : mat4x4<f32>,
  unity_WorldToObject : mat4x4<f32>,
  unity_LODFade : vec4<f32>,
  unity_WorldTransformParams : vec4<f32>,
  unity_RenderingLayer : vec4<f32>,
  unity_LightData : vec4<f32>,
  unity_LightIndices : Arr,
  unity_ProbesOcclusion : vec4<f32>,
  unity_SpecCube0_HDR : vec4<f32>,
  unity_SpecCube1_HDR : vec4<f32>,
  unity_SpecCube0_BoxMax : vec4<f32>,
  unity_SpecCube0_BoxMin : vec4<f32>,
  unity_SpecCube0_ProbePosition : vec4<f32>,
  unity_SpecCube1_BoxMax : vec4<f32>,
  unity_SpecCube1_BoxMin : vec4<f32>,
  unity_SpecCube1_ProbePosition : vec4<f32>,
  unity_LightmapST : vec4<f32>,
  unity_DynamicLightmapST : vec4<f32>,
  unity_SHAr : vec4<f32>,
  unity_SHAg : vec4<f32>,
  unity_SHAb : vec4<f32>,
  unity_SHBr : vec4<f32>,
  unity_SHBg : vec4<f32>,
  unity_SHBb : vec4<f32>,
  unity_SHC : vec4<f32>,
  unity_RendererBounds_Min : vec4<f32>,
  unity_RendererBounds_Max : vec4<f32>,
  unity_MatrixPreviousM : mat4x4<f32>,
  unity_MatrixPreviousMI : mat4x4<f32>,
  unity_MotionVectorsParams : vec4<f32>,
  unity_SpriteColor : vec4<f32>,
  unity_SpriteProps : vec4<f32>,
}

struct PGlobals {
  x_ScaledScreenParams : vec4<f32>,
  x_GlobalMipBias : vec2<f32>,
  x_AlphaToMaskAvailable : f32,
  @size(4)
  padding : u32,
  x_MainLightPosition : vec4<f32>,
  x_MainLightColor : vec4<f32>,
  x_AmbientOcclusionParam : vec4<f32>,
  x_AdditionalLightsCount : vec4<f32>,
  x_WorldSpaceCameraPos : vec3<f32>,
  @size(4)
  padding_1 : u32,
  unity_OrthoParams : vec4<f32>,
  x_ScaleBiasRt : vec4<f32>,
  unity_MatrixV : mat4x4<f32>,
}

struct UnityPerMaterial {
  Texture2D_B222E8F_TexelSize : vec4<f32>,
  Color_C30C7CA3 : vec4<f32>,
  Texture2D_D9BFD5F1_TexelSize : vec4<f32>,
}

type Arr_1 = array<mat4x4<f32>, 5u>;

struct MainLightShadows {
  x_MainLightWorldToShadow : Arr_1,
  x_CascadeShadowSplitSpheres0 : vec4<f32>,
  x_CascadeShadowSplitSpheres1 : vec4<f32>,
  x_CascadeShadowSplitSpheres2 : vec4<f32>,
  x_CascadeShadowSplitSpheres3 : vec4<f32>,
  x_CascadeShadowSplitSphereRadii : vec4<f32>,
  x_MainLightShadowOffset0 : vec4<f32>,
  x_MainLightShadowOffset1 : vec4<f32>,
  x_MainLightShadowParams : vec4<f32>,
  x_MainLightShadowmapSize : vec4<f32>,
}

type Arr_2 = array<vec4<f32>, 256u>;

type Arr_3 = array<vec4<f32>, 256u>;

type Arr_4 = array<vec4<f32>, 256u>;

type Arr_5 = array<vec4<f32>, 256u>;

type Arr_6 = array<vec4<f32>, 256u>;

struct strided_arr {
  @size(16)
  el : f32,
}

type Arr_7 = array<strided_arr, 256u>;

struct AdditionalLights {
  x_AdditionalLightsPosition : Arr_6,
  x_AdditionalLightsColor : Arr_6,
  x_AdditionalLightsAttenuation : Arr_6,
  x_AdditionalLightsSpotDir : Arr_6,
  x_AdditionalLightsOcclusionProbes : Arr_6,
  x_AdditionalLightsLayerMasks : Arr_7,
}

var<private> gl_FragCoord : vec4<f32>;

var<private> vs_INTERP1 : vec3<f32>;

var<private> vs_INTERP2 : vec4<f32>;

@group(1) @binding(2) var<uniform> x_60 : UnityPerDraw;

@group(0) @binding(3) var Texture2D_B222E8F : texture_2d<f32>;

@group(0) @binding(8) var samplerTexture2D_B222E8F : sampler;

var<private> vs_INTERP3 : vec4<f32>;

@group(1) @binding(0) var<uniform> x_139 : PGlobals;

@group(1) @binding(4) var<uniform> x_149 : UnityPerMaterial;

@group(0) @binding(4) var Texture2D_D9BFD5F1 : texture_2d<f32>;

@group(0) @binding(9) var samplerTexture2D_D9BFD5F1 : sampler;

var<private> vs_INTERP4 : vec4<f32>;

var<private> vs_INTERP0 : vec3<f32>;

@group(1) @binding(3) var<uniform> x_253 : MainLightShadows;

@group(0) @binding(2) var x_MainLightShadowmapTexture : texture_depth_2d;

@group(0) @binding(7) var sampler_MainLightShadowmapTexture : sampler_comparison;

@group(0) @binding(1) var x_ScreenSpaceOcclusionTexture : texture_2d<f32>;

@group(0) @binding(6) var sampler_ScreenSpaceOcclusionTexture : sampler;

@group(0) @binding(0) var unity_SpecCube0 : texture_cube<f32>;

@group(0) @binding(5) var samplerunity_SpecCube0 : sampler;

@group(1) @binding(1) var<uniform> x_3694 : AdditionalLights;

var<private> SV_Target0 : vec4<f32>;

fn main_1() {
  var hlslcc_FragCoord : vec4<f32>;
  var u_xlat0 : vec3<f32>;
  var u_xlatb22 : vec2<bool>;
  var u_xlat22 : vec3<f32>;
  var u_xlat1 : vec3<f32>;
  var u_xlat2 : vec4<f32>;
  var u_xlat3 : vec4<f32>;
  var u_xlat4 : vec4<f32>;
  var u_xlat5 : vec3<f32>;
  var u_xlat6 : vec4<f32>;
  var u_xlat7 : vec4<f32>;
  var u_xlat28 : vec3<f32>;
  var u_xlat8 : vec4<f32>;
  var u_xlatb2 : vec4<bool>;
  var u_xlatu0 : u32;
  var u_xlati0 : i32;
  var u_xlatb0 : bool;
  var u_xlatb67 : bool;
  var txVec0 : vec3<f32>;
  var txVec1 : vec3<f32>;
  var txVec2 : vec3<f32>;
  var txVec3 : vec3<f32>;
  var u_xlat67 : f32;
  var u_xlatb68 : bool;
  var u_xlat47 : vec2<f32>;
  var u_xlat52 : vec2<f32>;
  var u_xlat9 : vec4<f32>;
  var u_xlat10 : vec4<f32>;
  var u_xlat11 : vec4<f32>;
  var u_xlat12 : vec4<f32>;
  var u_xlat13 : vec4<f32>;
  var u_xlat14 : vec4<f32>;
  var u_xlat68 : f32;
  var txVec4 : vec3<f32>;
  var txVec5 : vec3<f32>;
  var u_xlat25 : vec3<f32>;
  var txVec6 : vec3<f32>;
  var txVec7 : vec3<f32>;
  var txVec8 : vec3<f32>;
  var txVec9 : vec3<f32>;
  var txVec10 : vec3<f32>;
  var txVec11 : vec3<f32>;
  var txVec12 : vec3<f32>;
  var u_xlat29 : vec3<f32>;
  var u_xlat15 : vec4<f32>;
  var u_xlat16 : vec4<f32>;
  var u_xlat30 : vec2<f32>;
  var u_xlat58 : vec2<f32>;
  var u_xlat53 : vec2<f32>;
  var u_xlat17 : vec4<f32>;
  var u_xlat18 : vec4<f32>;
  var u_xlat19 : vec4<f32>;
  var txVec13 : vec3<f32>;
  var txVec14 : vec3<f32>;
  var u_xlat71 : f32;
  var txVec15 : vec3<f32>;
  var txVec16 : vec3<f32>;
  var txVec17 : vec3<f32>;
  var txVec18 : vec3<f32>;
  var txVec19 : vec3<f32>;
  var txVec20 : vec3<f32>;
  var txVec21 : vec3<f32>;
  var txVec22 : vec3<f32>;
  var txVec23 : vec3<f32>;
  var txVec24 : vec3<f32>;
  var txVec25 : vec3<f32>;
  var txVec26 : vec3<f32>;
  var txVec27 : vec3<f32>;
  var txVec28 : vec3<f32>;
  var txVec29 : vec3<f32>;
  var u_xlatb3 : bool;
  var u_xlatb25 : bool;
  var u_xlat23 : vec3<f32>;
  var x_1774 : f32;
  var u_xlat69 : f32;
  var u_xlatb47 : bool;
  var x_1825 : f32;
  var u_xlat44 : f32;
  var x_1901 : f32;
  var x_1914 : f32;
  var x_1926 : f32;
  var u_xlat70 : f32;
  var u_xlat50 : f32;
  var txVec30 : vec3<f32>;
  var txVec31 : vec3<f32>;
  var txVec32 : vec3<f32>;
  var txVec33 : vec3<f32>;
  var u_xlatb72 : bool;
  var u_xlat54 : vec2<f32>;
  var u_xlat72 : f32;
  var txVec34 : vec3<f32>;
  var u_xlat73 : f32;
  var txVec35 : vec3<f32>;
  var txVec36 : vec3<f32>;
  var txVec37 : vec3<f32>;
  var txVec38 : vec3<f32>;
  var txVec39 : vec3<f32>;
  var txVec40 : vec3<f32>;
  var txVec41 : vec3<f32>;
  var txVec42 : vec3<f32>;
  var u_xlat31 : vec3<f32>;
  var u_xlat32 : vec2<f32>;
  var u_xlat60 : vec2<f32>;
  var u_xlat55 : vec2<f32>;
  var u_xlat20 : vec4<f32>;
  var u_xlat21 : vec4<f32>;
  var txVec43 : vec3<f32>;
  var txVec44 : vec3<f32>;
  var txVec45 : vec3<f32>;
  var txVec46 : vec3<f32>;
  var txVec47 : vec3<f32>;
  var txVec48 : vec3<f32>;
  var txVec49 : vec3<f32>;
  var txVec50 : vec3<f32>;
  var txVec51 : vec3<f32>;
  var txVec52 : vec3<f32>;
  var txVec53 : vec3<f32>;
  var txVec54 : vec3<f32>;
  var txVec55 : vec3<f32>;
  var txVec56 : vec3<f32>;
  var txVec57 : vec3<f32>;
  var txVec58 : vec3<f32>;
  var txVec59 : vec3<f32>;
  var x_3294 : f32;
  var u_xlat24 : f32;
  var u_xlatu_loop_1 : u32;
  var u_xlatu25 : u32;
  var u_xlati69 : i32;
  var indexable : array<vec4<u32>, 4u>;
  var u_xlati25 : i32;
  var u_xlat_precise_vec4 : vec4<f32>;
  var u_xlat_precise_ivec4 : vec4<i32>;
  var u_xlat_precise_bvec4 : vec4<bool>;
  var u_xlat_precise_uvec4 : vec4<u32>;
  let x_13 : vec4<f32> = gl_FragCoord;
  let x_14 : vec3<f32> = vec3<f32>(x_13.x, x_13.y, x_13.z);
  let x_20 : f32 = gl_FragCoord.w;
  hlslcc_FragCoord = vec4<f32>(x_14.x, x_14.y, x_14.z, (1.0f / x_20));
  let x_30 : vec3<f32> = vs_INTERP1;
  let x_31 : vec3<f32> = vs_INTERP1;
  u_xlat0.x = dot(x_30, x_31);
  let x_37 : f32 = u_xlat0.x;
  u_xlat0.x = sqrt(x_37);
  let x_41 : f32 = u_xlat0.x;
  u_xlat0.x = (1.0f / x_41);
  let x_51 : f32 = vs_INTERP2.w;
  u_xlatb22.x = (0.0f < x_51);
  let x_65 : f32 = x_60.unity_WorldTransformParams.w;
  u_xlatb22.y = (x_65 >= 0.0f);
  let x_71 : bool = u_xlatb22.x;
  u_xlat22.x = select(-1.0f, 1.0f, x_71);
  let x_76 : bool = u_xlatb22.y;
  u_xlat22.y = select(-1.0f, 1.0f, x_76);
  let x_80 : f32 = u_xlat22.y;
  let x_82 : f32 = u_xlat22.x;
  u_xlat22.x = (x_80 * x_82);
  let x_86 : vec3<f32> = vs_INTERP1;
  let x_88 : vec4<f32> = vs_INTERP2;
  u_xlat1 = (vec3<f32>(x_86.z, x_86.x, x_86.y) * vec3<f32>(x_88.y, x_88.z, x_88.x));
  let x_91 : vec3<f32> = vs_INTERP1;
  let x_93 : vec4<f32> = vs_INTERP2;
  let x_96 : vec3<f32> = u_xlat1;
  u_xlat1 = ((vec3<f32>(x_91.y, x_91.z, x_91.x) * vec3<f32>(x_93.z, x_93.x, x_93.y)) + -(x_96));
  let x_99 : vec3<f32> = u_xlat22;
  let x_101 : vec3<f32> = u_xlat1;
  u_xlat22 = (vec3<f32>(x_99.x, x_99.x, x_99.x) * x_101);
  let x_103 : vec3<f32> = u_xlat0;
  let x_105 : vec3<f32> = vs_INTERP1;
  u_xlat1 = (vec3<f32>(x_103.x, x_103.x, x_103.x) * x_105);
  let x_108 : vec3<f32> = u_xlat0;
  let x_110 : vec4<f32> = vs_INTERP2;
  let x_112 : vec3<f32> = (vec3<f32>(x_108.x, x_108.x, x_108.x) * vec3<f32>(x_110.x, x_110.y, x_110.z));
  let x_113 : vec4<f32> = u_xlat2;
  u_xlat2 = vec4<f32>(x_112.x, x_112.y, x_112.z, x_113.w);
  let x_116 : vec3<f32> = u_xlat22;
  let x_117 : vec3<f32> = u_xlat0;
  let x_119 : vec3<f32> = (x_116 * vec3<f32>(x_117.x, x_117.x, x_117.x));
  let x_120 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_119.x, x_119.y, x_119.z, x_120.w);
  let x_135 : vec4<f32> = vs_INTERP3;
  let x_142 : f32 = x_139.x_GlobalMipBias.x;
  let x_143 : vec4<f32> = textureSampleBias(Texture2D_B222E8F, samplerTexture2D_B222E8F, vec2<f32>(x_135.x, x_135.y), x_142);
  u_xlat4 = x_143;
  let x_145 : vec4<f32> = u_xlat4;
  let x_152 : vec4<f32> = x_149.Color_C30C7CA3;
  u_xlat5 = (vec3<f32>(x_145.x, x_145.y, x_145.z) * vec3<f32>(x_152.x, x_152.y, x_152.z));
  let x_161 : vec4<f32> = vs_INTERP3;
  let x_164 : f32 = x_139.x_GlobalMipBias.x;
  let x_165 : vec4<f32> = textureSampleBias(Texture2D_D9BFD5F1, samplerTexture2D_D9BFD5F1, vec2<f32>(x_161.x, x_161.y), x_164);
  u_xlat6 = vec4<f32>(x_165.w, x_165.x, x_165.y, x_165.z);
  let x_168 : vec4<f32> = u_xlat6;
  u_xlat7 = ((vec4<f32>(x_168.y, x_168.z, x_168.w, x_168.x) * vec4<f32>(2.0f, 2.0f, 2.0f, 2.0f)) + vec4<f32>(-1.0f, -1.0f, -1.0f, -1.0f));
  let x_175 : vec4<f32> = u_xlat7;
  let x_176 : vec4<f32> = u_xlat7;
  u_xlat0.x = dot(x_175, x_176);
  let x_180 : f32 = u_xlat0.x;
  u_xlat0.x = inverseSqrt(x_180);
  let x_184 : vec3<f32> = u_xlat0;
  let x_186 : vec4<f32> = u_xlat7;
  u_xlat28 = (vec3<f32>(x_184.x, x_184.x, x_184.x) * vec3<f32>(x_186.x, x_186.y, x_186.z));
  let x_191 : f32 = vs_INTERP4.y;
  u_xlat0.x = (x_191 * 200.0f);
  let x_196 : f32 = u_xlat0.x;
  u_xlat0.x = min(x_196, 1.0f);
  let x_199 : vec3<f32> = u_xlat0;
  let x_201 : vec4<f32> = u_xlat4;
  let x_203 : vec3<f32> = (vec3<f32>(x_199.x, x_199.x, x_199.x) * vec3<f32>(x_201.x, x_201.y, x_201.z));
  let x_204 : vec4<f32> = u_xlat4;
  u_xlat4 = vec4<f32>(x_203.x, x_203.y, x_203.z, x_204.w);
  let x_206 : vec4<f32> = u_xlat3;
  let x_208 : vec3<f32> = u_xlat28;
  let x_210 : vec3<f32> = (vec3<f32>(x_206.x, x_206.y, x_206.z) * vec3<f32>(x_208.y, x_208.y, x_208.y));
  let x_211 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_210.x, x_210.y, x_210.z, x_211.w);
  let x_213 : vec3<f32> = u_xlat28;
  let x_215 : vec4<f32> = u_xlat2;
  let x_218 : vec4<f32> = u_xlat3;
  let x_220 : vec3<f32> = ((vec3<f32>(x_213.x, x_213.x, x_213.x) * vec3<f32>(x_215.x, x_215.y, x_215.z)) + vec3<f32>(x_218.x, x_218.y, x_218.z));
  let x_221 : vec4<f32> = u_xlat2;
  u_xlat2 = vec4<f32>(x_220.x, x_220.y, x_220.z, x_221.w);
  let x_223 : vec3<f32> = u_xlat28;
  let x_225 : vec3<f32> = u_xlat1;
  let x_227 : vec4<f32> = u_xlat2;
  u_xlat1 = ((vec3<f32>(x_223.z, x_223.z, x_223.z) * x_225) + vec3<f32>(x_227.x, x_227.y, x_227.z));
  let x_230 : vec3<f32> = u_xlat1;
  let x_231 : vec3<f32> = u_xlat1;
  u_xlat0.x = dot(x_230, x_231);
  let x_235 : f32 = u_xlat0.x;
  u_xlat0.x = max(x_235, 1.17549435e-37f);
  let x_240 : f32 = u_xlat0.x;
  u_xlat0.x = inverseSqrt(x_240);
  let x_243 : vec3<f32> = u_xlat0;
  let x_245 : vec3<f32> = u_xlat1;
  u_xlat1 = (vec3<f32>(x_243.x, x_243.x, x_243.x) * x_245);
  let x_248 : vec3<f32> = vs_INTERP0;
  let x_255 : vec4<f32> = x_253.x_CascadeShadowSplitSpheres0;
  let x_258 : vec3<f32> = (x_248 + -(vec3<f32>(x_255.x, x_255.y, x_255.z)));
  let x_259 : vec4<f32> = u_xlat2;
  u_xlat2 = vec4<f32>(x_258.x, x_258.y, x_258.z, x_259.w);
  let x_261 : vec3<f32> = vs_INTERP0;
  let x_264 : vec4<f32> = x_253.x_CascadeShadowSplitSpheres1;
  let x_267 : vec3<f32> = (x_261 + -(vec3<f32>(x_264.x, x_264.y, x_264.z)));
  let x_268 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_267.x, x_267.y, x_267.z, x_268.w);
  let x_270 : vec3<f32> = vs_INTERP0;
  let x_272 : vec4<f32> = x_253.x_CascadeShadowSplitSpheres2;
  let x_275 : vec3<f32> = (x_270 + -(vec3<f32>(x_272.x, x_272.y, x_272.z)));
  let x_276 : vec4<f32> = u_xlat7;
  u_xlat7 = vec4<f32>(x_275.x, x_275.y, x_275.z, x_276.w);
  let x_279 : vec3<f32> = vs_INTERP0;
  let x_282 : vec4<f32> = x_253.x_CascadeShadowSplitSpheres3;
  let x_285 : vec3<f32> = (x_279 + -(vec3<f32>(x_282.x, x_282.y, x_282.z)));
  let x_286 : vec4<f32> = u_xlat8;
  u_xlat8 = vec4<f32>(x_285.x, x_285.y, x_285.z, x_286.w);
  let x_288 : vec4<f32> = u_xlat2;
  let x_290 : vec4<f32> = u_xlat2;
  u_xlat2.x = dot(vec3<f32>(x_288.x, x_288.y, x_288.z), vec3<f32>(x_290.x, x_290.y, x_290.z));
  let x_294 : vec4<f32> = u_xlat3;
  let x_296 : vec4<f32> = u_xlat3;
  u_xlat2.y = dot(vec3<f32>(x_294.x, x_294.y, x_294.z), vec3<f32>(x_296.x, x_296.y, x_296.z));
  let x_300 : vec4<f32> = u_xlat7;
  let x_302 : vec4<f32> = u_xlat7;
  u_xlat2.z = dot(vec3<f32>(x_300.x, x_300.y, x_300.z), vec3<f32>(x_302.x, x_302.y, x_302.z));
  let x_306 : vec4<f32> = u_xlat8;
  let x_308 : vec4<f32> = u_xlat8;
  u_xlat2.w = dot(vec3<f32>(x_306.x, x_306.y, x_306.z), vec3<f32>(x_308.x, x_308.y, x_308.z));
  let x_315 : vec4<f32> = u_xlat2;
  let x_318 : vec4<f32> = x_253.x_CascadeShadowSplitSphereRadii;
  u_xlatb2 = (x_315 < x_318);
  let x_321 : bool = u_xlatb2.x;
  u_xlat3.x = select(0.0f, 1.0f, x_321);
  let x_325 : bool = u_xlatb2.y;
  u_xlat3.y = select(0.0f, 1.0f, x_325);
  let x_329 : bool = u_xlatb2.z;
  u_xlat3.z = select(0.0f, 1.0f, x_329);
  let x_333 : bool = u_xlatb2.w;
  u_xlat3.w = select(0.0f, 1.0f, x_333);
  let x_337 : bool = u_xlatb2.x;
  u_xlat2.x = select(-0.0f, -1.0f, x_337);
  let x_342 : bool = u_xlatb2.y;
  u_xlat2.y = select(-0.0f, -1.0f, x_342);
  let x_346 : bool = u_xlatb2.z;
  u_xlat2.z = select(-0.0f, -1.0f, x_346);
  let x_349 : vec4<f32> = u_xlat2;
  let x_351 : vec4<f32> = u_xlat3;
  let x_353 : vec3<f32> = (vec3<f32>(x_349.x, x_349.y, x_349.z) + vec3<f32>(x_351.y, x_351.z, x_351.w));
  let x_354 : vec4<f32> = u_xlat2;
  u_xlat2 = vec4<f32>(x_353.x, x_353.y, x_353.z, x_354.w);
  let x_356 : vec4<f32> = u_xlat2;
  let x_359 : vec3<f32> = max(vec3<f32>(x_356.x, x_356.y, x_356.z), vec3<f32>(0.0f, 0.0f, 0.0f));
  let x_360 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_360.x, x_359.x, x_359.y, x_359.z);
  let x_362 : vec4<f32> = u_xlat3;
  u_xlat0.x = dot(x_362, vec4<f32>(4.0f, 3.0f, 2.0f, 1.0f));
  let x_369 : f32 = u_xlat0.x;
  u_xlat0.x = (-(x_369) + 4.0f);
  let x_376 : f32 = u_xlat0.x;
  u_xlatu0 = u32(x_376);
  let x_380 : u32 = u_xlatu0;
  u_xlati0 = (bitcast<i32>(x_380) << bitcast<u32>(2i));
  let x_383 : vec3<f32> = vs_INTERP0;
  let x_386 : i32 = u_xlati0;
  let x_389 : i32 = u_xlati0;
  let x_393 : vec4<f32> = x_253.x_MainLightWorldToShadow[((x_386 + 1i) / 4i)][((x_389 + 1i) % 4i)];
  let x_395 : vec3<f32> = (vec3<f32>(x_383.y, x_383.y, x_383.y) * vec3<f32>(x_393.x, x_393.y, x_393.z));
  let x_396 : vec4<f32> = u_xlat2;
  u_xlat2 = vec4<f32>(x_395.x, x_395.y, x_395.z, x_396.w);
  let x_398 : i32 = u_xlati0;
  let x_400 : i32 = u_xlati0;
  let x_403 : vec4<f32> = x_253.x_MainLightWorldToShadow[(x_398 / 4i)][(x_400 % 4i)];
  let x_405 : vec3<f32> = vs_INTERP0;
  let x_408 : vec4<f32> = u_xlat2;
  let x_410 : vec3<f32> = ((vec3<f32>(x_403.x, x_403.y, x_403.z) * vec3<f32>(x_405.x, x_405.x, x_405.x)) + vec3<f32>(x_408.x, x_408.y, x_408.z));
  let x_411 : vec4<f32> = u_xlat2;
  u_xlat2 = vec4<f32>(x_410.x, x_410.y, x_410.z, x_411.w);
  let x_413 : i32 = u_xlati0;
  let x_416 : i32 = u_xlati0;
  let x_420 : vec4<f32> = x_253.x_MainLightWorldToShadow[((x_413 + 2i) / 4i)][((x_416 + 2i) % 4i)];
  let x_422 : vec3<f32> = vs_INTERP0;
  let x_425 : vec4<f32> = u_xlat2;
  let x_427 : vec3<f32> = ((vec3<f32>(x_420.x, x_420.y, x_420.z) * vec3<f32>(x_422.z, x_422.z, x_422.z)) + vec3<f32>(x_425.x, x_425.y, x_425.z));
  let x_428 : vec4<f32> = u_xlat2;
  u_xlat2 = vec4<f32>(x_427.x, x_427.y, x_427.z, x_428.w);
  let x_430 : vec4<f32> = u_xlat2;
  let x_432 : i32 = u_xlati0;
  let x_435 : i32 = u_xlati0;
  let x_439 : vec4<f32> = x_253.x_MainLightWorldToShadow[((x_432 + 3i) / 4i)][((x_435 + 3i) % 4i)];
  let x_441 : vec3<f32> = (vec3<f32>(x_430.x, x_430.y, x_430.z) + vec3<f32>(x_439.x, x_439.y, x_439.z));
  let x_442 : vec4<f32> = u_xlat2;
  u_xlat2 = vec4<f32>(x_441.x, x_441.y, x_441.z, x_442.w);
  let x_447 : f32 = x_253.x_MainLightShadowParams.y;
  u_xlatb0 = (0.0f < x_447);
  let x_449 : bool = u_xlatb0;
  if (x_449) {
    let x_454 : f32 = x_253.x_MainLightShadowParams.y;
    u_xlatb67 = (x_454 == 1.0f);
    let x_456 : bool = u_xlatb67;
    if (x_456) {
      let x_459 : vec4<f32> = u_xlat2;
      let x_463 : vec4<f32> = x_253.x_MainLightShadowOffset0;
      u_xlat3 = (vec4<f32>(x_459.x, x_459.y, x_459.x, x_459.y) + x_463);
      let x_466 : vec4<f32> = u_xlat3;
      let x_467 : vec2<f32> = vec2<f32>(x_466.x, x_466.y);
      let x_469 : f32 = u_xlat2.z;
      txVec0 = vec3<f32>(x_467.x, x_467.y, x_469);
      let x_481 : vec3<f32> = txVec0;
      let x_483 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_481.xy, x_481.z);
      u_xlat7.x = x_483;
      let x_486 : vec4<f32> = u_xlat3;
      let x_487 : vec2<f32> = vec2<f32>(x_486.z, x_486.w);
      let x_489 : f32 = u_xlat2.z;
      txVec1 = vec3<f32>(x_487.x, x_487.y, x_489);
      let x_496 : vec3<f32> = txVec1;
      let x_498 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_496.xy, x_496.z);
      u_xlat7.y = x_498;
      let x_500 : vec4<f32> = u_xlat2;
      let x_504 : vec4<f32> = x_253.x_MainLightShadowOffset1;
      u_xlat3 = (vec4<f32>(x_500.x, x_500.y, x_500.x, x_500.y) + x_504);
      let x_507 : vec4<f32> = u_xlat3;
      let x_508 : vec2<f32> = vec2<f32>(x_507.x, x_507.y);
      let x_510 : f32 = u_xlat2.z;
      txVec2 = vec3<f32>(x_508.x, x_508.y, x_510);
      let x_517 : vec3<f32> = txVec2;
      let x_519 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_517.xy, x_517.z);
      u_xlat7.z = x_519;
      let x_522 : vec4<f32> = u_xlat3;
      let x_523 : vec2<f32> = vec2<f32>(x_522.z, x_522.w);
      let x_525 : f32 = u_xlat2.z;
      txVec3 = vec3<f32>(x_523.x, x_523.y, x_525);
      let x_532 : vec3<f32> = txVec3;
      let x_534 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_532.xy, x_532.z);
      u_xlat7.w = x_534;
      let x_537 : vec4<f32> = u_xlat7;
      u_xlat67 = dot(x_537, vec4<f32>(0.25f, 0.25f, 0.25f, 0.25f));
    } else {
      let x_544 : f32 = x_253.x_MainLightShadowParams.y;
      u_xlatb68 = (x_544 == 2.0f);
      let x_546 : bool = u_xlatb68;
      if (x_546) {
        let x_549 : vec4<f32> = u_xlat2;
        let x_553 : vec4<f32> = x_253.x_MainLightShadowmapSize;
        let x_558 : vec2<f32> = ((vec2<f32>(x_549.x, x_549.y) * vec2<f32>(x_553.z, x_553.w)) + vec2<f32>(0.5f, 0.5f));
        let x_559 : vec4<f32> = u_xlat3;
        u_xlat3 = vec4<f32>(x_558.x, x_558.y, x_559.z, x_559.w);
        let x_561 : vec4<f32> = u_xlat3;
        let x_563 : vec2<f32> = floor(vec2<f32>(x_561.x, x_561.y));
        let x_564 : vec4<f32> = u_xlat3;
        u_xlat3 = vec4<f32>(x_563.x, x_563.y, x_564.z, x_564.w);
        let x_568 : vec4<f32> = u_xlat2;
        let x_571 : vec4<f32> = x_253.x_MainLightShadowmapSize;
        let x_574 : vec4<f32> = u_xlat3;
        u_xlat47 = ((vec2<f32>(x_568.x, x_568.y) * vec2<f32>(x_571.z, x_571.w)) + -(vec2<f32>(x_574.x, x_574.y)));
        let x_578 : vec2<f32> = u_xlat47;
        u_xlat7 = (vec4<f32>(x_578.x, x_578.x, x_578.y, x_578.y) + vec4<f32>(0.5f, 1.0f, 0.5f, 1.0f));
        let x_582 : vec4<f32> = u_xlat7;
        let x_584 : vec4<f32> = u_xlat7;
        u_xlat8 = (vec4<f32>(x_582.x, x_582.x, x_582.z, x_582.z) * vec4<f32>(x_584.x, x_584.x, x_584.z, x_584.z));
        let x_587 : vec4<f32> = u_xlat8;
        let x_591 : vec2<f32> = (vec2<f32>(x_587.y, x_587.w) * vec2<f32>(0.079999998f, 0.079999998f));
        let x_592 : vec4<f32> = u_xlat7;
        u_xlat7 = vec4<f32>(x_591.x, x_592.y, x_591.y, x_592.w);
        let x_594 : vec4<f32> = u_xlat8;
        let x_597 : vec2<f32> = u_xlat47;
        let x_599 : vec2<f32> = ((vec2<f32>(x_594.x, x_594.z) * vec2<f32>(0.5f, 0.5f)) + -(x_597));
        let x_600 : vec4<f32> = u_xlat8;
        u_xlat8 = vec4<f32>(x_599.x, x_599.y, x_600.z, x_600.w);
        let x_603 : vec2<f32> = u_xlat47;
        u_xlat52 = (-(x_603) + vec2<f32>(1.0f, 1.0f));
        let x_608 : vec2<f32> = u_xlat47;
        let x_610 : vec2<f32> = min(x_608, vec2<f32>(0.0f, 0.0f));
        let x_611 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_610.x, x_610.y, x_611.z, x_611.w);
        let x_613 : vec4<f32> = u_xlat9;
        let x_616 : vec4<f32> = u_xlat9;
        let x_619 : vec2<f32> = u_xlat52;
        let x_620 : vec2<f32> = ((-(vec2<f32>(x_613.x, x_613.y)) * vec2<f32>(x_616.x, x_616.y)) + x_619);
        let x_621 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_620.x, x_620.y, x_621.z, x_621.w);
        let x_623 : vec2<f32> = u_xlat47;
        u_xlat47 = max(x_623, vec2<f32>(0.0f, 0.0f));
        let x_625 : vec2<f32> = u_xlat47;
        let x_627 : vec2<f32> = u_xlat47;
        let x_629 : vec4<f32> = u_xlat7;
        u_xlat47 = ((-(x_625) * x_627) + vec2<f32>(x_629.y, x_629.w));
        let x_632 : vec4<f32> = u_xlat9;
        let x_634 : vec2<f32> = (vec2<f32>(x_632.x, x_632.y) + vec2<f32>(1.0f, 1.0f));
        let x_635 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_634.x, x_634.y, x_635.z, x_635.w);
        let x_637 : vec2<f32> = u_xlat47;
        u_xlat47 = (x_637 + vec2<f32>(1.0f, 1.0f));
        let x_640 : vec4<f32> = u_xlat8;
        let x_644 : vec2<f32> = (vec2<f32>(x_640.x, x_640.y) * vec2<f32>(0.159999996f, 0.159999996f));
        let x_645 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_644.x, x_644.y, x_645.z, x_645.w);
        let x_647 : vec2<f32> = u_xlat52;
        let x_648 : vec2<f32> = (x_647 * vec2<f32>(0.159999996f, 0.159999996f));
        let x_649 : vec4<f32> = u_xlat8;
        u_xlat8 = vec4<f32>(x_648.x, x_648.y, x_649.z, x_649.w);
        let x_651 : vec4<f32> = u_xlat9;
        let x_653 : vec2<f32> = (vec2<f32>(x_651.x, x_651.y) * vec2<f32>(0.159999996f, 0.159999996f));
        let x_654 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_653.x, x_653.y, x_654.z, x_654.w);
        let x_657 : vec2<f32> = u_xlat47;
        let x_658 : vec2<f32> = (x_657 * vec2<f32>(0.159999996f, 0.159999996f));
        let x_659 : vec4<f32> = u_xlat11;
        u_xlat11 = vec4<f32>(x_658.x, x_658.y, x_659.z, x_659.w);
        let x_661 : vec4<f32> = u_xlat7;
        u_xlat47 = (vec2<f32>(x_661.y, x_661.w) * vec2<f32>(0.159999996f, 0.159999996f));
        let x_665 : f32 = u_xlat9.x;
        u_xlat10.z = x_665;
        let x_668 : f32 = u_xlat47.x;
        u_xlat10.w = x_668;
        let x_671 : f32 = u_xlat11.x;
        u_xlat8.z = x_671;
        let x_674 : f32 = u_xlat7.x;
        u_xlat8.w = x_674;
        let x_677 : vec4<f32> = u_xlat8;
        let x_679 : vec4<f32> = u_xlat10;
        u_xlat12 = (vec4<f32>(x_677.z, x_677.w, x_677.x, x_677.z) + vec4<f32>(x_679.z, x_679.w, x_679.x, x_679.z));
        let x_683 : f32 = u_xlat10.y;
        u_xlat9.z = x_683;
        let x_686 : f32 = u_xlat47.y;
        u_xlat9.w = x_686;
        let x_689 : f32 = u_xlat8.y;
        u_xlat11.z = x_689;
        let x_692 : f32 = u_xlat7.z;
        u_xlat11.w = x_692;
        let x_694 : vec4<f32> = u_xlat9;
        let x_696 : vec4<f32> = u_xlat11;
        let x_698 : vec3<f32> = (vec3<f32>(x_694.z, x_694.y, x_694.w) + vec3<f32>(x_696.z, x_696.y, x_696.w));
        let x_699 : vec4<f32> = u_xlat7;
        u_xlat7 = vec4<f32>(x_698.x, x_698.y, x_698.z, x_699.w);
        let x_701 : vec4<f32> = u_xlat8;
        let x_703 : vec4<f32> = u_xlat12;
        let x_705 : vec3<f32> = (vec3<f32>(x_701.x, x_701.z, x_701.w) / vec3<f32>(x_703.z, x_703.w, x_703.y));
        let x_706 : vec4<f32> = u_xlat8;
        u_xlat8 = vec4<f32>(x_705.x, x_705.y, x_705.z, x_706.w);
        let x_708 : vec4<f32> = u_xlat8;
        let x_714 : vec3<f32> = (vec3<f32>(x_708.x, x_708.y, x_708.z) + vec3<f32>(-2.5f, -0.5f, 1.5f));
        let x_715 : vec4<f32> = u_xlat8;
        u_xlat8 = vec4<f32>(x_714.x, x_714.y, x_714.z, x_715.w);
        let x_717 : vec4<f32> = u_xlat11;
        let x_719 : vec4<f32> = u_xlat7;
        let x_721 : vec3<f32> = (vec3<f32>(x_717.z, x_717.y, x_717.w) / vec3<f32>(x_719.x, x_719.y, x_719.z));
        let x_722 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_721.x, x_721.y, x_721.z, x_722.w);
        let x_724 : vec4<f32> = u_xlat9;
        let x_726 : vec3<f32> = (vec3<f32>(x_724.x, x_724.y, x_724.z) + vec3<f32>(-2.5f, -0.5f, 1.5f));
        let x_727 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_726.x, x_726.y, x_726.z, x_727.w);
        let x_729 : vec4<f32> = u_xlat8;
        let x_732 : vec4<f32> = x_253.x_MainLightShadowmapSize;
        let x_734 : vec3<f32> = (vec3<f32>(x_729.y, x_729.x, x_729.z) * vec3<f32>(x_732.x, x_732.x, x_732.x));
        let x_735 : vec4<f32> = u_xlat8;
        u_xlat8 = vec4<f32>(x_734.x, x_734.y, x_734.z, x_735.w);
        let x_737 : vec4<f32> = u_xlat9;
        let x_740 : vec4<f32> = x_253.x_MainLightShadowmapSize;
        let x_742 : vec3<f32> = (vec3<f32>(x_737.x, x_737.y, x_737.z) * vec3<f32>(x_740.y, x_740.y, x_740.y));
        let x_743 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_742.x, x_742.y, x_742.z, x_743.w);
        let x_746 : f32 = u_xlat9.x;
        u_xlat8.w = x_746;
        let x_748 : vec4<f32> = u_xlat3;
        let x_751 : vec4<f32> = x_253.x_MainLightShadowmapSize;
        let x_754 : vec4<f32> = u_xlat8;
        u_xlat10 = ((vec4<f32>(x_748.x, x_748.y, x_748.x, x_748.y) * vec4<f32>(x_751.x, x_751.y, x_751.x, x_751.y)) + vec4<f32>(x_754.y, x_754.w, x_754.x, x_754.w));
        let x_757 : vec4<f32> = u_xlat3;
        let x_760 : vec4<f32> = x_253.x_MainLightShadowmapSize;
        let x_763 : vec4<f32> = u_xlat8;
        u_xlat47 = ((vec2<f32>(x_757.x, x_757.y) * vec2<f32>(x_760.x, x_760.y)) + vec2<f32>(x_763.z, x_763.w));
        let x_767 : f32 = u_xlat8.y;
        u_xlat9.w = x_767;
        let x_769 : vec4<f32> = u_xlat9;
        let x_770 : vec2<f32> = vec2<f32>(x_769.y, x_769.z);
        let x_771 : vec4<f32> = u_xlat8;
        u_xlat8 = vec4<f32>(x_771.x, x_770.x, x_771.z, x_770.y);
        let x_773 : vec4<f32> = u_xlat3;
        let x_776 : vec4<f32> = x_253.x_MainLightShadowmapSize;
        let x_779 : vec4<f32> = u_xlat8;
        u_xlat11 = ((vec4<f32>(x_773.x, x_773.y, x_773.x, x_773.y) * vec4<f32>(x_776.x, x_776.y, x_776.x, x_776.y)) + vec4<f32>(x_779.x, x_779.y, x_779.z, x_779.y));
        let x_782 : vec4<f32> = u_xlat3;
        let x_785 : vec4<f32> = x_253.x_MainLightShadowmapSize;
        let x_788 : vec4<f32> = u_xlat9;
        u_xlat9 = ((vec4<f32>(x_782.x, x_782.y, x_782.x, x_782.y) * vec4<f32>(x_785.x, x_785.y, x_785.x, x_785.y)) + vec4<f32>(x_788.w, x_788.y, x_788.w, x_788.z));
        let x_791 : vec4<f32> = u_xlat3;
        let x_794 : vec4<f32> = x_253.x_MainLightShadowmapSize;
        let x_797 : vec4<f32> = u_xlat8;
        u_xlat8 = ((vec4<f32>(x_791.x, x_791.y, x_791.x, x_791.y) * vec4<f32>(x_794.x, x_794.y, x_794.x, x_794.y)) + vec4<f32>(x_797.x, x_797.w, x_797.z, x_797.w));
        let x_801 : vec4<f32> = u_xlat7;
        let x_803 : vec4<f32> = u_xlat12;
        u_xlat13 = (vec4<f32>(x_801.x, x_801.x, x_801.x, x_801.y) * vec4<f32>(x_803.z, x_803.w, x_803.y, x_803.z));
        let x_807 : vec4<f32> = u_xlat7;
        let x_809 : vec4<f32> = u_xlat12;
        u_xlat14 = (vec4<f32>(x_807.y, x_807.y, x_807.z, x_807.z) * x_809);
        let x_813 : f32 = u_xlat7.z;
        let x_815 : f32 = u_xlat12.y;
        u_xlat68 = (x_813 * x_815);
        let x_818 : vec4<f32> = u_xlat10;
        let x_819 : vec2<f32> = vec2<f32>(x_818.x, x_818.y);
        let x_821 : f32 = u_xlat2.z;
        txVec4 = vec3<f32>(x_819.x, x_819.y, x_821);
        let x_828 : vec3<f32> = txVec4;
        let x_830 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_828.xy, x_828.z);
        u_xlat3.x = x_830;
        let x_833 : vec4<f32> = u_xlat10;
        let x_834 : vec2<f32> = vec2<f32>(x_833.z, x_833.w);
        let x_836 : f32 = u_xlat2.z;
        txVec5 = vec3<f32>(x_834.x, x_834.y, x_836);
        let x_844 : vec3<f32> = txVec5;
        let x_846 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_844.xy, x_844.z);
        u_xlat25.x = x_846;
        let x_849 : f32 = u_xlat25.x;
        let x_851 : f32 = u_xlat13.y;
        u_xlat25.x = (x_849 * x_851);
        let x_855 : f32 = u_xlat13.x;
        let x_857 : f32 = u_xlat3.x;
        let x_860 : f32 = u_xlat25.x;
        u_xlat3.x = ((x_855 * x_857) + x_860);
        let x_864 : vec2<f32> = u_xlat47;
        let x_866 : f32 = u_xlat2.z;
        txVec6 = vec3<f32>(x_864.x, x_864.y, x_866);
        let x_873 : vec3<f32> = txVec6;
        let x_875 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_873.xy, x_873.z);
        u_xlat25.x = x_875;
        let x_878 : f32 = u_xlat13.z;
        let x_880 : f32 = u_xlat25.x;
        let x_883 : f32 = u_xlat3.x;
        u_xlat3.x = ((x_878 * x_880) + x_883);
        let x_887 : vec4<f32> = u_xlat9;
        let x_888 : vec2<f32> = vec2<f32>(x_887.x, x_887.y);
        let x_890 : f32 = u_xlat2.z;
        txVec7 = vec3<f32>(x_888.x, x_888.y, x_890);
        let x_897 : vec3<f32> = txVec7;
        let x_899 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_897.xy, x_897.z);
        u_xlat25.x = x_899;
        let x_902 : f32 = u_xlat13.w;
        let x_904 : f32 = u_xlat25.x;
        let x_907 : f32 = u_xlat3.x;
        u_xlat3.x = ((x_902 * x_904) + x_907);
        let x_911 : vec4<f32> = u_xlat11;
        let x_912 : vec2<f32> = vec2<f32>(x_911.x, x_911.y);
        let x_914 : f32 = u_xlat2.z;
        txVec8 = vec3<f32>(x_912.x, x_912.y, x_914);
        let x_921 : vec3<f32> = txVec8;
        let x_923 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_921.xy, x_921.z);
        u_xlat25.x = x_923;
        let x_926 : f32 = u_xlat14.x;
        let x_928 : f32 = u_xlat25.x;
        let x_931 : f32 = u_xlat3.x;
        u_xlat3.x = ((x_926 * x_928) + x_931);
        let x_935 : vec4<f32> = u_xlat11;
        let x_936 : vec2<f32> = vec2<f32>(x_935.z, x_935.w);
        let x_938 : f32 = u_xlat2.z;
        txVec9 = vec3<f32>(x_936.x, x_936.y, x_938);
        let x_945 : vec3<f32> = txVec9;
        let x_947 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_945.xy, x_945.z);
        u_xlat25.x = x_947;
        let x_950 : f32 = u_xlat14.y;
        let x_952 : f32 = u_xlat25.x;
        let x_955 : f32 = u_xlat3.x;
        u_xlat3.x = ((x_950 * x_952) + x_955);
        let x_959 : vec4<f32> = u_xlat9;
        let x_960 : vec2<f32> = vec2<f32>(x_959.z, x_959.w);
        let x_962 : f32 = u_xlat2.z;
        txVec10 = vec3<f32>(x_960.x, x_960.y, x_962);
        let x_969 : vec3<f32> = txVec10;
        let x_971 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_969.xy, x_969.z);
        u_xlat25.x = x_971;
        let x_974 : f32 = u_xlat14.z;
        let x_976 : f32 = u_xlat25.x;
        let x_979 : f32 = u_xlat3.x;
        u_xlat3.x = ((x_974 * x_976) + x_979);
        let x_983 : vec4<f32> = u_xlat8;
        let x_984 : vec2<f32> = vec2<f32>(x_983.x, x_983.y);
        let x_986 : f32 = u_xlat2.z;
        txVec11 = vec3<f32>(x_984.x, x_984.y, x_986);
        let x_993 : vec3<f32> = txVec11;
        let x_995 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_993.xy, x_993.z);
        u_xlat25.x = x_995;
        let x_998 : f32 = u_xlat14.w;
        let x_1000 : f32 = u_xlat25.x;
        let x_1003 : f32 = u_xlat3.x;
        u_xlat3.x = ((x_998 * x_1000) + x_1003);
        let x_1007 : vec4<f32> = u_xlat8;
        let x_1008 : vec2<f32> = vec2<f32>(x_1007.z, x_1007.w);
        let x_1010 : f32 = u_xlat2.z;
        txVec12 = vec3<f32>(x_1008.x, x_1008.y, x_1010);
        let x_1017 : vec3<f32> = txVec12;
        let x_1019 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1017.xy, x_1017.z);
        u_xlat25.x = x_1019;
        let x_1021 : f32 = u_xlat68;
        let x_1023 : f32 = u_xlat25.x;
        let x_1026 : f32 = u_xlat3.x;
        u_xlat67 = ((x_1021 * x_1023) + x_1026);
      } else {
        let x_1029 : vec4<f32> = u_xlat2;
        let x_1032 : vec4<f32> = x_253.x_MainLightShadowmapSize;
        let x_1035 : vec2<f32> = ((vec2<f32>(x_1029.x, x_1029.y) * vec2<f32>(x_1032.z, x_1032.w)) + vec2<f32>(0.5f, 0.5f));
        let x_1036 : vec4<f32> = u_xlat3;
        u_xlat3 = vec4<f32>(x_1035.x, x_1035.y, x_1036.z, x_1036.w);
        let x_1038 : vec4<f32> = u_xlat3;
        let x_1040 : vec2<f32> = floor(vec2<f32>(x_1038.x, x_1038.y));
        let x_1041 : vec4<f32> = u_xlat3;
        u_xlat3 = vec4<f32>(x_1040.x, x_1040.y, x_1041.z, x_1041.w);
        let x_1043 : vec4<f32> = u_xlat2;
        let x_1046 : vec4<f32> = x_253.x_MainLightShadowmapSize;
        let x_1049 : vec4<f32> = u_xlat3;
        u_xlat47 = ((vec2<f32>(x_1043.x, x_1043.y) * vec2<f32>(x_1046.z, x_1046.w)) + -(vec2<f32>(x_1049.x, x_1049.y)));
        let x_1053 : vec2<f32> = u_xlat47;
        u_xlat7 = (vec4<f32>(x_1053.x, x_1053.x, x_1053.y, x_1053.y) + vec4<f32>(0.5f, 1.0f, 0.5f, 1.0f));
        let x_1056 : vec4<f32> = u_xlat7;
        let x_1058 : vec4<f32> = u_xlat7;
        u_xlat8 = (vec4<f32>(x_1056.x, x_1056.x, x_1056.z, x_1056.z) * vec4<f32>(x_1058.x, x_1058.x, x_1058.z, x_1058.z));
        let x_1061 : vec4<f32> = u_xlat8;
        let x_1065 : vec2<f32> = (vec2<f32>(x_1061.y, x_1061.w) * vec2<f32>(0.040816002f, 0.040816002f));
        let x_1066 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_1066.x, x_1065.x, x_1066.z, x_1065.y);
        let x_1068 : vec4<f32> = u_xlat8;
        let x_1071 : vec2<f32> = u_xlat47;
        let x_1073 : vec2<f32> = ((vec2<f32>(x_1068.x, x_1068.z) * vec2<f32>(0.5f, 0.5f)) + -(x_1071));
        let x_1074 : vec4<f32> = u_xlat7;
        u_xlat7 = vec4<f32>(x_1073.x, x_1074.y, x_1073.y, x_1074.w);
        let x_1076 : vec2<f32> = u_xlat47;
        let x_1078 : vec2<f32> = (-(x_1076) + vec2<f32>(1.0f, 1.0f));
        let x_1079 : vec4<f32> = u_xlat8;
        u_xlat8 = vec4<f32>(x_1078.x, x_1078.y, x_1079.z, x_1079.w);
        let x_1081 : vec2<f32> = u_xlat47;
        u_xlat52 = min(x_1081, vec2<f32>(0.0f, 0.0f));
        let x_1083 : vec2<f32> = u_xlat52;
        let x_1085 : vec2<f32> = u_xlat52;
        let x_1087 : vec4<f32> = u_xlat8;
        let x_1089 : vec2<f32> = ((-(x_1083) * x_1085) + vec2<f32>(x_1087.x, x_1087.y));
        let x_1090 : vec4<f32> = u_xlat8;
        u_xlat8 = vec4<f32>(x_1089.x, x_1089.y, x_1090.z, x_1090.w);
        let x_1092 : vec2<f32> = u_xlat47;
        u_xlat52 = max(x_1092, vec2<f32>(0.0f, 0.0f));
        let x_1095 : vec2<f32> = u_xlat52;
        let x_1097 : vec2<f32> = u_xlat52;
        let x_1099 : vec4<f32> = u_xlat7;
        let x_1101 : vec2<f32> = ((-(x_1095) * x_1097) + vec2<f32>(x_1099.y, x_1099.w));
        let x_1102 : vec3<f32> = u_xlat29;
        u_xlat29 = vec3<f32>(x_1101.x, x_1102.y, x_1101.y);
        let x_1104 : vec4<f32> = u_xlat8;
        let x_1107 : vec2<f32> = (vec2<f32>(x_1104.x, x_1104.y) + vec2<f32>(2.0f, 2.0f));
        let x_1108 : vec4<f32> = u_xlat8;
        u_xlat8 = vec4<f32>(x_1107.x, x_1107.y, x_1108.z, x_1108.w);
        let x_1110 : vec3<f32> = u_xlat29;
        let x_1112 : vec2<f32> = (vec2<f32>(x_1110.x, x_1110.z) + vec2<f32>(2.0f, 2.0f));
        let x_1113 : vec4<f32> = u_xlat7;
        u_xlat7 = vec4<f32>(x_1113.x, x_1112.x, x_1113.z, x_1112.y);
        let x_1116 : f32 = u_xlat7.y;
        u_xlat10.z = (x_1116 * 0.081632003f);
        let x_1120 : vec4<f32> = u_xlat7;
        let x_1123 : vec3<f32> = (vec3<f32>(x_1120.z, x_1120.x, x_1120.w) * vec3<f32>(0.081632003f, 0.081632003f, 0.081632003f));
        let x_1124 : vec4<f32> = u_xlat11;
        u_xlat11 = vec4<f32>(x_1123.x, x_1123.y, x_1123.z, x_1124.w);
        let x_1126 : vec4<f32> = u_xlat8;
        let x_1129 : vec2<f32> = (vec2<f32>(x_1126.x, x_1126.y) * vec2<f32>(0.081632003f, 0.081632003f));
        let x_1130 : vec4<f32> = u_xlat7;
        u_xlat7 = vec4<f32>(x_1129.x, x_1129.y, x_1130.z, x_1130.w);
        let x_1133 : f32 = u_xlat11.y;
        u_xlat10.x = x_1133;
        let x_1135 : vec2<f32> = u_xlat47;
        let x_1142 : vec2<f32> = ((vec2<f32>(x_1135.x, x_1135.x) * vec2<f32>(-0.081632003f, 0.081632003f)) + vec2<f32>(0.163264006f, 0.081632003f));
        let x_1143 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_1143.x, x_1142.x, x_1143.z, x_1142.y);
        let x_1145 : vec2<f32> = u_xlat47;
        let x_1149 : vec2<f32> = ((vec2<f32>(x_1145.x, x_1145.x) * vec2<f32>(-0.081632003f, 0.081632003f)) + vec2<f32>(0.081632003f, 0.163264006f));
        let x_1150 : vec4<f32> = u_xlat8;
        u_xlat8 = vec4<f32>(x_1149.x, x_1150.y, x_1149.y, x_1150.w);
        let x_1153 : f32 = u_xlat7.x;
        u_xlat8.y = x_1153;
        let x_1156 : f32 = u_xlat9.y;
        u_xlat8.w = x_1156;
        let x_1158 : vec4<f32> = u_xlat8;
        let x_1159 : vec4<f32> = u_xlat10;
        u_xlat10 = (x_1158 + x_1159);
        let x_1161 : vec2<f32> = u_xlat47;
        let x_1164 : vec2<f32> = ((vec2<f32>(x_1161.y, x_1161.y) * vec2<f32>(-0.081632003f, 0.081632003f)) + vec2<f32>(0.163264006f, 0.081632003f));
        let x_1165 : vec4<f32> = u_xlat11;
        u_xlat11 = vec4<f32>(x_1165.x, x_1164.x, x_1165.z, x_1164.y);
        let x_1167 : vec2<f32> = u_xlat47;
        let x_1170 : vec2<f32> = ((vec2<f32>(x_1167.y, x_1167.y) * vec2<f32>(-0.081632003f, 0.081632003f)) + vec2<f32>(0.081632003f, 0.163264006f));
        let x_1171 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_1170.x, x_1171.y, x_1170.y, x_1171.w);
        let x_1174 : f32 = u_xlat7.y;
        u_xlat9.y = x_1174;
        let x_1176 : vec4<f32> = u_xlat9;
        let x_1177 : vec4<f32> = u_xlat11;
        u_xlat7 = (x_1176 + x_1177);
        let x_1179 : vec4<f32> = u_xlat8;
        let x_1180 : vec4<f32> = u_xlat10;
        u_xlat8 = (x_1179 / x_1180);
        let x_1182 : vec4<f32> = u_xlat8;
        u_xlat8 = (x_1182 + vec4<f32>(-3.5f, -1.5f, 0.5f, 2.5f));
        let x_1188 : vec4<f32> = u_xlat9;
        let x_1189 : vec4<f32> = u_xlat7;
        u_xlat9 = (x_1188 / x_1189);
        let x_1191 : vec4<f32> = u_xlat9;
        u_xlat9 = (x_1191 + vec4<f32>(-3.5f, -1.5f, 0.5f, 2.5f));
        let x_1193 : vec4<f32> = u_xlat8;
        let x_1196 : vec4<f32> = x_253.x_MainLightShadowmapSize;
        u_xlat8 = (vec4<f32>(x_1193.w, x_1193.x, x_1193.y, x_1193.z) * vec4<f32>(x_1196.x, x_1196.x, x_1196.x, x_1196.x));
        let x_1199 : vec4<f32> = u_xlat9;
        let x_1202 : vec4<f32> = x_253.x_MainLightShadowmapSize;
        u_xlat9 = (vec4<f32>(x_1199.x, x_1199.w, x_1199.y, x_1199.z) * vec4<f32>(x_1202.y, x_1202.y, x_1202.y, x_1202.y));
        let x_1205 : vec4<f32> = u_xlat8;
        let x_1206 : vec3<f32> = vec3<f32>(x_1205.y, x_1205.z, x_1205.w);
        let x_1207 : vec4<f32> = u_xlat11;
        u_xlat11 = vec4<f32>(x_1206.x, x_1207.y, x_1206.y, x_1206.z);
        let x_1210 : f32 = u_xlat9.x;
        u_xlat11.y = x_1210;
        let x_1212 : vec4<f32> = u_xlat3;
        let x_1215 : vec4<f32> = x_253.x_MainLightShadowmapSize;
        let x_1218 : vec4<f32> = u_xlat11;
        u_xlat12 = ((vec4<f32>(x_1212.x, x_1212.y, x_1212.x, x_1212.y) * vec4<f32>(x_1215.x, x_1215.y, x_1215.x, x_1215.y)) + vec4<f32>(x_1218.x, x_1218.y, x_1218.z, x_1218.y));
        let x_1221 : vec4<f32> = u_xlat3;
        let x_1224 : vec4<f32> = x_253.x_MainLightShadowmapSize;
        let x_1227 : vec4<f32> = u_xlat11;
        u_xlat47 = ((vec2<f32>(x_1221.x, x_1221.y) * vec2<f32>(x_1224.x, x_1224.y)) + vec2<f32>(x_1227.w, x_1227.y));
        let x_1231 : f32 = u_xlat11.y;
        u_xlat8.y = x_1231;
        let x_1234 : f32 = u_xlat9.z;
        u_xlat11.y = x_1234;
        let x_1236 : vec4<f32> = u_xlat3;
        let x_1239 : vec4<f32> = x_253.x_MainLightShadowmapSize;
        let x_1242 : vec4<f32> = u_xlat11;
        u_xlat13 = ((vec4<f32>(x_1236.x, x_1236.y, x_1236.x, x_1236.y) * vec4<f32>(x_1239.x, x_1239.y, x_1239.x, x_1239.y)) + vec4<f32>(x_1242.x, x_1242.y, x_1242.z, x_1242.y));
        let x_1245 : vec4<f32> = u_xlat3;
        let x_1248 : vec4<f32> = x_253.x_MainLightShadowmapSize;
        let x_1251 : vec4<f32> = u_xlat11;
        let x_1253 : vec2<f32> = ((vec2<f32>(x_1245.x, x_1245.y) * vec2<f32>(x_1248.x, x_1248.y)) + vec2<f32>(x_1251.w, x_1251.y));
        let x_1254 : vec4<f32> = u_xlat14;
        u_xlat14 = vec4<f32>(x_1253.x, x_1253.y, x_1254.z, x_1254.w);
        let x_1257 : f32 = u_xlat11.y;
        u_xlat8.z = x_1257;
        let x_1260 : vec4<f32> = u_xlat3;
        let x_1263 : vec4<f32> = x_253.x_MainLightShadowmapSize;
        let x_1266 : vec4<f32> = u_xlat8;
        u_xlat15 = ((vec4<f32>(x_1260.x, x_1260.y, x_1260.x, x_1260.y) * vec4<f32>(x_1263.x, x_1263.y, x_1263.x, x_1263.y)) + vec4<f32>(x_1266.x, x_1266.y, x_1266.x, x_1266.z));
        let x_1270 : f32 = u_xlat9.w;
        u_xlat11.y = x_1270;
        let x_1273 : vec4<f32> = u_xlat3;
        let x_1276 : vec4<f32> = x_253.x_MainLightShadowmapSize;
        let x_1279 : vec4<f32> = u_xlat11;
        u_xlat16 = ((vec4<f32>(x_1273.x, x_1273.y, x_1273.x, x_1273.y) * vec4<f32>(x_1276.x, x_1276.y, x_1276.x, x_1276.y)) + vec4<f32>(x_1279.x, x_1279.y, x_1279.z, x_1279.y));
        let x_1283 : vec4<f32> = u_xlat3;
        let x_1286 : vec4<f32> = x_253.x_MainLightShadowmapSize;
        let x_1289 : vec4<f32> = u_xlat11;
        u_xlat30 = ((vec2<f32>(x_1283.x, x_1283.y) * vec2<f32>(x_1286.x, x_1286.y)) + vec2<f32>(x_1289.w, x_1289.y));
        let x_1293 : f32 = u_xlat11.y;
        u_xlat8.w = x_1293;
        let x_1296 : vec4<f32> = u_xlat3;
        let x_1299 : vec4<f32> = x_253.x_MainLightShadowmapSize;
        let x_1302 : vec4<f32> = u_xlat8;
        u_xlat58 = ((vec2<f32>(x_1296.x, x_1296.y) * vec2<f32>(x_1299.x, x_1299.y)) + vec2<f32>(x_1302.x, x_1302.w));
        let x_1305 : vec4<f32> = u_xlat11;
        let x_1306 : vec3<f32> = vec3<f32>(x_1305.x, x_1305.z, x_1305.w);
        let x_1307 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_1306.x, x_1307.y, x_1306.y, x_1306.z);
        let x_1309 : vec4<f32> = u_xlat3;
        let x_1312 : vec4<f32> = x_253.x_MainLightShadowmapSize;
        let x_1315 : vec4<f32> = u_xlat9;
        u_xlat11 = ((vec4<f32>(x_1309.x, x_1309.y, x_1309.x, x_1309.y) * vec4<f32>(x_1312.x, x_1312.y, x_1312.x, x_1312.y)) + vec4<f32>(x_1315.x, x_1315.y, x_1315.z, x_1315.y));
        let x_1319 : vec4<f32> = u_xlat3;
        let x_1322 : vec4<f32> = x_253.x_MainLightShadowmapSize;
        let x_1325 : vec4<f32> = u_xlat9;
        u_xlat53 = ((vec2<f32>(x_1319.x, x_1319.y) * vec2<f32>(x_1322.x, x_1322.y)) + vec2<f32>(x_1325.w, x_1325.y));
        let x_1329 : f32 = u_xlat8.x;
        u_xlat9.x = x_1329;
        let x_1331 : vec4<f32> = u_xlat3;
        let x_1334 : vec4<f32> = x_253.x_MainLightShadowmapSize;
        let x_1337 : vec4<f32> = u_xlat9;
        let x_1339 : vec2<f32> = ((vec2<f32>(x_1331.x, x_1331.y) * vec2<f32>(x_1334.x, x_1334.y)) + vec2<f32>(x_1337.x, x_1337.y));
        let x_1340 : vec4<f32> = u_xlat3;
        u_xlat3 = vec4<f32>(x_1339.x, x_1339.y, x_1340.z, x_1340.w);
        let x_1343 : vec4<f32> = u_xlat7;
        let x_1345 : vec4<f32> = u_xlat10;
        u_xlat17 = (vec4<f32>(x_1343.x, x_1343.x, x_1343.x, x_1343.x) * x_1345);
        let x_1348 : vec4<f32> = u_xlat7;
        let x_1350 : vec4<f32> = u_xlat10;
        u_xlat18 = (vec4<f32>(x_1348.y, x_1348.y, x_1348.y, x_1348.y) * x_1350);
        let x_1353 : vec4<f32> = u_xlat7;
        let x_1355 : vec4<f32> = u_xlat10;
        u_xlat19 = (vec4<f32>(x_1353.z, x_1353.z, x_1353.z, x_1353.z) * x_1355);
        let x_1357 : vec4<f32> = u_xlat7;
        let x_1359 : vec4<f32> = u_xlat10;
        u_xlat7 = (vec4<f32>(x_1357.w, x_1357.w, x_1357.w, x_1357.w) * x_1359);
        let x_1362 : vec4<f32> = u_xlat12;
        let x_1363 : vec2<f32> = vec2<f32>(x_1362.x, x_1362.y);
        let x_1365 : f32 = u_xlat2.z;
        txVec13 = vec3<f32>(x_1363.x, x_1363.y, x_1365);
        let x_1372 : vec3<f32> = txVec13;
        let x_1374 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1372.xy, x_1372.z);
        u_xlat68 = x_1374;
        let x_1376 : vec4<f32> = u_xlat12;
        let x_1377 : vec2<f32> = vec2<f32>(x_1376.z, x_1376.w);
        let x_1379 : f32 = u_xlat2.z;
        txVec14 = vec3<f32>(x_1377.x, x_1377.y, x_1379);
        let x_1387 : vec3<f32> = txVec14;
        let x_1389 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1387.xy, x_1387.z);
        u_xlat71 = x_1389;
        let x_1390 : f32 = u_xlat71;
        let x_1392 : f32 = u_xlat17.y;
        u_xlat71 = (x_1390 * x_1392);
        let x_1395 : f32 = u_xlat17.x;
        let x_1396 : f32 = u_xlat68;
        let x_1398 : f32 = u_xlat71;
        u_xlat68 = ((x_1395 * x_1396) + x_1398);
        let x_1401 : vec2<f32> = u_xlat47;
        let x_1403 : f32 = u_xlat2.z;
        txVec15 = vec3<f32>(x_1401.x, x_1401.y, x_1403);
        let x_1410 : vec3<f32> = txVec15;
        let x_1412 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1410.xy, x_1410.z);
        u_xlat47.x = x_1412;
        let x_1415 : f32 = u_xlat17.z;
        let x_1417 : f32 = u_xlat47.x;
        let x_1419 : f32 = u_xlat68;
        u_xlat68 = ((x_1415 * x_1417) + x_1419);
        let x_1422 : vec4<f32> = u_xlat15;
        let x_1423 : vec2<f32> = vec2<f32>(x_1422.x, x_1422.y);
        let x_1425 : f32 = u_xlat2.z;
        txVec16 = vec3<f32>(x_1423.x, x_1423.y, x_1425);
        let x_1432 : vec3<f32> = txVec16;
        let x_1434 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1432.xy, x_1432.z);
        u_xlat47.x = x_1434;
        let x_1437 : f32 = u_xlat17.w;
        let x_1439 : f32 = u_xlat47.x;
        let x_1441 : f32 = u_xlat68;
        u_xlat68 = ((x_1437 * x_1439) + x_1441);
        let x_1444 : vec4<f32> = u_xlat13;
        let x_1445 : vec2<f32> = vec2<f32>(x_1444.x, x_1444.y);
        let x_1447 : f32 = u_xlat2.z;
        txVec17 = vec3<f32>(x_1445.x, x_1445.y, x_1447);
        let x_1454 : vec3<f32> = txVec17;
        let x_1456 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1454.xy, x_1454.z);
        u_xlat47.x = x_1456;
        let x_1459 : f32 = u_xlat18.x;
        let x_1461 : f32 = u_xlat47.x;
        let x_1463 : f32 = u_xlat68;
        u_xlat68 = ((x_1459 * x_1461) + x_1463);
        let x_1466 : vec4<f32> = u_xlat13;
        let x_1467 : vec2<f32> = vec2<f32>(x_1466.z, x_1466.w);
        let x_1469 : f32 = u_xlat2.z;
        txVec18 = vec3<f32>(x_1467.x, x_1467.y, x_1469);
        let x_1476 : vec3<f32> = txVec18;
        let x_1478 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1476.xy, x_1476.z);
        u_xlat47.x = x_1478;
        let x_1481 : f32 = u_xlat18.y;
        let x_1483 : f32 = u_xlat47.x;
        let x_1485 : f32 = u_xlat68;
        u_xlat68 = ((x_1481 * x_1483) + x_1485);
        let x_1488 : vec4<f32> = u_xlat14;
        let x_1489 : vec2<f32> = vec2<f32>(x_1488.x, x_1488.y);
        let x_1491 : f32 = u_xlat2.z;
        txVec19 = vec3<f32>(x_1489.x, x_1489.y, x_1491);
        let x_1498 : vec3<f32> = txVec19;
        let x_1500 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1498.xy, x_1498.z);
        u_xlat47.x = x_1500;
        let x_1503 : f32 = u_xlat18.z;
        let x_1505 : f32 = u_xlat47.x;
        let x_1507 : f32 = u_xlat68;
        u_xlat68 = ((x_1503 * x_1505) + x_1507);
        let x_1510 : vec4<f32> = u_xlat15;
        let x_1511 : vec2<f32> = vec2<f32>(x_1510.z, x_1510.w);
        let x_1513 : f32 = u_xlat2.z;
        txVec20 = vec3<f32>(x_1511.x, x_1511.y, x_1513);
        let x_1520 : vec3<f32> = txVec20;
        let x_1522 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1520.xy, x_1520.z);
        u_xlat47.x = x_1522;
        let x_1525 : f32 = u_xlat18.w;
        let x_1527 : f32 = u_xlat47.x;
        let x_1529 : f32 = u_xlat68;
        u_xlat68 = ((x_1525 * x_1527) + x_1529);
        let x_1532 : vec4<f32> = u_xlat16;
        let x_1533 : vec2<f32> = vec2<f32>(x_1532.x, x_1532.y);
        let x_1535 : f32 = u_xlat2.z;
        txVec21 = vec3<f32>(x_1533.x, x_1533.y, x_1535);
        let x_1542 : vec3<f32> = txVec21;
        let x_1544 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1542.xy, x_1542.z);
        u_xlat47.x = x_1544;
        let x_1547 : f32 = u_xlat19.x;
        let x_1549 : f32 = u_xlat47.x;
        let x_1551 : f32 = u_xlat68;
        u_xlat68 = ((x_1547 * x_1549) + x_1551);
        let x_1554 : vec4<f32> = u_xlat16;
        let x_1555 : vec2<f32> = vec2<f32>(x_1554.z, x_1554.w);
        let x_1557 : f32 = u_xlat2.z;
        txVec22 = vec3<f32>(x_1555.x, x_1555.y, x_1557);
        let x_1564 : vec3<f32> = txVec22;
        let x_1566 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1564.xy, x_1564.z);
        u_xlat47.x = x_1566;
        let x_1569 : f32 = u_xlat19.y;
        let x_1571 : f32 = u_xlat47.x;
        let x_1573 : f32 = u_xlat68;
        u_xlat68 = ((x_1569 * x_1571) + x_1573);
        let x_1576 : vec2<f32> = u_xlat30;
        let x_1578 : f32 = u_xlat2.z;
        txVec23 = vec3<f32>(x_1576.x, x_1576.y, x_1578);
        let x_1585 : vec3<f32> = txVec23;
        let x_1587 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1585.xy, x_1585.z);
        u_xlat47.x = x_1587;
        let x_1590 : f32 = u_xlat19.z;
        let x_1592 : f32 = u_xlat47.x;
        let x_1594 : f32 = u_xlat68;
        u_xlat68 = ((x_1590 * x_1592) + x_1594);
        let x_1597 : vec2<f32> = u_xlat58;
        let x_1599 : f32 = u_xlat2.z;
        txVec24 = vec3<f32>(x_1597.x, x_1597.y, x_1599);
        let x_1606 : vec3<f32> = txVec24;
        let x_1608 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1606.xy, x_1606.z);
        u_xlat47.x = x_1608;
        let x_1611 : f32 = u_xlat19.w;
        let x_1613 : f32 = u_xlat47.x;
        let x_1615 : f32 = u_xlat68;
        u_xlat68 = ((x_1611 * x_1613) + x_1615);
        let x_1618 : vec4<f32> = u_xlat11;
        let x_1619 : vec2<f32> = vec2<f32>(x_1618.x, x_1618.y);
        let x_1621 : f32 = u_xlat2.z;
        txVec25 = vec3<f32>(x_1619.x, x_1619.y, x_1621);
        let x_1628 : vec3<f32> = txVec25;
        let x_1630 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1628.xy, x_1628.z);
        u_xlat47.x = x_1630;
        let x_1633 : f32 = u_xlat7.x;
        let x_1635 : f32 = u_xlat47.x;
        let x_1637 : f32 = u_xlat68;
        u_xlat68 = ((x_1633 * x_1635) + x_1637);
        let x_1640 : vec4<f32> = u_xlat11;
        let x_1641 : vec2<f32> = vec2<f32>(x_1640.z, x_1640.w);
        let x_1643 : f32 = u_xlat2.z;
        txVec26 = vec3<f32>(x_1641.x, x_1641.y, x_1643);
        let x_1650 : vec3<f32> = txVec26;
        let x_1652 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1650.xy, x_1650.z);
        u_xlat47.x = x_1652;
        let x_1655 : f32 = u_xlat7.y;
        let x_1657 : f32 = u_xlat47.x;
        let x_1659 : f32 = u_xlat68;
        u_xlat68 = ((x_1655 * x_1657) + x_1659);
        let x_1662 : vec2<f32> = u_xlat53;
        let x_1664 : f32 = u_xlat2.z;
        txVec27 = vec3<f32>(x_1662.x, x_1662.y, x_1664);
        let x_1671 : vec3<f32> = txVec27;
        let x_1673 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1671.xy, x_1671.z);
        u_xlat47.x = x_1673;
        let x_1676 : f32 = u_xlat7.z;
        let x_1678 : f32 = u_xlat47.x;
        let x_1680 : f32 = u_xlat68;
        u_xlat68 = ((x_1676 * x_1678) + x_1680);
        let x_1683 : vec4<f32> = u_xlat3;
        let x_1684 : vec2<f32> = vec2<f32>(x_1683.x, x_1683.y);
        let x_1686 : f32 = u_xlat2.z;
        txVec28 = vec3<f32>(x_1684.x, x_1684.y, x_1686);
        let x_1693 : vec3<f32> = txVec28;
        let x_1695 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1693.xy, x_1693.z);
        u_xlat3.x = x_1695;
        let x_1698 : f32 = u_xlat7.w;
        let x_1700 : f32 = u_xlat3.x;
        let x_1702 : f32 = u_xlat68;
        u_xlat67 = ((x_1698 * x_1700) + x_1702);
      }
    }
  } else {
    let x_1706 : vec4<f32> = u_xlat2;
    let x_1707 : vec2<f32> = vec2<f32>(x_1706.x, x_1706.y);
    let x_1709 : f32 = u_xlat2.z;
    txVec29 = vec3<f32>(x_1707.x, x_1707.y, x_1709);
    let x_1716 : vec3<f32> = txVec29;
    let x_1718 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1716.xy, x_1716.z);
    u_xlat67 = x_1718;
  }
  let x_1720 : f32 = x_253.x_MainLightShadowParams.x;
  u_xlat68 = (-(x_1720) + 1.0f);
  let x_1723 : f32 = u_xlat67;
  let x_1725 : f32 = x_253.x_MainLightShadowParams.x;
  let x_1727 : f32 = u_xlat68;
  u_xlat67 = ((x_1723 * x_1725) + x_1727);
  let x_1731 : f32 = u_xlat2.z;
  u_xlatb3 = (0.0f >= x_1731);
  let x_1735 : f32 = u_xlat2.z;
  u_xlatb25 = (x_1735 >= 1.0f);
  let x_1737 : bool = u_xlatb25;
  let x_1738 : bool = u_xlatb3;
  u_xlatb3 = (x_1737 | x_1738);
  let x_1740 : bool = u_xlatb3;
  let x_1741 : f32 = u_xlat67;
  u_xlat67 = select(x_1741, 1.0f, x_1740);
  let x_1743 : vec3<f32> = u_xlat1;
  let x_1745 : vec4<f32> = x_139.x_MainLightPosition;
  u_xlat1.x = dot(x_1743, -(vec3<f32>(x_1745.x, x_1745.y, x_1745.z)));
  let x_1751 : f32 = u_xlat1.x;
  u_xlat1.x = clamp(x_1751, 0.0f, 1.0f);
  let x_1755 : f32 = u_xlat67;
  let x_1758 : vec4<f32> = x_139.x_MainLightColor;
  u_xlat23 = (vec3<f32>(x_1755, x_1755, x_1755) * vec3<f32>(x_1758.x, x_1758.y, x_1758.z));
  let x_1761 : vec3<f32> = u_xlat23;
  let x_1762 : vec3<f32> = u_xlat1;
  u_xlat1 = (x_1761 * vec3<f32>(x_1762.x, x_1762.x, x_1762.x));
  let x_1765 : vec3<f32> = u_xlat1;
  let x_1766 : vec4<f32> = u_xlat4;
  u_xlat1 = (x_1765 * vec3<f32>(x_1766.x, x_1766.y, x_1766.z));
  let x_1770 : f32 = u_xlat4.w;
  u_xlatb67 = (x_1770 >= 0.400000006f);
  let x_1773 : bool = u_xlatb67;
  if (x_1773) {
    let x_1778 : f32 = u_xlat4.w;
    x_1774 = x_1778;
  } else {
    x_1774 = 0.0f;
  }
  let x_1780 : f32 = x_1774;
  u_xlat67 = x_1780;
  let x_1782 : f32 = u_xlat4.w;
  u_xlat25.x = (x_1782 + -0.400000006f);
  let x_1787 : f32 = u_xlat4.w;
  u_xlat47.x = dpdxCoarse(x_1787);
  let x_1792 : f32 = u_xlat4.w;
  u_xlat69 = dpdyCoarse(x_1792);
  let x_1794 : f32 = u_xlat69;
  let x_1797 : f32 = u_xlat47.x;
  u_xlat47.x = (abs(x_1794) + abs(x_1797));
  let x_1802 : f32 = u_xlat47.x;
  u_xlat47.x = max(x_1802, 0.0001f);
  let x_1807 : f32 = u_xlat25.x;
  let x_1809 : f32 = u_xlat47.x;
  u_xlat25.x = (x_1807 / x_1809);
  let x_1813 : f32 = u_xlat25.x;
  u_xlat25.x = (x_1813 + 0.5f);
  let x_1817 : f32 = u_xlat25.x;
  u_xlat25.x = clamp(x_1817, 0.0f, 1.0f);
  let x_1822 : f32 = x_139.x_AlphaToMaskAvailable;
  u_xlatb47 = !((x_1822 == 0.0f));
  let x_1824 : bool = u_xlatb47;
  if (x_1824) {
    let x_1829 : f32 = u_xlat25.x;
    x_1825 = x_1829;
  } else {
    let x_1831 : f32 = u_xlat67;
    x_1825 = x_1831;
  }
  let x_1832 : f32 = x_1825;
  u_xlat67 = x_1832;
  let x_1833 : f32 = u_xlat67;
  u_xlat25.x = (x_1833 + -0.0001f);
  let x_1838 : f32 = u_xlat25.x;
  u_xlatb25 = (x_1838 < 0.0f);
  let x_1840 : bool = u_xlatb25;
  if (((select(0i, 1i, x_1840) * -1i) != 0i)) {
    discard;
  }
  let x_1848 : vec3<f32> = u_xlat22;
  let x_1849 : vec3<f32> = u_xlat28;
  u_xlat22 = (x_1848 * vec3<f32>(x_1849.y, x_1849.y, x_1849.y));
  let x_1852 : vec3<f32> = u_xlat28;
  let x_1854 : vec4<f32> = vs_INTERP2;
  let x_1857 : vec3<f32> = u_xlat22;
  u_xlat22 = ((vec3<f32>(x_1852.x, x_1852.x, x_1852.x) * vec3<f32>(x_1854.x, x_1854.y, x_1854.z)) + x_1857);
  let x_1859 : vec3<f32> = u_xlat28;
  let x_1861 : vec3<f32> = vs_INTERP1;
  let x_1863 : vec3<f32> = u_xlat22;
  u_xlat22 = ((vec3<f32>(x_1859.z, x_1859.z, x_1859.z) * x_1861) + x_1863);
  let x_1865 : vec3<f32> = u_xlat22;
  let x_1866 : vec3<f32> = u_xlat22;
  u_xlat25.x = dot(x_1865, x_1866);
  let x_1870 : f32 = u_xlat25.x;
  u_xlat25.x = inverseSqrt(x_1870);
  let x_1873 : vec3<f32> = u_xlat22;
  let x_1874 : vec3<f32> = u_xlat25;
  let x_1876 : vec3<f32> = (x_1873 * vec3<f32>(x_1874.x, x_1874.x, x_1874.x));
  let x_1877 : vec4<f32> = u_xlat4;
  u_xlat4 = vec4<f32>(x_1876.x, x_1876.y, x_1876.z, x_1877.w);
  let x_1880 : f32 = x_139.unity_OrthoParams.w;
  u_xlatb22.x = (x_1880 == 0.0f);
  let x_1883 : vec3<f32> = vs_INTERP0;
  let x_1887 : vec3<f32> = x_139.x_WorldSpaceCameraPos;
  u_xlat28 = (-(x_1883) + x_1887);
  let x_1890 : vec3<f32> = u_xlat28;
  let x_1891 : vec3<f32> = u_xlat28;
  u_xlat44 = dot(x_1890, x_1891);
  let x_1893 : f32 = u_xlat44;
  u_xlat44 = inverseSqrt(x_1893);
  let x_1895 : f32 = u_xlat44;
  let x_1897 : vec3<f32> = u_xlat28;
  u_xlat28 = (vec3<f32>(x_1895, x_1895, x_1895) * x_1897);
  let x_1900 : bool = u_xlatb22.x;
  if (x_1900) {
    let x_1905 : f32 = u_xlat28.x;
    x_1901 = x_1905;
  } else {
    let x_1909 : f32 = x_139.unity_MatrixV[0i].z;
    x_1901 = x_1909;
  }
  let x_1910 : f32 = x_1901;
  u_xlat7.x = x_1910;
  let x_1913 : bool = u_xlatb22.x;
  if (x_1913) {
    let x_1918 : f32 = u_xlat28.y;
    x_1914 = x_1918;
  } else {
    let x_1921 : f32 = x_139.unity_MatrixV[1i].z;
    x_1914 = x_1921;
  }
  let x_1922 : f32 = x_1914;
  u_xlat7.y = x_1922;
  let x_1925 : bool = u_xlatb22.x;
  if (x_1925) {
    let x_1930 : f32 = u_xlat28.z;
    x_1926 = x_1930;
  } else {
    let x_1933 : f32 = x_139.unity_MatrixV[2i].z;
    x_1926 = x_1933;
  }
  let x_1934 : f32 = x_1926;
  u_xlat7.z = x_1934;
  u_xlat4.w = 1.0f;
  let x_1939 : vec4<f32> = x_60.unity_SHAr;
  let x_1940 : vec4<f32> = u_xlat4;
  u_xlat8.x = dot(x_1939, x_1940);
  let x_1945 : vec4<f32> = x_60.unity_SHAg;
  let x_1946 : vec4<f32> = u_xlat4;
  u_xlat8.y = dot(x_1945, x_1946);
  let x_1951 : vec4<f32> = x_60.unity_SHAb;
  let x_1952 : vec4<f32> = u_xlat4;
  u_xlat8.z = dot(x_1951, x_1952);
  let x_1955 : vec4<f32> = u_xlat4;
  let x_1957 : vec4<f32> = u_xlat4;
  u_xlat9 = (vec4<f32>(x_1955.y, x_1955.z, x_1955.z, x_1955.x) * vec4<f32>(x_1957.x, x_1957.y, x_1957.z, x_1957.z));
  let x_1962 : vec4<f32> = x_60.unity_SHBr;
  let x_1963 : vec4<f32> = u_xlat9;
  u_xlat10.x = dot(x_1962, x_1963);
  let x_1968 : vec4<f32> = x_60.unity_SHBg;
  let x_1969 : vec4<f32> = u_xlat9;
  u_xlat10.y = dot(x_1968, x_1969);
  let x_1974 : vec4<f32> = x_60.unity_SHBb;
  let x_1975 : vec4<f32> = u_xlat9;
  u_xlat10.z = dot(x_1974, x_1975);
  let x_1979 : f32 = u_xlat4.y;
  let x_1981 : f32 = u_xlat4.y;
  u_xlat22.x = (x_1979 * x_1981);
  let x_1985 : f32 = u_xlat4.x;
  let x_1987 : f32 = u_xlat4.x;
  let x_1990 : f32 = u_xlat22.x;
  u_xlat22.x = ((x_1985 * x_1987) + -(x_1990));
  let x_1996 : vec4<f32> = x_60.unity_SHC;
  let x_1998 : vec3<f32> = u_xlat22;
  let x_2001 : vec4<f32> = u_xlat10;
  u_xlat22 = ((vec3<f32>(x_1996.x, x_1996.y, x_1996.z) * vec3<f32>(x_1998.x, x_1998.x, x_1998.x)) + vec3<f32>(x_2001.x, x_2001.y, x_2001.z));
  let x_2004 : vec3<f32> = u_xlat22;
  let x_2005 : vec4<f32> = u_xlat8;
  u_xlat22 = (x_2004 + vec3<f32>(x_2005.x, x_2005.y, x_2005.z));
  let x_2008 : vec3<f32> = u_xlat22;
  u_xlat22 = max(x_2008, vec3<f32>(0.0f, 0.0f, 0.0f));
  let x_2011 : vec4<f32> = x_139.x_ScaledScreenParams;
  let x_2012 : vec2<f32> = vec2<f32>(x_2011.x, x_2011.y);
  let x_2016 : vec2<f32> = (vec2<f32>(1.0f, 1.0f) / vec2<f32>(x_2012.x, x_2012.y));
  let x_2017 : vec3<f32> = u_xlat25;
  u_xlat25 = vec3<f32>(x_2016.x, x_2017.y, x_2016.y);
  let x_2019 : vec3<f32> = u_xlat25;
  let x_2021 : vec4<f32> = hlslcc_FragCoord;
  let x_2023 : vec2<f32> = (vec2<f32>(x_2019.x, x_2019.z) * vec2<f32>(x_2021.x, x_2021.y));
  let x_2024 : vec4<f32> = u_xlat8;
  u_xlat8 = vec4<f32>(x_2023.x, x_2023.y, x_2024.z, x_2024.w);
  let x_2027 : f32 = u_xlat8.y;
  let x_2029 : f32 = x_139.x_ScaleBiasRt.x;
  let x_2032 : f32 = x_139.x_ScaleBiasRt.y;
  u_xlat25.x = ((x_2027 * x_2029) + x_2032);
  let x_2036 : f32 = u_xlat25.x;
  u_xlat8.z = (-(x_2036) + 1.0f);
  let x_2041 : f32 = u_xlat6.x;
  u_xlat6.x = x_2041;
  let x_2044 : f32 = u_xlat6.x;
  u_xlat6.x = clamp(x_2044, 0.0f, 1.0f);
  let x_2047 : f32 = u_xlat67;
  u_xlat67 = min(x_2047, 1.0f);
  let x_2049 : vec3<f32> = u_xlat5;
  u_xlat5 = (x_2049 * vec3<f32>(0.959999979f, 0.959999979f, 0.959999979f));
  let x_2054 : f32 = u_xlat6.x;
  u_xlat25.x = (-(x_2054) + 1.0f);
  let x_2059 : f32 = u_xlat25.x;
  let x_2061 : f32 = u_xlat25.x;
  u_xlat69 = (x_2059 * x_2061);
  let x_2063 : f32 = u_xlat69;
  u_xlat69 = max(x_2063, 0.0078125f);
  let x_2067 : f32 = u_xlat69;
  let x_2068 : f32 = u_xlat69;
  u_xlat70 = (x_2067 * x_2068);
  let x_2071 : f32 = u_xlat6.x;
  u_xlat71 = (x_2071 + 0.040000021f);
  let x_2074 : f32 = u_xlat71;
  u_xlat71 = min(x_2074, 1.0f);
  let x_2076 : f32 = u_xlat69;
  u_xlat6.x = ((x_2076 * 4.0f) + 2.0f);
  let x_2085 : vec4<f32> = u_xlat8;
  let x_2088 : f32 = x_139.x_GlobalMipBias.x;
  let x_2089 : vec4<f32> = textureSampleBias(x_ScreenSpaceOcclusionTexture, sampler_ScreenSpaceOcclusionTexture, vec2<f32>(x_2085.x, x_2085.z), x_2088);
  u_xlat28.x = x_2089.x;
  let x_2094 : f32 = u_xlat28.x;
  u_xlat50 = (x_2094 + -1.0f);
  let x_2097 : f32 = x_139.x_AmbientOcclusionParam.w;
  let x_2098 : f32 = u_xlat50;
  u_xlat50 = ((x_2097 * x_2098) + 1.0f);
  let x_2102 : f32 = u_xlat28.x;
  let x_2104 : f32 = vs_INTERP4.w;
  u_xlat28.x = min(x_2102, x_2104);
  let x_2107 : bool = u_xlatb0;
  if (x_2107) {
    let x_2111 : f32 = x_253.x_MainLightShadowParams.y;
    u_xlatb0 = (x_2111 == 1.0f);
    let x_2113 : bool = u_xlatb0;
    if (x_2113) {
      let x_2116 : vec4<f32> = u_xlat2;
      let x_2119 : vec4<f32> = x_253.x_MainLightShadowOffset0;
      u_xlat8 = (vec4<f32>(x_2116.x, x_2116.y, x_2116.x, x_2116.y) + x_2119);
      let x_2122 : vec4<f32> = u_xlat8;
      let x_2123 : vec2<f32> = vec2<f32>(x_2122.x, x_2122.y);
      let x_2125 : f32 = u_xlat2.z;
      txVec30 = vec3<f32>(x_2123.x, x_2123.y, x_2125);
      let x_2132 : vec3<f32> = txVec30;
      let x_2134 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2132.xy, x_2132.z);
      u_xlat9.x = x_2134;
      let x_2137 : vec4<f32> = u_xlat8;
      let x_2138 : vec2<f32> = vec2<f32>(x_2137.z, x_2137.w);
      let x_2140 : f32 = u_xlat2.z;
      txVec31 = vec3<f32>(x_2138.x, x_2138.y, x_2140);
      let x_2147 : vec3<f32> = txVec31;
      let x_2149 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2147.xy, x_2147.z);
      u_xlat9.y = x_2149;
      let x_2151 : vec4<f32> = u_xlat2;
      let x_2154 : vec4<f32> = x_253.x_MainLightShadowOffset1;
      u_xlat8 = (vec4<f32>(x_2151.x, x_2151.y, x_2151.x, x_2151.y) + x_2154);
      let x_2157 : vec4<f32> = u_xlat8;
      let x_2158 : vec2<f32> = vec2<f32>(x_2157.x, x_2157.y);
      let x_2160 : f32 = u_xlat2.z;
      txVec32 = vec3<f32>(x_2158.x, x_2158.y, x_2160);
      let x_2167 : vec3<f32> = txVec32;
      let x_2169 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2167.xy, x_2167.z);
      u_xlat9.z = x_2169;
      let x_2172 : vec4<f32> = u_xlat8;
      let x_2173 : vec2<f32> = vec2<f32>(x_2172.z, x_2172.w);
      let x_2175 : f32 = u_xlat2.z;
      txVec33 = vec3<f32>(x_2173.x, x_2173.y, x_2175);
      let x_2182 : vec3<f32> = txVec33;
      let x_2184 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2182.xy, x_2182.z);
      u_xlat9.w = x_2184;
      let x_2186 : vec4<f32> = u_xlat9;
      u_xlat0.x = dot(x_2186, vec4<f32>(0.25f, 0.25f, 0.25f, 0.25f));
    } else {
      let x_2192 : f32 = x_253.x_MainLightShadowParams.y;
      u_xlatb72 = (x_2192 == 2.0f);
      let x_2194 : bool = u_xlatb72;
      if (x_2194) {
        let x_2197 : vec4<f32> = u_xlat2;
        let x_2200 : vec4<f32> = x_253.x_MainLightShadowmapSize;
        let x_2203 : vec2<f32> = ((vec2<f32>(x_2197.x, x_2197.y) * vec2<f32>(x_2200.z, x_2200.w)) + vec2<f32>(0.5f, 0.5f));
        let x_2204 : vec4<f32> = u_xlat8;
        u_xlat8 = vec4<f32>(x_2203.x, x_2203.y, x_2204.z, x_2204.w);
        let x_2206 : vec4<f32> = u_xlat8;
        let x_2208 : vec2<f32> = floor(vec2<f32>(x_2206.x, x_2206.y));
        let x_2209 : vec4<f32> = u_xlat8;
        u_xlat8 = vec4<f32>(x_2208.x, x_2208.y, x_2209.z, x_2209.w);
        let x_2211 : vec4<f32> = u_xlat2;
        let x_2214 : vec4<f32> = x_253.x_MainLightShadowmapSize;
        let x_2217 : vec4<f32> = u_xlat8;
        u_xlat52 = ((vec2<f32>(x_2211.x, x_2211.y) * vec2<f32>(x_2214.z, x_2214.w)) + -(vec2<f32>(x_2217.x, x_2217.y)));
        let x_2221 : vec2<f32> = u_xlat52;
        u_xlat9 = (vec4<f32>(x_2221.x, x_2221.x, x_2221.y, x_2221.y) + vec4<f32>(0.5f, 1.0f, 0.5f, 1.0f));
        let x_2224 : vec4<f32> = u_xlat9;
        let x_2226 : vec4<f32> = u_xlat9;
        u_xlat10 = (vec4<f32>(x_2224.x, x_2224.x, x_2224.z, x_2224.z) * vec4<f32>(x_2226.x, x_2226.x, x_2226.z, x_2226.z));
        let x_2229 : vec4<f32> = u_xlat10;
        let x_2231 : vec2<f32> = (vec2<f32>(x_2229.y, x_2229.w) * vec2<f32>(0.079999998f, 0.079999998f));
        let x_2232 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_2231.x, x_2232.y, x_2231.y, x_2232.w);
        let x_2234 : vec4<f32> = u_xlat10;
        let x_2237 : vec2<f32> = u_xlat52;
        let x_2239 : vec2<f32> = ((vec2<f32>(x_2234.x, x_2234.z) * vec2<f32>(0.5f, 0.5f)) + -(x_2237));
        let x_2240 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_2239.x, x_2239.y, x_2240.z, x_2240.w);
        let x_2243 : vec2<f32> = u_xlat52;
        u_xlat54 = (-(x_2243) + vec2<f32>(1.0f, 1.0f));
        let x_2246 : vec2<f32> = u_xlat52;
        let x_2247 : vec2<f32> = min(x_2246, vec2<f32>(0.0f, 0.0f));
        let x_2248 : vec4<f32> = u_xlat11;
        u_xlat11 = vec4<f32>(x_2247.x, x_2247.y, x_2248.z, x_2248.w);
        let x_2250 : vec4<f32> = u_xlat11;
        let x_2253 : vec4<f32> = u_xlat11;
        let x_2256 : vec2<f32> = u_xlat54;
        let x_2257 : vec2<f32> = ((-(vec2<f32>(x_2250.x, x_2250.y)) * vec2<f32>(x_2253.x, x_2253.y)) + x_2256);
        let x_2258 : vec4<f32> = u_xlat11;
        u_xlat11 = vec4<f32>(x_2257.x, x_2257.y, x_2258.z, x_2258.w);
        let x_2260 : vec2<f32> = u_xlat52;
        u_xlat52 = max(x_2260, vec2<f32>(0.0f, 0.0f));
        let x_2262 : vec2<f32> = u_xlat52;
        let x_2264 : vec2<f32> = u_xlat52;
        let x_2266 : vec4<f32> = u_xlat9;
        u_xlat52 = ((-(x_2262) * x_2264) + vec2<f32>(x_2266.y, x_2266.w));
        let x_2269 : vec4<f32> = u_xlat11;
        let x_2271 : vec2<f32> = (vec2<f32>(x_2269.x, x_2269.y) + vec2<f32>(1.0f, 1.0f));
        let x_2272 : vec4<f32> = u_xlat11;
        u_xlat11 = vec4<f32>(x_2271.x, x_2271.y, x_2272.z, x_2272.w);
        let x_2274 : vec2<f32> = u_xlat52;
        u_xlat52 = (x_2274 + vec2<f32>(1.0f, 1.0f));
        let x_2276 : vec4<f32> = u_xlat10;
        let x_2278 : vec2<f32> = (vec2<f32>(x_2276.x, x_2276.y) * vec2<f32>(0.159999996f, 0.159999996f));
        let x_2279 : vec4<f32> = u_xlat12;
        u_xlat12 = vec4<f32>(x_2278.x, x_2278.y, x_2279.z, x_2279.w);
        let x_2281 : vec2<f32> = u_xlat54;
        let x_2282 : vec2<f32> = (x_2281 * vec2<f32>(0.159999996f, 0.159999996f));
        let x_2283 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_2282.x, x_2282.y, x_2283.z, x_2283.w);
        let x_2285 : vec4<f32> = u_xlat11;
        let x_2287 : vec2<f32> = (vec2<f32>(x_2285.x, x_2285.y) * vec2<f32>(0.159999996f, 0.159999996f));
        let x_2288 : vec4<f32> = u_xlat11;
        u_xlat11 = vec4<f32>(x_2287.x, x_2287.y, x_2288.z, x_2288.w);
        let x_2290 : vec2<f32> = u_xlat52;
        let x_2291 : vec2<f32> = (x_2290 * vec2<f32>(0.159999996f, 0.159999996f));
        let x_2292 : vec4<f32> = u_xlat13;
        u_xlat13 = vec4<f32>(x_2291.x, x_2291.y, x_2292.z, x_2292.w);
        let x_2294 : vec4<f32> = u_xlat9;
        u_xlat52 = (vec2<f32>(x_2294.y, x_2294.w) * vec2<f32>(0.159999996f, 0.159999996f));
        let x_2298 : f32 = u_xlat11.x;
        u_xlat12.z = x_2298;
        let x_2301 : f32 = u_xlat52.x;
        u_xlat12.w = x_2301;
        let x_2304 : f32 = u_xlat13.x;
        u_xlat10.z = x_2304;
        let x_2307 : f32 = u_xlat9.x;
        u_xlat10.w = x_2307;
        let x_2309 : vec4<f32> = u_xlat10;
        let x_2311 : vec4<f32> = u_xlat12;
        u_xlat14 = (vec4<f32>(x_2309.z, x_2309.w, x_2309.x, x_2309.z) + vec4<f32>(x_2311.z, x_2311.w, x_2311.x, x_2311.z));
        let x_2315 : f32 = u_xlat12.y;
        u_xlat11.z = x_2315;
        let x_2318 : f32 = u_xlat52.y;
        u_xlat11.w = x_2318;
        let x_2321 : f32 = u_xlat10.y;
        u_xlat13.z = x_2321;
        let x_2324 : f32 = u_xlat9.z;
        u_xlat13.w = x_2324;
        let x_2326 : vec4<f32> = u_xlat11;
        let x_2328 : vec4<f32> = u_xlat13;
        let x_2330 : vec3<f32> = (vec3<f32>(x_2326.z, x_2326.y, x_2326.w) + vec3<f32>(x_2328.z, x_2328.y, x_2328.w));
        let x_2331 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_2330.x, x_2330.y, x_2330.z, x_2331.w);
        let x_2333 : vec4<f32> = u_xlat10;
        let x_2335 : vec4<f32> = u_xlat14;
        let x_2337 : vec3<f32> = (vec3<f32>(x_2333.x, x_2333.z, x_2333.w) / vec3<f32>(x_2335.z, x_2335.w, x_2335.y));
        let x_2338 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_2337.x, x_2337.y, x_2337.z, x_2338.w);
        let x_2340 : vec4<f32> = u_xlat10;
        let x_2342 : vec3<f32> = (vec3<f32>(x_2340.x, x_2340.y, x_2340.z) + vec3<f32>(-2.5f, -0.5f, 1.5f));
        let x_2343 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_2342.x, x_2342.y, x_2342.z, x_2343.w);
        let x_2345 : vec4<f32> = u_xlat13;
        let x_2347 : vec4<f32> = u_xlat9;
        let x_2349 : vec3<f32> = (vec3<f32>(x_2345.z, x_2345.y, x_2345.w) / vec3<f32>(x_2347.x, x_2347.y, x_2347.z));
        let x_2350 : vec4<f32> = u_xlat11;
        u_xlat11 = vec4<f32>(x_2349.x, x_2349.y, x_2349.z, x_2350.w);
        let x_2352 : vec4<f32> = u_xlat11;
        let x_2354 : vec3<f32> = (vec3<f32>(x_2352.x, x_2352.y, x_2352.z) + vec3<f32>(-2.5f, -0.5f, 1.5f));
        let x_2355 : vec4<f32> = u_xlat11;
        u_xlat11 = vec4<f32>(x_2354.x, x_2354.y, x_2354.z, x_2355.w);
        let x_2357 : vec4<f32> = u_xlat10;
        let x_2360 : vec4<f32> = x_253.x_MainLightShadowmapSize;
        let x_2362 : vec3<f32> = (vec3<f32>(x_2357.y, x_2357.x, x_2357.z) * vec3<f32>(x_2360.x, x_2360.x, x_2360.x));
        let x_2363 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_2362.x, x_2362.y, x_2362.z, x_2363.w);
        let x_2365 : vec4<f32> = u_xlat11;
        let x_2368 : vec4<f32> = x_253.x_MainLightShadowmapSize;
        let x_2370 : vec3<f32> = (vec3<f32>(x_2365.x, x_2365.y, x_2365.z) * vec3<f32>(x_2368.y, x_2368.y, x_2368.y));
        let x_2371 : vec4<f32> = u_xlat11;
        u_xlat11 = vec4<f32>(x_2370.x, x_2370.y, x_2370.z, x_2371.w);
        let x_2374 : f32 = u_xlat11.x;
        u_xlat10.w = x_2374;
        let x_2376 : vec4<f32> = u_xlat8;
        let x_2379 : vec4<f32> = x_253.x_MainLightShadowmapSize;
        let x_2382 : vec4<f32> = u_xlat10;
        u_xlat12 = ((vec4<f32>(x_2376.x, x_2376.y, x_2376.x, x_2376.y) * vec4<f32>(x_2379.x, x_2379.y, x_2379.x, x_2379.y)) + vec4<f32>(x_2382.y, x_2382.w, x_2382.x, x_2382.w));
        let x_2385 : vec4<f32> = u_xlat8;
        let x_2388 : vec4<f32> = x_253.x_MainLightShadowmapSize;
        let x_2391 : vec4<f32> = u_xlat10;
        u_xlat52 = ((vec2<f32>(x_2385.x, x_2385.y) * vec2<f32>(x_2388.x, x_2388.y)) + vec2<f32>(x_2391.z, x_2391.w));
        let x_2395 : f32 = u_xlat10.y;
        u_xlat11.w = x_2395;
        let x_2397 : vec4<f32> = u_xlat11;
        let x_2398 : vec2<f32> = vec2<f32>(x_2397.y, x_2397.z);
        let x_2399 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_2399.x, x_2398.x, x_2399.z, x_2398.y);
        let x_2401 : vec4<f32> = u_xlat8;
        let x_2404 : vec4<f32> = x_253.x_MainLightShadowmapSize;
        let x_2407 : vec4<f32> = u_xlat10;
        u_xlat13 = ((vec4<f32>(x_2401.x, x_2401.y, x_2401.x, x_2401.y) * vec4<f32>(x_2404.x, x_2404.y, x_2404.x, x_2404.y)) + vec4<f32>(x_2407.x, x_2407.y, x_2407.z, x_2407.y));
        let x_2410 : vec4<f32> = u_xlat8;
        let x_2413 : vec4<f32> = x_253.x_MainLightShadowmapSize;
        let x_2416 : vec4<f32> = u_xlat11;
        u_xlat11 = ((vec4<f32>(x_2410.x, x_2410.y, x_2410.x, x_2410.y) * vec4<f32>(x_2413.x, x_2413.y, x_2413.x, x_2413.y)) + vec4<f32>(x_2416.w, x_2416.y, x_2416.w, x_2416.z));
        let x_2419 : vec4<f32> = u_xlat8;
        let x_2422 : vec4<f32> = x_253.x_MainLightShadowmapSize;
        let x_2425 : vec4<f32> = u_xlat10;
        u_xlat10 = ((vec4<f32>(x_2419.x, x_2419.y, x_2419.x, x_2419.y) * vec4<f32>(x_2422.x, x_2422.y, x_2422.x, x_2422.y)) + vec4<f32>(x_2425.x, x_2425.w, x_2425.z, x_2425.w));
        let x_2428 : vec4<f32> = u_xlat9;
        let x_2430 : vec4<f32> = u_xlat14;
        u_xlat15 = (vec4<f32>(x_2428.x, x_2428.x, x_2428.x, x_2428.y) * vec4<f32>(x_2430.z, x_2430.w, x_2430.y, x_2430.z));
        let x_2433 : vec4<f32> = u_xlat9;
        let x_2435 : vec4<f32> = u_xlat14;
        u_xlat16 = (vec4<f32>(x_2433.y, x_2433.y, x_2433.z, x_2433.z) * x_2435);
        let x_2439 : f32 = u_xlat9.z;
        let x_2441 : f32 = u_xlat14.y;
        u_xlat72 = (x_2439 * x_2441);
        let x_2444 : vec4<f32> = u_xlat12;
        let x_2445 : vec2<f32> = vec2<f32>(x_2444.x, x_2444.y);
        let x_2447 : f32 = u_xlat2.z;
        txVec34 = vec3<f32>(x_2445.x, x_2445.y, x_2447);
        let x_2455 : vec3<f32> = txVec34;
        let x_2457 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2455.xy, x_2455.z);
        u_xlat73 = x_2457;
        let x_2459 : vec4<f32> = u_xlat12;
        let x_2460 : vec2<f32> = vec2<f32>(x_2459.z, x_2459.w);
        let x_2462 : f32 = u_xlat2.z;
        txVec35 = vec3<f32>(x_2460.x, x_2460.y, x_2462);
        let x_2469 : vec3<f32> = txVec35;
        let x_2471 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2469.xy, x_2469.z);
        u_xlat8.x = x_2471;
        let x_2474 : f32 = u_xlat8.x;
        let x_2476 : f32 = u_xlat15.y;
        u_xlat8.x = (x_2474 * x_2476);
        let x_2480 : f32 = u_xlat15.x;
        let x_2481 : f32 = u_xlat73;
        let x_2484 : f32 = u_xlat8.x;
        u_xlat73 = ((x_2480 * x_2481) + x_2484);
        let x_2487 : vec2<f32> = u_xlat52;
        let x_2489 : f32 = u_xlat2.z;
        txVec36 = vec3<f32>(x_2487.x, x_2487.y, x_2489);
        let x_2496 : vec3<f32> = txVec36;
        let x_2498 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2496.xy, x_2496.z);
        u_xlat8.x = x_2498;
        let x_2501 : f32 = u_xlat15.z;
        let x_2503 : f32 = u_xlat8.x;
        let x_2505 : f32 = u_xlat73;
        u_xlat73 = ((x_2501 * x_2503) + x_2505);
        let x_2508 : vec4<f32> = u_xlat11;
        let x_2509 : vec2<f32> = vec2<f32>(x_2508.x, x_2508.y);
        let x_2511 : f32 = u_xlat2.z;
        txVec37 = vec3<f32>(x_2509.x, x_2509.y, x_2511);
        let x_2518 : vec3<f32> = txVec37;
        let x_2520 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2518.xy, x_2518.z);
        u_xlat8.x = x_2520;
        let x_2523 : f32 = u_xlat15.w;
        let x_2525 : f32 = u_xlat8.x;
        let x_2527 : f32 = u_xlat73;
        u_xlat73 = ((x_2523 * x_2525) + x_2527);
        let x_2530 : vec4<f32> = u_xlat13;
        let x_2531 : vec2<f32> = vec2<f32>(x_2530.x, x_2530.y);
        let x_2533 : f32 = u_xlat2.z;
        txVec38 = vec3<f32>(x_2531.x, x_2531.y, x_2533);
        let x_2540 : vec3<f32> = txVec38;
        let x_2542 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2540.xy, x_2540.z);
        u_xlat8.x = x_2542;
        let x_2545 : f32 = u_xlat16.x;
        let x_2547 : f32 = u_xlat8.x;
        let x_2549 : f32 = u_xlat73;
        u_xlat73 = ((x_2545 * x_2547) + x_2549);
        let x_2552 : vec4<f32> = u_xlat13;
        let x_2553 : vec2<f32> = vec2<f32>(x_2552.z, x_2552.w);
        let x_2555 : f32 = u_xlat2.z;
        txVec39 = vec3<f32>(x_2553.x, x_2553.y, x_2555);
        let x_2562 : vec3<f32> = txVec39;
        let x_2564 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2562.xy, x_2562.z);
        u_xlat8.x = x_2564;
        let x_2567 : f32 = u_xlat16.y;
        let x_2569 : f32 = u_xlat8.x;
        let x_2571 : f32 = u_xlat73;
        u_xlat73 = ((x_2567 * x_2569) + x_2571);
        let x_2574 : vec4<f32> = u_xlat11;
        let x_2575 : vec2<f32> = vec2<f32>(x_2574.z, x_2574.w);
        let x_2577 : f32 = u_xlat2.z;
        txVec40 = vec3<f32>(x_2575.x, x_2575.y, x_2577);
        let x_2584 : vec3<f32> = txVec40;
        let x_2586 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2584.xy, x_2584.z);
        u_xlat8.x = x_2586;
        let x_2589 : f32 = u_xlat16.z;
        let x_2591 : f32 = u_xlat8.x;
        let x_2593 : f32 = u_xlat73;
        u_xlat73 = ((x_2589 * x_2591) + x_2593);
        let x_2596 : vec4<f32> = u_xlat10;
        let x_2597 : vec2<f32> = vec2<f32>(x_2596.x, x_2596.y);
        let x_2599 : f32 = u_xlat2.z;
        txVec41 = vec3<f32>(x_2597.x, x_2597.y, x_2599);
        let x_2606 : vec3<f32> = txVec41;
        let x_2608 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2606.xy, x_2606.z);
        u_xlat8.x = x_2608;
        let x_2611 : f32 = u_xlat16.w;
        let x_2613 : f32 = u_xlat8.x;
        let x_2615 : f32 = u_xlat73;
        u_xlat73 = ((x_2611 * x_2613) + x_2615);
        let x_2618 : vec4<f32> = u_xlat10;
        let x_2619 : vec2<f32> = vec2<f32>(x_2618.z, x_2618.w);
        let x_2621 : f32 = u_xlat2.z;
        txVec42 = vec3<f32>(x_2619.x, x_2619.y, x_2621);
        let x_2628 : vec3<f32> = txVec42;
        let x_2630 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2628.xy, x_2628.z);
        u_xlat8.x = x_2630;
        let x_2632 : f32 = u_xlat72;
        let x_2634 : f32 = u_xlat8.x;
        let x_2636 : f32 = u_xlat73;
        u_xlat0.x = ((x_2632 * x_2634) + x_2636);
      } else {
        let x_2640 : vec4<f32> = u_xlat2;
        let x_2643 : vec4<f32> = x_253.x_MainLightShadowmapSize;
        let x_2646 : vec2<f32> = ((vec2<f32>(x_2640.x, x_2640.y) * vec2<f32>(x_2643.z, x_2643.w)) + vec2<f32>(0.5f, 0.5f));
        let x_2647 : vec4<f32> = u_xlat8;
        u_xlat8 = vec4<f32>(x_2646.x, x_2646.y, x_2647.z, x_2647.w);
        let x_2649 : vec4<f32> = u_xlat8;
        let x_2651 : vec2<f32> = floor(vec2<f32>(x_2649.x, x_2649.y));
        let x_2652 : vec4<f32> = u_xlat8;
        u_xlat8 = vec4<f32>(x_2651.x, x_2651.y, x_2652.z, x_2652.w);
        let x_2654 : vec4<f32> = u_xlat2;
        let x_2657 : vec4<f32> = x_253.x_MainLightShadowmapSize;
        let x_2660 : vec4<f32> = u_xlat8;
        u_xlat52 = ((vec2<f32>(x_2654.x, x_2654.y) * vec2<f32>(x_2657.z, x_2657.w)) + -(vec2<f32>(x_2660.x, x_2660.y)));
        let x_2664 : vec2<f32> = u_xlat52;
        u_xlat9 = (vec4<f32>(x_2664.x, x_2664.x, x_2664.y, x_2664.y) + vec4<f32>(0.5f, 1.0f, 0.5f, 1.0f));
        let x_2667 : vec4<f32> = u_xlat9;
        let x_2669 : vec4<f32> = u_xlat9;
        u_xlat10 = (vec4<f32>(x_2667.x, x_2667.x, x_2667.z, x_2667.z) * vec4<f32>(x_2669.x, x_2669.x, x_2669.z, x_2669.z));
        let x_2672 : vec4<f32> = u_xlat10;
        let x_2674 : vec2<f32> = (vec2<f32>(x_2672.y, x_2672.w) * vec2<f32>(0.040816002f, 0.040816002f));
        let x_2675 : vec4<f32> = u_xlat11;
        u_xlat11 = vec4<f32>(x_2675.x, x_2674.x, x_2675.z, x_2674.y);
        let x_2677 : vec4<f32> = u_xlat10;
        let x_2680 : vec2<f32> = u_xlat52;
        let x_2682 : vec2<f32> = ((vec2<f32>(x_2677.x, x_2677.z) * vec2<f32>(0.5f, 0.5f)) + -(x_2680));
        let x_2683 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_2682.x, x_2683.y, x_2682.y, x_2683.w);
        let x_2685 : vec2<f32> = u_xlat52;
        let x_2687 : vec2<f32> = (-(x_2685) + vec2<f32>(1.0f, 1.0f));
        let x_2688 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_2687.x, x_2687.y, x_2688.z, x_2688.w);
        let x_2690 : vec2<f32> = u_xlat52;
        u_xlat54 = min(x_2690, vec2<f32>(0.0f, 0.0f));
        let x_2692 : vec2<f32> = u_xlat54;
        let x_2694 : vec2<f32> = u_xlat54;
        let x_2696 : vec4<f32> = u_xlat10;
        let x_2698 : vec2<f32> = ((-(x_2692) * x_2694) + vec2<f32>(x_2696.x, x_2696.y));
        let x_2699 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_2698.x, x_2698.y, x_2699.z, x_2699.w);
        let x_2701 : vec2<f32> = u_xlat52;
        u_xlat54 = max(x_2701, vec2<f32>(0.0f, 0.0f));
        let x_2704 : vec2<f32> = u_xlat54;
        let x_2706 : vec2<f32> = u_xlat54;
        let x_2708 : vec4<f32> = u_xlat9;
        let x_2710 : vec2<f32> = ((-(x_2704) * x_2706) + vec2<f32>(x_2708.y, x_2708.w));
        let x_2711 : vec3<f32> = u_xlat31;
        u_xlat31 = vec3<f32>(x_2710.x, x_2711.y, x_2710.y);
        let x_2713 : vec4<f32> = u_xlat10;
        let x_2715 : vec2<f32> = (vec2<f32>(x_2713.x, x_2713.y) + vec2<f32>(2.0f, 2.0f));
        let x_2716 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_2715.x, x_2715.y, x_2716.z, x_2716.w);
        let x_2718 : vec3<f32> = u_xlat31;
        let x_2720 : vec2<f32> = (vec2<f32>(x_2718.x, x_2718.z) + vec2<f32>(2.0f, 2.0f));
        let x_2721 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_2721.x, x_2720.x, x_2721.z, x_2720.y);
        let x_2724 : f32 = u_xlat9.y;
        u_xlat12.z = (x_2724 * 0.081632003f);
        let x_2727 : vec4<f32> = u_xlat9;
        let x_2729 : vec3<f32> = (vec3<f32>(x_2727.z, x_2727.x, x_2727.w) * vec3<f32>(0.081632003f, 0.081632003f, 0.081632003f));
        let x_2730 : vec4<f32> = u_xlat13;
        u_xlat13 = vec4<f32>(x_2729.x, x_2729.y, x_2729.z, x_2730.w);
        let x_2732 : vec4<f32> = u_xlat10;
        let x_2734 : vec2<f32> = (vec2<f32>(x_2732.x, x_2732.y) * vec2<f32>(0.081632003f, 0.081632003f));
        let x_2735 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_2734.x, x_2734.y, x_2735.z, x_2735.w);
        let x_2738 : f32 = u_xlat13.y;
        u_xlat12.x = x_2738;
        let x_2740 : vec2<f32> = u_xlat52;
        let x_2743 : vec2<f32> = ((vec2<f32>(x_2740.x, x_2740.x) * vec2<f32>(-0.081632003f, 0.081632003f)) + vec2<f32>(0.163264006f, 0.081632003f));
        let x_2744 : vec4<f32> = u_xlat12;
        u_xlat12 = vec4<f32>(x_2744.x, x_2743.x, x_2744.z, x_2743.y);
        let x_2746 : vec2<f32> = u_xlat52;
        let x_2749 : vec2<f32> = ((vec2<f32>(x_2746.x, x_2746.x) * vec2<f32>(-0.081632003f, 0.081632003f)) + vec2<f32>(0.081632003f, 0.163264006f));
        let x_2750 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_2749.x, x_2750.y, x_2749.y, x_2750.w);
        let x_2753 : f32 = u_xlat9.x;
        u_xlat10.y = x_2753;
        let x_2756 : f32 = u_xlat11.y;
        u_xlat10.w = x_2756;
        let x_2758 : vec4<f32> = u_xlat10;
        let x_2759 : vec4<f32> = u_xlat12;
        u_xlat12 = (x_2758 + x_2759);
        let x_2761 : vec2<f32> = u_xlat52;
        let x_2764 : vec2<f32> = ((vec2<f32>(x_2761.y, x_2761.y) * vec2<f32>(-0.081632003f, 0.081632003f)) + vec2<f32>(0.163264006f, 0.081632003f));
        let x_2765 : vec4<f32> = u_xlat13;
        u_xlat13 = vec4<f32>(x_2765.x, x_2764.x, x_2765.z, x_2764.y);
        let x_2767 : vec2<f32> = u_xlat52;
        let x_2770 : vec2<f32> = ((vec2<f32>(x_2767.y, x_2767.y) * vec2<f32>(-0.081632003f, 0.081632003f)) + vec2<f32>(0.081632003f, 0.163264006f));
        let x_2771 : vec4<f32> = u_xlat11;
        u_xlat11 = vec4<f32>(x_2770.x, x_2771.y, x_2770.y, x_2771.w);
        let x_2774 : f32 = u_xlat9.y;
        u_xlat11.y = x_2774;
        let x_2776 : vec4<f32> = u_xlat11;
        let x_2777 : vec4<f32> = u_xlat13;
        u_xlat9 = (x_2776 + x_2777);
        let x_2779 : vec4<f32> = u_xlat10;
        let x_2780 : vec4<f32> = u_xlat12;
        u_xlat10 = (x_2779 / x_2780);
        let x_2782 : vec4<f32> = u_xlat10;
        u_xlat10 = (x_2782 + vec4<f32>(-3.5f, -1.5f, 0.5f, 2.5f));
        let x_2784 : vec4<f32> = u_xlat11;
        let x_2785 : vec4<f32> = u_xlat9;
        u_xlat11 = (x_2784 / x_2785);
        let x_2787 : vec4<f32> = u_xlat11;
        u_xlat11 = (x_2787 + vec4<f32>(-3.5f, -1.5f, 0.5f, 2.5f));
        let x_2789 : vec4<f32> = u_xlat10;
        let x_2792 : vec4<f32> = x_253.x_MainLightShadowmapSize;
        u_xlat10 = (vec4<f32>(x_2789.w, x_2789.x, x_2789.y, x_2789.z) * vec4<f32>(x_2792.x, x_2792.x, x_2792.x, x_2792.x));
        let x_2795 : vec4<f32> = u_xlat11;
        let x_2798 : vec4<f32> = x_253.x_MainLightShadowmapSize;
        u_xlat11 = (vec4<f32>(x_2795.x, x_2795.w, x_2795.y, x_2795.z) * vec4<f32>(x_2798.y, x_2798.y, x_2798.y, x_2798.y));
        let x_2801 : vec4<f32> = u_xlat10;
        let x_2802 : vec3<f32> = vec3<f32>(x_2801.y, x_2801.z, x_2801.w);
        let x_2803 : vec4<f32> = u_xlat13;
        u_xlat13 = vec4<f32>(x_2802.x, x_2803.y, x_2802.y, x_2802.z);
        let x_2806 : f32 = u_xlat11.x;
        u_xlat13.y = x_2806;
        let x_2808 : vec4<f32> = u_xlat8;
        let x_2811 : vec4<f32> = x_253.x_MainLightShadowmapSize;
        let x_2814 : vec4<f32> = u_xlat13;
        u_xlat14 = ((vec4<f32>(x_2808.x, x_2808.y, x_2808.x, x_2808.y) * vec4<f32>(x_2811.x, x_2811.y, x_2811.x, x_2811.y)) + vec4<f32>(x_2814.x, x_2814.y, x_2814.z, x_2814.y));
        let x_2817 : vec4<f32> = u_xlat8;
        let x_2820 : vec4<f32> = x_253.x_MainLightShadowmapSize;
        let x_2823 : vec4<f32> = u_xlat13;
        u_xlat52 = ((vec2<f32>(x_2817.x, x_2817.y) * vec2<f32>(x_2820.x, x_2820.y)) + vec2<f32>(x_2823.w, x_2823.y));
        let x_2827 : f32 = u_xlat13.y;
        u_xlat10.y = x_2827;
        let x_2830 : f32 = u_xlat11.z;
        u_xlat13.y = x_2830;
        let x_2832 : vec4<f32> = u_xlat8;
        let x_2835 : vec4<f32> = x_253.x_MainLightShadowmapSize;
        let x_2838 : vec4<f32> = u_xlat13;
        u_xlat15 = ((vec4<f32>(x_2832.x, x_2832.y, x_2832.x, x_2832.y) * vec4<f32>(x_2835.x, x_2835.y, x_2835.x, x_2835.y)) + vec4<f32>(x_2838.x, x_2838.y, x_2838.z, x_2838.y));
        let x_2841 : vec4<f32> = u_xlat8;
        let x_2844 : vec4<f32> = x_253.x_MainLightShadowmapSize;
        let x_2847 : vec4<f32> = u_xlat13;
        let x_2849 : vec2<f32> = ((vec2<f32>(x_2841.x, x_2841.y) * vec2<f32>(x_2844.x, x_2844.y)) + vec2<f32>(x_2847.w, x_2847.y));
        let x_2850 : vec4<f32> = u_xlat16;
        u_xlat16 = vec4<f32>(x_2849.x, x_2849.y, x_2850.z, x_2850.w);
        let x_2853 : f32 = u_xlat13.y;
        u_xlat10.z = x_2853;
        let x_2855 : vec4<f32> = u_xlat8;
        let x_2858 : vec4<f32> = x_253.x_MainLightShadowmapSize;
        let x_2861 : vec4<f32> = u_xlat10;
        u_xlat17 = ((vec4<f32>(x_2855.x, x_2855.y, x_2855.x, x_2855.y) * vec4<f32>(x_2858.x, x_2858.y, x_2858.x, x_2858.y)) + vec4<f32>(x_2861.x, x_2861.y, x_2861.x, x_2861.z));
        let x_2865 : f32 = u_xlat11.w;
        u_xlat13.y = x_2865;
        let x_2867 : vec4<f32> = u_xlat8;
        let x_2870 : vec4<f32> = x_253.x_MainLightShadowmapSize;
        let x_2873 : vec4<f32> = u_xlat13;
        u_xlat18 = ((vec4<f32>(x_2867.x, x_2867.y, x_2867.x, x_2867.y) * vec4<f32>(x_2870.x, x_2870.y, x_2870.x, x_2870.y)) + vec4<f32>(x_2873.x, x_2873.y, x_2873.z, x_2873.y));
        let x_2877 : vec4<f32> = u_xlat8;
        let x_2880 : vec4<f32> = x_253.x_MainLightShadowmapSize;
        let x_2883 : vec4<f32> = u_xlat13;
        u_xlat32 = ((vec2<f32>(x_2877.x, x_2877.y) * vec2<f32>(x_2880.x, x_2880.y)) + vec2<f32>(x_2883.w, x_2883.y));
        let x_2887 : f32 = u_xlat13.y;
        u_xlat10.w = x_2887;
        let x_2890 : vec4<f32> = u_xlat8;
        let x_2893 : vec4<f32> = x_253.x_MainLightShadowmapSize;
        let x_2896 : vec4<f32> = u_xlat10;
        u_xlat60 = ((vec2<f32>(x_2890.x, x_2890.y) * vec2<f32>(x_2893.x, x_2893.y)) + vec2<f32>(x_2896.x, x_2896.w));
        let x_2899 : vec4<f32> = u_xlat13;
        let x_2900 : vec3<f32> = vec3<f32>(x_2899.x, x_2899.z, x_2899.w);
        let x_2901 : vec4<f32> = u_xlat11;
        u_xlat11 = vec4<f32>(x_2900.x, x_2901.y, x_2900.y, x_2900.z);
        let x_2903 : vec4<f32> = u_xlat8;
        let x_2906 : vec4<f32> = x_253.x_MainLightShadowmapSize;
        let x_2909 : vec4<f32> = u_xlat11;
        u_xlat13 = ((vec4<f32>(x_2903.x, x_2903.y, x_2903.x, x_2903.y) * vec4<f32>(x_2906.x, x_2906.y, x_2906.x, x_2906.y)) + vec4<f32>(x_2909.x, x_2909.y, x_2909.z, x_2909.y));
        let x_2913 : vec4<f32> = u_xlat8;
        let x_2916 : vec4<f32> = x_253.x_MainLightShadowmapSize;
        let x_2919 : vec4<f32> = u_xlat11;
        u_xlat55 = ((vec2<f32>(x_2913.x, x_2913.y) * vec2<f32>(x_2916.x, x_2916.y)) + vec2<f32>(x_2919.w, x_2919.y));
        let x_2923 : f32 = u_xlat10.x;
        u_xlat11.x = x_2923;
        let x_2925 : vec4<f32> = u_xlat8;
        let x_2928 : vec4<f32> = x_253.x_MainLightShadowmapSize;
        let x_2931 : vec4<f32> = u_xlat11;
        let x_2933 : vec2<f32> = ((vec2<f32>(x_2925.x, x_2925.y) * vec2<f32>(x_2928.x, x_2928.y)) + vec2<f32>(x_2931.x, x_2931.y));
        let x_2934 : vec4<f32> = u_xlat8;
        u_xlat8 = vec4<f32>(x_2933.x, x_2933.y, x_2934.z, x_2934.w);
        let x_2936 : vec4<f32> = u_xlat9;
        let x_2938 : vec4<f32> = u_xlat12;
        u_xlat19 = (vec4<f32>(x_2936.x, x_2936.x, x_2936.x, x_2936.x) * x_2938);
        let x_2941 : vec4<f32> = u_xlat9;
        let x_2943 : vec4<f32> = u_xlat12;
        u_xlat20 = (vec4<f32>(x_2941.y, x_2941.y, x_2941.y, x_2941.y) * x_2943);
        let x_2946 : vec4<f32> = u_xlat9;
        let x_2948 : vec4<f32> = u_xlat12;
        u_xlat21 = (vec4<f32>(x_2946.z, x_2946.z, x_2946.z, x_2946.z) * x_2948);
        let x_2950 : vec4<f32> = u_xlat9;
        let x_2952 : vec4<f32> = u_xlat12;
        u_xlat9 = (vec4<f32>(x_2950.w, x_2950.w, x_2950.w, x_2950.w) * x_2952);
        let x_2955 : vec4<f32> = u_xlat14;
        let x_2956 : vec2<f32> = vec2<f32>(x_2955.x, x_2955.y);
        let x_2958 : f32 = u_xlat2.z;
        txVec43 = vec3<f32>(x_2956.x, x_2956.y, x_2958);
        let x_2965 : vec3<f32> = txVec43;
        let x_2967 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2965.xy, x_2965.z);
        u_xlat72 = x_2967;
        let x_2969 : vec4<f32> = u_xlat14;
        let x_2970 : vec2<f32> = vec2<f32>(x_2969.z, x_2969.w);
        let x_2972 : f32 = u_xlat2.z;
        txVec44 = vec3<f32>(x_2970.x, x_2970.y, x_2972);
        let x_2979 : vec3<f32> = txVec44;
        let x_2981 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2979.xy, x_2979.z);
        u_xlat73 = x_2981;
        let x_2982 : f32 = u_xlat73;
        let x_2984 : f32 = u_xlat19.y;
        u_xlat73 = (x_2982 * x_2984);
        let x_2987 : f32 = u_xlat19.x;
        let x_2988 : f32 = u_xlat72;
        let x_2990 : f32 = u_xlat73;
        u_xlat72 = ((x_2987 * x_2988) + x_2990);
        let x_2993 : vec2<f32> = u_xlat52;
        let x_2995 : f32 = u_xlat2.z;
        txVec45 = vec3<f32>(x_2993.x, x_2993.y, x_2995);
        let x_3002 : vec3<f32> = txVec45;
        let x_3004 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_3002.xy, x_3002.z);
        u_xlat73 = x_3004;
        let x_3006 : f32 = u_xlat19.z;
        let x_3007 : f32 = u_xlat73;
        let x_3009 : f32 = u_xlat72;
        u_xlat72 = ((x_3006 * x_3007) + x_3009);
        let x_3012 : vec4<f32> = u_xlat17;
        let x_3013 : vec2<f32> = vec2<f32>(x_3012.x, x_3012.y);
        let x_3015 : f32 = u_xlat2.z;
        txVec46 = vec3<f32>(x_3013.x, x_3013.y, x_3015);
        let x_3022 : vec3<f32> = txVec46;
        let x_3024 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_3022.xy, x_3022.z);
        u_xlat73 = x_3024;
        let x_3026 : f32 = u_xlat19.w;
        let x_3027 : f32 = u_xlat73;
        let x_3029 : f32 = u_xlat72;
        u_xlat72 = ((x_3026 * x_3027) + x_3029);
        let x_3032 : vec4<f32> = u_xlat15;
        let x_3033 : vec2<f32> = vec2<f32>(x_3032.x, x_3032.y);
        let x_3035 : f32 = u_xlat2.z;
        txVec47 = vec3<f32>(x_3033.x, x_3033.y, x_3035);
        let x_3042 : vec3<f32> = txVec47;
        let x_3044 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_3042.xy, x_3042.z);
        u_xlat73 = x_3044;
        let x_3046 : f32 = u_xlat20.x;
        let x_3047 : f32 = u_xlat73;
        let x_3049 : f32 = u_xlat72;
        u_xlat72 = ((x_3046 * x_3047) + x_3049);
        let x_3052 : vec4<f32> = u_xlat15;
        let x_3053 : vec2<f32> = vec2<f32>(x_3052.z, x_3052.w);
        let x_3055 : f32 = u_xlat2.z;
        txVec48 = vec3<f32>(x_3053.x, x_3053.y, x_3055);
        let x_3062 : vec3<f32> = txVec48;
        let x_3064 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_3062.xy, x_3062.z);
        u_xlat73 = x_3064;
        let x_3066 : f32 = u_xlat20.y;
        let x_3067 : f32 = u_xlat73;
        let x_3069 : f32 = u_xlat72;
        u_xlat72 = ((x_3066 * x_3067) + x_3069);
        let x_3072 : vec4<f32> = u_xlat16;
        let x_3073 : vec2<f32> = vec2<f32>(x_3072.x, x_3072.y);
        let x_3075 : f32 = u_xlat2.z;
        txVec49 = vec3<f32>(x_3073.x, x_3073.y, x_3075);
        let x_3082 : vec3<f32> = txVec49;
        let x_3084 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_3082.xy, x_3082.z);
        u_xlat73 = x_3084;
        let x_3086 : f32 = u_xlat20.z;
        let x_3087 : f32 = u_xlat73;
        let x_3089 : f32 = u_xlat72;
        u_xlat72 = ((x_3086 * x_3087) + x_3089);
        let x_3092 : vec4<f32> = u_xlat17;
        let x_3093 : vec2<f32> = vec2<f32>(x_3092.z, x_3092.w);
        let x_3095 : f32 = u_xlat2.z;
        txVec50 = vec3<f32>(x_3093.x, x_3093.y, x_3095);
        let x_3102 : vec3<f32> = txVec50;
        let x_3104 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_3102.xy, x_3102.z);
        u_xlat73 = x_3104;
        let x_3106 : f32 = u_xlat20.w;
        let x_3107 : f32 = u_xlat73;
        let x_3109 : f32 = u_xlat72;
        u_xlat72 = ((x_3106 * x_3107) + x_3109);
        let x_3112 : vec4<f32> = u_xlat18;
        let x_3113 : vec2<f32> = vec2<f32>(x_3112.x, x_3112.y);
        let x_3115 : f32 = u_xlat2.z;
        txVec51 = vec3<f32>(x_3113.x, x_3113.y, x_3115);
        let x_3122 : vec3<f32> = txVec51;
        let x_3124 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_3122.xy, x_3122.z);
        u_xlat73 = x_3124;
        let x_3126 : f32 = u_xlat21.x;
        let x_3127 : f32 = u_xlat73;
        let x_3129 : f32 = u_xlat72;
        u_xlat72 = ((x_3126 * x_3127) + x_3129);
        let x_3132 : vec4<f32> = u_xlat18;
        let x_3133 : vec2<f32> = vec2<f32>(x_3132.z, x_3132.w);
        let x_3135 : f32 = u_xlat2.z;
        txVec52 = vec3<f32>(x_3133.x, x_3133.y, x_3135);
        let x_3142 : vec3<f32> = txVec52;
        let x_3144 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_3142.xy, x_3142.z);
        u_xlat73 = x_3144;
        let x_3146 : f32 = u_xlat21.y;
        let x_3147 : f32 = u_xlat73;
        let x_3149 : f32 = u_xlat72;
        u_xlat72 = ((x_3146 * x_3147) + x_3149);
        let x_3152 : vec2<f32> = u_xlat32;
        let x_3154 : f32 = u_xlat2.z;
        txVec53 = vec3<f32>(x_3152.x, x_3152.y, x_3154);
        let x_3161 : vec3<f32> = txVec53;
        let x_3163 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_3161.xy, x_3161.z);
        u_xlat73 = x_3163;
        let x_3165 : f32 = u_xlat21.z;
        let x_3166 : f32 = u_xlat73;
        let x_3168 : f32 = u_xlat72;
        u_xlat72 = ((x_3165 * x_3166) + x_3168);
        let x_3171 : vec2<f32> = u_xlat60;
        let x_3173 : f32 = u_xlat2.z;
        txVec54 = vec3<f32>(x_3171.x, x_3171.y, x_3173);
        let x_3180 : vec3<f32> = txVec54;
        let x_3182 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_3180.xy, x_3180.z);
        u_xlat73 = x_3182;
        let x_3184 : f32 = u_xlat21.w;
        let x_3185 : f32 = u_xlat73;
        let x_3187 : f32 = u_xlat72;
        u_xlat72 = ((x_3184 * x_3185) + x_3187);
        let x_3190 : vec4<f32> = u_xlat13;
        let x_3191 : vec2<f32> = vec2<f32>(x_3190.x, x_3190.y);
        let x_3193 : f32 = u_xlat2.z;
        txVec55 = vec3<f32>(x_3191.x, x_3191.y, x_3193);
        let x_3200 : vec3<f32> = txVec55;
        let x_3202 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_3200.xy, x_3200.z);
        u_xlat73 = x_3202;
        let x_3204 : f32 = u_xlat9.x;
        let x_3205 : f32 = u_xlat73;
        let x_3207 : f32 = u_xlat72;
        u_xlat72 = ((x_3204 * x_3205) + x_3207);
        let x_3210 : vec4<f32> = u_xlat13;
        let x_3211 : vec2<f32> = vec2<f32>(x_3210.z, x_3210.w);
        let x_3213 : f32 = u_xlat2.z;
        txVec56 = vec3<f32>(x_3211.x, x_3211.y, x_3213);
        let x_3220 : vec3<f32> = txVec56;
        let x_3222 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_3220.xy, x_3220.z);
        u_xlat73 = x_3222;
        let x_3224 : f32 = u_xlat9.y;
        let x_3225 : f32 = u_xlat73;
        let x_3227 : f32 = u_xlat72;
        u_xlat72 = ((x_3224 * x_3225) + x_3227);
        let x_3230 : vec2<f32> = u_xlat55;
        let x_3232 : f32 = u_xlat2.z;
        txVec57 = vec3<f32>(x_3230.x, x_3230.y, x_3232);
        let x_3239 : vec3<f32> = txVec57;
        let x_3241 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_3239.xy, x_3239.z);
        u_xlat73 = x_3241;
        let x_3243 : f32 = u_xlat9.z;
        let x_3244 : f32 = u_xlat73;
        let x_3246 : f32 = u_xlat72;
        u_xlat72 = ((x_3243 * x_3244) + x_3246);
        let x_3249 : vec4<f32> = u_xlat8;
        let x_3250 : vec2<f32> = vec2<f32>(x_3249.x, x_3249.y);
        let x_3252 : f32 = u_xlat2.z;
        txVec58 = vec3<f32>(x_3250.x, x_3250.y, x_3252);
        let x_3259 : vec3<f32> = txVec58;
        let x_3261 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_3259.xy, x_3259.z);
        u_xlat73 = x_3261;
        let x_3263 : f32 = u_xlat9.w;
        let x_3264 : f32 = u_xlat73;
        let x_3266 : f32 = u_xlat72;
        u_xlat0.x = ((x_3263 * x_3264) + x_3266);
      }
    }
  } else {
    let x_3271 : vec4<f32> = u_xlat2;
    let x_3272 : vec2<f32> = vec2<f32>(x_3271.x, x_3271.y);
    let x_3274 : f32 = u_xlat2.z;
    txVec59 = vec3<f32>(x_3272.x, x_3272.y, x_3274);
    let x_3281 : vec3<f32> = txVec59;
    let x_3283 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_3281.xy, x_3281.z);
    u_xlat0.x = x_3283;
  }
  let x_3286 : f32 = u_xlat0.x;
  let x_3288 : f32 = x_253.x_MainLightShadowParams.x;
  let x_3290 : f32 = u_xlat68;
  u_xlat0.x = ((x_3286 * x_3288) + x_3290);
  let x_3293 : bool = u_xlatb3;
  if (x_3293) {
    x_3294 = 1.0f;
  } else {
    let x_3299 : f32 = u_xlat0.x;
    x_3294 = x_3299;
  }
  let x_3300 : f32 = x_3294;
  u_xlat0.x = x_3300;
  let x_3302 : vec3<f32> = vs_INTERP0;
  let x_3304 : vec3<f32> = x_139.x_WorldSpaceCameraPos;
  let x_3306 : vec3<f32> = (x_3302 + -(x_3304));
  let x_3307 : vec4<f32> = u_xlat2;
  u_xlat2 = vec4<f32>(x_3306.x, x_3306.y, x_3306.z, x_3307.w);
  let x_3309 : vec4<f32> = u_xlat2;
  let x_3311 : vec4<f32> = u_xlat2;
  u_xlat2.x = dot(vec3<f32>(x_3309.x, x_3309.y, x_3309.z), vec3<f32>(x_3311.x, x_3311.y, x_3311.z));
  let x_3316 : f32 = u_xlat2.x;
  let x_3318 : f32 = x_253.x_MainLightShadowParams.z;
  let x_3321 : f32 = x_253.x_MainLightShadowParams.w;
  u_xlat2.x = ((x_3316 * x_3318) + x_3321);
  let x_3325 : f32 = u_xlat2.x;
  u_xlat2.x = clamp(x_3325, 0.0f, 1.0f);
  let x_3330 : f32 = u_xlat0.x;
  u_xlat24 = (-(x_3330) + 1.0f);
  let x_3334 : f32 = u_xlat2.x;
  let x_3335 : f32 = u_xlat24;
  let x_3338 : f32 = u_xlat0.x;
  u_xlat0.x = ((x_3334 * x_3335) + x_3338);
  let x_3341 : f32 = u_xlat50;
  let x_3344 : vec4<f32> = x_139.x_MainLightColor;
  let x_3346 : vec3<f32> = (vec3<f32>(x_3341, x_3341, x_3341) * vec3<f32>(x_3344.x, x_3344.y, x_3344.z));
  let x_3347 : vec4<f32> = u_xlat2;
  u_xlat2 = vec4<f32>(x_3346.x, x_3346.y, x_3346.z, x_3347.w);
  let x_3349 : vec4<f32> = u_xlat7;
  let x_3352 : vec4<f32> = u_xlat4;
  u_xlat68 = dot(-(vec3<f32>(x_3349.x, x_3349.y, x_3349.z)), vec3<f32>(x_3352.x, x_3352.y, x_3352.z));
  let x_3355 : f32 = u_xlat68;
  let x_3356 : f32 = u_xlat68;
  u_xlat68 = (x_3355 + x_3356);
  let x_3358 : vec4<f32> = u_xlat4;
  let x_3360 : f32 = u_xlat68;
  let x_3364 : vec4<f32> = u_xlat7;
  let x_3367 : vec3<f32> = ((vec3<f32>(x_3358.x, x_3358.y, x_3358.z) * -(vec3<f32>(x_3360, x_3360, x_3360))) + -(vec3<f32>(x_3364.x, x_3364.y, x_3364.z)));
  let x_3368 : vec4<f32> = u_xlat8;
  u_xlat8 = vec4<f32>(x_3367.x, x_3367.y, x_3367.z, x_3368.w);
  let x_3370 : vec4<f32> = u_xlat4;
  let x_3372 : vec4<f32> = u_xlat7;
  u_xlat68 = dot(vec3<f32>(x_3370.x, x_3370.y, x_3370.z), vec3<f32>(x_3372.x, x_3372.y, x_3372.z));
  let x_3375 : f32 = u_xlat68;
  u_xlat68 = clamp(x_3375, 0.0f, 1.0f);
  let x_3377 : f32 = u_xlat68;
  u_xlat68 = (-(x_3377) + 1.0f);
  let x_3380 : f32 = u_xlat68;
  let x_3381 : f32 = u_xlat68;
  u_xlat68 = (x_3380 * x_3381);
  let x_3383 : f32 = u_xlat68;
  let x_3384 : f32 = u_xlat68;
  u_xlat68 = (x_3383 * x_3384);
  let x_3387 : f32 = u_xlat25.x;
  u_xlat3.x = ((-(x_3387) * 0.699999988f) + 1.700000048f);
  let x_3395 : f32 = u_xlat3.x;
  let x_3397 : f32 = u_xlat25.x;
  u_xlat3.x = (x_3395 * x_3397);
  let x_3401 : f32 = u_xlat3.x;
  u_xlat3.x = (x_3401 * 6.0f);
  let x_3413 : vec4<f32> = u_xlat8;
  let x_3416 : f32 = u_xlat3.x;
  let x_3417 : vec4<f32> = textureSampleLevel(unity_SpecCube0, samplerunity_SpecCube0, vec3<f32>(x_3413.x, x_3413.y, x_3413.z), x_3416);
  u_xlat8 = x_3417;
  let x_3419 : f32 = u_xlat8.w;
  u_xlat3.x = (x_3419 + -1.0f);
  let x_3423 : f32 = x_60.unity_SpecCube0_HDR.w;
  let x_3425 : f32 = u_xlat3.x;
  u_xlat3.x = ((x_3423 * x_3425) + 1.0f);
  let x_3430 : f32 = u_xlat3.x;
  u_xlat3.x = max(x_3430, 0.0f);
  let x_3434 : f32 = u_xlat3.x;
  u_xlat3.x = log2(x_3434);
  let x_3438 : f32 = u_xlat3.x;
  let x_3440 : f32 = x_60.unity_SpecCube0_HDR.y;
  u_xlat3.x = (x_3438 * x_3440);
  let x_3444 : f32 = u_xlat3.x;
  u_xlat3.x = exp2(x_3444);
  let x_3448 : f32 = u_xlat3.x;
  let x_3450 : f32 = x_60.unity_SpecCube0_HDR.x;
  u_xlat3.x = (x_3448 * x_3450);
  let x_3453 : vec4<f32> = u_xlat8;
  let x_3455 : vec4<f32> = u_xlat3;
  let x_3457 : vec3<f32> = (vec3<f32>(x_3453.x, x_3453.y, x_3453.z) * vec3<f32>(x_3455.x, x_3455.x, x_3455.x));
  let x_3458 : vec4<f32> = u_xlat8;
  u_xlat8 = vec4<f32>(x_3457.x, x_3457.y, x_3457.z, x_3458.w);
  let x_3460 : f32 = u_xlat69;
  let x_3462 : f32 = u_xlat69;
  let x_3466 : vec2<f32> = ((vec2<f32>(x_3460, x_3460) * vec2<f32>(x_3462, x_3462)) + vec2<f32>(-1.0f, 1.0f));
  let x_3467 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_3466.x, x_3466.y, x_3467.z, x_3467.w);
  let x_3470 : f32 = u_xlat3.y;
  u_xlat25.x = (1.0f / x_3470);
  let x_3473 : f32 = u_xlat71;
  u_xlat69 = (x_3473 + -0.039999999f);
  let x_3476 : f32 = u_xlat68;
  let x_3477 : f32 = u_xlat69;
  u_xlat68 = ((x_3476 * x_3477) + 0.039999999f);
  let x_3481 : f32 = u_xlat68;
  let x_3483 : f32 = u_xlat25.x;
  u_xlat68 = (x_3481 * x_3483);
  let x_3485 : f32 = u_xlat68;
  let x_3487 : vec4<f32> = u_xlat8;
  let x_3489 : vec3<f32> = (vec3<f32>(x_3485, x_3485, x_3485) * vec3<f32>(x_3487.x, x_3487.y, x_3487.z));
  let x_3490 : vec4<f32> = u_xlat8;
  u_xlat8 = vec4<f32>(x_3489.x, x_3489.y, x_3489.z, x_3490.w);
  let x_3492 : vec3<f32> = u_xlat22;
  let x_3493 : vec3<f32> = u_xlat5;
  let x_3495 : vec4<f32> = u_xlat8;
  u_xlat22 = ((x_3492 * x_3493) + vec3<f32>(x_3495.x, x_3495.y, x_3495.z));
  let x_3499 : f32 = u_xlat0.x;
  let x_3501 : f32 = x_60.unity_LightData.z;
  u_xlat0.x = (x_3499 * x_3501);
  let x_3504 : vec4<f32> = u_xlat4;
  let x_3507 : vec4<f32> = x_139.x_MainLightPosition;
  u_xlat68 = dot(vec3<f32>(x_3504.x, x_3504.y, x_3504.z), vec3<f32>(x_3507.x, x_3507.y, x_3507.z));
  let x_3510 : f32 = u_xlat68;
  u_xlat68 = clamp(x_3510, 0.0f, 1.0f);
  let x_3513 : f32 = u_xlat0.x;
  let x_3514 : f32 = u_xlat68;
  u_xlat0.x = (x_3513 * x_3514);
  let x_3517 : vec3<f32> = u_xlat0;
  let x_3519 : vec4<f32> = u_xlat2;
  let x_3521 : vec3<f32> = (vec3<f32>(x_3517.x, x_3517.x, x_3517.x) * vec3<f32>(x_3519.x, x_3519.y, x_3519.z));
  let x_3522 : vec4<f32> = u_xlat2;
  u_xlat2 = vec4<f32>(x_3521.x, x_3521.y, x_3521.z, x_3522.w);
  let x_3524 : vec4<f32> = u_xlat7;
  let x_3527 : vec4<f32> = x_139.x_MainLightPosition;
  let x_3529 : vec3<f32> = (vec3<f32>(x_3524.x, x_3524.y, x_3524.z) + vec3<f32>(x_3527.x, x_3527.y, x_3527.z));
  let x_3530 : vec4<f32> = u_xlat8;
  u_xlat8 = vec4<f32>(x_3529.x, x_3529.y, x_3529.z, x_3530.w);
  let x_3532 : vec4<f32> = u_xlat8;
  let x_3534 : vec4<f32> = u_xlat8;
  u_xlat0.x = dot(vec3<f32>(x_3532.x, x_3532.y, x_3532.z), vec3<f32>(x_3534.x, x_3534.y, x_3534.z));
  let x_3539 : f32 = u_xlat0.x;
  u_xlat0.x = max(x_3539, 1.17549435e-37f);
  let x_3543 : f32 = u_xlat0.x;
  u_xlat0.x = inverseSqrt(x_3543);
  let x_3546 : vec3<f32> = u_xlat0;
  let x_3548 : vec4<f32> = u_xlat8;
  let x_3550 : vec3<f32> = (vec3<f32>(x_3546.x, x_3546.x, x_3546.x) * vec3<f32>(x_3548.x, x_3548.y, x_3548.z));
  let x_3551 : vec4<f32> = u_xlat8;
  u_xlat8 = vec4<f32>(x_3550.x, x_3550.y, x_3550.z, x_3551.w);
  let x_3553 : vec4<f32> = u_xlat4;
  let x_3555 : vec4<f32> = u_xlat8;
  u_xlat0.x = dot(vec3<f32>(x_3553.x, x_3553.y, x_3553.z), vec3<f32>(x_3555.x, x_3555.y, x_3555.z));
  let x_3560 : f32 = u_xlat0.x;
  u_xlat0.x = clamp(x_3560, 0.0f, 1.0f);
  let x_3564 : vec4<f32> = x_139.x_MainLightPosition;
  let x_3566 : vec4<f32> = u_xlat8;
  u_xlat68 = dot(vec3<f32>(x_3564.x, x_3564.y, x_3564.z), vec3<f32>(x_3566.x, x_3566.y, x_3566.z));
  let x_3569 : f32 = u_xlat68;
  u_xlat68 = clamp(x_3569, 0.0f, 1.0f);
  let x_3572 : f32 = u_xlat0.x;
  let x_3574 : f32 = u_xlat0.x;
  u_xlat0.x = (x_3572 * x_3574);
  let x_3578 : f32 = u_xlat0.x;
  let x_3580 : f32 = u_xlat3.x;
  u_xlat0.x = ((x_3578 * x_3580) + 1.000010014f);
  let x_3585 : f32 = u_xlat68;
  let x_3586 : f32 = u_xlat68;
  u_xlat68 = (x_3585 * x_3586);
  let x_3589 : f32 = u_xlat0.x;
  let x_3591 : f32 = u_xlat0.x;
  u_xlat0.x = (x_3589 * x_3591);
  let x_3594 : f32 = u_xlat68;
  u_xlat68 = max(x_3594, 0.100000001f);
  let x_3598 : f32 = u_xlat0.x;
  let x_3599 : f32 = u_xlat68;
  u_xlat0.x = (x_3598 * x_3599);
  let x_3603 : f32 = u_xlat6.x;
  let x_3605 : f32 = u_xlat0.x;
  u_xlat0.x = (x_3603 * x_3605);
  let x_3608 : f32 = u_xlat70;
  let x_3610 : f32 = u_xlat0.x;
  u_xlat0.x = (x_3608 / x_3610);
  let x_3613 : vec3<f32> = u_xlat0;
  let x_3617 : vec3<f32> = u_xlat5;
  let x_3618 : vec3<f32> = ((vec3<f32>(x_3613.x, x_3613.x, x_3613.x) * vec3<f32>(0.039999999f, 0.039999999f, 0.039999999f)) + x_3617);
  let x_3619 : vec4<f32> = u_xlat8;
  u_xlat8 = vec4<f32>(x_3618.x, x_3618.y, x_3618.z, x_3619.w);
  let x_3621 : vec4<f32> = u_xlat2;
  let x_3623 : vec4<f32> = u_xlat8;
  let x_3625 : vec3<f32> = (vec3<f32>(x_3621.x, x_3621.y, x_3621.z) * vec3<f32>(x_3623.x, x_3623.y, x_3623.z));
  let x_3626 : vec4<f32> = u_xlat2;
  u_xlat2 = vec4<f32>(x_3625.x, x_3625.y, x_3625.z, x_3626.w);
  let x_3629 : f32 = x_139.x_AdditionalLightsCount.x;
  let x_3631 : f32 = x_60.unity_LightData.y;
  u_xlat0.x = min(x_3629, x_3631);
  let x_3635 : f32 = u_xlat0.x;
  u_xlatu0 = bitcast<u32>(i32(x_3635));
  u_xlat8.x = 0.0f;
  u_xlat8.y = 0.0f;
  u_xlat8.z = 0.0f;
  u_xlatu_loop_1 = 0u;
  loop {
    let x_3647 : u32 = u_xlatu_loop_1;
    let x_3648 : u32 = u_xlatu0;
    if ((x_3647 < x_3648)) {
    } else {
      break;
    }
    let x_3651 : u32 = u_xlatu_loop_1;
    u_xlatu25 = (x_3651 >> 2u);
    let x_3654 : u32 = u_xlatu_loop_1;
    u_xlati69 = bitcast<i32>((x_3654 & 3u));
    let x_3657 : u32 = u_xlatu25;
    let x_3660 : vec4<f32> = x_60.unity_LightIndices[bitcast<i32>(x_3657)];
    let x_3670 : i32 = u_xlati69;
    indexable = array<vec4<u32>, 4u>(vec4<u32>(1065353216u, 0u, 0u, 0u), vec4<u32>(0u, 1065353216u, 0u, 0u), vec4<u32>(0u, 0u, 1065353216u, 0u), vec4<u32>(0u, 0u, 0u, 1065353216u));
    let x_3675 : vec4<u32> = indexable[x_3670];
    u_xlat25.x = dot(x_3660, bitcast<vec4<f32>>(x_3675));
    let x_3681 : f32 = u_xlat25.x;
    u_xlati25 = i32(x_3681);
    let x_3683 : vec3<f32> = vs_INTERP0;
    let x_3695 : i32 = u_xlati25;
    let x_3697 : vec4<f32> = x_3694.x_AdditionalLightsPosition[x_3695];
    let x_3700 : i32 = u_xlati25;
    let x_3702 : vec4<f32> = x_3694.x_AdditionalLightsPosition[x_3700];
    let x_3704 : vec3<f32> = ((-(x_3683) * vec3<f32>(x_3697.w, x_3697.w, x_3697.w)) + vec3<f32>(x_3702.x, x_3702.y, x_3702.z));
    let x_3705 : vec4<f32> = u_xlat9;
    u_xlat9 = vec4<f32>(x_3704.x, x_3704.y, x_3704.z, x_3705.w);
    let x_3707 : vec4<f32> = u_xlat9;
    let x_3709 : vec4<f32> = u_xlat9;
    u_xlat69 = dot(vec3<f32>(x_3707.x, x_3707.y, x_3707.z), vec3<f32>(x_3709.x, x_3709.y, x_3709.z));
    let x_3712 : f32 = u_xlat69;
    u_xlat69 = max(x_3712, 6.10351562e-05f);
    let x_3715 : f32 = u_xlat69;
    u_xlat71 = inverseSqrt(x_3715);
    let x_3717 : f32 = u_xlat71;
    let x_3719 : vec4<f32> = u_xlat9;
    let x_3721 : vec3<f32> = (vec3<f32>(x_3717, x_3717, x_3717) * vec3<f32>(x_3719.x, x_3719.y, x_3719.z));
    let x_3722 : vec4<f32> = u_xlat10;
    u_xlat10 = vec4<f32>(x_3721.x, x_3721.y, x_3721.z, x_3722.w);
    let x_3724 : f32 = u_xlat69;
    u_xlat72 = (1.0f / x_3724);
    let x_3726 : f32 = u_xlat69;
    let x_3727 : i32 = u_xlati25;
    let x_3729 : f32 = x_3694.x_AdditionalLightsAttenuation[x_3727].x;
    u_xlat69 = (x_3726 * x_3729);
    let x_3731 : f32 = u_xlat69;
    let x_3733 : f32 = u_xlat69;
    u_xlat69 = ((-(x_3731) * x_3733) + 1.0f);
    let x_3736 : f32 = u_xlat69;
    u_xlat69 = max(x_3736, 0.0f);
    let x_3738 : f32 = u_xlat69;
    let x_3739 : f32 = u_xlat69;
    u_xlat69 = (x_3738 * x_3739);
    let x_3741 : f32 = u_xlat69;
    let x_3742 : f32 = u_xlat72;
    u_xlat69 = (x_3741 * x_3742);
    let x_3744 : i32 = u_xlati25;
    let x_3746 : vec4<f32> = x_3694.x_AdditionalLightsSpotDir[x_3744];
    let x_3748 : vec4<f32> = u_xlat10;
    u_xlat72 = dot(vec3<f32>(x_3746.x, x_3746.y, x_3746.z), vec3<f32>(x_3748.x, x_3748.y, x_3748.z));
    let x_3751 : f32 = u_xlat72;
    let x_3752 : i32 = u_xlati25;
    let x_3754 : f32 = x_3694.x_AdditionalLightsAttenuation[x_3752].z;
    let x_3756 : i32 = u_xlati25;
    let x_3758 : f32 = x_3694.x_AdditionalLightsAttenuation[x_3756].w;
    u_xlat72 = ((x_3751 * x_3754) + x_3758);
    let x_3760 : f32 = u_xlat72;
    u_xlat72 = clamp(x_3760, 0.0f, 1.0f);
    let x_3762 : f32 = u_xlat72;
    let x_3763 : f32 = u_xlat72;
    u_xlat72 = (x_3762 * x_3763);
    let x_3765 : f32 = u_xlat69;
    let x_3766 : f32 = u_xlat72;
    u_xlat69 = (x_3765 * x_3766);
    let x_3768 : f32 = u_xlat50;
    let x_3770 : i32 = u_xlati25;
    let x_3772 : vec4<f32> = x_3694.x_AdditionalLightsColor[x_3770];
    let x_3774 : vec3<f32> = (vec3<f32>(x_3768, x_3768, x_3768) * vec3<f32>(x_3772.x, x_3772.y, x_3772.z));
    let x_3775 : vec4<f32> = u_xlat11;
    u_xlat11 = vec4<f32>(x_3774.x, x_3774.y, x_3774.z, x_3775.w);
    let x_3777 : vec4<f32> = u_xlat4;
    let x_3779 : vec4<f32> = u_xlat10;
    u_xlat25.x = dot(vec3<f32>(x_3777.x, x_3777.y, x_3777.z), vec3<f32>(x_3779.x, x_3779.y, x_3779.z));
    let x_3784 : f32 = u_xlat25.x;
    u_xlat25.x = clamp(x_3784, 0.0f, 1.0f);
    let x_3788 : f32 = u_xlat25.x;
    let x_3789 : f32 = u_xlat69;
    u_xlat25.x = (x_3788 * x_3789);
    let x_3792 : vec3<f32> = u_xlat25;
    let x_3794 : vec4<f32> = u_xlat11;
    let x_3796 : vec3<f32> = (vec3<f32>(x_3792.x, x_3792.x, x_3792.x) * vec3<f32>(x_3794.x, x_3794.y, x_3794.z));
    let x_3797 : vec4<f32> = u_xlat11;
    u_xlat11 = vec4<f32>(x_3796.x, x_3796.y, x_3796.z, x_3797.w);
    let x_3799 : vec4<f32> = u_xlat9;
    let x_3801 : f32 = u_xlat71;
    let x_3804 : vec4<f32> = u_xlat7;
    let x_3806 : vec3<f32> = ((vec3<f32>(x_3799.x, x_3799.y, x_3799.z) * vec3<f32>(x_3801, x_3801, x_3801)) + vec3<f32>(x_3804.x, x_3804.y, x_3804.z));
    let x_3807 : vec4<f32> = u_xlat9;
    u_xlat9 = vec4<f32>(x_3806.x, x_3806.y, x_3806.z, x_3807.w);
    let x_3809 : vec4<f32> = u_xlat9;
    let x_3811 : vec4<f32> = u_xlat9;
    u_xlat25.x = dot(vec3<f32>(x_3809.x, x_3809.y, x_3809.z), vec3<f32>(x_3811.x, x_3811.y, x_3811.z));
    let x_3816 : f32 = u_xlat25.x;
    u_xlat25.x = max(x_3816, 1.17549435e-37f);
    let x_3820 : f32 = u_xlat25.x;
    u_xlat25.x = inverseSqrt(x_3820);
    let x_3823 : vec3<f32> = u_xlat25;
    let x_3825 : vec4<f32> = u_xlat9;
    let x_3827 : vec3<f32> = (vec3<f32>(x_3823.x, x_3823.x, x_3823.x) * vec3<f32>(x_3825.x, x_3825.y, x_3825.z));
    let x_3828 : vec4<f32> = u_xlat9;
    u_xlat9 = vec4<f32>(x_3827.x, x_3827.y, x_3827.z, x_3828.w);
    let x_3830 : vec4<f32> = u_xlat4;
    let x_3832 : vec4<f32> = u_xlat9;
    u_xlat25.x = dot(vec3<f32>(x_3830.x, x_3830.y, x_3830.z), vec3<f32>(x_3832.x, x_3832.y, x_3832.z));
    let x_3837 : f32 = u_xlat25.x;
    u_xlat25.x = clamp(x_3837, 0.0f, 1.0f);
    let x_3840 : vec4<f32> = u_xlat10;
    let x_3842 : vec4<f32> = u_xlat9;
    u_xlat25.z = dot(vec3<f32>(x_3840.x, x_3840.y, x_3840.z), vec3<f32>(x_3842.x, x_3842.y, x_3842.z));
    let x_3847 : f32 = u_xlat25.z;
    u_xlat25.z = clamp(x_3847, 0.0f, 1.0f);
    let x_3850 : vec3<f32> = u_xlat25;
    let x_3852 : vec3<f32> = u_xlat25;
    let x_3854 : vec2<f32> = (vec2<f32>(x_3850.x, x_3850.z) * vec2<f32>(x_3852.x, x_3852.z));
    let x_3855 : vec3<f32> = u_xlat25;
    u_xlat25 = vec3<f32>(x_3854.x, x_3855.y, x_3854.y);
    let x_3858 : f32 = u_xlat25.x;
    let x_3860 : f32 = u_xlat3.x;
    u_xlat25.x = ((x_3858 * x_3860) + 1.000010014f);
    let x_3865 : f32 = u_xlat25.x;
    let x_3867 : f32 = u_xlat25.x;
    u_xlat25.x = (x_3865 * x_3867);
    let x_3871 : f32 = u_xlat25.z;
    u_xlat69 = max(x_3871, 0.100000001f);
    let x_3873 : f32 = u_xlat69;
    let x_3875 : f32 = u_xlat25.x;
    u_xlat25.x = (x_3873 * x_3875);
    let x_3879 : f32 = u_xlat6.x;
    let x_3881 : f32 = u_xlat25.x;
    u_xlat25.x = (x_3879 * x_3881);
    let x_3884 : f32 = u_xlat70;
    let x_3886 : f32 = u_xlat25.x;
    u_xlat25.x = (x_3884 / x_3886);
    let x_3889 : vec3<f32> = u_xlat25;
    let x_3892 : vec3<f32> = u_xlat5;
    let x_3893 : vec3<f32> = ((vec3<f32>(x_3889.x, x_3889.x, x_3889.x) * vec3<f32>(0.039999999f, 0.039999999f, 0.039999999f)) + x_3892);
    let x_3894 : vec4<f32> = u_xlat9;
    u_xlat9 = vec4<f32>(x_3893.x, x_3893.y, x_3893.z, x_3894.w);
    let x_3896 : vec4<f32> = u_xlat9;
    let x_3898 : vec4<f32> = u_xlat11;
    let x_3901 : vec4<f32> = u_xlat8;
    let x_3903 : vec3<f32> = ((vec3<f32>(x_3896.x, x_3896.y, x_3896.z) * vec3<f32>(x_3898.x, x_3898.y, x_3898.z)) + vec3<f32>(x_3901.x, x_3901.y, x_3901.z));
    let x_3904 : vec4<f32> = u_xlat8;
    u_xlat8 = vec4<f32>(x_3903.x, x_3903.y, x_3903.z, x_3904.w);

    continuing {
      let x_3906 : u32 = u_xlatu_loop_1;
      u_xlatu_loop_1 = (x_3906 + bitcast<u32>(1i));
    }
  }
  let x_3908 : vec3<f32> = u_xlat22;
  let x_3909 : vec3<f32> = u_xlat28;
  let x_3912 : vec4<f32> = u_xlat2;
  u_xlat0 = ((x_3908 * vec3<f32>(x_3909.x, x_3909.x, x_3909.x)) + vec3<f32>(x_3912.x, x_3912.y, x_3912.z));
  let x_3915 : vec4<f32> = u_xlat8;
  let x_3917 : vec3<f32> = u_xlat0;
  u_xlat0 = (vec3<f32>(x_3915.x, x_3915.y, x_3915.z) + x_3917);
  let x_3921 : vec4<f32> = vs_INTERP4;
  let x_3923 : vec3<f32> = u_xlat1;
  let x_3925 : vec3<f32> = u_xlat0;
  let x_3926 : vec3<f32> = ((vec3<f32>(x_3921.w, x_3921.w, x_3921.w) * x_3923) + x_3925);
  let x_3927 : vec4<f32> = SV_Target0;
  SV_Target0 = vec4<f32>(x_3926.x, x_3926.y, x_3926.z, x_3927.w);
  let x_3929 : bool = u_xlatb47;
  let x_3930 : f32 = u_xlat67;
  SV_Target0.w = select(1.0f, x_3930, x_3929);
  return;
}

struct main_out {
  @location(0)
  SV_Target0_1 : vec4<f32>,
}

@fragment
fn main(@builtin(position) gl_FragCoord_param : vec4<f32>, @location(1) vs_INTERP1_param : vec3<f32>, @location(2) vs_INTERP2_param : vec4<f32>, @location(3) vs_INTERP3_param : vec4<f32>, @location(4) vs_INTERP4_param : vec4<f32>, @location(0) vs_INTERP0_param : vec3<f32>) -> main_out {
  gl_FragCoord = gl_FragCoord_param;
  vs_INTERP1 = vs_INTERP1_param;
  vs_INTERP2 = vs_INTERP2_param;
  vs_INTERP3 = vs_INTERP3_param;
  vs_INTERP4 = vs_INTERP4_param;
  vs_INTERP0 = vs_INTERP0_param;
  main_1();
  return main_out(SV_Target0);
}

