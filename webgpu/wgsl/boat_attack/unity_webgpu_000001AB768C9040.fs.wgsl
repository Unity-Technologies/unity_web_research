type Arr = array<vec4<f32>, 2u>;

type Arr_1 = array<mat4x4<f32>, 2u>;

type Arr_2 = array<vec4<f32>, 2u>;

type Arr_3 = array<vec4<f32>, 2u>;

type Arr_4 = array<vec4<f32>, 2u>;

struct PGlobals {
  x_GlobalMipBias : vec2<f32>,
  @size(8)
  padding : u32,
  x_ProjectionParams : vec4<f32>,
  x_SSAOParams : vec4<f32>,
  x_CameraViewTopLeftCorner : Arr_4,
  x_CameraViewProjections : Arr_1,
  x_SourceSize : vec4<f32>,
  x_CameraViewXExtent : Arr_4,
  x_CameraViewYExtent : Arr_4,
  x_CameraViewZExtent : Arr_4,
  x_SSAOBlueNoiseParams : vec4<f32>,
}

@group(0) @binding(0) var x_CameraDepthTexture : texture_2d<f32>;

@group(0) @binding(3) var sampler_CameraDepthTexture : sampler;

var<private> vs_TEXCOORD0 : vec2<f32>;

@group(1) @binding(0) var<uniform> x_34 : PGlobals;

var<private> SV_Target0 : vec4<f32>;

@group(0) @binding(1) var x_BlueNoiseTexture : texture_2d<f32>;

@group(0) @binding(2) var sampler_PointRepeat : sampler;

var<private> gl_FragCoord : vec4<f32>;

fn main_1() {
  var u_xlat0 : f32;
  var u_xlatb7 : bool;
  var u_xlat7 : vec3<f32>;
  var u_xlatb14 : bool;
  var u_xlat14 : vec2<f32>;
  var u_xlat21 : f32;
  var u_xlat1 : vec3<f32>;
  var u_xlat9 : vec3<f32>;
  var u_xlat3 : vec4<f32>;
  var u_xlat11 : vec3<f32>;
  var u_xlat12 : vec3<f32>;
  var u_xlatb21 : bool;
  var u_xlat6 : vec3<f32>;
  var x_280 : vec3<f32>;
  var u_xlat5 : vec4<f32>;
  var x_289 : vec3<f32>;
  var x_300 : vec3<f32>;
  var u_xlat2 : vec4<f32>;
  var x_312 : vec3<f32>;
  var x_322 : vec2<f32>;
  var u_xlat4 : vec3<f32>;
  var u_xlat22 : f32;
  var u_xlat23 : f32;
  var u_xlatb22 : bool;
  var u_xlat10 : vec3<f32>;
  var u_xlat17 : f32;
  var u_xlatb17 : bool;
  var u_xlatb3 : bool;
  var u_xlat18 : f32;
  var u_xlatb4 : vec3<bool>;
  var u_xlatb23 : bool;
  var u_xlat24 : f32;
  var u_xlatb24 : bool;
  var u_xlat_precise_vec4 : vec4<f32>;
  var u_xlat_precise_ivec4 : vec4<i32>;
  var u_xlat_precise_bvec4 : vec4<bool>;
  var u_xlat_precise_uvec4 : vec4<u32>;
  let x_22 : vec2<f32> = vs_TEXCOORD0;
  let x_40 : f32 = x_34.x_GlobalMipBias.x;
  let x_41 : vec4<f32> = textureSampleBias(x_CameraDepthTexture, sampler_CameraDepthTexture, x_22, x_40);
  u_xlat0 = x_41.x;
  let x_46 : f32 = u_xlat0;
  u_xlatb7 = (x_46 < 0.00001f);
  let x_49 : bool = u_xlatb7;
  if (x_49) {
    SV_Target0 = vec4<f32>(0.0f, 0.5f, 0.5f, 0.5f);
    return;
  }
  let x_64 : f32 = x_34.x_ProjectionParams.y;
  let x_67 : f32 = x_34.x_ProjectionParams.z;
  u_xlat7.x = (-(x_64) + x_67);
  let x_71 : f32 = u_xlat7.x;
  let x_73 : f32 = u_xlat0;
  let x_76 : f32 = x_34.x_ProjectionParams.z;
  u_xlat0 = ((-(x_71) * x_73) + x_76);
  let x_82 : f32 = x_34.x_SSAOParams.w;
  let x_83 : f32 = u_xlat0;
  u_xlatb14 = (x_82 < x_83);
  let x_85 : bool = u_xlatb14;
  if (x_85) {
    SV_Target0 = vec4<f32>(0.0f, 0.5f, 0.5f, 0.5f);
    return;
  }
  let x_93 : f32 = vs_TEXCOORD0.y;
  u_xlat14.x = (-(x_93) + 1.0f);
  let x_99 : f32 = u_xlat0;
  let x_101 : f32 = x_34.x_ProjectionParams.w;
  u_xlat21 = (x_99 * x_101);
  let x_107 : vec4<f32> = x_34.x_CameraViewXExtent[0i];
  let x_109 : vec2<f32> = vs_TEXCOORD0;
  let x_114 : vec4<f32> = x_34.x_CameraViewTopLeftCorner[0i];
  u_xlat1 = ((vec3<f32>(x_107.x, x_107.y, x_107.z) * vec3<f32>(x_109.x, x_109.x, x_109.x)) + vec3<f32>(x_114.x, x_114.y, x_114.z));
  let x_119 : vec4<f32> = x_34.x_CameraViewYExtent[0i];
  let x_121 : vec2<f32> = u_xlat14;
  let x_124 : vec3<f32> = u_xlat1;
  u_xlat1 = ((vec3<f32>(x_119.x, x_119.y, x_119.z) * vec3<f32>(x_121.x, x_121.x, x_121.x)) + x_124);
  let x_128 : vec4<f32> = x_34.x_CameraViewZExtent[0i];
  let x_130 : f32 = u_xlat21;
  let x_133 : vec3<f32> = u_xlat1;
  u_xlat1 = ((vec3<f32>(x_128.x, x_128.y, x_128.z) * vec3<f32>(x_130, x_130, x_130)) + x_133);
  let x_138 : f32 = x_34.x_SourceSize.z;
  u_xlat9.x = (x_138 * -2.0f);
  u_xlat9.y = 0.0f;
  let x_143 : vec3<f32> = u_xlat9;
  let x_145 : vec2<f32> = vs_TEXCOORD0;
  let x_146 : vec2<f32> = (vec2<f32>(x_143.x, x_143.y) + x_145);
  let x_147 : vec3<f32> = u_xlat9;
  u_xlat9 = vec3<f32>(x_146.x, x_146.y, x_147.z);
  let x_152 : vec3<f32> = u_xlat9;
  let x_155 : f32 = x_34.x_GlobalMipBias.x;
  let x_156 : vec4<f32> = textureSampleBias(x_CameraDepthTexture, sampler_CameraDepthTexture, vec2<f32>(x_152.x, x_152.y), x_155);
  u_xlat14.x = x_156.x;
  let x_160 : f32 = u_xlat7.x;
  let x_163 : f32 = u_xlat14.x;
  let x_166 : f32 = x_34.x_ProjectionParams.z;
  u_xlat9.z = ((-(x_160) * x_163) + x_166);
  let x_172 : f32 = x_34.x_SourceSize.z;
  u_xlat3.x = (x_172 * 2.0f);
  u_xlat3.y = 0.0f;
  let x_177 : vec4<f32> = u_xlat3;
  let x_179 : vec2<f32> = vs_TEXCOORD0;
  let x_180 : vec2<f32> = (vec2<f32>(x_177.x, x_177.y) + x_179);
  let x_181 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_180.x, x_180.y, x_181.z, x_181.w);
  let x_186 : vec4<f32> = u_xlat3;
  let x_189 : f32 = x_34.x_GlobalMipBias.x;
  let x_190 : vec4<f32> = textureSampleBias(x_CameraDepthTexture, sampler_CameraDepthTexture, vec2<f32>(x_186.x, x_186.y), x_189);
  u_xlat14.x = x_190.x;
  let x_194 : f32 = u_xlat7.x;
  let x_197 : f32 = u_xlat14.x;
  let x_200 : f32 = x_34.x_ProjectionParams.z;
  u_xlat3.z = ((-(x_194) * x_197) + x_200);
  u_xlat11.x = 0.0f;
  let x_206 : f32 = x_34.x_SourceSize.w;
  u_xlat11.y = (x_206 * 2.0f);
  let x_209 : vec3<f32> = u_xlat11;
  let x_211 : vec2<f32> = vs_TEXCOORD0;
  let x_212 : vec2<f32> = (vec2<f32>(x_209.x, x_209.y) + x_211);
  let x_213 : vec3<f32> = u_xlat11;
  u_xlat11 = vec3<f32>(x_212.x, x_212.y, x_213.z);
  let x_218 : vec3<f32> = u_xlat11;
  let x_221 : f32 = x_34.x_GlobalMipBias.x;
  let x_222 : vec4<f32> = textureSampleBias(x_CameraDepthTexture, sampler_CameraDepthTexture, vec2<f32>(x_218.x, x_218.y), x_221);
  u_xlat14.x = x_222.x;
  let x_226 : f32 = u_xlat7.x;
  let x_229 : f32 = u_xlat14.x;
  let x_232 : f32 = x_34.x_ProjectionParams.z;
  u_xlat11.z = ((-(x_226) * x_229) + x_232);
  u_xlat12.x = 0.0f;
  let x_238 : f32 = x_34.x_SourceSize.w;
  u_xlat12.y = (x_238 * -2.0f);
  let x_241 : vec3<f32> = u_xlat12;
  let x_243 : vec2<f32> = vs_TEXCOORD0;
  let x_244 : vec2<f32> = (vec2<f32>(x_241.x, x_241.y) + x_243);
  let x_245 : vec3<f32> = u_xlat12;
  u_xlat12 = vec3<f32>(x_244.x, x_244.y, x_245.z);
  let x_250 : vec3<f32> = u_xlat12;
  let x_253 : f32 = x_34.x_GlobalMipBias.x;
  let x_254 : vec4<f32> = textureSampleBias(x_CameraDepthTexture, sampler_CameraDepthTexture, vec2<f32>(x_250.x, x_250.y), x_253);
  u_xlat14.x = x_254.x;
  let x_258 : f32 = u_xlat7.x;
  let x_261 : f32 = u_xlat14.x;
  let x_264 : f32 = x_34.x_ProjectionParams.z;
  u_xlat12.z = ((-(x_258) * x_261) + x_264);
  let x_268 : f32 = u_xlat3.z;
  let x_270 : f32 = u_xlat9.z;
  u_xlatb14 = (x_268 < x_270);
  let x_274 : f32 = u_xlat11.z;
  let x_276 : f32 = u_xlat12.z;
  u_xlatb21 = (x_274 < x_276);
  let x_279 : bool = u_xlatb14;
  if (x_279) {
    let x_283 : vec3<f32> = u_xlat9;
    x_280 = x_283;
  } else {
    let x_285 : vec3<f32> = u_xlat12;
    x_280 = x_285;
  }
  let x_286 : vec3<f32> = x_280;
  u_xlat6 = x_286;
  let x_288 : bool = u_xlatb14;
  if (x_288) {
    let x_292 : vec3<f32> = u_xlat12;
    x_289 = x_292;
  } else {
    let x_294 : vec4<f32> = u_xlat3;
    x_289 = vec3<f32>(x_294.x, x_294.y, x_294.z);
  }
  let x_296 : vec3<f32> = x_289;
  let x_297 : vec4<f32> = u_xlat5;
  u_xlat5 = vec4<f32>(x_297.x, x_296.x, x_296.y, x_296.z);
  let x_299 : bool = u_xlatb14;
  if (x_299) {
    let x_303 : vec3<f32> = u_xlat11;
    x_300 = x_303;
  } else {
    let x_305 : vec4<f32> = u_xlat3;
    x_300 = vec3<f32>(x_305.x, x_305.y, x_305.z);
  }
  let x_307 : vec3<f32> = x_300;
  let x_308 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_307.x, x_307.y, x_307.z, x_308.w);
  let x_311 : bool = u_xlatb14;
  if (x_311) {
    let x_315 : vec3<f32> = u_xlat9;
    x_312 = x_315;
  } else {
    let x_317 : vec3<f32> = u_xlat11;
    x_312 = x_317;
  }
  let x_318 : vec3<f32> = x_312;
  let x_319 : vec4<f32> = u_xlat2;
  u_xlat2 = vec4<f32>(x_319.x, x_318.x, x_318.y, x_318.z);
  let x_321 : bool = u_xlatb21;
  if (x_321) {
    let x_325 : vec3<f32> = u_xlat6;
    x_322 = vec2<f32>(x_325.x, x_325.y);
  } else {
    let x_328 : vec4<f32> = u_xlat3;
    x_322 = vec2<f32>(x_328.x, x_328.y);
  }
  let x_330 : vec2<f32> = x_322;
  let x_331 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_330.x, x_330.y, x_331.z, x_331.w);
  let x_334 : f32 = u_xlat6.z;
  u_xlat5.x = x_334;
  let x_337 : f32 = u_xlat3.z;
  u_xlat2.x = x_337;
  let x_339 : bool = u_xlatb21;
  let x_340 : vec4<f32> = u_xlat5;
  let x_341 : vec4<f32> = u_xlat2;
  u_xlat2 = select(x_341, x_340, vec4<bool>(x_339, x_339, x_339, x_339));
  let x_346 : f32 = u_xlat2.z;
  u_xlat14.x = (-(x_346) + 1.0f);
  let x_350 : vec4<f32> = u_xlat2;
  let x_353 : vec4<f32> = x_34.x_ProjectionParams;
  let x_355 : vec2<f32> = (vec2<f32>(x_350.w, x_350.x) * vec2<f32>(x_353.w, x_353.w));
  let x_356 : vec4<f32> = u_xlat2;
  u_xlat2 = vec4<f32>(x_355.x, x_356.y, x_355.y, x_356.w);
  let x_360 : vec4<f32> = x_34.x_CameraViewXExtent[0i];
  let x_362 : vec4<f32> = u_xlat2;
  let x_366 : vec4<f32> = x_34.x_CameraViewTopLeftCorner[0i];
  u_xlat4 = ((vec3<f32>(x_360.z, x_360.x, x_360.y) * vec3<f32>(x_362.y, x_362.y, x_362.y)) + vec3<f32>(x_366.z, x_366.x, x_366.y));
  let x_370 : vec4<f32> = x_34.x_CameraViewYExtent[0i];
  let x_372 : vec2<f32> = u_xlat14;
  let x_375 : vec3<f32> = u_xlat4;
  u_xlat4 = ((vec3<f32>(x_370.z, x_370.x, x_370.y) * vec3<f32>(x_372.x, x_372.x, x_372.x)) + x_375);
  let x_378 : vec4<f32> = x_34.x_CameraViewZExtent[0i];
  let x_380 : vec4<f32> = u_xlat2;
  let x_383 : vec3<f32> = u_xlat4;
  let x_384 : vec3<f32> = ((vec3<f32>(x_378.z, x_378.x, x_378.y) * vec3<f32>(x_380.x, x_380.x, x_380.x)) + x_383);
  let x_385 : vec4<f32> = u_xlat2;
  u_xlat2 = vec4<f32>(x_384.x, x_384.y, x_385.z, x_384.z);
  let x_387 : vec3<f32> = u_xlat1;
  let x_390 : vec4<f32> = u_xlat2;
  let x_392 : vec3<f32> = (-(vec3<f32>(x_387.z, x_387.x, x_387.y)) + vec3<f32>(x_390.x, x_390.y, x_390.w));
  let x_393 : vec4<f32> = u_xlat2;
  u_xlat2 = vec4<f32>(x_392.x, x_392.y, x_393.z, x_392.z);
  let x_396 : f32 = u_xlat3.y;
  u_xlat14.x = (-(x_396) + 1.0f);
  let x_401 : vec4<f32> = x_34.x_CameraViewXExtent[0i];
  let x_403 : vec4<f32> = u_xlat3;
  let x_407 : vec4<f32> = x_34.x_CameraViewTopLeftCorner[0i];
  let x_409 : vec3<f32> = ((vec3<f32>(x_401.y, x_401.z, x_401.x) * vec3<f32>(x_403.x, x_403.x, x_403.x)) + vec3<f32>(x_407.y, x_407.z, x_407.x));
  let x_410 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_409.x, x_409.y, x_409.z, x_410.w);
  let x_413 : vec4<f32> = x_34.x_CameraViewYExtent[0i];
  let x_415 : vec2<f32> = u_xlat14;
  let x_418 : vec4<f32> = u_xlat3;
  let x_420 : vec3<f32> = ((vec3<f32>(x_413.y, x_413.z, x_413.x) * vec3<f32>(x_415.x, x_415.x, x_415.x)) + vec3<f32>(x_418.x, x_418.y, x_418.z));
  let x_421 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_420.x, x_420.y, x_420.z, x_421.w);
  let x_424 : vec4<f32> = x_34.x_CameraViewZExtent[0i];
  let x_426 : vec4<f32> = u_xlat2;
  let x_429 : vec4<f32> = u_xlat3;
  let x_431 : vec3<f32> = ((vec3<f32>(x_424.y, x_424.z, x_424.x) * vec3<f32>(x_426.z, x_426.z, x_426.z)) + vec3<f32>(x_429.x, x_429.y, x_429.z));
  let x_432 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_431.x, x_431.y, x_431.z, x_432.w);
  let x_434 : vec3<f32> = u_xlat1;
  let x_437 : vec4<f32> = u_xlat3;
  let x_439 : vec3<f32> = (-(vec3<f32>(x_434.y, x_434.z, x_434.x)) + vec3<f32>(x_437.x, x_437.y, x_437.z));
  let x_440 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_439.x, x_439.y, x_439.z, x_440.w);
  let x_442 : vec4<f32> = u_xlat2;
  let x_444 : vec4<f32> = u_xlat3;
  u_xlat4 = (vec3<f32>(x_442.x, x_442.y, x_442.w) * vec3<f32>(x_444.x, x_444.y, x_444.z));
  let x_447 : vec4<f32> = u_xlat2;
  let x_449 : vec4<f32> = u_xlat3;
  let x_452 : vec3<f32> = u_xlat4;
  let x_454 : vec3<f32> = ((vec3<f32>(x_447.w, x_447.x, x_447.y) * vec3<f32>(x_449.y, x_449.z, x_449.x)) + -(x_452));
  let x_455 : vec4<f32> = u_xlat2;
  u_xlat2 = vec4<f32>(x_454.x, x_454.y, x_454.z, x_455.w);
  let x_457 : vec4<f32> = u_xlat2;
  let x_459 : vec4<f32> = u_xlat2;
  u_xlat14.x = dot(vec3<f32>(x_457.x, x_457.y, x_457.z), vec3<f32>(x_459.x, x_459.y, x_459.z));
  let x_464 : f32 = u_xlat14.x;
  u_xlat14.x = inverseSqrt(x_464);
  let x_467 : vec2<f32> = u_xlat14;
  let x_469 : vec4<f32> = u_xlat2;
  let x_471 : vec3<f32> = (vec3<f32>(x_467.x, x_467.x, x_467.x) * vec3<f32>(x_469.x, x_469.y, x_469.z));
  let x_472 : vec4<f32> = u_xlat2;
  u_xlat2 = vec4<f32>(x_471.x, x_471.y, x_471.z, x_472.w);
  let x_474 : vec2<f32> = vs_TEXCOORD0;
  let x_477 : vec4<f32> = x_34.x_SSAOBlueNoiseParams;
  u_xlat14 = (x_474 + vec2<f32>(x_477.z, x_477.w));
  let x_480 : vec2<f32> = u_xlat14;
  let x_482 : vec4<f32> = x_34.x_SSAOBlueNoiseParams;
  let x_484 : vec2<f32> = (x_480 * vec2<f32>(x_482.x, x_482.y));
  let x_485 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_484.x, x_484.y, x_485.z, x_485.w);
  let x_493 : vec4<f32> = u_xlat3;
  let x_496 : f32 = x_34.x_GlobalMipBias.x;
  let x_497 : vec4<f32> = textureSampleBias(x_BlueNoiseTexture, sampler_PointRepeat, vec2<f32>(x_493.x, x_493.y), x_496);
  u_xlat22 = x_497.w;
  let x_500 : f32 = u_xlat22;
  u_xlat23 = fract(x_500);
  let x_502 : f32 = u_xlat23;
  u_xlat3.z = ((x_502 * 2.0f) + -1.0f);
  let x_507 : f32 = u_xlat22;
  u_xlat22 = (x_507 + 0.9296875f);
  let x_510 : f32 = u_xlat22;
  u_xlat22 = (x_510 * 628.31854248f);
  let x_514 : f32 = u_xlat3.z;
  let x_517 : f32 = u_xlat3.z;
  u_xlat23 = ((-(x_514) * x_517) + 1.0f);
  let x_520 : f32 = u_xlat23;
  u_xlat23 = sqrt(x_520);
  let x_522 : f32 = u_xlat22;
  u_xlat4.x = sin(x_522);
  let x_525 : f32 = u_xlat22;
  u_xlat5.x = cos(x_525);
  let x_528 : f32 = u_xlat23;
  let x_530 : f32 = u_xlat5.x;
  u_xlat3.x = (x_528 * x_530);
  let x_533 : f32 = u_xlat23;
  let x_535 : f32 = u_xlat4.x;
  u_xlat3.y = (x_533 * x_535);
  let x_538 : vec4<f32> = u_xlat2;
  let x_540 : vec4<f32> = u_xlat3;
  u_xlat22 = dot(vec3<f32>(x_538.x, x_538.y, x_538.z), vec3<f32>(x_540.x, x_540.y, x_540.z));
  let x_544 : f32 = u_xlat22;
  u_xlatb22 = (x_544 >= 0.0f);
  let x_546 : bool = u_xlatb22;
  u_xlat22 = select(-1.0f, 1.0f, x_546);
  let x_548 : f32 = u_xlat22;
  let x_550 : vec4<f32> = u_xlat3;
  let x_552 : vec3<f32> = (vec3<f32>(x_548, x_548, x_548) * vec3<f32>(x_550.x, x_550.y, x_550.z));
  let x_553 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_552.x, x_552.y, x_552.z, x_553.w);
  let x_555 : vec4<f32> = u_xlat3;
  let x_558 : vec4<f32> = x_34.x_SSAOParams;
  let x_560 : vec3<f32> = (vec3<f32>(x_555.x, x_555.y, x_555.z) * vec3<f32>(x_558.y, x_558.y, x_558.y));
  let x_561 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_560.x, x_560.y, x_560.z, x_561.w);
  let x_563 : vec4<f32> = u_xlat3;
  let x_568 : vec3<f32> = u_xlat1;
  let x_569 : vec3<f32> = ((vec3<f32>(x_563.x, x_563.y, x_563.z) * vec3<f32>(0.100000001f, 0.100000001f, 0.100000001f)) + x_568);
  let x_570 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_569.x, x_569.y, x_569.z, x_570.w);
  let x_573 : vec4<f32> = u_xlat3;
  let x_577 : vec4<f32> = x_34.x_CameraViewProjections[0i][1i];
  let x_579 : vec2<f32> = (vec2<f32>(x_573.y, x_573.y) * vec2<f32>(x_577.x, x_577.y));
  let x_580 : vec3<f32> = u_xlat10;
  u_xlat10 = vec3<f32>(x_579.x, x_580.y, x_579.y);
  let x_583 : vec4<f32> = x_34.x_CameraViewProjections[0i][0i];
  let x_585 : vec4<f32> = u_xlat3;
  let x_588 : vec3<f32> = u_xlat10;
  let x_590 : vec2<f32> = ((vec2<f32>(x_583.x, x_583.y) * vec2<f32>(x_585.x, x_585.x)) + vec2<f32>(x_588.x, x_588.z));
  let x_591 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_590.x, x_590.y, x_591.z, x_591.w);
  let x_594 : vec4<f32> = x_34.x_CameraViewProjections[0i][2i];
  let x_596 : vec4<f32> = u_xlat3;
  let x_599 : vec4<f32> = u_xlat3;
  let x_601 : vec2<f32> = ((vec2<f32>(x_594.x, x_594.y) * vec2<f32>(x_596.z, x_596.z)) + vec2<f32>(x_599.x, x_599.y));
  let x_602 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_601.x, x_601.y, x_602.z, x_602.w);
  let x_604 : vec4<f32> = u_xlat3;
  let x_607 : vec2<f32> = (vec2<f32>(x_604.x, x_604.y) + vec2<f32>(1.0f, 1.0f));
  let x_608 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_607.x, x_607.y, x_608.z, x_608.w);
  let x_610 : vec4<f32> = u_xlat3;
  let x_613 : vec2<f32> = (vec2<f32>(x_610.x, x_610.y) * vec2<f32>(0.5f, 0.5f));
  let x_614 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_613.x, x_613.y, x_614.z, x_614.w);
  let x_616 : vec4<f32> = u_xlat3;
  let x_620 : vec2<f32> = clamp(vec2<f32>(x_616.x, x_616.y), vec2<f32>(0.0f, 0.0f), vec2<f32>(1.0f, 1.0f));
  let x_621 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_620.x, x_620.y, x_621.z, x_621.w);
  let x_626 : vec4<f32> = u_xlat3;
  let x_629 : f32 = x_34.x_GlobalMipBias.x;
  let x_630 : vec4<f32> = textureSampleBias(x_CameraDepthTexture, sampler_CameraDepthTexture, vec2<f32>(x_626.x, x_626.y), x_629);
  u_xlat22 = x_630.x;
  let x_633 : f32 = u_xlat7.x;
  let x_635 : f32 = u_xlat22;
  let x_638 : f32 = x_34.x_ProjectionParams.z;
  u_xlat23 = ((-(x_633) * x_635) + x_638);
  let x_641 : f32 = u_xlat0;
  let x_642 : f32 = u_xlat23;
  u_xlat17 = (x_641 + -(x_642));
  let x_646 : f32 = u_xlat17;
  let x_649 : f32 = x_34.x_SSAOParams.y;
  u_xlatb17 = (abs(x_646) < x_649);
  let x_651 : bool = u_xlatb17;
  u_xlat17 = select(0.0f, 1.0f, x_651);
  let x_653 : f32 = u_xlat22;
  u_xlatb22 = (0.00001f < x_653);
  let x_655 : bool = u_xlatb22;
  u_xlat22 = select(0.0f, 1.0f, x_655);
  let x_657 : f32 = u_xlat22;
  let x_658 : f32 = u_xlat17;
  u_xlat22 = (x_657 * x_658);
  let x_661 : f32 = u_xlat3.y;
  u_xlat10.x = (-(x_661) + 1.0f);
  let x_665 : f32 = u_xlat23;
  let x_667 : f32 = x_34.x_ProjectionParams.w;
  u_xlat23 = (x_665 * x_667);
  let x_670 : vec4<f32> = x_34.x_CameraViewXExtent[0i];
  let x_672 : vec4<f32> = u_xlat3;
  let x_676 : vec4<f32> = x_34.x_CameraViewTopLeftCorner[0i];
  let x_678 : vec3<f32> = ((vec3<f32>(x_670.x, x_670.y, x_670.z) * vec3<f32>(x_672.x, x_672.x, x_672.x)) + vec3<f32>(x_676.x, x_676.y, x_676.z));
  let x_679 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_678.x, x_679.y, x_678.y, x_678.z);
  let x_682 : vec4<f32> = x_34.x_CameraViewYExtent[0i];
  let x_684 : vec3<f32> = u_xlat10;
  let x_687 : vec4<f32> = u_xlat3;
  let x_689 : vec3<f32> = ((vec3<f32>(x_682.x, x_682.y, x_682.z) * vec3<f32>(x_684.x, x_684.x, x_684.x)) + vec3<f32>(x_687.x, x_687.z, x_687.w));
  let x_690 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_689.x, x_689.y, x_689.z, x_690.w);
  let x_693 : vec4<f32> = x_34.x_CameraViewZExtent[0i];
  let x_695 : f32 = u_xlat23;
  let x_698 : vec4<f32> = u_xlat3;
  let x_700 : vec3<f32> = ((vec3<f32>(x_693.x, x_693.y, x_693.z) * vec3<f32>(x_695, x_695, x_695)) + vec3<f32>(x_698.x, x_698.y, x_698.z));
  let x_701 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_700.x, x_700.y, x_700.z, x_701.w);
  let x_703 : vec3<f32> = u_xlat1;
  let x_705 : vec4<f32> = u_xlat3;
  let x_707 : vec3<f32> = (-(x_703) + vec3<f32>(x_705.x, x_705.y, x_705.z));
  let x_708 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_707.x, x_707.y, x_707.z, x_708.w);
  let x_710 : vec4<f32> = u_xlat3;
  let x_712 : vec4<f32> = u_xlat2;
  u_xlat23 = dot(vec3<f32>(x_710.x, x_710.y, x_710.z), vec3<f32>(x_712.x, x_712.y, x_712.z));
  let x_715 : f32 = u_xlat0;
  let x_719 : f32 = u_xlat23;
  u_xlat23 = ((-(x_715) * 0.004f) + x_719);
  let x_721 : f32 = u_xlat23;
  u_xlat23 = max(x_721, 0.0f);
  let x_723 : vec4<f32> = u_xlat3;
  let x_725 : vec4<f32> = u_xlat3;
  u_xlat3.x = dot(vec3<f32>(x_723.x, x_723.y, x_723.z), vec3<f32>(x_725.x, x_725.y, x_725.z));
  let x_730 : f32 = u_xlat3.x;
  u_xlat3.x = (x_730 + 0.0001f);
  let x_735 : f32 = u_xlat3.x;
  u_xlat3.x = (1.0f / x_735);
  let x_738 : f32 = u_xlat23;
  let x_740 : f32 = u_xlat3.x;
  u_xlat23 = (x_738 * x_740);
  let x_742 : vec2<f32> = u_xlat14;
  let x_745 : vec4<f32> = x_34.x_SSAOBlueNoiseParams;
  u_xlat3 = ((vec4<f32>(x_742.x, x_742.y, x_742.x, x_742.y) * vec4<f32>(x_745.x, x_745.y, x_745.x, x_745.y)) + vec4<f32>(0.25f, 0.25f, 0.5f, 0.5f));
  let x_754 : vec4<f32> = u_xlat3;
  let x_757 : f32 = x_34.x_GlobalMipBias.x;
  let x_758 : vec4<f32> = textureSampleBias(x_BlueNoiseTexture, sampler_PointRepeat, vec2<f32>(x_754.x, x_754.y), x_757);
  u_xlat3.x = x_758.w;
  let x_761 : vec4<f32> = u_xlat3;
  let x_766 : vec2<f32> = (vec2<f32>(x_761.x, x_761.x) + vec2<f32>(0.33984375f, 0.76171875f));
  let x_767 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_766.x, x_766.y, x_767.z, x_767.w);
  let x_770 : f32 = u_xlat3.x;
  u_xlat3.x = fract(x_770);
  let x_774 : f32 = u_xlat3.x;
  u_xlat4.z = ((x_774 * 2.0f) + -1.0f);
  let x_779 : f32 = u_xlat3.y;
  u_xlat3.x = (x_779 * 628.31854248f);
  let x_783 : f32 = u_xlat4.z;
  let x_786 : f32 = u_xlat4.z;
  u_xlat10.x = ((-(x_783) * x_786) + 1.0f);
  let x_791 : f32 = u_xlat10.x;
  u_xlat10.x = sqrt(x_791);
  let x_795 : f32 = u_xlat3.x;
  u_xlat5.x = cos(x_795);
  let x_799 : f32 = u_xlat3.x;
  u_xlat3.x = sin(x_799);
  let x_803 : f32 = u_xlat10.x;
  let x_805 : f32 = u_xlat5.x;
  u_xlat4.x = (x_803 * x_805);
  let x_809 : f32 = u_xlat3.x;
  let x_811 : f32 = u_xlat10.x;
  u_xlat4.y = (x_809 * x_811);
  let x_814 : vec4<f32> = u_xlat2;
  let x_816 : vec3<f32> = u_xlat4;
  u_xlat3.x = dot(vec3<f32>(x_814.x, x_814.y, x_814.z), x_816);
  let x_821 : f32 = u_xlat3.x;
  u_xlatb3 = (x_821 >= 0.0f);
  let x_823 : bool = u_xlatb3;
  u_xlat3.x = select(-1.0f, 1.0f, x_823);
  let x_826 : vec4<f32> = u_xlat3;
  let x_828 : vec3<f32> = u_xlat4;
  u_xlat4 = (vec3<f32>(x_826.x, x_826.x, x_826.x) * x_828);
  let x_830 : vec3<f32> = u_xlat4;
  let x_832 : vec4<f32> = x_34.x_SSAOParams;
  u_xlat4 = (x_830 * vec3<f32>(x_832.y, x_832.y, x_832.y));
  let x_835 : vec3<f32> = u_xlat4;
  let x_839 : vec3<f32> = u_xlat1;
  u_xlat4 = ((x_835 * vec3<f32>(0.15625f, 0.15625f, 0.15625f)) + x_839);
  let x_841 : vec3<f32> = u_xlat4;
  let x_844 : vec4<f32> = x_34.x_CameraViewProjections[0i][1i];
  let x_846 : vec2<f32> = (vec2<f32>(x_841.y, x_841.y) * vec2<f32>(x_844.x, x_844.y));
  let x_847 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_846.x, x_846.y, x_847.z, x_847.w);
  let x_850 : vec4<f32> = x_34.x_CameraViewProjections[0i][0i];
  let x_852 : vec3<f32> = u_xlat4;
  let x_855 : vec4<f32> = u_xlat3;
  let x_857 : vec2<f32> = ((vec2<f32>(x_850.x, x_850.y) * vec2<f32>(x_852.x, x_852.x)) + vec2<f32>(x_855.x, x_855.y));
  let x_858 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_857.x, x_857.y, x_858.z, x_858.w);
  let x_861 : vec4<f32> = x_34.x_CameraViewProjections[0i][2i];
  let x_863 : vec3<f32> = u_xlat4;
  let x_866 : vec4<f32> = u_xlat3;
  let x_868 : vec2<f32> = ((vec2<f32>(x_861.x, x_861.y) * vec2<f32>(x_863.z, x_863.z)) + vec2<f32>(x_866.x, x_866.y));
  let x_869 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_868.x, x_868.y, x_869.z, x_869.w);
  let x_871 : vec4<f32> = u_xlat3;
  let x_873 : vec2<f32> = (vec2<f32>(x_871.x, x_871.y) + vec2<f32>(1.0f, 1.0f));
  let x_874 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_873.x, x_873.y, x_874.z, x_874.w);
  let x_876 : vec4<f32> = u_xlat3;
  let x_878 : vec2<f32> = (vec2<f32>(x_876.x, x_876.y) * vec2<f32>(0.5f, 0.5f));
  let x_879 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_878.x, x_878.y, x_879.z, x_879.w);
  let x_881 : vec4<f32> = u_xlat3;
  let x_885 : vec2<f32> = clamp(vec2<f32>(x_881.x, x_881.y), vec2<f32>(0.0f, 0.0f), vec2<f32>(1.0f, 1.0f));
  let x_886 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_885.x, x_885.y, x_886.z, x_886.w);
  let x_891 : vec4<f32> = u_xlat3;
  let x_894 : f32 = x_34.x_GlobalMipBias.x;
  let x_895 : vec4<f32> = textureSampleBias(x_CameraDepthTexture, sampler_CameraDepthTexture, vec2<f32>(x_891.x, x_891.y), x_894);
  u_xlat4.x = x_895.x;
  let x_899 : f32 = u_xlat7.x;
  let x_902 : f32 = u_xlat4.x;
  let x_905 : f32 = x_34.x_ProjectionParams.z;
  u_xlat11.x = ((-(x_899) * x_902) + x_905);
  let x_909 : f32 = u_xlat0;
  let x_911 : f32 = u_xlat11.x;
  u_xlat18 = (x_909 + -(x_911));
  let x_917 : f32 = u_xlat18;
  let x_920 : f32 = x_34.x_SSAOParams.y;
  u_xlatb4.z = (abs(x_917) < x_920);
  let x_924 : f32 = u_xlat4.x;
  u_xlatb4.x = (0.00001f < x_924);
  let x_928 : bool = u_xlatb4.x;
  u_xlat4.x = select(0.0f, 1.0f, x_928);
  let x_932 : bool = u_xlatb4.z;
  u_xlat4.z = select(0.0f, 1.0f, x_932);
  let x_936 : f32 = u_xlat4.x;
  let x_938 : f32 = u_xlat4.z;
  u_xlat4.x = (x_936 * x_938);
  let x_942 : f32 = u_xlat3.y;
  u_xlat10.x = (-(x_942) + 1.0f);
  let x_947 : f32 = u_xlat11.x;
  let x_949 : f32 = x_34.x_ProjectionParams.w;
  u_xlat11.x = (x_947 * x_949);
  let x_953 : vec4<f32> = x_34.x_CameraViewXExtent[0i];
  let x_955 : vec4<f32> = u_xlat3;
  let x_959 : vec4<f32> = x_34.x_CameraViewTopLeftCorner[0i];
  let x_961 : vec3<f32> = ((vec3<f32>(x_953.x, x_953.y, x_953.z) * vec3<f32>(x_955.x, x_955.x, x_955.x)) + vec3<f32>(x_959.x, x_959.y, x_959.z));
  let x_962 : vec4<f32> = u_xlat5;
  u_xlat5 = vec4<f32>(x_961.x, x_961.y, x_961.z, x_962.w);
  let x_965 : vec4<f32> = x_34.x_CameraViewYExtent[0i];
  let x_967 : vec3<f32> = u_xlat10;
  let x_970 : vec4<f32> = u_xlat5;
  let x_972 : vec3<f32> = ((vec3<f32>(x_965.x, x_965.y, x_965.z) * vec3<f32>(x_967.x, x_967.x, x_967.x)) + vec3<f32>(x_970.x, x_970.y, x_970.z));
  let x_973 : vec4<f32> = u_xlat5;
  u_xlat5 = vec4<f32>(x_972.x, x_972.y, x_972.z, x_973.w);
  let x_976 : vec4<f32> = x_34.x_CameraViewZExtent[0i];
  let x_978 : vec3<f32> = u_xlat11;
  let x_981 : vec4<f32> = u_xlat5;
  u_xlat11 = ((vec3<f32>(x_976.x, x_976.y, x_976.z) * vec3<f32>(x_978.x, x_978.x, x_978.x)) + vec3<f32>(x_981.x, x_981.y, x_981.z));
  let x_984 : vec3<f32> = u_xlat1;
  let x_986 : vec3<f32> = u_xlat11;
  u_xlat11 = (-(x_984) + x_986);
  let x_988 : vec3<f32> = u_xlat11;
  let x_989 : vec4<f32> = u_xlat2;
  u_xlat3.x = dot(x_988, vec3<f32>(x_989.x, x_989.y, x_989.z));
  let x_993 : f32 = u_xlat0;
  let x_997 : f32 = u_xlat3.x;
  u_xlat3.x = ((-(x_993) * 0.004f) + x_997);
  let x_1001 : f32 = u_xlat3.x;
  u_xlat3.x = max(x_1001, 0.0f);
  let x_1004 : vec3<f32> = u_xlat11;
  let x_1005 : vec3<f32> = u_xlat11;
  u_xlat10.x = dot(x_1004, x_1005);
  let x_1009 : f32 = u_xlat10.x;
  u_xlat10.x = (x_1009 + 0.0001f);
  let x_1013 : f32 = u_xlat10.x;
  u_xlat10.x = (1.0f / x_1013);
  let x_1017 : f32 = u_xlat10.x;
  let x_1019 : f32 = u_xlat3.x;
  u_xlat3.x = (x_1017 * x_1019);
  let x_1023 : f32 = u_xlat4.x;
  let x_1025 : f32 = u_xlat3.x;
  u_xlat3.x = (x_1023 * x_1025);
  let x_1028 : f32 = u_xlat23;
  let x_1029 : f32 = u_xlat22;
  let x_1032 : f32 = u_xlat3.x;
  u_xlat22 = ((x_1028 * x_1029) + x_1032);
  let x_1037 : vec4<f32> = u_xlat3;
  let x_1040 : f32 = x_34.x_GlobalMipBias.x;
  let x_1041 : vec4<f32> = textureSampleBias(x_BlueNoiseTexture, sampler_PointRepeat, vec2<f32>(x_1037.z, x_1037.w), x_1040);
  u_xlat23 = x_1041.w;
  let x_1043 : f32 = u_xlat23;
  let x_1048 : vec2<f32> = (vec2<f32>(x_1043, x_1043) + vec2<f32>(0.75390625f, 0.133333296f));
  let x_1049 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_1048.x, x_1048.y, x_1049.z, x_1049.w);
  let x_1052 : f32 = u_xlat3.x;
  u_xlat23 = fract(x_1052);
  let x_1054 : f32 = u_xlat23;
  u_xlat4.z = ((x_1054 * 2.0f) + -1.0f);
  let x_1059 : f32 = u_xlat3.y;
  u_xlat23 = (x_1059 * 628.31854248f);
  let x_1062 : f32 = u_xlat4.z;
  let x_1065 : f32 = u_xlat4.z;
  u_xlat3.x = ((-(x_1062) * x_1065) + 1.0f);
  let x_1070 : f32 = u_xlat3.x;
  u_xlat3.x = sqrt(x_1070);
  let x_1073 : f32 = u_xlat23;
  u_xlat5.x = sin(x_1073);
  let x_1076 : f32 = u_xlat23;
  u_xlat6.x = cos(x_1076);
  let x_1080 : f32 = u_xlat3.x;
  let x_1082 : f32 = u_xlat6.x;
  u_xlat4.x = (x_1080 * x_1082);
  let x_1086 : f32 = u_xlat3.x;
  let x_1088 : f32 = u_xlat5.x;
  u_xlat4.y = (x_1086 * x_1088);
  let x_1091 : vec4<f32> = u_xlat2;
  let x_1093 : vec3<f32> = u_xlat4;
  u_xlat23 = dot(vec3<f32>(x_1091.x, x_1091.y, x_1091.z), x_1093);
  let x_1096 : f32 = u_xlat23;
  u_xlatb23 = (x_1096 >= 0.0f);
  let x_1098 : bool = u_xlatb23;
  u_xlat23 = select(-1.0f, 1.0f, x_1098);
  let x_1100 : f32 = u_xlat23;
  let x_1102 : vec3<f32> = u_xlat4;
  let x_1103 : vec3<f32> = (vec3<f32>(x_1100, x_1100, x_1100) * x_1102);
  let x_1104 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_1103.x, x_1103.y, x_1103.z, x_1104.w);
  let x_1106 : vec4<f32> = u_xlat3;
  let x_1109 : vec4<f32> = x_34.x_SSAOParams;
  let x_1111 : vec3<f32> = (vec3<f32>(x_1106.x, x_1106.y, x_1106.z) * vec3<f32>(x_1109.y, x_1109.y, x_1109.y));
  let x_1112 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_1111.x, x_1111.y, x_1111.z, x_1112.w);
  let x_1114 : vec4<f32> = u_xlat3;
  let x_1119 : vec3<f32> = u_xlat1;
  let x_1120 : vec3<f32> = ((vec3<f32>(x_1114.x, x_1114.y, x_1114.z) * vec3<f32>(0.324999988f, 0.324999988f, 0.324999988f)) + x_1119);
  let x_1121 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_1120.x, x_1120.y, x_1120.z, x_1121.w);
  let x_1123 : vec4<f32> = u_xlat3;
  let x_1126 : vec4<f32> = x_34.x_CameraViewProjections[0i][1i];
  let x_1128 : vec2<f32> = (vec2<f32>(x_1123.y, x_1123.y) * vec2<f32>(x_1126.x, x_1126.y));
  let x_1129 : vec3<f32> = u_xlat10;
  u_xlat10 = vec3<f32>(x_1128.x, x_1129.y, x_1128.y);
  let x_1132 : vec4<f32> = x_34.x_CameraViewProjections[0i][0i];
  let x_1134 : vec4<f32> = u_xlat3;
  let x_1137 : vec3<f32> = u_xlat10;
  let x_1139 : vec2<f32> = ((vec2<f32>(x_1132.x, x_1132.y) * vec2<f32>(x_1134.x, x_1134.x)) + vec2<f32>(x_1137.x, x_1137.z));
  let x_1140 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_1139.x, x_1139.y, x_1140.z, x_1140.w);
  let x_1143 : vec4<f32> = x_34.x_CameraViewProjections[0i][2i];
  let x_1145 : vec4<f32> = u_xlat3;
  let x_1148 : vec4<f32> = u_xlat3;
  let x_1150 : vec2<f32> = ((vec2<f32>(x_1143.x, x_1143.y) * vec2<f32>(x_1145.z, x_1145.z)) + vec2<f32>(x_1148.x, x_1148.y));
  let x_1151 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_1150.x, x_1150.y, x_1151.z, x_1151.w);
  let x_1153 : vec4<f32> = u_xlat3;
  let x_1155 : vec2<f32> = (vec2<f32>(x_1153.x, x_1153.y) + vec2<f32>(1.0f, 1.0f));
  let x_1156 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_1155.x, x_1155.y, x_1156.z, x_1156.w);
  let x_1158 : vec4<f32> = u_xlat3;
  let x_1160 : vec2<f32> = (vec2<f32>(x_1158.x, x_1158.y) * vec2<f32>(0.5f, 0.5f));
  let x_1161 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_1160.x, x_1160.y, x_1161.z, x_1161.w);
  let x_1163 : vec4<f32> = u_xlat3;
  let x_1167 : vec2<f32> = clamp(vec2<f32>(x_1163.x, x_1163.y), vec2<f32>(0.0f, 0.0f), vec2<f32>(1.0f, 1.0f));
  let x_1168 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_1167.x, x_1167.y, x_1168.z, x_1168.w);
  let x_1173 : vec4<f32> = u_xlat3;
  let x_1176 : f32 = x_34.x_GlobalMipBias.x;
  let x_1177 : vec4<f32> = textureSampleBias(x_CameraDepthTexture, sampler_CameraDepthTexture, vec2<f32>(x_1173.x, x_1173.y), x_1176);
  u_xlat23 = x_1177.x;
  let x_1180 : f32 = u_xlat7.x;
  let x_1182 : f32 = u_xlat23;
  let x_1185 : f32 = x_34.x_ProjectionParams.z;
  u_xlat17 = ((-(x_1180) * x_1182) + x_1185);
  let x_1188 : f32 = u_xlat0;
  let x_1189 : f32 = u_xlat17;
  u_xlat24 = (x_1188 + -(x_1189));
  let x_1193 : f32 = u_xlat24;
  let x_1196 : f32 = x_34.x_SSAOParams.y;
  u_xlatb24 = (abs(x_1193) < x_1196);
  let x_1198 : bool = u_xlatb24;
  u_xlat24 = select(0.0f, 1.0f, x_1198);
  let x_1200 : f32 = u_xlat23;
  u_xlatb23 = (0.00001f < x_1200);
  let x_1202 : bool = u_xlatb23;
  u_xlat23 = select(0.0f, 1.0f, x_1202);
  let x_1204 : f32 = u_xlat23;
  let x_1205 : f32 = u_xlat24;
  u_xlat23 = (x_1204 * x_1205);
  let x_1208 : f32 = u_xlat3.y;
  u_xlat10.x = (-(x_1208) + 1.0f);
  let x_1212 : f32 = u_xlat17;
  let x_1214 : f32 = x_34.x_ProjectionParams.w;
  u_xlat17 = (x_1212 * x_1214);
  let x_1217 : vec4<f32> = x_34.x_CameraViewXExtent[0i];
  let x_1219 : vec4<f32> = u_xlat3;
  let x_1223 : vec4<f32> = x_34.x_CameraViewTopLeftCorner[0i];
  u_xlat4 = ((vec3<f32>(x_1217.x, x_1217.y, x_1217.z) * vec3<f32>(x_1219.x, x_1219.x, x_1219.x)) + vec3<f32>(x_1223.x, x_1223.y, x_1223.z));
  let x_1227 : vec4<f32> = x_34.x_CameraViewYExtent[0i];
  let x_1229 : vec3<f32> = u_xlat10;
  let x_1232 : vec3<f32> = u_xlat4;
  let x_1233 : vec3<f32> = ((vec3<f32>(x_1227.x, x_1227.y, x_1227.z) * vec3<f32>(x_1229.x, x_1229.x, x_1229.x)) + x_1232);
  let x_1234 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_1233.x, x_1233.y, x_1234.z, x_1233.z);
  let x_1237 : vec4<f32> = x_34.x_CameraViewZExtent[0i];
  let x_1239 : f32 = u_xlat17;
  let x_1242 : vec4<f32> = u_xlat3;
  let x_1244 : vec3<f32> = ((vec3<f32>(x_1237.x, x_1237.y, x_1237.z) * vec3<f32>(x_1239, x_1239, x_1239)) + vec3<f32>(x_1242.x, x_1242.y, x_1242.w));
  let x_1245 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_1244.x, x_1244.y, x_1244.z, x_1245.w);
  let x_1247 : vec3<f32> = u_xlat1;
  let x_1249 : vec4<f32> = u_xlat3;
  let x_1251 : vec3<f32> = (-(x_1247) + vec3<f32>(x_1249.x, x_1249.y, x_1249.z));
  let x_1252 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_1251.x, x_1251.y, x_1251.z, x_1252.w);
  let x_1254 : vec4<f32> = u_xlat3;
  let x_1256 : vec4<f32> = u_xlat2;
  u_xlat24 = dot(vec3<f32>(x_1254.x, x_1254.y, x_1254.z), vec3<f32>(x_1256.x, x_1256.y, x_1256.z));
  let x_1259 : f32 = u_xlat0;
  let x_1262 : f32 = u_xlat24;
  u_xlat24 = ((-(x_1259) * 0.004f) + x_1262);
  let x_1264 : f32 = u_xlat24;
  u_xlat24 = max(x_1264, 0.0f);
  let x_1266 : vec4<f32> = u_xlat3;
  let x_1268 : vec4<f32> = u_xlat3;
  u_xlat3.x = dot(vec3<f32>(x_1266.x, x_1266.y, x_1266.z), vec3<f32>(x_1268.x, x_1268.y, x_1268.z));
  let x_1273 : f32 = u_xlat3.x;
  u_xlat3.x = (x_1273 + 0.0001f);
  let x_1277 : f32 = u_xlat3.x;
  u_xlat3.x = (1.0f / x_1277);
  let x_1281 : f32 = u_xlat3.x;
  let x_1282 : f32 = u_xlat24;
  u_xlat3.x = (x_1281 * x_1282);
  let x_1286 : f32 = u_xlat3.x;
  let x_1287 : f32 = u_xlat23;
  let x_1289 : f32 = u_xlat22;
  u_xlat22 = ((x_1286 * x_1287) + x_1289);
  let x_1291 : vec2<f32> = u_xlat14;
  let x_1293 : vec4<f32> = x_34.x_SSAOBlueNoiseParams;
  u_xlat14 = ((x_1291 * vec2<f32>(x_1293.x, x_1293.y)) + vec2<f32>(0.75f, 0.75f));
  let x_1302 : vec2<f32> = u_xlat14;
  let x_1304 : f32 = x_34.x_GlobalMipBias.x;
  let x_1305 : vec4<f32> = textureSampleBias(x_BlueNoiseTexture, sampler_PointRepeat, x_1302, x_1304);
  u_xlat14.x = x_1305.w;
  let x_1308 : vec2<f32> = u_xlat14;
  u_xlat14 = (vec2<f32>(x_1308.x, x_1308.x) + vec2<f32>(0.56640625f, 0.015625f));
  let x_1315 : f32 = u_xlat14.x;
  u_xlat14.x = fract(x_1315);
  let x_1319 : f32 = u_xlat14.x;
  u_xlat3.z = ((x_1319 * 2.0f) + -1.0f);
  let x_1324 : f32 = u_xlat14.y;
  u_xlat14.x = (x_1324 * 628.31854248f);
  let x_1328 : f32 = u_xlat3.z;
  let x_1331 : f32 = u_xlat3.z;
  u_xlat21 = ((-(x_1328) * x_1331) + 1.0f);
  let x_1334 : f32 = u_xlat21;
  u_xlat21 = sqrt(x_1334);
  let x_1337 : f32 = u_xlat14.x;
  u_xlat4.x = sin(x_1337);
  let x_1341 : f32 = u_xlat14.x;
  u_xlat5.x = cos(x_1341);
  let x_1344 : f32 = u_xlat21;
  let x_1346 : f32 = u_xlat5.x;
  u_xlat3.x = (x_1344 * x_1346);
  let x_1349 : f32 = u_xlat21;
  let x_1351 : f32 = u_xlat4.x;
  u_xlat3.y = (x_1349 * x_1351);
  let x_1354 : vec4<f32> = u_xlat2;
  let x_1356 : vec4<f32> = u_xlat3;
  u_xlat14.x = dot(vec3<f32>(x_1354.x, x_1354.y, x_1354.z), vec3<f32>(x_1356.x, x_1356.y, x_1356.z));
  let x_1361 : f32 = u_xlat14.x;
  u_xlatb14 = (x_1361 >= 0.0f);
  let x_1363 : bool = u_xlatb14;
  u_xlat14.x = select(-1.0f, 1.0f, x_1363);
  let x_1366 : vec2<f32> = u_xlat14;
  let x_1368 : vec4<f32> = u_xlat3;
  let x_1370 : vec3<f32> = (vec3<f32>(x_1366.x, x_1366.x, x_1366.x) * vec3<f32>(x_1368.x, x_1368.y, x_1368.z));
  let x_1371 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_1370.x, x_1370.y, x_1370.z, x_1371.w);
  let x_1373 : vec4<f32> = u_xlat3;
  let x_1376 : vec4<f32> = x_34.x_SSAOParams;
  let x_1378 : vec3<f32> = (vec3<f32>(x_1373.x, x_1373.y, x_1373.z) * vec3<f32>(x_1376.y, x_1376.y, x_1376.y));
  let x_1379 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_1378.x, x_1378.y, x_1378.z, x_1379.w);
  let x_1381 : vec4<f32> = u_xlat3;
  let x_1386 : vec3<f32> = u_xlat1;
  let x_1387 : vec3<f32> = ((vec3<f32>(x_1381.x, x_1381.y, x_1381.z) * vec3<f32>(0.606249988f, 0.606249988f, 0.606249988f)) + x_1386);
  let x_1388 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_1387.x, x_1387.y, x_1387.z, x_1388.w);
  let x_1390 : vec4<f32> = u_xlat3;
  let x_1393 : vec4<f32> = x_34.x_CameraViewProjections[0i][1i];
  u_xlat14 = (vec2<f32>(x_1390.y, x_1390.y) * vec2<f32>(x_1393.x, x_1393.y));
  let x_1397 : vec4<f32> = x_34.x_CameraViewProjections[0i][0i];
  let x_1399 : vec4<f32> = u_xlat3;
  let x_1402 : vec2<f32> = u_xlat14;
  u_xlat14 = ((vec2<f32>(x_1397.x, x_1397.y) * vec2<f32>(x_1399.x, x_1399.x)) + x_1402);
  let x_1405 : vec4<f32> = x_34.x_CameraViewProjections[0i][2i];
  let x_1407 : vec4<f32> = u_xlat3;
  let x_1410 : vec2<f32> = u_xlat14;
  u_xlat14 = ((vec2<f32>(x_1405.x, x_1405.y) * vec2<f32>(x_1407.z, x_1407.z)) + x_1410);
  let x_1412 : vec2<f32> = u_xlat14;
  u_xlat14 = (x_1412 + vec2<f32>(1.0f, 1.0f));
  let x_1414 : vec2<f32> = u_xlat14;
  u_xlat14 = (x_1414 * vec2<f32>(0.5f, 0.5f));
  let x_1416 : vec2<f32> = u_xlat14;
  u_xlat14 = clamp(x_1416, vec2<f32>(0.0f, 0.0f), vec2<f32>(1.0f, 1.0f));
  let x_1423 : vec2<f32> = u_xlat14;
  let x_1425 : f32 = x_34.x_GlobalMipBias.x;
  let x_1426 : vec4<f32> = textureSampleBias(x_CameraDepthTexture, sampler_CameraDepthTexture, x_1423, x_1425);
  u_xlat23 = x_1426.x;
  let x_1429 : f32 = u_xlat7.x;
  let x_1431 : f32 = u_xlat23;
  let x_1434 : f32 = x_34.x_ProjectionParams.z;
  u_xlat7.x = ((-(x_1429) * x_1431) + x_1434);
  let x_1438 : f32 = u_xlat7.x;
  let x_1440 : f32 = u_xlat0;
  u_xlat3.x = (-(x_1438) + x_1440);
  let x_1444 : f32 = u_xlat3.x;
  let x_1447 : f32 = x_34.x_SSAOParams.y;
  u_xlatb3 = (abs(x_1444) < x_1447);
  let x_1449 : bool = u_xlatb3;
  u_xlat3.x = select(0.0f, 1.0f, x_1449);
  let x_1452 : f32 = u_xlat23;
  u_xlatb23 = (0.00001f < x_1452);
  let x_1454 : bool = u_xlatb23;
  u_xlat23 = select(0.0f, 1.0f, x_1454);
  let x_1456 : f32 = u_xlat23;
  let x_1458 : f32 = u_xlat3.x;
  u_xlat23 = (x_1456 * x_1458);
  let x_1461 : f32 = u_xlat14.y;
  u_xlat21 = (-(x_1461) + 1.0f);
  let x_1465 : f32 = u_xlat7.x;
  let x_1467 : f32 = x_34.x_ProjectionParams.w;
  u_xlat7.x = (x_1465 * x_1467);
  let x_1471 : vec4<f32> = x_34.x_CameraViewXExtent[0i];
  let x_1473 : vec2<f32> = u_xlat14;
  let x_1477 : vec4<f32> = x_34.x_CameraViewTopLeftCorner[0i];
  let x_1479 : vec3<f32> = ((vec3<f32>(x_1471.x, x_1471.y, x_1471.z) * vec3<f32>(x_1473.x, x_1473.x, x_1473.x)) + vec3<f32>(x_1477.x, x_1477.y, x_1477.z));
  let x_1480 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_1479.x, x_1479.y, x_1479.z, x_1480.w);
  let x_1483 : vec4<f32> = x_34.x_CameraViewYExtent[0i];
  let x_1485 : f32 = u_xlat21;
  let x_1488 : vec4<f32> = u_xlat3;
  let x_1490 : vec3<f32> = ((vec3<f32>(x_1483.x, x_1483.y, x_1483.z) * vec3<f32>(x_1485, x_1485, x_1485)) + vec3<f32>(x_1488.x, x_1488.y, x_1488.z));
  let x_1491 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_1490.x, x_1490.y, x_1490.z, x_1491.w);
  let x_1494 : vec4<f32> = x_34.x_CameraViewZExtent[0i];
  let x_1496 : vec3<f32> = u_xlat7;
  let x_1499 : vec4<f32> = u_xlat3;
  u_xlat7 = ((vec3<f32>(x_1494.x, x_1494.y, x_1494.z) * vec3<f32>(x_1496.x, x_1496.x, x_1496.x)) + vec3<f32>(x_1499.x, x_1499.y, x_1499.z));
  let x_1502 : vec3<f32> = u_xlat1;
  let x_1504 : vec3<f32> = u_xlat7;
  u_xlat7 = (-(x_1502) + x_1504);
  let x_1506 : vec3<f32> = u_xlat7;
  let x_1507 : vec4<f32> = u_xlat2;
  u_xlat1.x = dot(x_1506, vec3<f32>(x_1507.x, x_1507.y, x_1507.z));
  let x_1511 : f32 = u_xlat0;
  let x_1515 : f32 = u_xlat1.x;
  u_xlat1.x = ((-(x_1511) * 0.004f) + x_1515);
  let x_1519 : f32 = u_xlat1.x;
  u_xlat1.x = max(x_1519, 0.0f);
  let x_1522 : vec3<f32> = u_xlat7;
  let x_1523 : vec3<f32> = u_xlat7;
  u_xlat7.x = dot(x_1522, x_1523);
  let x_1527 : f32 = u_xlat7.x;
  u_xlat7.x = (x_1527 + 0.0001f);
  let x_1531 : f32 = u_xlat7.x;
  u_xlat7.x = (1.0f / x_1531);
  let x_1535 : f32 = u_xlat7.x;
  let x_1537 : f32 = u_xlat1.x;
  u_xlat7.x = (x_1535 * x_1537);
  let x_1541 : f32 = u_xlat7.x;
  let x_1542 : f32 = u_xlat23;
  let x_1544 : f32 = u_xlat22;
  u_xlat7.x = ((x_1541 * x_1542) + x_1544);
  let x_1548 : f32 = u_xlat7.x;
  let x_1550 : f32 = x_34.x_SSAOParams.y;
  u_xlat7.x = (x_1548 * x_1550);
  let x_1554 : f32 = x_34.x_SSAOParams.w;
  u_xlat14.x = (1.0f / x_1554);
  let x_1557 : f32 = u_xlat0;
  let x_1560 : f32 = u_xlat14.x;
  u_xlat0 = ((-(x_1557) * x_1560) + 1.0f);
  let x_1563 : f32 = u_xlat0;
  let x_1564 : f32 = u_xlat0;
  u_xlat0 = (x_1563 * x_1564);
  let x_1567 : f32 = u_xlat7.x;
  let x_1569 : f32 = x_34.x_SSAOParams.x;
  u_xlat7.x = (x_1567 * x_1569);
  let x_1572 : f32 = u_xlat0;
  let x_1574 : f32 = u_xlat7.x;
  u_xlat0 = (x_1572 * x_1574);
  let x_1576 : f32 = u_xlat0;
  u_xlat0 = (x_1576 * 0.25f);
  let x_1578 : f32 = u_xlat0;
  u_xlat0 = clamp(x_1578, 0.0f, 1.0f);
  let x_1580 : f32 = u_xlat0;
  u_xlat0 = log2(x_1580);
  let x_1582 : f32 = u_xlat0;
  u_xlat0 = (x_1582 * 0.600000024f);
  let x_1585 : f32 = u_xlat0;
  SV_Target0.x = exp2(x_1585);
  let x_1589 : vec4<f32> = u_xlat2;
  let x_1593 : vec3<f32> = ((vec3<f32>(x_1589.x, x_1589.y, x_1589.z) * vec3<f32>(0.5f, 0.5f, 0.5f)) + vec3<f32>(0.5f, 0.5f, 0.5f));
  let x_1594 : vec4<f32> = SV_Target0;
  SV_Target0 = vec4<f32>(x_1594.x, x_1593.x, x_1593.y, x_1593.z);
  return;
}

struct main_out {
  @location(0)
  SV_Target0_1 : vec4<f32>,
}

@fragment
fn main(@location(0) vs_TEXCOORD0_param : vec2<f32>, @builtin(position) gl_FragCoord_param : vec4<f32>) -> main_out {
  vs_TEXCOORD0 = vs_TEXCOORD0_param;
  gl_FragCoord = gl_FragCoord_param;
  main_1();
  return main_out(SV_Target0);
}

