struct PGlobals {
  x_ScaledScreenParams : vec4<f32>,
  x_GlobalMipBias : vec2<f32>,
  @size(8)
  padding : u32,
  x_MainLightPosition : vec4<f32>,
  x_MainLightColor : vec4<f32>,
  x_AmbientOcclusionParam : vec4<f32>,
  x_AdditionalLightsCount : vec4<f32>,
  x_WorldSpaceCameraPos : vec3<f32>,
  @size(4)
  padding_1 : u32,
  x_ProjectionParams : vec4<f32>,
  unity_OrthoParams : vec4<f32>,
  x_ScaleBiasRt : vec4<f32>,
  unity_FogParams : vec4<f32>,
  unity_FogColor : vec4<f32>,
  unity_MatrixV : mat4x4<f32>,
}

struct UnityPerMaterial {
  x_MainTex_TexelSize : vec4<f32>,
  x_MRLL_TexelSize : vec4<f32>,
  x_BumpMap_TexelSize : vec4<f32>,
  x_Color1 : vec4<f32>,
  x_Color2 : vec4<f32>,
}

type Arr = array<vec4<f32>, 2u>;

struct UnityPerDraw {
  unity_ObjectToWorld : mat4x4<f32>,
  unity_WorldToObject : mat4x4<f32>,
  unity_LODFade : vec4<f32>,
  unity_WorldTransformParams : vec4<f32>,
  unity_RenderingLayer : vec4<f32>,
  unity_LightData : vec4<f32>,
  unity_LightIndices : Arr,
  unity_ProbesOcclusion : vec4<f32>,
  unity_SpecCube0_HDR : vec4<f32>,
  unity_SpecCube1_HDR : vec4<f32>,
  unity_SpecCube0_BoxMax : vec4<f32>,
  unity_SpecCube0_BoxMin : vec4<f32>,
  unity_SpecCube0_ProbePosition : vec4<f32>,
  unity_SpecCube1_BoxMax : vec4<f32>,
  unity_SpecCube1_BoxMin : vec4<f32>,
  unity_SpecCube1_ProbePosition : vec4<f32>,
  unity_LightmapST : vec4<f32>,
  unity_DynamicLightmapST : vec4<f32>,
  unity_SHAr : vec4<f32>,
  unity_SHAg : vec4<f32>,
  unity_SHAb : vec4<f32>,
  unity_SHBr : vec4<f32>,
  unity_SHBg : vec4<f32>,
  unity_SHBb : vec4<f32>,
  unity_SHC : vec4<f32>,
  unity_RendererBounds_Min : vec4<f32>,
  unity_RendererBounds_Max : vec4<f32>,
  unity_MatrixPreviousM : mat4x4<f32>,
  unity_MatrixPreviousMI : mat4x4<f32>,
  unity_MotionVectorsParams : vec4<f32>,
  unity_SpriteColor : vec4<f32>,
  unity_SpriteProps : vec4<f32>,
}

type Arr_1 = array<mat4x4<f32>, 5u>;

struct MainLightShadows {
  x_MainLightWorldToShadow : Arr_1,
  x_CascadeShadowSplitSpheres0 : vec4<f32>,
  x_CascadeShadowSplitSpheres1 : vec4<f32>,
  x_CascadeShadowSplitSpheres2 : vec4<f32>,
  x_CascadeShadowSplitSpheres3 : vec4<f32>,
  x_CascadeShadowSplitSphereRadii : vec4<f32>,
  x_MainLightShadowOffset0 : vec4<f32>,
  x_MainLightShadowOffset1 : vec4<f32>,
  x_MainLightShadowParams : vec4<f32>,
  x_MainLightShadowmapSize : vec4<f32>,
}

type Arr_2 = array<vec4<f32>, 256u>;

type Arr_3 = array<vec4<f32>, 256u>;

type Arr_4 = array<vec4<f32>, 256u>;

type Arr_5 = array<vec4<f32>, 256u>;

type Arr_6 = array<vec4<f32>, 256u>;

struct strided_arr {
  @size(16)
  el : f32,
}

type Arr_7 = array<strided_arr, 256u>;

struct AdditionalLights {
  x_AdditionalLightsPosition : Arr_6,
  x_AdditionalLightsColor : Arr_6,
  x_AdditionalLightsAttenuation : Arr_6,
  x_AdditionalLightsSpotDir : Arr_6,
  x_AdditionalLightsOcclusionProbes : Arr_6,
  x_AdditionalLightsLayerMasks : Arr_7,
}

var<private> gl_FragCoord : vec4<f32>;

@group(0) @binding(5) var x_MainTex : texture_2d<f32>;

@group(0) @binding(12) var samplerSamplerState_Trilinear_Clamp : sampler;

var<private> vs_INTERP3 : vec4<f32>;

@group(1) @binding(0) var<uniform> x_44 : PGlobals;

@group(0) @binding(6) var x_MRLL : texture_2d<f32>;

@group(1) @binding(4) var<uniform> x_68 : UnityPerMaterial;

@group(0) @binding(7) var x_BumpMap : texture_2d<f32>;

var<private> vs_INTERP2 : vec4<f32>;

@group(1) @binding(2) var<uniform> x_274 : UnityPerDraw;

var<private> vs_INTERP1 : vec3<f32>;

var<private> vs_INTERP0 : vec3<f32>;

@group(0) @binding(2) var unity_LightmapInd : texture_2d<f32>;

@group(0) @binding(9) var samplerunity_Lightmap : sampler;

var<private> vs_INTERP4 : vec2<f32>;

@group(0) @binding(1) var unity_Lightmap : texture_2d<f32>;

@group(0) @binding(3) var x_ScreenSpaceOcclusionTexture : texture_2d<f32>;

@group(0) @binding(10) var sampler_ScreenSpaceOcclusionTexture : sampler;

@group(1) @binding(3) var<uniform> x_599 : MainLightShadows;

var<private> vs_INTERP8 : vec4<f32>;

@group(0) @binding(4) var x_MainLightShadowmapTexture : texture_depth_2d;

@group(0) @binding(11) var sampler_MainLightShadowmapTexture : sampler_comparison;

@group(0) @binding(0) var unity_SpecCube0 : texture_cube<f32>;

@group(0) @binding(8) var samplerunity_SpecCube0 : sampler;

@group(1) @binding(1) var<uniform> x_2207 : AdditionalLights;

var<private> SV_Target0 : vec4<f32>;

fn main_1() {
  var hlslcc_FragCoord : vec4<f32>;
  var u_xlat0 : vec4<f32>;
  var u_xlat1 : vec4<f32>;
  var u_xlat2 : vec3<f32>;
  var u_xlat43 : f32;
  var u_xlat3 : vec3<f32>;
  var u_xlat4 : vec4<f32>;
  var u_xlatb4 : vec3<bool>;
  var u_xlat5 : vec3<f32>;
  var u_xlat21 : vec2<f32>;
  var u_xlatb22 : vec3<bool>;
  var u_xlat22 : vec3<f32>;
  var u_xlatb21 : bool;
  var u_xlat42 : f32;
  var x_378 : vec3<f32>;
  var u_xlat65 : f32;
  var u_xlat6 : vec3<f32>;
  var u_xlat66 : f32;
  var u_xlat67 : f32;
  var u_xlat63 : f32;
  var u_xlatb67 : bool;
  var u_xlat7 : vec4<f32>;
  var txVec0 : vec3<f32>;
  var u_xlat8 : vec4<f32>;
  var txVec1 : vec3<f32>;
  var txVec2 : vec3<f32>;
  var txVec3 : vec3<f32>;
  var u_xlatb26 : bool;
  var u_xlat26 : vec3<f32>;
  var u_xlat9 : vec4<f32>;
  var u_xlat49 : vec2<f32>;
  var u_xlat51 : vec2<f32>;
  var u_xlat10 : vec4<f32>;
  var u_xlat11 : vec4<f32>;
  var u_xlat12 : vec4<f32>;
  var u_xlat13 : vec4<f32>;
  var u_xlat14 : vec4<f32>;
  var u_xlat15 : vec4<f32>;
  var txVec4 : vec3<f32>;
  var u_xlat47 : f32;
  var txVec5 : vec3<f32>;
  var u_xlat68 : f32;
  var txVec6 : vec3<f32>;
  var txVec7 : vec3<f32>;
  var txVec8 : vec3<f32>;
  var txVec9 : vec3<f32>;
  var txVec10 : vec3<f32>;
  var txVec11 : vec3<f32>;
  var txVec12 : vec3<f32>;
  var u_xlat55 : vec2<f32>;
  var u_xlat16 : vec4<f32>;
  var u_xlat29 : vec2<f32>;
  var u_xlat17 : vec2<f32>;
  var u_xlat52 : vec2<f32>;
  var u_xlat18 : vec4<f32>;
  var u_xlat19 : vec4<f32>;
  var u_xlat20 : vec4<f32>;
  var txVec13 : vec3<f32>;
  var txVec14 : vec3<f32>;
  var u_xlat69 : f32;
  var txVec15 : vec3<f32>;
  var txVec16 : vec3<f32>;
  var txVec17 : vec3<f32>;
  var txVec18 : vec3<f32>;
  var txVec19 : vec3<f32>;
  var txVec20 : vec3<f32>;
  var txVec21 : vec3<f32>;
  var txVec22 : vec3<f32>;
  var txVec23 : vec3<f32>;
  var txVec24 : vec3<f32>;
  var txVec25 : vec3<f32>;
  var txVec26 : vec3<f32>;
  var txVec27 : vec3<f32>;
  var txVec28 : vec3<f32>;
  var txVec29 : vec3<f32>;
  var u_xlatb47 : bool;
  var u_xlat70 : f32;
  var u_xlatu42 : u32;
  var u_xlatu_loop_1 : u32;
  var u_xlatu67 : u32;
  var u_xlati69 : i32;
  var indexable : array<vec4<u32>, 4u>;
  var u_xlati67 : i32;
  var u_xlat71 : f32;
  var u_xlat_precise_vec4 : vec4<f32>;
  var u_xlat_precise_ivec4 : vec4<i32>;
  var u_xlat_precise_bvec4 : vec4<bool>;
  var u_xlat_precise_uvec4 : vec4<u32>;
  let x_13 : vec4<f32> = gl_FragCoord;
  let x_14 : vec3<f32> = vec3<f32>(x_13.x, x_13.y, x_13.z);
  let x_20 : f32 = gl_FragCoord.w;
  hlslcc_FragCoord = vec4<f32>(x_14.x, x_14.y, x_14.z, (1.0f / x_20));
  let x_39 : vec4<f32> = vs_INTERP3;
  let x_50 : f32 = x_44.x_GlobalMipBias.x;
  let x_51 : vec4<f32> = textureSampleBias(x_MainTex, samplerSamplerState_Trilinear_Clamp, vec2<f32>(x_39.x, x_39.y), x_50);
  u_xlat0 = x_51;
  let x_57 : vec4<f32> = vs_INTERP3;
  let x_60 : f32 = x_44.x_GlobalMipBias.x;
  let x_61 : vec4<f32> = textureSampleBias(x_MRLL, samplerSamplerState_Trilinear_Clamp, vec2<f32>(x_57.x, x_57.y), x_60);
  u_xlat1 = x_61;
  let x_64 : vec4<f32> = u_xlat1;
  let x_72 : vec4<f32> = x_68.x_Color2;
  u_xlat2 = (vec3<f32>(x_64.w, x_64.w, x_64.w) * vec3<f32>(x_72.x, x_72.y, x_72.z));
  let x_77 : vec4<f32> = x_68.x_Color1;
  let x_79 : vec4<f32> = u_xlat1;
  let x_82 : vec3<f32> = u_xlat2;
  u_xlat2 = ((vec3<f32>(x_77.x, x_77.y, x_77.z) * vec3<f32>(x_79.z, x_79.z, x_79.z)) + x_82);
  let x_87 : f32 = u_xlat1.w;
  let x_90 : f32 = u_xlat1.z;
  u_xlat43 = (x_87 + x_90);
  let x_92 : f32 = u_xlat43;
  u_xlat43 = clamp(x_92, 0.0f, 1.0f);
  let x_96 : vec4<f32> = u_xlat0;
  u_xlat3 = (-(vec3<f32>(x_96.x, x_96.y, x_96.z)) + vec3<f32>(1.0f, 1.0f, 1.0f));
  let x_101 : vec3<f32> = u_xlat3;
  let x_102 : vec3<f32> = u_xlat3;
  u_xlat3 = (x_101 + x_102);
  let x_105 : vec3<f32> = u_xlat2;
  let x_107 : vec3<f32> = (-(x_105) + vec3<f32>(1.0f, 1.0f, 1.0f));
  let x_108 : vec4<f32> = u_xlat4;
  u_xlat4 = vec4<f32>(x_107.x, x_107.y, x_107.z, x_108.w);
  let x_110 : vec3<f32> = u_xlat3;
  let x_112 : vec4<f32> = u_xlat4;
  u_xlat3 = ((-(x_110) * vec3<f32>(x_112.x, x_112.y, x_112.z)) + vec3<f32>(1.0f, 1.0f, 1.0f));
  let x_116 : vec4<f32> = u_xlat0;
  let x_118 : vec4<f32> = u_xlat0;
  let x_120 : vec3<f32> = (vec3<f32>(x_116.x, x_116.y, x_116.z) + vec3<f32>(x_118.x, x_118.y, x_118.z));
  let x_121 : vec4<f32> = u_xlat4;
  u_xlat4 = vec4<f32>(x_120.x, x_120.y, x_120.z, x_121.w);
  let x_123 : vec3<f32> = u_xlat2;
  let x_124 : vec4<f32> = u_xlat4;
  u_xlat2 = (x_123 * vec3<f32>(x_124.x, x_124.y, x_124.z));
  let x_133 : vec4<f32> = u_xlat0;
  let x_136 : vec4<bool> = (vec4<f32>(0.5f, 0.5f, 0.5f, 0.0f) >= vec4<f32>(x_133.x, x_133.y, x_133.z, x_133.x));
  u_xlatb4 = vec3<bool>(x_136.x, x_136.y, x_136.z);
  let x_141 : bool = u_xlatb4.x;
  u_xlat5.x = select(0.0f, 1.0f, x_141);
  let x_146 : bool = u_xlatb4.y;
  u_xlat5.y = select(0.0f, 1.0f, x_146);
  let x_150 : bool = u_xlatb4.z;
  u_xlat5.z = select(0.0f, 1.0f, x_150);
  let x_154 : bool = u_xlatb4.x;
  u_xlat4.x = select(1.0f, 0.0f, x_154);
  let x_158 : bool = u_xlatb4.y;
  u_xlat4.y = select(1.0f, 0.0f, x_158);
  let x_162 : bool = u_xlatb4.z;
  u_xlat4.z = select(1.0f, 0.0f, x_162);
  let x_165 : vec3<f32> = u_xlat3;
  let x_166 : vec4<f32> = u_xlat4;
  u_xlat3 = (x_165 * vec3<f32>(x_166.x, x_166.y, x_166.z));
  let x_169 : vec3<f32> = u_xlat2;
  let x_170 : vec3<f32> = u_xlat5;
  let x_172 : vec3<f32> = u_xlat3;
  u_xlat2 = ((x_169 * x_170) + x_172);
  let x_174 : vec4<f32> = u_xlat0;
  let x_177 : vec3<f32> = u_xlat2;
  u_xlat2 = (-(vec3<f32>(x_174.x, x_174.y, x_174.z)) + x_177);
  let x_179 : f32 = u_xlat43;
  let x_181 : vec3<f32> = u_xlat2;
  let x_183 : vec4<f32> = u_xlat0;
  u_xlat2 = ((vec3<f32>(x_179, x_179, x_179) * x_181) + vec3<f32>(x_183.x, x_183.y, x_183.z));
  let x_187 : f32 = u_xlat0.x;
  u_xlat0.x = (x_187 + -0.150000006f);
  let x_192 : f32 = u_xlat0.x;
  u_xlat0.x = ceil(x_192);
  let x_196 : f32 = u_xlat0.x;
  u_xlat0.x = (-(x_196) + 1.0f);
  let x_200 : vec4<f32> = u_xlat0;
  let x_205 : vec3<f32> = u_xlat2;
  u_xlat2 = ((vec3<f32>(x_200.x, x_200.x, x_200.x) * vec3<f32>(0.400000006f, 0.400000006f, 0.400000006f)) + x_205);
  let x_211 : vec4<f32> = vs_INTERP3;
  let x_214 : f32 = x_44.x_GlobalMipBias.x;
  let x_215 : vec4<f32> = textureSampleBias(x_BumpMap, samplerSamplerState_Trilinear_Clamp, vec2<f32>(x_211.x, x_211.y), x_214);
  u_xlat3 = vec3<f32>(x_215.x, x_215.y, x_215.w);
  let x_218 : f32 = u_xlat3.x;
  let x_220 : f32 = u_xlat3.z;
  u_xlat3.x = (x_218 * x_220);
  let x_225 : vec3<f32> = u_xlat3;
  u_xlat21 = ((vec2<f32>(x_225.x, x_225.y) * vec2<f32>(2.0f, 2.0f)) + vec2<f32>(-1.0f, -1.0f));
  let x_233 : vec2<f32> = u_xlat21;
  let x_234 : vec2<f32> = u_xlat21;
  u_xlat43 = dot(x_233, x_234);
  let x_236 : f32 = u_xlat43;
  u_xlat43 = min(x_236, 1.0f);
  let x_238 : f32 = u_xlat43;
  u_xlat43 = (-(x_238) + 1.0f);
  let x_241 : f32 = u_xlat43;
  u_xlat43 = sqrt(x_241);
  let x_243 : f32 = u_xlat43;
  u_xlat43 = max(x_243, 1.00000002e-16f);
  let x_247 : f32 = u_xlat1.x;
  let x_249 : f32 = u_xlat0.x;
  u_xlat0.x = (x_247 + x_249);
  let x_253 : f32 = u_xlat0.x;
  u_xlat0.x = clamp(x_253, 0.0f, 1.0f);
  let x_257 : f32 = u_xlat1.y;
  u_xlat1.x = max(x_257, 0.0f);
  let x_261 : f32 = u_xlat1.x;
  u_xlat1.x = min(x_261, 0.850000024f);
  let x_268 : f32 = vs_INTERP2.w;
  u_xlatb22.x = (0.0f < x_268);
  let x_276 : f32 = x_274.unity_WorldTransformParams.w;
  u_xlatb22.z = (x_276 >= 0.0f);
  let x_281 : bool = u_xlatb22.x;
  u_xlat22.x = select(-1.0f, 1.0f, x_281);
  let x_285 : bool = u_xlatb22.z;
  u_xlat22.z = select(-1.0f, 1.0f, x_285);
  let x_289 : f32 = u_xlat22.z;
  let x_291 : f32 = u_xlat22.x;
  u_xlat22.x = (x_289 * x_291);
  let x_296 : vec3<f32> = vs_INTERP1;
  let x_298 : vec4<f32> = vs_INTERP2;
  u_xlat3 = (vec3<f32>(x_296.z, x_296.x, x_296.y) * vec3<f32>(x_298.y, x_298.z, x_298.x));
  let x_301 : vec3<f32> = vs_INTERP1;
  let x_303 : vec4<f32> = vs_INTERP2;
  let x_306 : vec3<f32> = u_xlat3;
  u_xlat3 = ((vec3<f32>(x_301.y, x_301.z, x_301.x) * vec3<f32>(x_303.z, x_303.x, x_303.y)) + -(x_306));
  let x_309 : vec3<f32> = u_xlat22;
  let x_311 : vec3<f32> = u_xlat3;
  u_xlat3 = (vec3<f32>(x_309.x, x_309.x, x_309.x) * x_311);
  let x_313 : vec2<f32> = u_xlat21;
  let x_315 : vec3<f32> = u_xlat3;
  u_xlat3 = (vec3<f32>(x_313.y, x_313.y, x_313.y) * x_315);
  let x_317 : vec2<f32> = u_xlat21;
  let x_319 : vec4<f32> = vs_INTERP2;
  let x_322 : vec3<f32> = u_xlat3;
  u_xlat3 = ((vec3<f32>(x_317.x, x_317.x, x_317.x) * vec3<f32>(x_319.x, x_319.y, x_319.z)) + x_322);
  let x_324 : f32 = u_xlat43;
  let x_326 : vec3<f32> = vs_INTERP1;
  let x_328 : vec3<f32> = u_xlat3;
  u_xlat22 = ((vec3<f32>(x_324, x_324, x_324) * x_326) + x_328);
  let x_330 : vec3<f32> = u_xlat22;
  let x_331 : vec3<f32> = u_xlat22;
  u_xlat21.x = dot(x_330, x_331);
  let x_335 : f32 = u_xlat21.x;
  u_xlat21.x = inverseSqrt(x_335);
  let x_338 : vec2<f32> = u_xlat21;
  let x_340 : vec3<f32> = u_xlat22;
  u_xlat22 = (vec3<f32>(x_338.x, x_338.x, x_338.x) * x_340);
  let x_345 : f32 = x_44.unity_OrthoParams.w;
  u_xlatb21 = (x_345 == 0.0f);
  let x_348 : vec3<f32> = vs_INTERP0;
  let x_353 : vec3<f32> = x_44.x_WorldSpaceCameraPos;
  u_xlat3 = (-(x_348) + x_353);
  let x_356 : vec3<f32> = u_xlat3;
  let x_357 : vec3<f32> = u_xlat3;
  u_xlat42 = dot(x_356, x_357);
  let x_359 : f32 = u_xlat42;
  u_xlat42 = inverseSqrt(x_359);
  let x_361 : f32 = u_xlat42;
  let x_363 : vec3<f32> = u_xlat3;
  u_xlat3 = (vec3<f32>(x_361, x_361, x_361) * x_363);
  let x_368 : f32 = x_44.unity_MatrixV[0i].z;
  u_xlat4.x = x_368;
  let x_371 : f32 = x_44.unity_MatrixV[1i].z;
  u_xlat4.y = x_371;
  let x_375 : f32 = x_44.unity_MatrixV[2i].z;
  u_xlat4.z = x_375;
  let x_377 : bool = u_xlatb21;
  if (x_377) {
    let x_381 : vec3<f32> = u_xlat3;
    x_378 = x_381;
  } else {
    let x_383 : vec4<f32> = u_xlat4;
    x_378 = vec3<f32>(x_383.x, x_383.y, x_383.z);
  }
  let x_385 : vec3<f32> = x_378;
  u_xlat3 = x_385;
  let x_387 : f32 = vs_INTERP0.y;
  let x_389 : f32 = x_44.unity_MatrixV[1i].z;
  u_xlat21.x = (x_387 * x_389);
  let x_393 : f32 = x_44.unity_MatrixV[0i].z;
  let x_395 : f32 = vs_INTERP0.x;
  let x_398 : f32 = u_xlat21.x;
  u_xlat21.x = ((x_393 * x_395) + x_398);
  let x_402 : f32 = x_44.unity_MatrixV[2i].z;
  let x_404 : f32 = vs_INTERP0.z;
  let x_407 : f32 = u_xlat21.x;
  u_xlat21.x = ((x_402 * x_404) + x_407);
  let x_411 : f32 = u_xlat21.x;
  let x_413 : f32 = x_44.unity_MatrixV[3i].z;
  u_xlat21.x = (x_411 + x_413);
  let x_417 : f32 = u_xlat21.x;
  let x_421 : f32 = x_44.x_ProjectionParams.y;
  u_xlat21.x = (-(x_417) + -(x_421));
  let x_426 : f32 = u_xlat21.x;
  u_xlat21.x = max(x_426, 0.0f);
  let x_430 : f32 = u_xlat21.x;
  let x_433 : f32 = x_44.unity_FogParams.x;
  u_xlat21.x = (x_430 * x_433);
  let x_443 : vec2<f32> = vs_INTERP4;
  let x_445 : f32 = x_44.x_GlobalMipBias.x;
  let x_446 : vec4<f32> = textureSampleBias(unity_LightmapInd, samplerunity_Lightmap, x_443, x_445);
  u_xlat4 = x_446;
  let x_451 : vec2<f32> = vs_INTERP4;
  let x_453 : f32 = x_44.x_GlobalMipBias.x;
  let x_454 : vec4<f32> = textureSampleBias(unity_Lightmap, samplerunity_Lightmap, x_451, x_453);
  u_xlat5 = vec3<f32>(x_454.x, x_454.y, x_454.z);
  let x_456 : vec4<f32> = u_xlat4;
  let x_460 : vec3<f32> = (vec3<f32>(x_456.x, x_456.y, x_456.z) + vec3<f32>(-0.5f, -0.5f, -0.5f));
  let x_461 : vec4<f32> = u_xlat4;
  u_xlat4 = vec4<f32>(x_460.x, x_460.y, x_460.z, x_461.w);
  let x_463 : vec3<f32> = u_xlat22;
  let x_464 : vec4<f32> = u_xlat4;
  u_xlat42 = dot(x_463, vec3<f32>(x_464.x, x_464.y, x_464.z));
  let x_467 : f32 = u_xlat42;
  u_xlat42 = (x_467 + 0.5f);
  let x_469 : f32 = u_xlat42;
  let x_471 : vec3<f32> = u_xlat5;
  let x_472 : vec3<f32> = (vec3<f32>(x_469, x_469, x_469) * x_471);
  let x_473 : vec4<f32> = u_xlat4;
  u_xlat4 = vec4<f32>(x_472.x, x_472.y, x_472.z, x_473.w);
  let x_476 : f32 = u_xlat4.w;
  u_xlat42 = max(x_476, 0.0001f);
  let x_479 : vec4<f32> = u_xlat4;
  let x_481 : f32 = u_xlat42;
  let x_483 : vec3<f32> = (vec3<f32>(x_479.x, x_479.y, x_479.z) / vec3<f32>(x_481, x_481, x_481));
  let x_484 : vec4<f32> = u_xlat4;
  u_xlat4 = vec4<f32>(x_483.x, x_483.y, x_483.z, x_484.w);
  let x_488 : vec4<f32> = x_44.x_ScaledScreenParams;
  let x_489 : vec2<f32> = vec2<f32>(x_488.x, x_488.y);
  let x_493 : vec2<f32> = (vec2<f32>(1.0f, 1.0f) / vec2<f32>(x_489.x, x_489.y));
  let x_494 : vec3<f32> = u_xlat5;
  u_xlat5 = vec3<f32>(x_493.x, x_493.y, x_494.z);
  let x_496 : vec3<f32> = u_xlat5;
  let x_498 : vec4<f32> = hlslcc_FragCoord;
  let x_500 : vec2<f32> = (vec2<f32>(x_496.x, x_496.y) * vec2<f32>(x_498.x, x_498.y));
  let x_501 : vec3<f32> = u_xlat5;
  u_xlat5 = vec3<f32>(x_500.x, x_500.y, x_501.z);
  let x_504 : f32 = u_xlat5.y;
  let x_507 : f32 = x_44.x_ScaleBiasRt.x;
  let x_510 : f32 = x_44.x_ScaleBiasRt.y;
  u_xlat42 = ((x_504 * x_507) + x_510);
  let x_512 : f32 = u_xlat42;
  u_xlat5.z = (-(x_512) + 1.0f);
  let x_517 : f32 = u_xlat0.x;
  u_xlat42 = ((-(x_517) * 0.959999979f) + 0.959999979f);
  let x_523 : f32 = u_xlat42;
  let x_526 : f32 = u_xlat1.x;
  u_xlat65 = (-(x_523) + x_526);
  let x_529 : f32 = u_xlat42;
  let x_531 : vec3<f32> = u_xlat2;
  u_xlat6 = (vec3<f32>(x_529, x_529, x_529) * x_531);
  let x_533 : vec3<f32> = u_xlat2;
  u_xlat2 = (x_533 + vec3<f32>(-0.039999999f, -0.039999999f, -0.039999999f));
  let x_537 : vec4<f32> = u_xlat0;
  let x_539 : vec3<f32> = u_xlat2;
  u_xlat2 = ((vec3<f32>(x_537.x, x_537.x, x_537.x) * x_539) + vec3<f32>(0.039999999f, 0.039999999f, 0.039999999f));
  let x_545 : f32 = u_xlat1.x;
  u_xlat0.x = (-(x_545) + 1.0f);
  let x_550 : f32 = u_xlat0.x;
  let x_552 : f32 = u_xlat0.x;
  u_xlat42 = (x_550 * x_552);
  let x_554 : f32 = u_xlat42;
  let x_555 : f32 = u_xlat42;
  u_xlat1.x = (x_554 * x_555);
  let x_558 : f32 = u_xlat65;
  u_xlat65 = (x_558 + 1.0f);
  let x_560 : f32 = u_xlat65;
  u_xlat65 = min(x_560, 1.0f);
  let x_563 : f32 = u_xlat42;
  u_xlat66 = ((x_563 * 4.0f) + 2.0f);
  let x_573 : vec3<f32> = u_xlat5;
  let x_576 : f32 = x_44.x_GlobalMipBias.x;
  let x_577 : vec4<f32> = textureSampleBias(x_ScreenSpaceOcclusionTexture, sampler_ScreenSpaceOcclusionTexture, vec2<f32>(x_573.x, x_573.z), x_576);
  u_xlat67 = x_577.x;
  let x_579 : f32 = u_xlat67;
  u_xlat5.x = (x_579 + -1.0f);
  let x_583 : f32 = x_44.x_AmbientOcclusionParam.w;
  let x_585 : f32 = u_xlat5.x;
  u_xlat5.x = ((x_583 * x_585) + 1.0f);
  let x_591 : f32 = u_xlat0.w;
  let x_592 : f32 = u_xlat67;
  u_xlat63 = min(x_591, x_592);
  let x_601 : f32 = x_599.x_MainLightShadowParams.y;
  u_xlatb67 = (0.0f < x_601);
  let x_603 : bool = u_xlatb67;
  if (x_603) {
    let x_607 : f32 = x_599.x_MainLightShadowParams.y;
    u_xlatb67 = (x_607 == 1.0f);
    let x_609 : bool = u_xlatb67;
    if (x_609) {
      let x_614 : vec4<f32> = vs_INTERP8;
      let x_617 : vec4<f32> = x_599.x_MainLightShadowOffset0;
      u_xlat7 = (vec4<f32>(x_614.x, x_614.y, x_614.x, x_614.y) + x_617);
      let x_620 : vec4<f32> = u_xlat7;
      let x_621 : vec2<f32> = vec2<f32>(x_620.x, x_620.y);
      let x_623 : f32 = vs_INTERP8.z;
      txVec0 = vec3<f32>(x_621.x, x_621.y, x_623);
      let x_636 : vec3<f32> = txVec0;
      let x_638 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_636.xy, x_636.z);
      u_xlat8.x = x_638;
      let x_641 : vec4<f32> = u_xlat7;
      let x_642 : vec2<f32> = vec2<f32>(x_641.z, x_641.w);
      let x_644 : f32 = vs_INTERP8.z;
      txVec1 = vec3<f32>(x_642.x, x_642.y, x_644);
      let x_651 : vec3<f32> = txVec1;
      let x_653 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_651.xy, x_651.z);
      u_xlat8.y = x_653;
      let x_655 : vec4<f32> = vs_INTERP8;
      let x_658 : vec4<f32> = x_599.x_MainLightShadowOffset1;
      u_xlat7 = (vec4<f32>(x_655.x, x_655.y, x_655.x, x_655.y) + x_658);
      let x_661 : vec4<f32> = u_xlat7;
      let x_662 : vec2<f32> = vec2<f32>(x_661.x, x_661.y);
      let x_664 : f32 = vs_INTERP8.z;
      txVec2 = vec3<f32>(x_662.x, x_662.y, x_664);
      let x_671 : vec3<f32> = txVec2;
      let x_673 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_671.xy, x_671.z);
      u_xlat8.z = x_673;
      let x_676 : vec4<f32> = u_xlat7;
      let x_677 : vec2<f32> = vec2<f32>(x_676.z, x_676.w);
      let x_679 : f32 = vs_INTERP8.z;
      txVec3 = vec3<f32>(x_677.x, x_677.y, x_679);
      let x_686 : vec3<f32> = txVec3;
      let x_688 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_686.xy, x_686.z);
      u_xlat8.w = x_688;
      let x_690 : vec4<f32> = u_xlat8;
      u_xlat67 = dot(x_690, vec4<f32>(0.25f, 0.25f, 0.25f, 0.25f));
    } else {
      let x_697 : f32 = x_599.x_MainLightShadowParams.y;
      u_xlatb26 = (x_697 == 2.0f);
      let x_699 : bool = u_xlatb26;
      if (x_699) {
        let x_703 : vec4<f32> = vs_INTERP8;
        let x_706 : vec4<f32> = x_599.x_MainLightShadowmapSize;
        let x_710 : vec2<f32> = ((vec2<f32>(x_703.x, x_703.y) * vec2<f32>(x_706.z, x_706.w)) + vec2<f32>(0.5f, 0.5f));
        let x_711 : vec3<f32> = u_xlat26;
        u_xlat26 = vec3<f32>(x_710.x, x_710.y, x_711.z);
        let x_713 : vec3<f32> = u_xlat26;
        let x_715 : vec2<f32> = floor(vec2<f32>(x_713.x, x_713.y));
        let x_716 : vec3<f32> = u_xlat26;
        u_xlat26 = vec3<f32>(x_715.x, x_715.y, x_716.z);
        let x_718 : vec4<f32> = vs_INTERP8;
        let x_721 : vec4<f32> = x_599.x_MainLightShadowmapSize;
        let x_724 : vec3<f32> = u_xlat26;
        let x_727 : vec2<f32> = ((vec2<f32>(x_718.x, x_718.y) * vec2<f32>(x_721.z, x_721.w)) + -(vec2<f32>(x_724.x, x_724.y)));
        let x_728 : vec4<f32> = u_xlat7;
        u_xlat7 = vec4<f32>(x_727.x, x_727.y, x_728.z, x_728.w);
        let x_730 : vec4<f32> = u_xlat7;
        u_xlat8 = (vec4<f32>(x_730.x, x_730.x, x_730.y, x_730.y) + vec4<f32>(0.5f, 1.0f, 0.5f, 1.0f));
        let x_735 : vec4<f32> = u_xlat8;
        let x_737 : vec4<f32> = u_xlat8;
        u_xlat9 = (vec4<f32>(x_735.x, x_735.x, x_735.z, x_735.z) * vec4<f32>(x_737.x, x_737.x, x_737.z, x_737.z));
        let x_741 : vec4<f32> = u_xlat9;
        u_xlat49 = (vec2<f32>(x_741.y, x_741.w) * vec2<f32>(0.079999998f, 0.079999998f));
        let x_746 : vec4<f32> = u_xlat9;
        let x_749 : vec4<f32> = u_xlat7;
        let x_752 : vec2<f32> = ((vec2<f32>(x_746.x, x_746.z) * vec2<f32>(0.5f, 0.5f)) + -(vec2<f32>(x_749.x, x_749.y)));
        let x_753 : vec4<f32> = u_xlat8;
        u_xlat8 = vec4<f32>(x_752.x, x_753.y, x_752.y, x_753.w);
        let x_755 : vec4<f32> = u_xlat7;
        let x_758 : vec2<f32> = (-(vec2<f32>(x_755.x, x_755.y)) + vec2<f32>(1.0f, 1.0f));
        let x_759 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_758.x, x_758.y, x_759.z, x_759.w);
        let x_762 : vec4<f32> = u_xlat7;
        u_xlat51 = min(vec2<f32>(x_762.x, x_762.y), vec2<f32>(0.0f, 0.0f));
        let x_766 : vec2<f32> = u_xlat51;
        let x_768 : vec2<f32> = u_xlat51;
        let x_770 : vec4<f32> = u_xlat9;
        u_xlat51 = ((-(x_766) * x_768) + vec2<f32>(x_770.x, x_770.y));
        let x_773 : vec4<f32> = u_xlat7;
        let x_775 : vec2<f32> = max(vec2<f32>(x_773.x, x_773.y), vec2<f32>(0.0f, 0.0f));
        let x_776 : vec4<f32> = u_xlat7;
        u_xlat7 = vec4<f32>(x_775.x, x_775.y, x_776.z, x_776.w);
        let x_778 : vec4<f32> = u_xlat7;
        let x_781 : vec4<f32> = u_xlat7;
        let x_784 : vec4<f32> = u_xlat8;
        let x_786 : vec2<f32> = ((-(vec2<f32>(x_778.x, x_778.y)) * vec2<f32>(x_781.x, x_781.y)) + vec2<f32>(x_784.y, x_784.w));
        let x_787 : vec4<f32> = u_xlat7;
        u_xlat7 = vec4<f32>(x_786.x, x_786.y, x_787.z, x_787.w);
        let x_789 : vec2<f32> = u_xlat51;
        u_xlat51 = (x_789 + vec2<f32>(1.0f, 1.0f));
        let x_791 : vec4<f32> = u_xlat7;
        let x_793 : vec2<f32> = (vec2<f32>(x_791.x, x_791.y) + vec2<f32>(1.0f, 1.0f));
        let x_794 : vec4<f32> = u_xlat7;
        u_xlat7 = vec4<f32>(x_793.x, x_793.y, x_794.z, x_794.w);
        let x_797 : vec4<f32> = u_xlat8;
        let x_801 : vec2<f32> = (vec2<f32>(x_797.x, x_797.z) * vec2<f32>(0.159999996f, 0.159999996f));
        let x_802 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_801.x, x_801.y, x_802.z, x_802.w);
        let x_805 : vec4<f32> = u_xlat9;
        let x_807 : vec2<f32> = (vec2<f32>(x_805.x, x_805.y) * vec2<f32>(0.159999996f, 0.159999996f));
        let x_808 : vec4<f32> = u_xlat11;
        u_xlat11 = vec4<f32>(x_807.x, x_807.y, x_808.z, x_808.w);
        let x_810 : vec2<f32> = u_xlat51;
        let x_811 : vec2<f32> = (x_810 * vec2<f32>(0.159999996f, 0.159999996f));
        let x_812 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_811.x, x_811.y, x_812.z, x_812.w);
        let x_815 : vec4<f32> = u_xlat7;
        let x_817 : vec2<f32> = (vec2<f32>(x_815.x, x_815.y) * vec2<f32>(0.159999996f, 0.159999996f));
        let x_818 : vec4<f32> = u_xlat12;
        u_xlat12 = vec4<f32>(x_817.x, x_817.y, x_818.z, x_818.w);
        let x_820 : vec4<f32> = u_xlat8;
        let x_822 : vec2<f32> = (vec2<f32>(x_820.y, x_820.w) * vec2<f32>(0.159999996f, 0.159999996f));
        let x_823 : vec4<f32> = u_xlat7;
        u_xlat7 = vec4<f32>(x_822.x, x_822.y, x_823.z, x_823.w);
        let x_826 : f32 = u_xlat9.x;
        u_xlat10.z = x_826;
        let x_829 : f32 = u_xlat7.x;
        u_xlat10.w = x_829;
        let x_832 : f32 = u_xlat12.x;
        u_xlat11.z = x_832;
        let x_835 : f32 = u_xlat49.x;
        u_xlat11.w = x_835;
        let x_837 : vec4<f32> = u_xlat10;
        let x_839 : vec4<f32> = u_xlat11;
        u_xlat8 = (vec4<f32>(x_837.z, x_837.w, x_837.x, x_837.z) + vec4<f32>(x_839.z, x_839.w, x_839.x, x_839.z));
        let x_843 : f32 = u_xlat10.y;
        u_xlat9.z = x_843;
        let x_846 : f32 = u_xlat7.y;
        u_xlat9.w = x_846;
        let x_849 : f32 = u_xlat11.y;
        u_xlat12.z = x_849;
        let x_852 : f32 = u_xlat49.y;
        u_xlat12.w = x_852;
        let x_854 : vec4<f32> = u_xlat9;
        let x_856 : vec4<f32> = u_xlat12;
        let x_858 : vec3<f32> = (vec3<f32>(x_854.z, x_854.y, x_854.w) + vec3<f32>(x_856.z, x_856.y, x_856.w));
        let x_859 : vec4<f32> = u_xlat7;
        u_xlat7 = vec4<f32>(x_858.x, x_858.y, x_858.z, x_859.w);
        let x_861 : vec4<f32> = u_xlat11;
        let x_863 : vec4<f32> = u_xlat8;
        let x_865 : vec3<f32> = (vec3<f32>(x_861.x, x_861.z, x_861.w) / vec3<f32>(x_863.z, x_863.w, x_863.y));
        let x_866 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_865.x, x_865.y, x_865.z, x_866.w);
        let x_868 : vec4<f32> = u_xlat9;
        let x_873 : vec3<f32> = (vec3<f32>(x_868.x, x_868.y, x_868.z) + vec3<f32>(-2.5f, -0.5f, 1.5f));
        let x_874 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_873.x, x_873.y, x_873.z, x_874.w);
        let x_876 : vec4<f32> = u_xlat12;
        let x_878 : vec4<f32> = u_xlat7;
        let x_880 : vec3<f32> = (vec3<f32>(x_876.z, x_876.y, x_876.w) / vec3<f32>(x_878.x, x_878.y, x_878.z));
        let x_881 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_880.x, x_880.y, x_880.z, x_881.w);
        let x_883 : vec4<f32> = u_xlat10;
        let x_885 : vec3<f32> = (vec3<f32>(x_883.x, x_883.y, x_883.z) + vec3<f32>(-2.5f, -0.5f, 1.5f));
        let x_886 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_885.x, x_885.y, x_885.z, x_886.w);
        let x_888 : vec4<f32> = u_xlat9;
        let x_891 : vec4<f32> = x_599.x_MainLightShadowmapSize;
        let x_893 : vec3<f32> = (vec3<f32>(x_888.y, x_888.x, x_888.z) * vec3<f32>(x_891.x, x_891.x, x_891.x));
        let x_894 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_893.x, x_893.y, x_893.z, x_894.w);
        let x_896 : vec4<f32> = u_xlat10;
        let x_899 : vec4<f32> = x_599.x_MainLightShadowmapSize;
        let x_901 : vec3<f32> = (vec3<f32>(x_896.x, x_896.y, x_896.z) * vec3<f32>(x_899.y, x_899.y, x_899.y));
        let x_902 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_901.x, x_901.y, x_901.z, x_902.w);
        let x_905 : f32 = u_xlat10.x;
        u_xlat9.w = x_905;
        let x_907 : vec3<f32> = u_xlat26;
        let x_910 : vec4<f32> = x_599.x_MainLightShadowmapSize;
        let x_913 : vec4<f32> = u_xlat9;
        u_xlat11 = ((vec4<f32>(x_907.x, x_907.y, x_907.x, x_907.y) * vec4<f32>(x_910.x, x_910.y, x_910.x, x_910.y)) + vec4<f32>(x_913.y, x_913.w, x_913.x, x_913.w));
        let x_916 : vec3<f32> = u_xlat26;
        let x_919 : vec4<f32> = x_599.x_MainLightShadowmapSize;
        let x_922 : vec4<f32> = u_xlat9;
        let x_924 : vec2<f32> = ((vec2<f32>(x_916.x, x_916.y) * vec2<f32>(x_919.x, x_919.y)) + vec2<f32>(x_922.z, x_922.w));
        let x_925 : vec4<f32> = u_xlat12;
        u_xlat12 = vec4<f32>(x_924.x, x_924.y, x_925.z, x_925.w);
        let x_928 : f32 = u_xlat9.y;
        u_xlat10.w = x_928;
        let x_930 : vec4<f32> = u_xlat10;
        let x_931 : vec2<f32> = vec2<f32>(x_930.y, x_930.z);
        let x_932 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_932.x, x_931.x, x_932.z, x_931.y);
        let x_935 : vec3<f32> = u_xlat26;
        let x_938 : vec4<f32> = x_599.x_MainLightShadowmapSize;
        let x_941 : vec4<f32> = u_xlat9;
        u_xlat13 = ((vec4<f32>(x_935.x, x_935.y, x_935.x, x_935.y) * vec4<f32>(x_938.x, x_938.y, x_938.x, x_938.y)) + vec4<f32>(x_941.x, x_941.y, x_941.z, x_941.y));
        let x_944 : vec3<f32> = u_xlat26;
        let x_947 : vec4<f32> = x_599.x_MainLightShadowmapSize;
        let x_950 : vec4<f32> = u_xlat10;
        u_xlat10 = ((vec4<f32>(x_944.x, x_944.y, x_944.x, x_944.y) * vec4<f32>(x_947.x, x_947.y, x_947.x, x_947.y)) + vec4<f32>(x_950.w, x_950.y, x_950.w, x_950.z));
        let x_953 : vec3<f32> = u_xlat26;
        let x_956 : vec4<f32> = x_599.x_MainLightShadowmapSize;
        let x_959 : vec4<f32> = u_xlat9;
        u_xlat9 = ((vec4<f32>(x_953.x, x_953.y, x_953.x, x_953.y) * vec4<f32>(x_956.x, x_956.y, x_956.x, x_956.y)) + vec4<f32>(x_959.x, x_959.w, x_959.z, x_959.w));
        let x_963 : vec4<f32> = u_xlat7;
        let x_965 : vec4<f32> = u_xlat8;
        u_xlat14 = (vec4<f32>(x_963.x, x_963.x, x_963.x, x_963.y) * vec4<f32>(x_965.z, x_965.w, x_965.y, x_965.z));
        let x_969 : vec4<f32> = u_xlat7;
        let x_971 : vec4<f32> = u_xlat8;
        u_xlat15 = (vec4<f32>(x_969.y, x_969.y, x_969.z, x_969.z) * x_971);
        let x_974 : f32 = u_xlat7.z;
        let x_976 : f32 = u_xlat8.y;
        u_xlat26.x = (x_974 * x_976);
        let x_980 : vec4<f32> = u_xlat11;
        let x_981 : vec2<f32> = vec2<f32>(x_980.x, x_980.y);
        let x_983 : f32 = vs_INTERP8.z;
        txVec4 = vec3<f32>(x_981.x, x_981.y, x_983);
        let x_991 : vec3<f32> = txVec4;
        let x_993 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_991.xy, x_991.z);
        u_xlat47 = x_993;
        let x_995 : vec4<f32> = u_xlat11;
        let x_996 : vec2<f32> = vec2<f32>(x_995.z, x_995.w);
        let x_998 : f32 = vs_INTERP8.z;
        txVec5 = vec3<f32>(x_996.x, x_996.y, x_998);
        let x_1006 : vec3<f32> = txVec5;
        let x_1008 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1006.xy, x_1006.z);
        u_xlat68 = x_1008;
        let x_1009 : f32 = u_xlat68;
        let x_1011 : f32 = u_xlat14.y;
        u_xlat68 = (x_1009 * x_1011);
        let x_1014 : f32 = u_xlat14.x;
        let x_1015 : f32 = u_xlat47;
        let x_1017 : f32 = u_xlat68;
        u_xlat47 = ((x_1014 * x_1015) + x_1017);
        let x_1020 : vec4<f32> = u_xlat12;
        let x_1021 : vec2<f32> = vec2<f32>(x_1020.x, x_1020.y);
        let x_1023 : f32 = vs_INTERP8.z;
        txVec6 = vec3<f32>(x_1021.x, x_1021.y, x_1023);
        let x_1030 : vec3<f32> = txVec6;
        let x_1032 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1030.xy, x_1030.z);
        u_xlat68 = x_1032;
        let x_1034 : f32 = u_xlat14.z;
        let x_1035 : f32 = u_xlat68;
        let x_1037 : f32 = u_xlat47;
        u_xlat47 = ((x_1034 * x_1035) + x_1037);
        let x_1040 : vec4<f32> = u_xlat10;
        let x_1041 : vec2<f32> = vec2<f32>(x_1040.x, x_1040.y);
        let x_1043 : f32 = vs_INTERP8.z;
        txVec7 = vec3<f32>(x_1041.x, x_1041.y, x_1043);
        let x_1050 : vec3<f32> = txVec7;
        let x_1052 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1050.xy, x_1050.z);
        u_xlat68 = x_1052;
        let x_1054 : f32 = u_xlat14.w;
        let x_1055 : f32 = u_xlat68;
        let x_1057 : f32 = u_xlat47;
        u_xlat47 = ((x_1054 * x_1055) + x_1057);
        let x_1060 : vec4<f32> = u_xlat13;
        let x_1061 : vec2<f32> = vec2<f32>(x_1060.x, x_1060.y);
        let x_1063 : f32 = vs_INTERP8.z;
        txVec8 = vec3<f32>(x_1061.x, x_1061.y, x_1063);
        let x_1070 : vec3<f32> = txVec8;
        let x_1072 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1070.xy, x_1070.z);
        u_xlat68 = x_1072;
        let x_1074 : f32 = u_xlat15.x;
        let x_1075 : f32 = u_xlat68;
        let x_1077 : f32 = u_xlat47;
        u_xlat47 = ((x_1074 * x_1075) + x_1077);
        let x_1080 : vec4<f32> = u_xlat13;
        let x_1081 : vec2<f32> = vec2<f32>(x_1080.z, x_1080.w);
        let x_1083 : f32 = vs_INTERP8.z;
        txVec9 = vec3<f32>(x_1081.x, x_1081.y, x_1083);
        let x_1090 : vec3<f32> = txVec9;
        let x_1092 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1090.xy, x_1090.z);
        u_xlat68 = x_1092;
        let x_1094 : f32 = u_xlat15.y;
        let x_1095 : f32 = u_xlat68;
        let x_1097 : f32 = u_xlat47;
        u_xlat47 = ((x_1094 * x_1095) + x_1097);
        let x_1100 : vec4<f32> = u_xlat10;
        let x_1101 : vec2<f32> = vec2<f32>(x_1100.z, x_1100.w);
        let x_1103 : f32 = vs_INTERP8.z;
        txVec10 = vec3<f32>(x_1101.x, x_1101.y, x_1103);
        let x_1110 : vec3<f32> = txVec10;
        let x_1112 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1110.xy, x_1110.z);
        u_xlat68 = x_1112;
        let x_1114 : f32 = u_xlat15.z;
        let x_1115 : f32 = u_xlat68;
        let x_1117 : f32 = u_xlat47;
        u_xlat47 = ((x_1114 * x_1115) + x_1117);
        let x_1120 : vec4<f32> = u_xlat9;
        let x_1121 : vec2<f32> = vec2<f32>(x_1120.x, x_1120.y);
        let x_1123 : f32 = vs_INTERP8.z;
        txVec11 = vec3<f32>(x_1121.x, x_1121.y, x_1123);
        let x_1130 : vec3<f32> = txVec11;
        let x_1132 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1130.xy, x_1130.z);
        u_xlat68 = x_1132;
        let x_1134 : f32 = u_xlat15.w;
        let x_1135 : f32 = u_xlat68;
        let x_1137 : f32 = u_xlat47;
        u_xlat47 = ((x_1134 * x_1135) + x_1137);
        let x_1140 : vec4<f32> = u_xlat9;
        let x_1141 : vec2<f32> = vec2<f32>(x_1140.z, x_1140.w);
        let x_1143 : f32 = vs_INTERP8.z;
        txVec12 = vec3<f32>(x_1141.x, x_1141.y, x_1143);
        let x_1150 : vec3<f32> = txVec12;
        let x_1152 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1150.xy, x_1150.z);
        u_xlat68 = x_1152;
        let x_1154 : f32 = u_xlat26.x;
        let x_1155 : f32 = u_xlat68;
        let x_1157 : f32 = u_xlat47;
        u_xlat67 = ((x_1154 * x_1155) + x_1157);
      } else {
        let x_1160 : vec4<f32> = vs_INTERP8;
        let x_1163 : vec4<f32> = x_599.x_MainLightShadowmapSize;
        let x_1166 : vec2<f32> = ((vec2<f32>(x_1160.x, x_1160.y) * vec2<f32>(x_1163.z, x_1163.w)) + vec2<f32>(0.5f, 0.5f));
        let x_1167 : vec3<f32> = u_xlat26;
        u_xlat26 = vec3<f32>(x_1166.x, x_1166.y, x_1167.z);
        let x_1169 : vec3<f32> = u_xlat26;
        let x_1171 : vec2<f32> = floor(vec2<f32>(x_1169.x, x_1169.y));
        let x_1172 : vec3<f32> = u_xlat26;
        u_xlat26 = vec3<f32>(x_1171.x, x_1171.y, x_1172.z);
        let x_1174 : vec4<f32> = vs_INTERP8;
        let x_1177 : vec4<f32> = x_599.x_MainLightShadowmapSize;
        let x_1180 : vec3<f32> = u_xlat26;
        let x_1183 : vec2<f32> = ((vec2<f32>(x_1174.x, x_1174.y) * vec2<f32>(x_1177.z, x_1177.w)) + -(vec2<f32>(x_1180.x, x_1180.y)));
        let x_1184 : vec4<f32> = u_xlat7;
        u_xlat7 = vec4<f32>(x_1183.x, x_1183.y, x_1184.z, x_1184.w);
        let x_1186 : vec4<f32> = u_xlat7;
        u_xlat8 = (vec4<f32>(x_1186.x, x_1186.x, x_1186.y, x_1186.y) + vec4<f32>(0.5f, 1.0f, 0.5f, 1.0f));
        let x_1189 : vec4<f32> = u_xlat8;
        let x_1191 : vec4<f32> = u_xlat8;
        u_xlat9 = (vec4<f32>(x_1189.x, x_1189.x, x_1189.z, x_1189.z) * vec4<f32>(x_1191.x, x_1191.x, x_1191.z, x_1191.z));
        let x_1194 : vec4<f32> = u_xlat9;
        let x_1198 : vec2<f32> = (vec2<f32>(x_1194.y, x_1194.w) * vec2<f32>(0.040816002f, 0.040816002f));
        let x_1199 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_1199.x, x_1198.x, x_1199.z, x_1198.y);
        let x_1201 : vec4<f32> = u_xlat9;
        let x_1204 : vec4<f32> = u_xlat7;
        u_xlat49 = ((vec2<f32>(x_1201.x, x_1201.z) * vec2<f32>(0.5f, 0.5f)) + -(vec2<f32>(x_1204.x, x_1204.y)));
        let x_1208 : vec4<f32> = u_xlat7;
        let x_1211 : vec2<f32> = (-(vec2<f32>(x_1208.x, x_1208.y)) + vec2<f32>(1.0f, 1.0f));
        let x_1212 : vec4<f32> = u_xlat8;
        u_xlat8 = vec4<f32>(x_1211.x, x_1212.y, x_1211.y, x_1212.w);
        let x_1214 : vec4<f32> = u_xlat7;
        let x_1216 : vec2<f32> = min(vec2<f32>(x_1214.x, x_1214.y), vec2<f32>(0.0f, 0.0f));
        let x_1217 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_1216.x, x_1216.y, x_1217.z, x_1217.w);
        let x_1219 : vec4<f32> = u_xlat9;
        let x_1222 : vec4<f32> = u_xlat9;
        let x_1225 : vec4<f32> = u_xlat8;
        let x_1227 : vec2<f32> = ((-(vec2<f32>(x_1219.x, x_1219.y)) * vec2<f32>(x_1222.x, x_1222.y)) + vec2<f32>(x_1225.x, x_1225.z));
        let x_1228 : vec4<f32> = u_xlat8;
        u_xlat8 = vec4<f32>(x_1227.x, x_1228.y, x_1227.y, x_1228.w);
        let x_1230 : vec4<f32> = u_xlat7;
        let x_1232 : vec2<f32> = max(vec2<f32>(x_1230.x, x_1230.y), vec2<f32>(0.0f, 0.0f));
        let x_1233 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_1232.x, x_1232.y, x_1233.z, x_1233.w);
        let x_1235 : vec4<f32> = u_xlat9;
        let x_1238 : vec4<f32> = u_xlat9;
        let x_1241 : vec4<f32> = u_xlat8;
        let x_1243 : vec2<f32> = ((-(vec2<f32>(x_1235.x, x_1235.y)) * vec2<f32>(x_1238.x, x_1238.y)) + vec2<f32>(x_1241.y, x_1241.w));
        let x_1244 : vec4<f32> = u_xlat8;
        u_xlat8 = vec4<f32>(x_1244.x, x_1243.x, x_1244.z, x_1243.y);
        let x_1246 : vec4<f32> = u_xlat8;
        u_xlat8 = (x_1246 + vec4<f32>(2.0f, 2.0f, 2.0f, 2.0f));
        let x_1250 : f32 = u_xlat8.y;
        u_xlat9.z = (x_1250 * 0.081632003f);
        let x_1254 : vec2<f32> = u_xlat49;
        let x_1257 : vec2<f32> = (vec2<f32>(x_1254.y, x_1254.x) * vec2<f32>(0.081632003f, 0.081632003f));
        let x_1258 : vec4<f32> = u_xlat11;
        u_xlat11 = vec4<f32>(x_1257.x, x_1257.y, x_1258.z, x_1258.w);
        let x_1260 : vec4<f32> = u_xlat8;
        u_xlat49 = (vec2<f32>(x_1260.x, x_1260.z) * vec2<f32>(0.081632003f, 0.081632003f));
        let x_1264 : f32 = u_xlat8.w;
        u_xlat11.z = (x_1264 * 0.081632003f);
        let x_1268 : f32 = u_xlat11.y;
        u_xlat9.x = x_1268;
        let x_1270 : vec4<f32> = u_xlat7;
        let x_1277 : vec2<f32> = ((vec2<f32>(x_1270.x, x_1270.x) * vec2<f32>(-0.081632003f, 0.081632003f)) + vec2<f32>(0.163264006f, 0.081632003f));
        let x_1278 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_1278.x, x_1277.x, x_1278.z, x_1277.y);
        let x_1280 : vec4<f32> = u_xlat7;
        let x_1284 : vec2<f32> = ((vec2<f32>(x_1280.x, x_1280.x) * vec2<f32>(-0.081632003f, 0.081632003f)) + vec2<f32>(0.081632003f, 0.163264006f));
        let x_1285 : vec4<f32> = u_xlat8;
        u_xlat8 = vec4<f32>(x_1284.x, x_1285.y, x_1284.y, x_1285.w);
        let x_1288 : f32 = u_xlat49.x;
        u_xlat8.y = x_1288;
        let x_1291 : f32 = u_xlat10.y;
        u_xlat8.w = x_1291;
        let x_1293 : vec4<f32> = u_xlat8;
        let x_1294 : vec4<f32> = u_xlat9;
        u_xlat9 = (x_1293 + x_1294);
        let x_1296 : vec4<f32> = u_xlat7;
        let x_1299 : vec2<f32> = ((vec2<f32>(x_1296.y, x_1296.y) * vec2<f32>(-0.081632003f, 0.081632003f)) + vec2<f32>(0.163264006f, 0.081632003f));
        let x_1300 : vec4<f32> = u_xlat11;
        u_xlat11 = vec4<f32>(x_1300.x, x_1299.x, x_1300.z, x_1299.y);
        let x_1302 : vec4<f32> = u_xlat7;
        let x_1305 : vec2<f32> = ((vec2<f32>(x_1302.y, x_1302.y) * vec2<f32>(-0.081632003f, 0.081632003f)) + vec2<f32>(0.081632003f, 0.163264006f));
        let x_1306 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_1305.x, x_1306.y, x_1305.y, x_1306.w);
        let x_1309 : f32 = u_xlat49.y;
        u_xlat10.y = x_1309;
        let x_1311 : vec4<f32> = u_xlat10;
        let x_1312 : vec4<f32> = u_xlat11;
        u_xlat7 = (x_1311 + x_1312);
        let x_1314 : vec4<f32> = u_xlat8;
        let x_1315 : vec4<f32> = u_xlat9;
        u_xlat8 = (x_1314 / x_1315);
        let x_1317 : vec4<f32> = u_xlat8;
        u_xlat8 = (x_1317 + vec4<f32>(-3.5f, -1.5f, 0.5f, 2.5f));
        let x_1323 : vec4<f32> = u_xlat10;
        let x_1324 : vec4<f32> = u_xlat7;
        u_xlat10 = (x_1323 / x_1324);
        let x_1326 : vec4<f32> = u_xlat10;
        u_xlat10 = (x_1326 + vec4<f32>(-3.5f, -1.5f, 0.5f, 2.5f));
        let x_1328 : vec4<f32> = u_xlat8;
        let x_1331 : vec4<f32> = x_599.x_MainLightShadowmapSize;
        u_xlat8 = (vec4<f32>(x_1328.w, x_1328.x, x_1328.y, x_1328.z) * vec4<f32>(x_1331.x, x_1331.x, x_1331.x, x_1331.x));
        let x_1334 : vec4<f32> = u_xlat10;
        let x_1337 : vec4<f32> = x_599.x_MainLightShadowmapSize;
        u_xlat10 = (vec4<f32>(x_1334.x, x_1334.w, x_1334.y, x_1334.z) * vec4<f32>(x_1337.y, x_1337.y, x_1337.y, x_1337.y));
        let x_1340 : vec4<f32> = u_xlat8;
        let x_1341 : vec3<f32> = vec3<f32>(x_1340.y, x_1340.z, x_1340.w);
        let x_1342 : vec4<f32> = u_xlat11;
        u_xlat11 = vec4<f32>(x_1341.x, x_1342.y, x_1341.y, x_1341.z);
        let x_1345 : f32 = u_xlat10.x;
        u_xlat11.y = x_1345;
        let x_1347 : vec3<f32> = u_xlat26;
        let x_1350 : vec4<f32> = x_599.x_MainLightShadowmapSize;
        let x_1353 : vec4<f32> = u_xlat11;
        u_xlat12 = ((vec4<f32>(x_1347.x, x_1347.y, x_1347.x, x_1347.y) * vec4<f32>(x_1350.x, x_1350.y, x_1350.x, x_1350.y)) + vec4<f32>(x_1353.x, x_1353.y, x_1353.z, x_1353.y));
        let x_1356 : vec3<f32> = u_xlat26;
        let x_1359 : vec4<f32> = x_599.x_MainLightShadowmapSize;
        let x_1362 : vec4<f32> = u_xlat11;
        let x_1364 : vec2<f32> = ((vec2<f32>(x_1356.x, x_1356.y) * vec2<f32>(x_1359.x, x_1359.y)) + vec2<f32>(x_1362.w, x_1362.y));
        let x_1365 : vec4<f32> = u_xlat13;
        u_xlat13 = vec4<f32>(x_1364.x, x_1364.y, x_1365.z, x_1365.w);
        let x_1368 : f32 = u_xlat11.y;
        u_xlat8.y = x_1368;
        let x_1371 : f32 = u_xlat10.z;
        u_xlat11.y = x_1371;
        let x_1373 : vec3<f32> = u_xlat26;
        let x_1376 : vec4<f32> = x_599.x_MainLightShadowmapSize;
        let x_1379 : vec4<f32> = u_xlat11;
        u_xlat14 = ((vec4<f32>(x_1373.x, x_1373.y, x_1373.x, x_1373.y) * vec4<f32>(x_1376.x, x_1376.y, x_1376.x, x_1376.y)) + vec4<f32>(x_1379.x, x_1379.y, x_1379.z, x_1379.y));
        let x_1383 : vec3<f32> = u_xlat26;
        let x_1386 : vec4<f32> = x_599.x_MainLightShadowmapSize;
        let x_1389 : vec4<f32> = u_xlat11;
        u_xlat55 = ((vec2<f32>(x_1383.x, x_1383.y) * vec2<f32>(x_1386.x, x_1386.y)) + vec2<f32>(x_1389.w, x_1389.y));
        let x_1393 : f32 = u_xlat11.y;
        u_xlat8.z = x_1393;
        let x_1395 : vec3<f32> = u_xlat26;
        let x_1398 : vec4<f32> = x_599.x_MainLightShadowmapSize;
        let x_1401 : vec4<f32> = u_xlat8;
        u_xlat15 = ((vec4<f32>(x_1395.x, x_1395.y, x_1395.x, x_1395.y) * vec4<f32>(x_1398.x, x_1398.y, x_1398.x, x_1398.y)) + vec4<f32>(x_1401.x, x_1401.y, x_1401.x, x_1401.z));
        let x_1405 : f32 = u_xlat10.w;
        u_xlat11.y = x_1405;
        let x_1408 : vec3<f32> = u_xlat26;
        let x_1411 : vec4<f32> = x_599.x_MainLightShadowmapSize;
        let x_1414 : vec4<f32> = u_xlat11;
        u_xlat16 = ((vec4<f32>(x_1408.x, x_1408.y, x_1408.x, x_1408.y) * vec4<f32>(x_1411.x, x_1411.y, x_1411.x, x_1411.y)) + vec4<f32>(x_1414.x, x_1414.y, x_1414.z, x_1414.y));
        let x_1418 : vec3<f32> = u_xlat26;
        let x_1421 : vec4<f32> = x_599.x_MainLightShadowmapSize;
        let x_1424 : vec4<f32> = u_xlat11;
        u_xlat29 = ((vec2<f32>(x_1418.x, x_1418.y) * vec2<f32>(x_1421.x, x_1421.y)) + vec2<f32>(x_1424.w, x_1424.y));
        let x_1428 : f32 = u_xlat11.y;
        u_xlat8.w = x_1428;
        let x_1431 : vec3<f32> = u_xlat26;
        let x_1434 : vec4<f32> = x_599.x_MainLightShadowmapSize;
        let x_1437 : vec4<f32> = u_xlat8;
        u_xlat17 = ((vec2<f32>(x_1431.x, x_1431.y) * vec2<f32>(x_1434.x, x_1434.y)) + vec2<f32>(x_1437.x, x_1437.w));
        let x_1440 : vec4<f32> = u_xlat11;
        let x_1441 : vec3<f32> = vec3<f32>(x_1440.x, x_1440.z, x_1440.w);
        let x_1442 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_1441.x, x_1442.y, x_1441.y, x_1441.z);
        let x_1444 : vec3<f32> = u_xlat26;
        let x_1447 : vec4<f32> = x_599.x_MainLightShadowmapSize;
        let x_1450 : vec4<f32> = u_xlat10;
        u_xlat11 = ((vec4<f32>(x_1444.x, x_1444.y, x_1444.x, x_1444.y) * vec4<f32>(x_1447.x, x_1447.y, x_1447.x, x_1447.y)) + vec4<f32>(x_1450.x, x_1450.y, x_1450.z, x_1450.y));
        let x_1454 : vec3<f32> = u_xlat26;
        let x_1457 : vec4<f32> = x_599.x_MainLightShadowmapSize;
        let x_1460 : vec4<f32> = u_xlat10;
        u_xlat52 = ((vec2<f32>(x_1454.x, x_1454.y) * vec2<f32>(x_1457.x, x_1457.y)) + vec2<f32>(x_1460.w, x_1460.y));
        let x_1464 : f32 = u_xlat8.x;
        u_xlat10.x = x_1464;
        let x_1466 : vec3<f32> = u_xlat26;
        let x_1469 : vec4<f32> = x_599.x_MainLightShadowmapSize;
        let x_1472 : vec4<f32> = u_xlat10;
        let x_1474 : vec2<f32> = ((vec2<f32>(x_1466.x, x_1466.y) * vec2<f32>(x_1469.x, x_1469.y)) + vec2<f32>(x_1472.x, x_1472.y));
        let x_1475 : vec3<f32> = u_xlat26;
        u_xlat26 = vec3<f32>(x_1474.x, x_1474.y, x_1475.z);
        let x_1478 : vec4<f32> = u_xlat7;
        let x_1480 : vec4<f32> = u_xlat9;
        u_xlat18 = (vec4<f32>(x_1478.x, x_1478.x, x_1478.x, x_1478.x) * x_1480);
        let x_1483 : vec4<f32> = u_xlat7;
        let x_1485 : vec4<f32> = u_xlat9;
        u_xlat19 = (vec4<f32>(x_1483.y, x_1483.y, x_1483.y, x_1483.y) * x_1485);
        let x_1488 : vec4<f32> = u_xlat7;
        let x_1490 : vec4<f32> = u_xlat9;
        u_xlat20 = (vec4<f32>(x_1488.z, x_1488.z, x_1488.z, x_1488.z) * x_1490);
        let x_1492 : vec4<f32> = u_xlat7;
        let x_1494 : vec4<f32> = u_xlat9;
        u_xlat7 = (vec4<f32>(x_1492.w, x_1492.w, x_1492.w, x_1492.w) * x_1494);
        let x_1497 : vec4<f32> = u_xlat12;
        let x_1498 : vec2<f32> = vec2<f32>(x_1497.x, x_1497.y);
        let x_1500 : f32 = vs_INTERP8.z;
        txVec13 = vec3<f32>(x_1498.x, x_1498.y, x_1500);
        let x_1507 : vec3<f32> = txVec13;
        let x_1509 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1507.xy, x_1507.z);
        u_xlat68 = x_1509;
        let x_1511 : vec4<f32> = u_xlat12;
        let x_1512 : vec2<f32> = vec2<f32>(x_1511.z, x_1511.w);
        let x_1514 : f32 = vs_INTERP8.z;
        txVec14 = vec3<f32>(x_1512.x, x_1512.y, x_1514);
        let x_1522 : vec3<f32> = txVec14;
        let x_1524 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1522.xy, x_1522.z);
        u_xlat69 = x_1524;
        let x_1525 : f32 = u_xlat69;
        let x_1527 : f32 = u_xlat18.y;
        u_xlat69 = (x_1525 * x_1527);
        let x_1530 : f32 = u_xlat18.x;
        let x_1531 : f32 = u_xlat68;
        let x_1533 : f32 = u_xlat69;
        u_xlat68 = ((x_1530 * x_1531) + x_1533);
        let x_1536 : vec4<f32> = u_xlat13;
        let x_1537 : vec2<f32> = vec2<f32>(x_1536.x, x_1536.y);
        let x_1539 : f32 = vs_INTERP8.z;
        txVec15 = vec3<f32>(x_1537.x, x_1537.y, x_1539);
        let x_1546 : vec3<f32> = txVec15;
        let x_1548 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1546.xy, x_1546.z);
        u_xlat69 = x_1548;
        let x_1550 : f32 = u_xlat18.z;
        let x_1551 : f32 = u_xlat69;
        let x_1553 : f32 = u_xlat68;
        u_xlat68 = ((x_1550 * x_1551) + x_1553);
        let x_1556 : vec4<f32> = u_xlat15;
        let x_1557 : vec2<f32> = vec2<f32>(x_1556.x, x_1556.y);
        let x_1559 : f32 = vs_INTERP8.z;
        txVec16 = vec3<f32>(x_1557.x, x_1557.y, x_1559);
        let x_1566 : vec3<f32> = txVec16;
        let x_1568 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1566.xy, x_1566.z);
        u_xlat69 = x_1568;
        let x_1570 : f32 = u_xlat18.w;
        let x_1571 : f32 = u_xlat69;
        let x_1573 : f32 = u_xlat68;
        u_xlat68 = ((x_1570 * x_1571) + x_1573);
        let x_1576 : vec4<f32> = u_xlat14;
        let x_1577 : vec2<f32> = vec2<f32>(x_1576.x, x_1576.y);
        let x_1579 : f32 = vs_INTERP8.z;
        txVec17 = vec3<f32>(x_1577.x, x_1577.y, x_1579);
        let x_1586 : vec3<f32> = txVec17;
        let x_1588 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1586.xy, x_1586.z);
        u_xlat69 = x_1588;
        let x_1590 : f32 = u_xlat19.x;
        let x_1591 : f32 = u_xlat69;
        let x_1593 : f32 = u_xlat68;
        u_xlat68 = ((x_1590 * x_1591) + x_1593);
        let x_1596 : vec4<f32> = u_xlat14;
        let x_1597 : vec2<f32> = vec2<f32>(x_1596.z, x_1596.w);
        let x_1599 : f32 = vs_INTERP8.z;
        txVec18 = vec3<f32>(x_1597.x, x_1597.y, x_1599);
        let x_1606 : vec3<f32> = txVec18;
        let x_1608 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1606.xy, x_1606.z);
        u_xlat69 = x_1608;
        let x_1610 : f32 = u_xlat19.y;
        let x_1611 : f32 = u_xlat69;
        let x_1613 : f32 = u_xlat68;
        u_xlat68 = ((x_1610 * x_1611) + x_1613);
        let x_1616 : vec2<f32> = u_xlat55;
        let x_1618 : f32 = vs_INTERP8.z;
        txVec19 = vec3<f32>(x_1616.x, x_1616.y, x_1618);
        let x_1625 : vec3<f32> = txVec19;
        let x_1627 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1625.xy, x_1625.z);
        u_xlat69 = x_1627;
        let x_1629 : f32 = u_xlat19.z;
        let x_1630 : f32 = u_xlat69;
        let x_1632 : f32 = u_xlat68;
        u_xlat68 = ((x_1629 * x_1630) + x_1632);
        let x_1635 : vec4<f32> = u_xlat15;
        let x_1636 : vec2<f32> = vec2<f32>(x_1635.z, x_1635.w);
        let x_1638 : f32 = vs_INTERP8.z;
        txVec20 = vec3<f32>(x_1636.x, x_1636.y, x_1638);
        let x_1645 : vec3<f32> = txVec20;
        let x_1647 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1645.xy, x_1645.z);
        u_xlat69 = x_1647;
        let x_1649 : f32 = u_xlat19.w;
        let x_1650 : f32 = u_xlat69;
        let x_1652 : f32 = u_xlat68;
        u_xlat68 = ((x_1649 * x_1650) + x_1652);
        let x_1655 : vec4<f32> = u_xlat16;
        let x_1656 : vec2<f32> = vec2<f32>(x_1655.x, x_1655.y);
        let x_1658 : f32 = vs_INTERP8.z;
        txVec21 = vec3<f32>(x_1656.x, x_1656.y, x_1658);
        let x_1665 : vec3<f32> = txVec21;
        let x_1667 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1665.xy, x_1665.z);
        u_xlat69 = x_1667;
        let x_1669 : f32 = u_xlat20.x;
        let x_1670 : f32 = u_xlat69;
        let x_1672 : f32 = u_xlat68;
        u_xlat68 = ((x_1669 * x_1670) + x_1672);
        let x_1675 : vec4<f32> = u_xlat16;
        let x_1676 : vec2<f32> = vec2<f32>(x_1675.z, x_1675.w);
        let x_1678 : f32 = vs_INTERP8.z;
        txVec22 = vec3<f32>(x_1676.x, x_1676.y, x_1678);
        let x_1685 : vec3<f32> = txVec22;
        let x_1687 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1685.xy, x_1685.z);
        u_xlat69 = x_1687;
        let x_1689 : f32 = u_xlat20.y;
        let x_1690 : f32 = u_xlat69;
        let x_1692 : f32 = u_xlat68;
        u_xlat68 = ((x_1689 * x_1690) + x_1692);
        let x_1695 : vec2<f32> = u_xlat29;
        let x_1697 : f32 = vs_INTERP8.z;
        txVec23 = vec3<f32>(x_1695.x, x_1695.y, x_1697);
        let x_1704 : vec3<f32> = txVec23;
        let x_1706 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1704.xy, x_1704.z);
        u_xlat69 = x_1706;
        let x_1708 : f32 = u_xlat20.z;
        let x_1709 : f32 = u_xlat69;
        let x_1711 : f32 = u_xlat68;
        u_xlat68 = ((x_1708 * x_1709) + x_1711);
        let x_1714 : vec2<f32> = u_xlat17;
        let x_1716 : f32 = vs_INTERP8.z;
        txVec24 = vec3<f32>(x_1714.x, x_1714.y, x_1716);
        let x_1723 : vec3<f32> = txVec24;
        let x_1725 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1723.xy, x_1723.z);
        u_xlat69 = x_1725;
        let x_1727 : f32 = u_xlat20.w;
        let x_1728 : f32 = u_xlat69;
        let x_1730 : f32 = u_xlat68;
        u_xlat68 = ((x_1727 * x_1728) + x_1730);
        let x_1733 : vec4<f32> = u_xlat11;
        let x_1734 : vec2<f32> = vec2<f32>(x_1733.x, x_1733.y);
        let x_1736 : f32 = vs_INTERP8.z;
        txVec25 = vec3<f32>(x_1734.x, x_1734.y, x_1736);
        let x_1743 : vec3<f32> = txVec25;
        let x_1745 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1743.xy, x_1743.z);
        u_xlat69 = x_1745;
        let x_1747 : f32 = u_xlat7.x;
        let x_1748 : f32 = u_xlat69;
        let x_1750 : f32 = u_xlat68;
        u_xlat68 = ((x_1747 * x_1748) + x_1750);
        let x_1753 : vec4<f32> = u_xlat11;
        let x_1754 : vec2<f32> = vec2<f32>(x_1753.z, x_1753.w);
        let x_1756 : f32 = vs_INTERP8.z;
        txVec26 = vec3<f32>(x_1754.x, x_1754.y, x_1756);
        let x_1763 : vec3<f32> = txVec26;
        let x_1765 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1763.xy, x_1763.z);
        u_xlat69 = x_1765;
        let x_1767 : f32 = u_xlat7.y;
        let x_1768 : f32 = u_xlat69;
        let x_1770 : f32 = u_xlat68;
        u_xlat68 = ((x_1767 * x_1768) + x_1770);
        let x_1773 : vec2<f32> = u_xlat52;
        let x_1775 : f32 = vs_INTERP8.z;
        txVec27 = vec3<f32>(x_1773.x, x_1773.y, x_1775);
        let x_1782 : vec3<f32> = txVec27;
        let x_1784 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1782.xy, x_1782.z);
        u_xlat69 = x_1784;
        let x_1786 : f32 = u_xlat7.z;
        let x_1787 : f32 = u_xlat69;
        let x_1789 : f32 = u_xlat68;
        u_xlat68 = ((x_1786 * x_1787) + x_1789);
        let x_1792 : vec3<f32> = u_xlat26;
        let x_1793 : vec2<f32> = vec2<f32>(x_1792.x, x_1792.y);
        let x_1795 : f32 = vs_INTERP8.z;
        txVec28 = vec3<f32>(x_1793.x, x_1793.y, x_1795);
        let x_1802 : vec3<f32> = txVec28;
        let x_1804 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1802.xy, x_1802.z);
        u_xlat26.x = x_1804;
        let x_1807 : f32 = u_xlat7.w;
        let x_1809 : f32 = u_xlat26.x;
        let x_1811 : f32 = u_xlat68;
        u_xlat67 = ((x_1807 * x_1809) + x_1811);
      }
    }
  } else {
    let x_1815 : vec4<f32> = vs_INTERP8;
    let x_1816 : vec2<f32> = vec2<f32>(x_1815.x, x_1815.y);
    let x_1818 : f32 = vs_INTERP8.z;
    txVec29 = vec3<f32>(x_1816.x, x_1816.y, x_1818);
    let x_1825 : vec3<f32> = txVec29;
    let x_1827 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1825.xy, x_1825.z);
    u_xlat67 = x_1827;
  }
  let x_1829 : f32 = x_599.x_MainLightShadowParams.x;
  u_xlat26.x = (-(x_1829) + 1.0f);
  let x_1833 : f32 = u_xlat67;
  let x_1835 : f32 = x_599.x_MainLightShadowParams.x;
  let x_1838 : f32 = u_xlat26.x;
  u_xlat67 = ((x_1833 * x_1835) + x_1838);
  let x_1841 : f32 = vs_INTERP8.z;
  u_xlatb26 = (0.0f >= x_1841);
  let x_1845 : f32 = vs_INTERP8.z;
  u_xlatb47 = (x_1845 >= 1.0f);
  let x_1847 : bool = u_xlatb47;
  let x_1848 : bool = u_xlatb26;
  u_xlatb26 = (x_1847 | x_1848);
  let x_1850 : bool = u_xlatb26;
  let x_1851 : f32 = u_xlat67;
  u_xlat67 = select(x_1851, 1.0f, x_1850);
  let x_1853 : vec3<f32> = vs_INTERP0;
  let x_1855 : vec3<f32> = x_44.x_WorldSpaceCameraPos;
  u_xlat26 = (x_1853 + -(x_1855));
  let x_1858 : vec3<f32> = u_xlat26;
  let x_1859 : vec3<f32> = u_xlat26;
  u_xlat26.x = dot(x_1858, x_1859);
  let x_1863 : f32 = u_xlat26.x;
  let x_1865 : f32 = x_599.x_MainLightShadowParams.z;
  let x_1868 : f32 = x_599.x_MainLightShadowParams.w;
  u_xlat26.x = ((x_1863 * x_1865) + x_1868);
  let x_1872 : f32 = u_xlat26.x;
  u_xlat26.x = clamp(x_1872, 0.0f, 1.0f);
  let x_1875 : f32 = u_xlat67;
  u_xlat47 = (-(x_1875) + 1.0f);
  let x_1879 : f32 = u_xlat26.x;
  let x_1880 : f32 = u_xlat47;
  let x_1882 : f32 = u_xlat67;
  u_xlat67 = ((x_1879 * x_1880) + x_1882);
  let x_1884 : vec3<f32> = u_xlat5;
  let x_1887 : vec4<f32> = x_44.x_MainLightColor;
  u_xlat26 = (vec3<f32>(x_1884.x, x_1884.x, x_1884.x) * vec3<f32>(x_1887.x, x_1887.y, x_1887.z));
  let x_1890 : vec3<f32> = u_xlat3;
  let x_1892 : vec3<f32> = u_xlat22;
  u_xlat69 = dot(-(x_1890), x_1892);
  let x_1894 : f32 = u_xlat69;
  let x_1895 : f32 = u_xlat69;
  u_xlat69 = (x_1894 + x_1895);
  let x_1897 : vec3<f32> = u_xlat22;
  let x_1898 : f32 = u_xlat69;
  let x_1902 : vec3<f32> = u_xlat3;
  let x_1904 : vec3<f32> = ((x_1897 * -(vec3<f32>(x_1898, x_1898, x_1898))) + -(x_1902));
  let x_1905 : vec4<f32> = u_xlat7;
  u_xlat7 = vec4<f32>(x_1904.x, x_1904.y, x_1904.z, x_1905.w);
  let x_1907 : vec3<f32> = u_xlat22;
  let x_1908 : vec3<f32> = u_xlat3;
  u_xlat69 = dot(x_1907, x_1908);
  let x_1910 : f32 = u_xlat69;
  u_xlat69 = clamp(x_1910, 0.0f, 1.0f);
  let x_1912 : f32 = u_xlat69;
  u_xlat69 = (-(x_1912) + 1.0f);
  let x_1915 : f32 = u_xlat69;
  let x_1916 : f32 = u_xlat69;
  u_xlat69 = (x_1915 * x_1916);
  let x_1918 : f32 = u_xlat69;
  let x_1919 : f32 = u_xlat69;
  u_xlat69 = (x_1918 * x_1919);
  let x_1923 : f32 = u_xlat0.x;
  u_xlat70 = ((-(x_1923) * 0.699999988f) + 1.700000048f);
  let x_1930 : f32 = u_xlat0.x;
  let x_1931 : f32 = u_xlat70;
  u_xlat0.x = (x_1930 * x_1931);
  let x_1935 : f32 = u_xlat0.x;
  u_xlat0.x = (x_1935 * 6.0f);
  let x_1947 : vec4<f32> = u_xlat7;
  let x_1950 : f32 = u_xlat0.x;
  let x_1951 : vec4<f32> = textureSampleLevel(unity_SpecCube0, samplerunity_SpecCube0, vec3<f32>(x_1947.x, x_1947.y, x_1947.z), x_1950);
  u_xlat7 = x_1951;
  let x_1953 : f32 = u_xlat7.w;
  u_xlat0.x = (x_1953 + -1.0f);
  let x_1957 : f32 = x_274.unity_SpecCube0_HDR.w;
  let x_1959 : f32 = u_xlat0.x;
  u_xlat0.x = ((x_1957 * x_1959) + 1.0f);
  let x_1964 : f32 = u_xlat0.x;
  u_xlat0.x = max(x_1964, 0.0f);
  let x_1968 : f32 = u_xlat0.x;
  u_xlat0.x = log2(x_1968);
  let x_1972 : f32 = u_xlat0.x;
  let x_1974 : f32 = x_274.unity_SpecCube0_HDR.y;
  u_xlat0.x = (x_1972 * x_1974);
  let x_1978 : f32 = u_xlat0.x;
  u_xlat0.x = exp2(x_1978);
  let x_1982 : f32 = u_xlat0.x;
  let x_1984 : f32 = x_274.unity_SpecCube0_HDR.x;
  u_xlat0.x = (x_1982 * x_1984);
  let x_1987 : vec4<f32> = u_xlat7;
  let x_1989 : vec4<f32> = u_xlat0;
  let x_1991 : vec3<f32> = (vec3<f32>(x_1987.x, x_1987.y, x_1987.z) * vec3<f32>(x_1989.x, x_1989.x, x_1989.x));
  let x_1992 : vec4<f32> = u_xlat7;
  u_xlat7 = vec4<f32>(x_1991.x, x_1991.y, x_1991.z, x_1992.w);
  let x_1994 : f32 = u_xlat42;
  let x_1996 : f32 = u_xlat42;
  let x_2000 : vec2<f32> = ((vec2<f32>(x_1994, x_1994) * vec2<f32>(x_1996, x_1996)) + vec2<f32>(-1.0f, 1.0f));
  let x_2001 : vec4<f32> = u_xlat0;
  u_xlat0 = vec4<f32>(x_2000.x, x_2001.y, x_2000.y, x_2001.w);
  let x_2004 : f32 = u_xlat0.z;
  u_xlat42 = (1.0f / x_2004);
  let x_2006 : vec3<f32> = u_xlat2;
  let x_2008 : f32 = u_xlat65;
  let x_2010 : vec3<f32> = (-(x_2006) + vec3<f32>(x_2008, x_2008, x_2008));
  let x_2011 : vec4<f32> = u_xlat8;
  u_xlat8 = vec4<f32>(x_2010.x, x_2010.y, x_2010.z, x_2011.w);
  let x_2013 : f32 = u_xlat69;
  let x_2015 : vec4<f32> = u_xlat8;
  let x_2018 : vec3<f32> = u_xlat2;
  let x_2019 : vec3<f32> = ((vec3<f32>(x_2013, x_2013, x_2013) * vec3<f32>(x_2015.x, x_2015.y, x_2015.z)) + x_2018);
  let x_2020 : vec4<f32> = u_xlat8;
  u_xlat8 = vec4<f32>(x_2019.x, x_2019.y, x_2019.z, x_2020.w);
  let x_2022 : f32 = u_xlat42;
  let x_2024 : vec4<f32> = u_xlat8;
  let x_2026 : vec3<f32> = (vec3<f32>(x_2022, x_2022, x_2022) * vec3<f32>(x_2024.x, x_2024.y, x_2024.z));
  let x_2027 : vec4<f32> = u_xlat8;
  u_xlat8 = vec4<f32>(x_2026.x, x_2026.y, x_2026.z, x_2027.w);
  let x_2029 : vec4<f32> = u_xlat7;
  let x_2031 : vec4<f32> = u_xlat8;
  let x_2033 : vec3<f32> = (vec3<f32>(x_2029.x, x_2029.y, x_2029.z) * vec3<f32>(x_2031.x, x_2031.y, x_2031.z));
  let x_2034 : vec4<f32> = u_xlat7;
  u_xlat7 = vec4<f32>(x_2033.x, x_2033.y, x_2033.z, x_2034.w);
  let x_2036 : vec4<f32> = u_xlat4;
  let x_2038 : vec3<f32> = u_xlat6;
  let x_2040 : vec4<f32> = u_xlat7;
  let x_2042 : vec3<f32> = ((vec3<f32>(x_2036.x, x_2036.y, x_2036.z) * x_2038) + vec3<f32>(x_2040.x, x_2040.y, x_2040.z));
  let x_2043 : vec4<f32> = u_xlat4;
  u_xlat4 = vec4<f32>(x_2042.x, x_2042.y, x_2042.z, x_2043.w);
  let x_2045 : f32 = u_xlat67;
  let x_2048 : f32 = x_274.unity_LightData.z;
  u_xlat42 = (x_2045 * x_2048);
  let x_2050 : vec3<f32> = u_xlat22;
  let x_2052 : vec4<f32> = x_44.x_MainLightPosition;
  u_xlat65 = dot(x_2050, vec3<f32>(x_2052.x, x_2052.y, x_2052.z));
  let x_2055 : f32 = u_xlat65;
  u_xlat65 = clamp(x_2055, 0.0f, 1.0f);
  let x_2057 : f32 = u_xlat42;
  let x_2058 : f32 = u_xlat65;
  u_xlat42 = (x_2057 * x_2058);
  let x_2060 : f32 = u_xlat42;
  let x_2062 : vec3<f32> = u_xlat26;
  u_xlat26 = (vec3<f32>(x_2060, x_2060, x_2060) * x_2062);
  let x_2064 : vec3<f32> = u_xlat3;
  let x_2066 : vec4<f32> = x_44.x_MainLightPosition;
  let x_2068 : vec3<f32> = (x_2064 + vec3<f32>(x_2066.x, x_2066.y, x_2066.z));
  let x_2069 : vec4<f32> = u_xlat7;
  u_xlat7 = vec4<f32>(x_2068.x, x_2068.y, x_2068.z, x_2069.w);
  let x_2071 : vec4<f32> = u_xlat7;
  let x_2073 : vec4<f32> = u_xlat7;
  u_xlat42 = dot(vec3<f32>(x_2071.x, x_2071.y, x_2071.z), vec3<f32>(x_2073.x, x_2073.y, x_2073.z));
  let x_2076 : f32 = u_xlat42;
  u_xlat42 = max(x_2076, 1.17549435e-37f);
  let x_2079 : f32 = u_xlat42;
  u_xlat42 = inverseSqrt(x_2079);
  let x_2081 : f32 = u_xlat42;
  let x_2083 : vec4<f32> = u_xlat7;
  let x_2085 : vec3<f32> = (vec3<f32>(x_2081, x_2081, x_2081) * vec3<f32>(x_2083.x, x_2083.y, x_2083.z));
  let x_2086 : vec4<f32> = u_xlat7;
  u_xlat7 = vec4<f32>(x_2085.x, x_2085.y, x_2085.z, x_2086.w);
  let x_2088 : vec3<f32> = u_xlat22;
  let x_2089 : vec4<f32> = u_xlat7;
  u_xlat42 = dot(x_2088, vec3<f32>(x_2089.x, x_2089.y, x_2089.z));
  let x_2092 : f32 = u_xlat42;
  u_xlat42 = clamp(x_2092, 0.0f, 1.0f);
  let x_2095 : vec4<f32> = x_44.x_MainLightPosition;
  let x_2097 : vec4<f32> = u_xlat7;
  u_xlat65 = dot(vec3<f32>(x_2095.x, x_2095.y, x_2095.z), vec3<f32>(x_2097.x, x_2097.y, x_2097.z));
  let x_2100 : f32 = u_xlat65;
  u_xlat65 = clamp(x_2100, 0.0f, 1.0f);
  let x_2102 : f32 = u_xlat42;
  let x_2103 : f32 = u_xlat42;
  u_xlat42 = (x_2102 * x_2103);
  let x_2105 : f32 = u_xlat42;
  let x_2107 : f32 = u_xlat0.x;
  u_xlat42 = ((x_2105 * x_2107) + 1.000010014f);
  let x_2111 : f32 = u_xlat65;
  let x_2112 : f32 = u_xlat65;
  u_xlat65 = (x_2111 * x_2112);
  let x_2114 : f32 = u_xlat42;
  let x_2115 : f32 = u_xlat42;
  u_xlat42 = (x_2114 * x_2115);
  let x_2117 : f32 = u_xlat65;
  u_xlat65 = max(x_2117, 0.100000001f);
  let x_2120 : f32 = u_xlat42;
  let x_2121 : f32 = u_xlat65;
  u_xlat42 = (x_2120 * x_2121);
  let x_2123 : f32 = u_xlat66;
  let x_2124 : f32 = u_xlat42;
  u_xlat42 = (x_2123 * x_2124);
  let x_2127 : f32 = u_xlat1.x;
  let x_2128 : f32 = u_xlat42;
  u_xlat42 = (x_2127 / x_2128);
  let x_2130 : vec3<f32> = u_xlat2;
  let x_2131 : f32 = u_xlat42;
  let x_2134 : vec3<f32> = u_xlat6;
  let x_2135 : vec3<f32> = ((x_2130 * vec3<f32>(x_2131, x_2131, x_2131)) + x_2134);
  let x_2136 : vec4<f32> = u_xlat7;
  u_xlat7 = vec4<f32>(x_2135.x, x_2135.y, x_2135.z, x_2136.w);
  let x_2138 : vec3<f32> = u_xlat26;
  let x_2139 : vec4<f32> = u_xlat7;
  u_xlat26 = (x_2138 * vec3<f32>(x_2139.x, x_2139.y, x_2139.z));
  let x_2143 : f32 = x_44.x_AdditionalLightsCount.x;
  let x_2145 : f32 = x_274.unity_LightData.y;
  u_xlat42 = min(x_2143, x_2145);
  let x_2149 : f32 = u_xlat42;
  u_xlatu42 = bitcast<u32>(i32(x_2149));
  u_xlat7.x = 0.0f;
  u_xlat7.y = 0.0f;
  u_xlat7.z = 0.0f;
  u_xlatu_loop_1 = 0u;
  loop {
    let x_2161 : u32 = u_xlatu_loop_1;
    let x_2162 : u32 = u_xlatu42;
    if ((x_2161 < x_2162)) {
    } else {
      break;
    }
    let x_2165 : u32 = u_xlatu_loop_1;
    u_xlatu67 = (x_2165 >> 2u);
    let x_2169 : u32 = u_xlatu_loop_1;
    u_xlati69 = bitcast<i32>((x_2169 & 3u));
    let x_2172 : u32 = u_xlatu67;
    let x_2175 : vec4<f32> = x_274.unity_LightIndices[bitcast<i32>(x_2172)];
    let x_2185 : i32 = u_xlati69;
    indexable = array<vec4<u32>, 4u>(vec4<u32>(1065353216u, 0u, 0u, 0u), vec4<u32>(0u, 1065353216u, 0u, 0u), vec4<u32>(0u, 0u, 1065353216u, 0u), vec4<u32>(0u, 0u, 0u, 1065353216u));
    let x_2190 : vec4<u32> = indexable[x_2185];
    u_xlat67 = dot(x_2175, bitcast<vec4<f32>>(x_2190));
    let x_2194 : f32 = u_xlat67;
    u_xlati67 = i32(x_2194);
    let x_2196 : vec3<f32> = vs_INTERP0;
    let x_2208 : i32 = u_xlati67;
    let x_2210 : vec4<f32> = x_2207.x_AdditionalLightsPosition[x_2208];
    let x_2213 : i32 = u_xlati67;
    let x_2215 : vec4<f32> = x_2207.x_AdditionalLightsPosition[x_2213];
    let x_2217 : vec3<f32> = ((-(x_2196) * vec3<f32>(x_2210.w, x_2210.w, x_2210.w)) + vec3<f32>(x_2215.x, x_2215.y, x_2215.z));
    let x_2218 : vec4<f32> = u_xlat8;
    u_xlat8 = vec4<f32>(x_2217.x, x_2217.y, x_2217.z, x_2218.w);
    let x_2220 : vec4<f32> = u_xlat8;
    let x_2222 : vec4<f32> = u_xlat8;
    u_xlat69 = dot(vec3<f32>(x_2220.x, x_2220.y, x_2220.z), vec3<f32>(x_2222.x, x_2222.y, x_2222.z));
    let x_2225 : f32 = u_xlat69;
    u_xlat69 = max(x_2225, 6.10351562e-05f);
    let x_2228 : f32 = u_xlat69;
    u_xlat70 = inverseSqrt(x_2228);
    let x_2230 : f32 = u_xlat70;
    let x_2232 : vec4<f32> = u_xlat8;
    let x_2234 : vec3<f32> = (vec3<f32>(x_2230, x_2230, x_2230) * vec3<f32>(x_2232.x, x_2232.y, x_2232.z));
    let x_2235 : vec4<f32> = u_xlat9;
    u_xlat9 = vec4<f32>(x_2234.x, x_2234.y, x_2234.z, x_2235.w);
    let x_2238 : f32 = u_xlat69;
    u_xlat71 = (1.0f / x_2238);
    let x_2240 : f32 = u_xlat69;
    let x_2241 : i32 = u_xlati67;
    let x_2243 : f32 = x_2207.x_AdditionalLightsAttenuation[x_2241].x;
    u_xlat69 = (x_2240 * x_2243);
    let x_2245 : f32 = u_xlat69;
    let x_2247 : f32 = u_xlat69;
    u_xlat69 = ((-(x_2245) * x_2247) + 1.0f);
    let x_2250 : f32 = u_xlat69;
    u_xlat69 = max(x_2250, 0.0f);
    let x_2252 : f32 = u_xlat69;
    let x_2253 : f32 = u_xlat69;
    u_xlat69 = (x_2252 * x_2253);
    let x_2255 : f32 = u_xlat69;
    let x_2256 : f32 = u_xlat71;
    u_xlat69 = (x_2255 * x_2256);
    let x_2258 : i32 = u_xlati67;
    let x_2260 : vec4<f32> = x_2207.x_AdditionalLightsSpotDir[x_2258];
    let x_2262 : vec4<f32> = u_xlat9;
    u_xlat71 = dot(vec3<f32>(x_2260.x, x_2260.y, x_2260.z), vec3<f32>(x_2262.x, x_2262.y, x_2262.z));
    let x_2265 : f32 = u_xlat71;
    let x_2266 : i32 = u_xlati67;
    let x_2268 : f32 = x_2207.x_AdditionalLightsAttenuation[x_2266].z;
    let x_2270 : i32 = u_xlati67;
    let x_2272 : f32 = x_2207.x_AdditionalLightsAttenuation[x_2270].w;
    u_xlat71 = ((x_2265 * x_2268) + x_2272);
    let x_2274 : f32 = u_xlat71;
    u_xlat71 = clamp(x_2274, 0.0f, 1.0f);
    let x_2276 : f32 = u_xlat71;
    let x_2277 : f32 = u_xlat71;
    u_xlat71 = (x_2276 * x_2277);
    let x_2279 : f32 = u_xlat69;
    let x_2280 : f32 = u_xlat71;
    u_xlat69 = (x_2279 * x_2280);
    let x_2282 : vec3<f32> = u_xlat5;
    let x_2284 : i32 = u_xlati67;
    let x_2286 : vec4<f32> = x_2207.x_AdditionalLightsColor[x_2284];
    let x_2288 : vec3<f32> = (vec3<f32>(x_2282.x, x_2282.x, x_2282.x) * vec3<f32>(x_2286.x, x_2286.y, x_2286.z));
    let x_2289 : vec4<f32> = u_xlat10;
    u_xlat10 = vec4<f32>(x_2288.x, x_2288.y, x_2288.z, x_2289.w);
    let x_2291 : vec3<f32> = u_xlat22;
    let x_2292 : vec4<f32> = u_xlat9;
    u_xlat67 = dot(x_2291, vec3<f32>(x_2292.x, x_2292.y, x_2292.z));
    let x_2295 : f32 = u_xlat67;
    u_xlat67 = clamp(x_2295, 0.0f, 1.0f);
    let x_2297 : f32 = u_xlat67;
    let x_2298 : f32 = u_xlat69;
    u_xlat67 = (x_2297 * x_2298);
    let x_2300 : f32 = u_xlat67;
    let x_2302 : vec4<f32> = u_xlat10;
    let x_2304 : vec3<f32> = (vec3<f32>(x_2300, x_2300, x_2300) * vec3<f32>(x_2302.x, x_2302.y, x_2302.z));
    let x_2305 : vec4<f32> = u_xlat10;
    u_xlat10 = vec4<f32>(x_2304.x, x_2304.y, x_2304.z, x_2305.w);
    let x_2307 : vec4<f32> = u_xlat8;
    let x_2309 : f32 = u_xlat70;
    let x_2312 : vec3<f32> = u_xlat3;
    let x_2313 : vec3<f32> = ((vec3<f32>(x_2307.x, x_2307.y, x_2307.z) * vec3<f32>(x_2309, x_2309, x_2309)) + x_2312);
    let x_2314 : vec4<f32> = u_xlat8;
    u_xlat8 = vec4<f32>(x_2313.x, x_2313.y, x_2313.z, x_2314.w);
    let x_2316 : vec4<f32> = u_xlat8;
    let x_2318 : vec4<f32> = u_xlat8;
    u_xlat67 = dot(vec3<f32>(x_2316.x, x_2316.y, x_2316.z), vec3<f32>(x_2318.x, x_2318.y, x_2318.z));
    let x_2321 : f32 = u_xlat67;
    u_xlat67 = max(x_2321, 1.17549435e-37f);
    let x_2323 : f32 = u_xlat67;
    u_xlat67 = inverseSqrt(x_2323);
    let x_2325 : f32 = u_xlat67;
    let x_2327 : vec4<f32> = u_xlat8;
    let x_2329 : vec3<f32> = (vec3<f32>(x_2325, x_2325, x_2325) * vec3<f32>(x_2327.x, x_2327.y, x_2327.z));
    let x_2330 : vec4<f32> = u_xlat8;
    u_xlat8 = vec4<f32>(x_2329.x, x_2329.y, x_2329.z, x_2330.w);
    let x_2332 : vec3<f32> = u_xlat22;
    let x_2333 : vec4<f32> = u_xlat8;
    u_xlat67 = dot(x_2332, vec3<f32>(x_2333.x, x_2333.y, x_2333.z));
    let x_2336 : f32 = u_xlat67;
    u_xlat67 = clamp(x_2336, 0.0f, 1.0f);
    let x_2338 : vec4<f32> = u_xlat9;
    let x_2340 : vec4<f32> = u_xlat8;
    u_xlat69 = dot(vec3<f32>(x_2338.x, x_2338.y, x_2338.z), vec3<f32>(x_2340.x, x_2340.y, x_2340.z));
    let x_2343 : f32 = u_xlat69;
    u_xlat69 = clamp(x_2343, 0.0f, 1.0f);
    let x_2345 : f32 = u_xlat67;
    let x_2346 : f32 = u_xlat67;
    u_xlat67 = (x_2345 * x_2346);
    let x_2348 : f32 = u_xlat67;
    let x_2350 : f32 = u_xlat0.x;
    u_xlat67 = ((x_2348 * x_2350) + 1.000010014f);
    let x_2353 : f32 = u_xlat69;
    let x_2354 : f32 = u_xlat69;
    u_xlat69 = (x_2353 * x_2354);
    let x_2356 : f32 = u_xlat67;
    let x_2357 : f32 = u_xlat67;
    u_xlat67 = (x_2356 * x_2357);
    let x_2359 : f32 = u_xlat69;
    u_xlat69 = max(x_2359, 0.100000001f);
    let x_2361 : f32 = u_xlat67;
    let x_2362 : f32 = u_xlat69;
    u_xlat67 = (x_2361 * x_2362);
    let x_2364 : f32 = u_xlat66;
    let x_2365 : f32 = u_xlat67;
    u_xlat67 = (x_2364 * x_2365);
    let x_2368 : f32 = u_xlat1.x;
    let x_2369 : f32 = u_xlat67;
    u_xlat67 = (x_2368 / x_2369);
    let x_2371 : vec3<f32> = u_xlat2;
    let x_2372 : f32 = u_xlat67;
    let x_2375 : vec3<f32> = u_xlat6;
    let x_2376 : vec3<f32> = ((x_2371 * vec3<f32>(x_2372, x_2372, x_2372)) + x_2375);
    let x_2377 : vec4<f32> = u_xlat8;
    u_xlat8 = vec4<f32>(x_2376.x, x_2376.y, x_2376.z, x_2377.w);
    let x_2379 : vec4<f32> = u_xlat8;
    let x_2381 : vec4<f32> = u_xlat10;
    let x_2384 : vec4<f32> = u_xlat7;
    let x_2386 : vec3<f32> = ((vec3<f32>(x_2379.x, x_2379.y, x_2379.z) * vec3<f32>(x_2381.x, x_2381.y, x_2381.z)) + vec3<f32>(x_2384.x, x_2384.y, x_2384.z));
    let x_2387 : vec4<f32> = u_xlat7;
    u_xlat7 = vec4<f32>(x_2386.x, x_2386.y, x_2386.z, x_2387.w);

    continuing {
      let x_2389 : u32 = u_xlatu_loop_1;
      u_xlatu_loop_1 = (x_2389 + bitcast<u32>(1i));
    }
  }
  let x_2391 : vec4<f32> = u_xlat4;
  let x_2393 : f32 = u_xlat63;
  let x_2396 : vec3<f32> = u_xlat26;
  let x_2397 : vec3<f32> = ((vec3<f32>(x_2391.x, x_2391.y, x_2391.z) * vec3<f32>(x_2393, x_2393, x_2393)) + x_2396);
  let x_2398 : vec4<f32> = u_xlat0;
  u_xlat0 = vec4<f32>(x_2397.x, x_2398.y, x_2397.y, x_2397.z);
  let x_2400 : vec4<f32> = u_xlat7;
  let x_2402 : vec4<f32> = u_xlat0;
  let x_2404 : vec3<f32> = (vec3<f32>(x_2400.x, x_2400.y, x_2400.z) + vec3<f32>(x_2402.x, x_2402.z, x_2402.w));
  let x_2405 : vec4<f32> = u_xlat0;
  u_xlat0 = vec4<f32>(x_2404.x, x_2405.y, x_2404.y, x_2404.z);
  let x_2408 : f32 = u_xlat21.x;
  let x_2410 : f32 = u_xlat21.x;
  u_xlat21.x = (x_2408 * -(x_2410));
  let x_2415 : f32 = u_xlat21.x;
  u_xlat21.x = exp2(x_2415);
  let x_2418 : vec4<f32> = u_xlat0;
  let x_2422 : vec4<f32> = x_44.unity_FogColor;
  let x_2425 : vec3<f32> = (vec3<f32>(x_2418.x, x_2418.z, x_2418.w) + -(vec3<f32>(x_2422.x, x_2422.y, x_2422.z)));
  let x_2426 : vec4<f32> = u_xlat0;
  u_xlat0 = vec4<f32>(x_2425.x, x_2426.y, x_2425.y, x_2425.z);
  let x_2430 : vec2<f32> = u_xlat21;
  let x_2432 : vec4<f32> = u_xlat0;
  let x_2436 : vec4<f32> = x_44.unity_FogColor;
  let x_2438 : vec3<f32> = ((vec3<f32>(x_2430.x, x_2430.x, x_2430.x) * vec3<f32>(x_2432.x, x_2432.z, x_2432.w)) + vec3<f32>(x_2436.x, x_2436.y, x_2436.z));
  let x_2439 : vec4<f32> = SV_Target0;
  SV_Target0 = vec4<f32>(x_2438.x, x_2438.y, x_2438.z, x_2439.w);
  SV_Target0.w = 1.0f;
  return;
}

struct main_out {
  @location(0)
  SV_Target0_1 : vec4<f32>,
}

@fragment
fn main(@builtin(position) gl_FragCoord_param : vec4<f32>, @location(3) vs_INTERP3_param : vec4<f32>, @location(2) vs_INTERP2_param : vec4<f32>, @location(1) vs_INTERP1_param : vec3<f32>, @location(0) vs_INTERP0_param : vec3<f32>, @location(4) vs_INTERP4_param : vec2<f32>, @location(5) vs_INTERP8_param : vec4<f32>) -> main_out {
  gl_FragCoord = gl_FragCoord_param;
  vs_INTERP3 = vs_INTERP3_param;
  vs_INTERP2 = vs_INTERP2_param;
  vs_INTERP1 = vs_INTERP1_param;
  vs_INTERP0 = vs_INTERP0_param;
  vs_INTERP4 = vs_INTERP4_param;
  vs_INTERP8 = vs_INTERP8_param;
  main_1();
  return main_out(SV_Target0);
}

