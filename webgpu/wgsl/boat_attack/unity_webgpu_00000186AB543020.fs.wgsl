type Arr = array<vec4<f32>, 2u>;

struct UnityPerDraw {
  unity_ObjectToWorld : mat4x4<f32>,
  unity_WorldToObject : mat4x4<f32>,
  unity_LODFade : vec4<f32>,
  unity_WorldTransformParams : vec4<f32>,
  unity_RenderingLayer : vec4<f32>,
  unity_LightData : vec4<f32>,
  unity_LightIndices : Arr,
  unity_ProbesOcclusion : vec4<f32>,
  unity_SpecCube0_HDR : vec4<f32>,
  unity_SpecCube1_HDR : vec4<f32>,
  unity_SpecCube0_BoxMax : vec4<f32>,
  unity_SpecCube0_BoxMin : vec4<f32>,
  unity_SpecCube0_ProbePosition : vec4<f32>,
  unity_SpecCube1_BoxMax : vec4<f32>,
  unity_SpecCube1_BoxMin : vec4<f32>,
  unity_SpecCube1_ProbePosition : vec4<f32>,
  unity_LightmapST : vec4<f32>,
  unity_DynamicLightmapST : vec4<f32>,
  unity_SHAr : vec4<f32>,
  unity_SHAg : vec4<f32>,
  unity_SHAb : vec4<f32>,
  unity_SHBr : vec4<f32>,
  unity_SHBg : vec4<f32>,
  unity_SHBb : vec4<f32>,
  unity_SHC : vec4<f32>,
  unity_RendererBounds_Min : vec4<f32>,
  unity_RendererBounds_Max : vec4<f32>,
  unity_MatrixPreviousM : mat4x4<f32>,
  unity_MatrixPreviousMI : mat4x4<f32>,
  unity_MotionVectorsParams : vec4<f32>,
  unity_SpriteColor : vec4<f32>,
  unity_SpriteProps : vec4<f32>,
}

struct PGlobals {
  x_ScaledScreenParams : vec4<f32>,
  x_GlobalMipBias : vec2<f32>,
  x_AlphaToMaskAvailable : f32,
  @size(4)
  padding : u32,
  x_MainLightPosition : vec4<f32>,
  x_MainLightColor : vec4<f32>,
  x_AmbientOcclusionParam : vec4<f32>,
  x_AdditionalLightsCount : vec4<f32>,
  x_RenderingLayerMaxInt : u32,
  x_RenderingLayerRcpMaxInt : f32,
  @size(8)
  padding_1 : u32,
  x_WorldSpaceCameraPos : vec3<f32>,
  @size(4)
  padding_2 : u32,
  x_ProjectionParams : vec4<f32>,
  unity_OrthoParams : vec4<f32>,
  x_ScaleBiasRt : vec4<f32>,
  unity_FogParams : vec4<f32>,
  unity_FogColor : vec4<f32>,
  unity_MatrixV : mat4x4<f32>,
}

struct UnityPerMaterial {
  Texture2D_B222E8F_TexelSize : vec4<f32>,
  Color_C30C7CA3 : vec4<f32>,
  Texture2D_D9BFD5F1_TexelSize : vec4<f32>,
}

type Arr_1 = array<mat4x4<f32>, 5u>;

struct MainLightShadows {
  x_MainLightWorldToShadow : Arr_1,
  x_CascadeShadowSplitSpheres0 : vec4<f32>,
  x_CascadeShadowSplitSpheres1 : vec4<f32>,
  x_CascadeShadowSplitSpheres2 : vec4<f32>,
  x_CascadeShadowSplitSpheres3 : vec4<f32>,
  x_CascadeShadowSplitSphereRadii : vec4<f32>,
  x_MainLightShadowOffset0 : vec4<f32>,
  x_MainLightShadowOffset1 : vec4<f32>,
  x_MainLightShadowParams : vec4<f32>,
  x_MainLightShadowmapSize : vec4<f32>,
}

type Arr_2 = array<vec4<f32>, 256u>;

type Arr_3 = array<vec4<f32>, 256u>;

type Arr_4 = array<vec4<f32>, 256u>;

type Arr_5 = array<vec4<f32>, 256u>;

type Arr_6 = array<vec4<f32>, 256u>;

struct strided_arr {
  @size(16)
  el : f32,
}

type Arr_7 = array<strided_arr, 256u>;

struct AdditionalLights {
  x_AdditionalLightsPosition : Arr_6,
  x_AdditionalLightsColor : Arr_6,
  x_AdditionalLightsAttenuation : Arr_6,
  x_AdditionalLightsSpotDir : Arr_6,
  x_AdditionalLightsOcclusionProbes : Arr_6,
  x_AdditionalLightsLayerMasks : Arr_7,
}

var<private> gl_FragCoord : vec4<f32>;

var<private> vs_INTERP1 : vec3<f32>;

var<private> vs_INTERP2 : vec4<f32>;

@group(1) @binding(2) var<uniform> x_60 : UnityPerDraw;

@group(0) @binding(3) var Texture2D_B222E8F : texture_2d<f32>;

@group(0) @binding(8) var samplerTexture2D_B222E8F : sampler;

var<private> vs_INTERP3 : vec4<f32>;

@group(1) @binding(0) var<uniform> x_137 : PGlobals;

@group(1) @binding(4) var<uniform> x_147 : UnityPerMaterial;

@group(0) @binding(4) var Texture2D_D9BFD5F1 : texture_2d<f32>;

@group(0) @binding(9) var samplerTexture2D_D9BFD5F1 : sampler;

var<private> vs_INTERP4 : vec4<f32>;

var<private> vs_INTERP0 : vec3<f32>;

@group(1) @binding(3) var<uniform> x_248 : MainLightShadows;

@group(0) @binding(2) var x_MainLightShadowmapTexture : texture_depth_2d;

@group(0) @binding(7) var sampler_MainLightShadowmapTexture : sampler_comparison;

@group(0) @binding(1) var x_ScreenSpaceOcclusionTexture : texture_2d<f32>;

@group(0) @binding(6) var sampler_ScreenSpaceOcclusionTexture : sampler;

var<private> vs_INTERP9 : vec4<f32>;

@group(0) @binding(0) var unity_SpecCube0 : texture_cube<f32>;

@group(0) @binding(5) var samplerunity_SpecCube0 : sampler;

@group(1) @binding(1) var<uniform> x_3591 : AdditionalLights;

var<private> SV_Target0 : vec4<f32>;

var<private> SV_Target1 : vec4<f32>;

fn main_1() {
  var hlslcc_FragCoord : vec4<f32>;
  var u_xlat0 : vec3<f32>;
  var u_xlatb21 : vec2<bool>;
  var u_xlat21 : vec3<f32>;
  var u_xlat1 : vec3<f32>;
  var u_xlat2 : vec3<f32>;
  var u_xlat3 : vec4<f32>;
  var u_xlat4 : vec4<f32>;
  var u_xlat5 : vec3<f32>;
  var u_xlat6 : vec4<f32>;
  var u_xlat7 : vec4<f32>;
  var u_xlat27 : vec3<f32>;
  var u_xlatb0 : bool;
  var u_xlatb64 : bool;
  var txVec0 : vec3<f32>;
  var txVec1 : vec3<f32>;
  var txVec2 : vec3<f32>;
  var txVec3 : vec3<f32>;
  var u_xlat64 : f32;
  var u_xlatb65 : bool;
  var u_xlat45 : vec2<f32>;
  var u_xlat8 : vec4<f32>;
  var u_xlat50 : vec2<f32>;
  var u_xlat9 : vec4<f32>;
  var u_xlat10 : vec4<f32>;
  var u_xlat11 : vec4<f32>;
  var u_xlat12 : vec4<f32>;
  var u_xlat13 : vec4<f32>;
  var u_xlat14 : vec4<f32>;
  var u_xlat65 : f32;
  var txVec4 : vec3<f32>;
  var txVec5 : vec3<f32>;
  var u_xlat24 : f32;
  var txVec6 : vec3<f32>;
  var txVec7 : vec3<f32>;
  var txVec8 : vec3<f32>;
  var txVec9 : vec3<f32>;
  var txVec10 : vec3<f32>;
  var txVec11 : vec3<f32>;
  var txVec12 : vec3<f32>;
  var u_xlat28 : vec3<f32>;
  var u_xlat15 : vec4<f32>;
  var u_xlat16 : vec4<f32>;
  var u_xlat29 : vec3<f32>;
  var u_xlat56 : vec2<f32>;
  var u_xlat51 : vec2<f32>;
  var u_xlat17 : vec4<f32>;
  var u_xlat18 : vec4<f32>;
  var u_xlat19 : vec4<f32>;
  var txVec13 : vec3<f32>;
  var txVec14 : vec3<f32>;
  var u_xlat68 : f32;
  var txVec15 : vec3<f32>;
  var txVec16 : vec3<f32>;
  var txVec17 : vec3<f32>;
  var txVec18 : vec3<f32>;
  var txVec19 : vec3<f32>;
  var txVec20 : vec3<f32>;
  var txVec21 : vec3<f32>;
  var txVec22 : vec3<f32>;
  var txVec23 : vec3<f32>;
  var txVec24 : vec3<f32>;
  var txVec25 : vec3<f32>;
  var txVec26 : vec3<f32>;
  var txVec27 : vec3<f32>;
  var txVec28 : vec3<f32>;
  var txVec29 : vec3<f32>;
  var u_xlatb23 : bool;
  var u_xlatb44 : bool;
  var u_xlat22 : vec3<f32>;
  var x_1595 : f32;
  var u_xlat23 : f32;
  var u_xlat44 : f32;
  var u_xlat42 : f32;
  var x_1717 : vec3<f32>;
  var u_xlat66 : f32;
  var u_xlat67 : f32;
  var u_xlat48 : f32;
  var txVec30 : vec3<f32>;
  var txVec31 : vec3<f32>;
  var txVec32 : vec3<f32>;
  var txVec33 : vec3<f32>;
  var u_xlatb69 : bool;
  var u_xlat49 : vec2<f32>;
  var u_xlat69 : f32;
  var txVec34 : vec3<f32>;
  var txVec35 : vec3<f32>;
  var txVec36 : vec3<f32>;
  var txVec37 : vec3<f32>;
  var txVec38 : vec3<f32>;
  var txVec39 : vec3<f32>;
  var txVec40 : vec3<f32>;
  var txVec41 : vec3<f32>;
  var txVec42 : vec3<f32>;
  var u_xlat30 : vec3<f32>;
  var u_xlat57 : vec2<f32>;
  var u_xlat52 : vec2<f32>;
  var u_xlat20 : vec4<f32>;
  var txVec43 : vec3<f32>;
  var txVec44 : vec3<f32>;
  var txVec45 : vec3<f32>;
  var txVec46 : vec3<f32>;
  var txVec47 : vec3<f32>;
  var txVec48 : vec3<f32>;
  var txVec49 : vec3<f32>;
  var txVec50 : vec3<f32>;
  var txVec51 : vec3<f32>;
  var txVec52 : vec3<f32>;
  var txVec53 : vec3<f32>;
  var txVec54 : vec3<f32>;
  var txVec55 : vec3<f32>;
  var txVec56 : vec3<f32>;
  var txVec57 : vec3<f32>;
  var txVec58 : vec3<f32>;
  var txVec59 : vec3<f32>;
  var u_xlatb2 : bool;
  var x_3183 : f32;
  var u_xlatu0 : u32;
  var u_xlatu_loop_1 : u32;
  var u_xlatu65 : u32;
  var u_xlati66 : i32;
  var indexable : array<vec4<u32>, 4u>;
  var u_xlati65 : i32;
  var u_xlat63 : f32;
  var u_xlat_precise_vec4 : vec4<f32>;
  var u_xlat_precise_ivec4 : vec4<i32>;
  var u_xlat_precise_bvec4 : vec4<bool>;
  var u_xlat_precise_uvec4 : vec4<u32>;
  let x_13 : vec4<f32> = gl_FragCoord;
  let x_14 : vec3<f32> = vec3<f32>(x_13.x, x_13.y, x_13.z);
  let x_20 : f32 = gl_FragCoord.w;
  hlslcc_FragCoord = vec4<f32>(x_14.x, x_14.y, x_14.z, (1.0f / x_20));
  let x_30 : vec3<f32> = vs_INTERP1;
  let x_31 : vec3<f32> = vs_INTERP1;
  u_xlat0.x = dot(x_30, x_31);
  let x_37 : f32 = u_xlat0.x;
  u_xlat0.x = sqrt(x_37);
  let x_41 : f32 = u_xlat0.x;
  u_xlat0.x = (1.0f / x_41);
  let x_51 : f32 = vs_INTERP2.w;
  u_xlatb21.x = (0.0f < x_51);
  let x_65 : f32 = x_60.unity_WorldTransformParams.w;
  u_xlatb21.y = (x_65 >= 0.0f);
  let x_71 : bool = u_xlatb21.x;
  u_xlat21.x = select(-1.0f, 1.0f, x_71);
  let x_76 : bool = u_xlatb21.y;
  u_xlat21.y = select(-1.0f, 1.0f, x_76);
  let x_80 : f32 = u_xlat21.y;
  let x_82 : f32 = u_xlat21.x;
  u_xlat21.x = (x_80 * x_82);
  let x_86 : vec3<f32> = vs_INTERP1;
  let x_88 : vec4<f32> = vs_INTERP2;
  u_xlat1 = (vec3<f32>(x_86.z, x_86.x, x_86.y) * vec3<f32>(x_88.y, x_88.z, x_88.x));
  let x_91 : vec3<f32> = vs_INTERP1;
  let x_93 : vec4<f32> = vs_INTERP2;
  let x_96 : vec3<f32> = u_xlat1;
  u_xlat1 = ((vec3<f32>(x_91.y, x_91.z, x_91.x) * vec3<f32>(x_93.z, x_93.x, x_93.y)) + -(x_96));
  let x_99 : vec3<f32> = u_xlat21;
  let x_101 : vec3<f32> = u_xlat1;
  u_xlat21 = (vec3<f32>(x_99.x, x_99.x, x_99.x) * x_101);
  let x_103 : vec3<f32> = u_xlat0;
  let x_105 : vec3<f32> = vs_INTERP1;
  u_xlat1 = (vec3<f32>(x_103.x, x_103.x, x_103.x) * x_105);
  let x_108 : vec3<f32> = u_xlat0;
  let x_110 : vec4<f32> = vs_INTERP2;
  u_xlat2 = (vec3<f32>(x_108.x, x_108.x, x_108.x) * vec3<f32>(x_110.x, x_110.y, x_110.z));
  let x_114 : vec3<f32> = u_xlat21;
  let x_115 : vec3<f32> = u_xlat0;
  let x_117 : vec3<f32> = (x_114 * vec3<f32>(x_115.x, x_115.x, x_115.x));
  let x_118 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_117.x, x_117.y, x_117.z, x_118.w);
  let x_133 : vec4<f32> = vs_INTERP3;
  let x_140 : f32 = x_137.x_GlobalMipBias.x;
  let x_141 : vec4<f32> = textureSampleBias(Texture2D_B222E8F, samplerTexture2D_B222E8F, vec2<f32>(x_133.x, x_133.y), x_140);
  u_xlat4 = x_141;
  let x_143 : vec4<f32> = u_xlat4;
  let x_150 : vec4<f32> = x_147.Color_C30C7CA3;
  u_xlat5 = (vec3<f32>(x_143.x, x_143.y, x_143.z) * vec3<f32>(x_150.x, x_150.y, x_150.z));
  let x_159 : vec4<f32> = vs_INTERP3;
  let x_162 : f32 = x_137.x_GlobalMipBias.x;
  let x_163 : vec4<f32> = textureSampleBias(Texture2D_D9BFD5F1, samplerTexture2D_D9BFD5F1, vec2<f32>(x_159.x, x_159.y), x_162);
  u_xlat6 = vec4<f32>(x_163.w, x_163.x, x_163.y, x_163.z);
  let x_166 : vec4<f32> = u_xlat6;
  u_xlat7 = ((vec4<f32>(x_166.y, x_166.z, x_166.w, x_166.x) * vec4<f32>(2.0f, 2.0f, 2.0f, 2.0f)) + vec4<f32>(-1.0f, -1.0f, -1.0f, -1.0f));
  let x_173 : vec4<f32> = u_xlat7;
  let x_174 : vec4<f32> = u_xlat7;
  u_xlat0.x = dot(x_173, x_174);
  let x_178 : f32 = u_xlat0.x;
  u_xlat0.x = inverseSqrt(x_178);
  let x_182 : vec3<f32> = u_xlat0;
  let x_184 : vec4<f32> = u_xlat7;
  u_xlat27 = (vec3<f32>(x_182.x, x_182.x, x_182.x) * vec3<f32>(x_184.x, x_184.y, x_184.z));
  let x_189 : f32 = vs_INTERP4.y;
  u_xlat0.x = (x_189 * 200.0f);
  let x_194 : f32 = u_xlat0.x;
  u_xlat0.x = min(x_194, 1.0f);
  let x_197 : vec3<f32> = u_xlat0;
  let x_199 : vec4<f32> = u_xlat4;
  let x_201 : vec3<f32> = (vec3<f32>(x_197.x, x_197.x, x_197.x) * vec3<f32>(x_199.x, x_199.y, x_199.z));
  let x_202 : vec4<f32> = u_xlat4;
  u_xlat4 = vec4<f32>(x_201.x, x_201.y, x_201.z, x_202.w);
  let x_204 : vec4<f32> = u_xlat3;
  let x_206 : vec3<f32> = u_xlat27;
  let x_208 : vec3<f32> = (vec3<f32>(x_204.x, x_204.y, x_204.z) * vec3<f32>(x_206.y, x_206.y, x_206.y));
  let x_209 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_208.x, x_208.y, x_208.z, x_209.w);
  let x_211 : vec3<f32> = u_xlat27;
  let x_213 : vec3<f32> = u_xlat2;
  let x_215 : vec4<f32> = u_xlat3;
  u_xlat2 = ((vec3<f32>(x_211.x, x_211.x, x_211.x) * x_213) + vec3<f32>(x_215.x, x_215.y, x_215.z));
  let x_218 : vec3<f32> = u_xlat27;
  let x_220 : vec3<f32> = u_xlat1;
  let x_222 : vec3<f32> = u_xlat2;
  u_xlat1 = ((vec3<f32>(x_218.z, x_218.z, x_218.z) * x_220) + x_222);
  let x_224 : vec3<f32> = u_xlat1;
  let x_225 : vec3<f32> = u_xlat1;
  u_xlat0.x = dot(x_224, x_225);
  let x_229 : f32 = u_xlat0.x;
  u_xlat0.x = max(x_229, 1.17549435e-37f);
  let x_234 : f32 = u_xlat0.x;
  u_xlat0.x = inverseSqrt(x_234);
  let x_237 : vec3<f32> = u_xlat0;
  let x_239 : vec3<f32> = u_xlat1;
  u_xlat1 = (vec3<f32>(x_237.x, x_237.x, x_237.x) * x_239);
  let x_242 : vec3<f32> = vs_INTERP0;
  let x_251 : vec4<f32> = x_248.x_MainLightWorldToShadow[0i][1i];
  u_xlat2 = (vec3<f32>(x_242.y, x_242.y, x_242.y) * vec3<f32>(x_251.x, x_251.y, x_251.z));
  let x_255 : vec4<f32> = x_248.x_MainLightWorldToShadow[0i][0i];
  let x_257 : vec3<f32> = vs_INTERP0;
  let x_260 : vec3<f32> = u_xlat2;
  u_xlat2 = ((vec3<f32>(x_255.x, x_255.y, x_255.z) * vec3<f32>(x_257.x, x_257.x, x_257.x)) + x_260);
  let x_264 : vec4<f32> = x_248.x_MainLightWorldToShadow[0i][2i];
  let x_266 : vec3<f32> = vs_INTERP0;
  let x_269 : vec3<f32> = u_xlat2;
  u_xlat2 = ((vec3<f32>(x_264.x, x_264.y, x_264.z) * vec3<f32>(x_266.z, x_266.z, x_266.z)) + x_269);
  let x_271 : vec3<f32> = u_xlat2;
  let x_273 : vec4<f32> = x_248.x_MainLightWorldToShadow[0i][3i];
  u_xlat2 = (x_271 + vec3<f32>(x_273.x, x_273.y, x_273.z));
  let x_279 : f32 = x_248.x_MainLightShadowParams.y;
  u_xlatb0 = (0.0f < x_279);
  let x_281 : bool = u_xlatb0;
  if (x_281) {
    let x_286 : f32 = x_248.x_MainLightShadowParams.y;
    u_xlatb64 = (x_286 == 1.0f);
    let x_288 : bool = u_xlatb64;
    if (x_288) {
      let x_291 : vec3<f32> = u_xlat2;
      let x_295 : vec4<f32> = x_248.x_MainLightShadowOffset0;
      u_xlat3 = (vec4<f32>(x_291.x, x_291.y, x_291.x, x_291.y) + x_295);
      let x_298 : vec4<f32> = u_xlat3;
      let x_299 : vec2<f32> = vec2<f32>(x_298.x, x_298.y);
      let x_301 : f32 = u_xlat2.z;
      txVec0 = vec3<f32>(x_299.x, x_299.y, x_301);
      let x_313 : vec3<f32> = txVec0;
      let x_315 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_313.xy, x_313.z);
      u_xlat7.x = x_315;
      let x_318 : vec4<f32> = u_xlat3;
      let x_319 : vec2<f32> = vec2<f32>(x_318.z, x_318.w);
      let x_321 : f32 = u_xlat2.z;
      txVec1 = vec3<f32>(x_319.x, x_319.y, x_321);
      let x_328 : vec3<f32> = txVec1;
      let x_330 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_328.xy, x_328.z);
      u_xlat7.y = x_330;
      let x_332 : vec3<f32> = u_xlat2;
      let x_336 : vec4<f32> = x_248.x_MainLightShadowOffset1;
      u_xlat3 = (vec4<f32>(x_332.x, x_332.y, x_332.x, x_332.y) + x_336);
      let x_339 : vec4<f32> = u_xlat3;
      let x_340 : vec2<f32> = vec2<f32>(x_339.x, x_339.y);
      let x_342 : f32 = u_xlat2.z;
      txVec2 = vec3<f32>(x_340.x, x_340.y, x_342);
      let x_349 : vec3<f32> = txVec2;
      let x_351 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_349.xy, x_349.z);
      u_xlat7.z = x_351;
      let x_354 : vec4<f32> = u_xlat3;
      let x_355 : vec2<f32> = vec2<f32>(x_354.z, x_354.w);
      let x_357 : f32 = u_xlat2.z;
      txVec3 = vec3<f32>(x_355.x, x_355.y, x_357);
      let x_364 : vec3<f32> = txVec3;
      let x_366 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_364.xy, x_364.z);
      u_xlat7.w = x_366;
      let x_369 : vec4<f32> = u_xlat7;
      u_xlat64 = dot(x_369, vec4<f32>(0.25f, 0.25f, 0.25f, 0.25f));
    } else {
      let x_376 : f32 = x_248.x_MainLightShadowParams.y;
      u_xlatb65 = (x_376 == 2.0f);
      let x_378 : bool = u_xlatb65;
      if (x_378) {
        let x_381 : vec3<f32> = u_xlat2;
        let x_385 : vec4<f32> = x_248.x_MainLightShadowmapSize;
        let x_390 : vec2<f32> = ((vec2<f32>(x_381.x, x_381.y) * vec2<f32>(x_385.z, x_385.w)) + vec2<f32>(0.5f, 0.5f));
        let x_391 : vec4<f32> = u_xlat3;
        u_xlat3 = vec4<f32>(x_390.x, x_390.y, x_391.z, x_391.w);
        let x_393 : vec4<f32> = u_xlat3;
        let x_395 : vec2<f32> = floor(vec2<f32>(x_393.x, x_393.y));
        let x_396 : vec4<f32> = u_xlat3;
        u_xlat3 = vec4<f32>(x_395.x, x_395.y, x_396.z, x_396.w);
        let x_400 : vec3<f32> = u_xlat2;
        let x_403 : vec4<f32> = x_248.x_MainLightShadowmapSize;
        let x_406 : vec4<f32> = u_xlat3;
        u_xlat45 = ((vec2<f32>(x_400.x, x_400.y) * vec2<f32>(x_403.z, x_403.w)) + -(vec2<f32>(x_406.x, x_406.y)));
        let x_410 : vec2<f32> = u_xlat45;
        u_xlat7 = (vec4<f32>(x_410.x, x_410.x, x_410.y, x_410.y) + vec4<f32>(0.5f, 1.0f, 0.5f, 1.0f));
        let x_415 : vec4<f32> = u_xlat7;
        let x_417 : vec4<f32> = u_xlat7;
        u_xlat8 = (vec4<f32>(x_415.x, x_415.x, x_415.z, x_415.z) * vec4<f32>(x_417.x, x_417.x, x_417.z, x_417.z));
        let x_420 : vec4<f32> = u_xlat8;
        let x_424 : vec2<f32> = (vec2<f32>(x_420.y, x_420.w) * vec2<f32>(0.079999998f, 0.079999998f));
        let x_425 : vec4<f32> = u_xlat7;
        u_xlat7 = vec4<f32>(x_424.x, x_425.y, x_424.y, x_425.w);
        let x_427 : vec4<f32> = u_xlat8;
        let x_430 : vec2<f32> = u_xlat45;
        let x_432 : vec2<f32> = ((vec2<f32>(x_427.x, x_427.z) * vec2<f32>(0.5f, 0.5f)) + -(x_430));
        let x_433 : vec4<f32> = u_xlat8;
        u_xlat8 = vec4<f32>(x_432.x, x_432.y, x_433.z, x_433.w);
        let x_436 : vec2<f32> = u_xlat45;
        u_xlat50 = (-(x_436) + vec2<f32>(1.0f, 1.0f));
        let x_441 : vec2<f32> = u_xlat45;
        let x_443 : vec2<f32> = min(x_441, vec2<f32>(0.0f, 0.0f));
        let x_444 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_443.x, x_443.y, x_444.z, x_444.w);
        let x_446 : vec4<f32> = u_xlat9;
        let x_449 : vec4<f32> = u_xlat9;
        let x_452 : vec2<f32> = u_xlat50;
        let x_453 : vec2<f32> = ((-(vec2<f32>(x_446.x, x_446.y)) * vec2<f32>(x_449.x, x_449.y)) + x_452);
        let x_454 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_453.x, x_453.y, x_454.z, x_454.w);
        let x_456 : vec2<f32> = u_xlat45;
        u_xlat45 = max(x_456, vec2<f32>(0.0f, 0.0f));
        let x_458 : vec2<f32> = u_xlat45;
        let x_460 : vec2<f32> = u_xlat45;
        let x_462 : vec4<f32> = u_xlat7;
        u_xlat45 = ((-(x_458) * x_460) + vec2<f32>(x_462.y, x_462.w));
        let x_465 : vec4<f32> = u_xlat9;
        let x_467 : vec2<f32> = (vec2<f32>(x_465.x, x_465.y) + vec2<f32>(1.0f, 1.0f));
        let x_468 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_467.x, x_467.y, x_468.z, x_468.w);
        let x_470 : vec2<f32> = u_xlat45;
        u_xlat45 = (x_470 + vec2<f32>(1.0f, 1.0f));
        let x_473 : vec4<f32> = u_xlat8;
        let x_477 : vec2<f32> = (vec2<f32>(x_473.x, x_473.y) * vec2<f32>(0.159999996f, 0.159999996f));
        let x_478 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_477.x, x_477.y, x_478.z, x_478.w);
        let x_480 : vec2<f32> = u_xlat50;
        let x_481 : vec2<f32> = (x_480 * vec2<f32>(0.159999996f, 0.159999996f));
        let x_482 : vec4<f32> = u_xlat8;
        u_xlat8 = vec4<f32>(x_481.x, x_481.y, x_482.z, x_482.w);
        let x_484 : vec4<f32> = u_xlat9;
        let x_486 : vec2<f32> = (vec2<f32>(x_484.x, x_484.y) * vec2<f32>(0.159999996f, 0.159999996f));
        let x_487 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_486.x, x_486.y, x_487.z, x_487.w);
        let x_490 : vec2<f32> = u_xlat45;
        let x_491 : vec2<f32> = (x_490 * vec2<f32>(0.159999996f, 0.159999996f));
        let x_492 : vec4<f32> = u_xlat11;
        u_xlat11 = vec4<f32>(x_491.x, x_491.y, x_492.z, x_492.w);
        let x_494 : vec4<f32> = u_xlat7;
        u_xlat45 = (vec2<f32>(x_494.y, x_494.w) * vec2<f32>(0.159999996f, 0.159999996f));
        let x_498 : f32 = u_xlat9.x;
        u_xlat10.z = x_498;
        let x_501 : f32 = u_xlat45.x;
        u_xlat10.w = x_501;
        let x_504 : f32 = u_xlat11.x;
        u_xlat8.z = x_504;
        let x_507 : f32 = u_xlat7.x;
        u_xlat8.w = x_507;
        let x_510 : vec4<f32> = u_xlat8;
        let x_512 : vec4<f32> = u_xlat10;
        u_xlat12 = (vec4<f32>(x_510.z, x_510.w, x_510.x, x_510.z) + vec4<f32>(x_512.z, x_512.w, x_512.x, x_512.z));
        let x_516 : f32 = u_xlat10.y;
        u_xlat9.z = x_516;
        let x_519 : f32 = u_xlat45.y;
        u_xlat9.w = x_519;
        let x_522 : f32 = u_xlat8.y;
        u_xlat11.z = x_522;
        let x_525 : f32 = u_xlat7.z;
        u_xlat11.w = x_525;
        let x_527 : vec4<f32> = u_xlat9;
        let x_529 : vec4<f32> = u_xlat11;
        let x_531 : vec3<f32> = (vec3<f32>(x_527.z, x_527.y, x_527.w) + vec3<f32>(x_529.z, x_529.y, x_529.w));
        let x_532 : vec4<f32> = u_xlat7;
        u_xlat7 = vec4<f32>(x_531.x, x_531.y, x_531.z, x_532.w);
        let x_534 : vec4<f32> = u_xlat8;
        let x_536 : vec4<f32> = u_xlat12;
        let x_538 : vec3<f32> = (vec3<f32>(x_534.x, x_534.z, x_534.w) / vec3<f32>(x_536.z, x_536.w, x_536.y));
        let x_539 : vec4<f32> = u_xlat8;
        u_xlat8 = vec4<f32>(x_538.x, x_538.y, x_538.z, x_539.w);
        let x_541 : vec4<f32> = u_xlat8;
        let x_547 : vec3<f32> = (vec3<f32>(x_541.x, x_541.y, x_541.z) + vec3<f32>(-2.5f, -0.5f, 1.5f));
        let x_548 : vec4<f32> = u_xlat8;
        u_xlat8 = vec4<f32>(x_547.x, x_547.y, x_547.z, x_548.w);
        let x_550 : vec4<f32> = u_xlat11;
        let x_552 : vec4<f32> = u_xlat7;
        let x_554 : vec3<f32> = (vec3<f32>(x_550.z, x_550.y, x_550.w) / vec3<f32>(x_552.x, x_552.y, x_552.z));
        let x_555 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_554.x, x_554.y, x_554.z, x_555.w);
        let x_557 : vec4<f32> = u_xlat9;
        let x_559 : vec3<f32> = (vec3<f32>(x_557.x, x_557.y, x_557.z) + vec3<f32>(-2.5f, -0.5f, 1.5f));
        let x_560 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_559.x, x_559.y, x_559.z, x_560.w);
        let x_562 : vec4<f32> = u_xlat8;
        let x_565 : vec4<f32> = x_248.x_MainLightShadowmapSize;
        let x_567 : vec3<f32> = (vec3<f32>(x_562.y, x_562.x, x_562.z) * vec3<f32>(x_565.x, x_565.x, x_565.x));
        let x_568 : vec4<f32> = u_xlat8;
        u_xlat8 = vec4<f32>(x_567.x, x_567.y, x_567.z, x_568.w);
        let x_570 : vec4<f32> = u_xlat9;
        let x_573 : vec4<f32> = x_248.x_MainLightShadowmapSize;
        let x_575 : vec3<f32> = (vec3<f32>(x_570.x, x_570.y, x_570.z) * vec3<f32>(x_573.y, x_573.y, x_573.y));
        let x_576 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_575.x, x_575.y, x_575.z, x_576.w);
        let x_579 : f32 = u_xlat9.x;
        u_xlat8.w = x_579;
        let x_581 : vec4<f32> = u_xlat3;
        let x_584 : vec4<f32> = x_248.x_MainLightShadowmapSize;
        let x_587 : vec4<f32> = u_xlat8;
        u_xlat10 = ((vec4<f32>(x_581.x, x_581.y, x_581.x, x_581.y) * vec4<f32>(x_584.x, x_584.y, x_584.x, x_584.y)) + vec4<f32>(x_587.y, x_587.w, x_587.x, x_587.w));
        let x_590 : vec4<f32> = u_xlat3;
        let x_593 : vec4<f32> = x_248.x_MainLightShadowmapSize;
        let x_596 : vec4<f32> = u_xlat8;
        u_xlat45 = ((vec2<f32>(x_590.x, x_590.y) * vec2<f32>(x_593.x, x_593.y)) + vec2<f32>(x_596.z, x_596.w));
        let x_600 : f32 = u_xlat8.y;
        u_xlat9.w = x_600;
        let x_602 : vec4<f32> = u_xlat9;
        let x_603 : vec2<f32> = vec2<f32>(x_602.y, x_602.z);
        let x_604 : vec4<f32> = u_xlat8;
        u_xlat8 = vec4<f32>(x_604.x, x_603.x, x_604.z, x_603.y);
        let x_606 : vec4<f32> = u_xlat3;
        let x_609 : vec4<f32> = x_248.x_MainLightShadowmapSize;
        let x_612 : vec4<f32> = u_xlat8;
        u_xlat11 = ((vec4<f32>(x_606.x, x_606.y, x_606.x, x_606.y) * vec4<f32>(x_609.x, x_609.y, x_609.x, x_609.y)) + vec4<f32>(x_612.x, x_612.y, x_612.z, x_612.y));
        let x_615 : vec4<f32> = u_xlat3;
        let x_618 : vec4<f32> = x_248.x_MainLightShadowmapSize;
        let x_621 : vec4<f32> = u_xlat9;
        u_xlat9 = ((vec4<f32>(x_615.x, x_615.y, x_615.x, x_615.y) * vec4<f32>(x_618.x, x_618.y, x_618.x, x_618.y)) + vec4<f32>(x_621.w, x_621.y, x_621.w, x_621.z));
        let x_624 : vec4<f32> = u_xlat3;
        let x_627 : vec4<f32> = x_248.x_MainLightShadowmapSize;
        let x_630 : vec4<f32> = u_xlat8;
        u_xlat8 = ((vec4<f32>(x_624.x, x_624.y, x_624.x, x_624.y) * vec4<f32>(x_627.x, x_627.y, x_627.x, x_627.y)) + vec4<f32>(x_630.x, x_630.w, x_630.z, x_630.w));
        let x_634 : vec4<f32> = u_xlat7;
        let x_636 : vec4<f32> = u_xlat12;
        u_xlat13 = (vec4<f32>(x_634.x, x_634.x, x_634.x, x_634.y) * vec4<f32>(x_636.z, x_636.w, x_636.y, x_636.z));
        let x_640 : vec4<f32> = u_xlat7;
        let x_642 : vec4<f32> = u_xlat12;
        u_xlat14 = (vec4<f32>(x_640.y, x_640.y, x_640.z, x_640.z) * x_642);
        let x_646 : f32 = u_xlat7.z;
        let x_648 : f32 = u_xlat12.y;
        u_xlat65 = (x_646 * x_648);
        let x_651 : vec4<f32> = u_xlat10;
        let x_652 : vec2<f32> = vec2<f32>(x_651.x, x_651.y);
        let x_654 : f32 = u_xlat2.z;
        txVec4 = vec3<f32>(x_652.x, x_652.y, x_654);
        let x_661 : vec3<f32> = txVec4;
        let x_663 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_661.xy, x_661.z);
        u_xlat3.x = x_663;
        let x_666 : vec4<f32> = u_xlat10;
        let x_667 : vec2<f32> = vec2<f32>(x_666.z, x_666.w);
        let x_669 : f32 = u_xlat2.z;
        txVec5 = vec3<f32>(x_667.x, x_667.y, x_669);
        let x_677 : vec3<f32> = txVec5;
        let x_679 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_677.xy, x_677.z);
        u_xlat24 = x_679;
        let x_680 : f32 = u_xlat24;
        let x_682 : f32 = u_xlat13.y;
        u_xlat24 = (x_680 * x_682);
        let x_685 : f32 = u_xlat13.x;
        let x_687 : f32 = u_xlat3.x;
        let x_689 : f32 = u_xlat24;
        u_xlat3.x = ((x_685 * x_687) + x_689);
        let x_693 : vec2<f32> = u_xlat45;
        let x_695 : f32 = u_xlat2.z;
        txVec6 = vec3<f32>(x_693.x, x_693.y, x_695);
        let x_702 : vec3<f32> = txVec6;
        let x_704 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_702.xy, x_702.z);
        u_xlat24 = x_704;
        let x_706 : f32 = u_xlat13.z;
        let x_707 : f32 = u_xlat24;
        let x_710 : f32 = u_xlat3.x;
        u_xlat3.x = ((x_706 * x_707) + x_710);
        let x_714 : vec4<f32> = u_xlat9;
        let x_715 : vec2<f32> = vec2<f32>(x_714.x, x_714.y);
        let x_717 : f32 = u_xlat2.z;
        txVec7 = vec3<f32>(x_715.x, x_715.y, x_717);
        let x_724 : vec3<f32> = txVec7;
        let x_726 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_724.xy, x_724.z);
        u_xlat24 = x_726;
        let x_728 : f32 = u_xlat13.w;
        let x_729 : f32 = u_xlat24;
        let x_732 : f32 = u_xlat3.x;
        u_xlat3.x = ((x_728 * x_729) + x_732);
        let x_736 : vec4<f32> = u_xlat11;
        let x_737 : vec2<f32> = vec2<f32>(x_736.x, x_736.y);
        let x_739 : f32 = u_xlat2.z;
        txVec8 = vec3<f32>(x_737.x, x_737.y, x_739);
        let x_746 : vec3<f32> = txVec8;
        let x_748 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_746.xy, x_746.z);
        u_xlat24 = x_748;
        let x_750 : f32 = u_xlat14.x;
        let x_751 : f32 = u_xlat24;
        let x_754 : f32 = u_xlat3.x;
        u_xlat3.x = ((x_750 * x_751) + x_754);
        let x_758 : vec4<f32> = u_xlat11;
        let x_759 : vec2<f32> = vec2<f32>(x_758.z, x_758.w);
        let x_761 : f32 = u_xlat2.z;
        txVec9 = vec3<f32>(x_759.x, x_759.y, x_761);
        let x_768 : vec3<f32> = txVec9;
        let x_770 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_768.xy, x_768.z);
        u_xlat24 = x_770;
        let x_772 : f32 = u_xlat14.y;
        let x_773 : f32 = u_xlat24;
        let x_776 : f32 = u_xlat3.x;
        u_xlat3.x = ((x_772 * x_773) + x_776);
        let x_780 : vec4<f32> = u_xlat9;
        let x_781 : vec2<f32> = vec2<f32>(x_780.z, x_780.w);
        let x_783 : f32 = u_xlat2.z;
        txVec10 = vec3<f32>(x_781.x, x_781.y, x_783);
        let x_790 : vec3<f32> = txVec10;
        let x_792 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_790.xy, x_790.z);
        u_xlat24 = x_792;
        let x_794 : f32 = u_xlat14.z;
        let x_795 : f32 = u_xlat24;
        let x_798 : f32 = u_xlat3.x;
        u_xlat3.x = ((x_794 * x_795) + x_798);
        let x_802 : vec4<f32> = u_xlat8;
        let x_803 : vec2<f32> = vec2<f32>(x_802.x, x_802.y);
        let x_805 : f32 = u_xlat2.z;
        txVec11 = vec3<f32>(x_803.x, x_803.y, x_805);
        let x_812 : vec3<f32> = txVec11;
        let x_814 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_812.xy, x_812.z);
        u_xlat24 = x_814;
        let x_816 : f32 = u_xlat14.w;
        let x_817 : f32 = u_xlat24;
        let x_820 : f32 = u_xlat3.x;
        u_xlat3.x = ((x_816 * x_817) + x_820);
        let x_824 : vec4<f32> = u_xlat8;
        let x_825 : vec2<f32> = vec2<f32>(x_824.z, x_824.w);
        let x_827 : f32 = u_xlat2.z;
        txVec12 = vec3<f32>(x_825.x, x_825.y, x_827);
        let x_834 : vec3<f32> = txVec12;
        let x_836 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_834.xy, x_834.z);
        u_xlat24 = x_836;
        let x_837 : f32 = u_xlat65;
        let x_838 : f32 = u_xlat24;
        let x_841 : f32 = u_xlat3.x;
        u_xlat64 = ((x_837 * x_838) + x_841);
      } else {
        let x_844 : vec3<f32> = u_xlat2;
        let x_847 : vec4<f32> = x_248.x_MainLightShadowmapSize;
        let x_850 : vec2<f32> = ((vec2<f32>(x_844.x, x_844.y) * vec2<f32>(x_847.z, x_847.w)) + vec2<f32>(0.5f, 0.5f));
        let x_851 : vec4<f32> = u_xlat3;
        u_xlat3 = vec4<f32>(x_850.x, x_850.y, x_851.z, x_851.w);
        let x_853 : vec4<f32> = u_xlat3;
        let x_855 : vec2<f32> = floor(vec2<f32>(x_853.x, x_853.y));
        let x_856 : vec4<f32> = u_xlat3;
        u_xlat3 = vec4<f32>(x_855.x, x_855.y, x_856.z, x_856.w);
        let x_858 : vec3<f32> = u_xlat2;
        let x_861 : vec4<f32> = x_248.x_MainLightShadowmapSize;
        let x_864 : vec4<f32> = u_xlat3;
        u_xlat45 = ((vec2<f32>(x_858.x, x_858.y) * vec2<f32>(x_861.z, x_861.w)) + -(vec2<f32>(x_864.x, x_864.y)));
        let x_868 : vec2<f32> = u_xlat45;
        u_xlat7 = (vec4<f32>(x_868.x, x_868.x, x_868.y, x_868.y) + vec4<f32>(0.5f, 1.0f, 0.5f, 1.0f));
        let x_871 : vec4<f32> = u_xlat7;
        let x_873 : vec4<f32> = u_xlat7;
        u_xlat8 = (vec4<f32>(x_871.x, x_871.x, x_871.z, x_871.z) * vec4<f32>(x_873.x, x_873.x, x_873.z, x_873.z));
        let x_876 : vec4<f32> = u_xlat8;
        let x_880 : vec2<f32> = (vec2<f32>(x_876.y, x_876.w) * vec2<f32>(0.040816002f, 0.040816002f));
        let x_881 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_881.x, x_880.x, x_881.z, x_880.y);
        let x_883 : vec4<f32> = u_xlat8;
        let x_886 : vec2<f32> = u_xlat45;
        let x_888 : vec2<f32> = ((vec2<f32>(x_883.x, x_883.z) * vec2<f32>(0.5f, 0.5f)) + -(x_886));
        let x_889 : vec4<f32> = u_xlat7;
        u_xlat7 = vec4<f32>(x_888.x, x_889.y, x_888.y, x_889.w);
        let x_891 : vec2<f32> = u_xlat45;
        let x_893 : vec2<f32> = (-(x_891) + vec2<f32>(1.0f, 1.0f));
        let x_894 : vec4<f32> = u_xlat8;
        u_xlat8 = vec4<f32>(x_893.x, x_893.y, x_894.z, x_894.w);
        let x_896 : vec2<f32> = u_xlat45;
        u_xlat50 = min(x_896, vec2<f32>(0.0f, 0.0f));
        let x_898 : vec2<f32> = u_xlat50;
        let x_900 : vec2<f32> = u_xlat50;
        let x_902 : vec4<f32> = u_xlat8;
        let x_904 : vec2<f32> = ((-(x_898) * x_900) + vec2<f32>(x_902.x, x_902.y));
        let x_905 : vec4<f32> = u_xlat8;
        u_xlat8 = vec4<f32>(x_904.x, x_904.y, x_905.z, x_905.w);
        let x_907 : vec2<f32> = u_xlat45;
        u_xlat50 = max(x_907, vec2<f32>(0.0f, 0.0f));
        let x_910 : vec2<f32> = u_xlat50;
        let x_912 : vec2<f32> = u_xlat50;
        let x_914 : vec4<f32> = u_xlat7;
        let x_916 : vec2<f32> = ((-(x_910) * x_912) + vec2<f32>(x_914.y, x_914.w));
        let x_917 : vec3<f32> = u_xlat28;
        u_xlat28 = vec3<f32>(x_916.x, x_917.y, x_916.y);
        let x_919 : vec4<f32> = u_xlat8;
        let x_922 : vec2<f32> = (vec2<f32>(x_919.x, x_919.y) + vec2<f32>(2.0f, 2.0f));
        let x_923 : vec4<f32> = u_xlat8;
        u_xlat8 = vec4<f32>(x_922.x, x_922.y, x_923.z, x_923.w);
        let x_925 : vec3<f32> = u_xlat28;
        let x_927 : vec2<f32> = (vec2<f32>(x_925.x, x_925.z) + vec2<f32>(2.0f, 2.0f));
        let x_928 : vec4<f32> = u_xlat7;
        u_xlat7 = vec4<f32>(x_928.x, x_927.x, x_928.z, x_927.y);
        let x_931 : f32 = u_xlat7.y;
        u_xlat10.z = (x_931 * 0.081632003f);
        let x_935 : vec4<f32> = u_xlat7;
        let x_938 : vec3<f32> = (vec3<f32>(x_935.z, x_935.x, x_935.w) * vec3<f32>(0.081632003f, 0.081632003f, 0.081632003f));
        let x_939 : vec4<f32> = u_xlat11;
        u_xlat11 = vec4<f32>(x_938.x, x_938.y, x_938.z, x_939.w);
        let x_941 : vec4<f32> = u_xlat8;
        let x_944 : vec2<f32> = (vec2<f32>(x_941.x, x_941.y) * vec2<f32>(0.081632003f, 0.081632003f));
        let x_945 : vec4<f32> = u_xlat7;
        u_xlat7 = vec4<f32>(x_944.x, x_944.y, x_945.z, x_945.w);
        let x_948 : f32 = u_xlat11.y;
        u_xlat10.x = x_948;
        let x_950 : vec2<f32> = u_xlat45;
        let x_957 : vec2<f32> = ((vec2<f32>(x_950.x, x_950.x) * vec2<f32>(-0.081632003f, 0.081632003f)) + vec2<f32>(0.163264006f, 0.081632003f));
        let x_958 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_958.x, x_957.x, x_958.z, x_957.y);
        let x_960 : vec2<f32> = u_xlat45;
        let x_964 : vec2<f32> = ((vec2<f32>(x_960.x, x_960.x) * vec2<f32>(-0.081632003f, 0.081632003f)) + vec2<f32>(0.081632003f, 0.163264006f));
        let x_965 : vec4<f32> = u_xlat8;
        u_xlat8 = vec4<f32>(x_964.x, x_965.y, x_964.y, x_965.w);
        let x_968 : f32 = u_xlat7.x;
        u_xlat8.y = x_968;
        let x_971 : f32 = u_xlat9.y;
        u_xlat8.w = x_971;
        let x_973 : vec4<f32> = u_xlat8;
        let x_974 : vec4<f32> = u_xlat10;
        u_xlat10 = (x_973 + x_974);
        let x_976 : vec2<f32> = u_xlat45;
        let x_979 : vec2<f32> = ((vec2<f32>(x_976.y, x_976.y) * vec2<f32>(-0.081632003f, 0.081632003f)) + vec2<f32>(0.163264006f, 0.081632003f));
        let x_980 : vec4<f32> = u_xlat11;
        u_xlat11 = vec4<f32>(x_980.x, x_979.x, x_980.z, x_979.y);
        let x_982 : vec2<f32> = u_xlat45;
        let x_985 : vec2<f32> = ((vec2<f32>(x_982.y, x_982.y) * vec2<f32>(-0.081632003f, 0.081632003f)) + vec2<f32>(0.081632003f, 0.163264006f));
        let x_986 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_985.x, x_986.y, x_985.y, x_986.w);
        let x_989 : f32 = u_xlat7.y;
        u_xlat9.y = x_989;
        let x_991 : vec4<f32> = u_xlat9;
        let x_992 : vec4<f32> = u_xlat11;
        u_xlat7 = (x_991 + x_992);
        let x_994 : vec4<f32> = u_xlat8;
        let x_995 : vec4<f32> = u_xlat10;
        u_xlat8 = (x_994 / x_995);
        let x_997 : vec4<f32> = u_xlat8;
        u_xlat8 = (x_997 + vec4<f32>(-3.5f, -1.5f, 0.5f, 2.5f));
        let x_1003 : vec4<f32> = u_xlat9;
        let x_1004 : vec4<f32> = u_xlat7;
        u_xlat9 = (x_1003 / x_1004);
        let x_1006 : vec4<f32> = u_xlat9;
        u_xlat9 = (x_1006 + vec4<f32>(-3.5f, -1.5f, 0.5f, 2.5f));
        let x_1008 : vec4<f32> = u_xlat8;
        let x_1011 : vec4<f32> = x_248.x_MainLightShadowmapSize;
        u_xlat8 = (vec4<f32>(x_1008.w, x_1008.x, x_1008.y, x_1008.z) * vec4<f32>(x_1011.x, x_1011.x, x_1011.x, x_1011.x));
        let x_1014 : vec4<f32> = u_xlat9;
        let x_1017 : vec4<f32> = x_248.x_MainLightShadowmapSize;
        u_xlat9 = (vec4<f32>(x_1014.x, x_1014.w, x_1014.y, x_1014.z) * vec4<f32>(x_1017.y, x_1017.y, x_1017.y, x_1017.y));
        let x_1020 : vec4<f32> = u_xlat8;
        let x_1021 : vec3<f32> = vec3<f32>(x_1020.y, x_1020.z, x_1020.w);
        let x_1022 : vec4<f32> = u_xlat11;
        u_xlat11 = vec4<f32>(x_1021.x, x_1022.y, x_1021.y, x_1021.z);
        let x_1025 : f32 = u_xlat9.x;
        u_xlat11.y = x_1025;
        let x_1027 : vec4<f32> = u_xlat3;
        let x_1030 : vec4<f32> = x_248.x_MainLightShadowmapSize;
        let x_1033 : vec4<f32> = u_xlat11;
        u_xlat12 = ((vec4<f32>(x_1027.x, x_1027.y, x_1027.x, x_1027.y) * vec4<f32>(x_1030.x, x_1030.y, x_1030.x, x_1030.y)) + vec4<f32>(x_1033.x, x_1033.y, x_1033.z, x_1033.y));
        let x_1036 : vec4<f32> = u_xlat3;
        let x_1039 : vec4<f32> = x_248.x_MainLightShadowmapSize;
        let x_1042 : vec4<f32> = u_xlat11;
        u_xlat45 = ((vec2<f32>(x_1036.x, x_1036.y) * vec2<f32>(x_1039.x, x_1039.y)) + vec2<f32>(x_1042.w, x_1042.y));
        let x_1046 : f32 = u_xlat11.y;
        u_xlat8.y = x_1046;
        let x_1049 : f32 = u_xlat9.z;
        u_xlat11.y = x_1049;
        let x_1051 : vec4<f32> = u_xlat3;
        let x_1054 : vec4<f32> = x_248.x_MainLightShadowmapSize;
        let x_1057 : vec4<f32> = u_xlat11;
        u_xlat13 = ((vec4<f32>(x_1051.x, x_1051.y, x_1051.x, x_1051.y) * vec4<f32>(x_1054.x, x_1054.y, x_1054.x, x_1054.y)) + vec4<f32>(x_1057.x, x_1057.y, x_1057.z, x_1057.y));
        let x_1060 : vec4<f32> = u_xlat3;
        let x_1063 : vec4<f32> = x_248.x_MainLightShadowmapSize;
        let x_1066 : vec4<f32> = u_xlat11;
        let x_1068 : vec2<f32> = ((vec2<f32>(x_1060.x, x_1060.y) * vec2<f32>(x_1063.x, x_1063.y)) + vec2<f32>(x_1066.w, x_1066.y));
        let x_1069 : vec4<f32> = u_xlat14;
        u_xlat14 = vec4<f32>(x_1068.x, x_1068.y, x_1069.z, x_1069.w);
        let x_1072 : f32 = u_xlat11.y;
        u_xlat8.z = x_1072;
        let x_1075 : vec4<f32> = u_xlat3;
        let x_1078 : vec4<f32> = x_248.x_MainLightShadowmapSize;
        let x_1081 : vec4<f32> = u_xlat8;
        u_xlat15 = ((vec4<f32>(x_1075.x, x_1075.y, x_1075.x, x_1075.y) * vec4<f32>(x_1078.x, x_1078.y, x_1078.x, x_1078.y)) + vec4<f32>(x_1081.x, x_1081.y, x_1081.x, x_1081.z));
        let x_1085 : f32 = u_xlat9.w;
        u_xlat11.y = x_1085;
        let x_1088 : vec4<f32> = u_xlat3;
        let x_1091 : vec4<f32> = x_248.x_MainLightShadowmapSize;
        let x_1094 : vec4<f32> = u_xlat11;
        u_xlat16 = ((vec4<f32>(x_1088.x, x_1088.y, x_1088.x, x_1088.y) * vec4<f32>(x_1091.x, x_1091.y, x_1091.x, x_1091.y)) + vec4<f32>(x_1094.x, x_1094.y, x_1094.z, x_1094.y));
        let x_1098 : vec4<f32> = u_xlat3;
        let x_1101 : vec4<f32> = x_248.x_MainLightShadowmapSize;
        let x_1104 : vec4<f32> = u_xlat11;
        let x_1106 : vec2<f32> = ((vec2<f32>(x_1098.x, x_1098.y) * vec2<f32>(x_1101.x, x_1101.y)) + vec2<f32>(x_1104.w, x_1104.y));
        let x_1107 : vec3<f32> = u_xlat29;
        u_xlat29 = vec3<f32>(x_1106.x, x_1106.y, x_1107.z);
        let x_1110 : f32 = u_xlat11.y;
        u_xlat8.w = x_1110;
        let x_1113 : vec4<f32> = u_xlat3;
        let x_1116 : vec4<f32> = x_248.x_MainLightShadowmapSize;
        let x_1119 : vec4<f32> = u_xlat8;
        u_xlat56 = ((vec2<f32>(x_1113.x, x_1113.y) * vec2<f32>(x_1116.x, x_1116.y)) + vec2<f32>(x_1119.x, x_1119.w));
        let x_1122 : vec4<f32> = u_xlat11;
        let x_1123 : vec3<f32> = vec3<f32>(x_1122.x, x_1122.z, x_1122.w);
        let x_1124 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_1123.x, x_1124.y, x_1123.y, x_1123.z);
        let x_1126 : vec4<f32> = u_xlat3;
        let x_1129 : vec4<f32> = x_248.x_MainLightShadowmapSize;
        let x_1132 : vec4<f32> = u_xlat9;
        u_xlat11 = ((vec4<f32>(x_1126.x, x_1126.y, x_1126.x, x_1126.y) * vec4<f32>(x_1129.x, x_1129.y, x_1129.x, x_1129.y)) + vec4<f32>(x_1132.x, x_1132.y, x_1132.z, x_1132.y));
        let x_1136 : vec4<f32> = u_xlat3;
        let x_1139 : vec4<f32> = x_248.x_MainLightShadowmapSize;
        let x_1142 : vec4<f32> = u_xlat9;
        u_xlat51 = ((vec2<f32>(x_1136.x, x_1136.y) * vec2<f32>(x_1139.x, x_1139.y)) + vec2<f32>(x_1142.w, x_1142.y));
        let x_1146 : f32 = u_xlat8.x;
        u_xlat9.x = x_1146;
        let x_1148 : vec4<f32> = u_xlat3;
        let x_1151 : vec4<f32> = x_248.x_MainLightShadowmapSize;
        let x_1154 : vec4<f32> = u_xlat9;
        let x_1156 : vec2<f32> = ((vec2<f32>(x_1148.x, x_1148.y) * vec2<f32>(x_1151.x, x_1151.y)) + vec2<f32>(x_1154.x, x_1154.y));
        let x_1157 : vec4<f32> = u_xlat3;
        u_xlat3 = vec4<f32>(x_1156.x, x_1156.y, x_1157.z, x_1157.w);
        let x_1160 : vec4<f32> = u_xlat7;
        let x_1162 : vec4<f32> = u_xlat10;
        u_xlat17 = (vec4<f32>(x_1160.x, x_1160.x, x_1160.x, x_1160.x) * x_1162);
        let x_1165 : vec4<f32> = u_xlat7;
        let x_1167 : vec4<f32> = u_xlat10;
        u_xlat18 = (vec4<f32>(x_1165.y, x_1165.y, x_1165.y, x_1165.y) * x_1167);
        let x_1170 : vec4<f32> = u_xlat7;
        let x_1172 : vec4<f32> = u_xlat10;
        u_xlat19 = (vec4<f32>(x_1170.z, x_1170.z, x_1170.z, x_1170.z) * x_1172);
        let x_1174 : vec4<f32> = u_xlat7;
        let x_1176 : vec4<f32> = u_xlat10;
        u_xlat7 = (vec4<f32>(x_1174.w, x_1174.w, x_1174.w, x_1174.w) * x_1176);
        let x_1179 : vec4<f32> = u_xlat12;
        let x_1180 : vec2<f32> = vec2<f32>(x_1179.x, x_1179.y);
        let x_1182 : f32 = u_xlat2.z;
        txVec13 = vec3<f32>(x_1180.x, x_1180.y, x_1182);
        let x_1189 : vec3<f32> = txVec13;
        let x_1191 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1189.xy, x_1189.z);
        u_xlat65 = x_1191;
        let x_1193 : vec4<f32> = u_xlat12;
        let x_1194 : vec2<f32> = vec2<f32>(x_1193.z, x_1193.w);
        let x_1196 : f32 = u_xlat2.z;
        txVec14 = vec3<f32>(x_1194.x, x_1194.y, x_1196);
        let x_1204 : vec3<f32> = txVec14;
        let x_1206 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1204.xy, x_1204.z);
        u_xlat68 = x_1206;
        let x_1207 : f32 = u_xlat68;
        let x_1209 : f32 = u_xlat17.y;
        u_xlat68 = (x_1207 * x_1209);
        let x_1212 : f32 = u_xlat17.x;
        let x_1213 : f32 = u_xlat65;
        let x_1215 : f32 = u_xlat68;
        u_xlat65 = ((x_1212 * x_1213) + x_1215);
        let x_1218 : vec2<f32> = u_xlat45;
        let x_1220 : f32 = u_xlat2.z;
        txVec15 = vec3<f32>(x_1218.x, x_1218.y, x_1220);
        let x_1227 : vec3<f32> = txVec15;
        let x_1229 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1227.xy, x_1227.z);
        u_xlat45.x = x_1229;
        let x_1232 : f32 = u_xlat17.z;
        let x_1234 : f32 = u_xlat45.x;
        let x_1236 : f32 = u_xlat65;
        u_xlat65 = ((x_1232 * x_1234) + x_1236);
        let x_1239 : vec4<f32> = u_xlat15;
        let x_1240 : vec2<f32> = vec2<f32>(x_1239.x, x_1239.y);
        let x_1242 : f32 = u_xlat2.z;
        txVec16 = vec3<f32>(x_1240.x, x_1240.y, x_1242);
        let x_1249 : vec3<f32> = txVec16;
        let x_1251 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1249.xy, x_1249.z);
        u_xlat45.x = x_1251;
        let x_1254 : f32 = u_xlat17.w;
        let x_1256 : f32 = u_xlat45.x;
        let x_1258 : f32 = u_xlat65;
        u_xlat65 = ((x_1254 * x_1256) + x_1258);
        let x_1261 : vec4<f32> = u_xlat13;
        let x_1262 : vec2<f32> = vec2<f32>(x_1261.x, x_1261.y);
        let x_1264 : f32 = u_xlat2.z;
        txVec17 = vec3<f32>(x_1262.x, x_1262.y, x_1264);
        let x_1271 : vec3<f32> = txVec17;
        let x_1273 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1271.xy, x_1271.z);
        u_xlat45.x = x_1273;
        let x_1276 : f32 = u_xlat18.x;
        let x_1278 : f32 = u_xlat45.x;
        let x_1280 : f32 = u_xlat65;
        u_xlat65 = ((x_1276 * x_1278) + x_1280);
        let x_1283 : vec4<f32> = u_xlat13;
        let x_1284 : vec2<f32> = vec2<f32>(x_1283.z, x_1283.w);
        let x_1286 : f32 = u_xlat2.z;
        txVec18 = vec3<f32>(x_1284.x, x_1284.y, x_1286);
        let x_1293 : vec3<f32> = txVec18;
        let x_1295 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1293.xy, x_1293.z);
        u_xlat45.x = x_1295;
        let x_1298 : f32 = u_xlat18.y;
        let x_1300 : f32 = u_xlat45.x;
        let x_1302 : f32 = u_xlat65;
        u_xlat65 = ((x_1298 * x_1300) + x_1302);
        let x_1305 : vec4<f32> = u_xlat14;
        let x_1306 : vec2<f32> = vec2<f32>(x_1305.x, x_1305.y);
        let x_1308 : f32 = u_xlat2.z;
        txVec19 = vec3<f32>(x_1306.x, x_1306.y, x_1308);
        let x_1315 : vec3<f32> = txVec19;
        let x_1317 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1315.xy, x_1315.z);
        u_xlat45.x = x_1317;
        let x_1320 : f32 = u_xlat18.z;
        let x_1322 : f32 = u_xlat45.x;
        let x_1324 : f32 = u_xlat65;
        u_xlat65 = ((x_1320 * x_1322) + x_1324);
        let x_1327 : vec4<f32> = u_xlat15;
        let x_1328 : vec2<f32> = vec2<f32>(x_1327.z, x_1327.w);
        let x_1330 : f32 = u_xlat2.z;
        txVec20 = vec3<f32>(x_1328.x, x_1328.y, x_1330);
        let x_1337 : vec3<f32> = txVec20;
        let x_1339 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1337.xy, x_1337.z);
        u_xlat45.x = x_1339;
        let x_1342 : f32 = u_xlat18.w;
        let x_1344 : f32 = u_xlat45.x;
        let x_1346 : f32 = u_xlat65;
        u_xlat65 = ((x_1342 * x_1344) + x_1346);
        let x_1349 : vec4<f32> = u_xlat16;
        let x_1350 : vec2<f32> = vec2<f32>(x_1349.x, x_1349.y);
        let x_1352 : f32 = u_xlat2.z;
        txVec21 = vec3<f32>(x_1350.x, x_1350.y, x_1352);
        let x_1359 : vec3<f32> = txVec21;
        let x_1361 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1359.xy, x_1359.z);
        u_xlat45.x = x_1361;
        let x_1364 : f32 = u_xlat19.x;
        let x_1366 : f32 = u_xlat45.x;
        let x_1368 : f32 = u_xlat65;
        u_xlat65 = ((x_1364 * x_1366) + x_1368);
        let x_1371 : vec4<f32> = u_xlat16;
        let x_1372 : vec2<f32> = vec2<f32>(x_1371.z, x_1371.w);
        let x_1374 : f32 = u_xlat2.z;
        txVec22 = vec3<f32>(x_1372.x, x_1372.y, x_1374);
        let x_1381 : vec3<f32> = txVec22;
        let x_1383 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1381.xy, x_1381.z);
        u_xlat45.x = x_1383;
        let x_1386 : f32 = u_xlat19.y;
        let x_1388 : f32 = u_xlat45.x;
        let x_1390 : f32 = u_xlat65;
        u_xlat65 = ((x_1386 * x_1388) + x_1390);
        let x_1393 : vec3<f32> = u_xlat29;
        let x_1394 : vec2<f32> = vec2<f32>(x_1393.x, x_1393.y);
        let x_1396 : f32 = u_xlat2.z;
        txVec23 = vec3<f32>(x_1394.x, x_1394.y, x_1396);
        let x_1403 : vec3<f32> = txVec23;
        let x_1405 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1403.xy, x_1403.z);
        u_xlat45.x = x_1405;
        let x_1408 : f32 = u_xlat19.z;
        let x_1410 : f32 = u_xlat45.x;
        let x_1412 : f32 = u_xlat65;
        u_xlat65 = ((x_1408 * x_1410) + x_1412);
        let x_1415 : vec2<f32> = u_xlat56;
        let x_1417 : f32 = u_xlat2.z;
        txVec24 = vec3<f32>(x_1415.x, x_1415.y, x_1417);
        let x_1424 : vec3<f32> = txVec24;
        let x_1426 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1424.xy, x_1424.z);
        u_xlat45.x = x_1426;
        let x_1429 : f32 = u_xlat19.w;
        let x_1431 : f32 = u_xlat45.x;
        let x_1433 : f32 = u_xlat65;
        u_xlat65 = ((x_1429 * x_1431) + x_1433);
        let x_1436 : vec4<f32> = u_xlat11;
        let x_1437 : vec2<f32> = vec2<f32>(x_1436.x, x_1436.y);
        let x_1439 : f32 = u_xlat2.z;
        txVec25 = vec3<f32>(x_1437.x, x_1437.y, x_1439);
        let x_1446 : vec3<f32> = txVec25;
        let x_1448 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1446.xy, x_1446.z);
        u_xlat45.x = x_1448;
        let x_1451 : f32 = u_xlat7.x;
        let x_1453 : f32 = u_xlat45.x;
        let x_1455 : f32 = u_xlat65;
        u_xlat65 = ((x_1451 * x_1453) + x_1455);
        let x_1458 : vec4<f32> = u_xlat11;
        let x_1459 : vec2<f32> = vec2<f32>(x_1458.z, x_1458.w);
        let x_1461 : f32 = u_xlat2.z;
        txVec26 = vec3<f32>(x_1459.x, x_1459.y, x_1461);
        let x_1468 : vec3<f32> = txVec26;
        let x_1470 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1468.xy, x_1468.z);
        u_xlat45.x = x_1470;
        let x_1473 : f32 = u_xlat7.y;
        let x_1475 : f32 = u_xlat45.x;
        let x_1477 : f32 = u_xlat65;
        u_xlat65 = ((x_1473 * x_1475) + x_1477);
        let x_1480 : vec2<f32> = u_xlat51;
        let x_1482 : f32 = u_xlat2.z;
        txVec27 = vec3<f32>(x_1480.x, x_1480.y, x_1482);
        let x_1489 : vec3<f32> = txVec27;
        let x_1491 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1489.xy, x_1489.z);
        u_xlat45.x = x_1491;
        let x_1494 : f32 = u_xlat7.z;
        let x_1496 : f32 = u_xlat45.x;
        let x_1498 : f32 = u_xlat65;
        u_xlat65 = ((x_1494 * x_1496) + x_1498);
        let x_1501 : vec4<f32> = u_xlat3;
        let x_1502 : vec2<f32> = vec2<f32>(x_1501.x, x_1501.y);
        let x_1504 : f32 = u_xlat2.z;
        txVec28 = vec3<f32>(x_1502.x, x_1502.y, x_1504);
        let x_1511 : vec3<f32> = txVec28;
        let x_1513 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1511.xy, x_1511.z);
        u_xlat3.x = x_1513;
        let x_1516 : f32 = u_xlat7.w;
        let x_1518 : f32 = u_xlat3.x;
        let x_1520 : f32 = u_xlat65;
        u_xlat64 = ((x_1516 * x_1518) + x_1520);
      }
    }
  } else {
    let x_1524 : vec3<f32> = u_xlat2;
    let x_1525 : vec2<f32> = vec2<f32>(x_1524.x, x_1524.y);
    let x_1527 : f32 = u_xlat2.z;
    txVec29 = vec3<f32>(x_1525.x, x_1525.y, x_1527);
    let x_1534 : vec3<f32> = txVec29;
    let x_1536 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1534.xy, x_1534.z);
    u_xlat64 = x_1536;
  }
  let x_1538 : f32 = x_248.x_MainLightShadowParams.x;
  u_xlat2.x = (-(x_1538) + 1.0f);
  let x_1542 : f32 = u_xlat64;
  let x_1544 : f32 = x_248.x_MainLightShadowParams.x;
  let x_1547 : f32 = u_xlat2.x;
  u_xlat64 = ((x_1542 * x_1544) + x_1547);
  let x_1551 : f32 = u_xlat2.z;
  u_xlatb23 = (0.0f >= x_1551);
  let x_1555 : f32 = u_xlat2.z;
  u_xlatb44 = (x_1555 >= 1.0f);
  let x_1557 : bool = u_xlatb44;
  let x_1558 : bool = u_xlatb23;
  u_xlatb23 = (x_1557 | x_1558);
  let x_1560 : bool = u_xlatb23;
  let x_1561 : f32 = u_xlat64;
  u_xlat64 = select(x_1561, 1.0f, x_1560);
  let x_1563 : vec3<f32> = u_xlat1;
  let x_1565 : vec4<f32> = x_137.x_MainLightPosition;
  u_xlat1.x = dot(x_1563, -(vec3<f32>(x_1565.x, x_1565.y, x_1565.z)));
  let x_1571 : f32 = u_xlat1.x;
  u_xlat1.x = clamp(x_1571, 0.0f, 1.0f);
  let x_1575 : f32 = u_xlat64;
  let x_1579 : vec4<f32> = x_137.x_MainLightColor;
  u_xlat22 = (vec3<f32>(x_1575, x_1575, x_1575) * vec3<f32>(x_1579.x, x_1579.y, x_1579.z));
  let x_1582 : vec3<f32> = u_xlat22;
  let x_1583 : vec3<f32> = u_xlat1;
  u_xlat1 = (x_1582 * vec3<f32>(x_1583.x, x_1583.x, x_1583.x));
  let x_1586 : vec3<f32> = u_xlat1;
  let x_1587 : vec4<f32> = u_xlat4;
  u_xlat1 = (x_1586 * vec3<f32>(x_1587.x, x_1587.y, x_1587.z));
  let x_1591 : f32 = u_xlat4.w;
  u_xlatb64 = (x_1591 >= 0.400000006f);
  let x_1594 : bool = u_xlatb64;
  if (x_1594) {
    let x_1599 : f32 = u_xlat4.w;
    x_1595 = x_1599;
  } else {
    x_1595 = 0.0f;
  }
  let x_1601 : f32 = x_1595;
  u_xlat64 = x_1601;
  let x_1604 : f32 = u_xlat4.w;
  u_xlat23 = (x_1604 + -0.400000006f);
  let x_1609 : f32 = u_xlat4.w;
  u_xlat44 = dpdxCoarse(x_1609);
  let x_1612 : f32 = u_xlat4.w;
  u_xlat65 = dpdyCoarse(x_1612);
  let x_1614 : f32 = u_xlat65;
  let x_1616 : f32 = u_xlat44;
  u_xlat44 = (abs(x_1614) + abs(x_1616));
  let x_1619 : f32 = u_xlat44;
  u_xlat44 = max(x_1619, 0.0001f);
  let x_1622 : f32 = u_xlat23;
  let x_1623 : f32 = u_xlat44;
  u_xlat23 = (x_1622 / x_1623);
  let x_1625 : f32 = u_xlat23;
  u_xlat23 = (x_1625 + 0.5f);
  let x_1627 : f32 = u_xlat23;
  u_xlat23 = clamp(x_1627, 0.0f, 1.0f);
  let x_1630 : f32 = x_137.x_AlphaToMaskAvailable;
  u_xlatb44 = !((x_1630 == 0.0f));
  let x_1632 : bool = u_xlatb44;
  let x_1633 : f32 = u_xlat23;
  let x_1634 : f32 = u_xlat64;
  u_xlat64 = select(x_1634, x_1633, x_1632);
  let x_1636 : f32 = u_xlat64;
  u_xlat23 = (x_1636 + -0.0001f);
  let x_1639 : f32 = u_xlat23;
  u_xlatb23 = (x_1639 < 0.0f);
  let x_1641 : bool = u_xlatb23;
  if (((select(0i, 1i, x_1641) * -1i) != 0i)) {
    discard;
  }
  let x_1649 : vec3<f32> = u_xlat21;
  let x_1650 : vec3<f32> = u_xlat27;
  u_xlat21 = (x_1649 * vec3<f32>(x_1650.y, x_1650.y, x_1650.y));
  let x_1653 : vec3<f32> = u_xlat27;
  let x_1655 : vec4<f32> = vs_INTERP2;
  let x_1658 : vec3<f32> = u_xlat21;
  u_xlat21 = ((vec3<f32>(x_1653.x, x_1653.x, x_1653.x) * vec3<f32>(x_1655.x, x_1655.y, x_1655.z)) + x_1658);
  let x_1660 : vec3<f32> = u_xlat27;
  let x_1662 : vec3<f32> = vs_INTERP1;
  let x_1664 : vec3<f32> = u_xlat21;
  u_xlat21 = ((vec3<f32>(x_1660.z, x_1660.z, x_1660.z) * x_1662) + x_1664);
  let x_1666 : vec3<f32> = u_xlat21;
  let x_1667 : vec3<f32> = u_xlat21;
  u_xlat23 = dot(x_1666, x_1667);
  let x_1669 : f32 = u_xlat23;
  u_xlat23 = inverseSqrt(x_1669);
  let x_1671 : vec3<f32> = u_xlat21;
  let x_1672 : f32 = u_xlat23;
  let x_1674 : vec3<f32> = (x_1671 * vec3<f32>(x_1672, x_1672, x_1672));
  let x_1675 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_1674.x, x_1674.y, x_1674.z, x_1675.w);
  let x_1679 : f32 = x_137.unity_OrthoParams.w;
  u_xlatb21.x = (x_1679 == 0.0f);
  let x_1682 : vec3<f32> = vs_INTERP0;
  let x_1686 : vec3<f32> = x_137.x_WorldSpaceCameraPos;
  let x_1687 : vec3<f32> = (-(x_1682) + x_1686);
  let x_1688 : vec4<f32> = u_xlat4;
  u_xlat4 = vec4<f32>(x_1687.x, x_1687.y, x_1687.z, x_1688.w);
  let x_1691 : vec4<f32> = u_xlat4;
  let x_1693 : vec4<f32> = u_xlat4;
  u_xlat42 = dot(vec3<f32>(x_1691.x, x_1691.y, x_1691.z), vec3<f32>(x_1693.x, x_1693.y, x_1693.z));
  let x_1696 : f32 = u_xlat42;
  u_xlat42 = inverseSqrt(x_1696);
  let x_1698 : f32 = u_xlat42;
  let x_1700 : vec4<f32> = u_xlat4;
  let x_1702 : vec3<f32> = (vec3<f32>(x_1698, x_1698, x_1698) * vec3<f32>(x_1700.x, x_1700.y, x_1700.z));
  let x_1703 : vec4<f32> = u_xlat4;
  u_xlat4 = vec4<f32>(x_1702.x, x_1702.y, x_1702.z, x_1703.w);
  let x_1707 : f32 = x_137.unity_MatrixV[0i].z;
  u_xlat7.x = x_1707;
  let x_1710 : f32 = x_137.unity_MatrixV[1i].z;
  u_xlat7.y = x_1710;
  let x_1713 : f32 = x_137.unity_MatrixV[2i].z;
  u_xlat7.z = x_1713;
  let x_1716 : bool = u_xlatb21.x;
  if (x_1716) {
    let x_1720 : vec4<f32> = u_xlat4;
    x_1717 = vec3<f32>(x_1720.x, x_1720.y, x_1720.z);
  } else {
    let x_1723 : vec4<f32> = u_xlat7;
    x_1717 = vec3<f32>(x_1723.x, x_1723.y, x_1723.z);
  }
  let x_1725 : vec3<f32> = x_1717;
  u_xlat21 = x_1725;
  let x_1727 : f32 = vs_INTERP0.y;
  let x_1729 : f32 = x_137.unity_MatrixV[1i].z;
  u_xlat23 = (x_1727 * x_1729);
  let x_1732 : f32 = x_137.unity_MatrixV[0i].z;
  let x_1734 : f32 = vs_INTERP0.x;
  let x_1736 : f32 = u_xlat23;
  u_xlat23 = ((x_1732 * x_1734) + x_1736);
  let x_1739 : f32 = x_137.unity_MatrixV[2i].z;
  let x_1741 : f32 = vs_INTERP0.z;
  let x_1743 : f32 = u_xlat23;
  u_xlat23 = ((x_1739 * x_1741) + x_1743);
  let x_1745 : f32 = u_xlat23;
  let x_1747 : f32 = x_137.unity_MatrixV[3i].z;
  u_xlat23 = (x_1745 + x_1747);
  let x_1749 : f32 = u_xlat23;
  let x_1753 : f32 = x_137.x_ProjectionParams.y;
  u_xlat23 = (-(x_1749) + -(x_1753));
  let x_1756 : f32 = u_xlat23;
  u_xlat23 = max(x_1756, 0.0f);
  let x_1758 : f32 = u_xlat23;
  let x_1761 : f32 = x_137.unity_FogParams.x;
  u_xlat23 = (x_1758 * x_1761);
  u_xlat3.w = 1.0f;
  let x_1766 : vec4<f32> = x_60.unity_SHAr;
  let x_1767 : vec4<f32> = u_xlat3;
  u_xlat4.x = dot(x_1766, x_1767);
  let x_1772 : vec4<f32> = x_60.unity_SHAg;
  let x_1773 : vec4<f32> = u_xlat3;
  u_xlat4.y = dot(x_1772, x_1773);
  let x_1778 : vec4<f32> = x_60.unity_SHAb;
  let x_1779 : vec4<f32> = u_xlat3;
  u_xlat4.z = dot(x_1778, x_1779);
  let x_1782 : vec4<f32> = u_xlat3;
  let x_1784 : vec4<f32> = u_xlat3;
  u_xlat7 = (vec4<f32>(x_1782.y, x_1782.z, x_1782.z, x_1782.x) * vec4<f32>(x_1784.x, x_1784.y, x_1784.z, x_1784.z));
  let x_1789 : vec4<f32> = x_60.unity_SHBr;
  let x_1790 : vec4<f32> = u_xlat7;
  u_xlat8.x = dot(x_1789, x_1790);
  let x_1795 : vec4<f32> = x_60.unity_SHBg;
  let x_1796 : vec4<f32> = u_xlat7;
  u_xlat8.y = dot(x_1795, x_1796);
  let x_1801 : vec4<f32> = x_60.unity_SHBb;
  let x_1802 : vec4<f32> = u_xlat7;
  u_xlat8.z = dot(x_1801, x_1802);
  let x_1806 : f32 = u_xlat3.y;
  let x_1808 : f32 = u_xlat3.y;
  u_xlat65 = (x_1806 * x_1808);
  let x_1811 : f32 = u_xlat3.x;
  let x_1813 : f32 = u_xlat3.x;
  let x_1815 : f32 = u_xlat65;
  u_xlat65 = ((x_1811 * x_1813) + -(x_1815));
  let x_1820 : vec4<f32> = x_60.unity_SHC;
  let x_1822 : f32 = u_xlat65;
  let x_1825 : vec4<f32> = u_xlat8;
  u_xlat27 = ((vec3<f32>(x_1820.x, x_1820.y, x_1820.z) * vec3<f32>(x_1822, x_1822, x_1822)) + vec3<f32>(x_1825.x, x_1825.y, x_1825.z));
  let x_1828 : vec4<f32> = u_xlat4;
  let x_1830 : vec3<f32> = u_xlat27;
  let x_1831 : vec3<f32> = (vec3<f32>(x_1828.x, x_1828.y, x_1828.z) + x_1830);
  let x_1832 : vec4<f32> = u_xlat4;
  u_xlat4 = vec4<f32>(x_1831.x, x_1831.y, x_1831.z, x_1832.w);
  let x_1834 : vec4<f32> = u_xlat4;
  let x_1837 : vec3<f32> = max(vec3<f32>(x_1834.x, x_1834.y, x_1834.z), vec3<f32>(0.0f, 0.0f, 0.0f));
  let x_1838 : vec4<f32> = u_xlat4;
  u_xlat4 = vec4<f32>(x_1837.x, x_1837.y, x_1837.z, x_1838.w);
  let x_1841 : vec4<f32> = x_137.x_ScaledScreenParams;
  let x_1842 : vec2<f32> = vec2<f32>(x_1841.x, x_1841.y);
  let x_1846 : vec2<f32> = (vec2<f32>(1.0f, 1.0f) / vec2<f32>(x_1842.x, x_1842.y));
  let x_1847 : vec3<f32> = u_xlat27;
  u_xlat27 = vec3<f32>(x_1846.x, x_1846.y, x_1847.z);
  let x_1849 : vec3<f32> = u_xlat27;
  let x_1851 : vec4<f32> = hlslcc_FragCoord;
  let x_1853 : vec2<f32> = (vec2<f32>(x_1849.x, x_1849.y) * vec2<f32>(x_1851.x, x_1851.y));
  let x_1854 : vec4<f32> = u_xlat7;
  u_xlat7 = vec4<f32>(x_1853.x, x_1853.y, x_1854.z, x_1854.w);
  let x_1857 : f32 = u_xlat7.y;
  let x_1860 : f32 = x_137.x_ScaleBiasRt.x;
  let x_1863 : f32 = x_137.x_ScaleBiasRt.y;
  u_xlat65 = ((x_1857 * x_1860) + x_1863);
  let x_1865 : f32 = u_xlat65;
  u_xlat7.z = (-(x_1865) + 1.0f);
  let x_1870 : f32 = u_xlat6.x;
  u_xlat6.x = x_1870;
  let x_1873 : f32 = u_xlat6.x;
  u_xlat6.x = clamp(x_1873, 0.0f, 1.0f);
  let x_1876 : f32 = u_xlat64;
  u_xlat64 = min(x_1876, 1.0f);
  let x_1878 : vec3<f32> = u_xlat5;
  u_xlat5 = (x_1878 * vec3<f32>(0.959999979f, 0.959999979f, 0.959999979f));
  let x_1883 : f32 = u_xlat6.x;
  u_xlat65 = (-(x_1883) + 1.0f);
  let x_1887 : f32 = u_xlat65;
  let x_1888 : f32 = u_xlat65;
  u_xlat66 = (x_1887 * x_1888);
  let x_1890 : f32 = u_xlat66;
  u_xlat66 = max(x_1890, 0.0078125f);
  let x_1894 : f32 = u_xlat66;
  let x_1895 : f32 = u_xlat66;
  u_xlat67 = (x_1894 * x_1895);
  let x_1898 : f32 = u_xlat6.x;
  u_xlat68 = (x_1898 + 0.040000021f);
  let x_1901 : f32 = u_xlat68;
  u_xlat68 = min(x_1901, 1.0f);
  let x_1903 : f32 = u_xlat66;
  u_xlat6.x = ((x_1903 * 4.0f) + 2.0f);
  let x_1913 : vec4<f32> = u_xlat7;
  let x_1916 : f32 = x_137.x_GlobalMipBias.x;
  let x_1917 : vec4<f32> = textureSampleBias(x_ScreenSpaceOcclusionTexture, sampler_ScreenSpaceOcclusionTexture, vec2<f32>(x_1913.x, x_1913.z), x_1916);
  u_xlat27.x = x_1917.x;
  let x_1922 : f32 = u_xlat27.x;
  u_xlat48 = (x_1922 + -1.0f);
  let x_1926 : f32 = x_137.x_AmbientOcclusionParam.w;
  let x_1927 : f32 = u_xlat48;
  u_xlat48 = ((x_1926 * x_1927) + 1.0f);
  let x_1931 : f32 = u_xlat27.x;
  let x_1933 : f32 = vs_INTERP4.w;
  u_xlat27.x = min(x_1931, x_1933);
  let x_1936 : bool = u_xlatb0;
  if (x_1936) {
    let x_1940 : f32 = x_248.x_MainLightShadowParams.y;
    u_xlatb0 = (x_1940 == 1.0f);
    let x_1942 : bool = u_xlatb0;
    if (x_1942) {
      let x_1946 : vec4<f32> = vs_INTERP9;
      let x_1949 : vec4<f32> = x_248.x_MainLightShadowOffset0;
      u_xlat7 = (vec4<f32>(x_1946.x, x_1946.y, x_1946.x, x_1946.y) + x_1949);
      let x_1952 : vec4<f32> = u_xlat7;
      let x_1953 : vec2<f32> = vec2<f32>(x_1952.x, x_1952.y);
      let x_1955 : f32 = vs_INTERP9.z;
      txVec30 = vec3<f32>(x_1953.x, x_1953.y, x_1955);
      let x_1962 : vec3<f32> = txVec30;
      let x_1964 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1962.xy, x_1962.z);
      u_xlat8.x = x_1964;
      let x_1967 : vec4<f32> = u_xlat7;
      let x_1968 : vec2<f32> = vec2<f32>(x_1967.z, x_1967.w);
      let x_1970 : f32 = vs_INTERP9.z;
      txVec31 = vec3<f32>(x_1968.x, x_1968.y, x_1970);
      let x_1977 : vec3<f32> = txVec31;
      let x_1979 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1977.xy, x_1977.z);
      u_xlat8.y = x_1979;
      let x_1981 : vec4<f32> = vs_INTERP9;
      let x_1984 : vec4<f32> = x_248.x_MainLightShadowOffset1;
      u_xlat7 = (vec4<f32>(x_1981.x, x_1981.y, x_1981.x, x_1981.y) + x_1984);
      let x_1987 : vec4<f32> = u_xlat7;
      let x_1988 : vec2<f32> = vec2<f32>(x_1987.x, x_1987.y);
      let x_1990 : f32 = vs_INTERP9.z;
      txVec32 = vec3<f32>(x_1988.x, x_1988.y, x_1990);
      let x_1997 : vec3<f32> = txVec32;
      let x_1999 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1997.xy, x_1997.z);
      u_xlat8.z = x_1999;
      let x_2002 : vec4<f32> = u_xlat7;
      let x_2003 : vec2<f32> = vec2<f32>(x_2002.z, x_2002.w);
      let x_2005 : f32 = vs_INTERP9.z;
      txVec33 = vec3<f32>(x_2003.x, x_2003.y, x_2005);
      let x_2012 : vec3<f32> = txVec33;
      let x_2014 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2012.xy, x_2012.z);
      u_xlat8.w = x_2014;
      let x_2016 : vec4<f32> = u_xlat8;
      u_xlat0.x = dot(x_2016, vec4<f32>(0.25f, 0.25f, 0.25f, 0.25f));
    } else {
      let x_2022 : f32 = x_248.x_MainLightShadowParams.y;
      u_xlatb69 = (x_2022 == 2.0f);
      let x_2024 : bool = u_xlatb69;
      if (x_2024) {
        let x_2027 : vec4<f32> = vs_INTERP9;
        let x_2030 : vec4<f32> = x_248.x_MainLightShadowmapSize;
        let x_2033 : vec2<f32> = ((vec2<f32>(x_2027.x, x_2027.y) * vec2<f32>(x_2030.z, x_2030.w)) + vec2<f32>(0.5f, 0.5f));
        let x_2034 : vec4<f32> = u_xlat7;
        u_xlat7 = vec4<f32>(x_2033.x, x_2033.y, x_2034.z, x_2034.w);
        let x_2036 : vec4<f32> = u_xlat7;
        let x_2038 : vec2<f32> = floor(vec2<f32>(x_2036.x, x_2036.y));
        let x_2039 : vec4<f32> = u_xlat7;
        u_xlat7 = vec4<f32>(x_2038.x, x_2038.y, x_2039.z, x_2039.w);
        let x_2042 : vec4<f32> = vs_INTERP9;
        let x_2045 : vec4<f32> = x_248.x_MainLightShadowmapSize;
        let x_2048 : vec4<f32> = u_xlat7;
        u_xlat49 = ((vec2<f32>(x_2042.x, x_2042.y) * vec2<f32>(x_2045.z, x_2045.w)) + -(vec2<f32>(x_2048.x, x_2048.y)));
        let x_2052 : vec2<f32> = u_xlat49;
        u_xlat8 = (vec4<f32>(x_2052.x, x_2052.x, x_2052.y, x_2052.y) + vec4<f32>(0.5f, 1.0f, 0.5f, 1.0f));
        let x_2055 : vec4<f32> = u_xlat8;
        let x_2057 : vec4<f32> = u_xlat8;
        u_xlat9 = (vec4<f32>(x_2055.x, x_2055.x, x_2055.z, x_2055.z) * vec4<f32>(x_2057.x, x_2057.x, x_2057.z, x_2057.z));
        let x_2060 : vec4<f32> = u_xlat9;
        let x_2062 : vec2<f32> = (vec2<f32>(x_2060.y, x_2060.w) * vec2<f32>(0.079999998f, 0.079999998f));
        let x_2063 : vec4<f32> = u_xlat8;
        u_xlat8 = vec4<f32>(x_2062.x, x_2063.y, x_2062.y, x_2063.w);
        let x_2065 : vec4<f32> = u_xlat9;
        let x_2068 : vec2<f32> = u_xlat49;
        let x_2070 : vec2<f32> = ((vec2<f32>(x_2065.x, x_2065.z) * vec2<f32>(0.5f, 0.5f)) + -(x_2068));
        let x_2071 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_2070.x, x_2070.y, x_2071.z, x_2071.w);
        let x_2073 : vec2<f32> = u_xlat49;
        u_xlat51 = (-(x_2073) + vec2<f32>(1.0f, 1.0f));
        let x_2076 : vec2<f32> = u_xlat49;
        let x_2077 : vec2<f32> = min(x_2076, vec2<f32>(0.0f, 0.0f));
        let x_2078 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_2077.x, x_2077.y, x_2078.z, x_2078.w);
        let x_2080 : vec4<f32> = u_xlat10;
        let x_2083 : vec4<f32> = u_xlat10;
        let x_2086 : vec2<f32> = u_xlat51;
        let x_2087 : vec2<f32> = ((-(vec2<f32>(x_2080.x, x_2080.y)) * vec2<f32>(x_2083.x, x_2083.y)) + x_2086);
        let x_2088 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_2087.x, x_2087.y, x_2088.z, x_2088.w);
        let x_2090 : vec2<f32> = u_xlat49;
        u_xlat49 = max(x_2090, vec2<f32>(0.0f, 0.0f));
        let x_2092 : vec2<f32> = u_xlat49;
        let x_2094 : vec2<f32> = u_xlat49;
        let x_2096 : vec4<f32> = u_xlat8;
        u_xlat49 = ((-(x_2092) * x_2094) + vec2<f32>(x_2096.y, x_2096.w));
        let x_2099 : vec4<f32> = u_xlat10;
        let x_2101 : vec2<f32> = (vec2<f32>(x_2099.x, x_2099.y) + vec2<f32>(1.0f, 1.0f));
        let x_2102 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_2101.x, x_2101.y, x_2102.z, x_2102.w);
        let x_2104 : vec2<f32> = u_xlat49;
        u_xlat49 = (x_2104 + vec2<f32>(1.0f, 1.0f));
        let x_2106 : vec4<f32> = u_xlat9;
        let x_2108 : vec2<f32> = (vec2<f32>(x_2106.x, x_2106.y) * vec2<f32>(0.159999996f, 0.159999996f));
        let x_2109 : vec4<f32> = u_xlat11;
        u_xlat11 = vec4<f32>(x_2108.x, x_2108.y, x_2109.z, x_2109.w);
        let x_2111 : vec2<f32> = u_xlat51;
        let x_2112 : vec2<f32> = (x_2111 * vec2<f32>(0.159999996f, 0.159999996f));
        let x_2113 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_2112.x, x_2112.y, x_2113.z, x_2113.w);
        let x_2115 : vec4<f32> = u_xlat10;
        let x_2117 : vec2<f32> = (vec2<f32>(x_2115.x, x_2115.y) * vec2<f32>(0.159999996f, 0.159999996f));
        let x_2118 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_2117.x, x_2117.y, x_2118.z, x_2118.w);
        let x_2120 : vec2<f32> = u_xlat49;
        let x_2121 : vec2<f32> = (x_2120 * vec2<f32>(0.159999996f, 0.159999996f));
        let x_2122 : vec4<f32> = u_xlat12;
        u_xlat12 = vec4<f32>(x_2121.x, x_2121.y, x_2122.z, x_2122.w);
        let x_2124 : vec4<f32> = u_xlat8;
        u_xlat49 = (vec2<f32>(x_2124.y, x_2124.w) * vec2<f32>(0.159999996f, 0.159999996f));
        let x_2128 : f32 = u_xlat10.x;
        u_xlat11.z = x_2128;
        let x_2131 : f32 = u_xlat49.x;
        u_xlat11.w = x_2131;
        let x_2134 : f32 = u_xlat12.x;
        u_xlat9.z = x_2134;
        let x_2137 : f32 = u_xlat8.x;
        u_xlat9.w = x_2137;
        let x_2139 : vec4<f32> = u_xlat9;
        let x_2141 : vec4<f32> = u_xlat11;
        u_xlat13 = (vec4<f32>(x_2139.z, x_2139.w, x_2139.x, x_2139.z) + vec4<f32>(x_2141.z, x_2141.w, x_2141.x, x_2141.z));
        let x_2145 : f32 = u_xlat11.y;
        u_xlat10.z = x_2145;
        let x_2148 : f32 = u_xlat49.y;
        u_xlat10.w = x_2148;
        let x_2151 : f32 = u_xlat9.y;
        u_xlat12.z = x_2151;
        let x_2154 : f32 = u_xlat8.z;
        u_xlat12.w = x_2154;
        let x_2156 : vec4<f32> = u_xlat10;
        let x_2158 : vec4<f32> = u_xlat12;
        let x_2160 : vec3<f32> = (vec3<f32>(x_2156.z, x_2156.y, x_2156.w) + vec3<f32>(x_2158.z, x_2158.y, x_2158.w));
        let x_2161 : vec4<f32> = u_xlat8;
        u_xlat8 = vec4<f32>(x_2160.x, x_2160.y, x_2160.z, x_2161.w);
        let x_2163 : vec4<f32> = u_xlat9;
        let x_2165 : vec4<f32> = u_xlat13;
        let x_2167 : vec3<f32> = (vec3<f32>(x_2163.x, x_2163.z, x_2163.w) / vec3<f32>(x_2165.z, x_2165.w, x_2165.y));
        let x_2168 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_2167.x, x_2167.y, x_2167.z, x_2168.w);
        let x_2170 : vec4<f32> = u_xlat9;
        let x_2172 : vec3<f32> = (vec3<f32>(x_2170.x, x_2170.y, x_2170.z) + vec3<f32>(-2.5f, -0.5f, 1.5f));
        let x_2173 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_2172.x, x_2172.y, x_2172.z, x_2173.w);
        let x_2175 : vec4<f32> = u_xlat12;
        let x_2177 : vec4<f32> = u_xlat8;
        let x_2179 : vec3<f32> = (vec3<f32>(x_2175.z, x_2175.y, x_2175.w) / vec3<f32>(x_2177.x, x_2177.y, x_2177.z));
        let x_2180 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_2179.x, x_2179.y, x_2179.z, x_2180.w);
        let x_2182 : vec4<f32> = u_xlat10;
        let x_2184 : vec3<f32> = (vec3<f32>(x_2182.x, x_2182.y, x_2182.z) + vec3<f32>(-2.5f, -0.5f, 1.5f));
        let x_2185 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_2184.x, x_2184.y, x_2184.z, x_2185.w);
        let x_2187 : vec4<f32> = u_xlat9;
        let x_2190 : vec4<f32> = x_248.x_MainLightShadowmapSize;
        let x_2192 : vec3<f32> = (vec3<f32>(x_2187.y, x_2187.x, x_2187.z) * vec3<f32>(x_2190.x, x_2190.x, x_2190.x));
        let x_2193 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_2192.x, x_2192.y, x_2192.z, x_2193.w);
        let x_2195 : vec4<f32> = u_xlat10;
        let x_2198 : vec4<f32> = x_248.x_MainLightShadowmapSize;
        let x_2200 : vec3<f32> = (vec3<f32>(x_2195.x, x_2195.y, x_2195.z) * vec3<f32>(x_2198.y, x_2198.y, x_2198.y));
        let x_2201 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_2200.x, x_2200.y, x_2200.z, x_2201.w);
        let x_2204 : f32 = u_xlat10.x;
        u_xlat9.w = x_2204;
        let x_2206 : vec4<f32> = u_xlat7;
        let x_2209 : vec4<f32> = x_248.x_MainLightShadowmapSize;
        let x_2212 : vec4<f32> = u_xlat9;
        u_xlat11 = ((vec4<f32>(x_2206.x, x_2206.y, x_2206.x, x_2206.y) * vec4<f32>(x_2209.x, x_2209.y, x_2209.x, x_2209.y)) + vec4<f32>(x_2212.y, x_2212.w, x_2212.x, x_2212.w));
        let x_2215 : vec4<f32> = u_xlat7;
        let x_2218 : vec4<f32> = x_248.x_MainLightShadowmapSize;
        let x_2221 : vec4<f32> = u_xlat9;
        u_xlat49 = ((vec2<f32>(x_2215.x, x_2215.y) * vec2<f32>(x_2218.x, x_2218.y)) + vec2<f32>(x_2221.z, x_2221.w));
        let x_2225 : f32 = u_xlat9.y;
        u_xlat10.w = x_2225;
        let x_2227 : vec4<f32> = u_xlat10;
        let x_2228 : vec2<f32> = vec2<f32>(x_2227.y, x_2227.z);
        let x_2229 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_2229.x, x_2228.x, x_2229.z, x_2228.y);
        let x_2231 : vec4<f32> = u_xlat7;
        let x_2234 : vec4<f32> = x_248.x_MainLightShadowmapSize;
        let x_2237 : vec4<f32> = u_xlat9;
        u_xlat12 = ((vec4<f32>(x_2231.x, x_2231.y, x_2231.x, x_2231.y) * vec4<f32>(x_2234.x, x_2234.y, x_2234.x, x_2234.y)) + vec4<f32>(x_2237.x, x_2237.y, x_2237.z, x_2237.y));
        let x_2240 : vec4<f32> = u_xlat7;
        let x_2243 : vec4<f32> = x_248.x_MainLightShadowmapSize;
        let x_2246 : vec4<f32> = u_xlat10;
        u_xlat10 = ((vec4<f32>(x_2240.x, x_2240.y, x_2240.x, x_2240.y) * vec4<f32>(x_2243.x, x_2243.y, x_2243.x, x_2243.y)) + vec4<f32>(x_2246.w, x_2246.y, x_2246.w, x_2246.z));
        let x_2249 : vec4<f32> = u_xlat7;
        let x_2252 : vec4<f32> = x_248.x_MainLightShadowmapSize;
        let x_2255 : vec4<f32> = u_xlat9;
        u_xlat9 = ((vec4<f32>(x_2249.x, x_2249.y, x_2249.x, x_2249.y) * vec4<f32>(x_2252.x, x_2252.y, x_2252.x, x_2252.y)) + vec4<f32>(x_2255.x, x_2255.w, x_2255.z, x_2255.w));
        let x_2258 : vec4<f32> = u_xlat8;
        let x_2260 : vec4<f32> = u_xlat13;
        u_xlat14 = (vec4<f32>(x_2258.x, x_2258.x, x_2258.x, x_2258.y) * vec4<f32>(x_2260.z, x_2260.w, x_2260.y, x_2260.z));
        let x_2263 : vec4<f32> = u_xlat8;
        let x_2265 : vec4<f32> = u_xlat13;
        u_xlat15 = (vec4<f32>(x_2263.y, x_2263.y, x_2263.z, x_2263.z) * x_2265);
        let x_2269 : f32 = u_xlat8.z;
        let x_2271 : f32 = u_xlat13.y;
        u_xlat69 = (x_2269 * x_2271);
        let x_2274 : vec4<f32> = u_xlat11;
        let x_2275 : vec2<f32> = vec2<f32>(x_2274.x, x_2274.y);
        let x_2277 : f32 = vs_INTERP9.z;
        txVec34 = vec3<f32>(x_2275.x, x_2275.y, x_2277);
        let x_2284 : vec3<f32> = txVec34;
        let x_2286 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2284.xy, x_2284.z);
        u_xlat7.x = x_2286;
        let x_2289 : vec4<f32> = u_xlat11;
        let x_2290 : vec2<f32> = vec2<f32>(x_2289.z, x_2289.w);
        let x_2292 : f32 = vs_INTERP9.z;
        txVec35 = vec3<f32>(x_2290.x, x_2290.y, x_2292);
        let x_2299 : vec3<f32> = txVec35;
        let x_2301 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2299.xy, x_2299.z);
        u_xlat28.x = x_2301;
        let x_2304 : f32 = u_xlat28.x;
        let x_2306 : f32 = u_xlat14.y;
        u_xlat28.x = (x_2304 * x_2306);
        let x_2310 : f32 = u_xlat14.x;
        let x_2312 : f32 = u_xlat7.x;
        let x_2315 : f32 = u_xlat28.x;
        u_xlat7.x = ((x_2310 * x_2312) + x_2315);
        let x_2319 : vec2<f32> = u_xlat49;
        let x_2321 : f32 = vs_INTERP9.z;
        txVec36 = vec3<f32>(x_2319.x, x_2319.y, x_2321);
        let x_2328 : vec3<f32> = txVec36;
        let x_2330 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2328.xy, x_2328.z);
        u_xlat28.x = x_2330;
        let x_2333 : f32 = u_xlat14.z;
        let x_2335 : f32 = u_xlat28.x;
        let x_2338 : f32 = u_xlat7.x;
        u_xlat7.x = ((x_2333 * x_2335) + x_2338);
        let x_2342 : vec4<f32> = u_xlat10;
        let x_2343 : vec2<f32> = vec2<f32>(x_2342.x, x_2342.y);
        let x_2345 : f32 = vs_INTERP9.z;
        txVec37 = vec3<f32>(x_2343.x, x_2343.y, x_2345);
        let x_2352 : vec3<f32> = txVec37;
        let x_2354 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2352.xy, x_2352.z);
        u_xlat28.x = x_2354;
        let x_2357 : f32 = u_xlat14.w;
        let x_2359 : f32 = u_xlat28.x;
        let x_2362 : f32 = u_xlat7.x;
        u_xlat7.x = ((x_2357 * x_2359) + x_2362);
        let x_2366 : vec4<f32> = u_xlat12;
        let x_2367 : vec2<f32> = vec2<f32>(x_2366.x, x_2366.y);
        let x_2369 : f32 = vs_INTERP9.z;
        txVec38 = vec3<f32>(x_2367.x, x_2367.y, x_2369);
        let x_2376 : vec3<f32> = txVec38;
        let x_2378 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2376.xy, x_2376.z);
        u_xlat28.x = x_2378;
        let x_2381 : f32 = u_xlat15.x;
        let x_2383 : f32 = u_xlat28.x;
        let x_2386 : f32 = u_xlat7.x;
        u_xlat7.x = ((x_2381 * x_2383) + x_2386);
        let x_2390 : vec4<f32> = u_xlat12;
        let x_2391 : vec2<f32> = vec2<f32>(x_2390.z, x_2390.w);
        let x_2393 : f32 = vs_INTERP9.z;
        txVec39 = vec3<f32>(x_2391.x, x_2391.y, x_2393);
        let x_2400 : vec3<f32> = txVec39;
        let x_2402 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2400.xy, x_2400.z);
        u_xlat28.x = x_2402;
        let x_2405 : f32 = u_xlat15.y;
        let x_2407 : f32 = u_xlat28.x;
        let x_2410 : f32 = u_xlat7.x;
        u_xlat7.x = ((x_2405 * x_2407) + x_2410);
        let x_2414 : vec4<f32> = u_xlat10;
        let x_2415 : vec2<f32> = vec2<f32>(x_2414.z, x_2414.w);
        let x_2417 : f32 = vs_INTERP9.z;
        txVec40 = vec3<f32>(x_2415.x, x_2415.y, x_2417);
        let x_2424 : vec3<f32> = txVec40;
        let x_2426 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2424.xy, x_2424.z);
        u_xlat28.x = x_2426;
        let x_2429 : f32 = u_xlat15.z;
        let x_2431 : f32 = u_xlat28.x;
        let x_2434 : f32 = u_xlat7.x;
        u_xlat7.x = ((x_2429 * x_2431) + x_2434);
        let x_2438 : vec4<f32> = u_xlat9;
        let x_2439 : vec2<f32> = vec2<f32>(x_2438.x, x_2438.y);
        let x_2441 : f32 = vs_INTERP9.z;
        txVec41 = vec3<f32>(x_2439.x, x_2439.y, x_2441);
        let x_2448 : vec3<f32> = txVec41;
        let x_2450 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2448.xy, x_2448.z);
        u_xlat28.x = x_2450;
        let x_2453 : f32 = u_xlat15.w;
        let x_2455 : f32 = u_xlat28.x;
        let x_2458 : f32 = u_xlat7.x;
        u_xlat7.x = ((x_2453 * x_2455) + x_2458);
        let x_2462 : vec4<f32> = u_xlat9;
        let x_2463 : vec2<f32> = vec2<f32>(x_2462.z, x_2462.w);
        let x_2465 : f32 = vs_INTERP9.z;
        txVec42 = vec3<f32>(x_2463.x, x_2463.y, x_2465);
        let x_2472 : vec3<f32> = txVec42;
        let x_2474 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2472.xy, x_2472.z);
        u_xlat28.x = x_2474;
        let x_2476 : f32 = u_xlat69;
        let x_2478 : f32 = u_xlat28.x;
        let x_2481 : f32 = u_xlat7.x;
        u_xlat0.x = ((x_2476 * x_2478) + x_2481);
      } else {
        let x_2485 : vec4<f32> = vs_INTERP9;
        let x_2488 : vec4<f32> = x_248.x_MainLightShadowmapSize;
        let x_2491 : vec2<f32> = ((vec2<f32>(x_2485.x, x_2485.y) * vec2<f32>(x_2488.z, x_2488.w)) + vec2<f32>(0.5f, 0.5f));
        let x_2492 : vec4<f32> = u_xlat7;
        u_xlat7 = vec4<f32>(x_2491.x, x_2491.y, x_2492.z, x_2492.w);
        let x_2494 : vec4<f32> = u_xlat7;
        let x_2496 : vec2<f32> = floor(vec2<f32>(x_2494.x, x_2494.y));
        let x_2497 : vec4<f32> = u_xlat7;
        u_xlat7 = vec4<f32>(x_2496.x, x_2496.y, x_2497.z, x_2497.w);
        let x_2499 : vec4<f32> = vs_INTERP9;
        let x_2502 : vec4<f32> = x_248.x_MainLightShadowmapSize;
        let x_2505 : vec4<f32> = u_xlat7;
        u_xlat49 = ((vec2<f32>(x_2499.x, x_2499.y) * vec2<f32>(x_2502.z, x_2502.w)) + -(vec2<f32>(x_2505.x, x_2505.y)));
        let x_2509 : vec2<f32> = u_xlat49;
        u_xlat8 = (vec4<f32>(x_2509.x, x_2509.x, x_2509.y, x_2509.y) + vec4<f32>(0.5f, 1.0f, 0.5f, 1.0f));
        let x_2512 : vec4<f32> = u_xlat8;
        let x_2514 : vec4<f32> = u_xlat8;
        u_xlat9 = (vec4<f32>(x_2512.x, x_2512.x, x_2512.z, x_2512.z) * vec4<f32>(x_2514.x, x_2514.x, x_2514.z, x_2514.z));
        let x_2517 : vec4<f32> = u_xlat9;
        let x_2519 : vec2<f32> = (vec2<f32>(x_2517.y, x_2517.w) * vec2<f32>(0.040816002f, 0.040816002f));
        let x_2520 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_2520.x, x_2519.x, x_2520.z, x_2519.y);
        let x_2522 : vec4<f32> = u_xlat9;
        let x_2525 : vec2<f32> = u_xlat49;
        let x_2527 : vec2<f32> = ((vec2<f32>(x_2522.x, x_2522.z) * vec2<f32>(0.5f, 0.5f)) + -(x_2525));
        let x_2528 : vec4<f32> = u_xlat8;
        u_xlat8 = vec4<f32>(x_2527.x, x_2528.y, x_2527.y, x_2528.w);
        let x_2530 : vec2<f32> = u_xlat49;
        let x_2532 : vec2<f32> = (-(x_2530) + vec2<f32>(1.0f, 1.0f));
        let x_2533 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_2532.x, x_2532.y, x_2533.z, x_2533.w);
        let x_2535 : vec2<f32> = u_xlat49;
        u_xlat51 = min(x_2535, vec2<f32>(0.0f, 0.0f));
        let x_2537 : vec2<f32> = u_xlat51;
        let x_2539 : vec2<f32> = u_xlat51;
        let x_2541 : vec4<f32> = u_xlat9;
        let x_2543 : vec2<f32> = ((-(x_2537) * x_2539) + vec2<f32>(x_2541.x, x_2541.y));
        let x_2544 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_2543.x, x_2543.y, x_2544.z, x_2544.w);
        let x_2546 : vec2<f32> = u_xlat49;
        u_xlat51 = max(x_2546, vec2<f32>(0.0f, 0.0f));
        let x_2548 : vec2<f32> = u_xlat51;
        let x_2550 : vec2<f32> = u_xlat51;
        let x_2552 : vec4<f32> = u_xlat8;
        let x_2554 : vec2<f32> = ((-(x_2548) * x_2550) + vec2<f32>(x_2552.y, x_2552.w));
        let x_2555 : vec3<f32> = u_xlat29;
        u_xlat29 = vec3<f32>(x_2554.x, x_2555.y, x_2554.y);
        let x_2557 : vec4<f32> = u_xlat9;
        let x_2559 : vec2<f32> = (vec2<f32>(x_2557.x, x_2557.y) + vec2<f32>(2.0f, 2.0f));
        let x_2560 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_2559.x, x_2559.y, x_2560.z, x_2560.w);
        let x_2562 : vec3<f32> = u_xlat29;
        let x_2564 : vec2<f32> = (vec2<f32>(x_2562.x, x_2562.z) + vec2<f32>(2.0f, 2.0f));
        let x_2565 : vec4<f32> = u_xlat8;
        u_xlat8 = vec4<f32>(x_2565.x, x_2564.x, x_2565.z, x_2564.y);
        let x_2568 : f32 = u_xlat8.y;
        u_xlat11.z = (x_2568 * 0.081632003f);
        let x_2571 : vec4<f32> = u_xlat8;
        let x_2573 : vec3<f32> = (vec3<f32>(x_2571.z, x_2571.x, x_2571.w) * vec3<f32>(0.081632003f, 0.081632003f, 0.081632003f));
        let x_2574 : vec4<f32> = u_xlat12;
        u_xlat12 = vec4<f32>(x_2573.x, x_2573.y, x_2573.z, x_2574.w);
        let x_2576 : vec4<f32> = u_xlat9;
        let x_2578 : vec2<f32> = (vec2<f32>(x_2576.x, x_2576.y) * vec2<f32>(0.081632003f, 0.081632003f));
        let x_2579 : vec4<f32> = u_xlat8;
        u_xlat8 = vec4<f32>(x_2578.x, x_2578.y, x_2579.z, x_2579.w);
        let x_2582 : f32 = u_xlat12.y;
        u_xlat11.x = x_2582;
        let x_2584 : vec2<f32> = u_xlat49;
        let x_2587 : vec2<f32> = ((vec2<f32>(x_2584.x, x_2584.x) * vec2<f32>(-0.081632003f, 0.081632003f)) + vec2<f32>(0.163264006f, 0.081632003f));
        let x_2588 : vec4<f32> = u_xlat11;
        u_xlat11 = vec4<f32>(x_2588.x, x_2587.x, x_2588.z, x_2587.y);
        let x_2590 : vec2<f32> = u_xlat49;
        let x_2593 : vec2<f32> = ((vec2<f32>(x_2590.x, x_2590.x) * vec2<f32>(-0.081632003f, 0.081632003f)) + vec2<f32>(0.081632003f, 0.163264006f));
        let x_2594 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_2593.x, x_2594.y, x_2593.y, x_2594.w);
        let x_2597 : f32 = u_xlat8.x;
        u_xlat9.y = x_2597;
        let x_2600 : f32 = u_xlat10.y;
        u_xlat9.w = x_2600;
        let x_2602 : vec4<f32> = u_xlat9;
        let x_2603 : vec4<f32> = u_xlat11;
        u_xlat11 = (x_2602 + x_2603);
        let x_2605 : vec2<f32> = u_xlat49;
        let x_2608 : vec2<f32> = ((vec2<f32>(x_2605.y, x_2605.y) * vec2<f32>(-0.081632003f, 0.081632003f)) + vec2<f32>(0.163264006f, 0.081632003f));
        let x_2609 : vec4<f32> = u_xlat12;
        u_xlat12 = vec4<f32>(x_2609.x, x_2608.x, x_2609.z, x_2608.y);
        let x_2611 : vec2<f32> = u_xlat49;
        let x_2614 : vec2<f32> = ((vec2<f32>(x_2611.y, x_2611.y) * vec2<f32>(-0.081632003f, 0.081632003f)) + vec2<f32>(0.081632003f, 0.163264006f));
        let x_2615 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_2614.x, x_2615.y, x_2614.y, x_2615.w);
        let x_2618 : f32 = u_xlat8.y;
        u_xlat10.y = x_2618;
        let x_2620 : vec4<f32> = u_xlat10;
        let x_2621 : vec4<f32> = u_xlat12;
        u_xlat8 = (x_2620 + x_2621);
        let x_2623 : vec4<f32> = u_xlat9;
        let x_2624 : vec4<f32> = u_xlat11;
        u_xlat9 = (x_2623 / x_2624);
        let x_2626 : vec4<f32> = u_xlat9;
        u_xlat9 = (x_2626 + vec4<f32>(-3.5f, -1.5f, 0.5f, 2.5f));
        let x_2628 : vec4<f32> = u_xlat10;
        let x_2629 : vec4<f32> = u_xlat8;
        u_xlat10 = (x_2628 / x_2629);
        let x_2631 : vec4<f32> = u_xlat10;
        u_xlat10 = (x_2631 + vec4<f32>(-3.5f, -1.5f, 0.5f, 2.5f));
        let x_2633 : vec4<f32> = u_xlat9;
        let x_2636 : vec4<f32> = x_248.x_MainLightShadowmapSize;
        u_xlat9 = (vec4<f32>(x_2633.w, x_2633.x, x_2633.y, x_2633.z) * vec4<f32>(x_2636.x, x_2636.x, x_2636.x, x_2636.x));
        let x_2639 : vec4<f32> = u_xlat10;
        let x_2642 : vec4<f32> = x_248.x_MainLightShadowmapSize;
        u_xlat10 = (vec4<f32>(x_2639.x, x_2639.w, x_2639.y, x_2639.z) * vec4<f32>(x_2642.y, x_2642.y, x_2642.y, x_2642.y));
        let x_2645 : vec4<f32> = u_xlat9;
        let x_2646 : vec3<f32> = vec3<f32>(x_2645.y, x_2645.z, x_2645.w);
        let x_2647 : vec4<f32> = u_xlat12;
        u_xlat12 = vec4<f32>(x_2646.x, x_2647.y, x_2646.y, x_2646.z);
        let x_2650 : f32 = u_xlat10.x;
        u_xlat12.y = x_2650;
        let x_2652 : vec4<f32> = u_xlat7;
        let x_2655 : vec4<f32> = x_248.x_MainLightShadowmapSize;
        let x_2658 : vec4<f32> = u_xlat12;
        u_xlat13 = ((vec4<f32>(x_2652.x, x_2652.y, x_2652.x, x_2652.y) * vec4<f32>(x_2655.x, x_2655.y, x_2655.x, x_2655.y)) + vec4<f32>(x_2658.x, x_2658.y, x_2658.z, x_2658.y));
        let x_2661 : vec4<f32> = u_xlat7;
        let x_2664 : vec4<f32> = x_248.x_MainLightShadowmapSize;
        let x_2667 : vec4<f32> = u_xlat12;
        u_xlat49 = ((vec2<f32>(x_2661.x, x_2661.y) * vec2<f32>(x_2664.x, x_2664.y)) + vec2<f32>(x_2667.w, x_2667.y));
        let x_2671 : f32 = u_xlat12.y;
        u_xlat9.y = x_2671;
        let x_2674 : f32 = u_xlat10.z;
        u_xlat12.y = x_2674;
        let x_2676 : vec4<f32> = u_xlat7;
        let x_2679 : vec4<f32> = x_248.x_MainLightShadowmapSize;
        let x_2682 : vec4<f32> = u_xlat12;
        u_xlat14 = ((vec4<f32>(x_2676.x, x_2676.y, x_2676.x, x_2676.y) * vec4<f32>(x_2679.x, x_2679.y, x_2679.x, x_2679.y)) + vec4<f32>(x_2682.x, x_2682.y, x_2682.z, x_2682.y));
        let x_2685 : vec4<f32> = u_xlat7;
        let x_2688 : vec4<f32> = x_248.x_MainLightShadowmapSize;
        let x_2691 : vec4<f32> = u_xlat12;
        let x_2693 : vec2<f32> = ((vec2<f32>(x_2685.x, x_2685.y) * vec2<f32>(x_2688.x, x_2688.y)) + vec2<f32>(x_2691.w, x_2691.y));
        let x_2694 : vec4<f32> = u_xlat15;
        u_xlat15 = vec4<f32>(x_2693.x, x_2693.y, x_2694.z, x_2694.w);
        let x_2697 : f32 = u_xlat12.y;
        u_xlat9.z = x_2697;
        let x_2699 : vec4<f32> = u_xlat7;
        let x_2702 : vec4<f32> = x_248.x_MainLightShadowmapSize;
        let x_2705 : vec4<f32> = u_xlat9;
        u_xlat16 = ((vec4<f32>(x_2699.x, x_2699.y, x_2699.x, x_2699.y) * vec4<f32>(x_2702.x, x_2702.y, x_2702.x, x_2702.y)) + vec4<f32>(x_2705.x, x_2705.y, x_2705.x, x_2705.z));
        let x_2709 : f32 = u_xlat10.w;
        u_xlat12.y = x_2709;
        let x_2711 : vec4<f32> = u_xlat7;
        let x_2714 : vec4<f32> = x_248.x_MainLightShadowmapSize;
        let x_2717 : vec4<f32> = u_xlat12;
        u_xlat17 = ((vec4<f32>(x_2711.x, x_2711.y, x_2711.x, x_2711.y) * vec4<f32>(x_2714.x, x_2714.y, x_2714.x, x_2714.y)) + vec4<f32>(x_2717.x, x_2717.y, x_2717.z, x_2717.y));
        let x_2721 : vec4<f32> = u_xlat7;
        let x_2724 : vec4<f32> = x_248.x_MainLightShadowmapSize;
        let x_2727 : vec4<f32> = u_xlat12;
        let x_2729 : vec2<f32> = ((vec2<f32>(x_2721.x, x_2721.y) * vec2<f32>(x_2724.x, x_2724.y)) + vec2<f32>(x_2727.w, x_2727.y));
        let x_2730 : vec3<f32> = u_xlat30;
        u_xlat30 = vec3<f32>(x_2729.x, x_2729.y, x_2730.z);
        let x_2733 : f32 = u_xlat12.y;
        u_xlat9.w = x_2733;
        let x_2736 : vec4<f32> = u_xlat7;
        let x_2739 : vec4<f32> = x_248.x_MainLightShadowmapSize;
        let x_2742 : vec4<f32> = u_xlat9;
        u_xlat57 = ((vec2<f32>(x_2736.x, x_2736.y) * vec2<f32>(x_2739.x, x_2739.y)) + vec2<f32>(x_2742.x, x_2742.w));
        let x_2745 : vec4<f32> = u_xlat12;
        let x_2746 : vec3<f32> = vec3<f32>(x_2745.x, x_2745.z, x_2745.w);
        let x_2747 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_2746.x, x_2747.y, x_2746.y, x_2746.z);
        let x_2749 : vec4<f32> = u_xlat7;
        let x_2752 : vec4<f32> = x_248.x_MainLightShadowmapSize;
        let x_2755 : vec4<f32> = u_xlat10;
        u_xlat12 = ((vec4<f32>(x_2749.x, x_2749.y, x_2749.x, x_2749.y) * vec4<f32>(x_2752.x, x_2752.y, x_2752.x, x_2752.y)) + vec4<f32>(x_2755.x, x_2755.y, x_2755.z, x_2755.y));
        let x_2759 : vec4<f32> = u_xlat7;
        let x_2762 : vec4<f32> = x_248.x_MainLightShadowmapSize;
        let x_2765 : vec4<f32> = u_xlat10;
        u_xlat52 = ((vec2<f32>(x_2759.x, x_2759.y) * vec2<f32>(x_2762.x, x_2762.y)) + vec2<f32>(x_2765.w, x_2765.y));
        let x_2769 : f32 = u_xlat9.x;
        u_xlat10.x = x_2769;
        let x_2771 : vec4<f32> = u_xlat7;
        let x_2774 : vec4<f32> = x_248.x_MainLightShadowmapSize;
        let x_2777 : vec4<f32> = u_xlat10;
        let x_2779 : vec2<f32> = ((vec2<f32>(x_2771.x, x_2771.y) * vec2<f32>(x_2774.x, x_2774.y)) + vec2<f32>(x_2777.x, x_2777.y));
        let x_2780 : vec4<f32> = u_xlat7;
        u_xlat7 = vec4<f32>(x_2779.x, x_2779.y, x_2780.z, x_2780.w);
        let x_2782 : vec4<f32> = u_xlat8;
        let x_2784 : vec4<f32> = u_xlat11;
        u_xlat18 = (vec4<f32>(x_2782.x, x_2782.x, x_2782.x, x_2782.x) * x_2784);
        let x_2786 : vec4<f32> = u_xlat8;
        let x_2788 : vec4<f32> = u_xlat11;
        u_xlat19 = (vec4<f32>(x_2786.y, x_2786.y, x_2786.y, x_2786.y) * x_2788);
        let x_2791 : vec4<f32> = u_xlat8;
        let x_2793 : vec4<f32> = u_xlat11;
        u_xlat20 = (vec4<f32>(x_2791.z, x_2791.z, x_2791.z, x_2791.z) * x_2793);
        let x_2795 : vec4<f32> = u_xlat8;
        let x_2797 : vec4<f32> = u_xlat11;
        u_xlat8 = (vec4<f32>(x_2795.w, x_2795.w, x_2795.w, x_2795.w) * x_2797);
        let x_2800 : vec4<f32> = u_xlat13;
        let x_2801 : vec2<f32> = vec2<f32>(x_2800.x, x_2800.y);
        let x_2803 : f32 = vs_INTERP9.z;
        txVec43 = vec3<f32>(x_2801.x, x_2801.y, x_2803);
        let x_2810 : vec3<f32> = txVec43;
        let x_2812 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2810.xy, x_2810.z);
        u_xlat69 = x_2812;
        let x_2814 : vec4<f32> = u_xlat13;
        let x_2815 : vec2<f32> = vec2<f32>(x_2814.z, x_2814.w);
        let x_2817 : f32 = vs_INTERP9.z;
        txVec44 = vec3<f32>(x_2815.x, x_2815.y, x_2817);
        let x_2824 : vec3<f32> = txVec44;
        let x_2826 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2824.xy, x_2824.z);
        u_xlat9.x = x_2826;
        let x_2829 : f32 = u_xlat9.x;
        let x_2831 : f32 = u_xlat18.y;
        u_xlat9.x = (x_2829 * x_2831);
        let x_2835 : f32 = u_xlat18.x;
        let x_2836 : f32 = u_xlat69;
        let x_2839 : f32 = u_xlat9.x;
        u_xlat69 = ((x_2835 * x_2836) + x_2839);
        let x_2842 : vec2<f32> = u_xlat49;
        let x_2844 : f32 = vs_INTERP9.z;
        txVec45 = vec3<f32>(x_2842.x, x_2842.y, x_2844);
        let x_2851 : vec3<f32> = txVec45;
        let x_2853 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2851.xy, x_2851.z);
        u_xlat49.x = x_2853;
        let x_2856 : f32 = u_xlat18.z;
        let x_2858 : f32 = u_xlat49.x;
        let x_2860 : f32 = u_xlat69;
        u_xlat69 = ((x_2856 * x_2858) + x_2860);
        let x_2863 : vec4<f32> = u_xlat16;
        let x_2864 : vec2<f32> = vec2<f32>(x_2863.x, x_2863.y);
        let x_2866 : f32 = vs_INTERP9.z;
        txVec46 = vec3<f32>(x_2864.x, x_2864.y, x_2866);
        let x_2873 : vec3<f32> = txVec46;
        let x_2875 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2873.xy, x_2873.z);
        u_xlat49.x = x_2875;
        let x_2878 : f32 = u_xlat18.w;
        let x_2880 : f32 = u_xlat49.x;
        let x_2882 : f32 = u_xlat69;
        u_xlat69 = ((x_2878 * x_2880) + x_2882);
        let x_2885 : vec4<f32> = u_xlat14;
        let x_2886 : vec2<f32> = vec2<f32>(x_2885.x, x_2885.y);
        let x_2888 : f32 = vs_INTERP9.z;
        txVec47 = vec3<f32>(x_2886.x, x_2886.y, x_2888);
        let x_2895 : vec3<f32> = txVec47;
        let x_2897 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2895.xy, x_2895.z);
        u_xlat49.x = x_2897;
        let x_2900 : f32 = u_xlat19.x;
        let x_2902 : f32 = u_xlat49.x;
        let x_2904 : f32 = u_xlat69;
        u_xlat69 = ((x_2900 * x_2902) + x_2904);
        let x_2907 : vec4<f32> = u_xlat14;
        let x_2908 : vec2<f32> = vec2<f32>(x_2907.z, x_2907.w);
        let x_2910 : f32 = vs_INTERP9.z;
        txVec48 = vec3<f32>(x_2908.x, x_2908.y, x_2910);
        let x_2917 : vec3<f32> = txVec48;
        let x_2919 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2917.xy, x_2917.z);
        u_xlat49.x = x_2919;
        let x_2922 : f32 = u_xlat19.y;
        let x_2924 : f32 = u_xlat49.x;
        let x_2926 : f32 = u_xlat69;
        u_xlat69 = ((x_2922 * x_2924) + x_2926);
        let x_2929 : vec4<f32> = u_xlat15;
        let x_2930 : vec2<f32> = vec2<f32>(x_2929.x, x_2929.y);
        let x_2932 : f32 = vs_INTERP9.z;
        txVec49 = vec3<f32>(x_2930.x, x_2930.y, x_2932);
        let x_2939 : vec3<f32> = txVec49;
        let x_2941 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2939.xy, x_2939.z);
        u_xlat49.x = x_2941;
        let x_2944 : f32 = u_xlat19.z;
        let x_2946 : f32 = u_xlat49.x;
        let x_2948 : f32 = u_xlat69;
        u_xlat69 = ((x_2944 * x_2946) + x_2948);
        let x_2951 : vec4<f32> = u_xlat16;
        let x_2952 : vec2<f32> = vec2<f32>(x_2951.z, x_2951.w);
        let x_2954 : f32 = vs_INTERP9.z;
        txVec50 = vec3<f32>(x_2952.x, x_2952.y, x_2954);
        let x_2961 : vec3<f32> = txVec50;
        let x_2963 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2961.xy, x_2961.z);
        u_xlat49.x = x_2963;
        let x_2966 : f32 = u_xlat19.w;
        let x_2968 : f32 = u_xlat49.x;
        let x_2970 : f32 = u_xlat69;
        u_xlat69 = ((x_2966 * x_2968) + x_2970);
        let x_2973 : vec4<f32> = u_xlat17;
        let x_2974 : vec2<f32> = vec2<f32>(x_2973.x, x_2973.y);
        let x_2976 : f32 = vs_INTERP9.z;
        txVec51 = vec3<f32>(x_2974.x, x_2974.y, x_2976);
        let x_2983 : vec3<f32> = txVec51;
        let x_2985 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2983.xy, x_2983.z);
        u_xlat49.x = x_2985;
        let x_2988 : f32 = u_xlat20.x;
        let x_2990 : f32 = u_xlat49.x;
        let x_2992 : f32 = u_xlat69;
        u_xlat69 = ((x_2988 * x_2990) + x_2992);
        let x_2995 : vec4<f32> = u_xlat17;
        let x_2996 : vec2<f32> = vec2<f32>(x_2995.z, x_2995.w);
        let x_2998 : f32 = vs_INTERP9.z;
        txVec52 = vec3<f32>(x_2996.x, x_2996.y, x_2998);
        let x_3005 : vec3<f32> = txVec52;
        let x_3007 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_3005.xy, x_3005.z);
        u_xlat49.x = x_3007;
        let x_3010 : f32 = u_xlat20.y;
        let x_3012 : f32 = u_xlat49.x;
        let x_3014 : f32 = u_xlat69;
        u_xlat69 = ((x_3010 * x_3012) + x_3014);
        let x_3017 : vec3<f32> = u_xlat30;
        let x_3018 : vec2<f32> = vec2<f32>(x_3017.x, x_3017.y);
        let x_3020 : f32 = vs_INTERP9.z;
        txVec53 = vec3<f32>(x_3018.x, x_3018.y, x_3020);
        let x_3027 : vec3<f32> = txVec53;
        let x_3029 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_3027.xy, x_3027.z);
        u_xlat49.x = x_3029;
        let x_3032 : f32 = u_xlat20.z;
        let x_3034 : f32 = u_xlat49.x;
        let x_3036 : f32 = u_xlat69;
        u_xlat69 = ((x_3032 * x_3034) + x_3036);
        let x_3039 : vec2<f32> = u_xlat57;
        let x_3041 : f32 = vs_INTERP9.z;
        txVec54 = vec3<f32>(x_3039.x, x_3039.y, x_3041);
        let x_3048 : vec3<f32> = txVec54;
        let x_3050 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_3048.xy, x_3048.z);
        u_xlat49.x = x_3050;
        let x_3053 : f32 = u_xlat20.w;
        let x_3055 : f32 = u_xlat49.x;
        let x_3057 : f32 = u_xlat69;
        u_xlat69 = ((x_3053 * x_3055) + x_3057);
        let x_3060 : vec4<f32> = u_xlat12;
        let x_3061 : vec2<f32> = vec2<f32>(x_3060.x, x_3060.y);
        let x_3063 : f32 = vs_INTERP9.z;
        txVec55 = vec3<f32>(x_3061.x, x_3061.y, x_3063);
        let x_3070 : vec3<f32> = txVec55;
        let x_3072 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_3070.xy, x_3070.z);
        u_xlat49.x = x_3072;
        let x_3075 : f32 = u_xlat8.x;
        let x_3077 : f32 = u_xlat49.x;
        let x_3079 : f32 = u_xlat69;
        u_xlat69 = ((x_3075 * x_3077) + x_3079);
        let x_3082 : vec4<f32> = u_xlat12;
        let x_3083 : vec2<f32> = vec2<f32>(x_3082.z, x_3082.w);
        let x_3085 : f32 = vs_INTERP9.z;
        txVec56 = vec3<f32>(x_3083.x, x_3083.y, x_3085);
        let x_3092 : vec3<f32> = txVec56;
        let x_3094 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_3092.xy, x_3092.z);
        u_xlat49.x = x_3094;
        let x_3097 : f32 = u_xlat8.y;
        let x_3099 : f32 = u_xlat49.x;
        let x_3101 : f32 = u_xlat69;
        u_xlat69 = ((x_3097 * x_3099) + x_3101);
        let x_3104 : vec2<f32> = u_xlat52;
        let x_3106 : f32 = vs_INTERP9.z;
        txVec57 = vec3<f32>(x_3104.x, x_3104.y, x_3106);
        let x_3113 : vec3<f32> = txVec57;
        let x_3115 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_3113.xy, x_3113.z);
        u_xlat49.x = x_3115;
        let x_3118 : f32 = u_xlat8.z;
        let x_3120 : f32 = u_xlat49.x;
        let x_3122 : f32 = u_xlat69;
        u_xlat69 = ((x_3118 * x_3120) + x_3122);
        let x_3125 : vec4<f32> = u_xlat7;
        let x_3126 : vec2<f32> = vec2<f32>(x_3125.x, x_3125.y);
        let x_3128 : f32 = vs_INTERP9.z;
        txVec58 = vec3<f32>(x_3126.x, x_3126.y, x_3128);
        let x_3135 : vec3<f32> = txVec58;
        let x_3137 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_3135.xy, x_3135.z);
        u_xlat7.x = x_3137;
        let x_3140 : f32 = u_xlat8.w;
        let x_3142 : f32 = u_xlat7.x;
        let x_3144 : f32 = u_xlat69;
        u_xlat0.x = ((x_3140 * x_3142) + x_3144);
      }
    }
  } else {
    let x_3149 : vec4<f32> = vs_INTERP9;
    let x_3150 : vec2<f32> = vec2<f32>(x_3149.x, x_3149.y);
    let x_3152 : f32 = vs_INTERP9.z;
    txVec59 = vec3<f32>(x_3150.x, x_3150.y, x_3152);
    let x_3159 : vec3<f32> = txVec59;
    let x_3161 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_3159.xy, x_3159.z);
    u_xlat0.x = x_3161;
  }
  let x_3164 : f32 = u_xlat0.x;
  let x_3166 : f32 = x_248.x_MainLightShadowParams.x;
  let x_3169 : f32 = u_xlat2.x;
  u_xlat0.x = ((x_3164 * x_3166) + x_3169);
  let x_3174 : f32 = vs_INTERP9.z;
  u_xlatb2 = (0.0f >= x_3174);
  let x_3177 : f32 = vs_INTERP9.z;
  u_xlatb69 = (x_3177 >= 1.0f);
  let x_3179 : bool = u_xlatb2;
  let x_3180 : bool = u_xlatb69;
  u_xlatb2 = (x_3179 | x_3180);
  let x_3182 : bool = u_xlatb2;
  if (x_3182) {
    x_3183 = 1.0f;
  } else {
    let x_3188 : f32 = u_xlat0.x;
    x_3183 = x_3188;
  }
  let x_3189 : f32 = x_3183;
  u_xlat0.x = x_3189;
  let x_3191 : vec3<f32> = vs_INTERP0;
  let x_3193 : vec3<f32> = x_137.x_WorldSpaceCameraPos;
  let x_3195 : vec3<f32> = (x_3191 + -(x_3193));
  let x_3196 : vec4<f32> = u_xlat7;
  u_xlat7 = vec4<f32>(x_3195.x, x_3195.y, x_3195.z, x_3196.w);
  let x_3198 : vec4<f32> = u_xlat7;
  let x_3200 : vec4<f32> = u_xlat7;
  u_xlat2.x = dot(vec3<f32>(x_3198.x, x_3198.y, x_3198.z), vec3<f32>(x_3200.x, x_3200.y, x_3200.z));
  let x_3205 : f32 = u_xlat2.x;
  let x_3207 : f32 = x_248.x_MainLightShadowParams.z;
  let x_3210 : f32 = x_248.x_MainLightShadowParams.w;
  u_xlat2.x = ((x_3205 * x_3207) + x_3210);
  let x_3214 : f32 = u_xlat2.x;
  u_xlat2.x = clamp(x_3214, 0.0f, 1.0f);
  let x_3218 : f32 = u_xlat0.x;
  u_xlat69 = (-(x_3218) + 1.0f);
  let x_3222 : f32 = u_xlat2.x;
  let x_3223 : f32 = u_xlat69;
  let x_3226 : f32 = u_xlat0.x;
  u_xlat0.x = ((x_3222 * x_3223) + x_3226);
  let x_3229 : f32 = u_xlat48;
  let x_3232 : vec4<f32> = x_137.x_MainLightColor;
  let x_3234 : vec3<f32> = (vec3<f32>(x_3229, x_3229, x_3229) * vec3<f32>(x_3232.x, x_3232.y, x_3232.z));
  let x_3235 : vec4<f32> = u_xlat7;
  u_xlat7 = vec4<f32>(x_3234.x, x_3234.y, x_3234.z, x_3235.w);
  let x_3237 : vec3<f32> = u_xlat21;
  let x_3239 : vec4<f32> = u_xlat3;
  u_xlat2.x = dot(-(x_3237), vec3<f32>(x_3239.x, x_3239.y, x_3239.z));
  let x_3244 : f32 = u_xlat2.x;
  let x_3246 : f32 = u_xlat2.x;
  u_xlat2.x = (x_3244 + x_3246);
  let x_3249 : vec4<f32> = u_xlat3;
  let x_3251 : vec3<f32> = u_xlat2;
  let x_3255 : vec3<f32> = u_xlat21;
  let x_3257 : vec3<f32> = ((vec3<f32>(x_3249.x, x_3249.y, x_3249.z) * -(vec3<f32>(x_3251.x, x_3251.x, x_3251.x))) + -(x_3255));
  let x_3258 : vec4<f32> = u_xlat8;
  u_xlat8 = vec4<f32>(x_3257.x, x_3257.y, x_3257.z, x_3258.w);
  let x_3260 : vec4<f32> = u_xlat3;
  let x_3262 : vec3<f32> = u_xlat21;
  u_xlat2.x = dot(vec3<f32>(x_3260.x, x_3260.y, x_3260.z), x_3262);
  let x_3266 : f32 = u_xlat2.x;
  u_xlat2.x = clamp(x_3266, 0.0f, 1.0f);
  let x_3270 : f32 = u_xlat2.x;
  u_xlat2.x = (-(x_3270) + 1.0f);
  let x_3275 : f32 = u_xlat2.x;
  let x_3277 : f32 = u_xlat2.x;
  u_xlat2.x = (x_3275 * x_3277);
  let x_3281 : f32 = u_xlat2.x;
  let x_3283 : f32 = u_xlat2.x;
  u_xlat2.x = (x_3281 * x_3283);
  let x_3286 : f32 = u_xlat65;
  u_xlat69 = ((-(x_3286) * 0.699999988f) + 1.700000048f);
  let x_3292 : f32 = u_xlat65;
  let x_3293 : f32 = u_xlat69;
  u_xlat65 = (x_3292 * x_3293);
  let x_3295 : f32 = u_xlat65;
  u_xlat65 = (x_3295 * 6.0f);
  let x_3306 : vec4<f32> = u_xlat8;
  let x_3308 : f32 = u_xlat65;
  let x_3309 : vec4<f32> = textureSampleLevel(unity_SpecCube0, samplerunity_SpecCube0, vec3<f32>(x_3306.x, x_3306.y, x_3306.z), x_3308);
  u_xlat8 = x_3309;
  let x_3311 : f32 = u_xlat8.w;
  u_xlat65 = (x_3311 + -1.0f);
  let x_3314 : f32 = x_60.unity_SpecCube0_HDR.w;
  let x_3315 : f32 = u_xlat65;
  u_xlat65 = ((x_3314 * x_3315) + 1.0f);
  let x_3318 : f32 = u_xlat65;
  u_xlat65 = max(x_3318, 0.0f);
  let x_3320 : f32 = u_xlat65;
  u_xlat65 = log2(x_3320);
  let x_3322 : f32 = u_xlat65;
  let x_3324 : f32 = x_60.unity_SpecCube0_HDR.y;
  u_xlat65 = (x_3322 * x_3324);
  let x_3326 : f32 = u_xlat65;
  u_xlat65 = exp2(x_3326);
  let x_3328 : f32 = u_xlat65;
  let x_3330 : f32 = x_60.unity_SpecCube0_HDR.x;
  u_xlat65 = (x_3328 * x_3330);
  let x_3332 : vec4<f32> = u_xlat8;
  let x_3334 : f32 = u_xlat65;
  let x_3336 : vec3<f32> = (vec3<f32>(x_3332.x, x_3332.y, x_3332.z) * vec3<f32>(x_3334, x_3334, x_3334));
  let x_3337 : vec4<f32> = u_xlat8;
  u_xlat8 = vec4<f32>(x_3336.x, x_3336.y, x_3336.z, x_3337.w);
  let x_3339 : f32 = u_xlat66;
  let x_3341 : f32 = u_xlat66;
  let x_3345 : vec2<f32> = ((vec2<f32>(x_3339, x_3339) * vec2<f32>(x_3341, x_3341)) + vec2<f32>(-1.0f, 1.0f));
  let x_3346 : vec4<f32> = u_xlat9;
  u_xlat9 = vec4<f32>(x_3345.x, x_3345.y, x_3346.z, x_3346.w);
  let x_3349 : f32 = u_xlat9.y;
  u_xlat65 = (1.0f / x_3349);
  let x_3351 : f32 = u_xlat68;
  u_xlat66 = (x_3351 + -0.039999999f);
  let x_3355 : f32 = u_xlat2.x;
  let x_3356 : f32 = u_xlat66;
  u_xlat2.x = ((x_3355 * x_3356) + 0.039999999f);
  let x_3362 : f32 = u_xlat2.x;
  let x_3363 : f32 = u_xlat65;
  u_xlat2.x = (x_3362 * x_3363);
  let x_3366 : vec3<f32> = u_xlat2;
  let x_3368 : vec4<f32> = u_xlat8;
  let x_3370 : vec3<f32> = (vec3<f32>(x_3366.x, x_3366.x, x_3366.x) * vec3<f32>(x_3368.x, x_3368.y, x_3368.z));
  let x_3371 : vec4<f32> = u_xlat8;
  u_xlat8 = vec4<f32>(x_3370.x, x_3370.y, x_3370.z, x_3371.w);
  let x_3373 : vec4<f32> = u_xlat4;
  let x_3375 : vec3<f32> = u_xlat5;
  let x_3377 : vec4<f32> = u_xlat8;
  let x_3379 : vec3<f32> = ((vec3<f32>(x_3373.x, x_3373.y, x_3373.z) * x_3375) + vec3<f32>(x_3377.x, x_3377.y, x_3377.z));
  let x_3380 : vec4<f32> = u_xlat4;
  u_xlat4 = vec4<f32>(x_3379.x, x_3379.y, x_3379.z, x_3380.w);
  let x_3383 : f32 = u_xlat0.x;
  let x_3385 : f32 = x_60.unity_LightData.z;
  u_xlat0.x = (x_3383 * x_3385);
  let x_3388 : vec4<f32> = u_xlat3;
  let x_3391 : vec4<f32> = x_137.x_MainLightPosition;
  u_xlat2.x = dot(vec3<f32>(x_3388.x, x_3388.y, x_3388.z), vec3<f32>(x_3391.x, x_3391.y, x_3391.z));
  let x_3396 : f32 = u_xlat2.x;
  u_xlat2.x = clamp(x_3396, 0.0f, 1.0f);
  let x_3400 : f32 = u_xlat0.x;
  let x_3402 : f32 = u_xlat2.x;
  u_xlat0.x = (x_3400 * x_3402);
  let x_3405 : vec3<f32> = u_xlat0;
  let x_3407 : vec4<f32> = u_xlat7;
  let x_3409 : vec3<f32> = (vec3<f32>(x_3405.x, x_3405.x, x_3405.x) * vec3<f32>(x_3407.x, x_3407.y, x_3407.z));
  let x_3410 : vec4<f32> = u_xlat7;
  u_xlat7 = vec4<f32>(x_3409.x, x_3409.y, x_3409.z, x_3410.w);
  let x_3412 : vec3<f32> = u_xlat21;
  let x_3414 : vec4<f32> = x_137.x_MainLightPosition;
  let x_3416 : vec3<f32> = (x_3412 + vec3<f32>(x_3414.x, x_3414.y, x_3414.z));
  let x_3417 : vec4<f32> = u_xlat8;
  u_xlat8 = vec4<f32>(x_3416.x, x_3416.y, x_3416.z, x_3417.w);
  let x_3419 : vec4<f32> = u_xlat8;
  let x_3421 : vec4<f32> = u_xlat8;
  u_xlat0.x = dot(vec3<f32>(x_3419.x, x_3419.y, x_3419.z), vec3<f32>(x_3421.x, x_3421.y, x_3421.z));
  let x_3426 : f32 = u_xlat0.x;
  u_xlat0.x = max(x_3426, 1.17549435e-37f);
  let x_3430 : f32 = u_xlat0.x;
  u_xlat0.x = inverseSqrt(x_3430);
  let x_3433 : vec3<f32> = u_xlat0;
  let x_3435 : vec4<f32> = u_xlat8;
  let x_3437 : vec3<f32> = (vec3<f32>(x_3433.x, x_3433.x, x_3433.x) * vec3<f32>(x_3435.x, x_3435.y, x_3435.z));
  let x_3438 : vec4<f32> = u_xlat8;
  u_xlat8 = vec4<f32>(x_3437.x, x_3437.y, x_3437.z, x_3438.w);
  let x_3440 : vec4<f32> = u_xlat3;
  let x_3442 : vec4<f32> = u_xlat8;
  u_xlat0.x = dot(vec3<f32>(x_3440.x, x_3440.y, x_3440.z), vec3<f32>(x_3442.x, x_3442.y, x_3442.z));
  let x_3447 : f32 = u_xlat0.x;
  u_xlat0.x = clamp(x_3447, 0.0f, 1.0f);
  let x_3451 : vec4<f32> = x_137.x_MainLightPosition;
  let x_3453 : vec4<f32> = u_xlat8;
  u_xlat2.x = dot(vec3<f32>(x_3451.x, x_3451.y, x_3451.z), vec3<f32>(x_3453.x, x_3453.y, x_3453.z));
  let x_3458 : f32 = u_xlat2.x;
  u_xlat2.x = clamp(x_3458, 0.0f, 1.0f);
  let x_3462 : f32 = u_xlat0.x;
  let x_3464 : f32 = u_xlat0.x;
  u_xlat0.x = (x_3462 * x_3464);
  let x_3468 : f32 = u_xlat0.x;
  let x_3470 : f32 = u_xlat9.x;
  u_xlat0.x = ((x_3468 * x_3470) + 1.000010014f);
  let x_3476 : f32 = u_xlat2.x;
  let x_3478 : f32 = u_xlat2.x;
  u_xlat2.x = (x_3476 * x_3478);
  let x_3482 : f32 = u_xlat0.x;
  let x_3484 : f32 = u_xlat0.x;
  u_xlat0.x = (x_3482 * x_3484);
  let x_3488 : f32 = u_xlat2.x;
  u_xlat2.x = max(x_3488, 0.100000001f);
  let x_3493 : f32 = u_xlat0.x;
  let x_3495 : f32 = u_xlat2.x;
  u_xlat0.x = (x_3493 * x_3495);
  let x_3499 : f32 = u_xlat6.x;
  let x_3501 : f32 = u_xlat0.x;
  u_xlat0.x = (x_3499 * x_3501);
  let x_3504 : f32 = u_xlat67;
  let x_3506 : f32 = u_xlat0.x;
  u_xlat0.x = (x_3504 / x_3506);
  let x_3509 : vec3<f32> = u_xlat0;
  let x_3513 : vec3<f32> = u_xlat5;
  let x_3514 : vec3<f32> = ((vec3<f32>(x_3509.x, x_3509.x, x_3509.x) * vec3<f32>(0.039999999f, 0.039999999f, 0.039999999f)) + x_3513);
  let x_3515 : vec4<f32> = u_xlat8;
  u_xlat8 = vec4<f32>(x_3514.x, x_3514.y, x_3514.z, x_3515.w);
  let x_3517 : vec4<f32> = u_xlat7;
  let x_3519 : vec4<f32> = u_xlat8;
  let x_3521 : vec3<f32> = (vec3<f32>(x_3517.x, x_3517.y, x_3517.z) * vec3<f32>(x_3519.x, x_3519.y, x_3519.z));
  let x_3522 : vec4<f32> = u_xlat7;
  u_xlat7 = vec4<f32>(x_3521.x, x_3521.y, x_3521.z, x_3522.w);
  let x_3525 : f32 = x_137.x_AdditionalLightsCount.x;
  let x_3527 : f32 = x_60.unity_LightData.y;
  u_xlat0.x = min(x_3525, x_3527);
  let x_3533 : f32 = u_xlat0.x;
  u_xlatu0 = bitcast<u32>(i32(x_3533));
  u_xlat8.x = 0.0f;
  u_xlat8.y = 0.0f;
  u_xlat8.z = 0.0f;
  u_xlatu_loop_1 = 0u;
  loop {
    let x_3545 : u32 = u_xlatu_loop_1;
    let x_3546 : u32 = u_xlatu0;
    if ((x_3545 < x_3546)) {
    } else {
      break;
    }
    let x_3549 : u32 = u_xlatu_loop_1;
    u_xlatu65 = (x_3549 >> 2u);
    let x_3553 : u32 = u_xlatu_loop_1;
    u_xlati66 = bitcast<i32>((x_3553 & 3u));
    let x_3556 : u32 = u_xlatu65;
    let x_3559 : vec4<f32> = x_60.unity_LightIndices[bitcast<i32>(x_3556)];
    let x_3569 : i32 = u_xlati66;
    indexable = array<vec4<u32>, 4u>(vec4<u32>(1065353216u, 0u, 0u, 0u), vec4<u32>(0u, 1065353216u, 0u, 0u), vec4<u32>(0u, 0u, 1065353216u, 0u), vec4<u32>(0u, 0u, 0u, 1065353216u));
    let x_3574 : vec4<u32> = indexable[x_3569];
    u_xlat65 = dot(x_3559, bitcast<vec4<f32>>(x_3574));
    let x_3578 : f32 = u_xlat65;
    u_xlati65 = i32(x_3578);
    let x_3580 : vec3<f32> = vs_INTERP0;
    let x_3592 : i32 = u_xlati65;
    let x_3594 : vec4<f32> = x_3591.x_AdditionalLightsPosition[x_3592];
    let x_3597 : i32 = u_xlati65;
    let x_3599 : vec4<f32> = x_3591.x_AdditionalLightsPosition[x_3597];
    u_xlat30 = ((-(x_3580) * vec3<f32>(x_3594.w, x_3594.w, x_3594.w)) + vec3<f32>(x_3599.x, x_3599.y, x_3599.z));
    let x_3602 : vec3<f32> = u_xlat30;
    let x_3603 : vec3<f32> = u_xlat30;
    u_xlat66 = dot(x_3602, x_3603);
    let x_3605 : f32 = u_xlat66;
    u_xlat66 = max(x_3605, 6.10351562e-05f);
    let x_3608 : f32 = u_xlat66;
    u_xlat68 = inverseSqrt(x_3608);
    let x_3610 : f32 = u_xlat68;
    let x_3612 : vec3<f32> = u_xlat30;
    let x_3613 : vec3<f32> = (vec3<f32>(x_3610, x_3610, x_3610) * x_3612);
    let x_3614 : vec4<f32> = u_xlat10;
    u_xlat10 = vec4<f32>(x_3613.x, x_3613.y, x_3613.z, x_3614.w);
    let x_3616 : f32 = u_xlat66;
    u_xlat69 = (1.0f / x_3616);
    let x_3618 : f32 = u_xlat66;
    let x_3619 : i32 = u_xlati65;
    let x_3621 : f32 = x_3591.x_AdditionalLightsAttenuation[x_3619].x;
    u_xlat66 = (x_3618 * x_3621);
    let x_3623 : f32 = u_xlat66;
    let x_3625 : f32 = u_xlat66;
    u_xlat66 = ((-(x_3623) * x_3625) + 1.0f);
    let x_3628 : f32 = u_xlat66;
    u_xlat66 = max(x_3628, 0.0f);
    let x_3630 : f32 = u_xlat66;
    let x_3631 : f32 = u_xlat66;
    u_xlat66 = (x_3630 * x_3631);
    let x_3633 : f32 = u_xlat66;
    let x_3634 : f32 = u_xlat69;
    u_xlat66 = (x_3633 * x_3634);
    let x_3636 : i32 = u_xlati65;
    let x_3638 : vec4<f32> = x_3591.x_AdditionalLightsSpotDir[x_3636];
    let x_3640 : vec4<f32> = u_xlat10;
    u_xlat69 = dot(vec3<f32>(x_3638.x, x_3638.y, x_3638.z), vec3<f32>(x_3640.x, x_3640.y, x_3640.z));
    let x_3643 : f32 = u_xlat69;
    let x_3644 : i32 = u_xlati65;
    let x_3646 : f32 = x_3591.x_AdditionalLightsAttenuation[x_3644].z;
    let x_3648 : i32 = u_xlati65;
    let x_3650 : f32 = x_3591.x_AdditionalLightsAttenuation[x_3648].w;
    u_xlat69 = ((x_3643 * x_3646) + x_3650);
    let x_3652 : f32 = u_xlat69;
    u_xlat69 = clamp(x_3652, 0.0f, 1.0f);
    let x_3654 : f32 = u_xlat69;
    let x_3655 : f32 = u_xlat69;
    u_xlat69 = (x_3654 * x_3655);
    let x_3657 : f32 = u_xlat66;
    let x_3658 : f32 = u_xlat69;
    u_xlat66 = (x_3657 * x_3658);
    let x_3660 : f32 = u_xlat48;
    let x_3662 : i32 = u_xlati65;
    let x_3664 : vec4<f32> = x_3591.x_AdditionalLightsColor[x_3662];
    let x_3666 : vec3<f32> = (vec3<f32>(x_3660, x_3660, x_3660) * vec3<f32>(x_3664.x, x_3664.y, x_3664.z));
    let x_3667 : vec4<f32> = u_xlat11;
    u_xlat11 = vec4<f32>(x_3666.x, x_3666.y, x_3666.z, x_3667.w);
    let x_3669 : vec4<f32> = u_xlat3;
    let x_3671 : vec4<f32> = u_xlat10;
    u_xlat65 = dot(vec3<f32>(x_3669.x, x_3669.y, x_3669.z), vec3<f32>(x_3671.x, x_3671.y, x_3671.z));
    let x_3674 : f32 = u_xlat65;
    u_xlat65 = clamp(x_3674, 0.0f, 1.0f);
    let x_3676 : f32 = u_xlat65;
    let x_3677 : f32 = u_xlat66;
    u_xlat65 = (x_3676 * x_3677);
    let x_3679 : f32 = u_xlat65;
    let x_3681 : vec4<f32> = u_xlat11;
    let x_3683 : vec3<f32> = (vec3<f32>(x_3679, x_3679, x_3679) * vec3<f32>(x_3681.x, x_3681.y, x_3681.z));
    let x_3684 : vec4<f32> = u_xlat11;
    u_xlat11 = vec4<f32>(x_3683.x, x_3683.y, x_3683.z, x_3684.w);
    let x_3686 : vec3<f32> = u_xlat30;
    let x_3687 : f32 = u_xlat68;
    let x_3690 : vec3<f32> = u_xlat21;
    u_xlat30 = ((x_3686 * vec3<f32>(x_3687, x_3687, x_3687)) + x_3690);
    let x_3692 : vec3<f32> = u_xlat30;
    let x_3693 : vec3<f32> = u_xlat30;
    u_xlat65 = dot(x_3692, x_3693);
    let x_3695 : f32 = u_xlat65;
    u_xlat65 = max(x_3695, 1.17549435e-37f);
    let x_3697 : f32 = u_xlat65;
    u_xlat65 = inverseSqrt(x_3697);
    let x_3699 : f32 = u_xlat65;
    let x_3701 : vec3<f32> = u_xlat30;
    u_xlat30 = (vec3<f32>(x_3699, x_3699, x_3699) * x_3701);
    let x_3703 : vec4<f32> = u_xlat3;
    let x_3705 : vec3<f32> = u_xlat30;
    u_xlat65 = dot(vec3<f32>(x_3703.x, x_3703.y, x_3703.z), x_3705);
    let x_3707 : f32 = u_xlat65;
    u_xlat65 = clamp(x_3707, 0.0f, 1.0f);
    let x_3709 : vec4<f32> = u_xlat10;
    let x_3711 : vec3<f32> = u_xlat30;
    u_xlat66 = dot(vec3<f32>(x_3709.x, x_3709.y, x_3709.z), x_3711);
    let x_3713 : f32 = u_xlat66;
    u_xlat66 = clamp(x_3713, 0.0f, 1.0f);
    let x_3715 : f32 = u_xlat65;
    let x_3716 : f32 = u_xlat65;
    u_xlat65 = (x_3715 * x_3716);
    let x_3718 : f32 = u_xlat65;
    let x_3720 : f32 = u_xlat9.x;
    u_xlat65 = ((x_3718 * x_3720) + 1.000010014f);
    let x_3723 : f32 = u_xlat66;
    let x_3724 : f32 = u_xlat66;
    u_xlat66 = (x_3723 * x_3724);
    let x_3726 : f32 = u_xlat65;
    let x_3727 : f32 = u_xlat65;
    u_xlat65 = (x_3726 * x_3727);
    let x_3729 : f32 = u_xlat66;
    u_xlat66 = max(x_3729, 0.100000001f);
    let x_3731 : f32 = u_xlat65;
    let x_3732 : f32 = u_xlat66;
    u_xlat65 = (x_3731 * x_3732);
    let x_3735 : f32 = u_xlat6.x;
    let x_3736 : f32 = u_xlat65;
    u_xlat65 = (x_3735 * x_3736);
    let x_3738 : f32 = u_xlat67;
    let x_3739 : f32 = u_xlat65;
    u_xlat65 = (x_3738 / x_3739);
    let x_3741 : f32 = u_xlat65;
    let x_3744 : vec3<f32> = u_xlat5;
    u_xlat30 = ((vec3<f32>(x_3741, x_3741, x_3741) * vec3<f32>(0.039999999f, 0.039999999f, 0.039999999f)) + x_3744);
    let x_3746 : vec3<f32> = u_xlat30;
    let x_3747 : vec4<f32> = u_xlat11;
    let x_3750 : vec4<f32> = u_xlat8;
    let x_3752 : vec3<f32> = ((x_3746 * vec3<f32>(x_3747.x, x_3747.y, x_3747.z)) + vec3<f32>(x_3750.x, x_3750.y, x_3750.z));
    let x_3753 : vec4<f32> = u_xlat8;
    u_xlat8 = vec4<f32>(x_3752.x, x_3752.y, x_3752.z, x_3753.w);

    continuing {
      let x_3755 : u32 = u_xlatu_loop_1;
      u_xlatu_loop_1 = (x_3755 + bitcast<u32>(1i));
    }
  }
  let x_3757 : vec4<f32> = u_xlat4;
  let x_3759 : vec3<f32> = u_xlat27;
  let x_3762 : vec4<f32> = u_xlat7;
  u_xlat0 = ((vec3<f32>(x_3757.x, x_3757.y, x_3757.z) * vec3<f32>(x_3759.x, x_3759.x, x_3759.x)) + vec3<f32>(x_3762.x, x_3762.y, x_3762.z));
  let x_3765 : vec4<f32> = u_xlat8;
  let x_3767 : vec3<f32> = u_xlat0;
  u_xlat0 = (vec3<f32>(x_3765.x, x_3765.y, x_3765.z) + x_3767);
  let x_3769 : vec4<f32> = vs_INTERP4;
  let x_3771 : vec3<f32> = u_xlat1;
  let x_3773 : vec3<f32> = u_xlat0;
  u_xlat0 = ((vec3<f32>(x_3769.w, x_3769.w, x_3769.w) * x_3771) + x_3773);
  let x_3776 : f32 = u_xlat23;
  let x_3777 : f32 = u_xlat23;
  u_xlat63 = (x_3776 * -(x_3777));
  let x_3780 : f32 = u_xlat63;
  u_xlat63 = exp2(x_3780);
  let x_3782 : vec3<f32> = u_xlat0;
  let x_3785 : vec4<f32> = x_137.unity_FogColor;
  u_xlat0 = (x_3782 + -(vec3<f32>(x_3785.x, x_3785.y, x_3785.z)));
  let x_3791 : f32 = u_xlat63;
  let x_3793 : vec3<f32> = u_xlat0;
  let x_3796 : vec4<f32> = x_137.unity_FogColor;
  let x_3798 : vec3<f32> = ((vec3<f32>(x_3791, x_3791, x_3791) * x_3793) + vec3<f32>(x_3796.x, x_3796.y, x_3796.z));
  let x_3799 : vec4<f32> = SV_Target0;
  SV_Target0 = vec4<f32>(x_3798.x, x_3798.y, x_3798.z, x_3799.w);
  let x_3801 : bool = u_xlatb44;
  let x_3802 : f32 = u_xlat64;
  SV_Target0.w = select(1.0f, x_3802, x_3801);
  let x_3808 : u32 = x_137.x_RenderingLayerMaxInt;
  let x_3810 : f32 = x_60.unity_RenderingLayer.x;
  u_xlatu0 = (x_3808 & bitcast<u32>(x_3810));
  let x_3813 : u32 = u_xlatu0;
  u_xlat0.x = f32(x_3813);
  let x_3818 : f32 = u_xlat0.x;
  let x_3820 : f32 = x_137.x_RenderingLayerRcpMaxInt;
  SV_Target1.x = (x_3818 * x_3820);
  let x_3824 : f32 = SV_Target1.x;
  SV_Target1.x = clamp(x_3824, 0.0f, 1.0f);
  let x_3827 : vec4<f32> = SV_Target1;
  SV_Target1 = vec4<f32>(x_3827.x, vec3<f32>(0.0f, 0.0f, 0.0f).x, vec3<f32>(0.0f, 0.0f, 0.0f).y, vec3<f32>(0.0f, 0.0f, 0.0f).z);
  return;
}

struct main_out {
  @location(0)
  SV_Target0_1 : vec4<f32>,
  @location(1)
  SV_Target1_1 : vec4<f32>,
}

@fragment
fn main(@builtin(position) gl_FragCoord_param : vec4<f32>, @location(1) vs_INTERP1_param : vec3<f32>, @location(2) vs_INTERP2_param : vec4<f32>, @location(3) vs_INTERP3_param : vec4<f32>, @location(4) vs_INTERP4_param : vec4<f32>, @location(0) vs_INTERP0_param : vec3<f32>, @location(5) vs_INTERP9_param : vec4<f32>) -> main_out {
  gl_FragCoord = gl_FragCoord_param;
  vs_INTERP1 = vs_INTERP1_param;
  vs_INTERP2 = vs_INTERP2_param;
  vs_INTERP3 = vs_INTERP3_param;
  vs_INTERP4 = vs_INTERP4_param;
  vs_INTERP0 = vs_INTERP0_param;
  vs_INTERP9 = vs_INTERP9_param;
  main_1();
  return main_out(SV_Target0, SV_Target1);
}

