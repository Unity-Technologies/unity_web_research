type Arr = array<vec4<f32>, 2u>;

type Arr_1 = array<mat4x4<f32>, 2u>;

type Arr_2 = array<vec4<f32>, 2u>;

type Arr_3 = array<vec4<f32>, 2u>;

type Arr_4 = array<vec4<f32>, 2u>;

struct PGlobals {
  x_ScaledScreenParams : vec4<f32>,
  x_GlobalMipBias : vec2<f32>,
  @size(8)
  padding : u32,
  x_ProjectionParams : vec4<f32>,
  x_SSAOParams : vec4<f32>,
  x_CameraViewTopLeftCorner : Arr_4,
  x_CameraViewProjections : Arr_1,
  x_CameraViewXExtent : Arr_4,
  x_CameraViewYExtent : Arr_4,
  x_CameraViewZExtent : Arr_4,
}

@group(0) @binding(0) var x_CameraDepthTexture : texture_2d<f32>;

@group(0) @binding(1) var sampler_CameraDepthTexture : sampler;

var<private> vs_TEXCOORD0 : vec2<f32>;

@group(1) @binding(0) var<uniform> x_34 : PGlobals;

var<private> SV_Target0 : vec4<f32>;

var<private> gl_FragCoord : vec4<f32>;

fn main_1() {
  var u_xlat0 : f32;
  var u_xlatb7 : bool;
  var u_xlat7 : vec3<f32>;
  var u_xlatb14 : bool;
  var u_xlat14 : vec2<f32>;
  var u_xlat21 : f32;
  var u_xlat1 : vec3<f32>;
  var u_xlat2 : vec3<f32>;
  var u_xlat3 : vec4<f32>;
  var u_xlat4 : vec3<f32>;
  var u_xlat22 : f32;
  var u_xlat23 : f32;
  var u_xlat5 : vec3<f32>;
  var u_xlatb22 : bool;
  var x_254 : vec3<f32>;
  var u_xlat10 : vec3<f32>;
  var u_xlat17 : f32;
  var u_xlatb17 : bool;
  var u_xlatb3 : bool;
  var x_540 : vec3<f32>;
  var u_xlat11 : vec3<f32>;
  var u_xlat18 : f32;
  var u_xlatb4 : vec3<bool>;
  var u_xlat6 : f32;
  var u_xlatb23 : bool;
  var x_813 : vec3<f32>;
  var u_xlat24 : f32;
  var u_xlatb24 : bool;
  var x_1082 : vec3<f32>;
  var u_xlat_precise_vec4 : vec4<f32>;
  var u_xlat_precise_ivec4 : vec4<i32>;
  var u_xlat_precise_bvec4 : vec4<bool>;
  var u_xlat_precise_uvec4 : vec4<u32>;
  let x_22 : vec2<f32> = vs_TEXCOORD0;
  let x_40 : f32 = x_34.x_GlobalMipBias.x;
  let x_41 : vec4<f32> = textureSampleBias(x_CameraDepthTexture, sampler_CameraDepthTexture, x_22, x_40);
  u_xlat0 = x_41.x;
  let x_46 : f32 = u_xlat0;
  u_xlatb7 = (x_46 < 0.00001f);
  let x_49 : bool = u_xlatb7;
  if (x_49) {
    SV_Target0 = vec4<f32>(0.0f, 0.5f, 0.5f, 0.5f);
    return;
  }
  let x_64 : f32 = x_34.x_ProjectionParams.y;
  let x_67 : f32 = x_34.x_ProjectionParams.z;
  u_xlat7.x = (-(x_64) + x_67);
  let x_71 : f32 = u_xlat7.x;
  let x_73 : f32 = u_xlat0;
  let x_76 : f32 = x_34.x_ProjectionParams.z;
  u_xlat0 = ((-(x_71) * x_73) + x_76);
  let x_82 : f32 = x_34.x_SSAOParams.w;
  let x_83 : f32 = u_xlat0;
  u_xlatb14 = (x_82 < x_83);
  let x_85 : bool = u_xlatb14;
  if (x_85) {
    SV_Target0 = vec4<f32>(0.0f, 0.5f, 0.5f, 0.5f);
    return;
  }
  let x_93 : f32 = vs_TEXCOORD0.y;
  u_xlat14.x = (-(x_93) + 1.0f);
  let x_99 : f32 = u_xlat0;
  let x_101 : f32 = x_34.x_ProjectionParams.w;
  u_xlat21 = (x_99 * x_101);
  let x_108 : vec4<f32> = x_34.x_CameraViewXExtent[0i];
  let x_110 : vec2<f32> = vs_TEXCOORD0;
  let x_115 : vec4<f32> = x_34.x_CameraViewTopLeftCorner[0i];
  u_xlat1 = ((vec3<f32>(x_108.x, x_108.y, x_108.z) * vec3<f32>(x_110.x, x_110.x, x_110.x)) + vec3<f32>(x_115.x, x_115.y, x_115.z));
  let x_120 : vec4<f32> = x_34.x_CameraViewYExtent[0i];
  let x_122 : vec2<f32> = u_xlat14;
  let x_125 : vec3<f32> = u_xlat1;
  u_xlat1 = ((vec3<f32>(x_120.x, x_120.y, x_120.z) * vec3<f32>(x_122.x, x_122.x, x_122.x)) + x_125);
  let x_129 : vec4<f32> = x_34.x_CameraViewZExtent[0i];
  let x_131 : f32 = u_xlat21;
  let x_134 : vec3<f32> = u_xlat1;
  u_xlat1 = ((vec3<f32>(x_129.x, x_129.y, x_129.z) * vec3<f32>(x_131, x_131, x_131)) + x_134);
  let x_137 : vec3<f32> = u_xlat1;
  u_xlat2 = dpdyCoarse(vec3<f32>(x_137.z, x_137.x, x_137.y));
  let x_142 : vec3<f32> = u_xlat1;
  let x_144 : vec3<f32> = dpdxCoarse(vec3<f32>(x_142.y, x_142.z, x_142.x));
  let x_145 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_144.x, x_144.y, x_144.z, x_145.w);
  let x_148 : vec3<f32> = u_xlat2;
  let x_149 : vec4<f32> = u_xlat3;
  u_xlat4 = (x_148 * vec3<f32>(x_149.x, x_149.y, x_149.z));
  let x_152 : vec3<f32> = u_xlat2;
  let x_154 : vec4<f32> = u_xlat3;
  let x_157 : vec3<f32> = u_xlat4;
  u_xlat2 = ((vec3<f32>(x_152.z, x_152.x, x_152.y) * vec3<f32>(x_154.y, x_154.z, x_154.x)) + -(x_157));
  let x_160 : vec3<f32> = u_xlat2;
  let x_161 : vec3<f32> = u_xlat2;
  u_xlat14.x = dot(x_160, x_161);
  let x_165 : f32 = u_xlat14.x;
  u_xlat14.x = inverseSqrt(x_165);
  let x_168 : vec2<f32> = u_xlat14;
  let x_170 : vec3<f32> = u_xlat2;
  u_xlat2 = (vec3<f32>(x_168.x, x_168.x, x_168.x) * x_170);
  let x_172 : vec2<f32> = vs_TEXCOORD0;
  let x_174 : vec4<f32> = x_34.x_ScaledScreenParams;
  u_xlat14 = (x_172 * vec2<f32>(x_174.x, x_174.y));
  let x_177 : vec2<f32> = u_xlat14;
  let x_179 : vec4<f32> = x_34.x_SSAOParams;
  let x_181 : vec2<f32> = (x_177 * vec2<f32>(x_179.z, x_179.z));
  let x_182 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_181.x, x_181.y, x_182.z, x_182.w);
  let x_185 : vec4<f32> = u_xlat3;
  u_xlat22 = dot(vec2<f32>(x_185.x, x_185.y), vec2<f32>(0.067110561f, 0.00583715f));
  let x_191 : f32 = u_xlat22;
  u_xlat22 = fract(x_191);
  let x_193 : f32 = u_xlat22;
  u_xlat22 = (x_193 * 52.982917786f);
  let x_196 : f32 = u_xlat22;
  u_xlat22 = fract(x_196);
  let x_199 : f32 = u_xlat22;
  u_xlat23 = fract(x_199);
  let x_201 : f32 = u_xlat23;
  u_xlat3.z = ((x_201 * 2.0f) + -1.0f);
  let x_207 : f32 = u_xlat22;
  u_xlat22 = (x_207 + 0.9296875f);
  let x_210 : f32 = u_xlat22;
  u_xlat22 = (x_210 * 6.283185482f);
  let x_214 : f32 = u_xlat3.z;
  let x_217 : f32 = u_xlat3.z;
  u_xlat23 = ((-(x_214) * x_217) + 1.0f);
  let x_220 : f32 = u_xlat23;
  u_xlat23 = sqrt(x_220);
  let x_222 : f32 = u_xlat22;
  u_xlat4.x = sin(x_222);
  let x_226 : f32 = u_xlat22;
  u_xlat5.x = cos(x_226);
  let x_229 : f32 = u_xlat23;
  let x_231 : f32 = u_xlat5.x;
  u_xlat3.x = (x_229 * x_231);
  let x_234 : f32 = u_xlat23;
  let x_236 : f32 = u_xlat4.x;
  u_xlat3.y = (x_234 * x_236);
  let x_239 : vec4<f32> = u_xlat3;
  let x_242 : vec3<f32> = (vec3<f32>(x_239.x, x_239.y, x_239.z) * vec3<f32>(0.5f, 0.5f, 0.5f));
  let x_243 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_242.x, x_242.y, x_242.z, x_243.w);
  let x_245 : vec3<f32> = u_xlat2;
  let x_247 : vec4<f32> = u_xlat3;
  u_xlat22 = dot(-(x_245), vec3<f32>(x_247.x, x_247.y, x_247.z));
  let x_251 : f32 = u_xlat22;
  u_xlatb22 = (x_251 >= 0.0f);
  let x_253 : bool = u_xlatb22;
  if (x_253) {
    let x_257 : vec4<f32> = u_xlat3;
    x_254 = -(vec3<f32>(x_257.x, x_257.y, x_257.z));
  } else {
    let x_261 : vec4<f32> = u_xlat3;
    x_254 = vec3<f32>(x_261.x, x_261.y, x_261.z);
  }
  let x_263 : vec3<f32> = x_254;
  let x_264 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_263.x, x_263.y, x_263.z, x_264.w);
  let x_266 : vec4<f32> = u_xlat3;
  let x_269 : vec4<f32> = x_34.x_SSAOParams;
  let x_272 : vec3<f32> = u_xlat1;
  let x_273 : vec3<f32> = ((vec3<f32>(x_266.x, x_266.y, x_266.z) * vec3<f32>(x_269.y, x_269.y, x_269.y)) + x_272);
  let x_274 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_273.x, x_273.y, x_273.z, x_274.w);
  let x_277 : vec4<f32> = u_xlat3;
  let x_281 : vec4<f32> = x_34.x_CameraViewProjections[0i][1i];
  let x_283 : vec2<f32> = (vec2<f32>(x_277.y, x_277.y) * vec2<f32>(x_281.x, x_281.y));
  let x_284 : vec3<f32> = u_xlat10;
  u_xlat10 = vec3<f32>(x_283.x, x_284.y, x_283.y);
  let x_287 : vec4<f32> = x_34.x_CameraViewProjections[0i][0i];
  let x_289 : vec4<f32> = u_xlat3;
  let x_292 : vec3<f32> = u_xlat10;
  let x_294 : vec2<f32> = ((vec2<f32>(x_287.x, x_287.y) * vec2<f32>(x_289.x, x_289.x)) + vec2<f32>(x_292.x, x_292.z));
  let x_295 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_294.x, x_294.y, x_295.z, x_295.w);
  let x_298 : vec4<f32> = x_34.x_CameraViewProjections[0i][2i];
  let x_300 : vec4<f32> = u_xlat3;
  let x_303 : vec4<f32> = u_xlat3;
  let x_305 : vec2<f32> = ((vec2<f32>(x_298.x, x_298.y) * vec2<f32>(x_300.z, x_300.z)) + vec2<f32>(x_303.x, x_303.y));
  let x_306 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_305.x, x_305.y, x_306.z, x_306.w);
  let x_308 : vec4<f32> = u_xlat3;
  let x_311 : vec2<f32> = (vec2<f32>(x_308.x, x_308.y) + vec2<f32>(1.0f, 1.0f));
  let x_312 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_311.x, x_311.y, x_312.z, x_312.w);
  let x_314 : vec4<f32> = u_xlat3;
  let x_317 : vec2<f32> = (vec2<f32>(x_314.x, x_314.y) * vec2<f32>(0.5f, 0.5f));
  let x_318 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_317.x, x_317.y, x_318.z, x_318.w);
  let x_320 : vec4<f32> = u_xlat3;
  let x_324 : vec2<f32> = clamp(vec2<f32>(x_320.x, x_320.y), vec2<f32>(0.0f, 0.0f), vec2<f32>(1.0f, 1.0f));
  let x_325 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_324.x, x_324.y, x_325.z, x_325.w);
  let x_330 : vec4<f32> = u_xlat3;
  let x_333 : f32 = x_34.x_GlobalMipBias.x;
  let x_334 : vec4<f32> = textureSampleBias(x_CameraDepthTexture, sampler_CameraDepthTexture, vec2<f32>(x_330.x, x_330.y), x_333);
  u_xlat22 = x_334.x;
  let x_337 : f32 = u_xlat7.x;
  let x_339 : f32 = u_xlat22;
  let x_342 : f32 = x_34.x_ProjectionParams.z;
  u_xlat23 = ((-(x_337) * x_339) + x_342);
  let x_345 : f32 = u_xlat0;
  let x_346 : f32 = u_xlat23;
  u_xlat17 = (x_345 + -(x_346));
  let x_350 : f32 = u_xlat17;
  let x_353 : f32 = x_34.x_SSAOParams.y;
  u_xlatb17 = (abs(x_350) < x_353);
  let x_355 : bool = u_xlatb17;
  u_xlat17 = select(0.0f, 1.0f, x_355);
  let x_357 : f32 = u_xlat22;
  u_xlatb22 = (0.00001f < x_357);
  let x_359 : bool = u_xlatb22;
  u_xlat22 = select(0.0f, 1.0f, x_359);
  let x_361 : f32 = u_xlat22;
  let x_362 : f32 = u_xlat17;
  u_xlat22 = (x_361 * x_362);
  let x_365 : f32 = u_xlat3.y;
  u_xlat10.x = (-(x_365) + 1.0f);
  let x_369 : f32 = u_xlat23;
  let x_371 : f32 = x_34.x_ProjectionParams.w;
  u_xlat23 = (x_369 * x_371);
  let x_374 : vec4<f32> = x_34.x_CameraViewXExtent[0i];
  let x_376 : vec4<f32> = u_xlat3;
  let x_380 : vec4<f32> = x_34.x_CameraViewTopLeftCorner[0i];
  let x_382 : vec3<f32> = ((vec3<f32>(x_374.x, x_374.y, x_374.z) * vec3<f32>(x_376.x, x_376.x, x_376.x)) + vec3<f32>(x_380.x, x_380.y, x_380.z));
  let x_383 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_382.x, x_383.y, x_382.y, x_382.z);
  let x_386 : vec4<f32> = x_34.x_CameraViewYExtent[0i];
  let x_388 : vec3<f32> = u_xlat10;
  let x_391 : vec4<f32> = u_xlat3;
  let x_393 : vec3<f32> = ((vec3<f32>(x_386.x, x_386.y, x_386.z) * vec3<f32>(x_388.x, x_388.x, x_388.x)) + vec3<f32>(x_391.x, x_391.z, x_391.w));
  let x_394 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_393.x, x_393.y, x_393.z, x_394.w);
  let x_397 : vec4<f32> = x_34.x_CameraViewZExtent[0i];
  let x_399 : f32 = u_xlat23;
  let x_402 : vec4<f32> = u_xlat3;
  let x_404 : vec3<f32> = ((vec3<f32>(x_397.x, x_397.y, x_397.z) * vec3<f32>(x_399, x_399, x_399)) + vec3<f32>(x_402.x, x_402.y, x_402.z));
  let x_405 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_404.x, x_404.y, x_404.z, x_405.w);
  let x_407 : vec3<f32> = u_xlat1;
  let x_409 : vec4<f32> = u_xlat3;
  let x_411 : vec3<f32> = (-(x_407) + vec3<f32>(x_409.x, x_409.y, x_409.z));
  let x_412 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_411.x, x_411.y, x_411.z, x_412.w);
  let x_414 : vec4<f32> = u_xlat3;
  let x_416 : vec3<f32> = u_xlat2;
  u_xlat23 = dot(vec3<f32>(x_414.x, x_414.y, x_414.z), x_416);
  let x_418 : f32 = u_xlat0;
  let x_422 : f32 = u_xlat23;
  u_xlat23 = ((-(x_418) * 0.004f) + x_422);
  let x_424 : f32 = u_xlat23;
  u_xlat23 = max(x_424, 0.0f);
  let x_426 : vec4<f32> = u_xlat3;
  let x_428 : vec4<f32> = u_xlat3;
  u_xlat3.x = dot(vec3<f32>(x_426.x, x_426.y, x_426.z), vec3<f32>(x_428.x, x_428.y, x_428.z));
  let x_433 : f32 = u_xlat3.x;
  u_xlat3.x = (x_433 + 0.0001f);
  let x_438 : f32 = u_xlat3.x;
  u_xlat3.x = (1.0f / x_438);
  let x_441 : f32 = u_xlat23;
  let x_443 : f32 = u_xlat3.x;
  u_xlat23 = (x_441 * x_443);
  let x_445 : vec2<f32> = u_xlat14;
  let x_448 : vec4<f32> = x_34.x_SSAOParams;
  u_xlat3 = ((vec4<f32>(x_445.x, x_445.y, x_445.x, x_445.y) * vec4<f32>(x_448.z, x_448.z, x_448.z, x_448.z)) + vec4<f32>(2.082999945f, 4.867000103f, 4.165999889f, 9.734000206f));
  let x_457 : vec4<f32> = u_xlat3;
  u_xlat3.x = dot(vec2<f32>(x_457.x, x_457.y), vec2<f32>(0.067110561f, 0.00583715f));
  let x_462 : f32 = u_xlat3.x;
  u_xlat3.x = fract(x_462);
  let x_466 : f32 = u_xlat3.x;
  u_xlat3.x = (x_466 * 52.982917786f);
  let x_470 : f32 = u_xlat3.x;
  u_xlat3.x = fract(x_470);
  let x_473 : vec4<f32> = u_xlat3;
  let x_478 : vec2<f32> = (vec2<f32>(x_473.x, x_473.x) + vec2<f32>(0.33984375f, 0.76171875f));
  let x_479 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_478.x, x_478.y, x_479.z, x_479.w);
  let x_482 : f32 = u_xlat3.x;
  u_xlat3.x = fract(x_482);
  let x_486 : f32 = u_xlat3.x;
  u_xlat4.z = ((x_486 * 2.0f) + -1.0f);
  let x_491 : f32 = u_xlat3.y;
  u_xlat3.x = (x_491 * 6.283185482f);
  let x_495 : f32 = u_xlat4.z;
  let x_498 : f32 = u_xlat4.z;
  u_xlat10.x = ((-(x_495) * x_498) + 1.0f);
  let x_503 : f32 = u_xlat10.x;
  u_xlat10.x = sqrt(x_503);
  let x_507 : f32 = u_xlat3.x;
  u_xlat5.x = cos(x_507);
  let x_511 : f32 = u_xlat3.x;
  u_xlat3.x = sin(x_511);
  let x_515 : f32 = u_xlat10.x;
  let x_517 : f32 = u_xlat5.x;
  u_xlat4.x = (x_515 * x_517);
  let x_521 : f32 = u_xlat3.x;
  let x_523 : f32 = u_xlat10.x;
  u_xlat4.y = (x_521 * x_523);
  let x_526 : vec3<f32> = u_xlat4;
  u_xlat4 = (x_526 * vec3<f32>(0.707106769f, 0.707106769f, 0.707106769f));
  let x_530 : vec3<f32> = u_xlat2;
  let x_532 : vec3<f32> = u_xlat4;
  u_xlat3.x = dot(-(x_530), x_532);
  let x_537 : f32 = u_xlat3.x;
  u_xlatb3 = (x_537 >= 0.0f);
  let x_539 : bool = u_xlatb3;
  if (x_539) {
    let x_543 : vec3<f32> = u_xlat4;
    x_540 = -(x_543);
  } else {
    let x_546 : vec3<f32> = u_xlat4;
    x_540 = x_546;
  }
  let x_547 : vec3<f32> = x_540;
  u_xlat4 = x_547;
  let x_548 : vec3<f32> = u_xlat4;
  let x_550 : vec4<f32> = x_34.x_SSAOParams;
  let x_553 : vec3<f32> = u_xlat1;
  u_xlat4 = ((x_548 * vec3<f32>(x_550.y, x_550.y, x_550.y)) + x_553);
  let x_555 : vec3<f32> = u_xlat4;
  let x_558 : vec4<f32> = x_34.x_CameraViewProjections[0i][1i];
  let x_560 : vec2<f32> = (vec2<f32>(x_555.y, x_555.y) * vec2<f32>(x_558.x, x_558.y));
  let x_561 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_560.x, x_560.y, x_561.z, x_561.w);
  let x_564 : vec4<f32> = x_34.x_CameraViewProjections[0i][0i];
  let x_566 : vec3<f32> = u_xlat4;
  let x_569 : vec4<f32> = u_xlat3;
  let x_571 : vec2<f32> = ((vec2<f32>(x_564.x, x_564.y) * vec2<f32>(x_566.x, x_566.x)) + vec2<f32>(x_569.x, x_569.y));
  let x_572 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_571.x, x_571.y, x_572.z, x_572.w);
  let x_575 : vec4<f32> = x_34.x_CameraViewProjections[0i][2i];
  let x_577 : vec3<f32> = u_xlat4;
  let x_580 : vec4<f32> = u_xlat3;
  let x_582 : vec2<f32> = ((vec2<f32>(x_575.x, x_575.y) * vec2<f32>(x_577.z, x_577.z)) + vec2<f32>(x_580.x, x_580.y));
  let x_583 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_582.x, x_582.y, x_583.z, x_583.w);
  let x_585 : vec4<f32> = u_xlat3;
  let x_587 : vec2<f32> = (vec2<f32>(x_585.x, x_585.y) + vec2<f32>(1.0f, 1.0f));
  let x_588 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_587.x, x_587.y, x_588.z, x_588.w);
  let x_590 : vec4<f32> = u_xlat3;
  let x_592 : vec2<f32> = (vec2<f32>(x_590.x, x_590.y) * vec2<f32>(0.5f, 0.5f));
  let x_593 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_592.x, x_592.y, x_593.z, x_593.w);
  let x_595 : vec4<f32> = u_xlat3;
  let x_599 : vec2<f32> = clamp(vec2<f32>(x_595.x, x_595.y), vec2<f32>(0.0f, 0.0f), vec2<f32>(1.0f, 1.0f));
  let x_600 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_599.x, x_599.y, x_600.z, x_600.w);
  let x_605 : vec4<f32> = u_xlat3;
  let x_608 : f32 = x_34.x_GlobalMipBias.x;
  let x_609 : vec4<f32> = textureSampleBias(x_CameraDepthTexture, sampler_CameraDepthTexture, vec2<f32>(x_605.x, x_605.y), x_608);
  u_xlat4.x = x_609.x;
  let x_614 : f32 = u_xlat7.x;
  let x_617 : f32 = u_xlat4.x;
  let x_620 : f32 = x_34.x_ProjectionParams.z;
  u_xlat11.x = ((-(x_614) * x_617) + x_620);
  let x_624 : f32 = u_xlat0;
  let x_626 : f32 = u_xlat11.x;
  u_xlat18 = (x_624 + -(x_626));
  let x_632 : f32 = u_xlat18;
  let x_635 : f32 = x_34.x_SSAOParams.y;
  u_xlatb4.z = (abs(x_632) < x_635);
  let x_639 : f32 = u_xlat4.x;
  u_xlatb4.x = (0.00001f < x_639);
  let x_643 : bool = u_xlatb4.x;
  u_xlat4.x = select(0.0f, 1.0f, x_643);
  let x_647 : bool = u_xlatb4.z;
  u_xlat4.z = select(0.0f, 1.0f, x_647);
  let x_651 : f32 = u_xlat4.x;
  let x_653 : f32 = u_xlat4.z;
  u_xlat4.x = (x_651 * x_653);
  let x_657 : f32 = u_xlat3.y;
  u_xlat10.x = (-(x_657) + 1.0f);
  let x_662 : f32 = u_xlat11.x;
  let x_664 : f32 = x_34.x_ProjectionParams.w;
  u_xlat11.x = (x_662 * x_664);
  let x_668 : vec4<f32> = x_34.x_CameraViewXExtent[0i];
  let x_670 : vec4<f32> = u_xlat3;
  let x_674 : vec4<f32> = x_34.x_CameraViewTopLeftCorner[0i];
  u_xlat5 = ((vec3<f32>(x_668.x, x_668.y, x_668.z) * vec3<f32>(x_670.x, x_670.x, x_670.x)) + vec3<f32>(x_674.x, x_674.y, x_674.z));
  let x_678 : vec4<f32> = x_34.x_CameraViewYExtent[0i];
  let x_680 : vec3<f32> = u_xlat10;
  let x_683 : vec3<f32> = u_xlat5;
  u_xlat5 = ((vec3<f32>(x_678.x, x_678.y, x_678.z) * vec3<f32>(x_680.x, x_680.x, x_680.x)) + x_683);
  let x_686 : vec4<f32> = x_34.x_CameraViewZExtent[0i];
  let x_688 : vec3<f32> = u_xlat11;
  let x_691 : vec3<f32> = u_xlat5;
  u_xlat11 = ((vec3<f32>(x_686.x, x_686.y, x_686.z) * vec3<f32>(x_688.x, x_688.x, x_688.x)) + x_691);
  let x_693 : vec3<f32> = u_xlat1;
  let x_695 : vec3<f32> = u_xlat11;
  u_xlat11 = (-(x_693) + x_695);
  let x_697 : vec3<f32> = u_xlat11;
  let x_698 : vec3<f32> = u_xlat2;
  u_xlat3.x = dot(x_697, x_698);
  let x_701 : f32 = u_xlat0;
  let x_705 : f32 = u_xlat3.x;
  u_xlat3.x = ((-(x_701) * 0.004f) + x_705);
  let x_709 : f32 = u_xlat3.x;
  u_xlat3.x = max(x_709, 0.0f);
  let x_712 : vec3<f32> = u_xlat11;
  let x_713 : vec3<f32> = u_xlat11;
  u_xlat10.x = dot(x_712, x_713);
  let x_717 : f32 = u_xlat10.x;
  u_xlat10.x = (x_717 + 0.0001f);
  let x_721 : f32 = u_xlat10.x;
  u_xlat10.x = (1.0f / x_721);
  let x_725 : f32 = u_xlat10.x;
  let x_727 : f32 = u_xlat3.x;
  u_xlat3.x = (x_725 * x_727);
  let x_731 : f32 = u_xlat4.x;
  let x_733 : f32 = u_xlat3.x;
  u_xlat3.x = (x_731 * x_733);
  let x_736 : f32 = u_xlat23;
  let x_737 : f32 = u_xlat22;
  let x_740 : f32 = u_xlat3.x;
  u_xlat22 = ((x_736 * x_737) + x_740);
  let x_742 : vec4<f32> = u_xlat3;
  u_xlat23 = dot(vec2<f32>(x_742.z, x_742.w), vec2<f32>(0.067110561f, 0.00583715f));
  let x_745 : f32 = u_xlat23;
  u_xlat23 = fract(x_745);
  let x_747 : f32 = u_xlat23;
  u_xlat23 = (x_747 * 52.982917786f);
  let x_749 : f32 = u_xlat23;
  u_xlat23 = fract(x_749);
  let x_751 : f32 = u_xlat23;
  let x_756 : vec2<f32> = (vec2<f32>(x_751, x_751) + vec2<f32>(0.75390625f, 0.133333296f));
  let x_757 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_756.x, x_756.y, x_757.z, x_757.w);
  let x_760 : f32 = u_xlat3.x;
  u_xlat23 = fract(x_760);
  let x_762 : f32 = u_xlat23;
  u_xlat4.z = ((x_762 * 2.0f) + -1.0f);
  let x_767 : f32 = u_xlat3.y;
  u_xlat23 = (x_767 * 6.283185482f);
  let x_770 : f32 = u_xlat4.z;
  let x_773 : f32 = u_xlat4.z;
  u_xlat3.x = ((-(x_770) * x_773) + 1.0f);
  let x_778 : f32 = u_xlat3.x;
  u_xlat3.x = sqrt(x_778);
  let x_781 : f32 = u_xlat23;
  u_xlat5.x = sin(x_781);
  let x_785 : f32 = u_xlat23;
  u_xlat6 = cos(x_785);
  let x_788 : f32 = u_xlat3.x;
  let x_789 : f32 = u_xlat6;
  u_xlat4.x = (x_788 * x_789);
  let x_793 : f32 = u_xlat3.x;
  let x_795 : f32 = u_xlat5.x;
  u_xlat4.y = (x_793 * x_795);
  let x_798 : vec3<f32> = u_xlat4;
  let x_801 : vec3<f32> = (x_798 * vec3<f32>(0.866025388f, 0.866025388f, 0.866025388f));
  let x_802 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_801.x, x_801.y, x_801.z, x_802.w);
  let x_804 : vec3<f32> = u_xlat2;
  let x_806 : vec4<f32> = u_xlat3;
  u_xlat23 = dot(-(x_804), vec3<f32>(x_806.x, x_806.y, x_806.z));
  let x_810 : f32 = u_xlat23;
  u_xlatb23 = (x_810 >= 0.0f);
  let x_812 : bool = u_xlatb23;
  if (x_812) {
    let x_816 : vec4<f32> = u_xlat3;
    x_813 = -(vec3<f32>(x_816.x, x_816.y, x_816.z));
  } else {
    let x_820 : vec4<f32> = u_xlat3;
    x_813 = vec3<f32>(x_820.x, x_820.y, x_820.z);
  }
  let x_822 : vec3<f32> = x_813;
  let x_823 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_822.x, x_822.y, x_822.z, x_823.w);
  let x_825 : vec4<f32> = u_xlat3;
  let x_828 : vec4<f32> = x_34.x_SSAOParams;
  let x_831 : vec3<f32> = u_xlat1;
  let x_832 : vec3<f32> = ((vec3<f32>(x_825.x, x_825.y, x_825.z) * vec3<f32>(x_828.y, x_828.y, x_828.y)) + x_831);
  let x_833 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_832.x, x_832.y, x_832.z, x_833.w);
  let x_835 : vec4<f32> = u_xlat3;
  let x_838 : vec4<f32> = x_34.x_CameraViewProjections[0i][1i];
  let x_840 : vec2<f32> = (vec2<f32>(x_835.y, x_835.y) * vec2<f32>(x_838.x, x_838.y));
  let x_841 : vec3<f32> = u_xlat10;
  u_xlat10 = vec3<f32>(x_840.x, x_841.y, x_840.y);
  let x_844 : vec4<f32> = x_34.x_CameraViewProjections[0i][0i];
  let x_846 : vec4<f32> = u_xlat3;
  let x_849 : vec3<f32> = u_xlat10;
  let x_851 : vec2<f32> = ((vec2<f32>(x_844.x, x_844.y) * vec2<f32>(x_846.x, x_846.x)) + vec2<f32>(x_849.x, x_849.z));
  let x_852 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_851.x, x_851.y, x_852.z, x_852.w);
  let x_855 : vec4<f32> = x_34.x_CameraViewProjections[0i][2i];
  let x_857 : vec4<f32> = u_xlat3;
  let x_860 : vec4<f32> = u_xlat3;
  let x_862 : vec2<f32> = ((vec2<f32>(x_855.x, x_855.y) * vec2<f32>(x_857.z, x_857.z)) + vec2<f32>(x_860.x, x_860.y));
  let x_863 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_862.x, x_862.y, x_863.z, x_863.w);
  let x_865 : vec4<f32> = u_xlat3;
  let x_867 : vec2<f32> = (vec2<f32>(x_865.x, x_865.y) + vec2<f32>(1.0f, 1.0f));
  let x_868 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_867.x, x_867.y, x_868.z, x_868.w);
  let x_870 : vec4<f32> = u_xlat3;
  let x_872 : vec2<f32> = (vec2<f32>(x_870.x, x_870.y) * vec2<f32>(0.5f, 0.5f));
  let x_873 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_872.x, x_872.y, x_873.z, x_873.w);
  let x_875 : vec4<f32> = u_xlat3;
  let x_879 : vec2<f32> = clamp(vec2<f32>(x_875.x, x_875.y), vec2<f32>(0.0f, 0.0f), vec2<f32>(1.0f, 1.0f));
  let x_880 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_879.x, x_879.y, x_880.z, x_880.w);
  let x_885 : vec4<f32> = u_xlat3;
  let x_888 : f32 = x_34.x_GlobalMipBias.x;
  let x_889 : vec4<f32> = textureSampleBias(x_CameraDepthTexture, sampler_CameraDepthTexture, vec2<f32>(x_885.x, x_885.y), x_888);
  u_xlat23 = x_889.x;
  let x_892 : f32 = u_xlat7.x;
  let x_894 : f32 = u_xlat23;
  let x_897 : f32 = x_34.x_ProjectionParams.z;
  u_xlat17 = ((-(x_892) * x_894) + x_897);
  let x_900 : f32 = u_xlat0;
  let x_901 : f32 = u_xlat17;
  u_xlat24 = (x_900 + -(x_901));
  let x_905 : f32 = u_xlat24;
  let x_908 : f32 = x_34.x_SSAOParams.y;
  u_xlatb24 = (abs(x_905) < x_908);
  let x_910 : bool = u_xlatb24;
  u_xlat24 = select(0.0f, 1.0f, x_910);
  let x_912 : f32 = u_xlat23;
  u_xlatb23 = (0.00001f < x_912);
  let x_914 : bool = u_xlatb23;
  u_xlat23 = select(0.0f, 1.0f, x_914);
  let x_916 : f32 = u_xlat23;
  let x_917 : f32 = u_xlat24;
  u_xlat23 = (x_916 * x_917);
  let x_920 : f32 = u_xlat3.y;
  u_xlat10.x = (-(x_920) + 1.0f);
  let x_924 : f32 = u_xlat17;
  let x_926 : f32 = x_34.x_ProjectionParams.w;
  u_xlat17 = (x_924 * x_926);
  let x_929 : vec4<f32> = x_34.x_CameraViewXExtent[0i];
  let x_931 : vec4<f32> = u_xlat3;
  let x_935 : vec4<f32> = x_34.x_CameraViewTopLeftCorner[0i];
  u_xlat4 = ((vec3<f32>(x_929.x, x_929.y, x_929.z) * vec3<f32>(x_931.x, x_931.x, x_931.x)) + vec3<f32>(x_935.x, x_935.y, x_935.z));
  let x_939 : vec4<f32> = x_34.x_CameraViewYExtent[0i];
  let x_941 : vec3<f32> = u_xlat10;
  let x_944 : vec3<f32> = u_xlat4;
  let x_945 : vec3<f32> = ((vec3<f32>(x_939.x, x_939.y, x_939.z) * vec3<f32>(x_941.x, x_941.x, x_941.x)) + x_944);
  let x_946 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_945.x, x_945.y, x_946.z, x_945.z);
  let x_949 : vec4<f32> = x_34.x_CameraViewZExtent[0i];
  let x_951 : f32 = u_xlat17;
  let x_954 : vec4<f32> = u_xlat3;
  let x_956 : vec3<f32> = ((vec3<f32>(x_949.x, x_949.y, x_949.z) * vec3<f32>(x_951, x_951, x_951)) + vec3<f32>(x_954.x, x_954.y, x_954.w));
  let x_957 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_956.x, x_956.y, x_956.z, x_957.w);
  let x_959 : vec3<f32> = u_xlat1;
  let x_961 : vec4<f32> = u_xlat3;
  let x_963 : vec3<f32> = (-(x_959) + vec3<f32>(x_961.x, x_961.y, x_961.z));
  let x_964 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_963.x, x_963.y, x_963.z, x_964.w);
  let x_966 : vec4<f32> = u_xlat3;
  let x_968 : vec3<f32> = u_xlat2;
  u_xlat24 = dot(vec3<f32>(x_966.x, x_966.y, x_966.z), x_968);
  let x_970 : f32 = u_xlat0;
  let x_973 : f32 = u_xlat24;
  u_xlat24 = ((-(x_970) * 0.004f) + x_973);
  let x_975 : f32 = u_xlat24;
  u_xlat24 = max(x_975, 0.0f);
  let x_977 : vec4<f32> = u_xlat3;
  let x_979 : vec4<f32> = u_xlat3;
  u_xlat3.x = dot(vec3<f32>(x_977.x, x_977.y, x_977.z), vec3<f32>(x_979.x, x_979.y, x_979.z));
  let x_984 : f32 = u_xlat3.x;
  u_xlat3.x = (x_984 + 0.0001f);
  let x_988 : f32 = u_xlat3.x;
  u_xlat3.x = (1.0f / x_988);
  let x_992 : f32 = u_xlat3.x;
  let x_993 : f32 = u_xlat24;
  u_xlat3.x = (x_992 * x_993);
  let x_997 : f32 = u_xlat3.x;
  let x_998 : f32 = u_xlat23;
  let x_1000 : f32 = u_xlat22;
  u_xlat22 = ((x_997 * x_998) + x_1000);
  let x_1002 : vec2<f32> = u_xlat14;
  let x_1004 : vec4<f32> = x_34.x_SSAOParams;
  u_xlat14 = ((x_1002 * vec2<f32>(x_1004.z, x_1004.z)) + vec2<f32>(6.248999596f, 14.600999832f));
  let x_1011 : vec2<f32> = u_xlat14;
  u_xlat14.x = dot(x_1011, vec2<f32>(0.067110561f, 0.00583715f));
  let x_1015 : f32 = u_xlat14.x;
  u_xlat14.x = fract(x_1015);
  let x_1019 : f32 = u_xlat14.x;
  u_xlat14.x = (x_1019 * 52.982917786f);
  let x_1023 : f32 = u_xlat14.x;
  u_xlat14.x = fract(x_1023);
  let x_1026 : vec2<f32> = u_xlat14;
  u_xlat14 = (vec2<f32>(x_1026.x, x_1026.x) + vec2<f32>(0.56640625f, 0.015625f));
  let x_1033 : f32 = u_xlat14.x;
  u_xlat14.x = fract(x_1033);
  let x_1037 : f32 = u_xlat14.x;
  u_xlat3.z = ((x_1037 * 2.0f) + -1.0f);
  let x_1042 : f32 = u_xlat14.y;
  u_xlat14.x = (x_1042 * 6.283185482f);
  let x_1046 : f32 = u_xlat3.z;
  let x_1049 : f32 = u_xlat3.z;
  u_xlat21 = ((-(x_1046) * x_1049) + 1.0f);
  let x_1052 : f32 = u_xlat21;
  u_xlat21 = sqrt(x_1052);
  let x_1055 : f32 = u_xlat14.x;
  u_xlat4.x = sin(x_1055);
  let x_1059 : f32 = u_xlat14.x;
  u_xlat5.x = cos(x_1059);
  let x_1062 : f32 = u_xlat21;
  let x_1064 : f32 = u_xlat5.x;
  u_xlat3.x = (x_1062 * x_1064);
  let x_1067 : f32 = u_xlat21;
  let x_1069 : f32 = u_xlat4.x;
  u_xlat3.y = (x_1067 * x_1069);
  let x_1072 : vec3<f32> = u_xlat2;
  let x_1074 : vec4<f32> = u_xlat3;
  u_xlat14.x = dot(-(x_1072), vec3<f32>(x_1074.x, x_1074.y, x_1074.z));
  let x_1079 : f32 = u_xlat14.x;
  u_xlatb14 = (x_1079 >= 0.0f);
  let x_1081 : bool = u_xlatb14;
  if (x_1081) {
    let x_1085 : vec4<f32> = u_xlat3;
    x_1082 = -(vec3<f32>(x_1085.x, x_1085.y, x_1085.z));
  } else {
    let x_1089 : vec4<f32> = u_xlat3;
    x_1082 = vec3<f32>(x_1089.x, x_1089.y, x_1089.z);
  }
  let x_1091 : vec3<f32> = x_1082;
  let x_1092 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_1091.x, x_1091.y, x_1091.z, x_1092.w);
  let x_1094 : vec4<f32> = u_xlat3;
  let x_1097 : vec4<f32> = x_34.x_SSAOParams;
  let x_1100 : vec3<f32> = u_xlat1;
  let x_1101 : vec3<f32> = ((vec3<f32>(x_1094.x, x_1094.y, x_1094.z) * vec3<f32>(x_1097.y, x_1097.y, x_1097.y)) + x_1100);
  let x_1102 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_1101.x, x_1101.y, x_1101.z, x_1102.w);
  let x_1104 : vec4<f32> = u_xlat3;
  let x_1107 : vec4<f32> = x_34.x_CameraViewProjections[0i][1i];
  u_xlat14 = (vec2<f32>(x_1104.y, x_1104.y) * vec2<f32>(x_1107.x, x_1107.y));
  let x_1111 : vec4<f32> = x_34.x_CameraViewProjections[0i][0i];
  let x_1113 : vec4<f32> = u_xlat3;
  let x_1116 : vec2<f32> = u_xlat14;
  u_xlat14 = ((vec2<f32>(x_1111.x, x_1111.y) * vec2<f32>(x_1113.x, x_1113.x)) + x_1116);
  let x_1119 : vec4<f32> = x_34.x_CameraViewProjections[0i][2i];
  let x_1121 : vec4<f32> = u_xlat3;
  let x_1124 : vec2<f32> = u_xlat14;
  u_xlat14 = ((vec2<f32>(x_1119.x, x_1119.y) * vec2<f32>(x_1121.z, x_1121.z)) + x_1124);
  let x_1126 : vec2<f32> = u_xlat14;
  u_xlat14 = (x_1126 + vec2<f32>(1.0f, 1.0f));
  let x_1128 : vec2<f32> = u_xlat14;
  u_xlat14 = (x_1128 * vec2<f32>(0.5f, 0.5f));
  let x_1130 : vec2<f32> = u_xlat14;
  u_xlat14 = clamp(x_1130, vec2<f32>(0.0f, 0.0f), vec2<f32>(1.0f, 1.0f));
  let x_1137 : vec2<f32> = u_xlat14;
  let x_1139 : f32 = x_34.x_GlobalMipBias.x;
  let x_1140 : vec4<f32> = textureSampleBias(x_CameraDepthTexture, sampler_CameraDepthTexture, x_1137, x_1139);
  u_xlat23 = x_1140.x;
  let x_1143 : f32 = u_xlat7.x;
  let x_1145 : f32 = u_xlat23;
  let x_1148 : f32 = x_34.x_ProjectionParams.z;
  u_xlat7.x = ((-(x_1143) * x_1145) + x_1148);
  let x_1152 : f32 = u_xlat7.x;
  let x_1154 : f32 = u_xlat0;
  u_xlat3.x = (-(x_1152) + x_1154);
  let x_1158 : f32 = u_xlat3.x;
  let x_1161 : f32 = x_34.x_SSAOParams.y;
  u_xlatb3 = (abs(x_1158) < x_1161);
  let x_1163 : bool = u_xlatb3;
  u_xlat3.x = select(0.0f, 1.0f, x_1163);
  let x_1166 : f32 = u_xlat23;
  u_xlatb23 = (0.00001f < x_1166);
  let x_1168 : bool = u_xlatb23;
  u_xlat23 = select(0.0f, 1.0f, x_1168);
  let x_1170 : f32 = u_xlat23;
  let x_1172 : f32 = u_xlat3.x;
  u_xlat23 = (x_1170 * x_1172);
  let x_1175 : f32 = u_xlat14.y;
  u_xlat21 = (-(x_1175) + 1.0f);
  let x_1179 : f32 = u_xlat7.x;
  let x_1181 : f32 = x_34.x_ProjectionParams.w;
  u_xlat7.x = (x_1179 * x_1181);
  let x_1185 : vec4<f32> = x_34.x_CameraViewXExtent[0i];
  let x_1187 : vec2<f32> = u_xlat14;
  let x_1191 : vec4<f32> = x_34.x_CameraViewTopLeftCorner[0i];
  let x_1193 : vec3<f32> = ((vec3<f32>(x_1185.x, x_1185.y, x_1185.z) * vec3<f32>(x_1187.x, x_1187.x, x_1187.x)) + vec3<f32>(x_1191.x, x_1191.y, x_1191.z));
  let x_1194 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_1193.x, x_1193.y, x_1193.z, x_1194.w);
  let x_1197 : vec4<f32> = x_34.x_CameraViewYExtent[0i];
  let x_1199 : f32 = u_xlat21;
  let x_1202 : vec4<f32> = u_xlat3;
  let x_1204 : vec3<f32> = ((vec3<f32>(x_1197.x, x_1197.y, x_1197.z) * vec3<f32>(x_1199, x_1199, x_1199)) + vec3<f32>(x_1202.x, x_1202.y, x_1202.z));
  let x_1205 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_1204.x, x_1204.y, x_1204.z, x_1205.w);
  let x_1208 : vec4<f32> = x_34.x_CameraViewZExtent[0i];
  let x_1210 : vec3<f32> = u_xlat7;
  let x_1213 : vec4<f32> = u_xlat3;
  u_xlat7 = ((vec3<f32>(x_1208.x, x_1208.y, x_1208.z) * vec3<f32>(x_1210.x, x_1210.x, x_1210.x)) + vec3<f32>(x_1213.x, x_1213.y, x_1213.z));
  let x_1216 : vec3<f32> = u_xlat1;
  let x_1218 : vec3<f32> = u_xlat7;
  u_xlat7 = (-(x_1216) + x_1218);
  let x_1220 : vec3<f32> = u_xlat7;
  let x_1221 : vec3<f32> = u_xlat2;
  u_xlat1.x = dot(x_1220, x_1221);
  let x_1224 : f32 = u_xlat0;
  let x_1228 : f32 = u_xlat1.x;
  u_xlat1.x = ((-(x_1224) * 0.004f) + x_1228);
  let x_1232 : f32 = u_xlat1.x;
  u_xlat1.x = max(x_1232, 0.0f);
  let x_1235 : vec3<f32> = u_xlat7;
  let x_1236 : vec3<f32> = u_xlat7;
  u_xlat7.x = dot(x_1235, x_1236);
  let x_1240 : f32 = u_xlat7.x;
  u_xlat7.x = (x_1240 + 0.0001f);
  let x_1244 : f32 = u_xlat7.x;
  u_xlat7.x = (1.0f / x_1244);
  let x_1248 : f32 = u_xlat7.x;
  let x_1250 : f32 = u_xlat1.x;
  u_xlat7.x = (x_1248 * x_1250);
  let x_1254 : f32 = u_xlat7.x;
  let x_1255 : f32 = u_xlat23;
  let x_1257 : f32 = u_xlat22;
  u_xlat7.x = ((x_1254 * x_1255) + x_1257);
  let x_1261 : f32 = u_xlat7.x;
  let x_1263 : f32 = x_34.x_SSAOParams.y;
  u_xlat7.x = (x_1261 * x_1263);
  let x_1267 : f32 = x_34.x_SSAOParams.w;
  u_xlat14.x = (1.0f / x_1267);
  let x_1270 : f32 = u_xlat0;
  let x_1273 : f32 = u_xlat14.x;
  u_xlat0 = ((-(x_1270) * x_1273) + 1.0f);
  let x_1276 : f32 = u_xlat0;
  let x_1277 : f32 = u_xlat0;
  u_xlat0 = (x_1276 * x_1277);
  let x_1280 : f32 = u_xlat7.x;
  let x_1282 : f32 = x_34.x_SSAOParams.x;
  u_xlat7.x = (x_1280 * x_1282);
  let x_1285 : f32 = u_xlat0;
  let x_1287 : f32 = u_xlat7.x;
  u_xlat0 = (x_1285 * x_1287);
  let x_1289 : f32 = u_xlat0;
  u_xlat0 = (x_1289 * 0.25f);
  let x_1292 : f32 = u_xlat0;
  u_xlat0 = clamp(x_1292, 0.0f, 1.0f);
  let x_1294 : f32 = u_xlat0;
  u_xlat0 = log2(x_1294);
  let x_1296 : f32 = u_xlat0;
  u_xlat0 = (x_1296 * 0.600000024f);
  let x_1299 : f32 = u_xlat0;
  SV_Target0.x = exp2(x_1299);
  let x_1303 : vec3<f32> = u_xlat2;
  let x_1305 : vec3<f32> = ((x_1303 * vec3<f32>(0.5f, 0.5f, 0.5f)) + vec3<f32>(0.5f, 0.5f, 0.5f));
  let x_1306 : vec4<f32> = SV_Target0;
  SV_Target0 = vec4<f32>(x_1306.x, x_1305.x, x_1305.y, x_1305.z);
  return;
}

struct main_out {
  @location(0)
  SV_Target0_1 : vec4<f32>,
}

@fragment
fn main(@location(0) vs_TEXCOORD0_param : vec2<f32>, @builtin(position) gl_FragCoord_param : vec4<f32>) -> main_out {
  vs_TEXCOORD0 = vs_TEXCOORD0_param;
  gl_FragCoord = gl_FragCoord_param;
  main_1();
  return main_out(SV_Target0);
}

