diagnostic(off, derivative_uniformity);

alias Arr = array<mat4x4<f32>, 4u>;

struct PGlobals {
  /* @offset(0) */
  x_ZBufferParams : vec4<f32>,
  /* @offset(16) */
  unity_OrthoParams : vec4<f32>,
  /* @offset(32) */
  unity_CameraToWorld : mat4x4<f32>,
  /* @offset(96) */
  unity_WorldToShadow : Arr,
  /* @offset(352) */
  x_LightShadowData : vec4<f32>,
  /* @offset(368) */
  x_ShadowMapTexture_TexelSize : vec4<f32>,
}

var<private> u_xlat0 : vec4<f32>;

@group(0) @binding(0) var x_CameraDepthTexture : texture_2d<f32>;

@group(0) @binding(3) var sampler_CameraDepthTexture : sampler;

var<private> vs_TEXCOORD0 : vec4<f32>;

var<private> u_xlat8 : vec3<f32>;

@group(1) @binding(0) var<uniform> x_39 : PGlobals;

var<private> u_xlat16 : f32;

var<private> u_xlat1 : vec4<f32>;

var<private> vs_TEXCOORD2 : vec3<f32>;

var<private> vs_TEXCOORD3 : vec3<f32>;

var<private> vs_TEXCOORD1 : vec3<f32>;

var<private> u_xlat17 : vec2<f32>;

var<private> u_xlat2 : vec4<f32>;

var<private> u_xlat3 : vec4<f32>;

var<private> u_xlat4 : vec4<f32>;

var<private> u_xlat5 : vec4<f32>;

var<private> u_xlat6 : vec4<f32>;

var<private> u_xlat7 : vec4<f32>;

@group(0) @binding(1) var x_ShadowMapTexture : texture_depth_2d;

@group(0) @binding(2) var sampler_ShadowMapTexture : sampler_comparison;

var<private> u_xlat24 : f32;

var<private> SV_Target0 : vec4<f32>;

var<private> gl_FragCoord : vec4<f32>;

fn main_1() {
  var txVec0 : vec3<f32>;
  var txVec1 : vec3<f32>;
  var txVec2 : vec3<f32>;
  var txVec3 : vec3<f32>;
  var txVec4 : vec3<f32>;
  var txVec5 : vec3<f32>;
  var txVec6 : vec3<f32>;
  var txVec7 : vec3<f32>;
  var txVec8 : vec3<f32>;
  var txVec9 : vec3<f32>;
  var txVec10 : vec3<f32>;
  var txVec11 : vec3<f32>;
  var txVec12 : vec3<f32>;
  var txVec13 : vec3<f32>;
  var txVec14 : vec3<f32>;
  var txVec15 : vec3<f32>;
  var u_xlat_precise_vec4 : vec4<f32>;
  var u_xlat_precise_ivec4 : vec4<i32>;
  var u_xlat_precise_bvec4 : vec4<bool>;
  var u_xlat_precise_uvec4 : vec4<u32>;
  let x_23 : vec4<f32> = vs_TEXCOORD0;
  let x_25 : vec4<f32> = textureSample(x_CameraDepthTexture, sampler_CameraDepthTexture, vec2<f32>(x_23.x, x_23.y));
  u_xlat0.x = x_25.x;
  let x_44 : f32 = x_39.x_ZBufferParams.x;
  let x_46 : f32 = u_xlat0.x;
  let x_50 : f32 = x_39.x_ZBufferParams.y;
  u_xlat8.x = ((x_44 * x_46) + x_50);
  let x_55 : f32 = u_xlat8.x;
  u_xlat8.x = (1.0f / x_55);
  let x_60 : f32 = u_xlat8.x;
  let x_63 : f32 = u_xlat0.x;
  u_xlat16 = (-(x_60) + x_63);
  let x_68 : f32 = x_39.unity_OrthoParams.w;
  let x_69 : f32 = u_xlat16;
  let x_72 : f32 = u_xlat8.x;
  u_xlat8.x = ((x_68 * x_69) + x_72);
  let x_76 : f32 = u_xlat0.x;
  u_xlat0.x = (-(x_76) + 1.0f);
  let x_83 : vec3<f32> = vs_TEXCOORD2;
  let x_86 : vec3<f32> = vs_TEXCOORD3;
  let x_87 : vec3<f32> = (-(x_83) + x_86);
  let x_88 : vec4<f32> = u_xlat1;
  u_xlat1 = vec4<f32>(x_87.x, x_87.y, x_87.z, x_88.w);
  let x_90 : vec4<f32> = u_xlat0;
  let x_92 : vec4<f32> = u_xlat1;
  let x_95 : vec3<f32> = vs_TEXCOORD2;
  let x_96 : vec3<f32> = ((vec3<f32>(x_90.x, x_90.x, x_90.x) * vec3<f32>(x_92.x, x_92.y, x_92.z)) + x_95);
  let x_97 : vec4<f32> = u_xlat0;
  u_xlat0 = vec4<f32>(x_96.x, x_97.y, x_96.y, x_96.z);
  let x_100 : vec3<f32> = vs_TEXCOORD1;
  let x_102 : vec3<f32> = u_xlat8;
  let x_105 : vec4<f32> = u_xlat0;
  let x_107 : vec3<f32> = ((-(x_100) * vec3<f32>(x_102.x, x_102.x, x_102.x)) + vec3<f32>(x_105.x, x_105.z, x_105.w));
  let x_108 : vec4<f32> = u_xlat0;
  u_xlat0 = vec4<f32>(x_107.x, x_108.y, x_107.y, x_107.z);
  let x_110 : vec3<f32> = u_xlat8;
  let x_112 : vec3<f32> = vs_TEXCOORD1;
  let x_113 : vec3<f32> = (vec3<f32>(x_110.x, x_110.x, x_110.x) * x_112);
  let x_114 : vec4<f32> = u_xlat1;
  u_xlat1 = vec4<f32>(x_113.x, x_113.y, x_113.z, x_114.w);
  let x_118 : vec4<f32> = x_39.unity_OrthoParams;
  let x_120 : vec4<f32> = u_xlat0;
  let x_123 : vec4<f32> = u_xlat1;
  let x_125 : vec3<f32> = ((vec3<f32>(x_118.w, x_118.w, x_118.w) * vec3<f32>(x_120.x, x_120.z, x_120.w)) + vec3<f32>(x_123.x, x_123.y, x_123.z));
  let x_126 : vec4<f32> = u_xlat0;
  u_xlat0 = vec4<f32>(x_125.x, x_125.y, x_125.z, x_126.w);
  let x_128 : vec4<f32> = u_xlat0;
  let x_132 : vec4<f32> = x_39.unity_CameraToWorld[1i];
  u_xlat1 = (vec4<f32>(x_128.y, x_128.y, x_128.y, x_128.y) * x_132);
  let x_135 : vec4<f32> = x_39.unity_CameraToWorld[0i];
  let x_136 : vec4<f32> = u_xlat0;
  let x_139 : vec4<f32> = u_xlat1;
  u_xlat1 = ((x_135 * vec4<f32>(x_136.x, x_136.x, x_136.x, x_136.x)) + x_139);
  let x_142 : vec4<f32> = x_39.unity_CameraToWorld[2i];
  let x_143 : vec4<f32> = u_xlat0;
  let x_146 : vec4<f32> = u_xlat1;
  u_xlat0 = ((x_142 * vec4<f32>(x_143.z, x_143.z, x_143.z, x_143.z)) + x_146);
  let x_148 : vec4<f32> = u_xlat0;
  let x_151 : vec4<f32> = x_39.unity_CameraToWorld[3i];
  u_xlat0 = (x_148 + x_151);
  let x_153 : vec4<f32> = u_xlat0;
  let x_156 : vec4<f32> = x_39.unity_WorldToShadow[0i][1i];
  let x_158 : vec3<f32> = (vec3<f32>(x_153.y, x_153.y, x_153.y) * vec3<f32>(x_156.x, x_156.y, x_156.z));
  let x_159 : vec4<f32> = u_xlat1;
  u_xlat1 = vec4<f32>(x_158.x, x_158.y, x_158.z, x_159.w);
  let x_162 : vec4<f32> = x_39.unity_WorldToShadow[0i][0i];
  let x_164 : vec4<f32> = u_xlat0;
  let x_167 : vec4<f32> = u_xlat1;
  let x_169 : vec3<f32> = ((vec3<f32>(x_162.x, x_162.y, x_162.z) * vec3<f32>(x_164.x, x_164.x, x_164.x)) + vec3<f32>(x_167.x, x_167.y, x_167.z));
  let x_170 : vec4<f32> = u_xlat1;
  u_xlat1 = vec4<f32>(x_169.x, x_169.y, x_169.z, x_170.w);
  let x_173 : vec4<f32> = x_39.unity_WorldToShadow[0i][2i];
  let x_175 : vec4<f32> = u_xlat0;
  let x_178 : vec4<f32> = u_xlat1;
  let x_180 : vec3<f32> = ((vec3<f32>(x_173.x, x_173.y, x_173.z) * vec3<f32>(x_175.z, x_175.z, x_175.z)) + vec3<f32>(x_178.x, x_178.y, x_178.z));
  let x_181 : vec4<f32> = u_xlat0;
  u_xlat0 = vec4<f32>(x_180.x, x_180.y, x_180.z, x_181.w);
  let x_184 : vec4<f32> = x_39.unity_WorldToShadow[0i][3i];
  let x_186 : vec4<f32> = u_xlat0;
  let x_189 : vec4<f32> = u_xlat0;
  let x_191 : vec3<f32> = ((vec3<f32>(x_184.x, x_184.y, x_184.z) * vec3<f32>(x_186.w, x_186.w, x_186.w)) + vec3<f32>(x_189.x, x_189.y, x_189.z));
  let x_192 : vec4<f32> = u_xlat0;
  u_xlat0 = vec4<f32>(x_191.x, x_191.y, x_191.z, x_192.w);
  let x_194 : vec4<f32> = u_xlat0;
  let x_198 : vec4<f32> = x_39.x_ShadowMapTexture_TexelSize;
  let x_203 : vec2<f32> = ((vec2<f32>(x_194.x, x_194.y) * vec2<f32>(x_198.z, x_198.w)) + vec2<f32>(0.5f, 0.5f));
  let x_204 : vec4<f32> = u_xlat1;
  u_xlat1 = vec4<f32>(x_203.x, x_203.y, x_204.z, x_204.w);
  let x_206 : vec4<f32> = u_xlat1;
  let x_208 : vec2<f32> = floor(vec2<f32>(x_206.x, x_206.y));
  let x_209 : vec4<f32> = u_xlat1;
  u_xlat1 = vec4<f32>(x_208.x, x_208.y, x_209.z, x_209.w);
  let x_211 : vec4<f32> = u_xlat0;
  let x_214 : vec4<f32> = x_39.x_ShadowMapTexture_TexelSize;
  let x_217 : vec4<f32> = u_xlat1;
  let x_220 : vec2<f32> = ((vec2<f32>(x_211.x, x_211.y) * vec2<f32>(x_214.z, x_214.w)) + -(vec2<f32>(x_217.x, x_217.y)));
  let x_221 : vec4<f32> = u_xlat0;
  u_xlat0 = vec4<f32>(x_220.x, x_220.y, x_221.z, x_221.w);
  let x_225 : vec4<f32> = u_xlat0;
  u_xlat17 = (-(vec2<f32>(x_225.x, x_225.y)) + vec2<f32>(1.0f, 1.0f));
  let x_231 : vec4<f32> = u_xlat0;
  let x_235 : vec2<f32> = min(vec2<f32>(x_231.x, x_231.y), vec2<f32>(0.0f, 0.0f));
  let x_236 : vec4<f32> = u_xlat2;
  u_xlat2 = vec4<f32>(x_235.x, x_235.y, x_236.z, x_236.w);
  let x_238 : vec4<f32> = u_xlat2;
  let x_241 : vec4<f32> = u_xlat2;
  let x_244 : vec2<f32> = u_xlat17;
  u_xlat17 = ((-(vec2<f32>(x_238.x, x_238.y)) * vec2<f32>(x_241.x, x_241.y)) + x_244);
  let x_246 : vec2<f32> = u_xlat17;
  u_xlat17 = (x_246 + vec2<f32>(2.0f, 2.0f));
  let x_250 : vec2<f32> = u_xlat17;
  let x_253 : vec2<f32> = (x_250 * vec2<f32>(0.08163200318813323975f, 0.08163200318813323975f));
  let x_254 : vec4<f32> = u_xlat2;
  u_xlat2 = vec4<f32>(x_253.x, x_253.y, x_254.z, x_254.w);
  let x_258 : f32 = u_xlat2.x;
  u_xlat3.y = x_258;
  let x_260 : vec4<f32> = u_xlat0;
  u_xlat17 = max(vec2<f32>(x_260.x, x_260.y), vec2<f32>(0.0f, 0.0f));
  let x_264 : vec4<f32> = u_xlat0;
  u_xlat4 = (vec4<f32>(x_264.x, x_264.x, x_264.y, x_264.y) + vec4<f32>(0.5f, 1.0f, 0.5f, 1.0f));
  let x_268 : vec2<f32> = u_xlat17;
  let x_270 : vec2<f32> = u_xlat17;
  let x_272 : vec4<f32> = u_xlat4;
  u_xlat17 = ((-(x_268) * x_270) + vec2<f32>(x_272.y, x_272.w));
  let x_275 : vec4<f32> = u_xlat4;
  let x_277 : vec4<f32> = u_xlat4;
  u_xlat4 = (vec4<f32>(x_275.x, x_275.x, x_275.z, x_275.z) * vec4<f32>(x_277.x, x_277.x, x_277.z, x_277.z));
  let x_280 : vec2<f32> = u_xlat17;
  u_xlat17 = (x_280 + vec2<f32>(2.0f, 2.0f));
  let x_284 : f32 = u_xlat17.x;
  u_xlat5.z = (x_284 * 0.08163200318813323975f);
  let x_290 : f32 = u_xlat17.y;
  u_xlat6.z = (x_290 * 0.08163200318813323975f);
  let x_293 : vec4<f32> = u_xlat4;
  let x_296 : vec4<f32> = u_xlat0;
  u_xlat17 = ((vec2<f32>(x_293.x, x_293.z) * vec2<f32>(0.5f, 0.5f)) + -(vec2<f32>(x_296.x, x_296.y)));
  let x_300 : vec4<f32> = u_xlat4;
  let x_304 : vec2<f32> = (vec2<f32>(x_300.w, x_300.y) * vec2<f32>(0.04081600159406661987f, 0.04081600159406661987f));
  let x_305 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_305.x, x_305.y, x_304.x, x_304.y);
  let x_307 : vec2<f32> = u_xlat17;
  let x_309 : vec2<f32> = (vec2<f32>(x_307.y, x_307.x) * vec2<f32>(0.08163200318813323975f, 0.08163200318813323975f));
  let x_310 : vec4<f32> = u_xlat6;
  u_xlat6 = vec4<f32>(x_309.x, x_309.y, x_310.z, x_310.w);
  let x_313 : f32 = u_xlat6.y;
  u_xlat5.x = x_313;
  let x_316 : f32 = u_xlat3.z;
  u_xlat2.w = x_316;
  let x_318 : vec4<f32> = u_xlat0;
  let x_325 : vec2<f32> = ((vec2<f32>(x_318.x, x_318.x) * vec2<f32>(-0.08163200318813323975f, 0.08163200318813323975f)) + vec2<f32>(0.16326400637626647949f, 0.08163200318813323975f));
  let x_326 : vec4<f32> = u_xlat5;
  u_xlat5 = vec4<f32>(x_326.x, x_325.x, x_326.z, x_325.y);
  let x_328 : vec4<f32> = u_xlat0;
  let x_332 : vec2<f32> = ((vec2<f32>(x_328.x, x_328.x) * vec2<f32>(-0.08163200318813323975f, 0.08163200318813323975f)) + vec2<f32>(0.08163200318813323975f, 0.16326400637626647949f));
  let x_333 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_332.x, x_333.y, x_332.y, x_333.w);
  let x_335 : vec4<f32> = u_xlat3;
  let x_336 : vec4<f32> = u_xlat5;
  u_xlat4 = (x_335 + x_336);
  let x_338 : vec4<f32> = u_xlat3;
  let x_339 : vec4<f32> = u_xlat4;
  u_xlat3 = (x_338 / x_339);
  let x_341 : vec4<f32> = u_xlat3;
  u_xlat3 = (x_341 + vec4<f32>(-3.5f, -1.5f, 0.5f, 2.5f));
  let x_347 : vec4<f32> = u_xlat3;
  let x_350 : vec4<f32> = x_39.x_ShadowMapTexture_TexelSize;
  u_xlat3 = (vec4<f32>(x_347.w, x_347.x, x_347.y, x_347.z) * vec4<f32>(x_350.x, x_350.x, x_350.x, x_350.x));
  let x_353 : vec4<f32> = u_xlat3;
  let x_354 : vec3<f32> = vec3<f32>(x_353.y, x_353.z, x_353.w);
  let x_355 : vec4<f32> = u_xlat5;
  u_xlat5 = vec4<f32>(x_354.x, x_355.y, x_354.y, x_354.z);
  let x_357 : vec4<f32> = u_xlat0;
  let x_360 : vec2<f32> = ((vec2<f32>(x_357.y, x_357.y) * vec2<f32>(-0.08163200318813323975f, 0.08163200318813323975f)) + vec2<f32>(0.16326400637626647949f, 0.08163200318813323975f));
  let x_361 : vec4<f32> = u_xlat6;
  u_xlat6 = vec4<f32>(x_361.x, x_360.x, x_361.z, x_360.y);
  let x_363 : vec4<f32> = u_xlat0;
  let x_366 : vec2<f32> = ((vec2<f32>(x_363.y, x_363.y) * vec2<f32>(-0.08163200318813323975f, 0.08163200318813323975f)) + vec2<f32>(0.08163200318813323975f, 0.16326400637626647949f));
  let x_367 : vec4<f32> = u_xlat2;
  u_xlat2 = vec4<f32>(x_366.x, x_367.y, x_366.y, x_367.w);
  let x_369 : vec4<f32> = u_xlat2;
  let x_370 : vec4<f32> = u_xlat6;
  u_xlat6 = (x_369 + x_370);
  let x_372 : vec4<f32> = u_xlat2;
  let x_373 : vec4<f32> = u_xlat6;
  u_xlat2 = (x_372 / x_373);
  let x_375 : vec4<f32> = u_xlat2;
  u_xlat2 = (x_375 + vec4<f32>(-3.5f, -1.5f, 0.5f, 2.5f));
  let x_377 : vec4<f32> = u_xlat2;
  let x_380 : vec4<f32> = x_39.x_ShadowMapTexture_TexelSize;
  u_xlat2 = (vec4<f32>(x_377.x, x_377.w, x_377.y, x_377.z) * vec4<f32>(x_380.y, x_380.y, x_380.y, x_380.y));
  let x_384 : f32 = u_xlat2.x;
  u_xlat5.y = x_384;
  let x_387 : vec4<f32> = u_xlat1;
  let x_390 : vec4<f32> = x_39.x_ShadowMapTexture_TexelSize;
  let x_393 : vec4<f32> = u_xlat5;
  u_xlat7 = ((vec4<f32>(x_387.x, x_387.y, x_387.x, x_387.y) * vec4<f32>(x_390.x, x_390.y, x_390.x, x_390.y)) + vec4<f32>(x_393.x, x_393.y, x_393.z, x_393.y));
  let x_398 : vec4<f32> = u_xlat7;
  let x_399 : vec2<f32> = vec2<f32>(x_398.z, x_398.w);
  let x_401 : f32 = u_xlat0.z;
  txVec0 = vec3<f32>(x_399.x, x_399.y, x_401);
  let x_413 : vec3<f32> = txVec0;
  let x_415 : f32 = textureSampleCompareLevel(x_ShadowMapTexture, sampler_ShadowMapTexture, x_413.xy, x_413.z);
  u_xlat0.x = x_415;
  let x_418 : vec4<f32> = u_xlat7;
  let x_419 : vec2<f32> = vec2<f32>(x_418.x, x_418.y);
  let x_421 : f32 = u_xlat0.z;
  txVec1 = vec3<f32>(x_419.x, x_419.y, x_421);
  let x_428 : vec3<f32> = txVec1;
  let x_430 : f32 = textureSampleCompareLevel(x_ShadowMapTexture, sampler_ShadowMapTexture, x_428.xy, x_428.z);
  u_xlat8.x = x_430;
  let x_432 : vec4<f32> = u_xlat4;
  let x_433 : vec4<f32> = u_xlat6;
  u_xlat7 = (x_432 * vec4<f32>(x_433.x, x_433.x, x_433.x, x_433.x));
  let x_437 : f32 = u_xlat0.x;
  let x_439 : f32 = u_xlat7.y;
  u_xlat0.x = (x_437 * x_439);
  let x_443 : f32 = u_xlat7.x;
  let x_445 : f32 = u_xlat8.x;
  let x_448 : f32 = u_xlat0.x;
  u_xlat0.x = ((x_443 * x_445) + x_448);
  let x_451 : vec4<f32> = u_xlat1;
  let x_454 : vec4<f32> = x_39.x_ShadowMapTexture_TexelSize;
  let x_457 : vec4<f32> = u_xlat5;
  let x_459 : vec2<f32> = ((vec2<f32>(x_451.x, x_451.y) * vec2<f32>(x_454.x, x_454.y)) + vec2<f32>(x_457.w, x_457.y));
  let x_460 : vec3<f32> = u_xlat8;
  u_xlat8 = vec3<f32>(x_459.x, x_460.y, x_459.y);
  let x_463 : f32 = u_xlat5.y;
  u_xlat3.y = x_463;
  let x_465 : vec4<f32> = u_xlat1;
  let x_468 : vec4<f32> = x_39.x_ShadowMapTexture_TexelSize;
  let x_471 : vec4<f32> = u_xlat3;
  u_xlat17 = ((vec2<f32>(x_465.x, x_465.y) * vec2<f32>(x_468.x, x_468.y)) + vec2<f32>(x_471.x, x_471.y));
  let x_475 : vec2<f32> = u_xlat17;
  let x_477 : f32 = u_xlat0.z;
  txVec2 = vec3<f32>(x_475.x, x_475.y, x_477);
  let x_484 : vec3<f32> = txVec2;
  let x_486 : f32 = textureSampleCompareLevel(x_ShadowMapTexture, sampler_ShadowMapTexture, x_484.xy, x_484.z);
  u_xlat17.x = x_486;
  let x_489 : vec3<f32> = u_xlat8;
  let x_490 : vec2<f32> = vec2<f32>(x_489.x, x_489.z);
  let x_492 : f32 = u_xlat0.z;
  txVec3 = vec3<f32>(x_490.x, x_490.y, x_492);
  let x_499 : vec3<f32> = txVec3;
  let x_501 : f32 = textureSampleCompareLevel(x_ShadowMapTexture, sampler_ShadowMapTexture, x_499.xy, x_499.z);
  u_xlat8.x = x_501;
  let x_504 : f32 = u_xlat7.z;
  let x_506 : f32 = u_xlat8.x;
  let x_509 : f32 = u_xlat0.x;
  u_xlat0.x = ((x_504 * x_506) + x_509);
  let x_513 : f32 = u_xlat7.w;
  let x_515 : f32 = u_xlat17.x;
  let x_518 : f32 = u_xlat0.x;
  u_xlat0.x = ((x_513 * x_515) + x_518);
  let x_522 : f32 = u_xlat2.z;
  u_xlat5.y = x_522;
  let x_524 : vec4<f32> = u_xlat1;
  let x_527 : vec4<f32> = x_39.x_ShadowMapTexture_TexelSize;
  let x_530 : vec4<f32> = u_xlat5;
  u_xlat7 = ((vec4<f32>(x_524.x, x_524.y, x_524.x, x_524.y) * vec4<f32>(x_527.x, x_527.y, x_527.x, x_527.y)) + vec4<f32>(x_530.x, x_530.y, x_530.z, x_530.y));
  let x_534 : vec4<f32> = u_xlat7;
  let x_535 : vec2<f32> = vec2<f32>(x_534.x, x_534.y);
  let x_537 : f32 = u_xlat0.z;
  txVec4 = vec3<f32>(x_535.x, x_535.y, x_537);
  let x_544 : vec3<f32> = txVec4;
  let x_546 : f32 = textureSampleCompareLevel(x_ShadowMapTexture, sampler_ShadowMapTexture, x_544.xy, x_544.z);
  u_xlat8.x = x_546;
  let x_549 : vec4<f32> = u_xlat7;
  let x_550 : vec2<f32> = vec2<f32>(x_549.z, x_549.w);
  let x_552 : f32 = u_xlat0.z;
  txVec5 = vec3<f32>(x_550.x, x_550.y, x_552);
  let x_560 : vec3<f32> = txVec5;
  let x_562 : f32 = textureSampleCompareLevel(x_ShadowMapTexture, sampler_ShadowMapTexture, x_560.xy, x_560.z);
  u_xlat24 = x_562;
  let x_563 : vec4<f32> = u_xlat4;
  let x_564 : vec4<f32> = u_xlat6;
  u_xlat7 = (x_563 * vec4<f32>(x_564.y, x_564.y, x_564.y, x_564.y));
  let x_568 : f32 = u_xlat7.x;
  let x_570 : f32 = u_xlat8.x;
  let x_573 : f32 = u_xlat0.x;
  u_xlat0.x = ((x_568 * x_570) + x_573);
  let x_577 : f32 = u_xlat7.y;
  let x_578 : f32 = u_xlat24;
  let x_581 : f32 = u_xlat0.x;
  u_xlat0.x = ((x_577 * x_578) + x_581);
  let x_584 : vec4<f32> = u_xlat1;
  let x_587 : vec4<f32> = x_39.x_ShadowMapTexture_TexelSize;
  let x_590 : vec4<f32> = u_xlat5;
  let x_592 : vec2<f32> = ((vec2<f32>(x_584.x, x_584.y) * vec2<f32>(x_587.x, x_587.y)) + vec2<f32>(x_590.w, x_590.y));
  let x_593 : vec3<f32> = u_xlat8;
  u_xlat8 = vec3<f32>(x_592.x, x_593.y, x_592.y);
  let x_596 : f32 = u_xlat5.y;
  u_xlat3.z = x_596;
  let x_598 : vec4<f32> = u_xlat1;
  let x_601 : vec4<f32> = x_39.x_ShadowMapTexture_TexelSize;
  let x_604 : vec4<f32> = u_xlat3;
  u_xlat17 = ((vec2<f32>(x_598.x, x_598.y) * vec2<f32>(x_601.x, x_601.y)) + vec2<f32>(x_604.x, x_604.z));
  let x_608 : vec2<f32> = u_xlat17;
  let x_610 : f32 = u_xlat0.z;
  txVec6 = vec3<f32>(x_608.x, x_608.y, x_610);
  let x_617 : vec3<f32> = txVec6;
  let x_619 : f32 = textureSampleCompareLevel(x_ShadowMapTexture, sampler_ShadowMapTexture, x_617.xy, x_617.z);
  u_xlat17.x = x_619;
  let x_622 : vec3<f32> = u_xlat8;
  let x_623 : vec2<f32> = vec2<f32>(x_622.x, x_622.z);
  let x_625 : f32 = u_xlat0.z;
  txVec7 = vec3<f32>(x_623.x, x_623.y, x_625);
  let x_632 : vec3<f32> = txVec7;
  let x_634 : f32 = textureSampleCompareLevel(x_ShadowMapTexture, sampler_ShadowMapTexture, x_632.xy, x_632.z);
  u_xlat8.x = x_634;
  let x_637 : f32 = u_xlat7.z;
  let x_639 : f32 = u_xlat8.x;
  let x_642 : f32 = u_xlat0.x;
  u_xlat0.x = ((x_637 * x_639) + x_642);
  let x_646 : f32 = u_xlat7.w;
  let x_648 : f32 = u_xlat17.x;
  let x_651 : f32 = u_xlat0.x;
  u_xlat0.x = ((x_646 * x_648) + x_651);
  let x_655 : f32 = u_xlat2.w;
  u_xlat5.y = x_655;
  let x_657 : vec4<f32> = u_xlat1;
  let x_660 : vec4<f32> = x_39.x_ShadowMapTexture_TexelSize;
  let x_663 : vec4<f32> = u_xlat5;
  u_xlat7 = ((vec4<f32>(x_657.x, x_657.y, x_657.x, x_657.y) * vec4<f32>(x_660.x, x_660.y, x_660.x, x_660.y)) + vec4<f32>(x_663.x, x_663.y, x_663.z, x_663.y));
  let x_667 : vec4<f32> = u_xlat7;
  let x_668 : vec2<f32> = vec2<f32>(x_667.x, x_667.y);
  let x_670 : f32 = u_xlat0.z;
  txVec8 = vec3<f32>(x_668.x, x_668.y, x_670);
  let x_677 : vec3<f32> = txVec8;
  let x_679 : f32 = textureSampleCompareLevel(x_ShadowMapTexture, sampler_ShadowMapTexture, x_677.xy, x_677.z);
  u_xlat8.x = x_679;
  let x_682 : vec4<f32> = u_xlat7;
  let x_683 : vec2<f32> = vec2<f32>(x_682.z, x_682.w);
  let x_685 : f32 = u_xlat0.z;
  txVec9 = vec3<f32>(x_683.x, x_683.y, x_685);
  let x_692 : vec3<f32> = txVec9;
  let x_694 : f32 = textureSampleCompareLevel(x_ShadowMapTexture, sampler_ShadowMapTexture, x_692.xy, x_692.z);
  u_xlat24 = x_694;
  let x_695 : vec4<f32> = u_xlat4;
  let x_696 : vec4<f32> = u_xlat6;
  u_xlat7 = (x_695 * vec4<f32>(x_696.z, x_696.z, x_696.z, x_696.z));
  let x_699 : vec4<f32> = u_xlat4;
  let x_700 : vec4<f32> = u_xlat6;
  u_xlat4 = (x_699 * vec4<f32>(x_700.w, x_700.w, x_700.w, x_700.w));
  let x_704 : f32 = u_xlat7.x;
  let x_706 : f32 = u_xlat8.x;
  let x_709 : f32 = u_xlat0.x;
  u_xlat0.x = ((x_704 * x_706) + x_709);
  let x_713 : f32 = u_xlat7.y;
  let x_714 : f32 = u_xlat24;
  let x_717 : f32 = u_xlat0.x;
  u_xlat0.x = ((x_713 * x_714) + x_717);
  let x_720 : vec4<f32> = u_xlat1;
  let x_723 : vec4<f32> = x_39.x_ShadowMapTexture_TexelSize;
  let x_726 : vec4<f32> = u_xlat5;
  let x_728 : vec2<f32> = ((vec2<f32>(x_720.x, x_720.y) * vec2<f32>(x_723.x, x_723.y)) + vec2<f32>(x_726.w, x_726.y));
  let x_729 : vec3<f32> = u_xlat8;
  u_xlat8 = vec3<f32>(x_728.x, x_729.y, x_728.y);
  let x_731 : vec4<f32> = u_xlat5;
  let x_732 : vec3<f32> = vec3<f32>(x_731.x, x_731.z, x_731.w);
  let x_733 : vec4<f32> = u_xlat2;
  u_xlat2 = vec4<f32>(x_732.x, x_733.y, x_732.y, x_732.z);
  let x_736 : f32 = u_xlat5.y;
  u_xlat3.w = x_736;
  let x_738 : vec4<f32> = u_xlat1;
  let x_741 : vec4<f32> = x_39.x_ShadowMapTexture_TexelSize;
  let x_744 : vec4<f32> = u_xlat3;
  u_xlat17 = ((vec2<f32>(x_738.x, x_738.y) * vec2<f32>(x_741.x, x_741.y)) + vec2<f32>(x_744.x, x_744.w));
  let x_748 : vec2<f32> = u_xlat17;
  let x_750 : f32 = u_xlat0.z;
  txVec10 = vec3<f32>(x_748.x, x_748.y, x_750);
  let x_757 : vec3<f32> = txVec10;
  let x_759 : f32 = textureSampleCompareLevel(x_ShadowMapTexture, sampler_ShadowMapTexture, x_757.xy, x_757.z);
  u_xlat17.x = x_759;
  let x_762 : vec3<f32> = u_xlat8;
  let x_763 : vec2<f32> = vec2<f32>(x_762.x, x_762.z);
  let x_765 : f32 = u_xlat0.z;
  txVec11 = vec3<f32>(x_763.x, x_763.y, x_765);
  let x_772 : vec3<f32> = txVec11;
  let x_774 : f32 = textureSampleCompareLevel(x_ShadowMapTexture, sampler_ShadowMapTexture, x_772.xy, x_772.z);
  u_xlat8.x = x_774;
  let x_777 : f32 = u_xlat7.z;
  let x_779 : f32 = u_xlat8.x;
  let x_782 : f32 = u_xlat0.x;
  u_xlat0.x = ((x_777 * x_779) + x_782);
  let x_786 : f32 = u_xlat7.w;
  let x_788 : f32 = u_xlat17.x;
  let x_791 : f32 = u_xlat0.x;
  u_xlat0.x = ((x_786 * x_788) + x_791);
  let x_794 : vec4<f32> = u_xlat1;
  let x_797 : vec4<f32> = x_39.x_ShadowMapTexture_TexelSize;
  let x_800 : vec4<f32> = u_xlat2;
  u_xlat5 = ((vec4<f32>(x_794.x, x_794.y, x_794.x, x_794.y) * vec4<f32>(x_797.x, x_797.y, x_797.x, x_797.y)) + vec4<f32>(x_800.x, x_800.y, x_800.z, x_800.y));
  let x_803 : vec4<f32> = u_xlat1;
  let x_806 : vec4<f32> = x_39.x_ShadowMapTexture_TexelSize;
  let x_809 : vec4<f32> = u_xlat2;
  let x_811 : vec2<f32> = ((vec2<f32>(x_803.x, x_803.y) * vec2<f32>(x_806.x, x_806.y)) + vec2<f32>(x_809.w, x_809.y));
  let x_812 : vec3<f32> = u_xlat8;
  u_xlat8 = vec3<f32>(x_811.x, x_812.y, x_811.y);
  let x_815 : f32 = u_xlat2.y;
  u_xlat3.y = x_815;
  let x_817 : vec4<f32> = u_xlat1;
  let x_820 : vec4<f32> = x_39.x_ShadowMapTexture_TexelSize;
  let x_823 : vec4<f32> = u_xlat3;
  let x_825 : vec2<f32> = ((vec2<f32>(x_817.x, x_817.y) * vec2<f32>(x_820.x, x_820.y)) + vec2<f32>(x_823.x, x_823.y));
  let x_826 : vec4<f32> = u_xlat1;
  u_xlat1 = vec4<f32>(x_825.x, x_825.y, x_826.z, x_826.w);
  let x_829 : vec4<f32> = u_xlat1;
  let x_830 : vec2<f32> = vec2<f32>(x_829.x, x_829.y);
  let x_832 : f32 = u_xlat0.z;
  txVec12 = vec3<f32>(x_830.x, x_830.y, x_832);
  let x_839 : vec3<f32> = txVec12;
  let x_841 : f32 = textureSampleCompareLevel(x_ShadowMapTexture, sampler_ShadowMapTexture, x_839.xy, x_839.z);
  u_xlat1.x = x_841;
  let x_844 : vec3<f32> = u_xlat8;
  let x_845 : vec2<f32> = vec2<f32>(x_844.x, x_844.z);
  let x_847 : f32 = u_xlat0.z;
  txVec13 = vec3<f32>(x_845.x, x_845.y, x_847);
  let x_854 : vec3<f32> = txVec13;
  let x_856 : f32 = textureSampleCompareLevel(x_ShadowMapTexture, sampler_ShadowMapTexture, x_854.xy, x_854.z);
  u_xlat8.x = x_856;
  let x_859 : vec4<f32> = u_xlat5;
  let x_860 : vec2<f32> = vec2<f32>(x_859.x, x_859.y);
  let x_862 : f32 = u_xlat0.z;
  txVec14 = vec3<f32>(x_860.x, x_860.y, x_862);
  let x_869 : vec3<f32> = txVec14;
  let x_871 : f32 = textureSampleCompareLevel(x_ShadowMapTexture, sampler_ShadowMapTexture, x_869.xy, x_869.z);
  u_xlat24 = x_871;
  let x_873 : vec4<f32> = u_xlat5;
  let x_874 : vec2<f32> = vec2<f32>(x_873.z, x_873.w);
  let x_876 : f32 = u_xlat0.z;
  txVec15 = vec3<f32>(x_874.x, x_874.y, x_876);
  let x_883 : vec3<f32> = txVec15;
  let x_885 : f32 = textureSampleCompareLevel(x_ShadowMapTexture, sampler_ShadowMapTexture, x_883.xy, x_883.z);
  u_xlat16 = x_885;
  let x_887 : f32 = u_xlat4.x;
  let x_888 : f32 = u_xlat24;
  let x_891 : f32 = u_xlat0.x;
  u_xlat0.x = ((x_887 * x_888) + x_891);
  let x_895 : f32 = u_xlat4.y;
  let x_896 : f32 = u_xlat16;
  let x_899 : f32 = u_xlat0.x;
  u_xlat0.x = ((x_895 * x_896) + x_899);
  let x_903 : f32 = u_xlat4.z;
  let x_905 : f32 = u_xlat8.x;
  let x_908 : f32 = u_xlat0.x;
  u_xlat0.x = ((x_903 * x_905) + x_908);
  let x_912 : f32 = u_xlat4.w;
  let x_914 : f32 = u_xlat1.x;
  let x_917 : f32 = u_xlat0.x;
  u_xlat0.x = ((x_912 * x_914) + x_917);
  let x_922 : f32 = x_39.x_LightShadowData.x;
  u_xlat8.x = (-(x_922) + 1.0f);
  let x_928 : vec4<f32> = u_xlat0;
  let x_930 : vec3<f32> = u_xlat8;
  let x_934 : vec4<f32> = x_39.x_LightShadowData;
  SV_Target0 = ((vec4<f32>(x_928.x, x_928.x, x_928.x, x_928.x) * vec4<f32>(x_930.x, x_930.x, x_930.x, x_930.x)) + vec4<f32>(x_934.x, x_934.x, x_934.x, x_934.x));
  return;
}

struct main_out {
  @location(0)
  SV_Target0_1 : vec4<f32>,
}

@fragment
fn main(@location(0) vs_TEXCOORD0_param : vec4<f32>, @location(2) vs_TEXCOORD2_param : vec3<f32>, @location(3) vs_TEXCOORD3_param : vec3<f32>, @location(1) vs_TEXCOORD1_param : vec3<f32>, @builtin(position) gl_FragCoord_param : vec4<f32>) -> main_out {
  vs_TEXCOORD0 = vs_TEXCOORD0_param;
  vs_TEXCOORD2 = vs_TEXCOORD2_param;
  vs_TEXCOORD3 = vs_TEXCOORD3_param;
  vs_TEXCOORD1 = vs_TEXCOORD1_param;
  gl_FragCoord = gl_FragCoord_param;
  main_1();
  return main_out(SV_Target0);
}


