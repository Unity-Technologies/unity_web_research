struct PGlobals {
  x_ScaledScreenParams : vec4<f32>,
  x_GlobalMipBias : vec2<f32>,
  x_AlphaToMaskAvailable : f32,
  @size(4)
  padding : u32,
  x_MainLightPosition : vec4<f32>,
  x_MainLightColor : vec4<f32>,
  x_AmbientOcclusionParam : vec4<f32>,
  x_AdditionalLightsCount : vec4<f32>,
  x_WorldSpaceCameraPos : vec3<f32>,
  @size(4)
  padding_1 : u32,
  x_ScreenParams : vec4<f32>,
  unity_OrthoParams : vec4<f32>,
  x_ScaleBiasRt : vec4<f32>,
  unity_MatrixV : mat4x4<f32>,
}

type Arr = array<vec4<f32>, 2u>;

struct UnityPerDraw {
  unity_ObjectToWorld : mat4x4<f32>,
  unity_WorldToObject : mat4x4<f32>,
  unity_LODFade : vec4<f32>,
  unity_WorldTransformParams : vec4<f32>,
  unity_RenderingLayer : vec4<f32>,
  unity_LightData : vec4<f32>,
  unity_LightIndices : Arr,
  unity_ProbesOcclusion : vec4<f32>,
  unity_SpecCube0_HDR : vec4<f32>,
  unity_SpecCube1_HDR : vec4<f32>,
  unity_SpecCube0_BoxMax : vec4<f32>,
  unity_SpecCube0_BoxMin : vec4<f32>,
  unity_SpecCube0_ProbePosition : vec4<f32>,
  unity_SpecCube1_BoxMax : vec4<f32>,
  unity_SpecCube1_BoxMin : vec4<f32>,
  unity_SpecCube1_ProbePosition : vec4<f32>,
  unity_LightmapST : vec4<f32>,
  unity_DynamicLightmapST : vec4<f32>,
  unity_SHAr : vec4<f32>,
  unity_SHAg : vec4<f32>,
  unity_SHAb : vec4<f32>,
  unity_SHBr : vec4<f32>,
  unity_SHBg : vec4<f32>,
  unity_SHBb : vec4<f32>,
  unity_SHC : vec4<f32>,
  unity_RendererBounds_Min : vec4<f32>,
  unity_RendererBounds_Max : vec4<f32>,
  unity_MatrixPreviousM : mat4x4<f32>,
  unity_MatrixPreviousMI : mat4x4<f32>,
  unity_MotionVectorsParams : vec4<f32>,
  unity_SpriteColor : vec4<f32>,
  unity_SpriteProps : vec4<f32>,
}

struct UnityPerMaterial {
  Texture2D_B222E8F_TexelSize : vec4<f32>,
  Color_C30C7CA3 : vec4<f32>,
  Texture2D_D9BFD5F1_TexelSize : vec4<f32>,
}

type Arr_1 = array<mat4x4<f32>, 5u>;

struct MainLightShadows {
  x_MainLightWorldToShadow : Arr_1,
  x_CascadeShadowSplitSpheres0 : vec4<f32>,
  x_CascadeShadowSplitSpheres1 : vec4<f32>,
  x_CascadeShadowSplitSpheres2 : vec4<f32>,
  x_CascadeShadowSplitSpheres3 : vec4<f32>,
  x_CascadeShadowSplitSphereRadii : vec4<f32>,
  x_MainLightShadowOffset0 : vec4<f32>,
  x_MainLightShadowOffset1 : vec4<f32>,
  x_MainLightShadowParams : vec4<f32>,
  x_MainLightShadowmapSize : vec4<f32>,
}

struct strided_arr {
  @size(16)
  el : f32,
}

type Arr_2 = array<strided_arr, 8u>;

struct LightCookies {
  x_MainLightWorldToLight : mat4x4<f32>,
  x_AdditionalLightsCookieEnableBits : Arr_2,
  x_MainLightCookieTextureFormat : f32,
  x_AdditionalLightsCookieAtlasTextureFormat : f32,
}

type Arr_3 = array<vec4<f32>, 256u>;

type Arr_4 = array<vec4<f32>, 256u>;

type Arr_5 = array<vec4<f32>, 256u>;

type Arr_6 = array<vec4<f32>, 256u>;

type Arr_7 = array<vec4<f32>, 256u>;

struct strided_arr_1 {
  @size(16)
  el : f32,
}

type Arr_8 = array<strided_arr_1, 256u>;

type Arr_9 = array<vec4<f32>, 256u>;

type Arr_10 = array<strided_arr_1, 256u>;

struct AdditionalLights {
  x_AdditionalLightsPosition : Arr_9,
  x_AdditionalLightsColor : Arr_9,
  x_AdditionalLightsAttenuation : Arr_9,
  x_AdditionalLightsSpotDir : Arr_9,
  x_AdditionalLightsOcclusionProbes : Arr_9,
  x_AdditionalLightsLayerMasks : Arr_10,
}

type Arr_11 = array<mat4x4<f32>, 256u>;

struct AdditionalLightsCookies {
  x_AdditionalLightsWorldToLights : Arr_11,
  x_AdditionalLightsCookieAtlasUVRects : Arr_9,
  x_AdditionalLightsLightTypes : Arr_10,
}

var<private> gl_FragCoord : vec4<f32>;

var<private> vs_INTERP1 : vec3<f32>;

@group(1) @binding(0) var<uniform> x_90 : PGlobals;

var<private> vs_INTERP0 : vec3<f32>;

@group(1) @binding(2) var<uniform> x_161 : UnityPerDraw;

@group(0) @binding(7) var Texture2D_B222E8F : texture_2d<f32>;

@group(0) @binding(15) var samplerTexture2D_B222E8F : sampler;

var<private> vs_INTERP3 : vec4<f32>;

@group(1) @binding(6) var<uniform> x_215 : UnityPerMaterial;

@group(0) @binding(8) var Texture2D_D9BFD5F1 : texture_2d<f32>;

@group(0) @binding(16) var samplerTexture2D_D9BFD5F1 : sampler;

var<private> vs_INTERP4 : vec4<f32>;

@group(1) @binding(3) var<uniform> x_272 : MainLightShadows;

@group(0) @binding(4) var x_MainLightShadowmapTexture : texture_depth_2d;

@group(0) @binding(12) var sampler_MainLightShadowmapTexture : sampler_comparison;

var<private> vs_INTERP2 : vec4<f32>;

@group(0) @binding(2) var unity_LightmapInd : texture_2d<f32>;

@group(0) @binding(10) var samplerunity_Lightmap : sampler;

var<private> vs_INTERP5 : vec2<f32>;

@group(0) @binding(1) var unity_Lightmap : texture_2d<f32>;

@group(0) @binding(3) var x_ScreenSpaceOcclusionTexture : texture_2d<f32>;

@group(0) @binding(11) var sampler_ScreenSpaceOcclusionTexture : sampler;

var<private> vs_INTERP9 : vec4<f32>;

@group(1) @binding(4) var<uniform> x_3328 : LightCookies;

@group(0) @binding(5) var x_MainLightCookieTexture : texture_2d<f32>;

@group(0) @binding(13) var sampler_MainLightCookieTexture : sampler;

@group(0) @binding(0) var unity_SpecCube0 : texture_cube<f32>;

@group(0) @binding(9) var samplerunity_SpecCube0 : sampler;

@group(1) @binding(1) var<uniform> x_3760 : AdditionalLights;

@group(1) @binding(5) var<uniform> x_3869 : AdditionalLightsCookies;

@group(0) @binding(6) var x_AdditionalLightsCookieAtlasTexture : texture_2d<f32>;

@group(0) @binding(14) var sampler_AdditionalLightsCookieAtlasTexture : sampler;

var<private> SV_Target0 : vec4<f32>;

fn int_bitfieldInsert_i1_i1_i1_i1_(base : ptr<function, i32>, insert : ptr<function, i32>, offset_1 : ptr<function, i32>, bits : ptr<function, i32>) -> i32 {
  var mask : u32;
  let x_19 : i32 = *(bits);
  let x_23 : i32 = *(offset_1);
  mask = (~((4294967295u << bitcast<u32>(x_19))) << bitcast<u32>(x_23));
  let x_26 : i32 = *(base);
  let x_28 : u32 = mask;
  let x_31 : i32 = *(insert);
  let x_33 : i32 = *(offset_1);
  let x_36 : u32 = mask;
  return bitcast<i32>(((bitcast<u32>(x_26) & ~(x_28)) | ((bitcast<u32>(x_31) << bitcast<u32>(x_33)) & x_36)));
}

fn main_1() {
  var hlslcc_FragCoord : vec4<f32>;
  var u_xlat0 : vec3<f32>;
  var u_xlatb63 : bool;
  var u_xlat1 : vec3<f32>;
  var u_xlat64 : f32;
  var u_xlat2 : vec3<f32>;
  var x_118 : f32;
  var x_132 : f32;
  var x_145 : f32;
  var u_xlat63 : f32;
  var u_xlat3 : vec4<f32>;
  var u_xlat4 : vec3<f32>;
  var u_xlat5 : vec4<f32>;
  var u_xlat6 : vec4<f32>;
  var u_xlat26 : vec3<f32>;
  var u_xlatb64 : bool;
  var u_xlat7 : vec4<f32>;
  var txVec0 : vec3<f32>;
  var u_xlat8 : vec4<f32>;
  var txVec1 : vec3<f32>;
  var txVec2 : vec3<f32>;
  var txVec3 : vec3<f32>;
  var u_xlatb65 : bool;
  var u_xlat49 : vec2<f32>;
  var u_xlat9 : vec4<f32>;
  var u_xlat51 : vec2<f32>;
  var u_xlat10 : vec4<f32>;
  var u_xlat11 : vec4<f32>;
  var u_xlat12 : vec4<f32>;
  var u_xlat13 : vec4<f32>;
  var u_xlat14 : vec4<f32>;
  var u_xlat15 : vec4<f32>;
  var u_xlat65 : f32;
  var txVec4 : vec3<f32>;
  var u_xlat67 : f32;
  var txVec5 : vec3<f32>;
  var u_xlat69 : f32;
  var txVec6 : vec3<f32>;
  var txVec7 : vec3<f32>;
  var txVec8 : vec3<f32>;
  var txVec9 : vec3<f32>;
  var txVec10 : vec3<f32>;
  var txVec11 : vec3<f32>;
  var txVec12 : vec3<f32>;
  var u_xlat29 : vec3<f32>;
  var u_xlat16 : vec4<f32>;
  var u_xlat17 : vec4<f32>;
  var u_xlat30 : vec2<f32>;
  var u_xlat57 : vec2<f32>;
  var u_xlat52 : vec2<f32>;
  var u_xlat18 : vec4<f32>;
  var u_xlat19 : vec4<f32>;
  var u_xlat20 : vec4<f32>;
  var txVec13 : vec3<f32>;
  var txVec14 : vec3<f32>;
  var txVec15 : vec3<f32>;
  var txVec16 : vec3<f32>;
  var txVec17 : vec3<f32>;
  var txVec18 : vec3<f32>;
  var txVec19 : vec3<f32>;
  var txVec20 : vec3<f32>;
  var txVec21 : vec3<f32>;
  var txVec22 : vec3<f32>;
  var txVec23 : vec3<f32>;
  var txVec24 : vec3<f32>;
  var txVec25 : vec3<f32>;
  var txVec26 : vec3<f32>;
  var txVec27 : vec3<f32>;
  var txVec28 : vec3<f32>;
  var txVec29 : vec3<f32>;
  var u_xlatb67 : bool;
  var u_xlatb6 : bool;
  var x_1583 : f32;
  var u_xlatb3 : bool;
  var u_xlatu1 : vec3<u32>;
  var u_xlatu43 : u32;
  var u_xlatu24 : u32;
  var u_xlati43 : i32;
  var u_xlati22 : i32;
  var u_xlatu22 : u32;
  var u_xlati1 : i32;
  var param : i32;
  var param_1 : i32;
  var param_2 : i32;
  var param_3 : i32;
  var u_xlat22 : f32;
  var x_1715 : f32;
  var u_xlatb43 : vec2<bool>;
  var u_xlat43 : vec2<f32>;
  var u_xlatb22 : bool;
  var x_1787 : f32;
  var u_xlat66 : f32;
  var u_xlat27 : f32;
  var txVec30 : vec3<f32>;
  var txVec31 : vec3<f32>;
  var txVec32 : vec3<f32>;
  var txVec33 : vec3<f32>;
  var u_xlatb48 : vec2<bool>;
  var u_xlat48 : vec2<f32>;
  var txVec34 : vec3<f32>;
  var txVec35 : vec3<f32>;
  var txVec36 : vec3<f32>;
  var txVec37 : vec3<f32>;
  var txVec38 : vec3<f32>;
  var txVec39 : vec3<f32>;
  var txVec40 : vec3<f32>;
  var txVec41 : vec3<f32>;
  var txVec42 : vec3<f32>;
  var u_xlat55 : vec2<f32>;
  var txVec43 : vec3<f32>;
  var txVec44 : vec3<f32>;
  var u_xlat71 : f32;
  var txVec45 : vec3<f32>;
  var txVec46 : vec3<f32>;
  var txVec47 : vec3<f32>;
  var txVec48 : vec3<f32>;
  var txVec49 : vec3<f32>;
  var txVec50 : vec3<f32>;
  var txVec51 : vec3<f32>;
  var txVec52 : vec3<f32>;
  var txVec53 : vec3<f32>;
  var txVec54 : vec3<f32>;
  var txVec55 : vec3<f32>;
  var txVec56 : vec3<f32>;
  var txVec57 : vec3<f32>;
  var u_xlat28 : f32;
  var txVec58 : vec3<f32>;
  var txVec59 : vec3<f32>;
  var x_3394 : f32;
  var x_3405 : vec3<f32>;
  var u_xlatu63 : u32;
  var u_xlatu_loop_1 : u32;
  var u_xlatu65 : u32;
  var u_xlati67 : i32;
  var indexable : array<vec4<u32>, 4u>;
  var u_xlat70 : f32;
  var u_xlatu71 : u32;
  var u_xlati72 : i32;
  var u_xlati71 : i32;
  var u_xlati73 : i32;
  var u_xlatb71 : bool;
  var u_xlat53 : vec2<f32>;
  var u_xlatb53 : vec2<bool>;
  var x_4162 : f32;
  var x_4175 : f32;
  var x_4227 : f32;
  var x_4238 : vec3<f32>;
  var x_4393 : f32;
  var u_xlat_precise_vec4 : vec4<f32>;
  var u_xlat_precise_ivec4 : vec4<i32>;
  var u_xlat_precise_bvec4 : vec4<bool>;
  var u_xlat_precise_uvec4 : vec4<u32>;
  let x_49 : vec4<f32> = gl_FragCoord;
  let x_50 : vec3<f32> = vec3<f32>(x_49.x, x_49.y, x_49.z);
  let x_55 : f32 = gl_FragCoord.w;
  hlslcc_FragCoord = vec4<f32>(x_50.x, x_50.y, x_50.z, (1.0f / x_55));
  let x_65 : vec3<f32> = vs_INTERP1;
  let x_66 : vec3<f32> = vs_INTERP1;
  u_xlat0.x = dot(x_65, x_66);
  let x_72 : f32 = u_xlat0.x;
  u_xlat0.x = sqrt(x_72);
  let x_76 : f32 = u_xlat0.x;
  u_xlat0.x = (1.0f / x_76);
  let x_79 : vec3<f32> = u_xlat0;
  let x_81 : vec3<f32> = vs_INTERP1;
  u_xlat0 = (vec3<f32>(x_79.x, x_79.x, x_79.x) * x_81);
  let x_94 : f32 = x_90.unity_OrthoParams.w;
  u_xlatb63 = (x_94 == 0.0f);
  let x_99 : vec3<f32> = vs_INTERP0;
  let x_104 : vec3<f32> = x_90.x_WorldSpaceCameraPos;
  u_xlat1 = (-(x_99) + x_104);
  let x_107 : vec3<f32> = u_xlat1;
  let x_108 : vec3<f32> = u_xlat1;
  u_xlat64 = dot(x_107, x_108);
  let x_110 : f32 = u_xlat64;
  u_xlat64 = inverseSqrt(x_110);
  let x_112 : f32 = u_xlat64;
  let x_114 : vec3<f32> = u_xlat1;
  u_xlat1 = (vec3<f32>(x_112, x_112, x_112) * x_114);
  let x_117 : bool = u_xlatb63;
  if (x_117) {
    let x_122 : f32 = u_xlat1.x;
    x_118 = x_122;
  } else {
    let x_128 : f32 = x_90.unity_MatrixV[0i].z;
    x_118 = x_128;
  }
  let x_129 : f32 = x_118;
  u_xlat2.x = x_129;
  let x_131 : bool = u_xlatb63;
  if (x_131) {
    let x_137 : f32 = u_xlat1.y;
    x_132 = x_137;
  } else {
    let x_141 : f32 = x_90.unity_MatrixV[1i].z;
    x_132 = x_141;
  }
  let x_142 : f32 = x_132;
  u_xlat2.y = x_142;
  let x_144 : bool = u_xlatb63;
  if (x_144) {
    let x_149 : f32 = u_xlat1.z;
    x_145 = x_149;
  } else {
    let x_153 : f32 = x_90.unity_MatrixV[2i].z;
    x_145 = x_153;
  }
  let x_154 : f32 = x_145;
  u_xlat2.z = x_154;
  let x_156 : vec3<f32> = u_xlat2;
  let x_164 : vec4<f32> = x_161.unity_WorldToObject[1i];
  u_xlat1 = (vec3<f32>(x_156.y, x_156.y, x_156.y) * vec3<f32>(x_164.x, x_164.y, x_164.z));
  let x_168 : vec4<f32> = x_161.unity_WorldToObject[0i];
  let x_170 : vec3<f32> = u_xlat2;
  let x_173 : vec3<f32> = u_xlat1;
  u_xlat1 = ((vec3<f32>(x_168.x, x_168.y, x_168.z) * vec3<f32>(x_170.x, x_170.x, x_170.x)) + x_173);
  let x_176 : vec4<f32> = x_161.unity_WorldToObject[2i];
  let x_178 : vec3<f32> = u_xlat2;
  let x_181 : vec3<f32> = u_xlat1;
  u_xlat1 = ((vec3<f32>(x_176.x, x_176.y, x_176.z) * vec3<f32>(x_178.z, x_178.z, x_178.z)) + x_181);
  let x_184 : vec3<f32> = u_xlat1;
  let x_185 : vec3<f32> = u_xlat1;
  u_xlat63 = dot(x_184, x_185);
  let x_187 : f32 = u_xlat63;
  u_xlat63 = inverseSqrt(x_187);
  let x_189 : f32 = u_xlat63;
  let x_191 : vec3<f32> = u_xlat1;
  u_xlat1 = (vec3<f32>(x_189, x_189, x_189) * x_191);
  let x_205 : vec4<f32> = vs_INTERP3;
  let x_208 : f32 = x_90.x_GlobalMipBias.x;
  let x_209 : vec4<f32> = textureSampleBias(Texture2D_B222E8F, samplerTexture2D_B222E8F, vec2<f32>(x_205.x, x_205.y), x_208);
  u_xlat3 = x_209;
  let x_211 : vec4<f32> = u_xlat3;
  let x_217 : vec4<f32> = x_215.Color_C30C7CA3;
  u_xlat4 = (vec3<f32>(x_211.x, x_211.y, x_211.z) * vec3<f32>(x_217.x, x_217.y, x_217.z));
  let x_226 : vec4<f32> = vs_INTERP3;
  let x_229 : f32 = x_90.x_GlobalMipBias.x;
  let x_230 : vec4<f32> = textureSampleBias(Texture2D_D9BFD5F1, samplerTexture2D_D9BFD5F1, vec2<f32>(x_226.x, x_226.y), x_229);
  u_xlat5 = vec4<f32>(x_230.w, x_230.x, x_230.y, x_230.z);
  let x_233 : vec4<f32> = u_xlat5;
  u_xlat6 = ((vec4<f32>(x_233.y, x_233.z, x_233.w, x_233.x) * vec4<f32>(2.0f, 2.0f, 2.0f, 2.0f)) + vec4<f32>(-1.0f, -1.0f, -1.0f, -1.0f));
  let x_241 : vec4<f32> = u_xlat6;
  let x_242 : vec4<f32> = u_xlat6;
  u_xlat63 = dot(x_241, x_242);
  let x_244 : f32 = u_xlat63;
  u_xlat63 = inverseSqrt(x_244);
  let x_247 : f32 = u_xlat63;
  let x_249 : vec4<f32> = u_xlat6;
  u_xlat26 = (vec3<f32>(x_247, x_247, x_247) * vec3<f32>(x_249.x, x_249.y, x_249.z));
  let x_254 : f32 = vs_INTERP4.y;
  u_xlat63 = (x_254 * 200.0f);
  let x_257 : f32 = u_xlat63;
  u_xlat63 = min(x_257, 1.0f);
  let x_259 : f32 = u_xlat63;
  let x_261 : vec4<f32> = u_xlat3;
  let x_263 : vec3<f32> = (vec3<f32>(x_259, x_259, x_259) * vec3<f32>(x_261.x, x_261.y, x_261.z));
  let x_264 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_263.x, x_263.y, x_263.z, x_264.w);
  let x_266 : vec3<f32> = vs_INTERP0;
  let x_274 : vec4<f32> = x_272.x_MainLightWorldToShadow[0i][1i];
  let x_276 : vec3<f32> = (vec3<f32>(x_266.y, x_266.y, x_266.y) * vec3<f32>(x_274.x, x_274.y, x_274.z));
  let x_277 : vec4<f32> = u_xlat6;
  u_xlat6 = vec4<f32>(x_276.x, x_276.y, x_276.z, x_277.w);
  let x_280 : vec4<f32> = x_272.x_MainLightWorldToShadow[0i][0i];
  let x_282 : vec3<f32> = vs_INTERP0;
  let x_285 : vec4<f32> = u_xlat6;
  let x_287 : vec3<f32> = ((vec3<f32>(x_280.x, x_280.y, x_280.z) * vec3<f32>(x_282.x, x_282.x, x_282.x)) + vec3<f32>(x_285.x, x_285.y, x_285.z));
  let x_288 : vec4<f32> = u_xlat6;
  u_xlat6 = vec4<f32>(x_287.x, x_287.y, x_287.z, x_288.w);
  let x_291 : vec4<f32> = x_272.x_MainLightWorldToShadow[0i][2i];
  let x_293 : vec3<f32> = vs_INTERP0;
  let x_296 : vec4<f32> = u_xlat6;
  let x_298 : vec3<f32> = ((vec3<f32>(x_291.x, x_291.y, x_291.z) * vec3<f32>(x_293.z, x_293.z, x_293.z)) + vec3<f32>(x_296.x, x_296.y, x_296.z));
  let x_299 : vec4<f32> = u_xlat6;
  u_xlat6 = vec4<f32>(x_298.x, x_298.y, x_298.z, x_299.w);
  let x_301 : vec4<f32> = u_xlat6;
  let x_305 : vec4<f32> = x_272.x_MainLightWorldToShadow[0i][3i];
  let x_307 : vec3<f32> = (vec3<f32>(x_301.x, x_301.y, x_301.z) + vec3<f32>(x_305.x, x_305.y, x_305.z));
  let x_308 : vec4<f32> = u_xlat6;
  u_xlat6 = vec4<f32>(x_307.x, x_307.y, x_307.z, x_308.w);
  let x_312 : f32 = x_272.x_MainLightShadowParams.y;
  u_xlatb63 = (0.0f < x_312);
  let x_314 : bool = u_xlatb63;
  if (x_314) {
    let x_319 : f32 = x_272.x_MainLightShadowParams.y;
    u_xlatb64 = (x_319 == 1.0f);
    let x_321 : bool = u_xlatb64;
    if (x_321) {
      let x_325 : vec4<f32> = u_xlat6;
      let x_329 : vec4<f32> = x_272.x_MainLightShadowOffset0;
      u_xlat7 = (vec4<f32>(x_325.x, x_325.y, x_325.x, x_325.y) + x_329);
      let x_332 : vec4<f32> = u_xlat7;
      let x_333 : vec2<f32> = vec2<f32>(x_332.x, x_332.y);
      let x_335 : f32 = u_xlat6.z;
      txVec0 = vec3<f32>(x_333.x, x_333.y, x_335);
      let x_348 : vec3<f32> = txVec0;
      let x_350 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_348.xy, x_348.z);
      u_xlat8.x = x_350;
      let x_353 : vec4<f32> = u_xlat7;
      let x_354 : vec2<f32> = vec2<f32>(x_353.z, x_353.w);
      let x_356 : f32 = u_xlat6.z;
      txVec1 = vec3<f32>(x_354.x, x_354.y, x_356);
      let x_363 : vec3<f32> = txVec1;
      let x_365 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_363.xy, x_363.z);
      u_xlat8.y = x_365;
      let x_367 : vec4<f32> = u_xlat6;
      let x_370 : vec4<f32> = x_272.x_MainLightShadowOffset1;
      u_xlat7 = (vec4<f32>(x_367.x, x_367.y, x_367.x, x_367.y) + x_370);
      let x_373 : vec4<f32> = u_xlat7;
      let x_374 : vec2<f32> = vec2<f32>(x_373.x, x_373.y);
      let x_376 : f32 = u_xlat6.z;
      txVec2 = vec3<f32>(x_374.x, x_374.y, x_376);
      let x_383 : vec3<f32> = txVec2;
      let x_385 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_383.xy, x_383.z);
      u_xlat8.z = x_385;
      let x_388 : vec4<f32> = u_xlat7;
      let x_389 : vec2<f32> = vec2<f32>(x_388.z, x_388.w);
      let x_391 : f32 = u_xlat6.z;
      txVec3 = vec3<f32>(x_389.x, x_389.y, x_391);
      let x_398 : vec3<f32> = txVec3;
      let x_400 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_398.xy, x_398.z);
      u_xlat8.w = x_400;
      let x_402 : vec4<f32> = u_xlat8;
      u_xlat64 = dot(x_402, vec4<f32>(0.25f, 0.25f, 0.25f, 0.25f));
    } else {
      let x_409 : f32 = x_272.x_MainLightShadowParams.y;
      u_xlatb65 = (x_409 == 2.0f);
      let x_411 : bool = u_xlatb65;
      if (x_411) {
        let x_414 : vec4<f32> = u_xlat6;
        let x_417 : vec4<f32> = x_272.x_MainLightShadowmapSize;
        let x_422 : vec2<f32> = ((vec2<f32>(x_414.x, x_414.y) * vec2<f32>(x_417.z, x_417.w)) + vec2<f32>(0.5f, 0.5f));
        let x_423 : vec4<f32> = u_xlat7;
        u_xlat7 = vec4<f32>(x_422.x, x_422.y, x_423.z, x_423.w);
        let x_425 : vec4<f32> = u_xlat7;
        let x_427 : vec2<f32> = floor(vec2<f32>(x_425.x, x_425.y));
        let x_428 : vec4<f32> = u_xlat7;
        u_xlat7 = vec4<f32>(x_427.x, x_427.y, x_428.z, x_428.w);
        let x_432 : vec4<f32> = u_xlat6;
        let x_435 : vec4<f32> = x_272.x_MainLightShadowmapSize;
        let x_438 : vec4<f32> = u_xlat7;
        u_xlat49 = ((vec2<f32>(x_432.x, x_432.y) * vec2<f32>(x_435.z, x_435.w)) + -(vec2<f32>(x_438.x, x_438.y)));
        let x_442 : vec2<f32> = u_xlat49;
        u_xlat8 = (vec4<f32>(x_442.x, x_442.x, x_442.y, x_442.y) + vec4<f32>(0.5f, 1.0f, 0.5f, 1.0f));
        let x_447 : vec4<f32> = u_xlat8;
        let x_449 : vec4<f32> = u_xlat8;
        u_xlat9 = (vec4<f32>(x_447.x, x_447.x, x_447.z, x_447.z) * vec4<f32>(x_449.x, x_449.x, x_449.z, x_449.z));
        let x_452 : vec4<f32> = u_xlat9;
        let x_456 : vec2<f32> = (vec2<f32>(x_452.y, x_452.w) * vec2<f32>(0.079999998f, 0.079999998f));
        let x_457 : vec4<f32> = u_xlat8;
        u_xlat8 = vec4<f32>(x_456.x, x_457.y, x_456.y, x_457.w);
        let x_459 : vec4<f32> = u_xlat9;
        let x_462 : vec2<f32> = u_xlat49;
        let x_464 : vec2<f32> = ((vec2<f32>(x_459.x, x_459.z) * vec2<f32>(0.5f, 0.5f)) + -(x_462));
        let x_465 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_464.x, x_464.y, x_465.z, x_465.w);
        let x_468 : vec2<f32> = u_xlat49;
        u_xlat51 = (-(x_468) + vec2<f32>(1.0f, 1.0f));
        let x_473 : vec2<f32> = u_xlat49;
        let x_475 : vec2<f32> = min(x_473, vec2<f32>(0.0f, 0.0f));
        let x_476 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_475.x, x_475.y, x_476.z, x_476.w);
        let x_478 : vec4<f32> = u_xlat10;
        let x_481 : vec4<f32> = u_xlat10;
        let x_484 : vec2<f32> = u_xlat51;
        let x_485 : vec2<f32> = ((-(vec2<f32>(x_478.x, x_478.y)) * vec2<f32>(x_481.x, x_481.y)) + x_484);
        let x_486 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_485.x, x_485.y, x_486.z, x_486.w);
        let x_488 : vec2<f32> = u_xlat49;
        u_xlat49 = max(x_488, vec2<f32>(0.0f, 0.0f));
        let x_490 : vec2<f32> = u_xlat49;
        let x_492 : vec2<f32> = u_xlat49;
        let x_494 : vec4<f32> = u_xlat8;
        u_xlat49 = ((-(x_490) * x_492) + vec2<f32>(x_494.y, x_494.w));
        let x_497 : vec4<f32> = u_xlat10;
        let x_499 : vec2<f32> = (vec2<f32>(x_497.x, x_497.y) + vec2<f32>(1.0f, 1.0f));
        let x_500 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_499.x, x_499.y, x_500.z, x_500.w);
        let x_502 : vec2<f32> = u_xlat49;
        u_xlat49 = (x_502 + vec2<f32>(1.0f, 1.0f));
        let x_505 : vec4<f32> = u_xlat9;
        let x_509 : vec2<f32> = (vec2<f32>(x_505.x, x_505.y) * vec2<f32>(0.159999996f, 0.159999996f));
        let x_510 : vec4<f32> = u_xlat11;
        u_xlat11 = vec4<f32>(x_509.x, x_509.y, x_510.z, x_510.w);
        let x_512 : vec2<f32> = u_xlat51;
        let x_513 : vec2<f32> = (x_512 * vec2<f32>(0.159999996f, 0.159999996f));
        let x_514 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_513.x, x_513.y, x_514.z, x_514.w);
        let x_516 : vec4<f32> = u_xlat10;
        let x_518 : vec2<f32> = (vec2<f32>(x_516.x, x_516.y) * vec2<f32>(0.159999996f, 0.159999996f));
        let x_519 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_518.x, x_518.y, x_519.z, x_519.w);
        let x_522 : vec2<f32> = u_xlat49;
        let x_523 : vec2<f32> = (x_522 * vec2<f32>(0.159999996f, 0.159999996f));
        let x_524 : vec4<f32> = u_xlat12;
        u_xlat12 = vec4<f32>(x_523.x, x_523.y, x_524.z, x_524.w);
        let x_526 : vec4<f32> = u_xlat8;
        u_xlat49 = (vec2<f32>(x_526.y, x_526.w) * vec2<f32>(0.159999996f, 0.159999996f));
        let x_530 : f32 = u_xlat10.x;
        u_xlat11.z = x_530;
        let x_533 : f32 = u_xlat49.x;
        u_xlat11.w = x_533;
        let x_536 : f32 = u_xlat12.x;
        u_xlat9.z = x_536;
        let x_539 : f32 = u_xlat8.x;
        u_xlat9.w = x_539;
        let x_542 : vec4<f32> = u_xlat9;
        let x_544 : vec4<f32> = u_xlat11;
        u_xlat13 = (vec4<f32>(x_542.z, x_542.w, x_542.x, x_542.z) + vec4<f32>(x_544.z, x_544.w, x_544.x, x_544.z));
        let x_548 : f32 = u_xlat11.y;
        u_xlat10.z = x_548;
        let x_551 : f32 = u_xlat49.y;
        u_xlat10.w = x_551;
        let x_554 : f32 = u_xlat9.y;
        u_xlat12.z = x_554;
        let x_557 : f32 = u_xlat8.z;
        u_xlat12.w = x_557;
        let x_559 : vec4<f32> = u_xlat10;
        let x_561 : vec4<f32> = u_xlat12;
        let x_563 : vec3<f32> = (vec3<f32>(x_559.z, x_559.y, x_559.w) + vec3<f32>(x_561.z, x_561.y, x_561.w));
        let x_564 : vec4<f32> = u_xlat8;
        u_xlat8 = vec4<f32>(x_563.x, x_563.y, x_563.z, x_564.w);
        let x_566 : vec4<f32> = u_xlat9;
        let x_568 : vec4<f32> = u_xlat13;
        let x_570 : vec3<f32> = (vec3<f32>(x_566.x, x_566.z, x_566.w) / vec3<f32>(x_568.z, x_568.w, x_568.y));
        let x_571 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_570.x, x_570.y, x_570.z, x_571.w);
        let x_573 : vec4<f32> = u_xlat9;
        let x_579 : vec3<f32> = (vec3<f32>(x_573.x, x_573.y, x_573.z) + vec3<f32>(-2.5f, -0.5f, 1.5f));
        let x_580 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_579.x, x_579.y, x_579.z, x_580.w);
        let x_582 : vec4<f32> = u_xlat12;
        let x_584 : vec4<f32> = u_xlat8;
        let x_586 : vec3<f32> = (vec3<f32>(x_582.z, x_582.y, x_582.w) / vec3<f32>(x_584.x, x_584.y, x_584.z));
        let x_587 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_586.x, x_586.y, x_586.z, x_587.w);
        let x_589 : vec4<f32> = u_xlat10;
        let x_591 : vec3<f32> = (vec3<f32>(x_589.x, x_589.y, x_589.z) + vec3<f32>(-2.5f, -0.5f, 1.5f));
        let x_592 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_591.x, x_591.y, x_591.z, x_592.w);
        let x_594 : vec4<f32> = u_xlat9;
        let x_597 : vec4<f32> = x_272.x_MainLightShadowmapSize;
        let x_599 : vec3<f32> = (vec3<f32>(x_594.y, x_594.x, x_594.z) * vec3<f32>(x_597.x, x_597.x, x_597.x));
        let x_600 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_599.x, x_599.y, x_599.z, x_600.w);
        let x_602 : vec4<f32> = u_xlat10;
        let x_605 : vec4<f32> = x_272.x_MainLightShadowmapSize;
        let x_607 : vec3<f32> = (vec3<f32>(x_602.x, x_602.y, x_602.z) * vec3<f32>(x_605.y, x_605.y, x_605.y));
        let x_608 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_607.x, x_607.y, x_607.z, x_608.w);
        let x_611 : f32 = u_xlat10.x;
        u_xlat9.w = x_611;
        let x_613 : vec4<f32> = u_xlat7;
        let x_616 : vec4<f32> = x_272.x_MainLightShadowmapSize;
        let x_619 : vec4<f32> = u_xlat9;
        u_xlat11 = ((vec4<f32>(x_613.x, x_613.y, x_613.x, x_613.y) * vec4<f32>(x_616.x, x_616.y, x_616.x, x_616.y)) + vec4<f32>(x_619.y, x_619.w, x_619.x, x_619.w));
        let x_622 : vec4<f32> = u_xlat7;
        let x_625 : vec4<f32> = x_272.x_MainLightShadowmapSize;
        let x_628 : vec4<f32> = u_xlat9;
        u_xlat49 = ((vec2<f32>(x_622.x, x_622.y) * vec2<f32>(x_625.x, x_625.y)) + vec2<f32>(x_628.z, x_628.w));
        let x_632 : f32 = u_xlat9.y;
        u_xlat10.w = x_632;
        let x_634 : vec4<f32> = u_xlat10;
        let x_635 : vec2<f32> = vec2<f32>(x_634.y, x_634.z);
        let x_636 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_636.x, x_635.x, x_636.z, x_635.y);
        let x_638 : vec4<f32> = u_xlat7;
        let x_641 : vec4<f32> = x_272.x_MainLightShadowmapSize;
        let x_644 : vec4<f32> = u_xlat9;
        u_xlat12 = ((vec4<f32>(x_638.x, x_638.y, x_638.x, x_638.y) * vec4<f32>(x_641.x, x_641.y, x_641.x, x_641.y)) + vec4<f32>(x_644.x, x_644.y, x_644.z, x_644.y));
        let x_647 : vec4<f32> = u_xlat7;
        let x_650 : vec4<f32> = x_272.x_MainLightShadowmapSize;
        let x_653 : vec4<f32> = u_xlat10;
        u_xlat10 = ((vec4<f32>(x_647.x, x_647.y, x_647.x, x_647.y) * vec4<f32>(x_650.x, x_650.y, x_650.x, x_650.y)) + vec4<f32>(x_653.w, x_653.y, x_653.w, x_653.z));
        let x_656 : vec4<f32> = u_xlat7;
        let x_659 : vec4<f32> = x_272.x_MainLightShadowmapSize;
        let x_662 : vec4<f32> = u_xlat9;
        u_xlat9 = ((vec4<f32>(x_656.x, x_656.y, x_656.x, x_656.y) * vec4<f32>(x_659.x, x_659.y, x_659.x, x_659.y)) + vec4<f32>(x_662.x, x_662.w, x_662.z, x_662.w));
        let x_666 : vec4<f32> = u_xlat8;
        let x_668 : vec4<f32> = u_xlat13;
        u_xlat14 = (vec4<f32>(x_666.x, x_666.x, x_666.x, x_666.y) * vec4<f32>(x_668.z, x_668.w, x_668.y, x_668.z));
        let x_672 : vec4<f32> = u_xlat8;
        let x_674 : vec4<f32> = u_xlat13;
        u_xlat15 = (vec4<f32>(x_672.y, x_672.y, x_672.z, x_672.z) * x_674);
        let x_678 : f32 = u_xlat8.z;
        let x_680 : f32 = u_xlat13.y;
        u_xlat65 = (x_678 * x_680);
        let x_683 : vec4<f32> = u_xlat11;
        let x_684 : vec2<f32> = vec2<f32>(x_683.x, x_683.y);
        let x_686 : f32 = u_xlat6.z;
        txVec4 = vec3<f32>(x_684.x, x_684.y, x_686);
        let x_694 : vec3<f32> = txVec4;
        let x_696 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_694.xy, x_694.z);
        u_xlat67 = x_696;
        let x_698 : vec4<f32> = u_xlat11;
        let x_699 : vec2<f32> = vec2<f32>(x_698.z, x_698.w);
        let x_701 : f32 = u_xlat6.z;
        txVec5 = vec3<f32>(x_699.x, x_699.y, x_701);
        let x_709 : vec3<f32> = txVec5;
        let x_711 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_709.xy, x_709.z);
        u_xlat69 = x_711;
        let x_712 : f32 = u_xlat69;
        let x_714 : f32 = u_xlat14.y;
        u_xlat69 = (x_712 * x_714);
        let x_717 : f32 = u_xlat14.x;
        let x_718 : f32 = u_xlat67;
        let x_720 : f32 = u_xlat69;
        u_xlat67 = ((x_717 * x_718) + x_720);
        let x_723 : vec2<f32> = u_xlat49;
        let x_725 : f32 = u_xlat6.z;
        txVec6 = vec3<f32>(x_723.x, x_723.y, x_725);
        let x_732 : vec3<f32> = txVec6;
        let x_734 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_732.xy, x_732.z);
        u_xlat69 = x_734;
        let x_736 : f32 = u_xlat14.z;
        let x_737 : f32 = u_xlat69;
        let x_739 : f32 = u_xlat67;
        u_xlat67 = ((x_736 * x_737) + x_739);
        let x_742 : vec4<f32> = u_xlat10;
        let x_743 : vec2<f32> = vec2<f32>(x_742.x, x_742.y);
        let x_745 : f32 = u_xlat6.z;
        txVec7 = vec3<f32>(x_743.x, x_743.y, x_745);
        let x_752 : vec3<f32> = txVec7;
        let x_754 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_752.xy, x_752.z);
        u_xlat69 = x_754;
        let x_756 : f32 = u_xlat14.w;
        let x_757 : f32 = u_xlat69;
        let x_759 : f32 = u_xlat67;
        u_xlat67 = ((x_756 * x_757) + x_759);
        let x_762 : vec4<f32> = u_xlat12;
        let x_763 : vec2<f32> = vec2<f32>(x_762.x, x_762.y);
        let x_765 : f32 = u_xlat6.z;
        txVec8 = vec3<f32>(x_763.x, x_763.y, x_765);
        let x_772 : vec3<f32> = txVec8;
        let x_774 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_772.xy, x_772.z);
        u_xlat69 = x_774;
        let x_776 : f32 = u_xlat15.x;
        let x_777 : f32 = u_xlat69;
        let x_779 : f32 = u_xlat67;
        u_xlat67 = ((x_776 * x_777) + x_779);
        let x_782 : vec4<f32> = u_xlat12;
        let x_783 : vec2<f32> = vec2<f32>(x_782.z, x_782.w);
        let x_785 : f32 = u_xlat6.z;
        txVec9 = vec3<f32>(x_783.x, x_783.y, x_785);
        let x_792 : vec3<f32> = txVec9;
        let x_794 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_792.xy, x_792.z);
        u_xlat69 = x_794;
        let x_796 : f32 = u_xlat15.y;
        let x_797 : f32 = u_xlat69;
        let x_799 : f32 = u_xlat67;
        u_xlat67 = ((x_796 * x_797) + x_799);
        let x_802 : vec4<f32> = u_xlat10;
        let x_803 : vec2<f32> = vec2<f32>(x_802.z, x_802.w);
        let x_805 : f32 = u_xlat6.z;
        txVec10 = vec3<f32>(x_803.x, x_803.y, x_805);
        let x_812 : vec3<f32> = txVec10;
        let x_814 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_812.xy, x_812.z);
        u_xlat69 = x_814;
        let x_816 : f32 = u_xlat15.z;
        let x_817 : f32 = u_xlat69;
        let x_819 : f32 = u_xlat67;
        u_xlat67 = ((x_816 * x_817) + x_819);
        let x_822 : vec4<f32> = u_xlat9;
        let x_823 : vec2<f32> = vec2<f32>(x_822.x, x_822.y);
        let x_825 : f32 = u_xlat6.z;
        txVec11 = vec3<f32>(x_823.x, x_823.y, x_825);
        let x_832 : vec3<f32> = txVec11;
        let x_834 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_832.xy, x_832.z);
        u_xlat69 = x_834;
        let x_836 : f32 = u_xlat15.w;
        let x_837 : f32 = u_xlat69;
        let x_839 : f32 = u_xlat67;
        u_xlat67 = ((x_836 * x_837) + x_839);
        let x_842 : vec4<f32> = u_xlat9;
        let x_843 : vec2<f32> = vec2<f32>(x_842.z, x_842.w);
        let x_845 : f32 = u_xlat6.z;
        txVec12 = vec3<f32>(x_843.x, x_843.y, x_845);
        let x_852 : vec3<f32> = txVec12;
        let x_854 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_852.xy, x_852.z);
        u_xlat69 = x_854;
        let x_855 : f32 = u_xlat65;
        let x_856 : f32 = u_xlat69;
        let x_858 : f32 = u_xlat67;
        u_xlat64 = ((x_855 * x_856) + x_858);
      } else {
        let x_861 : vec4<f32> = u_xlat6;
        let x_864 : vec4<f32> = x_272.x_MainLightShadowmapSize;
        let x_867 : vec2<f32> = ((vec2<f32>(x_861.x, x_861.y) * vec2<f32>(x_864.z, x_864.w)) + vec2<f32>(0.5f, 0.5f));
        let x_868 : vec4<f32> = u_xlat7;
        u_xlat7 = vec4<f32>(x_867.x, x_867.y, x_868.z, x_868.w);
        let x_870 : vec4<f32> = u_xlat7;
        let x_872 : vec2<f32> = floor(vec2<f32>(x_870.x, x_870.y));
        let x_873 : vec4<f32> = u_xlat7;
        u_xlat7 = vec4<f32>(x_872.x, x_872.y, x_873.z, x_873.w);
        let x_875 : vec4<f32> = u_xlat6;
        let x_878 : vec4<f32> = x_272.x_MainLightShadowmapSize;
        let x_881 : vec4<f32> = u_xlat7;
        u_xlat49 = ((vec2<f32>(x_875.x, x_875.y) * vec2<f32>(x_878.z, x_878.w)) + -(vec2<f32>(x_881.x, x_881.y)));
        let x_885 : vec2<f32> = u_xlat49;
        u_xlat8 = (vec4<f32>(x_885.x, x_885.x, x_885.y, x_885.y) + vec4<f32>(0.5f, 1.0f, 0.5f, 1.0f));
        let x_888 : vec4<f32> = u_xlat8;
        let x_890 : vec4<f32> = u_xlat8;
        u_xlat9 = (vec4<f32>(x_888.x, x_888.x, x_888.z, x_888.z) * vec4<f32>(x_890.x, x_890.x, x_890.z, x_890.z));
        let x_893 : vec4<f32> = u_xlat9;
        let x_897 : vec2<f32> = (vec2<f32>(x_893.y, x_893.w) * vec2<f32>(0.040816002f, 0.040816002f));
        let x_898 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_898.x, x_897.x, x_898.z, x_897.y);
        let x_900 : vec4<f32> = u_xlat9;
        let x_903 : vec2<f32> = u_xlat49;
        let x_905 : vec2<f32> = ((vec2<f32>(x_900.x, x_900.z) * vec2<f32>(0.5f, 0.5f)) + -(x_903));
        let x_906 : vec4<f32> = u_xlat8;
        u_xlat8 = vec4<f32>(x_905.x, x_906.y, x_905.y, x_906.w);
        let x_908 : vec2<f32> = u_xlat49;
        let x_910 : vec2<f32> = (-(x_908) + vec2<f32>(1.0f, 1.0f));
        let x_911 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_910.x, x_910.y, x_911.z, x_911.w);
        let x_913 : vec2<f32> = u_xlat49;
        u_xlat51 = min(x_913, vec2<f32>(0.0f, 0.0f));
        let x_915 : vec2<f32> = u_xlat51;
        let x_917 : vec2<f32> = u_xlat51;
        let x_919 : vec4<f32> = u_xlat9;
        let x_921 : vec2<f32> = ((-(x_915) * x_917) + vec2<f32>(x_919.x, x_919.y));
        let x_922 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_921.x, x_921.y, x_922.z, x_922.w);
        let x_924 : vec2<f32> = u_xlat49;
        u_xlat51 = max(x_924, vec2<f32>(0.0f, 0.0f));
        let x_927 : vec2<f32> = u_xlat51;
        let x_929 : vec2<f32> = u_xlat51;
        let x_931 : vec4<f32> = u_xlat8;
        let x_933 : vec2<f32> = ((-(x_927) * x_929) + vec2<f32>(x_931.y, x_931.w));
        let x_934 : vec3<f32> = u_xlat29;
        u_xlat29 = vec3<f32>(x_933.x, x_934.y, x_933.y);
        let x_936 : vec4<f32> = u_xlat9;
        let x_939 : vec2<f32> = (vec2<f32>(x_936.x, x_936.y) + vec2<f32>(2.0f, 2.0f));
        let x_940 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_939.x, x_939.y, x_940.z, x_940.w);
        let x_942 : vec3<f32> = u_xlat29;
        let x_944 : vec2<f32> = (vec2<f32>(x_942.x, x_942.z) + vec2<f32>(2.0f, 2.0f));
        let x_945 : vec4<f32> = u_xlat8;
        u_xlat8 = vec4<f32>(x_945.x, x_944.x, x_945.z, x_944.y);
        let x_948 : f32 = u_xlat8.y;
        u_xlat11.z = (x_948 * 0.081632003f);
        let x_952 : vec4<f32> = u_xlat8;
        let x_955 : vec3<f32> = (vec3<f32>(x_952.z, x_952.x, x_952.w) * vec3<f32>(0.081632003f, 0.081632003f, 0.081632003f));
        let x_956 : vec4<f32> = u_xlat12;
        u_xlat12 = vec4<f32>(x_955.x, x_955.y, x_955.z, x_956.w);
        let x_958 : vec4<f32> = u_xlat9;
        let x_961 : vec2<f32> = (vec2<f32>(x_958.x, x_958.y) * vec2<f32>(0.081632003f, 0.081632003f));
        let x_962 : vec4<f32> = u_xlat8;
        u_xlat8 = vec4<f32>(x_961.x, x_961.y, x_962.z, x_962.w);
        let x_965 : f32 = u_xlat12.y;
        u_xlat11.x = x_965;
        let x_967 : vec2<f32> = u_xlat49;
        let x_974 : vec2<f32> = ((vec2<f32>(x_967.x, x_967.x) * vec2<f32>(-0.081632003f, 0.081632003f)) + vec2<f32>(0.163264006f, 0.081632003f));
        let x_975 : vec4<f32> = u_xlat11;
        u_xlat11 = vec4<f32>(x_975.x, x_974.x, x_975.z, x_974.y);
        let x_977 : vec2<f32> = u_xlat49;
        let x_981 : vec2<f32> = ((vec2<f32>(x_977.x, x_977.x) * vec2<f32>(-0.081632003f, 0.081632003f)) + vec2<f32>(0.081632003f, 0.163264006f));
        let x_982 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_981.x, x_982.y, x_981.y, x_982.w);
        let x_985 : f32 = u_xlat8.x;
        u_xlat9.y = x_985;
        let x_988 : f32 = u_xlat10.y;
        u_xlat9.w = x_988;
        let x_990 : vec4<f32> = u_xlat9;
        let x_991 : vec4<f32> = u_xlat11;
        u_xlat11 = (x_990 + x_991);
        let x_993 : vec2<f32> = u_xlat49;
        let x_996 : vec2<f32> = ((vec2<f32>(x_993.y, x_993.y) * vec2<f32>(-0.081632003f, 0.081632003f)) + vec2<f32>(0.163264006f, 0.081632003f));
        let x_997 : vec4<f32> = u_xlat12;
        u_xlat12 = vec4<f32>(x_997.x, x_996.x, x_997.z, x_996.y);
        let x_999 : vec2<f32> = u_xlat49;
        let x_1002 : vec2<f32> = ((vec2<f32>(x_999.y, x_999.y) * vec2<f32>(-0.081632003f, 0.081632003f)) + vec2<f32>(0.081632003f, 0.163264006f));
        let x_1003 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_1002.x, x_1003.y, x_1002.y, x_1003.w);
        let x_1006 : f32 = u_xlat8.y;
        u_xlat10.y = x_1006;
        let x_1008 : vec4<f32> = u_xlat10;
        let x_1009 : vec4<f32> = u_xlat12;
        u_xlat8 = (x_1008 + x_1009);
        let x_1011 : vec4<f32> = u_xlat9;
        let x_1012 : vec4<f32> = u_xlat11;
        u_xlat9 = (x_1011 / x_1012);
        let x_1014 : vec4<f32> = u_xlat9;
        u_xlat9 = (x_1014 + vec4<f32>(-3.5f, -1.5f, 0.5f, 2.5f));
        let x_1020 : vec4<f32> = u_xlat10;
        let x_1021 : vec4<f32> = u_xlat8;
        u_xlat10 = (x_1020 / x_1021);
        let x_1023 : vec4<f32> = u_xlat10;
        u_xlat10 = (x_1023 + vec4<f32>(-3.5f, -1.5f, 0.5f, 2.5f));
        let x_1025 : vec4<f32> = u_xlat9;
        let x_1028 : vec4<f32> = x_272.x_MainLightShadowmapSize;
        u_xlat9 = (vec4<f32>(x_1025.w, x_1025.x, x_1025.y, x_1025.z) * vec4<f32>(x_1028.x, x_1028.x, x_1028.x, x_1028.x));
        let x_1031 : vec4<f32> = u_xlat10;
        let x_1034 : vec4<f32> = x_272.x_MainLightShadowmapSize;
        u_xlat10 = (vec4<f32>(x_1031.x, x_1031.w, x_1031.y, x_1031.z) * vec4<f32>(x_1034.y, x_1034.y, x_1034.y, x_1034.y));
        let x_1037 : vec4<f32> = u_xlat9;
        let x_1038 : vec3<f32> = vec3<f32>(x_1037.y, x_1037.z, x_1037.w);
        let x_1039 : vec4<f32> = u_xlat12;
        u_xlat12 = vec4<f32>(x_1038.x, x_1039.y, x_1038.y, x_1038.z);
        let x_1042 : f32 = u_xlat10.x;
        u_xlat12.y = x_1042;
        let x_1044 : vec4<f32> = u_xlat7;
        let x_1047 : vec4<f32> = x_272.x_MainLightShadowmapSize;
        let x_1050 : vec4<f32> = u_xlat12;
        u_xlat13 = ((vec4<f32>(x_1044.x, x_1044.y, x_1044.x, x_1044.y) * vec4<f32>(x_1047.x, x_1047.y, x_1047.x, x_1047.y)) + vec4<f32>(x_1050.x, x_1050.y, x_1050.z, x_1050.y));
        let x_1053 : vec4<f32> = u_xlat7;
        let x_1056 : vec4<f32> = x_272.x_MainLightShadowmapSize;
        let x_1059 : vec4<f32> = u_xlat12;
        u_xlat49 = ((vec2<f32>(x_1053.x, x_1053.y) * vec2<f32>(x_1056.x, x_1056.y)) + vec2<f32>(x_1059.w, x_1059.y));
        let x_1063 : f32 = u_xlat12.y;
        u_xlat9.y = x_1063;
        let x_1066 : f32 = u_xlat10.z;
        u_xlat12.y = x_1066;
        let x_1068 : vec4<f32> = u_xlat7;
        let x_1071 : vec4<f32> = x_272.x_MainLightShadowmapSize;
        let x_1074 : vec4<f32> = u_xlat12;
        u_xlat14 = ((vec4<f32>(x_1068.x, x_1068.y, x_1068.x, x_1068.y) * vec4<f32>(x_1071.x, x_1071.y, x_1071.x, x_1071.y)) + vec4<f32>(x_1074.x, x_1074.y, x_1074.z, x_1074.y));
        let x_1077 : vec4<f32> = u_xlat7;
        let x_1080 : vec4<f32> = x_272.x_MainLightShadowmapSize;
        let x_1083 : vec4<f32> = u_xlat12;
        let x_1085 : vec2<f32> = ((vec2<f32>(x_1077.x, x_1077.y) * vec2<f32>(x_1080.x, x_1080.y)) + vec2<f32>(x_1083.w, x_1083.y));
        let x_1086 : vec4<f32> = u_xlat15;
        u_xlat15 = vec4<f32>(x_1085.x, x_1085.y, x_1086.z, x_1086.w);
        let x_1089 : f32 = u_xlat12.y;
        u_xlat9.z = x_1089;
        let x_1092 : vec4<f32> = u_xlat7;
        let x_1095 : vec4<f32> = x_272.x_MainLightShadowmapSize;
        let x_1098 : vec4<f32> = u_xlat9;
        u_xlat16 = ((vec4<f32>(x_1092.x, x_1092.y, x_1092.x, x_1092.y) * vec4<f32>(x_1095.x, x_1095.y, x_1095.x, x_1095.y)) + vec4<f32>(x_1098.x, x_1098.y, x_1098.x, x_1098.z));
        let x_1102 : f32 = u_xlat10.w;
        u_xlat12.y = x_1102;
        let x_1105 : vec4<f32> = u_xlat7;
        let x_1108 : vec4<f32> = x_272.x_MainLightShadowmapSize;
        let x_1111 : vec4<f32> = u_xlat12;
        u_xlat17 = ((vec4<f32>(x_1105.x, x_1105.y, x_1105.x, x_1105.y) * vec4<f32>(x_1108.x, x_1108.y, x_1108.x, x_1108.y)) + vec4<f32>(x_1111.x, x_1111.y, x_1111.z, x_1111.y));
        let x_1115 : vec4<f32> = u_xlat7;
        let x_1118 : vec4<f32> = x_272.x_MainLightShadowmapSize;
        let x_1121 : vec4<f32> = u_xlat12;
        u_xlat30 = ((vec2<f32>(x_1115.x, x_1115.y) * vec2<f32>(x_1118.x, x_1118.y)) + vec2<f32>(x_1121.w, x_1121.y));
        let x_1125 : f32 = u_xlat12.y;
        u_xlat9.w = x_1125;
        let x_1128 : vec4<f32> = u_xlat7;
        let x_1131 : vec4<f32> = x_272.x_MainLightShadowmapSize;
        let x_1134 : vec4<f32> = u_xlat9;
        u_xlat57 = ((vec2<f32>(x_1128.x, x_1128.y) * vec2<f32>(x_1131.x, x_1131.y)) + vec2<f32>(x_1134.x, x_1134.w));
        let x_1137 : vec4<f32> = u_xlat12;
        let x_1138 : vec3<f32> = vec3<f32>(x_1137.x, x_1137.z, x_1137.w);
        let x_1139 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_1138.x, x_1139.y, x_1138.y, x_1138.z);
        let x_1141 : vec4<f32> = u_xlat7;
        let x_1144 : vec4<f32> = x_272.x_MainLightShadowmapSize;
        let x_1147 : vec4<f32> = u_xlat10;
        u_xlat12 = ((vec4<f32>(x_1141.x, x_1141.y, x_1141.x, x_1141.y) * vec4<f32>(x_1144.x, x_1144.y, x_1144.x, x_1144.y)) + vec4<f32>(x_1147.x, x_1147.y, x_1147.z, x_1147.y));
        let x_1151 : vec4<f32> = u_xlat7;
        let x_1154 : vec4<f32> = x_272.x_MainLightShadowmapSize;
        let x_1157 : vec4<f32> = u_xlat10;
        u_xlat52 = ((vec2<f32>(x_1151.x, x_1151.y) * vec2<f32>(x_1154.x, x_1154.y)) + vec2<f32>(x_1157.w, x_1157.y));
        let x_1161 : f32 = u_xlat9.x;
        u_xlat10.x = x_1161;
        let x_1163 : vec4<f32> = u_xlat7;
        let x_1166 : vec4<f32> = x_272.x_MainLightShadowmapSize;
        let x_1169 : vec4<f32> = u_xlat10;
        let x_1171 : vec2<f32> = ((vec2<f32>(x_1163.x, x_1163.y) * vec2<f32>(x_1166.x, x_1166.y)) + vec2<f32>(x_1169.x, x_1169.y));
        let x_1172 : vec4<f32> = u_xlat7;
        u_xlat7 = vec4<f32>(x_1171.x, x_1171.y, x_1172.z, x_1172.w);
        let x_1175 : vec4<f32> = u_xlat8;
        let x_1177 : vec4<f32> = u_xlat11;
        u_xlat18 = (vec4<f32>(x_1175.x, x_1175.x, x_1175.x, x_1175.x) * x_1177);
        let x_1180 : vec4<f32> = u_xlat8;
        let x_1182 : vec4<f32> = u_xlat11;
        u_xlat19 = (vec4<f32>(x_1180.y, x_1180.y, x_1180.y, x_1180.y) * x_1182);
        let x_1185 : vec4<f32> = u_xlat8;
        let x_1187 : vec4<f32> = u_xlat11;
        u_xlat20 = (vec4<f32>(x_1185.z, x_1185.z, x_1185.z, x_1185.z) * x_1187);
        let x_1189 : vec4<f32> = u_xlat8;
        let x_1191 : vec4<f32> = u_xlat11;
        u_xlat8 = (vec4<f32>(x_1189.w, x_1189.w, x_1189.w, x_1189.w) * x_1191);
        let x_1194 : vec4<f32> = u_xlat13;
        let x_1195 : vec2<f32> = vec2<f32>(x_1194.x, x_1194.y);
        let x_1197 : f32 = u_xlat6.z;
        txVec13 = vec3<f32>(x_1195.x, x_1195.y, x_1197);
        let x_1204 : vec3<f32> = txVec13;
        let x_1206 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1204.xy, x_1204.z);
        u_xlat65 = x_1206;
        let x_1208 : vec4<f32> = u_xlat13;
        let x_1209 : vec2<f32> = vec2<f32>(x_1208.z, x_1208.w);
        let x_1211 : f32 = u_xlat6.z;
        txVec14 = vec3<f32>(x_1209.x, x_1209.y, x_1211);
        let x_1218 : vec3<f32> = txVec14;
        let x_1220 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1218.xy, x_1218.z);
        u_xlat67 = x_1220;
        let x_1221 : f32 = u_xlat67;
        let x_1223 : f32 = u_xlat18.y;
        u_xlat67 = (x_1221 * x_1223);
        let x_1226 : f32 = u_xlat18.x;
        let x_1227 : f32 = u_xlat65;
        let x_1229 : f32 = u_xlat67;
        u_xlat65 = ((x_1226 * x_1227) + x_1229);
        let x_1232 : vec2<f32> = u_xlat49;
        let x_1234 : f32 = u_xlat6.z;
        txVec15 = vec3<f32>(x_1232.x, x_1232.y, x_1234);
        let x_1241 : vec3<f32> = txVec15;
        let x_1243 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1241.xy, x_1241.z);
        u_xlat67 = x_1243;
        let x_1245 : f32 = u_xlat18.z;
        let x_1246 : f32 = u_xlat67;
        let x_1248 : f32 = u_xlat65;
        u_xlat65 = ((x_1245 * x_1246) + x_1248);
        let x_1251 : vec4<f32> = u_xlat16;
        let x_1252 : vec2<f32> = vec2<f32>(x_1251.x, x_1251.y);
        let x_1254 : f32 = u_xlat6.z;
        txVec16 = vec3<f32>(x_1252.x, x_1252.y, x_1254);
        let x_1261 : vec3<f32> = txVec16;
        let x_1263 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1261.xy, x_1261.z);
        u_xlat67 = x_1263;
        let x_1265 : f32 = u_xlat18.w;
        let x_1266 : f32 = u_xlat67;
        let x_1268 : f32 = u_xlat65;
        u_xlat65 = ((x_1265 * x_1266) + x_1268);
        let x_1271 : vec4<f32> = u_xlat14;
        let x_1272 : vec2<f32> = vec2<f32>(x_1271.x, x_1271.y);
        let x_1274 : f32 = u_xlat6.z;
        txVec17 = vec3<f32>(x_1272.x, x_1272.y, x_1274);
        let x_1281 : vec3<f32> = txVec17;
        let x_1283 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1281.xy, x_1281.z);
        u_xlat67 = x_1283;
        let x_1285 : f32 = u_xlat19.x;
        let x_1286 : f32 = u_xlat67;
        let x_1288 : f32 = u_xlat65;
        u_xlat65 = ((x_1285 * x_1286) + x_1288);
        let x_1291 : vec4<f32> = u_xlat14;
        let x_1292 : vec2<f32> = vec2<f32>(x_1291.z, x_1291.w);
        let x_1294 : f32 = u_xlat6.z;
        txVec18 = vec3<f32>(x_1292.x, x_1292.y, x_1294);
        let x_1301 : vec3<f32> = txVec18;
        let x_1303 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1301.xy, x_1301.z);
        u_xlat67 = x_1303;
        let x_1305 : f32 = u_xlat19.y;
        let x_1306 : f32 = u_xlat67;
        let x_1308 : f32 = u_xlat65;
        u_xlat65 = ((x_1305 * x_1306) + x_1308);
        let x_1311 : vec4<f32> = u_xlat15;
        let x_1312 : vec2<f32> = vec2<f32>(x_1311.x, x_1311.y);
        let x_1314 : f32 = u_xlat6.z;
        txVec19 = vec3<f32>(x_1312.x, x_1312.y, x_1314);
        let x_1321 : vec3<f32> = txVec19;
        let x_1323 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1321.xy, x_1321.z);
        u_xlat67 = x_1323;
        let x_1325 : f32 = u_xlat19.z;
        let x_1326 : f32 = u_xlat67;
        let x_1328 : f32 = u_xlat65;
        u_xlat65 = ((x_1325 * x_1326) + x_1328);
        let x_1331 : vec4<f32> = u_xlat16;
        let x_1332 : vec2<f32> = vec2<f32>(x_1331.z, x_1331.w);
        let x_1334 : f32 = u_xlat6.z;
        txVec20 = vec3<f32>(x_1332.x, x_1332.y, x_1334);
        let x_1341 : vec3<f32> = txVec20;
        let x_1343 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1341.xy, x_1341.z);
        u_xlat67 = x_1343;
        let x_1345 : f32 = u_xlat19.w;
        let x_1346 : f32 = u_xlat67;
        let x_1348 : f32 = u_xlat65;
        u_xlat65 = ((x_1345 * x_1346) + x_1348);
        let x_1351 : vec4<f32> = u_xlat17;
        let x_1352 : vec2<f32> = vec2<f32>(x_1351.x, x_1351.y);
        let x_1354 : f32 = u_xlat6.z;
        txVec21 = vec3<f32>(x_1352.x, x_1352.y, x_1354);
        let x_1361 : vec3<f32> = txVec21;
        let x_1363 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1361.xy, x_1361.z);
        u_xlat67 = x_1363;
        let x_1365 : f32 = u_xlat20.x;
        let x_1366 : f32 = u_xlat67;
        let x_1368 : f32 = u_xlat65;
        u_xlat65 = ((x_1365 * x_1366) + x_1368);
        let x_1371 : vec4<f32> = u_xlat17;
        let x_1372 : vec2<f32> = vec2<f32>(x_1371.z, x_1371.w);
        let x_1374 : f32 = u_xlat6.z;
        txVec22 = vec3<f32>(x_1372.x, x_1372.y, x_1374);
        let x_1381 : vec3<f32> = txVec22;
        let x_1383 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1381.xy, x_1381.z);
        u_xlat67 = x_1383;
        let x_1385 : f32 = u_xlat20.y;
        let x_1386 : f32 = u_xlat67;
        let x_1388 : f32 = u_xlat65;
        u_xlat65 = ((x_1385 * x_1386) + x_1388);
        let x_1391 : vec2<f32> = u_xlat30;
        let x_1393 : f32 = u_xlat6.z;
        txVec23 = vec3<f32>(x_1391.x, x_1391.y, x_1393);
        let x_1400 : vec3<f32> = txVec23;
        let x_1402 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1400.xy, x_1400.z);
        u_xlat67 = x_1402;
        let x_1404 : f32 = u_xlat20.z;
        let x_1405 : f32 = u_xlat67;
        let x_1407 : f32 = u_xlat65;
        u_xlat65 = ((x_1404 * x_1405) + x_1407);
        let x_1410 : vec2<f32> = u_xlat57;
        let x_1412 : f32 = u_xlat6.z;
        txVec24 = vec3<f32>(x_1410.x, x_1410.y, x_1412);
        let x_1419 : vec3<f32> = txVec24;
        let x_1421 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1419.xy, x_1419.z);
        u_xlat67 = x_1421;
        let x_1423 : f32 = u_xlat20.w;
        let x_1424 : f32 = u_xlat67;
        let x_1426 : f32 = u_xlat65;
        u_xlat65 = ((x_1423 * x_1424) + x_1426);
        let x_1429 : vec4<f32> = u_xlat12;
        let x_1430 : vec2<f32> = vec2<f32>(x_1429.x, x_1429.y);
        let x_1432 : f32 = u_xlat6.z;
        txVec25 = vec3<f32>(x_1430.x, x_1430.y, x_1432);
        let x_1439 : vec3<f32> = txVec25;
        let x_1441 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1439.xy, x_1439.z);
        u_xlat67 = x_1441;
        let x_1443 : f32 = u_xlat8.x;
        let x_1444 : f32 = u_xlat67;
        let x_1446 : f32 = u_xlat65;
        u_xlat65 = ((x_1443 * x_1444) + x_1446);
        let x_1449 : vec4<f32> = u_xlat12;
        let x_1450 : vec2<f32> = vec2<f32>(x_1449.z, x_1449.w);
        let x_1452 : f32 = u_xlat6.z;
        txVec26 = vec3<f32>(x_1450.x, x_1450.y, x_1452);
        let x_1459 : vec3<f32> = txVec26;
        let x_1461 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1459.xy, x_1459.z);
        u_xlat67 = x_1461;
        let x_1463 : f32 = u_xlat8.y;
        let x_1464 : f32 = u_xlat67;
        let x_1466 : f32 = u_xlat65;
        u_xlat65 = ((x_1463 * x_1464) + x_1466);
        let x_1469 : vec2<f32> = u_xlat52;
        let x_1471 : f32 = u_xlat6.z;
        txVec27 = vec3<f32>(x_1469.x, x_1469.y, x_1471);
        let x_1478 : vec3<f32> = txVec27;
        let x_1480 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1478.xy, x_1478.z);
        u_xlat67 = x_1480;
        let x_1482 : f32 = u_xlat8.z;
        let x_1483 : f32 = u_xlat67;
        let x_1485 : f32 = u_xlat65;
        u_xlat65 = ((x_1482 * x_1483) + x_1485);
        let x_1488 : vec4<f32> = u_xlat7;
        let x_1489 : vec2<f32> = vec2<f32>(x_1488.x, x_1488.y);
        let x_1491 : f32 = u_xlat6.z;
        txVec28 = vec3<f32>(x_1489.x, x_1489.y, x_1491);
        let x_1498 : vec3<f32> = txVec28;
        let x_1500 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1498.xy, x_1498.z);
        u_xlat67 = x_1500;
        let x_1502 : f32 = u_xlat8.w;
        let x_1503 : f32 = u_xlat67;
        let x_1505 : f32 = u_xlat65;
        u_xlat64 = ((x_1502 * x_1503) + x_1505);
      }
    }
  } else {
    let x_1509 : vec4<f32> = u_xlat6;
    let x_1510 : vec2<f32> = vec2<f32>(x_1509.x, x_1509.y);
    let x_1512 : f32 = u_xlat6.z;
    txVec29 = vec3<f32>(x_1510.x, x_1510.y, x_1512);
    let x_1519 : vec3<f32> = txVec29;
    let x_1521 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1519.xy, x_1519.z);
    u_xlat64 = x_1521;
  }
  let x_1523 : f32 = x_272.x_MainLightShadowParams.x;
  u_xlat65 = (-(x_1523) + 1.0f);
  let x_1526 : f32 = u_xlat64;
  let x_1528 : f32 = x_272.x_MainLightShadowParams.x;
  let x_1530 : f32 = u_xlat65;
  u_xlat64 = ((x_1526 * x_1528) + x_1530);
  let x_1534 : f32 = u_xlat6.z;
  u_xlatb67 = (0.0f >= x_1534);
  let x_1538 : f32 = u_xlat6.z;
  u_xlatb6 = (x_1538 >= 1.0f);
  let x_1540 : bool = u_xlatb67;
  let x_1541 : bool = u_xlatb6;
  u_xlatb67 = (x_1540 | x_1541);
  let x_1543 : bool = u_xlatb67;
  let x_1544 : f32 = u_xlat64;
  u_xlat64 = select(x_1544, 1.0f, x_1543);
  let x_1546 : vec3<f32> = u_xlat0;
  let x_1548 : vec4<f32> = x_90.x_MainLightPosition;
  u_xlat0.x = dot(x_1546, -(vec3<f32>(x_1548.x, x_1548.y, x_1548.z)));
  let x_1554 : f32 = u_xlat0.x;
  u_xlat0.x = clamp(x_1554, 0.0f, 1.0f);
  let x_1557 : f32 = u_xlat64;
  let x_1561 : vec4<f32> = x_90.x_MainLightColor;
  let x_1563 : vec3<f32> = (vec3<f32>(x_1557, x_1557, x_1557) * vec3<f32>(x_1561.x, x_1561.y, x_1561.z));
  let x_1564 : vec4<f32> = u_xlat6;
  u_xlat6 = vec4<f32>(x_1563.x, x_1563.y, x_1563.z, x_1564.w);
  let x_1566 : vec3<f32> = u_xlat0;
  let x_1568 : vec4<f32> = u_xlat6;
  u_xlat0 = (vec3<f32>(x_1566.x, x_1566.x, x_1566.x) * vec3<f32>(x_1568.x, x_1568.y, x_1568.z));
  let x_1571 : vec3<f32> = u_xlat0;
  let x_1572 : vec4<f32> = u_xlat3;
  u_xlat0 = (x_1571 * vec3<f32>(x_1572.x, x_1572.y, x_1572.z));
  let x_1576 : f32 = x_161.unity_LODFade.x;
  u_xlatb64 = (x_1576 < 0.0f);
  let x_1579 : f32 = x_161.unity_LODFade.x;
  u_xlat3.x = (x_1579 + 1.0f);
  let x_1582 : bool = u_xlatb64;
  if (x_1582) {
    let x_1587 : f32 = u_xlat3.x;
    x_1583 = x_1587;
  } else {
    let x_1590 : f32 = x_161.unity_LODFade.x;
    x_1583 = x_1590;
  }
  let x_1591 : f32 = x_1583;
  u_xlat64 = x_1591;
  let x_1593 : f32 = u_xlat64;
  u_xlatb3 = (0.5f >= x_1593);
  let x_1595 : vec3<f32> = u_xlat1;
  let x_1598 : vec4<f32> = x_90.x_ScreenParams;
  u_xlat1 = (abs(x_1595) * vec3<f32>(x_1598.x, x_1598.y, x_1598.x));
  let x_1604 : vec3<f32> = u_xlat1;
  u_xlatu1 = vec3<u32>(x_1604);
  let x_1608 : u32 = u_xlatu1.z;
  u_xlatu43 = (x_1608 * 1025u);
  let x_1612 : u32 = u_xlatu43;
  u_xlatu24 = (x_1612 >> 6u);
  let x_1616 : u32 = u_xlatu43;
  let x_1617 : u32 = u_xlatu24;
  u_xlati43 = bitcast<i32>((x_1616 ^ x_1617));
  let x_1620 : i32 = u_xlati43;
  u_xlatu43 = (bitcast<u32>(x_1620) * 9u);
  let x_1624 : u32 = u_xlatu43;
  u_xlatu24 = (x_1624 >> 11u);
  let x_1627 : u32 = u_xlatu43;
  let x_1628 : u32 = u_xlatu24;
  u_xlati43 = bitcast<i32>((x_1627 ^ x_1628));
  let x_1631 : i32 = u_xlati43;
  u_xlati43 = (x_1631 * 32769i);
  let x_1635 : i32 = u_xlati43;
  let x_1638 : u32 = u_xlatu1.y;
  u_xlati22 = bitcast<i32>((bitcast<u32>(x_1635) ^ x_1638));
  let x_1642 : i32 = u_xlati22;
  u_xlatu22 = (bitcast<u32>(x_1642) * 1025u);
  let x_1645 : u32 = u_xlatu22;
  u_xlatu43 = (x_1645 >> 6u);
  let x_1647 : u32 = u_xlatu43;
  let x_1648 : u32 = u_xlatu22;
  u_xlati22 = bitcast<i32>((x_1647 ^ x_1648));
  let x_1651 : i32 = u_xlati22;
  u_xlatu22 = (bitcast<u32>(x_1651) * 9u);
  let x_1654 : u32 = u_xlatu22;
  u_xlatu43 = (x_1654 >> 11u);
  let x_1656 : u32 = u_xlatu43;
  let x_1657 : u32 = u_xlatu22;
  u_xlati22 = bitcast<i32>((x_1656 ^ x_1657));
  let x_1660 : i32 = u_xlati22;
  u_xlati22 = (x_1660 * 32769i);
  let x_1663 : i32 = u_xlati22;
  let x_1666 : u32 = u_xlatu1.x;
  u_xlati1 = bitcast<i32>((bitcast<u32>(x_1663) ^ x_1666));
  let x_1669 : i32 = u_xlati1;
  u_xlatu1.x = (bitcast<u32>(x_1669) * 1025u);
  let x_1674 : u32 = u_xlatu1.x;
  u_xlatu22 = (x_1674 >> 6u);
  let x_1676 : u32 = u_xlatu22;
  let x_1678 : u32 = u_xlatu1.x;
  u_xlati1 = bitcast<i32>((x_1676 ^ x_1678));
  let x_1681 : i32 = u_xlati1;
  u_xlatu1.x = (bitcast<u32>(x_1681) * 9u);
  let x_1686 : u32 = u_xlatu1.x;
  u_xlatu22 = (x_1686 >> 11u);
  let x_1688 : u32 = u_xlatu22;
  let x_1690 : u32 = u_xlatu1.x;
  u_xlati1 = bitcast<i32>((x_1688 ^ x_1690));
  let x_1693 : i32 = u_xlati1;
  u_xlati1 = (x_1693 * 32769i);
  param = 1065353216i;
  let x_1699 : i32 = u_xlati1;
  param_1 = x_1699;
  param_2 = 0i;
  param_3 = 23i;
  let x_1702 : i32 = int_bitfieldInsert_i1_i1_i1_i1_(&(param), &(param_1), &(param_2), &(param_3));
  u_xlat1.x = bitcast<f32>(x_1702);
  let x_1706 : f32 = u_xlat1.x;
  u_xlat1.x = (x_1706 + -1.0f);
  let x_1711 : f32 = u_xlat1.x;
  u_xlat22 = (-(x_1711) + 1.0f);
  let x_1714 : bool = u_xlatb3;
  if (x_1714) {
    let x_1719 : f32 = u_xlat1.x;
    x_1715 = x_1719;
  } else {
    let x_1721 : f32 = u_xlat22;
    x_1715 = x_1721;
  }
  let x_1722 : f32 = x_1715;
  u_xlat1.x = x_1722;
  let x_1724 : f32 = u_xlat64;
  let x_1727 : f32 = u_xlat1.x;
  u_xlat1.x = ((x_1724 * 2.0f) + -(x_1727));
  let x_1732 : f32 = u_xlat1.x;
  let x_1734 : f32 = u_xlat3.w;
  u_xlat22 = (x_1732 * x_1734);
  let x_1739 : f32 = u_xlat22;
  u_xlatb43.x = (x_1739 >= 0.400000006f);
  let x_1745 : bool = u_xlatb43.x;
  let x_1746 : f32 = u_xlat22;
  u_xlat43.x = select(0.0f, x_1746, x_1745);
  let x_1750 : f32 = u_xlat3.w;
  let x_1752 : f32 = u_xlat1.x;
  u_xlat1.x = ((x_1750 * x_1752) + -0.400000006f);
  let x_1757 : f32 = u_xlat22;
  u_xlat64 = dpdxCoarse(x_1757);
  let x_1759 : f32 = u_xlat22;
  u_xlat22 = dpdyCoarse(x_1759);
  let x_1761 : f32 = u_xlat22;
  let x_1763 : f32 = u_xlat64;
  u_xlat22 = (abs(x_1761) + abs(x_1763));
  let x_1766 : f32 = u_xlat22;
  u_xlat22 = max(x_1766, 0.0001f);
  let x_1770 : f32 = u_xlat1.x;
  let x_1771 : f32 = u_xlat22;
  u_xlat1.x = (x_1770 / x_1771);
  let x_1775 : f32 = u_xlat1.x;
  u_xlat1.x = (x_1775 + 0.5f);
  let x_1779 : f32 = u_xlat1.x;
  u_xlat1.x = clamp(x_1779, 0.0f, 1.0f);
  let x_1784 : f32 = x_90.x_AlphaToMaskAvailable;
  u_xlatb22 = !((x_1784 == 0.0f));
  let x_1786 : bool = u_xlatb22;
  if (x_1786) {
    let x_1791 : f32 = u_xlat1.x;
    x_1787 = x_1791;
  } else {
    let x_1794 : f32 = u_xlat43.x;
    x_1787 = x_1794;
  }
  let x_1795 : f32 = x_1787;
  u_xlat1.x = x_1795;
  let x_1798 : f32 = u_xlat1.x;
  u_xlat43.x = (x_1798 + -0.0001f);
  let x_1803 : f32 = u_xlat43.x;
  u_xlatb43.x = (x_1803 < 0.0f);
  let x_1807 : bool = u_xlatb43.x;
  if (((select(0i, 1i, x_1807) * -1i) != 0i)) {
    discard;
  }
  let x_1817 : f32 = vs_INTERP2.w;
  u_xlatb43.x = (0.0f < x_1817);
  let x_1821 : f32 = x_161.unity_WorldTransformParams.w;
  u_xlatb43.y = (x_1821 >= 0.0f);
  let x_1825 : bool = u_xlatb43.x;
  u_xlat43.x = select(-1.0f, 1.0f, x_1825);
  let x_1829 : bool = u_xlatb43.y;
  u_xlat43.y = select(-1.0f, 1.0f, x_1829);
  let x_1833 : f32 = u_xlat43.y;
  let x_1835 : f32 = u_xlat43.x;
  u_xlat43.x = (x_1833 * x_1835);
  let x_1838 : vec3<f32> = vs_INTERP1;
  let x_1840 : vec4<f32> = vs_INTERP2;
  let x_1842 : vec3<f32> = (vec3<f32>(x_1838.z, x_1838.x, x_1838.y) * vec3<f32>(x_1840.y, x_1840.z, x_1840.x));
  let x_1843 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_1842.x, x_1842.y, x_1842.z, x_1843.w);
  let x_1845 : vec3<f32> = vs_INTERP1;
  let x_1847 : vec4<f32> = vs_INTERP2;
  let x_1850 : vec4<f32> = u_xlat3;
  let x_1853 : vec3<f32> = ((vec3<f32>(x_1845.y, x_1845.z, x_1845.x) * vec3<f32>(x_1847.z, x_1847.x, x_1847.y)) + -(vec3<f32>(x_1850.x, x_1850.y, x_1850.z)));
  let x_1854 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_1853.x, x_1853.y, x_1853.z, x_1854.w);
  let x_1856 : vec2<f32> = u_xlat43;
  let x_1858 : vec4<f32> = u_xlat3;
  let x_1860 : vec3<f32> = (vec3<f32>(x_1856.x, x_1856.x, x_1856.x) * vec3<f32>(x_1858.x, x_1858.y, x_1858.z));
  let x_1861 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_1860.x, x_1860.y, x_1860.z, x_1861.w);
  let x_1863 : vec4<f32> = u_xlat3;
  let x_1865 : vec3<f32> = u_xlat26;
  let x_1867 : vec3<f32> = (vec3<f32>(x_1863.x, x_1863.y, x_1863.z) * vec3<f32>(x_1865.y, x_1865.y, x_1865.y));
  let x_1868 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_1867.x, x_1867.y, x_1867.z, x_1868.w);
  let x_1870 : vec3<f32> = u_xlat26;
  let x_1872 : vec4<f32> = vs_INTERP2;
  let x_1875 : vec4<f32> = u_xlat3;
  let x_1877 : vec3<f32> = ((vec3<f32>(x_1870.x, x_1870.x, x_1870.x) * vec3<f32>(x_1872.x, x_1872.y, x_1872.z)) + vec3<f32>(x_1875.x, x_1875.y, x_1875.z));
  let x_1878 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_1877.x, x_1877.y, x_1877.z, x_1878.w);
  let x_1880 : vec3<f32> = u_xlat26;
  let x_1882 : vec3<f32> = vs_INTERP1;
  let x_1884 : vec4<f32> = u_xlat3;
  let x_1886 : vec3<f32> = ((vec3<f32>(x_1880.z, x_1880.z, x_1880.z) * x_1882) + vec3<f32>(x_1884.x, x_1884.y, x_1884.z));
  let x_1887 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_1886.x, x_1886.y, x_1886.z, x_1887.w);
  let x_1889 : vec4<f32> = u_xlat3;
  let x_1891 : vec4<f32> = u_xlat3;
  u_xlat43.x = dot(vec3<f32>(x_1889.x, x_1889.y, x_1889.z), vec3<f32>(x_1891.x, x_1891.y, x_1891.z));
  let x_1896 : f32 = u_xlat43.x;
  u_xlat43.x = inverseSqrt(x_1896);
  let x_1899 : vec2<f32> = u_xlat43;
  let x_1901 : vec4<f32> = u_xlat3;
  let x_1903 : vec3<f32> = (vec3<f32>(x_1899.x, x_1899.x, x_1899.x) * vec3<f32>(x_1901.x, x_1901.y, x_1901.z));
  let x_1904 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_1903.x, x_1903.y, x_1903.z, x_1904.w);
  let x_1913 : vec2<f32> = vs_INTERP5;
  let x_1915 : f32 = x_90.x_GlobalMipBias.x;
  let x_1916 : vec4<f32> = textureSampleBias(unity_LightmapInd, samplerunity_Lightmap, x_1913, x_1915);
  u_xlat6 = x_1916;
  let x_1921 : vec2<f32> = vs_INTERP5;
  let x_1923 : f32 = x_90.x_GlobalMipBias.x;
  let x_1924 : vec4<f32> = textureSampleBias(unity_Lightmap, samplerunity_Lightmap, x_1921, x_1923);
  u_xlat26 = vec3<f32>(x_1924.x, x_1924.y, x_1924.z);
  let x_1926 : vec4<f32> = u_xlat6;
  let x_1929 : vec3<f32> = (vec3<f32>(x_1926.x, x_1926.y, x_1926.z) + vec3<f32>(-0.5f, -0.5f, -0.5f));
  let x_1930 : vec4<f32> = u_xlat6;
  u_xlat6 = vec4<f32>(x_1929.x, x_1929.y, x_1929.z, x_1930.w);
  let x_1932 : vec4<f32> = u_xlat3;
  let x_1934 : vec4<f32> = u_xlat6;
  u_xlat43.x = dot(vec3<f32>(x_1932.x, x_1932.y, x_1932.z), vec3<f32>(x_1934.x, x_1934.y, x_1934.z));
  let x_1939 : f32 = u_xlat43.x;
  u_xlat43.x = (x_1939 + 0.5f);
  let x_1942 : vec2<f32> = u_xlat43;
  let x_1944 : vec3<f32> = u_xlat26;
  u_xlat26 = (vec3<f32>(x_1942.x, x_1942.x, x_1942.x) * x_1944);
  let x_1947 : f32 = u_xlat6.w;
  u_xlat43.x = max(x_1947, 0.0001f);
  let x_1950 : vec3<f32> = u_xlat26;
  let x_1951 : vec2<f32> = u_xlat43;
  u_xlat26 = (x_1950 / vec3<f32>(x_1951.x, x_1951.x, x_1951.x));
  let x_1955 : vec4<f32> = x_90.x_ScaledScreenParams;
  let x_1956 : vec2<f32> = vec2<f32>(x_1955.x, x_1955.y);
  u_xlat43 = (vec2<f32>(1.0f, 1.0f) / vec2<f32>(x_1956.x, x_1956.y));
  let x_1961 : vec2<f32> = u_xlat43;
  let x_1962 : vec4<f32> = hlslcc_FragCoord;
  let x_1964 : vec2<f32> = (x_1961 * vec2<f32>(x_1962.x, x_1962.y));
  let x_1965 : vec4<f32> = u_xlat6;
  u_xlat6 = vec4<f32>(x_1964.x, x_1964.y, x_1965.z, x_1965.w);
  let x_1968 : f32 = u_xlat6.y;
  let x_1971 : f32 = x_90.x_ScaleBiasRt.x;
  let x_1974 : f32 = x_90.x_ScaleBiasRt.y;
  u_xlat43.x = ((x_1968 * x_1971) + x_1974);
  let x_1978 : f32 = u_xlat43.x;
  u_xlat6.z = (-(x_1978) + 1.0f);
  let x_1983 : f32 = u_xlat5.x;
  u_xlat5.x = x_1983;
  let x_1986 : f32 = u_xlat5.x;
  u_xlat5.x = clamp(x_1986, 0.0f, 1.0f);
  let x_1990 : f32 = u_xlat1.x;
  u_xlat1.x = x_1990;
  let x_1993 : f32 = u_xlat1.x;
  u_xlat1.x = clamp(x_1993, 0.0f, 1.0f);
  let x_1996 : vec3<f32> = u_xlat4;
  u_xlat4 = (x_1996 * vec3<f32>(0.959999979f, 0.959999979f, 0.959999979f));
  let x_2001 : f32 = u_xlat5.x;
  u_xlat43.x = (-(x_2001) + 1.0f);
  let x_2006 : f32 = u_xlat43.x;
  let x_2008 : f32 = u_xlat43.x;
  u_xlat64 = (x_2006 * x_2008);
  let x_2010 : f32 = u_xlat64;
  u_xlat64 = max(x_2010, 0.0078125f);
  let x_2014 : f32 = u_xlat64;
  let x_2015 : f32 = u_xlat64;
  u_xlat66 = (x_2014 * x_2015);
  let x_2018 : f32 = u_xlat5.x;
  u_xlat67 = (x_2018 + 0.040000021f);
  let x_2021 : f32 = u_xlat67;
  u_xlat67 = min(x_2021, 1.0f);
  let x_2023 : f32 = u_xlat64;
  u_xlat5.x = ((x_2023 * 4.0f) + 2.0f);
  let x_2033 : vec4<f32> = u_xlat6;
  let x_2036 : f32 = x_90.x_GlobalMipBias.x;
  let x_2037 : vec4<f32> = textureSampleBias(x_ScreenSpaceOcclusionTexture, sampler_ScreenSpaceOcclusionTexture, vec2<f32>(x_2033.x, x_2033.z), x_2036);
  u_xlat6.x = x_2037.x;
  let x_2042 : f32 = u_xlat6.x;
  u_xlat27 = (x_2042 + -1.0f);
  let x_2046 : f32 = x_90.x_AmbientOcclusionParam.w;
  let x_2047 : f32 = u_xlat27;
  u_xlat27 = ((x_2046 * x_2047) + 1.0f);
  let x_2051 : f32 = u_xlat6.x;
  let x_2053 : f32 = vs_INTERP4.w;
  u_xlat6.x = min(x_2051, x_2053);
  let x_2056 : bool = u_xlatb63;
  if (x_2056) {
    let x_2060 : f32 = x_272.x_MainLightShadowParams.y;
    u_xlatb63 = (x_2060 == 1.0f);
    let x_2062 : bool = u_xlatb63;
    if (x_2062) {
      let x_2066 : vec4<f32> = vs_INTERP9;
      let x_2069 : vec4<f32> = x_272.x_MainLightShadowOffset0;
      u_xlat7 = (vec4<f32>(x_2066.x, x_2066.y, x_2066.x, x_2066.y) + x_2069);
      let x_2072 : vec4<f32> = u_xlat7;
      let x_2073 : vec2<f32> = vec2<f32>(x_2072.x, x_2072.y);
      let x_2075 : f32 = vs_INTERP9.z;
      txVec30 = vec3<f32>(x_2073.x, x_2073.y, x_2075);
      let x_2082 : vec3<f32> = txVec30;
      let x_2084 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2082.xy, x_2082.z);
      u_xlat8.x = x_2084;
      let x_2087 : vec4<f32> = u_xlat7;
      let x_2088 : vec2<f32> = vec2<f32>(x_2087.z, x_2087.w);
      let x_2090 : f32 = vs_INTERP9.z;
      txVec31 = vec3<f32>(x_2088.x, x_2088.y, x_2090);
      let x_2097 : vec3<f32> = txVec31;
      let x_2099 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2097.xy, x_2097.z);
      u_xlat8.y = x_2099;
      let x_2101 : vec4<f32> = vs_INTERP9;
      let x_2104 : vec4<f32> = x_272.x_MainLightShadowOffset1;
      u_xlat7 = (vec4<f32>(x_2101.x, x_2101.y, x_2101.x, x_2101.y) + x_2104);
      let x_2107 : vec4<f32> = u_xlat7;
      let x_2108 : vec2<f32> = vec2<f32>(x_2107.x, x_2107.y);
      let x_2110 : f32 = vs_INTERP9.z;
      txVec32 = vec3<f32>(x_2108.x, x_2108.y, x_2110);
      let x_2117 : vec3<f32> = txVec32;
      let x_2119 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2117.xy, x_2117.z);
      u_xlat8.z = x_2119;
      let x_2122 : vec4<f32> = u_xlat7;
      let x_2123 : vec2<f32> = vec2<f32>(x_2122.z, x_2122.w);
      let x_2125 : f32 = vs_INTERP9.z;
      txVec33 = vec3<f32>(x_2123.x, x_2123.y, x_2125);
      let x_2132 : vec3<f32> = txVec33;
      let x_2134 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2132.xy, x_2132.z);
      u_xlat8.w = x_2134;
      let x_2136 : vec4<f32> = u_xlat8;
      u_xlat63 = dot(x_2136, vec4<f32>(0.25f, 0.25f, 0.25f, 0.25f));
    } else {
      let x_2141 : f32 = x_272.x_MainLightShadowParams.y;
      u_xlatb48.x = (x_2141 == 2.0f);
      let x_2145 : bool = u_xlatb48.x;
      if (x_2145) {
        let x_2149 : vec4<f32> = vs_INTERP9;
        let x_2152 : vec4<f32> = x_272.x_MainLightShadowmapSize;
        u_xlat48 = ((vec2<f32>(x_2149.x, x_2149.y) * vec2<f32>(x_2152.z, x_2152.w)) + vec2<f32>(0.5f, 0.5f));
        let x_2156 : vec2<f32> = u_xlat48;
        u_xlat48 = floor(x_2156);
        let x_2158 : vec4<f32> = vs_INTERP9;
        let x_2161 : vec4<f32> = x_272.x_MainLightShadowmapSize;
        let x_2164 : vec2<f32> = u_xlat48;
        let x_2166 : vec2<f32> = ((vec2<f32>(x_2158.x, x_2158.y) * vec2<f32>(x_2161.z, x_2161.w)) + -(x_2164));
        let x_2167 : vec4<f32> = u_xlat7;
        u_xlat7 = vec4<f32>(x_2166.x, x_2166.y, x_2167.z, x_2167.w);
        let x_2169 : vec4<f32> = u_xlat7;
        u_xlat8 = (vec4<f32>(x_2169.x, x_2169.x, x_2169.y, x_2169.y) + vec4<f32>(0.5f, 1.0f, 0.5f, 1.0f));
        let x_2172 : vec4<f32> = u_xlat8;
        let x_2174 : vec4<f32> = u_xlat8;
        u_xlat9 = (vec4<f32>(x_2172.x, x_2172.x, x_2172.z, x_2172.z) * vec4<f32>(x_2174.x, x_2174.x, x_2174.z, x_2174.z));
        let x_2177 : vec4<f32> = u_xlat9;
        u_xlat49 = (vec2<f32>(x_2177.y, x_2177.w) * vec2<f32>(0.079999998f, 0.079999998f));
        let x_2180 : vec4<f32> = u_xlat9;
        let x_2183 : vec4<f32> = u_xlat7;
        let x_2186 : vec2<f32> = ((vec2<f32>(x_2180.x, x_2180.z) * vec2<f32>(0.5f, 0.5f)) + -(vec2<f32>(x_2183.x, x_2183.y)));
        let x_2187 : vec4<f32> = u_xlat8;
        u_xlat8 = vec4<f32>(x_2186.x, x_2187.y, x_2186.y, x_2187.w);
        let x_2189 : vec4<f32> = u_xlat7;
        let x_2192 : vec2<f32> = (-(vec2<f32>(x_2189.x, x_2189.y)) + vec2<f32>(1.0f, 1.0f));
        let x_2193 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_2192.x, x_2192.y, x_2193.z, x_2193.w);
        let x_2195 : vec4<f32> = u_xlat7;
        u_xlat51 = min(vec2<f32>(x_2195.x, x_2195.y), vec2<f32>(0.0f, 0.0f));
        let x_2198 : vec2<f32> = u_xlat51;
        let x_2200 : vec2<f32> = u_xlat51;
        let x_2202 : vec4<f32> = u_xlat9;
        u_xlat51 = ((-(x_2198) * x_2200) + vec2<f32>(x_2202.x, x_2202.y));
        let x_2205 : vec4<f32> = u_xlat7;
        let x_2207 : vec2<f32> = max(vec2<f32>(x_2205.x, x_2205.y), vec2<f32>(0.0f, 0.0f));
        let x_2208 : vec4<f32> = u_xlat7;
        u_xlat7 = vec4<f32>(x_2207.x, x_2207.y, x_2208.z, x_2208.w);
        let x_2210 : vec4<f32> = u_xlat7;
        let x_2213 : vec4<f32> = u_xlat7;
        let x_2216 : vec4<f32> = u_xlat8;
        let x_2218 : vec2<f32> = ((-(vec2<f32>(x_2210.x, x_2210.y)) * vec2<f32>(x_2213.x, x_2213.y)) + vec2<f32>(x_2216.y, x_2216.w));
        let x_2219 : vec4<f32> = u_xlat7;
        u_xlat7 = vec4<f32>(x_2218.x, x_2218.y, x_2219.z, x_2219.w);
        let x_2221 : vec2<f32> = u_xlat51;
        u_xlat51 = (x_2221 + vec2<f32>(1.0f, 1.0f));
        let x_2223 : vec4<f32> = u_xlat7;
        let x_2225 : vec2<f32> = (vec2<f32>(x_2223.x, x_2223.y) + vec2<f32>(1.0f, 1.0f));
        let x_2226 : vec4<f32> = u_xlat7;
        u_xlat7 = vec4<f32>(x_2225.x, x_2225.y, x_2226.z, x_2226.w);
        let x_2228 : vec4<f32> = u_xlat8;
        let x_2230 : vec2<f32> = (vec2<f32>(x_2228.x, x_2228.z) * vec2<f32>(0.159999996f, 0.159999996f));
        let x_2231 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_2230.x, x_2230.y, x_2231.z, x_2231.w);
        let x_2233 : vec4<f32> = u_xlat9;
        let x_2235 : vec2<f32> = (vec2<f32>(x_2233.x, x_2233.y) * vec2<f32>(0.159999996f, 0.159999996f));
        let x_2236 : vec4<f32> = u_xlat11;
        u_xlat11 = vec4<f32>(x_2235.x, x_2235.y, x_2236.z, x_2236.w);
        let x_2238 : vec2<f32> = u_xlat51;
        let x_2239 : vec2<f32> = (x_2238 * vec2<f32>(0.159999996f, 0.159999996f));
        let x_2240 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_2239.x, x_2239.y, x_2240.z, x_2240.w);
        let x_2242 : vec4<f32> = u_xlat7;
        let x_2244 : vec2<f32> = (vec2<f32>(x_2242.x, x_2242.y) * vec2<f32>(0.159999996f, 0.159999996f));
        let x_2245 : vec4<f32> = u_xlat12;
        u_xlat12 = vec4<f32>(x_2244.x, x_2244.y, x_2245.z, x_2245.w);
        let x_2247 : vec4<f32> = u_xlat8;
        let x_2249 : vec2<f32> = (vec2<f32>(x_2247.y, x_2247.w) * vec2<f32>(0.159999996f, 0.159999996f));
        let x_2250 : vec4<f32> = u_xlat7;
        u_xlat7 = vec4<f32>(x_2249.x, x_2249.y, x_2250.z, x_2250.w);
        let x_2253 : f32 = u_xlat9.x;
        u_xlat10.z = x_2253;
        let x_2256 : f32 = u_xlat7.x;
        u_xlat10.w = x_2256;
        let x_2259 : f32 = u_xlat12.x;
        u_xlat11.z = x_2259;
        let x_2262 : f32 = u_xlat49.x;
        u_xlat11.w = x_2262;
        let x_2264 : vec4<f32> = u_xlat10;
        let x_2266 : vec4<f32> = u_xlat11;
        u_xlat8 = (vec4<f32>(x_2264.z, x_2264.w, x_2264.x, x_2264.z) + vec4<f32>(x_2266.z, x_2266.w, x_2266.x, x_2266.z));
        let x_2270 : f32 = u_xlat10.y;
        u_xlat9.z = x_2270;
        let x_2273 : f32 = u_xlat7.y;
        u_xlat9.w = x_2273;
        let x_2276 : f32 = u_xlat11.y;
        u_xlat12.z = x_2276;
        let x_2279 : f32 = u_xlat49.y;
        u_xlat12.w = x_2279;
        let x_2281 : vec4<f32> = u_xlat9;
        let x_2283 : vec4<f32> = u_xlat12;
        let x_2285 : vec3<f32> = (vec3<f32>(x_2281.z, x_2281.y, x_2281.w) + vec3<f32>(x_2283.z, x_2283.y, x_2283.w));
        let x_2286 : vec4<f32> = u_xlat7;
        u_xlat7 = vec4<f32>(x_2285.x, x_2285.y, x_2285.z, x_2286.w);
        let x_2288 : vec4<f32> = u_xlat11;
        let x_2290 : vec4<f32> = u_xlat8;
        let x_2292 : vec3<f32> = (vec3<f32>(x_2288.x, x_2288.z, x_2288.w) / vec3<f32>(x_2290.z, x_2290.w, x_2290.y));
        let x_2293 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_2292.x, x_2292.y, x_2292.z, x_2293.w);
        let x_2295 : vec4<f32> = u_xlat9;
        let x_2297 : vec3<f32> = (vec3<f32>(x_2295.x, x_2295.y, x_2295.z) + vec3<f32>(-2.5f, -0.5f, 1.5f));
        let x_2298 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_2297.x, x_2297.y, x_2297.z, x_2298.w);
        let x_2300 : vec4<f32> = u_xlat12;
        let x_2302 : vec4<f32> = u_xlat7;
        let x_2304 : vec3<f32> = (vec3<f32>(x_2300.z, x_2300.y, x_2300.w) / vec3<f32>(x_2302.x, x_2302.y, x_2302.z));
        let x_2305 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_2304.x, x_2304.y, x_2304.z, x_2305.w);
        let x_2307 : vec4<f32> = u_xlat10;
        let x_2309 : vec3<f32> = (vec3<f32>(x_2307.x, x_2307.y, x_2307.z) + vec3<f32>(-2.5f, -0.5f, 1.5f));
        let x_2310 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_2309.x, x_2309.y, x_2309.z, x_2310.w);
        let x_2312 : vec4<f32> = u_xlat9;
        let x_2315 : vec4<f32> = x_272.x_MainLightShadowmapSize;
        let x_2317 : vec3<f32> = (vec3<f32>(x_2312.y, x_2312.x, x_2312.z) * vec3<f32>(x_2315.x, x_2315.x, x_2315.x));
        let x_2318 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_2317.x, x_2317.y, x_2317.z, x_2318.w);
        let x_2320 : vec4<f32> = u_xlat10;
        let x_2323 : vec4<f32> = x_272.x_MainLightShadowmapSize;
        let x_2325 : vec3<f32> = (vec3<f32>(x_2320.x, x_2320.y, x_2320.z) * vec3<f32>(x_2323.y, x_2323.y, x_2323.y));
        let x_2326 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_2325.x, x_2325.y, x_2325.z, x_2326.w);
        let x_2329 : f32 = u_xlat10.x;
        u_xlat9.w = x_2329;
        let x_2331 : vec2<f32> = u_xlat48;
        let x_2334 : vec4<f32> = x_272.x_MainLightShadowmapSize;
        let x_2337 : vec4<f32> = u_xlat9;
        u_xlat11 = ((vec4<f32>(x_2331.x, x_2331.y, x_2331.x, x_2331.y) * vec4<f32>(x_2334.x, x_2334.y, x_2334.x, x_2334.y)) + vec4<f32>(x_2337.y, x_2337.w, x_2337.x, x_2337.w));
        let x_2340 : vec2<f32> = u_xlat48;
        let x_2342 : vec4<f32> = x_272.x_MainLightShadowmapSize;
        let x_2345 : vec4<f32> = u_xlat9;
        let x_2347 : vec2<f32> = ((x_2340 * vec2<f32>(x_2342.x, x_2342.y)) + vec2<f32>(x_2345.z, x_2345.w));
        let x_2348 : vec4<f32> = u_xlat12;
        u_xlat12 = vec4<f32>(x_2347.x, x_2347.y, x_2348.z, x_2348.w);
        let x_2351 : f32 = u_xlat9.y;
        u_xlat10.w = x_2351;
        let x_2353 : vec4<f32> = u_xlat10;
        let x_2354 : vec2<f32> = vec2<f32>(x_2353.y, x_2353.z);
        let x_2355 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_2355.x, x_2354.x, x_2355.z, x_2354.y);
        let x_2357 : vec2<f32> = u_xlat48;
        let x_2360 : vec4<f32> = x_272.x_MainLightShadowmapSize;
        let x_2363 : vec4<f32> = u_xlat9;
        u_xlat13 = ((vec4<f32>(x_2357.x, x_2357.y, x_2357.x, x_2357.y) * vec4<f32>(x_2360.x, x_2360.y, x_2360.x, x_2360.y)) + vec4<f32>(x_2363.x, x_2363.y, x_2363.z, x_2363.y));
        let x_2366 : vec2<f32> = u_xlat48;
        let x_2369 : vec4<f32> = x_272.x_MainLightShadowmapSize;
        let x_2372 : vec4<f32> = u_xlat10;
        u_xlat10 = ((vec4<f32>(x_2366.x, x_2366.y, x_2366.x, x_2366.y) * vec4<f32>(x_2369.x, x_2369.y, x_2369.x, x_2369.y)) + vec4<f32>(x_2372.w, x_2372.y, x_2372.w, x_2372.z));
        let x_2375 : vec2<f32> = u_xlat48;
        let x_2378 : vec4<f32> = x_272.x_MainLightShadowmapSize;
        let x_2381 : vec4<f32> = u_xlat9;
        u_xlat9 = ((vec4<f32>(x_2375.x, x_2375.y, x_2375.x, x_2375.y) * vec4<f32>(x_2378.x, x_2378.y, x_2378.x, x_2378.y)) + vec4<f32>(x_2381.x, x_2381.w, x_2381.z, x_2381.w));
        let x_2384 : vec4<f32> = u_xlat7;
        let x_2386 : vec4<f32> = u_xlat8;
        u_xlat14 = (vec4<f32>(x_2384.x, x_2384.x, x_2384.x, x_2384.y) * vec4<f32>(x_2386.z, x_2386.w, x_2386.y, x_2386.z));
        let x_2389 : vec4<f32> = u_xlat7;
        let x_2391 : vec4<f32> = u_xlat8;
        u_xlat15 = (vec4<f32>(x_2389.y, x_2389.y, x_2389.z, x_2389.z) * x_2391);
        let x_2394 : f32 = u_xlat7.z;
        let x_2396 : f32 = u_xlat8.y;
        u_xlat48.x = (x_2394 * x_2396);
        let x_2400 : vec4<f32> = u_xlat11;
        let x_2401 : vec2<f32> = vec2<f32>(x_2400.x, x_2400.y);
        let x_2403 : f32 = vs_INTERP9.z;
        txVec34 = vec3<f32>(x_2401.x, x_2401.y, x_2403);
        let x_2410 : vec3<f32> = txVec34;
        let x_2412 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2410.xy, x_2410.z);
        u_xlat69 = x_2412;
        let x_2414 : vec4<f32> = u_xlat11;
        let x_2415 : vec2<f32> = vec2<f32>(x_2414.z, x_2414.w);
        let x_2417 : f32 = vs_INTERP9.z;
        txVec35 = vec3<f32>(x_2415.x, x_2415.y, x_2417);
        let x_2424 : vec3<f32> = txVec35;
        let x_2426 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2424.xy, x_2424.z);
        u_xlat7.x = x_2426;
        let x_2429 : f32 = u_xlat7.x;
        let x_2431 : f32 = u_xlat14.y;
        u_xlat7.x = (x_2429 * x_2431);
        let x_2435 : f32 = u_xlat14.x;
        let x_2436 : f32 = u_xlat69;
        let x_2439 : f32 = u_xlat7.x;
        u_xlat69 = ((x_2435 * x_2436) + x_2439);
        let x_2442 : vec4<f32> = u_xlat12;
        let x_2443 : vec2<f32> = vec2<f32>(x_2442.x, x_2442.y);
        let x_2445 : f32 = vs_INTERP9.z;
        txVec36 = vec3<f32>(x_2443.x, x_2443.y, x_2445);
        let x_2452 : vec3<f32> = txVec36;
        let x_2454 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2452.xy, x_2452.z);
        u_xlat7.x = x_2454;
        let x_2457 : f32 = u_xlat14.z;
        let x_2459 : f32 = u_xlat7.x;
        let x_2461 : f32 = u_xlat69;
        u_xlat69 = ((x_2457 * x_2459) + x_2461);
        let x_2464 : vec4<f32> = u_xlat10;
        let x_2465 : vec2<f32> = vec2<f32>(x_2464.x, x_2464.y);
        let x_2467 : f32 = vs_INTERP9.z;
        txVec37 = vec3<f32>(x_2465.x, x_2465.y, x_2467);
        let x_2474 : vec3<f32> = txVec37;
        let x_2476 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2474.xy, x_2474.z);
        u_xlat7.x = x_2476;
        let x_2479 : f32 = u_xlat14.w;
        let x_2481 : f32 = u_xlat7.x;
        let x_2483 : f32 = u_xlat69;
        u_xlat69 = ((x_2479 * x_2481) + x_2483);
        let x_2486 : vec4<f32> = u_xlat13;
        let x_2487 : vec2<f32> = vec2<f32>(x_2486.x, x_2486.y);
        let x_2489 : f32 = vs_INTERP9.z;
        txVec38 = vec3<f32>(x_2487.x, x_2487.y, x_2489);
        let x_2496 : vec3<f32> = txVec38;
        let x_2498 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2496.xy, x_2496.z);
        u_xlat7.x = x_2498;
        let x_2501 : f32 = u_xlat15.x;
        let x_2503 : f32 = u_xlat7.x;
        let x_2505 : f32 = u_xlat69;
        u_xlat69 = ((x_2501 * x_2503) + x_2505);
        let x_2508 : vec4<f32> = u_xlat13;
        let x_2509 : vec2<f32> = vec2<f32>(x_2508.z, x_2508.w);
        let x_2511 : f32 = vs_INTERP9.z;
        txVec39 = vec3<f32>(x_2509.x, x_2509.y, x_2511);
        let x_2518 : vec3<f32> = txVec39;
        let x_2520 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2518.xy, x_2518.z);
        u_xlat7.x = x_2520;
        let x_2523 : f32 = u_xlat15.y;
        let x_2525 : f32 = u_xlat7.x;
        let x_2527 : f32 = u_xlat69;
        u_xlat69 = ((x_2523 * x_2525) + x_2527);
        let x_2530 : vec4<f32> = u_xlat10;
        let x_2531 : vec2<f32> = vec2<f32>(x_2530.z, x_2530.w);
        let x_2533 : f32 = vs_INTERP9.z;
        txVec40 = vec3<f32>(x_2531.x, x_2531.y, x_2533);
        let x_2540 : vec3<f32> = txVec40;
        let x_2542 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2540.xy, x_2540.z);
        u_xlat7.x = x_2542;
        let x_2545 : f32 = u_xlat15.z;
        let x_2547 : f32 = u_xlat7.x;
        let x_2549 : f32 = u_xlat69;
        u_xlat69 = ((x_2545 * x_2547) + x_2549);
        let x_2552 : vec4<f32> = u_xlat9;
        let x_2553 : vec2<f32> = vec2<f32>(x_2552.x, x_2552.y);
        let x_2555 : f32 = vs_INTERP9.z;
        txVec41 = vec3<f32>(x_2553.x, x_2553.y, x_2555);
        let x_2562 : vec3<f32> = txVec41;
        let x_2564 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2562.xy, x_2562.z);
        u_xlat7.x = x_2564;
        let x_2567 : f32 = u_xlat15.w;
        let x_2569 : f32 = u_xlat7.x;
        let x_2571 : f32 = u_xlat69;
        u_xlat69 = ((x_2567 * x_2569) + x_2571);
        let x_2574 : vec4<f32> = u_xlat9;
        let x_2575 : vec2<f32> = vec2<f32>(x_2574.z, x_2574.w);
        let x_2577 : f32 = vs_INTERP9.z;
        txVec42 = vec3<f32>(x_2575.x, x_2575.y, x_2577);
        let x_2584 : vec3<f32> = txVec42;
        let x_2586 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2584.xy, x_2584.z);
        u_xlat7.x = x_2586;
        let x_2589 : f32 = u_xlat48.x;
        let x_2591 : f32 = u_xlat7.x;
        let x_2593 : f32 = u_xlat69;
        u_xlat63 = ((x_2589 * x_2591) + x_2593);
      } else {
        let x_2596 : vec4<f32> = vs_INTERP9;
        let x_2599 : vec4<f32> = x_272.x_MainLightShadowmapSize;
        u_xlat48 = ((vec2<f32>(x_2596.x, x_2596.y) * vec2<f32>(x_2599.z, x_2599.w)) + vec2<f32>(0.5f, 0.5f));
        let x_2603 : vec2<f32> = u_xlat48;
        u_xlat48 = floor(x_2603);
        let x_2605 : vec4<f32> = vs_INTERP9;
        let x_2608 : vec4<f32> = x_272.x_MainLightShadowmapSize;
        let x_2611 : vec2<f32> = u_xlat48;
        let x_2613 : vec2<f32> = ((vec2<f32>(x_2605.x, x_2605.y) * vec2<f32>(x_2608.z, x_2608.w)) + -(x_2611));
        let x_2614 : vec4<f32> = u_xlat7;
        u_xlat7 = vec4<f32>(x_2613.x, x_2613.y, x_2614.z, x_2614.w);
        let x_2616 : vec4<f32> = u_xlat7;
        u_xlat8 = (vec4<f32>(x_2616.x, x_2616.x, x_2616.y, x_2616.y) + vec4<f32>(0.5f, 1.0f, 0.5f, 1.0f));
        let x_2619 : vec4<f32> = u_xlat8;
        let x_2621 : vec4<f32> = u_xlat8;
        u_xlat9 = (vec4<f32>(x_2619.x, x_2619.x, x_2619.z, x_2619.z) * vec4<f32>(x_2621.x, x_2621.x, x_2621.z, x_2621.z));
        let x_2624 : vec4<f32> = u_xlat9;
        let x_2626 : vec2<f32> = (vec2<f32>(x_2624.y, x_2624.w) * vec2<f32>(0.040816002f, 0.040816002f));
        let x_2627 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_2627.x, x_2626.x, x_2627.z, x_2626.y);
        let x_2629 : vec4<f32> = u_xlat9;
        let x_2632 : vec4<f32> = u_xlat7;
        u_xlat49 = ((vec2<f32>(x_2629.x, x_2629.z) * vec2<f32>(0.5f, 0.5f)) + -(vec2<f32>(x_2632.x, x_2632.y)));
        let x_2636 : vec4<f32> = u_xlat7;
        let x_2639 : vec2<f32> = (-(vec2<f32>(x_2636.x, x_2636.y)) + vec2<f32>(1.0f, 1.0f));
        let x_2640 : vec4<f32> = u_xlat8;
        u_xlat8 = vec4<f32>(x_2639.x, x_2640.y, x_2639.y, x_2640.w);
        let x_2642 : vec4<f32> = u_xlat7;
        let x_2644 : vec2<f32> = min(vec2<f32>(x_2642.x, x_2642.y), vec2<f32>(0.0f, 0.0f));
        let x_2645 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_2644.x, x_2644.y, x_2645.z, x_2645.w);
        let x_2647 : vec4<f32> = u_xlat9;
        let x_2650 : vec4<f32> = u_xlat9;
        let x_2653 : vec4<f32> = u_xlat8;
        let x_2655 : vec2<f32> = ((-(vec2<f32>(x_2647.x, x_2647.y)) * vec2<f32>(x_2650.x, x_2650.y)) + vec2<f32>(x_2653.x, x_2653.z));
        let x_2656 : vec4<f32> = u_xlat8;
        u_xlat8 = vec4<f32>(x_2655.x, x_2656.y, x_2655.y, x_2656.w);
        let x_2658 : vec4<f32> = u_xlat7;
        let x_2660 : vec2<f32> = max(vec2<f32>(x_2658.x, x_2658.y), vec2<f32>(0.0f, 0.0f));
        let x_2661 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_2660.x, x_2660.y, x_2661.z, x_2661.w);
        let x_2663 : vec4<f32> = u_xlat9;
        let x_2666 : vec4<f32> = u_xlat9;
        let x_2669 : vec4<f32> = u_xlat8;
        let x_2671 : vec2<f32> = ((-(vec2<f32>(x_2663.x, x_2663.y)) * vec2<f32>(x_2666.x, x_2666.y)) + vec2<f32>(x_2669.y, x_2669.w));
        let x_2672 : vec4<f32> = u_xlat8;
        u_xlat8 = vec4<f32>(x_2672.x, x_2671.x, x_2672.z, x_2671.y);
        let x_2674 : vec4<f32> = u_xlat8;
        u_xlat8 = (x_2674 + vec4<f32>(2.0f, 2.0f, 2.0f, 2.0f));
        let x_2677 : f32 = u_xlat8.y;
        u_xlat9.z = (x_2677 * 0.081632003f);
        let x_2680 : vec2<f32> = u_xlat49;
        let x_2682 : vec2<f32> = (vec2<f32>(x_2680.y, x_2680.x) * vec2<f32>(0.081632003f, 0.081632003f));
        let x_2683 : vec4<f32> = u_xlat11;
        u_xlat11 = vec4<f32>(x_2682.x, x_2682.y, x_2683.z, x_2683.w);
        let x_2685 : vec4<f32> = u_xlat8;
        u_xlat49 = (vec2<f32>(x_2685.x, x_2685.z) * vec2<f32>(0.081632003f, 0.081632003f));
        let x_2689 : f32 = u_xlat8.w;
        u_xlat11.z = (x_2689 * 0.081632003f);
        let x_2693 : f32 = u_xlat11.y;
        u_xlat9.x = x_2693;
        let x_2695 : vec4<f32> = u_xlat7;
        let x_2698 : vec2<f32> = ((vec2<f32>(x_2695.x, x_2695.x) * vec2<f32>(-0.081632003f, 0.081632003f)) + vec2<f32>(0.163264006f, 0.081632003f));
        let x_2699 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_2699.x, x_2698.x, x_2699.z, x_2698.y);
        let x_2701 : vec4<f32> = u_xlat7;
        let x_2704 : vec2<f32> = ((vec2<f32>(x_2701.x, x_2701.x) * vec2<f32>(-0.081632003f, 0.081632003f)) + vec2<f32>(0.081632003f, 0.163264006f));
        let x_2705 : vec4<f32> = u_xlat8;
        u_xlat8 = vec4<f32>(x_2704.x, x_2705.y, x_2704.y, x_2705.w);
        let x_2708 : f32 = u_xlat49.x;
        u_xlat8.y = x_2708;
        let x_2711 : f32 = u_xlat10.y;
        u_xlat8.w = x_2711;
        let x_2713 : vec4<f32> = u_xlat8;
        let x_2714 : vec4<f32> = u_xlat9;
        u_xlat9 = (x_2713 + x_2714);
        let x_2716 : vec4<f32> = u_xlat7;
        let x_2719 : vec2<f32> = ((vec2<f32>(x_2716.y, x_2716.y) * vec2<f32>(-0.081632003f, 0.081632003f)) + vec2<f32>(0.163264006f, 0.081632003f));
        let x_2720 : vec4<f32> = u_xlat11;
        u_xlat11 = vec4<f32>(x_2720.x, x_2719.x, x_2720.z, x_2719.y);
        let x_2722 : vec4<f32> = u_xlat7;
        let x_2725 : vec2<f32> = ((vec2<f32>(x_2722.y, x_2722.y) * vec2<f32>(-0.081632003f, 0.081632003f)) + vec2<f32>(0.081632003f, 0.163264006f));
        let x_2726 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_2725.x, x_2726.y, x_2725.y, x_2726.w);
        let x_2729 : f32 = u_xlat49.y;
        u_xlat10.y = x_2729;
        let x_2731 : vec4<f32> = u_xlat10;
        let x_2732 : vec4<f32> = u_xlat11;
        u_xlat7 = (x_2731 + x_2732);
        let x_2734 : vec4<f32> = u_xlat8;
        let x_2735 : vec4<f32> = u_xlat9;
        u_xlat8 = (x_2734 / x_2735);
        let x_2737 : vec4<f32> = u_xlat8;
        u_xlat8 = (x_2737 + vec4<f32>(-3.5f, -1.5f, 0.5f, 2.5f));
        let x_2739 : vec4<f32> = u_xlat10;
        let x_2740 : vec4<f32> = u_xlat7;
        u_xlat10 = (x_2739 / x_2740);
        let x_2742 : vec4<f32> = u_xlat10;
        u_xlat10 = (x_2742 + vec4<f32>(-3.5f, -1.5f, 0.5f, 2.5f));
        let x_2744 : vec4<f32> = u_xlat8;
        let x_2747 : vec4<f32> = x_272.x_MainLightShadowmapSize;
        u_xlat8 = (vec4<f32>(x_2744.w, x_2744.x, x_2744.y, x_2744.z) * vec4<f32>(x_2747.x, x_2747.x, x_2747.x, x_2747.x));
        let x_2750 : vec4<f32> = u_xlat10;
        let x_2753 : vec4<f32> = x_272.x_MainLightShadowmapSize;
        u_xlat10 = (vec4<f32>(x_2750.x, x_2750.w, x_2750.y, x_2750.z) * vec4<f32>(x_2753.y, x_2753.y, x_2753.y, x_2753.y));
        let x_2756 : vec4<f32> = u_xlat8;
        let x_2757 : vec3<f32> = vec3<f32>(x_2756.y, x_2756.z, x_2756.w);
        let x_2758 : vec4<f32> = u_xlat11;
        u_xlat11 = vec4<f32>(x_2757.x, x_2758.y, x_2757.y, x_2757.z);
        let x_2761 : f32 = u_xlat10.x;
        u_xlat11.y = x_2761;
        let x_2763 : vec2<f32> = u_xlat48;
        let x_2766 : vec4<f32> = x_272.x_MainLightShadowmapSize;
        let x_2769 : vec4<f32> = u_xlat11;
        u_xlat12 = ((vec4<f32>(x_2763.x, x_2763.y, x_2763.x, x_2763.y) * vec4<f32>(x_2766.x, x_2766.y, x_2766.x, x_2766.y)) + vec4<f32>(x_2769.x, x_2769.y, x_2769.z, x_2769.y));
        let x_2772 : vec2<f32> = u_xlat48;
        let x_2774 : vec4<f32> = x_272.x_MainLightShadowmapSize;
        let x_2777 : vec4<f32> = u_xlat11;
        let x_2779 : vec2<f32> = ((x_2772 * vec2<f32>(x_2774.x, x_2774.y)) + vec2<f32>(x_2777.w, x_2777.y));
        let x_2780 : vec4<f32> = u_xlat13;
        u_xlat13 = vec4<f32>(x_2779.x, x_2779.y, x_2780.z, x_2780.w);
        let x_2783 : f32 = u_xlat11.y;
        u_xlat8.y = x_2783;
        let x_2786 : f32 = u_xlat10.z;
        u_xlat11.y = x_2786;
        let x_2788 : vec2<f32> = u_xlat48;
        let x_2791 : vec4<f32> = x_272.x_MainLightShadowmapSize;
        let x_2794 : vec4<f32> = u_xlat11;
        u_xlat14 = ((vec4<f32>(x_2788.x, x_2788.y, x_2788.x, x_2788.y) * vec4<f32>(x_2791.x, x_2791.y, x_2791.x, x_2791.y)) + vec4<f32>(x_2794.x, x_2794.y, x_2794.z, x_2794.y));
        let x_2798 : vec2<f32> = u_xlat48;
        let x_2800 : vec4<f32> = x_272.x_MainLightShadowmapSize;
        let x_2803 : vec4<f32> = u_xlat11;
        u_xlat55 = ((x_2798 * vec2<f32>(x_2800.x, x_2800.y)) + vec2<f32>(x_2803.w, x_2803.y));
        let x_2807 : f32 = u_xlat11.y;
        u_xlat8.z = x_2807;
        let x_2809 : vec2<f32> = u_xlat48;
        let x_2812 : vec4<f32> = x_272.x_MainLightShadowmapSize;
        let x_2815 : vec4<f32> = u_xlat8;
        u_xlat15 = ((vec4<f32>(x_2809.x, x_2809.y, x_2809.x, x_2809.y) * vec4<f32>(x_2812.x, x_2812.y, x_2812.x, x_2812.y)) + vec4<f32>(x_2815.x, x_2815.y, x_2815.x, x_2815.z));
        let x_2819 : f32 = u_xlat10.w;
        u_xlat11.y = x_2819;
        let x_2821 : vec2<f32> = u_xlat48;
        let x_2824 : vec4<f32> = x_272.x_MainLightShadowmapSize;
        let x_2827 : vec4<f32> = u_xlat11;
        u_xlat16 = ((vec4<f32>(x_2821.x, x_2821.y, x_2821.x, x_2821.y) * vec4<f32>(x_2824.x, x_2824.y, x_2824.x, x_2824.y)) + vec4<f32>(x_2827.x, x_2827.y, x_2827.z, x_2827.y));
        let x_2830 : vec2<f32> = u_xlat48;
        let x_2832 : vec4<f32> = x_272.x_MainLightShadowmapSize;
        let x_2835 : vec4<f32> = u_xlat11;
        let x_2837 : vec2<f32> = ((x_2830 * vec2<f32>(x_2832.x, x_2832.y)) + vec2<f32>(x_2835.w, x_2835.y));
        let x_2838 : vec3<f32> = u_xlat29;
        u_xlat29 = vec3<f32>(x_2837.x, x_2837.y, x_2838.z);
        let x_2841 : f32 = u_xlat11.y;
        u_xlat8.w = x_2841;
        let x_2843 : vec2<f32> = u_xlat48;
        let x_2845 : vec4<f32> = x_272.x_MainLightShadowmapSize;
        let x_2848 : vec4<f32> = u_xlat8;
        let x_2850 : vec2<f32> = ((x_2843 * vec2<f32>(x_2845.x, x_2845.y)) + vec2<f32>(x_2848.x, x_2848.w));
        let x_2851 : vec4<f32> = u_xlat17;
        u_xlat17 = vec4<f32>(x_2850.x, x_2850.y, x_2851.z, x_2851.w);
        let x_2853 : vec4<f32> = u_xlat11;
        let x_2854 : vec3<f32> = vec3<f32>(x_2853.x, x_2853.z, x_2853.w);
        let x_2855 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_2854.x, x_2855.y, x_2854.y, x_2854.z);
        let x_2857 : vec2<f32> = u_xlat48;
        let x_2860 : vec4<f32> = x_272.x_MainLightShadowmapSize;
        let x_2863 : vec4<f32> = u_xlat10;
        u_xlat11 = ((vec4<f32>(x_2857.x, x_2857.y, x_2857.x, x_2857.y) * vec4<f32>(x_2860.x, x_2860.y, x_2860.x, x_2860.y)) + vec4<f32>(x_2863.x, x_2863.y, x_2863.z, x_2863.y));
        let x_2866 : vec2<f32> = u_xlat48;
        let x_2868 : vec4<f32> = x_272.x_MainLightShadowmapSize;
        let x_2871 : vec4<f32> = u_xlat10;
        u_xlat52 = ((x_2866 * vec2<f32>(x_2868.x, x_2868.y)) + vec2<f32>(x_2871.w, x_2871.y));
        let x_2875 : f32 = u_xlat8.x;
        u_xlat10.x = x_2875;
        let x_2877 : vec2<f32> = u_xlat48;
        let x_2879 : vec4<f32> = x_272.x_MainLightShadowmapSize;
        let x_2882 : vec4<f32> = u_xlat10;
        u_xlat48 = ((x_2877 * vec2<f32>(x_2879.x, x_2879.y)) + vec2<f32>(x_2882.x, x_2882.y));
        let x_2885 : vec4<f32> = u_xlat7;
        let x_2887 : vec4<f32> = u_xlat9;
        u_xlat18 = (vec4<f32>(x_2885.x, x_2885.x, x_2885.x, x_2885.x) * x_2887);
        let x_2889 : vec4<f32> = u_xlat7;
        let x_2891 : vec4<f32> = u_xlat9;
        u_xlat19 = (vec4<f32>(x_2889.y, x_2889.y, x_2889.y, x_2889.y) * x_2891);
        let x_2893 : vec4<f32> = u_xlat7;
        let x_2895 : vec4<f32> = u_xlat9;
        u_xlat20 = (vec4<f32>(x_2893.z, x_2893.z, x_2893.z, x_2893.z) * x_2895);
        let x_2897 : vec4<f32> = u_xlat7;
        let x_2899 : vec4<f32> = u_xlat9;
        u_xlat7 = (vec4<f32>(x_2897.w, x_2897.w, x_2897.w, x_2897.w) * x_2899);
        let x_2902 : vec4<f32> = u_xlat12;
        let x_2903 : vec2<f32> = vec2<f32>(x_2902.x, x_2902.y);
        let x_2905 : f32 = vs_INTERP9.z;
        txVec43 = vec3<f32>(x_2903.x, x_2903.y, x_2905);
        let x_2912 : vec3<f32> = txVec43;
        let x_2914 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2912.xy, x_2912.z);
        u_xlat8.x = x_2914;
        let x_2917 : vec4<f32> = u_xlat12;
        let x_2918 : vec2<f32> = vec2<f32>(x_2917.z, x_2917.w);
        let x_2920 : f32 = vs_INTERP9.z;
        txVec44 = vec3<f32>(x_2918.x, x_2918.y, x_2920);
        let x_2928 : vec3<f32> = txVec44;
        let x_2930 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2928.xy, x_2928.z);
        u_xlat71 = x_2930;
        let x_2931 : f32 = u_xlat71;
        let x_2933 : f32 = u_xlat18.y;
        u_xlat71 = (x_2931 * x_2933);
        let x_2936 : f32 = u_xlat18.x;
        let x_2938 : f32 = u_xlat8.x;
        let x_2940 : f32 = u_xlat71;
        u_xlat8.x = ((x_2936 * x_2938) + x_2940);
        let x_2944 : vec4<f32> = u_xlat13;
        let x_2945 : vec2<f32> = vec2<f32>(x_2944.x, x_2944.y);
        let x_2947 : f32 = vs_INTERP9.z;
        txVec45 = vec3<f32>(x_2945.x, x_2945.y, x_2947);
        let x_2954 : vec3<f32> = txVec45;
        let x_2956 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2954.xy, x_2954.z);
        u_xlat71 = x_2956;
        let x_2958 : f32 = u_xlat18.z;
        let x_2959 : f32 = u_xlat71;
        let x_2962 : f32 = u_xlat8.x;
        u_xlat8.x = ((x_2958 * x_2959) + x_2962);
        let x_2966 : vec4<f32> = u_xlat15;
        let x_2967 : vec2<f32> = vec2<f32>(x_2966.x, x_2966.y);
        let x_2969 : f32 = vs_INTERP9.z;
        txVec46 = vec3<f32>(x_2967.x, x_2967.y, x_2969);
        let x_2976 : vec3<f32> = txVec46;
        let x_2978 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2976.xy, x_2976.z);
        u_xlat71 = x_2978;
        let x_2980 : f32 = u_xlat18.w;
        let x_2981 : f32 = u_xlat71;
        let x_2984 : f32 = u_xlat8.x;
        u_xlat8.x = ((x_2980 * x_2981) + x_2984);
        let x_2988 : vec4<f32> = u_xlat14;
        let x_2989 : vec2<f32> = vec2<f32>(x_2988.x, x_2988.y);
        let x_2991 : f32 = vs_INTERP9.z;
        txVec47 = vec3<f32>(x_2989.x, x_2989.y, x_2991);
        let x_2998 : vec3<f32> = txVec47;
        let x_3000 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2998.xy, x_2998.z);
        u_xlat71 = x_3000;
        let x_3002 : f32 = u_xlat19.x;
        let x_3003 : f32 = u_xlat71;
        let x_3006 : f32 = u_xlat8.x;
        u_xlat8.x = ((x_3002 * x_3003) + x_3006);
        let x_3010 : vec4<f32> = u_xlat14;
        let x_3011 : vec2<f32> = vec2<f32>(x_3010.z, x_3010.w);
        let x_3013 : f32 = vs_INTERP9.z;
        txVec48 = vec3<f32>(x_3011.x, x_3011.y, x_3013);
        let x_3020 : vec3<f32> = txVec48;
        let x_3022 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_3020.xy, x_3020.z);
        u_xlat71 = x_3022;
        let x_3024 : f32 = u_xlat19.y;
        let x_3025 : f32 = u_xlat71;
        let x_3028 : f32 = u_xlat8.x;
        u_xlat8.x = ((x_3024 * x_3025) + x_3028);
        let x_3032 : vec2<f32> = u_xlat55;
        let x_3034 : f32 = vs_INTERP9.z;
        txVec49 = vec3<f32>(x_3032.x, x_3032.y, x_3034);
        let x_3041 : vec3<f32> = txVec49;
        let x_3043 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_3041.xy, x_3041.z);
        u_xlat71 = x_3043;
        let x_3045 : f32 = u_xlat19.z;
        let x_3046 : f32 = u_xlat71;
        let x_3049 : f32 = u_xlat8.x;
        u_xlat8.x = ((x_3045 * x_3046) + x_3049);
        let x_3053 : vec4<f32> = u_xlat15;
        let x_3054 : vec2<f32> = vec2<f32>(x_3053.z, x_3053.w);
        let x_3056 : f32 = vs_INTERP9.z;
        txVec50 = vec3<f32>(x_3054.x, x_3054.y, x_3056);
        let x_3063 : vec3<f32> = txVec50;
        let x_3065 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_3063.xy, x_3063.z);
        u_xlat71 = x_3065;
        let x_3067 : f32 = u_xlat19.w;
        let x_3068 : f32 = u_xlat71;
        let x_3071 : f32 = u_xlat8.x;
        u_xlat8.x = ((x_3067 * x_3068) + x_3071);
        let x_3075 : vec4<f32> = u_xlat16;
        let x_3076 : vec2<f32> = vec2<f32>(x_3075.x, x_3075.y);
        let x_3078 : f32 = vs_INTERP9.z;
        txVec51 = vec3<f32>(x_3076.x, x_3076.y, x_3078);
        let x_3085 : vec3<f32> = txVec51;
        let x_3087 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_3085.xy, x_3085.z);
        u_xlat71 = x_3087;
        let x_3089 : f32 = u_xlat20.x;
        let x_3090 : f32 = u_xlat71;
        let x_3093 : f32 = u_xlat8.x;
        u_xlat8.x = ((x_3089 * x_3090) + x_3093);
        let x_3097 : vec4<f32> = u_xlat16;
        let x_3098 : vec2<f32> = vec2<f32>(x_3097.z, x_3097.w);
        let x_3100 : f32 = vs_INTERP9.z;
        txVec52 = vec3<f32>(x_3098.x, x_3098.y, x_3100);
        let x_3107 : vec3<f32> = txVec52;
        let x_3109 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_3107.xy, x_3107.z);
        u_xlat71 = x_3109;
        let x_3111 : f32 = u_xlat20.y;
        let x_3112 : f32 = u_xlat71;
        let x_3115 : f32 = u_xlat8.x;
        u_xlat8.x = ((x_3111 * x_3112) + x_3115);
        let x_3119 : vec3<f32> = u_xlat29;
        let x_3120 : vec2<f32> = vec2<f32>(x_3119.x, x_3119.y);
        let x_3122 : f32 = vs_INTERP9.z;
        txVec53 = vec3<f32>(x_3120.x, x_3120.y, x_3122);
        let x_3129 : vec3<f32> = txVec53;
        let x_3131 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_3129.xy, x_3129.z);
        u_xlat29.x = x_3131;
        let x_3134 : f32 = u_xlat20.z;
        let x_3136 : f32 = u_xlat29.x;
        let x_3139 : f32 = u_xlat8.x;
        u_xlat8.x = ((x_3134 * x_3136) + x_3139);
        let x_3143 : vec4<f32> = u_xlat17;
        let x_3144 : vec2<f32> = vec2<f32>(x_3143.x, x_3143.y);
        let x_3146 : f32 = vs_INTERP9.z;
        txVec54 = vec3<f32>(x_3144.x, x_3144.y, x_3146);
        let x_3153 : vec3<f32> = txVec54;
        let x_3155 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_3153.xy, x_3153.z);
        u_xlat29.x = x_3155;
        let x_3158 : f32 = u_xlat20.w;
        let x_3160 : f32 = u_xlat29.x;
        let x_3163 : f32 = u_xlat8.x;
        u_xlat8.x = ((x_3158 * x_3160) + x_3163);
        let x_3167 : vec4<f32> = u_xlat11;
        let x_3168 : vec2<f32> = vec2<f32>(x_3167.x, x_3167.y);
        let x_3170 : f32 = vs_INTERP9.z;
        txVec55 = vec3<f32>(x_3168.x, x_3168.y, x_3170);
        let x_3177 : vec3<f32> = txVec55;
        let x_3179 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_3177.xy, x_3177.z);
        u_xlat29.x = x_3179;
        let x_3182 : f32 = u_xlat7.x;
        let x_3184 : f32 = u_xlat29.x;
        let x_3187 : f32 = u_xlat8.x;
        u_xlat7.x = ((x_3182 * x_3184) + x_3187);
        let x_3191 : vec4<f32> = u_xlat11;
        let x_3192 : vec2<f32> = vec2<f32>(x_3191.z, x_3191.w);
        let x_3194 : f32 = vs_INTERP9.z;
        txVec56 = vec3<f32>(x_3192.x, x_3192.y, x_3194);
        let x_3201 : vec3<f32> = txVec56;
        let x_3203 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_3201.xy, x_3201.z);
        u_xlat8.x = x_3203;
        let x_3206 : f32 = u_xlat7.y;
        let x_3208 : f32 = u_xlat8.x;
        let x_3211 : f32 = u_xlat7.x;
        u_xlat7.x = ((x_3206 * x_3208) + x_3211);
        let x_3215 : vec2<f32> = u_xlat52;
        let x_3217 : f32 = vs_INTERP9.z;
        txVec57 = vec3<f32>(x_3215.x, x_3215.y, x_3217);
        let x_3225 : vec3<f32> = txVec57;
        let x_3227 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_3225.xy, x_3225.z);
        u_xlat28 = x_3227;
        let x_3229 : f32 = u_xlat7.z;
        let x_3230 : f32 = u_xlat28;
        let x_3233 : f32 = u_xlat7.x;
        u_xlat7.x = ((x_3229 * x_3230) + x_3233);
        let x_3237 : vec2<f32> = u_xlat48;
        let x_3239 : f32 = vs_INTERP9.z;
        txVec58 = vec3<f32>(x_3237.x, x_3237.y, x_3239);
        let x_3246 : vec3<f32> = txVec58;
        let x_3248 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_3246.xy, x_3246.z);
        u_xlat48.x = x_3248;
        let x_3251 : f32 = u_xlat7.w;
        let x_3253 : f32 = u_xlat48.x;
        let x_3256 : f32 = u_xlat7.x;
        u_xlat63 = ((x_3251 * x_3253) + x_3256);
      }
    }
  } else {
    let x_3260 : vec4<f32> = vs_INTERP9;
    let x_3261 : vec2<f32> = vec2<f32>(x_3260.x, x_3260.y);
    let x_3263 : f32 = vs_INTERP9.z;
    txVec59 = vec3<f32>(x_3261.x, x_3261.y, x_3263);
    let x_3270 : vec3<f32> = txVec59;
    let x_3272 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_3270.xy, x_3270.z);
    u_xlat63 = x_3272;
  }
  let x_3273 : f32 = u_xlat63;
  let x_3275 : f32 = x_272.x_MainLightShadowParams.x;
  let x_3277 : f32 = u_xlat65;
  u_xlat63 = ((x_3273 * x_3275) + x_3277);
  let x_3280 : f32 = vs_INTERP9.z;
  u_xlatb65 = (0.0f >= x_3280);
  let x_3283 : f32 = vs_INTERP9.z;
  u_xlatb48.x = (x_3283 >= 1.0f);
  let x_3286 : bool = u_xlatb65;
  let x_3288 : bool = u_xlatb48.x;
  u_xlatb65 = (x_3286 | x_3288);
  let x_3290 : bool = u_xlatb65;
  let x_3291 : f32 = u_xlat63;
  u_xlat63 = select(x_3291, 1.0f, x_3290);
  let x_3293 : vec3<f32> = vs_INTERP0;
  let x_3295 : vec3<f32> = x_90.x_WorldSpaceCameraPos;
  let x_3297 : vec3<f32> = (x_3293 + -(x_3295));
  let x_3298 : vec4<f32> = u_xlat7;
  u_xlat7 = vec4<f32>(x_3297.x, x_3297.y, x_3297.z, x_3298.w);
  let x_3300 : vec4<f32> = u_xlat7;
  let x_3302 : vec4<f32> = u_xlat7;
  u_xlat65 = dot(vec3<f32>(x_3300.x, x_3300.y, x_3300.z), vec3<f32>(x_3302.x, x_3302.y, x_3302.z));
  let x_3305 : f32 = u_xlat65;
  let x_3307 : f32 = x_272.x_MainLightShadowParams.z;
  let x_3310 : f32 = x_272.x_MainLightShadowParams.w;
  u_xlat65 = ((x_3305 * x_3307) + x_3310);
  let x_3312 : f32 = u_xlat65;
  u_xlat65 = clamp(x_3312, 0.0f, 1.0f);
  let x_3314 : f32 = u_xlat63;
  u_xlat48.x = (-(x_3314) + 1.0f);
  let x_3318 : f32 = u_xlat65;
  let x_3320 : f32 = u_xlat48.x;
  let x_3322 : f32 = u_xlat63;
  u_xlat63 = ((x_3318 * x_3320) + x_3322);
  let x_3330 : f32 = x_3328.x_MainLightCookieTextureFormat;
  u_xlatb65 = !((x_3330 == -1.0f));
  let x_3332 : bool = u_xlatb65;
  if (x_3332) {
    let x_3335 : vec3<f32> = vs_INTERP0;
    let x_3338 : vec4<f32> = x_3328.x_MainLightWorldToLight[1i];
    u_xlat48 = (vec2<f32>(x_3335.y, x_3335.y) * vec2<f32>(x_3338.x, x_3338.y));
    let x_3342 : vec4<f32> = x_3328.x_MainLightWorldToLight[0i];
    let x_3344 : vec3<f32> = vs_INTERP0;
    let x_3347 : vec2<f32> = u_xlat48;
    u_xlat48 = ((vec2<f32>(x_3342.x, x_3342.y) * vec2<f32>(x_3344.x, x_3344.x)) + x_3347);
    let x_3350 : vec4<f32> = x_3328.x_MainLightWorldToLight[2i];
    let x_3352 : vec3<f32> = vs_INTERP0;
    let x_3355 : vec2<f32> = u_xlat48;
    u_xlat48 = ((vec2<f32>(x_3350.x, x_3350.y) * vec2<f32>(x_3352.z, x_3352.z)) + x_3355);
    let x_3357 : vec2<f32> = u_xlat48;
    let x_3359 : vec4<f32> = x_3328.x_MainLightWorldToLight[3i];
    u_xlat48 = (x_3357 + vec2<f32>(x_3359.x, x_3359.y));
    let x_3362 : vec2<f32> = u_xlat48;
    u_xlat48 = ((x_3362 * vec2<f32>(0.5f, 0.5f)) + vec2<f32>(0.5f, 0.5f));
    let x_3370 : vec2<f32> = u_xlat48;
    let x_3372 : f32 = x_90.x_GlobalMipBias.x;
    let x_3373 : vec4<f32> = textureSampleBias(x_MainLightCookieTexture, sampler_MainLightCookieTexture, x_3370, x_3372);
    u_xlat7 = x_3373;
    let x_3375 : f32 = x_3328.x_MainLightCookieTextureFormat;
    let x_3377 : f32 = x_3328.x_MainLightCookieTextureFormat;
    let x_3379 : f32 = x_3328.x_MainLightCookieTextureFormat;
    let x_3381 : f32 = x_3328.x_MainLightCookieTextureFormat;
    let x_3382 : vec4<f32> = vec4<f32>(x_3375, x_3377, x_3379, x_3381);
    let x_3390 : vec4<bool> = (vec4<f32>(x_3382.x, x_3382.y, x_3382.z, x_3382.w) == vec4<f32>(0.0f, 1.0f, 0.0f, 1.0f));
    u_xlatb48 = vec2<bool>(x_3390.x, x_3390.y);
    let x_3393 : bool = u_xlatb48.y;
    if (x_3393) {
      let x_3398 : f32 = u_xlat7.w;
      x_3394 = x_3398;
    } else {
      let x_3401 : f32 = u_xlat7.x;
      x_3394 = x_3401;
    }
    let x_3402 : f32 = x_3394;
    u_xlat65 = x_3402;
    let x_3404 : bool = u_xlatb48.x;
    if (x_3404) {
      let x_3408 : vec4<f32> = u_xlat7;
      x_3405 = vec3<f32>(x_3408.x, x_3408.y, x_3408.z);
    } else {
      let x_3411 : f32 = u_xlat65;
      x_3405 = vec3<f32>(x_3411, x_3411, x_3411);
    }
    let x_3413 : vec3<f32> = x_3405;
    let x_3414 : vec4<f32> = u_xlat7;
    u_xlat7 = vec4<f32>(x_3413.x, x_3413.y, x_3413.z, x_3414.w);
  } else {
    u_xlat7.x = 1.0f;
    u_xlat7.y = 1.0f;
    u_xlat7.z = 1.0f;
  }
  let x_3420 : vec4<f32> = u_xlat7;
  let x_3423 : vec4<f32> = x_90.x_MainLightColor;
  let x_3425 : vec3<f32> = (vec3<f32>(x_3420.x, x_3420.y, x_3420.z) * vec3<f32>(x_3423.x, x_3423.y, x_3423.z));
  let x_3426 : vec4<f32> = u_xlat7;
  u_xlat7 = vec4<f32>(x_3425.x, x_3425.y, x_3425.z, x_3426.w);
  let x_3428 : f32 = u_xlat27;
  let x_3430 : vec4<f32> = u_xlat7;
  let x_3432 : vec3<f32> = (vec3<f32>(x_3428, x_3428, x_3428) * vec3<f32>(x_3430.x, x_3430.y, x_3430.z));
  let x_3433 : vec4<f32> = u_xlat7;
  u_xlat7 = vec4<f32>(x_3432.x, x_3432.y, x_3432.z, x_3433.w);
  let x_3435 : vec3<f32> = u_xlat2;
  let x_3437 : vec4<f32> = u_xlat3;
  u_xlat65 = dot(-(x_3435), vec3<f32>(x_3437.x, x_3437.y, x_3437.z));
  let x_3440 : f32 = u_xlat65;
  let x_3441 : f32 = u_xlat65;
  u_xlat65 = (x_3440 + x_3441);
  let x_3443 : vec4<f32> = u_xlat3;
  let x_3445 : f32 = u_xlat65;
  let x_3449 : vec3<f32> = u_xlat2;
  let x_3451 : vec3<f32> = ((vec3<f32>(x_3443.x, x_3443.y, x_3443.z) * -(vec3<f32>(x_3445, x_3445, x_3445))) + -(x_3449));
  let x_3452 : vec4<f32> = u_xlat8;
  u_xlat8 = vec4<f32>(x_3451.x, x_3451.y, x_3451.z, x_3452.w);
  let x_3454 : vec4<f32> = u_xlat3;
  let x_3456 : vec3<f32> = u_xlat2;
  u_xlat65 = dot(vec3<f32>(x_3454.x, x_3454.y, x_3454.z), x_3456);
  let x_3458 : f32 = u_xlat65;
  u_xlat65 = clamp(x_3458, 0.0f, 1.0f);
  let x_3460 : f32 = u_xlat65;
  u_xlat65 = (-(x_3460) + 1.0f);
  let x_3463 : f32 = u_xlat65;
  let x_3464 : f32 = u_xlat65;
  u_xlat65 = (x_3463 * x_3464);
  let x_3466 : f32 = u_xlat65;
  let x_3467 : f32 = u_xlat65;
  u_xlat65 = (x_3466 * x_3467);
  let x_3470 : f32 = u_xlat43.x;
  u_xlat48.x = ((-(x_3470) * 0.699999988f) + 1.700000048f);
  let x_3478 : f32 = u_xlat43.x;
  let x_3480 : f32 = u_xlat48.x;
  u_xlat43.x = (x_3478 * x_3480);
  let x_3484 : f32 = u_xlat43.x;
  u_xlat43.x = (x_3484 * 6.0f);
  let x_3496 : vec4<f32> = u_xlat8;
  let x_3499 : f32 = u_xlat43.x;
  let x_3500 : vec4<f32> = textureSampleLevel(unity_SpecCube0, samplerunity_SpecCube0, vec3<f32>(x_3496.x, x_3496.y, x_3496.z), x_3499);
  u_xlat8 = x_3500;
  let x_3502 : f32 = u_xlat8.w;
  u_xlat43.x = (x_3502 + -1.0f);
  let x_3506 : f32 = x_161.unity_SpecCube0_HDR.w;
  let x_3508 : f32 = u_xlat43.x;
  u_xlat43.x = ((x_3506 * x_3508) + 1.0f);
  let x_3513 : f32 = u_xlat43.x;
  u_xlat43.x = max(x_3513, 0.0f);
  let x_3517 : f32 = u_xlat43.x;
  u_xlat43.x = log2(x_3517);
  let x_3521 : f32 = u_xlat43.x;
  let x_3523 : f32 = x_161.unity_SpecCube0_HDR.y;
  u_xlat43.x = (x_3521 * x_3523);
  let x_3527 : f32 = u_xlat43.x;
  u_xlat43.x = exp2(x_3527);
  let x_3531 : f32 = u_xlat43.x;
  let x_3533 : f32 = x_161.unity_SpecCube0_HDR.x;
  u_xlat43.x = (x_3531 * x_3533);
  let x_3536 : vec4<f32> = u_xlat8;
  let x_3538 : vec2<f32> = u_xlat43;
  let x_3540 : vec3<f32> = (vec3<f32>(x_3536.x, x_3536.y, x_3536.z) * vec3<f32>(x_3538.x, x_3538.x, x_3538.x));
  let x_3541 : vec4<f32> = u_xlat8;
  u_xlat8 = vec4<f32>(x_3540.x, x_3540.y, x_3540.z, x_3541.w);
  let x_3543 : f32 = u_xlat64;
  let x_3545 : f32 = u_xlat64;
  u_xlat43 = ((vec2<f32>(x_3543, x_3543) * vec2<f32>(x_3545, x_3545)) + vec2<f32>(-1.0f, 1.0f));
  let x_3551 : f32 = u_xlat43.y;
  u_xlat64 = (1.0f / x_3551);
  let x_3553 : f32 = u_xlat67;
  u_xlat67 = (x_3553 + -0.039999999f);
  let x_3556 : f32 = u_xlat65;
  let x_3557 : f32 = u_xlat67;
  u_xlat65 = ((x_3556 * x_3557) + 0.039999999f);
  let x_3561 : f32 = u_xlat64;
  let x_3562 : f32 = u_xlat65;
  u_xlat64 = (x_3561 * x_3562);
  let x_3564 : f32 = u_xlat64;
  let x_3566 : vec4<f32> = u_xlat8;
  let x_3568 : vec3<f32> = (vec3<f32>(x_3564, x_3564, x_3564) * vec3<f32>(x_3566.x, x_3566.y, x_3566.z));
  let x_3569 : vec4<f32> = u_xlat8;
  u_xlat8 = vec4<f32>(x_3568.x, x_3568.y, x_3568.z, x_3569.w);
  let x_3571 : vec3<f32> = u_xlat26;
  let x_3572 : vec3<f32> = u_xlat4;
  let x_3574 : vec4<f32> = u_xlat8;
  u_xlat26 = ((x_3571 * x_3572) + vec3<f32>(x_3574.x, x_3574.y, x_3574.z));
  let x_3577 : f32 = u_xlat63;
  let x_3579 : f32 = x_161.unity_LightData.z;
  u_xlat63 = (x_3577 * x_3579);
  let x_3581 : vec4<f32> = u_xlat3;
  let x_3584 : vec4<f32> = x_90.x_MainLightPosition;
  u_xlat64 = dot(vec3<f32>(x_3581.x, x_3581.y, x_3581.z), vec3<f32>(x_3584.x, x_3584.y, x_3584.z));
  let x_3587 : f32 = u_xlat64;
  u_xlat64 = clamp(x_3587, 0.0f, 1.0f);
  let x_3589 : f32 = u_xlat63;
  let x_3590 : f32 = u_xlat64;
  u_xlat63 = (x_3589 * x_3590);
  let x_3592 : f32 = u_xlat63;
  let x_3594 : vec4<f32> = u_xlat7;
  let x_3596 : vec3<f32> = (vec3<f32>(x_3592, x_3592, x_3592) * vec3<f32>(x_3594.x, x_3594.y, x_3594.z));
  let x_3597 : vec4<f32> = u_xlat7;
  u_xlat7 = vec4<f32>(x_3596.x, x_3596.y, x_3596.z, x_3597.w);
  let x_3599 : vec3<f32> = u_xlat2;
  let x_3601 : vec4<f32> = x_90.x_MainLightPosition;
  let x_3603 : vec3<f32> = (x_3599 + vec3<f32>(x_3601.x, x_3601.y, x_3601.z));
  let x_3604 : vec4<f32> = u_xlat8;
  u_xlat8 = vec4<f32>(x_3603.x, x_3603.y, x_3603.z, x_3604.w);
  let x_3606 : vec4<f32> = u_xlat8;
  let x_3608 : vec4<f32> = u_xlat8;
  u_xlat63 = dot(vec3<f32>(x_3606.x, x_3606.y, x_3606.z), vec3<f32>(x_3608.x, x_3608.y, x_3608.z));
  let x_3611 : f32 = u_xlat63;
  u_xlat63 = max(x_3611, 1.17549435e-37f);
  let x_3614 : f32 = u_xlat63;
  u_xlat63 = inverseSqrt(x_3614);
  let x_3616 : f32 = u_xlat63;
  let x_3618 : vec4<f32> = u_xlat8;
  let x_3620 : vec3<f32> = (vec3<f32>(x_3616, x_3616, x_3616) * vec3<f32>(x_3618.x, x_3618.y, x_3618.z));
  let x_3621 : vec4<f32> = u_xlat8;
  u_xlat8 = vec4<f32>(x_3620.x, x_3620.y, x_3620.z, x_3621.w);
  let x_3623 : vec4<f32> = u_xlat3;
  let x_3625 : vec4<f32> = u_xlat8;
  u_xlat63 = dot(vec3<f32>(x_3623.x, x_3623.y, x_3623.z), vec3<f32>(x_3625.x, x_3625.y, x_3625.z));
  let x_3628 : f32 = u_xlat63;
  u_xlat63 = clamp(x_3628, 0.0f, 1.0f);
  let x_3631 : vec4<f32> = x_90.x_MainLightPosition;
  let x_3633 : vec4<f32> = u_xlat8;
  u_xlat64 = dot(vec3<f32>(x_3631.x, x_3631.y, x_3631.z), vec3<f32>(x_3633.x, x_3633.y, x_3633.z));
  let x_3636 : f32 = u_xlat64;
  u_xlat64 = clamp(x_3636, 0.0f, 1.0f);
  let x_3638 : f32 = u_xlat63;
  let x_3639 : f32 = u_xlat63;
  u_xlat63 = (x_3638 * x_3639);
  let x_3641 : f32 = u_xlat63;
  let x_3643 : f32 = u_xlat43.x;
  u_xlat63 = ((x_3641 * x_3643) + 1.000010014f);
  let x_3647 : f32 = u_xlat64;
  let x_3648 : f32 = u_xlat64;
  u_xlat64 = (x_3647 * x_3648);
  let x_3650 : f32 = u_xlat63;
  let x_3651 : f32 = u_xlat63;
  u_xlat63 = (x_3650 * x_3651);
  let x_3653 : f32 = u_xlat64;
  u_xlat64 = max(x_3653, 0.100000001f);
  let x_3656 : f32 = u_xlat63;
  let x_3657 : f32 = u_xlat64;
  u_xlat63 = (x_3656 * x_3657);
  let x_3660 : f32 = u_xlat5.x;
  let x_3661 : f32 = u_xlat63;
  u_xlat63 = (x_3660 * x_3661);
  let x_3663 : f32 = u_xlat66;
  let x_3664 : f32 = u_xlat63;
  u_xlat63 = (x_3663 / x_3664);
  let x_3666 : f32 = u_xlat63;
  let x_3670 : vec3<f32> = u_xlat4;
  let x_3671 : vec3<f32> = ((vec3<f32>(x_3666, x_3666, x_3666) * vec3<f32>(0.039999999f, 0.039999999f, 0.039999999f)) + x_3670);
  let x_3672 : vec4<f32> = u_xlat8;
  u_xlat8 = vec4<f32>(x_3671.x, x_3671.y, x_3671.z, x_3672.w);
  let x_3674 : vec4<f32> = u_xlat7;
  let x_3676 : vec4<f32> = u_xlat8;
  let x_3678 : vec3<f32> = (vec3<f32>(x_3674.x, x_3674.y, x_3674.z) * vec3<f32>(x_3676.x, x_3676.y, x_3676.z));
  let x_3679 : vec4<f32> = u_xlat7;
  u_xlat7 = vec4<f32>(x_3678.x, x_3678.y, x_3678.z, x_3679.w);
  let x_3682 : f32 = x_90.x_AdditionalLightsCount.x;
  let x_3684 : f32 = x_161.unity_LightData.y;
  u_xlat63 = min(x_3682, x_3684);
  let x_3687 : f32 = u_xlat63;
  u_xlatu63 = bitcast<u32>(i32(x_3687));
  let x_3691 : f32 = x_3328.x_AdditionalLightsCookieAtlasTextureFormat;
  let x_3693 : f32 = x_3328.x_AdditionalLightsCookieAtlasTextureFormat;
  let x_3695 : f32 = x_3328.x_AdditionalLightsCookieAtlasTextureFormat;
  let x_3697 : f32 = x_3328.x_AdditionalLightsCookieAtlasTextureFormat;
  let x_3698 : vec4<f32> = vec4<f32>(x_3691, x_3693, x_3695, x_3697);
  let x_3704 : vec4<bool> = (vec4<f32>(x_3698.x, x_3698.y, x_3698.z, x_3698.w) == vec4<f32>(0.0f, 1.0f, 0.0f, 1.0f));
  u_xlatb48 = vec2<bool>(x_3704.x, x_3704.y);
  u_xlat8.x = 0.0f;
  u_xlat8.y = 0.0f;
  u_xlat8.z = 0.0f;
  u_xlatu_loop_1 = 0u;
  loop {
    let x_3715 : u32 = u_xlatu_loop_1;
    let x_3716 : u32 = u_xlatu63;
    if ((x_3715 < x_3716)) {
    } else {
      break;
    }
    let x_3719 : u32 = u_xlatu_loop_1;
    u_xlatu65 = (x_3719 >> 2u);
    let x_3722 : u32 = u_xlatu_loop_1;
    u_xlati67 = bitcast<i32>((x_3722 & 3u));
    let x_3725 : u32 = u_xlatu65;
    let x_3728 : vec4<f32> = x_161.unity_LightIndices[bitcast<i32>(x_3725)];
    let x_3738 : i32 = u_xlati67;
    indexable = array<vec4<u32>, 4u>(vec4<u32>(1065353216u, 0u, 0u, 0u), vec4<u32>(0u, 1065353216u, 0u, 0u), vec4<u32>(0u, 0u, 1065353216u, 0u), vec4<u32>(0u, 0u, 0u, 1065353216u));
    let x_3743 : vec4<u32> = indexable[x_3738];
    u_xlat65 = dot(x_3728, bitcast<vec4<f32>>(x_3743));
    let x_3746 : f32 = u_xlat65;
    u_xlatu65 = bitcast<u32>(i32(x_3746));
    let x_3749 : vec3<f32> = vs_INTERP0;
    let x_3761 : u32 = u_xlatu65;
    let x_3764 : vec4<f32> = x_3760.x_AdditionalLightsPosition[bitcast<i32>(x_3761)];
    let x_3767 : u32 = u_xlatu65;
    let x_3770 : vec4<f32> = x_3760.x_AdditionalLightsPosition[bitcast<i32>(x_3767)];
    let x_3772 : vec3<f32> = ((-(x_3749) * vec3<f32>(x_3764.w, x_3764.w, x_3764.w)) + vec3<f32>(x_3770.x, x_3770.y, x_3770.z));
    let x_3773 : vec4<f32> = u_xlat9;
    u_xlat9 = vec4<f32>(x_3772.x, x_3772.y, x_3772.z, x_3773.w);
    let x_3775 : vec4<f32> = u_xlat9;
    let x_3777 : vec4<f32> = u_xlat9;
    u_xlat67 = dot(vec3<f32>(x_3775.x, x_3775.y, x_3775.z), vec3<f32>(x_3777.x, x_3777.y, x_3777.z));
    let x_3780 : f32 = u_xlat67;
    u_xlat67 = max(x_3780, 6.10351562e-05f);
    let x_3784 : f32 = u_xlat67;
    u_xlat70 = inverseSqrt(x_3784);
    let x_3786 : f32 = u_xlat70;
    let x_3788 : vec4<f32> = u_xlat9;
    let x_3790 : vec3<f32> = (vec3<f32>(x_3786, x_3786, x_3786) * vec3<f32>(x_3788.x, x_3788.y, x_3788.z));
    let x_3791 : vec4<f32> = u_xlat10;
    u_xlat10 = vec4<f32>(x_3790.x, x_3790.y, x_3790.z, x_3791.w);
    let x_3793 : f32 = u_xlat67;
    u_xlat71 = (1.0f / x_3793);
    let x_3795 : f32 = u_xlat67;
    let x_3796 : u32 = u_xlatu65;
    let x_3799 : f32 = x_3760.x_AdditionalLightsAttenuation[bitcast<i32>(x_3796)].x;
    u_xlat67 = (x_3795 * x_3799);
    let x_3801 : f32 = u_xlat67;
    let x_3803 : f32 = u_xlat67;
    u_xlat67 = ((-(x_3801) * x_3803) + 1.0f);
    let x_3806 : f32 = u_xlat67;
    u_xlat67 = max(x_3806, 0.0f);
    let x_3808 : f32 = u_xlat67;
    let x_3809 : f32 = u_xlat67;
    u_xlat67 = (x_3808 * x_3809);
    let x_3811 : f32 = u_xlat67;
    let x_3812 : f32 = u_xlat71;
    u_xlat67 = (x_3811 * x_3812);
    let x_3814 : u32 = u_xlatu65;
    let x_3817 : vec4<f32> = x_3760.x_AdditionalLightsSpotDir[bitcast<i32>(x_3814)];
    let x_3819 : vec4<f32> = u_xlat10;
    u_xlat71 = dot(vec3<f32>(x_3817.x, x_3817.y, x_3817.z), vec3<f32>(x_3819.x, x_3819.y, x_3819.z));
    let x_3822 : f32 = u_xlat71;
    let x_3823 : u32 = u_xlatu65;
    let x_3826 : f32 = x_3760.x_AdditionalLightsAttenuation[bitcast<i32>(x_3823)].z;
    let x_3828 : u32 = u_xlatu65;
    let x_3831 : f32 = x_3760.x_AdditionalLightsAttenuation[bitcast<i32>(x_3828)].w;
    u_xlat71 = ((x_3822 * x_3826) + x_3831);
    let x_3833 : f32 = u_xlat71;
    u_xlat71 = clamp(x_3833, 0.0f, 1.0f);
    let x_3835 : f32 = u_xlat71;
    let x_3836 : f32 = u_xlat71;
    u_xlat71 = (x_3835 * x_3836);
    let x_3838 : f32 = u_xlat67;
    let x_3839 : f32 = u_xlat71;
    u_xlat67 = (x_3838 * x_3839);
    let x_3842 : u32 = u_xlatu65;
    u_xlatu71 = (x_3842 >> 5u);
    let x_3845 : u32 = u_xlatu65;
    u_xlati72 = (1i << bitcast<u32>((bitcast<i32>(x_3845) & 31i)));
    let x_3851 : i32 = u_xlati72;
    let x_3853 : u32 = u_xlatu71;
    let x_3856 : f32 = x_3328.x_AdditionalLightsCookieEnableBits[bitcast<i32>(x_3853)].el;
    u_xlati71 = bitcast<i32>((bitcast<u32>(x_3851) & bitcast<u32>(x_3856)));
    let x_3860 : i32 = u_xlati71;
    if ((x_3860 != 0i)) {
      let x_3870 : u32 = u_xlatu65;
      let x_3873 : f32 = x_3869.x_AdditionalLightsLightTypes[bitcast<i32>(x_3870)].el;
      u_xlati71 = i32(x_3873);
      let x_3875 : i32 = u_xlati71;
      u_xlati72 = select(1i, 0i, (x_3875 != 0i));
      let x_3879 : u32 = u_xlatu65;
      u_xlati73 = (bitcast<i32>(x_3879) << bitcast<u32>(2i));
      let x_3882 : i32 = u_xlati72;
      if ((x_3882 != 0i)) {
        let x_3886 : vec3<f32> = vs_INTERP0;
        let x_3888 : i32 = u_xlati73;
        let x_3891 : i32 = u_xlati73;
        let x_3895 : vec4<f32> = x_3869.x_AdditionalLightsWorldToLights[((x_3888 + 1i) / 4i)][((x_3891 + 1i) % 4i)];
        let x_3897 : vec3<f32> = (vec3<f32>(x_3886.y, x_3886.y, x_3886.y) * vec3<f32>(x_3895.x, x_3895.y, x_3895.w));
        let x_3898 : vec4<f32> = u_xlat11;
        u_xlat11 = vec4<f32>(x_3897.x, x_3897.y, x_3897.z, x_3898.w);
        let x_3900 : i32 = u_xlati73;
        let x_3902 : i32 = u_xlati73;
        let x_3905 : vec4<f32> = x_3869.x_AdditionalLightsWorldToLights[(x_3900 / 4i)][(x_3902 % 4i)];
        let x_3907 : vec3<f32> = vs_INTERP0;
        let x_3910 : vec4<f32> = u_xlat11;
        let x_3912 : vec3<f32> = ((vec3<f32>(x_3905.x, x_3905.y, x_3905.w) * vec3<f32>(x_3907.x, x_3907.x, x_3907.x)) + vec3<f32>(x_3910.x, x_3910.y, x_3910.z));
        let x_3913 : vec4<f32> = u_xlat11;
        u_xlat11 = vec4<f32>(x_3912.x, x_3912.y, x_3912.z, x_3913.w);
        let x_3915 : i32 = u_xlati73;
        let x_3918 : i32 = u_xlati73;
        let x_3922 : vec4<f32> = x_3869.x_AdditionalLightsWorldToLights[((x_3915 + 2i) / 4i)][((x_3918 + 2i) % 4i)];
        let x_3924 : vec3<f32> = vs_INTERP0;
        let x_3927 : vec4<f32> = u_xlat11;
        let x_3929 : vec3<f32> = ((vec3<f32>(x_3922.x, x_3922.y, x_3922.w) * vec3<f32>(x_3924.z, x_3924.z, x_3924.z)) + vec3<f32>(x_3927.x, x_3927.y, x_3927.z));
        let x_3930 : vec4<f32> = u_xlat11;
        u_xlat11 = vec4<f32>(x_3929.x, x_3929.y, x_3929.z, x_3930.w);
        let x_3932 : vec4<f32> = u_xlat11;
        let x_3934 : i32 = u_xlati73;
        let x_3937 : i32 = u_xlati73;
        let x_3941 : vec4<f32> = x_3869.x_AdditionalLightsWorldToLights[((x_3934 + 3i) / 4i)][((x_3937 + 3i) % 4i)];
        let x_3943 : vec3<f32> = (vec3<f32>(x_3932.x, x_3932.y, x_3932.z) + vec3<f32>(x_3941.x, x_3941.y, x_3941.w));
        let x_3944 : vec4<f32> = u_xlat11;
        u_xlat11 = vec4<f32>(x_3943.x, x_3943.y, x_3943.z, x_3944.w);
        let x_3946 : vec4<f32> = u_xlat11;
        let x_3948 : vec4<f32> = u_xlat11;
        let x_3950 : vec2<f32> = (vec2<f32>(x_3946.x, x_3946.y) / vec2<f32>(x_3948.z, x_3948.z));
        let x_3951 : vec4<f32> = u_xlat11;
        u_xlat11 = vec4<f32>(x_3950.x, x_3950.y, x_3951.z, x_3951.w);
        let x_3953 : vec4<f32> = u_xlat11;
        let x_3956 : vec2<f32> = ((vec2<f32>(x_3953.x, x_3953.y) * vec2<f32>(0.5f, 0.5f)) + vec2<f32>(0.5f, 0.5f));
        let x_3957 : vec4<f32> = u_xlat11;
        u_xlat11 = vec4<f32>(x_3956.x, x_3956.y, x_3957.z, x_3957.w);
        let x_3959 : vec4<f32> = u_xlat11;
        let x_3963 : vec2<f32> = clamp(vec2<f32>(x_3959.x, x_3959.y), vec2<f32>(0.0f, 0.0f), vec2<f32>(1.0f, 1.0f));
        let x_3964 : vec4<f32> = u_xlat11;
        u_xlat11 = vec4<f32>(x_3963.x, x_3963.y, x_3964.z, x_3964.w);
        let x_3966 : u32 = u_xlatu65;
        let x_3969 : vec4<f32> = x_3869.x_AdditionalLightsCookieAtlasUVRects[bitcast<i32>(x_3966)];
        let x_3971 : vec4<f32> = u_xlat11;
        let x_3974 : u32 = u_xlatu65;
        let x_3977 : vec4<f32> = x_3869.x_AdditionalLightsCookieAtlasUVRects[bitcast<i32>(x_3974)];
        let x_3979 : vec2<f32> = ((vec2<f32>(x_3969.x, x_3969.y) * vec2<f32>(x_3971.x, x_3971.y)) + vec2<f32>(x_3977.z, x_3977.w));
        let x_3980 : vec4<f32> = u_xlat11;
        u_xlat11 = vec4<f32>(x_3979.x, x_3979.y, x_3980.z, x_3980.w);
      } else {
        let x_3984 : i32 = u_xlati71;
        u_xlatb71 = (x_3984 == 1i);
        let x_3986 : bool = u_xlatb71;
        u_xlati71 = select(0i, 1i, x_3986);
        let x_3988 : i32 = u_xlati71;
        if ((x_3988 != 0i)) {
          let x_3993 : vec3<f32> = vs_INTERP0;
          let x_3995 : i32 = u_xlati73;
          let x_3998 : i32 = u_xlati73;
          let x_4002 : vec4<f32> = x_3869.x_AdditionalLightsWorldToLights[((x_3995 + 1i) / 4i)][((x_3998 + 1i) % 4i)];
          u_xlat53 = (vec2<f32>(x_3993.y, x_3993.y) * vec2<f32>(x_4002.x, x_4002.y));
          let x_4005 : i32 = u_xlati73;
          let x_4007 : i32 = u_xlati73;
          let x_4010 : vec4<f32> = x_3869.x_AdditionalLightsWorldToLights[(x_4005 / 4i)][(x_4007 % 4i)];
          let x_4012 : vec3<f32> = vs_INTERP0;
          let x_4015 : vec2<f32> = u_xlat53;
          u_xlat53 = ((vec2<f32>(x_4010.x, x_4010.y) * vec2<f32>(x_4012.x, x_4012.x)) + x_4015);
          let x_4017 : i32 = u_xlati73;
          let x_4020 : i32 = u_xlati73;
          let x_4024 : vec4<f32> = x_3869.x_AdditionalLightsWorldToLights[((x_4017 + 2i) / 4i)][((x_4020 + 2i) % 4i)];
          let x_4026 : vec3<f32> = vs_INTERP0;
          let x_4029 : vec2<f32> = u_xlat53;
          u_xlat53 = ((vec2<f32>(x_4024.x, x_4024.y) * vec2<f32>(x_4026.z, x_4026.z)) + x_4029);
          let x_4031 : vec2<f32> = u_xlat53;
          let x_4032 : i32 = u_xlati73;
          let x_4035 : i32 = u_xlati73;
          let x_4039 : vec4<f32> = x_3869.x_AdditionalLightsWorldToLights[((x_4032 + 3i) / 4i)][((x_4035 + 3i) % 4i)];
          u_xlat53 = (x_4031 + vec2<f32>(x_4039.x, x_4039.y));
          let x_4042 : vec2<f32> = u_xlat53;
          u_xlat53 = ((x_4042 * vec2<f32>(0.5f, 0.5f)) + vec2<f32>(0.5f, 0.5f));
          let x_4045 : vec2<f32> = u_xlat53;
          u_xlat53 = fract(x_4045);
          let x_4047 : u32 = u_xlatu65;
          let x_4050 : vec4<f32> = x_3869.x_AdditionalLightsCookieAtlasUVRects[bitcast<i32>(x_4047)];
          let x_4052 : vec2<f32> = u_xlat53;
          let x_4054 : u32 = u_xlatu65;
          let x_4057 : vec4<f32> = x_3869.x_AdditionalLightsCookieAtlasUVRects[bitcast<i32>(x_4054)];
          let x_4059 : vec2<f32> = ((vec2<f32>(x_4050.x, x_4050.y) * x_4052) + vec2<f32>(x_4057.z, x_4057.w));
          let x_4060 : vec4<f32> = u_xlat11;
          u_xlat11 = vec4<f32>(x_4059.x, x_4059.y, x_4060.z, x_4060.w);
        } else {
          let x_4063 : vec3<f32> = vs_INTERP0;
          let x_4065 : i32 = u_xlati73;
          let x_4068 : i32 = u_xlati73;
          let x_4072 : vec4<f32> = x_3869.x_AdditionalLightsWorldToLights[((x_4065 + 1i) / 4i)][((x_4068 + 1i) % 4i)];
          u_xlat12 = (vec4<f32>(x_4063.y, x_4063.y, x_4063.y, x_4063.y) * x_4072);
          let x_4074 : i32 = u_xlati73;
          let x_4076 : i32 = u_xlati73;
          let x_4079 : vec4<f32> = x_3869.x_AdditionalLightsWorldToLights[(x_4074 / 4i)][(x_4076 % 4i)];
          let x_4080 : vec3<f32> = vs_INTERP0;
          let x_4083 : vec4<f32> = u_xlat12;
          u_xlat12 = ((x_4079 * vec4<f32>(x_4080.x, x_4080.x, x_4080.x, x_4080.x)) + x_4083);
          let x_4085 : i32 = u_xlati73;
          let x_4088 : i32 = u_xlati73;
          let x_4092 : vec4<f32> = x_3869.x_AdditionalLightsWorldToLights[((x_4085 + 2i) / 4i)][((x_4088 + 2i) % 4i)];
          let x_4093 : vec3<f32> = vs_INTERP0;
          let x_4096 : vec4<f32> = u_xlat12;
          u_xlat12 = ((x_4092 * vec4<f32>(x_4093.z, x_4093.z, x_4093.z, x_4093.z)) + x_4096);
          let x_4098 : vec4<f32> = u_xlat12;
          let x_4099 : i32 = u_xlati73;
          let x_4102 : i32 = u_xlati73;
          let x_4106 : vec4<f32> = x_3869.x_AdditionalLightsWorldToLights[((x_4099 + 3i) / 4i)][((x_4102 + 3i) % 4i)];
          u_xlat12 = (x_4098 + x_4106);
          let x_4108 : vec4<f32> = u_xlat12;
          let x_4110 : vec4<f32> = u_xlat12;
          let x_4112 : vec3<f32> = (vec3<f32>(x_4108.x, x_4108.y, x_4108.z) / vec3<f32>(x_4110.w, x_4110.w, x_4110.w));
          let x_4113 : vec4<f32> = u_xlat12;
          u_xlat12 = vec4<f32>(x_4112.x, x_4112.y, x_4112.z, x_4113.w);
          let x_4115 : vec4<f32> = u_xlat12;
          let x_4117 : vec4<f32> = u_xlat12;
          u_xlat71 = dot(vec3<f32>(x_4115.x, x_4115.y, x_4115.z), vec3<f32>(x_4117.x, x_4117.y, x_4117.z));
          let x_4120 : f32 = u_xlat71;
          u_xlat71 = inverseSqrt(x_4120);
          let x_4122 : f32 = u_xlat71;
          let x_4124 : vec4<f32> = u_xlat12;
          let x_4126 : vec3<f32> = (vec3<f32>(x_4122, x_4122, x_4122) * vec3<f32>(x_4124.x, x_4124.y, x_4124.z));
          let x_4127 : vec4<f32> = u_xlat12;
          u_xlat12 = vec4<f32>(x_4126.x, x_4126.y, x_4126.z, x_4127.w);
          let x_4129 : vec4<f32> = u_xlat12;
          u_xlat71 = dot(abs(vec3<f32>(x_4129.x, x_4129.y, x_4129.z)), vec3<f32>(1.0f, 1.0f, 1.0f));
          let x_4134 : f32 = u_xlat71;
          u_xlat71 = max(x_4134, 0.000001f);
          let x_4137 : f32 = u_xlat71;
          u_xlat71 = (1.0f / x_4137);
          let x_4139 : f32 = u_xlat71;
          let x_4141 : vec4<f32> = u_xlat12;
          let x_4143 : vec3<f32> = (vec3<f32>(x_4139, x_4139, x_4139) * vec3<f32>(x_4141.z, x_4141.x, x_4141.y));
          let x_4144 : vec4<f32> = u_xlat13;
          u_xlat13 = vec4<f32>(x_4143.x, x_4143.y, x_4143.z, x_4144.w);
          let x_4147 : f32 = u_xlat13.x;
          u_xlat13.x = -(x_4147);
          let x_4151 : f32 = u_xlat13.x;
          u_xlat13.x = clamp(x_4151, 0.0f, 1.0f);
          let x_4155 : vec4<f32> = u_xlat13;
          let x_4158 : vec4<bool> = (vec4<f32>(x_4155.y, x_4155.z, x_4155.y, x_4155.z) >= vec4<f32>(0.0f, 0.0f, 0.0f, 0.0f));
          u_xlatb53 = vec2<bool>(x_4158.x, x_4158.y);
          let x_4161 : bool = u_xlatb53.x;
          if (x_4161) {
            let x_4166 : f32 = u_xlat13.x;
            x_4162 = x_4166;
          } else {
            let x_4169 : f32 = u_xlat13.x;
            x_4162 = -(x_4169);
          }
          let x_4171 : f32 = x_4162;
          u_xlat53.x = x_4171;
          let x_4174 : bool = u_xlatb53.y;
          if (x_4174) {
            let x_4179 : f32 = u_xlat13.x;
            x_4175 = x_4179;
          } else {
            let x_4182 : f32 = u_xlat13.x;
            x_4175 = -(x_4182);
          }
          let x_4184 : f32 = x_4175;
          u_xlat53.y = x_4184;
          let x_4186 : vec4<f32> = u_xlat12;
          let x_4188 : f32 = u_xlat71;
          let x_4191 : vec2<f32> = u_xlat53;
          u_xlat53 = ((vec2<f32>(x_4186.x, x_4186.y) * vec2<f32>(x_4188, x_4188)) + x_4191);
          let x_4193 : vec2<f32> = u_xlat53;
          u_xlat53 = ((x_4193 * vec2<f32>(0.5f, 0.5f)) + vec2<f32>(0.5f, 0.5f));
          let x_4196 : vec2<f32> = u_xlat53;
          u_xlat53 = clamp(x_4196, vec2<f32>(0.0f, 0.0f), vec2<f32>(1.0f, 1.0f));
          let x_4200 : u32 = u_xlatu65;
          let x_4203 : vec4<f32> = x_3869.x_AdditionalLightsCookieAtlasUVRects[bitcast<i32>(x_4200)];
          let x_4205 : vec2<f32> = u_xlat53;
          let x_4207 : u32 = u_xlatu65;
          let x_4210 : vec4<f32> = x_3869.x_AdditionalLightsCookieAtlasUVRects[bitcast<i32>(x_4207)];
          let x_4212 : vec2<f32> = ((vec2<f32>(x_4203.x, x_4203.y) * x_4205) + vec2<f32>(x_4210.z, x_4210.w));
          let x_4213 : vec4<f32> = u_xlat11;
          u_xlat11 = vec4<f32>(x_4212.x, x_4212.y, x_4213.z, x_4213.w);
        }
      }
      let x_4220 : vec4<f32> = u_xlat11;
      let x_4223 : f32 = x_90.x_GlobalMipBias.x;
      let x_4224 : vec4<f32> = textureSampleBias(x_AdditionalLightsCookieAtlasTexture, sampler_AdditionalLightsCookieAtlasTexture, vec2<f32>(x_4220.x, x_4220.y), x_4223);
      u_xlat11 = x_4224;
      let x_4226 : bool = u_xlatb48.y;
      if (x_4226) {
        let x_4231 : f32 = u_xlat11.w;
        x_4227 = x_4231;
      } else {
        let x_4234 : f32 = u_xlat11.x;
        x_4227 = x_4234;
      }
      let x_4235 : f32 = x_4227;
      u_xlat71 = x_4235;
      let x_4237 : bool = u_xlatb48.x;
      if (x_4237) {
        let x_4241 : vec4<f32> = u_xlat11;
        x_4238 = vec3<f32>(x_4241.x, x_4241.y, x_4241.z);
      } else {
        let x_4244 : f32 = u_xlat71;
        x_4238 = vec3<f32>(x_4244, x_4244, x_4244);
      }
      let x_4246 : vec3<f32> = x_4238;
      let x_4247 : vec4<f32> = u_xlat11;
      u_xlat11 = vec4<f32>(x_4246.x, x_4246.y, x_4246.z, x_4247.w);
    } else {
      u_xlat11.x = 1.0f;
      u_xlat11.y = 1.0f;
      u_xlat11.z = 1.0f;
    }
    let x_4253 : vec4<f32> = u_xlat11;
    let x_4255 : u32 = u_xlatu65;
    let x_4258 : vec4<f32> = x_3760.x_AdditionalLightsColor[bitcast<i32>(x_4255)];
    let x_4260 : vec3<f32> = (vec3<f32>(x_4253.x, x_4253.y, x_4253.z) * vec3<f32>(x_4258.x, x_4258.y, x_4258.z));
    let x_4261 : vec4<f32> = u_xlat11;
    u_xlat11 = vec4<f32>(x_4260.x, x_4260.y, x_4260.z, x_4261.w);
    let x_4263 : f32 = u_xlat27;
    let x_4265 : vec4<f32> = u_xlat11;
    let x_4267 : vec3<f32> = (vec3<f32>(x_4263, x_4263, x_4263) * vec3<f32>(x_4265.x, x_4265.y, x_4265.z));
    let x_4268 : vec4<f32> = u_xlat11;
    u_xlat11 = vec4<f32>(x_4267.x, x_4267.y, x_4267.z, x_4268.w);
    let x_4270 : vec4<f32> = u_xlat3;
    let x_4272 : vec4<f32> = u_xlat10;
    u_xlat65 = dot(vec3<f32>(x_4270.x, x_4270.y, x_4270.z), vec3<f32>(x_4272.x, x_4272.y, x_4272.z));
    let x_4275 : f32 = u_xlat65;
    u_xlat65 = clamp(x_4275, 0.0f, 1.0f);
    let x_4277 : f32 = u_xlat65;
    let x_4278 : f32 = u_xlat67;
    u_xlat65 = (x_4277 * x_4278);
    let x_4280 : f32 = u_xlat65;
    let x_4282 : vec4<f32> = u_xlat11;
    let x_4284 : vec3<f32> = (vec3<f32>(x_4280, x_4280, x_4280) * vec3<f32>(x_4282.x, x_4282.y, x_4282.z));
    let x_4285 : vec4<f32> = u_xlat11;
    u_xlat11 = vec4<f32>(x_4284.x, x_4284.y, x_4284.z, x_4285.w);
    let x_4287 : vec4<f32> = u_xlat9;
    let x_4289 : f32 = u_xlat70;
    let x_4292 : vec3<f32> = u_xlat2;
    let x_4293 : vec3<f32> = ((vec3<f32>(x_4287.x, x_4287.y, x_4287.z) * vec3<f32>(x_4289, x_4289, x_4289)) + x_4292);
    let x_4294 : vec4<f32> = u_xlat9;
    u_xlat9 = vec4<f32>(x_4293.x, x_4293.y, x_4293.z, x_4294.w);
    let x_4296 : vec4<f32> = u_xlat9;
    let x_4298 : vec4<f32> = u_xlat9;
    u_xlat65 = dot(vec3<f32>(x_4296.x, x_4296.y, x_4296.z), vec3<f32>(x_4298.x, x_4298.y, x_4298.z));
    let x_4301 : f32 = u_xlat65;
    u_xlat65 = max(x_4301, 1.17549435e-37f);
    let x_4303 : f32 = u_xlat65;
    u_xlat65 = inverseSqrt(x_4303);
    let x_4305 : f32 = u_xlat65;
    let x_4307 : vec4<f32> = u_xlat9;
    let x_4309 : vec3<f32> = (vec3<f32>(x_4305, x_4305, x_4305) * vec3<f32>(x_4307.x, x_4307.y, x_4307.z));
    let x_4310 : vec4<f32> = u_xlat9;
    u_xlat9 = vec4<f32>(x_4309.x, x_4309.y, x_4309.z, x_4310.w);
    let x_4312 : vec4<f32> = u_xlat3;
    let x_4314 : vec4<f32> = u_xlat9;
    u_xlat65 = dot(vec3<f32>(x_4312.x, x_4312.y, x_4312.z), vec3<f32>(x_4314.x, x_4314.y, x_4314.z));
    let x_4317 : f32 = u_xlat65;
    u_xlat65 = clamp(x_4317, 0.0f, 1.0f);
    let x_4319 : vec4<f32> = u_xlat10;
    let x_4321 : vec4<f32> = u_xlat9;
    u_xlat67 = dot(vec3<f32>(x_4319.x, x_4319.y, x_4319.z), vec3<f32>(x_4321.x, x_4321.y, x_4321.z));
    let x_4324 : f32 = u_xlat67;
    u_xlat67 = clamp(x_4324, 0.0f, 1.0f);
    let x_4326 : f32 = u_xlat65;
    let x_4327 : f32 = u_xlat65;
    u_xlat65 = (x_4326 * x_4327);
    let x_4329 : f32 = u_xlat65;
    let x_4331 : f32 = u_xlat43.x;
    u_xlat65 = ((x_4329 * x_4331) + 1.000010014f);
    let x_4334 : f32 = u_xlat67;
    let x_4335 : f32 = u_xlat67;
    u_xlat67 = (x_4334 * x_4335);
    let x_4337 : f32 = u_xlat65;
    let x_4338 : f32 = u_xlat65;
    u_xlat65 = (x_4337 * x_4338);
    let x_4340 : f32 = u_xlat67;
    u_xlat67 = max(x_4340, 0.100000001f);
    let x_4342 : f32 = u_xlat65;
    let x_4343 : f32 = u_xlat67;
    u_xlat65 = (x_4342 * x_4343);
    let x_4346 : f32 = u_xlat5.x;
    let x_4347 : f32 = u_xlat65;
    u_xlat65 = (x_4346 * x_4347);
    let x_4349 : f32 = u_xlat66;
    let x_4350 : f32 = u_xlat65;
    u_xlat65 = (x_4349 / x_4350);
    let x_4352 : f32 = u_xlat65;
    let x_4355 : vec3<f32> = u_xlat4;
    let x_4356 : vec3<f32> = ((vec3<f32>(x_4352, x_4352, x_4352) * vec3<f32>(0.039999999f, 0.039999999f, 0.039999999f)) + x_4355);
    let x_4357 : vec4<f32> = u_xlat9;
    u_xlat9 = vec4<f32>(x_4356.x, x_4356.y, x_4356.z, x_4357.w);
    let x_4359 : vec4<f32> = u_xlat9;
    let x_4361 : vec4<f32> = u_xlat11;
    let x_4364 : vec4<f32> = u_xlat8;
    let x_4366 : vec3<f32> = ((vec3<f32>(x_4359.x, x_4359.y, x_4359.z) * vec3<f32>(x_4361.x, x_4361.y, x_4361.z)) + vec3<f32>(x_4364.x, x_4364.y, x_4364.z));
    let x_4367 : vec4<f32> = u_xlat8;
    u_xlat8 = vec4<f32>(x_4366.x, x_4366.y, x_4366.z, x_4367.w);

    continuing {
      let x_4369 : u32 = u_xlatu_loop_1;
      u_xlatu_loop_1 = (x_4369 + bitcast<u32>(1i));
    }
  }
  let x_4371 : vec3<f32> = u_xlat26;
  let x_4372 : vec4<f32> = u_xlat6;
  let x_4375 : vec4<f32> = u_xlat7;
  u_xlat2 = ((x_4371 * vec3<f32>(x_4372.x, x_4372.x, x_4372.x)) + vec3<f32>(x_4375.x, x_4375.y, x_4375.z));
  let x_4378 : vec4<f32> = u_xlat8;
  let x_4380 : vec3<f32> = u_xlat2;
  u_xlat2 = (vec3<f32>(x_4378.x, x_4378.y, x_4378.z) + x_4380);
  let x_4384 : vec4<f32> = vs_INTERP4;
  let x_4386 : vec3<f32> = u_xlat0;
  let x_4388 : vec3<f32> = u_xlat2;
  let x_4389 : vec3<f32> = ((vec3<f32>(x_4384.w, x_4384.w, x_4384.w) * x_4386) + x_4388);
  let x_4390 : vec4<f32> = SV_Target0;
  SV_Target0 = vec4<f32>(x_4389.x, x_4389.y, x_4389.z, x_4390.w);
  let x_4392 : bool = u_xlatb22;
  if (x_4392) {
    let x_4397 : f32 = u_xlat1.x;
    x_4393 = x_4397;
  } else {
    x_4393 = 1.0f;
  }
  let x_4399 : f32 = x_4393;
  SV_Target0.w = x_4399;
  return;
}

struct main_out {
  @location(0)
  SV_Target0_1 : vec4<f32>,
}

@fragment
fn main(@builtin(position) gl_FragCoord_param : vec4<f32>, @location(1) vs_INTERP1_param : vec3<f32>, @location(0) vs_INTERP0_param : vec3<f32>, @location(3) vs_INTERP3_param : vec4<f32>, @location(4) vs_INTERP4_param : vec4<f32>, @location(2) vs_INTERP2_param : vec4<f32>, @location(5) vs_INTERP5_param : vec2<f32>, @location(6) vs_INTERP9_param : vec4<f32>) -> main_out {
  gl_FragCoord = gl_FragCoord_param;
  vs_INTERP1 = vs_INTERP1_param;
  vs_INTERP0 = vs_INTERP0_param;
  vs_INTERP3 = vs_INTERP3_param;
  vs_INTERP4 = vs_INTERP4_param;
  vs_INTERP2 = vs_INTERP2_param;
  vs_INTERP5 = vs_INTERP5_param;
  vs_INTERP9 = vs_INTERP9_param;
  main_1();
  return main_out(SV_Target0);
}

