struct PGlobals {
  x_ScaledScreenParams : vec4<f32>,
  x_GlobalMipBias : vec2<f32>,
  x_AlphaToMaskAvailable : f32,
  @size(4)
  padding : u32,
  x_MainLightPosition : vec4<f32>,
  x_MainLightColor : vec4<f32>,
  x_AmbientOcclusionParam : vec4<f32>,
  x_AdditionalLightsCount : vec4<f32>,
  x_WorldSpaceCameraPos : vec3<f32>,
  @size(4)
  padding_1 : u32,
  unity_OrthoParams : vec4<f32>,
  x_ScaleBiasRt : vec4<f32>,
  unity_MatrixV : mat4x4<f32>,
}

struct UnityPerMaterial {
  Texture2D_B222E8F_TexelSize : vec4<f32>,
  Color_C30C7CA3 : vec4<f32>,
  Texture2D_D9BFD5F1_TexelSize : vec4<f32>,
}

type Arr = array<mat4x4<f32>, 5u>;

struct MainLightShadows {
  x_MainLightWorldToShadow : Arr,
  x_CascadeShadowSplitSpheres0 : vec4<f32>,
  x_CascadeShadowSplitSpheres1 : vec4<f32>,
  x_CascadeShadowSplitSpheres2 : vec4<f32>,
  x_CascadeShadowSplitSpheres3 : vec4<f32>,
  x_CascadeShadowSplitSphereRadii : vec4<f32>,
  x_MainLightShadowOffset0 : vec4<f32>,
  x_MainLightShadowOffset1 : vec4<f32>,
  x_MainLightShadowParams : vec4<f32>,
  x_MainLightShadowmapSize : vec4<f32>,
}

type Arr_1 = array<vec4<f32>, 2u>;

struct UnityPerDraw {
  unity_ObjectToWorld : mat4x4<f32>,
  unity_WorldToObject : mat4x4<f32>,
  unity_LODFade : vec4<f32>,
  unity_WorldTransformParams : vec4<f32>,
  unity_RenderingLayer : vec4<f32>,
  unity_LightData : vec4<f32>,
  unity_LightIndices : Arr_1,
  unity_ProbesOcclusion : vec4<f32>,
  unity_SpecCube0_HDR : vec4<f32>,
  unity_SpecCube1_HDR : vec4<f32>,
  unity_SpecCube0_BoxMax : vec4<f32>,
  unity_SpecCube0_BoxMin : vec4<f32>,
  unity_SpecCube0_ProbePosition : vec4<f32>,
  unity_SpecCube1_BoxMax : vec4<f32>,
  unity_SpecCube1_BoxMin : vec4<f32>,
  unity_SpecCube1_ProbePosition : vec4<f32>,
  unity_LightmapST : vec4<f32>,
  unity_DynamicLightmapST : vec4<f32>,
  unity_SHAr : vec4<f32>,
  unity_SHAg : vec4<f32>,
  unity_SHAb : vec4<f32>,
  unity_SHBr : vec4<f32>,
  unity_SHBg : vec4<f32>,
  unity_SHBb : vec4<f32>,
  unity_SHC : vec4<f32>,
  unity_RendererBounds_Min : vec4<f32>,
  unity_RendererBounds_Max : vec4<f32>,
  unity_MatrixPreviousM : mat4x4<f32>,
  unity_MatrixPreviousMI : mat4x4<f32>,
  unity_MotionVectorsParams : vec4<f32>,
  unity_SpriteColor : vec4<f32>,
  unity_SpriteProps : vec4<f32>,
}

type Arr_2 = array<vec4<f32>, 256u>;

type Arr_3 = array<vec4<f32>, 256u>;

type Arr_4 = array<vec4<f32>, 256u>;

type Arr_5 = array<vec4<f32>, 256u>;

type Arr_6 = array<vec4<f32>, 256u>;

struct strided_arr {
  @size(16)
  el : f32,
}

type Arr_7 = array<strided_arr, 256u>;

struct AdditionalLights {
  x_AdditionalLightsPosition : Arr_6,
  x_AdditionalLightsColor : Arr_6,
  x_AdditionalLightsAttenuation : Arr_6,
  x_AdditionalLightsSpotDir : Arr_6,
  x_AdditionalLightsOcclusionProbes : Arr_6,
  x_AdditionalLightsLayerMasks : Arr_7,
}

var<private> gl_FragCoord : vec4<f32>;

var<private> vs_INTERP1 : vec3<f32>;

@group(0) @binding(5) var Texture2D_B222E8F : texture_2d<f32>;

@group(0) @binding(11) var samplerTexture2D_B222E8F : sampler;

var<private> vs_INTERP3 : vec4<f32>;

@group(1) @binding(0) var<uniform> x_66 : PGlobals;

@group(1) @binding(4) var<uniform> x_78 : UnityPerMaterial;

@group(0) @binding(6) var Texture2D_D9BFD5F1 : texture_2d<f32>;

@group(0) @binding(12) var samplerTexture2D_D9BFD5F1 : sampler;

var<private> vs_INTERP4 : vec4<f32>;

var<private> vs_INTERP0 : vec3<f32>;

@group(1) @binding(3) var<uniform> x_139 : MainLightShadows;

@group(0) @binding(4) var x_MainLightShadowmapTexture : texture_depth_2d;

@group(0) @binding(10) var sampler_MainLightShadowmapTexture : sampler_comparison;

var<private> vs_INTERP2 : vec4<f32>;

@group(1) @binding(2) var<uniform> x_1592 : UnityPerDraw;

@group(0) @binding(2) var unity_LightmapInd : texture_2d<f32>;

@group(0) @binding(8) var samplerunity_Lightmap : sampler;

var<private> vs_INTERP5 : vec2<f32>;

@group(0) @binding(1) var unity_Lightmap : texture_2d<f32>;

@group(0) @binding(3) var x_ScreenSpaceOcclusionTexture : texture_2d<f32>;

@group(0) @binding(9) var sampler_ScreenSpaceOcclusionTexture : sampler;

var<private> vs_INTERP9 : vec4<f32>;

@group(0) @binding(0) var unity_SpecCube0 : texture_cube<f32>;

@group(0) @binding(7) var samplerunity_SpecCube0 : sampler;

@group(1) @binding(1) var<uniform> x_3484 : AdditionalLights;

var<private> SV_Target0 : vec4<f32>;

fn main_1() {
  var hlslcc_FragCoord : vec4<f32>;
  var u_xlat0 : vec3<f32>;
  var u_xlat1 : vec4<f32>;
  var u_xlat2 : vec3<f32>;
  var u_xlat3 : vec4<f32>;
  var u_xlat4 : vec4<f32>;
  var u_xlat63 : f32;
  var u_xlat24 : vec3<f32>;
  var u_xlatb63 : bool;
  var u_xlatb65 : bool;
  var u_xlat5 : vec4<f32>;
  var txVec0 : vec3<f32>;
  var u_xlat6 : vec4<f32>;
  var txVec1 : vec3<f32>;
  var txVec2 : vec3<f32>;
  var txVec3 : vec3<f32>;
  var u_xlat65 : f32;
  var u_xlatb67 : bool;
  var u_xlat47 : vec2<f32>;
  var u_xlat7 : vec4<f32>;
  var u_xlat49 : vec2<f32>;
  var u_xlat8 : vec4<f32>;
  var u_xlat9 : vec4<f32>;
  var u_xlat10 : vec4<f32>;
  var u_xlat11 : vec4<f32>;
  var u_xlat12 : vec4<f32>;
  var u_xlat13 : vec4<f32>;
  var u_xlat67 : f32;
  var txVec4 : vec3<f32>;
  var txVec5 : vec3<f32>;
  var u_xlat26 : f32;
  var txVec6 : vec3<f32>;
  var txVec7 : vec3<f32>;
  var txVec8 : vec3<f32>;
  var txVec9 : vec3<f32>;
  var txVec10 : vec3<f32>;
  var txVec11 : vec3<f32>;
  var txVec12 : vec3<f32>;
  var u_xlat27 : vec3<f32>;
  var u_xlat14 : vec4<f32>;
  var u_xlat15 : vec4<f32>;
  var u_xlat28 : vec2<f32>;
  var u_xlat55 : vec2<f32>;
  var u_xlat50 : vec2<f32>;
  var u_xlat16 : vec4<f32>;
  var u_xlat17 : vec4<f32>;
  var u_xlat18 : vec4<f32>;
  var txVec13 : vec3<f32>;
  var txVec14 : vec3<f32>;
  var txVec15 : vec3<f32>;
  var txVec16 : vec3<f32>;
  var txVec17 : vec3<f32>;
  var txVec18 : vec3<f32>;
  var txVec19 : vec3<f32>;
  var txVec20 : vec3<f32>;
  var txVec21 : vec3<f32>;
  var txVec22 : vec3<f32>;
  var txVec23 : vec3<f32>;
  var txVec24 : vec3<f32>;
  var txVec25 : vec3<f32>;
  var txVec26 : vec3<f32>;
  var txVec27 : vec3<f32>;
  var txVec28 : vec3<f32>;
  var txVec29 : vec3<f32>;
  var u_xlatb25 : bool;
  var u_xlatb46 : bool;
  var u_xlat25 : vec3<f32>;
  var u_xlatb1 : bool;
  var x_1505 : f32;
  var u_xlat22 : vec3<f32>;
  var u_xlat43 : f32;
  var u_xlat64 : f32;
  var u_xlatb43 : bool;
  var x_1553 : f32;
  var u_xlatb22 : vec3<bool>;
  var x_1678 : f32;
  var x_1691 : f32;
  var x_1703 : f32;
  var u_xlat68 : f32;
  var txVec30 : vec3<f32>;
  var txVec31 : vec3<f32>;
  var txVec32 : vec3<f32>;
  var txVec33 : vec3<f32>;
  var u_xlatb48 : bool;
  var u_xlat48 : vec2<f32>;
  var u_xlat51 : vec2<f32>;
  var txVec34 : vec3<f32>;
  var u_xlat69 : f32;
  var txVec35 : vec3<f32>;
  var txVec36 : vec3<f32>;
  var txVec37 : vec3<f32>;
  var txVec38 : vec3<f32>;
  var txVec39 : vec3<f32>;
  var txVec40 : vec3<f32>;
  var txVec41 : vec3<f32>;
  var txVec42 : vec3<f32>;
  var u_xlat29 : vec2<f32>;
  var u_xlat52 : vec2<f32>;
  var u_xlat19 : vec4<f32>;
  var u_xlat20 : vec4<f32>;
  var txVec43 : vec3<f32>;
  var txVec44 : vec3<f32>;
  var u_xlat71 : f32;
  var txVec45 : vec3<f32>;
  var txVec46 : vec3<f32>;
  var txVec47 : vec3<f32>;
  var txVec48 : vec3<f32>;
  var txVec49 : vec3<f32>;
  var txVec50 : vec3<f32>;
  var txVec51 : vec3<f32>;
  var txVec52 : vec3<f32>;
  var txVec53 : vec3<f32>;
  var txVec54 : vec3<f32>;
  var txVec55 : vec3<f32>;
  var txVec56 : vec3<f32>;
  var txVec57 : vec3<f32>;
  var txVec58 : vec3<f32>;
  var txVec59 : vec3<f32>;
  var u_xlatb4 : bool;
  var u_xlatu63 : u32;
  var u_xlatu_loop_1 : u32;
  var u_xlatu3 : u32;
  var u_xlati67 : i32;
  var indexable : array<vec4<u32>, 4u>;
  var u_xlati3 : i32;
  var x_3717 : f32;
  var u_xlat_precise_vec4 : vec4<f32>;
  var u_xlat_precise_ivec4 : vec4<i32>;
  var u_xlat_precise_bvec4 : vec4<bool>;
  var u_xlat_precise_uvec4 : vec4<u32>;
  let x_13 : vec4<f32> = gl_FragCoord;
  let x_14 : vec3<f32> = vec3<f32>(x_13.x, x_13.y, x_13.z);
  let x_20 : f32 = gl_FragCoord.w;
  hlslcc_FragCoord = vec4<f32>(x_14.x, x_14.y, x_14.z, (1.0f / x_20));
  let x_30 : vec3<f32> = vs_INTERP1;
  let x_31 : vec3<f32> = vs_INTERP1;
  u_xlat0.x = dot(x_30, x_31);
  let x_37 : f32 = u_xlat0.x;
  u_xlat0.x = sqrt(x_37);
  let x_41 : f32 = u_xlat0.x;
  u_xlat0.x = (1.0f / x_41);
  let x_44 : vec3<f32> = u_xlat0;
  let x_46 : vec3<f32> = vs_INTERP1;
  u_xlat0 = (vec3<f32>(x_44.x, x_44.x, x_44.x) * x_46);
  let x_61 : vec4<f32> = vs_INTERP3;
  let x_71 : f32 = x_66.x_GlobalMipBias.x;
  let x_72 : vec4<f32> = textureSampleBias(Texture2D_B222E8F, samplerTexture2D_B222E8F, vec2<f32>(x_61.x, x_61.y), x_71);
  u_xlat1 = x_72;
  let x_74 : vec4<f32> = u_xlat1;
  let x_81 : vec4<f32> = x_78.Color_C30C7CA3;
  u_xlat2 = (vec3<f32>(x_74.x, x_74.y, x_74.z) * vec3<f32>(x_81.x, x_81.y, x_81.z));
  let x_90 : vec4<f32> = vs_INTERP3;
  let x_93 : f32 = x_66.x_GlobalMipBias.x;
  let x_94 : vec4<f32> = textureSampleBias(Texture2D_D9BFD5F1, samplerTexture2D_D9BFD5F1, vec2<f32>(x_90.x, x_90.y), x_93);
  u_xlat3 = vec4<f32>(x_94.w, x_94.x, x_94.y, x_94.z);
  let x_97 : vec4<f32> = u_xlat3;
  u_xlat4 = ((vec4<f32>(x_97.y, x_97.z, x_97.w, x_97.x) * vec4<f32>(2.0f, 2.0f, 2.0f, 2.0f)) + vec4<f32>(-1.0f, -1.0f, -1.0f, -1.0f));
  let x_106 : vec4<f32> = u_xlat4;
  let x_107 : vec4<f32> = u_xlat4;
  u_xlat63 = dot(x_106, x_107);
  let x_109 : f32 = u_xlat63;
  u_xlat63 = inverseSqrt(x_109);
  let x_112 : f32 = u_xlat63;
  let x_114 : vec4<f32> = u_xlat4;
  u_xlat24 = (vec3<f32>(x_112, x_112, x_112) * vec3<f32>(x_114.x, x_114.y, x_114.z));
  let x_120 : f32 = vs_INTERP4.y;
  u_xlat63 = (x_120 * 200.0f);
  let x_123 : f32 = u_xlat63;
  u_xlat63 = min(x_123, 1.0f);
  let x_125 : f32 = u_xlat63;
  let x_127 : vec4<f32> = u_xlat1;
  let x_129 : vec3<f32> = (vec3<f32>(x_125, x_125, x_125) * vec3<f32>(x_127.x, x_127.y, x_127.z));
  let x_130 : vec4<f32> = u_xlat1;
  u_xlat1 = vec4<f32>(x_129.x, x_129.y, x_129.z, x_130.w);
  let x_133 : vec3<f32> = vs_INTERP0;
  let x_142 : vec4<f32> = x_139.x_MainLightWorldToShadow[0i][1i];
  let x_144 : vec3<f32> = (vec3<f32>(x_133.y, x_133.y, x_133.y) * vec3<f32>(x_142.x, x_142.y, x_142.z));
  let x_145 : vec4<f32> = u_xlat4;
  u_xlat4 = vec4<f32>(x_144.x, x_144.y, x_144.z, x_145.w);
  let x_148 : vec4<f32> = x_139.x_MainLightWorldToShadow[0i][0i];
  let x_150 : vec3<f32> = vs_INTERP0;
  let x_153 : vec4<f32> = u_xlat4;
  let x_155 : vec3<f32> = ((vec3<f32>(x_148.x, x_148.y, x_148.z) * vec3<f32>(x_150.x, x_150.x, x_150.x)) + vec3<f32>(x_153.x, x_153.y, x_153.z));
  let x_156 : vec4<f32> = u_xlat4;
  u_xlat4 = vec4<f32>(x_155.x, x_155.y, x_155.z, x_156.w);
  let x_160 : vec4<f32> = x_139.x_MainLightWorldToShadow[0i][2i];
  let x_162 : vec3<f32> = vs_INTERP0;
  let x_165 : vec4<f32> = u_xlat4;
  let x_167 : vec3<f32> = ((vec3<f32>(x_160.x, x_160.y, x_160.z) * vec3<f32>(x_162.z, x_162.z, x_162.z)) + vec3<f32>(x_165.x, x_165.y, x_165.z));
  let x_168 : vec4<f32> = u_xlat4;
  u_xlat4 = vec4<f32>(x_167.x, x_167.y, x_167.z, x_168.w);
  let x_170 : vec4<f32> = u_xlat4;
  let x_174 : vec4<f32> = x_139.x_MainLightWorldToShadow[0i][3i];
  let x_176 : vec3<f32> = (vec3<f32>(x_170.x, x_170.y, x_170.z) + vec3<f32>(x_174.x, x_174.y, x_174.z));
  let x_177 : vec4<f32> = u_xlat4;
  u_xlat4 = vec4<f32>(x_176.x, x_176.y, x_176.z, x_177.w);
  let x_185 : f32 = x_139.x_MainLightShadowParams.y;
  u_xlatb63 = (0.0f < x_185);
  let x_187 : bool = u_xlatb63;
  if (x_187) {
    let x_192 : f32 = x_139.x_MainLightShadowParams.y;
    u_xlatb65 = (x_192 == 1.0f);
    let x_194 : bool = u_xlatb65;
    if (x_194) {
      let x_198 : vec4<f32> = u_xlat4;
      let x_202 : vec4<f32> = x_139.x_MainLightShadowOffset0;
      u_xlat5 = (vec4<f32>(x_198.x, x_198.y, x_198.x, x_198.y) + x_202);
      let x_205 : vec4<f32> = u_xlat5;
      let x_206 : vec2<f32> = vec2<f32>(x_205.x, x_205.y);
      let x_209 : f32 = u_xlat4.z;
      txVec0 = vec3<f32>(x_206.x, x_206.y, x_209);
      let x_222 : vec3<f32> = txVec0;
      let x_224 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_222.xy, x_222.z);
      u_xlat6.x = x_224;
      let x_227 : vec4<f32> = u_xlat5;
      let x_228 : vec2<f32> = vec2<f32>(x_227.z, x_227.w);
      let x_230 : f32 = u_xlat4.z;
      txVec1 = vec3<f32>(x_228.x, x_228.y, x_230);
      let x_237 : vec3<f32> = txVec1;
      let x_239 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_237.xy, x_237.z);
      u_xlat6.y = x_239;
      let x_241 : vec4<f32> = u_xlat4;
      let x_245 : vec4<f32> = x_139.x_MainLightShadowOffset1;
      u_xlat5 = (vec4<f32>(x_241.x, x_241.y, x_241.x, x_241.y) + x_245);
      let x_248 : vec4<f32> = u_xlat5;
      let x_249 : vec2<f32> = vec2<f32>(x_248.x, x_248.y);
      let x_251 : f32 = u_xlat4.z;
      txVec2 = vec3<f32>(x_249.x, x_249.y, x_251);
      let x_258 : vec3<f32> = txVec2;
      let x_260 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_258.xy, x_258.z);
      u_xlat6.z = x_260;
      let x_263 : vec4<f32> = u_xlat5;
      let x_264 : vec2<f32> = vec2<f32>(x_263.z, x_263.w);
      let x_266 : f32 = u_xlat4.z;
      txVec3 = vec3<f32>(x_264.x, x_264.y, x_266);
      let x_273 : vec3<f32> = txVec3;
      let x_275 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_273.xy, x_273.z);
      u_xlat6.w = x_275;
      let x_278 : vec4<f32> = u_xlat6;
      u_xlat65 = dot(x_278, vec4<f32>(0.25f, 0.25f, 0.25f, 0.25f));
    } else {
      let x_285 : f32 = x_139.x_MainLightShadowParams.y;
      u_xlatb67 = (x_285 == 2.0f);
      let x_287 : bool = u_xlatb67;
      if (x_287) {
        let x_290 : vec4<f32> = u_xlat4;
        let x_294 : vec4<f32> = x_139.x_MainLightShadowmapSize;
        let x_299 : vec2<f32> = ((vec2<f32>(x_290.x, x_290.y) * vec2<f32>(x_294.z, x_294.w)) + vec2<f32>(0.5f, 0.5f));
        let x_300 : vec4<f32> = u_xlat5;
        u_xlat5 = vec4<f32>(x_299.x, x_299.y, x_300.z, x_300.w);
        let x_302 : vec4<f32> = u_xlat5;
        let x_304 : vec2<f32> = floor(vec2<f32>(x_302.x, x_302.y));
        let x_305 : vec4<f32> = u_xlat5;
        u_xlat5 = vec4<f32>(x_304.x, x_304.y, x_305.z, x_305.w);
        let x_309 : vec4<f32> = u_xlat4;
        let x_312 : vec4<f32> = x_139.x_MainLightShadowmapSize;
        let x_315 : vec4<f32> = u_xlat5;
        u_xlat47 = ((vec2<f32>(x_309.x, x_309.y) * vec2<f32>(x_312.z, x_312.w)) + -(vec2<f32>(x_315.x, x_315.y)));
        let x_319 : vec2<f32> = u_xlat47;
        u_xlat6 = (vec4<f32>(x_319.x, x_319.x, x_319.y, x_319.y) + vec4<f32>(0.5f, 1.0f, 0.5f, 1.0f));
        let x_324 : vec4<f32> = u_xlat6;
        let x_326 : vec4<f32> = u_xlat6;
        u_xlat7 = (vec4<f32>(x_324.x, x_324.x, x_324.z, x_324.z) * vec4<f32>(x_326.x, x_326.x, x_326.z, x_326.z));
        let x_329 : vec4<f32> = u_xlat7;
        let x_333 : vec2<f32> = (vec2<f32>(x_329.y, x_329.w) * vec2<f32>(0.079999998f, 0.079999998f));
        let x_334 : vec4<f32> = u_xlat6;
        u_xlat6 = vec4<f32>(x_333.x, x_334.y, x_333.y, x_334.w);
        let x_336 : vec4<f32> = u_xlat7;
        let x_339 : vec2<f32> = u_xlat47;
        let x_341 : vec2<f32> = ((vec2<f32>(x_336.x, x_336.z) * vec2<f32>(0.5f, 0.5f)) + -(x_339));
        let x_342 : vec4<f32> = u_xlat7;
        u_xlat7 = vec4<f32>(x_341.x, x_341.y, x_342.z, x_342.w);
        let x_345 : vec2<f32> = u_xlat47;
        u_xlat49 = (-(x_345) + vec2<f32>(1.0f, 1.0f));
        let x_350 : vec2<f32> = u_xlat47;
        let x_352 : vec2<f32> = min(x_350, vec2<f32>(0.0f, 0.0f));
        let x_353 : vec4<f32> = u_xlat8;
        u_xlat8 = vec4<f32>(x_352.x, x_352.y, x_353.z, x_353.w);
        let x_355 : vec4<f32> = u_xlat8;
        let x_358 : vec4<f32> = u_xlat8;
        let x_361 : vec2<f32> = u_xlat49;
        let x_362 : vec2<f32> = ((-(vec2<f32>(x_355.x, x_355.y)) * vec2<f32>(x_358.x, x_358.y)) + x_361);
        let x_363 : vec4<f32> = u_xlat8;
        u_xlat8 = vec4<f32>(x_362.x, x_362.y, x_363.z, x_363.w);
        let x_365 : vec2<f32> = u_xlat47;
        u_xlat47 = max(x_365, vec2<f32>(0.0f, 0.0f));
        let x_367 : vec2<f32> = u_xlat47;
        let x_369 : vec2<f32> = u_xlat47;
        let x_371 : vec4<f32> = u_xlat6;
        u_xlat47 = ((-(x_367) * x_369) + vec2<f32>(x_371.y, x_371.w));
        let x_374 : vec4<f32> = u_xlat8;
        let x_376 : vec2<f32> = (vec2<f32>(x_374.x, x_374.y) + vec2<f32>(1.0f, 1.0f));
        let x_377 : vec4<f32> = u_xlat8;
        u_xlat8 = vec4<f32>(x_376.x, x_376.y, x_377.z, x_377.w);
        let x_379 : vec2<f32> = u_xlat47;
        u_xlat47 = (x_379 + vec2<f32>(1.0f, 1.0f));
        let x_382 : vec4<f32> = u_xlat7;
        let x_386 : vec2<f32> = (vec2<f32>(x_382.x, x_382.y) * vec2<f32>(0.159999996f, 0.159999996f));
        let x_387 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_386.x, x_386.y, x_387.z, x_387.w);
        let x_389 : vec2<f32> = u_xlat49;
        let x_390 : vec2<f32> = (x_389 * vec2<f32>(0.159999996f, 0.159999996f));
        let x_391 : vec4<f32> = u_xlat7;
        u_xlat7 = vec4<f32>(x_390.x, x_390.y, x_391.z, x_391.w);
        let x_393 : vec4<f32> = u_xlat8;
        let x_395 : vec2<f32> = (vec2<f32>(x_393.x, x_393.y) * vec2<f32>(0.159999996f, 0.159999996f));
        let x_396 : vec4<f32> = u_xlat8;
        u_xlat8 = vec4<f32>(x_395.x, x_395.y, x_396.z, x_396.w);
        let x_399 : vec2<f32> = u_xlat47;
        let x_400 : vec2<f32> = (x_399 * vec2<f32>(0.159999996f, 0.159999996f));
        let x_401 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_400.x, x_400.y, x_401.z, x_401.w);
        let x_403 : vec4<f32> = u_xlat6;
        u_xlat47 = (vec2<f32>(x_403.y, x_403.w) * vec2<f32>(0.159999996f, 0.159999996f));
        let x_407 : f32 = u_xlat8.x;
        u_xlat9.z = x_407;
        let x_410 : f32 = u_xlat47.x;
        u_xlat9.w = x_410;
        let x_413 : f32 = u_xlat10.x;
        u_xlat7.z = x_413;
        let x_416 : f32 = u_xlat6.x;
        u_xlat7.w = x_416;
        let x_419 : vec4<f32> = u_xlat7;
        let x_421 : vec4<f32> = u_xlat9;
        u_xlat11 = (vec4<f32>(x_419.z, x_419.w, x_419.x, x_419.z) + vec4<f32>(x_421.z, x_421.w, x_421.x, x_421.z));
        let x_425 : f32 = u_xlat9.y;
        u_xlat8.z = x_425;
        let x_428 : f32 = u_xlat47.y;
        u_xlat8.w = x_428;
        let x_431 : f32 = u_xlat7.y;
        u_xlat10.z = x_431;
        let x_434 : f32 = u_xlat6.z;
        u_xlat10.w = x_434;
        let x_436 : vec4<f32> = u_xlat8;
        let x_438 : vec4<f32> = u_xlat10;
        let x_440 : vec3<f32> = (vec3<f32>(x_436.z, x_436.y, x_436.w) + vec3<f32>(x_438.z, x_438.y, x_438.w));
        let x_441 : vec4<f32> = u_xlat6;
        u_xlat6 = vec4<f32>(x_440.x, x_440.y, x_440.z, x_441.w);
        let x_443 : vec4<f32> = u_xlat7;
        let x_445 : vec4<f32> = u_xlat11;
        let x_447 : vec3<f32> = (vec3<f32>(x_443.x, x_443.z, x_443.w) / vec3<f32>(x_445.z, x_445.w, x_445.y));
        let x_448 : vec4<f32> = u_xlat7;
        u_xlat7 = vec4<f32>(x_447.x, x_447.y, x_447.z, x_448.w);
        let x_450 : vec4<f32> = u_xlat7;
        let x_456 : vec3<f32> = (vec3<f32>(x_450.x, x_450.y, x_450.z) + vec3<f32>(-2.5f, -0.5f, 1.5f));
        let x_457 : vec4<f32> = u_xlat7;
        u_xlat7 = vec4<f32>(x_456.x, x_456.y, x_456.z, x_457.w);
        let x_459 : vec4<f32> = u_xlat10;
        let x_461 : vec4<f32> = u_xlat6;
        let x_463 : vec3<f32> = (vec3<f32>(x_459.z, x_459.y, x_459.w) / vec3<f32>(x_461.x, x_461.y, x_461.z));
        let x_464 : vec4<f32> = u_xlat8;
        u_xlat8 = vec4<f32>(x_463.x, x_463.y, x_463.z, x_464.w);
        let x_466 : vec4<f32> = u_xlat8;
        let x_468 : vec3<f32> = (vec3<f32>(x_466.x, x_466.y, x_466.z) + vec3<f32>(-2.5f, -0.5f, 1.5f));
        let x_469 : vec4<f32> = u_xlat8;
        u_xlat8 = vec4<f32>(x_468.x, x_468.y, x_468.z, x_469.w);
        let x_471 : vec4<f32> = u_xlat7;
        let x_474 : vec4<f32> = x_139.x_MainLightShadowmapSize;
        let x_476 : vec3<f32> = (vec3<f32>(x_471.y, x_471.x, x_471.z) * vec3<f32>(x_474.x, x_474.x, x_474.x));
        let x_477 : vec4<f32> = u_xlat7;
        u_xlat7 = vec4<f32>(x_476.x, x_476.y, x_476.z, x_477.w);
        let x_479 : vec4<f32> = u_xlat8;
        let x_482 : vec4<f32> = x_139.x_MainLightShadowmapSize;
        let x_484 : vec3<f32> = (vec3<f32>(x_479.x, x_479.y, x_479.z) * vec3<f32>(x_482.y, x_482.y, x_482.y));
        let x_485 : vec4<f32> = u_xlat8;
        u_xlat8 = vec4<f32>(x_484.x, x_484.y, x_484.z, x_485.w);
        let x_488 : f32 = u_xlat8.x;
        u_xlat7.w = x_488;
        let x_490 : vec4<f32> = u_xlat5;
        let x_493 : vec4<f32> = x_139.x_MainLightShadowmapSize;
        let x_496 : vec4<f32> = u_xlat7;
        u_xlat9 = ((vec4<f32>(x_490.x, x_490.y, x_490.x, x_490.y) * vec4<f32>(x_493.x, x_493.y, x_493.x, x_493.y)) + vec4<f32>(x_496.y, x_496.w, x_496.x, x_496.w));
        let x_499 : vec4<f32> = u_xlat5;
        let x_502 : vec4<f32> = x_139.x_MainLightShadowmapSize;
        let x_505 : vec4<f32> = u_xlat7;
        u_xlat47 = ((vec2<f32>(x_499.x, x_499.y) * vec2<f32>(x_502.x, x_502.y)) + vec2<f32>(x_505.z, x_505.w));
        let x_509 : f32 = u_xlat7.y;
        u_xlat8.w = x_509;
        let x_511 : vec4<f32> = u_xlat8;
        let x_512 : vec2<f32> = vec2<f32>(x_511.y, x_511.z);
        let x_513 : vec4<f32> = u_xlat7;
        u_xlat7 = vec4<f32>(x_513.x, x_512.x, x_513.z, x_512.y);
        let x_515 : vec4<f32> = u_xlat5;
        let x_518 : vec4<f32> = x_139.x_MainLightShadowmapSize;
        let x_521 : vec4<f32> = u_xlat7;
        u_xlat10 = ((vec4<f32>(x_515.x, x_515.y, x_515.x, x_515.y) * vec4<f32>(x_518.x, x_518.y, x_518.x, x_518.y)) + vec4<f32>(x_521.x, x_521.y, x_521.z, x_521.y));
        let x_524 : vec4<f32> = u_xlat5;
        let x_527 : vec4<f32> = x_139.x_MainLightShadowmapSize;
        let x_530 : vec4<f32> = u_xlat8;
        u_xlat8 = ((vec4<f32>(x_524.x, x_524.y, x_524.x, x_524.y) * vec4<f32>(x_527.x, x_527.y, x_527.x, x_527.y)) + vec4<f32>(x_530.w, x_530.y, x_530.w, x_530.z));
        let x_533 : vec4<f32> = u_xlat5;
        let x_536 : vec4<f32> = x_139.x_MainLightShadowmapSize;
        let x_539 : vec4<f32> = u_xlat7;
        u_xlat7 = ((vec4<f32>(x_533.x, x_533.y, x_533.x, x_533.y) * vec4<f32>(x_536.x, x_536.y, x_536.x, x_536.y)) + vec4<f32>(x_539.x, x_539.w, x_539.z, x_539.w));
        let x_543 : vec4<f32> = u_xlat6;
        let x_545 : vec4<f32> = u_xlat11;
        u_xlat12 = (vec4<f32>(x_543.x, x_543.x, x_543.x, x_543.y) * vec4<f32>(x_545.z, x_545.w, x_545.y, x_545.z));
        let x_549 : vec4<f32> = u_xlat6;
        let x_551 : vec4<f32> = u_xlat11;
        u_xlat13 = (vec4<f32>(x_549.y, x_549.y, x_549.z, x_549.z) * x_551);
        let x_555 : f32 = u_xlat6.z;
        let x_557 : f32 = u_xlat11.y;
        u_xlat67 = (x_555 * x_557);
        let x_560 : vec4<f32> = u_xlat9;
        let x_561 : vec2<f32> = vec2<f32>(x_560.x, x_560.y);
        let x_563 : f32 = u_xlat4.z;
        txVec4 = vec3<f32>(x_561.x, x_561.y, x_563);
        let x_570 : vec3<f32> = txVec4;
        let x_572 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_570.xy, x_570.z);
        u_xlat5.x = x_572;
        let x_575 : vec4<f32> = u_xlat9;
        let x_576 : vec2<f32> = vec2<f32>(x_575.z, x_575.w);
        let x_578 : f32 = u_xlat4.z;
        txVec5 = vec3<f32>(x_576.x, x_576.y, x_578);
        let x_586 : vec3<f32> = txVec5;
        let x_588 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_586.xy, x_586.z);
        u_xlat26 = x_588;
        let x_589 : f32 = u_xlat26;
        let x_591 : f32 = u_xlat12.y;
        u_xlat26 = (x_589 * x_591);
        let x_594 : f32 = u_xlat12.x;
        let x_596 : f32 = u_xlat5.x;
        let x_598 : f32 = u_xlat26;
        u_xlat5.x = ((x_594 * x_596) + x_598);
        let x_602 : vec2<f32> = u_xlat47;
        let x_604 : f32 = u_xlat4.z;
        txVec6 = vec3<f32>(x_602.x, x_602.y, x_604);
        let x_611 : vec3<f32> = txVec6;
        let x_613 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_611.xy, x_611.z);
        u_xlat26 = x_613;
        let x_615 : f32 = u_xlat12.z;
        let x_616 : f32 = u_xlat26;
        let x_619 : f32 = u_xlat5.x;
        u_xlat5.x = ((x_615 * x_616) + x_619);
        let x_623 : vec4<f32> = u_xlat8;
        let x_624 : vec2<f32> = vec2<f32>(x_623.x, x_623.y);
        let x_626 : f32 = u_xlat4.z;
        txVec7 = vec3<f32>(x_624.x, x_624.y, x_626);
        let x_633 : vec3<f32> = txVec7;
        let x_635 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_633.xy, x_633.z);
        u_xlat26 = x_635;
        let x_637 : f32 = u_xlat12.w;
        let x_638 : f32 = u_xlat26;
        let x_641 : f32 = u_xlat5.x;
        u_xlat5.x = ((x_637 * x_638) + x_641);
        let x_645 : vec4<f32> = u_xlat10;
        let x_646 : vec2<f32> = vec2<f32>(x_645.x, x_645.y);
        let x_648 : f32 = u_xlat4.z;
        txVec8 = vec3<f32>(x_646.x, x_646.y, x_648);
        let x_655 : vec3<f32> = txVec8;
        let x_657 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_655.xy, x_655.z);
        u_xlat26 = x_657;
        let x_659 : f32 = u_xlat13.x;
        let x_660 : f32 = u_xlat26;
        let x_663 : f32 = u_xlat5.x;
        u_xlat5.x = ((x_659 * x_660) + x_663);
        let x_667 : vec4<f32> = u_xlat10;
        let x_668 : vec2<f32> = vec2<f32>(x_667.z, x_667.w);
        let x_670 : f32 = u_xlat4.z;
        txVec9 = vec3<f32>(x_668.x, x_668.y, x_670);
        let x_677 : vec3<f32> = txVec9;
        let x_679 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_677.xy, x_677.z);
        u_xlat26 = x_679;
        let x_681 : f32 = u_xlat13.y;
        let x_682 : f32 = u_xlat26;
        let x_685 : f32 = u_xlat5.x;
        u_xlat5.x = ((x_681 * x_682) + x_685);
        let x_689 : vec4<f32> = u_xlat8;
        let x_690 : vec2<f32> = vec2<f32>(x_689.z, x_689.w);
        let x_692 : f32 = u_xlat4.z;
        txVec10 = vec3<f32>(x_690.x, x_690.y, x_692);
        let x_699 : vec3<f32> = txVec10;
        let x_701 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_699.xy, x_699.z);
        u_xlat26 = x_701;
        let x_703 : f32 = u_xlat13.z;
        let x_704 : f32 = u_xlat26;
        let x_707 : f32 = u_xlat5.x;
        u_xlat5.x = ((x_703 * x_704) + x_707);
        let x_711 : vec4<f32> = u_xlat7;
        let x_712 : vec2<f32> = vec2<f32>(x_711.x, x_711.y);
        let x_714 : f32 = u_xlat4.z;
        txVec11 = vec3<f32>(x_712.x, x_712.y, x_714);
        let x_721 : vec3<f32> = txVec11;
        let x_723 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_721.xy, x_721.z);
        u_xlat26 = x_723;
        let x_725 : f32 = u_xlat13.w;
        let x_726 : f32 = u_xlat26;
        let x_729 : f32 = u_xlat5.x;
        u_xlat5.x = ((x_725 * x_726) + x_729);
        let x_733 : vec4<f32> = u_xlat7;
        let x_734 : vec2<f32> = vec2<f32>(x_733.z, x_733.w);
        let x_736 : f32 = u_xlat4.z;
        txVec12 = vec3<f32>(x_734.x, x_734.y, x_736);
        let x_743 : vec3<f32> = txVec12;
        let x_745 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_743.xy, x_743.z);
        u_xlat26 = x_745;
        let x_746 : f32 = u_xlat67;
        let x_747 : f32 = u_xlat26;
        let x_750 : f32 = u_xlat5.x;
        u_xlat65 = ((x_746 * x_747) + x_750);
      } else {
        let x_753 : vec4<f32> = u_xlat4;
        let x_756 : vec4<f32> = x_139.x_MainLightShadowmapSize;
        let x_759 : vec2<f32> = ((vec2<f32>(x_753.x, x_753.y) * vec2<f32>(x_756.z, x_756.w)) + vec2<f32>(0.5f, 0.5f));
        let x_760 : vec4<f32> = u_xlat5;
        u_xlat5 = vec4<f32>(x_759.x, x_759.y, x_760.z, x_760.w);
        let x_762 : vec4<f32> = u_xlat5;
        let x_764 : vec2<f32> = floor(vec2<f32>(x_762.x, x_762.y));
        let x_765 : vec4<f32> = u_xlat5;
        u_xlat5 = vec4<f32>(x_764.x, x_764.y, x_765.z, x_765.w);
        let x_767 : vec4<f32> = u_xlat4;
        let x_770 : vec4<f32> = x_139.x_MainLightShadowmapSize;
        let x_773 : vec4<f32> = u_xlat5;
        u_xlat47 = ((vec2<f32>(x_767.x, x_767.y) * vec2<f32>(x_770.z, x_770.w)) + -(vec2<f32>(x_773.x, x_773.y)));
        let x_777 : vec2<f32> = u_xlat47;
        u_xlat6 = (vec4<f32>(x_777.x, x_777.x, x_777.y, x_777.y) + vec4<f32>(0.5f, 1.0f, 0.5f, 1.0f));
        let x_780 : vec4<f32> = u_xlat6;
        let x_782 : vec4<f32> = u_xlat6;
        u_xlat7 = (vec4<f32>(x_780.x, x_780.x, x_780.z, x_780.z) * vec4<f32>(x_782.x, x_782.x, x_782.z, x_782.z));
        let x_785 : vec4<f32> = u_xlat7;
        let x_789 : vec2<f32> = (vec2<f32>(x_785.y, x_785.w) * vec2<f32>(0.040816002f, 0.040816002f));
        let x_790 : vec4<f32> = u_xlat8;
        u_xlat8 = vec4<f32>(x_790.x, x_789.x, x_790.z, x_789.y);
        let x_792 : vec4<f32> = u_xlat7;
        let x_795 : vec2<f32> = u_xlat47;
        let x_797 : vec2<f32> = ((vec2<f32>(x_792.x, x_792.z) * vec2<f32>(0.5f, 0.5f)) + -(x_795));
        let x_798 : vec4<f32> = u_xlat6;
        u_xlat6 = vec4<f32>(x_797.x, x_798.y, x_797.y, x_798.w);
        let x_800 : vec2<f32> = u_xlat47;
        let x_802 : vec2<f32> = (-(x_800) + vec2<f32>(1.0f, 1.0f));
        let x_803 : vec4<f32> = u_xlat7;
        u_xlat7 = vec4<f32>(x_802.x, x_802.y, x_803.z, x_803.w);
        let x_805 : vec2<f32> = u_xlat47;
        u_xlat49 = min(x_805, vec2<f32>(0.0f, 0.0f));
        let x_807 : vec2<f32> = u_xlat49;
        let x_809 : vec2<f32> = u_xlat49;
        let x_811 : vec4<f32> = u_xlat7;
        let x_813 : vec2<f32> = ((-(x_807) * x_809) + vec2<f32>(x_811.x, x_811.y));
        let x_814 : vec4<f32> = u_xlat7;
        u_xlat7 = vec4<f32>(x_813.x, x_813.y, x_814.z, x_814.w);
        let x_816 : vec2<f32> = u_xlat47;
        u_xlat49 = max(x_816, vec2<f32>(0.0f, 0.0f));
        let x_819 : vec2<f32> = u_xlat49;
        let x_821 : vec2<f32> = u_xlat49;
        let x_823 : vec4<f32> = u_xlat6;
        let x_825 : vec2<f32> = ((-(x_819) * x_821) + vec2<f32>(x_823.y, x_823.w));
        let x_826 : vec3<f32> = u_xlat27;
        u_xlat27 = vec3<f32>(x_825.x, x_826.y, x_825.y);
        let x_828 : vec4<f32> = u_xlat7;
        let x_831 : vec2<f32> = (vec2<f32>(x_828.x, x_828.y) + vec2<f32>(2.0f, 2.0f));
        let x_832 : vec4<f32> = u_xlat7;
        u_xlat7 = vec4<f32>(x_831.x, x_831.y, x_832.z, x_832.w);
        let x_834 : vec3<f32> = u_xlat27;
        let x_836 : vec2<f32> = (vec2<f32>(x_834.x, x_834.z) + vec2<f32>(2.0f, 2.0f));
        let x_837 : vec4<f32> = u_xlat6;
        u_xlat6 = vec4<f32>(x_837.x, x_836.x, x_837.z, x_836.y);
        let x_840 : f32 = u_xlat6.y;
        u_xlat9.z = (x_840 * 0.081632003f);
        let x_844 : vec4<f32> = u_xlat6;
        let x_847 : vec3<f32> = (vec3<f32>(x_844.z, x_844.x, x_844.w) * vec3<f32>(0.081632003f, 0.081632003f, 0.081632003f));
        let x_848 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_847.x, x_847.y, x_847.z, x_848.w);
        let x_850 : vec4<f32> = u_xlat7;
        let x_853 : vec2<f32> = (vec2<f32>(x_850.x, x_850.y) * vec2<f32>(0.081632003f, 0.081632003f));
        let x_854 : vec4<f32> = u_xlat6;
        u_xlat6 = vec4<f32>(x_853.x, x_853.y, x_854.z, x_854.w);
        let x_857 : f32 = u_xlat10.y;
        u_xlat9.x = x_857;
        let x_859 : vec2<f32> = u_xlat47;
        let x_866 : vec2<f32> = ((vec2<f32>(x_859.x, x_859.x) * vec2<f32>(-0.081632003f, 0.081632003f)) + vec2<f32>(0.163264006f, 0.081632003f));
        let x_867 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_867.x, x_866.x, x_867.z, x_866.y);
        let x_869 : vec2<f32> = u_xlat47;
        let x_873 : vec2<f32> = ((vec2<f32>(x_869.x, x_869.x) * vec2<f32>(-0.081632003f, 0.081632003f)) + vec2<f32>(0.081632003f, 0.163264006f));
        let x_874 : vec4<f32> = u_xlat7;
        u_xlat7 = vec4<f32>(x_873.x, x_874.y, x_873.y, x_874.w);
        let x_877 : f32 = u_xlat6.x;
        u_xlat7.y = x_877;
        let x_880 : f32 = u_xlat8.y;
        u_xlat7.w = x_880;
        let x_882 : vec4<f32> = u_xlat7;
        let x_883 : vec4<f32> = u_xlat9;
        u_xlat9 = (x_882 + x_883);
        let x_885 : vec2<f32> = u_xlat47;
        let x_888 : vec2<f32> = ((vec2<f32>(x_885.y, x_885.y) * vec2<f32>(-0.081632003f, 0.081632003f)) + vec2<f32>(0.163264006f, 0.081632003f));
        let x_889 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_889.x, x_888.x, x_889.z, x_888.y);
        let x_891 : vec2<f32> = u_xlat47;
        let x_894 : vec2<f32> = ((vec2<f32>(x_891.y, x_891.y) * vec2<f32>(-0.081632003f, 0.081632003f)) + vec2<f32>(0.081632003f, 0.163264006f));
        let x_895 : vec4<f32> = u_xlat8;
        u_xlat8 = vec4<f32>(x_894.x, x_895.y, x_894.y, x_895.w);
        let x_898 : f32 = u_xlat6.y;
        u_xlat8.y = x_898;
        let x_900 : vec4<f32> = u_xlat8;
        let x_901 : vec4<f32> = u_xlat10;
        u_xlat6 = (x_900 + x_901);
        let x_903 : vec4<f32> = u_xlat7;
        let x_904 : vec4<f32> = u_xlat9;
        u_xlat7 = (x_903 / x_904);
        let x_906 : vec4<f32> = u_xlat7;
        u_xlat7 = (x_906 + vec4<f32>(-3.5f, -1.5f, 0.5f, 2.5f));
        let x_912 : vec4<f32> = u_xlat8;
        let x_913 : vec4<f32> = u_xlat6;
        u_xlat8 = (x_912 / x_913);
        let x_915 : vec4<f32> = u_xlat8;
        u_xlat8 = (x_915 + vec4<f32>(-3.5f, -1.5f, 0.5f, 2.5f));
        let x_917 : vec4<f32> = u_xlat7;
        let x_920 : vec4<f32> = x_139.x_MainLightShadowmapSize;
        u_xlat7 = (vec4<f32>(x_917.w, x_917.x, x_917.y, x_917.z) * vec4<f32>(x_920.x, x_920.x, x_920.x, x_920.x));
        let x_923 : vec4<f32> = u_xlat8;
        let x_926 : vec4<f32> = x_139.x_MainLightShadowmapSize;
        u_xlat8 = (vec4<f32>(x_923.x, x_923.w, x_923.y, x_923.z) * vec4<f32>(x_926.y, x_926.y, x_926.y, x_926.y));
        let x_929 : vec4<f32> = u_xlat7;
        let x_930 : vec3<f32> = vec3<f32>(x_929.y, x_929.z, x_929.w);
        let x_931 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_930.x, x_931.y, x_930.y, x_930.z);
        let x_934 : f32 = u_xlat8.x;
        u_xlat10.y = x_934;
        let x_936 : vec4<f32> = u_xlat5;
        let x_939 : vec4<f32> = x_139.x_MainLightShadowmapSize;
        let x_942 : vec4<f32> = u_xlat10;
        u_xlat11 = ((vec4<f32>(x_936.x, x_936.y, x_936.x, x_936.y) * vec4<f32>(x_939.x, x_939.y, x_939.x, x_939.y)) + vec4<f32>(x_942.x, x_942.y, x_942.z, x_942.y));
        let x_945 : vec4<f32> = u_xlat5;
        let x_948 : vec4<f32> = x_139.x_MainLightShadowmapSize;
        let x_951 : vec4<f32> = u_xlat10;
        u_xlat47 = ((vec2<f32>(x_945.x, x_945.y) * vec2<f32>(x_948.x, x_948.y)) + vec2<f32>(x_951.w, x_951.y));
        let x_955 : f32 = u_xlat10.y;
        u_xlat7.y = x_955;
        let x_958 : f32 = u_xlat8.z;
        u_xlat10.y = x_958;
        let x_960 : vec4<f32> = u_xlat5;
        let x_963 : vec4<f32> = x_139.x_MainLightShadowmapSize;
        let x_966 : vec4<f32> = u_xlat10;
        u_xlat12 = ((vec4<f32>(x_960.x, x_960.y, x_960.x, x_960.y) * vec4<f32>(x_963.x, x_963.y, x_963.x, x_963.y)) + vec4<f32>(x_966.x, x_966.y, x_966.z, x_966.y));
        let x_969 : vec4<f32> = u_xlat5;
        let x_972 : vec4<f32> = x_139.x_MainLightShadowmapSize;
        let x_975 : vec4<f32> = u_xlat10;
        let x_977 : vec2<f32> = ((vec2<f32>(x_969.x, x_969.y) * vec2<f32>(x_972.x, x_972.y)) + vec2<f32>(x_975.w, x_975.y));
        let x_978 : vec4<f32> = u_xlat13;
        u_xlat13 = vec4<f32>(x_977.x, x_977.y, x_978.z, x_978.w);
        let x_981 : f32 = u_xlat10.y;
        u_xlat7.z = x_981;
        let x_984 : vec4<f32> = u_xlat5;
        let x_987 : vec4<f32> = x_139.x_MainLightShadowmapSize;
        let x_990 : vec4<f32> = u_xlat7;
        u_xlat14 = ((vec4<f32>(x_984.x, x_984.y, x_984.x, x_984.y) * vec4<f32>(x_987.x, x_987.y, x_987.x, x_987.y)) + vec4<f32>(x_990.x, x_990.y, x_990.x, x_990.z));
        let x_994 : f32 = u_xlat8.w;
        u_xlat10.y = x_994;
        let x_997 : vec4<f32> = u_xlat5;
        let x_1000 : vec4<f32> = x_139.x_MainLightShadowmapSize;
        let x_1003 : vec4<f32> = u_xlat10;
        u_xlat15 = ((vec4<f32>(x_997.x, x_997.y, x_997.x, x_997.y) * vec4<f32>(x_1000.x, x_1000.y, x_1000.x, x_1000.y)) + vec4<f32>(x_1003.x, x_1003.y, x_1003.z, x_1003.y));
        let x_1007 : vec4<f32> = u_xlat5;
        let x_1010 : vec4<f32> = x_139.x_MainLightShadowmapSize;
        let x_1013 : vec4<f32> = u_xlat10;
        u_xlat28 = ((vec2<f32>(x_1007.x, x_1007.y) * vec2<f32>(x_1010.x, x_1010.y)) + vec2<f32>(x_1013.w, x_1013.y));
        let x_1017 : f32 = u_xlat10.y;
        u_xlat7.w = x_1017;
        let x_1020 : vec4<f32> = u_xlat5;
        let x_1023 : vec4<f32> = x_139.x_MainLightShadowmapSize;
        let x_1026 : vec4<f32> = u_xlat7;
        u_xlat55 = ((vec2<f32>(x_1020.x, x_1020.y) * vec2<f32>(x_1023.x, x_1023.y)) + vec2<f32>(x_1026.x, x_1026.w));
        let x_1029 : vec4<f32> = u_xlat10;
        let x_1030 : vec3<f32> = vec3<f32>(x_1029.x, x_1029.z, x_1029.w);
        let x_1031 : vec4<f32> = u_xlat8;
        u_xlat8 = vec4<f32>(x_1030.x, x_1031.y, x_1030.y, x_1030.z);
        let x_1033 : vec4<f32> = u_xlat5;
        let x_1036 : vec4<f32> = x_139.x_MainLightShadowmapSize;
        let x_1039 : vec4<f32> = u_xlat8;
        u_xlat10 = ((vec4<f32>(x_1033.x, x_1033.y, x_1033.x, x_1033.y) * vec4<f32>(x_1036.x, x_1036.y, x_1036.x, x_1036.y)) + vec4<f32>(x_1039.x, x_1039.y, x_1039.z, x_1039.y));
        let x_1043 : vec4<f32> = u_xlat5;
        let x_1046 : vec4<f32> = x_139.x_MainLightShadowmapSize;
        let x_1049 : vec4<f32> = u_xlat8;
        u_xlat50 = ((vec2<f32>(x_1043.x, x_1043.y) * vec2<f32>(x_1046.x, x_1046.y)) + vec2<f32>(x_1049.w, x_1049.y));
        let x_1053 : f32 = u_xlat7.x;
        u_xlat8.x = x_1053;
        let x_1055 : vec4<f32> = u_xlat5;
        let x_1058 : vec4<f32> = x_139.x_MainLightShadowmapSize;
        let x_1061 : vec4<f32> = u_xlat8;
        let x_1063 : vec2<f32> = ((vec2<f32>(x_1055.x, x_1055.y) * vec2<f32>(x_1058.x, x_1058.y)) + vec2<f32>(x_1061.x, x_1061.y));
        let x_1064 : vec4<f32> = u_xlat5;
        u_xlat5 = vec4<f32>(x_1063.x, x_1063.y, x_1064.z, x_1064.w);
        let x_1067 : vec4<f32> = u_xlat6;
        let x_1069 : vec4<f32> = u_xlat9;
        u_xlat16 = (vec4<f32>(x_1067.x, x_1067.x, x_1067.x, x_1067.x) * x_1069);
        let x_1072 : vec4<f32> = u_xlat6;
        let x_1074 : vec4<f32> = u_xlat9;
        u_xlat17 = (vec4<f32>(x_1072.y, x_1072.y, x_1072.y, x_1072.y) * x_1074);
        let x_1077 : vec4<f32> = u_xlat6;
        let x_1079 : vec4<f32> = u_xlat9;
        u_xlat18 = (vec4<f32>(x_1077.z, x_1077.z, x_1077.z, x_1077.z) * x_1079);
        let x_1081 : vec4<f32> = u_xlat6;
        let x_1083 : vec4<f32> = u_xlat9;
        u_xlat6 = (vec4<f32>(x_1081.w, x_1081.w, x_1081.w, x_1081.w) * x_1083);
        let x_1086 : vec4<f32> = u_xlat11;
        let x_1087 : vec2<f32> = vec2<f32>(x_1086.x, x_1086.y);
        let x_1089 : f32 = u_xlat4.z;
        txVec13 = vec3<f32>(x_1087.x, x_1087.y, x_1089);
        let x_1096 : vec3<f32> = txVec13;
        let x_1098 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1096.xy, x_1096.z);
        u_xlat67 = x_1098;
        let x_1100 : vec4<f32> = u_xlat11;
        let x_1101 : vec2<f32> = vec2<f32>(x_1100.z, x_1100.w);
        let x_1103 : f32 = u_xlat4.z;
        txVec14 = vec3<f32>(x_1101.x, x_1101.y, x_1103);
        let x_1110 : vec3<f32> = txVec14;
        let x_1112 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1110.xy, x_1110.z);
        u_xlat7.x = x_1112;
        let x_1115 : f32 = u_xlat7.x;
        let x_1117 : f32 = u_xlat16.y;
        u_xlat7.x = (x_1115 * x_1117);
        let x_1121 : f32 = u_xlat16.x;
        let x_1122 : f32 = u_xlat67;
        let x_1125 : f32 = u_xlat7.x;
        u_xlat67 = ((x_1121 * x_1122) + x_1125);
        let x_1128 : vec2<f32> = u_xlat47;
        let x_1130 : f32 = u_xlat4.z;
        txVec15 = vec3<f32>(x_1128.x, x_1128.y, x_1130);
        let x_1137 : vec3<f32> = txVec15;
        let x_1139 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1137.xy, x_1137.z);
        u_xlat47.x = x_1139;
        let x_1142 : f32 = u_xlat16.z;
        let x_1144 : f32 = u_xlat47.x;
        let x_1146 : f32 = u_xlat67;
        u_xlat67 = ((x_1142 * x_1144) + x_1146);
        let x_1149 : vec4<f32> = u_xlat14;
        let x_1150 : vec2<f32> = vec2<f32>(x_1149.x, x_1149.y);
        let x_1152 : f32 = u_xlat4.z;
        txVec16 = vec3<f32>(x_1150.x, x_1150.y, x_1152);
        let x_1159 : vec3<f32> = txVec16;
        let x_1161 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1159.xy, x_1159.z);
        u_xlat47.x = x_1161;
        let x_1164 : f32 = u_xlat16.w;
        let x_1166 : f32 = u_xlat47.x;
        let x_1168 : f32 = u_xlat67;
        u_xlat67 = ((x_1164 * x_1166) + x_1168);
        let x_1171 : vec4<f32> = u_xlat12;
        let x_1172 : vec2<f32> = vec2<f32>(x_1171.x, x_1171.y);
        let x_1174 : f32 = u_xlat4.z;
        txVec17 = vec3<f32>(x_1172.x, x_1172.y, x_1174);
        let x_1181 : vec3<f32> = txVec17;
        let x_1183 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1181.xy, x_1181.z);
        u_xlat47.x = x_1183;
        let x_1186 : f32 = u_xlat17.x;
        let x_1188 : f32 = u_xlat47.x;
        let x_1190 : f32 = u_xlat67;
        u_xlat67 = ((x_1186 * x_1188) + x_1190);
        let x_1193 : vec4<f32> = u_xlat12;
        let x_1194 : vec2<f32> = vec2<f32>(x_1193.z, x_1193.w);
        let x_1196 : f32 = u_xlat4.z;
        txVec18 = vec3<f32>(x_1194.x, x_1194.y, x_1196);
        let x_1203 : vec3<f32> = txVec18;
        let x_1205 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1203.xy, x_1203.z);
        u_xlat47.x = x_1205;
        let x_1208 : f32 = u_xlat17.y;
        let x_1210 : f32 = u_xlat47.x;
        let x_1212 : f32 = u_xlat67;
        u_xlat67 = ((x_1208 * x_1210) + x_1212);
        let x_1215 : vec4<f32> = u_xlat13;
        let x_1216 : vec2<f32> = vec2<f32>(x_1215.x, x_1215.y);
        let x_1218 : f32 = u_xlat4.z;
        txVec19 = vec3<f32>(x_1216.x, x_1216.y, x_1218);
        let x_1225 : vec3<f32> = txVec19;
        let x_1227 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1225.xy, x_1225.z);
        u_xlat47.x = x_1227;
        let x_1230 : f32 = u_xlat17.z;
        let x_1232 : f32 = u_xlat47.x;
        let x_1234 : f32 = u_xlat67;
        u_xlat67 = ((x_1230 * x_1232) + x_1234);
        let x_1237 : vec4<f32> = u_xlat14;
        let x_1238 : vec2<f32> = vec2<f32>(x_1237.z, x_1237.w);
        let x_1240 : f32 = u_xlat4.z;
        txVec20 = vec3<f32>(x_1238.x, x_1238.y, x_1240);
        let x_1247 : vec3<f32> = txVec20;
        let x_1249 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1247.xy, x_1247.z);
        u_xlat47.x = x_1249;
        let x_1252 : f32 = u_xlat17.w;
        let x_1254 : f32 = u_xlat47.x;
        let x_1256 : f32 = u_xlat67;
        u_xlat67 = ((x_1252 * x_1254) + x_1256);
        let x_1259 : vec4<f32> = u_xlat15;
        let x_1260 : vec2<f32> = vec2<f32>(x_1259.x, x_1259.y);
        let x_1262 : f32 = u_xlat4.z;
        txVec21 = vec3<f32>(x_1260.x, x_1260.y, x_1262);
        let x_1269 : vec3<f32> = txVec21;
        let x_1271 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1269.xy, x_1269.z);
        u_xlat47.x = x_1271;
        let x_1274 : f32 = u_xlat18.x;
        let x_1276 : f32 = u_xlat47.x;
        let x_1278 : f32 = u_xlat67;
        u_xlat67 = ((x_1274 * x_1276) + x_1278);
        let x_1281 : vec4<f32> = u_xlat15;
        let x_1282 : vec2<f32> = vec2<f32>(x_1281.z, x_1281.w);
        let x_1284 : f32 = u_xlat4.z;
        txVec22 = vec3<f32>(x_1282.x, x_1282.y, x_1284);
        let x_1291 : vec3<f32> = txVec22;
        let x_1293 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1291.xy, x_1291.z);
        u_xlat47.x = x_1293;
        let x_1296 : f32 = u_xlat18.y;
        let x_1298 : f32 = u_xlat47.x;
        let x_1300 : f32 = u_xlat67;
        u_xlat67 = ((x_1296 * x_1298) + x_1300);
        let x_1303 : vec2<f32> = u_xlat28;
        let x_1305 : f32 = u_xlat4.z;
        txVec23 = vec3<f32>(x_1303.x, x_1303.y, x_1305);
        let x_1312 : vec3<f32> = txVec23;
        let x_1314 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1312.xy, x_1312.z);
        u_xlat47.x = x_1314;
        let x_1317 : f32 = u_xlat18.z;
        let x_1319 : f32 = u_xlat47.x;
        let x_1321 : f32 = u_xlat67;
        u_xlat67 = ((x_1317 * x_1319) + x_1321);
        let x_1324 : vec2<f32> = u_xlat55;
        let x_1326 : f32 = u_xlat4.z;
        txVec24 = vec3<f32>(x_1324.x, x_1324.y, x_1326);
        let x_1333 : vec3<f32> = txVec24;
        let x_1335 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1333.xy, x_1333.z);
        u_xlat47.x = x_1335;
        let x_1338 : f32 = u_xlat18.w;
        let x_1340 : f32 = u_xlat47.x;
        let x_1342 : f32 = u_xlat67;
        u_xlat67 = ((x_1338 * x_1340) + x_1342);
        let x_1345 : vec4<f32> = u_xlat10;
        let x_1346 : vec2<f32> = vec2<f32>(x_1345.x, x_1345.y);
        let x_1348 : f32 = u_xlat4.z;
        txVec25 = vec3<f32>(x_1346.x, x_1346.y, x_1348);
        let x_1355 : vec3<f32> = txVec25;
        let x_1357 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1355.xy, x_1355.z);
        u_xlat47.x = x_1357;
        let x_1360 : f32 = u_xlat6.x;
        let x_1362 : f32 = u_xlat47.x;
        let x_1364 : f32 = u_xlat67;
        u_xlat67 = ((x_1360 * x_1362) + x_1364);
        let x_1367 : vec4<f32> = u_xlat10;
        let x_1368 : vec2<f32> = vec2<f32>(x_1367.z, x_1367.w);
        let x_1370 : f32 = u_xlat4.z;
        txVec26 = vec3<f32>(x_1368.x, x_1368.y, x_1370);
        let x_1377 : vec3<f32> = txVec26;
        let x_1379 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1377.xy, x_1377.z);
        u_xlat47.x = x_1379;
        let x_1382 : f32 = u_xlat6.y;
        let x_1384 : f32 = u_xlat47.x;
        let x_1386 : f32 = u_xlat67;
        u_xlat67 = ((x_1382 * x_1384) + x_1386);
        let x_1389 : vec2<f32> = u_xlat50;
        let x_1391 : f32 = u_xlat4.z;
        txVec27 = vec3<f32>(x_1389.x, x_1389.y, x_1391);
        let x_1398 : vec3<f32> = txVec27;
        let x_1400 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1398.xy, x_1398.z);
        u_xlat47.x = x_1400;
        let x_1403 : f32 = u_xlat6.z;
        let x_1405 : f32 = u_xlat47.x;
        let x_1407 : f32 = u_xlat67;
        u_xlat67 = ((x_1403 * x_1405) + x_1407);
        let x_1410 : vec4<f32> = u_xlat5;
        let x_1411 : vec2<f32> = vec2<f32>(x_1410.x, x_1410.y);
        let x_1413 : f32 = u_xlat4.z;
        txVec28 = vec3<f32>(x_1411.x, x_1411.y, x_1413);
        let x_1420 : vec3<f32> = txVec28;
        let x_1422 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1420.xy, x_1420.z);
        u_xlat5.x = x_1422;
        let x_1425 : f32 = u_xlat6.w;
        let x_1427 : f32 = u_xlat5.x;
        let x_1429 : f32 = u_xlat67;
        u_xlat65 = ((x_1425 * x_1427) + x_1429);
      }
    }
  } else {
    let x_1433 : vec4<f32> = u_xlat4;
    let x_1434 : vec2<f32> = vec2<f32>(x_1433.x, x_1433.y);
    let x_1436 : f32 = u_xlat4.z;
    txVec29 = vec3<f32>(x_1434.x, x_1434.y, x_1436);
    let x_1443 : vec3<f32> = txVec29;
    let x_1445 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1443.xy, x_1443.z);
    u_xlat65 = x_1445;
  }
  let x_1447 : f32 = x_139.x_MainLightShadowParams.x;
  u_xlat4.x = (-(x_1447) + 1.0f);
  let x_1451 : f32 = u_xlat65;
  let x_1453 : f32 = x_139.x_MainLightShadowParams.x;
  let x_1456 : f32 = u_xlat4.x;
  u_xlat65 = ((x_1451 * x_1453) + x_1456);
  let x_1460 : f32 = u_xlat4.z;
  u_xlatb25 = (0.0f >= x_1460);
  let x_1464 : f32 = u_xlat4.z;
  u_xlatb46 = (x_1464 >= 1.0f);
  let x_1466 : bool = u_xlatb46;
  let x_1467 : bool = u_xlatb25;
  u_xlatb25 = (x_1466 | x_1467);
  let x_1469 : bool = u_xlatb25;
  let x_1470 : f32 = u_xlat65;
  u_xlat65 = select(x_1470, 1.0f, x_1469);
  let x_1472 : vec3<f32> = u_xlat0;
  let x_1474 : vec4<f32> = x_66.x_MainLightPosition;
  u_xlat0.x = dot(x_1472, -(vec3<f32>(x_1474.x, x_1474.y, x_1474.z)));
  let x_1480 : f32 = u_xlat0.x;
  u_xlat0.x = clamp(x_1480, 0.0f, 1.0f);
  let x_1484 : f32 = u_xlat65;
  let x_1488 : vec4<f32> = x_66.x_MainLightColor;
  u_xlat25 = (vec3<f32>(x_1484, x_1484, x_1484) * vec3<f32>(x_1488.x, x_1488.y, x_1488.z));
  let x_1491 : vec3<f32> = u_xlat0;
  let x_1493 : vec3<f32> = u_xlat25;
  u_xlat0 = (vec3<f32>(x_1491.x, x_1491.x, x_1491.x) * x_1493);
  let x_1495 : vec3<f32> = u_xlat0;
  let x_1496 : vec4<f32> = u_xlat1;
  u_xlat0 = (x_1495 * vec3<f32>(x_1496.x, x_1496.y, x_1496.z));
  let x_1501 : f32 = u_xlat1.w;
  u_xlatb1 = (x_1501 >= 0.400000006f);
  let x_1504 : bool = u_xlatb1;
  if (x_1504) {
    let x_1509 : f32 = u_xlat1.w;
    x_1505 = x_1509;
  } else {
    x_1505 = 0.0f;
  }
  let x_1511 : f32 = x_1505;
  u_xlat1.x = x_1511;
  let x_1515 : f32 = u_xlat1.w;
  u_xlat22.x = (x_1515 + -0.400000006f);
  let x_1521 : f32 = u_xlat1.w;
  u_xlat43 = dpdxCoarse(x_1521);
  let x_1525 : f32 = u_xlat1.w;
  u_xlat64 = dpdyCoarse(x_1525);
  let x_1527 : f32 = u_xlat64;
  let x_1529 : f32 = u_xlat43;
  u_xlat43 = (abs(x_1527) + abs(x_1529));
  let x_1532 : f32 = u_xlat43;
  u_xlat43 = max(x_1532, 0.0001f);
  let x_1536 : f32 = u_xlat22.x;
  let x_1537 : f32 = u_xlat43;
  u_xlat22.x = (x_1536 / x_1537);
  let x_1541 : f32 = u_xlat22.x;
  u_xlat22.x = (x_1541 + 0.5f);
  let x_1545 : f32 = u_xlat22.x;
  u_xlat22.x = clamp(x_1545, 0.0f, 1.0f);
  let x_1550 : f32 = x_66.x_AlphaToMaskAvailable;
  u_xlatb43 = !((x_1550 == 0.0f));
  let x_1552 : bool = u_xlatb43;
  if (x_1552) {
    let x_1557 : f32 = u_xlat22.x;
    x_1553 = x_1557;
  } else {
    let x_1560 : f32 = u_xlat1.x;
    x_1553 = x_1560;
  }
  let x_1561 : f32 = x_1553;
  u_xlat1.x = x_1561;
  let x_1564 : f32 = u_xlat1.x;
  u_xlat22.x = (x_1564 + -0.0001f);
  let x_1572 : f32 = u_xlat22.x;
  u_xlatb22.x = (x_1572 < 0.0f);
  let x_1576 : bool = u_xlatb22.x;
  if (((select(0i, 1i, x_1576) * -1i) != 0i)) {
    discard;
  }
  let x_1586 : f32 = vs_INTERP2.w;
  u_xlatb22.x = (0.0f < x_1586);
  let x_1594 : f32 = x_1592.unity_WorldTransformParams.w;
  u_xlatb22.z = (x_1594 >= 0.0f);
  let x_1598 : bool = u_xlatb22.x;
  u_xlat22.x = select(-1.0f, 1.0f, x_1598);
  let x_1602 : bool = u_xlatb22.z;
  u_xlat22.z = select(-1.0f, 1.0f, x_1602);
  let x_1606 : f32 = u_xlat22.z;
  let x_1608 : f32 = u_xlat22.x;
  u_xlat22.x = (x_1606 * x_1608);
  let x_1611 : vec3<f32> = vs_INTERP1;
  let x_1613 : vec4<f32> = vs_INTERP2;
  u_xlat25 = (vec3<f32>(x_1611.z, x_1611.x, x_1611.y) * vec3<f32>(x_1613.y, x_1613.z, x_1613.x));
  let x_1616 : vec3<f32> = vs_INTERP1;
  let x_1618 : vec4<f32> = vs_INTERP2;
  let x_1621 : vec3<f32> = u_xlat25;
  u_xlat25 = ((vec3<f32>(x_1616.y, x_1616.z, x_1616.x) * vec3<f32>(x_1618.z, x_1618.x, x_1618.y)) + -(x_1621));
  let x_1624 : vec3<f32> = u_xlat22;
  let x_1626 : vec3<f32> = u_xlat25;
  u_xlat25 = (vec3<f32>(x_1624.x, x_1624.x, x_1624.x) * x_1626);
  let x_1628 : vec3<f32> = u_xlat24;
  let x_1630 : vec3<f32> = u_xlat25;
  u_xlat25 = (vec3<f32>(x_1628.y, x_1628.y, x_1628.y) * x_1630);
  let x_1632 : vec3<f32> = u_xlat24;
  let x_1634 : vec4<f32> = vs_INTERP2;
  let x_1637 : vec3<f32> = u_xlat25;
  u_xlat25 = ((vec3<f32>(x_1632.x, x_1632.x, x_1632.x) * vec3<f32>(x_1634.x, x_1634.y, x_1634.z)) + x_1637);
  let x_1639 : vec3<f32> = u_xlat24;
  let x_1641 : vec3<f32> = vs_INTERP1;
  let x_1643 : vec3<f32> = u_xlat25;
  u_xlat24 = ((vec3<f32>(x_1639.z, x_1639.z, x_1639.z) * x_1641) + x_1643);
  let x_1645 : vec3<f32> = u_xlat24;
  let x_1646 : vec3<f32> = u_xlat24;
  u_xlat22.x = dot(x_1645, x_1646);
  let x_1650 : f32 = u_xlat22.x;
  u_xlat22.x = inverseSqrt(x_1650);
  let x_1653 : vec3<f32> = u_xlat22;
  let x_1655 : vec3<f32> = u_xlat24;
  u_xlat24 = (vec3<f32>(x_1653.x, x_1653.x, x_1653.x) * x_1655);
  let x_1658 : f32 = x_66.unity_OrthoParams.w;
  u_xlatb22.x = (x_1658 == 0.0f);
  let x_1661 : vec3<f32> = vs_INTERP0;
  let x_1665 : vec3<f32> = x_66.x_WorldSpaceCameraPos;
  u_xlat25 = (-(x_1661) + x_1665);
  let x_1667 : vec3<f32> = u_xlat25;
  let x_1668 : vec3<f32> = u_xlat25;
  u_xlat64 = dot(x_1667, x_1668);
  let x_1670 : f32 = u_xlat64;
  u_xlat64 = inverseSqrt(x_1670);
  let x_1672 : f32 = u_xlat64;
  let x_1674 : vec3<f32> = u_xlat25;
  u_xlat25 = (vec3<f32>(x_1672, x_1672, x_1672) * x_1674);
  let x_1677 : bool = u_xlatb22.x;
  if (x_1677) {
    let x_1682 : f32 = u_xlat25.x;
    x_1678 = x_1682;
  } else {
    let x_1686 : f32 = x_66.unity_MatrixV[0i].z;
    x_1678 = x_1686;
  }
  let x_1687 : f32 = x_1678;
  u_xlat5.x = x_1687;
  let x_1690 : bool = u_xlatb22.x;
  if (x_1690) {
    let x_1695 : f32 = u_xlat25.y;
    x_1691 = x_1695;
  } else {
    let x_1698 : f32 = x_66.unity_MatrixV[1i].z;
    x_1691 = x_1698;
  }
  let x_1699 : f32 = x_1691;
  u_xlat5.y = x_1699;
  let x_1702 : bool = u_xlatb22.x;
  if (x_1702) {
    let x_1707 : f32 = u_xlat25.z;
    x_1703 = x_1707;
  } else {
    let x_1710 : f32 = x_66.unity_MatrixV[2i].z;
    x_1703 = x_1710;
  }
  let x_1711 : f32 = x_1703;
  u_xlat5.z = x_1711;
  let x_1720 : vec2<f32> = vs_INTERP5;
  let x_1722 : f32 = x_66.x_GlobalMipBias.x;
  let x_1723 : vec4<f32> = textureSampleBias(unity_LightmapInd, samplerunity_Lightmap, x_1720, x_1722);
  u_xlat6 = x_1723;
  let x_1728 : vec2<f32> = vs_INTERP5;
  let x_1730 : f32 = x_66.x_GlobalMipBias.x;
  let x_1731 : vec4<f32> = textureSampleBias(unity_Lightmap, samplerunity_Lightmap, x_1728, x_1730);
  u_xlat25 = vec3<f32>(x_1731.x, x_1731.y, x_1731.z);
  let x_1733 : vec4<f32> = u_xlat6;
  let x_1736 : vec3<f32> = (vec3<f32>(x_1733.x, x_1733.y, x_1733.z) + vec3<f32>(-0.5f, -0.5f, -0.5f));
  let x_1737 : vec4<f32> = u_xlat6;
  u_xlat6 = vec4<f32>(x_1736.x, x_1736.y, x_1736.z, x_1737.w);
  let x_1739 : vec3<f32> = u_xlat24;
  let x_1740 : vec4<f32> = u_xlat6;
  u_xlat22.x = dot(x_1739, vec3<f32>(x_1740.x, x_1740.y, x_1740.z));
  let x_1745 : f32 = u_xlat22.x;
  u_xlat22.x = (x_1745 + 0.5f);
  let x_1748 : vec3<f32> = u_xlat22;
  let x_1750 : vec3<f32> = u_xlat25;
  u_xlat25 = (vec3<f32>(x_1748.x, x_1748.x, x_1748.x) * x_1750);
  let x_1753 : f32 = u_xlat6.w;
  u_xlat22.x = max(x_1753, 0.0001f);
  let x_1756 : vec3<f32> = u_xlat25;
  let x_1757 : vec3<f32> = u_xlat22;
  u_xlat25 = (x_1756 / vec3<f32>(x_1757.x, x_1757.x, x_1757.x));
  let x_1761 : vec4<f32> = x_66.x_ScaledScreenParams;
  let x_1762 : vec2<f32> = vec2<f32>(x_1761.x, x_1761.y);
  let x_1766 : vec2<f32> = (vec2<f32>(1.0f, 1.0f) / vec2<f32>(x_1762.x, x_1762.y));
  let x_1767 : vec3<f32> = u_xlat22;
  u_xlat22 = vec3<f32>(x_1766.x, x_1767.y, x_1766.y);
  let x_1769 : vec3<f32> = u_xlat22;
  let x_1771 : vec4<f32> = hlslcc_FragCoord;
  let x_1773 : vec2<f32> = (vec2<f32>(x_1769.x, x_1769.z) * vec2<f32>(x_1771.x, x_1771.y));
  let x_1774 : vec4<f32> = u_xlat6;
  u_xlat6 = vec4<f32>(x_1773.x, x_1773.y, x_1774.z, x_1774.w);
  let x_1777 : f32 = u_xlat6.y;
  let x_1779 : f32 = x_66.x_ScaleBiasRt.x;
  let x_1782 : f32 = x_66.x_ScaleBiasRt.y;
  u_xlat22.x = ((x_1777 * x_1779) + x_1782);
  let x_1786 : f32 = u_xlat22.x;
  u_xlat6.z = (-(x_1786) + 1.0f);
  let x_1791 : f32 = u_xlat3.x;
  u_xlat3.x = x_1791;
  let x_1794 : f32 = u_xlat3.x;
  u_xlat3.x = clamp(x_1794, 0.0f, 1.0f);
  let x_1798 : f32 = u_xlat1.x;
  u_xlat1.x = min(x_1798, 1.0f);
  let x_1801 : vec3<f32> = u_xlat2;
  u_xlat2 = (x_1801 * vec3<f32>(0.959999979f, 0.959999979f, 0.959999979f));
  let x_1806 : f32 = u_xlat3.x;
  u_xlat22.x = (-(x_1806) + 1.0f);
  let x_1811 : f32 = u_xlat22.x;
  let x_1813 : f32 = u_xlat22.x;
  u_xlat64 = (x_1811 * x_1813);
  let x_1815 : f32 = u_xlat64;
  u_xlat64 = max(x_1815, 0.0078125f);
  let x_1818 : f32 = u_xlat64;
  let x_1819 : f32 = u_xlat64;
  u_xlat65 = (x_1818 * x_1819);
  let x_1822 : f32 = u_xlat3.x;
  u_xlat3.x = (x_1822 + 0.040000021f);
  let x_1827 : f32 = u_xlat3.x;
  u_xlat3.x = min(x_1827, 1.0f);
  let x_1831 : f32 = u_xlat64;
  u_xlat68 = ((x_1831 * 4.0f) + 2.0f);
  let x_1840 : vec4<f32> = u_xlat6;
  let x_1843 : f32 = x_66.x_GlobalMipBias.x;
  let x_1844 : vec4<f32> = textureSampleBias(x_ScreenSpaceOcclusionTexture, sampler_ScreenSpaceOcclusionTexture, vec2<f32>(x_1840.x, x_1840.z), x_1843);
  u_xlat6.x = x_1844.x;
  let x_1848 : f32 = u_xlat6.x;
  u_xlat27.x = (x_1848 + -1.0f);
  let x_1853 : f32 = x_66.x_AmbientOcclusionParam.w;
  let x_1855 : f32 = u_xlat27.x;
  u_xlat27.x = ((x_1853 * x_1855) + 1.0f);
  let x_1860 : f32 = u_xlat6.x;
  let x_1862 : f32 = vs_INTERP4.w;
  u_xlat6.x = min(x_1860, x_1862);
  let x_1865 : bool = u_xlatb63;
  if (x_1865) {
    let x_1869 : f32 = x_139.x_MainLightShadowParams.y;
    u_xlatb63 = (x_1869 == 1.0f);
    let x_1871 : bool = u_xlatb63;
    if (x_1871) {
      let x_1875 : vec4<f32> = vs_INTERP9;
      let x_1878 : vec4<f32> = x_139.x_MainLightShadowOffset0;
      u_xlat7 = (vec4<f32>(x_1875.x, x_1875.y, x_1875.x, x_1875.y) + x_1878);
      let x_1881 : vec4<f32> = u_xlat7;
      let x_1882 : vec2<f32> = vec2<f32>(x_1881.x, x_1881.y);
      let x_1884 : f32 = vs_INTERP9.z;
      txVec30 = vec3<f32>(x_1882.x, x_1882.y, x_1884);
      let x_1891 : vec3<f32> = txVec30;
      let x_1893 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1891.xy, x_1891.z);
      u_xlat8.x = x_1893;
      let x_1896 : vec4<f32> = u_xlat7;
      let x_1897 : vec2<f32> = vec2<f32>(x_1896.z, x_1896.w);
      let x_1899 : f32 = vs_INTERP9.z;
      txVec31 = vec3<f32>(x_1897.x, x_1897.y, x_1899);
      let x_1906 : vec3<f32> = txVec31;
      let x_1908 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1906.xy, x_1906.z);
      u_xlat8.y = x_1908;
      let x_1910 : vec4<f32> = vs_INTERP9;
      let x_1913 : vec4<f32> = x_139.x_MainLightShadowOffset1;
      u_xlat7 = (vec4<f32>(x_1910.x, x_1910.y, x_1910.x, x_1910.y) + x_1913);
      let x_1916 : vec4<f32> = u_xlat7;
      let x_1917 : vec2<f32> = vec2<f32>(x_1916.x, x_1916.y);
      let x_1919 : f32 = vs_INTERP9.z;
      txVec32 = vec3<f32>(x_1917.x, x_1917.y, x_1919);
      let x_1926 : vec3<f32> = txVec32;
      let x_1928 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1926.xy, x_1926.z);
      u_xlat8.z = x_1928;
      let x_1931 : vec4<f32> = u_xlat7;
      let x_1932 : vec2<f32> = vec2<f32>(x_1931.z, x_1931.w);
      let x_1934 : f32 = vs_INTERP9.z;
      txVec33 = vec3<f32>(x_1932.x, x_1932.y, x_1934);
      let x_1941 : vec3<f32> = txVec33;
      let x_1943 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1941.xy, x_1941.z);
      u_xlat8.w = x_1943;
      let x_1945 : vec4<f32> = u_xlat8;
      u_xlat63 = dot(x_1945, vec4<f32>(0.25f, 0.25f, 0.25f, 0.25f));
    } else {
      let x_1950 : f32 = x_139.x_MainLightShadowParams.y;
      u_xlatb48 = (x_1950 == 2.0f);
      let x_1952 : bool = u_xlatb48;
      if (x_1952) {
        let x_1956 : vec4<f32> = vs_INTERP9;
        let x_1959 : vec4<f32> = x_139.x_MainLightShadowmapSize;
        u_xlat48 = ((vec2<f32>(x_1956.x, x_1956.y) * vec2<f32>(x_1959.z, x_1959.w)) + vec2<f32>(0.5f, 0.5f));
        let x_1963 : vec2<f32> = u_xlat48;
        u_xlat48 = floor(x_1963);
        let x_1965 : vec4<f32> = vs_INTERP9;
        let x_1968 : vec4<f32> = x_139.x_MainLightShadowmapSize;
        let x_1971 : vec2<f32> = u_xlat48;
        let x_1973 : vec2<f32> = ((vec2<f32>(x_1965.x, x_1965.y) * vec2<f32>(x_1968.z, x_1968.w)) + -(x_1971));
        let x_1974 : vec4<f32> = u_xlat7;
        u_xlat7 = vec4<f32>(x_1973.x, x_1973.y, x_1974.z, x_1974.w);
        let x_1976 : vec4<f32> = u_xlat7;
        u_xlat8 = (vec4<f32>(x_1976.x, x_1976.x, x_1976.y, x_1976.y) + vec4<f32>(0.5f, 1.0f, 0.5f, 1.0f));
        let x_1979 : vec4<f32> = u_xlat8;
        let x_1981 : vec4<f32> = u_xlat8;
        u_xlat9 = (vec4<f32>(x_1979.x, x_1979.x, x_1979.z, x_1979.z) * vec4<f32>(x_1981.x, x_1981.x, x_1981.z, x_1981.z));
        let x_1984 : vec4<f32> = u_xlat9;
        u_xlat49 = (vec2<f32>(x_1984.y, x_1984.w) * vec2<f32>(0.079999998f, 0.079999998f));
        let x_1987 : vec4<f32> = u_xlat9;
        let x_1990 : vec4<f32> = u_xlat7;
        let x_1993 : vec2<f32> = ((vec2<f32>(x_1987.x, x_1987.z) * vec2<f32>(0.5f, 0.5f)) + -(vec2<f32>(x_1990.x, x_1990.y)));
        let x_1994 : vec4<f32> = u_xlat8;
        u_xlat8 = vec4<f32>(x_1993.x, x_1994.y, x_1993.y, x_1994.w);
        let x_1996 : vec4<f32> = u_xlat7;
        let x_1999 : vec2<f32> = (-(vec2<f32>(x_1996.x, x_1996.y)) + vec2<f32>(1.0f, 1.0f));
        let x_2000 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_1999.x, x_1999.y, x_2000.z, x_2000.w);
        let x_2003 : vec4<f32> = u_xlat7;
        u_xlat51 = min(vec2<f32>(x_2003.x, x_2003.y), vec2<f32>(0.0f, 0.0f));
        let x_2006 : vec2<f32> = u_xlat51;
        let x_2008 : vec2<f32> = u_xlat51;
        let x_2010 : vec4<f32> = u_xlat9;
        u_xlat51 = ((-(x_2006) * x_2008) + vec2<f32>(x_2010.x, x_2010.y));
        let x_2013 : vec4<f32> = u_xlat7;
        let x_2015 : vec2<f32> = max(vec2<f32>(x_2013.x, x_2013.y), vec2<f32>(0.0f, 0.0f));
        let x_2016 : vec4<f32> = u_xlat7;
        u_xlat7 = vec4<f32>(x_2015.x, x_2015.y, x_2016.z, x_2016.w);
        let x_2018 : vec4<f32> = u_xlat7;
        let x_2021 : vec4<f32> = u_xlat7;
        let x_2024 : vec4<f32> = u_xlat8;
        let x_2026 : vec2<f32> = ((-(vec2<f32>(x_2018.x, x_2018.y)) * vec2<f32>(x_2021.x, x_2021.y)) + vec2<f32>(x_2024.y, x_2024.w));
        let x_2027 : vec4<f32> = u_xlat7;
        u_xlat7 = vec4<f32>(x_2026.x, x_2026.y, x_2027.z, x_2027.w);
        let x_2029 : vec2<f32> = u_xlat51;
        u_xlat51 = (x_2029 + vec2<f32>(1.0f, 1.0f));
        let x_2031 : vec4<f32> = u_xlat7;
        let x_2033 : vec2<f32> = (vec2<f32>(x_2031.x, x_2031.y) + vec2<f32>(1.0f, 1.0f));
        let x_2034 : vec4<f32> = u_xlat7;
        u_xlat7 = vec4<f32>(x_2033.x, x_2033.y, x_2034.z, x_2034.w);
        let x_2036 : vec4<f32> = u_xlat8;
        let x_2038 : vec2<f32> = (vec2<f32>(x_2036.x, x_2036.z) * vec2<f32>(0.159999996f, 0.159999996f));
        let x_2039 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_2038.x, x_2038.y, x_2039.z, x_2039.w);
        let x_2041 : vec4<f32> = u_xlat9;
        let x_2043 : vec2<f32> = (vec2<f32>(x_2041.x, x_2041.y) * vec2<f32>(0.159999996f, 0.159999996f));
        let x_2044 : vec4<f32> = u_xlat11;
        u_xlat11 = vec4<f32>(x_2043.x, x_2043.y, x_2044.z, x_2044.w);
        let x_2046 : vec2<f32> = u_xlat51;
        let x_2047 : vec2<f32> = (x_2046 * vec2<f32>(0.159999996f, 0.159999996f));
        let x_2048 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_2047.x, x_2047.y, x_2048.z, x_2048.w);
        let x_2050 : vec4<f32> = u_xlat7;
        let x_2052 : vec2<f32> = (vec2<f32>(x_2050.x, x_2050.y) * vec2<f32>(0.159999996f, 0.159999996f));
        let x_2053 : vec4<f32> = u_xlat12;
        u_xlat12 = vec4<f32>(x_2052.x, x_2052.y, x_2053.z, x_2053.w);
        let x_2055 : vec4<f32> = u_xlat8;
        let x_2057 : vec2<f32> = (vec2<f32>(x_2055.y, x_2055.w) * vec2<f32>(0.159999996f, 0.159999996f));
        let x_2058 : vec4<f32> = u_xlat7;
        u_xlat7 = vec4<f32>(x_2057.x, x_2057.y, x_2058.z, x_2058.w);
        let x_2061 : f32 = u_xlat9.x;
        u_xlat10.z = x_2061;
        let x_2064 : f32 = u_xlat7.x;
        u_xlat10.w = x_2064;
        let x_2067 : f32 = u_xlat12.x;
        u_xlat11.z = x_2067;
        let x_2070 : f32 = u_xlat49.x;
        u_xlat11.w = x_2070;
        let x_2072 : vec4<f32> = u_xlat10;
        let x_2074 : vec4<f32> = u_xlat11;
        u_xlat8 = (vec4<f32>(x_2072.z, x_2072.w, x_2072.x, x_2072.z) + vec4<f32>(x_2074.z, x_2074.w, x_2074.x, x_2074.z));
        let x_2078 : f32 = u_xlat10.y;
        u_xlat9.z = x_2078;
        let x_2081 : f32 = u_xlat7.y;
        u_xlat9.w = x_2081;
        let x_2084 : f32 = u_xlat11.y;
        u_xlat12.z = x_2084;
        let x_2087 : f32 = u_xlat49.y;
        u_xlat12.w = x_2087;
        let x_2089 : vec4<f32> = u_xlat9;
        let x_2091 : vec4<f32> = u_xlat12;
        let x_2093 : vec3<f32> = (vec3<f32>(x_2089.z, x_2089.y, x_2089.w) + vec3<f32>(x_2091.z, x_2091.y, x_2091.w));
        let x_2094 : vec4<f32> = u_xlat7;
        u_xlat7 = vec4<f32>(x_2093.x, x_2093.y, x_2093.z, x_2094.w);
        let x_2096 : vec4<f32> = u_xlat11;
        let x_2098 : vec4<f32> = u_xlat8;
        let x_2100 : vec3<f32> = (vec3<f32>(x_2096.x, x_2096.z, x_2096.w) / vec3<f32>(x_2098.z, x_2098.w, x_2098.y));
        let x_2101 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_2100.x, x_2100.y, x_2100.z, x_2101.w);
        let x_2103 : vec4<f32> = u_xlat9;
        let x_2105 : vec3<f32> = (vec3<f32>(x_2103.x, x_2103.y, x_2103.z) + vec3<f32>(-2.5f, -0.5f, 1.5f));
        let x_2106 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_2105.x, x_2105.y, x_2105.z, x_2106.w);
        let x_2108 : vec4<f32> = u_xlat12;
        let x_2110 : vec4<f32> = u_xlat7;
        let x_2112 : vec3<f32> = (vec3<f32>(x_2108.z, x_2108.y, x_2108.w) / vec3<f32>(x_2110.x, x_2110.y, x_2110.z));
        let x_2113 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_2112.x, x_2112.y, x_2112.z, x_2113.w);
        let x_2115 : vec4<f32> = u_xlat10;
        let x_2117 : vec3<f32> = (vec3<f32>(x_2115.x, x_2115.y, x_2115.z) + vec3<f32>(-2.5f, -0.5f, 1.5f));
        let x_2118 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_2117.x, x_2117.y, x_2117.z, x_2118.w);
        let x_2120 : vec4<f32> = u_xlat9;
        let x_2123 : vec4<f32> = x_139.x_MainLightShadowmapSize;
        let x_2125 : vec3<f32> = (vec3<f32>(x_2120.y, x_2120.x, x_2120.z) * vec3<f32>(x_2123.x, x_2123.x, x_2123.x));
        let x_2126 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_2125.x, x_2125.y, x_2125.z, x_2126.w);
        let x_2128 : vec4<f32> = u_xlat10;
        let x_2131 : vec4<f32> = x_139.x_MainLightShadowmapSize;
        let x_2133 : vec3<f32> = (vec3<f32>(x_2128.x, x_2128.y, x_2128.z) * vec3<f32>(x_2131.y, x_2131.y, x_2131.y));
        let x_2134 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_2133.x, x_2133.y, x_2133.z, x_2134.w);
        let x_2137 : f32 = u_xlat10.x;
        u_xlat9.w = x_2137;
        let x_2139 : vec2<f32> = u_xlat48;
        let x_2142 : vec4<f32> = x_139.x_MainLightShadowmapSize;
        let x_2145 : vec4<f32> = u_xlat9;
        u_xlat11 = ((vec4<f32>(x_2139.x, x_2139.y, x_2139.x, x_2139.y) * vec4<f32>(x_2142.x, x_2142.y, x_2142.x, x_2142.y)) + vec4<f32>(x_2145.y, x_2145.w, x_2145.x, x_2145.w));
        let x_2148 : vec2<f32> = u_xlat48;
        let x_2150 : vec4<f32> = x_139.x_MainLightShadowmapSize;
        let x_2153 : vec4<f32> = u_xlat9;
        let x_2155 : vec2<f32> = ((x_2148 * vec2<f32>(x_2150.x, x_2150.y)) + vec2<f32>(x_2153.z, x_2153.w));
        let x_2156 : vec4<f32> = u_xlat12;
        u_xlat12 = vec4<f32>(x_2155.x, x_2155.y, x_2156.z, x_2156.w);
        let x_2159 : f32 = u_xlat9.y;
        u_xlat10.w = x_2159;
        let x_2161 : vec4<f32> = u_xlat10;
        let x_2162 : vec2<f32> = vec2<f32>(x_2161.y, x_2161.z);
        let x_2163 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_2163.x, x_2162.x, x_2163.z, x_2162.y);
        let x_2165 : vec2<f32> = u_xlat48;
        let x_2168 : vec4<f32> = x_139.x_MainLightShadowmapSize;
        let x_2171 : vec4<f32> = u_xlat9;
        u_xlat13 = ((vec4<f32>(x_2165.x, x_2165.y, x_2165.x, x_2165.y) * vec4<f32>(x_2168.x, x_2168.y, x_2168.x, x_2168.y)) + vec4<f32>(x_2171.x, x_2171.y, x_2171.z, x_2171.y));
        let x_2174 : vec2<f32> = u_xlat48;
        let x_2177 : vec4<f32> = x_139.x_MainLightShadowmapSize;
        let x_2180 : vec4<f32> = u_xlat10;
        u_xlat10 = ((vec4<f32>(x_2174.x, x_2174.y, x_2174.x, x_2174.y) * vec4<f32>(x_2177.x, x_2177.y, x_2177.x, x_2177.y)) + vec4<f32>(x_2180.w, x_2180.y, x_2180.w, x_2180.z));
        let x_2183 : vec2<f32> = u_xlat48;
        let x_2186 : vec4<f32> = x_139.x_MainLightShadowmapSize;
        let x_2189 : vec4<f32> = u_xlat9;
        u_xlat9 = ((vec4<f32>(x_2183.x, x_2183.y, x_2183.x, x_2183.y) * vec4<f32>(x_2186.x, x_2186.y, x_2186.x, x_2186.y)) + vec4<f32>(x_2189.x, x_2189.w, x_2189.z, x_2189.w));
        let x_2192 : vec4<f32> = u_xlat7;
        let x_2194 : vec4<f32> = u_xlat8;
        u_xlat14 = (vec4<f32>(x_2192.x, x_2192.x, x_2192.x, x_2192.y) * vec4<f32>(x_2194.z, x_2194.w, x_2194.y, x_2194.z));
        let x_2197 : vec4<f32> = u_xlat7;
        let x_2199 : vec4<f32> = u_xlat8;
        u_xlat15 = (vec4<f32>(x_2197.y, x_2197.y, x_2197.z, x_2197.z) * x_2199);
        let x_2202 : f32 = u_xlat7.z;
        let x_2204 : f32 = u_xlat8.y;
        u_xlat48.x = (x_2202 * x_2204);
        let x_2208 : vec4<f32> = u_xlat11;
        let x_2209 : vec2<f32> = vec2<f32>(x_2208.x, x_2208.y);
        let x_2211 : f32 = vs_INTERP9.z;
        txVec34 = vec3<f32>(x_2209.x, x_2209.y, x_2211);
        let x_2219 : vec3<f32> = txVec34;
        let x_2221 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2219.xy, x_2219.z);
        u_xlat69 = x_2221;
        let x_2223 : vec4<f32> = u_xlat11;
        let x_2224 : vec2<f32> = vec2<f32>(x_2223.z, x_2223.w);
        let x_2226 : f32 = vs_INTERP9.z;
        txVec35 = vec3<f32>(x_2224.x, x_2224.y, x_2226);
        let x_2233 : vec3<f32> = txVec35;
        let x_2235 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2233.xy, x_2233.z);
        u_xlat7.x = x_2235;
        let x_2238 : f32 = u_xlat7.x;
        let x_2240 : f32 = u_xlat14.y;
        u_xlat7.x = (x_2238 * x_2240);
        let x_2244 : f32 = u_xlat14.x;
        let x_2245 : f32 = u_xlat69;
        let x_2248 : f32 = u_xlat7.x;
        u_xlat69 = ((x_2244 * x_2245) + x_2248);
        let x_2251 : vec4<f32> = u_xlat12;
        let x_2252 : vec2<f32> = vec2<f32>(x_2251.x, x_2251.y);
        let x_2254 : f32 = vs_INTERP9.z;
        txVec36 = vec3<f32>(x_2252.x, x_2252.y, x_2254);
        let x_2261 : vec3<f32> = txVec36;
        let x_2263 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2261.xy, x_2261.z);
        u_xlat7.x = x_2263;
        let x_2266 : f32 = u_xlat14.z;
        let x_2268 : f32 = u_xlat7.x;
        let x_2270 : f32 = u_xlat69;
        u_xlat69 = ((x_2266 * x_2268) + x_2270);
        let x_2273 : vec4<f32> = u_xlat10;
        let x_2274 : vec2<f32> = vec2<f32>(x_2273.x, x_2273.y);
        let x_2276 : f32 = vs_INTERP9.z;
        txVec37 = vec3<f32>(x_2274.x, x_2274.y, x_2276);
        let x_2283 : vec3<f32> = txVec37;
        let x_2285 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2283.xy, x_2283.z);
        u_xlat7.x = x_2285;
        let x_2288 : f32 = u_xlat14.w;
        let x_2290 : f32 = u_xlat7.x;
        let x_2292 : f32 = u_xlat69;
        u_xlat69 = ((x_2288 * x_2290) + x_2292);
        let x_2295 : vec4<f32> = u_xlat13;
        let x_2296 : vec2<f32> = vec2<f32>(x_2295.x, x_2295.y);
        let x_2298 : f32 = vs_INTERP9.z;
        txVec38 = vec3<f32>(x_2296.x, x_2296.y, x_2298);
        let x_2305 : vec3<f32> = txVec38;
        let x_2307 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2305.xy, x_2305.z);
        u_xlat7.x = x_2307;
        let x_2310 : f32 = u_xlat15.x;
        let x_2312 : f32 = u_xlat7.x;
        let x_2314 : f32 = u_xlat69;
        u_xlat69 = ((x_2310 * x_2312) + x_2314);
        let x_2317 : vec4<f32> = u_xlat13;
        let x_2318 : vec2<f32> = vec2<f32>(x_2317.z, x_2317.w);
        let x_2320 : f32 = vs_INTERP9.z;
        txVec39 = vec3<f32>(x_2318.x, x_2318.y, x_2320);
        let x_2327 : vec3<f32> = txVec39;
        let x_2329 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2327.xy, x_2327.z);
        u_xlat7.x = x_2329;
        let x_2332 : f32 = u_xlat15.y;
        let x_2334 : f32 = u_xlat7.x;
        let x_2336 : f32 = u_xlat69;
        u_xlat69 = ((x_2332 * x_2334) + x_2336);
        let x_2339 : vec4<f32> = u_xlat10;
        let x_2340 : vec2<f32> = vec2<f32>(x_2339.z, x_2339.w);
        let x_2342 : f32 = vs_INTERP9.z;
        txVec40 = vec3<f32>(x_2340.x, x_2340.y, x_2342);
        let x_2349 : vec3<f32> = txVec40;
        let x_2351 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2349.xy, x_2349.z);
        u_xlat7.x = x_2351;
        let x_2354 : f32 = u_xlat15.z;
        let x_2356 : f32 = u_xlat7.x;
        let x_2358 : f32 = u_xlat69;
        u_xlat69 = ((x_2354 * x_2356) + x_2358);
        let x_2361 : vec4<f32> = u_xlat9;
        let x_2362 : vec2<f32> = vec2<f32>(x_2361.x, x_2361.y);
        let x_2364 : f32 = vs_INTERP9.z;
        txVec41 = vec3<f32>(x_2362.x, x_2362.y, x_2364);
        let x_2371 : vec3<f32> = txVec41;
        let x_2373 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2371.xy, x_2371.z);
        u_xlat7.x = x_2373;
        let x_2376 : f32 = u_xlat15.w;
        let x_2378 : f32 = u_xlat7.x;
        let x_2380 : f32 = u_xlat69;
        u_xlat69 = ((x_2376 * x_2378) + x_2380);
        let x_2383 : vec4<f32> = u_xlat9;
        let x_2384 : vec2<f32> = vec2<f32>(x_2383.z, x_2383.w);
        let x_2386 : f32 = vs_INTERP9.z;
        txVec42 = vec3<f32>(x_2384.x, x_2384.y, x_2386);
        let x_2393 : vec3<f32> = txVec42;
        let x_2395 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2393.xy, x_2393.z);
        u_xlat7.x = x_2395;
        let x_2398 : f32 = u_xlat48.x;
        let x_2400 : f32 = u_xlat7.x;
        let x_2402 : f32 = u_xlat69;
        u_xlat63 = ((x_2398 * x_2400) + x_2402);
      } else {
        let x_2405 : vec4<f32> = vs_INTERP9;
        let x_2408 : vec4<f32> = x_139.x_MainLightShadowmapSize;
        u_xlat48 = ((vec2<f32>(x_2405.x, x_2405.y) * vec2<f32>(x_2408.z, x_2408.w)) + vec2<f32>(0.5f, 0.5f));
        let x_2412 : vec2<f32> = u_xlat48;
        u_xlat48 = floor(x_2412);
        let x_2414 : vec4<f32> = vs_INTERP9;
        let x_2417 : vec4<f32> = x_139.x_MainLightShadowmapSize;
        let x_2420 : vec2<f32> = u_xlat48;
        let x_2422 : vec2<f32> = ((vec2<f32>(x_2414.x, x_2414.y) * vec2<f32>(x_2417.z, x_2417.w)) + -(x_2420));
        let x_2423 : vec4<f32> = u_xlat7;
        u_xlat7 = vec4<f32>(x_2422.x, x_2422.y, x_2423.z, x_2423.w);
        let x_2425 : vec4<f32> = u_xlat7;
        u_xlat8 = (vec4<f32>(x_2425.x, x_2425.x, x_2425.y, x_2425.y) + vec4<f32>(0.5f, 1.0f, 0.5f, 1.0f));
        let x_2428 : vec4<f32> = u_xlat8;
        let x_2430 : vec4<f32> = u_xlat8;
        u_xlat9 = (vec4<f32>(x_2428.x, x_2428.x, x_2428.z, x_2428.z) * vec4<f32>(x_2430.x, x_2430.x, x_2430.z, x_2430.z));
        let x_2433 : vec4<f32> = u_xlat9;
        let x_2435 : vec2<f32> = (vec2<f32>(x_2433.y, x_2433.w) * vec2<f32>(0.040816002f, 0.040816002f));
        let x_2436 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_2436.x, x_2435.x, x_2436.z, x_2435.y);
        let x_2438 : vec4<f32> = u_xlat9;
        let x_2441 : vec4<f32> = u_xlat7;
        u_xlat49 = ((vec2<f32>(x_2438.x, x_2438.z) * vec2<f32>(0.5f, 0.5f)) + -(vec2<f32>(x_2441.x, x_2441.y)));
        let x_2445 : vec4<f32> = u_xlat7;
        let x_2448 : vec2<f32> = (-(vec2<f32>(x_2445.x, x_2445.y)) + vec2<f32>(1.0f, 1.0f));
        let x_2449 : vec4<f32> = u_xlat8;
        u_xlat8 = vec4<f32>(x_2448.x, x_2449.y, x_2448.y, x_2449.w);
        let x_2451 : vec4<f32> = u_xlat7;
        let x_2453 : vec2<f32> = min(vec2<f32>(x_2451.x, x_2451.y), vec2<f32>(0.0f, 0.0f));
        let x_2454 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_2453.x, x_2453.y, x_2454.z, x_2454.w);
        let x_2456 : vec4<f32> = u_xlat9;
        let x_2459 : vec4<f32> = u_xlat9;
        let x_2462 : vec4<f32> = u_xlat8;
        let x_2464 : vec2<f32> = ((-(vec2<f32>(x_2456.x, x_2456.y)) * vec2<f32>(x_2459.x, x_2459.y)) + vec2<f32>(x_2462.x, x_2462.z));
        let x_2465 : vec4<f32> = u_xlat8;
        u_xlat8 = vec4<f32>(x_2464.x, x_2465.y, x_2464.y, x_2465.w);
        let x_2467 : vec4<f32> = u_xlat7;
        let x_2469 : vec2<f32> = max(vec2<f32>(x_2467.x, x_2467.y), vec2<f32>(0.0f, 0.0f));
        let x_2470 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_2469.x, x_2469.y, x_2470.z, x_2470.w);
        let x_2472 : vec4<f32> = u_xlat9;
        let x_2475 : vec4<f32> = u_xlat9;
        let x_2478 : vec4<f32> = u_xlat8;
        let x_2480 : vec2<f32> = ((-(vec2<f32>(x_2472.x, x_2472.y)) * vec2<f32>(x_2475.x, x_2475.y)) + vec2<f32>(x_2478.y, x_2478.w));
        let x_2481 : vec4<f32> = u_xlat8;
        u_xlat8 = vec4<f32>(x_2481.x, x_2480.x, x_2481.z, x_2480.y);
        let x_2483 : vec4<f32> = u_xlat8;
        u_xlat8 = (x_2483 + vec4<f32>(2.0f, 2.0f, 2.0f, 2.0f));
        let x_2486 : f32 = u_xlat8.y;
        u_xlat9.z = (x_2486 * 0.081632003f);
        let x_2489 : vec2<f32> = u_xlat49;
        let x_2491 : vec2<f32> = (vec2<f32>(x_2489.y, x_2489.x) * vec2<f32>(0.081632003f, 0.081632003f));
        let x_2492 : vec4<f32> = u_xlat11;
        u_xlat11 = vec4<f32>(x_2491.x, x_2491.y, x_2492.z, x_2492.w);
        let x_2494 : vec4<f32> = u_xlat8;
        u_xlat49 = (vec2<f32>(x_2494.x, x_2494.z) * vec2<f32>(0.081632003f, 0.081632003f));
        let x_2498 : f32 = u_xlat8.w;
        u_xlat11.z = (x_2498 * 0.081632003f);
        let x_2502 : f32 = u_xlat11.y;
        u_xlat9.x = x_2502;
        let x_2504 : vec4<f32> = u_xlat7;
        let x_2507 : vec2<f32> = ((vec2<f32>(x_2504.x, x_2504.x) * vec2<f32>(-0.081632003f, 0.081632003f)) + vec2<f32>(0.163264006f, 0.081632003f));
        let x_2508 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_2508.x, x_2507.x, x_2508.z, x_2507.y);
        let x_2510 : vec4<f32> = u_xlat7;
        let x_2513 : vec2<f32> = ((vec2<f32>(x_2510.x, x_2510.x) * vec2<f32>(-0.081632003f, 0.081632003f)) + vec2<f32>(0.081632003f, 0.163264006f));
        let x_2514 : vec4<f32> = u_xlat8;
        u_xlat8 = vec4<f32>(x_2513.x, x_2514.y, x_2513.y, x_2514.w);
        let x_2517 : f32 = u_xlat49.x;
        u_xlat8.y = x_2517;
        let x_2520 : f32 = u_xlat10.y;
        u_xlat8.w = x_2520;
        let x_2522 : vec4<f32> = u_xlat8;
        let x_2523 : vec4<f32> = u_xlat9;
        u_xlat9 = (x_2522 + x_2523);
        let x_2525 : vec4<f32> = u_xlat7;
        let x_2528 : vec2<f32> = ((vec2<f32>(x_2525.y, x_2525.y) * vec2<f32>(-0.081632003f, 0.081632003f)) + vec2<f32>(0.163264006f, 0.081632003f));
        let x_2529 : vec4<f32> = u_xlat11;
        u_xlat11 = vec4<f32>(x_2529.x, x_2528.x, x_2529.z, x_2528.y);
        let x_2531 : vec4<f32> = u_xlat7;
        let x_2534 : vec2<f32> = ((vec2<f32>(x_2531.y, x_2531.y) * vec2<f32>(-0.081632003f, 0.081632003f)) + vec2<f32>(0.081632003f, 0.163264006f));
        let x_2535 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_2534.x, x_2535.y, x_2534.y, x_2535.w);
        let x_2538 : f32 = u_xlat49.y;
        u_xlat10.y = x_2538;
        let x_2540 : vec4<f32> = u_xlat10;
        let x_2541 : vec4<f32> = u_xlat11;
        u_xlat7 = (x_2540 + x_2541);
        let x_2543 : vec4<f32> = u_xlat8;
        let x_2544 : vec4<f32> = u_xlat9;
        u_xlat8 = (x_2543 / x_2544);
        let x_2546 : vec4<f32> = u_xlat8;
        u_xlat8 = (x_2546 + vec4<f32>(-3.5f, -1.5f, 0.5f, 2.5f));
        let x_2548 : vec4<f32> = u_xlat10;
        let x_2549 : vec4<f32> = u_xlat7;
        u_xlat10 = (x_2548 / x_2549);
        let x_2551 : vec4<f32> = u_xlat10;
        u_xlat10 = (x_2551 + vec4<f32>(-3.5f, -1.5f, 0.5f, 2.5f));
        let x_2553 : vec4<f32> = u_xlat8;
        let x_2556 : vec4<f32> = x_139.x_MainLightShadowmapSize;
        u_xlat8 = (vec4<f32>(x_2553.w, x_2553.x, x_2553.y, x_2553.z) * vec4<f32>(x_2556.x, x_2556.x, x_2556.x, x_2556.x));
        let x_2559 : vec4<f32> = u_xlat10;
        let x_2562 : vec4<f32> = x_139.x_MainLightShadowmapSize;
        u_xlat10 = (vec4<f32>(x_2559.x, x_2559.w, x_2559.y, x_2559.z) * vec4<f32>(x_2562.y, x_2562.y, x_2562.y, x_2562.y));
        let x_2565 : vec4<f32> = u_xlat8;
        let x_2566 : vec3<f32> = vec3<f32>(x_2565.y, x_2565.z, x_2565.w);
        let x_2567 : vec4<f32> = u_xlat11;
        u_xlat11 = vec4<f32>(x_2566.x, x_2567.y, x_2566.y, x_2566.z);
        let x_2570 : f32 = u_xlat10.x;
        u_xlat11.y = x_2570;
        let x_2572 : vec2<f32> = u_xlat48;
        let x_2575 : vec4<f32> = x_139.x_MainLightShadowmapSize;
        let x_2578 : vec4<f32> = u_xlat11;
        u_xlat12 = ((vec4<f32>(x_2572.x, x_2572.y, x_2572.x, x_2572.y) * vec4<f32>(x_2575.x, x_2575.y, x_2575.x, x_2575.y)) + vec4<f32>(x_2578.x, x_2578.y, x_2578.z, x_2578.y));
        let x_2581 : vec2<f32> = u_xlat48;
        let x_2583 : vec4<f32> = x_139.x_MainLightShadowmapSize;
        let x_2586 : vec4<f32> = u_xlat11;
        let x_2588 : vec2<f32> = ((x_2581 * vec2<f32>(x_2583.x, x_2583.y)) + vec2<f32>(x_2586.w, x_2586.y));
        let x_2589 : vec4<f32> = u_xlat13;
        u_xlat13 = vec4<f32>(x_2588.x, x_2588.y, x_2589.z, x_2589.w);
        let x_2592 : f32 = u_xlat11.y;
        u_xlat8.y = x_2592;
        let x_2595 : f32 = u_xlat10.z;
        u_xlat11.y = x_2595;
        let x_2597 : vec2<f32> = u_xlat48;
        let x_2600 : vec4<f32> = x_139.x_MainLightShadowmapSize;
        let x_2603 : vec4<f32> = u_xlat11;
        u_xlat14 = ((vec4<f32>(x_2597.x, x_2597.y, x_2597.x, x_2597.y) * vec4<f32>(x_2600.x, x_2600.y, x_2600.x, x_2600.y)) + vec4<f32>(x_2603.x, x_2603.y, x_2603.z, x_2603.y));
        let x_2606 : vec2<f32> = u_xlat48;
        let x_2608 : vec4<f32> = x_139.x_MainLightShadowmapSize;
        let x_2611 : vec4<f32> = u_xlat11;
        u_xlat55 = ((x_2606 * vec2<f32>(x_2608.x, x_2608.y)) + vec2<f32>(x_2611.w, x_2611.y));
        let x_2615 : f32 = u_xlat11.y;
        u_xlat8.z = x_2615;
        let x_2617 : vec2<f32> = u_xlat48;
        let x_2620 : vec4<f32> = x_139.x_MainLightShadowmapSize;
        let x_2623 : vec4<f32> = u_xlat8;
        u_xlat15 = ((vec4<f32>(x_2617.x, x_2617.y, x_2617.x, x_2617.y) * vec4<f32>(x_2620.x, x_2620.y, x_2620.x, x_2620.y)) + vec4<f32>(x_2623.x, x_2623.y, x_2623.x, x_2623.z));
        let x_2627 : f32 = u_xlat10.w;
        u_xlat11.y = x_2627;
        let x_2629 : vec2<f32> = u_xlat48;
        let x_2632 : vec4<f32> = x_139.x_MainLightShadowmapSize;
        let x_2635 : vec4<f32> = u_xlat11;
        u_xlat16 = ((vec4<f32>(x_2629.x, x_2629.y, x_2629.x, x_2629.y) * vec4<f32>(x_2632.x, x_2632.y, x_2632.x, x_2632.y)) + vec4<f32>(x_2635.x, x_2635.y, x_2635.z, x_2635.y));
        let x_2639 : vec2<f32> = u_xlat48;
        let x_2641 : vec4<f32> = x_139.x_MainLightShadowmapSize;
        let x_2644 : vec4<f32> = u_xlat11;
        u_xlat29 = ((x_2639 * vec2<f32>(x_2641.x, x_2641.y)) + vec2<f32>(x_2644.w, x_2644.y));
        let x_2648 : f32 = u_xlat11.y;
        u_xlat8.w = x_2648;
        let x_2650 : vec2<f32> = u_xlat48;
        let x_2652 : vec4<f32> = x_139.x_MainLightShadowmapSize;
        let x_2655 : vec4<f32> = u_xlat8;
        let x_2657 : vec2<f32> = ((x_2650 * vec2<f32>(x_2652.x, x_2652.y)) + vec2<f32>(x_2655.x, x_2655.w));
        let x_2658 : vec4<f32> = u_xlat17;
        u_xlat17 = vec4<f32>(x_2657.x, x_2657.y, x_2658.z, x_2658.w);
        let x_2660 : vec4<f32> = u_xlat11;
        let x_2661 : vec3<f32> = vec3<f32>(x_2660.x, x_2660.z, x_2660.w);
        let x_2662 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_2661.x, x_2662.y, x_2661.y, x_2661.z);
        let x_2664 : vec2<f32> = u_xlat48;
        let x_2667 : vec4<f32> = x_139.x_MainLightShadowmapSize;
        let x_2670 : vec4<f32> = u_xlat10;
        u_xlat11 = ((vec4<f32>(x_2664.x, x_2664.y, x_2664.x, x_2664.y) * vec4<f32>(x_2667.x, x_2667.y, x_2667.x, x_2667.y)) + vec4<f32>(x_2670.x, x_2670.y, x_2670.z, x_2670.y));
        let x_2674 : vec2<f32> = u_xlat48;
        let x_2676 : vec4<f32> = x_139.x_MainLightShadowmapSize;
        let x_2679 : vec4<f32> = u_xlat10;
        u_xlat52 = ((x_2674 * vec2<f32>(x_2676.x, x_2676.y)) + vec2<f32>(x_2679.w, x_2679.y));
        let x_2683 : f32 = u_xlat8.x;
        u_xlat10.x = x_2683;
        let x_2685 : vec2<f32> = u_xlat48;
        let x_2687 : vec4<f32> = x_139.x_MainLightShadowmapSize;
        let x_2690 : vec4<f32> = u_xlat10;
        u_xlat48 = ((x_2685 * vec2<f32>(x_2687.x, x_2687.y)) + vec2<f32>(x_2690.x, x_2690.y));
        let x_2693 : vec4<f32> = u_xlat7;
        let x_2695 : vec4<f32> = u_xlat9;
        u_xlat18 = (vec4<f32>(x_2693.x, x_2693.x, x_2693.x, x_2693.x) * x_2695);
        let x_2698 : vec4<f32> = u_xlat7;
        let x_2700 : vec4<f32> = u_xlat9;
        u_xlat19 = (vec4<f32>(x_2698.y, x_2698.y, x_2698.y, x_2698.y) * x_2700);
        let x_2703 : vec4<f32> = u_xlat7;
        let x_2705 : vec4<f32> = u_xlat9;
        u_xlat20 = (vec4<f32>(x_2703.z, x_2703.z, x_2703.z, x_2703.z) * x_2705);
        let x_2707 : vec4<f32> = u_xlat7;
        let x_2709 : vec4<f32> = u_xlat9;
        u_xlat7 = (vec4<f32>(x_2707.w, x_2707.w, x_2707.w, x_2707.w) * x_2709);
        let x_2712 : vec4<f32> = u_xlat12;
        let x_2713 : vec2<f32> = vec2<f32>(x_2712.x, x_2712.y);
        let x_2715 : f32 = vs_INTERP9.z;
        txVec43 = vec3<f32>(x_2713.x, x_2713.y, x_2715);
        let x_2722 : vec3<f32> = txVec43;
        let x_2724 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2722.xy, x_2722.z);
        u_xlat8.x = x_2724;
        let x_2727 : vec4<f32> = u_xlat12;
        let x_2728 : vec2<f32> = vec2<f32>(x_2727.z, x_2727.w);
        let x_2730 : f32 = vs_INTERP9.z;
        txVec44 = vec3<f32>(x_2728.x, x_2728.y, x_2730);
        let x_2738 : vec3<f32> = txVec44;
        let x_2740 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2738.xy, x_2738.z);
        u_xlat71 = x_2740;
        let x_2741 : f32 = u_xlat71;
        let x_2743 : f32 = u_xlat18.y;
        u_xlat71 = (x_2741 * x_2743);
        let x_2746 : f32 = u_xlat18.x;
        let x_2748 : f32 = u_xlat8.x;
        let x_2750 : f32 = u_xlat71;
        u_xlat8.x = ((x_2746 * x_2748) + x_2750);
        let x_2754 : vec4<f32> = u_xlat13;
        let x_2755 : vec2<f32> = vec2<f32>(x_2754.x, x_2754.y);
        let x_2757 : f32 = vs_INTERP9.z;
        txVec45 = vec3<f32>(x_2755.x, x_2755.y, x_2757);
        let x_2764 : vec3<f32> = txVec45;
        let x_2766 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2764.xy, x_2764.z);
        u_xlat71 = x_2766;
        let x_2768 : f32 = u_xlat18.z;
        let x_2769 : f32 = u_xlat71;
        let x_2772 : f32 = u_xlat8.x;
        u_xlat8.x = ((x_2768 * x_2769) + x_2772);
        let x_2776 : vec4<f32> = u_xlat15;
        let x_2777 : vec2<f32> = vec2<f32>(x_2776.x, x_2776.y);
        let x_2779 : f32 = vs_INTERP9.z;
        txVec46 = vec3<f32>(x_2777.x, x_2777.y, x_2779);
        let x_2786 : vec3<f32> = txVec46;
        let x_2788 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2786.xy, x_2786.z);
        u_xlat71 = x_2788;
        let x_2790 : f32 = u_xlat18.w;
        let x_2791 : f32 = u_xlat71;
        let x_2794 : f32 = u_xlat8.x;
        u_xlat8.x = ((x_2790 * x_2791) + x_2794);
        let x_2798 : vec4<f32> = u_xlat14;
        let x_2799 : vec2<f32> = vec2<f32>(x_2798.x, x_2798.y);
        let x_2801 : f32 = vs_INTERP9.z;
        txVec47 = vec3<f32>(x_2799.x, x_2799.y, x_2801);
        let x_2808 : vec3<f32> = txVec47;
        let x_2810 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2808.xy, x_2808.z);
        u_xlat71 = x_2810;
        let x_2812 : f32 = u_xlat19.x;
        let x_2813 : f32 = u_xlat71;
        let x_2816 : f32 = u_xlat8.x;
        u_xlat8.x = ((x_2812 * x_2813) + x_2816);
        let x_2820 : vec4<f32> = u_xlat14;
        let x_2821 : vec2<f32> = vec2<f32>(x_2820.z, x_2820.w);
        let x_2823 : f32 = vs_INTERP9.z;
        txVec48 = vec3<f32>(x_2821.x, x_2821.y, x_2823);
        let x_2830 : vec3<f32> = txVec48;
        let x_2832 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2830.xy, x_2830.z);
        u_xlat71 = x_2832;
        let x_2834 : f32 = u_xlat19.y;
        let x_2835 : f32 = u_xlat71;
        let x_2838 : f32 = u_xlat8.x;
        u_xlat8.x = ((x_2834 * x_2835) + x_2838);
        let x_2842 : vec2<f32> = u_xlat55;
        let x_2844 : f32 = vs_INTERP9.z;
        txVec49 = vec3<f32>(x_2842.x, x_2842.y, x_2844);
        let x_2851 : vec3<f32> = txVec49;
        let x_2853 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2851.xy, x_2851.z);
        u_xlat71 = x_2853;
        let x_2855 : f32 = u_xlat19.z;
        let x_2856 : f32 = u_xlat71;
        let x_2859 : f32 = u_xlat8.x;
        u_xlat8.x = ((x_2855 * x_2856) + x_2859);
        let x_2863 : vec4<f32> = u_xlat15;
        let x_2864 : vec2<f32> = vec2<f32>(x_2863.z, x_2863.w);
        let x_2866 : f32 = vs_INTERP9.z;
        txVec50 = vec3<f32>(x_2864.x, x_2864.y, x_2866);
        let x_2873 : vec3<f32> = txVec50;
        let x_2875 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2873.xy, x_2873.z);
        u_xlat71 = x_2875;
        let x_2877 : f32 = u_xlat19.w;
        let x_2878 : f32 = u_xlat71;
        let x_2881 : f32 = u_xlat8.x;
        u_xlat8.x = ((x_2877 * x_2878) + x_2881);
        let x_2885 : vec4<f32> = u_xlat16;
        let x_2886 : vec2<f32> = vec2<f32>(x_2885.x, x_2885.y);
        let x_2888 : f32 = vs_INTERP9.z;
        txVec51 = vec3<f32>(x_2886.x, x_2886.y, x_2888);
        let x_2895 : vec3<f32> = txVec51;
        let x_2897 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2895.xy, x_2895.z);
        u_xlat71 = x_2897;
        let x_2899 : f32 = u_xlat20.x;
        let x_2900 : f32 = u_xlat71;
        let x_2903 : f32 = u_xlat8.x;
        u_xlat8.x = ((x_2899 * x_2900) + x_2903);
        let x_2907 : vec4<f32> = u_xlat16;
        let x_2908 : vec2<f32> = vec2<f32>(x_2907.z, x_2907.w);
        let x_2910 : f32 = vs_INTERP9.z;
        txVec52 = vec3<f32>(x_2908.x, x_2908.y, x_2910);
        let x_2917 : vec3<f32> = txVec52;
        let x_2919 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2917.xy, x_2917.z);
        u_xlat71 = x_2919;
        let x_2921 : f32 = u_xlat20.y;
        let x_2922 : f32 = u_xlat71;
        let x_2925 : f32 = u_xlat8.x;
        u_xlat8.x = ((x_2921 * x_2922) + x_2925);
        let x_2929 : vec2<f32> = u_xlat29;
        let x_2931 : f32 = vs_INTERP9.z;
        txVec53 = vec3<f32>(x_2929.x, x_2929.y, x_2931);
        let x_2938 : vec3<f32> = txVec53;
        let x_2940 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2938.xy, x_2938.z);
        u_xlat29.x = x_2940;
        let x_2943 : f32 = u_xlat20.z;
        let x_2945 : f32 = u_xlat29.x;
        let x_2948 : f32 = u_xlat8.x;
        u_xlat8.x = ((x_2943 * x_2945) + x_2948);
        let x_2952 : vec4<f32> = u_xlat17;
        let x_2953 : vec2<f32> = vec2<f32>(x_2952.x, x_2952.y);
        let x_2955 : f32 = vs_INTERP9.z;
        txVec54 = vec3<f32>(x_2953.x, x_2953.y, x_2955);
        let x_2962 : vec3<f32> = txVec54;
        let x_2964 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2962.xy, x_2962.z);
        u_xlat29.x = x_2964;
        let x_2967 : f32 = u_xlat20.w;
        let x_2969 : f32 = u_xlat29.x;
        let x_2972 : f32 = u_xlat8.x;
        u_xlat8.x = ((x_2967 * x_2969) + x_2972);
        let x_2976 : vec4<f32> = u_xlat11;
        let x_2977 : vec2<f32> = vec2<f32>(x_2976.x, x_2976.y);
        let x_2979 : f32 = vs_INTERP9.z;
        txVec55 = vec3<f32>(x_2977.x, x_2977.y, x_2979);
        let x_2986 : vec3<f32> = txVec55;
        let x_2988 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2986.xy, x_2986.z);
        u_xlat29.x = x_2988;
        let x_2991 : f32 = u_xlat7.x;
        let x_2993 : f32 = u_xlat29.x;
        let x_2996 : f32 = u_xlat8.x;
        u_xlat7.x = ((x_2991 * x_2993) + x_2996);
        let x_3000 : vec4<f32> = u_xlat11;
        let x_3001 : vec2<f32> = vec2<f32>(x_3000.z, x_3000.w);
        let x_3003 : f32 = vs_INTERP9.z;
        txVec56 = vec3<f32>(x_3001.x, x_3001.y, x_3003);
        let x_3010 : vec3<f32> = txVec56;
        let x_3012 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_3010.xy, x_3010.z);
        u_xlat8.x = x_3012;
        let x_3015 : f32 = u_xlat7.y;
        let x_3017 : f32 = u_xlat8.x;
        let x_3020 : f32 = u_xlat7.x;
        u_xlat7.x = ((x_3015 * x_3017) + x_3020);
        let x_3024 : vec2<f32> = u_xlat52;
        let x_3026 : f32 = vs_INTERP9.z;
        txVec57 = vec3<f32>(x_3024.x, x_3024.y, x_3026);
        let x_3033 : vec3<f32> = txVec57;
        let x_3035 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_3033.xy, x_3033.z);
        u_xlat28.x = x_3035;
        let x_3038 : f32 = u_xlat7.z;
        let x_3040 : f32 = u_xlat28.x;
        let x_3043 : f32 = u_xlat7.x;
        u_xlat7.x = ((x_3038 * x_3040) + x_3043);
        let x_3047 : vec2<f32> = u_xlat48;
        let x_3049 : f32 = vs_INTERP9.z;
        txVec58 = vec3<f32>(x_3047.x, x_3047.y, x_3049);
        let x_3056 : vec3<f32> = txVec58;
        let x_3058 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_3056.xy, x_3056.z);
        u_xlat48.x = x_3058;
        let x_3061 : f32 = u_xlat7.w;
        let x_3063 : f32 = u_xlat48.x;
        let x_3066 : f32 = u_xlat7.x;
        u_xlat63 = ((x_3061 * x_3063) + x_3066);
      }
    }
  } else {
    let x_3070 : vec4<f32> = vs_INTERP9;
    let x_3071 : vec2<f32> = vec2<f32>(x_3070.x, x_3070.y);
    let x_3073 : f32 = vs_INTERP9.z;
    txVec59 = vec3<f32>(x_3071.x, x_3071.y, x_3073);
    let x_3080 : vec3<f32> = txVec59;
    let x_3082 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_3080.xy, x_3080.z);
    u_xlat63 = x_3082;
  }
  let x_3083 : f32 = u_xlat63;
  let x_3085 : f32 = x_139.x_MainLightShadowParams.x;
  let x_3088 : f32 = u_xlat4.x;
  u_xlat63 = ((x_3083 * x_3085) + x_3088);
  let x_3092 : f32 = vs_INTERP9.z;
  u_xlatb4 = (0.0f >= x_3092);
  let x_3095 : f32 = vs_INTERP9.z;
  u_xlatb48 = (x_3095 >= 1.0f);
  let x_3097 : bool = u_xlatb4;
  let x_3098 : bool = u_xlatb48;
  u_xlatb4 = (x_3097 | x_3098);
  let x_3100 : bool = u_xlatb4;
  let x_3101 : f32 = u_xlat63;
  u_xlat63 = select(x_3101, 1.0f, x_3100);
  let x_3103 : vec3<f32> = vs_INTERP0;
  let x_3105 : vec3<f32> = x_66.x_WorldSpaceCameraPos;
  let x_3107 : vec3<f32> = (x_3103 + -(x_3105));
  let x_3108 : vec4<f32> = u_xlat7;
  u_xlat7 = vec4<f32>(x_3107.x, x_3107.y, x_3107.z, x_3108.w);
  let x_3110 : vec4<f32> = u_xlat7;
  let x_3112 : vec4<f32> = u_xlat7;
  u_xlat4.x = dot(vec3<f32>(x_3110.x, x_3110.y, x_3110.z), vec3<f32>(x_3112.x, x_3112.y, x_3112.z));
  let x_3117 : f32 = u_xlat4.x;
  let x_3119 : f32 = x_139.x_MainLightShadowParams.z;
  let x_3122 : f32 = x_139.x_MainLightShadowParams.w;
  u_xlat4.x = ((x_3117 * x_3119) + x_3122);
  let x_3126 : f32 = u_xlat4.x;
  u_xlat4.x = clamp(x_3126, 0.0f, 1.0f);
  let x_3129 : f32 = u_xlat63;
  u_xlat48.x = (-(x_3129) + 1.0f);
  let x_3134 : f32 = u_xlat4.x;
  let x_3136 : f32 = u_xlat48.x;
  let x_3138 : f32 = u_xlat63;
  u_xlat63 = ((x_3134 * x_3136) + x_3138);
  let x_3140 : vec3<f32> = u_xlat27;
  let x_3143 : vec4<f32> = x_66.x_MainLightColor;
  let x_3145 : vec3<f32> = (vec3<f32>(x_3140.x, x_3140.x, x_3140.x) * vec3<f32>(x_3143.x, x_3143.y, x_3143.z));
  let x_3146 : vec4<f32> = u_xlat7;
  u_xlat7 = vec4<f32>(x_3145.x, x_3145.y, x_3145.z, x_3146.w);
  let x_3148 : vec4<f32> = u_xlat5;
  let x_3151 : vec3<f32> = u_xlat24;
  u_xlat4.x = dot(-(vec3<f32>(x_3148.x, x_3148.y, x_3148.z)), x_3151);
  let x_3155 : f32 = u_xlat4.x;
  let x_3157 : f32 = u_xlat4.x;
  u_xlat4.x = (x_3155 + x_3157);
  let x_3160 : vec3<f32> = u_xlat24;
  let x_3161 : vec4<f32> = u_xlat4;
  let x_3165 : vec4<f32> = u_xlat5;
  let x_3168 : vec3<f32> = ((x_3160 * -(vec3<f32>(x_3161.x, x_3161.x, x_3161.x))) + -(vec3<f32>(x_3165.x, x_3165.y, x_3165.z)));
  let x_3169 : vec4<f32> = u_xlat8;
  u_xlat8 = vec4<f32>(x_3168.x, x_3168.y, x_3168.z, x_3169.w);
  let x_3171 : vec3<f32> = u_xlat24;
  let x_3172 : vec4<f32> = u_xlat5;
  u_xlat4.x = dot(x_3171, vec3<f32>(x_3172.x, x_3172.y, x_3172.z));
  let x_3177 : f32 = u_xlat4.x;
  u_xlat4.x = clamp(x_3177, 0.0f, 1.0f);
  let x_3181 : f32 = u_xlat4.x;
  u_xlat4.x = (-(x_3181) + 1.0f);
  let x_3186 : f32 = u_xlat4.x;
  let x_3188 : f32 = u_xlat4.x;
  u_xlat4.x = (x_3186 * x_3188);
  let x_3192 : f32 = u_xlat4.x;
  let x_3194 : f32 = u_xlat4.x;
  u_xlat4.x = (x_3192 * x_3194);
  let x_3198 : f32 = u_xlat22.x;
  u_xlat48.x = ((-(x_3198) * 0.699999988f) + 1.700000048f);
  let x_3206 : f32 = u_xlat22.x;
  let x_3208 : f32 = u_xlat48.x;
  u_xlat22.x = (x_3206 * x_3208);
  let x_3212 : f32 = u_xlat22.x;
  u_xlat22.x = (x_3212 * 6.0f);
  let x_3224 : vec4<f32> = u_xlat8;
  let x_3227 : f32 = u_xlat22.x;
  let x_3228 : vec4<f32> = textureSampleLevel(unity_SpecCube0, samplerunity_SpecCube0, vec3<f32>(x_3224.x, x_3224.y, x_3224.z), x_3227);
  u_xlat8 = x_3228;
  let x_3230 : f32 = u_xlat8.w;
  u_xlat22.x = (x_3230 + -1.0f);
  let x_3234 : f32 = x_1592.unity_SpecCube0_HDR.w;
  let x_3236 : f32 = u_xlat22.x;
  u_xlat22.x = ((x_3234 * x_3236) + 1.0f);
  let x_3241 : f32 = u_xlat22.x;
  u_xlat22.x = max(x_3241, 0.0f);
  let x_3245 : f32 = u_xlat22.x;
  u_xlat22.x = log2(x_3245);
  let x_3249 : f32 = u_xlat22.x;
  let x_3251 : f32 = x_1592.unity_SpecCube0_HDR.y;
  u_xlat22.x = (x_3249 * x_3251);
  let x_3255 : f32 = u_xlat22.x;
  u_xlat22.x = exp2(x_3255);
  let x_3259 : f32 = u_xlat22.x;
  let x_3261 : f32 = x_1592.unity_SpecCube0_HDR.x;
  u_xlat22.x = (x_3259 * x_3261);
  let x_3264 : vec4<f32> = u_xlat8;
  let x_3266 : vec3<f32> = u_xlat22;
  let x_3268 : vec3<f32> = (vec3<f32>(x_3264.x, x_3264.y, x_3264.z) * vec3<f32>(x_3266.x, x_3266.x, x_3266.x));
  let x_3269 : vec4<f32> = u_xlat8;
  u_xlat8 = vec4<f32>(x_3268.x, x_3268.y, x_3268.z, x_3269.w);
  let x_3271 : f32 = u_xlat64;
  let x_3273 : f32 = u_xlat64;
  let x_3277 : vec2<f32> = ((vec2<f32>(x_3271, x_3271) * vec2<f32>(x_3273, x_3273)) + vec2<f32>(-1.0f, 1.0f));
  let x_3278 : vec3<f32> = u_xlat22;
  u_xlat22 = vec3<f32>(x_3277.x, x_3278.y, x_3277.y);
  let x_3281 : f32 = u_xlat22.z;
  u_xlat64 = (1.0f / x_3281);
  let x_3284 : f32 = u_xlat3.x;
  u_xlat3.x = (x_3284 + -0.039999999f);
  let x_3289 : f32 = u_xlat4.x;
  let x_3291 : f32 = u_xlat3.x;
  u_xlat3.x = ((x_3289 * x_3291) + 0.039999999f);
  let x_3296 : f32 = u_xlat64;
  let x_3298 : f32 = u_xlat3.x;
  u_xlat64 = (x_3296 * x_3298);
  let x_3300 : f32 = u_xlat64;
  let x_3302 : vec4<f32> = u_xlat8;
  let x_3304 : vec3<f32> = (vec3<f32>(x_3300, x_3300, x_3300) * vec3<f32>(x_3302.x, x_3302.y, x_3302.z));
  let x_3305 : vec4<f32> = u_xlat8;
  u_xlat8 = vec4<f32>(x_3304.x, x_3304.y, x_3304.z, x_3305.w);
  let x_3307 : vec3<f32> = u_xlat25;
  let x_3308 : vec3<f32> = u_xlat2;
  let x_3310 : vec4<f32> = u_xlat8;
  let x_3312 : vec3<f32> = ((x_3307 * x_3308) + vec3<f32>(x_3310.x, x_3310.y, x_3310.z));
  let x_3313 : vec4<f32> = u_xlat4;
  u_xlat4 = vec4<f32>(x_3312.x, x_3312.y, x_3312.z, x_3313.w);
  let x_3315 : f32 = u_xlat63;
  let x_3317 : f32 = x_1592.unity_LightData.z;
  u_xlat63 = (x_3315 * x_3317);
  let x_3319 : vec3<f32> = u_xlat24;
  let x_3321 : vec4<f32> = x_66.x_MainLightPosition;
  u_xlat64 = dot(x_3319, vec3<f32>(x_3321.x, x_3321.y, x_3321.z));
  let x_3324 : f32 = u_xlat64;
  u_xlat64 = clamp(x_3324, 0.0f, 1.0f);
  let x_3326 : f32 = u_xlat63;
  let x_3327 : f32 = u_xlat64;
  u_xlat63 = (x_3326 * x_3327);
  let x_3329 : f32 = u_xlat63;
  let x_3331 : vec4<f32> = u_xlat7;
  let x_3333 : vec3<f32> = (vec3<f32>(x_3329, x_3329, x_3329) * vec3<f32>(x_3331.x, x_3331.y, x_3331.z));
  let x_3334 : vec4<f32> = u_xlat7;
  u_xlat7 = vec4<f32>(x_3333.x, x_3333.y, x_3333.z, x_3334.w);
  let x_3336 : vec4<f32> = u_xlat5;
  let x_3339 : vec4<f32> = x_66.x_MainLightPosition;
  let x_3341 : vec3<f32> = (vec3<f32>(x_3336.x, x_3336.y, x_3336.z) + vec3<f32>(x_3339.x, x_3339.y, x_3339.z));
  let x_3342 : vec4<f32> = u_xlat8;
  u_xlat8 = vec4<f32>(x_3341.x, x_3341.y, x_3341.z, x_3342.w);
  let x_3344 : vec4<f32> = u_xlat8;
  let x_3346 : vec4<f32> = u_xlat8;
  u_xlat63 = dot(vec3<f32>(x_3344.x, x_3344.y, x_3344.z), vec3<f32>(x_3346.x, x_3346.y, x_3346.z));
  let x_3349 : f32 = u_xlat63;
  u_xlat63 = max(x_3349, 1.17549435e-37f);
  let x_3352 : f32 = u_xlat63;
  u_xlat63 = inverseSqrt(x_3352);
  let x_3354 : f32 = u_xlat63;
  let x_3356 : vec4<f32> = u_xlat8;
  let x_3358 : vec3<f32> = (vec3<f32>(x_3354, x_3354, x_3354) * vec3<f32>(x_3356.x, x_3356.y, x_3356.z));
  let x_3359 : vec4<f32> = u_xlat8;
  u_xlat8 = vec4<f32>(x_3358.x, x_3358.y, x_3358.z, x_3359.w);
  let x_3361 : vec3<f32> = u_xlat24;
  let x_3362 : vec4<f32> = u_xlat8;
  u_xlat63 = dot(x_3361, vec3<f32>(x_3362.x, x_3362.y, x_3362.z));
  let x_3365 : f32 = u_xlat63;
  u_xlat63 = clamp(x_3365, 0.0f, 1.0f);
  let x_3368 : vec4<f32> = x_66.x_MainLightPosition;
  let x_3370 : vec4<f32> = u_xlat8;
  u_xlat64 = dot(vec3<f32>(x_3368.x, x_3368.y, x_3368.z), vec3<f32>(x_3370.x, x_3370.y, x_3370.z));
  let x_3373 : f32 = u_xlat64;
  u_xlat64 = clamp(x_3373, 0.0f, 1.0f);
  let x_3375 : f32 = u_xlat63;
  let x_3376 : f32 = u_xlat63;
  u_xlat63 = (x_3375 * x_3376);
  let x_3378 : f32 = u_xlat63;
  let x_3380 : f32 = u_xlat22.x;
  u_xlat63 = ((x_3378 * x_3380) + 1.000010014f);
  let x_3384 : f32 = u_xlat64;
  let x_3385 : f32 = u_xlat64;
  u_xlat64 = (x_3384 * x_3385);
  let x_3387 : f32 = u_xlat63;
  let x_3388 : f32 = u_xlat63;
  u_xlat63 = (x_3387 * x_3388);
  let x_3390 : f32 = u_xlat64;
  u_xlat64 = max(x_3390, 0.100000001f);
  let x_3393 : f32 = u_xlat63;
  let x_3394 : f32 = u_xlat64;
  u_xlat63 = (x_3393 * x_3394);
  let x_3396 : f32 = u_xlat68;
  let x_3397 : f32 = u_xlat63;
  u_xlat63 = (x_3396 * x_3397);
  let x_3399 : f32 = u_xlat65;
  let x_3400 : f32 = u_xlat63;
  u_xlat63 = (x_3399 / x_3400);
  let x_3402 : f32 = u_xlat63;
  let x_3406 : vec3<f32> = u_xlat2;
  let x_3407 : vec3<f32> = ((vec3<f32>(x_3402, x_3402, x_3402) * vec3<f32>(0.039999999f, 0.039999999f, 0.039999999f)) + x_3406);
  let x_3408 : vec4<f32> = u_xlat8;
  u_xlat8 = vec4<f32>(x_3407.x, x_3407.y, x_3407.z, x_3408.w);
  let x_3410 : vec4<f32> = u_xlat7;
  let x_3412 : vec4<f32> = u_xlat8;
  let x_3414 : vec3<f32> = (vec3<f32>(x_3410.x, x_3410.y, x_3410.z) * vec3<f32>(x_3412.x, x_3412.y, x_3412.z));
  let x_3415 : vec4<f32> = u_xlat7;
  u_xlat7 = vec4<f32>(x_3414.x, x_3414.y, x_3414.z, x_3415.w);
  let x_3418 : f32 = x_66.x_AdditionalLightsCount.x;
  let x_3420 : f32 = x_1592.unity_LightData.y;
  u_xlat63 = min(x_3418, x_3420);
  let x_3424 : f32 = u_xlat63;
  u_xlatu63 = bitcast<u32>(i32(x_3424));
  u_xlat8.x = 0.0f;
  u_xlat8.y = 0.0f;
  u_xlat8.z = 0.0f;
  u_xlatu_loop_1 = 0u;
  loop {
    let x_3436 : u32 = u_xlatu_loop_1;
    let x_3437 : u32 = u_xlatu63;
    if ((x_3436 < x_3437)) {
    } else {
      break;
    }
    let x_3440 : u32 = u_xlatu_loop_1;
    u_xlatu3 = (x_3440 >> 2u);
    let x_3444 : u32 = u_xlatu_loop_1;
    u_xlati67 = bitcast<i32>((x_3444 & 3u));
    let x_3447 : u32 = u_xlatu3;
    let x_3450 : vec4<f32> = x_1592.unity_LightIndices[bitcast<i32>(x_3447)];
    let x_3460 : i32 = u_xlati67;
    indexable = array<vec4<u32>, 4u>(vec4<u32>(1065353216u, 0u, 0u, 0u), vec4<u32>(0u, 1065353216u, 0u, 0u), vec4<u32>(0u, 0u, 1065353216u, 0u), vec4<u32>(0u, 0u, 0u, 1065353216u));
    let x_3465 : vec4<u32> = indexable[x_3460];
    u_xlat3.x = dot(x_3450, bitcast<vec4<f32>>(x_3465));
    let x_3471 : f32 = u_xlat3.x;
    u_xlati3 = i32(x_3471);
    let x_3473 : vec3<f32> = vs_INTERP0;
    let x_3485 : i32 = u_xlati3;
    let x_3487 : vec4<f32> = x_3484.x_AdditionalLightsPosition[x_3485];
    let x_3490 : i32 = u_xlati3;
    let x_3492 : vec4<f32> = x_3484.x_AdditionalLightsPosition[x_3490];
    let x_3494 : vec3<f32> = ((-(x_3473) * vec3<f32>(x_3487.w, x_3487.w, x_3487.w)) + vec3<f32>(x_3492.x, x_3492.y, x_3492.z));
    let x_3495 : vec4<f32> = u_xlat9;
    u_xlat9 = vec4<f32>(x_3494.x, x_3494.y, x_3494.z, x_3495.w);
    let x_3497 : vec4<f32> = u_xlat9;
    let x_3499 : vec4<f32> = u_xlat9;
    u_xlat67 = dot(vec3<f32>(x_3497.x, x_3497.y, x_3497.z), vec3<f32>(x_3499.x, x_3499.y, x_3499.z));
    let x_3502 : f32 = u_xlat67;
    u_xlat67 = max(x_3502, 6.10351562e-05f);
    let x_3505 : f32 = u_xlat67;
    u_xlat48.x = inverseSqrt(x_3505);
    let x_3508 : vec2<f32> = u_xlat48;
    let x_3510 : vec4<f32> = u_xlat9;
    let x_3512 : vec3<f32> = (vec3<f32>(x_3508.x, x_3508.x, x_3508.x) * vec3<f32>(x_3510.x, x_3510.y, x_3510.z));
    let x_3513 : vec4<f32> = u_xlat10;
    u_xlat10 = vec4<f32>(x_3512.x, x_3512.y, x_3512.z, x_3513.w);
    let x_3515 : f32 = u_xlat67;
    u_xlat69 = (1.0f / x_3515);
    let x_3517 : f32 = u_xlat67;
    let x_3518 : i32 = u_xlati3;
    let x_3520 : f32 = x_3484.x_AdditionalLightsAttenuation[x_3518].x;
    u_xlat67 = (x_3517 * x_3520);
    let x_3522 : f32 = u_xlat67;
    let x_3524 : f32 = u_xlat67;
    u_xlat67 = ((-(x_3522) * x_3524) + 1.0f);
    let x_3527 : f32 = u_xlat67;
    u_xlat67 = max(x_3527, 0.0f);
    let x_3529 : f32 = u_xlat67;
    let x_3530 : f32 = u_xlat67;
    u_xlat67 = (x_3529 * x_3530);
    let x_3532 : f32 = u_xlat67;
    let x_3533 : f32 = u_xlat69;
    u_xlat67 = (x_3532 * x_3533);
    let x_3535 : i32 = u_xlati3;
    let x_3537 : vec4<f32> = x_3484.x_AdditionalLightsSpotDir[x_3535];
    let x_3539 : vec4<f32> = u_xlat10;
    u_xlat69 = dot(vec3<f32>(x_3537.x, x_3537.y, x_3537.z), vec3<f32>(x_3539.x, x_3539.y, x_3539.z));
    let x_3542 : f32 = u_xlat69;
    let x_3543 : i32 = u_xlati3;
    let x_3545 : f32 = x_3484.x_AdditionalLightsAttenuation[x_3543].z;
    let x_3547 : i32 = u_xlati3;
    let x_3549 : f32 = x_3484.x_AdditionalLightsAttenuation[x_3547].w;
    u_xlat69 = ((x_3542 * x_3545) + x_3549);
    let x_3551 : f32 = u_xlat69;
    u_xlat69 = clamp(x_3551, 0.0f, 1.0f);
    let x_3553 : f32 = u_xlat69;
    let x_3554 : f32 = u_xlat69;
    u_xlat69 = (x_3553 * x_3554);
    let x_3556 : f32 = u_xlat67;
    let x_3557 : f32 = u_xlat69;
    u_xlat67 = (x_3556 * x_3557);
    let x_3559 : vec3<f32> = u_xlat27;
    let x_3561 : i32 = u_xlati3;
    let x_3563 : vec4<f32> = x_3484.x_AdditionalLightsColor[x_3561];
    let x_3565 : vec3<f32> = (vec3<f32>(x_3559.x, x_3559.x, x_3559.x) * vec3<f32>(x_3563.x, x_3563.y, x_3563.z));
    let x_3566 : vec4<f32> = u_xlat11;
    u_xlat11 = vec4<f32>(x_3565.x, x_3565.y, x_3565.z, x_3566.w);
    let x_3568 : vec3<f32> = u_xlat24;
    let x_3569 : vec4<f32> = u_xlat10;
    u_xlat3.x = dot(x_3568, vec3<f32>(x_3569.x, x_3569.y, x_3569.z));
    let x_3574 : f32 = u_xlat3.x;
    u_xlat3.x = clamp(x_3574, 0.0f, 1.0f);
    let x_3578 : f32 = u_xlat3.x;
    let x_3579 : f32 = u_xlat67;
    u_xlat3.x = (x_3578 * x_3579);
    let x_3582 : vec4<f32> = u_xlat3;
    let x_3584 : vec4<f32> = u_xlat11;
    let x_3586 : vec3<f32> = (vec3<f32>(x_3582.x, x_3582.x, x_3582.x) * vec3<f32>(x_3584.x, x_3584.y, x_3584.z));
    let x_3587 : vec4<f32> = u_xlat11;
    u_xlat11 = vec4<f32>(x_3586.x, x_3586.y, x_3586.z, x_3587.w);
    let x_3589 : vec4<f32> = u_xlat9;
    let x_3591 : vec2<f32> = u_xlat48;
    let x_3594 : vec4<f32> = u_xlat5;
    let x_3596 : vec3<f32> = ((vec3<f32>(x_3589.x, x_3589.y, x_3589.z) * vec3<f32>(x_3591.x, x_3591.x, x_3591.x)) + vec3<f32>(x_3594.x, x_3594.y, x_3594.z));
    let x_3597 : vec4<f32> = u_xlat9;
    u_xlat9 = vec4<f32>(x_3596.x, x_3596.y, x_3596.z, x_3597.w);
    let x_3599 : vec4<f32> = u_xlat9;
    let x_3601 : vec4<f32> = u_xlat9;
    u_xlat3.x = dot(vec3<f32>(x_3599.x, x_3599.y, x_3599.z), vec3<f32>(x_3601.x, x_3601.y, x_3601.z));
    let x_3606 : f32 = u_xlat3.x;
    u_xlat3.x = max(x_3606, 1.17549435e-37f);
    let x_3610 : f32 = u_xlat3.x;
    u_xlat3.x = inverseSqrt(x_3610);
    let x_3613 : vec4<f32> = u_xlat3;
    let x_3615 : vec4<f32> = u_xlat9;
    let x_3617 : vec3<f32> = (vec3<f32>(x_3613.x, x_3613.x, x_3613.x) * vec3<f32>(x_3615.x, x_3615.y, x_3615.z));
    let x_3618 : vec4<f32> = u_xlat9;
    u_xlat9 = vec4<f32>(x_3617.x, x_3617.y, x_3617.z, x_3618.w);
    let x_3620 : vec3<f32> = u_xlat24;
    let x_3621 : vec4<f32> = u_xlat9;
    u_xlat3.x = dot(x_3620, vec3<f32>(x_3621.x, x_3621.y, x_3621.z));
    let x_3626 : f32 = u_xlat3.x;
    u_xlat3.x = clamp(x_3626, 0.0f, 1.0f);
    let x_3629 : vec4<f32> = u_xlat10;
    let x_3631 : vec4<f32> = u_xlat9;
    u_xlat67 = dot(vec3<f32>(x_3629.x, x_3629.y, x_3629.z), vec3<f32>(x_3631.x, x_3631.y, x_3631.z));
    let x_3634 : f32 = u_xlat67;
    u_xlat67 = clamp(x_3634, 0.0f, 1.0f);
    let x_3637 : f32 = u_xlat3.x;
    let x_3639 : f32 = u_xlat3.x;
    u_xlat3.x = (x_3637 * x_3639);
    let x_3643 : f32 = u_xlat3.x;
    let x_3645 : f32 = u_xlat22.x;
    u_xlat3.x = ((x_3643 * x_3645) + 1.000010014f);
    let x_3649 : f32 = u_xlat67;
    let x_3650 : f32 = u_xlat67;
    u_xlat67 = (x_3649 * x_3650);
    let x_3653 : f32 = u_xlat3.x;
    let x_3655 : f32 = u_xlat3.x;
    u_xlat3.x = (x_3653 * x_3655);
    let x_3658 : f32 = u_xlat67;
    u_xlat67 = max(x_3658, 0.100000001f);
    let x_3661 : f32 = u_xlat3.x;
    let x_3662 : f32 = u_xlat67;
    u_xlat3.x = (x_3661 * x_3662);
    let x_3665 : f32 = u_xlat68;
    let x_3667 : f32 = u_xlat3.x;
    u_xlat3.x = (x_3665 * x_3667);
    let x_3670 : f32 = u_xlat65;
    let x_3672 : f32 = u_xlat3.x;
    u_xlat3.x = (x_3670 / x_3672);
    let x_3675 : vec4<f32> = u_xlat3;
    let x_3678 : vec3<f32> = u_xlat2;
    let x_3679 : vec3<f32> = ((vec3<f32>(x_3675.x, x_3675.x, x_3675.x) * vec3<f32>(0.039999999f, 0.039999999f, 0.039999999f)) + x_3678);
    let x_3680 : vec4<f32> = u_xlat9;
    u_xlat9 = vec4<f32>(x_3679.x, x_3679.y, x_3679.z, x_3680.w);
    let x_3682 : vec4<f32> = u_xlat9;
    let x_3684 : vec4<f32> = u_xlat11;
    let x_3687 : vec4<f32> = u_xlat8;
    let x_3689 : vec3<f32> = ((vec3<f32>(x_3682.x, x_3682.y, x_3682.z) * vec3<f32>(x_3684.x, x_3684.y, x_3684.z)) + vec3<f32>(x_3687.x, x_3687.y, x_3687.z));
    let x_3690 : vec4<f32> = u_xlat8;
    u_xlat8 = vec4<f32>(x_3689.x, x_3689.y, x_3689.z, x_3690.w);

    continuing {
      let x_3692 : u32 = u_xlatu_loop_1;
      u_xlatu_loop_1 = (x_3692 + bitcast<u32>(1i));
    }
  }
  let x_3694 : vec4<f32> = u_xlat4;
  let x_3696 : vec4<f32> = u_xlat6;
  let x_3699 : vec4<f32> = u_xlat7;
  u_xlat2 = ((vec3<f32>(x_3694.x, x_3694.y, x_3694.z) * vec3<f32>(x_3696.x, x_3696.x, x_3696.x)) + vec3<f32>(x_3699.x, x_3699.y, x_3699.z));
  let x_3702 : vec4<f32> = u_xlat8;
  let x_3704 : vec3<f32> = u_xlat2;
  u_xlat2 = (vec3<f32>(x_3702.x, x_3702.y, x_3702.z) + x_3704);
  let x_3708 : vec4<f32> = vs_INTERP4;
  let x_3710 : vec3<f32> = u_xlat0;
  let x_3712 : vec3<f32> = u_xlat2;
  let x_3713 : vec3<f32> = ((vec3<f32>(x_3708.w, x_3708.w, x_3708.w) * x_3710) + x_3712);
  let x_3714 : vec4<f32> = SV_Target0;
  SV_Target0 = vec4<f32>(x_3713.x, x_3713.y, x_3713.z, x_3714.w);
  let x_3716 : bool = u_xlatb43;
  if (x_3716) {
    let x_3721 : f32 = u_xlat1.x;
    x_3717 = x_3721;
  } else {
    x_3717 = 1.0f;
  }
  let x_3723 : f32 = x_3717;
  SV_Target0.w = x_3723;
  return;
}

struct main_out {
  @location(0)
  SV_Target0_1 : vec4<f32>,
}

@fragment
fn main(@builtin(position) gl_FragCoord_param : vec4<f32>, @location(1) vs_INTERP1_param : vec3<f32>, @location(3) vs_INTERP3_param : vec4<f32>, @location(4) vs_INTERP4_param : vec4<f32>, @location(0) vs_INTERP0_param : vec3<f32>, @location(2) vs_INTERP2_param : vec4<f32>, @location(5) vs_INTERP5_param : vec2<f32>, @location(6) vs_INTERP9_param : vec4<f32>) -> main_out {
  gl_FragCoord = gl_FragCoord_param;
  vs_INTERP1 = vs_INTERP1_param;
  vs_INTERP3 = vs_INTERP3_param;
  vs_INTERP4 = vs_INTERP4_param;
  vs_INTERP0 = vs_INTERP0_param;
  vs_INTERP2 = vs_INTERP2_param;
  vs_INTERP5 = vs_INTERP5_param;
  vs_INTERP9 = vs_INTERP9_param;
  main_1();
  return main_out(SV_Target0);
}

