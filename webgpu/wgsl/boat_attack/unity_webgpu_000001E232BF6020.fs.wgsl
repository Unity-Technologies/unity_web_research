struct x_Terrain {
  x_NormalScale0 : f32,
  x_NormalScale1 : f32,
  x_NormalScale2 : f32,
  x_NormalScale3 : f32,
  x_Metallic0 : f32,
  x_Metallic1 : f32,
  x_Metallic2 : f32,
  x_Metallic3 : f32,
  x_Smoothness0 : f32,
  x_Smoothness1 : f32,
  x_Smoothness2 : f32,
  x_Smoothness3 : f32,
  x_DiffuseRemapScale0 : vec4<f32>,
  x_DiffuseRemapScale1 : vec4<f32>,
  x_DiffuseRemapScale2 : vec4<f32>,
  x_DiffuseRemapScale3 : vec4<f32>,
  x_MaskMapRemapOffset0 : vec4<f32>,
  x_MaskMapRemapOffset1 : vec4<f32>,
  x_MaskMapRemapOffset2 : vec4<f32>,
  x_MaskMapRemapOffset3 : vec4<f32>,
  x_MaskMapRemapScale0 : vec4<f32>,
  x_MaskMapRemapScale1 : vec4<f32>,
  x_MaskMapRemapScale2 : vec4<f32>,
  x_MaskMapRemapScale3 : vec4<f32>,
  x_Control_ST : vec4<f32>,
  x_Control_TexelSize : vec4<f32>,
  x_DiffuseHasAlpha0 : f32,
  x_DiffuseHasAlpha1 : f32,
  x_DiffuseHasAlpha2 : f32,
  x_DiffuseHasAlpha3 : f32,
  x_LayerHasMask0 : f32,
  x_LayerHasMask1 : f32,
  x_LayerHasMask2 : f32,
  x_LayerHasMask3 : f32,
  x_Splat0_ST : vec4<f32>,
  x_Splat1_ST : vec4<f32>,
  x_Splat2_ST : vec4<f32>,
  x_Splat3_ST : vec4<f32>,
  x_HeightTransition : f32,
  x_NumLayersCount : f32,
}

struct PGlobals {
  x_ScaledScreenParams : vec4<f32>,
  x_GlobalMipBias : vec2<f32>,
  @size(8)
  padding : u32,
  x_MainLightPosition : vec4<f32>,
  x_MainLightColor : vec4<f32>,
  x_AmbientOcclusionParam : vec4<f32>,
  x_AdditionalLightsCount : vec4<f32>,
  x_WorldSpaceCameraPos : vec3<f32>,
  @size(4)
  padding_1 : u32,
  x_ScaleBiasRt : vec4<f32>,
}

type Arr = array<mat4x4<f32>, 5u>;

struct MainLightShadows {
  x_MainLightWorldToShadow : Arr,
  x_CascadeShadowSplitSpheres0 : vec4<f32>,
  x_CascadeShadowSplitSpheres1 : vec4<f32>,
  x_CascadeShadowSplitSpheres2 : vec4<f32>,
  x_CascadeShadowSplitSpheres3 : vec4<f32>,
  x_CascadeShadowSplitSphereRadii : vec4<f32>,
  x_MainLightShadowOffset0 : vec4<f32>,
  x_MainLightShadowOffset1 : vec4<f32>,
  x_MainLightShadowParams : vec4<f32>,
  x_MainLightShadowmapSize : vec4<f32>,
}

type Arr_1 = array<vec4<f32>, 2u>;

struct UnityPerDraw {
  unity_ObjectToWorld : mat4x4<f32>,
  unity_WorldToObject : mat4x4<f32>,
  unity_LODFade : vec4<f32>,
  unity_WorldTransformParams : vec4<f32>,
  unity_RenderingLayer : vec4<f32>,
  unity_LightData : vec4<f32>,
  unity_LightIndices : Arr_1,
  unity_ProbesOcclusion : vec4<f32>,
  unity_SpecCube0_HDR : vec4<f32>,
  unity_SpecCube1_HDR : vec4<f32>,
  unity_SpecCube0_BoxMax : vec4<f32>,
  unity_SpecCube0_BoxMin : vec4<f32>,
  unity_SpecCube0_ProbePosition : vec4<f32>,
  unity_SpecCube1_BoxMax : vec4<f32>,
  unity_SpecCube1_BoxMin : vec4<f32>,
  unity_SpecCube1_ProbePosition : vec4<f32>,
  unity_LightmapST : vec4<f32>,
  unity_DynamicLightmapST : vec4<f32>,
  unity_SHAr : vec4<f32>,
  unity_SHAg : vec4<f32>,
  unity_SHAb : vec4<f32>,
  unity_SHBr : vec4<f32>,
  unity_SHBg : vec4<f32>,
  unity_SHBb : vec4<f32>,
  unity_SHC : vec4<f32>,
  unity_RendererBounds_Min : vec4<f32>,
  unity_RendererBounds_Max : vec4<f32>,
  unity_MatrixPreviousM : mat4x4<f32>,
  unity_MatrixPreviousMI : mat4x4<f32>,
  unity_MotionVectorsParams : vec4<f32>,
  unity_SpriteColor : vec4<f32>,
  unity_SpriteProps : vec4<f32>,
}

type Arr_2 = array<vec4<f32>, 256u>;

type Arr_3 = array<vec4<f32>, 256u>;

type Arr_4 = array<vec4<f32>, 256u>;

type Arr_5 = array<vec4<f32>, 256u>;

type Arr_6 = array<vec4<f32>, 256u>;

struct strided_arr {
  @size(16)
  el : f32,
}

type Arr_7 = array<strided_arr, 256u>;

struct AdditionalLights {
  x_AdditionalLightsPosition : Arr_6,
  x_AdditionalLightsColor : Arr_6,
  x_AdditionalLightsAttenuation : Arr_6,
  x_AdditionalLightsSpotDir : Arr_6,
  x_AdditionalLightsOcclusionProbes : Arr_6,
  x_AdditionalLightsLayerMasks : Arr_7,
}

var<private> gl_FragCoord : vec4<f32>;

@group(1) @binding(3) var<uniform> x_30 : x_Terrain;

var<private> vs_TEXCOORD0 : vec4<f32>;

@group(0) @binding(1) var x_Control : texture_2d<f32>;

@group(0) @binding(13) var sampler_Control : sampler;

@group(1) @binding(0) var<uniform> x_127 : PGlobals;

@group(0) @binding(2) var x_Splat0 : texture_2d<f32>;

@group(0) @binding(14) var sampler_Splat0 : sampler;

var<private> vs_TEXCOORD1 : vec4<f32>;

@group(0) @binding(3) var x_Splat1 : texture_2d<f32>;

@group(0) @binding(4) var x_Splat2 : texture_2d<f32>;

var<private> vs_TEXCOORD2 : vec4<f32>;

@group(0) @binding(5) var x_Splat3 : texture_2d<f32>;

@group(0) @binding(6) var x_Normal0 : texture_2d<f32>;

@group(0) @binding(15) var sampler_Normal0 : sampler;

@group(0) @binding(7) var x_Normal1 : texture_2d<f32>;

@group(0) @binding(8) var x_Normal2 : texture_2d<f32>;

@group(0) @binding(9) var x_Normal3 : texture_2d<f32>;

var<private> vs_TEXCOORD5 : vec4<f32>;

var<private> vs_TEXCOORD4 : vec4<f32>;

var<private> vs_TEXCOORD3 : vec4<f32>;

var<private> vs_TEXCOORD7 : vec3<f32>;

@group(1) @binding(4) var<uniform> x_842 : MainLightShadows;

@group(1) @binding(2) var<uniform> x_1022 : UnityPerDraw;

@group(0) @binding(10) var x_ScreenSpaceOcclusionTexture : texture_2d<f32>;

@group(0) @binding(16) var sampler_ScreenSpaceOcclusionTexture : sampler;

@group(0) @binding(11) var x_MainLightShadowmapTexture : texture_depth_2d;

@group(0) @binding(17) var sampler_MainLightShadowmapTexture : sampler_comparison;

@group(0) @binding(0) var unity_SpecCube0 : texture_cube<f32>;

@group(0) @binding(12) var samplerunity_SpecCube0 : sampler;

@group(1) @binding(1) var<uniform> x_2872 : AdditionalLights;

var<private> SV_Target0 : vec4<f32>;

fn main_1() {
  var hlslcc_FragCoord : vec4<f32>;
  var u_xlat0 : vec3<f32>;
  var u_xlat1 : vec4<f32>;
  var u_xlat2 : vec4<f32>;
  var u_xlat3 : vec4<f32>;
  var u_xlat4 : vec4<f32>;
  var u_xlat63 : f32;
  var u_xlat5 : vec4<f32>;
  var u_xlat6 : vec4<f32>;
  var u_xlat7 : vec4<f32>;
  var u_xlat8 : vec4<f32>;
  var u_xlat9 : vec4<f32>;
  var u_xlat10 : vec4<f32>;
  var u_xlatb64 : bool;
  var u_xlat11 : vec4<f32>;
  var u_xlat12 : vec4<f32>;
  var u_xlat13 : vec4<f32>;
  var u_xlat64 : f32;
  var u_xlat42 : f32;
  var u_xlat21 : f32;
  var u_xlatb2 : vec4<bool>;
  var u_xlatu2 : u32;
  var u_xlati2 : i32;
  var u_xlat23 : vec3<f32>;
  var u_xlat65 : f32;
  var u_xlat66 : f32;
  var u_xlat25 : f32;
  var u_xlatb4 : bool;
  var txVec0 : vec3<f32>;
  var txVec1 : vec3<f32>;
  var txVec2 : vec3<f32>;
  var txVec3 : vec3<f32>;
  var u_xlatb46 : bool;
  var u_xlat46 : vec2<f32>;
  var u_xlat49 : vec2<f32>;
  var u_xlat51 : vec2<f32>;
  var u_xlat14 : vec4<f32>;
  var u_xlat15 : vec4<f32>;
  var txVec4 : vec3<f32>;
  var u_xlat67 : f32;
  var txVec5 : vec3<f32>;
  var u_xlat68 : f32;
  var txVec6 : vec3<f32>;
  var txVec7 : vec3<f32>;
  var txVec8 : vec3<f32>;
  var txVec9 : vec3<f32>;
  var txVec10 : vec3<f32>;
  var txVec11 : vec3<f32>;
  var txVec12 : vec3<f32>;
  var u_xlat55 : vec2<f32>;
  var u_xlat16 : vec4<f32>;
  var u_xlat29 : vec2<f32>;
  var u_xlat17 : vec2<f32>;
  var u_xlat52 : vec2<f32>;
  var u_xlat18 : vec4<f32>;
  var u_xlat19 : vec4<f32>;
  var u_xlat20 : vec4<f32>;
  var txVec13 : vec3<f32>;
  var txVec14 : vec3<f32>;
  var u_xlat69 : f32;
  var txVec15 : vec3<f32>;
  var txVec16 : vec3<f32>;
  var txVec17 : vec3<f32>;
  var txVec18 : vec3<f32>;
  var txVec19 : vec3<f32>;
  var txVec20 : vec3<f32>;
  var txVec21 : vec3<f32>;
  var txVec22 : vec3<f32>;
  var txVec23 : vec3<f32>;
  var txVec24 : vec3<f32>;
  var txVec25 : vec3<f32>;
  var txVec26 : vec3<f32>;
  var txVec27 : vec3<f32>;
  var txVec28 : vec3<f32>;
  var txVec29 : vec3<f32>;
  var u_xlatb23 : bool;
  var u_xlatb44 : bool;
  var x_2437 : f32;
  var u_xlat44 : f32;
  var u_xlat30 : vec3<f32>;
  var u_xlatu0 : u32;
  var u_xlatu_loop_1 : u32;
  var u_xlatu64 : u32;
  var u_xlati68 : i32;
  var indexable : array<vec4<u32>, 4u>;
  var u_xlati64 : i32;
  var u_xlat70 : f32;
  var u_xlat_precise_vec4 : vec4<f32>;
  var u_xlat_precise_ivec4 : vec4<i32>;
  var u_xlat_precise_bvec4 : vec4<bool>;
  var u_xlat_precise_uvec4 : vec4<u32>;
  let x_13 : vec4<f32> = gl_FragCoord;
  let x_14 : vec3<f32> = vec3<f32>(x_13.x, x_13.y, x_13.z);
  let x_20 : f32 = gl_FragCoord.w;
  hlslcc_FragCoord = vec4<f32>(x_14.x, x_14.y, x_14.z, (1.0f / x_20));
  let x_35 : vec4<f32> = x_30.x_MaskMapRemapScale0;
  let x_42 : vec4<f32> = x_30.x_MaskMapRemapOffset0;
  u_xlat0 = ((vec3<f32>(x_35.x, x_35.y, x_35.w) * vec3<f32>(0.5f, 0.5f, 0.5f)) + vec3<f32>(x_42.x, x_42.y, x_42.w));
  let x_48 : vec4<f32> = x_30.x_MaskMapRemapScale1;
  let x_53 : vec4<f32> = x_30.x_MaskMapRemapOffset1;
  let x_55 : vec3<f32> = ((vec3<f32>(x_48.x, x_48.y, x_48.w) * vec3<f32>(0.5f, 0.5f, 0.5f)) + vec3<f32>(x_53.x, x_53.y, x_53.w));
  let x_56 : vec4<f32> = u_xlat1;
  u_xlat1 = vec4<f32>(x_55.x, x_55.y, x_55.z, x_56.w);
  let x_61 : vec4<f32> = x_30.x_MaskMapRemapScale2;
  let x_66 : vec4<f32> = x_30.x_MaskMapRemapOffset2;
  let x_68 : vec3<f32> = ((vec3<f32>(x_61.x, x_61.y, x_61.w) * vec3<f32>(0.5f, 0.5f, 0.5f)) + vec3<f32>(x_66.x, x_66.y, x_66.w));
  let x_69 : vec4<f32> = u_xlat2;
  u_xlat2 = vec4<f32>(x_68.x, x_68.y, x_68.z, x_69.w);
  let x_74 : vec4<f32> = x_30.x_MaskMapRemapScale3;
  let x_79 : vec4<f32> = x_30.x_MaskMapRemapOffset3;
  let x_81 : vec3<f32> = ((vec3<f32>(x_74.x, x_74.w, x_74.y) * vec3<f32>(0.5f, 0.5f, 0.5f)) + vec3<f32>(x_79.x, x_79.w, x_79.y));
  let x_82 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_81.x, x_81.y, x_82.z, x_81.z);
  let x_88 : vec4<f32> = x_30.x_Control_TexelSize;
  let x_92 : vec2<f32> = (vec2<f32>(x_88.z, x_88.w) + vec2<f32>(-1.0f, -1.0f));
  let x_93 : vec4<f32> = u_xlat4;
  u_xlat4 = vec4<f32>(x_92.x, x_92.y, x_93.z, x_93.w);
  let x_96 : vec4<f32> = vs_TEXCOORD0;
  let x_98 : vec4<f32> = u_xlat4;
  let x_102 : vec2<f32> = ((vec2<f32>(x_96.x, x_96.y) * vec2<f32>(x_98.x, x_98.y)) + vec2<f32>(0.5f, 0.5f));
  let x_103 : vec4<f32> = u_xlat4;
  u_xlat4 = vec4<f32>(x_102.x, x_102.y, x_103.z, x_103.w);
  let x_105 : vec4<f32> = u_xlat4;
  let x_108 : vec4<f32> = x_30.x_Control_TexelSize;
  let x_110 : vec2<f32> = (vec2<f32>(x_105.x, x_105.y) * vec2<f32>(x_108.x, x_108.y));
  let x_111 : vec4<f32> = u_xlat4;
  u_xlat4 = vec4<f32>(x_110.x, x_110.y, x_111.z, x_111.w);
  let x_123 : vec4<f32> = u_xlat4;
  let x_132 : f32 = x_127.x_GlobalMipBias.x;
  let x_133 : vec4<f32> = textureSampleBias(x_Control, sampler_Control, vec2<f32>(x_123.x, x_123.y), x_132);
  u_xlat4 = x_133;
  let x_136 : vec4<f32> = u_xlat4;
  u_xlat63 = dot(x_136, vec4<f32>(1.0f, 1.0f, 1.0f, 1.0f));
  let x_146 : vec4<f32> = vs_TEXCOORD1;
  let x_149 : f32 = x_127.x_GlobalMipBias.x;
  let x_150 : vec4<f32> = textureSampleBias(x_Splat0, sampler_Splat0, vec2<f32>(x_146.x, x_146.y), x_149);
  u_xlat5 = x_150;
  let x_156 : vec4<f32> = vs_TEXCOORD1;
  let x_159 : f32 = x_127.x_GlobalMipBias.x;
  let x_160 : vec4<f32> = textureSampleBias(x_Splat1, sampler_Splat0, vec2<f32>(x_156.z, x_156.w), x_159);
  u_xlat6 = x_160;
  let x_167 : vec4<f32> = vs_TEXCOORD2;
  let x_170 : f32 = x_127.x_GlobalMipBias.x;
  let x_171 : vec4<f32> = textureSampleBias(x_Splat2, sampler_Splat0, vec2<f32>(x_167.x, x_167.y), x_170);
  u_xlat7 = x_171;
  let x_177 : vec4<f32> = vs_TEXCOORD2;
  let x_180 : f32 = x_127.x_GlobalMipBias.x;
  let x_181 : vec4<f32> = textureSampleBias(x_Splat3, sampler_Splat0, vec2<f32>(x_177.z, x_177.w), x_180);
  u_xlat8 = x_181;
  let x_184 : f32 = u_xlat5.w;
  u_xlat9.x = x_184;
  let x_187 : f32 = u_xlat6.w;
  u_xlat9.y = x_187;
  let x_191 : f32 = u_xlat7.w;
  u_xlat9.z = x_191;
  let x_195 : f32 = u_xlat8.w;
  u_xlat9.w = x_195;
  let x_198 : vec4<f32> = u_xlat9;
  let x_201 : f32 = x_30.x_Smoothness0;
  let x_204 : f32 = x_30.x_Smoothness1;
  let x_207 : f32 = x_30.x_Smoothness2;
  let x_210 : f32 = x_30.x_Smoothness3;
  u_xlat10 = (x_198 * vec4<f32>(x_201, x_204, x_207, x_210));
  let x_219 : f32 = x_30.x_NumLayersCount;
  u_xlatb64 = (4.0f >= x_219);
  let x_222 : vec4<f32> = u_xlat4;
  u_xlat11 = (-(x_222) + vec4<f32>(1.0f, 1.0f, 1.0f, 1.0f));
  let x_225 : vec4<f32> = u_xlat9;
  let x_226 : vec4<f32> = u_xlat11;
  u_xlat11 = (x_225 + -(x_226));
  let x_229 : vec4<f32> = u_xlat11;
  u_xlat11 = (x_229 * vec4<f32>(20.0f, 20.0f, 20.0f, 20.0f));
  let x_233 : vec4<f32> = u_xlat11;
  u_xlat11 = clamp(x_233, vec4<f32>(0.0f, 0.0f, 0.0f, 0.0f), vec4<f32>(1.0f, 1.0f, 1.0f, 1.0f));
  let x_238 : vec4<f32> = u_xlat4;
  let x_242 : vec4<f32> = u_xlat11;
  u_xlat11 = ((x_238 * vec4<f32>(0.001f, 0.001f, 0.001f, 0.001f)) + x_242);
  let x_245 : vec4<f32> = u_xlat4;
  let x_246 : vec4<f32> = u_xlat11;
  u_xlat12 = (x_245 + -(x_246));
  let x_251 : f32 = u_xlat12.x;
  let x_254 : f32 = x_30.x_DiffuseRemapScale0.w;
  u_xlat13.x = (x_251 * x_254);
  let x_258 : f32 = u_xlat12.y;
  let x_261 : f32 = x_30.x_DiffuseRemapScale1.w;
  u_xlat13.y = (x_258 * x_261);
  let x_265 : f32 = u_xlat12.z;
  let x_268 : f32 = x_30.x_DiffuseRemapScale2.w;
  u_xlat13.z = (x_265 * x_268);
  let x_272 : f32 = u_xlat12.w;
  let x_275 : f32 = x_30.x_DiffuseRemapScale3.w;
  u_xlat13.w = (x_272 * x_275);
  let x_278 : vec4<f32> = u_xlat11;
  let x_279 : vec4<f32> = u_xlat13;
  u_xlat11 = (x_278 + x_279);
  let x_281 : bool = u_xlatb64;
  let x_282 : vec4<f32> = u_xlat11;
  let x_283 : vec4<f32> = u_xlat4;
  u_xlat4 = select(x_283, x_282, vec4<bool>(x_281, x_281, x_281, x_281));
  let x_288 : vec4<f32> = u_xlat4;
  u_xlat64 = dot(x_288, vec4<f32>(1.0f, 1.0f, 1.0f, 1.0f));
  let x_290 : f32 = u_xlat64;
  u_xlat64 = (x_290 + 6.10351562e-05f);
  let x_293 : vec4<f32> = u_xlat4;
  let x_294 : f32 = u_xlat64;
  u_xlat4 = (x_293 / vec4<f32>(x_294, x_294, x_294, x_294));
  let x_297 : vec4<f32> = u_xlat4;
  let x_300 : vec4<f32> = x_30.x_DiffuseRemapScale0;
  let x_302 : vec3<f32> = (vec3<f32>(x_297.x, x_297.x, x_297.x) * vec3<f32>(x_300.x, x_300.y, x_300.z));
  let x_303 : vec4<f32> = u_xlat11;
  u_xlat11 = vec4<f32>(x_302.x, x_302.y, x_302.z, x_303.w);
  let x_305 : vec4<f32> = u_xlat4;
  let x_308 : vec4<f32> = x_30.x_DiffuseRemapScale1;
  let x_310 : vec3<f32> = (vec3<f32>(x_305.y, x_305.y, x_305.y) * vec3<f32>(x_308.x, x_308.y, x_308.z));
  let x_311 : vec4<f32> = u_xlat12;
  u_xlat12 = vec4<f32>(x_310.x, x_310.y, x_310.z, x_311.w);
  let x_313 : vec4<f32> = u_xlat6;
  let x_315 : vec4<f32> = u_xlat12;
  let x_317 : vec3<f32> = (vec3<f32>(x_313.x, x_313.y, x_313.z) * vec3<f32>(x_315.x, x_315.y, x_315.z));
  let x_318 : vec4<f32> = u_xlat6;
  u_xlat6 = vec4<f32>(x_317.x, x_317.y, x_317.z, x_318.w);
  let x_320 : vec4<f32> = u_xlat5;
  let x_322 : vec4<f32> = u_xlat11;
  let x_325 : vec4<f32> = u_xlat6;
  let x_327 : vec3<f32> = ((vec3<f32>(x_320.x, x_320.y, x_320.z) * vec3<f32>(x_322.x, x_322.y, x_322.z)) + vec3<f32>(x_325.x, x_325.y, x_325.z));
  let x_328 : vec4<f32> = u_xlat5;
  u_xlat5 = vec4<f32>(x_327.x, x_327.y, x_327.z, x_328.w);
  let x_330 : vec4<f32> = u_xlat4;
  let x_333 : vec4<f32> = x_30.x_DiffuseRemapScale2;
  let x_335 : vec3<f32> = (vec3<f32>(x_330.z, x_330.z, x_330.z) * vec3<f32>(x_333.x, x_333.y, x_333.z));
  let x_336 : vec4<f32> = u_xlat6;
  u_xlat6 = vec4<f32>(x_335.x, x_335.y, x_335.z, x_336.w);
  let x_338 : vec4<f32> = u_xlat7;
  let x_340 : vec4<f32> = u_xlat6;
  let x_343 : vec4<f32> = u_xlat5;
  let x_345 : vec3<f32> = ((vec3<f32>(x_338.x, x_338.y, x_338.z) * vec3<f32>(x_340.x, x_340.y, x_340.z)) + vec3<f32>(x_343.x, x_343.y, x_343.z));
  let x_346 : vec4<f32> = u_xlat5;
  u_xlat5 = vec4<f32>(x_345.x, x_345.y, x_345.z, x_346.w);
  let x_348 : vec4<f32> = u_xlat4;
  let x_351 : vec4<f32> = x_30.x_DiffuseRemapScale3;
  let x_353 : vec3<f32> = (vec3<f32>(x_348.w, x_348.w, x_348.w) * vec3<f32>(x_351.x, x_351.y, x_351.z));
  let x_354 : vec4<f32> = u_xlat6;
  u_xlat6 = vec4<f32>(x_353.x, x_353.y, x_353.z, x_354.w);
  let x_356 : vec4<f32> = u_xlat8;
  let x_358 : vec4<f32> = u_xlat6;
  let x_361 : vec4<f32> = u_xlat5;
  let x_363 : vec3<f32> = ((vec3<f32>(x_356.x, x_356.y, x_356.z) * vec3<f32>(x_358.x, x_358.y, x_358.z)) + vec3<f32>(x_361.x, x_361.y, x_361.z));
  let x_364 : vec4<f32> = u_xlat5;
  u_xlat5 = vec4<f32>(x_363.x, x_363.y, x_363.z, x_364.w);
  let x_371 : vec4<f32> = vs_TEXCOORD1;
  let x_374 : f32 = x_127.x_GlobalMipBias.x;
  let x_375 : vec4<f32> = textureSampleBias(x_Normal0, sampler_Normal0, vec2<f32>(x_371.x, x_371.y), x_374);
  let x_376 : vec3<f32> = vec3<f32>(x_375.x, x_375.y, x_375.w);
  let x_377 : vec4<f32> = u_xlat6;
  u_xlat6 = vec4<f32>(x_376.x, x_376.y, x_376.z, x_377.w);
  let x_380 : f32 = u_xlat6.x;
  let x_382 : f32 = u_xlat6.z;
  u_xlat6.x = (x_380 * x_382);
  let x_385 : vec4<f32> = u_xlat6;
  let x_390 : vec2<f32> = ((vec2<f32>(x_385.x, x_385.y) * vec2<f32>(2.0f, 2.0f)) + vec2<f32>(-1.0f, -1.0f));
  let x_391 : vec4<f32> = u_xlat6;
  u_xlat6 = vec4<f32>(x_390.x, x_390.y, x_391.z, x_391.w);
  let x_393 : vec4<f32> = u_xlat6;
  let x_395 : vec4<f32> = u_xlat6;
  u_xlat64 = dot(vec2<f32>(x_393.x, x_393.y), vec2<f32>(x_395.x, x_395.y));
  let x_398 : f32 = u_xlat64;
  u_xlat64 = min(x_398, 1.0f);
  let x_400 : f32 = u_xlat64;
  u_xlat64 = (-(x_400) + 1.0f);
  let x_403 : f32 = u_xlat64;
  u_xlat64 = sqrt(x_403);
  let x_405 : f32 = u_xlat64;
  u_xlat7.z = max(x_405, 1.00000002e-16f);
  let x_409 : vec4<f32> = u_xlat6;
  let x_413 : f32 = x_30.x_NormalScale0;
  let x_415 : vec2<f32> = (vec2<f32>(x_409.x, x_409.y) * vec2<f32>(x_413, x_413));
  let x_416 : vec4<f32> = u_xlat7;
  u_xlat7 = vec4<f32>(x_415.x, x_415.y, x_416.z, x_416.w);
  let x_422 : vec4<f32> = vs_TEXCOORD1;
  let x_425 : f32 = x_127.x_GlobalMipBias.x;
  let x_426 : vec4<f32> = textureSampleBias(x_Normal1, sampler_Normal0, vec2<f32>(x_422.z, x_422.w), x_425);
  let x_427 : vec3<f32> = vec3<f32>(x_426.x, x_426.y, x_426.w);
  let x_428 : vec4<f32> = u_xlat6;
  u_xlat6 = vec4<f32>(x_427.x, x_427.y, x_427.z, x_428.w);
  let x_431 : f32 = u_xlat6.x;
  let x_433 : f32 = u_xlat6.z;
  u_xlat6.x = (x_431 * x_433);
  let x_436 : vec4<f32> = u_xlat6;
  let x_439 : vec2<f32> = ((vec2<f32>(x_436.x, x_436.y) * vec2<f32>(2.0f, 2.0f)) + vec2<f32>(-1.0f, -1.0f));
  let x_440 : vec4<f32> = u_xlat6;
  u_xlat6 = vec4<f32>(x_439.x, x_439.y, x_440.z, x_440.w);
  let x_442 : vec4<f32> = u_xlat6;
  let x_444 : vec4<f32> = u_xlat6;
  u_xlat64 = dot(vec2<f32>(x_442.x, x_442.y), vec2<f32>(x_444.x, x_444.y));
  let x_447 : f32 = u_xlat64;
  u_xlat64 = min(x_447, 1.0f);
  let x_449 : f32 = u_xlat64;
  u_xlat64 = (-(x_449) + 1.0f);
  let x_452 : f32 = u_xlat64;
  u_xlat64 = sqrt(x_452);
  let x_454 : f32 = u_xlat64;
  u_xlat8.z = max(x_454, 1.00000002e-16f);
  let x_457 : vec4<f32> = u_xlat6;
  let x_460 : f32 = x_30.x_NormalScale1;
  let x_462 : f32 = x_30.x_NormalScale1;
  let x_463 : vec2<f32> = vec2<f32>(x_460, x_462);
  let x_467 : vec2<f32> = (vec2<f32>(x_457.x, x_457.y) * vec2<f32>(x_463.x, x_463.y));
  let x_468 : vec4<f32> = u_xlat8;
  u_xlat8 = vec4<f32>(x_467.x, x_467.y, x_468.z, x_468.w);
  let x_470 : vec4<f32> = u_xlat4;
  let x_472 : vec4<f32> = u_xlat8;
  let x_474 : vec3<f32> = (vec3<f32>(x_470.y, x_470.y, x_470.y) * vec3<f32>(x_472.x, x_472.y, x_472.z));
  let x_475 : vec4<f32> = u_xlat6;
  u_xlat6 = vec4<f32>(x_474.x, x_474.y, x_474.z, x_475.w);
  let x_477 : vec4<f32> = u_xlat4;
  let x_479 : vec4<f32> = u_xlat7;
  let x_482 : vec4<f32> = u_xlat6;
  let x_484 : vec3<f32> = ((vec3<f32>(x_477.x, x_477.x, x_477.x) * vec3<f32>(x_479.x, x_479.y, x_479.z)) + vec3<f32>(x_482.x, x_482.y, x_482.z));
  let x_485 : vec4<f32> = u_xlat6;
  u_xlat6 = vec4<f32>(x_484.x, x_484.y, x_484.z, x_485.w);
  let x_491 : vec4<f32> = vs_TEXCOORD2;
  let x_494 : f32 = x_127.x_GlobalMipBias.x;
  let x_495 : vec4<f32> = textureSampleBias(x_Normal2, sampler_Normal0, vec2<f32>(x_491.x, x_491.y), x_494);
  let x_496 : vec3<f32> = vec3<f32>(x_495.x, x_495.y, x_495.w);
  let x_497 : vec4<f32> = u_xlat7;
  u_xlat7 = vec4<f32>(x_496.x, x_496.y, x_496.z, x_497.w);
  let x_500 : f32 = u_xlat7.x;
  let x_502 : f32 = u_xlat7.z;
  u_xlat7.x = (x_500 * x_502);
  let x_505 : vec4<f32> = u_xlat7;
  let x_508 : vec2<f32> = ((vec2<f32>(x_505.x, x_505.y) * vec2<f32>(2.0f, 2.0f)) + vec2<f32>(-1.0f, -1.0f));
  let x_509 : vec4<f32> = u_xlat7;
  u_xlat7 = vec4<f32>(x_508.x, x_508.y, x_509.z, x_509.w);
  let x_511 : vec4<f32> = u_xlat7;
  let x_513 : vec4<f32> = u_xlat7;
  u_xlat64 = dot(vec2<f32>(x_511.x, x_511.y), vec2<f32>(x_513.x, x_513.y));
  let x_516 : f32 = u_xlat64;
  u_xlat64 = min(x_516, 1.0f);
  let x_518 : f32 = u_xlat64;
  u_xlat64 = (-(x_518) + 1.0f);
  let x_521 : f32 = u_xlat64;
  u_xlat64 = sqrt(x_521);
  let x_523 : f32 = u_xlat64;
  u_xlat8.z = max(x_523, 1.00000002e-16f);
  let x_526 : vec4<f32> = u_xlat7;
  let x_530 : f32 = x_30.x_NormalScale2;
  let x_532 : f32 = x_30.x_NormalScale2;
  let x_533 : vec2<f32> = vec2<f32>(x_530, x_532);
  let x_537 : vec2<f32> = (vec2<f32>(x_526.x, x_526.y) * vec2<f32>(x_533.x, x_533.y));
  let x_538 : vec4<f32> = u_xlat8;
  u_xlat8 = vec4<f32>(x_537.x, x_537.y, x_538.z, x_538.w);
  let x_540 : vec4<f32> = u_xlat4;
  let x_542 : vec4<f32> = u_xlat8;
  let x_545 : vec4<f32> = u_xlat6;
  let x_547 : vec3<f32> = ((vec3<f32>(x_540.z, x_540.z, x_540.z) * vec3<f32>(x_542.x, x_542.y, x_542.z)) + vec3<f32>(x_545.x, x_545.y, x_545.z));
  let x_548 : vec4<f32> = u_xlat6;
  u_xlat6 = vec4<f32>(x_547.x, x_547.y, x_547.z, x_548.w);
  let x_554 : vec4<f32> = vs_TEXCOORD2;
  let x_557 : f32 = x_127.x_GlobalMipBias.x;
  let x_558 : vec4<f32> = textureSampleBias(x_Normal3, sampler_Normal0, vec2<f32>(x_554.z, x_554.w), x_557);
  let x_559 : vec3<f32> = vec3<f32>(x_558.x, x_558.y, x_558.w);
  let x_560 : vec4<f32> = u_xlat7;
  u_xlat7 = vec4<f32>(x_559.x, x_559.y, x_559.z, x_560.w);
  let x_563 : f32 = u_xlat7.x;
  let x_565 : f32 = u_xlat7.z;
  u_xlat7.x = (x_563 * x_565);
  let x_568 : vec4<f32> = u_xlat7;
  let x_571 : vec2<f32> = ((vec2<f32>(x_568.x, x_568.y) * vec2<f32>(2.0f, 2.0f)) + vec2<f32>(-1.0f, -1.0f));
  let x_572 : vec4<f32> = u_xlat7;
  u_xlat7 = vec4<f32>(x_571.x, x_571.y, x_572.z, x_572.w);
  let x_574 : vec4<f32> = u_xlat7;
  let x_576 : vec4<f32> = u_xlat7;
  u_xlat64 = dot(vec2<f32>(x_574.x, x_574.y), vec2<f32>(x_576.x, x_576.y));
  let x_579 : f32 = u_xlat64;
  u_xlat64 = min(x_579, 1.0f);
  let x_581 : f32 = u_xlat64;
  u_xlat64 = (-(x_581) + 1.0f);
  let x_584 : f32 = u_xlat64;
  u_xlat64 = sqrt(x_584);
  let x_586 : f32 = u_xlat64;
  u_xlat8.z = max(x_586, 1.00000002e-16f);
  let x_589 : vec4<f32> = u_xlat7;
  let x_593 : f32 = x_30.x_NormalScale3;
  let x_595 : f32 = x_30.x_NormalScale3;
  let x_596 : vec2<f32> = vec2<f32>(x_593, x_595);
  let x_600 : vec2<f32> = (vec2<f32>(x_589.x, x_589.y) * vec2<f32>(x_596.x, x_596.y));
  let x_601 : vec4<f32> = u_xlat8;
  u_xlat8 = vec4<f32>(x_600.x, x_600.y, x_601.z, x_601.w);
  let x_603 : vec4<f32> = u_xlat4;
  let x_605 : vec4<f32> = u_xlat8;
  let x_608 : vec4<f32> = u_xlat6;
  let x_610 : vec3<f32> = ((vec3<f32>(x_603.w, x_603.w, x_603.w) * vec3<f32>(x_605.x, x_605.y, x_605.z)) + vec3<f32>(x_608.x, x_608.y, x_608.z));
  let x_611 : vec4<f32> = u_xlat6;
  u_xlat6 = vec4<f32>(x_610.x, x_610.y, x_610.z, x_611.w);
  let x_614 : f32 = u_xlat6.z;
  u_xlat6.w = (x_614 + 0.00001f);
  let x_618 : vec4<f32> = u_xlat6;
  let x_620 : vec4<f32> = u_xlat6;
  u_xlat64 = dot(vec3<f32>(x_618.x, x_618.y, x_618.w), vec3<f32>(x_620.x, x_620.y, x_620.w));
  let x_623 : f32 = u_xlat64;
  u_xlat64 = inverseSqrt(x_623);
  let x_625 : f32 = u_xlat64;
  let x_627 : vec4<f32> = u_xlat6;
  let x_629 : vec3<f32> = (vec3<f32>(x_625, x_625, x_625) * vec3<f32>(x_627.x, x_627.y, x_627.w));
  let x_630 : vec4<f32> = u_xlat6;
  u_xlat6 = vec4<f32>(x_629.x, x_629.y, x_629.z, x_630.w);
  let x_633 : f32 = x_30.x_MaskMapRemapScale0.y;
  u_xlat7.x = x_633;
  let x_636 : f32 = x_30.x_MaskMapRemapScale1.y;
  u_xlat7.y = x_636;
  let x_639 : f32 = x_30.x_MaskMapRemapScale2.y;
  u_xlat7.z = x_639;
  let x_642 : f32 = x_30.x_MaskMapRemapScale3.y;
  u_xlat7.w = x_642;
  let x_645 : f32 = x_30.x_MaskMapRemapOffset0.y;
  u_xlat8.x = x_645;
  let x_648 : f32 = x_30.x_MaskMapRemapOffset1.y;
  u_xlat8.y = x_648;
  let x_651 : f32 = x_30.x_MaskMapRemapOffset2.y;
  u_xlat8.z = x_651;
  let x_654 : f32 = x_30.x_MaskMapRemapOffset3.y;
  u_xlat8.w = x_654;
  let x_656 : vec4<f32> = u_xlat7;
  let x_657 : vec4<f32> = u_xlat8;
  u_xlat7 = (x_656 + x_657);
  let x_660 : f32 = u_xlat0.z;
  u_xlat8.x = x_660;
  let x_663 : f32 = u_xlat1.z;
  u_xlat8.y = x_663;
  let x_666 : f32 = u_xlat2.z;
  u_xlat8.z = x_666;
  let x_669 : f32 = u_xlat3.y;
  u_xlat8.w = x_669;
  let x_671 : vec4<f32> = u_xlat9;
  let x_674 : f32 = x_30.x_Smoothness0;
  let x_676 : f32 = x_30.x_Smoothness1;
  let x_678 : f32 = x_30.x_Smoothness2;
  let x_680 : f32 = x_30.x_Smoothness3;
  let x_683 : vec4<f32> = u_xlat8;
  u_xlat8 = ((-(x_671) * vec4<f32>(x_674, x_676, x_678, x_680)) + x_683);
  let x_687 : f32 = x_30.x_LayerHasMask0;
  let x_690 : f32 = x_30.x_LayerHasMask1;
  let x_693 : f32 = x_30.x_LayerHasMask2;
  let x_696 : f32 = x_30.x_LayerHasMask3;
  let x_698 : vec4<f32> = u_xlat8;
  let x_700 : vec4<f32> = u_xlat10;
  u_xlat8 = ((vec4<f32>(x_687, x_690, x_693, x_696) * x_698) + x_700);
  let x_703 : vec4<f32> = u_xlat4;
  let x_704 : vec4<f32> = u_xlat8;
  u_xlat42 = dot(x_703, x_704);
  let x_707 : f32 = u_xlat0.x;
  u_xlat8.x = x_707;
  let x_710 : f32 = u_xlat1.x;
  u_xlat8.y = x_710;
  let x_713 : f32 = u_xlat2.x;
  u_xlat8.z = x_713;
  let x_716 : f32 = u_xlat3.x;
  u_xlat8.w = x_716;
  let x_718 : vec4<f32> = u_xlat8;
  let x_721 : f32 = x_30.x_Metallic0;
  let x_724 : f32 = x_30.x_Metallic1;
  let x_727 : f32 = x_30.x_Metallic2;
  let x_730 : f32 = x_30.x_Metallic3;
  u_xlat8 = (x_718 + -(vec4<f32>(x_721, x_724, x_727, x_730)));
  let x_735 : f32 = x_30.x_LayerHasMask0;
  let x_737 : f32 = x_30.x_LayerHasMask1;
  let x_739 : f32 = x_30.x_LayerHasMask2;
  let x_741 : f32 = x_30.x_LayerHasMask3;
  let x_743 : vec4<f32> = u_xlat8;
  let x_746 : f32 = x_30.x_Metallic0;
  let x_748 : f32 = x_30.x_Metallic1;
  let x_750 : f32 = x_30.x_Metallic2;
  let x_752 : f32 = x_30.x_Metallic3;
  u_xlat8 = ((vec4<f32>(x_735, x_737, x_739, x_741) * x_743) + vec4<f32>(x_746, x_748, x_750, x_752));
  let x_755 : vec4<f32> = u_xlat4;
  let x_756 : vec4<f32> = u_xlat8;
  u_xlat0.x = dot(x_755, x_756);
  let x_760 : f32 = u_xlat0.y;
  u_xlat3.x = x_760;
  let x_763 : f32 = u_xlat1.y;
  u_xlat3.y = x_763;
  let x_766 : f32 = u_xlat2.y;
  u_xlat3.z = x_766;
  let x_768 : vec4<f32> = u_xlat7;
  let x_770 : vec4<f32> = u_xlat3;
  u_xlat1 = (-(x_768) + x_770);
  let x_773 : f32 = x_30.x_LayerHasMask0;
  let x_775 : f32 = x_30.x_LayerHasMask1;
  let x_777 : f32 = x_30.x_LayerHasMask2;
  let x_779 : f32 = x_30.x_LayerHasMask3;
  let x_781 : vec4<f32> = u_xlat1;
  let x_783 : vec4<f32> = u_xlat7;
  u_xlat1 = ((vec4<f32>(x_773, x_775, x_777, x_779) * x_781) + x_783);
  let x_786 : vec4<f32> = u_xlat4;
  let x_787 : vec4<f32> = u_xlat1;
  u_xlat21 = dot(x_786, x_787);
  let x_789 : vec4<f32> = u_xlat6;
  let x_792 : vec4<f32> = vs_TEXCOORD5;
  let x_794 : vec3<f32> = (vec3<f32>(x_789.y, x_789.y, x_789.y) * vec3<f32>(x_792.x, x_792.y, x_792.z));
  let x_795 : vec4<f32> = u_xlat1;
  u_xlat1 = vec4<f32>(x_794.x, x_794.y, x_794.z, x_795.w);
  let x_797 : vec4<f32> = u_xlat6;
  let x_800 : vec4<f32> = vs_TEXCOORD4;
  let x_804 : vec4<f32> = u_xlat1;
  let x_806 : vec3<f32> = ((vec3<f32>(x_797.x, x_797.x, x_797.x) * -(vec3<f32>(x_800.x, x_800.y, x_800.z))) + vec3<f32>(x_804.x, x_804.y, x_804.z));
  let x_807 : vec4<f32> = u_xlat1;
  u_xlat1 = vec4<f32>(x_806.x, x_806.y, x_806.z, x_807.w);
  let x_809 : vec4<f32> = u_xlat6;
  let x_812 : vec4<f32> = vs_TEXCOORD3;
  let x_815 : vec4<f32> = u_xlat1;
  let x_817 : vec3<f32> = ((vec3<f32>(x_809.z, x_809.z, x_809.z) * vec3<f32>(x_812.x, x_812.y, x_812.z)) + vec3<f32>(x_815.x, x_815.y, x_815.z));
  let x_818 : vec4<f32> = u_xlat1;
  u_xlat1 = vec4<f32>(x_817.x, x_817.y, x_817.z, x_818.w);
  let x_820 : vec4<f32> = u_xlat1;
  let x_822 : vec4<f32> = u_xlat1;
  u_xlat64 = dot(vec3<f32>(x_820.x, x_820.y, x_820.z), vec3<f32>(x_822.x, x_822.y, x_822.z));
  let x_825 : f32 = u_xlat64;
  u_xlat64 = inverseSqrt(x_825);
  let x_827 : f32 = u_xlat64;
  let x_829 : vec4<f32> = u_xlat1;
  let x_831 : vec3<f32> = (vec3<f32>(x_827, x_827, x_827) * vec3<f32>(x_829.x, x_829.y, x_829.z));
  let x_832 : vec4<f32> = u_xlat1;
  u_xlat1 = vec4<f32>(x_831.x, x_831.y, x_831.z, x_832.w);
  let x_836 : vec3<f32> = vs_TEXCOORD7;
  let x_844 : vec4<f32> = x_842.x_CascadeShadowSplitSpheres0;
  let x_847 : vec3<f32> = (x_836 + -(vec3<f32>(x_844.x, x_844.y, x_844.z)));
  let x_848 : vec4<f32> = u_xlat2;
  u_xlat2 = vec4<f32>(x_847.x, x_847.y, x_847.z, x_848.w);
  let x_850 : vec3<f32> = vs_TEXCOORD7;
  let x_852 : vec4<f32> = x_842.x_CascadeShadowSplitSpheres1;
  let x_855 : vec3<f32> = (x_850 + -(vec3<f32>(x_852.x, x_852.y, x_852.z)));
  let x_856 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_855.x, x_855.y, x_855.z, x_856.w);
  let x_858 : vec3<f32> = vs_TEXCOORD7;
  let x_860 : vec4<f32> = x_842.x_CascadeShadowSplitSpheres2;
  let x_863 : vec3<f32> = (x_858 + -(vec3<f32>(x_860.x, x_860.y, x_860.z)));
  let x_864 : vec4<f32> = u_xlat4;
  u_xlat4 = vec4<f32>(x_863.x, x_863.y, x_863.z, x_864.w);
  let x_866 : vec3<f32> = vs_TEXCOORD7;
  let x_868 : vec4<f32> = x_842.x_CascadeShadowSplitSpheres3;
  let x_871 : vec3<f32> = (x_866 + -(vec3<f32>(x_868.x, x_868.y, x_868.z)));
  let x_872 : vec4<f32> = u_xlat6;
  u_xlat6 = vec4<f32>(x_871.x, x_871.y, x_871.z, x_872.w);
  let x_874 : vec4<f32> = u_xlat2;
  let x_876 : vec4<f32> = u_xlat2;
  u_xlat2.x = dot(vec3<f32>(x_874.x, x_874.y, x_874.z), vec3<f32>(x_876.x, x_876.y, x_876.z));
  let x_880 : vec4<f32> = u_xlat3;
  let x_882 : vec4<f32> = u_xlat3;
  u_xlat2.y = dot(vec3<f32>(x_880.x, x_880.y, x_880.z), vec3<f32>(x_882.x, x_882.y, x_882.z));
  let x_886 : vec4<f32> = u_xlat4;
  let x_888 : vec4<f32> = u_xlat4;
  u_xlat2.z = dot(vec3<f32>(x_886.x, x_886.y, x_886.z), vec3<f32>(x_888.x, x_888.y, x_888.z));
  let x_892 : vec4<f32> = u_xlat6;
  let x_894 : vec4<f32> = u_xlat6;
  u_xlat2.w = dot(vec3<f32>(x_892.x, x_892.y, x_892.z), vec3<f32>(x_894.x, x_894.y, x_894.z));
  let x_900 : vec4<f32> = u_xlat2;
  let x_902 : vec4<f32> = x_842.x_CascadeShadowSplitSphereRadii;
  u_xlatb2 = (x_900 < x_902);
  let x_905 : bool = u_xlatb2.x;
  u_xlat3.x = select(0.0f, 1.0f, x_905);
  let x_909 : bool = u_xlatb2.y;
  u_xlat3.y = select(0.0f, 1.0f, x_909);
  let x_913 : bool = u_xlatb2.z;
  u_xlat3.z = select(0.0f, 1.0f, x_913);
  let x_917 : bool = u_xlatb2.w;
  u_xlat3.w = select(0.0f, 1.0f, x_917);
  let x_921 : bool = u_xlatb2.x;
  u_xlat2.x = select(-0.0f, -1.0f, x_921);
  let x_926 : bool = u_xlatb2.y;
  u_xlat2.y = select(-0.0f, -1.0f, x_926);
  let x_930 : bool = u_xlatb2.z;
  u_xlat2.z = select(-0.0f, -1.0f, x_930);
  let x_933 : vec4<f32> = u_xlat2;
  let x_935 : vec4<f32> = u_xlat3;
  let x_937 : vec3<f32> = (vec3<f32>(x_933.x, x_933.y, x_933.z) + vec3<f32>(x_935.y, x_935.z, x_935.w));
  let x_938 : vec4<f32> = u_xlat2;
  u_xlat2 = vec4<f32>(x_937.x, x_937.y, x_937.z, x_938.w);
  let x_940 : vec4<f32> = u_xlat2;
  let x_943 : vec3<f32> = max(vec3<f32>(x_940.x, x_940.y, x_940.z), vec3<f32>(0.0f, 0.0f, 0.0f));
  let x_944 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_944.x, x_943.x, x_943.y, x_943.z);
  let x_946 : vec4<f32> = u_xlat3;
  u_xlat2.x = dot(x_946, vec4<f32>(4.0f, 3.0f, 2.0f, 1.0f));
  let x_952 : f32 = u_xlat2.x;
  u_xlat2.x = (-(x_952) + 4.0f);
  let x_959 : f32 = u_xlat2.x;
  u_xlatu2 = u32(x_959);
  let x_963 : u32 = u_xlatu2;
  u_xlati2 = (bitcast<i32>(x_963) << bitcast<u32>(2i));
  let x_967 : vec3<f32> = vs_TEXCOORD7;
  let x_969 : i32 = u_xlati2;
  let x_972 : i32 = u_xlati2;
  let x_976 : vec4<f32> = x_842.x_MainLightWorldToShadow[((x_969 + 1i) / 4i)][((x_972 + 1i) % 4i)];
  u_xlat23 = (vec3<f32>(x_967.y, x_967.y, x_967.y) * vec3<f32>(x_976.x, x_976.y, x_976.z));
  let x_979 : i32 = u_xlati2;
  let x_981 : i32 = u_xlati2;
  let x_984 : vec4<f32> = x_842.x_MainLightWorldToShadow[(x_979 / 4i)][(x_981 % 4i)];
  let x_986 : vec3<f32> = vs_TEXCOORD7;
  let x_989 : vec3<f32> = u_xlat23;
  u_xlat23 = ((vec3<f32>(x_984.x, x_984.y, x_984.z) * vec3<f32>(x_986.x, x_986.x, x_986.x)) + x_989);
  let x_991 : i32 = u_xlati2;
  let x_994 : i32 = u_xlati2;
  let x_998 : vec4<f32> = x_842.x_MainLightWorldToShadow[((x_991 + 2i) / 4i)][((x_994 + 2i) % 4i)];
  let x_1000 : vec3<f32> = vs_TEXCOORD7;
  let x_1003 : vec3<f32> = u_xlat23;
  u_xlat23 = ((vec3<f32>(x_998.x, x_998.y, x_998.z) * vec3<f32>(x_1000.z, x_1000.z, x_1000.z)) + x_1003);
  let x_1005 : vec3<f32> = u_xlat23;
  let x_1006 : i32 = u_xlati2;
  let x_1009 : i32 = u_xlati2;
  let x_1013 : vec4<f32> = x_842.x_MainLightWorldToShadow[((x_1006 + 3i) / 4i)][((x_1009 + 3i) % 4i)];
  let x_1015 : vec3<f32> = (x_1005 + vec3<f32>(x_1013.x, x_1013.y, x_1013.z));
  let x_1016 : vec4<f32> = u_xlat2;
  u_xlat2 = vec4<f32>(x_1015.x, x_1015.y, x_1015.z, x_1016.w);
  u_xlat1.w = 1.0f;
  let x_1024 : vec4<f32> = x_1022.unity_SHAr;
  let x_1025 : vec4<f32> = u_xlat1;
  u_xlat3.x = dot(x_1024, x_1025);
  let x_1029 : vec4<f32> = x_1022.unity_SHAg;
  let x_1030 : vec4<f32> = u_xlat1;
  u_xlat3.y = dot(x_1029, x_1030);
  let x_1034 : vec4<f32> = x_1022.unity_SHAb;
  let x_1035 : vec4<f32> = u_xlat1;
  u_xlat3.z = dot(x_1034, x_1035);
  let x_1038 : vec4<f32> = u_xlat1;
  let x_1040 : vec4<f32> = u_xlat1;
  u_xlat4 = (vec4<f32>(x_1038.y, x_1038.z, x_1038.z, x_1038.x) * vec4<f32>(x_1040.x, x_1040.y, x_1040.z, x_1040.z));
  let x_1044 : vec4<f32> = x_1022.unity_SHBr;
  let x_1045 : vec4<f32> = u_xlat4;
  u_xlat6.x = dot(x_1044, x_1045);
  let x_1049 : vec4<f32> = x_1022.unity_SHBg;
  let x_1050 : vec4<f32> = u_xlat4;
  u_xlat6.y = dot(x_1049, x_1050);
  let x_1054 : vec4<f32> = x_1022.unity_SHBb;
  let x_1055 : vec4<f32> = u_xlat4;
  u_xlat6.z = dot(x_1054, x_1055);
  let x_1059 : f32 = u_xlat1.y;
  let x_1061 : f32 = u_xlat1.y;
  u_xlat64 = (x_1059 * x_1061);
  let x_1064 : f32 = u_xlat1.x;
  let x_1066 : f32 = u_xlat1.x;
  let x_1068 : f32 = u_xlat64;
  u_xlat64 = ((x_1064 * x_1066) + -(x_1068));
  let x_1073 : vec4<f32> = x_1022.unity_SHC;
  let x_1075 : f32 = u_xlat64;
  let x_1078 : vec4<f32> = u_xlat6;
  let x_1080 : vec3<f32> = ((vec3<f32>(x_1073.x, x_1073.y, x_1073.z) * vec3<f32>(x_1075, x_1075, x_1075)) + vec3<f32>(x_1078.x, x_1078.y, x_1078.z));
  let x_1081 : vec4<f32> = u_xlat4;
  u_xlat4 = vec4<f32>(x_1080.x, x_1080.y, x_1080.z, x_1081.w);
  let x_1083 : vec4<f32> = u_xlat3;
  let x_1085 : vec4<f32> = u_xlat4;
  let x_1087 : vec3<f32> = (vec3<f32>(x_1083.x, x_1083.y, x_1083.z) + vec3<f32>(x_1085.x, x_1085.y, x_1085.z));
  let x_1088 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_1087.x, x_1087.y, x_1087.z, x_1088.w);
  let x_1090 : vec4<f32> = u_xlat3;
  let x_1092 : vec3<f32> = max(vec3<f32>(x_1090.x, x_1090.y, x_1090.z), vec3<f32>(0.0f, 0.0f, 0.0f));
  let x_1093 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_1092.x, x_1092.y, x_1092.z, x_1093.w);
  let x_1097 : vec4<f32> = x_127.x_ScaledScreenParams;
  let x_1098 : vec2<f32> = vec2<f32>(x_1097.x, x_1097.y);
  let x_1102 : vec2<f32> = (vec2<f32>(1.0f, 1.0f) / vec2<f32>(x_1098.x, x_1098.y));
  let x_1103 : vec4<f32> = u_xlat4;
  u_xlat4 = vec4<f32>(x_1102.x, x_1102.y, x_1103.z, x_1103.w);
  let x_1105 : vec4<f32> = u_xlat4;
  let x_1107 : vec4<f32> = hlslcc_FragCoord;
  let x_1109 : vec2<f32> = (vec2<f32>(x_1105.x, x_1105.y) * vec2<f32>(x_1107.x, x_1107.y));
  let x_1110 : vec4<f32> = u_xlat4;
  u_xlat4 = vec4<f32>(x_1109.x, x_1109.y, x_1110.z, x_1110.w);
  let x_1113 : f32 = u_xlat4.y;
  let x_1115 : f32 = x_127.x_ScaleBiasRt.x;
  let x_1118 : f32 = x_127.x_ScaleBiasRt.y;
  u_xlat64 = ((x_1113 * x_1115) + x_1118);
  let x_1120 : f32 = u_xlat64;
  u_xlat4.z = (-(x_1120) + 1.0f);
  let x_1125 : f32 = u_xlat0.x;
  u_xlat64 = ((-(x_1125) * 0.959999979f) + 0.959999979f);
  let x_1131 : f32 = u_xlat64;
  u_xlat65 = (-(x_1131) + 1.0f);
  let x_1134 : f32 = u_xlat64;
  let x_1136 : vec4<f32> = u_xlat5;
  let x_1138 : vec3<f32> = (vec3<f32>(x_1134, x_1134, x_1134) * vec3<f32>(x_1136.x, x_1136.y, x_1136.z));
  let x_1139 : vec4<f32> = u_xlat6;
  u_xlat6 = vec4<f32>(x_1138.x, x_1138.y, x_1138.z, x_1139.w);
  let x_1141 : vec4<f32> = u_xlat5;
  let x_1145 : vec3<f32> = (vec3<f32>(x_1141.x, x_1141.y, x_1141.z) + vec3<f32>(-0.039999999f, -0.039999999f, -0.039999999f));
  let x_1146 : vec4<f32> = u_xlat5;
  u_xlat5 = vec4<f32>(x_1145.x, x_1145.y, x_1145.z, x_1146.w);
  let x_1148 : vec3<f32> = u_xlat0;
  let x_1150 : vec4<f32> = u_xlat5;
  let x_1155 : vec3<f32> = ((vec3<f32>(x_1148.x, x_1148.x, x_1148.x) * vec3<f32>(x_1150.x, x_1150.y, x_1150.z)) + vec3<f32>(0.039999999f, 0.039999999f, 0.039999999f));
  let x_1156 : vec4<f32> = u_xlat5;
  u_xlat5 = vec4<f32>(x_1155.x, x_1155.y, x_1155.z, x_1156.w);
  let x_1158 : f32 = u_xlat42;
  u_xlat0.x = (-(x_1158) + 1.0f);
  let x_1163 : f32 = u_xlat0.x;
  let x_1165 : f32 = u_xlat0.x;
  u_xlat64 = (x_1163 * x_1165);
  let x_1167 : f32 = u_xlat64;
  u_xlat64 = max(x_1167, 0.0078125f);
  let x_1171 : f32 = u_xlat64;
  let x_1172 : f32 = u_xlat64;
  u_xlat66 = (x_1171 * x_1172);
  let x_1174 : f32 = u_xlat42;
  let x_1175 : f32 = u_xlat65;
  u_xlat42 = (x_1174 + x_1175);
  let x_1177 : f32 = u_xlat42;
  u_xlat42 = clamp(x_1177, 0.0f, 1.0f);
  let x_1179 : f32 = u_xlat64;
  u_xlat65 = ((x_1179 * 4.0f) + 2.0f);
  let x_1187 : vec4<f32> = u_xlat4;
  let x_1190 : f32 = x_127.x_GlobalMipBias.x;
  let x_1191 : vec4<f32> = textureSampleBias(x_ScreenSpaceOcclusionTexture, sampler_ScreenSpaceOcclusionTexture, vec2<f32>(x_1187.x, x_1187.z), x_1190);
  u_xlat4.x = x_1191.x;
  let x_1196 : f32 = u_xlat4.x;
  u_xlat25 = (x_1196 + -1.0f);
  let x_1199 : f32 = x_127.x_AmbientOcclusionParam.w;
  let x_1200 : f32 = u_xlat25;
  u_xlat25 = ((x_1199 * x_1200) + 1.0f);
  let x_1203 : f32 = u_xlat21;
  let x_1205 : f32 = u_xlat4.x;
  u_xlat21 = min(x_1203, x_1205);
  let x_1209 : f32 = x_842.x_MainLightShadowParams.y;
  u_xlatb4 = (0.0f < x_1209);
  let x_1211 : bool = u_xlatb4;
  if (x_1211) {
    let x_1215 : f32 = x_842.x_MainLightShadowParams.y;
    u_xlatb4 = (x_1215 == 1.0f);
    let x_1217 : bool = u_xlatb4;
    if (x_1217) {
      let x_1220 : vec4<f32> = u_xlat2;
      let x_1223 : vec4<f32> = x_842.x_MainLightShadowOffset0;
      u_xlat7 = (vec4<f32>(x_1220.x, x_1220.y, x_1220.x, x_1220.y) + x_1223);
      let x_1226 : vec4<f32> = u_xlat7;
      let x_1227 : vec2<f32> = vec2<f32>(x_1226.x, x_1226.y);
      let x_1229 : f32 = u_xlat2.z;
      txVec0 = vec3<f32>(x_1227.x, x_1227.y, x_1229);
      let x_1241 : vec3<f32> = txVec0;
      let x_1243 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1241.xy, x_1241.z);
      u_xlat8.x = x_1243;
      let x_1246 : vec4<f32> = u_xlat7;
      let x_1247 : vec2<f32> = vec2<f32>(x_1246.z, x_1246.w);
      let x_1249 : f32 = u_xlat2.z;
      txVec1 = vec3<f32>(x_1247.x, x_1247.y, x_1249);
      let x_1256 : vec3<f32> = txVec1;
      let x_1258 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1256.xy, x_1256.z);
      u_xlat8.y = x_1258;
      let x_1260 : vec4<f32> = u_xlat2;
      let x_1263 : vec4<f32> = x_842.x_MainLightShadowOffset1;
      u_xlat7 = (vec4<f32>(x_1260.x, x_1260.y, x_1260.x, x_1260.y) + x_1263);
      let x_1266 : vec4<f32> = u_xlat7;
      let x_1267 : vec2<f32> = vec2<f32>(x_1266.x, x_1266.y);
      let x_1269 : f32 = u_xlat2.z;
      txVec2 = vec3<f32>(x_1267.x, x_1267.y, x_1269);
      let x_1276 : vec3<f32> = txVec2;
      let x_1278 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1276.xy, x_1276.z);
      u_xlat8.z = x_1278;
      let x_1281 : vec4<f32> = u_xlat7;
      let x_1282 : vec2<f32> = vec2<f32>(x_1281.z, x_1281.w);
      let x_1284 : f32 = u_xlat2.z;
      txVec3 = vec3<f32>(x_1282.x, x_1282.y, x_1284);
      let x_1291 : vec3<f32> = txVec3;
      let x_1293 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1291.xy, x_1291.z);
      u_xlat8.w = x_1293;
      let x_1295 : vec4<f32> = u_xlat8;
      u_xlat4.x = dot(x_1295, vec4<f32>(0.25f, 0.25f, 0.25f, 0.25f));
    } else {
      let x_1303 : f32 = x_842.x_MainLightShadowParams.y;
      u_xlatb46 = (x_1303 == 2.0f);
      let x_1305 : bool = u_xlatb46;
      if (x_1305) {
        let x_1310 : vec4<f32> = u_xlat2;
        let x_1313 : vec4<f32> = x_842.x_MainLightShadowmapSize;
        u_xlat46 = ((vec2<f32>(x_1310.x, x_1310.y) * vec2<f32>(x_1313.z, x_1313.w)) + vec2<f32>(0.5f, 0.5f));
        let x_1317 : vec2<f32> = u_xlat46;
        u_xlat46 = floor(x_1317);
        let x_1319 : vec4<f32> = u_xlat2;
        let x_1322 : vec4<f32> = x_842.x_MainLightShadowmapSize;
        let x_1325 : vec2<f32> = u_xlat46;
        let x_1327 : vec2<f32> = ((vec2<f32>(x_1319.x, x_1319.y) * vec2<f32>(x_1322.z, x_1322.w)) + -(x_1325));
        let x_1328 : vec4<f32> = u_xlat7;
        u_xlat7 = vec4<f32>(x_1327.x, x_1327.y, x_1328.z, x_1328.w);
        let x_1330 : vec4<f32> = u_xlat7;
        u_xlat8 = (vec4<f32>(x_1330.x, x_1330.x, x_1330.y, x_1330.y) + vec4<f32>(0.5f, 1.0f, 0.5f, 1.0f));
        let x_1334 : vec4<f32> = u_xlat8;
        let x_1336 : vec4<f32> = u_xlat8;
        u_xlat9 = (vec4<f32>(x_1334.x, x_1334.x, x_1334.z, x_1334.z) * vec4<f32>(x_1336.x, x_1336.x, x_1336.z, x_1336.z));
        let x_1340 : vec4<f32> = u_xlat9;
        u_xlat49 = (vec2<f32>(x_1340.y, x_1340.w) * vec2<f32>(0.079999998f, 0.079999998f));
        let x_1345 : vec4<f32> = u_xlat9;
        let x_1348 : vec4<f32> = u_xlat7;
        let x_1351 : vec2<f32> = ((vec2<f32>(x_1345.x, x_1345.z) * vec2<f32>(0.5f, 0.5f)) + -(vec2<f32>(x_1348.x, x_1348.y)));
        let x_1352 : vec4<f32> = u_xlat8;
        u_xlat8 = vec4<f32>(x_1351.x, x_1352.y, x_1351.y, x_1352.w);
        let x_1354 : vec4<f32> = u_xlat7;
        let x_1357 : vec2<f32> = (-(vec2<f32>(x_1354.x, x_1354.y)) + vec2<f32>(1.0f, 1.0f));
        let x_1358 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_1357.x, x_1357.y, x_1358.z, x_1358.w);
        let x_1361 : vec4<f32> = u_xlat7;
        u_xlat51 = min(vec2<f32>(x_1361.x, x_1361.y), vec2<f32>(0.0f, 0.0f));
        let x_1365 : vec2<f32> = u_xlat51;
        let x_1367 : vec2<f32> = u_xlat51;
        let x_1369 : vec4<f32> = u_xlat9;
        u_xlat51 = ((-(x_1365) * x_1367) + vec2<f32>(x_1369.x, x_1369.y));
        let x_1372 : vec4<f32> = u_xlat7;
        let x_1374 : vec2<f32> = max(vec2<f32>(x_1372.x, x_1372.y), vec2<f32>(0.0f, 0.0f));
        let x_1375 : vec4<f32> = u_xlat7;
        u_xlat7 = vec4<f32>(x_1374.x, x_1374.y, x_1375.z, x_1375.w);
        let x_1377 : vec4<f32> = u_xlat7;
        let x_1380 : vec4<f32> = u_xlat7;
        let x_1383 : vec4<f32> = u_xlat8;
        let x_1385 : vec2<f32> = ((-(vec2<f32>(x_1377.x, x_1377.y)) * vec2<f32>(x_1380.x, x_1380.y)) + vec2<f32>(x_1383.y, x_1383.w));
        let x_1386 : vec4<f32> = u_xlat7;
        u_xlat7 = vec4<f32>(x_1385.x, x_1385.y, x_1386.z, x_1386.w);
        let x_1388 : vec2<f32> = u_xlat51;
        u_xlat51 = (x_1388 + vec2<f32>(1.0f, 1.0f));
        let x_1390 : vec4<f32> = u_xlat7;
        let x_1392 : vec2<f32> = (vec2<f32>(x_1390.x, x_1390.y) + vec2<f32>(1.0f, 1.0f));
        let x_1393 : vec4<f32> = u_xlat7;
        u_xlat7 = vec4<f32>(x_1392.x, x_1392.y, x_1393.z, x_1393.w);
        let x_1395 : vec4<f32> = u_xlat8;
        let x_1399 : vec2<f32> = (vec2<f32>(x_1395.x, x_1395.z) * vec2<f32>(0.159999996f, 0.159999996f));
        let x_1400 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_1399.x, x_1399.y, x_1400.z, x_1400.w);
        let x_1402 : vec4<f32> = u_xlat9;
        let x_1404 : vec2<f32> = (vec2<f32>(x_1402.x, x_1402.y) * vec2<f32>(0.159999996f, 0.159999996f));
        let x_1405 : vec4<f32> = u_xlat11;
        u_xlat11 = vec4<f32>(x_1404.x, x_1404.y, x_1405.z, x_1405.w);
        let x_1407 : vec2<f32> = u_xlat51;
        let x_1408 : vec2<f32> = (x_1407 * vec2<f32>(0.159999996f, 0.159999996f));
        let x_1409 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_1408.x, x_1408.y, x_1409.z, x_1409.w);
        let x_1411 : vec4<f32> = u_xlat7;
        let x_1413 : vec2<f32> = (vec2<f32>(x_1411.x, x_1411.y) * vec2<f32>(0.159999996f, 0.159999996f));
        let x_1414 : vec4<f32> = u_xlat12;
        u_xlat12 = vec4<f32>(x_1413.x, x_1413.y, x_1414.z, x_1414.w);
        let x_1416 : vec4<f32> = u_xlat8;
        let x_1418 : vec2<f32> = (vec2<f32>(x_1416.y, x_1416.w) * vec2<f32>(0.159999996f, 0.159999996f));
        let x_1419 : vec4<f32> = u_xlat7;
        u_xlat7 = vec4<f32>(x_1418.x, x_1418.y, x_1419.z, x_1419.w);
        let x_1422 : f32 = u_xlat9.x;
        u_xlat10.z = x_1422;
        let x_1425 : f32 = u_xlat7.x;
        u_xlat10.w = x_1425;
        let x_1428 : f32 = u_xlat12.x;
        u_xlat11.z = x_1428;
        let x_1431 : f32 = u_xlat49.x;
        u_xlat11.w = x_1431;
        let x_1433 : vec4<f32> = u_xlat10;
        let x_1435 : vec4<f32> = u_xlat11;
        u_xlat8 = (vec4<f32>(x_1433.z, x_1433.w, x_1433.x, x_1433.z) + vec4<f32>(x_1435.z, x_1435.w, x_1435.x, x_1435.z));
        let x_1439 : f32 = u_xlat10.y;
        u_xlat9.z = x_1439;
        let x_1442 : f32 = u_xlat7.y;
        u_xlat9.w = x_1442;
        let x_1445 : f32 = u_xlat11.y;
        u_xlat12.z = x_1445;
        let x_1448 : f32 = u_xlat49.y;
        u_xlat12.w = x_1448;
        let x_1450 : vec4<f32> = u_xlat9;
        let x_1452 : vec4<f32> = u_xlat12;
        let x_1454 : vec3<f32> = (vec3<f32>(x_1450.z, x_1450.y, x_1450.w) + vec3<f32>(x_1452.z, x_1452.y, x_1452.w));
        let x_1455 : vec4<f32> = u_xlat7;
        u_xlat7 = vec4<f32>(x_1454.x, x_1454.y, x_1454.z, x_1455.w);
        let x_1457 : vec4<f32> = u_xlat11;
        let x_1459 : vec4<f32> = u_xlat8;
        let x_1461 : vec3<f32> = (vec3<f32>(x_1457.x, x_1457.z, x_1457.w) / vec3<f32>(x_1459.z, x_1459.w, x_1459.y));
        let x_1462 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_1461.x, x_1461.y, x_1461.z, x_1462.w);
        let x_1464 : vec4<f32> = u_xlat9;
        let x_1470 : vec3<f32> = (vec3<f32>(x_1464.x, x_1464.y, x_1464.z) + vec3<f32>(-2.5f, -0.5f, 1.5f));
        let x_1471 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_1470.x, x_1470.y, x_1470.z, x_1471.w);
        let x_1473 : vec4<f32> = u_xlat12;
        let x_1475 : vec4<f32> = u_xlat7;
        let x_1477 : vec3<f32> = (vec3<f32>(x_1473.z, x_1473.y, x_1473.w) / vec3<f32>(x_1475.x, x_1475.y, x_1475.z));
        let x_1478 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_1477.x, x_1477.y, x_1477.z, x_1478.w);
        let x_1480 : vec4<f32> = u_xlat10;
        let x_1482 : vec3<f32> = (vec3<f32>(x_1480.x, x_1480.y, x_1480.z) + vec3<f32>(-2.5f, -0.5f, 1.5f));
        let x_1483 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_1482.x, x_1482.y, x_1482.z, x_1483.w);
        let x_1485 : vec4<f32> = u_xlat9;
        let x_1488 : vec4<f32> = x_842.x_MainLightShadowmapSize;
        let x_1490 : vec3<f32> = (vec3<f32>(x_1485.y, x_1485.x, x_1485.z) * vec3<f32>(x_1488.x, x_1488.x, x_1488.x));
        let x_1491 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_1490.x, x_1490.y, x_1490.z, x_1491.w);
        let x_1493 : vec4<f32> = u_xlat10;
        let x_1496 : vec4<f32> = x_842.x_MainLightShadowmapSize;
        let x_1498 : vec3<f32> = (vec3<f32>(x_1493.x, x_1493.y, x_1493.z) * vec3<f32>(x_1496.y, x_1496.y, x_1496.y));
        let x_1499 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_1498.x, x_1498.y, x_1498.z, x_1499.w);
        let x_1502 : f32 = u_xlat10.x;
        u_xlat9.w = x_1502;
        let x_1504 : vec2<f32> = u_xlat46;
        let x_1507 : vec4<f32> = x_842.x_MainLightShadowmapSize;
        let x_1510 : vec4<f32> = u_xlat9;
        u_xlat11 = ((vec4<f32>(x_1504.x, x_1504.y, x_1504.x, x_1504.y) * vec4<f32>(x_1507.x, x_1507.y, x_1507.x, x_1507.y)) + vec4<f32>(x_1510.y, x_1510.w, x_1510.x, x_1510.w));
        let x_1513 : vec2<f32> = u_xlat46;
        let x_1515 : vec4<f32> = x_842.x_MainLightShadowmapSize;
        let x_1518 : vec4<f32> = u_xlat9;
        let x_1520 : vec2<f32> = ((x_1513 * vec2<f32>(x_1515.x, x_1515.y)) + vec2<f32>(x_1518.z, x_1518.w));
        let x_1521 : vec4<f32> = u_xlat12;
        u_xlat12 = vec4<f32>(x_1520.x, x_1520.y, x_1521.z, x_1521.w);
        let x_1524 : f32 = u_xlat9.y;
        u_xlat10.w = x_1524;
        let x_1526 : vec4<f32> = u_xlat10;
        let x_1527 : vec2<f32> = vec2<f32>(x_1526.y, x_1526.z);
        let x_1528 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_1528.x, x_1527.x, x_1528.z, x_1527.y);
        let x_1530 : vec2<f32> = u_xlat46;
        let x_1533 : vec4<f32> = x_842.x_MainLightShadowmapSize;
        let x_1536 : vec4<f32> = u_xlat9;
        u_xlat13 = ((vec4<f32>(x_1530.x, x_1530.y, x_1530.x, x_1530.y) * vec4<f32>(x_1533.x, x_1533.y, x_1533.x, x_1533.y)) + vec4<f32>(x_1536.x, x_1536.y, x_1536.z, x_1536.y));
        let x_1539 : vec2<f32> = u_xlat46;
        let x_1542 : vec4<f32> = x_842.x_MainLightShadowmapSize;
        let x_1545 : vec4<f32> = u_xlat10;
        u_xlat10 = ((vec4<f32>(x_1539.x, x_1539.y, x_1539.x, x_1539.y) * vec4<f32>(x_1542.x, x_1542.y, x_1542.x, x_1542.y)) + vec4<f32>(x_1545.w, x_1545.y, x_1545.w, x_1545.z));
        let x_1548 : vec2<f32> = u_xlat46;
        let x_1551 : vec4<f32> = x_842.x_MainLightShadowmapSize;
        let x_1554 : vec4<f32> = u_xlat9;
        u_xlat9 = ((vec4<f32>(x_1548.x, x_1548.y, x_1548.x, x_1548.y) * vec4<f32>(x_1551.x, x_1551.y, x_1551.x, x_1551.y)) + vec4<f32>(x_1554.x, x_1554.w, x_1554.z, x_1554.w));
        let x_1558 : vec4<f32> = u_xlat7;
        let x_1560 : vec4<f32> = u_xlat8;
        u_xlat14 = (vec4<f32>(x_1558.x, x_1558.x, x_1558.x, x_1558.y) * vec4<f32>(x_1560.z, x_1560.w, x_1560.y, x_1560.z));
        let x_1564 : vec4<f32> = u_xlat7;
        let x_1566 : vec4<f32> = u_xlat8;
        u_xlat15 = (vec4<f32>(x_1564.y, x_1564.y, x_1564.z, x_1564.z) * x_1566);
        let x_1569 : f32 = u_xlat7.z;
        let x_1571 : f32 = u_xlat8.y;
        u_xlat46.x = (x_1569 * x_1571);
        let x_1575 : vec4<f32> = u_xlat11;
        let x_1576 : vec2<f32> = vec2<f32>(x_1575.x, x_1575.y);
        let x_1578 : f32 = u_xlat2.z;
        txVec4 = vec3<f32>(x_1576.x, x_1576.y, x_1578);
        let x_1586 : vec3<f32> = txVec4;
        let x_1588 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1586.xy, x_1586.z);
        u_xlat67 = x_1588;
        let x_1590 : vec4<f32> = u_xlat11;
        let x_1591 : vec2<f32> = vec2<f32>(x_1590.z, x_1590.w);
        let x_1593 : f32 = u_xlat2.z;
        txVec5 = vec3<f32>(x_1591.x, x_1591.y, x_1593);
        let x_1601 : vec3<f32> = txVec5;
        let x_1603 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1601.xy, x_1601.z);
        u_xlat68 = x_1603;
        let x_1604 : f32 = u_xlat68;
        let x_1606 : f32 = u_xlat14.y;
        u_xlat68 = (x_1604 * x_1606);
        let x_1609 : f32 = u_xlat14.x;
        let x_1610 : f32 = u_xlat67;
        let x_1612 : f32 = u_xlat68;
        u_xlat67 = ((x_1609 * x_1610) + x_1612);
        let x_1615 : vec4<f32> = u_xlat12;
        let x_1616 : vec2<f32> = vec2<f32>(x_1615.x, x_1615.y);
        let x_1618 : f32 = u_xlat2.z;
        txVec6 = vec3<f32>(x_1616.x, x_1616.y, x_1618);
        let x_1625 : vec3<f32> = txVec6;
        let x_1627 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1625.xy, x_1625.z);
        u_xlat68 = x_1627;
        let x_1629 : f32 = u_xlat14.z;
        let x_1630 : f32 = u_xlat68;
        let x_1632 : f32 = u_xlat67;
        u_xlat67 = ((x_1629 * x_1630) + x_1632);
        let x_1635 : vec4<f32> = u_xlat10;
        let x_1636 : vec2<f32> = vec2<f32>(x_1635.x, x_1635.y);
        let x_1638 : f32 = u_xlat2.z;
        txVec7 = vec3<f32>(x_1636.x, x_1636.y, x_1638);
        let x_1645 : vec3<f32> = txVec7;
        let x_1647 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1645.xy, x_1645.z);
        u_xlat68 = x_1647;
        let x_1649 : f32 = u_xlat14.w;
        let x_1650 : f32 = u_xlat68;
        let x_1652 : f32 = u_xlat67;
        u_xlat67 = ((x_1649 * x_1650) + x_1652);
        let x_1655 : vec4<f32> = u_xlat13;
        let x_1656 : vec2<f32> = vec2<f32>(x_1655.x, x_1655.y);
        let x_1658 : f32 = u_xlat2.z;
        txVec8 = vec3<f32>(x_1656.x, x_1656.y, x_1658);
        let x_1665 : vec3<f32> = txVec8;
        let x_1667 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1665.xy, x_1665.z);
        u_xlat68 = x_1667;
        let x_1669 : f32 = u_xlat15.x;
        let x_1670 : f32 = u_xlat68;
        let x_1672 : f32 = u_xlat67;
        u_xlat67 = ((x_1669 * x_1670) + x_1672);
        let x_1675 : vec4<f32> = u_xlat13;
        let x_1676 : vec2<f32> = vec2<f32>(x_1675.z, x_1675.w);
        let x_1678 : f32 = u_xlat2.z;
        txVec9 = vec3<f32>(x_1676.x, x_1676.y, x_1678);
        let x_1685 : vec3<f32> = txVec9;
        let x_1687 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1685.xy, x_1685.z);
        u_xlat68 = x_1687;
        let x_1689 : f32 = u_xlat15.y;
        let x_1690 : f32 = u_xlat68;
        let x_1692 : f32 = u_xlat67;
        u_xlat67 = ((x_1689 * x_1690) + x_1692);
        let x_1695 : vec4<f32> = u_xlat10;
        let x_1696 : vec2<f32> = vec2<f32>(x_1695.z, x_1695.w);
        let x_1698 : f32 = u_xlat2.z;
        txVec10 = vec3<f32>(x_1696.x, x_1696.y, x_1698);
        let x_1705 : vec3<f32> = txVec10;
        let x_1707 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1705.xy, x_1705.z);
        u_xlat68 = x_1707;
        let x_1709 : f32 = u_xlat15.z;
        let x_1710 : f32 = u_xlat68;
        let x_1712 : f32 = u_xlat67;
        u_xlat67 = ((x_1709 * x_1710) + x_1712);
        let x_1715 : vec4<f32> = u_xlat9;
        let x_1716 : vec2<f32> = vec2<f32>(x_1715.x, x_1715.y);
        let x_1718 : f32 = u_xlat2.z;
        txVec11 = vec3<f32>(x_1716.x, x_1716.y, x_1718);
        let x_1725 : vec3<f32> = txVec11;
        let x_1727 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1725.xy, x_1725.z);
        u_xlat68 = x_1727;
        let x_1729 : f32 = u_xlat15.w;
        let x_1730 : f32 = u_xlat68;
        let x_1732 : f32 = u_xlat67;
        u_xlat67 = ((x_1729 * x_1730) + x_1732);
        let x_1735 : vec4<f32> = u_xlat9;
        let x_1736 : vec2<f32> = vec2<f32>(x_1735.z, x_1735.w);
        let x_1738 : f32 = u_xlat2.z;
        txVec12 = vec3<f32>(x_1736.x, x_1736.y, x_1738);
        let x_1745 : vec3<f32> = txVec12;
        let x_1747 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1745.xy, x_1745.z);
        u_xlat68 = x_1747;
        let x_1749 : f32 = u_xlat46.x;
        let x_1750 : f32 = u_xlat68;
        let x_1752 : f32 = u_xlat67;
        u_xlat4.x = ((x_1749 * x_1750) + x_1752);
      } else {
        let x_1756 : vec4<f32> = u_xlat2;
        let x_1759 : vec4<f32> = x_842.x_MainLightShadowmapSize;
        u_xlat46 = ((vec2<f32>(x_1756.x, x_1756.y) * vec2<f32>(x_1759.z, x_1759.w)) + vec2<f32>(0.5f, 0.5f));
        let x_1763 : vec2<f32> = u_xlat46;
        u_xlat46 = floor(x_1763);
        let x_1765 : vec4<f32> = u_xlat2;
        let x_1768 : vec4<f32> = x_842.x_MainLightShadowmapSize;
        let x_1771 : vec2<f32> = u_xlat46;
        let x_1773 : vec2<f32> = ((vec2<f32>(x_1765.x, x_1765.y) * vec2<f32>(x_1768.z, x_1768.w)) + -(x_1771));
        let x_1774 : vec4<f32> = u_xlat7;
        u_xlat7 = vec4<f32>(x_1773.x, x_1773.y, x_1774.z, x_1774.w);
        let x_1776 : vec4<f32> = u_xlat7;
        u_xlat8 = (vec4<f32>(x_1776.x, x_1776.x, x_1776.y, x_1776.y) + vec4<f32>(0.5f, 1.0f, 0.5f, 1.0f));
        let x_1779 : vec4<f32> = u_xlat8;
        let x_1781 : vec4<f32> = u_xlat8;
        u_xlat9 = (vec4<f32>(x_1779.x, x_1779.x, x_1779.z, x_1779.z) * vec4<f32>(x_1781.x, x_1781.x, x_1781.z, x_1781.z));
        let x_1784 : vec4<f32> = u_xlat9;
        let x_1788 : vec2<f32> = (vec2<f32>(x_1784.y, x_1784.w) * vec2<f32>(0.040816002f, 0.040816002f));
        let x_1789 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_1789.x, x_1788.x, x_1789.z, x_1788.y);
        let x_1791 : vec4<f32> = u_xlat9;
        let x_1794 : vec4<f32> = u_xlat7;
        u_xlat49 = ((vec2<f32>(x_1791.x, x_1791.z) * vec2<f32>(0.5f, 0.5f)) + -(vec2<f32>(x_1794.x, x_1794.y)));
        let x_1798 : vec4<f32> = u_xlat7;
        let x_1801 : vec2<f32> = (-(vec2<f32>(x_1798.x, x_1798.y)) + vec2<f32>(1.0f, 1.0f));
        let x_1802 : vec4<f32> = u_xlat8;
        u_xlat8 = vec4<f32>(x_1801.x, x_1802.y, x_1801.y, x_1802.w);
        let x_1804 : vec4<f32> = u_xlat7;
        let x_1806 : vec2<f32> = min(vec2<f32>(x_1804.x, x_1804.y), vec2<f32>(0.0f, 0.0f));
        let x_1807 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_1806.x, x_1806.y, x_1807.z, x_1807.w);
        let x_1809 : vec4<f32> = u_xlat9;
        let x_1812 : vec4<f32> = u_xlat9;
        let x_1815 : vec4<f32> = u_xlat8;
        let x_1817 : vec2<f32> = ((-(vec2<f32>(x_1809.x, x_1809.y)) * vec2<f32>(x_1812.x, x_1812.y)) + vec2<f32>(x_1815.x, x_1815.z));
        let x_1818 : vec4<f32> = u_xlat8;
        u_xlat8 = vec4<f32>(x_1817.x, x_1818.y, x_1817.y, x_1818.w);
        let x_1820 : vec4<f32> = u_xlat7;
        let x_1822 : vec2<f32> = max(vec2<f32>(x_1820.x, x_1820.y), vec2<f32>(0.0f, 0.0f));
        let x_1823 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_1822.x, x_1822.y, x_1823.z, x_1823.w);
        let x_1825 : vec4<f32> = u_xlat9;
        let x_1828 : vec4<f32> = u_xlat9;
        let x_1831 : vec4<f32> = u_xlat8;
        let x_1833 : vec2<f32> = ((-(vec2<f32>(x_1825.x, x_1825.y)) * vec2<f32>(x_1828.x, x_1828.y)) + vec2<f32>(x_1831.y, x_1831.w));
        let x_1834 : vec4<f32> = u_xlat8;
        u_xlat8 = vec4<f32>(x_1834.x, x_1833.x, x_1834.z, x_1833.y);
        let x_1836 : vec4<f32> = u_xlat8;
        u_xlat8 = (x_1836 + vec4<f32>(2.0f, 2.0f, 2.0f, 2.0f));
        let x_1840 : f32 = u_xlat8.y;
        u_xlat9.z = (x_1840 * 0.081632003f);
        let x_1844 : vec2<f32> = u_xlat49;
        let x_1847 : vec2<f32> = (vec2<f32>(x_1844.y, x_1844.x) * vec2<f32>(0.081632003f, 0.081632003f));
        let x_1848 : vec4<f32> = u_xlat11;
        u_xlat11 = vec4<f32>(x_1847.x, x_1847.y, x_1848.z, x_1848.w);
        let x_1850 : vec4<f32> = u_xlat8;
        u_xlat49 = (vec2<f32>(x_1850.x, x_1850.z) * vec2<f32>(0.081632003f, 0.081632003f));
        let x_1854 : f32 = u_xlat8.w;
        u_xlat11.z = (x_1854 * 0.081632003f);
        let x_1858 : f32 = u_xlat11.y;
        u_xlat9.x = x_1858;
        let x_1860 : vec4<f32> = u_xlat7;
        let x_1867 : vec2<f32> = ((vec2<f32>(x_1860.x, x_1860.x) * vec2<f32>(-0.081632003f, 0.081632003f)) + vec2<f32>(0.163264006f, 0.081632003f));
        let x_1868 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_1868.x, x_1867.x, x_1868.z, x_1867.y);
        let x_1870 : vec4<f32> = u_xlat7;
        let x_1874 : vec2<f32> = ((vec2<f32>(x_1870.x, x_1870.x) * vec2<f32>(-0.081632003f, 0.081632003f)) + vec2<f32>(0.081632003f, 0.163264006f));
        let x_1875 : vec4<f32> = u_xlat8;
        u_xlat8 = vec4<f32>(x_1874.x, x_1875.y, x_1874.y, x_1875.w);
        let x_1878 : f32 = u_xlat49.x;
        u_xlat8.y = x_1878;
        let x_1881 : f32 = u_xlat10.y;
        u_xlat8.w = x_1881;
        let x_1883 : vec4<f32> = u_xlat8;
        let x_1884 : vec4<f32> = u_xlat9;
        u_xlat9 = (x_1883 + x_1884);
        let x_1886 : vec4<f32> = u_xlat7;
        let x_1889 : vec2<f32> = ((vec2<f32>(x_1886.y, x_1886.y) * vec2<f32>(-0.081632003f, 0.081632003f)) + vec2<f32>(0.163264006f, 0.081632003f));
        let x_1890 : vec4<f32> = u_xlat11;
        u_xlat11 = vec4<f32>(x_1890.x, x_1889.x, x_1890.z, x_1889.y);
        let x_1892 : vec4<f32> = u_xlat7;
        let x_1895 : vec2<f32> = ((vec2<f32>(x_1892.y, x_1892.y) * vec2<f32>(-0.081632003f, 0.081632003f)) + vec2<f32>(0.081632003f, 0.163264006f));
        let x_1896 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_1895.x, x_1896.y, x_1895.y, x_1896.w);
        let x_1899 : f32 = u_xlat49.y;
        u_xlat10.y = x_1899;
        let x_1901 : vec4<f32> = u_xlat10;
        let x_1902 : vec4<f32> = u_xlat11;
        u_xlat7 = (x_1901 + x_1902);
        let x_1904 : vec4<f32> = u_xlat8;
        let x_1905 : vec4<f32> = u_xlat9;
        u_xlat8 = (x_1904 / x_1905);
        let x_1907 : vec4<f32> = u_xlat8;
        u_xlat8 = (x_1907 + vec4<f32>(-3.5f, -1.5f, 0.5f, 2.5f));
        let x_1913 : vec4<f32> = u_xlat10;
        let x_1914 : vec4<f32> = u_xlat7;
        u_xlat10 = (x_1913 / x_1914);
        let x_1916 : vec4<f32> = u_xlat10;
        u_xlat10 = (x_1916 + vec4<f32>(-3.5f, -1.5f, 0.5f, 2.5f));
        let x_1918 : vec4<f32> = u_xlat8;
        let x_1921 : vec4<f32> = x_842.x_MainLightShadowmapSize;
        u_xlat8 = (vec4<f32>(x_1918.w, x_1918.x, x_1918.y, x_1918.z) * vec4<f32>(x_1921.x, x_1921.x, x_1921.x, x_1921.x));
        let x_1924 : vec4<f32> = u_xlat10;
        let x_1927 : vec4<f32> = x_842.x_MainLightShadowmapSize;
        u_xlat10 = (vec4<f32>(x_1924.x, x_1924.w, x_1924.y, x_1924.z) * vec4<f32>(x_1927.y, x_1927.y, x_1927.y, x_1927.y));
        let x_1930 : vec4<f32> = u_xlat8;
        let x_1931 : vec3<f32> = vec3<f32>(x_1930.y, x_1930.z, x_1930.w);
        let x_1932 : vec4<f32> = u_xlat11;
        u_xlat11 = vec4<f32>(x_1931.x, x_1932.y, x_1931.y, x_1931.z);
        let x_1935 : f32 = u_xlat10.x;
        u_xlat11.y = x_1935;
        let x_1937 : vec2<f32> = u_xlat46;
        let x_1940 : vec4<f32> = x_842.x_MainLightShadowmapSize;
        let x_1943 : vec4<f32> = u_xlat11;
        u_xlat12 = ((vec4<f32>(x_1937.x, x_1937.y, x_1937.x, x_1937.y) * vec4<f32>(x_1940.x, x_1940.y, x_1940.x, x_1940.y)) + vec4<f32>(x_1943.x, x_1943.y, x_1943.z, x_1943.y));
        let x_1946 : vec2<f32> = u_xlat46;
        let x_1948 : vec4<f32> = x_842.x_MainLightShadowmapSize;
        let x_1951 : vec4<f32> = u_xlat11;
        let x_1953 : vec2<f32> = ((x_1946 * vec2<f32>(x_1948.x, x_1948.y)) + vec2<f32>(x_1951.w, x_1951.y));
        let x_1954 : vec4<f32> = u_xlat13;
        u_xlat13 = vec4<f32>(x_1953.x, x_1953.y, x_1954.z, x_1954.w);
        let x_1957 : f32 = u_xlat11.y;
        u_xlat8.y = x_1957;
        let x_1960 : f32 = u_xlat10.z;
        u_xlat11.y = x_1960;
        let x_1962 : vec2<f32> = u_xlat46;
        let x_1965 : vec4<f32> = x_842.x_MainLightShadowmapSize;
        let x_1968 : vec4<f32> = u_xlat11;
        u_xlat14 = ((vec4<f32>(x_1962.x, x_1962.y, x_1962.x, x_1962.y) * vec4<f32>(x_1965.x, x_1965.y, x_1965.x, x_1965.y)) + vec4<f32>(x_1968.x, x_1968.y, x_1968.z, x_1968.y));
        let x_1972 : vec2<f32> = u_xlat46;
        let x_1974 : vec4<f32> = x_842.x_MainLightShadowmapSize;
        let x_1977 : vec4<f32> = u_xlat11;
        u_xlat55 = ((x_1972 * vec2<f32>(x_1974.x, x_1974.y)) + vec2<f32>(x_1977.w, x_1977.y));
        let x_1981 : f32 = u_xlat11.y;
        u_xlat8.z = x_1981;
        let x_1983 : vec2<f32> = u_xlat46;
        let x_1986 : vec4<f32> = x_842.x_MainLightShadowmapSize;
        let x_1989 : vec4<f32> = u_xlat8;
        u_xlat15 = ((vec4<f32>(x_1983.x, x_1983.y, x_1983.x, x_1983.y) * vec4<f32>(x_1986.x, x_1986.y, x_1986.x, x_1986.y)) + vec4<f32>(x_1989.x, x_1989.y, x_1989.x, x_1989.z));
        let x_1993 : f32 = u_xlat10.w;
        u_xlat11.y = x_1993;
        let x_1996 : vec2<f32> = u_xlat46;
        let x_1999 : vec4<f32> = x_842.x_MainLightShadowmapSize;
        let x_2002 : vec4<f32> = u_xlat11;
        u_xlat16 = ((vec4<f32>(x_1996.x, x_1996.y, x_1996.x, x_1996.y) * vec4<f32>(x_1999.x, x_1999.y, x_1999.x, x_1999.y)) + vec4<f32>(x_2002.x, x_2002.y, x_2002.z, x_2002.y));
        let x_2006 : vec2<f32> = u_xlat46;
        let x_2008 : vec4<f32> = x_842.x_MainLightShadowmapSize;
        let x_2011 : vec4<f32> = u_xlat11;
        u_xlat29 = ((x_2006 * vec2<f32>(x_2008.x, x_2008.y)) + vec2<f32>(x_2011.w, x_2011.y));
        let x_2015 : f32 = u_xlat11.y;
        u_xlat8.w = x_2015;
        let x_2018 : vec2<f32> = u_xlat46;
        let x_2020 : vec4<f32> = x_842.x_MainLightShadowmapSize;
        let x_2023 : vec4<f32> = u_xlat8;
        u_xlat17 = ((x_2018 * vec2<f32>(x_2020.x, x_2020.y)) + vec2<f32>(x_2023.x, x_2023.w));
        let x_2026 : vec4<f32> = u_xlat11;
        let x_2027 : vec3<f32> = vec3<f32>(x_2026.x, x_2026.z, x_2026.w);
        let x_2028 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_2027.x, x_2028.y, x_2027.y, x_2027.z);
        let x_2030 : vec2<f32> = u_xlat46;
        let x_2033 : vec4<f32> = x_842.x_MainLightShadowmapSize;
        let x_2036 : vec4<f32> = u_xlat10;
        u_xlat11 = ((vec4<f32>(x_2030.x, x_2030.y, x_2030.x, x_2030.y) * vec4<f32>(x_2033.x, x_2033.y, x_2033.x, x_2033.y)) + vec4<f32>(x_2036.x, x_2036.y, x_2036.z, x_2036.y));
        let x_2040 : vec2<f32> = u_xlat46;
        let x_2042 : vec4<f32> = x_842.x_MainLightShadowmapSize;
        let x_2045 : vec4<f32> = u_xlat10;
        u_xlat52 = ((x_2040 * vec2<f32>(x_2042.x, x_2042.y)) + vec2<f32>(x_2045.w, x_2045.y));
        let x_2049 : f32 = u_xlat8.x;
        u_xlat10.x = x_2049;
        let x_2051 : vec2<f32> = u_xlat46;
        let x_2053 : vec4<f32> = x_842.x_MainLightShadowmapSize;
        let x_2056 : vec4<f32> = u_xlat10;
        u_xlat46 = ((x_2051 * vec2<f32>(x_2053.x, x_2053.y)) + vec2<f32>(x_2056.x, x_2056.y));
        let x_2060 : vec4<f32> = u_xlat7;
        let x_2062 : vec4<f32> = u_xlat9;
        u_xlat18 = (vec4<f32>(x_2060.x, x_2060.x, x_2060.x, x_2060.x) * x_2062);
        let x_2065 : vec4<f32> = u_xlat7;
        let x_2067 : vec4<f32> = u_xlat9;
        u_xlat19 = (vec4<f32>(x_2065.y, x_2065.y, x_2065.y, x_2065.y) * x_2067);
        let x_2070 : vec4<f32> = u_xlat7;
        let x_2072 : vec4<f32> = u_xlat9;
        u_xlat20 = (vec4<f32>(x_2070.z, x_2070.z, x_2070.z, x_2070.z) * x_2072);
        let x_2074 : vec4<f32> = u_xlat7;
        let x_2076 : vec4<f32> = u_xlat9;
        u_xlat7 = (vec4<f32>(x_2074.w, x_2074.w, x_2074.w, x_2074.w) * x_2076);
        let x_2079 : vec4<f32> = u_xlat12;
        let x_2080 : vec2<f32> = vec2<f32>(x_2079.x, x_2079.y);
        let x_2082 : f32 = u_xlat2.z;
        txVec13 = vec3<f32>(x_2080.x, x_2080.y, x_2082);
        let x_2089 : vec3<f32> = txVec13;
        let x_2091 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2089.xy, x_2089.z);
        u_xlat68 = x_2091;
        let x_2093 : vec4<f32> = u_xlat12;
        let x_2094 : vec2<f32> = vec2<f32>(x_2093.z, x_2093.w);
        let x_2096 : f32 = u_xlat2.z;
        txVec14 = vec3<f32>(x_2094.x, x_2094.y, x_2096);
        let x_2104 : vec3<f32> = txVec14;
        let x_2106 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2104.xy, x_2104.z);
        u_xlat69 = x_2106;
        let x_2107 : f32 = u_xlat69;
        let x_2109 : f32 = u_xlat18.y;
        u_xlat69 = (x_2107 * x_2109);
        let x_2112 : f32 = u_xlat18.x;
        let x_2113 : f32 = u_xlat68;
        let x_2115 : f32 = u_xlat69;
        u_xlat68 = ((x_2112 * x_2113) + x_2115);
        let x_2118 : vec4<f32> = u_xlat13;
        let x_2119 : vec2<f32> = vec2<f32>(x_2118.x, x_2118.y);
        let x_2121 : f32 = u_xlat2.z;
        txVec15 = vec3<f32>(x_2119.x, x_2119.y, x_2121);
        let x_2128 : vec3<f32> = txVec15;
        let x_2130 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2128.xy, x_2128.z);
        u_xlat69 = x_2130;
        let x_2132 : f32 = u_xlat18.z;
        let x_2133 : f32 = u_xlat69;
        let x_2135 : f32 = u_xlat68;
        u_xlat68 = ((x_2132 * x_2133) + x_2135);
        let x_2138 : vec4<f32> = u_xlat15;
        let x_2139 : vec2<f32> = vec2<f32>(x_2138.x, x_2138.y);
        let x_2141 : f32 = u_xlat2.z;
        txVec16 = vec3<f32>(x_2139.x, x_2139.y, x_2141);
        let x_2148 : vec3<f32> = txVec16;
        let x_2150 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2148.xy, x_2148.z);
        u_xlat69 = x_2150;
        let x_2152 : f32 = u_xlat18.w;
        let x_2153 : f32 = u_xlat69;
        let x_2155 : f32 = u_xlat68;
        u_xlat68 = ((x_2152 * x_2153) + x_2155);
        let x_2158 : vec4<f32> = u_xlat14;
        let x_2159 : vec2<f32> = vec2<f32>(x_2158.x, x_2158.y);
        let x_2161 : f32 = u_xlat2.z;
        txVec17 = vec3<f32>(x_2159.x, x_2159.y, x_2161);
        let x_2168 : vec3<f32> = txVec17;
        let x_2170 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2168.xy, x_2168.z);
        u_xlat69 = x_2170;
        let x_2172 : f32 = u_xlat19.x;
        let x_2173 : f32 = u_xlat69;
        let x_2175 : f32 = u_xlat68;
        u_xlat68 = ((x_2172 * x_2173) + x_2175);
        let x_2178 : vec4<f32> = u_xlat14;
        let x_2179 : vec2<f32> = vec2<f32>(x_2178.z, x_2178.w);
        let x_2181 : f32 = u_xlat2.z;
        txVec18 = vec3<f32>(x_2179.x, x_2179.y, x_2181);
        let x_2188 : vec3<f32> = txVec18;
        let x_2190 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2188.xy, x_2188.z);
        u_xlat69 = x_2190;
        let x_2192 : f32 = u_xlat19.y;
        let x_2193 : f32 = u_xlat69;
        let x_2195 : f32 = u_xlat68;
        u_xlat68 = ((x_2192 * x_2193) + x_2195);
        let x_2198 : vec2<f32> = u_xlat55;
        let x_2200 : f32 = u_xlat2.z;
        txVec19 = vec3<f32>(x_2198.x, x_2198.y, x_2200);
        let x_2207 : vec3<f32> = txVec19;
        let x_2209 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2207.xy, x_2207.z);
        u_xlat69 = x_2209;
        let x_2211 : f32 = u_xlat19.z;
        let x_2212 : f32 = u_xlat69;
        let x_2214 : f32 = u_xlat68;
        u_xlat68 = ((x_2211 * x_2212) + x_2214);
        let x_2217 : vec4<f32> = u_xlat15;
        let x_2218 : vec2<f32> = vec2<f32>(x_2217.z, x_2217.w);
        let x_2220 : f32 = u_xlat2.z;
        txVec20 = vec3<f32>(x_2218.x, x_2218.y, x_2220);
        let x_2227 : vec3<f32> = txVec20;
        let x_2229 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2227.xy, x_2227.z);
        u_xlat69 = x_2229;
        let x_2231 : f32 = u_xlat19.w;
        let x_2232 : f32 = u_xlat69;
        let x_2234 : f32 = u_xlat68;
        u_xlat68 = ((x_2231 * x_2232) + x_2234);
        let x_2237 : vec4<f32> = u_xlat16;
        let x_2238 : vec2<f32> = vec2<f32>(x_2237.x, x_2237.y);
        let x_2240 : f32 = u_xlat2.z;
        txVec21 = vec3<f32>(x_2238.x, x_2238.y, x_2240);
        let x_2247 : vec3<f32> = txVec21;
        let x_2249 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2247.xy, x_2247.z);
        u_xlat69 = x_2249;
        let x_2251 : f32 = u_xlat20.x;
        let x_2252 : f32 = u_xlat69;
        let x_2254 : f32 = u_xlat68;
        u_xlat68 = ((x_2251 * x_2252) + x_2254);
        let x_2257 : vec4<f32> = u_xlat16;
        let x_2258 : vec2<f32> = vec2<f32>(x_2257.z, x_2257.w);
        let x_2260 : f32 = u_xlat2.z;
        txVec22 = vec3<f32>(x_2258.x, x_2258.y, x_2260);
        let x_2267 : vec3<f32> = txVec22;
        let x_2269 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2267.xy, x_2267.z);
        u_xlat69 = x_2269;
        let x_2271 : f32 = u_xlat20.y;
        let x_2272 : f32 = u_xlat69;
        let x_2274 : f32 = u_xlat68;
        u_xlat68 = ((x_2271 * x_2272) + x_2274);
        let x_2277 : vec2<f32> = u_xlat29;
        let x_2279 : f32 = u_xlat2.z;
        txVec23 = vec3<f32>(x_2277.x, x_2277.y, x_2279);
        let x_2286 : vec3<f32> = txVec23;
        let x_2288 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2286.xy, x_2286.z);
        u_xlat69 = x_2288;
        let x_2290 : f32 = u_xlat20.z;
        let x_2291 : f32 = u_xlat69;
        let x_2293 : f32 = u_xlat68;
        u_xlat68 = ((x_2290 * x_2291) + x_2293);
        let x_2296 : vec2<f32> = u_xlat17;
        let x_2298 : f32 = u_xlat2.z;
        txVec24 = vec3<f32>(x_2296.x, x_2296.y, x_2298);
        let x_2305 : vec3<f32> = txVec24;
        let x_2307 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2305.xy, x_2305.z);
        u_xlat69 = x_2307;
        let x_2309 : f32 = u_xlat20.w;
        let x_2310 : f32 = u_xlat69;
        let x_2312 : f32 = u_xlat68;
        u_xlat68 = ((x_2309 * x_2310) + x_2312);
        let x_2315 : vec4<f32> = u_xlat11;
        let x_2316 : vec2<f32> = vec2<f32>(x_2315.x, x_2315.y);
        let x_2318 : f32 = u_xlat2.z;
        txVec25 = vec3<f32>(x_2316.x, x_2316.y, x_2318);
        let x_2325 : vec3<f32> = txVec25;
        let x_2327 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2325.xy, x_2325.z);
        u_xlat69 = x_2327;
        let x_2329 : f32 = u_xlat7.x;
        let x_2330 : f32 = u_xlat69;
        let x_2332 : f32 = u_xlat68;
        u_xlat68 = ((x_2329 * x_2330) + x_2332);
        let x_2335 : vec4<f32> = u_xlat11;
        let x_2336 : vec2<f32> = vec2<f32>(x_2335.z, x_2335.w);
        let x_2338 : f32 = u_xlat2.z;
        txVec26 = vec3<f32>(x_2336.x, x_2336.y, x_2338);
        let x_2345 : vec3<f32> = txVec26;
        let x_2347 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2345.xy, x_2345.z);
        u_xlat69 = x_2347;
        let x_2349 : f32 = u_xlat7.y;
        let x_2350 : f32 = u_xlat69;
        let x_2352 : f32 = u_xlat68;
        u_xlat68 = ((x_2349 * x_2350) + x_2352);
        let x_2355 : vec2<f32> = u_xlat52;
        let x_2357 : f32 = u_xlat2.z;
        txVec27 = vec3<f32>(x_2355.x, x_2355.y, x_2357);
        let x_2364 : vec3<f32> = txVec27;
        let x_2366 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2364.xy, x_2364.z);
        u_xlat69 = x_2366;
        let x_2368 : f32 = u_xlat7.z;
        let x_2369 : f32 = u_xlat69;
        let x_2371 : f32 = u_xlat68;
        u_xlat68 = ((x_2368 * x_2369) + x_2371);
        let x_2374 : vec2<f32> = u_xlat46;
        let x_2376 : f32 = u_xlat2.z;
        txVec28 = vec3<f32>(x_2374.x, x_2374.y, x_2376);
        let x_2383 : vec3<f32> = txVec28;
        let x_2385 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2383.xy, x_2383.z);
        u_xlat46.x = x_2385;
        let x_2388 : f32 = u_xlat7.w;
        let x_2390 : f32 = u_xlat46.x;
        let x_2392 : f32 = u_xlat68;
        u_xlat4.x = ((x_2388 * x_2390) + x_2392);
      }
    }
  } else {
    let x_2397 : vec4<f32> = u_xlat2;
    let x_2398 : vec2<f32> = vec2<f32>(x_2397.x, x_2397.y);
    let x_2400 : f32 = u_xlat2.z;
    txVec29 = vec3<f32>(x_2398.x, x_2398.y, x_2400);
    let x_2407 : vec3<f32> = txVec29;
    let x_2409 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2407.xy, x_2407.z);
    u_xlat4.x = x_2409;
  }
  let x_2412 : f32 = x_842.x_MainLightShadowParams.x;
  u_xlat2.x = (-(x_2412) + 1.0f);
  let x_2417 : f32 = u_xlat4.x;
  let x_2419 : f32 = x_842.x_MainLightShadowParams.x;
  let x_2422 : f32 = u_xlat2.x;
  u_xlat2.x = ((x_2417 * x_2419) + x_2422);
  let x_2427 : f32 = u_xlat2.z;
  u_xlatb23 = (0.0f >= x_2427);
  let x_2431 : f32 = u_xlat2.z;
  u_xlatb44 = (x_2431 >= 1.0f);
  let x_2433 : bool = u_xlatb44;
  let x_2434 : bool = u_xlatb23;
  u_xlatb23 = (x_2433 | x_2434);
  let x_2436 : bool = u_xlatb23;
  if (x_2436) {
    x_2437 = 1.0f;
  } else {
    let x_2442 : f32 = u_xlat2.x;
    x_2437 = x_2442;
  }
  let x_2443 : f32 = x_2437;
  u_xlat2.x = x_2443;
  let x_2445 : vec3<f32> = vs_TEXCOORD7;
  let x_2448 : vec3<f32> = x_127.x_WorldSpaceCameraPos;
  let x_2450 : vec3<f32> = (x_2445 + -(x_2448));
  let x_2451 : vec4<f32> = u_xlat4;
  u_xlat4 = vec4<f32>(x_2450.x, x_2451.y, x_2450.y, x_2450.z);
  let x_2453 : vec4<f32> = u_xlat4;
  let x_2455 : vec4<f32> = u_xlat4;
  u_xlat23.x = dot(vec3<f32>(x_2453.x, x_2453.z, x_2453.w), vec3<f32>(x_2455.x, x_2455.z, x_2455.w));
  let x_2460 : f32 = u_xlat23.x;
  let x_2462 : f32 = x_842.x_MainLightShadowParams.z;
  let x_2465 : f32 = x_842.x_MainLightShadowParams.w;
  u_xlat23.x = ((x_2460 * x_2462) + x_2465);
  let x_2469 : f32 = u_xlat23.x;
  u_xlat23.x = clamp(x_2469, 0.0f, 1.0f);
  let x_2474 : f32 = u_xlat2.x;
  u_xlat44 = (-(x_2474) + 1.0f);
  let x_2478 : f32 = u_xlat23.x;
  let x_2479 : f32 = u_xlat44;
  let x_2482 : f32 = u_xlat2.x;
  u_xlat2.x = ((x_2478 * x_2479) + x_2482);
  let x_2485 : f32 = u_xlat25;
  let x_2488 : vec4<f32> = x_127.x_MainLightColor;
  let x_2490 : vec3<f32> = (vec3<f32>(x_2485, x_2485, x_2485) * vec3<f32>(x_2488.x, x_2488.y, x_2488.z));
  let x_2491 : vec4<f32> = u_xlat4;
  u_xlat4 = vec4<f32>(x_2490.x, x_2491.y, x_2490.y, x_2490.z);
  let x_2494 : f32 = vs_TEXCOORD3.w;
  u_xlat7.x = x_2494;
  let x_2497 : f32 = vs_TEXCOORD4.w;
  u_xlat7.y = x_2497;
  let x_2500 : f32 = vs_TEXCOORD5.w;
  u_xlat7.z = x_2500;
  let x_2502 : vec4<f32> = u_xlat7;
  let x_2505 : vec4<f32> = u_xlat1;
  u_xlat23.x = dot(-(vec3<f32>(x_2502.x, x_2502.y, x_2502.z)), vec3<f32>(x_2505.x, x_2505.y, x_2505.z));
  let x_2510 : f32 = u_xlat23.x;
  let x_2512 : f32 = u_xlat23.x;
  u_xlat23.x = (x_2510 + x_2512);
  let x_2515 : vec4<f32> = u_xlat1;
  let x_2517 : vec3<f32> = u_xlat23;
  let x_2521 : vec4<f32> = u_xlat7;
  let x_2524 : vec3<f32> = ((vec3<f32>(x_2515.x, x_2515.y, x_2515.z) * -(vec3<f32>(x_2517.x, x_2517.x, x_2517.x))) + -(vec3<f32>(x_2521.x, x_2521.y, x_2521.z)));
  let x_2525 : vec4<f32> = u_xlat8;
  u_xlat8 = vec4<f32>(x_2524.x, x_2524.y, x_2524.z, x_2525.w);
  let x_2527 : vec4<f32> = u_xlat1;
  let x_2529 : vec4<f32> = u_xlat7;
  u_xlat23.x = dot(vec3<f32>(x_2527.x, x_2527.y, x_2527.z), vec3<f32>(x_2529.x, x_2529.y, x_2529.z));
  let x_2534 : f32 = u_xlat23.x;
  u_xlat23.x = clamp(x_2534, 0.0f, 1.0f);
  let x_2538 : f32 = u_xlat23.x;
  u_xlat23.x = (-(x_2538) + 1.0f);
  let x_2543 : f32 = u_xlat23.x;
  let x_2545 : f32 = u_xlat23.x;
  u_xlat23.x = (x_2543 * x_2545);
  let x_2549 : f32 = u_xlat23.x;
  let x_2551 : f32 = u_xlat23.x;
  u_xlat23.x = (x_2549 * x_2551);
  let x_2555 : f32 = u_xlat0.x;
  u_xlat44 = ((-(x_2555) * 0.699999988f) + 1.700000048f);
  let x_2562 : f32 = u_xlat0.x;
  let x_2563 : f32 = u_xlat44;
  u_xlat0.x = (x_2562 * x_2563);
  let x_2567 : f32 = u_xlat0.x;
  u_xlat0.x = (x_2567 * 6.0f);
  let x_2579 : vec4<f32> = u_xlat8;
  let x_2582 : f32 = u_xlat0.x;
  let x_2583 : vec4<f32> = textureSampleLevel(unity_SpecCube0, samplerunity_SpecCube0, vec3<f32>(x_2579.x, x_2579.y, x_2579.z), x_2582);
  u_xlat8 = x_2583;
  let x_2585 : f32 = u_xlat8.w;
  u_xlat0.x = (x_2585 + -1.0f);
  let x_2589 : f32 = x_1022.unity_SpecCube0_HDR.w;
  let x_2591 : f32 = u_xlat0.x;
  u_xlat0.x = ((x_2589 * x_2591) + 1.0f);
  let x_2596 : f32 = u_xlat0.x;
  u_xlat0.x = max(x_2596, 0.0f);
  let x_2600 : f32 = u_xlat0.x;
  u_xlat0.x = log2(x_2600);
  let x_2604 : f32 = u_xlat0.x;
  let x_2606 : f32 = x_1022.unity_SpecCube0_HDR.y;
  u_xlat0.x = (x_2604 * x_2606);
  let x_2610 : f32 = u_xlat0.x;
  u_xlat0.x = exp2(x_2610);
  let x_2614 : f32 = u_xlat0.x;
  let x_2616 : f32 = x_1022.unity_SpecCube0_HDR.x;
  u_xlat0.x = (x_2614 * x_2616);
  let x_2619 : vec4<f32> = u_xlat8;
  let x_2621 : vec3<f32> = u_xlat0;
  let x_2623 : vec3<f32> = (vec3<f32>(x_2619.x, x_2619.y, x_2619.z) * vec3<f32>(x_2621.x, x_2621.x, x_2621.x));
  let x_2624 : vec4<f32> = u_xlat8;
  u_xlat8 = vec4<f32>(x_2623.x, x_2623.y, x_2623.z, x_2624.w);
  let x_2626 : f32 = u_xlat64;
  let x_2628 : f32 = u_xlat64;
  let x_2632 : vec2<f32> = ((vec2<f32>(x_2626, x_2626) * vec2<f32>(x_2628, x_2628)) + vec2<f32>(-1.0f, 1.0f));
  let x_2633 : vec4<f32> = u_xlat9;
  u_xlat9 = vec4<f32>(x_2632.x, x_2632.y, x_2633.z, x_2633.w);
  let x_2636 : f32 = u_xlat9.y;
  u_xlat0.x = (1.0f / x_2636);
  let x_2640 : vec4<f32> = u_xlat5;
  let x_2643 : f32 = u_xlat42;
  u_xlat30 = (-(vec3<f32>(x_2640.x, x_2640.y, x_2640.z)) + vec3<f32>(x_2643, x_2643, x_2643));
  let x_2646 : vec3<f32> = u_xlat23;
  let x_2648 : vec3<f32> = u_xlat30;
  let x_2650 : vec4<f32> = u_xlat5;
  u_xlat30 = ((vec3<f32>(x_2646.x, x_2646.x, x_2646.x) * x_2648) + vec3<f32>(x_2650.x, x_2650.y, x_2650.z));
  let x_2653 : vec3<f32> = u_xlat0;
  let x_2655 : vec3<f32> = u_xlat30;
  u_xlat30 = (vec3<f32>(x_2653.x, x_2653.x, x_2653.x) * x_2655);
  let x_2657 : vec4<f32> = u_xlat8;
  let x_2659 : vec3<f32> = u_xlat30;
  let x_2660 : vec3<f32> = (vec3<f32>(x_2657.x, x_2657.y, x_2657.z) * x_2659);
  let x_2661 : vec4<f32> = u_xlat8;
  u_xlat8 = vec4<f32>(x_2660.x, x_2660.y, x_2660.z, x_2661.w);
  let x_2663 : vec4<f32> = u_xlat3;
  let x_2665 : vec4<f32> = u_xlat6;
  let x_2668 : vec4<f32> = u_xlat8;
  let x_2670 : vec3<f32> = ((vec3<f32>(x_2663.x, x_2663.y, x_2663.z) * vec3<f32>(x_2665.x, x_2665.y, x_2665.z)) + vec3<f32>(x_2668.x, x_2668.y, x_2668.z));
  let x_2671 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_2670.x, x_2670.y, x_2670.z, x_2671.w);
  let x_2674 : f32 = u_xlat2.x;
  let x_2676 : f32 = x_1022.unity_LightData.z;
  u_xlat0.x = (x_2674 * x_2676);
  let x_2679 : vec4<f32> = u_xlat1;
  let x_2682 : vec4<f32> = x_127.x_MainLightPosition;
  u_xlat42 = dot(vec3<f32>(x_2679.x, x_2679.y, x_2679.z), vec3<f32>(x_2682.x, x_2682.y, x_2682.z));
  let x_2685 : f32 = u_xlat42;
  u_xlat42 = clamp(x_2685, 0.0f, 1.0f);
  let x_2687 : f32 = u_xlat42;
  let x_2689 : f32 = u_xlat0.x;
  u_xlat0.x = (x_2687 * x_2689);
  let x_2692 : vec3<f32> = u_xlat0;
  let x_2694 : vec4<f32> = u_xlat4;
  let x_2696 : vec3<f32> = (vec3<f32>(x_2692.x, x_2692.x, x_2692.x) * vec3<f32>(x_2694.x, x_2694.z, x_2694.w));
  let x_2697 : vec4<f32> = u_xlat2;
  u_xlat2 = vec4<f32>(x_2696.x, x_2696.y, x_2696.z, x_2697.w);
  let x_2699 : vec4<f32> = u_xlat7;
  let x_2702 : vec4<f32> = x_127.x_MainLightPosition;
  let x_2704 : vec3<f32> = (vec3<f32>(x_2699.x, x_2699.y, x_2699.z) + vec3<f32>(x_2702.x, x_2702.y, x_2702.z));
  let x_2705 : vec4<f32> = u_xlat4;
  u_xlat4 = vec4<f32>(x_2704.x, x_2705.y, x_2704.y, x_2704.z);
  let x_2707 : vec4<f32> = u_xlat4;
  let x_2709 : vec4<f32> = u_xlat4;
  u_xlat0.x = dot(vec3<f32>(x_2707.x, x_2707.z, x_2707.w), vec3<f32>(x_2709.x, x_2709.z, x_2709.w));
  let x_2714 : f32 = u_xlat0.x;
  u_xlat0.x = max(x_2714, 1.17549435e-37f);
  let x_2719 : f32 = u_xlat0.x;
  u_xlat0.x = inverseSqrt(x_2719);
  let x_2722 : vec3<f32> = u_xlat0;
  let x_2724 : vec4<f32> = u_xlat4;
  let x_2726 : vec3<f32> = (vec3<f32>(x_2722.x, x_2722.x, x_2722.x) * vec3<f32>(x_2724.x, x_2724.z, x_2724.w));
  let x_2727 : vec4<f32> = u_xlat4;
  u_xlat4 = vec4<f32>(x_2726.x, x_2727.y, x_2726.y, x_2726.z);
  let x_2729 : vec4<f32> = u_xlat1;
  let x_2731 : vec4<f32> = u_xlat4;
  u_xlat0.x = dot(vec3<f32>(x_2729.x, x_2729.y, x_2729.z), vec3<f32>(x_2731.x, x_2731.z, x_2731.w));
  let x_2736 : f32 = u_xlat0.x;
  u_xlat0.x = clamp(x_2736, 0.0f, 1.0f);
  let x_2740 : vec4<f32> = x_127.x_MainLightPosition;
  let x_2742 : vec4<f32> = u_xlat4;
  u_xlat0.z = dot(vec3<f32>(x_2740.x, x_2740.y, x_2740.z), vec3<f32>(x_2742.x, x_2742.z, x_2742.w));
  let x_2747 : f32 = u_xlat0.z;
  u_xlat0.z = clamp(x_2747, 0.0f, 1.0f);
  let x_2750 : vec3<f32> = u_xlat0;
  let x_2752 : vec3<f32> = u_xlat0;
  let x_2754 : vec2<f32> = (vec2<f32>(x_2750.x, x_2750.z) * vec2<f32>(x_2752.x, x_2752.z));
  let x_2755 : vec3<f32> = u_xlat0;
  u_xlat0 = vec3<f32>(x_2754.x, x_2755.y, x_2754.y);
  let x_2758 : f32 = u_xlat0.x;
  let x_2760 : f32 = u_xlat9.x;
  u_xlat0.x = ((x_2758 * x_2760) + 1.000010014f);
  let x_2766 : f32 = u_xlat0.x;
  let x_2768 : f32 = u_xlat0.x;
  u_xlat0.x = (x_2766 * x_2768);
  let x_2772 : f32 = u_xlat0.z;
  u_xlat42 = max(x_2772, 0.100000001f);
  let x_2775 : f32 = u_xlat42;
  let x_2777 : f32 = u_xlat0.x;
  u_xlat0.x = (x_2775 * x_2777);
  let x_2780 : f32 = u_xlat65;
  let x_2782 : f32 = u_xlat0.x;
  u_xlat0.x = (x_2780 * x_2782);
  let x_2785 : f32 = u_xlat66;
  let x_2787 : f32 = u_xlat0.x;
  u_xlat0.x = (x_2785 / x_2787);
  let x_2790 : vec4<f32> = u_xlat5;
  let x_2792 : vec3<f32> = u_xlat0;
  let x_2795 : vec4<f32> = u_xlat6;
  let x_2797 : vec3<f32> = ((vec3<f32>(x_2790.x, x_2790.y, x_2790.z) * vec3<f32>(x_2792.x, x_2792.x, x_2792.x)) + vec3<f32>(x_2795.x, x_2795.y, x_2795.z));
  let x_2798 : vec4<f32> = u_xlat4;
  u_xlat4 = vec4<f32>(x_2797.x, x_2798.y, x_2797.y, x_2797.z);
  let x_2800 : vec4<f32> = u_xlat2;
  let x_2802 : vec4<f32> = u_xlat4;
  let x_2804 : vec3<f32> = (vec3<f32>(x_2800.x, x_2800.y, x_2800.z) * vec3<f32>(x_2802.x, x_2802.z, x_2802.w));
  let x_2805 : vec4<f32> = u_xlat2;
  u_xlat2 = vec4<f32>(x_2804.x, x_2804.y, x_2804.z, x_2805.w);
  let x_2808 : f32 = x_127.x_AdditionalLightsCount.x;
  let x_2810 : f32 = x_1022.unity_LightData.y;
  u_xlat0.x = min(x_2808, x_2810);
  let x_2815 : f32 = u_xlat0.x;
  u_xlatu0 = bitcast<u32>(i32(x_2815));
  u_xlat4.x = 0.0f;
  u_xlat4.z = 0.0f;
  u_xlat4.w = 0.0f;
  u_xlatu_loop_1 = 0u;
  loop {
    let x_2827 : u32 = u_xlatu_loop_1;
    let x_2828 : u32 = u_xlatu0;
    if ((x_2827 < x_2828)) {
    } else {
      break;
    }
    let x_2831 : u32 = u_xlatu_loop_1;
    u_xlatu64 = (x_2831 >> 2u);
    let x_2834 : u32 = u_xlatu_loop_1;
    u_xlati68 = bitcast<i32>((x_2834 & 3u));
    let x_2837 : u32 = u_xlatu64;
    let x_2840 : vec4<f32> = x_1022.unity_LightIndices[bitcast<i32>(x_2837)];
    let x_2850 : i32 = u_xlati68;
    indexable = array<vec4<u32>, 4u>(vec4<u32>(1065353216u, 0u, 0u, 0u), vec4<u32>(0u, 1065353216u, 0u, 0u), vec4<u32>(0u, 0u, 1065353216u, 0u), vec4<u32>(0u, 0u, 0u, 1065353216u));
    let x_2855 : vec4<u32> = indexable[x_2850];
    u_xlat64 = dot(x_2840, bitcast<vec4<f32>>(x_2855));
    let x_2859 : f32 = u_xlat64;
    u_xlati64 = i32(x_2859);
    let x_2861 : vec3<f32> = vs_TEXCOORD7;
    let x_2873 : i32 = u_xlati64;
    let x_2875 : vec4<f32> = x_2872.x_AdditionalLightsPosition[x_2873];
    let x_2878 : i32 = u_xlati64;
    let x_2880 : vec4<f32> = x_2872.x_AdditionalLightsPosition[x_2878];
    let x_2882 : vec3<f32> = ((-(x_2861) * vec3<f32>(x_2875.w, x_2875.w, x_2875.w)) + vec3<f32>(x_2880.x, x_2880.y, x_2880.z));
    let x_2883 : vec4<f32> = u_xlat8;
    u_xlat8 = vec4<f32>(x_2882.x, x_2882.y, x_2882.z, x_2883.w);
    let x_2885 : vec4<f32> = u_xlat8;
    let x_2887 : vec4<f32> = u_xlat8;
    u_xlat68 = dot(vec3<f32>(x_2885.x, x_2885.y, x_2885.z), vec3<f32>(x_2887.x, x_2887.y, x_2887.z));
    let x_2890 : f32 = u_xlat68;
    u_xlat68 = max(x_2890, 6.10351562e-05f);
    let x_2892 : f32 = u_xlat68;
    u_xlat69 = inverseSqrt(x_2892);
    let x_2894 : f32 = u_xlat69;
    let x_2896 : vec4<f32> = u_xlat8;
    u_xlat30 = (vec3<f32>(x_2894, x_2894, x_2894) * vec3<f32>(x_2896.x, x_2896.y, x_2896.z));
    let x_2900 : f32 = u_xlat68;
    u_xlat70 = (1.0f / x_2900);
    let x_2902 : f32 = u_xlat68;
    let x_2903 : i32 = u_xlati64;
    let x_2905 : f32 = x_2872.x_AdditionalLightsAttenuation[x_2903].x;
    u_xlat68 = (x_2902 * x_2905);
    let x_2907 : f32 = u_xlat68;
    let x_2909 : f32 = u_xlat68;
    u_xlat68 = ((-(x_2907) * x_2909) + 1.0f);
    let x_2912 : f32 = u_xlat68;
    u_xlat68 = max(x_2912, 0.0f);
    let x_2914 : f32 = u_xlat68;
    let x_2915 : f32 = u_xlat68;
    u_xlat68 = (x_2914 * x_2915);
    let x_2917 : f32 = u_xlat68;
    let x_2918 : f32 = u_xlat70;
    u_xlat68 = (x_2917 * x_2918);
    let x_2920 : i32 = u_xlati64;
    let x_2922 : vec4<f32> = x_2872.x_AdditionalLightsSpotDir[x_2920];
    let x_2924 : vec3<f32> = u_xlat30;
    u_xlat70 = dot(vec3<f32>(x_2922.x, x_2922.y, x_2922.z), x_2924);
    let x_2926 : f32 = u_xlat70;
    let x_2927 : i32 = u_xlati64;
    let x_2929 : f32 = x_2872.x_AdditionalLightsAttenuation[x_2927].z;
    let x_2931 : i32 = u_xlati64;
    let x_2933 : f32 = x_2872.x_AdditionalLightsAttenuation[x_2931].w;
    u_xlat70 = ((x_2926 * x_2929) + x_2933);
    let x_2935 : f32 = u_xlat70;
    u_xlat70 = clamp(x_2935, 0.0f, 1.0f);
    let x_2937 : f32 = u_xlat70;
    let x_2938 : f32 = u_xlat70;
    u_xlat70 = (x_2937 * x_2938);
    let x_2940 : f32 = u_xlat68;
    let x_2941 : f32 = u_xlat70;
    u_xlat68 = (x_2940 * x_2941);
    let x_2943 : f32 = u_xlat25;
    let x_2945 : i32 = u_xlati64;
    let x_2947 : vec4<f32> = x_2872.x_AdditionalLightsColor[x_2945];
    let x_2949 : vec3<f32> = (vec3<f32>(x_2943, x_2943, x_2943) * vec3<f32>(x_2947.x, x_2947.y, x_2947.z));
    let x_2950 : vec4<f32> = u_xlat10;
    u_xlat10 = vec4<f32>(x_2949.x, x_2949.y, x_2949.z, x_2950.w);
    let x_2952 : vec4<f32> = u_xlat1;
    let x_2954 : vec3<f32> = u_xlat30;
    u_xlat64 = dot(vec3<f32>(x_2952.x, x_2952.y, x_2952.z), x_2954);
    let x_2956 : f32 = u_xlat64;
    u_xlat64 = clamp(x_2956, 0.0f, 1.0f);
    let x_2958 : f32 = u_xlat64;
    let x_2959 : f32 = u_xlat68;
    u_xlat64 = (x_2958 * x_2959);
    let x_2961 : f32 = u_xlat64;
    let x_2963 : vec4<f32> = u_xlat10;
    let x_2965 : vec3<f32> = (vec3<f32>(x_2961, x_2961, x_2961) * vec3<f32>(x_2963.x, x_2963.y, x_2963.z));
    let x_2966 : vec4<f32> = u_xlat10;
    u_xlat10 = vec4<f32>(x_2965.x, x_2965.y, x_2965.z, x_2966.w);
    let x_2968 : vec4<f32> = u_xlat8;
    let x_2970 : f32 = u_xlat69;
    let x_2973 : vec4<f32> = u_xlat7;
    let x_2975 : vec3<f32> = ((vec3<f32>(x_2968.x, x_2968.y, x_2968.z) * vec3<f32>(x_2970, x_2970, x_2970)) + vec3<f32>(x_2973.x, x_2973.y, x_2973.z));
    let x_2976 : vec4<f32> = u_xlat8;
    u_xlat8 = vec4<f32>(x_2975.x, x_2975.y, x_2975.z, x_2976.w);
    let x_2978 : vec4<f32> = u_xlat8;
    let x_2980 : vec4<f32> = u_xlat8;
    u_xlat64 = dot(vec3<f32>(x_2978.x, x_2978.y, x_2978.z), vec3<f32>(x_2980.x, x_2980.y, x_2980.z));
    let x_2983 : f32 = u_xlat64;
    u_xlat64 = max(x_2983, 1.17549435e-37f);
    let x_2985 : f32 = u_xlat64;
    u_xlat64 = inverseSqrt(x_2985);
    let x_2987 : f32 = u_xlat64;
    let x_2989 : vec4<f32> = u_xlat8;
    let x_2991 : vec3<f32> = (vec3<f32>(x_2987, x_2987, x_2987) * vec3<f32>(x_2989.x, x_2989.y, x_2989.z));
    let x_2992 : vec4<f32> = u_xlat8;
    u_xlat8 = vec4<f32>(x_2991.x, x_2991.y, x_2991.z, x_2992.w);
    let x_2994 : vec4<f32> = u_xlat1;
    let x_2996 : vec4<f32> = u_xlat8;
    u_xlat64 = dot(vec3<f32>(x_2994.x, x_2994.y, x_2994.z), vec3<f32>(x_2996.x, x_2996.y, x_2996.z));
    let x_2999 : f32 = u_xlat64;
    u_xlat64 = clamp(x_2999, 0.0f, 1.0f);
    let x_3001 : vec3<f32> = u_xlat30;
    let x_3002 : vec4<f32> = u_xlat8;
    u_xlat68 = dot(x_3001, vec3<f32>(x_3002.x, x_3002.y, x_3002.z));
    let x_3005 : f32 = u_xlat68;
    u_xlat68 = clamp(x_3005, 0.0f, 1.0f);
    let x_3007 : f32 = u_xlat64;
    let x_3008 : f32 = u_xlat64;
    u_xlat64 = (x_3007 * x_3008);
    let x_3010 : f32 = u_xlat64;
    let x_3012 : f32 = u_xlat9.x;
    u_xlat64 = ((x_3010 * x_3012) + 1.000010014f);
    let x_3015 : f32 = u_xlat68;
    let x_3016 : f32 = u_xlat68;
    u_xlat68 = (x_3015 * x_3016);
    let x_3018 : f32 = u_xlat64;
    let x_3019 : f32 = u_xlat64;
    u_xlat64 = (x_3018 * x_3019);
    let x_3021 : f32 = u_xlat68;
    u_xlat68 = max(x_3021, 0.100000001f);
    let x_3023 : f32 = u_xlat64;
    let x_3024 : f32 = u_xlat68;
    u_xlat64 = (x_3023 * x_3024);
    let x_3026 : f32 = u_xlat65;
    let x_3027 : f32 = u_xlat64;
    u_xlat64 = (x_3026 * x_3027);
    let x_3029 : f32 = u_xlat66;
    let x_3030 : f32 = u_xlat64;
    u_xlat64 = (x_3029 / x_3030);
    let x_3032 : vec4<f32> = u_xlat5;
    let x_3034 : f32 = u_xlat64;
    let x_3037 : vec4<f32> = u_xlat6;
    let x_3039 : vec3<f32> = ((vec3<f32>(x_3032.x, x_3032.y, x_3032.z) * vec3<f32>(x_3034, x_3034, x_3034)) + vec3<f32>(x_3037.x, x_3037.y, x_3037.z));
    let x_3040 : vec4<f32> = u_xlat8;
    u_xlat8 = vec4<f32>(x_3039.x, x_3039.y, x_3039.z, x_3040.w);
    let x_3042 : vec4<f32> = u_xlat8;
    let x_3044 : vec4<f32> = u_xlat10;
    let x_3047 : vec4<f32> = u_xlat4;
    let x_3049 : vec3<f32> = ((vec3<f32>(x_3042.x, x_3042.y, x_3042.z) * vec3<f32>(x_3044.x, x_3044.y, x_3044.z)) + vec3<f32>(x_3047.x, x_3047.z, x_3047.w));
    let x_3050 : vec4<f32> = u_xlat4;
    u_xlat4 = vec4<f32>(x_3049.x, x_3050.y, x_3049.y, x_3049.z);

    continuing {
      let x_3052 : u32 = u_xlatu_loop_1;
      u_xlatu_loop_1 = (x_3052 + bitcast<u32>(1i));
    }
  }
  let x_3054 : vec4<f32> = u_xlat3;
  let x_3056 : f32 = u_xlat21;
  let x_3059 : vec4<f32> = u_xlat2;
  u_xlat0 = ((vec3<f32>(x_3054.x, x_3054.y, x_3054.z) * vec3<f32>(x_3056, x_3056, x_3056)) + vec3<f32>(x_3059.x, x_3059.y, x_3059.z));
  let x_3062 : vec4<f32> = u_xlat4;
  let x_3064 : vec3<f32> = u_xlat0;
  u_xlat0 = (vec3<f32>(x_3062.x, x_3062.z, x_3062.w) + x_3064);
  let x_3068 : f32 = u_xlat63;
  let x_3070 : vec3<f32> = u_xlat0;
  let x_3071 : vec3<f32> = (vec3<f32>(x_3068, x_3068, x_3068) * x_3070);
  let x_3072 : vec4<f32> = SV_Target0;
  SV_Target0 = vec4<f32>(x_3071.x, x_3071.y, x_3071.z, x_3072.w);
  SV_Target0.w = 1.0f;
  return;
}

struct main_out {
  @location(0)
  SV_Target0_1 : vec4<f32>,
}

@fragment
fn main(@builtin(position) gl_FragCoord_param : vec4<f32>, @location(0) vs_TEXCOORD0_param : vec4<f32>, @location(1) vs_TEXCOORD1_param : vec4<f32>, @location(2) vs_TEXCOORD2_param : vec4<f32>, @location(5) vs_TEXCOORD5_param : vec4<f32>, @location(4) vs_TEXCOORD4_param : vec4<f32>, @location(3) vs_TEXCOORD3_param : vec4<f32>, @location(6) vs_TEXCOORD7_param : vec3<f32>) -> main_out {
  gl_FragCoord = gl_FragCoord_param;
  vs_TEXCOORD0 = vs_TEXCOORD0_param;
  vs_TEXCOORD1 = vs_TEXCOORD1_param;
  vs_TEXCOORD2 = vs_TEXCOORD2_param;
  vs_TEXCOORD5 = vs_TEXCOORD5_param;
  vs_TEXCOORD4 = vs_TEXCOORD4_param;
  vs_TEXCOORD3 = vs_TEXCOORD3_param;
  vs_TEXCOORD7 = vs_TEXCOORD7_param;
  main_1();
  return main_out(SV_Target0);
}

