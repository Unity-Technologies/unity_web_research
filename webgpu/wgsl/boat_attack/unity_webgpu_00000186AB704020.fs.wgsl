type Arr = array<vec4<f32>, 2u>;

struct UnityPerDraw {
  unity_ObjectToWorld : mat4x4<f32>,
  unity_WorldToObject : mat4x4<f32>,
  unity_LODFade : vec4<f32>,
  unity_WorldTransformParams : vec4<f32>,
  unity_RenderingLayer : vec4<f32>,
  unity_LightData : vec4<f32>,
  unity_LightIndices : Arr,
  unity_ProbesOcclusion : vec4<f32>,
  unity_SpecCube0_HDR : vec4<f32>,
  unity_SpecCube1_HDR : vec4<f32>,
  unity_SpecCube0_BoxMax : vec4<f32>,
  unity_SpecCube0_BoxMin : vec4<f32>,
  unity_SpecCube0_ProbePosition : vec4<f32>,
  unity_SpecCube1_BoxMax : vec4<f32>,
  unity_SpecCube1_BoxMin : vec4<f32>,
  unity_SpecCube1_ProbePosition : vec4<f32>,
  unity_LightmapST : vec4<f32>,
  unity_DynamicLightmapST : vec4<f32>,
  unity_SHAr : vec4<f32>,
  unity_SHAg : vec4<f32>,
  unity_SHAb : vec4<f32>,
  unity_SHBr : vec4<f32>,
  unity_SHBg : vec4<f32>,
  unity_SHBb : vec4<f32>,
  unity_SHC : vec4<f32>,
  unity_RendererBounds_Min : vec4<f32>,
  unity_RendererBounds_Max : vec4<f32>,
  unity_MatrixPreviousM : mat4x4<f32>,
  unity_MatrixPreviousMI : mat4x4<f32>,
  unity_MotionVectorsParams : vec4<f32>,
  unity_SpriteColor : vec4<f32>,
  unity_SpriteProps : vec4<f32>,
}

struct PGlobals {
  x_ScaledScreenParams : vec4<f32>,
  x_GlobalMipBias : vec2<f32>,
  x_AlphaToMaskAvailable : f32,
  @size(4)
  padding : u32,
  x_MainLightPosition : vec4<f32>,
  x_MainLightColor : vec4<f32>,
  x_AmbientOcclusionParam : vec4<f32>,
  x_AdditionalLightsCount : vec4<f32>,
  x_WorldSpaceCameraPos : vec3<f32>,
  @size(4)
  padding_1 : u32,
  x_ProjectionParams : vec4<f32>,
  unity_OrthoParams : vec4<f32>,
  x_ScaleBiasRt : vec4<f32>,
  unity_FogParams : vec4<f32>,
  unity_FogColor : vec4<f32>,
  unity_MatrixV : mat4x4<f32>,
}

struct UnityPerMaterial {
  Texture2D_B222E8F_TexelSize : vec4<f32>,
  Color_C30C7CA3 : vec4<f32>,
  Texture2D_D9BFD5F1_TexelSize : vec4<f32>,
}

type Arr_1 = array<mat4x4<f32>, 5u>;

struct MainLightShadows {
  x_MainLightWorldToShadow : Arr_1,
  x_CascadeShadowSplitSpheres0 : vec4<f32>,
  x_CascadeShadowSplitSpheres1 : vec4<f32>,
  x_CascadeShadowSplitSpheres2 : vec4<f32>,
  x_CascadeShadowSplitSpheres3 : vec4<f32>,
  x_CascadeShadowSplitSphereRadii : vec4<f32>,
  x_MainLightShadowOffset0 : vec4<f32>,
  x_MainLightShadowOffset1 : vec4<f32>,
  x_MainLightShadowParams : vec4<f32>,
  x_MainLightShadowmapSize : vec4<f32>,
}

struct strided_arr {
  @size(16)
  el : f32,
}

type Arr_2 = array<strided_arr, 8u>;

struct LightCookies {
  x_MainLightWorldToLight : mat4x4<f32>,
  x_AdditionalLightsCookieEnableBits : Arr_2,
  x_MainLightCookieTextureFormat : f32,
  x_AdditionalLightsCookieAtlasTextureFormat : f32,
}

type Arr_3 = array<vec4<f32>, 256u>;

type Arr_4 = array<vec4<f32>, 256u>;

type Arr_5 = array<vec4<f32>, 256u>;

type Arr_6 = array<vec4<f32>, 256u>;

type Arr_7 = array<vec4<f32>, 256u>;

struct strided_arr_1 {
  @size(16)
  el : f32,
}

type Arr_8 = array<strided_arr_1, 256u>;

type Arr_9 = array<vec4<f32>, 256u>;

type Arr_10 = array<strided_arr_1, 256u>;

struct AdditionalLights {
  x_AdditionalLightsPosition : Arr_9,
  x_AdditionalLightsColor : Arr_9,
  x_AdditionalLightsAttenuation : Arr_9,
  x_AdditionalLightsSpotDir : Arr_9,
  x_AdditionalLightsOcclusionProbes : Arr_9,
  x_AdditionalLightsLayerMasks : Arr_10,
}

type Arr_11 = array<mat4x4<f32>, 256u>;

struct AdditionalLightsCookies {
  x_AdditionalLightsWorldToLights : Arr_11,
  x_AdditionalLightsCookieAtlasUVRects : Arr_9,
  x_AdditionalLightsLightTypes : Arr_10,
}

var<private> gl_FragCoord : vec4<f32>;

var<private> vs_INTERP1 : vec3<f32>;

var<private> vs_INTERP2 : vec4<f32>;

@group(1) @binding(2) var<uniform> x_60 : UnityPerDraw;

@group(0) @binding(5) var Texture2D_B222E8F : texture_2d<f32>;

@group(0) @binding(12) var samplerTexture2D_B222E8F : sampler;

var<private> vs_INTERP3 : vec4<f32>;

@group(1) @binding(0) var<uniform> x_137 : PGlobals;

@group(1) @binding(6) var<uniform> x_147 : UnityPerMaterial;

@group(0) @binding(6) var Texture2D_D9BFD5F1 : texture_2d<f32>;

@group(0) @binding(13) var samplerTexture2D_D9BFD5F1 : sampler;

var<private> vs_INTERP4 : vec4<f32>;

var<private> vs_INTERP0 : vec3<f32>;

@group(1) @binding(3) var<uniform> x_248 : MainLightShadows;

@group(0) @binding(2) var x_MainLightShadowmapTexture : texture_depth_2d;

@group(0) @binding(9) var sampler_MainLightShadowmapTexture : sampler_comparison;

@group(0) @binding(1) var x_ScreenSpaceOcclusionTexture : texture_2d<f32>;

@group(0) @binding(8) var sampler_ScreenSpaceOcclusionTexture : sampler;

var<private> vs_INTERP9 : vec4<f32>;

@group(1) @binding(4) var<uniform> x_3237 : LightCookies;

@group(0) @binding(3) var x_MainLightCookieTexture : texture_2d<f32>;

@group(0) @binding(10) var sampler_MainLightCookieTexture : sampler;

@group(0) @binding(0) var unity_SpecCube0 : texture_cube<f32>;

@group(0) @binding(7) var samplerunity_SpecCube0 : sampler;

@group(1) @binding(1) var<uniform> x_3735 : AdditionalLights;

@group(1) @binding(5) var<uniform> x_3840 : AdditionalLightsCookies;

@group(0) @binding(4) var x_AdditionalLightsCookieAtlasTexture : texture_2d<f32>;

@group(0) @binding(11) var sampler_AdditionalLightsCookieAtlasTexture : sampler;

var<private> SV_Target0 : vec4<f32>;

fn main_1() {
  var hlslcc_FragCoord : vec4<f32>;
  var u_xlat0 : vec3<f32>;
  var u_xlatb21 : vec2<bool>;
  var u_xlat21 : vec3<f32>;
  var u_xlat1 : vec3<f32>;
  var u_xlat2 : vec3<f32>;
  var u_xlat3 : vec4<f32>;
  var u_xlat4 : vec4<f32>;
  var u_xlat5 : vec3<f32>;
  var u_xlat6 : vec4<f32>;
  var u_xlat7 : vec4<f32>;
  var u_xlat27 : vec3<f32>;
  var u_xlatb0 : bool;
  var u_xlatb64 : bool;
  var txVec0 : vec3<f32>;
  var txVec1 : vec3<f32>;
  var txVec2 : vec3<f32>;
  var txVec3 : vec3<f32>;
  var u_xlat64 : f32;
  var u_xlatb65 : bool;
  var u_xlat45 : vec2<f32>;
  var u_xlat8 : vec4<f32>;
  var u_xlat50 : vec2<f32>;
  var u_xlat9 : vec4<f32>;
  var u_xlat10 : vec4<f32>;
  var u_xlat11 : vec4<f32>;
  var u_xlat12 : vec4<f32>;
  var u_xlat13 : vec4<f32>;
  var u_xlat14 : vec4<f32>;
  var u_xlat65 : f32;
  var txVec4 : vec3<f32>;
  var txVec5 : vec3<f32>;
  var u_xlat24 : f32;
  var txVec6 : vec3<f32>;
  var txVec7 : vec3<f32>;
  var txVec8 : vec3<f32>;
  var txVec9 : vec3<f32>;
  var txVec10 : vec3<f32>;
  var txVec11 : vec3<f32>;
  var txVec12 : vec3<f32>;
  var u_xlat28 : vec3<f32>;
  var u_xlat15 : vec4<f32>;
  var u_xlat16 : vec4<f32>;
  var u_xlat29 : vec3<f32>;
  var u_xlat56 : vec2<f32>;
  var u_xlat51 : vec2<f32>;
  var u_xlat17 : vec4<f32>;
  var u_xlat18 : vec4<f32>;
  var u_xlat19 : vec4<f32>;
  var txVec13 : vec3<f32>;
  var txVec14 : vec3<f32>;
  var u_xlat68 : f32;
  var txVec15 : vec3<f32>;
  var txVec16 : vec3<f32>;
  var txVec17 : vec3<f32>;
  var txVec18 : vec3<f32>;
  var txVec19 : vec3<f32>;
  var txVec20 : vec3<f32>;
  var txVec21 : vec3<f32>;
  var txVec22 : vec3<f32>;
  var txVec23 : vec3<f32>;
  var txVec24 : vec3<f32>;
  var txVec25 : vec3<f32>;
  var txVec26 : vec3<f32>;
  var txVec27 : vec3<f32>;
  var txVec28 : vec3<f32>;
  var txVec29 : vec3<f32>;
  var u_xlatb23 : bool;
  var u_xlatb44 : bool;
  var u_xlat22 : vec3<f32>;
  var x_1595 : f32;
  var u_xlat23 : f32;
  var u_xlat44 : f32;
  var u_xlat42 : f32;
  var x_1716 : vec3<f32>;
  var u_xlat66 : f32;
  var u_xlat67 : f32;
  var u_xlat48 : f32;
  var txVec30 : vec3<f32>;
  var txVec31 : vec3<f32>;
  var txVec32 : vec3<f32>;
  var txVec33 : vec3<f32>;
  var u_xlatb69 : bool;
  var u_xlat49 : vec2<f32>;
  var u_xlat69 : f32;
  var txVec34 : vec3<f32>;
  var txVec35 : vec3<f32>;
  var txVec36 : vec3<f32>;
  var txVec37 : vec3<f32>;
  var txVec38 : vec3<f32>;
  var txVec39 : vec3<f32>;
  var txVec40 : vec3<f32>;
  var txVec41 : vec3<f32>;
  var txVec42 : vec3<f32>;
  var u_xlat30 : vec3<f32>;
  var u_xlat57 : vec2<f32>;
  var u_xlat52 : vec2<f32>;
  var u_xlat20 : vec4<f32>;
  var txVec43 : vec3<f32>;
  var txVec44 : vec3<f32>;
  var txVec45 : vec3<f32>;
  var txVec46 : vec3<f32>;
  var txVec47 : vec3<f32>;
  var txVec48 : vec3<f32>;
  var txVec49 : vec3<f32>;
  var txVec50 : vec3<f32>;
  var txVec51 : vec3<f32>;
  var txVec52 : vec3<f32>;
  var txVec53 : vec3<f32>;
  var txVec54 : vec3<f32>;
  var txVec55 : vec3<f32>;
  var txVec56 : vec3<f32>;
  var txVec57 : vec3<f32>;
  var txVec58 : vec3<f32>;
  var txVec59 : vec3<f32>;
  var u_xlatb2 : vec4<bool>;
  var x_3187 : f32;
  var u_xlatb8 : vec2<bool>;
  var x_3320 : f32;
  var x_3332 : vec3<f32>;
  var u_xlatu0 : u32;
  var u_xlatu_loop_1 : u32;
  var u_xlatu68 : u32;
  var u_xlati69 : i32;
  var indexable : array<vec4<u32>, 4u>;
  var u_xlat70 : f32;
  var u_xlat71 : f32;
  var u_xlatu71 : u32;
  var u_xlati73 : i32;
  var u_xlati71 : i32;
  var u_xlati11 : i32;
  var u_xlat32 : vec3<f32>;
  var u_xlatb71 : bool;
  var u_xlatb11 : vec4<bool>;
  var x_4142 : f32;
  var x_4155 : f32;
  var x_4217 : f32;
  var x_4228 : vec3<f32>;
  var u_xlat63 : f32;
  var u_xlat_precise_vec4 : vec4<f32>;
  var u_xlat_precise_ivec4 : vec4<i32>;
  var u_xlat_precise_bvec4 : vec4<bool>;
  var u_xlat_precise_uvec4 : vec4<u32>;
  let x_13 : vec4<f32> = gl_FragCoord;
  let x_14 : vec3<f32> = vec3<f32>(x_13.x, x_13.y, x_13.z);
  let x_20 : f32 = gl_FragCoord.w;
  hlslcc_FragCoord = vec4<f32>(x_14.x, x_14.y, x_14.z, (1.0f / x_20));
  let x_30 : vec3<f32> = vs_INTERP1;
  let x_31 : vec3<f32> = vs_INTERP1;
  u_xlat0.x = dot(x_30, x_31);
  let x_37 : f32 = u_xlat0.x;
  u_xlat0.x = sqrt(x_37);
  let x_41 : f32 = u_xlat0.x;
  u_xlat0.x = (1.0f / x_41);
  let x_51 : f32 = vs_INTERP2.w;
  u_xlatb21.x = (0.0f < x_51);
  let x_65 : f32 = x_60.unity_WorldTransformParams.w;
  u_xlatb21.y = (x_65 >= 0.0f);
  let x_71 : bool = u_xlatb21.x;
  u_xlat21.x = select(-1.0f, 1.0f, x_71);
  let x_76 : bool = u_xlatb21.y;
  u_xlat21.y = select(-1.0f, 1.0f, x_76);
  let x_80 : f32 = u_xlat21.y;
  let x_82 : f32 = u_xlat21.x;
  u_xlat21.x = (x_80 * x_82);
  let x_86 : vec3<f32> = vs_INTERP1;
  let x_88 : vec4<f32> = vs_INTERP2;
  u_xlat1 = (vec3<f32>(x_86.z, x_86.x, x_86.y) * vec3<f32>(x_88.y, x_88.z, x_88.x));
  let x_91 : vec3<f32> = vs_INTERP1;
  let x_93 : vec4<f32> = vs_INTERP2;
  let x_96 : vec3<f32> = u_xlat1;
  u_xlat1 = ((vec3<f32>(x_91.y, x_91.z, x_91.x) * vec3<f32>(x_93.z, x_93.x, x_93.y)) + -(x_96));
  let x_99 : vec3<f32> = u_xlat21;
  let x_101 : vec3<f32> = u_xlat1;
  u_xlat21 = (vec3<f32>(x_99.x, x_99.x, x_99.x) * x_101);
  let x_103 : vec3<f32> = u_xlat0;
  let x_105 : vec3<f32> = vs_INTERP1;
  u_xlat1 = (vec3<f32>(x_103.x, x_103.x, x_103.x) * x_105);
  let x_108 : vec3<f32> = u_xlat0;
  let x_110 : vec4<f32> = vs_INTERP2;
  u_xlat2 = (vec3<f32>(x_108.x, x_108.x, x_108.x) * vec3<f32>(x_110.x, x_110.y, x_110.z));
  let x_114 : vec3<f32> = u_xlat21;
  let x_115 : vec3<f32> = u_xlat0;
  let x_117 : vec3<f32> = (x_114 * vec3<f32>(x_115.x, x_115.x, x_115.x));
  let x_118 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_117.x, x_117.y, x_117.z, x_118.w);
  let x_133 : vec4<f32> = vs_INTERP3;
  let x_140 : f32 = x_137.x_GlobalMipBias.x;
  let x_141 : vec4<f32> = textureSampleBias(Texture2D_B222E8F, samplerTexture2D_B222E8F, vec2<f32>(x_133.x, x_133.y), x_140);
  u_xlat4 = x_141;
  let x_143 : vec4<f32> = u_xlat4;
  let x_150 : vec4<f32> = x_147.Color_C30C7CA3;
  u_xlat5 = (vec3<f32>(x_143.x, x_143.y, x_143.z) * vec3<f32>(x_150.x, x_150.y, x_150.z));
  let x_159 : vec4<f32> = vs_INTERP3;
  let x_162 : f32 = x_137.x_GlobalMipBias.x;
  let x_163 : vec4<f32> = textureSampleBias(Texture2D_D9BFD5F1, samplerTexture2D_D9BFD5F1, vec2<f32>(x_159.x, x_159.y), x_162);
  u_xlat6 = vec4<f32>(x_163.w, x_163.x, x_163.y, x_163.z);
  let x_166 : vec4<f32> = u_xlat6;
  u_xlat7 = ((vec4<f32>(x_166.y, x_166.z, x_166.w, x_166.x) * vec4<f32>(2.0f, 2.0f, 2.0f, 2.0f)) + vec4<f32>(-1.0f, -1.0f, -1.0f, -1.0f));
  let x_173 : vec4<f32> = u_xlat7;
  let x_174 : vec4<f32> = u_xlat7;
  u_xlat0.x = dot(x_173, x_174);
  let x_178 : f32 = u_xlat0.x;
  u_xlat0.x = inverseSqrt(x_178);
  let x_182 : vec3<f32> = u_xlat0;
  let x_184 : vec4<f32> = u_xlat7;
  u_xlat27 = (vec3<f32>(x_182.x, x_182.x, x_182.x) * vec3<f32>(x_184.x, x_184.y, x_184.z));
  let x_189 : f32 = vs_INTERP4.y;
  u_xlat0.x = (x_189 * 200.0f);
  let x_194 : f32 = u_xlat0.x;
  u_xlat0.x = min(x_194, 1.0f);
  let x_197 : vec3<f32> = u_xlat0;
  let x_199 : vec4<f32> = u_xlat4;
  let x_201 : vec3<f32> = (vec3<f32>(x_197.x, x_197.x, x_197.x) * vec3<f32>(x_199.x, x_199.y, x_199.z));
  let x_202 : vec4<f32> = u_xlat4;
  u_xlat4 = vec4<f32>(x_201.x, x_201.y, x_201.z, x_202.w);
  let x_204 : vec4<f32> = u_xlat3;
  let x_206 : vec3<f32> = u_xlat27;
  let x_208 : vec3<f32> = (vec3<f32>(x_204.x, x_204.y, x_204.z) * vec3<f32>(x_206.y, x_206.y, x_206.y));
  let x_209 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_208.x, x_208.y, x_208.z, x_209.w);
  let x_211 : vec3<f32> = u_xlat27;
  let x_213 : vec3<f32> = u_xlat2;
  let x_215 : vec4<f32> = u_xlat3;
  u_xlat2 = ((vec3<f32>(x_211.x, x_211.x, x_211.x) * x_213) + vec3<f32>(x_215.x, x_215.y, x_215.z));
  let x_218 : vec3<f32> = u_xlat27;
  let x_220 : vec3<f32> = u_xlat1;
  let x_222 : vec3<f32> = u_xlat2;
  u_xlat1 = ((vec3<f32>(x_218.z, x_218.z, x_218.z) * x_220) + x_222);
  let x_224 : vec3<f32> = u_xlat1;
  let x_225 : vec3<f32> = u_xlat1;
  u_xlat0.x = dot(x_224, x_225);
  let x_229 : f32 = u_xlat0.x;
  u_xlat0.x = max(x_229, 1.17549435e-37f);
  let x_234 : f32 = u_xlat0.x;
  u_xlat0.x = inverseSqrt(x_234);
  let x_237 : vec3<f32> = u_xlat0;
  let x_239 : vec3<f32> = u_xlat1;
  u_xlat1 = (vec3<f32>(x_237.x, x_237.x, x_237.x) * x_239);
  let x_242 : vec3<f32> = vs_INTERP0;
  let x_251 : vec4<f32> = x_248.x_MainLightWorldToShadow[0i][1i];
  u_xlat2 = (vec3<f32>(x_242.y, x_242.y, x_242.y) * vec3<f32>(x_251.x, x_251.y, x_251.z));
  let x_255 : vec4<f32> = x_248.x_MainLightWorldToShadow[0i][0i];
  let x_257 : vec3<f32> = vs_INTERP0;
  let x_260 : vec3<f32> = u_xlat2;
  u_xlat2 = ((vec3<f32>(x_255.x, x_255.y, x_255.z) * vec3<f32>(x_257.x, x_257.x, x_257.x)) + x_260);
  let x_264 : vec4<f32> = x_248.x_MainLightWorldToShadow[0i][2i];
  let x_266 : vec3<f32> = vs_INTERP0;
  let x_269 : vec3<f32> = u_xlat2;
  u_xlat2 = ((vec3<f32>(x_264.x, x_264.y, x_264.z) * vec3<f32>(x_266.z, x_266.z, x_266.z)) + x_269);
  let x_271 : vec3<f32> = u_xlat2;
  let x_273 : vec4<f32> = x_248.x_MainLightWorldToShadow[0i][3i];
  u_xlat2 = (x_271 + vec3<f32>(x_273.x, x_273.y, x_273.z));
  let x_279 : f32 = x_248.x_MainLightShadowParams.y;
  u_xlatb0 = (0.0f < x_279);
  let x_281 : bool = u_xlatb0;
  if (x_281) {
    let x_286 : f32 = x_248.x_MainLightShadowParams.y;
    u_xlatb64 = (x_286 == 1.0f);
    let x_288 : bool = u_xlatb64;
    if (x_288) {
      let x_291 : vec3<f32> = u_xlat2;
      let x_295 : vec4<f32> = x_248.x_MainLightShadowOffset0;
      u_xlat3 = (vec4<f32>(x_291.x, x_291.y, x_291.x, x_291.y) + x_295);
      let x_298 : vec4<f32> = u_xlat3;
      let x_299 : vec2<f32> = vec2<f32>(x_298.x, x_298.y);
      let x_301 : f32 = u_xlat2.z;
      txVec0 = vec3<f32>(x_299.x, x_299.y, x_301);
      let x_313 : vec3<f32> = txVec0;
      let x_315 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_313.xy, x_313.z);
      u_xlat7.x = x_315;
      let x_318 : vec4<f32> = u_xlat3;
      let x_319 : vec2<f32> = vec2<f32>(x_318.z, x_318.w);
      let x_321 : f32 = u_xlat2.z;
      txVec1 = vec3<f32>(x_319.x, x_319.y, x_321);
      let x_328 : vec3<f32> = txVec1;
      let x_330 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_328.xy, x_328.z);
      u_xlat7.y = x_330;
      let x_332 : vec3<f32> = u_xlat2;
      let x_336 : vec4<f32> = x_248.x_MainLightShadowOffset1;
      u_xlat3 = (vec4<f32>(x_332.x, x_332.y, x_332.x, x_332.y) + x_336);
      let x_339 : vec4<f32> = u_xlat3;
      let x_340 : vec2<f32> = vec2<f32>(x_339.x, x_339.y);
      let x_342 : f32 = u_xlat2.z;
      txVec2 = vec3<f32>(x_340.x, x_340.y, x_342);
      let x_349 : vec3<f32> = txVec2;
      let x_351 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_349.xy, x_349.z);
      u_xlat7.z = x_351;
      let x_354 : vec4<f32> = u_xlat3;
      let x_355 : vec2<f32> = vec2<f32>(x_354.z, x_354.w);
      let x_357 : f32 = u_xlat2.z;
      txVec3 = vec3<f32>(x_355.x, x_355.y, x_357);
      let x_364 : vec3<f32> = txVec3;
      let x_366 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_364.xy, x_364.z);
      u_xlat7.w = x_366;
      let x_369 : vec4<f32> = u_xlat7;
      u_xlat64 = dot(x_369, vec4<f32>(0.25f, 0.25f, 0.25f, 0.25f));
    } else {
      let x_376 : f32 = x_248.x_MainLightShadowParams.y;
      u_xlatb65 = (x_376 == 2.0f);
      let x_378 : bool = u_xlatb65;
      if (x_378) {
        let x_381 : vec3<f32> = u_xlat2;
        let x_385 : vec4<f32> = x_248.x_MainLightShadowmapSize;
        let x_390 : vec2<f32> = ((vec2<f32>(x_381.x, x_381.y) * vec2<f32>(x_385.z, x_385.w)) + vec2<f32>(0.5f, 0.5f));
        let x_391 : vec4<f32> = u_xlat3;
        u_xlat3 = vec4<f32>(x_390.x, x_390.y, x_391.z, x_391.w);
        let x_393 : vec4<f32> = u_xlat3;
        let x_395 : vec2<f32> = floor(vec2<f32>(x_393.x, x_393.y));
        let x_396 : vec4<f32> = u_xlat3;
        u_xlat3 = vec4<f32>(x_395.x, x_395.y, x_396.z, x_396.w);
        let x_400 : vec3<f32> = u_xlat2;
        let x_403 : vec4<f32> = x_248.x_MainLightShadowmapSize;
        let x_406 : vec4<f32> = u_xlat3;
        u_xlat45 = ((vec2<f32>(x_400.x, x_400.y) * vec2<f32>(x_403.z, x_403.w)) + -(vec2<f32>(x_406.x, x_406.y)));
        let x_410 : vec2<f32> = u_xlat45;
        u_xlat7 = (vec4<f32>(x_410.x, x_410.x, x_410.y, x_410.y) + vec4<f32>(0.5f, 1.0f, 0.5f, 1.0f));
        let x_415 : vec4<f32> = u_xlat7;
        let x_417 : vec4<f32> = u_xlat7;
        u_xlat8 = (vec4<f32>(x_415.x, x_415.x, x_415.z, x_415.z) * vec4<f32>(x_417.x, x_417.x, x_417.z, x_417.z));
        let x_420 : vec4<f32> = u_xlat8;
        let x_424 : vec2<f32> = (vec2<f32>(x_420.y, x_420.w) * vec2<f32>(0.079999998f, 0.079999998f));
        let x_425 : vec4<f32> = u_xlat7;
        u_xlat7 = vec4<f32>(x_424.x, x_425.y, x_424.y, x_425.w);
        let x_427 : vec4<f32> = u_xlat8;
        let x_430 : vec2<f32> = u_xlat45;
        let x_432 : vec2<f32> = ((vec2<f32>(x_427.x, x_427.z) * vec2<f32>(0.5f, 0.5f)) + -(x_430));
        let x_433 : vec4<f32> = u_xlat8;
        u_xlat8 = vec4<f32>(x_432.x, x_432.y, x_433.z, x_433.w);
        let x_436 : vec2<f32> = u_xlat45;
        u_xlat50 = (-(x_436) + vec2<f32>(1.0f, 1.0f));
        let x_441 : vec2<f32> = u_xlat45;
        let x_443 : vec2<f32> = min(x_441, vec2<f32>(0.0f, 0.0f));
        let x_444 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_443.x, x_443.y, x_444.z, x_444.w);
        let x_446 : vec4<f32> = u_xlat9;
        let x_449 : vec4<f32> = u_xlat9;
        let x_452 : vec2<f32> = u_xlat50;
        let x_453 : vec2<f32> = ((-(vec2<f32>(x_446.x, x_446.y)) * vec2<f32>(x_449.x, x_449.y)) + x_452);
        let x_454 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_453.x, x_453.y, x_454.z, x_454.w);
        let x_456 : vec2<f32> = u_xlat45;
        u_xlat45 = max(x_456, vec2<f32>(0.0f, 0.0f));
        let x_458 : vec2<f32> = u_xlat45;
        let x_460 : vec2<f32> = u_xlat45;
        let x_462 : vec4<f32> = u_xlat7;
        u_xlat45 = ((-(x_458) * x_460) + vec2<f32>(x_462.y, x_462.w));
        let x_465 : vec4<f32> = u_xlat9;
        let x_467 : vec2<f32> = (vec2<f32>(x_465.x, x_465.y) + vec2<f32>(1.0f, 1.0f));
        let x_468 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_467.x, x_467.y, x_468.z, x_468.w);
        let x_470 : vec2<f32> = u_xlat45;
        u_xlat45 = (x_470 + vec2<f32>(1.0f, 1.0f));
        let x_473 : vec4<f32> = u_xlat8;
        let x_477 : vec2<f32> = (vec2<f32>(x_473.x, x_473.y) * vec2<f32>(0.159999996f, 0.159999996f));
        let x_478 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_477.x, x_477.y, x_478.z, x_478.w);
        let x_480 : vec2<f32> = u_xlat50;
        let x_481 : vec2<f32> = (x_480 * vec2<f32>(0.159999996f, 0.159999996f));
        let x_482 : vec4<f32> = u_xlat8;
        u_xlat8 = vec4<f32>(x_481.x, x_481.y, x_482.z, x_482.w);
        let x_484 : vec4<f32> = u_xlat9;
        let x_486 : vec2<f32> = (vec2<f32>(x_484.x, x_484.y) * vec2<f32>(0.159999996f, 0.159999996f));
        let x_487 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_486.x, x_486.y, x_487.z, x_487.w);
        let x_490 : vec2<f32> = u_xlat45;
        let x_491 : vec2<f32> = (x_490 * vec2<f32>(0.159999996f, 0.159999996f));
        let x_492 : vec4<f32> = u_xlat11;
        u_xlat11 = vec4<f32>(x_491.x, x_491.y, x_492.z, x_492.w);
        let x_494 : vec4<f32> = u_xlat7;
        u_xlat45 = (vec2<f32>(x_494.y, x_494.w) * vec2<f32>(0.159999996f, 0.159999996f));
        let x_498 : f32 = u_xlat9.x;
        u_xlat10.z = x_498;
        let x_501 : f32 = u_xlat45.x;
        u_xlat10.w = x_501;
        let x_504 : f32 = u_xlat11.x;
        u_xlat8.z = x_504;
        let x_507 : f32 = u_xlat7.x;
        u_xlat8.w = x_507;
        let x_510 : vec4<f32> = u_xlat8;
        let x_512 : vec4<f32> = u_xlat10;
        u_xlat12 = (vec4<f32>(x_510.z, x_510.w, x_510.x, x_510.z) + vec4<f32>(x_512.z, x_512.w, x_512.x, x_512.z));
        let x_516 : f32 = u_xlat10.y;
        u_xlat9.z = x_516;
        let x_519 : f32 = u_xlat45.y;
        u_xlat9.w = x_519;
        let x_522 : f32 = u_xlat8.y;
        u_xlat11.z = x_522;
        let x_525 : f32 = u_xlat7.z;
        u_xlat11.w = x_525;
        let x_527 : vec4<f32> = u_xlat9;
        let x_529 : vec4<f32> = u_xlat11;
        let x_531 : vec3<f32> = (vec3<f32>(x_527.z, x_527.y, x_527.w) + vec3<f32>(x_529.z, x_529.y, x_529.w));
        let x_532 : vec4<f32> = u_xlat7;
        u_xlat7 = vec4<f32>(x_531.x, x_531.y, x_531.z, x_532.w);
        let x_534 : vec4<f32> = u_xlat8;
        let x_536 : vec4<f32> = u_xlat12;
        let x_538 : vec3<f32> = (vec3<f32>(x_534.x, x_534.z, x_534.w) / vec3<f32>(x_536.z, x_536.w, x_536.y));
        let x_539 : vec4<f32> = u_xlat8;
        u_xlat8 = vec4<f32>(x_538.x, x_538.y, x_538.z, x_539.w);
        let x_541 : vec4<f32> = u_xlat8;
        let x_547 : vec3<f32> = (vec3<f32>(x_541.x, x_541.y, x_541.z) + vec3<f32>(-2.5f, -0.5f, 1.5f));
        let x_548 : vec4<f32> = u_xlat8;
        u_xlat8 = vec4<f32>(x_547.x, x_547.y, x_547.z, x_548.w);
        let x_550 : vec4<f32> = u_xlat11;
        let x_552 : vec4<f32> = u_xlat7;
        let x_554 : vec3<f32> = (vec3<f32>(x_550.z, x_550.y, x_550.w) / vec3<f32>(x_552.x, x_552.y, x_552.z));
        let x_555 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_554.x, x_554.y, x_554.z, x_555.w);
        let x_557 : vec4<f32> = u_xlat9;
        let x_559 : vec3<f32> = (vec3<f32>(x_557.x, x_557.y, x_557.z) + vec3<f32>(-2.5f, -0.5f, 1.5f));
        let x_560 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_559.x, x_559.y, x_559.z, x_560.w);
        let x_562 : vec4<f32> = u_xlat8;
        let x_565 : vec4<f32> = x_248.x_MainLightShadowmapSize;
        let x_567 : vec3<f32> = (vec3<f32>(x_562.y, x_562.x, x_562.z) * vec3<f32>(x_565.x, x_565.x, x_565.x));
        let x_568 : vec4<f32> = u_xlat8;
        u_xlat8 = vec4<f32>(x_567.x, x_567.y, x_567.z, x_568.w);
        let x_570 : vec4<f32> = u_xlat9;
        let x_573 : vec4<f32> = x_248.x_MainLightShadowmapSize;
        let x_575 : vec3<f32> = (vec3<f32>(x_570.x, x_570.y, x_570.z) * vec3<f32>(x_573.y, x_573.y, x_573.y));
        let x_576 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_575.x, x_575.y, x_575.z, x_576.w);
        let x_579 : f32 = u_xlat9.x;
        u_xlat8.w = x_579;
        let x_581 : vec4<f32> = u_xlat3;
        let x_584 : vec4<f32> = x_248.x_MainLightShadowmapSize;
        let x_587 : vec4<f32> = u_xlat8;
        u_xlat10 = ((vec4<f32>(x_581.x, x_581.y, x_581.x, x_581.y) * vec4<f32>(x_584.x, x_584.y, x_584.x, x_584.y)) + vec4<f32>(x_587.y, x_587.w, x_587.x, x_587.w));
        let x_590 : vec4<f32> = u_xlat3;
        let x_593 : vec4<f32> = x_248.x_MainLightShadowmapSize;
        let x_596 : vec4<f32> = u_xlat8;
        u_xlat45 = ((vec2<f32>(x_590.x, x_590.y) * vec2<f32>(x_593.x, x_593.y)) + vec2<f32>(x_596.z, x_596.w));
        let x_600 : f32 = u_xlat8.y;
        u_xlat9.w = x_600;
        let x_602 : vec4<f32> = u_xlat9;
        let x_603 : vec2<f32> = vec2<f32>(x_602.y, x_602.z);
        let x_604 : vec4<f32> = u_xlat8;
        u_xlat8 = vec4<f32>(x_604.x, x_603.x, x_604.z, x_603.y);
        let x_606 : vec4<f32> = u_xlat3;
        let x_609 : vec4<f32> = x_248.x_MainLightShadowmapSize;
        let x_612 : vec4<f32> = u_xlat8;
        u_xlat11 = ((vec4<f32>(x_606.x, x_606.y, x_606.x, x_606.y) * vec4<f32>(x_609.x, x_609.y, x_609.x, x_609.y)) + vec4<f32>(x_612.x, x_612.y, x_612.z, x_612.y));
        let x_615 : vec4<f32> = u_xlat3;
        let x_618 : vec4<f32> = x_248.x_MainLightShadowmapSize;
        let x_621 : vec4<f32> = u_xlat9;
        u_xlat9 = ((vec4<f32>(x_615.x, x_615.y, x_615.x, x_615.y) * vec4<f32>(x_618.x, x_618.y, x_618.x, x_618.y)) + vec4<f32>(x_621.w, x_621.y, x_621.w, x_621.z));
        let x_624 : vec4<f32> = u_xlat3;
        let x_627 : vec4<f32> = x_248.x_MainLightShadowmapSize;
        let x_630 : vec4<f32> = u_xlat8;
        u_xlat8 = ((vec4<f32>(x_624.x, x_624.y, x_624.x, x_624.y) * vec4<f32>(x_627.x, x_627.y, x_627.x, x_627.y)) + vec4<f32>(x_630.x, x_630.w, x_630.z, x_630.w));
        let x_634 : vec4<f32> = u_xlat7;
        let x_636 : vec4<f32> = u_xlat12;
        u_xlat13 = (vec4<f32>(x_634.x, x_634.x, x_634.x, x_634.y) * vec4<f32>(x_636.z, x_636.w, x_636.y, x_636.z));
        let x_640 : vec4<f32> = u_xlat7;
        let x_642 : vec4<f32> = u_xlat12;
        u_xlat14 = (vec4<f32>(x_640.y, x_640.y, x_640.z, x_640.z) * x_642);
        let x_646 : f32 = u_xlat7.z;
        let x_648 : f32 = u_xlat12.y;
        u_xlat65 = (x_646 * x_648);
        let x_651 : vec4<f32> = u_xlat10;
        let x_652 : vec2<f32> = vec2<f32>(x_651.x, x_651.y);
        let x_654 : f32 = u_xlat2.z;
        txVec4 = vec3<f32>(x_652.x, x_652.y, x_654);
        let x_661 : vec3<f32> = txVec4;
        let x_663 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_661.xy, x_661.z);
        u_xlat3.x = x_663;
        let x_666 : vec4<f32> = u_xlat10;
        let x_667 : vec2<f32> = vec2<f32>(x_666.z, x_666.w);
        let x_669 : f32 = u_xlat2.z;
        txVec5 = vec3<f32>(x_667.x, x_667.y, x_669);
        let x_677 : vec3<f32> = txVec5;
        let x_679 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_677.xy, x_677.z);
        u_xlat24 = x_679;
        let x_680 : f32 = u_xlat24;
        let x_682 : f32 = u_xlat13.y;
        u_xlat24 = (x_680 * x_682);
        let x_685 : f32 = u_xlat13.x;
        let x_687 : f32 = u_xlat3.x;
        let x_689 : f32 = u_xlat24;
        u_xlat3.x = ((x_685 * x_687) + x_689);
        let x_693 : vec2<f32> = u_xlat45;
        let x_695 : f32 = u_xlat2.z;
        txVec6 = vec3<f32>(x_693.x, x_693.y, x_695);
        let x_702 : vec3<f32> = txVec6;
        let x_704 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_702.xy, x_702.z);
        u_xlat24 = x_704;
        let x_706 : f32 = u_xlat13.z;
        let x_707 : f32 = u_xlat24;
        let x_710 : f32 = u_xlat3.x;
        u_xlat3.x = ((x_706 * x_707) + x_710);
        let x_714 : vec4<f32> = u_xlat9;
        let x_715 : vec2<f32> = vec2<f32>(x_714.x, x_714.y);
        let x_717 : f32 = u_xlat2.z;
        txVec7 = vec3<f32>(x_715.x, x_715.y, x_717);
        let x_724 : vec3<f32> = txVec7;
        let x_726 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_724.xy, x_724.z);
        u_xlat24 = x_726;
        let x_728 : f32 = u_xlat13.w;
        let x_729 : f32 = u_xlat24;
        let x_732 : f32 = u_xlat3.x;
        u_xlat3.x = ((x_728 * x_729) + x_732);
        let x_736 : vec4<f32> = u_xlat11;
        let x_737 : vec2<f32> = vec2<f32>(x_736.x, x_736.y);
        let x_739 : f32 = u_xlat2.z;
        txVec8 = vec3<f32>(x_737.x, x_737.y, x_739);
        let x_746 : vec3<f32> = txVec8;
        let x_748 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_746.xy, x_746.z);
        u_xlat24 = x_748;
        let x_750 : f32 = u_xlat14.x;
        let x_751 : f32 = u_xlat24;
        let x_754 : f32 = u_xlat3.x;
        u_xlat3.x = ((x_750 * x_751) + x_754);
        let x_758 : vec4<f32> = u_xlat11;
        let x_759 : vec2<f32> = vec2<f32>(x_758.z, x_758.w);
        let x_761 : f32 = u_xlat2.z;
        txVec9 = vec3<f32>(x_759.x, x_759.y, x_761);
        let x_768 : vec3<f32> = txVec9;
        let x_770 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_768.xy, x_768.z);
        u_xlat24 = x_770;
        let x_772 : f32 = u_xlat14.y;
        let x_773 : f32 = u_xlat24;
        let x_776 : f32 = u_xlat3.x;
        u_xlat3.x = ((x_772 * x_773) + x_776);
        let x_780 : vec4<f32> = u_xlat9;
        let x_781 : vec2<f32> = vec2<f32>(x_780.z, x_780.w);
        let x_783 : f32 = u_xlat2.z;
        txVec10 = vec3<f32>(x_781.x, x_781.y, x_783);
        let x_790 : vec3<f32> = txVec10;
        let x_792 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_790.xy, x_790.z);
        u_xlat24 = x_792;
        let x_794 : f32 = u_xlat14.z;
        let x_795 : f32 = u_xlat24;
        let x_798 : f32 = u_xlat3.x;
        u_xlat3.x = ((x_794 * x_795) + x_798);
        let x_802 : vec4<f32> = u_xlat8;
        let x_803 : vec2<f32> = vec2<f32>(x_802.x, x_802.y);
        let x_805 : f32 = u_xlat2.z;
        txVec11 = vec3<f32>(x_803.x, x_803.y, x_805);
        let x_812 : vec3<f32> = txVec11;
        let x_814 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_812.xy, x_812.z);
        u_xlat24 = x_814;
        let x_816 : f32 = u_xlat14.w;
        let x_817 : f32 = u_xlat24;
        let x_820 : f32 = u_xlat3.x;
        u_xlat3.x = ((x_816 * x_817) + x_820);
        let x_824 : vec4<f32> = u_xlat8;
        let x_825 : vec2<f32> = vec2<f32>(x_824.z, x_824.w);
        let x_827 : f32 = u_xlat2.z;
        txVec12 = vec3<f32>(x_825.x, x_825.y, x_827);
        let x_834 : vec3<f32> = txVec12;
        let x_836 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_834.xy, x_834.z);
        u_xlat24 = x_836;
        let x_837 : f32 = u_xlat65;
        let x_838 : f32 = u_xlat24;
        let x_841 : f32 = u_xlat3.x;
        u_xlat64 = ((x_837 * x_838) + x_841);
      } else {
        let x_844 : vec3<f32> = u_xlat2;
        let x_847 : vec4<f32> = x_248.x_MainLightShadowmapSize;
        let x_850 : vec2<f32> = ((vec2<f32>(x_844.x, x_844.y) * vec2<f32>(x_847.z, x_847.w)) + vec2<f32>(0.5f, 0.5f));
        let x_851 : vec4<f32> = u_xlat3;
        u_xlat3 = vec4<f32>(x_850.x, x_850.y, x_851.z, x_851.w);
        let x_853 : vec4<f32> = u_xlat3;
        let x_855 : vec2<f32> = floor(vec2<f32>(x_853.x, x_853.y));
        let x_856 : vec4<f32> = u_xlat3;
        u_xlat3 = vec4<f32>(x_855.x, x_855.y, x_856.z, x_856.w);
        let x_858 : vec3<f32> = u_xlat2;
        let x_861 : vec4<f32> = x_248.x_MainLightShadowmapSize;
        let x_864 : vec4<f32> = u_xlat3;
        u_xlat45 = ((vec2<f32>(x_858.x, x_858.y) * vec2<f32>(x_861.z, x_861.w)) + -(vec2<f32>(x_864.x, x_864.y)));
        let x_868 : vec2<f32> = u_xlat45;
        u_xlat7 = (vec4<f32>(x_868.x, x_868.x, x_868.y, x_868.y) + vec4<f32>(0.5f, 1.0f, 0.5f, 1.0f));
        let x_871 : vec4<f32> = u_xlat7;
        let x_873 : vec4<f32> = u_xlat7;
        u_xlat8 = (vec4<f32>(x_871.x, x_871.x, x_871.z, x_871.z) * vec4<f32>(x_873.x, x_873.x, x_873.z, x_873.z));
        let x_876 : vec4<f32> = u_xlat8;
        let x_880 : vec2<f32> = (vec2<f32>(x_876.y, x_876.w) * vec2<f32>(0.040816002f, 0.040816002f));
        let x_881 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_881.x, x_880.x, x_881.z, x_880.y);
        let x_883 : vec4<f32> = u_xlat8;
        let x_886 : vec2<f32> = u_xlat45;
        let x_888 : vec2<f32> = ((vec2<f32>(x_883.x, x_883.z) * vec2<f32>(0.5f, 0.5f)) + -(x_886));
        let x_889 : vec4<f32> = u_xlat7;
        u_xlat7 = vec4<f32>(x_888.x, x_889.y, x_888.y, x_889.w);
        let x_891 : vec2<f32> = u_xlat45;
        let x_893 : vec2<f32> = (-(x_891) + vec2<f32>(1.0f, 1.0f));
        let x_894 : vec4<f32> = u_xlat8;
        u_xlat8 = vec4<f32>(x_893.x, x_893.y, x_894.z, x_894.w);
        let x_896 : vec2<f32> = u_xlat45;
        u_xlat50 = min(x_896, vec2<f32>(0.0f, 0.0f));
        let x_898 : vec2<f32> = u_xlat50;
        let x_900 : vec2<f32> = u_xlat50;
        let x_902 : vec4<f32> = u_xlat8;
        let x_904 : vec2<f32> = ((-(x_898) * x_900) + vec2<f32>(x_902.x, x_902.y));
        let x_905 : vec4<f32> = u_xlat8;
        u_xlat8 = vec4<f32>(x_904.x, x_904.y, x_905.z, x_905.w);
        let x_907 : vec2<f32> = u_xlat45;
        u_xlat50 = max(x_907, vec2<f32>(0.0f, 0.0f));
        let x_910 : vec2<f32> = u_xlat50;
        let x_912 : vec2<f32> = u_xlat50;
        let x_914 : vec4<f32> = u_xlat7;
        let x_916 : vec2<f32> = ((-(x_910) * x_912) + vec2<f32>(x_914.y, x_914.w));
        let x_917 : vec3<f32> = u_xlat28;
        u_xlat28 = vec3<f32>(x_916.x, x_917.y, x_916.y);
        let x_919 : vec4<f32> = u_xlat8;
        let x_922 : vec2<f32> = (vec2<f32>(x_919.x, x_919.y) + vec2<f32>(2.0f, 2.0f));
        let x_923 : vec4<f32> = u_xlat8;
        u_xlat8 = vec4<f32>(x_922.x, x_922.y, x_923.z, x_923.w);
        let x_925 : vec3<f32> = u_xlat28;
        let x_927 : vec2<f32> = (vec2<f32>(x_925.x, x_925.z) + vec2<f32>(2.0f, 2.0f));
        let x_928 : vec4<f32> = u_xlat7;
        u_xlat7 = vec4<f32>(x_928.x, x_927.x, x_928.z, x_927.y);
        let x_931 : f32 = u_xlat7.y;
        u_xlat10.z = (x_931 * 0.081632003f);
        let x_935 : vec4<f32> = u_xlat7;
        let x_938 : vec3<f32> = (vec3<f32>(x_935.z, x_935.x, x_935.w) * vec3<f32>(0.081632003f, 0.081632003f, 0.081632003f));
        let x_939 : vec4<f32> = u_xlat11;
        u_xlat11 = vec4<f32>(x_938.x, x_938.y, x_938.z, x_939.w);
        let x_941 : vec4<f32> = u_xlat8;
        let x_944 : vec2<f32> = (vec2<f32>(x_941.x, x_941.y) * vec2<f32>(0.081632003f, 0.081632003f));
        let x_945 : vec4<f32> = u_xlat7;
        u_xlat7 = vec4<f32>(x_944.x, x_944.y, x_945.z, x_945.w);
        let x_948 : f32 = u_xlat11.y;
        u_xlat10.x = x_948;
        let x_950 : vec2<f32> = u_xlat45;
        let x_957 : vec2<f32> = ((vec2<f32>(x_950.x, x_950.x) * vec2<f32>(-0.081632003f, 0.081632003f)) + vec2<f32>(0.163264006f, 0.081632003f));
        let x_958 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_958.x, x_957.x, x_958.z, x_957.y);
        let x_960 : vec2<f32> = u_xlat45;
        let x_964 : vec2<f32> = ((vec2<f32>(x_960.x, x_960.x) * vec2<f32>(-0.081632003f, 0.081632003f)) + vec2<f32>(0.081632003f, 0.163264006f));
        let x_965 : vec4<f32> = u_xlat8;
        u_xlat8 = vec4<f32>(x_964.x, x_965.y, x_964.y, x_965.w);
        let x_968 : f32 = u_xlat7.x;
        u_xlat8.y = x_968;
        let x_971 : f32 = u_xlat9.y;
        u_xlat8.w = x_971;
        let x_973 : vec4<f32> = u_xlat8;
        let x_974 : vec4<f32> = u_xlat10;
        u_xlat10 = (x_973 + x_974);
        let x_976 : vec2<f32> = u_xlat45;
        let x_979 : vec2<f32> = ((vec2<f32>(x_976.y, x_976.y) * vec2<f32>(-0.081632003f, 0.081632003f)) + vec2<f32>(0.163264006f, 0.081632003f));
        let x_980 : vec4<f32> = u_xlat11;
        u_xlat11 = vec4<f32>(x_980.x, x_979.x, x_980.z, x_979.y);
        let x_982 : vec2<f32> = u_xlat45;
        let x_985 : vec2<f32> = ((vec2<f32>(x_982.y, x_982.y) * vec2<f32>(-0.081632003f, 0.081632003f)) + vec2<f32>(0.081632003f, 0.163264006f));
        let x_986 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_985.x, x_986.y, x_985.y, x_986.w);
        let x_989 : f32 = u_xlat7.y;
        u_xlat9.y = x_989;
        let x_991 : vec4<f32> = u_xlat9;
        let x_992 : vec4<f32> = u_xlat11;
        u_xlat7 = (x_991 + x_992);
        let x_994 : vec4<f32> = u_xlat8;
        let x_995 : vec4<f32> = u_xlat10;
        u_xlat8 = (x_994 / x_995);
        let x_997 : vec4<f32> = u_xlat8;
        u_xlat8 = (x_997 + vec4<f32>(-3.5f, -1.5f, 0.5f, 2.5f));
        let x_1003 : vec4<f32> = u_xlat9;
        let x_1004 : vec4<f32> = u_xlat7;
        u_xlat9 = (x_1003 / x_1004);
        let x_1006 : vec4<f32> = u_xlat9;
        u_xlat9 = (x_1006 + vec4<f32>(-3.5f, -1.5f, 0.5f, 2.5f));
        let x_1008 : vec4<f32> = u_xlat8;
        let x_1011 : vec4<f32> = x_248.x_MainLightShadowmapSize;
        u_xlat8 = (vec4<f32>(x_1008.w, x_1008.x, x_1008.y, x_1008.z) * vec4<f32>(x_1011.x, x_1011.x, x_1011.x, x_1011.x));
        let x_1014 : vec4<f32> = u_xlat9;
        let x_1017 : vec4<f32> = x_248.x_MainLightShadowmapSize;
        u_xlat9 = (vec4<f32>(x_1014.x, x_1014.w, x_1014.y, x_1014.z) * vec4<f32>(x_1017.y, x_1017.y, x_1017.y, x_1017.y));
        let x_1020 : vec4<f32> = u_xlat8;
        let x_1021 : vec3<f32> = vec3<f32>(x_1020.y, x_1020.z, x_1020.w);
        let x_1022 : vec4<f32> = u_xlat11;
        u_xlat11 = vec4<f32>(x_1021.x, x_1022.y, x_1021.y, x_1021.z);
        let x_1025 : f32 = u_xlat9.x;
        u_xlat11.y = x_1025;
        let x_1027 : vec4<f32> = u_xlat3;
        let x_1030 : vec4<f32> = x_248.x_MainLightShadowmapSize;
        let x_1033 : vec4<f32> = u_xlat11;
        u_xlat12 = ((vec4<f32>(x_1027.x, x_1027.y, x_1027.x, x_1027.y) * vec4<f32>(x_1030.x, x_1030.y, x_1030.x, x_1030.y)) + vec4<f32>(x_1033.x, x_1033.y, x_1033.z, x_1033.y));
        let x_1036 : vec4<f32> = u_xlat3;
        let x_1039 : vec4<f32> = x_248.x_MainLightShadowmapSize;
        let x_1042 : vec4<f32> = u_xlat11;
        u_xlat45 = ((vec2<f32>(x_1036.x, x_1036.y) * vec2<f32>(x_1039.x, x_1039.y)) + vec2<f32>(x_1042.w, x_1042.y));
        let x_1046 : f32 = u_xlat11.y;
        u_xlat8.y = x_1046;
        let x_1049 : f32 = u_xlat9.z;
        u_xlat11.y = x_1049;
        let x_1051 : vec4<f32> = u_xlat3;
        let x_1054 : vec4<f32> = x_248.x_MainLightShadowmapSize;
        let x_1057 : vec4<f32> = u_xlat11;
        u_xlat13 = ((vec4<f32>(x_1051.x, x_1051.y, x_1051.x, x_1051.y) * vec4<f32>(x_1054.x, x_1054.y, x_1054.x, x_1054.y)) + vec4<f32>(x_1057.x, x_1057.y, x_1057.z, x_1057.y));
        let x_1060 : vec4<f32> = u_xlat3;
        let x_1063 : vec4<f32> = x_248.x_MainLightShadowmapSize;
        let x_1066 : vec4<f32> = u_xlat11;
        let x_1068 : vec2<f32> = ((vec2<f32>(x_1060.x, x_1060.y) * vec2<f32>(x_1063.x, x_1063.y)) + vec2<f32>(x_1066.w, x_1066.y));
        let x_1069 : vec4<f32> = u_xlat14;
        u_xlat14 = vec4<f32>(x_1068.x, x_1068.y, x_1069.z, x_1069.w);
        let x_1072 : f32 = u_xlat11.y;
        u_xlat8.z = x_1072;
        let x_1075 : vec4<f32> = u_xlat3;
        let x_1078 : vec4<f32> = x_248.x_MainLightShadowmapSize;
        let x_1081 : vec4<f32> = u_xlat8;
        u_xlat15 = ((vec4<f32>(x_1075.x, x_1075.y, x_1075.x, x_1075.y) * vec4<f32>(x_1078.x, x_1078.y, x_1078.x, x_1078.y)) + vec4<f32>(x_1081.x, x_1081.y, x_1081.x, x_1081.z));
        let x_1085 : f32 = u_xlat9.w;
        u_xlat11.y = x_1085;
        let x_1088 : vec4<f32> = u_xlat3;
        let x_1091 : vec4<f32> = x_248.x_MainLightShadowmapSize;
        let x_1094 : vec4<f32> = u_xlat11;
        u_xlat16 = ((vec4<f32>(x_1088.x, x_1088.y, x_1088.x, x_1088.y) * vec4<f32>(x_1091.x, x_1091.y, x_1091.x, x_1091.y)) + vec4<f32>(x_1094.x, x_1094.y, x_1094.z, x_1094.y));
        let x_1098 : vec4<f32> = u_xlat3;
        let x_1101 : vec4<f32> = x_248.x_MainLightShadowmapSize;
        let x_1104 : vec4<f32> = u_xlat11;
        let x_1106 : vec2<f32> = ((vec2<f32>(x_1098.x, x_1098.y) * vec2<f32>(x_1101.x, x_1101.y)) + vec2<f32>(x_1104.w, x_1104.y));
        let x_1107 : vec3<f32> = u_xlat29;
        u_xlat29 = vec3<f32>(x_1106.x, x_1106.y, x_1107.z);
        let x_1110 : f32 = u_xlat11.y;
        u_xlat8.w = x_1110;
        let x_1113 : vec4<f32> = u_xlat3;
        let x_1116 : vec4<f32> = x_248.x_MainLightShadowmapSize;
        let x_1119 : vec4<f32> = u_xlat8;
        u_xlat56 = ((vec2<f32>(x_1113.x, x_1113.y) * vec2<f32>(x_1116.x, x_1116.y)) + vec2<f32>(x_1119.x, x_1119.w));
        let x_1122 : vec4<f32> = u_xlat11;
        let x_1123 : vec3<f32> = vec3<f32>(x_1122.x, x_1122.z, x_1122.w);
        let x_1124 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_1123.x, x_1124.y, x_1123.y, x_1123.z);
        let x_1126 : vec4<f32> = u_xlat3;
        let x_1129 : vec4<f32> = x_248.x_MainLightShadowmapSize;
        let x_1132 : vec4<f32> = u_xlat9;
        u_xlat11 = ((vec4<f32>(x_1126.x, x_1126.y, x_1126.x, x_1126.y) * vec4<f32>(x_1129.x, x_1129.y, x_1129.x, x_1129.y)) + vec4<f32>(x_1132.x, x_1132.y, x_1132.z, x_1132.y));
        let x_1136 : vec4<f32> = u_xlat3;
        let x_1139 : vec4<f32> = x_248.x_MainLightShadowmapSize;
        let x_1142 : vec4<f32> = u_xlat9;
        u_xlat51 = ((vec2<f32>(x_1136.x, x_1136.y) * vec2<f32>(x_1139.x, x_1139.y)) + vec2<f32>(x_1142.w, x_1142.y));
        let x_1146 : f32 = u_xlat8.x;
        u_xlat9.x = x_1146;
        let x_1148 : vec4<f32> = u_xlat3;
        let x_1151 : vec4<f32> = x_248.x_MainLightShadowmapSize;
        let x_1154 : vec4<f32> = u_xlat9;
        let x_1156 : vec2<f32> = ((vec2<f32>(x_1148.x, x_1148.y) * vec2<f32>(x_1151.x, x_1151.y)) + vec2<f32>(x_1154.x, x_1154.y));
        let x_1157 : vec4<f32> = u_xlat3;
        u_xlat3 = vec4<f32>(x_1156.x, x_1156.y, x_1157.z, x_1157.w);
        let x_1160 : vec4<f32> = u_xlat7;
        let x_1162 : vec4<f32> = u_xlat10;
        u_xlat17 = (vec4<f32>(x_1160.x, x_1160.x, x_1160.x, x_1160.x) * x_1162);
        let x_1165 : vec4<f32> = u_xlat7;
        let x_1167 : vec4<f32> = u_xlat10;
        u_xlat18 = (vec4<f32>(x_1165.y, x_1165.y, x_1165.y, x_1165.y) * x_1167);
        let x_1170 : vec4<f32> = u_xlat7;
        let x_1172 : vec4<f32> = u_xlat10;
        u_xlat19 = (vec4<f32>(x_1170.z, x_1170.z, x_1170.z, x_1170.z) * x_1172);
        let x_1174 : vec4<f32> = u_xlat7;
        let x_1176 : vec4<f32> = u_xlat10;
        u_xlat7 = (vec4<f32>(x_1174.w, x_1174.w, x_1174.w, x_1174.w) * x_1176);
        let x_1179 : vec4<f32> = u_xlat12;
        let x_1180 : vec2<f32> = vec2<f32>(x_1179.x, x_1179.y);
        let x_1182 : f32 = u_xlat2.z;
        txVec13 = vec3<f32>(x_1180.x, x_1180.y, x_1182);
        let x_1189 : vec3<f32> = txVec13;
        let x_1191 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1189.xy, x_1189.z);
        u_xlat65 = x_1191;
        let x_1193 : vec4<f32> = u_xlat12;
        let x_1194 : vec2<f32> = vec2<f32>(x_1193.z, x_1193.w);
        let x_1196 : f32 = u_xlat2.z;
        txVec14 = vec3<f32>(x_1194.x, x_1194.y, x_1196);
        let x_1204 : vec3<f32> = txVec14;
        let x_1206 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1204.xy, x_1204.z);
        u_xlat68 = x_1206;
        let x_1207 : f32 = u_xlat68;
        let x_1209 : f32 = u_xlat17.y;
        u_xlat68 = (x_1207 * x_1209);
        let x_1212 : f32 = u_xlat17.x;
        let x_1213 : f32 = u_xlat65;
        let x_1215 : f32 = u_xlat68;
        u_xlat65 = ((x_1212 * x_1213) + x_1215);
        let x_1218 : vec2<f32> = u_xlat45;
        let x_1220 : f32 = u_xlat2.z;
        txVec15 = vec3<f32>(x_1218.x, x_1218.y, x_1220);
        let x_1227 : vec3<f32> = txVec15;
        let x_1229 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1227.xy, x_1227.z);
        u_xlat45.x = x_1229;
        let x_1232 : f32 = u_xlat17.z;
        let x_1234 : f32 = u_xlat45.x;
        let x_1236 : f32 = u_xlat65;
        u_xlat65 = ((x_1232 * x_1234) + x_1236);
        let x_1239 : vec4<f32> = u_xlat15;
        let x_1240 : vec2<f32> = vec2<f32>(x_1239.x, x_1239.y);
        let x_1242 : f32 = u_xlat2.z;
        txVec16 = vec3<f32>(x_1240.x, x_1240.y, x_1242);
        let x_1249 : vec3<f32> = txVec16;
        let x_1251 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1249.xy, x_1249.z);
        u_xlat45.x = x_1251;
        let x_1254 : f32 = u_xlat17.w;
        let x_1256 : f32 = u_xlat45.x;
        let x_1258 : f32 = u_xlat65;
        u_xlat65 = ((x_1254 * x_1256) + x_1258);
        let x_1261 : vec4<f32> = u_xlat13;
        let x_1262 : vec2<f32> = vec2<f32>(x_1261.x, x_1261.y);
        let x_1264 : f32 = u_xlat2.z;
        txVec17 = vec3<f32>(x_1262.x, x_1262.y, x_1264);
        let x_1271 : vec3<f32> = txVec17;
        let x_1273 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1271.xy, x_1271.z);
        u_xlat45.x = x_1273;
        let x_1276 : f32 = u_xlat18.x;
        let x_1278 : f32 = u_xlat45.x;
        let x_1280 : f32 = u_xlat65;
        u_xlat65 = ((x_1276 * x_1278) + x_1280);
        let x_1283 : vec4<f32> = u_xlat13;
        let x_1284 : vec2<f32> = vec2<f32>(x_1283.z, x_1283.w);
        let x_1286 : f32 = u_xlat2.z;
        txVec18 = vec3<f32>(x_1284.x, x_1284.y, x_1286);
        let x_1293 : vec3<f32> = txVec18;
        let x_1295 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1293.xy, x_1293.z);
        u_xlat45.x = x_1295;
        let x_1298 : f32 = u_xlat18.y;
        let x_1300 : f32 = u_xlat45.x;
        let x_1302 : f32 = u_xlat65;
        u_xlat65 = ((x_1298 * x_1300) + x_1302);
        let x_1305 : vec4<f32> = u_xlat14;
        let x_1306 : vec2<f32> = vec2<f32>(x_1305.x, x_1305.y);
        let x_1308 : f32 = u_xlat2.z;
        txVec19 = vec3<f32>(x_1306.x, x_1306.y, x_1308);
        let x_1315 : vec3<f32> = txVec19;
        let x_1317 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1315.xy, x_1315.z);
        u_xlat45.x = x_1317;
        let x_1320 : f32 = u_xlat18.z;
        let x_1322 : f32 = u_xlat45.x;
        let x_1324 : f32 = u_xlat65;
        u_xlat65 = ((x_1320 * x_1322) + x_1324);
        let x_1327 : vec4<f32> = u_xlat15;
        let x_1328 : vec2<f32> = vec2<f32>(x_1327.z, x_1327.w);
        let x_1330 : f32 = u_xlat2.z;
        txVec20 = vec3<f32>(x_1328.x, x_1328.y, x_1330);
        let x_1337 : vec3<f32> = txVec20;
        let x_1339 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1337.xy, x_1337.z);
        u_xlat45.x = x_1339;
        let x_1342 : f32 = u_xlat18.w;
        let x_1344 : f32 = u_xlat45.x;
        let x_1346 : f32 = u_xlat65;
        u_xlat65 = ((x_1342 * x_1344) + x_1346);
        let x_1349 : vec4<f32> = u_xlat16;
        let x_1350 : vec2<f32> = vec2<f32>(x_1349.x, x_1349.y);
        let x_1352 : f32 = u_xlat2.z;
        txVec21 = vec3<f32>(x_1350.x, x_1350.y, x_1352);
        let x_1359 : vec3<f32> = txVec21;
        let x_1361 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1359.xy, x_1359.z);
        u_xlat45.x = x_1361;
        let x_1364 : f32 = u_xlat19.x;
        let x_1366 : f32 = u_xlat45.x;
        let x_1368 : f32 = u_xlat65;
        u_xlat65 = ((x_1364 * x_1366) + x_1368);
        let x_1371 : vec4<f32> = u_xlat16;
        let x_1372 : vec2<f32> = vec2<f32>(x_1371.z, x_1371.w);
        let x_1374 : f32 = u_xlat2.z;
        txVec22 = vec3<f32>(x_1372.x, x_1372.y, x_1374);
        let x_1381 : vec3<f32> = txVec22;
        let x_1383 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1381.xy, x_1381.z);
        u_xlat45.x = x_1383;
        let x_1386 : f32 = u_xlat19.y;
        let x_1388 : f32 = u_xlat45.x;
        let x_1390 : f32 = u_xlat65;
        u_xlat65 = ((x_1386 * x_1388) + x_1390);
        let x_1393 : vec3<f32> = u_xlat29;
        let x_1394 : vec2<f32> = vec2<f32>(x_1393.x, x_1393.y);
        let x_1396 : f32 = u_xlat2.z;
        txVec23 = vec3<f32>(x_1394.x, x_1394.y, x_1396);
        let x_1403 : vec3<f32> = txVec23;
        let x_1405 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1403.xy, x_1403.z);
        u_xlat45.x = x_1405;
        let x_1408 : f32 = u_xlat19.z;
        let x_1410 : f32 = u_xlat45.x;
        let x_1412 : f32 = u_xlat65;
        u_xlat65 = ((x_1408 * x_1410) + x_1412);
        let x_1415 : vec2<f32> = u_xlat56;
        let x_1417 : f32 = u_xlat2.z;
        txVec24 = vec3<f32>(x_1415.x, x_1415.y, x_1417);
        let x_1424 : vec3<f32> = txVec24;
        let x_1426 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1424.xy, x_1424.z);
        u_xlat45.x = x_1426;
        let x_1429 : f32 = u_xlat19.w;
        let x_1431 : f32 = u_xlat45.x;
        let x_1433 : f32 = u_xlat65;
        u_xlat65 = ((x_1429 * x_1431) + x_1433);
        let x_1436 : vec4<f32> = u_xlat11;
        let x_1437 : vec2<f32> = vec2<f32>(x_1436.x, x_1436.y);
        let x_1439 : f32 = u_xlat2.z;
        txVec25 = vec3<f32>(x_1437.x, x_1437.y, x_1439);
        let x_1446 : vec3<f32> = txVec25;
        let x_1448 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1446.xy, x_1446.z);
        u_xlat45.x = x_1448;
        let x_1451 : f32 = u_xlat7.x;
        let x_1453 : f32 = u_xlat45.x;
        let x_1455 : f32 = u_xlat65;
        u_xlat65 = ((x_1451 * x_1453) + x_1455);
        let x_1458 : vec4<f32> = u_xlat11;
        let x_1459 : vec2<f32> = vec2<f32>(x_1458.z, x_1458.w);
        let x_1461 : f32 = u_xlat2.z;
        txVec26 = vec3<f32>(x_1459.x, x_1459.y, x_1461);
        let x_1468 : vec3<f32> = txVec26;
        let x_1470 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1468.xy, x_1468.z);
        u_xlat45.x = x_1470;
        let x_1473 : f32 = u_xlat7.y;
        let x_1475 : f32 = u_xlat45.x;
        let x_1477 : f32 = u_xlat65;
        u_xlat65 = ((x_1473 * x_1475) + x_1477);
        let x_1480 : vec2<f32> = u_xlat51;
        let x_1482 : f32 = u_xlat2.z;
        txVec27 = vec3<f32>(x_1480.x, x_1480.y, x_1482);
        let x_1489 : vec3<f32> = txVec27;
        let x_1491 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1489.xy, x_1489.z);
        u_xlat45.x = x_1491;
        let x_1494 : f32 = u_xlat7.z;
        let x_1496 : f32 = u_xlat45.x;
        let x_1498 : f32 = u_xlat65;
        u_xlat65 = ((x_1494 * x_1496) + x_1498);
        let x_1501 : vec4<f32> = u_xlat3;
        let x_1502 : vec2<f32> = vec2<f32>(x_1501.x, x_1501.y);
        let x_1504 : f32 = u_xlat2.z;
        txVec28 = vec3<f32>(x_1502.x, x_1502.y, x_1504);
        let x_1511 : vec3<f32> = txVec28;
        let x_1513 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1511.xy, x_1511.z);
        u_xlat3.x = x_1513;
        let x_1516 : f32 = u_xlat7.w;
        let x_1518 : f32 = u_xlat3.x;
        let x_1520 : f32 = u_xlat65;
        u_xlat64 = ((x_1516 * x_1518) + x_1520);
      }
    }
  } else {
    let x_1524 : vec3<f32> = u_xlat2;
    let x_1525 : vec2<f32> = vec2<f32>(x_1524.x, x_1524.y);
    let x_1527 : f32 = u_xlat2.z;
    txVec29 = vec3<f32>(x_1525.x, x_1525.y, x_1527);
    let x_1534 : vec3<f32> = txVec29;
    let x_1536 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1534.xy, x_1534.z);
    u_xlat64 = x_1536;
  }
  let x_1538 : f32 = x_248.x_MainLightShadowParams.x;
  u_xlat2.x = (-(x_1538) + 1.0f);
  let x_1542 : f32 = u_xlat64;
  let x_1544 : f32 = x_248.x_MainLightShadowParams.x;
  let x_1547 : f32 = u_xlat2.x;
  u_xlat64 = ((x_1542 * x_1544) + x_1547);
  let x_1551 : f32 = u_xlat2.z;
  u_xlatb23 = (0.0f >= x_1551);
  let x_1555 : f32 = u_xlat2.z;
  u_xlatb44 = (x_1555 >= 1.0f);
  let x_1557 : bool = u_xlatb44;
  let x_1558 : bool = u_xlatb23;
  u_xlatb23 = (x_1557 | x_1558);
  let x_1560 : bool = u_xlatb23;
  let x_1561 : f32 = u_xlat64;
  u_xlat64 = select(x_1561, 1.0f, x_1560);
  let x_1563 : vec3<f32> = u_xlat1;
  let x_1565 : vec4<f32> = x_137.x_MainLightPosition;
  u_xlat1.x = dot(x_1563, -(vec3<f32>(x_1565.x, x_1565.y, x_1565.z)));
  let x_1571 : f32 = u_xlat1.x;
  u_xlat1.x = clamp(x_1571, 0.0f, 1.0f);
  let x_1575 : f32 = u_xlat64;
  let x_1579 : vec4<f32> = x_137.x_MainLightColor;
  u_xlat22 = (vec3<f32>(x_1575, x_1575, x_1575) * vec3<f32>(x_1579.x, x_1579.y, x_1579.z));
  let x_1582 : vec3<f32> = u_xlat22;
  let x_1583 : vec3<f32> = u_xlat1;
  u_xlat1 = (x_1582 * vec3<f32>(x_1583.x, x_1583.x, x_1583.x));
  let x_1586 : vec3<f32> = u_xlat1;
  let x_1587 : vec4<f32> = u_xlat4;
  u_xlat1 = (x_1586 * vec3<f32>(x_1587.x, x_1587.y, x_1587.z));
  let x_1591 : f32 = u_xlat4.w;
  u_xlatb64 = (x_1591 >= 0.400000006f);
  let x_1594 : bool = u_xlatb64;
  if (x_1594) {
    let x_1599 : f32 = u_xlat4.w;
    x_1595 = x_1599;
  } else {
    x_1595 = 0.0f;
  }
  let x_1601 : f32 = x_1595;
  u_xlat64 = x_1601;
  let x_1604 : f32 = u_xlat4.w;
  u_xlat23 = (x_1604 + -0.400000006f);
  let x_1609 : f32 = u_xlat4.w;
  u_xlat44 = dpdxCoarse(x_1609);
  let x_1612 : f32 = u_xlat4.w;
  u_xlat65 = dpdyCoarse(x_1612);
  let x_1614 : f32 = u_xlat65;
  let x_1616 : f32 = u_xlat44;
  u_xlat44 = (abs(x_1614) + abs(x_1616));
  let x_1619 : f32 = u_xlat44;
  u_xlat44 = max(x_1619, 0.0001f);
  let x_1622 : f32 = u_xlat23;
  let x_1623 : f32 = u_xlat44;
  u_xlat23 = (x_1622 / x_1623);
  let x_1625 : f32 = u_xlat23;
  u_xlat23 = (x_1625 + 0.5f);
  let x_1627 : f32 = u_xlat23;
  u_xlat23 = clamp(x_1627, 0.0f, 1.0f);
  let x_1630 : f32 = x_137.x_AlphaToMaskAvailable;
  u_xlatb44 = !((x_1630 == 0.0f));
  let x_1632 : bool = u_xlatb44;
  let x_1633 : f32 = u_xlat23;
  let x_1634 : f32 = u_xlat64;
  u_xlat64 = select(x_1634, x_1633, x_1632);
  let x_1636 : f32 = u_xlat64;
  u_xlat23 = (x_1636 + -0.0001f);
  let x_1639 : f32 = u_xlat23;
  u_xlatb23 = (x_1639 < 0.0f);
  let x_1641 : bool = u_xlatb23;
  if (((select(0i, 1i, x_1641) * -1i) != 0i)) {
    discard;
  }
  let x_1649 : vec3<f32> = u_xlat21;
  let x_1650 : vec3<f32> = u_xlat27;
  u_xlat21 = (x_1649 * vec3<f32>(x_1650.y, x_1650.y, x_1650.y));
  let x_1653 : vec3<f32> = u_xlat27;
  let x_1655 : vec4<f32> = vs_INTERP2;
  let x_1658 : vec3<f32> = u_xlat21;
  u_xlat21 = ((vec3<f32>(x_1653.x, x_1653.x, x_1653.x) * vec3<f32>(x_1655.x, x_1655.y, x_1655.z)) + x_1658);
  let x_1660 : vec3<f32> = u_xlat27;
  let x_1662 : vec3<f32> = vs_INTERP1;
  let x_1664 : vec3<f32> = u_xlat21;
  u_xlat21 = ((vec3<f32>(x_1660.z, x_1660.z, x_1660.z) * x_1662) + x_1664);
  let x_1666 : vec3<f32> = u_xlat21;
  let x_1667 : vec3<f32> = u_xlat21;
  u_xlat23 = dot(x_1666, x_1667);
  let x_1669 : f32 = u_xlat23;
  u_xlat23 = inverseSqrt(x_1669);
  let x_1671 : vec3<f32> = u_xlat21;
  let x_1672 : f32 = u_xlat23;
  let x_1674 : vec3<f32> = (x_1671 * vec3<f32>(x_1672, x_1672, x_1672));
  let x_1675 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_1674.x, x_1674.y, x_1674.z, x_1675.w);
  let x_1678 : f32 = x_137.unity_OrthoParams.w;
  u_xlatb21.x = (x_1678 == 0.0f);
  let x_1681 : vec3<f32> = vs_INTERP0;
  let x_1685 : vec3<f32> = x_137.x_WorldSpaceCameraPos;
  let x_1686 : vec3<f32> = (-(x_1681) + x_1685);
  let x_1687 : vec4<f32> = u_xlat4;
  u_xlat4 = vec4<f32>(x_1686.x, x_1686.y, x_1686.z, x_1687.w);
  let x_1690 : vec4<f32> = u_xlat4;
  let x_1692 : vec4<f32> = u_xlat4;
  u_xlat42 = dot(vec3<f32>(x_1690.x, x_1690.y, x_1690.z), vec3<f32>(x_1692.x, x_1692.y, x_1692.z));
  let x_1695 : f32 = u_xlat42;
  u_xlat42 = inverseSqrt(x_1695);
  let x_1697 : f32 = u_xlat42;
  let x_1699 : vec4<f32> = u_xlat4;
  let x_1701 : vec3<f32> = (vec3<f32>(x_1697, x_1697, x_1697) * vec3<f32>(x_1699.x, x_1699.y, x_1699.z));
  let x_1702 : vec4<f32> = u_xlat4;
  u_xlat4 = vec4<f32>(x_1701.x, x_1701.y, x_1701.z, x_1702.w);
  let x_1706 : f32 = x_137.unity_MatrixV[0i].z;
  u_xlat7.x = x_1706;
  let x_1709 : f32 = x_137.unity_MatrixV[1i].z;
  u_xlat7.y = x_1709;
  let x_1712 : f32 = x_137.unity_MatrixV[2i].z;
  u_xlat7.z = x_1712;
  let x_1715 : bool = u_xlatb21.x;
  if (x_1715) {
    let x_1719 : vec4<f32> = u_xlat4;
    x_1716 = vec3<f32>(x_1719.x, x_1719.y, x_1719.z);
  } else {
    let x_1722 : vec4<f32> = u_xlat7;
    x_1716 = vec3<f32>(x_1722.x, x_1722.y, x_1722.z);
  }
  let x_1724 : vec3<f32> = x_1716;
  u_xlat21 = x_1724;
  let x_1726 : f32 = vs_INTERP0.y;
  let x_1728 : f32 = x_137.unity_MatrixV[1i].z;
  u_xlat23 = (x_1726 * x_1728);
  let x_1731 : f32 = x_137.unity_MatrixV[0i].z;
  let x_1733 : f32 = vs_INTERP0.x;
  let x_1735 : f32 = u_xlat23;
  u_xlat23 = ((x_1731 * x_1733) + x_1735);
  let x_1738 : f32 = x_137.unity_MatrixV[2i].z;
  let x_1740 : f32 = vs_INTERP0.z;
  let x_1742 : f32 = u_xlat23;
  u_xlat23 = ((x_1738 * x_1740) + x_1742);
  let x_1744 : f32 = u_xlat23;
  let x_1746 : f32 = x_137.unity_MatrixV[3i].z;
  u_xlat23 = (x_1744 + x_1746);
  let x_1748 : f32 = u_xlat23;
  let x_1751 : f32 = x_137.x_ProjectionParams.y;
  u_xlat23 = (-(x_1748) + -(x_1751));
  let x_1754 : f32 = u_xlat23;
  u_xlat23 = max(x_1754, 0.0f);
  let x_1756 : f32 = u_xlat23;
  let x_1759 : f32 = x_137.unity_FogParams.x;
  u_xlat23 = (x_1756 * x_1759);
  u_xlat3.w = 1.0f;
  let x_1764 : vec4<f32> = x_60.unity_SHAr;
  let x_1765 : vec4<f32> = u_xlat3;
  u_xlat4.x = dot(x_1764, x_1765);
  let x_1770 : vec4<f32> = x_60.unity_SHAg;
  let x_1771 : vec4<f32> = u_xlat3;
  u_xlat4.y = dot(x_1770, x_1771);
  let x_1776 : vec4<f32> = x_60.unity_SHAb;
  let x_1777 : vec4<f32> = u_xlat3;
  u_xlat4.z = dot(x_1776, x_1777);
  let x_1780 : vec4<f32> = u_xlat3;
  let x_1782 : vec4<f32> = u_xlat3;
  u_xlat7 = (vec4<f32>(x_1780.y, x_1780.z, x_1780.z, x_1780.x) * vec4<f32>(x_1782.x, x_1782.y, x_1782.z, x_1782.z));
  let x_1787 : vec4<f32> = x_60.unity_SHBr;
  let x_1788 : vec4<f32> = u_xlat7;
  u_xlat8.x = dot(x_1787, x_1788);
  let x_1793 : vec4<f32> = x_60.unity_SHBg;
  let x_1794 : vec4<f32> = u_xlat7;
  u_xlat8.y = dot(x_1793, x_1794);
  let x_1799 : vec4<f32> = x_60.unity_SHBb;
  let x_1800 : vec4<f32> = u_xlat7;
  u_xlat8.z = dot(x_1799, x_1800);
  let x_1804 : f32 = u_xlat3.y;
  let x_1806 : f32 = u_xlat3.y;
  u_xlat65 = (x_1804 * x_1806);
  let x_1809 : f32 = u_xlat3.x;
  let x_1811 : f32 = u_xlat3.x;
  let x_1813 : f32 = u_xlat65;
  u_xlat65 = ((x_1809 * x_1811) + -(x_1813));
  let x_1818 : vec4<f32> = x_60.unity_SHC;
  let x_1820 : f32 = u_xlat65;
  let x_1823 : vec4<f32> = u_xlat8;
  u_xlat27 = ((vec3<f32>(x_1818.x, x_1818.y, x_1818.z) * vec3<f32>(x_1820, x_1820, x_1820)) + vec3<f32>(x_1823.x, x_1823.y, x_1823.z));
  let x_1826 : vec4<f32> = u_xlat4;
  let x_1828 : vec3<f32> = u_xlat27;
  let x_1829 : vec3<f32> = (vec3<f32>(x_1826.x, x_1826.y, x_1826.z) + x_1828);
  let x_1830 : vec4<f32> = u_xlat4;
  u_xlat4 = vec4<f32>(x_1829.x, x_1829.y, x_1829.z, x_1830.w);
  let x_1832 : vec4<f32> = u_xlat4;
  let x_1835 : vec3<f32> = max(vec3<f32>(x_1832.x, x_1832.y, x_1832.z), vec3<f32>(0.0f, 0.0f, 0.0f));
  let x_1836 : vec4<f32> = u_xlat4;
  u_xlat4 = vec4<f32>(x_1835.x, x_1835.y, x_1835.z, x_1836.w);
  let x_1839 : vec4<f32> = x_137.x_ScaledScreenParams;
  let x_1840 : vec2<f32> = vec2<f32>(x_1839.x, x_1839.y);
  let x_1844 : vec2<f32> = (vec2<f32>(1.0f, 1.0f) / vec2<f32>(x_1840.x, x_1840.y));
  let x_1845 : vec3<f32> = u_xlat27;
  u_xlat27 = vec3<f32>(x_1844.x, x_1844.y, x_1845.z);
  let x_1847 : vec3<f32> = u_xlat27;
  let x_1849 : vec4<f32> = hlslcc_FragCoord;
  let x_1851 : vec2<f32> = (vec2<f32>(x_1847.x, x_1847.y) * vec2<f32>(x_1849.x, x_1849.y));
  let x_1852 : vec4<f32> = u_xlat7;
  u_xlat7 = vec4<f32>(x_1851.x, x_1851.y, x_1852.z, x_1852.w);
  let x_1855 : f32 = u_xlat7.y;
  let x_1858 : f32 = x_137.x_ScaleBiasRt.x;
  let x_1861 : f32 = x_137.x_ScaleBiasRt.y;
  u_xlat65 = ((x_1855 * x_1858) + x_1861);
  let x_1863 : f32 = u_xlat65;
  u_xlat7.z = (-(x_1863) + 1.0f);
  let x_1868 : f32 = u_xlat6.x;
  u_xlat6.x = x_1868;
  let x_1871 : f32 = u_xlat6.x;
  u_xlat6.x = clamp(x_1871, 0.0f, 1.0f);
  let x_1874 : f32 = u_xlat64;
  u_xlat64 = min(x_1874, 1.0f);
  let x_1876 : vec3<f32> = u_xlat5;
  u_xlat5 = (x_1876 * vec3<f32>(0.959999979f, 0.959999979f, 0.959999979f));
  let x_1881 : f32 = u_xlat6.x;
  u_xlat65 = (-(x_1881) + 1.0f);
  let x_1885 : f32 = u_xlat65;
  let x_1886 : f32 = u_xlat65;
  u_xlat66 = (x_1885 * x_1886);
  let x_1888 : f32 = u_xlat66;
  u_xlat66 = max(x_1888, 0.0078125f);
  let x_1892 : f32 = u_xlat66;
  let x_1893 : f32 = u_xlat66;
  u_xlat67 = (x_1892 * x_1893);
  let x_1896 : f32 = u_xlat6.x;
  u_xlat68 = (x_1896 + 0.040000021f);
  let x_1899 : f32 = u_xlat68;
  u_xlat68 = min(x_1899, 1.0f);
  let x_1901 : f32 = u_xlat66;
  u_xlat6.x = ((x_1901 * 4.0f) + 2.0f);
  let x_1911 : vec4<f32> = u_xlat7;
  let x_1914 : f32 = x_137.x_GlobalMipBias.x;
  let x_1915 : vec4<f32> = textureSampleBias(x_ScreenSpaceOcclusionTexture, sampler_ScreenSpaceOcclusionTexture, vec2<f32>(x_1911.x, x_1911.z), x_1914);
  u_xlat27.x = x_1915.x;
  let x_1920 : f32 = u_xlat27.x;
  u_xlat48 = (x_1920 + -1.0f);
  let x_1924 : f32 = x_137.x_AmbientOcclusionParam.w;
  let x_1925 : f32 = u_xlat48;
  u_xlat48 = ((x_1924 * x_1925) + 1.0f);
  let x_1929 : f32 = u_xlat27.x;
  let x_1931 : f32 = vs_INTERP4.w;
  u_xlat27.x = min(x_1929, x_1931);
  let x_1934 : bool = u_xlatb0;
  if (x_1934) {
    let x_1938 : f32 = x_248.x_MainLightShadowParams.y;
    u_xlatb0 = (x_1938 == 1.0f);
    let x_1940 : bool = u_xlatb0;
    if (x_1940) {
      let x_1944 : vec4<f32> = vs_INTERP9;
      let x_1947 : vec4<f32> = x_248.x_MainLightShadowOffset0;
      u_xlat7 = (vec4<f32>(x_1944.x, x_1944.y, x_1944.x, x_1944.y) + x_1947);
      let x_1950 : vec4<f32> = u_xlat7;
      let x_1951 : vec2<f32> = vec2<f32>(x_1950.x, x_1950.y);
      let x_1953 : f32 = vs_INTERP9.z;
      txVec30 = vec3<f32>(x_1951.x, x_1951.y, x_1953);
      let x_1960 : vec3<f32> = txVec30;
      let x_1962 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1960.xy, x_1960.z);
      u_xlat8.x = x_1962;
      let x_1965 : vec4<f32> = u_xlat7;
      let x_1966 : vec2<f32> = vec2<f32>(x_1965.z, x_1965.w);
      let x_1968 : f32 = vs_INTERP9.z;
      txVec31 = vec3<f32>(x_1966.x, x_1966.y, x_1968);
      let x_1975 : vec3<f32> = txVec31;
      let x_1977 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1975.xy, x_1975.z);
      u_xlat8.y = x_1977;
      let x_1979 : vec4<f32> = vs_INTERP9;
      let x_1982 : vec4<f32> = x_248.x_MainLightShadowOffset1;
      u_xlat7 = (vec4<f32>(x_1979.x, x_1979.y, x_1979.x, x_1979.y) + x_1982);
      let x_1985 : vec4<f32> = u_xlat7;
      let x_1986 : vec2<f32> = vec2<f32>(x_1985.x, x_1985.y);
      let x_1988 : f32 = vs_INTERP9.z;
      txVec32 = vec3<f32>(x_1986.x, x_1986.y, x_1988);
      let x_1995 : vec3<f32> = txVec32;
      let x_1997 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_1995.xy, x_1995.z);
      u_xlat8.z = x_1997;
      let x_2000 : vec4<f32> = u_xlat7;
      let x_2001 : vec2<f32> = vec2<f32>(x_2000.z, x_2000.w);
      let x_2003 : f32 = vs_INTERP9.z;
      txVec33 = vec3<f32>(x_2001.x, x_2001.y, x_2003);
      let x_2010 : vec3<f32> = txVec33;
      let x_2012 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2010.xy, x_2010.z);
      u_xlat8.w = x_2012;
      let x_2014 : vec4<f32> = u_xlat8;
      u_xlat0.x = dot(x_2014, vec4<f32>(0.25f, 0.25f, 0.25f, 0.25f));
    } else {
      let x_2020 : f32 = x_248.x_MainLightShadowParams.y;
      u_xlatb69 = (x_2020 == 2.0f);
      let x_2022 : bool = u_xlatb69;
      if (x_2022) {
        let x_2025 : vec4<f32> = vs_INTERP9;
        let x_2028 : vec4<f32> = x_248.x_MainLightShadowmapSize;
        let x_2031 : vec2<f32> = ((vec2<f32>(x_2025.x, x_2025.y) * vec2<f32>(x_2028.z, x_2028.w)) + vec2<f32>(0.5f, 0.5f));
        let x_2032 : vec4<f32> = u_xlat7;
        u_xlat7 = vec4<f32>(x_2031.x, x_2031.y, x_2032.z, x_2032.w);
        let x_2034 : vec4<f32> = u_xlat7;
        let x_2036 : vec2<f32> = floor(vec2<f32>(x_2034.x, x_2034.y));
        let x_2037 : vec4<f32> = u_xlat7;
        u_xlat7 = vec4<f32>(x_2036.x, x_2036.y, x_2037.z, x_2037.w);
        let x_2040 : vec4<f32> = vs_INTERP9;
        let x_2043 : vec4<f32> = x_248.x_MainLightShadowmapSize;
        let x_2046 : vec4<f32> = u_xlat7;
        u_xlat49 = ((vec2<f32>(x_2040.x, x_2040.y) * vec2<f32>(x_2043.z, x_2043.w)) + -(vec2<f32>(x_2046.x, x_2046.y)));
        let x_2050 : vec2<f32> = u_xlat49;
        u_xlat8 = (vec4<f32>(x_2050.x, x_2050.x, x_2050.y, x_2050.y) + vec4<f32>(0.5f, 1.0f, 0.5f, 1.0f));
        let x_2053 : vec4<f32> = u_xlat8;
        let x_2055 : vec4<f32> = u_xlat8;
        u_xlat9 = (vec4<f32>(x_2053.x, x_2053.x, x_2053.z, x_2053.z) * vec4<f32>(x_2055.x, x_2055.x, x_2055.z, x_2055.z));
        let x_2058 : vec4<f32> = u_xlat9;
        let x_2060 : vec2<f32> = (vec2<f32>(x_2058.y, x_2058.w) * vec2<f32>(0.079999998f, 0.079999998f));
        let x_2061 : vec4<f32> = u_xlat8;
        u_xlat8 = vec4<f32>(x_2060.x, x_2061.y, x_2060.y, x_2061.w);
        let x_2063 : vec4<f32> = u_xlat9;
        let x_2066 : vec2<f32> = u_xlat49;
        let x_2068 : vec2<f32> = ((vec2<f32>(x_2063.x, x_2063.z) * vec2<f32>(0.5f, 0.5f)) + -(x_2066));
        let x_2069 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_2068.x, x_2068.y, x_2069.z, x_2069.w);
        let x_2071 : vec2<f32> = u_xlat49;
        u_xlat51 = (-(x_2071) + vec2<f32>(1.0f, 1.0f));
        let x_2074 : vec2<f32> = u_xlat49;
        let x_2075 : vec2<f32> = min(x_2074, vec2<f32>(0.0f, 0.0f));
        let x_2076 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_2075.x, x_2075.y, x_2076.z, x_2076.w);
        let x_2078 : vec4<f32> = u_xlat10;
        let x_2081 : vec4<f32> = u_xlat10;
        let x_2084 : vec2<f32> = u_xlat51;
        let x_2085 : vec2<f32> = ((-(vec2<f32>(x_2078.x, x_2078.y)) * vec2<f32>(x_2081.x, x_2081.y)) + x_2084);
        let x_2086 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_2085.x, x_2085.y, x_2086.z, x_2086.w);
        let x_2088 : vec2<f32> = u_xlat49;
        u_xlat49 = max(x_2088, vec2<f32>(0.0f, 0.0f));
        let x_2090 : vec2<f32> = u_xlat49;
        let x_2092 : vec2<f32> = u_xlat49;
        let x_2094 : vec4<f32> = u_xlat8;
        u_xlat49 = ((-(x_2090) * x_2092) + vec2<f32>(x_2094.y, x_2094.w));
        let x_2097 : vec4<f32> = u_xlat10;
        let x_2099 : vec2<f32> = (vec2<f32>(x_2097.x, x_2097.y) + vec2<f32>(1.0f, 1.0f));
        let x_2100 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_2099.x, x_2099.y, x_2100.z, x_2100.w);
        let x_2102 : vec2<f32> = u_xlat49;
        u_xlat49 = (x_2102 + vec2<f32>(1.0f, 1.0f));
        let x_2104 : vec4<f32> = u_xlat9;
        let x_2106 : vec2<f32> = (vec2<f32>(x_2104.x, x_2104.y) * vec2<f32>(0.159999996f, 0.159999996f));
        let x_2107 : vec4<f32> = u_xlat11;
        u_xlat11 = vec4<f32>(x_2106.x, x_2106.y, x_2107.z, x_2107.w);
        let x_2109 : vec2<f32> = u_xlat51;
        let x_2110 : vec2<f32> = (x_2109 * vec2<f32>(0.159999996f, 0.159999996f));
        let x_2111 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_2110.x, x_2110.y, x_2111.z, x_2111.w);
        let x_2113 : vec4<f32> = u_xlat10;
        let x_2115 : vec2<f32> = (vec2<f32>(x_2113.x, x_2113.y) * vec2<f32>(0.159999996f, 0.159999996f));
        let x_2116 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_2115.x, x_2115.y, x_2116.z, x_2116.w);
        let x_2118 : vec2<f32> = u_xlat49;
        let x_2119 : vec2<f32> = (x_2118 * vec2<f32>(0.159999996f, 0.159999996f));
        let x_2120 : vec4<f32> = u_xlat12;
        u_xlat12 = vec4<f32>(x_2119.x, x_2119.y, x_2120.z, x_2120.w);
        let x_2122 : vec4<f32> = u_xlat8;
        u_xlat49 = (vec2<f32>(x_2122.y, x_2122.w) * vec2<f32>(0.159999996f, 0.159999996f));
        let x_2126 : f32 = u_xlat10.x;
        u_xlat11.z = x_2126;
        let x_2129 : f32 = u_xlat49.x;
        u_xlat11.w = x_2129;
        let x_2132 : f32 = u_xlat12.x;
        u_xlat9.z = x_2132;
        let x_2135 : f32 = u_xlat8.x;
        u_xlat9.w = x_2135;
        let x_2137 : vec4<f32> = u_xlat9;
        let x_2139 : vec4<f32> = u_xlat11;
        u_xlat13 = (vec4<f32>(x_2137.z, x_2137.w, x_2137.x, x_2137.z) + vec4<f32>(x_2139.z, x_2139.w, x_2139.x, x_2139.z));
        let x_2143 : f32 = u_xlat11.y;
        u_xlat10.z = x_2143;
        let x_2146 : f32 = u_xlat49.y;
        u_xlat10.w = x_2146;
        let x_2149 : f32 = u_xlat9.y;
        u_xlat12.z = x_2149;
        let x_2152 : f32 = u_xlat8.z;
        u_xlat12.w = x_2152;
        let x_2154 : vec4<f32> = u_xlat10;
        let x_2156 : vec4<f32> = u_xlat12;
        let x_2158 : vec3<f32> = (vec3<f32>(x_2154.z, x_2154.y, x_2154.w) + vec3<f32>(x_2156.z, x_2156.y, x_2156.w));
        let x_2159 : vec4<f32> = u_xlat8;
        u_xlat8 = vec4<f32>(x_2158.x, x_2158.y, x_2158.z, x_2159.w);
        let x_2161 : vec4<f32> = u_xlat9;
        let x_2163 : vec4<f32> = u_xlat13;
        let x_2165 : vec3<f32> = (vec3<f32>(x_2161.x, x_2161.z, x_2161.w) / vec3<f32>(x_2163.z, x_2163.w, x_2163.y));
        let x_2166 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_2165.x, x_2165.y, x_2165.z, x_2166.w);
        let x_2168 : vec4<f32> = u_xlat9;
        let x_2170 : vec3<f32> = (vec3<f32>(x_2168.x, x_2168.y, x_2168.z) + vec3<f32>(-2.5f, -0.5f, 1.5f));
        let x_2171 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_2170.x, x_2170.y, x_2170.z, x_2171.w);
        let x_2173 : vec4<f32> = u_xlat12;
        let x_2175 : vec4<f32> = u_xlat8;
        let x_2177 : vec3<f32> = (vec3<f32>(x_2173.z, x_2173.y, x_2173.w) / vec3<f32>(x_2175.x, x_2175.y, x_2175.z));
        let x_2178 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_2177.x, x_2177.y, x_2177.z, x_2178.w);
        let x_2180 : vec4<f32> = u_xlat10;
        let x_2182 : vec3<f32> = (vec3<f32>(x_2180.x, x_2180.y, x_2180.z) + vec3<f32>(-2.5f, -0.5f, 1.5f));
        let x_2183 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_2182.x, x_2182.y, x_2182.z, x_2183.w);
        let x_2185 : vec4<f32> = u_xlat9;
        let x_2188 : vec4<f32> = x_248.x_MainLightShadowmapSize;
        let x_2190 : vec3<f32> = (vec3<f32>(x_2185.y, x_2185.x, x_2185.z) * vec3<f32>(x_2188.x, x_2188.x, x_2188.x));
        let x_2191 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_2190.x, x_2190.y, x_2190.z, x_2191.w);
        let x_2193 : vec4<f32> = u_xlat10;
        let x_2196 : vec4<f32> = x_248.x_MainLightShadowmapSize;
        let x_2198 : vec3<f32> = (vec3<f32>(x_2193.x, x_2193.y, x_2193.z) * vec3<f32>(x_2196.y, x_2196.y, x_2196.y));
        let x_2199 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_2198.x, x_2198.y, x_2198.z, x_2199.w);
        let x_2202 : f32 = u_xlat10.x;
        u_xlat9.w = x_2202;
        let x_2204 : vec4<f32> = u_xlat7;
        let x_2207 : vec4<f32> = x_248.x_MainLightShadowmapSize;
        let x_2210 : vec4<f32> = u_xlat9;
        u_xlat11 = ((vec4<f32>(x_2204.x, x_2204.y, x_2204.x, x_2204.y) * vec4<f32>(x_2207.x, x_2207.y, x_2207.x, x_2207.y)) + vec4<f32>(x_2210.y, x_2210.w, x_2210.x, x_2210.w));
        let x_2213 : vec4<f32> = u_xlat7;
        let x_2216 : vec4<f32> = x_248.x_MainLightShadowmapSize;
        let x_2219 : vec4<f32> = u_xlat9;
        u_xlat49 = ((vec2<f32>(x_2213.x, x_2213.y) * vec2<f32>(x_2216.x, x_2216.y)) + vec2<f32>(x_2219.z, x_2219.w));
        let x_2223 : f32 = u_xlat9.y;
        u_xlat10.w = x_2223;
        let x_2225 : vec4<f32> = u_xlat10;
        let x_2226 : vec2<f32> = vec2<f32>(x_2225.y, x_2225.z);
        let x_2227 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_2227.x, x_2226.x, x_2227.z, x_2226.y);
        let x_2229 : vec4<f32> = u_xlat7;
        let x_2232 : vec4<f32> = x_248.x_MainLightShadowmapSize;
        let x_2235 : vec4<f32> = u_xlat9;
        u_xlat12 = ((vec4<f32>(x_2229.x, x_2229.y, x_2229.x, x_2229.y) * vec4<f32>(x_2232.x, x_2232.y, x_2232.x, x_2232.y)) + vec4<f32>(x_2235.x, x_2235.y, x_2235.z, x_2235.y));
        let x_2238 : vec4<f32> = u_xlat7;
        let x_2241 : vec4<f32> = x_248.x_MainLightShadowmapSize;
        let x_2244 : vec4<f32> = u_xlat10;
        u_xlat10 = ((vec4<f32>(x_2238.x, x_2238.y, x_2238.x, x_2238.y) * vec4<f32>(x_2241.x, x_2241.y, x_2241.x, x_2241.y)) + vec4<f32>(x_2244.w, x_2244.y, x_2244.w, x_2244.z));
        let x_2247 : vec4<f32> = u_xlat7;
        let x_2250 : vec4<f32> = x_248.x_MainLightShadowmapSize;
        let x_2253 : vec4<f32> = u_xlat9;
        u_xlat9 = ((vec4<f32>(x_2247.x, x_2247.y, x_2247.x, x_2247.y) * vec4<f32>(x_2250.x, x_2250.y, x_2250.x, x_2250.y)) + vec4<f32>(x_2253.x, x_2253.w, x_2253.z, x_2253.w));
        let x_2256 : vec4<f32> = u_xlat8;
        let x_2258 : vec4<f32> = u_xlat13;
        u_xlat14 = (vec4<f32>(x_2256.x, x_2256.x, x_2256.x, x_2256.y) * vec4<f32>(x_2258.z, x_2258.w, x_2258.y, x_2258.z));
        let x_2261 : vec4<f32> = u_xlat8;
        let x_2263 : vec4<f32> = u_xlat13;
        u_xlat15 = (vec4<f32>(x_2261.y, x_2261.y, x_2261.z, x_2261.z) * x_2263);
        let x_2267 : f32 = u_xlat8.z;
        let x_2269 : f32 = u_xlat13.y;
        u_xlat69 = (x_2267 * x_2269);
        let x_2272 : vec4<f32> = u_xlat11;
        let x_2273 : vec2<f32> = vec2<f32>(x_2272.x, x_2272.y);
        let x_2275 : f32 = vs_INTERP9.z;
        txVec34 = vec3<f32>(x_2273.x, x_2273.y, x_2275);
        let x_2282 : vec3<f32> = txVec34;
        let x_2284 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2282.xy, x_2282.z);
        u_xlat7.x = x_2284;
        let x_2287 : vec4<f32> = u_xlat11;
        let x_2288 : vec2<f32> = vec2<f32>(x_2287.z, x_2287.w);
        let x_2290 : f32 = vs_INTERP9.z;
        txVec35 = vec3<f32>(x_2288.x, x_2288.y, x_2290);
        let x_2297 : vec3<f32> = txVec35;
        let x_2299 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2297.xy, x_2297.z);
        u_xlat28.x = x_2299;
        let x_2302 : f32 = u_xlat28.x;
        let x_2304 : f32 = u_xlat14.y;
        u_xlat28.x = (x_2302 * x_2304);
        let x_2308 : f32 = u_xlat14.x;
        let x_2310 : f32 = u_xlat7.x;
        let x_2313 : f32 = u_xlat28.x;
        u_xlat7.x = ((x_2308 * x_2310) + x_2313);
        let x_2317 : vec2<f32> = u_xlat49;
        let x_2319 : f32 = vs_INTERP9.z;
        txVec36 = vec3<f32>(x_2317.x, x_2317.y, x_2319);
        let x_2326 : vec3<f32> = txVec36;
        let x_2328 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2326.xy, x_2326.z);
        u_xlat28.x = x_2328;
        let x_2331 : f32 = u_xlat14.z;
        let x_2333 : f32 = u_xlat28.x;
        let x_2336 : f32 = u_xlat7.x;
        u_xlat7.x = ((x_2331 * x_2333) + x_2336);
        let x_2340 : vec4<f32> = u_xlat10;
        let x_2341 : vec2<f32> = vec2<f32>(x_2340.x, x_2340.y);
        let x_2343 : f32 = vs_INTERP9.z;
        txVec37 = vec3<f32>(x_2341.x, x_2341.y, x_2343);
        let x_2350 : vec3<f32> = txVec37;
        let x_2352 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2350.xy, x_2350.z);
        u_xlat28.x = x_2352;
        let x_2355 : f32 = u_xlat14.w;
        let x_2357 : f32 = u_xlat28.x;
        let x_2360 : f32 = u_xlat7.x;
        u_xlat7.x = ((x_2355 * x_2357) + x_2360);
        let x_2364 : vec4<f32> = u_xlat12;
        let x_2365 : vec2<f32> = vec2<f32>(x_2364.x, x_2364.y);
        let x_2367 : f32 = vs_INTERP9.z;
        txVec38 = vec3<f32>(x_2365.x, x_2365.y, x_2367);
        let x_2374 : vec3<f32> = txVec38;
        let x_2376 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2374.xy, x_2374.z);
        u_xlat28.x = x_2376;
        let x_2379 : f32 = u_xlat15.x;
        let x_2381 : f32 = u_xlat28.x;
        let x_2384 : f32 = u_xlat7.x;
        u_xlat7.x = ((x_2379 * x_2381) + x_2384);
        let x_2388 : vec4<f32> = u_xlat12;
        let x_2389 : vec2<f32> = vec2<f32>(x_2388.z, x_2388.w);
        let x_2391 : f32 = vs_INTERP9.z;
        txVec39 = vec3<f32>(x_2389.x, x_2389.y, x_2391);
        let x_2398 : vec3<f32> = txVec39;
        let x_2400 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2398.xy, x_2398.z);
        u_xlat28.x = x_2400;
        let x_2403 : f32 = u_xlat15.y;
        let x_2405 : f32 = u_xlat28.x;
        let x_2408 : f32 = u_xlat7.x;
        u_xlat7.x = ((x_2403 * x_2405) + x_2408);
        let x_2412 : vec4<f32> = u_xlat10;
        let x_2413 : vec2<f32> = vec2<f32>(x_2412.z, x_2412.w);
        let x_2415 : f32 = vs_INTERP9.z;
        txVec40 = vec3<f32>(x_2413.x, x_2413.y, x_2415);
        let x_2422 : vec3<f32> = txVec40;
        let x_2424 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2422.xy, x_2422.z);
        u_xlat28.x = x_2424;
        let x_2427 : f32 = u_xlat15.z;
        let x_2429 : f32 = u_xlat28.x;
        let x_2432 : f32 = u_xlat7.x;
        u_xlat7.x = ((x_2427 * x_2429) + x_2432);
        let x_2436 : vec4<f32> = u_xlat9;
        let x_2437 : vec2<f32> = vec2<f32>(x_2436.x, x_2436.y);
        let x_2439 : f32 = vs_INTERP9.z;
        txVec41 = vec3<f32>(x_2437.x, x_2437.y, x_2439);
        let x_2446 : vec3<f32> = txVec41;
        let x_2448 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2446.xy, x_2446.z);
        u_xlat28.x = x_2448;
        let x_2451 : f32 = u_xlat15.w;
        let x_2453 : f32 = u_xlat28.x;
        let x_2456 : f32 = u_xlat7.x;
        u_xlat7.x = ((x_2451 * x_2453) + x_2456);
        let x_2460 : vec4<f32> = u_xlat9;
        let x_2461 : vec2<f32> = vec2<f32>(x_2460.z, x_2460.w);
        let x_2463 : f32 = vs_INTERP9.z;
        txVec42 = vec3<f32>(x_2461.x, x_2461.y, x_2463);
        let x_2470 : vec3<f32> = txVec42;
        let x_2472 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2470.xy, x_2470.z);
        u_xlat28.x = x_2472;
        let x_2474 : f32 = u_xlat69;
        let x_2476 : f32 = u_xlat28.x;
        let x_2479 : f32 = u_xlat7.x;
        u_xlat0.x = ((x_2474 * x_2476) + x_2479);
      } else {
        let x_2483 : vec4<f32> = vs_INTERP9;
        let x_2486 : vec4<f32> = x_248.x_MainLightShadowmapSize;
        let x_2489 : vec2<f32> = ((vec2<f32>(x_2483.x, x_2483.y) * vec2<f32>(x_2486.z, x_2486.w)) + vec2<f32>(0.5f, 0.5f));
        let x_2490 : vec4<f32> = u_xlat7;
        u_xlat7 = vec4<f32>(x_2489.x, x_2489.y, x_2490.z, x_2490.w);
        let x_2492 : vec4<f32> = u_xlat7;
        let x_2494 : vec2<f32> = floor(vec2<f32>(x_2492.x, x_2492.y));
        let x_2495 : vec4<f32> = u_xlat7;
        u_xlat7 = vec4<f32>(x_2494.x, x_2494.y, x_2495.z, x_2495.w);
        let x_2497 : vec4<f32> = vs_INTERP9;
        let x_2500 : vec4<f32> = x_248.x_MainLightShadowmapSize;
        let x_2503 : vec4<f32> = u_xlat7;
        u_xlat49 = ((vec2<f32>(x_2497.x, x_2497.y) * vec2<f32>(x_2500.z, x_2500.w)) + -(vec2<f32>(x_2503.x, x_2503.y)));
        let x_2507 : vec2<f32> = u_xlat49;
        u_xlat8 = (vec4<f32>(x_2507.x, x_2507.x, x_2507.y, x_2507.y) + vec4<f32>(0.5f, 1.0f, 0.5f, 1.0f));
        let x_2510 : vec4<f32> = u_xlat8;
        let x_2512 : vec4<f32> = u_xlat8;
        u_xlat9 = (vec4<f32>(x_2510.x, x_2510.x, x_2510.z, x_2510.z) * vec4<f32>(x_2512.x, x_2512.x, x_2512.z, x_2512.z));
        let x_2515 : vec4<f32> = u_xlat9;
        let x_2517 : vec2<f32> = (vec2<f32>(x_2515.y, x_2515.w) * vec2<f32>(0.040816002f, 0.040816002f));
        let x_2518 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_2518.x, x_2517.x, x_2518.z, x_2517.y);
        let x_2520 : vec4<f32> = u_xlat9;
        let x_2523 : vec2<f32> = u_xlat49;
        let x_2525 : vec2<f32> = ((vec2<f32>(x_2520.x, x_2520.z) * vec2<f32>(0.5f, 0.5f)) + -(x_2523));
        let x_2526 : vec4<f32> = u_xlat8;
        u_xlat8 = vec4<f32>(x_2525.x, x_2526.y, x_2525.y, x_2526.w);
        let x_2528 : vec2<f32> = u_xlat49;
        let x_2530 : vec2<f32> = (-(x_2528) + vec2<f32>(1.0f, 1.0f));
        let x_2531 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_2530.x, x_2530.y, x_2531.z, x_2531.w);
        let x_2533 : vec2<f32> = u_xlat49;
        u_xlat51 = min(x_2533, vec2<f32>(0.0f, 0.0f));
        let x_2535 : vec2<f32> = u_xlat51;
        let x_2537 : vec2<f32> = u_xlat51;
        let x_2539 : vec4<f32> = u_xlat9;
        let x_2541 : vec2<f32> = ((-(x_2535) * x_2537) + vec2<f32>(x_2539.x, x_2539.y));
        let x_2542 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_2541.x, x_2541.y, x_2542.z, x_2542.w);
        let x_2544 : vec2<f32> = u_xlat49;
        u_xlat51 = max(x_2544, vec2<f32>(0.0f, 0.0f));
        let x_2546 : vec2<f32> = u_xlat51;
        let x_2548 : vec2<f32> = u_xlat51;
        let x_2550 : vec4<f32> = u_xlat8;
        let x_2552 : vec2<f32> = ((-(x_2546) * x_2548) + vec2<f32>(x_2550.y, x_2550.w));
        let x_2553 : vec3<f32> = u_xlat29;
        u_xlat29 = vec3<f32>(x_2552.x, x_2553.y, x_2552.y);
        let x_2555 : vec4<f32> = u_xlat9;
        let x_2557 : vec2<f32> = (vec2<f32>(x_2555.x, x_2555.y) + vec2<f32>(2.0f, 2.0f));
        let x_2558 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_2557.x, x_2557.y, x_2558.z, x_2558.w);
        let x_2560 : vec3<f32> = u_xlat29;
        let x_2562 : vec2<f32> = (vec2<f32>(x_2560.x, x_2560.z) + vec2<f32>(2.0f, 2.0f));
        let x_2563 : vec4<f32> = u_xlat8;
        u_xlat8 = vec4<f32>(x_2563.x, x_2562.x, x_2563.z, x_2562.y);
        let x_2566 : f32 = u_xlat8.y;
        u_xlat11.z = (x_2566 * 0.081632003f);
        let x_2569 : vec4<f32> = u_xlat8;
        let x_2571 : vec3<f32> = (vec3<f32>(x_2569.z, x_2569.x, x_2569.w) * vec3<f32>(0.081632003f, 0.081632003f, 0.081632003f));
        let x_2572 : vec4<f32> = u_xlat12;
        u_xlat12 = vec4<f32>(x_2571.x, x_2571.y, x_2571.z, x_2572.w);
        let x_2574 : vec4<f32> = u_xlat9;
        let x_2576 : vec2<f32> = (vec2<f32>(x_2574.x, x_2574.y) * vec2<f32>(0.081632003f, 0.081632003f));
        let x_2577 : vec4<f32> = u_xlat8;
        u_xlat8 = vec4<f32>(x_2576.x, x_2576.y, x_2577.z, x_2577.w);
        let x_2580 : f32 = u_xlat12.y;
        u_xlat11.x = x_2580;
        let x_2582 : vec2<f32> = u_xlat49;
        let x_2585 : vec2<f32> = ((vec2<f32>(x_2582.x, x_2582.x) * vec2<f32>(-0.081632003f, 0.081632003f)) + vec2<f32>(0.163264006f, 0.081632003f));
        let x_2586 : vec4<f32> = u_xlat11;
        u_xlat11 = vec4<f32>(x_2586.x, x_2585.x, x_2586.z, x_2585.y);
        let x_2588 : vec2<f32> = u_xlat49;
        let x_2591 : vec2<f32> = ((vec2<f32>(x_2588.x, x_2588.x) * vec2<f32>(-0.081632003f, 0.081632003f)) + vec2<f32>(0.081632003f, 0.163264006f));
        let x_2592 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_2591.x, x_2592.y, x_2591.y, x_2592.w);
        let x_2595 : f32 = u_xlat8.x;
        u_xlat9.y = x_2595;
        let x_2598 : f32 = u_xlat10.y;
        u_xlat9.w = x_2598;
        let x_2600 : vec4<f32> = u_xlat9;
        let x_2601 : vec4<f32> = u_xlat11;
        u_xlat11 = (x_2600 + x_2601);
        let x_2603 : vec2<f32> = u_xlat49;
        let x_2606 : vec2<f32> = ((vec2<f32>(x_2603.y, x_2603.y) * vec2<f32>(-0.081632003f, 0.081632003f)) + vec2<f32>(0.163264006f, 0.081632003f));
        let x_2607 : vec4<f32> = u_xlat12;
        u_xlat12 = vec4<f32>(x_2607.x, x_2606.x, x_2607.z, x_2606.y);
        let x_2609 : vec2<f32> = u_xlat49;
        let x_2612 : vec2<f32> = ((vec2<f32>(x_2609.y, x_2609.y) * vec2<f32>(-0.081632003f, 0.081632003f)) + vec2<f32>(0.081632003f, 0.163264006f));
        let x_2613 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_2612.x, x_2613.y, x_2612.y, x_2613.w);
        let x_2616 : f32 = u_xlat8.y;
        u_xlat10.y = x_2616;
        let x_2618 : vec4<f32> = u_xlat10;
        let x_2619 : vec4<f32> = u_xlat12;
        u_xlat8 = (x_2618 + x_2619);
        let x_2621 : vec4<f32> = u_xlat9;
        let x_2622 : vec4<f32> = u_xlat11;
        u_xlat9 = (x_2621 / x_2622);
        let x_2624 : vec4<f32> = u_xlat9;
        u_xlat9 = (x_2624 + vec4<f32>(-3.5f, -1.5f, 0.5f, 2.5f));
        let x_2626 : vec4<f32> = u_xlat10;
        let x_2627 : vec4<f32> = u_xlat8;
        u_xlat10 = (x_2626 / x_2627);
        let x_2629 : vec4<f32> = u_xlat10;
        u_xlat10 = (x_2629 + vec4<f32>(-3.5f, -1.5f, 0.5f, 2.5f));
        let x_2631 : vec4<f32> = u_xlat9;
        let x_2634 : vec4<f32> = x_248.x_MainLightShadowmapSize;
        u_xlat9 = (vec4<f32>(x_2631.w, x_2631.x, x_2631.y, x_2631.z) * vec4<f32>(x_2634.x, x_2634.x, x_2634.x, x_2634.x));
        let x_2637 : vec4<f32> = u_xlat10;
        let x_2640 : vec4<f32> = x_248.x_MainLightShadowmapSize;
        u_xlat10 = (vec4<f32>(x_2637.x, x_2637.w, x_2637.y, x_2637.z) * vec4<f32>(x_2640.y, x_2640.y, x_2640.y, x_2640.y));
        let x_2643 : vec4<f32> = u_xlat9;
        let x_2644 : vec3<f32> = vec3<f32>(x_2643.y, x_2643.z, x_2643.w);
        let x_2645 : vec4<f32> = u_xlat12;
        u_xlat12 = vec4<f32>(x_2644.x, x_2645.y, x_2644.y, x_2644.z);
        let x_2648 : f32 = u_xlat10.x;
        u_xlat12.y = x_2648;
        let x_2650 : vec4<f32> = u_xlat7;
        let x_2653 : vec4<f32> = x_248.x_MainLightShadowmapSize;
        let x_2656 : vec4<f32> = u_xlat12;
        u_xlat13 = ((vec4<f32>(x_2650.x, x_2650.y, x_2650.x, x_2650.y) * vec4<f32>(x_2653.x, x_2653.y, x_2653.x, x_2653.y)) + vec4<f32>(x_2656.x, x_2656.y, x_2656.z, x_2656.y));
        let x_2659 : vec4<f32> = u_xlat7;
        let x_2662 : vec4<f32> = x_248.x_MainLightShadowmapSize;
        let x_2665 : vec4<f32> = u_xlat12;
        u_xlat49 = ((vec2<f32>(x_2659.x, x_2659.y) * vec2<f32>(x_2662.x, x_2662.y)) + vec2<f32>(x_2665.w, x_2665.y));
        let x_2669 : f32 = u_xlat12.y;
        u_xlat9.y = x_2669;
        let x_2672 : f32 = u_xlat10.z;
        u_xlat12.y = x_2672;
        let x_2674 : vec4<f32> = u_xlat7;
        let x_2677 : vec4<f32> = x_248.x_MainLightShadowmapSize;
        let x_2680 : vec4<f32> = u_xlat12;
        u_xlat14 = ((vec4<f32>(x_2674.x, x_2674.y, x_2674.x, x_2674.y) * vec4<f32>(x_2677.x, x_2677.y, x_2677.x, x_2677.y)) + vec4<f32>(x_2680.x, x_2680.y, x_2680.z, x_2680.y));
        let x_2683 : vec4<f32> = u_xlat7;
        let x_2686 : vec4<f32> = x_248.x_MainLightShadowmapSize;
        let x_2689 : vec4<f32> = u_xlat12;
        let x_2691 : vec2<f32> = ((vec2<f32>(x_2683.x, x_2683.y) * vec2<f32>(x_2686.x, x_2686.y)) + vec2<f32>(x_2689.w, x_2689.y));
        let x_2692 : vec4<f32> = u_xlat15;
        u_xlat15 = vec4<f32>(x_2691.x, x_2691.y, x_2692.z, x_2692.w);
        let x_2695 : f32 = u_xlat12.y;
        u_xlat9.z = x_2695;
        let x_2697 : vec4<f32> = u_xlat7;
        let x_2700 : vec4<f32> = x_248.x_MainLightShadowmapSize;
        let x_2703 : vec4<f32> = u_xlat9;
        u_xlat16 = ((vec4<f32>(x_2697.x, x_2697.y, x_2697.x, x_2697.y) * vec4<f32>(x_2700.x, x_2700.y, x_2700.x, x_2700.y)) + vec4<f32>(x_2703.x, x_2703.y, x_2703.x, x_2703.z));
        let x_2707 : f32 = u_xlat10.w;
        u_xlat12.y = x_2707;
        let x_2709 : vec4<f32> = u_xlat7;
        let x_2712 : vec4<f32> = x_248.x_MainLightShadowmapSize;
        let x_2715 : vec4<f32> = u_xlat12;
        u_xlat17 = ((vec4<f32>(x_2709.x, x_2709.y, x_2709.x, x_2709.y) * vec4<f32>(x_2712.x, x_2712.y, x_2712.x, x_2712.y)) + vec4<f32>(x_2715.x, x_2715.y, x_2715.z, x_2715.y));
        let x_2719 : vec4<f32> = u_xlat7;
        let x_2722 : vec4<f32> = x_248.x_MainLightShadowmapSize;
        let x_2725 : vec4<f32> = u_xlat12;
        let x_2727 : vec2<f32> = ((vec2<f32>(x_2719.x, x_2719.y) * vec2<f32>(x_2722.x, x_2722.y)) + vec2<f32>(x_2725.w, x_2725.y));
        let x_2728 : vec3<f32> = u_xlat30;
        u_xlat30 = vec3<f32>(x_2727.x, x_2727.y, x_2728.z);
        let x_2731 : f32 = u_xlat12.y;
        u_xlat9.w = x_2731;
        let x_2734 : vec4<f32> = u_xlat7;
        let x_2737 : vec4<f32> = x_248.x_MainLightShadowmapSize;
        let x_2740 : vec4<f32> = u_xlat9;
        u_xlat57 = ((vec2<f32>(x_2734.x, x_2734.y) * vec2<f32>(x_2737.x, x_2737.y)) + vec2<f32>(x_2740.x, x_2740.w));
        let x_2743 : vec4<f32> = u_xlat12;
        let x_2744 : vec3<f32> = vec3<f32>(x_2743.x, x_2743.z, x_2743.w);
        let x_2745 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_2744.x, x_2745.y, x_2744.y, x_2744.z);
        let x_2747 : vec4<f32> = u_xlat7;
        let x_2750 : vec4<f32> = x_248.x_MainLightShadowmapSize;
        let x_2753 : vec4<f32> = u_xlat10;
        u_xlat12 = ((vec4<f32>(x_2747.x, x_2747.y, x_2747.x, x_2747.y) * vec4<f32>(x_2750.x, x_2750.y, x_2750.x, x_2750.y)) + vec4<f32>(x_2753.x, x_2753.y, x_2753.z, x_2753.y));
        let x_2757 : vec4<f32> = u_xlat7;
        let x_2760 : vec4<f32> = x_248.x_MainLightShadowmapSize;
        let x_2763 : vec4<f32> = u_xlat10;
        u_xlat52 = ((vec2<f32>(x_2757.x, x_2757.y) * vec2<f32>(x_2760.x, x_2760.y)) + vec2<f32>(x_2763.w, x_2763.y));
        let x_2767 : f32 = u_xlat9.x;
        u_xlat10.x = x_2767;
        let x_2769 : vec4<f32> = u_xlat7;
        let x_2772 : vec4<f32> = x_248.x_MainLightShadowmapSize;
        let x_2775 : vec4<f32> = u_xlat10;
        let x_2777 : vec2<f32> = ((vec2<f32>(x_2769.x, x_2769.y) * vec2<f32>(x_2772.x, x_2772.y)) + vec2<f32>(x_2775.x, x_2775.y));
        let x_2778 : vec4<f32> = u_xlat7;
        u_xlat7 = vec4<f32>(x_2777.x, x_2777.y, x_2778.z, x_2778.w);
        let x_2780 : vec4<f32> = u_xlat8;
        let x_2782 : vec4<f32> = u_xlat11;
        u_xlat18 = (vec4<f32>(x_2780.x, x_2780.x, x_2780.x, x_2780.x) * x_2782);
        let x_2784 : vec4<f32> = u_xlat8;
        let x_2786 : vec4<f32> = u_xlat11;
        u_xlat19 = (vec4<f32>(x_2784.y, x_2784.y, x_2784.y, x_2784.y) * x_2786);
        let x_2789 : vec4<f32> = u_xlat8;
        let x_2791 : vec4<f32> = u_xlat11;
        u_xlat20 = (vec4<f32>(x_2789.z, x_2789.z, x_2789.z, x_2789.z) * x_2791);
        let x_2793 : vec4<f32> = u_xlat8;
        let x_2795 : vec4<f32> = u_xlat11;
        u_xlat8 = (vec4<f32>(x_2793.w, x_2793.w, x_2793.w, x_2793.w) * x_2795);
        let x_2798 : vec4<f32> = u_xlat13;
        let x_2799 : vec2<f32> = vec2<f32>(x_2798.x, x_2798.y);
        let x_2801 : f32 = vs_INTERP9.z;
        txVec43 = vec3<f32>(x_2799.x, x_2799.y, x_2801);
        let x_2808 : vec3<f32> = txVec43;
        let x_2810 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2808.xy, x_2808.z);
        u_xlat69 = x_2810;
        let x_2812 : vec4<f32> = u_xlat13;
        let x_2813 : vec2<f32> = vec2<f32>(x_2812.z, x_2812.w);
        let x_2815 : f32 = vs_INTERP9.z;
        txVec44 = vec3<f32>(x_2813.x, x_2813.y, x_2815);
        let x_2822 : vec3<f32> = txVec44;
        let x_2824 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2822.xy, x_2822.z);
        u_xlat9.x = x_2824;
        let x_2827 : f32 = u_xlat9.x;
        let x_2829 : f32 = u_xlat18.y;
        u_xlat9.x = (x_2827 * x_2829);
        let x_2833 : f32 = u_xlat18.x;
        let x_2834 : f32 = u_xlat69;
        let x_2837 : f32 = u_xlat9.x;
        u_xlat69 = ((x_2833 * x_2834) + x_2837);
        let x_2840 : vec2<f32> = u_xlat49;
        let x_2842 : f32 = vs_INTERP9.z;
        txVec45 = vec3<f32>(x_2840.x, x_2840.y, x_2842);
        let x_2849 : vec3<f32> = txVec45;
        let x_2851 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2849.xy, x_2849.z);
        u_xlat49.x = x_2851;
        let x_2854 : f32 = u_xlat18.z;
        let x_2856 : f32 = u_xlat49.x;
        let x_2858 : f32 = u_xlat69;
        u_xlat69 = ((x_2854 * x_2856) + x_2858);
        let x_2861 : vec4<f32> = u_xlat16;
        let x_2862 : vec2<f32> = vec2<f32>(x_2861.x, x_2861.y);
        let x_2864 : f32 = vs_INTERP9.z;
        txVec46 = vec3<f32>(x_2862.x, x_2862.y, x_2864);
        let x_2871 : vec3<f32> = txVec46;
        let x_2873 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2871.xy, x_2871.z);
        u_xlat49.x = x_2873;
        let x_2876 : f32 = u_xlat18.w;
        let x_2878 : f32 = u_xlat49.x;
        let x_2880 : f32 = u_xlat69;
        u_xlat69 = ((x_2876 * x_2878) + x_2880);
        let x_2883 : vec4<f32> = u_xlat14;
        let x_2884 : vec2<f32> = vec2<f32>(x_2883.x, x_2883.y);
        let x_2886 : f32 = vs_INTERP9.z;
        txVec47 = vec3<f32>(x_2884.x, x_2884.y, x_2886);
        let x_2893 : vec3<f32> = txVec47;
        let x_2895 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2893.xy, x_2893.z);
        u_xlat49.x = x_2895;
        let x_2898 : f32 = u_xlat19.x;
        let x_2900 : f32 = u_xlat49.x;
        let x_2902 : f32 = u_xlat69;
        u_xlat69 = ((x_2898 * x_2900) + x_2902);
        let x_2905 : vec4<f32> = u_xlat14;
        let x_2906 : vec2<f32> = vec2<f32>(x_2905.z, x_2905.w);
        let x_2908 : f32 = vs_INTERP9.z;
        txVec48 = vec3<f32>(x_2906.x, x_2906.y, x_2908);
        let x_2915 : vec3<f32> = txVec48;
        let x_2917 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2915.xy, x_2915.z);
        u_xlat49.x = x_2917;
        let x_2920 : f32 = u_xlat19.y;
        let x_2922 : f32 = u_xlat49.x;
        let x_2924 : f32 = u_xlat69;
        u_xlat69 = ((x_2920 * x_2922) + x_2924);
        let x_2927 : vec4<f32> = u_xlat15;
        let x_2928 : vec2<f32> = vec2<f32>(x_2927.x, x_2927.y);
        let x_2930 : f32 = vs_INTERP9.z;
        txVec49 = vec3<f32>(x_2928.x, x_2928.y, x_2930);
        let x_2937 : vec3<f32> = txVec49;
        let x_2939 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2937.xy, x_2937.z);
        u_xlat49.x = x_2939;
        let x_2942 : f32 = u_xlat19.z;
        let x_2944 : f32 = u_xlat49.x;
        let x_2946 : f32 = u_xlat69;
        u_xlat69 = ((x_2942 * x_2944) + x_2946);
        let x_2949 : vec4<f32> = u_xlat16;
        let x_2950 : vec2<f32> = vec2<f32>(x_2949.z, x_2949.w);
        let x_2952 : f32 = vs_INTERP9.z;
        txVec50 = vec3<f32>(x_2950.x, x_2950.y, x_2952);
        let x_2959 : vec3<f32> = txVec50;
        let x_2961 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2959.xy, x_2959.z);
        u_xlat49.x = x_2961;
        let x_2964 : f32 = u_xlat19.w;
        let x_2966 : f32 = u_xlat49.x;
        let x_2968 : f32 = u_xlat69;
        u_xlat69 = ((x_2964 * x_2966) + x_2968);
        let x_2971 : vec4<f32> = u_xlat17;
        let x_2972 : vec2<f32> = vec2<f32>(x_2971.x, x_2971.y);
        let x_2974 : f32 = vs_INTERP9.z;
        txVec51 = vec3<f32>(x_2972.x, x_2972.y, x_2974);
        let x_2981 : vec3<f32> = txVec51;
        let x_2983 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_2981.xy, x_2981.z);
        u_xlat49.x = x_2983;
        let x_2986 : f32 = u_xlat20.x;
        let x_2988 : f32 = u_xlat49.x;
        let x_2990 : f32 = u_xlat69;
        u_xlat69 = ((x_2986 * x_2988) + x_2990);
        let x_2993 : vec4<f32> = u_xlat17;
        let x_2994 : vec2<f32> = vec2<f32>(x_2993.z, x_2993.w);
        let x_2996 : f32 = vs_INTERP9.z;
        txVec52 = vec3<f32>(x_2994.x, x_2994.y, x_2996);
        let x_3003 : vec3<f32> = txVec52;
        let x_3005 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_3003.xy, x_3003.z);
        u_xlat49.x = x_3005;
        let x_3008 : f32 = u_xlat20.y;
        let x_3010 : f32 = u_xlat49.x;
        let x_3012 : f32 = u_xlat69;
        u_xlat69 = ((x_3008 * x_3010) + x_3012);
        let x_3015 : vec3<f32> = u_xlat30;
        let x_3016 : vec2<f32> = vec2<f32>(x_3015.x, x_3015.y);
        let x_3018 : f32 = vs_INTERP9.z;
        txVec53 = vec3<f32>(x_3016.x, x_3016.y, x_3018);
        let x_3025 : vec3<f32> = txVec53;
        let x_3027 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_3025.xy, x_3025.z);
        u_xlat49.x = x_3027;
        let x_3030 : f32 = u_xlat20.z;
        let x_3032 : f32 = u_xlat49.x;
        let x_3034 : f32 = u_xlat69;
        u_xlat69 = ((x_3030 * x_3032) + x_3034);
        let x_3037 : vec2<f32> = u_xlat57;
        let x_3039 : f32 = vs_INTERP9.z;
        txVec54 = vec3<f32>(x_3037.x, x_3037.y, x_3039);
        let x_3046 : vec3<f32> = txVec54;
        let x_3048 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_3046.xy, x_3046.z);
        u_xlat49.x = x_3048;
        let x_3051 : f32 = u_xlat20.w;
        let x_3053 : f32 = u_xlat49.x;
        let x_3055 : f32 = u_xlat69;
        u_xlat69 = ((x_3051 * x_3053) + x_3055);
        let x_3058 : vec4<f32> = u_xlat12;
        let x_3059 : vec2<f32> = vec2<f32>(x_3058.x, x_3058.y);
        let x_3061 : f32 = vs_INTERP9.z;
        txVec55 = vec3<f32>(x_3059.x, x_3059.y, x_3061);
        let x_3068 : vec3<f32> = txVec55;
        let x_3070 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_3068.xy, x_3068.z);
        u_xlat49.x = x_3070;
        let x_3073 : f32 = u_xlat8.x;
        let x_3075 : f32 = u_xlat49.x;
        let x_3077 : f32 = u_xlat69;
        u_xlat69 = ((x_3073 * x_3075) + x_3077);
        let x_3080 : vec4<f32> = u_xlat12;
        let x_3081 : vec2<f32> = vec2<f32>(x_3080.z, x_3080.w);
        let x_3083 : f32 = vs_INTERP9.z;
        txVec56 = vec3<f32>(x_3081.x, x_3081.y, x_3083);
        let x_3090 : vec3<f32> = txVec56;
        let x_3092 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_3090.xy, x_3090.z);
        u_xlat49.x = x_3092;
        let x_3095 : f32 = u_xlat8.y;
        let x_3097 : f32 = u_xlat49.x;
        let x_3099 : f32 = u_xlat69;
        u_xlat69 = ((x_3095 * x_3097) + x_3099);
        let x_3102 : vec2<f32> = u_xlat52;
        let x_3104 : f32 = vs_INTERP9.z;
        txVec57 = vec3<f32>(x_3102.x, x_3102.y, x_3104);
        let x_3111 : vec3<f32> = txVec57;
        let x_3113 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_3111.xy, x_3111.z);
        u_xlat49.x = x_3113;
        let x_3116 : f32 = u_xlat8.z;
        let x_3118 : f32 = u_xlat49.x;
        let x_3120 : f32 = u_xlat69;
        u_xlat69 = ((x_3116 * x_3118) + x_3120);
        let x_3123 : vec4<f32> = u_xlat7;
        let x_3124 : vec2<f32> = vec2<f32>(x_3123.x, x_3123.y);
        let x_3126 : f32 = vs_INTERP9.z;
        txVec58 = vec3<f32>(x_3124.x, x_3124.y, x_3126);
        let x_3133 : vec3<f32> = txVec58;
        let x_3135 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_3133.xy, x_3133.z);
        u_xlat7.x = x_3135;
        let x_3138 : f32 = u_xlat8.w;
        let x_3140 : f32 = u_xlat7.x;
        let x_3142 : f32 = u_xlat69;
        u_xlat0.x = ((x_3138 * x_3140) + x_3142);
      }
    }
  } else {
    let x_3147 : vec4<f32> = vs_INTERP9;
    let x_3148 : vec2<f32> = vec2<f32>(x_3147.x, x_3147.y);
    let x_3150 : f32 = vs_INTERP9.z;
    txVec59 = vec3<f32>(x_3148.x, x_3148.y, x_3150);
    let x_3157 : vec3<f32> = txVec59;
    let x_3159 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture, x_3157.xy, x_3157.z);
    u_xlat0.x = x_3159;
  }
  let x_3162 : f32 = u_xlat0.x;
  let x_3164 : f32 = x_248.x_MainLightShadowParams.x;
  let x_3167 : f32 = u_xlat2.x;
  u_xlat0.x = ((x_3162 * x_3164) + x_3167);
  let x_3174 : f32 = vs_INTERP9.z;
  u_xlatb2.x = (0.0f >= x_3174);
  let x_3178 : f32 = vs_INTERP9.z;
  u_xlatb69 = (x_3178 >= 1.0f);
  let x_3181 : bool = u_xlatb2.x;
  let x_3182 : bool = u_xlatb69;
  u_xlatb2.x = (x_3181 | x_3182);
  let x_3186 : bool = u_xlatb2.x;
  if (x_3186) {
    x_3187 = 1.0f;
  } else {
    let x_3192 : f32 = u_xlat0.x;
    x_3187 = x_3192;
  }
  let x_3193 : f32 = x_3187;
  u_xlat0.x = x_3193;
  let x_3195 : vec3<f32> = vs_INTERP0;
  let x_3197 : vec3<f32> = x_137.x_WorldSpaceCameraPos;
  let x_3199 : vec3<f32> = (x_3195 + -(x_3197));
  let x_3200 : vec4<f32> = u_xlat7;
  u_xlat7 = vec4<f32>(x_3199.x, x_3199.y, x_3199.z, x_3200.w);
  let x_3202 : vec4<f32> = u_xlat7;
  let x_3204 : vec4<f32> = u_xlat7;
  u_xlat2.x = dot(vec3<f32>(x_3202.x, x_3202.y, x_3202.z), vec3<f32>(x_3204.x, x_3204.y, x_3204.z));
  let x_3209 : f32 = u_xlat2.x;
  let x_3211 : f32 = x_248.x_MainLightShadowParams.z;
  let x_3214 : f32 = x_248.x_MainLightShadowParams.w;
  u_xlat2.x = ((x_3209 * x_3211) + x_3214);
  let x_3218 : f32 = u_xlat2.x;
  u_xlat2.x = clamp(x_3218, 0.0f, 1.0f);
  let x_3222 : f32 = u_xlat0.x;
  u_xlat69 = (-(x_3222) + 1.0f);
  let x_3226 : f32 = u_xlat2.x;
  let x_3227 : f32 = u_xlat69;
  let x_3230 : f32 = u_xlat0.x;
  u_xlat0.x = ((x_3226 * x_3227) + x_3230);
  let x_3239 : f32 = x_3237.x_MainLightCookieTextureFormat;
  u_xlatb2.x = !((x_3239 == -1.0f));
  let x_3243 : bool = u_xlatb2.x;
  if (x_3243) {
    let x_3246 : vec3<f32> = vs_INTERP0;
    let x_3249 : vec4<f32> = x_3237.x_MainLightWorldToLight[1i];
    let x_3251 : vec2<f32> = (vec2<f32>(x_3246.y, x_3246.y) * vec2<f32>(x_3249.x, x_3249.y));
    let x_3252 : vec4<f32> = u_xlat7;
    u_xlat7 = vec4<f32>(x_3251.x, x_3251.y, x_3252.z, x_3252.w);
    let x_3255 : vec4<f32> = x_3237.x_MainLightWorldToLight[0i];
    let x_3257 : vec3<f32> = vs_INTERP0;
    let x_3260 : vec4<f32> = u_xlat7;
    let x_3262 : vec2<f32> = ((vec2<f32>(x_3255.x, x_3255.y) * vec2<f32>(x_3257.x, x_3257.x)) + vec2<f32>(x_3260.x, x_3260.y));
    let x_3263 : vec4<f32> = u_xlat7;
    u_xlat7 = vec4<f32>(x_3262.x, x_3262.y, x_3263.z, x_3263.w);
    let x_3266 : vec4<f32> = x_3237.x_MainLightWorldToLight[2i];
    let x_3268 : vec3<f32> = vs_INTERP0;
    let x_3271 : vec4<f32> = u_xlat7;
    let x_3273 : vec2<f32> = ((vec2<f32>(x_3266.x, x_3266.y) * vec2<f32>(x_3268.z, x_3268.z)) + vec2<f32>(x_3271.x, x_3271.y));
    let x_3274 : vec4<f32> = u_xlat7;
    u_xlat7 = vec4<f32>(x_3273.x, x_3273.y, x_3274.z, x_3274.w);
    let x_3276 : vec4<f32> = u_xlat7;
    let x_3279 : vec4<f32> = x_3237.x_MainLightWorldToLight[3i];
    let x_3281 : vec2<f32> = (vec2<f32>(x_3276.x, x_3276.y) + vec2<f32>(x_3279.x, x_3279.y));
    let x_3282 : vec4<f32> = u_xlat7;
    u_xlat7 = vec4<f32>(x_3281.x, x_3281.y, x_3282.z, x_3282.w);
    let x_3284 : vec4<f32> = u_xlat7;
    let x_3287 : vec2<f32> = ((vec2<f32>(x_3284.x, x_3284.y) * vec2<f32>(0.5f, 0.5f)) + vec2<f32>(0.5f, 0.5f));
    let x_3288 : vec4<f32> = u_xlat7;
    u_xlat7 = vec4<f32>(x_3287.x, x_3287.y, x_3288.z, x_3288.w);
    let x_3295 : vec4<f32> = u_xlat7;
    let x_3298 : f32 = x_137.x_GlobalMipBias.x;
    let x_3299 : vec4<f32> = textureSampleBias(x_MainLightCookieTexture, sampler_MainLightCookieTexture, vec2<f32>(x_3295.x, x_3295.y), x_3298);
    u_xlat7 = x_3299;
    let x_3302 : f32 = x_3237.x_MainLightCookieTextureFormat;
    let x_3304 : f32 = x_3237.x_MainLightCookieTextureFormat;
    let x_3306 : f32 = x_3237.x_MainLightCookieTextureFormat;
    let x_3308 : f32 = x_3237.x_MainLightCookieTextureFormat;
    let x_3309 : vec4<f32> = vec4<f32>(x_3302, x_3304, x_3306, x_3308);
    let x_3316 : vec4<bool> = (vec4<f32>(x_3309.x, x_3309.y, x_3309.z, x_3309.w) == vec4<f32>(0.0f, 1.0f, 0.0f, 0.0f));
    u_xlatb8 = vec2<bool>(x_3316.x, x_3316.y);
    let x_3319 : bool = u_xlatb8.y;
    if (x_3319) {
      let x_3324 : f32 = u_xlat7.w;
      x_3320 = x_3324;
    } else {
      let x_3327 : f32 = u_xlat7.x;
      x_3320 = x_3327;
    }
    let x_3328 : f32 = x_3320;
    u_xlat2.x = x_3328;
    let x_3331 : bool = u_xlatb8.x;
    if (x_3331) {
      let x_3335 : vec4<f32> = u_xlat7;
      x_3332 = vec3<f32>(x_3335.x, x_3335.y, x_3335.z);
    } else {
      let x_3338 : vec3<f32> = u_xlat2;
      x_3332 = vec3<f32>(x_3338.x, x_3338.x, x_3338.x);
    }
    let x_3340 : vec3<f32> = x_3332;
    let x_3341 : vec4<f32> = u_xlat7;
    u_xlat7 = vec4<f32>(x_3340.x, x_3340.y, x_3340.z, x_3341.w);
  } else {
    u_xlat7.x = 1.0f;
    u_xlat7.y = 1.0f;
    u_xlat7.z = 1.0f;
  }
  let x_3347 : vec4<f32> = u_xlat7;
  let x_3350 : vec4<f32> = x_137.x_MainLightColor;
  let x_3352 : vec3<f32> = (vec3<f32>(x_3347.x, x_3347.y, x_3347.z) * vec3<f32>(x_3350.x, x_3350.y, x_3350.z));
  let x_3353 : vec4<f32> = u_xlat7;
  u_xlat7 = vec4<f32>(x_3352.x, x_3352.y, x_3352.z, x_3353.w);
  let x_3355 : f32 = u_xlat48;
  let x_3357 : vec4<f32> = u_xlat7;
  let x_3359 : vec3<f32> = (vec3<f32>(x_3355, x_3355, x_3355) * vec3<f32>(x_3357.x, x_3357.y, x_3357.z));
  let x_3360 : vec4<f32> = u_xlat7;
  u_xlat7 = vec4<f32>(x_3359.x, x_3359.y, x_3359.z, x_3360.w);
  let x_3362 : vec3<f32> = u_xlat21;
  let x_3364 : vec4<f32> = u_xlat3;
  u_xlat2.x = dot(-(x_3362), vec3<f32>(x_3364.x, x_3364.y, x_3364.z));
  let x_3369 : f32 = u_xlat2.x;
  let x_3371 : f32 = u_xlat2.x;
  u_xlat2.x = (x_3369 + x_3371);
  let x_3374 : vec4<f32> = u_xlat3;
  let x_3376 : vec3<f32> = u_xlat2;
  let x_3380 : vec3<f32> = u_xlat21;
  let x_3382 : vec3<f32> = ((vec3<f32>(x_3374.x, x_3374.y, x_3374.z) * -(vec3<f32>(x_3376.x, x_3376.x, x_3376.x))) + -(x_3380));
  let x_3383 : vec4<f32> = u_xlat8;
  u_xlat8 = vec4<f32>(x_3382.x, x_3382.y, x_3382.z, x_3383.w);
  let x_3385 : vec4<f32> = u_xlat3;
  let x_3387 : vec3<f32> = u_xlat21;
  u_xlat2.x = dot(vec3<f32>(x_3385.x, x_3385.y, x_3385.z), x_3387);
  let x_3391 : f32 = u_xlat2.x;
  u_xlat2.x = clamp(x_3391, 0.0f, 1.0f);
  let x_3395 : f32 = u_xlat2.x;
  u_xlat2.x = (-(x_3395) + 1.0f);
  let x_3400 : f32 = u_xlat2.x;
  let x_3402 : f32 = u_xlat2.x;
  u_xlat2.x = (x_3400 * x_3402);
  let x_3406 : f32 = u_xlat2.x;
  let x_3408 : f32 = u_xlat2.x;
  u_xlat2.x = (x_3406 * x_3408);
  let x_3411 : f32 = u_xlat65;
  u_xlat69 = ((-(x_3411) * 0.699999988f) + 1.700000048f);
  let x_3417 : f32 = u_xlat65;
  let x_3418 : f32 = u_xlat69;
  u_xlat65 = (x_3417 * x_3418);
  let x_3420 : f32 = u_xlat65;
  u_xlat65 = (x_3420 * 6.0f);
  let x_3431 : vec4<f32> = u_xlat8;
  let x_3433 : f32 = u_xlat65;
  let x_3434 : vec4<f32> = textureSampleLevel(unity_SpecCube0, samplerunity_SpecCube0, vec3<f32>(x_3431.x, x_3431.y, x_3431.z), x_3433);
  u_xlat8 = x_3434;
  let x_3436 : f32 = u_xlat8.w;
  u_xlat65 = (x_3436 + -1.0f);
  let x_3439 : f32 = x_60.unity_SpecCube0_HDR.w;
  let x_3440 : f32 = u_xlat65;
  u_xlat65 = ((x_3439 * x_3440) + 1.0f);
  let x_3443 : f32 = u_xlat65;
  u_xlat65 = max(x_3443, 0.0f);
  let x_3445 : f32 = u_xlat65;
  u_xlat65 = log2(x_3445);
  let x_3447 : f32 = u_xlat65;
  let x_3449 : f32 = x_60.unity_SpecCube0_HDR.y;
  u_xlat65 = (x_3447 * x_3449);
  let x_3451 : f32 = u_xlat65;
  u_xlat65 = exp2(x_3451);
  let x_3453 : f32 = u_xlat65;
  let x_3455 : f32 = x_60.unity_SpecCube0_HDR.x;
  u_xlat65 = (x_3453 * x_3455);
  let x_3457 : vec4<f32> = u_xlat8;
  let x_3459 : f32 = u_xlat65;
  let x_3461 : vec3<f32> = (vec3<f32>(x_3457.x, x_3457.y, x_3457.z) * vec3<f32>(x_3459, x_3459, x_3459));
  let x_3462 : vec4<f32> = u_xlat8;
  u_xlat8 = vec4<f32>(x_3461.x, x_3461.y, x_3461.z, x_3462.w);
  let x_3464 : f32 = u_xlat66;
  let x_3466 : f32 = u_xlat66;
  let x_3470 : vec2<f32> = ((vec2<f32>(x_3464, x_3464) * vec2<f32>(x_3466, x_3466)) + vec2<f32>(-1.0f, 1.0f));
  let x_3471 : vec4<f32> = u_xlat9;
  u_xlat9 = vec4<f32>(x_3470.x, x_3470.y, x_3471.z, x_3471.w);
  let x_3474 : f32 = u_xlat9.y;
  u_xlat65 = (1.0f / x_3474);
  let x_3476 : f32 = u_xlat68;
  u_xlat66 = (x_3476 + -0.039999999f);
  let x_3480 : f32 = u_xlat2.x;
  let x_3481 : f32 = u_xlat66;
  u_xlat2.x = ((x_3480 * x_3481) + 0.039999999f);
  let x_3487 : f32 = u_xlat2.x;
  let x_3488 : f32 = u_xlat65;
  u_xlat2.x = (x_3487 * x_3488);
  let x_3491 : vec3<f32> = u_xlat2;
  let x_3493 : vec4<f32> = u_xlat8;
  let x_3495 : vec3<f32> = (vec3<f32>(x_3491.x, x_3491.x, x_3491.x) * vec3<f32>(x_3493.x, x_3493.y, x_3493.z));
  let x_3496 : vec4<f32> = u_xlat8;
  u_xlat8 = vec4<f32>(x_3495.x, x_3495.y, x_3495.z, x_3496.w);
  let x_3498 : vec4<f32> = u_xlat4;
  let x_3500 : vec3<f32> = u_xlat5;
  let x_3502 : vec4<f32> = u_xlat8;
  let x_3504 : vec3<f32> = ((vec3<f32>(x_3498.x, x_3498.y, x_3498.z) * x_3500) + vec3<f32>(x_3502.x, x_3502.y, x_3502.z));
  let x_3505 : vec4<f32> = u_xlat4;
  u_xlat4 = vec4<f32>(x_3504.x, x_3504.y, x_3504.z, x_3505.w);
  let x_3508 : f32 = u_xlat0.x;
  let x_3510 : f32 = x_60.unity_LightData.z;
  u_xlat0.x = (x_3508 * x_3510);
  let x_3513 : vec4<f32> = u_xlat3;
  let x_3516 : vec4<f32> = x_137.x_MainLightPosition;
  u_xlat2.x = dot(vec3<f32>(x_3513.x, x_3513.y, x_3513.z), vec3<f32>(x_3516.x, x_3516.y, x_3516.z));
  let x_3521 : f32 = u_xlat2.x;
  u_xlat2.x = clamp(x_3521, 0.0f, 1.0f);
  let x_3525 : f32 = u_xlat0.x;
  let x_3527 : f32 = u_xlat2.x;
  u_xlat0.x = (x_3525 * x_3527);
  let x_3530 : vec3<f32> = u_xlat0;
  let x_3532 : vec4<f32> = u_xlat7;
  let x_3534 : vec3<f32> = (vec3<f32>(x_3530.x, x_3530.x, x_3530.x) * vec3<f32>(x_3532.x, x_3532.y, x_3532.z));
  let x_3535 : vec4<f32> = u_xlat7;
  u_xlat7 = vec4<f32>(x_3534.x, x_3534.y, x_3534.z, x_3535.w);
  let x_3537 : vec3<f32> = u_xlat21;
  let x_3539 : vec4<f32> = x_137.x_MainLightPosition;
  let x_3541 : vec3<f32> = (x_3537 + vec3<f32>(x_3539.x, x_3539.y, x_3539.z));
  let x_3542 : vec4<f32> = u_xlat8;
  u_xlat8 = vec4<f32>(x_3541.x, x_3541.y, x_3541.z, x_3542.w);
  let x_3544 : vec4<f32> = u_xlat8;
  let x_3546 : vec4<f32> = u_xlat8;
  u_xlat0.x = dot(vec3<f32>(x_3544.x, x_3544.y, x_3544.z), vec3<f32>(x_3546.x, x_3546.y, x_3546.z));
  let x_3551 : f32 = u_xlat0.x;
  u_xlat0.x = max(x_3551, 1.17549435e-37f);
  let x_3555 : f32 = u_xlat0.x;
  u_xlat0.x = inverseSqrt(x_3555);
  let x_3558 : vec3<f32> = u_xlat0;
  let x_3560 : vec4<f32> = u_xlat8;
  let x_3562 : vec3<f32> = (vec3<f32>(x_3558.x, x_3558.x, x_3558.x) * vec3<f32>(x_3560.x, x_3560.y, x_3560.z));
  let x_3563 : vec4<f32> = u_xlat8;
  u_xlat8 = vec4<f32>(x_3562.x, x_3562.y, x_3562.z, x_3563.w);
  let x_3565 : vec4<f32> = u_xlat3;
  let x_3567 : vec4<f32> = u_xlat8;
  u_xlat0.x = dot(vec3<f32>(x_3565.x, x_3565.y, x_3565.z), vec3<f32>(x_3567.x, x_3567.y, x_3567.z));
  let x_3572 : f32 = u_xlat0.x;
  u_xlat0.x = clamp(x_3572, 0.0f, 1.0f);
  let x_3576 : vec4<f32> = x_137.x_MainLightPosition;
  let x_3578 : vec4<f32> = u_xlat8;
  u_xlat2.x = dot(vec3<f32>(x_3576.x, x_3576.y, x_3576.z), vec3<f32>(x_3578.x, x_3578.y, x_3578.z));
  let x_3583 : f32 = u_xlat2.x;
  u_xlat2.x = clamp(x_3583, 0.0f, 1.0f);
  let x_3587 : f32 = u_xlat0.x;
  let x_3589 : f32 = u_xlat0.x;
  u_xlat0.x = (x_3587 * x_3589);
  let x_3593 : f32 = u_xlat0.x;
  let x_3595 : f32 = u_xlat9.x;
  u_xlat0.x = ((x_3593 * x_3595) + 1.000010014f);
  let x_3601 : f32 = u_xlat2.x;
  let x_3603 : f32 = u_xlat2.x;
  u_xlat2.x = (x_3601 * x_3603);
  let x_3607 : f32 = u_xlat0.x;
  let x_3609 : f32 = u_xlat0.x;
  u_xlat0.x = (x_3607 * x_3609);
  let x_3613 : f32 = u_xlat2.x;
  u_xlat2.x = max(x_3613, 0.100000001f);
  let x_3618 : f32 = u_xlat0.x;
  let x_3620 : f32 = u_xlat2.x;
  u_xlat0.x = (x_3618 * x_3620);
  let x_3624 : f32 = u_xlat6.x;
  let x_3626 : f32 = u_xlat0.x;
  u_xlat0.x = (x_3624 * x_3626);
  let x_3629 : f32 = u_xlat67;
  let x_3631 : f32 = u_xlat0.x;
  u_xlat0.x = (x_3629 / x_3631);
  let x_3634 : vec3<f32> = u_xlat0;
  let x_3638 : vec3<f32> = u_xlat5;
  let x_3639 : vec3<f32> = ((vec3<f32>(x_3634.x, x_3634.x, x_3634.x) * vec3<f32>(0.039999999f, 0.039999999f, 0.039999999f)) + x_3638);
  let x_3640 : vec4<f32> = u_xlat8;
  u_xlat8 = vec4<f32>(x_3639.x, x_3639.y, x_3639.z, x_3640.w);
  let x_3642 : vec4<f32> = u_xlat7;
  let x_3644 : vec4<f32> = u_xlat8;
  let x_3646 : vec3<f32> = (vec3<f32>(x_3642.x, x_3642.y, x_3642.z) * vec3<f32>(x_3644.x, x_3644.y, x_3644.z));
  let x_3647 : vec4<f32> = u_xlat7;
  u_xlat7 = vec4<f32>(x_3646.x, x_3646.y, x_3646.z, x_3647.w);
  let x_3650 : f32 = x_137.x_AdditionalLightsCount.x;
  let x_3652 : f32 = x_60.unity_LightData.y;
  u_xlat0.x = min(x_3650, x_3652);
  let x_3658 : f32 = u_xlat0.x;
  u_xlatu0 = bitcast<u32>(i32(x_3658));
  let x_3662 : f32 = x_3237.x_AdditionalLightsCookieAtlasTextureFormat;
  let x_3664 : f32 = x_3237.x_AdditionalLightsCookieAtlasTextureFormat;
  let x_3666 : f32 = x_3237.x_AdditionalLightsCookieAtlasTextureFormat;
  let x_3668 : f32 = x_3237.x_AdditionalLightsCookieAtlasTextureFormat;
  let x_3669 : vec4<f32> = vec4<f32>(x_3662, x_3664, x_3666, x_3668);
  let x_3676 : vec4<bool> = (vec4<f32>(x_3669.x, x_3669.y, x_3669.z, x_3669.w) == vec4<f32>(0.0f, 0.0f, 0.0f, 1.0f));
  let x_3677 : vec2<bool> = vec2<bool>(x_3676.x, x_3676.w);
  let x_3678 : vec4<bool> = u_xlatb2;
  u_xlatb2 = vec4<bool>(x_3677.x, x_3678.y, x_3678.z, x_3677.y);
  u_xlat8.x = 0.0f;
  u_xlat8.y = 0.0f;
  u_xlat8.z = 0.0f;
  u_xlatu_loop_1 = 0u;
  loop {
    let x_3689 : u32 = u_xlatu_loop_1;
    let x_3690 : u32 = u_xlatu0;
    if ((x_3689 < x_3690)) {
    } else {
      break;
    }
    let x_3693 : u32 = u_xlatu_loop_1;
    u_xlatu68 = (x_3693 >> 2u);
    let x_3697 : u32 = u_xlatu_loop_1;
    u_xlati69 = bitcast<i32>((x_3697 & 3u));
    let x_3700 : u32 = u_xlatu68;
    let x_3703 : vec4<f32> = x_60.unity_LightIndices[bitcast<i32>(x_3700)];
    let x_3713 : i32 = u_xlati69;
    indexable = array<vec4<u32>, 4u>(vec4<u32>(1065353216u, 0u, 0u, 0u), vec4<u32>(0u, 1065353216u, 0u, 0u), vec4<u32>(0u, 0u, 1065353216u, 0u), vec4<u32>(0u, 0u, 0u, 1065353216u));
    let x_3718 : vec4<u32> = indexable[x_3713];
    u_xlat68 = dot(x_3703, bitcast<vec4<f32>>(x_3718));
    let x_3721 : f32 = u_xlat68;
    u_xlatu68 = bitcast<u32>(i32(x_3721));
    let x_3724 : vec3<f32> = vs_INTERP0;
    let x_3736 : u32 = u_xlatu68;
    let x_3739 : vec4<f32> = x_3735.x_AdditionalLightsPosition[bitcast<i32>(x_3736)];
    let x_3742 : u32 = u_xlatu68;
    let x_3745 : vec4<f32> = x_3735.x_AdditionalLightsPosition[bitcast<i32>(x_3742)];
    u_xlat30 = ((-(x_3724) * vec3<f32>(x_3739.w, x_3739.w, x_3739.w)) + vec3<f32>(x_3745.x, x_3745.y, x_3745.z));
    let x_3748 : vec3<f32> = u_xlat30;
    let x_3749 : vec3<f32> = u_xlat30;
    u_xlat69 = dot(x_3748, x_3749);
    let x_3751 : f32 = u_xlat69;
    u_xlat69 = max(x_3751, 6.10351562e-05f);
    let x_3755 : f32 = u_xlat69;
    u_xlat70 = inverseSqrt(x_3755);
    let x_3757 : f32 = u_xlat70;
    let x_3759 : vec3<f32> = u_xlat30;
    let x_3760 : vec3<f32> = (vec3<f32>(x_3757, x_3757, x_3757) * x_3759);
    let x_3761 : vec4<f32> = u_xlat10;
    u_xlat10 = vec4<f32>(x_3760.x, x_3760.y, x_3760.z, x_3761.w);
    let x_3764 : f32 = u_xlat69;
    u_xlat71 = (1.0f / x_3764);
    let x_3766 : f32 = u_xlat69;
    let x_3767 : u32 = u_xlatu68;
    let x_3770 : f32 = x_3735.x_AdditionalLightsAttenuation[bitcast<i32>(x_3767)].x;
    u_xlat69 = (x_3766 * x_3770);
    let x_3772 : f32 = u_xlat69;
    let x_3774 : f32 = u_xlat69;
    u_xlat69 = ((-(x_3772) * x_3774) + 1.0f);
    let x_3777 : f32 = u_xlat69;
    u_xlat69 = max(x_3777, 0.0f);
    let x_3779 : f32 = u_xlat69;
    let x_3780 : f32 = u_xlat69;
    u_xlat69 = (x_3779 * x_3780);
    let x_3782 : f32 = u_xlat69;
    let x_3783 : f32 = u_xlat71;
    u_xlat69 = (x_3782 * x_3783);
    let x_3785 : u32 = u_xlatu68;
    let x_3788 : vec4<f32> = x_3735.x_AdditionalLightsSpotDir[bitcast<i32>(x_3785)];
    let x_3790 : vec4<f32> = u_xlat10;
    u_xlat71 = dot(vec3<f32>(x_3788.x, x_3788.y, x_3788.z), vec3<f32>(x_3790.x, x_3790.y, x_3790.z));
    let x_3793 : f32 = u_xlat71;
    let x_3794 : u32 = u_xlatu68;
    let x_3797 : f32 = x_3735.x_AdditionalLightsAttenuation[bitcast<i32>(x_3794)].z;
    let x_3799 : u32 = u_xlatu68;
    let x_3802 : f32 = x_3735.x_AdditionalLightsAttenuation[bitcast<i32>(x_3799)].w;
    u_xlat71 = ((x_3793 * x_3797) + x_3802);
    let x_3804 : f32 = u_xlat71;
    u_xlat71 = clamp(x_3804, 0.0f, 1.0f);
    let x_3806 : f32 = u_xlat71;
    let x_3807 : f32 = u_xlat71;
    u_xlat71 = (x_3806 * x_3807);
    let x_3809 : f32 = u_xlat69;
    let x_3810 : f32 = u_xlat71;
    u_xlat69 = (x_3809 * x_3810);
    let x_3813 : u32 = u_xlatu68;
    u_xlatu71 = (x_3813 >> 5u);
    let x_3816 : u32 = u_xlatu68;
    u_xlati73 = (1i << bitcast<u32>((bitcast<i32>(x_3816) & 31i)));
    let x_3822 : i32 = u_xlati73;
    let x_3824 : u32 = u_xlatu71;
    let x_3827 : f32 = x_3237.x_AdditionalLightsCookieEnableBits[bitcast<i32>(x_3824)].el;
    u_xlati71 = bitcast<i32>((bitcast<u32>(x_3822) & bitcast<u32>(x_3827)));
    let x_3831 : i32 = u_xlati71;
    if ((x_3831 != 0i)) {
      let x_3841 : u32 = u_xlatu68;
      let x_3844 : f32 = x_3840.x_AdditionalLightsLightTypes[bitcast<i32>(x_3841)].el;
      u_xlati71 = i32(x_3844);
      let x_3846 : i32 = u_xlati71;
      u_xlati73 = select(1i, 0i, (x_3846 != 0i));
      let x_3850 : u32 = u_xlatu68;
      u_xlati11 = (bitcast<i32>(x_3850) << bitcast<u32>(2i));
      let x_3853 : i32 = u_xlati73;
      if ((x_3853 != 0i)) {
        let x_3858 : vec3<f32> = vs_INTERP0;
        let x_3860 : i32 = u_xlati11;
        let x_3863 : i32 = u_xlati11;
        let x_3867 : vec4<f32> = x_3840.x_AdditionalLightsWorldToLights[((x_3860 + 1i) / 4i)][((x_3863 + 1i) % 4i)];
        u_xlat32 = (vec3<f32>(x_3858.y, x_3858.y, x_3858.y) * vec3<f32>(x_3867.x, x_3867.y, x_3867.w));
        let x_3870 : i32 = u_xlati11;
        let x_3872 : i32 = u_xlati11;
        let x_3875 : vec4<f32> = x_3840.x_AdditionalLightsWorldToLights[(x_3870 / 4i)][(x_3872 % 4i)];
        let x_3877 : vec3<f32> = vs_INTERP0;
        let x_3880 : vec3<f32> = u_xlat32;
        u_xlat32 = ((vec3<f32>(x_3875.x, x_3875.y, x_3875.w) * vec3<f32>(x_3877.x, x_3877.x, x_3877.x)) + x_3880);
        let x_3882 : i32 = u_xlati11;
        let x_3885 : i32 = u_xlati11;
        let x_3889 : vec4<f32> = x_3840.x_AdditionalLightsWorldToLights[((x_3882 + 2i) / 4i)][((x_3885 + 2i) % 4i)];
        let x_3891 : vec3<f32> = vs_INTERP0;
        let x_3894 : vec3<f32> = u_xlat32;
        u_xlat32 = ((vec3<f32>(x_3889.x, x_3889.y, x_3889.w) * vec3<f32>(x_3891.z, x_3891.z, x_3891.z)) + x_3894);
        let x_3896 : vec3<f32> = u_xlat32;
        let x_3897 : i32 = u_xlati11;
        let x_3900 : i32 = u_xlati11;
        let x_3904 : vec4<f32> = x_3840.x_AdditionalLightsWorldToLights[((x_3897 + 3i) / 4i)][((x_3900 + 3i) % 4i)];
        u_xlat32 = (x_3896 + vec3<f32>(x_3904.x, x_3904.y, x_3904.w));
        let x_3907 : vec3<f32> = u_xlat32;
        let x_3909 : vec3<f32> = u_xlat32;
        let x_3911 : vec2<f32> = (vec2<f32>(x_3907.x, x_3907.y) / vec2<f32>(x_3909.z, x_3909.z));
        let x_3912 : vec3<f32> = u_xlat32;
        u_xlat32 = vec3<f32>(x_3911.x, x_3911.y, x_3912.z);
        let x_3914 : vec3<f32> = u_xlat32;
        let x_3917 : vec2<f32> = ((vec2<f32>(x_3914.x, x_3914.y) * vec2<f32>(0.5f, 0.5f)) + vec2<f32>(0.5f, 0.5f));
        let x_3918 : vec3<f32> = u_xlat32;
        u_xlat32 = vec3<f32>(x_3917.x, x_3917.y, x_3918.z);
        let x_3920 : vec3<f32> = u_xlat32;
        let x_3924 : vec2<f32> = clamp(vec2<f32>(x_3920.x, x_3920.y), vec2<f32>(0.0f, 0.0f), vec2<f32>(1.0f, 1.0f));
        let x_3925 : vec3<f32> = u_xlat32;
        u_xlat32 = vec3<f32>(x_3924.x, x_3924.y, x_3925.z);
        let x_3927 : u32 = u_xlatu68;
        let x_3930 : vec4<f32> = x_3840.x_AdditionalLightsCookieAtlasUVRects[bitcast<i32>(x_3927)];
        let x_3932 : vec3<f32> = u_xlat32;
        let x_3935 : u32 = u_xlatu68;
        let x_3938 : vec4<f32> = x_3840.x_AdditionalLightsCookieAtlasUVRects[bitcast<i32>(x_3935)];
        let x_3940 : vec2<f32> = ((vec2<f32>(x_3930.x, x_3930.y) * vec2<f32>(x_3932.x, x_3932.y)) + vec2<f32>(x_3938.z, x_3938.w));
        let x_3941 : vec3<f32> = u_xlat32;
        u_xlat32 = vec3<f32>(x_3940.x, x_3940.y, x_3941.z);
      } else {
        let x_3945 : i32 = u_xlati71;
        u_xlatb71 = (x_3945 == 1i);
        let x_3947 : bool = u_xlatb71;
        u_xlati71 = select(0i, 1i, x_3947);
        let x_3949 : i32 = u_xlati71;
        if ((x_3949 != 0i)) {
          let x_3953 : vec3<f32> = vs_INTERP0;
          let x_3955 : i32 = u_xlati11;
          let x_3958 : i32 = u_xlati11;
          let x_3962 : vec4<f32> = x_3840.x_AdditionalLightsWorldToLights[((x_3955 + 1i) / 4i)][((x_3958 + 1i) % 4i)];
          let x_3964 : vec2<f32> = (vec2<f32>(x_3953.y, x_3953.y) * vec2<f32>(x_3962.x, x_3962.y));
          let x_3965 : vec4<f32> = u_xlat12;
          u_xlat12 = vec4<f32>(x_3964.x, x_3964.y, x_3965.z, x_3965.w);
          let x_3967 : i32 = u_xlati11;
          let x_3969 : i32 = u_xlati11;
          let x_3972 : vec4<f32> = x_3840.x_AdditionalLightsWorldToLights[(x_3967 / 4i)][(x_3969 % 4i)];
          let x_3974 : vec3<f32> = vs_INTERP0;
          let x_3977 : vec4<f32> = u_xlat12;
          let x_3979 : vec2<f32> = ((vec2<f32>(x_3972.x, x_3972.y) * vec2<f32>(x_3974.x, x_3974.x)) + vec2<f32>(x_3977.x, x_3977.y));
          let x_3980 : vec4<f32> = u_xlat12;
          u_xlat12 = vec4<f32>(x_3979.x, x_3979.y, x_3980.z, x_3980.w);
          let x_3982 : i32 = u_xlati11;
          let x_3985 : i32 = u_xlati11;
          let x_3989 : vec4<f32> = x_3840.x_AdditionalLightsWorldToLights[((x_3982 + 2i) / 4i)][((x_3985 + 2i) % 4i)];
          let x_3991 : vec3<f32> = vs_INTERP0;
          let x_3994 : vec4<f32> = u_xlat12;
          let x_3996 : vec2<f32> = ((vec2<f32>(x_3989.x, x_3989.y) * vec2<f32>(x_3991.z, x_3991.z)) + vec2<f32>(x_3994.x, x_3994.y));
          let x_3997 : vec4<f32> = u_xlat12;
          u_xlat12 = vec4<f32>(x_3996.x, x_3996.y, x_3997.z, x_3997.w);
          let x_3999 : vec4<f32> = u_xlat12;
          let x_4001 : i32 = u_xlati11;
          let x_4004 : i32 = u_xlati11;
          let x_4008 : vec4<f32> = x_3840.x_AdditionalLightsWorldToLights[((x_4001 + 3i) / 4i)][((x_4004 + 3i) % 4i)];
          let x_4010 : vec2<f32> = (vec2<f32>(x_3999.x, x_3999.y) + vec2<f32>(x_4008.x, x_4008.y));
          let x_4011 : vec4<f32> = u_xlat12;
          u_xlat12 = vec4<f32>(x_4010.x, x_4010.y, x_4011.z, x_4011.w);
          let x_4013 : vec4<f32> = u_xlat12;
          let x_4016 : vec2<f32> = ((vec2<f32>(x_4013.x, x_4013.y) * vec2<f32>(0.5f, 0.5f)) + vec2<f32>(0.5f, 0.5f));
          let x_4017 : vec4<f32> = u_xlat12;
          u_xlat12 = vec4<f32>(x_4016.x, x_4016.y, x_4017.z, x_4017.w);
          let x_4019 : vec4<f32> = u_xlat12;
          let x_4021 : vec2<f32> = fract(vec2<f32>(x_4019.x, x_4019.y));
          let x_4022 : vec4<f32> = u_xlat12;
          u_xlat12 = vec4<f32>(x_4021.x, x_4021.y, x_4022.z, x_4022.w);
          let x_4024 : u32 = u_xlatu68;
          let x_4027 : vec4<f32> = x_3840.x_AdditionalLightsCookieAtlasUVRects[bitcast<i32>(x_4024)];
          let x_4029 : vec4<f32> = u_xlat12;
          let x_4032 : u32 = u_xlatu68;
          let x_4035 : vec4<f32> = x_3840.x_AdditionalLightsCookieAtlasUVRects[bitcast<i32>(x_4032)];
          let x_4037 : vec2<f32> = ((vec2<f32>(x_4027.x, x_4027.y) * vec2<f32>(x_4029.x, x_4029.y)) + vec2<f32>(x_4035.z, x_4035.w));
          let x_4038 : vec3<f32> = u_xlat32;
          u_xlat32 = vec3<f32>(x_4037.x, x_4037.y, x_4038.z);
        } else {
          let x_4041 : vec3<f32> = vs_INTERP0;
          let x_4043 : i32 = u_xlati11;
          let x_4046 : i32 = u_xlati11;
          let x_4050 : vec4<f32> = x_3840.x_AdditionalLightsWorldToLights[((x_4043 + 1i) / 4i)][((x_4046 + 1i) % 4i)];
          u_xlat12 = (vec4<f32>(x_4041.y, x_4041.y, x_4041.y, x_4041.y) * x_4050);
          let x_4052 : i32 = u_xlati11;
          let x_4054 : i32 = u_xlati11;
          let x_4057 : vec4<f32> = x_3840.x_AdditionalLightsWorldToLights[(x_4052 / 4i)][(x_4054 % 4i)];
          let x_4058 : vec3<f32> = vs_INTERP0;
          let x_4061 : vec4<f32> = u_xlat12;
          u_xlat12 = ((x_4057 * vec4<f32>(x_4058.x, x_4058.x, x_4058.x, x_4058.x)) + x_4061);
          let x_4063 : i32 = u_xlati11;
          let x_4066 : i32 = u_xlati11;
          let x_4070 : vec4<f32> = x_3840.x_AdditionalLightsWorldToLights[((x_4063 + 2i) / 4i)][((x_4066 + 2i) % 4i)];
          let x_4071 : vec3<f32> = vs_INTERP0;
          let x_4074 : vec4<f32> = u_xlat12;
          u_xlat12 = ((x_4070 * vec4<f32>(x_4071.z, x_4071.z, x_4071.z, x_4071.z)) + x_4074);
          let x_4076 : vec4<f32> = u_xlat12;
          let x_4077 : i32 = u_xlati11;
          let x_4080 : i32 = u_xlati11;
          let x_4084 : vec4<f32> = x_3840.x_AdditionalLightsWorldToLights[((x_4077 + 3i) / 4i)][((x_4080 + 3i) % 4i)];
          u_xlat12 = (x_4076 + x_4084);
          let x_4086 : vec4<f32> = u_xlat12;
          let x_4088 : vec4<f32> = u_xlat12;
          let x_4090 : vec3<f32> = (vec3<f32>(x_4086.x, x_4086.y, x_4086.z) / vec3<f32>(x_4088.w, x_4088.w, x_4088.w));
          let x_4091 : vec4<f32> = u_xlat12;
          u_xlat12 = vec4<f32>(x_4090.x, x_4090.y, x_4090.z, x_4091.w);
          let x_4093 : vec4<f32> = u_xlat12;
          let x_4095 : vec4<f32> = u_xlat12;
          u_xlat71 = dot(vec3<f32>(x_4093.x, x_4093.y, x_4093.z), vec3<f32>(x_4095.x, x_4095.y, x_4095.z));
          let x_4098 : f32 = u_xlat71;
          u_xlat71 = inverseSqrt(x_4098);
          let x_4100 : f32 = u_xlat71;
          let x_4102 : vec4<f32> = u_xlat12;
          let x_4104 : vec3<f32> = (vec3<f32>(x_4100, x_4100, x_4100) * vec3<f32>(x_4102.x, x_4102.y, x_4102.z));
          let x_4105 : vec4<f32> = u_xlat12;
          u_xlat12 = vec4<f32>(x_4104.x, x_4104.y, x_4104.z, x_4105.w);
          let x_4107 : vec4<f32> = u_xlat12;
          u_xlat71 = dot(abs(vec3<f32>(x_4107.x, x_4107.y, x_4107.z)), vec3<f32>(1.0f, 1.0f, 1.0f));
          let x_4112 : f32 = u_xlat71;
          u_xlat71 = max(x_4112, 0.000001f);
          let x_4115 : f32 = u_xlat71;
          u_xlat71 = (1.0f / x_4115);
          let x_4117 : f32 = u_xlat71;
          let x_4119 : vec4<f32> = u_xlat12;
          let x_4121 : vec3<f32> = (vec3<f32>(x_4117, x_4117, x_4117) * vec3<f32>(x_4119.z, x_4119.x, x_4119.y));
          let x_4122 : vec4<f32> = u_xlat13;
          u_xlat13 = vec4<f32>(x_4121.x, x_4121.y, x_4121.z, x_4122.w);
          let x_4125 : f32 = u_xlat13.x;
          u_xlat13.x = -(x_4125);
          let x_4129 : f32 = u_xlat13.x;
          u_xlat13.x = clamp(x_4129, 0.0f, 1.0f);
          let x_4133 : vec4<f32> = u_xlat13;
          let x_4136 : vec4<bool> = (vec4<f32>(x_4133.y, x_4133.y, x_4133.y, x_4133.z) >= vec4<f32>(0.0f, 0.0f, 0.0f, 0.0f));
          let x_4137 : vec2<bool> = vec2<bool>(x_4136.x, x_4136.w);
          let x_4138 : vec4<bool> = u_xlatb11;
          u_xlatb11 = vec4<bool>(x_4137.x, x_4138.y, x_4138.z, x_4137.y);
          let x_4141 : bool = u_xlatb11.x;
          if (x_4141) {
            let x_4146 : f32 = u_xlat13.x;
            x_4142 = x_4146;
          } else {
            let x_4149 : f32 = u_xlat13.x;
            x_4142 = -(x_4149);
          }
          let x_4151 : f32 = x_4142;
          u_xlat11.x = x_4151;
          let x_4154 : bool = u_xlatb11.w;
          if (x_4154) {
            let x_4159 : f32 = u_xlat13.x;
            x_4155 = x_4159;
          } else {
            let x_4162 : f32 = u_xlat13.x;
            x_4155 = -(x_4162);
          }
          let x_4164 : f32 = x_4155;
          u_xlat11.w = x_4164;
          let x_4166 : vec4<f32> = u_xlat12;
          let x_4168 : f32 = u_xlat71;
          let x_4171 : vec4<f32> = u_xlat11;
          let x_4173 : vec2<f32> = ((vec2<f32>(x_4166.x, x_4166.y) * vec2<f32>(x_4168, x_4168)) + vec2<f32>(x_4171.x, x_4171.w));
          let x_4174 : vec4<f32> = u_xlat11;
          u_xlat11 = vec4<f32>(x_4173.x, x_4174.y, x_4174.z, x_4173.y);
          let x_4176 : vec4<f32> = u_xlat11;
          let x_4179 : vec2<f32> = ((vec2<f32>(x_4176.x, x_4176.w) * vec2<f32>(0.5f, 0.5f)) + vec2<f32>(0.5f, 0.5f));
          let x_4180 : vec4<f32> = u_xlat11;
          u_xlat11 = vec4<f32>(x_4179.x, x_4180.y, x_4180.z, x_4179.y);
          let x_4182 : vec4<f32> = u_xlat11;
          let x_4186 : vec2<f32> = clamp(vec2<f32>(x_4182.x, x_4182.w), vec2<f32>(0.0f, 0.0f), vec2<f32>(1.0f, 1.0f));
          let x_4187 : vec4<f32> = u_xlat11;
          u_xlat11 = vec4<f32>(x_4186.x, x_4187.y, x_4187.z, x_4186.y);
          let x_4189 : u32 = u_xlatu68;
          let x_4192 : vec4<f32> = x_3840.x_AdditionalLightsCookieAtlasUVRects[bitcast<i32>(x_4189)];
          let x_4194 : vec4<f32> = u_xlat11;
          let x_4197 : u32 = u_xlatu68;
          let x_4200 : vec4<f32> = x_3840.x_AdditionalLightsCookieAtlasUVRects[bitcast<i32>(x_4197)];
          let x_4202 : vec2<f32> = ((vec2<f32>(x_4192.x, x_4192.y) * vec2<f32>(x_4194.x, x_4194.w)) + vec2<f32>(x_4200.z, x_4200.w));
          let x_4203 : vec3<f32> = u_xlat32;
          u_xlat32 = vec3<f32>(x_4202.x, x_4202.y, x_4203.z);
        }
      }
      let x_4210 : vec3<f32> = u_xlat32;
      let x_4213 : f32 = x_137.x_GlobalMipBias.x;
      let x_4214 : vec4<f32> = textureSampleBias(x_AdditionalLightsCookieAtlasTexture, sampler_AdditionalLightsCookieAtlasTexture, vec2<f32>(x_4210.x, x_4210.y), x_4213);
      u_xlat11 = x_4214;
      let x_4216 : bool = u_xlatb2.w;
      if (x_4216) {
        let x_4221 : f32 = u_xlat11.w;
        x_4217 = x_4221;
      } else {
        let x_4224 : f32 = u_xlat11.x;
        x_4217 = x_4224;
      }
      let x_4225 : f32 = x_4217;
      u_xlat71 = x_4225;
      let x_4227 : bool = u_xlatb2.x;
      if (x_4227) {
        let x_4231 : vec4<f32> = u_xlat11;
        x_4228 = vec3<f32>(x_4231.x, x_4231.y, x_4231.z);
      } else {
        let x_4234 : f32 = u_xlat71;
        x_4228 = vec3<f32>(x_4234, x_4234, x_4234);
      }
      let x_4236 : vec3<f32> = x_4228;
      let x_4237 : vec4<f32> = u_xlat11;
      u_xlat11 = vec4<f32>(x_4236.x, x_4236.y, x_4236.z, x_4237.w);
    } else {
      u_xlat11.x = 1.0f;
      u_xlat11.y = 1.0f;
      u_xlat11.z = 1.0f;
    }
    let x_4243 : vec4<f32> = u_xlat11;
    let x_4245 : u32 = u_xlatu68;
    let x_4248 : vec4<f32> = x_3735.x_AdditionalLightsColor[bitcast<i32>(x_4245)];
    let x_4250 : vec3<f32> = (vec3<f32>(x_4243.x, x_4243.y, x_4243.z) * vec3<f32>(x_4248.x, x_4248.y, x_4248.z));
    let x_4251 : vec4<f32> = u_xlat11;
    u_xlat11 = vec4<f32>(x_4250.x, x_4250.y, x_4250.z, x_4251.w);
    let x_4253 : f32 = u_xlat48;
    let x_4255 : vec4<f32> = u_xlat11;
    let x_4257 : vec3<f32> = (vec3<f32>(x_4253, x_4253, x_4253) * vec3<f32>(x_4255.x, x_4255.y, x_4255.z));
    let x_4258 : vec4<f32> = u_xlat11;
    u_xlat11 = vec4<f32>(x_4257.x, x_4257.y, x_4257.z, x_4258.w);
    let x_4260 : vec4<f32> = u_xlat3;
    let x_4262 : vec4<f32> = u_xlat10;
    u_xlat68 = dot(vec3<f32>(x_4260.x, x_4260.y, x_4260.z), vec3<f32>(x_4262.x, x_4262.y, x_4262.z));
    let x_4265 : f32 = u_xlat68;
    u_xlat68 = clamp(x_4265, 0.0f, 1.0f);
    let x_4267 : f32 = u_xlat68;
    let x_4268 : f32 = u_xlat69;
    u_xlat68 = (x_4267 * x_4268);
    let x_4270 : f32 = u_xlat68;
    let x_4272 : vec4<f32> = u_xlat11;
    let x_4274 : vec3<f32> = (vec3<f32>(x_4270, x_4270, x_4270) * vec3<f32>(x_4272.x, x_4272.y, x_4272.z));
    let x_4275 : vec4<f32> = u_xlat11;
    u_xlat11 = vec4<f32>(x_4274.x, x_4274.y, x_4274.z, x_4275.w);
    let x_4277 : vec3<f32> = u_xlat30;
    let x_4278 : f32 = u_xlat70;
    let x_4281 : vec3<f32> = u_xlat21;
    u_xlat30 = ((x_4277 * vec3<f32>(x_4278, x_4278, x_4278)) + x_4281);
    let x_4283 : vec3<f32> = u_xlat30;
    let x_4284 : vec3<f32> = u_xlat30;
    u_xlat68 = dot(x_4283, x_4284);
    let x_4286 : f32 = u_xlat68;
    u_xlat68 = max(x_4286, 1.17549435e-37f);
    let x_4288 : f32 = u_xlat68;
    u_xlat68 = inverseSqrt(x_4288);
    let x_4290 : f32 = u_xlat68;
    let x_4292 : vec3<f32> = u_xlat30;
    u_xlat30 = (vec3<f32>(x_4290, x_4290, x_4290) * x_4292);
    let x_4294 : vec4<f32> = u_xlat3;
    let x_4296 : vec3<f32> = u_xlat30;
    u_xlat68 = dot(vec3<f32>(x_4294.x, x_4294.y, x_4294.z), x_4296);
    let x_4298 : f32 = u_xlat68;
    u_xlat68 = clamp(x_4298, 0.0f, 1.0f);
    let x_4300 : vec4<f32> = u_xlat10;
    let x_4302 : vec3<f32> = u_xlat30;
    u_xlat69 = dot(vec3<f32>(x_4300.x, x_4300.y, x_4300.z), x_4302);
    let x_4304 : f32 = u_xlat69;
    u_xlat69 = clamp(x_4304, 0.0f, 1.0f);
    let x_4306 : f32 = u_xlat68;
    let x_4307 : f32 = u_xlat68;
    u_xlat68 = (x_4306 * x_4307);
    let x_4309 : f32 = u_xlat68;
    let x_4311 : f32 = u_xlat9.x;
    u_xlat68 = ((x_4309 * x_4311) + 1.000010014f);
    let x_4314 : f32 = u_xlat69;
    let x_4315 : f32 = u_xlat69;
    u_xlat69 = (x_4314 * x_4315);
    let x_4317 : f32 = u_xlat68;
    let x_4318 : f32 = u_xlat68;
    u_xlat68 = (x_4317 * x_4318);
    let x_4320 : f32 = u_xlat69;
    u_xlat69 = max(x_4320, 0.100000001f);
    let x_4322 : f32 = u_xlat68;
    let x_4323 : f32 = u_xlat69;
    u_xlat68 = (x_4322 * x_4323);
    let x_4326 : f32 = u_xlat6.x;
    let x_4327 : f32 = u_xlat68;
    u_xlat68 = (x_4326 * x_4327);
    let x_4329 : f32 = u_xlat67;
    let x_4330 : f32 = u_xlat68;
    u_xlat68 = (x_4329 / x_4330);
    let x_4332 : f32 = u_xlat68;
    let x_4335 : vec3<f32> = u_xlat5;
    u_xlat30 = ((vec3<f32>(x_4332, x_4332, x_4332) * vec3<f32>(0.039999999f, 0.039999999f, 0.039999999f)) + x_4335);
    let x_4337 : vec3<f32> = u_xlat30;
    let x_4338 : vec4<f32> = u_xlat11;
    let x_4341 : vec4<f32> = u_xlat8;
    let x_4343 : vec3<f32> = ((x_4337 * vec3<f32>(x_4338.x, x_4338.y, x_4338.z)) + vec3<f32>(x_4341.x, x_4341.y, x_4341.z));
    let x_4344 : vec4<f32> = u_xlat8;
    u_xlat8 = vec4<f32>(x_4343.x, x_4343.y, x_4343.z, x_4344.w);

    continuing {
      let x_4346 : u32 = u_xlatu_loop_1;
      u_xlatu_loop_1 = (x_4346 + bitcast<u32>(1i));
    }
  }
  let x_4348 : vec4<f32> = u_xlat4;
  let x_4350 : vec3<f32> = u_xlat27;
  let x_4353 : vec4<f32> = u_xlat7;
  u_xlat0 = ((vec3<f32>(x_4348.x, x_4348.y, x_4348.z) * vec3<f32>(x_4350.x, x_4350.x, x_4350.x)) + vec3<f32>(x_4353.x, x_4353.y, x_4353.z));
  let x_4356 : vec4<f32> = u_xlat8;
  let x_4358 : vec3<f32> = u_xlat0;
  u_xlat0 = (vec3<f32>(x_4356.x, x_4356.y, x_4356.z) + x_4358);
  let x_4360 : vec4<f32> = vs_INTERP4;
  let x_4362 : vec3<f32> = u_xlat1;
  let x_4364 : vec3<f32> = u_xlat0;
  u_xlat0 = ((vec3<f32>(x_4360.w, x_4360.w, x_4360.w) * x_4362) + x_4364);
  let x_4367 : f32 = u_xlat23;
  let x_4368 : f32 = u_xlat23;
  u_xlat63 = (x_4367 * -(x_4368));
  let x_4371 : f32 = u_xlat63;
  u_xlat63 = exp2(x_4371);
  let x_4373 : vec3<f32> = u_xlat0;
  let x_4376 : vec4<f32> = x_137.unity_FogColor;
  u_xlat0 = (x_4373 + -(vec3<f32>(x_4376.x, x_4376.y, x_4376.z)));
  let x_4382 : f32 = u_xlat63;
  let x_4384 : vec3<f32> = u_xlat0;
  let x_4387 : vec4<f32> = x_137.unity_FogColor;
  let x_4389 : vec3<f32> = ((vec3<f32>(x_4382, x_4382, x_4382) * x_4384) + vec3<f32>(x_4387.x, x_4387.y, x_4387.z));
  let x_4390 : vec4<f32> = SV_Target0;
  SV_Target0 = vec4<f32>(x_4389.x, x_4389.y, x_4389.z, x_4390.w);
  let x_4392 : bool = u_xlatb44;
  let x_4393 : f32 = u_xlat64;
  SV_Target0.w = select(1.0f, x_4393, x_4392);
  return;
}

struct main_out {
  @location(0)
  SV_Target0_1 : vec4<f32>,
}

@fragment
fn main(@builtin(position) gl_FragCoord_param : vec4<f32>, @location(1) vs_INTERP1_param : vec3<f32>, @location(2) vs_INTERP2_param : vec4<f32>, @location(3) vs_INTERP3_param : vec4<f32>, @location(4) vs_INTERP4_param : vec4<f32>, @location(0) vs_INTERP0_param : vec3<f32>, @location(5) vs_INTERP9_param : vec4<f32>) -> main_out {
  gl_FragCoord = gl_FragCoord_param;
  vs_INTERP1 = vs_INTERP1_param;
  vs_INTERP2 = vs_INTERP2_param;
  vs_INTERP3 = vs_INTERP3_param;
  vs_INTERP4 = vs_INTERP4_param;
  vs_INTERP0 = vs_INTERP0_param;
  vs_INTERP9 = vs_INTERP9_param;
  main_1();
  return main_out(SV_Target0);
}

