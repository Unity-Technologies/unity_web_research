diagnostic(off, derivative_uniformity);

alias Arr = array<vec4<f32>, 2u>;

struct UnityPerDraw {
  /* @offset(0) */
  unity_ObjectToWorld : mat4x4<f32>,
  /* @offset(64) */
  unity_WorldToObject : mat4x4<f32>,
  /* @offset(128) */
  unity_LODFade : vec4<f32>,
  /* @offset(144) */
  unity_WorldTransformParams : vec4<f32>,
  /* @offset(160) */
  unity_RenderingLayer : vec4<f32>,
  /* @offset(176) */
  unity_LightData : vec4<f32>,
  /* @offset(192) */
  unity_LightIndices : Arr,
  /* @offset(224) */
  unity_ProbesOcclusion : vec4<f32>,
  /* @offset(240) */
  unity_SpecCube0_HDR : vec4<f32>,
  /* @offset(256) */
  unity_SpecCube1_HDR : vec4<f32>,
  /* @offset(272) */
  unity_SpecCube0_BoxMax : vec4<f32>,
  /* @offset(288) */
  unity_SpecCube0_BoxMin : vec4<f32>,
  /* @offset(304) */
  unity_SpecCube0_ProbePosition : vec4<f32>,
  /* @offset(320) */
  unity_SpecCube1_BoxMax : vec4<f32>,
  /* @offset(336) */
  unity_SpecCube1_BoxMin : vec4<f32>,
  /* @offset(352) */
  unity_SpecCube1_ProbePosition : vec4<f32>,
  /* @offset(368) */
  unity_LightmapST : vec4<f32>,
  /* @offset(384) */
  unity_DynamicLightmapST : vec4<f32>,
  /* @offset(400) */
  unity_SHAr : vec4<f32>,
  /* @offset(416) */
  unity_SHAg : vec4<f32>,
  /* @offset(432) */
  unity_SHAb : vec4<f32>,
  /* @offset(448) */
  unity_SHBr : vec4<f32>,
  /* @offset(464) */
  unity_SHBg : vec4<f32>,
  /* @offset(480) */
  unity_SHBb : vec4<f32>,
  /* @offset(496) */
  unity_SHC : vec4<f32>,
  /* @offset(512) */
  unity_RendererBounds_Min : vec4<f32>,
  /* @offset(528) */
  unity_RendererBounds_Max : vec4<f32>,
  /* @offset(544) */
  unity_MatrixPreviousM : mat4x4<f32>,
  /* @offset(608) */
  unity_MatrixPreviousMI : mat4x4<f32>,
  /* @offset(672) */
  unity_MotionVectorsParams : vec4<f32>,
  /* @offset(688) */
  unity_SpriteColor : vec4<f32>,
  /* @offset(704) */
  unity_SpriteProps : vec4<f32>,
}

struct PGlobals {
  /* @offset(0) */
  x_GlobalMipBias : vec2<f32>,
  /* @offset(8) */
  x_AlphaToMaskAvailable : f32,
  /* @offset(16) */
  x_MainLightPosition : vec4<f32>,
  /* @offset(32) */
  x_MainLightColor : vec4<f32>,
  /* @offset(48) */
  x_AdditionalLightsCount : vec4<f32>,
  /* @offset(64) */
  x_WorldSpaceCameraPos : vec3<f32>,
  /* @offset(80) */
  unity_OrthoParams : vec4<f32>,
  /* @offset(96) */
  unity_MatrixV : mat4x4<f32>,
}

struct UnityPerMaterial {
  /* @offset(0) */
  Texture2D_B222E8F_TexelSize : vec4<f32>,
  /* @offset(16) */
  Color_C30C7CA3 : vec4<f32>,
  /* @offset(32) */
  Texture2D_D9BFD5F1_TexelSize : vec4<f32>,
}

alias Arr_1 = array<mat4x4<f32>, 5u>;

alias Arr_2 = array<vec4<f32>, 32u>;

alias Arr_3 = array<mat4x4<f32>, 32u>;

alias Arr_4 = array<vec4<f32>, 32u>;

struct LightShadows {
  /* @offset(0) */
  x_MainLightWorldToShadow : Arr_1,
  /* @offset(320) */
  x_CascadeShadowSplitSpheres0 : vec4<f32>,
  /* @offset(336) */
  x_CascadeShadowSplitSpheres1 : vec4<f32>,
  /* @offset(352) */
  x_CascadeShadowSplitSpheres2 : vec4<f32>,
  /* @offset(368) */
  x_CascadeShadowSplitSpheres3 : vec4<f32>,
  /* @offset(384) */
  x_CascadeShadowSplitSphereRadii : vec4<f32>,
  /* @offset(400) */
  x_MainLightShadowOffset0 : vec4<f32>,
  /* @offset(416) */
  x_MainLightShadowOffset1 : vec4<f32>,
  /* @offset(432) */
  x_MainLightShadowParams : vec4<f32>,
  /* @offset(448) */
  x_MainLightShadowmapSize : vec4<f32>,
  /* @offset(464) */
  x_AdditionalShadowOffset0 : vec4<f32>,
  /* @offset(480) */
  x_AdditionalShadowOffset1 : vec4<f32>,
  /* @offset(496) */
  x_AdditionalShadowFadeParams : vec4<f32>,
  /* @offset(512) */
  x_AdditionalShadowmapSize : vec4<f32>,
  /* @offset(528) */
  x_AdditionalShadowParams : Arr_4,
  /* @offset(1040) */
  x_AdditionalLightsWorldToShadow : Arr_3,
}

alias Arr_5 = array<vec4<f32>, 32u>;

alias Arr_6 = array<vec4<f32>, 32u>;

alias Arr_7 = array<vec4<f32>, 32u>;

alias Arr_8 = array<vec4<f32>, 32u>;

struct strided_arr {
  @size(16)
  el : f32,
}

alias Arr_9 = array<strided_arr, 32u>;

struct AdditionalLights {
  /* @offset(0) */
  x_AdditionalLightsPosition : Arr_4,
  /* @offset(512) */
  x_AdditionalLightsColor : Arr_4,
  /* @offset(1024) */
  x_AdditionalLightsAttenuation : Arr_4,
  /* @offset(1536) */
  x_AdditionalLightsSpotDir : Arr_4,
  /* @offset(2048) */
  x_AdditionalLightsOcclusionProbes : Arr_4,
  /* @offset(2560) */
  x_AdditionalLightsLayerMasks : Arr_9,
}

var<private> u_xlat0 : vec3<f32>;

var<private> vs_INTERP9 : vec3<f32>;

var<private> u_xlatb26 : vec2<bool>;

var<private> vs_INTERP4 : vec4<f32>;

@group(1) @binding(2) var<uniform> x_48 : UnityPerDraw;

var<private> u_xlat26 : vec3<f32>;

var<private> u_xlat1 : vec3<f32>;

var<private> u_xlat2 : vec4<f32>;

var<private> u_xlat3 : vec4<f32>;

var<private> u_xlat4 : vec4<f32>;

@group(0) @binding(3) var Texture2D_B222E8F : texture_2d<f32>;

@group(0) @binding(7) var samplerTexture2D_B222E8F : sampler;

var<private> vs_INTERP5 : vec4<f32>;

@group(1) @binding(0) var<uniform> x_128 : PGlobals;

var<private> u_xlat5 : vec3<f32>;

@group(1) @binding(4) var<uniform> x_138 : UnityPerMaterial;

var<private> u_xlat6 : vec4<f32>;

@group(0) @binding(4) var Texture2D_D9BFD5F1 : texture_2d<f32>;

@group(0) @binding(8) var samplerTexture2D_D9BFD5F1 : sampler;

var<private> u_xlat7 : vec4<f32>;

var<private> u_xlat32 : vec3<f32>;

var<private> vs_INTERP6 : vec4<f32>;

var<private> vs_INTERP8 : vec3<f32>;

@group(1) @binding(3) var<uniform> x_246 : LightShadows;

var<private> u_xlat8 : vec4<f32>;

var<private> u_xlatb2 : vec4<bool>;

var<private> u_xlatu0 : u32;

var<private> u_xlati0 : i32;

var<private> u_xlatb0 : bool;

var<private> u_xlatb79 : bool;

@group(0) @binding(1) var x_MainLightShadowmapTexture : texture_depth_2d;

@group(0) @binding(6) var sampler_LinearClampCompare : sampler_comparison;

var<private> u_xlat79 : f32;

var<private> u_xlatb80 : bool;

var<private> u_xlat55 : vec2<f32>;

var<private> u_xlat60 : vec2<f32>;

var<private> u_xlat9 : vec4<f32>;

var<private> u_xlat10 : vec4<f32>;

var<private> u_xlat11 : vec4<f32>;

var<private> u_xlat12 : vec4<f32>;

var<private> u_xlat13 : vec4<f32>;

var<private> u_xlat14 : vec4<f32>;

var<private> u_xlat80 : f32;

var<private> u_xlat29 : vec3<f32>;

var<private> u_xlat33 : vec3<f32>;

var<private> u_xlat15 : vec4<f32>;

var<private> u_xlat16 : vec4<f32>;

var<private> u_xlat34 : vec2<f32>;

var<private> u_xlat66 : vec2<f32>;

var<private> u_xlat61 : vec2<f32>;

var<private> u_xlat17 : vec4<f32>;

var<private> u_xlat18 : vec4<f32>;

var<private> u_xlat19 : vec4<f32>;

var<private> u_xlat83 : f32;

var<private> u_xlatb3 : bool;

var<private> u_xlatb29 : bool;

var<private> u_xlat27 : vec3<f32>;

var<private> u_xlat81 : f32;

var<private> u_xlatb55 : bool;

var<private> u_xlat52 : f32;

var<private> u_xlat82 : f32;

var<private> u_xlatb58 : bool;

var<private> u_xlat58 : vec2<f32>;

var<private> u_xlat62 : vec2<f32>;

var<private> u_xlat84 : f32;

var<private> u_xlat85 : f32;

var<private> u_xlat35 : vec2<f32>;

var<private> u_xlat63 : vec2<f32>;

var<private> u_xlat20 : vec4<f32>;

var<private> u_xlat21 : vec4<f32>;

var<private> u_xlat28 : vec3<f32>;

var<private> u_xlat54 : f32;

@group(0) @binding(0) var unity_SpecCube0 : texture_cube<f32>;

@group(0) @binding(5) var samplerunity_SpecCube0 : sampler;

var<private> u_xlatu81 : u32;

var<private> u_xlati83 : i32;

var<private> u_xlati81 : i32;

@group(1) @binding(1) var<uniform> x_3671 : AdditionalLights;

var<private> u_xlati84 : i32;

var<private> u_xlatb85 : bool;

var<private> u_xlatb11 : vec4<bool>;

var<private> u_xlat86 : f32;

var<private> u_xlatb84 : bool;

@group(0) @binding(2) var x_AdditionalLightsShadowmapTexture : texture_depth_2d;

var<private> u_xlat64 : vec2<f32>;

var<private> u_xlat87 : f32;

var<private> u_xlat39 : vec3<f32>;

var<private> u_xlat22 : vec4<f32>;

var<private> u_xlat40 : vec2<f32>;

var<private> u_xlat72 : vec2<f32>;

var<private> u_xlat67 : vec2<f32>;

var<private> u_xlat23 : vec4<f32>;

var<private> u_xlat24 : vec4<f32>;

var<private> u_xlat25 : vec4<f32>;

var<private> u_xlatb86 : bool;

var<private> SV_Target0 : vec4<f32>;

var<private> gl_FragCoord : vec4<f32>;

var<private> u_xlatu3 : u32;

var<private> u_xlatb81 : bool;

fn main_1() {
  var txVec0 : vec3<f32>;
  var txVec1 : vec3<f32>;
  var txVec2 : vec3<f32>;
  var txVec3 : vec3<f32>;
  var txVec4 : vec3<f32>;
  var txVec5 : vec3<f32>;
  var txVec6 : vec3<f32>;
  var txVec7 : vec3<f32>;
  var txVec8 : vec3<f32>;
  var txVec9 : vec3<f32>;
  var txVec10 : vec3<f32>;
  var txVec11 : vec3<f32>;
  var txVec12 : vec3<f32>;
  var txVec13 : vec3<f32>;
  var txVec14 : vec3<f32>;
  var txVec15 : vec3<f32>;
  var txVec16 : vec3<f32>;
  var txVec17 : vec3<f32>;
  var txVec18 : vec3<f32>;
  var txVec19 : vec3<f32>;
  var txVec20 : vec3<f32>;
  var txVec21 : vec3<f32>;
  var txVec22 : vec3<f32>;
  var txVec23 : vec3<f32>;
  var txVec24 : vec3<f32>;
  var txVec25 : vec3<f32>;
  var txVec26 : vec3<f32>;
  var txVec27 : vec3<f32>;
  var txVec28 : vec3<f32>;
  var txVec29 : vec3<f32>;
  var x_1768 : f32;
  var x_1819 : f32;
  var x_1895 : f32;
  var x_1907 : f32;
  var x_1919 : f32;
  var txVec30 : vec3<f32>;
  var txVec31 : vec3<f32>;
  var txVec32 : vec3<f32>;
  var txVec33 : vec3<f32>;
  var txVec34 : vec3<f32>;
  var txVec35 : vec3<f32>;
  var txVec36 : vec3<f32>;
  var txVec37 : vec3<f32>;
  var txVec38 : vec3<f32>;
  var txVec39 : vec3<f32>;
  var txVec40 : vec3<f32>;
  var txVec41 : vec3<f32>;
  var txVec42 : vec3<f32>;
  var txVec43 : vec3<f32>;
  var txVec44 : vec3<f32>;
  var txVec45 : vec3<f32>;
  var txVec46 : vec3<f32>;
  var txVec47 : vec3<f32>;
  var txVec48 : vec3<f32>;
  var txVec49 : vec3<f32>;
  var txVec50 : vec3<f32>;
  var txVec51 : vec3<f32>;
  var txVec52 : vec3<f32>;
  var txVec53 : vec3<f32>;
  var txVec54 : vec3<f32>;
  var txVec55 : vec3<f32>;
  var txVec56 : vec3<f32>;
  var txVec57 : vec3<f32>;
  var txVec58 : vec3<f32>;
  var txVec59 : vec3<f32>;
  var x_3249 : f32;
  var u_xlatu_loop_1 : u32;
  var indexable : array<vec4<u32>, 4u>;
  var x_3807 : f32;
  var x_3816 : f32;
  var txVec60 : vec3<f32>;
  var txVec61 : vec3<f32>;
  var txVec62 : vec3<f32>;
  var txVec63 : vec3<f32>;
  var txVec64 : vec3<f32>;
  var txVec65 : vec3<f32>;
  var txVec66 : vec3<f32>;
  var txVec67 : vec3<f32>;
  var txVec68 : vec3<f32>;
  var txVec69 : vec3<f32>;
  var txVec70 : vec3<f32>;
  var txVec71 : vec3<f32>;
  var txVec72 : vec3<f32>;
  var txVec73 : vec3<f32>;
  var txVec74 : vec3<f32>;
  var txVec75 : vec3<f32>;
  var txVec76 : vec3<f32>;
  var txVec77 : vec3<f32>;
  var txVec78 : vec3<f32>;
  var txVec79 : vec3<f32>;
  var txVec80 : vec3<f32>;
  var txVec81 : vec3<f32>;
  var txVec82 : vec3<f32>;
  var txVec83 : vec3<f32>;
  var txVec84 : vec3<f32>;
  var txVec85 : vec3<f32>;
  var txVec86 : vec3<f32>;
  var txVec87 : vec3<f32>;
  var txVec88 : vec3<f32>;
  var txVec89 : vec3<f32>;
  var u_xlat_precise_vec4 : vec4<f32>;
  var u_xlat_precise_ivec4 : vec4<i32>;
  var u_xlat_precise_bvec4 : vec4<bool>;
  var u_xlat_precise_uvec4 : vec4<u32>;
  let x_12 : vec3<f32> = vs_INTERP9;
  let x_13 : vec3<f32> = vs_INTERP9;
  u_xlat0.x = dot(x_12, x_13);
  let x_20 : f32 = u_xlat0.x;
  u_xlat0.x = sqrt(x_20);
  let x_25 : f32 = u_xlat0.x;
  u_xlat0.x = (1.0f / x_25);
  let x_39 : f32 = vs_INTERP4.w;
  u_xlatb26.x = (0.0f < x_39);
  let x_53 : f32 = x_48.unity_WorldTransformParams.w;
  u_xlatb26.y = (x_53 >= 0.0f);
  let x_59 : bool = u_xlatb26.x;
  u_xlat26.x = select(-1.0f, 1.0f, x_59);
  let x_64 : bool = u_xlatb26.y;
  u_xlat26.y = select(-1.0f, 1.0f, x_64);
  let x_68 : f32 = u_xlat26.y;
  let x_70 : f32 = u_xlat26.x;
  u_xlat26.x = (x_68 * x_70);
  let x_74 : vec4<f32> = vs_INTERP4;
  let x_76 : vec3<f32> = vs_INTERP9;
  u_xlat1 = (vec3<f32>(x_74.y, x_74.z, x_74.x) * vec3<f32>(x_76.z, x_76.x, x_76.y));
  let x_79 : vec3<f32> = vs_INTERP9;
  let x_81 : vec4<f32> = vs_INTERP4;
  let x_84 : vec3<f32> = u_xlat1;
  u_xlat1 = ((vec3<f32>(x_79.y, x_79.z, x_79.x) * vec3<f32>(x_81.z, x_81.x, x_81.y)) + -(x_84));
  let x_87 : vec3<f32> = u_xlat26;
  let x_89 : vec3<f32> = u_xlat1;
  u_xlat26 = (vec3<f32>(x_87.x, x_87.x, x_87.x) * x_89);
  let x_91 : vec3<f32> = u_xlat0;
  let x_93 : vec3<f32> = vs_INTERP9;
  u_xlat1 = (vec3<f32>(x_91.x, x_91.x, x_91.x) * x_93);
  let x_97 : vec3<f32> = u_xlat0;
  let x_99 : vec4<f32> = vs_INTERP4;
  let x_101 : vec3<f32> = (vec3<f32>(x_97.x, x_97.x, x_97.x) * vec3<f32>(x_99.x, x_99.y, x_99.z));
  let x_102 : vec4<f32> = u_xlat2;
  u_xlat2 = vec4<f32>(x_101.x, x_101.y, x_101.z, x_102.w);
  let x_105 : vec3<f32> = u_xlat26;
  let x_106 : vec3<f32> = u_xlat0;
  let x_108 : vec3<f32> = (x_105 * vec3<f32>(x_106.x, x_106.x, x_106.x));
  let x_109 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_108.x, x_108.y, x_108.z, x_109.w);
  let x_124 : vec4<f32> = vs_INTERP5;
  let x_131 : f32 = x_128.x_GlobalMipBias.x;
  let x_132 : vec4<f32> = textureSampleBias(Texture2D_B222E8F, samplerTexture2D_B222E8F, vec2<f32>(x_124.x, x_124.y), x_131);
  u_xlat4 = x_132;
  let x_134 : vec4<f32> = u_xlat4;
  let x_142 : vec4<f32> = x_138.Color_C30C7CA3;
  u_xlat5 = (vec3<f32>(x_134.x, x_134.y, x_134.z) * vec3<f32>(x_142.x, x_142.y, x_142.z));
  let x_151 : vec4<f32> = vs_INTERP5;
  let x_154 : f32 = x_128.x_GlobalMipBias.x;
  let x_155 : vec4<f32> = textureSampleBias(Texture2D_D9BFD5F1, samplerTexture2D_D9BFD5F1, vec2<f32>(x_151.x, x_151.y), x_154);
  u_xlat6 = vec4<f32>(x_155.w, x_155.x, x_155.y, x_155.z);
  let x_158 : vec4<f32> = u_xlat6;
  u_xlat7 = ((vec4<f32>(x_158.y, x_158.z, x_158.w, x_158.x) * vec4<f32>(2.0f, 2.0f, 2.0f, 2.0f)) + vec4<f32>(-1.0f, -1.0f, -1.0f, -1.0f));
  let x_165 : vec4<f32> = u_xlat7;
  let x_166 : vec4<f32> = u_xlat7;
  u_xlat0.x = dot(x_165, x_166);
  let x_170 : f32 = u_xlat0.x;
  u_xlat0.x = inverseSqrt(x_170);
  let x_174 : vec3<f32> = u_xlat0;
  let x_176 : vec4<f32> = u_xlat7;
  u_xlat32 = (vec3<f32>(x_174.x, x_174.x, x_174.x) * vec3<f32>(x_176.x, x_176.y, x_176.z));
  let x_181 : f32 = vs_INTERP6.y;
  u_xlat0.x = (x_181 * 200.0f);
  let x_186 : f32 = u_xlat0.x;
  u_xlat0.x = min(x_186, 1.0f);
  let x_189 : vec3<f32> = u_xlat0;
  let x_191 : vec4<f32> = u_xlat4;
  let x_193 : vec3<f32> = (vec3<f32>(x_189.x, x_189.x, x_189.x) * vec3<f32>(x_191.x, x_191.y, x_191.z));
  let x_194 : vec4<f32> = u_xlat4;
  u_xlat4 = vec4<f32>(x_193.x, x_193.y, x_193.z, x_194.w);
  let x_196 : vec4<f32> = u_xlat3;
  let x_198 : vec3<f32> = u_xlat32;
  let x_200 : vec3<f32> = (vec3<f32>(x_196.x, x_196.y, x_196.z) * vec3<f32>(x_198.y, x_198.y, x_198.y));
  let x_201 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_200.x, x_200.y, x_200.z, x_201.w);
  let x_203 : vec3<f32> = u_xlat32;
  let x_205 : vec4<f32> = u_xlat2;
  let x_208 : vec4<f32> = u_xlat3;
  let x_210 : vec3<f32> = ((vec3<f32>(x_203.x, x_203.x, x_203.x) * vec3<f32>(x_205.x, x_205.y, x_205.z)) + vec3<f32>(x_208.x, x_208.y, x_208.z));
  let x_211 : vec4<f32> = u_xlat2;
  u_xlat2 = vec4<f32>(x_210.x, x_210.y, x_210.z, x_211.w);
  let x_213 : vec3<f32> = u_xlat32;
  let x_215 : vec3<f32> = u_xlat1;
  let x_217 : vec4<f32> = u_xlat2;
  u_xlat1 = ((vec3<f32>(x_213.z, x_213.z, x_213.z) * x_215) + vec3<f32>(x_217.x, x_217.y, x_217.z));
  let x_220 : vec3<f32> = u_xlat1;
  let x_221 : vec3<f32> = u_xlat1;
  u_xlat0.x = dot(x_220, x_221);
  let x_225 : f32 = u_xlat0.x;
  u_xlat0.x = max(x_225, 1.17549435e-38f);
  let x_230 : f32 = u_xlat0.x;
  u_xlat0.x = inverseSqrt(x_230);
  let x_233 : vec3<f32> = u_xlat0;
  let x_235 : vec3<f32> = u_xlat1;
  u_xlat1 = (vec3<f32>(x_233.x, x_233.x, x_233.x) * x_235);
  let x_238 : vec3<f32> = vs_INTERP8;
  let x_248 : vec4<f32> = x_246.x_CascadeShadowSplitSpheres0;
  let x_251 : vec3<f32> = (x_238 + -(vec3<f32>(x_248.x, x_248.y, x_248.z)));
  let x_252 : vec4<f32> = u_xlat2;
  u_xlat2 = vec4<f32>(x_251.x, x_251.y, x_251.z, x_252.w);
  let x_254 : vec3<f32> = vs_INTERP8;
  let x_257 : vec4<f32> = x_246.x_CascadeShadowSplitSpheres1;
  let x_260 : vec3<f32> = (x_254 + -(vec3<f32>(x_257.x, x_257.y, x_257.z)));
  let x_261 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_260.x, x_260.y, x_260.z, x_261.w);
  let x_263 : vec3<f32> = vs_INTERP8;
  let x_265 : vec4<f32> = x_246.x_CascadeShadowSplitSpheres2;
  let x_268 : vec3<f32> = (x_263 + -(vec3<f32>(x_265.x, x_265.y, x_265.z)));
  let x_269 : vec4<f32> = u_xlat7;
  u_xlat7 = vec4<f32>(x_268.x, x_268.y, x_268.z, x_269.w);
  let x_272 : vec3<f32> = vs_INTERP8;
  let x_275 : vec4<f32> = x_246.x_CascadeShadowSplitSpheres3;
  let x_278 : vec3<f32> = (x_272 + -(vec3<f32>(x_275.x, x_275.y, x_275.z)));
  let x_279 : vec4<f32> = u_xlat8;
  u_xlat8 = vec4<f32>(x_278.x, x_278.y, x_278.z, x_279.w);
  let x_281 : vec4<f32> = u_xlat2;
  let x_283 : vec4<f32> = u_xlat2;
  u_xlat2.x = dot(vec3<f32>(x_281.x, x_281.y, x_281.z), vec3<f32>(x_283.x, x_283.y, x_283.z));
  let x_287 : vec4<f32> = u_xlat3;
  let x_289 : vec4<f32> = u_xlat3;
  u_xlat2.y = dot(vec3<f32>(x_287.x, x_287.y, x_287.z), vec3<f32>(x_289.x, x_289.y, x_289.z));
  let x_293 : vec4<f32> = u_xlat7;
  let x_295 : vec4<f32> = u_xlat7;
  u_xlat2.z = dot(vec3<f32>(x_293.x, x_293.y, x_293.z), vec3<f32>(x_295.x, x_295.y, x_295.z));
  let x_299 : vec4<f32> = u_xlat8;
  let x_301 : vec4<f32> = u_xlat8;
  u_xlat2.w = dot(vec3<f32>(x_299.x, x_299.y, x_299.z), vec3<f32>(x_301.x, x_301.y, x_301.z));
  let x_308 : vec4<f32> = u_xlat2;
  let x_311 : vec4<f32> = x_246.x_CascadeShadowSplitSphereRadii;
  u_xlatb2 = (x_308 < x_311);
  let x_314 : bool = u_xlatb2.x;
  u_xlat3.x = select(0.0f, 1.0f, x_314);
  let x_318 : bool = u_xlatb2.y;
  u_xlat3.y = select(0.0f, 1.0f, x_318);
  let x_322 : bool = u_xlatb2.z;
  u_xlat3.z = select(0.0f, 1.0f, x_322);
  let x_326 : bool = u_xlatb2.w;
  u_xlat3.w = select(0.0f, 1.0f, x_326);
  let x_330 : bool = u_xlatb2.x;
  u_xlat2.x = select(-0.0f, -1.0f, x_330);
  let x_335 : bool = u_xlatb2.y;
  u_xlat2.y = select(-0.0f, -1.0f, x_335);
  let x_339 : bool = u_xlatb2.z;
  u_xlat2.z = select(-0.0f, -1.0f, x_339);
  let x_342 : vec4<f32> = u_xlat2;
  let x_344 : vec4<f32> = u_xlat3;
  let x_346 : vec3<f32> = (vec3<f32>(x_342.x, x_342.y, x_342.z) + vec3<f32>(x_344.y, x_344.z, x_344.w));
  let x_347 : vec4<f32> = u_xlat2;
  u_xlat2 = vec4<f32>(x_346.x, x_346.y, x_346.z, x_347.w);
  let x_349 : vec4<f32> = u_xlat2;
  let x_352 : vec3<f32> = max(vec3<f32>(x_349.x, x_349.y, x_349.z), vec3<f32>(0.0f, 0.0f, 0.0f));
  let x_353 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_353.x, x_352.x, x_352.y, x_352.z);
  let x_355 : vec4<f32> = u_xlat3;
  u_xlat0.x = dot(x_355, vec4<f32>(4.0f, 3.0f, 2.0f, 1.0f));
  let x_362 : f32 = u_xlat0.x;
  u_xlat0.x = (-(x_362) + 4.0f);
  let x_369 : f32 = u_xlat0.x;
  u_xlatu0 = u32(x_369);
  let x_373 : u32 = u_xlatu0;
  u_xlati0 = (bitcast<i32>(x_373) << bitcast<u32>(2i));
  let x_376 : vec3<f32> = vs_INTERP8;
  let x_378 : i32 = u_xlati0;
  let x_381 : i32 = u_xlati0;
  let x_385 : vec4<f32> = x_246.x_MainLightWorldToShadow[((x_378 + 1i) / 4i)][((x_381 + 1i) % 4i)];
  let x_387 : vec3<f32> = (vec3<f32>(x_376.y, x_376.y, x_376.y) * vec3<f32>(x_385.x, x_385.y, x_385.z));
  let x_388 : vec4<f32> = u_xlat2;
  u_xlat2 = vec4<f32>(x_387.x, x_387.y, x_387.z, x_388.w);
  let x_390 : i32 = u_xlati0;
  let x_392 : i32 = u_xlati0;
  let x_395 : vec4<f32> = x_246.x_MainLightWorldToShadow[(x_390 / 4i)][(x_392 % 4i)];
  let x_397 : vec3<f32> = vs_INTERP8;
  let x_400 : vec4<f32> = u_xlat2;
  let x_402 : vec3<f32> = ((vec3<f32>(x_395.x, x_395.y, x_395.z) * vec3<f32>(x_397.x, x_397.x, x_397.x)) + vec3<f32>(x_400.x, x_400.y, x_400.z));
  let x_403 : vec4<f32> = u_xlat2;
  u_xlat2 = vec4<f32>(x_402.x, x_402.y, x_402.z, x_403.w);
  let x_405 : i32 = u_xlati0;
  let x_408 : i32 = u_xlati0;
  let x_412 : vec4<f32> = x_246.x_MainLightWorldToShadow[((x_405 + 2i) / 4i)][((x_408 + 2i) % 4i)];
  let x_414 : vec3<f32> = vs_INTERP8;
  let x_417 : vec4<f32> = u_xlat2;
  let x_419 : vec3<f32> = ((vec3<f32>(x_412.x, x_412.y, x_412.z) * vec3<f32>(x_414.z, x_414.z, x_414.z)) + vec3<f32>(x_417.x, x_417.y, x_417.z));
  let x_420 : vec4<f32> = u_xlat2;
  u_xlat2 = vec4<f32>(x_419.x, x_419.y, x_419.z, x_420.w);
  let x_422 : vec4<f32> = u_xlat2;
  let x_424 : i32 = u_xlati0;
  let x_427 : i32 = u_xlati0;
  let x_431 : vec4<f32> = x_246.x_MainLightWorldToShadow[((x_424 + 3i) / 4i)][((x_427 + 3i) % 4i)];
  let x_433 : vec3<f32> = (vec3<f32>(x_422.x, x_422.y, x_422.z) + vec3<f32>(x_431.x, x_431.y, x_431.z));
  let x_434 : vec4<f32> = u_xlat2;
  u_xlat2 = vec4<f32>(x_433.x, x_433.y, x_433.z, x_434.w);
  let x_439 : f32 = x_246.x_MainLightShadowParams.y;
  u_xlatb0 = (0.0f < x_439);
  let x_441 : bool = u_xlatb0;
  if (x_441) {
    let x_446 : f32 = x_246.x_MainLightShadowParams.y;
    u_xlatb79 = (x_446 == 1.0f);
    let x_448 : bool = u_xlatb79;
    if (x_448) {
      let x_451 : vec4<f32> = u_xlat2;
      let x_455 : vec4<f32> = x_246.x_MainLightShadowOffset0;
      u_xlat3 = (vec4<f32>(x_451.x, x_451.y, x_451.x, x_451.y) + x_455);
      let x_459 : vec4<f32> = u_xlat3;
      let x_460 : vec2<f32> = vec2<f32>(x_459.x, x_459.y);
      let x_462 : f32 = u_xlat2.z;
      txVec0 = vec3<f32>(x_460.x, x_460.y, x_462);
      let x_474 : vec3<f32> = txVec0;
      let x_476 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_LinearClampCompare, x_474.xy, x_474.z);
      u_xlat7.x = x_476;
      let x_479 : vec4<f32> = u_xlat3;
      let x_480 : vec2<f32> = vec2<f32>(x_479.z, x_479.w);
      let x_482 : f32 = u_xlat2.z;
      txVec1 = vec3<f32>(x_480.x, x_480.y, x_482);
      let x_489 : vec3<f32> = txVec1;
      let x_491 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_LinearClampCompare, x_489.xy, x_489.z);
      u_xlat7.y = x_491;
      let x_493 : vec4<f32> = u_xlat2;
      let x_497 : vec4<f32> = x_246.x_MainLightShadowOffset1;
      u_xlat3 = (vec4<f32>(x_493.x, x_493.y, x_493.x, x_493.y) + x_497);
      let x_500 : vec4<f32> = u_xlat3;
      let x_501 : vec2<f32> = vec2<f32>(x_500.x, x_500.y);
      let x_503 : f32 = u_xlat2.z;
      txVec2 = vec3<f32>(x_501.x, x_501.y, x_503);
      let x_510 : vec3<f32> = txVec2;
      let x_512 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_LinearClampCompare, x_510.xy, x_510.z);
      u_xlat7.z = x_512;
      let x_515 : vec4<f32> = u_xlat3;
      let x_516 : vec2<f32> = vec2<f32>(x_515.z, x_515.w);
      let x_518 : f32 = u_xlat2.z;
      txVec3 = vec3<f32>(x_516.x, x_516.y, x_518);
      let x_525 : vec3<f32> = txVec3;
      let x_527 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_LinearClampCompare, x_525.xy, x_525.z);
      u_xlat7.w = x_527;
      let x_530 : vec4<f32> = u_xlat7;
      u_xlat79 = dot(x_530, vec4<f32>(0.25f, 0.25f, 0.25f, 0.25f));
    } else {
      let x_537 : f32 = x_246.x_MainLightShadowParams.y;
      u_xlatb80 = (x_537 == 2.0f);
      let x_539 : bool = u_xlatb80;
      if (x_539) {
        let x_542 : vec4<f32> = u_xlat2;
        let x_546 : vec4<f32> = x_246.x_MainLightShadowmapSize;
        let x_551 : vec2<f32> = ((vec2<f32>(x_542.x, x_542.y) * vec2<f32>(x_546.z, x_546.w)) + vec2<f32>(0.5f, 0.5f));
        let x_552 : vec4<f32> = u_xlat3;
        u_xlat3 = vec4<f32>(x_551.x, x_551.y, x_552.z, x_552.w);
        let x_554 : vec4<f32> = u_xlat3;
        let x_556 : vec2<f32> = floor(vec2<f32>(x_554.x, x_554.y));
        let x_557 : vec4<f32> = u_xlat3;
        u_xlat3 = vec4<f32>(x_556.x, x_556.y, x_557.z, x_557.w);
        let x_561 : vec4<f32> = u_xlat2;
        let x_564 : vec4<f32> = x_246.x_MainLightShadowmapSize;
        let x_567 : vec4<f32> = u_xlat3;
        u_xlat55 = ((vec2<f32>(x_561.x, x_561.y) * vec2<f32>(x_564.z, x_564.w)) + -(vec2<f32>(x_567.x, x_567.y)));
        let x_571 : vec2<f32> = u_xlat55;
        u_xlat7 = (vec4<f32>(x_571.x, x_571.x, x_571.y, x_571.y) + vec4<f32>(0.5f, 1.0f, 0.5f, 1.0f));
        let x_575 : vec4<f32> = u_xlat7;
        let x_577 : vec4<f32> = u_xlat7;
        u_xlat8 = (vec4<f32>(x_575.x, x_575.x, x_575.z, x_575.z) * vec4<f32>(x_577.x, x_577.x, x_577.z, x_577.z));
        let x_580 : vec4<f32> = u_xlat8;
        let x_584 : vec2<f32> = (vec2<f32>(x_580.y, x_580.w) * vec2<f32>(0.07999999821186065674f, 0.07999999821186065674f));
        let x_585 : vec4<f32> = u_xlat7;
        u_xlat7 = vec4<f32>(x_584.x, x_585.y, x_584.y, x_585.w);
        let x_587 : vec4<f32> = u_xlat8;
        let x_590 : vec2<f32> = u_xlat55;
        let x_592 : vec2<f32> = ((vec2<f32>(x_587.x, x_587.z) * vec2<f32>(0.5f, 0.5f)) + -(x_590));
        let x_593 : vec4<f32> = u_xlat8;
        u_xlat8 = vec4<f32>(x_592.x, x_592.y, x_593.z, x_593.w);
        let x_596 : vec2<f32> = u_xlat55;
        u_xlat60 = (-(x_596) + vec2<f32>(1.0f, 1.0f));
        let x_601 : vec2<f32> = u_xlat55;
        let x_603 : vec2<f32> = min(x_601, vec2<f32>(0.0f, 0.0f));
        let x_604 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_603.x, x_603.y, x_604.z, x_604.w);
        let x_606 : vec4<f32> = u_xlat9;
        let x_609 : vec4<f32> = u_xlat9;
        let x_612 : vec2<f32> = u_xlat60;
        let x_613 : vec2<f32> = ((-(vec2<f32>(x_606.x, x_606.y)) * vec2<f32>(x_609.x, x_609.y)) + x_612);
        let x_614 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_613.x, x_613.y, x_614.z, x_614.w);
        let x_616 : vec2<f32> = u_xlat55;
        u_xlat55 = max(x_616, vec2<f32>(0.0f, 0.0f));
        let x_618 : vec2<f32> = u_xlat55;
        let x_620 : vec2<f32> = u_xlat55;
        let x_622 : vec4<f32> = u_xlat7;
        u_xlat55 = ((-(x_618) * x_620) + vec2<f32>(x_622.y, x_622.w));
        let x_625 : vec4<f32> = u_xlat9;
        let x_627 : vec2<f32> = (vec2<f32>(x_625.x, x_625.y) + vec2<f32>(1.0f, 1.0f));
        let x_628 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_627.x, x_627.y, x_628.z, x_628.w);
        let x_630 : vec2<f32> = u_xlat55;
        u_xlat55 = (x_630 + vec2<f32>(1.0f, 1.0f));
        let x_633 : vec4<f32> = u_xlat8;
        let x_637 : vec2<f32> = (vec2<f32>(x_633.x, x_633.y) * vec2<f32>(0.15999999642372131348f, 0.15999999642372131348f));
        let x_638 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_637.x, x_637.y, x_638.z, x_638.w);
        let x_640 : vec2<f32> = u_xlat60;
        let x_641 : vec2<f32> = (x_640 * vec2<f32>(0.15999999642372131348f, 0.15999999642372131348f));
        let x_642 : vec4<f32> = u_xlat8;
        u_xlat8 = vec4<f32>(x_641.x, x_641.y, x_642.z, x_642.w);
        let x_644 : vec4<f32> = u_xlat9;
        let x_646 : vec2<f32> = (vec2<f32>(x_644.x, x_644.y) * vec2<f32>(0.15999999642372131348f, 0.15999999642372131348f));
        let x_647 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_646.x, x_646.y, x_647.z, x_647.w);
        let x_650 : vec2<f32> = u_xlat55;
        let x_651 : vec2<f32> = (x_650 * vec2<f32>(0.15999999642372131348f, 0.15999999642372131348f));
        let x_652 : vec4<f32> = u_xlat11;
        u_xlat11 = vec4<f32>(x_651.x, x_651.y, x_652.z, x_652.w);
        let x_654 : vec4<f32> = u_xlat7;
        u_xlat55 = (vec2<f32>(x_654.y, x_654.w) * vec2<f32>(0.15999999642372131348f, 0.15999999642372131348f));
        let x_658 : f32 = u_xlat9.x;
        u_xlat10.z = x_658;
        let x_661 : f32 = u_xlat55.x;
        u_xlat10.w = x_661;
        let x_664 : f32 = u_xlat11.x;
        u_xlat8.z = x_664;
        let x_667 : f32 = u_xlat7.x;
        u_xlat8.w = x_667;
        let x_670 : vec4<f32> = u_xlat8;
        let x_672 : vec4<f32> = u_xlat10;
        u_xlat12 = (vec4<f32>(x_670.z, x_670.w, x_670.x, x_670.z) + vec4<f32>(x_672.z, x_672.w, x_672.x, x_672.z));
        let x_676 : f32 = u_xlat10.y;
        u_xlat9.z = x_676;
        let x_679 : f32 = u_xlat55.y;
        u_xlat9.w = x_679;
        let x_682 : f32 = u_xlat8.y;
        u_xlat11.z = x_682;
        let x_685 : f32 = u_xlat7.z;
        u_xlat11.w = x_685;
        let x_687 : vec4<f32> = u_xlat9;
        let x_689 : vec4<f32> = u_xlat11;
        let x_691 : vec3<f32> = (vec3<f32>(x_687.z, x_687.y, x_687.w) + vec3<f32>(x_689.z, x_689.y, x_689.w));
        let x_692 : vec4<f32> = u_xlat7;
        u_xlat7 = vec4<f32>(x_691.x, x_691.y, x_691.z, x_692.w);
        let x_694 : vec4<f32> = u_xlat8;
        let x_696 : vec4<f32> = u_xlat12;
        let x_698 : vec3<f32> = (vec3<f32>(x_694.x, x_694.z, x_694.w) / vec3<f32>(x_696.z, x_696.w, x_696.y));
        let x_699 : vec4<f32> = u_xlat8;
        u_xlat8 = vec4<f32>(x_698.x, x_698.y, x_698.z, x_699.w);
        let x_701 : vec4<f32> = u_xlat8;
        let x_707 : vec3<f32> = (vec3<f32>(x_701.x, x_701.y, x_701.z) + vec3<f32>(-2.5f, -0.5f, 1.5f));
        let x_708 : vec4<f32> = u_xlat8;
        u_xlat8 = vec4<f32>(x_707.x, x_707.y, x_707.z, x_708.w);
        let x_710 : vec4<f32> = u_xlat11;
        let x_712 : vec4<f32> = u_xlat7;
        let x_714 : vec3<f32> = (vec3<f32>(x_710.z, x_710.y, x_710.w) / vec3<f32>(x_712.x, x_712.y, x_712.z));
        let x_715 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_714.x, x_714.y, x_714.z, x_715.w);
        let x_717 : vec4<f32> = u_xlat9;
        let x_719 : vec3<f32> = (vec3<f32>(x_717.x, x_717.y, x_717.z) + vec3<f32>(-2.5f, -0.5f, 1.5f));
        let x_720 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_719.x, x_719.y, x_719.z, x_720.w);
        let x_722 : vec4<f32> = u_xlat8;
        let x_725 : vec4<f32> = x_246.x_MainLightShadowmapSize;
        let x_727 : vec3<f32> = (vec3<f32>(x_722.y, x_722.x, x_722.z) * vec3<f32>(x_725.x, x_725.x, x_725.x));
        let x_728 : vec4<f32> = u_xlat8;
        u_xlat8 = vec4<f32>(x_727.x, x_727.y, x_727.z, x_728.w);
        let x_730 : vec4<f32> = u_xlat9;
        let x_733 : vec4<f32> = x_246.x_MainLightShadowmapSize;
        let x_735 : vec3<f32> = (vec3<f32>(x_730.x, x_730.y, x_730.z) * vec3<f32>(x_733.y, x_733.y, x_733.y));
        let x_736 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_735.x, x_735.y, x_735.z, x_736.w);
        let x_739 : f32 = u_xlat9.x;
        u_xlat8.w = x_739;
        let x_741 : vec4<f32> = u_xlat3;
        let x_744 : vec4<f32> = x_246.x_MainLightShadowmapSize;
        let x_747 : vec4<f32> = u_xlat8;
        u_xlat10 = ((vec4<f32>(x_741.x, x_741.y, x_741.x, x_741.y) * vec4<f32>(x_744.x, x_744.y, x_744.x, x_744.y)) + vec4<f32>(x_747.y, x_747.w, x_747.x, x_747.w));
        let x_750 : vec4<f32> = u_xlat3;
        let x_753 : vec4<f32> = x_246.x_MainLightShadowmapSize;
        let x_756 : vec4<f32> = u_xlat8;
        u_xlat55 = ((vec2<f32>(x_750.x, x_750.y) * vec2<f32>(x_753.x, x_753.y)) + vec2<f32>(x_756.z, x_756.w));
        let x_760 : f32 = u_xlat8.y;
        u_xlat9.w = x_760;
        let x_762 : vec4<f32> = u_xlat9;
        let x_763 : vec2<f32> = vec2<f32>(x_762.y, x_762.z);
        let x_764 : vec4<f32> = u_xlat8;
        u_xlat8 = vec4<f32>(x_764.x, x_763.x, x_764.z, x_763.y);
        let x_766 : vec4<f32> = u_xlat3;
        let x_769 : vec4<f32> = x_246.x_MainLightShadowmapSize;
        let x_772 : vec4<f32> = u_xlat8;
        u_xlat11 = ((vec4<f32>(x_766.x, x_766.y, x_766.x, x_766.y) * vec4<f32>(x_769.x, x_769.y, x_769.x, x_769.y)) + vec4<f32>(x_772.x, x_772.y, x_772.z, x_772.y));
        let x_775 : vec4<f32> = u_xlat3;
        let x_778 : vec4<f32> = x_246.x_MainLightShadowmapSize;
        let x_781 : vec4<f32> = u_xlat9;
        u_xlat9 = ((vec4<f32>(x_775.x, x_775.y, x_775.x, x_775.y) * vec4<f32>(x_778.x, x_778.y, x_778.x, x_778.y)) + vec4<f32>(x_781.w, x_781.y, x_781.w, x_781.z));
        let x_784 : vec4<f32> = u_xlat3;
        let x_787 : vec4<f32> = x_246.x_MainLightShadowmapSize;
        let x_790 : vec4<f32> = u_xlat8;
        u_xlat8 = ((vec4<f32>(x_784.x, x_784.y, x_784.x, x_784.y) * vec4<f32>(x_787.x, x_787.y, x_787.x, x_787.y)) + vec4<f32>(x_790.x, x_790.w, x_790.z, x_790.w));
        let x_794 : vec4<f32> = u_xlat7;
        let x_796 : vec4<f32> = u_xlat12;
        u_xlat13 = (vec4<f32>(x_794.x, x_794.x, x_794.x, x_794.y) * vec4<f32>(x_796.z, x_796.w, x_796.y, x_796.z));
        let x_800 : vec4<f32> = u_xlat7;
        let x_802 : vec4<f32> = u_xlat12;
        u_xlat14 = (vec4<f32>(x_800.y, x_800.y, x_800.z, x_800.z) * x_802);
        let x_806 : f32 = u_xlat7.z;
        let x_808 : f32 = u_xlat12.y;
        u_xlat80 = (x_806 * x_808);
        let x_811 : vec4<f32> = u_xlat10;
        let x_812 : vec2<f32> = vec2<f32>(x_811.x, x_811.y);
        let x_814 : f32 = u_xlat2.z;
        txVec4 = vec3<f32>(x_812.x, x_812.y, x_814);
        let x_821 : vec3<f32> = txVec4;
        let x_823 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_LinearClampCompare, x_821.xy, x_821.z);
        u_xlat3.x = x_823;
        let x_826 : vec4<f32> = u_xlat10;
        let x_827 : vec2<f32> = vec2<f32>(x_826.z, x_826.w);
        let x_829 : f32 = u_xlat2.z;
        txVec5 = vec3<f32>(x_827.x, x_827.y, x_829);
        let x_837 : vec3<f32> = txVec5;
        let x_839 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_LinearClampCompare, x_837.xy, x_837.z);
        u_xlat29.x = x_839;
        let x_842 : f32 = u_xlat29.x;
        let x_844 : f32 = u_xlat13.y;
        u_xlat29.x = (x_842 * x_844);
        let x_848 : f32 = u_xlat13.x;
        let x_850 : f32 = u_xlat3.x;
        let x_853 : f32 = u_xlat29.x;
        u_xlat3.x = ((x_848 * x_850) + x_853);
        let x_857 : vec2<f32> = u_xlat55;
        let x_859 : f32 = u_xlat2.z;
        txVec6 = vec3<f32>(x_857.x, x_857.y, x_859);
        let x_866 : vec3<f32> = txVec6;
        let x_868 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_LinearClampCompare, x_866.xy, x_866.z);
        u_xlat29.x = x_868;
        let x_871 : f32 = u_xlat13.z;
        let x_873 : f32 = u_xlat29.x;
        let x_876 : f32 = u_xlat3.x;
        u_xlat3.x = ((x_871 * x_873) + x_876);
        let x_880 : vec4<f32> = u_xlat9;
        let x_881 : vec2<f32> = vec2<f32>(x_880.x, x_880.y);
        let x_883 : f32 = u_xlat2.z;
        txVec7 = vec3<f32>(x_881.x, x_881.y, x_883);
        let x_890 : vec3<f32> = txVec7;
        let x_892 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_LinearClampCompare, x_890.xy, x_890.z);
        u_xlat29.x = x_892;
        let x_895 : f32 = u_xlat13.w;
        let x_897 : f32 = u_xlat29.x;
        let x_900 : f32 = u_xlat3.x;
        u_xlat3.x = ((x_895 * x_897) + x_900);
        let x_904 : vec4<f32> = u_xlat11;
        let x_905 : vec2<f32> = vec2<f32>(x_904.x, x_904.y);
        let x_907 : f32 = u_xlat2.z;
        txVec8 = vec3<f32>(x_905.x, x_905.y, x_907);
        let x_914 : vec3<f32> = txVec8;
        let x_916 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_LinearClampCompare, x_914.xy, x_914.z);
        u_xlat29.x = x_916;
        let x_919 : f32 = u_xlat14.x;
        let x_921 : f32 = u_xlat29.x;
        let x_924 : f32 = u_xlat3.x;
        u_xlat3.x = ((x_919 * x_921) + x_924);
        let x_928 : vec4<f32> = u_xlat11;
        let x_929 : vec2<f32> = vec2<f32>(x_928.z, x_928.w);
        let x_931 : f32 = u_xlat2.z;
        txVec9 = vec3<f32>(x_929.x, x_929.y, x_931);
        let x_938 : vec3<f32> = txVec9;
        let x_940 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_LinearClampCompare, x_938.xy, x_938.z);
        u_xlat29.x = x_940;
        let x_943 : f32 = u_xlat14.y;
        let x_945 : f32 = u_xlat29.x;
        let x_948 : f32 = u_xlat3.x;
        u_xlat3.x = ((x_943 * x_945) + x_948);
        let x_952 : vec4<f32> = u_xlat9;
        let x_953 : vec2<f32> = vec2<f32>(x_952.z, x_952.w);
        let x_955 : f32 = u_xlat2.z;
        txVec10 = vec3<f32>(x_953.x, x_953.y, x_955);
        let x_962 : vec3<f32> = txVec10;
        let x_964 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_LinearClampCompare, x_962.xy, x_962.z);
        u_xlat29.x = x_964;
        let x_967 : f32 = u_xlat14.z;
        let x_969 : f32 = u_xlat29.x;
        let x_972 : f32 = u_xlat3.x;
        u_xlat3.x = ((x_967 * x_969) + x_972);
        let x_976 : vec4<f32> = u_xlat8;
        let x_977 : vec2<f32> = vec2<f32>(x_976.x, x_976.y);
        let x_979 : f32 = u_xlat2.z;
        txVec11 = vec3<f32>(x_977.x, x_977.y, x_979);
        let x_986 : vec3<f32> = txVec11;
        let x_988 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_LinearClampCompare, x_986.xy, x_986.z);
        u_xlat29.x = x_988;
        let x_991 : f32 = u_xlat14.w;
        let x_993 : f32 = u_xlat29.x;
        let x_996 : f32 = u_xlat3.x;
        u_xlat3.x = ((x_991 * x_993) + x_996);
        let x_1000 : vec4<f32> = u_xlat8;
        let x_1001 : vec2<f32> = vec2<f32>(x_1000.z, x_1000.w);
        let x_1003 : f32 = u_xlat2.z;
        txVec12 = vec3<f32>(x_1001.x, x_1001.y, x_1003);
        let x_1010 : vec3<f32> = txVec12;
        let x_1012 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_LinearClampCompare, x_1010.xy, x_1010.z);
        u_xlat29.x = x_1012;
        let x_1014 : f32 = u_xlat80;
        let x_1016 : f32 = u_xlat29.x;
        let x_1019 : f32 = u_xlat3.x;
        u_xlat79 = ((x_1014 * x_1016) + x_1019);
      } else {
        let x_1022 : vec4<f32> = u_xlat2;
        let x_1025 : vec4<f32> = x_246.x_MainLightShadowmapSize;
        let x_1028 : vec2<f32> = ((vec2<f32>(x_1022.x, x_1022.y) * vec2<f32>(x_1025.z, x_1025.w)) + vec2<f32>(0.5f, 0.5f));
        let x_1029 : vec4<f32> = u_xlat3;
        u_xlat3 = vec4<f32>(x_1028.x, x_1028.y, x_1029.z, x_1029.w);
        let x_1031 : vec4<f32> = u_xlat3;
        let x_1033 : vec2<f32> = floor(vec2<f32>(x_1031.x, x_1031.y));
        let x_1034 : vec4<f32> = u_xlat3;
        u_xlat3 = vec4<f32>(x_1033.x, x_1033.y, x_1034.z, x_1034.w);
        let x_1036 : vec4<f32> = u_xlat2;
        let x_1039 : vec4<f32> = x_246.x_MainLightShadowmapSize;
        let x_1042 : vec4<f32> = u_xlat3;
        u_xlat55 = ((vec2<f32>(x_1036.x, x_1036.y) * vec2<f32>(x_1039.z, x_1039.w)) + -(vec2<f32>(x_1042.x, x_1042.y)));
        let x_1046 : vec2<f32> = u_xlat55;
        u_xlat7 = (vec4<f32>(x_1046.x, x_1046.x, x_1046.y, x_1046.y) + vec4<f32>(0.5f, 1.0f, 0.5f, 1.0f));
        let x_1049 : vec4<f32> = u_xlat7;
        let x_1051 : vec4<f32> = u_xlat7;
        u_xlat8 = (vec4<f32>(x_1049.x, x_1049.x, x_1049.z, x_1049.z) * vec4<f32>(x_1051.x, x_1051.x, x_1051.z, x_1051.z));
        let x_1054 : vec4<f32> = u_xlat8;
        let x_1058 : vec2<f32> = (vec2<f32>(x_1054.y, x_1054.w) * vec2<f32>(0.04081600159406661987f, 0.04081600159406661987f));
        let x_1059 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_1059.x, x_1058.x, x_1059.z, x_1058.y);
        let x_1061 : vec4<f32> = u_xlat8;
        let x_1064 : vec2<f32> = u_xlat55;
        let x_1066 : vec2<f32> = ((vec2<f32>(x_1061.x, x_1061.z) * vec2<f32>(0.5f, 0.5f)) + -(x_1064));
        let x_1067 : vec4<f32> = u_xlat7;
        u_xlat7 = vec4<f32>(x_1066.x, x_1067.y, x_1066.y, x_1067.w);
        let x_1069 : vec2<f32> = u_xlat55;
        let x_1071 : vec2<f32> = (-(x_1069) + vec2<f32>(1.0f, 1.0f));
        let x_1072 : vec4<f32> = u_xlat8;
        u_xlat8 = vec4<f32>(x_1071.x, x_1071.y, x_1072.z, x_1072.w);
        let x_1074 : vec2<f32> = u_xlat55;
        u_xlat60 = min(x_1074, vec2<f32>(0.0f, 0.0f));
        let x_1076 : vec2<f32> = u_xlat60;
        let x_1078 : vec2<f32> = u_xlat60;
        let x_1080 : vec4<f32> = u_xlat8;
        let x_1082 : vec2<f32> = ((-(x_1076) * x_1078) + vec2<f32>(x_1080.x, x_1080.y));
        let x_1083 : vec4<f32> = u_xlat8;
        u_xlat8 = vec4<f32>(x_1082.x, x_1082.y, x_1083.z, x_1083.w);
        let x_1085 : vec2<f32> = u_xlat55;
        u_xlat60 = max(x_1085, vec2<f32>(0.0f, 0.0f));
        let x_1088 : vec2<f32> = u_xlat60;
        let x_1090 : vec2<f32> = u_xlat60;
        let x_1092 : vec4<f32> = u_xlat7;
        let x_1094 : vec2<f32> = ((-(x_1088) * x_1090) + vec2<f32>(x_1092.y, x_1092.w));
        let x_1095 : vec3<f32> = u_xlat33;
        u_xlat33 = vec3<f32>(x_1094.x, x_1095.y, x_1094.y);
        let x_1097 : vec4<f32> = u_xlat8;
        let x_1100 : vec2<f32> = (vec2<f32>(x_1097.x, x_1097.y) + vec2<f32>(2.0f, 2.0f));
        let x_1101 : vec4<f32> = u_xlat8;
        u_xlat8 = vec4<f32>(x_1100.x, x_1100.y, x_1101.z, x_1101.w);
        let x_1103 : vec3<f32> = u_xlat33;
        let x_1105 : vec2<f32> = (vec2<f32>(x_1103.x, x_1103.z) + vec2<f32>(2.0f, 2.0f));
        let x_1106 : vec4<f32> = u_xlat7;
        u_xlat7 = vec4<f32>(x_1106.x, x_1105.x, x_1106.z, x_1105.y);
        let x_1109 : f32 = u_xlat7.y;
        u_xlat10.z = (x_1109 * 0.08163200318813323975f);
        let x_1113 : vec4<f32> = u_xlat7;
        let x_1116 : vec3<f32> = (vec3<f32>(x_1113.z, x_1113.x, x_1113.w) * vec3<f32>(0.08163200318813323975f, 0.08163200318813323975f, 0.08163200318813323975f));
        let x_1117 : vec4<f32> = u_xlat11;
        u_xlat11 = vec4<f32>(x_1116.x, x_1116.y, x_1116.z, x_1117.w);
        let x_1119 : vec4<f32> = u_xlat8;
        let x_1122 : vec2<f32> = (vec2<f32>(x_1119.x, x_1119.y) * vec2<f32>(0.08163200318813323975f, 0.08163200318813323975f));
        let x_1123 : vec4<f32> = u_xlat7;
        u_xlat7 = vec4<f32>(x_1122.x, x_1122.y, x_1123.z, x_1123.w);
        let x_1126 : f32 = u_xlat11.y;
        u_xlat10.x = x_1126;
        let x_1128 : vec2<f32> = u_xlat55;
        let x_1135 : vec2<f32> = ((vec2<f32>(x_1128.x, x_1128.x) * vec2<f32>(-0.08163200318813323975f, 0.08163200318813323975f)) + vec2<f32>(0.16326400637626647949f, 0.08163200318813323975f));
        let x_1136 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_1136.x, x_1135.x, x_1136.z, x_1135.y);
        let x_1138 : vec2<f32> = u_xlat55;
        let x_1142 : vec2<f32> = ((vec2<f32>(x_1138.x, x_1138.x) * vec2<f32>(-0.08163200318813323975f, 0.08163200318813323975f)) + vec2<f32>(0.08163200318813323975f, 0.16326400637626647949f));
        let x_1143 : vec4<f32> = u_xlat8;
        u_xlat8 = vec4<f32>(x_1142.x, x_1143.y, x_1142.y, x_1143.w);
        let x_1146 : f32 = u_xlat7.x;
        u_xlat8.y = x_1146;
        let x_1149 : f32 = u_xlat9.y;
        u_xlat8.w = x_1149;
        let x_1151 : vec4<f32> = u_xlat8;
        let x_1152 : vec4<f32> = u_xlat10;
        u_xlat10 = (x_1151 + x_1152);
        let x_1154 : vec2<f32> = u_xlat55;
        let x_1157 : vec2<f32> = ((vec2<f32>(x_1154.y, x_1154.y) * vec2<f32>(-0.08163200318813323975f, 0.08163200318813323975f)) + vec2<f32>(0.16326400637626647949f, 0.08163200318813323975f));
        let x_1158 : vec4<f32> = u_xlat11;
        u_xlat11 = vec4<f32>(x_1158.x, x_1157.x, x_1158.z, x_1157.y);
        let x_1160 : vec2<f32> = u_xlat55;
        let x_1163 : vec2<f32> = ((vec2<f32>(x_1160.y, x_1160.y) * vec2<f32>(-0.08163200318813323975f, 0.08163200318813323975f)) + vec2<f32>(0.08163200318813323975f, 0.16326400637626647949f));
        let x_1164 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_1163.x, x_1164.y, x_1163.y, x_1164.w);
        let x_1167 : f32 = u_xlat7.y;
        u_xlat9.y = x_1167;
        let x_1169 : vec4<f32> = u_xlat9;
        let x_1170 : vec4<f32> = u_xlat11;
        u_xlat7 = (x_1169 + x_1170);
        let x_1172 : vec4<f32> = u_xlat8;
        let x_1173 : vec4<f32> = u_xlat10;
        u_xlat8 = (x_1172 / x_1173);
        let x_1175 : vec4<f32> = u_xlat8;
        u_xlat8 = (x_1175 + vec4<f32>(-3.5f, -1.5f, 0.5f, 2.5f));
        let x_1181 : vec4<f32> = u_xlat9;
        let x_1182 : vec4<f32> = u_xlat7;
        u_xlat9 = (x_1181 / x_1182);
        let x_1184 : vec4<f32> = u_xlat9;
        u_xlat9 = (x_1184 + vec4<f32>(-3.5f, -1.5f, 0.5f, 2.5f));
        let x_1186 : vec4<f32> = u_xlat8;
        let x_1189 : vec4<f32> = x_246.x_MainLightShadowmapSize;
        u_xlat8 = (vec4<f32>(x_1186.w, x_1186.x, x_1186.y, x_1186.z) * vec4<f32>(x_1189.x, x_1189.x, x_1189.x, x_1189.x));
        let x_1192 : vec4<f32> = u_xlat9;
        let x_1195 : vec4<f32> = x_246.x_MainLightShadowmapSize;
        u_xlat9 = (vec4<f32>(x_1192.x, x_1192.w, x_1192.y, x_1192.z) * vec4<f32>(x_1195.y, x_1195.y, x_1195.y, x_1195.y));
        let x_1198 : vec4<f32> = u_xlat8;
        let x_1199 : vec3<f32> = vec3<f32>(x_1198.y, x_1198.z, x_1198.w);
        let x_1200 : vec4<f32> = u_xlat11;
        u_xlat11 = vec4<f32>(x_1199.x, x_1200.y, x_1199.y, x_1199.z);
        let x_1203 : f32 = u_xlat9.x;
        u_xlat11.y = x_1203;
        let x_1205 : vec4<f32> = u_xlat3;
        let x_1208 : vec4<f32> = x_246.x_MainLightShadowmapSize;
        let x_1211 : vec4<f32> = u_xlat11;
        u_xlat12 = ((vec4<f32>(x_1205.x, x_1205.y, x_1205.x, x_1205.y) * vec4<f32>(x_1208.x, x_1208.y, x_1208.x, x_1208.y)) + vec4<f32>(x_1211.x, x_1211.y, x_1211.z, x_1211.y));
        let x_1214 : vec4<f32> = u_xlat3;
        let x_1217 : vec4<f32> = x_246.x_MainLightShadowmapSize;
        let x_1220 : vec4<f32> = u_xlat11;
        u_xlat55 = ((vec2<f32>(x_1214.x, x_1214.y) * vec2<f32>(x_1217.x, x_1217.y)) + vec2<f32>(x_1220.w, x_1220.y));
        let x_1224 : f32 = u_xlat11.y;
        u_xlat8.y = x_1224;
        let x_1227 : f32 = u_xlat9.z;
        u_xlat11.y = x_1227;
        let x_1229 : vec4<f32> = u_xlat3;
        let x_1232 : vec4<f32> = x_246.x_MainLightShadowmapSize;
        let x_1235 : vec4<f32> = u_xlat11;
        u_xlat13 = ((vec4<f32>(x_1229.x, x_1229.y, x_1229.x, x_1229.y) * vec4<f32>(x_1232.x, x_1232.y, x_1232.x, x_1232.y)) + vec4<f32>(x_1235.x, x_1235.y, x_1235.z, x_1235.y));
        let x_1238 : vec4<f32> = u_xlat3;
        let x_1241 : vec4<f32> = x_246.x_MainLightShadowmapSize;
        let x_1244 : vec4<f32> = u_xlat11;
        let x_1246 : vec2<f32> = ((vec2<f32>(x_1238.x, x_1238.y) * vec2<f32>(x_1241.x, x_1241.y)) + vec2<f32>(x_1244.w, x_1244.y));
        let x_1247 : vec4<f32> = u_xlat14;
        u_xlat14 = vec4<f32>(x_1246.x, x_1246.y, x_1247.z, x_1247.w);
        let x_1250 : f32 = u_xlat11.y;
        u_xlat8.z = x_1250;
        let x_1253 : vec4<f32> = u_xlat3;
        let x_1256 : vec4<f32> = x_246.x_MainLightShadowmapSize;
        let x_1259 : vec4<f32> = u_xlat8;
        u_xlat15 = ((vec4<f32>(x_1253.x, x_1253.y, x_1253.x, x_1253.y) * vec4<f32>(x_1256.x, x_1256.y, x_1256.x, x_1256.y)) + vec4<f32>(x_1259.x, x_1259.y, x_1259.x, x_1259.z));
        let x_1263 : f32 = u_xlat9.w;
        u_xlat11.y = x_1263;
        let x_1266 : vec4<f32> = u_xlat3;
        let x_1269 : vec4<f32> = x_246.x_MainLightShadowmapSize;
        let x_1272 : vec4<f32> = u_xlat11;
        u_xlat16 = ((vec4<f32>(x_1266.x, x_1266.y, x_1266.x, x_1266.y) * vec4<f32>(x_1269.x, x_1269.y, x_1269.x, x_1269.y)) + vec4<f32>(x_1272.x, x_1272.y, x_1272.z, x_1272.y));
        let x_1276 : vec4<f32> = u_xlat3;
        let x_1279 : vec4<f32> = x_246.x_MainLightShadowmapSize;
        let x_1282 : vec4<f32> = u_xlat11;
        u_xlat34 = ((vec2<f32>(x_1276.x, x_1276.y) * vec2<f32>(x_1279.x, x_1279.y)) + vec2<f32>(x_1282.w, x_1282.y));
        let x_1286 : f32 = u_xlat11.y;
        u_xlat8.w = x_1286;
        let x_1289 : vec4<f32> = u_xlat3;
        let x_1292 : vec4<f32> = x_246.x_MainLightShadowmapSize;
        let x_1295 : vec4<f32> = u_xlat8;
        u_xlat66 = ((vec2<f32>(x_1289.x, x_1289.y) * vec2<f32>(x_1292.x, x_1292.y)) + vec2<f32>(x_1295.x, x_1295.w));
        let x_1298 : vec4<f32> = u_xlat11;
        let x_1299 : vec3<f32> = vec3<f32>(x_1298.x, x_1298.z, x_1298.w);
        let x_1300 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_1299.x, x_1300.y, x_1299.y, x_1299.z);
        let x_1302 : vec4<f32> = u_xlat3;
        let x_1305 : vec4<f32> = x_246.x_MainLightShadowmapSize;
        let x_1308 : vec4<f32> = u_xlat9;
        u_xlat11 = ((vec4<f32>(x_1302.x, x_1302.y, x_1302.x, x_1302.y) * vec4<f32>(x_1305.x, x_1305.y, x_1305.x, x_1305.y)) + vec4<f32>(x_1308.x, x_1308.y, x_1308.z, x_1308.y));
        let x_1312 : vec4<f32> = u_xlat3;
        let x_1315 : vec4<f32> = x_246.x_MainLightShadowmapSize;
        let x_1318 : vec4<f32> = u_xlat9;
        u_xlat61 = ((vec2<f32>(x_1312.x, x_1312.y) * vec2<f32>(x_1315.x, x_1315.y)) + vec2<f32>(x_1318.w, x_1318.y));
        let x_1322 : f32 = u_xlat8.x;
        u_xlat9.x = x_1322;
        let x_1324 : vec4<f32> = u_xlat3;
        let x_1327 : vec4<f32> = x_246.x_MainLightShadowmapSize;
        let x_1330 : vec4<f32> = u_xlat9;
        let x_1332 : vec2<f32> = ((vec2<f32>(x_1324.x, x_1324.y) * vec2<f32>(x_1327.x, x_1327.y)) + vec2<f32>(x_1330.x, x_1330.y));
        let x_1333 : vec4<f32> = u_xlat3;
        u_xlat3 = vec4<f32>(x_1332.x, x_1332.y, x_1333.z, x_1333.w);
        let x_1336 : vec4<f32> = u_xlat7;
        let x_1338 : vec4<f32> = u_xlat10;
        u_xlat17 = (vec4<f32>(x_1336.x, x_1336.x, x_1336.x, x_1336.x) * x_1338);
        let x_1341 : vec4<f32> = u_xlat7;
        let x_1343 : vec4<f32> = u_xlat10;
        u_xlat18 = (vec4<f32>(x_1341.y, x_1341.y, x_1341.y, x_1341.y) * x_1343);
        let x_1346 : vec4<f32> = u_xlat7;
        let x_1348 : vec4<f32> = u_xlat10;
        u_xlat19 = (vec4<f32>(x_1346.z, x_1346.z, x_1346.z, x_1346.z) * x_1348);
        let x_1350 : vec4<f32> = u_xlat7;
        let x_1352 : vec4<f32> = u_xlat10;
        u_xlat7 = (vec4<f32>(x_1350.w, x_1350.w, x_1350.w, x_1350.w) * x_1352);
        let x_1355 : vec4<f32> = u_xlat12;
        let x_1356 : vec2<f32> = vec2<f32>(x_1355.x, x_1355.y);
        let x_1358 : f32 = u_xlat2.z;
        txVec13 = vec3<f32>(x_1356.x, x_1356.y, x_1358);
        let x_1365 : vec3<f32> = txVec13;
        let x_1367 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_LinearClampCompare, x_1365.xy, x_1365.z);
        u_xlat80 = x_1367;
        let x_1369 : vec4<f32> = u_xlat12;
        let x_1370 : vec2<f32> = vec2<f32>(x_1369.z, x_1369.w);
        let x_1372 : f32 = u_xlat2.z;
        txVec14 = vec3<f32>(x_1370.x, x_1370.y, x_1372);
        let x_1380 : vec3<f32> = txVec14;
        let x_1382 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_LinearClampCompare, x_1380.xy, x_1380.z);
        u_xlat83 = x_1382;
        let x_1383 : f32 = u_xlat83;
        let x_1385 : f32 = u_xlat17.y;
        u_xlat83 = (x_1383 * x_1385);
        let x_1388 : f32 = u_xlat17.x;
        let x_1389 : f32 = u_xlat80;
        let x_1391 : f32 = u_xlat83;
        u_xlat80 = ((x_1388 * x_1389) + x_1391);
        let x_1394 : vec2<f32> = u_xlat55;
        let x_1396 : f32 = u_xlat2.z;
        txVec15 = vec3<f32>(x_1394.x, x_1394.y, x_1396);
        let x_1403 : vec3<f32> = txVec15;
        let x_1405 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_LinearClampCompare, x_1403.xy, x_1403.z);
        u_xlat55.x = x_1405;
        let x_1408 : f32 = u_xlat17.z;
        let x_1410 : f32 = u_xlat55.x;
        let x_1412 : f32 = u_xlat80;
        u_xlat80 = ((x_1408 * x_1410) + x_1412);
        let x_1415 : vec4<f32> = u_xlat15;
        let x_1416 : vec2<f32> = vec2<f32>(x_1415.x, x_1415.y);
        let x_1418 : f32 = u_xlat2.z;
        txVec16 = vec3<f32>(x_1416.x, x_1416.y, x_1418);
        let x_1425 : vec3<f32> = txVec16;
        let x_1427 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_LinearClampCompare, x_1425.xy, x_1425.z);
        u_xlat55.x = x_1427;
        let x_1430 : f32 = u_xlat17.w;
        let x_1432 : f32 = u_xlat55.x;
        let x_1434 : f32 = u_xlat80;
        u_xlat80 = ((x_1430 * x_1432) + x_1434);
        let x_1437 : vec4<f32> = u_xlat13;
        let x_1438 : vec2<f32> = vec2<f32>(x_1437.x, x_1437.y);
        let x_1440 : f32 = u_xlat2.z;
        txVec17 = vec3<f32>(x_1438.x, x_1438.y, x_1440);
        let x_1447 : vec3<f32> = txVec17;
        let x_1449 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_LinearClampCompare, x_1447.xy, x_1447.z);
        u_xlat55.x = x_1449;
        let x_1452 : f32 = u_xlat18.x;
        let x_1454 : f32 = u_xlat55.x;
        let x_1456 : f32 = u_xlat80;
        u_xlat80 = ((x_1452 * x_1454) + x_1456);
        let x_1459 : vec4<f32> = u_xlat13;
        let x_1460 : vec2<f32> = vec2<f32>(x_1459.z, x_1459.w);
        let x_1462 : f32 = u_xlat2.z;
        txVec18 = vec3<f32>(x_1460.x, x_1460.y, x_1462);
        let x_1469 : vec3<f32> = txVec18;
        let x_1471 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_LinearClampCompare, x_1469.xy, x_1469.z);
        u_xlat55.x = x_1471;
        let x_1474 : f32 = u_xlat18.y;
        let x_1476 : f32 = u_xlat55.x;
        let x_1478 : f32 = u_xlat80;
        u_xlat80 = ((x_1474 * x_1476) + x_1478);
        let x_1481 : vec4<f32> = u_xlat14;
        let x_1482 : vec2<f32> = vec2<f32>(x_1481.x, x_1481.y);
        let x_1484 : f32 = u_xlat2.z;
        txVec19 = vec3<f32>(x_1482.x, x_1482.y, x_1484);
        let x_1491 : vec3<f32> = txVec19;
        let x_1493 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_LinearClampCompare, x_1491.xy, x_1491.z);
        u_xlat55.x = x_1493;
        let x_1496 : f32 = u_xlat18.z;
        let x_1498 : f32 = u_xlat55.x;
        let x_1500 : f32 = u_xlat80;
        u_xlat80 = ((x_1496 * x_1498) + x_1500);
        let x_1503 : vec4<f32> = u_xlat15;
        let x_1504 : vec2<f32> = vec2<f32>(x_1503.z, x_1503.w);
        let x_1506 : f32 = u_xlat2.z;
        txVec20 = vec3<f32>(x_1504.x, x_1504.y, x_1506);
        let x_1513 : vec3<f32> = txVec20;
        let x_1515 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_LinearClampCompare, x_1513.xy, x_1513.z);
        u_xlat55.x = x_1515;
        let x_1518 : f32 = u_xlat18.w;
        let x_1520 : f32 = u_xlat55.x;
        let x_1522 : f32 = u_xlat80;
        u_xlat80 = ((x_1518 * x_1520) + x_1522);
        let x_1525 : vec4<f32> = u_xlat16;
        let x_1526 : vec2<f32> = vec2<f32>(x_1525.x, x_1525.y);
        let x_1528 : f32 = u_xlat2.z;
        txVec21 = vec3<f32>(x_1526.x, x_1526.y, x_1528);
        let x_1535 : vec3<f32> = txVec21;
        let x_1537 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_LinearClampCompare, x_1535.xy, x_1535.z);
        u_xlat55.x = x_1537;
        let x_1540 : f32 = u_xlat19.x;
        let x_1542 : f32 = u_xlat55.x;
        let x_1544 : f32 = u_xlat80;
        u_xlat80 = ((x_1540 * x_1542) + x_1544);
        let x_1547 : vec4<f32> = u_xlat16;
        let x_1548 : vec2<f32> = vec2<f32>(x_1547.z, x_1547.w);
        let x_1550 : f32 = u_xlat2.z;
        txVec22 = vec3<f32>(x_1548.x, x_1548.y, x_1550);
        let x_1557 : vec3<f32> = txVec22;
        let x_1559 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_LinearClampCompare, x_1557.xy, x_1557.z);
        u_xlat55.x = x_1559;
        let x_1562 : f32 = u_xlat19.y;
        let x_1564 : f32 = u_xlat55.x;
        let x_1566 : f32 = u_xlat80;
        u_xlat80 = ((x_1562 * x_1564) + x_1566);
        let x_1569 : vec2<f32> = u_xlat34;
        let x_1571 : f32 = u_xlat2.z;
        txVec23 = vec3<f32>(x_1569.x, x_1569.y, x_1571);
        let x_1578 : vec3<f32> = txVec23;
        let x_1580 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_LinearClampCompare, x_1578.xy, x_1578.z);
        u_xlat55.x = x_1580;
        let x_1583 : f32 = u_xlat19.z;
        let x_1585 : f32 = u_xlat55.x;
        let x_1587 : f32 = u_xlat80;
        u_xlat80 = ((x_1583 * x_1585) + x_1587);
        let x_1590 : vec2<f32> = u_xlat66;
        let x_1592 : f32 = u_xlat2.z;
        txVec24 = vec3<f32>(x_1590.x, x_1590.y, x_1592);
        let x_1599 : vec3<f32> = txVec24;
        let x_1601 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_LinearClampCompare, x_1599.xy, x_1599.z);
        u_xlat55.x = x_1601;
        let x_1604 : f32 = u_xlat19.w;
        let x_1606 : f32 = u_xlat55.x;
        let x_1608 : f32 = u_xlat80;
        u_xlat80 = ((x_1604 * x_1606) + x_1608);
        let x_1611 : vec4<f32> = u_xlat11;
        let x_1612 : vec2<f32> = vec2<f32>(x_1611.x, x_1611.y);
        let x_1614 : f32 = u_xlat2.z;
        txVec25 = vec3<f32>(x_1612.x, x_1612.y, x_1614);
        let x_1621 : vec3<f32> = txVec25;
        let x_1623 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_LinearClampCompare, x_1621.xy, x_1621.z);
        u_xlat55.x = x_1623;
        let x_1626 : f32 = u_xlat7.x;
        let x_1628 : f32 = u_xlat55.x;
        let x_1630 : f32 = u_xlat80;
        u_xlat80 = ((x_1626 * x_1628) + x_1630);
        let x_1633 : vec4<f32> = u_xlat11;
        let x_1634 : vec2<f32> = vec2<f32>(x_1633.z, x_1633.w);
        let x_1636 : f32 = u_xlat2.z;
        txVec26 = vec3<f32>(x_1634.x, x_1634.y, x_1636);
        let x_1643 : vec3<f32> = txVec26;
        let x_1645 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_LinearClampCompare, x_1643.xy, x_1643.z);
        u_xlat55.x = x_1645;
        let x_1648 : f32 = u_xlat7.y;
        let x_1650 : f32 = u_xlat55.x;
        let x_1652 : f32 = u_xlat80;
        u_xlat80 = ((x_1648 * x_1650) + x_1652);
        let x_1655 : vec2<f32> = u_xlat61;
        let x_1657 : f32 = u_xlat2.z;
        txVec27 = vec3<f32>(x_1655.x, x_1655.y, x_1657);
        let x_1664 : vec3<f32> = txVec27;
        let x_1666 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_LinearClampCompare, x_1664.xy, x_1664.z);
        u_xlat55.x = x_1666;
        let x_1669 : f32 = u_xlat7.z;
        let x_1671 : f32 = u_xlat55.x;
        let x_1673 : f32 = u_xlat80;
        u_xlat80 = ((x_1669 * x_1671) + x_1673);
        let x_1676 : vec4<f32> = u_xlat3;
        let x_1677 : vec2<f32> = vec2<f32>(x_1676.x, x_1676.y);
        let x_1679 : f32 = u_xlat2.z;
        txVec28 = vec3<f32>(x_1677.x, x_1677.y, x_1679);
        let x_1686 : vec3<f32> = txVec28;
        let x_1688 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_LinearClampCompare, x_1686.xy, x_1686.z);
        u_xlat3.x = x_1688;
        let x_1691 : f32 = u_xlat7.w;
        let x_1693 : f32 = u_xlat3.x;
        let x_1695 : f32 = u_xlat80;
        u_xlat79 = ((x_1691 * x_1693) + x_1695);
      }
    }
  } else {
    let x_1699 : vec4<f32> = u_xlat2;
    let x_1700 : vec2<f32> = vec2<f32>(x_1699.x, x_1699.y);
    let x_1702 : f32 = u_xlat2.z;
    txVec29 = vec3<f32>(x_1700.x, x_1700.y, x_1702);
    let x_1709 : vec3<f32> = txVec29;
    let x_1711 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_LinearClampCompare, x_1709.xy, x_1709.z);
    u_xlat79 = x_1711;
  }
  let x_1713 : f32 = x_246.x_MainLightShadowParams.x;
  u_xlat80 = (-(x_1713) + 1.0f);
  let x_1716 : f32 = u_xlat79;
  let x_1718 : f32 = x_246.x_MainLightShadowParams.x;
  let x_1720 : f32 = u_xlat80;
  u_xlat79 = ((x_1716 * x_1718) + x_1720);
  let x_1724 : f32 = u_xlat2.z;
  u_xlatb3 = (0.0f >= x_1724);
  let x_1728 : f32 = u_xlat2.z;
  u_xlatb29 = (x_1728 >= 1.0f);
  let x_1730 : bool = u_xlatb29;
  let x_1731 : bool = u_xlatb3;
  u_xlatb3 = (x_1730 | x_1731);
  let x_1733 : bool = u_xlatb3;
  let x_1734 : f32 = u_xlat79;
  u_xlat79 = select(x_1734, 1.0f, x_1733);
  let x_1736 : vec3<f32> = u_xlat1;
  let x_1738 : vec4<f32> = x_128.x_MainLightPosition;
  u_xlat1.x = dot(x_1736, -(vec3<f32>(x_1738.x, x_1738.y, x_1738.z)));
  let x_1744 : f32 = u_xlat1.x;
  u_xlat1.x = clamp(x_1744, 0.0f, 1.0f);
  let x_1748 : f32 = u_xlat79;
  let x_1751 : vec4<f32> = x_128.x_MainLightColor;
  u_xlat27 = (vec3<f32>(x_1748, x_1748, x_1748) * vec3<f32>(x_1751.x, x_1751.y, x_1751.z));
  let x_1754 : vec3<f32> = u_xlat27;
  let x_1755 : vec3<f32> = u_xlat1;
  u_xlat1 = (x_1754 * vec3<f32>(x_1755.x, x_1755.x, x_1755.x));
  let x_1758 : vec3<f32> = u_xlat1;
  let x_1759 : vec4<f32> = u_xlat4;
  u_xlat1 = (x_1758 * vec3<f32>(x_1759.x, x_1759.y, x_1759.z));
  let x_1763 : f32 = u_xlat4.w;
  u_xlatb79 = (x_1763 >= 0.40000000596046447754f);
  let x_1766 : bool = u_xlatb79;
  if (x_1766) {
    let x_1772 : f32 = u_xlat4.w;
    x_1768 = x_1772;
  } else {
    x_1768 = 0.0f;
  }
  let x_1774 : f32 = x_1768;
  u_xlat79 = x_1774;
  let x_1776 : f32 = u_xlat4.w;
  u_xlat29.x = (x_1776 + -0.40000000596046447754f);
  let x_1781 : f32 = u_xlat4.w;
  u_xlat55.x = dpdxCoarse(x_1781);
  let x_1786 : f32 = u_xlat4.w;
  u_xlat81 = dpdyCoarse(x_1786);
  let x_1788 : f32 = u_xlat81;
  let x_1791 : f32 = u_xlat55.x;
  u_xlat55.x = (abs(x_1788) + abs(x_1791));
  let x_1796 : f32 = u_xlat55.x;
  u_xlat55.x = max(x_1796, 0.00009999999747378752f);
  let x_1801 : f32 = u_xlat29.x;
  let x_1803 : f32 = u_xlat55.x;
  u_xlat29.x = (x_1801 / x_1803);
  let x_1807 : f32 = u_xlat29.x;
  u_xlat29.x = (x_1807 + 0.5f);
  let x_1811 : f32 = u_xlat29.x;
  u_xlat29.x = clamp(x_1811, 0.0f, 1.0f);
  let x_1816 : f32 = x_128.x_AlphaToMaskAvailable;
  u_xlatb55 = !((x_1816 == 0.0f));
  let x_1818 : bool = u_xlatb55;
  if (x_1818) {
    let x_1823 : f32 = u_xlat29.x;
    x_1819 = x_1823;
  } else {
    let x_1825 : f32 = u_xlat79;
    x_1819 = x_1825;
  }
  let x_1826 : f32 = x_1819;
  u_xlat79 = x_1826;
  let x_1827 : f32 = u_xlat79;
  u_xlat29.x = (x_1827 + -0.00009999999747378752f);
  let x_1832 : f32 = u_xlat29.x;
  u_xlatb29 = (x_1832 < 0.0f);
  let x_1834 : bool = u_xlatb29;
  if (((select(0i, 1i, x_1834) * -1i) != 0i)) {
    discard;
  }
  let x_1842 : vec3<f32> = u_xlat26;
  let x_1843 : vec3<f32> = u_xlat32;
  u_xlat26 = (x_1842 * vec3<f32>(x_1843.y, x_1843.y, x_1843.y));
  let x_1846 : vec3<f32> = u_xlat32;
  let x_1848 : vec4<f32> = vs_INTERP4;
  let x_1851 : vec3<f32> = u_xlat26;
  u_xlat26 = ((vec3<f32>(x_1846.x, x_1846.x, x_1846.x) * vec3<f32>(x_1848.x, x_1848.y, x_1848.z)) + x_1851);
  let x_1853 : vec3<f32> = u_xlat32;
  let x_1855 : vec3<f32> = vs_INTERP9;
  let x_1857 : vec3<f32> = u_xlat26;
  u_xlat26 = ((vec3<f32>(x_1853.z, x_1853.z, x_1853.z) * x_1855) + x_1857);
  let x_1859 : vec3<f32> = u_xlat26;
  let x_1860 : vec3<f32> = u_xlat26;
  u_xlat29.x = dot(x_1859, x_1860);
  let x_1864 : f32 = u_xlat29.x;
  u_xlat29.x = inverseSqrt(x_1864);
  let x_1867 : vec3<f32> = u_xlat26;
  let x_1868 : vec3<f32> = u_xlat29;
  let x_1870 : vec3<f32> = (x_1867 * vec3<f32>(x_1868.x, x_1868.x, x_1868.x));
  let x_1871 : vec4<f32> = u_xlat4;
  u_xlat4 = vec4<f32>(x_1870.x, x_1870.y, x_1870.z, x_1871.w);
  let x_1874 : f32 = x_128.unity_OrthoParams.w;
  u_xlatb26.x = (x_1874 == 0.0f);
  let x_1877 : vec3<f32> = vs_INTERP8;
  let x_1881 : vec3<f32> = x_128.x_WorldSpaceCameraPos;
  u_xlat32 = (-(x_1877) + x_1881);
  let x_1884 : vec3<f32> = u_xlat32;
  let x_1885 : vec3<f32> = u_xlat32;
  u_xlat52 = dot(x_1884, x_1885);
  let x_1887 : f32 = u_xlat52;
  u_xlat52 = inverseSqrt(x_1887);
  let x_1889 : f32 = u_xlat52;
  let x_1891 : vec3<f32> = u_xlat32;
  u_xlat32 = (vec3<f32>(x_1889, x_1889, x_1889) * x_1891);
  let x_1894 : bool = u_xlatb26.x;
  if (x_1894) {
    let x_1899 : f32 = u_xlat32.x;
    x_1895 = x_1899;
  } else {
    let x_1902 : f32 = x_128.unity_MatrixV[0i].z;
    x_1895 = x_1902;
  }
  let x_1903 : f32 = x_1895;
  u_xlat7.x = x_1903;
  let x_1906 : bool = u_xlatb26.x;
  if (x_1906) {
    let x_1911 : f32 = u_xlat32.y;
    x_1907 = x_1911;
  } else {
    let x_1914 : f32 = x_128.unity_MatrixV[1i].z;
    x_1907 = x_1914;
  }
  let x_1915 : f32 = x_1907;
  u_xlat7.y = x_1915;
  let x_1918 : bool = u_xlatb26.x;
  if (x_1918) {
    let x_1923 : f32 = u_xlat32.z;
    x_1919 = x_1923;
  } else {
    let x_1926 : f32 = x_128.unity_MatrixV[2i].z;
    x_1919 = x_1926;
  }
  let x_1927 : f32 = x_1919;
  u_xlat7.z = x_1927;
  u_xlat4.w = 1.0f;
  let x_1932 : vec4<f32> = x_48.unity_SHAr;
  let x_1933 : vec4<f32> = u_xlat4;
  u_xlat8.x = dot(x_1932, x_1933);
  let x_1938 : vec4<f32> = x_48.unity_SHAg;
  let x_1939 : vec4<f32> = u_xlat4;
  u_xlat8.y = dot(x_1938, x_1939);
  let x_1944 : vec4<f32> = x_48.unity_SHAb;
  let x_1945 : vec4<f32> = u_xlat4;
  u_xlat8.z = dot(x_1944, x_1945);
  let x_1948 : vec4<f32> = u_xlat4;
  let x_1950 : vec4<f32> = u_xlat4;
  u_xlat9 = (vec4<f32>(x_1948.y, x_1948.z, x_1948.z, x_1948.x) * vec4<f32>(x_1950.x, x_1950.y, x_1950.z, x_1950.z));
  let x_1955 : vec4<f32> = x_48.unity_SHBr;
  let x_1956 : vec4<f32> = u_xlat9;
  u_xlat10.x = dot(x_1955, x_1956);
  let x_1961 : vec4<f32> = x_48.unity_SHBg;
  let x_1962 : vec4<f32> = u_xlat9;
  u_xlat10.y = dot(x_1961, x_1962);
  let x_1967 : vec4<f32> = x_48.unity_SHBb;
  let x_1968 : vec4<f32> = u_xlat9;
  u_xlat10.z = dot(x_1967, x_1968);
  let x_1972 : f32 = u_xlat4.y;
  let x_1974 : f32 = u_xlat4.y;
  u_xlat26.x = (x_1972 * x_1974);
  let x_1978 : f32 = u_xlat4.x;
  let x_1980 : f32 = u_xlat4.x;
  let x_1983 : f32 = u_xlat26.x;
  u_xlat26.x = ((x_1978 * x_1980) + -(x_1983));
  let x_1989 : vec4<f32> = x_48.unity_SHC;
  let x_1991 : vec3<f32> = u_xlat26;
  let x_1994 : vec4<f32> = u_xlat10;
  u_xlat26 = ((vec3<f32>(x_1989.x, x_1989.y, x_1989.z) * vec3<f32>(x_1991.x, x_1991.x, x_1991.x)) + vec3<f32>(x_1994.x, x_1994.y, x_1994.z));
  let x_1997 : vec3<f32> = u_xlat26;
  let x_1998 : vec4<f32> = u_xlat8;
  u_xlat26 = (x_1997 + vec3<f32>(x_1998.x, x_1998.y, x_1998.z));
  let x_2001 : vec3<f32> = u_xlat26;
  u_xlat26 = max(x_2001, vec3<f32>(0.0f, 0.0f, 0.0f));
  let x_2004 : f32 = u_xlat6.x;
  u_xlat6.x = x_2004;
  let x_2007 : f32 = u_xlat6.x;
  u_xlat6.x = clamp(x_2007, 0.0f, 1.0f);
  let x_2010 : f32 = u_xlat79;
  u_xlat79 = min(x_2010, 1.0f);
  let x_2012 : vec3<f32> = u_xlat5;
  u_xlat5 = (x_2012 * vec3<f32>(0.95999997854232788086f, 0.95999997854232788086f, 0.95999997854232788086f));
  let x_2017 : f32 = u_xlat6.x;
  u_xlat29.x = (-(x_2017) + 1.0f);
  let x_2022 : f32 = u_xlat29.x;
  let x_2024 : f32 = u_xlat29.x;
  u_xlat81 = (x_2022 * x_2024);
  let x_2026 : f32 = u_xlat81;
  u_xlat81 = max(x_2026, 0.0078125f);
  let x_2030 : f32 = u_xlat81;
  let x_2031 : f32 = u_xlat81;
  u_xlat82 = (x_2030 * x_2031);
  let x_2034 : f32 = u_xlat6.x;
  u_xlat83 = (x_2034 + 0.04000002145767211914f);
  let x_2037 : f32 = u_xlat83;
  u_xlat83 = min(x_2037, 1.0f);
  let x_2039 : f32 = u_xlat81;
  u_xlat6.x = ((x_2039 * 4.0f) + 2.0f);
  let x_2044 : f32 = vs_INTERP6.w;
  u_xlat32.x = min(x_2044, 1.0f);
  let x_2047 : bool = u_xlatb0;
  if (x_2047) {
    let x_2051 : f32 = x_246.x_MainLightShadowParams.y;
    u_xlatb0 = (x_2051 == 1.0f);
    let x_2053 : bool = u_xlatb0;
    if (x_2053) {
      let x_2056 : vec4<f32> = u_xlat2;
      let x_2059 : vec4<f32> = x_246.x_MainLightShadowOffset0;
      u_xlat8 = (vec4<f32>(x_2056.x, x_2056.y, x_2056.x, x_2056.y) + x_2059);
      let x_2062 : vec4<f32> = u_xlat8;
      let x_2063 : vec2<f32> = vec2<f32>(x_2062.x, x_2062.y);
      let x_2065 : f32 = u_xlat2.z;
      txVec30 = vec3<f32>(x_2063.x, x_2063.y, x_2065);
      let x_2072 : vec3<f32> = txVec30;
      let x_2074 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_LinearClampCompare, x_2072.xy, x_2072.z);
      u_xlat9.x = x_2074;
      let x_2077 : vec4<f32> = u_xlat8;
      let x_2078 : vec2<f32> = vec2<f32>(x_2077.z, x_2077.w);
      let x_2080 : f32 = u_xlat2.z;
      txVec31 = vec3<f32>(x_2078.x, x_2078.y, x_2080);
      let x_2087 : vec3<f32> = txVec31;
      let x_2089 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_LinearClampCompare, x_2087.xy, x_2087.z);
      u_xlat9.y = x_2089;
      let x_2091 : vec4<f32> = u_xlat2;
      let x_2094 : vec4<f32> = x_246.x_MainLightShadowOffset1;
      u_xlat8 = (vec4<f32>(x_2091.x, x_2091.y, x_2091.x, x_2091.y) + x_2094);
      let x_2097 : vec4<f32> = u_xlat8;
      let x_2098 : vec2<f32> = vec2<f32>(x_2097.x, x_2097.y);
      let x_2100 : f32 = u_xlat2.z;
      txVec32 = vec3<f32>(x_2098.x, x_2098.y, x_2100);
      let x_2107 : vec3<f32> = txVec32;
      let x_2109 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_LinearClampCompare, x_2107.xy, x_2107.z);
      u_xlat9.z = x_2109;
      let x_2112 : vec4<f32> = u_xlat8;
      let x_2113 : vec2<f32> = vec2<f32>(x_2112.z, x_2112.w);
      let x_2115 : f32 = u_xlat2.z;
      txVec33 = vec3<f32>(x_2113.x, x_2113.y, x_2115);
      let x_2122 : vec3<f32> = txVec33;
      let x_2124 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_LinearClampCompare, x_2122.xy, x_2122.z);
      u_xlat9.w = x_2124;
      let x_2126 : vec4<f32> = u_xlat9;
      u_xlat0.x = dot(x_2126, vec4<f32>(0.25f, 0.25f, 0.25f, 0.25f));
    } else {
      let x_2132 : f32 = x_246.x_MainLightShadowParams.y;
      u_xlatb58 = (x_2132 == 2.0f);
      let x_2134 : bool = u_xlatb58;
      if (x_2134) {
        let x_2138 : vec4<f32> = u_xlat2;
        let x_2141 : vec4<f32> = x_246.x_MainLightShadowmapSize;
        u_xlat58 = ((vec2<f32>(x_2138.x, x_2138.y) * vec2<f32>(x_2141.z, x_2141.w)) + vec2<f32>(0.5f, 0.5f));
        let x_2145 : vec2<f32> = u_xlat58;
        u_xlat58 = floor(x_2145);
        let x_2147 : vec4<f32> = u_xlat2;
        let x_2150 : vec4<f32> = x_246.x_MainLightShadowmapSize;
        let x_2153 : vec2<f32> = u_xlat58;
        let x_2155 : vec2<f32> = ((vec2<f32>(x_2147.x, x_2147.y) * vec2<f32>(x_2150.z, x_2150.w)) + -(x_2153));
        let x_2156 : vec4<f32> = u_xlat8;
        u_xlat8 = vec4<f32>(x_2155.x, x_2155.y, x_2156.z, x_2156.w);
        let x_2158 : vec4<f32> = u_xlat8;
        u_xlat9 = (vec4<f32>(x_2158.x, x_2158.x, x_2158.y, x_2158.y) + vec4<f32>(0.5f, 1.0f, 0.5f, 1.0f));
        let x_2161 : vec4<f32> = u_xlat9;
        let x_2163 : vec4<f32> = u_xlat9;
        u_xlat10 = (vec4<f32>(x_2161.x, x_2161.x, x_2161.z, x_2161.z) * vec4<f32>(x_2163.x, x_2163.x, x_2163.z, x_2163.z));
        let x_2166 : vec4<f32> = u_xlat10;
        u_xlat60 = (vec2<f32>(x_2166.y, x_2166.w) * vec2<f32>(0.07999999821186065674f, 0.07999999821186065674f));
        let x_2169 : vec4<f32> = u_xlat10;
        let x_2172 : vec4<f32> = u_xlat8;
        let x_2175 : vec2<f32> = ((vec2<f32>(x_2169.x, x_2169.z) * vec2<f32>(0.5f, 0.5f)) + -(vec2<f32>(x_2172.x, x_2172.y)));
        let x_2176 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_2175.x, x_2176.y, x_2175.y, x_2176.w);
        let x_2178 : vec4<f32> = u_xlat8;
        let x_2181 : vec2<f32> = (-(vec2<f32>(x_2178.x, x_2178.y)) + vec2<f32>(1.0f, 1.0f));
        let x_2182 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_2181.x, x_2181.y, x_2182.z, x_2182.w);
        let x_2185 : vec4<f32> = u_xlat8;
        u_xlat62 = min(vec2<f32>(x_2185.x, x_2185.y), vec2<f32>(0.0f, 0.0f));
        let x_2188 : vec2<f32> = u_xlat62;
        let x_2190 : vec2<f32> = u_xlat62;
        let x_2192 : vec4<f32> = u_xlat10;
        u_xlat62 = ((-(x_2188) * x_2190) + vec2<f32>(x_2192.x, x_2192.y));
        let x_2195 : vec4<f32> = u_xlat8;
        let x_2197 : vec2<f32> = max(vec2<f32>(x_2195.x, x_2195.y), vec2<f32>(0.0f, 0.0f));
        let x_2198 : vec4<f32> = u_xlat8;
        u_xlat8 = vec4<f32>(x_2197.x, x_2197.y, x_2198.z, x_2198.w);
        let x_2200 : vec4<f32> = u_xlat8;
        let x_2203 : vec4<f32> = u_xlat8;
        let x_2206 : vec4<f32> = u_xlat9;
        let x_2208 : vec2<f32> = ((-(vec2<f32>(x_2200.x, x_2200.y)) * vec2<f32>(x_2203.x, x_2203.y)) + vec2<f32>(x_2206.y, x_2206.w));
        let x_2209 : vec4<f32> = u_xlat8;
        u_xlat8 = vec4<f32>(x_2208.x, x_2208.y, x_2209.z, x_2209.w);
        let x_2211 : vec2<f32> = u_xlat62;
        u_xlat62 = (x_2211 + vec2<f32>(1.0f, 1.0f));
        let x_2213 : vec4<f32> = u_xlat8;
        let x_2215 : vec2<f32> = (vec2<f32>(x_2213.x, x_2213.y) + vec2<f32>(1.0f, 1.0f));
        let x_2216 : vec4<f32> = u_xlat8;
        u_xlat8 = vec4<f32>(x_2215.x, x_2215.y, x_2216.z, x_2216.w);
        let x_2218 : vec4<f32> = u_xlat9;
        let x_2220 : vec2<f32> = (vec2<f32>(x_2218.x, x_2218.z) * vec2<f32>(0.15999999642372131348f, 0.15999999642372131348f));
        let x_2221 : vec4<f32> = u_xlat11;
        u_xlat11 = vec4<f32>(x_2220.x, x_2220.y, x_2221.z, x_2221.w);
        let x_2223 : vec4<f32> = u_xlat10;
        let x_2225 : vec2<f32> = (vec2<f32>(x_2223.x, x_2223.y) * vec2<f32>(0.15999999642372131348f, 0.15999999642372131348f));
        let x_2226 : vec4<f32> = u_xlat12;
        u_xlat12 = vec4<f32>(x_2225.x, x_2225.y, x_2226.z, x_2226.w);
        let x_2228 : vec2<f32> = u_xlat62;
        let x_2229 : vec2<f32> = (x_2228 * vec2<f32>(0.15999999642372131348f, 0.15999999642372131348f));
        let x_2230 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_2229.x, x_2229.y, x_2230.z, x_2230.w);
        let x_2232 : vec4<f32> = u_xlat8;
        let x_2234 : vec2<f32> = (vec2<f32>(x_2232.x, x_2232.y) * vec2<f32>(0.15999999642372131348f, 0.15999999642372131348f));
        let x_2235 : vec4<f32> = u_xlat13;
        u_xlat13 = vec4<f32>(x_2234.x, x_2234.y, x_2235.z, x_2235.w);
        let x_2237 : vec4<f32> = u_xlat9;
        let x_2239 : vec2<f32> = (vec2<f32>(x_2237.y, x_2237.w) * vec2<f32>(0.15999999642372131348f, 0.15999999642372131348f));
        let x_2240 : vec4<f32> = u_xlat8;
        u_xlat8 = vec4<f32>(x_2239.x, x_2239.y, x_2240.z, x_2240.w);
        let x_2243 : f32 = u_xlat10.x;
        u_xlat11.z = x_2243;
        let x_2246 : f32 = u_xlat8.x;
        u_xlat11.w = x_2246;
        let x_2249 : f32 = u_xlat13.x;
        u_xlat12.z = x_2249;
        let x_2252 : f32 = u_xlat60.x;
        u_xlat12.w = x_2252;
        let x_2254 : vec4<f32> = u_xlat11;
        let x_2256 : vec4<f32> = u_xlat12;
        u_xlat9 = (vec4<f32>(x_2254.z, x_2254.w, x_2254.x, x_2254.z) + vec4<f32>(x_2256.z, x_2256.w, x_2256.x, x_2256.z));
        let x_2260 : f32 = u_xlat11.y;
        u_xlat10.z = x_2260;
        let x_2263 : f32 = u_xlat8.y;
        u_xlat10.w = x_2263;
        let x_2266 : f32 = u_xlat12.y;
        u_xlat13.z = x_2266;
        let x_2269 : f32 = u_xlat60.y;
        u_xlat13.w = x_2269;
        let x_2271 : vec4<f32> = u_xlat10;
        let x_2273 : vec4<f32> = u_xlat13;
        let x_2275 : vec3<f32> = (vec3<f32>(x_2271.z, x_2271.y, x_2271.w) + vec3<f32>(x_2273.z, x_2273.y, x_2273.w));
        let x_2276 : vec4<f32> = u_xlat8;
        u_xlat8 = vec4<f32>(x_2275.x, x_2275.y, x_2275.z, x_2276.w);
        let x_2278 : vec4<f32> = u_xlat12;
        let x_2280 : vec4<f32> = u_xlat9;
        let x_2282 : vec3<f32> = (vec3<f32>(x_2278.x, x_2278.z, x_2278.w) / vec3<f32>(x_2280.z, x_2280.w, x_2280.y));
        let x_2283 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_2282.x, x_2282.y, x_2282.z, x_2283.w);
        let x_2285 : vec4<f32> = u_xlat10;
        let x_2287 : vec3<f32> = (vec3<f32>(x_2285.x, x_2285.y, x_2285.z) + vec3<f32>(-2.5f, -0.5f, 1.5f));
        let x_2288 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_2287.x, x_2287.y, x_2287.z, x_2288.w);
        let x_2290 : vec4<f32> = u_xlat13;
        let x_2292 : vec4<f32> = u_xlat8;
        let x_2294 : vec3<f32> = (vec3<f32>(x_2290.z, x_2290.y, x_2290.w) / vec3<f32>(x_2292.x, x_2292.y, x_2292.z));
        let x_2295 : vec4<f32> = u_xlat11;
        u_xlat11 = vec4<f32>(x_2294.x, x_2294.y, x_2294.z, x_2295.w);
        let x_2297 : vec4<f32> = u_xlat11;
        let x_2299 : vec3<f32> = (vec3<f32>(x_2297.x, x_2297.y, x_2297.z) + vec3<f32>(-2.5f, -0.5f, 1.5f));
        let x_2300 : vec4<f32> = u_xlat11;
        u_xlat11 = vec4<f32>(x_2299.x, x_2299.y, x_2299.z, x_2300.w);
        let x_2302 : vec4<f32> = u_xlat10;
        let x_2305 : vec4<f32> = x_246.x_MainLightShadowmapSize;
        let x_2307 : vec3<f32> = (vec3<f32>(x_2302.y, x_2302.x, x_2302.z) * vec3<f32>(x_2305.x, x_2305.x, x_2305.x));
        let x_2308 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_2307.x, x_2307.y, x_2307.z, x_2308.w);
        let x_2310 : vec4<f32> = u_xlat11;
        let x_2313 : vec4<f32> = x_246.x_MainLightShadowmapSize;
        let x_2315 : vec3<f32> = (vec3<f32>(x_2310.x, x_2310.y, x_2310.z) * vec3<f32>(x_2313.y, x_2313.y, x_2313.y));
        let x_2316 : vec4<f32> = u_xlat11;
        u_xlat11 = vec4<f32>(x_2315.x, x_2315.y, x_2315.z, x_2316.w);
        let x_2319 : f32 = u_xlat11.x;
        u_xlat10.w = x_2319;
        let x_2321 : vec2<f32> = u_xlat58;
        let x_2324 : vec4<f32> = x_246.x_MainLightShadowmapSize;
        let x_2327 : vec4<f32> = u_xlat10;
        u_xlat12 = ((vec4<f32>(x_2321.x, x_2321.y, x_2321.x, x_2321.y) * vec4<f32>(x_2324.x, x_2324.y, x_2324.x, x_2324.y)) + vec4<f32>(x_2327.y, x_2327.w, x_2327.x, x_2327.w));
        let x_2330 : vec2<f32> = u_xlat58;
        let x_2332 : vec4<f32> = x_246.x_MainLightShadowmapSize;
        let x_2335 : vec4<f32> = u_xlat10;
        let x_2337 : vec2<f32> = ((x_2330 * vec2<f32>(x_2332.x, x_2332.y)) + vec2<f32>(x_2335.z, x_2335.w));
        let x_2338 : vec4<f32> = u_xlat13;
        u_xlat13 = vec4<f32>(x_2337.x, x_2337.y, x_2338.z, x_2338.w);
        let x_2341 : f32 = u_xlat10.y;
        u_xlat11.w = x_2341;
        let x_2343 : vec4<f32> = u_xlat11;
        let x_2344 : vec2<f32> = vec2<f32>(x_2343.y, x_2343.z);
        let x_2345 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_2345.x, x_2344.x, x_2345.z, x_2344.y);
        let x_2347 : vec2<f32> = u_xlat58;
        let x_2350 : vec4<f32> = x_246.x_MainLightShadowmapSize;
        let x_2353 : vec4<f32> = u_xlat10;
        u_xlat14 = ((vec4<f32>(x_2347.x, x_2347.y, x_2347.x, x_2347.y) * vec4<f32>(x_2350.x, x_2350.y, x_2350.x, x_2350.y)) + vec4<f32>(x_2353.x, x_2353.y, x_2353.z, x_2353.y));
        let x_2356 : vec2<f32> = u_xlat58;
        let x_2359 : vec4<f32> = x_246.x_MainLightShadowmapSize;
        let x_2362 : vec4<f32> = u_xlat11;
        u_xlat11 = ((vec4<f32>(x_2356.x, x_2356.y, x_2356.x, x_2356.y) * vec4<f32>(x_2359.x, x_2359.y, x_2359.x, x_2359.y)) + vec4<f32>(x_2362.w, x_2362.y, x_2362.w, x_2362.z));
        let x_2365 : vec2<f32> = u_xlat58;
        let x_2368 : vec4<f32> = x_246.x_MainLightShadowmapSize;
        let x_2371 : vec4<f32> = u_xlat10;
        u_xlat10 = ((vec4<f32>(x_2365.x, x_2365.y, x_2365.x, x_2365.y) * vec4<f32>(x_2368.x, x_2368.y, x_2368.x, x_2368.y)) + vec4<f32>(x_2371.x, x_2371.w, x_2371.z, x_2371.w));
        let x_2374 : vec4<f32> = u_xlat8;
        let x_2376 : vec4<f32> = u_xlat9;
        u_xlat15 = (vec4<f32>(x_2374.x, x_2374.x, x_2374.x, x_2374.y) * vec4<f32>(x_2376.z, x_2376.w, x_2376.y, x_2376.z));
        let x_2379 : vec4<f32> = u_xlat8;
        let x_2381 : vec4<f32> = u_xlat9;
        u_xlat16 = (vec4<f32>(x_2379.y, x_2379.y, x_2379.z, x_2379.z) * x_2381);
        let x_2384 : f32 = u_xlat8.z;
        let x_2386 : f32 = u_xlat9.y;
        u_xlat58.x = (x_2384 * x_2386);
        let x_2390 : vec4<f32> = u_xlat12;
        let x_2391 : vec2<f32> = vec2<f32>(x_2390.x, x_2390.y);
        let x_2393 : f32 = u_xlat2.z;
        txVec34 = vec3<f32>(x_2391.x, x_2391.y, x_2393);
        let x_2401 : vec3<f32> = txVec34;
        let x_2403 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_LinearClampCompare, x_2401.xy, x_2401.z);
        u_xlat84 = x_2403;
        let x_2405 : vec4<f32> = u_xlat12;
        let x_2406 : vec2<f32> = vec2<f32>(x_2405.z, x_2405.w);
        let x_2408 : f32 = u_xlat2.z;
        txVec35 = vec3<f32>(x_2406.x, x_2406.y, x_2408);
        let x_2416 : vec3<f32> = txVec35;
        let x_2418 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_LinearClampCompare, x_2416.xy, x_2416.z);
        u_xlat85 = x_2418;
        let x_2419 : f32 = u_xlat85;
        let x_2421 : f32 = u_xlat15.y;
        u_xlat85 = (x_2419 * x_2421);
        let x_2424 : f32 = u_xlat15.x;
        let x_2425 : f32 = u_xlat84;
        let x_2427 : f32 = u_xlat85;
        u_xlat84 = ((x_2424 * x_2425) + x_2427);
        let x_2430 : vec4<f32> = u_xlat13;
        let x_2431 : vec2<f32> = vec2<f32>(x_2430.x, x_2430.y);
        let x_2433 : f32 = u_xlat2.z;
        txVec36 = vec3<f32>(x_2431.x, x_2431.y, x_2433);
        let x_2440 : vec3<f32> = txVec36;
        let x_2442 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_LinearClampCompare, x_2440.xy, x_2440.z);
        u_xlat85 = x_2442;
        let x_2444 : f32 = u_xlat15.z;
        let x_2445 : f32 = u_xlat85;
        let x_2447 : f32 = u_xlat84;
        u_xlat84 = ((x_2444 * x_2445) + x_2447);
        let x_2450 : vec4<f32> = u_xlat11;
        let x_2451 : vec2<f32> = vec2<f32>(x_2450.x, x_2450.y);
        let x_2453 : f32 = u_xlat2.z;
        txVec37 = vec3<f32>(x_2451.x, x_2451.y, x_2453);
        let x_2460 : vec3<f32> = txVec37;
        let x_2462 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_LinearClampCompare, x_2460.xy, x_2460.z);
        u_xlat85 = x_2462;
        let x_2464 : f32 = u_xlat15.w;
        let x_2465 : f32 = u_xlat85;
        let x_2467 : f32 = u_xlat84;
        u_xlat84 = ((x_2464 * x_2465) + x_2467);
        let x_2470 : vec4<f32> = u_xlat14;
        let x_2471 : vec2<f32> = vec2<f32>(x_2470.x, x_2470.y);
        let x_2473 : f32 = u_xlat2.z;
        txVec38 = vec3<f32>(x_2471.x, x_2471.y, x_2473);
        let x_2480 : vec3<f32> = txVec38;
        let x_2482 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_LinearClampCompare, x_2480.xy, x_2480.z);
        u_xlat85 = x_2482;
        let x_2484 : f32 = u_xlat16.x;
        let x_2485 : f32 = u_xlat85;
        let x_2487 : f32 = u_xlat84;
        u_xlat84 = ((x_2484 * x_2485) + x_2487);
        let x_2490 : vec4<f32> = u_xlat14;
        let x_2491 : vec2<f32> = vec2<f32>(x_2490.z, x_2490.w);
        let x_2493 : f32 = u_xlat2.z;
        txVec39 = vec3<f32>(x_2491.x, x_2491.y, x_2493);
        let x_2500 : vec3<f32> = txVec39;
        let x_2502 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_LinearClampCompare, x_2500.xy, x_2500.z);
        u_xlat85 = x_2502;
        let x_2504 : f32 = u_xlat16.y;
        let x_2505 : f32 = u_xlat85;
        let x_2507 : f32 = u_xlat84;
        u_xlat84 = ((x_2504 * x_2505) + x_2507);
        let x_2510 : vec4<f32> = u_xlat11;
        let x_2511 : vec2<f32> = vec2<f32>(x_2510.z, x_2510.w);
        let x_2513 : f32 = u_xlat2.z;
        txVec40 = vec3<f32>(x_2511.x, x_2511.y, x_2513);
        let x_2520 : vec3<f32> = txVec40;
        let x_2522 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_LinearClampCompare, x_2520.xy, x_2520.z);
        u_xlat85 = x_2522;
        let x_2524 : f32 = u_xlat16.z;
        let x_2525 : f32 = u_xlat85;
        let x_2527 : f32 = u_xlat84;
        u_xlat84 = ((x_2524 * x_2525) + x_2527);
        let x_2530 : vec4<f32> = u_xlat10;
        let x_2531 : vec2<f32> = vec2<f32>(x_2530.x, x_2530.y);
        let x_2533 : f32 = u_xlat2.z;
        txVec41 = vec3<f32>(x_2531.x, x_2531.y, x_2533);
        let x_2540 : vec3<f32> = txVec41;
        let x_2542 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_LinearClampCompare, x_2540.xy, x_2540.z);
        u_xlat85 = x_2542;
        let x_2544 : f32 = u_xlat16.w;
        let x_2545 : f32 = u_xlat85;
        let x_2547 : f32 = u_xlat84;
        u_xlat84 = ((x_2544 * x_2545) + x_2547);
        let x_2550 : vec4<f32> = u_xlat10;
        let x_2551 : vec2<f32> = vec2<f32>(x_2550.z, x_2550.w);
        let x_2553 : f32 = u_xlat2.z;
        txVec42 = vec3<f32>(x_2551.x, x_2551.y, x_2553);
        let x_2560 : vec3<f32> = txVec42;
        let x_2562 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_LinearClampCompare, x_2560.xy, x_2560.z);
        u_xlat85 = x_2562;
        let x_2564 : f32 = u_xlat58.x;
        let x_2565 : f32 = u_xlat85;
        let x_2567 : f32 = u_xlat84;
        u_xlat0.x = ((x_2564 * x_2565) + x_2567);
      } else {
        let x_2571 : vec4<f32> = u_xlat2;
        let x_2574 : vec4<f32> = x_246.x_MainLightShadowmapSize;
        u_xlat58 = ((vec2<f32>(x_2571.x, x_2571.y) * vec2<f32>(x_2574.z, x_2574.w)) + vec2<f32>(0.5f, 0.5f));
        let x_2578 : vec2<f32> = u_xlat58;
        u_xlat58 = floor(x_2578);
        let x_2580 : vec4<f32> = u_xlat2;
        let x_2583 : vec4<f32> = x_246.x_MainLightShadowmapSize;
        let x_2586 : vec2<f32> = u_xlat58;
        let x_2588 : vec2<f32> = ((vec2<f32>(x_2580.x, x_2580.y) * vec2<f32>(x_2583.z, x_2583.w)) + -(x_2586));
        let x_2589 : vec4<f32> = u_xlat8;
        u_xlat8 = vec4<f32>(x_2588.x, x_2588.y, x_2589.z, x_2589.w);
        let x_2591 : vec4<f32> = u_xlat8;
        u_xlat9 = (vec4<f32>(x_2591.x, x_2591.x, x_2591.y, x_2591.y) + vec4<f32>(0.5f, 1.0f, 0.5f, 1.0f));
        let x_2594 : vec4<f32> = u_xlat9;
        let x_2596 : vec4<f32> = u_xlat9;
        u_xlat10 = (vec4<f32>(x_2594.x, x_2594.x, x_2594.z, x_2594.z) * vec4<f32>(x_2596.x, x_2596.x, x_2596.z, x_2596.z));
        let x_2599 : vec4<f32> = u_xlat10;
        let x_2601 : vec2<f32> = (vec2<f32>(x_2599.y, x_2599.w) * vec2<f32>(0.04081600159406661987f, 0.04081600159406661987f));
        let x_2602 : vec4<f32> = u_xlat11;
        u_xlat11 = vec4<f32>(x_2602.x, x_2601.x, x_2602.z, x_2601.y);
        let x_2604 : vec4<f32> = u_xlat10;
        let x_2607 : vec4<f32> = u_xlat8;
        u_xlat60 = ((vec2<f32>(x_2604.x, x_2604.z) * vec2<f32>(0.5f, 0.5f)) + -(vec2<f32>(x_2607.x, x_2607.y)));
        let x_2611 : vec4<f32> = u_xlat8;
        let x_2614 : vec2<f32> = (-(vec2<f32>(x_2611.x, x_2611.y)) + vec2<f32>(1.0f, 1.0f));
        let x_2615 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_2614.x, x_2615.y, x_2614.y, x_2615.w);
        let x_2617 : vec4<f32> = u_xlat8;
        let x_2619 : vec2<f32> = min(vec2<f32>(x_2617.x, x_2617.y), vec2<f32>(0.0f, 0.0f));
        let x_2620 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_2619.x, x_2619.y, x_2620.z, x_2620.w);
        let x_2622 : vec4<f32> = u_xlat10;
        let x_2625 : vec4<f32> = u_xlat10;
        let x_2628 : vec4<f32> = u_xlat9;
        let x_2630 : vec2<f32> = ((-(vec2<f32>(x_2622.x, x_2622.y)) * vec2<f32>(x_2625.x, x_2625.y)) + vec2<f32>(x_2628.x, x_2628.z));
        let x_2631 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_2630.x, x_2631.y, x_2630.y, x_2631.w);
        let x_2633 : vec4<f32> = u_xlat8;
        let x_2635 : vec2<f32> = max(vec2<f32>(x_2633.x, x_2633.y), vec2<f32>(0.0f, 0.0f));
        let x_2636 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_2635.x, x_2635.y, x_2636.z, x_2636.w);
        let x_2638 : vec4<f32> = u_xlat10;
        let x_2641 : vec4<f32> = u_xlat10;
        let x_2644 : vec4<f32> = u_xlat9;
        let x_2646 : vec2<f32> = ((-(vec2<f32>(x_2638.x, x_2638.y)) * vec2<f32>(x_2641.x, x_2641.y)) + vec2<f32>(x_2644.y, x_2644.w));
        let x_2647 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_2647.x, x_2646.x, x_2647.z, x_2646.y);
        let x_2649 : vec4<f32> = u_xlat9;
        u_xlat9 = (x_2649 + vec4<f32>(2.0f, 2.0f, 2.0f, 2.0f));
        let x_2652 : f32 = u_xlat9.y;
        u_xlat10.z = (x_2652 * 0.08163200318813323975f);
        let x_2655 : vec2<f32> = u_xlat60;
        let x_2657 : vec2<f32> = (vec2<f32>(x_2655.y, x_2655.x) * vec2<f32>(0.08163200318813323975f, 0.08163200318813323975f));
        let x_2658 : vec4<f32> = u_xlat12;
        u_xlat12 = vec4<f32>(x_2657.x, x_2657.y, x_2658.z, x_2658.w);
        let x_2660 : vec4<f32> = u_xlat9;
        u_xlat60 = (vec2<f32>(x_2660.x, x_2660.z) * vec2<f32>(0.08163200318813323975f, 0.08163200318813323975f));
        let x_2664 : f32 = u_xlat9.w;
        u_xlat12.z = (x_2664 * 0.08163200318813323975f);
        let x_2668 : f32 = u_xlat12.y;
        u_xlat10.x = x_2668;
        let x_2670 : vec4<f32> = u_xlat8;
        let x_2673 : vec2<f32> = ((vec2<f32>(x_2670.x, x_2670.x) * vec2<f32>(-0.08163200318813323975f, 0.08163200318813323975f)) + vec2<f32>(0.16326400637626647949f, 0.08163200318813323975f));
        let x_2674 : vec4<f32> = u_xlat10;
        u_xlat10 = vec4<f32>(x_2674.x, x_2673.x, x_2674.z, x_2673.y);
        let x_2676 : vec4<f32> = u_xlat8;
        let x_2679 : vec2<f32> = ((vec2<f32>(x_2676.x, x_2676.x) * vec2<f32>(-0.08163200318813323975f, 0.08163200318813323975f)) + vec2<f32>(0.08163200318813323975f, 0.16326400637626647949f));
        let x_2680 : vec4<f32> = u_xlat9;
        u_xlat9 = vec4<f32>(x_2679.x, x_2680.y, x_2679.y, x_2680.w);
        let x_2683 : f32 = u_xlat60.x;
        u_xlat9.y = x_2683;
        let x_2686 : f32 = u_xlat11.y;
        u_xlat9.w = x_2686;
        let x_2688 : vec4<f32> = u_xlat9;
        let x_2689 : vec4<f32> = u_xlat10;
        u_xlat10 = (x_2688 + x_2689);
        let x_2691 : vec4<f32> = u_xlat8;
        let x_2694 : vec2<f32> = ((vec2<f32>(x_2691.y, x_2691.y) * vec2<f32>(-0.08163200318813323975f, 0.08163200318813323975f)) + vec2<f32>(0.16326400637626647949f, 0.08163200318813323975f));
        let x_2695 : vec4<f32> = u_xlat12;
        u_xlat12 = vec4<f32>(x_2695.x, x_2694.x, x_2695.z, x_2694.y);
        let x_2697 : vec4<f32> = u_xlat8;
        let x_2700 : vec2<f32> = ((vec2<f32>(x_2697.y, x_2697.y) * vec2<f32>(-0.08163200318813323975f, 0.08163200318813323975f)) + vec2<f32>(0.08163200318813323975f, 0.16326400637626647949f));
        let x_2701 : vec4<f32> = u_xlat11;
        u_xlat11 = vec4<f32>(x_2700.x, x_2701.y, x_2700.y, x_2701.w);
        let x_2704 : f32 = u_xlat60.y;
        u_xlat11.y = x_2704;
        let x_2706 : vec4<f32> = u_xlat11;
        let x_2707 : vec4<f32> = u_xlat12;
        u_xlat8 = (x_2706 + x_2707);
        let x_2709 : vec4<f32> = u_xlat9;
        let x_2710 : vec4<f32> = u_xlat10;
        u_xlat9 = (x_2709 / x_2710);
        let x_2712 : vec4<f32> = u_xlat9;
        u_xlat9 = (x_2712 + vec4<f32>(-3.5f, -1.5f, 0.5f, 2.5f));
        let x_2714 : vec4<f32> = u_xlat11;
        let x_2715 : vec4<f32> = u_xlat8;
        u_xlat11 = (x_2714 / x_2715);
        let x_2717 : vec4<f32> = u_xlat11;
        u_xlat11 = (x_2717 + vec4<f32>(-3.5f, -1.5f, 0.5f, 2.5f));
        let x_2719 : vec4<f32> = u_xlat9;
        let x_2722 : vec4<f32> = x_246.x_MainLightShadowmapSize;
        u_xlat9 = (vec4<f32>(x_2719.w, x_2719.x, x_2719.y, x_2719.z) * vec4<f32>(x_2722.x, x_2722.x, x_2722.x, x_2722.x));
        let x_2725 : vec4<f32> = u_xlat11;
        let x_2728 : vec4<f32> = x_246.x_MainLightShadowmapSize;
        u_xlat11 = (vec4<f32>(x_2725.x, x_2725.w, x_2725.y, x_2725.z) * vec4<f32>(x_2728.y, x_2728.y, x_2728.y, x_2728.y));
        let x_2731 : vec4<f32> = u_xlat9;
        let x_2732 : vec3<f32> = vec3<f32>(x_2731.y, x_2731.z, x_2731.w);
        let x_2733 : vec4<f32> = u_xlat12;
        u_xlat12 = vec4<f32>(x_2732.x, x_2733.y, x_2732.y, x_2732.z);
        let x_2736 : f32 = u_xlat11.x;
        u_xlat12.y = x_2736;
        let x_2738 : vec2<f32> = u_xlat58;
        let x_2741 : vec4<f32> = x_246.x_MainLightShadowmapSize;
        let x_2744 : vec4<f32> = u_xlat12;
        u_xlat13 = ((vec4<f32>(x_2738.x, x_2738.y, x_2738.x, x_2738.y) * vec4<f32>(x_2741.x, x_2741.y, x_2741.x, x_2741.y)) + vec4<f32>(x_2744.x, x_2744.y, x_2744.z, x_2744.y));
        let x_2747 : vec2<f32> = u_xlat58;
        let x_2749 : vec4<f32> = x_246.x_MainLightShadowmapSize;
        let x_2752 : vec4<f32> = u_xlat12;
        let x_2754 : vec2<f32> = ((x_2747 * vec2<f32>(x_2749.x, x_2749.y)) + vec2<f32>(x_2752.w, x_2752.y));
        let x_2755 : vec4<f32> = u_xlat14;
        u_xlat14 = vec4<f32>(x_2754.x, x_2754.y, x_2755.z, x_2755.w);
        let x_2758 : f32 = u_xlat12.y;
        u_xlat9.y = x_2758;
        let x_2761 : f32 = u_xlat11.z;
        u_xlat12.y = x_2761;
        let x_2763 : vec2<f32> = u_xlat58;
        let x_2766 : vec4<f32> = x_246.x_MainLightShadowmapSize;
        let x_2769 : vec4<f32> = u_xlat12;
        u_xlat15 = ((vec4<f32>(x_2763.x, x_2763.y, x_2763.x, x_2763.y) * vec4<f32>(x_2766.x, x_2766.y, x_2766.x, x_2766.y)) + vec4<f32>(x_2769.x, x_2769.y, x_2769.z, x_2769.y));
        let x_2772 : vec2<f32> = u_xlat58;
        let x_2774 : vec4<f32> = x_246.x_MainLightShadowmapSize;
        let x_2777 : vec4<f32> = u_xlat12;
        u_xlat66 = ((x_2772 * vec2<f32>(x_2774.x, x_2774.y)) + vec2<f32>(x_2777.w, x_2777.y));
        let x_2781 : f32 = u_xlat12.y;
        u_xlat9.z = x_2781;
        let x_2783 : vec2<f32> = u_xlat58;
        let x_2786 : vec4<f32> = x_246.x_MainLightShadowmapSize;
        let x_2789 : vec4<f32> = u_xlat9;
        u_xlat16 = ((vec4<f32>(x_2783.x, x_2783.y, x_2783.x, x_2783.y) * vec4<f32>(x_2786.x, x_2786.y, x_2786.x, x_2786.y)) + vec4<f32>(x_2789.x, x_2789.y, x_2789.x, x_2789.z));
        let x_2793 : f32 = u_xlat11.w;
        u_xlat12.y = x_2793;
        let x_2795 : vec2<f32> = u_xlat58;
        let x_2798 : vec4<f32> = x_246.x_MainLightShadowmapSize;
        let x_2801 : vec4<f32> = u_xlat12;
        u_xlat17 = ((vec4<f32>(x_2795.x, x_2795.y, x_2795.x, x_2795.y) * vec4<f32>(x_2798.x, x_2798.y, x_2798.x, x_2798.y)) + vec4<f32>(x_2801.x, x_2801.y, x_2801.z, x_2801.y));
        let x_2805 : vec2<f32> = u_xlat58;
        let x_2807 : vec4<f32> = x_246.x_MainLightShadowmapSize;
        let x_2810 : vec4<f32> = u_xlat12;
        u_xlat35 = ((x_2805 * vec2<f32>(x_2807.x, x_2807.y)) + vec2<f32>(x_2810.w, x_2810.y));
        let x_2814 : f32 = u_xlat12.y;
        u_xlat9.w = x_2814;
        let x_2816 : vec2<f32> = u_xlat58;
        let x_2818 : vec4<f32> = x_246.x_MainLightShadowmapSize;
        let x_2821 : vec4<f32> = u_xlat9;
        let x_2823 : vec2<f32> = ((x_2816 * vec2<f32>(x_2818.x, x_2818.y)) + vec2<f32>(x_2821.x, x_2821.w));
        let x_2824 : vec4<f32> = u_xlat18;
        u_xlat18 = vec4<f32>(x_2823.x, x_2823.y, x_2824.z, x_2824.w);
        let x_2826 : vec4<f32> = u_xlat12;
        let x_2827 : vec3<f32> = vec3<f32>(x_2826.x, x_2826.z, x_2826.w);
        let x_2828 : vec4<f32> = u_xlat11;
        u_xlat11 = vec4<f32>(x_2827.x, x_2828.y, x_2827.y, x_2827.z);
        let x_2830 : vec2<f32> = u_xlat58;
        let x_2833 : vec4<f32> = x_246.x_MainLightShadowmapSize;
        let x_2836 : vec4<f32> = u_xlat11;
        u_xlat12 = ((vec4<f32>(x_2830.x, x_2830.y, x_2830.x, x_2830.y) * vec4<f32>(x_2833.x, x_2833.y, x_2833.x, x_2833.y)) + vec4<f32>(x_2836.x, x_2836.y, x_2836.z, x_2836.y));
        let x_2840 : vec2<f32> = u_xlat58;
        let x_2842 : vec4<f32> = x_246.x_MainLightShadowmapSize;
        let x_2845 : vec4<f32> = u_xlat11;
        u_xlat63 = ((x_2840 * vec2<f32>(x_2842.x, x_2842.y)) + vec2<f32>(x_2845.w, x_2845.y));
        let x_2849 : f32 = u_xlat9.x;
        u_xlat11.x = x_2849;
        let x_2851 : vec2<f32> = u_xlat58;
        let x_2853 : vec4<f32> = x_246.x_MainLightShadowmapSize;
        let x_2856 : vec4<f32> = u_xlat11;
        u_xlat58 = ((x_2851 * vec2<f32>(x_2853.x, x_2853.y)) + vec2<f32>(x_2856.x, x_2856.y));
        let x_2859 : vec4<f32> = u_xlat8;
        let x_2861 : vec4<f32> = u_xlat10;
        u_xlat19 = (vec4<f32>(x_2859.x, x_2859.x, x_2859.x, x_2859.x) * x_2861);
        let x_2864 : vec4<f32> = u_xlat8;
        let x_2866 : vec4<f32> = u_xlat10;
        u_xlat20 = (vec4<f32>(x_2864.y, x_2864.y, x_2864.y, x_2864.y) * x_2866);
        let x_2869 : vec4<f32> = u_xlat8;
        let x_2871 : vec4<f32> = u_xlat10;
        u_xlat21 = (vec4<f32>(x_2869.z, x_2869.z, x_2869.z, x_2869.z) * x_2871);
        let x_2873 : vec4<f32> = u_xlat8;
        let x_2875 : vec4<f32> = u_xlat10;
        u_xlat8 = (vec4<f32>(x_2873.w, x_2873.w, x_2873.w, x_2873.w) * x_2875);
        let x_2878 : vec4<f32> = u_xlat13;
        let x_2879 : vec2<f32> = vec2<f32>(x_2878.x, x_2878.y);
        let x_2881 : f32 = u_xlat2.z;
        txVec43 = vec3<f32>(x_2879.x, x_2879.y, x_2881);
        let x_2888 : vec3<f32> = txVec43;
        let x_2890 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_LinearClampCompare, x_2888.xy, x_2888.z);
        u_xlat85 = x_2890;
        let x_2892 : vec4<f32> = u_xlat13;
        let x_2893 : vec2<f32> = vec2<f32>(x_2892.z, x_2892.w);
        let x_2895 : f32 = u_xlat2.z;
        txVec44 = vec3<f32>(x_2893.x, x_2893.y, x_2895);
        let x_2902 : vec3<f32> = txVec44;
        let x_2904 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_LinearClampCompare, x_2902.xy, x_2902.z);
        u_xlat9.x = x_2904;
        let x_2907 : f32 = u_xlat9.x;
        let x_2909 : f32 = u_xlat19.y;
        u_xlat9.x = (x_2907 * x_2909);
        let x_2913 : f32 = u_xlat19.x;
        let x_2914 : f32 = u_xlat85;
        let x_2917 : f32 = u_xlat9.x;
        u_xlat85 = ((x_2913 * x_2914) + x_2917);
        let x_2920 : vec4<f32> = u_xlat14;
        let x_2921 : vec2<f32> = vec2<f32>(x_2920.x, x_2920.y);
        let x_2923 : f32 = u_xlat2.z;
        txVec45 = vec3<f32>(x_2921.x, x_2921.y, x_2923);
        let x_2930 : vec3<f32> = txVec45;
        let x_2932 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_LinearClampCompare, x_2930.xy, x_2930.z);
        u_xlat9.x = x_2932;
        let x_2935 : f32 = u_xlat19.z;
        let x_2937 : f32 = u_xlat9.x;
        let x_2939 : f32 = u_xlat85;
        u_xlat85 = ((x_2935 * x_2937) + x_2939);
        let x_2942 : vec4<f32> = u_xlat16;
        let x_2943 : vec2<f32> = vec2<f32>(x_2942.x, x_2942.y);
        let x_2945 : f32 = u_xlat2.z;
        txVec46 = vec3<f32>(x_2943.x, x_2943.y, x_2945);
        let x_2952 : vec3<f32> = txVec46;
        let x_2954 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_LinearClampCompare, x_2952.xy, x_2952.z);
        u_xlat9.x = x_2954;
        let x_2957 : f32 = u_xlat19.w;
        let x_2959 : f32 = u_xlat9.x;
        let x_2961 : f32 = u_xlat85;
        u_xlat85 = ((x_2957 * x_2959) + x_2961);
        let x_2964 : vec4<f32> = u_xlat15;
        let x_2965 : vec2<f32> = vec2<f32>(x_2964.x, x_2964.y);
        let x_2967 : f32 = u_xlat2.z;
        txVec47 = vec3<f32>(x_2965.x, x_2965.y, x_2967);
        let x_2974 : vec3<f32> = txVec47;
        let x_2976 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_LinearClampCompare, x_2974.xy, x_2974.z);
        u_xlat9.x = x_2976;
        let x_2979 : f32 = u_xlat20.x;
        let x_2981 : f32 = u_xlat9.x;
        let x_2983 : f32 = u_xlat85;
        u_xlat85 = ((x_2979 * x_2981) + x_2983);
        let x_2986 : vec4<f32> = u_xlat15;
        let x_2987 : vec2<f32> = vec2<f32>(x_2986.z, x_2986.w);
        let x_2989 : f32 = u_xlat2.z;
        txVec48 = vec3<f32>(x_2987.x, x_2987.y, x_2989);
        let x_2996 : vec3<f32> = txVec48;
        let x_2998 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_LinearClampCompare, x_2996.xy, x_2996.z);
        u_xlat9.x = x_2998;
        let x_3001 : f32 = u_xlat20.y;
        let x_3003 : f32 = u_xlat9.x;
        let x_3005 : f32 = u_xlat85;
        u_xlat85 = ((x_3001 * x_3003) + x_3005);
        let x_3008 : vec2<f32> = u_xlat66;
        let x_3010 : f32 = u_xlat2.z;
        txVec49 = vec3<f32>(x_3008.x, x_3008.y, x_3010);
        let x_3017 : vec3<f32> = txVec49;
        let x_3019 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_LinearClampCompare, x_3017.xy, x_3017.z);
        u_xlat9.x = x_3019;
        let x_3022 : f32 = u_xlat20.z;
        let x_3024 : f32 = u_xlat9.x;
        let x_3026 : f32 = u_xlat85;
        u_xlat85 = ((x_3022 * x_3024) + x_3026);
        let x_3029 : vec4<f32> = u_xlat16;
        let x_3030 : vec2<f32> = vec2<f32>(x_3029.z, x_3029.w);
        let x_3032 : f32 = u_xlat2.z;
        txVec50 = vec3<f32>(x_3030.x, x_3030.y, x_3032);
        let x_3039 : vec3<f32> = txVec50;
        let x_3041 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_LinearClampCompare, x_3039.xy, x_3039.z);
        u_xlat9.x = x_3041;
        let x_3044 : f32 = u_xlat20.w;
        let x_3046 : f32 = u_xlat9.x;
        let x_3048 : f32 = u_xlat85;
        u_xlat85 = ((x_3044 * x_3046) + x_3048);
        let x_3051 : vec4<f32> = u_xlat17;
        let x_3052 : vec2<f32> = vec2<f32>(x_3051.x, x_3051.y);
        let x_3054 : f32 = u_xlat2.z;
        txVec51 = vec3<f32>(x_3052.x, x_3052.y, x_3054);
        let x_3061 : vec3<f32> = txVec51;
        let x_3063 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_LinearClampCompare, x_3061.xy, x_3061.z);
        u_xlat9.x = x_3063;
        let x_3066 : f32 = u_xlat21.x;
        let x_3068 : f32 = u_xlat9.x;
        let x_3070 : f32 = u_xlat85;
        u_xlat85 = ((x_3066 * x_3068) + x_3070);
        let x_3073 : vec4<f32> = u_xlat17;
        let x_3074 : vec2<f32> = vec2<f32>(x_3073.z, x_3073.w);
        let x_3076 : f32 = u_xlat2.z;
        txVec52 = vec3<f32>(x_3074.x, x_3074.y, x_3076);
        let x_3083 : vec3<f32> = txVec52;
        let x_3085 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_LinearClampCompare, x_3083.xy, x_3083.z);
        u_xlat9.x = x_3085;
        let x_3088 : f32 = u_xlat21.y;
        let x_3090 : f32 = u_xlat9.x;
        let x_3092 : f32 = u_xlat85;
        u_xlat85 = ((x_3088 * x_3090) + x_3092);
        let x_3095 : vec2<f32> = u_xlat35;
        let x_3097 : f32 = u_xlat2.z;
        txVec53 = vec3<f32>(x_3095.x, x_3095.y, x_3097);
        let x_3104 : vec3<f32> = txVec53;
        let x_3106 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_LinearClampCompare, x_3104.xy, x_3104.z);
        u_xlat9.x = x_3106;
        let x_3109 : f32 = u_xlat21.z;
        let x_3111 : f32 = u_xlat9.x;
        let x_3113 : f32 = u_xlat85;
        u_xlat85 = ((x_3109 * x_3111) + x_3113);
        let x_3116 : vec4<f32> = u_xlat18;
        let x_3117 : vec2<f32> = vec2<f32>(x_3116.x, x_3116.y);
        let x_3119 : f32 = u_xlat2.z;
        txVec54 = vec3<f32>(x_3117.x, x_3117.y, x_3119);
        let x_3126 : vec3<f32> = txVec54;
        let x_3128 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_LinearClampCompare, x_3126.xy, x_3126.z);
        u_xlat9.x = x_3128;
        let x_3131 : f32 = u_xlat21.w;
        let x_3133 : f32 = u_xlat9.x;
        let x_3135 : f32 = u_xlat85;
        u_xlat85 = ((x_3131 * x_3133) + x_3135);
        let x_3138 : vec4<f32> = u_xlat12;
        let x_3139 : vec2<f32> = vec2<f32>(x_3138.x, x_3138.y);
        let x_3141 : f32 = u_xlat2.z;
        txVec55 = vec3<f32>(x_3139.x, x_3139.y, x_3141);
        let x_3148 : vec3<f32> = txVec55;
        let x_3150 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_LinearClampCompare, x_3148.xy, x_3148.z);
        u_xlat9.x = x_3150;
        let x_3153 : f32 = u_xlat8.x;
        let x_3155 : f32 = u_xlat9.x;
        let x_3157 : f32 = u_xlat85;
        u_xlat85 = ((x_3153 * x_3155) + x_3157);
        let x_3160 : vec4<f32> = u_xlat12;
        let x_3161 : vec2<f32> = vec2<f32>(x_3160.z, x_3160.w);
        let x_3163 : f32 = u_xlat2.z;
        txVec56 = vec3<f32>(x_3161.x, x_3161.y, x_3163);
        let x_3170 : vec3<f32> = txVec56;
        let x_3172 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_LinearClampCompare, x_3170.xy, x_3170.z);
        u_xlat8.x = x_3172;
        let x_3175 : f32 = u_xlat8.y;
        let x_3177 : f32 = u_xlat8.x;
        let x_3179 : f32 = u_xlat85;
        u_xlat85 = ((x_3175 * x_3177) + x_3179);
        let x_3182 : vec2<f32> = u_xlat63;
        let x_3184 : f32 = u_xlat2.z;
        txVec57 = vec3<f32>(x_3182.x, x_3182.y, x_3184);
        let x_3191 : vec3<f32> = txVec57;
        let x_3193 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_LinearClampCompare, x_3191.xy, x_3191.z);
        u_xlat8.x = x_3193;
        let x_3196 : f32 = u_xlat8.z;
        let x_3198 : f32 = u_xlat8.x;
        let x_3200 : f32 = u_xlat85;
        u_xlat85 = ((x_3196 * x_3198) + x_3200);
        let x_3203 : vec2<f32> = u_xlat58;
        let x_3205 : f32 = u_xlat2.z;
        txVec58 = vec3<f32>(x_3203.x, x_3203.y, x_3205);
        let x_3212 : vec3<f32> = txVec58;
        let x_3214 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_LinearClampCompare, x_3212.xy, x_3212.z);
        u_xlat58.x = x_3214;
        let x_3217 : f32 = u_xlat8.w;
        let x_3219 : f32 = u_xlat58.x;
        let x_3221 : f32 = u_xlat85;
        u_xlat0.x = ((x_3217 * x_3219) + x_3221);
      }
    }
  } else {
    let x_3226 : vec4<f32> = u_xlat2;
    let x_3227 : vec2<f32> = vec2<f32>(x_3226.x, x_3226.y);
    let x_3229 : f32 = u_xlat2.z;
    txVec59 = vec3<f32>(x_3227.x, x_3227.y, x_3229);
    let x_3236 : vec3<f32> = txVec59;
    let x_3238 : f32 = textureSampleCompareLevel(x_MainLightShadowmapTexture, sampler_LinearClampCompare, x_3236.xy, x_3236.z);
    u_xlat0.x = x_3238;
  }
  let x_3241 : f32 = u_xlat0.x;
  let x_3243 : f32 = x_246.x_MainLightShadowParams.x;
  let x_3245 : f32 = u_xlat80;
  u_xlat0.x = ((x_3241 * x_3243) + x_3245);
  let x_3248 : bool = u_xlatb3;
  if (x_3248) {
    x_3249 = 1.0f;
  } else {
    let x_3254 : f32 = u_xlat0.x;
    x_3249 = x_3254;
  }
  let x_3255 : f32 = x_3249;
  u_xlat0.x = x_3255;
  let x_3257 : vec3<f32> = vs_INTERP8;
  let x_3259 : vec3<f32> = x_128.x_WorldSpaceCameraPos;
  let x_3261 : vec3<f32> = (x_3257 + -(x_3259));
  let x_3262 : vec4<f32> = u_xlat2;
  u_xlat2 = vec4<f32>(x_3261.x, x_3261.y, x_3261.z, x_3262.w);
  let x_3264 : vec4<f32> = u_xlat2;
  let x_3266 : vec4<f32> = u_xlat2;
  u_xlat2.x = dot(vec3<f32>(x_3264.x, x_3264.y, x_3264.z), vec3<f32>(x_3266.x, x_3266.y, x_3266.z));
  let x_3272 : f32 = u_xlat2.x;
  let x_3274 : f32 = x_246.x_MainLightShadowParams.z;
  let x_3277 : f32 = x_246.x_MainLightShadowParams.w;
  u_xlat28.x = ((x_3272 * x_3274) + x_3277);
  let x_3281 : f32 = u_xlat28.x;
  u_xlat28.x = clamp(x_3281, 0.0f, 1.0f);
  let x_3286 : f32 = u_xlat0.x;
  u_xlat54 = (-(x_3286) + 1.0f);
  let x_3290 : f32 = u_xlat28.x;
  let x_3291 : f32 = u_xlat54;
  let x_3294 : f32 = u_xlat0.x;
  u_xlat0.x = ((x_3290 * x_3291) + x_3294);
  let x_3297 : vec4<f32> = u_xlat7;
  let x_3300 : vec4<f32> = u_xlat4;
  u_xlat28.x = dot(-(vec3<f32>(x_3297.x, x_3297.y, x_3297.z)), vec3<f32>(x_3300.x, x_3300.y, x_3300.z));
  let x_3305 : f32 = u_xlat28.x;
  let x_3307 : f32 = u_xlat28.x;
  u_xlat28.x = (x_3305 + x_3307);
  let x_3310 : vec4<f32> = u_xlat4;
  let x_3312 : vec3<f32> = u_xlat28;
  let x_3316 : vec4<f32> = u_xlat7;
  u_xlat28 = ((vec3<f32>(x_3310.x, x_3310.y, x_3310.z) * -(vec3<f32>(x_3312.x, x_3312.x, x_3312.x))) + -(vec3<f32>(x_3316.x, x_3316.y, x_3316.z)));
  let x_3320 : vec4<f32> = u_xlat4;
  let x_3322 : vec4<f32> = u_xlat7;
  u_xlat3.x = dot(vec3<f32>(x_3320.x, x_3320.y, x_3320.z), vec3<f32>(x_3322.x, x_3322.y, x_3322.z));
  let x_3327 : f32 = u_xlat3.x;
  u_xlat3.x = clamp(x_3327, 0.0f, 1.0f);
  let x_3331 : f32 = u_xlat3.x;
  u_xlat3.x = (-(x_3331) + 1.0f);
  let x_3336 : f32 = u_xlat3.x;
  let x_3338 : f32 = u_xlat3.x;
  u_xlat3.x = (x_3336 * x_3338);
  let x_3342 : f32 = u_xlat3.x;
  let x_3344 : f32 = u_xlat3.x;
  u_xlat3.x = (x_3342 * x_3344);
  let x_3348 : f32 = u_xlat29.x;
  u_xlat58.x = ((-(x_3348) * 0.69999998807907104492f) + 1.70000004768371582031f);
  let x_3356 : f32 = u_xlat29.x;
  let x_3358 : f32 = u_xlat58.x;
  u_xlat29.x = (x_3356 * x_3358);
  let x_3362 : f32 = u_xlat29.x;
  u_xlat29.x = (x_3362 * 6.0f);
  let x_3374 : vec3<f32> = u_xlat28;
  let x_3376 : f32 = u_xlat29.x;
  let x_3377 : vec4<f32> = textureSampleLevel(unity_SpecCube0, samplerunity_SpecCube0, x_3374, x_3376);
  u_xlat8 = x_3377;
  let x_3379 : f32 = u_xlat8.w;
  u_xlat28.x = (x_3379 + -1.0f);
  let x_3383 : f32 = x_48.unity_SpecCube0_HDR.w;
  let x_3385 : f32 = u_xlat28.x;
  u_xlat28.x = ((x_3383 * x_3385) + 1.0f);
  let x_3390 : f32 = u_xlat28.x;
  u_xlat28.x = max(x_3390, 0.0f);
  let x_3394 : f32 = u_xlat28.x;
  u_xlat28.x = log2(x_3394);
  let x_3398 : f32 = u_xlat28.x;
  let x_3400 : f32 = x_48.unity_SpecCube0_HDR.y;
  u_xlat28.x = (x_3398 * x_3400);
  let x_3404 : f32 = u_xlat28.x;
  u_xlat28.x = exp2(x_3404);
  let x_3408 : f32 = u_xlat28.x;
  let x_3410 : f32 = x_48.unity_SpecCube0_HDR.x;
  u_xlat28.x = (x_3408 * x_3410);
  let x_3413 : vec4<f32> = u_xlat8;
  let x_3415 : vec3<f32> = u_xlat28;
  u_xlat28 = (vec3<f32>(x_3413.x, x_3413.y, x_3413.z) * vec3<f32>(x_3415.x, x_3415.x, x_3415.x));
  let x_3418 : f32 = u_xlat81;
  let x_3420 : f32 = u_xlat81;
  let x_3424 : vec2<f32> = ((vec2<f32>(x_3418, x_3418) * vec2<f32>(x_3420, x_3420)) + vec2<f32>(-1.0f, 1.0f));
  let x_3425 : vec3<f32> = u_xlat29;
  u_xlat29 = vec3<f32>(x_3424.x, x_3425.y, x_3424.y);
  let x_3428 : f32 = u_xlat29.z;
  u_xlat81 = (1.0f / x_3428);
  let x_3430 : f32 = u_xlat83;
  u_xlat83 = (x_3430 + -0.03999999910593032837f);
  let x_3434 : f32 = u_xlat3.x;
  let x_3435 : f32 = u_xlat83;
  u_xlat3.x = ((x_3434 * x_3435) + 0.03999999910593032837f);
  let x_3441 : f32 = u_xlat3.x;
  let x_3442 : f32 = u_xlat81;
  u_xlat3.x = (x_3441 * x_3442);
  let x_3445 : vec3<f32> = u_xlat28;
  let x_3446 : vec4<f32> = u_xlat3;
  u_xlat28 = (x_3445 * vec3<f32>(x_3446.x, x_3446.x, x_3446.x));
  let x_3449 : vec3<f32> = u_xlat26;
  let x_3450 : vec3<f32> = u_xlat5;
  let x_3452 : vec3<f32> = u_xlat28;
  u_xlat26 = ((x_3449 * x_3450) + x_3452);
  let x_3455 : f32 = u_xlat0.x;
  let x_3457 : f32 = x_48.unity_LightData.z;
  u_xlat0.x = (x_3455 * x_3457);
  let x_3460 : vec4<f32> = u_xlat4;
  let x_3463 : vec4<f32> = x_128.x_MainLightPosition;
  u_xlat28.x = dot(vec3<f32>(x_3460.x, x_3460.y, x_3460.z), vec3<f32>(x_3463.x, x_3463.y, x_3463.z));
  let x_3468 : f32 = u_xlat28.x;
  u_xlat28.x = clamp(x_3468, 0.0f, 1.0f);
  let x_3472 : f32 = u_xlat0.x;
  let x_3474 : f32 = u_xlat28.x;
  u_xlat0.x = (x_3472 * x_3474);
  let x_3477 : vec3<f32> = u_xlat0;
  let x_3480 : vec4<f32> = x_128.x_MainLightColor;
  u_xlat28 = (vec3<f32>(x_3477.x, x_3477.x, x_3477.x) * vec3<f32>(x_3480.x, x_3480.y, x_3480.z));
  let x_3483 : vec4<f32> = u_xlat7;
  let x_3486 : vec4<f32> = x_128.x_MainLightPosition;
  let x_3488 : vec3<f32> = (vec3<f32>(x_3483.x, x_3483.y, x_3483.z) + vec3<f32>(x_3486.x, x_3486.y, x_3486.z));
  let x_3489 : vec4<f32> = u_xlat8;
  u_xlat8 = vec4<f32>(x_3488.x, x_3488.y, x_3488.z, x_3489.w);
  let x_3491 : vec4<f32> = u_xlat8;
  let x_3493 : vec4<f32> = u_xlat8;
  u_xlat0.x = dot(vec3<f32>(x_3491.x, x_3491.y, x_3491.z), vec3<f32>(x_3493.x, x_3493.y, x_3493.z));
  let x_3498 : f32 = u_xlat0.x;
  u_xlat0.x = max(x_3498, 1.17549435e-38f);
  let x_3502 : f32 = u_xlat0.x;
  u_xlat0.x = inverseSqrt(x_3502);
  let x_3505 : vec3<f32> = u_xlat0;
  let x_3507 : vec4<f32> = u_xlat8;
  let x_3509 : vec3<f32> = (vec3<f32>(x_3505.x, x_3505.x, x_3505.x) * vec3<f32>(x_3507.x, x_3507.y, x_3507.z));
  let x_3510 : vec4<f32> = u_xlat8;
  u_xlat8 = vec4<f32>(x_3509.x, x_3509.y, x_3509.z, x_3510.w);
  let x_3512 : vec4<f32> = u_xlat4;
  let x_3514 : vec4<f32> = u_xlat8;
  u_xlat0.x = dot(vec3<f32>(x_3512.x, x_3512.y, x_3512.z), vec3<f32>(x_3514.x, x_3514.y, x_3514.z));
  let x_3519 : f32 = u_xlat0.x;
  u_xlat0.x = clamp(x_3519, 0.0f, 1.0f);
  let x_3523 : vec4<f32> = x_128.x_MainLightPosition;
  let x_3525 : vec4<f32> = u_xlat8;
  u_xlat3.x = dot(vec3<f32>(x_3523.x, x_3523.y, x_3523.z), vec3<f32>(x_3525.x, x_3525.y, x_3525.z));
  let x_3530 : f32 = u_xlat3.x;
  u_xlat3.x = clamp(x_3530, 0.0f, 1.0f);
  let x_3534 : f32 = u_xlat0.x;
  let x_3536 : f32 = u_xlat0.x;
  u_xlat0.x = (x_3534 * x_3536);
  let x_3540 : f32 = u_xlat0.x;
  let x_3542 : f32 = u_xlat29.x;
  u_xlat0.x = ((x_3540 * x_3542) + 1.00001001358032226562f);
  let x_3548 : f32 = u_xlat3.x;
  let x_3550 : f32 = u_xlat3.x;
  u_xlat3.x = (x_3548 * x_3550);
  let x_3554 : f32 = u_xlat0.x;
  let x_3556 : f32 = u_xlat0.x;
  u_xlat0.x = (x_3554 * x_3556);
  let x_3560 : f32 = u_xlat3.x;
  u_xlat3.x = max(x_3560, 0.10000000149011611938f);
  let x_3565 : f32 = u_xlat0.x;
  let x_3567 : f32 = u_xlat3.x;
  u_xlat0.x = (x_3565 * x_3567);
  let x_3571 : f32 = u_xlat6.x;
  let x_3573 : f32 = u_xlat0.x;
  u_xlat0.x = (x_3571 * x_3573);
  let x_3576 : f32 = u_xlat82;
  let x_3578 : f32 = u_xlat0.x;
  u_xlat0.x = (x_3576 / x_3578);
  let x_3581 : vec3<f32> = u_xlat0;
  let x_3585 : vec3<f32> = u_xlat5;
  let x_3586 : vec3<f32> = ((vec3<f32>(x_3581.x, x_3581.x, x_3581.x) * vec3<f32>(0.03999999910593032837f, 0.03999999910593032837f, 0.03999999910593032837f)) + x_3585);
  let x_3587 : vec4<f32> = u_xlat8;
  u_xlat8 = vec4<f32>(x_3586.x, x_3586.y, x_3586.z, x_3587.w);
  let x_3589 : vec3<f32> = u_xlat28;
  let x_3590 : vec4<f32> = u_xlat8;
  u_xlat28 = (x_3589 * vec3<f32>(x_3590.x, x_3590.y, x_3590.z));
  let x_3594 : f32 = x_128.x_AdditionalLightsCount.x;
  let x_3596 : f32 = x_48.unity_LightData.y;
  u_xlat0.x = min(x_3594, x_3596);
  let x_3600 : f32 = u_xlat0.x;
  u_xlatu0 = bitcast<u32>(i32(x_3600));
  let x_3604 : f32 = u_xlat2.x;
  let x_3607 : f32 = x_246.x_AdditionalShadowFadeParams.x;
  let x_3610 : f32 = x_246.x_AdditionalShadowFadeParams.y;
  u_xlat2.x = ((x_3604 * x_3607) + x_3610);
  let x_3614 : f32 = u_xlat2.x;
  u_xlat2.x = clamp(x_3614, 0.0f, 1.0f);
  u_xlat8.x = 0.0f;
  u_xlat8.y = 0.0f;
  u_xlat8.z = 0.0f;
  u_xlatu_loop_1 = 0u;
  loop {
    let x_3627 : u32 = u_xlatu_loop_1;
    let x_3628 : u32 = u_xlatu0;
    if ((x_3627 < x_3628)) {
    } else {
      break;
    }
    let x_3631 : u32 = u_xlatu_loop_1;
    u_xlatu81 = (x_3631 >> 2u);
    let x_3634 : u32 = u_xlatu_loop_1;
    u_xlati83 = bitcast<i32>((x_3634 & 3u));
    let x_3637 : u32 = u_xlatu81;
    let x_3640 : vec4<f32> = x_48.unity_LightIndices[bitcast<i32>(x_3637)];
    let x_3650 : i32 = u_xlati83;
    indexable = array<vec4<u32>, 4u>(vec4<u32>(1065353216u, 0u, 0u, 0u), vec4<u32>(0u, 1065353216u, 0u, 0u), vec4<u32>(0u, 0u, 1065353216u, 0u), vec4<u32>(0u, 0u, 0u, 1065353216u));
    let x_3655 : vec4<u32> = indexable[x_3650];
    u_xlat81 = dot(x_3640, bitcast<vec4<f32>>(x_3655));
    let x_3659 : f32 = u_xlat81;
    u_xlati81 = i32(x_3659);
    let x_3661 : vec3<f32> = vs_INTERP8;
    let x_3672 : i32 = u_xlati81;
    let x_3674 : vec4<f32> = x_3671.x_AdditionalLightsPosition[x_3672];
    let x_3677 : i32 = u_xlati81;
    let x_3679 : vec4<f32> = x_3671.x_AdditionalLightsPosition[x_3677];
    let x_3681 : vec3<f32> = ((-(x_3661) * vec3<f32>(x_3674.w, x_3674.w, x_3674.w)) + vec3<f32>(x_3679.x, x_3679.y, x_3679.z));
    let x_3682 : vec4<f32> = u_xlat9;
    u_xlat9 = vec4<f32>(x_3681.x, x_3681.y, x_3681.z, x_3682.w);
    let x_3684 : vec4<f32> = u_xlat9;
    let x_3686 : vec4<f32> = u_xlat9;
    u_xlat83 = dot(vec3<f32>(x_3684.x, x_3684.y, x_3684.z), vec3<f32>(x_3686.x, x_3686.y, x_3686.z));
    let x_3689 : f32 = u_xlat83;
    u_xlat83 = max(x_3689, 0.00006103515625f);
    let x_3692 : f32 = u_xlat83;
    u_xlat58.x = inverseSqrt(x_3692);
    let x_3695 : vec2<f32> = u_xlat58;
    let x_3697 : vec4<f32> = u_xlat9;
    let x_3699 : vec3<f32> = (vec3<f32>(x_3695.x, x_3695.x, x_3695.x) * vec3<f32>(x_3697.x, x_3697.y, x_3697.z));
    let x_3700 : vec4<f32> = u_xlat10;
    u_xlat10 = vec4<f32>(x_3699.x, x_3699.y, x_3699.z, x_3700.w);
    let x_3702 : f32 = u_xlat83;
    u_xlat84 = (1.0f / x_3702);
    let x_3704 : f32 = u_xlat83;
    let x_3705 : i32 = u_xlati81;
    let x_3707 : f32 = x_3671.x_AdditionalLightsAttenuation[x_3705].x;
    u_xlat83 = (x_3704 * x_3707);
    let x_3709 : f32 = u_xlat83;
    let x_3711 : f32 = u_xlat83;
    u_xlat83 = ((-(x_3709) * x_3711) + 1.0f);
    let x_3714 : f32 = u_xlat83;
    u_xlat83 = max(x_3714, 0.0f);
    let x_3716 : f32 = u_xlat83;
    let x_3717 : f32 = u_xlat83;
    u_xlat83 = (x_3716 * x_3717);
    let x_3719 : f32 = u_xlat83;
    let x_3720 : f32 = u_xlat84;
    u_xlat83 = (x_3719 * x_3720);
    let x_3722 : i32 = u_xlati81;
    let x_3724 : vec4<f32> = x_3671.x_AdditionalLightsSpotDir[x_3722];
    let x_3726 : vec4<f32> = u_xlat10;
    u_xlat84 = dot(vec3<f32>(x_3724.x, x_3724.y, x_3724.z), vec3<f32>(x_3726.x, x_3726.y, x_3726.z));
    let x_3729 : f32 = u_xlat84;
    let x_3730 : i32 = u_xlati81;
    let x_3732 : f32 = x_3671.x_AdditionalLightsAttenuation[x_3730].z;
    let x_3734 : i32 = u_xlati81;
    let x_3736 : f32 = x_3671.x_AdditionalLightsAttenuation[x_3734].w;
    u_xlat84 = ((x_3729 * x_3732) + x_3736);
    let x_3738 : f32 = u_xlat84;
    u_xlat84 = clamp(x_3738, 0.0f, 1.0f);
    let x_3740 : f32 = u_xlat84;
    let x_3741 : f32 = u_xlat84;
    u_xlat84 = (x_3740 * x_3741);
    let x_3743 : f32 = u_xlat83;
    let x_3744 : f32 = u_xlat84;
    u_xlat83 = (x_3743 * x_3744);
    let x_3748 : i32 = u_xlati81;
    let x_3750 : f32 = x_246.x_AdditionalShadowParams[x_3748].w;
    u_xlati84 = i32(x_3750);
    let x_3753 : i32 = u_xlati84;
    u_xlatb85 = (x_3753 >= 0i);
    let x_3755 : bool = u_xlatb85;
    if (x_3755) {
      let x_3759 : i32 = u_xlati81;
      let x_3761 : f32 = x_246.x_AdditionalShadowParams[x_3759].z;
      u_xlatb85 = any(!((vec4<f32>(0.0f, 0.0f, 0.0f, 0.0f) == vec4<f32>(x_3761, x_3761, x_3761, x_3761))));
      let x_3765 : bool = u_xlatb85;
      if (x_3765) {
        let x_3769 : vec4<f32> = u_xlat10;
        let x_3772 : vec4<f32> = u_xlat10;
        let x_3775 : vec4<bool> = (abs(vec4<f32>(x_3769.z, x_3769.z, x_3769.y, x_3769.z)) >= abs(vec4<f32>(x_3772.x, x_3772.y, x_3772.x, x_3772.x)));
        let x_3777 : vec3<bool> = vec3<bool>(x_3775.x, x_3775.y, x_3775.z);
        let x_3778 : vec4<bool> = u_xlatb11;
        u_xlatb11 = vec4<bool>(x_3777.x, x_3777.y, x_3777.z, x_3778.w);
        let x_3781 : bool = u_xlatb11.y;
        let x_3783 : bool = u_xlatb11.x;
        u_xlatb85 = (x_3781 & x_3783);
        let x_3785 : vec4<f32> = u_xlat10;
        let x_3788 : vec4<bool> = (-(vec4<f32>(x_3785.z, x_3785.y, x_3785.z, x_3785.x)) < vec4<f32>(0.0f, 0.0f, 0.0f, 0.0f));
        let x_3789 : vec3<bool> = vec3<bool>(x_3788.x, x_3788.y, x_3788.w);
        let x_3790 : vec4<bool> = u_xlatb11;
        u_xlatb11 = vec4<bool>(x_3789.x, x_3789.y, x_3790.z, x_3789.z);
        let x_3793 : bool = u_xlatb11.x;
        u_xlat11.x = select(4.0f, 5.0f, x_3793);
        let x_3798 : bool = u_xlatb11.y;
        u_xlat11.y = select(2.0f, 3.0f, x_3798);
        let x_3803 : bool = u_xlatb11.w;
        u_xlat86 = select(0.0f, 1.0f, x_3803);
        let x_3806 : bool = u_xlatb11.z;
        if (x_3806) {
          let x_3811 : f32 = u_xlat11.y;
          x_3807 = x_3811;
        } else {
          let x_3813 : f32 = u_xlat86;
          x_3807 = x_3813;
        }
        let x_3814 : f32 = x_3807;
        u_xlat86 = x_3814;
        let x_3815 : bool = u_xlatb85;
        if (x_3815) {
          let x_3820 : f32 = u_xlat11.x;
          x_3816 = x_3820;
        } else {
          let x_3822 : f32 = u_xlat86;
          x_3816 = x_3822;
        }
        let x_3823 : f32 = x_3816;
        u_xlat85 = x_3823;
        let x_3824 : i32 = u_xlati81;
        let x_3826 : f32 = x_246.x_AdditionalShadowParams[x_3824].w;
        u_xlat86 = trunc(x_3826);
        let x_3828 : f32 = u_xlat85;
        let x_3829 : f32 = u_xlat86;
        u_xlat85 = (x_3828 + x_3829);
        let x_3831 : f32 = u_xlat85;
        u_xlati84 = i32(x_3831);
      }
      let x_3833 : i32 = u_xlati84;
      u_xlati84 = (x_3833 << bitcast<u32>(2i));
      let x_3835 : vec3<f32> = vs_INTERP8;
      let x_3838 : i32 = u_xlati84;
      let x_3841 : i32 = u_xlati84;
      let x_3845 : vec4<f32> = x_246.x_AdditionalLightsWorldToShadow[((x_3838 + 1i) / 4i)][((x_3841 + 1i) % 4i)];
      u_xlat11 = (vec4<f32>(x_3835.y, x_3835.y, x_3835.y, x_3835.y) * x_3845);
      let x_3847 : i32 = u_xlati84;
      let x_3849 : i32 = u_xlati84;
      let x_3852 : vec4<f32> = x_246.x_AdditionalLightsWorldToShadow[(x_3847 / 4i)][(x_3849 % 4i)];
      let x_3853 : vec3<f32> = vs_INTERP8;
      let x_3856 : vec4<f32> = u_xlat11;
      u_xlat11 = ((x_3852 * vec4<f32>(x_3853.x, x_3853.x, x_3853.x, x_3853.x)) + x_3856);
      let x_3858 : i32 = u_xlati84;
      let x_3861 : i32 = u_xlati84;
      let x_3865 : vec4<f32> = x_246.x_AdditionalLightsWorldToShadow[((x_3858 + 2i) / 4i)][((x_3861 + 2i) % 4i)];
      let x_3866 : vec3<f32> = vs_INTERP8;
      let x_3869 : vec4<f32> = u_xlat11;
      u_xlat11 = ((x_3865 * vec4<f32>(x_3866.z, x_3866.z, x_3866.z, x_3866.z)) + x_3869);
      let x_3871 : vec4<f32> = u_xlat11;
      let x_3872 : i32 = u_xlati84;
      let x_3875 : i32 = u_xlati84;
      let x_3879 : vec4<f32> = x_246.x_AdditionalLightsWorldToShadow[((x_3872 + 3i) / 4i)][((x_3875 + 3i) % 4i)];
      u_xlat11 = (x_3871 + x_3879);
      let x_3881 : vec4<f32> = u_xlat11;
      let x_3883 : vec4<f32> = u_xlat11;
      let x_3885 : vec3<f32> = (vec3<f32>(x_3881.x, x_3881.y, x_3881.z) / vec3<f32>(x_3883.w, x_3883.w, x_3883.w));
      let x_3886 : vec4<f32> = u_xlat11;
      u_xlat11 = vec4<f32>(x_3885.x, x_3885.y, x_3885.z, x_3886.w);
      let x_3889 : i32 = u_xlati81;
      let x_3891 : f32 = x_246.x_AdditionalShadowParams[x_3889].y;
      u_xlatb84 = (0.0f < x_3891);
      let x_3893 : bool = u_xlatb84;
      if (x_3893) {
        let x_3896 : i32 = u_xlati81;
        let x_3898 : f32 = x_246.x_AdditionalShadowParams[x_3896].y;
        u_xlatb84 = (1.0f == x_3898);
        let x_3900 : bool = u_xlatb84;
        if (x_3900) {
          let x_3903 : vec4<f32> = u_xlat11;
          let x_3907 : vec4<f32> = x_246.x_AdditionalShadowOffset0;
          u_xlat12 = (vec4<f32>(x_3903.x, x_3903.y, x_3903.x, x_3903.y) + x_3907);
          let x_3910 : vec4<f32> = u_xlat12;
          let x_3911 : vec2<f32> = vec2<f32>(x_3910.x, x_3910.y);
          let x_3913 : f32 = u_xlat11.z;
          txVec60 = vec3<f32>(x_3911.x, x_3911.y, x_3913);
          let x_3921 : vec3<f32> = txVec60;
          let x_3923 : f32 = textureSampleCompareLevel(x_AdditionalLightsShadowmapTexture, sampler_LinearClampCompare, x_3921.xy, x_3921.z);
          u_xlat13.x = x_3923;
          let x_3926 : vec4<f32> = u_xlat12;
          let x_3927 : vec2<f32> = vec2<f32>(x_3926.z, x_3926.w);
          let x_3929 : f32 = u_xlat11.z;
          txVec61 = vec3<f32>(x_3927.x, x_3927.y, x_3929);
          let x_3936 : vec3<f32> = txVec61;
          let x_3938 : f32 = textureSampleCompareLevel(x_AdditionalLightsShadowmapTexture, sampler_LinearClampCompare, x_3936.xy, x_3936.z);
          u_xlat13.y = x_3938;
          let x_3940 : vec4<f32> = u_xlat11;
          let x_3944 : vec4<f32> = x_246.x_AdditionalShadowOffset1;
          u_xlat12 = (vec4<f32>(x_3940.x, x_3940.y, x_3940.x, x_3940.y) + x_3944);
          let x_3947 : vec4<f32> = u_xlat12;
          let x_3948 : vec2<f32> = vec2<f32>(x_3947.x, x_3947.y);
          let x_3950 : f32 = u_xlat11.z;
          txVec62 = vec3<f32>(x_3948.x, x_3948.y, x_3950);
          let x_3957 : vec3<f32> = txVec62;
          let x_3959 : f32 = textureSampleCompareLevel(x_AdditionalLightsShadowmapTexture, sampler_LinearClampCompare, x_3957.xy, x_3957.z);
          u_xlat13.z = x_3959;
          let x_3962 : vec4<f32> = u_xlat12;
          let x_3963 : vec2<f32> = vec2<f32>(x_3962.z, x_3962.w);
          let x_3965 : f32 = u_xlat11.z;
          txVec63 = vec3<f32>(x_3963.x, x_3963.y, x_3965);
          let x_3972 : vec3<f32> = txVec63;
          let x_3974 : f32 = textureSampleCompareLevel(x_AdditionalLightsShadowmapTexture, sampler_LinearClampCompare, x_3972.xy, x_3972.z);
          u_xlat13.w = x_3974;
          let x_3976 : vec4<f32> = u_xlat13;
          u_xlat84 = dot(x_3976, vec4<f32>(0.25f, 0.25f, 0.25f, 0.25f));
        } else {
          let x_3979 : i32 = u_xlati81;
          let x_3981 : f32 = x_246.x_AdditionalShadowParams[x_3979].y;
          u_xlatb85 = (2.0f == x_3981);
          let x_3983 : bool = u_xlatb85;
          if (x_3983) {
            let x_3986 : vec4<f32> = u_xlat11;
            let x_3990 : vec4<f32> = x_246.x_AdditionalShadowmapSize;
            let x_3993 : vec2<f32> = ((vec2<f32>(x_3986.x, x_3986.y) * vec2<f32>(x_3990.z, x_3990.w)) + vec2<f32>(0.5f, 0.5f));
            let x_3994 : vec4<f32> = u_xlat12;
            u_xlat12 = vec4<f32>(x_3993.x, x_3993.y, x_3994.z, x_3994.w);
            let x_3996 : vec4<f32> = u_xlat12;
            let x_3998 : vec2<f32> = floor(vec2<f32>(x_3996.x, x_3996.y));
            let x_3999 : vec4<f32> = u_xlat12;
            u_xlat12 = vec4<f32>(x_3998.x, x_3998.y, x_3999.z, x_3999.w);
            let x_4002 : vec4<f32> = u_xlat11;
            let x_4005 : vec4<f32> = x_246.x_AdditionalShadowmapSize;
            let x_4008 : vec4<f32> = u_xlat12;
            u_xlat64 = ((vec2<f32>(x_4002.x, x_4002.y) * vec2<f32>(x_4005.z, x_4005.w)) + -(vec2<f32>(x_4008.x, x_4008.y)));
            let x_4012 : vec2<f32> = u_xlat64;
            u_xlat13 = (vec4<f32>(x_4012.x, x_4012.x, x_4012.y, x_4012.y) + vec4<f32>(0.5f, 1.0f, 0.5f, 1.0f));
            let x_4015 : vec4<f32> = u_xlat13;
            let x_4017 : vec4<f32> = u_xlat13;
            u_xlat14 = (vec4<f32>(x_4015.x, x_4015.x, x_4015.z, x_4015.z) * vec4<f32>(x_4017.x, x_4017.x, x_4017.z, x_4017.z));
            let x_4020 : vec4<f32> = u_xlat14;
            let x_4022 : vec2<f32> = (vec2<f32>(x_4020.y, x_4020.w) * vec2<f32>(0.07999999821186065674f, 0.07999999821186065674f));
            let x_4023 : vec4<f32> = u_xlat13;
            u_xlat13 = vec4<f32>(x_4022.x, x_4023.y, x_4022.y, x_4023.w);
            let x_4025 : vec4<f32> = u_xlat14;
            let x_4028 : vec2<f32> = u_xlat64;
            let x_4030 : vec2<f32> = ((vec2<f32>(x_4025.x, x_4025.z) * vec2<f32>(0.5f, 0.5f)) + -(x_4028));
            let x_4031 : vec4<f32> = u_xlat14;
            u_xlat14 = vec4<f32>(x_4030.x, x_4030.y, x_4031.z, x_4031.w);
            let x_4033 : vec2<f32> = u_xlat64;
            u_xlat66 = (-(x_4033) + vec2<f32>(1.0f, 1.0f));
            let x_4036 : vec2<f32> = u_xlat64;
            let x_4037 : vec2<f32> = min(x_4036, vec2<f32>(0.0f, 0.0f));
            let x_4038 : vec4<f32> = u_xlat15;
            u_xlat15 = vec4<f32>(x_4037.x, x_4037.y, x_4038.z, x_4038.w);
            let x_4040 : vec4<f32> = u_xlat15;
            let x_4043 : vec4<f32> = u_xlat15;
            let x_4046 : vec2<f32> = u_xlat66;
            let x_4047 : vec2<f32> = ((-(vec2<f32>(x_4040.x, x_4040.y)) * vec2<f32>(x_4043.x, x_4043.y)) + x_4046);
            let x_4048 : vec4<f32> = u_xlat15;
            u_xlat15 = vec4<f32>(x_4047.x, x_4047.y, x_4048.z, x_4048.w);
            let x_4050 : vec2<f32> = u_xlat64;
            u_xlat64 = max(x_4050, vec2<f32>(0.0f, 0.0f));
            let x_4052 : vec2<f32> = u_xlat64;
            let x_4054 : vec2<f32> = u_xlat64;
            let x_4056 : vec4<f32> = u_xlat13;
            u_xlat64 = ((-(x_4052) * x_4054) + vec2<f32>(x_4056.y, x_4056.w));
            let x_4059 : vec4<f32> = u_xlat15;
            let x_4061 : vec2<f32> = (vec2<f32>(x_4059.x, x_4059.y) + vec2<f32>(1.0f, 1.0f));
            let x_4062 : vec4<f32> = u_xlat15;
            u_xlat15 = vec4<f32>(x_4061.x, x_4061.y, x_4062.z, x_4062.w);
            let x_4064 : vec2<f32> = u_xlat64;
            u_xlat64 = (x_4064 + vec2<f32>(1.0f, 1.0f));
            let x_4066 : vec4<f32> = u_xlat14;
            let x_4068 : vec2<f32> = (vec2<f32>(x_4066.x, x_4066.y) * vec2<f32>(0.15999999642372131348f, 0.15999999642372131348f));
            let x_4069 : vec4<f32> = u_xlat16;
            u_xlat16 = vec4<f32>(x_4068.x, x_4068.y, x_4069.z, x_4069.w);
            let x_4071 : vec2<f32> = u_xlat66;
            let x_4072 : vec2<f32> = (x_4071 * vec2<f32>(0.15999999642372131348f, 0.15999999642372131348f));
            let x_4073 : vec4<f32> = u_xlat14;
            u_xlat14 = vec4<f32>(x_4072.x, x_4072.y, x_4073.z, x_4073.w);
            let x_4075 : vec4<f32> = u_xlat15;
            let x_4077 : vec2<f32> = (vec2<f32>(x_4075.x, x_4075.y) * vec2<f32>(0.15999999642372131348f, 0.15999999642372131348f));
            let x_4078 : vec4<f32> = u_xlat15;
            u_xlat15 = vec4<f32>(x_4077.x, x_4077.y, x_4078.z, x_4078.w);
            let x_4080 : vec2<f32> = u_xlat64;
            let x_4081 : vec2<f32> = (x_4080 * vec2<f32>(0.15999999642372131348f, 0.15999999642372131348f));
            let x_4082 : vec4<f32> = u_xlat17;
            u_xlat17 = vec4<f32>(x_4081.x, x_4081.y, x_4082.z, x_4082.w);
            let x_4084 : vec4<f32> = u_xlat13;
            u_xlat64 = (vec2<f32>(x_4084.y, x_4084.w) * vec2<f32>(0.15999999642372131348f, 0.15999999642372131348f));
            let x_4088 : f32 = u_xlat15.x;
            u_xlat16.z = x_4088;
            let x_4091 : f32 = u_xlat64.x;
            u_xlat16.w = x_4091;
            let x_4094 : f32 = u_xlat17.x;
            u_xlat14.z = x_4094;
            let x_4097 : f32 = u_xlat13.x;
            u_xlat14.w = x_4097;
            let x_4099 : vec4<f32> = u_xlat14;
            let x_4101 : vec4<f32> = u_xlat16;
            u_xlat18 = (vec4<f32>(x_4099.z, x_4099.w, x_4099.x, x_4099.z) + vec4<f32>(x_4101.z, x_4101.w, x_4101.x, x_4101.z));
            let x_4105 : f32 = u_xlat16.y;
            u_xlat15.z = x_4105;
            let x_4108 : f32 = u_xlat64.y;
            u_xlat15.w = x_4108;
            let x_4111 : f32 = u_xlat14.y;
            u_xlat17.z = x_4111;
            let x_4114 : f32 = u_xlat13.z;
            u_xlat17.w = x_4114;
            let x_4116 : vec4<f32> = u_xlat15;
            let x_4118 : vec4<f32> = u_xlat17;
            let x_4120 : vec3<f32> = (vec3<f32>(x_4116.z, x_4116.y, x_4116.w) + vec3<f32>(x_4118.z, x_4118.y, x_4118.w));
            let x_4121 : vec4<f32> = u_xlat13;
            u_xlat13 = vec4<f32>(x_4120.x, x_4120.y, x_4120.z, x_4121.w);
            let x_4123 : vec4<f32> = u_xlat14;
            let x_4125 : vec4<f32> = u_xlat18;
            let x_4127 : vec3<f32> = (vec3<f32>(x_4123.x, x_4123.z, x_4123.w) / vec3<f32>(x_4125.z, x_4125.w, x_4125.y));
            let x_4128 : vec4<f32> = u_xlat14;
            u_xlat14 = vec4<f32>(x_4127.x, x_4127.y, x_4127.z, x_4128.w);
            let x_4130 : vec4<f32> = u_xlat14;
            let x_4132 : vec3<f32> = (vec3<f32>(x_4130.x, x_4130.y, x_4130.z) + vec3<f32>(-2.5f, -0.5f, 1.5f));
            let x_4133 : vec4<f32> = u_xlat14;
            u_xlat14 = vec4<f32>(x_4132.x, x_4132.y, x_4132.z, x_4133.w);
            let x_4135 : vec4<f32> = u_xlat17;
            let x_4137 : vec4<f32> = u_xlat13;
            let x_4139 : vec3<f32> = (vec3<f32>(x_4135.z, x_4135.y, x_4135.w) / vec3<f32>(x_4137.x, x_4137.y, x_4137.z));
            let x_4140 : vec4<f32> = u_xlat15;
            u_xlat15 = vec4<f32>(x_4139.x, x_4139.y, x_4139.z, x_4140.w);
            let x_4142 : vec4<f32> = u_xlat15;
            let x_4144 : vec3<f32> = (vec3<f32>(x_4142.x, x_4142.y, x_4142.z) + vec3<f32>(-2.5f, -0.5f, 1.5f));
            let x_4145 : vec4<f32> = u_xlat15;
            u_xlat15 = vec4<f32>(x_4144.x, x_4144.y, x_4144.z, x_4145.w);
            let x_4147 : vec4<f32> = u_xlat14;
            let x_4150 : vec4<f32> = x_246.x_AdditionalShadowmapSize;
            let x_4152 : vec3<f32> = (vec3<f32>(x_4147.y, x_4147.x, x_4147.z) * vec3<f32>(x_4150.x, x_4150.x, x_4150.x));
            let x_4153 : vec4<f32> = u_xlat14;
            u_xlat14 = vec4<f32>(x_4152.x, x_4152.y, x_4152.z, x_4153.w);
            let x_4155 : vec4<f32> = u_xlat15;
            let x_4158 : vec4<f32> = x_246.x_AdditionalShadowmapSize;
            let x_4160 : vec3<f32> = (vec3<f32>(x_4155.x, x_4155.y, x_4155.z) * vec3<f32>(x_4158.y, x_4158.y, x_4158.y));
            let x_4161 : vec4<f32> = u_xlat15;
            u_xlat15 = vec4<f32>(x_4160.x, x_4160.y, x_4160.z, x_4161.w);
            let x_4164 : f32 = u_xlat15.x;
            u_xlat14.w = x_4164;
            let x_4166 : vec4<f32> = u_xlat12;
            let x_4169 : vec4<f32> = x_246.x_AdditionalShadowmapSize;
            let x_4172 : vec4<f32> = u_xlat14;
            u_xlat16 = ((vec4<f32>(x_4166.x, x_4166.y, x_4166.x, x_4166.y) * vec4<f32>(x_4169.x, x_4169.y, x_4169.x, x_4169.y)) + vec4<f32>(x_4172.y, x_4172.w, x_4172.x, x_4172.w));
            let x_4175 : vec4<f32> = u_xlat12;
            let x_4178 : vec4<f32> = x_246.x_AdditionalShadowmapSize;
            let x_4181 : vec4<f32> = u_xlat14;
            u_xlat64 = ((vec2<f32>(x_4175.x, x_4175.y) * vec2<f32>(x_4178.x, x_4178.y)) + vec2<f32>(x_4181.z, x_4181.w));
            let x_4185 : f32 = u_xlat14.y;
            u_xlat15.w = x_4185;
            let x_4187 : vec4<f32> = u_xlat15;
            let x_4188 : vec2<f32> = vec2<f32>(x_4187.y, x_4187.z);
            let x_4189 : vec4<f32> = u_xlat14;
            u_xlat14 = vec4<f32>(x_4189.x, x_4188.x, x_4189.z, x_4188.y);
            let x_4191 : vec4<f32> = u_xlat12;
            let x_4194 : vec4<f32> = x_246.x_AdditionalShadowmapSize;
            let x_4197 : vec4<f32> = u_xlat14;
            u_xlat17 = ((vec4<f32>(x_4191.x, x_4191.y, x_4191.x, x_4191.y) * vec4<f32>(x_4194.x, x_4194.y, x_4194.x, x_4194.y)) + vec4<f32>(x_4197.x, x_4197.y, x_4197.z, x_4197.y));
            let x_4200 : vec4<f32> = u_xlat12;
            let x_4203 : vec4<f32> = x_246.x_AdditionalShadowmapSize;
            let x_4206 : vec4<f32> = u_xlat15;
            u_xlat15 = ((vec4<f32>(x_4200.x, x_4200.y, x_4200.x, x_4200.y) * vec4<f32>(x_4203.x, x_4203.y, x_4203.x, x_4203.y)) + vec4<f32>(x_4206.w, x_4206.y, x_4206.w, x_4206.z));
            let x_4209 : vec4<f32> = u_xlat12;
            let x_4212 : vec4<f32> = x_246.x_AdditionalShadowmapSize;
            let x_4215 : vec4<f32> = u_xlat14;
            u_xlat14 = ((vec4<f32>(x_4209.x, x_4209.y, x_4209.x, x_4209.y) * vec4<f32>(x_4212.x, x_4212.y, x_4212.x, x_4212.y)) + vec4<f32>(x_4215.x, x_4215.w, x_4215.z, x_4215.w));
            let x_4218 : vec4<f32> = u_xlat13;
            let x_4220 : vec4<f32> = u_xlat18;
            u_xlat19 = (vec4<f32>(x_4218.x, x_4218.x, x_4218.x, x_4218.y) * vec4<f32>(x_4220.z, x_4220.w, x_4220.y, x_4220.z));
            let x_4223 : vec4<f32> = u_xlat13;
            let x_4225 : vec4<f32> = u_xlat18;
            u_xlat20 = (vec4<f32>(x_4223.y, x_4223.y, x_4223.z, x_4223.z) * x_4225);
            let x_4228 : f32 = u_xlat13.z;
            let x_4230 : f32 = u_xlat18.y;
            u_xlat85 = (x_4228 * x_4230);
            let x_4233 : vec4<f32> = u_xlat16;
            let x_4234 : vec2<f32> = vec2<f32>(x_4233.x, x_4233.y);
            let x_4236 : f32 = u_xlat11.z;
            txVec64 = vec3<f32>(x_4234.x, x_4234.y, x_4236);
            let x_4243 : vec3<f32> = txVec64;
            let x_4245 : f32 = textureSampleCompareLevel(x_AdditionalLightsShadowmapTexture, sampler_LinearClampCompare, x_4243.xy, x_4243.z);
            u_xlat86 = x_4245;
            let x_4247 : vec4<f32> = u_xlat16;
            let x_4248 : vec2<f32> = vec2<f32>(x_4247.z, x_4247.w);
            let x_4250 : f32 = u_xlat11.z;
            txVec65 = vec3<f32>(x_4248.x, x_4248.y, x_4250);
            let x_4258 : vec3<f32> = txVec65;
            let x_4260 : f32 = textureSampleCompareLevel(x_AdditionalLightsShadowmapTexture, sampler_LinearClampCompare, x_4258.xy, x_4258.z);
            u_xlat87 = x_4260;
            let x_4261 : f32 = u_xlat87;
            let x_4263 : f32 = u_xlat19.y;
            u_xlat87 = (x_4261 * x_4263);
            let x_4266 : f32 = u_xlat19.x;
            let x_4267 : f32 = u_xlat86;
            let x_4269 : f32 = u_xlat87;
            u_xlat86 = ((x_4266 * x_4267) + x_4269);
            let x_4272 : vec2<f32> = u_xlat64;
            let x_4274 : f32 = u_xlat11.z;
            txVec66 = vec3<f32>(x_4272.x, x_4272.y, x_4274);
            let x_4281 : vec3<f32> = txVec66;
            let x_4283 : f32 = textureSampleCompareLevel(x_AdditionalLightsShadowmapTexture, sampler_LinearClampCompare, x_4281.xy, x_4281.z);
            u_xlat87 = x_4283;
            let x_4285 : f32 = u_xlat19.z;
            let x_4286 : f32 = u_xlat87;
            let x_4288 : f32 = u_xlat86;
            u_xlat86 = ((x_4285 * x_4286) + x_4288);
            let x_4291 : vec4<f32> = u_xlat15;
            let x_4292 : vec2<f32> = vec2<f32>(x_4291.x, x_4291.y);
            let x_4294 : f32 = u_xlat11.z;
            txVec67 = vec3<f32>(x_4292.x, x_4292.y, x_4294);
            let x_4301 : vec3<f32> = txVec67;
            let x_4303 : f32 = textureSampleCompareLevel(x_AdditionalLightsShadowmapTexture, sampler_LinearClampCompare, x_4301.xy, x_4301.z);
            u_xlat87 = x_4303;
            let x_4305 : f32 = u_xlat19.w;
            let x_4306 : f32 = u_xlat87;
            let x_4308 : f32 = u_xlat86;
            u_xlat86 = ((x_4305 * x_4306) + x_4308);
            let x_4311 : vec4<f32> = u_xlat17;
            let x_4312 : vec2<f32> = vec2<f32>(x_4311.x, x_4311.y);
            let x_4314 : f32 = u_xlat11.z;
            txVec68 = vec3<f32>(x_4312.x, x_4312.y, x_4314);
            let x_4321 : vec3<f32> = txVec68;
            let x_4323 : f32 = textureSampleCompareLevel(x_AdditionalLightsShadowmapTexture, sampler_LinearClampCompare, x_4321.xy, x_4321.z);
            u_xlat87 = x_4323;
            let x_4325 : f32 = u_xlat20.x;
            let x_4326 : f32 = u_xlat87;
            let x_4328 : f32 = u_xlat86;
            u_xlat86 = ((x_4325 * x_4326) + x_4328);
            let x_4331 : vec4<f32> = u_xlat17;
            let x_4332 : vec2<f32> = vec2<f32>(x_4331.z, x_4331.w);
            let x_4334 : f32 = u_xlat11.z;
            txVec69 = vec3<f32>(x_4332.x, x_4332.y, x_4334);
            let x_4341 : vec3<f32> = txVec69;
            let x_4343 : f32 = textureSampleCompareLevel(x_AdditionalLightsShadowmapTexture, sampler_LinearClampCompare, x_4341.xy, x_4341.z);
            u_xlat87 = x_4343;
            let x_4345 : f32 = u_xlat20.y;
            let x_4346 : f32 = u_xlat87;
            let x_4348 : f32 = u_xlat86;
            u_xlat86 = ((x_4345 * x_4346) + x_4348);
            let x_4351 : vec4<f32> = u_xlat15;
            let x_4352 : vec2<f32> = vec2<f32>(x_4351.z, x_4351.w);
            let x_4354 : f32 = u_xlat11.z;
            txVec70 = vec3<f32>(x_4352.x, x_4352.y, x_4354);
            let x_4361 : vec3<f32> = txVec70;
            let x_4363 : f32 = textureSampleCompareLevel(x_AdditionalLightsShadowmapTexture, sampler_LinearClampCompare, x_4361.xy, x_4361.z);
            u_xlat87 = x_4363;
            let x_4365 : f32 = u_xlat20.z;
            let x_4366 : f32 = u_xlat87;
            let x_4368 : f32 = u_xlat86;
            u_xlat86 = ((x_4365 * x_4366) + x_4368);
            let x_4371 : vec4<f32> = u_xlat14;
            let x_4372 : vec2<f32> = vec2<f32>(x_4371.x, x_4371.y);
            let x_4374 : f32 = u_xlat11.z;
            txVec71 = vec3<f32>(x_4372.x, x_4372.y, x_4374);
            let x_4381 : vec3<f32> = txVec71;
            let x_4383 : f32 = textureSampleCompareLevel(x_AdditionalLightsShadowmapTexture, sampler_LinearClampCompare, x_4381.xy, x_4381.z);
            u_xlat87 = x_4383;
            let x_4385 : f32 = u_xlat20.w;
            let x_4386 : f32 = u_xlat87;
            let x_4388 : f32 = u_xlat86;
            u_xlat86 = ((x_4385 * x_4386) + x_4388);
            let x_4391 : vec4<f32> = u_xlat14;
            let x_4392 : vec2<f32> = vec2<f32>(x_4391.z, x_4391.w);
            let x_4394 : f32 = u_xlat11.z;
            txVec72 = vec3<f32>(x_4392.x, x_4392.y, x_4394);
            let x_4401 : vec3<f32> = txVec72;
            let x_4403 : f32 = textureSampleCompareLevel(x_AdditionalLightsShadowmapTexture, sampler_LinearClampCompare, x_4401.xy, x_4401.z);
            u_xlat87 = x_4403;
            let x_4404 : f32 = u_xlat85;
            let x_4405 : f32 = u_xlat87;
            let x_4407 : f32 = u_xlat86;
            u_xlat84 = ((x_4404 * x_4405) + x_4407);
          } else {
            let x_4410 : vec4<f32> = u_xlat11;
            let x_4413 : vec4<f32> = x_246.x_AdditionalShadowmapSize;
            let x_4416 : vec2<f32> = ((vec2<f32>(x_4410.x, x_4410.y) * vec2<f32>(x_4413.z, x_4413.w)) + vec2<f32>(0.5f, 0.5f));
            let x_4417 : vec4<f32> = u_xlat12;
            u_xlat12 = vec4<f32>(x_4416.x, x_4416.y, x_4417.z, x_4417.w);
            let x_4419 : vec4<f32> = u_xlat12;
            let x_4421 : vec2<f32> = floor(vec2<f32>(x_4419.x, x_4419.y));
            let x_4422 : vec4<f32> = u_xlat12;
            u_xlat12 = vec4<f32>(x_4421.x, x_4421.y, x_4422.z, x_4422.w);
            let x_4424 : vec4<f32> = u_xlat11;
            let x_4427 : vec4<f32> = x_246.x_AdditionalShadowmapSize;
            let x_4430 : vec4<f32> = u_xlat12;
            u_xlat64 = ((vec2<f32>(x_4424.x, x_4424.y) * vec2<f32>(x_4427.z, x_4427.w)) + -(vec2<f32>(x_4430.x, x_4430.y)));
            let x_4434 : vec2<f32> = u_xlat64;
            u_xlat13 = (vec4<f32>(x_4434.x, x_4434.x, x_4434.y, x_4434.y) + vec4<f32>(0.5f, 1.0f, 0.5f, 1.0f));
            let x_4437 : vec4<f32> = u_xlat13;
            let x_4439 : vec4<f32> = u_xlat13;
            u_xlat14 = (vec4<f32>(x_4437.x, x_4437.x, x_4437.z, x_4437.z) * vec4<f32>(x_4439.x, x_4439.x, x_4439.z, x_4439.z));
            let x_4442 : vec4<f32> = u_xlat14;
            let x_4444 : vec2<f32> = (vec2<f32>(x_4442.y, x_4442.w) * vec2<f32>(0.04081600159406661987f, 0.04081600159406661987f));
            let x_4445 : vec4<f32> = u_xlat15;
            u_xlat15 = vec4<f32>(x_4445.x, x_4444.x, x_4445.z, x_4444.y);
            let x_4447 : vec4<f32> = u_xlat14;
            let x_4450 : vec2<f32> = u_xlat64;
            let x_4452 : vec2<f32> = ((vec2<f32>(x_4447.x, x_4447.z) * vec2<f32>(0.5f, 0.5f)) + -(x_4450));
            let x_4453 : vec4<f32> = u_xlat13;
            u_xlat13 = vec4<f32>(x_4452.x, x_4453.y, x_4452.y, x_4453.w);
            let x_4455 : vec2<f32> = u_xlat64;
            let x_4457 : vec2<f32> = (-(x_4455) + vec2<f32>(1.0f, 1.0f));
            let x_4458 : vec4<f32> = u_xlat14;
            u_xlat14 = vec4<f32>(x_4457.x, x_4457.y, x_4458.z, x_4458.w);
            let x_4460 : vec2<f32> = u_xlat64;
            u_xlat66 = min(x_4460, vec2<f32>(0.0f, 0.0f));
            let x_4462 : vec2<f32> = u_xlat66;
            let x_4464 : vec2<f32> = u_xlat66;
            let x_4466 : vec4<f32> = u_xlat14;
            let x_4468 : vec2<f32> = ((-(x_4462) * x_4464) + vec2<f32>(x_4466.x, x_4466.y));
            let x_4469 : vec4<f32> = u_xlat14;
            u_xlat14 = vec4<f32>(x_4468.x, x_4468.y, x_4469.z, x_4469.w);
            let x_4471 : vec2<f32> = u_xlat64;
            u_xlat66 = max(x_4471, vec2<f32>(0.0f, 0.0f));
            let x_4474 : vec2<f32> = u_xlat66;
            let x_4476 : vec2<f32> = u_xlat66;
            let x_4478 : vec4<f32> = u_xlat13;
            let x_4480 : vec2<f32> = ((-(x_4474) * x_4476) + vec2<f32>(x_4478.y, x_4478.w));
            let x_4481 : vec3<f32> = u_xlat39;
            u_xlat39 = vec3<f32>(x_4480.x, x_4481.y, x_4480.y);
            let x_4483 : vec4<f32> = u_xlat14;
            let x_4485 : vec2<f32> = (vec2<f32>(x_4483.x, x_4483.y) + vec2<f32>(2.0f, 2.0f));
            let x_4486 : vec4<f32> = u_xlat14;
            u_xlat14 = vec4<f32>(x_4485.x, x_4485.y, x_4486.z, x_4486.w);
            let x_4488 : vec3<f32> = u_xlat39;
            let x_4490 : vec2<f32> = (vec2<f32>(x_4488.x, x_4488.z) + vec2<f32>(2.0f, 2.0f));
            let x_4491 : vec4<f32> = u_xlat13;
            u_xlat13 = vec4<f32>(x_4491.x, x_4490.x, x_4491.z, x_4490.y);
            let x_4494 : f32 = u_xlat13.y;
            u_xlat16.z = (x_4494 * 0.08163200318813323975f);
            let x_4497 : vec4<f32> = u_xlat13;
            let x_4499 : vec3<f32> = (vec3<f32>(x_4497.z, x_4497.x, x_4497.w) * vec3<f32>(0.08163200318813323975f, 0.08163200318813323975f, 0.08163200318813323975f));
            let x_4500 : vec4<f32> = u_xlat17;
            u_xlat17 = vec4<f32>(x_4499.x, x_4499.y, x_4499.z, x_4500.w);
            let x_4502 : vec4<f32> = u_xlat14;
            let x_4504 : vec2<f32> = (vec2<f32>(x_4502.x, x_4502.y) * vec2<f32>(0.08163200318813323975f, 0.08163200318813323975f));
            let x_4505 : vec4<f32> = u_xlat13;
            u_xlat13 = vec4<f32>(x_4504.x, x_4504.y, x_4505.z, x_4505.w);
            let x_4508 : f32 = u_xlat17.y;
            u_xlat16.x = x_4508;
            let x_4510 : vec2<f32> = u_xlat64;
            let x_4513 : vec2<f32> = ((vec2<f32>(x_4510.x, x_4510.x) * vec2<f32>(-0.08163200318813323975f, 0.08163200318813323975f)) + vec2<f32>(0.16326400637626647949f, 0.08163200318813323975f));
            let x_4514 : vec4<f32> = u_xlat16;
            u_xlat16 = vec4<f32>(x_4514.x, x_4513.x, x_4514.z, x_4513.y);
            let x_4516 : vec2<f32> = u_xlat64;
            let x_4519 : vec2<f32> = ((vec2<f32>(x_4516.x, x_4516.x) * vec2<f32>(-0.08163200318813323975f, 0.08163200318813323975f)) + vec2<f32>(0.08163200318813323975f, 0.16326400637626647949f));
            let x_4520 : vec4<f32> = u_xlat14;
            u_xlat14 = vec4<f32>(x_4519.x, x_4520.y, x_4519.y, x_4520.w);
            let x_4523 : f32 = u_xlat13.x;
            u_xlat14.y = x_4523;
            let x_4526 : f32 = u_xlat15.y;
            u_xlat14.w = x_4526;
            let x_4528 : vec4<f32> = u_xlat14;
            let x_4529 : vec4<f32> = u_xlat16;
            u_xlat16 = (x_4528 + x_4529);
            let x_4531 : vec2<f32> = u_xlat64;
            let x_4534 : vec2<f32> = ((vec2<f32>(x_4531.y, x_4531.y) * vec2<f32>(-0.08163200318813323975f, 0.08163200318813323975f)) + vec2<f32>(0.16326400637626647949f, 0.08163200318813323975f));
            let x_4535 : vec4<f32> = u_xlat17;
            u_xlat17 = vec4<f32>(x_4535.x, x_4534.x, x_4535.z, x_4534.y);
            let x_4537 : vec2<f32> = u_xlat64;
            let x_4540 : vec2<f32> = ((vec2<f32>(x_4537.y, x_4537.y) * vec2<f32>(-0.08163200318813323975f, 0.08163200318813323975f)) + vec2<f32>(0.08163200318813323975f, 0.16326400637626647949f));
            let x_4541 : vec4<f32> = u_xlat15;
            u_xlat15 = vec4<f32>(x_4540.x, x_4541.y, x_4540.y, x_4541.w);
            let x_4544 : f32 = u_xlat13.y;
            u_xlat15.y = x_4544;
            let x_4546 : vec4<f32> = u_xlat15;
            let x_4547 : vec4<f32> = u_xlat17;
            u_xlat13 = (x_4546 + x_4547);
            let x_4549 : vec4<f32> = u_xlat14;
            let x_4550 : vec4<f32> = u_xlat16;
            u_xlat14 = (x_4549 / x_4550);
            let x_4552 : vec4<f32> = u_xlat14;
            u_xlat14 = (x_4552 + vec4<f32>(-3.5f, -1.5f, 0.5f, 2.5f));
            let x_4554 : vec4<f32> = u_xlat15;
            let x_4555 : vec4<f32> = u_xlat13;
            u_xlat15 = (x_4554 / x_4555);
            let x_4557 : vec4<f32> = u_xlat15;
            u_xlat15 = (x_4557 + vec4<f32>(-3.5f, -1.5f, 0.5f, 2.5f));
            let x_4559 : vec4<f32> = u_xlat14;
            let x_4562 : vec4<f32> = x_246.x_AdditionalShadowmapSize;
            u_xlat14 = (vec4<f32>(x_4559.w, x_4559.x, x_4559.y, x_4559.z) * vec4<f32>(x_4562.x, x_4562.x, x_4562.x, x_4562.x));
            let x_4565 : vec4<f32> = u_xlat15;
            let x_4568 : vec4<f32> = x_246.x_AdditionalShadowmapSize;
            u_xlat15 = (vec4<f32>(x_4565.x, x_4565.w, x_4565.y, x_4565.z) * vec4<f32>(x_4568.y, x_4568.y, x_4568.y, x_4568.y));
            let x_4571 : vec4<f32> = u_xlat14;
            let x_4572 : vec3<f32> = vec3<f32>(x_4571.y, x_4571.z, x_4571.w);
            let x_4573 : vec4<f32> = u_xlat17;
            u_xlat17 = vec4<f32>(x_4572.x, x_4573.y, x_4572.y, x_4572.z);
            let x_4576 : f32 = u_xlat15.x;
            u_xlat17.y = x_4576;
            let x_4578 : vec4<f32> = u_xlat12;
            let x_4581 : vec4<f32> = x_246.x_AdditionalShadowmapSize;
            let x_4584 : vec4<f32> = u_xlat17;
            u_xlat18 = ((vec4<f32>(x_4578.x, x_4578.y, x_4578.x, x_4578.y) * vec4<f32>(x_4581.x, x_4581.y, x_4581.x, x_4581.y)) + vec4<f32>(x_4584.x, x_4584.y, x_4584.z, x_4584.y));
            let x_4587 : vec4<f32> = u_xlat12;
            let x_4590 : vec4<f32> = x_246.x_AdditionalShadowmapSize;
            let x_4593 : vec4<f32> = u_xlat17;
            u_xlat64 = ((vec2<f32>(x_4587.x, x_4587.y) * vec2<f32>(x_4590.x, x_4590.y)) + vec2<f32>(x_4593.w, x_4593.y));
            let x_4597 : f32 = u_xlat17.y;
            u_xlat14.y = x_4597;
            let x_4600 : f32 = u_xlat15.z;
            u_xlat17.y = x_4600;
            let x_4602 : vec4<f32> = u_xlat12;
            let x_4605 : vec4<f32> = x_246.x_AdditionalShadowmapSize;
            let x_4608 : vec4<f32> = u_xlat17;
            u_xlat19 = ((vec4<f32>(x_4602.x, x_4602.y, x_4602.x, x_4602.y) * vec4<f32>(x_4605.x, x_4605.y, x_4605.x, x_4605.y)) + vec4<f32>(x_4608.x, x_4608.y, x_4608.z, x_4608.y));
            let x_4611 : vec4<f32> = u_xlat12;
            let x_4614 : vec4<f32> = x_246.x_AdditionalShadowmapSize;
            let x_4617 : vec4<f32> = u_xlat17;
            let x_4619 : vec2<f32> = ((vec2<f32>(x_4611.x, x_4611.y) * vec2<f32>(x_4614.x, x_4614.y)) + vec2<f32>(x_4617.w, x_4617.y));
            let x_4620 : vec4<f32> = u_xlat20;
            u_xlat20 = vec4<f32>(x_4619.x, x_4619.y, x_4620.z, x_4620.w);
            let x_4623 : f32 = u_xlat17.y;
            u_xlat14.z = x_4623;
            let x_4625 : vec4<f32> = u_xlat12;
            let x_4628 : vec4<f32> = x_246.x_AdditionalShadowmapSize;
            let x_4631 : vec4<f32> = u_xlat14;
            u_xlat21 = ((vec4<f32>(x_4625.x, x_4625.y, x_4625.x, x_4625.y) * vec4<f32>(x_4628.x, x_4628.y, x_4628.x, x_4628.y)) + vec4<f32>(x_4631.x, x_4631.y, x_4631.x, x_4631.z));
            let x_4635 : f32 = u_xlat15.w;
            u_xlat17.y = x_4635;
            let x_4638 : vec4<f32> = u_xlat12;
            let x_4641 : vec4<f32> = x_246.x_AdditionalShadowmapSize;
            let x_4644 : vec4<f32> = u_xlat17;
            u_xlat22 = ((vec4<f32>(x_4638.x, x_4638.y, x_4638.x, x_4638.y) * vec4<f32>(x_4641.x, x_4641.y, x_4641.x, x_4641.y)) + vec4<f32>(x_4644.x, x_4644.y, x_4644.z, x_4644.y));
            let x_4648 : vec4<f32> = u_xlat12;
            let x_4651 : vec4<f32> = x_246.x_AdditionalShadowmapSize;
            let x_4654 : vec4<f32> = u_xlat17;
            u_xlat40 = ((vec2<f32>(x_4648.x, x_4648.y) * vec2<f32>(x_4651.x, x_4651.y)) + vec2<f32>(x_4654.w, x_4654.y));
            let x_4658 : f32 = u_xlat17.y;
            u_xlat14.w = x_4658;
            let x_4661 : vec4<f32> = u_xlat12;
            let x_4664 : vec4<f32> = x_246.x_AdditionalShadowmapSize;
            let x_4667 : vec4<f32> = u_xlat14;
            u_xlat72 = ((vec2<f32>(x_4661.x, x_4661.y) * vec2<f32>(x_4664.x, x_4664.y)) + vec2<f32>(x_4667.x, x_4667.w));
            let x_4670 : vec4<f32> = u_xlat17;
            let x_4671 : vec3<f32> = vec3<f32>(x_4670.x, x_4670.z, x_4670.w);
            let x_4672 : vec4<f32> = u_xlat15;
            u_xlat15 = vec4<f32>(x_4671.x, x_4672.y, x_4671.y, x_4671.z);
            let x_4674 : vec4<f32> = u_xlat12;
            let x_4677 : vec4<f32> = x_246.x_AdditionalShadowmapSize;
            let x_4680 : vec4<f32> = u_xlat15;
            u_xlat17 = ((vec4<f32>(x_4674.x, x_4674.y, x_4674.x, x_4674.y) * vec4<f32>(x_4677.x, x_4677.y, x_4677.x, x_4677.y)) + vec4<f32>(x_4680.x, x_4680.y, x_4680.z, x_4680.y));
            let x_4684 : vec4<f32> = u_xlat12;
            let x_4687 : vec4<f32> = x_246.x_AdditionalShadowmapSize;
            let x_4690 : vec4<f32> = u_xlat15;
            u_xlat67 = ((vec2<f32>(x_4684.x, x_4684.y) * vec2<f32>(x_4687.x, x_4687.y)) + vec2<f32>(x_4690.w, x_4690.y));
            let x_4694 : f32 = u_xlat14.x;
            u_xlat15.x = x_4694;
            let x_4696 : vec4<f32> = u_xlat12;
            let x_4699 : vec4<f32> = x_246.x_AdditionalShadowmapSize;
            let x_4702 : vec4<f32> = u_xlat15;
            let x_4704 : vec2<f32> = ((vec2<f32>(x_4696.x, x_4696.y) * vec2<f32>(x_4699.x, x_4699.y)) + vec2<f32>(x_4702.x, x_4702.y));
            let x_4705 : vec4<f32> = u_xlat12;
            u_xlat12 = vec4<f32>(x_4704.x, x_4704.y, x_4705.z, x_4705.w);
            let x_4708 : vec4<f32> = u_xlat13;
            let x_4710 : vec4<f32> = u_xlat16;
            u_xlat23 = (vec4<f32>(x_4708.x, x_4708.x, x_4708.x, x_4708.x) * x_4710);
            let x_4713 : vec4<f32> = u_xlat13;
            let x_4715 : vec4<f32> = u_xlat16;
            u_xlat24 = (vec4<f32>(x_4713.y, x_4713.y, x_4713.y, x_4713.y) * x_4715);
            let x_4718 : vec4<f32> = u_xlat13;
            let x_4720 : vec4<f32> = u_xlat16;
            u_xlat25 = (vec4<f32>(x_4718.z, x_4718.z, x_4718.z, x_4718.z) * x_4720);
            let x_4722 : vec4<f32> = u_xlat13;
            let x_4724 : vec4<f32> = u_xlat16;
            u_xlat13 = (vec4<f32>(x_4722.w, x_4722.w, x_4722.w, x_4722.w) * x_4724);
            let x_4727 : vec4<f32> = u_xlat18;
            let x_4728 : vec2<f32> = vec2<f32>(x_4727.x, x_4727.y);
            let x_4730 : f32 = u_xlat11.z;
            txVec73 = vec3<f32>(x_4728.x, x_4728.y, x_4730);
            let x_4737 : vec3<f32> = txVec73;
            let x_4739 : f32 = textureSampleCompareLevel(x_AdditionalLightsShadowmapTexture, sampler_LinearClampCompare, x_4737.xy, x_4737.z);
            u_xlat85 = x_4739;
            let x_4741 : vec4<f32> = u_xlat18;
            let x_4742 : vec2<f32> = vec2<f32>(x_4741.z, x_4741.w);
            let x_4744 : f32 = u_xlat11.z;
            txVec74 = vec3<f32>(x_4742.x, x_4742.y, x_4744);
            let x_4751 : vec3<f32> = txVec74;
            let x_4753 : f32 = textureSampleCompareLevel(x_AdditionalLightsShadowmapTexture, sampler_LinearClampCompare, x_4751.xy, x_4751.z);
            u_xlat86 = x_4753;
            let x_4754 : f32 = u_xlat86;
            let x_4756 : f32 = u_xlat23.y;
            u_xlat86 = (x_4754 * x_4756);
            let x_4759 : f32 = u_xlat23.x;
            let x_4760 : f32 = u_xlat85;
            let x_4762 : f32 = u_xlat86;
            u_xlat85 = ((x_4759 * x_4760) + x_4762);
            let x_4765 : vec2<f32> = u_xlat64;
            let x_4767 : f32 = u_xlat11.z;
            txVec75 = vec3<f32>(x_4765.x, x_4765.y, x_4767);
            let x_4774 : vec3<f32> = txVec75;
            let x_4776 : f32 = textureSampleCompareLevel(x_AdditionalLightsShadowmapTexture, sampler_LinearClampCompare, x_4774.xy, x_4774.z);
            u_xlat86 = x_4776;
            let x_4778 : f32 = u_xlat23.z;
            let x_4779 : f32 = u_xlat86;
            let x_4781 : f32 = u_xlat85;
            u_xlat85 = ((x_4778 * x_4779) + x_4781);
            let x_4784 : vec4<f32> = u_xlat21;
            let x_4785 : vec2<f32> = vec2<f32>(x_4784.x, x_4784.y);
            let x_4787 : f32 = u_xlat11.z;
            txVec76 = vec3<f32>(x_4785.x, x_4785.y, x_4787);
            let x_4794 : vec3<f32> = txVec76;
            let x_4796 : f32 = textureSampleCompareLevel(x_AdditionalLightsShadowmapTexture, sampler_LinearClampCompare, x_4794.xy, x_4794.z);
            u_xlat86 = x_4796;
            let x_4798 : f32 = u_xlat23.w;
            let x_4799 : f32 = u_xlat86;
            let x_4801 : f32 = u_xlat85;
            u_xlat85 = ((x_4798 * x_4799) + x_4801);
            let x_4804 : vec4<f32> = u_xlat19;
            let x_4805 : vec2<f32> = vec2<f32>(x_4804.x, x_4804.y);
            let x_4807 : f32 = u_xlat11.z;
            txVec77 = vec3<f32>(x_4805.x, x_4805.y, x_4807);
            let x_4814 : vec3<f32> = txVec77;
            let x_4816 : f32 = textureSampleCompareLevel(x_AdditionalLightsShadowmapTexture, sampler_LinearClampCompare, x_4814.xy, x_4814.z);
            u_xlat86 = x_4816;
            let x_4818 : f32 = u_xlat24.x;
            let x_4819 : f32 = u_xlat86;
            let x_4821 : f32 = u_xlat85;
            u_xlat85 = ((x_4818 * x_4819) + x_4821);
            let x_4824 : vec4<f32> = u_xlat19;
            let x_4825 : vec2<f32> = vec2<f32>(x_4824.z, x_4824.w);
            let x_4827 : f32 = u_xlat11.z;
            txVec78 = vec3<f32>(x_4825.x, x_4825.y, x_4827);
            let x_4834 : vec3<f32> = txVec78;
            let x_4836 : f32 = textureSampleCompareLevel(x_AdditionalLightsShadowmapTexture, sampler_LinearClampCompare, x_4834.xy, x_4834.z);
            u_xlat86 = x_4836;
            let x_4838 : f32 = u_xlat24.y;
            let x_4839 : f32 = u_xlat86;
            let x_4841 : f32 = u_xlat85;
            u_xlat85 = ((x_4838 * x_4839) + x_4841);
            let x_4844 : vec4<f32> = u_xlat20;
            let x_4845 : vec2<f32> = vec2<f32>(x_4844.x, x_4844.y);
            let x_4847 : f32 = u_xlat11.z;
            txVec79 = vec3<f32>(x_4845.x, x_4845.y, x_4847);
            let x_4854 : vec3<f32> = txVec79;
            let x_4856 : f32 = textureSampleCompareLevel(x_AdditionalLightsShadowmapTexture, sampler_LinearClampCompare, x_4854.xy, x_4854.z);
            u_xlat86 = x_4856;
            let x_4858 : f32 = u_xlat24.z;
            let x_4859 : f32 = u_xlat86;
            let x_4861 : f32 = u_xlat85;
            u_xlat85 = ((x_4858 * x_4859) + x_4861);
            let x_4864 : vec4<f32> = u_xlat21;
            let x_4865 : vec2<f32> = vec2<f32>(x_4864.z, x_4864.w);
            let x_4867 : f32 = u_xlat11.z;
            txVec80 = vec3<f32>(x_4865.x, x_4865.y, x_4867);
            let x_4874 : vec3<f32> = txVec80;
            let x_4876 : f32 = textureSampleCompareLevel(x_AdditionalLightsShadowmapTexture, sampler_LinearClampCompare, x_4874.xy, x_4874.z);
            u_xlat86 = x_4876;
            let x_4878 : f32 = u_xlat24.w;
            let x_4879 : f32 = u_xlat86;
            let x_4881 : f32 = u_xlat85;
            u_xlat85 = ((x_4878 * x_4879) + x_4881);
            let x_4884 : vec4<f32> = u_xlat22;
            let x_4885 : vec2<f32> = vec2<f32>(x_4884.x, x_4884.y);
            let x_4887 : f32 = u_xlat11.z;
            txVec81 = vec3<f32>(x_4885.x, x_4885.y, x_4887);
            let x_4894 : vec3<f32> = txVec81;
            let x_4896 : f32 = textureSampleCompareLevel(x_AdditionalLightsShadowmapTexture, sampler_LinearClampCompare, x_4894.xy, x_4894.z);
            u_xlat86 = x_4896;
            let x_4898 : f32 = u_xlat25.x;
            let x_4899 : f32 = u_xlat86;
            let x_4901 : f32 = u_xlat85;
            u_xlat85 = ((x_4898 * x_4899) + x_4901);
            let x_4904 : vec4<f32> = u_xlat22;
            let x_4905 : vec2<f32> = vec2<f32>(x_4904.z, x_4904.w);
            let x_4907 : f32 = u_xlat11.z;
            txVec82 = vec3<f32>(x_4905.x, x_4905.y, x_4907);
            let x_4914 : vec3<f32> = txVec82;
            let x_4916 : f32 = textureSampleCompareLevel(x_AdditionalLightsShadowmapTexture, sampler_LinearClampCompare, x_4914.xy, x_4914.z);
            u_xlat86 = x_4916;
            let x_4918 : f32 = u_xlat25.y;
            let x_4919 : f32 = u_xlat86;
            let x_4921 : f32 = u_xlat85;
            u_xlat85 = ((x_4918 * x_4919) + x_4921);
            let x_4924 : vec2<f32> = u_xlat40;
            let x_4926 : f32 = u_xlat11.z;
            txVec83 = vec3<f32>(x_4924.x, x_4924.y, x_4926);
            let x_4933 : vec3<f32> = txVec83;
            let x_4935 : f32 = textureSampleCompareLevel(x_AdditionalLightsShadowmapTexture, sampler_LinearClampCompare, x_4933.xy, x_4933.z);
            u_xlat86 = x_4935;
            let x_4937 : f32 = u_xlat25.z;
            let x_4938 : f32 = u_xlat86;
            let x_4940 : f32 = u_xlat85;
            u_xlat85 = ((x_4937 * x_4938) + x_4940);
            let x_4943 : vec2<f32> = u_xlat72;
            let x_4945 : f32 = u_xlat11.z;
            txVec84 = vec3<f32>(x_4943.x, x_4943.y, x_4945);
            let x_4952 : vec3<f32> = txVec84;
            let x_4954 : f32 = textureSampleCompareLevel(x_AdditionalLightsShadowmapTexture, sampler_LinearClampCompare, x_4952.xy, x_4952.z);
            u_xlat86 = x_4954;
            let x_4956 : f32 = u_xlat25.w;
            let x_4957 : f32 = u_xlat86;
            let x_4959 : f32 = u_xlat85;
            u_xlat85 = ((x_4956 * x_4957) + x_4959);
            let x_4962 : vec4<f32> = u_xlat17;
            let x_4963 : vec2<f32> = vec2<f32>(x_4962.x, x_4962.y);
            let x_4965 : f32 = u_xlat11.z;
            txVec85 = vec3<f32>(x_4963.x, x_4963.y, x_4965);
            let x_4972 : vec3<f32> = txVec85;
            let x_4974 : f32 = textureSampleCompareLevel(x_AdditionalLightsShadowmapTexture, sampler_LinearClampCompare, x_4972.xy, x_4972.z);
            u_xlat86 = x_4974;
            let x_4976 : f32 = u_xlat13.x;
            let x_4977 : f32 = u_xlat86;
            let x_4979 : f32 = u_xlat85;
            u_xlat85 = ((x_4976 * x_4977) + x_4979);
            let x_4982 : vec4<f32> = u_xlat17;
            let x_4983 : vec2<f32> = vec2<f32>(x_4982.z, x_4982.w);
            let x_4985 : f32 = u_xlat11.z;
            txVec86 = vec3<f32>(x_4983.x, x_4983.y, x_4985);
            let x_4992 : vec3<f32> = txVec86;
            let x_4994 : f32 = textureSampleCompareLevel(x_AdditionalLightsShadowmapTexture, sampler_LinearClampCompare, x_4992.xy, x_4992.z);
            u_xlat86 = x_4994;
            let x_4996 : f32 = u_xlat13.y;
            let x_4997 : f32 = u_xlat86;
            let x_4999 : f32 = u_xlat85;
            u_xlat85 = ((x_4996 * x_4997) + x_4999);
            let x_5002 : vec2<f32> = u_xlat67;
            let x_5004 : f32 = u_xlat11.z;
            txVec87 = vec3<f32>(x_5002.x, x_5002.y, x_5004);
            let x_5011 : vec3<f32> = txVec87;
            let x_5013 : f32 = textureSampleCompareLevel(x_AdditionalLightsShadowmapTexture, sampler_LinearClampCompare, x_5011.xy, x_5011.z);
            u_xlat86 = x_5013;
            let x_5015 : f32 = u_xlat13.z;
            let x_5016 : f32 = u_xlat86;
            let x_5018 : f32 = u_xlat85;
            u_xlat85 = ((x_5015 * x_5016) + x_5018);
            let x_5021 : vec4<f32> = u_xlat12;
            let x_5022 : vec2<f32> = vec2<f32>(x_5021.x, x_5021.y);
            let x_5024 : f32 = u_xlat11.z;
            txVec88 = vec3<f32>(x_5022.x, x_5022.y, x_5024);
            let x_5031 : vec3<f32> = txVec88;
            let x_5033 : f32 = textureSampleCompareLevel(x_AdditionalLightsShadowmapTexture, sampler_LinearClampCompare, x_5031.xy, x_5031.z);
            u_xlat86 = x_5033;
            let x_5035 : f32 = u_xlat13.w;
            let x_5036 : f32 = u_xlat86;
            let x_5038 : f32 = u_xlat85;
            u_xlat84 = ((x_5035 * x_5036) + x_5038);
          }
        }
      } else {
        let x_5042 : vec4<f32> = u_xlat11;
        let x_5043 : vec2<f32> = vec2<f32>(x_5042.x, x_5042.y);
        let x_5045 : f32 = u_xlat11.z;
        txVec89 = vec3<f32>(x_5043.x, x_5043.y, x_5045);
        let x_5052 : vec3<f32> = txVec89;
        let x_5054 : f32 = textureSampleCompareLevel(x_AdditionalLightsShadowmapTexture, sampler_LinearClampCompare, x_5052.xy, x_5052.z);
        u_xlat84 = x_5054;
      }
      let x_5055 : i32 = u_xlati81;
      let x_5057 : f32 = x_246.x_AdditionalShadowParams[x_5055].x;
      u_xlat85 = (1.0f + -(x_5057));
      let x_5060 : f32 = u_xlat84;
      let x_5061 : i32 = u_xlati81;
      let x_5063 : f32 = x_246.x_AdditionalShadowParams[x_5061].x;
      let x_5065 : f32 = u_xlat85;
      u_xlat84 = ((x_5060 * x_5063) + x_5065);
      let x_5068 : f32 = u_xlat11.z;
      u_xlatb85 = (0.0f >= x_5068);
      let x_5072 : f32 = u_xlat11.z;
      u_xlatb86 = (x_5072 >= 1.0f);
      let x_5074 : bool = u_xlatb85;
      let x_5075 : bool = u_xlatb86;
      u_xlatb85 = (x_5074 | x_5075);
      let x_5077 : bool = u_xlatb85;
      let x_5078 : f32 = u_xlat84;
      u_xlat84 = select(x_5078, 1.0f, x_5077);
    } else {
      u_xlat84 = 1.0f;
    }
    let x_5081 : f32 = u_xlat84;
    u_xlat85 = (-(x_5081) + 1.0f);
    let x_5085 : f32 = u_xlat2.x;
    let x_5086 : f32 = u_xlat85;
    let x_5088 : f32 = u_xlat84;
    u_xlat84 = ((x_5085 * x_5086) + x_5088);
    let x_5090 : f32 = u_xlat83;
    let x_5091 : f32 = u_xlat84;
    u_xlat83 = (x_5090 * x_5091);
    let x_5093 : vec4<f32> = u_xlat4;
    let x_5095 : vec4<f32> = u_xlat10;
    u_xlat84 = dot(vec3<f32>(x_5093.x, x_5093.y, x_5093.z), vec3<f32>(x_5095.x, x_5095.y, x_5095.z));
    let x_5098 : f32 = u_xlat84;
    u_xlat84 = clamp(x_5098, 0.0f, 1.0f);
    let x_5100 : f32 = u_xlat83;
    let x_5101 : f32 = u_xlat84;
    u_xlat83 = (x_5100 * x_5101);
    let x_5103 : f32 = u_xlat83;
    let x_5105 : i32 = u_xlati81;
    let x_5107 : vec4<f32> = x_3671.x_AdditionalLightsColor[x_5105];
    let x_5109 : vec3<f32> = (vec3<f32>(x_5103, x_5103, x_5103) * vec3<f32>(x_5107.x, x_5107.y, x_5107.z));
    let x_5110 : vec4<f32> = u_xlat11;
    u_xlat11 = vec4<f32>(x_5109.x, x_5109.y, x_5109.z, x_5110.w);
    let x_5112 : vec4<f32> = u_xlat9;
    let x_5114 : vec2<f32> = u_xlat58;
    let x_5117 : vec4<f32> = u_xlat7;
    let x_5119 : vec3<f32> = ((vec3<f32>(x_5112.x, x_5112.y, x_5112.z) * vec3<f32>(x_5114.x, x_5114.x, x_5114.x)) + vec3<f32>(x_5117.x, x_5117.y, x_5117.z));
    let x_5120 : vec4<f32> = u_xlat9;
    u_xlat9 = vec4<f32>(x_5119.x, x_5119.y, x_5119.z, x_5120.w);
    let x_5122 : vec4<f32> = u_xlat9;
    let x_5124 : vec4<f32> = u_xlat9;
    u_xlat81 = dot(vec3<f32>(x_5122.x, x_5122.y, x_5122.z), vec3<f32>(x_5124.x, x_5124.y, x_5124.z));
    let x_5127 : f32 = u_xlat81;
    u_xlat81 = max(x_5127, 1.17549435e-38f);
    let x_5129 : f32 = u_xlat81;
    u_xlat81 = inverseSqrt(x_5129);
    let x_5131 : f32 = u_xlat81;
    let x_5133 : vec4<f32> = u_xlat9;
    let x_5135 : vec3<f32> = (vec3<f32>(x_5131, x_5131, x_5131) * vec3<f32>(x_5133.x, x_5133.y, x_5133.z));
    let x_5136 : vec4<f32> = u_xlat9;
    u_xlat9 = vec4<f32>(x_5135.x, x_5135.y, x_5135.z, x_5136.w);
    let x_5138 : vec4<f32> = u_xlat4;
    let x_5140 : vec4<f32> = u_xlat9;
    u_xlat81 = dot(vec3<f32>(x_5138.x, x_5138.y, x_5138.z), vec3<f32>(x_5140.x, x_5140.y, x_5140.z));
    let x_5143 : f32 = u_xlat81;
    u_xlat81 = clamp(x_5143, 0.0f, 1.0f);
    let x_5145 : vec4<f32> = u_xlat10;
    let x_5147 : vec4<f32> = u_xlat9;
    u_xlat83 = dot(vec3<f32>(x_5145.x, x_5145.y, x_5145.z), vec3<f32>(x_5147.x, x_5147.y, x_5147.z));
    let x_5150 : f32 = u_xlat83;
    u_xlat83 = clamp(x_5150, 0.0f, 1.0f);
    let x_5152 : f32 = u_xlat81;
    let x_5153 : f32 = u_xlat81;
    u_xlat81 = (x_5152 * x_5153);
    let x_5155 : f32 = u_xlat81;
    let x_5157 : f32 = u_xlat29.x;
    u_xlat81 = ((x_5155 * x_5157) + 1.00001001358032226562f);
    let x_5160 : f32 = u_xlat83;
    let x_5161 : f32 = u_xlat83;
    u_xlat83 = (x_5160 * x_5161);
    let x_5163 : f32 = u_xlat81;
    let x_5164 : f32 = u_xlat81;
    u_xlat81 = (x_5163 * x_5164);
    let x_5166 : f32 = u_xlat83;
    u_xlat83 = max(x_5166, 0.10000000149011611938f);
    let x_5168 : f32 = u_xlat81;
    let x_5169 : f32 = u_xlat83;
    u_xlat81 = (x_5168 * x_5169);
    let x_5172 : f32 = u_xlat6.x;
    let x_5173 : f32 = u_xlat81;
    u_xlat81 = (x_5172 * x_5173);
    let x_5175 : f32 = u_xlat82;
    let x_5176 : f32 = u_xlat81;
    u_xlat81 = (x_5175 / x_5176);
    let x_5178 : f32 = u_xlat81;
    let x_5181 : vec3<f32> = u_xlat5;
    let x_5182 : vec3<f32> = ((vec3<f32>(x_5178, x_5178, x_5178) * vec3<f32>(0.03999999910593032837f, 0.03999999910593032837f, 0.03999999910593032837f)) + x_5181);
    let x_5183 : vec4<f32> = u_xlat9;
    u_xlat9 = vec4<f32>(x_5182.x, x_5182.y, x_5182.z, x_5183.w);
    let x_5185 : vec4<f32> = u_xlat9;
    let x_5187 : vec4<f32> = u_xlat11;
    let x_5190 : vec4<f32> = u_xlat8;
    let x_5192 : vec3<f32> = ((vec3<f32>(x_5185.x, x_5185.y, x_5185.z) * vec3<f32>(x_5187.x, x_5187.y, x_5187.z)) + vec3<f32>(x_5190.x, x_5190.y, x_5190.z));
    let x_5193 : vec4<f32> = u_xlat8;
    u_xlat8 = vec4<f32>(x_5192.x, x_5192.y, x_5192.z, x_5193.w);

    continuing {
      let x_5195 : u32 = u_xlatu_loop_1;
      u_xlatu_loop_1 = (x_5195 + bitcast<u32>(1i));
    }
  }
  let x_5197 : vec3<f32> = u_xlat26;
  let x_5198 : vec3<f32> = u_xlat32;
  let x_5201 : vec3<f32> = u_xlat28;
  u_xlat0 = ((x_5197 * vec3<f32>(x_5198.x, x_5198.x, x_5198.x)) + x_5201);
  let x_5203 : vec4<f32> = u_xlat8;
  let x_5205 : vec3<f32> = u_xlat0;
  u_xlat0 = (vec3<f32>(x_5203.x, x_5203.y, x_5203.z) + x_5205);
  let x_5209 : vec4<f32> = vs_INTERP6;
  let x_5211 : vec3<f32> = u_xlat1;
  let x_5213 : vec3<f32> = u_xlat0;
  let x_5214 : vec3<f32> = ((vec3<f32>(x_5209.w, x_5209.w, x_5209.w) * x_5211) + x_5213);
  let x_5215 : vec4<f32> = SV_Target0;
  SV_Target0 = vec4<f32>(x_5214.x, x_5214.y, x_5214.z, x_5215.w);
  let x_5217 : bool = u_xlatb55;
  let x_5218 : f32 = u_xlat79;
  SV_Target0.w = select(1.0f, x_5218, x_5217);
  return;
}

struct main_out {
  @location(0)
  SV_Target0_1 : vec4<f32>,
}

@fragment
fn main(@location(4) vs_INTERP9_param : vec3<f32>, @location(0) vs_INTERP4_param : vec4<f32>, @location(1) vs_INTERP5_param : vec4<f32>, @location(2) vs_INTERP6_param : vec4<f32>, @location(3) vs_INTERP8_param : vec3<f32>, @builtin(position) gl_FragCoord_param : vec4<f32>) -> main_out {
  vs_INTERP9 = vs_INTERP9_param;
  vs_INTERP4 = vs_INTERP4_param;
  vs_INTERP5 = vs_INTERP5_param;
  vs_INTERP6 = vs_INTERP6_param;
  vs_INTERP8 = vs_INTERP8_param;
  gl_FragCoord = gl_FragCoord_param;
  main_1();
  return main_out(SV_Target0);
}


