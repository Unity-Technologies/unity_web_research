struct CB1 {
  InvLowResolution : vec4<f32>,
  InvHighResolution : vec4<f32>,
  AdditionalParams : vec4<f32>,
}

struct S {
  value : array<u32, 1u>,
}

struct S_1 {
  value : array<u32, 1u>,
}

struct S_2 {
  value : array<u32, 1u>,
}

var<private> gl_LocalInvocationID : vec3<u32>;

var<private> gl_GlobalInvocationID : vec3<u32>;

@group(1) @binding(0) var<uniform> x_65 : CB1;

@group(0) @binding(2) var LoResAO1 : texture_2d<f32>;

@group(0) @binding(7) var samplerLoResAO1 : sampler;

var<workgroup> TGSM1 : array<S, 256u>;

@group(0) @binding(0) var LoResDB : texture_2d<f32>;

@group(0) @binding(5) var samplerLoResDB : sampler;

var<workgroup> TGSM0 : array<S_1, 256u>;

var<private> gl_LocalInvocationIndex : u32;

var<workgroup> TGSM2 : array<S_2, 256u>;

@group(0) @binding(3) var HiResAO : texture_2d<f32>;

@group(0) @binding(8) var samplerHiResAO : sampler;

@group(0) @binding(1) var HiResDB : texture_2d<f32>;

@group(0) @binding(6) var samplerHiResDB : sampler;

@group(0) @binding(4) var AoResult_origX0X : texture_storage_2d<r32float, write>;

fn main_1() {
  var u_xlati0 : i32;
  var u_xlati8 : vec3<i32>;
  var u_xlat8 : vec3<f32>;
  var u_xlat1 : vec4<f32>;
  var u_xlati24 : i32;
  var u_xlati17 : vec2<i32>;
  var u_xlat2 : vec4<f32>;
  var u_xlatb0 : vec2<bool>;
  var u_xlatu0 : u32;
  var u_xlatu1 : u32;
  var u_xlati16 : i32;
  var u_xlat16 : vec2<f32>;
  var u_xlati1 : vec4<i32>;
  var u_xlat24 : f32;
  var u_xlat10 : f32;
  var u_xlat18 : vec2<f32>;
  var u_xlati3 : vec2<i32>;
  var u_xlat26 : f32;
  var u_xlat19 : f32;
  var u_xlat27 : f32;
  var u_xlat4 : vec4<f32>;
  var u_xlat12 : f32;
  var u_xlat17 : f32;
  var u_xlat25 : f32;
  var u_xlat3 : vec4<f32>;
  var u_xlat11 : f32;
  var u_xlat20 : f32;
  var u_xlat28 : f32;
  var u_xlat5 : f32;
  var u_xlat13 : f32;
  var u_xlat21 : f32;
  var u_xlatb11 : bool;
  var u_xlatb27 : bool;
  var u_xlatb4 : bool;
  var u_xlatb17 : bool;
  var u_xlatb25 : bool;
  var u_xlatb3 : bool;
  var x_516 : f32;
  var x_526 : f32;
  var u_xlati11 : i32;
  var u_xlat7 : f32;
  var x_545 : f32;
  var u_xlat6 : vec4<f32>;
  var x_556 : f32;
  var x_567 : f32;
  var u_xlatb24 : bool;
  var x_628 : f32;
  var x_638 : f32;
  var x_650 : f32;
  var x_691 : f32;
  var x_708 : f32;
  var u_xlat9 : f32;
  var u_xlati2 : vec4<i32>;
  var u_xlatb2 : bool;
  var u_xlatb10 : bool;
  var u_xlatb18 : vec2<bool>;
  var x_1030 : f32;
  var x_1040 : f32;
  var x_1060 : f32;
  var x_1071 : f32;
  var x_1084 : f32;
  var x_1117 : f32;
  var u_xlatb1 : bool;
  var x_1143 : f32;
  var u_xlat0 : vec4<f32>;
  var u_xlatu2 : vec4<u32>;
  var u_xlati5 : vec4<i32>;
  var u_xlat_precise_vec4 : vec4<f32>;
  var u_xlat_precise_ivec4 : vec4<i32>;
  var u_xlat_precise_bvec4 : vec4<bool>;
  var u_xlat_precise_uvec4 : vec4<u32>;
  let x_16 : u32 = gl_LocalInvocationID.x;
  u_xlati0 = (bitcast<i32>(x_16) << bitcast<u32>(1i));
  let x_22 : u32 = gl_LocalInvocationID.y;
  let x_26 : i32 = u_xlati0;
  u_xlati0 = ((bitcast<i32>(x_22) * 32i) + x_26);
  let x_32 : vec3<u32> = gl_LocalInvocationID;
  let x_37 : vec3<u32> = gl_GlobalInvocationID;
  let x_40 : vec2<i32> = (bitcast<vec2<i32>>(vec2<u32>(x_32.x, x_32.y)) + bitcast<vec2<i32>>(vec2<u32>(x_37.x, x_37.y)));
  let x_41 : vec3<i32> = u_xlati8;
  u_xlati8 = vec3<i32>(x_40.x, x_40.y, x_41.z);
  let x_43 : vec3<i32> = u_xlati8;
  let x_47 : vec2<i32> = (vec2<i32>(x_43.x, x_43.y) + vec2<i32>(-2i, -2i));
  let x_48 : vec3<i32> = u_xlati8;
  u_xlati8 = vec3<i32>(x_47.x, x_47.y, x_48.z);
  let x_54 : vec3<i32> = u_xlati8;
  let x_57 : vec2<f32> = vec2<f32>(vec2<i32>(x_54.x, x_54.y));
  let x_58 : vec3<f32> = u_xlat8;
  u_xlat8 = vec3<f32>(x_57.x, x_57.y, x_58.z);
  let x_60 : vec3<f32> = u_xlat8;
  let x_69 : vec4<f32> = x_65.InvLowResolution;
  let x_71 : vec2<f32> = (vec2<f32>(x_60.x, x_60.y) * vec2<f32>(x_69.x, x_69.y));
  let x_72 : vec3<f32> = u_xlat8;
  u_xlat8 = vec3<f32>(x_71.x, x_71.y, x_72.z);
  let x_86 : vec3<f32> = u_xlat8;
  let x_88 : vec4<f32> = textureGather(0i, LoResAO1, samplerLoResAO1, vec2<f32>(x_86.x, x_86.y));
  u_xlat1 = x_88;
  let x_95 : i32 = u_xlati0;
  let x_99 : f32 = u_xlat1.w;
  TGSM1[x_95].value[0i] = bitcast<u32>(x_99);
  let x_104 : i32 = u_xlati0;
  u_xlati24 = (x_104 + 1i);
  let x_106 : i32 = u_xlati24;
  let x_109 : f32 = u_xlat1.z;
  TGSM1[x_106].value[0i] = bitcast<u32>(x_109);
  let x_114 : i32 = u_xlati0;
  u_xlati17 = (vec2<i32>(x_114, x_114) + vec2<i32>(16i, 17i));
  let x_121 : i32 = u_xlati17.x;
  let x_123 : f32 = u_xlat1.x;
  TGSM1[x_121].value[0i] = bitcast<u32>(x_123);
  let x_127 : i32 = u_xlati17.y;
  let x_129 : f32 = u_xlat1.y;
  TGSM1[x_127].value[0i] = bitcast<u32>(x_129);
  let x_138 : vec3<f32> = u_xlat8;
  let x_140 : vec4<f32> = textureGather(0i, LoResDB, samplerLoResDB, vec2<f32>(x_138.x, x_138.y));
  u_xlat2 = x_140;
  let x_143 : vec4<f32> = u_xlat2;
  u_xlat2 = (vec4<f32>(1.0f, 1.0f, 1.0f, 1.0f) / x_143);
  let x_149 : i32 = u_xlati0;
  let x_151 : f32 = u_xlat2.w;
  TGSM0[x_149].value[0i] = bitcast<u32>(x_151);
  let x_154 : i32 = u_xlati24;
  let x_156 : f32 = u_xlat2.z;
  TGSM0[x_154].value[0i] = bitcast<u32>(x_156);
  let x_160 : i32 = u_xlati17.x;
  let x_162 : f32 = u_xlat2.x;
  TGSM0[x_160].value[0i] = bitcast<u32>(x_162);
  let x_166 : i32 = u_xlati17.y;
  let x_168 : f32 = u_xlat2.y;
  TGSM0[x_166].value[0i] = bitcast<u32>(x_168);
  workgroupBarrier();
  let x_177 : u32 = gl_LocalInvocationIndex;
  let x_178 : u32 = gl_LocalInvocationIndex;
  let x_179 : u32 = gl_LocalInvocationIndex;
  let x_180 : u32 = gl_LocalInvocationIndex;
  let x_187 : vec4<bool> = (vec4<u32>(x_177, x_178, x_179, x_180) < vec4<u32>(39u, 45u, 0u, 0u));
  u_xlatb0 = vec2<bool>(x_187.x, x_187.y);
  let x_191 : bool = u_xlatb0.x;
  if (x_191) {
    let x_196 : u32 = gl_LocalInvocationIndex;
    u_xlatu0 = (x_196 / 3u);
    let x_199 : u32 = gl_LocalInvocationIndex;
    u_xlatu1 = (x_199 % 3u);
    let x_202 : u32 = u_xlatu1;
    u_xlati16 = (bitcast<i32>(x_202) * 3i);
    let x_206 : u32 = u_xlatu0;
    let x_209 : i32 = u_xlati16;
    u_xlati0 = ((bitcast<i32>(x_206) * 16i) + x_209);
    let x_213 : i32 = u_xlati0;
    let x_215 : u32 = TGSM1[x_213].value[0i];
    u_xlat16.x = bitcast<f32>(x_215);
    let x_221 : i32 = u_xlati0;
    u_xlati1 = (vec4<i32>(x_221, x_221, x_221, x_221) + vec4<i32>(1i, 2i, 3i, 4i));
    let x_229 : i32 = u_xlati1.x;
    let x_231 : u32 = TGSM1[x_229].value[0i];
    u_xlat24 = bitcast<f32>(x_231);
    let x_234 : i32 = u_xlati1.y;
    let x_236 : u32 = TGSM1[x_234].value[0i];
    u_xlat2.x = bitcast<f32>(x_236);
    let x_241 : i32 = u_xlati1.z;
    let x_243 : u32 = TGSM1[x_241].value[0i];
    u_xlat10 = bitcast<f32>(x_243);
    let x_247 : i32 = u_xlati1.w;
    let x_249 : u32 = TGSM1[x_247].value[0i];
    u_xlat18.x = bitcast<f32>(x_249);
    let x_253 : i32 = u_xlati0;
    u_xlati3 = (vec2<i32>(x_253, x_253) + vec2<i32>(5i, 6i));
    let x_261 : i32 = u_xlati3.x;
    let x_263 : u32 = TGSM1[x_261].value[0i];
    u_xlat26 = bitcast<f32>(x_263);
    let x_267 : i32 = u_xlati3.y;
    let x_269 : u32 = TGSM1[x_267].value[0i];
    u_xlat19 = bitcast<f32>(x_269);
    let x_272 : i32 = u_xlati0;
    let x_274 : u32 = TGSM0[x_272].value[0i];
    u_xlat27 = bitcast<f32>(x_274);
    let x_278 : i32 = u_xlati1.x;
    let x_280 : u32 = TGSM0[x_278].value[0i];
    u_xlat4.x = bitcast<f32>(x_280);
    let x_285 : i32 = u_xlati1.y;
    let x_287 : u32 = TGSM0[x_285].value[0i];
    u_xlat12 = bitcast<f32>(x_287);
    let x_291 : i32 = u_xlati1.z;
    let x_293 : u32 = TGSM0[x_291].value[0i];
    u_xlat17 = bitcast<f32>(x_293);
    let x_297 : i32 = u_xlati1.w;
    let x_299 : u32 = TGSM0[x_297].value[0i];
    u_xlat25 = bitcast<f32>(x_299);
    let x_303 : i32 = u_xlati3.x;
    let x_305 : u32 = TGSM0[x_303].value[0i];
    u_xlat3.x = bitcast<f32>(x_305);
    let x_310 : i32 = u_xlati3.y;
    let x_312 : u32 = TGSM0[x_310].value[0i];
    u_xlat11 = bitcast<f32>(x_312);
    let x_314 : f32 = u_xlat27;
    let x_317 : f32 = u_xlat4.x;
    u_xlat27 = (-(x_314) + x_317);
    let x_320 : f32 = u_xlat4.x;
    let x_322 : f32 = u_xlat12;
    u_xlat4.x = (-(x_320) + x_322);
    let x_325 : f32 = u_xlat12;
    let x_327 : f32 = u_xlat17;
    u_xlat12 = (-(x_325) + x_327);
    let x_329 : f32 = u_xlat17;
    let x_331 : f32 = u_xlat25;
    u_xlat17 = (-(x_329) + x_331);
    let x_333 : f32 = u_xlat25;
    let x_336 : f32 = u_xlat3.x;
    u_xlat25 = (-(x_333) + x_336);
    let x_339 : f32 = u_xlat3.x;
    let x_341 : f32 = u_xlat11;
    u_xlat3.x = (-(x_339) + x_341);
    let x_344 : f32 = u_xlat27;
    let x_345 : f32 = u_xlat27;
    let x_349 : f32 = x_65.AdditionalParams.y;
    u_xlat11 = ((x_344 * x_345) + x_349);
    let x_353 : f32 = u_xlat4.x;
    let x_355 : f32 = u_xlat4.x;
    let x_358 : f32 = x_65.AdditionalParams.y;
    u_xlat20 = ((x_353 * x_355) + x_358);
    let x_361 : f32 = u_xlat12;
    let x_362 : f32 = u_xlat12;
    let x_365 : f32 = x_65.AdditionalParams.y;
    u_xlat28 = ((x_361 * x_362) + x_365);
    let x_368 : f32 = u_xlat17;
    let x_369 : f32 = u_xlat17;
    let x_372 : f32 = x_65.AdditionalParams.y;
    u_xlat5 = ((x_368 * x_369) + x_372);
    let x_375 : f32 = u_xlat25;
    let x_376 : f32 = u_xlat25;
    let x_379 : f32 = x_65.AdditionalParams.y;
    u_xlat13 = ((x_375 * x_376) + x_379);
    let x_383 : f32 = u_xlat3.x;
    let x_385 : f32 = u_xlat3.x;
    let x_388 : f32 = x_65.AdditionalParams.y;
    u_xlat21 = ((x_383 * x_385) + x_388);
    let x_390 : f32 = u_xlat27;
    let x_392 : f32 = u_xlat4.x;
    let x_395 : f32 = x_65.AdditionalParams.y;
    u_xlat27 = ((x_390 * x_392) + x_395);
    let x_397 : f32 = u_xlat27;
    let x_398 : f32 = u_xlat27;
    u_xlat27 = (x_397 * x_398);
    let x_400 : f32 = u_xlat11;
    let x_401 : f32 = u_xlat20;
    u_xlat11 = (x_400 * x_401);
    let x_403 : f32 = u_xlat11;
    let x_405 : f32 = x_65.AdditionalParams.z;
    u_xlat11 = (x_403 * x_405);
    let x_408 : f32 = u_xlat11;
    let x_409 : f32 = u_xlat27;
    u_xlatb11 = (x_408 < x_409);
    let x_412 : f32 = u_xlat4.x;
    let x_413 : f32 = u_xlat12;
    let x_416 : f32 = x_65.AdditionalParams.y;
    u_xlat27 = ((x_412 * x_413) + x_416);
    let x_418 : f32 = u_xlat27;
    let x_419 : f32 = u_xlat27;
    u_xlat27 = (x_418 * x_419);
    let x_421 : f32 = u_xlat28;
    let x_422 : f32 = u_xlat20;
    u_xlat4.x = (x_421 * x_422);
    let x_426 : f32 = u_xlat4.x;
    let x_428 : f32 = x_65.AdditionalParams.z;
    u_xlat4.x = (x_426 * x_428);
    let x_433 : f32 = u_xlat4.x;
    let x_434 : f32 = u_xlat27;
    u_xlatb27 = (x_433 < x_434);
    let x_436 : f32 = u_xlat12;
    let x_437 : f32 = u_xlat17;
    let x_440 : f32 = x_65.AdditionalParams.y;
    u_xlat4.x = ((x_436 * x_437) + x_440);
    let x_444 : f32 = u_xlat4.x;
    let x_446 : f32 = u_xlat4.x;
    u_xlat4.x = (x_444 * x_446);
    let x_449 : f32 = u_xlat28;
    let x_450 : f32 = u_xlat5;
    u_xlat12 = (x_449 * x_450);
    let x_452 : f32 = u_xlat12;
    let x_454 : f32 = x_65.AdditionalParams.z;
    u_xlat12 = (x_452 * x_454);
    let x_457 : f32 = u_xlat12;
    let x_459 : f32 = u_xlat4.x;
    u_xlatb4 = (x_457 < x_459);
    let x_461 : f32 = u_xlat17;
    let x_462 : f32 = u_xlat25;
    let x_465 : f32 = x_65.AdditionalParams.y;
    u_xlat17 = ((x_461 * x_462) + x_465);
    let x_467 : f32 = u_xlat17;
    let x_468 : f32 = u_xlat17;
    u_xlat17 = (x_467 * x_468);
    let x_470 : f32 = u_xlat13;
    let x_471 : f32 = u_xlat5;
    u_xlat12 = (x_470 * x_471);
    let x_473 : f32 = u_xlat12;
    let x_475 : f32 = x_65.AdditionalParams.z;
    u_xlat12 = (x_473 * x_475);
    let x_478 : f32 = u_xlat12;
    let x_479 : f32 = u_xlat17;
    u_xlatb17 = (x_478 < x_479);
    let x_481 : f32 = u_xlat25;
    let x_483 : f32 = u_xlat3.x;
    let x_486 : f32 = x_65.AdditionalParams.y;
    u_xlat25 = ((x_481 * x_483) + x_486);
    let x_488 : f32 = u_xlat25;
    let x_489 : f32 = u_xlat25;
    u_xlat25 = (x_488 * x_489);
    let x_491 : f32 = u_xlat21;
    let x_492 : f32 = u_xlat13;
    u_xlat3.x = (x_491 * x_492);
    let x_496 : f32 = u_xlat3.x;
    let x_498 : f32 = x_65.AdditionalParams.z;
    u_xlat3.x = (x_496 * x_498);
    let x_503 : f32 = u_xlat3.x;
    let x_504 : f32 = u_xlat25;
    u_xlatb25 = (x_503 < x_504);
    let x_507 : bool = u_xlatb27;
    let x_508 : bool = u_xlatb11;
    u_xlatb3 = (x_507 | x_508);
    let x_510 : bool = u_xlatb3;
    u_xlati3.x = select(0i, 1i, x_510);
    let x_514 : i32 = u_xlati3.x;
    if ((x_514 != 0i)) {
      let x_519 : f32 = u_xlat24;
      x_516 = x_519;
    } else {
      let x_522 : f32 = u_xlat2.x;
      x_516 = x_522;
    }
    let x_523 : f32 = x_516;
    u_xlat3.x = x_523;
    let x_525 : bool = u_xlatb11;
    if (x_525) {
      let x_530 : f32 = u_xlat16.x;
      x_526 = x_530;
    } else {
      let x_533 : f32 = u_xlat3.x;
      x_526 = x_533;
    }
    let x_534 : f32 = x_526;
    u_xlat16.x = x_534;
    let x_536 : bool = u_xlatb27;
    let x_537 : bool = u_xlatb4;
    u_xlatb11 = (x_536 | x_537);
    let x_540 : bool = u_xlatb11;
    u_xlati11 = select(0i, 1i, x_540);
    let x_543 : i32 = u_xlati11;
    if ((x_543 != 0i)) {
      let x_549 : f32 = u_xlat2.x;
      x_545 = x_549;
    } else {
      let x_551 : f32 = u_xlat10;
      x_545 = x_551;
    }
    let x_552 : f32 = x_545;
    u_xlat7 = x_552;
    let x_554 : i32 = u_xlati11;
    if ((x_554 != 0i)) {
      let x_559 : f32 = u_xlat10;
      x_556 = x_559;
    } else {
      let x_562 : f32 = u_xlat2.x;
      x_556 = x_562;
    }
    let x_563 : f32 = x_556;
    u_xlat6.x = x_563;
    let x_565 : f32 = u_xlat7;
    u_xlat5 = x_565;
    let x_566 : bool = u_xlatb4;
    if (x_566) {
      let x_571 : f32 = u_xlat18.x;
      x_567 = x_571;
    } else {
      let x_574 : f32 = u_xlat6.x;
      x_567 = x_574;
    }
    let x_575 : f32 = x_567;
    u_xlat11 = x_575;
    let x_577 : f32 = u_xlat16.x;
    let x_578 : f32 = u_xlat11;
    u_xlat16.x = (x_577 + x_578);
    let x_582 : f32 = u_xlat16.x;
    let x_586 : f32 = u_xlat3.x;
    u_xlat16.x = ((x_582 * 0.5f) + x_586);
    let x_590 : f32 = u_xlat2.x;
    let x_592 : f32 = u_xlat16.x;
    u_xlat16.x = (x_590 + x_592);
    let x_596 : f32 = u_xlat6.x;
    let x_598 : f32 = u_xlat16.x;
    u_xlat16.x = (x_596 + x_598);
    let x_602 : f32 = u_xlat16.x;
    u_xlat16.x = (x_602 * 0.25f);
    let x_610 : i32 = u_xlati0;
    let x_612 : f32 = u_xlat16.x;
    TGSM2[x_610].value[0i] = bitcast<u32>(x_612);
    let x_615 : bool = u_xlatb27;
    let x_616 : f32 = u_xlat24;
    let x_617 : f32 = u_xlat5;
    u_xlat16.x = select(x_617, x_616, x_615);
    let x_621 : bool = u_xlatb4;
    let x_622 : bool = u_xlatb17;
    u_xlatb24 = (x_621 | x_622);
    let x_624 : bool = u_xlatb24;
    u_xlati24 = select(0i, 1i, x_624);
    let x_626 : i32 = u_xlati24;
    if ((x_626 != 0i)) {
      let x_631 : f32 = u_xlat10;
      x_628 = x_631;
    } else {
      let x_634 : f32 = u_xlat18.x;
      x_628 = x_634;
    }
    let x_635 : f32 = x_628;
    u_xlat7 = x_635;
    let x_636 : i32 = u_xlati24;
    if ((x_636 != 0i)) {
      let x_642 : f32 = u_xlat18.x;
      x_638 = x_642;
    } else {
      let x_644 : f32 = u_xlat10;
      x_638 = x_644;
    }
    let x_645 : f32 = x_638;
    u_xlat6.x = x_645;
    let x_647 : f32 = u_xlat7;
    u_xlat3.x = x_647;
    let x_649 : bool = u_xlatb17;
    if (x_649) {
      let x_653 : f32 = u_xlat26;
      x_650 = x_653;
    } else {
      let x_656 : f32 = u_xlat6.x;
      x_650 = x_656;
    }
    let x_657 : f32 = x_650;
    u_xlat24 = x_657;
    let x_658 : f32 = u_xlat24;
    let x_660 : f32 = u_xlat16.x;
    u_xlat16.x = (x_658 + x_660);
    let x_664 : f32 = u_xlat16.x;
    let x_666 : f32 = u_xlat5;
    u_xlat16.x = ((x_664 * 0.5f) + x_666);
    let x_669 : f32 = u_xlat10;
    let x_671 : f32 = u_xlat16.x;
    u_xlat16.x = (x_669 + x_671);
    let x_675 : f32 = u_xlat6.x;
    let x_677 : f32 = u_xlat16.x;
    u_xlat16.x = (x_675 + x_677);
    let x_681 : f32 = u_xlat16.x;
    u_xlat16.x = (x_681 * 0.25f);
    let x_685 : i32 = u_xlati1.x;
    let x_687 : f32 = u_xlat16.x;
    TGSM2[x_685].value[0i] = bitcast<u32>(x_687);
    let x_690 : bool = u_xlatb4;
    if (x_690) {
      let x_695 : f32 = u_xlat2.x;
      x_691 = x_695;
    } else {
      let x_698 : f32 = u_xlat3.x;
      x_691 = x_698;
    }
    let x_699 : f32 = x_691;
    u_xlat16.x = x_699;
    let x_701 : bool = u_xlatb17;
    let x_702 : bool = u_xlatb25;
    u_xlatb24 = (x_701 | x_702);
    let x_704 : bool = u_xlatb24;
    u_xlati24 = select(0i, 1i, x_704);
    let x_706 : i32 = u_xlati24;
    if ((x_706 != 0i)) {
      let x_711 : f32 = u_xlat26;
      x_708 = x_711;
    } else {
      let x_714 : f32 = u_xlat18.x;
      x_708 = x_714;
    }
    let x_715 : f32 = x_708;
    u_xlat24 = x_715;
    let x_716 : bool = u_xlatb25;
    let x_717 : f32 = u_xlat19;
    let x_718 : f32 = u_xlat24;
    u_xlat1.x = select(x_718, x_717, x_716);
    let x_722 : f32 = u_xlat16.x;
    let x_724 : f32 = u_xlat1.x;
    u_xlat16.x = (x_722 + x_724);
    let x_728 : f32 = u_xlat16.x;
    let x_731 : f32 = u_xlat3.x;
    u_xlat16.x = ((x_728 * 0.5f) + x_731);
    let x_735 : f32 = u_xlat18.x;
    let x_737 : f32 = u_xlat16.x;
    u_xlat16.x = (x_735 + x_737);
    let x_740 : f32 = u_xlat24;
    let x_742 : f32 = u_xlat16.x;
    u_xlat16.x = (x_740 + x_742);
    let x_746 : f32 = u_xlat16.x;
    u_xlat16.x = (x_746 * 0.25f);
    let x_750 : i32 = u_xlati1.y;
    let x_752 : f32 = u_xlat16.x;
    TGSM2[x_750].value[0i] = bitcast<u32>(x_752);
  }
  workgroupBarrier();
  let x_756 : bool = u_xlatb0.y;
  if (x_756) {
    let x_759 : u32 = gl_LocalInvocationIndex;
    u_xlatu0 = (x_759 / 9u);
    let x_762 : u32 = gl_LocalInvocationIndex;
    u_xlatu1 = (x_762 % 9u);
    let x_764 : u32 = u_xlatu0;
    let x_767 : u32 = u_xlatu1;
    u_xlati0 = ((bitcast<i32>(x_764) * 32i) + bitcast<i32>(x_767));
    let x_770 : i32 = u_xlati0;
    let x_772 : u32 = TGSM2[x_770].value[0i];
    u_xlat8.x = bitcast<f32>(x_772);
    let x_775 : i32 = u_xlati0;
    u_xlati16 = (x_775 + 16i);
    let x_777 : i32 = u_xlati16;
    let x_779 : u32 = TGSM2[x_777].value[0i];
    u_xlat24 = bitcast<f32>(x_779);
    let x_781 : i32 = u_xlati0;
    u_xlati1 = (vec4<i32>(x_781, x_781, x_781, x_781) + vec4<i32>(32i, 48i, 64i, 80i));
    let x_789 : i32 = u_xlati1.x;
    let x_791 : u32 = TGSM2[x_789].value[0i];
    u_xlat1.x = bitcast<f32>(x_791);
    let x_796 : i32 = u_xlati1.y;
    let x_798 : u32 = TGSM2[x_796].value[0i];
    u_xlat9 = bitcast<f32>(x_798);
    let x_801 : i32 = u_xlati1.z;
    let x_803 : u32 = TGSM2[x_801].value[0i];
    u_xlat17 = bitcast<f32>(x_803);
    let x_806 : i32 = u_xlati1.w;
    let x_808 : u32 = TGSM2[x_806].value[0i];
    u_xlat25 = bitcast<f32>(x_808);
    let x_811 : i32 = u_xlati0;
    u_xlati2 = (vec4<i32>(x_811, x_811, x_811, x_811) + vec4<i32>(2i, 18i, 34i, 50i));
    let x_819 : i32 = u_xlati2.x;
    let x_821 : u32 = TGSM0[x_819].value[0i];
    u_xlat2.x = bitcast<f32>(x_821);
    let x_825 : i32 = u_xlati2.y;
    let x_827 : u32 = TGSM0[x_825].value[0i];
    u_xlat10 = bitcast<f32>(x_827);
    let x_830 : i32 = u_xlati2.z;
    let x_832 : u32 = TGSM0[x_830].value[0i];
    u_xlat18.x = bitcast<f32>(x_832);
    let x_836 : i32 = u_xlati2.w;
    let x_838 : u32 = TGSM0[x_836].value[0i];
    u_xlat26 = bitcast<f32>(x_838);
    let x_840 : i32 = u_xlati0;
    u_xlati3 = (vec2<i32>(x_840, x_840) + vec2<i32>(66i, 82i));
    let x_847 : i32 = u_xlati3.x;
    let x_849 : u32 = TGSM0[x_847].value[0i];
    u_xlat3.x = bitcast<f32>(x_849);
    let x_853 : i32 = u_xlati3.y;
    let x_855 : u32 = TGSM0[x_853].value[0i];
    u_xlat11 = bitcast<f32>(x_855);
    let x_858 : f32 = u_xlat2.x;
    let x_860 : f32 = u_xlat10;
    u_xlat2.x = (-(x_858) + x_860);
    let x_863 : f32 = u_xlat10;
    let x_866 : f32 = u_xlat18.x;
    u_xlat10 = (-(x_863) + x_866);
    let x_869 : f32 = u_xlat18.x;
    let x_871 : f32 = u_xlat26;
    u_xlat18.x = (-(x_869) + x_871);
    let x_874 : f32 = u_xlat26;
    let x_877 : f32 = u_xlat3.x;
    u_xlat26 = (-(x_874) + x_877);
    let x_880 : f32 = u_xlat3.x;
    let x_882 : f32 = u_xlat11;
    u_xlat3.x = (-(x_880) + x_882);
    let x_886 : f32 = u_xlat2.x;
    let x_888 : f32 = u_xlat2.x;
    let x_891 : f32 = x_65.AdditionalParams.y;
    u_xlat11 = ((x_886 * x_888) + x_891);
    let x_893 : f32 = u_xlat10;
    let x_894 : f32 = u_xlat10;
    let x_897 : f32 = x_65.AdditionalParams.y;
    u_xlat19 = ((x_893 * x_894) + x_897);
    let x_900 : f32 = u_xlat18.x;
    let x_902 : f32 = u_xlat18.x;
    let x_905 : f32 = x_65.AdditionalParams.y;
    u_xlat27 = ((x_900 * x_902) + x_905);
    let x_907 : f32 = u_xlat26;
    let x_908 : f32 = u_xlat26;
    let x_911 : f32 = x_65.AdditionalParams.y;
    u_xlat4.x = ((x_907 * x_908) + x_911);
    let x_915 : f32 = u_xlat3.x;
    let x_917 : f32 = u_xlat3.x;
    let x_920 : f32 = x_65.AdditionalParams.y;
    u_xlat12 = ((x_915 * x_917) + x_920);
    let x_923 : f32 = u_xlat2.x;
    let x_924 : f32 = u_xlat10;
    let x_927 : f32 = x_65.AdditionalParams.y;
    u_xlat2.x = ((x_923 * x_924) + x_927);
    let x_931 : f32 = u_xlat2.x;
    let x_933 : f32 = u_xlat2.x;
    u_xlat2.x = (x_931 * x_933);
    let x_936 : f32 = u_xlat19;
    let x_937 : f32 = u_xlat11;
    u_xlat11 = (x_936 * x_937);
    let x_939 : f32 = u_xlat11;
    let x_941 : f32 = x_65.AdditionalParams.z;
    u_xlat11 = (x_939 * x_941);
    let x_944 : f32 = u_xlat11;
    let x_946 : f32 = u_xlat2.x;
    u_xlatb2 = (x_944 < x_946);
    let x_948 : f32 = u_xlat10;
    let x_950 : f32 = u_xlat18.x;
    let x_953 : f32 = x_65.AdditionalParams.y;
    u_xlat10 = ((x_948 * x_950) + x_953);
    let x_955 : f32 = u_xlat10;
    let x_956 : f32 = u_xlat10;
    u_xlat10 = (x_955 * x_956);
    let x_958 : f32 = u_xlat27;
    let x_959 : f32 = u_xlat19;
    u_xlat11 = (x_958 * x_959);
    let x_961 : f32 = u_xlat11;
    let x_963 : f32 = x_65.AdditionalParams.z;
    u_xlat11 = (x_961 * x_963);
    let x_966 : f32 = u_xlat11;
    let x_967 : f32 = u_xlat10;
    u_xlatb10 = (x_966 < x_967);
    let x_970 : f32 = u_xlat18.x;
    let x_971 : f32 = u_xlat26;
    let x_974 : f32 = x_65.AdditionalParams.y;
    u_xlat18.x = ((x_970 * x_971) + x_974);
    let x_978 : f32 = u_xlat18.x;
    let x_980 : f32 = u_xlat18.x;
    u_xlat18.x = (x_978 * x_980);
    let x_983 : f32 = u_xlat27;
    let x_985 : f32 = u_xlat4.x;
    u_xlat11 = (x_983 * x_985);
    let x_987 : f32 = u_xlat11;
    let x_989 : f32 = x_65.AdditionalParams.z;
    u_xlat3.y = (x_987 * x_989);
    let x_992 : f32 = u_xlat26;
    let x_994 : f32 = u_xlat3.x;
    let x_997 : f32 = x_65.AdditionalParams.y;
    u_xlat26 = ((x_992 * x_994) + x_997);
    let x_999 : f32 = u_xlat26;
    let x_1000 : f32 = u_xlat26;
    u_xlat18.y = (x_999 * x_1000);
    let x_1003 : f32 = u_xlat12;
    let x_1005 : f32 = u_xlat4.x;
    u_xlat3.x = (x_1003 * x_1005);
    let x_1009 : f32 = u_xlat3.x;
    let x_1011 : f32 = x_65.AdditionalParams.z;
    u_xlat3.x = (x_1009 * x_1011);
    let x_1015 : vec4<f32> = u_xlat3;
    let x_1017 : vec2<f32> = u_xlat18;
    let x_1019 : vec4<bool> = (vec4<f32>(x_1015.y, x_1015.x, x_1015.y, x_1015.x) < vec4<f32>(x_1017.x, x_1017.y, x_1017.x, x_1017.y));
    u_xlatb18 = vec2<bool>(x_1019.x, x_1019.y);
    let x_1021 : bool = u_xlatb10;
    let x_1022 : bool = u_xlatb2;
    u_xlatb3 = (x_1021 | x_1022);
    let x_1024 : bool = u_xlatb3;
    u_xlati3.x = select(0i, 1i, x_1024);
    let x_1028 : i32 = u_xlati3.x;
    if ((x_1028 != 0i)) {
      let x_1033 : f32 = u_xlat24;
      x_1030 = x_1033;
    } else {
      let x_1036 : f32 = u_xlat1.x;
      x_1030 = x_1036;
    }
    let x_1037 : f32 = x_1030;
    u_xlat3.x = x_1037;
    let x_1039 : bool = u_xlatb2;
    if (x_1039) {
      let x_1044 : f32 = u_xlat8.x;
      x_1040 = x_1044;
    } else {
      let x_1047 : f32 = u_xlat3.x;
      x_1040 = x_1047;
    }
    let x_1048 : f32 = x_1040;
    u_xlat8.x = x_1048;
    let x_1050 : bool = u_xlatb10;
    let x_1052 : bool = u_xlatb18.x;
    u_xlatb2 = (x_1050 | x_1052);
    let x_1054 : bool = u_xlatb2;
    u_xlati2.x = select(0i, 1i, x_1054);
    let x_1058 : i32 = u_xlati2.x;
    if ((x_1058 != 0i)) {
      let x_1064 : f32 = u_xlat1.x;
      x_1060 = x_1064;
    } else {
      let x_1066 : f32 = u_xlat9;
      x_1060 = x_1066;
    }
    let x_1067 : f32 = x_1060;
    u_xlat7 = x_1067;
    let x_1069 : i32 = u_xlati2.x;
    if ((x_1069 != 0i)) {
      let x_1074 : f32 = u_xlat9;
      x_1071 = x_1074;
    } else {
      let x_1077 : f32 = u_xlat1.x;
      x_1071 = x_1077;
    }
    let x_1078 : f32 = x_1071;
    u_xlat4.x = x_1078;
    let x_1080 : f32 = u_xlat7;
    u_xlat2.x = x_1080;
    let x_1083 : bool = u_xlatb18.x;
    if (x_1083) {
      let x_1087 : f32 = u_xlat17;
      x_1084 = x_1087;
    } else {
      let x_1090 : f32 = u_xlat4.x;
      x_1084 = x_1090;
    }
    let x_1091 : f32 = x_1084;
    u_xlat11 = x_1091;
    let x_1093 : f32 = u_xlat8.x;
    let x_1094 : f32 = u_xlat11;
    u_xlat8.x = (x_1093 + x_1094);
    let x_1098 : f32 = u_xlat8.x;
    let x_1101 : f32 = u_xlat3.x;
    u_xlat8.x = ((x_1098 * 0.5f) + x_1101);
    let x_1105 : f32 = u_xlat1.x;
    let x_1107 : f32 = u_xlat8.x;
    u_xlat8.x = (x_1105 + x_1107);
    let x_1111 : f32 = u_xlat4.x;
    let x_1113 : f32 = u_xlat8.x;
    u_xlat8.x = (x_1111 + x_1113);
    let x_1116 : bool = u_xlatb10;
    if (x_1116) {
      let x_1120 : f32 = u_xlat24;
      x_1117 = x_1120;
    } else {
      let x_1123 : f32 = u_xlat2.x;
      x_1117 = x_1123;
    }
    let x_1124 : f32 = x_1117;
    u_xlat24 = x_1124;
    let x_1127 : bool = u_xlatb18.x;
    let x_1129 : bool = u_xlatb18.y;
    u_xlatb1 = (x_1127 | x_1129);
    let x_1131 : bool = u_xlatb1;
    u_xlati1.x = select(0i, 1i, x_1131);
    let x_1135 : i32 = u_xlati1.x;
    let x_1137 : f32 = u_xlat17;
    let x_1138 : f32 = u_xlat9;
    u_xlat1.x = select(x_1138, x_1137, (x_1135 != 0i));
    let x_1142 : bool = u_xlatb18.y;
    if (x_1142) {
      let x_1146 : f32 = u_xlat25;
      x_1143 = x_1146;
    } else {
      let x_1149 : f32 = u_xlat1.x;
      x_1143 = x_1149;
    }
    let x_1150 : f32 = x_1143;
    u_xlat17 = x_1150;
    let x_1151 : f32 = u_xlat24;
    let x_1152 : f32 = u_xlat17;
    u_xlat24 = (x_1151 + x_1152);
    let x_1154 : f32 = u_xlat24;
    let x_1157 : f32 = u_xlat2.x;
    u_xlat24 = ((x_1154 * 0.5f) + x_1157);
    let x_1159 : f32 = u_xlat9;
    let x_1160 : f32 = u_xlat24;
    u_xlat24 = (x_1159 + x_1160);
    let x_1163 : f32 = u_xlat1.x;
    let x_1164 : f32 = u_xlat24;
    u_xlat8.z = (x_1163 + x_1164);
    let x_1167 : vec3<f32> = u_xlat8;
    let x_1170 : vec2<f32> = (vec2<f32>(x_1167.x, x_1167.z) * vec2<f32>(0.25f, 0.25f));
    let x_1171 : vec3<f32> = u_xlat8;
    u_xlat8 = vec3<f32>(x_1170.x, x_1171.y, x_1170.y);
    let x_1173 : i32 = u_xlati0;
    let x_1175 : f32 = u_xlat8.x;
    TGSM1[x_1173].value[0i] = bitcast<u32>(x_1175);
    let x_1178 : i32 = u_xlati16;
    let x_1180 : f32 = u_xlat8.z;
    TGSM1[x_1178].value[0i] = bitcast<u32>(x_1180);
  }
  workgroupBarrier();
  let x_1184 : u32 = gl_LocalInvocationID.y;
  let x_1188 : u32 = gl_LocalInvocationID.x;
  u_xlati0 = ((bitcast<i32>(x_1184) * 16i) + bitcast<i32>(x_1188));
  let x_1191 : i32 = u_xlati0;
  u_xlati8 = (vec3<i32>(x_1191, x_1191, x_1191) + vec3<i32>(16i, 17i, 1i));
  let x_1196 : i32 = u_xlati8.x;
  let x_1198 : u32 = TGSM1[x_1196].value[0i];
  u_xlat1.y = bitcast<f32>(x_1198);
  let x_1202 : i32 = u_xlati8.y;
  let x_1204 : u32 = TGSM1[x_1202].value[0i];
  u_xlat1.z = bitcast<f32>(x_1204);
  let x_1208 : i32 = u_xlati8.z;
  let x_1210 : u32 = TGSM1[x_1208].value[0i];
  u_xlat1.w = bitcast<f32>(x_1210);
  let x_1213 : i32 = u_xlati0;
  let x_1215 : u32 = TGSM1[x_1213].value[0i];
  u_xlat1.x = bitcast<f32>(x_1215);
  let x_1219 : vec3<u32> = gl_GlobalInvocationID;
  let x_1221 : vec2<f32> = vec2<f32>(vec2<u32>(x_1219.x, x_1219.y));
  let x_1222 : vec4<f32> = u_xlat0;
  u_xlat0 = vec4<f32>(x_1221.x, x_1221.y, x_1222.z, x_1222.w);
  let x_1224 : vec4<f32> = u_xlat0;
  let x_1227 : vec4<f32> = x_65.InvLowResolution;
  let x_1229 : vec2<f32> = (vec2<f32>(x_1224.x, x_1224.y) * vec2<f32>(x_1227.x, x_1227.y));
  let x_1230 : vec4<f32> = u_xlat0;
  u_xlat0 = vec4<f32>(x_1229.x, x_1229.y, x_1230.z, x_1230.w);
  let x_1234 : vec3<u32> = gl_GlobalInvocationID;
  u_xlatu2 = bitcast<vec4<u32>>((bitcast<vec4<i32>>(vec4<u32>(x_1234.x, x_1234.y, x_1234.y, x_1234.y)) << bitcast<vec4<u32>>(vec4<i32>(1i, 1i, 1i, 1i))));
  let x_1240 : vec4<u32> = u_xlatu2;
  u_xlat16 = vec2<f32>(vec2<u32>(x_1240.x, x_1240.w));
  let x_1243 : vec2<f32> = u_xlat16;
  let x_1245 : vec4<f32> = x_65.InvHighResolution;
  u_xlat16 = (x_1243 * vec2<f32>(x_1245.x, x_1245.y));
  let x_1253 : vec2<f32> = u_xlat16;
  let x_1254 : vec4<f32> = textureGather(0i, HiResAO, samplerHiResAO, x_1253);
  u_xlat3 = x_1254;
  let x_1258 : vec4<f32> = u_xlat0;
  let x_1260 : vec4<f32> = textureGather(0i, LoResDB, samplerLoResDB, vec2<f32>(x_1258.x, x_1258.y));
  u_xlat4 = x_1260;
  let x_1266 : vec2<f32> = u_xlat16;
  let x_1267 : vec4<f32> = textureGather(0i, HiResDB, samplerHiResDB, x_1266);
  u_xlat0 = x_1267;
  let x_1269 : vec4<u32> = u_xlatu2;
  u_xlati5 = (bitcast<vec4<i32>>(vec4<u32>(x_1269.x, x_1269.w, x_1269.x, x_1269.w)) + vec4<i32>(-1i, 0i, 0i, -1i));
  let x_1275 : vec4<f32> = u_xlat4;
  let x_1277 : vec4<f32> = u_xlat0;
  u_xlat6 = (-(x_1275) + vec4<f32>(x_1277.x, x_1277.x, x_1277.x, x_1277.x));
  let x_1280 : vec4<f32> = u_xlat6;
  let x_1283 : vec4<f32> = x_65.AdditionalParams;
  u_xlat6 = (abs(x_1280) + vec4<f32>(x_1283.w, x_1283.w, x_1283.w, x_1283.w));
  let x_1289 : vec4<f32> = u_xlat6;
  u_xlat6 = (vec4<f32>(9.0f, 3.0f, 1.0f, 3.0f) / x_1289);
  let x_1291 : vec4<f32> = u_xlat6;
  u_xlat0.x = dot(x_1291, vec4<f32>(1.0f, 1.0f, 1.0f, 1.0f));
  let x_1295 : f32 = u_xlat0.x;
  let x_1297 : f32 = x_65.AdditionalParams.x;
  u_xlat0.x = (x_1295 + x_1297);
  let x_1300 : vec4<f32> = u_xlat1;
  let x_1302 : vec4<f32> = u_xlat6;
  u_xlat6.x = dot(vec4<f32>(x_1300.y, x_1300.z, x_1300.w, x_1300.x), x_1302);
  let x_1306 : f32 = u_xlat6.x;
  let x_1308 : f32 = x_65.AdditionalParams.x;
  u_xlat6.x = (x_1306 + x_1308);
  let x_1312 : f32 = u_xlat3.x;
  let x_1314 : f32 = u_xlat6.x;
  u_xlat3.x = (x_1312 * x_1314);
  let x_1318 : f32 = u_xlat3.x;
  let x_1320 : f32 = u_xlat0.x;
  u_xlat0.x = (x_1318 / x_1320);
  let x_1327 : vec4<i32> = u_xlati5;
  let x_1329 : vec4<f32> = u_xlat0;
  textureStore(AoResult_origX0X, vec2<i32>(x_1327.x, x_1327.y), vec4<f32>(x_1329.x, x_1329.x, x_1329.x, x_1329.x));
  let x_1331 : vec4<f32> = u_xlat4;
  let x_1334 : vec4<f32> = u_xlat0;
  u_xlat6 = (-(vec4<f32>(x_1331.y, x_1331.z, x_1331.w, x_1331.x)) + vec4<f32>(x_1334.y, x_1334.y, x_1334.y, x_1334.y));
  let x_1337 : vec4<f32> = u_xlat6;
  let x_1340 : vec4<f32> = x_65.AdditionalParams;
  u_xlat6 = (abs(x_1337) + vec4<f32>(x_1340.w, x_1340.w, x_1340.w, x_1340.w));
  let x_1343 : vec4<f32> = u_xlat6;
  u_xlat6 = (vec4<f32>(9.0f, 3.0f, 1.0f, 3.0f) / x_1343);
  let x_1345 : vec4<f32> = u_xlat6;
  u_xlat0.x = dot(x_1345, vec4<f32>(1.0f, 1.0f, 1.0f, 1.0f));
  let x_1348 : vec4<f32> = u_xlat1;
  let x_1350 : vec4<f32> = u_xlat6;
  u_xlat0.y = dot(vec4<f32>(x_1348.z, x_1348.w, x_1348.x, x_1348.y), x_1350);
  let x_1353 : vec4<f32> = u_xlat0;
  let x_1356 : vec4<f32> = x_65.AdditionalParams;
  let x_1358 : vec2<f32> = (vec2<f32>(x_1353.x, x_1353.y) + vec2<f32>(x_1356.x, x_1356.x));
  let x_1359 : vec4<f32> = u_xlat0;
  u_xlat0 = vec4<f32>(x_1358.x, x_1358.y, x_1359.z, x_1359.w);
  let x_1362 : f32 = u_xlat0.y;
  let x_1364 : f32 = u_xlat3.y;
  u_xlat8.x = (x_1362 * x_1364);
  let x_1368 : f32 = u_xlat8.x;
  let x_1370 : f32 = u_xlat0.x;
  u_xlat0.x = (x_1368 / x_1370);
  let x_1374 : vec4<u32> = u_xlatu2;
  let x_1377 : vec4<f32> = u_xlat0;
  textureStore(AoResult_origX0X, bitcast<vec2<i32>>(vec2<u32>(x_1374.x, x_1374.w)), vec4<f32>(x_1377.x, x_1377.x, x_1377.x, x_1377.x));
  let x_1379 : vec4<f32> = u_xlat4;
  let x_1382 : vec4<f32> = u_xlat0;
  u_xlat6 = (-(vec4<f32>(x_1379.z, x_1379.w, x_1379.x, x_1379.y)) + vec4<f32>(x_1382.z, x_1382.z, x_1382.z, x_1382.z));
  let x_1385 : vec4<f32> = u_xlat6;
  let x_1388 : vec4<f32> = x_65.AdditionalParams;
  u_xlat6 = (abs(x_1385) + vec4<f32>(x_1388.w, x_1388.w, x_1388.w, x_1388.w));
  let x_1391 : vec4<f32> = u_xlat6;
  u_xlat6 = (vec4<f32>(9.0f, 3.0f, 1.0f, 3.0f) / x_1391);
  let x_1393 : vec4<f32> = u_xlat6;
  u_xlat0.x = dot(x_1393, vec4<f32>(1.0f, 1.0f, 1.0f, 1.0f));
  let x_1396 : vec4<f32> = u_xlat1;
  let x_1398 : vec4<f32> = u_xlat6;
  u_xlat0.y = dot(vec4<f32>(x_1396.w, x_1396.x, x_1396.y, x_1396.z), x_1398);
  let x_1401 : vec4<f32> = u_xlat0;
  let x_1404 : vec4<f32> = x_65.AdditionalParams;
  let x_1406 : vec2<f32> = (vec2<f32>(x_1401.x, x_1401.y) + vec2<f32>(x_1404.x, x_1404.x));
  let x_1407 : vec4<f32> = u_xlat0;
  u_xlat0 = vec4<f32>(x_1406.x, x_1406.y, x_1407.z, x_1407.w);
  let x_1410 : f32 = u_xlat0.y;
  let x_1412 : f32 = u_xlat3.z;
  u_xlat8.x = (x_1410 * x_1412);
  let x_1416 : f32 = u_xlat8.x;
  let x_1418 : f32 = u_xlat0.x;
  u_xlat0.x = (x_1416 / x_1418);
  let x_1422 : vec4<i32> = u_xlati5;
  let x_1424 : vec4<f32> = u_xlat0;
  textureStore(AoResult_origX0X, vec2<i32>(x_1422.z, x_1422.w), vec4<f32>(x_1424.x, x_1424.x, x_1424.x, x_1424.x));
  let x_1426 : vec4<u32> = u_xlatu2;
  u_xlati2 = (bitcast<vec4<i32>>(x_1426) + vec4<i32>(-1i, -1i, -1i, -1i));
  let x_1430 : vec4<f32> = u_xlat4;
  let x_1433 : vec4<f32> = u_xlat0;
  u_xlat0 = (-(vec4<f32>(x_1430.w, x_1430.x, x_1430.y, x_1430.z)) + vec4<f32>(x_1433.w, x_1433.w, x_1433.w, x_1433.w));
  let x_1436 : vec4<f32> = u_xlat0;
  let x_1439 : vec4<f32> = x_65.AdditionalParams;
  u_xlat0 = (abs(x_1436) + vec4<f32>(x_1439.w, x_1439.w, x_1439.w, x_1439.w));
  let x_1442 : vec4<f32> = u_xlat0;
  u_xlat0 = (vec4<f32>(9.0f, 3.0f, 1.0f, 3.0f) / x_1442);
  let x_1444 : vec4<f32> = u_xlat0;
  u_xlat3.x = dot(x_1444, vec4<f32>(1.0f, 1.0f, 1.0f, 1.0f));
  let x_1448 : f32 = u_xlat3.x;
  let x_1450 : f32 = x_65.AdditionalParams.x;
  u_xlat3.x = (x_1448 + x_1450);
  let x_1453 : vec4<f32> = u_xlat1;
  let x_1454 : vec4<f32> = u_xlat0;
  u_xlat0.x = dot(x_1453, x_1454);
  let x_1458 : f32 = u_xlat0.x;
  let x_1460 : f32 = x_65.AdditionalParams.x;
  u_xlat0.x = (x_1458 + x_1460);
  let x_1464 : f32 = u_xlat0.x;
  let x_1466 : f32 = u_xlat3.w;
  u_xlat0.x = (x_1464 * x_1466);
  let x_1470 : f32 = u_xlat0.x;
  let x_1472 : f32 = u_xlat3.x;
  u_xlat0.x = (x_1470 / x_1472);
  let x_1476 : vec4<i32> = u_xlati2;
  let x_1478 : vec4<f32> = u_xlat0;
  textureStore(AoResult_origX0X, vec2<i32>(x_1476.x, x_1476.y), vec4<f32>(x_1478.x, x_1478.x, x_1478.x, x_1478.x));
  return;
}

@compute @workgroup_size(8i, 8i, 1i)
fn main(@builtin(local_invocation_id) gl_LocalInvocationID_param : vec3<u32>, @builtin(global_invocation_id) gl_GlobalInvocationID_param : vec3<u32>, @builtin(local_invocation_index) gl_LocalInvocationIndex_param : u32) {
  gl_LocalInvocationID = gl_LocalInvocationID_param;
  gl_GlobalInvocationID = gl_GlobalInvocationID_param;
  gl_LocalInvocationIndex = gl_LocalInvocationIndex_param;
  main_1();
}

