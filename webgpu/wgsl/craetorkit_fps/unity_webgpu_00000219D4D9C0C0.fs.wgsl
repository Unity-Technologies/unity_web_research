struct PGlobals {
  unity_CameraProjection : mat4x4<f32>,
  x_ProjectionParams : vec4<f32>,
  unity_OrthoParams : vec4<f32>,
  x_ZBufferParams : vec4<f32>,
  x_ScreenParams : vec4<f32>,
  x_RenderViewportScaleFactor : f32,
  @size(12)
  padding : u32,
  x_FogParams : vec3<f32>,
  @size(4)
  padding_1 : u32,
  x_AOParams : vec4<f32>,
}

var<private> vs_TEXCOORD0 : vec2<f32>;

@group(1) @binding(0) var<uniform> x_31 : PGlobals;

@group(0) @binding(1) var x_CameraDepthNormalsTexture : texture_2d<f32>;

@group(0) @binding(3) var sampler_CameraDepthNormalsTexture : sampler;

@group(0) @binding(0) var x_CameraDepthTexture : texture_2d<f32>;

@group(0) @binding(2) var sampler_CameraDepthTexture : sampler;

var<private> vs_TEXCOORD1 : vec2<f32>;

var<private> SV_Target0 : vec4<f32>;

var<private> gl_FragCoord : vec4<f32>;

fn main_1() {
  var u_xlat0 : vec3<f32>;
  var u_xlat1 : vec3<f32>;
  var u_xlat18 : vec2<f32>;
  var u_xlat10 : vec3<f32>;
  var u_xlat2 : vec3<f32>;
  var u_xlat9 : f32;
  var u_xlatb18 : vec2<bool>;
  var u_xlati18 : vec2<i32>;
  var u_xlatb3 : vec2<bool>;
  var u_xlatb27 : bool;
  var u_xlat27 : f32;
  var u_xlat3 : vec3<f32>;
  var u_xlat4 : vec2<f32>;
  var u_xlati0 : i32;
  var u_xlat5 : vec2<f32>;
  var u_xlati_loop_1 : i32;
  var u_xlat29 : f32;
  var u_xlat30 : f32;
  var u_xlat6 : vec3<f32>;
  var u_xlat7 : f32;
  var u_xlat8 : vec2<f32>;
  var u_xlat14 : vec3<f32>;
  var u_xlatb29 : bool;
  var x_428 : vec3<f32>;
  var u_xlat22 : vec2<f32>;
  var u_xlatb14 : vec2<bool>;
  var u_xlatb30 : bool;
  var u_xlati30 : i32;
  var u_xlati14 : i32;
  var u_xlat_precise_vec4 : vec4<f32>;
  var u_xlat_precise_ivec4 : vec4<i32>;
  var u_xlat_precise_bvec4 : vec4<bool>;
  var u_xlat_precise_uvec4 : vec4<u32>;
  let x_13 : vec2<f32> = vs_TEXCOORD0;
  let x_14 : vec3<f32> = u_xlat0;
  u_xlat0 = vec3<f32>(x_13.x, x_13.y, x_14.z);
  let x_16 : vec3<f32> = u_xlat0;
  let x_22 : vec2<f32> = clamp(vec2<f32>(x_16.x, x_16.y), vec2<f32>(0.0f, 0.0f), vec2<f32>(1.0f, 1.0f));
  let x_23 : vec3<f32> = u_xlat0;
  u_xlat0 = vec3<f32>(x_22.x, x_22.y, x_23.z);
  let x_25 : vec3<f32> = u_xlat0;
  let x_36 : f32 = x_31.x_RenderViewportScaleFactor;
  let x_38 : vec2<f32> = (vec2<f32>(x_25.x, x_25.y) * vec2<f32>(x_36, x_36));
  let x_39 : vec3<f32> = u_xlat0;
  u_xlat0 = vec3<f32>(x_38.x, x_38.y, x_39.z);
  let x_52 : vec3<f32> = u_xlat0;
  let x_54 : vec4<f32> = textureSample(x_CameraDepthNormalsTexture, sampler_CameraDepthNormalsTexture, vec2<f32>(x_52.x, x_52.y));
  u_xlat1 = vec3<f32>(x_54.x, x_54.y, x_54.z);
  let x_56 : vec3<f32> = u_xlat1;
  u_xlat1 = ((x_56 * vec3<f32>(3.555399895f, 3.555399895f, 0.0f)) + vec3<f32>(-1.777699947f, -1.777699947f, 1.0f));
  let x_65 : vec3<f32> = u_xlat1;
  let x_66 : vec3<f32> = u_xlat1;
  u_xlat18.x = dot(x_65, x_66);
  let x_74 : f32 = u_xlat18.x;
  u_xlat18.x = (2.0f / x_74);
  let x_78 : vec3<f32> = u_xlat1;
  let x_80 : vec2<f32> = u_xlat18;
  let x_82 : vec2<f32> = (vec2<f32>(x_78.x, x_78.y) * vec2<f32>(x_80.x, x_80.x));
  let x_83 : vec3<f32> = u_xlat10;
  u_xlat10 = vec3<f32>(x_82.x, x_82.y, x_83.z);
  let x_86 : f32 = u_xlat18.x;
  u_xlat10.z = (x_86 + -1.0f);
  let x_92 : vec3<f32> = u_xlat10;
  u_xlat2 = (x_92 * vec3<f32>(1.0f, 1.0f, -1.0f));
  let x_100 : vec3<f32> = u_xlat0;
  let x_102 : vec4<f32> = textureSampleLevel(x_CameraDepthTexture, sampler_CameraDepthTexture, vec2<f32>(x_100.x, x_100.y), 0.0f);
  u_xlat0.x = x_102.x;
  let x_109 : f32 = x_31.unity_OrthoParams.w;
  u_xlat9 = (-(x_109) + 1.0f);
  let x_113 : f32 = u_xlat0.x;
  let x_116 : f32 = x_31.x_ZBufferParams.x;
  u_xlat0.x = (x_113 * x_116);
  let x_120 : f32 = x_31.unity_OrthoParams.w;
  let x_123 : f32 = u_xlat0.x;
  u_xlat18.x = ((-(x_120) * x_123) + 1.0f);
  let x_127 : f32 = u_xlat9;
  let x_129 : f32 = u_xlat0.x;
  let x_133 : f32 = x_31.x_ZBufferParams.y;
  u_xlat0.x = ((x_127 * x_129) + x_133);
  let x_137 : f32 = u_xlat18.x;
  let x_139 : f32 = u_xlat0.x;
  u_xlat0.x = (x_137 / x_139);
  let x_146 : vec2<f32> = vs_TEXCOORD0;
  let x_150 : vec4<bool> = (vec4<f32>(x_146.x, x_146.y, x_146.x, x_146.y) < vec4<f32>(0.0f, 0.0f, 0.0f, 0.0f));
  u_xlatb18 = vec2<bool>(x_150.x, x_150.y);
  let x_157 : bool = u_xlatb18.y;
  let x_162 : bool = u_xlatb18.x;
  u_xlati18.x = bitcast<i32>(((select(0u, 1u, x_157) * 4294967295u) | (select(0u, 1u, x_162) * 4294967295u)));
  let x_171 : vec2<f32> = vs_TEXCOORD0;
  let x_173 : vec4<bool> = (vec4<f32>(1.0f, 1.0f, 0.0f, 0.0f) < vec4<f32>(x_171.x, x_171.y, x_171.x, x_171.x));
  u_xlatb3 = vec2<bool>(x_173.x, x_173.y);
  let x_176 : bool = u_xlatb3.y;
  let x_180 : bool = u_xlatb3.x;
  u_xlati18.y = bitcast<i32>(((select(0u, 1u, x_176) * 4294967295u) | (select(0u, 1u, x_180) * 4294967295u)));
  let x_186 : vec2<i32> = u_xlati18;
  u_xlati18 = bitcast<vec2<i32>>((bitcast<vec2<u32>>(x_186) & vec2<u32>(1u, 1u)));
  let x_193 : i32 = u_xlati18.y;
  let x_195 : i32 = u_xlati18.x;
  u_xlati18.x = (x_193 + x_195);
  let x_199 : i32 = u_xlati18.x;
  u_xlat18.x = f32(x_199);
  let x_205 : f32 = u_xlat0.x;
  u_xlatb27 = (0.00001f >= x_205);
  let x_208 : bool = u_xlatb27;
  u_xlat27 = select(0.0f, 1.0f, x_208);
  let x_210 : f32 = u_xlat27;
  let x_212 : f32 = u_xlat18.x;
  u_xlat18.x = (x_210 + x_212);
  let x_216 : f32 = u_xlat18.x;
  u_xlat18.x = (x_216 * 100000000.0f);
  let x_222 : f32 = u_xlat0.x;
  let x_225 : f32 = x_31.x_ProjectionParams.z;
  let x_228 : f32 = u_xlat18.x;
  u_xlat3.z = ((x_222 * x_225) + x_228);
  let x_231 : vec2<f32> = vs_TEXCOORD0;
  let x_235 : vec2<f32> = ((x_231 * vec2<f32>(2.0f, 2.0f)) + vec2<f32>(-1.0f, -1.0f));
  let x_236 : vec3<f32> = u_xlat0;
  u_xlat0 = vec3<f32>(x_235.x, x_236.y, x_235.y);
  let x_238 : vec3<f32> = u_xlat0;
  let x_243 : vec4<f32> = x_31.unity_CameraProjection[2i];
  let x_246 : vec2<f32> = (vec2<f32>(x_238.x, x_238.z) + -(vec2<f32>(x_243.x, x_243.y)));
  let x_247 : vec3<f32> = u_xlat0;
  u_xlat0 = vec3<f32>(x_246.x, x_247.y, x_246.y);
  let x_251 : f32 = x_31.unity_CameraProjection[0i].x;
  u_xlat4.x = x_251;
  let x_254 : f32 = x_31.unity_CameraProjection[1i].y;
  u_xlat4.y = x_254;
  let x_256 : vec3<f32> = u_xlat0;
  let x_258 : vec2<f32> = u_xlat4;
  let x_259 : vec2<f32> = (vec2<f32>(x_256.x, x_256.z) / x_258);
  let x_260 : vec3<f32> = u_xlat0;
  u_xlat0 = vec3<f32>(x_259.x, x_260.y, x_259.y);
  let x_263 : f32 = u_xlat3.z;
  u_xlat27 = (-(x_263) + 1.0f);
  let x_267 : f32 = x_31.unity_OrthoParams.w;
  let x_268 : f32 = u_xlat27;
  let x_271 : f32 = u_xlat3.z;
  u_xlat27 = ((x_267 * x_268) + x_271);
  let x_273 : f32 = u_xlat27;
  let x_275 : vec3<f32> = u_xlat0;
  let x_277 : vec2<f32> = (vec2<f32>(x_273, x_273) * vec2<f32>(x_275.x, x_275.z));
  let x_278 : vec3<f32> = u_xlat3;
  u_xlat3 = vec3<f32>(x_277.x, x_277.y, x_278.z);
  let x_283 : f32 = x_31.x_AOParams.w;
  u_xlati0 = i32(x_283);
  let x_285 : vec2<f32> = vs_TEXCOORD0;
  let x_287 : vec4<f32> = x_31.x_AOParams;
  u_xlat18 = (x_285 * vec2<f32>(x_287.z, x_287.z));
  let x_290 : vec2<f32> = u_xlat18;
  let x_293 : vec4<f32> = x_31.x_ScreenParams;
  u_xlat18 = (x_290 * vec2<f32>(x_293.x, x_293.y));
  let x_296 : vec2<f32> = u_xlat18;
  u_xlat18 = floor(x_296);
  let x_301 : vec2<f32> = u_xlat18;
  u_xlat18.x = dot(vec2<f32>(0.067110561f, 0.00583715f), x_301);
  let x_305 : f32 = u_xlat18.x;
  u_xlat18.x = fract(x_305);
  let x_309 : f32 = u_xlat18.x;
  u_xlat18.x = (x_309 * 52.982917786f);
  let x_314 : f32 = u_xlat18.x;
  u_xlat18.x = fract(x_314);
  u_xlat5.x = 12.989800453f;
  u_xlat27 = 0.0f;
  u_xlati_loop_1 = 0i;
  loop {
    let x_326 : i32 = u_xlati_loop_1;
    let x_327 : i32 = u_xlati0;
    if ((x_326 < x_327)) {
    } else {
      break;
    }
    let x_330 : i32 = u_xlati_loop_1;
    u_xlat29 = f32(x_330);
    let x_334 : f32 = vs_TEXCOORD0.x;
    let x_337 : f32 = u_xlat29;
    u_xlat5.y = ((x_334 * 1.00000001e-10f) + x_337);
    let x_342 : f32 = u_xlat5.y;
    u_xlat30 = (x_342 * 78.233001709f);
    let x_345 : f32 = u_xlat30;
    u_xlat30 = sin(x_345);
    let x_347 : f32 = u_xlat30;
    u_xlat30 = (x_347 * 43758.546875f);
    let x_350 : f32 = u_xlat30;
    u_xlat30 = fract(x_350);
    let x_353 : f32 = u_xlat18.x;
    let x_354 : f32 = u_xlat30;
    u_xlat30 = (x_353 + x_354);
    let x_356 : f32 = u_xlat30;
    u_xlat30 = fract(x_356);
    let x_359 : f32 = u_xlat30;
    u_xlat6.z = ((x_359 * 2.0f) + -1.0f);
    let x_363 : vec2<f32> = u_xlat5;
    u_xlat30 = dot(x_363, vec2<f32>(1.0f, 78.233001709f));
    let x_366 : f32 = u_xlat30;
    u_xlat30 = sin(x_366);
    let x_368 : f32 = u_xlat30;
    u_xlat30 = (x_368 * 43758.546875f);
    let x_370 : f32 = u_xlat30;
    u_xlat30 = fract(x_370);
    let x_373 : f32 = u_xlat18.x;
    let x_374 : f32 = u_xlat30;
    u_xlat30 = (x_373 + x_374);
    let x_376 : f32 = u_xlat30;
    u_xlat30 = (x_376 * 6.283185482f);
    let x_380 : f32 = u_xlat30;
    u_xlat7 = sin(x_380);
    let x_383 : f32 = u_xlat30;
    u_xlat8.x = cos(x_383);
    let x_387 : f32 = u_xlat6.z;
    let x_390 : f32 = u_xlat6.z;
    u_xlat30 = ((-(x_387) * x_390) + 1.0f);
    let x_393 : f32 = u_xlat30;
    u_xlat30 = sqrt(x_393);
    let x_395 : f32 = u_xlat7;
    u_xlat8.y = x_395;
    let x_397 : f32 = u_xlat30;
    let x_399 : vec2<f32> = u_xlat8;
    let x_400 : vec2<f32> = (vec2<f32>(x_397, x_397) * x_399);
    let x_401 : vec3<f32> = u_xlat6;
    u_xlat6 = vec3<f32>(x_400.x, x_400.y, x_401.z);
    let x_403 : f32 = u_xlat29;
    u_xlat29 = (x_403 + 1.0f);
    let x_405 : f32 = u_xlat29;
    let x_407 : f32 = x_31.x_AOParams.w;
    u_xlat29 = (x_405 / x_407);
    let x_409 : f32 = u_xlat29;
    u_xlat29 = sqrt(x_409);
    let x_411 : f32 = u_xlat29;
    let x_413 : f32 = x_31.x_AOParams.y;
    u_xlat29 = (x_411 * x_413);
    let x_416 : f32 = u_xlat29;
    let x_418 : vec3<f32> = u_xlat6;
    u_xlat14 = (vec3<f32>(x_416, x_416, x_416) * x_418);
    let x_420 : vec3<f32> = u_xlat2;
    let x_422 : vec3<f32> = u_xlat14;
    u_xlat29 = dot(-(x_420), x_422);
    let x_425 : f32 = u_xlat29;
    u_xlatb29 = (x_425 >= 0.0f);
    let x_427 : bool = u_xlatb29;
    if (x_427) {
      let x_431 : vec3<f32> = u_xlat14;
      x_428 = -(x_431);
    } else {
      let x_434 : vec3<f32> = u_xlat14;
      x_428 = x_434;
    }
    let x_435 : vec3<f32> = x_428;
    u_xlat14 = x_435;
    let x_436 : vec3<f32> = u_xlat3;
    let x_437 : vec3<f32> = u_xlat14;
    u_xlat14 = (x_436 + x_437);
    let x_440 : vec3<f32> = u_xlat14;
    let x_443 : vec4<f32> = x_31.unity_CameraProjection[1i];
    u_xlat22 = (vec2<f32>(x_440.y, x_440.y) * vec2<f32>(x_443.x, x_443.y));
    let x_447 : vec4<f32> = x_31.unity_CameraProjection[0i];
    let x_449 : vec3<f32> = u_xlat14;
    let x_452 : vec2<f32> = u_xlat22;
    u_xlat22 = ((vec2<f32>(x_447.x, x_447.y) * vec2<f32>(x_449.x, x_449.x)) + x_452);
    let x_455 : vec4<f32> = x_31.unity_CameraProjection[2i];
    let x_457 : vec3<f32> = u_xlat14;
    let x_460 : vec2<f32> = u_xlat22;
    u_xlat22 = ((vec2<f32>(x_455.x, x_455.y) * vec2<f32>(x_457.z, x_457.z)) + x_460);
    let x_463 : f32 = u_xlat14.z;
    u_xlat29 = (-(x_463) + 1.0f);
    let x_467 : f32 = x_31.unity_OrthoParams.w;
    let x_468 : f32 = u_xlat29;
    let x_471 : f32 = u_xlat14.z;
    u_xlat29 = ((x_467 * x_468) + x_471);
    let x_473 : vec2<f32> = u_xlat22;
    let x_474 : f32 = u_xlat29;
    u_xlat22 = (x_473 / vec2<f32>(x_474, x_474));
    let x_477 : vec2<f32> = u_xlat22;
    u_xlat22 = (x_477 + vec2<f32>(1.0f, 1.0f));
    let x_480 : vec2<f32> = u_xlat22;
    let x_483 : vec2<f32> = (x_480 * vec2<f32>(0.5f, 0.5f));
    let x_484 : vec3<f32> = u_xlat14;
    u_xlat14 = vec3<f32>(x_483.x, x_483.y, x_484.z);
    let x_486 : vec3<f32> = u_xlat14;
    let x_490 : vec2<f32> = clamp(vec2<f32>(x_486.x, x_486.y), vec2<f32>(0.0f, 0.0f), vec2<f32>(1.0f, 1.0f));
    let x_491 : vec3<f32> = u_xlat14;
    u_xlat14 = vec3<f32>(x_490.x, x_490.y, x_491.z);
    let x_493 : vec3<f32> = u_xlat14;
    let x_496 : f32 = x_31.x_RenderViewportScaleFactor;
    let x_498 : vec2<f32> = (vec2<f32>(x_493.x, x_493.y) * vec2<f32>(x_496, x_496));
    let x_499 : vec3<f32> = u_xlat14;
    u_xlat14 = vec3<f32>(x_498.x, x_498.y, x_499.z);
    let x_504 : vec3<f32> = u_xlat14;
    let x_506 : vec4<f32> = textureSampleLevel(x_CameraDepthTexture, sampler_CameraDepthTexture, vec2<f32>(x_504.x, x_504.y), 0.0f);
    u_xlat29 = x_506.x;
    let x_508 : f32 = u_xlat29;
    let x_510 : f32 = x_31.x_ZBufferParams.x;
    u_xlat29 = (x_508 * x_510);
    let x_513 : f32 = x_31.unity_OrthoParams.w;
    let x_515 : f32 = u_xlat29;
    u_xlat30 = ((-(x_513) * x_515) + 1.0f);
    let x_518 : f32 = u_xlat9;
    let x_519 : f32 = u_xlat29;
    let x_522 : f32 = x_31.x_ZBufferParams.y;
    u_xlat29 = ((x_518 * x_519) + x_522);
    let x_524 : f32 = u_xlat30;
    let x_525 : f32 = u_xlat29;
    u_xlat29 = (x_524 / x_525);
    let x_528 : vec2<f32> = u_xlat22;
    let x_530 : vec4<bool> = (vec4<f32>(x_528.x, x_528.y, x_528.x, x_528.x) < vec4<f32>(0.0f, 0.0f, 0.0f, 0.0f));
    u_xlatb14 = vec2<bool>(x_530.x, x_530.y);
    let x_534 : bool = u_xlatb14.y;
    let x_536 : bool = u_xlatb14.x;
    u_xlatb30 = (x_534 | x_536);
    let x_539 : bool = u_xlatb30;
    u_xlati30 = select(0i, 1i, x_539);
    let x_542 : vec2<f32> = u_xlat22;
    let x_544 : vec4<bool> = (vec4<f32>(2.0f, 2.0f, 0.0f, 0.0f) < vec4<f32>(x_542.x, x_542.y, x_542.x, x_542.x));
    u_xlatb14 = vec2<bool>(x_544.x, x_544.y);
    let x_547 : bool = u_xlatb14.y;
    let x_549 : bool = u_xlatb14.x;
    u_xlatb14.x = (x_547 | x_549);
    let x_554 : bool = u_xlatb14.x;
    u_xlati14 = select(0i, 1i, x_554);
    let x_556 : i32 = u_xlati30;
    let x_557 : i32 = u_xlati14;
    u_xlati30 = (x_556 + x_557);
    let x_559 : i32 = u_xlati30;
    u_xlat30 = f32(x_559);
    let x_561 : f32 = u_xlat29;
    u_xlatb14.x = (0.00001f >= x_561);
    let x_565 : bool = u_xlatb14.x;
    u_xlat14.x = select(0.0f, 1.0f, x_565);
    let x_568 : f32 = u_xlat30;
    let x_570 : f32 = u_xlat14.x;
    u_xlat30 = (x_568 + x_570);
    let x_572 : f32 = u_xlat30;
    u_xlat30 = (x_572 * 100000000.0f);
    let x_574 : f32 = u_xlat29;
    let x_576 : f32 = x_31.x_ProjectionParams.z;
    let x_578 : f32 = u_xlat30;
    u_xlat6.z = ((x_574 * x_576) + x_578);
    let x_581 : vec2<f32> = u_xlat22;
    let x_583 : vec4<f32> = x_31.unity_CameraProjection[2i];
    u_xlat22 = (x_581 + -(vec2<f32>(x_583.x, x_583.y)));
    let x_587 : vec2<f32> = u_xlat22;
    u_xlat22 = (x_587 + vec2<f32>(-1.0f, -1.0f));
    let x_589 : vec2<f32> = u_xlat22;
    let x_590 : vec2<f32> = u_xlat4;
    u_xlat22 = (x_589 / x_590);
    let x_593 : f32 = u_xlat6.z;
    u_xlat29 = (-(x_593) + 1.0f);
    let x_597 : f32 = x_31.unity_OrthoParams.w;
    let x_598 : f32 = u_xlat29;
    let x_601 : f32 = u_xlat6.z;
    u_xlat29 = ((x_597 * x_598) + x_601);
    let x_603 : f32 = u_xlat29;
    let x_605 : vec2<f32> = u_xlat22;
    let x_606 : vec2<f32> = (vec2<f32>(x_603, x_603) * x_605);
    let x_607 : vec3<f32> = u_xlat6;
    u_xlat6 = vec3<f32>(x_606.x, x_606.y, x_607.z);
    let x_609 : vec3<f32> = u_xlat3;
    let x_611 : vec3<f32> = u_xlat6;
    u_xlat14 = (-(x_609) + x_611);
    let x_613 : vec3<f32> = u_xlat14;
    let x_614 : vec3<f32> = u_xlat2;
    u_xlat29 = dot(x_613, x_614);
    let x_617 : f32 = u_xlat3.z;
    let x_621 : f32 = u_xlat29;
    u_xlat29 = ((-(x_617) * 0.002f) + x_621);
    let x_623 : f32 = u_xlat29;
    u_xlat29 = max(x_623, 0.0f);
    let x_625 : vec3<f32> = u_xlat14;
    let x_626 : vec3<f32> = u_xlat14;
    u_xlat30 = dot(x_625, x_626);
    let x_628 : f32 = u_xlat30;
    u_xlat30 = (x_628 + 0.0001f);
    let x_631 : f32 = u_xlat29;
    let x_632 : f32 = u_xlat30;
    u_xlat29 = (x_631 / x_632);
    let x_634 : f32 = u_xlat27;
    let x_635 : f32 = u_xlat29;
    u_xlat27 = (x_634 + x_635);

    continuing {
      let x_637 : i32 = u_xlati_loop_1;
      u_xlati_loop_1 = (x_637 + 1i);
    }
  }
  let x_639 : f32 = u_xlat27;
  let x_641 : f32 = x_31.x_AOParams.y;
  u_xlat0.x = (x_639 * x_641);
  let x_645 : f32 = u_xlat0.x;
  let x_647 : f32 = x_31.x_AOParams.x;
  u_xlat0.x = (x_645 * x_647);
  let x_651 : f32 = u_xlat0.x;
  let x_653 : f32 = x_31.x_AOParams.w;
  u_xlat0.x = (x_651 / x_653);
  let x_657 : f32 = u_xlat0.x;
  u_xlat0.x = max(abs(x_657), 1.1920929e-07f);
  let x_663 : f32 = u_xlat0.x;
  u_xlat0.x = log2(x_663);
  let x_667 : f32 = u_xlat0.x;
  u_xlat0.x = (x_667 * 0.600000024f);
  let x_672 : f32 = u_xlat0.x;
  u_xlat0.x = exp2(x_672);
  let x_679 : vec2<f32> = vs_TEXCOORD1;
  let x_680 : vec4<f32> = textureSample(x_CameraDepthTexture, sampler_CameraDepthTexture, x_679);
  u_xlat18.x = x_680.x;
  let x_684 : f32 = u_xlat18.x;
  let x_686 : f32 = x_31.x_ZBufferParams.x;
  u_xlat18.x = (x_684 * x_686);
  let x_690 : f32 = x_31.unity_OrthoParams.w;
  let x_693 : f32 = u_xlat18.x;
  u_xlat27 = ((-(x_690) * x_693) + 1.0f);
  let x_696 : f32 = u_xlat9;
  let x_698 : f32 = u_xlat18.x;
  let x_701 : f32 = x_31.x_ZBufferParams.y;
  u_xlat9 = ((x_696 * x_698) + x_701);
  let x_703 : f32 = u_xlat27;
  let x_704 : f32 = u_xlat9;
  u_xlat9 = (x_703 / x_704);
  let x_706 : f32 = u_xlat9;
  let x_708 : f32 = x_31.x_ProjectionParams.z;
  let x_711 : f32 = x_31.x_ProjectionParams.y;
  u_xlat9 = ((x_706 * x_708) + -(x_711));
  let x_714 : f32 = u_xlat9;
  let x_717 : f32 = x_31.x_FogParams.x;
  u_xlat9 = (x_714 * x_717);
  let x_719 : f32 = u_xlat9;
  let x_720 : f32 = u_xlat9;
  u_xlat9 = (x_719 * -(x_720));
  let x_723 : f32 = u_xlat9;
  u_xlat9 = exp2(x_723);
  let x_727 : f32 = u_xlat9;
  let x_729 : f32 = u_xlat0.x;
  SV_Target0.x = (x_727 * x_729);
  let x_733 : vec3<f32> = u_xlat10;
  let x_738 : vec3<f32> = ((x_733 * vec3<f32>(0.5f, 0.5f, -0.5f)) + vec3<f32>(0.5f, 0.5f, 0.5f));
  let x_739 : vec4<f32> = SV_Target0;
  SV_Target0 = vec4<f32>(x_739.x, x_738.x, x_738.y, x_738.z);
  return;
}

struct main_out {
  @location(0)
  SV_Target0_1 : vec4<f32>,
}

@fragment
fn main(@location(0) vs_TEXCOORD0_param : vec2<f32>, @location(1) vs_TEXCOORD1_param : vec2<f32>, @builtin(position) gl_FragCoord_param : vec4<f32>) -> main_out {
  vs_TEXCOORD0 = vs_TEXCOORD0_param;
  vs_TEXCOORD1 = vs_TEXCOORD1_param;
  gl_FragCoord = gl_FragCoord_param;
  main_1();
  return main_out(SV_Target0);
}

