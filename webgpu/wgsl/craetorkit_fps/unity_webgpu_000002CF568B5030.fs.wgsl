type Arr = array<mat4x4<f32>, 4u>;

struct PGlobals {
  x_ZBufferParams : vec4<f32>,
  unity_OrthoParams : vec4<f32>,
  unity_CameraToWorld : mat4x4<f32>,
  unity_WorldToShadow : Arr,
  x_LightShadowData : vec4<f32>,
  x_ShadowMapTexture_TexelSize : vec4<f32>,
}

@group(0) @binding(0) var x_CameraDepthTexture : texture_2d<f32>;

@group(0) @binding(3) var sampler_CameraDepthTexture : sampler;

var<private> vs_TEXCOORD0 : vec4<f32>;

@group(1) @binding(0) var<uniform> x_39 : PGlobals;

var<private> vs_TEXCOORD2 : vec3<f32>;

var<private> vs_TEXCOORD3 : vec3<f32>;

var<private> vs_TEXCOORD1 : vec3<f32>;

@group(0) @binding(1) var x_ShadowMapTexture : texture_depth_2d;

@group(0) @binding(2) var sampler_ShadowMapTexture : sampler_comparison;

var<private> SV_Target0 : vec4<f32>;

var<private> gl_FragCoord : vec4<f32>;

fn main_1() {
  var u_xlat0 : vec4<f32>;
  var u_xlat8 : vec3<f32>;
  var u_xlat16 : f32;
  var u_xlat1 : vec4<f32>;
  var u_xlat17 : vec2<f32>;
  var u_xlat2 : vec4<f32>;
  var u_xlat3 : vec4<f32>;
  var u_xlat4 : vec4<f32>;
  var u_xlat5 : vec4<f32>;
  var u_xlat6 : vec4<f32>;
  var u_xlat7 : vec4<f32>;
  var txVec0 : vec3<f32>;
  var txVec1 : vec3<f32>;
  var txVec2 : vec3<f32>;
  var txVec3 : vec3<f32>;
  var txVec4 : vec3<f32>;
  var txVec5 : vec3<f32>;
  var u_xlat24 : f32;
  var txVec6 : vec3<f32>;
  var txVec7 : vec3<f32>;
  var txVec8 : vec3<f32>;
  var txVec9 : vec3<f32>;
  var txVec10 : vec3<f32>;
  var txVec11 : vec3<f32>;
  var txVec12 : vec3<f32>;
  var txVec13 : vec3<f32>;
  var txVec14 : vec3<f32>;
  var txVec15 : vec3<f32>;
  var u_xlat_precise_vec4 : vec4<f32>;
  var u_xlat_precise_ivec4 : vec4<i32>;
  var u_xlat_precise_bvec4 : vec4<bool>;
  var u_xlat_precise_uvec4 : vec4<u32>;
  let x_23 : vec4<f32> = vs_TEXCOORD0;
  let x_25 : vec4<f32> = textureSample(x_CameraDepthTexture, sampler_CameraDepthTexture, vec2<f32>(x_23.x, x_23.y));
  u_xlat0.x = x_25.x;
  let x_44 : f32 = x_39.x_ZBufferParams.x;
  let x_46 : f32 = u_xlat0.x;
  let x_50 : f32 = x_39.x_ZBufferParams.y;
  u_xlat8.x = ((x_44 * x_46) + x_50);
  let x_55 : f32 = u_xlat8.x;
  u_xlat8.x = (1.0f / x_55);
  let x_60 : f32 = u_xlat8.x;
  let x_63 : f32 = u_xlat0.x;
  u_xlat16 = (-(x_60) + x_63);
  let x_68 : f32 = x_39.unity_OrthoParams.w;
  let x_69 : f32 = u_xlat16;
  let x_72 : f32 = u_xlat8.x;
  u_xlat8.x = ((x_68 * x_69) + x_72);
  let x_76 : f32 = u_xlat0.x;
  u_xlat0.x = (-(x_76) + 1.0f);
  let x_83 : vec3<f32> = vs_TEXCOORD2;
  let x_86 : vec3<f32> = vs_TEXCOORD3;
  let x_87 : vec3<f32> = (-(x_83) + x_86);
  let x_88 : vec4<f32> = u_xlat1;
  u_xlat1 = vec4<f32>(x_87.x, x_87.y, x_87.z, x_88.w);
  let x_90 : vec4<f32> = u_xlat0;
  let x_92 : vec4<f32> = u_xlat1;
  let x_95 : vec3<f32> = vs_TEXCOORD2;
  let x_96 : vec3<f32> = ((vec3<f32>(x_90.x, x_90.x, x_90.x) * vec3<f32>(x_92.x, x_92.y, x_92.z)) + x_95);
  let x_97 : vec4<f32> = u_xlat0;
  u_xlat0 = vec4<f32>(x_96.x, x_97.y, x_96.y, x_96.z);
  let x_100 : vec3<f32> = vs_TEXCOORD1;
  let x_102 : vec3<f32> = u_xlat8;
  let x_105 : vec4<f32> = u_xlat0;
  let x_107 : vec3<f32> = ((-(x_100) * vec3<f32>(x_102.x, x_102.x, x_102.x)) + vec3<f32>(x_105.x, x_105.z, x_105.w));
  let x_108 : vec4<f32> = u_xlat0;
  u_xlat0 = vec4<f32>(x_107.x, x_108.y, x_107.y, x_107.z);
  let x_110 : vec3<f32> = u_xlat8;
  let x_112 : vec3<f32> = vs_TEXCOORD1;
  let x_113 : vec3<f32> = (vec3<f32>(x_110.x, x_110.x, x_110.x) * x_112);
  let x_114 : vec4<f32> = u_xlat1;
  u_xlat1 = vec4<f32>(x_113.x, x_113.y, x_113.z, x_114.w);
  let x_118 : vec4<f32> = x_39.unity_OrthoParams;
  let x_120 : vec4<f32> = u_xlat0;
  let x_123 : vec4<f32> = u_xlat1;
  let x_125 : vec3<f32> = ((vec3<f32>(x_118.w, x_118.w, x_118.w) * vec3<f32>(x_120.x, x_120.z, x_120.w)) + vec3<f32>(x_123.x, x_123.y, x_123.z));
  let x_126 : vec4<f32> = u_xlat0;
  u_xlat0 = vec4<f32>(x_125.x, x_125.y, x_125.z, x_126.w);
  let x_128 : vec4<f32> = u_xlat0;
  let x_132 : vec4<f32> = x_39.unity_CameraToWorld[1i];
  u_xlat1 = (vec4<f32>(x_128.y, x_128.y, x_128.y, x_128.y) * x_132);
  let x_135 : vec4<f32> = x_39.unity_CameraToWorld[0i];
  let x_136 : vec4<f32> = u_xlat0;
  let x_139 : vec4<f32> = u_xlat1;
  u_xlat1 = ((x_135 * vec4<f32>(x_136.x, x_136.x, x_136.x, x_136.x)) + x_139);
  let x_142 : vec4<f32> = x_39.unity_CameraToWorld[2i];
  let x_143 : vec4<f32> = u_xlat0;
  let x_146 : vec4<f32> = u_xlat1;
  u_xlat0 = ((x_142 * vec4<f32>(x_143.z, x_143.z, x_143.z, x_143.z)) + x_146);
  let x_148 : vec4<f32> = u_xlat0;
  let x_151 : vec4<f32> = x_39.unity_CameraToWorld[3i];
  u_xlat0 = (x_148 + x_151);
  let x_153 : vec4<f32> = u_xlat0;
  let x_156 : vec4<f32> = x_39.unity_WorldToShadow[0i][1i];
  let x_158 : vec3<f32> = (vec3<f32>(x_153.y, x_153.y, x_153.y) * vec3<f32>(x_156.x, x_156.y, x_156.z));
  let x_159 : vec4<f32> = u_xlat1;
  u_xlat1 = vec4<f32>(x_158.x, x_158.y, x_158.z, x_159.w);
  let x_162 : vec4<f32> = x_39.unity_WorldToShadow[0i][0i];
  let x_164 : vec4<f32> = u_xlat0;
  let x_167 : vec4<f32> = u_xlat1;
  let x_169 : vec3<f32> = ((vec3<f32>(x_162.x, x_162.y, x_162.z) * vec3<f32>(x_164.x, x_164.x, x_164.x)) + vec3<f32>(x_167.x, x_167.y, x_167.z));
  let x_170 : vec4<f32> = u_xlat1;
  u_xlat1 = vec4<f32>(x_169.x, x_169.y, x_169.z, x_170.w);
  let x_173 : vec4<f32> = x_39.unity_WorldToShadow[0i][2i];
  let x_175 : vec4<f32> = u_xlat0;
  let x_178 : vec4<f32> = u_xlat1;
  let x_180 : vec3<f32> = ((vec3<f32>(x_173.x, x_173.y, x_173.z) * vec3<f32>(x_175.z, x_175.z, x_175.z)) + vec3<f32>(x_178.x, x_178.y, x_178.z));
  let x_181 : vec4<f32> = u_xlat0;
  u_xlat0 = vec4<f32>(x_180.x, x_180.y, x_180.z, x_181.w);
  let x_184 : vec4<f32> = x_39.unity_WorldToShadow[0i][3i];
  let x_186 : vec4<f32> = u_xlat0;
  let x_189 : vec4<f32> = u_xlat0;
  let x_191 : vec3<f32> = ((vec3<f32>(x_184.x, x_184.y, x_184.z) * vec3<f32>(x_186.w, x_186.w, x_186.w)) + vec3<f32>(x_189.x, x_189.y, x_189.z));
  let x_192 : vec4<f32> = u_xlat0;
  u_xlat0 = vec4<f32>(x_191.x, x_191.y, x_191.z, x_192.w);
  let x_194 : vec4<f32> = u_xlat0;
  let x_198 : vec4<f32> = x_39.x_ShadowMapTexture_TexelSize;
  let x_203 : vec2<f32> = ((vec2<f32>(x_194.x, x_194.y) * vec2<f32>(x_198.z, x_198.w)) + vec2<f32>(0.5f, 0.5f));
  let x_204 : vec4<f32> = u_xlat1;
  u_xlat1 = vec4<f32>(x_203.x, x_203.y, x_204.z, x_204.w);
  let x_206 : vec4<f32> = u_xlat1;
  let x_208 : vec2<f32> = floor(vec2<f32>(x_206.x, x_206.y));
  let x_209 : vec4<f32> = u_xlat1;
  u_xlat1 = vec4<f32>(x_208.x, x_208.y, x_209.z, x_209.w);
  let x_211 : vec4<f32> = u_xlat0;
  let x_214 : vec4<f32> = x_39.x_ShadowMapTexture_TexelSize;
  let x_217 : vec4<f32> = u_xlat1;
  let x_220 : vec2<f32> = ((vec2<f32>(x_211.x, x_211.y) * vec2<f32>(x_214.z, x_214.w)) + -(vec2<f32>(x_217.x, x_217.y)));
  let x_221 : vec4<f32> = u_xlat0;
  u_xlat0 = vec4<f32>(x_220.x, x_220.y, x_221.z, x_221.w);
  let x_225 : vec4<f32> = u_xlat0;
  u_xlat17 = (-(vec2<f32>(x_225.x, x_225.y)) + vec2<f32>(1.0f, 1.0f));
  let x_231 : vec4<f32> = u_xlat0;
  let x_235 : vec2<f32> = min(vec2<f32>(x_231.x, x_231.y), vec2<f32>(0.0f, 0.0f));
  let x_236 : vec4<f32> = u_xlat2;
  u_xlat2 = vec4<f32>(x_235.x, x_235.y, x_236.z, x_236.w);
  let x_238 : vec4<f32> = u_xlat2;
  let x_241 : vec4<f32> = u_xlat2;
  let x_244 : vec2<f32> = u_xlat17;
  u_xlat17 = ((-(vec2<f32>(x_238.x, x_238.y)) * vec2<f32>(x_241.x, x_241.y)) + x_244);
  let x_246 : vec2<f32> = u_xlat17;
  u_xlat17 = (x_246 + vec2<f32>(2.0f, 2.0f));
  let x_250 : vec2<f32> = u_xlat17;
  let x_253 : vec2<f32> = (x_250 * vec2<f32>(0.081632003f, 0.081632003f));
  let x_254 : vec4<f32> = u_xlat2;
  u_xlat2 = vec4<f32>(x_253.x, x_253.y, x_254.z, x_254.w);
  let x_258 : f32 = u_xlat2.x;
  u_xlat3.y = x_258;
  let x_260 : vec4<f32> = u_xlat0;
  u_xlat17 = max(vec2<f32>(x_260.x, x_260.y), vec2<f32>(0.0f, 0.0f));
  let x_264 : vec4<f32> = u_xlat0;
  u_xlat4 = (vec4<f32>(x_264.x, x_264.x, x_264.y, x_264.y) + vec4<f32>(0.5f, 1.0f, 0.5f, 1.0f));
  let x_268 : vec2<f32> = u_xlat17;
  let x_270 : vec2<f32> = u_xlat17;
  let x_272 : vec4<f32> = u_xlat4;
  u_xlat17 = ((-(x_268) * x_270) + vec2<f32>(x_272.y, x_272.w));
  let x_275 : vec4<f32> = u_xlat4;
  let x_277 : vec4<f32> = u_xlat4;
  u_xlat4 = (vec4<f32>(x_275.x, x_275.x, x_275.z, x_275.z) * vec4<f32>(x_277.x, x_277.x, x_277.z, x_277.z));
  let x_280 : vec2<f32> = u_xlat17;
  u_xlat17 = (x_280 + vec2<f32>(2.0f, 2.0f));
  let x_284 : f32 = u_xlat17.x;
  u_xlat5.z = (x_284 * 0.081632003f);
  let x_290 : f32 = u_xlat17.y;
  u_xlat6.z = (x_290 * 0.081632003f);
  let x_293 : vec4<f32> = u_xlat4;
  let x_296 : vec4<f32> = u_xlat0;
  u_xlat17 = ((vec2<f32>(x_293.x, x_293.z) * vec2<f32>(0.5f, 0.5f)) + -(vec2<f32>(x_296.x, x_296.y)));
  let x_300 : vec4<f32> = u_xlat4;
  let x_304 : vec2<f32> = (vec2<f32>(x_300.w, x_300.y) * vec2<f32>(0.040816002f, 0.040816002f));
  let x_305 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_305.x, x_305.y, x_304.x, x_304.y);
  let x_307 : vec2<f32> = u_xlat17;
  let x_309 : vec2<f32> = (vec2<f32>(x_307.y, x_307.x) * vec2<f32>(0.081632003f, 0.081632003f));
  let x_310 : vec4<f32> = u_xlat6;
  u_xlat6 = vec4<f32>(x_309.x, x_309.y, x_310.z, x_310.w);
  let x_313 : f32 = u_xlat6.y;
  u_xlat5.x = x_313;
  let x_316 : f32 = u_xlat3.z;
  u_xlat2.w = x_316;
  let x_318 : vec4<f32> = u_xlat0;
  let x_325 : vec2<f32> = ((vec2<f32>(x_318.x, x_318.x) * vec2<f32>(-0.081632003f, 0.081632003f)) + vec2<f32>(0.163264006f, 0.081632003f));
  let x_326 : vec4<f32> = u_xlat5;
  u_xlat5 = vec4<f32>(x_326.x, x_325.x, x_326.z, x_325.y);
  let x_328 : vec4<f32> = u_xlat0;
  let x_332 : vec2<f32> = ((vec2<f32>(x_328.x, x_328.x) * vec2<f32>(-0.081632003f, 0.081632003f)) + vec2<f32>(0.081632003f, 0.163264006f));
  let x_333 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_332.x, x_333.y, x_332.y, x_333.w);
  let x_335 : vec4<f32> = u_xlat3;
  let x_336 : vec4<f32> = u_xlat5;
  u_xlat4 = (x_335 + x_336);
  let x_338 : vec4<f32> = u_xlat3;
  let x_339 : vec4<f32> = u_xlat4;
  u_xlat3 = (x_338 / x_339);
  let x_341 : vec4<f32> = u_xlat3;
  u_xlat3 = (x_341 + vec4<f32>(-3.5f, -1.5f, 0.5f, 2.5f));
  let x_347 : vec4<f32> = u_xlat3;
  let x_350 : vec4<f32> = x_39.x_ShadowMapTexture_TexelSize;
  u_xlat3 = (vec4<f32>(x_347.w, x_347.x, x_347.y, x_347.z) * vec4<f32>(x_350.x, x_350.x, x_350.x, x_350.x));
  let x_353 : vec4<f32> = u_xlat3;
  let x_354 : vec3<f32> = vec3<f32>(x_353.y, x_353.z, x_353.w);
  let x_355 : vec4<f32> = u_xlat5;
  u_xlat5 = vec4<f32>(x_354.x, x_355.y, x_354.y, x_354.z);
  let x_357 : vec4<f32> = u_xlat0;
  let x_360 : vec2<f32> = ((vec2<f32>(x_357.y, x_357.y) * vec2<f32>(-0.081632003f, 0.081632003f)) + vec2<f32>(0.163264006f, 0.081632003f));
  let x_361 : vec4<f32> = u_xlat6;
  u_xlat6 = vec4<f32>(x_361.x, x_360.x, x_361.z, x_360.y);
  let x_363 : vec4<f32> = u_xlat0;
  let x_366 : vec2<f32> = ((vec2<f32>(x_363.y, x_363.y) * vec2<f32>(-0.081632003f, 0.081632003f)) + vec2<f32>(0.081632003f, 0.163264006f));
  let x_367 : vec4<f32> = u_xlat2;
  u_xlat2 = vec4<f32>(x_366.x, x_367.y, x_366.y, x_367.w);
  let x_369 : vec4<f32> = u_xlat2;
  let x_370 : vec4<f32> = u_xlat6;
  u_xlat6 = (x_369 + x_370);
  let x_372 : vec4<f32> = u_xlat2;
  let x_373 : vec4<f32> = u_xlat6;
  u_xlat2 = (x_372 / x_373);
  let x_375 : vec4<f32> = u_xlat2;
  u_xlat2 = (x_375 + vec4<f32>(-3.5f, -1.5f, 0.5f, 2.5f));
  let x_377 : vec4<f32> = u_xlat2;
  let x_380 : vec4<f32> = x_39.x_ShadowMapTexture_TexelSize;
  u_xlat2 = (vec4<f32>(x_377.x, x_377.w, x_377.y, x_377.z) * vec4<f32>(x_380.y, x_380.y, x_380.y, x_380.y));
  let x_384 : f32 = u_xlat2.x;
  u_xlat5.y = x_384;
  let x_387 : vec4<f32> = u_xlat1;
  let x_390 : vec4<f32> = x_39.x_ShadowMapTexture_TexelSize;
  let x_393 : vec4<f32> = u_xlat5;
  u_xlat7 = ((vec4<f32>(x_387.x, x_387.y, x_387.x, x_387.y) * vec4<f32>(x_390.x, x_390.y, x_390.x, x_390.y)) + vec4<f32>(x_393.x, x_393.y, x_393.z, x_393.y));
  let x_397 : vec4<f32> = u_xlat7;
  let x_398 : vec2<f32> = vec2<f32>(x_397.z, x_397.w);
  let x_400 : f32 = u_xlat0.z;
  txVec0 = vec3<f32>(x_398.x, x_398.y, x_400);
  let x_412 : vec3<f32> = txVec0;
  let x_414 : f32 = textureSampleCompareLevel(x_ShadowMapTexture, sampler_ShadowMapTexture, x_412.xy, x_412.z);
  u_xlat0.x = x_414;
  let x_417 : vec4<f32> = u_xlat7;
  let x_418 : vec2<f32> = vec2<f32>(x_417.x, x_417.y);
  let x_420 : f32 = u_xlat0.z;
  txVec1 = vec3<f32>(x_418.x, x_418.y, x_420);
  let x_427 : vec3<f32> = txVec1;
  let x_429 : f32 = textureSampleCompareLevel(x_ShadowMapTexture, sampler_ShadowMapTexture, x_427.xy, x_427.z);
  u_xlat8.x = x_429;
  let x_431 : vec4<f32> = u_xlat4;
  let x_432 : vec4<f32> = u_xlat6;
  u_xlat7 = (x_431 * vec4<f32>(x_432.x, x_432.x, x_432.x, x_432.x));
  let x_436 : f32 = u_xlat0.x;
  let x_438 : f32 = u_xlat7.y;
  u_xlat0.x = (x_436 * x_438);
  let x_442 : f32 = u_xlat7.x;
  let x_444 : f32 = u_xlat8.x;
  let x_447 : f32 = u_xlat0.x;
  u_xlat0.x = ((x_442 * x_444) + x_447);
  let x_450 : vec4<f32> = u_xlat1;
  let x_453 : vec4<f32> = x_39.x_ShadowMapTexture_TexelSize;
  let x_456 : vec4<f32> = u_xlat5;
  let x_458 : vec2<f32> = ((vec2<f32>(x_450.x, x_450.y) * vec2<f32>(x_453.x, x_453.y)) + vec2<f32>(x_456.w, x_456.y));
  let x_459 : vec3<f32> = u_xlat8;
  u_xlat8 = vec3<f32>(x_458.x, x_459.y, x_458.y);
  let x_462 : f32 = u_xlat5.y;
  u_xlat3.y = x_462;
  let x_464 : vec4<f32> = u_xlat1;
  let x_467 : vec4<f32> = x_39.x_ShadowMapTexture_TexelSize;
  let x_470 : vec4<f32> = u_xlat3;
  u_xlat17 = ((vec2<f32>(x_464.x, x_464.y) * vec2<f32>(x_467.x, x_467.y)) + vec2<f32>(x_470.x, x_470.y));
  let x_474 : vec2<f32> = u_xlat17;
  let x_476 : f32 = u_xlat0.z;
  txVec2 = vec3<f32>(x_474.x, x_474.y, x_476);
  let x_483 : vec3<f32> = txVec2;
  let x_485 : f32 = textureSampleCompareLevel(x_ShadowMapTexture, sampler_ShadowMapTexture, x_483.xy, x_483.z);
  u_xlat17.x = x_485;
  let x_488 : vec3<f32> = u_xlat8;
  let x_489 : vec2<f32> = vec2<f32>(x_488.x, x_488.z);
  let x_491 : f32 = u_xlat0.z;
  txVec3 = vec3<f32>(x_489.x, x_489.y, x_491);
  let x_498 : vec3<f32> = txVec3;
  let x_500 : f32 = textureSampleCompareLevel(x_ShadowMapTexture, sampler_ShadowMapTexture, x_498.xy, x_498.z);
  u_xlat8.x = x_500;
  let x_503 : f32 = u_xlat7.z;
  let x_505 : f32 = u_xlat8.x;
  let x_508 : f32 = u_xlat0.x;
  u_xlat0.x = ((x_503 * x_505) + x_508);
  let x_512 : f32 = u_xlat7.w;
  let x_514 : f32 = u_xlat17.x;
  let x_517 : f32 = u_xlat0.x;
  u_xlat0.x = ((x_512 * x_514) + x_517);
  let x_521 : f32 = u_xlat2.z;
  u_xlat5.y = x_521;
  let x_523 : vec4<f32> = u_xlat1;
  let x_526 : vec4<f32> = x_39.x_ShadowMapTexture_TexelSize;
  let x_529 : vec4<f32> = u_xlat5;
  u_xlat7 = ((vec4<f32>(x_523.x, x_523.y, x_523.x, x_523.y) * vec4<f32>(x_526.x, x_526.y, x_526.x, x_526.y)) + vec4<f32>(x_529.x, x_529.y, x_529.z, x_529.y));
  let x_533 : vec4<f32> = u_xlat7;
  let x_534 : vec2<f32> = vec2<f32>(x_533.x, x_533.y);
  let x_536 : f32 = u_xlat0.z;
  txVec4 = vec3<f32>(x_534.x, x_534.y, x_536);
  let x_543 : vec3<f32> = txVec4;
  let x_545 : f32 = textureSampleCompareLevel(x_ShadowMapTexture, sampler_ShadowMapTexture, x_543.xy, x_543.z);
  u_xlat8.x = x_545;
  let x_548 : vec4<f32> = u_xlat7;
  let x_549 : vec2<f32> = vec2<f32>(x_548.z, x_548.w);
  let x_551 : f32 = u_xlat0.z;
  txVec5 = vec3<f32>(x_549.x, x_549.y, x_551);
  let x_559 : vec3<f32> = txVec5;
  let x_561 : f32 = textureSampleCompareLevel(x_ShadowMapTexture, sampler_ShadowMapTexture, x_559.xy, x_559.z);
  u_xlat24 = x_561;
  let x_562 : vec4<f32> = u_xlat4;
  let x_563 : vec4<f32> = u_xlat6;
  u_xlat7 = (x_562 * vec4<f32>(x_563.y, x_563.y, x_563.y, x_563.y));
  let x_567 : f32 = u_xlat7.x;
  let x_569 : f32 = u_xlat8.x;
  let x_572 : f32 = u_xlat0.x;
  u_xlat0.x = ((x_567 * x_569) + x_572);
  let x_576 : f32 = u_xlat7.y;
  let x_577 : f32 = u_xlat24;
  let x_580 : f32 = u_xlat0.x;
  u_xlat0.x = ((x_576 * x_577) + x_580);
  let x_583 : vec4<f32> = u_xlat1;
  let x_586 : vec4<f32> = x_39.x_ShadowMapTexture_TexelSize;
  let x_589 : vec4<f32> = u_xlat5;
  let x_591 : vec2<f32> = ((vec2<f32>(x_583.x, x_583.y) * vec2<f32>(x_586.x, x_586.y)) + vec2<f32>(x_589.w, x_589.y));
  let x_592 : vec3<f32> = u_xlat8;
  u_xlat8 = vec3<f32>(x_591.x, x_592.y, x_591.y);
  let x_595 : f32 = u_xlat5.y;
  u_xlat3.z = x_595;
  let x_597 : vec4<f32> = u_xlat1;
  let x_600 : vec4<f32> = x_39.x_ShadowMapTexture_TexelSize;
  let x_603 : vec4<f32> = u_xlat3;
  u_xlat17 = ((vec2<f32>(x_597.x, x_597.y) * vec2<f32>(x_600.x, x_600.y)) + vec2<f32>(x_603.x, x_603.z));
  let x_607 : vec2<f32> = u_xlat17;
  let x_609 : f32 = u_xlat0.z;
  txVec6 = vec3<f32>(x_607.x, x_607.y, x_609);
  let x_616 : vec3<f32> = txVec6;
  let x_618 : f32 = textureSampleCompareLevel(x_ShadowMapTexture, sampler_ShadowMapTexture, x_616.xy, x_616.z);
  u_xlat17.x = x_618;
  let x_621 : vec3<f32> = u_xlat8;
  let x_622 : vec2<f32> = vec2<f32>(x_621.x, x_621.z);
  let x_624 : f32 = u_xlat0.z;
  txVec7 = vec3<f32>(x_622.x, x_622.y, x_624);
  let x_631 : vec3<f32> = txVec7;
  let x_633 : f32 = textureSampleCompareLevel(x_ShadowMapTexture, sampler_ShadowMapTexture, x_631.xy, x_631.z);
  u_xlat8.x = x_633;
  let x_636 : f32 = u_xlat7.z;
  let x_638 : f32 = u_xlat8.x;
  let x_641 : f32 = u_xlat0.x;
  u_xlat0.x = ((x_636 * x_638) + x_641);
  let x_645 : f32 = u_xlat7.w;
  let x_647 : f32 = u_xlat17.x;
  let x_650 : f32 = u_xlat0.x;
  u_xlat0.x = ((x_645 * x_647) + x_650);
  let x_654 : f32 = u_xlat2.w;
  u_xlat5.y = x_654;
  let x_656 : vec4<f32> = u_xlat1;
  let x_659 : vec4<f32> = x_39.x_ShadowMapTexture_TexelSize;
  let x_662 : vec4<f32> = u_xlat5;
  u_xlat7 = ((vec4<f32>(x_656.x, x_656.y, x_656.x, x_656.y) * vec4<f32>(x_659.x, x_659.y, x_659.x, x_659.y)) + vec4<f32>(x_662.x, x_662.y, x_662.z, x_662.y));
  let x_666 : vec4<f32> = u_xlat7;
  let x_667 : vec2<f32> = vec2<f32>(x_666.x, x_666.y);
  let x_669 : f32 = u_xlat0.z;
  txVec8 = vec3<f32>(x_667.x, x_667.y, x_669);
  let x_676 : vec3<f32> = txVec8;
  let x_678 : f32 = textureSampleCompareLevel(x_ShadowMapTexture, sampler_ShadowMapTexture, x_676.xy, x_676.z);
  u_xlat8.x = x_678;
  let x_681 : vec4<f32> = u_xlat7;
  let x_682 : vec2<f32> = vec2<f32>(x_681.z, x_681.w);
  let x_684 : f32 = u_xlat0.z;
  txVec9 = vec3<f32>(x_682.x, x_682.y, x_684);
  let x_691 : vec3<f32> = txVec9;
  let x_693 : f32 = textureSampleCompareLevel(x_ShadowMapTexture, sampler_ShadowMapTexture, x_691.xy, x_691.z);
  u_xlat24 = x_693;
  let x_694 : vec4<f32> = u_xlat4;
  let x_695 : vec4<f32> = u_xlat6;
  u_xlat7 = (x_694 * vec4<f32>(x_695.z, x_695.z, x_695.z, x_695.z));
  let x_698 : vec4<f32> = u_xlat4;
  let x_699 : vec4<f32> = u_xlat6;
  u_xlat4 = (x_698 * vec4<f32>(x_699.w, x_699.w, x_699.w, x_699.w));
  let x_703 : f32 = u_xlat7.x;
  let x_705 : f32 = u_xlat8.x;
  let x_708 : f32 = u_xlat0.x;
  u_xlat0.x = ((x_703 * x_705) + x_708);
  let x_712 : f32 = u_xlat7.y;
  let x_713 : f32 = u_xlat24;
  let x_716 : f32 = u_xlat0.x;
  u_xlat0.x = ((x_712 * x_713) + x_716);
  let x_719 : vec4<f32> = u_xlat1;
  let x_722 : vec4<f32> = x_39.x_ShadowMapTexture_TexelSize;
  let x_725 : vec4<f32> = u_xlat5;
  let x_727 : vec2<f32> = ((vec2<f32>(x_719.x, x_719.y) * vec2<f32>(x_722.x, x_722.y)) + vec2<f32>(x_725.w, x_725.y));
  let x_728 : vec3<f32> = u_xlat8;
  u_xlat8 = vec3<f32>(x_727.x, x_728.y, x_727.y);
  let x_730 : vec4<f32> = u_xlat5;
  let x_731 : vec3<f32> = vec3<f32>(x_730.x, x_730.z, x_730.w);
  let x_732 : vec4<f32> = u_xlat2;
  u_xlat2 = vec4<f32>(x_731.x, x_732.y, x_731.y, x_731.z);
  let x_735 : f32 = u_xlat5.y;
  u_xlat3.w = x_735;
  let x_737 : vec4<f32> = u_xlat1;
  let x_740 : vec4<f32> = x_39.x_ShadowMapTexture_TexelSize;
  let x_743 : vec4<f32> = u_xlat3;
  u_xlat17 = ((vec2<f32>(x_737.x, x_737.y) * vec2<f32>(x_740.x, x_740.y)) + vec2<f32>(x_743.x, x_743.w));
  let x_747 : vec2<f32> = u_xlat17;
  let x_749 : f32 = u_xlat0.z;
  txVec10 = vec3<f32>(x_747.x, x_747.y, x_749);
  let x_756 : vec3<f32> = txVec10;
  let x_758 : f32 = textureSampleCompareLevel(x_ShadowMapTexture, sampler_ShadowMapTexture, x_756.xy, x_756.z);
  u_xlat17.x = x_758;
  let x_761 : vec3<f32> = u_xlat8;
  let x_762 : vec2<f32> = vec2<f32>(x_761.x, x_761.z);
  let x_764 : f32 = u_xlat0.z;
  txVec11 = vec3<f32>(x_762.x, x_762.y, x_764);
  let x_771 : vec3<f32> = txVec11;
  let x_773 : f32 = textureSampleCompareLevel(x_ShadowMapTexture, sampler_ShadowMapTexture, x_771.xy, x_771.z);
  u_xlat8.x = x_773;
  let x_776 : f32 = u_xlat7.z;
  let x_778 : f32 = u_xlat8.x;
  let x_781 : f32 = u_xlat0.x;
  u_xlat0.x = ((x_776 * x_778) + x_781);
  let x_785 : f32 = u_xlat7.w;
  let x_787 : f32 = u_xlat17.x;
  let x_790 : f32 = u_xlat0.x;
  u_xlat0.x = ((x_785 * x_787) + x_790);
  let x_793 : vec4<f32> = u_xlat1;
  let x_796 : vec4<f32> = x_39.x_ShadowMapTexture_TexelSize;
  let x_799 : vec4<f32> = u_xlat2;
  u_xlat5 = ((vec4<f32>(x_793.x, x_793.y, x_793.x, x_793.y) * vec4<f32>(x_796.x, x_796.y, x_796.x, x_796.y)) + vec4<f32>(x_799.x, x_799.y, x_799.z, x_799.y));
  let x_802 : vec4<f32> = u_xlat1;
  let x_805 : vec4<f32> = x_39.x_ShadowMapTexture_TexelSize;
  let x_808 : vec4<f32> = u_xlat2;
  let x_810 : vec2<f32> = ((vec2<f32>(x_802.x, x_802.y) * vec2<f32>(x_805.x, x_805.y)) + vec2<f32>(x_808.w, x_808.y));
  let x_811 : vec3<f32> = u_xlat8;
  u_xlat8 = vec3<f32>(x_810.x, x_811.y, x_810.y);
  let x_814 : f32 = u_xlat2.y;
  u_xlat3.y = x_814;
  let x_816 : vec4<f32> = u_xlat1;
  let x_819 : vec4<f32> = x_39.x_ShadowMapTexture_TexelSize;
  let x_822 : vec4<f32> = u_xlat3;
  let x_824 : vec2<f32> = ((vec2<f32>(x_816.x, x_816.y) * vec2<f32>(x_819.x, x_819.y)) + vec2<f32>(x_822.x, x_822.y));
  let x_825 : vec4<f32> = u_xlat1;
  u_xlat1 = vec4<f32>(x_824.x, x_824.y, x_825.z, x_825.w);
  let x_828 : vec4<f32> = u_xlat1;
  let x_829 : vec2<f32> = vec2<f32>(x_828.x, x_828.y);
  let x_831 : f32 = u_xlat0.z;
  txVec12 = vec3<f32>(x_829.x, x_829.y, x_831);
  let x_838 : vec3<f32> = txVec12;
  let x_840 : f32 = textureSampleCompareLevel(x_ShadowMapTexture, sampler_ShadowMapTexture, x_838.xy, x_838.z);
  u_xlat1.x = x_840;
  let x_843 : vec3<f32> = u_xlat8;
  let x_844 : vec2<f32> = vec2<f32>(x_843.x, x_843.z);
  let x_846 : f32 = u_xlat0.z;
  txVec13 = vec3<f32>(x_844.x, x_844.y, x_846);
  let x_853 : vec3<f32> = txVec13;
  let x_855 : f32 = textureSampleCompareLevel(x_ShadowMapTexture, sampler_ShadowMapTexture, x_853.xy, x_853.z);
  u_xlat8.x = x_855;
  let x_858 : vec4<f32> = u_xlat5;
  let x_859 : vec2<f32> = vec2<f32>(x_858.x, x_858.y);
  let x_861 : f32 = u_xlat0.z;
  txVec14 = vec3<f32>(x_859.x, x_859.y, x_861);
  let x_868 : vec3<f32> = txVec14;
  let x_870 : f32 = textureSampleCompareLevel(x_ShadowMapTexture, sampler_ShadowMapTexture, x_868.xy, x_868.z);
  u_xlat24 = x_870;
  let x_872 : vec4<f32> = u_xlat5;
  let x_873 : vec2<f32> = vec2<f32>(x_872.z, x_872.w);
  let x_875 : f32 = u_xlat0.z;
  txVec15 = vec3<f32>(x_873.x, x_873.y, x_875);
  let x_882 : vec3<f32> = txVec15;
  let x_884 : f32 = textureSampleCompareLevel(x_ShadowMapTexture, sampler_ShadowMapTexture, x_882.xy, x_882.z);
  u_xlat16 = x_884;
  let x_886 : f32 = u_xlat4.x;
  let x_887 : f32 = u_xlat24;
  let x_890 : f32 = u_xlat0.x;
  u_xlat0.x = ((x_886 * x_887) + x_890);
  let x_894 : f32 = u_xlat4.y;
  let x_895 : f32 = u_xlat16;
  let x_898 : f32 = u_xlat0.x;
  u_xlat0.x = ((x_894 * x_895) + x_898);
  let x_902 : f32 = u_xlat4.z;
  let x_904 : f32 = u_xlat8.x;
  let x_907 : f32 = u_xlat0.x;
  u_xlat0.x = ((x_902 * x_904) + x_907);
  let x_911 : f32 = u_xlat4.w;
  let x_913 : f32 = u_xlat1.x;
  let x_916 : f32 = u_xlat0.x;
  u_xlat0.x = ((x_911 * x_913) + x_916);
  let x_921 : f32 = x_39.x_LightShadowData.x;
  u_xlat8.x = (-(x_921) + 1.0f);
  let x_927 : vec4<f32> = u_xlat0;
  let x_929 : vec3<f32> = u_xlat8;
  let x_933 : vec4<f32> = x_39.x_LightShadowData;
  SV_Target0 = ((vec4<f32>(x_927.x, x_927.x, x_927.x, x_927.x) * vec4<f32>(x_929.x, x_929.x, x_929.x, x_929.x)) + vec4<f32>(x_933.x, x_933.x, x_933.x, x_933.x));
  return;
}

struct main_out {
  @location(0)
  SV_Target0_1 : vec4<f32>,
}

@fragment
fn main(@location(0) vs_TEXCOORD0_param : vec4<f32>, @location(2) vs_TEXCOORD2_param : vec3<f32>, @location(3) vs_TEXCOORD3_param : vec3<f32>, @location(1) vs_TEXCOORD1_param : vec3<f32>, @builtin(position) gl_FragCoord_param : vec4<f32>) -> main_out {
  vs_TEXCOORD0 = vs_TEXCOORD0_param;
  vs_TEXCOORD2 = vs_TEXCOORD2_param;
  vs_TEXCOORD3 = vs_TEXCOORD3_param;
  vs_TEXCOORD1 = vs_TEXCOORD1_param;
  gl_FragCoord = gl_FragCoord_param;
  main_1();
  return main_out(SV_Target0);
}

