type Arr = array<vec4<f32>, 3u>;

type Arr_1 = array<vec4<f32>, 3u>;

struct CB1 {
  gInvThicknessTable : Arr_1,
  gSampleWeightTable : Arr_1,
  gInvSliceDimension : vec4<f32>,
  AdditionalParams : vec2<f32>,
}

struct S {
  value : array<u32, 1u>,
}

var<private> gl_LocalInvocationID : vec3<u32>;

var<private> gl_GlobalInvocationID : vec3<u32>;

@group(1) @binding(0) var<uniform> x_43 : CB1;

@group(0) @binding(0) var DepthTex : texture_2d<f32>;

@group(0) @binding(2) var samplerDepthTex : sampler;

var<workgroup> TGSM0 : array<S, 1024u>;

@group(0) @binding(1) var Occlusion_origX0X : texture_storage_2d<r32float, write>;

fn main_1() {
  var u_xlati0 : vec2<i32>;
  var u_xlat0 : vec4<f32>;
  var u_xlati1 : vec4<i32>;
  var u_xlati15 : i32;
  var u_xlati10 : vec2<i32>;
  var u_xlat5 : vec3<f32>;
  var u_xlat10 : f32;
  var u_xlat6 : vec3<f32>;
  var u_xlat2 : vec3<f32>;
  var u_xlat15 : f32;
  var u_xlat11 : vec2<f32>;
  var u_xlat1 : vec4<f32>;
  var u_xlat12 : f32;
  var u_xlati3 : vec4<i32>;
  var u_xlat16 : f32;
  var u_xlat17 : f32;
  var u_xlat3 : vec3<f32>;
  var u_xlat8 : f32;
  var u_xlati4 : vec4<i32>;
  var u_xlat7 : f32;
  var u_xlat_precise_vec4 : vec4<f32>;
  var u_xlat_precise_ivec4 : vec4<i32>;
  var u_xlat_precise_bvec4 : vec4<bool>;
  var u_xlat_precise_uvec4 : vec4<u32>;
  let x_15 : vec3<u32> = gl_LocalInvocationID;
  let x_19 : vec3<u32> = gl_GlobalInvocationID;
  u_xlati0 = (bitcast<vec2<i32>>(vec2<u32>(x_15.x, x_15.y)) + bitcast<vec2<i32>>(vec2<u32>(x_19.x, x_19.y)));
  let x_23 : vec2<i32> = u_xlati0;
  u_xlati0 = (x_23 + vec2<i32>(-7i, -7i));
  let x_31 : vec2<i32> = u_xlati0;
  let x_33 : vec2<f32> = vec2<f32>(x_31);
  let x_34 : vec4<f32> = u_xlat0;
  u_xlat0 = vec4<f32>(x_33.x, x_33.y, x_34.z, x_34.w);
  let x_36 : vec4<f32> = u_xlat0;
  let x_47 : vec4<f32> = x_43.gInvSliceDimension;
  let x_49 : vec2<f32> = (vec2<f32>(x_36.x, x_36.y) * vec2<f32>(x_47.x, x_47.y));
  let x_50 : vec4<f32> = u_xlat0;
  u_xlat0 = vec4<f32>(x_49.x, x_49.y, x_50.z, x_50.w);
  let x_62 : vec4<f32> = u_xlat0;
  let x_65 : vec4<f32> = textureGather(0i, DepthTex, samplerDepthTex, vec2<f32>(x_62.x, x_62.y));
  u_xlat0 = x_65;
  let x_72 : u32 = gl_LocalInvocationID.x;
  u_xlati1.x = (bitcast<i32>(x_72) << bitcast<u32>(1i));
  let x_80 : u32 = gl_LocalInvocationID.y;
  let x_85 : i32 = u_xlati1.x;
  u_xlati1.x = ((bitcast<i32>(x_80) * 64i) + x_85);
  let x_95 : i32 = u_xlati1.x;
  let x_98 : f32 = u_xlat0.w;
  TGSM0[x_95].value[0i] = bitcast<u32>(x_98);
  let x_104 : i32 = u_xlati1.x;
  u_xlati15 = (x_104 + 1i);
  let x_106 : i32 = u_xlati15;
  let x_109 : f32 = u_xlat0.z;
  TGSM0[x_106].value[0i] = bitcast<u32>(x_109);
  let x_113 : vec4<i32> = u_xlati1;
  u_xlati10 = (vec2<i32>(x_113.x, x_113.x) + vec2<i32>(32i, 33i));
  let x_120 : i32 = u_xlati10.x;
  let x_122 : f32 = u_xlat0.x;
  TGSM0[x_120].value[0i] = bitcast<u32>(x_122);
  let x_126 : i32 = u_xlati10.y;
  let x_128 : f32 = u_xlat0.y;
  TGSM0[x_126].value[0i] = bitcast<u32>(x_128);
  workgroupBarrier();
  let x_133 : u32 = gl_LocalInvocationID.y;
  let x_137 : u32 = gl_LocalInvocationID.x;
  u_xlati0.x = ((bitcast<i32>(x_133) * 32i) + bitcast<i32>(x_137));
  let x_141 : vec2<i32> = u_xlati0;
  u_xlati1 = (vec4<i32>(x_141.x, x_141.x, x_141.x, x_141.x) + vec4<i32>(256i, 264i, 268i, 260i));
  let x_153 : i32 = u_xlati1.w;
  let x_155 : u32 = TGSM0[x_153].value[0i];
  u_xlat5.x = bitcast<f32>(x_155);
  let x_160 : i32 = u_xlati1.y;
  let x_162 : u32 = TGSM0[x_160].value[0i];
  u_xlat10 = bitcast<f32>(x_162);
  let x_165 : f32 = u_xlat10;
  u_xlat10 = (1.0f / x_165);
  let x_168 : f32 = u_xlat10;
  let x_171 : vec4<f32> = x_43.gInvThicknessTable[0i];
  let x_173 : vec2<f32> = (vec2<f32>(x_168, x_168) * vec2<f32>(x_171.y, x_171.w));
  let x_174 : vec3<f32> = u_xlat6;
  u_xlat6 = vec3<f32>(x_173.x, x_174.y, x_173.y);
  let x_178 : vec4<f32> = x_43.gInvThicknessTable[0i];
  let x_182 : vec2<f32> = (vec2<f32>(x_178.y, x_178.w) + vec2<f32>(-0.5f, -0.5f));
  let x_183 : vec3<f32> = u_xlat2;
  u_xlat2 = vec3<f32>(x_182.x, x_182.y, x_183.z);
  let x_186 : f32 = u_xlat5.x;
  let x_188 : f32 = u_xlat6.x;
  let x_191 : f32 = u_xlat2.x;
  u_xlat5.x = ((x_186 * x_188) + -(x_191));
  let x_197 : f32 = u_xlat5.x;
  let x_201 : f32 = x_43.AdditionalParams.x;
  u_xlat15 = (x_197 * x_201);
  let x_203 : f32 = u_xlat15;
  u_xlat15 = clamp(x_203, 0.0f, 1.0f);
  let x_209 : i32 = u_xlati1.z;
  let x_211 : u32 = TGSM0[x_209].value[0i];
  u_xlat11.x = bitcast<f32>(x_211);
  let x_216 : i32 = u_xlati1.x;
  let x_218 : u32 = TGSM0[x_216].value[0i];
  u_xlat1.x = bitcast<f32>(x_218);
  let x_222 : f32 = u_xlat1.x;
  let x_224 : f32 = u_xlat6.z;
  let x_227 : f32 = u_xlat2.y;
  u_xlat1.x = ((x_222 * x_224) + -(x_227));
  let x_232 : f32 = u_xlat11.x;
  let x_234 : f32 = u_xlat6.x;
  let x_237 : f32 = u_xlat2.x;
  u_xlat11.x = ((x_232 * x_234) + -(x_237));
  let x_242 : f32 = u_xlat15;
  let x_244 : f32 = u_xlat11.x;
  u_xlat12 = max(x_242, x_244);
  let x_247 : f32 = u_xlat11.x;
  let x_249 : f32 = x_43.AdditionalParams.x;
  u_xlat11.x = (x_247 * x_249);
  let x_253 : f32 = u_xlat11.x;
  u_xlat11.x = clamp(x_253, 0.0f, 1.0f);
  let x_256 : f32 = u_xlat12;
  u_xlat12 = min(x_256, 1.0f);
  let x_259 : f32 = u_xlat5.x;
  let x_261 : f32 = u_xlat11.x;
  u_xlat5.x = max(x_259, x_261);
  let x_265 : f32 = u_xlat5.x;
  u_xlat5.x = min(x_265, 1.0f);
  let x_269 : f32 = u_xlat5.x;
  let x_270 : f32 = u_xlat12;
  u_xlat5.x = (x_269 + x_270);
  let x_274 : f32 = u_xlat11.x;
  let x_276 : f32 = u_xlat15;
  let x_279 : f32 = u_xlat5.x;
  u_xlat5.x = ((-(x_274) * x_276) + x_279);
  let x_283 : f32 = u_xlat5.x;
  u_xlat5.x = clamp(x_283, 0.0f, 1.0f);
  let x_287 : vec2<i32> = u_xlati0;
  u_xlati3 = (vec4<i32>(x_287.x, x_287.x, x_287.x, x_287.x) + vec4<i32>(392i, 136i, 272i, 520i));
  let x_296 : i32 = u_xlati3.y;
  let x_298 : u32 = TGSM0[x_296].value[0i];
  u_xlat15 = bitcast<f32>(x_298);
  let x_300 : f32 = u_xlat15;
  let x_302 : f32 = u_xlat6.x;
  let x_305 : f32 = u_xlat2.x;
  u_xlat15 = ((x_300 * x_302) + -(x_305));
  let x_308 : f32 = u_xlat15;
  let x_310 : f32 = x_43.AdditionalParams.x;
  u_xlat11.x = (x_308 * x_310);
  let x_314 : f32 = u_xlat11.x;
  u_xlat11.x = clamp(x_314, 0.0f, 1.0f);
  let x_318 : i32 = u_xlati3.x;
  let x_320 : u32 = TGSM0[x_318].value[0i];
  u_xlat12 = bitcast<f32>(x_320);
  let x_322 : f32 = u_xlat12;
  let x_324 : f32 = u_xlat6.x;
  let x_327 : f32 = u_xlat2.x;
  u_xlat6.x = ((x_322 * x_324) + -(x_327));
  let x_332 : f32 = u_xlat11.x;
  let x_334 : f32 = u_xlat6.x;
  u_xlat2.x = max(x_332, x_334);
  let x_338 : f32 = u_xlat6.x;
  let x_340 : f32 = x_43.AdditionalParams.x;
  u_xlat6.x = (x_338 * x_340);
  let x_344 : f32 = u_xlat6.x;
  u_xlat6.x = clamp(x_344, 0.0f, 1.0f);
  let x_348 : f32 = u_xlat2.x;
  u_xlat2.x = min(x_348, 1.0f);
  let x_351 : f32 = u_xlat15;
  let x_353 : f32 = u_xlat6.x;
  u_xlat15 = max(x_351, x_353);
  let x_355 : f32 = u_xlat15;
  u_xlat15 = min(x_355, 1.0f);
  let x_357 : f32 = u_xlat15;
  let x_359 : f32 = u_xlat2.x;
  u_xlat15 = (x_357 + x_359);
  let x_362 : f32 = u_xlat6.x;
  let x_365 : f32 = u_xlat11.x;
  let x_367 : f32 = u_xlat15;
  u_xlat15 = ((-(x_362) * x_365) + x_367);
  let x_369 : f32 = u_xlat15;
  u_xlat15 = clamp(x_369, 0.0f, 1.0f);
  let x_371 : f32 = u_xlat15;
  let x_373 : f32 = u_xlat5.x;
  u_xlat5.x = (x_371 + x_373);
  let x_377 : i32 = u_xlati3.w;
  let x_379 : u32 = TGSM0[x_377].value[0i];
  u_xlat15 = bitcast<f32>(x_379);
  let x_382 : i32 = u_xlati3.z;
  let x_384 : u32 = TGSM0[x_382].value[0i];
  u_xlat6.x = bitcast<f32>(x_384);
  let x_388 : f32 = u_xlat6.x;
  let x_390 : f32 = u_xlat6.z;
  let x_393 : f32 = u_xlat2.y;
  u_xlat6.x = ((x_388 * x_390) + -(x_393));
  let x_397 : f32 = u_xlat15;
  let x_399 : f32 = u_xlat6.z;
  let x_402 : f32 = u_xlat2.y;
  u_xlat15 = ((x_397 * x_399) + -(x_402));
  let x_405 : vec2<i32> = u_xlati0;
  u_xlati3 = (vec4<i32>(x_405.x, x_405.x, x_405.x, x_405.x) + vec4<i32>(8i, 326i, 202i, 330i));
  let x_414 : i32 = u_xlati3.x;
  let x_416 : u32 = TGSM0[x_414].value[0i];
  u_xlat11.x = bitcast<f32>(x_416);
  let x_420 : f32 = u_xlat11.x;
  let x_422 : f32 = u_xlat6.z;
  let x_425 : f32 = u_xlat2.y;
  u_xlat11.x = ((x_420 * x_422) + -(x_425));
  let x_431 : f32 = u_xlat11.x;
  let x_433 : f32 = x_43.AdditionalParams.x;
  u_xlat16 = (x_431 * x_433);
  let x_435 : f32 = u_xlat16;
  u_xlat16 = clamp(x_435, 0.0f, 1.0f);
  let x_437 : f32 = u_xlat15;
  let x_438 : f32 = u_xlat16;
  u_xlat2.x = max(x_437, x_438);
  let x_441 : f32 = u_xlat15;
  let x_443 : f32 = x_43.AdditionalParams.x;
  u_xlat15 = (x_441 * x_443);
  let x_445 : f32 = u_xlat15;
  u_xlat15 = clamp(x_445, 0.0f, 1.0f);
  let x_448 : f32 = u_xlat2.x;
  u_xlat2.x = min(x_448, 1.0f);
  let x_451 : f32 = u_xlat15;
  let x_453 : f32 = u_xlat11.x;
  u_xlat11.x = max(x_451, x_453);
  let x_457 : f32 = u_xlat11.x;
  u_xlat11.x = min(x_457, 1.0f);
  let x_461 : f32 = u_xlat11.x;
  let x_463 : f32 = u_xlat2.x;
  u_xlat11.x = (x_461 + x_463);
  let x_466 : f32 = u_xlat15;
  let x_468 : f32 = u_xlat16;
  let x_471 : f32 = u_xlat11.x;
  u_xlat15 = ((-(x_466) * x_468) + x_471);
  let x_473 : f32 = u_xlat15;
  u_xlat15 = clamp(x_473, 0.0f, 1.0f);
  let x_476 : f32 = u_xlat1.x;
  let x_478 : f32 = x_43.AdditionalParams.x;
  u_xlat11.x = (x_476 * x_478);
  let x_482 : f32 = u_xlat11.x;
  u_xlat11.x = clamp(x_482, 0.0f, 1.0f);
  let x_486 : f32 = u_xlat11.x;
  let x_488 : f32 = u_xlat6.x;
  u_xlat1.w = max(x_486, x_488);
  let x_492 : f32 = u_xlat6.x;
  let x_494 : f32 = x_43.AdditionalParams.x;
  u_xlat6.x = (x_492 * x_494);
  let x_498 : f32 = u_xlat6.x;
  u_xlat6.x = clamp(x_498, 0.0f, 1.0f);
  let x_502 : f32 = u_xlat6.x;
  let x_504 : f32 = u_xlat1.x;
  u_xlat1.x = max(x_502, x_504);
  let x_507 : vec4<f32> = u_xlat1;
  let x_510 : vec2<f32> = min(vec2<f32>(x_507.x, x_507.w), vec2<f32>(1.0f, 1.0f));
  let x_511 : vec4<f32> = u_xlat1;
  u_xlat1 = vec4<f32>(x_510.x, x_511.y, x_511.z, x_510.y);
  let x_514 : f32 = u_xlat1.x;
  let x_516 : f32 = u_xlat1.w;
  u_xlat1.x = (x_514 + x_516);
  let x_520 : f32 = u_xlat6.x;
  let x_523 : f32 = u_xlat11.x;
  let x_526 : f32 = u_xlat1.x;
  u_xlat1.x = ((-(x_520) * x_523) + x_526);
  let x_530 : f32 = u_xlat1.x;
  u_xlat1.x = clamp(x_530, 0.0f, 1.0f);
  let x_533 : f32 = u_xlat15;
  let x_535 : f32 = u_xlat1.x;
  u_xlat5.z = (x_533 + x_535);
  let x_538 : vec3<f32> = u_xlat5;
  let x_541 : vec4<f32> = x_43.gSampleWeightTable[0i];
  let x_543 : vec2<f32> = (vec2<f32>(x_538.x, x_538.z) * vec2<f32>(x_541.y, x_541.w));
  let x_544 : vec3<f32> = u_xlat5;
  u_xlat5 = vec3<f32>(x_543.x, x_544.y, x_543.y);
  let x_547 : f32 = u_xlat5.z;
  u_xlat15 = (x_547 * 0.5f);
  let x_551 : f32 = u_xlat5.x;
  let x_553 : f32 = u_xlat15;
  u_xlat5.x = ((x_551 * 0.5f) + x_553);
  let x_557 : i32 = u_xlati3.z;
  let x_559 : u32 = TGSM0[x_557].value[0i];
  u_xlat15 = bitcast<f32>(x_559);
  let x_561 : f32 = u_xlat10;
  let x_564 : vec4<f32> = x_43.gInvThicknessTable[1i];
  let x_566 : vec2<f32> = (vec2<f32>(x_561, x_561) * vec2<f32>(x_564.x, x_564.z));
  let x_567 : vec4<f32> = u_xlat1;
  u_xlat1 = vec4<f32>(x_566.x, x_566.y, x_567.z, x_567.w);
  let x_569 : f32 = u_xlat10;
  let x_572 : vec4<f32> = x_43.gInvThicknessTable[2i];
  u_xlat2 = (vec3<f32>(x_569, x_569, x_569) * vec3<f32>(x_572.x, x_572.w, x_572.z));
  let x_576 : vec4<f32> = x_43.gInvThicknessTable[1i];
  u_xlat11 = (vec2<f32>(x_576.x, x_576.z) + vec2<f32>(-0.5f, -0.5f));
  let x_579 : f32 = u_xlat15;
  let x_581 : f32 = u_xlat1.x;
  let x_584 : f32 = u_xlat11.x;
  u_xlat10 = ((x_579 * x_581) + -(x_584));
  let x_587 : f32 = u_xlat10;
  let x_589 : f32 = x_43.AdditionalParams.x;
  u_xlat15 = (x_587 * x_589);
  let x_591 : f32 = u_xlat15;
  u_xlat15 = clamp(x_591, 0.0f, 1.0f);
  let x_595 : i32 = u_xlati3.y;
  let x_597 : u32 = TGSM0[x_595].value[0i];
  u_xlat17 = bitcast<f32>(x_597);
  let x_601 : i32 = u_xlati3.w;
  let x_603 : u32 = TGSM0[x_601].value[0i];
  u_xlat3.x = bitcast<f32>(x_603);
  let x_607 : f32 = u_xlat3.x;
  let x_609 : f32 = u_xlat1.x;
  let x_612 : f32 = u_xlat11.x;
  u_xlat3.x = ((x_607 * x_609) + -(x_612));
  let x_616 : f32 = u_xlat17;
  let x_618 : f32 = u_xlat1.x;
  let x_621 : f32 = u_xlat11.x;
  u_xlat17 = ((x_616 * x_618) + -(x_621));
  let x_625 : f32 = u_xlat15;
  let x_626 : f32 = u_xlat17;
  u_xlat8 = max(x_625, x_626);
  let x_628 : f32 = u_xlat17;
  let x_630 : f32 = x_43.AdditionalParams.x;
  u_xlat17 = (x_628 * x_630);
  let x_632 : f32 = u_xlat17;
  u_xlat17 = clamp(x_632, 0.0f, 1.0f);
  let x_634 : f32 = u_xlat8;
  u_xlat8 = min(x_634, 1.0f);
  let x_636 : f32 = u_xlat10;
  let x_637 : f32 = u_xlat17;
  u_xlat10 = max(x_636, x_637);
  let x_639 : f32 = u_xlat10;
  u_xlat10 = min(x_639, 1.0f);
  let x_641 : f32 = u_xlat10;
  let x_642 : f32 = u_xlat8;
  u_xlat10 = (x_641 + x_642);
  let x_644 : f32 = u_xlat17;
  let x_646 : f32 = u_xlat15;
  let x_648 : f32 = u_xlat10;
  u_xlat10 = ((-(x_644) * x_646) + x_648);
  let x_650 : f32 = u_xlat10;
  u_xlat10 = clamp(x_650, 0.0f, 1.0f);
  let x_653 : vec2<i32> = u_xlati0;
  u_xlati4 = (vec4<i32>(x_653.x, x_653.x, x_653.x, x_653.x) + vec4<i32>(198i, 388i, 140i, 396i));
  let x_662 : i32 = u_xlati4.x;
  let x_664 : u32 = TGSM0[x_662].value[0i];
  u_xlat15 = bitcast<f32>(x_664);
  let x_666 : f32 = u_xlat15;
  let x_668 : f32 = u_xlat1.x;
  let x_671 : f32 = u_xlat11.x;
  u_xlat15 = ((x_666 * x_668) + -(x_671));
  let x_674 : f32 = u_xlat15;
  let x_676 : f32 = x_43.AdditionalParams.x;
  u_xlat1.x = (x_674 * x_676);
  let x_680 : f32 = u_xlat1.x;
  u_xlat1.x = clamp(x_680, 0.0f, 1.0f);
  let x_684 : f32 = u_xlat1.x;
  let x_686 : f32 = u_xlat3.x;
  u_xlat11.x = max(x_684, x_686);
  let x_690 : f32 = u_xlat3.x;
  let x_692 : f32 = x_43.AdditionalParams.x;
  u_xlat17 = (x_690 * x_692);
  let x_694 : f32 = u_xlat17;
  u_xlat17 = clamp(x_694, 0.0f, 1.0f);
  let x_697 : f32 = u_xlat11.x;
  u_xlat11.x = min(x_697, 1.0f);
  let x_700 : f32 = u_xlat15;
  let x_701 : f32 = u_xlat17;
  u_xlat15 = max(x_700, x_701);
  let x_703 : f32 = u_xlat15;
  u_xlat15 = min(x_703, 1.0f);
  let x_705 : f32 = u_xlat15;
  let x_707 : f32 = u_xlat11.x;
  u_xlat15 = (x_705 + x_707);
  let x_709 : f32 = u_xlat17;
  let x_712 : f32 = u_xlat1.x;
  let x_714 : f32 = u_xlat15;
  u_xlat15 = ((-(x_709) * x_712) + x_714);
  let x_716 : f32 = u_xlat15;
  u_xlat15 = clamp(x_716, 0.0f, 1.0f);
  let x_718 : f32 = u_xlat15;
  let x_719 : f32 = u_xlat10;
  u_xlat10 = (x_718 + x_719);
  let x_721 : f32 = u_xlat10;
  let x_723 : f32 = x_43.gSampleWeightTable[1i].x;
  u_xlat10 = (x_721 * x_723);
  let x_725 : f32 = u_xlat10;
  let x_728 : f32 = u_xlat5.x;
  u_xlat5.x = ((x_725 * 0.5f) + x_728);
  let x_732 : i32 = u_xlati4.z;
  let x_734 : u32 = TGSM0[x_732].value[0i];
  u_xlat10 = bitcast<f32>(x_734);
  let x_737 : vec4<f32> = x_43.gInvThicknessTable[2i];
  u_xlat3 = (vec3<f32>(x_737.x, x_737.w, x_737.z) + vec3<f32>(-0.5f, -0.5f, -0.5f));
  let x_741 : f32 = u_xlat10;
  let x_743 : f32 = u_xlat2.x;
  let x_746 : f32 = u_xlat3.x;
  u_xlat10 = ((x_741 * x_743) + -(x_746));
  let x_749 : f32 = u_xlat10;
  let x_751 : f32 = x_43.AdditionalParams.x;
  u_xlat15 = (x_749 * x_751);
  let x_753 : f32 = u_xlat15;
  u_xlat15 = clamp(x_753, 0.0f, 1.0f);
  let x_756 : i32 = u_xlati4.y;
  let x_758 : u32 = TGSM0[x_756].value[0i];
  u_xlat1.x = bitcast<f32>(x_758);
  let x_762 : i32 = u_xlati4.w;
  let x_764 : u32 = TGSM0[x_762].value[0i];
  u_xlat11.x = bitcast<f32>(x_764);
  let x_768 : f32 = u_xlat11.x;
  let x_770 : f32 = u_xlat2.x;
  let x_773 : f32 = u_xlat3.x;
  u_xlat11.x = ((x_768 * x_770) + -(x_773));
  let x_778 : f32 = u_xlat1.x;
  let x_780 : f32 = u_xlat2.x;
  let x_783 : f32 = u_xlat3.x;
  u_xlat1.x = ((x_778 * x_780) + -(x_783));
  let x_787 : f32 = u_xlat15;
  let x_789 : f32 = u_xlat1.x;
  u_xlat17 = max(x_787, x_789);
  let x_792 : f32 = u_xlat1.x;
  let x_794 : f32 = x_43.AdditionalParams.x;
  u_xlat1.x = (x_792 * x_794);
  let x_798 : f32 = u_xlat1.x;
  u_xlat1.x = clamp(x_798, 0.0f, 1.0f);
  let x_801 : f32 = u_xlat17;
  u_xlat17 = min(x_801, 1.0f);
  let x_803 : f32 = u_xlat10;
  let x_805 : f32 = u_xlat1.x;
  u_xlat10 = max(x_803, x_805);
  let x_807 : f32 = u_xlat10;
  u_xlat10 = min(x_807, 1.0f);
  let x_809 : f32 = u_xlat10;
  let x_810 : f32 = u_xlat17;
  u_xlat10 = (x_809 + x_810);
  let x_813 : f32 = u_xlat1.x;
  let x_815 : f32 = u_xlat15;
  let x_817 : f32 = u_xlat10;
  u_xlat10 = ((-(x_813) * x_815) + x_817);
  let x_819 : f32 = u_xlat10;
  u_xlat10 = clamp(x_819, 0.0f, 1.0f);
  let x_821 : vec2<i32> = u_xlati0;
  u_xlati4 = (vec4<i32>(x_821.x, x_821.x, x_821.x, x_821.x) + vec4<i32>(132i, 450i, 78i, 462i));
  let x_830 : i32 = u_xlati4.x;
  let x_832 : u32 = TGSM0[x_830].value[0i];
  u_xlat15 = bitcast<f32>(x_832);
  let x_834 : f32 = u_xlat15;
  let x_836 : f32 = u_xlat2.x;
  let x_839 : f32 = u_xlat3.x;
  u_xlat15 = ((x_834 * x_836) + -(x_839));
  let x_842 : f32 = u_xlat15;
  let x_844 : f32 = x_43.AdditionalParams.x;
  u_xlat1.x = (x_842 * x_844);
  let x_848 : f32 = u_xlat1.x;
  u_xlat1.x = clamp(x_848, 0.0f, 1.0f);
  let x_852 : f32 = u_xlat1.x;
  let x_854 : f32 = u_xlat11.x;
  u_xlat2.x = max(x_852, x_854);
  let x_858 : f32 = u_xlat11.x;
  let x_860 : f32 = x_43.AdditionalParams.x;
  u_xlat11.x = (x_858 * x_860);
  let x_864 : f32 = u_xlat11.x;
  u_xlat11.x = clamp(x_864, 0.0f, 1.0f);
  let x_868 : f32 = u_xlat2.x;
  u_xlat2.x = min(x_868, 1.0f);
  let x_871 : f32 = u_xlat15;
  let x_873 : f32 = u_xlat11.x;
  u_xlat15 = max(x_871, x_873);
  let x_875 : f32 = u_xlat15;
  u_xlat15 = min(x_875, 1.0f);
  let x_877 : f32 = u_xlat15;
  let x_879 : f32 = u_xlat2.x;
  u_xlat15 = (x_877 + x_879);
  let x_882 : f32 = u_xlat11.x;
  let x_885 : f32 = u_xlat1.x;
  let x_887 : f32 = u_xlat15;
  u_xlat15 = ((-(x_882) * x_885) + x_887);
  let x_889 : f32 = u_xlat15;
  u_xlat15 = clamp(x_889, 0.0f, 1.0f);
  let x_891 : f32 = u_xlat15;
  let x_892 : f32 = u_xlat10;
  u_xlat10 = (x_891 + x_892);
  let x_894 : f32 = u_xlat10;
  let x_896 : f32 = x_43.gSampleWeightTable[2i].x;
  u_xlat10 = (x_894 * x_896);
  let x_898 : f32 = u_xlat10;
  let x_901 : f32 = u_xlat5.x;
  u_xlat5.x = ((x_898 * 0.5f) + x_901);
  let x_905 : i32 = u_xlati4.z;
  let x_907 : u32 = TGSM0[x_905].value[0i];
  u_xlat10 = bitcast<f32>(x_907);
  let x_909 : f32 = u_xlat10;
  let x_911 : f32 = u_xlat2.y;
  let x_914 : f32 = u_xlat3.y;
  u_xlat10 = ((x_909 * x_911) + -(x_914));
  let x_917 : f32 = u_xlat10;
  let x_919 : f32 = x_43.AdditionalParams.x;
  u_xlat15 = (x_917 * x_919);
  let x_921 : f32 = u_xlat15;
  u_xlat15 = clamp(x_921, 0.0f, 1.0f);
  let x_924 : i32 = u_xlati4.y;
  let x_926 : u32 = TGSM0[x_924].value[0i];
  u_xlat1.x = bitcast<f32>(x_926);
  let x_930 : i32 = u_xlati4.w;
  let x_932 : u32 = TGSM0[x_930].value[0i];
  u_xlat11.x = bitcast<f32>(x_932);
  let x_936 : f32 = u_xlat11.x;
  let x_938 : f32 = u_xlat2.y;
  let x_941 : f32 = u_xlat3.y;
  u_xlat11.x = ((x_936 * x_938) + -(x_941));
  let x_946 : f32 = u_xlat1.x;
  let x_948 : f32 = u_xlat2.y;
  let x_951 : f32 = u_xlat3.y;
  u_xlat1.x = ((x_946 * x_948) + -(x_951));
  let x_955 : f32 = u_xlat15;
  let x_957 : f32 = u_xlat1.x;
  u_xlat2.x = max(x_955, x_957);
  let x_961 : f32 = u_xlat1.x;
  let x_963 : f32 = x_43.AdditionalParams.x;
  u_xlat1.x = (x_961 * x_963);
  let x_967 : f32 = u_xlat1.x;
  u_xlat1.x = clamp(x_967, 0.0f, 1.0f);
  let x_971 : f32 = u_xlat2.x;
  u_xlat2.x = min(x_971, 1.0f);
  let x_974 : f32 = u_xlat10;
  let x_976 : f32 = u_xlat1.x;
  u_xlat10 = max(x_974, x_976);
  let x_978 : f32 = u_xlat10;
  u_xlat10 = min(x_978, 1.0f);
  let x_980 : f32 = u_xlat10;
  let x_982 : f32 = u_xlat2.x;
  u_xlat10 = (x_980 + x_982);
  let x_985 : f32 = u_xlat1.x;
  let x_987 : f32 = u_xlat15;
  let x_989 : f32 = u_xlat10;
  u_xlat10 = ((-(x_985) * x_987) + x_989);
  let x_991 : f32 = u_xlat10;
  u_xlat10 = clamp(x_991, 0.0f, 1.0f);
  let x_993 : vec2<i32> = u_xlati0;
  u_xlati4 = (vec4<i32>(x_993.x, x_993.x, x_993.x, x_993.x) + vec4<i32>(66i, 458i, 70i, 454i));
  let x_1002 : i32 = u_xlati4.x;
  let x_1004 : u32 = TGSM0[x_1002].value[0i];
  u_xlat15 = bitcast<f32>(x_1004);
  let x_1006 : f32 = u_xlat15;
  let x_1008 : f32 = u_xlat2.y;
  let x_1011 : f32 = u_xlat3.y;
  u_xlat15 = ((x_1006 * x_1008) + -(x_1011));
  let x_1014 : f32 = u_xlat15;
  let x_1016 : f32 = x_43.AdditionalParams.x;
  u_xlat1.x = (x_1014 * x_1016);
  let x_1020 : f32 = u_xlat1.x;
  u_xlat1.x = clamp(x_1020, 0.0f, 1.0f);
  let x_1024 : f32 = u_xlat1.x;
  let x_1026 : f32 = u_xlat11.x;
  u_xlat2.x = max(x_1024, x_1026);
  let x_1030 : f32 = u_xlat11.x;
  let x_1032 : f32 = x_43.AdditionalParams.x;
  u_xlat11.x = (x_1030 * x_1032);
  let x_1036 : f32 = u_xlat11.x;
  u_xlat11.x = clamp(x_1036, 0.0f, 1.0f);
  let x_1040 : f32 = u_xlat2.x;
  u_xlat2.x = min(x_1040, 1.0f);
  let x_1043 : f32 = u_xlat15;
  let x_1045 : f32 = u_xlat11.x;
  u_xlat15 = max(x_1043, x_1045);
  let x_1047 : f32 = u_xlat15;
  u_xlat15 = min(x_1047, 1.0f);
  let x_1049 : f32 = u_xlat15;
  let x_1051 : f32 = u_xlat2.x;
  u_xlat15 = (x_1049 + x_1051);
  let x_1054 : f32 = u_xlat11.x;
  let x_1057 : f32 = u_xlat1.x;
  let x_1059 : f32 = u_xlat15;
  u_xlat15 = ((-(x_1054) * x_1057) + x_1059);
  let x_1061 : f32 = u_xlat15;
  u_xlat15 = clamp(x_1061, 0.0f, 1.0f);
  let x_1063 : f32 = u_xlat15;
  let x_1064 : f32 = u_xlat10;
  u_xlat10 = (x_1063 + x_1064);
  let x_1066 : f32 = u_xlat10;
  let x_1068 : f32 = x_43.gSampleWeightTable[2i].w;
  u_xlat10 = (x_1066 * x_1068);
  let x_1070 : f32 = u_xlat10;
  let x_1073 : f32 = u_xlat5.x;
  u_xlat5.x = ((x_1070 * 0.5f) + x_1073);
  let x_1077 : i32 = u_xlati4.z;
  let x_1079 : u32 = TGSM0[x_1077].value[0i];
  u_xlat10 = bitcast<f32>(x_1079);
  let x_1081 : f32 = u_xlat10;
  let x_1083 : f32 = u_xlat1.y;
  let x_1086 : f32 = u_xlat11.y;
  u_xlat10 = ((x_1081 * x_1083) + -(x_1086));
  let x_1089 : f32 = u_xlat10;
  let x_1091 : f32 = x_43.AdditionalParams.x;
  u_xlat15 = (x_1089 * x_1091);
  let x_1093 : f32 = u_xlat15;
  u_xlat15 = clamp(x_1093, 0.0f, 1.0f);
  let x_1096 : i32 = u_xlati4.y;
  let x_1098 : u32 = TGSM0[x_1096].value[0i];
  u_xlat1.x = bitcast<f32>(x_1098);
  let x_1102 : i32 = u_xlati4.w;
  let x_1104 : u32 = TGSM0[x_1102].value[0i];
  u_xlat11.x = bitcast<f32>(x_1104);
  let x_1108 : f32 = u_xlat11.x;
  let x_1110 : f32 = u_xlat1.y;
  let x_1113 : f32 = u_xlat11.y;
  u_xlat11.x = ((x_1108 * x_1110) + -(x_1113));
  let x_1118 : f32 = u_xlat1.x;
  let x_1120 : f32 = u_xlat1.y;
  let x_1123 : f32 = u_xlat11.y;
  u_xlat1.x = ((x_1118 * x_1120) + -(x_1123));
  let x_1127 : f32 = u_xlat15;
  let x_1129 : f32 = u_xlat1.x;
  u_xlat2.x = max(x_1127, x_1129);
  let x_1133 : f32 = u_xlat1.x;
  let x_1135 : f32 = x_43.AdditionalParams.x;
  u_xlat1.x = (x_1133 * x_1135);
  let x_1139 : f32 = u_xlat1.x;
  u_xlat1.x = clamp(x_1139, 0.0f, 1.0f);
  let x_1143 : f32 = u_xlat2.x;
  u_xlat2.x = min(x_1143, 1.0f);
  let x_1146 : f32 = u_xlat10;
  let x_1148 : f32 = u_xlat1.x;
  u_xlat10 = max(x_1146, x_1148);
  let x_1150 : f32 = u_xlat10;
  u_xlat10 = min(x_1150, 1.0f);
  let x_1152 : f32 = u_xlat10;
  let x_1154 : f32 = u_xlat2.x;
  u_xlat10 = (x_1152 + x_1154);
  let x_1157 : f32 = u_xlat1.x;
  let x_1159 : f32 = u_xlat15;
  let x_1161 : f32 = u_xlat10;
  u_xlat10 = ((-(x_1157) * x_1159) + x_1161);
  let x_1163 : f32 = u_xlat10;
  u_xlat10 = clamp(x_1163, 0.0f, 1.0f);
  let x_1165 : vec2<i32> = u_xlati0;
  u_xlati4 = (vec4<i32>(x_1165.x, x_1165.x, x_1165.x, x_1165.x) + vec4<i32>(74i, 334i, 194i, 322i));
  let x_1174 : i32 = u_xlati4.x;
  let x_1176 : u32 = TGSM0[x_1174].value[0i];
  u_xlat15 = bitcast<f32>(x_1176);
  let x_1178 : f32 = u_xlat15;
  let x_1180 : f32 = u_xlat1.y;
  let x_1183 : f32 = u_xlat11.y;
  u_xlat15 = ((x_1178 * x_1180) + -(x_1183));
  let x_1186 : f32 = u_xlat15;
  let x_1188 : f32 = x_43.AdditionalParams.x;
  u_xlat1.x = (x_1186 * x_1188);
  let x_1192 : f32 = u_xlat1.x;
  u_xlat1.x = clamp(x_1192, 0.0f, 1.0f);
  let x_1196 : f32 = u_xlat1.x;
  let x_1198 : f32 = u_xlat11.x;
  u_xlat2.x = max(x_1196, x_1198);
  let x_1202 : f32 = u_xlat11.x;
  let x_1204 : f32 = x_43.AdditionalParams.x;
  u_xlat11.x = (x_1202 * x_1204);
  let x_1208 : f32 = u_xlat11.x;
  u_xlat11.x = clamp(x_1208, 0.0f, 1.0f);
  let x_1212 : f32 = u_xlat2.x;
  u_xlat2.x = min(x_1212, 1.0f);
  let x_1215 : f32 = u_xlat15;
  let x_1217 : f32 = u_xlat11.x;
  u_xlat15 = max(x_1215, x_1217);
  let x_1219 : f32 = u_xlat15;
  u_xlat15 = min(x_1219, 1.0f);
  let x_1221 : f32 = u_xlat15;
  let x_1223 : f32 = u_xlat2.x;
  u_xlat15 = (x_1221 + x_1223);
  let x_1226 : f32 = u_xlat11.x;
  let x_1229 : f32 = u_xlat1.x;
  let x_1231 : f32 = u_xlat15;
  u_xlat15 = ((-(x_1226) * x_1229) + x_1231);
  let x_1233 : f32 = u_xlat15;
  u_xlat15 = clamp(x_1233, 0.0f, 1.0f);
  let x_1235 : f32 = u_xlat15;
  let x_1236 : f32 = u_xlat10;
  u_xlat10 = (x_1235 + x_1236);
  let x_1239 : i32 = u_xlati4.y;
  let x_1241 : u32 = TGSM0[x_1239].value[0i];
  u_xlat15 = bitcast<f32>(x_1241);
  let x_1243 : f32 = u_xlat15;
  let x_1245 : f32 = u_xlat1.y;
  let x_1248 : f32 = u_xlat11.y;
  u_xlat15 = ((x_1243 * x_1245) + -(x_1248));
  let x_1252 : i32 = u_xlati4.z;
  let x_1254 : u32 = TGSM0[x_1252].value[0i];
  u_xlat1.x = bitcast<f32>(x_1254);
  let x_1258 : i32 = u_xlati4.w;
  let x_1260 : u32 = TGSM0[x_1258].value[0i];
  u_xlat11.x = bitcast<f32>(x_1260);
  let x_1264 : f32 = u_xlat11.x;
  let x_1266 : f32 = u_xlat1.y;
  let x_1269 : f32 = u_xlat11.y;
  u_xlat11.x = ((x_1264 * x_1266) + -(x_1269));
  let x_1274 : f32 = u_xlat1.x;
  let x_1276 : f32 = u_xlat1.y;
  let x_1279 : f32 = u_xlat11.y;
  u_xlat1.x = ((x_1274 * x_1276) + -(x_1279));
  let x_1284 : f32 = u_xlat1.x;
  let x_1286 : f32 = x_43.AdditionalParams.x;
  u_xlat2.x = (x_1284 * x_1286);
  let x_1290 : f32 = u_xlat2.x;
  u_xlat2.x = clamp(x_1290, 0.0f, 1.0f);
  let x_1294 : f32 = u_xlat15;
  let x_1296 : f32 = u_xlat2.x;
  u_xlat7 = max(x_1294, x_1296);
  let x_1298 : f32 = u_xlat15;
  let x_1300 : f32 = x_43.AdditionalParams.x;
  u_xlat15 = (x_1298 * x_1300);
  let x_1302 : f32 = u_xlat15;
  u_xlat15 = clamp(x_1302, 0.0f, 1.0f);
  let x_1304 : f32 = u_xlat7;
  u_xlat7 = min(x_1304, 1.0f);
  let x_1306 : f32 = u_xlat15;
  let x_1308 : f32 = u_xlat1.x;
  u_xlat1.x = max(x_1306, x_1308);
  let x_1312 : f32 = u_xlat1.x;
  u_xlat1.x = min(x_1312, 1.0f);
  let x_1316 : f32 = u_xlat1.x;
  let x_1317 : f32 = u_xlat7;
  u_xlat1.x = (x_1316 + x_1317);
  let x_1320 : f32 = u_xlat15;
  let x_1323 : f32 = u_xlat2.x;
  let x_1326 : f32 = u_xlat1.x;
  u_xlat15 = ((-(x_1320) * x_1323) + x_1326);
  let x_1328 : f32 = u_xlat15;
  u_xlat15 = clamp(x_1328, 0.0f, 1.0f);
  let x_1330 : f32 = u_xlat15;
  let x_1331 : f32 = u_xlat10;
  u_xlat10 = (x_1330 + x_1331);
  let x_1333 : vec2<i32> = u_xlati0;
  u_xlati4 = (vec4<i32>(x_1333.x, x_1333.x, x_1333.x, x_1333.x) + vec4<i32>(206i, 524i, 4i, 516i));
  let x_1342 : i32 = u_xlati4.x;
  let x_1344 : u32 = TGSM0[x_1342].value[0i];
  u_xlat15 = bitcast<f32>(x_1344);
  let x_1346 : f32 = u_xlat15;
  let x_1348 : f32 = u_xlat1.y;
  let x_1351 : f32 = u_xlat11.y;
  u_xlat15 = ((x_1346 * x_1348) + -(x_1351));
  let x_1354 : f32 = u_xlat15;
  let x_1356 : f32 = x_43.AdditionalParams.x;
  u_xlat1.x = (x_1354 * x_1356);
  let x_1360 : f32 = u_xlat1.x;
  u_xlat1.x = clamp(x_1360, 0.0f, 1.0f);
  let x_1364 : f32 = u_xlat1.x;
  let x_1366 : f32 = u_xlat11.x;
  u_xlat6.x = max(x_1364, x_1366);
  let x_1370 : f32 = u_xlat11.x;
  let x_1372 : f32 = x_43.AdditionalParams.x;
  u_xlat11.x = (x_1370 * x_1372);
  let x_1376 : f32 = u_xlat11.x;
  u_xlat11.x = clamp(x_1376, 0.0f, 1.0f);
  let x_1380 : f32 = u_xlat6.x;
  u_xlat6.x = min(x_1380, 1.0f);
  let x_1383 : f32 = u_xlat15;
  let x_1385 : f32 = u_xlat11.x;
  u_xlat15 = max(x_1383, x_1385);
  let x_1387 : f32 = u_xlat15;
  u_xlat15 = min(x_1387, 1.0f);
  let x_1389 : f32 = u_xlat15;
  let x_1391 : f32 = u_xlat6.x;
  u_xlat15 = (x_1389 + x_1391);
  let x_1394 : f32 = u_xlat11.x;
  let x_1397 : f32 = u_xlat1.x;
  let x_1399 : f32 = u_xlat15;
  u_xlat15 = ((-(x_1394) * x_1397) + x_1399);
  let x_1401 : f32 = u_xlat15;
  u_xlat15 = clamp(x_1401, 0.0f, 1.0f);
  let x_1403 : f32 = u_xlat15;
  let x_1404 : f32 = u_xlat10;
  u_xlat10 = (x_1403 + x_1404);
  let x_1406 : f32 = u_xlat10;
  let x_1408 : f32 = x_43.gSampleWeightTable[1i].z;
  u_xlat10 = (x_1406 * x_1408);
  let x_1410 : f32 = u_xlat10;
  let x_1414 : f32 = u_xlat5.x;
  u_xlat5.x = ((x_1410 * 0.25f) + x_1414);
  let x_1418 : i32 = u_xlati4.y;
  let x_1420 : u32 = TGSM0[x_1418].value[0i];
  u_xlat10 = bitcast<f32>(x_1420);
  let x_1422 : f32 = u_xlat10;
  let x_1424 : f32 = u_xlat2.z;
  let x_1427 : f32 = u_xlat3.z;
  u_xlat10 = ((x_1422 * x_1424) + -(x_1427));
  let x_1431 : i32 = u_xlati4.z;
  let x_1433 : u32 = TGSM0[x_1431].value[0i];
  u_xlat15 = bitcast<f32>(x_1433);
  let x_1436 : i32 = u_xlati4.w;
  let x_1438 : u32 = TGSM0[x_1436].value[0i];
  u_xlat1.x = bitcast<f32>(x_1438);
  let x_1442 : f32 = u_xlat1.x;
  let x_1444 : f32 = u_xlat2.z;
  let x_1447 : f32 = u_xlat3.z;
  u_xlat1.x = ((x_1442 * x_1444) + -(x_1447));
  let x_1451 : f32 = u_xlat15;
  let x_1453 : f32 = u_xlat2.z;
  let x_1456 : f32 = u_xlat3.z;
  u_xlat15 = ((x_1451 * x_1453) + -(x_1456));
  let x_1459 : f32 = u_xlat15;
  let x_1461 : f32 = x_43.AdditionalParams.x;
  u_xlat6.x = (x_1459 * x_1461);
  let x_1465 : f32 = u_xlat6.x;
  u_xlat6.x = clamp(x_1465, 0.0f, 1.0f);
  let x_1468 : f32 = u_xlat10;
  let x_1470 : f32 = u_xlat6.x;
  u_xlat11.x = max(x_1468, x_1470);
  let x_1473 : f32 = u_xlat10;
  let x_1475 : f32 = x_43.AdditionalParams.x;
  u_xlat10 = (x_1473 * x_1475);
  let x_1477 : f32 = u_xlat10;
  u_xlat10 = clamp(x_1477, 0.0f, 1.0f);
  let x_1480 : f32 = u_xlat11.x;
  u_xlat11.x = min(x_1480, 1.0f);
  let x_1483 : f32 = u_xlat10;
  let x_1484 : f32 = u_xlat15;
  u_xlat15 = max(x_1483, x_1484);
  let x_1486 : f32 = u_xlat15;
  u_xlat15 = min(x_1486, 1.0f);
  let x_1488 : f32 = u_xlat15;
  let x_1490 : f32 = u_xlat11.x;
  u_xlat15 = (x_1488 + x_1490);
  let x_1492 : f32 = u_xlat10;
  let x_1495 : f32 = u_xlat6.x;
  let x_1497 : f32 = u_xlat15;
  u_xlat10 = ((-(x_1492) * x_1495) + x_1497);
  let x_1499 : f32 = u_xlat10;
  u_xlat10 = clamp(x_1499, 0.0f, 1.0f);
  let x_1501 : vec2<i32> = u_xlati0;
  u_xlati4 = (vec4<i32>(x_1501.x, x_1501.x, x_1501.x, x_1501.x) + vec4<i32>(12i, 400i, 128i, 384i));
  let x_1510 : i32 = u_xlati0.x;
  u_xlati0.x = (x_1510 + 144i);
  let x_1515 : i32 = u_xlati0.x;
  let x_1517 : u32 = TGSM0[x_1515].value[0i];
  u_xlat0.x = bitcast<f32>(x_1517);
  let x_1521 : f32 = u_xlat0.x;
  let x_1523 : f32 = u_xlat2.z;
  let x_1526 : f32 = u_xlat3.z;
  u_xlat0.x = ((x_1521 * x_1523) + -(x_1526));
  let x_1531 : i32 = u_xlati4.x;
  let x_1533 : u32 = TGSM0[x_1531].value[0i];
  u_xlat15 = bitcast<f32>(x_1533);
  let x_1535 : f32 = u_xlat15;
  let x_1537 : f32 = u_xlat2.z;
  let x_1540 : f32 = u_xlat3.z;
  u_xlat15 = ((x_1535 * x_1537) + -(x_1540));
  let x_1543 : f32 = u_xlat15;
  let x_1545 : f32 = x_43.AdditionalParams.x;
  u_xlat6.x = (x_1543 * x_1545);
  let x_1549 : f32 = u_xlat6.x;
  u_xlat6.x = clamp(x_1549, 0.0f, 1.0f);
  let x_1553 : f32 = u_xlat6.x;
  let x_1555 : f32 = u_xlat1.x;
  u_xlat11.x = max(x_1553, x_1555);
  let x_1559 : f32 = u_xlat1.x;
  let x_1561 : f32 = x_43.AdditionalParams.x;
  u_xlat1.x = (x_1559 * x_1561);
  let x_1565 : f32 = u_xlat1.x;
  u_xlat1.x = clamp(x_1565, 0.0f, 1.0f);
  let x_1569 : f32 = u_xlat11.x;
  u_xlat11.x = min(x_1569, 1.0f);
  let x_1572 : f32 = u_xlat15;
  let x_1574 : f32 = u_xlat1.x;
  u_xlat15 = max(x_1572, x_1574);
  let x_1576 : f32 = u_xlat15;
  u_xlat15 = min(x_1576, 1.0f);
  let x_1578 : f32 = u_xlat15;
  let x_1580 : f32 = u_xlat11.x;
  u_xlat15 = (x_1578 + x_1580);
  let x_1583 : f32 = u_xlat1.x;
  let x_1586 : f32 = u_xlat6.x;
  let x_1588 : f32 = u_xlat15;
  u_xlat15 = ((-(x_1583) * x_1586) + x_1588);
  let x_1590 : f32 = u_xlat15;
  u_xlat15 = clamp(x_1590, 0.0f, 1.0f);
  let x_1592 : f32 = u_xlat15;
  let x_1593 : f32 = u_xlat10;
  u_xlat10 = (x_1592 + x_1593);
  let x_1596 : i32 = u_xlati4.y;
  let x_1598 : u32 = TGSM0[x_1596].value[0i];
  u_xlat15 = bitcast<f32>(x_1598);
  let x_1600 : f32 = u_xlat15;
  let x_1602 : f32 = u_xlat2.z;
  let x_1605 : f32 = u_xlat3.z;
  u_xlat15 = ((x_1600 * x_1602) + -(x_1605));
  let x_1609 : i32 = u_xlati4.z;
  let x_1611 : u32 = TGSM0[x_1609].value[0i];
  u_xlat1.x = bitcast<f32>(x_1611);
  let x_1615 : i32 = u_xlati4.w;
  let x_1617 : u32 = TGSM0[x_1615].value[0i];
  u_xlat6.x = bitcast<f32>(x_1617);
  let x_1621 : f32 = u_xlat6.x;
  let x_1623 : f32 = u_xlat2.z;
  let x_1626 : f32 = u_xlat3.z;
  u_xlat6.x = ((x_1621 * x_1623) + -(x_1626));
  let x_1631 : f32 = u_xlat1.x;
  let x_1633 : f32 = u_xlat2.z;
  let x_1636 : f32 = u_xlat3.z;
  u_xlat1.x = ((x_1631 * x_1633) + -(x_1636));
  let x_1641 : f32 = u_xlat1.x;
  let x_1643 : f32 = x_43.AdditionalParams.x;
  u_xlat11.x = (x_1641 * x_1643);
  let x_1647 : f32 = u_xlat11.x;
  u_xlat11.x = clamp(x_1647, 0.0f, 1.0f);
  let x_1650 : f32 = u_xlat15;
  let x_1652 : f32 = u_xlat11.x;
  u_xlat1.w = max(x_1650, x_1652);
  let x_1655 : f32 = u_xlat15;
  let x_1657 : f32 = x_43.AdditionalParams.x;
  u_xlat15 = (x_1655 * x_1657);
  let x_1659 : f32 = u_xlat15;
  u_xlat15 = clamp(x_1659, 0.0f, 1.0f);
  let x_1661 : f32 = u_xlat15;
  let x_1663 : f32 = u_xlat1.x;
  u_xlat1.x = max(x_1661, x_1663);
  let x_1666 : vec4<f32> = u_xlat1;
  let x_1668 : vec2<f32> = min(vec2<f32>(x_1666.x, x_1666.w), vec2<f32>(1.0f, 1.0f));
  let x_1669 : vec4<f32> = u_xlat1;
  u_xlat1 = vec4<f32>(x_1668.x, x_1669.y, x_1669.z, x_1668.y);
  let x_1672 : f32 = u_xlat1.x;
  let x_1674 : f32 = u_xlat1.w;
  u_xlat1.x = (x_1672 + x_1674);
  let x_1677 : f32 = u_xlat15;
  let x_1680 : f32 = u_xlat11.x;
  let x_1683 : f32 = u_xlat1.x;
  u_xlat15 = ((-(x_1677) * x_1680) + x_1683);
  let x_1685 : f32 = u_xlat15;
  u_xlat15 = clamp(x_1685, 0.0f, 1.0f);
  let x_1687 : f32 = u_xlat15;
  let x_1688 : f32 = u_xlat10;
  u_xlat10 = (x_1687 + x_1688);
  let x_1691 : f32 = u_xlat0.x;
  let x_1693 : f32 = x_43.AdditionalParams.x;
  u_xlat15 = (x_1691 * x_1693);
  let x_1695 : f32 = u_xlat15;
  u_xlat15 = clamp(x_1695, 0.0f, 1.0f);
  let x_1697 : f32 = u_xlat15;
  let x_1699 : f32 = u_xlat6.x;
  u_xlat1.x = max(x_1697, x_1699);
  let x_1703 : f32 = u_xlat6.x;
  let x_1705 : f32 = x_43.AdditionalParams.x;
  u_xlat6.x = (x_1703 * x_1705);
  let x_1709 : f32 = u_xlat6.x;
  u_xlat6.x = clamp(x_1709, 0.0f, 1.0f);
  let x_1713 : f32 = u_xlat1.x;
  u_xlat1.x = min(x_1713, 1.0f);
  let x_1717 : f32 = u_xlat0.x;
  let x_1719 : f32 = u_xlat6.x;
  u_xlat0.x = max(x_1717, x_1719);
  let x_1723 : f32 = u_xlat0.x;
  u_xlat0.x = min(x_1723, 1.0f);
  let x_1727 : f32 = u_xlat0.x;
  let x_1729 : f32 = u_xlat1.x;
  u_xlat0.x = (x_1727 + x_1729);
  let x_1733 : f32 = u_xlat6.x;
  let x_1735 : f32 = u_xlat15;
  let x_1738 : f32 = u_xlat0.x;
  u_xlat0.x = ((-(x_1733) * x_1735) + x_1738);
  let x_1742 : f32 = u_xlat0.x;
  u_xlat0.x = clamp(x_1742, 0.0f, 1.0f);
  let x_1746 : f32 = u_xlat0.x;
  let x_1747 : f32 = u_xlat10;
  u_xlat0.x = (x_1746 + x_1747);
  let x_1751 : f32 = u_xlat0.x;
  let x_1753 : f32 = x_43.gSampleWeightTable[2i].z;
  u_xlat0.x = (x_1751 * x_1753);
  let x_1757 : f32 = u_xlat0.x;
  let x_1760 : f32 = u_xlat5.x;
  u_xlat0.x = ((x_1757 * 0.25f) + x_1760);
  let x_1764 : f32 = u_xlat0.x;
  u_xlat0.x = (x_1764 + -1.0f);
  let x_1769 : f32 = x_43.AdditionalParams.y;
  let x_1771 : f32 = u_xlat0.x;
  u_xlat0.x = ((x_1769 * x_1771) + 1.0f);
  let x_1779 : vec3<u32> = gl_GlobalInvocationID;
  let x_1782 : vec4<f32> = u_xlat0;
  textureStore(Occlusion_origX0X, bitcast<vec2<i32>>(vec2<u32>(x_1779.x, x_1779.y)), vec4<f32>(x_1782.x, x_1782.x, x_1782.x, x_1782.x));
  return;
}

@compute @workgroup_size(16i, 16i, 1i)
fn main(@builtin(local_invocation_id) gl_LocalInvocationID_param : vec3<u32>, @builtin(global_invocation_id) gl_GlobalInvocationID_param : vec3<u32>) {
  gl_LocalInvocationID = gl_LocalInvocationID_param;
  gl_GlobalInvocationID = gl_GlobalInvocationID_param;
  main_1();
}

