type Arr = array<mat4x4<f32>, 4u>;

struct PGlobals {
  x_WorldSpaceCameraPos : vec3<f32>,
  @size(4)
  padding : u32,
  unity_OcclusionMaskSelector : vec4<f32>,
  unity_WorldToShadow : Arr,
  x_LightShadowData : vec4<f32>,
  unity_ShadowFadeCenterAndType : vec4<f32>,
  unity_MatrixV : mat4x4<f32>,
  unity_ProbeVolumeParams : vec4<f32>,
  unity_ProbeVolumeWorldToObject : mat4x4<f32>,
  unity_ProbeVolumeSizeInv : vec3<f32>,
  @size(4)
  padding_1 : u32,
  unity_ProbeVolumeMin : vec3<f32>,
  @size(4)
  padding_2 : u32,
  x_LightColor0 : vec4<f32>,
  x_ShadowMapTexture_TexelSize : vec4<f32>,
  x_Color : vec4<f32>,
  x_BumpScale : f32,
  x_Metallic : f32,
  x_Glossiness : f32,
  @size(4)
  padding_3 : u32,
  unity_WorldToLight : mat4x4<f32>,
}

@group(0) @binding(0) var x_MainTex : texture_2d<f32>;

@group(0) @binding(8) var sampler_MainTex : sampler;

var<private> vs_TEXCOORD0 : vec4<f32>;

@group(1) @binding(0) var<uniform> x_36 : PGlobals;

@group(0) @binding(1) var x_BumpMap : texture_2d<f32>;

@group(0) @binding(9) var sampler_BumpMap : sampler;

var<private> vs_TEXCOORD3 : vec4<f32>;

var<private> vs_TEXCOORD2 : vec4<f32>;

var<private> vs_TEXCOORD4 : vec4<f32>;

var<private> vs_TEXCOORD1 : vec4<f32>;

var<private> vs_TEXCOORD5 : vec3<f32>;

@group(0) @binding(4) var unity_ProbeVolumeSH : texture_3d<f32>;

@group(0) @binding(6) var samplerunity_ProbeVolumeSH : sampler;

@group(0) @binding(5) var x_ShadowMapTexture : texture_depth_2d;

@group(0) @binding(7) var sampler_ShadowMapTexture : sampler_comparison;

@group(0) @binding(2) var x_LightTexture0 : texture_2d<f32>;

@group(0) @binding(10) var sampler_LightTexture0 : sampler;

@group(0) @binding(3) var x_LightTextureB0 : texture_2d<f32>;

@group(0) @binding(11) var sampler_LightTextureB0 : sampler;

var<private> SV_Target0 : vec4<f32>;

var<private> gl_FragCoord : vec4<f32>;

fn main_1() {
  var u_xlat0 : vec3<f32>;
  var u_xlat1 : vec3<f32>;
  var u_xlat33 : f32;
  var u_xlat2 : vec4<f32>;
  var u_xlat13 : vec3<f32>;
  var u_xlat3 : vec3<f32>;
  var u_xlat4 : vec4<f32>;
  var u_xlat5 : vec4<f32>;
  var u_xlat6 : vec4<f32>;
  var u_xlat34 : f32;
  var u_xlatb34 : bool;
  var x_339 : vec3<f32>;
  var u_xlat35 : f32;
  var u_xlatb35 : bool;
  var u_xlat7 : vec4<f32>;
  var u_xlat8 : vec4<f32>;
  var u_xlat28 : vec2<f32>;
  var u_xlat9 : vec4<f32>;
  var u_xlat10 : vec4<f32>;
  var txVec0 : vec3<f32>;
  var txVec1 : vec3<f32>;
  var u_xlat36 : f32;
  var txVec2 : vec3<f32>;
  var txVec3 : vec3<f32>;
  var u_xlat24 : f32;
  var u_xlat14 : f32;
  var u_xlat25 : f32;
  var u_xlat_precise_vec4 : vec4<f32>;
  var u_xlat_precise_ivec4 : vec4<i32>;
  var u_xlat_precise_bvec4 : vec4<bool>;
  var u_xlat_precise_uvec4 : vec4<u32>;
  let x_24 : vec4<f32> = vs_TEXCOORD0;
  let x_26 : vec4<f32> = textureSample(x_MainTex, sampler_MainTex, vec2<f32>(x_24.x, x_24.y));
  u_xlat0 = vec3<f32>(x_26.x, x_26.y, x_26.z);
  let x_29 : vec3<f32> = u_xlat0;
  let x_41 : vec4<f32> = x_36.x_Color;
  u_xlat1 = (x_29 * vec3<f32>(x_41.x, x_41.y, x_41.z));
  let x_45 : vec4<f32> = x_36.x_Color;
  let x_47 : vec3<f32> = u_xlat0;
  u_xlat0 = ((vec3<f32>(x_45.x, x_45.y, x_45.z) * x_47) + vec3<f32>(-0.039999999f, -0.039999999f, -0.039999999f));
  let x_55 : f32 = x_36.x_Metallic;
  let x_57 : f32 = x_36.x_Metallic;
  let x_59 : f32 = x_36.x_Metallic;
  let x_60 : vec3<f32> = vec3<f32>(x_55, x_57, x_59);
  let x_65 : vec3<f32> = u_xlat0;
  u_xlat0 = ((vec3<f32>(x_60.x, x_60.y, x_60.z) * x_65) + vec3<f32>(0.039999999f, 0.039999999f, 0.039999999f));
  let x_73 : f32 = x_36.x_Metallic;
  u_xlat33 = ((-(x_73) * 0.959999979f) + 0.959999979f);
  let x_78 : f32 = u_xlat33;
  let x_80 : vec3<f32> = u_xlat1;
  u_xlat1 = (vec3<f32>(x_78, x_78, x_78) * x_80);
  let x_89 : vec4<f32> = vs_TEXCOORD0;
  let x_91 : vec4<f32> = textureSample(x_BumpMap, sampler_BumpMap, vec2<f32>(x_89.x, x_89.y));
  let x_92 : vec3<f32> = vec3<f32>(x_91.x, x_91.y, x_91.w);
  let x_93 : vec4<f32> = u_xlat2;
  u_xlat2 = vec4<f32>(x_92.x, x_92.y, x_92.z, x_93.w);
  let x_97 : f32 = u_xlat2.z;
  let x_100 : f32 = u_xlat2.x;
  u_xlat2.x = (x_97 * x_100);
  let x_103 : vec4<f32> = u_xlat2;
  let x_110 : vec2<f32> = ((vec2<f32>(x_103.x, x_103.y) * vec2<f32>(2.0f, 2.0f)) + vec2<f32>(-1.0f, -1.0f));
  let x_111 : vec4<f32> = u_xlat2;
  u_xlat2 = vec4<f32>(x_110.x, x_110.y, x_111.z, x_111.w);
  let x_113 : vec4<f32> = u_xlat2;
  let x_117 : f32 = x_36.x_BumpScale;
  let x_119 : vec2<f32> = (vec2<f32>(x_113.x, x_113.y) * vec2<f32>(x_117, x_117));
  let x_120 : vec4<f32> = u_xlat2;
  u_xlat2 = vec4<f32>(x_119.x, x_119.y, x_120.z, x_120.w);
  let x_122 : vec4<f32> = u_xlat2;
  let x_124 : vec4<f32> = u_xlat2;
  u_xlat33 = dot(vec2<f32>(x_122.x, x_122.y), vec2<f32>(x_124.x, x_124.y));
  let x_127 : f32 = u_xlat33;
  u_xlat33 = min(x_127, 1.0f);
  let x_130 : f32 = u_xlat33;
  u_xlat33 = (-(x_130) + 1.0f);
  let x_133 : f32 = u_xlat33;
  u_xlat33 = sqrt(x_133);
  let x_136 : vec4<f32> = u_xlat2;
  let x_139 : vec4<f32> = vs_TEXCOORD3;
  u_xlat13 = (vec3<f32>(x_136.y, x_136.y, x_136.y) * vec3<f32>(x_139.x, x_139.y, x_139.z));
  let x_143 : vec4<f32> = vs_TEXCOORD2;
  let x_145 : vec4<f32> = u_xlat2;
  let x_148 : vec3<f32> = u_xlat13;
  let x_149 : vec3<f32> = ((vec3<f32>(x_143.x, x_143.y, x_143.z) * vec3<f32>(x_145.x, x_145.x, x_145.x)) + x_148);
  let x_150 : vec4<f32> = u_xlat2;
  u_xlat2 = vec4<f32>(x_149.x, x_149.y, x_149.z, x_150.w);
  let x_153 : vec4<f32> = vs_TEXCOORD4;
  let x_155 : f32 = u_xlat33;
  let x_158 : vec4<f32> = u_xlat2;
  let x_160 : vec3<f32> = ((vec3<f32>(x_153.x, x_153.y, x_153.z) * vec3<f32>(x_155, x_155, x_155)) + vec3<f32>(x_158.x, x_158.y, x_158.z));
  let x_161 : vec4<f32> = u_xlat2;
  u_xlat2 = vec4<f32>(x_160.x, x_160.y, x_160.z, x_161.w);
  let x_163 : vec4<f32> = u_xlat2;
  let x_165 : vec4<f32> = u_xlat2;
  u_xlat33 = dot(vec3<f32>(x_163.x, x_163.y, x_163.z), vec3<f32>(x_165.x, x_165.y, x_165.z));
  let x_168 : f32 = u_xlat33;
  u_xlat33 = inverseSqrt(x_168);
  let x_170 : f32 = u_xlat33;
  let x_172 : vec4<f32> = u_xlat2;
  let x_174 : vec3<f32> = (vec3<f32>(x_170, x_170, x_170) * vec3<f32>(x_172.x, x_172.y, x_172.z));
  let x_175 : vec4<f32> = u_xlat2;
  u_xlat2 = vec4<f32>(x_174.x, x_174.y, x_174.z, x_175.w);
  let x_178 : vec4<f32> = vs_TEXCOORD1;
  let x_180 : vec4<f32> = vs_TEXCOORD1;
  u_xlat33 = dot(vec3<f32>(x_178.x, x_178.y, x_178.z), vec3<f32>(x_180.x, x_180.y, x_180.z));
  let x_183 : f32 = u_xlat33;
  u_xlat33 = inverseSqrt(x_183);
  let x_186 : f32 = u_xlat33;
  let x_188 : vec4<f32> = vs_TEXCOORD1;
  u_xlat3 = (vec3<f32>(x_186, x_186, x_186) * vec3<f32>(x_188.x, x_188.y, x_188.z));
  let x_194 : vec3<f32> = vs_TEXCOORD5;
  let x_199 : vec4<f32> = x_36.unity_WorldToLight[1i];
  u_xlat4 = (vec4<f32>(x_194.y, x_194.y, x_194.y, x_194.y) * x_199);
  let x_203 : vec4<f32> = x_36.unity_WorldToLight[0i];
  let x_204 : vec3<f32> = vs_TEXCOORD5;
  let x_207 : vec4<f32> = u_xlat4;
  u_xlat4 = ((x_203 * vec4<f32>(x_204.x, x_204.x, x_204.x, x_204.x)) + x_207);
  let x_211 : vec4<f32> = x_36.unity_WorldToLight[2i];
  let x_212 : vec3<f32> = vs_TEXCOORD5;
  let x_215 : vec4<f32> = u_xlat4;
  u_xlat4 = ((x_211 * vec4<f32>(x_212.z, x_212.z, x_212.z, x_212.z)) + x_215);
  let x_217 : vec4<f32> = u_xlat4;
  let x_220 : vec4<f32> = x_36.unity_WorldToLight[3i];
  u_xlat4 = (x_217 + x_220);
  let x_223 : vec3<f32> = vs_TEXCOORD5;
  let x_227 : vec3<f32> = x_36.x_WorldSpaceCameraPos;
  let x_228 : vec3<f32> = (-(x_223) + x_227);
  let x_229 : vec4<f32> = u_xlat5;
  u_xlat5 = vec4<f32>(x_228.x, x_228.y, x_228.z, x_229.w);
  let x_234 : f32 = x_36.unity_MatrixV[0i].z;
  u_xlat6.x = x_234;
  let x_237 : f32 = x_36.unity_MatrixV[1i].z;
  u_xlat6.y = x_237;
  let x_241 : f32 = x_36.unity_MatrixV[2i].z;
  u_xlat6.z = x_241;
  let x_243 : vec4<f32> = u_xlat5;
  let x_245 : vec4<f32> = u_xlat6;
  u_xlat33 = dot(vec3<f32>(x_243.x, x_243.y, x_243.z), vec3<f32>(x_245.x, x_245.y, x_245.z));
  let x_248 : vec3<f32> = vs_TEXCOORD5;
  let x_251 : vec4<f32> = x_36.unity_ShadowFadeCenterAndType;
  let x_254 : vec3<f32> = (x_248 + -(vec3<f32>(x_251.x, x_251.y, x_251.z)));
  let x_255 : vec4<f32> = u_xlat5;
  u_xlat5 = vec4<f32>(x_254.x, x_254.y, x_254.z, x_255.w);
  let x_258 : vec4<f32> = u_xlat5;
  let x_260 : vec4<f32> = u_xlat5;
  u_xlat34 = dot(vec3<f32>(x_258.x, x_258.y, x_258.z), vec3<f32>(x_260.x, x_260.y, x_260.z));
  let x_263 : f32 = u_xlat34;
  u_xlat34 = sqrt(x_263);
  let x_265 : f32 = u_xlat33;
  let x_267 : f32 = u_xlat34;
  u_xlat34 = (-(x_265) + x_267);
  let x_271 : f32 = x_36.unity_ShadowFadeCenterAndType.w;
  let x_272 : f32 = u_xlat34;
  let x_274 : f32 = u_xlat33;
  u_xlat33 = ((x_271 * x_272) + x_274);
  let x_276 : f32 = u_xlat33;
  let x_278 : f32 = x_36.x_LightShadowData.z;
  let x_281 : f32 = x_36.x_LightShadowData.w;
  u_xlat33 = ((x_276 * x_278) + x_281);
  let x_283 : f32 = u_xlat33;
  u_xlat33 = clamp(x_283, 0.0f, 1.0f);
  let x_291 : f32 = x_36.unity_ProbeVolumeParams.x;
  u_xlatb34 = (x_291 == 1.0f);
  let x_293 : bool = u_xlatb34;
  if (x_293) {
    let x_297 : f32 = x_36.unity_ProbeVolumeParams.y;
    u_xlatb34 = (x_297 == 1.0f);
    let x_299 : vec3<f32> = vs_TEXCOORD5;
    let x_303 : vec4<f32> = x_36.unity_ProbeVolumeWorldToObject[1i];
    let x_305 : vec3<f32> = (vec3<f32>(x_299.y, x_299.y, x_299.y) * vec3<f32>(x_303.x, x_303.y, x_303.z));
    let x_306 : vec4<f32> = u_xlat5;
    u_xlat5 = vec4<f32>(x_305.x, x_305.y, x_305.z, x_306.w);
    let x_309 : vec4<f32> = x_36.unity_ProbeVolumeWorldToObject[0i];
    let x_311 : vec3<f32> = vs_TEXCOORD5;
    let x_314 : vec4<f32> = u_xlat5;
    let x_316 : vec3<f32> = ((vec3<f32>(x_309.x, x_309.y, x_309.z) * vec3<f32>(x_311.x, x_311.x, x_311.x)) + vec3<f32>(x_314.x, x_314.y, x_314.z));
    let x_317 : vec4<f32> = u_xlat5;
    u_xlat5 = vec4<f32>(x_316.x, x_316.y, x_316.z, x_317.w);
    let x_320 : vec4<f32> = x_36.unity_ProbeVolumeWorldToObject[2i];
    let x_322 : vec3<f32> = vs_TEXCOORD5;
    let x_325 : vec4<f32> = u_xlat5;
    let x_327 : vec3<f32> = ((vec3<f32>(x_320.x, x_320.y, x_320.z) * vec3<f32>(x_322.z, x_322.z, x_322.z)) + vec3<f32>(x_325.x, x_325.y, x_325.z));
    let x_328 : vec4<f32> = u_xlat5;
    u_xlat5 = vec4<f32>(x_327.x, x_327.y, x_327.z, x_328.w);
    let x_330 : vec4<f32> = u_xlat5;
    let x_333 : vec4<f32> = x_36.unity_ProbeVolumeWorldToObject[3i];
    let x_335 : vec3<f32> = (vec3<f32>(x_330.x, x_330.y, x_330.z) + vec3<f32>(x_333.x, x_333.y, x_333.z));
    let x_336 : vec4<f32> = u_xlat5;
    u_xlat5 = vec4<f32>(x_335.x, x_335.y, x_335.z, x_336.w);
    let x_338 : bool = u_xlatb34;
    if (x_338) {
      let x_342 : vec4<f32> = u_xlat5;
      x_339 = vec3<f32>(x_342.x, x_342.y, x_342.z);
    } else {
      let x_345 : vec3<f32> = vs_TEXCOORD5;
      x_339 = x_345;
    }
    let x_346 : vec3<f32> = x_339;
    let x_347 : vec4<f32> = u_xlat5;
    u_xlat5 = vec4<f32>(x_346.x, x_346.y, x_346.z, x_347.w);
    let x_349 : vec4<f32> = u_xlat5;
    let x_353 : vec3<f32> = x_36.unity_ProbeVolumeMin;
    let x_355 : vec3<f32> = (vec3<f32>(x_349.x, x_349.y, x_349.z) + -(x_353));
    let x_356 : vec4<f32> = u_xlat5;
    u_xlat5 = vec4<f32>(x_355.x, x_355.y, x_355.z, x_356.w);
    let x_358 : vec4<f32> = u_xlat5;
    let x_362 : vec3<f32> = x_36.unity_ProbeVolumeSizeInv;
    let x_363 : vec3<f32> = (vec3<f32>(x_358.x, x_358.y, x_358.z) * x_362);
    let x_364 : vec4<f32> = u_xlat5;
    u_xlat5 = vec4<f32>(x_364.x, x_363.x, x_363.y, x_363.z);
    let x_367 : f32 = u_xlat5.y;
    u_xlat34 = ((x_367 * 0.25f) + 0.75f);
    let x_374 : f32 = x_36.unity_ProbeVolumeParams.z;
    u_xlat35 = ((x_374 * 0.5f) + 0.75f);
    let x_378 : f32 = u_xlat34;
    let x_379 : f32 = u_xlat35;
    u_xlat5.x = max(x_378, x_379);
    let x_390 : vec4<f32> = u_xlat5;
    let x_392 : vec4<f32> = textureSample(unity_ProbeVolumeSH, samplerunity_ProbeVolumeSH, vec3<f32>(x_390.x, x_390.z, x_390.w));
    u_xlat5 = x_392;
  } else {
    u_xlat5.x = 1.0f;
    u_xlat5.y = 1.0f;
    u_xlat5.z = 1.0f;
    u_xlat5.w = 1.0f;
  }
  let x_398 : vec4<f32> = u_xlat5;
  let x_400 : vec4<f32> = x_36.unity_OcclusionMaskSelector;
  u_xlat34 = dot(x_398, x_400);
  let x_402 : f32 = u_xlat34;
  u_xlat34 = clamp(x_402, 0.0f, 1.0f);
  let x_405 : f32 = u_xlat33;
  u_xlatb35 = (x_405 < 0.99000001f);
  let x_408 : bool = u_xlatb35;
  if (x_408) {
    let x_411 : vec3<f32> = vs_TEXCOORD5;
    let x_414 : vec4<f32> = x_36.unity_WorldToShadow[0i][1i];
    u_xlat5 = (vec4<f32>(x_411.y, x_411.y, x_411.y, x_411.y) * x_414);
    let x_417 : vec4<f32> = x_36.unity_WorldToShadow[0i][0i];
    let x_418 : vec3<f32> = vs_TEXCOORD5;
    let x_421 : vec4<f32> = u_xlat5;
    u_xlat5 = ((x_417 * vec4<f32>(x_418.x, x_418.x, x_418.x, x_418.x)) + x_421);
    let x_424 : vec4<f32> = x_36.unity_WorldToShadow[0i][2i];
    let x_425 : vec3<f32> = vs_TEXCOORD5;
    let x_428 : vec4<f32> = u_xlat5;
    u_xlat5 = ((x_424 * vec4<f32>(x_425.z, x_425.z, x_425.z, x_425.z)) + x_428);
    let x_430 : vec4<f32> = u_xlat5;
    let x_432 : vec4<f32> = x_36.unity_WorldToShadow[0i][3i];
    u_xlat5 = (x_430 + x_432);
    let x_434 : vec4<f32> = u_xlat5;
    let x_436 : vec4<f32> = u_xlat5;
    let x_438 : vec3<f32> = (vec3<f32>(x_434.x, x_434.y, x_434.z) / vec3<f32>(x_436.w, x_436.w, x_436.w));
    let x_439 : vec4<f32> = u_xlat5;
    u_xlat5 = vec4<f32>(x_438.x, x_438.y, x_438.z, x_439.w);
    let x_441 : vec4<f32> = u_xlat5;
    let x_445 : vec4<f32> = x_36.x_ShadowMapTexture_TexelSize;
    let x_449 : vec2<f32> = ((vec2<f32>(x_441.x, x_441.y) * vec2<f32>(x_445.z, x_445.w)) + vec2<f32>(0.5f, 0.5f));
    let x_450 : vec4<f32> = u_xlat6;
    u_xlat6 = vec4<f32>(x_449.x, x_449.y, x_450.z, x_450.w);
    let x_452 : vec4<f32> = u_xlat6;
    let x_454 : vec2<f32> = floor(vec2<f32>(x_452.x, x_452.y));
    let x_455 : vec4<f32> = u_xlat6;
    u_xlat6 = vec4<f32>(x_454.x, x_454.y, x_455.z, x_455.w);
    let x_457 : vec4<f32> = u_xlat5;
    let x_460 : vec4<f32> = x_36.x_ShadowMapTexture_TexelSize;
    let x_463 : vec4<f32> = u_xlat6;
    let x_466 : vec2<f32> = ((vec2<f32>(x_457.x, x_457.y) * vec2<f32>(x_460.z, x_460.w)) + -(vec2<f32>(x_463.x, x_463.y)));
    let x_467 : vec4<f32> = u_xlat5;
    u_xlat5 = vec4<f32>(x_466.x, x_466.y, x_467.z, x_467.w);
    let x_470 : vec4<f32> = u_xlat5;
    u_xlat7 = (vec4<f32>(x_470.x, x_470.x, x_470.y, x_470.y) + vec4<f32>(0.5f, 1.0f, 0.5f, 1.0f));
    let x_475 : vec4<f32> = u_xlat7;
    let x_477 : vec4<f32> = u_xlat7;
    let x_479 : vec2<f32> = (vec2<f32>(x_475.x, x_475.z) * vec2<f32>(x_477.x, x_477.z));
    let x_480 : vec4<f32> = u_xlat8;
    u_xlat8 = vec4<f32>(x_479.x, x_480.y, x_480.z, x_479.y);
    let x_484 : vec4<f32> = u_xlat8;
    let x_487 : vec4<f32> = u_xlat5;
    u_xlat28 = ((vec2<f32>(x_484.x, x_484.w) * vec2<f32>(0.5f, 0.5f)) + -(vec2<f32>(x_487.x, x_487.y)));
    let x_491 : vec4<f32> = u_xlat5;
    let x_495 : vec2<f32> = (-(vec2<f32>(x_491.x, x_491.y)) + vec2<f32>(1.0f, 1.0f));
    let x_496 : vec4<f32> = u_xlat7;
    u_xlat7 = vec4<f32>(x_495.x, x_496.y, x_495.y, x_496.w);
    let x_499 : vec4<f32> = u_xlat5;
    let x_502 : vec2<f32> = min(vec2<f32>(x_499.x, x_499.y), vec2<f32>(0.0f, 0.0f));
    let x_503 : vec4<f32> = u_xlat9;
    u_xlat9 = vec4<f32>(x_502.x, x_502.y, x_503.z, x_503.w);
    let x_505 : vec4<f32> = u_xlat9;
    let x_508 : vec4<f32> = u_xlat9;
    let x_511 : vec4<f32> = u_xlat7;
    let x_513 : vec2<f32> = ((-(vec2<f32>(x_505.x, x_505.y)) * vec2<f32>(x_508.x, x_508.y)) + vec2<f32>(x_511.x, x_511.z));
    let x_514 : vec4<f32> = u_xlat7;
    u_xlat7 = vec4<f32>(x_513.x, x_514.y, x_513.y, x_514.w);
    let x_516 : vec4<f32> = u_xlat5;
    let x_518 : vec2<f32> = max(vec2<f32>(x_516.x, x_516.y), vec2<f32>(0.0f, 0.0f));
    let x_519 : vec4<f32> = u_xlat5;
    u_xlat5 = vec4<f32>(x_518.x, x_518.y, x_519.z, x_519.w);
    let x_521 : vec4<f32> = u_xlat5;
    let x_524 : vec4<f32> = u_xlat5;
    let x_527 : vec4<f32> = u_xlat7;
    let x_529 : vec2<f32> = ((-(vec2<f32>(x_521.x, x_521.y)) * vec2<f32>(x_524.x, x_524.y)) + vec2<f32>(x_527.y, x_527.w));
    let x_530 : vec4<f32> = u_xlat5;
    u_xlat5 = vec4<f32>(x_529.x, x_529.y, x_530.z, x_530.w);
    let x_533 : f32 = u_xlat28.x;
    u_xlat9.x = x_533;
    let x_536 : f32 = u_xlat7.x;
    u_xlat9.y = x_536;
    let x_539 : f32 = u_xlat5.x;
    u_xlat9.z = x_539;
    let x_542 : f32 = u_xlat8.x;
    u_xlat9.w = x_542;
    let x_544 : vec4<f32> = u_xlat9;
    u_xlat9 = (x_544 * vec4<f32>(0.444440007f, 0.444440007f, 0.444440007f, 0.222220004f));
    let x_550 : f32 = u_xlat28.y;
    u_xlat8.x = x_550;
    let x_553 : f32 = u_xlat7.z;
    u_xlat8.y = x_553;
    let x_556 : f32 = u_xlat5.y;
    u_xlat8.z = x_556;
    let x_558 : vec4<f32> = u_xlat8;
    u_xlat7 = (x_558 * vec4<f32>(0.444440007f, 0.444440007f, 0.444440007f, 0.222220004f));
    let x_560 : vec4<f32> = u_xlat9;
    let x_562 : vec4<f32> = u_xlat9;
    u_xlat8 = (vec4<f32>(x_560.y, x_560.w, x_560.y, x_560.w) + vec4<f32>(x_562.x, x_562.z, x_562.x, x_562.z));
    let x_566 : vec4<f32> = u_xlat7;
    let x_568 : vec4<f32> = u_xlat7;
    u_xlat10 = (vec4<f32>(x_566.y, x_566.y, x_566.w, x_566.w) + vec4<f32>(x_568.x, x_568.x, x_568.z, x_568.z));
    let x_571 : vec4<f32> = u_xlat9;
    let x_573 : vec4<f32> = u_xlat8;
    let x_575 : vec2<f32> = (vec2<f32>(x_571.y, x_571.w) / vec2<f32>(x_573.z, x_573.w));
    let x_576 : vec4<f32> = u_xlat5;
    u_xlat5 = vec4<f32>(x_575.x, x_575.y, x_576.z, x_576.w);
    let x_578 : vec4<f32> = u_xlat5;
    let x_582 : vec2<f32> = (vec2<f32>(x_578.x, x_578.y) + vec2<f32>(-1.5f, 0.5f));
    let x_583 : vec4<f32> = u_xlat5;
    u_xlat5 = vec4<f32>(x_582.x, x_582.y, x_583.z, x_583.w);
    let x_585 : vec4<f32> = u_xlat7;
    let x_587 : vec4<f32> = u_xlat10;
    u_xlat28 = (vec2<f32>(x_585.y, x_585.w) / vec2<f32>(x_587.y, x_587.w));
    let x_590 : vec2<f32> = u_xlat28;
    u_xlat28 = (x_590 + vec2<f32>(-1.5f, 0.5f));
    let x_592 : vec4<f32> = u_xlat5;
    let x_595 : vec4<f32> = x_36.x_ShadowMapTexture_TexelSize;
    let x_597 : vec2<f32> = (vec2<f32>(x_592.x, x_592.y) * vec2<f32>(x_595.x, x_595.x));
    let x_598 : vec4<f32> = u_xlat7;
    u_xlat7 = vec4<f32>(x_597.x, x_597.y, x_598.z, x_598.w);
    let x_600 : vec2<f32> = u_xlat28;
    let x_602 : vec4<f32> = x_36.x_ShadowMapTexture_TexelSize;
    let x_604 : vec2<f32> = (x_600 * vec2<f32>(x_602.y, x_602.y));
    let x_605 : vec4<f32> = u_xlat7;
    u_xlat7 = vec4<f32>(x_605.x, x_605.y, x_604.x, x_604.y);
    let x_607 : vec4<f32> = u_xlat8;
    let x_608 : vec4<f32> = u_xlat10;
    u_xlat8 = (x_607 * x_608);
    let x_610 : vec4<f32> = u_xlat6;
    let x_613 : vec4<f32> = x_36.x_ShadowMapTexture_TexelSize;
    let x_616 : vec4<f32> = u_xlat7;
    u_xlat9 = ((vec4<f32>(x_610.x, x_610.y, x_610.x, x_610.y) * vec4<f32>(x_613.x, x_613.y, x_613.x, x_613.y)) + vec4<f32>(x_616.x, x_616.z, x_616.y, x_616.z));
    let x_620 : vec4<f32> = u_xlat9;
    let x_621 : vec2<f32> = vec2<f32>(x_620.x, x_620.y);
    let x_623 : f32 = u_xlat5.z;
    txVec0 = vec3<f32>(x_621.x, x_621.y, x_623);
    let x_635 : vec3<f32> = txVec0;
    let x_637 : f32 = textureSampleCompareLevel(x_ShadowMapTexture, sampler_ShadowMapTexture, x_635.xy, x_635.z);
    u_xlat35 = x_637;
    let x_639 : vec4<f32> = u_xlat9;
    let x_640 : vec2<f32> = vec2<f32>(x_639.z, x_639.w);
    let x_642 : f32 = u_xlat5.z;
    txVec1 = vec3<f32>(x_640.x, x_640.y, x_642);
    let x_650 : vec3<f32> = txVec1;
    let x_652 : f32 = textureSampleCompareLevel(x_ShadowMapTexture, sampler_ShadowMapTexture, x_650.xy, x_650.z);
    u_xlat36 = x_652;
    let x_653 : f32 = u_xlat36;
    let x_655 : f32 = u_xlat8.y;
    u_xlat36 = (x_653 * x_655);
    let x_658 : f32 = u_xlat8.x;
    let x_659 : f32 = u_xlat35;
    let x_661 : f32 = u_xlat36;
    u_xlat35 = ((x_658 * x_659) + x_661);
    let x_663 : vec4<f32> = u_xlat6;
    let x_666 : vec4<f32> = x_36.x_ShadowMapTexture_TexelSize;
    let x_669 : vec4<f32> = u_xlat7;
    u_xlat6 = ((vec4<f32>(x_663.x, x_663.y, x_663.x, x_663.y) * vec4<f32>(x_666.x, x_666.y, x_666.x, x_666.y)) + vec4<f32>(x_669.x, x_669.w, x_669.y, x_669.w));
    let x_673 : vec4<f32> = u_xlat6;
    let x_674 : vec2<f32> = vec2<f32>(x_673.x, x_673.y);
    let x_676 : f32 = u_xlat5.z;
    txVec2 = vec3<f32>(x_674.x, x_674.y, x_676);
    let x_683 : vec3<f32> = txVec2;
    let x_685 : f32 = textureSampleCompareLevel(x_ShadowMapTexture, sampler_ShadowMapTexture, x_683.xy, x_683.z);
    u_xlat36 = x_685;
    let x_687 : f32 = u_xlat8.z;
    let x_688 : f32 = u_xlat36;
    let x_690 : f32 = u_xlat35;
    u_xlat35 = ((x_687 * x_688) + x_690);
    let x_693 : vec4<f32> = u_xlat6;
    let x_694 : vec2<f32> = vec2<f32>(x_693.z, x_693.w);
    let x_696 : f32 = u_xlat5.z;
    txVec3 = vec3<f32>(x_694.x, x_694.y, x_696);
    let x_703 : vec3<f32> = txVec3;
    let x_705 : f32 = textureSampleCompareLevel(x_ShadowMapTexture, sampler_ShadowMapTexture, x_703.xy, x_703.z);
    u_xlat36 = x_705;
    let x_707 : f32 = u_xlat8.w;
    let x_708 : f32 = u_xlat36;
    let x_710 : f32 = u_xlat35;
    u_xlat35 = ((x_707 * x_708) + x_710);
    let x_713 : f32 = x_36.x_LightShadowData.x;
    u_xlat36 = (-(x_713) + 1.0f);
    let x_716 : f32 = u_xlat35;
    let x_717 : f32 = u_xlat36;
    let x_720 : f32 = x_36.x_LightShadowData.x;
    u_xlat35 = ((x_716 * x_717) + x_720);
  } else {
    u_xlat35 = 1.0f;
  }
  let x_723 : f32 = u_xlat34;
  let x_724 : f32 = u_xlat35;
  u_xlat34 = (x_723 + -(x_724));
  let x_727 : f32 = u_xlat33;
  let x_728 : f32 = u_xlat34;
  let x_730 : f32 = u_xlat35;
  u_xlat33 = ((x_727 * x_728) + x_730);
  let x_733 : f32 = u_xlat4.z;
  u_xlatb34 = (0.0f < x_733);
  let x_735 : bool = u_xlatb34;
  u_xlat34 = select(0.0f, 1.0f, x_735);
  let x_737 : vec4<f32> = u_xlat4;
  let x_739 : vec4<f32> = u_xlat4;
  let x_741 : vec2<f32> = (vec2<f32>(x_737.x, x_737.y) / vec2<f32>(x_739.w, x_739.w));
  let x_742 : vec4<f32> = u_xlat5;
  u_xlat5 = vec4<f32>(x_741.x, x_741.y, x_742.z, x_742.w);
  let x_744 : vec4<f32> = u_xlat5;
  let x_746 : vec2<f32> = (vec2<f32>(x_744.x, x_744.y) + vec2<f32>(0.5f, 0.5f));
  let x_747 : vec4<f32> = u_xlat5;
  u_xlat5 = vec4<f32>(x_746.x, x_746.y, x_747.z, x_747.w);
  let x_754 : vec4<f32> = u_xlat5;
  let x_756 : vec4<f32> = textureSample(x_LightTexture0, sampler_LightTexture0, vec2<f32>(x_754.x, x_754.y));
  u_xlat35 = x_756.w;
  let x_758 : f32 = u_xlat34;
  let x_759 : f32 = u_xlat35;
  u_xlat34 = (x_758 * x_759);
  let x_761 : vec4<f32> = u_xlat4;
  let x_763 : vec4<f32> = u_xlat4;
  u_xlat35 = dot(vec3<f32>(x_761.x, x_761.y, x_761.z), vec3<f32>(x_763.x, x_763.y, x_763.z));
  let x_771 : f32 = u_xlat35;
  let x_773 : vec4<f32> = textureSample(x_LightTextureB0, sampler_LightTextureB0, vec2<f32>(x_771, x_771));
  u_xlat35 = x_773.x;
  let x_775 : f32 = u_xlat34;
  let x_776 : f32 = u_xlat35;
  u_xlat34 = (x_775 * x_776);
  let x_778 : f32 = u_xlat33;
  let x_779 : f32 = u_xlat34;
  u_xlat33 = (x_778 * x_779);
  let x_783 : f32 = vs_TEXCOORD2.w;
  u_xlat4.x = x_783;
  let x_786 : f32 = vs_TEXCOORD3.w;
  u_xlat4.y = x_786;
  let x_789 : f32 = vs_TEXCOORD4.w;
  u_xlat4.z = x_789;
  let x_791 : vec4<f32> = u_xlat4;
  let x_793 : vec4<f32> = u_xlat4;
  u_xlat34 = dot(vec3<f32>(x_791.x, x_791.y, x_791.z), vec3<f32>(x_793.x, x_793.y, x_793.z));
  let x_796 : f32 = u_xlat34;
  u_xlat34 = inverseSqrt(x_796);
  let x_798 : f32 = u_xlat34;
  let x_800 : vec4<f32> = u_xlat4;
  let x_802 : vec3<f32> = (vec3<f32>(x_798, x_798, x_798) * vec3<f32>(x_800.x, x_800.y, x_800.z));
  let x_803 : vec4<f32> = u_xlat5;
  u_xlat5 = vec4<f32>(x_802.x, x_802.y, x_802.z, x_803.w);
  let x_805 : f32 = u_xlat33;
  let x_809 : vec4<f32> = x_36.x_LightColor0;
  let x_811 : vec3<f32> = (vec3<f32>(x_805, x_805, x_805) * vec3<f32>(x_809.x, x_809.y, x_809.z));
  let x_812 : vec4<f32> = u_xlat6;
  u_xlat6 = vec4<f32>(x_811.x, x_811.y, x_811.z, x_812.w);
  let x_816 : f32 = x_36.x_Glossiness;
  u_xlat33 = (-(x_816) + 1.0f);
  let x_819 : vec4<f32> = u_xlat4;
  let x_821 : f32 = u_xlat34;
  let x_824 : vec3<f32> = u_xlat3;
  let x_826 : vec3<f32> = ((vec3<f32>(x_819.x, x_819.y, x_819.z) * vec3<f32>(x_821, x_821, x_821)) + -(x_824));
  let x_827 : vec4<f32> = u_xlat4;
  u_xlat4 = vec4<f32>(x_826.x, x_826.y, x_826.z, x_827.w);
  let x_829 : vec4<f32> = u_xlat4;
  let x_831 : vec4<f32> = u_xlat4;
  u_xlat34 = dot(vec3<f32>(x_829.x, x_829.y, x_829.z), vec3<f32>(x_831.x, x_831.y, x_831.z));
  let x_834 : f32 = u_xlat34;
  u_xlat34 = max(x_834, 0.001f);
  let x_837 : f32 = u_xlat34;
  u_xlat34 = inverseSqrt(x_837);
  let x_839 : f32 = u_xlat34;
  let x_841 : vec4<f32> = u_xlat4;
  let x_843 : vec3<f32> = (vec3<f32>(x_839, x_839, x_839) * vec3<f32>(x_841.x, x_841.y, x_841.z));
  let x_844 : vec4<f32> = u_xlat4;
  u_xlat4 = vec4<f32>(x_843.x, x_843.y, x_843.z, x_844.w);
  let x_846 : vec4<f32> = u_xlat2;
  let x_848 : vec3<f32> = u_xlat3;
  u_xlat34 = dot(vec3<f32>(x_846.x, x_846.y, x_846.z), -(x_848));
  let x_851 : vec4<f32> = u_xlat2;
  let x_853 : vec4<f32> = u_xlat5;
  u_xlat35 = dot(vec3<f32>(x_851.x, x_851.y, x_851.z), vec3<f32>(x_853.x, x_853.y, x_853.z));
  let x_856 : f32 = u_xlat35;
  u_xlat35 = clamp(x_856, 0.0f, 1.0f);
  let x_858 : vec4<f32> = u_xlat2;
  let x_860 : vec4<f32> = u_xlat4;
  u_xlat2.x = dot(vec3<f32>(x_858.x, x_858.y, x_858.z), vec3<f32>(x_860.x, x_860.y, x_860.z));
  let x_865 : f32 = u_xlat2.x;
  u_xlat2.x = clamp(x_865, 0.0f, 1.0f);
  let x_868 : vec4<f32> = u_xlat5;
  let x_870 : vec4<f32> = u_xlat4;
  u_xlat13.x = dot(vec3<f32>(x_868.x, x_868.y, x_868.z), vec3<f32>(x_870.x, x_870.y, x_870.z));
  let x_875 : f32 = u_xlat13.x;
  u_xlat13.x = clamp(x_875, 0.0f, 1.0f);
  let x_880 : f32 = u_xlat13.x;
  let x_882 : f32 = u_xlat13.x;
  u_xlat24 = (x_880 * x_882);
  let x_884 : f32 = u_xlat24;
  let x_886 : f32 = u_xlat33;
  u_xlat24 = dot(vec2<f32>(x_884, x_884), vec2<f32>(x_886, x_886));
  let x_889 : f32 = u_xlat24;
  u_xlat24 = (x_889 + -0.5f);
  let x_892 : f32 = u_xlat35;
  u_xlat3.x = (-(x_892) + 1.0f);
  let x_898 : f32 = u_xlat3.x;
  let x_900 : f32 = u_xlat3.x;
  u_xlat14 = (x_898 * x_900);
  let x_902 : f32 = u_xlat14;
  let x_903 : f32 = u_xlat14;
  u_xlat14 = (x_902 * x_903);
  let x_906 : f32 = u_xlat3.x;
  let x_907 : f32 = u_xlat14;
  u_xlat3.x = (x_906 * x_907);
  let x_910 : f32 = u_xlat24;
  let x_912 : f32 = u_xlat3.x;
  u_xlat3.x = ((x_910 * x_912) + 1.0f);
  let x_916 : f32 = u_xlat34;
  u_xlat14 = (-(abs(x_916)) + 1.0f);
  let x_921 : f32 = u_xlat14;
  let x_922 : f32 = u_xlat14;
  u_xlat25 = (x_921 * x_922);
  let x_924 : f32 = u_xlat25;
  let x_925 : f32 = u_xlat25;
  u_xlat25 = (x_924 * x_925);
  let x_927 : f32 = u_xlat14;
  let x_928 : f32 = u_xlat25;
  u_xlat14 = (x_927 * x_928);
  let x_930 : f32 = u_xlat24;
  let x_931 : f32 = u_xlat14;
  u_xlat24 = ((x_930 * x_931) + 1.0f);
  let x_934 : f32 = u_xlat24;
  let x_936 : f32 = u_xlat3.x;
  u_xlat24 = (x_934 * x_936);
  let x_938 : f32 = u_xlat35;
  let x_939 : f32 = u_xlat24;
  u_xlat24 = (x_938 * x_939);
  let x_941 : f32 = u_xlat33;
  let x_942 : f32 = u_xlat33;
  u_xlat33 = (x_941 * x_942);
  let x_944 : f32 = u_xlat33;
  u_xlat33 = max(x_944, 0.002f);
  let x_947 : f32 = u_xlat33;
  u_xlat3.x = (-(x_947) + 1.0f);
  let x_951 : f32 = u_xlat34;
  let x_954 : f32 = u_xlat3.x;
  let x_956 : f32 = u_xlat33;
  u_xlat14 = ((abs(x_951) * x_954) + x_956);
  let x_958 : f32 = u_xlat35;
  let x_960 : f32 = u_xlat3.x;
  let x_962 : f32 = u_xlat33;
  u_xlat3.x = ((x_958 * x_960) + x_962);
  let x_965 : f32 = u_xlat34;
  let x_968 : f32 = u_xlat3.x;
  u_xlat34 = (abs(x_965) * x_968);
  let x_970 : f32 = u_xlat35;
  let x_971 : f32 = u_xlat14;
  let x_973 : f32 = u_xlat34;
  u_xlat34 = ((x_970 * x_971) + x_973);
  let x_975 : f32 = u_xlat34;
  u_xlat34 = (x_975 + 0.00001f);
  let x_978 : f32 = u_xlat34;
  u_xlat34 = (0.5f / x_978);
  let x_980 : f32 = u_xlat33;
  let x_981 : f32 = u_xlat33;
  u_xlat33 = (x_980 * x_981);
  let x_984 : f32 = u_xlat2.x;
  let x_985 : f32 = u_xlat33;
  let x_988 : f32 = u_xlat2.x;
  u_xlat3.x = ((x_984 * x_985) + -(x_988));
  let x_993 : f32 = u_xlat3.x;
  let x_995 : f32 = u_xlat2.x;
  u_xlat2.x = ((x_993 * x_995) + 1.0f);
  let x_999 : f32 = u_xlat33;
  u_xlat33 = (x_999 * 0.318309873f);
  let x_1003 : f32 = u_xlat2.x;
  let x_1005 : f32 = u_xlat2.x;
  u_xlat2.x = ((x_1003 * x_1005) + 0.0000001f);
  let x_1010 : f32 = u_xlat33;
  let x_1012 : f32 = u_xlat2.x;
  u_xlat33 = (x_1010 / x_1012);
  let x_1014 : f32 = u_xlat33;
  let x_1015 : f32 = u_xlat34;
  u_xlat33 = (x_1014 * x_1015);
  let x_1017 : f32 = u_xlat35;
  let x_1018 : f32 = u_xlat33;
  u_xlat33 = (x_1017 * x_1018);
  let x_1020 : f32 = u_xlat33;
  u_xlat33 = (x_1020 * 3.141592741f);
  let x_1023 : f32 = u_xlat33;
  u_xlat33 = max(x_1023, 0.0f);
  let x_1025 : vec3<f32> = u_xlat0;
  let x_1026 : vec3<f32> = u_xlat0;
  u_xlat34 = dot(x_1025, x_1026);
  let x_1028 : f32 = u_xlat34;
  u_xlatb34 = !((x_1028 == 0.0f));
  let x_1030 : bool = u_xlatb34;
  u_xlat34 = select(0.0f, 1.0f, x_1030);
  let x_1032 : f32 = u_xlat33;
  let x_1033 : f32 = u_xlat34;
  u_xlat33 = (x_1032 * x_1033);
  let x_1035 : f32 = u_xlat24;
  let x_1037 : vec4<f32> = u_xlat6;
  let x_1039 : vec3<f32> = (vec3<f32>(x_1035, x_1035, x_1035) * vec3<f32>(x_1037.x, x_1037.y, x_1037.z));
  let x_1040 : vec4<f32> = u_xlat2;
  u_xlat2 = vec4<f32>(x_1039.x, x_1040.y, x_1039.y, x_1039.z);
  let x_1042 : vec4<f32> = u_xlat6;
  let x_1044 : f32 = u_xlat33;
  u_xlat3 = (vec3<f32>(x_1042.x, x_1042.y, x_1042.z) * vec3<f32>(x_1044, x_1044, x_1044));
  let x_1048 : f32 = u_xlat13.x;
  u_xlat33 = (-(x_1048) + 1.0f);
  let x_1051 : f32 = u_xlat33;
  let x_1052 : f32 = u_xlat33;
  u_xlat34 = (x_1051 * x_1052);
  let x_1054 : f32 = u_xlat34;
  let x_1055 : f32 = u_xlat34;
  u_xlat34 = (x_1054 * x_1055);
  let x_1057 : f32 = u_xlat33;
  let x_1058 : f32 = u_xlat34;
  u_xlat33 = (x_1057 * x_1058);
  let x_1060 : vec3<f32> = u_xlat0;
  let x_1063 : vec3<f32> = (-(x_1060) + vec3<f32>(1.0f, 1.0f, 1.0f));
  let x_1064 : vec4<f32> = u_xlat4;
  u_xlat4 = vec4<f32>(x_1063.x, x_1063.y, x_1063.z, x_1064.w);
  let x_1066 : vec4<f32> = u_xlat4;
  let x_1068 : f32 = u_xlat33;
  let x_1071 : vec3<f32> = u_xlat0;
  u_xlat0 = ((vec3<f32>(x_1066.x, x_1066.y, x_1066.z) * vec3<f32>(x_1068, x_1068, x_1068)) + x_1071);
  let x_1073 : vec3<f32> = u_xlat0;
  let x_1074 : vec3<f32> = u_xlat3;
  u_xlat0 = (x_1073 * x_1074);
  let x_1078 : vec3<f32> = u_xlat1;
  let x_1079 : vec4<f32> = u_xlat2;
  let x_1082 : vec3<f32> = u_xlat0;
  let x_1083 : vec3<f32> = ((x_1078 * vec3<f32>(x_1079.x, x_1079.z, x_1079.w)) + x_1082);
  let x_1084 : vec4<f32> = SV_Target0;
  SV_Target0 = vec4<f32>(x_1083.x, x_1083.y, x_1083.z, x_1084.w);
  SV_Target0.w = 1.0f;
  return;
}

struct main_out {
  @location(0)
  SV_Target0_1 : vec4<f32>,
}

@fragment
fn main(@location(0) vs_TEXCOORD0_param : vec4<f32>, @location(3) vs_TEXCOORD3_param : vec4<f32>, @location(2) vs_TEXCOORD2_param : vec4<f32>, @location(4) vs_TEXCOORD4_param : vec4<f32>, @location(1) vs_TEXCOORD1_param : vec4<f32>, @location(5) vs_TEXCOORD5_param : vec3<f32>, @builtin(position) gl_FragCoord_param : vec4<f32>) -> main_out {
  vs_TEXCOORD0 = vs_TEXCOORD0_param;
  vs_TEXCOORD3 = vs_TEXCOORD3_param;
  vs_TEXCOORD2 = vs_TEXCOORD2_param;
  vs_TEXCOORD4 = vs_TEXCOORD4_param;
  vs_TEXCOORD1 = vs_TEXCOORD1_param;
  vs_TEXCOORD5 = vs_TEXCOORD5_param;
  gl_FragCoord = gl_FragCoord_param;
  main_1();
  return main_out(SV_Target0);
}

