struct CB1 {
  InvLowResolution : vec4<f32>,
  InvHighResolution : vec4<f32>,
  AdditionalParams : vec4<f32>,
}

struct S {
  value : array<u32, 1u>,
}

struct S_1 {
  value : array<u32, 1u>,
}

struct S_2 {
  value : array<u32, 1u>,
}

var<private> gl_LocalInvocationID : vec3<u32>;

var<private> gl_GlobalInvocationID : vec3<u32>;

@group(1) @binding(0) var<uniform> x_65 : CB1;

@group(0) @binding(2) var LoResAO1 : texture_2d<f32>;

@group(0) @binding(8) var samplerLoResAO1 : sampler;

@group(0) @binding(3) var LoResAO2 : texture_2d<f32>;

@group(0) @binding(9) var samplerLoResAO2 : sampler;

var<workgroup> TGSM1 : array<S, 256u>;

@group(0) @binding(0) var LoResDB : texture_2d<f32>;

@group(0) @binding(6) var samplerLoResDB : sampler;

var<workgroup> TGSM0 : array<S_1, 256u>;

var<private> gl_LocalInvocationIndex : u32;

var<workgroup> TGSM2 : array<S_2, 256u>;

@group(0) @binding(4) var HiResAO : texture_2d<f32>;

@group(0) @binding(10) var samplerHiResAO : sampler;

@group(0) @binding(1) var HiResDB : texture_2d<f32>;

@group(0) @binding(7) var samplerHiResDB : sampler;

@group(0) @binding(5) var AoResult_origX0X : texture_storage_2d<r32float, write>;

fn main_1() {
  var u_xlati0 : i32;
  var u_xlati8 : vec3<i32>;
  var u_xlat8 : vec3<f32>;
  var u_xlat1 : vec4<f32>;
  var u_xlat2 : vec4<f32>;
  var u_xlati24 : i32;
  var u_xlati17 : vec2<i32>;
  var u_xlatb0 : vec2<bool>;
  var u_xlatu0 : u32;
  var u_xlatu1 : u32;
  var u_xlati16 : i32;
  var u_xlat16 : vec2<f32>;
  var u_xlati1 : vec4<i32>;
  var u_xlat24 : f32;
  var u_xlat10 : f32;
  var u_xlat18 : vec2<f32>;
  var u_xlati3 : vec2<i32>;
  var u_xlat26 : f32;
  var u_xlat19 : f32;
  var u_xlat27 : f32;
  var u_xlat4 : vec4<f32>;
  var u_xlat12 : f32;
  var u_xlat17 : f32;
  var u_xlat25 : f32;
  var u_xlat3 : vec4<f32>;
  var u_xlat11 : f32;
  var u_xlat20 : f32;
  var u_xlat28 : f32;
  var u_xlat5 : f32;
  var u_xlat13 : f32;
  var u_xlat21 : f32;
  var u_xlatb11 : bool;
  var u_xlatb27 : bool;
  var u_xlatb4 : bool;
  var u_xlatb17 : bool;
  var u_xlatb25 : bool;
  var u_xlatb3 : bool;
  var x_527 : f32;
  var x_537 : f32;
  var u_xlati11 : i32;
  var u_xlat7 : f32;
  var x_556 : f32;
  var u_xlat6 : vec4<f32>;
  var x_567 : f32;
  var x_578 : f32;
  var u_xlatb24 : bool;
  var x_639 : f32;
  var x_649 : f32;
  var x_661 : f32;
  var x_702 : f32;
  var x_719 : f32;
  var u_xlat9 : f32;
  var u_xlati2 : vec4<i32>;
  var u_xlatb2 : bool;
  var u_xlatb10 : bool;
  var u_xlatb18 : vec2<bool>;
  var x_1041 : f32;
  var x_1051 : f32;
  var x_1071 : f32;
  var x_1082 : f32;
  var x_1095 : f32;
  var x_1128 : f32;
  var u_xlatb1 : bool;
  var x_1154 : f32;
  var u_xlat0 : vec4<f32>;
  var u_xlatu2 : vec4<u32>;
  var u_xlati5 : vec4<i32>;
  var u_xlat_precise_vec4 : vec4<f32>;
  var u_xlat_precise_ivec4 : vec4<i32>;
  var u_xlat_precise_bvec4 : vec4<bool>;
  var u_xlat_precise_uvec4 : vec4<u32>;
  let x_16 : u32 = gl_LocalInvocationID.x;
  u_xlati0 = (bitcast<i32>(x_16) << bitcast<u32>(1i));
  let x_22 : u32 = gl_LocalInvocationID.y;
  let x_26 : i32 = u_xlati0;
  u_xlati0 = ((bitcast<i32>(x_22) * 32i) + x_26);
  let x_32 : vec3<u32> = gl_LocalInvocationID;
  let x_37 : vec3<u32> = gl_GlobalInvocationID;
  let x_40 : vec2<i32> = (bitcast<vec2<i32>>(vec2<u32>(x_32.x, x_32.y)) + bitcast<vec2<i32>>(vec2<u32>(x_37.x, x_37.y)));
  let x_41 : vec3<i32> = u_xlati8;
  u_xlati8 = vec3<i32>(x_40.x, x_40.y, x_41.z);
  let x_43 : vec3<i32> = u_xlati8;
  let x_47 : vec2<i32> = (vec2<i32>(x_43.x, x_43.y) + vec2<i32>(-2i, -2i));
  let x_48 : vec3<i32> = u_xlati8;
  u_xlati8 = vec3<i32>(x_47.x, x_47.y, x_48.z);
  let x_54 : vec3<i32> = u_xlati8;
  let x_57 : vec2<f32> = vec2<f32>(vec2<i32>(x_54.x, x_54.y));
  let x_58 : vec3<f32> = u_xlat8;
  u_xlat8 = vec3<f32>(x_57.x, x_57.y, x_58.z);
  let x_60 : vec3<f32> = u_xlat8;
  let x_69 : vec4<f32> = x_65.InvLowResolution;
  let x_71 : vec2<f32> = (vec2<f32>(x_60.x, x_60.y) * vec2<f32>(x_69.x, x_69.y));
  let x_72 : vec3<f32> = u_xlat8;
  u_xlat8 = vec3<f32>(x_71.x, x_71.y, x_72.z);
  let x_86 : vec3<f32> = u_xlat8;
  let x_88 : vec4<f32> = textureGather(0i, LoResAO1, samplerLoResAO1, vec2<f32>(x_86.x, x_86.y));
  u_xlat1 = x_88;
  let x_95 : vec3<f32> = u_xlat8;
  let x_97 : vec4<f32> = textureGather(0i, LoResAO2, samplerLoResAO2, vec2<f32>(x_95.x, x_95.y));
  u_xlat2 = x_97;
  let x_98 : vec4<f32> = u_xlat1;
  let x_99 : vec4<f32> = u_xlat2;
  u_xlat1 = min(x_98, x_99);
  let x_107 : i32 = u_xlati0;
  let x_111 : f32 = u_xlat1.w;
  TGSM1[x_107].value[0i] = bitcast<u32>(x_111);
  let x_116 : i32 = u_xlati0;
  u_xlati24 = (x_116 + 1i);
  let x_118 : i32 = u_xlati24;
  let x_121 : f32 = u_xlat1.z;
  TGSM1[x_118].value[0i] = bitcast<u32>(x_121);
  let x_126 : i32 = u_xlati0;
  u_xlati17 = (vec2<i32>(x_126, x_126) + vec2<i32>(16i, 17i));
  let x_133 : i32 = u_xlati17.x;
  let x_135 : f32 = u_xlat1.x;
  TGSM1[x_133].value[0i] = bitcast<u32>(x_135);
  let x_139 : i32 = u_xlati17.y;
  let x_141 : f32 = u_xlat1.y;
  TGSM1[x_139].value[0i] = bitcast<u32>(x_141);
  let x_149 : vec3<f32> = u_xlat8;
  let x_151 : vec4<f32> = textureGather(0i, LoResDB, samplerLoResDB, vec2<f32>(x_149.x, x_149.y));
  u_xlat2 = x_151;
  let x_154 : vec4<f32> = u_xlat2;
  u_xlat2 = (vec4<f32>(1.0f, 1.0f, 1.0f, 1.0f) / x_154);
  let x_160 : i32 = u_xlati0;
  let x_162 : f32 = u_xlat2.w;
  TGSM0[x_160].value[0i] = bitcast<u32>(x_162);
  let x_165 : i32 = u_xlati24;
  let x_167 : f32 = u_xlat2.z;
  TGSM0[x_165].value[0i] = bitcast<u32>(x_167);
  let x_171 : i32 = u_xlati17.x;
  let x_173 : f32 = u_xlat2.x;
  TGSM0[x_171].value[0i] = bitcast<u32>(x_173);
  let x_177 : i32 = u_xlati17.y;
  let x_179 : f32 = u_xlat2.y;
  TGSM0[x_177].value[0i] = bitcast<u32>(x_179);
  workgroupBarrier();
  let x_188 : u32 = gl_LocalInvocationIndex;
  let x_189 : u32 = gl_LocalInvocationIndex;
  let x_190 : u32 = gl_LocalInvocationIndex;
  let x_191 : u32 = gl_LocalInvocationIndex;
  let x_198 : vec4<bool> = (vec4<u32>(x_188, x_189, x_190, x_191) < vec4<u32>(39u, 45u, 0u, 0u));
  u_xlatb0 = vec2<bool>(x_198.x, x_198.y);
  let x_202 : bool = u_xlatb0.x;
  if (x_202) {
    let x_207 : u32 = gl_LocalInvocationIndex;
    u_xlatu0 = (x_207 / 3u);
    let x_210 : u32 = gl_LocalInvocationIndex;
    u_xlatu1 = (x_210 % 3u);
    let x_213 : u32 = u_xlatu1;
    u_xlati16 = (bitcast<i32>(x_213) * 3i);
    let x_217 : u32 = u_xlatu0;
    let x_220 : i32 = u_xlati16;
    u_xlati0 = ((bitcast<i32>(x_217) * 16i) + x_220);
    let x_224 : i32 = u_xlati0;
    let x_226 : u32 = TGSM1[x_224].value[0i];
    u_xlat16.x = bitcast<f32>(x_226);
    let x_232 : i32 = u_xlati0;
    u_xlati1 = (vec4<i32>(x_232, x_232, x_232, x_232) + vec4<i32>(1i, 2i, 3i, 4i));
    let x_240 : i32 = u_xlati1.x;
    let x_242 : u32 = TGSM1[x_240].value[0i];
    u_xlat24 = bitcast<f32>(x_242);
    let x_245 : i32 = u_xlati1.y;
    let x_247 : u32 = TGSM1[x_245].value[0i];
    u_xlat2.x = bitcast<f32>(x_247);
    let x_252 : i32 = u_xlati1.z;
    let x_254 : u32 = TGSM1[x_252].value[0i];
    u_xlat10 = bitcast<f32>(x_254);
    let x_258 : i32 = u_xlati1.w;
    let x_260 : u32 = TGSM1[x_258].value[0i];
    u_xlat18.x = bitcast<f32>(x_260);
    let x_264 : i32 = u_xlati0;
    u_xlati3 = (vec2<i32>(x_264, x_264) + vec2<i32>(5i, 6i));
    let x_272 : i32 = u_xlati3.x;
    let x_274 : u32 = TGSM1[x_272].value[0i];
    u_xlat26 = bitcast<f32>(x_274);
    let x_278 : i32 = u_xlati3.y;
    let x_280 : u32 = TGSM1[x_278].value[0i];
    u_xlat19 = bitcast<f32>(x_280);
    let x_283 : i32 = u_xlati0;
    let x_285 : u32 = TGSM0[x_283].value[0i];
    u_xlat27 = bitcast<f32>(x_285);
    let x_289 : i32 = u_xlati1.x;
    let x_291 : u32 = TGSM0[x_289].value[0i];
    u_xlat4.x = bitcast<f32>(x_291);
    let x_296 : i32 = u_xlati1.y;
    let x_298 : u32 = TGSM0[x_296].value[0i];
    u_xlat12 = bitcast<f32>(x_298);
    let x_302 : i32 = u_xlati1.z;
    let x_304 : u32 = TGSM0[x_302].value[0i];
    u_xlat17 = bitcast<f32>(x_304);
    let x_308 : i32 = u_xlati1.w;
    let x_310 : u32 = TGSM0[x_308].value[0i];
    u_xlat25 = bitcast<f32>(x_310);
    let x_314 : i32 = u_xlati3.x;
    let x_316 : u32 = TGSM0[x_314].value[0i];
    u_xlat3.x = bitcast<f32>(x_316);
    let x_321 : i32 = u_xlati3.y;
    let x_323 : u32 = TGSM0[x_321].value[0i];
    u_xlat11 = bitcast<f32>(x_323);
    let x_325 : f32 = u_xlat27;
    let x_328 : f32 = u_xlat4.x;
    u_xlat27 = (-(x_325) + x_328);
    let x_331 : f32 = u_xlat4.x;
    let x_333 : f32 = u_xlat12;
    u_xlat4.x = (-(x_331) + x_333);
    let x_336 : f32 = u_xlat12;
    let x_338 : f32 = u_xlat17;
    u_xlat12 = (-(x_336) + x_338);
    let x_340 : f32 = u_xlat17;
    let x_342 : f32 = u_xlat25;
    u_xlat17 = (-(x_340) + x_342);
    let x_344 : f32 = u_xlat25;
    let x_347 : f32 = u_xlat3.x;
    u_xlat25 = (-(x_344) + x_347);
    let x_350 : f32 = u_xlat3.x;
    let x_352 : f32 = u_xlat11;
    u_xlat3.x = (-(x_350) + x_352);
    let x_355 : f32 = u_xlat27;
    let x_356 : f32 = u_xlat27;
    let x_360 : f32 = x_65.AdditionalParams.y;
    u_xlat11 = ((x_355 * x_356) + x_360);
    let x_364 : f32 = u_xlat4.x;
    let x_366 : f32 = u_xlat4.x;
    let x_369 : f32 = x_65.AdditionalParams.y;
    u_xlat20 = ((x_364 * x_366) + x_369);
    let x_372 : f32 = u_xlat12;
    let x_373 : f32 = u_xlat12;
    let x_376 : f32 = x_65.AdditionalParams.y;
    u_xlat28 = ((x_372 * x_373) + x_376);
    let x_379 : f32 = u_xlat17;
    let x_380 : f32 = u_xlat17;
    let x_383 : f32 = x_65.AdditionalParams.y;
    u_xlat5 = ((x_379 * x_380) + x_383);
    let x_386 : f32 = u_xlat25;
    let x_387 : f32 = u_xlat25;
    let x_390 : f32 = x_65.AdditionalParams.y;
    u_xlat13 = ((x_386 * x_387) + x_390);
    let x_394 : f32 = u_xlat3.x;
    let x_396 : f32 = u_xlat3.x;
    let x_399 : f32 = x_65.AdditionalParams.y;
    u_xlat21 = ((x_394 * x_396) + x_399);
    let x_401 : f32 = u_xlat27;
    let x_403 : f32 = u_xlat4.x;
    let x_406 : f32 = x_65.AdditionalParams.y;
    u_xlat27 = ((x_401 * x_403) + x_406);
    let x_408 : f32 = u_xlat27;
    let x_409 : f32 = u_xlat27;
    u_xlat27 = (x_408 * x_409);
    let x_411 : f32 = u_xlat11;
    let x_412 : f32 = u_xlat20;
    u_xlat11 = (x_411 * x_412);
    let x_414 : f32 = u_xlat11;
    let x_416 : f32 = x_65.AdditionalParams.z;
    u_xlat11 = (x_414 * x_416);
    let x_419 : f32 = u_xlat11;
    let x_420 : f32 = u_xlat27;
    u_xlatb11 = (x_419 < x_420);
    let x_423 : f32 = u_xlat4.x;
    let x_424 : f32 = u_xlat12;
    let x_427 : f32 = x_65.AdditionalParams.y;
    u_xlat27 = ((x_423 * x_424) + x_427);
    let x_429 : f32 = u_xlat27;
    let x_430 : f32 = u_xlat27;
    u_xlat27 = (x_429 * x_430);
    let x_432 : f32 = u_xlat28;
    let x_433 : f32 = u_xlat20;
    u_xlat4.x = (x_432 * x_433);
    let x_437 : f32 = u_xlat4.x;
    let x_439 : f32 = x_65.AdditionalParams.z;
    u_xlat4.x = (x_437 * x_439);
    let x_444 : f32 = u_xlat4.x;
    let x_445 : f32 = u_xlat27;
    u_xlatb27 = (x_444 < x_445);
    let x_447 : f32 = u_xlat12;
    let x_448 : f32 = u_xlat17;
    let x_451 : f32 = x_65.AdditionalParams.y;
    u_xlat4.x = ((x_447 * x_448) + x_451);
    let x_455 : f32 = u_xlat4.x;
    let x_457 : f32 = u_xlat4.x;
    u_xlat4.x = (x_455 * x_457);
    let x_460 : f32 = u_xlat28;
    let x_461 : f32 = u_xlat5;
    u_xlat12 = (x_460 * x_461);
    let x_463 : f32 = u_xlat12;
    let x_465 : f32 = x_65.AdditionalParams.z;
    u_xlat12 = (x_463 * x_465);
    let x_468 : f32 = u_xlat12;
    let x_470 : f32 = u_xlat4.x;
    u_xlatb4 = (x_468 < x_470);
    let x_472 : f32 = u_xlat17;
    let x_473 : f32 = u_xlat25;
    let x_476 : f32 = x_65.AdditionalParams.y;
    u_xlat17 = ((x_472 * x_473) + x_476);
    let x_478 : f32 = u_xlat17;
    let x_479 : f32 = u_xlat17;
    u_xlat17 = (x_478 * x_479);
    let x_481 : f32 = u_xlat13;
    let x_482 : f32 = u_xlat5;
    u_xlat12 = (x_481 * x_482);
    let x_484 : f32 = u_xlat12;
    let x_486 : f32 = x_65.AdditionalParams.z;
    u_xlat12 = (x_484 * x_486);
    let x_489 : f32 = u_xlat12;
    let x_490 : f32 = u_xlat17;
    u_xlatb17 = (x_489 < x_490);
    let x_492 : f32 = u_xlat25;
    let x_494 : f32 = u_xlat3.x;
    let x_497 : f32 = x_65.AdditionalParams.y;
    u_xlat25 = ((x_492 * x_494) + x_497);
    let x_499 : f32 = u_xlat25;
    let x_500 : f32 = u_xlat25;
    u_xlat25 = (x_499 * x_500);
    let x_502 : f32 = u_xlat21;
    let x_503 : f32 = u_xlat13;
    u_xlat3.x = (x_502 * x_503);
    let x_507 : f32 = u_xlat3.x;
    let x_509 : f32 = x_65.AdditionalParams.z;
    u_xlat3.x = (x_507 * x_509);
    let x_514 : f32 = u_xlat3.x;
    let x_515 : f32 = u_xlat25;
    u_xlatb25 = (x_514 < x_515);
    let x_518 : bool = u_xlatb27;
    let x_519 : bool = u_xlatb11;
    u_xlatb3 = (x_518 | x_519);
    let x_521 : bool = u_xlatb3;
    u_xlati3.x = select(0i, 1i, x_521);
    let x_525 : i32 = u_xlati3.x;
    if ((x_525 != 0i)) {
      let x_530 : f32 = u_xlat24;
      x_527 = x_530;
    } else {
      let x_533 : f32 = u_xlat2.x;
      x_527 = x_533;
    }
    let x_534 : f32 = x_527;
    u_xlat3.x = x_534;
    let x_536 : bool = u_xlatb11;
    if (x_536) {
      let x_541 : f32 = u_xlat16.x;
      x_537 = x_541;
    } else {
      let x_544 : f32 = u_xlat3.x;
      x_537 = x_544;
    }
    let x_545 : f32 = x_537;
    u_xlat16.x = x_545;
    let x_547 : bool = u_xlatb27;
    let x_548 : bool = u_xlatb4;
    u_xlatb11 = (x_547 | x_548);
    let x_551 : bool = u_xlatb11;
    u_xlati11 = select(0i, 1i, x_551);
    let x_554 : i32 = u_xlati11;
    if ((x_554 != 0i)) {
      let x_560 : f32 = u_xlat2.x;
      x_556 = x_560;
    } else {
      let x_562 : f32 = u_xlat10;
      x_556 = x_562;
    }
    let x_563 : f32 = x_556;
    u_xlat7 = x_563;
    let x_565 : i32 = u_xlati11;
    if ((x_565 != 0i)) {
      let x_570 : f32 = u_xlat10;
      x_567 = x_570;
    } else {
      let x_573 : f32 = u_xlat2.x;
      x_567 = x_573;
    }
    let x_574 : f32 = x_567;
    u_xlat6.x = x_574;
    let x_576 : f32 = u_xlat7;
    u_xlat5 = x_576;
    let x_577 : bool = u_xlatb4;
    if (x_577) {
      let x_582 : f32 = u_xlat18.x;
      x_578 = x_582;
    } else {
      let x_585 : f32 = u_xlat6.x;
      x_578 = x_585;
    }
    let x_586 : f32 = x_578;
    u_xlat11 = x_586;
    let x_588 : f32 = u_xlat16.x;
    let x_589 : f32 = u_xlat11;
    u_xlat16.x = (x_588 + x_589);
    let x_593 : f32 = u_xlat16.x;
    let x_597 : f32 = u_xlat3.x;
    u_xlat16.x = ((x_593 * 0.5f) + x_597);
    let x_601 : f32 = u_xlat2.x;
    let x_603 : f32 = u_xlat16.x;
    u_xlat16.x = (x_601 + x_603);
    let x_607 : f32 = u_xlat6.x;
    let x_609 : f32 = u_xlat16.x;
    u_xlat16.x = (x_607 + x_609);
    let x_613 : f32 = u_xlat16.x;
    u_xlat16.x = (x_613 * 0.25f);
    let x_621 : i32 = u_xlati0;
    let x_623 : f32 = u_xlat16.x;
    TGSM2[x_621].value[0i] = bitcast<u32>(x_623);
    let x_626 : bool = u_xlatb27;
    let x_627 : f32 = u_xlat24;
    let x_628 : f32 = u_xlat5;
    u_xlat16.x = select(x_628, x_627, x_626);
    let x_632 : bool = u_xlatb4;
    let x_633 : bool = u_xlatb17;
    u_xlatb24 = (x_632 | x_633);
    let x_635 : bool = u_xlatb24;
    u_xlati24 = select(0i, 1i, x_635);
    let x_637 : i32 = u_xlati24;
    if ((x_637 != 0i)) {
      let x_642 : f32 = u_xlat10;
      x_639 = x_642;
    } else {
      let x_645 : f32 = u_xlat18.x;
      x_639 = x_645;
    }
    let x_646 : f32 = x_639;
    u_xlat7 = x_646;
    let x_647 : i32 = u_xlati24;
    if ((x_647 != 0i)) {
      let x_653 : f32 = u_xlat18.x;
      x_649 = x_653;
    } else {
      let x_655 : f32 = u_xlat10;
      x_649 = x_655;
    }
    let x_656 : f32 = x_649;
    u_xlat6.x = x_656;
    let x_658 : f32 = u_xlat7;
    u_xlat3.x = x_658;
    let x_660 : bool = u_xlatb17;
    if (x_660) {
      let x_664 : f32 = u_xlat26;
      x_661 = x_664;
    } else {
      let x_667 : f32 = u_xlat6.x;
      x_661 = x_667;
    }
    let x_668 : f32 = x_661;
    u_xlat24 = x_668;
    let x_669 : f32 = u_xlat24;
    let x_671 : f32 = u_xlat16.x;
    u_xlat16.x = (x_669 + x_671);
    let x_675 : f32 = u_xlat16.x;
    let x_677 : f32 = u_xlat5;
    u_xlat16.x = ((x_675 * 0.5f) + x_677);
    let x_680 : f32 = u_xlat10;
    let x_682 : f32 = u_xlat16.x;
    u_xlat16.x = (x_680 + x_682);
    let x_686 : f32 = u_xlat6.x;
    let x_688 : f32 = u_xlat16.x;
    u_xlat16.x = (x_686 + x_688);
    let x_692 : f32 = u_xlat16.x;
    u_xlat16.x = (x_692 * 0.25f);
    let x_696 : i32 = u_xlati1.x;
    let x_698 : f32 = u_xlat16.x;
    TGSM2[x_696].value[0i] = bitcast<u32>(x_698);
    let x_701 : bool = u_xlatb4;
    if (x_701) {
      let x_706 : f32 = u_xlat2.x;
      x_702 = x_706;
    } else {
      let x_709 : f32 = u_xlat3.x;
      x_702 = x_709;
    }
    let x_710 : f32 = x_702;
    u_xlat16.x = x_710;
    let x_712 : bool = u_xlatb17;
    let x_713 : bool = u_xlatb25;
    u_xlatb24 = (x_712 | x_713);
    let x_715 : bool = u_xlatb24;
    u_xlati24 = select(0i, 1i, x_715);
    let x_717 : i32 = u_xlati24;
    if ((x_717 != 0i)) {
      let x_722 : f32 = u_xlat26;
      x_719 = x_722;
    } else {
      let x_725 : f32 = u_xlat18.x;
      x_719 = x_725;
    }
    let x_726 : f32 = x_719;
    u_xlat24 = x_726;
    let x_727 : bool = u_xlatb25;
    let x_728 : f32 = u_xlat19;
    let x_729 : f32 = u_xlat24;
    u_xlat1.x = select(x_729, x_728, x_727);
    let x_733 : f32 = u_xlat16.x;
    let x_735 : f32 = u_xlat1.x;
    u_xlat16.x = (x_733 + x_735);
    let x_739 : f32 = u_xlat16.x;
    let x_742 : f32 = u_xlat3.x;
    u_xlat16.x = ((x_739 * 0.5f) + x_742);
    let x_746 : f32 = u_xlat18.x;
    let x_748 : f32 = u_xlat16.x;
    u_xlat16.x = (x_746 + x_748);
    let x_751 : f32 = u_xlat24;
    let x_753 : f32 = u_xlat16.x;
    u_xlat16.x = (x_751 + x_753);
    let x_757 : f32 = u_xlat16.x;
    u_xlat16.x = (x_757 * 0.25f);
    let x_761 : i32 = u_xlati1.y;
    let x_763 : f32 = u_xlat16.x;
    TGSM2[x_761].value[0i] = bitcast<u32>(x_763);
  }
  workgroupBarrier();
  let x_767 : bool = u_xlatb0.y;
  if (x_767) {
    let x_770 : u32 = gl_LocalInvocationIndex;
    u_xlatu0 = (x_770 / 9u);
    let x_773 : u32 = gl_LocalInvocationIndex;
    u_xlatu1 = (x_773 % 9u);
    let x_775 : u32 = u_xlatu0;
    let x_778 : u32 = u_xlatu1;
    u_xlati0 = ((bitcast<i32>(x_775) * 32i) + bitcast<i32>(x_778));
    let x_781 : i32 = u_xlati0;
    let x_783 : u32 = TGSM2[x_781].value[0i];
    u_xlat8.x = bitcast<f32>(x_783);
    let x_786 : i32 = u_xlati0;
    u_xlati16 = (x_786 + 16i);
    let x_788 : i32 = u_xlati16;
    let x_790 : u32 = TGSM2[x_788].value[0i];
    u_xlat24 = bitcast<f32>(x_790);
    let x_792 : i32 = u_xlati0;
    u_xlati1 = (vec4<i32>(x_792, x_792, x_792, x_792) + vec4<i32>(32i, 48i, 64i, 80i));
    let x_800 : i32 = u_xlati1.x;
    let x_802 : u32 = TGSM2[x_800].value[0i];
    u_xlat1.x = bitcast<f32>(x_802);
    let x_807 : i32 = u_xlati1.y;
    let x_809 : u32 = TGSM2[x_807].value[0i];
    u_xlat9 = bitcast<f32>(x_809);
    let x_812 : i32 = u_xlati1.z;
    let x_814 : u32 = TGSM2[x_812].value[0i];
    u_xlat17 = bitcast<f32>(x_814);
    let x_817 : i32 = u_xlati1.w;
    let x_819 : u32 = TGSM2[x_817].value[0i];
    u_xlat25 = bitcast<f32>(x_819);
    let x_822 : i32 = u_xlati0;
    u_xlati2 = (vec4<i32>(x_822, x_822, x_822, x_822) + vec4<i32>(2i, 18i, 34i, 50i));
    let x_830 : i32 = u_xlati2.x;
    let x_832 : u32 = TGSM0[x_830].value[0i];
    u_xlat2.x = bitcast<f32>(x_832);
    let x_836 : i32 = u_xlati2.y;
    let x_838 : u32 = TGSM0[x_836].value[0i];
    u_xlat10 = bitcast<f32>(x_838);
    let x_841 : i32 = u_xlati2.z;
    let x_843 : u32 = TGSM0[x_841].value[0i];
    u_xlat18.x = bitcast<f32>(x_843);
    let x_847 : i32 = u_xlati2.w;
    let x_849 : u32 = TGSM0[x_847].value[0i];
    u_xlat26 = bitcast<f32>(x_849);
    let x_851 : i32 = u_xlati0;
    u_xlati3 = (vec2<i32>(x_851, x_851) + vec2<i32>(66i, 82i));
    let x_858 : i32 = u_xlati3.x;
    let x_860 : u32 = TGSM0[x_858].value[0i];
    u_xlat3.x = bitcast<f32>(x_860);
    let x_864 : i32 = u_xlati3.y;
    let x_866 : u32 = TGSM0[x_864].value[0i];
    u_xlat11 = bitcast<f32>(x_866);
    let x_869 : f32 = u_xlat2.x;
    let x_871 : f32 = u_xlat10;
    u_xlat2.x = (-(x_869) + x_871);
    let x_874 : f32 = u_xlat10;
    let x_877 : f32 = u_xlat18.x;
    u_xlat10 = (-(x_874) + x_877);
    let x_880 : f32 = u_xlat18.x;
    let x_882 : f32 = u_xlat26;
    u_xlat18.x = (-(x_880) + x_882);
    let x_885 : f32 = u_xlat26;
    let x_888 : f32 = u_xlat3.x;
    u_xlat26 = (-(x_885) + x_888);
    let x_891 : f32 = u_xlat3.x;
    let x_893 : f32 = u_xlat11;
    u_xlat3.x = (-(x_891) + x_893);
    let x_897 : f32 = u_xlat2.x;
    let x_899 : f32 = u_xlat2.x;
    let x_902 : f32 = x_65.AdditionalParams.y;
    u_xlat11 = ((x_897 * x_899) + x_902);
    let x_904 : f32 = u_xlat10;
    let x_905 : f32 = u_xlat10;
    let x_908 : f32 = x_65.AdditionalParams.y;
    u_xlat19 = ((x_904 * x_905) + x_908);
    let x_911 : f32 = u_xlat18.x;
    let x_913 : f32 = u_xlat18.x;
    let x_916 : f32 = x_65.AdditionalParams.y;
    u_xlat27 = ((x_911 * x_913) + x_916);
    let x_918 : f32 = u_xlat26;
    let x_919 : f32 = u_xlat26;
    let x_922 : f32 = x_65.AdditionalParams.y;
    u_xlat4.x = ((x_918 * x_919) + x_922);
    let x_926 : f32 = u_xlat3.x;
    let x_928 : f32 = u_xlat3.x;
    let x_931 : f32 = x_65.AdditionalParams.y;
    u_xlat12 = ((x_926 * x_928) + x_931);
    let x_934 : f32 = u_xlat2.x;
    let x_935 : f32 = u_xlat10;
    let x_938 : f32 = x_65.AdditionalParams.y;
    u_xlat2.x = ((x_934 * x_935) + x_938);
    let x_942 : f32 = u_xlat2.x;
    let x_944 : f32 = u_xlat2.x;
    u_xlat2.x = (x_942 * x_944);
    let x_947 : f32 = u_xlat19;
    let x_948 : f32 = u_xlat11;
    u_xlat11 = (x_947 * x_948);
    let x_950 : f32 = u_xlat11;
    let x_952 : f32 = x_65.AdditionalParams.z;
    u_xlat11 = (x_950 * x_952);
    let x_955 : f32 = u_xlat11;
    let x_957 : f32 = u_xlat2.x;
    u_xlatb2 = (x_955 < x_957);
    let x_959 : f32 = u_xlat10;
    let x_961 : f32 = u_xlat18.x;
    let x_964 : f32 = x_65.AdditionalParams.y;
    u_xlat10 = ((x_959 * x_961) + x_964);
    let x_966 : f32 = u_xlat10;
    let x_967 : f32 = u_xlat10;
    u_xlat10 = (x_966 * x_967);
    let x_969 : f32 = u_xlat27;
    let x_970 : f32 = u_xlat19;
    u_xlat11 = (x_969 * x_970);
    let x_972 : f32 = u_xlat11;
    let x_974 : f32 = x_65.AdditionalParams.z;
    u_xlat11 = (x_972 * x_974);
    let x_977 : f32 = u_xlat11;
    let x_978 : f32 = u_xlat10;
    u_xlatb10 = (x_977 < x_978);
    let x_981 : f32 = u_xlat18.x;
    let x_982 : f32 = u_xlat26;
    let x_985 : f32 = x_65.AdditionalParams.y;
    u_xlat18.x = ((x_981 * x_982) + x_985);
    let x_989 : f32 = u_xlat18.x;
    let x_991 : f32 = u_xlat18.x;
    u_xlat18.x = (x_989 * x_991);
    let x_994 : f32 = u_xlat27;
    let x_996 : f32 = u_xlat4.x;
    u_xlat11 = (x_994 * x_996);
    let x_998 : f32 = u_xlat11;
    let x_1000 : f32 = x_65.AdditionalParams.z;
    u_xlat3.y = (x_998 * x_1000);
    let x_1003 : f32 = u_xlat26;
    let x_1005 : f32 = u_xlat3.x;
    let x_1008 : f32 = x_65.AdditionalParams.y;
    u_xlat26 = ((x_1003 * x_1005) + x_1008);
    let x_1010 : f32 = u_xlat26;
    let x_1011 : f32 = u_xlat26;
    u_xlat18.y = (x_1010 * x_1011);
    let x_1014 : f32 = u_xlat12;
    let x_1016 : f32 = u_xlat4.x;
    u_xlat3.x = (x_1014 * x_1016);
    let x_1020 : f32 = u_xlat3.x;
    let x_1022 : f32 = x_65.AdditionalParams.z;
    u_xlat3.x = (x_1020 * x_1022);
    let x_1026 : vec4<f32> = u_xlat3;
    let x_1028 : vec2<f32> = u_xlat18;
    let x_1030 : vec4<bool> = (vec4<f32>(x_1026.y, x_1026.x, x_1026.y, x_1026.x) < vec4<f32>(x_1028.x, x_1028.y, x_1028.x, x_1028.y));
    u_xlatb18 = vec2<bool>(x_1030.x, x_1030.y);
    let x_1032 : bool = u_xlatb10;
    let x_1033 : bool = u_xlatb2;
    u_xlatb3 = (x_1032 | x_1033);
    let x_1035 : bool = u_xlatb3;
    u_xlati3.x = select(0i, 1i, x_1035);
    let x_1039 : i32 = u_xlati3.x;
    if ((x_1039 != 0i)) {
      let x_1044 : f32 = u_xlat24;
      x_1041 = x_1044;
    } else {
      let x_1047 : f32 = u_xlat1.x;
      x_1041 = x_1047;
    }
    let x_1048 : f32 = x_1041;
    u_xlat3.x = x_1048;
    let x_1050 : bool = u_xlatb2;
    if (x_1050) {
      let x_1055 : f32 = u_xlat8.x;
      x_1051 = x_1055;
    } else {
      let x_1058 : f32 = u_xlat3.x;
      x_1051 = x_1058;
    }
    let x_1059 : f32 = x_1051;
    u_xlat8.x = x_1059;
    let x_1061 : bool = u_xlatb10;
    let x_1063 : bool = u_xlatb18.x;
    u_xlatb2 = (x_1061 | x_1063);
    let x_1065 : bool = u_xlatb2;
    u_xlati2.x = select(0i, 1i, x_1065);
    let x_1069 : i32 = u_xlati2.x;
    if ((x_1069 != 0i)) {
      let x_1075 : f32 = u_xlat1.x;
      x_1071 = x_1075;
    } else {
      let x_1077 : f32 = u_xlat9;
      x_1071 = x_1077;
    }
    let x_1078 : f32 = x_1071;
    u_xlat7 = x_1078;
    let x_1080 : i32 = u_xlati2.x;
    if ((x_1080 != 0i)) {
      let x_1085 : f32 = u_xlat9;
      x_1082 = x_1085;
    } else {
      let x_1088 : f32 = u_xlat1.x;
      x_1082 = x_1088;
    }
    let x_1089 : f32 = x_1082;
    u_xlat4.x = x_1089;
    let x_1091 : f32 = u_xlat7;
    u_xlat2.x = x_1091;
    let x_1094 : bool = u_xlatb18.x;
    if (x_1094) {
      let x_1098 : f32 = u_xlat17;
      x_1095 = x_1098;
    } else {
      let x_1101 : f32 = u_xlat4.x;
      x_1095 = x_1101;
    }
    let x_1102 : f32 = x_1095;
    u_xlat11 = x_1102;
    let x_1104 : f32 = u_xlat8.x;
    let x_1105 : f32 = u_xlat11;
    u_xlat8.x = (x_1104 + x_1105);
    let x_1109 : f32 = u_xlat8.x;
    let x_1112 : f32 = u_xlat3.x;
    u_xlat8.x = ((x_1109 * 0.5f) + x_1112);
    let x_1116 : f32 = u_xlat1.x;
    let x_1118 : f32 = u_xlat8.x;
    u_xlat8.x = (x_1116 + x_1118);
    let x_1122 : f32 = u_xlat4.x;
    let x_1124 : f32 = u_xlat8.x;
    u_xlat8.x = (x_1122 + x_1124);
    let x_1127 : bool = u_xlatb10;
    if (x_1127) {
      let x_1131 : f32 = u_xlat24;
      x_1128 = x_1131;
    } else {
      let x_1134 : f32 = u_xlat2.x;
      x_1128 = x_1134;
    }
    let x_1135 : f32 = x_1128;
    u_xlat24 = x_1135;
    let x_1138 : bool = u_xlatb18.x;
    let x_1140 : bool = u_xlatb18.y;
    u_xlatb1 = (x_1138 | x_1140);
    let x_1142 : bool = u_xlatb1;
    u_xlati1.x = select(0i, 1i, x_1142);
    let x_1146 : i32 = u_xlati1.x;
    let x_1148 : f32 = u_xlat17;
    let x_1149 : f32 = u_xlat9;
    u_xlat1.x = select(x_1149, x_1148, (x_1146 != 0i));
    let x_1153 : bool = u_xlatb18.y;
    if (x_1153) {
      let x_1157 : f32 = u_xlat25;
      x_1154 = x_1157;
    } else {
      let x_1160 : f32 = u_xlat1.x;
      x_1154 = x_1160;
    }
    let x_1161 : f32 = x_1154;
    u_xlat17 = x_1161;
    let x_1162 : f32 = u_xlat24;
    let x_1163 : f32 = u_xlat17;
    u_xlat24 = (x_1162 + x_1163);
    let x_1165 : f32 = u_xlat24;
    let x_1168 : f32 = u_xlat2.x;
    u_xlat24 = ((x_1165 * 0.5f) + x_1168);
    let x_1170 : f32 = u_xlat9;
    let x_1171 : f32 = u_xlat24;
    u_xlat24 = (x_1170 + x_1171);
    let x_1174 : f32 = u_xlat1.x;
    let x_1175 : f32 = u_xlat24;
    u_xlat8.z = (x_1174 + x_1175);
    let x_1178 : vec3<f32> = u_xlat8;
    let x_1181 : vec2<f32> = (vec2<f32>(x_1178.x, x_1178.z) * vec2<f32>(0.25f, 0.25f));
    let x_1182 : vec3<f32> = u_xlat8;
    u_xlat8 = vec3<f32>(x_1181.x, x_1182.y, x_1181.y);
    let x_1184 : i32 = u_xlati0;
    let x_1186 : f32 = u_xlat8.x;
    TGSM1[x_1184].value[0i] = bitcast<u32>(x_1186);
    let x_1189 : i32 = u_xlati16;
    let x_1191 : f32 = u_xlat8.z;
    TGSM1[x_1189].value[0i] = bitcast<u32>(x_1191);
  }
  workgroupBarrier();
  let x_1195 : u32 = gl_LocalInvocationID.y;
  let x_1199 : u32 = gl_LocalInvocationID.x;
  u_xlati0 = ((bitcast<i32>(x_1195) * 16i) + bitcast<i32>(x_1199));
  let x_1202 : i32 = u_xlati0;
  u_xlati8 = (vec3<i32>(x_1202, x_1202, x_1202) + vec3<i32>(16i, 17i, 1i));
  let x_1207 : i32 = u_xlati8.x;
  let x_1209 : u32 = TGSM1[x_1207].value[0i];
  u_xlat1.y = bitcast<f32>(x_1209);
  let x_1213 : i32 = u_xlati8.y;
  let x_1215 : u32 = TGSM1[x_1213].value[0i];
  u_xlat1.z = bitcast<f32>(x_1215);
  let x_1219 : i32 = u_xlati8.z;
  let x_1221 : u32 = TGSM1[x_1219].value[0i];
  u_xlat1.w = bitcast<f32>(x_1221);
  let x_1224 : i32 = u_xlati0;
  let x_1226 : u32 = TGSM1[x_1224].value[0i];
  u_xlat1.x = bitcast<f32>(x_1226);
  let x_1230 : vec3<u32> = gl_GlobalInvocationID;
  let x_1232 : vec2<f32> = vec2<f32>(vec2<u32>(x_1230.x, x_1230.y));
  let x_1233 : vec4<f32> = u_xlat0;
  u_xlat0 = vec4<f32>(x_1232.x, x_1232.y, x_1233.z, x_1233.w);
  let x_1235 : vec4<f32> = u_xlat0;
  let x_1238 : vec4<f32> = x_65.InvLowResolution;
  let x_1240 : vec2<f32> = (vec2<f32>(x_1235.x, x_1235.y) * vec2<f32>(x_1238.x, x_1238.y));
  let x_1241 : vec4<f32> = u_xlat0;
  u_xlat0 = vec4<f32>(x_1240.x, x_1240.y, x_1241.z, x_1241.w);
  let x_1245 : vec3<u32> = gl_GlobalInvocationID;
  u_xlatu2 = bitcast<vec4<u32>>((bitcast<vec4<i32>>(vec4<u32>(x_1245.x, x_1245.y, x_1245.y, x_1245.y)) << bitcast<vec4<u32>>(vec4<i32>(1i, 1i, 1i, 1i))));
  let x_1251 : vec4<u32> = u_xlatu2;
  u_xlat16 = vec2<f32>(vec2<u32>(x_1251.x, x_1251.w));
  let x_1254 : vec2<f32> = u_xlat16;
  let x_1256 : vec4<f32> = x_65.InvHighResolution;
  u_xlat16 = (x_1254 * vec2<f32>(x_1256.x, x_1256.y));
  let x_1264 : vec2<f32> = u_xlat16;
  let x_1265 : vec4<f32> = textureGather(0i, HiResAO, samplerHiResAO, x_1264);
  u_xlat3 = x_1265;
  let x_1269 : vec4<f32> = u_xlat0;
  let x_1271 : vec4<f32> = textureGather(0i, LoResDB, samplerLoResDB, vec2<f32>(x_1269.x, x_1269.y));
  u_xlat4 = x_1271;
  let x_1277 : vec2<f32> = u_xlat16;
  let x_1278 : vec4<f32> = textureGather(0i, HiResDB, samplerHiResDB, x_1277);
  u_xlat0 = x_1278;
  let x_1280 : vec4<u32> = u_xlatu2;
  u_xlati5 = (bitcast<vec4<i32>>(vec4<u32>(x_1280.x, x_1280.w, x_1280.x, x_1280.w)) + vec4<i32>(-1i, 0i, 0i, -1i));
  let x_1286 : vec4<f32> = u_xlat4;
  let x_1288 : vec4<f32> = u_xlat0;
  u_xlat6 = (-(x_1286) + vec4<f32>(x_1288.x, x_1288.x, x_1288.x, x_1288.x));
  let x_1291 : vec4<f32> = u_xlat6;
  let x_1294 : vec4<f32> = x_65.AdditionalParams;
  u_xlat6 = (abs(x_1291) + vec4<f32>(x_1294.w, x_1294.w, x_1294.w, x_1294.w));
  let x_1300 : vec4<f32> = u_xlat6;
  u_xlat6 = (vec4<f32>(9.0f, 3.0f, 1.0f, 3.0f) / x_1300);
  let x_1302 : vec4<f32> = u_xlat6;
  u_xlat0.x = dot(x_1302, vec4<f32>(1.0f, 1.0f, 1.0f, 1.0f));
  let x_1306 : f32 = u_xlat0.x;
  let x_1308 : f32 = x_65.AdditionalParams.x;
  u_xlat0.x = (x_1306 + x_1308);
  let x_1311 : vec4<f32> = u_xlat1;
  let x_1313 : vec4<f32> = u_xlat6;
  u_xlat6.x = dot(vec4<f32>(x_1311.y, x_1311.z, x_1311.w, x_1311.x), x_1313);
  let x_1317 : f32 = u_xlat6.x;
  let x_1319 : f32 = x_65.AdditionalParams.x;
  u_xlat6.x = (x_1317 + x_1319);
  let x_1323 : f32 = u_xlat3.x;
  let x_1325 : f32 = u_xlat6.x;
  u_xlat3.x = (x_1323 * x_1325);
  let x_1329 : f32 = u_xlat3.x;
  let x_1331 : f32 = u_xlat0.x;
  u_xlat0.x = (x_1329 / x_1331);
  let x_1338 : vec4<i32> = u_xlati5;
  let x_1340 : vec4<f32> = u_xlat0;
  textureStore(AoResult_origX0X, vec2<i32>(x_1338.x, x_1338.y), vec4<f32>(x_1340.x, x_1340.x, x_1340.x, x_1340.x));
  let x_1342 : vec4<f32> = u_xlat4;
  let x_1345 : vec4<f32> = u_xlat0;
  u_xlat6 = (-(vec4<f32>(x_1342.y, x_1342.z, x_1342.w, x_1342.x)) + vec4<f32>(x_1345.y, x_1345.y, x_1345.y, x_1345.y));
  let x_1348 : vec4<f32> = u_xlat6;
  let x_1351 : vec4<f32> = x_65.AdditionalParams;
  u_xlat6 = (abs(x_1348) + vec4<f32>(x_1351.w, x_1351.w, x_1351.w, x_1351.w));
  let x_1354 : vec4<f32> = u_xlat6;
  u_xlat6 = (vec4<f32>(9.0f, 3.0f, 1.0f, 3.0f) / x_1354);
  let x_1356 : vec4<f32> = u_xlat6;
  u_xlat0.x = dot(x_1356, vec4<f32>(1.0f, 1.0f, 1.0f, 1.0f));
  let x_1359 : vec4<f32> = u_xlat1;
  let x_1361 : vec4<f32> = u_xlat6;
  u_xlat0.y = dot(vec4<f32>(x_1359.z, x_1359.w, x_1359.x, x_1359.y), x_1361);
  let x_1364 : vec4<f32> = u_xlat0;
  let x_1367 : vec4<f32> = x_65.AdditionalParams;
  let x_1369 : vec2<f32> = (vec2<f32>(x_1364.x, x_1364.y) + vec2<f32>(x_1367.x, x_1367.x));
  let x_1370 : vec4<f32> = u_xlat0;
  u_xlat0 = vec4<f32>(x_1369.x, x_1369.y, x_1370.z, x_1370.w);
  let x_1373 : f32 = u_xlat0.y;
  let x_1375 : f32 = u_xlat3.y;
  u_xlat8.x = (x_1373 * x_1375);
  let x_1379 : f32 = u_xlat8.x;
  let x_1381 : f32 = u_xlat0.x;
  u_xlat0.x = (x_1379 / x_1381);
  let x_1385 : vec4<u32> = u_xlatu2;
  let x_1388 : vec4<f32> = u_xlat0;
  textureStore(AoResult_origX0X, bitcast<vec2<i32>>(vec2<u32>(x_1385.x, x_1385.w)), vec4<f32>(x_1388.x, x_1388.x, x_1388.x, x_1388.x));
  let x_1390 : vec4<f32> = u_xlat4;
  let x_1393 : vec4<f32> = u_xlat0;
  u_xlat6 = (-(vec4<f32>(x_1390.z, x_1390.w, x_1390.x, x_1390.y)) + vec4<f32>(x_1393.z, x_1393.z, x_1393.z, x_1393.z));
  let x_1396 : vec4<f32> = u_xlat6;
  let x_1399 : vec4<f32> = x_65.AdditionalParams;
  u_xlat6 = (abs(x_1396) + vec4<f32>(x_1399.w, x_1399.w, x_1399.w, x_1399.w));
  let x_1402 : vec4<f32> = u_xlat6;
  u_xlat6 = (vec4<f32>(9.0f, 3.0f, 1.0f, 3.0f) / x_1402);
  let x_1404 : vec4<f32> = u_xlat6;
  u_xlat0.x = dot(x_1404, vec4<f32>(1.0f, 1.0f, 1.0f, 1.0f));
  let x_1407 : vec4<f32> = u_xlat1;
  let x_1409 : vec4<f32> = u_xlat6;
  u_xlat0.y = dot(vec4<f32>(x_1407.w, x_1407.x, x_1407.y, x_1407.z), x_1409);
  let x_1412 : vec4<f32> = u_xlat0;
  let x_1415 : vec4<f32> = x_65.AdditionalParams;
  let x_1417 : vec2<f32> = (vec2<f32>(x_1412.x, x_1412.y) + vec2<f32>(x_1415.x, x_1415.x));
  let x_1418 : vec4<f32> = u_xlat0;
  u_xlat0 = vec4<f32>(x_1417.x, x_1417.y, x_1418.z, x_1418.w);
  let x_1421 : f32 = u_xlat0.y;
  let x_1423 : f32 = u_xlat3.z;
  u_xlat8.x = (x_1421 * x_1423);
  let x_1427 : f32 = u_xlat8.x;
  let x_1429 : f32 = u_xlat0.x;
  u_xlat0.x = (x_1427 / x_1429);
  let x_1433 : vec4<i32> = u_xlati5;
  let x_1435 : vec4<f32> = u_xlat0;
  textureStore(AoResult_origX0X, vec2<i32>(x_1433.z, x_1433.w), vec4<f32>(x_1435.x, x_1435.x, x_1435.x, x_1435.x));
  let x_1437 : vec4<u32> = u_xlatu2;
  u_xlati2 = (bitcast<vec4<i32>>(x_1437) + vec4<i32>(-1i, -1i, -1i, -1i));
  let x_1441 : vec4<f32> = u_xlat4;
  let x_1444 : vec4<f32> = u_xlat0;
  u_xlat0 = (-(vec4<f32>(x_1441.w, x_1441.x, x_1441.y, x_1441.z)) + vec4<f32>(x_1444.w, x_1444.w, x_1444.w, x_1444.w));
  let x_1447 : vec4<f32> = u_xlat0;
  let x_1450 : vec4<f32> = x_65.AdditionalParams;
  u_xlat0 = (abs(x_1447) + vec4<f32>(x_1450.w, x_1450.w, x_1450.w, x_1450.w));
  let x_1453 : vec4<f32> = u_xlat0;
  u_xlat0 = (vec4<f32>(9.0f, 3.0f, 1.0f, 3.0f) / x_1453);
  let x_1455 : vec4<f32> = u_xlat0;
  u_xlat3.x = dot(x_1455, vec4<f32>(1.0f, 1.0f, 1.0f, 1.0f));
  let x_1459 : f32 = u_xlat3.x;
  let x_1461 : f32 = x_65.AdditionalParams.x;
  u_xlat3.x = (x_1459 + x_1461);
  let x_1464 : vec4<f32> = u_xlat1;
  let x_1465 : vec4<f32> = u_xlat0;
  u_xlat0.x = dot(x_1464, x_1465);
  let x_1469 : f32 = u_xlat0.x;
  let x_1471 : f32 = x_65.AdditionalParams.x;
  u_xlat0.x = (x_1469 + x_1471);
  let x_1475 : f32 = u_xlat0.x;
  let x_1477 : f32 = u_xlat3.w;
  u_xlat0.x = (x_1475 * x_1477);
  let x_1481 : f32 = u_xlat0.x;
  let x_1483 : f32 = u_xlat3.x;
  u_xlat0.x = (x_1481 / x_1483);
  let x_1487 : vec4<i32> = u_xlati2;
  let x_1489 : vec4<f32> = u_xlat0;
  textureStore(AoResult_origX0X, vec2<i32>(x_1487.x, x_1487.y), vec4<f32>(x_1489.x, x_1489.x, x_1489.x, x_1489.x));
  return;
}

@compute @workgroup_size(8i, 8i, 1i)
fn main(@builtin(local_invocation_id) gl_LocalInvocationID_param : vec3<u32>, @builtin(global_invocation_id) gl_GlobalInvocationID_param : vec3<u32>, @builtin(local_invocation_index) gl_LocalInvocationIndex_param : u32) {
  gl_LocalInvocationID = gl_LocalInvocationID_param;
  gl_GlobalInvocationID = gl_GlobalInvocationID_param;
  gl_LocalInvocationIndex = gl_LocalInvocationIndex_param;
  main_1();
}

