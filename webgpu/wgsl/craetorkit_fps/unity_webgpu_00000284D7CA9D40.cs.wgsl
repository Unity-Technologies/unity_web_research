struct Params {
  x_Size : vec4<f32>,
  x_ColorBalance : vec4<f32>,
  x_ColorFilter : vec4<f32>,
  x_HueSatCon : vec4<f32>,
  x_ChannelMixerRed : vec4<f32>,
  x_ChannelMixerGreen : vec4<f32>,
  x_ChannelMixerBlue : vec4<f32>,
  x_Lift : vec4<f32>,
  x_InvGamma : vec4<f32>,
  x_Gain : vec4<f32>,
  x_CustomToneCurve : vec4<f32>,
  x_ToeSegmentA : vec4<f32>,
  x_ToeSegmentB : vec4<f32>,
  x_MidSegmentA : vec4<f32>,
  x_MidSegmentB : vec4<f32>,
  x_ShoSegmentA : vec4<f32>,
  x_ShoSegmentB : vec4<f32>,
}

var<private> gl_GlobalInvocationID : vec3<u32>;

@group(1) @binding(0) var<uniform> x_27 : Params;

@group(0) @binding(0) var x_Curves : texture_2d<f32>;

@group(0) @binding(2) var sampler_Curves : sampler;

@group(0) @binding(1) var x_Output_origX0X : texture_storage_3d<rgba32float, write>;

fn main_1() {
  var u_xlat0 : vec4<f32>;
  var u_xlatb1 : vec3<bool>;
  var u_xlatb12 : bool;
  var u_xlat1 : vec4<f32>;
  var u_xlat2 : vec4<f32>;
  var hlslcc_movcTemp : vec4<f32>;
  var x_186 : f32;
  var x_198 : f32;
  var x_210 : f32;
  var u_xlat12 : f32;
  var u_xlatb0 : bool;
  var u_xlat5 : vec3<f32>;
  var u_xlat13 : f32;
  var u_xlat10 : vec2<f32>;
  var u_xlat3 : vec2<f32>;
  var u_xlat11 : vec2<f32>;
  var u_xlat4 : vec3<f32>;
  var u_xlatb8 : vec2<bool>;
  var x_788 : f32;
  var x_800 : f32;
  var u_xlat8 : f32;
  var u_xlat9 : f32;
  var u_xlatb7 : bool;
  var x_1176 : f32;
  var u_xlatb13 : bool;
  var x_1225 : f32;
  var u_xlat_precise_vec4 : vec4<f32>;
  var u_xlat_precise_ivec4 : vec4<i32>;
  var u_xlat_precise_bvec4 : vec4<bool>;
  var u_xlat_precise_uvec4 : vec4<u32>;
  let x_14 : vec3<u32> = gl_GlobalInvocationID;
  let x_16 : vec3<f32> = vec3<f32>(x_14);
  let x_17 : vec4<f32> = u_xlat0;
  u_xlat0 = vec4<f32>(x_16.x, x_16.y, x_16.z, x_17.w);
  let x_23 : vec4<f32> = u_xlat0;
  let x_32 : vec4<f32> = x_27.x_Size;
  let x_35 : vec4<bool> = (vec4<f32>(x_23.x, x_23.y, x_23.z, x_23.x) < vec4<f32>(x_32.x, x_32.x, x_32.x, x_32.x));
  u_xlatb1 = vec3<bool>(x_35.x, x_35.y, x_35.z);
  let x_41 : bool = u_xlatb1.y;
  let x_44 : bool = u_xlatb1.x;
  u_xlatb12 = (x_41 & x_44);
  let x_48 : bool = u_xlatb1.z;
  let x_49 : bool = u_xlatb12;
  u_xlatb12 = (x_48 & x_49);
  let x_51 : bool = u_xlatb12;
  if (x_51) {
    let x_54 : vec4<f32> = u_xlat0;
    let x_57 : vec4<f32> = x_27.x_Size;
    let x_62 : vec3<f32> = ((vec3<f32>(x_54.x, x_54.y, x_54.z) * vec3<f32>(x_57.y, x_57.y, x_57.y)) + vec3<f32>(-0.386036009f, -0.386036009f, -0.386036009f));
    let x_63 : vec4<f32> = u_xlat0;
    u_xlat0 = vec4<f32>(x_62.x, x_62.y, x_62.z, x_63.w);
    let x_65 : vec4<f32> = u_xlat0;
    let x_69 : vec3<f32> = (vec3<f32>(x_65.x, x_65.y, x_65.z) * vec3<f32>(13.605482101f, 13.605482101f, 13.605482101f));
    let x_70 : vec4<f32> = u_xlat0;
    u_xlat0 = vec4<f32>(x_69.x, x_69.y, x_69.z, x_70.w);
    let x_72 : vec4<f32> = u_xlat0;
    let x_74 : vec3<f32> = exp2(vec3<f32>(x_72.x, x_72.y, x_72.z));
    let x_75 : vec4<f32> = u_xlat0;
    u_xlat0 = vec4<f32>(x_74.x, x_74.y, x_74.z, x_75.w);
    let x_77 : vec4<f32> = u_xlat0;
    let x_81 : vec3<f32> = (vec3<f32>(x_77.x, x_77.y, x_77.z) + vec3<f32>(-0.047995999f, -0.047995999f, -0.047995999f));
    let x_82 : vec4<f32> = u_xlat0;
    u_xlat0 = vec4<f32>(x_81.x, x_81.y, x_81.z, x_82.w);
    let x_84 : vec4<f32> = u_xlat0;
    let x_88 : vec3<f32> = (vec3<f32>(x_84.x, x_84.y, x_84.z) * vec3<f32>(0.179999992f, 0.179999992f, 0.179999992f));
    let x_89 : vec4<f32> = u_xlat0;
    u_xlat0 = vec4<f32>(x_88.x, x_88.y, x_88.z, x_89.w);
    let x_96 : vec4<f32> = u_xlat0;
    u_xlat1.x = dot(vec3<f32>(0.439700991f, 0.382977992f, 0.177334994f), vec3<f32>(x_96.x, x_96.y, x_96.z));
    let x_105 : vec4<f32> = u_xlat0;
    u_xlat1.y = dot(vec3<f32>(0.089792296f, 0.813422978f, 0.096761599f), vec3<f32>(x_105.x, x_105.y, x_105.z));
    let x_113 : vec4<f32> = u_xlat0;
    u_xlat1.z = dot(vec3<f32>(0.017543999f, 0.111543998f, 0.870703995f), vec3<f32>(x_113.x, x_113.y, x_113.z));
    let x_117 : vec4<f32> = u_xlat1;
    let x_121 : vec3<f32> = max(vec3<f32>(x_117.x, x_117.y, x_117.z), vec3<f32>(0.0f, 0.0f, 0.0f));
    let x_122 : vec4<f32> = u_xlat0;
    u_xlat0 = vec4<f32>(x_121.x, x_121.y, x_121.z, x_122.w);
    let x_124 : vec4<f32> = u_xlat0;
    let x_128 : vec3<f32> = min(vec3<f32>(x_124.x, x_124.y, x_124.z), vec3<f32>(65504.0f, 65504.0f, 65504.0f));
    let x_129 : vec4<f32> = u_xlat0;
    u_xlat0 = vec4<f32>(x_128.x, x_128.y, x_128.z, x_129.w);
    let x_131 : vec4<f32> = u_xlat0;
    let x_135 : vec4<bool> = (vec4<f32>(x_131.x, x_131.y, x_131.z, x_131.x) < vec4<f32>(3.05175708e-05f, 3.05175708e-05f, 3.05175708e-05f, 0.0f));
    u_xlatb1 = vec3<bool>(x_135.x, x_135.y, x_135.z);
    let x_138 : vec4<f32> = u_xlat0;
    let x_145 : vec3<f32> = ((vec3<f32>(x_138.x, x_138.y, x_138.z) * vec3<f32>(0.5f, 0.5f, 0.5f)) + vec3<f32>(1.525878e-05f, 1.525878e-05f, 1.525878e-05f));
    let x_146 : vec4<f32> = u_xlat2;
    u_xlat2 = vec4<f32>(x_145.x, x_145.y, x_145.z, x_146.w);
    let x_148 : vec4<f32> = u_xlat2;
    let x_150 : vec3<f32> = log2(vec3<f32>(x_148.x, x_148.y, x_148.z));
    let x_151 : vec4<f32> = u_xlat2;
    u_xlat2 = vec4<f32>(x_150.x, x_150.y, x_150.z, x_151.w);
    let x_153 : vec4<f32> = u_xlat2;
    let x_157 : vec3<f32> = (vec3<f32>(x_153.x, x_153.y, x_153.z) + vec3<f32>(9.720000267f, 9.720000267f, 9.720000267f));
    let x_158 : vec4<f32> = u_xlat2;
    u_xlat2 = vec4<f32>(x_157.x, x_157.y, x_157.z, x_158.w);
    let x_160 : vec4<f32> = u_xlat2;
    let x_164 : vec3<f32> = (vec3<f32>(x_160.x, x_160.y, x_160.z) * vec3<f32>(0.057077624f, 0.057077624f, 0.057077624f));
    let x_165 : vec4<f32> = u_xlat2;
    u_xlat2 = vec4<f32>(x_164.x, x_164.y, x_164.z, x_165.w);
    let x_167 : vec4<f32> = u_xlat0;
    let x_169 : vec3<f32> = log2(vec3<f32>(x_167.x, x_167.y, x_167.z));
    let x_170 : vec4<f32> = u_xlat0;
    u_xlat0 = vec4<f32>(x_169.x, x_169.y, x_169.z, x_170.w);
    let x_172 : vec4<f32> = u_xlat0;
    let x_174 : vec3<f32> = (vec3<f32>(x_172.x, x_172.y, x_172.z) + vec3<f32>(9.720000267f, 9.720000267f, 9.720000267f));
    let x_175 : vec4<f32> = u_xlat0;
    u_xlat0 = vec4<f32>(x_174.x, x_174.y, x_174.z, x_175.w);
    let x_177 : vec4<f32> = u_xlat0;
    let x_179 : vec3<f32> = (vec3<f32>(x_177.x, x_177.y, x_177.z) * vec3<f32>(0.057077624f, 0.057077624f, 0.057077624f));
    let x_180 : vec4<f32> = u_xlat0;
    u_xlat0 = vec4<f32>(x_179.x, x_179.y, x_179.z, x_180.w);
    let x_183 : vec4<f32> = u_xlat0;
    hlslcc_movcTemp = x_183;
    let x_185 : bool = u_xlatb1.x;
    if (x_185) {
      let x_190 : f32 = u_xlat2.x;
      x_186 = x_190;
    } else {
      let x_193 : f32 = u_xlat0.x;
      x_186 = x_193;
    }
    let x_194 : f32 = x_186;
    hlslcc_movcTemp.x = x_194;
    let x_197 : bool = u_xlatb1.y;
    if (x_197) {
      let x_202 : f32 = u_xlat2.y;
      x_198 = x_202;
    } else {
      let x_205 : f32 = u_xlat0.y;
      x_198 = x_205;
    }
    let x_206 : f32 = x_198;
    hlslcc_movcTemp.y = x_206;
    let x_209 : bool = u_xlatb1.z;
    if (x_209) {
      let x_214 : f32 = u_xlat2.z;
      x_210 = x_214;
    } else {
      let x_217 : f32 = u_xlat0.z;
      x_210 = x_217;
    }
    let x_218 : f32 = x_210;
    hlslcc_movcTemp.z = x_218;
    let x_220 : vec4<f32> = hlslcc_movcTemp;
    u_xlat0 = x_220;
    let x_221 : vec4<f32> = u_xlat0;
    let x_225 : vec3<f32> = (vec3<f32>(x_221.x, x_221.y, x_221.z) + vec3<f32>(-0.413588405f, -0.413588405f, -0.413588405f));
    let x_226 : vec4<f32> = u_xlat0;
    u_xlat0 = vec4<f32>(x_225.x, x_225.y, x_225.z, x_226.w);
    let x_228 : vec4<f32> = u_xlat0;
    let x_232 : vec4<f32> = x_27.x_HueSatCon;
    let x_237 : vec3<f32> = ((vec3<f32>(x_228.x, x_228.y, x_228.z) * vec3<f32>(x_232.z, x_232.z, x_232.z)) + vec3<f32>(0.413588405f, 0.413588405f, 0.413588405f));
    let x_238 : vec4<f32> = u_xlat0;
    u_xlat0 = vec4<f32>(x_237.x, x_237.y, x_237.z, x_238.w);
    let x_240 : vec4<f32> = u_xlat0;
    let x_244 : vec4<bool> = (vec4<f32>(x_240.x, x_240.y, x_240.z, x_240.x) < vec4<f32>(-0.301369876f, -0.301369876f, -0.301369876f, 0.0f));
    u_xlatb1 = vec3<bool>(x_244.x, x_244.y, x_244.z);
    let x_247 : bool = u_xlatb1.x;
    if (x_247) {
      let x_252 : f32 = u_xlat0.x;
      u_xlat12 = ((x_252 * 17.520000458f) + -9.720000267f);
      let x_257 : f32 = u_xlat12;
      u_xlat12 = exp2(x_257);
      let x_259 : f32 = u_xlat12;
      u_xlat12 = (x_259 + -1.52587891e-05f);
      let x_262 : f32 = u_xlat12;
      let x_263 : f32 = u_xlat12;
      u_xlat2.x = (x_262 + x_263);
    } else {
      let x_268 : f32 = u_xlat0.x;
      u_xlatb12 = (x_268 < 1.467996359f);
      let x_271 : bool = u_xlatb12;
      if (x_271) {
        let x_275 : f32 = u_xlat0.x;
        u_xlat0.x = ((x_275 * 17.520000458f) + -9.720000267f);
        let x_280 : f32 = u_xlat0.x;
        u_xlat2.x = exp2(x_280);
      } else {
        u_xlat2.x = 65504.0f;
      }
    }
    let x_286 : bool = u_xlatb1.y;
    if (x_286) {
      let x_290 : f32 = u_xlat0.y;
      u_xlat0.x = ((x_290 * 17.520000458f) + -9.720000267f);
      let x_295 : f32 = u_xlat0.x;
      u_xlat0.x = exp2(x_295);
      let x_299 : f32 = u_xlat0.x;
      u_xlat0.x = (x_299 + -1.52587891e-05f);
      let x_303 : f32 = u_xlat0.x;
      let x_305 : f32 = u_xlat0.x;
      u_xlat2.y = (x_303 + x_305);
    } else {
      let x_311 : f32 = u_xlat0.y;
      u_xlatb0 = (x_311 < 1.467996359f);
      let x_313 : bool = u_xlatb0;
      if (x_313) {
        let x_317 : f32 = u_xlat0.y;
        u_xlat0.x = ((x_317 * 17.520000458f) + -9.720000267f);
        let x_322 : f32 = u_xlat0.x;
        u_xlat2.y = exp2(x_322);
      } else {
        u_xlat2.y = 65504.0f;
      }
    }
    let x_328 : bool = u_xlatb1.z;
    if (x_328) {
      let x_332 : f32 = u_xlat0.z;
      u_xlat0.x = ((x_332 * 17.520000458f) + -9.720000267f);
      let x_337 : f32 = u_xlat0.x;
      u_xlat0.x = exp2(x_337);
      let x_341 : f32 = u_xlat0.x;
      u_xlat0.x = (x_341 + -1.52587891e-05f);
      let x_345 : f32 = u_xlat0.x;
      let x_347 : f32 = u_xlat0.x;
      u_xlat2.z = (x_345 + x_347);
    } else {
      let x_352 : f32 = u_xlat0.z;
      u_xlatb0 = (x_352 < 1.467996359f);
      let x_354 : bool = u_xlatb0;
      if (x_354) {
        let x_358 : f32 = u_xlat0.z;
        u_xlat0.x = ((x_358 * 17.520000458f) + -9.720000267f);
        let x_363 : f32 = u_xlat0.x;
        u_xlat2.z = exp2(x_363);
      } else {
        u_xlat2.z = 65504.0f;
      }
    }
    let x_372 : vec4<f32> = u_xlat2;
    u_xlat0.x = dot(vec3<f32>(1.451439261f, -0.236510754f, -0.214928567f), vec3<f32>(x_372.x, x_372.y, x_372.z));
    let x_380 : vec4<f32> = u_xlat2;
    u_xlat0.y = dot(vec3<f32>(-0.076553777f, 1.176229715f, -0.099675924f), vec3<f32>(x_380.x, x_380.y, x_380.z));
    let x_388 : vec4<f32> = u_xlat2;
    u_xlat0.z = dot(vec3<f32>(0.008316148f, -0.00603244966f, 0.997716308f), vec3<f32>(x_388.x, x_388.y, x_388.z));
    let x_396 : vec4<f32> = u_xlat0;
    u_xlat1.x = dot(vec3<f32>(0.390404999f, 0.549941003f, 0.00892632f), vec3<f32>(x_396.x, x_396.y, x_396.z));
    let x_404 : vec4<f32> = u_xlat0;
    u_xlat1.y = dot(vec3<f32>(0.070841603f, 0.963172019f, 0.00135775f), vec3<f32>(x_404.x, x_404.y, x_404.z));
    let x_412 : vec4<f32> = u_xlat0;
    u_xlat1.z = dot(vec3<f32>(0.023108199f, 0.128021002f, 0.936245024f), vec3<f32>(x_412.x, x_412.y, x_412.z));
    let x_416 : vec4<f32> = u_xlat1;
    let x_420 : vec4<f32> = x_27.x_ColorBalance;
    let x_422 : vec3<f32> = (vec3<f32>(x_416.x, x_416.y, x_416.z) * vec3<f32>(x_420.x, x_420.y, x_420.z));
    let x_423 : vec4<f32> = u_xlat0;
    u_xlat0 = vec4<f32>(x_422.x, x_422.y, x_422.z, x_423.w);
    let x_429 : vec4<f32> = u_xlat0;
    u_xlat1.x = dot(vec3<f32>(2.858469963f, -1.628790021f, -0.024891f), vec3<f32>(x_429.x, x_429.y, x_429.z));
    let x_437 : vec4<f32> = u_xlat0;
    u_xlat1.y = dot(vec3<f32>(-0.210181996f, 1.158200026f, 0.000324281f), vec3<f32>(x_437.x, x_437.y, x_437.z));
    let x_445 : vec4<f32> = u_xlat0;
    u_xlat1.z = dot(vec3<f32>(-0.041811999f, -0.118169002f, 1.068670034f), vec3<f32>(x_445.x, x_445.y, x_445.z));
    let x_449 : vec4<f32> = u_xlat1;
    let x_453 : vec4<f32> = x_27.x_ColorFilter;
    let x_455 : vec3<f32> = (vec3<f32>(x_449.x, x_449.y, x_449.z) * vec3<f32>(x_453.x, x_453.y, x_453.z));
    let x_456 : vec4<f32> = u_xlat0;
    u_xlat0 = vec4<f32>(x_455.x, x_455.y, x_455.z, x_456.w);
    let x_458 : vec4<f32> = u_xlat0;
    let x_462 : vec4<f32> = x_27.x_ChannelMixerRed;
    u_xlat1.x = dot(vec3<f32>(x_458.x, x_458.y, x_458.z), vec3<f32>(x_462.x, x_462.y, x_462.z));
    let x_466 : vec4<f32> = u_xlat0;
    let x_470 : vec4<f32> = x_27.x_ChannelMixerGreen;
    u_xlat1.y = dot(vec3<f32>(x_466.x, x_466.y, x_466.z), vec3<f32>(x_470.x, x_470.y, x_470.z));
    let x_474 : vec4<f32> = u_xlat0;
    let x_478 : vec4<f32> = x_27.x_ChannelMixerBlue;
    u_xlat1.z = dot(vec3<f32>(x_474.x, x_474.y, x_474.z), vec3<f32>(x_478.x, x_478.y, x_478.z));
    let x_482 : vec4<f32> = u_xlat1;
    let x_486 : vec4<f32> = x_27.x_Gain;
    let x_491 : vec4<f32> = x_27.x_Lift;
    let x_493 : vec3<f32> = ((vec3<f32>(x_482.x, x_482.y, x_482.z) * vec3<f32>(x_486.x, x_486.y, x_486.z)) + vec3<f32>(x_491.x, x_491.y, x_491.z));
    let x_494 : vec4<f32> = u_xlat0;
    u_xlat0 = vec4<f32>(x_493.x, x_493.y, x_493.z, x_494.w);
    let x_496 : vec4<f32> = u_xlat0;
    let x_501 : vec3<f32> = ((vec3<f32>(x_496.x, x_496.y, x_496.z) * vec3<f32>(340282346638528859811704183484516925440.0f, 340282346638528859811704183484516925440.0f, 340282346638528859811704183484516925440.0f)) + vec3<f32>(0.5f, 0.5f, 0.5f));
    let x_502 : vec4<f32> = u_xlat1;
    u_xlat1 = vec4<f32>(x_501.x, x_501.y, x_501.z, x_502.w);
    let x_504 : vec4<f32> = u_xlat1;
    let x_509 : vec3<f32> = clamp(vec3<f32>(x_504.x, x_504.y, x_504.z), vec3<f32>(0.0f, 0.0f, 0.0f), vec3<f32>(1.0f, 1.0f, 1.0f));
    let x_510 : vec4<f32> = u_xlat1;
    u_xlat1 = vec4<f32>(x_509.x, x_509.y, x_509.z, x_510.w);
    let x_512 : vec4<f32> = u_xlat1;
    let x_519 : vec3<f32> = ((vec3<f32>(x_512.x, x_512.y, x_512.z) * vec3<f32>(2.0f, 2.0f, 2.0f)) + vec3<f32>(-1.0f, -1.0f, -1.0f));
    let x_520 : vec4<f32> = u_xlat1;
    u_xlat1 = vec4<f32>(x_519.x, x_519.y, x_519.z, x_520.w);
    let x_522 : vec4<f32> = u_xlat0;
    let x_525 : vec3<f32> = log2(abs(vec3<f32>(x_522.x, x_522.y, x_522.z)));
    let x_526 : vec4<f32> = u_xlat0;
    u_xlat0 = vec4<f32>(x_525.x, x_525.y, x_525.z, x_526.w);
    let x_528 : vec4<f32> = u_xlat0;
    let x_532 : vec4<f32> = x_27.x_InvGamma;
    let x_534 : vec3<f32> = (vec3<f32>(x_528.x, x_528.y, x_528.z) * vec3<f32>(x_532.x, x_532.y, x_532.z));
    let x_535 : vec4<f32> = u_xlat0;
    u_xlat0 = vec4<f32>(x_534.x, x_534.y, x_534.z, x_535.w);
    let x_537 : vec4<f32> = u_xlat0;
    let x_539 : vec3<f32> = exp2(vec3<f32>(x_537.x, x_537.y, x_537.z));
    let x_540 : vec4<f32> = u_xlat0;
    u_xlat0 = vec4<f32>(x_539.x, x_539.y, x_539.z, x_540.w);
    let x_542 : vec4<f32> = u_xlat0;
    let x_544 : vec4<f32> = u_xlat1;
    let x_546 : vec3<f32> = (vec3<f32>(x_542.x, x_542.y, x_542.z) * vec3<f32>(x_544.x, x_544.y, x_544.z));
    let x_547 : vec4<f32> = u_xlat0;
    u_xlat0 = vec4<f32>(x_546.x, x_546.y, x_546.z, x_547.w);
    let x_549 : vec4<f32> = u_xlat0;
    let x_551 : vec3<f32> = max(vec3<f32>(x_549.x, x_549.y, x_549.z), vec3<f32>(0.0f, 0.0f, 0.0f));
    let x_552 : vec4<f32> = u_xlat0;
    u_xlat0 = vec4<f32>(x_551.x, x_551.y, x_551.z, x_552.w);
    let x_555 : f32 = u_xlat0.y;
    let x_557 : f32 = u_xlat0.z;
    u_xlatb12 = (x_555 >= x_557);
    let x_559 : bool = u_xlatb12;
    u_xlat12 = select(0.0f, 1.0f, x_559);
    let x_562 : vec4<f32> = u_xlat0;
    let x_563 : vec2<f32> = vec2<f32>(x_562.z, x_562.y);
    let x_564 : vec4<f32> = u_xlat1;
    u_xlat1 = vec4<f32>(x_563.x, x_563.y, x_564.z, x_564.w);
    u_xlat1.z = -1.0f;
    u_xlat1.w = 0.666666687f;
    let x_570 : vec4<f32> = u_xlat0;
    let x_572 : vec4<f32> = u_xlat1;
    let x_575 : vec2<f32> = (vec2<f32>(x_570.y, x_570.z) + -(vec2<f32>(x_572.x, x_572.y)));
    let x_576 : vec4<f32> = u_xlat2;
    u_xlat2 = vec4<f32>(x_575.x, x_575.y, x_576.z, x_576.w);
    u_xlat2.z = 1.0f;
    u_xlat2.w = -1.0f;
    let x_580 : f32 = u_xlat12;
    let x_582 : vec4<f32> = u_xlat2;
    let x_584 : vec4<f32> = u_xlat1;
    u_xlat1 = ((vec4<f32>(x_580, x_580, x_580, x_580) * x_582) + x_584);
    let x_587 : f32 = u_xlat0.x;
    let x_589 : f32 = u_xlat1.x;
    u_xlatb12 = (x_587 >= x_589);
    let x_591 : bool = u_xlatb12;
    u_xlat12 = select(0.0f, 1.0f, x_591);
    let x_593 : vec4<f32> = u_xlat1;
    let x_594 : vec3<f32> = vec3<f32>(x_593.x, x_593.y, x_593.w);
    let x_595 : vec4<f32> = u_xlat2;
    u_xlat2 = vec4<f32>(x_594.x, x_594.y, x_594.z, x_595.w);
    let x_598 : f32 = u_xlat0.x;
    u_xlat2.w = x_598;
    let x_600 : vec4<f32> = u_xlat2;
    let x_601 : vec3<f32> = vec3<f32>(x_600.w, x_600.y, x_600.x);
    let x_602 : vec4<f32> = u_xlat1;
    u_xlat1 = vec4<f32>(x_601.x, x_601.y, x_602.z, x_601.z);
    let x_604 : vec4<f32> = u_xlat2;
    let x_606 : vec4<f32> = u_xlat1;
    u_xlat1 = (-(x_604) + x_606);
    let x_608 : f32 = u_xlat12;
    let x_610 : vec4<f32> = u_xlat1;
    let x_612 : vec4<f32> = u_xlat2;
    u_xlat1 = ((vec4<f32>(x_608, x_608, x_608, x_608) * x_610) + x_612);
    let x_615 : f32 = u_xlat1.y;
    let x_617 : f32 = u_xlat1.w;
    u_xlat12 = min(x_615, x_617);
    let x_619 : f32 = u_xlat12;
    let x_622 : f32 = u_xlat1.x;
    u_xlat12 = (-(x_619) + x_622);
    let x_627 : f32 = u_xlat1.y;
    let x_630 : f32 = u_xlat1.w;
    u_xlat5.x = (-(x_627) + x_630);
    let x_634 : f32 = u_xlat12;
    u_xlat13 = ((x_634 * 6.0f) + 0.0001f);
    let x_640 : f32 = u_xlat5.x;
    let x_641 : f32 = u_xlat13;
    u_xlat5.x = (x_640 / x_641);
    let x_645 : f32 = u_xlat5.x;
    let x_647 : f32 = u_xlat1.z;
    u_xlat5.x = (x_645 + x_647);
    let x_651 : f32 = u_xlat5.x;
    u_xlat2.x = abs(x_651);
    let x_655 : f32 = u_xlat1.x;
    u_xlat5.x = (x_655 + 0.0001f);
    let x_660 : f32 = u_xlat12;
    let x_662 : f32 = u_xlat5.x;
    u_xlat10.x = (x_660 / x_662);
    u_xlat2.y = 0.25f;
    u_xlat10.y = 0.25f;
    let x_678 : vec4<f32> = u_xlat2;
    let x_680 : vec4<f32> = textureSampleLevel(x_Curves, sampler_Curves, vec2<f32>(x_678.x, x_678.y), 0.0f);
    u_xlat12 = x_680.y;
    let x_682 : f32 = u_xlat12;
    u_xlat12 = x_682;
    let x_683 : f32 = u_xlat12;
    u_xlat12 = clamp(x_683, 0.0f, 1.0f);
    let x_685 : f32 = u_xlat12;
    let x_686 : f32 = u_xlat12;
    u_xlat12 = (x_685 + x_686);
    let x_691 : vec2<f32> = u_xlat10;
    let x_692 : vec4<f32> = textureSampleLevel(x_Curves, sampler_Curves, x_691, 0.0f);
    u_xlat5.x = x_692.z;
    let x_696 : f32 = u_xlat5.x;
    u_xlat5.x = x_696;
    let x_699 : f32 = u_xlat5.x;
    u_xlat5.x = clamp(x_699, 0.0f, 1.0f);
    let x_702 : vec3<f32> = u_xlat5;
    let x_704 : f32 = u_xlat12;
    u_xlat12 = dot(vec2<f32>(x_702.x, x_702.x), vec2<f32>(x_704, x_704));
    let x_708 : vec4<f32> = u_xlat0;
    u_xlat3.x = dot(vec3<f32>(x_708.x, x_708.y, x_708.z), vec3<f32>(0.212672904f, 0.715152204f, 0.072175004f));
    u_xlat3.y = 0.25f;
    u_xlat11.y = 0.25f;
    let x_722 : vec2<f32> = u_xlat3;
    let x_723 : vec4<f32> = textureSampleLevel(x_Curves, sampler_Curves, x_722, 0.0f);
    u_xlat0.x = x_723.w;
    let x_727 : f32 = u_xlat0.x;
    u_xlat0.x = x_727;
    let x_730 : f32 = u_xlat0.x;
    u_xlat0.x = clamp(x_730, 0.0f, 1.0f);
    let x_733 : f32 = u_xlat12;
    let x_735 : f32 = u_xlat0.x;
    u_xlat0.x = (x_733 * x_735);
    let x_739 : f32 = u_xlat2.x;
    let x_742 : f32 = x_27.x_HueSatCon.x;
    u_xlat11.x = (x_739 + x_742);
    let x_749 : vec2<f32> = u_xlat11;
    let x_750 : vec4<f32> = textureSampleLevel(x_Curves, sampler_Curves, x_749, 0.0f);
    u_xlat4.x = x_750.x;
    let x_754 : f32 = u_xlat4.x;
    u_xlat4.x = x_754;
    let x_757 : f32 = u_xlat4.x;
    u_xlat4.x = clamp(x_757, 0.0f, 1.0f);
    let x_761 : f32 = u_xlat4.x;
    u_xlat4.x = (x_761 + -0.5f);
    let x_766 : f32 = u_xlat4.x;
    let x_768 : f32 = u_xlat11.x;
    u_xlat4.x = (x_766 + x_768);
    let x_775 : f32 = u_xlat4.x;
    u_xlatb8.x = (x_775 < 0.0f);
    let x_779 : f32 = u_xlat4.x;
    u_xlatb12 = (1.0f < x_779);
    let x_781 : vec3<f32> = u_xlat4;
    let x_784 : vec2<f32> = (vec2<f32>(x_781.x, x_781.x) + vec2<f32>(1.0f, -1.0f));
    let x_785 : vec3<f32> = u_xlat5;
    u_xlat5 = vec3<f32>(x_784.x, x_784.y, x_785.z);
    let x_787 : bool = u_xlatb12;
    if (x_787) {
      let x_792 : f32 = u_xlat5.y;
      x_788 = x_792;
    } else {
      let x_795 : f32 = u_xlat4.x;
      x_788 = x_795;
    }
    let x_796 : f32 = x_788;
    u_xlat4.x = x_796;
    let x_799 : bool = u_xlatb8.x;
    if (x_799) {
      let x_804 : f32 = u_xlat5.x;
      x_800 = x_804;
    } else {
      let x_807 : f32 = u_xlat4.x;
      x_800 = x_807;
    }
    let x_808 : f32 = x_800;
    u_xlat4.x = x_808;
    let x_810 : vec3<f32> = u_xlat4;
    u_xlat4 = (vec3<f32>(x_810.x, x_810.x, x_810.x) + vec3<f32>(1.0f, 0.666666687f, 0.333333343f));
    let x_815 : vec3<f32> = u_xlat4;
    u_xlat4 = fract(x_815);
    let x_817 : vec3<f32> = u_xlat4;
    u_xlat4 = ((x_817 * vec3<f32>(6.0f, 6.0f, 6.0f)) + vec3<f32>(-3.0f, -3.0f, -3.0f));
    let x_823 : vec3<f32> = u_xlat4;
    u_xlat4 = (abs(x_823) + vec3<f32>(-1.0f, -1.0f, -1.0f));
    let x_826 : vec3<f32> = u_xlat4;
    u_xlat4 = clamp(x_826, vec3<f32>(0.0f, 0.0f, 0.0f), vec3<f32>(1.0f, 1.0f, 1.0f));
    let x_830 : vec3<f32> = u_xlat4;
    u_xlat4 = (x_830 + vec3<f32>(-1.0f, -1.0f, -1.0f));
    let x_832 : vec2<f32> = u_xlat10;
    let x_834 : vec3<f32> = u_xlat4;
    u_xlat4 = ((vec3<f32>(x_832.x, x_832.x, x_832.x) * x_834) + vec3<f32>(1.0f, 1.0f, 1.0f));
    let x_838 : vec3<f32> = u_xlat4;
    let x_839 : vec4<f32> = u_xlat1;
    u_xlat5 = (x_838 * vec3<f32>(x_839.x, x_839.x, x_839.x));
    let x_843 : vec4<f32> = x_27.x_HueSatCon;
    let x_845 : vec4<f32> = u_xlat0;
    u_xlat0.x = dot(vec2<f32>(x_843.y, x_843.y), vec2<f32>(x_845.x, x_845.x));
    let x_849 : vec3<f32> = u_xlat5;
    u_xlat5.x = dot(x_849, vec3<f32>(0.212672904f, 0.715152204f, 0.072175004f));
    let x_852 : vec4<f32> = u_xlat1;
    let x_854 : vec3<f32> = u_xlat4;
    let x_856 : vec3<f32> = u_xlat5;
    u_xlat4 = ((vec3<f32>(x_852.x, x_852.x, x_852.x) * x_854) + -(vec3<f32>(x_856.x, x_856.x, x_856.x)));
    let x_860 : vec4<f32> = u_xlat0;
    let x_862 : vec3<f32> = u_xlat4;
    let x_864 : vec3<f32> = u_xlat5;
    let x_866 : vec3<f32> = ((vec3<f32>(x_860.x, x_860.x, x_860.x) * x_862) + vec3<f32>(x_864.x, x_864.x, x_864.x));
    let x_867 : vec4<f32> = u_xlat0;
    u_xlat0 = vec4<f32>(x_866.x, x_866.y, x_866.z, x_867.w);
    let x_873 : vec4<f32> = u_xlat0;
    u_xlat5.x = dot(vec3<f32>(0.695452213f, 0.140678704f, 0.163869068f), vec3<f32>(x_873.x, x_873.y, x_873.z));
    let x_881 : vec4<f32> = u_xlat0;
    u_xlat5.y = dot(vec3<f32>(0.044794563f, 0.859671116f, 0.095534317f), vec3<f32>(x_881.x, x_881.y, x_881.z));
    let x_889 : vec4<f32> = u_xlat0;
    u_xlat5.z = dot(vec3<f32>(-0.005525883f, 0.00402521f, 1.001500726f), vec3<f32>(x_889.x, x_889.y, x_889.z));
    let x_894 : f32 = u_xlat5.y;
    let x_896 : f32 = u_xlat5.x;
    u_xlat0.x = min(x_894, x_896);
    let x_900 : f32 = u_xlat5.z;
    let x_902 : f32 = u_xlat0.x;
    u_xlat0.x = min(x_900, x_902);
    let x_906 : f32 = u_xlat5.y;
    let x_908 : f32 = u_xlat5.x;
    u_xlat4.x = max(x_906, x_908);
    let x_912 : f32 = u_xlat5.z;
    let x_914 : f32 = u_xlat4.x;
    u_xlat0.y = max(x_912, x_914);
    let x_917 : vec4<f32> = u_xlat0;
    let x_921 : vec3<f32> = max(vec3<f32>(x_917.x, x_917.y, x_917.y), vec3<f32>(0.0001f, 0.0001f, 0.01f));
    let x_922 : vec4<f32> = u_xlat0;
    u_xlat0 = vec4<f32>(x_921.x, x_921.y, x_921.z, x_922.w);
    let x_925 : f32 = u_xlat0.x;
    let x_928 : f32 = u_xlat0.y;
    u_xlat0.x = (-(x_925) + x_928);
    let x_932 : f32 = u_xlat0.x;
    let x_934 : f32 = u_xlat0.z;
    u_xlat0.x = (x_932 / x_934);
    let x_937 : vec3<f32> = u_xlat5;
    let x_940 : vec3<f32> = u_xlat5;
    u_xlat4 = (-(vec3<f32>(x_937.y, x_937.x, x_937.z)) + vec3<f32>(x_940.z, x_940.y, x_940.x));
    let x_943 : vec3<f32> = u_xlat4;
    let x_945 : vec3<f32> = u_xlat5;
    let x_947 : vec2<f32> = (vec2<f32>(x_943.x, x_943.y) * vec2<f32>(x_945.z, x_945.y));
    let x_948 : vec3<f32> = u_xlat4;
    u_xlat4 = vec3<f32>(x_947.x, x_947.y, x_948.z);
    let x_951 : f32 = u_xlat4.y;
    let x_953 : f32 = u_xlat4.x;
    u_xlat4.x = (x_951 + x_953);
    let x_957 : f32 = u_xlat5.x;
    let x_959 : f32 = u_xlat4.z;
    let x_962 : f32 = u_xlat4.x;
    u_xlat4.x = ((x_957 * x_959) + x_962);
    let x_966 : f32 = u_xlat4.x;
    u_xlat4.x = sqrt(x_966);
    let x_971 : f32 = u_xlat5.y;
    let x_973 : f32 = u_xlat5.z;
    u_xlat8 = (x_971 + x_973);
    let x_976 : f32 = u_xlat5.x;
    let x_977 : f32 = u_xlat8;
    u_xlat8 = (x_976 + x_977);
    let x_980 : f32 = u_xlat4.x;
    let x_983 : f32 = u_xlat8;
    u_xlat4.x = ((x_980 * 1.75f) + x_983);
    let x_987 : f32 = u_xlat0.x;
    u_xlat8 = (x_987 + -0.400000006f);
    let x_990 : f32 = u_xlat8;
    u_xlat12 = (x_990 * 2.5f);
    let x_993 : f32 = u_xlat12;
    u_xlat12 = (-(abs(x_993)) + 1.0f);
    let x_997 : f32 = u_xlat12;
    u_xlat12 = max(x_997, 0.0f);
    let x_999 : f32 = u_xlat8;
    u_xlat8 = ((x_999 * bitcast<f32>(2139095040i)) + 0.5f);
    let x_1004 : f32 = u_xlat8;
    u_xlat8 = clamp(x_1004, 0.0f, 1.0f);
    let x_1006 : f32 = u_xlat8;
    u_xlat8 = ((x_1006 * 2.0f) + -1.0f);
    let x_1009 : f32 = u_xlat12;
    let x_1011 : f32 = u_xlat12;
    u_xlat12 = ((-(x_1009) * x_1011) + 1.0f);
    let x_1014 : f32 = u_xlat8;
    let x_1015 : f32 = u_xlat12;
    u_xlat8 = ((x_1014 * x_1015) + 1.0f);
    let x_1018 : f32 = u_xlat8;
    u_xlat8 = (x_1018 * 0.025f);
    let x_1023 : f32 = u_xlat4.x;
    u_xlatb12 = (0.159999996f >= x_1023);
    let x_1025 : bool = u_xlatb12;
    if (!(x_1025)) {
      let x_1030 : f32 = u_xlat4.x;
      u_xlatb12 = (x_1030 >= 0.479999989f);
      let x_1033 : bool = u_xlatb12;
      if (x_1033) {
        u_xlat8 = 0.0f;
      } else {
        let x_1038 : f32 = u_xlat4.x;
        u_xlat4.x = (x_1038 * 0.333333343f);
        let x_1043 : f32 = u_xlat4.x;
        u_xlat4.x = (0.079999998f / x_1043);
        let x_1047 : f32 = u_xlat4.x;
        u_xlat4.x = (x_1047 + -0.5f);
        let x_1051 : f32 = u_xlat4.x;
        let x_1052 : f32 = u_xlat8;
        u_xlat8 = (x_1051 * x_1052);
      }
    }
    let x_1054 : f32 = u_xlat8;
    u_xlat4.x = (x_1054 + 1.0f);
    let x_1057 : vec3<f32> = u_xlat4;
    let x_1059 : vec3<f32> = u_xlat5;
    let x_1060 : vec3<f32> = (vec3<f32>(x_1057.x, x_1057.x, x_1057.x) * x_1059);
    let x_1061 : vec4<f32> = u_xlat2;
    u_xlat2 = vec4<f32>(x_1061.x, x_1060.x, x_1060.y, x_1060.z);
    let x_1063 : vec4<f32> = u_xlat2;
    let x_1065 : vec4<f32> = u_xlat2;
    let x_1067 : vec4<bool> = (vec4<f32>(x_1063.z, x_1063.w, x_1063.z, x_1063.w) == vec4<f32>(x_1065.y, x_1065.z, x_1065.y, x_1065.z));
    u_xlatb8 = vec2<bool>(x_1067.x, x_1067.y);
    let x_1070 : bool = u_xlatb8.y;
    let x_1072 : bool = u_xlatb8.x;
    u_xlatb8.x = (x_1070 & x_1072);
    let x_1076 : bool = u_xlatb8.x;
    if (x_1076) {
      u_xlat8 = 0.0f;
    } else {
      let x_1081 : f32 = u_xlat5.y;
      let x_1083 : f32 = u_xlat4.x;
      let x_1086 : f32 = u_xlat2.w;
      u_xlat12 = ((x_1081 * x_1083) + -(x_1086));
      let x_1089 : f32 = u_xlat12;
      u_xlat12 = (x_1089 * 1.732050776f);
      let x_1093 : f32 = u_xlat2.y;
      let x_1096 : f32 = u_xlat2.z;
      u_xlat1.x = ((x_1093 * 2.0f) + -(x_1096));
      let x_1101 : f32 = u_xlat5.z;
      let x_1104 : f32 = u_xlat4.x;
      let x_1107 : f32 = u_xlat1.x;
      u_xlat1.x = ((-(x_1101) * x_1104) + x_1107);
      let x_1111 : f32 = u_xlat12;
      let x_1114 : f32 = u_xlat1.x;
      u_xlat9 = min(abs(x_1111), abs(x_1114));
      let x_1117 : f32 = u_xlat12;
      let x_1120 : f32 = u_xlat1.x;
      u_xlat13 = max(abs(x_1117), abs(x_1120));
      let x_1123 : f32 = u_xlat13;
      u_xlat13 = (1.0f / x_1123);
      let x_1125 : f32 = u_xlat13;
      let x_1126 : f32 = u_xlat9;
      u_xlat9 = (x_1125 * x_1126);
      let x_1128 : f32 = u_xlat9;
      let x_1129 : f32 = u_xlat9;
      u_xlat13 = (x_1128 * x_1129);
      let x_1131 : f32 = u_xlat13;
      u_xlat3.x = ((x_1131 * 0.0208351f) + -0.085133001f);
      let x_1137 : f32 = u_xlat13;
      let x_1139 : f32 = u_xlat3.x;
      u_xlat3.x = ((x_1137 * x_1139) + 0.180141002f);
      let x_1144 : f32 = u_xlat13;
      let x_1146 : f32 = u_xlat3.x;
      u_xlat3.x = ((x_1144 * x_1146) + -0.330299497f);
      let x_1151 : f32 = u_xlat13;
      let x_1153 : f32 = u_xlat3.x;
      u_xlat13 = ((x_1151 * x_1153) + 0.999866009f);
      let x_1157 : f32 = u_xlat13;
      let x_1158 : f32 = u_xlat9;
      u_xlat3.x = (x_1157 * x_1158);
      let x_1163 : f32 = u_xlat1.x;
      let x_1165 : f32 = u_xlat12;
      u_xlatb7 = (abs(x_1163) < abs(x_1165));
      let x_1169 : f32 = u_xlat3.x;
      u_xlat3.x = ((x_1169 * -2.0f) + 1.570796371f);
      let x_1175 : bool = u_xlatb7;
      if (x_1175) {
        let x_1180 : f32 = u_xlat3.x;
        x_1176 = x_1180;
      } else {
        x_1176 = 0.0f;
      }
      let x_1182 : f32 = x_1176;
      u_xlat3.x = x_1182;
      let x_1184 : f32 = u_xlat9;
      let x_1185 : f32 = u_xlat13;
      let x_1188 : f32 = u_xlat3.x;
      u_xlat9 = ((x_1184 * x_1185) + x_1188);
      let x_1192 : f32 = u_xlat1.x;
      let x_1194 : f32 = u_xlat1.x;
      u_xlatb13 = (x_1192 < -(x_1194));
      let x_1197 : bool = u_xlatb13;
      u_xlat13 = select(0.0f, -3.141592741f, x_1197);
      let x_1200 : f32 = u_xlat13;
      let x_1201 : f32 = u_xlat9;
      u_xlat9 = (x_1200 + x_1201);
      let x_1203 : f32 = u_xlat12;
      let x_1205 : f32 = u_xlat1.x;
      u_xlat13 = min(x_1203, x_1205);
      let x_1207 : f32 = u_xlat12;
      let x_1209 : f32 = u_xlat1.x;
      u_xlat12 = max(x_1207, x_1209);
      let x_1211 : f32 = u_xlat13;
      let x_1212 : f32 = u_xlat13;
      u_xlatb1.x = (x_1211 < -(x_1212));
      let x_1216 : f32 = u_xlat12;
      let x_1217 : f32 = u_xlat12;
      u_xlatb12 = (x_1216 >= -(x_1217));
      let x_1220 : bool = u_xlatb12;
      let x_1222 : bool = u_xlatb1.x;
      u_xlatb12 = (x_1220 & x_1222);
      let x_1224 : bool = u_xlatb12;
      if (x_1224) {
        let x_1228 : f32 = u_xlat9;
        x_1225 = -(x_1228);
      } else {
        let x_1231 : f32 = u_xlat9;
        x_1225 = x_1231;
      }
      let x_1232 : f32 = x_1225;
      u_xlat12 = x_1232;
      let x_1233 : f32 = u_xlat12;
      u_xlat8 = (x_1233 * 57.295780182f);
    }
    let x_1236 : f32 = u_xlat8;
    u_xlatb12 = (x_1236 < 0.0f);
    let x_1238 : bool = u_xlatb12;
    if (x_1238) {
      let x_1241 : f32 = u_xlat8;
      u_xlat8 = (x_1241 + 360.0f);
    }
    let x_1244 : f32 = u_xlat8;
    u_xlatb12 = (x_1244 < -180.0f);
    let x_1247 : bool = u_xlatb12;
    if (x_1247) {
      let x_1250 : f32 = u_xlat8;
      u_xlat8 = (x_1250 + 360.0f);
    } else {
      let x_1254 : f32 = u_xlat8;
      u_xlatb12 = (180.0f < x_1254);
      let x_1256 : bool = u_xlatb12;
      if (x_1256) {
        let x_1259 : f32 = u_xlat8;
        u_xlat8 = (x_1259 + -360.0f);
      }
    }
    let x_1262 : f32 = u_xlat8;
    u_xlat8 = (x_1262 * 0.014814815f);
    let x_1265 : f32 = u_xlat8;
    u_xlat8 = (-(abs(x_1265)) + 1.0f);
    let x_1269 : f32 = u_xlat8;
    u_xlat8 = max(x_1269, 0.0f);
    let x_1271 : f32 = u_xlat8;
    u_xlat12 = ((x_1271 * -2.0f) + 3.0f);
    let x_1275 : f32 = u_xlat8;
    let x_1276 : f32 = u_xlat8;
    u_xlat8 = (x_1275 * x_1276);
    let x_1278 : f32 = u_xlat8;
    let x_1279 : f32 = u_xlat12;
    u_xlat8 = (x_1278 * x_1279);
    let x_1281 : f32 = u_xlat8;
    let x_1282 : f32 = u_xlat8;
    u_xlat8 = (x_1281 * x_1282);
    let x_1285 : f32 = u_xlat0.x;
    let x_1286 : f32 = u_xlat8;
    u_xlat0.x = (x_1285 * x_1286);
    let x_1290 : f32 = u_xlat5.x;
    let x_1293 : f32 = u_xlat4.x;
    u_xlat4.x = ((-(x_1290) * x_1293) + 0.029999999f);
    let x_1299 : f32 = u_xlat4.x;
    let x_1301 : f32 = u_xlat0.x;
    u_xlat0.x = (x_1299 * x_1301);
    let x_1305 : f32 = u_xlat0.x;
    let x_1309 : f32 = u_xlat2.y;
    u_xlat2.x = ((x_1305 * 0.180000007f) + x_1309);
    let x_1312 : vec4<f32> = u_xlat2;
    u_xlat0.x = dot(vec3<f32>(1.451439261f, -0.236510754f, -0.214928567f), vec3<f32>(x_1312.x, x_1312.z, x_1312.w));
    let x_1316 : vec4<f32> = u_xlat2;
    u_xlat0.y = dot(vec3<f32>(-0.076553777f, 1.176229715f, -0.099675924f), vec3<f32>(x_1316.x, x_1316.z, x_1316.w));
    let x_1320 : vec4<f32> = u_xlat2;
    u_xlat0.z = dot(vec3<f32>(0.008316148f, -0.00603244966f, 0.997716308f), vec3<f32>(x_1320.x, x_1320.z, x_1320.w));
    let x_1324 : vec4<f32> = u_xlat0;
    let x_1326 : vec3<f32> = max(vec3<f32>(x_1324.x, x_1324.y, x_1324.z), vec3<f32>(0.0f, 0.0f, 0.0f));
    let x_1327 : vec4<f32> = u_xlat0;
    u_xlat0 = vec4<f32>(x_1326.x, x_1326.y, x_1326.z, x_1327.w);
    let x_1329 : vec4<f32> = u_xlat0;
    u_xlat12 = dot(vec3<f32>(x_1329.x, x_1329.y, x_1329.z), vec3<f32>(0.272228986f, 0.674081981f, 0.053689498f));
    let x_1336 : f32 = u_xlat12;
    let x_1339 : vec4<f32> = u_xlat0;
    let x_1341 : vec3<f32> = (-(vec3<f32>(x_1336, x_1336, x_1336)) + vec3<f32>(x_1339.x, x_1339.y, x_1339.z));
    let x_1342 : vec4<f32> = u_xlat0;
    u_xlat0 = vec4<f32>(x_1341.x, x_1341.y, x_1341.z, x_1342.w);
    let x_1344 : vec4<f32> = u_xlat0;
    let x_1349 : f32 = u_xlat12;
    let x_1351 : vec3<f32> = ((vec3<f32>(x_1344.x, x_1344.y, x_1344.z) * vec3<f32>(0.959999979f, 0.959999979f, 0.959999979f)) + vec3<f32>(x_1349, x_1349, x_1349));
    let x_1352 : vec4<f32> = u_xlat0;
    u_xlat0 = vec4<f32>(x_1351.x, x_1351.y, x_1351.z, x_1352.w);
    let x_1354 : vec4<f32> = u_xlat0;
    let x_1361 : vec3<f32> = ((vec3<f32>(x_1354.x, x_1354.y, x_1354.z) * vec3<f32>(278.508514404f, 278.508514404f, 278.508514404f)) + vec3<f32>(10.777199745f, 10.777199745f, 10.777199745f));
    let x_1362 : vec4<f32> = u_xlat1;
    u_xlat1 = vec4<f32>(x_1361.x, x_1361.y, x_1361.z, x_1362.w);
    let x_1364 : vec4<f32> = u_xlat0;
    let x_1366 : vec4<f32> = u_xlat1;
    let x_1368 : vec3<f32> = (vec3<f32>(x_1364.x, x_1364.y, x_1364.z) * vec3<f32>(x_1366.x, x_1366.y, x_1366.z));
    let x_1369 : vec4<f32> = u_xlat1;
    u_xlat1 = vec4<f32>(x_1368.x, x_1368.y, x_1368.z, x_1369.w);
    let x_1371 : vec4<f32> = u_xlat0;
    let x_1378 : vec3<f32> = ((vec3<f32>(x_1371.x, x_1371.y, x_1371.z) * vec3<f32>(293.604492188f, 293.604492188f, 293.604492188f)) + vec3<f32>(88.71219635f, 88.71219635f, 88.71219635f));
    let x_1379 : vec4<f32> = u_xlat2;
    u_xlat2 = vec4<f32>(x_1378.x, x_1378.y, x_1378.z, x_1379.w);
    let x_1381 : vec4<f32> = u_xlat0;
    let x_1383 : vec4<f32> = u_xlat2;
    let x_1388 : vec3<f32> = ((vec3<f32>(x_1381.x, x_1381.y, x_1381.z) * vec3<f32>(x_1383.x, x_1383.y, x_1383.z)) + vec3<f32>(80.688903809f, 80.688903809f, 80.688903809f));
    let x_1389 : vec4<f32> = u_xlat0;
    u_xlat0 = vec4<f32>(x_1388.x, x_1388.y, x_1388.z, x_1389.w);
    let x_1391 : vec4<f32> = u_xlat1;
    let x_1393 : vec4<f32> = u_xlat0;
    let x_1395 : vec3<f32> = (vec3<f32>(x_1391.x, x_1391.y, x_1391.z) / vec3<f32>(x_1393.x, x_1393.y, x_1393.z));
    let x_1396 : vec4<f32> = u_xlat0;
    u_xlat0 = vec4<f32>(x_1395.x, x_1395.y, x_1395.z, x_1396.w);
    let x_1402 : vec4<f32> = u_xlat0;
    u_xlat1.x = dot(vec3<f32>(0.662454188f, 0.134004205f, 0.156187683f), vec3<f32>(x_1402.x, x_1402.y, x_1402.z));
    let x_1410 : vec4<f32> = u_xlat0;
    u_xlat1.y = dot(vec3<f32>(0.272228718f, 0.674081743f, 0.053689517f), vec3<f32>(x_1410.x, x_1410.y, x_1410.z));
    let x_1418 : vec4<f32> = u_xlat0;
    u_xlat1.z = dot(vec3<f32>(-0.00557464967f, 0.0040607336f, 1.010339141f), vec3<f32>(x_1418.x, x_1418.y, x_1418.z));
    let x_1422 : vec4<f32> = u_xlat1;
    u_xlat0.x = dot(vec3<f32>(x_1422.x, x_1422.y, x_1422.z), vec3<f32>(1.0f, 1.0f, 1.0f));
    let x_1427 : f32 = u_xlat0.x;
    u_xlat0.x = max(x_1427, 0.0001f);
    let x_1430 : vec4<f32> = u_xlat1;
    let x_1432 : vec4<f32> = u_xlat0;
    let x_1434 : vec2<f32> = (vec2<f32>(x_1430.x, x_1430.y) / vec2<f32>(x_1432.x, x_1432.x));
    let x_1435 : vec4<f32> = u_xlat0;
    u_xlat0 = vec4<f32>(x_1434.x, x_1434.y, x_1435.z, x_1435.w);
    let x_1438 : f32 = u_xlat1.y;
    u_xlat12 = max(x_1438, 0.0f);
    let x_1440 : f32 = u_xlat12;
    u_xlat12 = min(x_1440, 65504.0f);
    let x_1442 : f32 = u_xlat12;
    u_xlat12 = log2(x_1442);
    let x_1444 : f32 = u_xlat12;
    u_xlat12 = (x_1444 * 0.981100023f);
    let x_1447 : f32 = u_xlat12;
    u_xlat1.y = exp2(x_1447);
    let x_1451 : f32 = u_xlat0.y;
    u_xlat12 = max(x_1451, 0.0001f);
    let x_1454 : f32 = u_xlat1.y;
    let x_1455 : f32 = u_xlat12;
    u_xlat12 = (x_1454 / x_1455);
    let x_1458 : f32 = u_xlat0.x;
    u_xlat13 = (-(x_1458) + 1.0f);
    let x_1462 : f32 = u_xlat0.y;
    let x_1464 : f32 = u_xlat13;
    u_xlat0.z = (-(x_1462) + x_1464);
    let x_1467 : f32 = u_xlat12;
    let x_1469 : vec4<f32> = u_xlat0;
    let x_1471 : vec2<f32> = (vec2<f32>(x_1467, x_1467) * vec2<f32>(x_1469.x, x_1469.z));
    let x_1472 : vec4<f32> = u_xlat1;
    u_xlat1 = vec4<f32>(x_1471.x, x_1472.y, x_1471.y, x_1472.w);
    let x_1478 : vec4<f32> = u_xlat1;
    u_xlat0.x = dot(vec3<f32>(1.641023397f, -0.324803293f, -0.236424699f), vec3<f32>(x_1478.x, x_1478.y, x_1478.z));
    let x_1486 : vec4<f32> = u_xlat1;
    u_xlat0.y = dot(vec3<f32>(-0.663662851f, 1.61533165f, 0.016756348f), vec3<f32>(x_1486.x, x_1486.y, x_1486.z));
    let x_1494 : vec4<f32> = u_xlat1;
    u_xlat0.z = dot(vec3<f32>(0.011721894f, -0.008284442f, 0.988394856f), vec3<f32>(x_1494.x, x_1494.y, x_1494.z));
    let x_1498 : vec4<f32> = u_xlat0;
    u_xlat12 = dot(vec3<f32>(x_1498.x, x_1498.y, x_1498.z), vec3<f32>(0.272228986f, 0.674081981f, 0.053689498f));
    let x_1501 : f32 = u_xlat12;
    let x_1504 : vec4<f32> = u_xlat0;
    let x_1506 : vec3<f32> = (-(vec3<f32>(x_1501, x_1501, x_1501)) + vec3<f32>(x_1504.x, x_1504.y, x_1504.z));
    let x_1507 : vec4<f32> = u_xlat0;
    u_xlat0 = vec4<f32>(x_1506.x, x_1506.y, x_1506.z, x_1507.w);
    let x_1509 : vec4<f32> = u_xlat0;
    let x_1514 : f32 = u_xlat12;
    let x_1516 : vec3<f32> = ((vec3<f32>(x_1509.x, x_1509.y, x_1509.z) * vec3<f32>(0.930000007f, 0.930000007f, 0.930000007f)) + vec3<f32>(x_1514, x_1514, x_1514));
    let x_1517 : vec4<f32> = u_xlat0;
    u_xlat0 = vec4<f32>(x_1516.x, x_1516.y, x_1516.z, x_1517.w);
    let x_1519 : vec4<f32> = u_xlat0;
    u_xlat1.x = dot(vec3<f32>(0.662454188f, 0.134004205f, 0.156187683f), vec3<f32>(x_1519.x, x_1519.y, x_1519.z));
    let x_1523 : vec4<f32> = u_xlat0;
    u_xlat1.y = dot(vec3<f32>(0.272228718f, 0.674081743f, 0.053689517f), vec3<f32>(x_1523.x, x_1523.y, x_1523.z));
    let x_1527 : vec4<f32> = u_xlat0;
    u_xlat1.z = dot(vec3<f32>(-0.00557464967f, 0.0040607336f, 1.010339141f), vec3<f32>(x_1527.x, x_1527.y, x_1527.z));
    let x_1535 : vec4<f32> = u_xlat1;
    u_xlat0.x = dot(vec3<f32>(0.987223983f, -0.00611327f, 0.015953301f), vec3<f32>(x_1535.x, x_1535.y, x_1535.z));
    let x_1543 : vec4<f32> = u_xlat1;
    u_xlat0.y = dot(vec3<f32>(-0.00759836f, 1.001860023f, 0.0053302f), vec3<f32>(x_1543.x, x_1543.y, x_1543.z));
    let x_1551 : vec4<f32> = u_xlat1;
    u_xlat0.z = dot(vec3<f32>(0.00307257f, -0.00509595f, 1.081680059f), vec3<f32>(x_1551.x, x_1551.y, x_1551.z));
    let x_1559 : vec4<f32> = u_xlat0;
    u_xlat1.x = dot(vec3<f32>(3.240969896f, -1.537383199f, -0.498610765f), vec3<f32>(x_1559.x, x_1559.y, x_1559.z));
    let x_1567 : vec4<f32> = u_xlat0;
    u_xlat1.y = dot(vec3<f32>(-0.969243646f, 1.875967503f, 0.041555058f), vec3<f32>(x_1567.x, x_1567.y, x_1567.z));
    let x_1575 : vec4<f32> = u_xlat0;
    u_xlat1.z = dot(vec3<f32>(0.05563008f, -0.203976959f, 1.05697155f), vec3<f32>(x_1575.x, x_1575.y, x_1575.z));
    let x_1579 : vec4<f32> = u_xlat1;
    let x_1581 : vec3<f32> = max(vec3<f32>(x_1579.x, x_1579.y, x_1579.z), vec3<f32>(0.0f, 0.0f, 0.0f));
    let x_1582 : vec4<f32> = u_xlat0;
    u_xlat0 = vec4<f32>(x_1581.x, x_1581.y, x_1581.z, x_1582.w);
    u_xlat0.w = 1.0f;
    let x_1589 : vec3<u32> = gl_GlobalInvocationID;
    let x_1592 : vec4<f32> = u_xlat0;
    textureStore(x_Output_origX0X, bitcast<vec3<i32>>(x_1589), x_1592);
  }
  return;
}

@compute @workgroup_size(4i, 4i, 4i)
fn main(@builtin(global_invocation_id) gl_GlobalInvocationID_param : vec3<u32>) {
  gl_GlobalInvocationID = gl_GlobalInvocationID_param;
  main_1();
}

