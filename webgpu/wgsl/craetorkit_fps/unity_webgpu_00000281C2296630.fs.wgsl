type Arr = array<mat4x4<f32>, 4u>;

struct PGlobals {
  x_WorldSpaceCameraPos : vec3<f32>,
  @size(4)
  padding : u32,
  unity_OcclusionMaskSelector : vec4<f32>,
  unity_WorldToShadow : Arr,
  x_LightShadowData : vec4<f32>,
  unity_ShadowFadeCenterAndType : vec4<f32>,
  unity_MatrixV : mat4x4<f32>,
  unity_ProbeVolumeParams : vec4<f32>,
  unity_ProbeVolumeWorldToObject : mat4x4<f32>,
  unity_ProbeVolumeSizeInv : vec3<f32>,
  @size(4)
  padding_1 : u32,
  unity_ProbeVolumeMin : vec3<f32>,
  @size(4)
  padding_2 : u32,
  x_LightColor0 : vec4<f32>,
  x_ShadowMapTexture_TexelSize : vec4<f32>,
  x_Color : vec4<f32>,
  x_Metallic : f32,
  x_Glossiness : f32,
  @size(8)
  padding_3 : u32,
  unity_WorldToLight : mat4x4<f32>,
}

@group(0) @binding(0) var x_MainTex : texture_2d<f32>;

@group(0) @binding(7) var sampler_MainTex : sampler;

var<private> vs_TEXCOORD0 : vec4<f32>;

@group(1) @binding(0) var<uniform> x_36 : PGlobals;

var<private> vs_TEXCOORD4 : vec4<f32>;

var<private> vs_TEXCOORD1 : vec4<f32>;

var<private> vs_TEXCOORD5 : vec3<f32>;

@group(0) @binding(3) var unity_ProbeVolumeSH : texture_3d<f32>;

@group(0) @binding(5) var samplerunity_ProbeVolumeSH : sampler;

@group(0) @binding(4) var x_ShadowMapTexture : texture_depth_2d;

@group(0) @binding(6) var sampler_ShadowMapTexture : sampler_comparison;

@group(0) @binding(1) var x_LightTexture0 : texture_2d<f32>;

@group(0) @binding(8) var sampler_LightTexture0 : sampler;

@group(0) @binding(2) var x_LightTextureB0 : texture_2d<f32>;

@group(0) @binding(9) var sampler_LightTextureB0 : sampler;

var<private> vs_TEXCOORD2 : vec4<f32>;

var<private> vs_TEXCOORD3 : vec4<f32>;

var<private> SV_Target0 : vec4<f32>;

var<private> gl_FragCoord : vec4<f32>;

fn main_1() {
  var u_xlat0 : vec3<f32>;
  var u_xlat1 : vec3<f32>;
  var u_xlat33 : f32;
  var u_xlat2 : vec4<f32>;
  var u_xlat3 : vec3<f32>;
  var u_xlat4 : vec4<f32>;
  var u_xlat5 : vec4<f32>;
  var u_xlat6 : vec4<f32>;
  var u_xlat34 : f32;
  var u_xlatb34 : bool;
  var x_264 : vec3<f32>;
  var u_xlat35 : f32;
  var u_xlatb35 : bool;
  var u_xlat7 : vec4<f32>;
  var u_xlat8 : vec4<f32>;
  var u_xlat28 : vec2<f32>;
  var u_xlat9 : vec4<f32>;
  var u_xlat10 : vec4<f32>;
  var txVec0 : vec3<f32>;
  var txVec1 : vec3<f32>;
  var u_xlat36 : f32;
  var txVec2 : vec3<f32>;
  var txVec3 : vec3<f32>;
  var u_xlat13 : f32;
  var u_xlat24 : f32;
  var u_xlat14 : f32;
  var u_xlat25 : f32;
  var u_xlat_precise_vec4 : vec4<f32>;
  var u_xlat_precise_ivec4 : vec4<i32>;
  var u_xlat_precise_bvec4 : vec4<bool>;
  var u_xlat_precise_uvec4 : vec4<u32>;
  let x_24 : vec4<f32> = vs_TEXCOORD0;
  let x_26 : vec4<f32> = textureSample(x_MainTex, sampler_MainTex, vec2<f32>(x_24.x, x_24.y));
  u_xlat0 = vec3<f32>(x_26.x, x_26.y, x_26.z);
  let x_29 : vec3<f32> = u_xlat0;
  let x_41 : vec4<f32> = x_36.x_Color;
  u_xlat1 = (x_29 * vec3<f32>(x_41.x, x_41.y, x_41.z));
  let x_45 : vec4<f32> = x_36.x_Color;
  let x_47 : vec3<f32> = u_xlat0;
  u_xlat0 = ((vec3<f32>(x_45.x, x_45.y, x_45.z) * x_47) + vec3<f32>(-0.039999999f, -0.039999999f, -0.039999999f));
  let x_55 : f32 = x_36.x_Metallic;
  let x_57 : f32 = x_36.x_Metallic;
  let x_59 : f32 = x_36.x_Metallic;
  let x_60 : vec3<f32> = vec3<f32>(x_55, x_57, x_59);
  let x_65 : vec3<f32> = u_xlat0;
  u_xlat0 = ((vec3<f32>(x_60.x, x_60.y, x_60.z) * x_65) + vec3<f32>(0.039999999f, 0.039999999f, 0.039999999f));
  let x_73 : f32 = x_36.x_Metallic;
  u_xlat33 = ((-(x_73) * 0.959999979f) + 0.959999979f);
  let x_78 : f32 = u_xlat33;
  let x_80 : vec3<f32> = u_xlat1;
  u_xlat1 = (vec3<f32>(x_78, x_78, x_78) * x_80);
  let x_83 : vec4<f32> = vs_TEXCOORD4;
  let x_85 : vec4<f32> = vs_TEXCOORD4;
  u_xlat33 = dot(vec3<f32>(x_83.x, x_83.y, x_83.z), vec3<f32>(x_85.x, x_85.y, x_85.z));
  let x_88 : f32 = u_xlat33;
  u_xlat33 = inverseSqrt(x_88);
  let x_92 : f32 = u_xlat33;
  let x_94 : vec4<f32> = vs_TEXCOORD4;
  let x_96 : vec3<f32> = (vec3<f32>(x_92, x_92, x_92) * vec3<f32>(x_94.x, x_94.y, x_94.z));
  let x_97 : vec4<f32> = u_xlat2;
  u_xlat2 = vec4<f32>(x_96.x, x_96.y, x_96.z, x_97.w);
  let x_100 : vec4<f32> = vs_TEXCOORD1;
  let x_102 : vec4<f32> = vs_TEXCOORD1;
  u_xlat33 = dot(vec3<f32>(x_100.x, x_100.y, x_100.z), vec3<f32>(x_102.x, x_102.y, x_102.z));
  let x_105 : f32 = u_xlat33;
  u_xlat33 = inverseSqrt(x_105);
  let x_108 : f32 = u_xlat33;
  let x_110 : vec4<f32> = vs_TEXCOORD1;
  u_xlat3 = (vec3<f32>(x_108, x_108, x_108) * vec3<f32>(x_110.x, x_110.y, x_110.z));
  let x_116 : vec3<f32> = vs_TEXCOORD5;
  let x_121 : vec4<f32> = x_36.unity_WorldToLight[1i];
  u_xlat4 = (vec4<f32>(x_116.y, x_116.y, x_116.y, x_116.y) * x_121);
  let x_125 : vec4<f32> = x_36.unity_WorldToLight[0i];
  let x_126 : vec3<f32> = vs_TEXCOORD5;
  let x_129 : vec4<f32> = u_xlat4;
  u_xlat4 = ((x_125 * vec4<f32>(x_126.x, x_126.x, x_126.x, x_126.x)) + x_129);
  let x_133 : vec4<f32> = x_36.unity_WorldToLight[2i];
  let x_134 : vec3<f32> = vs_TEXCOORD5;
  let x_137 : vec4<f32> = u_xlat4;
  u_xlat4 = ((x_133 * vec4<f32>(x_134.z, x_134.z, x_134.z, x_134.z)) + x_137);
  let x_139 : vec4<f32> = u_xlat4;
  let x_142 : vec4<f32> = x_36.unity_WorldToLight[3i];
  u_xlat4 = (x_139 + x_142);
  let x_145 : vec3<f32> = vs_TEXCOORD5;
  let x_149 : vec3<f32> = x_36.x_WorldSpaceCameraPos;
  let x_150 : vec3<f32> = (-(x_145) + x_149);
  let x_151 : vec4<f32> = u_xlat5;
  u_xlat5 = vec4<f32>(x_150.x, x_150.y, x_150.z, x_151.w);
  let x_157 : f32 = x_36.unity_MatrixV[0i].z;
  u_xlat6.x = x_157;
  let x_161 : f32 = x_36.unity_MatrixV[1i].z;
  u_xlat6.y = x_161;
  let x_165 : f32 = x_36.unity_MatrixV[2i].z;
  u_xlat6.z = x_165;
  let x_167 : vec4<f32> = u_xlat5;
  let x_169 : vec4<f32> = u_xlat6;
  u_xlat33 = dot(vec3<f32>(x_167.x, x_167.y, x_167.z), vec3<f32>(x_169.x, x_169.y, x_169.z));
  let x_172 : vec3<f32> = vs_TEXCOORD5;
  let x_175 : vec4<f32> = x_36.unity_ShadowFadeCenterAndType;
  let x_178 : vec3<f32> = (x_172 + -(vec3<f32>(x_175.x, x_175.y, x_175.z)));
  let x_179 : vec4<f32> = u_xlat5;
  u_xlat5 = vec4<f32>(x_178.x, x_178.y, x_178.z, x_179.w);
  let x_182 : vec4<f32> = u_xlat5;
  let x_184 : vec4<f32> = u_xlat5;
  u_xlat34 = dot(vec3<f32>(x_182.x, x_182.y, x_182.z), vec3<f32>(x_184.x, x_184.y, x_184.z));
  let x_187 : f32 = u_xlat34;
  u_xlat34 = sqrt(x_187);
  let x_189 : f32 = u_xlat33;
  let x_191 : f32 = u_xlat34;
  u_xlat34 = (-(x_189) + x_191);
  let x_195 : f32 = x_36.unity_ShadowFadeCenterAndType.w;
  let x_196 : f32 = u_xlat34;
  let x_198 : f32 = u_xlat33;
  u_xlat33 = ((x_195 * x_196) + x_198);
  let x_200 : f32 = u_xlat33;
  let x_202 : f32 = x_36.x_LightShadowData.z;
  let x_205 : f32 = x_36.x_LightShadowData.w;
  u_xlat33 = ((x_200 * x_202) + x_205);
  let x_207 : f32 = u_xlat33;
  u_xlat33 = clamp(x_207, 0.0f, 1.0f);
  let x_216 : f32 = x_36.unity_ProbeVolumeParams.x;
  u_xlatb34 = (x_216 == 1.0f);
  let x_218 : bool = u_xlatb34;
  if (x_218) {
    let x_222 : f32 = x_36.unity_ProbeVolumeParams.y;
    u_xlatb34 = (x_222 == 1.0f);
    let x_224 : vec3<f32> = vs_TEXCOORD5;
    let x_228 : vec4<f32> = x_36.unity_ProbeVolumeWorldToObject[1i];
    let x_230 : vec3<f32> = (vec3<f32>(x_224.y, x_224.y, x_224.y) * vec3<f32>(x_228.x, x_228.y, x_228.z));
    let x_231 : vec4<f32> = u_xlat5;
    u_xlat5 = vec4<f32>(x_230.x, x_230.y, x_230.z, x_231.w);
    let x_234 : vec4<f32> = x_36.unity_ProbeVolumeWorldToObject[0i];
    let x_236 : vec3<f32> = vs_TEXCOORD5;
    let x_239 : vec4<f32> = u_xlat5;
    let x_241 : vec3<f32> = ((vec3<f32>(x_234.x, x_234.y, x_234.z) * vec3<f32>(x_236.x, x_236.x, x_236.x)) + vec3<f32>(x_239.x, x_239.y, x_239.z));
    let x_242 : vec4<f32> = u_xlat5;
    u_xlat5 = vec4<f32>(x_241.x, x_241.y, x_241.z, x_242.w);
    let x_245 : vec4<f32> = x_36.unity_ProbeVolumeWorldToObject[2i];
    let x_247 : vec3<f32> = vs_TEXCOORD5;
    let x_250 : vec4<f32> = u_xlat5;
    let x_252 : vec3<f32> = ((vec3<f32>(x_245.x, x_245.y, x_245.z) * vec3<f32>(x_247.z, x_247.z, x_247.z)) + vec3<f32>(x_250.x, x_250.y, x_250.z));
    let x_253 : vec4<f32> = u_xlat5;
    u_xlat5 = vec4<f32>(x_252.x, x_252.y, x_252.z, x_253.w);
    let x_255 : vec4<f32> = u_xlat5;
    let x_258 : vec4<f32> = x_36.unity_ProbeVolumeWorldToObject[3i];
    let x_260 : vec3<f32> = (vec3<f32>(x_255.x, x_255.y, x_255.z) + vec3<f32>(x_258.x, x_258.y, x_258.z));
    let x_261 : vec4<f32> = u_xlat5;
    u_xlat5 = vec4<f32>(x_260.x, x_260.y, x_260.z, x_261.w);
    let x_263 : bool = u_xlatb34;
    if (x_263) {
      let x_267 : vec4<f32> = u_xlat5;
      x_264 = vec3<f32>(x_267.x, x_267.y, x_267.z);
    } else {
      let x_270 : vec3<f32> = vs_TEXCOORD5;
      x_264 = x_270;
    }
    let x_271 : vec3<f32> = x_264;
    let x_272 : vec4<f32> = u_xlat5;
    u_xlat5 = vec4<f32>(x_271.x, x_271.y, x_271.z, x_272.w);
    let x_274 : vec4<f32> = u_xlat5;
    let x_278 : vec3<f32> = x_36.unity_ProbeVolumeMin;
    let x_280 : vec3<f32> = (vec3<f32>(x_274.x, x_274.y, x_274.z) + -(x_278));
    let x_281 : vec4<f32> = u_xlat5;
    u_xlat5 = vec4<f32>(x_280.x, x_280.y, x_280.z, x_281.w);
    let x_283 : vec4<f32> = u_xlat5;
    let x_287 : vec3<f32> = x_36.unity_ProbeVolumeSizeInv;
    let x_288 : vec3<f32> = (vec3<f32>(x_283.x, x_283.y, x_283.z) * x_287);
    let x_289 : vec4<f32> = u_xlat5;
    u_xlat5 = vec4<f32>(x_289.x, x_288.x, x_288.y, x_288.z);
    let x_292 : f32 = u_xlat5.y;
    u_xlat34 = ((x_292 * 0.25f) + 0.75f);
    let x_299 : f32 = x_36.unity_ProbeVolumeParams.z;
    u_xlat35 = ((x_299 * 0.5f) + 0.75f);
    let x_303 : f32 = u_xlat34;
    let x_304 : f32 = u_xlat35;
    u_xlat5.x = max(x_303, x_304);
    let x_315 : vec4<f32> = u_xlat5;
    let x_317 : vec4<f32> = textureSample(unity_ProbeVolumeSH, samplerunity_ProbeVolumeSH, vec3<f32>(x_315.x, x_315.z, x_315.w));
    u_xlat5 = x_317;
  } else {
    u_xlat5.x = 1.0f;
    u_xlat5.y = 1.0f;
    u_xlat5.z = 1.0f;
    u_xlat5.w = 1.0f;
  }
  let x_323 : vec4<f32> = u_xlat5;
  let x_325 : vec4<f32> = x_36.unity_OcclusionMaskSelector;
  u_xlat34 = dot(x_323, x_325);
  let x_327 : f32 = u_xlat34;
  u_xlat34 = clamp(x_327, 0.0f, 1.0f);
  let x_330 : f32 = u_xlat33;
  u_xlatb35 = (x_330 < 0.99000001f);
  let x_333 : bool = u_xlatb35;
  if (x_333) {
    let x_336 : vec3<f32> = vs_TEXCOORD5;
    let x_339 : vec4<f32> = x_36.unity_WorldToShadow[0i][1i];
    u_xlat5 = (vec4<f32>(x_336.y, x_336.y, x_336.y, x_336.y) * x_339);
    let x_342 : vec4<f32> = x_36.unity_WorldToShadow[0i][0i];
    let x_343 : vec3<f32> = vs_TEXCOORD5;
    let x_346 : vec4<f32> = u_xlat5;
    u_xlat5 = ((x_342 * vec4<f32>(x_343.x, x_343.x, x_343.x, x_343.x)) + x_346);
    let x_349 : vec4<f32> = x_36.unity_WorldToShadow[0i][2i];
    let x_350 : vec3<f32> = vs_TEXCOORD5;
    let x_353 : vec4<f32> = u_xlat5;
    u_xlat5 = ((x_349 * vec4<f32>(x_350.z, x_350.z, x_350.z, x_350.z)) + x_353);
    let x_355 : vec4<f32> = u_xlat5;
    let x_357 : vec4<f32> = x_36.unity_WorldToShadow[0i][3i];
    u_xlat5 = (x_355 + x_357);
    let x_359 : vec4<f32> = u_xlat5;
    let x_361 : vec4<f32> = u_xlat5;
    let x_363 : vec3<f32> = (vec3<f32>(x_359.x, x_359.y, x_359.z) / vec3<f32>(x_361.w, x_361.w, x_361.w));
    let x_364 : vec4<f32> = u_xlat5;
    u_xlat5 = vec4<f32>(x_363.x, x_363.y, x_363.z, x_364.w);
    let x_366 : vec4<f32> = u_xlat5;
    let x_370 : vec4<f32> = x_36.x_ShadowMapTexture_TexelSize;
    let x_374 : vec2<f32> = ((vec2<f32>(x_366.x, x_366.y) * vec2<f32>(x_370.z, x_370.w)) + vec2<f32>(0.5f, 0.5f));
    let x_375 : vec4<f32> = u_xlat6;
    u_xlat6 = vec4<f32>(x_374.x, x_374.y, x_375.z, x_375.w);
    let x_377 : vec4<f32> = u_xlat6;
    let x_379 : vec2<f32> = floor(vec2<f32>(x_377.x, x_377.y));
    let x_380 : vec4<f32> = u_xlat6;
    u_xlat6 = vec4<f32>(x_379.x, x_379.y, x_380.z, x_380.w);
    let x_382 : vec4<f32> = u_xlat5;
    let x_385 : vec4<f32> = x_36.x_ShadowMapTexture_TexelSize;
    let x_388 : vec4<f32> = u_xlat6;
    let x_391 : vec2<f32> = ((vec2<f32>(x_382.x, x_382.y) * vec2<f32>(x_385.z, x_385.w)) + -(vec2<f32>(x_388.x, x_388.y)));
    let x_392 : vec4<f32> = u_xlat5;
    u_xlat5 = vec4<f32>(x_391.x, x_391.y, x_392.z, x_392.w);
    let x_395 : vec4<f32> = u_xlat5;
    u_xlat7 = (vec4<f32>(x_395.x, x_395.x, x_395.y, x_395.y) + vec4<f32>(0.5f, 1.0f, 0.5f, 1.0f));
    let x_400 : vec4<f32> = u_xlat7;
    let x_402 : vec4<f32> = u_xlat7;
    let x_404 : vec2<f32> = (vec2<f32>(x_400.x, x_400.z) * vec2<f32>(x_402.x, x_402.z));
    let x_405 : vec4<f32> = u_xlat8;
    u_xlat8 = vec4<f32>(x_404.x, x_405.y, x_405.z, x_404.y);
    let x_409 : vec4<f32> = u_xlat8;
    let x_412 : vec4<f32> = u_xlat5;
    u_xlat28 = ((vec2<f32>(x_409.x, x_409.w) * vec2<f32>(0.5f, 0.5f)) + -(vec2<f32>(x_412.x, x_412.y)));
    let x_416 : vec4<f32> = u_xlat5;
    let x_420 : vec2<f32> = (-(vec2<f32>(x_416.x, x_416.y)) + vec2<f32>(1.0f, 1.0f));
    let x_421 : vec4<f32> = u_xlat7;
    u_xlat7 = vec4<f32>(x_420.x, x_421.y, x_420.y, x_421.w);
    let x_424 : vec4<f32> = u_xlat5;
    let x_427 : vec2<f32> = min(vec2<f32>(x_424.x, x_424.y), vec2<f32>(0.0f, 0.0f));
    let x_428 : vec4<f32> = u_xlat9;
    u_xlat9 = vec4<f32>(x_427.x, x_427.y, x_428.z, x_428.w);
    let x_430 : vec4<f32> = u_xlat9;
    let x_433 : vec4<f32> = u_xlat9;
    let x_436 : vec4<f32> = u_xlat7;
    let x_438 : vec2<f32> = ((-(vec2<f32>(x_430.x, x_430.y)) * vec2<f32>(x_433.x, x_433.y)) + vec2<f32>(x_436.x, x_436.z));
    let x_439 : vec4<f32> = u_xlat7;
    u_xlat7 = vec4<f32>(x_438.x, x_439.y, x_438.y, x_439.w);
    let x_441 : vec4<f32> = u_xlat5;
    let x_443 : vec2<f32> = max(vec2<f32>(x_441.x, x_441.y), vec2<f32>(0.0f, 0.0f));
    let x_444 : vec4<f32> = u_xlat5;
    u_xlat5 = vec4<f32>(x_443.x, x_443.y, x_444.z, x_444.w);
    let x_446 : vec4<f32> = u_xlat5;
    let x_449 : vec4<f32> = u_xlat5;
    let x_452 : vec4<f32> = u_xlat7;
    let x_454 : vec2<f32> = ((-(vec2<f32>(x_446.x, x_446.y)) * vec2<f32>(x_449.x, x_449.y)) + vec2<f32>(x_452.y, x_452.w));
    let x_455 : vec4<f32> = u_xlat5;
    u_xlat5 = vec4<f32>(x_454.x, x_454.y, x_455.z, x_455.w);
    let x_458 : f32 = u_xlat28.x;
    u_xlat9.x = x_458;
    let x_461 : f32 = u_xlat7.x;
    u_xlat9.y = x_461;
    let x_464 : f32 = u_xlat5.x;
    u_xlat9.z = x_464;
    let x_467 : f32 = u_xlat8.x;
    u_xlat9.w = x_467;
    let x_469 : vec4<f32> = u_xlat9;
    u_xlat9 = (x_469 * vec4<f32>(0.444440007f, 0.444440007f, 0.444440007f, 0.222220004f));
    let x_475 : f32 = u_xlat28.y;
    u_xlat8.x = x_475;
    let x_478 : f32 = u_xlat7.z;
    u_xlat8.y = x_478;
    let x_481 : f32 = u_xlat5.y;
    u_xlat8.z = x_481;
    let x_483 : vec4<f32> = u_xlat8;
    u_xlat7 = (x_483 * vec4<f32>(0.444440007f, 0.444440007f, 0.444440007f, 0.222220004f));
    let x_485 : vec4<f32> = u_xlat9;
    let x_487 : vec4<f32> = u_xlat9;
    u_xlat8 = (vec4<f32>(x_485.y, x_485.w, x_485.y, x_485.w) + vec4<f32>(x_487.x, x_487.z, x_487.x, x_487.z));
    let x_491 : vec4<f32> = u_xlat7;
    let x_493 : vec4<f32> = u_xlat7;
    u_xlat10 = (vec4<f32>(x_491.y, x_491.y, x_491.w, x_491.w) + vec4<f32>(x_493.x, x_493.x, x_493.z, x_493.z));
    let x_496 : vec4<f32> = u_xlat9;
    let x_498 : vec4<f32> = u_xlat8;
    let x_500 : vec2<f32> = (vec2<f32>(x_496.y, x_496.w) / vec2<f32>(x_498.z, x_498.w));
    let x_501 : vec4<f32> = u_xlat5;
    u_xlat5 = vec4<f32>(x_500.x, x_500.y, x_501.z, x_501.w);
    let x_503 : vec4<f32> = u_xlat5;
    let x_507 : vec2<f32> = (vec2<f32>(x_503.x, x_503.y) + vec2<f32>(-1.5f, 0.5f));
    let x_508 : vec4<f32> = u_xlat5;
    u_xlat5 = vec4<f32>(x_507.x, x_507.y, x_508.z, x_508.w);
    let x_510 : vec4<f32> = u_xlat7;
    let x_512 : vec4<f32> = u_xlat10;
    u_xlat28 = (vec2<f32>(x_510.y, x_510.w) / vec2<f32>(x_512.y, x_512.w));
    let x_515 : vec2<f32> = u_xlat28;
    u_xlat28 = (x_515 + vec2<f32>(-1.5f, 0.5f));
    let x_517 : vec4<f32> = u_xlat5;
    let x_520 : vec4<f32> = x_36.x_ShadowMapTexture_TexelSize;
    let x_522 : vec2<f32> = (vec2<f32>(x_517.x, x_517.y) * vec2<f32>(x_520.x, x_520.x));
    let x_523 : vec4<f32> = u_xlat7;
    u_xlat7 = vec4<f32>(x_522.x, x_522.y, x_523.z, x_523.w);
    let x_525 : vec2<f32> = u_xlat28;
    let x_527 : vec4<f32> = x_36.x_ShadowMapTexture_TexelSize;
    let x_529 : vec2<f32> = (x_525 * vec2<f32>(x_527.y, x_527.y));
    let x_530 : vec4<f32> = u_xlat7;
    u_xlat7 = vec4<f32>(x_530.x, x_530.y, x_529.x, x_529.y);
    let x_532 : vec4<f32> = u_xlat8;
    let x_533 : vec4<f32> = u_xlat10;
    u_xlat8 = (x_532 * x_533);
    let x_535 : vec4<f32> = u_xlat6;
    let x_538 : vec4<f32> = x_36.x_ShadowMapTexture_TexelSize;
    let x_541 : vec4<f32> = u_xlat7;
    u_xlat9 = ((vec4<f32>(x_535.x, x_535.y, x_535.x, x_535.y) * vec4<f32>(x_538.x, x_538.y, x_538.x, x_538.y)) + vec4<f32>(x_541.x, x_541.z, x_541.y, x_541.z));
    let x_545 : vec4<f32> = u_xlat9;
    let x_546 : vec2<f32> = vec2<f32>(x_545.x, x_545.y);
    let x_548 : f32 = u_xlat5.z;
    txVec0 = vec3<f32>(x_546.x, x_546.y, x_548);
    let x_560 : vec3<f32> = txVec0;
    let x_562 : f32 = textureSampleCompareLevel(x_ShadowMapTexture, sampler_ShadowMapTexture, x_560.xy, x_560.z);
    u_xlat35 = x_562;
    let x_564 : vec4<f32> = u_xlat9;
    let x_565 : vec2<f32> = vec2<f32>(x_564.z, x_564.w);
    let x_567 : f32 = u_xlat5.z;
    txVec1 = vec3<f32>(x_565.x, x_565.y, x_567);
    let x_575 : vec3<f32> = txVec1;
    let x_577 : f32 = textureSampleCompareLevel(x_ShadowMapTexture, sampler_ShadowMapTexture, x_575.xy, x_575.z);
    u_xlat36 = x_577;
    let x_578 : f32 = u_xlat36;
    let x_580 : f32 = u_xlat8.y;
    u_xlat36 = (x_578 * x_580);
    let x_583 : f32 = u_xlat8.x;
    let x_584 : f32 = u_xlat35;
    let x_586 : f32 = u_xlat36;
    u_xlat35 = ((x_583 * x_584) + x_586);
    let x_588 : vec4<f32> = u_xlat6;
    let x_591 : vec4<f32> = x_36.x_ShadowMapTexture_TexelSize;
    let x_594 : vec4<f32> = u_xlat7;
    u_xlat6 = ((vec4<f32>(x_588.x, x_588.y, x_588.x, x_588.y) * vec4<f32>(x_591.x, x_591.y, x_591.x, x_591.y)) + vec4<f32>(x_594.x, x_594.w, x_594.y, x_594.w));
    let x_598 : vec4<f32> = u_xlat6;
    let x_599 : vec2<f32> = vec2<f32>(x_598.x, x_598.y);
    let x_601 : f32 = u_xlat5.z;
    txVec2 = vec3<f32>(x_599.x, x_599.y, x_601);
    let x_608 : vec3<f32> = txVec2;
    let x_610 : f32 = textureSampleCompareLevel(x_ShadowMapTexture, sampler_ShadowMapTexture, x_608.xy, x_608.z);
    u_xlat36 = x_610;
    let x_612 : f32 = u_xlat8.z;
    let x_613 : f32 = u_xlat36;
    let x_615 : f32 = u_xlat35;
    u_xlat35 = ((x_612 * x_613) + x_615);
    let x_618 : vec4<f32> = u_xlat6;
    let x_619 : vec2<f32> = vec2<f32>(x_618.z, x_618.w);
    let x_621 : f32 = u_xlat5.z;
    txVec3 = vec3<f32>(x_619.x, x_619.y, x_621);
    let x_628 : vec3<f32> = txVec3;
    let x_630 : f32 = textureSampleCompareLevel(x_ShadowMapTexture, sampler_ShadowMapTexture, x_628.xy, x_628.z);
    u_xlat36 = x_630;
    let x_632 : f32 = u_xlat8.w;
    let x_633 : f32 = u_xlat36;
    let x_635 : f32 = u_xlat35;
    u_xlat35 = ((x_632 * x_633) + x_635);
    let x_638 : f32 = x_36.x_LightShadowData.x;
    u_xlat36 = (-(x_638) + 1.0f);
    let x_641 : f32 = u_xlat35;
    let x_642 : f32 = u_xlat36;
    let x_645 : f32 = x_36.x_LightShadowData.x;
    u_xlat35 = ((x_641 * x_642) + x_645);
  } else {
    u_xlat35 = 1.0f;
  }
  let x_648 : f32 = u_xlat34;
  let x_649 : f32 = u_xlat35;
  u_xlat34 = (x_648 + -(x_649));
  let x_652 : f32 = u_xlat33;
  let x_653 : f32 = u_xlat34;
  let x_655 : f32 = u_xlat35;
  u_xlat33 = ((x_652 * x_653) + x_655);
  let x_658 : f32 = u_xlat4.z;
  u_xlatb34 = (0.0f < x_658);
  let x_660 : bool = u_xlatb34;
  u_xlat34 = select(0.0f, 1.0f, x_660);
  let x_662 : vec4<f32> = u_xlat4;
  let x_664 : vec4<f32> = u_xlat4;
  let x_666 : vec2<f32> = (vec2<f32>(x_662.x, x_662.y) / vec2<f32>(x_664.w, x_664.w));
  let x_667 : vec4<f32> = u_xlat5;
  u_xlat5 = vec4<f32>(x_666.x, x_666.y, x_667.z, x_667.w);
  let x_669 : vec4<f32> = u_xlat5;
  let x_671 : vec2<f32> = (vec2<f32>(x_669.x, x_669.y) + vec2<f32>(0.5f, 0.5f));
  let x_672 : vec4<f32> = u_xlat5;
  u_xlat5 = vec4<f32>(x_671.x, x_671.y, x_672.z, x_672.w);
  let x_679 : vec4<f32> = u_xlat5;
  let x_681 : vec4<f32> = textureSample(x_LightTexture0, sampler_LightTexture0, vec2<f32>(x_679.x, x_679.y));
  u_xlat35 = x_681.w;
  let x_683 : f32 = u_xlat34;
  let x_684 : f32 = u_xlat35;
  u_xlat34 = (x_683 * x_684);
  let x_686 : vec4<f32> = u_xlat4;
  let x_688 : vec4<f32> = u_xlat4;
  u_xlat35 = dot(vec3<f32>(x_686.x, x_686.y, x_686.z), vec3<f32>(x_688.x, x_688.y, x_688.z));
  let x_696 : f32 = u_xlat35;
  let x_698 : vec4<f32> = textureSample(x_LightTextureB0, sampler_LightTextureB0, vec2<f32>(x_696, x_696));
  u_xlat35 = x_698.x;
  let x_700 : f32 = u_xlat34;
  let x_701 : f32 = u_xlat35;
  u_xlat34 = (x_700 * x_701);
  let x_703 : f32 = u_xlat33;
  let x_704 : f32 = u_xlat34;
  u_xlat33 = (x_703 * x_704);
  let x_709 : f32 = vs_TEXCOORD2.w;
  u_xlat4.x = x_709;
  let x_713 : f32 = vs_TEXCOORD3.w;
  u_xlat4.y = x_713;
  let x_716 : f32 = vs_TEXCOORD4.w;
  u_xlat4.z = x_716;
  let x_718 : vec4<f32> = u_xlat4;
  let x_720 : vec4<f32> = u_xlat4;
  u_xlat34 = dot(vec3<f32>(x_718.x, x_718.y, x_718.z), vec3<f32>(x_720.x, x_720.y, x_720.z));
  let x_723 : f32 = u_xlat34;
  u_xlat34 = inverseSqrt(x_723);
  let x_725 : f32 = u_xlat34;
  let x_727 : vec4<f32> = u_xlat4;
  let x_729 : vec3<f32> = (vec3<f32>(x_725, x_725, x_725) * vec3<f32>(x_727.x, x_727.y, x_727.z));
  let x_730 : vec4<f32> = u_xlat5;
  u_xlat5 = vec4<f32>(x_729.x, x_729.y, x_729.z, x_730.w);
  let x_732 : f32 = u_xlat33;
  let x_736 : vec4<f32> = x_36.x_LightColor0;
  let x_738 : vec3<f32> = (vec3<f32>(x_732, x_732, x_732) * vec3<f32>(x_736.x, x_736.y, x_736.z));
  let x_739 : vec4<f32> = u_xlat6;
  u_xlat6 = vec4<f32>(x_738.x, x_738.y, x_738.z, x_739.w);
  let x_743 : f32 = x_36.x_Glossiness;
  u_xlat33 = (-(x_743) + 1.0f);
  let x_746 : vec4<f32> = u_xlat4;
  let x_748 : f32 = u_xlat34;
  let x_751 : vec3<f32> = u_xlat3;
  let x_753 : vec3<f32> = ((vec3<f32>(x_746.x, x_746.y, x_746.z) * vec3<f32>(x_748, x_748, x_748)) + -(x_751));
  let x_754 : vec4<f32> = u_xlat4;
  u_xlat4 = vec4<f32>(x_753.x, x_753.y, x_753.z, x_754.w);
  let x_756 : vec4<f32> = u_xlat4;
  let x_758 : vec4<f32> = u_xlat4;
  u_xlat34 = dot(vec3<f32>(x_756.x, x_756.y, x_756.z), vec3<f32>(x_758.x, x_758.y, x_758.z));
  let x_761 : f32 = u_xlat34;
  u_xlat34 = max(x_761, 0.001f);
  let x_764 : f32 = u_xlat34;
  u_xlat34 = inverseSqrt(x_764);
  let x_766 : f32 = u_xlat34;
  let x_768 : vec4<f32> = u_xlat4;
  let x_770 : vec3<f32> = (vec3<f32>(x_766, x_766, x_766) * vec3<f32>(x_768.x, x_768.y, x_768.z));
  let x_771 : vec4<f32> = u_xlat4;
  u_xlat4 = vec4<f32>(x_770.x, x_770.y, x_770.z, x_771.w);
  let x_773 : vec4<f32> = u_xlat2;
  let x_775 : vec3<f32> = u_xlat3;
  u_xlat34 = dot(vec3<f32>(x_773.x, x_773.y, x_773.z), -(x_775));
  let x_778 : vec4<f32> = u_xlat2;
  let x_780 : vec4<f32> = u_xlat5;
  u_xlat35 = dot(vec3<f32>(x_778.x, x_778.y, x_778.z), vec3<f32>(x_780.x, x_780.y, x_780.z));
  let x_783 : f32 = u_xlat35;
  u_xlat35 = clamp(x_783, 0.0f, 1.0f);
  let x_785 : vec4<f32> = u_xlat2;
  let x_787 : vec4<f32> = u_xlat4;
  u_xlat2.x = dot(vec3<f32>(x_785.x, x_785.y, x_785.z), vec3<f32>(x_787.x, x_787.y, x_787.z));
  let x_792 : f32 = u_xlat2.x;
  u_xlat2.x = clamp(x_792, 0.0f, 1.0f);
  let x_796 : vec4<f32> = u_xlat5;
  let x_798 : vec4<f32> = u_xlat4;
  u_xlat13 = dot(vec3<f32>(x_796.x, x_796.y, x_796.z), vec3<f32>(x_798.x, x_798.y, x_798.z));
  let x_801 : f32 = u_xlat13;
  u_xlat13 = clamp(x_801, 0.0f, 1.0f);
  let x_804 : f32 = u_xlat13;
  let x_805 : f32 = u_xlat13;
  u_xlat24 = (x_804 * x_805);
  let x_807 : f32 = u_xlat24;
  let x_809 : f32 = u_xlat33;
  u_xlat24 = dot(vec2<f32>(x_807, x_807), vec2<f32>(x_809, x_809));
  let x_812 : f32 = u_xlat24;
  u_xlat24 = (x_812 + -0.5f);
  let x_815 : f32 = u_xlat35;
  u_xlat3.x = (-(x_815) + 1.0f);
  let x_821 : f32 = u_xlat3.x;
  let x_823 : f32 = u_xlat3.x;
  u_xlat14 = (x_821 * x_823);
  let x_825 : f32 = u_xlat14;
  let x_826 : f32 = u_xlat14;
  u_xlat14 = (x_825 * x_826);
  let x_829 : f32 = u_xlat3.x;
  let x_830 : f32 = u_xlat14;
  u_xlat3.x = (x_829 * x_830);
  let x_833 : f32 = u_xlat24;
  let x_835 : f32 = u_xlat3.x;
  u_xlat3.x = ((x_833 * x_835) + 1.0f);
  let x_839 : f32 = u_xlat34;
  u_xlat14 = (-(abs(x_839)) + 1.0f);
  let x_844 : f32 = u_xlat14;
  let x_845 : f32 = u_xlat14;
  u_xlat25 = (x_844 * x_845);
  let x_847 : f32 = u_xlat25;
  let x_848 : f32 = u_xlat25;
  u_xlat25 = (x_847 * x_848);
  let x_850 : f32 = u_xlat14;
  let x_851 : f32 = u_xlat25;
  u_xlat14 = (x_850 * x_851);
  let x_853 : f32 = u_xlat24;
  let x_854 : f32 = u_xlat14;
  u_xlat24 = ((x_853 * x_854) + 1.0f);
  let x_857 : f32 = u_xlat24;
  let x_859 : f32 = u_xlat3.x;
  u_xlat24 = (x_857 * x_859);
  let x_861 : f32 = u_xlat35;
  let x_862 : f32 = u_xlat24;
  u_xlat24 = (x_861 * x_862);
  let x_864 : f32 = u_xlat33;
  let x_865 : f32 = u_xlat33;
  u_xlat33 = (x_864 * x_865);
  let x_867 : f32 = u_xlat33;
  u_xlat33 = max(x_867, 0.002f);
  let x_870 : f32 = u_xlat33;
  u_xlat3.x = (-(x_870) + 1.0f);
  let x_874 : f32 = u_xlat34;
  let x_877 : f32 = u_xlat3.x;
  let x_879 : f32 = u_xlat33;
  u_xlat14 = ((abs(x_874) * x_877) + x_879);
  let x_881 : f32 = u_xlat35;
  let x_883 : f32 = u_xlat3.x;
  let x_885 : f32 = u_xlat33;
  u_xlat3.x = ((x_881 * x_883) + x_885);
  let x_888 : f32 = u_xlat34;
  let x_891 : f32 = u_xlat3.x;
  u_xlat34 = (abs(x_888) * x_891);
  let x_893 : f32 = u_xlat35;
  let x_894 : f32 = u_xlat14;
  let x_896 : f32 = u_xlat34;
  u_xlat34 = ((x_893 * x_894) + x_896);
  let x_898 : f32 = u_xlat34;
  u_xlat34 = (x_898 + 0.00001f);
  let x_901 : f32 = u_xlat34;
  u_xlat34 = (0.5f / x_901);
  let x_903 : f32 = u_xlat33;
  let x_904 : f32 = u_xlat33;
  u_xlat33 = (x_903 * x_904);
  let x_907 : f32 = u_xlat2.x;
  let x_908 : f32 = u_xlat33;
  let x_911 : f32 = u_xlat2.x;
  u_xlat3.x = ((x_907 * x_908) + -(x_911));
  let x_916 : f32 = u_xlat3.x;
  let x_918 : f32 = u_xlat2.x;
  u_xlat2.x = ((x_916 * x_918) + 1.0f);
  let x_922 : f32 = u_xlat33;
  u_xlat33 = (x_922 * 0.318309873f);
  let x_926 : f32 = u_xlat2.x;
  let x_928 : f32 = u_xlat2.x;
  u_xlat2.x = ((x_926 * x_928) + 0.0000001f);
  let x_933 : f32 = u_xlat33;
  let x_935 : f32 = u_xlat2.x;
  u_xlat33 = (x_933 / x_935);
  let x_937 : f32 = u_xlat33;
  let x_938 : f32 = u_xlat34;
  u_xlat33 = (x_937 * x_938);
  let x_940 : f32 = u_xlat35;
  let x_941 : f32 = u_xlat33;
  u_xlat33 = (x_940 * x_941);
  let x_943 : f32 = u_xlat33;
  u_xlat33 = (x_943 * 3.141592741f);
  let x_946 : f32 = u_xlat33;
  u_xlat33 = max(x_946, 0.0f);
  let x_948 : vec3<f32> = u_xlat0;
  let x_949 : vec3<f32> = u_xlat0;
  u_xlat34 = dot(x_948, x_949);
  let x_951 : f32 = u_xlat34;
  u_xlatb34 = !((x_951 == 0.0f));
  let x_953 : bool = u_xlatb34;
  u_xlat34 = select(0.0f, 1.0f, x_953);
  let x_955 : f32 = u_xlat33;
  let x_956 : f32 = u_xlat34;
  u_xlat33 = (x_955 * x_956);
  let x_958 : f32 = u_xlat24;
  let x_960 : vec4<f32> = u_xlat6;
  let x_962 : vec3<f32> = (vec3<f32>(x_958, x_958, x_958) * vec3<f32>(x_960.x, x_960.y, x_960.z));
  let x_963 : vec4<f32> = u_xlat2;
  u_xlat2 = vec4<f32>(x_962.x, x_963.y, x_962.y, x_962.z);
  let x_965 : vec4<f32> = u_xlat6;
  let x_967 : f32 = u_xlat33;
  u_xlat3 = (vec3<f32>(x_965.x, x_965.y, x_965.z) * vec3<f32>(x_967, x_967, x_967));
  let x_970 : f32 = u_xlat13;
  u_xlat33 = (-(x_970) + 1.0f);
  let x_973 : f32 = u_xlat33;
  let x_974 : f32 = u_xlat33;
  u_xlat34 = (x_973 * x_974);
  let x_976 : f32 = u_xlat34;
  let x_977 : f32 = u_xlat34;
  u_xlat34 = (x_976 * x_977);
  let x_979 : f32 = u_xlat33;
  let x_980 : f32 = u_xlat34;
  u_xlat33 = (x_979 * x_980);
  let x_982 : vec3<f32> = u_xlat0;
  let x_985 : vec3<f32> = (-(x_982) + vec3<f32>(1.0f, 1.0f, 1.0f));
  let x_986 : vec4<f32> = u_xlat4;
  u_xlat4 = vec4<f32>(x_985.x, x_985.y, x_985.z, x_986.w);
  let x_988 : vec4<f32> = u_xlat4;
  let x_990 : f32 = u_xlat33;
  let x_993 : vec3<f32> = u_xlat0;
  u_xlat0 = ((vec3<f32>(x_988.x, x_988.y, x_988.z) * vec3<f32>(x_990, x_990, x_990)) + x_993);
  let x_995 : vec3<f32> = u_xlat0;
  let x_996 : vec3<f32> = u_xlat3;
  u_xlat0 = (x_995 * x_996);
  let x_1000 : vec3<f32> = u_xlat1;
  let x_1001 : vec4<f32> = u_xlat2;
  let x_1004 : vec3<f32> = u_xlat0;
  let x_1005 : vec3<f32> = ((x_1000 * vec3<f32>(x_1001.x, x_1001.z, x_1001.w)) + x_1004);
  let x_1006 : vec4<f32> = SV_Target0;
  SV_Target0 = vec4<f32>(x_1005.x, x_1005.y, x_1005.z, x_1006.w);
  SV_Target0.w = 1.0f;
  return;
}

struct main_out {
  @location(0)
  SV_Target0_1 : vec4<f32>,
}

@fragment
fn main(@location(0) vs_TEXCOORD0_param : vec4<f32>, @location(4) vs_TEXCOORD4_param : vec4<f32>, @location(1) vs_TEXCOORD1_param : vec4<f32>, @location(5) vs_TEXCOORD5_param : vec3<f32>, @location(2) vs_TEXCOORD2_param : vec4<f32>, @location(3) vs_TEXCOORD3_param : vec4<f32>, @builtin(position) gl_FragCoord_param : vec4<f32>) -> main_out {
  vs_TEXCOORD0 = vs_TEXCOORD0_param;
  vs_TEXCOORD4 = vs_TEXCOORD4_param;
  vs_TEXCOORD1 = vs_TEXCOORD1_param;
  vs_TEXCOORD5 = vs_TEXCOORD5_param;
  vs_TEXCOORD2 = vs_TEXCOORD2_param;
  vs_TEXCOORD3 = vs_TEXCOORD3_param;
  gl_FragCoord = gl_FragCoord_param;
  main_1();
  return main_out(SV_Target0);
}

