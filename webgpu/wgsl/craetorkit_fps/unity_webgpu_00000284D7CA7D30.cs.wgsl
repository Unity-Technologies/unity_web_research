struct CB1 {
  InvLowResolution : vec4<f32>,
  InvHighResolution : vec4<f32>,
  AdditionalParams : vec4<f32>,
}

struct S {
  value : array<u32, 1u>,
}

struct S_1 {
  value : array<u32, 1u>,
}

struct S_2 {
  value : array<u32, 1u>,
}

var<private> gl_LocalInvocationID : vec3<u32>;

var<private> gl_GlobalInvocationID : vec3<u32>;

@group(1) @binding(0) var<uniform> x_65 : CB1;

@group(0) @binding(2) var LoResAO1 : texture_2d<f32>;

@group(0) @binding(6) var samplerLoResAO1 : sampler;

var<workgroup> TGSM1 : array<S, 256u>;

@group(0) @binding(0) var LoResDB : texture_2d<f32>;

@group(0) @binding(4) var samplerLoResDB : sampler;

var<workgroup> TGSM0 : array<S_1, 256u>;

var<private> gl_LocalInvocationIndex : u32;

var<workgroup> TGSM2 : array<S_2, 256u>;

@group(0) @binding(1) var HiResDB : texture_2d<f32>;

@group(0) @binding(5) var samplerHiResDB : sampler;

@group(0) @binding(3) var AoResult_origX0X : texture_storage_2d<r32float, write>;

fn main_1() {
  var u_xlati0 : i32;
  var u_xlati8 : vec3<i32>;
  var u_xlat8 : vec3<f32>;
  var u_xlat1 : vec4<f32>;
  var u_xlati24 : i32;
  var u_xlati17 : vec2<i32>;
  var u_xlat2 : vec4<f32>;
  var u_xlatb0 : vec2<bool>;
  var u_xlatu0 : u32;
  var u_xlatu1 : u32;
  var u_xlati16 : i32;
  var u_xlat16 : vec2<f32>;
  var u_xlati1 : vec4<i32>;
  var u_xlat24 : f32;
  var u_xlat10 : f32;
  var u_xlat18 : vec2<f32>;
  var u_xlati3 : vec2<i32>;
  var u_xlat26 : f32;
  var u_xlat19 : f32;
  var u_xlat27 : f32;
  var u_xlat4 : f32;
  var u_xlat12 : f32;
  var u_xlat17 : f32;
  var u_xlat25 : f32;
  var u_xlat3 : vec4<f32>;
  var u_xlat11 : f32;
  var u_xlat20 : f32;
  var u_xlat28 : f32;
  var u_xlat5 : vec4<f32>;
  var u_xlat13 : f32;
  var u_xlat21 : f32;
  var u_xlatb11 : bool;
  var u_xlatb27 : bool;
  var u_xlatb4 : bool;
  var u_xlatb17 : bool;
  var u_xlatb25 : bool;
  var u_xlatb3 : bool;
  var x_502 : f32;
  var x_512 : f32;
  var u_xlati11 : i32;
  var u_xlat7 : f32;
  var x_531 : f32;
  var u_xlat6 : f32;
  var x_542 : f32;
  var x_553 : f32;
  var x_600 : f32;
  var u_xlatb24 : bool;
  var x_617 : f32;
  var x_627 : f32;
  var x_674 : f32;
  var x_691 : f32;
  var u_xlat9 : f32;
  var u_xlati2 : vec4<i32>;
  var u_xlatb2 : bool;
  var u_xlatb10 : bool;
  var u_xlatb18 : vec2<bool>;
  var x_1010 : f32;
  var x_1020 : f32;
  var x_1040 : f32;
  var x_1051 : f32;
  var x_1090 : f32;
  var u_xlatb1 : bool;
  var x_1116 : f32;
  var u_xlat0 : vec4<f32>;
  var u_xlatu2 : vec4<u32>;
  var u_xlati4 : vec4<i32>;
  var u_xlat_precise_vec4 : vec4<f32>;
  var u_xlat_precise_ivec4 : vec4<i32>;
  var u_xlat_precise_bvec4 : vec4<bool>;
  var u_xlat_precise_uvec4 : vec4<u32>;
  let x_16 : u32 = gl_LocalInvocationID.x;
  u_xlati0 = (bitcast<i32>(x_16) << bitcast<u32>(1i));
  let x_22 : u32 = gl_LocalInvocationID.y;
  let x_26 : i32 = u_xlati0;
  u_xlati0 = ((bitcast<i32>(x_22) * 32i) + x_26);
  let x_32 : vec3<u32> = gl_LocalInvocationID;
  let x_37 : vec3<u32> = gl_GlobalInvocationID;
  let x_40 : vec2<i32> = (bitcast<vec2<i32>>(vec2<u32>(x_32.x, x_32.y)) + bitcast<vec2<i32>>(vec2<u32>(x_37.x, x_37.y)));
  let x_41 : vec3<i32> = u_xlati8;
  u_xlati8 = vec3<i32>(x_40.x, x_40.y, x_41.z);
  let x_43 : vec3<i32> = u_xlati8;
  let x_47 : vec2<i32> = (vec2<i32>(x_43.x, x_43.y) + vec2<i32>(-2i, -2i));
  let x_48 : vec3<i32> = u_xlati8;
  u_xlati8 = vec3<i32>(x_47.x, x_47.y, x_48.z);
  let x_54 : vec3<i32> = u_xlati8;
  let x_57 : vec2<f32> = vec2<f32>(vec2<i32>(x_54.x, x_54.y));
  let x_58 : vec3<f32> = u_xlat8;
  u_xlat8 = vec3<f32>(x_57.x, x_57.y, x_58.z);
  let x_60 : vec3<f32> = u_xlat8;
  let x_69 : vec4<f32> = x_65.InvLowResolution;
  let x_71 : vec2<f32> = (vec2<f32>(x_60.x, x_60.y) * vec2<f32>(x_69.x, x_69.y));
  let x_72 : vec3<f32> = u_xlat8;
  u_xlat8 = vec3<f32>(x_71.x, x_71.y, x_72.z);
  let x_86 : vec3<f32> = u_xlat8;
  let x_88 : vec4<f32> = textureGather(0i, LoResAO1, samplerLoResAO1, vec2<f32>(x_86.x, x_86.y));
  u_xlat1 = x_88;
  let x_95 : i32 = u_xlati0;
  let x_99 : f32 = u_xlat1.w;
  TGSM1[x_95].value[0i] = bitcast<u32>(x_99);
  let x_104 : i32 = u_xlati0;
  u_xlati24 = (x_104 + 1i);
  let x_106 : i32 = u_xlati24;
  let x_109 : f32 = u_xlat1.z;
  TGSM1[x_106].value[0i] = bitcast<u32>(x_109);
  let x_114 : i32 = u_xlati0;
  u_xlati17 = (vec2<i32>(x_114, x_114) + vec2<i32>(16i, 17i));
  let x_121 : i32 = u_xlati17.x;
  let x_123 : f32 = u_xlat1.x;
  TGSM1[x_121].value[0i] = bitcast<u32>(x_123);
  let x_127 : i32 = u_xlati17.y;
  let x_129 : f32 = u_xlat1.y;
  TGSM1[x_127].value[0i] = bitcast<u32>(x_129);
  let x_138 : vec3<f32> = u_xlat8;
  let x_140 : vec4<f32> = textureGather(0i, LoResDB, samplerLoResDB, vec2<f32>(x_138.x, x_138.y));
  u_xlat2 = x_140;
  let x_143 : vec4<f32> = u_xlat2;
  u_xlat2 = (vec4<f32>(1.0f, 1.0f, 1.0f, 1.0f) / x_143);
  let x_149 : i32 = u_xlati0;
  let x_151 : f32 = u_xlat2.w;
  TGSM0[x_149].value[0i] = bitcast<u32>(x_151);
  let x_154 : i32 = u_xlati24;
  let x_156 : f32 = u_xlat2.z;
  TGSM0[x_154].value[0i] = bitcast<u32>(x_156);
  let x_160 : i32 = u_xlati17.x;
  let x_162 : f32 = u_xlat2.x;
  TGSM0[x_160].value[0i] = bitcast<u32>(x_162);
  let x_166 : i32 = u_xlati17.y;
  let x_168 : f32 = u_xlat2.y;
  TGSM0[x_166].value[0i] = bitcast<u32>(x_168);
  workgroupBarrier();
  let x_177 : u32 = gl_LocalInvocationIndex;
  let x_178 : u32 = gl_LocalInvocationIndex;
  let x_179 : u32 = gl_LocalInvocationIndex;
  let x_180 : u32 = gl_LocalInvocationIndex;
  let x_187 : vec4<bool> = (vec4<u32>(x_177, x_178, x_179, x_180) < vec4<u32>(39u, 45u, 0u, 0u));
  u_xlatb0 = vec2<bool>(x_187.x, x_187.y);
  let x_191 : bool = u_xlatb0.x;
  if (x_191) {
    let x_196 : u32 = gl_LocalInvocationIndex;
    u_xlatu0 = (x_196 / 3u);
    let x_199 : u32 = gl_LocalInvocationIndex;
    u_xlatu1 = (x_199 % 3u);
    let x_202 : u32 = u_xlatu1;
    u_xlati16 = (bitcast<i32>(x_202) * 3i);
    let x_206 : u32 = u_xlatu0;
    let x_209 : i32 = u_xlati16;
    u_xlati0 = ((bitcast<i32>(x_206) * 16i) + x_209);
    let x_213 : i32 = u_xlati0;
    let x_215 : u32 = TGSM1[x_213].value[0i];
    u_xlat16.x = bitcast<f32>(x_215);
    let x_221 : i32 = u_xlati0;
    u_xlati1 = (vec4<i32>(x_221, x_221, x_221, x_221) + vec4<i32>(1i, 2i, 3i, 4i));
    let x_229 : i32 = u_xlati1.x;
    let x_231 : u32 = TGSM1[x_229].value[0i];
    u_xlat24 = bitcast<f32>(x_231);
    let x_234 : i32 = u_xlati1.y;
    let x_236 : u32 = TGSM1[x_234].value[0i];
    u_xlat2.x = bitcast<f32>(x_236);
    let x_241 : i32 = u_xlati1.z;
    let x_243 : u32 = TGSM1[x_241].value[0i];
    u_xlat10 = bitcast<f32>(x_243);
    let x_247 : i32 = u_xlati1.w;
    let x_249 : u32 = TGSM1[x_247].value[0i];
    u_xlat18.x = bitcast<f32>(x_249);
    let x_253 : i32 = u_xlati0;
    u_xlati3 = (vec2<i32>(x_253, x_253) + vec2<i32>(5i, 6i));
    let x_261 : i32 = u_xlati3.x;
    let x_263 : u32 = TGSM1[x_261].value[0i];
    u_xlat26 = bitcast<f32>(x_263);
    let x_267 : i32 = u_xlati3.y;
    let x_269 : u32 = TGSM1[x_267].value[0i];
    u_xlat19 = bitcast<f32>(x_269);
    let x_272 : i32 = u_xlati0;
    let x_274 : u32 = TGSM0[x_272].value[0i];
    u_xlat27 = bitcast<f32>(x_274);
    let x_278 : i32 = u_xlati1.x;
    let x_280 : u32 = TGSM0[x_278].value[0i];
    u_xlat4 = bitcast<f32>(x_280);
    let x_284 : i32 = u_xlati1.y;
    let x_286 : u32 = TGSM0[x_284].value[0i];
    u_xlat12 = bitcast<f32>(x_286);
    let x_290 : i32 = u_xlati1.z;
    let x_292 : u32 = TGSM0[x_290].value[0i];
    u_xlat17 = bitcast<f32>(x_292);
    let x_296 : i32 = u_xlati1.w;
    let x_298 : u32 = TGSM0[x_296].value[0i];
    u_xlat25 = bitcast<f32>(x_298);
    let x_302 : i32 = u_xlati3.x;
    let x_304 : u32 = TGSM0[x_302].value[0i];
    u_xlat3.x = bitcast<f32>(x_304);
    let x_309 : i32 = u_xlati3.y;
    let x_311 : u32 = TGSM0[x_309].value[0i];
    u_xlat11 = bitcast<f32>(x_311);
    let x_313 : f32 = u_xlat27;
    let x_315 : f32 = u_xlat4;
    u_xlat27 = (-(x_313) + x_315);
    let x_317 : f32 = u_xlat4;
    let x_319 : f32 = u_xlat12;
    u_xlat4 = (-(x_317) + x_319);
    let x_321 : f32 = u_xlat12;
    let x_323 : f32 = u_xlat17;
    u_xlat12 = (-(x_321) + x_323);
    let x_325 : f32 = u_xlat17;
    let x_327 : f32 = u_xlat25;
    u_xlat17 = (-(x_325) + x_327);
    let x_329 : f32 = u_xlat25;
    let x_332 : f32 = u_xlat3.x;
    u_xlat25 = (-(x_329) + x_332);
    let x_335 : f32 = u_xlat3.x;
    let x_337 : f32 = u_xlat11;
    u_xlat3.x = (-(x_335) + x_337);
    let x_340 : f32 = u_xlat27;
    let x_341 : f32 = u_xlat27;
    let x_345 : f32 = x_65.AdditionalParams.y;
    u_xlat11 = ((x_340 * x_341) + x_345);
    let x_348 : f32 = u_xlat4;
    let x_349 : f32 = u_xlat4;
    let x_352 : f32 = x_65.AdditionalParams.y;
    u_xlat20 = ((x_348 * x_349) + x_352);
    let x_355 : f32 = u_xlat12;
    let x_356 : f32 = u_xlat12;
    let x_359 : f32 = x_65.AdditionalParams.y;
    u_xlat28 = ((x_355 * x_356) + x_359);
    let x_362 : f32 = u_xlat17;
    let x_363 : f32 = u_xlat17;
    let x_366 : f32 = x_65.AdditionalParams.y;
    u_xlat5.x = ((x_362 * x_363) + x_366);
    let x_370 : f32 = u_xlat25;
    let x_371 : f32 = u_xlat25;
    let x_374 : f32 = x_65.AdditionalParams.y;
    u_xlat13 = ((x_370 * x_371) + x_374);
    let x_378 : f32 = u_xlat3.x;
    let x_380 : f32 = u_xlat3.x;
    let x_383 : f32 = x_65.AdditionalParams.y;
    u_xlat21 = ((x_378 * x_380) + x_383);
    let x_385 : f32 = u_xlat27;
    let x_386 : f32 = u_xlat4;
    let x_389 : f32 = x_65.AdditionalParams.y;
    u_xlat27 = ((x_385 * x_386) + x_389);
    let x_391 : f32 = u_xlat27;
    let x_392 : f32 = u_xlat27;
    u_xlat27 = (x_391 * x_392);
    let x_394 : f32 = u_xlat11;
    let x_395 : f32 = u_xlat20;
    u_xlat11 = (x_394 * x_395);
    let x_397 : f32 = u_xlat11;
    let x_399 : f32 = x_65.AdditionalParams.z;
    u_xlat11 = (x_397 * x_399);
    let x_402 : f32 = u_xlat11;
    let x_403 : f32 = u_xlat27;
    u_xlatb11 = (x_402 < x_403);
    let x_405 : f32 = u_xlat4;
    let x_406 : f32 = u_xlat12;
    let x_409 : f32 = x_65.AdditionalParams.y;
    u_xlat27 = ((x_405 * x_406) + x_409);
    let x_411 : f32 = u_xlat27;
    let x_412 : f32 = u_xlat27;
    u_xlat27 = (x_411 * x_412);
    let x_414 : f32 = u_xlat28;
    let x_415 : f32 = u_xlat20;
    u_xlat4 = (x_414 * x_415);
    let x_417 : f32 = u_xlat4;
    let x_419 : f32 = x_65.AdditionalParams.z;
    u_xlat4 = (x_417 * x_419);
    let x_422 : f32 = u_xlat4;
    let x_423 : f32 = u_xlat27;
    u_xlatb27 = (x_422 < x_423);
    let x_425 : f32 = u_xlat12;
    let x_426 : f32 = u_xlat17;
    let x_429 : f32 = x_65.AdditionalParams.y;
    u_xlat4 = ((x_425 * x_426) + x_429);
    let x_431 : f32 = u_xlat4;
    let x_432 : f32 = u_xlat4;
    u_xlat4 = (x_431 * x_432);
    let x_434 : f32 = u_xlat28;
    let x_436 : f32 = u_xlat5.x;
    u_xlat12 = (x_434 * x_436);
    let x_438 : f32 = u_xlat12;
    let x_440 : f32 = x_65.AdditionalParams.z;
    u_xlat12 = (x_438 * x_440);
    let x_443 : f32 = u_xlat12;
    let x_444 : f32 = u_xlat4;
    u_xlatb4 = (x_443 < x_444);
    let x_446 : f32 = u_xlat17;
    let x_447 : f32 = u_xlat25;
    let x_450 : f32 = x_65.AdditionalParams.y;
    u_xlat17 = ((x_446 * x_447) + x_450);
    let x_452 : f32 = u_xlat17;
    let x_453 : f32 = u_xlat17;
    u_xlat17 = (x_452 * x_453);
    let x_455 : f32 = u_xlat13;
    let x_457 : f32 = u_xlat5.x;
    u_xlat12 = (x_455 * x_457);
    let x_459 : f32 = u_xlat12;
    let x_461 : f32 = x_65.AdditionalParams.z;
    u_xlat12 = (x_459 * x_461);
    let x_464 : f32 = u_xlat12;
    let x_465 : f32 = u_xlat17;
    u_xlatb17 = (x_464 < x_465);
    let x_467 : f32 = u_xlat25;
    let x_469 : f32 = u_xlat3.x;
    let x_472 : f32 = x_65.AdditionalParams.y;
    u_xlat25 = ((x_467 * x_469) + x_472);
    let x_474 : f32 = u_xlat25;
    let x_475 : f32 = u_xlat25;
    u_xlat25 = (x_474 * x_475);
    let x_477 : f32 = u_xlat21;
    let x_478 : f32 = u_xlat13;
    u_xlat3.x = (x_477 * x_478);
    let x_482 : f32 = u_xlat3.x;
    let x_484 : f32 = x_65.AdditionalParams.z;
    u_xlat3.x = (x_482 * x_484);
    let x_489 : f32 = u_xlat3.x;
    let x_490 : f32 = u_xlat25;
    u_xlatb25 = (x_489 < x_490);
    let x_493 : bool = u_xlatb27;
    let x_494 : bool = u_xlatb11;
    u_xlatb3 = (x_493 | x_494);
    let x_496 : bool = u_xlatb3;
    u_xlati3.x = select(0i, 1i, x_496);
    let x_500 : i32 = u_xlati3.x;
    if ((x_500 != 0i)) {
      let x_505 : f32 = u_xlat24;
      x_502 = x_505;
    } else {
      let x_508 : f32 = u_xlat2.x;
      x_502 = x_508;
    }
    let x_509 : f32 = x_502;
    u_xlat3.x = x_509;
    let x_511 : bool = u_xlatb11;
    if (x_511) {
      let x_516 : f32 = u_xlat16.x;
      x_512 = x_516;
    } else {
      let x_519 : f32 = u_xlat3.x;
      x_512 = x_519;
    }
    let x_520 : f32 = x_512;
    u_xlat16.x = x_520;
    let x_522 : bool = u_xlatb27;
    let x_523 : bool = u_xlatb4;
    u_xlatb11 = (x_522 | x_523);
    let x_526 : bool = u_xlatb11;
    u_xlati11 = select(0i, 1i, x_526);
    let x_529 : i32 = u_xlati11;
    if ((x_529 != 0i)) {
      let x_535 : f32 = u_xlat2.x;
      x_531 = x_535;
    } else {
      let x_537 : f32 = u_xlat10;
      x_531 = x_537;
    }
    let x_538 : f32 = x_531;
    u_xlat7 = x_538;
    let x_540 : i32 = u_xlati11;
    if ((x_540 != 0i)) {
      let x_545 : f32 = u_xlat10;
      x_542 = x_545;
    } else {
      let x_548 : f32 = u_xlat2.x;
      x_542 = x_548;
    }
    let x_549 : f32 = x_542;
    u_xlat6 = x_549;
    let x_550 : f32 = u_xlat7;
    u_xlat5.x = x_550;
    let x_552 : bool = u_xlatb4;
    if (x_552) {
      let x_557 : f32 = u_xlat18.x;
      x_553 = x_557;
    } else {
      let x_559 : f32 = u_xlat6;
      x_553 = x_559;
    }
    let x_560 : f32 = x_553;
    u_xlat11 = x_560;
    let x_562 : f32 = u_xlat16.x;
    let x_563 : f32 = u_xlat11;
    u_xlat16.x = (x_562 + x_563);
    let x_567 : f32 = u_xlat16.x;
    let x_571 : f32 = u_xlat3.x;
    u_xlat16.x = ((x_567 * 0.5f) + x_571);
    let x_575 : f32 = u_xlat2.x;
    let x_577 : f32 = u_xlat16.x;
    u_xlat16.x = (x_575 + x_577);
    let x_580 : f32 = u_xlat6;
    let x_582 : f32 = u_xlat16.x;
    u_xlat16.x = (x_580 + x_582);
    let x_586 : f32 = u_xlat16.x;
    u_xlat16.x = (x_586 * 0.25f);
    let x_594 : i32 = u_xlati0;
    let x_596 : f32 = u_xlat16.x;
    TGSM2[x_594].value[0i] = bitcast<u32>(x_596);
    let x_599 : bool = u_xlatb27;
    if (x_599) {
      let x_603 : f32 = u_xlat24;
      x_600 = x_603;
    } else {
      let x_606 : f32 = u_xlat5.x;
      x_600 = x_606;
    }
    let x_607 : f32 = x_600;
    u_xlat16.x = x_607;
    let x_610 : bool = u_xlatb4;
    let x_611 : bool = u_xlatb17;
    u_xlatb24 = (x_610 | x_611);
    let x_613 : bool = u_xlatb24;
    u_xlati24 = select(0i, 1i, x_613);
    let x_615 : i32 = u_xlati24;
    if ((x_615 != 0i)) {
      let x_620 : f32 = u_xlat10;
      x_617 = x_620;
    } else {
      let x_623 : f32 = u_xlat18.x;
      x_617 = x_623;
    }
    let x_624 : f32 = x_617;
    u_xlat7 = x_624;
    let x_625 : i32 = u_xlati24;
    if ((x_625 != 0i)) {
      let x_631 : f32 = u_xlat18.x;
      x_627 = x_631;
    } else {
      let x_633 : f32 = u_xlat10;
      x_627 = x_633;
    }
    let x_634 : f32 = x_627;
    u_xlat6 = x_634;
    let x_635 : f32 = u_xlat7;
    u_xlat3.x = x_635;
    let x_637 : bool = u_xlatb17;
    let x_638 : f32 = u_xlat26;
    let x_639 : f32 = u_xlat6;
    u_xlat24 = select(x_639, x_638, x_637);
    let x_641 : f32 = u_xlat24;
    let x_643 : f32 = u_xlat16.x;
    u_xlat16.x = (x_641 + x_643);
    let x_647 : f32 = u_xlat16.x;
    let x_650 : f32 = u_xlat5.x;
    u_xlat16.x = ((x_647 * 0.5f) + x_650);
    let x_653 : f32 = u_xlat10;
    let x_655 : f32 = u_xlat16.x;
    u_xlat16.x = (x_653 + x_655);
    let x_658 : f32 = u_xlat6;
    let x_660 : f32 = u_xlat16.x;
    u_xlat16.x = (x_658 + x_660);
    let x_664 : f32 = u_xlat16.x;
    u_xlat16.x = (x_664 * 0.25f);
    let x_668 : i32 = u_xlati1.x;
    let x_670 : f32 = u_xlat16.x;
    TGSM2[x_668].value[0i] = bitcast<u32>(x_670);
    let x_673 : bool = u_xlatb4;
    if (x_673) {
      let x_678 : f32 = u_xlat2.x;
      x_674 = x_678;
    } else {
      let x_681 : f32 = u_xlat3.x;
      x_674 = x_681;
    }
    let x_682 : f32 = x_674;
    u_xlat16.x = x_682;
    let x_684 : bool = u_xlatb17;
    let x_685 : bool = u_xlatb25;
    u_xlatb24 = (x_684 | x_685);
    let x_687 : bool = u_xlatb24;
    u_xlati24 = select(0i, 1i, x_687);
    let x_689 : i32 = u_xlati24;
    if ((x_689 != 0i)) {
      let x_694 : f32 = u_xlat26;
      x_691 = x_694;
    } else {
      let x_697 : f32 = u_xlat18.x;
      x_691 = x_697;
    }
    let x_698 : f32 = x_691;
    u_xlat24 = x_698;
    let x_699 : bool = u_xlatb25;
    let x_700 : f32 = u_xlat19;
    let x_701 : f32 = u_xlat24;
    u_xlat1.x = select(x_701, x_700, x_699);
    let x_705 : f32 = u_xlat16.x;
    let x_707 : f32 = u_xlat1.x;
    u_xlat16.x = (x_705 + x_707);
    let x_711 : f32 = u_xlat16.x;
    let x_714 : f32 = u_xlat3.x;
    u_xlat16.x = ((x_711 * 0.5f) + x_714);
    let x_718 : f32 = u_xlat18.x;
    let x_720 : f32 = u_xlat16.x;
    u_xlat16.x = (x_718 + x_720);
    let x_723 : f32 = u_xlat24;
    let x_725 : f32 = u_xlat16.x;
    u_xlat16.x = (x_723 + x_725);
    let x_729 : f32 = u_xlat16.x;
    u_xlat16.x = (x_729 * 0.25f);
    let x_733 : i32 = u_xlati1.y;
    let x_735 : f32 = u_xlat16.x;
    TGSM2[x_733].value[0i] = bitcast<u32>(x_735);
  }
  workgroupBarrier();
  let x_739 : bool = u_xlatb0.y;
  if (x_739) {
    let x_742 : u32 = gl_LocalInvocationIndex;
    u_xlatu0 = (x_742 / 9u);
    let x_745 : u32 = gl_LocalInvocationIndex;
    u_xlatu1 = (x_745 % 9u);
    let x_747 : u32 = u_xlatu0;
    let x_750 : u32 = u_xlatu1;
    u_xlati0 = ((bitcast<i32>(x_747) * 32i) + bitcast<i32>(x_750));
    let x_753 : i32 = u_xlati0;
    let x_755 : u32 = TGSM2[x_753].value[0i];
    u_xlat8.x = bitcast<f32>(x_755);
    let x_758 : i32 = u_xlati0;
    u_xlati16 = (x_758 + 16i);
    let x_760 : i32 = u_xlati16;
    let x_762 : u32 = TGSM2[x_760].value[0i];
    u_xlat24 = bitcast<f32>(x_762);
    let x_764 : i32 = u_xlati0;
    u_xlati1 = (vec4<i32>(x_764, x_764, x_764, x_764) + vec4<i32>(32i, 48i, 64i, 80i));
    let x_772 : i32 = u_xlati1.x;
    let x_774 : u32 = TGSM2[x_772].value[0i];
    u_xlat1.x = bitcast<f32>(x_774);
    let x_779 : i32 = u_xlati1.y;
    let x_781 : u32 = TGSM2[x_779].value[0i];
    u_xlat9 = bitcast<f32>(x_781);
    let x_784 : i32 = u_xlati1.z;
    let x_786 : u32 = TGSM2[x_784].value[0i];
    u_xlat17 = bitcast<f32>(x_786);
    let x_789 : i32 = u_xlati1.w;
    let x_791 : u32 = TGSM2[x_789].value[0i];
    u_xlat25 = bitcast<f32>(x_791);
    let x_794 : i32 = u_xlati0;
    u_xlati2 = (vec4<i32>(x_794, x_794, x_794, x_794) + vec4<i32>(2i, 18i, 34i, 50i));
    let x_802 : i32 = u_xlati2.x;
    let x_804 : u32 = TGSM0[x_802].value[0i];
    u_xlat2.x = bitcast<f32>(x_804);
    let x_808 : i32 = u_xlati2.y;
    let x_810 : u32 = TGSM0[x_808].value[0i];
    u_xlat10 = bitcast<f32>(x_810);
    let x_813 : i32 = u_xlati2.z;
    let x_815 : u32 = TGSM0[x_813].value[0i];
    u_xlat18.x = bitcast<f32>(x_815);
    let x_819 : i32 = u_xlati2.w;
    let x_821 : u32 = TGSM0[x_819].value[0i];
    u_xlat26 = bitcast<f32>(x_821);
    let x_823 : i32 = u_xlati0;
    u_xlati3 = (vec2<i32>(x_823, x_823) + vec2<i32>(66i, 82i));
    let x_830 : i32 = u_xlati3.x;
    let x_832 : u32 = TGSM0[x_830].value[0i];
    u_xlat3.x = bitcast<f32>(x_832);
    let x_836 : i32 = u_xlati3.y;
    let x_838 : u32 = TGSM0[x_836].value[0i];
    u_xlat11 = bitcast<f32>(x_838);
    let x_841 : f32 = u_xlat2.x;
    let x_843 : f32 = u_xlat10;
    u_xlat2.x = (-(x_841) + x_843);
    let x_846 : f32 = u_xlat10;
    let x_849 : f32 = u_xlat18.x;
    u_xlat10 = (-(x_846) + x_849);
    let x_852 : f32 = u_xlat18.x;
    let x_854 : f32 = u_xlat26;
    u_xlat18.x = (-(x_852) + x_854);
    let x_857 : f32 = u_xlat26;
    let x_860 : f32 = u_xlat3.x;
    u_xlat26 = (-(x_857) + x_860);
    let x_863 : f32 = u_xlat3.x;
    let x_865 : f32 = u_xlat11;
    u_xlat3.x = (-(x_863) + x_865);
    let x_869 : f32 = u_xlat2.x;
    let x_871 : f32 = u_xlat2.x;
    let x_874 : f32 = x_65.AdditionalParams.y;
    u_xlat11 = ((x_869 * x_871) + x_874);
    let x_876 : f32 = u_xlat10;
    let x_877 : f32 = u_xlat10;
    let x_880 : f32 = x_65.AdditionalParams.y;
    u_xlat19 = ((x_876 * x_877) + x_880);
    let x_883 : f32 = u_xlat18.x;
    let x_885 : f32 = u_xlat18.x;
    let x_888 : f32 = x_65.AdditionalParams.y;
    u_xlat27 = ((x_883 * x_885) + x_888);
    let x_890 : f32 = u_xlat26;
    let x_891 : f32 = u_xlat26;
    let x_894 : f32 = x_65.AdditionalParams.y;
    u_xlat4 = ((x_890 * x_891) + x_894);
    let x_897 : f32 = u_xlat3.x;
    let x_899 : f32 = u_xlat3.x;
    let x_902 : f32 = x_65.AdditionalParams.y;
    u_xlat12 = ((x_897 * x_899) + x_902);
    let x_905 : f32 = u_xlat2.x;
    let x_906 : f32 = u_xlat10;
    let x_909 : f32 = x_65.AdditionalParams.y;
    u_xlat2.x = ((x_905 * x_906) + x_909);
    let x_913 : f32 = u_xlat2.x;
    let x_915 : f32 = u_xlat2.x;
    u_xlat2.x = (x_913 * x_915);
    let x_918 : f32 = u_xlat19;
    let x_919 : f32 = u_xlat11;
    u_xlat11 = (x_918 * x_919);
    let x_921 : f32 = u_xlat11;
    let x_923 : f32 = x_65.AdditionalParams.z;
    u_xlat11 = (x_921 * x_923);
    let x_926 : f32 = u_xlat11;
    let x_928 : f32 = u_xlat2.x;
    u_xlatb2 = (x_926 < x_928);
    let x_930 : f32 = u_xlat10;
    let x_932 : f32 = u_xlat18.x;
    let x_935 : f32 = x_65.AdditionalParams.y;
    u_xlat10 = ((x_930 * x_932) + x_935);
    let x_937 : f32 = u_xlat10;
    let x_938 : f32 = u_xlat10;
    u_xlat10 = (x_937 * x_938);
    let x_940 : f32 = u_xlat27;
    let x_941 : f32 = u_xlat19;
    u_xlat11 = (x_940 * x_941);
    let x_943 : f32 = u_xlat11;
    let x_945 : f32 = x_65.AdditionalParams.z;
    u_xlat11 = (x_943 * x_945);
    let x_948 : f32 = u_xlat11;
    let x_949 : f32 = u_xlat10;
    u_xlatb10 = (x_948 < x_949);
    let x_952 : f32 = u_xlat18.x;
    let x_953 : f32 = u_xlat26;
    let x_956 : f32 = x_65.AdditionalParams.y;
    u_xlat18.x = ((x_952 * x_953) + x_956);
    let x_960 : f32 = u_xlat18.x;
    let x_962 : f32 = u_xlat18.x;
    u_xlat18.x = (x_960 * x_962);
    let x_965 : f32 = u_xlat27;
    let x_966 : f32 = u_xlat4;
    u_xlat11 = (x_965 * x_966);
    let x_968 : f32 = u_xlat11;
    let x_970 : f32 = x_65.AdditionalParams.z;
    u_xlat3.y = (x_968 * x_970);
    let x_973 : f32 = u_xlat26;
    let x_975 : f32 = u_xlat3.x;
    let x_978 : f32 = x_65.AdditionalParams.y;
    u_xlat26 = ((x_973 * x_975) + x_978);
    let x_980 : f32 = u_xlat26;
    let x_981 : f32 = u_xlat26;
    u_xlat18.y = (x_980 * x_981);
    let x_984 : f32 = u_xlat12;
    let x_985 : f32 = u_xlat4;
    u_xlat3.x = (x_984 * x_985);
    let x_989 : f32 = u_xlat3.x;
    let x_991 : f32 = x_65.AdditionalParams.z;
    u_xlat3.x = (x_989 * x_991);
    let x_995 : vec4<f32> = u_xlat3;
    let x_997 : vec2<f32> = u_xlat18;
    let x_999 : vec4<bool> = (vec4<f32>(x_995.y, x_995.x, x_995.y, x_995.x) < vec4<f32>(x_997.x, x_997.y, x_997.x, x_997.y));
    u_xlatb18 = vec2<bool>(x_999.x, x_999.y);
    let x_1001 : bool = u_xlatb10;
    let x_1002 : bool = u_xlatb2;
    u_xlatb3 = (x_1001 | x_1002);
    let x_1004 : bool = u_xlatb3;
    u_xlati3.x = select(0i, 1i, x_1004);
    let x_1008 : i32 = u_xlati3.x;
    if ((x_1008 != 0i)) {
      let x_1013 : f32 = u_xlat24;
      x_1010 = x_1013;
    } else {
      let x_1016 : f32 = u_xlat1.x;
      x_1010 = x_1016;
    }
    let x_1017 : f32 = x_1010;
    u_xlat3.x = x_1017;
    let x_1019 : bool = u_xlatb2;
    if (x_1019) {
      let x_1024 : f32 = u_xlat8.x;
      x_1020 = x_1024;
    } else {
      let x_1027 : f32 = u_xlat3.x;
      x_1020 = x_1027;
    }
    let x_1028 : f32 = x_1020;
    u_xlat8.x = x_1028;
    let x_1030 : bool = u_xlatb10;
    let x_1032 : bool = u_xlatb18.x;
    u_xlatb2 = (x_1030 | x_1032);
    let x_1034 : bool = u_xlatb2;
    u_xlati2.x = select(0i, 1i, x_1034);
    let x_1038 : i32 = u_xlati2.x;
    if ((x_1038 != 0i)) {
      let x_1044 : f32 = u_xlat1.x;
      x_1040 = x_1044;
    } else {
      let x_1046 : f32 = u_xlat9;
      x_1040 = x_1046;
    }
    let x_1047 : f32 = x_1040;
    u_xlat7 = x_1047;
    let x_1049 : i32 = u_xlati2.x;
    if ((x_1049 != 0i)) {
      let x_1054 : f32 = u_xlat9;
      x_1051 = x_1054;
    } else {
      let x_1057 : f32 = u_xlat1.x;
      x_1051 = x_1057;
    }
    let x_1058 : f32 = x_1051;
    u_xlat4 = x_1058;
    let x_1059 : f32 = u_xlat7;
    u_xlat2.x = x_1059;
    let x_1062 : bool = u_xlatb18.x;
    let x_1063 : f32 = u_xlat17;
    let x_1064 : f32 = u_xlat4;
    u_xlat11 = select(x_1064, x_1063, x_1062);
    let x_1067 : f32 = u_xlat8.x;
    let x_1068 : f32 = u_xlat11;
    u_xlat8.x = (x_1067 + x_1068);
    let x_1072 : f32 = u_xlat8.x;
    let x_1075 : f32 = u_xlat3.x;
    u_xlat8.x = ((x_1072 * 0.5f) + x_1075);
    let x_1079 : f32 = u_xlat1.x;
    let x_1081 : f32 = u_xlat8.x;
    u_xlat8.x = (x_1079 + x_1081);
    let x_1084 : f32 = u_xlat4;
    let x_1086 : f32 = u_xlat8.x;
    u_xlat8.x = (x_1084 + x_1086);
    let x_1089 : bool = u_xlatb10;
    if (x_1089) {
      let x_1093 : f32 = u_xlat24;
      x_1090 = x_1093;
    } else {
      let x_1096 : f32 = u_xlat2.x;
      x_1090 = x_1096;
    }
    let x_1097 : f32 = x_1090;
    u_xlat24 = x_1097;
    let x_1100 : bool = u_xlatb18.x;
    let x_1102 : bool = u_xlatb18.y;
    u_xlatb1 = (x_1100 | x_1102);
    let x_1104 : bool = u_xlatb1;
    u_xlati1.x = select(0i, 1i, x_1104);
    let x_1108 : i32 = u_xlati1.x;
    let x_1110 : f32 = u_xlat17;
    let x_1111 : f32 = u_xlat9;
    u_xlat1.x = select(x_1111, x_1110, (x_1108 != 0i));
    let x_1115 : bool = u_xlatb18.y;
    if (x_1115) {
      let x_1119 : f32 = u_xlat25;
      x_1116 = x_1119;
    } else {
      let x_1122 : f32 = u_xlat1.x;
      x_1116 = x_1122;
    }
    let x_1123 : f32 = x_1116;
    u_xlat17 = x_1123;
    let x_1124 : f32 = u_xlat24;
    let x_1125 : f32 = u_xlat17;
    u_xlat24 = (x_1124 + x_1125);
    let x_1127 : f32 = u_xlat24;
    let x_1130 : f32 = u_xlat2.x;
    u_xlat24 = ((x_1127 * 0.5f) + x_1130);
    let x_1132 : f32 = u_xlat9;
    let x_1133 : f32 = u_xlat24;
    u_xlat24 = (x_1132 + x_1133);
    let x_1136 : f32 = u_xlat1.x;
    let x_1137 : f32 = u_xlat24;
    u_xlat8.z = (x_1136 + x_1137);
    let x_1140 : vec3<f32> = u_xlat8;
    let x_1143 : vec2<f32> = (vec2<f32>(x_1140.x, x_1140.z) * vec2<f32>(0.25f, 0.25f));
    let x_1144 : vec3<f32> = u_xlat8;
    u_xlat8 = vec3<f32>(x_1143.x, x_1144.y, x_1143.y);
    let x_1146 : i32 = u_xlati0;
    let x_1148 : f32 = u_xlat8.x;
    TGSM1[x_1146].value[0i] = bitcast<u32>(x_1148);
    let x_1151 : i32 = u_xlati16;
    let x_1153 : f32 = u_xlat8.z;
    TGSM1[x_1151].value[0i] = bitcast<u32>(x_1153);
  }
  workgroupBarrier();
  let x_1157 : u32 = gl_LocalInvocationID.y;
  let x_1161 : u32 = gl_LocalInvocationID.x;
  u_xlati0 = ((bitcast<i32>(x_1157) * 16i) + bitcast<i32>(x_1161));
  let x_1164 : i32 = u_xlati0;
  u_xlati8 = (vec3<i32>(x_1164, x_1164, x_1164) + vec3<i32>(16i, 17i, 1i));
  let x_1169 : i32 = u_xlati8.x;
  let x_1171 : u32 = TGSM1[x_1169].value[0i];
  u_xlat1.y = bitcast<f32>(x_1171);
  let x_1175 : i32 = u_xlati8.y;
  let x_1177 : u32 = TGSM1[x_1175].value[0i];
  u_xlat1.z = bitcast<f32>(x_1177);
  let x_1181 : i32 = u_xlati8.z;
  let x_1183 : u32 = TGSM1[x_1181].value[0i];
  u_xlat1.w = bitcast<f32>(x_1183);
  let x_1186 : i32 = u_xlati0;
  let x_1188 : u32 = TGSM1[x_1186].value[0i];
  u_xlat1.x = bitcast<f32>(x_1188);
  let x_1192 : vec3<u32> = gl_GlobalInvocationID;
  let x_1194 : vec2<f32> = vec2<f32>(vec2<u32>(x_1192.x, x_1192.y));
  let x_1195 : vec4<f32> = u_xlat0;
  u_xlat0 = vec4<f32>(x_1194.x, x_1194.y, x_1195.z, x_1195.w);
  let x_1197 : vec4<f32> = u_xlat0;
  let x_1200 : vec4<f32> = x_65.InvLowResolution;
  let x_1202 : vec2<f32> = (vec2<f32>(x_1197.x, x_1197.y) * vec2<f32>(x_1200.x, x_1200.y));
  let x_1203 : vec4<f32> = u_xlat0;
  u_xlat0 = vec4<f32>(x_1202.x, x_1202.y, x_1203.z, x_1203.w);
  let x_1207 : vec3<u32> = gl_GlobalInvocationID;
  u_xlatu2 = bitcast<vec4<u32>>((bitcast<vec4<i32>>(vec4<u32>(x_1207.x, x_1207.y, x_1207.y, x_1207.y)) << bitcast<vec4<u32>>(vec4<i32>(1i, 1i, 1i, 1i))));
  let x_1213 : vec4<u32> = u_xlatu2;
  u_xlat16 = vec2<f32>(vec2<u32>(x_1213.x, x_1213.w));
  let x_1216 : vec2<f32> = u_xlat16;
  let x_1218 : vec4<f32> = x_65.InvHighResolution;
  u_xlat16 = (x_1216 * vec2<f32>(x_1218.x, x_1218.y));
  let x_1224 : vec4<f32> = u_xlat0;
  let x_1226 : vec4<f32> = textureGather(0i, LoResDB, samplerLoResDB, vec2<f32>(x_1224.x, x_1224.y));
  u_xlat3 = x_1226;
  let x_1232 : vec2<f32> = u_xlat16;
  let x_1233 : vec4<f32> = textureGather(0i, HiResDB, samplerHiResDB, x_1232);
  u_xlat0 = x_1233;
  let x_1235 : vec4<u32> = u_xlatu2;
  u_xlati4 = (bitcast<vec4<i32>>(vec4<u32>(x_1235.x, x_1235.w, x_1235.x, x_1235.w)) + vec4<i32>(-1i, 0i, 0i, -1i));
  let x_1241 : vec4<f32> = u_xlat3;
  let x_1243 : vec4<f32> = u_xlat0;
  u_xlat5 = (-(x_1241) + vec4<f32>(x_1243.x, x_1243.x, x_1243.x, x_1243.x));
  let x_1246 : vec4<f32> = u_xlat5;
  let x_1249 : vec4<f32> = x_65.AdditionalParams;
  u_xlat5 = (abs(x_1246) + vec4<f32>(x_1249.w, x_1249.w, x_1249.w, x_1249.w));
  let x_1255 : vec4<f32> = u_xlat5;
  u_xlat5 = (vec4<f32>(9.0f, 3.0f, 1.0f, 3.0f) / x_1255);
  let x_1257 : vec4<f32> = u_xlat5;
  u_xlat0.x = dot(x_1257, vec4<f32>(1.0f, 1.0f, 1.0f, 1.0f));
  let x_1261 : f32 = u_xlat0.x;
  let x_1263 : f32 = x_65.AdditionalParams.x;
  u_xlat0.x = (x_1261 + x_1263);
  let x_1266 : vec4<f32> = u_xlat1;
  let x_1268 : vec4<f32> = u_xlat5;
  u_xlat5.x = dot(vec4<f32>(x_1266.y, x_1266.z, x_1266.w, x_1266.x), x_1268);
  let x_1272 : f32 = u_xlat5.x;
  let x_1274 : f32 = x_65.AdditionalParams.x;
  u_xlat5.x = (x_1272 + x_1274);
  let x_1278 : f32 = u_xlat5.x;
  let x_1280 : f32 = u_xlat0.x;
  u_xlat0.x = (x_1278 / x_1280);
  let x_1287 : vec4<i32> = u_xlati4;
  let x_1289 : vec4<f32> = u_xlat0;
  textureStore(AoResult_origX0X, vec2<i32>(x_1287.x, x_1287.y), vec4<f32>(x_1289.x, x_1289.x, x_1289.x, x_1289.x));
  let x_1291 : vec4<f32> = u_xlat3;
  let x_1294 : vec4<f32> = u_xlat0;
  u_xlat5 = (-(vec4<f32>(x_1291.y, x_1291.z, x_1291.w, x_1291.x)) + vec4<f32>(x_1294.y, x_1294.y, x_1294.y, x_1294.y));
  let x_1297 : vec4<f32> = u_xlat5;
  let x_1300 : vec4<f32> = x_65.AdditionalParams;
  u_xlat5 = (abs(x_1297) + vec4<f32>(x_1300.w, x_1300.w, x_1300.w, x_1300.w));
  let x_1303 : vec4<f32> = u_xlat5;
  u_xlat5 = (vec4<f32>(9.0f, 3.0f, 1.0f, 3.0f) / x_1303);
  let x_1305 : vec4<f32> = u_xlat5;
  u_xlat0.x = dot(x_1305, vec4<f32>(1.0f, 1.0f, 1.0f, 1.0f));
  let x_1308 : vec4<f32> = u_xlat1;
  let x_1310 : vec4<f32> = u_xlat5;
  u_xlat0.y = dot(vec4<f32>(x_1308.z, x_1308.w, x_1308.x, x_1308.y), x_1310);
  let x_1313 : vec4<f32> = u_xlat0;
  let x_1316 : vec4<f32> = x_65.AdditionalParams;
  let x_1318 : vec2<f32> = (vec2<f32>(x_1313.x, x_1313.y) + vec2<f32>(x_1316.x, x_1316.x));
  let x_1319 : vec4<f32> = u_xlat0;
  u_xlat0 = vec4<f32>(x_1318.x, x_1318.y, x_1319.z, x_1319.w);
  let x_1322 : f32 = u_xlat0.y;
  let x_1324 : f32 = u_xlat0.x;
  u_xlat0.x = (x_1322 / x_1324);
  let x_1328 : vec4<u32> = u_xlatu2;
  let x_1331 : vec4<f32> = u_xlat0;
  textureStore(AoResult_origX0X, bitcast<vec2<i32>>(vec2<u32>(x_1328.x, x_1328.w)), vec4<f32>(x_1331.x, x_1331.x, x_1331.x, x_1331.x));
  let x_1333 : vec4<f32> = u_xlat3;
  let x_1336 : vec4<f32> = u_xlat0;
  u_xlat5 = (-(vec4<f32>(x_1333.z, x_1333.w, x_1333.x, x_1333.y)) + vec4<f32>(x_1336.z, x_1336.z, x_1336.z, x_1336.z));
  let x_1339 : vec4<f32> = u_xlat5;
  let x_1342 : vec4<f32> = x_65.AdditionalParams;
  u_xlat5 = (abs(x_1339) + vec4<f32>(x_1342.w, x_1342.w, x_1342.w, x_1342.w));
  let x_1345 : vec4<f32> = u_xlat5;
  u_xlat5 = (vec4<f32>(9.0f, 3.0f, 1.0f, 3.0f) / x_1345);
  let x_1347 : vec4<f32> = u_xlat5;
  u_xlat0.x = dot(x_1347, vec4<f32>(1.0f, 1.0f, 1.0f, 1.0f));
  let x_1350 : vec4<f32> = u_xlat1;
  let x_1352 : vec4<f32> = u_xlat5;
  u_xlat0.y = dot(vec4<f32>(x_1350.w, x_1350.x, x_1350.y, x_1350.z), x_1352);
  let x_1355 : vec4<f32> = u_xlat0;
  let x_1358 : vec4<f32> = x_65.AdditionalParams;
  let x_1360 : vec2<f32> = (vec2<f32>(x_1355.x, x_1355.y) + vec2<f32>(x_1358.x, x_1358.x));
  let x_1361 : vec4<f32> = u_xlat0;
  u_xlat0 = vec4<f32>(x_1360.x, x_1360.y, x_1361.z, x_1361.w);
  let x_1364 : f32 = u_xlat0.y;
  let x_1366 : f32 = u_xlat0.x;
  u_xlat0.x = (x_1364 / x_1366);
  let x_1370 : vec4<i32> = u_xlati4;
  let x_1372 : vec4<f32> = u_xlat0;
  textureStore(AoResult_origX0X, vec2<i32>(x_1370.z, x_1370.w), vec4<f32>(x_1372.x, x_1372.x, x_1372.x, x_1372.x));
  let x_1374 : vec4<u32> = u_xlatu2;
  u_xlati2 = (bitcast<vec4<i32>>(x_1374) + vec4<i32>(-1i, -1i, -1i, -1i));
  let x_1378 : vec4<f32> = u_xlat3;
  let x_1381 : vec4<f32> = u_xlat0;
  u_xlat0 = (-(vec4<f32>(x_1378.w, x_1378.x, x_1378.y, x_1378.z)) + vec4<f32>(x_1381.w, x_1381.w, x_1381.w, x_1381.w));
  let x_1384 : vec4<f32> = u_xlat0;
  let x_1387 : vec4<f32> = x_65.AdditionalParams;
  u_xlat0 = (abs(x_1384) + vec4<f32>(x_1387.w, x_1387.w, x_1387.w, x_1387.w));
  let x_1390 : vec4<f32> = u_xlat0;
  u_xlat0 = (vec4<f32>(9.0f, 3.0f, 1.0f, 3.0f) / x_1390);
  let x_1392 : vec4<f32> = u_xlat0;
  u_xlat3.x = dot(x_1392, vec4<f32>(1.0f, 1.0f, 1.0f, 1.0f));
  let x_1396 : f32 = u_xlat3.x;
  let x_1398 : f32 = x_65.AdditionalParams.x;
  u_xlat3.x = (x_1396 + x_1398);
  let x_1401 : vec4<f32> = u_xlat1;
  let x_1402 : vec4<f32> = u_xlat0;
  u_xlat0.x = dot(x_1401, x_1402);
  let x_1406 : f32 = u_xlat0.x;
  let x_1408 : f32 = x_65.AdditionalParams.x;
  u_xlat0.x = (x_1406 + x_1408);
  let x_1412 : f32 = u_xlat0.x;
  let x_1414 : f32 = u_xlat3.x;
  u_xlat0.x = (x_1412 / x_1414);
  let x_1418 : vec4<i32> = u_xlati2;
  let x_1420 : vec4<f32> = u_xlat0;
  textureStore(AoResult_origX0X, vec2<i32>(x_1418.x, x_1418.y), vec4<f32>(x_1420.x, x_1420.x, x_1420.x, x_1420.x));
  return;
}

@compute @workgroup_size(8i, 8i, 1i)
fn main(@builtin(local_invocation_id) gl_LocalInvocationID_param : vec3<u32>, @builtin(global_invocation_id) gl_GlobalInvocationID_param : vec3<u32>, @builtin(local_invocation_index) gl_LocalInvocationIndex_param : u32) {
  gl_LocalInvocationID = gl_LocalInvocationID_param;
  gl_GlobalInvocationID = gl_GlobalInvocationID_param;
  gl_LocalInvocationIndex = gl_LocalInvocationIndex_param;
  main_1();
}

