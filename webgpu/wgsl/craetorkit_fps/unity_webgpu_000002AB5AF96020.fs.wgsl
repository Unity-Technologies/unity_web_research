type Arr = array<vec4<f32>, 4u>;

type Arr_1 = array<mat4x4<f32>, 4u>;

struct PGlobals {
  unity_CameraInvProjection : mat4x4<f32>,
  unity_CameraToWorld : mat4x4<f32>,
  unity_ShadowSplitSpheres : Arr,
  unity_ShadowSplitSqRadii : vec4<f32>,
  unity_WorldToShadow : Arr_1,
  x_LightShadowData : vec4<f32>,
  x_ShadowMapTexture_TexelSize : vec4<f32>,
}

@group(0) @binding(0) var x_CameraDepthTexture : texture_2d<f32>;

@group(0) @binding(3) var sampler_CameraDepthTexture : sampler;

var<private> vs_TEXCOORD0 : vec4<f32>;

@group(1) @binding(0) var<uniform> x_62 : PGlobals;

@group(0) @binding(1) var x_ShadowMapTexture : texture_depth_2d;

@group(0) @binding(2) var sampler_ShadowMapTexture : sampler_comparison;

var<private> SV_Target0 : vec4<f32>;

var<private> gl_FragCoord : vec4<f32>;

fn main_1() {
  var u_xlat0 : vec4<f32>;
  var u_xlat1 : vec4<f32>;
  var u_xlat2 : vec4<f32>;
  var u_xlatb1 : vec4<bool>;
  var u_xlat3 : vec4<f32>;
  var u_xlat10 : vec2<f32>;
  var u_xlat18 : f32;
  var u_xlat4 : vec4<f32>;
  var u_xlat5 : vec4<f32>;
  var u_xlat6 : vec4<f32>;
  var u_xlat7 : vec4<f32>;
  var u_xlat8 : vec4<f32>;
  var txVec0 : vec3<f32>;
  var txVec1 : vec3<f32>;
  var u_xlat9 : vec3<f32>;
  var txVec2 : vec3<f32>;
  var txVec3 : vec3<f32>;
  var txVec4 : vec3<f32>;
  var txVec5 : vec3<f32>;
  var u_xlat27 : f32;
  var txVec6 : vec3<f32>;
  var txVec7 : vec3<f32>;
  var txVec8 : vec3<f32>;
  var txVec9 : vec3<f32>;
  var txVec10 : vec3<f32>;
  var txVec11 : vec3<f32>;
  var txVec12 : vec3<f32>;
  var txVec13 : vec3<f32>;
  var txVec14 : vec3<f32>;
  var txVec15 : vec3<f32>;
  var u_xlat_precise_vec4 : vec4<f32>;
  var u_xlat_precise_ivec4 : vec4<i32>;
  var u_xlat_precise_bvec4 : vec4<bool>;
  var u_xlat_precise_uvec4 : vec4<u32>;
  let x_23 : vec4<f32> = vs_TEXCOORD0;
  let x_25 : vec4<f32> = textureSample(x_CameraDepthTexture, sampler_CameraDepthTexture, vec2<f32>(x_23.x, x_23.y));
  u_xlat0.x = x_25.x;
  let x_32 : f32 = u_xlat0.x;
  u_xlat0.z = (-(x_32) + 1.0f);
  let x_38 : vec4<f32> = vs_TEXCOORD0;
  let x_39 : vec2<f32> = vec2<f32>(x_38.z, x_38.w);
  let x_40 : vec4<f32> = u_xlat0;
  u_xlat0 = vec4<f32>(x_39.x, x_39.y, x_40.z, x_40.w);
  let x_43 : vec4<f32> = u_xlat0;
  let x_50 : vec3<f32> = ((vec3<f32>(x_43.x, x_43.y, x_43.z) * vec3<f32>(2.0f, 2.0f, 2.0f)) + vec3<f32>(-1.0f, -1.0f, -1.0f));
  let x_51 : vec4<f32> = u_xlat0;
  u_xlat0 = vec4<f32>(x_50.x, x_50.y, x_50.z, x_51.w);
  let x_54 : vec4<f32> = u_xlat0;
  let x_68 : vec4<f32> = x_62.unity_CameraInvProjection[1i];
  u_xlat1 = (vec4<f32>(x_54.y, x_54.y, x_54.y, x_54.y) * x_68);
  let x_71 : vec4<f32> = x_62.unity_CameraInvProjection[0i];
  let x_72 : vec4<f32> = u_xlat0;
  let x_75 : vec4<f32> = u_xlat1;
  u_xlat1 = ((x_71 * vec4<f32>(x_72.x, x_72.x, x_72.x, x_72.x)) + x_75);
  let x_79 : vec4<f32> = x_62.unity_CameraInvProjection[2i];
  let x_80 : vec4<f32> = u_xlat0;
  let x_83 : vec4<f32> = u_xlat1;
  u_xlat0 = ((x_79 * vec4<f32>(x_80.z, x_80.z, x_80.z, x_80.z)) + x_83);
  let x_85 : vec4<f32> = u_xlat0;
  let x_88 : vec4<f32> = x_62.unity_CameraInvProjection[3i];
  u_xlat0 = (x_85 + x_88);
  let x_90 : vec4<f32> = u_xlat0;
  let x_92 : vec4<f32> = u_xlat0;
  let x_94 : vec3<f32> = (vec3<f32>(x_90.x, x_90.y, x_90.z) / vec3<f32>(x_92.w, x_92.w, x_92.w));
  let x_95 : vec4<f32> = u_xlat0;
  u_xlat0 = vec4<f32>(x_94.x, x_94.y, x_94.z, x_95.w);
  let x_97 : vec4<f32> = u_xlat0;
  let x_100 : vec4<f32> = x_62.unity_CameraToWorld[1i];
  u_xlat1 = (vec4<f32>(x_97.y, x_97.y, x_97.y, x_97.y) * x_100);
  let x_103 : vec4<f32> = x_62.unity_CameraToWorld[0i];
  let x_104 : vec4<f32> = u_xlat0;
  let x_107 : vec4<f32> = u_xlat1;
  u_xlat1 = ((x_103 * vec4<f32>(x_104.x, x_104.x, x_104.x, x_104.x)) + x_107);
  let x_110 : vec4<f32> = x_62.unity_CameraToWorld[2i];
  let x_111 : vec4<f32> = u_xlat0;
  let x_115 : vec4<f32> = u_xlat1;
  u_xlat0 = ((x_110 * -(vec4<f32>(x_111.z, x_111.z, x_111.z, x_111.z))) + x_115);
  let x_117 : vec4<f32> = u_xlat0;
  let x_119 : vec4<f32> = x_62.unity_CameraToWorld[3i];
  u_xlat0 = (x_117 + x_119);
  let x_121 : vec4<f32> = u_xlat0;
  let x_124 : vec4<f32> = x_62.unity_ShadowSplitSpheres[0i];
  let x_127 : vec3<f32> = (vec3<f32>(x_121.x, x_121.y, x_121.z) + -(vec3<f32>(x_124.x, x_124.y, x_124.z)));
  let x_128 : vec4<f32> = u_xlat1;
  u_xlat1 = vec4<f32>(x_127.x, x_127.y, x_127.z, x_128.w);
  let x_130 : vec4<f32> = u_xlat1;
  let x_132 : vec4<f32> = u_xlat1;
  u_xlat1.x = dot(vec3<f32>(x_130.x, x_130.y, x_130.z), vec3<f32>(x_132.x, x_132.y, x_132.z));
  let x_137 : vec4<f32> = u_xlat0;
  let x_140 : vec4<f32> = x_62.unity_ShadowSplitSpheres[1i];
  let x_143 : vec3<f32> = (vec3<f32>(x_137.x, x_137.y, x_137.z) + -(vec3<f32>(x_140.x, x_140.y, x_140.z)));
  let x_144 : vec4<f32> = u_xlat2;
  u_xlat2 = vec4<f32>(x_143.x, x_143.y, x_143.z, x_144.w);
  let x_146 : vec4<f32> = u_xlat2;
  let x_148 : vec4<f32> = u_xlat2;
  u_xlat1.y = dot(vec3<f32>(x_146.x, x_146.y, x_146.z), vec3<f32>(x_148.x, x_148.y, x_148.z));
  let x_153 : vec4<f32> = u_xlat0;
  let x_156 : vec4<f32> = x_62.unity_ShadowSplitSpheres[2i];
  let x_159 : vec3<f32> = (vec3<f32>(x_153.x, x_153.y, x_153.z) + -(vec3<f32>(x_156.x, x_156.y, x_156.z)));
  let x_160 : vec4<f32> = u_xlat2;
  u_xlat2 = vec4<f32>(x_159.x, x_159.y, x_159.z, x_160.w);
  let x_162 : vec4<f32> = u_xlat2;
  let x_164 : vec4<f32> = u_xlat2;
  u_xlat1.z = dot(vec3<f32>(x_162.x, x_162.y, x_162.z), vec3<f32>(x_164.x, x_164.y, x_164.z));
  let x_168 : vec4<f32> = u_xlat0;
  let x_171 : vec4<f32> = x_62.unity_ShadowSplitSpheres[3i];
  let x_174 : vec3<f32> = (vec3<f32>(x_168.x, x_168.y, x_168.z) + -(vec3<f32>(x_171.x, x_171.y, x_171.z)));
  let x_175 : vec4<f32> = u_xlat2;
  u_xlat2 = vec4<f32>(x_174.x, x_174.y, x_174.z, x_175.w);
  let x_177 : vec4<f32> = u_xlat2;
  let x_179 : vec4<f32> = u_xlat2;
  u_xlat1.w = dot(vec3<f32>(x_177.x, x_177.y, x_177.z), vec3<f32>(x_179.x, x_179.y, x_179.z));
  let x_188 : vec4<f32> = u_xlat1;
  let x_190 : vec4<f32> = x_62.unity_ShadowSplitSqRadii;
  u_xlatb1 = (x_188 < x_190);
  let x_194 : bool = u_xlatb1.x;
  u_xlat2.x = select(-0.0f, -1.0f, x_194);
  let x_199 : bool = u_xlatb1.y;
  u_xlat2.y = select(-0.0f, -1.0f, x_199);
  let x_203 : bool = u_xlatb1.z;
  u_xlat2.z = select(-0.0f, -1.0f, x_203);
  let x_207 : bool = u_xlatb1.x;
  u_xlat1.x = select(0.0f, 1.0f, x_207);
  let x_212 : bool = u_xlatb1.y;
  u_xlat1.y = select(0.0f, 1.0f, x_212);
  let x_216 : bool = u_xlatb1.z;
  u_xlat1.z = select(0.0f, 1.0f, x_216);
  let x_220 : bool = u_xlatb1.w;
  u_xlat1.w = select(0.0f, 1.0f, x_220);
  let x_223 : vec4<f32> = u_xlat2;
  let x_225 : vec4<f32> = u_xlat1;
  let x_227 : vec3<f32> = (vec3<f32>(x_223.x, x_223.y, x_223.z) + vec3<f32>(x_225.y, x_225.z, x_225.w));
  let x_228 : vec4<f32> = u_xlat2;
  u_xlat2 = vec4<f32>(x_227.x, x_227.y, x_227.z, x_228.w);
  let x_230 : vec4<f32> = u_xlat2;
  let x_233 : vec3<f32> = max(vec3<f32>(x_230.x, x_230.y, x_230.z), vec3<f32>(0.0f, 0.0f, 0.0f));
  let x_234 : vec4<f32> = u_xlat1;
  u_xlat1 = vec4<f32>(x_234.x, x_233.x, x_233.y, x_233.z);
  let x_236 : vec4<f32> = u_xlat0;
  let x_240 : vec4<f32> = x_62.unity_WorldToShadow[1i][1i];
  let x_242 : vec3<f32> = (vec3<f32>(x_236.y, x_236.y, x_236.y) * vec3<f32>(x_240.x, x_240.y, x_240.z));
  let x_243 : vec4<f32> = u_xlat2;
  u_xlat2 = vec4<f32>(x_242.x, x_242.y, x_242.z, x_243.w);
  let x_246 : vec4<f32> = x_62.unity_WorldToShadow[1i][0i];
  let x_248 : vec4<f32> = u_xlat0;
  let x_251 : vec4<f32> = u_xlat2;
  let x_253 : vec3<f32> = ((vec3<f32>(x_246.x, x_246.y, x_246.z) * vec3<f32>(x_248.x, x_248.x, x_248.x)) + vec3<f32>(x_251.x, x_251.y, x_251.z));
  let x_254 : vec4<f32> = u_xlat2;
  u_xlat2 = vec4<f32>(x_253.x, x_253.y, x_253.z, x_254.w);
  let x_257 : vec4<f32> = x_62.unity_WorldToShadow[1i][2i];
  let x_259 : vec4<f32> = u_xlat0;
  let x_262 : vec4<f32> = u_xlat2;
  let x_264 : vec3<f32> = ((vec3<f32>(x_257.x, x_257.y, x_257.z) * vec3<f32>(x_259.z, x_259.z, x_259.z)) + vec3<f32>(x_262.x, x_262.y, x_262.z));
  let x_265 : vec4<f32> = u_xlat2;
  u_xlat2 = vec4<f32>(x_264.x, x_264.y, x_264.z, x_265.w);
  let x_268 : vec4<f32> = x_62.unity_WorldToShadow[1i][3i];
  let x_270 : vec4<f32> = u_xlat0;
  let x_273 : vec4<f32> = u_xlat2;
  let x_275 : vec3<f32> = ((vec3<f32>(x_268.x, x_268.y, x_268.z) * vec3<f32>(x_270.w, x_270.w, x_270.w)) + vec3<f32>(x_273.x, x_273.y, x_273.z));
  let x_276 : vec4<f32> = u_xlat2;
  u_xlat2 = vec4<f32>(x_275.x, x_275.y, x_275.z, x_276.w);
  let x_278 : vec4<f32> = u_xlat1;
  let x_280 : vec4<f32> = u_xlat2;
  let x_282 : vec3<f32> = (vec3<f32>(x_278.y, x_278.y, x_278.y) * vec3<f32>(x_280.x, x_280.y, x_280.z));
  let x_283 : vec4<f32> = u_xlat2;
  u_xlat2 = vec4<f32>(x_282.x, x_282.y, x_282.z, x_283.w);
  let x_286 : vec4<f32> = u_xlat0;
  let x_289 : vec4<f32> = x_62.unity_WorldToShadow[0i][1i];
  let x_291 : vec3<f32> = (vec3<f32>(x_286.y, x_286.y, x_286.y) * vec3<f32>(x_289.x, x_289.y, x_289.z));
  let x_292 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_291.x, x_291.y, x_291.z, x_292.w);
  let x_295 : vec4<f32> = x_62.unity_WorldToShadow[0i][0i];
  let x_297 : vec4<f32> = u_xlat0;
  let x_300 : vec4<f32> = u_xlat3;
  let x_302 : vec3<f32> = ((vec3<f32>(x_295.x, x_295.y, x_295.z) * vec3<f32>(x_297.x, x_297.x, x_297.x)) + vec3<f32>(x_300.x, x_300.y, x_300.z));
  let x_303 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_302.x, x_302.y, x_302.z, x_303.w);
  let x_306 : vec4<f32> = x_62.unity_WorldToShadow[0i][2i];
  let x_308 : vec4<f32> = u_xlat0;
  let x_311 : vec4<f32> = u_xlat3;
  let x_313 : vec3<f32> = ((vec3<f32>(x_306.x, x_306.y, x_306.z) * vec3<f32>(x_308.z, x_308.z, x_308.z)) + vec3<f32>(x_311.x, x_311.y, x_311.z));
  let x_314 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_313.x, x_313.y, x_313.z, x_314.w);
  let x_317 : vec4<f32> = x_62.unity_WorldToShadow[0i][3i];
  let x_319 : vec4<f32> = u_xlat0;
  let x_322 : vec4<f32> = u_xlat3;
  let x_324 : vec3<f32> = ((vec3<f32>(x_317.x, x_317.y, x_317.z) * vec3<f32>(x_319.w, x_319.w, x_319.w)) + vec3<f32>(x_322.x, x_322.y, x_322.z));
  let x_325 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_324.x, x_324.y, x_324.z, x_325.w);
  let x_327 : vec4<f32> = u_xlat3;
  let x_329 : vec4<f32> = u_xlat1;
  let x_332 : vec4<f32> = u_xlat2;
  let x_334 : vec3<f32> = ((vec3<f32>(x_327.x, x_327.y, x_327.z) * vec3<f32>(x_329.x, x_329.x, x_329.x)) + vec3<f32>(x_332.x, x_332.y, x_332.z));
  let x_335 : vec4<f32> = u_xlat2;
  u_xlat2 = vec4<f32>(x_334.x, x_334.y, x_334.z, x_335.w);
  let x_337 : vec4<f32> = u_xlat1;
  u_xlat1.x = dot(x_337, vec4<f32>(1.0f, 1.0f, 1.0f, 1.0f));
  let x_341 : vec4<f32> = u_xlat0;
  let x_344 : vec4<f32> = x_62.unity_WorldToShadow[2i][1i];
  let x_346 : vec3<f32> = (vec3<f32>(x_341.y, x_341.y, x_341.y) * vec3<f32>(x_344.x, x_344.y, x_344.z));
  let x_347 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_346.x, x_346.y, x_346.z, x_347.w);
  let x_350 : vec4<f32> = x_62.unity_WorldToShadow[2i][0i];
  let x_352 : vec4<f32> = u_xlat0;
  let x_355 : vec4<f32> = u_xlat3;
  let x_357 : vec3<f32> = ((vec3<f32>(x_350.x, x_350.y, x_350.z) * vec3<f32>(x_352.x, x_352.x, x_352.x)) + vec3<f32>(x_355.x, x_355.y, x_355.z));
  let x_358 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_357.x, x_357.y, x_357.z, x_358.w);
  let x_361 : vec4<f32> = x_62.unity_WorldToShadow[2i][2i];
  let x_363 : vec4<f32> = u_xlat0;
  let x_366 : vec4<f32> = u_xlat3;
  let x_368 : vec3<f32> = ((vec3<f32>(x_361.x, x_361.y, x_361.z) * vec3<f32>(x_363.z, x_363.z, x_363.z)) + vec3<f32>(x_366.x, x_366.y, x_366.z));
  let x_369 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_368.x, x_368.y, x_368.z, x_369.w);
  let x_372 : vec4<f32> = x_62.unity_WorldToShadow[2i][3i];
  let x_374 : vec4<f32> = u_xlat0;
  let x_377 : vec4<f32> = u_xlat3;
  let x_379 : vec3<f32> = ((vec3<f32>(x_372.x, x_372.y, x_372.z) * vec3<f32>(x_374.w, x_374.w, x_374.w)) + vec3<f32>(x_377.x, x_377.y, x_377.z));
  let x_380 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_379.x, x_379.y, x_379.z, x_380.w);
  let x_382 : vec4<f32> = u_xlat3;
  let x_384 : vec4<f32> = u_xlat1;
  let x_387 : vec4<f32> = u_xlat2;
  let x_389 : vec3<f32> = ((vec3<f32>(x_382.x, x_382.y, x_382.z) * vec3<f32>(x_384.z, x_384.z, x_384.z)) + vec3<f32>(x_387.x, x_387.y, x_387.z));
  let x_390 : vec4<f32> = u_xlat2;
  u_xlat2 = vec4<f32>(x_389.x, x_389.y, x_389.z, x_390.w);
  let x_392 : vec4<f32> = u_xlat0;
  let x_395 : vec4<f32> = x_62.unity_WorldToShadow[3i][1i];
  let x_397 : vec3<f32> = (vec3<f32>(x_392.y, x_392.y, x_392.y) * vec3<f32>(x_395.x, x_395.y, x_395.z));
  let x_398 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_397.x, x_397.y, x_397.z, x_398.w);
  let x_401 : vec4<f32> = x_62.unity_WorldToShadow[3i][0i];
  let x_403 : vec4<f32> = u_xlat0;
  let x_406 : vec4<f32> = u_xlat3;
  let x_408 : vec3<f32> = ((vec3<f32>(x_401.x, x_401.y, x_401.z) * vec3<f32>(x_403.x, x_403.x, x_403.x)) + vec3<f32>(x_406.x, x_406.y, x_406.z));
  let x_409 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_408.x, x_408.y, x_408.z, x_409.w);
  let x_412 : vec4<f32> = x_62.unity_WorldToShadow[3i][2i];
  let x_414 : vec4<f32> = u_xlat0;
  let x_417 : vec4<f32> = u_xlat3;
  let x_419 : vec3<f32> = ((vec3<f32>(x_412.x, x_412.y, x_412.z) * vec3<f32>(x_414.z, x_414.z, x_414.z)) + vec3<f32>(x_417.x, x_417.y, x_417.z));
  let x_420 : vec4<f32> = u_xlat0;
  u_xlat0 = vec4<f32>(x_419.x, x_419.y, x_419.z, x_420.w);
  let x_423 : vec4<f32> = x_62.unity_WorldToShadow[3i][3i];
  let x_425 : vec4<f32> = u_xlat0;
  let x_428 : vec4<f32> = u_xlat0;
  let x_430 : vec3<f32> = ((vec3<f32>(x_423.x, x_423.y, x_423.z) * vec3<f32>(x_425.w, x_425.w, x_425.w)) + vec3<f32>(x_428.x, x_428.y, x_428.z));
  let x_431 : vec4<f32> = u_xlat0;
  u_xlat0 = vec4<f32>(x_430.x, x_430.y, x_430.z, x_431.w);
  let x_433 : vec4<f32> = u_xlat0;
  let x_435 : vec4<f32> = u_xlat1;
  let x_438 : vec4<f32> = u_xlat2;
  let x_440 : vec3<f32> = ((vec3<f32>(x_433.x, x_433.y, x_433.z) * vec3<f32>(x_435.w, x_435.w, x_435.w)) + vec3<f32>(x_438.x, x_438.y, x_438.z));
  let x_441 : vec4<f32> = u_xlat0;
  u_xlat0 = vec4<f32>(x_440.x, x_440.y, x_440.z, x_441.w);
  let x_445 : vec4<f32> = u_xlat0;
  let x_449 : vec4<f32> = x_62.x_ShadowMapTexture_TexelSize;
  u_xlat10 = ((vec2<f32>(x_445.x, x_445.y) * vec2<f32>(x_449.z, x_449.w)) + vec2<f32>(0.5f, 0.5f));
  let x_455 : vec2<f32> = u_xlat10;
  u_xlat10 = floor(x_455);
  let x_457 : vec4<f32> = u_xlat0;
  let x_460 : vec4<f32> = x_62.x_ShadowMapTexture_TexelSize;
  let x_463 : vec2<f32> = u_xlat10;
  let x_465 : vec2<f32> = ((vec2<f32>(x_457.x, x_457.y) * vec2<f32>(x_460.z, x_460.w)) + -(x_463));
  let x_466 : vec4<f32> = u_xlat0;
  u_xlat0 = vec4<f32>(x_465.x, x_465.y, x_466.z, x_466.w);
  let x_470 : f32 = u_xlat1.x;
  let x_473 : f32 = u_xlat0.z;
  u_xlat18 = (-(x_470) + x_473);
  let x_475 : f32 = u_xlat18;
  u_xlat18 = (x_475 + 1.0f);
  let x_477 : vec4<f32> = u_xlat0;
  let x_481 : vec2<f32> = (-(vec2<f32>(x_477.x, x_477.y)) + vec2<f32>(1.0f, 1.0f));
  let x_482 : vec4<f32> = u_xlat1;
  u_xlat1 = vec4<f32>(x_481.x, x_482.y, x_482.z, x_481.y);
  let x_484 : vec4<f32> = u_xlat0;
  let x_487 : vec2<f32> = min(vec2<f32>(x_484.x, x_484.y), vec2<f32>(0.0f, 0.0f));
  let x_488 : vec4<f32> = u_xlat2;
  u_xlat2 = vec4<f32>(x_487.x, x_487.y, x_488.z, x_488.w);
  let x_490 : vec4<f32> = u_xlat2;
  let x_493 : vec4<f32> = u_xlat2;
  let x_496 : vec4<f32> = u_xlat1;
  let x_498 : vec2<f32> = ((-(vec2<f32>(x_490.x, x_490.y)) * vec2<f32>(x_493.x, x_493.y)) + vec2<f32>(x_496.x, x_496.w));
  let x_499 : vec4<f32> = u_xlat1;
  u_xlat1 = vec4<f32>(x_498.x, x_499.y, x_499.z, x_498.y);
  let x_501 : vec4<f32> = u_xlat1;
  let x_504 : vec2<f32> = (vec2<f32>(x_501.x, x_501.w) + vec2<f32>(2.0f, 2.0f));
  let x_505 : vec4<f32> = u_xlat1;
  u_xlat1 = vec4<f32>(x_504.x, x_505.y, x_505.z, x_504.y);
  let x_507 : vec4<f32> = u_xlat1;
  let x_511 : vec2<f32> = (vec2<f32>(x_507.x, x_507.w) * vec2<f32>(0.081632003f, 0.081632003f));
  let x_512 : vec4<f32> = u_xlat2;
  u_xlat2 = vec4<f32>(x_511.x, x_511.y, x_512.z, x_512.w);
  let x_515 : f32 = u_xlat2.x;
  u_xlat3.y = x_515;
  let x_517 : vec4<f32> = u_xlat0;
  let x_519 : vec2<f32> = max(vec2<f32>(x_517.x, x_517.y), vec2<f32>(0.0f, 0.0f));
  let x_520 : vec4<f32> = u_xlat1;
  u_xlat1 = vec4<f32>(x_519.x, x_520.y, x_520.z, x_519.y);
  let x_523 : vec4<f32> = u_xlat0;
  u_xlat4 = (vec4<f32>(x_523.x, x_523.x, x_523.y, x_523.y) + vec4<f32>(0.5f, 1.0f, 0.5f, 1.0f));
  let x_527 : vec4<f32> = u_xlat1;
  let x_530 : vec4<f32> = u_xlat1;
  let x_533 : vec4<f32> = u_xlat4;
  let x_535 : vec2<f32> = ((-(vec2<f32>(x_527.x, x_527.w)) * vec2<f32>(x_530.x, x_530.w)) + vec2<f32>(x_533.y, x_533.w));
  let x_536 : vec4<f32> = u_xlat1;
  u_xlat1 = vec4<f32>(x_535.x, x_536.y, x_536.z, x_535.y);
  let x_538 : vec4<f32> = u_xlat4;
  let x_540 : vec4<f32> = u_xlat4;
  u_xlat4 = (vec4<f32>(x_538.x, x_538.x, x_538.z, x_538.z) * vec4<f32>(x_540.x, x_540.x, x_540.z, x_540.z));
  let x_543 : vec4<f32> = u_xlat1;
  let x_545 : vec2<f32> = (vec2<f32>(x_543.x, x_543.w) + vec2<f32>(2.0f, 2.0f));
  let x_546 : vec4<f32> = u_xlat1;
  u_xlat1 = vec4<f32>(x_545.x, x_546.y, x_546.z, x_545.y);
  let x_550 : f32 = u_xlat1.x;
  u_xlat5.z = (x_550 * 0.081632003f);
  let x_555 : f32 = u_xlat1.w;
  u_xlat6.z = (x_555 * 0.081632003f);
  let x_558 : vec4<f32> = u_xlat0;
  let x_565 : vec2<f32> = ((vec2<f32>(x_558.x, x_558.x) * vec2<f32>(-0.081632003f, 0.081632003f)) + vec2<f32>(0.163264006f, 0.081632003f));
  let x_566 : vec4<f32> = u_xlat5;
  u_xlat5 = vec4<f32>(x_566.x, x_565.x, x_566.z, x_565.y);
  let x_568 : vec4<f32> = u_xlat4;
  let x_571 : vec4<f32> = u_xlat0;
  let x_574 : vec2<f32> = ((vec2<f32>(x_568.x, x_568.z) * vec2<f32>(0.5f, 0.5f)) + -(vec2<f32>(x_571.x, x_571.y)));
  let x_575 : vec4<f32> = u_xlat1;
  u_xlat1 = vec4<f32>(x_574.x, x_575.y, x_575.z, x_574.y);
  let x_577 : vec4<f32> = u_xlat4;
  let x_581 : vec2<f32> = (vec2<f32>(x_577.y, x_577.w) * vec2<f32>(0.040816002f, 0.040816002f));
  let x_582 : vec4<f32> = u_xlat4;
  u_xlat4 = vec4<f32>(x_581.x, x_581.y, x_582.z, x_582.w);
  let x_584 : vec4<f32> = u_xlat1;
  let x_586 : vec2<f32> = (vec2<f32>(x_584.w, x_584.x) * vec2<f32>(0.081632003f, 0.081632003f));
  let x_587 : vec4<f32> = u_xlat6;
  u_xlat6 = vec4<f32>(x_586.x, x_586.y, x_587.z, x_587.w);
  let x_590 : f32 = u_xlat6.y;
  u_xlat5.x = x_590;
  let x_592 : vec4<f32> = u_xlat0;
  let x_596 : vec2<f32> = ((vec2<f32>(x_592.x, x_592.x) * vec2<f32>(-0.081632003f, 0.081632003f)) + vec2<f32>(0.081632003f, 0.163264006f));
  let x_597 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_596.x, x_597.y, x_596.y, x_597.w);
  let x_600 : f32 = u_xlat4.x;
  u_xlat3.w = x_600;
  let x_603 : f32 = u_xlat4.y;
  u_xlat2.w = x_603;
  let x_605 : vec4<f32> = u_xlat3;
  let x_606 : vec4<f32> = u_xlat5;
  u_xlat4 = (x_605 + x_606);
  let x_608 : vec4<f32> = u_xlat3;
  let x_609 : vec4<f32> = u_xlat4;
  u_xlat3 = (x_608 / x_609);
  let x_611 : vec4<f32> = u_xlat3;
  u_xlat3 = (x_611 + vec4<f32>(-3.5f, -1.5f, 0.5f, 2.5f));
  let x_617 : vec4<f32> = u_xlat3;
  let x_620 : vec4<f32> = x_62.x_ShadowMapTexture_TexelSize;
  u_xlat3 = (vec4<f32>(x_617.w, x_617.x, x_617.y, x_617.z) * vec4<f32>(x_620.x, x_620.x, x_620.x, x_620.x));
  let x_623 : vec4<f32> = u_xlat0;
  let x_626 : vec2<f32> = ((vec2<f32>(x_623.y, x_623.y) * vec2<f32>(-0.081632003f, 0.081632003f)) + vec2<f32>(0.163264006f, 0.081632003f));
  let x_627 : vec4<f32> = u_xlat6;
  u_xlat6 = vec4<f32>(x_627.x, x_626.x, x_627.z, x_626.y);
  let x_629 : vec4<f32> = u_xlat0;
  let x_632 : vec2<f32> = ((vec2<f32>(x_629.y, x_629.y) * vec2<f32>(-0.081632003f, 0.081632003f)) + vec2<f32>(0.081632003f, 0.163264006f));
  let x_633 : vec4<f32> = u_xlat2;
  u_xlat2 = vec4<f32>(x_632.x, x_633.y, x_632.y, x_633.w);
  let x_635 : vec4<f32> = u_xlat2;
  let x_636 : vec4<f32> = u_xlat6;
  u_xlat5 = (x_635 + x_636);
  let x_638 : vec4<f32> = u_xlat2;
  let x_639 : vec4<f32> = u_xlat5;
  u_xlat2 = (x_638 / x_639);
  let x_641 : vec4<f32> = u_xlat2;
  u_xlat2 = (x_641 + vec4<f32>(-3.5f, -1.5f, 0.5f, 2.5f));
  let x_643 : vec4<f32> = u_xlat2;
  let x_646 : vec4<f32> = x_62.x_ShadowMapTexture_TexelSize;
  u_xlat2 = (vec4<f32>(x_643.x, x_643.w, x_643.y, x_643.z) * vec4<f32>(x_646.y, x_646.y, x_646.y, x_646.y));
  let x_649 : vec4<f32> = u_xlat4;
  let x_650 : vec4<f32> = u_xlat5;
  u_xlat6 = (x_649 * vec4<f32>(x_650.x, x_650.x, x_650.x, x_650.x));
  let x_654 : vec4<f32> = u_xlat3;
  let x_655 : vec3<f32> = vec3<f32>(x_654.y, x_654.z, x_654.w);
  let x_656 : vec4<f32> = u_xlat7;
  u_xlat7 = vec4<f32>(x_655.x, x_656.y, x_655.y, x_655.z);
  let x_659 : f32 = u_xlat2.x;
  u_xlat7.y = x_659;
  let x_662 : vec2<f32> = u_xlat10;
  let x_665 : vec4<f32> = x_62.x_ShadowMapTexture_TexelSize;
  let x_668 : vec4<f32> = u_xlat7;
  u_xlat8 = ((vec4<f32>(x_662.x, x_662.y, x_662.x, x_662.y) * vec4<f32>(x_665.x, x_665.y, x_665.x, x_665.y)) + vec4<f32>(x_668.x, x_668.y, x_668.z, x_668.y));
  let x_673 : vec4<f32> = u_xlat8;
  let x_674 : vec2<f32> = vec2<f32>(x_673.x, x_673.y);
  let x_675 : f32 = u_xlat18;
  txVec0 = vec3<f32>(x_674.x, x_674.y, x_675);
  let x_687 : vec3<f32> = txVec0;
  let x_689 : f32 = textureSampleCompareLevel(x_ShadowMapTexture, sampler_ShadowMapTexture, x_687.xy, x_687.z);
  u_xlat0.x = x_689;
  let x_692 : vec4<f32> = u_xlat8;
  let x_693 : vec2<f32> = vec2<f32>(x_692.z, x_692.w);
  let x_694 : f32 = u_xlat18;
  txVec1 = vec3<f32>(x_693.x, x_693.y, x_694);
  let x_702 : vec3<f32> = txVec1;
  let x_704 : f32 = textureSampleCompareLevel(x_ShadowMapTexture, sampler_ShadowMapTexture, x_702.xy, x_702.z);
  u_xlat9.x = x_704;
  let x_707 : f32 = u_xlat9.x;
  let x_709 : f32 = u_xlat6.y;
  u_xlat9.x = (x_707 * x_709);
  let x_713 : f32 = u_xlat6.x;
  let x_715 : f32 = u_xlat0.x;
  let x_718 : f32 = u_xlat9.x;
  u_xlat0.x = ((x_713 * x_715) + x_718);
  let x_721 : vec2<f32> = u_xlat10;
  let x_723 : vec4<f32> = x_62.x_ShadowMapTexture_TexelSize;
  let x_726 : vec4<f32> = u_xlat7;
  let x_728 : vec2<f32> = ((x_721 * vec2<f32>(x_723.x, x_723.y)) + vec2<f32>(x_726.w, x_726.y));
  let x_729 : vec3<f32> = u_xlat9;
  u_xlat9 = vec3<f32>(x_728.x, x_729.y, x_728.y);
  let x_732 : f32 = u_xlat7.y;
  u_xlat3.y = x_732;
  let x_734 : vec2<f32> = u_xlat10;
  let x_736 : vec4<f32> = x_62.x_ShadowMapTexture_TexelSize;
  let x_739 : vec4<f32> = u_xlat3;
  let x_741 : vec2<f32> = ((x_734 * vec2<f32>(x_736.x, x_736.y)) + vec2<f32>(x_739.x, x_739.y));
  let x_742 : vec4<f32> = u_xlat1;
  u_xlat1 = vec4<f32>(x_741.x, x_742.y, x_742.z, x_741.y);
  let x_745 : vec4<f32> = u_xlat1;
  let x_746 : vec2<f32> = vec2<f32>(x_745.x, x_745.w);
  let x_747 : f32 = u_xlat18;
  txVec2 = vec3<f32>(x_746.x, x_746.y, x_747);
  let x_754 : vec3<f32> = txVec2;
  let x_756 : f32 = textureSampleCompareLevel(x_ShadowMapTexture, sampler_ShadowMapTexture, x_754.xy, x_754.z);
  u_xlat1.x = x_756;
  let x_759 : vec3<f32> = u_xlat9;
  let x_760 : vec2<f32> = vec2<f32>(x_759.x, x_759.z);
  let x_761 : f32 = u_xlat18;
  txVec3 = vec3<f32>(x_760.x, x_760.y, x_761);
  let x_768 : vec3<f32> = txVec3;
  let x_770 : f32 = textureSampleCompareLevel(x_ShadowMapTexture, sampler_ShadowMapTexture, x_768.xy, x_768.z);
  u_xlat9.x = x_770;
  let x_773 : f32 = u_xlat6.z;
  let x_775 : f32 = u_xlat9.x;
  let x_778 : f32 = u_xlat0.x;
  u_xlat0.x = ((x_773 * x_775) + x_778);
  let x_782 : f32 = u_xlat6.w;
  let x_784 : f32 = u_xlat1.x;
  let x_787 : f32 = u_xlat0.x;
  u_xlat0.x = ((x_782 * x_784) + x_787);
  let x_790 : vec4<f32> = u_xlat4;
  let x_791 : vec4<f32> = u_xlat5;
  u_xlat6 = (x_790 * vec4<f32>(x_791.y, x_791.y, x_791.y, x_791.y));
  let x_795 : f32 = u_xlat2.z;
  u_xlat7.y = x_795;
  let x_797 : vec2<f32> = u_xlat10;
  let x_800 : vec4<f32> = x_62.x_ShadowMapTexture_TexelSize;
  let x_803 : vec4<f32> = u_xlat7;
  u_xlat8 = ((vec4<f32>(x_797.x, x_797.y, x_797.x, x_797.y) * vec4<f32>(x_800.x, x_800.y, x_800.x, x_800.y)) + vec4<f32>(x_803.x, x_803.y, x_803.z, x_803.y));
  let x_807 : vec4<f32> = u_xlat8;
  let x_808 : vec2<f32> = vec2<f32>(x_807.x, x_807.y);
  let x_809 : f32 = u_xlat18;
  txVec4 = vec3<f32>(x_808.x, x_808.y, x_809);
  let x_816 : vec3<f32> = txVec4;
  let x_818 : f32 = textureSampleCompareLevel(x_ShadowMapTexture, sampler_ShadowMapTexture, x_816.xy, x_816.z);
  u_xlat9.x = x_818;
  let x_821 : vec4<f32> = u_xlat8;
  let x_822 : vec2<f32> = vec2<f32>(x_821.z, x_821.w);
  let x_823 : f32 = u_xlat18;
  txVec5 = vec3<f32>(x_822.x, x_822.y, x_823);
  let x_831 : vec3<f32> = txVec5;
  let x_833 : f32 = textureSampleCompareLevel(x_ShadowMapTexture, sampler_ShadowMapTexture, x_831.xy, x_831.z);
  u_xlat27 = x_833;
  let x_835 : f32 = u_xlat6.x;
  let x_837 : f32 = u_xlat9.x;
  let x_840 : f32 = u_xlat0.x;
  u_xlat0.x = ((x_835 * x_837) + x_840);
  let x_844 : f32 = u_xlat6.y;
  let x_845 : f32 = u_xlat27;
  let x_848 : f32 = u_xlat0.x;
  u_xlat0.x = ((x_844 * x_845) + x_848);
  let x_851 : vec2<f32> = u_xlat10;
  let x_853 : vec4<f32> = x_62.x_ShadowMapTexture_TexelSize;
  let x_856 : vec4<f32> = u_xlat7;
  let x_858 : vec2<f32> = ((x_851 * vec2<f32>(x_853.x, x_853.y)) + vec2<f32>(x_856.w, x_856.y));
  let x_859 : vec3<f32> = u_xlat9;
  u_xlat9 = vec3<f32>(x_858.x, x_859.y, x_858.y);
  let x_862 : f32 = u_xlat7.y;
  u_xlat3.z = x_862;
  let x_864 : vec2<f32> = u_xlat10;
  let x_866 : vec4<f32> = x_62.x_ShadowMapTexture_TexelSize;
  let x_869 : vec4<f32> = u_xlat3;
  let x_871 : vec2<f32> = ((x_864 * vec2<f32>(x_866.x, x_866.y)) + vec2<f32>(x_869.x, x_869.z));
  let x_872 : vec4<f32> = u_xlat1;
  u_xlat1 = vec4<f32>(x_871.x, x_872.y, x_872.z, x_871.y);
  let x_875 : vec4<f32> = u_xlat1;
  let x_876 : vec2<f32> = vec2<f32>(x_875.x, x_875.w);
  let x_877 : f32 = u_xlat18;
  txVec6 = vec3<f32>(x_876.x, x_876.y, x_877);
  let x_884 : vec3<f32> = txVec6;
  let x_886 : f32 = textureSampleCompareLevel(x_ShadowMapTexture, sampler_ShadowMapTexture, x_884.xy, x_884.z);
  u_xlat1.x = x_886;
  let x_889 : vec3<f32> = u_xlat9;
  let x_890 : vec2<f32> = vec2<f32>(x_889.x, x_889.z);
  let x_891 : f32 = u_xlat18;
  txVec7 = vec3<f32>(x_890.x, x_890.y, x_891);
  let x_898 : vec3<f32> = txVec7;
  let x_900 : f32 = textureSampleCompareLevel(x_ShadowMapTexture, sampler_ShadowMapTexture, x_898.xy, x_898.z);
  u_xlat9.x = x_900;
  let x_903 : f32 = u_xlat6.z;
  let x_905 : f32 = u_xlat9.x;
  let x_908 : f32 = u_xlat0.x;
  u_xlat0.x = ((x_903 * x_905) + x_908);
  let x_912 : f32 = u_xlat6.w;
  let x_914 : f32 = u_xlat1.x;
  let x_917 : f32 = u_xlat0.x;
  u_xlat0.x = ((x_912 * x_914) + x_917);
  let x_920 : vec4<f32> = u_xlat4;
  let x_921 : vec4<f32> = u_xlat5;
  u_xlat6 = (x_920 * vec4<f32>(x_921.z, x_921.z, x_921.z, x_921.z));
  let x_924 : vec4<f32> = u_xlat4;
  let x_925 : vec4<f32> = u_xlat5;
  u_xlat4 = (x_924 * vec4<f32>(x_925.w, x_925.w, x_925.w, x_925.w));
  let x_929 : f32 = u_xlat2.w;
  u_xlat7.y = x_929;
  let x_931 : vec2<f32> = u_xlat10;
  let x_934 : vec4<f32> = x_62.x_ShadowMapTexture_TexelSize;
  let x_937 : vec4<f32> = u_xlat7;
  u_xlat5 = ((vec4<f32>(x_931.x, x_931.y, x_931.x, x_931.y) * vec4<f32>(x_934.x, x_934.y, x_934.x, x_934.y)) + vec4<f32>(x_937.x, x_937.y, x_937.z, x_937.y));
  let x_941 : vec4<f32> = u_xlat5;
  let x_942 : vec2<f32> = vec2<f32>(x_941.x, x_941.y);
  let x_943 : f32 = u_xlat18;
  txVec8 = vec3<f32>(x_942.x, x_942.y, x_943);
  let x_950 : vec3<f32> = txVec8;
  let x_952 : f32 = textureSampleCompareLevel(x_ShadowMapTexture, sampler_ShadowMapTexture, x_950.xy, x_950.z);
  u_xlat9.x = x_952;
  let x_955 : vec4<f32> = u_xlat5;
  let x_956 : vec2<f32> = vec2<f32>(x_955.z, x_955.w);
  let x_957 : f32 = u_xlat18;
  txVec9 = vec3<f32>(x_956.x, x_956.y, x_957);
  let x_964 : vec3<f32> = txVec9;
  let x_966 : f32 = textureSampleCompareLevel(x_ShadowMapTexture, sampler_ShadowMapTexture, x_964.xy, x_964.z);
  u_xlat27 = x_966;
  let x_968 : f32 = u_xlat6.x;
  let x_970 : f32 = u_xlat9.x;
  let x_973 : f32 = u_xlat0.x;
  u_xlat0.x = ((x_968 * x_970) + x_973);
  let x_977 : f32 = u_xlat6.y;
  let x_978 : f32 = u_xlat27;
  let x_981 : f32 = u_xlat0.x;
  u_xlat0.x = ((x_977 * x_978) + x_981);
  let x_984 : vec2<f32> = u_xlat10;
  let x_986 : vec4<f32> = x_62.x_ShadowMapTexture_TexelSize;
  let x_989 : vec4<f32> = u_xlat7;
  let x_991 : vec2<f32> = ((x_984 * vec2<f32>(x_986.x, x_986.y)) + vec2<f32>(x_989.w, x_989.y));
  let x_992 : vec3<f32> = u_xlat9;
  u_xlat9 = vec3<f32>(x_991.x, x_992.y, x_991.y);
  let x_994 : vec4<f32> = u_xlat7;
  let x_995 : vec3<f32> = vec3<f32>(x_994.x, x_994.z, x_994.w);
  let x_996 : vec4<f32> = u_xlat2;
  u_xlat2 = vec4<f32>(x_995.x, x_996.y, x_995.y, x_995.z);
  let x_999 : f32 = u_xlat7.y;
  u_xlat3.w = x_999;
  let x_1001 : vec2<f32> = u_xlat10;
  let x_1003 : vec4<f32> = x_62.x_ShadowMapTexture_TexelSize;
  let x_1006 : vec4<f32> = u_xlat3;
  let x_1008 : vec2<f32> = ((x_1001 * vec2<f32>(x_1003.x, x_1003.y)) + vec2<f32>(x_1006.x, x_1006.w));
  let x_1009 : vec4<f32> = u_xlat1;
  u_xlat1 = vec4<f32>(x_1008.x, x_1009.y, x_1009.z, x_1008.y);
  let x_1012 : vec4<f32> = u_xlat1;
  let x_1013 : vec2<f32> = vec2<f32>(x_1012.x, x_1012.w);
  let x_1014 : f32 = u_xlat18;
  txVec10 = vec3<f32>(x_1013.x, x_1013.y, x_1014);
  let x_1021 : vec3<f32> = txVec10;
  let x_1023 : f32 = textureSampleCompareLevel(x_ShadowMapTexture, sampler_ShadowMapTexture, x_1021.xy, x_1021.z);
  u_xlat1.x = x_1023;
  let x_1026 : vec3<f32> = u_xlat9;
  let x_1027 : vec2<f32> = vec2<f32>(x_1026.x, x_1026.z);
  let x_1028 : f32 = u_xlat18;
  txVec11 = vec3<f32>(x_1027.x, x_1027.y, x_1028);
  let x_1035 : vec3<f32> = txVec11;
  let x_1037 : f32 = textureSampleCompareLevel(x_ShadowMapTexture, sampler_ShadowMapTexture, x_1035.xy, x_1035.z);
  u_xlat9.x = x_1037;
  let x_1040 : f32 = u_xlat6.z;
  let x_1042 : f32 = u_xlat9.x;
  let x_1045 : f32 = u_xlat0.x;
  u_xlat0.x = ((x_1040 * x_1042) + x_1045);
  let x_1049 : f32 = u_xlat6.w;
  let x_1051 : f32 = u_xlat1.x;
  let x_1054 : f32 = u_xlat0.x;
  u_xlat0.x = ((x_1049 * x_1051) + x_1054);
  let x_1057 : vec2<f32> = u_xlat10;
  let x_1060 : vec4<f32> = x_62.x_ShadowMapTexture_TexelSize;
  let x_1063 : vec4<f32> = u_xlat2;
  u_xlat5 = ((vec4<f32>(x_1057.x, x_1057.y, x_1057.x, x_1057.y) * vec4<f32>(x_1060.x, x_1060.y, x_1060.x, x_1060.y)) + vec4<f32>(x_1063.x, x_1063.y, x_1063.z, x_1063.y));
  let x_1066 : vec2<f32> = u_xlat10;
  let x_1068 : vec4<f32> = x_62.x_ShadowMapTexture_TexelSize;
  let x_1071 : vec4<f32> = u_xlat2;
  let x_1073 : vec2<f32> = ((x_1066 * vec2<f32>(x_1068.x, x_1068.y)) + vec2<f32>(x_1071.w, x_1071.y));
  let x_1074 : vec3<f32> = u_xlat9;
  u_xlat9 = vec3<f32>(x_1073.x, x_1074.y, x_1073.y);
  let x_1077 : f32 = u_xlat2.y;
  u_xlat3.y = x_1077;
  let x_1079 : vec2<f32> = u_xlat10;
  let x_1081 : vec4<f32> = x_62.x_ShadowMapTexture_TexelSize;
  let x_1084 : vec4<f32> = u_xlat3;
  let x_1086 : vec2<f32> = ((x_1079 * vec2<f32>(x_1081.x, x_1081.y)) + vec2<f32>(x_1084.x, x_1084.y));
  let x_1087 : vec4<f32> = u_xlat1;
  u_xlat1 = vec4<f32>(x_1086.x, x_1086.y, x_1087.z, x_1087.w);
  let x_1090 : vec4<f32> = u_xlat1;
  let x_1091 : vec2<f32> = vec2<f32>(x_1090.x, x_1090.y);
  let x_1092 : f32 = u_xlat18;
  txVec12 = vec3<f32>(x_1091.x, x_1091.y, x_1092);
  let x_1099 : vec3<f32> = txVec12;
  let x_1101 : f32 = textureSampleCompareLevel(x_ShadowMapTexture, sampler_ShadowMapTexture, x_1099.xy, x_1099.z);
  u_xlat1.x = x_1101;
  let x_1104 : vec3<f32> = u_xlat9;
  let x_1105 : vec2<f32> = vec2<f32>(x_1104.x, x_1104.z);
  let x_1106 : f32 = u_xlat18;
  txVec13 = vec3<f32>(x_1105.x, x_1105.y, x_1106);
  let x_1113 : vec3<f32> = txVec13;
  let x_1115 : f32 = textureSampleCompareLevel(x_ShadowMapTexture, sampler_ShadowMapTexture, x_1113.xy, x_1113.z);
  u_xlat9.x = x_1115;
  let x_1118 : vec4<f32> = u_xlat5;
  let x_1119 : vec2<f32> = vec2<f32>(x_1118.x, x_1118.y);
  let x_1120 : f32 = u_xlat18;
  txVec14 = vec3<f32>(x_1119.x, x_1119.y, x_1120);
  let x_1127 : vec3<f32> = txVec14;
  let x_1129 : f32 = textureSampleCompareLevel(x_ShadowMapTexture, sampler_ShadowMapTexture, x_1127.xy, x_1127.z);
  u_xlat27 = x_1129;
  let x_1131 : vec4<f32> = u_xlat5;
  let x_1132 : vec2<f32> = vec2<f32>(x_1131.z, x_1131.w);
  let x_1133 : f32 = u_xlat18;
  txVec15 = vec3<f32>(x_1132.x, x_1132.y, x_1133);
  let x_1140 : vec3<f32> = txVec15;
  let x_1142 : f32 = textureSampleCompareLevel(x_ShadowMapTexture, sampler_ShadowMapTexture, x_1140.xy, x_1140.z);
  u_xlat18 = x_1142;
  let x_1144 : f32 = u_xlat4.x;
  let x_1145 : f32 = u_xlat27;
  let x_1148 : f32 = u_xlat0.x;
  u_xlat0.x = ((x_1144 * x_1145) + x_1148);
  let x_1152 : f32 = u_xlat4.y;
  let x_1153 : f32 = u_xlat18;
  let x_1156 : f32 = u_xlat0.x;
  u_xlat0.x = ((x_1152 * x_1153) + x_1156);
  let x_1160 : f32 = u_xlat4.z;
  let x_1162 : f32 = u_xlat9.x;
  let x_1165 : f32 = u_xlat0.x;
  u_xlat0.x = ((x_1160 * x_1162) + x_1165);
  let x_1169 : f32 = u_xlat4.w;
  let x_1171 : f32 = u_xlat1.x;
  let x_1174 : f32 = u_xlat0.x;
  u_xlat0.x = ((x_1169 * x_1171) + x_1174);
  let x_1180 : f32 = x_62.x_LightShadowData.x;
  u_xlat9.x = (-(x_1180) + 1.0f);
  let x_1186 : vec4<f32> = u_xlat0;
  let x_1188 : vec3<f32> = u_xlat9;
  let x_1192 : vec4<f32> = x_62.x_LightShadowData;
  SV_Target0 = ((vec4<f32>(x_1186.x, x_1186.x, x_1186.x, x_1186.x) * vec4<f32>(x_1188.x, x_1188.x, x_1188.x, x_1188.x)) + vec4<f32>(x_1192.x, x_1192.x, x_1192.x, x_1192.x));
  return;
}

struct main_out {
  @location(0)
  SV_Target0_1 : vec4<f32>,
}

@fragment
fn main(@location(0) vs_TEXCOORD0_param : vec4<f32>, @builtin(position) gl_FragCoord_param : vec4<f32>) -> main_out {
  vs_TEXCOORD0 = vs_TEXCOORD0_param;
  gl_FragCoord = gl_FragCoord_param;
  main_1();
  return main_out(SV_Target0);
}

