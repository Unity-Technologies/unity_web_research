type Arr = array<vec4<f32>, 3u>;

type Arr_1 = array<vec4<f32>, 3u>;

struct CB1 {
  gInvThicknessTable : Arr_1,
  gSampleWeightTable : Arr_1,
  gInvSliceDimension : vec4<f32>,
  AdditionalParams : vec2<f32>,
}

struct S {
  value : array<u32, 1u>,
}

var<private> gl_LocalInvocationID : vec3<u32>;

var<private> gl_GlobalInvocationID : vec3<u32>;

@group(1) @binding(0) var<uniform> x_43 : CB1;

@group(0) @binding(0) var DepthTex : texture_2d_array<f32>;

@group(0) @binding(2) var samplerDepthTex : sampler;

var<workgroup> TGSM0 : array<S, 256u>;

@group(0) @binding(1) var Occlusion_origX0X : texture_storage_2d<r32float, write>;

fn main_1() {
  var u_xlati0 : vec2<i32>;
  var u_xlat0 : vec4<f32>;
  var u_xlati1 : vec4<i32>;
  var u_xlati15 : i32;
  var u_xlati10 : vec2<i32>;
  var u_xlat5 : vec3<f32>;
  var u_xlat10 : f32;
  var u_xlat6 : vec3<f32>;
  var u_xlat2 : vec3<f32>;
  var u_xlat15 : f32;
  var u_xlat11 : vec2<f32>;
  var u_xlat1 : vec4<f32>;
  var u_xlat12 : f32;
  var u_xlati3 : vec4<i32>;
  var u_xlat16 : f32;
  var u_xlat17 : f32;
  var u_xlat3 : vec3<f32>;
  var u_xlat8 : f32;
  var u_xlati4 : vec4<i32>;
  var u_xlat7 : f32;
  var u_xlatu2 : vec4<u32>;
  var u_xlat_precise_vec4 : vec4<f32>;
  var u_xlat_precise_ivec4 : vec4<i32>;
  var u_xlat_precise_bvec4 : vec4<bool>;
  var u_xlat_precise_uvec4 : vec4<u32>;
  let x_15 : vec3<u32> = gl_LocalInvocationID;
  let x_19 : vec3<u32> = gl_GlobalInvocationID;
  u_xlati0 = (bitcast<vec2<i32>>(vec2<u32>(x_15.x, x_15.y)) + bitcast<vec2<i32>>(vec2<u32>(x_19.x, x_19.y)));
  let x_23 : vec2<i32> = u_xlati0;
  u_xlati0 = (x_23 + vec2<i32>(-3i, -3i));
  let x_31 : vec2<i32> = u_xlati0;
  let x_33 : vec2<f32> = vec2<f32>(x_31);
  let x_34 : vec4<f32> = u_xlat0;
  u_xlat0 = vec4<f32>(x_33.x, x_33.y, x_34.z, x_34.w);
  let x_36 : vec4<f32> = u_xlat0;
  let x_47 : vec4<f32> = x_43.gInvSliceDimension;
  let x_49 : vec2<f32> = (vec2<f32>(x_36.x, x_36.y) * vec2<f32>(x_47.x, x_47.y));
  let x_50 : vec4<f32> = u_xlat0;
  u_xlat0 = vec4<f32>(x_49.x, x_49.y, x_50.z, x_50.w);
  let x_55 : u32 = gl_GlobalInvocationID.z;
  u_xlat0.z = f32(x_55);
  let x_70 : vec4<f32> = u_xlat0;
  let x_73 : vec4<f32> = textureGather(0i, DepthTex, samplerDepthTex, vec3<f32>(x_70.x, x_70.y, x_70.z).xy, i32(round(vec3<f32>(x_70.x, x_70.y, x_70.z).z)));
  u_xlat0 = x_73;
  let x_79 : u32 = gl_LocalInvocationID.x;
  u_xlati1.x = (bitcast<i32>(x_79) << bitcast<u32>(1i));
  let x_87 : u32 = gl_LocalInvocationID.y;
  let x_92 : i32 = u_xlati1.x;
  u_xlati1.x = ((bitcast<i32>(x_87) * 32i) + x_92);
  let x_102 : i32 = u_xlati1.x;
  let x_104 : f32 = u_xlat0.w;
  TGSM0[x_102].value[0i] = bitcast<u32>(x_104);
  let x_110 : i32 = u_xlati1.x;
  u_xlati15 = (x_110 + 1i);
  let x_112 : i32 = u_xlati15;
  let x_114 : f32 = u_xlat0.z;
  TGSM0[x_112].value[0i] = bitcast<u32>(x_114);
  let x_118 : vec4<i32> = u_xlati1;
  u_xlati10 = (vec2<i32>(x_118.x, x_118.x) + vec2<i32>(16i, 17i));
  let x_125 : i32 = u_xlati10.x;
  let x_127 : f32 = u_xlat0.x;
  TGSM0[x_125].value[0i] = bitcast<u32>(x_127);
  let x_131 : i32 = u_xlati10.y;
  let x_133 : f32 = u_xlat0.y;
  TGSM0[x_131].value[0i] = bitcast<u32>(x_133);
  workgroupBarrier();
  let x_138 : u32 = gl_LocalInvocationID.y;
  let x_142 : u32 = gl_LocalInvocationID.x;
  u_xlati0.x = ((bitcast<i32>(x_138) * 16i) + bitcast<i32>(x_142));
  let x_146 : vec2<i32> = u_xlati0;
  u_xlati1 = (vec4<i32>(x_146.x, x_146.x, x_146.x, x_146.x) + vec4<i32>(64i, 68i, 70i, 66i));
  let x_157 : i32 = u_xlati1.w;
  let x_159 : u32 = TGSM0[x_157].value[0i];
  u_xlat5.x = bitcast<f32>(x_159);
  let x_164 : i32 = u_xlati1.y;
  let x_166 : u32 = TGSM0[x_164].value[0i];
  u_xlat10 = bitcast<f32>(x_166);
  let x_169 : f32 = u_xlat10;
  u_xlat10 = (1.0f / x_169);
  let x_172 : f32 = u_xlat10;
  let x_175 : vec4<f32> = x_43.gInvThicknessTable[0i];
  let x_177 : vec2<f32> = (vec2<f32>(x_172, x_172) * vec2<f32>(x_175.y, x_175.w));
  let x_178 : vec3<f32> = u_xlat6;
  u_xlat6 = vec3<f32>(x_177.x, x_178.y, x_177.y);
  let x_182 : vec4<f32> = x_43.gInvThicknessTable[0i];
  let x_186 : vec2<f32> = (vec2<f32>(x_182.y, x_182.w) + vec2<f32>(-0.5f, -0.5f));
  let x_187 : vec3<f32> = u_xlat2;
  u_xlat2 = vec3<f32>(x_186.x, x_186.y, x_187.z);
  let x_190 : f32 = u_xlat5.x;
  let x_192 : f32 = u_xlat6.x;
  let x_195 : f32 = u_xlat2.x;
  u_xlat5.x = ((x_190 * x_192) + -(x_195));
  let x_201 : f32 = u_xlat5.x;
  let x_205 : f32 = x_43.AdditionalParams.x;
  u_xlat15 = (x_201 * x_205);
  let x_207 : f32 = u_xlat15;
  u_xlat15 = clamp(x_207, 0.0f, 1.0f);
  let x_213 : i32 = u_xlati1.z;
  let x_215 : u32 = TGSM0[x_213].value[0i];
  u_xlat11.x = bitcast<f32>(x_215);
  let x_220 : i32 = u_xlati1.x;
  let x_222 : u32 = TGSM0[x_220].value[0i];
  u_xlat1.x = bitcast<f32>(x_222);
  let x_226 : f32 = u_xlat1.x;
  let x_228 : f32 = u_xlat6.z;
  let x_231 : f32 = u_xlat2.y;
  u_xlat1.x = ((x_226 * x_228) + -(x_231));
  let x_236 : f32 = u_xlat11.x;
  let x_238 : f32 = u_xlat6.x;
  let x_241 : f32 = u_xlat2.x;
  u_xlat11.x = ((x_236 * x_238) + -(x_241));
  let x_246 : f32 = u_xlat15;
  let x_248 : f32 = u_xlat11.x;
  u_xlat12 = max(x_246, x_248);
  let x_251 : f32 = u_xlat11.x;
  let x_253 : f32 = x_43.AdditionalParams.x;
  u_xlat11.x = (x_251 * x_253);
  let x_257 : f32 = u_xlat11.x;
  u_xlat11.x = clamp(x_257, 0.0f, 1.0f);
  let x_260 : f32 = u_xlat12;
  u_xlat12 = min(x_260, 1.0f);
  let x_263 : f32 = u_xlat5.x;
  let x_265 : f32 = u_xlat11.x;
  u_xlat5.x = max(x_263, x_265);
  let x_269 : f32 = u_xlat5.x;
  u_xlat5.x = min(x_269, 1.0f);
  let x_273 : f32 = u_xlat5.x;
  let x_274 : f32 = u_xlat12;
  u_xlat5.x = (x_273 + x_274);
  let x_278 : f32 = u_xlat11.x;
  let x_280 : f32 = u_xlat15;
  let x_283 : f32 = u_xlat5.x;
  u_xlat5.x = ((-(x_278) * x_280) + x_283);
  let x_287 : f32 = u_xlat5.x;
  u_xlat5.x = clamp(x_287, 0.0f, 1.0f);
  let x_291 : vec2<i32> = u_xlati0;
  u_xlati3 = (vec4<i32>(x_291.x, x_291.x, x_291.x, x_291.x) + vec4<i32>(100i, 36i, 72i, 132i));
  let x_300 : i32 = u_xlati3.y;
  let x_302 : u32 = TGSM0[x_300].value[0i];
  u_xlat15 = bitcast<f32>(x_302);
  let x_304 : f32 = u_xlat15;
  let x_306 : f32 = u_xlat6.x;
  let x_309 : f32 = u_xlat2.x;
  u_xlat15 = ((x_304 * x_306) + -(x_309));
  let x_312 : f32 = u_xlat15;
  let x_314 : f32 = x_43.AdditionalParams.x;
  u_xlat11.x = (x_312 * x_314);
  let x_318 : f32 = u_xlat11.x;
  u_xlat11.x = clamp(x_318, 0.0f, 1.0f);
  let x_322 : i32 = u_xlati3.x;
  let x_324 : u32 = TGSM0[x_322].value[0i];
  u_xlat12 = bitcast<f32>(x_324);
  let x_326 : f32 = u_xlat12;
  let x_328 : f32 = u_xlat6.x;
  let x_331 : f32 = u_xlat2.x;
  u_xlat6.x = ((x_326 * x_328) + -(x_331));
  let x_336 : f32 = u_xlat11.x;
  let x_338 : f32 = u_xlat6.x;
  u_xlat2.x = max(x_336, x_338);
  let x_342 : f32 = u_xlat6.x;
  let x_344 : f32 = x_43.AdditionalParams.x;
  u_xlat6.x = (x_342 * x_344);
  let x_348 : f32 = u_xlat6.x;
  u_xlat6.x = clamp(x_348, 0.0f, 1.0f);
  let x_352 : f32 = u_xlat2.x;
  u_xlat2.x = min(x_352, 1.0f);
  let x_355 : f32 = u_xlat15;
  let x_357 : f32 = u_xlat6.x;
  u_xlat15 = max(x_355, x_357);
  let x_359 : f32 = u_xlat15;
  u_xlat15 = min(x_359, 1.0f);
  let x_361 : f32 = u_xlat15;
  let x_363 : f32 = u_xlat2.x;
  u_xlat15 = (x_361 + x_363);
  let x_366 : f32 = u_xlat6.x;
  let x_369 : f32 = u_xlat11.x;
  let x_371 : f32 = u_xlat15;
  u_xlat15 = ((-(x_366) * x_369) + x_371);
  let x_373 : f32 = u_xlat15;
  u_xlat15 = clamp(x_373, 0.0f, 1.0f);
  let x_375 : f32 = u_xlat15;
  let x_377 : f32 = u_xlat5.x;
  u_xlat5.x = (x_375 + x_377);
  let x_381 : i32 = u_xlati3.w;
  let x_383 : u32 = TGSM0[x_381].value[0i];
  u_xlat15 = bitcast<f32>(x_383);
  let x_386 : i32 = u_xlati3.z;
  let x_388 : u32 = TGSM0[x_386].value[0i];
  u_xlat6.x = bitcast<f32>(x_388);
  let x_392 : f32 = u_xlat6.x;
  let x_394 : f32 = u_xlat6.z;
  let x_397 : f32 = u_xlat2.y;
  u_xlat6.x = ((x_392 * x_394) + -(x_397));
  let x_401 : f32 = u_xlat15;
  let x_403 : f32 = u_xlat6.z;
  let x_406 : f32 = u_xlat2.y;
  u_xlat15 = ((x_401 * x_403) + -(x_406));
  let x_409 : vec2<i32> = u_xlati0;
  u_xlati3 = (vec4<i32>(x_409.x, x_409.x, x_409.x, x_409.x) + vec4<i32>(4i, 83i, 53i, 85i));
  let x_418 : i32 = u_xlati3.x;
  let x_420 : u32 = TGSM0[x_418].value[0i];
  u_xlat11.x = bitcast<f32>(x_420);
  let x_424 : f32 = u_xlat11.x;
  let x_426 : f32 = u_xlat6.z;
  let x_429 : f32 = u_xlat2.y;
  u_xlat11.x = ((x_424 * x_426) + -(x_429));
  let x_435 : f32 = u_xlat11.x;
  let x_437 : f32 = x_43.AdditionalParams.x;
  u_xlat16 = (x_435 * x_437);
  let x_439 : f32 = u_xlat16;
  u_xlat16 = clamp(x_439, 0.0f, 1.0f);
  let x_441 : f32 = u_xlat15;
  let x_442 : f32 = u_xlat16;
  u_xlat2.x = max(x_441, x_442);
  let x_445 : f32 = u_xlat15;
  let x_447 : f32 = x_43.AdditionalParams.x;
  u_xlat15 = (x_445 * x_447);
  let x_449 : f32 = u_xlat15;
  u_xlat15 = clamp(x_449, 0.0f, 1.0f);
  let x_452 : f32 = u_xlat2.x;
  u_xlat2.x = min(x_452, 1.0f);
  let x_455 : f32 = u_xlat15;
  let x_457 : f32 = u_xlat11.x;
  u_xlat11.x = max(x_455, x_457);
  let x_461 : f32 = u_xlat11.x;
  u_xlat11.x = min(x_461, 1.0f);
  let x_465 : f32 = u_xlat11.x;
  let x_467 : f32 = u_xlat2.x;
  u_xlat11.x = (x_465 + x_467);
  let x_470 : f32 = u_xlat15;
  let x_472 : f32 = u_xlat16;
  let x_475 : f32 = u_xlat11.x;
  u_xlat15 = ((-(x_470) * x_472) + x_475);
  let x_477 : f32 = u_xlat15;
  u_xlat15 = clamp(x_477, 0.0f, 1.0f);
  let x_480 : f32 = u_xlat1.x;
  let x_482 : f32 = x_43.AdditionalParams.x;
  u_xlat11.x = (x_480 * x_482);
  let x_486 : f32 = u_xlat11.x;
  u_xlat11.x = clamp(x_486, 0.0f, 1.0f);
  let x_490 : f32 = u_xlat11.x;
  let x_492 : f32 = u_xlat6.x;
  u_xlat1.w = max(x_490, x_492);
  let x_496 : f32 = u_xlat6.x;
  let x_498 : f32 = x_43.AdditionalParams.x;
  u_xlat6.x = (x_496 * x_498);
  let x_502 : f32 = u_xlat6.x;
  u_xlat6.x = clamp(x_502, 0.0f, 1.0f);
  let x_506 : f32 = u_xlat6.x;
  let x_508 : f32 = u_xlat1.x;
  u_xlat1.x = max(x_506, x_508);
  let x_511 : vec4<f32> = u_xlat1;
  let x_514 : vec2<f32> = min(vec2<f32>(x_511.x, x_511.w), vec2<f32>(1.0f, 1.0f));
  let x_515 : vec4<f32> = u_xlat1;
  u_xlat1 = vec4<f32>(x_514.x, x_515.y, x_515.z, x_514.y);
  let x_518 : f32 = u_xlat1.x;
  let x_520 : f32 = u_xlat1.w;
  u_xlat1.x = (x_518 + x_520);
  let x_524 : f32 = u_xlat6.x;
  let x_527 : f32 = u_xlat11.x;
  let x_530 : f32 = u_xlat1.x;
  u_xlat1.x = ((-(x_524) * x_527) + x_530);
  let x_534 : f32 = u_xlat1.x;
  u_xlat1.x = clamp(x_534, 0.0f, 1.0f);
  let x_537 : f32 = u_xlat15;
  let x_539 : f32 = u_xlat1.x;
  u_xlat5.z = (x_537 + x_539);
  let x_542 : vec3<f32> = u_xlat5;
  let x_545 : vec4<f32> = x_43.gSampleWeightTable[0i];
  let x_547 : vec2<f32> = (vec2<f32>(x_542.x, x_542.z) * vec2<f32>(x_545.y, x_545.w));
  let x_548 : vec3<f32> = u_xlat5;
  u_xlat5 = vec3<f32>(x_547.x, x_548.y, x_547.y);
  let x_551 : f32 = u_xlat5.z;
  u_xlat15 = (x_551 * 0.5f);
  let x_555 : f32 = u_xlat5.x;
  let x_557 : f32 = u_xlat15;
  u_xlat5.x = ((x_555 * 0.5f) + x_557);
  let x_561 : i32 = u_xlati3.z;
  let x_563 : u32 = TGSM0[x_561].value[0i];
  u_xlat15 = bitcast<f32>(x_563);
  let x_565 : f32 = u_xlat10;
  let x_568 : vec4<f32> = x_43.gInvThicknessTable[1i];
  let x_570 : vec2<f32> = (vec2<f32>(x_565, x_565) * vec2<f32>(x_568.x, x_568.z));
  let x_571 : vec4<f32> = u_xlat1;
  u_xlat1 = vec4<f32>(x_570.x, x_570.y, x_571.z, x_571.w);
  let x_573 : f32 = u_xlat10;
  let x_576 : vec4<f32> = x_43.gInvThicknessTable[2i];
  u_xlat2 = (vec3<f32>(x_573, x_573, x_573) * vec3<f32>(x_576.x, x_576.w, x_576.z));
  let x_580 : vec4<f32> = x_43.gInvThicknessTable[1i];
  u_xlat11 = (vec2<f32>(x_580.x, x_580.z) + vec2<f32>(-0.5f, -0.5f));
  let x_583 : f32 = u_xlat15;
  let x_585 : f32 = u_xlat1.x;
  let x_588 : f32 = u_xlat11.x;
  u_xlat10 = ((x_583 * x_585) + -(x_588));
  let x_591 : f32 = u_xlat10;
  let x_593 : f32 = x_43.AdditionalParams.x;
  u_xlat15 = (x_591 * x_593);
  let x_595 : f32 = u_xlat15;
  u_xlat15 = clamp(x_595, 0.0f, 1.0f);
  let x_599 : i32 = u_xlati3.y;
  let x_601 : u32 = TGSM0[x_599].value[0i];
  u_xlat17 = bitcast<f32>(x_601);
  let x_605 : i32 = u_xlati3.w;
  let x_607 : u32 = TGSM0[x_605].value[0i];
  u_xlat3.x = bitcast<f32>(x_607);
  let x_611 : f32 = u_xlat3.x;
  let x_613 : f32 = u_xlat1.x;
  let x_616 : f32 = u_xlat11.x;
  u_xlat3.x = ((x_611 * x_613) + -(x_616));
  let x_620 : f32 = u_xlat17;
  let x_622 : f32 = u_xlat1.x;
  let x_625 : f32 = u_xlat11.x;
  u_xlat17 = ((x_620 * x_622) + -(x_625));
  let x_629 : f32 = u_xlat15;
  let x_630 : f32 = u_xlat17;
  u_xlat8 = max(x_629, x_630);
  let x_632 : f32 = u_xlat17;
  let x_634 : f32 = x_43.AdditionalParams.x;
  u_xlat17 = (x_632 * x_634);
  let x_636 : f32 = u_xlat17;
  u_xlat17 = clamp(x_636, 0.0f, 1.0f);
  let x_638 : f32 = u_xlat8;
  u_xlat8 = min(x_638, 1.0f);
  let x_640 : f32 = u_xlat10;
  let x_641 : f32 = u_xlat17;
  u_xlat10 = max(x_640, x_641);
  let x_643 : f32 = u_xlat10;
  u_xlat10 = min(x_643, 1.0f);
  let x_645 : f32 = u_xlat10;
  let x_646 : f32 = u_xlat8;
  u_xlat10 = (x_645 + x_646);
  let x_648 : f32 = u_xlat17;
  let x_650 : f32 = u_xlat15;
  let x_652 : f32 = u_xlat10;
  u_xlat10 = ((-(x_648) * x_650) + x_652);
  let x_654 : f32 = u_xlat10;
  u_xlat10 = clamp(x_654, 0.0f, 1.0f);
  let x_657 : vec2<i32> = u_xlati0;
  u_xlati4 = (vec4<i32>(x_657.x, x_657.x, x_657.x, x_657.x) + vec4<i32>(51i, 98i, 38i, 102i));
  let x_666 : i32 = u_xlati4.x;
  let x_668 : u32 = TGSM0[x_666].value[0i];
  u_xlat15 = bitcast<f32>(x_668);
  let x_670 : f32 = u_xlat15;
  let x_672 : f32 = u_xlat1.x;
  let x_675 : f32 = u_xlat11.x;
  u_xlat15 = ((x_670 * x_672) + -(x_675));
  let x_678 : f32 = u_xlat15;
  let x_680 : f32 = x_43.AdditionalParams.x;
  u_xlat1.x = (x_678 * x_680);
  let x_684 : f32 = u_xlat1.x;
  u_xlat1.x = clamp(x_684, 0.0f, 1.0f);
  let x_688 : f32 = u_xlat1.x;
  let x_690 : f32 = u_xlat3.x;
  u_xlat11.x = max(x_688, x_690);
  let x_694 : f32 = u_xlat3.x;
  let x_696 : f32 = x_43.AdditionalParams.x;
  u_xlat17 = (x_694 * x_696);
  let x_698 : f32 = u_xlat17;
  u_xlat17 = clamp(x_698, 0.0f, 1.0f);
  let x_701 : f32 = u_xlat11.x;
  u_xlat11.x = min(x_701, 1.0f);
  let x_704 : f32 = u_xlat15;
  let x_705 : f32 = u_xlat17;
  u_xlat15 = max(x_704, x_705);
  let x_707 : f32 = u_xlat15;
  u_xlat15 = min(x_707, 1.0f);
  let x_709 : f32 = u_xlat15;
  let x_711 : f32 = u_xlat11.x;
  u_xlat15 = (x_709 + x_711);
  let x_713 : f32 = u_xlat17;
  let x_716 : f32 = u_xlat1.x;
  let x_718 : f32 = u_xlat15;
  u_xlat15 = ((-(x_713) * x_716) + x_718);
  let x_720 : f32 = u_xlat15;
  u_xlat15 = clamp(x_720, 0.0f, 1.0f);
  let x_722 : f32 = u_xlat15;
  let x_723 : f32 = u_xlat10;
  u_xlat10 = (x_722 + x_723);
  let x_725 : f32 = u_xlat10;
  let x_727 : f32 = x_43.gSampleWeightTable[1i].x;
  u_xlat10 = (x_725 * x_727);
  let x_729 : f32 = u_xlat10;
  let x_732 : f32 = u_xlat5.x;
  u_xlat5.x = ((x_729 * 0.5f) + x_732);
  let x_736 : i32 = u_xlati4.z;
  let x_738 : u32 = TGSM0[x_736].value[0i];
  u_xlat10 = bitcast<f32>(x_738);
  let x_741 : vec4<f32> = x_43.gInvThicknessTable[2i];
  u_xlat3 = (vec3<f32>(x_741.x, x_741.w, x_741.z) + vec3<f32>(-0.5f, -0.5f, -0.5f));
  let x_745 : f32 = u_xlat10;
  let x_747 : f32 = u_xlat2.x;
  let x_750 : f32 = u_xlat3.x;
  u_xlat10 = ((x_745 * x_747) + -(x_750));
  let x_753 : f32 = u_xlat10;
  let x_755 : f32 = x_43.AdditionalParams.x;
  u_xlat15 = (x_753 * x_755);
  let x_757 : f32 = u_xlat15;
  u_xlat15 = clamp(x_757, 0.0f, 1.0f);
  let x_760 : i32 = u_xlati4.y;
  let x_762 : u32 = TGSM0[x_760].value[0i];
  u_xlat1.x = bitcast<f32>(x_762);
  let x_766 : i32 = u_xlati4.w;
  let x_768 : u32 = TGSM0[x_766].value[0i];
  u_xlat11.x = bitcast<f32>(x_768);
  let x_772 : f32 = u_xlat11.x;
  let x_774 : f32 = u_xlat2.x;
  let x_777 : f32 = u_xlat3.x;
  u_xlat11.x = ((x_772 * x_774) + -(x_777));
  let x_782 : f32 = u_xlat1.x;
  let x_784 : f32 = u_xlat2.x;
  let x_787 : f32 = u_xlat3.x;
  u_xlat1.x = ((x_782 * x_784) + -(x_787));
  let x_791 : f32 = u_xlat15;
  let x_793 : f32 = u_xlat1.x;
  u_xlat17 = max(x_791, x_793);
  let x_796 : f32 = u_xlat1.x;
  let x_798 : f32 = x_43.AdditionalParams.x;
  u_xlat1.x = (x_796 * x_798);
  let x_802 : f32 = u_xlat1.x;
  u_xlat1.x = clamp(x_802, 0.0f, 1.0f);
  let x_805 : f32 = u_xlat17;
  u_xlat17 = min(x_805, 1.0f);
  let x_807 : f32 = u_xlat10;
  let x_809 : f32 = u_xlat1.x;
  u_xlat10 = max(x_807, x_809);
  let x_811 : f32 = u_xlat10;
  u_xlat10 = min(x_811, 1.0f);
  let x_813 : f32 = u_xlat10;
  let x_814 : f32 = u_xlat17;
  u_xlat10 = (x_813 + x_814);
  let x_817 : f32 = u_xlat1.x;
  let x_819 : f32 = u_xlat15;
  let x_821 : f32 = u_xlat10;
  u_xlat10 = ((-(x_817) * x_819) + x_821);
  let x_823 : f32 = u_xlat10;
  u_xlat10 = clamp(x_823, 0.0f, 1.0f);
  let x_825 : vec2<i32> = u_xlati0;
  u_xlati4 = (vec4<i32>(x_825.x, x_825.x, x_825.x, x_825.x) + vec4<i32>(34i, 113i, 23i, 119i));
  let x_834 : i32 = u_xlati4.x;
  let x_836 : u32 = TGSM0[x_834].value[0i];
  u_xlat15 = bitcast<f32>(x_836);
  let x_838 : f32 = u_xlat15;
  let x_840 : f32 = u_xlat2.x;
  let x_843 : f32 = u_xlat3.x;
  u_xlat15 = ((x_838 * x_840) + -(x_843));
  let x_846 : f32 = u_xlat15;
  let x_848 : f32 = x_43.AdditionalParams.x;
  u_xlat1.x = (x_846 * x_848);
  let x_852 : f32 = u_xlat1.x;
  u_xlat1.x = clamp(x_852, 0.0f, 1.0f);
  let x_856 : f32 = u_xlat1.x;
  let x_858 : f32 = u_xlat11.x;
  u_xlat2.x = max(x_856, x_858);
  let x_862 : f32 = u_xlat11.x;
  let x_864 : f32 = x_43.AdditionalParams.x;
  u_xlat11.x = (x_862 * x_864);
  let x_868 : f32 = u_xlat11.x;
  u_xlat11.x = clamp(x_868, 0.0f, 1.0f);
  let x_872 : f32 = u_xlat2.x;
  u_xlat2.x = min(x_872, 1.0f);
  let x_875 : f32 = u_xlat15;
  let x_877 : f32 = u_xlat11.x;
  u_xlat15 = max(x_875, x_877);
  let x_879 : f32 = u_xlat15;
  u_xlat15 = min(x_879, 1.0f);
  let x_881 : f32 = u_xlat15;
  let x_883 : f32 = u_xlat2.x;
  u_xlat15 = (x_881 + x_883);
  let x_886 : f32 = u_xlat11.x;
  let x_889 : f32 = u_xlat1.x;
  let x_891 : f32 = u_xlat15;
  u_xlat15 = ((-(x_886) * x_889) + x_891);
  let x_893 : f32 = u_xlat15;
  u_xlat15 = clamp(x_893, 0.0f, 1.0f);
  let x_895 : f32 = u_xlat15;
  let x_896 : f32 = u_xlat10;
  u_xlat10 = (x_895 + x_896);
  let x_898 : f32 = u_xlat10;
  let x_900 : f32 = x_43.gSampleWeightTable[2i].x;
  u_xlat10 = (x_898 * x_900);
  let x_902 : f32 = u_xlat10;
  let x_905 : f32 = u_xlat5.x;
  u_xlat5.x = ((x_902 * 0.5f) + x_905);
  let x_909 : i32 = u_xlati4.z;
  let x_911 : u32 = TGSM0[x_909].value[0i];
  u_xlat10 = bitcast<f32>(x_911);
  let x_913 : f32 = u_xlat10;
  let x_915 : f32 = u_xlat2.y;
  let x_918 : f32 = u_xlat3.y;
  u_xlat10 = ((x_913 * x_915) + -(x_918));
  let x_921 : f32 = u_xlat10;
  let x_923 : f32 = x_43.AdditionalParams.x;
  u_xlat15 = (x_921 * x_923);
  let x_925 : f32 = u_xlat15;
  u_xlat15 = clamp(x_925, 0.0f, 1.0f);
  let x_928 : i32 = u_xlati4.y;
  let x_930 : u32 = TGSM0[x_928].value[0i];
  u_xlat1.x = bitcast<f32>(x_930);
  let x_934 : i32 = u_xlati4.w;
  let x_936 : u32 = TGSM0[x_934].value[0i];
  u_xlat11.x = bitcast<f32>(x_936);
  let x_940 : f32 = u_xlat11.x;
  let x_942 : f32 = u_xlat2.y;
  let x_945 : f32 = u_xlat3.y;
  u_xlat11.x = ((x_940 * x_942) + -(x_945));
  let x_950 : f32 = u_xlat1.x;
  let x_952 : f32 = u_xlat2.y;
  let x_955 : f32 = u_xlat3.y;
  u_xlat1.x = ((x_950 * x_952) + -(x_955));
  let x_959 : f32 = u_xlat15;
  let x_961 : f32 = u_xlat1.x;
  u_xlat2.x = max(x_959, x_961);
  let x_965 : f32 = u_xlat1.x;
  let x_967 : f32 = x_43.AdditionalParams.x;
  u_xlat1.x = (x_965 * x_967);
  let x_971 : f32 = u_xlat1.x;
  u_xlat1.x = clamp(x_971, 0.0f, 1.0f);
  let x_975 : f32 = u_xlat2.x;
  u_xlat2.x = min(x_975, 1.0f);
  let x_978 : f32 = u_xlat10;
  let x_980 : f32 = u_xlat1.x;
  u_xlat10 = max(x_978, x_980);
  let x_982 : f32 = u_xlat10;
  u_xlat10 = min(x_982, 1.0f);
  let x_984 : f32 = u_xlat10;
  let x_986 : f32 = u_xlat2.x;
  u_xlat10 = (x_984 + x_986);
  let x_989 : f32 = u_xlat1.x;
  let x_991 : f32 = u_xlat15;
  let x_993 : f32 = u_xlat10;
  u_xlat10 = ((-(x_989) * x_991) + x_993);
  let x_995 : f32 = u_xlat10;
  u_xlat10 = clamp(x_995, 0.0f, 1.0f);
  let x_997 : vec2<i32> = u_xlati0;
  u_xlati4 = (vec4<i32>(x_997.x, x_997.x, x_997.x, x_997.x) + vec4<i32>(17i, 117i, 19i, 115i));
  let x_1005 : i32 = u_xlati4.x;
  let x_1007 : u32 = TGSM0[x_1005].value[0i];
  u_xlat15 = bitcast<f32>(x_1007);
  let x_1009 : f32 = u_xlat15;
  let x_1011 : f32 = u_xlat2.y;
  let x_1014 : f32 = u_xlat3.y;
  u_xlat15 = ((x_1009 * x_1011) + -(x_1014));
  let x_1017 : f32 = u_xlat15;
  let x_1019 : f32 = x_43.AdditionalParams.x;
  u_xlat1.x = (x_1017 * x_1019);
  let x_1023 : f32 = u_xlat1.x;
  u_xlat1.x = clamp(x_1023, 0.0f, 1.0f);
  let x_1027 : f32 = u_xlat1.x;
  let x_1029 : f32 = u_xlat11.x;
  u_xlat2.x = max(x_1027, x_1029);
  let x_1033 : f32 = u_xlat11.x;
  let x_1035 : f32 = x_43.AdditionalParams.x;
  u_xlat11.x = (x_1033 * x_1035);
  let x_1039 : f32 = u_xlat11.x;
  u_xlat11.x = clamp(x_1039, 0.0f, 1.0f);
  let x_1043 : f32 = u_xlat2.x;
  u_xlat2.x = min(x_1043, 1.0f);
  let x_1046 : f32 = u_xlat15;
  let x_1048 : f32 = u_xlat11.x;
  u_xlat15 = max(x_1046, x_1048);
  let x_1050 : f32 = u_xlat15;
  u_xlat15 = min(x_1050, 1.0f);
  let x_1052 : f32 = u_xlat15;
  let x_1054 : f32 = u_xlat2.x;
  u_xlat15 = (x_1052 + x_1054);
  let x_1057 : f32 = u_xlat11.x;
  let x_1060 : f32 = u_xlat1.x;
  let x_1062 : f32 = u_xlat15;
  u_xlat15 = ((-(x_1057) * x_1060) + x_1062);
  let x_1064 : f32 = u_xlat15;
  u_xlat15 = clamp(x_1064, 0.0f, 1.0f);
  let x_1066 : f32 = u_xlat15;
  let x_1067 : f32 = u_xlat10;
  u_xlat10 = (x_1066 + x_1067);
  let x_1069 : f32 = u_xlat10;
  let x_1071 : f32 = x_43.gSampleWeightTable[2i].w;
  u_xlat10 = (x_1069 * x_1071);
  let x_1073 : f32 = u_xlat10;
  let x_1076 : f32 = u_xlat5.x;
  u_xlat5.x = ((x_1073 * 0.5f) + x_1076);
  let x_1080 : i32 = u_xlati4.z;
  let x_1082 : u32 = TGSM0[x_1080].value[0i];
  u_xlat10 = bitcast<f32>(x_1082);
  let x_1084 : f32 = u_xlat10;
  let x_1086 : f32 = u_xlat1.y;
  let x_1089 : f32 = u_xlat11.y;
  u_xlat10 = ((x_1084 * x_1086) + -(x_1089));
  let x_1092 : f32 = u_xlat10;
  let x_1094 : f32 = x_43.AdditionalParams.x;
  u_xlat15 = (x_1092 * x_1094);
  let x_1096 : f32 = u_xlat15;
  u_xlat15 = clamp(x_1096, 0.0f, 1.0f);
  let x_1099 : i32 = u_xlati4.y;
  let x_1101 : u32 = TGSM0[x_1099].value[0i];
  u_xlat1.x = bitcast<f32>(x_1101);
  let x_1105 : i32 = u_xlati4.w;
  let x_1107 : u32 = TGSM0[x_1105].value[0i];
  u_xlat11.x = bitcast<f32>(x_1107);
  let x_1111 : f32 = u_xlat11.x;
  let x_1113 : f32 = u_xlat1.y;
  let x_1116 : f32 = u_xlat11.y;
  u_xlat11.x = ((x_1111 * x_1113) + -(x_1116));
  let x_1121 : f32 = u_xlat1.x;
  let x_1123 : f32 = u_xlat1.y;
  let x_1126 : f32 = u_xlat11.y;
  u_xlat1.x = ((x_1121 * x_1123) + -(x_1126));
  let x_1130 : f32 = u_xlat15;
  let x_1132 : f32 = u_xlat1.x;
  u_xlat2.x = max(x_1130, x_1132);
  let x_1136 : f32 = u_xlat1.x;
  let x_1138 : f32 = x_43.AdditionalParams.x;
  u_xlat1.x = (x_1136 * x_1138);
  let x_1142 : f32 = u_xlat1.x;
  u_xlat1.x = clamp(x_1142, 0.0f, 1.0f);
  let x_1146 : f32 = u_xlat2.x;
  u_xlat2.x = min(x_1146, 1.0f);
  let x_1149 : f32 = u_xlat10;
  let x_1151 : f32 = u_xlat1.x;
  u_xlat10 = max(x_1149, x_1151);
  let x_1153 : f32 = u_xlat10;
  u_xlat10 = min(x_1153, 1.0f);
  let x_1155 : f32 = u_xlat10;
  let x_1157 : f32 = u_xlat2.x;
  u_xlat10 = (x_1155 + x_1157);
  let x_1160 : f32 = u_xlat1.x;
  let x_1162 : f32 = u_xlat15;
  let x_1164 : f32 = u_xlat10;
  u_xlat10 = ((-(x_1160) * x_1162) + x_1164);
  let x_1166 : f32 = u_xlat10;
  u_xlat10 = clamp(x_1166, 0.0f, 1.0f);
  let x_1168 : vec2<i32> = u_xlati0;
  u_xlati4 = (vec4<i32>(x_1168.x, x_1168.x, x_1168.x, x_1168.x) + vec4<i32>(21i, 87i, 49i, 81i));
  let x_1177 : i32 = u_xlati4.x;
  let x_1179 : u32 = TGSM0[x_1177].value[0i];
  u_xlat15 = bitcast<f32>(x_1179);
  let x_1181 : f32 = u_xlat15;
  let x_1183 : f32 = u_xlat1.y;
  let x_1186 : f32 = u_xlat11.y;
  u_xlat15 = ((x_1181 * x_1183) + -(x_1186));
  let x_1189 : f32 = u_xlat15;
  let x_1191 : f32 = x_43.AdditionalParams.x;
  u_xlat1.x = (x_1189 * x_1191);
  let x_1195 : f32 = u_xlat1.x;
  u_xlat1.x = clamp(x_1195, 0.0f, 1.0f);
  let x_1199 : f32 = u_xlat1.x;
  let x_1201 : f32 = u_xlat11.x;
  u_xlat2.x = max(x_1199, x_1201);
  let x_1205 : f32 = u_xlat11.x;
  let x_1207 : f32 = x_43.AdditionalParams.x;
  u_xlat11.x = (x_1205 * x_1207);
  let x_1211 : f32 = u_xlat11.x;
  u_xlat11.x = clamp(x_1211, 0.0f, 1.0f);
  let x_1215 : f32 = u_xlat2.x;
  u_xlat2.x = min(x_1215, 1.0f);
  let x_1218 : f32 = u_xlat15;
  let x_1220 : f32 = u_xlat11.x;
  u_xlat15 = max(x_1218, x_1220);
  let x_1222 : f32 = u_xlat15;
  u_xlat15 = min(x_1222, 1.0f);
  let x_1224 : f32 = u_xlat15;
  let x_1226 : f32 = u_xlat2.x;
  u_xlat15 = (x_1224 + x_1226);
  let x_1229 : f32 = u_xlat11.x;
  let x_1232 : f32 = u_xlat1.x;
  let x_1234 : f32 = u_xlat15;
  u_xlat15 = ((-(x_1229) * x_1232) + x_1234);
  let x_1236 : f32 = u_xlat15;
  u_xlat15 = clamp(x_1236, 0.0f, 1.0f);
  let x_1238 : f32 = u_xlat15;
  let x_1239 : f32 = u_xlat10;
  u_xlat10 = (x_1238 + x_1239);
  let x_1242 : i32 = u_xlati4.y;
  let x_1244 : u32 = TGSM0[x_1242].value[0i];
  u_xlat15 = bitcast<f32>(x_1244);
  let x_1246 : f32 = u_xlat15;
  let x_1248 : f32 = u_xlat1.y;
  let x_1251 : f32 = u_xlat11.y;
  u_xlat15 = ((x_1246 * x_1248) + -(x_1251));
  let x_1255 : i32 = u_xlati4.z;
  let x_1257 : u32 = TGSM0[x_1255].value[0i];
  u_xlat1.x = bitcast<f32>(x_1257);
  let x_1261 : i32 = u_xlati4.w;
  let x_1263 : u32 = TGSM0[x_1261].value[0i];
  u_xlat11.x = bitcast<f32>(x_1263);
  let x_1267 : f32 = u_xlat11.x;
  let x_1269 : f32 = u_xlat1.y;
  let x_1272 : f32 = u_xlat11.y;
  u_xlat11.x = ((x_1267 * x_1269) + -(x_1272));
  let x_1277 : f32 = u_xlat1.x;
  let x_1279 : f32 = u_xlat1.y;
  let x_1282 : f32 = u_xlat11.y;
  u_xlat1.x = ((x_1277 * x_1279) + -(x_1282));
  let x_1287 : f32 = u_xlat1.x;
  let x_1289 : f32 = x_43.AdditionalParams.x;
  u_xlat2.x = (x_1287 * x_1289);
  let x_1293 : f32 = u_xlat2.x;
  u_xlat2.x = clamp(x_1293, 0.0f, 1.0f);
  let x_1297 : f32 = u_xlat15;
  let x_1299 : f32 = u_xlat2.x;
  u_xlat7 = max(x_1297, x_1299);
  let x_1301 : f32 = u_xlat15;
  let x_1303 : f32 = x_43.AdditionalParams.x;
  u_xlat15 = (x_1301 * x_1303);
  let x_1305 : f32 = u_xlat15;
  u_xlat15 = clamp(x_1305, 0.0f, 1.0f);
  let x_1307 : f32 = u_xlat7;
  u_xlat7 = min(x_1307, 1.0f);
  let x_1309 : f32 = u_xlat15;
  let x_1311 : f32 = u_xlat1.x;
  u_xlat1.x = max(x_1309, x_1311);
  let x_1315 : f32 = u_xlat1.x;
  u_xlat1.x = min(x_1315, 1.0f);
  let x_1319 : f32 = u_xlat1.x;
  let x_1320 : f32 = u_xlat7;
  u_xlat1.x = (x_1319 + x_1320);
  let x_1323 : f32 = u_xlat15;
  let x_1326 : f32 = u_xlat2.x;
  let x_1329 : f32 = u_xlat1.x;
  u_xlat15 = ((-(x_1323) * x_1326) + x_1329);
  let x_1331 : f32 = u_xlat15;
  u_xlat15 = clamp(x_1331, 0.0f, 1.0f);
  let x_1333 : f32 = u_xlat15;
  let x_1334 : f32 = u_xlat10;
  u_xlat10 = (x_1333 + x_1334);
  let x_1336 : vec2<i32> = u_xlati0;
  u_xlati4 = (vec4<i32>(x_1336.x, x_1336.x, x_1336.x, x_1336.x) + vec4<i32>(55i, 134i, 2i, 130i));
  let x_1344 : i32 = u_xlati4.x;
  let x_1346 : u32 = TGSM0[x_1344].value[0i];
  u_xlat15 = bitcast<f32>(x_1346);
  let x_1348 : f32 = u_xlat15;
  let x_1350 : f32 = u_xlat1.y;
  let x_1353 : f32 = u_xlat11.y;
  u_xlat15 = ((x_1348 * x_1350) + -(x_1353));
  let x_1356 : f32 = u_xlat15;
  let x_1358 : f32 = x_43.AdditionalParams.x;
  u_xlat1.x = (x_1356 * x_1358);
  let x_1362 : f32 = u_xlat1.x;
  u_xlat1.x = clamp(x_1362, 0.0f, 1.0f);
  let x_1366 : f32 = u_xlat1.x;
  let x_1368 : f32 = u_xlat11.x;
  u_xlat6.x = max(x_1366, x_1368);
  let x_1372 : f32 = u_xlat11.x;
  let x_1374 : f32 = x_43.AdditionalParams.x;
  u_xlat11.x = (x_1372 * x_1374);
  let x_1378 : f32 = u_xlat11.x;
  u_xlat11.x = clamp(x_1378, 0.0f, 1.0f);
  let x_1382 : f32 = u_xlat6.x;
  u_xlat6.x = min(x_1382, 1.0f);
  let x_1385 : f32 = u_xlat15;
  let x_1387 : f32 = u_xlat11.x;
  u_xlat15 = max(x_1385, x_1387);
  let x_1389 : f32 = u_xlat15;
  u_xlat15 = min(x_1389, 1.0f);
  let x_1391 : f32 = u_xlat15;
  let x_1393 : f32 = u_xlat6.x;
  u_xlat15 = (x_1391 + x_1393);
  let x_1396 : f32 = u_xlat11.x;
  let x_1399 : f32 = u_xlat1.x;
  let x_1401 : f32 = u_xlat15;
  u_xlat15 = ((-(x_1396) * x_1399) + x_1401);
  let x_1403 : f32 = u_xlat15;
  u_xlat15 = clamp(x_1403, 0.0f, 1.0f);
  let x_1405 : f32 = u_xlat15;
  let x_1406 : f32 = u_xlat10;
  u_xlat10 = (x_1405 + x_1406);
  let x_1408 : f32 = u_xlat10;
  let x_1410 : f32 = x_43.gSampleWeightTable[1i].z;
  u_xlat10 = (x_1408 * x_1410);
  let x_1412 : f32 = u_xlat10;
  let x_1416 : f32 = u_xlat5.x;
  u_xlat5.x = ((x_1412 * 0.25f) + x_1416);
  let x_1420 : i32 = u_xlati4.y;
  let x_1422 : u32 = TGSM0[x_1420].value[0i];
  u_xlat10 = bitcast<f32>(x_1422);
  let x_1424 : f32 = u_xlat10;
  let x_1426 : f32 = u_xlat2.z;
  let x_1429 : f32 = u_xlat3.z;
  u_xlat10 = ((x_1424 * x_1426) + -(x_1429));
  let x_1433 : i32 = u_xlati4.z;
  let x_1435 : u32 = TGSM0[x_1433].value[0i];
  u_xlat15 = bitcast<f32>(x_1435);
  let x_1438 : i32 = u_xlati4.w;
  let x_1440 : u32 = TGSM0[x_1438].value[0i];
  u_xlat1.x = bitcast<f32>(x_1440);
  let x_1444 : f32 = u_xlat1.x;
  let x_1446 : f32 = u_xlat2.z;
  let x_1449 : f32 = u_xlat3.z;
  u_xlat1.x = ((x_1444 * x_1446) + -(x_1449));
  let x_1453 : f32 = u_xlat15;
  let x_1455 : f32 = u_xlat2.z;
  let x_1458 : f32 = u_xlat3.z;
  u_xlat15 = ((x_1453 * x_1455) + -(x_1458));
  let x_1461 : f32 = u_xlat15;
  let x_1463 : f32 = x_43.AdditionalParams.x;
  u_xlat6.x = (x_1461 * x_1463);
  let x_1467 : f32 = u_xlat6.x;
  u_xlat6.x = clamp(x_1467, 0.0f, 1.0f);
  let x_1470 : f32 = u_xlat10;
  let x_1472 : f32 = u_xlat6.x;
  u_xlat11.x = max(x_1470, x_1472);
  let x_1475 : f32 = u_xlat10;
  let x_1477 : f32 = x_43.AdditionalParams.x;
  u_xlat10 = (x_1475 * x_1477);
  let x_1479 : f32 = u_xlat10;
  u_xlat10 = clamp(x_1479, 0.0f, 1.0f);
  let x_1482 : f32 = u_xlat11.x;
  u_xlat11.x = min(x_1482, 1.0f);
  let x_1485 : f32 = u_xlat10;
  let x_1486 : f32 = u_xlat15;
  u_xlat15 = max(x_1485, x_1486);
  let x_1488 : f32 = u_xlat15;
  u_xlat15 = min(x_1488, 1.0f);
  let x_1490 : f32 = u_xlat15;
  let x_1492 : f32 = u_xlat11.x;
  u_xlat15 = (x_1490 + x_1492);
  let x_1494 : f32 = u_xlat10;
  let x_1497 : f32 = u_xlat6.x;
  let x_1499 : f32 = u_xlat15;
  u_xlat10 = ((-(x_1494) * x_1497) + x_1499);
  let x_1501 : f32 = u_xlat10;
  u_xlat10 = clamp(x_1501, 0.0f, 1.0f);
  let x_1503 : vec2<i32> = u_xlati0;
  u_xlati4 = (vec4<i32>(x_1503.x, x_1503.x, x_1503.x, x_1503.x) + vec4<i32>(6i, 104i, 32i, 96i));
  let x_1511 : i32 = u_xlati0.x;
  u_xlati0.x = (x_1511 + 40i);
  let x_1516 : i32 = u_xlati0.x;
  let x_1518 : u32 = TGSM0[x_1516].value[0i];
  u_xlat0.x = bitcast<f32>(x_1518);
  let x_1522 : f32 = u_xlat0.x;
  let x_1524 : f32 = u_xlat2.z;
  let x_1527 : f32 = u_xlat3.z;
  u_xlat0.x = ((x_1522 * x_1524) + -(x_1527));
  let x_1532 : i32 = u_xlati4.x;
  let x_1534 : u32 = TGSM0[x_1532].value[0i];
  u_xlat15 = bitcast<f32>(x_1534);
  let x_1536 : f32 = u_xlat15;
  let x_1538 : f32 = u_xlat2.z;
  let x_1541 : f32 = u_xlat3.z;
  u_xlat15 = ((x_1536 * x_1538) + -(x_1541));
  let x_1544 : f32 = u_xlat15;
  let x_1546 : f32 = x_43.AdditionalParams.x;
  u_xlat6.x = (x_1544 * x_1546);
  let x_1550 : f32 = u_xlat6.x;
  u_xlat6.x = clamp(x_1550, 0.0f, 1.0f);
  let x_1554 : f32 = u_xlat6.x;
  let x_1556 : f32 = u_xlat1.x;
  u_xlat11.x = max(x_1554, x_1556);
  let x_1560 : f32 = u_xlat1.x;
  let x_1562 : f32 = x_43.AdditionalParams.x;
  u_xlat1.x = (x_1560 * x_1562);
  let x_1566 : f32 = u_xlat1.x;
  u_xlat1.x = clamp(x_1566, 0.0f, 1.0f);
  let x_1570 : f32 = u_xlat11.x;
  u_xlat11.x = min(x_1570, 1.0f);
  let x_1573 : f32 = u_xlat15;
  let x_1575 : f32 = u_xlat1.x;
  u_xlat15 = max(x_1573, x_1575);
  let x_1577 : f32 = u_xlat15;
  u_xlat15 = min(x_1577, 1.0f);
  let x_1579 : f32 = u_xlat15;
  let x_1581 : f32 = u_xlat11.x;
  u_xlat15 = (x_1579 + x_1581);
  let x_1584 : f32 = u_xlat1.x;
  let x_1587 : f32 = u_xlat6.x;
  let x_1589 : f32 = u_xlat15;
  u_xlat15 = ((-(x_1584) * x_1587) + x_1589);
  let x_1591 : f32 = u_xlat15;
  u_xlat15 = clamp(x_1591, 0.0f, 1.0f);
  let x_1593 : f32 = u_xlat15;
  let x_1594 : f32 = u_xlat10;
  u_xlat10 = (x_1593 + x_1594);
  let x_1597 : i32 = u_xlati4.y;
  let x_1599 : u32 = TGSM0[x_1597].value[0i];
  u_xlat15 = bitcast<f32>(x_1599);
  let x_1601 : f32 = u_xlat15;
  let x_1603 : f32 = u_xlat2.z;
  let x_1606 : f32 = u_xlat3.z;
  u_xlat15 = ((x_1601 * x_1603) + -(x_1606));
  let x_1610 : i32 = u_xlati4.z;
  let x_1612 : u32 = TGSM0[x_1610].value[0i];
  u_xlat1.x = bitcast<f32>(x_1612);
  let x_1616 : i32 = u_xlati4.w;
  let x_1618 : u32 = TGSM0[x_1616].value[0i];
  u_xlat6.x = bitcast<f32>(x_1618);
  let x_1622 : f32 = u_xlat6.x;
  let x_1624 : f32 = u_xlat2.z;
  let x_1627 : f32 = u_xlat3.z;
  u_xlat6.x = ((x_1622 * x_1624) + -(x_1627));
  let x_1632 : f32 = u_xlat1.x;
  let x_1634 : f32 = u_xlat2.z;
  let x_1637 : f32 = u_xlat3.z;
  u_xlat1.x = ((x_1632 * x_1634) + -(x_1637));
  let x_1642 : f32 = u_xlat1.x;
  let x_1644 : f32 = x_43.AdditionalParams.x;
  u_xlat11.x = (x_1642 * x_1644);
  let x_1648 : f32 = u_xlat11.x;
  u_xlat11.x = clamp(x_1648, 0.0f, 1.0f);
  let x_1651 : f32 = u_xlat15;
  let x_1653 : f32 = u_xlat11.x;
  u_xlat1.w = max(x_1651, x_1653);
  let x_1656 : f32 = u_xlat15;
  let x_1658 : f32 = x_43.AdditionalParams.x;
  u_xlat15 = (x_1656 * x_1658);
  let x_1660 : f32 = u_xlat15;
  u_xlat15 = clamp(x_1660, 0.0f, 1.0f);
  let x_1662 : f32 = u_xlat15;
  let x_1664 : f32 = u_xlat1.x;
  u_xlat1.x = max(x_1662, x_1664);
  let x_1667 : vec4<f32> = u_xlat1;
  let x_1669 : vec2<f32> = min(vec2<f32>(x_1667.x, x_1667.w), vec2<f32>(1.0f, 1.0f));
  let x_1670 : vec4<f32> = u_xlat1;
  u_xlat1 = vec4<f32>(x_1669.x, x_1670.y, x_1670.z, x_1669.y);
  let x_1673 : f32 = u_xlat1.x;
  let x_1675 : f32 = u_xlat1.w;
  u_xlat1.x = (x_1673 + x_1675);
  let x_1678 : f32 = u_xlat15;
  let x_1681 : f32 = u_xlat11.x;
  let x_1684 : f32 = u_xlat1.x;
  u_xlat15 = ((-(x_1678) * x_1681) + x_1684);
  let x_1686 : f32 = u_xlat15;
  u_xlat15 = clamp(x_1686, 0.0f, 1.0f);
  let x_1688 : f32 = u_xlat15;
  let x_1689 : f32 = u_xlat10;
  u_xlat10 = (x_1688 + x_1689);
  let x_1692 : f32 = u_xlat0.x;
  let x_1694 : f32 = x_43.AdditionalParams.x;
  u_xlat15 = (x_1692 * x_1694);
  let x_1696 : f32 = u_xlat15;
  u_xlat15 = clamp(x_1696, 0.0f, 1.0f);
  let x_1698 : f32 = u_xlat15;
  let x_1700 : f32 = u_xlat6.x;
  u_xlat1.x = max(x_1698, x_1700);
  let x_1704 : f32 = u_xlat6.x;
  let x_1706 : f32 = x_43.AdditionalParams.x;
  u_xlat6.x = (x_1704 * x_1706);
  let x_1710 : f32 = u_xlat6.x;
  u_xlat6.x = clamp(x_1710, 0.0f, 1.0f);
  let x_1714 : f32 = u_xlat1.x;
  u_xlat1.x = min(x_1714, 1.0f);
  let x_1718 : f32 = u_xlat0.x;
  let x_1720 : f32 = u_xlat6.x;
  u_xlat0.x = max(x_1718, x_1720);
  let x_1724 : f32 = u_xlat0.x;
  u_xlat0.x = min(x_1724, 1.0f);
  let x_1728 : f32 = u_xlat0.x;
  let x_1730 : f32 = u_xlat1.x;
  u_xlat0.x = (x_1728 + x_1730);
  let x_1734 : f32 = u_xlat6.x;
  let x_1736 : f32 = u_xlat15;
  let x_1739 : f32 = u_xlat0.x;
  u_xlat0.x = ((-(x_1734) * x_1736) + x_1739);
  let x_1743 : f32 = u_xlat0.x;
  u_xlat0.x = clamp(x_1743, 0.0f, 1.0f);
  let x_1747 : f32 = u_xlat0.x;
  let x_1748 : f32 = u_xlat10;
  u_xlat0.x = (x_1747 + x_1748);
  let x_1752 : f32 = u_xlat0.x;
  let x_1754 : f32 = x_43.gSampleWeightTable[2i].z;
  u_xlat0.x = (x_1752 * x_1754);
  let x_1758 : f32 = u_xlat0.x;
  let x_1761 : f32 = u_xlat5.x;
  u_xlat0.x = ((x_1758 * 0.25f) + x_1761);
  let x_1765 : f32 = u_xlat0.x;
  u_xlat0.x = (x_1765 + -1.0f);
  let x_1770 : f32 = x_43.AdditionalParams.y;
  let x_1772 : f32 = u_xlat0.x;
  u_xlat0.x = ((x_1770 * x_1772) + 1.0f);
  let x_1777 : vec3<u32> = gl_GlobalInvocationID;
  u_xlati1 = (bitcast<vec4<i32>>(vec4<u32>(x_1777.x, x_1777.y, x_1777.y, x_1777.y)) << bitcast<vec4<u32>>(vec4<i32>(2i, 2i, 2i, 2i)));
  let x_1785 : u32 = gl_GlobalInvocationID.z;
  u_xlatu2.x = (x_1785 & 3u);
  let x_1789 : vec3<u32> = gl_GlobalInvocationID;
  let x_1792 : vec3<u32> = (vec3<u32>(x_1789.z, x_1789.z, x_1789.z) >> vec3<u32>(2u, 2u, 2u));
  let x_1793 : vec4<u32> = u_xlatu2;
  u_xlatu2 = vec4<u32>(x_1793.x, x_1792.x, x_1792.y, x_1792.z);
  let x_1795 : vec4<i32> = u_xlati1;
  let x_1797 : vec4<u32> = u_xlatu2;
  u_xlati1 = bitcast<vec4<i32>>((bitcast<vec4<u32>>(x_1795) | x_1797));
  let x_1804 : vec4<i32> = u_xlati1;
  let x_1806 : vec4<f32> = u_xlat0;
  textureStore(Occlusion_origX0X, vec2<i32>(x_1804.x, x_1804.y), vec4<f32>(x_1806.x, x_1806.x, x_1806.x, x_1806.x));
  return;
}

@compute @workgroup_size(8i, 8i, 1i)
fn main(@builtin(local_invocation_id) gl_LocalInvocationID_param : vec3<u32>, @builtin(global_invocation_id) gl_GlobalInvocationID_param : vec3<u32>) {
  gl_LocalInvocationID = gl_LocalInvocationID_param;
  gl_GlobalInvocationID = gl_GlobalInvocationID_param;
  main_1();
}

