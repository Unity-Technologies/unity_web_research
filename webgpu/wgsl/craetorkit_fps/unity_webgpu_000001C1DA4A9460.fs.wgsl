type Arr = array<mat4x4<f32>, 4u>;

struct PGlobals {
  x_WorldSpaceCameraPos : vec3<f32>,
  @size(4)
  padding : u32,
  x_ProjectionParams : vec4<f32>,
  x_WorldSpaceLightPos0 : vec4<f32>,
  unity_OcclusionMaskSelector : vec4<f32>,
  unity_WorldToShadow : Arr,
  x_LightShadowData : vec4<f32>,
  unity_ShadowFadeCenterAndType : vec4<f32>,
  unity_MatrixV : mat4x4<f32>,
  unity_FogParams : vec4<f32>,
  unity_ProbeVolumeParams : vec4<f32>,
  unity_ProbeVolumeWorldToObject : mat4x4<f32>,
  unity_ProbeVolumeSizeInv : vec3<f32>,
  @size(4)
  padding_1 : u32,
  unity_ProbeVolumeMin : vec3<f32>,
  @size(4)
  padding_2 : u32,
  x_LightColor0 : vec4<f32>,
  x_ShadowMapTexture_TexelSize : vec4<f32>,
  unity_WorldToLight : mat4x4<f32>,
  x_Glossiness : f32,
  x_Metallic : f32,
  x_Scale : f32,
  @size(4)
  padding_3 : u32,
  x_OctaveIndex : vec4<i32>,
}

var<private> vs_TEXCOORD1 : vec3<f32>;

@group(1) @binding(0) var<uniform> x_23 : PGlobals;

@group(0) @binding(0) var x_VolumeNoise : texture_3d<f32>;

@group(0) @binding(13) var sampler_VolumeNoise : sampler;

@group(0) @binding(1) var x_AlbedoRamp1 : texture_2d<f32>;

@group(0) @binding(11) var sampler_AlbedoRamp1 : sampler;

@group(0) @binding(2) var x_AlbedoRamp2 : texture_2d<f32>;

@group(0) @binding(12) var sampler_AlbedoRamp2 : sampler;

var<private> vs_COLOR0 : vec4<f32>;

@group(0) @binding(5) var unity_ProbeVolumeSH : texture_3d<f32>;

@group(0) @binding(7) var samplerunity_ProbeVolumeSH : sampler;

@group(0) @binding(6) var x_ShadowMapTexture : texture_depth_2d;

@group(0) @binding(8) var sampler_ShadowMapTexture : sampler_comparison;

@group(0) @binding(3) var x_LightTexture0 : texture_2d<f32>;

@group(0) @binding(9) var sampler_LightTexture0 : sampler;

@group(0) @binding(4) var x_LightTextureB0 : texture_2d<f32>;

@group(0) @binding(10) var sampler_LightTextureB0 : sampler;

var<private> vs_TEXCOORD0 : vec3<f32>;

var<private> vs_TEXCOORD4 : f32;

var<private> SV_Target0 : vec4<f32>;

var<private> gl_FragCoord : vec4<f32>;

fn main_1() {
  var u_xlat0 : vec3<f32>;
  var u_xlat33 : f32;
  var u_xlat1 : vec3<f32>;
  var u_xlat2 : vec4<f32>;
  var u_xlat34 : f32;
  var u_xlat3 : vec3<f32>;
  var u_xlati4 : vec4<i32>;
  var u_xlat5 : vec4<f32>;
  var u_xlat6 : vec4<f32>;
  var indexable : array<vec4<u32>, 4u>;
  var u_xlat35 : f32;
  var indexable_1 : array<vec4<u32>, 4u>;
  var u_xlat36 : f32;
  var indexable_2 : array<vec4<u32>, 4u>;
  var u_xlat4 : vec4<f32>;
  var indexable_3 : array<vec4<u32>, 4u>;
  var u_xlatb2 : bool;
  var u_xlat13 : vec3<f32>;
  var x_376 : vec3<f32>;
  var u_xlatb13 : bool;
  var u_xlat7 : vec4<f32>;
  var u_xlat8 : vec4<f32>;
  var u_xlat28 : vec2<f32>;
  var u_xlat9 : vec4<f32>;
  var u_xlat10 : vec4<f32>;
  var txVec0 : vec3<f32>;
  var txVec1 : vec3<f32>;
  var u_xlat24 : f32;
  var txVec2 : vec3<f32>;
  var txVec3 : vec3<f32>;
  var u_xlat11 : vec3<f32>;
  var u_xlat22 : f32;
  var u_xlat12 : f32;
  var u_xlatb33 : bool;
  var u_xlat_precise_vec4 : vec4<f32>;
  var u_xlat_precise_ivec4 : vec4<i32>;
  var u_xlat_precise_bvec4 : vec4<bool>;
  var u_xlat_precise_uvec4 : vec4<u32>;
  let x_12 : vec3<f32> = vs_TEXCOORD1;
  let x_27 : vec4<f32> = x_23.x_WorldSpaceLightPos0;
  u_xlat0 = (-(x_12) + vec3<f32>(x_27.x, x_27.y, x_27.z));
  let x_32 : vec3<f32> = u_xlat0;
  let x_33 : vec3<f32> = u_xlat0;
  u_xlat33 = dot(x_32, x_33);
  let x_35 : f32 = u_xlat33;
  u_xlat33 = inverseSqrt(x_35);
  let x_38 : f32 = u_xlat33;
  let x_40 : vec3<f32> = u_xlat0;
  u_xlat1 = (vec3<f32>(x_38, x_38, x_38) * x_40);
  let x_44 : vec3<f32> = vs_TEXCOORD1;
  let x_49 : vec3<f32> = x_23.x_WorldSpaceCameraPos;
  let x_50 : vec3<f32> = (-(x_44) + x_49);
  let x_51 : vec4<f32> = u_xlat2;
  u_xlat2 = vec4<f32>(x_50.x, x_50.y, x_50.z, x_51.w);
  let x_54 : vec4<f32> = u_xlat2;
  let x_56 : vec4<f32> = u_xlat2;
  u_xlat34 = dot(vec3<f32>(x_54.x, x_54.y, x_54.z), vec3<f32>(x_56.x, x_56.y, x_56.z));
  let x_59 : f32 = u_xlat34;
  u_xlat34 = inverseSqrt(x_59);
  let x_62 : f32 = u_xlat34;
  let x_64 : vec4<f32> = u_xlat2;
  u_xlat3 = (vec3<f32>(x_62, x_62, x_62) * vec3<f32>(x_64.x, x_64.y, x_64.z));
  let x_72 : vec4<i32> = x_23.x_OctaveIndex;
  u_xlati4 = min(x_72, vec4<i32>(3i, 3i, 3i, 3i));
  let x_77 : vec3<f32> = vs_TEXCOORD1;
  let x_81 : f32 = x_23.x_Scale;
  let x_83 : f32 = x_23.x_Scale;
  let x_85 : f32 = x_23.x_Scale;
  let x_86 : vec3<f32> = vec3<f32>(x_81, x_83, x_85);
  let x_91 : vec3<f32> = (x_77 * vec3<f32>(x_86.x, x_86.y, x_86.z));
  let x_92 : vec4<f32> = u_xlat5;
  u_xlat5 = vec4<f32>(x_91.x, x_91.y, x_91.z, x_92.w);
  let x_105 : vec4<f32> = u_xlat5;
  let x_107 : vec4<f32> = textureSample(x_VolumeNoise, sampler_VolumeNoise, vec3<f32>(x_105.x, x_105.y, x_105.z));
  u_xlat6 = x_107;
  let x_108 : vec4<f32> = u_xlat6;
  let x_120 : i32 = u_xlati4.x;
  indexable = array<vec4<u32>, 4u>(vec4<u32>(1065353216u, 0u, 0u, 0u), vec4<u32>(0u, 1065353216u, 0u, 0u), vec4<u32>(0u, 0u, 1065353216u, 0u), vec4<u32>(0u, 0u, 0u, 1065353216u));
  let x_125 : vec4<u32> = indexable[x_120];
  u_xlat34 = dot(x_108, bitcast<vec4<f32>>(x_125));
  let x_128 : vec4<f32> = u_xlat5;
  let x_132 : vec3<f32> = (vec3<f32>(x_128.x, x_128.y, x_128.z) * vec3<f32>(4.0f, 4.0f, 4.0f));
  let x_133 : vec4<f32> = u_xlat6;
  u_xlat6 = vec4<f32>(x_132.x, x_132.y, x_132.z, x_133.w);
  let x_138 : vec4<f32> = u_xlat6;
  let x_140 : vec4<f32> = textureSample(x_VolumeNoise, sampler_VolumeNoise, vec3<f32>(x_138.x, x_138.y, x_138.z));
  u_xlat6 = x_140;
  let x_142 : vec4<f32> = u_xlat6;
  let x_145 : i32 = u_xlati4.y;
  indexable_1 = array<vec4<u32>, 4u>(vec4<u32>(1065353216u, 0u, 0u, 0u), vec4<u32>(0u, 1065353216u, 0u, 0u), vec4<u32>(0u, 0u, 1065353216u, 0u), vec4<u32>(0u, 0u, 0u, 1065353216u));
  let x_148 : vec4<u32> = indexable_1[x_145];
  u_xlat35 = dot(x_142, bitcast<vec4<f32>>(x_148));
  let x_151 : vec4<f32> = u_xlat5;
  let x_155 : vec3<f32> = (vec3<f32>(x_151.x, x_151.y, x_151.z) * vec3<f32>(16.0f, 16.0f, 16.0f));
  let x_156 : vec4<f32> = u_xlat6;
  u_xlat6 = vec4<f32>(x_155.x, x_155.y, x_155.z, x_156.w);
  let x_161 : vec4<f32> = u_xlat6;
  let x_163 : vec4<f32> = textureSample(x_VolumeNoise, sampler_VolumeNoise, vec3<f32>(x_161.x, x_161.y, x_161.z));
  u_xlat6 = x_163;
  let x_165 : vec4<f32> = u_xlat6;
  let x_168 : i32 = u_xlati4.z;
  indexable_2 = array<vec4<u32>, 4u>(vec4<u32>(1065353216u, 0u, 0u, 0u), vec4<u32>(0u, 1065353216u, 0u, 0u), vec4<u32>(0u, 0u, 1065353216u, 0u), vec4<u32>(0u, 0u, 0u, 1065353216u));
  let x_171 : vec4<u32> = indexable_2[x_168];
  u_xlat36 = dot(x_165, bitcast<vec4<f32>>(x_171));
  let x_175 : vec4<f32> = u_xlat5;
  let x_179 : vec3<f32> = (vec3<f32>(x_175.x, x_175.y, x_175.z) * vec3<f32>(256.0f, 256.0f, 256.0f));
  let x_180 : vec4<f32> = u_xlat4;
  u_xlat4 = vec4<f32>(x_179.x, x_179.y, x_179.z, x_180.w);
  let x_185 : vec4<f32> = u_xlat4;
  let x_187 : vec4<f32> = textureSample(x_VolumeNoise, sampler_VolumeNoise, vec3<f32>(x_185.x, x_185.y, x_185.z));
  u_xlat5 = x_187;
  let x_188 : vec4<f32> = u_xlat5;
  let x_191 : i32 = u_xlati4.w;
  indexable_3 = array<vec4<u32>, 4u>(vec4<u32>(1065353216u, 0u, 0u, 0u), vec4<u32>(0u, 1065353216u, 0u, 0u), vec4<u32>(0u, 0u, 1065353216u, 0u), vec4<u32>(0u, 0u, 0u, 1065353216u));
  let x_194 : vec4<u32> = indexable_3[x_191];
  u_xlat4.x = dot(x_188, bitcast<vec4<f32>>(x_194));
  let x_198 : f32 = u_xlat35;
  let x_201 : f32 = u_xlat34;
  u_xlat34 = ((x_198 * 0.5f) + x_201);
  let x_203 : f32 = u_xlat36;
  let x_206 : f32 = u_xlat34;
  u_xlat34 = ((x_203 * 0.25f) + x_206);
  let x_209 : f32 = u_xlat4.x;
  let x_212 : f32 = u_xlat34;
  u_xlat34 = ((x_209 * 0.125f) + x_212);
  let x_214 : f32 = u_xlat34;
  u_xlat34 = (x_214 * 0.533333361f);
  let x_225 : f32 = u_xlat34;
  let x_228 : vec4<f32> = textureSample(x_AlbedoRamp1, sampler_AlbedoRamp1, vec2<f32>(x_225, x_225));
  u_xlat4 = x_228;
  let x_234 : f32 = u_xlat34;
  let x_236 : vec4<f32> = textureSample(x_AlbedoRamp2, sampler_AlbedoRamp2, vec2<f32>(x_234, x_234));
  u_xlat5 = x_236;
  let x_237 : vec4<f32> = u_xlat4;
  let x_239 : vec4<f32> = u_xlat5;
  u_xlat5 = (-(x_237) + x_239);
  let x_243 : vec4<f32> = vs_COLOR0;
  let x_245 : vec4<f32> = u_xlat5;
  let x_247 : vec4<f32> = u_xlat4;
  u_xlat4 = ((vec4<f32>(x_243.w, x_243.w, x_243.w, x_243.w) * x_245) + x_247);
  let x_249 : vec3<f32> = vs_TEXCOORD1;
  let x_254 : vec4<f32> = x_23.unity_WorldToLight[1i];
  u_xlat5 = (vec4<f32>(x_249.y, x_249.y, x_249.y, x_249.y) * x_254);
  let x_257 : vec4<f32> = x_23.unity_WorldToLight[0i];
  let x_258 : vec3<f32> = vs_TEXCOORD1;
  let x_261 : vec4<f32> = u_xlat5;
  u_xlat5 = ((x_257 * vec4<f32>(x_258.x, x_258.x, x_258.x, x_258.x)) + x_261);
  let x_264 : vec4<f32> = x_23.unity_WorldToLight[2i];
  let x_265 : vec3<f32> = vs_TEXCOORD1;
  let x_268 : vec4<f32> = u_xlat5;
  u_xlat5 = ((x_264 * vec4<f32>(x_265.z, x_265.z, x_265.z, x_265.z)) + x_268);
  let x_270 : vec4<f32> = u_xlat5;
  let x_272 : vec4<f32> = x_23.unity_WorldToLight[3i];
  u_xlat5 = (x_270 + x_272);
  let x_276 : f32 = x_23.unity_MatrixV[0i].z;
  u_xlat6.x = x_276;
  let x_279 : f32 = x_23.unity_MatrixV[1i].z;
  u_xlat6.y = x_279;
  let x_282 : f32 = x_23.unity_MatrixV[2i].z;
  u_xlat6.z = x_282;
  let x_284 : vec4<f32> = u_xlat2;
  let x_286 : vec4<f32> = u_xlat6;
  u_xlat34 = dot(vec3<f32>(x_284.x, x_284.y, x_284.z), vec3<f32>(x_286.x, x_286.y, x_286.z));
  let x_289 : vec3<f32> = vs_TEXCOORD1;
  let x_292 : vec4<f32> = x_23.unity_ShadowFadeCenterAndType;
  let x_295 : vec3<f32> = (x_289 + -(vec3<f32>(x_292.x, x_292.y, x_292.z)));
  let x_296 : vec4<f32> = u_xlat2;
  u_xlat2 = vec4<f32>(x_295.x, x_295.y, x_295.z, x_296.w);
  let x_298 : vec4<f32> = u_xlat2;
  let x_300 : vec4<f32> = u_xlat2;
  u_xlat2.x = dot(vec3<f32>(x_298.x, x_298.y, x_298.z), vec3<f32>(x_300.x, x_300.y, x_300.z));
  let x_305 : f32 = u_xlat2.x;
  u_xlat2.x = sqrt(x_305);
  let x_308 : f32 = u_xlat34;
  let x_311 : f32 = u_xlat2.x;
  u_xlat2.x = (-(x_308) + x_311);
  let x_315 : f32 = x_23.unity_ShadowFadeCenterAndType.w;
  let x_317 : f32 = u_xlat2.x;
  let x_319 : f32 = u_xlat34;
  u_xlat34 = ((x_315 * x_317) + x_319);
  let x_321 : f32 = u_xlat34;
  let x_324 : f32 = x_23.x_LightShadowData.z;
  let x_327 : f32 = x_23.x_LightShadowData.w;
  u_xlat34 = ((x_321 * x_324) + x_327);
  let x_329 : f32 = u_xlat34;
  u_xlat34 = clamp(x_329, 0.0f, 1.0f);
  let x_338 : f32 = x_23.unity_ProbeVolumeParams.x;
  u_xlatb2 = (x_338 == 1.0f);
  let x_340 : bool = u_xlatb2;
  if (x_340) {
    let x_344 : f32 = x_23.unity_ProbeVolumeParams.y;
    u_xlatb2 = (x_344 == 1.0f);
    let x_347 : vec3<f32> = vs_TEXCOORD1;
    let x_351 : vec4<f32> = x_23.unity_ProbeVolumeWorldToObject[1i];
    u_xlat13 = (vec3<f32>(x_347.y, x_347.y, x_347.y) * vec3<f32>(x_351.x, x_351.y, x_351.z));
    let x_355 : vec4<f32> = x_23.unity_ProbeVolumeWorldToObject[0i];
    let x_357 : vec3<f32> = vs_TEXCOORD1;
    let x_360 : vec3<f32> = u_xlat13;
    u_xlat13 = ((vec3<f32>(x_355.x, x_355.y, x_355.z) * vec3<f32>(x_357.x, x_357.x, x_357.x)) + x_360);
    let x_363 : vec4<f32> = x_23.unity_ProbeVolumeWorldToObject[2i];
    let x_365 : vec3<f32> = vs_TEXCOORD1;
    let x_368 : vec3<f32> = u_xlat13;
    u_xlat13 = ((vec3<f32>(x_363.x, x_363.y, x_363.z) * vec3<f32>(x_365.z, x_365.z, x_365.z)) + x_368);
    let x_370 : vec3<f32> = u_xlat13;
    let x_372 : vec4<f32> = x_23.unity_ProbeVolumeWorldToObject[3i];
    u_xlat13 = (x_370 + vec3<f32>(x_372.x, x_372.y, x_372.z));
    let x_375 : bool = u_xlatb2;
    if (x_375) {
      let x_379 : vec3<f32> = u_xlat13;
      x_376 = x_379;
    } else {
      let x_381 : vec3<f32> = vs_TEXCOORD1;
      x_376 = x_381;
    }
    let x_382 : vec3<f32> = x_376;
    let x_383 : vec4<f32> = u_xlat2;
    u_xlat2 = vec4<f32>(x_382.x, x_382.y, x_382.z, x_383.w);
    let x_385 : vec4<f32> = u_xlat2;
    let x_389 : vec3<f32> = x_23.unity_ProbeVolumeMin;
    let x_391 : vec3<f32> = (vec3<f32>(x_385.x, x_385.y, x_385.z) + -(x_389));
    let x_392 : vec4<f32> = u_xlat2;
    u_xlat2 = vec4<f32>(x_391.x, x_391.y, x_391.z, x_392.w);
    let x_394 : vec4<f32> = u_xlat2;
    let x_398 : vec3<f32> = x_23.unity_ProbeVolumeSizeInv;
    let x_399 : vec3<f32> = (vec3<f32>(x_394.x, x_394.y, x_394.z) * x_398);
    let x_400 : vec4<f32> = u_xlat2;
    u_xlat2 = vec4<f32>(x_400.x, x_399.x, x_399.y, x_399.z);
    let x_403 : f32 = u_xlat2.y;
    u_xlat13.x = ((x_403 * 0.25f) + 0.75f);
    let x_409 : f32 = x_23.unity_ProbeVolumeParams.z;
    u_xlat36 = ((x_409 * 0.5f) + 0.75f);
    let x_413 : f32 = u_xlat13.x;
    let x_414 : f32 = u_xlat36;
    u_xlat2.x = max(x_413, x_414);
    let x_422 : vec4<f32> = u_xlat2;
    let x_424 : vec4<f32> = textureSample(unity_ProbeVolumeSH, samplerunity_ProbeVolumeSH, vec3<f32>(x_422.x, x_422.z, x_422.w));
    u_xlat2 = x_424;
  } else {
    u_xlat2.x = 1.0f;
    u_xlat2.y = 1.0f;
    u_xlat2.z = 1.0f;
    u_xlat2.w = 1.0f;
  }
  let x_430 : vec4<f32> = u_xlat2;
  let x_432 : vec4<f32> = x_23.unity_OcclusionMaskSelector;
  u_xlat2.x = dot(x_430, x_432);
  let x_436 : f32 = u_xlat2.x;
  u_xlat2.x = clamp(x_436, 0.0f, 1.0f);
  let x_440 : f32 = u_xlat34;
  u_xlatb13 = (x_440 < 0.99000001f);
  let x_443 : bool = u_xlatb13;
  if (x_443) {
    let x_446 : vec3<f32> = vs_TEXCOORD1;
    let x_450 : vec4<f32> = x_23.unity_WorldToShadow[0i][1i];
    u_xlat6 = (vec4<f32>(x_446.y, x_446.y, x_446.y, x_446.y) * x_450);
    let x_453 : vec4<f32> = x_23.unity_WorldToShadow[0i][0i];
    let x_454 : vec3<f32> = vs_TEXCOORD1;
    let x_457 : vec4<f32> = u_xlat6;
    u_xlat6 = ((x_453 * vec4<f32>(x_454.x, x_454.x, x_454.x, x_454.x)) + x_457);
    let x_460 : vec4<f32> = x_23.unity_WorldToShadow[0i][2i];
    let x_461 : vec3<f32> = vs_TEXCOORD1;
    let x_464 : vec4<f32> = u_xlat6;
    u_xlat6 = ((x_460 * vec4<f32>(x_461.z, x_461.z, x_461.z, x_461.z)) + x_464);
    let x_466 : vec4<f32> = u_xlat6;
    let x_468 : vec4<f32> = x_23.unity_WorldToShadow[0i][3i];
    u_xlat6 = (x_466 + x_468);
    let x_470 : vec4<f32> = u_xlat6;
    let x_472 : vec4<f32> = u_xlat6;
    u_xlat13 = (vec3<f32>(x_470.x, x_470.y, x_470.z) / vec3<f32>(x_472.w, x_472.w, x_472.w));
    let x_475 : vec3<f32> = u_xlat13;
    let x_479 : vec4<f32> = x_23.x_ShadowMapTexture_TexelSize;
    let x_483 : vec2<f32> = ((vec2<f32>(x_475.x, x_475.y) * vec2<f32>(x_479.z, x_479.w)) + vec2<f32>(0.5f, 0.5f));
    let x_484 : vec4<f32> = u_xlat6;
    u_xlat6 = vec4<f32>(x_483.x, x_483.y, x_484.z, x_484.w);
    let x_486 : vec4<f32> = u_xlat6;
    let x_488 : vec2<f32> = floor(vec2<f32>(x_486.x, x_486.y));
    let x_489 : vec4<f32> = u_xlat6;
    u_xlat6 = vec4<f32>(x_488.x, x_488.y, x_489.z, x_489.w);
    let x_491 : vec3<f32> = u_xlat13;
    let x_494 : vec4<f32> = x_23.x_ShadowMapTexture_TexelSize;
    let x_497 : vec4<f32> = u_xlat6;
    let x_500 : vec2<f32> = ((vec2<f32>(x_491.x, x_491.y) * vec2<f32>(x_494.z, x_494.w)) + -(vec2<f32>(x_497.x, x_497.y)));
    let x_501 : vec3<f32> = u_xlat13;
    u_xlat13 = vec3<f32>(x_500.x, x_500.y, x_501.z);
    let x_504 : vec3<f32> = u_xlat13;
    u_xlat7 = (vec4<f32>(x_504.x, x_504.x, x_504.y, x_504.y) + vec4<f32>(0.5f, 1.0f, 0.5f, 1.0f));
    let x_509 : vec4<f32> = u_xlat7;
    let x_511 : vec4<f32> = u_xlat7;
    let x_513 : vec2<f32> = (vec2<f32>(x_509.x, x_509.z) * vec2<f32>(x_511.x, x_511.z));
    let x_514 : vec4<f32> = u_xlat8;
    u_xlat8 = vec4<f32>(x_513.x, x_514.y, x_514.z, x_513.y);
    let x_518 : vec4<f32> = u_xlat8;
    let x_521 : vec3<f32> = u_xlat13;
    u_xlat28 = ((vec2<f32>(x_518.x, x_518.w) * vec2<f32>(0.5f, 0.5f)) + -(vec2<f32>(x_521.x, x_521.y)));
    let x_525 : vec3<f32> = u_xlat13;
    let x_529 : vec2<f32> = (-(vec2<f32>(x_525.x, x_525.y)) + vec2<f32>(1.0f, 1.0f));
    let x_530 : vec4<f32> = u_xlat7;
    u_xlat7 = vec4<f32>(x_529.x, x_530.y, x_529.y, x_530.w);
    let x_533 : vec3<f32> = u_xlat13;
    let x_536 : vec2<f32> = min(vec2<f32>(x_533.x, x_533.y), vec2<f32>(0.0f, 0.0f));
    let x_537 : vec4<f32> = u_xlat9;
    u_xlat9 = vec4<f32>(x_536.x, x_536.y, x_537.z, x_537.w);
    let x_539 : vec4<f32> = u_xlat9;
    let x_542 : vec4<f32> = u_xlat9;
    let x_545 : vec4<f32> = u_xlat7;
    let x_547 : vec2<f32> = ((-(vec2<f32>(x_539.x, x_539.y)) * vec2<f32>(x_542.x, x_542.y)) + vec2<f32>(x_545.x, x_545.z));
    let x_548 : vec4<f32> = u_xlat7;
    u_xlat7 = vec4<f32>(x_547.x, x_548.y, x_547.y, x_548.w);
    let x_550 : vec3<f32> = u_xlat13;
    let x_552 : vec2<f32> = max(vec2<f32>(x_550.x, x_550.y), vec2<f32>(0.0f, 0.0f));
    let x_553 : vec3<f32> = u_xlat13;
    u_xlat13 = vec3<f32>(x_552.x, x_552.y, x_553.z);
    let x_555 : vec3<f32> = u_xlat13;
    let x_558 : vec3<f32> = u_xlat13;
    let x_561 : vec4<f32> = u_xlat7;
    let x_563 : vec2<f32> = ((-(vec2<f32>(x_555.x, x_555.y)) * vec2<f32>(x_558.x, x_558.y)) + vec2<f32>(x_561.y, x_561.w));
    let x_564 : vec3<f32> = u_xlat13;
    u_xlat13 = vec3<f32>(x_563.x, x_563.y, x_564.z);
    let x_567 : f32 = u_xlat28.x;
    u_xlat9.x = x_567;
    let x_570 : f32 = u_xlat7.x;
    u_xlat9.y = x_570;
    let x_573 : f32 = u_xlat13.x;
    u_xlat9.z = x_573;
    let x_576 : f32 = u_xlat8.x;
    u_xlat9.w = x_576;
    let x_578 : vec4<f32> = u_xlat9;
    u_xlat9 = (x_578 * vec4<f32>(0.444440007f, 0.444440007f, 0.444440007f, 0.222220004f));
    let x_584 : f32 = u_xlat28.y;
    u_xlat8.x = x_584;
    let x_587 : f32 = u_xlat7.z;
    u_xlat8.y = x_587;
    let x_590 : f32 = u_xlat13.y;
    u_xlat8.z = x_590;
    let x_592 : vec4<f32> = u_xlat8;
    u_xlat7 = (x_592 * vec4<f32>(0.444440007f, 0.444440007f, 0.444440007f, 0.222220004f));
    let x_594 : vec4<f32> = u_xlat9;
    let x_596 : vec4<f32> = u_xlat9;
    u_xlat8 = (vec4<f32>(x_594.y, x_594.w, x_594.y, x_594.w) + vec4<f32>(x_596.x, x_596.z, x_596.x, x_596.z));
    let x_600 : vec4<f32> = u_xlat7;
    let x_602 : vec4<f32> = u_xlat7;
    u_xlat10 = (vec4<f32>(x_600.y, x_600.y, x_600.w, x_600.w) + vec4<f32>(x_602.x, x_602.x, x_602.z, x_602.z));
    let x_605 : vec4<f32> = u_xlat9;
    let x_607 : vec4<f32> = u_xlat8;
    let x_609 : vec2<f32> = (vec2<f32>(x_605.y, x_605.w) / vec2<f32>(x_607.z, x_607.w));
    let x_610 : vec3<f32> = u_xlat13;
    u_xlat13 = vec3<f32>(x_609.x, x_609.y, x_610.z);
    let x_612 : vec3<f32> = u_xlat13;
    let x_616 : vec2<f32> = (vec2<f32>(x_612.x, x_612.y) + vec2<f32>(-1.5f, 0.5f));
    let x_617 : vec3<f32> = u_xlat13;
    u_xlat13 = vec3<f32>(x_616.x, x_616.y, x_617.z);
    let x_619 : vec4<f32> = u_xlat7;
    let x_621 : vec4<f32> = u_xlat10;
    u_xlat28 = (vec2<f32>(x_619.y, x_619.w) / vec2<f32>(x_621.y, x_621.w));
    let x_624 : vec2<f32> = u_xlat28;
    u_xlat28 = (x_624 + vec2<f32>(-1.5f, 0.5f));
    let x_626 : vec3<f32> = u_xlat13;
    let x_629 : vec4<f32> = x_23.x_ShadowMapTexture_TexelSize;
    let x_631 : vec2<f32> = (vec2<f32>(x_626.x, x_626.y) * vec2<f32>(x_629.x, x_629.x));
    let x_632 : vec4<f32> = u_xlat7;
    u_xlat7 = vec4<f32>(x_631.x, x_631.y, x_632.z, x_632.w);
    let x_634 : vec2<f32> = u_xlat28;
    let x_636 : vec4<f32> = x_23.x_ShadowMapTexture_TexelSize;
    let x_638 : vec2<f32> = (x_634 * vec2<f32>(x_636.y, x_636.y));
    let x_639 : vec4<f32> = u_xlat7;
    u_xlat7 = vec4<f32>(x_639.x, x_639.y, x_638.x, x_638.y);
    let x_641 : vec4<f32> = u_xlat8;
    let x_642 : vec4<f32> = u_xlat10;
    u_xlat8 = (x_641 * x_642);
    let x_644 : vec4<f32> = u_xlat6;
    let x_647 : vec4<f32> = x_23.x_ShadowMapTexture_TexelSize;
    let x_650 : vec4<f32> = u_xlat7;
    u_xlat9 = ((vec4<f32>(x_644.x, x_644.y, x_644.x, x_644.y) * vec4<f32>(x_647.x, x_647.y, x_647.x, x_647.y)) + vec4<f32>(x_650.x, x_650.z, x_650.y, x_650.z));
    let x_654 : vec4<f32> = u_xlat9;
    let x_655 : vec2<f32> = vec2<f32>(x_654.x, x_654.y);
    let x_657 : f32 = u_xlat13.z;
    txVec0 = vec3<f32>(x_655.x, x_655.y, x_657);
    let x_669 : vec3<f32> = txVec0;
    let x_671 : f32 = textureSampleCompareLevel(x_ShadowMapTexture, sampler_ShadowMapTexture, x_669.xy, x_669.z);
    u_xlat13.x = x_671;
    let x_674 : vec4<f32> = u_xlat9;
    let x_675 : vec2<f32> = vec2<f32>(x_674.z, x_674.w);
    let x_677 : f32 = u_xlat13.z;
    txVec1 = vec3<f32>(x_675.x, x_675.y, x_677);
    let x_685 : vec3<f32> = txVec1;
    let x_687 : f32 = textureSampleCompareLevel(x_ShadowMapTexture, sampler_ShadowMapTexture, x_685.xy, x_685.z);
    u_xlat24 = x_687;
    let x_688 : f32 = u_xlat24;
    let x_690 : f32 = u_xlat8.y;
    u_xlat24 = (x_688 * x_690);
    let x_693 : f32 = u_xlat8.x;
    let x_695 : f32 = u_xlat13.x;
    let x_697 : f32 = u_xlat24;
    u_xlat13.x = ((x_693 * x_695) + x_697);
    let x_700 : vec4<f32> = u_xlat6;
    let x_703 : vec4<f32> = x_23.x_ShadowMapTexture_TexelSize;
    let x_706 : vec4<f32> = u_xlat7;
    u_xlat6 = ((vec4<f32>(x_700.x, x_700.y, x_700.x, x_700.y) * vec4<f32>(x_703.x, x_703.y, x_703.x, x_703.y)) + vec4<f32>(x_706.x, x_706.w, x_706.y, x_706.w));
    let x_710 : vec4<f32> = u_xlat6;
    let x_711 : vec2<f32> = vec2<f32>(x_710.x, x_710.y);
    let x_713 : f32 = u_xlat13.z;
    txVec2 = vec3<f32>(x_711.x, x_711.y, x_713);
    let x_720 : vec3<f32> = txVec2;
    let x_722 : f32 = textureSampleCompareLevel(x_ShadowMapTexture, sampler_ShadowMapTexture, x_720.xy, x_720.z);
    u_xlat24 = x_722;
    let x_724 : f32 = u_xlat8.z;
    let x_725 : f32 = u_xlat24;
    let x_728 : f32 = u_xlat13.x;
    u_xlat13.x = ((x_724 * x_725) + x_728);
    let x_732 : vec4<f32> = u_xlat6;
    let x_733 : vec2<f32> = vec2<f32>(x_732.z, x_732.w);
    let x_735 : f32 = u_xlat13.z;
    txVec3 = vec3<f32>(x_733.x, x_733.y, x_735);
    let x_742 : vec3<f32> = txVec3;
    let x_744 : f32 = textureSampleCompareLevel(x_ShadowMapTexture, sampler_ShadowMapTexture, x_742.xy, x_742.z);
    u_xlat24 = x_744;
    let x_746 : f32 = u_xlat8.w;
    let x_747 : f32 = u_xlat24;
    let x_750 : f32 = u_xlat13.x;
    u_xlat13.x = ((x_746 * x_747) + x_750);
    let x_754 : f32 = x_23.x_LightShadowData.x;
    u_xlat24 = (-(x_754) + 1.0f);
    let x_758 : f32 = u_xlat13.x;
    let x_759 : f32 = u_xlat24;
    let x_762 : f32 = x_23.x_LightShadowData.x;
    u_xlat13.x = ((x_758 * x_759) + x_762);
  } else {
    u_xlat13.x = 1.0f;
  }
  let x_768 : f32 = u_xlat13.x;
  let x_771 : f32 = u_xlat2.x;
  u_xlat2.x = (-(x_768) + x_771);
  let x_774 : f32 = u_xlat34;
  let x_776 : f32 = u_xlat2.x;
  let x_779 : f32 = u_xlat13.x;
  u_xlat34 = ((x_774 * x_776) + x_779);
  let x_782 : f32 = u_xlat5.z;
  u_xlatb2 = (0.0f < x_782);
  let x_784 : bool = u_xlatb2;
  u_xlat2.x = select(0.0f, 1.0f, x_784);
  let x_787 : vec4<f32> = u_xlat5;
  let x_789 : vec4<f32> = u_xlat5;
  let x_791 : vec2<f32> = (vec2<f32>(x_787.x, x_787.y) / vec2<f32>(x_789.w, x_789.w));
  let x_792 : vec3<f32> = u_xlat13;
  u_xlat13 = vec3<f32>(x_791.x, x_791.y, x_792.z);
  let x_794 : vec3<f32> = u_xlat13;
  let x_796 : vec2<f32> = (vec2<f32>(x_794.x, x_794.y) + vec2<f32>(0.5f, 0.5f));
  let x_797 : vec3<f32> = u_xlat13;
  u_xlat13 = vec3<f32>(x_796.x, x_796.y, x_797.z);
  let x_804 : vec3<f32> = u_xlat13;
  let x_806 : vec4<f32> = textureSample(x_LightTexture0, sampler_LightTexture0, vec2<f32>(x_804.x, x_804.y));
  u_xlat13.x = x_806.w;
  let x_810 : f32 = u_xlat13.x;
  let x_812 : f32 = u_xlat2.x;
  u_xlat2.x = (x_810 * x_812);
  let x_815 : vec4<f32> = u_xlat5;
  let x_817 : vec4<f32> = u_xlat5;
  u_xlat13.x = dot(vec3<f32>(x_815.x, x_815.y, x_815.z), vec3<f32>(x_817.x, x_817.y, x_817.z));
  let x_826 : vec3<f32> = u_xlat13;
  let x_828 : vec4<f32> = textureSample(x_LightTextureB0, sampler_LightTextureB0, vec2<f32>(x_826.x, x_826.x));
  u_xlat13.x = x_828.x;
  let x_832 : f32 = u_xlat13.x;
  let x_834 : f32 = u_xlat2.x;
  u_xlat2.x = (x_832 * x_834);
  let x_837 : f32 = u_xlat34;
  let x_839 : f32 = u_xlat2.x;
  u_xlat34 = (x_837 * x_839);
  let x_841 : f32 = u_xlat34;
  let x_845 : vec4<f32> = x_23.x_LightColor0;
  let x_847 : vec3<f32> = (vec3<f32>(x_841, x_841, x_841) * vec3<f32>(x_845.x, x_845.y, x_845.z));
  let x_848 : vec4<f32> = u_xlat2;
  u_xlat2 = vec4<f32>(x_847.x, x_847.y, x_847.z, x_848.w);
  let x_851 : vec3<f32> = vs_TEXCOORD0;
  let x_852 : vec3<f32> = vs_TEXCOORD0;
  u_xlat34 = dot(x_851, x_852);
  let x_854 : f32 = u_xlat34;
  u_xlat34 = inverseSqrt(x_854);
  let x_856 : f32 = u_xlat34;
  let x_858 : vec3<f32> = vs_TEXCOORD0;
  let x_859 : vec3<f32> = (vec3<f32>(x_856, x_856, x_856) * x_858);
  let x_860 : vec4<f32> = u_xlat5;
  u_xlat5 = vec4<f32>(x_859.x, x_859.y, x_859.z, x_860.w);
  let x_862 : vec4<f32> = u_xlat4;
  let x_866 : vec3<f32> = (vec3<f32>(x_862.x, x_862.y, x_862.z) + vec3<f32>(-0.039999999f, -0.039999999f, -0.039999999f));
  let x_867 : vec4<f32> = u_xlat6;
  u_xlat6 = vec4<f32>(x_866.x, x_866.y, x_866.z, x_867.w);
  let x_871 : f32 = x_23.x_Metallic;
  let x_873 : f32 = x_23.x_Metallic;
  let x_875 : f32 = x_23.x_Metallic;
  let x_876 : vec3<f32> = vec3<f32>(x_871, x_873, x_875);
  let x_881 : vec4<f32> = u_xlat6;
  let x_886 : vec3<f32> = ((vec3<f32>(x_876.x, x_876.y, x_876.z) * vec3<f32>(x_881.x, x_881.y, x_881.z)) + vec3<f32>(0.039999999f, 0.039999999f, 0.039999999f));
  let x_887 : vec4<f32> = u_xlat6;
  u_xlat6 = vec4<f32>(x_886.x, x_886.y, x_886.z, x_887.w);
  let x_890 : f32 = x_23.x_Metallic;
  u_xlat34 = ((-(x_890) * 0.959999979f) + 0.959999979f);
  let x_895 : f32 = u_xlat34;
  let x_897 : vec4<f32> = u_xlat4;
  let x_899 : vec3<f32> = (vec3<f32>(x_895, x_895, x_895) * vec3<f32>(x_897.x, x_897.y, x_897.z));
  let x_900 : vec4<f32> = u_xlat4;
  u_xlat4 = vec4<f32>(x_899.x, x_899.y, x_899.z, x_900.w);
  let x_904 : f32 = x_23.x_Glossiness;
  let x_907 : f32 = u_xlat4.w;
  u_xlat34 = ((-(x_904) * x_907) + 1.0f);
  let x_910 : vec3<f32> = u_xlat0;
  let x_911 : f32 = u_xlat33;
  let x_914 : vec3<f32> = u_xlat3;
  u_xlat0 = ((x_910 * vec3<f32>(x_911, x_911, x_911)) + x_914);
  let x_916 : vec3<f32> = u_xlat0;
  let x_917 : vec3<f32> = u_xlat0;
  u_xlat33 = dot(x_916, x_917);
  let x_919 : f32 = u_xlat33;
  u_xlat33 = max(x_919, 0.001f);
  let x_922 : f32 = u_xlat33;
  u_xlat33 = inverseSqrt(x_922);
  let x_924 : f32 = u_xlat33;
  let x_926 : vec3<f32> = u_xlat0;
  u_xlat0 = (vec3<f32>(x_924, x_924, x_924) * x_926);
  let x_928 : vec4<f32> = u_xlat5;
  let x_930 : vec3<f32> = u_xlat3;
  u_xlat33 = dot(vec3<f32>(x_928.x, x_928.y, x_928.z), x_930);
  let x_932 : vec4<f32> = u_xlat5;
  let x_934 : vec3<f32> = u_xlat1;
  u_xlat35 = dot(vec3<f32>(x_932.x, x_932.y, x_932.z), x_934);
  let x_936 : f32 = u_xlat35;
  u_xlat35 = clamp(x_936, 0.0f, 1.0f);
  let x_938 : vec4<f32> = u_xlat5;
  let x_940 : vec3<f32> = u_xlat0;
  u_xlat3.x = dot(vec3<f32>(x_938.x, x_938.y, x_938.z), x_940);
  let x_944 : f32 = u_xlat3.x;
  u_xlat3.x = clamp(x_944, 0.0f, 1.0f);
  let x_947 : vec3<f32> = u_xlat1;
  let x_948 : vec3<f32> = u_xlat0;
  u_xlat0.x = dot(x_947, x_948);
  let x_952 : f32 = u_xlat0.x;
  u_xlat0.x = clamp(x_952, 0.0f, 1.0f);
  let x_957 : f32 = u_xlat0.x;
  let x_959 : f32 = u_xlat0.x;
  u_xlat11.x = (x_957 * x_959);
  let x_962 : vec3<f32> = u_xlat11;
  let x_964 : f32 = u_xlat34;
  u_xlat11.x = dot(vec2<f32>(x_962.x, x_962.x), vec2<f32>(x_964, x_964));
  let x_969 : f32 = u_xlat11.x;
  u_xlat11.x = (x_969 + -0.5f);
  let x_974 : f32 = u_xlat35;
  u_xlat22 = (-(x_974) + 1.0f);
  let x_977 : f32 = u_xlat22;
  let x_978 : f32 = u_xlat22;
  u_xlat1.x = (x_977 * x_978);
  let x_982 : f32 = u_xlat1.x;
  let x_984 : f32 = u_xlat1.x;
  u_xlat1.x = (x_982 * x_984);
  let x_987 : f32 = u_xlat22;
  let x_989 : f32 = u_xlat1.x;
  u_xlat22 = (x_987 * x_989);
  let x_992 : f32 = u_xlat11.x;
  let x_993 : f32 = u_xlat22;
  u_xlat22 = ((x_992 * x_993) + 1.0f);
  let x_996 : f32 = u_xlat33;
  u_xlat1.x = (-(abs(x_996)) + 1.0f);
  let x_1003 : f32 = u_xlat1.x;
  let x_1005 : f32 = u_xlat1.x;
  u_xlat12 = (x_1003 * x_1005);
  let x_1007 : f32 = u_xlat12;
  let x_1008 : f32 = u_xlat12;
  u_xlat12 = (x_1007 * x_1008);
  let x_1011 : f32 = u_xlat1.x;
  let x_1012 : f32 = u_xlat12;
  u_xlat1.x = (x_1011 * x_1012);
  let x_1016 : f32 = u_xlat11.x;
  let x_1018 : f32 = u_xlat1.x;
  u_xlat11.x = ((x_1016 * x_1018) + 1.0f);
  let x_1023 : f32 = u_xlat11.x;
  let x_1024 : f32 = u_xlat22;
  u_xlat11.x = (x_1023 * x_1024);
  let x_1027 : f32 = u_xlat34;
  let x_1028 : f32 = u_xlat34;
  u_xlat22 = (x_1027 * x_1028);
  let x_1030 : f32 = u_xlat22;
  u_xlat22 = max(x_1030, 0.002f);
  let x_1033 : f32 = u_xlat22;
  u_xlat1.x = (-(x_1033) + 1.0f);
  let x_1037 : f32 = u_xlat33;
  let x_1040 : f32 = u_xlat1.x;
  let x_1042 : f32 = u_xlat22;
  u_xlat12 = ((abs(x_1037) * x_1040) + x_1042);
  let x_1044 : f32 = u_xlat35;
  let x_1046 : f32 = u_xlat1.x;
  let x_1048 : f32 = u_xlat22;
  u_xlat1.x = ((x_1044 * x_1046) + x_1048);
  let x_1051 : f32 = u_xlat33;
  let x_1054 : f32 = u_xlat1.x;
  u_xlat33 = (abs(x_1051) * x_1054);
  let x_1056 : f32 = u_xlat35;
  let x_1057 : f32 = u_xlat12;
  let x_1059 : f32 = u_xlat33;
  u_xlat33 = ((x_1056 * x_1057) + x_1059);
  let x_1061 : f32 = u_xlat33;
  u_xlat33 = (x_1061 + 0.00001f);
  let x_1064 : f32 = u_xlat33;
  u_xlat33 = (0.5f / x_1064);
  let x_1066 : f32 = u_xlat22;
  let x_1067 : f32 = u_xlat22;
  u_xlat22 = (x_1066 * x_1067);
  let x_1070 : f32 = u_xlat3.x;
  let x_1071 : f32 = u_xlat22;
  let x_1074 : f32 = u_xlat3.x;
  u_xlat1.x = ((x_1070 * x_1071) + -(x_1074));
  let x_1079 : f32 = u_xlat1.x;
  let x_1081 : f32 = u_xlat3.x;
  u_xlat1.x = ((x_1079 * x_1081) + 1.0f);
  let x_1085 : f32 = u_xlat22;
  u_xlat22 = (x_1085 * 0.318309873f);
  let x_1089 : f32 = u_xlat1.x;
  let x_1091 : f32 = u_xlat1.x;
  u_xlat1.x = ((x_1089 * x_1091) + 0.0000001f);
  let x_1096 : f32 = u_xlat22;
  let x_1098 : f32 = u_xlat1.x;
  u_xlat22 = (x_1096 / x_1098);
  let x_1100 : f32 = u_xlat22;
  let x_1101 : f32 = u_xlat33;
  u_xlat11.y = (x_1100 * x_1101);
  let x_1104 : f32 = u_xlat35;
  let x_1106 : vec3<f32> = u_xlat11;
  let x_1108 : vec2<f32> = (vec2<f32>(x_1104, x_1104) * vec2<f32>(x_1106.x, x_1106.y));
  let x_1109 : vec3<f32> = u_xlat11;
  u_xlat11 = vec3<f32>(x_1108.x, x_1108.y, x_1109.z);
  let x_1112 : f32 = u_xlat11.y;
  u_xlat22 = (x_1112 * 3.141592741f);
  let x_1115 : f32 = u_xlat22;
  u_xlat22 = max(x_1115, 0.0f);
  let x_1117 : vec4<f32> = u_xlat6;
  let x_1119 : vec4<f32> = u_xlat6;
  u_xlat33 = dot(vec3<f32>(x_1117.x, x_1117.y, x_1117.z), vec3<f32>(x_1119.x, x_1119.y, x_1119.z));
  let x_1123 : f32 = u_xlat33;
  u_xlatb33 = !((x_1123 == 0.0f));
  let x_1125 : bool = u_xlatb33;
  u_xlat33 = select(0.0f, 1.0f, x_1125);
  let x_1127 : f32 = u_xlat33;
  let x_1128 : f32 = u_xlat22;
  u_xlat22 = (x_1127 * x_1128);
  let x_1130 : vec3<f32> = u_xlat11;
  let x_1132 : vec4<f32> = u_xlat2;
  u_xlat1 = (vec3<f32>(x_1130.x, x_1130.x, x_1130.x) * vec3<f32>(x_1132.x, x_1132.y, x_1132.z));
  let x_1135 : vec4<f32> = u_xlat2;
  let x_1137 : f32 = u_xlat22;
  u_xlat11 = (vec3<f32>(x_1135.x, x_1135.y, x_1135.z) * vec3<f32>(x_1137, x_1137, x_1137));
  let x_1141 : f32 = u_xlat0.x;
  u_xlat0.x = (-(x_1141) + 1.0f);
  let x_1146 : f32 = u_xlat0.x;
  let x_1148 : f32 = u_xlat0.x;
  u_xlat34 = (x_1146 * x_1148);
  let x_1150 : f32 = u_xlat34;
  let x_1151 : f32 = u_xlat34;
  u_xlat34 = (x_1150 * x_1151);
  let x_1154 : f32 = u_xlat0.x;
  let x_1155 : f32 = u_xlat34;
  u_xlat0.x = (x_1154 * x_1155);
  let x_1158 : vec4<f32> = u_xlat6;
  let x_1162 : vec3<f32> = (-(vec3<f32>(x_1158.x, x_1158.y, x_1158.z)) + vec3<f32>(1.0f, 1.0f, 1.0f));
  let x_1163 : vec4<f32> = u_xlat2;
  u_xlat2 = vec4<f32>(x_1162.x, x_1162.y, x_1162.z, x_1163.w);
  let x_1165 : vec4<f32> = u_xlat2;
  let x_1167 : vec3<f32> = u_xlat0;
  let x_1170 : vec4<f32> = u_xlat6;
  let x_1172 : vec3<f32> = ((vec3<f32>(x_1165.x, x_1165.y, x_1165.z) * vec3<f32>(x_1167.x, x_1167.x, x_1167.x)) + vec3<f32>(x_1170.x, x_1170.y, x_1170.z));
  let x_1173 : vec4<f32> = u_xlat2;
  u_xlat2 = vec4<f32>(x_1172.x, x_1172.y, x_1172.z, x_1173.w);
  let x_1175 : vec3<f32> = u_xlat11;
  let x_1176 : vec4<f32> = u_xlat2;
  u_xlat0 = (x_1175 * vec3<f32>(x_1176.x, x_1176.y, x_1176.z));
  let x_1179 : vec4<f32> = u_xlat4;
  let x_1181 : vec3<f32> = u_xlat1;
  let x_1183 : vec3<f32> = u_xlat0;
  u_xlat0 = ((vec3<f32>(x_1179.x, x_1179.y, x_1179.z) * x_1181) + x_1183);
  let x_1187 : f32 = vs_TEXCOORD4;
  let x_1189 : f32 = x_23.x_ProjectionParams.y;
  u_xlat33 = (x_1187 / x_1189);
  let x_1191 : f32 = u_xlat33;
  u_xlat33 = (-(x_1191) + 1.0f);
  let x_1194 : f32 = u_xlat33;
  let x_1196 : f32 = x_23.x_ProjectionParams.z;
  u_xlat33 = (x_1194 * x_1196);
  let x_1198 : f32 = u_xlat33;
  u_xlat33 = max(x_1198, 0.0f);
  let x_1200 : f32 = u_xlat33;
  let x_1203 : f32 = x_23.unity_FogParams.x;
  u_xlat33 = (x_1200 * x_1203);
  let x_1205 : f32 = u_xlat33;
  let x_1206 : f32 = u_xlat33;
  u_xlat33 = (x_1205 * -(x_1206));
  let x_1209 : f32 = u_xlat33;
  u_xlat33 = exp2(x_1209);
  let x_1213 : vec3<f32> = u_xlat0;
  let x_1214 : f32 = u_xlat33;
  let x_1216 : vec3<f32> = (x_1213 * vec3<f32>(x_1214, x_1214, x_1214));
  let x_1217 : vec4<f32> = SV_Target0;
  SV_Target0 = vec4<f32>(x_1216.x, x_1216.y, x_1216.z, x_1217.w);
  SV_Target0.w = 1.0f;
  return;
}

struct main_out {
  @location(0)
  SV_Target0_1 : vec4<f32>,
}

@fragment
fn main(@location(2) vs_TEXCOORD1_param : vec3<f32>, @location(3) vs_COLOR0_param : vec4<f32>, @location(0) vs_TEXCOORD0_param : vec3<f32>, @location(1) vs_TEXCOORD4_param : f32, @builtin(position) gl_FragCoord_param : vec4<f32>) -> main_out {
  vs_TEXCOORD1 = vs_TEXCOORD1_param;
  vs_COLOR0 = vs_COLOR0_param;
  vs_TEXCOORD0 = vs_TEXCOORD0_param;
  vs_TEXCOORD4 = vs_TEXCOORD4_param;
  gl_FragCoord = gl_FragCoord_param;
  main_1();
  return main_out(SV_Target0);
}

