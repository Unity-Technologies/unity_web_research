type Arr = array<mat4x4<f32>, 4u>;

struct PGlobals {
  x_WorldSpaceCameraPos : vec3<f32>,
  @size(4)
  padding : u32,
  x_WorldSpaceLightPos0 : vec4<f32>,
  unity_OcclusionMaskSelector : vec4<f32>,
  unity_WorldToShadow : Arr,
  x_LightShadowData : vec4<f32>,
  unity_ShadowFadeCenterAndType : vec4<f32>,
  unity_MatrixV : mat4x4<f32>,
  unity_ProbeVolumeParams : vec4<f32>,
  unity_ProbeVolumeWorldToObject : mat4x4<f32>,
  unity_ProbeVolumeSizeInv : vec3<f32>,
  @size(4)
  padding_1 : u32,
  unity_ProbeVolumeMin : vec3<f32>,
  @size(4)
  padding_2 : u32,
  x_LightColor0 : vec4<f32>,
  x_ShadowMapTexture_TexelSize : vec4<f32>,
  unity_WorldToLight : mat4x4<f32>,
}

var<private> vs_TEXCOORD4 : vec3<f32>;

@group(1) @binding(0) var<uniform> x_21 : PGlobals;

@group(0) @binding(0) var x_MainTex : texture_2d<f32>;

@group(0) @binding(11) var sampler_MainTex : sampler;

var<private> vs_TEXCOORD0 : vec2<f32>;

@group(0) @binding(1) var x_Metallic : texture_2d<f32>;

@group(0) @binding(12) var sampler_Metallic : sampler;

@group(0) @binding(2) var x_NormalMap : texture_2d<f32>;

@group(0) @binding(13) var sampler_NormalMap : sampler;

@group(0) @binding(5) var unity_ProbeVolumeSH : texture_3d<f32>;

@group(0) @binding(7) var samplerunity_ProbeVolumeSH : sampler;

@group(0) @binding(6) var x_ShadowMapTexture : texture_depth_2d;

@group(0) @binding(8) var sampler_ShadowMapTexture : sampler_comparison;

@group(0) @binding(3) var x_LightTexture0 : texture_2d<f32>;

@group(0) @binding(9) var sampler_LightTexture0 : sampler;

@group(0) @binding(4) var x_LightTextureB0 : texture_2d<f32>;

@group(0) @binding(10) var sampler_LightTextureB0 : sampler;

var<private> vs_TEXCOORD1 : vec3<f32>;

var<private> vs_TEXCOORD2 : vec3<f32>;

var<private> vs_TEXCOORD3 : vec3<f32>;

var<private> SV_Target0 : vec4<f32>;

var<private> gl_FragCoord : vec4<f32>;

fn main_1() {
  var u_xlat0 : vec3<f32>;
  var u_xlat36 : f32;
  var u_xlat1 : vec3<f32>;
  var u_xlat2 : vec4<f32>;
  var u_xlat37 : f32;
  var u_xlat3 : vec3<f32>;
  var u_xlat4 : vec3<f32>;
  var u_xlat5 : vec2<f32>;
  var u_xlat6 : vec3<f32>;
  var u_xlat7 : vec4<f32>;
  var u_xlat8 : vec4<f32>;
  var u_xlatb2 : bool;
  var u_xlat14 : vec3<f32>;
  var x_266 : vec3<f32>;
  var u_xlat39 : f32;
  var u_xlatb14 : bool;
  var u_xlat29 : vec2<f32>;
  var u_xlat9 : vec4<f32>;
  var u_xlat10 : vec4<f32>;
  var u_xlat34 : vec2<f32>;
  var u_xlat11 : vec4<f32>;
  var txVec0 : vec3<f32>;
  var txVec1 : vec3<f32>;
  var u_xlat26 : f32;
  var txVec2 : vec3<f32>;
  var txVec3 : vec3<f32>;
  var u_xlat38 : f32;
  var u_xlat12 : vec3<f32>;
  var u_xlat24 : f32;
  var u_xlat13 : f32;
  var u_xlatb36 : bool;
  var u_xlat_precise_vec4 : vec4<f32>;
  var u_xlat_precise_ivec4 : vec4<i32>;
  var u_xlat_precise_bvec4 : vec4<bool>;
  var u_xlat_precise_uvec4 : vec4<u32>;
  let x_12 : vec3<f32> = vs_TEXCOORD4;
  let x_26 : vec4<f32> = x_21.x_WorldSpaceLightPos0;
  u_xlat0 = (-(x_12) + vec3<f32>(x_26.x, x_26.y, x_26.z));
  let x_31 : vec3<f32> = u_xlat0;
  let x_32 : vec3<f32> = u_xlat0;
  u_xlat36 = dot(x_31, x_32);
  let x_34 : f32 = u_xlat36;
  u_xlat36 = inverseSqrt(x_34);
  let x_37 : f32 = u_xlat36;
  let x_39 : vec3<f32> = u_xlat0;
  u_xlat1 = (vec3<f32>(x_37, x_37, x_37) * x_39);
  let x_43 : vec3<f32> = vs_TEXCOORD4;
  let x_48 : vec3<f32> = x_21.x_WorldSpaceCameraPos;
  let x_49 : vec3<f32> = (-(x_43) + x_48);
  let x_50 : vec4<f32> = u_xlat2;
  u_xlat2 = vec4<f32>(x_49.x, x_49.y, x_49.z, x_50.w);
  let x_53 : vec4<f32> = u_xlat2;
  let x_55 : vec4<f32> = u_xlat2;
  u_xlat37 = dot(vec3<f32>(x_53.x, x_53.y, x_53.z), vec3<f32>(x_55.x, x_55.y, x_55.z));
  let x_58 : f32 = u_xlat37;
  u_xlat37 = inverseSqrt(x_58);
  let x_61 : f32 = u_xlat37;
  let x_63 : vec4<f32> = u_xlat2;
  u_xlat3 = (vec3<f32>(x_61, x_61, x_61) * vec3<f32>(x_63.x, x_63.y, x_63.z));
  let x_80 : vec2<f32> = vs_TEXCOORD0;
  let x_81 : vec4<f32> = textureSample(x_MainTex, sampler_MainTex, x_80);
  u_xlat4 = vec3<f32>(x_81.x, x_81.y, x_81.z);
  let x_90 : vec2<f32> = vs_TEXCOORD0;
  let x_91 : vec4<f32> = textureSample(x_Metallic, sampler_Metallic, x_90);
  u_xlat5 = vec2<f32>(x_91.x, x_91.w);
  let x_99 : vec2<f32> = vs_TEXCOORD0;
  let x_100 : vec4<f32> = textureSample(x_NormalMap, sampler_NormalMap, x_99);
  u_xlat6 = vec3<f32>(x_100.x, x_100.y, x_100.w);
  let x_104 : f32 = u_xlat6.z;
  let x_107 : f32 = u_xlat6.x;
  u_xlat6.x = (x_104 * x_107);
  let x_110 : vec3<f32> = u_xlat6;
  let x_117 : vec2<f32> = ((vec2<f32>(x_110.x, x_110.y) * vec2<f32>(2.0f, 2.0f)) + vec2<f32>(-1.0f, -1.0f));
  let x_118 : vec3<f32> = u_xlat6;
  u_xlat6 = vec3<f32>(x_117.x, x_117.y, x_118.z);
  let x_120 : vec3<f32> = u_xlat6;
  let x_122 : vec3<f32> = u_xlat6;
  u_xlat37 = dot(vec2<f32>(x_120.x, x_120.y), vec2<f32>(x_122.x, x_122.y));
  let x_125 : f32 = u_xlat37;
  u_xlat37 = min(x_125, 1.0f);
  let x_128 : f32 = u_xlat37;
  u_xlat37 = (-(x_128) + 1.0f);
  let x_131 : f32 = u_xlat37;
  u_xlat6.z = sqrt(x_131);
  let x_135 : vec3<f32> = vs_TEXCOORD4;
  let x_139 : vec4<f32> = x_21.unity_WorldToLight[1i];
  u_xlat7 = (vec4<f32>(x_135.y, x_135.y, x_135.y, x_135.y) * x_139);
  let x_142 : vec4<f32> = x_21.unity_WorldToLight[0i];
  let x_143 : vec3<f32> = vs_TEXCOORD4;
  let x_146 : vec4<f32> = u_xlat7;
  u_xlat7 = ((x_142 * vec4<f32>(x_143.x, x_143.x, x_143.x, x_143.x)) + x_146);
  let x_150 : vec4<f32> = x_21.unity_WorldToLight[2i];
  let x_151 : vec3<f32> = vs_TEXCOORD4;
  let x_154 : vec4<f32> = u_xlat7;
  u_xlat7 = ((x_150 * vec4<f32>(x_151.z, x_151.z, x_151.z, x_151.z)) + x_154);
  let x_156 : vec4<f32> = u_xlat7;
  let x_159 : vec4<f32> = x_21.unity_WorldToLight[3i];
  u_xlat7 = (x_156 + x_159);
  let x_165 : f32 = x_21.unity_MatrixV[0i].z;
  u_xlat8.x = x_165;
  let x_168 : f32 = x_21.unity_MatrixV[1i].z;
  u_xlat8.y = x_168;
  let x_172 : f32 = x_21.unity_MatrixV[2i].z;
  u_xlat8.z = x_172;
  let x_174 : vec4<f32> = u_xlat2;
  let x_176 : vec4<f32> = u_xlat8;
  u_xlat37 = dot(vec3<f32>(x_174.x, x_174.y, x_174.z), vec3<f32>(x_176.x, x_176.y, x_176.z));
  let x_179 : vec3<f32> = vs_TEXCOORD4;
  let x_182 : vec4<f32> = x_21.unity_ShadowFadeCenterAndType;
  let x_185 : vec3<f32> = (x_179 + -(vec3<f32>(x_182.x, x_182.y, x_182.z)));
  let x_186 : vec4<f32> = u_xlat2;
  u_xlat2 = vec4<f32>(x_185.x, x_185.y, x_185.z, x_186.w);
  let x_188 : vec4<f32> = u_xlat2;
  let x_190 : vec4<f32> = u_xlat2;
  u_xlat2.x = dot(vec3<f32>(x_188.x, x_188.y, x_188.z), vec3<f32>(x_190.x, x_190.y, x_190.z));
  let x_195 : f32 = u_xlat2.x;
  u_xlat2.x = sqrt(x_195);
  let x_198 : f32 = u_xlat37;
  let x_201 : f32 = u_xlat2.x;
  u_xlat2.x = (-(x_198) + x_201);
  let x_206 : f32 = x_21.unity_ShadowFadeCenterAndType.w;
  let x_208 : f32 = u_xlat2.x;
  let x_210 : f32 = u_xlat37;
  u_xlat37 = ((x_206 * x_208) + x_210);
  let x_212 : f32 = u_xlat37;
  let x_215 : f32 = x_21.x_LightShadowData.z;
  let x_218 : f32 = x_21.x_LightShadowData.w;
  u_xlat37 = ((x_212 * x_215) + x_218);
  let x_220 : f32 = u_xlat37;
  u_xlat37 = clamp(x_220, 0.0f, 1.0f);
  let x_228 : f32 = x_21.unity_ProbeVolumeParams.x;
  u_xlatb2 = (x_228 == 1.0f);
  let x_230 : bool = u_xlatb2;
  if (x_230) {
    let x_234 : f32 = x_21.unity_ProbeVolumeParams.y;
    u_xlatb2 = (x_234 == 1.0f);
    let x_237 : vec3<f32> = vs_TEXCOORD4;
    let x_241 : vec4<f32> = x_21.unity_ProbeVolumeWorldToObject[1i];
    u_xlat14 = (vec3<f32>(x_237.y, x_237.y, x_237.y) * vec3<f32>(x_241.x, x_241.y, x_241.z));
    let x_245 : vec4<f32> = x_21.unity_ProbeVolumeWorldToObject[0i];
    let x_247 : vec3<f32> = vs_TEXCOORD4;
    let x_250 : vec3<f32> = u_xlat14;
    u_xlat14 = ((vec3<f32>(x_245.x, x_245.y, x_245.z) * vec3<f32>(x_247.x, x_247.x, x_247.x)) + x_250);
    let x_253 : vec4<f32> = x_21.unity_ProbeVolumeWorldToObject[2i];
    let x_255 : vec3<f32> = vs_TEXCOORD4;
    let x_258 : vec3<f32> = u_xlat14;
    u_xlat14 = ((vec3<f32>(x_253.x, x_253.y, x_253.z) * vec3<f32>(x_255.z, x_255.z, x_255.z)) + x_258);
    let x_260 : vec3<f32> = u_xlat14;
    let x_262 : vec4<f32> = x_21.unity_ProbeVolumeWorldToObject[3i];
    u_xlat14 = (x_260 + vec3<f32>(x_262.x, x_262.y, x_262.z));
    let x_265 : bool = u_xlatb2;
    if (x_265) {
      let x_269 : vec3<f32> = u_xlat14;
      x_266 = x_269;
    } else {
      let x_271 : vec3<f32> = vs_TEXCOORD4;
      x_266 = x_271;
    }
    let x_272 : vec3<f32> = x_266;
    let x_273 : vec4<f32> = u_xlat2;
    u_xlat2 = vec4<f32>(x_272.x, x_272.y, x_272.z, x_273.w);
    let x_275 : vec4<f32> = u_xlat2;
    let x_279 : vec3<f32> = x_21.unity_ProbeVolumeMin;
    let x_281 : vec3<f32> = (vec3<f32>(x_275.x, x_275.y, x_275.z) + -(x_279));
    let x_282 : vec4<f32> = u_xlat2;
    u_xlat2 = vec4<f32>(x_281.x, x_281.y, x_281.z, x_282.w);
    let x_284 : vec4<f32> = u_xlat2;
    let x_288 : vec3<f32> = x_21.unity_ProbeVolumeSizeInv;
    let x_289 : vec3<f32> = (vec3<f32>(x_284.x, x_284.y, x_284.z) * x_288);
    let x_290 : vec4<f32> = u_xlat2;
    u_xlat2 = vec4<f32>(x_290.x, x_289.x, x_289.y, x_289.z);
    let x_293 : f32 = u_xlat2.y;
    u_xlat14.x = ((x_293 * 0.25f) + 0.75f);
    let x_301 : f32 = x_21.unity_ProbeVolumeParams.z;
    u_xlat39 = ((x_301 * 0.5f) + 0.75f);
    let x_306 : f32 = u_xlat14.x;
    let x_307 : f32 = u_xlat39;
    u_xlat2.x = max(x_306, x_307);
    let x_318 : vec4<f32> = u_xlat2;
    let x_320 : vec4<f32> = textureSample(unity_ProbeVolumeSH, samplerunity_ProbeVolumeSH, vec3<f32>(x_318.x, x_318.z, x_318.w));
    u_xlat2 = x_320;
  } else {
    u_xlat2.x = 1.0f;
    u_xlat2.y = 1.0f;
    u_xlat2.z = 1.0f;
    u_xlat2.w = 1.0f;
  }
  let x_326 : vec4<f32> = u_xlat2;
  let x_328 : vec4<f32> = x_21.unity_OcclusionMaskSelector;
  u_xlat2.x = dot(x_326, x_328);
  let x_332 : f32 = u_xlat2.x;
  u_xlat2.x = clamp(x_332, 0.0f, 1.0f);
  let x_336 : f32 = u_xlat37;
  u_xlatb14 = (x_336 < 0.99000001f);
  let x_339 : bool = u_xlatb14;
  if (x_339) {
    let x_342 : vec3<f32> = vs_TEXCOORD4;
    let x_345 : vec4<f32> = x_21.unity_WorldToShadow[0i][1i];
    u_xlat8 = (vec4<f32>(x_342.y, x_342.y, x_342.y, x_342.y) * x_345);
    let x_348 : vec4<f32> = x_21.unity_WorldToShadow[0i][0i];
    let x_349 : vec3<f32> = vs_TEXCOORD4;
    let x_352 : vec4<f32> = u_xlat8;
    u_xlat8 = ((x_348 * vec4<f32>(x_349.x, x_349.x, x_349.x, x_349.x)) + x_352);
    let x_355 : vec4<f32> = x_21.unity_WorldToShadow[0i][2i];
    let x_356 : vec3<f32> = vs_TEXCOORD4;
    let x_359 : vec4<f32> = u_xlat8;
    u_xlat8 = ((x_355 * vec4<f32>(x_356.z, x_356.z, x_356.z, x_356.z)) + x_359);
    let x_361 : vec4<f32> = u_xlat8;
    let x_363 : vec4<f32> = x_21.unity_WorldToShadow[0i][3i];
    u_xlat8 = (x_361 + x_363);
    let x_365 : vec4<f32> = u_xlat8;
    let x_367 : vec4<f32> = u_xlat8;
    u_xlat14 = (vec3<f32>(x_365.x, x_365.y, x_365.z) / vec3<f32>(x_367.w, x_367.w, x_367.w));
    let x_371 : vec3<f32> = u_xlat14;
    let x_375 : vec4<f32> = x_21.x_ShadowMapTexture_TexelSize;
    u_xlat29 = ((vec2<f32>(x_371.x, x_371.y) * vec2<f32>(x_375.z, x_375.w)) + vec2<f32>(0.5f, 0.5f));
    let x_380 : vec2<f32> = u_xlat29;
    u_xlat29 = floor(x_380);
    let x_382 : vec3<f32> = u_xlat14;
    let x_385 : vec4<f32> = x_21.x_ShadowMapTexture_TexelSize;
    let x_388 : vec2<f32> = u_xlat29;
    let x_390 : vec2<f32> = ((vec2<f32>(x_382.x, x_382.y) * vec2<f32>(x_385.z, x_385.w)) + -(x_388));
    let x_391 : vec3<f32> = u_xlat14;
    u_xlat14 = vec3<f32>(x_390.x, x_390.y, x_391.z);
    let x_393 : vec3<f32> = u_xlat14;
    u_xlat8 = (vec4<f32>(x_393.x, x_393.x, x_393.y, x_393.y) + vec4<f32>(0.5f, 1.0f, 0.5f, 1.0f));
    let x_398 : vec4<f32> = u_xlat8;
    let x_400 : vec4<f32> = u_xlat8;
    let x_402 : vec2<f32> = (vec2<f32>(x_398.x, x_398.z) * vec2<f32>(x_400.x, x_400.z));
    let x_403 : vec4<f32> = u_xlat9;
    u_xlat9 = vec4<f32>(x_402.x, x_403.y, x_403.z, x_402.y);
    let x_405 : vec4<f32> = u_xlat9;
    let x_408 : vec3<f32> = u_xlat14;
    let x_411 : vec2<f32> = ((vec2<f32>(x_405.x, x_405.w) * vec2<f32>(0.5f, 0.5f)) + -(vec2<f32>(x_408.x, x_408.y)));
    let x_412 : vec4<f32> = u_xlat8;
    u_xlat8 = vec4<f32>(x_411.x, x_412.y, x_411.y, x_412.w);
    let x_415 : vec3<f32> = u_xlat14;
    let x_419 : vec2<f32> = (-(vec2<f32>(x_415.x, x_415.y)) + vec2<f32>(1.0f, 1.0f));
    let x_420 : vec4<f32> = u_xlat10;
    u_xlat10 = vec4<f32>(x_419.x, x_419.y, x_420.z, x_420.w);
    let x_423 : vec3<f32> = u_xlat14;
    u_xlat34 = min(vec2<f32>(x_423.x, x_423.y), vec2<f32>(0.0f, 0.0f));
    let x_427 : vec2<f32> = u_xlat34;
    let x_429 : vec2<f32> = u_xlat34;
    let x_431 : vec4<f32> = u_xlat10;
    let x_433 : vec2<f32> = ((-(x_427) * x_429) + vec2<f32>(x_431.x, x_431.y));
    let x_434 : vec4<f32> = u_xlat10;
    u_xlat10 = vec4<f32>(x_433.x, x_433.y, x_434.z, x_434.w);
    let x_436 : vec3<f32> = u_xlat14;
    let x_438 : vec2<f32> = max(vec2<f32>(x_436.x, x_436.y), vec2<f32>(0.0f, 0.0f));
    let x_439 : vec3<f32> = u_xlat14;
    u_xlat14 = vec3<f32>(x_438.x, x_438.y, x_439.z);
    let x_441 : vec3<f32> = u_xlat14;
    let x_444 : vec3<f32> = u_xlat14;
    let x_447 : vec4<f32> = u_xlat8;
    let x_449 : vec2<f32> = ((-(vec2<f32>(x_441.x, x_441.y)) * vec2<f32>(x_444.x, x_444.y)) + vec2<f32>(x_447.y, x_447.w));
    let x_450 : vec3<f32> = u_xlat14;
    u_xlat14 = vec3<f32>(x_449.x, x_449.y, x_450.z);
    let x_454 : f32 = u_xlat8.x;
    u_xlat11.x = x_454;
    let x_457 : f32 = u_xlat10.x;
    u_xlat11.y = x_457;
    let x_460 : f32 = u_xlat14.x;
    u_xlat11.z = x_460;
    let x_463 : f32 = u_xlat9.x;
    u_xlat11.w = x_463;
    let x_465 : vec4<f32> = u_xlat11;
    u_xlat11 = (x_465 * vec4<f32>(0.444440007f, 0.444440007f, 0.444440007f, 0.222220004f));
    let x_471 : f32 = u_xlat8.z;
    u_xlat9.x = x_471;
    let x_474 : f32 = u_xlat10.y;
    u_xlat9.y = x_474;
    let x_477 : f32 = u_xlat14.y;
    u_xlat9.z = x_477;
    let x_479 : vec4<f32> = u_xlat9;
    u_xlat8 = (x_479 * vec4<f32>(0.444440007f, 0.444440007f, 0.444440007f, 0.222220004f));
    let x_481 : vec4<f32> = u_xlat11;
    let x_483 : vec4<f32> = u_xlat11;
    u_xlat9 = (vec4<f32>(x_481.y, x_481.w, x_481.y, x_481.w) + vec4<f32>(x_483.x, x_483.z, x_483.x, x_483.z));
    let x_486 : vec4<f32> = u_xlat8;
    let x_488 : vec4<f32> = u_xlat8;
    u_xlat10 = (vec4<f32>(x_486.y, x_486.y, x_486.w, x_486.w) + vec4<f32>(x_488.x, x_488.x, x_488.z, x_488.z));
    let x_491 : vec4<f32> = u_xlat11;
    let x_493 : vec4<f32> = u_xlat9;
    let x_495 : vec2<f32> = (vec2<f32>(x_491.y, x_491.w) / vec2<f32>(x_493.z, x_493.w));
    let x_496 : vec3<f32> = u_xlat14;
    u_xlat14 = vec3<f32>(x_495.x, x_495.y, x_496.z);
    let x_498 : vec3<f32> = u_xlat14;
    let x_502 : vec2<f32> = (vec2<f32>(x_498.x, x_498.y) + vec2<f32>(-1.5f, 0.5f));
    let x_503 : vec3<f32> = u_xlat14;
    u_xlat14 = vec3<f32>(x_502.x, x_502.y, x_503.z);
    let x_505 : vec4<f32> = u_xlat8;
    let x_507 : vec4<f32> = u_xlat10;
    let x_509 : vec2<f32> = (vec2<f32>(x_505.y, x_505.w) / vec2<f32>(x_507.y, x_507.w));
    let x_510 : vec4<f32> = u_xlat8;
    u_xlat8 = vec4<f32>(x_509.x, x_509.y, x_510.z, x_510.w);
    let x_512 : vec4<f32> = u_xlat8;
    let x_514 : vec2<f32> = (vec2<f32>(x_512.x, x_512.y) + vec2<f32>(-1.5f, 0.5f));
    let x_515 : vec4<f32> = u_xlat8;
    u_xlat8 = vec4<f32>(x_514.x, x_514.y, x_515.z, x_515.w);
    let x_517 : vec3<f32> = u_xlat14;
    let x_520 : vec4<f32> = x_21.x_ShadowMapTexture_TexelSize;
    let x_522 : vec2<f32> = (vec2<f32>(x_517.x, x_517.y) * vec2<f32>(x_520.x, x_520.x));
    let x_523 : vec4<f32> = u_xlat11;
    u_xlat11 = vec4<f32>(x_522.x, x_522.y, x_523.z, x_523.w);
    let x_525 : vec4<f32> = u_xlat8;
    let x_528 : vec4<f32> = x_21.x_ShadowMapTexture_TexelSize;
    let x_530 : vec2<f32> = (vec2<f32>(x_525.x, x_525.y) * vec2<f32>(x_528.y, x_528.y));
    let x_531 : vec4<f32> = u_xlat11;
    u_xlat11 = vec4<f32>(x_531.x, x_531.y, x_530.x, x_530.y);
    let x_533 : vec4<f32> = u_xlat9;
    let x_534 : vec4<f32> = u_xlat10;
    u_xlat8 = (x_533 * x_534);
    let x_536 : vec2<f32> = u_xlat29;
    let x_539 : vec4<f32> = x_21.x_ShadowMapTexture_TexelSize;
    let x_542 : vec4<f32> = u_xlat11;
    u_xlat9 = ((vec4<f32>(x_536.x, x_536.y, x_536.x, x_536.y) * vec4<f32>(x_539.x, x_539.y, x_539.x, x_539.y)) + vec4<f32>(x_542.x, x_542.z, x_542.y, x_542.z));
    let x_546 : vec4<f32> = u_xlat9;
    let x_547 : vec2<f32> = vec2<f32>(x_546.x, x_546.y);
    let x_549 : f32 = u_xlat14.z;
    txVec0 = vec3<f32>(x_547.x, x_547.y, x_549);
    let x_561 : vec3<f32> = txVec0;
    let x_563 : f32 = textureSampleCompareLevel(x_ShadowMapTexture, sampler_ShadowMapTexture, x_561.xy, x_561.z);
    u_xlat14.x = x_563;
    let x_566 : vec4<f32> = u_xlat9;
    let x_567 : vec2<f32> = vec2<f32>(x_566.z, x_566.w);
    let x_569 : f32 = u_xlat14.z;
    txVec1 = vec3<f32>(x_567.x, x_567.y, x_569);
    let x_577 : vec3<f32> = txVec1;
    let x_579 : f32 = textureSampleCompareLevel(x_ShadowMapTexture, sampler_ShadowMapTexture, x_577.xy, x_577.z);
    u_xlat26 = x_579;
    let x_580 : f32 = u_xlat26;
    let x_582 : f32 = u_xlat8.y;
    u_xlat26 = (x_580 * x_582);
    let x_585 : f32 = u_xlat8.x;
    let x_587 : f32 = u_xlat14.x;
    let x_589 : f32 = u_xlat26;
    u_xlat14.x = ((x_585 * x_587) + x_589);
    let x_592 : vec2<f32> = u_xlat29;
    let x_595 : vec4<f32> = x_21.x_ShadowMapTexture_TexelSize;
    let x_598 : vec4<f32> = u_xlat11;
    u_xlat9 = ((vec4<f32>(x_592.x, x_592.y, x_592.x, x_592.y) * vec4<f32>(x_595.x, x_595.y, x_595.x, x_595.y)) + vec4<f32>(x_598.x, x_598.w, x_598.y, x_598.w));
    let x_602 : vec4<f32> = u_xlat9;
    let x_603 : vec2<f32> = vec2<f32>(x_602.x, x_602.y);
    let x_605 : f32 = u_xlat14.z;
    txVec2 = vec3<f32>(x_603.x, x_603.y, x_605);
    let x_612 : vec3<f32> = txVec2;
    let x_614 : f32 = textureSampleCompareLevel(x_ShadowMapTexture, sampler_ShadowMapTexture, x_612.xy, x_612.z);
    u_xlat26 = x_614;
    let x_616 : f32 = u_xlat8.z;
    let x_617 : f32 = u_xlat26;
    let x_620 : f32 = u_xlat14.x;
    u_xlat14.x = ((x_616 * x_617) + x_620);
    let x_624 : vec4<f32> = u_xlat9;
    let x_625 : vec2<f32> = vec2<f32>(x_624.z, x_624.w);
    let x_627 : f32 = u_xlat14.z;
    txVec3 = vec3<f32>(x_625.x, x_625.y, x_627);
    let x_634 : vec3<f32> = txVec3;
    let x_636 : f32 = textureSampleCompareLevel(x_ShadowMapTexture, sampler_ShadowMapTexture, x_634.xy, x_634.z);
    u_xlat26 = x_636;
    let x_638 : f32 = u_xlat8.w;
    let x_639 : f32 = u_xlat26;
    let x_642 : f32 = u_xlat14.x;
    u_xlat14.x = ((x_638 * x_639) + x_642);
    let x_646 : f32 = x_21.x_LightShadowData.x;
    u_xlat26 = (-(x_646) + 1.0f);
    let x_650 : f32 = u_xlat14.x;
    let x_651 : f32 = u_xlat26;
    let x_654 : f32 = x_21.x_LightShadowData.x;
    u_xlat14.x = ((x_650 * x_651) + x_654);
  } else {
    u_xlat14.x = 1.0f;
  }
  let x_660 : f32 = u_xlat14.x;
  let x_663 : f32 = u_xlat2.x;
  u_xlat2.x = (-(x_660) + x_663);
  let x_666 : f32 = u_xlat37;
  let x_668 : f32 = u_xlat2.x;
  let x_671 : f32 = u_xlat14.x;
  u_xlat37 = ((x_666 * x_668) + x_671);
  let x_674 : f32 = u_xlat7.z;
  u_xlatb2 = (0.0f < x_674);
  let x_676 : bool = u_xlatb2;
  u_xlat2.x = select(0.0f, 1.0f, x_676);
  let x_679 : vec4<f32> = u_xlat7;
  let x_681 : vec4<f32> = u_xlat7;
  let x_683 : vec2<f32> = (vec2<f32>(x_679.x, x_679.y) / vec2<f32>(x_681.w, x_681.w));
  let x_684 : vec3<f32> = u_xlat14;
  u_xlat14 = vec3<f32>(x_683.x, x_683.y, x_684.z);
  let x_686 : vec3<f32> = u_xlat14;
  let x_688 : vec2<f32> = (vec2<f32>(x_686.x, x_686.y) + vec2<f32>(0.5f, 0.5f));
  let x_689 : vec3<f32> = u_xlat14;
  u_xlat14 = vec3<f32>(x_688.x, x_688.y, x_689.z);
  let x_696 : vec3<f32> = u_xlat14;
  let x_698 : vec4<f32> = textureSample(x_LightTexture0, sampler_LightTexture0, vec2<f32>(x_696.x, x_696.y));
  u_xlat14.x = x_698.w;
  let x_702 : f32 = u_xlat14.x;
  let x_704 : f32 = u_xlat2.x;
  u_xlat2.x = (x_702 * x_704);
  let x_707 : vec4<f32> = u_xlat7;
  let x_709 : vec4<f32> = u_xlat7;
  u_xlat14.x = dot(vec3<f32>(x_707.x, x_707.y, x_707.z), vec3<f32>(x_709.x, x_709.y, x_709.z));
  let x_718 : vec3<f32> = u_xlat14;
  let x_720 : vec4<f32> = textureSample(x_LightTextureB0, sampler_LightTextureB0, vec2<f32>(x_718.x, x_718.x));
  u_xlat14.x = x_720.x;
  let x_724 : f32 = u_xlat14.x;
  let x_726 : f32 = u_xlat2.x;
  u_xlat2.x = (x_724 * x_726);
  let x_729 : f32 = u_xlat37;
  let x_731 : f32 = u_xlat2.x;
  u_xlat37 = (x_729 * x_731);
  let x_734 : vec3<f32> = vs_TEXCOORD1;
  let x_735 : vec3<f32> = u_xlat6;
  u_xlat2.x = dot(x_734, x_735);
  let x_739 : vec3<f32> = vs_TEXCOORD2;
  let x_740 : vec3<f32> = u_xlat6;
  u_xlat2.y = dot(x_739, x_740);
  let x_744 : vec3<f32> = vs_TEXCOORD3;
  let x_745 : vec3<f32> = u_xlat6;
  u_xlat2.z = dot(x_744, x_745);
  let x_749 : vec4<f32> = u_xlat2;
  let x_751 : vec4<f32> = u_xlat2;
  u_xlat38 = dot(vec3<f32>(x_749.x, x_749.y, x_749.z), vec3<f32>(x_751.x, x_751.y, x_751.z));
  let x_754 : f32 = u_xlat38;
  u_xlat38 = inverseSqrt(x_754);
  let x_756 : f32 = u_xlat38;
  let x_758 : vec4<f32> = u_xlat2;
  let x_760 : vec3<f32> = (vec3<f32>(x_756, x_756, x_756) * vec3<f32>(x_758.x, x_758.y, x_758.z));
  let x_761 : vec4<f32> = u_xlat2;
  u_xlat2 = vec4<f32>(x_760.x, x_760.y, x_760.z, x_761.w);
  let x_763 : f32 = u_xlat37;
  let x_767 : vec4<f32> = x_21.x_LightColor0;
  u_xlat6 = (vec3<f32>(x_763, x_763, x_763) * vec3<f32>(x_767.x, x_767.y, x_767.z));
  let x_770 : vec3<f32> = u_xlat4;
  let x_773 : vec3<f32> = (x_770 + vec3<f32>(-0.039999999f, -0.039999999f, -0.039999999f));
  let x_774 : vec4<f32> = u_xlat7;
  u_xlat7 = vec4<f32>(x_773.x, x_773.y, x_773.z, x_774.w);
  let x_776 : vec2<f32> = u_xlat5;
  let x_778 : vec4<f32> = u_xlat7;
  let x_783 : vec3<f32> = ((vec3<f32>(x_776.x, x_776.x, x_776.x) * vec3<f32>(x_778.x, x_778.y, x_778.z)) + vec3<f32>(0.039999999f, 0.039999999f, 0.039999999f));
  let x_784 : vec4<f32> = u_xlat7;
  u_xlat7 = vec4<f32>(x_783.x, x_783.y, x_783.z, x_784.w);
  let x_787 : f32 = u_xlat5.x;
  u_xlat37 = ((-(x_787) * 0.959999979f) + 0.959999979f);
  let x_792 : f32 = u_xlat37;
  let x_794 : vec3<f32> = u_xlat4;
  u_xlat4 = (vec3<f32>(x_792, x_792, x_792) * x_794);
  let x_797 : f32 = u_xlat5.y;
  u_xlat37 = (-(x_797) + 1.0f);
  let x_800 : vec3<f32> = u_xlat0;
  let x_801 : f32 = u_xlat36;
  let x_804 : vec3<f32> = u_xlat3;
  u_xlat0 = ((x_800 * vec3<f32>(x_801, x_801, x_801)) + x_804);
  let x_806 : vec3<f32> = u_xlat0;
  let x_807 : vec3<f32> = u_xlat0;
  u_xlat36 = dot(x_806, x_807);
  let x_809 : f32 = u_xlat36;
  u_xlat36 = max(x_809, 0.001f);
  let x_812 : f32 = u_xlat36;
  u_xlat36 = inverseSqrt(x_812);
  let x_814 : f32 = u_xlat36;
  let x_816 : vec3<f32> = u_xlat0;
  u_xlat0 = (vec3<f32>(x_814, x_814, x_814) * x_816);
  let x_818 : vec4<f32> = u_xlat2;
  let x_820 : vec3<f32> = u_xlat3;
  u_xlat36 = dot(vec3<f32>(x_818.x, x_818.y, x_818.z), x_820);
  let x_822 : vec4<f32> = u_xlat2;
  let x_824 : vec3<f32> = u_xlat1;
  u_xlat38 = dot(vec3<f32>(x_822.x, x_822.y, x_822.z), x_824);
  let x_826 : f32 = u_xlat38;
  u_xlat38 = clamp(x_826, 0.0f, 1.0f);
  let x_828 : vec4<f32> = u_xlat2;
  let x_830 : vec3<f32> = u_xlat0;
  u_xlat2.x = dot(vec3<f32>(x_828.x, x_828.y, x_828.z), x_830);
  let x_834 : f32 = u_xlat2.x;
  u_xlat2.x = clamp(x_834, 0.0f, 1.0f);
  let x_837 : vec3<f32> = u_xlat1;
  let x_838 : vec3<f32> = u_xlat0;
  u_xlat0.x = dot(x_837, x_838);
  let x_842 : f32 = u_xlat0.x;
  u_xlat0.x = clamp(x_842, 0.0f, 1.0f);
  let x_847 : f32 = u_xlat0.x;
  let x_849 : f32 = u_xlat0.x;
  u_xlat12.x = (x_847 * x_849);
  let x_852 : vec3<f32> = u_xlat12;
  let x_854 : f32 = u_xlat37;
  u_xlat12.x = dot(vec2<f32>(x_852.x, x_852.x), vec2<f32>(x_854, x_854));
  let x_859 : f32 = u_xlat12.x;
  u_xlat12.x = (x_859 + -0.5f);
  let x_864 : f32 = u_xlat38;
  u_xlat24 = (-(x_864) + 1.0f);
  let x_867 : f32 = u_xlat24;
  let x_868 : f32 = u_xlat24;
  u_xlat1.x = (x_867 * x_868);
  let x_872 : f32 = u_xlat1.x;
  let x_874 : f32 = u_xlat1.x;
  u_xlat1.x = (x_872 * x_874);
  let x_877 : f32 = u_xlat24;
  let x_879 : f32 = u_xlat1.x;
  u_xlat24 = (x_877 * x_879);
  let x_882 : f32 = u_xlat12.x;
  let x_883 : f32 = u_xlat24;
  u_xlat24 = ((x_882 * x_883) + 1.0f);
  let x_886 : f32 = u_xlat36;
  u_xlat1.x = (-(abs(x_886)) + 1.0f);
  let x_893 : f32 = u_xlat1.x;
  let x_895 : f32 = u_xlat1.x;
  u_xlat13 = (x_893 * x_895);
  let x_897 : f32 = u_xlat13;
  let x_898 : f32 = u_xlat13;
  u_xlat13 = (x_897 * x_898);
  let x_901 : f32 = u_xlat1.x;
  let x_902 : f32 = u_xlat13;
  u_xlat1.x = (x_901 * x_902);
  let x_906 : f32 = u_xlat12.x;
  let x_908 : f32 = u_xlat1.x;
  u_xlat12.x = ((x_906 * x_908) + 1.0f);
  let x_913 : f32 = u_xlat12.x;
  let x_914 : f32 = u_xlat24;
  u_xlat12.x = (x_913 * x_914);
  let x_917 : f32 = u_xlat37;
  let x_918 : f32 = u_xlat37;
  u_xlat24 = (x_917 * x_918);
  let x_920 : f32 = u_xlat24;
  u_xlat24 = max(x_920, 0.002f);
  let x_923 : f32 = u_xlat24;
  u_xlat1.x = (-(x_923) + 1.0f);
  let x_927 : f32 = u_xlat36;
  let x_930 : f32 = u_xlat1.x;
  let x_932 : f32 = u_xlat24;
  u_xlat13 = ((abs(x_927) * x_930) + x_932);
  let x_934 : f32 = u_xlat38;
  let x_936 : f32 = u_xlat1.x;
  let x_938 : f32 = u_xlat24;
  u_xlat1.x = ((x_934 * x_936) + x_938);
  let x_941 : f32 = u_xlat36;
  let x_944 : f32 = u_xlat1.x;
  u_xlat36 = (abs(x_941) * x_944);
  let x_946 : f32 = u_xlat38;
  let x_947 : f32 = u_xlat13;
  let x_949 : f32 = u_xlat36;
  u_xlat36 = ((x_946 * x_947) + x_949);
  let x_951 : f32 = u_xlat36;
  u_xlat36 = (x_951 + 0.00001f);
  let x_954 : f32 = u_xlat36;
  u_xlat36 = (0.5f / x_954);
  let x_956 : f32 = u_xlat24;
  let x_957 : f32 = u_xlat24;
  u_xlat24 = (x_956 * x_957);
  let x_960 : f32 = u_xlat2.x;
  let x_961 : f32 = u_xlat24;
  let x_964 : f32 = u_xlat2.x;
  u_xlat1.x = ((x_960 * x_961) + -(x_964));
  let x_969 : f32 = u_xlat1.x;
  let x_971 : f32 = u_xlat2.x;
  u_xlat1.x = ((x_969 * x_971) + 1.0f);
  let x_975 : f32 = u_xlat24;
  u_xlat24 = (x_975 * 0.318309873f);
  let x_979 : f32 = u_xlat1.x;
  let x_981 : f32 = u_xlat1.x;
  u_xlat1.x = ((x_979 * x_981) + 0.0000001f);
  let x_986 : f32 = u_xlat24;
  let x_988 : f32 = u_xlat1.x;
  u_xlat24 = (x_986 / x_988);
  let x_990 : f32 = u_xlat24;
  let x_991 : f32 = u_xlat36;
  u_xlat12.y = (x_990 * x_991);
  let x_994 : f32 = u_xlat38;
  let x_996 : vec3<f32> = u_xlat12;
  let x_998 : vec2<f32> = (vec2<f32>(x_994, x_994) * vec2<f32>(x_996.x, x_996.y));
  let x_999 : vec3<f32> = u_xlat12;
  u_xlat12 = vec3<f32>(x_998.x, x_998.y, x_999.z);
  let x_1002 : f32 = u_xlat12.y;
  u_xlat24 = (x_1002 * 3.141592741f);
  let x_1005 : f32 = u_xlat24;
  u_xlat24 = max(x_1005, 0.0f);
  let x_1007 : vec4<f32> = u_xlat7;
  let x_1009 : vec4<f32> = u_xlat7;
  u_xlat36 = dot(vec3<f32>(x_1007.x, x_1007.y, x_1007.z), vec3<f32>(x_1009.x, x_1009.y, x_1009.z));
  let x_1013 : f32 = u_xlat36;
  u_xlatb36 = !((x_1013 == 0.0f));
  let x_1015 : bool = u_xlatb36;
  u_xlat36 = select(0.0f, 1.0f, x_1015);
  let x_1017 : f32 = u_xlat36;
  let x_1018 : f32 = u_xlat24;
  u_xlat24 = (x_1017 * x_1018);
  let x_1020 : vec3<f32> = u_xlat12;
  let x_1022 : vec3<f32> = u_xlat6;
  u_xlat1 = (vec3<f32>(x_1020.x, x_1020.x, x_1020.x) * x_1022);
  let x_1024 : vec3<f32> = u_xlat6;
  let x_1025 : f32 = u_xlat24;
  u_xlat12 = (x_1024 * vec3<f32>(x_1025, x_1025, x_1025));
  let x_1029 : f32 = u_xlat0.x;
  u_xlat0.x = (-(x_1029) + 1.0f);
  let x_1034 : f32 = u_xlat0.x;
  let x_1036 : f32 = u_xlat0.x;
  u_xlat37 = (x_1034 * x_1036);
  let x_1038 : f32 = u_xlat37;
  let x_1039 : f32 = u_xlat37;
  u_xlat37 = (x_1038 * x_1039);
  let x_1042 : f32 = u_xlat0.x;
  let x_1043 : f32 = u_xlat37;
  u_xlat0.x = (x_1042 * x_1043);
  let x_1046 : vec4<f32> = u_xlat7;
  let x_1050 : vec3<f32> = (-(vec3<f32>(x_1046.x, x_1046.y, x_1046.z)) + vec3<f32>(1.0f, 1.0f, 1.0f));
  let x_1051 : vec4<f32> = u_xlat2;
  u_xlat2 = vec4<f32>(x_1050.x, x_1050.y, x_1050.z, x_1051.w);
  let x_1053 : vec4<f32> = u_xlat2;
  let x_1055 : vec3<f32> = u_xlat0;
  let x_1058 : vec4<f32> = u_xlat7;
  let x_1060 : vec3<f32> = ((vec3<f32>(x_1053.x, x_1053.y, x_1053.z) * vec3<f32>(x_1055.x, x_1055.x, x_1055.x)) + vec3<f32>(x_1058.x, x_1058.y, x_1058.z));
  let x_1061 : vec4<f32> = u_xlat2;
  u_xlat2 = vec4<f32>(x_1060.x, x_1060.y, x_1060.z, x_1061.w);
  let x_1063 : vec3<f32> = u_xlat12;
  let x_1064 : vec4<f32> = u_xlat2;
  u_xlat0 = (x_1063 * vec3<f32>(x_1064.x, x_1064.y, x_1064.z));
  let x_1069 : vec3<f32> = u_xlat4;
  let x_1070 : vec3<f32> = u_xlat1;
  let x_1072 : vec3<f32> = u_xlat0;
  let x_1073 : vec3<f32> = ((x_1069 * x_1070) + x_1072);
  let x_1074 : vec4<f32> = SV_Target0;
  SV_Target0 = vec4<f32>(x_1073.x, x_1073.y, x_1073.z, x_1074.w);
  SV_Target0.w = 1.0f;
  return;
}

struct main_out {
  @location(0)
  SV_Target0_1 : vec4<f32>,
}

@fragment
fn main(@location(4) vs_TEXCOORD4_param : vec3<f32>, @location(0) vs_TEXCOORD0_param : vec2<f32>, @location(1) vs_TEXCOORD1_param : vec3<f32>, @location(2) vs_TEXCOORD2_param : vec3<f32>, @location(3) vs_TEXCOORD3_param : vec3<f32>, @builtin(position) gl_FragCoord_param : vec4<f32>) -> main_out {
  vs_TEXCOORD4 = vs_TEXCOORD4_param;
  vs_TEXCOORD0 = vs_TEXCOORD0_param;
  vs_TEXCOORD1 = vs_TEXCOORD1_param;
  vs_TEXCOORD2 = vs_TEXCOORD2_param;
  vs_TEXCOORD3 = vs_TEXCOORD3_param;
  gl_FragCoord = gl_FragCoord_param;
  main_1();
  return main_out(SV_Target0);
}

