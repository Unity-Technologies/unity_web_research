struct PGlobals {
  x_RenderViewportScaleFactor : f32,
  @size(12)
  padding : u32,
  x_Distortion_Amount : vec4<f32>,
  x_Distortion_CenterScale : vec4<f32>,
  x_BloomTex_TexelSize : vec4<f32>,
  x_Bloom_DirtTileOffset : vec4<f32>,
  x_Bloom_Settings : vec3<f32>,
  @size(4)
  padding_1 : u32,
  x_Bloom_Color : vec3<f32>,
  x_ChromaticAberration_Amount : f32,
  x_Lut3D_Params : vec2<f32>,
  x_PostExposure : f32,
  x_LumaInAlpha : f32,
}

var<private> vs_TEXCOORD0 : vec2<f32>;

@group(1) @binding(0) var<uniform> x_26 : PGlobals;

@group(0) @binding(1) var x_AutoExposureTex : texture_2d<f32>;

@group(0) @binding(7) var sampler_AutoExposureTex : sampler;

@group(0) @binding(4) var x_ChromaticAberration_SpectralLut : texture_2d<f32>;

@group(0) @binding(10) var sampler_ChromaticAberration_SpectralLut : sampler;

@group(0) @binding(0) var x_MainTex : texture_2d<f32>;

@group(0) @binding(6) var sampler_MainTex : sampler;

@group(0) @binding(2) var x_BloomTex : texture_2d<f32>;

@group(0) @binding(8) var sampler_BloomTex : sampler;

@group(0) @binding(3) var x_Bloom_DirtTex : texture_2d<f32>;

@group(0) @binding(9) var sampler_Bloom_DirtTex : sampler;

@group(0) @binding(5) var x_Lut3D : texture_3d<f32>;

@group(0) @binding(11) var sampler_Lut3D : sampler;

var<private> SV_Target0 : vec4<f32>;

var<private> gl_FragCoord : vec4<f32>;

fn main_1() {
  var u_xlat0 : vec4<f32>;
  var u_xlat20 : vec2<f32>;
  var u_xlat1 : vec4<f32>;
  var u_xlatb11 : bool;
  var u_xlat21 : vec2<f32>;
  var u_xlat2 : vec4<f32>;
  var u_xlat3 : vec4<f32>;
  var u_xlat31 : f32;
  var u_xlat12 : vec3<f32>;
  var u_xlat22 : f32;
  var u_xlat32 : f32;
  var u_xlatb13 : bool;
  var x_208 : f32;
  var u_xlatb12 : bool;
  var x_234 : f32;
  var u_xlat4 : vec4<f32>;
  var u_xlat5 : vec4<f32>;
  var u_xlat6 : vec4<f32>;
  var u_xlat7 : vec4<f32>;
  var u_xlat8 : vec4<f32>;
  var u_xlat17 : f32;
  var u_xlat27 : f32;
  var u_xlatb37 : bool;
  var u_xlatb1 : bool;
  var x_467 : f32;
  var u_xlat9 : f32;
  var u_xlat18 : f32;
  var u_xlat28 : f32;
  var u_xlatb38 : bool;
  var x_692 : f32;
  var u_xlat11 : f32;
  var u_xlat13 : f32;
  var u_xlatb7 : bool;
  var x_886 : f32;
  var u_xlat_precise_vec4 : vec4<f32>;
  var u_xlat_precise_ivec4 : vec4<i32>;
  var u_xlat_precise_bvec4 : vec4<bool>;
  var u_xlat_precise_uvec4 : vec4<u32>;
  let x_13 : vec2<f32> = vs_TEXCOORD0;
  let x_16 : vec2<f32> = (x_13 + vec2<f32>(-0.5f, -0.5f));
  let x_17 : vec4<f32> = u_xlat0;
  u_xlat0 = vec4<f32>(x_16.x, x_16.y, x_17.z, x_17.w);
  let x_21 : vec4<f32> = u_xlat0;
  let x_31 : vec4<f32> = x_26.x_Distortion_Amount;
  u_xlat20 = ((vec2<f32>(x_21.x, x_21.y) * vec2<f32>(x_31.z, x_31.z)) + vec2<f32>(0.5f, 0.5f));
  let x_37 : vec4<f32> = u_xlat0;
  let x_40 : vec4<f32> = x_26.x_Distortion_Amount;
  let x_45 : vec4<f32> = x_26.x_Distortion_CenterScale;
  let x_48 : vec2<f32> = ((vec2<f32>(x_37.x, x_37.y) * vec2<f32>(x_40.z, x_40.z)) + -(vec2<f32>(x_45.x, x_45.y)));
  let x_49 : vec4<f32> = u_xlat0;
  u_xlat0 = vec4<f32>(x_48.x, x_48.y, x_49.z, x_49.w);
  let x_51 : vec4<f32> = u_xlat0;
  let x_54 : vec4<f32> = x_26.x_Distortion_CenterScale;
  let x_56 : vec2<f32> = (vec2<f32>(x_51.x, x_51.y) * vec2<f32>(x_54.z, x_54.w));
  let x_57 : vec4<f32> = u_xlat0;
  u_xlat0 = vec4<f32>(x_56.x, x_56.y, x_57.z, x_57.w);
  let x_60 : vec4<f32> = u_xlat0;
  let x_62 : vec4<f32> = u_xlat0;
  u_xlat1.x = dot(vec2<f32>(x_60.x, x_60.y), vec2<f32>(x_62.x, x_62.y));
  let x_70 : f32 = u_xlat1.x;
  u_xlat1.x = sqrt(x_70);
  let x_80 : f32 = x_26.x_Distortion_Amount.w;
  u_xlatb11 = (0.0f < x_80);
  let x_82 : bool = u_xlatb11;
  if (x_82) {
    let x_86 : vec4<f32> = u_xlat1;
    let x_89 : vec4<f32> = x_26.x_Distortion_Amount;
    u_xlat21 = (vec2<f32>(x_86.x, x_86.x) * vec2<f32>(x_89.x, x_89.y));
    let x_94 : f32 = u_xlat21.x;
    u_xlat2.x = sin(x_94);
    let x_99 : f32 = u_xlat21.x;
    u_xlat3.x = cos(x_99);
    let x_103 : f32 = u_xlat2.x;
    let x_105 : f32 = u_xlat3.x;
    u_xlat21.x = (x_103 / x_105);
    let x_112 : f32 = u_xlat21.y;
    u_xlat31 = (1.0f / x_112);
    let x_115 : f32 = u_xlat21.x;
    let x_116 : f32 = u_xlat31;
    u_xlat21.x = ((x_115 * x_116) + -1.0f);
    let x_121 : vec4<f32> = u_xlat0;
    let x_123 : vec2<f32> = u_xlat21;
    let x_126 : vec2<f32> = u_xlat20;
    u_xlat21 = ((vec2<f32>(x_121.x, x_121.y) * vec2<f32>(x_123.x, x_123.x)) + x_126);
  } else {
    let x_130 : f32 = u_xlat1.x;
    u_xlat2.x = (1.0f / x_130);
    let x_134 : f32 = u_xlat2.x;
    let x_136 : f32 = x_26.x_Distortion_Amount.x;
    u_xlat2.x = (x_134 * x_136);
    let x_142 : f32 = u_xlat1.x;
    let x_144 : f32 = x_26.x_Distortion_Amount.y;
    u_xlat12.x = (x_142 * x_144);
    let x_149 : f32 = u_xlat12.x;
    u_xlat22 = min(abs(x_149), 1.0f);
    let x_154 : f32 = u_xlat12.x;
    u_xlat32 = max(abs(x_154), 1.0f);
    let x_157 : f32 = u_xlat32;
    u_xlat32 = (1.0f / x_157);
    let x_159 : f32 = u_xlat32;
    let x_160 : f32 = u_xlat22;
    u_xlat22 = (x_159 * x_160);
    let x_162 : f32 = u_xlat22;
    let x_163 : f32 = u_xlat22;
    u_xlat32 = (x_162 * x_163);
    let x_165 : f32 = u_xlat32;
    u_xlat3.x = ((x_165 * 0.0208351f) + -0.085133001f);
    let x_171 : f32 = u_xlat32;
    let x_173 : f32 = u_xlat3.x;
    u_xlat3.x = ((x_171 * x_173) + 0.180141002f);
    let x_178 : f32 = u_xlat32;
    let x_180 : f32 = u_xlat3.x;
    u_xlat3.x = ((x_178 * x_180) + -0.330299497f);
    let x_185 : f32 = u_xlat32;
    let x_187 : f32 = u_xlat3.x;
    u_xlat32 = ((x_185 * x_187) + 0.999866009f);
    let x_191 : f32 = u_xlat32;
    let x_192 : f32 = u_xlat22;
    u_xlat3.x = (x_191 * x_192);
    let x_197 : f32 = u_xlat12.x;
    u_xlatb13 = (1.0f < abs(x_197));
    let x_201 : f32 = u_xlat3.x;
    u_xlat3.x = ((x_201 * -2.0f) + 1.570796371f);
    let x_207 : bool = u_xlatb13;
    if (x_207) {
      let x_212 : f32 = u_xlat3.x;
      x_208 = x_212;
    } else {
      x_208 = 0.0f;
    }
    let x_214 : f32 = x_208;
    u_xlat3.x = x_214;
    let x_216 : f32 = u_xlat22;
    let x_217 : f32 = u_xlat32;
    let x_220 : f32 = u_xlat3.x;
    u_xlat22 = ((x_216 * x_217) + x_220);
    let x_223 : f32 = u_xlat12.x;
    u_xlat12.x = min(x_223, 1.0f);
    let x_228 : f32 = u_xlat12.x;
    let x_230 : f32 = u_xlat12.x;
    u_xlatb12 = (x_228 < -(x_230));
    let x_233 : bool = u_xlatb12;
    if (x_233) {
      let x_237 : f32 = u_xlat22;
      x_234 = -(x_237);
    } else {
      let x_240 : f32 = u_xlat22;
      x_234 = x_240;
    }
    let x_241 : f32 = x_234;
    u_xlat12.x = x_241;
    let x_244 : f32 = u_xlat2.x;
    let x_246 : f32 = u_xlat12.x;
    u_xlat2.x = ((x_244 * x_246) + -1.0f);
    let x_250 : vec4<f32> = u_xlat0;
    let x_252 : vec4<f32> = u_xlat2;
    let x_255 : vec2<f32> = u_xlat20;
    u_xlat21 = ((vec2<f32>(x_250.x, x_250.y) * vec2<f32>(x_252.x, x_252.x)) + x_255);
  }
  let x_267 : vec2<f32> = vs_TEXCOORD0;
  let x_268 : vec4<f32> = textureSample(x_AutoExposureTex, sampler_AutoExposureTex, x_267);
  u_xlat2.x = x_268.x;
  let x_271 : vec2<f32> = vs_TEXCOORD0;
  u_xlat3 = ((vec4<f32>(x_271.x, x_271.y, x_271.x, x_271.y) * vec4<f32>(2.0f, 2.0f, 2.0f, 2.0f)) + vec4<f32>(-1.0f, -1.0f, -1.0f, -1.0f));
  let x_278 : vec4<f32> = u_xlat3;
  let x_280 : vec4<f32> = u_xlat3;
  u_xlat12.x = dot(vec2<f32>(x_278.z, x_278.w), vec2<f32>(x_280.z, x_280.w));
  let x_284 : vec3<f32> = u_xlat12;
  let x_286 : vec4<f32> = u_xlat3;
  u_xlat3 = (vec4<f32>(x_284.x, x_284.x, x_284.x, x_284.x) * x_286);
  let x_288 : vec4<f32> = u_xlat3;
  let x_291 : f32 = x_26.x_ChromaticAberration_Amount;
  let x_293 : f32 = x_26.x_ChromaticAberration_Amount;
  let x_295 : f32 = x_26.x_ChromaticAberration_Amount;
  let x_297 : f32 = x_26.x_ChromaticAberration_Amount;
  let x_298 : vec4<f32> = vec4<f32>(x_291, x_293, x_295, x_297);
  u_xlat3 = (x_288 * vec4<f32>(x_298.x, x_298.y, x_298.z, x_298.w));
  let x_313 : vec4<f32> = textureSampleLevel(x_ChromaticAberration_SpectralLut, sampler_ChromaticAberration_SpectralLut, vec2<f32>(0.166666672f, 0.0f), 0.0f);
  let x_314 : vec3<f32> = vec3<f32>(x_313.x, x_313.y, x_313.z);
  let x_315 : vec4<f32> = u_xlat4;
  u_xlat4 = vec4<f32>(x_314.x, x_314.y, x_314.z, x_315.w);
  let x_322 : vec4<f32> = textureSampleLevel(x_ChromaticAberration_SpectralLut, sampler_ChromaticAberration_SpectralLut, vec2<f32>(0.5f, 0.0f), 0.0f);
  let x_323 : vec3<f32> = vec3<f32>(x_322.x, x_322.y, x_322.z);
  let x_324 : vec4<f32> = u_xlat5;
  u_xlat5 = vec4<f32>(x_323.x, x_323.y, x_323.z, x_324.w);
  let x_332 : vec4<f32> = textureSampleLevel(x_ChromaticAberration_SpectralLut, sampler_ChromaticAberration_SpectralLut, vec2<f32>(0.833333313f, 0.0f), 0.0f);
  let x_333 : vec3<f32> = vec3<f32>(x_332.x, x_332.y, x_332.z);
  let x_334 : vec4<f32> = u_xlat6;
  u_xlat6 = vec4<f32>(x_333.x, x_333.y, x_333.z, x_334.w);
  let x_336 : bool = u_xlatb11;
  if (x_336) {
    let x_339 : vec4<f32> = u_xlat1;
    let x_342 : vec4<f32> = x_26.x_Distortion_Amount;
    let x_344 : vec2<f32> = (vec2<f32>(x_339.x, x_339.x) * vec2<f32>(x_342.x, x_342.y));
    let x_345 : vec3<f32> = u_xlat12;
    u_xlat12 = vec3<f32>(x_344.x, x_344.y, x_345.z);
    let x_349 : f32 = u_xlat12.x;
    u_xlat7.x = sin(x_349);
    let x_354 : f32 = u_xlat12.x;
    u_xlat8.x = cos(x_354);
    let x_358 : f32 = u_xlat7.x;
    let x_360 : f32 = u_xlat8.x;
    u_xlat12.x = (x_358 / x_360);
    let x_364 : f32 = u_xlat12.y;
    u_xlat22 = (1.0f / x_364);
    let x_367 : f32 = u_xlat12.x;
    let x_368 : f32 = u_xlat22;
    u_xlat12.x = ((x_367 * x_368) + -1.0f);
    let x_372 : vec4<f32> = u_xlat0;
    let x_374 : vec3<f32> = u_xlat12;
    let x_377 : vec2<f32> = u_xlat20;
    let x_378 : vec2<f32> = ((vec2<f32>(x_372.x, x_372.y) * vec2<f32>(x_374.x, x_374.x)) + x_377);
    let x_379 : vec3<f32> = u_xlat12;
    u_xlat12 = vec3<f32>(x_378.x, x_378.y, x_379.z);
  } else {
    let x_383 : f32 = u_xlat1.x;
    u_xlat32 = (1.0f / x_383);
    let x_385 : f32 = u_xlat32;
    let x_387 : f32 = x_26.x_Distortion_Amount.x;
    u_xlat32 = (x_385 * x_387);
    let x_390 : f32 = u_xlat1.x;
    let x_392 : f32 = x_26.x_Distortion_Amount.y;
    u_xlat1.x = (x_390 * x_392);
    let x_396 : f32 = u_xlat1.x;
    u_xlat7.x = min(abs(x_396), 1.0f);
    let x_402 : f32 = u_xlat1.x;
    u_xlat17 = max(abs(x_402), 1.0f);
    let x_405 : f32 = u_xlat17;
    u_xlat17 = (1.0f / x_405);
    let x_407 : f32 = u_xlat17;
    let x_409 : f32 = u_xlat7.x;
    u_xlat7.x = (x_407 * x_409);
    let x_413 : f32 = u_xlat7.x;
    let x_415 : f32 = u_xlat7.x;
    u_xlat17 = (x_413 * x_415);
    let x_418 : f32 = u_xlat17;
    u_xlat27 = ((x_418 * 0.0208351f) + -0.085133001f);
    let x_421 : f32 = u_xlat17;
    let x_422 : f32 = u_xlat27;
    u_xlat27 = ((x_421 * x_422) + 0.180141002f);
    let x_425 : f32 = u_xlat17;
    let x_426 : f32 = u_xlat27;
    u_xlat27 = ((x_425 * x_426) + -0.330299497f);
    let x_429 : f32 = u_xlat17;
    let x_430 : f32 = u_xlat27;
    u_xlat17 = ((x_429 * x_430) + 0.999866009f);
    let x_433 : f32 = u_xlat17;
    let x_435 : f32 = u_xlat7.x;
    u_xlat27 = (x_433 * x_435);
    let x_439 : f32 = u_xlat1.x;
    u_xlatb37 = (1.0f < abs(x_439));
    let x_442 : f32 = u_xlat27;
    u_xlat27 = ((x_442 * -2.0f) + 1.570796371f);
    let x_445 : bool = u_xlatb37;
    let x_446 : f32 = u_xlat27;
    u_xlat27 = select(0.0f, x_446, x_445);
    let x_449 : f32 = u_xlat7.x;
    let x_450 : f32 = u_xlat17;
    let x_452 : f32 = u_xlat27;
    u_xlat7.x = ((x_449 * x_450) + x_452);
    let x_456 : f32 = u_xlat1.x;
    u_xlat1.x = min(x_456, 1.0f);
    let x_461 : f32 = u_xlat1.x;
    let x_463 : f32 = u_xlat1.x;
    u_xlatb1 = (x_461 < -(x_463));
    let x_466 : bool = u_xlatb1;
    if (x_466) {
      let x_471 : f32 = u_xlat7.x;
      x_467 = -(x_471);
    } else {
      let x_475 : f32 = u_xlat7.x;
      x_467 = x_475;
    }
    let x_476 : f32 = x_467;
    u_xlat1.x = x_476;
    let x_478 : f32 = u_xlat32;
    let x_480 : f32 = u_xlat1.x;
    u_xlat1.x = ((x_478 * x_480) + -1.0f);
    let x_484 : vec4<f32> = u_xlat0;
    let x_486 : vec4<f32> = u_xlat1;
    let x_489 : vec2<f32> = u_xlat20;
    let x_490 : vec2<f32> = ((vec2<f32>(x_484.x, x_484.y) * vec2<f32>(x_486.x, x_486.x)) + x_489);
    let x_491 : vec3<f32> = u_xlat12;
    u_xlat12 = vec3<f32>(x_490.x, x_490.y, x_491.z);
  }
  let x_493 : vec3<f32> = u_xlat12;
  let x_494 : vec2<f32> = vec2<f32>(x_493.x, x_493.y);
  let x_495 : vec3<f32> = u_xlat12;
  u_xlat12 = vec3<f32>(x_494.x, x_494.y, x_495.z);
  let x_497 : vec3<f32> = u_xlat12;
  let x_501 : vec2<f32> = clamp(vec2<f32>(x_497.x, x_497.y), vec2<f32>(0.0f, 0.0f), vec2<f32>(1.0f, 1.0f));
  let x_502 : vec3<f32> = u_xlat12;
  u_xlat12 = vec3<f32>(x_501.x, x_501.y, x_502.z);
  let x_504 : vec3<f32> = u_xlat12;
  let x_508 : f32 = x_26.x_RenderViewportScaleFactor;
  let x_510 : vec2<f32> = (vec2<f32>(x_504.x, x_504.y) * vec2<f32>(x_508, x_508));
  let x_511 : vec4<f32> = u_xlat0;
  u_xlat0 = vec4<f32>(x_510.x, x_510.y, x_511.z, x_511.w);
  let x_518 : vec4<f32> = u_xlat0;
  let x_520 : vec4<f32> = textureSampleLevel(x_MainTex, sampler_MainTex, vec2<f32>(x_518.x, x_518.y), 0.0f);
  u_xlat0 = x_520;
  let x_521 : vec4<f32> = u_xlat3;
  let x_526 : vec2<f32> = vs_TEXCOORD0;
  u_xlat3 = ((x_521 * vec4<f32>(-0.333333343f, -0.333333343f, -0.666666687f, -0.666666687f)) + vec4<f32>(x_526.x, x_526.y, x_526.x, x_526.y));
  let x_529 : vec4<f32> = u_xlat3;
  u_xlat3 = (x_529 + vec4<f32>(-0.5f, -0.5f, -0.5f, -0.5f));
  let x_532 : vec4<f32> = u_xlat3;
  let x_534 : vec4<f32> = x_26.x_Distortion_Amount;
  u_xlat7 = ((x_532 * vec4<f32>(x_534.z, x_534.z, x_534.z, x_534.z)) + vec4<f32>(0.5f, 0.5f, 0.5f, 0.5f));
  let x_539 : vec4<f32> = u_xlat3;
  let x_541 : vec4<f32> = x_26.x_Distortion_Amount;
  let x_545 : vec4<f32> = x_26.x_Distortion_CenterScale;
  u_xlat3 = ((x_539 * vec4<f32>(x_541.z, x_541.z, x_541.z, x_541.z)) + -(vec4<f32>(x_545.x, x_545.y, x_545.x, x_545.y)));
  let x_549 : vec4<f32> = u_xlat3;
  let x_551 : vec4<f32> = x_26.x_Distortion_CenterScale;
  u_xlat3 = (x_549 * vec4<f32>(x_551.z, x_551.w, x_551.z, x_551.w));
  let x_554 : vec4<f32> = u_xlat3;
  let x_556 : vec4<f32> = u_xlat3;
  u_xlat1.x = dot(vec2<f32>(x_554.x, x_554.y), vec2<f32>(x_556.x, x_556.y));
  let x_561 : f32 = u_xlat1.x;
  u_xlat1.x = sqrt(x_561);
  let x_564 : bool = u_xlatb11;
  if (x_564) {
    let x_567 : vec4<f32> = u_xlat1;
    let x_570 : vec4<f32> = x_26.x_Distortion_Amount;
    let x_572 : vec2<f32> = (vec2<f32>(x_567.x, x_567.x) * vec2<f32>(x_570.x, x_570.y));
    let x_573 : vec3<f32> = u_xlat12;
    u_xlat12 = vec3<f32>(x_572.x, x_572.y, x_573.z);
    let x_576 : f32 = u_xlat12.x;
    u_xlat8.x = sin(x_576);
    let x_581 : f32 = u_xlat12.x;
    u_xlat9 = cos(x_581);
    let x_584 : f32 = u_xlat8.x;
    let x_585 : f32 = u_xlat9;
    u_xlat12.x = (x_584 / x_585);
    let x_589 : f32 = u_xlat12.y;
    u_xlat22 = (1.0f / x_589);
    let x_592 : f32 = u_xlat12.x;
    let x_593 : f32 = u_xlat22;
    u_xlat12.x = ((x_592 * x_593) + -1.0f);
    let x_597 : vec4<f32> = u_xlat3;
    let x_599 : vec3<f32> = u_xlat12;
    let x_602 : vec4<f32> = u_xlat7;
    let x_604 : vec2<f32> = ((vec2<f32>(x_597.x, x_597.y) * vec2<f32>(x_599.x, x_599.x)) + vec2<f32>(x_602.x, x_602.y));
    let x_605 : vec3<f32> = u_xlat12;
    u_xlat12 = vec3<f32>(x_604.x, x_604.y, x_605.z);
  } else {
    let x_609 : f32 = u_xlat1.x;
    u_xlat32 = (1.0f / x_609);
    let x_611 : f32 = u_xlat32;
    let x_613 : f32 = x_26.x_Distortion_Amount.x;
    u_xlat32 = (x_611 * x_613);
    let x_616 : f32 = u_xlat1.x;
    let x_618 : f32 = x_26.x_Distortion_Amount.y;
    u_xlat1.x = (x_616 * x_618);
    let x_622 : f32 = u_xlat1.x;
    u_xlat8.x = min(abs(x_622), 1.0f);
    let x_628 : f32 = u_xlat1.x;
    u_xlat18 = max(abs(x_628), 1.0f);
    let x_631 : f32 = u_xlat18;
    u_xlat18 = (1.0f / x_631);
    let x_633 : f32 = u_xlat18;
    let x_635 : f32 = u_xlat8.x;
    u_xlat8.x = (x_633 * x_635);
    let x_639 : f32 = u_xlat8.x;
    let x_641 : f32 = u_xlat8.x;
    u_xlat18 = (x_639 * x_641);
    let x_644 : f32 = u_xlat18;
    u_xlat28 = ((x_644 * 0.0208351f) + -0.085133001f);
    let x_647 : f32 = u_xlat18;
    let x_648 : f32 = u_xlat28;
    u_xlat28 = ((x_647 * x_648) + 0.180141002f);
    let x_651 : f32 = u_xlat18;
    let x_652 : f32 = u_xlat28;
    u_xlat28 = ((x_651 * x_652) + -0.330299497f);
    let x_655 : f32 = u_xlat18;
    let x_656 : f32 = u_xlat28;
    u_xlat18 = ((x_655 * x_656) + 0.999866009f);
    let x_659 : f32 = u_xlat18;
    let x_661 : f32 = u_xlat8.x;
    u_xlat28 = (x_659 * x_661);
    let x_665 : f32 = u_xlat1.x;
    u_xlatb38 = (1.0f < abs(x_665));
    let x_668 : f32 = u_xlat28;
    u_xlat28 = ((x_668 * -2.0f) + 1.570796371f);
    let x_671 : bool = u_xlatb38;
    let x_672 : f32 = u_xlat28;
    u_xlat28 = select(0.0f, x_672, x_671);
    let x_675 : f32 = u_xlat8.x;
    let x_676 : f32 = u_xlat18;
    let x_678 : f32 = u_xlat28;
    u_xlat8.x = ((x_675 * x_676) + x_678);
    let x_682 : f32 = u_xlat1.x;
    u_xlat1.x = min(x_682, 1.0f);
    let x_686 : f32 = u_xlat1.x;
    let x_688 : f32 = u_xlat1.x;
    u_xlatb1 = (x_686 < -(x_688));
    let x_691 : bool = u_xlatb1;
    if (x_691) {
      let x_696 : f32 = u_xlat8.x;
      x_692 = -(x_696);
    } else {
      let x_700 : f32 = u_xlat8.x;
      x_692 = x_700;
    }
    let x_701 : f32 = x_692;
    u_xlat1.x = x_701;
    let x_703 : f32 = u_xlat32;
    let x_705 : f32 = u_xlat1.x;
    u_xlat1.x = ((x_703 * x_705) + -1.0f);
    let x_709 : vec4<f32> = u_xlat3;
    let x_711 : vec4<f32> = u_xlat1;
    let x_714 : vec4<f32> = u_xlat7;
    let x_716 : vec2<f32> = ((vec2<f32>(x_709.x, x_709.y) * vec2<f32>(x_711.x, x_711.x)) + vec2<f32>(x_714.x, x_714.y));
    let x_717 : vec3<f32> = u_xlat12;
    u_xlat12 = vec3<f32>(x_716.x, x_716.y, x_717.z);
  }
  let x_719 : vec3<f32> = u_xlat12;
  let x_720 : vec2<f32> = vec2<f32>(x_719.x, x_719.y);
  let x_721 : vec3<f32> = u_xlat12;
  u_xlat12 = vec3<f32>(x_720.x, x_720.y, x_721.z);
  let x_723 : vec3<f32> = u_xlat12;
  let x_727 : vec2<f32> = clamp(vec2<f32>(x_723.x, x_723.y), vec2<f32>(0.0f, 0.0f), vec2<f32>(1.0f, 1.0f));
  let x_728 : vec3<f32> = u_xlat12;
  u_xlat12 = vec3<f32>(x_727.x, x_727.y, x_728.z);
  let x_730 : vec3<f32> = u_xlat12;
  let x_733 : f32 = x_26.x_RenderViewportScaleFactor;
  let x_735 : vec2<f32> = (vec2<f32>(x_730.x, x_730.y) * vec2<f32>(x_733, x_733));
  let x_736 : vec3<f32> = u_xlat12;
  u_xlat12 = vec3<f32>(x_735.x, x_735.y, x_736.z);
  let x_741 : vec3<f32> = u_xlat12;
  let x_743 : vec4<f32> = textureSampleLevel(x_MainTex, sampler_MainTex, vec2<f32>(x_741.x, x_741.y), 0.0f);
  u_xlat8 = x_743;
  let x_744 : vec4<f32> = u_xlat3;
  let x_746 : vec4<f32> = u_xlat3;
  u_xlat1.x = dot(vec2<f32>(x_744.z, x_744.w), vec2<f32>(x_746.z, x_746.w));
  let x_751 : f32 = u_xlat1.x;
  u_xlat1.x = sqrt(x_751);
  let x_754 : bool = u_xlatb11;
  if (x_754) {
    let x_757 : vec4<f32> = u_xlat1;
    let x_760 : vec4<f32> = x_26.x_Distortion_Amount;
    let x_762 : vec2<f32> = (vec2<f32>(x_757.x, x_757.x) * vec2<f32>(x_760.x, x_760.y));
    let x_763 : vec3<f32> = u_xlat12;
    u_xlat12 = vec3<f32>(x_762.x, x_762.y, x_763.z);
    let x_766 : f32 = u_xlat12.x;
    u_xlat3.x = sin(x_766);
    let x_770 : f32 = u_xlat12.x;
    u_xlat7.x = cos(x_770);
    let x_775 : f32 = u_xlat3.x;
    let x_777 : f32 = u_xlat7.x;
    u_xlat11 = (x_775 / x_777);
    let x_780 : f32 = u_xlat12.y;
    u_xlat12.x = (1.0f / x_780);
    let x_783 : f32 = u_xlat11;
    let x_785 : f32 = u_xlat12.x;
    u_xlat11 = ((x_783 * x_785) + -1.0f);
    let x_788 : vec4<f32> = u_xlat3;
    let x_790 : f32 = u_xlat11;
    let x_793 : vec4<f32> = u_xlat7;
    let x_795 : vec2<f32> = ((vec2<f32>(x_788.z, x_788.w) * vec2<f32>(x_790, x_790)) + vec2<f32>(x_793.z, x_793.w));
    let x_796 : vec3<f32> = u_xlat12;
    u_xlat12 = vec3<f32>(x_795.x, x_795.y, x_796.z);
  } else {
    let x_800 : f32 = u_xlat1.x;
    u_xlat11 = (1.0f / x_800);
    let x_802 : f32 = u_xlat11;
    let x_804 : f32 = x_26.x_Distortion_Amount.x;
    u_xlat11 = (x_802 * x_804);
    let x_807 : f32 = u_xlat1.x;
    let x_809 : f32 = x_26.x_Distortion_Amount.y;
    u_xlat1.x = (x_807 * x_809);
    let x_813 : f32 = u_xlat1.x;
    u_xlat32 = min(abs(x_813), 1.0f);
    let x_817 : f32 = u_xlat1.x;
    u_xlat3.x = max(abs(x_817), 1.0f);
    let x_822 : f32 = u_xlat3.x;
    u_xlat3.x = (1.0f / x_822);
    let x_825 : f32 = u_xlat32;
    let x_827 : f32 = u_xlat3.x;
    u_xlat32 = (x_825 * x_827);
    let x_829 : f32 = u_xlat32;
    let x_830 : f32 = u_xlat32;
    u_xlat3.x = (x_829 * x_830);
    let x_835 : f32 = u_xlat3.x;
    u_xlat13 = ((x_835 * 0.0208351f) + -0.085133001f);
    let x_839 : f32 = u_xlat3.x;
    let x_840 : f32 = u_xlat13;
    u_xlat13 = ((x_839 * x_840) + 0.180141002f);
    let x_844 : f32 = u_xlat3.x;
    let x_845 : f32 = u_xlat13;
    u_xlat13 = ((x_844 * x_845) + -0.330299497f);
    let x_849 : f32 = u_xlat3.x;
    let x_850 : f32 = u_xlat13;
    u_xlat3.x = ((x_849 * x_850) + 0.999866009f);
    let x_854 : f32 = u_xlat32;
    let x_856 : f32 = u_xlat3.x;
    u_xlat13 = (x_854 * x_856);
    let x_860 : f32 = u_xlat1.x;
    u_xlatb7 = (1.0f < abs(x_860));
    let x_863 : f32 = u_xlat13;
    u_xlat13 = ((x_863 * -2.0f) + 1.570796371f);
    let x_866 : bool = u_xlatb7;
    let x_867 : f32 = u_xlat13;
    u_xlat13 = select(0.0f, x_867, x_866);
    let x_869 : f32 = u_xlat32;
    let x_871 : f32 = u_xlat3.x;
    let x_873 : f32 = u_xlat13;
    u_xlat32 = ((x_869 * x_871) + x_873);
    let x_876 : f32 = u_xlat1.x;
    u_xlat1.x = min(x_876, 1.0f);
    let x_880 : f32 = u_xlat1.x;
    let x_882 : f32 = u_xlat1.x;
    u_xlatb1 = (x_880 < -(x_882));
    let x_885 : bool = u_xlatb1;
    if (x_885) {
      let x_889 : f32 = u_xlat32;
      x_886 = -(x_889);
    } else {
      let x_892 : f32 = u_xlat32;
      x_886 = x_892;
    }
    let x_893 : f32 = x_886;
    u_xlat1.x = x_893;
    let x_895 : f32 = u_xlat11;
    let x_897 : f32 = u_xlat1.x;
    u_xlat1.x = ((x_895 * x_897) + -1.0f);
    let x_901 : vec4<f32> = u_xlat3;
    let x_903 : vec4<f32> = u_xlat1;
    let x_906 : vec4<f32> = u_xlat7;
    let x_908 : vec2<f32> = ((vec2<f32>(x_901.z, x_901.w) * vec2<f32>(x_903.x, x_903.x)) + vec2<f32>(x_906.z, x_906.w));
    let x_909 : vec3<f32> = u_xlat12;
    u_xlat12 = vec3<f32>(x_908.x, x_908.y, x_909.z);
  }
  let x_911 : vec3<f32> = u_xlat12;
  let x_912 : vec2<f32> = vec2<f32>(x_911.x, x_911.y);
  let x_913 : vec3<f32> = u_xlat12;
  u_xlat12 = vec3<f32>(x_912.x, x_912.y, x_913.z);
  let x_915 : vec3<f32> = u_xlat12;
  let x_919 : vec2<f32> = clamp(vec2<f32>(x_915.x, x_915.y), vec2<f32>(0.0f, 0.0f), vec2<f32>(1.0f, 1.0f));
  let x_920 : vec3<f32> = u_xlat12;
  u_xlat12 = vec3<f32>(x_919.x, x_919.y, x_920.z);
  let x_922 : vec3<f32> = u_xlat12;
  let x_925 : f32 = x_26.x_RenderViewportScaleFactor;
  let x_927 : vec2<f32> = (vec2<f32>(x_922.x, x_922.y) * vec2<f32>(x_925, x_925));
  let x_928 : vec4<f32> = u_xlat1;
  u_xlat1 = vec4<f32>(x_927.x, x_927.y, x_928.z, x_928.w);
  let x_933 : vec4<f32> = u_xlat1;
  let x_935 : vec4<f32> = textureSampleLevel(x_MainTex, sampler_MainTex, vec2<f32>(x_933.x, x_933.y), 0.0f);
  u_xlat3 = x_935;
  u_xlat4.w = 1.0f;
  u_xlat5.w = 1.0f;
  let x_938 : vec4<f32> = u_xlat5;
  let x_939 : vec4<f32> = u_xlat8;
  u_xlat7 = (x_938 * x_939);
  let x_941 : vec4<f32> = u_xlat0;
  let x_942 : vec4<f32> = u_xlat4;
  let x_944 : vec4<f32> = u_xlat7;
  u_xlat0 = ((x_941 * x_942) + x_944);
  u_xlat6.w = 1.0f;
  let x_947 : vec4<f32> = u_xlat3;
  let x_948 : vec4<f32> = u_xlat6;
  let x_950 : vec4<f32> = u_xlat0;
  u_xlat0 = ((x_947 * x_948) + x_950);
  let x_952 : vec4<f32> = u_xlat4;
  let x_954 : vec4<f32> = u_xlat5;
  u_xlat12 = (vec3<f32>(x_952.x, x_952.y, x_952.z) + vec3<f32>(x_954.x, x_954.y, x_954.z));
  let x_957 : vec4<f32> = u_xlat6;
  let x_959 : vec3<f32> = u_xlat12;
  let x_960 : vec3<f32> = (vec3<f32>(x_957.x, x_957.y, x_957.z) + x_959);
  let x_961 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_960.x, x_960.y, x_960.z, x_961.w);
  u_xlat3.w = 3.0f;
  let x_965 : vec4<f32> = u_xlat0;
  let x_966 : vec4<f32> = u_xlat3;
  u_xlat0 = (x_965 / x_966);
  let x_968 : vec4<f32> = u_xlat2;
  let x_970 : vec4<f32> = u_xlat0;
  let x_972 : vec3<f32> = (vec3<f32>(x_968.x, x_968.x, x_968.x) * vec3<f32>(x_970.x, x_970.y, x_970.z));
  let x_973 : vec4<f32> = u_xlat0;
  u_xlat0 = vec4<f32>(x_972.x, x_972.y, x_972.z, x_973.w);
  let x_977 : vec4<f32> = x_26.x_BloomTex_TexelSize;
  u_xlat2 = (vec4<f32>(x_977.x, x_977.y, x_977.x, x_977.y) * vec4<f32>(-1.0f, -1.0f, 1.0f, 1.0f));
  let x_983 : f32 = x_26.x_Bloom_Settings.x;
  u_xlat1.x = (x_983 * 0.5f);
  let x_986 : vec4<f32> = u_xlat2;
  let x_988 : vec4<f32> = u_xlat1;
  let x_991 : vec2<f32> = u_xlat21;
  u_xlat3 = ((vec4<f32>(x_986.x, x_986.y, x_986.z, x_986.y) * vec4<f32>(x_988.x, x_988.x, x_988.x, x_988.x)) + vec4<f32>(x_991.x, x_991.y, x_991.x, x_991.y));
  let x_994 : vec4<f32> = u_xlat3;
  u_xlat3 = clamp(x_994, vec4<f32>(0.0f, 0.0f, 0.0f, 0.0f), vec4<f32>(1.0f, 1.0f, 1.0f, 1.0f));
  let x_998 : vec4<f32> = u_xlat3;
  let x_1000 : f32 = x_26.x_RenderViewportScaleFactor;
  u_xlat3 = (x_998 * vec4<f32>(x_1000, x_1000, x_1000, x_1000));
  let x_1008 : vec4<f32> = u_xlat3;
  let x_1010 : vec4<f32> = textureSample(x_BloomTex, sampler_BloomTex, vec2<f32>(x_1008.x, x_1008.y));
  u_xlat4 = x_1010;
  let x_1014 : vec4<f32> = u_xlat3;
  let x_1016 : vec4<f32> = textureSample(x_BloomTex, sampler_BloomTex, vec2<f32>(x_1014.z, x_1014.w));
  u_xlat3 = x_1016;
  let x_1017 : vec4<f32> = u_xlat3;
  let x_1018 : vec4<f32> = u_xlat4;
  u_xlat3 = (x_1017 + x_1018);
  let x_1020 : vec4<f32> = u_xlat2;
  let x_1022 : vec4<f32> = u_xlat1;
  let x_1025 : vec2<f32> = u_xlat21;
  u_xlat2 = ((vec4<f32>(x_1020.x, x_1020.w, x_1020.z, x_1020.w) * vec4<f32>(x_1022.x, x_1022.x, x_1022.x, x_1022.x)) + vec4<f32>(x_1025.x, x_1025.y, x_1025.x, x_1025.y));
  let x_1028 : vec4<f32> = u_xlat2;
  u_xlat2 = clamp(x_1028, vec4<f32>(0.0f, 0.0f, 0.0f, 0.0f), vec4<f32>(1.0f, 1.0f, 1.0f, 1.0f));
  let x_1032 : vec4<f32> = u_xlat2;
  let x_1034 : f32 = x_26.x_RenderViewportScaleFactor;
  u_xlat2 = (x_1032 * vec4<f32>(x_1034, x_1034, x_1034, x_1034));
  let x_1040 : vec4<f32> = u_xlat2;
  let x_1042 : vec4<f32> = textureSample(x_BloomTex, sampler_BloomTex, vec2<f32>(x_1040.x, x_1040.y));
  u_xlat4 = x_1042;
  let x_1043 : vec4<f32> = u_xlat3;
  let x_1044 : vec4<f32> = u_xlat4;
  u_xlat3 = (x_1043 + x_1044);
  let x_1049 : vec4<f32> = u_xlat2;
  let x_1051 : vec4<f32> = textureSample(x_BloomTex, sampler_BloomTex, vec2<f32>(x_1049.z, x_1049.w));
  u_xlat2 = x_1051;
  let x_1052 : vec4<f32> = u_xlat2;
  let x_1053 : vec4<f32> = u_xlat3;
  u_xlat2 = (x_1052 + x_1053);
  let x_1055 : vec4<f32> = u_xlat2;
  let x_1058 : vec3<f32> = x_26.x_Bloom_Settings;
  u_xlat2 = (x_1055 * vec4<f32>(x_1058.y, x_1058.y, x_1058.y, x_1058.y));
  let x_1061 : vec2<f32> = u_xlat21;
  let x_1064 : vec4<f32> = x_26.x_Bloom_DirtTileOffset;
  let x_1068 : vec4<f32> = x_26.x_Bloom_DirtTileOffset;
  let x_1070 : vec2<f32> = ((x_1061 * vec2<f32>(x_1064.x, x_1064.y)) + vec2<f32>(x_1068.z, x_1068.w));
  let x_1071 : vec4<f32> = u_xlat1;
  u_xlat1 = vec4<f32>(x_1070.x, x_1070.y, x_1071.z, x_1071.w);
  let x_1078 : vec4<f32> = u_xlat1;
  let x_1080 : vec4<f32> = textureSample(x_Bloom_DirtTex, sampler_Bloom_DirtTex, vec2<f32>(x_1078.x, x_1078.y));
  let x_1081 : vec3<f32> = vec3<f32>(x_1080.x, x_1080.y, x_1080.z);
  let x_1082 : vec4<f32> = u_xlat1;
  u_xlat1 = vec4<f32>(x_1081.x, x_1081.y, x_1081.z, x_1082.w);
  let x_1084 : vec4<f32> = u_xlat2;
  u_xlat3 = (x_1084 * vec4<f32>(0.25f, 0.25f, 0.25f, 0.25f));
  let x_1088 : vec4<f32> = u_xlat1;
  let x_1091 : vec3<f32> = x_26.x_Bloom_Settings;
  let x_1093 : vec3<f32> = (vec3<f32>(x_1088.x, x_1088.y, x_1088.z) * vec3<f32>(x_1091.z, x_1091.z, x_1091.z));
  let x_1094 : vec4<f32> = u_xlat1;
  u_xlat1 = vec4<f32>(x_1093.x, x_1093.y, x_1093.z, x_1094.w);
  u_xlat1.w = 0.0f;
  let x_1097 : vec4<f32> = u_xlat2;
  u_xlat2 = (x_1097 * vec4<f32>(0.25f, 0.25f, 0.25f, 1.0f));
  let x_1100 : vec4<f32> = u_xlat2;
  let x_1104 : vec3<f32> = x_26.x_Bloom_Color;
  let x_1105 : vec3<f32> = (vec3<f32>(x_1100.x, x_1100.y, x_1100.z) * x_1104);
  let x_1106 : vec4<f32> = u_xlat4;
  u_xlat4 = vec4<f32>(x_1105.x, x_1105.y, x_1105.z, x_1106.w);
  let x_1109 : f32 = u_xlat2.w;
  u_xlat4.w = (x_1109 * 0.25f);
  let x_1112 : vec4<f32> = u_xlat0;
  let x_1113 : vec4<f32> = u_xlat4;
  u_xlat0 = (x_1112 + x_1113);
  let x_1115 : vec4<f32> = u_xlat1;
  let x_1116 : vec4<f32> = u_xlat3;
  let x_1118 : vec4<f32> = u_xlat0;
  u_xlat0 = ((x_1115 * x_1116) + x_1118);
  let x_1120 : vec4<f32> = u_xlat0;
  let x_1124 : f32 = x_26.x_PostExposure;
  let x_1126 : f32 = x_26.x_PostExposure;
  let x_1128 : f32 = x_26.x_PostExposure;
  let x_1130 : f32 = x_26.x_PostExposure;
  let x_1131 : vec4<f32> = vec4<f32>(x_1124, x_1126, x_1128, x_1130);
  u_xlat0 = (vec4<f32>(x_1120.w, x_1120.x, x_1120.y, x_1120.z) * vec4<f32>(x_1131.x, x_1131.y, x_1131.z, x_1131.w));
  let x_1138 : vec4<f32> = u_xlat0;
  let x_1145 : vec3<f32> = ((vec3<f32>(x_1138.y, x_1138.z, x_1138.w) * vec3<f32>(5.55555582f, 5.55555582f, 5.55555582f)) + vec3<f32>(0.047995999f, 0.047995999f, 0.047995999f));
  let x_1146 : vec4<f32> = u_xlat1;
  u_xlat1 = vec4<f32>(x_1145.x, x_1145.y, x_1145.z, x_1146.w);
  let x_1148 : vec4<f32> = u_xlat1;
  let x_1150 : vec3<f32> = log2(vec3<f32>(x_1148.x, x_1148.y, x_1148.z));
  let x_1151 : vec4<f32> = u_xlat1;
  u_xlat1 = vec4<f32>(x_1150.x, x_1150.y, x_1150.z, x_1151.w);
  let x_1153 : vec4<f32> = u_xlat1;
  let x_1160 : vec3<f32> = ((vec3<f32>(x_1153.x, x_1153.y, x_1153.z) * vec3<f32>(0.073499784f, 0.073499784f, 0.073499784f)) + vec3<f32>(0.386036009f, 0.386036009f, 0.386036009f));
  let x_1161 : vec4<f32> = u_xlat1;
  u_xlat1 = vec4<f32>(x_1160.x, x_1160.y, x_1160.z, x_1161.w);
  let x_1163 : vec4<f32> = u_xlat1;
  let x_1167 : vec3<f32> = clamp(vec3<f32>(x_1163.x, x_1163.y, x_1163.z), vec3<f32>(0.0f, 0.0f, 0.0f), vec3<f32>(1.0f, 1.0f, 1.0f));
  let x_1168 : vec4<f32> = u_xlat1;
  u_xlat1 = vec4<f32>(x_1167.x, x_1167.y, x_1167.z, x_1168.w);
  let x_1170 : vec4<f32> = u_xlat1;
  let x_1175 : vec2<f32> = x_26.x_Lut3D_Params;
  let x_1177 : vec3<f32> = (vec3<f32>(x_1170.x, x_1170.y, x_1170.z) * vec3<f32>(x_1175.y, x_1175.y, x_1175.y));
  let x_1178 : vec4<f32> = u_xlat1;
  u_xlat1 = vec4<f32>(x_1177.x, x_1177.y, x_1177.z, x_1178.w);
  let x_1181 : f32 = x_26.x_Lut3D_Params.x;
  u_xlat31 = (x_1181 * 0.5f);
  let x_1183 : vec4<f32> = u_xlat1;
  let x_1186 : vec2<f32> = x_26.x_Lut3D_Params;
  let x_1189 : f32 = u_xlat31;
  let x_1191 : vec3<f32> = ((vec3<f32>(x_1183.x, x_1183.y, x_1183.z) * vec3<f32>(x_1186.x, x_1186.x, x_1186.x)) + vec3<f32>(x_1189, x_1189, x_1189));
  let x_1192 : vec4<f32> = u_xlat1;
  u_xlat1 = vec4<f32>(x_1191.x, x_1191.y, x_1191.z, x_1192.w);
  let x_1202 : vec4<f32> = u_xlat1;
  let x_1204 : vec4<f32> = textureSample(x_Lut3D, sampler_Lut3D, vec3<f32>(x_1202.x, x_1202.y, x_1202.z));
  let x_1205 : vec3<f32> = vec3<f32>(x_1204.x, x_1204.y, x_1204.z);
  let x_1206 : vec4<f32> = u_xlat0;
  u_xlat0 = vec4<f32>(x_1206.x, x_1205.x, x_1205.y, x_1205.z);
  let x_1210 : f32 = x_26.x_LumaInAlpha;
  u_xlatb1 = (0.5f < x_1210);
  let x_1212 : bool = u_xlatb1;
  if (x_1212) {
    let x_1215 : vec4<f32> = u_xlat0;
    let x_1216 : vec3<f32> = vec3<f32>(x_1215.y, x_1215.z, x_1215.w);
    let x_1217 : vec4<f32> = u_xlat1;
    u_xlat1 = vec4<f32>(x_1216.x, x_1216.y, x_1216.z, x_1217.w);
    let x_1219 : vec4<f32> = u_xlat1;
    let x_1223 : vec3<f32> = clamp(vec3<f32>(x_1219.x, x_1219.y, x_1219.z), vec3<f32>(0.0f, 0.0f, 0.0f), vec3<f32>(1.0f, 1.0f, 1.0f));
    let x_1224 : vec4<f32> = u_xlat1;
    u_xlat1 = vec4<f32>(x_1223.x, x_1223.y, x_1223.z, x_1224.w);
    let x_1226 : vec4<f32> = u_xlat1;
    u_xlat0.x = dot(vec3<f32>(x_1226.x, x_1226.y, x_1226.z), vec3<f32>(0.212672904f, 0.715152204f, 0.072175004f));
  }
  let x_1236 : vec4<f32> = u_xlat0;
  SV_Target0 = vec4<f32>(x_1236.y, x_1236.z, x_1236.w, x_1236.x);
  return;
}

struct main_out {
  @location(0)
  SV_Target0_1 : vec4<f32>,
}

@fragment
fn main(@location(0) vs_TEXCOORD0_param : vec2<f32>, @builtin(position) gl_FragCoord_param : vec4<f32>) -> main_out {
  vs_TEXCOORD0 = vs_TEXCOORD0_param;
  gl_FragCoord = gl_FragCoord_param;
  main_1();
  return main_out(SV_Target0);
}

