struct PGlobals {
  x_WorldSpaceCameraPos : vec3<f32>,
  @size(4)
  padding : u32,
  x_ProjectionParams : vec4<f32>,
  x_ZBufferParams : vec4<f32>,
  unity_CameraToWorld : mat4x4<f32>,
  x_LightProjectionParams : vec4<f32>,
  x_LightShadowData : vec4<f32>,
  unity_ShadowFadeCenterAndType : vec4<f32>,
  x_LightPos : vec4<f32>,
  x_LightColor : vec4<f32>,
  unity_WorldToLight : mat4x4<f32>,
}

@group(1) @binding(0) var<uniform> x_14 : PGlobals;

var<private> vs_TEXCOORD1 : vec3<f32>;

var<private> vs_TEXCOORD0 : vec4<f32>;

@group(0) @binding(0) var x_CameraDepthTexture : texture_2d<f32>;

@group(0) @binding(7) var sampler_CameraDepthTexture : sampler;

@group(0) @binding(1) var x_LightTextureB0 : texture_2d<f32>;

@group(0) @binding(8) var sampler_LightTextureB0 : sampler;

@group(0) @binding(6) var x_ShadowMapTexture : texture_depth_cube;

@group(0) @binding(10) var sampler_ShadowMapTexture : sampler_comparison;

@group(0) @binding(2) var x_LightTexture0 : texture_cube<f32>;

@group(0) @binding(9) var sampler_LightTexture0 : sampler;

@group(0) @binding(3) var x_CameraGBufferTexture0 : texture_2d<f32>;

@group(0) @binding(11) var sampler_CameraGBufferTexture0 : sampler;

@group(0) @binding(4) var x_CameraGBufferTexture1 : texture_2d<f32>;

@group(0) @binding(12) var sampler_CameraGBufferTexture1 : sampler;

@group(0) @binding(5) var x_CameraGBufferTexture2 : texture_2d<f32>;

@group(0) @binding(13) var sampler_CameraGBufferTexture2 : sampler;

var<private> SV_Target0 : vec4<f32>;

var<private> gl_FragCoord : vec4<f32>;

fn main_1() {
  var u_xlat0 : vec4<f32>;
  var u_xlat1 : vec3<f32>;
  var u_xlat24 : f32;
  var u_xlat2 : vec4<f32>;
  var u_xlat3 : vec3<f32>;
  var u_xlat8 : vec3<f32>;
  var u_xlat17 : f32;
  var u_xlat25 : f32;
  var u_xlatb18 : bool;
  var u_xlat18 : f32;
  var u_xlat4 : vec4<f32>;
  var txVec0 : vec4<f32>;
  var u_xlat5 : vec3<f32>;
  var txVec1 : vec4<f32>;
  var txVec2 : vec4<f32>;
  var txVec3 : vec4<f32>;
  var u_xlat27 : f32;
  var u_xlat6 : vec4<f32>;
  var u_xlat7 : vec4<f32>;
  var u_xlat16 : f32;
  var u_xlat9 : f32;
  var u_xlatb24 : bool;
  var u_xlat_precise_vec4 : vec4<f32>;
  var u_xlat_precise_ivec4 : vec4<i32>;
  var u_xlat_precise_bvec4 : vec4<bool>;
  var u_xlat_precise_uvec4 : vec4<u32>;
  let x_21 : f32 = x_14.x_ProjectionParams.z;
  let x_26 : f32 = vs_TEXCOORD1.z;
  u_xlat0.x = (x_21 / x_26);
  let x_31 : vec4<f32> = u_xlat0;
  let x_33 : vec3<f32> = vs_TEXCOORD1;
  let x_34 : vec3<f32> = (vec3<f32>(x_31.x, x_31.x, x_31.x) * x_33);
  let x_35 : vec4<f32> = u_xlat0;
  u_xlat0 = vec4<f32>(x_34.x, x_34.y, x_34.z, x_35.w);
  let x_42 : vec4<f32> = vs_TEXCOORD0;
  let x_44 : vec4<f32> = vs_TEXCOORD0;
  let x_46 : vec2<f32> = (vec2<f32>(x_42.x, x_42.y) / vec2<f32>(x_44.w, x_44.w));
  let x_47 : vec3<f32> = u_xlat1;
  u_xlat1 = vec3<f32>(x_46.x, x_46.y, x_47.z);
  let x_60 : vec3<f32> = u_xlat1;
  let x_62 : vec4<f32> = textureSample(x_CameraDepthTexture, sampler_CameraDepthTexture, vec2<f32>(x_60.x, x_60.y));
  u_xlat24 = x_62.x;
  let x_66 : f32 = x_14.x_ZBufferParams.x;
  let x_67 : f32 = u_xlat24;
  let x_71 : f32 = x_14.x_ZBufferParams.y;
  u_xlat24 = ((x_66 * x_67) + x_71);
  let x_74 : f32 = u_xlat24;
  u_xlat24 = (1.0f / x_74);
  let x_77 : f32 = u_xlat24;
  let x_79 : vec4<f32> = u_xlat0;
  let x_81 : vec3<f32> = (vec3<f32>(x_77, x_77, x_77) * vec3<f32>(x_79.x, x_79.y, x_79.z));
  let x_82 : vec4<f32> = u_xlat2;
  u_xlat2 = vec4<f32>(x_81.x, x_81.y, x_81.z, x_82.w);
  let x_85 : vec4<f32> = u_xlat2;
  let x_90 : vec4<f32> = x_14.unity_CameraToWorld[1i];
  u_xlat3 = (vec3<f32>(x_85.y, x_85.y, x_85.y) * vec3<f32>(x_90.x, x_90.y, x_90.z));
  let x_95 : vec4<f32> = x_14.unity_CameraToWorld[0i];
  let x_97 : vec4<f32> = u_xlat2;
  let x_100 : vec3<f32> = u_xlat3;
  let x_101 : vec3<f32> = ((vec3<f32>(x_95.x, x_95.y, x_95.z) * vec3<f32>(x_97.x, x_97.x, x_97.x)) + x_100);
  let x_102 : vec4<f32> = u_xlat2;
  u_xlat2 = vec4<f32>(x_101.x, x_101.y, x_102.z, x_101.z);
  let x_105 : vec4<f32> = x_14.unity_CameraToWorld[2i];
  let x_107 : vec4<f32> = u_xlat2;
  let x_110 : vec4<f32> = u_xlat2;
  let x_112 : vec3<f32> = ((vec3<f32>(x_105.x, x_105.y, x_105.z) * vec3<f32>(x_107.z, x_107.z, x_107.z)) + vec3<f32>(x_110.x, x_110.y, x_110.w));
  let x_113 : vec4<f32> = u_xlat2;
  u_xlat2 = vec4<f32>(x_112.x, x_112.y, x_113.z, x_112.z);
  let x_115 : vec4<f32> = u_xlat2;
  let x_118 : vec4<f32> = x_14.unity_CameraToWorld[3i];
  let x_120 : vec3<f32> = (vec3<f32>(x_115.x, x_115.y, x_115.w) + vec3<f32>(x_118.x, x_118.y, x_118.z));
  let x_121 : vec4<f32> = u_xlat2;
  u_xlat2 = vec4<f32>(x_120.x, x_120.y, x_121.z, x_120.z);
  let x_123 : vec4<f32> = u_xlat2;
  let x_127 : vec4<f32> = x_14.unity_ShadowFadeCenterAndType;
  u_xlat3 = (vec3<f32>(x_123.x, x_123.y, x_123.w) + -(vec3<f32>(x_127.x, x_127.y, x_127.z)));
  let x_131 : vec3<f32> = u_xlat3;
  let x_132 : vec3<f32> = u_xlat3;
  u_xlat0.x = dot(x_131, x_132);
  let x_136 : f32 = u_xlat0.x;
  u_xlat0.x = sqrt(x_136);
  let x_140 : f32 = u_xlat0.z;
  let x_142 : f32 = u_xlat24;
  let x_145 : f32 = u_xlat0.x;
  u_xlat0.x = ((-(x_140) * x_142) + x_145);
  let x_150 : f32 = x_14.unity_ShadowFadeCenterAndType.w;
  let x_152 : f32 = u_xlat0.x;
  let x_155 : f32 = u_xlat2.z;
  u_xlat0.x = ((x_150 * x_152) + x_155);
  let x_159 : vec4<f32> = u_xlat2;
  let x_163 : vec4<f32> = x_14.x_LightPos;
  u_xlat8 = (vec3<f32>(x_159.x, x_159.y, x_159.w) + -(vec3<f32>(x_163.x, x_163.y, x_163.z)));
  let x_168 : vec3<f32> = u_xlat8;
  let x_169 : vec3<f32> = u_xlat8;
  u_xlat17 = dot(x_168, x_169);
  let x_172 : f32 = u_xlat17;
  u_xlat25 = inverseSqrt(x_172);
  let x_174 : vec3<f32> = u_xlat8;
  let x_175 : f32 = u_xlat25;
  u_xlat3 = (x_174 * vec3<f32>(x_175, x_175, x_175));
  let x_178 : f32 = u_xlat17;
  let x_180 : f32 = x_14.x_LightPos.w;
  u_xlat17 = (x_178 * x_180);
  let x_187 : f32 = u_xlat17;
  let x_189 : vec4<f32> = textureSample(x_LightTextureB0, sampler_LightTextureB0, vec2<f32>(x_187, x_187));
  u_xlat17 = x_189.x;
  let x_192 : f32 = u_xlat0.x;
  let x_195 : f32 = x_14.x_LightShadowData.z;
  let x_198 : f32 = x_14.x_LightShadowData.w;
  u_xlat0.x = ((x_192 * x_195) + x_198);
  let x_202 : f32 = u_xlat0.x;
  u_xlat0.x = clamp(x_202, 0.0f, 1.0f);
  let x_210 : f32 = u_xlat0.x;
  u_xlatb18 = (x_210 < 0.99000001f);
  let x_213 : bool = u_xlatb18;
  if (x_213) {
    let x_218 : f32 = u_xlat8.y;
    let x_221 : f32 = u_xlat8.x;
    u_xlat18 = max(abs(x_218), abs(x_221));
    let x_225 : f32 = u_xlat8.z;
    let x_227 : f32 = u_xlat18;
    u_xlat18 = max(abs(x_225), x_227);
    let x_229 : f32 = u_xlat18;
    let x_232 : f32 = x_14.x_LightProjectionParams.z;
    u_xlat18 = (x_229 + -(x_232));
    let x_235 : f32 = u_xlat18;
    u_xlat18 = max(x_235, 0.00001f);
    let x_238 : f32 = u_xlat18;
    let x_240 : f32 = x_14.x_LightProjectionParams.w;
    u_xlat18 = (x_238 * x_240);
    let x_243 : f32 = x_14.x_LightProjectionParams.y;
    let x_244 : f32 = u_xlat18;
    u_xlat18 = (x_243 / x_244);
    let x_246 : f32 = u_xlat18;
    let x_248 : f32 = x_14.x_LightProjectionParams.x;
    u_xlat18 = (x_246 + -(x_248));
    let x_251 : f32 = u_xlat18;
    u_xlat18 = (-(x_251) + 1.0f);
    let x_255 : vec3<f32> = u_xlat8;
    let x_258 : vec3<f32> = (x_255 + vec3<f32>(0.0078125f, 0.0078125f, 0.0078125f));
    let x_259 : vec4<f32> = u_xlat4;
    u_xlat4 = vec4<f32>(x_258.x, x_258.y, x_258.z, x_259.w);
    let x_262 : vec4<f32> = u_xlat4;
    let x_263 : vec3<f32> = vec3<f32>(x_262.x, x_262.y, x_262.z);
    let x_264 : f32 = u_xlat18;
    txVec0 = vec4<f32>(x_263.x, x_263.y, x_263.z, x_264);
    let x_277 : vec4<f32> = txVec0;
    let x_279 : f32 = textureSampleCompare(x_ShadowMapTexture, sampler_ShadowMapTexture, x_277.xyz, x_277.w);
    u_xlat4.x = x_279;
    let x_282 : vec3<f32> = u_xlat8;
    u_xlat5 = (x_282 + vec3<f32>(-0.0078125f, -0.0078125f, 0.0078125f));
    let x_287 : vec3<f32> = u_xlat5;
    let x_288 : f32 = u_xlat18;
    txVec1 = vec4<f32>(x_287.x, x_287.y, x_287.z, x_288);
    let x_296 : vec4<f32> = txVec1;
    let x_298 : f32 = textureSampleCompare(x_ShadowMapTexture, sampler_ShadowMapTexture, x_296.xyz, x_296.w);
    u_xlat4.y = x_298;
    let x_300 : vec3<f32> = u_xlat8;
    u_xlat5 = (x_300 + vec3<f32>(-0.0078125f, 0.0078125f, -0.0078125f));
    let x_304 : vec3<f32> = u_xlat5;
    let x_305 : f32 = u_xlat18;
    txVec2 = vec4<f32>(x_304.x, x_304.y, x_304.z, x_305);
    let x_313 : vec4<f32> = txVec2;
    let x_315 : f32 = textureSampleCompare(x_ShadowMapTexture, sampler_ShadowMapTexture, x_313.xyz, x_313.w);
    u_xlat4.z = x_315;
    let x_317 : vec3<f32> = u_xlat8;
    u_xlat5 = (x_317 + vec3<f32>(0.0078125f, -0.0078125f, -0.0078125f));
    let x_321 : vec3<f32> = u_xlat5;
    let x_322 : f32 = u_xlat18;
    txVec3 = vec4<f32>(x_321.x, x_321.y, x_321.z, x_322);
    let x_330 : vec4<f32> = txVec3;
    let x_332 : f32 = textureSampleCompare(x_ShadowMapTexture, sampler_ShadowMapTexture, x_330.xyz, x_330.w);
    u_xlat4.w = x_332;
    let x_334 : vec4<f32> = u_xlat4;
    u_xlat18 = dot(x_334, vec4<f32>(0.25f, 0.25f, 0.25f, 0.25f));
    let x_340 : f32 = x_14.x_LightShadowData.x;
    u_xlat27 = (-(x_340) + 1.0f);
    let x_343 : f32 = u_xlat18;
    let x_344 : f32 = u_xlat27;
    let x_347 : f32 = x_14.x_LightShadowData.x;
    u_xlat18 = ((x_343 * x_344) + x_347);
  } else {
    u_xlat18 = 1.0f;
  }
  let x_350 : f32 = u_xlat18;
  u_xlat27 = (-(x_350) + 1.0f);
  let x_354 : f32 = u_xlat0.x;
  let x_355 : f32 = u_xlat27;
  let x_357 : f32 = u_xlat18;
  u_xlat0.x = ((x_354 * x_355) + x_357);
  let x_361 : f32 = u_xlat0.x;
  let x_362 : f32 = u_xlat17;
  u_xlat0.x = (x_361 * x_362);
  let x_365 : vec4<f32> = u_xlat2;
  let x_369 : vec4<f32> = x_14.unity_WorldToLight[1i];
  let x_371 : vec3<f32> = (vec3<f32>(x_365.y, x_365.y, x_365.y) * vec3<f32>(x_369.x, x_369.y, x_369.z));
  let x_372 : vec4<f32> = u_xlat4;
  u_xlat4 = vec4<f32>(x_371.x, x_371.y, x_371.z, x_372.w);
  let x_375 : vec4<f32> = x_14.unity_WorldToLight[0i];
  let x_377 : vec4<f32> = u_xlat2;
  let x_380 : vec4<f32> = u_xlat4;
  let x_382 : vec3<f32> = ((vec3<f32>(x_375.x, x_375.y, x_375.z) * vec3<f32>(x_377.x, x_377.x, x_377.x)) + vec3<f32>(x_380.x, x_380.y, x_380.z));
  let x_383 : vec4<f32> = u_xlat4;
  u_xlat4 = vec4<f32>(x_382.x, x_382.y, x_382.z, x_383.w);
  let x_386 : vec4<f32> = x_14.unity_WorldToLight[2i];
  let x_388 : vec4<f32> = u_xlat2;
  let x_391 : vec4<f32> = u_xlat4;
  let x_393 : vec3<f32> = ((vec3<f32>(x_386.x, x_386.y, x_386.z) * vec3<f32>(x_388.w, x_388.w, x_388.w)) + vec3<f32>(x_391.x, x_391.y, x_391.z));
  let x_394 : vec4<f32> = u_xlat4;
  u_xlat4 = vec4<f32>(x_393.x, x_393.y, x_393.z, x_394.w);
  let x_396 : vec4<f32> = u_xlat4;
  let x_399 : vec4<f32> = x_14.unity_WorldToLight[3i];
  let x_401 : vec3<f32> = (vec3<f32>(x_396.x, x_396.y, x_396.z) + vec3<f32>(x_399.x, x_399.y, x_399.z));
  let x_402 : vec4<f32> = u_xlat4;
  u_xlat4 = vec4<f32>(x_401.x, x_401.y, x_401.z, x_402.w);
  let x_412 : vec4<f32> = u_xlat4;
  let x_415 : vec4<f32> = textureSampleBias(x_LightTexture0, sampler_LightTexture0, vec3<f32>(x_412.x, x_412.y, x_412.z), -8.0f);
  u_xlat17 = x_415.w;
  let x_418 : f32 = u_xlat0.x;
  let x_419 : f32 = u_xlat17;
  u_xlat0.x = (x_418 * x_419);
  let x_422 : vec4<f32> = u_xlat0;
  let x_426 : vec4<f32> = x_14.x_LightColor;
  let x_428 : vec3<f32> = (vec3<f32>(x_422.x, x_422.x, x_422.x) * vec3<f32>(x_426.x, x_426.y, x_426.z));
  let x_429 : vec4<f32> = u_xlat4;
  u_xlat4 = vec4<f32>(x_428.x, x_428.y, x_428.z, x_429.w);
  let x_436 : vec3<f32> = u_xlat1;
  let x_438 : vec4<f32> = textureSample(x_CameraGBufferTexture0, sampler_CameraGBufferTexture0, vec2<f32>(x_436.x, x_436.y));
  u_xlat5 = vec3<f32>(x_438.x, x_438.y, x_438.z);
  let x_446 : vec3<f32> = u_xlat1;
  let x_448 : vec4<f32> = textureSample(x_CameraGBufferTexture1, sampler_CameraGBufferTexture1, vec2<f32>(x_446.x, x_446.y));
  u_xlat6 = x_448;
  let x_454 : vec3<f32> = u_xlat1;
  let x_456 : vec4<f32> = textureSample(x_CameraGBufferTexture2, sampler_CameraGBufferTexture2, vec2<f32>(x_454.x, x_454.y));
  u_xlat1 = vec3<f32>(x_456.x, x_456.y, x_456.z);
  let x_458 : vec3<f32> = u_xlat1;
  u_xlat1 = ((x_458 * vec3<f32>(2.0f, 2.0f, 2.0f)) + vec3<f32>(-1.0f, -1.0f, -1.0f));
  let x_465 : vec3<f32> = u_xlat1;
  let x_466 : vec3<f32> = u_xlat1;
  u_xlat0.x = dot(x_465, x_466);
  let x_470 : f32 = u_xlat0.x;
  u_xlat0.x = inverseSqrt(x_470);
  let x_473 : vec4<f32> = u_xlat0;
  let x_475 : vec3<f32> = u_xlat1;
  u_xlat1 = (vec3<f32>(x_473.x, x_473.x, x_473.x) * x_475);
  let x_477 : vec4<f32> = u_xlat2;
  let x_481 : vec3<f32> = x_14.x_WorldSpaceCameraPos;
  let x_483 : vec3<f32> = (vec3<f32>(x_477.x, x_477.y, x_477.w) + -(x_481));
  let x_484 : vec4<f32> = u_xlat2;
  u_xlat2 = vec4<f32>(x_483.x, x_483.y, x_483.z, x_484.w);
  let x_486 : vec4<f32> = u_xlat2;
  let x_488 : vec4<f32> = u_xlat2;
  u_xlat0.x = dot(vec3<f32>(x_486.x, x_486.y, x_486.z), vec3<f32>(x_488.x, x_488.y, x_488.z));
  let x_493 : f32 = u_xlat0.x;
  u_xlat0.x = inverseSqrt(x_493);
  let x_496 : vec4<f32> = u_xlat0;
  let x_498 : vec4<f32> = u_xlat2;
  let x_500 : vec3<f32> = (vec3<f32>(x_496.x, x_496.x, x_496.x) * vec3<f32>(x_498.x, x_498.y, x_498.z));
  let x_501 : vec4<f32> = u_xlat2;
  u_xlat2 = vec4<f32>(x_500.x, x_500.y, x_500.z, x_501.w);
  let x_504 : vec4<f32> = u_xlat6;
  u_xlat7 = (-(vec4<f32>(x_504.w, x_504.x, x_504.y, x_504.z)) + vec4<f32>(1.0f, 1.0f, 1.0f, 1.0f));
  let x_509 : vec3<f32> = u_xlat8;
  let x_511 : f32 = u_xlat25;
  let x_514 : vec4<f32> = u_xlat2;
  let x_517 : vec3<f32> = ((-(x_509) * vec3<f32>(x_511, x_511, x_511)) + -(vec3<f32>(x_514.x, x_514.y, x_514.z)));
  let x_518 : vec4<f32> = u_xlat0;
  u_xlat0 = vec4<f32>(x_517.x, x_517.y, x_517.z, x_518.w);
  let x_520 : vec4<f32> = u_xlat0;
  let x_522 : vec4<f32> = u_xlat0;
  u_xlat24 = dot(vec3<f32>(x_520.x, x_520.y, x_520.z), vec3<f32>(x_522.x, x_522.y, x_522.z));
  let x_525 : f32 = u_xlat24;
  u_xlat24 = max(x_525, 0.001f);
  let x_528 : f32 = u_xlat24;
  u_xlat24 = inverseSqrt(x_528);
  let x_530 : f32 = u_xlat24;
  let x_532 : vec4<f32> = u_xlat0;
  let x_534 : vec3<f32> = (vec3<f32>(x_530, x_530, x_530) * vec3<f32>(x_532.x, x_532.y, x_532.z));
  let x_535 : vec4<f32> = u_xlat0;
  u_xlat0 = vec4<f32>(x_534.x, x_534.y, x_534.z, x_535.w);
  let x_537 : vec3<f32> = u_xlat1;
  let x_538 : vec4<f32> = u_xlat2;
  u_xlat24 = dot(x_537, -(vec3<f32>(x_538.x, x_538.y, x_538.z)));
  let x_542 : vec3<f32> = u_xlat1;
  let x_543 : vec3<f32> = u_xlat3;
  u_xlat25 = dot(x_542, -(x_543));
  let x_546 : f32 = u_xlat25;
  u_xlat25 = clamp(x_546, 0.0f, 1.0f);
  let x_548 : vec3<f32> = u_xlat1;
  let x_549 : vec4<f32> = u_xlat0;
  u_xlat1.x = dot(x_548, vec3<f32>(x_549.x, x_549.y, x_549.z));
  let x_554 : f32 = u_xlat1.x;
  u_xlat1.x = clamp(x_554, 0.0f, 1.0f);
  let x_557 : vec3<f32> = u_xlat3;
  let x_559 : vec4<f32> = u_xlat0;
  u_xlat0.x = dot(-(x_557), vec3<f32>(x_559.x, x_559.y, x_559.z));
  let x_564 : f32 = u_xlat0.x;
  u_xlat0.x = clamp(x_564, 0.0f, 1.0f);
  let x_568 : f32 = u_xlat0.x;
  let x_570 : f32 = u_xlat0.x;
  u_xlat8.x = (x_568 * x_570);
  let x_573 : vec3<f32> = u_xlat8;
  let x_575 : vec4<f32> = u_xlat7;
  u_xlat8.x = dot(vec2<f32>(x_573.x, x_573.x), vec2<f32>(x_575.x, x_575.x));
  let x_580 : f32 = u_xlat8.x;
  u_xlat8.x = (x_580 + -0.5f);
  let x_585 : f32 = u_xlat25;
  u_xlat16 = (-(x_585) + 1.0f);
  let x_589 : f32 = u_xlat16;
  let x_590 : f32 = u_xlat16;
  u_xlat9 = (x_589 * x_590);
  let x_592 : f32 = u_xlat9;
  let x_593 : f32 = u_xlat9;
  u_xlat9 = (x_592 * x_593);
  let x_595 : f32 = u_xlat16;
  let x_596 : f32 = u_xlat9;
  u_xlat16 = (x_595 * x_596);
  let x_599 : f32 = u_xlat8.x;
  let x_600 : f32 = u_xlat16;
  u_xlat16 = ((x_599 * x_600) + 1.0f);
  let x_603 : f32 = u_xlat24;
  u_xlat9 = (-(abs(x_603)) + 1.0f);
  let x_607 : f32 = u_xlat9;
  let x_608 : f32 = u_xlat9;
  u_xlat17 = (x_607 * x_608);
  let x_610 : f32 = u_xlat17;
  let x_611 : f32 = u_xlat17;
  u_xlat17 = (x_610 * x_611);
  let x_613 : f32 = u_xlat9;
  let x_614 : f32 = u_xlat17;
  u_xlat9 = (x_613 * x_614);
  let x_617 : f32 = u_xlat8.x;
  let x_618 : f32 = u_xlat9;
  u_xlat8.x = ((x_617 * x_618) + 1.0f);
  let x_623 : f32 = u_xlat8.x;
  let x_624 : f32 = u_xlat16;
  u_xlat8.x = (x_623 * x_624);
  let x_628 : f32 = u_xlat7.x;
  let x_630 : f32 = u_xlat7.x;
  u_xlat16 = (x_628 * x_630);
  let x_632 : f32 = u_xlat16;
  u_xlat16 = max(x_632, 0.002f);
  let x_635 : f32 = u_xlat16;
  u_xlat9 = (-(x_635) + 1.0f);
  let x_638 : f32 = u_xlat24;
  let x_640 : f32 = u_xlat9;
  let x_642 : f32 = u_xlat16;
  u_xlat17 = ((abs(x_638) * x_640) + x_642);
  let x_644 : f32 = u_xlat25;
  let x_645 : f32 = u_xlat9;
  let x_647 : f32 = u_xlat16;
  u_xlat9 = ((x_644 * x_645) + x_647);
  let x_649 : f32 = u_xlat24;
  let x_651 : f32 = u_xlat9;
  u_xlat24 = (abs(x_649) * x_651);
  let x_653 : f32 = u_xlat25;
  let x_654 : f32 = u_xlat17;
  let x_656 : f32 = u_xlat24;
  u_xlat24 = ((x_653 * x_654) + x_656);
  let x_658 : f32 = u_xlat24;
  u_xlat24 = (x_658 + 0.00001f);
  let x_661 : f32 = u_xlat24;
  u_xlat24 = (0.5f / x_661);
  let x_663 : f32 = u_xlat16;
  let x_664 : f32 = u_xlat16;
  u_xlat16 = (x_663 * x_664);
  let x_667 : f32 = u_xlat1.x;
  let x_668 : f32 = u_xlat16;
  let x_671 : f32 = u_xlat1.x;
  u_xlat9 = ((x_667 * x_668) + -(x_671));
  let x_674 : f32 = u_xlat9;
  let x_676 : f32 = u_xlat1.x;
  u_xlat1.x = ((x_674 * x_676) + 1.0f);
  let x_680 : f32 = u_xlat16;
  u_xlat16 = (x_680 * 0.318309873f);
  let x_684 : f32 = u_xlat1.x;
  let x_686 : f32 = u_xlat1.x;
  u_xlat1.x = ((x_684 * x_686) + 0.0000001f);
  let x_691 : f32 = u_xlat16;
  let x_693 : f32 = u_xlat1.x;
  u_xlat16 = (x_691 / x_693);
  let x_695 : f32 = u_xlat16;
  let x_696 : f32 = u_xlat24;
  u_xlat8.y = (x_695 * x_696);
  let x_699 : f32 = u_xlat25;
  let x_701 : vec3<f32> = u_xlat8;
  let x_703 : vec2<f32> = (vec2<f32>(x_699, x_699) * vec2<f32>(x_701.x, x_701.y));
  let x_704 : vec3<f32> = u_xlat8;
  u_xlat8 = vec3<f32>(x_703.x, x_703.y, x_704.z);
  let x_707 : f32 = u_xlat8.y;
  u_xlat16 = (x_707 * 3.141592741f);
  let x_710 : f32 = u_xlat16;
  u_xlat16 = max(x_710, 0.0f);
  let x_712 : vec4<f32> = u_xlat6;
  let x_714 : vec4<f32> = u_xlat6;
  u_xlat24 = dot(vec3<f32>(x_712.x, x_712.y, x_712.z), vec3<f32>(x_714.x, x_714.y, x_714.z));
  let x_718 : f32 = u_xlat24;
  u_xlatb24 = !((x_718 == 0.0f));
  let x_720 : bool = u_xlatb24;
  u_xlat24 = select(0.0f, 1.0f, x_720);
  let x_722 : f32 = u_xlat24;
  let x_723 : f32 = u_xlat16;
  u_xlat16 = (x_722 * x_723);
  let x_725 : vec3<f32> = u_xlat8;
  let x_727 : vec4<f32> = u_xlat4;
  u_xlat1 = (vec3<f32>(x_725.x, x_725.x, x_725.x) * vec3<f32>(x_727.x, x_727.y, x_727.z));
  let x_730 : vec4<f32> = u_xlat4;
  let x_732 : f32 = u_xlat16;
  u_xlat8 = (vec3<f32>(x_730.x, x_730.y, x_730.z) * vec3<f32>(x_732, x_732, x_732));
  let x_736 : f32 = u_xlat0.x;
  u_xlat0.x = (-(x_736) + 1.0f);
  let x_741 : f32 = u_xlat0.x;
  let x_743 : f32 = u_xlat0.x;
  u_xlat25 = (x_741 * x_743);
  let x_745 : f32 = u_xlat25;
  let x_746 : f32 = u_xlat25;
  u_xlat25 = (x_745 * x_746);
  let x_749 : f32 = u_xlat0.x;
  let x_750 : f32 = u_xlat25;
  u_xlat0.x = (x_749 * x_750);
  let x_753 : vec4<f32> = u_xlat7;
  let x_755 : vec4<f32> = u_xlat0;
  let x_758 : vec4<f32> = u_xlat6;
  let x_760 : vec3<f32> = ((vec3<f32>(x_753.y, x_753.z, x_753.w) * vec3<f32>(x_755.x, x_755.x, x_755.x)) + vec3<f32>(x_758.x, x_758.y, x_758.z));
  let x_761 : vec4<f32> = u_xlat2;
  u_xlat2 = vec4<f32>(x_760.x, x_760.y, x_760.z, x_761.w);
  let x_763 : vec3<f32> = u_xlat8;
  let x_764 : vec4<f32> = u_xlat2;
  let x_766 : vec3<f32> = (x_763 * vec3<f32>(x_764.x, x_764.y, x_764.z));
  let x_767 : vec4<f32> = u_xlat0;
  u_xlat0 = vec4<f32>(x_766.x, x_766.y, x_766.z, x_767.w);
  let x_769 : vec3<f32> = u_xlat5;
  let x_770 : vec3<f32> = u_xlat1;
  let x_772 : vec4<f32> = u_xlat0;
  let x_774 : vec3<f32> = ((x_769 * x_770) + vec3<f32>(x_772.x, x_772.y, x_772.z));
  let x_775 : vec4<f32> = u_xlat0;
  u_xlat0 = vec4<f32>(x_774.x, x_774.y, x_774.z, x_775.w);
  u_xlat0.w = 1.0f;
  let x_780 : vec4<f32> = u_xlat0;
  SV_Target0 = exp2(-(x_780));
  return;
}

struct main_out {
  @location(0)
  SV_Target0_1 : vec4<f32>,
}

@fragment
fn main(@location(1) vs_TEXCOORD1_param : vec3<f32>, @location(0) vs_TEXCOORD0_param : vec4<f32>, @builtin(position) gl_FragCoord_param : vec4<f32>) -> main_out {
  vs_TEXCOORD1 = vs_TEXCOORD1_param;
  vs_TEXCOORD0 = vs_TEXCOORD0_param;
  gl_FragCoord = gl_FragCoord_param;
  main_1();
  return main_out(SV_Target0);
}

