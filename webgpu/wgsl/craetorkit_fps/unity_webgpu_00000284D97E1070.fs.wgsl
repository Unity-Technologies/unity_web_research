type Arr = array<mat4x4<f32>, 4u>;

struct PGlobals {
  unity_CameraInvProjection : mat4x4<f32>,
  unity_CameraToWorld : mat4x4<f32>,
  unity_WorldToShadow : Arr,
  x_LightShadowData : vec4<f32>,
  x_ShadowMapTexture_TexelSize : vec4<f32>,
}

@group(0) @binding(0) var x_CameraDepthTexture : texture_2d<f32>;

@group(0) @binding(3) var sampler_CameraDepthTexture : sampler;

var<private> vs_TEXCOORD0 : vec4<f32>;

@group(1) @binding(0) var<uniform> x_61 : PGlobals;

@group(0) @binding(1) var x_ShadowMapTexture : texture_depth_2d;

@group(0) @binding(2) var sampler_ShadowMapTexture : sampler_comparison;

var<private> SV_Target0 : vec4<f32>;

var<private> gl_FragCoord : vec4<f32>;

fn main_1() {
  var u_xlat0 : vec4<f32>;
  var u_xlat1 : vec4<f32>;
  var u_xlat17 : vec2<f32>;
  var u_xlat2 : vec4<f32>;
  var u_xlat3 : vec4<f32>;
  var u_xlat4 : vec4<f32>;
  var u_xlat5 : vec4<f32>;
  var u_xlat6 : vec4<f32>;
  var u_xlat7 : vec4<f32>;
  var txVec0 : vec3<f32>;
  var txVec1 : vec3<f32>;
  var u_xlat8 : vec3<f32>;
  var txVec2 : vec3<f32>;
  var txVec3 : vec3<f32>;
  var txVec4 : vec3<f32>;
  var txVec5 : vec3<f32>;
  var u_xlat24 : f32;
  var txVec6 : vec3<f32>;
  var txVec7 : vec3<f32>;
  var txVec8 : vec3<f32>;
  var txVec9 : vec3<f32>;
  var txVec10 : vec3<f32>;
  var txVec11 : vec3<f32>;
  var txVec12 : vec3<f32>;
  var txVec13 : vec3<f32>;
  var txVec14 : vec3<f32>;
  var txVec15 : vec3<f32>;
  var u_xlat16 : f32;
  var u_xlat_precise_vec4 : vec4<f32>;
  var u_xlat_precise_ivec4 : vec4<i32>;
  var u_xlat_precise_bvec4 : vec4<bool>;
  var u_xlat_precise_uvec4 : vec4<u32>;
  let x_23 : vec4<f32> = vs_TEXCOORD0;
  let x_25 : vec4<f32> = textureSample(x_CameraDepthTexture, sampler_CameraDepthTexture, vec2<f32>(x_23.x, x_23.y));
  u_xlat0.x = x_25.x;
  let x_32 : f32 = u_xlat0.x;
  u_xlat0.z = (-(x_32) + 1.0f);
  let x_38 : vec4<f32> = vs_TEXCOORD0;
  let x_39 : vec2<f32> = vec2<f32>(x_38.z, x_38.w);
  let x_40 : vec4<f32> = u_xlat0;
  u_xlat0 = vec4<f32>(x_39.x, x_39.y, x_40.z, x_40.w);
  let x_43 : vec4<f32> = u_xlat0;
  let x_50 : vec3<f32> = ((vec3<f32>(x_43.x, x_43.y, x_43.z) * vec3<f32>(2.0f, 2.0f, 2.0f)) + vec3<f32>(-1.0f, -1.0f, -1.0f));
  let x_51 : vec4<f32> = u_xlat0;
  u_xlat0 = vec4<f32>(x_50.x, x_50.y, x_50.z, x_51.w);
  let x_54 : vec4<f32> = u_xlat0;
  let x_67 : vec4<f32> = x_61.unity_CameraInvProjection[1i];
  u_xlat1 = (vec4<f32>(x_54.y, x_54.y, x_54.y, x_54.y) * x_67);
  let x_70 : vec4<f32> = x_61.unity_CameraInvProjection[0i];
  let x_71 : vec4<f32> = u_xlat0;
  let x_74 : vec4<f32> = u_xlat1;
  u_xlat1 = ((x_70 * vec4<f32>(x_71.x, x_71.x, x_71.x, x_71.x)) + x_74);
  let x_78 : vec4<f32> = x_61.unity_CameraInvProjection[2i];
  let x_79 : vec4<f32> = u_xlat0;
  let x_82 : vec4<f32> = u_xlat1;
  u_xlat0 = ((x_78 * vec4<f32>(x_79.z, x_79.z, x_79.z, x_79.z)) + x_82);
  let x_84 : vec4<f32> = u_xlat0;
  let x_87 : vec4<f32> = x_61.unity_CameraInvProjection[3i];
  u_xlat0 = (x_84 + x_87);
  let x_89 : vec4<f32> = u_xlat0;
  let x_91 : vec4<f32> = u_xlat0;
  let x_93 : vec3<f32> = (vec3<f32>(x_89.x, x_89.y, x_89.z) / vec3<f32>(x_91.w, x_91.w, x_91.w));
  let x_94 : vec4<f32> = u_xlat0;
  u_xlat0 = vec4<f32>(x_93.x, x_93.y, x_93.z, x_94.w);
  let x_96 : vec4<f32> = u_xlat0;
  let x_99 : vec4<f32> = x_61.unity_CameraToWorld[1i];
  u_xlat1 = (vec4<f32>(x_96.y, x_96.y, x_96.y, x_96.y) * x_99);
  let x_102 : vec4<f32> = x_61.unity_CameraToWorld[0i];
  let x_103 : vec4<f32> = u_xlat0;
  let x_106 : vec4<f32> = u_xlat1;
  u_xlat1 = ((x_102 * vec4<f32>(x_103.x, x_103.x, x_103.x, x_103.x)) + x_106);
  let x_109 : vec4<f32> = x_61.unity_CameraToWorld[2i];
  let x_110 : vec4<f32> = u_xlat0;
  let x_114 : vec4<f32> = u_xlat1;
  u_xlat0 = ((x_109 * -(vec4<f32>(x_110.z, x_110.z, x_110.z, x_110.z))) + x_114);
  let x_116 : vec4<f32> = u_xlat0;
  let x_118 : vec4<f32> = x_61.unity_CameraToWorld[3i];
  u_xlat0 = (x_116 + x_118);
  let x_120 : vec4<f32> = u_xlat0;
  let x_123 : vec4<f32> = x_61.unity_WorldToShadow[0i][1i];
  let x_125 : vec3<f32> = (vec3<f32>(x_120.y, x_120.y, x_120.y) * vec3<f32>(x_123.x, x_123.y, x_123.z));
  let x_126 : vec4<f32> = u_xlat1;
  u_xlat1 = vec4<f32>(x_125.x, x_125.y, x_125.z, x_126.w);
  let x_129 : vec4<f32> = x_61.unity_WorldToShadow[0i][0i];
  let x_131 : vec4<f32> = u_xlat0;
  let x_134 : vec4<f32> = u_xlat1;
  let x_136 : vec3<f32> = ((vec3<f32>(x_129.x, x_129.y, x_129.z) * vec3<f32>(x_131.x, x_131.x, x_131.x)) + vec3<f32>(x_134.x, x_134.y, x_134.z));
  let x_137 : vec4<f32> = u_xlat1;
  u_xlat1 = vec4<f32>(x_136.x, x_136.y, x_136.z, x_137.w);
  let x_140 : vec4<f32> = x_61.unity_WorldToShadow[0i][2i];
  let x_142 : vec4<f32> = u_xlat0;
  let x_145 : vec4<f32> = u_xlat1;
  let x_147 : vec3<f32> = ((vec3<f32>(x_140.x, x_140.y, x_140.z) * vec3<f32>(x_142.z, x_142.z, x_142.z)) + vec3<f32>(x_145.x, x_145.y, x_145.z));
  let x_148 : vec4<f32> = u_xlat0;
  u_xlat0 = vec4<f32>(x_147.x, x_147.y, x_147.z, x_148.w);
  let x_151 : vec4<f32> = x_61.unity_WorldToShadow[0i][3i];
  let x_153 : vec4<f32> = u_xlat0;
  let x_156 : vec4<f32> = u_xlat0;
  let x_158 : vec3<f32> = ((vec3<f32>(x_151.x, x_151.y, x_151.z) * vec3<f32>(x_153.w, x_153.w, x_153.w)) + vec3<f32>(x_156.x, x_156.y, x_156.z));
  let x_159 : vec4<f32> = u_xlat0;
  u_xlat0 = vec4<f32>(x_158.x, x_158.y, x_158.z, x_159.w);
  let x_161 : vec4<f32> = u_xlat0;
  let x_165 : vec4<f32> = x_61.x_ShadowMapTexture_TexelSize;
  let x_170 : vec2<f32> = ((vec2<f32>(x_161.x, x_161.y) * vec2<f32>(x_165.z, x_165.w)) + vec2<f32>(0.5f, 0.5f));
  let x_171 : vec4<f32> = u_xlat1;
  u_xlat1 = vec4<f32>(x_170.x, x_170.y, x_171.z, x_171.w);
  let x_173 : vec4<f32> = u_xlat1;
  let x_175 : vec2<f32> = floor(vec2<f32>(x_173.x, x_173.y));
  let x_176 : vec4<f32> = u_xlat1;
  u_xlat1 = vec4<f32>(x_175.x, x_175.y, x_176.z, x_176.w);
  let x_178 : vec4<f32> = u_xlat0;
  let x_181 : vec4<f32> = x_61.x_ShadowMapTexture_TexelSize;
  let x_184 : vec4<f32> = u_xlat1;
  let x_187 : vec2<f32> = ((vec2<f32>(x_178.x, x_178.y) * vec2<f32>(x_181.z, x_181.w)) + -(vec2<f32>(x_184.x, x_184.y)));
  let x_188 : vec4<f32> = u_xlat0;
  u_xlat0 = vec4<f32>(x_187.x, x_187.y, x_188.z, x_188.w);
  let x_192 : vec4<f32> = u_xlat0;
  u_xlat17 = (-(vec2<f32>(x_192.x, x_192.y)) + vec2<f32>(1.0f, 1.0f));
  let x_198 : vec4<f32> = u_xlat0;
  let x_202 : vec2<f32> = min(vec2<f32>(x_198.x, x_198.y), vec2<f32>(0.0f, 0.0f));
  let x_203 : vec4<f32> = u_xlat2;
  u_xlat2 = vec4<f32>(x_202.x, x_202.y, x_203.z, x_203.w);
  let x_205 : vec4<f32> = u_xlat2;
  let x_208 : vec4<f32> = u_xlat2;
  let x_211 : vec2<f32> = u_xlat17;
  u_xlat17 = ((-(vec2<f32>(x_205.x, x_205.y)) * vec2<f32>(x_208.x, x_208.y)) + x_211);
  let x_213 : vec2<f32> = u_xlat17;
  u_xlat17 = (x_213 + vec2<f32>(2.0f, 2.0f));
  let x_216 : vec2<f32> = u_xlat17;
  let x_219 : vec2<f32> = (x_216 * vec2<f32>(0.081632003f, 0.081632003f));
  let x_220 : vec4<f32> = u_xlat2;
  u_xlat2 = vec4<f32>(x_219.x, x_219.y, x_220.z, x_220.w);
  let x_224 : f32 = u_xlat2.x;
  u_xlat3.y = x_224;
  let x_227 : vec4<f32> = u_xlat0;
  u_xlat17 = max(vec2<f32>(x_227.x, x_227.y), vec2<f32>(0.0f, 0.0f));
  let x_231 : vec4<f32> = u_xlat0;
  u_xlat4 = (vec4<f32>(x_231.x, x_231.x, x_231.y, x_231.y) + vec4<f32>(0.5f, 1.0f, 0.5f, 1.0f));
  let x_235 : vec2<f32> = u_xlat17;
  let x_237 : vec2<f32> = u_xlat17;
  let x_239 : vec4<f32> = u_xlat4;
  u_xlat17 = ((-(x_235) * x_237) + vec2<f32>(x_239.y, x_239.w));
  let x_242 : vec4<f32> = u_xlat4;
  let x_244 : vec4<f32> = u_xlat4;
  u_xlat4 = (vec4<f32>(x_242.x, x_242.x, x_242.z, x_242.z) * vec4<f32>(x_244.x, x_244.x, x_244.z, x_244.z));
  let x_247 : vec2<f32> = u_xlat17;
  u_xlat17 = (x_247 + vec2<f32>(2.0f, 2.0f));
  let x_251 : f32 = u_xlat17.x;
  u_xlat5.z = (x_251 * 0.081632003f);
  let x_256 : f32 = u_xlat17.y;
  u_xlat6.z = (x_256 * 0.081632003f);
  let x_259 : vec4<f32> = u_xlat4;
  let x_262 : vec4<f32> = u_xlat0;
  u_xlat17 = ((vec2<f32>(x_259.x, x_259.z) * vec2<f32>(0.5f, 0.5f)) + -(vec2<f32>(x_262.x, x_262.y)));
  let x_266 : vec4<f32> = u_xlat4;
  let x_270 : vec2<f32> = (vec2<f32>(x_266.w, x_266.y) * vec2<f32>(0.040816002f, 0.040816002f));
  let x_271 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_271.x, x_271.y, x_270.x, x_270.y);
  let x_273 : vec2<f32> = u_xlat17;
  let x_275 : vec2<f32> = (vec2<f32>(x_273.y, x_273.x) * vec2<f32>(0.081632003f, 0.081632003f));
  let x_276 : vec4<f32> = u_xlat6;
  u_xlat6 = vec4<f32>(x_275.x, x_275.y, x_276.z, x_276.w);
  let x_279 : f32 = u_xlat6.y;
  u_xlat5.x = x_279;
  let x_282 : f32 = u_xlat3.z;
  u_xlat2.w = x_282;
  let x_285 : vec4<f32> = u_xlat0;
  let x_292 : vec2<f32> = ((vec2<f32>(x_285.x, x_285.x) * vec2<f32>(-0.081632003f, 0.081632003f)) + vec2<f32>(0.163264006f, 0.081632003f));
  let x_293 : vec4<f32> = u_xlat5;
  u_xlat5 = vec4<f32>(x_293.x, x_292.x, x_293.z, x_292.y);
  let x_295 : vec4<f32> = u_xlat0;
  let x_299 : vec2<f32> = ((vec2<f32>(x_295.x, x_295.x) * vec2<f32>(-0.081632003f, 0.081632003f)) + vec2<f32>(0.081632003f, 0.163264006f));
  let x_300 : vec4<f32> = u_xlat3;
  u_xlat3 = vec4<f32>(x_299.x, x_300.y, x_299.y, x_300.w);
  let x_302 : vec4<f32> = u_xlat3;
  let x_303 : vec4<f32> = u_xlat5;
  u_xlat4 = (x_302 + x_303);
  let x_305 : vec4<f32> = u_xlat3;
  let x_306 : vec4<f32> = u_xlat4;
  u_xlat3 = (x_305 / x_306);
  let x_308 : vec4<f32> = u_xlat3;
  u_xlat3 = (x_308 + vec4<f32>(-3.5f, -1.5f, 0.5f, 2.5f));
  let x_314 : vec4<f32> = u_xlat3;
  let x_317 : vec4<f32> = x_61.x_ShadowMapTexture_TexelSize;
  u_xlat3 = (vec4<f32>(x_314.w, x_314.x, x_314.y, x_314.z) * vec4<f32>(x_317.x, x_317.x, x_317.x, x_317.x));
  let x_320 : vec4<f32> = u_xlat3;
  let x_321 : vec3<f32> = vec3<f32>(x_320.y, x_320.z, x_320.w);
  let x_322 : vec4<f32> = u_xlat5;
  u_xlat5 = vec4<f32>(x_321.x, x_322.y, x_321.y, x_321.z);
  let x_324 : vec4<f32> = u_xlat0;
  let x_327 : vec2<f32> = ((vec2<f32>(x_324.y, x_324.y) * vec2<f32>(-0.081632003f, 0.081632003f)) + vec2<f32>(0.163264006f, 0.081632003f));
  let x_328 : vec4<f32> = u_xlat6;
  u_xlat6 = vec4<f32>(x_328.x, x_327.x, x_328.z, x_327.y);
  let x_330 : vec4<f32> = u_xlat0;
  let x_333 : vec2<f32> = ((vec2<f32>(x_330.y, x_330.y) * vec2<f32>(-0.081632003f, 0.081632003f)) + vec2<f32>(0.081632003f, 0.163264006f));
  let x_334 : vec4<f32> = u_xlat2;
  u_xlat2 = vec4<f32>(x_333.x, x_334.y, x_333.y, x_334.w);
  let x_336 : vec4<f32> = u_xlat2;
  let x_337 : vec4<f32> = u_xlat6;
  u_xlat6 = (x_336 + x_337);
  let x_339 : vec4<f32> = u_xlat2;
  let x_340 : vec4<f32> = u_xlat6;
  u_xlat2 = (x_339 / x_340);
  let x_342 : vec4<f32> = u_xlat2;
  u_xlat2 = (x_342 + vec4<f32>(-3.5f, -1.5f, 0.5f, 2.5f));
  let x_344 : vec4<f32> = u_xlat2;
  let x_347 : vec4<f32> = x_61.x_ShadowMapTexture_TexelSize;
  u_xlat2 = (vec4<f32>(x_344.x, x_344.w, x_344.y, x_344.z) * vec4<f32>(x_347.y, x_347.y, x_347.y, x_347.y));
  let x_351 : f32 = u_xlat2.x;
  u_xlat5.y = x_351;
  let x_354 : vec4<f32> = u_xlat1;
  let x_357 : vec4<f32> = x_61.x_ShadowMapTexture_TexelSize;
  let x_360 : vec4<f32> = u_xlat5;
  u_xlat7 = ((vec4<f32>(x_354.x, x_354.y, x_354.x, x_354.y) * vec4<f32>(x_357.x, x_357.y, x_357.x, x_357.y)) + vec4<f32>(x_360.x, x_360.y, x_360.z, x_360.y));
  let x_365 : vec4<f32> = u_xlat7;
  let x_366 : vec2<f32> = vec2<f32>(x_365.z, x_365.w);
  let x_368 : f32 = u_xlat0.z;
  txVec0 = vec3<f32>(x_366.x, x_366.y, x_368);
  let x_380 : vec3<f32> = txVec0;
  let x_382 : f32 = textureSampleCompareLevel(x_ShadowMapTexture, sampler_ShadowMapTexture, x_380.xy, x_380.z);
  u_xlat0.x = x_382;
  let x_385 : vec4<f32> = u_xlat7;
  let x_386 : vec2<f32> = vec2<f32>(x_385.x, x_385.y);
  let x_388 : f32 = u_xlat0.z;
  txVec1 = vec3<f32>(x_386.x, x_386.y, x_388);
  let x_396 : vec3<f32> = txVec1;
  let x_398 : f32 = textureSampleCompareLevel(x_ShadowMapTexture, sampler_ShadowMapTexture, x_396.xy, x_396.z);
  u_xlat8.x = x_398;
  let x_400 : vec4<f32> = u_xlat4;
  let x_401 : vec4<f32> = u_xlat6;
  u_xlat7 = (x_400 * vec4<f32>(x_401.x, x_401.x, x_401.x, x_401.x));
  let x_405 : f32 = u_xlat0.x;
  let x_407 : f32 = u_xlat7.y;
  u_xlat0.x = (x_405 * x_407);
  let x_411 : f32 = u_xlat7.x;
  let x_413 : f32 = u_xlat8.x;
  let x_416 : f32 = u_xlat0.x;
  u_xlat0.x = ((x_411 * x_413) + x_416);
  let x_419 : vec4<f32> = u_xlat1;
  let x_422 : vec4<f32> = x_61.x_ShadowMapTexture_TexelSize;
  let x_425 : vec4<f32> = u_xlat5;
  let x_427 : vec2<f32> = ((vec2<f32>(x_419.x, x_419.y) * vec2<f32>(x_422.x, x_422.y)) + vec2<f32>(x_425.w, x_425.y));
  let x_428 : vec3<f32> = u_xlat8;
  u_xlat8 = vec3<f32>(x_427.x, x_428.y, x_427.y);
  let x_431 : f32 = u_xlat5.y;
  u_xlat3.y = x_431;
  let x_433 : vec4<f32> = u_xlat1;
  let x_436 : vec4<f32> = x_61.x_ShadowMapTexture_TexelSize;
  let x_439 : vec4<f32> = u_xlat3;
  u_xlat17 = ((vec2<f32>(x_433.x, x_433.y) * vec2<f32>(x_436.x, x_436.y)) + vec2<f32>(x_439.x, x_439.y));
  let x_443 : vec2<f32> = u_xlat17;
  let x_445 : f32 = u_xlat0.z;
  txVec2 = vec3<f32>(x_443.x, x_443.y, x_445);
  let x_452 : vec3<f32> = txVec2;
  let x_454 : f32 = textureSampleCompareLevel(x_ShadowMapTexture, sampler_ShadowMapTexture, x_452.xy, x_452.z);
  u_xlat17.x = x_454;
  let x_457 : vec3<f32> = u_xlat8;
  let x_458 : vec2<f32> = vec2<f32>(x_457.x, x_457.z);
  let x_460 : f32 = u_xlat0.z;
  txVec3 = vec3<f32>(x_458.x, x_458.y, x_460);
  let x_467 : vec3<f32> = txVec3;
  let x_469 : f32 = textureSampleCompareLevel(x_ShadowMapTexture, sampler_ShadowMapTexture, x_467.xy, x_467.z);
  u_xlat8.x = x_469;
  let x_472 : f32 = u_xlat7.z;
  let x_474 : f32 = u_xlat8.x;
  let x_477 : f32 = u_xlat0.x;
  u_xlat0.x = ((x_472 * x_474) + x_477);
  let x_481 : f32 = u_xlat7.w;
  let x_483 : f32 = u_xlat17.x;
  let x_486 : f32 = u_xlat0.x;
  u_xlat0.x = ((x_481 * x_483) + x_486);
  let x_490 : f32 = u_xlat2.z;
  u_xlat5.y = x_490;
  let x_492 : vec4<f32> = u_xlat1;
  let x_495 : vec4<f32> = x_61.x_ShadowMapTexture_TexelSize;
  let x_498 : vec4<f32> = u_xlat5;
  u_xlat7 = ((vec4<f32>(x_492.x, x_492.y, x_492.x, x_492.y) * vec4<f32>(x_495.x, x_495.y, x_495.x, x_495.y)) + vec4<f32>(x_498.x, x_498.y, x_498.z, x_498.y));
  let x_502 : vec4<f32> = u_xlat7;
  let x_503 : vec2<f32> = vec2<f32>(x_502.x, x_502.y);
  let x_505 : f32 = u_xlat0.z;
  txVec4 = vec3<f32>(x_503.x, x_503.y, x_505);
  let x_512 : vec3<f32> = txVec4;
  let x_514 : f32 = textureSampleCompareLevel(x_ShadowMapTexture, sampler_ShadowMapTexture, x_512.xy, x_512.z);
  u_xlat8.x = x_514;
  let x_517 : vec4<f32> = u_xlat7;
  let x_518 : vec2<f32> = vec2<f32>(x_517.z, x_517.w);
  let x_520 : f32 = u_xlat0.z;
  txVec5 = vec3<f32>(x_518.x, x_518.y, x_520);
  let x_528 : vec3<f32> = txVec5;
  let x_530 : f32 = textureSampleCompareLevel(x_ShadowMapTexture, sampler_ShadowMapTexture, x_528.xy, x_528.z);
  u_xlat24 = x_530;
  let x_531 : vec4<f32> = u_xlat4;
  let x_532 : vec4<f32> = u_xlat6;
  u_xlat7 = (x_531 * vec4<f32>(x_532.y, x_532.y, x_532.y, x_532.y));
  let x_536 : f32 = u_xlat7.x;
  let x_538 : f32 = u_xlat8.x;
  let x_541 : f32 = u_xlat0.x;
  u_xlat0.x = ((x_536 * x_538) + x_541);
  let x_545 : f32 = u_xlat7.y;
  let x_546 : f32 = u_xlat24;
  let x_549 : f32 = u_xlat0.x;
  u_xlat0.x = ((x_545 * x_546) + x_549);
  let x_552 : vec4<f32> = u_xlat1;
  let x_555 : vec4<f32> = x_61.x_ShadowMapTexture_TexelSize;
  let x_558 : vec4<f32> = u_xlat5;
  let x_560 : vec2<f32> = ((vec2<f32>(x_552.x, x_552.y) * vec2<f32>(x_555.x, x_555.y)) + vec2<f32>(x_558.w, x_558.y));
  let x_561 : vec3<f32> = u_xlat8;
  u_xlat8 = vec3<f32>(x_560.x, x_561.y, x_560.y);
  let x_564 : f32 = u_xlat5.y;
  u_xlat3.z = x_564;
  let x_566 : vec4<f32> = u_xlat1;
  let x_569 : vec4<f32> = x_61.x_ShadowMapTexture_TexelSize;
  let x_572 : vec4<f32> = u_xlat3;
  u_xlat17 = ((vec2<f32>(x_566.x, x_566.y) * vec2<f32>(x_569.x, x_569.y)) + vec2<f32>(x_572.x, x_572.z));
  let x_576 : vec2<f32> = u_xlat17;
  let x_578 : f32 = u_xlat0.z;
  txVec6 = vec3<f32>(x_576.x, x_576.y, x_578);
  let x_585 : vec3<f32> = txVec6;
  let x_587 : f32 = textureSampleCompareLevel(x_ShadowMapTexture, sampler_ShadowMapTexture, x_585.xy, x_585.z);
  u_xlat17.x = x_587;
  let x_590 : vec3<f32> = u_xlat8;
  let x_591 : vec2<f32> = vec2<f32>(x_590.x, x_590.z);
  let x_593 : f32 = u_xlat0.z;
  txVec7 = vec3<f32>(x_591.x, x_591.y, x_593);
  let x_600 : vec3<f32> = txVec7;
  let x_602 : f32 = textureSampleCompareLevel(x_ShadowMapTexture, sampler_ShadowMapTexture, x_600.xy, x_600.z);
  u_xlat8.x = x_602;
  let x_605 : f32 = u_xlat7.z;
  let x_607 : f32 = u_xlat8.x;
  let x_610 : f32 = u_xlat0.x;
  u_xlat0.x = ((x_605 * x_607) + x_610);
  let x_614 : f32 = u_xlat7.w;
  let x_616 : f32 = u_xlat17.x;
  let x_619 : f32 = u_xlat0.x;
  u_xlat0.x = ((x_614 * x_616) + x_619);
  let x_623 : f32 = u_xlat2.w;
  u_xlat5.y = x_623;
  let x_625 : vec4<f32> = u_xlat1;
  let x_628 : vec4<f32> = x_61.x_ShadowMapTexture_TexelSize;
  let x_631 : vec4<f32> = u_xlat5;
  u_xlat7 = ((vec4<f32>(x_625.x, x_625.y, x_625.x, x_625.y) * vec4<f32>(x_628.x, x_628.y, x_628.x, x_628.y)) + vec4<f32>(x_631.x, x_631.y, x_631.z, x_631.y));
  let x_635 : vec4<f32> = u_xlat7;
  let x_636 : vec2<f32> = vec2<f32>(x_635.x, x_635.y);
  let x_638 : f32 = u_xlat0.z;
  txVec8 = vec3<f32>(x_636.x, x_636.y, x_638);
  let x_645 : vec3<f32> = txVec8;
  let x_647 : f32 = textureSampleCompareLevel(x_ShadowMapTexture, sampler_ShadowMapTexture, x_645.xy, x_645.z);
  u_xlat8.x = x_647;
  let x_650 : vec4<f32> = u_xlat7;
  let x_651 : vec2<f32> = vec2<f32>(x_650.z, x_650.w);
  let x_653 : f32 = u_xlat0.z;
  txVec9 = vec3<f32>(x_651.x, x_651.y, x_653);
  let x_660 : vec3<f32> = txVec9;
  let x_662 : f32 = textureSampleCompareLevel(x_ShadowMapTexture, sampler_ShadowMapTexture, x_660.xy, x_660.z);
  u_xlat24 = x_662;
  let x_663 : vec4<f32> = u_xlat4;
  let x_664 : vec4<f32> = u_xlat6;
  u_xlat7 = (x_663 * vec4<f32>(x_664.z, x_664.z, x_664.z, x_664.z));
  let x_667 : vec4<f32> = u_xlat4;
  let x_668 : vec4<f32> = u_xlat6;
  u_xlat4 = (x_667 * vec4<f32>(x_668.w, x_668.w, x_668.w, x_668.w));
  let x_672 : f32 = u_xlat7.x;
  let x_674 : f32 = u_xlat8.x;
  let x_677 : f32 = u_xlat0.x;
  u_xlat0.x = ((x_672 * x_674) + x_677);
  let x_681 : f32 = u_xlat7.y;
  let x_682 : f32 = u_xlat24;
  let x_685 : f32 = u_xlat0.x;
  u_xlat0.x = ((x_681 * x_682) + x_685);
  let x_688 : vec4<f32> = u_xlat1;
  let x_691 : vec4<f32> = x_61.x_ShadowMapTexture_TexelSize;
  let x_694 : vec4<f32> = u_xlat5;
  let x_696 : vec2<f32> = ((vec2<f32>(x_688.x, x_688.y) * vec2<f32>(x_691.x, x_691.y)) + vec2<f32>(x_694.w, x_694.y));
  let x_697 : vec3<f32> = u_xlat8;
  u_xlat8 = vec3<f32>(x_696.x, x_697.y, x_696.y);
  let x_699 : vec4<f32> = u_xlat5;
  let x_700 : vec3<f32> = vec3<f32>(x_699.x, x_699.z, x_699.w);
  let x_701 : vec4<f32> = u_xlat2;
  u_xlat2 = vec4<f32>(x_700.x, x_701.y, x_700.y, x_700.z);
  let x_704 : f32 = u_xlat5.y;
  u_xlat3.w = x_704;
  let x_706 : vec4<f32> = u_xlat1;
  let x_709 : vec4<f32> = x_61.x_ShadowMapTexture_TexelSize;
  let x_712 : vec4<f32> = u_xlat3;
  u_xlat17 = ((vec2<f32>(x_706.x, x_706.y) * vec2<f32>(x_709.x, x_709.y)) + vec2<f32>(x_712.x, x_712.w));
  let x_716 : vec2<f32> = u_xlat17;
  let x_718 : f32 = u_xlat0.z;
  txVec10 = vec3<f32>(x_716.x, x_716.y, x_718);
  let x_725 : vec3<f32> = txVec10;
  let x_727 : f32 = textureSampleCompareLevel(x_ShadowMapTexture, sampler_ShadowMapTexture, x_725.xy, x_725.z);
  u_xlat17.x = x_727;
  let x_730 : vec3<f32> = u_xlat8;
  let x_731 : vec2<f32> = vec2<f32>(x_730.x, x_730.z);
  let x_733 : f32 = u_xlat0.z;
  txVec11 = vec3<f32>(x_731.x, x_731.y, x_733);
  let x_740 : vec3<f32> = txVec11;
  let x_742 : f32 = textureSampleCompareLevel(x_ShadowMapTexture, sampler_ShadowMapTexture, x_740.xy, x_740.z);
  u_xlat8.x = x_742;
  let x_745 : f32 = u_xlat7.z;
  let x_747 : f32 = u_xlat8.x;
  let x_750 : f32 = u_xlat0.x;
  u_xlat0.x = ((x_745 * x_747) + x_750);
  let x_754 : f32 = u_xlat7.w;
  let x_756 : f32 = u_xlat17.x;
  let x_759 : f32 = u_xlat0.x;
  u_xlat0.x = ((x_754 * x_756) + x_759);
  let x_762 : vec4<f32> = u_xlat1;
  let x_765 : vec4<f32> = x_61.x_ShadowMapTexture_TexelSize;
  let x_768 : vec4<f32> = u_xlat2;
  u_xlat5 = ((vec4<f32>(x_762.x, x_762.y, x_762.x, x_762.y) * vec4<f32>(x_765.x, x_765.y, x_765.x, x_765.y)) + vec4<f32>(x_768.x, x_768.y, x_768.z, x_768.y));
  let x_771 : vec4<f32> = u_xlat1;
  let x_774 : vec4<f32> = x_61.x_ShadowMapTexture_TexelSize;
  let x_777 : vec4<f32> = u_xlat2;
  let x_779 : vec2<f32> = ((vec2<f32>(x_771.x, x_771.y) * vec2<f32>(x_774.x, x_774.y)) + vec2<f32>(x_777.w, x_777.y));
  let x_780 : vec3<f32> = u_xlat8;
  u_xlat8 = vec3<f32>(x_779.x, x_780.y, x_779.y);
  let x_783 : f32 = u_xlat2.y;
  u_xlat3.y = x_783;
  let x_785 : vec4<f32> = u_xlat1;
  let x_788 : vec4<f32> = x_61.x_ShadowMapTexture_TexelSize;
  let x_791 : vec4<f32> = u_xlat3;
  let x_793 : vec2<f32> = ((vec2<f32>(x_785.x, x_785.y) * vec2<f32>(x_788.x, x_788.y)) + vec2<f32>(x_791.x, x_791.y));
  let x_794 : vec4<f32> = u_xlat1;
  u_xlat1 = vec4<f32>(x_793.x, x_793.y, x_794.z, x_794.w);
  let x_797 : vec4<f32> = u_xlat1;
  let x_798 : vec2<f32> = vec2<f32>(x_797.x, x_797.y);
  let x_800 : f32 = u_xlat0.z;
  txVec12 = vec3<f32>(x_798.x, x_798.y, x_800);
  let x_807 : vec3<f32> = txVec12;
  let x_809 : f32 = textureSampleCompareLevel(x_ShadowMapTexture, sampler_ShadowMapTexture, x_807.xy, x_807.z);
  u_xlat1.x = x_809;
  let x_812 : vec3<f32> = u_xlat8;
  let x_813 : vec2<f32> = vec2<f32>(x_812.x, x_812.z);
  let x_815 : f32 = u_xlat0.z;
  txVec13 = vec3<f32>(x_813.x, x_813.y, x_815);
  let x_822 : vec3<f32> = txVec13;
  let x_824 : f32 = textureSampleCompareLevel(x_ShadowMapTexture, sampler_ShadowMapTexture, x_822.xy, x_822.z);
  u_xlat8.x = x_824;
  let x_827 : vec4<f32> = u_xlat5;
  let x_828 : vec2<f32> = vec2<f32>(x_827.x, x_827.y);
  let x_830 : f32 = u_xlat0.z;
  txVec14 = vec3<f32>(x_828.x, x_828.y, x_830);
  let x_837 : vec3<f32> = txVec14;
  let x_839 : f32 = textureSampleCompareLevel(x_ShadowMapTexture, sampler_ShadowMapTexture, x_837.xy, x_837.z);
  u_xlat24 = x_839;
  let x_841 : vec4<f32> = u_xlat5;
  let x_842 : vec2<f32> = vec2<f32>(x_841.z, x_841.w);
  let x_844 : f32 = u_xlat0.z;
  txVec15 = vec3<f32>(x_842.x, x_842.y, x_844);
  let x_852 : vec3<f32> = txVec15;
  let x_854 : f32 = textureSampleCompareLevel(x_ShadowMapTexture, sampler_ShadowMapTexture, x_852.xy, x_852.z);
  u_xlat16 = x_854;
  let x_856 : f32 = u_xlat4.x;
  let x_857 : f32 = u_xlat24;
  let x_860 : f32 = u_xlat0.x;
  u_xlat0.x = ((x_856 * x_857) + x_860);
  let x_864 : f32 = u_xlat4.y;
  let x_865 : f32 = u_xlat16;
  let x_868 : f32 = u_xlat0.x;
  u_xlat0.x = ((x_864 * x_865) + x_868);
  let x_872 : f32 = u_xlat4.z;
  let x_874 : f32 = u_xlat8.x;
  let x_877 : f32 = u_xlat0.x;
  u_xlat0.x = ((x_872 * x_874) + x_877);
  let x_881 : f32 = u_xlat4.w;
  let x_883 : f32 = u_xlat1.x;
  let x_886 : f32 = u_xlat0.x;
  u_xlat0.x = ((x_881 * x_883) + x_886);
  let x_891 : f32 = x_61.x_LightShadowData.x;
  u_xlat8.x = (-(x_891) + 1.0f);
  let x_897 : vec4<f32> = u_xlat0;
  let x_899 : vec3<f32> = u_xlat8;
  let x_903 : vec4<f32> = x_61.x_LightShadowData;
  SV_Target0 = ((vec4<f32>(x_897.x, x_897.x, x_897.x, x_897.x) * vec4<f32>(x_899.x, x_899.x, x_899.x, x_899.x)) + vec4<f32>(x_903.x, x_903.x, x_903.x, x_903.x));
  return;
}

struct main_out {
  @location(0)
  SV_Target0_1 : vec4<f32>,
}

@fragment
fn main(@location(0) vs_TEXCOORD0_param : vec4<f32>, @builtin(position) gl_FragCoord_param : vec4<f32>) -> main_out {
  vs_TEXCOORD0 = vs_TEXCOORD0_param;
  gl_FragCoord = gl_FragCoord_param;
  main_1();
  return main_out(SV_Target0);
}

