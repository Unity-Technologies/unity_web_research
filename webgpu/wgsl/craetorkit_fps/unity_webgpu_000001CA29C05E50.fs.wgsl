type Arr = array<mat4x4<f32>, 4u>;

struct PGlobals {
  x_WorldSpaceCameraPos : vec3<f32>,
  @size(4)
  padding : u32,
  unity_OcclusionMaskSelector : vec4<f32>,
  unity_WorldToShadow : Arr,
  x_LightShadowData : vec4<f32>,
  unity_ShadowFadeCenterAndType : vec4<f32>,
  unity_MatrixV : mat4x4<f32>,
  unity_ProbeVolumeParams : vec4<f32>,
  unity_ProbeVolumeWorldToObject : mat4x4<f32>,
  unity_ProbeVolumeSizeInv : vec3<f32>,
  @size(4)
  padding_1 : u32,
  unity_ProbeVolumeMin : vec3<f32>,
  @size(4)
  padding_2 : u32,
  x_LightColor0 : vec4<f32>,
  x_ShadowMapTexture_TexelSize : vec4<f32>,
  x_Color : vec4<f32>,
  x_Metallic : f32,
  x_Glossiness : f32,
  @size(8)
  padding_3 : u32,
  unity_WorldToLight : mat4x4<f32>,
}

@group(0) @binding(0) var x_MainTex : texture_2d<f32>;

@group(0) @binding(7) var sampler_MainTex : sampler;

var<private> vs_TEXCOORD0 : vec4<f32>;

@group(1) @binding(0) var<uniform> x_35 : PGlobals;

var<private> vs_TEXCOORD4 : vec4<f32>;

var<private> vs_TEXCOORD1 : vec4<f32>;

var<private> SV_Target0 : vec4<f32>;

var<private> vs_TEXCOORD5 : vec3<f32>;

@group(0) @binding(3) var unity_ProbeVolumeSH : texture_3d<f32>;

@group(0) @binding(5) var samplerunity_ProbeVolumeSH : sampler;

@group(0) @binding(4) var x_ShadowMapTexture : texture_depth_2d;

@group(0) @binding(6) var sampler_ShadowMapTexture : sampler_comparison;

@group(0) @binding(1) var x_LightTexture0 : texture_2d<f32>;

@group(0) @binding(8) var sampler_LightTexture0 : sampler;

@group(0) @binding(2) var x_LightTextureB0 : texture_2d<f32>;

@group(0) @binding(9) var sampler_LightTextureB0 : sampler;

var<private> vs_TEXCOORD2 : vec4<f32>;

var<private> vs_TEXCOORD3 : vec4<f32>;

var<private> gl_FragCoord : vec4<f32>;

fn main_1() {
  var u_xlat0 : vec4<f32>;
  var u_xlat1 : vec4<f32>;
  var u_xlat33 : f32;
  var u_xlat2 : vec4<f32>;
  var u_xlat35 : f32;
  var u_xlat3 : vec3<f32>;
  var u_xlat4 : vec4<f32>;
  var u_xlat5 : vec4<f32>;
  var u_xlat6 : vec4<f32>;
  var u_xlat34 : f32;
  var u_xlatb34 : bool;
  var x_295 : vec3<f32>;
  var u_xlatb35 : bool;
  var u_xlat7 : vec4<f32>;
  var u_xlat8 : vec4<f32>;
  var u_xlat28 : vec2<f32>;
  var u_xlat9 : vec4<f32>;
  var u_xlat10 : vec4<f32>;
  var txVec0 : vec3<f32>;
  var txVec1 : vec3<f32>;
  var u_xlat36 : f32;
  var txVec2 : vec3<f32>;
  var txVec3 : vec3<f32>;
  var u_xlat13 : f32;
  var u_xlat24 : f32;
  var u_xlat14 : f32;
  var u_xlat25 : f32;
  var u_xlat_precise_vec4 : vec4<f32>;
  var u_xlat_precise_ivec4 : vec4<i32>;
  var u_xlat_precise_bvec4 : vec4<bool>;
  var u_xlat_precise_uvec4 : vec4<u32>;
  let x_23 : vec4<f32> = vs_TEXCOORD0;
  let x_25 : vec4<f32> = textureSample(x_MainTex, sampler_MainTex, vec2<f32>(x_23.x, x_23.y));
  u_xlat0 = x_25;
  let x_27 : vec4<f32> = u_xlat0;
  let x_40 : vec4<f32> = x_35.x_Color;
  u_xlat1 = (x_27 * x_40);
  let x_42 : vec4<f32> = u_xlat0;
  let x_45 : vec4<f32> = x_35.x_Color;
  let x_50 : vec3<f32> = ((vec3<f32>(x_42.x, x_42.y, x_42.z) * vec3<f32>(x_45.x, x_45.y, x_45.z)) + vec3<f32>(-0.039999999f, -0.039999999f, -0.039999999f));
  let x_51 : vec4<f32> = u_xlat0;
  u_xlat0 = vec4<f32>(x_50.x, x_50.y, x_50.z, x_51.w);
  let x_56 : f32 = x_35.x_Metallic;
  let x_58 : f32 = x_35.x_Metallic;
  let x_60 : f32 = x_35.x_Metallic;
  let x_61 : vec3<f32> = vec3<f32>(x_56, x_58, x_60);
  let x_66 : vec4<f32> = u_xlat0;
  let x_71 : vec3<f32> = ((vec3<f32>(x_61.x, x_61.y, x_61.z) * vec3<f32>(x_66.x, x_66.y, x_66.z)) + vec3<f32>(0.039999999f, 0.039999999f, 0.039999999f));
  let x_72 : vec4<f32> = u_xlat0;
  u_xlat0 = vec4<f32>(x_71.x, x_71.y, x_71.z, x_72.w);
  let x_77 : f32 = x_35.x_Metallic;
  u_xlat33 = ((-(x_77) * 0.959999979f) + 0.959999979f);
  let x_82 : f32 = u_xlat33;
  let x_84 : vec4<f32> = u_xlat1;
  let x_86 : vec3<f32> = (vec3<f32>(x_82, x_82, x_82) * vec3<f32>(x_84.x, x_84.y, x_84.z));
  let x_87 : vec4<f32> = u_xlat1;
  u_xlat1 = vec4<f32>(x_86.x, x_86.y, x_86.z, x_87.w);
  let x_91 : vec4<f32> = vs_TEXCOORD4;
  let x_93 : vec4<f32> = vs_TEXCOORD4;
  u_xlat2.x = dot(vec3<f32>(x_91.x, x_91.y, x_91.z), vec3<f32>(x_93.x, x_93.y, x_93.z));
  let x_99 : f32 = u_xlat2.x;
  u_xlat2.x = inverseSqrt(x_99);
  let x_102 : vec4<f32> = u_xlat2;
  let x_104 : vec4<f32> = vs_TEXCOORD4;
  let x_106 : vec3<f32> = (vec3<f32>(x_102.x, x_102.x, x_102.x) * vec3<f32>(x_104.x, x_104.y, x_104.z));
  let x_107 : vec4<f32> = u_xlat2;
  u_xlat2 = vec4<f32>(x_106.x, x_106.y, x_106.z, x_107.w);
  let x_111 : vec4<f32> = vs_TEXCOORD1;
  let x_113 : vec4<f32> = vs_TEXCOORD1;
  u_xlat35 = dot(vec3<f32>(x_111.x, x_111.y, x_111.z), vec3<f32>(x_113.x, x_113.y, x_113.z));
  let x_116 : f32 = u_xlat35;
  u_xlat35 = inverseSqrt(x_116);
  let x_120 : f32 = u_xlat35;
  let x_122 : vec4<f32> = vs_TEXCOORD1;
  u_xlat3 = (vec3<f32>(x_120, x_120, x_120) * vec3<f32>(x_122.x, x_122.y, x_122.z));
  let x_125 : vec4<f32> = u_xlat1;
  let x_127 : vec4<f32> = u_xlat1;
  let x_129 : vec3<f32> = (vec3<f32>(x_125.w, x_125.w, x_125.w) * vec3<f32>(x_127.x, x_127.y, x_127.z));
  let x_130 : vec4<f32> = u_xlat1;
  u_xlat1 = vec4<f32>(x_129.x, x_129.y, x_129.z, x_130.w);
  let x_132 : f32 = u_xlat33;
  u_xlat35 = (-(x_132) + 1.0f);
  let x_140 : f32 = u_xlat1.w;
  let x_141 : f32 = u_xlat33;
  let x_143 : f32 = u_xlat35;
  SV_Target0.w = ((x_140 * x_141) + x_143);
  let x_150 : vec3<f32> = vs_TEXCOORD5;
  let x_155 : vec4<f32> = x_35.unity_WorldToLight[1i];
  u_xlat4 = (vec4<f32>(x_150.y, x_150.y, x_150.y, x_150.y) * x_155);
  let x_159 : vec4<f32> = x_35.unity_WorldToLight[0i];
  let x_160 : vec3<f32> = vs_TEXCOORD5;
  let x_163 : vec4<f32> = u_xlat4;
  u_xlat4 = ((x_159 * vec4<f32>(x_160.x, x_160.x, x_160.x, x_160.x)) + x_163);
  let x_167 : vec4<f32> = x_35.unity_WorldToLight[2i];
  let x_168 : vec3<f32> = vs_TEXCOORD5;
  let x_171 : vec4<f32> = u_xlat4;
  u_xlat4 = ((x_167 * vec4<f32>(x_168.z, x_168.z, x_168.z, x_168.z)) + x_171);
  let x_173 : vec4<f32> = u_xlat4;
  let x_176 : vec4<f32> = x_35.unity_WorldToLight[3i];
  u_xlat4 = (x_173 + x_176);
  let x_179 : vec3<f32> = vs_TEXCOORD5;
  let x_183 : vec3<f32> = x_35.x_WorldSpaceCameraPos;
  let x_184 : vec3<f32> = (-(x_179) + x_183);
  let x_185 : vec4<f32> = u_xlat5;
  u_xlat5 = vec4<f32>(x_184.x, x_184.y, x_184.z, x_185.w);
  let x_191 : f32 = x_35.unity_MatrixV[0i].z;
  u_xlat6.x = x_191;
  let x_194 : f32 = x_35.unity_MatrixV[1i].z;
  u_xlat6.y = x_194;
  let x_198 : f32 = x_35.unity_MatrixV[2i].z;
  u_xlat6.z = x_198;
  let x_200 : vec4<f32> = u_xlat5;
  let x_202 : vec4<f32> = u_xlat6;
  u_xlat33 = dot(vec3<f32>(x_200.x, x_200.y, x_200.z), vec3<f32>(x_202.x, x_202.y, x_202.z));
  let x_205 : vec3<f32> = vs_TEXCOORD5;
  let x_208 : vec4<f32> = x_35.unity_ShadowFadeCenterAndType;
  let x_211 : vec3<f32> = (x_205 + -(vec3<f32>(x_208.x, x_208.y, x_208.z)));
  let x_212 : vec4<f32> = u_xlat5;
  u_xlat5 = vec4<f32>(x_211.x, x_211.y, x_211.z, x_212.w);
  let x_215 : vec4<f32> = u_xlat5;
  let x_217 : vec4<f32> = u_xlat5;
  u_xlat34 = dot(vec3<f32>(x_215.x, x_215.y, x_215.z), vec3<f32>(x_217.x, x_217.y, x_217.z));
  let x_220 : f32 = u_xlat34;
  u_xlat34 = sqrt(x_220);
  let x_222 : f32 = u_xlat33;
  let x_224 : f32 = u_xlat34;
  u_xlat34 = (-(x_222) + x_224);
  let x_227 : f32 = x_35.unity_ShadowFadeCenterAndType.w;
  let x_228 : f32 = u_xlat34;
  let x_230 : f32 = u_xlat33;
  u_xlat33 = ((x_227 * x_228) + x_230);
  let x_232 : f32 = u_xlat33;
  let x_234 : f32 = x_35.x_LightShadowData.z;
  let x_237 : f32 = x_35.x_LightShadowData.w;
  u_xlat33 = ((x_232 * x_234) + x_237);
  let x_239 : f32 = u_xlat33;
  u_xlat33 = clamp(x_239, 0.0f, 1.0f);
  let x_247 : f32 = x_35.unity_ProbeVolumeParams.x;
  u_xlatb34 = (x_247 == 1.0f);
  let x_249 : bool = u_xlatb34;
  if (x_249) {
    let x_253 : f32 = x_35.unity_ProbeVolumeParams.y;
    u_xlatb34 = (x_253 == 1.0f);
    let x_255 : vec3<f32> = vs_TEXCOORD5;
    let x_259 : vec4<f32> = x_35.unity_ProbeVolumeWorldToObject[1i];
    let x_261 : vec3<f32> = (vec3<f32>(x_255.y, x_255.y, x_255.y) * vec3<f32>(x_259.x, x_259.y, x_259.z));
    let x_262 : vec4<f32> = u_xlat5;
    u_xlat5 = vec4<f32>(x_261.x, x_261.y, x_261.z, x_262.w);
    let x_265 : vec4<f32> = x_35.unity_ProbeVolumeWorldToObject[0i];
    let x_267 : vec3<f32> = vs_TEXCOORD5;
    let x_270 : vec4<f32> = u_xlat5;
    let x_272 : vec3<f32> = ((vec3<f32>(x_265.x, x_265.y, x_265.z) * vec3<f32>(x_267.x, x_267.x, x_267.x)) + vec3<f32>(x_270.x, x_270.y, x_270.z));
    let x_273 : vec4<f32> = u_xlat5;
    u_xlat5 = vec4<f32>(x_272.x, x_272.y, x_272.z, x_273.w);
    let x_276 : vec4<f32> = x_35.unity_ProbeVolumeWorldToObject[2i];
    let x_278 : vec3<f32> = vs_TEXCOORD5;
    let x_281 : vec4<f32> = u_xlat5;
    let x_283 : vec3<f32> = ((vec3<f32>(x_276.x, x_276.y, x_276.z) * vec3<f32>(x_278.z, x_278.z, x_278.z)) + vec3<f32>(x_281.x, x_281.y, x_281.z));
    let x_284 : vec4<f32> = u_xlat5;
    u_xlat5 = vec4<f32>(x_283.x, x_283.y, x_283.z, x_284.w);
    let x_286 : vec4<f32> = u_xlat5;
    let x_289 : vec4<f32> = x_35.unity_ProbeVolumeWorldToObject[3i];
    let x_291 : vec3<f32> = (vec3<f32>(x_286.x, x_286.y, x_286.z) + vec3<f32>(x_289.x, x_289.y, x_289.z));
    let x_292 : vec4<f32> = u_xlat5;
    u_xlat5 = vec4<f32>(x_291.x, x_291.y, x_291.z, x_292.w);
    let x_294 : bool = u_xlatb34;
    if (x_294) {
      let x_298 : vec4<f32> = u_xlat5;
      x_295 = vec3<f32>(x_298.x, x_298.y, x_298.z);
    } else {
      let x_301 : vec3<f32> = vs_TEXCOORD5;
      x_295 = x_301;
    }
    let x_302 : vec3<f32> = x_295;
    let x_303 : vec4<f32> = u_xlat5;
    u_xlat5 = vec4<f32>(x_302.x, x_302.y, x_302.z, x_303.w);
    let x_305 : vec4<f32> = u_xlat5;
    let x_309 : vec3<f32> = x_35.unity_ProbeVolumeMin;
    let x_311 : vec3<f32> = (vec3<f32>(x_305.x, x_305.y, x_305.z) + -(x_309));
    let x_312 : vec4<f32> = u_xlat5;
    u_xlat5 = vec4<f32>(x_311.x, x_311.y, x_311.z, x_312.w);
    let x_314 : vec4<f32> = u_xlat5;
    let x_318 : vec3<f32> = x_35.unity_ProbeVolumeSizeInv;
    let x_319 : vec3<f32> = (vec3<f32>(x_314.x, x_314.y, x_314.z) * x_318);
    let x_320 : vec4<f32> = u_xlat5;
    u_xlat5 = vec4<f32>(x_320.x, x_319.x, x_319.y, x_319.z);
    let x_323 : f32 = u_xlat5.y;
    u_xlat34 = ((x_323 * 0.25f) + 0.75f);
    let x_329 : f32 = x_35.unity_ProbeVolumeParams.z;
    u_xlat35 = ((x_329 * 0.5f) + 0.75f);
    let x_333 : f32 = u_xlat34;
    let x_334 : f32 = u_xlat35;
    u_xlat5.x = max(x_333, x_334);
    let x_345 : vec4<f32> = u_xlat5;
    let x_347 : vec4<f32> = textureSample(unity_ProbeVolumeSH, samplerunity_ProbeVolumeSH, vec3<f32>(x_345.x, x_345.z, x_345.w));
    u_xlat5 = x_347;
  } else {
    u_xlat5.x = 1.0f;
    u_xlat5.y = 1.0f;
    u_xlat5.z = 1.0f;
    u_xlat5.w = 1.0f;
  }
  let x_353 : vec4<f32> = u_xlat5;
  let x_355 : vec4<f32> = x_35.unity_OcclusionMaskSelector;
  u_xlat34 = dot(x_353, x_355);
  let x_357 : f32 = u_xlat34;
  u_xlat34 = clamp(x_357, 0.0f, 1.0f);
  let x_360 : f32 = u_xlat33;
  u_xlatb35 = (x_360 < 0.99000001f);
  let x_363 : bool = u_xlatb35;
  if (x_363) {
    let x_366 : vec3<f32> = vs_TEXCOORD5;
    let x_369 : vec4<f32> = x_35.unity_WorldToShadow[0i][1i];
    u_xlat5 = (vec4<f32>(x_366.y, x_366.y, x_366.y, x_366.y) * x_369);
    let x_372 : vec4<f32> = x_35.unity_WorldToShadow[0i][0i];
    let x_373 : vec3<f32> = vs_TEXCOORD5;
    let x_376 : vec4<f32> = u_xlat5;
    u_xlat5 = ((x_372 * vec4<f32>(x_373.x, x_373.x, x_373.x, x_373.x)) + x_376);
    let x_379 : vec4<f32> = x_35.unity_WorldToShadow[0i][2i];
    let x_380 : vec3<f32> = vs_TEXCOORD5;
    let x_383 : vec4<f32> = u_xlat5;
    u_xlat5 = ((x_379 * vec4<f32>(x_380.z, x_380.z, x_380.z, x_380.z)) + x_383);
    let x_385 : vec4<f32> = u_xlat5;
    let x_387 : vec4<f32> = x_35.unity_WorldToShadow[0i][3i];
    u_xlat5 = (x_385 + x_387);
    let x_389 : vec4<f32> = u_xlat5;
    let x_391 : vec4<f32> = u_xlat5;
    let x_393 : vec3<f32> = (vec3<f32>(x_389.x, x_389.y, x_389.z) / vec3<f32>(x_391.w, x_391.w, x_391.w));
    let x_394 : vec4<f32> = u_xlat5;
    u_xlat5 = vec4<f32>(x_393.x, x_393.y, x_393.z, x_394.w);
    let x_396 : vec4<f32> = u_xlat5;
    let x_400 : vec4<f32> = x_35.x_ShadowMapTexture_TexelSize;
    let x_404 : vec2<f32> = ((vec2<f32>(x_396.x, x_396.y) * vec2<f32>(x_400.z, x_400.w)) + vec2<f32>(0.5f, 0.5f));
    let x_405 : vec4<f32> = u_xlat6;
    u_xlat6 = vec4<f32>(x_404.x, x_404.y, x_405.z, x_405.w);
    let x_407 : vec4<f32> = u_xlat6;
    let x_409 : vec2<f32> = floor(vec2<f32>(x_407.x, x_407.y));
    let x_410 : vec4<f32> = u_xlat6;
    u_xlat6 = vec4<f32>(x_409.x, x_409.y, x_410.z, x_410.w);
    let x_412 : vec4<f32> = u_xlat5;
    let x_415 : vec4<f32> = x_35.x_ShadowMapTexture_TexelSize;
    let x_418 : vec4<f32> = u_xlat6;
    let x_421 : vec2<f32> = ((vec2<f32>(x_412.x, x_412.y) * vec2<f32>(x_415.z, x_415.w)) + -(vec2<f32>(x_418.x, x_418.y)));
    let x_422 : vec4<f32> = u_xlat5;
    u_xlat5 = vec4<f32>(x_421.x, x_421.y, x_422.z, x_422.w);
    let x_425 : vec4<f32> = u_xlat5;
    u_xlat7 = (vec4<f32>(x_425.x, x_425.x, x_425.y, x_425.y) + vec4<f32>(0.5f, 1.0f, 0.5f, 1.0f));
    let x_430 : vec4<f32> = u_xlat7;
    let x_432 : vec4<f32> = u_xlat7;
    let x_434 : vec2<f32> = (vec2<f32>(x_430.x, x_430.z) * vec2<f32>(x_432.x, x_432.z));
    let x_435 : vec4<f32> = u_xlat8;
    u_xlat8 = vec4<f32>(x_434.x, x_435.y, x_435.z, x_434.y);
    let x_439 : vec4<f32> = u_xlat8;
    let x_442 : vec4<f32> = u_xlat5;
    u_xlat28 = ((vec2<f32>(x_439.x, x_439.w) * vec2<f32>(0.5f, 0.5f)) + -(vec2<f32>(x_442.x, x_442.y)));
    let x_446 : vec4<f32> = u_xlat5;
    let x_450 : vec2<f32> = (-(vec2<f32>(x_446.x, x_446.y)) + vec2<f32>(1.0f, 1.0f));
    let x_451 : vec4<f32> = u_xlat7;
    u_xlat7 = vec4<f32>(x_450.x, x_451.y, x_450.y, x_451.w);
    let x_454 : vec4<f32> = u_xlat5;
    let x_457 : vec2<f32> = min(vec2<f32>(x_454.x, x_454.y), vec2<f32>(0.0f, 0.0f));
    let x_458 : vec4<f32> = u_xlat9;
    u_xlat9 = vec4<f32>(x_457.x, x_457.y, x_458.z, x_458.w);
    let x_460 : vec4<f32> = u_xlat9;
    let x_463 : vec4<f32> = u_xlat9;
    let x_466 : vec4<f32> = u_xlat7;
    let x_468 : vec2<f32> = ((-(vec2<f32>(x_460.x, x_460.y)) * vec2<f32>(x_463.x, x_463.y)) + vec2<f32>(x_466.x, x_466.z));
    let x_469 : vec4<f32> = u_xlat7;
    u_xlat7 = vec4<f32>(x_468.x, x_469.y, x_468.y, x_469.w);
    let x_471 : vec4<f32> = u_xlat5;
    let x_473 : vec2<f32> = max(vec2<f32>(x_471.x, x_471.y), vec2<f32>(0.0f, 0.0f));
    let x_474 : vec4<f32> = u_xlat5;
    u_xlat5 = vec4<f32>(x_473.x, x_473.y, x_474.z, x_474.w);
    let x_476 : vec4<f32> = u_xlat5;
    let x_479 : vec4<f32> = u_xlat5;
    let x_482 : vec4<f32> = u_xlat7;
    let x_484 : vec2<f32> = ((-(vec2<f32>(x_476.x, x_476.y)) * vec2<f32>(x_479.x, x_479.y)) + vec2<f32>(x_482.y, x_482.w));
    let x_485 : vec4<f32> = u_xlat5;
    u_xlat5 = vec4<f32>(x_484.x, x_484.y, x_485.z, x_485.w);
    let x_488 : f32 = u_xlat28.x;
    u_xlat9.x = x_488;
    let x_491 : f32 = u_xlat7.x;
    u_xlat9.y = x_491;
    let x_494 : f32 = u_xlat5.x;
    u_xlat9.z = x_494;
    let x_497 : f32 = u_xlat8.x;
    u_xlat9.w = x_497;
    let x_499 : vec4<f32> = u_xlat9;
    u_xlat9 = (x_499 * vec4<f32>(0.444440007f, 0.444440007f, 0.444440007f, 0.222220004f));
    let x_505 : f32 = u_xlat28.y;
    u_xlat8.x = x_505;
    let x_508 : f32 = u_xlat7.z;
    u_xlat8.y = x_508;
    let x_511 : f32 = u_xlat5.y;
    u_xlat8.z = x_511;
    let x_513 : vec4<f32> = u_xlat8;
    u_xlat7 = (x_513 * vec4<f32>(0.444440007f, 0.444440007f, 0.444440007f, 0.222220004f));
    let x_515 : vec4<f32> = u_xlat9;
    let x_517 : vec4<f32> = u_xlat9;
    u_xlat8 = (vec4<f32>(x_515.y, x_515.w, x_515.y, x_515.w) + vec4<f32>(x_517.x, x_517.z, x_517.x, x_517.z));
    let x_521 : vec4<f32> = u_xlat7;
    let x_523 : vec4<f32> = u_xlat7;
    u_xlat10 = (vec4<f32>(x_521.y, x_521.y, x_521.w, x_521.w) + vec4<f32>(x_523.x, x_523.x, x_523.z, x_523.z));
    let x_526 : vec4<f32> = u_xlat9;
    let x_528 : vec4<f32> = u_xlat8;
    let x_530 : vec2<f32> = (vec2<f32>(x_526.y, x_526.w) / vec2<f32>(x_528.z, x_528.w));
    let x_531 : vec4<f32> = u_xlat5;
    u_xlat5 = vec4<f32>(x_530.x, x_530.y, x_531.z, x_531.w);
    let x_533 : vec4<f32> = u_xlat5;
    let x_537 : vec2<f32> = (vec2<f32>(x_533.x, x_533.y) + vec2<f32>(-1.5f, 0.5f));
    let x_538 : vec4<f32> = u_xlat5;
    u_xlat5 = vec4<f32>(x_537.x, x_537.y, x_538.z, x_538.w);
    let x_540 : vec4<f32> = u_xlat7;
    let x_542 : vec4<f32> = u_xlat10;
    u_xlat28 = (vec2<f32>(x_540.y, x_540.w) / vec2<f32>(x_542.y, x_542.w));
    let x_545 : vec2<f32> = u_xlat28;
    u_xlat28 = (x_545 + vec2<f32>(-1.5f, 0.5f));
    let x_547 : vec4<f32> = u_xlat5;
    let x_550 : vec4<f32> = x_35.x_ShadowMapTexture_TexelSize;
    let x_552 : vec2<f32> = (vec2<f32>(x_547.x, x_547.y) * vec2<f32>(x_550.x, x_550.x));
    let x_553 : vec4<f32> = u_xlat7;
    u_xlat7 = vec4<f32>(x_552.x, x_552.y, x_553.z, x_553.w);
    let x_555 : vec2<f32> = u_xlat28;
    let x_557 : vec4<f32> = x_35.x_ShadowMapTexture_TexelSize;
    let x_559 : vec2<f32> = (x_555 * vec2<f32>(x_557.y, x_557.y));
    let x_560 : vec4<f32> = u_xlat7;
    u_xlat7 = vec4<f32>(x_560.x, x_560.y, x_559.x, x_559.y);
    let x_562 : vec4<f32> = u_xlat8;
    let x_563 : vec4<f32> = u_xlat10;
    u_xlat8 = (x_562 * x_563);
    let x_565 : vec4<f32> = u_xlat6;
    let x_568 : vec4<f32> = x_35.x_ShadowMapTexture_TexelSize;
    let x_571 : vec4<f32> = u_xlat7;
    u_xlat9 = ((vec4<f32>(x_565.x, x_565.y, x_565.x, x_565.y) * vec4<f32>(x_568.x, x_568.y, x_568.x, x_568.y)) + vec4<f32>(x_571.x, x_571.z, x_571.y, x_571.z));
    let x_575 : vec4<f32> = u_xlat9;
    let x_576 : vec2<f32> = vec2<f32>(x_575.x, x_575.y);
    let x_578 : f32 = u_xlat5.z;
    txVec0 = vec3<f32>(x_576.x, x_576.y, x_578);
    let x_590 : vec3<f32> = txVec0;
    let x_592 : f32 = textureSampleCompareLevel(x_ShadowMapTexture, sampler_ShadowMapTexture, x_590.xy, x_590.z);
    u_xlat35 = x_592;
    let x_594 : vec4<f32> = u_xlat9;
    let x_595 : vec2<f32> = vec2<f32>(x_594.z, x_594.w);
    let x_597 : f32 = u_xlat5.z;
    txVec1 = vec3<f32>(x_595.x, x_595.y, x_597);
    let x_605 : vec3<f32> = txVec1;
    let x_607 : f32 = textureSampleCompareLevel(x_ShadowMapTexture, sampler_ShadowMapTexture, x_605.xy, x_605.z);
    u_xlat36 = x_607;
    let x_608 : f32 = u_xlat36;
    let x_610 : f32 = u_xlat8.y;
    u_xlat36 = (x_608 * x_610);
    let x_613 : f32 = u_xlat8.x;
    let x_614 : f32 = u_xlat35;
    let x_616 : f32 = u_xlat36;
    u_xlat35 = ((x_613 * x_614) + x_616);
    let x_618 : vec4<f32> = u_xlat6;
    let x_621 : vec4<f32> = x_35.x_ShadowMapTexture_TexelSize;
    let x_624 : vec4<f32> = u_xlat7;
    u_xlat6 = ((vec4<f32>(x_618.x, x_618.y, x_618.x, x_618.y) * vec4<f32>(x_621.x, x_621.y, x_621.x, x_621.y)) + vec4<f32>(x_624.x, x_624.w, x_624.y, x_624.w));
    let x_628 : vec4<f32> = u_xlat6;
    let x_629 : vec2<f32> = vec2<f32>(x_628.x, x_628.y);
    let x_631 : f32 = u_xlat5.z;
    txVec2 = vec3<f32>(x_629.x, x_629.y, x_631);
    let x_638 : vec3<f32> = txVec2;
    let x_640 : f32 = textureSampleCompareLevel(x_ShadowMapTexture, sampler_ShadowMapTexture, x_638.xy, x_638.z);
    u_xlat36 = x_640;
    let x_642 : f32 = u_xlat8.z;
    let x_643 : f32 = u_xlat36;
    let x_645 : f32 = u_xlat35;
    u_xlat35 = ((x_642 * x_643) + x_645);
    let x_648 : vec4<f32> = u_xlat6;
    let x_649 : vec2<f32> = vec2<f32>(x_648.z, x_648.w);
    let x_651 : f32 = u_xlat5.z;
    txVec3 = vec3<f32>(x_649.x, x_649.y, x_651);
    let x_658 : vec3<f32> = txVec3;
    let x_660 : f32 = textureSampleCompareLevel(x_ShadowMapTexture, sampler_ShadowMapTexture, x_658.xy, x_658.z);
    u_xlat36 = x_660;
    let x_662 : f32 = u_xlat8.w;
    let x_663 : f32 = u_xlat36;
    let x_665 : f32 = u_xlat35;
    u_xlat35 = ((x_662 * x_663) + x_665);
    let x_668 : f32 = x_35.x_LightShadowData.x;
    u_xlat36 = (-(x_668) + 1.0f);
    let x_671 : f32 = u_xlat35;
    let x_672 : f32 = u_xlat36;
    let x_675 : f32 = x_35.x_LightShadowData.x;
    u_xlat35 = ((x_671 * x_672) + x_675);
  } else {
    u_xlat35 = 1.0f;
  }
  let x_678 : f32 = u_xlat34;
  let x_679 : f32 = u_xlat35;
  u_xlat34 = (x_678 + -(x_679));
  let x_682 : f32 = u_xlat33;
  let x_683 : f32 = u_xlat34;
  let x_685 : f32 = u_xlat35;
  u_xlat33 = ((x_682 * x_683) + x_685);
  let x_688 : f32 = u_xlat4.z;
  u_xlatb34 = (0.0f < x_688);
  let x_690 : bool = u_xlatb34;
  u_xlat34 = select(0.0f, 1.0f, x_690);
  let x_692 : vec4<f32> = u_xlat4;
  let x_694 : vec4<f32> = u_xlat4;
  let x_696 : vec2<f32> = (vec2<f32>(x_692.x, x_692.y) / vec2<f32>(x_694.w, x_694.w));
  let x_697 : vec4<f32> = u_xlat5;
  u_xlat5 = vec4<f32>(x_696.x, x_696.y, x_697.z, x_697.w);
  let x_699 : vec4<f32> = u_xlat5;
  let x_701 : vec2<f32> = (vec2<f32>(x_699.x, x_699.y) + vec2<f32>(0.5f, 0.5f));
  let x_702 : vec4<f32> = u_xlat5;
  u_xlat5 = vec4<f32>(x_701.x, x_701.y, x_702.z, x_702.w);
  let x_709 : vec4<f32> = u_xlat5;
  let x_711 : vec4<f32> = textureSample(x_LightTexture0, sampler_LightTexture0, vec2<f32>(x_709.x, x_709.y));
  u_xlat35 = x_711.w;
  let x_713 : f32 = u_xlat34;
  let x_714 : f32 = u_xlat35;
  u_xlat34 = (x_713 * x_714);
  let x_716 : vec4<f32> = u_xlat4;
  let x_718 : vec4<f32> = u_xlat4;
  u_xlat35 = dot(vec3<f32>(x_716.x, x_716.y, x_716.z), vec3<f32>(x_718.x, x_718.y, x_718.z));
  let x_726 : f32 = u_xlat35;
  let x_728 : vec4<f32> = textureSample(x_LightTextureB0, sampler_LightTextureB0, vec2<f32>(x_726, x_726));
  u_xlat35 = x_728.x;
  let x_730 : f32 = u_xlat34;
  let x_731 : f32 = u_xlat35;
  u_xlat34 = (x_730 * x_731);
  let x_733 : f32 = u_xlat33;
  let x_734 : f32 = u_xlat34;
  u_xlat33 = (x_733 * x_734);
  let x_739 : f32 = vs_TEXCOORD2.w;
  u_xlat4.x = x_739;
  let x_743 : f32 = vs_TEXCOORD3.w;
  u_xlat4.y = x_743;
  let x_746 : f32 = vs_TEXCOORD4.w;
  u_xlat4.z = x_746;
  let x_748 : vec4<f32> = u_xlat4;
  let x_750 : vec4<f32> = u_xlat4;
  u_xlat34 = dot(vec3<f32>(x_748.x, x_748.y, x_748.z), vec3<f32>(x_750.x, x_750.y, x_750.z));
  let x_753 : f32 = u_xlat34;
  u_xlat34 = inverseSqrt(x_753);
  let x_755 : f32 = u_xlat34;
  let x_757 : vec4<f32> = u_xlat4;
  let x_759 : vec3<f32> = (vec3<f32>(x_755, x_755, x_755) * vec3<f32>(x_757.x, x_757.y, x_757.z));
  let x_760 : vec4<f32> = u_xlat5;
  u_xlat5 = vec4<f32>(x_759.x, x_759.y, x_759.z, x_760.w);
  let x_762 : f32 = u_xlat33;
  let x_766 : vec4<f32> = x_35.x_LightColor0;
  let x_768 : vec3<f32> = (vec3<f32>(x_762, x_762, x_762) * vec3<f32>(x_766.x, x_766.y, x_766.z));
  let x_769 : vec4<f32> = u_xlat6;
  u_xlat6 = vec4<f32>(x_768.x, x_768.y, x_768.z, x_769.w);
  let x_773 : f32 = x_35.x_Glossiness;
  u_xlat33 = (-(x_773) + 1.0f);
  let x_776 : vec4<f32> = u_xlat4;
  let x_778 : f32 = u_xlat34;
  let x_781 : vec3<f32> = u_xlat3;
  let x_783 : vec3<f32> = ((vec3<f32>(x_776.x, x_776.y, x_776.z) * vec3<f32>(x_778, x_778, x_778)) + -(x_781));
  let x_784 : vec4<f32> = u_xlat4;
  u_xlat4 = vec4<f32>(x_783.x, x_783.y, x_783.z, x_784.w);
  let x_786 : vec4<f32> = u_xlat4;
  let x_788 : vec4<f32> = u_xlat4;
  u_xlat34 = dot(vec3<f32>(x_786.x, x_786.y, x_786.z), vec3<f32>(x_788.x, x_788.y, x_788.z));
  let x_791 : f32 = u_xlat34;
  u_xlat34 = max(x_791, 0.001f);
  let x_794 : f32 = u_xlat34;
  u_xlat34 = inverseSqrt(x_794);
  let x_796 : f32 = u_xlat34;
  let x_798 : vec4<f32> = u_xlat4;
  let x_800 : vec3<f32> = (vec3<f32>(x_796, x_796, x_796) * vec3<f32>(x_798.x, x_798.y, x_798.z));
  let x_801 : vec4<f32> = u_xlat4;
  u_xlat4 = vec4<f32>(x_800.x, x_800.y, x_800.z, x_801.w);
  let x_803 : vec4<f32> = u_xlat2;
  let x_805 : vec3<f32> = u_xlat3;
  u_xlat34 = dot(vec3<f32>(x_803.x, x_803.y, x_803.z), -(x_805));
  let x_808 : vec4<f32> = u_xlat2;
  let x_810 : vec4<f32> = u_xlat5;
  u_xlat35 = dot(vec3<f32>(x_808.x, x_808.y, x_808.z), vec3<f32>(x_810.x, x_810.y, x_810.z));
  let x_813 : f32 = u_xlat35;
  u_xlat35 = clamp(x_813, 0.0f, 1.0f);
  let x_815 : vec4<f32> = u_xlat2;
  let x_817 : vec4<f32> = u_xlat4;
  u_xlat2.x = dot(vec3<f32>(x_815.x, x_815.y, x_815.z), vec3<f32>(x_817.x, x_817.y, x_817.z));
  let x_822 : f32 = u_xlat2.x;
  u_xlat2.x = clamp(x_822, 0.0f, 1.0f);
  let x_826 : vec4<f32> = u_xlat5;
  let x_828 : vec4<f32> = u_xlat4;
  u_xlat13 = dot(vec3<f32>(x_826.x, x_826.y, x_826.z), vec3<f32>(x_828.x, x_828.y, x_828.z));
  let x_831 : f32 = u_xlat13;
  u_xlat13 = clamp(x_831, 0.0f, 1.0f);
  let x_834 : f32 = u_xlat13;
  let x_835 : f32 = u_xlat13;
  u_xlat24 = (x_834 * x_835);
  let x_837 : f32 = u_xlat24;
  let x_839 : f32 = u_xlat33;
  u_xlat24 = dot(vec2<f32>(x_837, x_837), vec2<f32>(x_839, x_839));
  let x_842 : f32 = u_xlat24;
  u_xlat24 = (x_842 + -0.5f);
  let x_845 : f32 = u_xlat35;
  u_xlat3.x = (-(x_845) + 1.0f);
  let x_851 : f32 = u_xlat3.x;
  let x_853 : f32 = u_xlat3.x;
  u_xlat14 = (x_851 * x_853);
  let x_855 : f32 = u_xlat14;
  let x_856 : f32 = u_xlat14;
  u_xlat14 = (x_855 * x_856);
  let x_859 : f32 = u_xlat3.x;
  let x_860 : f32 = u_xlat14;
  u_xlat3.x = (x_859 * x_860);
  let x_863 : f32 = u_xlat24;
  let x_865 : f32 = u_xlat3.x;
  u_xlat3.x = ((x_863 * x_865) + 1.0f);
  let x_869 : f32 = u_xlat34;
  u_xlat14 = (-(abs(x_869)) + 1.0f);
  let x_874 : f32 = u_xlat14;
  let x_875 : f32 = u_xlat14;
  u_xlat25 = (x_874 * x_875);
  let x_877 : f32 = u_xlat25;
  let x_878 : f32 = u_xlat25;
  u_xlat25 = (x_877 * x_878);
  let x_880 : f32 = u_xlat14;
  let x_881 : f32 = u_xlat25;
  u_xlat14 = (x_880 * x_881);
  let x_883 : f32 = u_xlat24;
  let x_884 : f32 = u_xlat14;
  u_xlat24 = ((x_883 * x_884) + 1.0f);
  let x_887 : f32 = u_xlat24;
  let x_889 : f32 = u_xlat3.x;
  u_xlat24 = (x_887 * x_889);
  let x_891 : f32 = u_xlat35;
  let x_892 : f32 = u_xlat24;
  u_xlat24 = (x_891 * x_892);
  let x_894 : f32 = u_xlat33;
  let x_895 : f32 = u_xlat33;
  u_xlat33 = (x_894 * x_895);
  let x_897 : f32 = u_xlat33;
  u_xlat33 = max(x_897, 0.002f);
  let x_900 : f32 = u_xlat33;
  u_xlat3.x = (-(x_900) + 1.0f);
  let x_904 : f32 = u_xlat34;
  let x_907 : f32 = u_xlat3.x;
  let x_909 : f32 = u_xlat33;
  u_xlat14 = ((abs(x_904) * x_907) + x_909);
  let x_911 : f32 = u_xlat35;
  let x_913 : f32 = u_xlat3.x;
  let x_915 : f32 = u_xlat33;
  u_xlat3.x = ((x_911 * x_913) + x_915);
  let x_918 : f32 = u_xlat34;
  let x_921 : f32 = u_xlat3.x;
  u_xlat34 = (abs(x_918) * x_921);
  let x_923 : f32 = u_xlat35;
  let x_924 : f32 = u_xlat14;
  let x_926 : f32 = u_xlat34;
  u_xlat34 = ((x_923 * x_924) + x_926);
  let x_928 : f32 = u_xlat34;
  u_xlat34 = (x_928 + 0.00001f);
  let x_931 : f32 = u_xlat34;
  u_xlat34 = (0.5f / x_931);
  let x_933 : f32 = u_xlat33;
  let x_934 : f32 = u_xlat33;
  u_xlat33 = (x_933 * x_934);
  let x_937 : f32 = u_xlat2.x;
  let x_938 : f32 = u_xlat33;
  let x_941 : f32 = u_xlat2.x;
  u_xlat3.x = ((x_937 * x_938) + -(x_941));
  let x_946 : f32 = u_xlat3.x;
  let x_948 : f32 = u_xlat2.x;
  u_xlat2.x = ((x_946 * x_948) + 1.0f);
  let x_952 : f32 = u_xlat33;
  u_xlat33 = (x_952 * 0.318309873f);
  let x_956 : f32 = u_xlat2.x;
  let x_958 : f32 = u_xlat2.x;
  u_xlat2.x = ((x_956 * x_958) + 0.0000001f);
  let x_963 : f32 = u_xlat33;
  let x_965 : f32 = u_xlat2.x;
  u_xlat33 = (x_963 / x_965);
  let x_967 : f32 = u_xlat33;
  let x_968 : f32 = u_xlat34;
  u_xlat33 = (x_967 * x_968);
  let x_970 : f32 = u_xlat35;
  let x_971 : f32 = u_xlat33;
  u_xlat33 = (x_970 * x_971);
  let x_973 : f32 = u_xlat33;
  u_xlat33 = (x_973 * 3.141592741f);
  let x_976 : f32 = u_xlat33;
  u_xlat33 = max(x_976, 0.0f);
  let x_978 : vec4<f32> = u_xlat0;
  let x_980 : vec4<f32> = u_xlat0;
  u_xlat34 = dot(vec3<f32>(x_978.x, x_978.y, x_978.z), vec3<f32>(x_980.x, x_980.y, x_980.z));
  let x_983 : f32 = u_xlat34;
  u_xlatb34 = !((x_983 == 0.0f));
  let x_985 : bool = u_xlatb34;
  u_xlat34 = select(0.0f, 1.0f, x_985);
  let x_987 : f32 = u_xlat33;
  let x_988 : f32 = u_xlat34;
  u_xlat33 = (x_987 * x_988);
  let x_990 : f32 = u_xlat24;
  let x_992 : vec4<f32> = u_xlat6;
  let x_994 : vec3<f32> = (vec3<f32>(x_990, x_990, x_990) * vec3<f32>(x_992.x, x_992.y, x_992.z));
  let x_995 : vec4<f32> = u_xlat2;
  u_xlat2 = vec4<f32>(x_994.x, x_995.y, x_994.y, x_994.z);
  let x_997 : vec4<f32> = u_xlat6;
  let x_999 : f32 = u_xlat33;
  u_xlat3 = (vec3<f32>(x_997.x, x_997.y, x_997.z) * vec3<f32>(x_999, x_999, x_999));
  let x_1002 : f32 = u_xlat13;
  u_xlat33 = (-(x_1002) + 1.0f);
  let x_1005 : f32 = u_xlat33;
  let x_1006 : f32 = u_xlat33;
  u_xlat34 = (x_1005 * x_1006);
  let x_1008 : f32 = u_xlat34;
  let x_1009 : f32 = u_xlat34;
  u_xlat34 = (x_1008 * x_1009);
  let x_1011 : f32 = u_xlat33;
  let x_1012 : f32 = u_xlat34;
  u_xlat33 = (x_1011 * x_1012);
  let x_1014 : vec4<f32> = u_xlat0;
  let x_1018 : vec3<f32> = (-(vec3<f32>(x_1014.x, x_1014.y, x_1014.z)) + vec3<f32>(1.0f, 1.0f, 1.0f));
  let x_1019 : vec4<f32> = u_xlat4;
  u_xlat4 = vec4<f32>(x_1018.x, x_1018.y, x_1018.z, x_1019.w);
  let x_1021 : vec4<f32> = u_xlat4;
  let x_1023 : f32 = u_xlat33;
  let x_1026 : vec4<f32> = u_xlat0;
  let x_1028 : vec3<f32> = ((vec3<f32>(x_1021.x, x_1021.y, x_1021.z) * vec3<f32>(x_1023, x_1023, x_1023)) + vec3<f32>(x_1026.x, x_1026.y, x_1026.z));
  let x_1029 : vec4<f32> = u_xlat0;
  u_xlat0 = vec4<f32>(x_1028.x, x_1028.y, x_1028.z, x_1029.w);
  let x_1031 : vec4<f32> = u_xlat0;
  let x_1033 : vec3<f32> = u_xlat3;
  let x_1034 : vec3<f32> = (vec3<f32>(x_1031.x, x_1031.y, x_1031.z) * x_1033);
  let x_1035 : vec4<f32> = u_xlat0;
  u_xlat0 = vec4<f32>(x_1034.x, x_1034.y, x_1034.z, x_1035.w);
  let x_1037 : vec4<f32> = u_xlat1;
  let x_1039 : vec4<f32> = u_xlat2;
  let x_1042 : vec4<f32> = u_xlat0;
  let x_1044 : vec3<f32> = ((vec3<f32>(x_1037.x, x_1037.y, x_1037.z) * vec3<f32>(x_1039.x, x_1039.z, x_1039.w)) + vec3<f32>(x_1042.x, x_1042.y, x_1042.z));
  let x_1045 : vec4<f32> = SV_Target0;
  SV_Target0 = vec4<f32>(x_1044.x, x_1044.y, x_1044.z, x_1045.w);
  return;
}

struct main_out {
  @location(0)
  SV_Target0_1 : vec4<f32>,
}

@fragment
fn main(@location(0) vs_TEXCOORD0_param : vec4<f32>, @location(4) vs_TEXCOORD4_param : vec4<f32>, @location(1) vs_TEXCOORD1_param : vec4<f32>, @location(5) vs_TEXCOORD5_param : vec3<f32>, @location(2) vs_TEXCOORD2_param : vec4<f32>, @location(3) vs_TEXCOORD3_param : vec4<f32>, @builtin(position) gl_FragCoord_param : vec4<f32>) -> main_out {
  vs_TEXCOORD0 = vs_TEXCOORD0_param;
  vs_TEXCOORD4 = vs_TEXCOORD4_param;
  vs_TEXCOORD1 = vs_TEXCOORD1_param;
  vs_TEXCOORD5 = vs_TEXCOORD5_param;
  vs_TEXCOORD2 = vs_TEXCOORD2_param;
  vs_TEXCOORD3 = vs_TEXCOORD3_param;
  gl_FragCoord = gl_FragCoord_param;
  main_1();
  return main_out(SV_Target0);
}

