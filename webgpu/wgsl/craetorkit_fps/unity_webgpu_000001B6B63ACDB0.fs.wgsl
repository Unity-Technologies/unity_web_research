type Arr = array<mat4x4<f32>, 4u>;

struct PGlobals {
  x_WorldSpaceCameraPos : vec3<f32>,
  @size(4)
  padding : u32,
  unity_OcclusionMaskSelector : vec4<f32>,
  unity_WorldToShadow : Arr,
  x_LightShadowData : vec4<f32>,
  unity_ShadowFadeCenterAndType : vec4<f32>,
  unity_MatrixV : mat4x4<f32>,
  unity_ProbeVolumeParams : vec4<f32>,
  unity_ProbeVolumeWorldToObject : mat4x4<f32>,
  unity_ProbeVolumeSizeInv : vec3<f32>,
  @size(4)
  padding_1 : u32,
  unity_ProbeVolumeMin : vec3<f32>,
  @size(4)
  padding_2 : u32,
  x_LightColor0 : vec4<f32>,
  x_ShadowMapTexture_TexelSize : vec4<f32>,
  x_Color : vec4<f32>,
  x_BumpScale : f32,
  x_GlossMapScale : f32,
  @size(8)
  padding_3 : u32,
  unity_WorldToLight : mat4x4<f32>,
}

@group(0) @binding(1) var x_MetallicGlossMap : texture_2d<f32>;

@group(0) @binding(11) var sampler_MetallicGlossMap : sampler;

var<private> vs_TEXCOORD0 : vec4<f32>;

@group(0) @binding(0) var x_MainTex : texture_2d<f32>;

@group(0) @binding(9) var sampler_MainTex : sampler;

@group(1) @binding(0) var<uniform> x_49 : PGlobals;

@group(0) @binding(2) var x_BumpMap : texture_2d<f32>;

@group(0) @binding(10) var sampler_BumpMap : sampler;

var<private> vs_TEXCOORD3 : vec4<f32>;

var<private> vs_TEXCOORD2 : vec4<f32>;

var<private> vs_TEXCOORD4 : vec4<f32>;

var<private> vs_TEXCOORD1 : vec4<f32>;

var<private> vs_TEXCOORD5 : vec3<f32>;

@group(0) @binding(5) var unity_ProbeVolumeSH : texture_3d<f32>;

@group(0) @binding(7) var samplerunity_ProbeVolumeSH : sampler;

@group(0) @binding(6) var x_ShadowMapTexture : texture_depth_2d;

@group(0) @binding(8) var sampler_ShadowMapTexture : sampler_comparison;

@group(0) @binding(3) var x_LightTexture0 : texture_2d<f32>;

@group(0) @binding(12) var sampler_LightTexture0 : sampler;

@group(0) @binding(4) var x_LightTextureB0 : texture_2d<f32>;

@group(0) @binding(13) var sampler_LightTextureB0 : sampler;

var<private> SV_Target0 : vec4<f32>;

var<private> gl_FragCoord : vec4<f32>;

fn main_1() {
  var u_xlat0 : vec4<f32>;
  var u_xlat1 : vec3<f32>;
  var u_xlat2 : vec4<f32>;
  var u_xlat34 : f32;
  var u_xlat13 : vec3<f32>;
  var u_xlat3 : vec3<f32>;
  var u_xlat4 : vec4<f32>;
  var u_xlat5 : vec4<f32>;
  var u_xlat6 : vec4<f32>;
  var u_xlat35 : f32;
  var u_xlatb35 : bool;
  var x_346 : vec3<f32>;
  var u_xlat36 : f32;
  var u_xlatb36 : bool;
  var u_xlat7 : vec4<f32>;
  var u_xlat8 : vec4<f32>;
  var u_xlat28 : vec2<f32>;
  var u_xlat9 : vec4<f32>;
  var u_xlat10 : vec4<f32>;
  var txVec0 : vec3<f32>;
  var txVec1 : vec3<f32>;
  var txVec2 : vec3<f32>;
  var txVec3 : vec3<f32>;
  var u_xlat11 : f32;
  var u_xlat24 : f32;
  var u_xlat14 : f32;
  var u_xlat25 : f32;
  var u_xlatb34 : bool;
  var u_xlat_precise_vec4 : vec4<f32>;
  var u_xlat_precise_ivec4 : vec4<i32>;
  var u_xlat_precise_bvec4 : vec4<bool>;
  var u_xlat_precise_uvec4 : vec4<u32>;
  let x_23 : vec4<f32> = vs_TEXCOORD0;
  let x_25 : vec4<f32> = textureSample(x_MetallicGlossMap, sampler_MetallicGlossMap, vec2<f32>(x_23.x, x_23.y));
  let x_26 : vec2<f32> = vec2<f32>(x_25.x, x_25.w);
  let x_27 : vec4<f32> = u_xlat0;
  u_xlat0 = vec4<f32>(x_26.x, x_26.y, x_27.z, x_27.w);
  let x_37 : vec4<f32> = vs_TEXCOORD0;
  let x_39 : vec4<f32> = textureSample(x_MainTex, sampler_MainTex, vec2<f32>(x_37.x, x_37.y));
  u_xlat1 = vec3<f32>(x_39.x, x_39.y, x_39.z);
  let x_42 : vec3<f32> = u_xlat1;
  let x_54 : vec4<f32> = x_49.x_Color;
  let x_56 : vec3<f32> = (x_42 * vec3<f32>(x_54.x, x_54.y, x_54.z));
  let x_57 : vec4<f32> = u_xlat2;
  u_xlat2 = vec4<f32>(x_56.x, x_56.y, x_56.z, x_57.w);
  let x_60 : vec4<f32> = x_49.x_Color;
  let x_62 : vec3<f32> = u_xlat1;
  u_xlat1 = ((vec3<f32>(x_60.x, x_60.y, x_60.z) * x_62) + vec3<f32>(-0.039999999f, -0.039999999f, -0.039999999f));
  let x_67 : vec4<f32> = u_xlat0;
  let x_69 : vec3<f32> = u_xlat1;
  u_xlat1 = ((vec3<f32>(x_67.x, x_67.x, x_67.x) * x_69) + vec3<f32>(0.039999999f, 0.039999999f, 0.039999999f));
  let x_77 : f32 = u_xlat0.x;
  u_xlat0.x = ((-(x_77) * 0.959999979f) + 0.959999979f);
  let x_83 : vec4<f32> = u_xlat0;
  let x_85 : vec4<f32> = u_xlat2;
  let x_87 : vec3<f32> = (vec3<f32>(x_83.x, x_83.x, x_83.x) * vec3<f32>(x_85.x, x_85.y, x_85.z));
  let x_88 : vec4<f32> = u_xlat0;
  u_xlat0 = vec4<f32>(x_87.x, x_88.y, x_87.y, x_87.z);
  let x_95 : vec4<f32> = vs_TEXCOORD0;
  let x_97 : vec4<f32> = textureSample(x_BumpMap, sampler_BumpMap, vec2<f32>(x_95.x, x_95.y));
  let x_98 : vec3<f32> = vec3<f32>(x_97.x, x_97.y, x_97.w);
  let x_99 : vec4<f32> = u_xlat2;
  u_xlat2 = vec4<f32>(x_98.x, x_98.y, x_98.z, x_99.w);
  let x_103 : f32 = u_xlat2.z;
  let x_105 : f32 = u_xlat2.x;
  u_xlat2.x = (x_103 * x_105);
  let x_108 : vec4<f32> = u_xlat2;
  let x_115 : vec2<f32> = ((vec2<f32>(x_108.x, x_108.y) * vec2<f32>(2.0f, 2.0f)) + vec2<f32>(-1.0f, -1.0f));
  let x_116 : vec4<f32> = u_xlat2;
  u_xlat2 = vec4<f32>(x_115.x, x_115.y, x_116.z, x_116.w);
  let x_118 : vec4<f32> = u_xlat2;
  let x_123 : f32 = x_49.x_BumpScale;
  let x_125 : vec2<f32> = (vec2<f32>(x_118.x, x_118.y) * vec2<f32>(x_123, x_123));
  let x_126 : vec4<f32> = u_xlat2;
  u_xlat2 = vec4<f32>(x_125.x, x_125.y, x_126.z, x_126.w);
  let x_129 : vec4<f32> = u_xlat2;
  let x_131 : vec4<f32> = u_xlat2;
  u_xlat34 = dot(vec2<f32>(x_129.x, x_129.y), vec2<f32>(x_131.x, x_131.y));
  let x_134 : f32 = u_xlat34;
  u_xlat34 = min(x_134, 1.0f);
  let x_137 : f32 = u_xlat34;
  u_xlat34 = (-(x_137) + 1.0f);
  let x_140 : f32 = u_xlat34;
  u_xlat34 = sqrt(x_140);
  let x_143 : vec4<f32> = u_xlat2;
  let x_146 : vec4<f32> = vs_TEXCOORD3;
  u_xlat13 = (vec3<f32>(x_143.y, x_143.y, x_143.y) * vec3<f32>(x_146.x, x_146.y, x_146.z));
  let x_150 : vec4<f32> = vs_TEXCOORD2;
  let x_152 : vec4<f32> = u_xlat2;
  let x_155 : vec3<f32> = u_xlat13;
  let x_156 : vec3<f32> = ((vec3<f32>(x_150.x, x_150.y, x_150.z) * vec3<f32>(x_152.x, x_152.x, x_152.x)) + x_155);
  let x_157 : vec4<f32> = u_xlat2;
  u_xlat2 = vec4<f32>(x_156.x, x_156.y, x_156.z, x_157.w);
  let x_160 : vec4<f32> = vs_TEXCOORD4;
  let x_162 : f32 = u_xlat34;
  let x_165 : vec4<f32> = u_xlat2;
  let x_167 : vec3<f32> = ((vec3<f32>(x_160.x, x_160.y, x_160.z) * vec3<f32>(x_162, x_162, x_162)) + vec3<f32>(x_165.x, x_165.y, x_165.z));
  let x_168 : vec4<f32> = u_xlat2;
  u_xlat2 = vec4<f32>(x_167.x, x_167.y, x_167.z, x_168.w);
  let x_170 : vec4<f32> = u_xlat2;
  let x_172 : vec4<f32> = u_xlat2;
  u_xlat34 = dot(vec3<f32>(x_170.x, x_170.y, x_170.z), vec3<f32>(x_172.x, x_172.y, x_172.z));
  let x_175 : f32 = u_xlat34;
  u_xlat34 = inverseSqrt(x_175);
  let x_177 : f32 = u_xlat34;
  let x_179 : vec4<f32> = u_xlat2;
  let x_181 : vec3<f32> = (vec3<f32>(x_177, x_177, x_177) * vec3<f32>(x_179.x, x_179.y, x_179.z));
  let x_182 : vec4<f32> = u_xlat2;
  u_xlat2 = vec4<f32>(x_181.x, x_181.y, x_181.z, x_182.w);
  let x_185 : vec4<f32> = vs_TEXCOORD1;
  let x_187 : vec4<f32> = vs_TEXCOORD1;
  u_xlat34 = dot(vec3<f32>(x_185.x, x_185.y, x_185.z), vec3<f32>(x_187.x, x_187.y, x_187.z));
  let x_190 : f32 = u_xlat34;
  u_xlat34 = inverseSqrt(x_190);
  let x_193 : f32 = u_xlat34;
  let x_195 : vec4<f32> = vs_TEXCOORD1;
  u_xlat3 = (vec3<f32>(x_193, x_193, x_193) * vec3<f32>(x_195.x, x_195.y, x_195.z));
  let x_201 : vec3<f32> = vs_TEXCOORD5;
  let x_206 : vec4<f32> = x_49.unity_WorldToLight[1i];
  u_xlat4 = (vec4<f32>(x_201.y, x_201.y, x_201.y, x_201.y) * x_206);
  let x_210 : vec4<f32> = x_49.unity_WorldToLight[0i];
  let x_211 : vec3<f32> = vs_TEXCOORD5;
  let x_214 : vec4<f32> = u_xlat4;
  u_xlat4 = ((x_210 * vec4<f32>(x_211.x, x_211.x, x_211.x, x_211.x)) + x_214);
  let x_218 : vec4<f32> = x_49.unity_WorldToLight[2i];
  let x_219 : vec3<f32> = vs_TEXCOORD5;
  let x_222 : vec4<f32> = u_xlat4;
  u_xlat4 = ((x_218 * vec4<f32>(x_219.z, x_219.z, x_219.z, x_219.z)) + x_222);
  let x_224 : vec4<f32> = u_xlat4;
  let x_227 : vec4<f32> = x_49.unity_WorldToLight[3i];
  u_xlat4 = (x_224 + x_227);
  let x_230 : vec3<f32> = vs_TEXCOORD5;
  let x_234 : vec3<f32> = x_49.x_WorldSpaceCameraPos;
  let x_235 : vec3<f32> = (-(x_230) + x_234);
  let x_236 : vec4<f32> = u_xlat5;
  u_xlat5 = vec4<f32>(x_235.x, x_235.y, x_235.z, x_236.w);
  let x_241 : f32 = x_49.unity_MatrixV[0i].z;
  u_xlat6.x = x_241;
  let x_244 : f32 = x_49.unity_MatrixV[1i].z;
  u_xlat6.y = x_244;
  let x_248 : f32 = x_49.unity_MatrixV[2i].z;
  u_xlat6.z = x_248;
  let x_250 : vec4<f32> = u_xlat5;
  let x_252 : vec4<f32> = u_xlat6;
  u_xlat34 = dot(vec3<f32>(x_250.x, x_250.y, x_250.z), vec3<f32>(x_252.x, x_252.y, x_252.z));
  let x_255 : vec3<f32> = vs_TEXCOORD5;
  let x_258 : vec4<f32> = x_49.unity_ShadowFadeCenterAndType;
  let x_261 : vec3<f32> = (x_255 + -(vec3<f32>(x_258.x, x_258.y, x_258.z)));
  let x_262 : vec4<f32> = u_xlat5;
  u_xlat5 = vec4<f32>(x_261.x, x_261.y, x_261.z, x_262.w);
  let x_265 : vec4<f32> = u_xlat5;
  let x_267 : vec4<f32> = u_xlat5;
  u_xlat35 = dot(vec3<f32>(x_265.x, x_265.y, x_265.z), vec3<f32>(x_267.x, x_267.y, x_267.z));
  let x_270 : f32 = u_xlat35;
  u_xlat35 = sqrt(x_270);
  let x_272 : f32 = u_xlat34;
  let x_274 : f32 = u_xlat35;
  u_xlat35 = (-(x_272) + x_274);
  let x_278 : f32 = x_49.unity_ShadowFadeCenterAndType.w;
  let x_279 : f32 = u_xlat35;
  let x_281 : f32 = u_xlat34;
  u_xlat34 = ((x_278 * x_279) + x_281);
  let x_283 : f32 = u_xlat34;
  let x_285 : f32 = x_49.x_LightShadowData.z;
  let x_288 : f32 = x_49.x_LightShadowData.w;
  u_xlat34 = ((x_283 * x_285) + x_288);
  let x_290 : f32 = u_xlat34;
  u_xlat34 = clamp(x_290, 0.0f, 1.0f);
  let x_298 : f32 = x_49.unity_ProbeVolumeParams.x;
  u_xlatb35 = (x_298 == 1.0f);
  let x_300 : bool = u_xlatb35;
  if (x_300) {
    let x_304 : f32 = x_49.unity_ProbeVolumeParams.y;
    u_xlatb35 = (x_304 == 1.0f);
    let x_306 : vec3<f32> = vs_TEXCOORD5;
    let x_310 : vec4<f32> = x_49.unity_ProbeVolumeWorldToObject[1i];
    let x_312 : vec3<f32> = (vec3<f32>(x_306.y, x_306.y, x_306.y) * vec3<f32>(x_310.x, x_310.y, x_310.z));
    let x_313 : vec4<f32> = u_xlat5;
    u_xlat5 = vec4<f32>(x_312.x, x_312.y, x_312.z, x_313.w);
    let x_316 : vec4<f32> = x_49.unity_ProbeVolumeWorldToObject[0i];
    let x_318 : vec3<f32> = vs_TEXCOORD5;
    let x_321 : vec4<f32> = u_xlat5;
    let x_323 : vec3<f32> = ((vec3<f32>(x_316.x, x_316.y, x_316.z) * vec3<f32>(x_318.x, x_318.x, x_318.x)) + vec3<f32>(x_321.x, x_321.y, x_321.z));
    let x_324 : vec4<f32> = u_xlat5;
    u_xlat5 = vec4<f32>(x_323.x, x_323.y, x_323.z, x_324.w);
    let x_327 : vec4<f32> = x_49.unity_ProbeVolumeWorldToObject[2i];
    let x_329 : vec3<f32> = vs_TEXCOORD5;
    let x_332 : vec4<f32> = u_xlat5;
    let x_334 : vec3<f32> = ((vec3<f32>(x_327.x, x_327.y, x_327.z) * vec3<f32>(x_329.z, x_329.z, x_329.z)) + vec3<f32>(x_332.x, x_332.y, x_332.z));
    let x_335 : vec4<f32> = u_xlat5;
    u_xlat5 = vec4<f32>(x_334.x, x_334.y, x_334.z, x_335.w);
    let x_337 : vec4<f32> = u_xlat5;
    let x_340 : vec4<f32> = x_49.unity_ProbeVolumeWorldToObject[3i];
    let x_342 : vec3<f32> = (vec3<f32>(x_337.x, x_337.y, x_337.z) + vec3<f32>(x_340.x, x_340.y, x_340.z));
    let x_343 : vec4<f32> = u_xlat5;
    u_xlat5 = vec4<f32>(x_342.x, x_342.y, x_342.z, x_343.w);
    let x_345 : bool = u_xlatb35;
    if (x_345) {
      let x_349 : vec4<f32> = u_xlat5;
      x_346 = vec3<f32>(x_349.x, x_349.y, x_349.z);
    } else {
      let x_352 : vec3<f32> = vs_TEXCOORD5;
      x_346 = x_352;
    }
    let x_353 : vec3<f32> = x_346;
    let x_354 : vec4<f32> = u_xlat5;
    u_xlat5 = vec4<f32>(x_353.x, x_353.y, x_353.z, x_354.w);
    let x_356 : vec4<f32> = u_xlat5;
    let x_360 : vec3<f32> = x_49.unity_ProbeVolumeMin;
    let x_362 : vec3<f32> = (vec3<f32>(x_356.x, x_356.y, x_356.z) + -(x_360));
    let x_363 : vec4<f32> = u_xlat5;
    u_xlat5 = vec4<f32>(x_362.x, x_362.y, x_362.z, x_363.w);
    let x_365 : vec4<f32> = u_xlat5;
    let x_369 : vec3<f32> = x_49.unity_ProbeVolumeSizeInv;
    let x_370 : vec3<f32> = (vec3<f32>(x_365.x, x_365.y, x_365.z) * x_369);
    let x_371 : vec4<f32> = u_xlat5;
    u_xlat5 = vec4<f32>(x_371.x, x_370.x, x_370.y, x_370.z);
    let x_374 : f32 = u_xlat5.y;
    u_xlat35 = ((x_374 * 0.25f) + 0.75f);
    let x_381 : f32 = x_49.unity_ProbeVolumeParams.z;
    u_xlat36 = ((x_381 * 0.5f) + 0.75f);
    let x_385 : f32 = u_xlat35;
    let x_386 : f32 = u_xlat36;
    u_xlat5.x = max(x_385, x_386);
    let x_397 : vec4<f32> = u_xlat5;
    let x_399 : vec4<f32> = textureSample(unity_ProbeVolumeSH, samplerunity_ProbeVolumeSH, vec3<f32>(x_397.x, x_397.z, x_397.w));
    u_xlat5 = x_399;
  } else {
    u_xlat5.x = 1.0f;
    u_xlat5.y = 1.0f;
    u_xlat5.z = 1.0f;
    u_xlat5.w = 1.0f;
  }
  let x_405 : vec4<f32> = u_xlat5;
  let x_407 : vec4<f32> = x_49.unity_OcclusionMaskSelector;
  u_xlat35 = dot(x_405, x_407);
  let x_409 : f32 = u_xlat35;
  u_xlat35 = clamp(x_409, 0.0f, 1.0f);
  let x_412 : f32 = u_xlat34;
  u_xlatb36 = (x_412 < 0.99000001f);
  let x_415 : bool = u_xlatb36;
  if (x_415) {
    let x_418 : vec3<f32> = vs_TEXCOORD5;
    let x_421 : vec4<f32> = x_49.unity_WorldToShadow[0i][1i];
    u_xlat5 = (vec4<f32>(x_418.y, x_418.y, x_418.y, x_418.y) * x_421);
    let x_424 : vec4<f32> = x_49.unity_WorldToShadow[0i][0i];
    let x_425 : vec3<f32> = vs_TEXCOORD5;
    let x_428 : vec4<f32> = u_xlat5;
    u_xlat5 = ((x_424 * vec4<f32>(x_425.x, x_425.x, x_425.x, x_425.x)) + x_428);
    let x_431 : vec4<f32> = x_49.unity_WorldToShadow[0i][2i];
    let x_432 : vec3<f32> = vs_TEXCOORD5;
    let x_435 : vec4<f32> = u_xlat5;
    u_xlat5 = ((x_431 * vec4<f32>(x_432.z, x_432.z, x_432.z, x_432.z)) + x_435);
    let x_437 : vec4<f32> = u_xlat5;
    let x_439 : vec4<f32> = x_49.unity_WorldToShadow[0i][3i];
    u_xlat5 = (x_437 + x_439);
    let x_441 : vec4<f32> = u_xlat5;
    let x_443 : vec4<f32> = u_xlat5;
    let x_445 : vec3<f32> = (vec3<f32>(x_441.x, x_441.y, x_441.z) / vec3<f32>(x_443.w, x_443.w, x_443.w));
    let x_446 : vec4<f32> = u_xlat5;
    u_xlat5 = vec4<f32>(x_445.x, x_445.y, x_445.z, x_446.w);
    let x_448 : vec4<f32> = u_xlat5;
    let x_452 : vec4<f32> = x_49.x_ShadowMapTexture_TexelSize;
    let x_456 : vec2<f32> = ((vec2<f32>(x_448.x, x_448.y) * vec2<f32>(x_452.z, x_452.w)) + vec2<f32>(0.5f, 0.5f));
    let x_457 : vec4<f32> = u_xlat6;
    u_xlat6 = vec4<f32>(x_456.x, x_456.y, x_457.z, x_457.w);
    let x_459 : vec4<f32> = u_xlat6;
    let x_461 : vec2<f32> = floor(vec2<f32>(x_459.x, x_459.y));
    let x_462 : vec4<f32> = u_xlat6;
    u_xlat6 = vec4<f32>(x_461.x, x_461.y, x_462.z, x_462.w);
    let x_464 : vec4<f32> = u_xlat5;
    let x_467 : vec4<f32> = x_49.x_ShadowMapTexture_TexelSize;
    let x_470 : vec4<f32> = u_xlat6;
    let x_473 : vec2<f32> = ((vec2<f32>(x_464.x, x_464.y) * vec2<f32>(x_467.z, x_467.w)) + -(vec2<f32>(x_470.x, x_470.y)));
    let x_474 : vec4<f32> = u_xlat5;
    u_xlat5 = vec4<f32>(x_473.x, x_473.y, x_474.z, x_474.w);
    let x_477 : vec4<f32> = u_xlat5;
    u_xlat7 = (vec4<f32>(x_477.x, x_477.x, x_477.y, x_477.y) + vec4<f32>(0.5f, 1.0f, 0.5f, 1.0f));
    let x_482 : vec4<f32> = u_xlat7;
    let x_484 : vec4<f32> = u_xlat7;
    let x_486 : vec2<f32> = (vec2<f32>(x_482.x, x_482.z) * vec2<f32>(x_484.x, x_484.z));
    let x_487 : vec4<f32> = u_xlat8;
    u_xlat8 = vec4<f32>(x_486.x, x_487.y, x_487.z, x_486.y);
    let x_491 : vec4<f32> = u_xlat8;
    let x_494 : vec4<f32> = u_xlat5;
    u_xlat28 = ((vec2<f32>(x_491.x, x_491.w) * vec2<f32>(0.5f, 0.5f)) + -(vec2<f32>(x_494.x, x_494.y)));
    let x_498 : vec4<f32> = u_xlat5;
    let x_502 : vec2<f32> = (-(vec2<f32>(x_498.x, x_498.y)) + vec2<f32>(1.0f, 1.0f));
    let x_503 : vec4<f32> = u_xlat7;
    u_xlat7 = vec4<f32>(x_502.x, x_503.y, x_502.y, x_503.w);
    let x_506 : vec4<f32> = u_xlat5;
    let x_509 : vec2<f32> = min(vec2<f32>(x_506.x, x_506.y), vec2<f32>(0.0f, 0.0f));
    let x_510 : vec4<f32> = u_xlat9;
    u_xlat9 = vec4<f32>(x_509.x, x_509.y, x_510.z, x_510.w);
    let x_512 : vec4<f32> = u_xlat9;
    let x_515 : vec4<f32> = u_xlat9;
    let x_518 : vec4<f32> = u_xlat7;
    let x_520 : vec2<f32> = ((-(vec2<f32>(x_512.x, x_512.y)) * vec2<f32>(x_515.x, x_515.y)) + vec2<f32>(x_518.x, x_518.z));
    let x_521 : vec4<f32> = u_xlat7;
    u_xlat7 = vec4<f32>(x_520.x, x_521.y, x_520.y, x_521.w);
    let x_523 : vec4<f32> = u_xlat5;
    let x_525 : vec2<f32> = max(vec2<f32>(x_523.x, x_523.y), vec2<f32>(0.0f, 0.0f));
    let x_526 : vec4<f32> = u_xlat5;
    u_xlat5 = vec4<f32>(x_525.x, x_525.y, x_526.z, x_526.w);
    let x_528 : vec4<f32> = u_xlat5;
    let x_531 : vec4<f32> = u_xlat5;
    let x_534 : vec4<f32> = u_xlat7;
    let x_536 : vec2<f32> = ((-(vec2<f32>(x_528.x, x_528.y)) * vec2<f32>(x_531.x, x_531.y)) + vec2<f32>(x_534.y, x_534.w));
    let x_537 : vec4<f32> = u_xlat5;
    u_xlat5 = vec4<f32>(x_536.x, x_536.y, x_537.z, x_537.w);
    let x_540 : f32 = u_xlat28.x;
    u_xlat9.x = x_540;
    let x_543 : f32 = u_xlat7.x;
    u_xlat9.y = x_543;
    let x_546 : f32 = u_xlat5.x;
    u_xlat9.z = x_546;
    let x_549 : f32 = u_xlat8.x;
    u_xlat9.w = x_549;
    let x_551 : vec4<f32> = u_xlat9;
    u_xlat9 = (x_551 * vec4<f32>(0.444440007f, 0.444440007f, 0.444440007f, 0.222220004f));
    let x_557 : f32 = u_xlat28.y;
    u_xlat8.x = x_557;
    let x_560 : f32 = u_xlat7.z;
    u_xlat8.y = x_560;
    let x_563 : f32 = u_xlat5.y;
    u_xlat8.z = x_563;
    let x_565 : vec4<f32> = u_xlat8;
    u_xlat7 = (x_565 * vec4<f32>(0.444440007f, 0.444440007f, 0.444440007f, 0.222220004f));
    let x_567 : vec4<f32> = u_xlat9;
    let x_569 : vec4<f32> = u_xlat9;
    u_xlat8 = (vec4<f32>(x_567.y, x_567.w, x_567.y, x_567.w) + vec4<f32>(x_569.x, x_569.z, x_569.x, x_569.z));
    let x_573 : vec4<f32> = u_xlat7;
    let x_575 : vec4<f32> = u_xlat7;
    u_xlat10 = (vec4<f32>(x_573.y, x_573.y, x_573.w, x_573.w) + vec4<f32>(x_575.x, x_575.x, x_575.z, x_575.z));
    let x_578 : vec4<f32> = u_xlat9;
    let x_580 : vec4<f32> = u_xlat8;
    let x_582 : vec2<f32> = (vec2<f32>(x_578.y, x_578.w) / vec2<f32>(x_580.z, x_580.w));
    let x_583 : vec4<f32> = u_xlat5;
    u_xlat5 = vec4<f32>(x_582.x, x_582.y, x_583.z, x_583.w);
    let x_585 : vec4<f32> = u_xlat5;
    let x_589 : vec2<f32> = (vec2<f32>(x_585.x, x_585.y) + vec2<f32>(-1.5f, 0.5f));
    let x_590 : vec4<f32> = u_xlat5;
    u_xlat5 = vec4<f32>(x_589.x, x_589.y, x_590.z, x_590.w);
    let x_592 : vec4<f32> = u_xlat7;
    let x_594 : vec4<f32> = u_xlat10;
    u_xlat28 = (vec2<f32>(x_592.y, x_592.w) / vec2<f32>(x_594.y, x_594.w));
    let x_597 : vec2<f32> = u_xlat28;
    u_xlat28 = (x_597 + vec2<f32>(-1.5f, 0.5f));
    let x_599 : vec4<f32> = u_xlat5;
    let x_602 : vec4<f32> = x_49.x_ShadowMapTexture_TexelSize;
    let x_604 : vec2<f32> = (vec2<f32>(x_599.x, x_599.y) * vec2<f32>(x_602.x, x_602.x));
    let x_605 : vec4<f32> = u_xlat7;
    u_xlat7 = vec4<f32>(x_604.x, x_604.y, x_605.z, x_605.w);
    let x_607 : vec2<f32> = u_xlat28;
    let x_609 : vec4<f32> = x_49.x_ShadowMapTexture_TexelSize;
    let x_611 : vec2<f32> = (x_607 * vec2<f32>(x_609.y, x_609.y));
    let x_612 : vec4<f32> = u_xlat7;
    u_xlat7 = vec4<f32>(x_612.x, x_612.y, x_611.x, x_611.y);
    let x_614 : vec4<f32> = u_xlat8;
    let x_615 : vec4<f32> = u_xlat10;
    u_xlat8 = (x_614 * x_615);
    let x_617 : vec4<f32> = u_xlat6;
    let x_620 : vec4<f32> = x_49.x_ShadowMapTexture_TexelSize;
    let x_623 : vec4<f32> = u_xlat7;
    u_xlat9 = ((vec4<f32>(x_617.x, x_617.y, x_617.x, x_617.y) * vec4<f32>(x_620.x, x_620.y, x_620.x, x_620.y)) + vec4<f32>(x_623.x, x_623.z, x_623.y, x_623.z));
    let x_627 : vec4<f32> = u_xlat9;
    let x_628 : vec2<f32> = vec2<f32>(x_627.x, x_627.y);
    let x_630 : f32 = u_xlat5.z;
    txVec0 = vec3<f32>(x_628.x, x_628.y, x_630);
    let x_642 : vec3<f32> = txVec0;
    let x_644 : f32 = textureSampleCompareLevel(x_ShadowMapTexture, sampler_ShadowMapTexture, x_642.xy, x_642.z);
    u_xlat36 = x_644;
    let x_646 : vec4<f32> = u_xlat9;
    let x_647 : vec2<f32> = vec2<f32>(x_646.z, x_646.w);
    let x_649 : f32 = u_xlat5.z;
    txVec1 = vec3<f32>(x_647.x, x_647.y, x_649);
    let x_656 : vec3<f32> = txVec1;
    let x_658 : f32 = textureSampleCompareLevel(x_ShadowMapTexture, sampler_ShadowMapTexture, x_656.xy, x_656.z);
    u_xlat5.x = x_658;
    let x_661 : f32 = u_xlat5.x;
    let x_663 : f32 = u_xlat8.y;
    u_xlat5.x = (x_661 * x_663);
    let x_667 : f32 = u_xlat8.x;
    let x_668 : f32 = u_xlat36;
    let x_671 : f32 = u_xlat5.x;
    u_xlat36 = ((x_667 * x_668) + x_671);
    let x_673 : vec4<f32> = u_xlat6;
    let x_676 : vec4<f32> = x_49.x_ShadowMapTexture_TexelSize;
    let x_679 : vec4<f32> = u_xlat7;
    u_xlat6 = ((vec4<f32>(x_673.x, x_673.y, x_673.x, x_673.y) * vec4<f32>(x_676.x, x_676.y, x_676.x, x_676.y)) + vec4<f32>(x_679.x, x_679.w, x_679.y, x_679.w));
    let x_683 : vec4<f32> = u_xlat6;
    let x_684 : vec2<f32> = vec2<f32>(x_683.x, x_683.y);
    let x_686 : f32 = u_xlat5.z;
    txVec2 = vec3<f32>(x_684.x, x_684.y, x_686);
    let x_693 : vec3<f32> = txVec2;
    let x_695 : f32 = textureSampleCompareLevel(x_ShadowMapTexture, sampler_ShadowMapTexture, x_693.xy, x_693.z);
    u_xlat5.x = x_695;
    let x_698 : f32 = u_xlat8.z;
    let x_700 : f32 = u_xlat5.x;
    let x_702 : f32 = u_xlat36;
    u_xlat36 = ((x_698 * x_700) + x_702);
    let x_705 : vec4<f32> = u_xlat6;
    let x_706 : vec2<f32> = vec2<f32>(x_705.z, x_705.w);
    let x_708 : f32 = u_xlat5.z;
    txVec3 = vec3<f32>(x_706.x, x_706.y, x_708);
    let x_715 : vec3<f32> = txVec3;
    let x_717 : f32 = textureSampleCompareLevel(x_ShadowMapTexture, sampler_ShadowMapTexture, x_715.xy, x_715.z);
    u_xlat5.x = x_717;
    let x_720 : f32 = u_xlat8.w;
    let x_722 : f32 = u_xlat5.x;
    let x_724 : f32 = u_xlat36;
    u_xlat36 = ((x_720 * x_722) + x_724);
    let x_727 : f32 = x_49.x_LightShadowData.x;
    u_xlat5.x = (-(x_727) + 1.0f);
    let x_731 : f32 = u_xlat36;
    let x_733 : f32 = u_xlat5.x;
    let x_736 : f32 = x_49.x_LightShadowData.x;
    u_xlat36 = ((x_731 * x_733) + x_736);
  } else {
    u_xlat36 = 1.0f;
  }
  let x_739 : f32 = u_xlat35;
  let x_740 : f32 = u_xlat36;
  u_xlat35 = (x_739 + -(x_740));
  let x_743 : f32 = u_xlat34;
  let x_744 : f32 = u_xlat35;
  let x_746 : f32 = u_xlat36;
  u_xlat34 = ((x_743 * x_744) + x_746);
  let x_749 : f32 = u_xlat4.z;
  u_xlatb35 = (0.0f < x_749);
  let x_751 : bool = u_xlatb35;
  u_xlat35 = select(0.0f, 1.0f, x_751);
  let x_753 : vec4<f32> = u_xlat4;
  let x_755 : vec4<f32> = u_xlat4;
  let x_757 : vec2<f32> = (vec2<f32>(x_753.x, x_753.y) / vec2<f32>(x_755.w, x_755.w));
  let x_758 : vec4<f32> = u_xlat5;
  u_xlat5 = vec4<f32>(x_757.x, x_757.y, x_758.z, x_758.w);
  let x_760 : vec4<f32> = u_xlat5;
  let x_762 : vec2<f32> = (vec2<f32>(x_760.x, x_760.y) + vec2<f32>(0.5f, 0.5f));
  let x_763 : vec4<f32> = u_xlat5;
  u_xlat5 = vec4<f32>(x_762.x, x_762.y, x_763.z, x_763.w);
  let x_770 : vec4<f32> = u_xlat5;
  let x_772 : vec4<f32> = textureSample(x_LightTexture0, sampler_LightTexture0, vec2<f32>(x_770.x, x_770.y));
  u_xlat36 = x_772.w;
  let x_774 : f32 = u_xlat35;
  let x_775 : f32 = u_xlat36;
  u_xlat35 = (x_774 * x_775);
  let x_777 : vec4<f32> = u_xlat4;
  let x_779 : vec4<f32> = u_xlat4;
  u_xlat36 = dot(vec3<f32>(x_777.x, x_777.y, x_777.z), vec3<f32>(x_779.x, x_779.y, x_779.z));
  let x_787 : f32 = u_xlat36;
  let x_789 : vec4<f32> = textureSample(x_LightTextureB0, sampler_LightTextureB0, vec2<f32>(x_787, x_787));
  u_xlat36 = x_789.x;
  let x_791 : f32 = u_xlat35;
  let x_792 : f32 = u_xlat36;
  u_xlat35 = (x_791 * x_792);
  let x_794 : f32 = u_xlat34;
  let x_795 : f32 = u_xlat35;
  u_xlat34 = (x_794 * x_795);
  let x_799 : f32 = vs_TEXCOORD2.w;
  u_xlat4.x = x_799;
  let x_802 : f32 = vs_TEXCOORD3.w;
  u_xlat4.y = x_802;
  let x_805 : f32 = vs_TEXCOORD4.w;
  u_xlat4.z = x_805;
  let x_807 : vec4<f32> = u_xlat4;
  let x_809 : vec4<f32> = u_xlat4;
  u_xlat35 = dot(vec3<f32>(x_807.x, x_807.y, x_807.z), vec3<f32>(x_809.x, x_809.y, x_809.z));
  let x_812 : f32 = u_xlat35;
  u_xlat35 = inverseSqrt(x_812);
  let x_814 : f32 = u_xlat35;
  let x_816 : vec4<f32> = u_xlat4;
  let x_818 : vec3<f32> = (vec3<f32>(x_814, x_814, x_814) * vec3<f32>(x_816.x, x_816.y, x_816.z));
  let x_819 : vec4<f32> = u_xlat5;
  u_xlat5 = vec4<f32>(x_818.x, x_818.y, x_818.z, x_819.w);
  let x_821 : f32 = u_xlat34;
  let x_825 : vec4<f32> = x_49.x_LightColor0;
  let x_827 : vec3<f32> = (vec3<f32>(x_821, x_821, x_821) * vec3<f32>(x_825.x, x_825.y, x_825.z));
  let x_828 : vec4<f32> = u_xlat6;
  u_xlat6 = vec4<f32>(x_827.x, x_827.y, x_827.z, x_828.w);
  let x_832 : f32 = u_xlat0.y;
  let x_836 : f32 = x_49.x_GlossMapScale;
  u_xlat11 = ((-(x_832) * x_836) + 1.0f);
  let x_839 : vec4<f32> = u_xlat4;
  let x_841 : f32 = u_xlat35;
  let x_844 : vec3<f32> = u_xlat3;
  let x_846 : vec3<f32> = ((vec3<f32>(x_839.x, x_839.y, x_839.z) * vec3<f32>(x_841, x_841, x_841)) + -(x_844));
  let x_847 : vec4<f32> = u_xlat4;
  u_xlat4 = vec4<f32>(x_846.x, x_846.y, x_846.z, x_847.w);
  let x_849 : vec4<f32> = u_xlat4;
  let x_851 : vec4<f32> = u_xlat4;
  u_xlat34 = dot(vec3<f32>(x_849.x, x_849.y, x_849.z), vec3<f32>(x_851.x, x_851.y, x_851.z));
  let x_854 : f32 = u_xlat34;
  u_xlat34 = max(x_854, 0.001f);
  let x_857 : f32 = u_xlat34;
  u_xlat34 = inverseSqrt(x_857);
  let x_859 : f32 = u_xlat34;
  let x_861 : vec4<f32> = u_xlat4;
  let x_863 : vec3<f32> = (vec3<f32>(x_859, x_859, x_859) * vec3<f32>(x_861.x, x_861.y, x_861.z));
  let x_864 : vec4<f32> = u_xlat4;
  u_xlat4 = vec4<f32>(x_863.x, x_863.y, x_863.z, x_864.w);
  let x_866 : vec4<f32> = u_xlat2;
  let x_868 : vec3<f32> = u_xlat3;
  u_xlat34 = dot(vec3<f32>(x_866.x, x_866.y, x_866.z), -(x_868));
  let x_871 : vec4<f32> = u_xlat2;
  let x_873 : vec4<f32> = u_xlat5;
  u_xlat35 = dot(vec3<f32>(x_871.x, x_871.y, x_871.z), vec3<f32>(x_873.x, x_873.y, x_873.z));
  let x_876 : f32 = u_xlat35;
  u_xlat35 = clamp(x_876, 0.0f, 1.0f);
  let x_878 : vec4<f32> = u_xlat2;
  let x_880 : vec4<f32> = u_xlat4;
  u_xlat2.x = dot(vec3<f32>(x_878.x, x_878.y, x_878.z), vec3<f32>(x_880.x, x_880.y, x_880.z));
  let x_885 : f32 = u_xlat2.x;
  u_xlat2.x = clamp(x_885, 0.0f, 1.0f);
  let x_888 : vec4<f32> = u_xlat5;
  let x_890 : vec4<f32> = u_xlat4;
  u_xlat13.x = dot(vec3<f32>(x_888.x, x_888.y, x_888.z), vec3<f32>(x_890.x, x_890.y, x_890.z));
  let x_895 : f32 = u_xlat13.x;
  u_xlat13.x = clamp(x_895, 0.0f, 1.0f);
  let x_900 : f32 = u_xlat13.x;
  let x_902 : f32 = u_xlat13.x;
  u_xlat24 = (x_900 * x_902);
  let x_904 : f32 = u_xlat24;
  let x_906 : f32 = u_xlat11;
  u_xlat24 = dot(vec2<f32>(x_904, x_904), vec2<f32>(x_906, x_906));
  let x_909 : f32 = u_xlat24;
  u_xlat24 = (x_909 + -0.5f);
  let x_912 : f32 = u_xlat35;
  u_xlat3.x = (-(x_912) + 1.0f);
  let x_918 : f32 = u_xlat3.x;
  let x_920 : f32 = u_xlat3.x;
  u_xlat14 = (x_918 * x_920);
  let x_922 : f32 = u_xlat14;
  let x_923 : f32 = u_xlat14;
  u_xlat14 = (x_922 * x_923);
  let x_926 : f32 = u_xlat3.x;
  let x_927 : f32 = u_xlat14;
  u_xlat3.x = (x_926 * x_927);
  let x_930 : f32 = u_xlat24;
  let x_932 : f32 = u_xlat3.x;
  u_xlat3.x = ((x_930 * x_932) + 1.0f);
  let x_936 : f32 = u_xlat34;
  u_xlat14 = (-(abs(x_936)) + 1.0f);
  let x_941 : f32 = u_xlat14;
  let x_942 : f32 = u_xlat14;
  u_xlat25 = (x_941 * x_942);
  let x_944 : f32 = u_xlat25;
  let x_945 : f32 = u_xlat25;
  u_xlat25 = (x_944 * x_945);
  let x_947 : f32 = u_xlat14;
  let x_948 : f32 = u_xlat25;
  u_xlat14 = (x_947 * x_948);
  let x_950 : f32 = u_xlat24;
  let x_951 : f32 = u_xlat14;
  u_xlat24 = ((x_950 * x_951) + 1.0f);
  let x_954 : f32 = u_xlat24;
  let x_956 : f32 = u_xlat3.x;
  u_xlat24 = (x_954 * x_956);
  let x_958 : f32 = u_xlat35;
  let x_959 : f32 = u_xlat24;
  u_xlat24 = (x_958 * x_959);
  let x_961 : f32 = u_xlat11;
  let x_962 : f32 = u_xlat11;
  u_xlat11 = (x_961 * x_962);
  let x_964 : f32 = u_xlat11;
  u_xlat11 = max(x_964, 0.002f);
  let x_967 : f32 = u_xlat11;
  u_xlat3.x = (-(x_967) + 1.0f);
  let x_971 : f32 = u_xlat34;
  let x_974 : f32 = u_xlat3.x;
  let x_976 : f32 = u_xlat11;
  u_xlat14 = ((abs(x_971) * x_974) + x_976);
  let x_978 : f32 = u_xlat35;
  let x_980 : f32 = u_xlat3.x;
  let x_982 : f32 = u_xlat11;
  u_xlat3.x = ((x_978 * x_980) + x_982);
  let x_985 : f32 = u_xlat34;
  let x_988 : f32 = u_xlat3.x;
  u_xlat34 = (abs(x_985) * x_988);
  let x_990 : f32 = u_xlat35;
  let x_991 : f32 = u_xlat14;
  let x_993 : f32 = u_xlat34;
  u_xlat34 = ((x_990 * x_991) + x_993);
  let x_995 : f32 = u_xlat34;
  u_xlat34 = (x_995 + 0.00001f);
  let x_998 : f32 = u_xlat34;
  u_xlat34 = (0.5f / x_998);
  let x_1000 : f32 = u_xlat11;
  let x_1001 : f32 = u_xlat11;
  u_xlat11 = (x_1000 * x_1001);
  let x_1004 : f32 = u_xlat2.x;
  let x_1005 : f32 = u_xlat11;
  let x_1008 : f32 = u_xlat2.x;
  u_xlat3.x = ((x_1004 * x_1005) + -(x_1008));
  let x_1013 : f32 = u_xlat3.x;
  let x_1015 : f32 = u_xlat2.x;
  u_xlat2.x = ((x_1013 * x_1015) + 1.0f);
  let x_1019 : f32 = u_xlat11;
  u_xlat11 = (x_1019 * 0.318309873f);
  let x_1023 : f32 = u_xlat2.x;
  let x_1025 : f32 = u_xlat2.x;
  u_xlat2.x = ((x_1023 * x_1025) + 0.0000001f);
  let x_1030 : f32 = u_xlat11;
  let x_1032 : f32 = u_xlat2.x;
  u_xlat11 = (x_1030 / x_1032);
  let x_1034 : f32 = u_xlat11;
  let x_1035 : f32 = u_xlat34;
  u_xlat11 = (x_1034 * x_1035);
  let x_1037 : f32 = u_xlat35;
  let x_1038 : f32 = u_xlat11;
  u_xlat11 = (x_1037 * x_1038);
  let x_1040 : f32 = u_xlat11;
  u_xlat11 = (x_1040 * 3.141592741f);
  let x_1043 : f32 = u_xlat11;
  u_xlat11 = max(x_1043, 0.0f);
  let x_1045 : vec3<f32> = u_xlat1;
  let x_1046 : vec3<f32> = u_xlat1;
  u_xlat34 = dot(x_1045, x_1046);
  let x_1049 : f32 = u_xlat34;
  u_xlatb34 = !((x_1049 == 0.0f));
  let x_1051 : bool = u_xlatb34;
  u_xlat34 = select(0.0f, 1.0f, x_1051);
  let x_1053 : f32 = u_xlat11;
  let x_1054 : f32 = u_xlat34;
  u_xlat11 = (x_1053 * x_1054);
  let x_1056 : f32 = u_xlat24;
  let x_1058 : vec4<f32> = u_xlat6;
  let x_1060 : vec3<f32> = (vec3<f32>(x_1056, x_1056, x_1056) * vec3<f32>(x_1058.x, x_1058.y, x_1058.z));
  let x_1061 : vec4<f32> = u_xlat2;
  u_xlat2 = vec4<f32>(x_1060.x, x_1061.y, x_1060.y, x_1060.z);
  let x_1063 : vec4<f32> = u_xlat6;
  let x_1065 : f32 = u_xlat11;
  u_xlat3 = (vec3<f32>(x_1063.x, x_1063.y, x_1063.z) * vec3<f32>(x_1065, x_1065, x_1065));
  let x_1069 : f32 = u_xlat13.x;
  u_xlat11 = (-(x_1069) + 1.0f);
  let x_1072 : f32 = u_xlat11;
  let x_1073 : f32 = u_xlat11;
  u_xlat34 = (x_1072 * x_1073);
  let x_1075 : f32 = u_xlat34;
  let x_1076 : f32 = u_xlat34;
  u_xlat34 = (x_1075 * x_1076);
  let x_1078 : f32 = u_xlat11;
  let x_1079 : f32 = u_xlat34;
  u_xlat11 = (x_1078 * x_1079);
  let x_1081 : vec3<f32> = u_xlat1;
  let x_1084 : vec3<f32> = (-(x_1081) + vec3<f32>(1.0f, 1.0f, 1.0f));
  let x_1085 : vec4<f32> = u_xlat4;
  u_xlat4 = vec4<f32>(x_1084.x, x_1084.y, x_1084.z, x_1085.w);
  let x_1087 : vec4<f32> = u_xlat4;
  let x_1089 : f32 = u_xlat11;
  let x_1092 : vec3<f32> = u_xlat1;
  u_xlat1 = ((vec3<f32>(x_1087.x, x_1087.y, x_1087.z) * vec3<f32>(x_1089, x_1089, x_1089)) + x_1092);
  let x_1094 : vec3<f32> = u_xlat1;
  let x_1095 : vec3<f32> = u_xlat3;
  u_xlat1 = (x_1094 * x_1095);
  let x_1099 : vec4<f32> = u_xlat0;
  let x_1101 : vec4<f32> = u_xlat2;
  let x_1104 : vec3<f32> = u_xlat1;
  let x_1105 : vec3<f32> = ((vec3<f32>(x_1099.x, x_1099.z, x_1099.w) * vec3<f32>(x_1101.x, x_1101.z, x_1101.w)) + x_1104);
  let x_1106 : vec4<f32> = SV_Target0;
  SV_Target0 = vec4<f32>(x_1105.x, x_1105.y, x_1105.z, x_1106.w);
  SV_Target0.w = 1.0f;
  return;
}

struct main_out {
  @location(0)
  SV_Target0_1 : vec4<f32>,
}

@fragment
fn main(@location(0) vs_TEXCOORD0_param : vec4<f32>, @location(3) vs_TEXCOORD3_param : vec4<f32>, @location(2) vs_TEXCOORD2_param : vec4<f32>, @location(4) vs_TEXCOORD4_param : vec4<f32>, @location(1) vs_TEXCOORD1_param : vec4<f32>, @location(5) vs_TEXCOORD5_param : vec3<f32>, @builtin(position) gl_FragCoord_param : vec4<f32>) -> main_out {
  vs_TEXCOORD0 = vs_TEXCOORD0_param;
  vs_TEXCOORD3 = vs_TEXCOORD3_param;
  vs_TEXCOORD2 = vs_TEXCOORD2_param;
  vs_TEXCOORD4 = vs_TEXCOORD4_param;
  vs_TEXCOORD1 = vs_TEXCOORD1_param;
  vs_TEXCOORD5 = vs_TEXCOORD5_param;
  gl_FragCoord = gl_FragCoord_param;
  main_1();
  return main_out(SV_Target0);
}

